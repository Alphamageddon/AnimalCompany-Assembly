Type: AnimalCompany.PlayerView

Method: AnimalCompany.AvatarSystem.AvatarView get_avatarView()

Disassembly:
	0x01DC93B0 MOVZ W8, 0x1
	0x01DC93B4 STRB W8, [X21 + 0x783]

ISIL:
	001 Move X0, [X0+168]
	002 Return X0

Method: AnimalCompany.PlayerView/Mode get_mode()

Disassembly:
	0x01DC93B8 LDR X8, [X22]
	0x01DC93BC LDR X8, [X8 + 0xB8]

ISIL:
	001 Move W0, [X0+224]
	002 Return X0

Method: UnityEngine.Transform get_ragdollHead()

Disassembly:
	0x01DC4EBC LDR X21, [X19 + 0xB0]
	0x01DC4EC0 CBNZ W8, 0x1DC4ED8
	0x01DC4EC4 ADRP X0, 0x232F000
	0x01DC4EC8 LDR X0, [X0 + 0x5A0]
	0x01DC4ECC BL 0x1C16CF4
	0x01DC4ED0 MOVZ W8, 0x1
	0x01DC4ED4 STRB W8, [X23 + 0x783]
	0x01DC4ED8 LDR X8, [X22]
	0x01DC4EDC ADRP X24, 0x2614000
	0x01DC4EE0 LDRB W9, [X24 + 0x793]
	0x01DC4EE4 LDR X8, [X8 + 0xB8]
	0x01DC4EE8 LDP S13, S12, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {15}
	005 Move W9, [X8+24]
	006 Compare W9, 0
	007 JumpIfEqual {16}
	008 Move X0, [X8+32]
	009 Compare X0, 0
	010 JumpIfEqual {15}
	011 Move X1, X31
	012 Move X30, [X31+16]
	013 Call GameObject.get_transform, X0
	014 Return X0
	015 Call 0x1C17F20
	016 Call 0x1C17F28

Method: UnityEngine.Transform get_ragdollHandLeft()

Disassembly:
	0x01DC4F20 LDR X8, [X8]
	0x01DC4F24 MOV V2.16B, V11.16B
	0x01DC4F28 MOV X1, X31
	0x01DC4F2C LDR X8, [X8 + 0xB8]
	0x01DC4F30 LDP S5, S6, [X8 + 0x8]
	0x01DC4F34 LDP S3, S4, [X8]
	0x01DC4F38 BL 0x3C400B4
	0x01DC4F3C LDR X0, [X19 + 0xB8]
	0x01DC4F40 CBZ X0, 0x1DC50D4
	0x01DC4F44 MOV X1, X31
	0x01DC4F48 BL 0x3C3F58C
	0x01DC4F4C LDR X0, [X19 + 0xC0]
	0x01DC4F50 STR S0, [X19 + 0x110]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {14}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, [X8+40]
	008 Compare X0, 0
	009 JumpIfEqual {14}
	010 Move X1, X31
	011 Move X30, [X31+16]
	012 Call GameObject.get_transform, X0
	013 Return X0
	014 Call 0x1C17F20
	015 Call 0x1C17F28

Method: UnityEngine.Transform get_ragdollHandRight()

Disassembly:
	0x01DC4EEC LDR V11, [X8 + 0x8]
	0x01DC4EF0 CBNZ W9, 0x1DC4F08
	0x01DC4EF4 ADRP X0, 0x2330000
	0x01DC4EF8 LDR X0, [X0 + 0x5A8]
	0x01DC4EFC BL 0x1C16CF4
	0x01DC4F00 MOVZ W8, 0x1
	0x01DC4F04 STRB W8, [X24 + 0x793]
	0x01DC4F08 CBZ X21, 0x1DC50D4
	0x01DC4F0C ADRP X8, 0x2330000
	0x01DC4F10 LDR X8, [X8 + 0x5A8]
	0x01DC4F14 MOV X0, X21
	0x01DC4F18 MOV V0.16B, V13.16B
	0x01DC4F1C MOV V1.16B, V12.16B

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {14}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, [X8+48]
	008 Compare X0, 0
	009 JumpIfEqual {14}
	010 Move X1, X31
	011 Move X30, [X31+16]
	012 Call GameObject.get_transform, X0
	013 Return X0
	014 Call 0x1C17F20
	015 Call 0x1C17F28

Method: UnityEngine.Transform get_backAttachAnchor()

Disassembly:
	0x01DC93C0 LDP S0, S1, [X8]
	0x01DC93C4 LDR V2, [X8 + 0x8]

ISIL:
	001 Move X0, [X0+128]
	002 Return X0

Method: System.Void SetRagdoll(System.Boolean ragdoll, UnityEngine.Vector3 force = null)

Disassembly:
	0x01DC5E6C LDR X21, [X21 + 0x1D0]
	0x01DC5E70 MOV X19, X0
	0x01DC5E74 TBNZ X8, 0x0, 0x1DC5F34
	0x01DC5E78 ADRP X0, 0x2330000
	0x01DC5E7C LDR X0, [X0 + 0x5B0]
	0x01DC5E80 BL 0x1C16CF4
	0x01DC5E84 ADRP X0, 0x232F000
	0x01DC5E88 LDR X0, [X0 + 0xE70]
	0x01DC5E8C BL 0x1C16CF4
	0x01DC5E90 ADRP X0, 0x2333000
	0x01DC5E94 LDR X0, [X0 + 0x1A8]
	0x01DC5E98 BL 0x1C16CF4
	0x01DC5E9C ADRP X0, 0x2333000
	0x01DC5EA0 LDR X0, [X0 + 0x1B0]
	0x01DC5EA4 BL 0x1C16CF4
	0x01DC5EA8 ADRP X0, 0x2333000
	0x01DC5EAC LDR X0, [X0 + 0x1B8]
	0x01DC5EB0 BL 0x1C16CF4
	0x01DC5EB4 ADRP X0, 0x2333000
	0x01DC5EB8 LDR X0, [X0 + 0x1C0]
	0x01DC5EBC BL 0x1C16CF4
	0x01DC5EC0 ADRP X0, 0x2333000
	0x01DC5EC4 LDR X0, [X0 + 0x1C8]
	0x01DC5EC8 BL 0x1C16CF4
	0x01DC5ECC ADRP X0, 0x2333000
	0x01DC5ED0 LDR X0, [X0 + 0x1D0]
	0x01DC5ED4 BL 0x1C16CF4
	0x01DC5ED8 ADRP X0, 0x2333000
	0x01DC5EDC LDR X0, [X0 + 0x1D8]
	0x01DC5EE0 BL 0x1C16CF4
	0x01DC5EE4 ADRP X0, 0x2333000
	0x01DC5EE8 LDR X0, [X0 + 0x1E0]
	0x01DC5EEC BL 0x1C16CF4
	0x01DC5EF0 ADRP X0, 0x2333000
	0x01DC5EF4 LDR X0, [X0 + 0x1E8]
	0x01DC5EF8 BL 0x1C16CF4
	0x01DC5EFC ADRP X0, 0x2333000
	0x01DC5F00 LDR X0, [X0 + 0x1F0]
	0x01DC5F04 BL 0x1C16CF4
	0x01DC5F08 ADRP X0, 0x2333000
	0x01DC5F0C LDR X0, [X0 + 0x1F8]
	0x01DC5F10 BL 0x1C16CF4
	0x01DC5F14 ADRP X0, 0x2333000
	0x01DC5F18 LDR X0, [X0 + 0x200]
	0x01DC5F1C BL 0x1C16CF4
	0x01DC5F20 ADRP X0, 0x2331000
	0x01DC5F24 LDR X0, [X0 + 0xD98]
	0x01DC5F28 BL 0x1C16CF4
	0x01DC5F2C MOVZ W8, 0x1
	0x01DC5F30 STRB W8, [X20 + 0xB94]
	0x01DC5F34 LDR X8, [X22]
	0x01DC5F38 LDR X0, [X23]
	0x01DC5F3C LDR X8, [X8 + 0xB8]
	0x01DC5F40 LDR X20, [X8 + 0x8]
	0x01DC5F44 BL 0x1C16F10
	0x01DC5F48 LDR X2, [X21]
	0x01DC5F4C MOV X1, X19
	0x01DC5F50 MOV X3, X31
	0x01DC5F54 MOV X21, X0
	0x01DC5F58 BL 0x2A6DA40
	0x01DC5F5C MOV X0, X20
	0x01DC5F60 MOV X1, X21
	0x01DC5F64 MOV X2, X31
	0x01DC5F68 BL 0x33C0FDC
	0x01DC5F6C LDR X20, [X23]
	0x01DC5F70 CBZ X0, 0x1DC5FB4
	0x01DC5F74 MOV X1, X20
	0x01DC5F78 MOV X21, X0
	0x01DC5F7C BL 0x1C16E00
	0x01DC5F80 CBZ X0, 0x1DC6A2C
	0x01DC5F84 LDR X8, [X22]
	0x01DC5F88 LDR X8, [X8 + 0xB8]
	0x01DC5F8C STR X0, [X8 + 0x8]
	0x01DC5F90 LDR X20, [X23]
	0x01DC5F94 MOV X0, X21
	0x01DC5F98 MOV X1, X20
	0x01DC5F9C BL 0x1C16E00
	0x01DC5FA0 CBZ X0, 0x1DC6A2C
	0x01DC5FA4 LDR X8, [X22]
	0x01DC5FA8 LDR X20, [X23]
	0x01DC5FAC LDR X8, [X8 + 0xB8]
	0x01DC5FB0 B 0x1DC5FC0
	0x01DC5FB4 LDR X8, [X22]
	0x01DC5FB8 LDR X8, [X8 + 0xB8]
	0x01DC5FBC STR X31, [X8 + 0x8]
	0x01DC5FC0 ADRP X24, 0x2333000
	0x01DC5FC4 LDR X21, [X8 + 0x18]
	0x01DC5FC8 LDR X24, [X24 + 0x1A8]
	0x01DC5FCC MOV X0, X20
	0x01DC5FD0 BL 0x1C16F10
	0x01DC5FD4 LDR X2, [X24]
	0x01DC5FD8 MOV X1, X19
	0x01DC5FDC MOV X3, X31
	0x01DC5FE0 MOV X20, X0
	0x01DC5FE4 BL 0x2A6DA40
	0x01DC5FE8 MOV X0, X21
	0x01DC5FEC MOV X1, X20
	0x01DC5FF0 MOV X2, X31
	0x01DC5FF4 BL 0x33C0FDC
	0x01DC5FF8 LDR X20, [X23]
	0x01DC5FFC CBZ X0, 0x1DC6040
	0x01DC6000 MOV X1, X20
	0x01DC6004 MOV X21, X0
	0x01DC6008 BL 0x1C16E00
	0x01DC600C CBZ X0, 0x1DC6A2C
	0x01DC6010 LDR X8, [X22]
	0x01DC6014 LDR X8, [X8 + 0xB8]
	0x01DC6018 STR X0, [X8 + 0x18]
	0x01DC601C LDR X20, [X23]
	0x01DC6020 MOV X0, X21
	0x01DC6024 MOV X1, X20
	0x01DC6028 BL 0x1C16E00
	0x01DC602C CBZ X0, 0x1DC6A2C
	0x01DC6030 LDR X8, [X22]
	0x01DC6034 LDR X20, [X23]
	0x01DC6038 LDR X8, [X8 + 0xB8]
	0x01DC603C B 0x1DC604C
	0x01DC6040 LDR X8, [X22]
	0x01DC6044 LDR X8, [X8 + 0xB8]
	0x01DC6048 STR X31, [X8 + 0x18]
	0x01DC604C ADRP X24, 0x2332000
	0x01DC6050 LDR X21, [X8 + 0x10]
	0x01DC6054 LDR X24, [X24 + 0x200]
	0x01DC6058 MOV X0, X20
	0x01DC605C BL 0x1C16F10
	0x01DC6060 LDR X2, [X24]
	0x01DC6064 MOV X1, X19
	0x01DC6068 MOV X3, X31
	0x01DC606C MOV X20, X0
	0x01DC6070 BL 0x2A6DA40
	0x01DC6074 MOV X0, X21
	0x01DC6078 MOV X1, X20
	0x01DC607C MOV X2, X31
	0x01DC6080 BL 0x33C0FDC
	0x01DC6084 LDR X20, [X23]
	0x01DC6088 CBZ X0, 0x1DC60CC
	0x01DC608C MOV X1, X20
	0x01DC6090 MOV X21, X0
	0x01DC6094 BL 0x1C16E00
	0x01DC6098 CBZ X0, 0x1DC6A2C
	0x01DC609C LDR X8, [X22]
	0x01DC60A0 LDR X8, [X8 + 0xB8]
	0x01DC60A4 STR X0, [X8 + 0x10]
	0x01DC60A8 LDR X20, [X23]
	0x01DC60AC MOV X0, X21
	0x01DC60B0 MOV X1, X20
	0x01DC60B4 BL 0x1C16E00
	0x01DC60B8 CBZ X0, 0x1DC6A2C
	0x01DC60BC LDR X8, [X22]
	0x01DC60C0 LDR X20, [X23]
	0x01DC60C4 LDR X8, [X8 + 0xB8]
	0x01DC60C8 B 0x1DC60D8
	0x01DC60CC LDR X8, [X22]
	0x01DC60D0 LDR X8, [X8 + 0xB8]
	0x01DC60D4 STR X31, [X8 + 0x10]
	0x01DC60D8 ADRP X24, 0x2332000

ISIL:
	001 Move [X31-112], D13
	002 Move [X31-104], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Compare X0, 0
	015 JumpIfEqual {198}
	016 And W8, W1, 1
	017 Move [X0+224], W8
	018 Move X22, 0x232F000
	019 Move X22, [X22+1440]
	020 Move V10, V2
	021 Move V9, V1
	022 Move V8, V0
	023 Move W20, W1
	024 Move X19, X0
	025 Move X23, 0x2614000
	026 Move TEMP, X1
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {69}
	030 Move W8, [X23+1923]
	031 Move X21, [X19+176]
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0x232F000
	035 Move X0, [X0+1440]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X23+1923], W8
	039 Move X8, [X22]
	040 Move X24, 0x2614000
	041 Move W9, [X24+1939]
	042 Move X8, [X8+184]
	043 Move S13, [X8]
	044 Move S12, [X8+4]
	045 Move V11, [X8+8]
	046 Compare W9, 0
	047 JumpIfNotEqual {53}
	048 Move X0, 0x2330000
	049 Move X0, [X0+1448]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X24+1939], W8
	053 Compare X21, 0
	054 JumpIfEqual {198}
	055 Move X8, 0x2330000
	056 Move X8, [X8+1448]
	057 Move X0, X21
	058 Move V0, V13
	059 Move V1, V12
	060 Move X8, [X8]
	061 Move V2, V11
	062 Move X1, X31
	063 Move X8, [X8+184]
	064 Move S5, [X8+8]
	065 Move S6, [X8+12]
	066 Move S3, [X8]
	067 Move S4, [X8+4]
	068 Call Transform.SetLocalPositionAndRotation, X0, X1, X2
	069 Move X0, [X19+184]
	070 Compare X0, 0
	071 JumpIfEqual {198}
	072 Move X1, X31
	073 Call Transform.get_position, X0
	074 Move X0, [X19+192]
	075 Move [X19+272], S0
	076 Move [X19+276], S1
	077 Move [X19+280], S2
	078 Compare X0, 0
	079 JumpIfEqual {198}
	080 Move X1, X31
	081 Call Transform.get_position, X0
	082 Move [X19+284], S0
	083 Move [X19+288], S1
	084 Move [X19+292], S2
	085 Move W8, [X23+1923]
	086 Compare W8, 0
	087 JumpIfNotEqual {93}
	088 Move X0, 0x232F000
	089 Move X0, [X0+1440]
	090 Call 0x1C17CF4
	091 Move W8, 1
	092 Move [X23+1923], W8
	093 Move X8, [X22]
	094 Move X9, [X8+184]
	095 Move V0, [X9]
	096 Move V1, [X9+8]
	097 Move [X19+248], D0
	098 Move [X19+256], S1
	099 Move X8, [X8+184]
	100 Move V0, [X8]
	101 Move V1, [X8+8]
	102 Add X8, X19, 260
	103 Move [X8], D0
	104 Move [X8+8], S1
	105 Move X8, [X19+240]
	106 Compare X8, 0
	107 JumpIfEqual {198}
	108 Move W9, [X8+24]
	109 Compare W9, 0
	110 JumpIfEqual {199}
	111 Move X0, [X8+32]
	112 Compare X0, 0
	113 JumpIfEqual {198}
	114 NotImplemented "Instruction ORN not yet implemented."
	115 And W1, W8, 1
	116 Move X2, X31
	117 Call Rigidbody.set_isKinematic, X0, X1
	118 Move X21, [X19+232]
	119 Compare X21, 0
	120 JumpIfEqual {198}
	121 Move W8, [X21+24]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move W22, W31
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Add X8, X21, W22
	126 Move X0, [X8+32]
	127 Compare X0, 0
	128 JumpIfEqual {198}
	129 And W1, W20, 1
	130 Move X2, X31
	131 Call GameObject.SetActive, X0, X1
	132 Move W8, [X21+24]
	133 Add W22, W22, 1
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move TEMP, X20
	136 And TEMP, TEMP, 1
	137 Compare TEMP, 1
	138 JumpIfNotEqual {184}
	139 Move X8, [X19+240]
	140 Compare X8, 0
	141 JumpIfEqual {198}
	142 Move W9, [X8+24]
	143 Compare W9, 0
	144 JumpIfEqual {199}
	145 Move X0, [X8+32]
	146 Compare X0, 0
	147 JumpIfEqual {198}
	148 Move W1, 2
	149 Move V0, V8
	150 Move V1, V9
	151 Move V2, V10
	152 Move X2, X31
	153 Call Rigidbody.AddForce, X0, X1, X2
	154 Move X8, [X19+240]
	155 Compare X8, 0
	156 JumpIfEqual {198}
	157 Move W9, [X8+24]
	158 Compare W9, 0
	159 JumpIfEqual {199}
	160 Move X0, [X8+32]
	161 Compare X0, 0
	162 JumpIfEqual {198}
	163 Move S0, 3
	164 Multiply S2, S10, S0
	165 Multiply S1, S9, S0
	166 Multiply S0, S8, S0
	167 Move X20, [X31+96]
	168 Move X19, [X31+104]
	169 Move X22, [X31+80]
	170 Move X21, [X31+88]
	171 Move X24, [X31+64]
	172 Move X23, [X31+72]
	173 Move X30, [X31+48]
	174 Move D9, [X31+32]
	175 Move D8, [X31+40]
	176 Move D11, [X31+16]
	177 Move D10, [X31+24]
	178 Move W1, 2
	179 Move X2, X31
	180 Move D13, [X31+112]
	181 Move D12, [X31+120]
	182 Call Rigidbody.AddTorque, X0, X1, X2
	183 Return 
	184 Move X20, [X31+96]
	185 Move X19, [X31+104]
	186 Move X22, [X31+80]
	187 Move X21, [X31+88]
	188 Move X24, [X31+64]
	189 Move X23, [X31+72]
	190 Move X30, [X31+48]
	191 Move D9, [X31+32]
	192 Move D8, [X31+40]
	193 Move D11, [X31+16]
	194 Move D10, [X31+24]
	195 Move D13, [X31+112]
	196 Move D12, [X31+120]
	197 Return 
	198 Call 0x1C17F20
	199 Call 0x1C17F28

Method: System.Void Setup(AnimalCompany.UserAvatarState avatarState, UnityEngine.Transform camera, UnityEngine.Transform handLeft, UnityEngine.Transform handRight, UnityEngine.Transform controllerLeft, UnityEngine.Transform controllerRight, System.Boolean isLocalPlayer)

Disassembly:
	0x01DC17D4 STP X30, X25, [X31 + 0x40]
	0x01DC17D8 STP X24, X23, [X31 + 0x50]
	0x01DC17DC STP X22, X21, [X31 + 0x60]
	0x01DC17E0 STP X20, X19, [X31 + 0x70]
	0x01DC17E4 ADRP X25, 0x2617000
	0x01DC17E8 LDRB W8, [X25 + 0xB80]
	0x01DC17EC MOV X21, X5
	0x01DC17F0 MOV W19, W4
	0x01DC17F4 MOV X22, X3
	0x01DC17F8 MOV X23, X2
	0x01DC17FC MOV V8.16B, V2.16B
	0x01DC1800 MOV V9.16B, V1.16B
	0x01DC1804 MOV V10.16B, V0.16B
	0x01DC1808 MOV W24, W1
	0x01DC180C MOV X20, X0
	0x01DC1810 TBNZ X8, 0x0, 0x1DC1828
	0x01DC1814 ADRP X0, 0x2337000
	0x01DC1818 LDR X0, [X0 + 0xD0]
	0x01DC181C BL 0x1C16CF4
	0x01DC1820 MOVZ W8, 0x1
	0x01DC1824 STRB W8, [X25 + 0xB80]
	0x01DC1828 MOV X0, X20
	0x01DC182C MOV W1, W24
	0x01DC1830 MOV V0.16B, V10.16B
	0x01DC1834 MOV V1.16B, V9.16B
	0x01DC1838 MOV V2.16B, V8.16B
	0x01DC183C MOV X2, X23
	0x01DC1840 MOV X3, X22
	0x01DC1844 MOV X4, X21
	0x01DC1848 BL 0x1DC1918
	0x01DC184C LDRB W8, [X20 + 0x8C]
	0x01DC1850 CBZ W8, 0x1DC18F0
	0x01DC1854 LDR X0, [X20 + 0x50]
	0x01DC1858 CBZ X0, 0x1DC1914
	0x01DC185C MOV X1, X31
	0x01DC1860 BL 0x3C3F58C
	0x01DC1864 LDR X0, [X20 + 0x50]
	0x01DC1868 CBZ X0, 0x1DC1914
	0x01DC186C ADRP X20, 0x2337000
	0x01DC1870 LDR X20, [X20 + 0xD0]
	0x01DC1874 MOV X1, X31
	0x01DC1878 MOV V8.16B, V0.16B
	0x01DC187C MOV V9.16B, V1.16B
	0x01DC1880 MOV V10.16B, V2.16B
	0x01DC1884 BL 0x3C3DEB4
	0x01DC1888 LDR X0, [X20]
	0x01DC188C MOV V11.16B, V0.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X0
	006 Move [X0+88], X2
	007 Move [X0+96], X3
	008 Move X0, [X0+168]
	009 Move X21, X1
	010 And W1, W7, 1
	011 Move [X20+104], X4
	012 Move [X20+112], X5
	013 Move [X20+120], X6
	014 Move [X20+456], W1
	015 Compare X0, 0
	016 JumpIfEqual {53}
	017 Move X2, X31
	018 Move W19, W7
	019 Call AvatarView.SetIsLocalAvatar, X0, X1
	020 Move X0, [X20+168]
	021 Compare X0, 0
	022 JumpIfEqual {53}
	023 Move X1, X21
	024 Move X2, X31
	025 Call AvatarView.UpdateAvatar, X0, X1
	026 Move S0, W31
	027 Move S1, W31
	028 Move S2, W31
	029 Move X0, X20
	030 Move W1, W31
	031 Call PlayerView.SetRagdoll, X0, X1, X2
	032 Move X8, [X20+216]
	033 Compare X8, 0
	034 JumpIfEqual {53}
	035 Move W9, [X8+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction ORN not yet implemented."
	038 Move W10, W31
	039 And W11, W11, 1
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Add X12, X8, W10
	042 Move X12, [X12+32]
	043 Compare X12, 0
	044 JumpIfEqual {53}
	045 Add W10, W10, 1
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move [X12+32], W11
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return 
	053 Call 0x1C17F20
	054 Call 0x1C17F28

Method: System.Void PlayerHit()

Disassembly:
	0x01DC3360 LDRB W9, [X21 + 0x784]
	0x01DC3364 LDP S15, S8, [X8 + 0x50]
	0x01DC3368 CBNZ W9, 0x1DC3380
	0x01DC336C ADRP X0, 0x2330000
	0x01DC3370 LDR X0, [X0 + 0x5A8]
	0x01DC3374 BL 0x1C16CF4
	0x01DC3378 MOVZ W8, 0x1
	0x01DC337C STRB W8, [X21 + 0x784]
	0x01DC3380 STR S11, [X31 + 0xC]
	0x01DC3384 ADRP X8, 0x2330000
	0x01DC3388 LDR X8, [X8 + 0x5A8]
	0x01DC338C LDR X0, [X8]
	0x01DC3390 LDR W8, [X0 + 0xE0]
	0x01DC3394 CBNZ W8, 0x1DC339C
	0x01DC3398 BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, [X0+464]
	004 Move X19, X0
	005 Compare X1, 0
	006 JumpIfEqual {10}
	007 Move X0, X19
	008 Move X2, X31
	009 Call MonoBehaviour.StopCoroutine, X0, X1
	010 Move X0, X19
	011 Call PlayerView.PlayerHitCoroutine, X0
	012 Move X1, X0
	013 Move [X19+464], X0
	014 Move X0, X19
	015 Move X2, X31
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call MonoBehaviour.StartCoroutine, X0, X1
	019 Return 

Method: System.Void UpdateAvatar(AnimalCompany.UserAvatarState avatarState)

Disassembly:
	0x01DC1C1C MOV V5.16B, V13.16B
	0x01DC1C20 LDP X20, X19, [X31 + 0x70]
	0x01DC1C24 LDP X22, X21, [X31 + 0x60]
	0x01DC1C28 LDP X24, X23, [X31 + 0x50]
	0x01DC1C2C LDP X26, X25, [X31 + 0x40]
	0x01DC1C30 LDR X30, [X31 + 0x38]
	0x01DC1C34 LDP D9, D8, [X31 + 0x28]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+168]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call AvatarView.UpdateAvatar, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: System.Void SetIsLocalPlayer(System.Boolean isLocalPlayer)

Disassembly:
	0x01DC9340 MOVZ W8, 0x1
	0x01DC9344 STRB W8, [X24 + 0x785]
	0x01DC9348 LDR X0, [X23]
	0x01DC934C FSUB S14, S11, S14
	0x01DC9350 FSUB S11, S12, S15
	0x01DC9354 FSUB S8, S13, S8
	0x01DC9358 LDR W8, [X0 + 0xE0]
	0x01DC935C CBNZ W8, 0x1DC9364
	0x01DC9360 BL 0x1C16DFC
	0x01DC9364 FMUL S0, S14, S14

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move X0, [X0+168]
	004 And W1, W1, 1
	005 Move [X8+456], W1
	006 Compare X0, 0
	007 JumpIfEqual {12}
	008 Move X2, X31
	009 Move X30, [X31+16]
	010 Call AvatarView.SetIsLocalAvatar, X0, X1
	011 Return 
	012 Call 0x1C17F20

Method: System.Collections.IEnumerator PlayerHitCoroutine()

Disassembly:
	0x01DC93C8 CBZ X20, 0x1DC95F8
	0x01DC93CC FMOV S3, 0.75
	0x01DC93D0 FMUL S2, S2, S3
	0x01DC93D4 FMUL S1, S1, S3
	0x01DC93D8 FMUL S0, S0, S3
	0x01DC93DC LDR V3, [X31 + 0x10]
	0x01DC93E0 FADD S2, S10, S2
	0x01DC93E4 FADD S1, S9, S1
	0x01DC93E8 MOV X0, X20
	0x01DC93EC FADD S0, S3, S0
	0x01DC93F0 MOV X1, X31
	0x01DC93F4 BL 0x3C8F014
	0x01DC93F8 LDR X8, [X19 + 0xF0]
	0x01DC93FC CBZ X8, 0x1DC95F8
	0x01DC9400 LDR W9, [X8 + 0x18]
	0x01DC9404 CMP W9, 0x2
	0x01DC9408 B.LS 0x1DC95FC
	0x01DC940C LDRB W9, [X21 + 0x783]
	0x01DC9410 LDR X20, [X8 + 0x30]
	0x01DC9414 CBNZ W9, 0x1DC942C
	0x01DC9418 ADRP X0, 0x232A000
	0x01DC941C LDR X0, [X0 + 0x5A0]
	0x01DC9420 BL 0x1C16CF4
	0x01DC9424 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2610000
	006 Move X21, 0x2330000
	007 Move W8, [X20+2982]
	008 Move X21, [X21+560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2330000
	015 Move X0, [X0+560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2982], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move [X20+16], W31
	025 Move [X20+32], X19
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Void Awake()

Disassembly:
	0x01DC9450 CBZ X8, 0x1DC95F8
	0x01DC9454 LDR W9, [X8 + 0x18]
	0x01DC9458 CMP W9, 0x1
	0x01DC945C B.LS 0x1DC95FC
	0x01DC9460 LDR X0, [X8 + 0x28]
	0x01DC9464 CBZ X0, 0x1DC95F8
	0x01DC9468 MOV X1, X31
	0x01DC946C BL 0x3C8EF74
	0x01DC9470 LDR X8, [X19 + 0xF0]
	0x01DC9474 STR S0, [X19 + 0x110]
	0x01DC9478 STR S1, [X19 + 0x114]
	0x01DC947C STR S2, [X19 + 0x118]
	0x01DC9480 CBZ X8, 0x1DC95F8
	0x01DC9484 LDR W9, [X8 + 0x18]
	0x01DC9488 CMP W9, 0x2
	0x01DC948C B.LS 0x1DC95FC
	0x01DC9490 LDR X0, [X8 + 0x30]
	0x01DC9494 CBZ X0, 0x1DC95F8
	0x01DC9498 MOV X1, X31
	0x01DC949C BL 0x3C8EF74
	0x01DC94A0 LDR X8, [X19 + 0xF0]
	0x01DC94A4 STR S0, [X19 + 0x11C]
	0x01DC94A8 STR S1, [X19 + 0x120]
	0x01DC94AC STR S2, [X19 + 0x124]
	0x01DC94B0 CBZ X8, 0x1DC95F8
	0x01DC94B4 LDR W9, [X8 + 0x18]
	0x01DC94B8 CMP W9, 0x1
	0x01DC94BC B.LS 0x1DC95FC
	0x01DC94C0 LDR X0, [X8 + 0x28]
	0x01DC94C4 CBZ X0, 0x1DC95F8
	0x01DC94C8 LDR X20, [X19 + 0xB8]
	0x01DC94CC MOV X1, X31
	0x01DC94D0 BL 0x3C8EF74
	0x01DC94D4 LDR X8, [X19 + 0xF0]
	0x01DC94D8 CBZ X8, 0x1DC95F8
	0x01DC94DC LDR W9, [X8 + 0x18]
	0x01DC94E0 CMP W9, 0x1
	0x01DC94E4 B.LS 0x1DC95FC
	0x01DC94E8 LDR X0, [X8 + 0x28]
	0x01DC94EC CBZ X0, 0x1DC95F8
	0x01DC94F0 MOV X1, X31
	0x01DC94F4 MOV V8.16B, V0.16B
	0x01DC94F8 MOV V9.16B, V1.16B
	0x01DC94FC MOV V10.16B, V2.16B
	0x01DC9500 BL 0x3C8F0AC
	0x01DC9504 CBZ X20, 0x1DC95F8
	0x01DC9508 MOV V4.16B, V0.16B
	0x01DC950C MOV V5.16B, V1.16B
	0x01DC9510 MOV V6.16B, V2.16B
	0x01DC9514 MOV V7.16B, V3.16B
	0x01DC9518 MOV X0, X20
	0x01DC951C MOV V0.16B, V8.16B
	0x01DC9520 MOV V1.16B, V9.16B
	0x01DC9524 MOV V2.16B, V10.16B
	0x01DC9528 MOV V3.16B, V4.16B
	0x01DC952C MOV V4.16B, V5.16B
	0x01DC9530 MOV V5.16B, V6.16B
	0x01DC9534 MOV V6.16B, V7.16B
	0x01DC9538 MOV X1, X31
	0x01DC953C BL 0x3C40000
	0x01DC9540 LDR X8, [X19 + 0xF0]
	0x01DC9544 CBZ X8, 0x1DC95F8
	0x01DC9548 LDR W9, [X8 + 0x18]
	0x01DC954C CMP W9, 0x2
	0x01DC9550 B.LS 0x1DC95FC
	0x01DC9554 LDR X0, [X8 + 0x30]
	0x01DC9558 CBZ X0, 0x1DC95F8
	0x01DC955C LDR X20, [X19 + 0xC0]
	0x01DC9560 MOV X1, X31
	0x01DC9564 BL 0x3C8EF74
	0x01DC9568 LDR X8, [X19 + 0xF0]
	0x01DC956C CBZ X8, 0x1DC95F8
	0x01DC9570 LDR W9, [X8 + 0x18]
	0x01DC9574 CMP W9, 0x2
	0x01DC9578 B.LS 0x1DC95FC
	0x01DC957C LDR X0, [X8 + 0x30]
	0x01DC9580 CBZ X0, 0x1DC95F8
	0x01DC9584 MOV X1, X31
	0x01DC9588 MOV V8.16B, V0.16B
	0x01DC958C MOV V9.16B, V1.16B
	0x01DC9590 MOV V10.16B, V2.16B
	0x01DC9594 BL 0x3C8F0AC
	0x01DC9598 CBZ X20, 0x1DC95F8
	0x01DC959C MOV V4.16B, V0.16B
	0x01DC95A0 MOV V5.16B, V1.16B
	0x01DC95A4 MOV V6.16B, V2.16B
	0x01DC95A8 MOV X0, X20

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2610000
	007 Move W8, [X20+2983]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2330000
	014 Move X0, [X0+568]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+2983], W8
	018 Move X0, [X19+336]
	019 Compare X0, 0
	020 JumpIfEqual {107}
	021 Move X1, X31
	022 Call Transform.get_position, X0
	023 Move X0, [X19+344]
	024 Move [X19+400], S0
	025 Move [X19+404], S1
	026 Move [X19+408], S2
	027 Compare X0, 0
	028 JumpIfEqual {107}
	029 Move X1, X31
	030 Call Transform.get_position, X0
	031 Move X0, [X19+336]
	032 Move [X19+412], S0
	033 Move [X19+416], S1
	034 Move [X19+420], S2
	035 Compare X0, 0
	036 JumpIfEqual {107}
	037 Move X20, [X19+368]
	038 Move X1, X31
	039 Call Transform.get_position, X0
	040 Compare X20, 0
	041 JumpIfEqual {107}
	042 Move X0, X20
	043 Move X1, X31
	044 Call Transform.InverseTransformPoint, X0, X1
	045 Move X0, [X19+344]
	046 Move [X19+376], S0
	047 Move [X19+380], S1
	048 Move [X19+384], S2
	049 Compare X0, 0
	050 JumpIfEqual {107}
	051 Move X20, [X19+368]
	052 Move X1, X31
	053 Call Transform.get_position, X0
	054 Compare X20, 0
	055 JumpIfEqual {107}
	056 Move X21, 0x2330000
	057 Move X21, [X21+568]
	058 Move X0, X20
	059 Move X1, X31
	060 Call Transform.InverseTransformPoint, X0, X1
	061 Move W8, 0x3F800000
	062 Move [X19+388], S0
	063 Move [X19+392], S1
	064 Move [X19+396], S2
	065 Move [X19+324], W8
	066 Move X0, [X21]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {72}
	070 Call 0x1C17DFC
	071 Move X0, [X21]
	072 Move X8, [X0+184]
	073 Move X9, -19783680
	074 Move V8, [X9+260]
	075 Move X0, X31
	076 Move S0, [X8+32]
	077 Move S1, [X8+36]
	078 Move V2, [X8+40]
	079 Multiply S0, S0, S8
	080 Multiply S1, S1, S8
	081 Multiply S2, S2, S8
	082 Call Quaternion.Internal_FromEulerRad, X0
	083 Move [X19+32], S0
	084 Move [X19+40], S1
	085 Move [X19+40], S2
	086 Move [X19+48], S3
	087 Move X8, [X21]
	088 Move X0, X31
	089 Move X8, [X8+184]
	090 Move S0, [X8+44]
	091 Move S1, [X8+48]
	092 Move V2, [X8+52]
	093 Multiply S0, S0, S8
	094 Multiply S1, S1, S8
	095 Multiply S2, S2, S8
	096 Call Quaternion.Internal_FromEulerRad, X0
	097 Move [X19+48], S0
	098 Move [X19+56], S1
	099 Move [X19+56], S2
	100 Move [X19+64], S3
	101 Move X20, [X31+32]
	102 Move X19, [X31+40]
	103 Move X30, [X31+16]
	104 Move X21, [X31+24]
	105 Move V8, [X31+48]
	106 Return 
	107 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01DC95AC MOV V0.16B, V8.16B
	0x01DC95B0 MOV V1.16B, V9.16B
	0x01DC95B4 MOV V2.16B, V10.16B
	0x01DC95B8 LDP X20, X19, [X31 + 0x90]
	0x01DC95BC LDP X22, X21, [X31 + 0x80]
	0x01DC95C0 LDP X24, X23, [X31 + 0x70]
	0x01DC95C4 LDP X30, X25, [X31 + 0x60]
	0x01DC95C8 LDP D9, D8, [X31 + 0x50]
	0x01DC95CC LDP D11, D10, [X31 + 0x40]
	0x01DC95D0 LDP D13, D12, [X31 + 0x30]
	0x01DC95D4 LDP D15, D14, [X31 + 0x20]
	0x01DC95D8 MOV V7.16B, V3.16B
	0x01DC95DC MOV V3.16B, V4.16B
	0x01DC95E0 MOV V4.16B, V5.16B
	0x01DC95E4 MOV V5.16B, V6.16B
	0x01DC95E8 MOV V6.16B, V7.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+224]
	004 Move X19, X0
	005 Compare W8, 0
	006 JumpIfNotEqual {12}
	007 Move W8, [X19+449]
	008 Compare W8, 0
	009 JumpIfNotEqual {12}
	010 Move X0, X19
	011 Call PlayerView.UpdateTransforms, X0
	012 Move W8, [X19+448]
	013 Compare W8, 0
	014 JumpIfEqual {18}
	015 Move V0, [X19+452]
	016 Move X0, X19
	017 Call PlayerView.UpdateVoice, X0, V0
	018 Move X0, X19
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Call PlayerView.UpdateElasticHip, X0
	022 Return 

Method: System.Void FixedUpdate()

Disassembly:
	0x01DC9CE4 LDR W1, [X8 + 0x38]
	0x01DC9CE8 FMOV S0, W31
	0x01DC9CEC FMOV S1, W31
	0x01DC9CF0 FMOV S2, W31
	0x01DC9CF4 FMOV S3, 1

ISIL:
	001 Move W8, [X0+224]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 

Method: System.Void UpdateTransforms()

Disassembly:
	0x01DC3808 STR S8, [X0 + 0x2C]
	0x01DC380C LDP D9, D8, [X31], #0x30
	0x01DC3810 RET
	0x01DC3814 LDP X20, X19, [X31 + 0x20]
	0x01DC3818 LDP X30, X21, [X31 + 0x10]
	0x01DC381C MOV V0.16B, V8.16B
	0x01DC3820 LDP D9, D8, [X31], #0x30
	0x01DC3824 B 0x1DC780C
	0x01DC3828 BL 0x1C16F20
	0x01DC382C BL 0x1C16F28
	0x01DC3830 SUB X31, X31, 0x20
	0x01DC3834 STP X30, X19, [X31 + 0x10]
	0x01DC3838 MOV X19, X1
	0x01DC383C ADD X1, X31, 0x8
	0x01DC3840 STR X31, [X31 + 0x8]
	0x01DC3844 BL 0x1DC4224
	0x01DC3848 ADRP X8, 0xFFFFFFFFFED27000
	0x01DC384C LDR V1, [X31 + 0x8]
	0x01DC3850 LDR V0, [X8 + 0x23C]
	0x01DC3854 FCMP S1, S0
	0x01DC3858 B.PL 0x1DC386C
	0x01DC385C LDR V2, [X19]
	0x01DC3860 FCMP S2, S0
	0x01DC3864 FMOV S0, -1
	0x01DC3868 B.GE 0x1DC3890
	0x01DC386C ADRP X8, 0xFFFFFFFFFED27000
	0x01DC3870 LDR V2, [X8 + 0x10C]
	0x01DC3874 FMOV S0, W31
	0x01DC3878 FCMP S1, S2
	0x01DC387C B.LE 0x1DC3890
	0x01DC3880 LDR V1, [X19]
	0x01DC3884 FCMP S1, S2
	0x01DC3888 B.HI 0x1DC3890
	0x01DC388C FMOV S0, 1
	0x01DC3890 LDR X8, [X31 + 0x8]
	0x01DC3894 STR X8, [X19]
	0x01DC3898 LDP X30, X19, [X31 + 0x10]
	0x01DC389C ADD X31, X31, 0x20
	0x01DC38A0 RET
	0x01DC38A4 SUB X31, X31, 0x1E0
	0x01DC38A8 STP D15, D14, [X31 + 0x170]
	0x01DC38AC STP D13, D12, [X31 + 0x180]
	0x01DC38B0 STP D11, D10, [X31 + 0x190]
	0x01DC38B4 STP D9, D8, [X31 + 0x1A0]
	0x01DC38B8 STR X29, [X31 + 0x1B0]
	0x01DC38BC STP X30, X21, [X31 + 0x1C0]
	0x01DC38C0 STP X20, X19, [X31 + 0x1D0]
	0x01DC38C4 MRS X20, 0xC000
	0x01DC38C8 LDR X8, [X20 + 0x28]
	0x01DC38CC ADRP X21, 0x2615000
	0x01DC38D0 MOV X19, X0
	0x01DC38D4 STR X8, [X31 + 0x168]
	0x01DC38D8 LDRB W8, [X21 + 0xB8E]
	0x01DC38DC STP X1, X2, [X31 + 0xB0]
	0x01DC38E0 TBNZ X8, 0x0, 0x1DC38F8
	0x01DC38E4 ADRP X0, 0x2335000
	0x01DC38E8 LDR X0, [X0 + 0x130]
	0x01DC38EC BL 0x1C16CF4
	0x01DC38F0 MOVZ W8, 0x1
	0x01DC38F4 STRB W8, [X21 + 0xB8E]
	0x01DC38F8 LDR X0, [X19 + 0x38]
	0x01DC38FC CBZ X0, 0x1DC3EB4
	0x01DC3900 LDR W8, [X0 + 0xE0]
	0x01DC3904 CMP W8, 0x1
	0x01DC3908 B.EQ 0x1DC3A80
	0x01DC390C FMOV S28, W31
	0x01DC3910 STR S28, [X31 + 0x94]
	0x01DC3914 FMOV S28, W31
	0x01DC3918 FMOV S0, W31
	0x01DC391C STR S28, [X31 + 0x90]
	0x01DC3920 FMOV S28, W31
	0x01DC3924 STR S0, [X31 + 0xAC]
	0x01DC3928 FMOV S0, W31
	0x01DC392C STR S28, [X31 + 0x8C]
	0x01DC3930 FMOV S28, W31
	0x01DC3934 STR S0, [X31 + 0xA8]
	0x01DC3938 FMOV S0, W31
	0x01DC393C STR S28, [X31 + 0x88]
	0x01DC3940 FMOV S28, W31
	0x01DC3944 STR S0, [X31 + 0xA4]
	0x01DC3948 FMOV S0, W31
	0x01DC394C STR S28, [X31 + 0x9C]
	0x01DC3950 FMOV S28, W31
	0x01DC3954 FMOV S4, W31
	0x01DC3958 FMOV S5, W31
	0x01DC395C FMOV S6, W31
	0x01DC3960 FMOV S7, W31
	0x01DC3964 FMOV S16, W31
	0x01DC3968 FMOV S17, W31
	0x01DC396C FMOV S18, W31
	0x01DC3970 FMOV S23, W31
	0x01DC3974 FMOV S24, W31
	0x01DC3978 FMOV S25, W31
	0x01DC397C STR S0, [X31 + 0xA0]
	0x01DC3980 FMOV S19, W31
	0x01DC3984 FMOV S1, W31
	0x01DC3988 FMOV S0, W31
	0x01DC398C FMOV S2, W31
	0x01DC3990 FMOV S3, W31
	0x01DC3994 FMOV S20, W31
	0x01DC3998 FMOV S21, W31
	0x01DC399C FMOV S22, W31
	0x01DC39A0 FMOV S26, W31
	0x01DC39A4 FMOV S27, W31
	0x01DC39A8 FMOV S15, W31
	0x01DC39AC FMOV S8, W31
	0x01DC39B0 FMOV S9, W31
	0x01DC39B4 FMOV S10, W31
	0x01DC39B8 FMOV S11, W31
	0x01DC39BC FMOV S12, W31
	0x01DC39C0 FMOV S13, W31
	0x01DC39C4 STR S28, [X31 + 0x98]
	0x01DC39C8 FMOV S28, W31
	0x01DC39CC FMOV S29, W31
	0x01DC39D0 FMOV S30, W31
	0x01DC39D4 FMOV S31, W31
	0x01DC39D8 FMOV S14, W31
	0x01DC39DC CBNZ W8, 0x1DC3DB4
	0x01DC39E0 LDR X0, [X19 + 0x50]
	0x01DC39E4 CBZ X0, 0x1DC3EB4
	0x01DC39E8 MOV X1, X31
	0x01DC39EC BL 0x3C3F58C
	0x01DC39F0 LDR X0, [X19 + 0x50]
	0x01DC39F4 STP S1, S0, [X31 + 0x80]
	0x01DC39F8 STR S2, [X31 + 0x7C]
	0x01DC39FC CBZ X0, 0x1DC3EB4
	0x01DC3A00 MOV X1, X31
	0x01DC3A04 BL 0x3C3FA04
	0x01DC3A08 ADRP X21, 0x2615000
	0x01DC3A0C LDRB W8, [X21 + 0x785]
	0x01DC3A10 MOV V8.16B, V0.16B
	0x01DC3A14 MOV V9.16B, V2.16B
	0x01DC3A18 CBNZ W8, 0x1DC3A30
	0x01DC3A1C ADRP X0, 0x2330000
	0x01DC3A20 LDR X0, [X0 + 0x5A8]
	0x01DC3A24 BL 0x1C16CF4
	0x01DC3A28 MOVZ W8, 0x1
	0x01DC3A2C STRB W8, [X21 + 0x785]
	0x01DC3A30 ADRP X8, 0x2330000
	0x01DC3A34 LDR X8, [X8 + 0x5A8]
	0x01DC3A38 LDR X0, [X8]
	0x01DC3A3C LDR W8, [X0 + 0xE0]
	0x01DC3A40 CBNZ W8, 0x1DC3A48
	0x01DC3A44 BL 0x1C16DFC
	0x01DC3A48 ADRP X8, 0xFFFFFFFFFED27000
	0x01DC3A4C FMUL S0, S8, S8
	0x01DC3A50 FMOV S1, W31
	0x01DC3A54 LDR V3, [X8 + 0x17C]
	0x01DC3A58 FADD S0, S0, S1
	0x01DC3A5C FMUL S2, S9, S9
	0x01DC3A60 FADD S0, S2, S0
	0x01DC3A64 FSQRT S2, S0
	0x01DC3A68 FCMP S2, S3
	0x01DC3A6C B.LE 0x1DC3C10
	0x01DC3A70 FDIV S0, S8, S2
	0x01DC3A74 FDIV S1, S1, S2
	0x01DC3A78 FDIV S2, S9, S2
	0x01DC3A7C B 0x1DC3C48
	0x01DC3A80 BL 0x1DC3EBC
	0x01DC3A84 CBZ X0, 0x1DC3EB4
	0x01DC3A88 MOV X1, X31
	0x01DC3A8C BL 0x3C3F58C
	0x01DC3A90 LDR X0, [X19 + 0x38]
	0x01DC3A94 STP S1, S0, [X31 + 0x80]
	0x01DC3A98 STR S2, [X31 + 0x7C]
	0x01DC3A9C CBZ X0, 0x1DC3EB4
	0x01DC3AA0 BL 0x1DC3EBC
	0x01DC3AA4 CBZ X0, 0x1DC3EB4
	0x01DC3AA8 MOV X1, X31
	0x01DC3AAC BL 0x3C3DEB4
	0x01DC3AB0 LDR X0, [X19 + 0x38]
	0x01DC3AB4 STP S1, S0, [X31 + 0x74]
	0x01DC3AB8 STP S3, S2, [X31 + 0x6C]
	0x01DC3ABC CBZ X0, 0x1DC3EB4
	0x01DC3AC0 BL 0x1DC3EBC
	0x01DC3AC4 CBZ X0, 0x1DC3EB4
	0x01DC3AC8 MOV X1, X31
	0x01DC3ACC BL 0x3C3F58C
	0x01DC3AD0 LDR X0, [X19 + 0x38]
	0x01DC3AD4 STP S1, S0, [X31 + 0x64]
	0x01DC3AD8 STR S2, [X31 + 0x60]
	0x01DC3ADC CBZ X0, 0x1DC3EB4
	0x01DC3AE0 BL 0x1DC3EBC
	0x01DC3AE4 CBZ X0, 0x1DC3EB4
	0x01DC3AE8 MOV X1, X31
	0x01DC3AEC BL 0x3C3DEB4
	0x01DC3AF0 LDR X0, [X19 + 0x38]
	0x01DC3AF4 STP S1, S0, [X31 + 0xA8]
	0x01DC3AF8 STP S3, S2, [X31 + 0xA0]
	0x01DC3AFC CBZ X0, 0x1DC3EB4
	0x01DC3B00 BL 0x1DC3EEC
	0x01DC3B04 CBZ X0, 0x1DC3EB4
	0x01DC3B08 MOV X1, X31
	0x01DC3B0C BL 0x3C3F58C
	0x01DC3B10 LDR X0, [X19 + 0x38]
	0x01DC3B14 STP S1, S0, [X31 + 0x98]
	0x01DC3B18 STR S2, [X31 + 0x5C]
	0x01DC3B1C CBZ X0, 0x1DC3EB4
	0x01DC3B20 BL 0x1DC3EEC
	0x01DC3B24 CBZ X0, 0x1DC3EB4
	0x01DC3B28 MOV X1, X31
	0x01DC3B2C BL 0x3C3DEB4
	0x01DC3B30 LDR X0, [X19 + 0x38]
	0x01DC3B34 STP S1, S0, [X31 + 0x54]
	0x01DC3B38 STR S2, [X31 + 0x50]
	0x01DC3B3C CBZ X0, 0x1DC3EB4
	0x01DC3B40 MOV V11.16B, V3.16B
	0x01DC3B44 BL 0x1DC3F20
	0x01DC3B48 CBZ X0, 0x1DC3EB4
	0x01DC3B4C MOV X1, X31
	0x01DC3B50 BL 0x3C3F58C
	0x01DC3B54 LDR X0, [X19 + 0x38]
	0x01DC3B58 CBZ X0, 0x1DC3EB4
	0x01DC3B5C MOV V14.16B, V0.16B
	0x01DC3B60 MOV V15.16B, V1.16B
	0x01DC3B64 MOV V8.16B, V2.16B
	0x01DC3B68 BL 0x1DC3F20
	0x01DC3B6C CBZ X0, 0x1DC3EB4
	0x01DC3B70 MOV X1, X31
	0x01DC3B74 BL 0x3C3DEB4
	0x01DC3B78 LDR X0, [X19 + 0x38]
	0x01DC3B7C CBZ X0, 0x1DC3EB4
	0x01DC3B80 MOV V9.16B, V0.16B
	0x01DC3B84 MOV V10.16B, V1.16B
	0x01DC3B88 MOV V12.16B, V2.16B
	0x01DC3B8C MOV V13.16B, V3.16B
	0x01DC3B90 BL 0x1DC3EEC

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+80], D15
	003 Move [X31+88], D14
	004 Move [X31+96], D13
	005 Move [X31+104], D12
	006 Move [X31+112], D11
	007 Move [X31+120], D10
	008 Move [X31+128], D9
	009 Move [X31+136], D8
	010 Move [X31+144], X30
	011 Move [X31+152], X21
	012 Move [X31+160], X20
	013 Move [X31+168], X19
	014 Move X21, 0x2616000
	015 Move X20, 0x2331000
	016 Move W8, [X21+2984]
	017 Move X20, [X20+1432]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x2331000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+2984], W8
	028 Move X0, [X20]
	029 Move X20, [X19+88]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {56}
	042 Move X20, [X31+160]
	043 Move X19, [X31+168]
	044 Move X30, [X31+144]
	045 Move X21, [X31+152]
	046 Move D9, [X31+128]
	047 Move D8, [X31+136]
	048 Move D11, [X31+112]
	049 Move D10, [X31+120]
	050 Move D13, [X31+96]
	051 Move D12, [X31+104]
	052 Move D15, [X31+80]
	053 Move D14, [X31+88]
	054 Add X31, X31, 176
	055 Return 
	056 Move X0, X19
	057 Move X1, X31
	058 Call Component.get_transform, X0
	059 Move X8, [X19+88]
	060 Compare X8, 0
	061 JumpIfEqual {282}
	062 Move X20, X0
	063 Move X0, X8
	064 Move X1, X31
	065 Call Transform.get_position, X0
	066 Compare X20, 0
	067 JumpIfEqual {282}
	068 Move X0, X20
	069 Move X1, X31
	070 Call Transform.set_position, X0, X1
	071 Move X0, [X19+88]
	072 Compare X0, 0
	073 JumpIfEqual {282}
	074 Move X1, X31
	075 Call Transform.get_position, X0
	076 Move X0, [X19+88]
	077 Compare X0, 0
	078 JumpIfEqual {282}
	079 Move X20, [X19+176]
	080 Move X1, X31
	081 Move V8, V0
	082 Move V9, V1
	083 Move V10, V2
	084 Call Transform.get_rotation, X0
	085 Compare X20, 0
	086 JumpIfEqual {282}
	087 Move V4, V0
	088 Move V5, V1
	089 Move V6, V2
	090 Move V7, V3
	091 Move X0, X20
	092 Move V0, V8
	093 Move V1, V9
	094 Move V2, V10
	095 Move V3, V4
	096 Move V4, V5
	097 Move V5, V6
	098 Move V6, V7
	099 Move X1, X31
	100 Call Transform.SetPositionAndRotation, X0, X1, X2
	101 Move X0, [X19+96]
	102 Compare X0, 0
	103 JumpIfEqual {282}
	104 Move X1, X31
	105 Call Transform.get_position, X0
	106 Move X0, [X19+104]
	107 Compare X0, 0
	108 JumpIfEqual {282}
	109 Move X1, X31
	110 Move V9, V0
	111 Move V10, V1
	112 Move V8, V2
	113 Call Transform.get_position, X0
	114 Move X0, [X19+112]
	115 Compare X0, 0
	116 JumpIfEqual {282}
	117 Move X1, X31
	118 Move [X31+68], S10
	119 Move [X31+76], S9
	120 Move [X31+76], S8
	121 Move [X31+56], S1
	122 Move [X31+64], S0
	123 Move [X31+64], S2
	124 Call Transform.get_rotation, X0
	125 Move X0, [X19+120]
	126 Compare X0, 0
	127 JumpIfEqual {282}
	128 Move S8, [X19+32]
	129 Move S15, [X19+36]
	130 Move S14, [X19+40]
	131 Move S9, [X19+44]
	132 Move X1, X31
	133 Move V12, V0
	134 Move V11, V1
	135 Move V10, V2
	136 Move V13, V3
	137 Call Transform.get_rotation, X0
	138 Move X0, [X19+112]
	139 Move [X31+44], S0
	140 Move [X31+52], S1
	141 Move [X31+52], S2
	142 Move [X31+40], S3
	143 Compare X0, 0
	144 JumpIfEqual {282}
	145 Move V1, [X19+48]
	146 Move V0, [X19+52]
	147 Move X1, X31
	148 Move [X31+16], S1
	149 Move [X31+24], S0
	150 Move V0, [X19+56]
	151 Move [X31+24], S0
	152 Move V0, [X19+60]
	153 Move [X31+12], S0
	154 Call Transform.get_rotation, X0
	155 Move S4, [X19+64]
	156 Move S5, [X19+68]
	157 Move V6, [X19+72]
	158 Move X0, X31
	159 Call Quaternion.op_Multiply, X0, X1
	160 Move X0, [X19+120]
	161 Move [X31+28], S1
	162 Move [X31+36], S0
	163 Move [X31+36], S2
	164 Compare X0, 0
	165 JumpIfEqual {282}
	166 Move X1, X31
	167 Call Transform.get_rotation, X0
	168 Move S4, [X19+76]
	169 Move S5, [X19+80]
	170 Move V6, [X19+84]
	171 Move X0, X31
	172 Call Quaternion.op_Multiply, X0, X1
	173 Move X0, [X19+184]
	174 Move [X31], S1
	175 Move [X31+8], S0
	176 Move [X31+8], S2
	177 Compare X0, 0
	178 JumpIfEqual {282}
	179 Move V0, [X31+72]
	180 Move S26, [X31+28]
	181 Move S1, [X31+32]
	182 Multiply S2, S13, S8
	183 Multiply S3, S12, S9
	184 Multiply S6, S13, S15
	185 Multiply S7, S11, S9
	186 Multiply S19, S12, S8
	187 Multiply S22, S13, S14
	188 Multiply S23, S13, S9
	189 Multiply S24, S10, S9
	190 Multiply S4, S11, S14
	191 Multiply S18, S12, S15
	192 Multiply S21, S11, S15
	193 Add S2, S2, S3
	194 Add S3, S6, S7
	195 Add S6, S22, S24
	196 Subtract S7, S23, S19
	197 Multiply S5, S10, S15
	198 Multiply S16, S10, S8
	199 Multiply S20, S11, S8
	200 Multiply S25, S10, S14
	201 Add S2, S4, S2
	202 Add S6, S18, S6
	203 Subtract S7, S7, S21
	204 Add S0, S0, S1
	205 Move V1, [X31+68]
	206 Add S4, S16, S3
	207 Subtract S3, S2, S5
	208 Subtract S5, S6, S20
	209 Subtract S6, S7, S25
	210 Move V2, [X31+76]
	211 Move V7, [X31+36]
	212 Multiply S17, S12, S14
	213 Add S1, S1, S26
	214 Subtract S4, S4, S17
	215 Add S2, S2, S7
	216 Move X1, X31
	217 Call Transform.SetPositionAndRotation, X0, X1, X2
	218 Move X0, [X19+192]
	219 Compare X0, 0
	220 JumpIfEqual {282}
	221 Move S23, [X31+40]
	222 Move S19, [X31+44]
	223 Move S24, [X31+12]
	224 Move S20, [X31+16]
	225 Move S1, [X31+48]
	226 Move S0, [X31+52]
	227 Move S21, [X31+20]
	228 Move S25, [X31+24]
	229 Move X20, [X31+160]
	230 Move X19, [X31+168]
	231 Multiply S2, S23, S20
	232 Multiply S3, S19, S24
	233 Multiply S4, S1, S25
	234 Multiply S5, S0, S21
	235 Multiply S6, S23, S21
	236 Multiply S7, S1, S24
	237 Multiply S16, S0, S20
	238 Multiply S17, S19, S25
	239 Multiply S18, S19, S21
	240 Multiply S19, S19, S20
	241 Multiply S20, S1, S20
	242 Multiply S21, S1, S21
	243 Multiply S22, S23, S25
	244 Multiply S23, S23, S24
	245 Multiply S24, S0, S24
	246 Multiply S25, S0, S25
	247 Move V0, [X31+60]
	248 Move S26, [X31]
	249 Move S1, [X31+4]
	250 Add S2, S2, S3
	251 Add S3, S6, S7
	252 Add S6, S22, S24
	253 Subtract S7, S23, S19
	254 Add S2, S4, S2
	255 Add S6, S18, S6
	256 Subtract S7, S7, S21
	257 Add S0, S0, S1
	258 Move V1, [X31+56]
	259 Add S4, S16, S3
	260 Subtract S3, S2, S5
	261 Subtract S5, S6, S20
	262 Subtract S6, S7, S25
	263 Move V2, [X31+64]
	264 Move V7, [X31+8]
	265 Move X30, [X31+144]
	266 Move X21, [X31+152]
	267 Move D9, [X31+128]
	268 Move D8, [X31+136]
	269 Move D11, [X31+112]
	270 Move D10, [X31+120]
	271 Move D13, [X31+96]
	272 Move D12, [X31+104]
	273 Move D15, [X31+80]
	274 Move D14, [X31+88]
	275 Add S1, S1, S26
	276 Subtract S4, S4, S17
	277 Add S2, S2, S7
	278 Move X1, X31
	279 Add X31, X31, 176
	280 Call Transform.SetPositionAndRotation, X0, X1, X2
	281 Return 
	282 Call 0x1C17F20

Method: System.Void UpdateRagdoll()

Disassembly:
	0x01DC9CF8 MOV X0, X20
	0x01DC9CFC MOV X2, X31
	0x01DC9D00 BL 0x3C14988
	0x01DC9D04 B 0x1DC9C00
	0x01DC9D08 MOV X20, X31
	0x01DC9D0C CBZ X19, 0x1DC9DCC
	0x01DC9D10 ADRP X10, 0x232A000
	0x01DC9D14 LDR X8, [X19]
	0x01DC9D18 LDR X10, [X10 + 0xE00]
	0x01DC9D1C LDRH W9, [X8 + 0x12E]
	0x01DC9D20 LDR X1, [X10]
	0x01DC9D24 CBZ X9, 0x1DC9D48
	0x01DC9D28 LDR X10, [X8 + 0xB0]
	0x01DC9D2C ADD X10, X10, 0x8
	0x01DC9D30 LDUR X11, [X10 - 0x8]
	0x01DC9D34 CMP X11, X1
	0x01DC9D38 B.EQ 0x1DC9DB4
	0x01DC9D3C SUBS X9, X9, 0x1
	0x01DC9D40 ADD X10, X10, 0x10
	0x01DC9D44 B.NE 0x1DC9D30
	0x01DC9D48 MOV X0, X19
	0x01DC9D4C MOV W2, W31
	0x01DC9D50 BL 0x1C5C788
	0x01DC9D54 B 0x1DC9DC0
	0x01DC9D58 LDRSW X9, [X10]
	0x01DC9D5C ADD X8, X8, X9, 0x4, LSL
	0x01DC9D60 ADD X0, X8, 0x138
	0x01DC9D64 LDP X8, X1, [X0]
	0x01DC9D68 MOV X0, X20
	0x01DC9D6C BLR X8
	0x01DC9D70 CBNZ X22, 0x1DC9E00
	0x01DC9D74 CMP W21, 0x6
	0x01DC9D78 B.EQ 0x1DC9D80
	0x01DC9D7C CBNZ W21, 0x1DC9DD4
	0x01DC9D80 ADRP X8, 0x232D000
	0x01DC9D84 LDR X8, [X8 + 0xC30]
	0x01DC9D88 LDR X0, [X8]
	0x01DC9D8C BL 0x1C16F10
	0x01DC9D90 ADRP X8, 0xFFFFFFFFFED21000
	0x01DC9D94 LDR V0, [X8 + 0xBC]
	0x01DC9D98 MOV X1, X31
	0x01DC9D9C MOV X20, X0
	0x01DC9DA0 BL 0x3C3A634
	0x01DC9DA4 MOVZ W8, 0x1
	0x01DC9DA8 STR X20, [X19 + 0x18]
	0x01DC9DAC STR W8, [X19 + 0x10]
	0x01DC9DB0 B 0x1DC9DD4
	0x01DC9DB4 LDRSW X9, [X10]
	0x01DC9DB8 ADD X8, X8, X9, 0x4, LSL
	0x01DC9DBC ADD X0, X8, 0x138
	0x01DC9DC0 LDP X8, X1, [X0]
	0x01DC9DC4 MOV X0, X19
	0x01DC9DC8 BLR X8
	0x01DC9DCC CBNZ X20, 0x1DC9E08
	0x01DC9DD0 MOV W8, W31
	0x01DC9DD4 LDP X20, X19, [X31 + 0x30]
	0x01DC9DD8 LDP X22, X21, [X31 + 0x20]
	0x01DC9DDC LDP X24, X23, [X31 + 0x10]
	0x01DC9DE0 AND W0, W8, 0x1
	0x01DC9DE4 LDP X30, X25, [X31], #0x40
	0x01DC9DE8 RET
	0x01DC9DEC BL 0x1C16F20
	0x01DC9DF0 BL 0x1C16F20
	0x01DC9DF4 BL 0x1C16F20
	0x01DC9DF8 BL 0x1C16F20
	0x01DC9DFC BL 0x1C16F20
	0x01DC9E00 MOV X0, X22
	0x01DC9E04 BL 0x1C16F18
	0x01DC9E08 MOV X0, X20
	0x01DC9E0C BL 0x1C16F18
	0x01DC9E10 B 0x1DC9E38
	0x01DC9E14 B 0x1DC9ED4
	0x01DC9E18 B 0x1DC9E38
	0x01DC9E1C B 0x1DC9ED4
	0x01DC9E20 B 0x1DC9E38
	0x01DC9E24 B 0x1DC9ED4
	0x01DC9E28 B 0x1DC9E38
	0x01DC9E2C B 0x1DC9ED4
	0x01DC9E30 B 0x1DC9E38
	0x01DC9E34 B 0x1DC9ED4
	0x01DC9E38 MOV X21, X0
	0x01DC9E3C CMP W1, 0x1
	0x01DC9E40 B.NE 0x1DC9E58
	0x01DC9E44 MOV X0, X21
	0x01DC9E48 BL 0x3EB1AD0
	0x01DC9E4C LDR X20, [X0]
	0x01DC9E50 BL 0x3EB1AE0
	0x01DC9E54 B 0x1DC9D0C
	0x01DC9E58 MOV X20, X31
	0x01DC9E5C B 0x1DC9E64
	0x01DC9E60 MOV X21, X0
	0x01DC9E64 CBZ X19, 0x1DC9EC8
	0x01DC9E68 ADRP X10, 0x232A000
	0x01DC9E6C LDR X8, [X19]
	0x01DC9E70 LDR X10, [X10 + 0xE00]
	0x01DC9E74 LDRH W9, [X8 + 0x12E]
	0x01DC9E78 LDR X1, [X10]
	0x01DC9E7C CBZ X9, 0x1DC9EA0
	0x01DC9E80 LDR X10, [X8 + 0xB0]
	0x01DC9E84 ADD X10, X10, 0x8
	0x01DC9E88 LDUR X11, [X10 - 0x8]
	0x01DC9E8C CMP X11, X1
	0x01DC9E90 B.EQ 0x1DC9EB0
	0x01DC9E94 SUBS X9, X9, 0x1
	0x01DC9E98 ADD X10, X10, 0x10
	0x01DC9E9C B.NE 0x1DC9E88
	0x01DC9EA0 MOV X0, X19
	0x01DC9EA4 MOV W2, W31
	0x01DC9EA8 BL 0x1C5C788
	0x01DC9EAC B 0x1DC9EBC
	0x01DC9EB0 LDRSW X9, [X10]
	0x01DC9EB4 ADD X8, X8, X9, 0x4, LSL
	0x01DC9EB8 ADD X0, X8, 0x138
	0x01DC9EBC LDP X8, X1, [X0]
	0x01DC9EC0 MOV X0, X19
	0x01DC9EC4 BLR X8
	0x01DC9EC8 CBZ X20, 0x1DC9F70
	0x01DC9ECC MOV X0, X20
	0x01DC9ED0 BL 0x1C16F18
	0x01DC9ED4 MOV X21, X0
	0x01DC9ED8 CMP W1, 0x1
	0x01DC9EDC B.NE 0x1DC9EFC
	0x01DC9EE0 MOV X0, X21
	0x01DC9EE4 BL 0x3EB1AD0
	0x01DC9EE8 LDR X22, [X0]
	0x01DC9EEC BL 0x3EB1AE0
	0x01DC9EF0 MOV W21, W31
	0x01DC9EF4 CBNZ X20, 0x1DC9B78
	0x01DC9EF8 B 0x1DC9D70
	0x01DC9EFC MOV X22, X31
	0x01DC9F00 B 0x1DC9F08
	0x01DC9F04 MOV X21, X0
	0x01DC9F08 CBZ X20, 0x1DC9F6C
	0x01DC9F0C ADRP X10, 0x232A000
	0x01DC9F10 LDR X8, [X20]
	0x01DC9F14 LDR X10, [X10 + 0xE00]
	0x01DC9F18 LDRH W9, [X8 + 0x12E]
	0x01DC9F1C LDR X1, [X10]
	0x01DC9F20 CBZ X9, 0x1DC9F44
	0x01DC9F24 LDR X10, [X8 + 0xB0]
	0x01DC9F28 ADD X10, X10, 0x8
	0x01DC9F2C LDUR X11, [X10 - 0x8]
	0x01DC9F30 CMP X11, X1
	0x01DC9F34 B.EQ 0x1DC9F54
	0x01DC9F38 SUBS X9, X9, 0x1
	0x01DC9F3C ADD X10, X10, 0x10
	0x01DC9F40 B.NE 0x1DC9F2C
	0x01DC9F44 MOV X0, X20
	0x01DC9F48 MOV W2, W31
	0x01DC9F4C BL 0x1C5C788
	0x01DC9F50 B 0x1DC9F60
	0x01DC9F54 LDRSW X9, [X10]
	0x01DC9F58 ADD X8, X8, X9, 0x4, LSL
	0x01DC9F5C ADD X0, X8, 0x138
	0x01DC9F60 LDP X8, X1, [X0]
	0x01DC9F64 MOV X0, X20
	0x01DC9F68 BLR X8
	0x01DC9F6C CBNZ X22, 0x1DC9F78
	0x01DC9F70 MOV X0, X21
	0x01DC9F74 BL 0x1D2C690
	0x01DC9F78 MOV X0, X22
	0x01DC9F7C BL 0x1C16F18
	0x01DC9F80 BL 0x1990590
	0x01DC9F84 LDR X0, [X0 + 0x18]
	0x01DC9F88 RET
	0x01DC9F8C STP X30, X19, [X31 - 0x10]!
	0x01DC9F90 ADRP X0, 0x232A000
	0x01DC9F94 LDR X0, [X0 + 0xB40]
	0x01DC9F98 BL 0x1C16D08
	0x01DC9F9C BL 0x1C16F10
	0x01DC9FA0 MOV X1, X31
	0x01DC9FA4 MOV X19, X0
	0x01DC9FA8 BL 0x3380310
	0x01DC9FAC ADRP X0, 0x232F000
	0x01DC9FB0 LDR X0, [X0 + 0x258]
	0x01DC9FB4 BL 0x1C16D08
	0x01DC9FB8 MOV X1, X0
	0x01DC9FBC MOV X0, X19
	0x01DC9FC0 BL 0x1C16DEC
	0x01DC9FC4 LDR X0, [X0 + 0x18]
	0x01DC9FC8 RET
	0x01DC9FCC STP X30, X19, [X31 - 0x10]!
	0x01DC9FD0 LDR X8, [X0 + 0x50]
	0x01DC9FD4 CBZ X8, 0x1DC9FE4
	0x01DC9FD8 LDR W0, [X8]
	0x01DC9FDC LDP X30, X19, [X31], #0x10
	0x01DC9FE0 RET
	0x01DC9FE4 ADRP X0, 0x232A000
	0x01DC9FE8 LDR X0, [X0 + 0x5B0]
	0x01DC9FEC BL 0x1C16D08
	0x01DC9FF0 BL 0x1C16F10
	0x01DC9FF4 MOV X19, X0
	0x01DC9FF8 ADRP X0, 0x232F000
	0x01DC9FFC LDR X0, [X0 + 0x260]
	0x01DCA000 BL 0x1C16D08
	0x01DCA004 MOV X1, X0
	0x01DCA008 MOV X0, X19
	0x01DCA00C MOV X2, X31
	0x01DCA010 BL 0x337DF1C
	0x01DCA014 ADRP X0, 0x232E000
	0x01DCA018 LDR X0, [X0 + 0x268]
	0x01DCA01C BL 0x1C16D08
	0x01DCA020 MOV X1, X0
	0x01DCA024 MOV X0, X19
	0x01DCA028 BL 0x1C16DEC
	0x01DCA02C STP X30, X19, [X31 - 0x10]!
	0x01DCA030 LDR X8, [X0 + 0x50]
	0x01DCA034 CBZ X8, 0x1DCA044
	0x01DCA038 STR W1, [X8]
	0x01DCA03C LDP X30, X19, [X31], #0x10
	0x01DCA040 RET
	0x01DCA044 ADRP X0, 0x2329000
	0x01DCA048 LDR X0, [X0 + 0x5B0]
	0x01DCA04C BL 0x1C16D08
	0x01DCA050 BL 0x1C16F10
	0x01DCA054 MOV X19, X0
	0x01DCA058 ADRP X0, 0x232E000
	0x01DCA05C LDR X0, [X0 + 0x260]
	0x01DCA060 BL 0x1C16D08
	0x01DCA064 MOV X1, X0
	0x01DCA068 MOV X0, X19
	0x01DCA06C MOV X2, X31
	0x01DCA070 BL 0x337DF1C
	0x01DCA074 ADRP X0, 0x232E000
	0x01DCA078 LDR X0, [X0 + 0x270]
	0x01DCA07C BL 0x1C16D08
	0x01DCA080 MOV X1, X0
	0x01DCA084 MOV X0, X19
	0x01DCA088 BL 0x1C16DEC
	0x01DCA08C STP X30, X19, [X31 - 0x10]!
	0x01DCA090 LDR X8, [X0 + 0x50]
	0x01DCA094 CBZ X8, 0x1DCA0A4
	0x01DCA098 LDR W0, [X8 + 0x4]
	0x01DCA09C LDP X30, X19, [X31], #0x10
	0x01DCA0A0 RET
	0x01DCA0A4 ADRP X0, 0x2329000
	0x01DCA0A8 LDR X0, [X0 + 0x5B0]
	0x01DCA0AC BL 0x1C16D08
	0x01DCA0B0 BL 0x1C16F10
	0x01DCA0B4 MOV X19, X0
	0x01DCA0B8 ADRP X0, 0x232E000
	0x01DCA0BC LDR X0, [X0 + 0x278]
	0x01DCA0C0 BL 0x1C16D08
	0x01DCA0C4 MOV X1, X0
	0x01DCA0C8 MOV X0, X19
	0x01DCA0CC MOV X2, X31
	0x01DCA0D0 BL 0x337DF1C
	0x01DCA0D4 ADRP X0, 0x232E000
	0x01DCA0D8 LDR X0, [X0 + 0x280]
	0x01DCA0DC BL 0x1C16D08
	0x01DCA0E0 MOV X1, X0
	0x01DCA0E4 MOV X0, X19
	0x01DCA0E8 BL 0x1C16DEC
	0x01DCA0EC STP X30, X19, [X31 - 0x10]!
	0x01DCA0F0 LDR X8, [X0 + 0x50]
	0x01DCA0F4 CBZ X8, 0x1DCA104
	0x01DCA0F8 STR W1, [X8 + 0x4]
	0x01DCA0FC LDP X30, X19, [X31], #0x10
	0x01DCA100 RET
	0x01DCA104 ADRP X0, 0x2329000
	0x01DCA108 LDR X0, [X0 + 0x5B0]
	0x01DCA10C BL 0x1C16D08
	0x01DCA110 BL 0x1C16F10
	0x01DCA114 MOV X19, X0
	0x01DCA118 ADRP X0, 0x232E000
	0x01DCA11C LDR X0, [X0 + 0x278]
	0x01DCA120 BL 0x1C16D08
	0x01DCA124 MOV X1, X0
	0x01DCA128 MOV X0, X19
	0x01DCA12C MOV X2, X31
	0x01DCA130 BL 0x337DF1C
	0x01DCA134 ADRP X0, 0x232E000
	0x01DCA138 LDR X0, [X0 + 0x288]
	0x01DCA13C BL 0x1C16D08
	0x01DCA140 MOV X1, X0
	0x01DCA144 MOV X0, X19
	0x01DCA148 BL 0x1C16DEC
	0x01DCA14C STP X30, X19, [X31 - 0x10]!
	0x01DCA150 LDR X8, [X0 + 0x50]
	0x01DCA154 CBZ X8, 0x1DCA164
	0x01DCA158 LDR W0, [X8 + 0x8]
	0x01DCA15C LDP X30, X19, [X31], #0x10
	0x01DCA160 RET
	0x01DCA164 ADRP X0, 0x2329000
	0x01DCA168 LDR X0, [X0 + 0x5B0]
	0x01DCA16C BL 0x1C16D08
	0x01DCA170 BL 0x1C16F10
	0x01DCA174 MOV X19, X0
	0x01DCA178 ADRP X0, 0x232E000
	0x01DCA17C LDR X0, [X0 + 0x290]
	0x01DCA180 BL 0x1C16D08
	0x01DCA184 MOV X1, X0
	0x01DCA188 MOV X0, X19
	0x01DCA18C MOV X2, X31
	0x01DCA190 BL 0x337DF1C
	0x01DCA194 ADRP X0, 0x232E000
	0x01DCA198 LDR X0, [X0 + 0x298]
	0x01DCA19C BL 0x1C16D08
	0x01DCA1A0 MOV X1, X0
	0x01DCA1A4 MOV X0, X19
	0x01DCA1A8 BL 0x1C16DEC
	0x01DCA1AC STP X30, X19, [X31 - 0x10]!
	0x01DCA1B0 LDR X8, [X0 + 0x50]
	0x01DCA1B4 CBZ X8, 0x1DCA1C4
	0x01DCA1B8 STR W1, [X8 + 0x8]
	0x01DCA1BC LDP X30, X19, [X31], #0x10
	0x01DCA1C0 RET
	0x01DCA1C4 ADRP X0, 0x2329000
	0x01DCA1C8 LDR X0, [X0 + 0x5B0]
	0x01DCA1CC BL 0x1C16D08
	0x01DCA1D0 BL 0x1C16F10
	0x01DCA1D4 MOV X19, X0
	0x01DCA1D8 ADRP X0, 0x232E000
	0x01DCA1DC LDR X0, [X0 + 0x290]
	0x01DCA1E0 BL 0x1C16D08
	0x01DCA1E4 MOV X1, X0
	0x01DCA1E8 MOV X0, X19
	0x01DCA1EC MOV X2, X31
	0x01DCA1F0 BL 0x337DF1C
	0x01DCA1F4 ADRP X0, 0x232E000
	0x01DCA1F8 LDR X0, [X0 + 0x2A0]
	0x01DCA1FC BL 0x1C16D08
	0x01DCA200 MOV X1, X0
	0x01DCA204 MOV X0, X19
	0x01DCA208 BL 0x1C16DEC
	0x01DCA20C STP X30, X19, [X31 - 0x10]!
	0x01DCA210 LDR X8, [X0 + 0x50]
	0x01DCA214 CBZ X8, 0x1DCA224
	0x01DCA218 LDR W0, [X8 + 0xC]
	0x01DCA21C LDP X30, X19, [X31], #0x10
	0x01DCA220 RET
	0x01DCA224 ADRP X0, 0x2329000
	0x01DCA228 LDR X0, [X0 + 0x5B0]
	0x01DCA22C BL 0x1C16D08
	0x01DCA230 BL 0x1C16F10
	0x01DCA234 MOV X19, X0
	0x01DCA238 ADRP X0, 0x232E000
	0x01DCA23C LDR X0, [X0 + 0x2A8]
	0x01DCA240 BL 0x1C16D08
	0x01DCA244 MOV X1, X0
	0x01DCA248 MOV X0, X19
	0x01DCA24C MOV X2, X31
	0x01DCA250 BL 0x337DF1C
	0x01DCA254 ADRP X0, 0x232E000
	0x01DCA258 LDR X0, [X0 + 0x2B0]
	0x01DCA25C BL 0x1C16D08
	0x01DCA260 MOV X1, X0
	0x01DCA264 MOV X0, X19
	0x01DCA268 BL 0x1C16DEC
	0x01DCA26C STP X30, X19, [X31 - 0x10]!
	0x01DCA270 LDR X8, [X0 + 0x50]
	0x01DCA274 CBZ X8, 0x1DCA284
	0x01DCA278 STR W1, [X8 + 0xC]
	0x01DCA27C LDP X30, X19, [X31], #0x10
	0x01DCA280 RET
	0x01DCA284 ADRP X0, 0x2329000
	0x01DCA288 LDR X0, [X0 + 0x5B0]
	0x01DCA28C BL 0x1C16D08
	0x01DCA290 BL 0x1C16F10
	0x01DCA294 MOV X19, X0
	0x01DCA298 ADRP X0, 0x232E000
	0x01DCA29C LDR X0, [X0 + 0x2A8]
	0x01DCA2A0 BL 0x1C16D08
	0x01DCA2A4 MOV X1, X0
	0x01DCA2A8 MOV X0, X19
	0x01DCA2AC MOV X2, X31
	0x01DCA2B0 BL 0x337DF1C
	0x01DCA2B4 ADRP X0, 0x232E000
	0x01DCA2B8 LDR X0, [X0 + 0x2B8]
	0x01DCA2BC BL 0x1C16D08
	0x01DCA2C0 MOV X1, X0
	0x01DCA2C4 MOV X0, X19
	0x01DCA2C8 BL 0x1C16DEC
	0x01DCA2CC STR X30, [X31 - 0x10]!
	0x01DCA2D0 BL 0x1DC9FCC
	0x01DCA2D4 ORN W8, W31, W0, 0x0
	0x01DCA2D8 UBFM W0, W8, 0x1F, 0x1F
	0x01DCA2DC LDR X30, [X31], #0x10
	0x01DCA2E0 RET
	0x01DCA2E4 STP X30, X21, [X31 - 0x20]!
	0x01DCA2E8 STP X20, X19, [X31 + 0x10]
	0x01DCA2EC ADRP X21, 0x260E000
	0x01DCA2F0 ADRP X20, 0x2329000
	0x01DCA2F4 LDRB W8, [X21 + 0xBAE]
	0x01DCA2F8 LDR X20, [X20 + 0x598]
	0x01DCA2FC MOV X19, X0
	0x01DCA300 TBNZ X8, 0x0, 0x1DCA318
	0x01DCA304 ADRP X0, 0x2329000
	0x01DCA308 LDR X0, [X0 + 0x598]
	0x01DCA30C BL 0x1C16CF4
	0x01DCA310 MOVZ W8, 0x1
	0x01DCA314 STRB W8, [X21 + 0xBAE]
	0x01DCA318 LDR X0, [X20]
	0x01DCA31C LDR X20, [X19 + 0x40]
	0x01DCA320 LDR W8, [X0 + 0xE0]
	0x01DCA324 CBNZ W8, 0x1DCA32C
	0x01DCA328 BL 0x1C16DFC
	0x01DCA32C MOV X0, X20
	0x01DCA330 MOV X1, X31
	0x01DCA334 MOV X2, X31
	0x01DCA338 BL 0x3C354F8
	0x01DCA33C TBZ X0, 0x0, 0x1DCA358
	0x01DCA340 LDR X0, [X19 + 0x40]
	0x01DCA344 CBZ X0, 0x1DCA368
	0x01DCA348 LDP X20, X19, [X31 + 0x10]
	0x01DCA34C MOV X1, X31
	0x01DCA350 LDP X30, X21, [X31], #0x20
	0x01DCA354 B 0x1E93588
	0x01DCA358 LDP X20, X19, [X31 + 0x10]
	0x01DCA35C MOV W0, W31
	0x01DCA360 LDP X30, X21, [X31], #0x20
	0x01DCA364 RET
	0x01DCA368 BL 0x1C16F20
	0x01DCA36C STP X30, X21, [X31 - 0x20]!
	0x01DCA370 STP X20, X19, [X31 + 0x10]
	0x01DCA374 ADRP X20, 0x260E000
	0x01DCA378 ADRP X21, 0x232C000
	0x01DCA37C LDRB W8, [X20 + 0xBAF]
	0x01DCA380 LDR X21, [X21 + 0xF60]
	0x01DCA384 MOV X19, X0
	0x01DCA388 TBNZ X8, 0x0, 0x1DCA3A0
	0x01DCA38C ADRP X0, 0x232C000
	0x01DCA390 LDR X0, [X0 + 0xF60]
	0x01DCA394 BL 0x1C16CF4
	0x01DCA398 MOVZ W8, 0x1
	0x01DCA39C STRB W8, [X20 + 0xBAF]
	0x01DCA3A0 LDR X1, [X21]
	0x01DCA3A4 MOV X0, X19
	0x01DCA3A8 BL 0x21A3F50
	0x01DCA3AC LDR X8, [X19 + 0x98]
	0x01DCA3B0 STR X0, [X19 + 0xB8]
	0x01DCA3B4 CBZ X8, 0x1DCA3C8
	0x01DCA3B8 LDP X20, X19, [X31 + 0x10]
	0x01DCA3BC MOV X0, X8
	0x01DCA3C0 LDP X30, X21, [X31], #0x20
	0x01DCA3C4 B 0x1DCA3CC
	0x01DCA3C8 BL 0x1C16F20
	0x01DCA3CC STP X30, X19, [X31 - 0x10]!
	0x01DCA3D0 MOV W1, W31
	0x01DCA3D4 MOV X19, X0
	0x01DCA3D8 BL 0x1DCB3FC
	0x01DCA3DC MOV X0, X19
	0x01DCA3E0 MOV W1, W31
	0x01DCA3E4 BL 0x1DCBF78
	0x01DCA3E8 FMOV S0, 1
	0x01DCA3EC MOV X0, X19
	0x01DCA3F0 BL 0x1DCD480
	0x01DCA3F4 FMOV S0, 1
	0x01DCA3F8 MOV X0, X19
	0x01DCA3FC BL 0x1DCB56C
	0x01DCA400 FMOV S0, 1
	0x01DCA404 MOV X0, X19
	0x01DCA408 LDP X30, X19, [X31], #0x10
	0x01DCA40C B 0x1DCD514
	0x01DCA410 STP X30, X23, [X31 - 0x30]!
	0x01DCA414 STP X22, X21, [X31 + 0x10]
	0x01DCA418 STP X20, X19, [X31 + 0x20]
	0x01DCA41C ADRP X20, 0x260E000
	0x01DCA420 LDRB W8, [X20 + 0xBB0]
	0x01DCA424 MOV X19, X0
	0x01DCA428 TBNZ X8, 0x0, 0x1DCA4DC
	0x01DCA42C ADRP X0, 0x232B000
	0x01DCA430 LDR X0, [X0 + 0x5B0]
	0x01DCA434 BL 0x1C16CF4
	0x01DCA438 ADRP X0, 0x232D000
	0x01DCA43C LDR X0, [X0 + 0xB00]
	0x01DCA440 BL 0x1C16CF4
	0x01DCA444 ADRP X0, 0x232E000
	0x01DCA448 LDR X0, [X0 + 0x2C0]
	0x01DCA44C BL 0x1C16CF4
	0x01DCA450 ADRP X0, 0x232A000
	0x01DCA454 LDR X0, [X0 + 0xE70]
	0x01DCA458 BL 0x1C16CF4
	0x01DCA45C ADRP X0, 0x2329000
	0x01DCA460 LDR X0, [X0 + 0x648]
	0x01DCA464 BL 0x1C16CF4
	0x01DCA468 ADRP X0, 0x2329000
	0x01DCA46C LDR X0, [X0 + 0xDB0]
	0x01DCA470 BL 0x1C16CF4
	0x01DCA474 ADRP X0, 0x2329000
	0x01DCA478 LDR X0, [X0 + 0xDA0]
	0x01DCA47C BL 0x1C16CF4
	0x01DCA480 ADRP X0, 0x232B000
	0x01DCA484 LDR X0, [X0 + 0x7C8]
	0x01DCA488 BL 0x1C16CF4
	0x01DCA48C ADRP X0, 0x232E000
	0x01DCA490 LDR X0, [X0 + 0x2C8]
	0x01DCA494 BL 0x1C16CF4
	0x01DCA498 ADRP X0, 0x232E000
	0x01DCA49C LDR X0, [X0 + 0x2D0]
	0x01DCA4A0 BL 0x1C16CF4
	0x01DCA4A4 ADRP X0, 0x232E000
	0x01DCA4A8 LDR X0, [X0 + 0x2D8]
	0x01DCA4AC BL 0x1C16CF4
	0x01DCA4B0 ADRP X0, 0x232E000
	0x01DCA4B4 LDR X0, [X0 + 0x2E0]
	0x01DCA4B8 BL 0x1C16CF4
	0x01DCA4BC ADRP X0, 0x232E000
	0x01DCA4C0 LDR X0, [X0 + 0x2E8]
	0x01DCA4C4 BL 0x1C16CF4
	0x01DCA4C8 ADRP X0, 0x232C000
	0x01DCA4CC LDR X0, [X0 + 0xD98]
	0x01DCA4D0 BL 0x1C16CF4
	0x01DCA4D4 MOVZ W8, 0x1
	0x01DCA4D8 STRB W8, [X20 + 0xBB0]
	0x01DCA4DC MOV X0, X19
	0x01DCA4E0 BL 0x1DCA2E4
	0x01DCA4E4 TBZ X0, 0x0, 0x1DCA830
	0x01DCA4E8 ADRP X8, 0x2329000
	0x01DCA4EC LDR X8, [X8 + 0xDA0]
	0x01DCA4F0 LDR X0, [X8]
	0x01DCA4F4 BL 0x1C16F10
	0x01DCA4F8 ADRP X8, 0x232E000
	0x01DCA4FC LDR X8, [X8 + 0x2D0]
	0x01DCA500 MOV X1, X19
	0x01DCA504 MOV X3, X31
	0x01DCA508 MOV X20, X0
	0x01DCA50C LDR X2, [X8]
	0x01DCA510 BL 0x35C52F0
	0x01DCA514 ADRP X8, 0x2329000
	0x01DCA518 LDR X8, [X8 + 0xDB0]
	0x01DCA51C MOVZ W1, 0x1
	0x01DCA520 LDR X0, [X8]
	0x01DCA524 BL 0x1C16D6C
	0x01DCA528 ADRP X22, 0x2329000
	0x01DCA52C LDR X22, [X22 + 0x648]
	0x01DCA530 MOV X21, X0
	0x01DCA534 LDR X8, [X22]
	0x01DCA538 LDR W9, [X8 + 0xE0]
	0x01DCA53C CBNZ W9, 0x1DCA548
	0x01DCA540 MOV X0, X8
	0x01DCA544 BL 0x1C16DFC
	0x01DCA548 ADRP X23, 0x260E000
	0x01DCA54C LDRB W8, [X23 + 0x787]
	0x01DCA550 CBNZ W8, 0x1DCA568
	0x01DCA554 ADRP X0, 0x2329000
	0x01DCA558 LDR X0, [X0 + 0x648]
	0x01DCA55C BL 0x1C16CF4
	0x01DCA560 MOVZ W8, 0x1
	0x01DCA564 STRB W8, [X23 + 0x787]
	0x01DCA568 LDR X0, [X22]
	0x01DCA56C LDR W8, [X0 + 0xE0]
	0x01DCA570 CBNZ W8, 0x1DCA57C
	0x01DCA574 BL 0x1C16DFC
	0x01DCA578 LDR X0, [X22]
	0x01DCA57C LDR X8, [X0 + 0xB8]
	0x01DCA580 LDR X8, [X8]
	0x01DCA584 CBZ X8, 0x1DCA840
	0x01DCA588 LDR X8, [X8 + 0xB8]
	0x01DCA58C CBZ X8, 0x1DCA840
	0x01DCA590 LDR X8, [X8 + 0x80]
	0x01DCA594 CBZ X8, 0x1DCA840
	0x01DCA598 CBZ X21, 0x1DCA840
	0x01DCA59C LDR X22, [X8 + 0x48]
	0x01DCA5A0 CBZ X22, 0x1DCA5B8
	0x01DCA5A4 LDR X8, [X21]
	0x01DCA5A8 MOV X0, X22
	0x01DCA5AC LDR X1, [X8 + 0x40]
	0x01DCA5B0 BL 0x1C16E00
	0x01DCA5B4 CBZ X0, 0x1DCA848
	0x01DCA5B8 LDR W8, [X21 + 0x18]
	0x01DCA5BC CBZ W8, 0x1DCA844
	0x01DCA5C0 MOV X0, X20
	0x01DCA5C4 MOV X1, X21
	0x01DCA5C8 MOV X2, X31
	0x01DCA5CC STR X22, [X21 + 0x20]
	0x01DCA5D0 BL 0x1D363F0
	0x01DCA5D4 ADRP X22, 0x232B000
	0x01DCA5D8 LDR X22, [X22 + 0x7C8]
	0x01DCA5DC LDR X0, [X22]
	0x01DCA5E0 LDR W8, [X0 + 0xE0]
	0x01DCA5E4 CBNZ W8, 0x1DCA5F0
	0x01DCA5E8 BL 0x1C16DFC
	0x01DCA5EC LDR X0, [X22]
	0x01DCA5F0 ADRP X23, 0x232D000
	0x01DCA5F4 LDR X8, [X0 + 0xB8]
	0x01DCA5F8 LDR X23, [X23 + 0xB00]
	0x01DCA5FC LDR X20, [X8 + 0x28]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X25
	012 Move [X31+112], X24
	013 Move [X31+120], X23
	014 Move [X31+128], X22
	015 Move [X31+136], X21
	016 Move [X31+144], X20
	017 Move [X31+152], X19
	018 Move X20, 0x2610000
	019 Move W8, [X20+2985]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x232B000
	026 Move X0, [X0+1528]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2985], W8
	030 Move X21, 0x2610000
	031 Move V8, [X19+248]
	032 Move W8, [X21+1923]
	033 Move V9, [X19+256]
	034 Add X20, X19, 260
	035 Compare W8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, 0x232B000
	038 Move X0, [X0+1440]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X21+1923], W8
	042 Move X22, 0x232B000
	043 Move X22, [X22+1440]
	044 Move W10, 0xCCCD
	045 NotImplemented "Instruction MOVK not yet implemented."
	046 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	047 Move X8, [X22]
	048 Move V4, [X19+268]
	049 Move X9, [X8+184]
	050 Move V1, [X9]
	051 Move V2, [X9+8]
	052 Move X9, -19783680
	053 Move V3, [X9+860]
	054 Subtract V1, V1, V8
	055 Subtract S2, S2, S9
	056 NotImplemented "Instruction INVALID not yet implemented."
	057 Multiply S2, S2, S3
	058 Add V8, V8, V1
	059 Add S9, S9, S2
	060 Move [X19+248], D8
	061 Move [X19+256], S9
	062 Move X8, [X8+184]
	063 Move V1, [X20]
	064 Move V2, [X8]
	065 Move V5, [X8+8]
	066 Subtract V2, V2, V1
	067 NotImplemented "Instruction INVALID not yet implemented."
	068 Add V0, V1, V0
	069 Move [X20], D0
	070 Move X8, [X19+240]
	071 Subtract S0, S5, S4
	072 Multiply S0, S0, S3
	073 Add S0, S4, S0
	074 Move [X19+268], S0
	075 Compare X8, 0
	076 JumpIfEqual {637}
	077 Move W9, [X8+24]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X0, [X8+40]
	080 Compare X0, 0
	081 JumpIfEqual {637}
	082 Move X1, X31
	083 Call Rigidbody.get_position, X0
	084 Move W8, 0x999A
	085 NotImplemented "Instruction MOVK not yet implemented."
	086 Move V3, [X19+272]
	087 Move V4, [X19+280]
	088 Move V0.S[1], V1.S[0]
	089 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	090 Move X8, -19783680
	091 Move V10, [X8+1100]
	092 Move X8, [X19+240]
	093 Subtract V0, V0, V3
	094 Subtract S2, S2, S4
	095 NotImplemented "Instruction INVALID not yet implemented."
	096 Multiply S1, S2, S10
	097 Add V0, V8, V0
	098 Add S1, S9, S1
	099 Move [X19+248], D0
	100 Move [X19+256], S1
	101 Compare X8, 0
	102 JumpIfEqual {637}
	103 Move W9, [X8+24]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X0, [X8+48]
	106 Compare X0, 0
	107 JumpIfEqual {637}
	108 Move X23, 0x232B000
	109 Move V8, [X20]
	110 Move V9, [X19+268]
	111 Move X23, [X23+1528]
	112 Move X1, X31
	113 Call Rigidbody.get_position, X0
	114 Move V3, [X20+24]
	115 Move V4, [X19+292]
	116 Move W8, 0x999A
	117 NotImplemented "Instruction MOVK not yet implemented."
	118 Move V0.S[1], V1.S[0]
	119 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	120 Subtract V0, V0, V3
	121 Subtract S2, S2, S4
	122 NotImplemented "Instruction INVALID not yet implemented."
	123 Multiply S1, S2, S10
	124 Add V0, V8, V0
	125 Add S1, S9, S1
	126 Move [X20], D0
	127 Move [X19+268], S1
	128 Move X0, [X23]
	129 Move V10, [X19+248]
	130 Move V9, [X19+256]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {135}
	134 Call 0x1C17DFC
	135 Move X0, X31
	136 Call Physics.get_gravity
	137 Move X0, X31
	138 Move [X31+16], D0
	139 Move [X31], D1
	140 Move V8, V2
	141 Call Time.get_fixedDeltaTime
	142 Move V1, [X31]
	143 Move V2, [X31+16]
	144 Move W8, 0xD70A
	145 NotImplemented "Instruction MOVK not yet implemented."
	146 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	147 Move X8, -19783680
	148 Move V2.S[1], V1.S[0]
	149 Move V12, [X8+1036]
	150 Multiply S1, S8, S0
	151 NotImplemented "Instruction INVALID not yet implemented."
	152 NotImplemented "Instruction INVALID not yet implemented."
	153 Add V0, V10, V0
	154 Move [X19+248], D0
	155 Multiply S0, S1, S12
	156 Add S0, S9, S0
	157 Move [X19+256], S0
	158 Move V9, [X20]
	159 Move V10, [X19+268]
	160 Move X0, X31
	161 Call Physics.get_gravity
	162 Move X0, X31
	163 Move [X31+16], D0
	164 Move [X31], D1
	165 Move V8, V2
	166 Call Time.get_fixedDeltaTime
	167 Move V2, [X31]
	168 Move V1, [X31+16]
	169 Move V1.S[1], V2.S[0]
	170 NotImplemented "Instruction INVALID not yet implemented."
	171 NotImplemented "Instruction INVALID not yet implemented."
	172 Add V1, V9, V1
	173 Move [X20], D1
	174 Move X8, [X19+240]
	175 Multiply S0, S8, S0
	176 Multiply S0, S0, S12
	177 Add S0, S10, S0
	178 Move [X19+268], S0
	179 Compare X8, 0
	180 JumpIfEqual {637}
	181 Move W9, [X8+24]
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Move X0, [X8+40]
	184 Compare X0, 0
	185 JumpIfEqual {637}
	186 Move V0, [X19+280]
	187 Move V1, [X19+256]
	188 Move V3, [X19+272]
	189 Move V4, [X19+248]
	190 Move X1, X31
	191 Add S2, S0, S1
	192 Add V0, V3, V4
	193 Move S1, V0.S[1]
	194 Call Rigidbody.set_position, X0, X1
	195 Move X8, [X19+240]
	196 Compare X8, 0
	197 JumpIfEqual {637}
	198 Move W9, [X8+24]
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Move X0, [X8+48]
	201 Compare X0, 0
	202 JumpIfEqual {637}
	203 Move V0, [X19+292]
	204 Move V1, [X19+268]
	205 Move V3, [X20+24]
	206 Move V4, [X20]
	207 Move X1, X31
	208 Add S2, S0, S1
	209 Add V0, V3, V4
	210 Move S1, V0.S[1]
	211 Call Rigidbody.set_position, X0, X1
	212 Move X0, [X19+184]
	213 Compare X0, 0
	214 JumpIfEqual {637}
	215 Move X1, X31
	216 Call Transform.get_position, X0
	217 Move X0, [X19+176]
	218 Compare X0, 0
	219 JumpIfEqual {637}
	220 Move X1, X31
	221 Move V8, V0
	222 Move V9, V1
	223 Move V10, V2
	224 Call Transform.get_position, X0
	225 Move X24, 0x260F000
	226 Move W8, [X24+2140]
	227 Move V11, V0
	228 Move V12, V1
	229 Move V13, V2
	230 Compare W8, 0
	231 JumpIfNotEqual {237}
	232 Move X0, 0x232A000
	233 Move X0, [X0+1448]
	234 Call 0x1C17CF4
	235 Move W8, 1
	236 Move [X24+2140], W8
	237 Move X23, 0x232A000
	238 Move X23, [X23+1448]
	239 Subtract S11, S8, S11
	240 Subtract S9, S9, S12
	241 Subtract S8, S10, S13
	242 Move X0, [X23]
	243 Move W8, [X0+224]
	244 Compare W8, 0
	245 JumpIfNotEqual {247}
	246 Call 0x1C17DFC
	247 Multiply S0, S11, S11
	248 Multiply S1, S9, S9
	249 Multiply S2, S8, S8
	250 Add S0, S0, S1
	251 Add S0, S2, S0
	252 NotImplemented "Instruction FSQRT not yet implemented."
	253 Move S1, 0.75
	254 NotImplemented "Instruction FCMP not yet implemented."
	255 Move X8, [X19+240]
	256 Compare X8, 0
	257 JumpIfEqual {637}
	258 Move W9, [X8+24]
	259 NotImplemented "Instruction CMP not yet implemented."
	260 Move X0, [X19+176]
	261 Compare X0, 0
	262 JumpIfEqual {637}
	263 Move X20, [X8+40]
	264 Move X1, X31
	265 Call Transform.get_position, X0
	266 Move X0, [X19+184]
	267 Move [X31+16], S0
	268 Compare X0, 0
	269 JumpIfEqual {637}
	270 Move X1, X31
	271 Move V9, V1
	272 Move V10, V2
	273 Call Transform.get_position, X0
	274 Move X0, [X19+176]
	275 Compare X0, 0
	276 JumpIfEqual {637}
	277 Move X1, X31
	278 Move V11, V0
	279 Move V12, V1
	280 Move V13, V2
	281 Call Transform.get_position, X0
	282 Move X25, 0x260F000
	283 Move W8, [X25+1925]
	284 Move V14, V0
	285 Move V15, V1
	286 Move V8, V2
	287 Compare W8, 0
	288 JumpIfNotEqual {294}
	289 Move X0, 0x232A000
	290 Move X0, [X0+1448]
	291 Call 0x1C17CF4
	292 Move W8, 1
	293 Move [X25+1925], W8
	294 Move X0, [X23]
	295 Subtract S14, S11, S14
	296 Subtract S11, S12, S15
	297 Subtract S8, S13, S8
	298 Move W8, [X0+224]
	299 Compare W8, 0
	300 JumpIfNotEqual {302}
	301 Call 0x1C17DFC
	302 Multiply S0, S14, S14
	303 Multiply S1, S11, S11
	304 Move X8, -19787776
	305 Add S0, S0, S1
	306 Move V1, [X8+380]
	307 Multiply S2, S8, S8
	308 Add S0, S2, S0
	309 NotImplemented "Instruction FSQRT not yet implemented."
	310 NotImplemented "Instruction FCMP not yet implemented."
	311 NotImplemented "Instruction FDIV not yet implemented."
	312 NotImplemented "Instruction FDIV not yet implemented."
	313 NotImplemented "Instruction FDIV not yet implemented."
	314 Move W8, [X21+1923]
	315 Compare W8, 0
	316 JumpIfNotEqual {322}
	317 Move X0, 0x232A000
	318 Move X0, [X0+1440]
	319 Call 0x1C17CF4
	320 Move W8, 1
	321 Move [X21+1923], W8
	322 Move X8, [X22]
	323 Move X8, [X8+184]
	324 Move S0, [X8]
	325 Move S1, [X8+4]
	326 Move V2, [X8+8]
	327 Compare X20, 0
	328 JumpIfEqual {637}
	329 Move S3, 0.75
	330 Multiply S2, S2, S3
	331 Multiply S1, S1, S3
	332 Multiply S0, S0, S3
	333 Move V3, [X31+16]
	334 Add S2, S10, S2
	335 Add S1, S9, S1
	336 Move X0, X20
	337 Add S0, S3, S0
	338 Move X1, X31
	339 Call Rigidbody.set_position, X0, X1
	340 Move X8, [X19+240]
	341 Compare X8, 0
	342 JumpIfEqual {637}
	343 Move W9, [X8+24]
	344 NotImplemented "Instruction CMP not yet implemented."
	345 Move W9, [X21+1923]
	346 Move X20, [X8+40]
	347 Compare W9, 0
	348 JumpIfNotEqual {354}
	349 Move X0, 0x232A000
	350 Move X0, [X0+1440]
	351 Call 0x1C17CF4
	352 Move W8, 1
	353 Move [X21+1923], W8
	354 Compare X20, 0
	355 JumpIfEqual {637}
	356 Move X8, [X22]
	357 Move X0, X20
	358 Move X1, X31
	359 Move X8, [X8+184]
	360 Move S1, [X8+4]
	361 Move S2, [X8+8]
	362 Move V0, [X8]
	363 Call Rigidbody.set_velocity, X0, X1
	364 Move X0, [X19+192]
	365 Compare X0, 0
	366 JumpIfEqual {637}
	367 Move X1, X31
	368 Call Transform.get_position, X0
	369 Move X0, [X19+176]
	370 Compare X0, 0
	371 JumpIfEqual {637}
	372 Move X1, X31
	373 Move V8, V0
	374 Move V9, V1
	375 Move V10, V2
	376 Call Transform.get_position, X0
	377 Move W8, [X24+2140]
	378 Move V11, V0
	379 Move V12, V1
	380 Move V13, V2
	381 Compare W8, 0
	382 JumpIfNotEqual {388}
	383 Move X0, 0x232A000
	384 Move X0, [X0+1448]
	385 Call 0x1C17CF4
	386 Move W8, 1
	387 Move [X24+2140], W8
	388 Move X0, [X23]
	389 Subtract S11, S8, S11
	390 Subtract S9, S9, S12
	391 Subtract S8, S10, S13
	392 Move W8, [X0+224]
	393 Compare W8, 0
	394 JumpIfNotEqual {396}
	395 Call 0x1C17DFC
	396 Multiply S0, S11, S11
	397 Multiply S1, S9, S9
	398 Multiply S2, S8, S8
	399 Add S0, S0, S1
	400 Add S0, S2, S0
	401 NotImplemented "Instruction FSQRT not yet implemented."
	402 Move S1, 0.75
	403 NotImplemented "Instruction FCMP not yet implemented."
	404 Move X8, [X19+240]
	405 Compare X8, 0
	406 JumpIfEqual {637}
	407 Move W9, [X8+24]
	408 NotImplemented "Instruction CMP not yet implemented."
	409 Move X0, [X19+176]
	410 Compare X0, 0
	411 JumpIfEqual {637}
	412 Move X20, [X8+48]
	413 Move X1, X31
	414 Call Transform.get_position, X0
	415 Move X0, [X19+192]
	416 Move [X31+16], S0
	417 Compare X0, 0
	418 JumpIfEqual {637}
	419 Move X1, X31
	420 Move V9, V1
	421 Move V10, V2
	422 Call Transform.get_position, X0
	423 Move X0, [X19+176]
	424 Compare X0, 0
	425 JumpIfEqual {637}
	426 Move X1, X31
	427 Move V11, V0
	428 Move V12, V1
	429 Move V13, V2
	430 Call Transform.get_position, X0
	431 Move X24, 0x260F000
	432 Move W8, [X24+1925]
	433 Move V14, V0
	434 Move V15, V1
	435 Move V8, V2
	436 Compare W8, 0
	437 JumpIfNotEqual {443}
	438 Move X0, 0x232A000
	439 Move X0, [X0+1448]
	440 Call 0x1C17CF4
	441 Move W8, 1
	442 Move [X24+1925], W8
	443 Move X0, [X23]
	444 Subtract S14, S11, S14
	445 Subtract S11, S12, S15
	446 Subtract S8, S13, S8
	447 Move W8, [X0+224]
	448 Compare W8, 0
	449 JumpIfNotEqual {451}
	450 Call 0x1C17DFC
	451 Multiply S0, S14, S14
	452 Multiply S1, S11, S11
	453 Move X8, -19787776
	454 Add S0, S0, S1
	455 Move V1, [X8+380]
	456 Multiply S2, S8, S8
	457 Add S0, S2, S0
	458 NotImplemented "Instruction FSQRT not yet implemented."
	459 NotImplemented "Instruction FCMP not yet implemented."
	460 NotImplemented "Instruction FDIV not yet implemented."
	461 NotImplemented "Instruction FDIV not yet implemented."
	462 NotImplemented "Instruction FDIV not yet implemented."
	463 Move W8, [X21+1923]
	464 Compare W8, 0
	465 JumpIfNotEqual {471}
	466 Move X0, 0x232A000
	467 Move X0, [X0+1440]
	468 Call 0x1C17CF4
	469 Move W8, 1
	470 Move [X21+1923], W8
	471 Move X8, [X22]
	472 Move X8, [X8+184]
	473 Move S0, [X8]
	474 Move S1, [X8+4]
	475 Move V2, [X8+8]
	476 Compare X20, 0
	477 JumpIfEqual {637}
	478 Move S3, 0.75
	479 Multiply S2, S2, S3
	480 Multiply S1, S1, S3
	481 Multiply S0, S0, S3
	482 Move V3, [X31+16]
	483 Add S2, S10, S2
	484 Add S1, S9, S1
	485 Move X0, X20
	486 Add S0, S3, S0
	487 Move X1, X31
	488 Call Rigidbody.set_position, X0, X1
	489 Move X8, [X19+240]
	490 Compare X8, 0
	491 JumpIfEqual {637}
	492 Move W9, [X8+24]
	493 NotImplemented "Instruction CMP not yet implemented."
	494 Move W9, [X21+1923]
	495 Move X20, [X8+48]
	496 Compare W9, 0
	497 JumpIfNotEqual {503}
	498 Move X0, 0x232A000
	499 Move X0, [X0+1440]
	500 Call 0x1C17CF4
	501 Move W8, 1
	502 Move [X21+1923], W8
	503 Compare X20, 0
	504 JumpIfEqual {637}
	505 Move X8, [X22]
	506 Move X0, X20
	507 Move X1, X31
	508 Move X8, [X8+184]
	509 Move S1, [X8+4]
	510 Move S2, [X8+8]
	511 Move V0, [X8]
	512 Call Rigidbody.set_velocity, X0, X1
	513 Move X8, [X19+240]
	514 Compare X8, 0
	515 JumpIfEqual {637}
	516 Move W9, [X8+24]
	517 NotImplemented "Instruction CMP not yet implemented."
	518 Move X0, [X8+40]
	519 Compare X0, 0
	520 JumpIfEqual {637}
	521 Move X1, X31
	522 Call Rigidbody.get_position, X0
	523 Move X8, [X19+240]
	524 Move [X19+272], S0
	525 Move [X19+276], S1
	526 Move [X19+280], S2
	527 Compare X8, 0
	528 JumpIfEqual {637}
	529 Move W9, [X8+24]
	530 NotImplemented "Instruction CMP not yet implemented."
	531 Move X0, [X8+48]
	532 Compare X0, 0
	533 JumpIfEqual {637}
	534 Move X1, X31
	535 Call Rigidbody.get_position, X0
	536 Move X8, [X19+240]
	537 Move [X19+284], S0
	538 Move [X19+288], S1
	539 Move [X19+292], S2
	540 Compare X8, 0
	541 JumpIfEqual {637}
	542 Move W9, [X8+24]
	543 NotImplemented "Instruction CMP not yet implemented."
	544 Move X0, [X8+40]
	545 Compare X0, 0
	546 JumpIfEqual {637}
	547 Move X20, [X19+184]
	548 Move X1, X31
	549 Call Rigidbody.get_position, X0
	550 Move X8, [X19+240]
	551 Compare X8, 0
	552 JumpIfEqual {637}
	553 Move W9, [X8+24]
	554 NotImplemented "Instruction CMP not yet implemented."
	555 Move X0, [X8+40]
	556 Compare X0, 0
	557 JumpIfEqual {637}
	558 Move X1, X31
	559 Move V8, V0
	560 Move V9, V1
	561 Move V10, V2
	562 Call Rigidbody.get_rotation, X0
	563 Compare X20, 0
	564 JumpIfEqual {637}
	565 Move V4, V0
	566 Move V5, V1
	567 Move V6, V2
	568 Move V7, V3
	569 Move X0, X20
	570 Move V0, V8
	571 Move V1, V9
	572 Move V2, V10
	573 Move V3, V4
	574 Move V4, V5
	575 Move V5, V6
	576 Move V6, V7
	577 Move X1, X31
	578 Call Transform.SetPositionAndRotation, X0, X1, X2
	579 Move X8, [X19+240]
	580 Compare X8, 0
	581 JumpIfEqual {637}
	582 Move W9, [X8+24]
	583 NotImplemented "Instruction CMP not yet implemented."
	584 Move X0, [X8+48]
	585 Compare X0, 0
	586 JumpIfEqual {637}
	587 Move X20, [X19+192]
	588 Move X1, X31
	589 Call Rigidbody.get_position, X0
	590 Move X8, [X19+240]
	591 Compare X8, 0
	592 JumpIfEqual {637}
	593 Move W9, [X8+24]
	594 NotImplemented "Instruction CMP not yet implemented."
	595 Move X0, [X8+48]
	596 Compare X0, 0
	597 JumpIfEqual {637}
	598 Move X1, X31
	599 Move V8, V0
	600 Move V9, V1
	601 Move V10, V2
	602 Call Rigidbody.get_rotation, X0
	603 Compare X20, 0
	604 JumpIfEqual {637}
	605 Move V4, V0
	606 Move V5, V1
	607 Move V6, V2
	608 Move X0, X20
	609 Move V0, V8
	610 Move V1, V9
	611 Move V2, V10
	612 Move X20, [X31+144]
	613 Move X19, [X31+152]
	614 Move X22, [X31+128]
	615 Move X21, [X31+136]
	616 Move X24, [X31+112]
	617 Move X23, [X31+120]
	618 Move X30, [X31+96]
	619 Move X25, [X31+104]
	620 Move D9, [X31+80]
	621 Move D8, [X31+88]
	622 Move D11, [X31+64]
	623 Move D10, [X31+72]
	624 Move D13, [X31+48]
	625 Move D12, [X31+56]
	626 Move D15, [X31+32]
	627 Move D14, [X31+40]
	628 Move V7, V3
	629 Move V3, V4
	630 Move V4, V5
	631 Move V5, V6
	632 Move V6, V7
	633 Move X1, X31
	634 Add X31, X31, 160
	635 Call Transform.SetPositionAndRotation, X0, X1, X2
	636 Return 
	637 Call 0x1C17F20
	638 Call 0x1C17F28

Method: System.Void UpdateElasticHip()

Disassembly:
	0x01DC98BC STP X30, X25, [X31 - 0x40]!
	0x01DC98C0 STP X24, X23, [X31 + 0x10]
	0x01DC98C4 STP X22, X21, [X31 + 0x20]
	0x01DC98C8 STP X20, X19, [X31 + 0x30]
	0x01DC98CC ADRP X20, 0x260F000
	0x01DC98D0 LDRB W8, [X20 + 0xBAD]
	0x01DC98D4 MOV X19, X0
	0x01DC98D8 TBNZ X8, 0x0, 0x1DC9938
	0x01DC98DC ADRP X0, 0x232A000
	0x01DC98E0 LDR X0, [X0 + 0xE00]
	0x01DC98E4 BL 0x1C16CF4
	0x01DC98E8 ADRP X0, 0x232F000
	0x01DC98EC LDR X0, [X0 + 0x240]
	0x01DC98F0 BL 0x1C16CF4
	0x01DC98F4 ADRP X0, 0x232F000
	0x01DC98F8 LDR X0, [X0 + 0x248]
	0x01DC98FC BL 0x1C16CF4
	0x01DC9900 ADRP X0, 0x232A000
	0x01DC9904 LDR X0, [X0 + 0xE18]
	0x01DC9908 BL 0x1C16CF4
	0x01DC990C ADRP X0, 0x232F000
	0x01DC9910 LDR X0, [X0 + 0x238]
	0x01DC9914 BL 0x1C16CF4
	0x01DC9918 ADRP X0, 0x232D000
	0x01DC991C LDR X0, [X0 + 0xC30]
	0x01DC9920 BL 0x1C16CF4
	0x01DC9924 ADRP X0, 0x232F000
	0x01DC9928 LDR X0, [X0 + 0x250]
	0x01DC992C BL 0x1C16CF4
	0x01DC9930 MOVZ W8, 0x1
	0x01DC9934 STRB W8, [X20 + 0xBAD]
	0x01DC9938 LDR W9, [X19 + 0x10]
	0x01DC993C LDR X8, [X19 + 0x20]
	0x01DC9940 CMP W9, 0x1
	0x01DC9944 B.EQ 0x1DC99B8
	0x01DC9948 CBNZ W9, 0x1DC9DD0
	0x01DC994C MOVN W9, 0x0
	0x01DC9950 STR W9, [X19 + 0x10]
	0x01DC9954 CBZ X8, 0x1DC9DF4
	0x01DC9958 LDR X0, [X8 + 0xA8]
	0x01DC995C CBZ X0, 0x1DC9DF4
	0x01DC9960 MOV X1, X31
	0x01DC9964 BL 0x1E1E71C
	0x01DC9968 CBZ X0, 0x1DC9DF4
	0x01DC996C ADRP X10, 0x232F000
	0x01DC9970 LDR X8, [X0]
	0x01DC9974 LDR X10, [X10 + 0x240]
	0x01DC9978 MOV X20, X0
	0x01DC997C LDRH W9, [X8 + 0x12E]
	0x01DC9980 LDR X1, [X10]
	0x01DC9984 CBZ X9, 0x1DC99A8
	0x01DC9988 LDR X10, [X8 + 0xB0]
	0x01DC998C ADD X10, X10, 0x8
	0x01DC9990 LDUR X11, [X10 - 0x8]
	0x01DC9994 CMP X11, X1
	0x01DC9998 B.EQ 0x1DC9A24
	0x01DC999C SUBS X9, X9, 0x1
	0x01DC99A0 ADD X10, X10, 0x10
	0x01DC99A4 B.NE 0x1DC9990
	0x01DC99A8 MOV X0, X20
	0x01DC99AC MOV W2, W31
	0x01DC99B0 BL 0x1C5C788
	0x01DC99B4 B 0x1DC9A30
	0x01DC99B8 MOVN W9, 0x0
	0x01DC99BC STR W9, [X19 + 0x10]
	0x01DC99C0 CBZ X8, 0x1DC9DF4
	0x01DC99C4 LDR X0, [X8 + 0xA8]
	0x01DC99C8 CBZ X0, 0x1DC9DF4
	0x01DC99CC MOV X1, X31
	0x01DC99D0 BL 0x1E1E71C
	0x01DC99D4 CBZ X0, 0x1DC9DF4
	0x01DC99D8 ADRP X10, 0x232F000
	0x01DC99DC LDR X8, [X0]
	0x01DC99E0 LDR X10, [X10 + 0x240]
	0x01DC99E4 MOV X19, X0
	0x01DC99E8 LDRH W9, [X8 + 0x12E]
	0x01DC99EC LDR X1, [X10]
	0x01DC99F0 CBZ X9, 0x1DC9A14
	0x01DC99F4 LDR X10, [X8 + 0xB0]
	0x01DC99F8 ADD X10, X10, 0x8
	0x01DC99FC LDUR X11, [X10 - 0x8]
	0x01DC9A00 CMP X11, X1
	0x01DC9A04 B.EQ 0x1DC9BC0
	0x01DC9A08 SUBS X9, X9, 0x1
	0x01DC9A0C ADD X10, X10, 0x10
	0x01DC9A10 B.NE 0x1DC99FC
	0x01DC9A14 MOV X0, X19
	0x01DC9A18 MOV W2, W31
	0x01DC9A1C BL 0x1C5C788
	0x01DC9A20 B 0x1DC9BCC
	0x01DC9A24 LDRSW X9, [X10]
	0x01DC9A28 ADD X8, X8, X9, 0x4, LSL
	0x01DC9A2C ADD X0, X8, 0x138
	0x01DC9A30 LDP X8, X1, [X0]
	0x01DC9A34 MOV X0, X20
	0x01DC9A38 BLR X8
	0x01DC9A3C MOV X20, X0
	0x01DC9A40 CBZ X0, 0x1DC9DF8
	0x01DC9A44 ADRP X22, 0x232A000
	0x01DC9A48 ADRP X23, 0x232F000
	0x01DC9A4C ADRP X24, 0x232F000
	0x01DC9A50 ADRP X25, 0x232F000
	0x01DC9A54 LDR X22, [X22 + 0xE18]
	0x01DC9A58 LDR X23, [X23 + 0x248]
	0x01DC9A5C LDR X24, [X24 + 0x250]
	0x01DC9A60 LDR X25, [X25 + 0x238]
	0x01DC9A64 LDR X8, [X20]
	0x01DC9A68 LDR X1, [X22]
	0x01DC9A6C LDRH W9, [X8 + 0x12E]
	0x01DC9A70 CBZ X9, 0x1DC9A94
	0x01DC9A74 LDR X10, [X8 + 0xB0]
	0x01DC9A78 ADD X10, X10, 0x8
	0x01DC9A7C LDUR X11, [X10 - 0x8]
	0x01DC9A80 CMP X11, X1
	0x01DC9A84 B.EQ 0x1DC9AA4
	0x01DC9A88 SUBS X9, X9, 0x1
	0x01DC9A8C ADD X10, X10, 0x10
	0x01DC9A90 B.NE 0x1DC9A7C
	0x01DC9A94 MOV X0, X20
	0x01DC9A98 MOV W2, W31
	0x01DC9A9C BL 0x1C5C788
	0x01DC9AA0 B 0x1DC9AB0
	0x01DC9AA4 LDRSW X9, [X10]
	0x01DC9AA8 ADD X8, X8, X9, 0x4, LSL
	0x01DC9AAC ADD X0, X8, 0x138
	0x01DC9AB0 LDP X8, X1, [X0]
	0x01DC9AB4 MOV X0, X20
	0x01DC9AB8 BLR X8
	0x01DC9ABC TBZ X0, 0x0, 0x1DC9B6C
	0x01DC9AC0 LDR X8, [X20]
	0x01DC9AC4 LDR X1, [X23]
	0x01DC9AC8 LDRH W9, [X8 + 0x12E]
	0x01DC9ACC CBZ X9, 0x1DC9AF0
	0x01DC9AD0 LDR X10, [X8 + 0xB0]
	0x01DC9AD4 ADD X10, X10, 0x8
	0x01DC9AD8 LDUR X11, [X10 - 0x8]
	0x01DC9ADC CMP X11, X1
	0x01DC9AE0 B.EQ 0x1DC9B00
	0x01DC9AE4 SUBS X9, X9, 0x1
	0x01DC9AE8 ADD X10, X10, 0x10
	0x01DC9AEC B.NE 0x1DC9AD8
	0x01DC9AF0 MOV X0, X20
	0x01DC9AF4 MOV W2, W31
	0x01DC9AF8 BL 0x1C5C788
	0x01DC9AFC B 0x1DC9B0C
	0x01DC9B00 LDRSW X9, [X10]
	0x01DC9B04 ADD X8, X8, X9, 0x4, LSL
	0x01DC9B08 ADD X0, X8, 0x138
	0x01DC9B0C LDP X8, X1, [X0]
	0x01DC9B10 MOV X0, X20
	0x01DC9B14 BLR X8
	0x01DC9B18 MOV X21, X0
	0x01DC9B1C CBZ X0, 0x1DC9DEC
	0x01DC9B20 LDR X1, [X24]
	0x01DC9B24 MOV X0, X21
	0x01DC9B28 MOV X2, X31
	0x01DC9B2C BL 0x3C14E3C
	0x01DC9B30 LDR X0, [X25]
	0x01DC9B34 LDR W8, [X0 + 0xE0]
	0x01DC9B38 CBNZ W8, 0x1DC9B44
	0x01DC9B3C BL 0x1C16DFC
	0x01DC9B40 LDR X0, [X25]
	0x01DC9B44 LDR X8, [X0 + 0xB8]
	0x01DC9B48 LDR W1, [X8 + 0x38]
	0x01DC9B4C FMOV S0, 1
	0x01DC9B50 FMOV S1, W31
	0x01DC9B54 FMOV S2, W31
	0x01DC9B58 FMOV S3, 1
	0x01DC9B5C MOV X0, X21
	0x01DC9B60 MOV X2, X31
	0x01DC9B64 BL 0x3C14988
	0x01DC9B68 B 0x1DC9A64
	0x01DC9B6C MOV X22, X31
	0x01DC9B70 MOVZ W21, 0x6
	0x01DC9B74 CBZ X20, 0x1DC9D70
	0x01DC9B78 ADRP X10, 0x232A000
	0x01DC9B7C LDR X8, [X20]
	0x01DC9B80 LDR X10, [X10 + 0xE00]
	0x01DC9B84 LDRH W9, [X8 + 0x12E]
	0x01DC9B88 LDR X1, [X10]
	0x01DC9B8C CBZ X9, 0x1DC9BB0
	0x01DC9B90 LDR X10, [X8 + 0xB0]
	0x01DC9B94 ADD X10, X10, 0x8
	0x01DC9B98 LDUR X11, [X10 - 0x8]
	0x01DC9B9C CMP X11, X1
	0x01DC9BA0 B.EQ 0x1DC9D58
	0x01DC9BA4 SUBS X9, X9, 0x1
	0x01DC9BA8 ADD X10, X10, 0x10
	0x01DC9BAC B.NE 0x1DC9B98
	0x01DC9BB0 MOV X0, X20
	0x01DC9BB4 MOV W2, W31
	0x01DC9BB8 BL 0x1C5C788
	0x01DC9BBC B 0x1DC9D64
	0x01DC9BC0 LDRSW X9, [X10]
	0x01DC9BC4 ADD X8, X8, X9, 0x4, LSL
	0x01DC9BC8 ADD X0, X8, 0x138
	0x01DC9BCC LDP X8, X1, [X0]
	0x01DC9BD0 MOV X0, X19
	0x01DC9BD4 BLR X8
	0x01DC9BD8 MOV X19, X0
	0x01DC9BDC CBZ X0, 0x1DC9DFC
	0x01DC9BE0 ADRP X21, 0x232A000
	0x01DC9BE4 ADRP X22, 0x232F000
	0x01DC9BE8 ADRP X23, 0x232F000
	0x01DC9BEC ADRP X24, 0x232F000
	0x01DC9BF0 LDR X21, [X21 + 0xE18]
	0x01DC9BF4 LDR X22, [X22 + 0x248]
	0x01DC9BF8 LDR X23, [X23 + 0x250]
	0x01DC9BFC LDR X24, [X24 + 0x238]
	0x01DC9C00 LDR X8, [X19]
	0x01DC9C04 LDR X1, [X21]
	0x01DC9C08 LDRH W9, [X8 + 0x12E]
	0x01DC9C0C CBZ X9, 0x1DC9C30
	0x01DC9C10 LDR X10, [X8 + 0xB0]
	0x01DC9C14 ADD X10, X10, 0x8
	0x01DC9C18 LDUR X11, [X10 - 0x8]
	0x01DC9C1C CMP X11, X1
	0x01DC9C20 B.EQ 0x1DC9C40
	0x01DC9C24 SUBS X9, X9, 0x1
	0x01DC9C28 ADD X10, X10, 0x10
	0x01DC9C2C B.NE 0x1DC9C18
	0x01DC9C30 MOV X0, X19
	0x01DC9C34 MOV W2, W31
	0x01DC9C38 BL 0x1C5C788
	0x01DC9C3C B 0x1DC9C4C
	0x01DC9C40 LDRSW X9, [X10]
	0x01DC9C44 ADD X8, X8, X9, 0x4, LSL
	0x01DC9C48 ADD X0, X8, 0x138
	0x01DC9C4C LDP X8, X1, [X0]
	0x01DC9C50 MOV X0, X19
	0x01DC9C54 BLR X8
	0x01DC9C58 TBZ X0, 0x0, 0x1DC9D08
	0x01DC9C5C LDR X8, [X19]
	0x01DC9C60 LDR X1, [X22]
	0x01DC9C64 LDRH W9, [X8 + 0x12E]
	0x01DC9C68 CBZ X9, 0x1DC9C8C
	0x01DC9C6C LDR X10, [X8 + 0xB0]
	0x01DC9C70 ADD X10, X10, 0x8
	0x01DC9C74 LDUR X11, [X10 - 0x8]
	0x01DC9C78 CMP X11, X1
	0x01DC9C7C B.EQ 0x1DC9C9C
	0x01DC9C80 SUBS X9, X9, 0x1
	0x01DC9C84 ADD X10, X10, 0x10
	0x01DC9C88 B.NE 0x1DC9C74
	0x01DC9C8C MOV X0, X19
	0x01DC9C90 MOV W2, W31
	0x01DC9C94 BL 0x1C5C788
	0x01DC9C98 B 0x1DC9CA8
	0x01DC9C9C LDRSW X9, [X10]
	0x01DC9CA0 ADD X8, X8, X9, 0x4, LSL
	0x01DC9CA4 ADD X0, X8, 0x138
	0x01DC9CA8 LDP X8, X1, [X0]
	0x01DC9CAC MOV X0, X19
	0x01DC9CB0 BLR X8
	0x01DC9CB4 MOV X20, X0
	0x01DC9CB8 CBZ X0, 0x1DC9DF0
	0x01DC9CBC LDR X1, [X23]
	0x01DC9CC0 MOV X0, X20
	0x01DC9CC4 MOV X2, X31
	0x01DC9CC8 BL 0x3C14E80
	0x01DC9CCC LDR X0, [X24]
	0x01DC9CD0 LDR W8, [X0 + 0xE0]
	0x01DC9CD4 CBNZ W8, 0x1DC9CE0
	0x01DC9CD8 BL 0x1C16DFC
	0x01DC9CDC LDR X0, [X24]
	0x01DC9CE0 LDR X8, [X0 + 0xB8]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], D13
	003 Move [X31+72], D12
	004 Move [X31+80], D11
	005 Move [X31+88], D10
	006 Move [X31+96], D9
	007 Move [X31+104], D8
	008 Move [X31+112], X30
	009 Move [X31+120], X23
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 Move X20, 0x2610000
	015 Move W8, [X20+2986]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x2330000
	022 Move X0, [X0+568]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2986], W8
	026 Move X21, 0x2610000
	027 Move V8, [X19+424]
	028 Move W8, [X21+1923]
	029 Move V9, [X19+432]
	030 Add X20, X19, 412
	031 Compare W8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, 0x232B000
	034 Move X0, [X0+1440]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+1923], W8
	038 Move X21, 0x232B000
	039 Move X21, [X21+1440]
	040 Move V0, [X19+332]
	041 Move S1, 1
	042 Move S3, W31
	043 Move X8, [X21]
	044 NotImplemented "Instruction FMIN not yet implemented."
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 NotImplemented "Instruction FCSEL not yet implemented."
	047 Move X9, [X8+184]
	048 Move V3, [X19+444]
	049 Move V0, [X9]
	050 Move V2, [X9+8]
	051 Subtract V0, V0, V8
	052 Subtract S2, S2, S9
	053 NotImplemented "Instruction INVALID not yet implemented."
	054 Multiply S2, S2, S1
	055 Add V0, V8, V0
	056 Add S2, S9, S2
	057 Move [X19+424], D0
	058 Move [X19+432], S2
	059 Move X8, [X8+184]
	060 Move V0, [X20+24]
	061 Move V2, [X8]
	062 Move V4, [X8+8]
	063 Subtract V2, V2, V0
	064 NotImplemented "Instruction INVALID not yet implemented."
	065 Add V0, V0, V2
	066 Move [X20+24], D0
	067 Move X0, [X19+368]
	068 Subtract S0, S4, S3
	069 Multiply S0, S0, S1
	070 Add S0, S3, S0
	071 Move [X19+444], S0
	072 Compare X0, 0
	073 JumpIfEqual {296}
	074 Move V2, [X19+384]
	075 Move V1, [X19+380]
	076 Move V0, [X19+376]
	077 Move X1, X31
	078 Call Transform.TransformPoint, X0, X1
	079 Move X0, [X19+368]
	080 Move [X31+48], D0
	081 Move [X31+16], D1
	082 Move [X31+32], D2
	083 Compare X0, 0
	084 JumpIfEqual {296}
	085 Move V2, [X19+396]
	086 Move V1, [X19+392]
	087 Move V0, [X19+388]
	088 Move X1, X31
	089 Call Transform.TransformPoint, X0, X1
	090 Move V7, [X31+3]
	091 Move V17, [X31+1]
	092 Move V16, [X19+25]
	093 Move V6, [X19+416]
	094 Move V3, [X19+328]
	095 Move V7.S[1], V17.S[0]
	096 Move V17, [X31+2]
	097 NotImplemented "Instruction LDUR not yet implemented."
	098 Move V5, [X19+440]
	099 Move V1.S[1], V2.S[0]
	100 Move V7.S[2], V17.S[0]
	101 Move V7.S[3], V0.S[0]
	102 Subtract V0, V7, V16
	103 Subtract V1, V1, V6
	104 NotImplemented "Instruction INVALID not yet implemented."
	105 NotImplemented "Instruction INVALID not yet implemented."
	106 Add V2, V4, V0
	107 Add V0, V5, V1
	108 Move X0, X31
	109 Add X22, X19, 400
	110 Move [X31], V16
	111 Move [X31+3], V2
	112 Move [X20+12], V2
	113 Move [X19+440], D0
	114 Call Time.get_deltaTime
	115 Move V2, [X31+3]
	116 Move V3, [X31]
	117 Move X0, X31
	118 NotImplemented "Instruction INVALID not yet implemented."
	119 Multiply S0, S0, V2.S[2]
	120 Move S2, V3.S[2]
	121 Add V1, V3, V1
	122 Add S0, S2, S0
	123 Move [X19+400], D1
	124 Move [X22+8], S0
	125 Move V8, [X20]
	126 Move V9, [X19+420]
	127 Move V10, [X20+24]
	128 Move V11, [X19+444]
	129 Call Time.get_deltaTime
	130 NotImplemented "Instruction INVALID not yet implemented."
	131 Add V1, V8, V1
	132 Move [X20], D1
	133 Move X20, [X19+352]
	134 Multiply S0, S11, S0
	135 Add S0, S9, S0
	136 Move [X19+420], S0
	137 Compare X20, 0
	138 JumpIfEqual {296}
	139 Move X22, 0x2330000
	140 Move V8, [X19+408]
	141 Move V9, [X19+404]
	142 Move V10, [X19+400]
	143 Move X22, [X22+568]
	144 Move X0, X20
	145 Move X1, X31
	146 Call Transform.get_position, X0
	147 Move X23, 0x2610000
	148 Move W8, [X23+1926]
	149 Subtract S10, S10, S0
	150 Subtract S9, S9, S1
	151 Subtract S8, S8, S2
	152 Compare W8, 0
	153 JumpIfNotEqual {159}
	154 Move X0, 0x232B000
	155 Move X0, [X0+1440]
	156 Call 0x1C17CF4
	157 Move W8, 1
	158 Move [X23+1926], W8
	159 Move X8, [X21]
	160 Move V0, V10
	161 Move V1, V9
	162 Move V2, V8
	163 Move X8, [X8+184]
	164 Move X0, X31
	165 Move S3, [X8+24]
	166 Move S4, [X8+28]
	167 Move V5, [X8+32]
	168 Call Quaternion.LookRotation, X0, X1
	169 Move X0, [X22]
	170 Move V10, V0
	171 Move V9, V1
	172 Move V8, V2
	173 Move W8, [X0+224]
	174 Move V11, V3
	175 Compare W8, 0
	176 JumpIfNotEqual {179}
	177 Call 0x1C17DFC
	178 Move X0, [X22]
	179 Move X8, [X0+184]
	180 Move X0, X20
	181 Move X1, X31
	182 Move S0, [X8]
	183 Move S3, [X8+4]
	184 Move S2, [X8+8]
	185 Move S1, [X8+12]
	186 Multiply S4, S11, S0
	187 Multiply S5, S10, S1
	188 Multiply S7, S8, S3
	189 Multiply S16, S11, S3
	190 Multiply S17, S9, S1
	191 Multiply S18, S8, S0
	192 Multiply S20, S10, S3
	193 Multiply S21, S10, S0
	194 Multiply S22, S9, S0
	195 Multiply S0, S9, S3
	196 Multiply S3, S11, S2
	197 Multiply S23, S11, S1
	198 Multiply S1, S8, S1
	199 Multiply S6, S9, S2
	200 Multiply S19, S10, S2
	201 Multiply S24, S8, S2
	202 Add S2, S4, S5
	203 Add S4, S16, S17
	204 Add S1, S3, S1
	205 Subtract S3, S23, S21
	206 Add S2, S6, S2
	207 Add S4, S18, S4
	208 Add S5, S20, S1
	209 Subtract S3, S3, S0
	210 Subtract S0, S2, S7
	211 Subtract S1, S4, S19
	212 Subtract S2, S5, S22
	213 Subtract S3, S3, S24
	214 Call Transform.set_rotation, X0, X1
	215 Move X20, [X19+360]
	216 Compare X20, 0
	217 JumpIfEqual {296}
	218 Move V11, [X19+420]
	219 Move V12, [X19+416]
	220 Move V13, [X19+412]
	221 Move X0, X20
	222 Move X1, X31
	223 Call Transform.get_position, X0
	224 Move W8, [X23+1926]
	225 Move V8, V0
	226 Move V9, V1
	227 Move V10, V2
	228 Compare W8, 0
	229 JumpIfNotEqual {235}
	230 Move X0, 0x232B000
	231 Move X0, [X0+1440]
	232 Call 0x1C17CF4
	233 Move W8, 1
	234 Move [X23+1926], W8
	235 Move X8, [X21]
	236 Subtract S2, S11, S10
	237 Subtract S1, S12, S9
	238 Subtract S0, S13, S8
	239 Move X8, [X8+184]
	240 Move X0, X31
	241 Move S3, [X8+24]
	242 Move S4, [X8+28]
	243 Move V5, [X8+32]
	244 Call Quaternion.LookRotation, X0, X1
	245 Move X8, [X22]
	246 Move X0, X20
	247 Move X20, [X31+144]
	248 Move X19, [X31+152]
	249 Move X22, [X31+128]
	250 Move X21, [X31+136]
	251 Move X8, [X8+184]
	252 Move X30, [X31+112]
	253 Move X23, [X31+120]
	254 Move D9, [X31+96]
	255 Move D8, [X31+104]
	256 Move D11, [X31+80]
	257 Move D10, [X31+88]
	258 Move S4, [X8+16]
	259 Move S7, [X8+20]
	260 Move S6, [X8+24]
	261 Move S5, [X8+28]
	262 Move D13, [X31+64]
	263 Move D12, [X31+72]
	264 Move X1, X31
	265 Multiply S16, S3, S4
	266 Multiply S17, S0, S5
	267 Multiply S18, S1, S6
	268 Multiply S19, S2, S7
	269 Multiply S20, S3, S7
	270 Multiply S21, S1, S5
	271 Multiply S22, S2, S4
	272 Multiply S23, S0, S6
	273 Multiply S24, S0, S7
	274 Multiply S0, S0, S4
	275 Multiply S4, S1, S4
	276 Multiply S1, S1, S7
	277 Multiply S7, S3, S6
	278 Multiply S3, S3, S5
	279 Multiply S5, S2, S5
	280 Multiply S6, S2, S6
	281 Add S2, S16, S17
	282 Add S16, S20, S21
	283 Add S5, S7, S5
	284 Subtract S0, S3, S0
	285 Add S2, S18, S2
	286 Add S3, S22, S16
	287 Add S5, S24, S5
	288 Subtract S7, S0, S1
	289 Subtract S0, S2, S19
	290 Subtract S1, S3, S23
	291 Subtract S2, S5, S4
	292 Subtract S3, S7, S6
	293 Add X31, X31, 160
	294 Call Transform.set_rotation, X0, X1
	295 Return 
	296 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01DCA600 LDR X0, [X23]
	0x01DCA604 BL 0x1C16F10
	0x01DCA608 ADRP X8, 0x232E000
	0x01DCA60C LDR X8, [X8 + 0x2D8]
	0x01DCA610 MOV X1, X19
	0x01DCA614 MOV X3, X31
	0x01DCA618 MOV X21, X0
	0x01DCA61C LDR X2, [X8]
	0x01DCA620 BL 0x2983F04
	0x01DCA624 MOV X0, X20
	0x01DCA628 MOV X1, X21
	0x01DCA62C MOV X2, X31
	0x01DCA630 BL 0x33C0DE4
	0x01DCA634 CBZ X0, 0x1DCA678
	0x01DCA638 LDR X21, [X23]
	0x01DCA63C MOV X20, X0
	0x01DCA640 MOV X1, X21
	0x01DCA644 BL 0x1C16E00
	0x01DCA648 CBZ X0, 0x1DCA78C
	0x01DCA64C LDR X8, [X22]
	0x01DCA650 LDR X8, [X8 + 0xB8]
	0x01DCA654 STR X0, [X8 + 0x28]
	0x01DCA658 LDR X21, [X23]
	0x01DCA65C MOV X0, X20
	0x01DCA660 MOV X1, X21
	0x01DCA664 BL 0x1C16E00
	0x01DCA668 CBZ X0, 0x1DCA78C
	0x01DCA66C LDR X8, [X22]
	0x01DCA670 LDR X8, [X8 + 0xB8]
	0x01DCA674 B 0x1DCA684
	0x01DCA678 LDR X8, [X22]
	0x01DCA67C LDR X8, [X8 + 0xB8]
	0x01DCA680 STR X31, [X8 + 0x28]
	0x01DCA684 ADRP X23, 0x232E000
	0x01DCA688 LDR X20, [X8 + 0x30]
	0x01DCA68C LDR X23, [X23 + 0x2C0]
	0x01DCA690 LDR X0, [X23]
	0x01DCA694 BL 0x1C16F10
	0x01DCA698 ADRP X8, 0x232E000
	0x01DCA69C LDR X8, [X8 + 0x2E0]
	0x01DCA6A0 MOV X1, X19
	0x01DCA6A4 MOV X3, X31
	0x01DCA6A8 MOV X21, X0
	0x01DCA6AC LDR X2, [X8]
	0x01DCA6B0 BL 0x2A75CA8
	0x01DCA6B4 MOV X0, X20

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move S0, 1
	006 Move S1, W31
	007 Move S2, W31
	008 Move S3, 1
	009 Move X0, X31
	010 Call Gizmos.set_color, X0
	011 Move X8, -19787776
	012 Move V8, [X8+512]
	013 Move V0, [X19+400]
	014 Move V1, [X19+404]
	015 Move V2, [X19+408]
	016 Move V3, V8
	017 Move X0, X31
	018 Call Gizmos.DrawWireSphere, X0, V0
	019 Move V0, [X19+412]
	020 Move V1, [X19+416]
	021 Move V2, [X19+420]
	022 Move V3, V8
	023 Move X0, X31
	024 Call Gizmos.DrawWireSphere, X0, V0
	025 Move S0, 1
	026 Move S1, 0.5
	027 Move S2, W31
	028 Move S3, 1
	029 Move X0, X31
	030 Call Gizmos.set_color, X0
	031 Move X0, [X19+200]
	032 Compare X0, 0
	033 JumpIfEqual {51}
	034 Move X1, X31
	035 Call Transform.get_position, X0
	036 Move V3, V8
	037 Move X0, X31
	038 Call Gizmos.DrawWireSphere, X0, V0
	039 Move X0, [X19+208]
	040 Compare X0, 0
	041 JumpIfEqual {51}
	042 Move X1, X31
	043 Call Transform.get_position, X0
	044 Move X30, [X31+16]
	045 Move X19, [X31+24]
	046 Move V3, V8
	047 Move X0, X31
	048 Move V8, [X31+32]
	049 Call Gizmos.DrawWireSphere, X0, V0
	050 Return 
	051 Call 0x1C17F20

Method: System.Void SetColor(UnityEngine.Color color)

Disassembly:
	0x01DC1C38 LDP D11, D10, [X31 + 0x18]
	0x01DC1C3C LDP D13, D12, [X31 + 0x8]
	0x01DC1C40 MOVZ W0, 0x1
	0x01DC1C44 MOVZ W1, 0x1
	0x01DC1C48 MOV V6.16B, V14.16B
	0x01DC1C4C LDR V14, [X31], #0x80
	0x01DC1C50 B 0x1DC1C58

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+168]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call AvatarView.SetColor, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: System.Void UpdateVoice(System.Single volume)

Disassembly:
	0x01DC95EC MOV X1, X31
	0x01DC95F0 ADD X31, X31, 0xA0
	0x01DC95F4 B 0x3C40000
	0x01DC95F8 BL 0x1C16F20
	0x01DC95FC BL 0x1C16F28
	0x01DC9600 STR D8, [X31 - 0x20]!
	0x01DC9604 STP X30, X19, [X31 + 0x10]
	0x01DC9608 MOV X19, X0
	0x01DC960C FMOV S0, 1
	0x01DC9610 FMOV S1, W31
	0x01DC9614 FMOV S2, W31
	0x01DC9618 FMOV S3, 1
	0x01DC961C MOV X0, X31
	0x01DC9620 BL 0x3C0D030
	0x01DC9624 ADRP X8, 0xFFFFFFFFFED21000
	0x01DC9628 LDR V8, [X8 + 0x200]
	0x01DC962C LDR V0, [X19 + 0x190]
	0x01DC9630 LDR V1, [X19 + 0x194]
	0x01DC9634 LDR V2, [X19 + 0x198]
	0x01DC9638 MOV V3.16B, V8.16B
	0x01DC963C MOV X0, X31
	0x01DC9640 BL 0x3C0CB98
	0x01DC9644 LDR V0, [X19 + 0x19C]
	0x01DC9648 LDR V1, [X19 + 0x1A0]
	0x01DC964C LDR V2, [X19 + 0x1A4]
	0x01DC9650 MOV V3.16B, V8.16B
	0x01DC9654 MOV X0, X31
	0x01DC9658 BL 0x3C0CB98
	0x01DC965C FMOV S0, 1
	0x01DC9660 FMOV S1, 0.5
	0x01DC9664 FMOV S2, W31
	0x01DC9668 FMOV S3, 1
	0x01DC966C MOV X0, X31
	0x01DC9670 BL 0x3C0D030
	0x01DC9674 LDR X0, [X19 + 0xC8]
	0x01DC9678 CBZ X0, 0x1DC96B4
	0x01DC967C MOV X1, X31
	0x01DC9680 BL 0x3C3F58C
	0x01DC9684 MOV V3.16B, V8.16B
	0x01DC9688 MOV X0, X31
	0x01DC968C BL 0x3C0CB98
	0x01DC9690 LDR X0, [X19 + 0xD0]
	0x01DC9694 CBZ X0, 0x1DC96B4
	0x01DC9698 MOV X1, X31
	0x01DC969C BL 0x3C3F58C
	0x01DC96A0 LDP X30, X19, [X31 + 0x10]
	0x01DC96A4 MOV V3.16B, V8.16B
	0x01DC96A8 MOV X0, X31
	0x01DC96AC LDR V8, [X31], #0x20
	0x01DC96B0 B 0x3C0CB98
	0x01DC96B4 BL 0x1C16F20
	0x01DC96B8 STP X30, X21, [X31 - 0x20]!
	0x01DC96BC STP X20, X19, [X31 + 0x10]
	0x01DC96C0 ADRP X8, 0xFFFFFFFFFED22000
	0x01DC96C4 ADRP X9, 0xFFFFFFFFFED25000
	0x01DC96C8 LDR V0, [X8 + 0xFE]
	0x01DC96CC LDR V1, [X9 + 0x368]
	0x01DC96D0 ADRP X21, 0x260F000
	0x01DC96D4 MOV X19, X0
	0x01DC96D8 STR V0, [X0 + 0x4]
	0x01DC96DC STR D1, [X0 + 0x50]
	0x01DC96E0 LDRB W8, [X21 + 0x783]
	0x01DC96E4 ADD X20, X0, 0x104
	0x01DC96E8 CBNZ W8, 0x1DC9700
	0x01DC96EC ADRP X0, 0x232A000
	0x01DC96F0 LDR X0, [X0 + 0x5A0]
	0x01DC96F4 BL 0x1C16CF4
	0x01DC96F8 MOVZ W8, 0x1
	0x01DC96FC STRB W8, [X21 + 0x783]
	0x01DC9700 ADRP X8, 0x232A000
	0x01DC9704 LDR X8, [X8 + 0x5A0]
	0x01DC9708 MOV X0, X19
	0x01DC970C MOV X1, X31
	0x01DC9710 LDR X8, [X8]
	0x01DC9714 LDR X9, [X8 + 0xB8]
	0x01DC9718 LDR V0, [X9]
	0x01DC971C LDR V1, [X9 + 0x8]
	0x01DC9720 STR D0, [X19 + 0xF8]
	0x01DC9724 STR S1, [X19 + 0x100]
	0x01DC9728 LDR X9, [X8 + 0xB8]
	0x01DC972C LDR V0, [X9]
	0x01DC9730 LDR V1, [X9 + 0x8]
	0x01DC9734 ADRP X9, 0xFFFFFFFFFED21000
	0x01DC9738 STR D0, [X20]
	0x01DC973C LDR V0, [X9 + 0xEB]
	0x01DC9740 ADRP X9, 0xFFFFFFFFFED24000
	0x01DC9744 STR S1, [X19 + 0x10C]
	0x01DC9748 LDR V1, [X9 + 0xDB0]
	0x01DC974C MOVZ W9, 0x3FC00000
	0x01DC9750 STUR V0, [X20 + 0x24]
	0x01DC9754 STR W9, [X19 + 0x138]
	0x01DC9758 MOVZ W9, 0xCCCD
	0x01DC975C MOVK W9, 0x3DCC0000
	0x01DC9760 STR D1, [X20 + 0x40]
	0x01DC9764 STR W9, [X19 + 0x14C]
	0x01DC9768 LDR X9, [X8 + 0xB8]
	0x01DC976C LDR V0, [X9]
	0x01DC9770 LDR V1, [X9 + 0x8]
	0x01DC9774 STR D0, [X19 + 0x1A8]
	0x01DC9778 STR S1, [X19 + 0x1B0]
	0x01DC977C LDR X8, [X8 + 0xB8]
	0x01DC9780 LDR V0, [X8]
	0x01DC9784 LDR V1, [X8 + 0x8]
	0x01DC9788 STR D0, [X20 + 0xB0]
	0x01DC978C STR S1, [X19 + 0x1BC]
	0x01DC9790 LDP X20, X19, [X31 + 0x10]
	0x01DC9794 LDP X30, X21, [X31], #0x20
	0x01DC9798 B 0x3C36C30
	0x01DC979C STR X30, [X31 - 0x30]!
	0x01DC97A0 STP X22, X21, [X31 + 0x10]
	0x01DC97A4 STP X20, X19, [X31 + 0x20]
	0x01DC97A8 ADRP X22, 0x260F000
	0x01DC97AC ADRP X19, 0x232F000
	0x01DC97B0 ADRP X21, 0x232D000
	0x01DC97B4 ADRP X20, 0x232D000
	0x01DC97B8 LDRB W8, [X22 + 0xBAC]
	0x01DC97BC LDR X19, [X19 + 0x238]
	0x01DC97C0 LDR X21, [X21 + 0xC88]
	0x01DC97C4 LDR X20, [X20 + 0x470]
	0x01DC97C8 TBNZ X8, 0x0, 0x1DC97F8
	0x01DC97CC ADRP X0, 0x232F000
	0x01DC97D0 LDR X0, [X0 + 0x238]
	0x01DC97D4 BL 0x1C16CF4
	0x01DC97D8 ADRP X0, 0x232D000
	0x01DC97DC LDR X0, [X0 + 0x470]
	0x01DC97E0 BL 0x1C16CF4
	0x01DC97E4 ADRP X0, 0x232D000
	0x01DC97E8 LDR X0, [X0 + 0xC88]
	0x01DC97EC BL 0x1C16CF4
	0x01DC97F0 MOVZ W8, 0x1
	0x01DC97F4 STRB W8, [X22 + 0xBAC]
	0x01DC97F8 ADRP X8, 0xFFFFFFFFFED21000
	0x01DC97FC LDR V1, [X8 + 0x180]
	0x01DC9800 FMOV S0, W31
	0x01DC9804 MOV X0, X31
	0x01DC9808 MOV V2.16B, V1.16B
	0x01DC980C BL 0x3C2A574
	0x01DC9810 LDR X8, [X19]
	0x01DC9814 MOV X0, X31
	0x01DC9818 LDR X8, [X8 + 0xB8]
	0x01DC981C STP S0, S1, [X8]
	0x01DC9820 STP S2, S3, [X8 + 0x8]
	0x01DC9824 ADRP X8, 0xFFFFFFFFFED21000
	0x01DC9828 LDR V1, [X8 + 0x1B8]
	0x01DC982C FMOV S0, W31
	0x01DC9830 MOV V2.16B, V1.16B
	0x01DC9834 BL 0x3C2A574
	0x01DC9838 LDR X8, [X19]
	0x01DC983C ADRP X10, 0xFFFFFFFFFED24000
	0x01DC9840 LDR V4, [X10 + 0xB48]
	0x01DC9844 ADRP X10, 0xFFFFFFFFFED24000
	0x01DC9848 LDR X9, [X8 + 0xB8]
	0x01DC984C MOV X1, X31
	0x01DC9850 STP S0, S1, [X9 + 0x10]
	0x01DC9854 STP S2, S3, [X9 + 0x18]
	0x01DC9858 LDR X9, [X8 + 0xB8]
	0x01DC985C LDR V0, [X10 + 0xE38]
	0x01DC9860 MOVZ W10, 0x42B40000
	0x01DC9864 STR D4, [X9 + 0x20]
	0x01DC9868 STR W10, [X9 + 0x28]
	0x01DC986C LDR X8, [X8 + 0xB8]
	0x01DC9870 MOVZ W9, 0xC2B40000
	0x01DC9874 STUR D0, [X8 + 0x2C]
	0x01DC9878 STR W9, [X8 + 0x34]
	0x01DC987C LDR X0, [X21]
	0x01DC9880 BL 0x3C124EC
	0x01DC9884 LDR X8, [X19]
	0x01DC9888 MOV X1, X31
	0x01DC988C LDR X8, [X8 + 0xB8]
	0x01DC9890 STR W0, [X8 + 0x38]
	0x01DC9894 LDR X0, [X20]
	0x01DC9898 BL 0x3C124EC
	0x01DC989C LDR X8, [X19]
	0x01DC98A0 LDP X20, X19, [X31 + 0x20]
	0x01DC98A4 LDP X22, X21, [X31 + 0x10]
	0x01DC98A8 LDR X8, [X8 + 0xB8]
	0x01DC98AC STR W0, [X8 + 0x3C]
	0x01DC98B0 LDR X30, [X31], #0x30
	0x01DC98B4 RET
	0x01DC98B8 RET

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x2610000
	012 Move W8, [X20+2987]
	013 Move V8, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x232B000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move X0, 0x2330000
	023 Move X0, [X0+568]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+2987], W8
	027 Move W8, [X19+456]
	028 Compare W8, 0
	029 JumpIfNotEqual {208}
	030 Move S9, 1
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 Move S10, W31
	033 NotImplemented "Instruction FMIN not yet implemented."
	034 Move S0, -0.5
	035 Move V2, [X19+300]
	036 NotImplemented "Instruction FCSEL not yet implemented."
	037 Move V1, [X19+320]
	038 Add S0, S4, S0
	039 Add S0, S0, S0
	040 Move V11, [X19+316]
	041 NotImplemented "Instruction FCMP not yet implemented."
	042 NotImplemented "Instruction FMIN not yet implemented."
	043 Move V3, [X19+296]
	044 NotImplemented "Instruction FMIN not yet implemented."
	045 NotImplemented "Instruction FCSEL not yet implemented."
	046 NotImplemented "Instruction FCMP not yet implemented."
	047 Subtract S0, S10, S1
	048 NotImplemented "Instruction FCSEL not yet implemented."
	049 Multiply S0, S0, S2
	050 Add S0, S1, S0
	051 Subtract S1, S4, S11
	052 Multiply S1, S1, S3
	053 Add S12, S1, S0
	054 Move X0, X31
	055 Move [X19+320], S12
	056 Call Time.get_deltaTime
	057 Multiply S0, S0, S12
	058 Add S0, S11, S0
	059 Move [X19+316], S0
	060 Multiply S0, S0, S0
	061 Multiply S1, S0, S0
	062 Add S0, S0, S0
	063 Move S2, 3
	064 Subtract S0, S2, S0
	065 Move X0, X31
	066 Multiply S11, S1, S0
	067 Call Time.get_time
	068 Move V1, [X19+304]
	069 Multiply S0, S0, S1
	070 Call 0x3EB2B70
	071 Move V1, [X19+308]
	072 Multiply S0, S8, S0
	073 Move X0, [X19+168]
	074 Subtract S2, S9, S1
	075 Multiply S0, S1, S0
	076 Multiply S1, S2, S11
	077 Add S0, S0, S1
	078 NotImplemented "Instruction FMIN not yet implemented."
	079 NotImplemented "Instruction FCMP not yet implemented."
	080 NotImplemented "Instruction FCSEL not yet implemented."
	081 Compare X0, 0
	082 JumpIfEqual {219}
	083 Move X1, X31
	084 Call AvatarView.get_headRenderer, X0
	085 Move X21, 0x232B000
	086 Move X21, [X21+1432]
	087 Move X20, X0
	088 Move X8, [X21]
	089 Move W9, [X8+224]
	090 Compare W9, 0
	091 JumpIfNotEqual {94}
	092 Move X0, X8
	093 Call 0x1C17DFC
	094 Move X0, X20
	095 Move X1, X31
	096 Move X2, X31
	097 Call Object.op_Inequality, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {111}
	102 Compare X20, 0
	103 JumpIfEqual {219}
	104 Move W8, 0x42C80000
	105 Move S0, W8
	106 Multiply S0, S8, S0
	107 Move X0, X20
	108 Move W1, W31
	109 Move X2, X31
	110 Call SkinnedMeshRenderer.SetBlendShapeWeight, X0, X1, V0
	111 Move X0, [X19+168]
	112 Compare X0, 0
	113 JumpIfEqual {219}
	114 Move X1, X31
	115 Call AvatarView.get_eyeLeftMaterial, X0
	116 Move X8, [X21]
	117 Move X20, X0
	118 Move W9, [X8+224]
	119 Compare W9, 0
	120 JumpIfNotEqual {123}
	121 Move X0, X8
	122 Call 0x1C17DFC
	123 Move X0, X20
	124 Move X1, X31
	125 Move X2, X31
	126 Call Object.op_Inequality, X0, X1
	127 Move TEMP, X0
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfNotEqual {154}
	131 Move X0, [X19+168]
	132 Compare X0, 0
	133 JumpIfEqual {219}
	134 Move X1, X31
	135 Call AvatarView.get_eyeLeftMaterial, X0
	136 Move X22, 0x2330000
	137 Move X22, [X22+568]
	138 Move X20, X0
	139 Move X8, [X22]
	140 Move W9, [X8+224]
	141 Compare W9, 0
	142 JumpIfNotEqual {145}
	143 Move X0, X8
	144 Call 0x1C17DFC
	145 Compare X20, 0
	146 JumpIfEqual {219}
	147 Move X8, [X22]
	148 Move X0, X20
	149 Move V0, V8
	150 Move X2, X31
	151 Move X8, [X8+184]
	152 Move W1, [X8+60]
	153 Call Material.SetFloat, X0, X1, V0
	154 Move X0, [X19+168]
	155 Compare X0, 0
	156 JumpIfEqual {219}
	157 Move X1, X31
	158 Call AvatarView.get_eyeRightMaterial, X0
	159 Move X8, [X21]
	160 Move X20, X0
	161 Move W9, [X8+224]
	162 Compare W9, 0
	163 JumpIfNotEqual {166}
	164 Move X0, X8
	165 Call 0x1C17DFC
	166 Move X0, X20
	167 Move X1, X31
	168 Move X2, X31
	169 Call Object.op_Inequality, X0, X1
	170 Move TEMP, X0
	171 And TEMP, TEMP, 1
	172 Compare TEMP, 1
	173 JumpIfNotEqual {208}
	174 Move X0, [X19+168]
	175 Compare X0, 0
	176 JumpIfEqual {219}
	177 Move X1, X31
	178 Call AvatarView.get_eyeRightMaterial, X0
	179 Move X20, 0x2330000
	180 Move X20, [X20+568]
	181 Move X19, X0
	182 Move X8, [X20]
	183 Move W9, [X8+224]
	184 Compare W9, 0
	185 JumpIfNotEqual {188}
	186 Move X0, X8
	187 Call 0x1C17DFC
	188 Compare X19, 0
	189 JumpIfEqual {219}
	190 Move X8, [X20]
	191 Move X0, X19
	192 Move V0, V8
	193 Move X20, [X31+64]
	194 Move X19, [X31+72]
	195 Move X8, [X8+184]
	196 Move X22, [X31+48]
	197 Move X21, [X31+56]
	198 Move X30, [X31+40]
	199 Move D9, [X31+24]
	200 Move D8, [X31+32]
	201 Move W1, [X8+60]
	202 Move D11, [X31+8]
	203 Move D10, [X31+16]
	204 Move X2, X31
	205 Move V12, [X31+80]
	206 Call Material.SetFloat, X0, X1, V0
	207 Return 
	208 Move X20, [X31+64]
	209 Move X19, [X31+72]
	210 Move X22, [X31+48]
	211 Move X21, [X31+56]
	212 Move X30, [X31+40]
	213 Move D9, [X31+24]
	214 Move D8, [X31+32]
	215 Move D11, [X31+8]
	216 Move D10, [X31+16]
	217 Move V12, [X31+80]
	218 Return 
	219 Call 0x1C17F20

Method: System.Void SetFingerValues(AnimalCompany.HandSide handSide, System.Single thumbValue, System.Single indexValue, System.Single middleValue)

Disassembly:
	0x01DC4744 LDR X8, [X8 + 0x468]
	0x01DC4748 ADRP X22, 0x232F000
	0x01DC474C LDR X22, [X22 + 0x710]
	0x01DC4750 MOV X2, X0
	0x01DC4754 LDR X1, [X8]
	0x01DC4758 LDR X3, [X22]
	0x01DC475C MOV X0, X21
	0x01DC4760 BL 0x2AA5098
	0x01DC4764 ADRP X8, 0x2334000
	0x01DC4768 LDR X2, [X19 + 0x28]
	0x01DC476C LDR X8, [X8 + 0x170]
	0x01DC4770 LDR X3, [X22]
	0x01DC4774 LDR X1, [X8]
	0x01DC4778 MOV X0, X21
	0x01DC477C BL 0x2AA5098
	0x01DC4780 ADRP X8, 0x232F000
	0x01DC4784 LDR X8, [X8 + 0xB50]
	0x01DC4788 LDR X0, [X8]
	0x01DC478C LDR W8, [X0 + 0xE0]
	0x01DC4790 CBNZ W8, 0x1DC4798
	0x01DC4794 BL 0x1C16DFC
	0x01DC4798 ADRP X8, 0x2334000
	0x01DC479C LDR X8, [X8 + 0x178]
	0x01DC47A0 LDR X0, [X8]
	0x01DC47A4 MOV X1, X21
	0x01DC47A8 BL 0x1DC4DD0
	0x01DC47AC LDR X0, [X20 + 0x38]
	0x01DC47B0 CBZ X0, 0x1DC4A34
	0x01DC47B4 LDP S1, S2, [X19 + 0x34]
	0x01DC47B8 LDR V0, [X19 + 0x30]
	0x01DC47BC MOVZ W1, 0x1
	0x01DC47C0 BL 0x1DC4E6C
	0x01DC47C4 ADRP X8, 0x2334000
	0x01DC47C8 LDR X8, [X8 + 0x88]
	0x01DC47CC LDR X8, [X8]
	0x01DC47D0 LDR X8, [X8 + 0xB8]
	0x01DC47D4 LDRB W8, [X8]
	0x01DC47D8 CBZ W8, 0x1DC4904
	0x01DC47DC ADRP X8, 0x2334000
	0x01DC47E0 LDR X8, [X8 + 0x168]
	0x01DC47E4 LDR X0, [X8]
	0x01DC47E8 LDR W8, [X0 + 0xE0]
	0x01DC47EC CBNZ W8, 0x1DC47F4
	0x01DC47F0 BL 0x1C16DFC
	0x01DC47F4 MOVZ W0, 0x1
	0x01DC47F8 MOV X1, X31
	0x01DC47FC MOVZ W21, 0x1
	0x01DC4800 BL 0x1E01A6C
	0x01DC4804 ADRP X8, 0x2332000
	0x01DC4808 LDR X8, [X8 + 0xC30]
	0x01DC480C LDR X0, [X8]
	0x01DC4810 BL 0x1C16F10
	0x01DC4814 FMOV S0, 4
	0x01DC4818 MOV X1, X31
	0x01DC481C MOV X20, X0
	0x01DC4820 BL 0x3C3A634
	0x01DC4824 MOVZ W8, 0x2
	0x01DC4828 STR X20, [X19 + 0x18]
	0x01DC482C STR W8, [X19 + 0x10]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+216]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CSET not yet implemented."
	010 Compare X8, 0
	011 JumpIfEqual {72}
	012 Move W9, [X8+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction CSET not yet implemented."
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add X8, X8, X20
	017 Move X19, X0
	018 Move X0, [X8+32]
	019 Compare X0, 0
	020 JumpIfEqual {72}
	021 Move V8, V2
	022 Move V9, V1
	023 Call PlayerFingerView.SetThumbValues, X0, V0
	024 Move X8, [X19+216]
	025 Compare X8, 0
	026 JumpIfEqual {72}
	027 Move W9, [X8+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Add X9, X8, X20
	030 Move X0, [X9+32]
	031 Compare X0, 0
	032 JumpIfEqual {72}
	033 Move W9, [X0+32]
	034 Compare W9, 0
	035 JumpIfEqual {39}
	036 Move W9, 1
	037 Move [X0+61], W9
	038 Move [X0+40], S9
	039 Move V0, V9
	040 Call PlayerFingerView.ApplyIndexValues, X0, V0
	041 Move X8, [X19+216]
	042 Compare X8, 0
	043 JumpIfEqual {72}
	044 Move W9, [X8+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Add X8, X8, X20
	047 Move X0, [X8+32]
	048 Compare X0, 0
	049 JumpIfEqual {72}
	050 Move W8, [X0+32]
	051 Compare W8, 0
	052 JumpIfEqual {63}
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X30, [X31+16]
	056 Move X21, [X31+24]
	057 Move W8, 1
	058 Move [X0+62], W8
	059 Move [X0+44], S8
	060 Move D9, [X31+48]
	061 Move D8, [X31+56]
	062 Return 
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X30, [X31+16]
	066 Move X21, [X31+24]
	067 Move V0, V8
	068 Move D9, [X31+48]
	069 Move D8, [X31+56]
	070 Call PlayerFingerView.ApplyMiddleValues, X0, V0
	071 Return 
	072 Call 0x1C17F20
	073 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x01DCA6B8 MOV X1, X21
	0x01DCA6BC MOV X2, X31
	0x01DCA6C0 BL 0x33C0DE4
	0x01DCA6C4 CBZ X0, 0x1DCA708
	0x01DCA6C8 LDR X21, [X23]
	0x01DCA6CC MOV X20, X0
	0x01DCA6D0 MOV X1, X21
	0x01DCA6D4 BL 0x1C16E00
	0x01DCA6D8 CBZ X0, 0x1DCA78C
	0x01DCA6DC LDR X8, [X22]
	0x01DCA6E0 LDR X8, [X8 + 0xB8]
	0x01DCA6E4 STR X0, [X8 + 0x30]
	0x01DCA6E8 LDR X21, [X23]
	0x01DCA6EC MOV X0, X20
	0x01DCA6F0 MOV X1, X21
	0x01DCA6F4 BL 0x1C16E00
	0x01DCA6F8 CBZ X0, 0x1DCA78C
	0x01DCA6FC LDR X8, [X22]
	0x01DCA700 LDR X8, [X8 + 0xB8]
	0x01DCA704 B 0x1DCA714
	0x01DCA708 LDR X8, [X22]
	0x01DCA70C LDR X8, [X8 + 0xB8]
	0x01DCA710 STR X31, [X8 + 0x30]
	0x01DCA714 ADRP X23, 0x232B000
	0x01DCA718 LDR X20, [X8 + 0x38]
	0x01DCA71C LDR X23, [X23 + 0x5B0]
	0x01DCA720 LDR X0, [X23]
	0x01DCA724 BL 0x1C16F10
	0x01DCA728 ADRP X8, 0x232E000
	0x01DCA72C LDR X8, [X8 + 0x2E8]
	0x01DCA730 MOV X1, X19
	0x01DCA734 MOV X3, X31
	0x01DCA738 MOV X21, X0
	0x01DCA73C LDR X2, [X8]
	0x01DCA740 BL 0x2A6DA40
	0x01DCA744 MOV X0, X20
	0x01DCA748 MOV X1, X21
	0x01DCA74C MOV X2, X31
	0x01DCA750 BL 0x33C0DE4
	0x01DCA754 CBZ X0, 0x1DCA798
	0x01DCA758 LDR X21, [X23]
	0x01DCA75C MOV X20, X0
	0x01DCA760 MOV X1, X21
	0x01DCA764 BL 0x1C16E00
	0x01DCA768 CBZ X0, 0x1DCA78C
	0x01DCA76C LDR X8, [X22]
	0x01DCA770 LDR X8, [X8 + 0xB8]
	0x01DCA774 STR X0, [X8 + 0x38]
	0x01DCA778 LDR X21, [X23]
	0x01DCA77C MOV X0, X20
	0x01DCA780 MOV X1, X21
	0x01DCA784 BL 0x1C16E00
	0x01DCA788 CBNZ X0, 0x1DCA7A4
	0x01DCA78C MOV X0, X20
	0x01DCA790 MOV X1, X21
	0x01DCA794 BL 0x1C171E0
	0x01DCA798 LDR X8, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, -19783680
	006 Move X9, -19771392
	007 Move V0, [X8+254]
	008 Move V1, [X9+872]
	009 Move X21, 0x260F000
	010 Move X19, X0
	011 Move [X0+4], V0
	012 Move [X0+80], D1
	013 Move W8, [X21+1923]
	014 Add X20, X0, 260
	015 Compare W8, 0
	016 JumpIfNotEqual {22}
	017 Move X0, 0x232A000
	018 Move X0, [X0+1440]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1923], W8
	022 Move X8, 0x232A000
	023 Move X8, [X8+1440]
	024 Move X0, X19
	025 Move X1, X31
	026 Move X8, [X8]
	027 Move X9, [X8+184]
	028 Move V0, [X9]
	029 Move V1, [X9+8]
	030 Move [X19+248], D0
	031 Move [X19+256], S1
	032 Move X9, [X8+184]
	033 Move V0, [X9]
	034 Move V1, [X9+8]
	035 Move X9, -19787776
	036 Move [X20], D0
	037 Move V0, [X9+235]
	038 Move X9, -19775488
	039 Move [X19+268], S1
	040 Move V1, [X9+3504]
	041 Move W9, 0x3FC00000
	042 Move [X20+36], V0
	043 Move [X19+312], W9
	044 Move W9, 0xCCCD
	045 NotImplemented "Instruction MOVK not yet implemented."
	046 Move [X20+64], D1
	047 Move [X19+332], W9
	048 Move X9, [X8+184]
	049 Move V0, [X9]
	050 Move V1, [X9+8]
	051 Move [X19+424], D0
	052 Move [X19+432], S1
	053 Move X8, [X8+184]
	054 Move V0, [X8]
	055 Move V1, [X8+8]
	056 Move [X20+176], D0
	057 Move [X19+444], S1
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Call MonoBehaviour..ctor, X0
	063 Return 

Method: System.Void .cctor()

Disassembly:
	0x01DCA79C LDR X8, [X8 + 0xB8]
	0x01DCA7A0 STR X31, [X8 + 0x38]
	0x01DCA7A4 ADRP X22, 0x232C000
	0x01DCA7A8 LDR X22, [X22 + 0xD98]
	0x01DCA7AC ADRP X23, 0x232A000
	0x01DCA7B0 LDR X8, [X22]
	0x01DCA7B4 LDR X8, [X8 + 0xB8]
	0x01DCA7B8 LDR X23, [X23 + 0xE70]
	0x01DCA7BC LDR X20, [X8 + 0x108]
	0x01DCA7C0 LDR X0, [X23]
	0x01DCA7C4 BL 0x1C16F10
	0x01DCA7C8 ADRP X8, 0x232E000
	0x01DCA7CC LDR X8, [X8 + 0x2C8]
	0x01DCA7D0 MOV X1, X19
	0x01DCA7D4 MOV X3, X31
	0x01DCA7D8 MOV X21, X0
	0x01DCA7DC LDR X2, [X8]
	0x01DCA7E0 BL 0x3314368
	0x01DCA7E4 MOV X0, X20
	0x01DCA7E8 MOV X1, X21
	0x01DCA7EC MOV X2, X31
	0x01DCA7F0 BL 0x33C0DE4
	0x01DCA7F4 CBZ X0, 0x1DCA824
	0x01DCA7F8 LDR X1, [X23]
	0x01DCA7FC LDR X8, [X0]
	0x01DCA800 CMP X8, X1
	0x01DCA804 B.NE 0x1DCA794
	0x01DCA808 LDR X8, [X22]
	0x01DCA80C LDR X8, [X8 + 0xB8]
	0x01DCA810 STR X0, [X8 + 0x108]
	0x01DCA814 LDR X8, [X0]
	0x01DCA818 CMP X8, X1
	0x01DCA81C B.EQ 0x1DCA830
	0x01DCA820 B 0x1DCA794
	0x01DCA824 LDR X8, [X22]
	0x01DCA828 LDR X8, [X8 + 0xB8]
	0x01DCA82C STR X0, [X8 + 0x108]
	0x01DCA830 LDP X20, X19, [X31 + 0x20]
	0x01DCA834 LDP X22, X21, [X31 + 0x10]
	0x01DCA838 LDP X30, X23, [X31], #0x30
	0x01DCA83C RET
	0x01DCA840 BL 0x1C16F20
	0x01DCA844 BL 0x1C16F28
	0x01DCA848 BL 0x1C16F44
	0x01DCA84C MOV X1, X31
	0x01DCA850 BL 0x1C16DEC
	0x01DCA854 STP X30, X23, [X31 - 0x30]!
	0x01DCA858 STP X22, X21, [X31 + 0x10]
	0x01DCA85C STP X20, X19, [X31 + 0x20]
	0x01DCA860 ADRP X20, 0x260E000
	0x01DCA864 ADRP X21, 0x232C000
	0x01DCA868 LDRB W8, [X20 + 0xBB1]
	0x01DCA86C LDR X21, [X21 + 0xA78]
	0x01DCA870 MOV X19, X0
	0x01DCA874 TBNZ X8, 0x0, 0x1DCA940
	0x01DCA878 ADRP X0, 0x232B000
	0x01DCA87C LDR X0, [X0 + 0x5B0]
	0x01DCA880 BL 0x1C16CF4
	0x01DCA884 ADRP X0, 0x232D000
	0x01DCA888 LDR X0, [X0 + 0xB00]
	0x01DCA88C BL 0x1C16CF4
	0x01DCA890 ADRP X0, 0x232E000
	0x01DCA894 LDR X0, [X0 + 0x2C0]
	0x01DCA898 BL 0x1C16CF4
	0x01DCA89C ADRP X0, 0x232A000
	0x01DCA8A0 LDR X0, [X0 + 0xE70]
	0x01DCA8A4 BL 0x1C16CF4
	0x01DCA8A8 ADRP X0, 0x2329000
	0x01DCA8AC LDR X0, [X0 + 0x648]
	0x01DCA8B0 BL 0x1C16CF4
	0x01DCA8B4 ADRP X0, 0x232E000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x260F000
	007 Move X19, 0x232F000
	008 Move X21, 0x232D000
	009 Move X20, 0x232D000
	010 Move W8, [X22+2988]
	011 Move X19, [X19+568]
	012 Move X21, [X21+3208]
	013 Move X20, [X20+1136]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x232F000
	019 Move X0, [X0+568]
	020 Call 0x1C17CF4
	021 Move X0, 0x232D000
	022 Move X0, [X0+1136]
	023 Call 0x1C17CF4
	024 Move X0, 0x232D000
	025 Move X0, [X0+3208]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+2988], W8
	029 Move X8, -19787776
	030 Move V1, [X8+384]
	031 Move S0, W31
	032 Move X0, X31
	033 Move V2, V1
	034 Call Quaternion.Internal_FromEulerRad, X0
	035 Move X8, [X19]
	036 Move X0, X31
	037 Move X8, [X8+184]
	038 Move [X8], S0
	039 Move [X8+8], S1
	040 Move [X8+8], S2
	041 Move [X8+16], S3
	042 Move X8, -19787776
	043 Move V1, [X8+440]
	044 Move S0, W31
	045 Move V2, V1
	046 Call Quaternion.Internal_FromEulerRad, X0
	047 Move X8, [X19]
	048 Move X10, -19775488
	049 Move V4, [X10+2888]
	050 Move X10, -19775488
	051 Move X9, [X8+184]
	052 Move X1, X31
	053 Move [X9+16], S0
	054 Move [X9+24], S1
	055 Move [X9+24], S2
	056 Move [X9+32], S3
	057 Move X9, [X8+184]
	058 Move V0, [X10+3640]
	059 Move W10, 0x42B40000
	060 Move [X9+32], D4
	061 Move [X9+40], W10
	062 Move X8, [X8+184]
	063 Move W9, 0xC2B40000
	064 Move [X8+44], D0
	065 Move [X8+52], W9
	066 Move X0, [X21]
	067 Call Shader.PropertyToID, X0
	068 Move X8, [X19]
	069 Move X1, X31
	070 Move X8, [X8+184]
	071 Move [X8+56], W0
	072 Move X0, [X20]
	073 Call Shader.PropertyToID, X0
	074 Move X8, [X19]
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X8, [X8+184]
	080 Move [X8+60], W0
	081 Move X30, [X31+48]
	082 Return 

