Type: AnimalCompany.Ammo

Method: System.Void Awake()

Disassembly:
	0x01CADFAC MOV X1, X31
	0x01CADFB0 BL 0x1C9ED50
	0x01CADFB4 MOV X0, X19
	0x01CADFB8 BL 0x1CAD5C4
	0x01CADFBC SUB W1, W0, 0x1
	0x01CADFC0 MOV X0, X19
	0x01CADFC4 BL 0x1CAD624
	0x01CADFC8 LDR X0, [X19 + 0x38]
	0x01CADFCC FMOV S0, 1
	0x01CADFD0 MOV X1, X31
	0x01CADFD4 BL 0x1D9CEB8
	0x01CADFD8 AND X1, X0, 0x0
	0x01CADFDC MOV X0, X19
	0x01CADFE0 BL 0x1CAD6E4
	0x01CADFE4 LDR X0, [X19 + 0x88]
	0x01CADFE8 CBZ X0, 0x1CAE084
	0x01CADFEC MOV X1, X31
	0x01CADFF0 BL 0x3AA7658
	0x01CADFF4 LDR X0, [X19 + 0x88]
	0x01CADFF8 CBZ X0, 0x1CAE084
	0x01CADFFC MOV X1, X31
	0x01CAE000 MOV V8.16B, V0.16B
	0x01CAE004 MOV V9.16B, V1.16B
	0x01CAE008 MOV V10.16B, V2.16B
	0x01CAE00C BL 0x3AA5FBC
	0x01CAE010 MOV V4.16B, V0.16B
	0x01CAE014 MOV V5.16B, V1.16B
	0x01CAE018 MOV V6.16B, V2.16B
	0x01CAE01C MOV V7.16B, V3.16B
	0x01CAE020 MOV W0, W31
	0x01CAE024 MOV V0.16B, V8.16B
	0x01CAE028 MOV V1.16B, V9.16B
	0x01CAE02C MOV V2.16B, V10.16B
	0x01CAE030 MOV V3.16B, V4.16B
	0x01CAE034 MOV V4.16B, V5.16B
	0x01CAE038 MOV V5.16B, V6.16B
	0x01CAE03C MOV V6.16B, V7.16B
	0x01CAE040 MOV X1, X31
	0x01CAE044 BL 0x1CF3540
	0x01CAE048 MOV X0, X19
	0x01CAE04C BL 0x1CAE110
	0x01CAE050 LDP X20, X19, [X31 + 0xC0]
	0x01CAE054 LDP X22, X21, [X31 + 0xB0]
	0x01CAE058 LDP X24, X23, [X31 + 0xA0]
	0x01CAE05C LDR X30, [X31 + 0x90]
	0x01CAE060 LDP D9, D8, [X31 + 0x80]
	0x01CAE064 LDP D11, D10, [X31 + 0x70]
	0x01CAE068 LDP D13, D12, [X31 + 0x60]
	0x01CAE06C ADD X31, X31, 0xD0
	0x01CAE070 RET
	0x01CAE074 BL 0x1B6EA1C
	0x01CAE078 BL 0x1B6EA1C
	0x01CAE07C BL 0x1B6EA1C
	0x01CAE080 BL 0x1B6EA1C
	0x01CAE084 BL 0x1B6EA1C
	0x01CAE088 B 0x1CAE09C
	0x01CAE08C B 0x1CAE09C
	0x01CAE090 B 0x1CAE09C
	0x01CAE094 B 0x1CAE09C
	0x01CAE098 B 0x1CAE09C
	0x01CAE09C MOV X20, X0
	0x01CAE0A0 CMP W1, 0x1
	0x01CAE0A4 B.NE 0x1CAE0D8
	0x01CAE0A8 MOV X0, X20
	0x01CAE0AC BL 0x3D19840
	0x01CAE0B0 LDR X21, [X0]
	0x01CAE0B4 BL 0x3D19850
	0x01CAE0B8 ADRP X8, 0x22A0000
	0x01CAE0BC LDR X8, [X8 + 0x988]
	0x01CAE0C0 ADD X0, X31, 0x30
	0x01CAE0C4 LDR X1, [X8]
	0x01CAE0C8 BL 0x2A5A4D8
	0x01CAE0CC CBZ X21, 0x1CADE1C
	0x01CAE0D0 MOV X0, X21
	0x01CAE0D4 BL 0x1B6EA14
	0x01CAE0D8 MOV X21, X31
	0x01CAE0DC B 0x1CAE0E4
	0x01CAE0E0 MOV X20, X0
	0x01CAE0E4 ADRP X8, 0x22A0000
	0x01CAE0E8 LDR X8, [X8 + 0x988]
	0x01CAE0EC LDR X1, [X8]
	0x01CAE0F0 ADD X0, X31, 0x30
	0x01CAE0F4 BL 0x2A5A4D8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x2577000
	008 Move X20, 0x22A2000
	009 Move W8, [X21+1181]
	010 Move X20, [X20+984]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x22A2000
	017 Move X0, [X0+368]
	018 Call 0x1B6F7F0
	019 Move X0, 0x22A2000
	020 Move X0, [X0+2320]
	021 Call 0x1B6F7F0
	022 Move X0, 0x22A2000
	023 Move X0, [X0+616]
	024 Call 0x1B6F7F0
	025 Move X0, 0x22A2000
	026 Move X0, [X0+984]
	027 Call 0x1B6F7F0
	028 Move W8, 1
	029 Move [X21+1181], W8
	030 Move X0, [X20]
	031 Move X21, 0x22A1000
	032 Move W8, [X0+224]
	033 Move X21, [X21+616]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1B6F8F8
	037 Move X0, [X20]
	038 Move X8, [X0+184]
	039 Move X1, X31
	040 Move W0, [X8+12]
	041 Call LayerMask.op_Implicit, X0
	042 Move X8, [X20]
	043 Move W20, W0
	044 Move X1, X31
	045 Move X8, [X8+184]
	046 Move W8, [X8+16]
	047 Move X0, X8
	048 Call LayerMask.op_Implicit, X0
	049 Or W0, W0, W20
	050 Move X1, X31
	051 Call LayerMask.op_Implicit, X0
	052 Move [X19+40], W0
	053 Move X1, [X21]
	054 Move X0, X19
	055 Call 0x2090DE8, X0
	056 Move [X19+32], X0
	057 Compare X0, 0
	058 JumpIfEqual {93}
	059 Move X23, 0x22A1000
	060 Move X23, [X23+368]
	061 Move X20, X0
	062 Move X21, [X0+400]
	063 Move X22, 0x22A1000
	064 Move X0, [X23]
	065 Move X22, [X22+2320]
	066 Call 0x1B6FA0C
	067 Move X2, [X22]
	068 Move X1, X19
	069 Move X3, X31
	070 Move X22, X0
	071 Call Action..ctor, X0, X1, X2
	072 Move X0, X21
	073 Move X1, X22
	074 Move X2, X31
	075 Call Delegate.Combine, X0, X1
	076 Compare X0, 0
	077 JumpIfEqual {85}
	078 Move X1, [X23]
	079 Move X8, [X0]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move [X20+400], X0
	082 Move X8, [X0]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Call 0x1B6FCDC
	085 Move [X20+400], X0
	086 Move X20, [X31+32]
	087 Move X19, [X31+40]
	088 Move X22, [X31+16]
	089 Move X21, [X31+24]
	090 Move X30, [X31+48]
	091 Move X23, [X31+56]
	092 Return 
	093 Call 0x1B6FA1C

Method: System.Void OnDestroy()

Disassembly:
	0x01CAE0F8 CBNZ X21, 0x1CAE104
	0x01CAE0FC MOV X0, X20
	0x01CAE100 BL 0x1C8418C
	0x01CAE104 MOV X0, X21
	0x01CAE108 BL 0x1B6EA14
	0x01CAE10C BL 0x18F46A8
	0x01CAE110 STP X30, X21, [X31 - 0x20]!
	0x01CAE114 STP X20, X19, [X31 + 0x10]
	0x01CAE118 ADRP X20, 0x2575000
	0x01CAE11C LDRB W8, [X20 + 0x4A3]
	0x01CAE120 MOV X19, X0
	0x01CAE124 TBNZ X8, 0x0, 0x1CAE148
	0x01CAE128 ADRP X0, 0x22A0000
	0x01CAE12C LDR X0, [X0 + 0x1C0]
	0x01CAE130 BL 0x1B6E7F0
	0x01CAE134 ADRP X0, 0x22A0000
	0x01CAE138 LDR X0, [X0 + 0x9B0]
	0x01CAE13C BL 0x1B6E7F0
	0x01CAE140 MOVZ W8, 0x1
	0x01CAE144 STRB W8, [X20 + 0x4A3]
	0x01CAE148 LDRB W8, [X19 + 0x58]
	0x01CAE14C CBZ W8, 0x1CAE174
	0x01CAE150 STRB W31, [X19 + 0x58]
	0x01CAE154 LDR X0, [X19 + 0xB0]
	0x01CAE158 CBZ X0, 0x1CAE2AC
	0x01CAE15C MOVZ W1, 0x1
	0x01CAE160 MOV X2, X31
	0x01CAE164 BL 0x3A9D9A8
	0x01CAE168 MOVZ W8, 0x5
	0x01CAE16C STR W8, [X19 + 0xC8]
	0x01CAE170 B 0x1CAE1B0
	0x01CAE174 ADRP X21, 0x22A0000
	0x01CAE178 LDR X21, [X21 + 0x1C0]
	0x01CAE17C LDR X0, [X21]
	0x01CAE180 LDR W8, [X0 + 0xE0]
	0x01CAE184 CBNZ W8, 0x1CAE18C
	0x01CAE188 BL 0x1B6E8F8
	0x01CAE18C MOV X0, X19
	0x01CAE190 MOV X1, X31
	0x01CAE194 BL 0x1D697C8
	0x01CAE198 LDR X0, [X19 + 0x38]
	0x01CAE19C CBZ X0, 0x1CAE2AC
	0x01CAE1A0 MOV X1, X31
	0x01CAE1A4 BL 0x1D87040
	0x01CAE1A8 CMP W0, 0x4
	0x01CAE1AC B.NE 0x1CAE1BC
	0x01CAE1B0 LDP X20, X19, [X31 + 0x10]
	0x01CAE1B4 LDP X30, X21, [X31], #0x20
	0x01CAE1B8 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2576000
	008 Move W8, [X20+1182]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x22A1000
	015 Move X0, [X0+368]
	016 Call 0x1B6F7F0
	017 Move X0, 0x22A1000
	018 Move X0, [X0+2320]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X20+1182], W8
	022 Move X22, [X19+32]
	023 Compare X22, 0
	024 JumpIfEqual {58}
	025 Move X23, 0x22A1000
	026 Move X23, [X23+368]
	027 Move X21, 0x22A1000
	028 Move X20, [X22+400]
	029 Move X0, [X23]
	030 Move X21, [X21+2320]
	031 Call 0x1B6FA0C
	032 Move X2, [X21]
	033 Move X1, X19
	034 Move X3, X31
	035 Move X21, X0
	036 Call Action..ctor, X0, X1, X2
	037 Move X0, X20
	038 Move X1, X21
	039 Move X2, X31
	040 Call Delegate.Remove, X0, X1
	041 Compare X0, 0
	042 JumpIfEqual {50}
	043 Move X1, [X23]
	044 Move X8, [X0]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move [X22+400], X0
	047 Move X8, [X0]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Call 0x1B6FCDC
	050 Move [X22+400], X0
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Return 
	058 Call 0x1B6FA1C

Method: System.Void HandleOnUse()

Disassembly:
	0x01CAE1BC LDR X0, [X19 + 0x40]
	0x01CAE1C0 CBZ X0, 0x1CAE2AC
	0x01CAE1C4 MOV X1, X31
	0x01CAE1C8 BL 0x1D9F538
	0x01CAE1CC TBNZ X0, 0x0, 0x1CAE208
	0x01CAE1D0 LDR X0, [X21]
	0x01CAE1D4 LDR X19, [X19 + 0x40]
	0x01CAE1D8 LDR W8, [X0 + 0xE0]
	0x01CAE1DC CBNZ W8, 0x1CAE1E4
	0x01CAE1E0 BL 0x1B6E8F8
	0x01CAE1E4 ADRP X8, 0x22A0000
	0x01CAE1E8 LDR X8, [X8 + 0x9B0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Ammo.CheckAndReload, X0
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {17}
	009 Move X0, [X19+32]
	010 Compare X0, 0
	011 JumpIfEqual {20}
	012 Move X1, X31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call GrabbableItem.RespawnOrDespawn, X0
	016 Return 
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return 
	020 Call 0x1B6FA1C

Method: System.Boolean CheckAndReload()

Disassembly:
	0x01CAE1EC MOV X1, X19
	0x01CAE1F0 LDP X20, X19, [X31 + 0x10]
	0x01CAE1F4 MOVZ W2, 0x1
	0x01CAE1F8 LDR X0, [X8]
	0x01CAE1FC MOV X3, X31
	0x01CAE200 LDP X30, X21, [X31], #0x20
	0x01CAE204 B 0x1D69640
	0x01CAE208 LDR X8, [X19 + 0x38]
	0x01CAE20C CBZ X8, 0x1CAE2AC
	0x01CAE210 MOV W20, W0
	0x01CAE214 LDR X0, [X8 + 0x50]
	0x01CAE218 CBZ X0, 0x1CAE2AC
	0x01CAE21C MOV X1, X31
	0x01CAE220 BL 0x1DBEFE4
	0x01CAE224 TBZ X0, 0x0, 0x1CAE2A0
	0x01CAE228 LDR X8, [X19 + 0x38]
	0x01CAE22C CBZ X8, 0x1CAE2AC
	0x01CAE230 LDR X0, [X8 + 0x50]
	0x01CAE234 MOVZ W1, 0x8
	0x01CAE238 MOV X2, X31
	0x01CAE23C BL 0x1DD601C
	0x01CAE240 MOV X21, X0
	0x01CAE244 MOVZ W0, 0x1
	0x01CAE248 MOV X1, X31
	0x01CAE24C BL 0x1D29EBC
	0x01CAE250 LDR X8, [X19 + 0x40]
	0x01CAE254 CBZ X8, 0x1CAE2AC
	0x01CAE258 LDR X8, [X8 + 0x20]
	0x01CAE25C CBZ X8, 0x1CAE268
	0x01CAE260 LDR W0, [X8]
	0x01CAE264 B 0x1CAE26C
	0x01CAE268 MOV X0, X31
	0x01CAE26C LDR W1, [X19 + 0x68]
	0x01CAE270 MOVZ W2, 0x2
	0x01CAE274 MOV X3, X31
	0x01CAE278 BL 0x1DA8258
	0x01CAE27C STUR X0, [X21 + 0x1C]
	0x01CAE280 CBZ X21, 0x1CAE2AC
	0x01CAE284 MOVZ W8, 0x40
	0x01CAE288 STR W8, [X21 + 0xC]
	0x01CAE28C LDR X0, [X19 + 0x38]
	0x01CAE290 CBZ X0, 0x1CAE2AC
	0x01CAE294 MOV X1, X21
	0x01CAE298 MOV X2, X31
	0x01CAE29C BL 0x1D8A710
	0x01CAE2A0 ANDS W31, W20, 0x7
	0x01CAE2A4 B.NE 0x1CAE154
	0x01CAE2A8 B 0x1CAE1B0
	0x01CAE2AC BL 0x1B6EA1C
	0x01CAE2B0 STR X30, [X31 - 0x20]!
	0x01CAE2B4 STP X20, X19, [X31 + 0x10]
	0x01CAE2B8 ADRP X20, 0x2575000
	0x01CAE2BC LDRB W8, [X20 + 0x4A4]
	0x01CAE2C0 MOV X19, X0
	0x01CAE2C4 TBNZ X8, 0x0, 0x1CAE2F4
	0x01CAE2C8 ADRP X0, 0x22A0000
	0x01CAE2CC LDR X0, [X0 + 0x1C0]
	0x01CAE2D0 BL 0x1B6E7F0
	0x01CAE2D4 ADRP X0, 0x229F000
	0x01CAE2D8 LDR X0, [X0 + 0x478]
	0x01CAE2DC BL 0x1B6E7F0
	0x01CAE2E0 ADRP X0, 0x22A0000
	0x01CAE2E4 LDR X0, [X0 + 0x9B8]
	0x01CAE2E8 BL 0x1B6E7F0
	0x01CAE2EC MOVZ W8, 0x1
	0x01CAE2F0 STRB W8, [X20 + 0x4A4]
	0x01CAE2F4 LDRB W8, [X19 + 0x58]
	0x01CAE2F8 CBZ W8, 0x1CAE370
	0x01CAE2FC STRB W31, [X19 + 0x58]
	0x01CAE300 ADRP X20, 0x229F000
	0x01CAE304 LDR X20, [X20 + 0x478]
	0x01CAE308 MOVZ W1, 0x2
	0x01CAE30C MOV X0, X19
	0x01CAE310 BL 0x1CAD624
	0x01CAE314 LDR X0, [X20]
	0x01CAE318 LDR X20, [X19 + 0xA0]
	0x01CAE31C LDR W8, [X0 + 0xE0]
	0x01CAE320 CBNZ W8, 0x1CAE328
	0x01CAE324 BL 0x1B6E8F8
	0x01CAE328 MOV X0, X20
	0x01CAE32C MOV X1, X31
	0x01CAE330 MOV X2, X31
	0x01CAE334 BL 0x3A9D6EC
	0x01CAE338 TBZ X0, 0x0, 0x1CAE3AC
	0x01CAE33C LDR X20, [X19 + 0xA0]
	0x01CAE340 MOV X0, X19
	0x01CAE344 MOV X1, X31
	0x01CAE348 BL 0x3A9B084
	0x01CAE34C CBZ X0, 0x1CAE4A8
	0x01CAE350 MOV X1, X31
	0x01CAE354 BL 0x3AA7658
	0x01CAE358 MOV X0, X20
	0x01CAE35C LDP X20, X19, [X31 + 0x10]
	0x01CAE360 FMOV S3, 1
	0x01CAE364 MOV X1, X31
	0x01CAE368 LDR X30, [X31], #0x20
	0x01CAE36C B 0x1CC181C
	0x01CAE370 ADRP X20, 0x22A0000
	0x01CAE374 LDR X20, [X20 + 0x1C0]
	0x01CAE378 LDR X0, [X20]
	0x01CAE37C LDR W8, [X0 + 0xE0]
	0x01CAE380 CBNZ W8, 0x1CAE388
	0x01CAE384 BL 0x1B6E8F8
	0x01CAE388 MOV X0, X19
	0x01CAE38C MOV X1, X31
	0x01CAE390 BL 0x1D697C8
	0x01CAE394 LDR X0, [X19 + 0x38]
	0x01CAE398 CBZ X0, 0x1CAE4A8
	0x01CAE39C MOV X1, X31
	0x01CAE3A0 BL 0x1D87040
	0x01CAE3A4 CMP W0, 0x4
	0x01CAE3A8 B.NE 0x1CAE3B8
	0x01CAE3AC LDP X20, X19, [X31 + 0x10]
	0x01CAE3B0 LDR X30, [X31], #0x20
	0x01CAE3B4 RET
	0x01CAE3B8 LDR X0, [X19 + 0x40]
	0x01CAE3BC CBZ X0, 0x1CAE4A8
	0x01CAE3C0 MOV X1, X31
	0x01CAE3C4 BL 0x1D9F538
	0x01CAE3C8 ANDS W31, W0, 0x7
	0x01CAE3CC B.EQ 0x1CAE430
	0x01CAE3D0 TBNZ X0, 0x0, 0x1CAE300
	0x01CAE3D4 LDR X8, [X19 + 0x38]
	0x01CAE3D8 CBZ X8, 0x1CAE4A8
	0x01CAE3DC LDR X0, [X8 + 0x50]
	0x01CAE3E0 CBZ X0, 0x1CAE4A8
	0x01CAE3E4 MOV X1, X31
	0x01CAE3E8 BL 0x1DBEFE4
	0x01CAE3EC TBZ X0, 0x0, 0x1CAE3AC
	0x01CAE3F0 LDR X8, [X19 + 0x38]
	0x01CAE3F4 CBZ X8, 0x1CAE4A8
	0x01CAE3F8 LDR X0, [X8 + 0x50]
	0x01CAE3FC MOVZ W1, 0x8
	0x01CAE400 MOV X2, X31
	0x01CAE404 BL 0x1DD601C
	0x01CAE408 MOV X20, X0
	0x01CAE40C MOVZ W0, 0x1
	0x01CAE410 MOV X1, X31
	0x01CAE414 BL 0x1D29EBC
	0x01CAE418 LDR X8, [X19 + 0x40]
	0x01CAE41C CBZ X8, 0x1CAE4A8
	0x01CAE420 LDR X8, [X8 + 0x20]

ISIL:
	001 Move [X31-96], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X19, 0x2576000
	013 Move W8, [X19+1183]
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {39}
	019 Move X0, 0x22A1000
	020 Move X0, [X0+2328]
	021 Call 0x1B6F7F0
	022 Move X0, 0x22A1000
	023 Move X0, [X0+1592]
	024 Call 0x1B6F7F0
	025 Move X0, 0x22A1000
	026 Move X0, [X0+1600]
	027 Call 0x1B6F7F0
	028 Move X0, 0x22A1000
	029 Move X0, [X0+2336]
	030 Call 0x1B6F7F0
	031 Move X0, 0x22A0000
	032 Move X0, [X0+1144]
	033 Call 0x1B6F7F0
	034 Move X0, 0x22A0000
	035 Move X0, [X0+1216]
	036 Call 0x1B6F7F0
	037 Move W8, 1
	038 Move [X19+1183], W8
	039 Move X0, X20
	040 Move X1, X31
	041 Call Component.get_transform, X0
	042 Compare X0, 0
	043 JumpIfEqual {164}
	044 Move X19, 0x22A0000
	045 Move X23, 0x22A1000
	046 Move X21, 0x22A1000
	047 Move X22, 0x22A1000
	048 Move X19, [X19+1216]
	049 Move X23, [X23+1600]
	050 Move X21, [X21+2328]
	051 Move X22, [X22+1592]
	052 Move X1, X31
	053 Call Transform.get_position, X0
	054 Move W0, [X20+40]
	055 Move X1, X31
	056 Move V8, V0
	057 Move V9, V1
	058 Move V10, V2
	059 Call LayerMask.op_Implicit, X0
	060 Move X8, [X19]
	061 Move W19, W0
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Move X0, X8
	066 Call 0x1B6F8F8
	067 Move S3, 0.25
	068 Move V0, V8
	069 Move V1, V9
	070 Move V2, V10
	071 Move W0, W19
	072 Move X1, X31
	073 Call Physics.OverlapSphere, X0, V0, X1
	074 Move X8, [X23]
	075 Move X19, X0
	076 Move X0, X8
	077 Call 0x1B6FA0C
	078 Move X2, [X21]
	079 Move X1, X20
	080 Move X3, X31
	081 Move X21, X0
	082 Call Comparison`1<Object>..ctor, X0, X1, X2
	083 Move X2, [X22]
	084 Move X0, X19
	085 Move X1, X21
	086 Call 0x20475D4, X0, X1
	087 Compare X19, 0
	088 JumpIfEqual {164}
	089 Move W8, [X19+24]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 NotImplemented "Instruction CSET not yet implemented."
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X24, 0x22A0000
	094 Move X25, 0x22A1000
	095 Move X24, [X24+1144]
	096 Move X25, [X25+2336]
	097 Move W23, W31
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Add X8, X19, W23
	100 Move X20, [X8+32]
	101 Compare X20, 0
	102 JumpIfEqual {164}
	103 Move X0, X20
	104 Move X1, X31
	105 Call Collider.get_attachedRigidbody, X0
	106 Move X8, [X24]
	107 Move X21, X0
	108 Move W9, [X8+224]
	109 Compare W9, 0
	110 JumpIfNotEqual {113}
	111 Move X0, X8
	112 Call 0x1B6F8F8
	113 Move X0, X21
	114 Move X1, X31
	115 Move X2, X31
	116 Call Object.op_Inequality, X0, X1
	117 Move X21, X31
	118 Move TEMP, X0
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfNotEqual {130}
	122 Move X0, X20
	123 Move X1, X31
	124 Call Collider.get_attachedRigidbody, X0
	125 Compare X0, 0
	126 JumpIfEqual {164}
	127 Move X1, [X25]
	128 Call 0x2090DE8, X0
	129 Move X21, X0
	130 Move X0, [X24]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {135}
	134 Call 0x1B6F8F8
	135 Move X0, X21
	136 Move X1, X31
	137 Move X2, X31
	138 Call Object.op_Inequality, X0, X1
	139 Move TEMP, X0
	140 And TEMP, TEMP, 1
	141 Compare TEMP, 1
	142 JumpIfEqual {147}
	143 Move W8, [X19+24]
	144 Add W23, W23, 1
	145 NotImplemented "Instruction CMP not yet implemented."
	146 NotImplemented "Instruction CSET not yet implemented."
	147 Compare X21, 0
	148 JumpIfEqual {164}
	149 Move X0, X21
	150 Call Shotgun.RPC_Reload, X0
	151 And W0, W22, 1
	152 Move X20, [X31+80]
	153 Move X19, [X31+88]
	154 Move X22, [X31+64]
	155 Move X21, [X31+72]
	156 Move X24, [X31+48]
	157 Move X23, [X31+56]
	158 Move X30, [X31+32]
	159 Move X25, [X31+40]
	160 Move D9, [X31+16]
	161 Move D8, [X31+24]
	162 Move V10, [X31+96]
	163 Return X0
	164 Call 0x1B6FA1C
	165 Call 0x1B6FA24

Method: System.Void .ctor()

Disassembly:
	0x01CAE428 LDR W0, [X8]
	0x01CAE42C B 0x1CAE46C

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

Method: System.Int32 <CheckAndReload>b__5_0(UnityEngine.Collider a, UnityEngine.Collider b)

Disassembly:
	0x01CAE430 LDR X0, [X20]
	0x01CAE434 LDR X19, [X19 + 0x40]
	0x01CAE438 LDR W8, [X0 + 0xE0]
	0x01CAE43C CBNZ W8, 0x1CAE444
	0x01CAE440 BL 0x1B6E8F8
	0x01CAE444 ADRP X8, 0x22A0000
	0x01CAE448 LDR X8, [X8 + 0x9B8]
	0x01CAE44C MOV X1, X19
	0x01CAE450 LDP X20, X19, [X31 + 0x10]
	0x01CAE454 MOVZ W2, 0x7
	0x01CAE458 LDR X0, [X8]
	0x01CAE45C MOV X3, X31
	0x01CAE460 LDR X30, [X31], #0x20
	0x01CAE464 B 0x1D69640
	0x01CAE468 MOV X0, X31
	0x01CAE46C LDR W1, [X19 + 0x68]
	0x01CAE470 MOVZ W2, 0x3
	0x01CAE474 MOV X3, X31
	0x01CAE478 BL 0x1DA8258
	0x01CAE47C STUR X0, [X20 + 0x1C]
	0x01CAE480 CBZ X20, 0x1CAE4A8
	0x01CAE484 MOVZ W8, 0x40
	0x01CAE488 STR W8, [X20 + 0xC]
	0x01CAE48C LDR X0, [X19 + 0x38]
	0x01CAE490 CBZ X0, 0x1CAE4A8
	0x01CAE494 MOV X1, X20
	0x01CAE498 LDP X20, X19, [X31 + 0x10]
	0x01CAE49C MOV X2, X31
	0x01CAE4A0 LDR X30, [X31], #0x20
	0x01CAE4A4 B 0x1D8A710
	0x01CAE4A8 BL 0x1B6EA1C
	0x01CAE4AC STR X30, [X31 - 0x10]!
	0x01CAE4B0 LDR W8, [X0 + 0xC8]
	0x01CAE4B4 SUBS W8, W8, 0x1
	0x01CAE4B8 B.LT 0x1CAE4DC
	0x01CAE4BC STR W8, [X0 + 0xC8]
	0x01CAE4C0 B.NE 0x1CAE4DC
	0x01CAE4C4 LDR X0, [X0 + 0xB0]
	0x01CAE4C8 CBZ X0, 0x1CAE4E4
	0x01CAE4CC MOV W1, W31
	0x01CAE4D0 MOV X2, X31
	0x01CAE4D4 LDR X30, [X31], #0x10
	0x01CAE4D8 B 0x3A9D9A8
	0x01CAE4DC LDR X30, [X31], #0x10
	0x01CAE4E0 RET
	0x01CAE4E4 BL 0x1B6EA1C
	0x01CAE4E8 SUB X31, X31, 0xB0
	0x01CAE4EC STP D15, D14, [X31 + 0x50]
	0x01CAE4F0 STP D13, D12, [X31 + 0x60]
	0x01CAE4F4 STP D11, D10, [X31 + 0x70]
	0x01CAE4F8 STP D9, D8, [X31 + 0x80]
	0x01CAE4FC STP X30, X21, [X31 + 0x90]
	0x01CAE500 STP X20, X19, [X31 + 0xA0]
	0x01CAE504 ADRP X21, 0x2575000
	0x01CAE508 LDRB W8, [X21 + 0x4A6]
	0x01CAE50C MOV X19, X1
	0x01CAE510 MOV X20, X0
	0x01CAE514 TBNZ X8, 0x0, 0x1CAE580
	0x01CAE518 ADRP X0, 0x229F000
	0x01CAE51C LDR X0, [X0 + 0x4B0]
	0x01CAE520 BL 0x1B6E7F0
	0x01CAE524 ADRP X0, 0x229F000
	0x01CAE528 LDR X0, [X0 + 0x8B8]
	0x01CAE52C BL 0x1B6E7F0
	0x01CAE530 ADRP X0, 0x22A0000
	0x01CAE534 LDR X0, [X0 + 0x9C0]
	0x01CAE538 BL 0x1B6E7F0
	0x01CAE53C ADRP X0, 0x22A0000
	0x01CAE540 LDR X0, [X0 + 0x9C8]
	0x01CAE544 BL 0x1B6E7F0
	0x01CAE548 ADRP X0, 0x22A0000
	0x01CAE54C LDR X0, [X0 + 0x9D0]
	0x01CAE550 BL 0x1B6E7F0
	0x01CAE554 ADRP X0, 0x22A0000
	0x01CAE558 LDR X0, [X0 + 0x2A8]
	0x01CAE55C BL 0x1B6E7F0
	0x01CAE560 ADRP X0, 0x229F000
	0x01CAE564 LDR X0, [X0 + 0x478]
	0x01CAE568 BL 0x1B6E7F0
	0x01CAE56C ADRP X0, 0x229F000
	0x01CAE570 LDR X0, [X0 + 0x4C0]
	0x01CAE574 BL 0x1B6E7F0
	0x01CAE578 MOVZ W8, 0x1
	0x01CAE57C STRB W8, [X21 + 0x4A6]
	0x01CAE580 MOVI V0.2D, 0x0
	0x01CAE584 MOV X0, X20
	0x01CAE588 MOV X1, X31
	0x01CAE58C STUR V0, [X31 + 0x3C]
	0x01CAE590 STP V0, V0, [X31 + 0x20]
	0x01CAE594 STR X31, [X31 + 0x18]
	0x01CAE598 BL 0x3A9B084
	0x01CAE59C CBZ X0, 0x1CAE93C
	0x01CAE5A0 MOV X1, X31
	0x01CAE5A4 BL 0x3AA7AD0
	0x01CAE5A8 MOV X0, X31
	0x01CAE5AC MOV V8.16B, V0.16B
	0x01CAE5B0 MOV V9.16B, V1.16B
	0x01CAE5B4 MOV V10.16B, V2.16B
	0x01CAE5B8 BL 0x3A98D98
	0x01CAE5BC MOV X0, X31
	0x01CAE5C0 MOV V11.16B, V0.16B

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Compare X1, 0
	013 JumpIfEqual {121}
	014 Move X19, X0
	015 Move X0, X1
	016 Move X1, X31
	017 Move X20, X2
	018 Call Component.get_transform, X0
	019 Compare X0, 0
	020 JumpIfEqual {121}
	021 Move X1, X31
	022 Call Transform.get_position, X0
	023 Move X0, X19
	024 Move X1, X31
	025 Move V8, V0
	026 Move V9, V1
	027 Move V10, V2
	028 Call Component.get_transform, X0
	029 Compare X0, 0
	030 JumpIfEqual {121}
	031 Move X1, X31
	032 Call Transform.get_position, X0
	033 Move X21, 0x2576000
	034 Move W8, [X21+1286]
	035 Move V11, V0
	036 Move V12, V1
	037 Move V13, V2
	038 Compare W8, 0
	039 JumpIfNotEqual {45}
	040 Move X0, 0x22A0000
	041 Move X0, [X0+1160]
	042 Call 0x1B6F7F0
	043 Move W8, 1
	044 Move [X21+1286], W8
	045 Move X22, 0x22A0000
	046 Move X22, [X22+1160]
	047 Subtract S11, S8, S11
	048 Subtract S9, S9, S12
	049 Subtract S8, S10, S13
	050 Move X0, [X22]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1B6F8F8
	055 Multiply S0, S11, S11
	056 Multiply S1, S9, S9
	057 Add S0, S0, S1
	058 Multiply S1, S8, S8
	059 Add S0, S1, S0
	060 NotImplemented "Instruction FSQRT not yet implemented."
	061 Move [X31+60], S0
	062 Compare X20, 0
	063 JumpIfEqual {121}
	064 Move X0, X20
	065 Move X1, X31
	066 Call Component.get_transform, X0
	067 Compare X0, 0
	068 JumpIfEqual {121}
	069 Move X1, X31
	070 Call Transform.get_position, X0
	071 Move X0, X19
	072 Move X1, X31
	073 Move V8, V0
	074 Move V9, V1
	075 Move V10, V2
	076 Call Component.get_transform, X0
	077 Compare X0, 0
	078 JumpIfEqual {121}
	079 Move X1, X31
	080 Call Transform.get_position, X0
	081 Move W8, [X21+1286]
	082 Move V11, V0
	083 Move V12, V1
	084 Move V13, V2
	085 Compare W8, 0
	086 JumpIfNotEqual {92}
	087 Move X0, 0x22A0000
	088 Move X0, [X0+1160]
	089 Call 0x1B6F7F0
	090 Move W8, 1
	091 Move [X21+1286], W8
	092 Move X0, [X22]
	093 Subtract S11, S8, S11
	094 Subtract S9, S9, S12
	095 Subtract S8, S10, S13
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1B6F8F8
	100 Multiply S0, S11, S11
	101 Multiply S1, S9, S9
	102 Add S0, S0, S1
	103 Multiply S1, S8, S8
	104 Add S0, S1, S0
	105 NotImplemented "Instruction FSQRT not yet implemented."
	106 Add X0, X31, 60
	107 Move X1, X31
	108 Call Single.CompareTo, X0, V0
	109 Move X20, [X31+80]
	110 Move X19, [X31+88]
	111 Move X22, [X31+64]
	112 Move X21, [X31+72]
	113 Move X30, [X31+48]
	114 Move D9, [X31+32]
	115 Move D8, [X31+40]
	116 Move D11, [X31+16]
	117 Move D10, [X31+24]
	118 Move D13, [X31+96]
	119 Move D12, [X31+104]
	120 Return X0
	121 Call 0x1B6FA1C

