Type: AnimalCompany.Ammo

Method: System.Void Awake()

Disassembly:
	0x01DA45D4 FDIV S2, S8, S2
	0x01DA45D8 B 0x1DA460C
	0x01DA45DC ADRP X21, 0x2634000
	0x01DA45E0 LDRB W8, [X21 + 0x783]
	0x01DA45E4 CBNZ W8, 0x1DA45FC
	0x01DA45E8 ADRP X0, 0x234F000
	0x01DA45EC LDR X0, [X0 + 0x5A0]
	0x01DA45F0 BL 0x1C16CF4
	0x01DA45F4 MOVZ W8, 0x1
	0x01DA45F8 STRB W8, [X21 + 0x783]
	0x01DA45FC LDR X8, [X20]
	0x01DA4600 LDR X8, [X8 + 0xB8]
	0x01DA4604 LDP S0, S1, [X8]
	0x01DA4608 LDR V2, [X8 + 0x8]
	0x01DA460C LDR X0, [X19 + 0x80]
	0x01DA4610 CBZ X0, 0x1DA4700
	0x01DA4614 FMOV S3, 9
	0x01DA4618 FMUL S2, S2, S3
	0x01DA461C FMUL S1, S1, S3
	0x01DA4620 FMUL S0, S0, S3
	0x01DA4624 MOV X1, X31
	0x01DA4628 BL 0x1D8F63C
	0x01DA462C MOV X0, X19
	0x01DA4630 BL 0x1DA3BEC
	0x01DA4634 SUB W1, W0, 0x1
	0x01DA4638 MOV X0, X19
	0x01DA463C BL 0x1DA3C4C
	0x01DA4640 LDR X0, [X19 + 0x38]
	0x01DA4644 FMOV S0, 1
	0x01DA4648 MOV X1, X31
	0x01DA464C BL 0x1E91E68
	0x01DA4650 AND X1, X0, 0x0
	0x01DA4654 MOV X0, X19
	0x01DA4658 BL 0x1DA3D0C
	0x01DA465C LDR X0, [X19 + 0x88]
	0x01DA4660 CBZ X0, 0x1DA4700
	0x01DA4664 MOV X1, X31
	0x01DA4668 BL 0x3C3F58C
	0x01DA466C LDR X0, [X19 + 0x88]
	0x01DA4670 CBZ X0, 0x1DA4700
	0x01DA4674 MOV X1, X31
	0x01DA4678 MOV V8.16B, V0.16B
	0x01DA467C MOV V9.16B, V1.16B
	0x01DA4680 MOV V10.16B, V2.16B
	0x01DA4684 BL 0x3C3DEB4
	0x01DA4688 MOV V4.16B, V0.16B
	0x01DA468C MOV V5.16B, V1.16B
	0x01DA4690 MOV V6.16B, V2.16B
	0x01DA4694 MOV V7.16B, V3.16B
	0x01DA4698 MOV W0, W31
	0x01DA469C MOV V0.16B, V8.16B
	0x01DA46A0 MOV V1.16B, V9.16B
	0x01DA46A4 MOV V2.16B, V10.16B
	0x01DA46A8 MOV V3.16B, V4.16B
	0x01DA46AC MOV V4.16B, V5.16B
	0x01DA46B0 MOV V5.16B, V6.16B
	0x01DA46B4 MOV V6.16B, V7.16B
	0x01DA46B8 MOV X1, X31
	0x01DA46BC BL 0x1E04F44
	0x01DA46C0 MOV X0, X19
	0x01DA46C4 BL 0x1DA478C
	0x01DA46C8 LDP X20, X19, [X31 + 0xD0]
	0x01DA46CC LDP X22, X21, [X31 + 0xC0]
	0x01DA46D0 LDP X24, X23, [X31 + 0xB0]
	0x01DA46D4 LDP X26, X25, [X31 + 0xA0]
	0x01DA46D8 LDR X30, [X31 + 0x90]
	0x01DA46DC LDP D9, D8, [X31 + 0x80]
	0x01DA46E0 LDP D11, D10, [X31 + 0x70]
	0x01DA46E4 LDP D13, D12, [X31 + 0x60]
	0x01DA46E8 ADD X31, X31, 0xE0
	0x01DA46EC RET
	0x01DA46F0 BL 0x1C16F20
	0x01DA46F4 BL 0x1C16F20
	0x01DA46F8 BL 0x1C16F20
	0x01DA46FC BL 0x1C16F20
	0x01DA4700 BL 0x1C16F20
	0x01DA4704 B 0x1DA4718
	0x01DA4708 B 0x1DA4718
	0x01DA470C B 0x1DA4718
	0x01DA4710 B 0x1DA4718
	0x01DA4714 B 0x1DA4718
	0x01DA4718 MOV X20, X0
	0x01DA471C CMP W1, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x2635000
	008 Move X20, 0x2350000
	009 Move W8, [X21+2690]
	010 Move X20, [X20+1496]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x2351000
	017 Move X0, [X0+3696]
	018 Call 0x1C17CF4
	019 Move X0, 0x2354000
	020 Move X0, [X0+736]
	021 Call 0x1C17CF4
	022 Move X0, 0x2353000
	023 Move X0, [X0+3000]
	024 Call 0x1C17CF4
	025 Move X0, 0x2350000
	026 Move X0, [X0+1496]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+2690], W8
	030 Move X0, [X20]
	031 Move X21, 0x2353000
	032 Move W8, [X0+224]
	033 Move X21, [X21+3000]
	034 Compare W8, 0
	035 JumpIfNotEqual {38}
	036 Call 0x1C17DFC
	037 Move X0, [X20]
	038 Move X8, [X0+184]
	039 Move X1, X31
	040 Move W0, [X8+16]
	041 Call LayerMask.op_Implicit, X0
	042 Move X8, [X20]
	043 Move W20, W0
	044 Move X1, X31
	045 Move X8, [X8+184]
	046 Move W8, [X8+20]
	047 Move X0, X8
	048 Call LayerMask.op_Implicit, X0
	049 Or W0, W0, W20
	050 Move X1, X31
	051 Call LayerMask.op_Implicit, X0
	052 Move [X19+40], W0
	053 Move X1, [X21]
	054 Move X0, X19
	055 Call 0x21A4894, X0
	056 Move [X19+32], X0
	057 Compare X0, 0
	058 JumpIfEqual {93}
	059 Move X23, 0x2351000
	060 Move X23, [X23+3696]
	061 Move X20, X0
	062 Move X21, [X0+464]
	063 Move X22, 0x2354000
	064 Move X0, [X23]
	065 Move X22, [X22+736]
	066 Call 0x1C17F10
	067 Move X2, [X22]
	068 Move X1, X19
	069 Move X3, X31
	070 Move X22, X0
	071 Call Action..ctor, X0, X1, X2
	072 Move X0, X21
	073 Move X1, X22
	074 Move X2, X31
	075 Call Delegate.Combine, X0, X1
	076 Compare X0, 0
	077 JumpIfEqual {85}
	078 Move X1, [X23]
	079 Move X8, [X0]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move [X20+464], X0
	082 Move X8, [X0]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Call 0x1C181E0
	085 Move [X20+464], X0
	086 Move X20, [X31+32]
	087 Move X19, [X31+40]
	088 Move X22, [X31+16]
	089 Move X21, [X31+24]
	090 Move X30, [X31+48]
	091 Move X23, [X31+56]
	092 Return 
	093 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x01DA4720 B.NE 0x1DA4754
	0x01DA4724 MOV X0, X20
	0x01DA4728 BL 0x3EB1AD0
	0x01DA472C LDR X21, [X0]
	0x01DA4730 BL 0x3EB1AE0
	0x01DA4734 ADRP X8, 0x2353000
	0x01DA4738 LDR X8, [X8 + 0x358]
	0x01DA473C ADD X0, X31, 0x30
	0x01DA4740 LDR X1, [X8]
	0x01DA4744 BL 0x2C0A83C
	0x01DA4748 CBZ X21, 0x1DA4494
	0x01DA474C MOV X0, X21
	0x01DA4750 BL 0x1C16F18
	0x01DA4754 MOV X21, X31
	0x01DA4758 B 0x1DA4760
	0x01DA475C MOV X20, X0
	0x01DA4760 ADRP X8, 0x2353000
	0x01DA4764 LDR X8, [X8 + 0x358]
	0x01DA4768 LDR X1, [X8]
	0x01DA476C ADD X0, X31, 0x30
	0x01DA4770 BL 0x2C0A83C
	0x01DA4774 CBNZ X21, 0x1DA4780
	0x01DA4778 MOV X0, X20
	0x01DA477C BL 0x1D2C690
	0x01DA4780 MOV X0, X21
	0x01DA4784 BL 0x1C16F18
	0x01DA4788 BL 0x1990590
	0x01DA478C STP X30, X21, [X31 - 0x20]!
	0x01DA4790 STP X20, X19, [X31 + 0x10]
	0x01DA4794 ADRP X20, 0x2634000
	0x01DA4798 LDRB W8, [X20 + 0xA88]
	0x01DA479C MOV X19, X0
	0x01DA47A0 TBNZ X8, 0x0, 0x1DA47C4
	0x01DA47A4 ADRP X0, 0x2352000
	0x01DA47A8 LDR X0, [X0 + 0xA78]
	0x01DA47AC BL 0x1C16CF4
	0x01DA47B0 ADRP X0, 0x2353000
	0x01DA47B4 LDR X0, [X0 + 0x388]
	0x01DA47B8 BL 0x1C16CF4
	0x01DA47BC MOVZ W8, 0x1
	0x01DA47C0 STRB W8, [X20 + 0xA88]
	0x01DA47C4 LDRB W8, [X19 + 0x58]
	0x01DA47C8 CBZ W8, 0x1DA4818
	0x01DA47CC STRB W31, [X19 + 0x58]
	0x01DA47D0 LDR X0, [X19 + 0xB0]
	0x01DA47D4 CBZ X0, 0x1DA4944
	0x01DA47D8 MOVZ W1, 0x1
	0x01DA47DC MOV X2, X31
	0x01DA47E0 BL 0x3C357B4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2635000
	008 Move W8, [X20+2691]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2351000
	015 Move X0, [X0+3696]
	016 Call 0x1C17CF4
	017 Move X0, 0x2354000
	018 Move X0, [X0+736]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2691], W8
	022 Move X22, [X19+32]
	023 Compare X22, 0
	024 JumpIfEqual {58}
	025 Move X23, 0x2351000
	026 Move X23, [X23+3696]
	027 Move X21, 0x2354000
	028 Move X20, [X22+464]
	029 Move X0, [X23]
	030 Move X21, [X21+736]
	031 Call 0x1C17F10
	032 Move X2, [X21]
	033 Move X1, X19
	034 Move X3, X31
	035 Move X21, X0
	036 Call Action..ctor, X0, X1, X2
	037 Move X0, X20
	038 Move X1, X21
	039 Move X2, X31
	040 Call Delegate.Remove, X0, X1
	041 Compare X0, 0
	042 JumpIfEqual {50}
	043 Move X1, [X23]
	044 Move X8, [X0]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move [X22+464], X0
	047 Move X8, [X0]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Call 0x1C181E0
	050 Move [X22+464], X0
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Return 
	058 Call 0x1C17F20

Method: System.Void HandleOnUse()

Disassembly:
	0x01DA47E4 LDR X0, [X19 + 0xB8]
	0x01DA47E8 MOVZ W8, 0x5
	0x01DA47EC STR W8, [X19 + 0xD8]
	0x01DA47F0 CBZ X0, 0x1DA4944
	0x01DA47F4 ADRP X8, 0xFFFFFFFFFED46000
	0x01DA47F8 LDR X2, [X19 + 0xC0]
	0x01DA47FC LDR X1, [X19 + 0x88]
	0x01DA4800 LDR V0, [X8 + 0x2C8]
	0x01DA4804 LDP X20, X19, [X31 + 0x10]
	0x01DA4808 FMOV S1, 20
	0x01DA480C MOV X3, X31
	0x01DA4810 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Ammo.CheckAndReload, X0
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {17}
	009 Move X0, [X19+32]
	010 Compare X0, 0
	011 JumpIfEqual {20}
	012 Move X1, X31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call GrabbableItem.RespawnOrDespawn, X0
	016 Return 
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return 
	020 Call 0x1C17F20

Method: System.Boolean CheckAndReload()

Disassembly:
	0x01DA4814 B 0x1DB04A8
	0x01DA4818 ADRP X21, 0x2352000
	0x01DA481C LDR X21, [X21 + 0xA78]
	0x01DA4820 LDR X0, [X21]
	0x01DA4824 LDR W8, [X0 + 0xE0]
	0x01DA4828 CBNZ W8, 0x1DA4830
	0x01DA482C BL 0x1C16DFC
	0x01DA4830 MOV X0, X19
	0x01DA4834 MOV X1, X31
	0x01DA4838 BL 0x1E77B08
	0x01DA483C LDR X0, [X19 + 0x38]
	0x01DA4840 CBZ X0, 0x1DA4944
	0x01DA4844 MOV X1, X31
	0x01DA4848 BL 0x1E9E538
	0x01DA484C CMP W0, 0x4
	0x01DA4850 B.NE 0x1DA4860
	0x01DA4854 LDP X20, X19, [X31 + 0x10]
	0x01DA4858 LDP X30, X21, [X31], #0x20
	0x01DA485C RET
	0x01DA4860 LDR X0, [X19 + 0x40]
	0x01DA4864 CBZ X0, 0x1DA4944
	0x01DA4868 MOV X1, X31
	0x01DA486C BL 0x1E94078
	0x01DA4870 TBNZ X0, 0x0, 0x1DA48AC
	0x01DA4874 LDR X0, [X21]
	0x01DA4878 LDR X19, [X19 + 0x40]
	0x01DA487C LDR W8, [X0 + 0xE0]
	0x01DA4880 CBNZ W8, 0x1DA4888
	0x01DA4884 BL 0x1C16DFC
	0x01DA4888 ADRP X8, 0x2353000
	0x01DA488C LDR X8, [X8 + 0x388]
	0x01DA4890 MOV X1, X19
	0x01DA4894 LDP X20, X19, [X31 + 0x10]
	0x01DA4898 MOVZ W2, 0x1
	0x01DA489C LDR X0, [X8]
	0x01DA48A0 MOV X3, X31
	0x01DA48A4 LDP X30, X21, [X31], #0x20
	0x01DA48A8 B 0x1E77B00
	0x01DA48AC LDR X8, [X19 + 0x38]
	0x01DA48B0 CBZ X8, 0x1DA4944
	0x01DA48B4 MOV W20, W0
	0x01DA48B8 LDR X0, [X8 + 0x50]
	0x01DA48BC CBZ X0, 0x1DA4944
	0x01DA48C0 MOV X1, X31
	0x01DA48C4 BL 0x1EC4D00
	0x01DA48C8 TBZ X0, 0x0, 0x1DA4938
	0x01DA48CC LDR X8, [X19 + 0x38]
	0x01DA48D0 CBZ X8, 0x1DA4944
	0x01DA48D4 LDR X0, [X8 + 0x50]
	0x01DA48D8 MOVZ W1, 0x8
	0x01DA48DC MOV X2, X31
	0x01DA48E0 BL 0x1ED9318
	0x01DA48E4 LDR X8, [X19 + 0x40]
	0x01DA48E8 CBZ X8, 0x1DA4944
	0x01DA48EC LDR X8, [X8 + 0x20]
	0x01DA48F0 MOV X21, X0
	0x01DA48F4 CBZ X8, 0x1DA4900
	0x01DA48F8 LDR W0, [X8]
	0x01DA48FC B 0x1DA4904
	0x01DA4900 MOV X0, X31
	0x01DA4904 LDR W1, [X19 + 0x68]
	0x01DA4908 MOVZ W2, 0x2
	0x01DA490C MOV X3, X31
	0x01DA4910 BL 0x1E9C23C
	0x01DA4914 STUR X0, [X21 + 0x1C]
	0x01DA4918 CBZ X21, 0x1DA4944
	0x01DA491C MOVZ W8, 0x40
	0x01DA4920 STR W8, [X21 + 0xC]
	0x01DA4924 LDR X0, [X19 + 0x38]
	0x01DA4928 CBZ X0, 0x1DA4944
	0x01DA492C MOV X1, X21
	0x01DA4930 MOV X2, X31
	0x01DA4934 BL 0x1EA1E24
	0x01DA4938 ANDS W31, W20, 0x7
	0x01DA493C B.NE 0x1DA47D0
	0x01DA4940 B 0x1DA4854
	0x01DA4944 BL 0x1C16F20
	0x01DA4948 STR X30, [X31 - 0x20]!
	0x01DA494C STP X20, X19, [X31 + 0x10]
	0x01DA4950 ADRP X20, 0x2634000
	0x01DA4954 LDRB W8, [X20 + 0xA89]
	0x01DA4958 MOV X19, X0
	0x01DA495C TBNZ X8, 0x0, 0x1DA498C
	0x01DA4960 ADRP X0, 0x2352000
	0x01DA4964 LDR X0, [X0 + 0xA78]
	0x01DA4968 BL 0x1C16CF4
	0x01DA496C ADRP X0, 0x234F000
	0x01DA4970 LDR X0, [X0 + 0x598]
	0x01DA4974 BL 0x1C16CF4
	0x01DA4978 ADRP X0, 0x2353000
	0x01DA497C LDR X0, [X0 + 0x390]
	0x01DA4980 BL 0x1C16CF4
	0x01DA4984 MOVZ W8, 0x1
	0x01DA4988 STRB W8, [X20 + 0xA89]
	0x01DA498C LDRB W8, [X19 + 0x58]
	0x01DA4990 CBZ W8, 0x1DA4A08
	0x01DA4994 STRB W31, [X19 + 0x58]
	0x01DA4998 ADRP X20, 0x234F000
	0x01DA499C LDR X20, [X20 + 0x598]
	0x01DA49A0 MOVZ W1, 0x2
	0x01DA49A4 MOV X0, X19
	0x01DA49A8 BL 0x1DA3C4C
	0x01DA49AC LDR X0, [X20]
	0x01DA49B0 LDR X20, [X19 + 0xA0]
	0x01DA49B4 LDR W8, [X0 + 0xE0]
	0x01DA49B8 CBNZ W8, 0x1DA49C0
	0x01DA49BC BL 0x1C16DFC
	0x01DA49C0 MOV X0, X20
	0x01DA49C4 MOV X1, X31
	0x01DA49C8 MOV X2, X31
	0x01DA49CC BL 0x3C354F8
	0x01DA49D0 TBZ X0, 0x0, 0x1DA4A44
	0x01DA49D4 LDR X20, [X19 + 0xA0]
	0x01DA49D8 MOV X0, X19
	0x01DA49DC MOV X1, X31
	0x01DA49E0 BL 0x3C32E90
	0x01DA49E4 CBZ X0, 0x1DA4B34
	0x01DA49E8 MOV X1, X31
	0x01DA49EC BL 0x3C3F58C
	0x01DA49F0 MOV X0, X20
	0x01DA49F4 LDP X20, X19, [X31 + 0x10]
	0x01DA49F8 FMOV S3, 1
	0x01DA49FC MOV X1, X31
	0x01DA4A00 LDR X30, [X31], #0x20
	0x01DA4A04 B 0x1DC15C4
	0x01DA4A08 ADRP X20, 0x2352000
	0x01DA4A0C LDR X20, [X20 + 0xA78]
	0x01DA4A10 LDR X0, [X20]
	0x01DA4A14 LDR W8, [X0 + 0xE0]
	0x01DA4A18 CBNZ W8, 0x1DA4A20
	0x01DA4A1C BL 0x1C16DFC
	0x01DA4A20 MOV X0, X19
	0x01DA4A24 MOV X1, X31
	0x01DA4A28 BL 0x1E77B08
	0x01DA4A2C LDR X0, [X19 + 0x38]
	0x01DA4A30 CBZ X0, 0x1DA4B34
	0x01DA4A34 MOV X1, X31
	0x01DA4A38 BL 0x1E9E538
	0x01DA4A3C CMP W0, 0x4
	0x01DA4A40 B.NE 0x1DA4A50
	0x01DA4A44 LDP X20, X19, [X31 + 0x10]
	0x01DA4A48 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-96], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X19, 0x2635000
	013 Move W8, [X19+2692]
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {39}
	019 Move X0, 0x2354000
	020 Move X0, [X0+744]
	021 Call 0x1C17CF4
	022 Move X0, 0x2353000
	023 Move X0, [X0+3944]
	024 Call 0x1C17CF4
	025 Move X0, 0x2353000
	026 Move X0, [X0+3952]
	027 Call 0x1C17CF4
	028 Move X0, 0x2354000
	029 Move X0, [X0+752]
	030 Call 0x1C17CF4
	031 Move X0, 0x2350000
	032 Move X0, [X0+1432]
	033 Call 0x1C17CF4
	034 Move X0, 0x2350000
	035 Move X0, [X0+1528]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X19+2692], W8
	039 Move X0, X20
	040 Move X1, X31
	041 Call Component.get_transform, X0
	042 Compare X0, 0
	043 JumpIfEqual {164}
	044 Move X19, 0x2350000
	045 Move X23, 0x2353000
	046 Move X21, 0x2354000
	047 Move X22, 0x2353000
	048 Move X19, [X19+1528]
	049 Move X23, [X23+3952]
	050 Move X21, [X21+744]
	051 Move X22, [X22+3944]
	052 Move X1, X31
	053 Call Transform.get_position, X0
	054 Move W0, [X20+40]
	055 Move X1, X31
	056 Move V8, V0
	057 Move V9, V1
	058 Move V10, V2
	059 Call LayerMask.op_Implicit, X0
	060 Move X8, [X19]
	061 Move W19, W0
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Move X0, X8
	066 Call 0x1C17DFC
	067 Move S3, 0.25
	068 Move V0, V8
	069 Move V1, V9
	070 Move V2, V10
	071 Move W0, W19
	072 Move X1, X31
	073 Call Physics.OverlapSphere, X0, V0, X1
	074 Move X8, [X23]
	075 Move X19, X0
	076 Move X0, X8
	077 Call 0x1C17F10
	078 Move X2, [X21]
	079 Move X1, X20
	080 Move X3, X31
	081 Move X21, X0
	082 Call Comparison`1<Object>..ctor, X0, X1, X2
	083 Move X2, [X22]
	084 Move X0, X19
	085 Move X1, X21
	086 Call 0x2158D70, X0, X1
	087 Compare X19, 0
	088 JumpIfEqual {164}
	089 Move W8, [X19+24]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 NotImplemented "Instruction CSET not yet implemented."
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X24, 0x2350000
	094 Move X25, 0x2354000
	095 Move X24, [X24+1432]
	096 Move X25, [X25+752]
	097 Move W23, W31
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Add X8, X19, W23
	100 Move X20, [X8+32]
	101 Compare X20, 0
	102 JumpIfEqual {164}
	103 Move X0, X20
	104 Move X1, X31
	105 Call Collider.get_attachedRigidbody, X0
	106 Move X8, [X24]
	107 Move X21, X0
	108 Move W9, [X8+224]
	109 Compare W9, 0
	110 JumpIfNotEqual {113}
	111 Move X0, X8
	112 Call 0x1C17DFC
	113 Move X0, X21
	114 Move X1, X31
	115 Move X2, X31
	116 Call Object.op_Inequality, X0, X1
	117 Move X21, X31
	118 Move TEMP, X0
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfNotEqual {130}
	122 Move X0, X20
	123 Move X1, X31
	124 Call Collider.get_attachedRigidbody, X0
	125 Compare X0, 0
	126 JumpIfEqual {164}
	127 Move X1, [X25]
	128 Call 0x21A4894, X0
	129 Move X21, X0
	130 Move X0, [X24]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {135}
	134 Call 0x1C17DFC
	135 Move X0, X21
	136 Move X1, X31
	137 Move X2, X31
	138 Call Object.op_Inequality, X0, X1
	139 Move TEMP, X0
	140 And TEMP, TEMP, 1
	141 Compare TEMP, 1
	142 JumpIfEqual {147}
	143 Move W8, [X19+24]
	144 Add W23, W23, 1
	145 NotImplemented "Instruction CMP not yet implemented."
	146 NotImplemented "Instruction CSET not yet implemented."
	147 Compare X21, 0
	148 JumpIfEqual {164}
	149 Move X0, X21
	150 Call Shotgun.RPC_Reload, X0
	151 And W0, W22, 1
	152 Move X20, [X31+80]
	153 Move X19, [X31+88]
	154 Move X22, [X31+64]
	155 Move X21, [X31+72]
	156 Move X24, [X31+48]
	157 Move X23, [X31+56]
	158 Move X30, [X31+32]
	159 Move X25, [X31+40]
	160 Move D9, [X31+16]
	161 Move D8, [X31+24]
	162 Move V10, [X31+96]
	163 Return X0
	164 Call 0x1C17F20
	165 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x01DA4A50 LDR X0, [X19 + 0x40]
	0x01DA4A54 CBZ X0, 0x1DA4B34

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

Method: System.Int32 <CheckAndReload>b__5_0(UnityEngine.Collider a, UnityEngine.Collider b)

Disassembly:
	0x01DA4A58 MOV X1, X31
	0x01DA4A5C BL 0x1E94078
	0x01DA4A60 ANDS W31, W0, 0x7
	0x01DA4A64 B.EQ 0x1DA4ABC
	0x01DA4A68 TBNZ X0, 0x0, 0x1DA4998
	0x01DA4A6C LDR X8, [X19 + 0x38]
	0x01DA4A70 CBZ X8, 0x1DA4B34
	0x01DA4A74 LDR X0, [X8 + 0x50]
	0x01DA4A78 CBZ X0, 0x1DA4B34
	0x01DA4A7C MOV X1, X31
	0x01DA4A80 BL 0x1EC4D00
	0x01DA4A84 TBZ X0, 0x0, 0x1DA4A44
	0x01DA4A88 LDR X8, [X19 + 0x38]
	0x01DA4A8C CBZ X8, 0x1DA4B34
	0x01DA4A90 LDR X0, [X8 + 0x50]
	0x01DA4A94 MOVZ W1, 0x8
	0x01DA4A98 MOV X2, X31
	0x01DA4A9C BL 0x1ED9318
	0x01DA4AA0 LDR X8, [X19 + 0x40]
	0x01DA4AA4 CBZ X8, 0x1DA4B34
	0x01DA4AA8 LDR X8, [X8 + 0x20]
	0x01DA4AAC MOV X20, X0
	0x01DA4AB0 CBZ X8, 0x1DA4AF4
	0x01DA4AB4 LDR W0, [X8]
	0x01DA4AB8 B 0x1DA4AF8
	0x01DA4ABC LDR X0, [X20]
	0x01DA4AC0 LDR X19, [X19 + 0x40]
	0x01DA4AC4 LDR W8, [X0 + 0xE0]
	0x01DA4AC8 CBNZ W8, 0x1DA4AD0
	0x01DA4ACC BL 0x1C16DFC
	0x01DA4AD0 ADRP X8, 0x2353000
	0x01DA4AD4 LDR X8, [X8 + 0x390]
	0x01DA4AD8 MOV X1, X19
	0x01DA4ADC LDP X20, X19, [X31 + 0x10]
	0x01DA4AE0 MOVZ W2, 0x7
	0x01DA4AE4 LDR X0, [X8]
	0x01DA4AE8 MOV X3, X31
	0x01DA4AEC LDR X30, [X31], #0x20
	0x01DA4AF0 B 0x1E77B00
	0x01DA4AF4 MOV X0, X31
	0x01DA4AF8 LDR W1, [X19 + 0x68]
	0x01DA4AFC MOVZ W2, 0x3
	0x01DA4B00 MOV X3, X31
	0x01DA4B04 BL 0x1E9C23C
	0x01DA4B08 STUR X0, [X20 + 0x1C]
	0x01DA4B0C CBZ X20, 0x1DA4B34
	0x01DA4B10 MOVZ W8, 0x40
	0x01DA4B14 STR W8, [X20 + 0xC]
	0x01DA4B18 LDR X0, [X19 + 0x38]
	0x01DA4B1C CBZ X0, 0x1DA4B34
	0x01DA4B20 MOV X1, X20
	0x01DA4B24 LDP X20, X19, [X31 + 0x10]
	0x01DA4B28 MOV X2, X31
	0x01DA4B2C LDR X30, [X31], #0x20
	0x01DA4B30 B 0x1EA1E24
	0x01DA4B34 BL 0x1C16F20
	0x01DA4B38 STR X30, [X31 - 0x10]!
	0x01DA4B3C LDR W8, [X0 + 0xD8]
	0x01DA4B40 SUBS W8, W8, 0x1
	0x01DA4B44 B.LT 0x1DA4B68
	0x01DA4B48 STR W8, [X0 + 0xD8]
	0x01DA4B4C B.NE 0x1DA4B68
	0x01DA4B50 LDR X0, [X0 + 0xB0]
	0x01DA4B54 CBZ X0, 0x1DA4B70
	0x01DA4B58 MOV W1, W31
	0x01DA4B5C MOV X2, X31
	0x01DA4B60 LDR X30, [X31], #0x10
	0x01DA4B64 B 0x3C357B4
	0x01DA4B68 LDR X30, [X31], #0x10
	0x01DA4B6C RET
	0x01DA4B70 BL 0x1C16F20
	0x01DA4B74 SUB X31, X31, 0xC0
	0x01DA4B78 STP D15, D14, [X31 + 0x50]
	0x01DA4B7C STP D13, D12, [X31 + 0x60]
	0x01DA4B80 STP D11, D10, [X31 + 0x70]
	0x01DA4B84 STP D9, D8, [X31 + 0x80]
	0x01DA4B88 STR X30, [X31 + 0x90]
	0x01DA4B8C STP X22, X21, [X31 + 0xA0]
	0x01DA4B90 STP X20, X19, [X31 + 0xB0]
	0x01DA4B94 ADRP X22, 0x2634000
	0x01DA4B98 LDRB W8, [X22 + 0xA8B]
	0x01DA4B9C MOV X21, X2
	0x01DA4BA0 MOV X19, X1
	0x01DA4BA4 MOV X20, X0
	0x01DA4BA8 TBNZ X8, 0x0, 0x1DA4C20
	0x01DA4BAC ADRP X0, 0x2353000
	0x01DA4BB0 LDR X0, [X0 + 0x398]
	0x01DA4BB4 BL 0x1C16CF4
	0x01DA4BB8 ADRP X0, 0x234F000
	0x01DA4BBC LDR X0, [X0 + 0xA28]
	0x01DA4BC0 BL 0x1C16CF4
	0x01DA4BC4 ADRP X0, 0x2353000
	0x01DA4BC8 LDR X0, [X0 + 0x3A0]
	0x01DA4BCC BL 0x1C16CF4
	0x01DA4BD0 ADRP X0, 0x2353000
	0x01DA4BD4 LDR X0, [X0 + 0x3A8]
	0x01DA4BD8 BL 0x1C16CF4
	0x01DA4BDC ADRP X0, 0x2353000
	0x01DA4BE0 LDR X0, [X0 + 0x3B0]
	0x01DA4BE4 BL 0x1C16CF4
	0x01DA4BE8 ADRP X0, 0x2353000

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Compare X1, 0
	013 JumpIfEqual {121}
	014 Move X19, X0
	015 Move X0, X1
	016 Move X1, X31
	017 Move X20, X2
	018 Call Component.get_transform, X0
	019 Compare X0, 0
	020 JumpIfEqual {121}
	021 Move X1, X31
	022 Call Transform.get_position, X0
	023 Move X0, X19
	024 Move X1, X31
	025 Move V8, V0
	026 Move V9, V1
	027 Move V10, V2
	028 Call Component.get_transform, X0
	029 Compare X0, 0
	030 JumpIfEqual {121}
	031 Move X1, X31
	032 Call Transform.get_position, X0
	033 Move X21, 0x2635000
	034 Move W8, [X21+2140]
	035 Move V11, V0
	036 Move V12, V1
	037 Move V13, V2
	038 Compare W8, 0
	039 JumpIfNotEqual {45}
	040 Move X0, 0x2350000
	041 Move X0, [X0+1448]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X21+2140], W8
	045 Move X22, 0x2350000
	046 Move X22, [X22+1448]
	047 Subtract S11, S8, S11
	048 Subtract S9, S9, S12
	049 Subtract S8, S10, S13
	050 Move X0, [X22]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Multiply S0, S11, S11
	056 Multiply S1, S9, S9
	057 Add S0, S0, S1
	058 Multiply S1, S8, S8
	059 Add S0, S1, S0
	060 NotImplemented "Instruction FSQRT not yet implemented."
	061 Move [X31+60], S0
	062 Compare X20, 0
	063 JumpIfEqual {121}
	064 Move X0, X20
	065 Move X1, X31
	066 Call Component.get_transform, X0
	067 Compare X0, 0
	068 JumpIfEqual {121}
	069 Move X1, X31
	070 Call Transform.get_position, X0
	071 Move X0, X19
	072 Move X1, X31
	073 Move V8, V0
	074 Move V9, V1
	075 Move V10, V2
	076 Call Component.get_transform, X0
	077 Compare X0, 0
	078 JumpIfEqual {121}
	079 Move X1, X31
	080 Call Transform.get_position, X0
	081 Move W8, [X21+2140]
	082 Move V11, V0
	083 Move V12, V1
	084 Move V13, V2
	085 Compare W8, 0
	086 JumpIfNotEqual {92}
	087 Move X0, 0x2350000
	088 Move X0, [X0+1448]
	089 Call 0x1C17CF4
	090 Move W8, 1
	091 Move [X21+2140], W8
	092 Move X0, [X22]
	093 Subtract S11, S8, S11
	094 Subtract S9, S9, S12
	095 Subtract S8, S10, S13
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Multiply S0, S11, S11
	101 Multiply S1, S9, S9
	102 Add S0, S0, S1
	103 Multiply S1, S8, S8
	104 Add S0, S1, S0
	105 NotImplemented "Instruction FSQRT not yet implemented."
	106 Add X0, X31, 60
	107 Move X1, X31
	108 Call Single.CompareTo, X0, V0
	109 Move X20, [X31+80]
	110 Move X19, [X31+88]
	111 Move X22, [X31+64]
	112 Move X21, [X31+72]
	113 Move X30, [X31+48]
	114 Move D9, [X31+32]
	115 Move D8, [X31+40]
	116 Move D11, [X31+16]
	117 Move D10, [X31+24]
	118 Move D13, [X31+96]
	119 Move D12, [X31+104]
	120 Return X0
	121 Call 0x1C17F20

