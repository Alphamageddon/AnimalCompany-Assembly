Type: AnimalCompany.ArmstrongController

Method: AnimalCompany.ArmstrongController/Phase get_phase()

Disassembly:
	0x01DE2ADC LDR V10, [X31], #0x30
	0x01DE2AE0 B 0x1DE2B88
	0x01DE2AE4 MOV X0, X19
	0x01DE2AE8 MOV X1, X31
	0x01DE2AEC BL 0x1DEA4E0
	0x01DE2AF0 MOV X0, X19
	0x01DE2AF4 MOV X1, X31
	0x01DE2AF8 MOV V8.16B, V0.16B
	0x01DE2AFC BL 0x1DEA4B8
	0x01DE2B00 FADD S0, S8, S0
	0x01DE2B04 MOV X0, X19
	0x01DE2B08 MOV X1, X31
	0x01DE2B0C BL 0x1DEA540
	0x01DE2B10 MOV X0, X19
	0x01DE2B14 MOV X1, X31
	0x01DE2B18 BL 0x1DEA4E0
	0x01DE2B1C LDR X0, [X19 + 0xC0]
	0x01DE2B20 CBZ X0, 0x1DE2B84
	0x01DE2B24 LDR V1, [X0 + 0x68]
	0x01DE2B28 FCMP S0, S1
	0x01DE2B2C B.GE 0x1DE2B4C
	0x01DE2B30 MOV X1, X31
	0x01DE2B34 BL 0x1DEA4D4
	0x01DE2B38 FCMP S9, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+60]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2312000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2317000
	016 Move X0, [X0+3216]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2317000
	023 Move X0, [X0+3224]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_phase(AnimalCompany.ArmstrongController/Phase value)

Disassembly:
	0x01DE2B3C B.PL 0x1DE2B54
	0x01DE2B40 MOV X0, X19
	0x01DE2B44 BL 0x1DE3118
	0x01DE2B48 B 0x1DE2B54
	0x01DE2B4C MOV X0, X19
	0x01DE2B50 BL 0x1DE1F78
	0x01DE2B54 LDR X20, [X19 + 0xE8]
	0x01DE2B58 MOV X0, X19
	0x01DE2B5C MOV X1, X31
	0x01DE2B60 BL 0x1DEA5A0
	0x01DE2B64 CBZ X20, 0x1DE2B84
	0x01DE2B68 MOV X0, X20
	0x01DE2B6C LDP X20, X19, [X31 + 0x20]
	0x01DE2B70 LDR X30, [X31 + 0x18]
	0x01DE2B74 LDP D9, D8, [X31 + 0x8]
	0x01DE2B78 MOV X1, X31
	0x01DE2B7C LDR V10, [X31], #0x30
	0x01DE2B80 B 0x3BE13F8
	0x01DE2B84 BL 0x1C16F20
	0x01DE2B88 SUB X31, X31, 0xE0
	0x01DE2B8C STR D14, [X31 + 0x40]
	0x01DE2B90 STP D13, D12, [X31 + 0x50]
	0x01DE2B94 STP D11, D10, [X31 + 0x60]
	0x01DE2B98 STP D9, D8, [X31 + 0x70]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+60], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2312000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2317000
	016 Move X0, [X0+3216]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2317000
	023 Move X0, [X0+3232]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get__timeToHoldAfterPunch()

Disassembly:
	0x01DE2B9C STP X29, X30, [X31 + 0x80]
	0x01DE2BA0 STP X28, X27, [X31 + 0x90]
	0x01DE2BA4 STP X26, X25, [X31 + 0xA0]
	0x01DE2BA8 STP X24, X23, [X31 + 0xB0]
	0x01DE2BAC STP X22, X21, [X31 + 0xC0]
	0x01DE2BB0 STP X20, X19, [X31 + 0xD0]
	0x01DE2BB4 ADRP X21, 0x25F6000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+192]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move V0, [X8+40]
	006 Move X30, [X31+16]
	007 Return V0
	008 Call 0x1C17F20

Method: UnityEngine.Vector3 get__attackSphereCenter()

Disassembly:
	0x01DE2BB8 LDRB W8, [X21 + 0xC8D]
	0x01DE2BBC MOV X19, X1
	0x01DE2BC0 MOV X20, X0
	0x01DE2BC4 TBNZ X8, 0x0, 0x1DE2C18
	0x01DE2BC8 ADRP X0, 0x2316000
	0x01DE2BCC LDR X0, [X0 + 0xC20]
	0x01DE2BD0 BL 0x1C16CF4
	0x01DE2BD4 ADRP X0, 0x2316000
	0x01DE2BD8 LDR X0, [X0 + 0xC28]
	0x01DE2BDC BL 0x1C16CF4
	0x01DE2BE0 ADRP X0, 0x2316000
	0x01DE2BE4 LDR X0, [X0 + 0xC30]
	0x01DE2BE8 BL 0x1C16CF4
	0x01DE2BEC ADRP X0, 0x2316000
	0x01DE2BF0 LDR X0, [X0 + 0xC38]
	0x01DE2BF4 BL 0x1C16CF4
	0x01DE2BF8 ADRP X0, 0x2316000
	0x01DE2BFC LDR X0, [X0 + 0xC40]
	0x01DE2C00 BL 0x1C16CF4
	0x01DE2C04 ADRP X0, 0x2311000
	0x01DE2C08 LDR X0, [X0 + 0x598]
	0x01DE2C0C BL 0x1C16CF4
	0x01DE2C10 MOVZ W8, 0x1
	0x01DE2C14 STRB W8, [X21 + 0xC8D]
	0x01DE2C18 MOVZ W1, 0x5
	0x01DE2C1C MOV X0, X20
	0x01DE2C20 STP X31, X31, [X31 + 0x20]
	0x01DE2C24 STR X31, [X31 + 0x30]
	0x01DE2C28 BL 0x1DE1B3C
	0x01DE2C2C LDR X9, [X20 + 0xC0]
	0x01DE2C30 STR W31, [X20 + 0x1AC]
	0x01DE2C34 CBZ X9, 0x1DE3080
	0x01DE2C38 LDR X8, [X9 + 0x38]
	0x01DE2C3C CBZ X8, 0x1DE3080
	0x01DE2C40 LDR W10, [X8 + 0x18]
	0x01DE2C44 CBZ W10, 0x1DE3084
	0x01DE2C48 LDR X10, [X9 + 0x58]
	0x01DE2C4C CBZ X10, 0x1DE3080
	0x01DE2C50 LDR W11, [X10 + 0x18]
	0x01DE2C54 CBZ W11, 0x1DE3084
	0x01DE2C58 LDR X9, [X9 + 0x60]
	0x01DE2C5C CBZ X9, 0x1DE3080
	0x01DE2C60 LDR W11, [X9 + 0x18]
	0x01DE2C64 CBZ W11, 0x1DE3084
	0x01DE2C68 LDR X11, [X20]
	0x01DE2C6C LDR V0, [X8 + 0x20]
	0x01DE2C70 LDR V1, [X10 + 0x20]
	0x01DE2C74 LDR V2, [X9 + 0x20]
	0x01DE2C78 LDR X8, [X11 + 0x2C8]
	0x01DE2C7C LDR X2, [X11 + 0x2D0]
	0x01DE2C80 MOVZ W1, 0x1
	0x01DE2C84 MOV X0, X20
	0x01DE2C88 BLR X8
	0x01DE2C8C CBZ X19, 0x1DE3080
	0x01DE2C90 MOV X0, X19
	0x01DE2C94 MOV X1, X31
	0x01DE2C98 BL 0x3C32E90
	0x01DE2C9C CBZ X0, 0x1DE3080
	0x01DE2CA0 MOV X1, X31
	0x01DE2CA4 BL 0x3C3F58C
	0x01DE2CA8 MOV X0, X31
	0x01DE2CAC BL 0x1DC0890
	0x01DE2CB0 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], D9
	003 Move [X31+88], D8
	004 Move [X31+96], X30
	005 Move [X31+104], X19
	006 Move X19, X0
	007 Move X0, [X0+208]
	008 Compare X0, 0
	009 JumpIfEqual {74}
	010 Move X1, X31
	011 Call Transform.get_position, X0
	012 Move X0, [X19+208]
	013 Move [X31+64], D0
	014 Move [X31+48], D1
	015 Compare X0, 0
	016 JumpIfEqual {74}
	017 Move X1, X31
	018 Move V8, V2
	019 Call Transform.get_forward, X0
	020 Move X8, [X19+192]
	021 Compare X8, 0
	022 JumpIfEqual {74}
	023 Move X19, 0x25F7000
	024 Move W9, [X19+1926]
	025 Move V6, [X8+76]
	026 Move V9, V2
	027 Compare W9, 0
	028 JumpIfNotEqual {40}
	029 Move X0, 0x2312000
	030 Move X0, [X0+1440]
	031 Move [X31+16], V6
	032 Move [X31+24], V0
	033 Move [X31], V1
	034 Call 0x1C17CF4
	035 Move V1, [X31]
	036 Move V6, [X31+16]
	037 Move V0, [X31+2]
	038 Move W8, 1
	039 Move [X19+1926], W8
	040 Move W8, 0x999A
	041 NotImplemented "Instruction MOVK not yet implemented."
	042 Move V0.S[1], V1.S[0]
	043 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	044 Move X8, -19886080
	045 Move V2, [X8+1100]
	046 Move X8, 0x2312000
	047 Move X8, [X8+1440]
	048 Move V3, [X31+48]
	049 Move V7, [X31+64]
	050 Multiply S4, S9, S6
	051 Move X30, [X31+96]
	052 Move X19, [X31+104]
	053 Move X8, [X8]
	054 Move V7.S[1], V3.S[0]
	055 Move S3, 0.5
	056 Multiply S5, S4, S3
	057 Move X8, [X8+184]
	058 NotImplemented "Instruction INVALID not yet implemented."
	059 NotImplemented "Instruction MOVI not yet implemented."
	060 Add S5, S8, S5
	061 Move V0, [X8+24]
	062 Move V6, [X8+32]
	063 NotImplemented "Instruction INVALID not yet implemented."
	064 Move D9, [X31+80]
	065 Move D8, [X31+88]
	066 Add V3, V7, V3
	067 NotImplemented "Instruction INVALID not yet implemented."
	068 Multiply S1, S6, S2
	069 Add V0, V3, V0
	070 Subtract S2, S5, S1
	071 Move S1, V0.S[1]
	072 Add X31, X31, 112
	073 Return X0
	074 Call 0x1C17F20

Method: System.Single get__attackSphereRadius()

Disassembly:
	0x01DE2CB4 MOV X1, X31
	0x01DE2CB8 MOV V8.16B, V0.16B
	0x01DE2CBC MOV V9.16B, V1.16B
	0x01DE2CC0 MOV V10.16B, V2.16B
	0x01DE2CC4 BL 0x3C32E90
	0x01DE2CC8 CBZ X0, 0x1DE3080
	0x01DE2CCC MOV X1, X31
	0x01DE2CD0 BL 0x3C3F58C
	0x01DE2CD4 MOV X0, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+192]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move V0, [X8+76]
	006 Move S1, 0.5
	007 Multiply S0, S0, S1
	008 Move X30, [X31+16]
	009 Return V0
	010 Call 0x1C17F20

Method: System.Void HandlePhaseChanged()

Disassembly:
	0x01DE2CD8 BL 0x1DC0890
	0x01DE2CDC ADRP X24, 0x25F6000
	0x01DE2CE0 LDRB W8, [X24 + 0x785]
	0x01DE2CE4 MOV V11.16B, V0.16B
	0x01DE2CE8 MOV V12.16B, V1.16B
	0x01DE2CEC MOV V13.16B, V2.16B
	0x01DE2CF0 CBNZ W8, 0x1DE2D08
	0x01DE2CF4 ADRP X0, 0x2311000
	0x01DE2CF8 LDR X0, [X0 + 0x5A8]
	0x01DE2CFC BL 0x1C16CF4
	0x01DE2D00 MOVZ W8, 0x1
	0x01DE2D04 STRB W8, [X24 + 0x785]
	0x01DE2D08 ADRP X21, 0x2311000
	0x01DE2D0C LDR X21, [X21 + 0x5A8]
	0x01DE2D10 FSUB S8, S8, S11
	0x01DE2D14 FSUB S9, S9, S12
	0x01DE2D18 FSUB S10, S10, S13
	0x01DE2D1C LDR X0, [X21]
	0x01DE2D20 LDR W8, [X0 + 0xE0]
	0x01DE2D24 CBNZ W8, 0x1DE2D2C
	0x01DE2D28 BL 0x1C16DFC
	0x01DE2D2C ADRP X8, 0xFFFFFFFFFED08000
	0x01DE2D30 FMUL S0, S8, S8
	0x01DE2D34 FMUL S1, S9, S9
	0x01DE2D38 LDR V14, [X8 + 0x17C]
	0x01DE2D3C ADRP X22, 0x2311000
	0x01DE2D40 FMUL S2, S10, S10
	0x01DE2D44 FADD S0, S0, S1
	0x01DE2D48 LDR X22, [X22 + 0x5A0]
	0x01DE2D4C FADD S0, S2, S0
	0x01DE2D50 FSQRT S0, S0
	0x01DE2D54 FCMP S0, S14
	0x01DE2D58 ADRP X25, 0x25F6000
	0x01DE2D5C B.LE 0x1DE2D70
	0x01DE2D60 FDIV S8, S8, S0
	0x01DE2D64 FDIV S9, S9, S0
	0x01DE2D68 FDIV S10, S10, S0
	0x01DE2D6C B 0x1DE2D9C
	0x01DE2D70 LDRB W8, [X25 + 0x783]
	0x01DE2D74 CBNZ W8, 0x1DE2D8C
	0x01DE2D78 ADRP X0, 0x2311000
	0x01DE2D7C LDR X0, [X0 + 0x5A0]
	0x01DE2D80 BL 0x1C16CF4
	0x01DE2D84 MOVZ W8, 0x1
	0x01DE2D88 STRB W8, [X25 + 0x783]
	0x01DE2D8C LDR X8, [X22]
	0x01DE2D90 LDR X8, [X8 + 0xB8]
	0x01DE2D94 LDP S8, S9, [X8]
	0x01DE2D98 LDR V10, [X8 + 0x8]
	0x01DE2D9C MOV X0, X20
	0x01DE2DA0 MOV X1, X31
	0x01DE2DA4 BL 0x3C32E90
	0x01DE2DA8 ADRP X26, 0x25F6000
	0x01DE2DAC LDRB W8, [X26 + 0x786]
	0x01DE2DB0 MOV X23, X0
	0x01DE2DB4 CBNZ W8, 0x1DE2DCC
	0x01DE2DB8 ADRP X0, 0x2311000
	0x01DE2DBC LDR X0, [X0 + 0x5A0]
	0x01DE2DC0 BL 0x1C16CF4
	0x01DE2DC4 MOVZ W8, 0x1
	0x01DE2DC8 STRB W8, [X26 + 0x786]
	0x01DE2DCC LDR X8, [X22]
	0x01DE2DD0 MOV V0.16B, V8.16B
	0x01DE2DD4 MOV V1.16B, V9.16B
	0x01DE2DD8 MOV V2.16B, V10.16B
	0x01DE2DDC LDR X8, [X8 + 0xB8]
	0x01DE2DE0 MOV X0, X31
	0x01DE2DE4 LDP S3, S4, [X8 + 0x18]
	0x01DE2DE8 LDR V5, [X8 + 0x20]
	0x01DE2DEC BL 0x3C2A810
	0x01DE2DF0 CBZ X23, 0x1DE3080
	0x01DE2DF4 MOV X0, X23
	0x01DE2DF8 MOV X1, X31
	0x01DE2DFC BL 0x3C3F7AC
	0x01DE2E00 LDR X8, [X20 + 0xC0]
	0x01DE2E04 CBZ X8, 0x1DE3080
	0x01DE2E08 LDR X23, [X8 + 0xB0]
	0x01DE2E0C MOV X0, X20
	0x01DE2E10 MOV X1, X31
	0x01DE2E14 BL 0x3C32E90
	0x01DE2E18 CBZ X0, 0x1DE3080
	0x01DE2E1C MOV X1, X31
	0x01DE2E20 BL 0x3C3F58C
	0x01DE2E24 FMOV S3, 1
	0x01DE2E28 MOV X0, X23
	0x01DE2E2C MOV X1, X31
	0x01DE2E30 BL 0x1DC15C4
	0x01DE2E34 MOV X0, X20
	0x01DE2E38 BL 0x1DE1BB8
	0x01DE2E3C LDR X8, [X20 + 0xC0]
	0x01DE2E40 CBZ X8, 0x1DE3080
	0x01DE2E44 ADRP X9, 0x2316000
	0x01DE2E48 LDR X9, [X9 + 0xC40]
	0x01DE2E4C MOV V8.16B, V0.16B
	0x01DE2E50 LDR V0, [X8 + 0x4C]
	0x01DE2E54 MOV V9.16B, V1.16B
	0x01DE2E58 LDR X0, [X9]
	0x01DE2E5C FMOV S1, 0.5
	0x01DE2E60 MOV V10.16B, V2.16B
	0x01DE2E64 FMUL S11, S0, S1
	0x01DE2E68 LDR W8, [X0 + 0xE0]
	0x01DE2E6C CBNZ W8, 0x1DE2E74
	0x01DE2E70 BL 0x1C16DFC
	0x01DE2E74 MOV X0, X20
	0x01DE2E78 MOV V0.16B, V8.16B
	0x01DE2E7C MOV V1.16B, V9.16B
	0x01DE2E80 MOV V2.16B, V10.16B
	0x01DE2E84 MOV V3.16B, V11.16B
	0x01DE2E88 MOV X1, X31
	0x01DE2E8C BL 0x1DEFBA0
	0x01DE2E90 CBZ X0, 0x1DE3080
	0x01DE2E94 ADRP X8, 0x2316000
	0x01DE2E98 LDR X8, [X8 + 0xC38]
	0x01DE2E9C ADRP X27, 0x2316000
	0x01DE2EA0 ADRP X28, 0x2311000
	0x01DE2EA4 ADRP X26, 0x2316000
	0x01DE2EA8 LDR X1, [X8]
	0x01DE2EAC LDR X27, [X27 + 0xC28]
	0x01DE2EB0 LDR X28, [X28 + 0x598]
	0x01DE2EB4 LDR X26, [X26 + 0xC20]
	0x01DE2EB8 ADD X8, X31, 0x8
	0x01DE2EBC BL 0x301CB58
	0x01DE2EC0 LDUR V0, [X31 + 0x8]
	0x01DE2EC4 LDR X8, [X31 + 0x18]
	0x01DE2EC8 MOVZ W29, 0x1
	0x01DE2ECC STR V0, [X31 + 0x2]
	0x01DE2ED0 STR X8, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call ArmstrongController.get_phase, X0
	005 Subtract W8, W0, 1
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X9, -19611648
	008 Add X9, X9, 2383
	009 NotImplemented "Instruction ADR not yet implemented."
	010 Move W11, [X9]
	011 Add X10, X10, X11
	012 CallNoReturn X10
	013 Move X8, [X19+192]
	014 Compare X8, 0
	015 JumpIfEqual {149}
	016 Move X8, [X8+48]
	017 Compare X8, 0
	018 JumpIfEqual {149}
	019 Move W9, [X8+24]
	020 Compare W9, 0
	021 JumpIfEqual {150}
	022 Move X0, [X19+200]
	023 Compare X0, 0
	024 JumpIfEqual {149}
	025 Move X9, [X0]
	026 Move V0, [X8+32]
	027 Move X8, -19886080
	028 Move V1, [X8+192]
	029 Move X8, [X9+488]
	030 Move X1, [X9+496]
	031 NotImplemented "Instruction FDIV not yet implemented."
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X8, [X19+432]
	034 Compare X8, 0
	035 JumpIfEqual {149}
	036 Move W10, 0xCCCD
	037 Move W9, 1
	038 NotImplemented "Instruction MOVK not yet implemented."
	039 Move [X8+169], W9
	040 Move [X8+172], W10
	041 Move X8, [X19+192]
	042 Compare X8, 0
	043 JumpIfEqual {149}
	044 Move X8, [X8+56]
	045 Compare X8, 0
	046 JumpIfEqual {149}
	047 Move W9, [X8+24]
	048 Compare W9, 0
	049 JumpIfEqual {150}
	050 Move X0, [X19+200]
	051 Compare X0, 0
	052 JumpIfEqual {149}
	053 Move X9, [X0]
	054 Move V0, [X8+32]
	055 Move X8, -19886080
	056 Move V1, [X8+192]
	057 Move X8, [X9+504]
	058 Move X1, [X9+512]
	059 NotImplemented "Instruction FDIV not yet implemented."
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X0, [X19+432]
	062 Compare X0, 0
	063 JumpIfEqual {149}
	064 Move X8, -19886080
	065 Move V0, [X8+860]
	066 Move W1, W31
	067 Call ArmstrongView.SetHeadMoving, X0, X1, V0
	068 Move X8, [X19+432]
	069 Compare X8, 0
	070 JumpIfNotEqual {98}
	071 Move X8, [X19+192]
	072 Compare X8, 0
	073 JumpIfEqual {149}
	074 Move X8, [X8+56]
	075 Compare X8, 0
	076 JumpIfEqual {149}
	077 Move W9, [X8+24]
	078 Compare W9, 0
	079 JumpIfEqual {150}
	080 Move X0, [X19+200]
	081 Compare X0, 0
	082 JumpIfEqual {149}
	083 Move X9, [X0]
	084 Move V0, [X8+32]
	085 Move X8, -19886080
	086 Move V1, [X8+192]
	087 Move X8, [X9+504]
	088 Move X1, [X9+512]
	089 NotImplemented "Instruction FDIV not yet implemented."
	090 NotImplemented "Instruction BLR not yet implemented."
	091 Move X8, [X19+432]
	092 Compare X8, 0
	093 JumpIfEqual {149}
	094 Move W9, 1
	095 Move W10, 0x3FC00000
	096 Move [X8+169], W9
	097 Move [X8+172], W10
	098 Move S0, 1
	099 Move X0, [X19+200]
	100 Compare X0, 0
	101 JumpIfEqual {149}
	102 Move X8, [X0]
	103 Move X9, [X8+536]
	104 Move X1, [X8+544]
	105 NotImplemented "Instruction BLR not yet implemented."
	106 Move X0, [X19+432]
	107 Compare X0, 0
	108 JumpIfEqual {149}
	109 Move X8, -19886080
	110 Move V0, [X8+860]
	111 Move W1, W31
	112 Call ArmstrongView.SetHeadMoving, X0, X1, V0
	113 Move X8, [X19+432]
	114 Compare X8, 0
	115 JumpIfEqual {149}
	116 Move S0, 0.5
	117 Move X8, [X19+192]
	118 Compare X8, 0
	119 JumpIfEqual {149}
	120 Move X8, [X8+48]
	121 Compare X8, 0
	122 JumpIfEqual {149}
	123 Move W9, [X8+24]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move X0, [X19+200]
	126 Compare X0, 0
	127 JumpIfEqual {149}
	128 Move X9, [X0]
	129 Move V0, [X8+36]
	130 Move X8, -19886080
	131 Move V1, [X8+192]
	132 Move X8, [X9+488]
	133 Move X1, [X9+496]
	134 NotImplemented "Instruction FDIV not yet implemented."
	135 NotImplemented "Instruction BLR not yet implemented."
	136 Move X8, [X19+432]
	137 Compare X8, 0
	138 JumpIfEqual {149}
	139 Move X10, -19886080
	140 Move V0, [X10+144]
	141 Move W9, 1
	142 Move [X8+169], W9
	143 Move W9, 0x3FC00000
	144 Move [X8+172], W9
	145 Move [X8+128], S0
	146 Move X30, [X31+16]
	147 Move X19, [X31+24]
	148 Return 
	149 Call 0x1C17F20
	150 Call 0x1C17F28

Method: System.Void Setup()

Disassembly:
	0x01DE2F14 CBZ X0, 0x1DE307C
	0x01DE2F18 MOV X1, X31
	0x01DE2F1C BL 0x3C3F58C
	0x01DE2F20 MOV V8.16B, V0.16B
	0x01DE2F24 MOV V9.16B, V1.16B
	0x01DE2F28 MOV V10.16B, V2.16B
	0x01DE2F2C MOV X0, X20
	0x01DE2F30 MOV X1, X31
	0x01DE2F34 BL 0x3C32E90
	0x01DE2F38 CBZ X0, 0x1DE3070
	0x01DE2F3C MOV X1, X31
	0x01DE2F40 BL 0x3C3F58C
	0x01DE2F44 LDRB W8, [X24 + 0x785]
	0x01DE2F48 MOV V11.16B, V0.16B
	0x01DE2F4C MOV V12.16B, V1.16B
	0x01DE2F50 MOV V13.16B, V2.16B
	0x01DE2F54 CBNZ W8, 0x1DE2F64
	0x01DE2F58 MOV X0, X21
	0x01DE2F5C BL 0x1C16CF4
	0x01DE2F60 STRB W29, [X24 + 0x785]
	0x01DE2F64 LDR X0, [X21]
	0x01DE2F68 LDR W8, [X0 + 0xE0]
	0x01DE2F6C CBNZ W8, 0x1DE2F74
	0x01DE2F70 BL 0x1C16DFC
	0x01DE2F74 FSUB S0, S8, S11

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.Setup, X0
	006 Move X0, [X19+232]
	007 Compare X0, 0
	008 JumpIfEqual {34}
	009 Move W1, 1
	010 Move X2, X31
	011 Call NavMeshAgent.set_updatePosition, X0, X1
	012 Move X0, [X19+232]
	013 Compare X0, 0
	014 JumpIfEqual {34}
	015 Move W1, 1
	016 Move X2, X31
	017 Call NavMeshAgent.set_updateRotation, X0, X1
	018 Move X0, [X19+64]
	019 Compare X0, 0
	020 JumpIfEqual {34}
	021 Move X1, X31
	022 Call NetworkObject.get_HasStateAuthority, X0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {29}
	027 Move X0, X19
	028 Call ArmstrongController.SetRoaming, X0
	029 Move X0, X19
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Call ArmstrongController.HandlePhaseChanged, X0
	033 Return 
	034 Call 0x1C17F20

Method: System.Void HandleRevive()

Disassembly:
	0x01DE3008 LDR W8, [X20 + 0x68]
	0x01DE300C LDR X2, [X20 + 0xD0]
	0x01DE3010 FMUL S0, S0, S3
	0x01DE3014 FMUL S1, S1, S3
	0x01DE3018 FMUL S2, S2, S3
	0x01DE301C BFM X6, X8, 0x20, 0x1F
	0x01DE3020 MOV X0, X23
	0x01DE3024 MOV X4, X3
	0x01DE3028 MOV X7, X31
	0x01DE302C BL 0x1DB7738
	0x01DE3030 B 0x1DE2ED4
	0x01DE3034 LDR X1, [X26]
	0x01DE3038 ADD X0, X31, 0x20
	0x01DE303C BL 0x2BC434C
	0x01DE3040 LDP X20, X19, [X31 + 0xD0]
	0x01DE3044 LDP X22, X21, [X31 + 0xC0]
	0x01DE3048 LDP X24, X23, [X31 + 0xB0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleRevive, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {25}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {22}
	015 Move X0, X19
	016 Call ArmstrongController.Initialize, X0
	017 Move X0, X19
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Call ArmstrongController.SetRoaming, X0
	021 Return 
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return 
	025 Call 0x1C17F20

Method: System.Void HandleDie()

Disassembly:
	0x01DE3098 B 0x1DE30B4
	0x01DE309C B 0x1DE30B4
	0x01DE30A0 B 0x1DE30B4
	0x01DE30A4 B 0x1DE30B4
	0x01DE30A8 B 0x1DE30B4
	0x01DE30AC B 0x1DE30B4
	0x01DE30B0 B 0x1DE30B4
	0x01DE30B4 MOV X19, X0
	0x01DE30B8 CMP W1, 0x1
	0x01DE30BC B.NE 0x1DE30E8
	0x01DE30C0 MOV X0, X19
	0x01DE30C4 BL 0x3EB1AD0
	0x01DE30C8 LDR X20, [X0]
	0x01DE30CC BL 0x3EB1AE0
	0x01DE30D0 LDR X1, [X26]
	0x01DE30D4 ADD X0, X31, 0x20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleDie, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {24}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {21}
	015 Move W1, 6
	016 Move X0, X19
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call ArmstrongController.set_phase, X0, X1
	020 Return 
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 
	024 Call 0x1C17F20

Method: System.Void Initialize()

Disassembly:
	0x01DE304C LDP X26, X25, [X31 + 0xA0]
	0x01DE3050 LDP X28, X27, [X31 + 0x90]
	0x01DE3054 LDP X29, X30, [X31 + 0x80]
	0x01DE3058 LDP D9, D8, [X31 + 0x70]
	0x01DE305C LDP D11, D10, [X31 + 0x60]
	0x01DE3060 LDP D13, D12, [X31 + 0x50]
	0x01DE3064 LDR V14, [X31 + 0x40]
	0x01DE3068 ADD X31, X31, 0xE0
	0x01DE306C RET
	0x01DE3070 BL 0x1C16F20
	0x01DE3074 BL 0x1C16F20
	0x01DE3078 BL 0x1C16F20
	0x01DE307C BL 0x1C16F20
	0x01DE3080 BL 0x1C16F20
	0x01DE3084 BL 0x1C16F28
	0x01DE3088 B 0x1DE30B4
	0x01DE308C B 0x1DE30B4
	0x01DE3090 B 0x1DE30B4
	0x01DE3094 B 0x1DE30B4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X1, X31
	005 Move X19, X0
	006 Move X9, [X8+952]
	007 Move X2, [X8+960]
	008 NotImplemented "Instruction BLR not yet implemented."
	009 Move S0, W31
	010 Move X0, X19
	011 Move X1, X31
	012 Move [X19+424], W31
	013 Call MobController.set__timerToChasing, X0, V0
	014 Move S0, W31
	015 Move X0, X19
	016 Move X1, X31
	017 Call MobController.set__timerToSearching, X0, V0
	018 Move [X19+428], W31
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Return 

Method: System.Void UpdateMonsterBehaviour()

Disassembly:
	0x01DE30D8 BL 0x2BC434C
	0x01DE30DC CBZ X20, 0x1DE3040
	0x01DE30E0 MOV X0, X20
	0x01DE30E4 BL 0x1C16F18
	0x01DE30E8 MOV X20, X31
	0x01DE30EC B 0x1DE30F4
	0x01DE30F0 MOV X19, X0
	0x01DE30F4 LDR X1, [X26]
	0x01DE30F8 ADD X0, X31, 0x20
	0x01DE30FC BL 0x2BC434C
	0x01DE3100 CBNZ X20, 0x1DE310C
	0x01DE3104 MOV X0, X19
	0x01DE3108 BL 0x1D2C690
	0x01DE310C MOV X0, X20
	0x01DE3110 BL 0x1C16F18
	0x01DE3114 BL 0x1990590
	0x01DE3118 STP X30, X19, [X31 - 0x10]!
	0x01DE311C MOVZ W1, 0x4
	0x01DE3120 MOV X19, X0
	0x01DE3124 BL 0x1DE1B3C
	0x01DE3128 FMOV S0, W31
	0x01DE312C MOV X0, X19
	0x01DE3130 MOV X1, X31
	0x01DE3134 BL 0x1DF38DC
	0x01DE3138 LDR X9, [X19 + 0xC0]
	0x01DE313C CBZ X9, 0x1DE31C0
	0x01DE3140 LDR X8, [X9 + 0x38]
	0x01DE3144 CBZ X8, 0x1DE31C0
	0x01DE3148 LDR W10, [X8 + 0x18]
	0x01DE314C CBZ W10, 0x1DE31C4
	0x01DE3150 LDR X10, [X9 + 0x58]
	0x01DE3154 CBZ X10, 0x1DE31C0
	0x01DE3158 LDR W11, [X10 + 0x18]
	0x01DE315C CMP W11, 0x1
	0x01DE3160 B.LS 0x1DE31C4
	0x01DE3164 LDR X9, [X9 + 0x60]
	0x01DE3168 CBZ X9, 0x1DE31C0
	0x01DE316C LDR W11, [X9 + 0x18]
	0x01DE3170 CMP W11, 0x1
	0x01DE3174 B.LS 0x1DE31C4
	0x01DE3178 LDR X11, [X19]
	0x01DE317C LDR V0, [X8 + 0x20]
	0x01DE3180 LDR V1, [X10 + 0x24]
	0x01DE3184 LDR V2, [X9 + 0x24]
	0x01DE3188 LDR X8, [X11 + 0x2C8]
	0x01DE318C LDR X2, [X11 + 0x2D0]
	0x01DE3190 MOV X0, X19
	0x01DE3194 MOV W1, W31
	0x01DE3198 BLR X8
	0x01DE319C MOV X0, X19
	0x01DE31A0 MOV X1, X31
	0x01DE31A4 BL 0x1DEA5A0
	0x01DE31A8 LDR X8, [X19]
	0x01DE31AC MOV X0, X19
	0x01DE31B0 LDR X2, [X8 + 0x378]
	0x01DE31B4 LDR X1, [X8 + 0x380]
	0x01DE31B8 LDP X30, X19, [X31], #0x10
	0x01DE31BC BR X2
	0x01DE31C0 BL 0x1C16F20
	0x01DE31C4 BL 0x1C16F28
	0x01DE31C8 STP X30, X21, [X31 - 0x20]!
	0x01DE31CC STP X20, X19, [X31 + 0x10]
	0x01DE31D0 ADRP X21, 0x25F5000
	0x01DE31D4 ADRP X20, 0x2315000
	0x01DE31D8 LDRB W8, [X21 + 0xC8F]
	0x01DE31DC LDR X20, [X20 + 0xBC0]
	0x01DE31E0 MOV X19, X0
	0x01DE31E4 TBNZ X8, 0x0, 0x1DE31FC
	0x01DE31E8 ADRP X0, 0x2315000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x25F6000
	006 Move W8, [X20+3209]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2316000
	013 Move X0, [X0+3240]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3209], W8
	017 Move X0, X19
	018 Move X1, X31
	019 Call MobController.UpdateMonsterBehaviour, X0
	020 Move X0, X19
	021 Call ArmstrongController.get_phase, X0
	022 Subtract W8, W0, 1
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X9, -19615744
	025 Add X9, X9, 2388
	026 NotImplemented "Instruction ADR not yet implemented."
	027 Move W11, [X9]
	028 Add X10, X10, X11
	029 CallNoReturn X10
	030 Move X8, [X19]
	031 Move X9, [X8+904]
	032 Move X1, [X8+912]
	033 Move X0, X19
	034 Call ArmstrongController.UpdateFinding, X0
	035 Move X8, [X19]
	036 Move X9, [X8+968]
	037 Move X1, [X8+976]
	038 Move X0, X19
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move X0, X19
	041 Call ArmstrongController.UpdateSearching, X0
	042 Move X0, X19
	043 Call ArmstrongController.UpdatePunchAndHold, X0
	044 Call GameManager.get_isDebug
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {72}
	049 Move X20, [X19+408]
	050 Compare X20, 0
	051 JumpIfEqual {72}
	052 Move X0, X19
	053 Call ArmstrongController.get_phase, X0
	054 Move X8, 0x2316000
	055 Move X8, [X8+3240]
	056 Move TEMP, 0
	057 Not TEMP
	058 Move X9, TEMP
	059 Move [X31+24], W0
	060 Add X0, X31, 8
	061 Move X8, [X8]
	062 Move X1, X31
	063 Move [X31+8], X8
	064 Move [X31+16], X9
	065 Call Enum.ToString, X0
	066 Move X8, [X20+64]
	067 Move X9, [X20+24]
	068 Move X2, [X20+40]
	069 Move X1, X0
	070 Move X0, X8
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Move X20, [X31+48]
	073 Move X19, [X31+56]
	074 Move X30, [X31+32]
	075 Add X31, X31, 64
	076 Return 

Method: System.Void SetRoaming()

Disassembly:
	0x01DE2F78 FSUB S1, S9, S12
	0x01DE2F7C FSUB S2, S10, S13
	0x01DE2F80 FMUL S3, S0, S0
	0x01DE2F84 FMUL S4, S1, S1
	0x01DE2F88 FADD S3, S3, S4
	0x01DE2F8C FMUL S4, S2, S2
	0x01DE2F90 FADD S3, S4, S3
	0x01DE2F94 FSQRT S3, S3
	0x01DE2F98 FCMP S3, S14
	0x01DE2F9C B.LE 0x1DE2FB0
	0x01DE2FA0 FDIV S0, S0, S3
	0x01DE2FA4 FDIV S1, S1, S3
	0x01DE2FA8 FDIV S2, S2, S3
	0x01DE2FAC B 0x1DE2FD4
	0x01DE2FB0 LDRB W8, [X25 + 0x783]
	0x01DE2FB4 CBNZ W8, 0x1DE2FC4
	0x01DE2FB8 MOV X0, X22
	0x01DE2FBC BL 0x1C16CF4
	0x01DE2FC0 STRB W29, [X25 + 0x783]
	0x01DE2FC4 LDR X8, [X22]
	0x01DE2FC8 LDR X8, [X8 + 0xB8]
	0x01DE2FCC LDP S0, S1, [X8]
	0x01DE2FD0 LDR V2, [X8 + 0x8]
	0x01DE2FD4 LDR X8, [X20 + 0xC0]
	0x01DE2FD8 CBZ X8, 0x1DE3074
	0x01DE2FDC LDR X9, [X20 + 0x40]
	0x01DE2FE0 CBZ X9, 0x1DE2FF4
	0x01DE2FE4 LDR X9, [X9 + 0x20]
	0x01DE2FE8 CBZ X9, 0x1DE2FF4
	0x01DE2FEC LDR W6, [X9]
	0x01DE2FF0 B 0x1DE2FF8
	0x01DE2FF4 MOV X6, X31
	0x01DE2FF8 LDR V3, [X8 + 0x50]
	0x01DE2FFC LDR W1, [X8 + 0x24]
	0x01DE3000 LDR X3, [X8 + 0xB8]
	0x01DE3004 LDR X5, [X8 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 1
	004 Move X19, X0
	005 Call ArmstrongController.set_phase, X0, X1
	006 Move X9, [X19+192]
	007 Compare X9, 0
	008 JumpIfEqual {44}
	009 Move X8, [X9+48]
	010 Compare X8, 0
	011 JumpIfEqual {44}
	012 Move W10, [X8+24]
	013 Compare W10, 0
	014 JumpIfEqual {45}
	015 Move X10, [X9+88]
	016 Compare X10, 0
	017 JumpIfEqual {44}
	018 Move W11, [X10+24]
	019 Compare W11, 0
	020 JumpIfEqual {45}
	021 Move X9, [X9+96]
	022 Compare X9, 0
	023 JumpIfEqual {44}
	024 Move W11, [X9+24]
	025 Compare W11, 0
	026 JumpIfEqual {45}
	027 Move X11, [X19]
	028 Move V0, [X8+32]
	029 Move V1, [X10+32]
	030 Move V2, [X9+32]
	031 Move X8, [X11+712]
	032 Move X2, [X11+720]
	033 Move X0, X19
	034 Move W1, W31
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X8, [X19]
	037 Move W1, 1
	038 Move X0, X19
	039 Move X3, [X8+872]
	040 Move X2, [X8+880]
	041 Move X30, [X31+16]
	042 Move X19, [X31+24]
	043 CallNoReturn X3
	044 Call 0x1C17F20
	045 Call 0x1C17F28

Method: System.Void UpdateRoaming()

Disassembly:
	0x01DE3590 FADD S1, S9, S1
	0x01DE3594 FADD S0, S8, S0
	0x01DE3598 MOV X0, X19
	0x01DE359C LDP X20, X19, [X31 + 0x40]
	0x01DE35A0 LDR X30, [X31 + 0x30]
	0x01DE35A4 LDP D9, D8, [X31 + 0x20]
	0x01DE35A8 LDP D11, D10, [X31 + 0x10]
	0x01DE35AC MOV X1, X31
	0x01DE35B0 LDP D13, D12, [X31], #0x50
	0x01DE35B4 B 0x3C3F62C
	0x01DE35B8 BL 0x1C16F20
	0x01DE35BC STP X30, X21, [X31 - 0x20]!
	0x01DE35C0 STP X20, X19, [X31 + 0x10]
	0x01DE35C4 ADRP X21, 0x25F5000
	0x01DE35C8 ADRP X20, 0x2315000
	0x01DE35CC LDRB W8, [X21 + 0xC91]
	0x01DE35D0 LDR X20, [X20 + 0xC88]
	0x01DE35D4 MOV X19, X0
	0x01DE35D8 TBNZ X8, 0x0, 0x1DE35F0
	0x01DE35DC ADRP X0, 0x2315000
	0x01DE35E0 LDR X0, [X0 + 0xC88]
	0x01DE35E4 BL 0x1C16CF4
	0x01DE35E8 MOVZ W8, 0x1
	0x01DE35EC STRB W8, [X21 + 0xC91]
	0x01DE35F0 MOVZ W9, 0xCCCD
	0x01DE35F4 MOVZ W8, 0x1
	0x01DE35F8 MOVK W9, 0x3E4C0000
	0x01DE35FC STRB W8, [X19 + 0xA9]
	0x01DE3600 STR W9, [X19 + 0xAC]
	0x01DE3604 LDR X0, [X20]
	0x01DE3608 LDR W8, [X0 + 0xE0]
	0x01DE360C CBNZ W8, 0x1DE3614
	0x01DE3610 BL 0x1C16DFC
	0x01DE3614 MOV X0, X19
	0x01DE3618 LDP X20, X19, [X31 + 0x10]
	0x01DE361C MOV X1, X31
	0x01DE3620 LDP X30, X21, [X31], #0x20
	0x01DE3624 B 0x1DE7994
	0x01DE3628 STP X30, X19, [X31 - 0x10]!
	0x01DE362C LDR X8, [X0 + 0x50]
	0x01DE3630 CBZ X8, 0x1DE3640
	0x01DE3634 LDR W0, [X8 + 0x3C]
	0x01DE3638 LDP X30, X19, [X31], #0x10
	0x01DE363C RET
	0x01DE3640 ADRP X0, 0x2310000
	0x01DE3644 LDR X0, [X0 + 0x5B0]
	0x01DE3648 BL 0x1C16D08
	0x01DE364C BL 0x1C16F10
	0x01DE3650 MOV X19, X0
	0x01DE3654 ADRP X0, 0x2315000
	0x01DE3658 LDR X0, [X0 + 0xCC8]
	0x01DE365C BL 0x1C16D08
	0x01DE3660 MOV X1, X0
	0x01DE3664 MOV X0, X19
	0x01DE3668 MOV X2, X31
	0x01DE366C BL 0x337DF1C
	0x01DE3670 ADRP X0, 0x2315000
	0x01DE3674 LDR X0, [X0 + 0xCD0]
	0x01DE3678 BL 0x1C16D08
	0x01DE367C MOV X1, X0
	0x01DE3680 MOV X0, X19
	0x01DE3684 BL 0x1C16DEC
	0x01DE3688 STP X30, X19, [X31 - 0x10]!
	0x01DE368C LDR X8, [X0 + 0x50]
	0x01DE3690 CBZ X8, 0x1DE36A0
	0x01DE3694 STR W1, [X8 + 0x3C]
	0x01DE3698 LDP X30, X19, [X31], #0x10
	0x01DE369C RET
	0x01DE36A0 ADRP X0, 0x2310000
	0x01DE36A4 LDR X0, [X0 + 0x5B0]
	0x01DE36A8 BL 0x1C16D08
	0x01DE36AC BL 0x1C16F10
	0x01DE36B0 MOV X19, X0
	0x01DE36B4 ADRP X0, 0x2315000
	0x01DE36B8 LDR X0, [X0 + 0xCC8]
	0x01DE36BC BL 0x1C16D08
	0x01DE36C0 MOV X1, X0
	0x01DE36C4 MOV X0, X19
	0x01DE36C8 MOV X2, X31
	0x01DE36CC BL 0x337DF1C
	0x01DE36D0 ADRP X0, 0x2315000
	0x01DE36D4 LDR X0, [X0 + 0xCD8]
	0x01DE36D8 BL 0x1C16D08
	0x01DE36DC MOV X1, X0
	0x01DE36E0 MOV X0, X19
	0x01DE36E4 BL 0x1C16DEC
	0x01DE36E8 STP X30, X19, [X31 - 0x10]!
	0x01DE36EC LDR X8, [X0 + 0x50]
	0x01DE36F0 CBZ X8, 0x1DE3708
	0x01DE36F4 LDR W8, [X8 + 0x40]
	0x01DE36F8 CMP W8, 0x0
	0x01DE36FC CSET W0, NE
	0x01DE3700 LDP X30, X19, [X31], #0x10
	0x01DE3704 RET
	0x01DE3708 ADRP X0, 0x2310000
	0x01DE370C LDR X0, [X0 + 0x5B0]
	0x01DE3710 BL 0x1C16D08
	0x01DE3714 BL 0x1C16F10
	0x01DE3718 MOV X19, X0
	0x01DE371C ADRP X0, 0x2315000
	0x01DE3720 LDR X0, [X0 + 0xCE0]
	0x01DE3724 BL 0x1C16D08
	0x01DE3728 MOV X1, X0
	0x01DE372C MOV X0, X19
	0x01DE3730 MOV X2, X31
	0x01DE3734 BL 0x337DF1C
	0x01DE3738 ADRP X0, 0x2315000
	0x01DE373C LDR X0, [X0 + 0xCE8]
	0x01DE3740 BL 0x1C16D08
	0x01DE3744 MOV X1, X0
	0x01DE3748 MOV X0, X19
	0x01DE374C BL 0x1C16DEC
	0x01DE3750 STP X30, X19, [X31 - 0x10]!
	0x01DE3754 LDR X8, [X0 + 0x50]
	0x01DE3758 CBZ X8, 0x1DE376C
	0x01DE375C AND W9, W1, 0x1
	0x01DE3760 STR W9, [X8 + 0x40]
	0x01DE3764 LDP X30, X19, [X31], #0x10
	0x01DE3768 RET
	0x01DE376C ADRP X0, 0x2310000
	0x01DE3770 LDR X0, [X0 + 0x5B0]
	0x01DE3774 BL 0x1C16D08
	0x01DE3778 BL 0x1C16F10
	0x01DE377C MOV X19, X0
	0x01DE3780 ADRP X0, 0x2315000
	0x01DE3784 LDR X0, [X0 + 0xCE0]
	0x01DE3788 BL 0x1C16D08
	0x01DE378C MOV X1, X0
	0x01DE3790 MOV X0, X19
	0x01DE3794 MOV X2, X31
	0x01DE3798 BL 0x337DF1C
	0x01DE379C ADRP X0, 0x2315000
	0x01DE37A0 LDR X0, [X0 + 0xCF0]
	0x01DE37A4 BL 0x1C16D08
	0x01DE37A8 MOV X1, X0
	0x01DE37AC MOV X0, X19
	0x01DE37B0 BL 0x1C16DEC
	0x01DE37B4 STP X30, X19, [X31 - 0x10]!
	0x01DE37B8 LDR X8, [X0 + 0x50]
	0x01DE37BC CBZ X8, 0x1DE37CC
	0x01DE37C0 LDR V0, [X8 + 0x44]
	0x01DE37C4 LDP X30, X19, [X31], #0x10
	0x01DE37C8 RET
	0x01DE37CC ADRP X0, 0x2310000
	0x01DE37D0 LDR X0, [X0 + 0x5B0]
	0x01DE37D4 BL 0x1C16D08
	0x01DE37D8 BL 0x1C16F10
	0x01DE37DC MOV X19, X0
	0x01DE37E0 ADRP X0, 0x2315000
	0x01DE37E4 LDR X0, [X0 + 0xCF8]
	0x01DE37E8 BL 0x1C16D08
	0x01DE37EC MOV X1, X0
	0x01DE37F0 MOV X0, X19
	0x01DE37F4 MOV X2, X31
	0x01DE37F8 BL 0x337DF1C
	0x01DE37FC ADRP X0, 0x2315000
	0x01DE3800 LDR X0, [X0 + 0xD00]
	0x01DE3804 BL 0x1C16D08
	0x01DE3808 MOV X1, X0
	0x01DE380C MOV X0, X19
	0x01DE3810 BL 0x1C16DEC
	0x01DE3814 STP X30, X19, [X31 - 0x10]!
	0x01DE3818 LDR X8, [X0 + 0x50]
	0x01DE381C CBZ X8, 0x1DE382C
	0x01DE3820 STR S0, [X8 + 0x44]
	0x01DE3824 LDP X30, X19, [X31], #0x10
	0x01DE3828 RET
	0x01DE382C ADRP X0, 0x2310000
	0x01DE3830 LDR X0, [X0 + 0x5B0]
	0x01DE3834 BL 0x1C16D08
	0x01DE3838 BL 0x1C16F10
	0x01DE383C MOV X19, X0
	0x01DE3840 ADRP X0, 0x2315000
	0x01DE3844 LDR X0, [X0 + 0xCF8]
	0x01DE3848 BL 0x1C16D08
	0x01DE384C MOV X1, X0
	0x01DE3850 MOV X0, X19
	0x01DE3854 MOV X2, X31
	0x01DE3858 BL 0x337DF1C
	0x01DE385C ADRP X0, 0x2315000
	0x01DE3860 LDR X0, [X0 + 0xD08]
	0x01DE3864 BL 0x1C16D08
	0x01DE3868 MOV X1, X0
	0x01DE386C MOV X0, X19
	0x01DE3870 BL 0x1C16DEC
	0x01DE3874 STR X30, [X31 - 0x10]!
	0x01DE3878 LDR X8, [X0 + 0xC0]
	0x01DE387C CBZ X8, 0x1DE389C
	0x01DE3880 LDR X8, [X8 + 0x58]
	0x01DE3884 CBZ X8, 0x1DE389C
	0x01DE3888 LDR W9, [X8 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x25F6000
	007 Move X21, 0x2316000
	008 Move W8, [X20+3210]
	009 Move X21, [X21+3256]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {41}
	015 Move X0, 0x2315000
	016 Move X0, [X0+2712]
	017 Call 0x1C17CF4
	018 Move X0, 0x2315000
	019 Move X0, [X0+2720]
	020 Call 0x1C17CF4
	021 Move X0, 0x2316000
	022 Move X0, [X0+3248]
	023 Call 0x1C17CF4
	024 Move X0, 0x2316000
	025 Move X0, [X0+3184]
	026 Call 0x1C17CF4
	027 Move X0, 0x2316000
	028 Move X0, [X0+3136]
	029 Call 0x1C17CF4
	030 Move X0, 0x2311000
	031 Move X0, [X0+1432]
	032 Call 0x1C17CF4
	033 Move X0, 0x2316000
	034 Move X0, [X0+3264]
	035 Call 0x1C17CF4
	036 Move X0, 0x2316000
	037 Move X0, [X0+3256]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X20+3210], W8
	041 Move X0, [X21]
	042 Call 0x1C17F10
	043 Move X1, X31
	044 Move X20, X0
	045 Call Object..ctor, X0
	046 Compare X20, 0
	047 JumpIfEqual {229}
	048 Move X22, 0x2316000
	049 Move X22, [X22+3136]
	050 Move X0, X19
	051 Move X1, X31
	052 Move [X20+16], X19
	053 Call MobController.UpdateRoaming, X0
	054 Move X0, [X22]
	055 Add X21, X19, 376
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X19
	061 Move X1, X21
	062 Move X2, X31
	063 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {104}
	068 Move X20, [X21]
	069 Compare X20, 0
	070 JumpIfEqual {229}
	071 Move W1, [X20+24]
	072 Move W0, W31
	073 Move X2, X31
	074 Call Random.Range, X0, X1
	075 Move X8, 0x2316000
	076 Move X8, [X8+3184]
	077 Move W1, W0
	078 Move X0, X20
	079 Move X2, [X8]
	080 Call List`1<Object>.get_Item, X0, X1
	081 Move X8, [X19]
	082 Move X1, X0
	083 Move X0, X19
	084 Move X9, [X8+952]
	085 Move X2, [X8+960]
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Move X0, [X19+352]
	088 Compare X0, 0
	089 JumpIfEqual {229}
	090 Move X1, X31
	091 Call Component.get_transform, X0
	092 Compare X0, 0
	093 JumpIfEqual {229}
	094 Move X1, X31
	095 Call Transform.get_position, X0
	096 Move X0, X19
	097 Move X20, [X31+32]
	098 Move X19, [X31+40]
	099 Move X22, [X31+16]
	100 Move X21, [X31+24]
	101 Move X30, [X31+48]
	102 Call ArmstrongController.SetChasing, X0, X1
	103 Return 
	104 Move X0, [X22]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 Move X0, X19
	110 Move X1, X21
	111 Move X2, X31
	112 Call MobDetectionUtil.TryGetPlayersBySound, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfNotEqual {184}
	117 Move X8, [X19+192]
	118 Compare X8, 0
	119 JumpIfEqual {229}
	120 Move X8, [X8+120]
	121 Compare X8, 0
	122 JumpIfEqual {229}
	123 Move W9, [X8+24]
	124 Compare W9, 0
	125 JumpIfEqual {230}
	126 Move V0, [X8+32]
	127 Move X8, 0x2315000
	128 Move X8, [X8+2720]
	129 Move S1, 0.5
	130 Multiply S0, S0, S1
	131 Move [X20+24], S0
	132 Move X0, [X8]
	133 Move X21, [X21]
	134 Call 0x1C17F10
	135 Move X8, 0x2316000
	136 Move X8, [X8+3264]
	137 Move X1, X20
	138 Move X3, X31
	139 Move X22, X0
	140 Move X2, [X8]
	141 Call Func`2<Object, Boolean>..ctor, X0, X1, X2
	142 Move X8, 0x2315000
	143 Move X8, [X8+2712]
	144 Move X0, X21
	145 Move X1, X22
	146 Move X2, [X8]
	147 Call 0x21C670C, X0, X1
	148 Move X8, 0x2311000
	149 Move X8, [X8+1432]
	150 Move X20, X0
	151 Move X8, [X8]
	152 Move W9, [X8+224]
	153 Compare W9, 0
	154 JumpIfNotEqual {157}
	155 Move X0, X8
	156 Call 0x1C17DFC
	157 Move X0, X20
	158 Move X1, X31
	159 Move X2, X31
	160 Call Object.op_Inequality, X0, X1
	161 Move TEMP, X0
	162 And TEMP, TEMP, 1
	163 Compare TEMP, 1
	164 JumpIfNotEqual {182}
	165 Move X8, [X19]
	166 Move X0, X19
	167 Move X1, X20
	168 Move X9, [X8+952]
	169 Move X2, [X8+960]
	170 NotImplemented "Instruction BLR not yet implemented."
	171 Compare X20, 0
	172 JumpIfEqual {229}
	173 Move X0, X20
	174 Move X1, X31
	175 Call Component.get_transform, X0
	176 Compare X0, 0
	177 JumpIfEqual {229}
	178 Move X1, X31
	179 Call Transform.get_position, X0
	180 Move X0, X19
	181 Call ArmstrongController.SetChasing, X0, X1
	182 Move X0, X19
	183 Call ArmstrongController.SetFinding, X0
	184 Move W8, [X19+189]
	185 Compare W8, 0
	186 JumpIfEqual {200}
	187 Move W8, [X19+188]
	188 Compare W8, 0
	189 JumpIfEqual {206}
	190 Move X8, [X19]
	191 Move X0, X19
	192 Move X20, [X31+32]
	193 Move X19, [X31+40]
	194 Move X22, [X31+16]
	195 Move X21, [X31+24]
	196 Move X2, [X8+1048]
	197 Move X1, [X8+1056]
	198 Move X30, [X31+48]
	199 CallNoReturn X2
	200 Move X20, [X31+32]
	201 Move X19, [X31+40]
	202 Move X22, [X31+16]
	203 Move X21, [X31+24]
	204 Move X30, [X31+48]
	205 Return 
	206 Move X8, [X19+192]
	207 Compare X8, 0
	208 JumpIfEqual {229}
	209 Move X8, [X8+48]
	210 Compare X8, 0
	211 JumpIfEqual {229}
	212 Move W9, [X8+24]
	213 Compare W9, 0
	214 JumpIfEqual {230}
	215 Move X9, [X19]
	216 Move V0, [X8+32]
	217 Move X8, -19890176
	218 Move V1, [X8+192]
	219 Move X2, [X9+1064]
	220 Move X1, [X9+1072]
	221 Move X0, X19
	222 Move X20, [X31+32]
	223 Move X19, [X31+40]
	224 Move X22, [X31+16]
	225 Move X21, [X31+24]
	226 NotImplemented "Instruction FDIV not yet implemented."
	227 Move X30, [X31+48]
	228 CallNoReturn X2
	229 Call 0x1C17F20
	230 Call 0x1C17F28

Method: System.Void SetFinding()

Disassembly:
	0x01DE3950 FSUB S1, S9, S1
	0x01DE3954 LDP X30, X19, [X31 + 0x20]
	0x01DE3958 LDP D9, D8, [X31 + 0x10]
	0x01DE395C FSUB S2, S10, S2
	0x01DE3960 LDR V10, [X31], #0x30
	0x01DE3964 RET
	0x01DE3968 BL 0x1C16F20
	0x01DE396C STR X30, [X31 - 0x20]!
	0x01DE3970 STP X20, X19, [X31 + 0x10]
	0x01DE3974 MOV X19, X0
	0x01DE3978 BL 0x1DE3628
	0x01DE397C CMP W0, 0x4
	0x01DE3980 B.EQ 0x1DE39A4
	0x01DE3984 CMP W0, 0x3
	0x01DE3988 B.EQ 0x1DE39B8
	0x01DE398C CMP W0, 0x2
	0x01DE3990 B.NE 0x1DE3A04
	0x01DE3994 LDR X8, [X19 + 0xC0]
	0x01DE3998 CBZ X8, 0x1DE3A54
	0x01DE399C LDR X20, [X8 + 0x98]
	0x01DE39A0 B 0x1DE39DC
	0x01DE39A4 LDR X0, [X19 + 0x1E8]
	0x01DE39A8 CBZ X0, 0x1DE3A54
	0x01DE39AC MOV W1, W31
	0x01DE39B0 BL 0x1DE3A58
	0x01DE39B4 B 0x1DE3A04
	0x01DE39B8 LDR X0, [X19 + 0x1E8]
	0x01DE39BC CBZ X0, 0x1DE3A54
	0x01DE39C0 LDR X8, [X0]
	0x01DE39C4 LDR X9, [X8 + 0x218]
	0x01DE39C8 LDR X1, [X8 + 0x220]
	0x01DE39CC BLR X9
	0x01DE39D0 LDR X8, [X19 + 0xC0]
	0x01DE39D4 CBZ X8, 0x1DE3A54
	0x01DE39D8 LDR X20, [X8 + 0xB0]
	0x01DE39DC MOV X0, X19
	0x01DE39E0 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 2
	004 Move X19, X0
	005 Call ArmstrongController.set_phase, X0, X1
	006 Move X0, [X19+232]
	007 Move [X19+424], W31
	008 Compare X0, 0
	009 JumpIfEqual {44}
	010 Move W1, W31
	011 Move X2, X31
	012 Call NavMeshAgent.set_isStopped, X0, X1
	013 Move X9, [X19+192]
	014 Compare X9, 0
	015 JumpIfEqual {44}
	016 Move X8, [X9+48]
	017 Compare X8, 0
	018 JumpIfEqual {44}
	019 Move W10, [X8+24]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X10, [X9+88]
	022 Compare X10, 0
	023 JumpIfEqual {44}
	024 Move W11, [X10+24]
	025 Compare W11, 0
	026 JumpIfEqual {45}
	027 Move X9, [X9+96]
	028 Compare X9, 0
	029 JumpIfEqual {44}
	030 Move W11, [X9+24]
	031 Compare W11, 0
	032 JumpIfEqual {45}
	033 Move X11, [X19]
	034 Move V0, [X8+36]
	035 Move V1, [X10+32]
	036 Move V2, [X9+32]
	037 Move X3, [X11+712]
	038 Move X2, [X11+720]
	039 Move X0, X19
	040 Move W1, W31
	041 Move X30, [X31+16]
	042 Move X19, [X31+24]
	043 CallNoReturn X3
	044 Call 0x1C17F20
	045 Call 0x1C17F28

Method: System.Void UpdateFinding()

Disassembly:
	0x01DE31EC LDR X0, [X0 + 0xBC0]
	0x01DE31F0 BL 0x1C16CF4
	0x01DE31F4 MOVZ W8, 0x1
	0x01DE31F8 STRB W8, [X21 + 0xC8F]
	0x01DE31FC MOV X0, X19
	0x01DE3200 MOV X1, X31
	0x01DE3204 BL 0x1DEA894
	0x01DE3208 LDR X0, [X20]
	0x01DE320C LDR W8, [X0 + 0xE0]
	0x01DE3210 CBNZ W8, 0x1DE321C
	0x01DE3214 BL 0x1C16DFC
	0x01DE3218 LDR X0, [X20]
	0x01DE321C LDR X8, [X0 + 0xB8]
	0x01DE3220 MOV X0, X31
	0x01DE3224 LDP S0, S1, [X8 + 0xB0]
	0x01DE3228 LDP S2, S3, [X8 + 0xB8]
	0x01DE322C BL 0x3C0D030
	0x01DE3230 MOV X0, X19
	0x01DE3234 BL 0x1DE1BB8
	0x01DE3238 LDR X8, [X19 + 0xC0]
	0x01DE323C CBZ X8, 0x1DE325C
	0x01DE3240 LDR V3, [X8 + 0x4C]
	0x01DE3244 LDP X20, X19, [X31 + 0x10]
	0x01DE3248 FMOV S4, 0.5
	0x01DE324C MOV X0, X31
	0x01DE3250 FMUL S3, S3, S4
	0x01DE3254 LDP X30, X21, [X31], #0x20
	0x01DE3258 B 0x3C0CB98
	0x01DE325C BL 0x1C16F20
	0x01DE3260 STP X30, X21, [X31 - 0x20]!
	0x01DE3264 STP X20, X19, [X31 + 0x10]
	0x01DE3268 ADRP X20, 0x25F5000
	0x01DE326C ADRP X21, 0x2314000
	0x01DE3270 LDRB W8, [X20 + 0xC90]
	0x01DE3274 LDR X21, [X21 + 0x860]
	0x01DE3278 MOV X19, X0
	0x01DE327C TBNZ X8, 0x0, 0x1DE3294
	0x01DE3280 ADRP X0, 0x2314000
	0x01DE3284 LDR X0, [X0 + 0x860]
	0x01DE3288 BL 0x1C16CF4
	0x01DE328C MOVZ W8, 0x1
	0x01DE3290 STRB W8, [X20 + 0xC90]
	0x01DE3294 LDR X0, [X21]
	0x01DE3298 LDR W8, [X0 + 0xE0]
	0x01DE329C CBNZ W8, 0x1DE32A4
	0x01DE32A0 BL 0x1C16DFC
	0x01DE32A4 MOV X0, X19
	0x01DE32A8 LDP X20, X19, [X31 + 0x10]
	0x01DE32AC MOV X1, X31
	0x01DE32B0 LDP X30, X21, [X31], #0x20
	0x01DE32B4 B 0x1DEAEA0
	0x01DE32B8 STP X30, X19, [X31 - 0x10]!
	0x01DE32BC AND W1, W1, 0x1

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move V8, [X0+424]
	005 Move X1, X31
	006 Move X19, X0
	007 Call MobController.get_deltaTime, X0
	008 Add S0, S8, S0
	009 Move S1, 10
	010 NotImplemented "Instruction FCMP not yet implemented."
	011 Move [X19+424], S0
	012 Move X8, [X19]
	013 Move X0, X19
	014 Move X9, [X8+904]
	015 Move X1, [X8+912]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X0, X19
	018 Call ArmstrongController.SetRoaming, X0
	019 Move W8, [X19+189]
	020 Compare W8, 0
	021 JumpIfEqual {33}
	022 Move W8, [X19+188]
	023 Compare W8, 0
	024 JumpIfEqual {37}
	025 Move X8, [X19]
	026 Move X0, X19
	027 Move X30, [X31+16]
	028 Move X19, [X31+24]
	029 Move X2, [X8+1048]
	030 Move X1, [X8+1056]
	031 Move V8, [X31+32]
	032 CallNoReturn X2
	033 Move X30, [X31+16]
	034 Move X19, [X31+24]
	035 Move V8, [X31+32]
	036 Return 
	037 Move X8, [X19+192]
	038 Compare X8, 0
	039 JumpIfEqual {57}
	040 Move X8, [X8+48]
	041 Compare X8, 0
	042 JumpIfEqual {57}
	043 Move W9, [X8+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X9, [X19]
	046 Move V0, [X8+36]
	047 Move X8, -19890176
	048 Move V1, [X8+192]
	049 Move X2, [X9+1064]
	050 Move X1, [X9+1072]
	051 Move X0, X19
	052 Move X30, [X31+16]
	053 Move X19, [X31+24]
	054 NotImplemented "Instruction FDIV not yet implemented."
	055 Move V8, [X31+32]
	056 CallNoReturn X2
	057 Call 0x1C17F20
	058 Call 0x1C17F28

Method: System.Void SetChasing(UnityEngine.Vector3 targetPosition)

Disassembly:
	0x01DE3894 LDR X30, [X31], #0x10
	0x01DE3898 RET
	0x01DE389C BL 0x1C16F20
	0x01DE38A0 BL 0x1C16F28
	0x01DE38A4 STR X30, [X31 - 0x10]!
	0x01DE38A8 LDR X8, [X0 + 0xC0]
	0x01DE38AC CBZ X8, 0x1DE38BC
	0x01DE38B0 LDR V0, [X8 + 0x80]
	0x01DE38B4 LDR X30, [X31], #0x10
	0x01DE38B8 RET
	0x01DE38BC BL 0x1C16F20
	0x01DE38C0 STR X30, [X31 - 0x10]!
	0x01DE38C4 LDR X8, [X0 + 0xC0]
	0x01DE38C8 CBZ X8, 0x1DE38E8
	0x01DE38CC LDR X8, [X8 + 0x78]
	0x01DE38D0 CBZ X8, 0x1DE38E8
	0x01DE38D4 LDR W9, [X8 + 0x18]
	0x01DE38D8 CBZ W9, 0x1DE38EC
	0x01DE38DC LDR V0, [X8 + 0x20]
	0x01DE38E0 LDR X30, [X31], #0x10
	0x01DE38E4 RET
	0x01DE38E8 BL 0x1C16F20
	0x01DE38EC BL 0x1C16F28
	0x01DE38F0 STR X30, [X31 - 0x10]!
	0x01DE38F4 LDR X8, [X0 + 0xC0]
	0x01DE38F8 CBZ X8, 0x1DE3908
	0x01DE38FC LDR V0, [X8 + 0x4C]
	0x01DE3900 LDR X30, [X31], #0x10
	0x01DE3904 RET
	0x01DE3908 BL 0x1C16F20
	0x01DE390C STR D10, [X31 - 0x30]!
	0x01DE3910 STP D9, D8, [X31 + 0x10]
	0x01DE3914 STP X30, X19, [X31 + 0x20]
	0x01DE3918 MOV X1, X31
	0x01DE391C MOV X19, X0
	0x01DE3920 BL 0x3C32E90
	0x01DE3924 CBZ X0, 0x1DE3968
	0x01DE3928 MOV X1, X31
	0x01DE392C BL 0x3C3F58C
	0x01DE3930 LDR X0, [X19 + 0x1F0]
	0x01DE3934 CBZ X0, 0x1DE3968
	0x01DE3938 MOV X1, X31
	0x01DE393C MOV V8.16B, V0.16B
	0x01DE3940 MOV V9.16B, V1.16B
	0x01DE3944 MOV V10.16B, V2.16B
	0x01DE3948 BL 0x3C3F58C
	0x01DE394C FSUB S0, S8, S0

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move W1, 3
	007 Move V8, V2
	008 Move V9, V1
	009 Move V10, V0
	010 Move X19, X0
	011 Call ArmstrongController.set_phase, X0, X1
	012 Move S0, W31
	013 Move X0, X19
	014 Move X1, X31
	015 Call MobController.set__timerToChasing, X0, V0
	016 Move X0, X19
	017 Move V0, V10
	018 Move V1, V9
	019 Move V2, V8
	020 Move X1, X31
	021 Call MobController.set__targetPosition, X0, X1
	022 Move X9, [X19+192]
	023 Compare X9, 0
	024 JumpIfEqual {57}
	025 Move X8, [X9+56]
	026 Compare X8, 0
	027 JumpIfEqual {57}
	028 Move W10, [X8+24]
	029 Compare W10, 0
	030 JumpIfEqual {58}
	031 Move X10, [X9+88]
	032 Compare X10, 0
	033 JumpIfEqual {57}
	034 Move W11, [X10+24]
	035 Compare W11, 0
	036 JumpIfEqual {58}
	037 Move X9, [X9+96]
	038 Compare X9, 0
	039 JumpIfEqual {57}
	040 Move W11, [X9+24]
	041 Compare W11, 0
	042 JumpIfEqual {58}
	043 Move X11, [X19]
	044 Move V0, [X8+32]
	045 Move V1, [X10+32]
	046 Move V2, [X9+32]
	047 Move X3, [X11+712]
	048 Move X2, [X11+720]
	049 Move X0, X19
	050 Move X30, [X31+32]
	051 Move X19, [X31+40]
	052 Move D9, [X31+16]
	053 Move D8, [X31+24]
	054 Move W1, W31
	055 Move V10, [X31+48]
	056 CallNoReturn X3
	057 Call 0x1C17F20
	058 Call 0x1C17F28

Method: System.Void UpdateChasing()

Disassembly:
	0x01DE39E4 BL 0x3C32E90
	0x01DE39E8 CBZ X0, 0x1DE3A54
	0x01DE39EC MOV X1, X31
	0x01DE39F0 BL 0x3C3F58C
	0x01DE39F4 FMOV S3, 1
	0x01DE39F8 MOV X0, X20
	0x01DE39FC MOV X1, X31
	0x01DE3A00 BL 0x1DD1B94
	0x01DE3A04 LDR X20, [X19 + 0x1E8]
	0x01DE3A08 MOV X0, X19
	0x01DE3A0C BL 0x1DE3628
	0x01DE3A10 CBZ X20, 0x1DE3A54
	0x01DE3A14 CMP W0, 0x3
	0x01DE3A18 CSET W1, EQ
	0x01DE3A1C MOV X0, X20
	0x01DE3A20 BL 0x1DE3B14
	0x01DE3A24 LDR X20, [X19 + 0xC8]
	0x01DE3A28 MOV X0, X19
	0x01DE3A2C BL 0x1DE3628
	0x01DE3A30 CBZ X20, 0x1DE3A54
	0x01DE3A34 LDR X8, [X20]
	0x01DE3A38 CMP W0, 0x3
	0x01DE3A3C MOV X0, X20
	0x01DE3A40 LDP X20, X19, [X31 + 0x10]
	0x01DE3A44 LDP X3, X2, [X8 + 0x1B8]
	0x01DE3A48 CSET W1, EQ
	0x01DE3A4C LDR X30, [X31], #0x20
	0x01DE3A50 BR X3
	0x01DE3A54 BL 0x1C16F20
	0x01DE3A58 STR X30, [X31 - 0x30]!
	0x01DE3A5C STP X22, X21, [X31 + 0x10]
	0x01DE3A60 STP X20, X19, [X31 + 0x20]
	0x01DE3A64 LDR X21, [X0 + 0x30]
	0x01DE3A68 CBZ X21, 0x1DE3B10
	0x01DE3A6C LDR W8, [X21 + 0x18]
	0x01DE3A70 MOV X20, X0
	0x01DE3A74 MOV W19, W1
	0x01DE3A78 CMP W8, 0x1
	0x01DE3A7C B.LT 0x1DE3AB4
	0x01DE3A80 MOV W22, W31
	0x01DE3A84 CMP W22, W8
	0x01DE3A88 B.CS 0x1DE3B0C
	0x01DE3A8C ADD X8, X21, W22, 0x3, SXTW
	0x01DE3A90 LDR X0, [X8 + 0x20]
	0x01DE3A94 CBZ X0, 0x1DE3B10
	0x01DE3A98 AND W1, W19, 0x1
	0x01DE3A9C MOV X2, X31
	0x01DE3AA0 BL 0x3C13034
	0x01DE3AA4 LDR W8, [X21 + 0x18]
	0x01DE3AA8 ADD W22, W22, 0x1
	0x01DE3AAC CMP W22, W8
	0x01DE3AB0 B.LT 0x1DE3A84
	0x01DE3AB4 LDR X20, [X20 + 0xC0]
	0x01DE3AB8 CBZ X20, 0x1DE3B10
	0x01DE3ABC LDR W8, [X20 + 0x18]
	0x01DE3AC0 CMP W8, 0x1
	0x01DE3AC4 B.LT 0x1DE3AFC
	0x01DE3AC8 MOV W21, W31
	0x01DE3ACC CMP W21, W8
	0x01DE3AD0 B.CS 0x1DE3B0C
	0x01DE3AD4 ADD X8, X20, W21, 0x3, SXTW
	0x01DE3AD8 LDR X0, [X8 + 0x20]
	0x01DE3ADC CBZ X0, 0x1DE3B10
	0x01DE3AE0 AND W1, W19, 0x1
	0x01DE3AE4 MOV X2, X31
	0x01DE3AE8 BL 0x3C8F748
	0x01DE3AEC LDR W8, [X20 + 0x18]
	0x01DE3AF0 ADD W21, W21, 0x1
	0x01DE3AF4 CMP W21, W8
	0x01DE3AF8 B.LT 0x1DE3ACC
	0x01DE3AFC LDP X20, X19, [X31 + 0x20]
	0x01DE3B00 LDP X22, X21, [X31 + 0x10]
	0x01DE3B04 LDR X30, [X31], #0x30
	0x01DE3B08 RET
	0x01DE3B0C BL 0x1C16F28
	0x01DE3B10 BL 0x1C16F20
	0x01DE3B14 STP X30, X21, [X31 - 0x20]!
	0x01DE3B18 STP X20, X19, [X31 + 0x10]
	0x01DE3B1C LDRB W10, [X0 + 0xD8]
	0x01DE3B20 AND W9, W1, 0x1
	0x01DE3B24 CMP W10, W9
	0x01DE3B28 B.NE 0x1DE3B38
	0x01DE3B2C LDP X20, X19, [X31 + 0x10]
	0x01DE3B30 LDP X30, X21, [X31], #0x20
	0x01DE3B34 RET
	0x01DE3B38 MOV W8, W1
	0x01DE3B3C LDR X1, [X0 + 0xD0]
	0x01DE3B40 MOV X19, X0
	0x01DE3B44 STRB W9, [X0 + 0xD8]
	0x01DE3B48 TBZ X8, 0x0, 0x1DE3B70
	0x01DE3B4C CBNZ X1, 0x1DE3BD0
	0x01DE3B50 MOV X0, X19
	0x01DE3B54 BL 0x1DE5A7C
	0x01DE3B58 MOV X1, X0
	0x01DE3B5C STR X0, [X19 + 0xD0]
	0x01DE3B60 MOV X0, X19
	0x01DE3B64 MOV X2, X31
	0x01DE3B68 BL 0x3C366FC
	0x01DE3B6C B 0x1DE3BD0
	0x01DE3B70 CBZ X1, 0x1DE3B84
	0x01DE3B74 MOV X0, X19
	0x01DE3B78 MOV X2, X31
	0x01DE3B7C BL 0x3C36834
	0x01DE3B80 STR X31, [X19 + 0xD0]
	0x01DE3B84 LDR X20, [X19 + 0xB0]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x25F6000
	008 Move W8, [X20+3211]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2311000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3211], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call MobController.UpdateChasing, X0
	022 Move X0, [X19+208]
	023 Compare X0, 0
	024 JumpIfEqual {122}
	025 Move X20, 0x2311000
	026 Move X20, [X20+1432]
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X0, X19
	030 Move X1, X31
	031 Move V8, V0
	032 Move V9, V1
	033 Move V10, V2
	034 Call MobController.get__targetPosition, X0
	035 Move X0, [X20]
	036 Move X20, [X19+352]
	037 Subtract S0, S8, S0
	038 Subtract S1, S9, S1
	039 Move W8, [X0+224]
	040 Subtract S2, S10, S2
	041 Multiply S0, S0, S0
	042 Multiply S1, S1, S1
	043 Add S8, S0, S1
	044 Multiply S9, S2, S2
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Move X1, X31
	050 Move X2, X31
	051 Add S9, S9, S8
	052 Call Object.op_Inequality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {80}
	057 Move X0, [X19+352]
	058 Compare X0, 0
	059 JumpIfEqual {122}
	060 Move X1, X31
	061 Call NetPlayer.get_isDie, X0
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfEqual {80}
	066 Move X0, [X19+192]
	067 Compare X0, 0
	068 JumpIfEqual {122}
	069 Move X1, X31
	070 Call MobData.get_attackRangeSqr, X0
	071 NotImplemented "Instruction FCMP not yet implemented."
	072 Move X1, [X19+352]
	073 Move X0, X19
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X30, [X31+24]
	077 Move D9, [X31+8]
	078 Move D8, [X31+16]
	079 Move V10, [X31+48]
	080 Move X0, X19
	081 Move X1, X31
	082 Call MobController.get__timerToChasing, X0
	083 Move X0, X19
	084 Move X1, X31
	085 Move V8, V0
	086 Call MobController.get_deltaTime, X0
	087 Add S0, S8, S0
	088 Move X0, X19
	089 Move X1, X31
	090 Call MobController.set__timerToChasing, X0, V0
	091 Move X0, X19
	092 Move X1, X31
	093 Call MobController.get__timerToChasing, X0
	094 Move X0, [X19+192]
	095 Compare X0, 0
	096 JumpIfEqual {122}
	097 Move V1, [X0+104]
	098 NotImplemented "Instruction FCMP not yet implemented."
	099 Move X1, X31
	100 Call MobData.get_attackRangeSqr, X0
	101 NotImplemented "Instruction FCMP not yet implemented."
	102 Move X0, X19
	103 Call ArmstrongController.SetSearching, X0
	104 Move X0, X19
	105 Call ArmstrongController.SetRoaming, X0
	106 Move X20, [X19+232]
	107 Move X0, X19
	108 Move X1, X31
	109 Call MobController.get__targetPosition, X0
	110 Compare X20, 0
	111 JumpIfEqual {122}
	112 Move X0, X20
	113 Move X20, [X31+32]
	114 Move X19, [X31+40]
	115 Move X30, [X31+24]
	116 Move D9, [X31+8]
	117 Move D8, [X31+16]
	118 Move X1, X31
	119 Move V10, [X31+48]
	120 Call NavMeshAgent.SetDestination, X0, X1
	121 Return 
	122 Call 0x1C17F20

Method: System.Void SetSearching()

Disassembly:
	0x01DE4118 LDR X8, [X8 + 0x5A8]
	0x01DE411C LDR X0, [X8]
	0x01DE4120 LDR W8, [X0 + 0xE0]
	0x01DE4124 CBNZ W8, 0x1DE412C
	0x01DE4128 BL 0x1C16DFC
	0x01DE412C FMUL S0, S8, S8
	0x01DE4130 FMUL S1, S9, S9
	0x01DE4134 FADD S0, S0, S1
	0x01DE4138 FMUL S1, S10, S10
	0x01DE413C FADD S0, S1, S0
	0x01DE4140 LDR V1, [X31 + 0x14]
	0x01DE4144 FSQRT S0, S0
	0x01DE4148 FCMP S0, S1
	0x01DE414C B.LE 0x1DE4160
	0x01DE4150 FDIV S12, S8, S0
	0x01DE4154 FDIV S11, S9, S0
	0x01DE4158 FDIV S13, S10, S0
	0x01DE415C B 0x1DE4190
	0x01DE4160 ADRP X8, 0x25F4000
	0x01DE4164 LDRB W8, [X8 + 0x783]
	0x01DE4168 CBNZ W8, 0x1DE4180
	0x01DE416C MOV X0, X20
	0x01DE4170 BL 0x1C16CF4
	0x01DE4174 ADRP X8, 0x25F4000
	0x01DE4178 MOVZ W9, 0x1
	0x01DE417C STRB W9, [X8 + 0x783]
	0x01DE4180 LDR X8, [X20]
	0x01DE4184 LDR X8, [X8 + 0xB8]
	0x01DE4188 LDP S12, S11, [X8]
	0x01DE418C LDR V13, [X8 + 0x8]
	0x01DE4190 LDR X0, [X22 + 0x90]
	0x01DE4194 CBZ X0, 0x1DE45AC
	0x01DE4198 MOV X1, X31
	0x01DE419C BL 0x3C3F58C
	0x01DE41A0 LDR X0, [X29]
	0x01DE41A4 MOV V8.16B, V0.16B
	0x01DE41A8 MOV V9.16B, V1.16B
	0x01DE41AC MOV V10.16B, V2.16B
	0x01DE41B0 LDR W8, [X0 + 0xE0]
	0x01DE41B4 CBNZ W8, 0x1DE41C0
	0x01DE41B8 BL 0x1C16DFC
	0x01DE41BC LDR X0, [X29]
	0x01DE41C0 LDR X8, [X0 + 0xB8]
	0x01DE41C4 LDR W0, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 4
	004 Move X19, X0
	005 Call ArmstrongController.set_phase, X0, X1
	006 Move S0, W31
	007 Move X0, X19
	008 Move X1, X31
	009 Call MobController.set__timerToSearching, X0, V0
	010 Move X9, [X19+192]
	011 Compare X9, 0
	012 JumpIfEqual {48}
	013 Move X8, [X9+56]
	014 Compare X8, 0
	015 JumpIfEqual {48}
	016 Move W10, [X8+24]
	017 Compare W10, 0
	018 JumpIfEqual {49}
	019 Move X10, [X9+88]
	020 Compare X10, 0
	021 JumpIfEqual {48}
	022 Move W11, [X10+24]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X9, [X9+96]
	025 Compare X9, 0
	026 JumpIfEqual {48}
	027 Move W11, [X9+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X11, [X19]
	030 Move V0, [X8+32]
	031 Move V1, [X10+36]
	032 Move V2, [X9+36]
	033 Move X8, [X11+712]
	034 Move X2, [X11+720]
	035 Move X0, X19
	036 Move W1, W31
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X0, X19
	039 Move X1, X31
	040 Call MobController.get__targetPosition, X0
	041 Move X8, [X19]
	042 Move X0, X19
	043 Move X2, [X8+888]
	044 Move X1, [X8+896]
	045 Move X30, [X31+16]
	046 Move X19, [X31+24]
	047 CallNoReturn X2
	048 Call 0x1C17F20
	049 Call 0x1C17F28

Method: System.Void UpdateSearching()

Disassembly:
	0x01DE32C0 MOV X2, X31
	0x01DE32C4 MOV X19, X0
	0x01DE32C8 BL 0x1DEB2A4
	0x01DE32CC LDR W1, [X19 + 0x1A4]
	0x01DE32D0 MOV X0, X19
	0x01DE32D4 LDP X30, X19, [X31], #0x10
	0x01DE32D8 B 0x1DE1B3C
	0x01DE32DC STP X30, X19, [X31 - 0x10]!
	0x01DE32E0 MOV X1, X31
	0x01DE32E4 MOV X19, X0
	0x01DE32E8 BL 0x1DEB39C
	0x01DE32EC MOV X0, X19
	0x01DE32F0 BL 0x1DE1ADC
	0x01DE32F4 STR W0, [X19 + 0x1A4]
	0x01DE32F8 LDP X30, X19, [X31], #0x10
	0x01DE32FC RET
	0x01DE3300 STP D13, D12, [X31 - 0x50]!
	0x01DE3304 STP D11, D10, [X31 + 0x10]
	0x01DE3308 STP D9, D8, [X31 + 0x20]
	0x01DE330C STR X30, [X31 + 0x30]
	0x01DE3310 STP X20, X19, [X31 + 0x40]
	0x01DE3314 CBZ X1, 0x1DE33E4
	0x01DE3318 MOV X19, X0
	0x01DE331C MOV X0, X1
	0x01DE3320 MOV X1, X31
	0x01DE3324 BL 0x3C32E90
	0x01DE3328 CBZ X0, 0x1DE33E4
	0x01DE332C MOV X1, X31
	0x01DE3330 BL 0x3C3F58C
	0x01DE3334 LDR X8, [X19 + 0x10]
	0x01DE3338 CBZ X8, 0x1DE33E4
	0x01DE333C LDR X0, [X8 + 0xD0]
	0x01DE3340 CBZ X0, 0x1DE33E4
	0x01DE3344 MOV X1, X31
	0x01DE3348 MOV V8.16B, V0.16B
	0x01DE334C MOV V9.16B, V1.16B
	0x01DE3350 MOV V10.16B, V2.16B
	0x01DE3354 BL 0x3C3F58C
	0x01DE3358 ADRP X20, 0x25F5000
	0x01DE335C LDRB W8, [X20 + 0x85C]
	0x01DE3360 MOV V11.16B, V0.16B
	0x01DE3364 MOV V12.16B, V1.16B
	0x01DE3368 MOV V13.16B, V2.16B
	0x01DE336C CBNZ W8, 0x1DE3384
	0x01DE3370 ADRP X0, 0x2310000
	0x01DE3374 LDR X0, [X0 + 0x5A8]
	0x01DE3378 BL 0x1C16CF4
	0x01DE337C MOVZ W8, 0x1
	0x01DE3380 STRB W8, [X20 + 0x85C]
	0x01DE3384 ADRP X8, 0x2310000
	0x01DE3388 LDR X8, [X8 + 0x5A8]
	0x01DE338C FSUB S11, S8, S11
	0x01DE3390 FSUB S9, S9, S12
	0x01DE3394 FSUB S8, S10, S13
	0x01DE3398 LDR X0, [X8]
	0x01DE339C LDR W8, [X0 + 0xE0]
	0x01DE33A0 CBNZ W8, 0x1DE33A8
	0x01DE33A4 BL 0x1C16DFC
	0x01DE33A8 FMUL S0, S11, S11
	0x01DE33AC FMUL S1, S9, S9
	0x01DE33B0 LDR V2, [X19 + 0x18]
	0x01DE33B4 FADD S0, S0, S1
	0x01DE33B8 FMUL S1, S8, S8
	0x01DE33BC FADD S0, S1, S0
	0x01DE33C0 LDP X20, X19, [X31 + 0x40]
	0x01DE33C4 LDR X30, [X31 + 0x30]
	0x01DE33C8 LDP D9, D8, [X31 + 0x20]
	0x01DE33CC LDP D11, D10, [X31 + 0x10]
	0x01DE33D0 FSQRT S0, S0
	0x01DE33D4 FCMP S0, S2
	0x01DE33D8 CSET W0, MI
	0x01DE33DC LDP D13, D12, [X31], #0x50
	0x01DE33E0 RET
	0x01DE33E4 BL 0x1C16F20
	0x01DE33E8 STP X30, X19, [X31 - 0x10]!
	0x01DE33EC MOV X1, X31
	0x01DE33F0 MOV X19, X0
	0x01DE33F4 BL 0x1DF9724
	0x01DE33F8 LDR X0, [X19 + 0x40]
	0x01DE33FC CBZ X0, 0x1DE3418
	0x01DE3400 MOV X1, X31
	0x01DE3404 BL 0x3C3EB78
	0x01DE3408 STP S0, S1, [X19 + 0xB0]
	0x01DE340C STR S2, [X19 + 0xB8]
	0x01DE3410 LDP X30, X19, [X31], #0x10
	0x01DE3414 RET
	0x01DE3418 BL 0x1C16F20
	0x01DE341C STP D9, D8, [X31 - 0x30]!
	0x01DE3420 STR X30, [X31 + 0x10]
	0x01DE3424 STP X20, X19, [X31 + 0x20]
	0x01DE3428 MOV X1, X31
	0x01DE342C MOV X19, X0
	0x01DE3430 BL 0x1DE76B0
	0x01DE3434 LDRB W8, [X19 + 0xA9]
	0x01DE3438 CBZ W8, 0x1DE347C
	0x01DE343C MOV X0, X31
	0x01DE3440 BL 0x3C3C6C4
	0x01DE3444 LDR X20, [X19 + 0x40]
	0x01DE3448 CBZ X20, 0x1DE348C

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25F6000
	006 Move W8, [X20+3212]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x2316000
	013 Move X0, [X0+3248]
	014 Call 0x1C17CF4
	015 Move X0, 0x2316000
	016 Move X0, [X0+3184]
	017 Call 0x1C17CF4
	018 Move X0, 0x2316000
	019 Move X0, [X0+3136]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3212], W8
	023 Move X0, X19
	024 Move X1, X31
	025 Call MobController.get__timerToSearching, X0
	026 Move X0, X19
	027 Move X1, X31
	028 Move V8, V0
	029 Call MobController.get_deltaTime, X0
	030 Add S0, S8, S0
	031 Move X0, X19
	032 Move X1, X31
	033 Call MobController.set__timerToSearching, X0, V0
	034 Move X0, X19
	035 Move X1, X31
	036 Call MobController.get__timerToSearching, X0
	037 Move X8, [X19+192]
	038 Compare X8, 0
	039 JumpIfEqual {115}
	040 Move V1, [X8+108]
	041 NotImplemented "Instruction FCMP not yet implemented."
	042 Move X8, 0x2316000
	043 Move X8, [X8+3136]
	044 Add X20, X19, 376
	045 Move X0, [X8]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X19
	051 Move X1, X20
	052 Move X2, X31
	053 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {106}
	058 Move X20, [X20]
	059 Compare X20, 0
	060 JumpIfEqual {115}
	061 Move W1, [X20+24]
	062 Move W0, W31
	063 Move X2, X31
	064 Call Random.Range, X0, X1
	065 Move X8, 0x2316000
	066 Move X8, [X8+3184]
	067 Move W1, W0
	068 Move X0, X20
	069 Move X2, [X8]
	070 Call List`1<Object>.get_Item, X0, X1
	071 Move X8, [X19]
	072 Move X1, X0
	073 Move X0, X19
	074 Move X9, [X8+952]
	075 Move X2, [X8+960]
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Move X0, [X19+352]
	078 Compare X0, 0
	079 JumpIfEqual {115}
	080 Move X1, X31
	081 Call Component.get_transform, X0
	082 Compare X0, 0
	083 JumpIfEqual {115}
	084 Move X1, X31
	085 Call Transform.get_position, X0
	086 Move X0, X19
	087 Move X1, X31
	088 Call MobController.set__targetPosition, X0, X1
	089 Move X0, X19
	090 Move X1, X31
	091 Call MobController.get__targetPosition, X0
	092 Move X0, X19
	093 Move X20, [X31+16]
	094 Move X19, [X31+24]
	095 Move X30, [X31+8]
	096 Move V8, [X31+32]
	097 Call ArmstrongController.SetChasing, X0, X1
	098 Return 
	099 Move X0, X19
	100 Move X20, [X31+16]
	101 Move X19, [X31+24]
	102 Move X30, [X31+8]
	103 Move V8, [X31+32]
	104 Call ArmstrongController.SetRoaming, X0
	105 Return 
	106 Move X8, [X19]
	107 Move X0, X19
	108 Move X20, [X31+16]
	109 Move X19, [X31+24]
	110 Move X30, [X31+8]
	111 Move X2, [X8+904]
	112 Move X1, [X8+912]
	113 Move V8, [X31+32]
	114 CallNoReturn X2
	115 Call 0x1C17F20

Method: System.Void SetPunchAndHold(AnimalCompany.NetPlayer targetPlayer)

Disassembly:
	0x01DE3B88 CBZ X20, 0x1DE3BEC
	0x01DE3B8C LDR W8, [X20 + 0x18]
	0x01DE3B90 CMP W8, 0x1
	0x01DE3B94 B.LT 0x1DE3BD0
	0x01DE3B98 MOV W21, W31
	0x01DE3B9C CMP W21, W8
	0x01DE3BA0 B.CS 0x1DE3BF0
	0x01DE3BA4 ADD X8, X20, W21, 0x3, SXTW
	0x01DE3BA8 LDR X0, [X8 + 0x20]
	0x01DE3BAC CBZ X0, 0x1DE3BEC
	0x01DE3BB0 FMOV S0, W31
	0x01DE3BB4 MOV W1, W31
	0x01DE3BB8 MOV X2, X31
	0x01DE3BBC BL 0x3C16F50
	0x01DE3BC0 LDR W8, [X20 + 0x18]
	0x01DE3BC4 ADD W21, W21, 0x1
	0x01DE3BC8 CMP W21, W8
	0x01DE3BCC B.LT 0x1DE3B9C
	0x01DE3BD0 LDR X0, [X19 + 0xB8]
	0x01DE3BD4 CBZ X0, 0x1DE3BEC
	0x01DE3BD8 LDRB W1, [X19 + 0xD8]
	0x01DE3BDC LDP X20, X19, [X31 + 0x10]
	0x01DE3BE0 MOV X2, X31
	0x01DE3BE4 LDP X30, X21, [X31], #0x20
	0x01DE3BE8 B 0x3C13034
	0x01DE3BEC BL 0x1C16F20
	0x01DE3BF0 BL 0x1C16F28
	0x01DE3BF4 STP X30, X19, [X31 - 0x10]!
	0x01DE3BF8 LDR X19, [X0 + 0x1E8]
	0x01DE3BFC BL 0x1DE36E8
	0x01DE3C00 CBZ X19, 0x1DE3C14
	0x01DE3C04 AND W1, W0, 0x1
	0x01DE3C08 MOV X0, X19
	0x01DE3C0C LDP X30, X19, [X31], #0x10
	0x01DE3C10 B 0x1DE3A58
	0x01DE3C14 BL 0x1C16F20
	0x01DE3C18 STP X30, X19, [X31 - 0x10]!
	0x01DE3C1C MOV X1, X31
	0x01DE3C20 MOV X19, X0
	0x01DE3C24 BL 0x1DE8598
	0x01DE3C28 LDR X0, [X19 + 0xE8]
	0x01DE3C2C CBZ X0, 0x1DE3C7C
	0x01DE3C30 MOV W1, W31
	0x01DE3C34 MOV X2, X31
	0x01DE3C38 BL 0x3C32410
	0x01DE3C3C LDR X0, [X19 + 0x40]
	0x01DE3C40 CBZ X0, 0x1DE3C7C
	0x01DE3C44 MOV X1, X31
	0x01DE3C48 BL 0x1E93668
	0x01DE3C4C TBZ X0, 0x0, 0x1DE3C68
	0x01DE3C50 MOVZ W1, 0x1
	0x01DE3C54 MOV X0, X19
	0x01DE3C58 BL 0x1DE3688
	0x01DE3C5C MOV X0, X19
	0x01DE3C60 MOV W1, W31
	0x01DE3C64 BL 0x1DE3750
	0x01DE3C68 MOV X0, X19
	0x01DE3C6C BL 0x1DE396C
	0x01DE3C70 MOV X0, X19
	0x01DE3C74 LDP X30, X19, [X31], #0x10
	0x01DE3C78 B 0x1DE3BF4
	0x01DE3C7C BL 0x1C16F20
	0x01DE3C80 STP X30, X19, [X31 - 0x10]!
	0x01DE3C84 MOVZ W1, 0x1
	0x01DE3C88 MOV X19, X0
	0x01DE3C8C BL 0x1DE3688
	0x01DE3C90 MOV X0, X19
	0x01DE3C94 MOV W1, W31
	0x01DE3C98 LDP X30, X19, [X31], #0x10
	0x01DE3C9C B 0x1DE3750
	0x01DE3CA0 STP X30, X19, [X31 - 0x10]!
	0x01DE3CA4 MOV X1, X31
	0x01DE3CA8 MOV X19, X0
	0x01DE3CAC BL 0x1DE89FC
	0x01DE3CB0 LDR X0, [X19 + 0x40]
	0x01DE3CB4 CBZ X0, 0x1DE3CE8
	0x01DE3CB8 MOV X1, X31
	0x01DE3CBC BL 0x1E93668
	0x01DE3CC0 TBZ X0, 0x0, 0x1DE3CE0
	0x01DE3CC4 MOVZ W1, 0x1
	0x01DE3CC8 MOV X0, X19
	0x01DE3CCC BL 0x1DE3688
	0x01DE3CD0 MOV X0, X19
	0x01DE3CD4 MOV W1, W31
	0x01DE3CD8 LDP X30, X19, [X31], #0x10
	0x01DE3CDC B 0x1DE3750
	0x01DE3CE0 LDP X30, X19, [X31], #0x10
	0x01DE3CE4 RET
	0x01DE3CE8 BL 0x1C16F20
	0x01DE3CEC STP X30, X19, [X31 - 0x10]!
	0x01DE3CF0 MOV X1, X31
	0x01DE3CF4 MOV X19, X0
	0x01DE3CF8 BL 0x1DE8BF8
	0x01DE3CFC LDR X0, [X19 + 0x40]
	0x01DE3D00 CBZ X0, 0x1DE3D28
	0x01DE3D04 MOV X1, X31
	0x01DE3D08 BL 0x1E93668
	0x01DE3D0C TBZ X0, 0x0, 0x1DE3D20
	0x01DE3D10 MOVZ W1, 0x4
	0x01DE3D14 MOV X0, X19
	0x01DE3D18 LDP X30, X19, [X31], #0x10
	0x01DE3D1C B 0x1DE3688
	0x01DE3D20 LDP X30, X19, [X31], #0x10
	0x01DE3D24 RET
	0x01DE3D28 BL 0x1C16F20
	0x01DE3D2C STR X30, [X31 - 0x20]!
	0x01DE3D30 STP X20, X19, [X31 + 0x10]
	0x01DE3D34 MOV X1, X31
	0x01DE3D38 MOV X20, X0
	0x01DE3D3C BL 0x1DF5C58
	0x01DE3D40 LDR X19, [X20 + 0x1E8]
	0x01DE3D44 MOV X0, X20
	0x01DE3D48 MOV X1, X31
	0x01DE3D4C BL 0x1DF00A4
	0x01DE3D50 CBZ X19, 0x1DE3D6C
	0x01DE3D54 ORN W8, W31, W0, 0x0
	0x01DE3D58 MOV X0, X19
	0x01DE3D5C LDP X20, X19, [X31 + 0x10]
	0x01DE3D60 AND W1, W8, 0x1
	0x01DE3D64 LDR X30, [X31], #0x20
	0x01DE3D68 B 0x1DE3A58
	0x01DE3D6C BL 0x1C16F20
	0x01DE3D70 SUB X31, X31, 0x40
	0x01DE3D74 STR X30, [X31 + 0x20]
	0x01DE3D78 STP X20, X19, [X31 + 0x30]
	0x01DE3D7C ADRP X20, 0x25F5000
	0x01DE3D80 LDRB W8, [X20 + 0xC92]
	0x01DE3D84 MOV X19, X0
	0x01DE3D88 TBNZ X8, 0x0, 0x1DE3DA0
	0x01DE3D8C ADRP X0, 0x2315000
	0x01DE3D90 LDR X0, [X0 + 0xD10]
	0x01DE3D94 BL 0x1C16CF4
	0x01DE3D98 MOVZ W8, 0x1
	0x01DE3D9C STRB W8, [X20 + 0xC92]
	0x01DE3DA0 MOV X0, X19
	0x01DE3DA4 MOV X1, X31
	0x01DE3DA8 BL 0x1DE9038
	0x01DE3DAC MOV X0, X19
	0x01DE3DB0 BL 0x1DE3628
	0x01DE3DB4 CMP W0, 0x2
	0x01DE3DB8 B.EQ 0x1DE3DD0
	0x01DE3DBC CMP W0, 0x1
	0x01DE3DC0 B.NE 0x1DE3DD8
	0x01DE3DC4 MOV X0, X19
	0x01DE3DC8 BL 0x1DE3E3C
	0x01DE3DCC B 0x1DE3DD8
	0x01DE3DD0 MOV X0, X19
	0x01DE3DD4 BL 0x1DE46C0
	0x01DE3DD8 BL 0x1DD6AE8
	0x01DE3DDC TBZ X0, 0x0, 0x1DE3E2C
	0x01DE3DE0 LDR X20, [X19 + 0x198]
	0x01DE3DE4 CBZ X20, 0x1DE3E2C
	0x01DE3DE8 MOV X0, X19
	0x01DE3DEC BL 0x1DE3628
	0x01DE3DF0 ADRP X8, 0x2315000
	0x01DE3DF4 LDR X8, [X8 + 0xD10]
	0x01DE3DF8 MOVN X9, 0x0
	0x01DE3DFC STR W0, [X31 + 0x18]
	0x01DE3E00 ADD X0, X31, 0x8
	0x01DE3E04 LDR X8, [X8]
	0x01DE3E08 MOV X1, X31
	0x01DE3E0C STP X8, X9, [X31 + 0x8]
	0x01DE3E10 BL 0x33B162C
	0x01DE3E14 LDR X8, [X20 + 0x40]
	0x01DE3E18 LDR X9, [X20 + 0x18]
	0x01DE3E1C LDR X2, [X20 + 0x28]
	0x01DE3E20 MOV X1, X0
	0x01DE3E24 MOV X0, X8
	0x01DE3E28 BLR X9
	0x01DE3E2C LDP X20, X19, [X31 + 0x30]
	0x01DE3E30 LDR X30, [X31 + 0x20]
	0x01DE3E34 ADD X31, X31, 0x40
	0x01DE3E38 RET
	0x01DE3E3C SUB X31, X31, 0x190
	0x01DE3E40 STP D15, D14, [X31 + 0xF0]
	0x01DE3E44 STP D13, D12, [X31 + 0x100]
	0x01DE3E48 STP D11, D10, [X31 + 0x110]
	0x01DE3E4C STP D9, D8, [X31 + 0x120]
	0x01DE3E50 STP X29, X30, [X31 + 0x130]
	0x01DE3E54 STP X28, X27, [X31 + 0x140]
	0x01DE3E58 STP X26, X25, [X31 + 0x150]
	0x01DE3E5C STP X24, X23, [X31 + 0x160]
	0x01DE3E60 STP X22, X21, [X31 + 0x170]
	0x01DE3E64 STP X20, X19, [X31 + 0x180]
	0x01DE3E68 ADRP X20, 0x25F5000
	0x01DE3E6C LDRB W8, [X20 + 0xC93]
	0x01DE3E70 MOV X19, X0
	0x01DE3E74 ADD X21, X31, 0xA0
	0x01DE3E78 TBNZ X8, 0x0, 0x1DE3EFC
	0x01DE3E7C ADRP X0, 0x2315000
	0x01DE3E80 LDR X0, [X0 + 0xC20]
	0x01DE3E84 BL 0x1C16CF4
	0x01DE3E88 ADRP X0, 0x2315000
	0x01DE3E8C LDR X0, [X0 + 0xC28]
	0x01DE3E90 BL 0x1C16CF4
	0x01DE3E94 ADRP X0, 0x2315000
	0x01DE3E98 LDR X0, [X0 + 0xC30]
	0x01DE3E9C BL 0x1C16CF4
	0x01DE3EA0 ADRP X0, 0x2310000
	0x01DE3EA4 LDR X0, [X0 + 0x5D8]
	0x01DE3EA8 BL 0x1C16CF4
	0x01DE3EAC ADRP X0, 0x2315000
	0x01DE3EB0 LDR X0, [X0 + 0xC38]
	0x01DE3EB4 BL 0x1C16CF4
	0x01DE3EB8 ADRP X0, 0x2315000
	0x01DE3EBC LDR X0, [X0 + 0xC40]
	0x01DE3EC0 BL 0x1C16CF4
	0x01DE3EC4 ADRP X0, 0x2310000
	0x01DE3EC8 LDR X0, [X0 + 0x5F8]
	0x01DE3ECC BL 0x1C16CF4
	0x01DE3ED0 ADRP X0, 0x2310000
	0x01DE3ED4 LDR X0, [X0 + 0x638]
	0x01DE3ED8 BL 0x1C16CF4
	0x01DE3EDC ADRP X0, 0x2315000
	0x01DE3EE0 LDR X0, [X0 + 0xD18]
	0x01DE3EE4 BL 0x1C16CF4
	0x01DE3EE8 ADRP X0, 0x2312000
	0x01DE3EEC LDR X0, [X0 + 0x9B0]
	0x01DE3EF0 BL 0x1C16CF4
	0x01DE3EF4 MOVZ W8, 0x1
	0x01DE3EF8 STRB W8, [X20 + 0xC93]
	0x01DE3EFC MOVI V0.2D, 0x0
	0x01DE3F00 STP X31, X31, [X31 + 0xE0]
	0x01DE3F04 STP X31, X31, [X31 + 0xD0]
	0x01DE3F08 STUR V0, [X21 + 0x1C]
	0x01DE3F0C STR V0, [X21 + 0x1]
	0x01DE3F10 STR V0, [X31 + 0xA]
	0x01DE3F14 STUR V0, [X31 + 0x8C]
	0x01DE3F18 STP V0, V0, [X31 + 0x70]
	0x01DE3F1C STUR V0, [X31 + 0x5C]
	0x01DE3F20 STP V0, V0, [X31 + 0x40]
	0x01DE3F24 LDR W8, [X19 + 0x1B4]
	0x01DE3F28 ADD W8, W8, 0x1
	0x01DE3F2C CMP W8, 0x8
	0x01DE3F30 STR W8, [X19 + 0x1B4]
	0x01DE3F34 B.LT 0x1DE456C
	0x01DE3F38 STR W31, [X19 + 0x1B4]
	0x01DE3F3C ADRP X23, 0x25F5000
	0x01DE3F40 LDRB W8, [X23 + 0x783]
	0x01DE3F44 ADD X22, X19, 0x1C4
	0x01DE3F48 CBNZ W8, 0x1DE3F60
	0x01DE3F4C ADRP X0, 0x2310000
	0x01DE3F50 LDR X0, [X0 + 0x5A0]
	0x01DE3F54 BL 0x1C16CF4
	0x01DE3F58 MOVZ W8, 0x1
	0x01DE3F5C STRB W8, [X23 + 0x783]
	0x01DE3F60 ADRP X20, 0x2310000
	0x01DE3F64 LDR X20, [X20 + 0x5A0]
	0x01DE3F68 MOV X0, X19
	0x01DE3F6C MOV X1, X31
	0x01DE3F70 LDR X8, [X20]
	0x01DE3F74 LDR X9, [X8 + 0xB8]
	0x01DE3F78 LDR V0, [X9]
	0x01DE3F7C LDR V1, [X9 + 0x8]
	0x01DE3F80 STR D0, [X19 + 0x1B8]
	0x01DE3F84 STR S1, [X19 + 0x1C0]
	0x01DE3F88 LDR X9, [X8 + 0xB8]
	0x01DE3F8C LDR V0, [X9]
	0x01DE3F90 LDR V1, [X9 + 0x8]
	0x01DE3F94 STR D0, [X22]
	0x01DE3F98 STR S1, [X19 + 0x1CC]
	0x01DE3F9C LDR X9, [X8 + 0xB8]
	0x01DE3FA0 LDR V0, [X9]
	0x01DE3FA4 LDR V1, [X9 + 0x8]
	0x01DE3FA8 STR D0, [X19 + 0x1D0]
	0x01DE3FAC STR S1, [X19 + 0x1D8]
	0x01DE3FB0 LDR X8, [X8 + 0xB8]
	0x01DE3FB4 LDR V0, [X8]
	0x01DE3FB8 LDR V1, [X8 + 0x8]
	0x01DE3FBC STR D0, [X22 + 0x18]
	0x01DE3FC0 STR S1, [X19 + 0x1E4]
	0x01DE3FC4 BL 0x3C32E90
	0x01DE3FC8 CBZ X0, 0x1DE45B8
	0x01DE3FCC MOV X1, X31
	0x01DE3FD0 BL 0x3C3F58C
	0x01DE3FD4 MOV X0, X19
	0x01DE3FD8 MOV V8.16B, V0.16B
	0x01DE3FDC MOV V9.16B, V1.16B
	0x01DE3FE0 MOV V10.16B, V2.16B
	0x01DE3FE4 BL 0x1DE3874
	0x01DE3FE8 ADRP X8, 0x2315000
	0x01DE3FEC LDR X8, [X8 + 0xC40]
	0x01DE3FF0 MOV V11.16B, V0.16B
	0x01DE3FF4 LDR X0, [X8]
	0x01DE3FF8 LDR W8, [X0 + 0xE0]
	0x01DE3FFC CBNZ W8, 0x1DE4004
	0x01DE4000 BL 0x1C16DFC
	0x01DE4004 ADD X1, X31, 0xE8
	0x01DE4008 MOV X0, X19
	0x01DE400C MOV V0.16B, V8.16B
	0x01DE4010 MOV V1.16B, V9.16B
	0x01DE4014 MOV V2.16B, V10.16B
	0x01DE4018 MOV V3.16B, V11.16B
	0x01DE401C MOV X2, X31
	0x01DE4020 BL 0x1DE9804
	0x01DE4024 TBZ X0, 0x0, 0x1DE456C
	0x01DE4028 LDRB W8, [X23 + 0x783]
	0x01DE402C CBNZ W8, 0x1DE4044
	0x01DE4030 ADRP X0, 0x230F000
	0x01DE4034 LDR X0, [X0 + 0x5A0]
	0x01DE4038 BL 0x1C16CF4
	0x01DE403C MOVZ W8, 0x1
	0x01DE4040 STRB W8, [X23 + 0x783]
	0x01DE4044 LDR X0, [X31 + 0xE8]
	0x01DE4048 CBZ X0, 0x1DE45B8
	0x01DE404C ADRP X8, 0x2314000
	0x01DE4050 LDR X8, [X8 + 0xC38]
	0x01DE4054 LDR X1, [X8]
	0x01DE4058 ADD X8, X31, 0x28
	0x01DE405C BL 0x301CB58
	0x01DE4060 LDUR V0, [X31 + 0x28]
	0x01DE4064 ADRP X9, 0xFFFFFFFFFED06000
	0x01DE4068 ADRP X29, 0x230F000
	0x01DE406C ADRP X26, 0x230F000
	0x01DE4070 LDR X8, [X31 + 0x38]
	0x01DE4074 LDR X29, [X29 + 0x5D8]
	0x01DE4078 LDR X26, [X26 + 0x5F8]
	0x01DE407C STR V0, [X21 + 0x3]
	0x01DE4080 LDR V0, [X9 + 0x17C]
	0x01DE4084 STR X8, [X31 + 0xE0]
	0x01DE4088 ADRP X21, 0x25F4000
	0x01DE408C STR S0, [X31 + 0x14]
	0x01DE4090 ADRP X8, 0x2314000
	0x01DE4094 LDR X8, [X8 + 0xC28]
	0x01DE4098 LDR X1, [X8]
	0x01DE409C ADD X0, X31, 0xD0
	0x01DE40A0 BL 0x2BC4350
	0x01DE40A4 TBZ X0, 0x0, 0x1DE4558
	0x01DE40A8 LDR X22, [X31 + 0xE0]
	0x01DE40AC CBZ X22, 0x1DE45B0
	0x01DE40B0 LDR X0, [X22 + 0x90]
	0x01DE40B4 CBZ X0, 0x1DE45B4
	0x01DE40B8 MOV X1, X31
	0x01DE40BC BL 0x3C3F58C
	0x01DE40C0 STR S0, [X19 + 0x1B8]
	0x01DE40C4 STR S1, [X19 + 0x1BC]
	0x01DE40C8 STR S2, [X19 + 0x1C0]
	0x01DE40CC LDR X0, [X22 + 0x90]
	0x01DE40D0 CBZ X0, 0x1DE45A8
	0x01DE40D4 MOV X1, X31
	0x01DE40D8 BL 0x3C3FA04
	0x01DE40DC MOV X0, X31
	0x01DE40E0 BL 0x1DC0890
	0x01DE40E4 ADRP X8, 0x25F4000
	0x01DE40E8 LDRB W8, [X8 + 0x785]
	0x01DE40EC MOV V8.16B, V0.16B
	0x01DE40F0 MOV V9.16B, V1.16B
	0x01DE40F4 MOV V10.16B, V2.16B
	0x01DE40F8 CBNZ W8, 0x1DE4114
	0x01DE40FC ADRP X0, 0x230F000
	0x01DE4100 LDR X0, [X0 + 0x5A8]
	0x01DE4104 BL 0x1C16CF4
	0x01DE4108 ADRP X8, 0x25F4000
	0x01DE410C MOVZ W9, 0x1
	0x01DE4110 STRB W9, [X8 + 0x785]
	0x01DE4114 ADRP X8, 0x230F000

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+64], D14
	003 Move [X31+80], D13
	004 Move [X31+88], D12
	005 Move [X31+96], D11
	006 Move [X31+104], D10
	007 Move [X31+112], D9
	008 Move [X31+120], D8
	009 Move [X31+128], X29
	010 Move [X31+136], X30
	011 Move [X31+144], X28
	012 Move [X31+152], X27
	013 Move [X31+160], X26
	014 Move [X31+168], X25
	015 Move [X31+176], X24
	016 Move [X31+184], X23
	017 Move [X31+192], X22
	018 Move [X31+200], X21
	019 Move [X31+208], X20
	020 Move [X31+216], X19
	021 Move X21, 0x25F6000
	022 Move W8, [X21+3213]
	023 Move X19, X1
	024 Move X20, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {49}
	029 Move X0, 0x2316000
	030 Move X0, [X0+3104]
	031 Call 0x1C17CF4
	032 Move X0, 0x2316000
	033 Move X0, [X0+3112]
	034 Call 0x1C17CF4
	035 Move X0, 0x2316000
	036 Move X0, [X0+3120]
	037 Call 0x1C17CF4
	038 Move X0, 0x2316000
	039 Move X0, [X0+3128]
	040 Call 0x1C17CF4
	041 Move X0, 0x2316000
	042 Move X0, [X0+3136]
	043 Call 0x1C17CF4
	044 Move X0, 0x2311000
	045 Move X0, [X0+1432]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X21+3213], W8
	049 Move W1, 5
	050 Move X0, X20
	051 Move [X31+32], X31
	052 Move [X31+40], X31
	053 Move [X31+48], X31
	054 Call ArmstrongController.set_phase, X0, X1
	055 Move X9, [X20+192]
	056 Move [X20+428], W31
	057 Compare X9, 0
	058 JumpIfEqual {374}
	059 Move X8, [X9+56]
	060 Compare X8, 0
	061 JumpIfEqual {374}
	062 Move W10, [X8+24]
	063 Compare W10, 0
	064 JumpIfEqual {375}
	065 Move X10, [X9+88]
	066 Compare X10, 0
	067 JumpIfEqual {374}
	068 Move W11, [X10+24]
	069 Compare W11, 0
	070 JumpIfEqual {375}
	071 Move X9, [X9+96]
	072 Compare X9, 0
	073 JumpIfEqual {374}
	074 Move W11, [X9+24]
	075 Compare W11, 0
	076 JumpIfEqual {375}
	077 Move X11, [X20]
	078 Move V0, [X8+32]
	079 Move V1, [X10+32]
	080 Move V2, [X9+32]
	081 Move X8, [X11+712]
	082 Move X2, [X11+720]
	083 Move W1, 1
	084 Move X0, X20
	085 NotImplemented "Instruction BLR not yet implemented."
	086 Compare X19, 0
	087 JumpIfEqual {374}
	088 Move X0, X19
	089 Move X1, X31
	090 Call Component.get_transform, X0
	091 Compare X0, 0
	092 JumpIfEqual {374}
	093 Move X1, X31
	094 Call Transform.get_position, X0
	095 Move X0, X31
	096 Call Extensions.Flatten, X0
	097 Move X0, X20
	098 Move X1, X31
	099 Move V8, V0
	100 Move V9, V1
	101 Move V10, V2
	102 Call Component.get_transform, X0
	103 Compare X0, 0
	104 JumpIfEqual {374}
	105 Move X1, X31
	106 Call Transform.get_position, X0
	107 Move X0, X31
	108 Call Extensions.Flatten, X0
	109 Move X24, 0x25F6000
	110 Move W8, [X24+1925]
	111 Move V11, V0
	112 Move V12, V1
	113 Move V13, V2
	114 Compare W8, 0
	115 JumpIfNotEqual {121}
	116 Move X0, 0x2311000
	117 Move X0, [X0+1448]
	118 Call 0x1C17CF4
	119 Move W8, 1
	120 Move [X24+1925], W8
	121 Move X21, 0x2311000
	122 Move X21, [X21+1448]
	123 Subtract S8, S8, S11
	124 Subtract S9, S9, S12
	125 Subtract S10, S10, S13
	126 Move X0, [X21]
	127 Move W8, [X0+224]
	128 Compare W8, 0
	129 JumpIfNotEqual {131}
	130 Call 0x1C17DFC
	131 Move X8, -19890176
	132 Multiply S0, S8, S8
	133 Multiply S1, S9, S9
	134 Move V14, [X8+380]
	135 Move X22, 0x2311000
	136 Multiply S2, S10, S10
	137 Add S0, S0, S1
	138 Move X22, [X22+1440]
	139 Add S0, S2, S0
	140 NotImplemented "Instruction FSQRT not yet implemented."
	141 NotImplemented "Instruction FCMP not yet implemented."
	142 Move X25, 0x25F6000
	143 NotImplemented "Instruction FDIV not yet implemented."
	144 NotImplemented "Instruction FDIV not yet implemented."
	145 NotImplemented "Instruction FDIV not yet implemented."
	146 Move W8, [X25+1923]
	147 Compare W8, 0
	148 JumpIfNotEqual {154}
	149 Move X0, 0x2311000
	150 Move X0, [X0+1440]
	151 Call 0x1C17CF4
	152 Move W8, 1
	153 Move [X25+1923], W8
	154 Move X8, [X22]
	155 Move X8, [X8+184]
	156 Move S8, [X8]
	157 Move S9, [X8+4]
	158 Move V10, [X8+8]
	159 Move X0, X20
	160 Move X1, X31
	161 Call Component.get_transform, X0
	162 Move X26, 0x25F6000
	163 Move W8, [X26+1926]
	164 Move X23, X0
	165 Compare W8, 0
	166 JumpIfNotEqual {172}
	167 Move X0, 0x2311000
	168 Move X0, [X0+1440]
	169 Call 0x1C17CF4
	170 Move W8, 1
	171 Move [X26+1926], W8
	172 Move X8, [X22]
	173 Move V0, V8
	174 Move V1, V9
	175 Move V2, V10
	176 Move X8, [X8+184]
	177 Move X0, X31
	178 Move S3, [X8+24]
	179 Move S4, [X8+28]
	180 Move V5, [X8+32]
	181 Call Quaternion.LookRotation, X0, X1
	182 Compare X23, 0
	183 JumpIfEqual {374}
	184 Move X0, X23
	185 Move X1, X31
	186 Call Transform.set_rotation, X0, X1
	187 Move X8, [X20+192]
	188 Compare X8, 0
	189 JumpIfEqual {374}
	190 Move X23, [X8+176]
	191 Move X0, X20
	192 Move X1, X31
	193 Call Component.get_transform, X0
	194 Compare X0, 0
	195 JumpIfEqual {374}
	196 Move X1, X31
	197 Call Transform.get_position, X0
	198 Move S3, 1
	199 Move X0, X23
	200 Move X1, X31
	201 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	202 Move X0, X20
	203 Call ArmstrongController.get__attackSphereCenter, X0
	204 Move X8, [X20+192]
	205 Compare X8, 0
	206 JumpIfEqual {374}
	207 Move X9, 0x2316000
	208 Move X9, [X9+3136]
	209 Move V8, V0
	210 Move V0, [X8+76]
	211 Move V9, V1
	212 Move X0, [X9]
	213 Move S1, 0.5
	214 Move V10, V2
	215 Multiply S11, S0, S1
	216 Move W8, [X0+224]
	217 Compare W8, 0
	218 JumpIfNotEqual {220}
	219 Call 0x1C17DFC
	220 Move X0, X20
	221 Move V0, V8
	222 Move V1, V9
	223 Move V2, V10
	224 Move V3, V11
	225 Move X1, X31
	226 Call MobDetectionUtil.GetPlayersInRange, X0, X1, V0
	227 Compare X0, 0
	228 JumpIfEqual {374}
	229 Move X8, 0x2316000
	230 Move X8, [X8+3128]
	231 Move X27, 0x2316000
	232 Move X28, 0x2311000
	233 Move X26, 0x2316000
	234 Move X1, [X8]
	235 Move X27, [X27+3112]
	236 Move X28, [X28+1432]
	237 Move X26, [X26+3104]
	238 Add X8, X31, 8
	239 Call List`1<Object>.GetEnumerator, X0
	240 NotImplemented "Instruction LDUR not yet implemented."
	241 Move X8, [X31+24]
	242 Move W29, 1
	243 Move [X31+2], V0
	244 Move [X31+48], X8
	245 Move X1, [X27]
	246 Add X0, X31, 32
	247 Call Enumerator<Object>.MoveNext, X0
	248 Move TEMP, X0
	249 And TEMP, TEMP, 1
	250 Compare TEMP, 1
	251 JumpIfNotEqual {346}
	252 Move X0, [X28]
	253 Move X23, [X31+48]
	254 Move W8, [X0+224]
	255 Compare W8, 0
	256 JumpIfNotEqual {258}
	257 Call 0x1C17DFC
	258 Move X0, X19
	259 Move X1, X23
	260 Move X2, X31
	261 Call Object.op_Equality, X0, X1
	262 Move TEMP, X0
	263 And TEMP, TEMP, 1
	264 Compare TEMP, 1
	265 JumpIfNotEqual {245}
	266 Compare X23, 0
	267 JumpIfEqual {372}
	268 Move X0, [X23+144]
	269 Compare X0, 0
	270 JumpIfEqual {373}
	271 Move X1, X31
	272 Call Transform.get_position, X0
	273 Move V8, V0
	274 Move V9, V1
	275 Move V10, V2
	276 Move X0, X20
	277 Move X1, X31
	278 Call Component.get_transform, X0
	279 Compare X0, 0
	280 JumpIfEqual {370}
	281 Move X1, X31
	282 Call Transform.get_position, X0
	283 Move W8, [X24+1925]
	284 Move V11, V0
	285 Move V12, V1
	286 Move V13, V2
	287 Compare W8, 0
	288 JumpIfNotEqual {292}
	289 Move X0, X21
	290 Call 0x1C17CF4
	291 Move [X24+1925], W29
	292 Move X0, [X21]
	293 Move W8, [X0+224]
	294 Compare W8, 0
	295 JumpIfNotEqual {297}
	296 Call 0x1C17DFC
	297 Subtract S0, S8, S11
	298 Subtract S1, S9, S12
	299 Subtract S2, S10, S13
	300 Multiply S3, S0, S0
	301 Multiply S4, S1, S1
	302 Add S3, S3, S4
	303 Multiply S4, S2, S2
	304 Add S3, S4, S3
	305 NotImplemented "Instruction FSQRT not yet implemented."
	306 NotImplemented "Instruction FCMP not yet implemented."
	307 NotImplemented "Instruction FDIV not yet implemented."
	308 NotImplemented "Instruction FDIV not yet implemented."
	309 NotImplemented "Instruction FDIV not yet implemented."
	310 Move W8, [X25+1923]
	311 Compare W8, 0
	312 JumpIfNotEqual {316}
	313 Move X0, X22
	314 Call 0x1C17CF4
	315 Move [X25+1923], W29
	316 Move X8, [X22]
	317 Move X8, [X8+184]
	318 Move S0, [X8]
	319 Move S1, [X8+4]
	320 Move V2, [X8+8]
	321 Move X8, [X20+192]
	322 Compare X8, 0
	323 JumpIfEqual {371}
	324 Move X9, [X20+64]
	325 Compare X9, 0
	326 JumpIfEqual {331}
	327 Move X9, [X9+32]
	328 Compare X9, 0
	329 JumpIfEqual {331}
	330 Move W6, [X9]
	331 Move X6, X31
	332 Move V3, [X8+80]
	333 Move W1, [X8+36]
	334 Move X3, [X8+184]
	335 Move X5, [X8+24]
	336 Move W8, [X20+104]
	337 Move X2, [X20+208]
	338 Multiply S0, S0, S3
	339 Multiply S1, S1, S3
	340 Multiply S2, S2, S3
	341 NotImplemented "Instruction BFM not yet implemented."
	342 Move X0, X23
	343 Move X4, X3
	344 Move X7, X31
	345 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5, X6, X7
	346 Move X1, [X26]
	347 Add X0, X31, 32
	348 Call Enumerator<Object>.Dispose, X0
	349 Move X20, [X31+208]
	350 Move X19, [X31+216]
	351 Move X22, [X31+192]
	352 Move X21, [X31+200]
	353 Move X24, [X31+176]
	354 Move X23, [X31+184]
	355 Move X26, [X31+160]
	356 Move X25, [X31+168]
	357 Move X28, [X31+144]
	358 Move X27, [X31+152]
	359 Move X29, [X31+128]
	360 Move X30, [X31+136]
	361 Move D9, [X31+112]
	362 Move D8, [X31+120]
	363 Move D11, [X31+96]
	364 Move D10, [X31+104]
	365 Move D13, [X31+80]
	366 Move D12, [X31+88]
	367 Move V14, [X31+64]
	368 Add X31, X31, 224
	369 Return 
	370 Call 0x1C17F20
	371 Call 0x1C17F20
	372 Call 0x1C17F20
	373 Call 0x1C17F20
	374 Call 0x1C17F20
	375 Call 0x1C17F28
	376 Move X19, X0
	377 NotImplemented "Instruction CMP not yet implemented."
	378 Move X0, X19
	379 Call 0x3EB2AD0
	380 Move X20, [X0]
	381 Call 0x3EB2AE0
	382 Move X1, [X26]
	383 Add X0, X31, 32
	384 Call Enumerator<Object>.Dispose, X0
	385 Compare X20, 0
	386 JumpIfEqual {349}
	387 Move X0, X20
	388 Call 0x1C17F18
	389 Move X20, X31
	390 Move X19, X0
	391 Move X1, [X26]
	392 Add X0, X31, 32
	393 Call Enumerator<Object>.Dispose, X0
	394 Compare X20, 0
	395 JumpIfNotEqual {398}
	396 Move X0, X19
	397 Call 0x1D2D690
	398 Move X0, X20
	399 Call 0x1C17F18
	400 Call 0x1991590

Method: System.Void UpdatePunchAndHold()

Disassembly:
	0x01DE344C LDR V1, [X19 + 0xAC]
	0x01DE3450 LDP S9, S8, [X19 + 0xB4]
	0x01DE3454 FMUL S0, S0, S1
	0x01DE3458 BL 0x3EB1B70
	0x01DE345C MOV X0, X20
	0x01DE3460 LDP X20, X19, [X31 + 0x20]
	0x01DE3464 LDR X30, [X31 + 0x10]
	0x01DE3468 MOV V1.16B, V9.16B
	0x01DE346C MOV V2.16B, V8.16B
	0x01DE3470 MOV X1, X31
	0x01DE3474 LDP D9, D8, [X31], #0x30
	0x01DE3478 B 0x3C3EC04
	0x01DE347C LDP X20, X19, [X31 + 0x20]
	0x01DE3480 LDR X30, [X31 + 0x10]
	0x01DE3484 LDP D9, D8, [X31], #0x30
	0x01DE3488 RET
	0x01DE348C BL 0x1C16F20
	0x01DE3490 STP D13, D12, [X31 - 0x50]!
	0x01DE3494 STP D11, D10, [X31 + 0x10]
	0x01DE3498 STP D9, D8, [X31 + 0x20]
	0x01DE349C STR X30, [X31 + 0x30]
	0x01DE34A0 STP X20, X19, [X31 + 0x40]
	0x01DE34A4 ADRP X20, 0x25F5000
	0x01DE34A8 LDRB W8, [X20 + 0x785]
	0x01DE34AC MOV V8.16B, V5.16B
	0x01DE34B0 MOV V9.16B, V4.16B
	0x01DE34B4 MOV V11.16B, V3.16B
	0x01DE34B8 MOV V10.16B, V2.16B
	0x01DE34BC MOV V12.16B, V1.16B
	0x01DE34C0 MOV V13.16B, V0.16B
	0x01DE34C4 MOV X19, X0
	0x01DE34C8 CBNZ W8, 0x1DE34E0
	0x01DE34CC ADRP X0, 0x2310000
	0x01DE34D0 LDR X0, [X0 + 0x5A8]
	0x01DE34D4 BL 0x1C16CF4
	0x01DE34D8 MOVZ W8, 0x1
	0x01DE34DC STRB W8, [X20 + 0x785]
	0x01DE34E0 ADRP X8, 0x2310000
	0x01DE34E4 LDR X8, [X8 + 0x5A8]
	0x01DE34E8 FSUB S11, S13, S11
	0x01DE34EC FSUB S9, S12, S9
	0x01DE34F0 FSUB S10, S10, S8
	0x01DE34F4 LDR X0, [X8]
	0x01DE34F8 LDR W8, [X0 + 0xE0]
	0x01DE34FC CBNZ W8, 0x1DE3504
	0x01DE3500 BL 0x1C16DFC
	0x01DE3504 FMUL S0, S11, S11
	0x01DE3508 FMUL S1, S9, S9
	0x01DE350C ADRP X8, 0xFFFFFFFFFED07000
	0x01DE3510 FADD S0, S0, S1
	0x01DE3514 LDR V1, [X8 + 0x17C]
	0x01DE3518 FMUL S2, S10, S10
	0x01DE351C FADD S0, S2, S0
	0x01DE3520 FSQRT S0, S0
	0x01DE3524 FCMP S0, S1
	0x01DE3528 B.LE 0x1DE353C
	0x01DE352C FDIV S8, S11, S0
	0x01DE3530 FDIV S9, S9, S0
	0x01DE3534 FDIV S10, S10, S0
	0x01DE3538 B 0x1DE3574
	0x01DE353C ADRP X20, 0x25F5000
	0x01DE3540 LDRB W8, [X20 + 0x783]
	0x01DE3544 CBNZ W8, 0x1DE355C
	0x01DE3548 ADRP X0, 0x2310000
	0x01DE354C LDR X0, [X0 + 0x5A0]
	0x01DE3550 BL 0x1C16CF4
	0x01DE3554 MOVZ W8, 0x1
	0x01DE3558 STRB W8, [X20 + 0x783]
	0x01DE355C ADRP X8, 0x2310000
	0x01DE3560 LDR X8, [X8 + 0x5A0]
	0x01DE3564 LDR X8, [X8]
	0x01DE3568 LDR X8, [X8 + 0xB8]
	0x01DE356C LDP S8, S9, [X8]
	0x01DE3570 LDR V10, [X8 + 0x8]
	0x01DE3574 LDR X0, [X19 + 0x38]
	0x01DE3578 CBZ X0, 0x1DE35B8
	0x01DE357C LDR X19, [X19 + 0x40]
	0x01DE3580 MOV X1, X31
	0x01DE3584 BL 0x3C3F58C
	0x01DE3588 CBZ X19, 0x1DE35B8
	0x01DE358C FADD S2, S10, S2

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25F6000
	006 Move W8, [X20+3214]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x2316000
	013 Move X0, [X0+3248]
	014 Call 0x1C17CF4
	015 Move X0, 0x2316000
	016 Move X0, [X0+3184]
	017 Call 0x1C17CF4
	018 Move X0, 0x2316000
	019 Move X0, [X0+3136]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3214], W8
	023 Move V8, [X19+428]
	024 Move X0, X19
	025 Move X1, X31
	026 Call MobController.get_deltaTime, X0
	027 Move X8, [X19+192]
	028 Add S0, S8, S0
	029 Move [X19+428], S0
	030 Compare X8, 0
	031 JumpIfEqual {97}
	032 Move V1, [X8+40]
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+8]
	037 Move V8, [X31+32]
	038 Return 
	039 Move X8, 0x2316000
	040 Move X8, [X8+3136]
	041 Add X20, X19, 376
	042 Move X0, [X8]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X19
	048 Move X1, X20
	049 Move X2, X31
	050 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {90}
	055 Move X20, [X20]
	056 Compare X20, 0
	057 JumpIfEqual {97}
	058 Move W1, [X20+24]
	059 Move W0, W31
	060 Move X2, X31
	061 Call Random.Range, X0, X1
	062 Move X8, 0x2316000
	063 Move X8, [X8+3184]
	064 Move W1, W0
	065 Move X0, X20
	066 Move X2, [X8]
	067 Call List`1<Object>.get_Item, X0, X1
	068 Move X8, [X19]
	069 Move X1, X0
	070 Move X0, X19
	071 Move X9, [X8+952]
	072 Move X2, [X8+960]
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Move X0, [X19+352]
	075 Compare X0, 0
	076 JumpIfEqual {97}
	077 Move X1, X31
	078 Call Component.get_transform, X0
	079 Compare X0, 0
	080 JumpIfEqual {97}
	081 Move X1, X31
	082 Call Transform.get_position, X0
	083 Move X0, X19
	084 Move X20, [X31+16]
	085 Move X19, [X31+24]
	086 Move X30, [X31+8]
	087 Move V8, [X31+32]
	088 Call ArmstrongController.SetChasing, X0, X1
	089 Return 
	090 Move X0, X19
	091 Move X20, [X31+16]
	092 Move X19, [X31+24]
	093 Move X30, [X31+8]
	094 Move V8, [X31+32]
	095 Call ArmstrongController.SetRoaming, X0
	096 Return 
	097 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01DE41C8 MOV X1, X31
	0x01DE41CC BL 0x3C35CB8
	0x01DE41D0 MOV W22, W0
	0x01DE41D4 LDR X0, [X26]
	0x01DE41D8 LDR W8, [X0 + 0xE0]
	0x01DE41DC CBNZ W8, 0x1DE41E4
	0x01DE41E0 BL 0x1C16DFC
	0x01DE41E4 MOVZ W8, 0x42C80000
	0x01DE41E8 ADD X0, X31, 0xA0
	0x01DE41EC FMOV S6, W8
	0x01DE41F0 MOV V0.16B, V8.16B
	0x01DE41F4 MOV V1.16B, V9.16B
	0x01DE41F8 MOV V2.16B, V10.16B
	0x01DE41FC MOV V3.16B, V12.16B
	0x01DE4200 MOV V4.16B, V11.16B
	0x01DE4204 MOV V5.16B, V13.16B
	0x01DE4208 MOV W1, W22
	0x01DE420C MOV X2, X31
	0x01DE4210 BL 0x3C8B18C
	0x01DE4214 TBZ X0, 0x0, 0x1DE4090
	0x01DE4218 ADD X0, X31, 0xA0
	0x01DE421C MOV X1, X31
	0x01DE4220 BL 0x3C8E66C
	0x01DE4224 FSUB S0, S0, S12
	0x01DE4228 FSUB S1, S1, S11
	0x01DE422C FSUB S2, S2, S13
	0x01DE4230 STP S1, S0, [X31 + 0x1C]
	0x01DE4234 STR S0, [X19 + 0x1C4]
	0x01DE4238 STR S1, [X19 + 0x1C8]
	0x01DE423C STR S2, [X31 + 0x18]
	0x01DE4240 STR S2, [X19 + 0x1CC]
	0x01DE4244 ADRP X8, 0x2311000
	0x01DE4248 LDR X8, [X8 + 0x9B0]
	0x01DE424C LDR X0, [X8]
	0x01DE4250 MOVZ W1, 0x2
	0x01DE4254 BL 0x1C16D6C
	0x01DE4258 ADRP X8, 0x25F4000
	0x01DE425C LDRB W8, [X8 + 0x786]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25F5000
	006 Move X20, 0x2315000
	007 Move W8, [X21+3215]
	008 Move X20, [X20+3008]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2315000
	015 Move X0, [X0+3008]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3215], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call MobController.OnDrawGizmos, X0
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move X0, X31
	030 Move S0, [X8+176]
	031 Move S1, [X8+180]
	032 Move S2, [X8+184]
	033 Move S3, [X8+188]
	034 Call Gizmos.set_color, X0
	035 Move X0, X19
	036 Call ArmstrongController.get__attackSphereCenter, X0
	037 Move X8, [X19+192]
	038 Compare X8, 0
	039 JumpIfEqual {50}
	040 Move V3, [X8+76]
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move S4, 0.5
	044 Move X0, X31
	045 Multiply S3, S3, S4
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Call Gizmos.DrawWireSphere, X0, V0
	049 Return 
	050 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DE4260 MOV X22, X0
	0x01DE4264 CBNZ W8, 0x1DE427C
	0x01DE4268 MOV X0, X20
	0x01DE426C BL 0x1C16CF4
	0x01DE4270 MOVZ W8, 0x1
	0x01DE4274 ADRP X9, 0x25F4000
	0x01DE4278 STRB W8, [X9 + 0x786]
	0x01DE427C CBZ X22, 0x1DE45C4
	0x01DE4280 LDR W8, [X22 + 0x18]
	0x01DE4284 CBZ W8, 0x1DE45BC
	0x01DE4288 LDR X9, [X20]
	0x01DE428C CMP W8, 0x1
	0x01DE4290 LDR X9, [X9 + 0xB8]
	0x01DE4294 LDP S1, S0, [X9 + 0x1C]
	0x01DE4298 LDR V2, [X9 + 0x18]
	0x01DE429C FMUL S3, S11, S0
	0x01DE42A0 FMUL S4, S13, S1
	0x01DE42A4 FSUB S3, S3, S4
	0x01DE42A8 FMUL S4, S13, S2
	0x01DE42AC FMUL S0, S12, S0
	0x01DE42B0 FMUL S1, S12, S1
	0x01DE42B4 FMUL S2, S11, S2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25F5000
	006 Move X21, 0x2314000
	007 Move W8, [X20+3216]
	008 Move X21, [X21+2144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2314000
	015 Move X0, [X0+2144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3216], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call MobController..ctor, X0
	031 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DE42B8 FSUB S0, S4, S0
	0x01DE42BC FSUB S1, S1, S2
	0x01DE42C0 STP S3, S0, [X22 + 0x20]
	0x01DE42C4 STR S1, [X22 + 0x28]
	0x01DE42C8 B.EQ 0x1DE45C0
	0x01DE42CC LDR X8, [X20]
	0x01DE42D0 LDR X8, [X8 + 0xB8]
	0x01DE42D4 LDP S0, S1, [X8 + 0x18]
	0x01DE42D8 LDR V2, [X8 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 And W1, W1, 1
	004 Move X2, X31
	005 Move X19, X0
	006 Call MobController.CopyBackingFieldsToState, X0, X1
	007 Move W1, [X19+420]
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call ArmstrongController.set_phase, X0, X1
	012 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DE42DC ADRP X8, 0x230F000
	0x01DE42E0 FMUL S3, S11, S0
	0x01DE42E4 FMUL S4, S12, S1
	0x01DE42E8 FMUL S5, S12, S2
	0x01DE42EC FMUL S0, S13, S0
	0x01DE42F0 FMUL S1, S13, S1
	0x01DE42F4 FMUL S2, S11, S2
	0x01DE42F8 FSUB S3, S3, S4
	0x01DE42FC FSUB S0, S5, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.CopyStateToBackingFields, X0
	006 Move X0, X19
	007 Call ArmstrongController.get_phase, X0
	008 Move [X19+420], W0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

