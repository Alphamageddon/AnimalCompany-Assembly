Type: AnimalCompany.ArmstrongController

Method: AnimalCompany.ArmstrongController/Phase get_phase()

Disassembly:
	0x01CDD320 LDP X20, X19, [X31 + 0x20]
	0x01CDD324 LDR X30, [X31 + 0x18]
	0x01CDD328 LDP D9, D8, [X31 + 0x8]
	0x01CDD32C MOV X1, X31
	0x01CDD330 LDR V10, [X31], #0x30
	0x01CDD334 B 0x3A4A810
	0x01CDD338 BL 0x1B6EA1C
	0x01CDD33C SUB X31, X31, 0xE0
	0x01CDD340 STR D14, [X31 + 0x40]
	0x01CDD344 STP D13, D12, [X31 + 0x50]
	0x01CDD348 STP D11, D10, [X31 + 0x60]
	0x01CDD34C STP D9, D8, [X31 + 0x70]
	0x01CDD350 STP X29, X30, [X31 + 0x80]
	0x01CDD354 STP X28, X27, [X31 + 0x90]
	0x01CDD358 STP X26, X25, [X31 + 0xA0]
	0x01CDD35C STP X24, X23, [X31 + 0xB0]
	0x01CDD360 STP X22, X21, [X31 + 0xC0]
	0x01CDD364 STP X20, X19, [X31 + 0xD0]
	0x01CDD368 ADRP X21, 0x2546000
	0x01CDD36C LDRB W8, [X21 + 0x625]
	0x01CDD370 MOV X19, X1
	0x01CDD374 MOV X20, X0
	0x01CDD378 TBNZ X8, 0x0, 0x1CDD3C0
	0x01CDD37C ADRP X0, 0x2272000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+60]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2271000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2273000
	016 Move X0, [X0+3600]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2273000
	023 Move X0, [X0+3608]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_phase(AnimalCompany.ArmstrongController/Phase value)

Disassembly:
	0x01CDD380 LDR X0, [X0 + 0xDA8]
	0x01CDD384 BL 0x1B6E7F0
	0x01CDD388 ADRP X0, 0x2272000
	0x01CDD38C LDR X0, [X0 + 0xDB0]
	0x01CDD390 BL 0x1B6E7F0
	0x01CDD394 ADRP X0, 0x2272000
	0x01CDD398 LDR X0, [X0 + 0xDB8]
	0x01CDD39C BL 0x1B6E7F0
	0x01CDD3A0 ADRP X0, 0x2272000
	0x01CDD3A4 LDR X0, [X0 + 0xDC0]
	0x01CDD3A8 BL 0x1B6E7F0
	0x01CDD3AC ADRP X0, 0x2270000
	0x01CDD3B0 LDR X0, [X0 + 0x478]
	0x01CDD3B4 BL 0x1B6E7F0
	0x01CDD3B8 MOVZ W8, 0x1
	0x01CDD3BC STRB W8, [X21 + 0x625]
	0x01CDD3C0 MOVZ W1, 0x5
	0x01CDD3C4 MOV X0, X20
	0x01CDD3C8 STP X31, X31, [X31 + 0x20]
	0x01CDD3CC STR X31, [X31 + 0x30]
	0x01CDD3D0 BL 0x1CDC380
	0x01CDD3D4 LDR X9, [X20 + 0xB8]
	0x01CDD3D8 STR W31, [X20 + 0x17C]
	0x01CDD3DC CBZ X9, 0x1CDD7D0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+60], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2271000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2273000
	016 Move X0, [X0+3600]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2273000
	023 Move X0, [X0+3616]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Single get__timeToHoldAfterPunch()

Disassembly:
	0x01CDD3E0 LDR X8, [X9 + 0x38]
	0x01CDD3E4 CBZ X8, 0x1CDD7D0
	0x01CDD3E8 LDR W10, [X8 + 0x18]
	0x01CDD3EC CBZ W10, 0x1CDD7D4
	0x01CDD3F0 LDR X10, [X9 + 0x58]
	0x01CDD3F4 CBZ X10, 0x1CDD7D0
	0x01CDD3F8 LDR W11, [X10 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+184]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move V0, [X8+40]
	006 Move X30, [X31+16]
	007 Return V0
	008 Call 0x1B6FA1C

Method: UnityEngine.Vector3 get__attackSphereCenter()

Disassembly:
	0x01CDD3FC CBZ W11, 0x1CDD7D4
	0x01CDD400 LDR X9, [X9 + 0x60]
	0x01CDD404 CBZ X9, 0x1CDD7D0
	0x01CDD408 LDR W11, [X9 + 0x18]
	0x01CDD40C CBZ W11, 0x1CDD7D4
	0x01CDD410 LDR X11, [X20]
	0x01CDD414 LDR V0, [X8 + 0x20]
	0x01CDD418 LDR V1, [X10 + 0x20]
	0x01CDD41C LDR V2, [X9 + 0x20]
	0x01CDD420 LDR X8, [X11 + 0x2A8]
	0x01CDD424 LDR X2, [X11 + 0x2B0]
	0x01CDD428 MOVZ W1, 0x1
	0x01CDD42C MOV X0, X20
	0x01CDD430 BLR X8
	0x01CDD434 CBZ X19, 0x1CDD7D0
	0x01CDD438 MOV X0, X19
	0x01CDD43C MOV X1, X31
	0x01CDD440 BL 0x3A9B084
	0x01CDD444 CBZ X0, 0x1CDD7D0
	0x01CDD448 MOV X1, X31
	0x01CDD44C BL 0x3AA7658
	0x01CDD450 MOV X0, X31
	0x01CDD454 BL 0x1CC086C
	0x01CDD458 MOV X0, X20
	0x01CDD45C MOV X1, X31
	0x01CDD460 MOV V8.16B, V0.16B
	0x01CDD464 MOV V9.16B, V1.16B
	0x01CDD468 MOV V10.16B, V2.16B
	0x01CDD46C BL 0x3A9B084
	0x01CDD470 CBZ X0, 0x1CDD7D0
	0x01CDD474 MOV X1, X31
	0x01CDD478 BL 0x3AA7658
	0x01CDD47C MOV X0, X31
	0x01CDD480 BL 0x1CC086C
	0x01CDD484 ADRP X24, 0x2546000
	0x01CDD488 LDRB W8, [X24 + 0x441]
	0x01CDD48C MOV V11.16B, V0.16B
	0x01CDD490 MOV V12.16B, V1.16B
	0x01CDD494 MOV V13.16B, V2.16B
	0x01CDD498 CBNZ W8, 0x1CDD4B0
	0x01CDD49C ADRP X0, 0x2270000
	0x01CDD4A0 LDR X0, [X0 + 0x488]
	0x01CDD4A4 BL 0x1B6E7F0
	0x01CDD4A8 MOVZ W8, 0x1
	0x01CDD4AC STRB W8, [X24 + 0x441]
	0x01CDD4B0 ADRP X21, 0x2270000
	0x01CDD4B4 LDR X21, [X21 + 0x488]
	0x01CDD4B8 FSUB S8, S8, S11
	0x01CDD4BC FSUB S9, S9, S12
	0x01CDD4C0 FSUB S10, S10, S13
	0x01CDD4C4 LDR X0, [X21]
	0x01CDD4C8 LDR W8, [X0 + 0xE0]
	0x01CDD4CC CBNZ W8, 0x1CDD4D4
	0x01CDD4D0 BL 0x1B6E8F8
	0x01CDD4D4 ADRP X8, 0xFFFFFFFFFEDCC000
	0x01CDD4D8 FMUL S0, S8, S8
	0x01CDD4DC FMUL S1, S9, S9
	0x01CDD4E0 LDR V14, [X8 + 0xB64]
	0x01CDD4E4 ADRP X22, 0x2270000
	0x01CDD4E8 FMUL S2, S10, S10
	0x01CDD4EC FADD S0, S0, S1
	0x01CDD4F0 LDR X22, [X22 + 0x480]
	0x01CDD4F4 FADD S0, S2, S0

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], D9
	003 Move [X31+88], D8
	004 Move [X31+96], X30
	005 Move [X31+104], X19
	006 Move X19, X0
	007 Move X0, [X0+208]
	008 Compare X0, 0
	009 JumpIfEqual {74}
	010 Move X1, X31
	011 Call Transform.get_position, X0
	012 Move X0, [X19+208]
	013 Move [X31+64], D0
	014 Move [X31+48], D1
	015 Compare X0, 0
	016 JumpIfEqual {74}
	017 Move X1, X31
	018 Move V8, V2
	019 Call Transform.get_forward, X0
	020 Move X8, [X19+184]
	021 Compare X8, 0
	022 JumpIfEqual {74}
	023 Move X19, 0x2547000
	024 Move W9, [X19+1090]
	025 Move V6, [X8+76]
	026 Move V9, V2
	027 Compare W9, 0
	028 JumpIfNotEqual {40}
	029 Move X0, 0x2271000
	030 Move X0, [X0+1152]
	031 Move [X31+16], V6
	032 Move [X31+24], V0
	033 Move [X31], V1
	034 Call 0x1B6F7F0
	035 Move V1, [X31]
	036 Move V6, [X31+16]
	037 Move V0, [X31+2]
	038 Move W8, 1
	039 Move [X19+1090], W8
	040 Move W8, 0x999A
	041 NotImplemented "Instruction MOVK not yet implemented."
	042 Move V0.S[1], V1.S[0]
	043 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	044 Move X8, -19083264
	045 Move V2, [X8+3616]
	046 Move X8, 0x2271000
	047 Move X8, [X8+1152]
	048 Move V3, [X31+48]
	049 Move V7, [X31+64]
	050 Multiply S4, S9, S6
	051 Move X30, [X31+96]
	052 Move X19, [X31+104]
	053 Move X8, [X8]
	054 Move V7.S[1], V3.S[0]
	055 Move S3, 0.5
	056 Multiply S5, S4, S3
	057 Move X8, [X8+184]
	058 NotImplemented "Instruction INVALID not yet implemented."
	059 NotImplemented "Instruction MOVI not yet implemented."
	060 Add S5, S8, S5
	061 Move V0, [X8+24]
	062 Move V6, [X8+32]
	063 NotImplemented "Instruction INVALID not yet implemented."
	064 Move D9, [X31+80]
	065 Move D8, [X31+88]
	066 Add V3, V7, V3
	067 NotImplemented "Instruction INVALID not yet implemented."
	068 Multiply S1, S6, S2
	069 Add V0, V3, V0
	070 Subtract S2, S5, S1
	071 Move S1, V0.S[1]
	072 Add X31, X31, 112
	073 Return X0
	074 Call 0x1B6FA1C

Method: System.Single get__attackSphereRadius()

Disassembly:
	0x01CDD4F8 FSQRT S0, S0
	0x01CDD4FC FCMP S0, S14
	0x01CDD500 ADRP X26, 0x2546000
	0x01CDD504 B.LE 0x1CDD518
	0x01CDD508 FDIV S8, S8, S0
	0x01CDD50C FDIV S9, S9, S0
	0x01CDD510 FDIV S10, S10, S0
	0x01CDD514 B 0x1CDD544
	0x01CDD518 LDRB W8, [X26 + 0x43F]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+184]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move V0, [X8+76]
	006 Move S1, 0.5
	007 Multiply S0, S0, S1
	008 Move X30, [X31+16]
	009 Return V0
	010 Call 0x1B6FA1C

Method: System.Void HandlePhaseChanged()

Disassembly:
	0x01CDD51C CBNZ W8, 0x1CDD534
	0x01CDD520 ADRP X0, 0x2270000
	0x01CDD524 LDR X0, [X0 + 0x480]
	0x01CDD528 BL 0x1B6E7F0
	0x01CDD52C MOVZ W8, 0x1
	0x01CDD530 STRB W8, [X26 + 0x43F]
	0x01CDD534 LDR X8, [X22]
	0x01CDD538 LDR X8, [X8 + 0xB8]
	0x01CDD53C LDP S8, S9, [X8]
	0x01CDD540 LDR V10, [X8 + 0x8]
	0x01CDD544 MOV X0, X20
	0x01CDD548 MOV X1, X31
	0x01CDD54C BL 0x3A9B084
	0x01CDD550 ADRP X25, 0x2546000
	0x01CDD554 LDRB W8, [X25 + 0x442]
	0x01CDD558 MOV X23, X0
	0x01CDD55C CBNZ W8, 0x1CDD574
	0x01CDD560 ADRP X0, 0x2270000
	0x01CDD564 LDR X0, [X0 + 0x480]
	0x01CDD568 BL 0x1B6E7F0
	0x01CDD56C MOVZ W8, 0x1
	0x01CDD570 STRB W8, [X25 + 0x442]
	0x01CDD574 LDR X8, [X22]
	0x01CDD578 MOV V0.16B, V8.16B
	0x01CDD57C MOV V1.16B, V9.16B
	0x01CDD580 MOV V2.16B, V10.16B
	0x01CDD584 LDR X8, [X8 + 0xB8]
	0x01CDD588 MOV X0, X31
	0x01CDD58C LDP S3, S4, [X8 + 0x18]
	0x01CDD590 LDR V5, [X8 + 0x20]
	0x01CDD594 BL 0x3A92B78
	0x01CDD598 CBZ X23, 0x1CDD7D0
	0x01CDD59C MOV X0, X23
	0x01CDD5A0 MOV X1, X31
	0x01CDD5A4 BL 0x3AA7878
	0x01CDD5A8 LDR X8, [X20 + 0xB8]
	0x01CDD5AC CBZ X8, 0x1CDD7D0
	0x01CDD5B0 LDR X23, [X8 + 0xB0]
	0x01CDD5B4 MOV X0, X20
	0x01CDD5B8 MOV X1, X31
	0x01CDD5BC BL 0x3A9B084
	0x01CDD5C0 CBZ X0, 0x1CDD7D0
	0x01CDD5C4 MOV X1, X31
	0x01CDD5C8 BL 0x3AA7658
	0x01CDD5CC FMOV S3, 1
	0x01CDD5D0 MOV X0, X23
	0x01CDD5D4 MOV X1, X31
	0x01CDD5D8 BL 0x1CC181C
	0x01CDD5DC MOV X0, X20
	0x01CDD5E0 BL 0x1CDC3FC
	0x01CDD5E4 LDR X8, [X20 + 0xB8]
	0x01CDD5E8 CBZ X8, 0x1CDD7D0
	0x01CDD5EC LDR V3, [X8 + 0x4C]
	0x01CDD5F0 FMOV S4, 0.5
	0x01CDD5F4 MOV X0, X20
	0x01CDD5F8 MOV X1, X31
	0x01CDD5FC FMUL S3, S3, S4
	0x01CDD600 BL 0x1CE8C88
	0x01CDD604 CBZ X0, 0x1CDD7D0
	0x01CDD608 ADRP X8, 0x2272000
	0x01CDD60C LDR X8, [X8 + 0xDC0]
	0x01CDD610 ADRP X27, 0x2272000
	0x01CDD614 ADRP X28, 0x2270000
	0x01CDD618 ADRP X25, 0x2272000
	0x01CDD61C LDR X1, [X8]
	0x01CDD620 LDR X27, [X27 + 0xDB0]
	0x01CDD624 LDR X28, [X28 + 0x478]
	0x01CDD628 LDR X25, [X25 + 0xDA8]
	0x01CDD62C ADD X8, X31, 0x8
	0x01CDD630 BL 0x2E470E0
	0x01CDD634 LDUR V0, [X31 + 0x8]
	0x01CDD638 LDR X8, [X31 + 0x18]
	0x01CDD63C MOVZ W29, 0x1
	0x01CDD640 STR V0, [X31 + 0x2]
	0x01CDD644 STR X8, [X31 + 0x30]
	0x01CDD648 LDR X1, [X27]
	0x01CDD64C ADD X0, X31, 0x20
	0x01CDD650 BL 0x2A14F30
	0x01CDD654 TBZ X0, 0x0, 0x1CDD784
	0x01CDD658 LDR X0, [X28]
	0x01CDD65C LDR X23, [X31 + 0x30]
	0x01CDD660 LDR W8, [X0 + 0xE0]
	0x01CDD664 CBNZ W8, 0x1CDD66C
	0x01CDD668 BL 0x1B6E8F8
	0x01CDD66C MOV X0, X19
	0x01CDD670 MOV X1, X23
	0x01CDD674 MOV X2, X31
	0x01CDD678 BL 0x3AA0AF0
	0x01CDD67C TBZ X0, 0x0, 0x1CDD648
	0x01CDD680 CBZ X23, 0x1CDD7C8
	0x01CDD684 LDR X0, [X23 + 0x88]
	0x01CDD688 CBZ X0, 0x1CDD7CC
	0x01CDD68C MOV X1, X31
	0x01CDD690 BL 0x3AA7658
	0x01CDD694 MOV V8.16B, V0.16B
	0x01CDD698 MOV V9.16B, V1.16B
	0x01CDD69C MOV V10.16B, V2.16B
	0x01CDD6A0 MOV X0, X20
	0x01CDD6A4 MOV X1, X31
	0x01CDD6A8 BL 0x3A9B084
	0x01CDD6AC CBZ X0, 0x1CDD7C0
	0x01CDD6B0 MOV X1, X31
	0x01CDD6B4 BL 0x3AA7658
	0x01CDD6B8 LDRB W8, [X24 + 0x441]
	0x01CDD6BC MOV V11.16B, V0.16B
	0x01CDD6C0 MOV V12.16B, V1.16B
	0x01CDD6C4 MOV V13.16B, V2.16B
	0x01CDD6C8 CBNZ W8, 0x1CDD6D8
	0x01CDD6CC MOV X0, X21
	0x01CDD6D0 BL 0x1B6E7F0
	0x01CDD6D4 STRB W29, [X24 + 0x441]
	0x01CDD6D8 LDR X0, [X21]
	0x01CDD6DC LDR W8, [X0 + 0xE0]
	0x01CDD6E0 CBNZ W8, 0x1CDD6E8
	0x01CDD6E4 BL 0x1B6E8F8
	0x01CDD6E8 FSUB S0, S8, S11
	0x01CDD6EC FSUB S1, S9, S12
	0x01CDD6F0 FSUB S2, S10, S13
	0x01CDD6F4 FMUL S3, S0, S0
	0x01CDD6F8 FMUL S4, S1, S1
	0x01CDD6FC FADD S3, S3, S4
	0x01CDD700 FMUL S4, S2, S2
	0x01CDD704 FADD S3, S4, S3
	0x01CDD708 FSQRT S3, S3
	0x01CDD70C FCMP S3, S14
	0x01CDD710 B.LE 0x1CDD724

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call ArmstrongController.get_phase, X0
	005 Subtract W8, W0, 1
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X9, -18808832
	008 Add X9, X9, 2358
	009 NotImplemented "Instruction ADR not yet implemented."
	010 Move W11, [X9]
	011 Add X10, X10, X11
	012 CallNoReturn X10
	013 Move X8, [X19+184]
	014 Compare X8, 0
	015 JumpIfEqual {149}
	016 Move X8, [X8+48]
	017 Compare X8, 0
	018 JumpIfEqual {149}
	019 Move W9, [X8+24]
	020 Compare W9, 0
	021 JumpIfEqual {150}
	022 Move X0, [X19+192]
	023 Compare X0, 0
	024 JumpIfEqual {149}
	025 Move X9, [X0]
	026 Move V0, [X8+32]
	027 Move X8, -19083264
	028 Move V1, [X8+2740]
	029 Move X8, [X9+456]
	030 Move X1, [X9+464]
	031 NotImplemented "Instruction FDIV not yet implemented."
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X8, [X19+384]
	034 Compare X8, 0
	035 JumpIfEqual {149}
	036 Move W10, 0xCCCD
	037 Move W9, 1
	038 NotImplemented "Instruction MOVK not yet implemented."
	039 Move [X8+133], W9
	040 Move [X8+136], W10
	041 Move X8, [X19+184]
	042 Compare X8, 0
	043 JumpIfEqual {149}
	044 Move X8, [X8+56]
	045 Compare X8, 0
	046 JumpIfEqual {149}
	047 Move W9, [X8+24]
	048 Compare W9, 0
	049 JumpIfEqual {150}
	050 Move X0, [X19+192]
	051 Compare X0, 0
	052 JumpIfEqual {149}
	053 Move X9, [X0]
	054 Move V0, [X8+32]
	055 Move X8, -19083264
	056 Move V1, [X8+2740]
	057 Move X8, [X9+472]
	058 Move X1, [X9+480]
	059 NotImplemented "Instruction FDIV not yet implemented."
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X0, [X19+384]
	062 Compare X0, 0
	063 JumpIfEqual {149}
	064 Move X8, -19083264
	065 Move V0, [X8+3376]
	066 Move W1, W31
	067 Call ArmstrongView.SetHeadMoving, X0, X1, V0
	068 Move X8, [X19+384]
	069 Compare X8, 0
	070 JumpIfNotEqual {98}
	071 Move X8, [X19+184]
	072 Compare X8, 0
	073 JumpIfEqual {149}
	074 Move X8, [X8+56]
	075 Compare X8, 0
	076 JumpIfEqual {149}
	077 Move W9, [X8+24]
	078 Compare W9, 0
	079 JumpIfEqual {150}
	080 Move X0, [X19+192]
	081 Compare X0, 0
	082 JumpIfEqual {149}
	083 Move X9, [X0]
	084 Move V0, [X8+32]
	085 Move X8, -19083264
	086 Move V1, [X8+2740]
	087 Move X8, [X9+472]
	088 Move X1, [X9+480]
	089 NotImplemented "Instruction FDIV not yet implemented."
	090 NotImplemented "Instruction BLR not yet implemented."
	091 Move X8, [X19+384]
	092 Compare X8, 0
	093 JumpIfEqual {149}
	094 Move W9, 1
	095 Move W10, 0x3FC00000
	096 Move [X8+133], W9
	097 Move [X8+136], W10
	098 Move S0, 1
	099 Move X0, [X19+192]
	100 Compare X0, 0
	101 JumpIfEqual {149}
	102 Move X8, [X0]
	103 Move X9, [X8+504]
	104 Move X1, [X8+512]
	105 NotImplemented "Instruction BLR not yet implemented."
	106 Move X0, [X19+384]
	107 Compare X0, 0
	108 JumpIfEqual {149}
	109 Move X8, -19083264
	110 Move V0, [X8+3376]
	111 Move W1, W31
	112 Call ArmstrongView.SetHeadMoving, X0, X1, V0
	113 Move X8, [X19+384]
	114 Compare X8, 0
	115 JumpIfEqual {149}
	116 Move S0, 0.5
	117 Move X8, [X19+184]
	118 Compare X8, 0
	119 JumpIfEqual {149}
	120 Move X8, [X8+48]
	121 Compare X8, 0
	122 JumpIfEqual {149}
	123 Move W9, [X8+24]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move X0, [X19+192]
	126 Compare X0, 0
	127 JumpIfEqual {149}
	128 Move X9, [X0]
	129 Move V0, [X8+36]
	130 Move X8, -19083264
	131 Move V1, [X8+2740]
	132 Move X8, [X9+456]
	133 Move X1, [X9+464]
	134 NotImplemented "Instruction FDIV not yet implemented."
	135 NotImplemented "Instruction BLR not yet implemented."
	136 Move X8, [X19+384]
	137 Compare X8, 0
	138 JumpIfEqual {149}
	139 Move X10, -19083264
	140 Move V0, [X10+2688]
	141 Move W9, 1
	142 Move [X8+133], W9
	143 Move W9, 0x3FC00000
	144 Move [X8+136], W9
	145 Move [X8+128], S0
	146 Move X30, [X31+16]
	147 Move X19, [X31+24]
	148 Return 
	149 Call 0x1B6FA1C
	150 Call 0x1B6FA24

Method: System.Void Setup()

Disassembly:
	0x01CDD754 LDR W1, [X8 + 0x24]
	0x01CDD758 LDR X2, [X20 + 0xD0]
	0x01CDD75C LDR X3, [X8 + 0xB8]
	0x01CDD760 LDR X5, [X8 + 0x18]
	0x01CDD764 FMUL S0, S0, S3
	0x01CDD768 FMUL S1, S1, S3
	0x01CDD76C FMUL S2, S2, S3
	0x01CDD770 MOV X0, X23
	0x01CDD774 MOV X4, X3
	0x01CDD778 MOV X6, X31
	0x01CDD77C BL 0x1CB93D4
	0x01CDD780 B 0x1CDD648
	0x01CDD784 LDR X1, [X25]
	0x01CDD788 ADD X0, X31, 0x20
	0x01CDD78C BL 0x2A14F2C
	0x01CDD790 LDP X20, X19, [X31 + 0xD0]
	0x01CDD794 LDP X22, X21, [X31 + 0xC0]
	0x01CDD798 LDP X24, X23, [X31 + 0xB0]
	0x01CDD79C LDP X26, X25, [X31 + 0xA0]
	0x01CDD7A0 LDP X28, X27, [X31 + 0x90]
	0x01CDD7A4 LDP X29, X30, [X31 + 0x80]
	0x01CDD7A8 LDP D9, D8, [X31 + 0x70]
	0x01CDD7AC LDP D11, D10, [X31 + 0x60]
	0x01CDD7B0 LDP D13, D12, [X31 + 0x50]
	0x01CDD7B4 LDR V14, [X31 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.Setup, X0
	006 Move X0, [X19+200]
	007 Compare X0, 0
	008 JumpIfEqual {34}
	009 Move W1, 1
	010 Move X2, X31
	011 Call NavMeshAgent.set_updatePosition, X0, X1
	012 Move X0, [X19+200]
	013 Compare X0, 0
	014 JumpIfEqual {34}
	015 Move W1, 1
	016 Move X2, X31
	017 Call NavMeshAgent.set_updateRotation, X0, X1
	018 Move X0, [X19+64]
	019 Compare X0, 0
	020 JumpIfEqual {34}
	021 Move X1, X31
	022 Call NetworkObject.get_HasStateAuthority, X0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {29}
	027 Move X0, X19
	028 Call ArmstrongController.SetRoaming, X0
	029 Move X0, X19
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Call ArmstrongController.HandlePhaseChanged, X0
	033 Return 
	034 Call 0x1B6FA1C

Method: System.Void HandleRevive()

Disassembly:
	0x01CDD848 ADD X0, X31, 0x20
	0x01CDD84C BL 0x2A14F2C
	0x01CDD850 CBNZ X20, 0x1CDD85C
	0x01CDD854 MOV X0, X19
	0x01CDD858 BL 0x1C8418C
	0x01CDD85C MOV X0, X20
	0x01CDD860 BL 0x1B6EA14
	0x01CDD864 BL 0x18F46A8
	0x01CDD868 STP X30, X19, [X31 - 0x10]!
	0x01CDD86C MOVZ W1, 0x4
	0x01CDD870 MOV X19, X0
	0x01CDD874 BL 0x1CDC380
	0x01CDD878 FMOV S0, W31
	0x01CDD87C MOV X0, X19
	0x01CDD880 MOV X1, X31
	0x01CDD884 BL 0x1CE47EC
	0x01CDD888 LDR X9, [X19 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleRevive, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {25}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {22}
	015 Move X0, X19
	016 Call ArmstrongController.Initialize, X0
	017 Move X0, X19
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Call ArmstrongController.SetRoaming, X0
	021 Return 
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return 
	025 Call 0x1B6FA1C

Method: System.Void HandleDie()

Disassembly:
	0x01CDD8D8 LDR X8, [X11 + 0x2A8]
	0x01CDD8DC LDR X2, [X11 + 0x2B0]
	0x01CDD8E0 MOV X0, X19
	0x01CDD8E4 MOV W1, W31
	0x01CDD8E8 BLR X8
	0x01CDD8EC MOV X0, X19
	0x01CDD8F0 MOV X1, X31
	0x01CDD8F4 BL 0x1CE4BFC
	0x01CDD8F8 LDR X8, [X19]
	0x01CDD8FC MOV X0, X19
	0x01CDD900 LDR X2, [X8 + 0x318]
	0x01CDD904 LDR X1, [X8 + 0x320]
	0x01CDD908 LDP X30, X19, [X31], #0x10
	0x01CDD90C BR X2
	0x01CDD910 BL 0x1B6EA1C
	0x01CDD914 BL 0x1B6EA24

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleDie, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {24}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {21}
	015 Move W1, 6
	016 Move X0, X19
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call ArmstrongController.set_phase, X0, X1
	020 Return 
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 
	024 Call 0x1B6FA1C

Method: System.Void Initialize()

Disassembly:
	0x01CDD88C CBZ X9, 0x1CDD910
	0x01CDD890 LDR X8, [X9 + 0x38]
	0x01CDD894 CBZ X8, 0x1CDD910
	0x01CDD898 LDR W10, [X8 + 0x18]
	0x01CDD89C CBZ W10, 0x1CDD914
	0x01CDD8A0 LDR X10, [X9 + 0x58]
	0x01CDD8A4 CBZ X10, 0x1CDD910
	0x01CDD8A8 LDR W11, [X10 + 0x18]
	0x01CDD8AC CMP W11, 0x1
	0x01CDD8B0 B.LS 0x1CDD914
	0x01CDD8B4 LDR X9, [X9 + 0x60]
	0x01CDD8B8 CBZ X9, 0x1CDD910
	0x01CDD8BC LDR W11, [X9 + 0x18]
	0x01CDD8C0 CMP W11, 0x1
	0x01CDD8C4 B.LS 0x1CDD914
	0x01CDD8C8 LDR X11, [X19]
	0x01CDD8CC LDR V0, [X8 + 0x20]
	0x01CDD8D0 LDR V1, [X10 + 0x24]
	0x01CDD8D4 LDR V2, [X9 + 0x24]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X1, X31
	005 Move X19, X0
	006 Move X9, [X8+824]
	007 Move X2, [X8+832]
	008 NotImplemented "Instruction BLR not yet implemented."
	009 Move S0, W31
	010 Move X0, X19
	011 Move X1, X31
	012 Move [X19+376], W31
	013 Call MobController.set__timerToChasing, X0, V0
	014 Move S0, W31
	015 Move X0, X19
	016 Move X1, X31
	017 Call MobController.set__timerToSearching, X0, V0
	018 Move [X19+380], W31
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Return 

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01CDD918 STP X30, X21, [X31 - 0x20]!
	0x01CDD91C STP X20, X19, [X31 + 0x10]
	0x01CDD920 ADRP X21, 0x2546000
	0x01CDD924 ADRP X20, 0x2272000
	0x01CDD928 LDRB W8, [X21 + 0x627]
	0x01CDD92C LDR X20, [X20 + 0xD48]
	0x01CDD930 MOV X19, X0
	0x01CDD934 TBNZ X8, 0x0, 0x1CDD94C
	0x01CDD938 ADRP X0, 0x2272000
	0x01CDD93C LDR X0, [X0 + 0xD48]
	0x01CDD940 BL 0x1B6E7F0
	0x01CDD944 MOVZ W8, 0x1
	0x01CDD948 STRB W8, [X21 + 0x627]
	0x01CDD94C MOV X0, X19
	0x01CDD950 MOV X1, X31
	0x01CDD954 BL 0x1CE76C0
	0x01CDD958 LDR X0, [X20]
	0x01CDD95C LDR W8, [X0 + 0xE0]
	0x01CDD960 CBNZ W8, 0x1CDD96C
	0x01CDD964 BL 0x1B6E8F8
	0x01CDD968 LDR X0, [X20]
	0x01CDD96C LDR X8, [X0 + 0xB8]
	0x01CDD970 MOV X0, X31
	0x01CDD974 LDP S0, S1, [X8 + 0xB0]
	0x01CDD978 LDP S2, S3, [X8 + 0xB8]
	0x01CDD97C BL 0x3A75B14
	0x01CDD980 MOV X0, X19
	0x01CDD984 BL 0x1CDC3FC
	0x01CDD988 LDR X8, [X19 + 0xB8]
	0x01CDD98C CBZ X8, 0x1CDD9AC
	0x01CDD990 LDR V3, [X8 + 0x4C]
	0x01CDD994 LDP X20, X19, [X31 + 0x10]
	0x01CDD998 FMOV S4, 0.5
	0x01CDD99C MOV X0, X31
	0x01CDD9A0 FMUL S3, S3, S4
	0x01CDD9A4 LDP X30, X21, [X31], #0x20
	0x01CDD9A8 B 0x3A7567C
	0x01CDD9AC BL 0x1B6EA1C
	0x01CDD9B0 STP X30, X21, [X31 - 0x20]!
	0x01CDD9B4 STP X20, X19, [X31 + 0x10]
	0x01CDD9B8 ADRP X20, 0x2546000
	0x01CDD9BC ADRP X21, 0x2271000
	0x01CDD9C0 LDRB W8, [X20 + 0x628]
	0x01CDD9C4 LDR X21, [X21 + 0xD78]
	0x01CDD9C8 MOV X19, X0
	0x01CDD9CC TBNZ X8, 0x0, 0x1CDD9E4
	0x01CDD9D0 ADRP X0, 0x2271000
	0x01CDD9D4 LDR X0, [X0 + 0xD78]
	0x01CDD9D8 BL 0x1B6E7F0
	0x01CDD9DC MOVZ W8, 0x1
	0x01CDD9E0 STRB W8, [X20 + 0x628]
	0x01CDD9E4 LDR X0, [X21]
	0x01CDD9E8 LDR W8, [X0 + 0xE0]
	0x01CDD9EC CBNZ W8, 0x1CDD9F4
	0x01CDD9F0 BL 0x1B6E8F8
	0x01CDD9F4 MOV X0, X19
	0x01CDD9F8 LDP X20, X19, [X31 + 0x10]
	0x01CDD9FC MOV X1, X31
	0x01CDDA00 LDP X30, X21, [X31], #0x20
	0x01CDDA04 B 0x1CE8008
	0x01CDDA08 STP X30, X19, [X31 - 0x10]!
	0x01CDDA0C AND W1, W1, 0x1
	0x01CDDA10 MOV X2, X31
	0x01CDDA14 MOV X19, X0
	0x01CDDA18 BL 0x1CE8140
	0x01CDDA1C LDR W1, [X19 + 0x174]
	0x01CDDA20 MOV X0, X19
	0x01CDDA24 LDP X30, X19, [X31], #0x10
	0x01CDDA28 B 0x1CDC380
	0x01CDDA2C STP X30, X19, [X31 - 0x10]!
	0x01CDDA30 MOV X1, X31
	0x01CDDA34 MOV X19, X0
	0x01CDDA38 BL 0x1CE81EC

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x2547000
	006 Move W8, [X20+1569]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2273000
	013 Move X0, [X0+3624]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1569], W8
	017 Move X0, X19
	018 Move X1, X31
	019 Call MobController.FixedUpdateNetwork, X0
	020 Move X0, X19
	021 Move X1, X31
	022 Call MobController.get__updateValid, X0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {79}
	027 Move X0, X19
	028 Call ArmstrongController.get_phase, X0
	029 Subtract W8, W0, 1
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, -18808832
	032 Add X9, X9, 2363
	033 NotImplemented "Instruction ADR not yet implemented."
	034 Move W11, [X9]
	035 Add X10, X10, X11
	036 CallNoReturn X10
	037 Move X8, [X19]
	038 Move X9, [X8+808]
	039 Move X1, [X8+816]
	040 Move X0, X19
	041 Call ArmstrongController.UpdateFinding, X0
	042 Move X8, [X19]
	043 Move X9, [X8+840]
	044 Move X1, [X8+848]
	045 Move X0, X19
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move X0, X19
	048 Call ArmstrongController.UpdateSearching, X0
	049 Move X0, X19
	050 Call ArmstrongController.UpdatePunchAndHold, X0
	051 Call GameManager.get_isDebug
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {79}
	056 Move X20, [X19+360]
	057 Compare X20, 0
	058 JumpIfEqual {79}
	059 Move X0, X19
	060 Call ArmstrongController.get_phase, X0
	061 Move X8, 0x2273000
	062 Move X8, [X8+3624]
	063 Move TEMP, 0
	064 Not TEMP
	065 Move X9, TEMP
	066 Move [X31+24], W0
	067 Add X0, X31, 8
	068 Move X8, [X8]
	069 Move X1, X31
	070 Move [X31+8], X8
	071 Move [X31+16], X9
	072 Call Enum.ToString, X0
	073 Move X8, [X20+64]
	074 Move X9, [X20+24]
	075 Move X2, [X20+40]
	076 Move X1, X0
	077 Move X0, X8
	078 NotImplemented "Instruction BLR not yet implemented."
	079 Move X20, [X31+48]
	080 Move X19, [X31+56]
	081 Move X30, [X31+32]
	082 Add X31, X31, 64
	083 Return 

Method: System.Void SetRoaming()

Disassembly:
	0x01CDD7B8 ADD X31, X31, 0xE0
	0x01CDD7BC RET
	0x01CDD7C0 BL 0x1B6EA1C
	0x01CDD7C4 BL 0x1B6EA1C
	0x01CDD7C8 BL 0x1B6EA1C
	0x01CDD7CC BL 0x1B6EA1C
	0x01CDD7D0 BL 0x1B6EA1C
	0x01CDD7D4 BL 0x1B6EA24
	0x01CDD7D8 B 0x1CDD804
	0x01CDD7DC B 0x1CDD804
	0x01CDD7E0 B 0x1CDD804
	0x01CDD7E4 B 0x1CDD804
	0x01CDD7E8 B 0x1CDD804
	0x01CDD7EC B 0x1CDD804
	0x01CDD7F0 B 0x1CDD804
	0x01CDD7F4 B 0x1CDD804
	0x01CDD7F8 B 0x1CDD804
	0x01CDD7FC B 0x1CDD804
	0x01CDD800 B 0x1CDD804
	0x01CDD804 MOV X19, X0
	0x01CDD808 CMP W1, 0x1
	0x01CDD80C B.NE 0x1CDD838
	0x01CDD810 MOV X0, X19
	0x01CDD814 BL 0x3D19840
	0x01CDD818 LDR X20, [X0]
	0x01CDD81C BL 0x3D19850
	0x01CDD820 LDR X1, [X25]
	0x01CDD824 ADD X0, X31, 0x20
	0x01CDD828 BL 0x2A14F2C
	0x01CDD82C CBZ X20, 0x1CDD790
	0x01CDD830 MOV X0, X20
	0x01CDD834 BL 0x1B6EA14
	0x01CDD838 MOV X20, X31
	0x01CDD83C B 0x1CDD844
	0x01CDD840 MOV X19, X0
	0x01CDD844 LDR X1, [X25]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 1
	004 Move X19, X0
	005 Call ArmstrongController.set_phase, X0, X1
	006 Move X9, [X19+184]
	007 Compare X9, 0
	008 JumpIfEqual {44}
	009 Move X8, [X9+48]
	010 Compare X8, 0
	011 JumpIfEqual {44}
	012 Move W10, [X8+24]
	013 Compare W10, 0
	014 JumpIfEqual {45}
	015 Move X10, [X9+88]
	016 Compare X10, 0
	017 JumpIfEqual {44}
	018 Move W11, [X10+24]
	019 Compare W11, 0
	020 JumpIfEqual {45}
	021 Move X9, [X9+96]
	022 Compare X9, 0
	023 JumpIfEqual {44}
	024 Move W11, [X9+24]
	025 Compare W11, 0
	026 JumpIfEqual {45}
	027 Move X11, [X19]
	028 Move V0, [X8+32]
	029 Move V1, [X10+32]
	030 Move V2, [X9+32]
	031 Move X8, [X11+680]
	032 Move X2, [X11+688]
	033 Move X0, X19
	034 Move W1, W31
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X8, [X19]
	037 Move W1, 1
	038 Move X0, X19
	039 Move X3, [X8+776]
	040 Move X2, [X8+784]
	041 Move X30, [X31+16]
	042 Move X19, [X31+24]
	043 CallNoReturn X3
	044 Call 0x1B6FA1C
	045 Call 0x1B6FA24

Method: System.Void UpdateRoaming()

Disassembly:
	0x01CDDD88 LDP X30, X19, [X31], #0x10
	0x01CDDD8C RET
	0x01CDDD90 ADRP X0, 0x2270000
	0x01CDDD94 LDR X0, [X0 + 0x490]
	0x01CDDD98 BL 0x1B6E804
	0x01CDDD9C BL 0x1B6EA0C
	0x01CDDDA0 MOV X19, X0
	0x01CDDDA4 ADRP X0, 0x2272000
	0x01CDDDA8 LDR X0, [X0 + 0xE48]
	0x01CDDDAC BL 0x1B6E804
	0x01CDDDB0 MOV X1, X0
	0x01CDDDB4 MOV X0, X19
	0x01CDDDB8 MOV X2, X31
	0x01CDDDBC BL 0x31E7550
	0x01CDDDC0 ADRP X0, 0x2272000
	0x01CDDDC4 LDR X0, [X0 + 0xE50]
	0x01CDDDC8 BL 0x1B6E804
	0x01CDDDCC MOV X1, X0
	0x01CDDDD0 MOV X0, X19
	0x01CDDDD4 BL 0x1B6E8E8
	0x01CDDDD8 STP X30, X19, [X31 - 0x10]!
	0x01CDDDDC LDR X8, [X0 + 0x50]
	0x01CDDDE0 CBZ X8, 0x1CDDDF0
	0x01CDDDE4 STR W1, [X8 + 0x3C]
	0x01CDDDE8 LDP X30, X19, [X31], #0x10
	0x01CDDDEC RET
	0x01CDDDF0 ADRP X0, 0x2270000
	0x01CDDDF4 LDR X0, [X0 + 0x490]
	0x01CDDDF8 BL 0x1B6E804
	0x01CDDDFC BL 0x1B6EA0C
	0x01CDDE00 MOV X19, X0
	0x01CDDE04 ADRP X0, 0x2272000
	0x01CDDE08 LDR X0, [X0 + 0xE48]
	0x01CDDE0C BL 0x1B6E804
	0x01CDDE10 MOV X1, X0
	0x01CDDE14 MOV X0, X19
	0x01CDDE18 MOV X2, X31
	0x01CDDE1C BL 0x31E7550
	0x01CDDE20 ADRP X0, 0x2272000
	0x01CDDE24 LDR X0, [X0 + 0xE58]
	0x01CDDE28 BL 0x1B6E804
	0x01CDDE2C MOV X1, X0
	0x01CDDE30 MOV X0, X19
	0x01CDDE34 BL 0x1B6E8E8
	0x01CDDE38 STR X30, [X31 - 0x10]!
	0x01CDDE3C LDR X8, [X0 + 0xB8]
	0x01CDDE40 CBZ X8, 0x1CDDE50
	0x01CDDE44 LDR V0, [X8 + 0x28]
	0x01CDDE48 LDR X30, [X31], #0x10
	0x01CDDE4C RET
	0x01CDDE50 BL 0x1B6EA1C
	0x01CDDE54 STP X30, X19, [X31 - 0x10]!
	0x01CDDE58 LDR X8, [X0 + 0x50]
	0x01CDDE5C CBZ X8, 0x1CDDE6C
	0x01CDDE60 LDR V0, [X8 + 0x40]
	0x01CDDE64 LDP X30, X19, [X31], #0x10
	0x01CDDE68 RET
	0x01CDDE6C ADRP X0, 0x2270000
	0x01CDDE70 LDR X0, [X0 + 0x490]
	0x01CDDE74 BL 0x1B6E804
	0x01CDDE78 BL 0x1B6EA0C
	0x01CDDE7C MOV X19, X0
	0x01CDDE80 ADRP X0, 0x2272000
	0x01CDDE84 LDR X0, [X0 + 0xE60]
	0x01CDDE88 BL 0x1B6E804
	0x01CDDE8C MOV X1, X0
	0x01CDDE90 MOV X0, X19
	0x01CDDE94 MOV X2, X31
	0x01CDDE98 BL 0x31E7550
	0x01CDDE9C ADRP X0, 0x2272000
	0x01CDDEA0 LDR X0, [X0 + 0xE68]
	0x01CDDEA4 BL 0x1B6E804
	0x01CDDEA8 MOV X1, X0
	0x01CDDEAC MOV X0, X19
	0x01CDDEB0 BL 0x1B6E8E8
	0x01CDDEB4 STP X30, X19, [X31 - 0x10]!
	0x01CDDEB8 LDR X8, [X0 + 0x50]
	0x01CDDEBC CBZ X8, 0x1CDDECC
	0x01CDDEC0 STR S0, [X8 + 0x40]
	0x01CDDEC4 LDP X30, X19, [X31], #0x10
	0x01CDDEC8 RET
	0x01CDDECC ADRP X0, 0x2270000
	0x01CDDED0 LDR X0, [X0 + 0x490]
	0x01CDDED4 BL 0x1B6E804
	0x01CDDED8 BL 0x1B6EA0C
	0x01CDDEDC MOV X19, X0
	0x01CDDEE0 ADRP X0, 0x2272000
	0x01CDDEE4 LDR X0, [X0 + 0xE60]
	0x01CDDEE8 BL 0x1B6E804
	0x01CDDEEC MOV X1, X0
	0x01CDDEF0 MOV X0, X19
	0x01CDDEF4 MOV X2, X31
	0x01CDDEF8 BL 0x31E7550
	0x01CDDEFC ADRP X0, 0x2272000
	0x01CDDF00 LDR X0, [X0 + 0xE70]
	0x01CDDF04 BL 0x1B6E804
	0x01CDDF08 MOV X1, X0
	0x01CDDF0C MOV X0, X19
	0x01CDDF10 BL 0x1B6E8E8
	0x01CDDF14 STR X30, [X31 - 0x20]!
	0x01CDDF18 STP X20, X19, [X31 + 0x10]
	0x01CDDF1C MOV X19, X0
	0x01CDDF20 BL 0x1CDDD78
	0x01CDDF24 SUB W8, W0, 0x1
	0x01CDDF28 CMP W8, 0x4
	0x01CDDF2C B.HI 0x1CDE014
	0x01CDDF30 ADRP X9, 0xFFFFFFFFFEE0F000
	0x01CDDF34 ADD X9, X9, 0x940
	0x01CDDF38 ADR X10, 0x10
	0x01CDDF3C LDRB W11, [X9, X8, LSL]
	0x01CDDF40 ADD X10, X10, X11, 0x2, LSL
	0x01CDDF44 BR X10
	0x01CDDF48 LDR X9, [X19 + 0xB8]
	0x01CDDF4C CBZ X9, 0x1CDE03C
	0x01CDDF50 LDR X8, [X9 + 0x38]
	0x01CDDF54 CBZ X8, 0x1CDE03C
	0x01CDDF58 LDR W10, [X8 + 0x18]
	0x01CDDF5C CBZ W10, 0x1CDE040
	0x01CDDF60 LDR X9, [X9 + 0x30]
	0x01CDDF64 CBZ X9, 0x1CDE03C
	0x01CDDF68 LDR W10, [X9 + 0x18]
	0x01CDDF6C CBZ W10, 0x1CDE040
	0x01CDDF70 LDR X0, [X19 + 0xC0]
	0x01CDDF74 CBZ X0, 0x1CDE03C
	0x01CDDF78 LDR X10, [X0]
	0x01CDDF7C LDR V0, [X8 + 0x20]
	0x01CDDF80 LDR V1, [X9 + 0x20]
	0x01CDDF84 LDP X8, X1, [X10 + 0x1D8]
	0x01CDDF88 FDIV S0, S0, S1
	0x01CDDF8C BLR X8
	0x01CDDF90 LDR X8, [X19 + 0x178]
	0x01CDDF94 CBZ X8, 0x1CDE03C
	0x01CDDF98 MOVZ W9, 0x3F800000
	0x01CDDF9C B 0x1CDDFC4
	0x01CDDFA0 LDR X0, [X19 + 0xC0]
	0x01CDDFA4 CBZ X0, 0x1CDE03C
	0x01CDDFA8 LDR X8, [X0]
	0x01CDDFAC FMOV S0, 1
	0x01CDDFB0 LDP X9, X1, [X8 + 0x1C8]
	0x01CDDFB4 BLR X9
	0x01CDDFB8 LDR X8, [X19 + 0x178]
	0x01CDDFBC CBZ X8, 0x1CDE03C
	0x01CDDFC0 MOVZ W9, 0x3F000000
	0x01CDDFC4 STR W9, [X8 + 0x80]
	0x01CDDFC8 B 0x1CDE014
	0x01CDDFCC LDR X0, [X19 + 0xC0]
	0x01CDDFD0 CBZ X0, 0x1CDE03C
	0x01CDDFD4 LDR X8, [X0]
	0x01CDDFD8 LDP X9, X1, [X8 + 0x1E8]
	0x01CDDFDC BLR X9
	0x01CDDFE0 LDR X8, [X19 + 0xB8]
	0x01CDDFE4 CBZ X8, 0x1CDE03C
	0x01CDDFE8 LDR X20, [X8 + 0xC0]
	0x01CDDFEC MOV X0, X19
	0x01CDDFF0 MOV X1, X31
	0x01CDDFF4 BL 0x3A9B084
	0x01CDDFF8 CBZ X0, 0x1CDE03C
	0x01CDDFFC MOV X1, X31
	0x01CDE000 BL 0x3AA7658
	0x01CDE004 FMOV S3, 1
	0x01CDE008 MOV X0, X20
	0x01CDE00C MOV X1, X31
	0x01CDE010 BL 0x1CCD9CC
	0x01CDE014 LDR X20, [X19 + 0x178]
	0x01CDE018 MOV X0, X19
	0x01CDE01C BL 0x1CDDD78
	0x01CDE020 CBZ X20, 0x1CDE03C
	0x01CDE024 CMP W0, 0x3
	0x01CDE028 MOV X0, X20
	0x01CDE02C LDP X20, X19, [X31 + 0x10]
	0x01CDE030 CSET W1, EQ
	0x01CDE034 LDR X30, [X31], #0x20
	0x01CDE038 B 0x1CDE044
	0x01CDE03C BL 0x1B6EA1C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0x2547000
	008 Move X20, 0x2273000
	009 Move W8, [X21+1570]
	010 Move X20, [X20+3640]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {39}
	016 Move X0, 0x2272000
	017 Move X0, [X0+2064]
	018 Call 0x1B6F7F0
	019 Move X0, 0x2272000
	020 Move X0, [X0+2072]
	021 Call 0x1B6F7F0
	022 Move X0, 0x2273000
	023 Move X0, [X0+3632]
	024 Call 0x1B6F7F0
	025 Move X0, 0x2273000
	026 Move X0, [X0+3568]
	027 Call 0x1B6F7F0
	028 Move X0, 0x2271000
	029 Move X0, [X0+1144]
	030 Call 0x1B6F7F0
	031 Move X0, 0x2273000
	032 Move X0, [X0+3648]
	033 Call 0x1B6F7F0
	034 Move X0, 0x2273000
	035 Move X0, [X0+3640]
	036 Call 0x1B6F7F0
	037 Move W8, 1
	038 Move [X21+1570], W8
	039 Move X0, [X20]
	040 Move [X31+24], X31
	041 Move [X31+8], X31
	042 Call 0x1B6FA0C
	043 Move X1, X31
	044 Move X20, X0
	045 Call Object..ctor, X0
	046 Compare X20, 0
	047 JumpIfEqual {201}
	048 Move X0, X19
	049 Move X1, X31
	050 Move [X20+16], X19
	051 Call MobController.UpdateRoaming, X0
	052 Add X1, X31, 24
	053 Move X0, X19
	054 Move X2, X31
	055 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {90}
	060 Move X20, [X31+24]
	061 Compare X20, 0
	062 JumpIfEqual {201}
	063 Move W1, [X20+24]
	064 Move W0, W31
	065 Move X2, X31
	066 Call Random.Range, X0, X1
	067 Move X8, 0x2273000
	068 Move X8, [X8+3568]
	069 Move W1, W0
	070 Move X0, X20
	071 Move X2, [X8]
	072 Call List`1<Object>.get_Item, X0, X1
	073 Move X8, [X19]
	074 Move X1, X0
	075 Move X0, X19
	076 Move X9, [X8+824]
	077 Move X2, [X8+832]
	078 NotImplemented "Instruction BLR not yet implemented."
	079 Move X0, [X19+320]
	080 Compare X0, 0
	081 JumpIfEqual {201}
	082 Move X1, X31
	083 Call Component.get_transform, X0
	084 Compare X0, 0
	085 JumpIfEqual {201}
	086 Move X1, X31
	087 Call Transform.get_position, X0
	088 Move X0, X19
	089 Call ArmstrongController.SetChasing, X0, X1
	090 Add X1, X31, 8
	091 Move X0, X19
	092 Move X2, X31
	093 Call MobDetectionUtil.TryGetPlayersBySound, X0, X1
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfNotEqual {165}
	098 Move X8, [X19+184]
	099 Compare X8, 0
	100 JumpIfEqual {201}
	101 Move X8, [X8+120]
	102 Compare X8, 0
	103 JumpIfEqual {201}
	104 Move W9, [X8+24]
	105 Compare W9, 0
	106 JumpIfEqual {202}
	107 Move V0, [X8+32]
	108 Move X8, 0x2272000
	109 Move X8, [X8+2072]
	110 Move S1, 0.5
	111 Multiply S0, S0, S1
	112 Move [X20+24], S0
	113 Move X0, [X8]
	114 Move X21, [X31+8]
	115 Call 0x1B6FA0C
	116 Move X8, 0x2273000
	117 Move X8, [X8+3648]
	118 Move X1, X20
	119 Move X3, X31
	120 Move X22, X0
	121 Move X2, [X8]
	122 Call Func`2<Object, Boolean>..ctor, X0, X1, X2
	123 Move X8, 0x2272000
	124 Move X8, [X8+2064]
	125 Move X0, X21
	126 Move X1, X22
	127 Move X2, [X8]
	128 Call 0x20B1E40, X0, X1
	129 Move X8, 0x2271000
	130 Move X8, [X8+1144]
	131 Move X20, X0
	132 Move X8, [X8]
	133 Move W9, [X8+224]
	134 Compare W9, 0
	135 JumpIfNotEqual {138}
	136 Move X0, X8
	137 Call 0x1B6F8F8
	138 Move X0, X20
	139 Move X1, X31
	140 Move X2, X31
	141 Call Object.op_Inequality, X0, X1
	142 Move TEMP, X0
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfNotEqual {163}
	146 Move X8, [X19]
	147 Move X0, X19
	148 Move X1, X20
	149 Move X9, [X8+824]
	150 Move X2, [X8+832]
	151 NotImplemented "Instruction BLR not yet implemented."
	152 Compare X20, 0
	153 JumpIfEqual {201}
	154 Move X0, X20
	155 Move X1, X31
	156 Call Component.get_transform, X0
	157 Compare X0, 0
	158 JumpIfEqual {201}
	159 Move X1, X31
	160 Call Transform.get_position, X0
	161 Move X0, X19
	162 Call ArmstrongController.SetChasing, X0, X1
	163 Move X0, X19
	164 Call ArmstrongController.SetFinding, X0
	165 Move W8, [X19+181]
	166 Compare W8, 0
	167 JumpIfEqual {194}
	168 Move W8, [X19+180]
	169 Compare W8, 0
	170 JumpIfEqual {176}
	171 Move X8, [X19]
	172 Move X0, X19
	173 Move X9, [X8+856]
	174 Move X1, [X8+864]
	175 NotImplemented "Instruction BLR not yet implemented."
	176 Move X8, [X19+184]
	177 Compare X8, 0
	178 JumpIfEqual {201}
	179 Move X8, [X8+48]
	180 Compare X8, 0
	181 JumpIfEqual {201}
	182 Move W9, [X8+24]
	183 Compare W9, 0
	184 JumpIfEqual {202}
	185 Move X9, [X19]
	186 Move V0, [X8+32]
	187 Move X8, -19087360
	188 Move V1, [X8+2740]
	189 Move X8, [X9+872]
	190 Move X1, [X9+880]
	191 Move X0, X19
	192 NotImplemented "Instruction FDIV not yet implemented."
	193 NotImplemented "Instruction BLR not yet implemented."
	194 Move X20, [X31+48]
	195 Move X19, [X31+56]
	196 Move X22, [X31+32]
	197 Move X21, [X31+40]
	198 Move X30, [X31+16]
	199 Add X31, X31, 64
	200 Return 
	201 Call 0x1B6FA1C
	202 Call 0x1B6FA24

Method: System.Void SetFinding()

Disassembly:
	0x01CDE104 FMOV S3, 1
	0x01CDE108 FMOV S1, W31
	0x01CDE10C FMOV S0, W31
	0x01CDE110 CBZ X19, 0x1CDE130
	0x01CDE114 MOV X0, X19
	0x01CDE118 MOV W1, W21
	0x01CDE11C LDP X20, X19, [X31 + 0x20]
	0x01CDE120 LDP X22, X21, [X31 + 0x10]
	0x01CDE124 MOV X2, X31
	0x01CDE128 LDR X30, [X31], #0x30
	0x01CDE12C B 0x3A7D234
	0x01CDE130 BL 0x1B6EA1C
	0x01CDE134 STP X30, X19, [X31 - 0x10]!
	0x01CDE138 MOV X1, X31
	0x01CDE13C MOV X19, X0
	0x01CDE140 BL 0x1CE54EC
	0x01CDE144 LDR X0, [X19 + 0xC8]
	0x01CDE148 CBZ X0, 0x1CDE19C
	0x01CDE14C MOVZ W1, 0x1
	0x01CDE150 MOV X2, X31
	0x01CDE154 BL 0x3A4ACE4
	0x01CDE158 LDR X0, [X19 + 0xC8]
	0x01CDE15C CBZ X0, 0x1CDE19C
	0x01CDE160 MOVZ W1, 0x1
	0x01CDE164 MOV X2, X31
	0x01CDE168 BL 0x3A4AD28
	0x01CDE16C LDR X0, [X19 + 0x40]
	0x01CDE170 CBZ X0, 0x1CDE19C
	0x01CDE174 MOV X1, X31
	0x01CDE178 BL 0x1D9E780
	0x01CDE17C TBZ X0, 0x0, 0x1CDE190
	0x01CDE180 MOV X0, X19
	0x01CDE184 BL 0x1CDE1A0
	0x01CDE188 MOV X0, X19
	0x01CDE18C BL 0x1CDE1E0
	0x01CDE190 MOV X0, X19
	0x01CDE194 LDP X30, X19, [X31], #0x10

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 2
	004 Move X19, X0
	005 Call ArmstrongController.set_phase, X0, X1
	006 Move X0, [X19+200]
	007 Move [X19+376], W31
	008 Compare X0, 0
	009 JumpIfEqual {44}
	010 Move W1, W31
	011 Move X2, X31
	012 Call NavMeshAgent.set_isStopped, X0, X1
	013 Move X9, [X19+184]
	014 Compare X9, 0
	015 JumpIfEqual {44}
	016 Move X8, [X9+48]
	017 Compare X8, 0
	018 JumpIfEqual {44}
	019 Move W10, [X8+24]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X10, [X9+88]
	022 Compare X10, 0
	023 JumpIfEqual {44}
	024 Move W11, [X10+24]
	025 Compare W11, 0
	026 JumpIfEqual {45}
	027 Move X9, [X9+96]
	028 Compare X9, 0
	029 JumpIfEqual {44}
	030 Move W11, [X9+24]
	031 Compare W11, 0
	032 JumpIfEqual {45}
	033 Move X11, [X19]
	034 Move V0, [X8+36]
	035 Move V1, [X10+32]
	036 Move V2, [X9+32]
	037 Move X3, [X11+680]
	038 Move X2, [X11+688]
	039 Move X0, X19
	040 Move W1, W31
	041 Move X30, [X31+16]
	042 Move X19, [X31+24]
	043 CallNoReturn X3
	044 Call 0x1B6FA1C
	045 Call 0x1B6FA24

Method: System.Void UpdateFinding()

Disassembly:
	0x01CDDA3C MOV X0, X19
	0x01CDDA40 BL 0x1CDC320
	0x01CDDA44 STR W0, [X19 + 0x174]
	0x01CDDA48 LDP X30, X19, [X31], #0x10
	0x01CDDA4C RET
	0x01CDDA50 STP D13, D12, [X31 - 0x50]!
	0x01CDDA54 STP D11, D10, [X31 + 0x10]
	0x01CDDA58 STP D9, D8, [X31 + 0x20]
	0x01CDDA5C STR X30, [X31 + 0x30]
	0x01CDDA60 STP X20, X19, [X31 + 0x40]
	0x01CDDA64 CBZ X1, 0x1CDDB34
	0x01CDDA68 MOV X19, X0
	0x01CDDA6C MOV X0, X1
	0x01CDDA70 MOV X1, X31
	0x01CDDA74 BL 0x3A9B084
	0x01CDDA78 CBZ X0, 0x1CDDB34
	0x01CDDA7C MOV X1, X31
	0x01CDDA80 BL 0x3AA7658
	0x01CDDA84 LDR X8, [X19 + 0x10]
	0x01CDDA88 CBZ X8, 0x1CDDB34
	0x01CDDA8C LDR X0, [X8 + 0xD0]
	0x01CDDA90 CBZ X0, 0x1CDDB34
	0x01CDDA94 MOV X1, X31
	0x01CDDA98 MOV V8.16B, V0.16B
	0x01CDDA9C MOV V9.16B, V1.16B
	0x01CDDAA0 MOV V10.16B, V2.16B
	0x01CDDAA4 BL 0x3AA7658
	0x01CDDAA8 ADRP X20, 0x2546000
	0x01CDDAAC LDRB W8, [X20 + 0x506]
	0x01CDDAB0 MOV V11.16B, V0.16B
	0x01CDDAB4 MOV V12.16B, V1.16B
	0x01CDDAB8 MOV V13.16B, V2.16B
	0x01CDDABC CBNZ W8, 0x1CDDAD4
	0x01CDDAC0 ADRP X0, 0x2270000
	0x01CDDAC4 LDR X0, [X0 + 0x488]
	0x01CDDAC8 BL 0x1B6E7F0
	0x01CDDACC MOVZ W8, 0x1
	0x01CDDAD0 STRB W8, [X20 + 0x506]
	0x01CDDAD4 ADRP X8, 0x2270000
	0x01CDDAD8 LDR X8, [X8 + 0x488]
	0x01CDDADC FSUB S11, S8, S11
	0x01CDDAE0 FSUB S9, S9, S12
	0x01CDDAE4 FSUB S8, S10, S13
	0x01CDDAE8 LDR X0, [X8]
	0x01CDDAEC LDR W8, [X0 + 0xE0]
	0x01CDDAF0 CBNZ W8, 0x1CDDAF8
	0x01CDDAF4 BL 0x1B6E8F8
	0x01CDDAF8 FMUL S0, S11, S11
	0x01CDDAFC FMUL S1, S9, S9
	0x01CDDB00 LDR V2, [X19 + 0x18]
	0x01CDDB04 FADD S0, S0, S1
	0x01CDDB08 FMUL S1, S8, S8
	0x01CDDB0C FADD S0, S1, S0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move V8, [X0+376]
	005 Move X1, X31
	006 Move X19, X0
	007 Call MobController.get_deltaTime, X0
	008 Add S0, S8, S0
	009 Move S1, 10
	010 NotImplemented "Instruction FCMP not yet implemented."
	011 Move [X19+376], S0
	012 Move X8, [X19]
	013 Move X0, X19
	014 Move X9, [X8+808]
	015 Move X1, [X8+816]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X0, X19
	018 Call ArmstrongController.SetRoaming, X0
	019 Move W8, [X19+181]
	020 Compare W8, 0
	021 JumpIfEqual {33}
	022 Move W8, [X19+180]
	023 Compare W8, 0
	024 JumpIfEqual {37}
	025 Move X8, [X19]
	026 Move X0, X19
	027 Move X30, [X31+16]
	028 Move X19, [X31+24]
	029 Move X2, [X8+856]
	030 Move X1, [X8+864]
	031 Move V8, [X31+32]
	032 CallNoReturn X2
	033 Move X30, [X31+16]
	034 Move X19, [X31+24]
	035 Move V8, [X31+32]
	036 Return 
	037 Move X8, [X19+184]
	038 Compare X8, 0
	039 JumpIfEqual {57}
	040 Move X8, [X8+48]
	041 Compare X8, 0
	042 JumpIfEqual {57}
	043 Move W9, [X8+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X9, [X19]
	046 Move V0, [X8+36]
	047 Move X8, -19083264
	048 Move V1, [X8+2740]
	049 Move X2, [X9+872]
	050 Move X1, [X9+880]
	051 Move X0, X19
	052 Move X30, [X31+16]
	053 Move X19, [X31+24]
	054 NotImplemented "Instruction FDIV not yet implemented."
	055 Move V8, [X31+32]
	056 CallNoReturn X2
	057 Call 0x1B6FA1C
	058 Call 0x1B6FA24

Method: System.Void SetChasing(UnityEngine.Vector3 targetPosition)

Disassembly:
	0x01CDE048 STP X22, X21, [X31 + 0x10]
	0x01CDE04C STP X20, X19, [X31 + 0x20]
	0x01CDE050 ADRP X22, 0x2545000
	0x01CDE054 LDRB W8, [X22 + 0x631]
	0x01CDE058 MOV W20, W1
	0x01CDE05C MOV X19, X0
	0x01CDE060 AND W21, W1, 0x1
	0x01CDE064 TBNZ X8, 0x0, 0x1CDE07C
	0x01CDE068 ADRP X0, 0x2271000
	0x01CDE06C LDR X0, [X0 + 0xE78]
	0x01CDE070 BL 0x1B6E7F0
	0x01CDE074 MOVZ W8, 0x1
	0x01CDE078 STRB W8, [X22 + 0x631]
	0x01CDE07C LDRB W8, [X19 + 0x90]
	0x01CDE080 CMP W8, W21
	0x01CDE084 B.NE 0x1CDE098
	0x01CDE088 LDP X20, X19, [X31 + 0x20]
	0x01CDE08C LDP X22, X21, [X31 + 0x10]
	0x01CDE090 LDR X30, [X31], #0x30
	0x01CDE094 RET
	0x01CDE098 LDR X0, [X19 + 0x88]
	0x01CDE09C STRB W21, [X19 + 0x90]
	0x01CDE0A0 CBZ X0, 0x1CDE130
	0x01CDE0A4 MOV X1, X31
	0x01CDE0A8 BL 0x3A7BCC8
	0x01CDE0AC ADRP X22, 0x2271000
	0x01CDE0B0 LDR X22, [X22 + 0xE78]
	0x01CDE0B4 MOV X19, X0
	0x01CDE0B8 LDR X8, [X22]
	0x01CDE0BC LDR W9, [X8 + 0xE0]
	0x01CDE0C0 CBNZ W9, 0x1CDE0D0
	0x01CDE0C4 MOV X0, X8
	0x01CDE0C8 BL 0x1B6E8F8
	0x01CDE0CC LDR X8, [X22]
	0x01CDE0D0 LDR X9, [X8 + 0xB8]
	0x01CDE0D4 LDR W21, [X9]
	0x01CDE0D8 TBZ X20, 0x0, 0x1CDE100
	0x01CDE0DC LDR W10, [X8 + 0xE0]
	0x01CDE0E0 CBNZ W10, 0x1CDE0F4
	0x01CDE0E4 MOV X0, X8
	0x01CDE0E8 BL 0x1B6E8F8
	0x01CDE0EC LDR X8, [X22]
	0x01CDE0F0 LDR X9, [X8 + 0xB8]
	0x01CDE0F4 LDP S0, S1, [X9 + 0x8]
	0x01CDE0F8 LDP S2, S3, [X9 + 0x10]
	0x01CDE0FC B 0x1CDE110
	0x01CDE100 FMOV S2, W31

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move W1, 3
	007 Move V8, V2
	008 Move V9, V1
	009 Move V10, V0
	010 Move X19, X0
	011 Call ArmstrongController.set_phase, X0, X1
	012 Move S0, W31
	013 Move X0, X19
	014 Move X1, X31
	015 Call MobController.set__timerToChasing, X0, V0
	016 Move X0, X19
	017 Move V0, V10
	018 Move V1, V9
	019 Move V2, V8
	020 Move X1, X31
	021 Call MobController.set__positionThatPlayerStayed, X0, X1
	022 Move X9, [X19+184]
	023 Compare X9, 0
	024 JumpIfEqual {57}
	025 Move X8, [X9+56]
	026 Compare X8, 0
	027 JumpIfEqual {57}
	028 Move W10, [X8+24]
	029 Compare W10, 0
	030 JumpIfEqual {58}
	031 Move X10, [X9+88]
	032 Compare X10, 0
	033 JumpIfEqual {57}
	034 Move W11, [X10+24]
	035 Compare W11, 0
	036 JumpIfEqual {58}
	037 Move X9, [X9+96]
	038 Compare X9, 0
	039 JumpIfEqual {57}
	040 Move W11, [X9+24]
	041 Compare W11, 0
	042 JumpIfEqual {58}
	043 Move X11, [X19]
	044 Move V0, [X8+32]
	045 Move V1, [X10+32]
	046 Move V2, [X9+32]
	047 Move X3, [X11+680]
	048 Move X2, [X11+688]
	049 Move X0, X19
	050 Move X30, [X31+32]
	051 Move X19, [X31+40]
	052 Move D9, [X31+16]
	053 Move D8, [X31+24]
	054 Move W1, W31
	055 Move V10, [X31+48]
	056 CallNoReturn X3
	057 Call 0x1B6FA1C
	058 Call 0x1B6FA24

Method: System.Void UpdateChasing()

Disassembly:
	0x01CDE198 B 0x1CDDF14
	0x01CDE19C BL 0x1B6EA1C
	0x01CDE1A0 STP X30, X19, [X31 - 0x10]!
	0x01CDE1A4 LDR X8, [X0]
	0x01CDE1A8 MOV X1, X31
	0x01CDE1AC MOV X19, X0
	0x01CDE1B0 LDR X9, [X8 + 0x338]
	0x01CDE1B4 LDR X2, [X8 + 0x340]
	0x01CDE1B8 BLR X9
	0x01CDE1BC FMOV S0, W31
	0x01CDE1C0 MOV X0, X19
	0x01CDE1C4 MOV X1, X31
	0x01CDE1C8 BL 0x1CE472C
	0x01CDE1CC FMOV S0, W31
	0x01CDE1D0 MOV X0, X19
	0x01CDE1D4 MOV X1, X31
	0x01CDE1D8 LDP X30, X19, [X31], #0x10
	0x01CDE1DC B 0x1CE47EC
	0x01CDE1E0 STP X30, X19, [X31 - 0x10]!
	0x01CDE1E4 MOVZ W1, 0x1
	0x01CDE1E8 MOV X19, X0
	0x01CDE1EC BL 0x1CDDDD8
	0x01CDE1F0 LDR X9, [X19 + 0xB8]
	0x01CDE1F4 CBZ X9, 0x1CDE268
	0x01CDE1F8 LDR X8, [X9 + 0x30]
	0x01CDE1FC CBZ X8, 0x1CDE268
	0x01CDE200 LDR W10, [X8 + 0x18]
	0x01CDE204 CBZ W10, 0x1CDE26C
	0x01CDE208 LDR X10, [X9 + 0x58]
	0x01CDE20C CBZ X10, 0x1CDE268
	0x01CDE210 LDR W11, [X10 + 0x18]
	0x01CDE214 CBZ W11, 0x1CDE26C
	0x01CDE218 LDR X9, [X9 + 0x60]
	0x01CDE21C CBZ X9, 0x1CDE268
	0x01CDE220 LDR W11, [X9 + 0x18]
	0x01CDE224 CBZ W11, 0x1CDE26C
	0x01CDE228 LDR X11, [X19]
	0x01CDE22C LDR V0, [X8 + 0x20]
	0x01CDE230 LDR V1, [X10 + 0x20]
	0x01CDE234 LDR V2, [X9 + 0x20]
	0x01CDE238 LDR X8, [X11 + 0x2A8]
	0x01CDE23C LDR X2, [X11 + 0x2B0]
	0x01CDE240 MOV X0, X19
	0x01CDE244 MOV W1, W31
	0x01CDE248 BLR X8
	0x01CDE24C LDR X8, [X19]
	0x01CDE250 MOVZ W1, 0x1
	0x01CDE254 MOV X0, X19
	0x01CDE258 LDR X3, [X8 + 0x308]
	0x01CDE25C LDR X2, [X8 + 0x310]
	0x01CDE260 LDP X30, X19, [X31], #0x10
	0x01CDE264 BR X3
	0x01CDE268 BL 0x1B6EA1C
	0x01CDE26C BL 0x1B6EA24
	0x01CDE270 STP X30, X19, [X31 - 0x10]!
	0x01CDE274 MOV X1, X31
	0x01CDE278 MOV X19, X0
	0x01CDE27C BL 0x1CE5C84
	0x01CDE280 LDR X0, [X19 + 0x40]
	0x01CDE284 CBZ X0, 0x1CDE2B0
	0x01CDE288 MOV X1, X31
	0x01CDE28C BL 0x1D9E780
	0x01CDE290 TBZ X0, 0x0, 0x1CDE2A8
	0x01CDE294 MOV X0, X19
	0x01CDE298 BL 0x1CDE1A0
	0x01CDE29C MOV X0, X19
	0x01CDE2A0 LDP X30, X19, [X31], #0x10
	0x01CDE2A4 B 0x1CDE1E0
	0x01CDE2A8 LDP X30, X19, [X31], #0x10
	0x01CDE2AC RET
	0x01CDE2B0 BL 0x1B6EA1C
	0x01CDE2B4 SUB X31, X31, 0x40
	0x01CDE2B8 STR X30, [X31 + 0x20]
	0x01CDE2BC STP X20, X19, [X31 + 0x30]
	0x01CDE2C0 ADRP X20, 0x2545000
	0x01CDE2C4 LDRB W8, [X20 + 0x62A]
	0x01CDE2C8 MOV X19, X0
	0x01CDE2CC TBNZ X8, 0x0, 0x1CDE2E4
	0x01CDE2D0 ADRP X0, 0x2271000
	0x01CDE2D4 LDR X0, [X0 + 0xE80]
	0x01CDE2D8 BL 0x1B6E7F0
	0x01CDE2DC MOVZ W8, 0x1
	0x01CDE2E0 STRB W8, [X20 + 0x62A]
	0x01CDE2E4 MOV X0, X19
	0x01CDE2E8 MOV X1, X31
	0x01CDE2EC BL 0x1CE58BC
	0x01CDE2F0 MOV X0, X19
	0x01CDE2F4 MOV X1, X31
	0x01CDE2F8 BL 0x1CE4CE0
	0x01CDE2FC TBZ X0, 0x0, 0x1CDE3BC
	0x01CDE300 MOV X0, X19
	0x01CDE304 BL 0x1CDDD78
	0x01CDE308 SUB W8, W0, 0x1
	0x01CDE30C CMP W8, 0x3
	0x01CDE310 B.HI 0x1CDE368
	0x01CDE314 ADRP X9, 0xFFFFFFFFFEE0E000
	0x01CDE318 ADD X9, X9, 0x945
	0x01CDE31C ADR X10, 0x10
	0x01CDE320 LDRB W11, [X9, X8, LSL]
	0x01CDE324 ADD X10, X10, X11, 0x2, LSL
	0x01CDE328 BR X10
	0x01CDE32C LDR X8, [X19]
	0x01CDE330 LDR X9, [X8 + 0x328]
	0x01CDE334 LDR X1, [X8 + 0x330]
	0x01CDE338 B 0x1CDE348

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2546000
	008 Move W8, [X20+1571]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2270000
	015 Move X0, [X0+1144]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1571], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call MobController.UpdateChasing, X0
	022 Move X0, [X19+208]
	023 Compare X0, 0
	024 JumpIfEqual {122}
	025 Move X20, 0x2270000
	026 Move X20, [X20+1144]
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X0, X19
	030 Move X1, X31
	031 Move V8, V0
	032 Move V9, V1
	033 Move V10, V2
	034 Call MobController.get__positionThatPlayerStayed, X0
	035 Move X0, [X20]
	036 Move X20, [X19+320]
	037 Subtract S0, S8, S0
	038 Subtract S1, S9, S1
	039 Move W8, [X0+224]
	040 Subtract S2, S10, S2
	041 Multiply S0, S0, S0
	042 Multiply S1, S1, S1
	043 Add S8, S0, S1
	044 Multiply S9, S2, S2
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1B6F8F8
	048 Move X0, X20
	049 Move X1, X31
	050 Move X2, X31
	051 Add S9, S9, S8
	052 Call Object.op_Inequality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {80}
	057 Move X0, [X19+320]
	058 Compare X0, 0
	059 JumpIfEqual {122}
	060 Move X1, X31
	061 Call NetPlayer.get_isDie, X0
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfEqual {80}
	066 Move X0, [X19+184]
	067 Compare X0, 0
	068 JumpIfEqual {122}
	069 Move X1, X31
	070 Call MobData.get_attackRangeSqr, X0
	071 NotImplemented "Instruction FCMP not yet implemented."
	072 Move X1, [X19+320]
	073 Move X0, X19
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X30, [X31+24]
	077 Move D9, [X31+8]
	078 Move D8, [X31+16]
	079 Move V10, [X31+48]
	080 Move X0, X19
	081 Move X1, X31
	082 Call MobController.get__timerToChasing, X0
	083 Move X0, X19
	084 Move X1, X31
	085 Move V8, V0
	086 Call MobController.get_deltaTime, X0
	087 Add S0, S8, S0
	088 Move X0, X19
	089 Move X1, X31
	090 Call MobController.set__timerToChasing, X0, V0
	091 Move X0, X19
	092 Move X1, X31
	093 Call MobController.get__timerToChasing, X0
	094 Move X0, [X19+184]
	095 Compare X0, 0
	096 JumpIfEqual {122}
	097 Move V1, [X0+104]
	098 NotImplemented "Instruction FCMP not yet implemented."
	099 Move X1, X31
	100 Call MobData.get_attackRangeSqr, X0
	101 NotImplemented "Instruction FCMP not yet implemented."
	102 Move X0, X19
	103 Call ArmstrongController.SetSearching, X0
	104 Move X0, X19
	105 Call ArmstrongController.SetRoaming, X0
	106 Move X20, [X19+200]
	107 Move X0, X19
	108 Move X1, X31
	109 Call MobController.get__positionThatPlayerStayed, X0
	110 Compare X20, 0
	111 JumpIfEqual {122}
	112 Move X0, X20
	113 Move X20, [X31+32]
	114 Move X19, [X31+40]
	115 Move X30, [X31+24]
	116 Move D9, [X31+8]
	117 Move D8, [X31+16]
	118 Move X1, X31
	119 Move V10, [X31+48]
	120 Call NavMeshAgent.SetDestination, X0, X1
	121 Return 
	122 Call 0x1B6FA1C

Method: System.Void SetSearching()

Disassembly:
	0x01CDE868 MOV V14.16B, V0.16B
	0x01CDE86C BL 0x1CE4CC4
	0x01CDE870 FADD S0, S14, S0
	0x01CDE874 MOV X0, X19
	0x01CDE878 MOV X1, X31
	0x01CDE87C BL 0x1CE472C
	0x01CDE880 MOV X0, X19
	0x01CDE884 MOV X1, X31
	0x01CDE888 BL 0x1CE46CC
	0x01CDE88C LDR X0, [X19 + 0xB8]
	0x01CDE890 CBZ X0, 0x1CDE934
	0x01CDE894 LDR V1, [X0 + 0x68]
	0x01CDE898 FCMP S0, S1
	0x01CDE89C B.GE 0x1CDE8DC
	0x01CDE8A0 FSUB S0, S8, S11
	0x01CDE8A4 FSUB S1, S9, S12
	0x01CDE8A8 FSUB S2, S10, S13
	0x01CDE8AC FMUL S0, S0, S0
	0x01CDE8B0 FMUL S1, S1, S1
	0x01CDE8B4 FADD S0, S0, S1
	0x01CDE8B8 FMUL S1, S2, S2
	0x01CDE8BC MOV X1, X31
	0x01CDE8C0 FADD S8, S1, S0
	0x01CDE8C4 BL 0x1CE847C
	0x01CDE8C8 FCMP S8, S0
	0x01CDE8CC B.PL 0x1CDE8E4
	0x01CDE8D0 MOV X0, X19
	0x01CDE8D4 BL 0x1CDE9BC
	0x01CDE8D8 B 0x1CDE8E4
	0x01CDE8DC MOV X0, X19
	0x01CDE8E0 BL 0x1CDE1E0
	0x01CDE8E4 MOV X0, X19
	0x01CDE8E8 BL 0x1CDDD78
	0x01CDE8EC CMP W0, 0x2
	0x01CDE8F0 B.NE 0x1CDE914
	0x01CDE8F4 LDR X20, [X19 + 0xC8]
	0x01CDE8F8 MOV X0, X19
	0x01CDE8FC MOV X1, X31
	0x01CDE900 BL 0x1CE4BFC
	0x01CDE904 CBZ X20, 0x1CDE934
	0x01CDE908 MOV X0, X20
	0x01CDE90C MOV X1, X31
	0x01CDE910 BL 0x3A4A810
	0x01CDE914 LDP X20, X19, [X31 + 0x50]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 4
	004 Move X19, X0
	005 Call ArmstrongController.set_phase, X0, X1
	006 Move S0, W31
	007 Move X0, X19
	008 Move X1, X31
	009 Call MobController.set__timerToSearching, X0, V0
	010 Move X9, [X19+184]
	011 Compare X9, 0
	012 JumpIfEqual {48}
	013 Move X8, [X9+56]
	014 Compare X8, 0
	015 JumpIfEqual {48}
	016 Move W10, [X8+24]
	017 Compare W10, 0
	018 JumpIfEqual {49}
	019 Move X10, [X9+88]
	020 Compare X10, 0
	021 JumpIfEqual {48}
	022 Move W11, [X10+24]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X9, [X9+96]
	025 Compare X9, 0
	026 JumpIfEqual {48}
	027 Move W11, [X9+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X11, [X19]
	030 Move V0, [X8+32]
	031 Move V1, [X10+36]
	032 Move V2, [X9+36]
	033 Move X8, [X11+680]
	034 Move X2, [X11+688]
	035 Move X0, X19
	036 Move W1, W31
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X0, X19
	039 Move X1, X31
	040 Call MobController.get__positionThatPlayerStayed, X0
	041 Move X8, [X19]
	042 Move X0, X19
	043 Move X2, [X8+792]
	044 Move X1, [X8+800]
	045 Move X30, [X31+16]
	046 Move X19, [X31+24]
	047 CallNoReturn X2
	048 Call 0x1B6FA1C
	049 Call 0x1B6FA24

Method: System.Void UpdateSearching()

Disassembly:
	0x01CDDB10 LDP X20, X19, [X31 + 0x40]
	0x01CDDB14 LDR X30, [X31 + 0x30]
	0x01CDDB18 LDP D9, D8, [X31 + 0x20]
	0x01CDDB1C LDP D11, D10, [X31 + 0x10]
	0x01CDDB20 FSQRT S0, S0
	0x01CDDB24 FCMP S0, S2
	0x01CDDB28 CSET W0, MI
	0x01CDDB2C LDP D13, D12, [X31], #0x50
	0x01CDDB30 RET
	0x01CDDB34 BL 0x1B6EA1C
	0x01CDDB38 STP X30, X19, [X31 - 0x10]!
	0x01CDDB3C MOV X1, X31
	0x01CDDB40 MOV X19, X0
	0x01CDDB44 BL 0x1CE9BB0
	0x01CDDB48 LDR X0, [X19 + 0x38]
	0x01CDDB4C CBZ X0, 0x1CDDB68
	0x01CDDB50 MOV X1, X31
	0x01CDDB54 BL 0x3AA6C80
	0x01CDDB58 STP S0, S1, [X19 + 0x8C]
	0x01CDDB5C STR S2, [X19 + 0x94]
	0x01CDDB60 LDP X30, X19, [X31], #0x10
	0x01CDDB64 RET
	0x01CDDB68 BL 0x1B6EA1C
	0x01CDDB6C STP D9, D8, [X31 - 0x30]!
	0x01CDDB70 STR X30, [X31 + 0x10]
	0x01CDDB74 STP X20, X19, [X31 + 0x20]
	0x01CDDB78 MOV X1, X31
	0x01CDDB7C MOV X19, X0
	0x01CDDB80 BL 0x1CE9DB8
	0x01CDDB84 LDRB W8, [X19 + 0x85]
	0x01CDDB88 CBZ W8, 0x1CDDBCC
	0x01CDDB8C MOV X0, X31
	0x01CDDB90 BL 0x3AA47CC
	0x01CDDB94 LDR X20, [X19 + 0x38]
	0x01CDDB98 CBZ X20, 0x1CDDBDC
	0x01CDDB9C LDR V1, [X19 + 0x88]
	0x01CDDBA0 LDP S9, S8, [X19 + 0x90]
	0x01CDDBA4 FMUL S0, S0, S1
	0x01CDDBA8 BL 0x3D198B0
	0x01CDDBAC MOV X0, X20
	0x01CDDBB0 LDP X20, X19, [X31 + 0x20]
	0x01CDDBB4 LDR X30, [X31 + 0x10]
	0x01CDDBB8 MOV V1.16B, V9.16B
	0x01CDDBBC MOV V2.16B, V8.16B
	0x01CDDBC0 MOV X1, X31
	0x01CDDBC4 LDP D9, D8, [X31], #0x30
	0x01CDDBC8 B 0x3AA6D0C
	0x01CDDBCC LDP X20, X19, [X31 + 0x20]
	0x01CDDBD0 LDR X30, [X31 + 0x10]
	0x01CDDBD4 LDP D9, D8, [X31], #0x30
	0x01CDDBD8 RET
	0x01CDDBDC BL 0x1B6EA1C
	0x01CDDBE0 STP D13, D12, [X31 - 0x50]!
	0x01CDDBE4 STP D11, D10, [X31 + 0x10]
	0x01CDDBE8 STP D9, D8, [X31 + 0x20]
	0x01CDDBEC STR X30, [X31 + 0x30]
	0x01CDDBF0 STP X20, X19, [X31 + 0x40]
	0x01CDDBF4 ADRP X20, 0x2546000
	0x01CDDBF8 LDRB W8, [X20 + 0x441]
	0x01CDDBFC MOV V8.16B, V5.16B
	0x01CDDC00 MOV V9.16B, V4.16B
	0x01CDDC04 MOV V11.16B, V3.16B
	0x01CDDC08 MOV V10.16B, V2.16B
	0x01CDDC0C MOV V12.16B, V1.16B
	0x01CDDC10 MOV V13.16B, V0.16B
	0x01CDDC14 MOV X19, X0
	0x01CDDC18 CBNZ W8, 0x1CDDC30
	0x01CDDC1C ADRP X0, 0x2270000
	0x01CDDC20 LDR X0, [X0 + 0x488]
	0x01CDDC24 BL 0x1B6E7F0
	0x01CDDC28 MOVZ W8, 0x1
	0x01CDDC2C STRB W8, [X20 + 0x441]
	0x01CDDC30 ADRP X8, 0x2270000
	0x01CDDC34 LDR X8, [X8 + 0x488]
	0x01CDDC38 FSUB S11, S13, S11
	0x01CDDC3C FSUB S9, S12, S9
	0x01CDDC40 FSUB S10, S10, S8
	0x01CDDC44 LDR X0, [X8]
	0x01CDDC48 LDR W8, [X0 + 0xE0]
	0x01CDDC4C CBNZ W8, 0x1CDDC54
	0x01CDDC50 BL 0x1B6E8F8
	0x01CDDC54 FMUL S0, S11, S11
	0x01CDDC58 FMUL S1, S9, S9
	0x01CDDC5C ADRP X8, 0xFFFFFFFFFEDCC000
	0x01CDDC60 FADD S0, S0, S1
	0x01CDDC64 LDR V1, [X8 + 0xB64]
	0x01CDDC68 FMUL S2, S10, S10
	0x01CDDC6C FADD S0, S2, S0
	0x01CDDC70 FSQRT S0, S0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], D8
	003 Move [X31+24], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2547000
	007 Move W8, [X20+1572]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x2273000
	014 Move X0, [X0+3632]
	015 Call 0x1B6F7F0
	016 Move X0, 0x2273000
	017 Move X0, [X0+3568]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X20+1572], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Move [X31+8], X31
	024 Call MobController.get__timerToSearching, X0
	025 Move X0, X19
	026 Move X1, X31
	027 Move V8, V0
	028 Call MobController.get_deltaTime, X0
	029 Add S0, S8, S0
	030 Move X0, X19
	031 Move X1, X31
	032 Call MobController.set__timerToSearching, X0, V0
	033 Move X0, X19
	034 Move X1, X31
	035 Call MobController.get__timerToSearching, X0
	036 Move X8, [X19+184]
	037 Compare X8, 0
	038 JumpIfEqual {98}
	039 Move V1, [X8+108]
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 Add X1, X31, 8
	042 Move X0, X19
	043 Move X2, X31
	044 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {87}
	049 Move X20, [X31+8]
	050 Compare X20, 0
	051 JumpIfEqual {98}
	052 Move W1, [X20+24]
	053 Move W0, W31
	054 Move X2, X31
	055 Call Random.Range, X0, X1
	056 Move X8, 0x2273000
	057 Move X8, [X8+3568]
	058 Move W1, W0
	059 Move X0, X20
	060 Move X2, [X8]
	061 Call List`1<Object>.get_Item, X0, X1
	062 Move X8, [X19]
	063 Move X1, X0
	064 Move X0, X19
	065 Move X9, [X8+824]
	066 Move X2, [X8+832]
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Move X0, [X19+320]
	069 Compare X0, 0
	070 JumpIfEqual {98}
	071 Move X1, X31
	072 Call Component.get_transform, X0
	073 Compare X0, 0
	074 JumpIfEqual {98}
	075 Move X1, X31
	076 Call Transform.get_position, X0
	077 Move X0, X19
	078 Move X1, X31
	079 Call MobController.set__positionThatPlayerStayed, X0, X1
	080 Move X0, X19
	081 Move X1, X31
	082 Call MobController.get__positionThatPlayerStayed, X0
	083 Move X0, X19
	084 Call ArmstrongController.SetChasing, X0, X1
	085 Move X0, X19
	086 Call ArmstrongController.SetRoaming, X0
	087 Move X8, [X19]
	088 Move X0, X19
	089 Move X9, [X8+808]
	090 Move X1, [X8+816]
	091 NotImplemented "Instruction BLR not yet implemented."
	092 Move X20, [X31+32]
	093 Move X19, [X31+40]
	094 Move X30, [X31+24]
	095 Move V8, [X31+16]
	096 Add X31, X31, 48
	097 Return 
	098 Call 0x1B6FA1C

Method: System.Void SetPunchAndHold(AnimalCompany.NetPlayer targetPlayer)

Disassembly:
	0x01CDE33C LDR X8, [X19]
	0x01CDE340 LDR X9, [X8 + 0x348]
	0x01CDE344 LDR X1, [X8 + 0x350]
	0x01CDE348 MOV X0, X19
	0x01CDE34C BLR X9
	0x01CDE350 B 0x1CDE368
	0x01CDE354 MOV X0, X19
	0x01CDE358 BL 0x1CDE3CC
	0x01CDE35C B 0x1CDE368
	0x01CDE360 MOV X0, X19
	0x01CDE364 BL 0x1CDE434
	0x01CDE368 BL 0x1CD2434
	0x01CDE36C TBZ X0, 0x0, 0x1CDE3BC
	0x01CDE370 LDR X20, [X19 + 0x168]
	0x01CDE374 CBZ X20, 0x1CDE3BC
	0x01CDE378 MOV X0, X19
	0x01CDE37C BL 0x1CDDD78
	0x01CDE380 ADRP X8, 0x2271000
	0x01CDE384 LDR X8, [X8 + 0xE80]
	0x01CDE388 MOVN X9, 0x0
	0x01CDE38C STR W0, [X31 + 0x18]
	0x01CDE390 ADD X0, X31, 0x8
	0x01CDE394 LDR X8, [X8]
	0x01CDE398 MOV X1, X31
	0x01CDE39C STP X8, X9, [X31 + 0x8]
	0x01CDE3A0 BL 0x321AF98
	0x01CDE3A4 LDR X8, [X20 + 0x40]
	0x01CDE3A8 LDR X9, [X20 + 0x18]
	0x01CDE3AC LDR X2, [X20 + 0x28]
	0x01CDE3B0 MOV X1, X0
	0x01CDE3B4 MOV X0, X8
	0x01CDE3B8 BLR X9
	0x01CDE3BC LDP X20, X19, [X31 + 0x30]
	0x01CDE3C0 LDR X30, [X31 + 0x20]
	0x01CDE3C4 ADD X31, X31, 0x40
	0x01CDE3C8 RET
	0x01CDE3CC STR D8, [X31 - 0x20]!
	0x01CDE3D0 STP X30, X19, [X31 + 0x10]
	0x01CDE3D4 MOV X19, X0
	0x01CDE3D8 BL 0x1CDDE54
	0x01CDE3DC MOV X0, X19
	0x01CDE3E0 MOV X1, X31
	0x01CDE3E4 MOV V8.16B, V0.16B
	0x01CDE3E8 BL 0x1CE4CC4
	0x01CDE3EC FADD S0, S8, S0
	0x01CDE3F0 MOV X0, X19
	0x01CDE3F4 BL 0x1CDDEB4
	0x01CDE3F8 MOV X0, X19
	0x01CDE3FC BL 0x1CDDE54
	0x01CDE400 LDR X8, [X19 + 0xB8]
	0x01CDE404 CBZ X8, 0x1CDE430
	0x01CDE408 LDR V1, [X8 + 0x28]
	0x01CDE40C FCMP S0, S1
	0x01CDE410 B.GE 0x1CDE420
	0x01CDE414 LDP X30, X19, [X31 + 0x10]
	0x01CDE418 LDR V8, [X31], #0x20
	0x01CDE41C RET
	0x01CDE420 MOV X0, X19
	0x01CDE424 LDP X30, X19, [X31 + 0x10]
	0x01CDE428 LDR V8, [X31], #0x20
	0x01CDE42C B 0x1CDEA6C
	0x01CDE430 BL 0x1B6EA1C
	0x01CDE434 SUB X31, X31, 0x30
	0x01CDE438 STR D8, [X31 + 0x10]
	0x01CDE43C STR X30, [X31 + 0x18]
	0x01CDE440 STP X20, X19, [X31 + 0x20]
	0x01CDE444 ADRP X20, 0x2545000
	0x01CDE448 LDRB W8, [X20 + 0x62D]
	0x01CDE44C MOV X19, X0
	0x01CDE450 TBNZ X8, 0x0, 0x1CDE474
	0x01CDE454 ADRP X0, 0x2271000
	0x01CDE458 LDR X0, [X0 + 0xE30]
	0x01CDE45C BL 0x1B6E7F0
	0x01CDE460 ADRP X0, 0x2271000
	0x01CDE464 LDR X0, [X0 + 0xDF0]
	0x01CDE468 BL 0x1B6E7F0
	0x01CDE46C MOVZ W8, 0x1
	0x01CDE470 STRB W8, [X20 + 0x62D]
	0x01CDE474 MOV X0, X19
	0x01CDE478 MOV X1, X31
	0x01CDE47C STR X31, [X31 + 0x8]
	0x01CDE480 BL 0x1CE478C
	0x01CDE484 MOV X0, X19
	0x01CDE488 MOV X1, X31
	0x01CDE48C MOV V8.16B, V0.16B
	0x01CDE490 BL 0x1CE4CC4
	0x01CDE494 FADD S0, S8, S0
	0x01CDE498 MOV X0, X19
	0x01CDE49C MOV X1, X31
	0x01CDE4A0 BL 0x1CE47EC
	0x01CDE4A4 MOV X0, X19
	0x01CDE4A8 MOV X1, X31
	0x01CDE4AC BL 0x1CE478C
	0x01CDE4B0 LDR X8, [X19 + 0xB8]
	0x01CDE4B4 CBZ X8, 0x1CDE594
	0x01CDE4B8 LDR V1, [X8 + 0x6C]
	0x01CDE4BC FCMP S0, S1
	0x01CDE4C0 B.GE 0x1CDE560
	0x01CDE4C4 ADD X1, X31, 0x8
	0x01CDE4C8 MOV X0, X19
	0x01CDE4CC MOV X2, X31
	0x01CDE4D0 BL 0x1CE85FC
	0x01CDE4D4 TBZ X0, 0x0, 0x1CDE56C
	0x01CDE4D8 LDR X20, [X31 + 0x8]
	0x01CDE4DC CBZ X20, 0x1CDE594
	0x01CDE4E0 LDR W1, [X20 + 0x18]
	0x01CDE4E4 MOV W0, W31
	0x01CDE4E8 MOV X2, X31
	0x01CDE4EC BL 0x3A98D10
	0x01CDE4F0 ADRP X8, 0x2271000
	0x01CDE4F4 LDR X8, [X8 + 0xDF0]
	0x01CDE4F8 MOV W1, W0
	0x01CDE4FC MOV X0, X20
	0x01CDE500 LDR X2, [X8]
	0x01CDE504 BL 0x2E46254
	0x01CDE508 LDR X8, [X19]
	0x01CDE50C MOV X1, X0
	0x01CDE510 MOV X0, X19
	0x01CDE514 LDR X9, [X8 + 0x338]
	0x01CDE518 LDR X2, [X8 + 0x340]
	0x01CDE51C BLR X9
	0x01CDE520 LDR X0, [X19 + 0x140]
	0x01CDE524 CBZ X0, 0x1CDE594
	0x01CDE528 MOV X1, X31
	0x01CDE52C BL 0x3A9B084
	0x01CDE530 CBZ X0, 0x1CDE594
	0x01CDE534 MOV X1, X31
	0x01CDE538 BL 0x3AA7658
	0x01CDE53C MOV X0, X19
	0x01CDE540 MOV X1, X31
	0x01CDE544 BL 0x1CE4C60
	0x01CDE548 MOV X0, X19
	0x01CDE54C MOV X1, X31
	0x01CDE550 BL 0x1CE4BFC
	0x01CDE554 MOV X0, X19
	0x01CDE558 BL 0x1CDE670
	0x01CDE55C B 0x1CDE580
	0x01CDE560 MOV X0, X19
	0x01CDE564 BL 0x1CDE1E0
	0x01CDE568 B 0x1CDE580
	0x01CDE56C LDR X8, [X19]
	0x01CDE570 MOV X0, X19
	0x01CDE574 LDR X9, [X8 + 0x328]
	0x01CDE578 LDR X1, [X8 + 0x330]
	0x01CDE57C BLR X9
	0x01CDE580 LDP X20, X19, [X31 + 0x20]
	0x01CDE584 LDR X30, [X31 + 0x18]
	0x01CDE588 LDR V8, [X31 + 0x10]
	0x01CDE58C ADD X31, X31, 0x30
	0x01CDE590 RET
	0x01CDE594 BL 0x1B6EA1C
	0x01CDE598 STR X30, [X31 - 0x20]!
	0x01CDE59C STP X20, X19, [X31 + 0x10]
	0x01CDE5A0 ADRP X20, 0x2545000
	0x01CDE5A4 LDRB W8, [X20 + 0x62B]
	0x01CDE5A8 MOV X19, X0
	0x01CDE5AC TBNZ X8, 0x0, 0x1CDE5D0
	0x01CDE5B0 ADRP X0, 0x2271000
	0x01CDE5B4 LDR X0, [X0 + 0xE30]
	0x01CDE5B8 BL 0x1B6E7F0
	0x01CDE5BC ADRP X0, 0x2271000
	0x01CDE5C0 LDR X0, [X0 + 0xDF0]
	0x01CDE5C4 BL 0x1B6E7F0
	0x01CDE5C8 MOVZ W8, 0x1
	0x01CDE5CC STRB W8, [X20 + 0x62B]
	0x01CDE5D0 MOV X0, X19
	0x01CDE5D4 MOV X1, X31
	0x01CDE5D8 STR X31, [X31 + 0x8]
	0x01CDE5DC BL 0x1CE67C8
	0x01CDE5E0 ADD X1, X31, 0x8
	0x01CDE5E4 MOV X0, X19
	0x01CDE5E8 MOV X2, X31
	0x01CDE5EC BL 0x1CE85FC
	0x01CDE5F0 TBZ X0, 0x0, 0x1CDE660
	0x01CDE5F4 LDR X20, [X31 + 0x8]
	0x01CDE5F8 CBZ X20, 0x1CDE66C
	0x01CDE5FC LDR W1, [X20 + 0x18]
	0x01CDE600 MOV W0, W31
	0x01CDE604 MOV X2, X31
	0x01CDE608 BL 0x3A98D10
	0x01CDE60C ADRP X8, 0x2271000
	0x01CDE610 LDR X8, [X8 + 0xDF0]
	0x01CDE614 MOV W1, W0
	0x01CDE618 MOV X0, X20
	0x01CDE61C LDR X2, [X8]
	0x01CDE620 BL 0x2E46254
	0x01CDE624 LDR X8, [X19]
	0x01CDE628 MOV X1, X0
	0x01CDE62C MOV X0, X19
	0x01CDE630 LDR X9, [X8 + 0x338]
	0x01CDE634 LDR X2, [X8 + 0x340]
	0x01CDE638 BLR X9
	0x01CDE63C LDR X0, [X19 + 0x140]
	0x01CDE640 CBZ X0, 0x1CDE66C
	0x01CDE644 MOV X1, X31
	0x01CDE648 BL 0x3A9B084
	0x01CDE64C CBZ X0, 0x1CDE66C
	0x01CDE650 MOV X1, X31
	0x01CDE654 BL 0x3AA7658
	0x01CDE658 MOV X0, X19
	0x01CDE65C BL 0x1CDE670
	0x01CDE660 LDP X20, X19, [X31 + 0x10]
	0x01CDE664 LDR X30, [X31], #0x20
	0x01CDE668 RET
	0x01CDE66C BL 0x1B6EA1C
	0x01CDE670 STR D10, [X31 - 0x30]!
	0x01CDE674 STP D9, D8, [X31 + 0x8]
	0x01CDE678 STR X30, [X31 + 0x18]
	0x01CDE67C STP X20, X19, [X31 + 0x20]
	0x01CDE680 MOVZ W1, 0x2
	0x01CDE684 MOV V8.16B, V2.16B
	0x01CDE688 MOV V9.16B, V1.16B
	0x01CDE68C MOV V10.16B, V0.16B
	0x01CDE690 MOV X19, X0
	0x01CDE694 BL 0x1CDDDD8
	0x01CDE698 FMOV S0, W31
	0x01CDE69C MOV X0, X19
	0x01CDE6A0 MOV X1, X31
	0x01CDE6A4 BL 0x1CE472C
	0x01CDE6A8 MOV X0, X19
	0x01CDE6AC MOV V0.16B, V10.16B
	0x01CDE6B0 MOV V1.16B, V9.16B
	0x01CDE6B4 MOV V2.16B, V8.16B
	0x01CDE6B8 MOV X1, X31
	0x01CDE6BC BL 0x1CE4C60
	0x01CDE6C0 LDR X9, [X19 + 0xB8]
	0x01CDE6C4 CBZ X9, 0x1CDE760
	0x01CDE6C8 LDR X8, [X9 + 0x38]
	0x01CDE6CC CBZ X8, 0x1CDE760
	0x01CDE6D0 LDR W10, [X8 + 0x18]
	0x01CDE6D4 CBZ W10, 0x1CDE764
	0x01CDE6D8 LDR X10, [X9 + 0x58]
	0x01CDE6DC CBZ X10, 0x1CDE760
	0x01CDE6E0 LDR W11, [X10 + 0x18]
	0x01CDE6E4 CBZ W11, 0x1CDE764
	0x01CDE6E8 LDR X9, [X9 + 0x60]
	0x01CDE6EC CBZ X9, 0x1CDE760
	0x01CDE6F0 LDR W11, [X9 + 0x18]
	0x01CDE6F4 CBZ W11, 0x1CDE764
	0x01CDE6F8 LDR X11, [X19]
	0x01CDE6FC LDR V0, [X8 + 0x20]
	0x01CDE700 LDR V1, [X10 + 0x20]
	0x01CDE704 LDR V2, [X9 + 0x20]
	0x01CDE708 LDR X8, [X11 + 0x2A8]
	0x01CDE70C LDR X2, [X11 + 0x2B0]
	0x01CDE710 MOV X0, X19
	0x01CDE714 MOV W1, W31
	0x01CDE718 BLR X8
	0x01CDE71C LDR X8, [X19 + 0xB8]
	0x01CDE720 CBZ X8, 0x1CDE760
	0x01CDE724 LDR X20, [X8 + 0xA0]
	0x01CDE728 MOV X0, X19
	0x01CDE72C MOV X1, X31
	0x01CDE730 BL 0x3A9B084
	0x01CDE734 CBZ X0, 0x1CDE760
	0x01CDE738 MOV X1, X31
	0x01CDE73C BL 0x3AA7658
	0x01CDE740 MOV X0, X20
	0x01CDE744 LDP X20, X19, [X31 + 0x20]
	0x01CDE748 LDR X30, [X31 + 0x18]
	0x01CDE74C LDP D9, D8, [X31 + 0x8]
	0x01CDE750 FMOV S3, 1
	0x01CDE754 MOV X1, X31
	0x01CDE758 LDR V10, [X31], #0x30
	0x01CDE75C B 0x1CC181C
	0x01CDE760 BL 0x1B6EA1C
	0x01CDE764 BL 0x1B6EA24
	0x01CDE768 SUB X31, X31, 0x60
	0x01CDE76C STR D14, [X31 + 0x10]
	0x01CDE770 STP D13, D12, [X31 + 0x18]
	0x01CDE774 STP D11, D10, [X31 + 0x28]
	0x01CDE778 STP D9, D8, [X31 + 0x38]
	0x01CDE77C STR X30, [X31 + 0x48]
	0x01CDE780 STP X20, X19, [X31 + 0x50]
	0x01CDE784 ADRP X20, 0x2545000
	0x01CDE788 LDRB W8, [X20 + 0x62C]
	0x01CDE78C MOV X19, X0
	0x01CDE790 TBNZ X8, 0x0, 0x1CDE7A8
	0x01CDE794 ADRP X0, 0x226F000
	0x01CDE798 LDR X0, [X0 + 0x478]
	0x01CDE79C BL 0x1B6E7F0
	0x01CDE7A0 MOVZ W8, 0x1
	0x01CDE7A4 STRB W8, [X20 + 0x62C]
	0x01CDE7A8 MOV X0, X19
	0x01CDE7AC MOV X1, X31
	0x01CDE7B0 STR X31, [X31 + 0x8]
	0x01CDE7B4 BL 0x1CE6A44
	0x01CDE7B8 LDR X0, [X19 + 0xD0]
	0x01CDE7BC CBZ X0, 0x1CDE934
	0x01CDE7C0 MOV X1, X31
	0x01CDE7C4 BL 0x3AA7658
	0x01CDE7C8 LDR X8, [X19 + 0xB8]
	0x01CDE7CC CBZ X8, 0x1CDE934
	0x01CDE7D0 LDR V3, [X8 + 0x4C]
	0x01CDE7D4 ADRP X20, 0x226F000
	0x01CDE7D8 LDR X20, [X20 + 0x478]
	0x01CDE7DC ADD X1, X31, 0x8
	0x01CDE7E0 MOV X0, X19
	0x01CDE7E4 MOV X2, X31
	0x01CDE7E8 BL 0x1CE8C04
	0x01CDE7EC TBZ X0, 0x0, 0x1CDE7F8
	0x01CDE7F0 MOV X0, X19
	0x01CDE7F4 BL 0x1CDE938
	0x01CDE7F8 LDR X0, [X20]
	0x01CDE7FC LDR X20, [X19 + 0x140]
	0x01CDE800 LDR W8, [X0 + 0xE0]
	0x01CDE804 CBNZ W8, 0x1CDE80C
	0x01CDE808 BL 0x1B6E8F8
	0x01CDE80C MOV X0, X20
	0x01CDE810 MOV X1, X31
	0x01CDE814 MOV X2, X31
	0x01CDE818 BL 0x3AA0AF0
	0x01CDE81C TBZ X0, 0x0, 0x1CDE8E4
	0x01CDE820 LDR X0, [X19 + 0xD0]
	0x01CDE824 CBZ X0, 0x1CDE934
	0x01CDE828 MOV X1, X31
	0x01CDE82C BL 0x3AA7658
	0x01CDE830 MOV X0, X19
	0x01CDE834 MOV X1, X31
	0x01CDE838 MOV V8.16B, V0.16B
	0x01CDE83C MOV V9.16B, V1.16B
	0x01CDE840 MOV V10.16B, V2.16B
	0x01CDE844 BL 0x1CE4BFC
	0x01CDE848 MOV X0, X19
	0x01CDE84C MOV X1, X31
	0x01CDE850 MOV V11.16B, V0.16B
	0x01CDE854 MOV V12.16B, V1.16B
	0x01CDE858 MOV V13.16B, V2.16B
	0x01CDE85C BL 0x1CE46CC
	0x01CDE860 MOV X0, X19
	0x01CDE864 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+64], D14
	003 Move [X31+80], D13
	004 Move [X31+88], D12
	005 Move [X31+96], D11
	006 Move [X31+104], D10
	007 Move [X31+112], D9
	008 Move [X31+120], D8
	009 Move [X31+128], X29
	010 Move [X31+136], X30
	011 Move [X31+144], X28
	012 Move [X31+152], X27
	013 Move [X31+160], X26
	014 Move [X31+168], X25
	015 Move [X31+176], X24
	016 Move [X31+184], X23
	017 Move [X31+192], X22
	018 Move [X31+200], X21
	019 Move [X31+208], X20
	020 Move [X31+216], X19
	021 Move X21, 0x2546000
	022 Move W8, [X21+1573]
	023 Move X19, X1
	024 Move X20, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {46}
	029 Move X0, 0x2272000
	030 Move X0, [X0+3496]
	031 Call 0x1B6F7F0
	032 Move X0, 0x2272000
	033 Move X0, [X0+3504]
	034 Call 0x1B6F7F0
	035 Move X0, 0x2272000
	036 Move X0, [X0+3512]
	037 Call 0x1B6F7F0
	038 Move X0, 0x2272000
	039 Move X0, [X0+3520]
	040 Call 0x1B6F7F0
	041 Move X0, 0x2270000
	042 Move X0, [X0+1144]
	043 Call 0x1B6F7F0
	044 Move W8, 1
	045 Move [X21+1573], W8
	046 Move W1, 5
	047 Move X0, X20
	048 Move [X31+32], X31
	049 Move [X31+40], X31
	050 Move [X31+48], X31
	051 Call ArmstrongController.set_phase, X0, X1
	052 Move X9, [X20+184]
	053 Move [X20+380], W31
	054 Compare X9, 0
	055 JumpIfEqual {347}
	056 Move X8, [X9+56]
	057 Compare X8, 0
	058 JumpIfEqual {347}
	059 Move W10, [X8+24]
	060 Compare W10, 0
	061 JumpIfEqual {348}
	062 Move X10, [X9+88]
	063 Compare X10, 0
	064 JumpIfEqual {347}
	065 Move W11, [X10+24]
	066 Compare W11, 0
	067 JumpIfEqual {348}
	068 Move X9, [X9+96]
	069 Compare X9, 0
	070 JumpIfEqual {347}
	071 Move W11, [X9+24]
	072 Compare W11, 0
	073 JumpIfEqual {348}
	074 Move X11, [X20]
	075 Move V0, [X8+32]
	076 Move V1, [X10+32]
	077 Move V2, [X9+32]
	078 Move X8, [X11+680]
	079 Move X2, [X11+688]
	080 Move W1, 1
	081 Move X0, X20
	082 NotImplemented "Instruction BLR not yet implemented."
	083 Compare X19, 0
	084 JumpIfEqual {347}
	085 Move X0, X19
	086 Move X1, X31
	087 Call Component.get_transform, X0
	088 Compare X0, 0
	089 JumpIfEqual {347}
	090 Move X1, X31
	091 Call Transform.get_position, X0
	092 Move X0, X31
	093 Call Extensions.Flatten, X0
	094 Move X0, X20
	095 Move X1, X31
	096 Move V8, V0
	097 Move V9, V1
	098 Move V10, V2
	099 Call Component.get_transform, X0
	100 Compare X0, 0
	101 JumpIfEqual {347}
	102 Move X1, X31
	103 Call Transform.get_position, X0
	104 Move X0, X31
	105 Call Extensions.Flatten, X0
	106 Move X24, 0x2546000
	107 Move W8, [X24+1089]
	108 Move V11, V0
	109 Move V12, V1
	110 Move V13, V2
	111 Compare W8, 0
	112 JumpIfNotEqual {118}
	113 Move X0, 0x2270000
	114 Move X0, [X0+1160]
	115 Call 0x1B6F7F0
	116 Move W8, 1
	117 Move [X24+1089], W8
	118 Move X21, 0x2270000
	119 Move X21, [X21+1160]
	120 Subtract S8, S8, S11
	121 Subtract S9, S9, S12
	122 Subtract S10, S10, S13
	123 Move X0, [X21]
	124 Move W8, [X0+224]
	125 Compare W8, 0
	126 JumpIfNotEqual {128}
	127 Call 0x1B6F8F8
	128 Move X8, -19087360
	129 Multiply S0, S8, S8
	130 Multiply S1, S9, S9
	131 Move V14, [X8+2916]
	132 Move X22, 0x2270000
	133 Multiply S2, S10, S10
	134 Add S0, S0, S1
	135 Move X22, [X22+1152]
	136 Add S0, S2, S0
	137 NotImplemented "Instruction FSQRT not yet implemented."
	138 NotImplemented "Instruction FCMP not yet implemented."
	139 Move X26, 0x2546000
	140 NotImplemented "Instruction FDIV not yet implemented."
	141 NotImplemented "Instruction FDIV not yet implemented."
	142 NotImplemented "Instruction FDIV not yet implemented."
	143 Move W8, [X26+1087]
	144 Compare W8, 0
	145 JumpIfNotEqual {151}
	146 Move X0, 0x2270000
	147 Move X0, [X0+1152]
	148 Call 0x1B6F7F0
	149 Move W8, 1
	150 Move [X26+1087], W8
	151 Move X8, [X22]
	152 Move X8, [X8+184]
	153 Move S8, [X8]
	154 Move S9, [X8+4]
	155 Move V10, [X8+8]
	156 Move X0, X20
	157 Move X1, X31
	158 Call Component.get_transform, X0
	159 Move X25, 0x2546000
	160 Move W8, [X25+1090]
	161 Move X23, X0
	162 Compare W8, 0
	163 JumpIfNotEqual {169}
	164 Move X0, 0x2270000
	165 Move X0, [X0+1152]
	166 Call 0x1B6F7F0
	167 Move W8, 1
	168 Move [X25+1090], W8
	169 Move X8, [X22]
	170 Move V0, V8
	171 Move V1, V9
	172 Move V2, V10
	173 Move X8, [X8+184]
	174 Move X0, X31
	175 Move S3, [X8+24]
	176 Move S4, [X8+28]
	177 Move V5, [X8+32]
	178 Call Quaternion.LookRotation, X0, X1
	179 Compare X23, 0
	180 JumpIfEqual {347}
	181 Move X0, X23
	182 Move X1, X31
	183 Call Transform.set_rotation, X0, X1
	184 Move X8, [X20+184]
	185 Compare X8, 0
	186 JumpIfEqual {347}
	187 Move X23, [X8+176]
	188 Move X0, X20
	189 Move X1, X31
	190 Call Component.get_transform, X0
	191 Compare X0, 0
	192 JumpIfEqual {347}
	193 Move X1, X31
	194 Call Transform.get_position, X0
	195 Move S3, 1
	196 Move X0, X23
	197 Move X1, X31
	198 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	199 Move X0, X20
	200 Call ArmstrongController.get__attackSphereCenter, X0
	201 Move X8, [X20+184]
	202 Compare X8, 0
	203 JumpIfEqual {347}
	204 Move V3, [X8+76]
	205 Move S4, 0.5
	206 Move X0, X20
	207 Move X1, X31
	208 Multiply S3, S3, S4
	209 Call MobDetectionUtil.GetPlayersInRange, X0, X1, V0
	210 Compare X0, 0
	211 JumpIfEqual {347}
	212 Move X8, 0x2272000
	213 Move X8, [X8+3520]
	214 Move X27, 0x2272000
	215 Move X28, 0x2270000
	216 Move X25, 0x2272000
	217 Move X1, [X8]
	218 Move X27, [X27+3504]
	219 Move X28, [X28+1144]
	220 Move X25, [X25+3496]
	221 Add X8, X31, 8
	222 Call List`1<Object>.GetEnumerator, X0
	223 NotImplemented "Instruction LDUR not yet implemented."
	224 Move X8, [X31+24]
	225 Move W29, 1
	226 Move [X31+2], V0
	227 Move [X31+48], X8
	228 Move X1, [X27]
	229 Add X0, X31, 32
	230 Call Enumerator<Object>.MoveNext, X0
	231 Move TEMP, X0
	232 And TEMP, TEMP, 1
	233 Compare TEMP, 1
	234 JumpIfNotEqual {319}
	235 Move X0, [X28]
	236 Move X23, [X31+48]
	237 Move W8, [X0+224]
	238 Compare W8, 0
	239 JumpIfNotEqual {241}
	240 Call 0x1B6F8F8
	241 Move X0, X19
	242 Move X1, X23
	243 Move X2, X31
	244 Call Object.op_Equality, X0, X1
	245 Move TEMP, X0
	246 And TEMP, TEMP, 1
	247 Compare TEMP, 1
	248 JumpIfNotEqual {228}
	249 Compare X23, 0
	250 JumpIfEqual {345}
	251 Move X0, [X23+136]
	252 Compare X0, 0
	253 JumpIfEqual {346}
	254 Move X1, X31
	255 Call Transform.get_position, X0
	256 Move V8, V0
	257 Move V9, V1
	258 Move V10, V2
	259 Move X0, X20
	260 Move X1, X31
	261 Call Component.get_transform, X0
	262 Compare X0, 0
	263 JumpIfEqual {343}
	264 Move X1, X31
	265 Call Transform.get_position, X0
	266 Move W8, [X24+1089]
	267 Move V11, V0
	268 Move V12, V1
	269 Move V13, V2
	270 Compare W8, 0
	271 JumpIfNotEqual {275}
	272 Move X0, X21
	273 Call 0x1B6F7F0
	274 Move [X24+1089], W29
	275 Move X0, [X21]
	276 Move W8, [X0+224]
	277 Compare W8, 0
	278 JumpIfNotEqual {280}
	279 Call 0x1B6F8F8
	280 Subtract S0, S8, S11
	281 Subtract S1, S9, S12
	282 Subtract S2, S10, S13
	283 Multiply S3, S0, S0
	284 Multiply S4, S1, S1
	285 Add S3, S3, S4
	286 Multiply S4, S2, S2
	287 Add S3, S4, S3
	288 NotImplemented "Instruction FSQRT not yet implemented."
	289 NotImplemented "Instruction FCMP not yet implemented."
	290 NotImplemented "Instruction FDIV not yet implemented."
	291 NotImplemented "Instruction FDIV not yet implemented."
	292 NotImplemented "Instruction FDIV not yet implemented."
	293 Move W8, [X26+1087]
	294 Compare W8, 0
	295 JumpIfNotEqual {299}
	296 Move X0, X22
	297 Call 0x1B6F7F0
	298 Move [X26+1087], W29
	299 Move X8, [X22]
	300 Move X8, [X8+184]
	301 Move S0, [X8]
	302 Move S1, [X8+4]
	303 Move V2, [X8+8]
	304 Move X8, [X20+184]
	305 Compare X8, 0
	306 JumpIfEqual {344}
	307 Move V3, [X8+80]
	308 Move W1, [X8+36]
	309 Move X2, [X20+208]
	310 Move X3, [X8+184]
	311 Move X5, [X8+24]
	312 Multiply S0, S0, S3
	313 Multiply S1, S1, S3
	314 Multiply S2, S2, S3
	315 Move X0, X23
	316 Move X4, X3
	317 Move X6, X31
	318 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5, X6
	319 Move X1, [X25]
	320 Add X0, X31, 32
	321 Call Enumerator<Object>.Dispose, X0
	322 Move X20, [X31+208]
	323 Move X19, [X31+216]
	324 Move X22, [X31+192]
	325 Move X21, [X31+200]
	326 Move X24, [X31+176]
	327 Move X23, [X31+184]
	328 Move X26, [X31+160]
	329 Move X25, [X31+168]
	330 Move X28, [X31+144]
	331 Move X27, [X31+152]
	332 Move X29, [X31+128]
	333 Move X30, [X31+136]
	334 Move D9, [X31+112]
	335 Move D8, [X31+120]
	336 Move D11, [X31+96]
	337 Move D10, [X31+104]
	338 Move D13, [X31+80]
	339 Move D12, [X31+88]
	340 Move V14, [X31+64]
	341 Add X31, X31, 224
	342 Return 
	343 Call 0x1B6FA1C
	344 Call 0x1B6FA1C
	345 Call 0x1B6FA1C
	346 Call 0x1B6FA1C
	347 Call 0x1B6FA1C
	348 Call 0x1B6FA24
	349 Move X19, X0
	350 NotImplemented "Instruction CMP not yet implemented."
	351 Move X0, X19
	352 Call 0x3D1A840
	353 Move X20, [X0]
	354 Call 0x3D1A850
	355 Move X1, [X25]
	356 Add X0, X31, 32
	357 Call Enumerator<Object>.Dispose, X0
	358 Compare X20, 0
	359 JumpIfEqual {322}
	360 Move X0, X20
	361 Call 0x1B6FA14
	362 Move X20, X31
	363 Move X19, X0
	364 Move X1, [X25]
	365 Add X0, X31, 32
	366 Call Enumerator<Object>.Dispose, X0
	367 Compare X20, 0
	368 JumpIfNotEqual {371}
	369 Move X0, X19
	370 Call 0x1C8518C
	371 Move X0, X20
	372 Call 0x1B6FA14
	373 Call 0x18F56A8

Method: System.Void UpdatePunchAndHold()

Disassembly:
	0x01CDDC74 FCMP S0, S1
	0x01CDDC78 B.LE 0x1CDDC8C
	0x01CDDC7C FDIV S8, S11, S0
	0x01CDDC80 FDIV S9, S9, S0
	0x01CDDC84 FDIV S10, S10, S0
	0x01CDDC88 B 0x1CDDCC4
	0x01CDDC8C ADRP X20, 0x2546000
	0x01CDDC90 LDRB W8, [X20 + 0x43F]
	0x01CDDC94 CBNZ W8, 0x1CDDCAC
	0x01CDDC98 ADRP X0, 0x2270000
	0x01CDDC9C LDR X0, [X0 + 0x480]
	0x01CDDCA0 BL 0x1B6E7F0
	0x01CDDCA4 MOVZ W8, 0x1
	0x01CDDCA8 STRB W8, [X20 + 0x43F]
	0x01CDDCAC ADRP X8, 0x2270000
	0x01CDDCB0 LDR X8, [X8 + 0x480]
	0x01CDDCB4 LDR X8, [X8]
	0x01CDDCB8 LDR X8, [X8 + 0xB8]
	0x01CDDCBC LDP S8, S9, [X8]
	0x01CDDCC0 LDR V10, [X8 + 0x8]
	0x01CDDCC4 LDR X0, [X19 + 0x30]
	0x01CDDCC8 CBZ X0, 0x1CDDD08
	0x01CDDCCC LDR X19, [X19 + 0x38]
	0x01CDDCD0 MOV X1, X31
	0x01CDDCD4 BL 0x3AA7658
	0x01CDDCD8 CBZ X19, 0x1CDDD08
	0x01CDDCDC FADD S2, S10, S2
	0x01CDDCE0 FADD S1, S9, S1
	0x01CDDCE4 FADD S0, S8, S0
	0x01CDDCE8 MOV X0, X19
	0x01CDDCEC LDP X20, X19, [X31 + 0x40]
	0x01CDDCF0 LDR X30, [X31 + 0x30]
	0x01CDDCF4 LDP D9, D8, [X31 + 0x20]
	0x01CDDCF8 LDP D11, D10, [X31 + 0x10]
	0x01CDDCFC MOV X1, X31
	0x01CDDD00 LDP D13, D12, [X31], #0x50
	0x01CDDD04 B 0x3AA76F8
	0x01CDDD08 BL 0x1B6EA1C
	0x01CDDD0C STP X30, X21, [X31 - 0x20]!
	0x01CDDD10 STP X20, X19, [X31 + 0x10]
	0x01CDDD14 ADRP X21, 0x2546000
	0x01CDDD18 ADRP X20, 0x2272000
	0x01CDDD1C LDRB W8, [X21 + 0x629]
	0x01CDDD20 LDR X20, [X20 + 0xE08]
	0x01CDDD24 MOV X19, X0
	0x01CDDD28 TBNZ X8, 0x0, 0x1CDDD40
	0x01CDDD2C ADRP X0, 0x2272000
	0x01CDDD30 LDR X0, [X0 + 0xE08]
	0x01CDDD34 BL 0x1B6E7F0
	0x01CDDD38 MOVZ W8, 0x1
	0x01CDDD3C STRB W8, [X21 + 0x629]
	0x01CDDD40 MOVZ W9, 0xCCCD
	0x01CDDD44 MOVZ W8, 0x1
	0x01CDDD48 MOVK W9, 0x3E4C0000
	0x01CDDD4C STRB W8, [X19 + 0x85]
	0x01CDDD50 STR W9, [X19 + 0x88]
	0x01CDDD54 LDR X0, [X20]
	0x01CDDD58 LDR W8, [X0 + 0xE0]
	0x01CDDD5C CBNZ W8, 0x1CDDD64
	0x01CDDD60 BL 0x1B6E8F8
	0x01CDDD64 MOV X0, X19
	0x01CDDD68 LDP X20, X19, [X31 + 0x10]
	0x01CDDD6C MOV X1, X31
	0x01CDDD70 LDP X30, X21, [X31], #0x20
	0x01CDDD74 B 0x1CEA7F8
	0x01CDDD78 STP X30, X19, [X31 - 0x10]!
	0x01CDDD7C LDR X8, [X0 + 0x50]
	0x01CDDD80 CBZ X8, 0x1CDDD90
	0x01CDDD84 LDR W0, [X8 + 0x3C]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], D8
	003 Move [X31+24], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2547000
	007 Move W8, [X20+1574]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x2273000
	014 Move X0, [X0+3632]
	015 Call 0x1B6F7F0
	016 Move X0, 0x2273000
	017 Move X0, [X0+3568]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X20+1574], W8
	021 Move [X31+8], X31
	022 Move V8, [X19+380]
	023 Move X0, X19
	024 Move X1, X31
	025 Call MobController.get_deltaTime, X0
	026 Move X8, [X19+184]
	027 Add S0, S8, S0
	028 Move [X19+380], S0
	029 Compare X8, 0
	030 JumpIfEqual {79}
	031 Move V1, [X8+40]
	032 NotImplemented "Instruction FCMP not yet implemented."
	033 Add X1, X31, 8
	034 Move X0, X19
	035 Move X2, X31
	036 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {71}
	041 Move X20, [X31+8]
	042 Compare X20, 0
	043 JumpIfEqual {79}
	044 Move W1, [X20+24]
	045 Move W0, W31
	046 Move X2, X31
	047 Call Random.Range, X0, X1
	048 Move X8, 0x2273000
	049 Move X8, [X8+3568]
	050 Move W1, W0
	051 Move X0, X20
	052 Move X2, [X8]
	053 Call List`1<Object>.get_Item, X0, X1
	054 Move X8, [X19]
	055 Move X1, X0
	056 Move X0, X19
	057 Move X9, [X8+824]
	058 Move X2, [X8+832]
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X0, [X19+320]
	061 Compare X0, 0
	062 JumpIfEqual {79}
	063 Move X1, X31
	064 Call Component.get_transform, X0
	065 Compare X0, 0
	066 JumpIfEqual {79}
	067 Move X1, X31
	068 Call Transform.get_position, X0
	069 Move X0, X19
	070 Call ArmstrongController.SetChasing, X0, X1
	071 Move X0, X19
	072 Call ArmstrongController.SetRoaming, X0
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X30, [X31+24]
	076 Move V8, [X31+16]
	077 Add X31, X31, 48
	078 Return 
	079 Call 0x1B6FA1C

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01CDE918 LDR X30, [X31 + 0x48]
	0x01CDE91C LDP D9, D8, [X31 + 0x38]
	0x01CDE920 LDP D11, D10, [X31 + 0x28]
	0x01CDE924 LDP D13, D12, [X31 + 0x18]
	0x01CDE928 LDR V14, [X31 + 0x10]
	0x01CDE92C ADD X31, X31, 0x60
	0x01CDE930 RET
	0x01CDE934 BL 0x1B6EA1C
	0x01CDE938 STP X30, X19, [X31 - 0x10]!
	0x01CDE93C MOVZ W1, 0x3
	0x01CDE940 MOV X19, X0
	0x01CDE944 BL 0x1CDDDD8
	0x01CDE948 FMOV S0, W31
	0x01CDE94C MOV X0, X19
	0x01CDE950 BL 0x1CDDEB4
	0x01CDE954 LDR X9, [X19 + 0xB8]
	0x01CDE958 CBZ X9, 0x1CDE9B4
	0x01CDE95C LDR X8, [X9 + 0x38]
	0x01CDE960 CBZ X8, 0x1CDE9B4
	0x01CDE964 LDR W10, [X8 + 0x18]
	0x01CDE968 CBZ W10, 0x1CDE9B8
	0x01CDE96C LDR X10, [X9 + 0x58]
	0x01CDE970 CBZ X10, 0x1CDE9B4
	0x01CDE974 LDR W11, [X10 + 0x18]
	0x01CDE978 CBZ W11, 0x1CDE9B8
	0x01CDE97C LDR X9, [X9 + 0x60]
	0x01CDE980 CBZ X9, 0x1CDE9B4
	0x01CDE984 LDR W11, [X9 + 0x18]
	0x01CDE988 CBZ W11, 0x1CDE9B8
	0x01CDE98C LDR X11, [X19]
	0x01CDE990 LDR V0, [X8 + 0x20]
	0x01CDE994 LDR V1, [X10 + 0x20]
	0x01CDE998 LDR V2, [X9 + 0x20]
	0x01CDE99C LDR X3, [X11 + 0x2A8]
	0x01CDE9A0 LDR X2, [X11 + 0x2B0]
	0x01CDE9A4 MOVZ W1, 0x1
	0x01CDE9A8 MOV X0, X19
	0x01CDE9AC LDP X30, X19, [X31], #0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2546000
	006 Move X20, 0x2272000
	007 Move W8, [X21+1575]
	008 Move X20, [X20+3400]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2272000
	015 Move X0, [X0+3400]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1575], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call MobController.OnDrawGizmos, X0
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1B6F8F8
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move X0, X31
	030 Move S0, [X8+176]
	031 Move S1, [X8+180]
	032 Move S2, [X8+184]
	033 Move S3, [X8+188]
	034 Call Gizmos.set_color, X0
	035 Move X0, X19
	036 Call ArmstrongController.get__attackSphereCenter, X0
	037 Move X8, [X19+184]
	038 Compare X8, 0
	039 JumpIfEqual {50}
	040 Move V3, [X8+76]
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move S4, 0.5
	044 Move X0, X31
	045 Multiply S3, S3, S4
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Call Gizmos.DrawWireSphere, X0, V0
	049 Return 
	050 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CDE9B0 BR X3
	0x01CDE9B4 BL 0x1B6EA1C
	0x01CDE9B8 BL 0x1B6EA24
	0x01CDE9BC STP X30, X19, [X31 - 0x10]!
	0x01CDE9C0 MOVZ W1, 0x4
	0x01CDE9C4 MOV X19, X0
	0x01CDE9C8 BL 0x1CDDDD8
	0x01CDE9CC FMOV S0, W31
	0x01CDE9D0 MOV X0, X19
	0x01CDE9D4 MOV X1, X31
	0x01CDE9D8 BL 0x1CE47EC
	0x01CDE9DC LDR X9, [X19 + 0xB8]
	0x01CDE9E0 CBZ X9, 0x1CDEA64
	0x01CDE9E4 LDR X8, [X9 + 0x38]
	0x01CDE9E8 CBZ X8, 0x1CDEA64
	0x01CDE9EC LDR W10, [X8 + 0x18]
	0x01CDE9F0 CBZ W10, 0x1CDEA68
	0x01CDE9F4 LDR X10, [X9 + 0x58]
	0x01CDE9F8 CBZ X10, 0x1CDEA64
	0x01CDE9FC LDR W11, [X10 + 0x18]
	0x01CDEA00 CMP W11, 0x1
	0x01CDEA04 B.LS 0x1CDEA68

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2546000
	006 Move X21, 0x2271000
	007 Move W8, [X20+1576]
	008 Move X21, [X21+3448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2271000
	015 Move X0, [X0+3448]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1576], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1B6F8F8
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call MobController..ctor, X0
	031 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01CDEA08 LDR X9, [X9 + 0x60]
	0x01CDEA0C CBZ X9, 0x1CDEA64
	0x01CDEA10 LDR W11, [X9 + 0x18]
	0x01CDEA14 CMP W11, 0x1
	0x01CDEA18 B.LS 0x1CDEA68
	0x01CDEA1C LDR X11, [X19]
	0x01CDEA20 LDR V0, [X8 + 0x20]
	0x01CDEA24 LDR V1, [X10 + 0x24]
	0x01CDEA28 LDR V2, [X9 + 0x24]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 And W1, W1, 1
	004 Move X2, X31
	005 Move X19, X0
	006 Call MobController.CopyBackingFieldsToState, X0, X1
	007 Move W1, [X19+372]
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call ArmstrongController.set_phase, X0, X1
	012 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01CDEA2C LDR X8, [X11 + 0x2A8]
	0x01CDEA30 LDR X2, [X11 + 0x2B0]
	0x01CDEA34 MOV X0, X19
	0x01CDEA38 MOV W1, W31
	0x01CDEA3C BLR X8
	0x01CDEA40 MOV X0, X19
	0x01CDEA44 MOV X1, X31
	0x01CDEA48 BL 0x1CE4BFC
	0x01CDEA4C LDR X8, [X19]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.CopyStateToBackingFields, X0
	006 Move X0, X19
	007 Call ArmstrongController.get_phase, X0
	008 Move [X19+372], W0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

