Type: AnimalCompany.PurchaseTagController

Method: System.Void Awake()

Disassembly:
	0x01D7B874 FSUB S1, S1, S2
	0x01D7B878 FNEG S2, S0
	0x01D7B87C FCMP S1, 0x0
	0x01D7B880 FCSEL S8, S0, S2, GE
	0x01D7B884 CBNZ W8, 0x1D7B89C
	0x01D7B888 ADRP X0, 0x2378000
	0x01D7B88C LDR X0, [X0 + 0x5A0]
	0x01D7B890 BL 0x1C16CF4
	0x01D7B894 MOVZ W8, 0x1
	0x01D7B898 STRB W8, [X21 + 0xA1F]
	0x01D7B89C CBZ X20, 0x1D7BB80
	0x01D7B8A0 ADRP X8, 0x2378000
	0x01D7B8A4 LDR X8, [X8 + 0x5A0]
	0x01D7B8A8 MOVZ W1, 0x1
	0x01D7B8AC MOV X0, X20
	0x01D7B8B0 MOV V3.16B, V8.16B
	0x01D7B8B4 LDR X8, [X8]
	0x01D7B8B8 MOV X2, X31
	0x01D7B8BC LDR X8, [X8 + 0xB8]
	0x01D7B8C0 LDP S1, S2, [X8 + 0x4C]
	0x01D7B8C4 LDR V0, [X8 + 0x48]
	0x01D7B8C8 BL 0x3C40560
	0x01D7B8CC LDR V0, [X19 + 0x78]
	0x01D7B8D0 LDR X8, [X19 + 0x20]
	0x01D7B8D4 FADD S0, S8, S0
	0x01D7B8D8 STR S0, [X19 + 0x78]
	0x01D7B8DC CBZ X8, 0x1D7BA1C
	0x01D7B8E0 LDR X9, [X8 + 0x18]
	0x01D7B8E4 LDR X0, [X8 + 0x40]
	0x01D7B8E8 LDR X1, [X8 + 0x28]
	0x01D7B8EC MOV V0.16B, V8.16B
	0x01D7B8F0 BLR X9
	0x01D7B8F4 MOV W20, W0
	0x01D7B8F8 B 0x1D7BA20
	0x01D7B8FC LDR V8, [X19 + 0x54]
	0x01D7B900 MOV X0, X31
	0x01D7B904 BL 0x3C3C7DC
	0x01D7B908 LDR V1, [X19 + 0x58]
	0x01D7B90C ADRP X8, 0xFFFFFFFFFED6F000
	0x01D7B910 LDR V2, [X8 + 0x330]
	0x01D7B914 FMUL S0, S0, S1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x265E000
	006 Move W8, [X20+2367]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x237C000
	013 Move X0, [X0+1024]
	014 Call 0x1C17CF4
	015 Move X0, 0x237C000
	016 Move X0, [X0+1032]
	017 Call 0x1C17CF4
	018 Move X0, 0x237C000
	019 Move X0, [X0+1040]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2367], W8
	023 Move X8, [X19+40]
	024 Compare X8, 0
	025 JumpIfEqual {51}
	026 Move X9, 0x237C000
	027 Move X9, [X9+1032]
	028 Move X21, 0x237C000
	029 Move X20, [X8+184]
	030 Move X0, [X9]
	031 Move X21, [X21+1024]
	032 Call 0x1C17F10
	033 Move X2, [X21]
	034 Move X1, X19
	035 Move X3, X31
	036 Move X21, X0
	037 Call UnityAction`1<Object>..ctor, X0, X1, X2
	038 Compare X20, 0
	039 JumpIfEqual {51}
	040 Move X8, 0x237C000
	041 Move X8, [X8+1040]
	042 Move X0, X20
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X1, X21
	046 Move X2, [X8]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call UnityEvent`1<Object>.AddListener, X0, X1
	050 Return 
	051 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x01D7B918 FMOV S1, 1
	0x01D7B91C FSUB S0, S1, S0
	0x01D7B920 FMUL S11, S8, S0

ISIL:
	001 Move X0, [X0+32]
	002 Move X1, X31
	003 Call String.IsNullOrEmpty, X0
	004 Return 

Method: System.Void SetupForID(System.String itemID)

Disassembly:
	0x01D7B924 FCMP S11, S2

ISIL:
	001 Return 

Method: System.Void Release(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)

Disassembly:
	0x01D7B928 STR S11, [X19 + 0x54]
	0x01D7B92C B.HI 0x1D7B948
	0x01D7B930 ADRP X8, 0xFFFFFFFFFED6F000
	0x01D7B934 LDR V0, [X8 + 0x134]
	0x01D7B938 FCMP S11, S0
	0x01D7B93C B.LT 0x1D7B948
	0x01D7B940 STR W31, [X19 + 0x54]
	0x01D7B944 B 0x1D7BAF4
	0x01D7B948 ADRP X21, 0x265D000
	0x01D7B94C LDRB W8, [X21 + 0xA1F]
	0x01D7B950 LDR X20, [X19 + 0x38]
	0x01D7B954 CBNZ W8, 0x1D7B970
	0x01D7B958 ADRP X0, 0x2378000
	0x01D7B95C LDR X0, [X0 + 0x5A0]
	0x01D7B960 BL 0x1C16CF4
	0x01D7B964 MOVZ W8, 0x1
	0x01D7B968 STRB W8, [X21 + 0xA1F]
	0x01D7B96C LDR V11, [X19 + 0x54]
	0x01D7B970 ADRP X8, 0x2378000
	0x01D7B974 LDR X8, [X8 + 0x5A0]
	0x01D7B978 MOV X0, X31
	0x01D7B97C LDR X8, [X8]
	0x01D7B980 LDR X8, [X8 + 0xB8]
	0x01D7B984 LDP S8, S9, [X8 + 0x48]
	0x01D7B988 LDR V10, [X8 + 0x50]
	0x01D7B98C BL 0x3C3C7DC
	0x01D7B990 CBZ X20, 0x1D7BB80
	0x01D7B994 FMUL S3, S11, S0
	0x01D7B998 MOVZ W1, 0x1
	0x01D7B99C MOV X0, X20
	0x01D7B9A0 MOV V0.16B, V8.16B
	0x01D7B9A4 MOV V1.16B, V9.16B
	0x01D7B9A8 MOV V2.16B, V10.16B
	0x01D7B9AC MOV X2, X31
	0x01D7B9B0 BL 0x3C40560
	0x01D7B9B4 LDR X20, [X19 + 0x20]
	0x01D7B9B8 CBZ X20, 0x1D7B9E0
	0x01D7B9BC LDR V8, [X19 + 0x54]
	0x01D7B9C0 MOV X0, X31
	0x01D7B9C4 BL 0x3C3C7DC
	0x01D7B9C8 LDR X8, [X20 + 0x18]
	0x01D7B9CC LDR X0, [X20 + 0x40]
	0x01D7B9D0 LDR X1, [X20 + 0x28]
	0x01D7B9D4 FMUL S0, S8, S0
	0x01D7B9D8 BLR X8
	0x01D7B9DC MOV W20, W0
	0x01D7B9E0 LDR V8, [X19 + 0x78]
	0x01D7B9E4 LDR V9, [X19 + 0x54]
	0x01D7B9E8 MOV X0, X31
	0x01D7B9EC BL 0x3C3C7DC
	0x01D7B9F0 LDR V1, [X19 + 0x60]
	0x01D7B9F4 FMUL S0, S9, S0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, [X0+40]
	007 Compare X0, 0
	008 JumpIfEqual {66}
	009 Move X1, X31
	010 Call Component.get_transform, X0
	011 Move X21, 0x265E000
	012 Move W8, [X21+1923]
	013 Move X20, X0
	014 Compare W8, 0
	015 JumpIfNotEqual {21}
	016 Move X0, 0x2379000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1923], W8
	021 Compare X20, 0
	022 JumpIfEqual {66}
	023 Move X8, 0x2379000
	024 Move X8, [X8+1440]
	025 Move X0, X20
	026 Move X1, X31
	027 Move X8, [X8]
	028 Move X8, [X8+184]
	029 Move S1, [X8+4]
	030 Move S2, [X8+8]
	031 Move V0, [X8]
	032 Call Transform.set_localPosition, X0, X1
	033 Move X0, [X19+40]
	034 Compare X0, 0
	035 JumpIfEqual {66}
	036 Move X1, X31
	037 Call Component.get_transform, X0
	038 Move X20, 0x265E000
	039 Move W8, [X20+1939]
	040 Move X19, X0
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x237A000
	044 Move X0, [X0+1448]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X20+1939], W8
	048 Compare X19, 0
	049 JumpIfEqual {66}
	050 Move X8, 0x237A000
	051 Move X8, [X8+1448]
	052 Move X0, X19
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X1, X31
	056 Move X8, [X8]
	057 Move X8, [X8+184]
	058 Move S2, [X8+8]
	059 Move S3, [X8+12]
	060 Move S0, [X8]
	061 Move S1, [X8+4]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Call Transform.set_localRotation, X0, X1
	065 Return 
	066 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D7B9F8 FADD S0, S8, S0
	0x01D7B9FC FABS S2, S0

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

