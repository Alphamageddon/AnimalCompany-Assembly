Type: AnimalCompany.NavPointsHelper

Method: System.Void ApplyRotation()

Disassembly:
	0x01DD8684 ADRP X8, 0xFFFFFFFFFED12000
	0x01DD8688 LDR V2, [X8 + 0x35C]
	0x01DD868C FMOV S0, W31
	0x01DD8690 FMOV S1, 1
	0x01DD8694 MOV X0, X31
	0x01DD8698 BL 0x31B22EC
	0x01DD869C CBZ X0, 0x1DD8758
	0x01DD86A0 ADRP X20, 0x231D000
	0x01DD86A4 ADRP X21, 0x2320000
	0x01DD86A8 LDR X20, [X20 + 0x5B0]
	0x01DD86AC LDR X21, [X21 + 0x908]
	0x01DD86B0 MOV X1, X31
	0x01DD86B4 BL 0x31C5C5C
	0x01DD86B8 LDR X8, [X20]
	0x01DD86BC MOV X20, X0
	0x01DD86C0 MOV X0, X8
	0x01DD86C4 BL 0x1C16F10
	0x01DD86C8 LDR X2, [X21]
	0x01DD86CC MOV X1, X19
	0x01DD86D0 MOV X3, X31
	0x01DD86D4 MOV X21, X0
	0x01DD86D8 BL 0x2A6DA40
	0x01DD86DC CBZ X20, 0x1DD8758
	0x01DD86E0 ADRP X22, 0x231C000
	0x01DD86E4 ADRP X23, 0x2320000
	0x01DD86E8 LDR X22, [X22 + 0xE70]
	0x01DD86EC LDR X23, [X23 + 0x910]
	0x01DD86F0 MOV X0, X20
	0x01DD86F4 MOV X1, X21
	0x01DD86F8 MOV X2, X31
	0x01DD86FC BL 0x31C8070
	0x01DD8700 LDR X8, [X22]
	0x01DD8704 MOV X20, X0
	0x01DD8708 MOV X0, X8
	0x01DD870C BL 0x1C16F10
	0x01DD8710 LDR X2, [X23]
	0x01DD8714 MOV X1, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Call NavPointsHelper.GetNavPoints, X0
	008 Compare X0, 0
	009 JumpIfEqual {41}
	010 Move W8, [X0+24]
	011 Move X20, X0
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W22, W31
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Add X8, X20, W22
	016 Move X0, [X8+32]
	017 Compare X0, 0
	018 JumpIfEqual {41}
	019 Move X1, X31
	020 Call Component.get_transform, X0
	021 Move S0, [X19+36]
	022 Move S1, [X19+40]
	023 Move V2, [X19+44]
	024 Move X21, X0
	025 Move X0, X31
	026 Call Quaternion.LookRotation, X0
	027 Compare X21, 0
	028 JumpIfEqual {41}
	029 Move X0, X21
	030 Move X1, X31
	031 Call Transform.set_rotation, X0, X1
	032 Move W8, [X20+24]
	033 Add W22, W22, 1
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return 
	041 Call 0x1C17F20
	042 Call 0x1C17F28

Method: System.Void ApplyRotaionTowardsPoint()

Disassembly:
	0x01DD8764 STP X20, X19, [X31 + 0x20]
	0x01DD8768 ADRP X21, 0x2600000
	0x01DD876C LDRB W8, [X21 + 0xC49]
	0x01DD8770 MOV W20, W2
	0x01DD8774 MOV W22, W1
	0x01DD8778 MOV X19, X0
	0x01DD877C TBNZ X8, 0x0, 0x1DD8794
	0x01DD8780 ADRP X0, 0x2320000
	0x01DD8784 LDR X0, [X0 + 0x918]
	0x01DD8788 BL 0x1C16CF4
	0x01DD878C MOVZ W8, 0x1
	0x01DD8790 STRB W8, [X21 + 0xC49]
	0x01DD8794 LDR X0, [X19 + 0x40]
	0x01DD8798 CBZ X0, 0x1DD8864
	0x01DD879C ADRP X23, 0x2320000
	0x01DD87A0 LDR X23, [X23 + 0x918]
	0x01DD87A4 MOV X1, X31
	0x01DD87A8 BL 0x3C1341C
	0x01DD87AC LDR X8, [X23]
	0x01DD87B0 MOV X19, X0
	0x01DD87B4 LDR W9, [X8 + 0xE0]
	0x01DD87B8 CBNZ W9, 0x1DD87C8
	0x01DD87BC MOV X0, X8
	0x01DD87C0 BL 0x1C16DFC
	0x01DD87C4 LDR X8, [X23]
	0x01DD87C8 LDR X9, [X8 + 0xB8]
	0x01DD87CC LDR W21, [X9]
	0x01DD87D0 TBZ X22, 0x0, 0x1DD8834
	0x01DD87D4 LDR W10, [X8 + 0xE0]
	0x01DD87D8 CBNZ W10, 0x1DD87EC
	0x01DD87DC MOV X0, X8
	0x01DD87E0 BL 0x1C16DFC
	0x01DD87E4 LDR X8, [X23]
	0x01DD87E8 LDR X9, [X8 + 0xB8]
	0x01DD87EC ANDS W31, W20, 0x1
	0x01DD87F0 MOVZ W8, 0x14
	0x01DD87F4 MOVZ W10, 0x4
	0x01DD87F8 MOVZ W11, 0x18
	0x01DD87FC MOVZ W12, 0x8
	0x01DD8800 MOVZ W13, 0x1C
	0x01DD8804 CSEL X8, X10, X8, NE
	0x01DD8808 MOVZ W10, 0xC
	0x01DD880C CSEL X11, X12, X11, NE
	0x01DD8810 MOVZ W12, 0x20
	0x01DD8814 CSEL X10, X10, X13, NE
	0x01DD8818 MOVZ W13, 0x10
	0x01DD881C CSEL X12, X13, X12, NE
	0x01DD8820 LDR V0, [X9, X8, LSL]
	0x01DD8824 LDR V1, [X9, X11, LSL]
	0x01DD8828 LDR V2, [X9, X10, LSL]
	0x01DD882C LDR V3, [X9, X12, LSL]
	0x01DD8830 B 0x1DD8844
	0x01DD8834 FMOV S2, W31
	0x01DD8838 FMOV S3, 1
	0x01DD883C FMOV S1, W31
	0x01DD8840 FMOV S0, W31
	0x01DD8844 CBZ X19, 0x1DD8864
	0x01DD8848 MOV X0, X19

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, X0
	011 Call NavPointsHelper.GetNavPoints, X0
	012 Compare X0, 0
	013 JumpIfEqual {67}
	014 Move W8, [X0+24]
	015 Move X20, X0
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W23, W31
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Add X8, X20, W23
	020 Move X22, [X8+32]
	021 Compare X22, 0
	022 JumpIfEqual {67}
	023 Move X0, X22
	024 Move X1, X31
	025 Call Component.get_transform, X0
	026 Move S0, [X19+48]
	027 Move S1, [X19+52]
	028 Move V2, [X19+56]
	029 Move X21, X0
	030 Move X0, X31
	031 Call Extensions.Flatten, X0
	032 Move X0, X22
	033 Move X1, X31
	034 Move V8, V0
	035 Move V9, V1
	036 Move V10, V2
	037 Call Component.get_transform, X0
	038 Compare X0, 0
	039 JumpIfEqual {67}
	040 Move X1, X31
	041 Call Transform.get_position, X0
	042 Move X0, X31
	043 Call Extensions.Flatten, X0
	044 Subtract S0, S8, S0
	045 Subtract S1, S9, S1
	046 Subtract S2, S10, S2
	047 Move X0, X31
	048 Call Quaternion.LookRotation, X0
	049 Compare X21, 0
	050 JumpIfEqual {67}
	051 Move X0, X21
	052 Move X1, X31
	053 Call Transform.set_rotation, X0, X1
	054 Move W8, [X20+24]
	055 Add W23, W23, 1
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X20, [X31+64]
	058 Move X19, [X31+72]
	059 Move X22, [X31+48]
	060 Move X21, [X31+56]
	061 Move X30, [X31+32]
	062 Move X23, [X31+40]
	063 Move D9, [X31+16]
	064 Move D8, [X31+24]
	065 Move V10, [X31+80]
	066 Return 
	067 Call 0x1C17F20
	068 Call 0x1C17F28

Method: System.Void ApplyLayer()

Disassembly:
	0x01DD884C MOV W1, W21
	0x01DD8850 LDP X20, X19, [X31 + 0x20]
	0x01DD8854 LDP X22, X21, [X31 + 0x10]
	0x01DD8858 MOV X2, X31
	0x01DD885C LDP X30, X23, [X31], #0x30
	0x01DD8860 B 0x3C14988
	0x01DD8864 BL 0x1C16F20
	0x01DD8868 MOV X1, X31
	0x01DD886C B 0x3C36C30
	0x01DD8870 STP X30, X21, [X31 - 0x20]!
	0x01DD8874 STP X20, X19, [X31 + 0x10]
	0x01DD8878 ADRP X20, 0x2600000
	0x01DD887C ADRP X21, 0x231E000
	0x01DD8880 ADRP X19, 0x2320000
	0x01DD8884 LDRB W8, [X20 + 0xC4A]
	0x01DD8888 LDR X21, [X21 + 0xC88]
	0x01DD888C LDR X19, [X19 + 0x918]
	0x01DD8890 TBNZ X8, 0x0, 0x1DD88B4
	0x01DD8894 ADRP X0, 0x2320000
	0x01DD8898 LDR X0, [X0 + 0x918]
	0x01DD889C BL 0x1C16CF4
	0x01DD88A0 ADRP X0, 0x231E000
	0x01DD88A4 LDR X0, [X0 + 0xC88]
	0x01DD88A8 BL 0x1C16CF4
	0x01DD88AC MOVZ W8, 0x1
	0x01DD88B0 STRB W8, [X20 + 0xC4A]
	0x01DD88B4 LDR X0, [X21]
	0x01DD88B8 MOV X1, X31
	0x01DD88BC BL 0x3C124EC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Call NavPointsHelper.GetNavPoints, X0
	005 Compare X0, 0
	006 JumpIfEqual {30}
	007 Move W8, [X0+24]
	008 Move X19, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W20, W31
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X8, X19, W20
	013 Move X0, [X8+32]
	014 Compare X0, 0
	015 JumpIfEqual {30}
	016 Move X1, X31
	017 Call Component.get_gameObject, X0
	018 Compare X0, 0
	019 JumpIfEqual {30}
	020 Move W1, 15
	021 Move X2, X31
	022 Call GameObject.set_layer, X0, X1
	023 Move W8, [X19+24]
	024 Add W20, W20, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return 
	030 Call 0x1C17F20
	031 Call 0x1C17F28

Method: System.Void StickToGround()

Disassembly:
	0x01DD88C0 LDR X8, [X19]
	0x01DD88C4 ADRP X9, 0xFFFFFFFFFED13000
	0x01DD88C8 LDR V0, [X9 + 0x10]
	0x01DD88CC ADRP X9, 0xFFFFFFFFFED12000
	0x01DD88D0 LDR X8, [X8 + 0xB8]
	0x01DD88D4 STR W0, [X8]
	0x01DD88D8 STUR V0, [X8 + 0x4]
	0x01DD88DC LDR X8, [X19]
	0x01DD88E0 LDR V0, [X9 + 0xEC]
	0x01DD88E4 LDP X20, X19, [X31 + 0x10]
	0x01DD88E8 LDR X8, [X8 + 0xB8]
	0x01DD88EC STUR V0, [X8 + 0x14]
	0x01DD88F0 LDP X30, X21, [X31], #0x20
	0x01DD88F4 RET
	0x01DD88F8 STR D8, [X31 - 0x30]!
	0x01DD88FC STP X30, X21, [X31 + 0x10]
	0x01DD8900 STP X20, X19, [X31 + 0x20]
	0x01DD8904 ADRP X21, 0x2600000
	0x01DD8908 ADRP X20, 0x231B000
	0x01DD890C LDRB W8, [X21 + 0xC4B]
	0x01DD8910 LDR X20, [X20 + 0x598]
	0x01DD8914 MOV V8.16B, V0.16B
	0x01DD8918 MOV X19, X0
	0x01DD891C TBNZ X8, 0x0, 0x1DD8940
	0x01DD8920 ADRP X0, 0x231D000
	0x01DD8924 LDR X0, [X0 + 0x5A8]
	0x01DD8928 BL 0x1C16CF4
	0x01DD892C ADRP X0, 0x231B000
	0x01DD8930 LDR X0, [X0 + 0x598]
	0x01DD8934 BL 0x1C16CF4
	0x01DD8938 MOVZ W8, 0x1
	0x01DD893C STRB W8, [X21 + 0xC4B]
	0x01DD8940 LDR X0, [X20]
	0x01DD8944 LDR X20, [X19 + 0x30]
	0x01DD8948 LDR W8, [X0 + 0xE0]
	0x01DD894C CBNZ W8, 0x1DD8954
	0x01DD8950 BL 0x1C16DFC
	0x01DD8954 MOV X0, X20
	0x01DD8958 MOV X1, X31
	0x01DD895C MOV X2, X31
	0x01DD8960 BL 0x3C3883C
	0x01DD8964 TBZ X0, 0x0, 0x1DD899C
	0x01DD8968 ADRP X8, 0x231D000
	0x01DD896C LDR X8, [X8 + 0x5A8]
	0x01DD8970 LDR W19, [X19 + 0x4C]
	0x01DD8974 LDR X0, [X8]
	0x01DD8978 LDR W8, [X0 + 0xE0]
	0x01DD897C CBNZ W8, 0x1DD8984
	0x01DD8980 BL 0x1C16DFC
	0x01DD8984 MOV W0, W19
	0x01DD8988 LDP X20, X19, [X31 + 0x20]
	0x01DD898C LDP X30, X21, [X31 + 0x10]
	0x01DD8990 MOV X1, X31
	0x01DD8994 LDR V8, [X31], #0x30
	0x01DD8998 B 0x31AD670
	0x01DD899C LDR X0, [X19 + 0x30]
	0x01DD89A0 CBZ X0, 0x1DD89E4
	0x01DD89A4 ADRP X8, 0xFFFFFFFFFED11000
	0x01DD89A8 LDR V3, [X8 + 0xFF0]
	0x01DD89AC FMOV S1, 1
	0x01DD89B0 FMIN S1, S8, S1
	0x01DD89B4 LDP X20, X19, [X31 + 0x20]
	0x01DD89B8 LDP X30, X21, [X31 + 0x10]
	0x01DD89BC FMOV S2, W31
	0x01DD89C0 FMUL S1, S1, S3
	0x01DD89C4 FCMP S8, 0x0
	0x01DD89C8 FADD S1, S1, S2
	0x01DD89CC FMOV S0, W31
	0x01DD89D0 FCSEL S2, S1, S2, PL
	0x01DD89D4 FMOV S1, W31
	0x01DD89D8 MOV X1, X31
	0x01DD89DC LDR V8, [X31], #0x30
	0x01DD89E0 B 0x3C3EC04
	0x01DD89E4 BL 0x1C16F20
	0x01DD89E8 STP X30, X23, [X31 - 0x30]!
	0x01DD89EC STP X22, X21, [X31 + 0x10]
	0x01DD89F0 STP X20, X19, [X31 + 0x20]
	0x01DD89F4 ADRP X20, 0x2600000
	0x01DD89F8 ADRP X21, 0x231D000
	0x01DD89FC LDRB W8, [X20 + 0xC4C]
	0x01DD8A00 LDR X21, [X21 + 0x5A8]
	0x01DD8A04 MOV X19, X0
	0x01DD8A08 TBNZ X8, 0x0, 0x1DD8A50
	0x01DD8A0C ADRP X0, 0x231D000
	0x01DD8A10 LDR X0, [X0 + 0x5B0]
	0x01DD8A14 BL 0x1C16CF4
	0x01DD8A18 ADRP X0, 0x231C000
	0x01DD8A1C LDR X0, [X0 + 0xE70]
	0x01DD8A20 BL 0x1C16CF4
	0x01DD8A24 ADRP X0, 0x2320000
	0x01DD8A28 LDR X0, [X0 + 0x920]
	0x01DD8A2C BL 0x1C16CF4
	0x01DD8A30 ADRP X0, 0x2320000
	0x01DD8A34 LDR X0, [X0 + 0x928]
	0x01DD8A38 BL 0x1C16CF4
	0x01DD8A3C ADRP X0, 0x231D000
	0x01DD8A40 LDR X0, [X0 + 0x5A8]
	0x01DD8A44 BL 0x1C16CF4
	0x01DD8A48 MOVZ W8, 0x1
	0x01DD8A4C STRB W8, [X20 + 0xC4C]
	0x01DD8A50 LDR X0, [X21]
	0x01DD8A54 LDR W8, [X0 + 0xE0]
	0x01DD8A58 CBNZ W8, 0x1DD8A60
	0x01DD8A5C BL 0x1C16DFC
	0x01DD8A60 ADRP X8, 0xFFFFFFFFFED12000
	0x01DD8A64 LDR V2, [X8 + 0x2C8]
	0x01DD8A68 FMOV S0, W31
	0x01DD8A6C FMOV S1, 1
	0x01DD8A70 MOV X0, X31
	0x01DD8A74 BL 0x31B22EC
	0x01DD8A78 CBZ X0, 0x1DD8B34
	0x01DD8A7C ADRP X20, 0x231D000
	0x01DD8A80 ADRP X21, 0x2320000
	0x01DD8A84 LDR X20, [X20 + 0x5B0]
	0x01DD8A88 LDR X21, [X21 + 0x920]
	0x01DD8A8C MOV X1, X31
	0x01DD8A90 BL 0x31C5C5C
	0x01DD8A94 LDR X8, [X20]
	0x01DD8A98 MOV X20, X0
	0x01DD8A9C MOV X0, X8
	0x01DD8AA0 BL 0x1C16F10
	0x01DD8AA4 LDR X2, [X21]
	0x01DD8AA8 MOV X1, X19
	0x01DD8AAC MOV X3, X31
	0x01DD8AB0 MOV X21, X0
	0x01DD8AB4 BL 0x2A6DA40
	0x01DD8AB8 CBZ X20, 0x1DD8B34
	0x01DD8ABC ADRP X22, 0x231C000
	0x01DD8AC0 ADRP X23, 0x2320000
	0x01DD8AC4 LDR X22, [X22 + 0xE70]
	0x01DD8AC8 LDR X23, [X23 + 0x928]
	0x01DD8ACC MOV X0, X20
	0x01DD8AD0 MOV X1, X21
	0x01DD8AD4 MOV X2, X31
	0x01DD8AD8 BL 0x31C8070
	0x01DD8ADC LDR X8, [X22]
	0x01DD8AE0 MOV X20, X0
	0x01DD8AE4 MOV X0, X8
	0x01DD8AE8 BL 0x1C16F10
	0x01DD8AEC LDR X2, [X23]
	0x01DD8AF0 MOV X1, X19
	0x01DD8AF4 MOV X3, X31
	0x01DD8AF8 MOV X21, X0
	0x01DD8AFC BL 0x3314368
	0x01DD8B00 CBZ X20, 0x1DD8B34
	0x01DD8B04 MOV X0, X20
	0x01DD8B08 MOV X1, X21
	0x01DD8B0C MOV X2, X31
	0x01DD8B10 BL 0x31C7FD8
	0x01DD8B14 CBZ X0, 0x1DD8B34
	0x01DD8B18 MOV X1, X31
	0x01DD8B1C BL 0x31BFBD4
	0x01DD8B20 STR W0, [X19 + 0x4C]
	0x01DD8B24 LDP X20, X19, [X31 + 0x20]
	0x01DD8B28 LDP X22, X21, [X31 + 0x10]
	0x01DD8B2C LDP X30, X23, [X31], #0x30
	0x01DD8B30 RET
	0x01DD8B34 BL 0x1C16F20
	0x01DD8B38 STR D8, [X31 - 0x30]!

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+64], D15
	003 Move [X31+72], D14
	004 Move [X31+80], D13
	005 Move [X31+88], D12
	006 Move [X31+96], D11
	007 Move [X31+104], D10
	008 Move [X31+112], D9
	009 Move [X31+120], D8
	010 Move [X31+128], X29
	011 Move [X31+136], X30
	012 Move [X31+144], X28
	013 Move [X31+152], X27
	014 Move [X31+160], X26
	015 Move [X31+168], X25
	016 Move [X31+176], X24
	017 Move [X31+184], X23
	018 Move [X31+192], X22
	019 Move [X31+200], X21
	020 Move [X31+208], X20
	021 Move [X31+216], X19
	022 Move X20, 0x2601000
	023 Move W8, [X20+3140]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {37}
	029 Move X0, 0x231C000
	030 Move X0, [X0+1496]
	031 Call 0x1C17CF4
	032 Move X0, 0x231C000
	033 Move X0, [X0+1528]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3140], W8
	037 NotImplemented "Instruction MOVI not yet implemented."
	038 Move X0, X19
	039 Move [X31+44], V0
	040 Move [X31+16], V0
	041 Move [X31+24], V0
	042 Call NavPointsHelper.GetNavPoints, X0
	043 Compare X0, 0
	044 JumpIfEqual {194}
	045 Move W8, [X0+24]
	046 Move X19, X0
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X24, 0x231C000
	049 Move X25, 0x231C000
	050 Move X20, 0x231C000
	051 Move X9, -19845120
	052 Move X24, [X24+1496]
	053 Move X25, [X25+1528]
	054 Move X20, [X20+1440]
	055 Move V0, [X9+188]
	056 Move W23, W31
	057 Move X26, 0x2601000
	058 Move W27, 1
	059 Move X28, 0x2601000
	060 Move W29, 0x447A0000
	061 Move [X31+8], S0
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Add X8, X19, W23
	064 Move X21, [X8+32]
	065 Compare X21, 0
	066 JumpIfEqual {194}
	067 Move X0, X21
	068 Move X1, X31
	069 Call Component.get_transform, X0
	070 Compare X0, 0
	071 JumpIfEqual {194}
	072 Move X1, X31
	073 Call Transform.get_position, X0
	074 Move W8, [X26+1926]
	075 Move V9, V1
	076 Move V10, V2
	077 Move [X31+12], S0
	078 Compare W8, 0
	079 JumpIfNotEqual {83}
	080 Move X0, X20
	081 Call 0x1C17CF4
	082 Move [X26+1926], W27
	083 Move X8, [X20]
	084 Move W9, [X28+2749]
	085 Move X8, [X8+184]
	086 Move S8, [X8+24]
	087 Move S14, [X8+28]
	088 Move V15, [X8+32]
	089 Compare W9, 0
	090 JumpIfNotEqual {96}
	091 Move X0, X20
	092 Call 0x1C17CF4
	093 Move X8, [X20]
	094 Move [X28+2749], W27
	095 Move X8, [X8+184]
	096 Move X0, [X24]
	097 Move S12, [X8+36]
	098 Move S11, [X8+40]
	099 Move V13, [X8+44]
	100 Move W9, [X0+224]
	101 Compare W9, 0
	102 JumpIfNotEqual {105}
	103 Call 0x1C17DFC
	104 Move X0, [X24]
	105 Move X8, [X0+184]
	106 Move X1, X31
	107 Move W0, [X8]
	108 Call LayerMask.op_Implicit, X0
	109 Move X8, [X25]
	110 Move W22, W0
	111 Move W9, [X8+224]
	112 Compare W9, 0
	113 JumpIfNotEqual {116}
	114 Move X0, X8
	115 Call 0x1C17DFC
	116 Move V3, [X31+12]
	117 Move S2, 0.5
	118 Multiply S0, S8, S2
	119 Multiply S1, S14, S2
	120 Multiply S2, S15, S2
	121 Add S0, S3, S0
	122 Add S1, S9, S1
	123 Add S2, S10, S2
	124 Add X0, X31, 16
	125 Move S6, W29
	126 Move V3, V12
	127 Move V4, V11
	128 Move V5, V13
	129 Move W1, W22
	130 Move X2, X31
	131 Call Physics.Raycast, X0, X1, X2, V0, X3
	132 Move TEMP, X0
	133 And TEMP, TEMP, 1
	134 Compare TEMP, 1
	135 JumpIfNotEqual {169}
	136 Move X0, X21
	137 Move X1, X31
	138 Call Component.get_transform, X0
	139 Move X21, X0
	140 Add X0, X31, 16
	141 Move X1, X31
	142 Call RaycastHit.get_point, X0
	143 Move W8, [X26+1926]
	144 Move V8, V0
	145 Move V9, V1
	146 Move V10, V2
	147 Compare W8, 0
	148 JumpIfNotEqual {152}
	149 Move X0, X20
	150 Call 0x1C17CF4
	151 Move [X26+1926], W27
	152 Compare X21, 0
	153 JumpIfEqual {194}
	154 Move X8, [X20]
	155 Move V3, [X31+8]
	156 Move X0, X21
	157 Move X1, X31
	158 Move X8, [X8+184]
	159 Move S1, [X8+28]
	160 Move S0, [X8+32]
	161 Move V2, [X8+24]
	162 Multiply S0, S0, S3
	163 Multiply S1, S1, S3
	164 Multiply S3, S2, S3
	165 Add S2, S10, S0
	166 Add S1, S9, S1
	167 Add S0, S8, S3
	168 Call Transform.set_position, X0, X1
	169 Move W8, [X19+24]
	170 Add W23, W23, 1
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move X20, [X31+208]
	173 Move X19, [X31+216]
	174 Move X22, [X31+192]
	175 Move X21, [X31+200]
	176 Move X24, [X31+176]
	177 Move X23, [X31+184]
	178 Move X26, [X31+160]
	179 Move X25, [X31+168]
	180 Move X28, [X31+144]
	181 Move X27, [X31+152]
	182 Move X29, [X31+128]
	183 Move X30, [X31+136]
	184 Move D9, [X31+112]
	185 Move D8, [X31+120]
	186 Move D11, [X31+96]
	187 Move D10, [X31+104]
	188 Move D13, [X31+80]
	189 Move D12, [X31+88]
	190 Move D15, [X31+64]
	191 Move D14, [X31+72]
	192 Add X31, X31, 224
	193 Return 
	194 Call 0x1C17F20
	195 Call 0x1C17F28

Method: AnimalCompany.GameGen.NavPoint[] GetNavPoints()

Disassembly:
	0x01DD8718 MOV X3, X31
	0x01DD871C MOV X21, X0
	0x01DD8720 BL 0x3314368
	0x01DD8724 CBZ X20, 0x1DD8758
	0x01DD8728 MOV X0, X20
	0x01DD872C MOV X1, X21
	0x01DD8730 MOV X2, X31
	0x01DD8734 BL 0x31C7FD8
	0x01DD8738 CBZ X0, 0x1DD8758
	0x01DD873C MOV X1, X31
	0x01DD8740 BL 0x31BFBD4
	0x01DD8744 STR W0, [X19 + 0x4C]
	0x01DD8748 LDP X20, X19, [X31 + 0x20]
	0x01DD874C LDP X22, X21, [X31 + 0x10]
	0x01DD8750 LDP X30, X23, [X31], #0x30
	0x01DD8754 RET
	0x01DD8758 BL 0x1C16F20
	0x01DD875C STP X30, X23, [X31 - 0x30]!
	0x01DD8760 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2601000
	006 Move X21, 0x2321000
	007 Move W8, [X20+3141]
	008 Move X21, [X21+2248]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2321000
	015 Move X0, [X0+2248]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3141], W8
	019 Move X2, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move W1, 1
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call 0x21A55B8, X0, X1
	027 Return X0

Method: System.Void .ctor()

Disassembly:
	0x01DD8B3C STP X30, X21, [X31 + 0x10]
	0x01DD8B40 STP X20, X19, [X31 + 0x20]
	0x01DD8B44 ADRP X21, 0x2600000
	0x01DD8B48 ADRP X20, 0x231B000
	0x01DD8B4C LDRB W8, [X21 + 0xC4D]
	0x01DD8B50 LDR X20, [X20 + 0x598]
	0x01DD8B54 MOV V8.16B, V0.16B
	0x01DD8B58 MOV X19, X0
	0x01DD8B5C TBNZ X8, 0x0, 0x1DD8B80
	0x01DD8B60 ADRP X0, 0x231D000
	0x01DD8B64 LDR X0, [X0 + 0x5A8]
	0x01DD8B68 BL 0x1C16CF4
	0x01DD8B6C ADRP X0, 0x231B000
	0x01DD8B70 LDR X0, [X0 + 0x598]
	0x01DD8B74 BL 0x1C16CF4
	0x01DD8B78 MOVZ W8, 0x1
	0x01DD8B7C STRB W8, [X21 + 0xC4D]
	0x01DD8B80 LDR X0, [X20]
	0x01DD8B84 LDR X20, [X19 + 0x30]
	0x01DD8B88 LDR W8, [X0 + 0xE0]
	0x01DD8B8C CBNZ W8, 0x1DD8B94
	0x01DD8B90 BL 0x1C16DFC
	0x01DD8B94 MOV X0, X20
	0x01DD8B98 MOV X1, X31
	0x01DD8B9C MOV X2, X31
	0x01DD8BA0 BL 0x3C3883C
	0x01DD8BA4 TBZ X0, 0x0, 0x1DD8BDC
	0x01DD8BA8 ADRP X8, 0x231D000
	0x01DD8BAC LDR X8, [X8 + 0x5A8]
	0x01DD8BB0 LDR W19, [X19 + 0x4C]
	0x01DD8BB4 LDR X0, [X8]
	0x01DD8BB8 LDR W8, [X0 + 0xE0]
	0x01DD8BBC CBNZ W8, 0x1DD8BC4
	0x01DD8BC0 BL 0x1C16DFC
	0x01DD8BC4 MOV W0, W19
	0x01DD8BC8 LDP X20, X19, [X31 + 0x20]
	0x01DD8BCC LDP X30, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2601000
	006 Move W8, [X20+2591]
	007 Move X19, X0
	008 Compare W8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, 0x231C000
	011 Move X0, [X0+1440]
	012 Call 0x1C17CF4
	013 Move W8, 1
	014 Move [X20+2591], W8
	015 Move X20, 0x231C000
	016 Move X20, [X20+1440]
	017 Move X21, 0x2601000
	018 Move X8, [X20]
	019 Move X9, [X8+184]
	020 Move V0, [X9+72]
	021 Move V1, [X9+80]
	022 Move [X19+36], D0
	023 Move [X19+44], S1
	024 Move W9, [X21+1923]
	025 Compare W9, 0
	026 JumpIfNotEqual {32}
	027 Move X0, X20
	028 Call 0x1C17CF4
	029 Move X8, [X20]
	030 Move W9, 1
	031 Move [X21+1923], W9
	032 Move X8, [X8+184]
	033 Move X0, X19
	034 Move X1, X31
	035 Move V0, [X8]
	036 Move V1, [X8+8]
	037 Move [X19+48], D0
	038 Move [X19+56], S1
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Call MonoBehaviour..ctor, X0
	044 Return 

