Type: AnimalCompany.PrototypeOne.MobView

Method: System.Boolean get_isWalking()

Disassembly:
	0x01D06728 LDP X22, X21, [X31 + 0x10]
	0x01D0672C LDR X8, [X8 + 0xB8]
	0x01D06730 STR X19, [X8 + 0x18]
	0x01D06734 LDP X20, X19, [X31 + 0x20]
	0x01D06738 LDR X30, [X31], #0x30
	0x01D0673C RET
	0x01D06740 STP X30, X19, [X31 - 0x10]!
	0x01D06744 LDR W1, [X0 + 0xA0]
	0x01D06748 MOV X19, X0
	0x01D0674C BL 0x1D05948
	0x01D06750 LDRB W1, [X19 + 0xA4]
	0x01D06754 MOV X0, X19
	0x01D06758 BL 0x1D05A10
	0x01D0675C LDRB W1, [X19 + 0xA5]
	0x01D06760 MOV X0, X19
	0x01D06764 LDP X30, X19, [X31], #0x10
	0x01D06768 B 0x1D05ADC
	0x01D0676C STP X30, X19, [X31 - 0x10]!
	0x01D06770 MOV X19, X0
	0x01D06774 BL 0x1D058E8
	0x01D06778 STR W0, [X19 + 0xA0]
	0x01D0677C MOV X0, X19
	0x01D06780 BL 0x1D059A8
	0x01D06784 AND W8, W0, 0x1
	0x01D06788 MOV X0, X19
	0x01D0678C STRB W8, [X19 + 0xA4]
	0x01D06790 BL 0x1D05A74
	0x01D06794 AND W8, W0, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x251E000
	006 Move X20, 0x224C000
	007 Move W8, [X21+1869]
	008 Move X20, [X20+144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x224C000
	015 Move X0, [X0+144]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1869], W8
	019 Move X0, [X20]
	020 Move X19, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1B6F8F8
	025 Compare X19, 0
	026 JumpIfEqual {38}
	027 Move X8, [X20]
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, X31
	032 Move X8, [X8+184]
	033 Move W1, [X8]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call Animator.GetBool, X0, X1
	037 Return X0
	038 Call 0x1B6FA1C

Method: System.Void SetWalk(System.Boolean isWalking)

Disassembly:
	0x01D03EA4 BL 0x1D02EA4
	0x01D03EA8 MOV X0, X19
	0x01D03EAC MOV W1, W31
	0x01D03EB0 BL 0x1D02DFC
	0x01D03EB4 LDR X0, [X19 + 0x90]
	0x01D03EB8 CBZ X0, 0x1D03F24
	0x01D03EBC MOV W1, W31
	0x01D03EC0 MOV X2, X31
	0x01D03EC4 BL 0x3A4AD28
	0x01D03EC8 LDR X20, [X19 + 0x90]
	0x01D03ECC CBZ X20, 0x1D03F24
	0x01D03ED0 MOV X0, X20
	0x01D03ED4 MOV X1, X31
	0x01D03ED8 BL 0x3A9B084
	0x01D03EDC CBZ X0, 0x1D03F24
	0x01D03EE0 MOV X1, X31
	0x01D03EE4 BL 0x3AA7658
	0x01D03EE8 MOV X0, X20
	0x01D03EEC MOV X1, X31
	0x01D03EF0 BL 0x3A4A810
	0x01D03EF4 MOV X0, X31
	0x01D03EF8 STR W31, [X19 + 0xF8]
	0x01D03EFC BL 0x3AA47CC
	0x01D03F00 STR S0, [X19 + 0x100]
	0x01D03F04 LDP X20, X19, [X31 + 0x50]
	0x01D03F08 LDP X22, X21, [X31 + 0x40]
	0x01D03F0C LDR X30, [X31 + 0x38]
	0x01D03F10 LDP D9, D8, [X31 + 0x28]
	0x01D03F14 LDP D11, D10, [X31 + 0x18]
	0x01D03F18 LDP D13, D12, [X31 + 0x8]
	0x01D03F1C LDR V14, [X31], #0x60
	0x01D03F20 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2521000
	007 Move X21, 0x224F000
	008 Move W8, [X22+1870]
	009 Move X21, [X21+144]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x224F000
	017 Move X0, [X0+144]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X22+1870], W8
	021 Move X0, [X21]
	022 Move X20, [X20+32]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1B6F8F8
	027 Compare X20, 0
	028 JumpIfEqual {42}
	029 Move X8, [X21]
	030 And W2, W19, 1
	031 Move X0, X20
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X8, [X8+184]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X3, X31
	038 Move W1, [X8]
	039 Move X30, [X31+48]
	040 Call Animator.SetBool, X0, X1, X2
	041 Return 
	042 Call 0x1B6FA1C

Method: System.Void SetWalkSpeed(System.Single speed)

Disassembly:
	0x01D054A4 LDR W8, [X0 + 0xE0]
	0x01D054A8 CBNZ W8, 0x1D054B0
	0x01D054AC BL 0x1B6E8F8
	0x01D054B0 FMUL S0, S11, S11
	0x01D054B4 FMUL S1, S9, S9
	0x01D054B8 FADD S0, S0, S1
	0x01D054BC FMUL S1, S8, S8
	0x01D054C0 FADD S0, S1, S0
	0x01D054C4 FSQRT S0, S0
	0x01D054C8 FCMP S0, S14
	0x01D054CC B.PL 0x1D05540
	0x01D054D0 LDR X0, [X19 + 0x98]
	0x01D054D4 CBZ X0, 0x1D05560
	0x01D054D8 MOV W1, W31
	0x01D054DC BL 0x1D02EA4
	0x01D054E0 MOV X0, X19
	0x01D054E4 MOV W1, W31
	0x01D054E8 BL 0x1D04828
	0x01D054EC LDR V0, [X19 + 0xDC]
	0x01D054F0 LDR X20, [X19 + 0x90]
	0x01D054F4 STR W31, [X19 + 0xF0]
	0x01D054F8 STR S0, [X19 + 0xF4]
	0x01D054FC CBZ X20, 0x1D05560
	0x01D05500 MOV X0, X20
	0x01D05504 MOV X1, X31
	0x01D05508 BL 0x3A9B084
	0x01D0550C CBZ X0, 0x1D05560
	0x01D05510 MOV X1, X31
	0x01D05514 BL 0x3AA7658
	0x01D05518 MOV X0, X20
	0x01D0551C LDP X20, X19, [X31 + 0x60]
	0x01D05520 LDP X22, X21, [X31 + 0x50]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x251F000
	007 Move X20, 0x224D000
	008 Move W8, [X21+1871]
	009 Move X20, [X20+144]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x224D000
	017 Move X0, [X0+144]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X21+1871], W8
	021 Move X0, [X20]
	022 Move X19, [X19+32]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1B6F8F8
	027 Compare X19, 0
	028 JumpIfEqual {42}
	029 Move X8, [X20]
	030 Move X0, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X30, [X31+16]
	034 Move X21, [X31+24]
	035 Move X8, [X8+184]
	036 Move V0, V8
	037 Move X2, X31
	038 Move W1, [X8+4]
	039 Move V8, [X31+48]
	040 Call Animator.SetFloat, X0, X1, V0
	041 Return 
	042 Call 0x1B6FA1C

Method: System.Void PlaySoundNotice()

Disassembly:
	0x01D04B50 CMP W9, 0x1
	0x01D04B54 B.EQ 0x1D04C60
	0x01D04B58 CMP W8, 0x1
	0x01D04B5C B.LT 0x1D04C48
	0x01D04B60 ADRP X23, 0x224B000
	0x01D04B64 LDR X23, [X23 + 0x7B0]
	0x01D04B68 MOV X21, X31
	0x01D04B6C ADD X22, X20, 0x20
	0x01D04B70 CMP W21, W8
	0x01D04B74 B.CS 0x1D04CA0
	0x01D04B78 LDR X0, [X22, X21, LSL #3]
	0x01D04B7C CBZ X0, 0x1D04C9C
	0x01D04B80 MOV X1, X31
	0x01D04B84 BL 0x3A9B0C0
	0x01D04B88 CBZ X0, 0x1D04C9C
	0x01D04B8C LDR X2, [X23]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+40]
	005 Compare X0, 0
	006 JumpIfEqual {25}
	007 Move X1, X31
	008 Call AudioSource.get_isPlaying, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {16}
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return 
	016 Move X0, [X19+40]
	017 Compare X0, 0
	018 JumpIfEqual {25}
	019 Move X1, [X19+56]
	020 Move X2, X31
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Call AudioSource.PlayOneShot, X0, X1
	024 Return 
	025 Call 0x1B6FA1C

Method: System.Void PlaySoundWalk()

Disassembly:
	0x01D055AC STRB W8, [X21 + 0x742]
	0x01D055B0 LDR X0, [X20]

ISIL:
	001 Move X1, [X0+64]
	002 Call MobView.PlaySound, X0, X1
	003 Return 

Method: System.Void PlaySoundRun()

Disassembly:
	0x01D055B4 LDR X20, [X19 + 0xF8]
	0x01D055B8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move X1, [X0+72]
	002 Call MobView.PlaySound, X0, X1
	003 Return 

Method: System.Void PlaySound(UnityEngine.AudioClip clip)

Disassembly:
	0x01D078CC LDRB W8, [X27 + 0x510]
	0x01D078D0 LDP S10, S9, [X31 + 0x90]
	0x01D078D4 CBNZ W8, 0x1D078E4
	0x01D078D8 MOV X0, X20
	0x01D078DC BL 0x1B6E7F0
	0x01D078E0 STRB W29, [X27 + 0x510]
	0x01D078E4 LDRB W8, [X19 + 0x113]
	0x01D078E8 CBNZ W8, 0x1D078B4
	0x01D078EC LDR X8, [X20]
	0x01D078F0 LDR V16, [X31 + 0x6]
	0x01D078F4 FSUB S4, S14, S9
	0x01D078F8 LDR V3, [X19 + 0xB0]
	0x01D078FC LDR X8, [X8 + 0xB8]
	0x01D07900 LDR V7, [X19 + 0xB8]
	0x01D07904 FSUB S0, S12, S8
	0x01D07908 FSUB S2, S13, S10
	0x01D0790C LDP S5, S1, [X8 + 0x28]
	0x01D07910 FADD S1, S1, S1
	0x01D07914 FMUL S1, S1, S11
	0x01D07918 FMUL S1, S1, S16
	0x01D0791C FMUL S1, S1, S16
	0x01D07920 FADD S6, S4, S1
	0x01D07924 LDR V1, [X8 + 0x24]
	0x01D07928 FADD S4, S5, S5
	0x01D0792C FMUL S4, S4, S11
	0x01D07930 FMUL S4, S4, S16
	0x01D07934 FADD S1, S1, S1
	0x01D07938 FMUL S1, S1, S11
	0x01D0793C FMUL S1, S1, S16
	0x01D07940 FMUL S4, S4, S16
	0x01D07944 FMUL S1, S1, S16
	0x01D07948 FADD S5, S2, S4
	0x01D0794C FADD S4, S0, S1
	0x01D07950 ADD X1, X31, 0xE0
	0x01D07954 MOVZ W2, 0x1
	0x01D07958 MOV X0, X19
	0x01D0795C MOV V0.16B, V8.16B
	0x01D07960 MOV V1.16B, V10.16B
	0x01D07964 MOV V2.16B, V9.16B
	0x01D07968 MOV X3, X21
	0x01D0796C BL 0x1D08B3C
	0x01D07970 TBZ X0, 0x0, 0x1D078B4
	0x01D07974 FSUB S1, S10, S13
	0x01D07978 FSUB S2, S9, S14
	0x01D0797C LDR V9, [X31 + 0x50]
	0x01D07980 LDR V10, [X31 + 0x40]
	0x01D07984 LDRB W8, [X23 + 0x43F]
	0x01D07988 LDR X22, [X19 + 0x90]
	0x01D0798C FSUB S0, S8, S12
	0x01D07990 FADD S15, S0, S15
	0x01D07994 FADD S9, S1, S9
	0x01D07998 FADD S10, S2, S10
	0x01D0799C ADD W28, W28, 0x1
	0x01D079A0 STR S9, [X31 + 0x50]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x251D000
	006 Move W8, [X21+1872]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2247000
	014 Move X0, [X0+1144]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1872], W8
	018 Move X0, [X20+48]
	019 Compare X0, 0
	020 JumpIfEqual {79}
	021 Move X21, 0x2247000
	022 Move X21, [X21+1144]
	023 Move X1, X31
	024 Call AudioSource.get_clip, X0
	025 Move X8, [X21]
	026 Move X21, X0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1B6F8F8
	032 Move X0, X21
	033 Move X1, X19
	034 Move X2, X31
	035 Call Object.op_Inequality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {54}
	040 Move X0, [X20+48]
	041 Compare X0, 0
	042 JumpIfEqual {79}
	043 Move X1, X31
	044 Call AudioSource.get_isPlaying, X0
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {54}
	049 Move X0, [X20+48]
	050 Compare X0, 0
	051 JumpIfEqual {79}
	052 Move X1, X31
	053 Call AudioSource.Stop, X0
	054 Move X0, [X20+48]
	055 Compare X0, 0
	056 JumpIfEqual {79}
	057 Move X1, X31
	058 Call AudioSource.get_isPlaying, X0
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {68}
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Return 
	068 Move X0, [X20+48]
	069 Compare X0, 0
	070 JumpIfEqual {79}
	071 Move X1, X19
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 Move X2, X31
	075 Move X30, [X31+32]
	076 Move X21, [X31+40]
	077 Call AudioSource.PlayOneShot, X0, X1
	078 Return 
	079 Call 0x1B6FA1C

Method: System.Boolean IsSoundRunPlaying()

Disassembly:
	0x01D079A4 STR S10, [X31 + 0x40]
	0x01D079A8 CBNZ W8, 0x1D079B8
	0x01D079AC MOV X0, X20
	0x01D079B0 BL 0x1B6E7F0
	0x01D079B4 STRB W29, [X23 + 0x43F]
	0x01D079B8 CBZ X22, 0x1D087DC
	0x01D079BC LDR X8, [X20]
	0x01D079C0 MOVZ W23, 0x1
	0x01D079C4 LDR X8, [X8 + 0xB8]
	0x01D079C8 LDP S1, S2, [X8 + 0x4]
	0x01D079CC LDR V0, [X8]
	0x01D079D0 MOV X0, X22
	0x01D079D4 MOV X1, X31
	0x01D079D8 BL 0x3AF650C
	0x01D079DC B 0x1D078AC
	0x01D079E0 ADRP X8, 0x224A000
	0x01D079E4 LDR X8, [X8 + 0x158]
	0x01D079E8 LDR V12, [X31 + 0x50]
	0x01D079EC LDR V14, [X31 + 0x40]
	0x01D079F0 ADD X0, X31, 0x70
	0x01D079F4 LDR X1, [X8]
	0x01D079F8 STP S15, S12, [X31 + 0xD0]
	0x01D079FC STR S14, [X31 + 0xD8]
	0x01D07A00 BL 0x2A2FAB8
	0x01D07A04 LDR X8, [X19 + 0x1D0]
	0x01D07A08 LDR W29, [X31 + 0x30]
	0x01D07A0C CBZ X8, 0x1D087D8
	0x01D07A10 LDR W9, [X8 + 0x1C]
	0x01D07A14 ADD W9, W9, 0x1
	0x01D07A18 STP W31, W9, [X8 + 0x18]
	0x01D07A1C B 0x1D07A24
	0x01D07A20 MOV W25, W31
	0x01D07A24 CMP W28, 0x1
	0x01D07A28 B.LE 0x1D07A44
	0x01D07A2C SCVTF S0, W28
	0x01D07A30 FDIV S15, S15, S0
	0x01D07A34 FDIV S12, S12, S0
	0x01D07A38 FDIV S14, S14, S0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x251D000
	005 Move W8, [X20+1873]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2247000
	012 Move X0, [X0+1144]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1873], W8
	016 Move X0, [X19+48]
	017 Compare X0, 0
	018 JumpIfEqual {46}
	019 Move X20, 0x2247000
	020 Move X20, [X20+1144]
	021 Move X1, X31
	022 Call AudioSource.get_clip, X0
	023 Move X8, [X20]
	024 Move X20, X0
	025 Move W9, [X8+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {30}
	028 Move X0, X8
	029 Call 0x1B6F8F8
	030 Move X0, X20
	031 Move X1, X31
	032 Call Object.op_Implicit, X0
	033 Move X8, [X19+48]
	034 Compare X8, 0
	035 JumpIfEqual {46}
	036 Move W19, W0
	037 Move X0, X8
	038 Move X1, X31
	039 Call AudioSource.get_isPlaying, X0
	040 NotImplemented "Instruction EON not yet implemented."
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 And W0, W8, 1
	044 Move X30, [X31+32]
	045 Return X0
	046 Call 0x1B6FA1C

Method: System.Void StopSoundWalk()

Disassembly:
	0x01D05590 ADRP X0, 0x2248000
	0x01D05594 LDR X0, [X0 + 0x478]
	0x01D05598 BL 0x1B6E7F0
	0x01D0559C ADRP X0, 0x224C000
	0x01D055A0 LDR X0, [X0 + 0xB8]
	0x01D055A4 BL 0x1B6E7F0
	0x01D055A8 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call AudioSource.Stop, X0
	008 Return 
	009 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01D07A3C STP S15, S12, [X31 + 0xD0]
	0x01D07A40 STR S14, [X31 + 0xD8]

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x01D07A44 LDR X0, [X19 + 0x28]
	0x01D07A48 CBZ X0, 0x1D087D8
	0x01D07A4C LDP S8, S9, [X19 + 0x80]
	0x01D07A50 LDR V10, [X19 + 0x88]
	0x01D07A54 MOV X1, X31
	0x01D07A58 BL 0x3AF7C90
	0x01D07A5C LDR X0, [X19 + 0x28]
	0x01D07A60 CBZ X0, 0x1D087D8
	0x01D07A64 MOV X1, X31
	0x01D07A68 MOV V11.16B, V0.16B
	0x01D07A6C BL 0x3A9B084
	0x01D07A70 CBZ X0, 0x1D087D8
	0x01D07A74 MOV X1, X31
	0x01D07A78 BL 0x3AA7658
	0x01D07A7C LDP S3, S5, [X19 + 0x80]
	0x01D07A80 LDR V6, [X19 + 0x88]
	0x01D07A84 LDR V7, [X19 + 0xB8]
	0x01D07A88 FADD S0, S0, S15
	0x01D07A8C FADD S1, S1, S12
	0x01D07A90 FADD S2, S2, S14
	0x01D07A94 FSUB S4, S0, S3
	0x01D07A98 FSUB S5, S1, S5
	0x01D07A9C FSUB S6, S2, S6
	0x01D07AA0 ADD X1, X31, 0xE0
	0x01D07AA4 ADD X3, X31, 0xA0
	0x01D07AA8 MOV X0, X19
	0x01D07AAC MOV V0.16B, V8.16B
	0x01D07AB0 MOV V1.16B, V9.16B
	0x01D07AB4 MOV V2.16B, V10.16B
	0x01D07AB8 MOV V3.16B, V11.16B
	0x01D07ABC MOV W2, W31
	0x01D07AC0 BL 0x1D08B3C
	0x01D07AC4 TBZ X0, 0x0, 0x1D07CB0
	0x01D07AC8 LDP S0, S1, [X31 + 0xE0]
	0x01D07ACC LDR V2, [X31 + 0xE8]
	0x01D07AD0 LDP S11, S12, [X19 + 0x80]
	0x01D07AD4 LDR V13, [X19 + 0x88]
	0x01D07AD8 FSUB S8, S0, S11
	0x01D07ADC FSUB S9, S1, S12

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x251D000
	007 Move X22, 0x224B000
	008 Move X19, 0x224B000
	009 Move X20, 0x224B000
	010 Move W8, [X21+1874]
	011 Move X22, [X22+320]
	012 Move X19, [X19+144]
	013 Move X20, [X20+328]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x224B000
	019 Move X0, [X0+144]
	020 Call 0x1B6F7F0
	021 Move X0, 0x224B000
	022 Move X0, [X0+328]
	023 Call 0x1B6F7F0
	024 Move X0, 0x224B000
	025 Move X0, [X0+320]
	026 Call 0x1B6F7F0
	027 Move W8, 1
	028 Move [X21+1874], W8
	029 Move X0, [X22]
	030 Move X1, X31
	031 Call Animator.StringToHash, X0
	032 Move X8, [X19]
	033 Move X1, X31
	034 Move X8, [X8+184]
	035 Move [X8], W0
	036 Move X0, [X20]
	037 Call Animator.StringToHash, X0
	038 Move X8, [X19]
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X8, [X8+184]
	044 Move [X8+4], W0
	045 Move X30, [X31+48]
	046 Return 

