Type: AnimalCompany.PrototypeOne.MobView

Method: System.Boolean get_isWalking()

Disassembly:
	0x01E1A05C MOV X0, X19
	0x01E1A060 BL 0x1E192DC
	0x01E1A064 AND W8, W0, 0x1
	0x01E1A068 MOV X0, X19
	0x01E1A06C STRB W8, [X19 + 0xA4]
	0x01E1A070 BL 0x1E193A8
	0x01E1A074 AND W8, W0, 0x1
	0x01E1A078 STRB W8, [X19 + 0xA5]
	0x01E1A07C LDP X30, X19, [X31], #0x10
	0x01E1A080 RET
	0x01E1A084 STR X30, [X31 - 0x20]!
	0x01E1A088 STP X20, X19, [X31 + 0x10]
	0x01E1A08C ADRP X20, 0x25BE000
	0x01E1A090 LDRB W8, [X20 + 0xE13]
	0x01E1A094 MOV X19, X0
	0x01E1A098 TBNZ X8, 0x0, 0x1E1A0B0
	0x01E1A09C ADRP X0, 0x22DD000
	0x01E1A0A0 LDR X0, [X0 + 0x858]
	0x01E1A0A4 BL 0x1C16CF4
	0x01E1A0A8 MOVZ W8, 0x1
	0x01E1A0AC STRB W8, [X20 + 0xE13]
	0x01E1A0B0 CBZ X19, 0x1E1A108
	0x01E1A0B4 ADRP X9, 0x22DD000
	0x01E1A0B8 LDR X9, [X9 + 0x858]
	0x01E1A0BC MOVZ W8, 0x1
	0x01E1A0C0 STRB W8, [X19 + 0x58]
	0x01E1A0C4 LDR X8, [X19]
	0x01E1A0C8 LDR X1, [X9]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25BF000
	006 Move X20, 0x22E1000
	007 Move W8, [X21+3605]
	008 Move X20, [X20+952]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22E1000
	015 Move X0, [X0+952]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3605], W8
	019 Move X0, [X20]
	020 Move X19, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Compare X19, 0
	026 JumpIfEqual {38}
	027 Move X8, [X20]
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, X31
	032 Move X8, [X8+184]
	033 Move W1, [X8]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call Animator.GetBool, X0, X1
	037 Return X0
	038 Call 0x1C17F20

Method: System.Void SetWalk(System.Boolean isWalking)

Disassembly:
	0x01E17790 BL 0x1E16790
	0x01E17794 MOV X0, X19
	0x01E17798 MOV W1, W31
	0x01E1779C BL 0x1E166E8
	0x01E177A0 LDR X0, [X19 + 0x90]
	0x01E177A4 CBZ X0, 0x1E17810
	0x01E177A8 MOV W1, W31
	0x01E177AC MOV X2, X31
	0x01E177B0 BL 0x3BE1AC4
	0x01E177B4 LDR X20, [X19 + 0x90]
	0x01E177B8 CBZ X20, 0x1E17810
	0x01E177BC MOV X0, X20
	0x01E177C0 MOV X1, X31
	0x01E177C4 BL 0x3C32E90
	0x01E177C8 CBZ X0, 0x1E17810
	0x01E177CC MOV X1, X31
	0x01E177D0 BL 0x3C3F58C
	0x01E177D4 MOV X0, X20
	0x01E177D8 MOV X1, X31
	0x01E177DC BL 0x3BE13F8
	0x01E177E0 MOV X0, X31
	0x01E177E4 STR W31, [X19 + 0xF8]
	0x01E177E8 BL 0x3C3C6C4
	0x01E177EC STR S0, [X19 + 0x100]
	0x01E177F0 LDP X20, X19, [X31 + 0x50]
	0x01E177F4 LDP X22, X21, [X31 + 0x40]
	0x01E177F8 LDR X30, [X31 + 0x38]
	0x01E177FC LDP D9, D8, [X31 + 0x28]
	0x01E17800 LDP D11, D10, [X31 + 0x18]
	0x01E17804 LDP D13, D12, [X31 + 0x8]
	0x01E17808 LDR V14, [X31], #0x60
	0x01E1780C RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x25C2000
	007 Move X21, 0x22E4000
	008 Move W8, [X22+3606]
	009 Move X21, [X21+952]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x22E4000
	017 Move X0, [X0+952]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3606], W8
	021 Move X0, [X21]
	022 Move X20, [X20+32]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Compare X20, 0
	028 JumpIfEqual {42}
	029 Move X8, [X21]
	030 And W2, W19, 1
	031 Move X0, X20
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X8, [X8+184]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X3, X31
	038 Move W1, [X8]
	039 Move X30, [X31+48]
	040 Call Animator.SetBool, X0, X1, X2
	041 Return 
	042 Call 0x1C17F20

Method: System.Void SetWalkSpeed(System.Single speed)

Disassembly:
	0x01E18DC0 FMUL S0, S11, S11
	0x01E18DC4 FMUL S1, S9, S9
	0x01E18DC8 FADD S0, S0, S1
	0x01E18DCC FMUL S1, S8, S8
	0x01E18DD0 FADD S0, S1, S0
	0x01E18DD4 FSQRT S0, S0
	0x01E18DD8 FCMP S0, S14
	0x01E18DDC B.PL 0x1E18E50
	0x01E18DE0 LDR X0, [X19 + 0x98]
	0x01E18DE4 CBZ X0, 0x1E18E70
	0x01E18DE8 MOV W1, W31
	0x01E18DEC BL 0x1E16790
	0x01E18DF0 MOV X0, X19
	0x01E18DF4 MOV W1, W31
	0x01E18DF8 BL 0x1E18144
	0x01E18DFC LDR V0, [X19 + 0xDC]
	0x01E18E00 LDR X20, [X19 + 0x90]
	0x01E18E04 STR W31, [X19 + 0xF0]
	0x01E18E08 STR S0, [X19 + 0xF4]
	0x01E18E0C CBZ X20, 0x1E18E70
	0x01E18E10 MOV X0, X20
	0x01E18E14 MOV X1, X31
	0x01E18E18 BL 0x3C32E90
	0x01E18E1C CBZ X0, 0x1E18E70
	0x01E18E20 MOV X1, X31
	0x01E18E24 BL 0x3C3F58C
	0x01E18E28 MOV X0, X20
	0x01E18E2C LDP X20, X19, [X31 + 0x60]
	0x01E18E30 LDP X22, X21, [X31 + 0x50]
	0x01E18E34 LDR X30, [X31 + 0x40]
	0x01E18E38 LDP D9, D8, [X31 + 0x30]
	0x01E18E3C LDP D11, D10, [X31 + 0x20]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25C1000
	007 Move X20, 0x22E3000
	008 Move W8, [X21+3607]
	009 Move X20, [X20+952]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x22E3000
	017 Move X0, [X0+952]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3607], W8
	021 Move X0, [X20]
	022 Move X19, [X19+32]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Compare X19, 0
	028 JumpIfEqual {42}
	029 Move X8, [X20]
	030 Move X0, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X30, [X31+16]
	034 Move X21, [X31+24]
	035 Move X8, [X8+184]
	036 Move V0, V8
	037 Move X2, X31
	038 Move W1, [X8+4]
	039 Move V8, [X31+48]
	040 Call Animator.SetFloat, X0, X1, V0
	041 Return 
	042 Call 0x1C17F20

Method: System.Void PlaySoundNotice()

Disassembly:
	0x01E1843C MOV V3.16B, V10.16B
	0x01E18440 MOV W0, W20
	0x01E18444 MOV X1, X31
	0x01E18448 BL 0x3C8D090
	0x01E1844C CBZ X0, 0x1E185AC
	0x01E18450 LDR X8, [X0 + 0x18]
	0x01E18454 MOV X20, X0
	0x01E18458 CBZ X8, 0x1E18558
	0x01E1845C LDR W9, [X19 + 0x80]
	0x01E18460 CMP W9, 0x1
	0x01E18464 B.EQ 0x1E18570
	0x01E18468 CMP W8, 0x1
	0x01E1846C B.LT 0x1E18558
	0x01E18470 ADRP X23, 0x22E0000
	0x01E18474 LDR X23, [X23 + 0x5C0]
	0x01E18478 MOV X21, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+40]
	005 Compare X0, 0
	006 JumpIfEqual {25}
	007 Move X1, X31
	008 Call AudioSource.get_isPlaying, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {16}
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return 
	016 Move X0, [X19+40]
	017 Compare X0, 0
	018 JumpIfEqual {25}
	019 Move X1, [X19+56]
	020 Move X2, X31
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Call AudioSource.PlayOneShot, X0, X1
	024 Return 
	025 Call 0x1C17F20

Method: System.Void PlaySoundWalk()

Disassembly:
	0x01E18EC8 LDR W8, [X0 + 0xE0]
	0x01E18ECC CBNZ W8, 0x1E18ED4

ISIL:
	001 Move X1, [X0+64]
	002 Call MobView.PlaySound, X0, X1
	003 Return 

Method: System.Void PlaySoundRun()

Disassembly:
	0x01E18ED0 BL 0x1C16DFC
	0x01E18ED4 MOV X0, X20

ISIL:
	001 Move X1, [X0+72]
	002 Call MobView.PlaySound, X0, X1
	003 Return 

Method: System.Void PlaySound(UnityEngine.AudioClip clip)

Disassembly:
	0x01E1B194 FSUB S5, S8, S10
	0x01E1B198 FADD V4.2S, V16.2S, V4.2S
	0x01E1B19C ADD X21, X19, 0x164
	0x01E1B1A0 FADD S6, S5, S6
	0x01E1B1A4 MOV S5, V4.S[1]
	0x01E1B1A8 ADD X1, X31, 0xF0
	0x01E1B1AC MOVZ W2, 0x1
	0x01E1B1B0 MOV X0, X19
	0x01E1B1B4 MOV X3, X21
	0x01E1B1B8 BL 0x1E1C8AC
	0x01E1B1BC TBZ X0, 0x0, 0x1E1B264
	0x01E1B1C0 MOV X0, X21
	0x01E1B1C4 MOV X1, X31
	0x01E1B1C8 BL 0x3C8E770
	0x01E1B1CC CBZ X0, 0x1E1B250
	0x01E1B1D0 MOV X22, X0
	0x01E1B1D4 MOV X0, X21
	0x01E1B1D8 MOV X1, X31
	0x01E1B1DC BL 0x3C8E678
	0x01E1B1E0 FNEG S0, S0
	0x01E1B1E4 FNEG S1, S1
	0x01E1B1E8 FNEG S2, S2
	0x01E1B1EC MOVZ W8, 0x447A0000
	0x01E1B1F0 FMUL S0, S11, S0
	0x01E1B1F4 FMUL S1, S11, S1
	0x01E1B1F8 FMUL S2, S11, S2
	0x01E1B1FC FMOV S3, W8
	0x01E1B200 FMUL S0, S0, S3
	0x01E1B204 FMUL S1, S1, S3
	0x01E1B208 FMUL S2, S2, S3
	0x01E1B20C LDR V3, [X31 + 0x6]
	0x01E1B210 MOV X0, X21
	0x01E1B214 MOV X1, X31
	0x01E1B218 FMUL S9, S0, S3
	0x01E1B21C FMUL S10, S1, S3
	0x01E1B220 FMUL S11, S2, S3
	0x01E1B224 BL 0x3C8E66C
	0x01E1B228 MOV V3.16B, V0.16B
	0x01E1B22C MOV V4.16B, V1.16B
	0x01E1B230 MOV V5.16B, V2.16B
	0x01E1B234 MOV X0, X22
	0x01E1B238 MOV V0.16B, V9.16B
	0x01E1B23C MOV V1.16B, V10.16B
	0x01E1B240 MOV V2.16B, V11.16B
	0x01E1B244 MOV W1, W31
	0x01E1B248 MOV X2, X31
	0x01E1B24C BL 0x3C8F524
	0x01E1B250 LDRB W8, [X19 + 0x111]
	0x01E1B254 CBZ W8, 0x1E1BD24
	0x01E1B258 LDUR V9, [X19 + 0x74]
	0x01E1B25C LDR V10, [X19 + 0x7C]
	0x01E1B260 B 0x1E1BD84
	0x01E1B264 LDR V4, [X31 + 0x5]
	0x01E1B268 MOV W27, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25BE000
	006 Move W8, [X21+3608]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22D9000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3608], W8
	018 Move X0, [X20+48]
	019 Compare X0, 0
	020 JumpIfEqual {79}
	021 Move X21, 0x22D9000
	022 Move X21, [X21+1432]
	023 Move X1, X31
	024 Call AudioSource.get_clip, X0
	025 Move X8, [X21]
	026 Move X21, X0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1C17DFC
	032 Move X0, X21
	033 Move X1, X19
	034 Move X2, X31
	035 Call Object.op_Inequality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {54}
	040 Move X0, [X20+48]
	041 Compare X0, 0
	042 JumpIfEqual {79}
	043 Move X1, X31
	044 Call AudioSource.get_isPlaying, X0
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {54}
	049 Move X0, [X20+48]
	050 Compare X0, 0
	051 JumpIfEqual {79}
	052 Move X1, X31
	053 Call AudioSource.Stop, X0
	054 Move X0, [X20+48]
	055 Compare X0, 0
	056 JumpIfEqual {79}
	057 Move X1, X31
	058 Call AudioSource.get_isPlaying, X0
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {68}
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Return 
	068 Move X0, [X20+48]
	069 Compare X0, 0
	070 JumpIfEqual {79}
	071 Move X1, X19
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 Move X2, X31
	075 Move X30, [X31+32]
	076 Move X21, [X31+40]
	077 Call AudioSource.PlayOneShot, X0, X1
	078 Return 
	079 Call 0x1C17F20

Method: System.Boolean IsSoundRunPlaying()

Disassembly:
	0x01E1B26C MOV V8.16B, V12.16B
	0x01E1B270 MOV V10.16B, V4.16B
	0x01E1B274 FMOV V0.2S, 0x0
	0x01E1B278 TBNZ X28, 0x0, 0x1E1B284
	0x01E1B27C LDRB W8, [X19 + 0x110]
	0x01E1B280 CBZ W8, 0x1E1B2B0
	0x01E1B284 FMOV S9, 5
	0x00000000 INVALID
	0x01E1B28C FMUL S2, S15, S9
	0x01E1B290 FADD V4.2S, V4.2S, V1.2S
	0x01E1B294 FADD S12, S12, S2
	0x01E1B298 STR D4, [X31 + 0xE0]
	0x01E1B29C STR S12, [X31 + 0xE8]
	0x01E1B2A0 TBNZ X27, 0x0, 0x1E1B2B8
	0x01E1B2A4 LDRB W8, [X19 + 0x111]
	0x01E1B2A8 CBNZ W8, 0x1E1B2B8
	0x01E1B2AC B 0x1E1B2D8
	0x01E1B2B0 FMOV S9, W31
	0x01E1B2B4 TBZ X27, 0x0, 0x1E1B2A4
	0x01E1B2B8 FMOV S1, 5
	0x00000000 INVALID
	0x01E1B2C0 FMUL S2, S8, S1
	0x01E1B2C4 FADD V4.2S, V0.2S, V4.2S
	0x01E1B2C8 FADD S12, S2, S12
	0x01E1B2CC FADD S9, S9, S1
	0x01E1B2D0 STR D4, [X31 + 0xE0]
	0x01E1B2D4 STR S12, [X31 + 0xE8]
	0x01E1B2D8 LDR V8, [X19 + 0x1EC]
	0x01E1B2DC LDRB W8, [X25 + 0x783]
	0x01E1B2E0 LDR V10, [X19 + 0x1F0]
	0x01E1B2E4 STR V4, [X31 + 0x5]
	0x01E1B2E8 CBNZ W8, 0x1E1B304
	0x01E1B2EC ADRP X0, 0x22D8000
	0x01E1B2F0 LDR X0, [X0 + 0x5A0]
	0x01E1B2F4 BL 0x1C16CF4
	0x01E1B2F8 LDR V4, [X31 + 0x5]
	0x01E1B2FC MOVZ W8, 0x1
	0x01E1B300 STRB W8, [X25 + 0x783]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25BE000
	005 Move W8, [X20+3609]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22D9000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3609], W8
	016 Move X0, [X19+48]
	017 Compare X0, 0
	018 JumpIfEqual {46}
	019 Move X20, 0x22D9000
	020 Move X20, [X20+1432]
	021 Move X1, X31
	022 Call AudioSource.get_clip, X0
	023 Move X8, [X20]
	024 Move X20, X0
	025 Move W9, [X8+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {30}
	028 Move X0, X8
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Call Object.op_Implicit, X0
	033 Move X8, [X19+48]
	034 Compare X8, 0
	035 JumpIfEqual {46}
	036 Move W19, W0
	037 Move X0, X8
	038 Move X1, X31
	039 Call AudioSource.get_isPlaying, X0
	040 NotImplemented "Instruction EON not yet implemented."
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 And W0, W8, 1
	044 Move X30, [X31+32]
	045 Return X0
	046 Call 0x1C17F20

Method: System.Void StopSoundWalk()

Disassembly:
	0x01E18EAC ADRP X0, 0x22E2000
	0x01E18EB0 LDR X0, [X0 + 0x3E0]
	0x01E18EB4 BL 0x1C16CF4
	0x01E18EB8 MOVZ W8, 0x1
	0x01E18EBC STRB W8, [X21 + 0xE0A]
	0x01E18EC0 LDR X0, [X20]
	0x01E18EC4 LDR X20, [X19 + 0xF8]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call AudioSource.Stop, X0
	008 Return 
	009 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01E1B304 LDR X8, [X20]
	0x01E1B308 ADRP X9, 0xFFFFFFFFFECCE000

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x01E1B30C LDR V15, [X9 + 0xF20]
	0x01E1B310 LDR X8, [X8 + 0xB8]
	0x01E1B314 LDR V0, [X8]
	0x01E1B318 LDUR V1, [X8 + 0x4]
	0x01E1B31C FSUB S0, S8, S0
	0x01E1B320 FSUB V1.2S, V10.2S, V1.2S
	0x01E1B324 FMUL S0, S0, S0
	0x00000000 INVALID
	0x01E1B32C FADD S0, S0, S1
	0x01E1B330 MOV S1, V1.S[1]
	0x01E1B334 FADD S0, S1, S0
	0x01E1B338 FCMP S0, S15
	0x01E1B33C B.MI 0x1E1B350
	0x01E1B340 LDR W9, [X19 + 0x1F8]
	0x01E1B344 CMP W9, 0x0
	0x01E1B348 CSET W26, GT
	0x01E1B34C B 0x1E1B354
	0x01E1B350 MOV W26, W31
	0x01E1B354 LDR X0, [X19 + 0x1E0]
	0x01E1B358 CBZ X0, 0x1E1C3B8
	0x01E1B35C LDR W9, [X0 + 0x18]
	0x01E1B360 STR S15, [X31 + 0x40]
	0x01E1B364 CMP W9, 0x1
	0x01E1B368 B.LT 0x1E1B508
	0x01E1B36C ADRP X9, 0x22DF000
	0x01E1B370 LDR X9, [X9 + 0x4A0]
	0x01E1B374 ADRP X23, 0x22DF000
	0x01E1B378 ADRP X24, 0x22DF000
	0x01E1B37C LDR V10, [X8 + 0x8]
	0x01E1B380 LDR X1, [X9]
	0x01E1B384 LDR V11, [X8]
	0x01E1B388 LDR X23, [X23 + 0x488]
	0x01E1B38C LDR X24, [X24 + 0x480]
	0x01E1B390 ADD X8, X31, 0x130
	0x01E1B394 MOV W25, W26
	0x01E1B398 BL 0x311B570
	0x01E1B39C LDP V0, V1, [X31 + 0x130]
	0x01E1B3A0 LDR X8, [X31 + 0x150]
	0x01E1B3A4 MOV W22, W31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25BE000
	007 Move X22, 0x22E0000
	008 Move X19, 0x22E0000
	009 Move X20, 0x22E0000
	010 Move W8, [X21+3610]
	011 Move X22, [X22+1128]
	012 Move X19, [X19+952]
	013 Move X20, [X20+1136]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x22E0000
	019 Move X0, [X0+952]
	020 Call 0x1C17CF4
	021 Move X0, 0x22E0000
	022 Move X0, [X0+1136]
	023 Call 0x1C17CF4
	024 Move X0, 0x22E0000
	025 Move X0, [X0+1128]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3610], W8
	029 Move X0, [X22]
	030 Move X1, X31
	031 Call Animator.StringToHash, X0
	032 Move X8, [X19]
	033 Move X1, X31
	034 Move X8, [X8+184]
	035 Move [X8], W0
	036 Move X0, [X20]
	037 Call Animator.StringToHash, X0
	038 Move X8, [X19]
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X8, [X8+184]
	044 Move [X8+4], W0
	045 Move X30, [X31+48]
	046 Return 

