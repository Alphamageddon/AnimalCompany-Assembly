Type: AnimalCompany.PrototypeOne.MobControllerMine

Method: Fusion.TickTimer get_resetTimer()

Disassembly:
	0x01D068E8 ADRP X0, 0x2247000
	0x01D068EC LDR X0, [X0 + 0x478]
	0x01D068F0 BL 0x1B6E7F0
	0x01D068F4 MOVZ W8, 0x1
	0x01D068F8 STRB W8, [X21 + 0x750]
	0x01D068FC LDR X0, [X20 + 0x30]
	0x01D06900 CBZ X0, 0x1D069A0
	0x01D06904 ADRP X21, 0x2247000
	0x01D06908 LDR X21, [X21 + 0x478]
	0x01D0690C MOV X1, X31
	0x01D06910 BL 0x3A658D4
	0x01D06914 LDR X8, [X21]
	0x01D06918 MOV X21, X0
	0x01D0691C LDR W9, [X8 + 0xE0]
	0x01D06920 CBNZ W9, 0x1D0692C
	0x01D06924 MOV X0, X8
	0x01D06928 BL 0x1B6E8F8
	0x01D0692C MOV X0, X21
	0x01D06930 MOV X1, X19
	0x01D06934 MOV X2, X31
	0x01D06938 BL 0x3A9D6EC
	0x01D0693C TBZ X0, 0x0, 0x1D06964
	0x01D06940 LDR X0, [X20 + 0x30]
	0x01D06944 CBZ X0, 0x1D069A0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2248000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x224C000
	016 Move X0, [X0+192]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x224C000
	023 Move X0, [X0+200]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_resetTimer(Fusion.TickTimer value)

Disassembly:
	0x01D06948 MOV X1, X31
	0x01D0694C BL 0x3A65B14
	0x01D06950 TBZ X0, 0x0, 0x1D06964
	0x01D06954 LDR X0, [X20 + 0x30]
	0x01D06958 CBZ X0, 0x1D069A0
	0x01D0695C MOV X1, X31
	0x01D06960 BL 0x3A65A98
	0x01D06964 LDR X0, [X20 + 0x30]
	0x01D06968 CBZ X0, 0x1D069A0
	0x01D0696C MOV X1, X31
	0x01D06970 BL 0x3A65B14
	0x01D06974 TBZ X0, 0x0, 0x1D06984
	0x01D06978 LDP X20, X19, [X31 + 0x10]
	0x01D0697C LDP X30, X21, [X31], #0x20
	0x01D06980 RET
	0x01D06984 LDR X0, [X20 + 0x30]
	0x01D06988 CBZ X0, 0x1D069A0
	0x01D0698C MOV X1, X19
	0x01D06990 LDP X20, X19, [X31 + 0x10]
	0x01D06994 MOV X2, X31
	0x01D06998 LDP X30, X21, [X31], #0x20
	0x01D0699C B 0x3A65994
	0x01D069A0 BL 0x1B6EA1C
	0x01D069A4 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2248000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x224C000
	016 Move X0, [X0+192]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x224C000
	023 Move X0, [X0+208]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Boolean get_isStepped()

Disassembly:
	0x01D069A8 STP X20, X19, [X31 + 0x10]
	0x01D069AC ADRP X20, 0x251D000
	0x01D069B0 LDRB W8, [X20 + 0x751]
	0x01D069B4 MOV X19, X0
	0x01D069B8 TBNZ X8, 0x0, 0x1D069D0
	0x01D069BC ADRP X0, 0x2247000
	0x01D069C0 LDR X0, [X0 + 0x478]
	0x01D069C4 BL 0x1B6E7F0
	0x01D069C8 MOVZ W8, 0x1
	0x01D069CC STRB W8, [X20 + 0x751]
	0x01D069D0 LDR X0, [X19 + 0x30]
	0x01D069D4 CBZ X0, 0x1D06A38
	0x01D069D8 ADRP X20, 0x2247000
	0x01D069DC LDR X20, [X20 + 0x478]
	0x01D069E0 MOV X1, X31
	0x01D069E4 BL 0x3A658D4
	0x01D069E8 LDR X8, [X20]
	0x01D069EC MOV X20, X0
	0x01D069F0 LDR W9, [X8 + 0xE0]
	0x01D069F4 CBNZ W9, 0x1D06A00
	0x01D069F8 MOV X0, X8
	0x01D069FC BL 0x1B6E8F8
	0x01D06A00 MOV X0, X20
	0x01D06A04 MOV X1, X31
	0x01D06A08 BL 0x3AA0BFC
	0x01D06A0C LDR X8, [X19 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+4]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2248000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x224C000
	018 Move X0, [X0+216]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x224C000
	025 Move X0, [X0+224]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set_isStepped(System.Boolean value)

Disassembly:
	0x01D06A10 CBZ X8, 0x1D06A38
	0x01D06A14 MOV W19, W0
	0x01D06A18 MOV X0, X8
	0x01D06A1C MOV X1, X31
	0x01D06A20 BL 0x3A65B14
	0x01D06A24 EON W8, W19, W0, 0x0
	0x01D06A28 LDP X20, X19, [X31 + 0x10]
	0x01D06A2C AND W0, W8, 0x1
	0x01D06A30 LDR X30, [X31], #0x20
	0x01D06A34 RET
	0x01D06A38 BL 0x1B6EA1C
	0x01D06A3C MOV X1, X31
	0x01D06A40 B 0x3A9EEE4
	0x01D06A44 STR X30, [X31 - 0x30]!
	0x01D06A48 STP X22, X21, [X31 + 0x10]
	0x01D06A4C STP X20, X19, [X31 + 0x20]
	0x01D06A50 ADRP X21, 0x251D000
	0x01D06A54 ADRP X22, 0x224B000
	0x01D06A58 ADRP X19, 0x224B000
	0x01D06A5C ADRP X20, 0x224B000
	0x01D06A60 LDRB W8, [X21 + 0x752]
	0x01D06A64 LDR X22, [X22 + 0x140]
	0x01D06A68 LDR X19, [X19 + 0x90]
	0x01D06A6C LDR X20, [X20 + 0x148]
	0x01D06A70 TBNZ X8, 0x0, 0x1D06AA0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+4], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x2248000
	012 Move X0, [X0+1168]
	013 Call 0x1B6F804
	014 Call 0x1B6FA0C
	015 Move X19, X0
	016 Move X0, 0x224C000
	017 Move X0, [X0+216]
	018 Call 0x1B6F804
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x224C000
	024 Move X0, [X0+232]
	025 Call 0x1B6F804
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1B6F8E8

Method: System.Boolean get_isExploded()

Disassembly:
	0x01D06A74 ADRP X0, 0x224B000
	0x01D06A78 LDR X0, [X0 + 0x90]
	0x01D06A7C BL 0x1B6E7F0
	0x01D06A80 ADRP X0, 0x224B000
	0x01D06A84 LDR X0, [X0 + 0x148]
	0x01D06A88 BL 0x1B6E7F0
	0x01D06A8C ADRP X0, 0x224B000
	0x01D06A90 LDR X0, [X0 + 0x140]
	0x01D06A94 BL 0x1B6E7F0
	0x01D06A98 MOVZ W8, 0x1
	0x01D06A9C STRB W8, [X21 + 0x752]
	0x01D06AA0 LDR X0, [X22]
	0x01D06AA4 MOV X1, X31
	0x01D06AA8 BL 0x3A5EC3C
	0x01D06AAC LDR X8, [X19]
	0x01D06AB0 MOV X1, X31
	0x01D06AB4 LDR X8, [X8 + 0xB8]
	0x01D06AB8 STR W0, [X8]
	0x01D06ABC LDR X0, [X20]
	0x01D06AC0 BL 0x3A5EC3C
	0x01D06AC4 LDR X8, [X19]
	0x01D06AC8 LDP X20, X19, [X31 + 0x20]
	0x01D06ACC LDP X22, X21, [X31 + 0x10]
	0x01D06AD0 LDR X8, [X8 + 0xB8]
	0x01D06AD4 STR W0, [X8 + 0x4]
	0x01D06AD8 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+8]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2248000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x224C000
	018 Move X0, [X0+240]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x224C000
	025 Move X0, [X0+248]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set_isExploded(System.Boolean value)

Disassembly:
	0x01D06ADC RET
	0x01D06AE0 STR X30, [X31 - 0x20]!
	0x01D06AE4 STP X20, X19, [X31 + 0x10]
	0x01D06AE8 ADRP X19, 0x251D000
	0x01D06AEC ADRP X20, 0x2248000
	0x01D06AF0 LDRB W8, [X19 + 0x753]
	0x01D06AF4 LDR X20, [X20 + 0xA80]
	0x01D06AF8 TBNZ X8, 0x0, 0x1D06B10
	0x01D06AFC ADRP X0, 0x2248000
	0x01D06B00 LDR X0, [X0 + 0xA80]
	0x01D06B04 BL 0x1B6E7F0
	0x01D06B08 MOVZ W8, 0x1
	0x01D06B0C STRB W8, [X19 + 0x753]
	0x01D06B10 LDR X8, [X20]
	0x01D06B14 LDP X20, X19, [X31 + 0x10]
	0x01D06B18 LDR X8, [X8 + 0xB8]
	0x01D06B1C LDR X0, [X8]
	0x01D06B20 LDR X30, [X31], #0x20
	0x01D06B24 RET
	0x01D06B28 STR X30, [X31 - 0x30]!
	0x01D06B2C STP X22, X21, [X31 + 0x10]
	0x01D06B30 STP X20, X19, [X31 + 0x20]
	0x01D06B34 ADRP X20, 0x251D000
	0x01D06B38 ADRP X22, 0x2248000
	0x01D06B3C ADRP X21, 0x2247000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+8], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x2248000
	012 Move X0, [X0+1168]
	013 Call 0x1B6F804
	014 Call 0x1B6FA0C
	015 Move X19, X0
	016 Move X0, 0x224C000
	017 Move X0, [X0+240]
	018 Call 0x1B6F804
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x224C000
	024 Move X0, [X0+256]
	025 Call 0x1B6F804
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1B6F8E8

Method: System.Collections.Generic.IEnumerable`1<AnimalCompany.PrototypeOne.MobControllerMine> get_allMines()

Disassembly:
	0x01D06B40 LDRB W8, [X20 + 0x754]
	0x01D06B44 LDR X22, [X22 + 0xA80]
	0x01D06B48 LDR X21, [X21 + 0x478]
	0x01D06B4C MOV X19, X0
	0x01D06B50 TBNZ X8, 0x0, 0x1D06B74
	0x01D06B54 ADRP X0, 0x2247000
	0x01D06B58 LDR X0, [X0 + 0x478]
	0x01D06B5C BL 0x1B6E7F0
	0x01D06B60 ADRP X0, 0x2248000
	0x01D06B64 LDR X0, [X0 + 0xA80]
	0x01D06B68 BL 0x1B6E7F0
	0x01D06B6C MOVZ W8, 0x1
	0x01D06B70 STRB W8, [X20 + 0x754]
	0x01D06B74 LDR X8, [X22]
	0x01D06B78 LDR X0, [X21]
	0x01D06B7C LDR X8, [X8 + 0xB8]
	0x01D06B80 LDR W9, [X0 + 0xE0]
	0x01D06B84 LDR X20, [X8]
	0x01D06B88 CBNZ W9, 0x1D06B90
	0x01D06B8C BL 0x1B6E8F8
	0x01D06B90 MOV X0, X20
	0x01D06B94 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x251E000
	005 Move X19, 0x2249000
	006 Move W8, [X20+1859]
	007 Move X19, [X19+3440]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2249000
	013 Move X0, [X0+3440]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1859], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1B6F8F8
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void OnDestroy()

Disassembly:
	0x01D06B98 MOV X2, X31
	0x01D06B9C BL 0x3A9D6EC
	0x01D06BA0 TBZ X0, 0x0, 0x1D06C08
	0x01D06BA4 LDR X8, [X22]
	0x01D06BA8 LDR X0, [X21]
	0x01D06BAC LDR X8, [X8 + 0xB8]
	0x01D06BB0 LDR W9, [X0 + 0xE0]
	0x01D06BB4 LDR X20, [X8]
	0x01D06BB8 CBNZ W9, 0x1D06BC0
	0x01D06BBC BL 0x1B6E8F8
	0x01D06BC0 MOV X0, X20
	0x01D06BC4 MOV X1, X19
	0x01D06BC8 MOV X2, X31
	0x01D06BCC BL 0x3A9D6EC
	0x01D06BD0 TBZ X0, 0x0, 0x1D06C08
	0x01D06BD4 MOV X0, X19
	0x01D06BD8 MOV X1, X31
	0x01D06BDC BL 0x3A9B0C0
	0x01D06BE0 LDR X8, [X21]
	0x01D06BE4 MOV X20, X0
	0x01D06BE8 LDR W9, [X8 + 0xE0]
	0x01D06BEC CBNZ W9, 0x1D06BF8
	0x01D06BF0 MOV X0, X8
	0x01D06BF4 BL 0x1B6E8F8
	0x01D06BF8 MOV X0, X20
	0x01D06BFC MOV X1, X31
	0x01D06C00 BL 0x3AA15F4
	0x01D06C04 B 0x1D06C14
	0x01D06C08 LDR X8, [X22]
	0x01D06C0C LDR X8, [X8 + 0xB8]
	0x01D06C10 STR X19, [X8]
	0x01D06C14 MOV X0, X19
	0x01D06C18 LDP X20, X19, [X31 + 0x20]
	0x01D06C1C LDP X22, X21, [X31 + 0x10]
	0x01D06C20 LDR X30, [X31], #0x30
	0x01D06C24 B 0x1D06C28
	0x01D06C28 STR X30, [X31 - 0x30]!
	0x01D06C2C STP X22, X21, [X31 + 0x10]
	0x01D06C30 STP X20, X19, [X31 + 0x20]
	0x01D06C34 ADRP X21, 0x251D000
	0x01D06C38 ADRP X22, 0x2248000
	0x01D06C3C ADRP X20, 0x2249000
	0x01D06C40 LDRB W8, [X21 + 0x755]
	0x01D06C44 LDR X22, [X22 + 0x298]
	0x01D06C48 LDR X20, [X20 + 0x2D0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x251E000
	006 Move X21, 0x2249000
	007 Move W8, [X20+1860]
	008 Move X21, [X21+448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x224C000
	015 Move X0, [X0+264]
	016 Call 0x1B6F7F0
	017 Move X0, 0x2249000
	018 Move X0, [X0+3440]
	019 Call 0x1B6F7F0
	020 Move X0, 0x2249000
	021 Move X0, [X0+448]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X20+1860], W8
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1B6F8F8
	030 Compare X19, 0
	031 JumpIfEqual {57}
	032 Move W8, [X19+48]
	033 Move X20, 0x2249000
	034 Move X20, [X20+3440]
	035 Or W8, W8, 8
	036 Move [X19+48], W8
	037 Move X0, [X20]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1B6F8F8
	042 Move X0, [X20]
	043 Move X8, [X0+184]
	044 Move X0, [X8+24]
	045 Compare X0, 0
	046 JumpIfEqual {57}
	047 Move X8, 0x224C000
	048 Move X8, [X8+264]
	049 Move X1, X19
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X2, [X8]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Call HashSet`1<Object>.Remove, X0, X1
	056 Return 
	057 Call 0x1B6FA1C

Method: System.Void Spawned()

Disassembly:
	0x01D06C4C MOV X19, X0
	0x01D06C50 TBNZ X8, 0x0, 0x1D06C74
	0x01D06C54 ADRP X0, 0x2248000
	0x01D06C58 LDR X0, [X0 + 0x298]
	0x01D06C5C BL 0x1B6E7F0
	0x01D06C60 ADRP X0, 0x2249000
	0x01D06C64 LDR X0, [X0 + 0x2D0]
	0x01D06C68 BL 0x1B6E7F0
	0x01D06C6C MOVZ W8, 0x1
	0x01D06C70 STRB W8, [X21 + 0x755]
	0x01D06C74 LDR X1, [X22]
	0x01D06C78 MOV X0, X19
	0x01D06C7C BL 0x208FDE8
	0x01D06C80 STR X0, [X19 + 0x90]
	0x01D06C84 LDR W1, [X19 + 0x98]
	0x01D06C88 LDR X0, [X20]
	0x01D06C8C BL 0x1B6E868
	0x01D06C90 LDR X8, [X19 + 0x38]
	0x01D06C94 STR X0, [X19 + 0xC0]
	0x01D06C98 CBZ X8, 0x1D06D38
	0x01D06C9C MOV X0, X8
	0x01D06CA0 MOV X1, X31
	0x01D06CA4 BL 0x3A9B084
	0x01D06CA8 CBZ X0, 0x1D06D38
	0x01D06CAC MOV X1, X31
	0x01D06CB0 BL 0x3AA7658
	0x01D06CB4 LDR X0, [X19 + 0x40]
	0x01D06CB8 STP S0, S1, [X19 + 0x68]
	0x01D06CBC STR S2, [X19 + 0x70]
	0x01D06CC0 CBZ X0, 0x1D06D38
	0x01D06CC4 MOV X1, X31
	0x01D06CC8 BL 0x3A9B084
	0x01D06CCC CBZ X0, 0x1D06D38
	0x01D06CD0 MOV X1, X31
	0x01D06CD4 BL 0x3AA7658
	0x01D06CD8 LDR X0, [X19 + 0x28]
	0x01D06CDC STP S0, S1, [X19 + 0x74]
	0x01D06CE0 STR S2, [X19 + 0x7C]
	0x01D06CE4 CBZ X0, 0x1D06D38
	0x01D06CE8 MOV X1, X31
	0x01D06CEC BL 0x3A9B084
	0x01D06CF0 CBZ X0, 0x1D06D38
	0x01D06CF4 MOV X1, X31
	0x01D06CF8 BL 0x3AA7658
	0x01D06CFC MOV X0, X19
	0x01D06D00 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x251E000
	006 Move X21, 0x2249000
	007 Move W8, [X20+1861]
	008 Move X21, [X21+3440]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x224C000
	015 Move X0, [X0+272]
	016 Call 0x1B6F7F0
	017 Move X0, 0x2249000
	018 Move X0, [X0+3440]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X20+1861], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call NetworkBehaviour.Spawned, X0
	025 Move X0, [X21]
	026 Move X20, [X19+152]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1B6F8F8
	031 Move X0, [X21]
	032 Compare X20, 0
	033 JumpIfEqual {58}
	034 Move X8, [X0+184]
	035 Move X0, X20
	036 Move X1, X31
	037 Move S1, [X8+4]
	038 Move S2, [X8+8]
	039 Move V0, [X8]
	040 Call Transform.set_localPosition, X0, X1
	041 Move X0, X19
	042 Call MobControllerMine.HandleIsExplodedChanged, X0
	043 Move X8, [X21]
	044 Move X8, [X8+184]
	045 Move X0, [X8+24]
	046 Compare X0, 0
	047 JumpIfEqual {58}
	048 Move X8, 0x224C000
	049 Move X8, [X8+272]
	050 Move X1, X19
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X2, [X8]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Call HashSet`1<Object>.Add, X0, X1
	057 Return 
	058 Call 0x1B6FA1C

Method: System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)

Disassembly:
	0x01D06D30 LDR X30, [X31], #0x30
	0x01D06D34 RET
	0x01D06D38 BL 0x1B6EA1C
	0x01D06D3C SUB X31, X31, 0x70
	0x01D06D40 STP D15, D14, [X31 + 0x10]
	0x01D06D44 STP D13, D12, [X31 + 0x20]
	0x01D06D48 STP D11, D10, [X31 + 0x30]
	0x01D06D4C STP D9, D8, [X31 + 0x40]
	0x01D06D50 STP X30, X21, [X31 + 0x50]
	0x01D06D54 STP X20, X19, [X31 + 0x60]
	0x01D06D58 LDR X1, [X0 + 0x50]
	0x01D06D5C LDR V0, [X0 + 0x100]
	0x01D06D60 LDR V1, [X0 + 0x104]
	0x01D06D64 LDR V2, [X0 + 0x108]
	0x01D06D68 MOV X19, X0
	0x01D06D6C BL 0x1D06F94
	0x01D06D70 LDR X0, [X19 + 0x28]
	0x01D06D74 CBZ X0, 0x1D06F90
	0x01D06D78 MOV X1, X31
	0x01D06D7C MOV V8.16B, V0.16B
	0x01D06D80 MOV V9.16B, V1.16B
	0x01D06D84 MOV V10.16B, V2.16B
	0x01D06D88 BL 0x3A9B084
	0x01D06D8C CBZ X0, 0x1D06F90
	0x01D06D90 MOV X1, X31
	0x01D06D94 BL 0x3AA7658
	0x01D06D98 ADRP X20, 0x251D000
	0x01D06D9C LDRB W8, [X20 + 0x440]
	0x01D06DA0 MOV V11.16B, V0.16B
	0x01D06DA4 MOV V12.16B, V1.16B
	0x01D06DA8 MOV V13.16B, V2.16B
	0x01D06DAC CBNZ W8, 0x1D06DC4
	0x01D06DB0 ADRP X0, 0x2247000
	0x01D06DB4 LDR X0, [X0 + 0x488]
	0x01D06DB8 BL 0x1B6E7F0
	0x01D06DBC MOVZ W8, 0x1
	0x01D06DC0 STRB W8, [X20 + 0x440]
	0x01D06DC4 ADRP X20, 0x2247000
	0x01D06DC8 LDR X20, [X20 + 0x488]
	0x01D06DCC FSUB S11, S8, S11
	0x01D06DD0 FSUB S9, S9, S12

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x251E000
	008 Move X22, 0x2249000
	009 Move W8, [X23+1862]
	010 Move X22, [X22+3440]
	011 Move W21, W2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x224C000
	019 Move X0, [X0+264]
	020 Call 0x1B6F7F0
	021 Move X0, 0x2249000
	022 Move X0, [X0+3440]
	023 Call 0x1B6F7F0
	024 Move W8, 1
	025 Move [X23+1862], W8
	026 And W2, W21, 1
	027 Move X0, X19
	028 Move X1, X20
	029 Move X3, X31
	030 Call NetworkBehaviour.Despawned, X0, X1, X2
	031 Move X0, [X22]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1B6F8F8
	036 Move X0, [X22]
	037 Move X8, [X0+184]
	038 Move X0, [X8+24]
	039 Compare X0, 0
	040 JumpIfEqual {53}
	041 Move X8, 0x224C000
	042 Move X8, [X8+264]
	043 Move X1, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X2, [X8]
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Call HashSet`1<Object>.Remove, X0, X1
	052 Return 
	053 Call 0x1B6FA1C

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01D06DD4 FSUB S8, S10, S13
	0x01D06DD8 LDR X0, [X20]
	0x01D06DDC LDR W8, [X0 + 0xE0]
	0x01D06DE0 CBNZ W8, 0x1D06DE8
	0x01D06DE4 BL 0x1B6E8F8
	0x01D06DE8 FMUL S0, S11, S11
	0x01D06DEC FMUL S1, S9, S9
	0x01D06DF0 LDR V2, [X19 + 0x9C]
	0x01D06DF4 FADD S0, S0, S1
	0x01D06DF8 FMUL S1, S8, S8
	0x01D06DFC FADD S0, S1, S0
	0x01D06E00 FSQRT S0, S0
	0x01D06E04 FCMP S0, S2
	0x01D06E08 B.PL 0x1D06E24
	0x01D06E0C LDR X1, [X19 + 0x50]
	0x01D06E10 LDR V0, [X19 + 0x100]
	0x01D06E14 LDR V1, [X19 + 0x104]
	0x01D06E18 LDR V2, [X19 + 0x108]
	0x01D06E1C BL 0x1D06F94
	0x01D06E20 B 0x1D06F70
	0x01D06E24 LDR X0, [X19 + 0x28]
	0x01D06E28 CBZ X0, 0x1D06F90
	0x01D06E2C MOV X1, X31
	0x01D06E30 BL 0x3A9B084
	0x01D06E34 CBZ X0, 0x1D06F90
	0x01D06E38 MOV X1, X31
	0x01D06E3C BL 0x3AA7658
	0x01D06E40 LDR V3, [X19 + 0x108]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call NetworkBehaviour.FixedUpdateNetwork, X0
	007 Move X0, [X19+64]
	008 Compare X0, 0
	009 JumpIfEqual {40}
	010 Move W8, [X0+96]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 2
	013 Compare TEMP, 2
	014 JumpIfEqual {40}
	015 Move X1, X31
	016 Call NetworkObject.get_HasStateAuthority, X0
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {40}
	021 Move X0, X19
	022 Call MobControllerMine.get_isExploded, X0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {40}
	027 Move X0, X19
	028 Call MobControllerMine.get_resetTimer, X0
	029 Move [X31+8], W0
	030 Move X1, [X19+56]
	031 Add X0, X31, 8
	032 Move X2, X31
	033 Call TickTimer.Expired, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {40}
	038 Move X0, X19
	039 Call MobControllerMine.Reset, X0
	040 Move X30, [X31+16]
	041 Move X19, [X31+24]
	042 Add X31, X31, 32
	043 Return 

Method: System.Boolean IsHand(UnityEngine.Collider collider)

Disassembly:
	0x01D06E78 MOV V13.16B, V2.16B
	0x01D06E7C STR S10, [X31 + 0xC]
	0x01D06E80 MOV V10.16B, V9.16B
	0x01D06E84 MOV V9.16B, V8.16B
	0x01D06E88 BL 0x3A9B084
	0x01D06E8C CBZ X0, 0x1D06F90
	0x01D06E90 MOV X1, X31
	0x01D06E94 BL 0x3AA7658
	0x01D06E98 ADRP X21, 0x251D000
	0x01D06E9C LDRB W8, [X21 + 0x441]
	0x01D06EA0 MOV V14.16B, V0.16B
	0x01D06EA4 MOV V15.16B, V1.16B
	0x01D06EA8 MOV V8.16B, V2.16B
	0x01D06EAC CBNZ W8, 0x1D06EC4
	0x01D06EB0 ADRP X0, 0x2247000
	0x01D06EB4 LDR X0, [X0 + 0x488]
	0x01D06EB8 BL 0x1B6E7F0
	0x01D06EBC MOVZ W8, 0x1
	0x01D06EC0 STRB W8, [X21 + 0x441]
	0x01D06EC4 LDR X0, [X20]
	0x01D06EC8 FSUB S14, S11, S14
	0x01D06ECC FSUB S11, S12, S15
	0x01D06ED0 FSUB S8, S13, S8
	0x01D06ED4 LDR W8, [X0 + 0xE0]
	0x01D06ED8 CBNZ W8, 0x1D06EE0
	0x01D06EDC BL 0x1B6E8F8
	0x01D06EE0 FMUL S0, S14, S14
	0x01D06EE4 FMUL S1, S11, S11
	0x01D06EE8 ADRP X8, 0xFFFFFFFFFEDA3000
	0x01D06EEC FADD S0, S0, S1
	0x01D06EF0 LDR V1, [X8 + 0xB64]
	0x01D06EF4 FMUL S2, S8, S8
	0x01D06EF8 FADD S0, S2, S0
	0x01D06EFC FSQRT S2, S0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x251E000
	005 Move W8, [X20+1863]
	006 Move X19, X1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x224A000
	012 Move X0, [X0+752]
	013 Call 0x1B6F7F0
	014 Move X0, 0x2248000
	015 Move X0, [X0+1144]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1863], W8
	019 Compare X19, 0
	020 JumpIfEqual {42}
	021 Move X8, 0x224A000
	022 Move X8, [X8+752]
	023 Move X20, 0x2248000
	024 Move X0, X19
	025 Move X1, [X8]
	026 Move X20, [X20+1144]
	027 Call 0x2090DE8, X0
	028 Move X8, [X20]
	029 Move X19, X0
	030 Move W9, [X8+224]
	031 Compare W9, 0
	032 JumpIfNotEqual {35}
	033 Move X0, X8
	034 Call 0x1B6F8F8
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X1, X31
	039 Move X30, [X31+32]
	040 Call Object.op_Implicit, X0
	041 Return X0
	042 Call 0x1B6FA1C

Method: System.Void OnTriggerEnter(UnityEngine.Collider other)

Disassembly:
	0x01D06F00 FCMP S2, S1
	0x01D06F04 B.LE 0x1D06F18
	0x01D06F08 FDIV S0, S14, S2
	0x01D06F0C FDIV S1, S11, S2
	0x01D06F10 FDIV S2, S8, S2
	0x01D06F14 B 0x1D06F50
	0x01D06F18 ADRP X20, 0x251D000
	0x01D06F1C LDRB W8, [X20 + 0x43F]
	0x01D06F20 CBNZ W8, 0x1D06F38
	0x01D06F24 ADRP X0, 0x2247000
	0x01D06F28 LDR X0, [X0 + 0x480]
	0x01D06F2C BL 0x1B6E7F0
	0x01D06F30 MOVZ W8, 0x1
	0x01D06F34 STRB W8, [X20 + 0x43F]
	0x01D06F38 ADRP X8, 0x2247000
	0x01D06F3C LDR X8, [X8 + 0x480]
	0x01D06F40 LDR X8, [X8]
	0x01D06F44 LDR X8, [X8 + 0xB8]
	0x01D06F48 LDP S0, S1, [X8]
	0x01D06F4C LDR V2, [X8 + 0x8]
	0x01D06F50 LDR V3, [X19 + 0x9C]
	0x01D06F54 LDR V4, [X31 + 0xC]
	0x01D06F58 FMUL S0, S0, S3
	0x01D06F5C FMUL S1, S1, S3
	0x01D06F60 FMUL S2, S2, S3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X19, X0
	006 Call MobControllerMine.get_isExploded, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {17}
	011 Move X0, X19
	012 Call MobControllerMine.get_isStepped, X0
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {21}
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return 
	021 Compare X20, 0
	022 JumpIfEqual {40}
	023 Move X0, X20
	024 Move X1, X31
	025 Call Collider.get_isTrigger, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {36}
	030 Move X1, X20
	031 Call MobControllerMine.IsHand, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {17}
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Call 0x1B6FA1C

Method: System.Void OnTriggerExit(UnityEngine.Collider other)

Disassembly:
	0x01D07178 CBNZ W8, 0x1D07190
	0x01D0717C ADRP X0, 0x2246000
	0x01D07180 LDR X0, [X0 + 0x488]
	0x01D07184 BL 0x1B6E7F0
	0x01D07188 MOVZ W8, 0x1
	0x01D0718C STRB W8, [X21 + 0x441]
	0x01D07190 LDR X0, [X20]
	0x01D07194 FSUB S14, S11, S14
	0x01D07198 FSUB S11, S12, S15
	0x01D0719C FSUB S8, S13, S8
	0x01D071A0 LDR W8, [X0 + 0xE0]
	0x01D071A4 CBNZ W8, 0x1D071AC
	0x01D071A8 BL 0x1B6E8F8
	0x01D071AC FMUL S0, S14, S14
	0x01D071B0 FMUL S1, S11, S11
	0x01D071B4 ADRP X8, 0xFFFFFFFFFEDA2000
	0x01D071B8 FADD S0, S0, S1
	0x01D071BC LDR V1, [X8 + 0xB64]
	0x01D071C0 FMUL S2, S8, S8
	0x01D071C4 FADD S0, S2, S0
	0x01D071C8 FSQRT S2, S0
	0x01D071CC FCMP S2, S1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X19, X0
	006 Call MobControllerMine.get_isExploded, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {15}
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Return 
	015 Compare X20, 0
	016 JumpIfEqual {34}
	017 Move X0, X20
	018 Move X1, X31
	019 Call Collider.get_isTrigger, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {30}
	024 Move X1, X20
	025 Call MobControllerMine.IsHand, X0, X1
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {11}
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Call 0x1B6FA1C

Method: System.Void RPC_TriggerEnter()

Disassembly:
	0x01D06F64 FADD S0, S9, S0
	0x01D06F68 FADD S1, S10, S1
	0x01D06F6C FADD S2, S4, S2
	0x01D06F70 LDP X20, X19, [X31 + 0x60]
	0x01D06F74 LDP X30, X21, [X31 + 0x50]
	0x01D06F78 LDP D9, D8, [X31 + 0x40]
	0x01D06F7C LDP D11, D10, [X31 + 0x30]
	0x01D06F80 LDP D13, D12, [X31 + 0x20]
	0x01D06F84 LDP D15, D14, [X31 + 0x10]
	0x01D06F88 ADD X31, X31, 0x70
	0x01D06F8C RET
	0x01D06F90 BL 0x1B6EA1C
	0x01D06F94 STP D13, D12, [X31 - 0x40]!
	0x01D06F98 STP D11, D10, [X31 + 0x10]
	0x01D06F9C STP D9, D8, [X31 + 0x20]
	0x01D06FA0 STP X30, X19, [X31 + 0x30]
	0x01D06FA4 CBZ X1, 0x1D07010
	0x01D06FA8 MOV X19, X1
	0x01D06FAC MOV X0, X1
	0x01D06FB0 MOV X1, X31
	0x01D06FB4 MOV V8.16B, V2.16B
	0x01D06FB8 MOV V9.16B, V1.16B
	0x01D06FBC MOV V10.16B, V0.16B
	0x01D06FC0 BL 0x3AA7658
	0x01D06FC4 MOV X0, X19
	0x01D06FC8 MOV X1, X31
	0x01D06FCC MOV V11.16B, V0.16B
	0x01D06FD0 MOV V12.16B, V1.16B
	0x01D06FD4 MOV V13.16B, V2.16B
	0x01D06FD8 BL 0x3AA5FBC
	0x01D06FDC MOV V4.16B, V10.16B
	0x01D06FE0 MOV V5.16B, V9.16B
	0x01D06FE4 MOV V6.16B, V8.16B
	0x01D06FE8 MOV X0, X31
	0x01D06FEC BL 0x3A92D64
	0x01D06FF0 FADD S0, S11, S0
	0x01D06FF4 LDP X30, X19, [X31 + 0x30]
	0x01D06FF8 LDP D9, D8, [X31 + 0x20]
	0x01D06FFC LDP D11, D10, [X31 + 0x10]
	0x01D07000 FADD S1, S12, S1
	0x01D07004 FADD S2, S13, S2
	0x01D07008 LDP D13, D12, [X31], #0x40
	0x01D0700C RET
	0x01D07010 BL 0x1B6EA1C
	0x01D07014 SUB X31, X31, 0x70
	0x01D07018 STP D15, D14, [X31 + 0x10]
	0x01D0701C STP D13, D12, [X31 + 0x20]
	0x01D07020 STP D11, D10, [X31 + 0x30]
	0x01D07024 STP D9, D8, [X31 + 0x40]
	0x01D07028 STP X30, X21, [X31 + 0x50]
	0x01D0702C STP X20, X19, [X31 + 0x60]
	0x01D07030 LDR X1, [X0 + 0x48]
	0x01D07034 LDP S0, S1, [X0 + 0xF4]
	0x01D07038 LDR V2, [X0 + 0xFC]
	0x01D0703C MOV X19, X0
	0x01D07040 BL 0x1D06F94
	0x01D07044 LDR X0, [X19 + 0x28]
	0x01D07048 CBZ X0, 0x1D0725C
	0x01D0704C MOV X1, X31
	0x01D07050 MOV V8.16B, V0.16B
	0x01D07054 MOV V9.16B, V1.16B
	0x01D07058 MOV V10.16B, V2.16B
	0x01D0705C BL 0x3A9B084
	0x01D07060 CBZ X0, 0x1D0725C
	0x01D07064 MOV X1, X31
	0x01D07068 BL 0x3AA7658
	0x01D0706C ADRP X20, 0x251C000
	0x01D07070 LDRB W8, [X20 + 0x440]
	0x01D07074 MOV V11.16B, V0.16B
	0x01D07078 MOV V12.16B, V1.16B
	0x01D0707C MOV V13.16B, V2.16B
	0x01D07080 CBNZ W8, 0x1D07098
	0x01D07084 ADRP X0, 0x2246000
	0x01D07088 LDR X0, [X0 + 0x488]
	0x01D0708C BL 0x1B6E7F0
	0x01D07090 MOVZ W8, 0x1
	0x01D07094 STRB W8, [X20 + 0x440]
	0x01D07098 ADRP X20, 0x2246000
	0x01D0709C LDR X20, [X20 + 0x488]
	0x01D070A0 FSUB S11, S8, S11
	0x01D070A4 FSUB S9, S9, S12
	0x01D070A8 FSUB S8, S10, S13
	0x01D070AC LDR X0, [X20]
	0x01D070B0 LDR W8, [X0 + 0xE0]
	0x01D070B4 CBNZ W8, 0x1D070BC
	0x01D070B8 BL 0x1B6E8F8
	0x01D070BC FMUL S0, S11, S11
	0x01D070C0 FMUL S1, S9, S9
	0x01D070C4 LDR V2, [X19 + 0x9C]
	0x01D070C8 FADD S0, S0, S1
	0x01D070CC FMUL S1, S8, S8
	0x01D070D0 FADD S0, S1, S0
	0x01D070D4 FSQRT S0, S0
	0x01D070D8 FCMP S0, S2
	0x01D070DC B.PL 0x1D070F4
	0x01D070E0 LDR X1, [X19 + 0x48]
	0x01D070E4 LDP S0, S1, [X19 + 0xF4]
	0x01D070E8 LDR V2, [X19 + 0xFC]
	0x01D070EC BL 0x1D06F94
	0x01D070F0 B 0x1D0723C
	0x01D070F4 LDR X0, [X19 + 0x28]
	0x01D070F8 CBZ X0, 0x1D0725C
	0x01D070FC MOV X1, X31
	0x01D07100 BL 0x3A9B084
	0x01D07104 CBZ X0, 0x1D0725C
	0x01D07108 MOV X1, X31
	0x01D0710C BL 0x3AA7658
	0x01D07110 LDR V3, [X19 + 0xFC]
	0x01D07114 MOV V8.16B, V0.16B
	0x01D07118 MOV V9.16B, V1.16B
	0x01D0711C LDR X1, [X19 + 0x48]
	0x01D07120 LDP S0, S1, [X19 + 0xF4]
	0x01D07124 MOV V10.16B, V2.16B
	0x01D07128 MOV V2.16B, V3.16B
	0x01D0712C BL 0x1D06F94
	0x01D07130 LDR X0, [X19 + 0x28]
	0x01D07134 CBZ X0, 0x1D0725C
	0x01D07138 MOV X1, X31
	0x01D0713C MOV V11.16B, V0.16B
	0x01D07140 MOV V12.16B, V1.16B
	0x01D07144 MOV V13.16B, V2.16B
	0x01D07148 STR S10, [X31 + 0xC]
	0x01D0714C MOV V10.16B, V9.16B
	0x01D07150 MOV V9.16B, V8.16B
	0x01D07154 BL 0x3A9B084
	0x01D07158 CBZ X0, 0x1D0725C
	0x01D0715C MOV X1, X31
	0x01D07160 BL 0x3AA7658
	0x01D07164 ADRP X21, 0x251C000
	0x01D07168 LDRB W8, [X21 + 0x441]
	0x01D0716C MOV V14.16B, V0.16B
	0x01D07170 MOV V15.16B, V1.16B
	0x01D07174 MOV V8.16B, V2.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x251E000
	006 Move W8, [X20+1864]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x2249000
	013 Move X0, [X0+3440]
	014 Call 0x1B6F7F0
	015 Move X0, 0x2249000
	016 Move X0, [X0+448]
	017 Call 0x1B6F7F0
	018 Move X0, 0x224C000
	019 Move X0, [X0+280]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X20+1864], W8
	023 Move W8, [X19+88]
	024 Compare W8, 0
	025 JumpIfEqual {71}
	026 Move [X19+88], W31
	027 Move X0, X19
	028 Call MobControllerMine.get_isStepped, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {87}
	033 Move W1, 1
	034 Move X0, X19
	035 Call MobControllerMine.set_isStepped, X0, X1
	036 Move X21, 0x2249000
	037 Move X21, [X21+3440]
	038 Move X20, [X19+152]
	039 Move X0, [X21]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1B6F8F8
	044 Move X0, [X21]
	045 Compare X20, 0
	046 JumpIfEqual {171}
	047 Move X8, [X0+184]
	048 Move X0, X20
	049 Move X1, X31
	050 Move S1, [X8+16]
	051 Move S2, [X8+20]
	052 Move V0, [X8+12]
	053 Call Transform.set_localPosition, X0, X1
	054 Move X20, [X19+128]
	055 Move X0, X19
	056 Move X1, X31
	057 Call Component.get_transform, X0
	058 Compare X0, 0
	059 JumpIfEqual {171}
	060 Move X1, X31
	061 Call Transform.get_position, X0
	062 Move X0, X20
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move S3, 1
	066 Move X1, X31
	067 Move X30, [X31+32]
	068 Move X21, [X31+40]
	069 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	070 Return 
	071 Move X20, 0x2248000
	072 Move X20, [X20+448]
	073 Move X0, [X20]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1B6F8F8
	078 Move X0, X19
	079 Move X1, X31
	080 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	081 Move X0, [X19+56]
	082 Compare X0, 0
	083 JumpIfEqual {171}
	084 Move X1, X31
	085 Call NetworkRunner.get_Stage, X0
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X20, [X31+16]
	088 Move X19, [X31+24]
	089 Move X30, [X31+32]
	090 Move X21, [X31+40]
	091 Return 
	092 Move X0, [X19+64]
	093 Compare X0, 0
	094 JumpIfEqual {171}
	095 Move X1, X31
	096 Call NetworkObject.GetLocalAuthorityMask, X0
	097 And W31, W0, 7
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfEqual {27}
	102 Move X8, [X19+56]
	103 Compare X8, 0
	104 JumpIfEqual {171}
	105 Move X0, [X8+80]
	106 Compare X0, 0
	107 JumpIfEqual {171}
	108 Move X1, X31
	109 Call Simulation.HasAnyActiveConnections, X0
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfNotEqual {87}
	114 Move X8, [X19+56]
	115 Compare X8, 0
	116 JumpIfEqual {171}
	117 Move X0, [X8+80]
	118 Move W1, 8
	119 Move X2, X31
	120 Call SimulationMessage.Allocate, X0, X1
	121 Move X20, X0
	122 Move W0, 1
	123 Move X1, X31
	124 Call Assert.Check, X0
	125 Move X8, [X19+64]
	126 Compare X8, 0
	127 JumpIfEqual {171}
	128 Move X8, [X8+32]
	129 Compare X8, 0
	130 JumpIfEqual {150}
	131 Move W0, [X8]
	132 Move X0, [X20]
	133 Move X19, [X19+64]
	134 Move W8, [X0+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {138}
	137 Call 0x1B6F8F8
	138 Move X8, 0x224B000
	139 Move X8, [X8+280]
	140 Move X1, X19
	141 Move X20, [X31+16]
	142 Move X19, [X31+24]
	143 Move W2, 7
	144 Move X0, [X8]
	145 Move X3, X31
	146 Move X30, [X31+32]
	147 Move X21, [X31+40]
	148 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	149 Return 
	150 Move X0, X31
	151 Move W1, [X19+104]
	152 Move W2, 1
	153 Move X3, X31
	154 Call RpcHeader.Create, X0, X1, X2
	155 Move [X20+28], X0
	156 Compare X20, 0
	157 JumpIfEqual {171}
	158 Move W8, 64
	159 Move [X20+12], W8
	160 Move X0, [X19+56]
	161 Compare X0, 0
	162 JumpIfEqual {171}
	163 Move X1, X20
	164 Move X20, [X31+16]
	165 Move X19, [X31+24]
	166 Move X2, X31
	167 Move X30, [X31+32]
	168 Move X21, [X31+40]
	169 Call NetworkRunner.SendRpc, X0, X1
	170 Return 
	171 Call 0x1B6FA1C

Method: System.Void RPC_TriggerExit()

Disassembly:
	0x01D071D0 B.LE 0x1D071E4
	0x01D071D4 FDIV S0, S14, S2
	0x01D071D8 FDIV S1, S11, S2
	0x01D071DC FDIV S2, S8, S2
	0x01D071E0 B 0x1D0721C
	0x01D071E4 ADRP X20, 0x251C000
	0x01D071E8 LDRB W8, [X20 + 0x43F]
	0x01D071EC CBNZ W8, 0x1D07204
	0x01D071F0 ADRP X0, 0x2246000
	0x01D071F4 LDR X0, [X0 + 0x480]
	0x01D071F8 BL 0x1B6E7F0
	0x01D071FC MOVZ W8, 0x1
	0x01D07200 STRB W8, [X20 + 0x43F]
	0x01D07204 ADRP X8, 0x2246000
	0x01D07208 LDR X8, [X8 + 0x480]
	0x01D0720C LDR X8, [X8]
	0x01D07210 LDR X8, [X8 + 0xB8]
	0x01D07214 LDP S0, S1, [X8]
	0x01D07218 LDR V2, [X8 + 0x8]
	0x01D0721C LDR V3, [X19 + 0x9C]
	0x01D07220 LDR V4, [X31 + 0xC]
	0x01D07224 FMUL S0, S0, S3
	0x01D07228 FMUL S1, S1, S3
	0x01D0722C FMUL S2, S2, S3
	0x01D07230 FADD S0, S9, S0
	0x01D07234 FADD S1, S10, S1
	0x01D07238 FADD S2, S4, S2
	0x01D0723C LDP X20, X19, [X31 + 0x60]
	0x01D07240 LDP X30, X21, [X31 + 0x50]
	0x01D07244 LDP D9, D8, [X31 + 0x40]
	0x01D07248 LDP D11, D10, [X31 + 0x30]
	0x01D0724C LDP D13, D12, [X31 + 0x20]
	0x01D07250 LDP D15, D14, [X31 + 0x10]
	0x01D07254 ADD X31, X31, 0x70
	0x01D07258 RET
	0x01D0725C BL 0x1B6EA1C
	0x01D07260 LDR V3, [X0 + 0x1C0]
	0x01D07264 LDR V4, [X0 + 0x1C8]
	0x01D07268 MOV V0.S[1], V1.S[0]
	0x01D0726C FADD V0.2S, V0.2S, V3.2S
	0x01D07270 FADD S1, S2, S4
	0x01D07274 STR D0, [X0 + 0x1C0]
	0x01D07278 STR S1, [X0 + 0x1C8]
	0x01D0727C RET
	0x01D07280 SUB X31, X31, 0x70
	0x01D07284 STP D13, D12, [X31 + 0x20]
	0x01D07288 STP D11, D10, [X31 + 0x30]
	0x01D0728C STP D9, D8, [X31 + 0x40]
	0x01D07290 STR X30, [X31 + 0x50]
	0x01D07294 STP X20, X19, [X31 + 0x60]
	0x01D07298 ADRP X20, 0x251C000
	0x01D0729C LDRB W8, [X20 + 0x756]
	0x01D072A0 MOV V8.16B, V5.16B
	0x01D072A4 MOV V9.16B, V4.16B
	0x01D072A8 MOV V10.16B, V3.16B
	0x01D072AC MOV V11.16B, V2.16B
	0x01D072B0 MOV V12.16B, V1.16B
	0x01D072B4 MOV V13.16B, V0.16B
	0x01D072B8 MOV X19, X0
	0x01D072BC TBNZ X8, 0x0, 0x1D072D4
	0x01D072C0 ADRP X0, 0x224A000
	0x01D072C4 LDR X0, [X0 + 0x150]
	0x01D072C8 BL 0x1B6E7F0
	0x01D072CC MOVZ W8, 0x1
	0x01D072D0 STRB W8, [X20 + 0x756]
	0x01D072D4 LDR X0, [X19 + 0x1D0]
	0x01D072D8 CBZ X0, 0x1D07368
	0x01D072DC ADRP X9, 0x224A000
	0x01D072E0 LDR X9, [X9 + 0x150]
	0x01D072E4 LDR W10, [X0 + 0x1C]
	0x01D072E8 LDR X8, [X0 + 0x10]
	0x01D072EC LDR X9, [X9]
	0x01D072F0 ADD W10, W10, 0x1
	0x01D072F4 STR W10, [X0 + 0x1C]
	0x01D072F8 CBZ X8, 0x1D07368
	0x01D072FC LDRSW X10, [X0 + 0x18]
	0x01D07300 LDR W11, [X8 + 0x18]
	0x01D07304 CMP W10, W11
	0x01D07308 B.CS 0x1D0732C
	0x01D0730C MOVZ W11, 0x18
	0x01D07310 ADD W9, W10, 0x1
	0x01D07314 MADD X8, X10, X11, X8
	0x01D07318 STR W9, [X0 + 0x18]
	0x01D0731C STP S13, S12, [X8 + 0x20]
	0x01D07320 STP S11, S10, [X8 + 0x28]
	0x01D07324 STP S9, S8, [X8 + 0x30]
	0x01D07328 B 0x1D0734C
	0x01D0732C LDR X8, [X9 + 0x20]
	0x01D07330 ADD X1, X31, 0x8
	0x01D07334 LDR X8, [X8 + 0xC0]
	0x01D07338 LDR X2, [X8 + 0x70]
	0x01D0733C STP S13, S12, [X31 + 0x8]
	0x01D07340 STP S11, S10, [X31 + 0x10]
	0x01D07344 STP S9, S8, [X31 + 0x18]
	0x01D07348 BL 0x2F442E8
	0x01D0734C LDP X20, X19, [X31 + 0x60]
	0x01D07350 LDR X30, [X31 + 0x50]
	0x01D07354 LDP D9, D8, [X31 + 0x40]
	0x01D07358 LDP D11, D10, [X31 + 0x30]
	0x01D0735C LDP D13, D12, [X31 + 0x20]
	0x01D07360 ADD X31, X31, 0x70
	0x01D07364 RET
	0x01D07368 BL 0x1B6EA1C
	0x01D0736C STR S0, [X0 + 0x1D8]
	0x01D07370 RET
	0x01D07374 STP D13, D12, [X31 - 0x50]!
	0x01D07378 STP D11, D10, [X31 + 0x10]
	0x01D0737C STP D9, D8, [X31 + 0x20]
	0x01D07380 STR X30, [X31 + 0x30]
	0x01D07384 STP X20, X19, [X31 + 0x40]
	0x01D07388 MOV X19, X0
	0x01D0738C MOV X0, X31
	0x01D07390 BL 0x3AA481C
	0x01D07394 MOV X0, X19
	0x01D07398 BL 0x1D074AC
	0x01D0739C LDR X0, [X19 + 0x90]
	0x01D073A0 CBZ X0, 0x1D074A8
	0x01D073A4 LDR V12, [X19 + 0x120]
	0x01D073A8 LDR V13, [X19 + 0x124]
	0x01D073AC MOV X1, X31
	0x01D073B0 BL 0x3AF646C
	0x01D073B4 ADRP X20, 0x251C000
	0x01D073B8 LDRB W8, [X20 + 0x440]
	0x01D073BC MOV V8.16B, V0.16B
	0x01D073C0 MOV V9.16B, V1.16B
	0x01D073C4 MOV V10.16B, V2.16B
	0x01D073C8 CBNZ W8, 0x1D073E0
	0x01D073CC ADRP X0, 0x2246000
	0x01D073D0 LDR X0, [X0 + 0x488]
	0x01D073D4 BL 0x1B6E7F0
	0x01D073D8 MOVZ W8, 0x1
	0x01D073DC STRB W8, [X20 + 0x440]
	0x01D073E0 ADRP X8, 0x2246000
	0x01D073E4 LDR X8, [X8 + 0x488]
	0x01D073E8 LDR X0, [X8]
	0x01D073EC LDR W8, [X0 + 0xE0]
	0x01D073F0 CBNZ W8, 0x1D073F8
	0x01D073F4 BL 0x1B6E8F8
	0x01D073F8 FCMP S12, S13
	0x01D073FC FMOV S11, W31
	0x01D07400 B.EQ 0x1D07440
	0x01D07404 FMUL S0, S8, S8
	0x01D07408 FMUL S1, S9, S9
	0x01D0740C FMUL S2, S10, S10
	0x01D07410 FADD S0, S0, S1
	0x01D07414 FADD S0, S2, S0
	0x01D07418 FSQRT S0, S0
	0x01D0741C FSUB S0, S0, S12
	0x01D07420 FSUB S1, S13, S12
	0x01D07424 FDIV S0, S0, S1
	0x01D07428 FCMP S0, 0x0
	0x01D0742C B.MI 0x1D07440
	0x01D07430 FMOV S11, 1
	0x01D07434 FCMP S0, S11
	0x01D07438 B.GT 0x1D07440
	0x01D0743C MOV V11.16B, V0.16B
	0x01D07440 LDR X19, [X19 + 0x118]
	0x01D07444 CBZ X19, 0x1D074A8
	0x01D07448 MOV X0, X19
	0x01D0744C MOV X1, X31
	0x01D07450 BL 0x3A65778
	0x01D07454 MOV X0, X31
	0x01D07458 MOV V8.16B, V0.16B
	0x01D0745C BL 0x3AA481C
	0x01D07460 FMOV S1, 7
	0x01D07464 FMOV S2, 1
	0x01D07468 FMUL S0, S0, S1
	0x01D0746C FMOV S3, W31
	0x01D07470 FMIN S1, S0, S2
	0x01D07474 FCMP S0, 0x0
	0x01D07478 FCSEL S0, S1, S3, PL
	0x01D0747C FSUB S1, S11, S8
	0x01D07480 FMUL S0, S1, S0
	0x01D07484 FADD S0, S8, S0
	0x01D07488 MOV X0, X19
	0x01D0748C LDP X20, X19, [X31 + 0x40]
	0x01D07490 LDR X30, [X31 + 0x30]
	0x01D07494 LDP D9, D8, [X31 + 0x20]
	0x01D07498 LDP D11, D10, [X31 + 0x10]
	0x01D0749C MOV X1, X31
	0x01D074A0 LDP D13, D12, [X31], #0x50
	0x01D074A4 B 0x3A657B4
	0x01D074A8 BL 0x1B6EA1C
	0x01D074AC SUB X31, X31, 0x1F0
	0x01D074B0 STP D15, D14, [X31 + 0x150]
	0x01D074B4 STP D13, D12, [X31 + 0x160]
	0x01D074B8 STP D11, D10, [X31 + 0x170]
	0x01D074BC STP D9, D8, [X31 + 0x180]
	0x01D074C0 STP X29, X30, [X31 + 0x190]
	0x01D074C4 STP X28, X27, [X31 + 0x1A0]
	0x01D074C8 STP X26, X25, [X31 + 0x1B0]
	0x01D074CC STP X24, X23, [X31 + 0x1C0]
	0x01D074D0 STP X22, X21, [X31 + 0x1D0]
	0x01D074D4 STP X20, X19, [X31 + 0x1E0]
	0x01D074D8 ADRP X20, 0x251C000
	0x01D074DC LDRB W8, [X20 + 0x757]
	0x01D074E0 MOV X19, X0
	0x01D074E4 STR D0, [X31 + 0x60]
	0x01D074E8 TBNZ X8, 0x0, 0x1D07548
	0x01D074EC ADRP X0, 0x224A000
	0x01D074F0 LDR X0, [X0 + 0x158]
	0x01D074F4 BL 0x1B6E7F0
	0x01D074F8 ADRP X0, 0x224A000
	0x01D074FC LDR X0, [X0 + 0x160]
	0x01D07500 BL 0x1B6E7F0
	0x01D07504 ADRP X0, 0x224A000
	0x01D07508 LDR X0, [X0 + 0x168]
	0x01D0750C BL 0x1B6E7F0
	0x01D07510 ADRP X0, 0x224A000
	0x01D07514 LDR X0, [X0 + 0x170]
	0x01D07518 BL 0x1B6E7F0
	0x01D0751C ADRP X0, 0x224A000
	0x01D07520 LDR X0, [X0 + 0x178]
	0x01D07524 BL 0x1B6E7F0
	0x01D07528 ADRP X0, 0x224A000
	0x01D0752C LDR X0, [X0 + 0x180]
	0x01D07530 BL 0x1B6E7F0
	0x01D07534 ADRP X0, 0x2246000
	0x01D07538 LDR X0, [X0 + 0x4C0]
	0x01D0753C BL 0x1B6E7F0
	0x01D07540 MOVZ W8, 0x1
	0x01D07544 STRB W8, [X20 + 0x757]
	0x01D07548 ADRP X23, 0x251C000
	0x01D0754C LDRB W8, [X23 + 0x43F]
	0x01D07550 MOVI V0.2D, 0x0
	0x01D07554 STR W31, [X31 + 0xE8]
	0x01D07558 STR X31, [X31 + 0xE0]
	0x01D0755C STUR V0, [X31 + 0xBC]
	0x01D07560 STP V0, V0, [X31 + 0xA0]
	0x01D07564 STR X31, [X31 + 0x90]
	0x01D07568 STP V0, V0, [X31 + 0x70]
	0x01D0756C CBNZ W8, 0x1D07584
	0x01D07570 ADRP X0, 0x2246000
	0x01D07574 LDR X0, [X0 + 0x480]
	0x01D07578 BL 0x1B6E7F0
	0x01D0757C MOVZ W8, 0x1
	0x01D07580 STRB W8, [X23 + 0x43F]
	0x01D07584 ADRP X20, 0x2246000
	0x01D07588 LDR X20, [X20 + 0x480]
	0x01D0758C LDR X8, [X20]
	0x01D07590 LDR X8, [X8 + 0xB8]
	0x01D07594 LDP S11, S10, [X8]
	0x01D07598 LDR V9, [X8 + 0x8]
	0x01D0759C STP S11, S10, [X31 + 0xD0]
	0x01D075A0 STR S9, [X31 + 0xD8]
	0x01D075A4 LDR X0, [X19 + 0x30]
	0x01D075A8 CBZ X0, 0x1D087D8
	0x01D075AC MOV X1, X31
	0x01D075B0 BL 0x3A9B084
	0x01D075B4 LDR X8, [X19 + 0x28]
	0x01D075B8 CBZ X8, 0x1D087D8
	0x01D075BC MOV X21, X0
	0x01D075C0 MOV X0, X8
	0x01D075C4 MOV X1, X31
	0x01D075C8 BL 0x3A9B084
	0x01D075CC CBZ X0, 0x1D087D8
	0x01D075D0 MOV X1, X31
	0x01D075D4 BL 0x3AA7818
	0x01D075D8 CBZ X21, 0x1D087D8
	0x01D075DC FMOV S0, W31
	0x01D075E0 FMOV S2, W31
	0x01D075E4 MOV X0, X21
	0x01D075E8 MOV X1, X31
	0x01D075EC BL 0x3AA7848
	0x01D075F0 MOV X0, X19
	0x01D075F4 BL 0x1D06D3C
	0x01D075F8 ADRP X27, 0x251C000
	0x01D075FC LDR V12, [X19 + 0x68]
	0x01D07600 LDRB W8, [X27 + 0x510]
	0x01D07604 LDR V13, [X19 + 0x70]
	0x01D07608 MOV V7.16B, V1.16B
	0x01D0760C MOV V8.16B, V2.16B
	0x01D07610 CBNZ W8, 0x1D07630
	0x01D07614 ADRP X0, 0x2246000
	0x01D07618 LDR X0, [X0 + 0x480]
	0x01D0761C STP V7, V0, [X31 + 0x40]
	0x01D07620 BL 0x1B6E7F0
	0x01D07624 LDP V7, V0, [X31 + 0x40]
	0x01D07628 MOVZ W8, 0x1
	0x01D0762C STRB W8, [X27 + 0x510]
	0x01D07630 LDRB W8, [X19 + 0x113]
	0x01D07634 ADD X22, X31, 0xF0
	0x01D07638 CBNZ W8, 0x1D076E8
	0x01D0763C LDR X8, [X20]
	0x01D07640 MOV V3.16B, V0.16B
	0x01D07644 ADRP X9, 0xFFFFFFFFFEDA2000

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+96], D10
	003 Move [X31+104], D9
	004 Move [X31+112], D8
	005 Move [X31+120], X30
	006 Move [X31+128], X22
	007 Move [X31+136], X21
	008 Move [X31+144], X20
	009 Move [X31+152], X19
	010 Move X20, 0x251D000
	011 Move W8, [X20+1865]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {55}
	017 Move X0, 0x2247000
	018 Move X0, [X0+2464]
	019 Call 0x1B6F7F0
	020 Move X0, 0x2248000
	021 Move X0, [X0+3440]
	022 Call 0x1B6F7F0
	023 Move X0, 0x2248000
	024 Move X0, [X0+448]
	025 Call 0x1B6F7F0
	026 Move X0, 0x2248000
	027 Move X0, [X0+1496]
	028 Call 0x1B6F7F0
	029 Move X0, 0x2248000
	030 Move X0, [X0+584]
	031 Call 0x1B6F7F0
	032 Move X0, 0x2248000
	033 Move X0, [X0+592]
	034 Call 0x1B6F7F0
	035 Move X0, 0x2248000
	036 Move X0, [X0+1984]
	037 Call 0x1B6F7F0
	038 Move X0, 0x2248000
	039 Move X0, [X0+1992]
	040 Call 0x1B6F7F0
	041 Move X0, 0x2247000
	042 Move X0, [X0+1152]
	043 Call 0x1B6F7F0
	044 Move X0, 0x224B000
	045 Move X0, [X0+288]
	046 Call 0x1B6F7F0
	047 Move X0, 0x2248000
	048 Move X0, [X0+2640]
	049 Call 0x1B6F7F0
	050 Move X0, 0x224B000
	051 Move X0, [X0+296]
	052 Call 0x1B6F7F0
	053 Move W8, 1
	054 Move [X20+1865], W8
	055 Move W8, [X19+88]
	056 Compare W8, 0
	057 JumpIfEqual {222}
	058 Move [X19+88], W31
	059 Move X0, X19
	060 Call MobControllerMine.get_isExploded, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {238}
	065 Move W1, 1
	066 Move X0, X19
	067 Call MobControllerMine.set_isExploded, X0, X1
	068 Move X21, 0x2248000
	069 Move X21, [X21+3440]
	070 Move X20, [X19+152]
	071 Move X0, [X21]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {77}
	075 Call 0x1B6F8F8
	076 Move X0, [X21]
	077 Compare X20, 0
	078 JumpIfEqual {337}
	079 Move X8, [X0+184]
	080 Move X0, X20
	081 Move X1, X31
	082 Move S1, [X8+4]
	083 Move S2, [X8+8]
	084 Move V0, [X8]
	085 Call Transform.set_localPosition, X0, X1
	086 Move X0, [X19+56]
	087 Move S0, 30
	088 Move X1, X31
	089 Call TickTimer.CreateFromSeconds, X0, V0
	090 And X1, X0, 0
	091 Move X0, X19
	092 Call MobControllerMine.set_resetTimer, X0, X1
	093 Move X20, [X19+56]
	094 Move X21, [X19+136]
	095 Move X0, X19
	096 Move X1, X31
	097 Call Component.get_transform, X0
	098 Compare X0, 0
	099 JumpIfEqual {337}
	100 Move X1, X31
	101 Call Transform.get_position, X0
	102 Move X0, X19
	103 Move X1, X31
	104 Move V8, V0
	105 Move V9, V1
	106 Move V10, V2
	107 Call Component.get_transform, X0
	108 Compare X0, 0
	109 JumpIfEqual {337}
	110 Move X1, X31
	111 Call Transform.get_up, X0
	112 Move X8, 0x2248000
	113 Move X8, [X8+584]
	114 Move S3, 0.5
	115 Multiply S0, S0, S3
	116 Multiply S1, S1, S3
	117 Move X1, [X8]
	118 Multiply S2, S2, S3
	119 Add S0, S8, S0
	120 Add S1, S9, S1
	121 Add S2, S10, S2
	122 Add X0, X31, 48
	123 Move [X31+48], X31
	124 Move [X31+56], X31
	125 Call Nullable`1<Vector3>..ctor, X0, X1
	126 Move X22, 0x251D000
	127 Move W8, [X22+1108]
	128 Compare W8, 0
	129 JumpIfNotEqual {135}
	130 Move X0, 0x2248000
	131 Move X0, [X0+504]
	132 Call 0x1B6F7F0
	133 Move W8, 1
	134 Move [X22+1108], W8
	135 Move X8, 0x2248000
	136 Move X8, [X8+504]
	137 Move X9, 0x2248000
	138 Add X0, X31, 24
	139 Move X8, [X8]
	140 Move X8, [X8+184]
	141 Move X9, [X9+592]
	142 Move S0, [X8]
	143 Move S1, [X8+4]
	144 Move S2, [X8+8]
	145 Move S3, [X8+12]
	146 Move X1, [X9]
	147 Move [X31+24], X31
	148 Move [X31+32], X31
	149 Move [X31+40], W31
	150 Call Nullable`1<Quaternion>..ctor, X0, X1
	151 Compare X20, 0
	152 JumpIfEqual {337}
	153 Move X8, 0x2248000
	154 Move X2, [X31+48]
	155 Move X3, [X31+56]
	156 Move X8, [X8+1496]
	157 NotImplemented "Instruction LDUR not yet implemented."
	158 Move W9, [X31+40]
	159 Add X4, X31, 64
	160 Move X8, [X8]
	161 Move X0, X20
	162 Move X1, X21
	163 Move X5, X31
	164 Move X6, X31
	165 Move W7, W31
	166 Move [X31+4], V0
	167 Move [X31+80], W9
	168 Move [X31], X8
	169 Call 0x2113E18, X0, X1, X2, X3, X4, X5, X6
	170 Move X8, 0x2248000
	171 Move X8, [X8+1984]
	172 Move W1, 1
	173 Move X0, [X8]
	174 Call 0x1B6F868
	175 Move X20, X0
	176 Move X0, X19
	177 Move X1, X31
	178 Call Component.get_transform, X0
	179 Compare X0, 0
	180 JumpIfEqual {337}
	181 Move X1, X31
	182 Call Transform.get_position, X0
	183 Move X8, 0x2247000
	184 Move X8, [X8+1152]
	185 Add X1, X31, 8
	186 Move [X31+8], S0
	187 Move [X31+16], S1
	188 Move [X31+16], S2
	189 Move X0, [X8]
	190 Call 0x1B6F900
	191 Move X8, 0x2248000
	192 Move X9, 0x2248000
	193 Move X8, [X8+2640]
	194 Move X9, [X9+1992]
	195 Move X2, X0
	196 Add X0, X31, 64
	197 Move X1, [X8]
	198 Move X3, [X9]
	199 Move [X31+64], X31
	200 Move [X31+72], X31
	201 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	202 Compare X20, 0
	203 JumpIfEqual {337}
	204 Move W8, [X20+24]
	205 Compare W8, 0
	206 JumpIfEqual {338}
	207 Move V0, [X31+4]
	208 Move X8, 0x2247000
	209 Move [X20+2], V0
	210 Move X8, [X8+2464]
	211 Move X0, [X8]
	212 Move W8, [X0+224]
	213 Compare W8, 0
	214 JumpIfNotEqual {216}
	215 Call 0x1B6F8F8
	216 Move X8, 0x224B000
	217 Move X8, [X8+288]
	218 Move X1, X20
	219 Move X2, X31
	220 Move X0, [X8]
	221 Call Analytics.Track, X0, X1
	222 Move X20, 0x2248000
	223 Move X20, [X20+448]
	224 Move X0, [X20]
	225 Move W8, [X0+224]
	226 Compare W8, 0
	227 JumpIfNotEqual {229}
	228 Call 0x1B6F8F8
	229 Move X0, X19
	230 Move X1, X31
	231 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	232 Move X0, [X19+56]
	233 Compare X0, 0
	234 JumpIfEqual {337}
	235 Move X1, X31
	236 Call NetworkRunner.get_Stage, X0
	237 NotImplemented "Instruction CMP not yet implemented."
	238 Move X20, [X31+144]
	239 Move X19, [X31+152]
	240 Move X22, [X31+128]
	241 Move X21, [X31+136]
	242 Move X30, [X31+120]
	243 Move D9, [X31+104]
	244 Move D8, [X31+112]
	245 Move V10, [X31+96]
	246 Add X31, X31, 160
	247 Return 
	248 Move X0, [X19+64]
	249 Compare X0, 0
	250 JumpIfEqual {337}
	251 Move X1, X31
	252 Call NetworkObject.GetLocalAuthorityMask, X0
	253 And W31, W0, 7
	254 Move TEMP, X0
	255 And TEMP, TEMP, 1
	256 Compare TEMP, 1
	257 JumpIfEqual {59}
	258 Move X8, [X19+56]
	259 Compare X8, 0
	260 JumpIfEqual {337}
	261 Move X0, [X8+80]
	262 Compare X0, 0
	263 JumpIfEqual {337}
	264 Move X1, X31
	265 Call Simulation.HasAnyActiveConnections, X0
	266 Move TEMP, X0
	267 And TEMP, TEMP, 1
	268 Compare TEMP, 1
	269 JumpIfNotEqual {238}
	270 Move X8, [X19+56]
	271 Compare X8, 0
	272 JumpIfEqual {337}
	273 Move X0, [X8+80]
	274 Move W1, 8
	275 Move X2, X31
	276 Call SimulationMessage.Allocate, X0, X1
	277 Move X20, X0
	278 Move W0, 1
	279 Move X1, X31
	280 Call Assert.Check, X0
	281 Move X8, [X19+64]
	282 Compare X8, 0
	283 JumpIfEqual {337}
	284 Move X8, [X8+32]
	285 Compare X8, 0
	286 JumpIfEqual {311}
	287 Move W0, [X8]
	288 Move X0, [X20]
	289 Move X19, [X19+64]
	290 Move W8, [X0+224]
	291 Compare W8, 0
	292 JumpIfNotEqual {294}
	293 Call 0x1B6F8F8
	294 Move X8, 0x224B000
	295 Move X8, [X8+296]
	296 Move X1, X19
	297 Move X20, [X31+144]
	298 Move X19, [X31+152]
	299 Move X22, [X31+128]
	300 Move X21, [X31+136]
	301 Move X0, [X8]
	302 Move X30, [X31+120]
	303 Move D9, [X31+104]
	304 Move D8, [X31+112]
	305 Move V10, [X31+96]
	306 Move W2, 7
	307 Move X3, X31
	308 Add X31, X31, 160
	309 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	310 Return 
	311 Move X0, X31
	312 Move W1, [X19+104]
	313 Move W2, 2
	314 Move X3, X31
	315 Call RpcHeader.Create, X0, X1, X2
	316 Move [X20+28], X0
	317 Compare X20, 0
	318 JumpIfEqual {337}
	319 Move W8, 64
	320 Move [X20+12], W8
	321 Move X0, [X19+56]
	322 Compare X0, 0
	323 JumpIfEqual {337}
	324 Move X1, X20
	325 Move X20, [X31+144]
	326 Move X19, [X31+152]
	327 Move X22, [X31+128]
	328 Move X21, [X31+136]
	329 Move X30, [X31+120]
	330 Move D9, [X31+104]
	331 Move D8, [X31+112]
	332 Move V10, [X31+96]
	333 Move X2, X31
	334 Add X31, X31, 160
	335 Call NetworkRunner.SendRpc, X0, X1
	336 Return 
	337 Call 0x1B6FA1C
	338 Call 0x1B6FA24

Method: System.Void HandleIsExplodedChanged()

Disassembly:
	0x01D06D04 STP S0, S1, [X19 + 0x80]
	0x01D06D08 STR S2, [X19 + 0x88]
	0x01D06D0C STR W31, [X19 + 0xC8]
	0x01D06D10 BL 0x3A9B084
	0x01D06D14 CBZ X0, 0x1D06D38
	0x01D06D18 MOV X1, X31
	0x01D06D1C BL 0x3AA7658
	0x01D06D20 STP S0, S1, [X19 + 0xE8]
	0x01D06D24 STR S2, [X19 + 0xF0]
	0x01D06D28 LDP X20, X19, [X31 + 0x20]
	0x01D06D2C LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+144]
	004 Call MobControllerMine.get_isExploded, X0
	005 Compare X19, 0
	006 JumpIfEqual {15}
	007 NotImplemented "Instruction ORN not yet implemented."
	008 And W1, W8, 1
	009 Move X0, X19
	010 Move X2, X31
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call GameObject.SetActive, X0, X1
	014 Return 
	015 Call 0x1B6FA1C

Method: System.Void Reset()

Disassembly:
	0x01D06E44 MOV V8.16B, V0.16B
	0x01D06E48 MOV V9.16B, V1.16B
	0x01D06E4C LDR X1, [X19 + 0x50]
	0x01D06E50 LDR V0, [X19 + 0x100]
	0x01D06E54 LDR V1, [X19 + 0x104]
	0x01D06E58 MOV V10.16B, V2.16B
	0x01D06E5C MOV V2.16B, V3.16B
	0x01D06E60 BL 0x1D06F94
	0x01D06E64 LDR X0, [X19 + 0x28]
	0x01D06E68 CBZ X0, 0x1D06F90
	0x01D06E6C MOV X1, X31
	0x01D06E70 MOV V11.16B, V0.16B
	0x01D06E74 MOV V12.16B, V1.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, W31
	004 Move X19, X0
	005 Call MobControllerMine.set_isExploded, X0, X1
	006 Move X0, X19
	007 Move W1, W31
	008 Call MobControllerMine.set_isStepped, X0, X1
	009 Move X0, X31
	010 Call TickTimer.get_None
	011 And X1, X0, 0
	012 Move X0, X19
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call MobControllerMine.set_resetTimer, X0, X1
	016 Return 

Method: System.Void Hit(System.Int32 damage, UnityEngine.Vector3 position, AnimalCompany.RandomSFX hitSound, AnimalCompany.RandomSFX killSound, UnityEngine.Vector3 force, System.String hitName)

Disassembly:
	0x01D07648 LDR V5, [X9 + 0x99C]

ISIL:
	001 Call MobControllerMine.RPC_TriggerExit, X0
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x01D0764C LDR X8, [X8 + 0xB8]
	0x01D07650 MOV V3.S[1], V7.S[0]

ISIL:
	001 Move X1, X31
	002 Call NetworkBehaviour..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x01D07654 FSUB V16.2S, V3.2S, V12.2S
	0x01D07658 LDR V18, [X31 + 0x6]
	0x01D0765C LDR V6, [X8 + 0x2C]
	0x01D07660 LDUR V3, [X8 + 0x24]
	0x01D07664 MOVZ W9, 0xCCCD
	0x01D07668 MOVK W9, 0x411C0000
	0x01D0766C FADD S6, S6, S6
	0x01D07670 FMUL S5, S6, S5
	0x01D07674 UNIMPLEMENTED
	0x01D07678 FADD V3.2S, V3.2S, V3.2S
	0x01D0767C FMUL S5, S5, S18
	0x01D07680 FSUB S4, S8, S13
	0x00000000 INVALID
	0x01D07688 FMUL S5, S5, S18
	0x01D0768C STR V0, [X31 + 0x5]
	0x01D07690 LDP S0, S1, [X19 + 0x68]
	0x01D07694 LDR V2, [X19 + 0x70]
	0x01D07698 STR V7, [X31 + 0x4]
	0x01D0769C LDR V3, [X19 + 0xB0]
	0x01D076A0 FADD S6, S4, S5
	0x01D076A4 LDR V7, [X19 + 0xB8]
	0x00000000 INVALID
	0x00000000 INVALID
	0x01D076B0 FADD V4.2S, V16.2S, V4.2S
	0x01D076B4 ADD X21, X19, 0x128
	0x01D076B8 MOV S5, V4.S[1]
	0x01D076BC ADD X1, X31, 0xE0
	0x01D076C0 MOVZ W2, 0x1
	0x01D076C4 MOV X0, X19
	0x01D076C8 MOV X3, X21
	0x01D076CC BL 0x1D08B3C
	0x01D076D0 TBZ X0, 0x0, 0x1D076E8
	0x01D076D4 LDRB W8, [X19 + 0x110]
	0x01D076D8 CBZ W8, 0x1D08068
	0x01D076DC LDP S12, S13, [X19 + 0x68]
	0x01D076E0 LDR V14, [X19 + 0x70]
	0x01D076E4 B 0x1D080C4
	0x01D076E8 MOV W29, W31
	0x01D076EC STR S11, [X31 + 0x50]
	0x01D076F0 MOV V13.16B, V10.16B
	0x01D076F4 MOV V14.16B, V9.16B
	0x01D076F8 MOV X0, X19
	0x01D076FC BL 0x1D07014
	0x01D07700 LDUR V15, [X19 + 0x74]
	0x01D07704 LDRB W8, [X27 + 0x510]
	0x01D07708 LDR V12, [X19 + 0x7C]
	0x01D0770C MOV V7.16B, V1.16B
	0x01D07710 MOV V8.16B, V2.16B
	0x01D07714 CBNZ W8, 0x1D07734
	0x01D07718 ADRP X0, 0x2246000
	0x01D0771C LDR X0, [X0 + 0x480]
	0x01D07720 STP V0, V7, [X31 + 0x30]
	0x01D07724 BL 0x1B6E7F0
	0x01D07728 LDP V0, V7, [X31 + 0x30]
	0x01D0772C MOVZ W8, 0x1
	0x01D07730 STRB W8, [X27 + 0x510]
	0x01D07734 LDRB W8, [X19 + 0x113]
	0x01D07738 CBNZ W8, 0x1D077E8
	0x01D0773C LDR X8, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x251D000
	007 Move W8, [X19+1866]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x224B000
	013 Move X0, [X0+304]
	014 Call 0x1B6F7F0
	015 Move X0, 0x224B000
	016 Move X0, [X0+312]
	017 Call 0x1B6F7F0
	018 Move X0, 0x2248000
	019 Move X0, [X0+3440]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X19+1866], W8
	023 Move X22, 0x251D000
	024 Move X20, 0x2248000
	025 Move X21, 0x224B000
	026 Move X19, 0x224B000
	027 Move W8, [X22+1087]
	028 Move X20, [X20+3440]
	029 Move X21, [X21+312]
	030 Move X19, [X19+304]
	031 Compare W8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, 0x2247000
	034 Move X0, [X0+1152]
	035 Call 0x1B6F7F0
	036 Move W8, 1
	037 Move [X22+1087], W8
	038 Move X8, 0x2247000
	039 Move X8, [X8+1152]
	040 Move X9, [X20]
	041 Move X8, [X8]
	042 Move X9, [X9+184]
	043 Move X8, [X8+184]
	044 Move V0, [X8]
	045 Move V1, [X8+8]
	046 Move [X9], D0
	047 Move [X9+8], S1
	048 Move X8, [X20]
	049 Move X9, -19238912
	050 Move V0, [X9+680]
	051 Move X8, [X8+184]
	052 Move [X8+12], D0
	053 Move [X8+20], W31
	054 Move X0, [X21]
	055 Call 0x1B6FA0C
	056 Move X1, [X19]
	057 Move X19, X0
	058 Call HashSet`1<Object>..ctor, X0
	059 Move X8, [X20]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X8, [X8+184]
	063 Move [X8+24], X19
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X30, [X31+48]
	067 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01D07740 MOV V3.16B, V0.16B
	0x01D07744 ADRP X9, 0xFFFFFFFFFEDA2000
	0x01D07748 LDR V5, [X9 + 0x99C]
	0x01D0774C LDR X8, [X8 + 0xB8]
	0x01D07750 MOV V3.S[1], V7.S[0]
	0x01D07754 FSUB V16.2S, V3.2S, V15.2S
	0x01D07758 LDR V18, [X31 + 0x6]
	0x01D0775C LDR V6, [X8 + 0x2C]
	0x01D07760 LDUR V3, [X8 + 0x24]
	0x01D07764 MOVZ W9, 0xCCCD
	0x01D07768 MOVK W9, 0x411C0000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, [X0+160]
	004 Move X19, X0
	005 Call MobControllerMine.set_resetTimer, X0, X1
	006 Move W1, [X19+164]
	007 Move X0, X19
	008 Call MobControllerMine.set_isStepped, X0, X1
	009 Move W1, [X19+165]
	010 Move X0, X19
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call MobControllerMine.set_isExploded, X0, X1
	014 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01D0776C FADD S6, S6, S6
	0x01D07770 FMUL S5, S6, S5
	0x01D07774 UNIMPLEMENTED
	0x01D07778 FADD V3.2S, V3.2S, V3.2S
	0x01D0777C FMUL S5, S5, S18
	0x01D07780 FSUB S4, S8, S12
	0x00000000 INVALID
	0x01D07788 FMUL S5, S5, S18
	0x01D0778C STR V0, [X31 + 0x3]
	0x01D07790 LDP S0, S1, [X19 + 0x74]
	0x01D07794 LDR V2, [X19 + 0x7C]
	0x01D07798 STR V7, [X31 + 0x4]
	0x01D0779C LDR V3, [X19 + 0xB0]
	0x01D077A0 FADD S6, S4, S5

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobControllerMine.get_resetTimer, X0
	005 Move [X19+160], W0
	006 Move X0, X19
	007 Call MobControllerMine.get_isStepped, X0
	008 And W8, W0, 1
	009 Move X0, X19
	010 Move [X19+164], W8
	011 Call MobControllerMine.get_isExploded, X0
	012 And W8, W0, 1
	013 Move [X19+165], W8
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return 

Method: System.Void RPC_TriggerEnter@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01D077A4 LDR V7, [X19 + 0xB8]
	0x00000000 INVALID
	0x00000000 INVALID
	0x01D077B0 FADD V4.2S, V16.2S, V4.2S
	0x01D077B4 ADD X21, X19, 0x154
	0x01D077B8 MOV S5, V4.S[1]
	0x01D077BC ADD X1, X31, 0xE0
	0x01D077C0 MOVZ W2, 0x1
	0x01D077C4 MOV X0, X19
	0x01D077C8 MOV X3, X21
	0x01D077CC BL 0x1D08B3C
	0x01D077D0 TBZ X0, 0x0, 0x1D077E8
	0x01D077D4 LDRB W8, [X19 + 0x111]
	0x01D077D8 CBZ W8, 0x1D08124
	0x01D077DC LDP S11, S10, [X19 + 0x74]
	0x01D077E0 LDR V9, [X19 + 0x7C]
	0x01D077E4 B 0x1D08180
	0x01D077E8 MOV W24, W31
	0x01D077EC LDR V0, [X31 + 0x50]
	0x01D077F0 FADD S12, S13, S10
	0x01D077F4 FADD S14, S14, S9
	0x01D077F8 STR S14, [X31 + 0xD8]
	0x01D077FC FADD S15, S0, S11
	0x01D07800 STP S15, S12, [X31 + 0xD0]
	0x01D07804 TBNZ X29, 0x0, 0x1D07810
	0x01D07808 LDRB W8, [X19 + 0x110]
	0x01D0780C CBZ W8, 0x1D07824
	0x01D07810 MOVZ W28, 0x1
	0x01D07814 TBNZ X24, 0x0, 0x1D0782C
	0x01D07818 LDRB W8, [X19 + 0x111]
	0x01D0781C CBNZ W8, 0x1D0782C
	0x01D07820 B 0x1D07830
	0x01D07824 MOV W28, W31
	0x01D07828 TBZ X24, 0x0, 0x1D07818
	0x01D0782C ADD W28, W28, 0x1
	0x01D07830 LDRB W8, [X23 + 0x43F]
	0x01D07834 CBNZ W8, 0x1D0784C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x251D000
	005 Move W8, [X20+1867]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2248000
	012 Move X0, [X0+3440]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1867], W8
	016 Move W0, 1
	017 Move X1, X31
	018 Move W20, 1
	019 Call Assert.Check, X0
	020 Compare X19, 0
	021 JumpIfEqual {42}
	022 Move X9, 0x2248000
	023 Move X9, [X9+3440]
	024 Move [X19+88], W20
	025 Move X8, [X19]
	026 Move X1, [X9]
	027 Move W10, [X8+304]
	028 Move W9, [X1+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X8+200]
	031 Add X8, X8, X9
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Call MobControllerMine.RPC_TriggerEnter, X0
	039 Return 
	040 Move X0, X19
	041 Call 0x1B6FCDC
	042 Call 0x1B6FA1C

Method: System.Void RPC_TriggerExit@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01D07838 ADRP X0, 0x2246000
	0x01D0783C LDR X0, [X0 + 0x480]
	0x01D07840 BL 0x1B6E7F0
	0x01D07844 MOVZ W8, 0x1
	0x01D07848 STRB W8, [X23 + 0x43F]
	0x01D0784C LDR X0, [X19 + 0x1D0]
	0x01D07850 CBZ X0, 0x1D087D8
	0x01D07854 LDR W8, [X0 + 0x18]
	0x01D07858 CMP W8, 0x1
	0x01D0785C B.LT 0x1D07A20
	0x01D07860 STR S14, [X31 + 0x40]
	0x01D07864 STR S12, [X31 + 0x50]
	0x01D07868 STR W29, [X31 + 0x30]
	0x01D0786C ADRP X8, 0x224A000
	0x01D07870 LDR X8, [X8 + 0x178]
	0x01D07874 ADRP X26, 0x224A000
	0x01D07878 LDR X1, [X8]
	0x01D0787C LDR X26, [X26 + 0x160]
	0x01D07880 ADD X8, X31, 0x120
	0x01D07884 BL 0x2F45170
	0x01D07888 LDP V0, V1, [X31 + 0x120]
	0x01D0788C LDR X8, [X31 + 0x140]
	0x01D07890 ADRP X9, 0xFFFFFFFFFEDA2000
	0x01D07894 LDR V11, [X9 + 0x99C]
	0x01D07898 MOV W23, W31
	0x01D0789C ADD X21, X19, 0x180
	0x01D078A0 STP V0, V1, [X31 + 0x70]
	0x01D078A4 STR X8, [X31 + 0x90]
	0x01D078A8 MOVZ W29, 0x1
	0x01D078AC MOV W25, W23
	0x01D078B0 ADRP X23, 0x251C000
	0x01D078B4 LDR X1, [X26]
	0x01D078B8 ADD X0, X31, 0x70
	0x01D078BC BL 0x2A2FABC
	0x01D078C0 TBZ X0, 0x0, 0x1D079E0
	0x01D078C4 LDP S12, S13, [X31 + 0x80]
	0x01D078C8 LDP S14, S8, [X31 + 0x88]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x251D000
	005 Move W8, [X20+1868]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2248000
	012 Move X0, [X0+3440]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1868], W8
	016 Move W0, 1
	017 Move X1, X31
	018 Move W20, 1
	019 Call Assert.Check, X0
	020 Compare X19, 0
	021 JumpIfEqual {42}
	022 Move X9, 0x2248000
	023 Move X9, [X9+3440]
	024 Move [X19+88], W20
	025 Move X8, [X19]
	026 Move X1, [X9]
	027 Move W10, [X8+304]
	028 Move W9, [X1+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X8+200]
	031 Add X8, X8, X9
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Call MobControllerMine.RPC_TriggerExit, X0
	039 Return 
	040 Move X0, X19
	041 Call 0x1B6FCDC
	042 Call 0x1B6FA1C

