Type: AnimalCompany.PrototypeOne.MobControllerMine

Method: Fusion.TickTimer get_resetTimer()

Disassembly:
	0x01E1A21C LDR X0, [X20 + 0x30]
	0x01E1A220 CBZ X0, 0x1E1A268
	0x01E1A224 MOV X1, X31
	0x01E1A228 BL 0x3BFCC04
	0x01E1A22C LDR X0, [X20 + 0x30]
	0x01E1A230 CBZ X0, 0x1E1A268
	0x01E1A234 MOV X1, X31
	0x01E1A238 BL 0x3BFCC80
	0x01E1A23C TBZ X0, 0x0, 0x1E1A24C
	0x01E1A240 LDP X20, X19, [X31 + 0x10]
	0x01E1A244 LDP X30, X21, [X31], #0x20
	0x01E1A248 RET
	0x01E1A24C LDR X0, [X20 + 0x30]
	0x01E1A250 CBZ X0, 0x1E1A268
	0x01E1A254 MOV X1, X19
	0x01E1A258 LDP X20, X19, [X31 + 0x10]
	0x01E1A25C MOV X2, X31
	0x01E1A260 LDP X30, X21, [X31], #0x20
	0x01E1A264 B 0x3BFCB00
	0x01E1A268 BL 0x1C16F20
	0x01E1A26C STR X30, [X31 - 0x20]!
	0x01E1A270 STP X20, X19, [X31 + 0x10]
	0x01E1A274 ADRP X20, 0x25BE000
	0x01E1A278 LDRB W8, [X20 + 0xE19]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x22DA000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x22E1000
	016 Move X0, [X0+1000]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22E1000
	023 Move X0, [X0+1008]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_resetTimer(Fusion.TickTimer value)

Disassembly:
	0x01E1A27C MOV X19, X0
	0x01E1A280 TBNZ X8, 0x0, 0x1E1A298
	0x01E1A284 ADRP X0, 0x22D9000
	0x01E1A288 LDR X0, [X0 + 0x598]
	0x01E1A28C BL 0x1C16CF4
	0x01E1A290 MOVZ W8, 0x1
	0x01E1A294 STRB W8, [X20 + 0xE19]
	0x01E1A298 LDR X0, [X19 + 0x30]
	0x01E1A29C CBZ X0, 0x1E1A300
	0x01E1A2A0 ADRP X20, 0x22D9000
	0x01E1A2A4 LDR X20, [X20 + 0x598]
	0x01E1A2A8 MOV X1, X31
	0x01E1A2AC BL 0x3BFC9FC
	0x01E1A2B0 LDR X8, [X20]
	0x01E1A2B4 MOV X20, X0
	0x01E1A2B8 LDR W9, [X8 + 0xE0]
	0x01E1A2BC CBNZ W9, 0x1E1A2C8
	0x01E1A2C0 MOV X0, X8
	0x01E1A2C4 BL 0x1C16DFC
	0x01E1A2C8 MOV X0, X20
	0x01E1A2CC MOV X1, X31
	0x01E1A2D0 BL 0x3C38948
	0x01E1A2D4 LDR X8, [X19 + 0x30]
	0x01E1A2D8 CBZ X8, 0x1E1A300

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22DA000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x22E1000
	016 Move X0, [X0+1000]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22E1000
	023 Move X0, [X0+1016]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Boolean get_isStepped()

Disassembly:
	0x01E1A2DC MOV W19, W0
	0x01E1A2E0 MOV X0, X8
	0x01E1A2E4 MOV X1, X31
	0x01E1A2E8 BL 0x3BFCC80
	0x01E1A2EC EON W8, W19, W0, 0x0
	0x01E1A2F0 LDP X20, X19, [X31 + 0x10]
	0x01E1A2F4 AND W0, W8, 0x1
	0x01E1A2F8 LDR X30, [X31], #0x20
	0x01E1A2FC RET
	0x01E1A300 BL 0x1C16F20
	0x01E1A304 MOV X1, X31
	0x01E1A308 B 0x3C36C30
	0x01E1A30C STR X30, [X31 - 0x30]!
	0x01E1A310 STP X22, X21, [X31 + 0x10]
	0x01E1A314 STP X20, X19, [X31 + 0x20]
	0x01E1A318 ADRP X21, 0x25BE000
	0x01E1A31C ADRP X22, 0x22E0000
	0x01E1A320 ADRP X19, 0x22E0000
	0x01E1A324 ADRP X20, 0x22E0000
	0x01E1A328 LDRB W8, [X21 + 0xE1A]
	0x01E1A32C LDR X22, [X22 + 0x468]
	0x01E1A330 LDR X19, [X19 + 0x3B8]
	0x01E1A334 LDR X20, [X20 + 0x470]
	0x01E1A338 TBNZ X8, 0x0, 0x1E1A368
	0x01E1A33C ADRP X0, 0x22E0000
	0x01E1A340 LDR X0, [X0 + 0x3B8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+4]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x22DA000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x22E1000
	018 Move X0, [X0+1024]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x22E1000
	025 Move X0, [X0+1032]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_isStepped(System.Boolean value)

Disassembly:
	0x01E1A344 BL 0x1C16CF4
	0x01E1A348 ADRP X0, 0x22E0000
	0x01E1A34C LDR X0, [X0 + 0x470]
	0x01E1A350 BL 0x1C16CF4
	0x01E1A354 ADRP X0, 0x22E0000
	0x01E1A358 LDR X0, [X0 + 0x468]
	0x01E1A35C BL 0x1C16CF4
	0x01E1A360 MOVZ W8, 0x1
	0x01E1A364 STRB W8, [X21 + 0xE1A]
	0x01E1A368 LDR X0, [X22]
	0x01E1A36C MOV X1, X31
	0x01E1A370 BL 0x3BF5D64
	0x01E1A374 LDR X8, [X19]
	0x01E1A378 MOV X1, X31
	0x01E1A37C LDR X8, [X8 + 0xB8]
	0x01E1A380 STR W0, [X8]
	0x01E1A384 LDR X0, [X20]
	0x01E1A388 BL 0x3BF5D64
	0x01E1A38C LDR X8, [X19]
	0x01E1A390 LDP X20, X19, [X31 + 0x20]
	0x01E1A394 LDP X22, X21, [X31 + 0x10]
	0x01E1A398 LDR X8, [X8 + 0xB8]
	0x01E1A39C STR W0, [X8 + 0x4]
	0x01E1A3A0 LDR X30, [X31], #0x30
	0x01E1A3A4 RET

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+4], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x22DA000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x22E1000
	017 Move X0, [X0+1024]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x22E1000
	024 Move X0, [X0+1040]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: System.Boolean get_isExploded()

Disassembly:
	0x01E1A3A8 STR X30, [X31 - 0x20]!
	0x01E1A3AC STP X20, X19, [X31 + 0x10]
	0x01E1A3B0 ADRP X19, 0x25BE000
	0x01E1A3B4 ADRP X20, 0x22DA000
	0x01E1A3B8 LDRB W8, [X19 + 0xE1B]
	0x01E1A3BC LDR X20, [X20 + 0x5A0]
	0x01E1A3C0 TBNZ X8, 0x0, 0x1E1A3D8
	0x01E1A3C4 ADRP X0, 0x22DA000
	0x01E1A3C8 LDR X0, [X0 + 0x5A0]
	0x01E1A3CC BL 0x1C16CF4
	0x01E1A3D0 MOVZ W8, 0x1
	0x01E1A3D4 STRB W8, [X19 + 0xE1B]
	0x01E1A3D8 LDR X8, [X20]
	0x01E1A3DC LDP X20, X19, [X31 + 0x10]
	0x01E1A3E0 LDR X8, [X8 + 0xB8]
	0x01E1A3E4 LDR X0, [X8]
	0x01E1A3E8 LDR X30, [X31], #0x20
	0x01E1A3EC RET
	0x01E1A3F0 STR X30, [X31 - 0x30]!
	0x01E1A3F4 STP X22, X21, [X31 + 0x10]
	0x01E1A3F8 STP X20, X19, [X31 + 0x20]
	0x01E1A3FC ADRP X20, 0x25BE000
	0x01E1A400 ADRP X22, 0x22DA000
	0x01E1A404 ADRP X21, 0x22D9000
	0x01E1A408 LDRB W8, [X20 + 0xE1C]
	0x01E1A40C LDR X22, [X22 + 0x5A0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+8]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x22DA000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x22E1000
	018 Move X0, [X0+1048]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x22E1000
	025 Move X0, [X0+1056]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_isExploded(System.Boolean value)

Disassembly:
	0x01E1A410 LDR X21, [X21 + 0x598]
	0x01E1A414 MOV X19, X0
	0x01E1A418 TBNZ X8, 0x0, 0x1E1A43C
	0x01E1A41C ADRP X0, 0x22D9000
	0x01E1A420 LDR X0, [X0 + 0x598]
	0x01E1A424 BL 0x1C16CF4
	0x01E1A428 ADRP X0, 0x22DA000
	0x01E1A42C LDR X0, [X0 + 0x5A0]
	0x01E1A430 BL 0x1C16CF4
	0x01E1A434 MOVZ W8, 0x1
	0x01E1A438 STRB W8, [X20 + 0xE1C]
	0x01E1A43C LDR X8, [X22]
	0x01E1A440 LDR X0, [X21]
	0x01E1A444 LDR X8, [X8 + 0xB8]
	0x01E1A448 LDR W9, [X0 + 0xE0]
	0x01E1A44C LDR X20, [X8]
	0x01E1A450 CBNZ W9, 0x1E1A458
	0x01E1A454 BL 0x1C16DFC
	0x01E1A458 MOV X0, X20
	0x01E1A45C MOV X1, X31
	0x01E1A460 MOV X2, X31
	0x01E1A464 BL 0x3C354F8
	0x01E1A468 TBZ X0, 0x0, 0x1E1A4D0
	0x01E1A46C LDR X8, [X22]
	0x01E1A470 LDR X0, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+8], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x22DA000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x22E1000
	017 Move X0, [X0+1048]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x22E1000
	024 Move X0, [X0+1064]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: System.Collections.Generic.IEnumerable`1<AnimalCompany.PrototypeOne.MobControllerMine> get_allMines()

Disassembly:
	0x01E1A474 LDR X8, [X8 + 0xB8]
	0x01E1A478 LDR W9, [X0 + 0xE0]
	0x01E1A47C LDR X20, [X8]
	0x01E1A480 CBNZ W9, 0x1E1A488
	0x01E1A484 BL 0x1C16DFC
	0x01E1A488 MOV X0, X20
	0x01E1A48C MOV X1, X19
	0x01E1A490 MOV X2, X31
	0x01E1A494 BL 0x3C354F8
	0x01E1A498 TBZ X0, 0x0, 0x1E1A4D0
	0x01E1A49C MOV X0, X19
	0x01E1A4A0 MOV X1, X31
	0x01E1A4A4 BL 0x3C32ECC
	0x01E1A4A8 LDR X8, [X21]
	0x01E1A4AC MOV X20, X0
	0x01E1A4B0 LDR W9, [X8 + 0xE0]
	0x01E1A4B4 CBNZ W9, 0x1E1A4C0
	0x01E1A4B8 MOV X0, X8
	0x01E1A4BC BL 0x1C16DFC
	0x01E1A4C0 MOV X0, X20
	0x01E1A4C4 MOV X1, X31
	0x01E1A4C8 BL 0x3C394A8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25BF000
	005 Move X19, 0x22DE000
	006 Move W8, [X20+3595]
	007 Move X19, [X19+2136]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x22DE000
	013 Move X0, [X0+2136]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3595], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void OnDestroy()

Disassembly:
	0x01E1A4CC B 0x1E1A4DC
	0x01E1A4D0 LDR X8, [X22]
	0x01E1A4D4 LDR X8, [X8 + 0xB8]
	0x01E1A4D8 STR X19, [X8]
	0x01E1A4DC MOV X0, X19
	0x01E1A4E0 LDP X20, X19, [X31 + 0x20]
	0x01E1A4E4 LDP X22, X21, [X31 + 0x10]
	0x01E1A4E8 LDR X30, [X31], #0x30
	0x01E1A4EC B 0x1E1A4F0
	0x01E1A4F0 STR X30, [X31 - 0x30]!
	0x01E1A4F4 STP X22, X21, [X31 + 0x10]
	0x01E1A4F8 STP X20, X19, [X31 + 0x20]
	0x01E1A4FC ADRP X21, 0x25BE000
	0x01E1A500 ADRP X22, 0x22DC000
	0x01E1A504 ADRP X20, 0x22DB000
	0x01E1A508 LDRB W8, [X21 + 0xE1D]
	0x01E1A50C LDR X22, [X22 + 0xB98]
	0x01E1A510 LDR X20, [X20 + 0x9B0]
	0x01E1A514 MOV X19, X0
	0x01E1A518 TBNZ X8, 0x0, 0x1E1A53C
	0x01E1A51C ADRP X0, 0x22DC000
	0x01E1A520 LDR X0, [X0 + 0xB98]
	0x01E1A524 BL 0x1C16CF4
	0x01E1A528 ADRP X0, 0x22DB000
	0x01E1A52C LDR X0, [X0 + 0x9B0]
	0x01E1A530 BL 0x1C16CF4
	0x01E1A534 MOVZ W8, 0x1
	0x01E1A538 STRB W8, [X21 + 0xE1D]
	0x01E1A53C LDR X1, [X22]
	0x01E1A540 MOV X0, X19
	0x01E1A544 BL 0x21A3894
	0x01E1A548 STR X0, [X19 + 0x90]
	0x01E1A54C LDR W1, [X19 + 0x98]
	0x01E1A550 LDR X0, [X20]
	0x01E1A554 BL 0x1C16D6C
	0x01E1A558 LDR X8, [X19 + 0x38]
	0x01E1A55C STR X0, [X19 + 0xC0]
	0x01E1A560 CBZ X8, 0x1E1A600
	0x01E1A564 MOV X0, X8
	0x01E1A568 MOV X1, X31
	0x01E1A56C BL 0x3C32E90
	0x01E1A570 CBZ X0, 0x1E1A600
	0x01E1A574 MOV X1, X31
	0x01E1A578 BL 0x3C3F58C
	0x01E1A57C LDR X0, [X19 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25BF000
	006 Move X21, 0x22DD000
	007 Move W8, [X20+3596]
	008 Move X21, [X21+2680]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x22E1000
	015 Move X0, [X0+1072]
	016 Call 0x1C17CF4
	017 Move X0, 0x22DE000
	018 Move X0, [X0+2136]
	019 Call 0x1C17CF4
	020 Move X0, 0x22DD000
	021 Move X0, [X0+2680]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3596], W8
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Compare X19, 0
	031 JumpIfEqual {57}
	032 Move W8, [X19+48]
	033 Move X20, 0x22DE000
	034 Move X20, [X20+2136]
	035 Or W8, W8, 8
	036 Move [X19+48], W8
	037 Move X0, [X20]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move X0, [X20]
	043 Move X8, [X0+184]
	044 Move X0, [X8+24]
	045 Compare X0, 0
	046 JumpIfEqual {57}
	047 Move X8, 0x22E1000
	048 Move X8, [X8+1072]
	049 Move X1, X19
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X2, [X8]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Call HashSet`1<Object>.Remove, X0, X1
	056 Return 
	057 Call 0x1C17F20

Method: System.Void Spawned()

Disassembly:
	0x01E1A580 STP S0, S1, [X19 + 0x68]
	0x01E1A584 STR S2, [X19 + 0x70]
	0x01E1A588 CBZ X0, 0x1E1A600
	0x01E1A58C MOV X1, X31
	0x01E1A590 BL 0x3C32E90
	0x01E1A594 CBZ X0, 0x1E1A600
	0x01E1A598 MOV X1, X31
	0x01E1A59C BL 0x3C3F58C
	0x01E1A5A0 LDR X0, [X19 + 0x28]
	0x01E1A5A4 STP S0, S1, [X19 + 0x74]
	0x01E1A5A8 STR S2, [X19 + 0x7C]
	0x01E1A5AC CBZ X0, 0x1E1A600
	0x01E1A5B0 MOV X1, X31
	0x01E1A5B4 BL 0x3C32E90
	0x01E1A5B8 CBZ X0, 0x1E1A600
	0x01E1A5BC MOV X1, X31
	0x01E1A5C0 BL 0x3C3F58C
	0x01E1A5C4 MOV X0, X19
	0x01E1A5C8 MOV X1, X31
	0x01E1A5CC STP S0, S1, [X19 + 0x80]
	0x01E1A5D0 STR S2, [X19 + 0x88]
	0x01E1A5D4 STR W31, [X19 + 0xC8]
	0x01E1A5D8 BL 0x3C32E90
	0x01E1A5DC CBZ X0, 0x1E1A600
	0x01E1A5E0 MOV X1, X31
	0x01E1A5E4 BL 0x3C3F58C
	0x01E1A5E8 STP S0, S1, [X19 + 0xE8]
	0x01E1A5EC STR S2, [X19 + 0xF0]
	0x01E1A5F0 LDP X20, X19, [X31 + 0x20]
	0x01E1A5F4 LDP X22, X21, [X31 + 0x10]
	0x01E1A5F8 LDR X30, [X31], #0x30
	0x01E1A5FC RET
	0x01E1A600 BL 0x1C16F20
	0x01E1A604 SUB X31, X31, 0x70
	0x01E1A608 STP D15, D14, [X31 + 0x10]
	0x01E1A60C STP D13, D12, [X31 + 0x20]
	0x01E1A610 STP D11, D10, [X31 + 0x30]
	0x01E1A614 STP D9, D8, [X31 + 0x40]
	0x01E1A618 STP X30, X21, [X31 + 0x50]
	0x01E1A61C STP X20, X19, [X31 + 0x60]
	0x01E1A620 LDR X1, [X0 + 0x50]
	0x01E1A624 LDR V0, [X0 + 0x100]
	0x01E1A628 LDR V1, [X0 + 0x104]
	0x01E1A62C LDR V2, [X0 + 0x108]
	0x01E1A630 MOV X19, X0
	0x01E1A634 BL 0x1E1A85C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25BF000
	006 Move X21, 0x22DE000
	007 Move W8, [X20+3597]
	008 Move X21, [X21+2136]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x22E1000
	015 Move X0, [X0+1080]
	016 Call 0x1C17CF4
	017 Move X0, 0x22DE000
	018 Move X0, [X0+2136]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3597], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call NetworkBehaviour.Spawned, X0
	025 Move X0, [X21]
	026 Move X20, [X19+152]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Compare X20, 0
	033 JumpIfEqual {58}
	034 Move X8, [X0+184]
	035 Move X0, X20
	036 Move X1, X31
	037 Move S1, [X8+4]
	038 Move S2, [X8+8]
	039 Move V0, [X8]
	040 Call Transform.set_localPosition, X0, X1
	041 Move X0, X19
	042 Call MobControllerMine.HandleIsExplodedChanged, X0
	043 Move X8, [X21]
	044 Move X8, [X8+184]
	045 Move X0, [X8+24]
	046 Compare X0, 0
	047 JumpIfEqual {58}
	048 Move X8, 0x22E1000
	049 Move X8, [X8+1080]
	050 Move X1, X19
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X2, [X8]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Call HashSet`1<Object>.Add, X0, X1
	057 Return 
	058 Call 0x1C17F20

Method: System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)

Disassembly:
	0x01E1A664 LDRB W8, [X20 + 0x784]
	0x01E1A668 MOV V11.16B, V0.16B
	0x01E1A66C MOV V12.16B, V1.16B
	0x01E1A670 MOV V13.16B, V2.16B
	0x01E1A674 CBNZ W8, 0x1E1A68C
	0x01E1A678 ADRP X0, 0x22D9000
	0x01E1A67C LDR X0, [X0 + 0x5A8]
	0x01E1A680 BL 0x1C16CF4
	0x01E1A684 MOVZ W8, 0x1
	0x01E1A688 STRB W8, [X20 + 0x784]
	0x01E1A68C ADRP X20, 0x22D9000
	0x01E1A690 LDR X20, [X20 + 0x5A8]
	0x01E1A694 FSUB S11, S8, S11
	0x01E1A698 FSUB S9, S9, S12
	0x01E1A69C FSUB S8, S10, S13
	0x01E1A6A0 LDR X0, [X20]
	0x01E1A6A4 LDR W8, [X0 + 0xE0]
	0x01E1A6A8 CBNZ W8, 0x1E1A6B0
	0x01E1A6AC BL 0x1C16DFC
	0x01E1A6B0 FMUL S0, S11, S11
	0x01E1A6B4 FMUL S1, S9, S9
	0x01E1A6B8 LDR V2, [X19 + 0x9C]
	0x01E1A6BC FADD S0, S0, S1
	0x01E1A6C0 FMUL S1, S8, S8
	0x01E1A6C4 FADD S0, S1, S0
	0x01E1A6C8 FSQRT S0, S0
	0x01E1A6CC FCMP S0, S2
	0x01E1A6D0 B.PL 0x1E1A6EC
	0x01E1A6D4 LDR X1, [X19 + 0x50]
	0x01E1A6D8 LDR V0, [X19 + 0x100]
	0x01E1A6DC LDR V1, [X19 + 0x104]
	0x01E1A6E0 LDR V2, [X19 + 0x108]
	0x01E1A6E4 BL 0x1E1A85C
	0x01E1A6E8 B 0x1E1A838
	0x01E1A6EC LDR X0, [X19 + 0x28]
	0x01E1A6F0 CBZ X0, 0x1E1A858
	0x01E1A6F4 MOV X1, X31
	0x01E1A6F8 BL 0x3C32E90
	0x01E1A6FC CBZ X0, 0x1E1A858
	0x01E1A700 MOV X1, X31
	0x01E1A704 BL 0x3C3F58C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x25BF000
	008 Move X22, 0x22DE000
	009 Move W8, [X23+3598]
	010 Move X22, [X22+2136]
	011 Move W21, W2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x22E1000
	019 Move X0, [X0+1072]
	020 Call 0x1C17CF4
	021 Move X0, 0x22DE000
	022 Move X0, [X0+2136]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+3598], W8
	026 And W2, W21, 1
	027 Move X0, X19
	028 Move X1, X20
	029 Move X3, X31
	030 Call NetworkBehaviour.Despawned, X0, X1, X2
	031 Move X0, [X22]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X22]
	037 Move X8, [X0+184]
	038 Move X0, [X8+24]
	039 Compare X0, 0
	040 JumpIfEqual {53}
	041 Move X8, 0x22E1000
	042 Move X8, [X8+1072]
	043 Move X1, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X2, [X8]
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Call HashSet`1<Object>.Remove, X0, X1
	052 Return 
	053 Call 0x1C17F20

Method: System.Void Render()

Disassembly:
	0x01E1A708 LDR V3, [X19 + 0x108]
	0x01E1A70C MOV V8.16B, V0.16B
	0x01E1A710 MOV V9.16B, V1.16B
	0x01E1A714 LDR X1, [X19 + 0x50]
	0x01E1A718 LDR V0, [X19 + 0x100]
	0x01E1A71C LDR V1, [X19 + 0x104]
	0x01E1A720 MOV V10.16B, V2.16B
	0x01E1A724 MOV V2.16B, V3.16B
	0x01E1A728 BL 0x1E1A85C
	0x01E1A72C LDR X0, [X19 + 0x28]
	0x01E1A730 CBZ X0, 0x1E1A858
	0x01E1A734 MOV X1, X31
	0x01E1A738 MOV V11.16B, V0.16B
	0x01E1A73C MOV V12.16B, V1.16B
	0x01E1A740 MOV V13.16B, V2.16B
	0x01E1A744 STR S10, [X31 + 0xC]
	0x01E1A748 MOV V10.16B, V9.16B
	0x01E1A74C MOV V9.16B, V8.16B
	0x01E1A750 BL 0x3C32E90
	0x01E1A754 CBZ X0, 0x1E1A858
	0x01E1A758 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call SimulationBehaviour.Render, X0
	007 Move X0, X19
	008 Call MobControllerMine.get_isExploded, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {26}
	013 Move X0, X19
	014 Call MobControllerMine.get_resetTimer, X0
	015 Move [X31+8], W0
	016 Move X1, [X19+56]
	017 Add X0, X31, 8
	018 Move X2, X31
	019 Call TickTimer.Expired, X0, X1
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {26}
	024 Move X0, X19
	025 Call MobControllerMine.Reset, X0
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Add X31, X31, 32
	029 Return 

Method: System.Boolean IsHand(UnityEngine.Collider collider)

Disassembly:
	0x01E1A790 FSUB S14, S11, S14
	0x01E1A794 FSUB S11, S12, S15
	0x01E1A798 FSUB S8, S13, S8
	0x01E1A79C LDR W8, [X0 + 0xE0]
	0x01E1A7A0 CBNZ W8, 0x1E1A7A8
	0x01E1A7A4 BL 0x1C16DFC
	0x01E1A7A8 FMUL S0, S14, S14
	0x01E1A7AC FMUL S1, S11, S11
	0x01E1A7B0 ADRP X8, 0xFFFFFFFFFECD0000
	0x01E1A7B4 FADD S0, S0, S1
	0x01E1A7B8 LDR V1, [X8 + 0x17C]
	0x01E1A7BC FMUL S2, S8, S8
	0x01E1A7C0 FADD S0, S2, S0
	0x01E1A7C4 FSQRT S2, S0
	0x01E1A7C8 FCMP S2, S1
	0x01E1A7CC B.LE 0x1E1A7E0
	0x01E1A7D0 FDIV S0, S14, S2
	0x01E1A7D4 FDIV S1, S11, S2
	0x01E1A7D8 FDIV S2, S8, S2
	0x01E1A7DC B 0x1E1A818
	0x01E1A7E0 ADRP X20, 0x25BE000
	0x01E1A7E4 LDRB W8, [X20 + 0x783]
	0x01E1A7E8 CBNZ W8, 0x1E1A800
	0x01E1A7EC ADRP X0, 0x22D9000
	0x01E1A7F0 LDR X0, [X0 + 0x5A0]
	0x01E1A7F4 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25BF000
	005 Move W8, [X20+3599]
	006 Move X19, X1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22DD000
	012 Move X0, [X0+1064]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3599], W8
	016 Compare X19, 0
	017 JumpIfEqual {34}
	018 Move X0, X19
	019 Move X1, X31
	020 Call Component.get_gameObject, X0
	021 Compare X0, 0
	022 JumpIfEqual {34}
	023 Move X19, 0x22DD000
	024 Move X19, [X19+1064]
	025 Move X1, X31
	026 Call GameObject.get_tag, X0
	027 Move X1, [X19]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Call String.op_Equality, X0, X1
	033 Return X0
	034 Call 0x1C17F20

Method: System.Void OnTriggerEnter(UnityEngine.Collider other)

Disassembly:
	0x01E1A7F8 MOVZ W8, 0x1
	0x01E1A7FC STRB W8, [X20 + 0x783]
	0x01E1A800 ADRP X8, 0x22D9000
	0x01E1A804 LDR X8, [X8 + 0x5A0]
	0x01E1A808 LDR X8, [X8]
	0x01E1A80C LDR X8, [X8 + 0xB8]
	0x01E1A810 LDP S0, S1, [X8]
	0x01E1A814 LDR V2, [X8 + 0x8]
	0x01E1A818 LDR V3, [X19 + 0x9C]
	0x01E1A81C LDR V4, [X31 + 0xC]
	0x01E1A820 FMUL S0, S0, S3
	0x01E1A824 FMUL S1, S1, S3
	0x01E1A828 FMUL S2, S2, S3
	0x01E1A82C FADD S0, S9, S0
	0x01E1A830 FADD S1, S10, S1
	0x01E1A834 FADD S2, S4, S2
	0x01E1A838 LDP X20, X19, [X31 + 0x60]
	0x01E1A83C LDP X30, X21, [X31 + 0x50]
	0x01E1A840 LDP D9, D8, [X31 + 0x40]
	0x01E1A844 LDP D11, D10, [X31 + 0x30]
	0x01E1A848 LDP D13, D12, [X31 + 0x20]
	0x01E1A84C LDP D15, D14, [X31 + 0x10]
	0x01E1A850 ADD X31, X31, 0x70
	0x01E1A854 RET
	0x01E1A858 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X19, X0
	006 Call MobControllerMine.get_isExploded, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {17}
	011 Move X0, X19
	012 Call MobControllerMine.get_isStepped, X0
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {21}
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return 
	021 Compare X20, 0
	022 JumpIfEqual {40}
	023 Move X0, X20
	024 Move X1, X31
	025 Call Collider.get_isTrigger, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {36}
	030 Move X1, X20
	031 Call MobControllerMine.IsHand, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {17}
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Call 0x1C17F20

Method: System.Void OnTriggerExit(UnityEngine.Collider other)

Disassembly:
	0x01E1AA64 FSUB S8, S13, S8
	0x01E1AA68 LDR W8, [X0 + 0xE0]
	0x01E1AA6C CBNZ W8, 0x1E1AA74
	0x01E1AA70 BL 0x1C16DFC
	0x01E1AA74 FMUL S0, S14, S14
	0x01E1AA78 FMUL S1, S11, S11
	0x01E1AA7C ADRP X8, 0xFFFFFFFFFECD0000
	0x01E1AA80 FADD S0, S0, S1
	0x01E1AA84 LDR V1, [X8 + 0x17C]
	0x01E1AA88 FMUL S2, S8, S8
	0x01E1AA8C FADD S0, S2, S0
	0x01E1AA90 FSQRT S2, S0
	0x01E1AA94 FCMP S2, S1
	0x01E1AA98 B.LE 0x1E1AAAC
	0x01E1AA9C FDIV S0, S14, S2
	0x01E1AAA0 FDIV S1, S11, S2
	0x01E1AAA4 FDIV S2, S8, S2
	0x01E1AAA8 B 0x1E1AAE4
	0x01E1AAAC ADRP X20, 0x25BE000
	0x01E1AAB0 LDRB W8, [X20 + 0x783]
	0x01E1AAB4 CBNZ W8, 0x1E1AACC
	0x01E1AAB8 ADRP X0, 0x22D9000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X19, X0
	006 Call MobControllerMine.get_isExploded, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {15}
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Return 
	015 Compare X20, 0
	016 JumpIfEqual {34}
	017 Move X0, X20
	018 Move X1, X31
	019 Call Collider.get_isTrigger, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {30}
	024 Move X1, X20
	025 Call MobControllerMine.IsHand, X0, X1
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {11}
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Call 0x1C17F20

Method: System.Void RPC_TriggerEnter()

Disassembly:
	0x01E1A85C STP D13, D12, [X31 - 0x40]!
	0x01E1A860 STP D11, D10, [X31 + 0x10]
	0x01E1A864 STP D9, D8, [X31 + 0x20]
	0x01E1A868 STP X30, X19, [X31 + 0x30]
	0x01E1A86C CBZ X1, 0x1E1A8D8
	0x01E1A870 MOV X19, X1
	0x01E1A874 MOV X0, X1
	0x01E1A878 MOV X1, X31
	0x01E1A87C MOV V8.16B, V2.16B
	0x01E1A880 MOV V9.16B, V1.16B
	0x01E1A884 MOV V10.16B, V0.16B
	0x01E1A888 BL 0x3C3F58C
	0x01E1A88C MOV X0, X19
	0x01E1A890 MOV X1, X31
	0x01E1A894 MOV V11.16B, V0.16B
	0x01E1A898 MOV V12.16B, V1.16B
	0x01E1A89C MOV V13.16B, V2.16B
	0x01E1A8A0 BL 0x3C3DEB4
	0x01E1A8A4 MOV V4.16B, V10.16B
	0x01E1A8A8 MOV V5.16B, V9.16B
	0x01E1A8AC MOV V6.16B, V8.16B
	0x01E1A8B0 MOV X0, X31
	0x01E1A8B4 BL 0x3C2A9FC
	0x01E1A8B8 FADD S0, S11, S0
	0x01E1A8BC LDP X30, X19, [X31 + 0x30]
	0x01E1A8C0 LDP D9, D8, [X31 + 0x20]
	0x01E1A8C4 LDP D11, D10, [X31 + 0x10]
	0x01E1A8C8 FADD S1, S12, S1
	0x01E1A8CC FADD S2, S13, S2
	0x01E1A8D0 LDP D13, D12, [X31], #0x40
	0x01E1A8D4 RET
	0x01E1A8D8 BL 0x1C16F20
	0x01E1A8DC SUB X31, X31, 0x70
	0x01E1A8E0 STP D15, D14, [X31 + 0x10]
	0x01E1A8E4 STP D13, D12, [X31 + 0x20]
	0x01E1A8E8 STP D11, D10, [X31 + 0x30]
	0x01E1A8EC STP D9, D8, [X31 + 0x40]
	0x01E1A8F0 STP X30, X21, [X31 + 0x50]
	0x01E1A8F4 STP X20, X19, [X31 + 0x60]
	0x01E1A8F8 LDR X1, [X0 + 0x48]
	0x01E1A8FC LDP S0, S1, [X0 + 0xF4]
	0x01E1A900 LDR V2, [X0 + 0xFC]
	0x01E1A904 MOV X19, X0
	0x01E1A908 BL 0x1E1A85C
	0x01E1A90C LDR X0, [X19 + 0x28]
	0x01E1A910 CBZ X0, 0x1E1AB24
	0x01E1A914 MOV X1, X31
	0x01E1A918 MOV V8.16B, V0.16B
	0x01E1A91C MOV V9.16B, V1.16B
	0x01E1A920 MOV V10.16B, V2.16B
	0x01E1A924 BL 0x3C32E90
	0x01E1A928 CBZ X0, 0x1E1AB24
	0x01E1A92C MOV X1, X31
	0x01E1A930 BL 0x3C3F58C
	0x01E1A934 ADRP X20, 0x25BE000
	0x01E1A938 LDRB W8, [X20 + 0x784]
	0x01E1A93C MOV V11.16B, V0.16B
	0x01E1A940 MOV V12.16B, V1.16B
	0x01E1A944 MOV V13.16B, V2.16B
	0x01E1A948 CBNZ W8, 0x1E1A960
	0x01E1A94C ADRP X0, 0x22D9000
	0x01E1A950 LDR X0, [X0 + 0x5A8]
	0x01E1A954 BL 0x1C16CF4
	0x01E1A958 MOVZ W8, 0x1
	0x01E1A95C STRB W8, [X20 + 0x784]
	0x01E1A960 ADRP X20, 0x22D9000
	0x01E1A964 LDR X20, [X20 + 0x5A8]
	0x01E1A968 FSUB S11, S8, S11
	0x01E1A96C FSUB S9, S9, S12
	0x01E1A970 FSUB S8, S10, S13
	0x01E1A974 LDR X0, [X20]
	0x01E1A978 LDR W8, [X0 + 0xE0]
	0x01E1A97C CBNZ W8, 0x1E1A984
	0x01E1A980 BL 0x1C16DFC
	0x01E1A984 FMUL S0, S11, S11
	0x01E1A988 FMUL S1, S9, S9
	0x01E1A98C LDR V2, [X19 + 0x9C]
	0x01E1A990 FADD S0, S0, S1
	0x01E1A994 FMUL S1, S8, S8
	0x01E1A998 FADD S0, S1, S0
	0x01E1A99C FSQRT S0, S0
	0x01E1A9A0 FCMP S0, S2
	0x01E1A9A4 B.PL 0x1E1A9BC
	0x01E1A9A8 LDR X1, [X19 + 0x48]
	0x01E1A9AC LDP S0, S1, [X19 + 0xF4]
	0x01E1A9B0 LDR V2, [X19 + 0xFC]
	0x01E1A9B4 BL 0x1E1A85C
	0x01E1A9B8 B 0x1E1AB04
	0x01E1A9BC LDR X0, [X19 + 0x28]
	0x01E1A9C0 CBZ X0, 0x1E1AB24
	0x01E1A9C4 MOV X1, X31
	0x01E1A9C8 BL 0x3C32E90
	0x01E1A9CC CBZ X0, 0x1E1AB24
	0x01E1A9D0 MOV X1, X31
	0x01E1A9D4 BL 0x3C3F58C
	0x01E1A9D8 LDR V3, [X19 + 0xFC]
	0x01E1A9DC MOV V8.16B, V0.16B
	0x01E1A9E0 MOV V9.16B, V1.16B
	0x01E1A9E4 LDR X1, [X19 + 0x48]
	0x01E1A9E8 LDP S0, S1, [X19 + 0xF4]
	0x01E1A9EC MOV V10.16B, V2.16B
	0x01E1A9F0 MOV V2.16B, V3.16B
	0x01E1A9F4 BL 0x1E1A85C
	0x01E1A9F8 LDR X0, [X19 + 0x28]
	0x01E1A9FC CBZ X0, 0x1E1AB24
	0x01E1AA00 MOV X1, X31
	0x01E1AA04 MOV V11.16B, V0.16B
	0x01E1AA08 MOV V12.16B, V1.16B
	0x01E1AA0C MOV V13.16B, V2.16B
	0x01E1AA10 STR S10, [X31 + 0xC]
	0x01E1AA14 MOV V10.16B, V9.16B
	0x01E1AA18 MOV V9.16B, V8.16B
	0x01E1AA1C BL 0x3C32E90
	0x01E1AA20 CBZ X0, 0x1E1AB24
	0x01E1AA24 MOV X1, X31
	0x01E1AA28 BL 0x3C3F58C
	0x01E1AA2C ADRP X21, 0x25BE000
	0x01E1AA30 LDRB W8, [X21 + 0x785]
	0x01E1AA34 MOV V14.16B, V0.16B
	0x01E1AA38 MOV V15.16B, V1.16B
	0x01E1AA3C MOV V8.16B, V2.16B
	0x01E1AA40 CBNZ W8, 0x1E1AA58
	0x01E1AA44 ADRP X0, 0x22D9000
	0x01E1AA48 LDR X0, [X0 + 0x5A8]
	0x01E1AA4C BL 0x1C16CF4
	0x01E1AA50 MOVZ W8, 0x1
	0x01E1AA54 STRB W8, [X21 + 0x785]
	0x01E1AA58 LDR X0, [X20]
	0x01E1AA5C FSUB S14, S11, S14
	0x01E1AA60 FSUB S11, S12, S15

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25BF000
	006 Move W8, [X20+3600]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x22DE000
	013 Move X0, [X0+2136]
	014 Call 0x1C17CF4
	015 Move X0, 0x22DD000
	016 Move X0, [X0+2680]
	017 Call 0x1C17CF4
	018 Move X0, 0x22E1000
	019 Move X0, [X0+1088]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3600], W8
	023 Move W8, [X19+88]
	024 Compare W8, 0
	025 JumpIfEqual {71}
	026 Move [X19+88], W31
	027 Move X0, X19
	028 Call MobControllerMine.get_isStepped, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {87}
	033 Move W1, 1
	034 Move X0, X19
	035 Call MobControllerMine.set_isStepped, X0, X1
	036 Move X21, 0x22DE000
	037 Move X21, [X21+2136]
	038 Move X20, [X19+152]
	039 Move X0, [X21]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1C17DFC
	044 Move X0, [X21]
	045 Compare X20, 0
	046 JumpIfEqual {168}
	047 Move X8, [X0+184]
	048 Move X0, X20
	049 Move X1, X31
	050 Move S1, [X8+16]
	051 Move S2, [X8+20]
	052 Move V0, [X8+12]
	053 Call Transform.set_localPosition, X0, X1
	054 Move X20, [X19+128]
	055 Move X0, X19
	056 Move X1, X31
	057 Call Component.get_transform, X0
	058 Compare X0, 0
	059 JumpIfEqual {168}
	060 Move X1, X31
	061 Call Transform.get_position, X0
	062 Move X0, X20
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move S3, 1
	066 Move X1, X31
	067 Move X30, [X31+32]
	068 Move X21, [X31+40]
	069 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	070 Return 
	071 Move X20, 0x22DD000
	072 Move X20, [X20+2680]
	073 Move X0, [X20]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X0, X19
	079 Move X1, X31
	080 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	081 Move X0, [X19+56]
	082 Compare X0, 0
	083 JumpIfEqual {168}
	084 Move X1, X31
	085 Call NetworkRunner.get_Stage, X0
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X20, [X31+16]
	088 Move X19, [X31+24]
	089 Move X30, [X31+32]
	090 Move X21, [X31+40]
	091 Return 
	092 Move X0, [X19+64]
	093 Compare X0, 0
	094 JumpIfEqual {168}
	095 Move X1, X31
	096 Call NetworkObject.GetLocalAuthorityMask, X0
	097 And W31, W0, 7
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfEqual {27}
	102 Move X8, [X19+56]
	103 Compare X8, 0
	104 JumpIfEqual {168}
	105 Move X0, [X8+80]
	106 Compare X0, 0
	107 JumpIfEqual {168}
	108 Move X1, X31
	109 Call Simulation.HasAnyActiveConnections, X0
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfNotEqual {87}
	114 Move X8, [X19+56]
	115 Compare X8, 0
	116 JumpIfEqual {168}
	117 Move X0, [X8+80]
	118 Move W1, 8
	119 Move X2, X31
	120 Call SimulationMessage.Allocate, X0, X1
	121 Move X8, [X19+64]
	122 Compare X8, 0
	123 JumpIfEqual {168}
	124 Move X8, [X8+32]
	125 Move X20, X0
	126 Compare X8, 0
	127 JumpIfEqual {147}
	128 Move W0, [X8]
	129 Move X0, [X20]
	130 Move X19, [X19+64]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {135}
	134 Call 0x1C17DFC
	135 Move X8, 0x22E1000
	136 Move X8, [X8+1088]
	137 Move X1, X19
	138 Move X20, [X31+16]
	139 Move X19, [X31+24]
	140 Move W2, 7
	141 Move X0, [X8]
	142 Move X3, X31
	143 Move X30, [X31+32]
	144 Move X21, [X31+40]
	145 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	146 Return 
	147 Move X0, X31
	148 Move W1, [X19+104]
	149 Move W2, 1
	150 Move X3, X31
	151 Call RpcHeader.Create, X0, X1, X2
	152 Move [X20+28], X0
	153 Compare X20, 0
	154 JumpIfEqual {168}
	155 Move W8, 64
	156 Move [X20+12], W8
	157 Move X0, [X19+56]
	158 Compare X0, 0
	159 JumpIfEqual {168}
	160 Move X1, X20
	161 Move X20, [X31+16]
	162 Move X19, [X31+24]
	163 Move X2, X31
	164 Move X30, [X31+32]
	165 Move X21, [X31+40]
	166 Call NetworkRunner.SendRpc, X0, X1
	167 Return 
	168 Call 0x1C17F20

Method: System.Void RPC_TriggerExit()

Disassembly:
	0x01E1AABC LDR X0, [X0 + 0x5A0]
	0x01E1AAC0 BL 0x1C16CF4
	0x01E1AAC4 MOVZ W8, 0x1
	0x01E1AAC8 STRB W8, [X20 + 0x783]
	0x01E1AACC ADRP X8, 0x22D9000
	0x01E1AAD0 LDR X8, [X8 + 0x5A0]
	0x01E1AAD4 LDR X8, [X8]
	0x01E1AAD8 LDR X8, [X8 + 0xB8]
	0x01E1AADC LDP S0, S1, [X8]
	0x01E1AAE0 LDR V2, [X8 + 0x8]
	0x01E1AAE4 LDR V3, [X19 + 0x9C]
	0x01E1AAE8 LDR V4, [X31 + 0xC]
	0x01E1AAEC FMUL S0, S0, S3
	0x01E1AAF0 FMUL S1, S1, S3
	0x01E1AAF4 FMUL S2, S2, S3
	0x01E1AAF8 FADD S0, S9, S0
	0x01E1AAFC FADD S1, S10, S1
	0x01E1AB00 FADD S2, S4, S2
	0x01E1AB04 LDP X20, X19, [X31 + 0x60]
	0x01E1AB08 LDP X30, X21, [X31 + 0x50]
	0x01E1AB0C LDP D9, D8, [X31 + 0x40]
	0x01E1AB10 LDP D11, D10, [X31 + 0x30]
	0x01E1AB14 LDP D13, D12, [X31 + 0x20]
	0x01E1AB18 LDP D15, D14, [X31 + 0x10]
	0x01E1AB1C ADD X31, X31, 0x70
	0x01E1AB20 RET
	0x01E1AB24 BL 0x1C16F20
	0x01E1AB28 LDR V3, [X0 + 0x1D0]
	0x01E1AB2C LDR V4, [X0 + 0x1D8]
	0x01E1AB30 MOV V0.S[1], V1.S[0]
	0x01E1AB34 FADD V0.2S, V0.2S, V3.2S
	0x01E1AB38 FADD S1, S2, S4
	0x01E1AB3C STR D0, [X0 + 0x1D0]
	0x01E1AB40 STR S1, [X0 + 0x1D8]
	0x01E1AB44 RET
	0x01E1AB48 SUB X31, X31, 0x70
	0x01E1AB4C STP D13, D12, [X31 + 0x20]
	0x01E1AB50 STP D11, D10, [X31 + 0x30]
	0x01E1AB54 STP D9, D8, [X31 + 0x40]
	0x01E1AB58 STR X30, [X31 + 0x50]
	0x01E1AB5C STP X20, X19, [X31 + 0x60]
	0x01E1AB60 ADRP X20, 0x25BE000
	0x01E1AB64 LDRB W8, [X20 + 0xE1E]
	0x01E1AB68 MOV V8.16B, V5.16B
	0x01E1AB6C MOV V9.16B, V4.16B
	0x01E1AB70 MOV V10.16B, V3.16B
	0x01E1AB74 MOV V11.16B, V2.16B
	0x01E1AB78 MOV V12.16B, V1.16B
	0x01E1AB7C MOV V13.16B, V0.16B
	0x01E1AB80 MOV X19, X0
	0x01E1AB84 TBNZ X8, 0x0, 0x1E1AB9C
	0x01E1AB88 ADRP X0, 0x22E0000
	0x01E1AB8C LDR X0, [X0 + 0x478]
	0x01E1AB90 BL 0x1C16CF4
	0x01E1AB94 MOVZ W8, 0x1
	0x01E1AB98 STRB W8, [X20 + 0xE1E]
	0x01E1AB9C LDR X0, [X19 + 0x1E0]
	0x01E1ABA0 CBZ X0, 0x1E1AC30
	0x01E1ABA4 ADRP X9, 0x22E0000
	0x01E1ABA8 LDR X9, [X9 + 0x478]
	0x01E1ABAC LDR W10, [X0 + 0x1C]
	0x01E1ABB0 LDR X8, [X0 + 0x10]
	0x01E1ABB4 LDR X9, [X9]
	0x01E1ABB8 ADD W10, W10, 0x1
	0x01E1ABBC STR W10, [X0 + 0x1C]
	0x01E1ABC0 CBZ X8, 0x1E1AC30
	0x01E1ABC4 LDRSW X10, [X0 + 0x18]
	0x01E1ABC8 LDR W11, [X8 + 0x18]
	0x01E1ABCC CMP W10, W11
	0x01E1ABD0 B.CS 0x1E1ABF4
	0x01E1ABD4 MOVZ W11, 0x18
	0x01E1ABD8 ADD W9, W10, 0x1
	0x01E1ABDC MADD X8, X10, X11, X8
	0x01E1ABE0 STR W9, [X0 + 0x18]
	0x01E1ABE4 STP S13, S12, [X8 + 0x20]
	0x01E1ABE8 STP S11, S10, [X8 + 0x28]
	0x01E1ABEC STP S9, S8, [X8 + 0x30]
	0x01E1ABF0 B 0x1E1AC14
	0x01E1ABF4 LDR X8, [X9 + 0x20]
	0x01E1ABF8 ADD X1, X31, 0x8
	0x01E1ABFC LDR X8, [X8 + 0xC0]
	0x01E1AC00 LDR X2, [X8 + 0x70]
	0x01E1AC04 STP S13, S12, [X31 + 0x8]
	0x01E1AC08 STP S11, S10, [X31 + 0x10]
	0x01E1AC0C STP S9, S8, [X31 + 0x18]
	0x01E1AC10 BL 0x311A6E8
	0x01E1AC14 LDP X20, X19, [X31 + 0x60]
	0x01E1AC18 LDR X30, [X31 + 0x50]
	0x01E1AC1C LDP D9, D8, [X31 + 0x40]
	0x01E1AC20 LDP D11, D10, [X31 + 0x30]
	0x01E1AC24 LDP D13, D12, [X31 + 0x20]
	0x01E1AC28 ADD X31, X31, 0x70
	0x01E1AC2C RET
	0x01E1AC30 BL 0x1C16F20
	0x01E1AC34 STR S0, [X0 + 0x1E8]
	0x01E1AC38 RET
	0x01E1AC3C ADD X8, X0, 0x1EC
	0x01E1AC40 LDR V3, [X8]
	0x01E1AC44 LDR V4, [X8 + 0x8]
	0x01E1AC48 MOV V0.S[1], V1.S[0]
	0x01E1AC4C FADD V0.2S, V0.2S, V3.2S
	0x01E1AC50 FADD S1, S2, S4
	0x01E1AC54 STR D0, [X8]
	0x01E1AC58 STR S1, [X8 + 0x8]
	0x01E1AC5C LDR W8, [X0 + 0x1F8]
	0x01E1AC60 ADD W8, W8, 0x1
	0x01E1AC64 STR W8, [X0 + 0x1F8]
	0x01E1AC68 RET
	0x01E1AC6C STP D13, D12, [X31 - 0x50]!
	0x01E1AC70 STP D11, D10, [X31 + 0x10]
	0x01E1AC74 STP D9, D8, [X31 + 0x20]
	0x01E1AC78 STR X30, [X31 + 0x30]
	0x01E1AC7C STP X20, X19, [X31 + 0x40]
	0x01E1AC80 MOV X19, X0
	0x01E1AC84 MOV X0, X31
	0x01E1AC88 BL 0x3C3C714
	0x01E1AC8C MOV X0, X19
	0x01E1AC90 BL 0x1E1ADA4
	0x01E1AC94 LDR X0, [X19 + 0x90]
	0x01E1AC98 CBZ X0, 0x1E1ADA0
	0x01E1AC9C LDR V12, [X19 + 0x130]
	0x01E1ACA0 LDR V13, [X19 + 0x134]
	0x01E1ACA4 MOV X1, X31
	0x01E1ACA8 BL 0x3C8E868
	0x01E1ACAC ADRP X20, 0x25BE000
	0x01E1ACB0 LDRB W8, [X20 + 0x784]
	0x01E1ACB4 MOV V8.16B, V0.16B
	0x01E1ACB8 MOV V9.16B, V1.16B
	0x01E1ACBC MOV V10.16B, V2.16B
	0x01E1ACC0 CBNZ W8, 0x1E1ACD8
	0x01E1ACC4 ADRP X0, 0x22D9000
	0x01E1ACC8 LDR X0, [X0 + 0x5A8]
	0x01E1ACCC BL 0x1C16CF4
	0x01E1ACD0 MOVZ W8, 0x1
	0x01E1ACD4 STRB W8, [X20 + 0x784]
	0x01E1ACD8 ADRP X8, 0x22D9000
	0x01E1ACDC LDR X8, [X8 + 0x5A8]
	0x01E1ACE0 LDR X0, [X8]
	0x01E1ACE4 LDR W8, [X0 + 0xE0]
	0x01E1ACE8 CBNZ W8, 0x1E1ACF0
	0x01E1ACEC BL 0x1C16DFC
	0x01E1ACF0 FCMP S12, S13
	0x01E1ACF4 FMOV S11, W31
	0x01E1ACF8 B.EQ 0x1E1AD38
	0x01E1ACFC FMUL S0, S8, S8
	0x01E1AD00 FMUL S1, S9, S9
	0x01E1AD04 FMUL S2, S10, S10
	0x01E1AD08 FADD S0, S0, S1
	0x01E1AD0C FADD S0, S2, S0
	0x01E1AD10 FSQRT S0, S0
	0x01E1AD14 FSUB S0, S0, S12
	0x01E1AD18 FSUB S1, S13, S12
	0x01E1AD1C FDIV S0, S0, S1
	0x01E1AD20 FCMP S0, 0x0
	0x01E1AD24 B.MI 0x1E1AD38
	0x01E1AD28 FMOV S11, 1
	0x01E1AD2C FCMP S0, S11
	0x01E1AD30 B.GT 0x1E1AD38
	0x01E1AD34 MOV V11.16B, V0.16B
	0x01E1AD38 LDR X19, [X19 + 0x128]
	0x01E1AD3C CBZ X19, 0x1E1ADA0
	0x01E1AD40 MOV X0, X19
	0x01E1AD44 MOV X1, X31
	0x01E1AD48 BL 0x3BFC8A0
	0x01E1AD4C MOV X0, X31
	0x01E1AD50 MOV V8.16B, V0.16B
	0x01E1AD54 BL 0x3C3C714
	0x01E1AD58 FMOV S1, 7
	0x01E1AD5C FMOV S2, 1
	0x01E1AD60 FMUL S0, S0, S1
	0x01E1AD64 FMOV S3, W31
	0x01E1AD68 FMIN S1, S0, S2
	0x01E1AD6C FCMP S0, 0x0
	0x01E1AD70 FCSEL S0, S1, S3, PL
	0x01E1AD74 FSUB S1, S11, S8
	0x01E1AD78 FMUL S0, S1, S0
	0x01E1AD7C FADD S0, S8, S0
	0x01E1AD80 MOV X0, X19
	0x01E1AD84 LDP X20, X19, [X31 + 0x40]
	0x01E1AD88 LDR X30, [X31 + 0x30]
	0x01E1AD8C LDP D9, D8, [X31 + 0x20]
	0x01E1AD90 LDP D11, D10, [X31 + 0x10]
	0x01E1AD94 MOV X1, X31
	0x01E1AD98 LDP D13, D12, [X31], #0x50
	0x01E1AD9C B 0x3BFC8DC
	0x01E1ADA0 BL 0x1C16F20
	0x01E1ADA4 STP D15, D14, [X31 - 0xA0]!
	0x01E1ADA8 STP D13, D12, [X31 + 0x10]
	0x01E1ADAC STP D11, D10, [X31 + 0x20]
	0x01E1ADB0 STP D9, D8, [X31 + 0x30]
	0x01E1ADB4 STP X29, X30, [X31 + 0x40]
	0x01E1ADB8 STP X28, X27, [X31 + 0x50]
	0x01E1ADBC STP X26, X25, [X31 + 0x60]
	0x01E1ADC0 STP X24, X23, [X31 + 0x70]
	0x01E1ADC4 STP X22, X21, [X31 + 0x80]
	0x01E1ADC8 STP X20, X19, [X31 + 0x90]
	0x01E1ADCC SUB X31, X31, 0x160
	0x01E1ADD0 ADRP X20, 0x25BE000
	0x01E1ADD4 LDRB W8, [X20 + 0xE1F]
	0x01E1ADD8 MOV X19, X0
	0x01E1ADDC STR D0, [X31 + 0x60]
	0x01E1ADE0 TBNZ X8, 0x0, 0x1E1AE40
	0x01E1ADE4 ADRP X0, 0x22E0000
	0x01E1ADE8 LDR X0, [X0 + 0x480]
	0x01E1ADEC BL 0x1C16CF4
	0x01E1ADF0 ADRP X0, 0x22E0000
	0x01E1ADF4 LDR X0, [X0 + 0x488]
	0x01E1ADF8 BL 0x1C16CF4
	0x01E1ADFC ADRP X0, 0x22E0000
	0x01E1AE00 LDR X0, [X0 + 0x490]
	0x01E1AE04 BL 0x1C16CF4
	0x01E1AE08 ADRP X0, 0x22E0000
	0x01E1AE0C LDR X0, [X0 + 0x498]
	0x01E1AE10 BL 0x1C16CF4
	0x01E1AE14 ADRP X0, 0x22E0000
	0x01E1AE18 LDR X0, [X0 + 0x4A0]
	0x01E1AE1C BL 0x1C16CF4
	0x01E1AE20 ADRP X0, 0x22E0000
	0x01E1AE24 LDR X0, [X0 + 0x4A8]
	0x01E1AE28 BL 0x1C16CF4
	0x01E1AE2C ADRP X0, 0x22D9000
	0x01E1AE30 LDR X0, [X0 + 0x5F8]
	0x01E1AE34 BL 0x1C16CF4
	0x01E1AE38 MOVZ W8, 0x1
	0x01E1AE3C STRB W8, [X20 + 0xE1F]
	0x01E1AE40 ADRP X25, 0x25BE000
	0x01E1AE44 LDRB W8, [X25 + 0x783]
	0x01E1AE48 MOVI V0.2D, 0x0
	0x01E1AE4C STR W31, [X31 + 0xF8]
	0x01E1AE50 STR X31, [X31 + 0xF0]
	0x01E1AE54 STUR V0, [X31 + 0xCC]
	0x01E1AE58 STP V0, V0, [X31 + 0xB0]
	0x01E1AE5C STR X31, [X31 + 0xA0]
	0x01E1AE60 STP V0, V0, [X31 + 0x80]
	0x01E1AE64 CBNZ W8, 0x1E1AE7C
	0x01E1AE68 ADRP X0, 0x22D9000
	0x01E1AE6C LDR X0, [X0 + 0x5A0]
	0x01E1AE70 BL 0x1C16CF4
	0x01E1AE74 MOVZ W8, 0x1
	0x01E1AE78 STRB W8, [X25 + 0x783]
	0x01E1AE7C ADRP X20, 0x22D9000
	0x01E1AE80 LDR X20, [X20 + 0x5A0]
	0x01E1AE84 LDR X8, [X20]
	0x01E1AE88 LDR X8, [X8 + 0xB8]
	0x01E1AE8C LDR V0, [X8]
	0x01E1AE90 LDR V12, [X8 + 0x8]
	0x01E1AE94 STR D0, [X31 + 0xE0]
	0x01E1AE98 STR S12, [X31 + 0xE8]
	0x01E1AE9C LDR X0, [X19 + 0x30]
	0x01E1AEA0 STR V0, [X31 + 0x5]
	0x01E1AEA4 CBZ X0, 0x1E1C3B8
	0x01E1AEA8 MOV X1, X31
	0x01E1AEAC BL 0x3C32E90
	0x01E1AEB0 LDR X8, [X19 + 0x28]
	0x01E1AEB4 CBZ X8, 0x1E1C3B8
	0x01E1AEB8 MOV X21, X0
	0x01E1AEBC MOV X0, X8
	0x01E1AEC0 MOV X1, X31
	0x01E1AEC4 BL 0x3C32E90
	0x01E1AEC8 CBZ X0, 0x1E1C3B8
	0x01E1AECC MOV X1, X31
	0x01E1AED0 BL 0x3C3F74C
	0x01E1AED4 CBZ X21, 0x1E1C3B8
	0x01E1AED8 FMOV S0, W31
	0x01E1AEDC FMOV S2, W31
	0x01E1AEE0 MOV X0, X21
	0x01E1AEE4 MOV X1, X31
	0x01E1AEE8 BL 0x3C3F77C
	0x01E1AEEC MOV X0, X19
	0x01E1AEF0 BL 0x1E1A604
	0x01E1AEF4 ADRP X29, 0x25BE000
	0x01E1AEF8 LDR V9, [X19 + 0x68]
	0x01E1AEFC LDRB W8, [X29 + 0xABD]
	0x01E1AF00 LDR V10, [X19 + 0x70]
	0x01E1AF04 MOV V8.16B, V2.16B
	0x01E1AF08 STP V1, V0, [X31 + 0x30]
	0x01E1AF0C MOV V0.S[1], V1.S[0]
	0x01E1AF10 STR V0, [X31 + 0x7]
	0x01E1AF14 CBNZ W8, 0x1E1AF30
	0x01E1AF18 ADRP X0, 0x22D9000
	0x01E1AF1C LDR X0, [X0 + 0x5A0]
	0x01E1AF20 BL 0x1C16CF4
	0x01E1AF24 LDR V0, [X31 + 0x7]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+96], D10
	003 Move [X31+104], D9
	004 Move [X31+112], D8
	005 Move [X31+120], X30
	006 Move [X31+128], X22
	007 Move [X31+136], X21
	008 Move [X31+144], X20
	009 Move [X31+152], X19
	010 Move X20, 0x25BF000
	011 Move W8, [X20+3601]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {55}
	017 Move X0, 0x22DA000
	018 Move X0, [X0+2896]
	019 Call 0x1C17CF4
	020 Move X0, 0x22DE000
	021 Move X0, [X0+2136]
	022 Call 0x1C17CF4
	023 Move X0, 0x22DD000
	024 Move X0, [X0+2680]
	025 Call 0x1C17CF4
	026 Move X0, 0x22DD000
	027 Move X0, [X0+3848]
	028 Call 0x1C17CF4
	029 Move X0, 0x22DD000
	030 Move X0, [X0+2904]
	031 Call 0x1C17CF4
	032 Move X0, 0x22DD000
	033 Move X0, [X0+2912]
	034 Call 0x1C17CF4
	035 Move X0, 0x22DE000
	036 Move X0, [X0+352]
	037 Call 0x1C17CF4
	038 Move X0, 0x22DE000
	039 Move X0, [X0+360]
	040 Call 0x1C17CF4
	041 Move X0, 0x22DA000
	042 Move X0, [X0+1440]
	043 Call 0x1C17CF4
	044 Move X0, 0x22E1000
	045 Move X0, [X0+1096]
	046 Call 0x1C17CF4
	047 Move X0, 0x22DE000
	048 Move X0, [X0+1128]
	049 Call 0x1C17CF4
	050 Move X0, 0x22E1000
	051 Move X0, [X0+1104]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X20+3601], W8
	055 Move W8, [X19+88]
	056 Compare W8, 0
	057 JumpIfEqual {222}
	058 Move [X19+88], W31
	059 Move X0, X19
	060 Call MobControllerMine.get_isExploded, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {238}
	065 Move W1, 1
	066 Move X0, X19
	067 Call MobControllerMine.set_isExploded, X0, X1
	068 Move X21, 0x22DE000
	069 Move X21, [X21+2136]
	070 Move X20, [X19+152]
	071 Move X0, [X21]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {77}
	075 Call 0x1C17DFC
	076 Move X0, [X21]
	077 Compare X20, 0
	078 JumpIfEqual {334}
	079 Move X8, [X0+184]
	080 Move X0, X20
	081 Move X1, X31
	082 Move S1, [X8+4]
	083 Move S2, [X8+8]
	084 Move V0, [X8]
	085 Call Transform.set_localPosition, X0, X1
	086 Move X0, [X19+56]
	087 Move S0, 30
	088 Move X1, X31
	089 Call TickTimer.CreateFromSeconds, X0, V0
	090 And X1, X0, 0
	091 Move X0, X19
	092 Call MobControllerMine.set_resetTimer, X0, X1
	093 Move X20, [X19+56]
	094 Move X21, [X19+136]
	095 Move X0, X19
	096 Move X1, X31
	097 Call Component.get_transform, X0
	098 Compare X0, 0
	099 JumpIfEqual {334}
	100 Move X1, X31
	101 Call Transform.get_position, X0
	102 Move X0, X19
	103 Move X1, X31
	104 Move V8, V0
	105 Move V9, V1
	106 Move V10, V2
	107 Call Component.get_transform, X0
	108 Compare X0, 0
	109 JumpIfEqual {334}
	110 Move X1, X31
	111 Call Transform.get_up, X0
	112 Move X8, 0x22DD000
	113 Move X8, [X8+2904]
	114 Move S3, 0.5
	115 Multiply S0, S0, S3
	116 Multiply S1, S1, S3
	117 Move X1, [X8]
	118 Multiply S2, S2, S3
	119 Add S0, S8, S0
	120 Add S1, S9, S1
	121 Add S2, S10, S2
	122 Add X0, X31, 48
	123 Move [X31+48], X31
	124 Move [X31+56], X31
	125 Call Nullable`1<Vector3>..ctor, X0, X1
	126 Move X22, 0x25BF000
	127 Move W8, [X22+1939]
	128 Compare W8, 0
	129 JumpIfNotEqual {135}
	130 Move X0, 0x22DB000
	131 Move X0, [X0+1448]
	132 Call 0x1C17CF4
	133 Move W8, 1
	134 Move [X22+1939], W8
	135 Move X8, 0x22DB000
	136 Move X8, [X8+1448]
	137 Move X9, 0x22DD000
	138 Add X0, X31, 24
	139 Move X8, [X8]
	140 Move X8, [X8+184]
	141 Move X9, [X9+2912]
	142 Move S0, [X8]
	143 Move S1, [X8+4]
	144 Move S2, [X8+8]
	145 Move S3, [X8+12]
	146 Move X1, [X9]
	147 Move [X31+24], X31
	148 Move [X31+32], X31
	149 Move [X31+40], W31
	150 Call Nullable`1<Quaternion>..ctor, X0, X1
	151 Compare X20, 0
	152 JumpIfEqual {334}
	153 Move X8, 0x22DD000
	154 Move X2, [X31+48]
	155 Move X3, [X31+56]
	156 Move X8, [X8+3848]
	157 NotImplemented "Instruction LDUR not yet implemented."
	158 Move W9, [X31+40]
	159 Add X4, X31, 64
	160 Move X8, [X8]
	161 Move X0, X20
	162 Move X1, X21
	163 Move X5, X31
	164 Move X6, X31
	165 Move W7, W31
	166 Move [X31+4], V0
	167 Move [X31+80], W9
	168 Move [X31], X8
	169 Call 0x222C8DC, X0, X1, X2, X3, X4, X5, X6
	170 Move X8, 0x22DE000
	171 Move X8, [X8+352]
	172 Move W1, 1
	173 Move X0, [X8]
	174 Call 0x1C17D6C
	175 Move X20, X0
	176 Move X0, X19
	177 Move X1, X31
	178 Call Component.get_transform, X0
	179 Compare X0, 0
	180 JumpIfEqual {334}
	181 Move X1, X31
	182 Call Transform.get_position, X0
	183 Move X8, 0x22DA000
	184 Move X8, [X8+1440]
	185 Add X1, X31, 8
	186 Move [X31+8], S0
	187 Move [X31+16], S1
	188 Move [X31+16], S2
	189 Move X0, [X8]
	190 Call 0x1C17E04
	191 Move X8, 0x22DE000
	192 Move X9, 0x22DE000
	193 Move X8, [X8+1128]
	194 Move X9, [X9+360]
	195 Move X2, X0
	196 Add X0, X31, 64
	197 Move X1, [X8]
	198 Move X3, [X9]
	199 Move [X31+64], X31
	200 Move [X31+72], X31
	201 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	202 Compare X20, 0
	203 JumpIfEqual {334}
	204 Move W8, [X20+24]
	205 Compare W8, 0
	206 JumpIfEqual {335}
	207 Move V0, [X31+4]
	208 Move X8, 0x22DA000
	209 Move [X20+2], V0
	210 Move X8, [X8+2896]
	211 Move X0, [X8]
	212 Move W8, [X0+224]
	213 Compare W8, 0
	214 JumpIfNotEqual {216}
	215 Call 0x1C17DFC
	216 Move X8, 0x22E1000
	217 Move X8, [X8+1096]
	218 Move X1, X20
	219 Move X2, X31
	220 Move X0, [X8]
	221 Call Analytics.Track, X0, X1
	222 Move X20, 0x22DD000
	223 Move X20, [X20+2680]
	224 Move X0, [X20]
	225 Move W8, [X0+224]
	226 Compare W8, 0
	227 JumpIfNotEqual {229}
	228 Call 0x1C17DFC
	229 Move X0, X19
	230 Move X1, X31
	231 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	232 Move X0, [X19+56]
	233 Compare X0, 0
	234 JumpIfEqual {334}
	235 Move X1, X31
	236 Call NetworkRunner.get_Stage, X0
	237 NotImplemented "Instruction CMP not yet implemented."
	238 Move X20, [X31+144]
	239 Move X19, [X31+152]
	240 Move X22, [X31+128]
	241 Move X21, [X31+136]
	242 Move X30, [X31+120]
	243 Move D9, [X31+104]
	244 Move D8, [X31+112]
	245 Move V10, [X31+96]
	246 Add X31, X31, 160
	247 Return 
	248 Move X0, [X19+64]
	249 Compare X0, 0
	250 JumpIfEqual {334}
	251 Move X1, X31
	252 Call NetworkObject.GetLocalAuthorityMask, X0
	253 And W31, W0, 7
	254 Move TEMP, X0
	255 And TEMP, TEMP, 1
	256 Compare TEMP, 1
	257 JumpIfEqual {59}
	258 Move X8, [X19+56]
	259 Compare X8, 0
	260 JumpIfEqual {334}
	261 Move X0, [X8+80]
	262 Compare X0, 0
	263 JumpIfEqual {334}
	264 Move X1, X31
	265 Call Simulation.HasAnyActiveConnections, X0
	266 Move TEMP, X0
	267 And TEMP, TEMP, 1
	268 Compare TEMP, 1
	269 JumpIfNotEqual {238}
	270 Move X8, [X19+56]
	271 Compare X8, 0
	272 JumpIfEqual {334}
	273 Move X0, [X8+80]
	274 Move W1, 8
	275 Move X2, X31
	276 Call SimulationMessage.Allocate, X0, X1
	277 Move X8, [X19+64]
	278 Compare X8, 0
	279 JumpIfEqual {334}
	280 Move X8, [X8+32]
	281 Move X20, X0
	282 Compare X8, 0
	283 JumpIfEqual {308}
	284 Move W0, [X8]
	285 Move X0, [X20]
	286 Move X19, [X19+64]
	287 Move W8, [X0+224]
	288 Compare W8, 0
	289 JumpIfNotEqual {291}
	290 Call 0x1C17DFC
	291 Move X8, 0x22E1000
	292 Move X8, [X8+1104]
	293 Move X1, X19
	294 Move X20, [X31+144]
	295 Move X19, [X31+152]
	296 Move X22, [X31+128]
	297 Move X21, [X31+136]
	298 Move X0, [X8]
	299 Move X30, [X31+120]
	300 Move D9, [X31+104]
	301 Move D8, [X31+112]
	302 Move V10, [X31+96]
	303 Move W2, 7
	304 Move X3, X31
	305 Add X31, X31, 160
	306 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	307 Return 
	308 Move X0, X31
	309 Move W1, [X19+104]
	310 Move W2, 2
	311 Move X3, X31
	312 Call RpcHeader.Create, X0, X1, X2
	313 Move [X20+28], X0
	314 Compare X20, 0
	315 JumpIfEqual {334}
	316 Move W8, 64
	317 Move [X20+12], W8
	318 Move X0, [X19+56]
	319 Compare X0, 0
	320 JumpIfEqual {334}
	321 Move X1, X20
	322 Move X20, [X31+144]
	323 Move X19, [X31+152]
	324 Move X22, [X31+128]
	325 Move X21, [X31+136]
	326 Move X30, [X31+120]
	327 Move D9, [X31+104]
	328 Move D8, [X31+112]
	329 Move V10, [X31+96]
	330 Move X2, X31
	331 Add X31, X31, 160
	332 Call NetworkRunner.SendRpc, X0, X1
	333 Return 
	334 Call 0x1C17F20
	335 Call 0x1C17F28

Method: System.Void HandleIsExplodedChanged()

Disassembly:
	0x01E1A638 LDR X0, [X19 + 0x28]
	0x01E1A63C CBZ X0, 0x1E1A858
	0x01E1A640 MOV X1, X31
	0x01E1A644 MOV V8.16B, V0.16B
	0x01E1A648 MOV V9.16B, V1.16B
	0x01E1A64C MOV V10.16B, V2.16B
	0x01E1A650 BL 0x3C32E90
	0x01E1A654 CBZ X0, 0x1E1A858
	0x01E1A658 MOV X1, X31
	0x01E1A65C BL 0x3C3F58C
	0x01E1A660 ADRP X20, 0x25BE000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+144]
	004 Call MobControllerMine.get_isExploded, X0
	005 Compare X19, 0
	006 JumpIfEqual {15}
	007 NotImplemented "Instruction ORN not yet implemented."
	008 And W1, W8, 1
	009 Move X0, X19
	010 Move X2, X31
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call GameObject.SetActive, X0, X1
	014 Return 
	015 Call 0x1C17F20

Method: System.Void Reset()

Disassembly:
	0x01E1A75C BL 0x3C3F58C
	0x01E1A760 ADRP X21, 0x25BE000
	0x01E1A764 LDRB W8, [X21 + 0x785]
	0x01E1A768 MOV V14.16B, V0.16B
	0x01E1A76C MOV V15.16B, V1.16B
	0x01E1A770 MOV V8.16B, V2.16B
	0x01E1A774 CBNZ W8, 0x1E1A78C
	0x01E1A778 ADRP X0, 0x22D9000
	0x01E1A77C LDR X0, [X0 + 0x5A8]
	0x01E1A780 BL 0x1C16CF4
	0x01E1A784 MOVZ W8, 0x1
	0x01E1A788 STRB W8, [X21 + 0x785]
	0x01E1A78C LDR X0, [X20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, W31
	004 Move X19, X0
	005 Call MobControllerMine.set_isExploded, X0, X1
	006 Move X0, X19
	007 Move W1, W31
	008 Call MobControllerMine.set_isStepped, X0, X1
	009 Move X0, X31
	010 Call TickTimer.get_None
	011 And X1, X0, 0
	012 Move X0, X19
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call MobControllerMine.set_resetTimer, X0, X1
	016 Return 

Method: System.Void Hit(System.Int32 damage, UnityEngine.Vector3 position, AnimalCompany.RandomSFX hitSound, AnimalCompany.RandomSFX killSound, UnityEngine.Vector3 force, System.String hitName, Fusion.NetworkBehaviourId source)

Disassembly:
	0x01E1AF28 MOVZ W8, 0x1

ISIL:
	001 Call MobControllerMine.RPC_TriggerExit, X0
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x01E1AF2C STRB W8, [X29 + 0xABD]
	0x01E1AF30 LDR X8, [X20]

ISIL:
	001 Move X1, X31
	002 Call NetworkBehaviour..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x01E1AF34 FSUB V9.2S, V0.2S, V9.2S
	0x01E1AF38 MOVZ W9, 0xCCCD
	0x01E1AF3C MOVK W9, 0x411C0000
	0x01E1AF40 LDR X8, [X8 + 0xB8]
	0x01E1AF44 UNIMPLEMENTED
	0x01E1AF48 ADRP X9, 0xFFFFFFFFFECCF000
	0x01E1AF4C LDR V13, [X9 + 0xF98]
	0x01E1AF50 LDUR V0, [X8 + 0x24]
	0x01E1AF54 LDR V2, [X8 + 0x2C]
	0x01E1AF58 ADRP X23, 0x25BE000
	0x01E1AF5C LDRB W8, [X23 + 0x784]
	0x01E1AF60 FADD V0.2S, V0.2S, V0.2S
	0x00000000 INVALID
	0x01E1AF68 FADD S1, S2, S2
	0x01E1AF6C LDR V2, [X31 + 0x6]
	0x01E1AF70 FMUL S1, S1, S13
	0x01E1AF74 FSUB S10, S8, S10
	0x00000000 INVALID
	0x01E1AF7C FMUL S1, S1, S2
	0x00000000 INVALID
	0x01E1AF84 FMUL S14, S1, S2
	0x01E1AF88 CBNZ W8, 0x1E1AFA0
	0x01E1AF8C ADRP X0, 0x22D9000
	0x01E1AF90 LDR X0, [X0 + 0x5A8]
	0x01E1AF94 BL 0x1C16CF4
	0x01E1AF98 MOVZ W8, 0x1
	0x01E1AF9C STRB W8, [X23 + 0x784]
	0x01E1AFA0 ADRP X24, 0x22D9000
	0x01E1AFA4 LDR X24, [X24 + 0x5A8]
	0x01E1AFA8 FADD V4.2S, V9.2S, V11.2S
	0x01E1AFAC FADD S9, S10, S14
	0x01E1AFB0 LDR X0, [X24]
	0x01E1AFB4 LDR W8, [X0 + 0xE0]
	0x01E1AFB8 CBNZ W8, 0x1E1AFC8
	0x01E1AFBC STR V4, [X31 + 0x2]
	0x01E1AFC0 BL 0x1C16DFC
	0x01E1AFC4 LDR V4, [X31 + 0x2]
	0x01E1AFC8 MOV S5, V4.S[1]
	0x00000000 INVALID
	0x01E1AFD0 LDRB W8, [X19 + 0x113]
	0x01E1AFD4 FMUL S1, S5, V4.S[1]
	0x01E1AFD8 FADD S0, S0, S1
	0x01E1AFDC FMUL S1, S9, S9
	0x01E1AFE0 FADD S0, S0, S1
	0x01E1AFE4 ADD X26, X31, 0x100
	0x01E1AFE8 FSQRT S11, S0
	0x01E1AFEC CBNZ W8, 0x1E1B0CC
	0x01E1AFF0 LDP S0, S1, [X19 + 0x68]
	0x01E1AFF4 LDR V2, [X19 + 0x70]
	0x01E1AFF8 LDR V3, [X19 + 0xB0]
	0x01E1AFFC LDR V7, [X19 + 0xB8]
	0x01E1B000 ADD X21, X19, 0x138
	0x01E1B004 ADD X1, X31, 0xF0
	0x01E1B008 MOVZ W2, 0x1
	0x01E1B00C MOV X0, X19
	0x01E1B010 MOV V6.16B, V9.16B
	0x01E1B014 MOV X3, X21
	0x01E1B018 BL 0x1E1C8AC
	0x01E1B01C TBZ X0, 0x0, 0x1E1B0CC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x25BF000
	007 Move W8, [X19+3602]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x22E1000
	013 Move X0, [X0+1112]
	014 Call 0x1C17CF4
	015 Move X0, 0x22E1000
	016 Move X0, [X0+1120]
	017 Call 0x1C17CF4
	018 Move X0, 0x22DE000
	019 Move X0, [X0+2136]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+3602], W8
	023 Move X22, 0x25BF000
	024 Move X20, 0x22DE000
	025 Move X21, 0x22E1000
	026 Move X19, 0x22E1000
	027 Move W8, [X22+1923]
	028 Move X20, [X20+2136]
	029 Move X21, [X21+1120]
	030 Move X19, [X19+1112]
	031 Compare W8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, 0x22DA000
	034 Move X0, [X0+1440]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X22+1923], W8
	038 Move X8, 0x22DA000
	039 Move X8, [X8+1440]
	040 Move X9, [X20]
	041 Move X8, [X8]
	042 Move X9, [X9+184]
	043 Move X8, [X8+184]
	044 Move V0, [X8]
	045 Move V1, [X8+8]
	046 Move [X9], D0
	047 Move [X9+8], S1
	048 Move X8, [X20]
	049 Move X9, -20103168
	050 Move V0, [X9+2536]
	051 Move X8, [X8+184]
	052 Move [X8+12], D0
	053 Move [X8+20], W31
	054 Move X0, [X21]
	055 Call 0x1C17F10
	056 Move X1, [X19]
	057 Move X19, X0
	058 Call HashSet`1<Object>..ctor, X0
	059 Move X8, [X20]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X8, [X8+184]
	063 Move [X8+24], X19
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X30, [X31+48]
	067 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01E1B020 MOV X0, X21
	0x01E1B024 MOV X1, X31
	0x01E1B028 BL 0x3C8E770
	0x01E1B02C CBZ X0, 0x1E1B0B8
	0x01E1B030 MOV X22, X0
	0x01E1B034 MOV X0, X21
	0x01E1B038 MOV X1, X31
	0x01E1B03C BL 0x3C8E678
	0x01E1B040 FNEG S0, S0
	0x01E1B044 FNEG S1, S1
	0x01E1B048 FNEG S2, S2

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, [X0+160]
	004 Move X19, X0
	005 Call MobControllerMine.set_resetTimer, X0, X1
	006 Move W1, [X19+164]
	007 Move X0, X19
	008 Call MobControllerMine.set_isStepped, X0, X1
	009 Move W1, [X19+165]
	010 Move X0, X19
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call MobControllerMine.set_isExploded, X0, X1
	014 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01E1B04C MOVZ W8, 0x447A0000
	0x01E1B050 FMUL S0, S11, S0
	0x01E1B054 FMUL S1, S11, S1
	0x01E1B058 FMUL S2, S11, S2
	0x01E1B05C FMOV S3, W8
	0x01E1B060 FMUL S0, S0, S3
	0x01E1B064 FMUL S1, S1, S3
	0x01E1B068 FMUL S2, S2, S3
	0x01E1B06C LDR V3, [X31 + 0x6]
	0x01E1B070 MOV X0, X21
	0x01E1B074 MOV X1, X31
	0x01E1B078 MOV V14.16B, V11.16B
	0x01E1B07C FMUL S9, S0, S3
	0x01E1B080 FMUL S10, S1, S3

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobControllerMine.get_resetTimer, X0
	005 Move [X19+160], W0
	006 Move X0, X19
	007 Call MobControllerMine.get_isStepped, X0
	008 And W8, W0, 1
	009 Move X0, X19
	010 Move [X19+164], W8
	011 Call MobControllerMine.get_isExploded, X0
	012 And W8, W0, 1
	013 Move [X19+165], W8
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return 

Method: System.Void RPC_TriggerEnter@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01E1B084 FMUL S11, S2, S3
	0x01E1B088 BL 0x3C8E66C
	0x01E1B08C MOV V3.16B, V0.16B
	0x01E1B090 MOV V4.16B, V1.16B
	0x01E1B094 MOV V5.16B, V2.16B
	0x01E1B098 MOV X0, X22
	0x01E1B09C MOV V0.16B, V9.16B
	0x01E1B0A0 MOV V1.16B, V10.16B
	0x01E1B0A4 MOV V2.16B, V11.16B
	0x01E1B0A8 MOV W1, W31
	0x01E1B0AC MOV X2, X31
	0x01E1B0B0 MOV V11.16B, V14.16B
	0x01E1B0B4 BL 0x3C8F524
	0x01E1B0B8 LDRB W8, [X19 + 0x110]
	0x01E1B0BC CBZ W8, 0x1E1BCA0
	0x01E1B0C0 LDR V9, [X19 + 0x68]
	0x01E1B0C4 LDR V10, [X19 + 0x70]
	0x01E1B0C8 B 0x1E1BCFC
	0x01E1B0CC LDR V0, [X31 + 0x5]
	0x01E1B0D0 MOV W28, W31
	0x01E1B0D4 MOV V15.16B, V12.16B
	0x01E1B0D8 MOV V14.16B, V0.16B
	0x01E1B0DC MOV X0, X19
	0x01E1B0E0 BL 0x1E1A8DC
	0x01E1B0E4 LDUR V9, [X19 + 0x74]
	0x01E1B0E8 LDRB W8, [X29 + 0xABD]
	0x01E1B0EC LDR V10, [X19 + 0x7C]
	0x01E1B0F0 MOV V16.16B, V1.16B
	0x01E1B0F4 MOV V8.16B, V2.16B
	0x01E1B0F8 CBNZ W8, 0x1E1B120
	0x01E1B0FC ADRP X0, 0x22D8000
	0x01E1B100 LDR X0, [X0 + 0x5A0]
	0x01E1B104 STR V0, [X31 + 0x7]
	0x01E1B108 STR V16, [X31 + 0x4]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25BE000
	005 Move W8, [X20+3603]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22DD000
	012 Move X0, [X0+2136]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3603], W8
	016 Compare X19, 0
	017 JumpIfEqual {39}
	018 Move X9, 0x22DD000
	019 Move X9, [X9+2136]
	020 Move W8, 1
	021 Move [X19+88], W8
	022 Move X8, [X19]
	023 Move X1, [X9]
	024 Move W10, [X8+304]
	025 Move W9, [X1+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, [X8+200]
	028 Add X8, X8, X9
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Call MobControllerMine.RPC_TriggerEnter, X0
	036 Return 
	037 Move X0, X19
	038 Call 0x1C181E0
	039 Call 0x1C17F20

Method: System.Void RPC_TriggerExit@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01E1B10C BL 0x1C16CF4
	0x01E1B110 LDR V16, [X31 + 0x4]
	0x01E1B114 LDR V0, [X31 + 0x7]
	0x01E1B118 MOVZ W8, 0x1
	0x01E1B11C STRB W8, [X29 + 0xABD]
	0x01E1B120 LDRB W8, [X19 + 0x113]
	0x01E1B124 LDR V4, [X31 + 0x5]
	0x01E1B128 CBNZ W8, 0x1E1B268
	0x01E1B12C LDR X8, [X20]
	0x01E1B130 MOVZ W9, 0xCCCD
	0x01E1B134 MOVK W9, 0x411C0000
	0x01E1B138 UNIMPLEMENTED
	0x01E1B13C LDR X8, [X8 + 0xB8]
	0x01E1B140 LDR V7, [X31 + 0x6]
	0x01E1B144 MOV V2.16B, V0.16B
	0x01E1B148 MOV V2.S[1], V16.S[0]
	0x01E1B14C LDUR V6, [X8 + 0x24]
	0x01E1B150 UNIMPLEMENTED
	0x01E1B154 STR V0, [X31 + 0x7]
	0x01E1B158 LDP S0, S1, [X19 + 0x74]
	0x01E1B15C FADD V6.2S, V6.2S, V6.2S
	0x00000000 INVALID
	0x01E1B164 LDR V6, [X8 + 0x2C]
	0x00000000 INVALID
	0x01E1B16C STR V16, [X31 + 0x4]
	0x01E1B170 FSUB V16.2S, V2.2S, V9.2S
	0x01E1B174 FADD S6, S6, S6
	0x01E1B178 FMUL S6, S6, S13
	0x01E1B17C FMUL S6, S6, S7
	0x01E1B180 LDR V2, [X19 + 0x7C]
	0x00000000 INVALID
	0x01E1B188 LDR V3, [X19 + 0xB0]
	0x01E1B18C FMUL S6, S6, S7
	0x01E1B190 LDR V7, [X19 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25BE000
	005 Move W8, [X20+3604]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22DD000
	012 Move X0, [X0+2136]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3604], W8
	016 Compare X19, 0
	017 JumpIfEqual {39}
	018 Move X9, 0x22DD000
	019 Move X9, [X9+2136]
	020 Move W8, 1
	021 Move [X19+88], W8
	022 Move X8, [X19]
	023 Move X1, [X9]
	024 Move W10, [X8+304]
	025 Move W9, [X1+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, [X8+200]
	028 Add X8, X8, X9
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Call MobControllerMine.RPC_TriggerExit, X0
	036 Return 
	037 Move X0, X19
	038 Call 0x1C181E0
	039 Call 0x1C17F20

