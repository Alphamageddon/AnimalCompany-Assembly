Type: AnimalCompany.PrototypeOne.MobControllerDog

Method: AnimalCompany.PrototypeOne.MobControllerDog/MobMoveStatus get_MoveStatus()

Disassembly:
	0x01E190E4 B.EQ 0x1E19118
	0x01E190E8 CBNZ W0, 0x1E1912C
	0x01E190EC LDR X8, [X19 + 0x98]
	0x01E190F0 CBZ X8, 0x1E19134
	0x01E190F4 LDR X0, [X8 + 0x30]
	0x01E190F8 CBZ X0, 0x1E19134
	0x01E190FC MOV X1, X31
	0x01E19100 LDP X30, X19, [X31], #0x10
	0x01E19104 B 0x3BFCC04
	0x01E19108 LDR X0, [X19 + 0x98]
	0x01E1910C CBZ X0, 0x1E19134
	0x01E19110 LDR X1, [X0 + 0x48]
	0x01E19114 B 0x1E19124
	0x01E19118 LDR X0, [X19 + 0x98]
	0x01E1911C CBZ X0, 0x1E19134
	0x01E19120 LDR X1, [X0 + 0x40]
	0x01E19124 LDP X30, X19, [X31], #0x10
	0x01E19128 B 0x1E1A194
	0x01E1912C LDP X30, X19, [X31], #0x10
	0x01E19130 RET
	0x01E19134 BL 0x1C16F20
	0x01E19138 STP X30, X19, [X31 - 0x10]!
	0x01E1913C MOV X19, X0
	0x01E19140 FMOV S0, 1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x22DB000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x22E2000
	016 Move X0, [X0+968]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22E2000
	023 Move X0, [X0+976]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_MoveStatus(AnimalCompany.PrototypeOne.MobControllerDog/MobMoveStatus value)

Disassembly:
	0x01E19144 FMOV S1, W31
	0x01E19148 FMOV S2, W31
	0x01E1914C FMOV S3, 1
	0x01E19150 MOV X0, X31
	0x01E19154 BL 0x3C0D030
	0x01E19158 LDR X0, [X19 + 0xA0]
	0x01E1915C CBZ X0, 0x1E191B4
	0x01E19160 MOV X1, X31
	0x01E19164 BL 0x3C3F58C
	0x01E19168 LDR V3, [X19 + 0xB4]
	0x01E1916C MOV X0, X31
	0x01E19170 BL 0x3C0CB98
	0x01E19174 ADRP X8, 0xFFFFFFFFFECD0000
	0x01E19178 ADRP X9, 0xFFFFFFFFFECD1000
	0x01E1917C LDR V1, [X8 + 0xF90]
	0x01E19180 LDR V2, [X9 + 0x30]
	0x01E19184 FMOV S0, 1
	0x01E19188 FMOV S3, 1
	0x01E1918C MOV X0, X31
	0x01E19190 BL 0x3C0D030
	0x01E19194 LDR X0, [X19 + 0xA8]
	0x01E19198 CBZ X0, 0x1E191B4
	0x01E1919C MOV X1, X31
	0x01E191A0 BL 0x3C3F58C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22DB000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x22E2000
	016 Move X0, [X0+968]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22E2000
	023 Move X0, [X0+984]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void Awake()

Disassembly:
	0x01E191A4 LDR V3, [X19 + 0xB8]
	0x01E191A8 MOV X0, X31
	0x01E191AC LDP X30, X19, [X31], #0x10
	0x01E191B0 B 0x3C0CB98
	0x01E191B4 BL 0x1C16F20
	0x01E191B8 ADRP X8, 0xFFFFFFFFFECD4000
	0x01E191BC LDR V0, [X8 + 0x6D0]
	0x01E191C0 MOVZ X8, 0x3F800000
	0x01E191C4 MOVK X8, 0x14
	0x01E191C8 STUR X8, [X0 + 0xBC]
	0x01E191CC ADRP X8, 0xFFFFFFFFFECD4000
	0x01E191D0 STUR D0, [X0 + 0xB4]
	0x01E191D4 LDR V0, [X8 + 0x9]
	0x01E191D8 MOVZ W8, 0xCCCD
	0x01E191DC MOVK W8, 0x3E4C0000
	0x01E191E0 STR W8, [X0 + 0xC4]
	0x01E191E4 MOVZ W8, 0x40A00000
	0x01E191E8 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+152]
	005 Move [X19+128], W31
	006 Compare X0, 0
	007 JumpIfEqual {23}
	008 Move W1, W31
	009 Call MobView.SetWalk, X0, X1
	010 Move X0, X19
	011 Move X1, X31
	012 Call Component.get_transform, X0
	013 Compare X0, 0
	014 JumpIfEqual {23}
	015 Move X1, X31
	016 Call Transform.get_position, X0
	017 Move [X19+224], S0
	018 Move [X19+232], S1
	019 Move [X19+232], S2
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 
	023 Call 0x1C17F20

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01E191EC STR W8, [X0 + 0xDC]
	0x01E191F0 STUR V0, [X0 + 0xCC]
	0x01E191F4 STR W8, [X0 + 0xF4]
	0x01E191F8 B 0x1E74F04
	0x01E191FC LDR W1, [X0 + 0x130]
	0x01E19200 B 0x1E18144
	0x01E19204 STP X30, X19, [X31 - 0x10]!
	0x01E19208 MOV X19, X0
	0x01E1920C BL 0x1E180E4
	0x01E19210 STR W0, [X19 + 0x130]
	0x01E19214 LDP X30, X19, [X31], #0x10
	0x01E19218 RET
	0x01E1921C STP X30, X19, [X31 - 0x10]!
	0x01E19220 LDR X8, [X0 + 0x50]
	0x01E19224 CBZ X8, 0x1E19234
	0x01E19228 LDR W0, [X8]
	0x01E1922C LDP X30, X19, [X31], #0x10
	0x01E19230 RET
	0x01E19234 ADRP X0, 0x22DA000
	0x01E19238 LDR X0, [X0 + 0x5B0]
	0x01E1923C BL 0x1C16D08
	0x01E19240 BL 0x1C16F10
	0x01E19244 MOV X19, X0
	0x01E19248 ADRP X0, 0x22E1000
	0x01E1924C LDR X0, [X0 + 0x3E8]
	0x01E19250 BL 0x1C16D08
	0x01E19254 MOV X1, X0
	0x01E19258 MOV X0, X19
	0x01E1925C MOV X2, X31
	0x01E19260 BL 0x337DF1C
	0x01E19264 ADRP X0, 0x22E1000
	0x01E19268 LDR X0, [X0 + 0x3F0]
	0x01E1926C BL 0x1C16D08
	0x01E19270 MOV X1, X0
	0x01E19274 MOV X0, X19
	0x01E19278 BL 0x1C16DEC
	0x01E1927C STP X30, X19, [X31 - 0x10]!
	0x01E19280 LDR X8, [X0 + 0x50]
	0x01E19284 CBZ X8, 0x1E19294
	0x01E19288 STR W1, [X8]
	0x01E1928C LDP X30, X19, [X31], #0x10
	0x01E19290 RET
	0x01E19294 ADRP X0, 0x22DA000
	0x01E19298 LDR X0, [X0 + 0x5B0]
	0x01E1929C BL 0x1C16D08
	0x01E192A0 BL 0x1C16F10
	0x01E192A4 MOV X19, X0
	0x01E192A8 ADRP X0, 0x22E1000
	0x01E192AC LDR X0, [X0 + 0x3E8]
	0x01E192B0 BL 0x1C16D08
	0x01E192B4 MOV X1, X0
	0x01E192B8 MOV X0, X19
	0x01E192BC MOV X2, X31
	0x01E192C0 BL 0x337DF1C
	0x01E192C4 ADRP X0, 0x22E1000
	0x01E192C8 LDR X0, [X0 + 0x3F8]
	0x01E192CC BL 0x1C16D08
	0x01E192D0 MOV X1, X0
	0x01E192D4 MOV X0, X19
	0x01E192D8 BL 0x1C16DEC
	0x01E192DC STP X30, X19, [X31 - 0x10]!
	0x01E192E0 LDR X8, [X0 + 0x50]
	0x01E192E4 CBZ X8, 0x1E192FC
	0x01E192E8 LDR W8, [X8 + 0x4]
	0x01E192EC CMP W8, 0x0
	0x01E192F0 CSET W0, NE
	0x01E192F4 LDP X30, X19, [X31], #0x10
	0x01E192F8 RET
	0x01E192FC ADRP X0, 0x22DA000
	0x01E19300 LDR X0, [X0 + 0x5B0]
	0x01E19304 BL 0x1C16D08
	0x01E19308 BL 0x1C16F10
	0x01E1930C MOV X19, X0
	0x01E19310 ADRP X0, 0x22E1000
	0x01E19314 LDR X0, [X0 + 0x400]
	0x01E19318 BL 0x1C16D08
	0x01E1931C MOV X1, X0
	0x01E19320 MOV X0, X19
	0x01E19324 MOV X2, X31
	0x01E19328 BL 0x337DF1C
	0x01E1932C ADRP X0, 0x22E1000
	0x01E19330 LDR X0, [X0 + 0x408]
	0x01E19334 BL 0x1C16D08
	0x01E19338 MOV X1, X0
	0x01E1933C MOV X0, X19
	0x01E19340 BL 0x1C16DEC
	0x01E19344 STP X30, X19, [X31 - 0x10]!
	0x01E19348 LDR X8, [X0 + 0x50]
	0x01E1934C CBZ X8, 0x1E19360
	0x01E19350 AND W9, W1, 0x1
	0x01E19354 STR W9, [X8 + 0x4]
	0x01E19358 LDP X30, X19, [X31], #0x10
	0x01E1935C RET
	0x01E19360 ADRP X0, 0x22DA000
	0x01E19364 LDR X0, [X0 + 0x5B0]
	0x01E19368 BL 0x1C16D08
	0x01E1936C BL 0x1C16F10
	0x01E19370 MOV X19, X0
	0x01E19374 ADRP X0, 0x22E1000
	0x01E19378 LDR X0, [X0 + 0x400]
	0x01E1937C BL 0x1C16D08
	0x01E19380 MOV X1, X0
	0x01E19384 MOV X0, X19
	0x01E19388 MOV X2, X31
	0x01E1938C BL 0x337DF1C
	0x01E19390 ADRP X0, 0x22E1000
	0x01E19394 LDR X0, [X0 + 0x410]
	0x01E19398 BL 0x1C16D08
	0x01E1939C MOV X1, X0
	0x01E193A0 MOV X0, X19
	0x01E193A4 BL 0x1C16DEC
	0x01E193A8 STP X30, X19, [X31 - 0x10]!
	0x01E193AC LDR X8, [X0 + 0x50]
	0x01E193B0 CBZ X8, 0x1E193C8
	0x01E193B4 LDR W8, [X8 + 0x8]
	0x01E193B8 CMP W8, 0x0
	0x01E193BC CSET W0, NE
	0x01E193C0 LDP X30, X19, [X31], #0x10
	0x01E193C4 RET
	0x01E193C8 ADRP X0, 0x22DA000
	0x01E193CC LDR X0, [X0 + 0x5B0]
	0x01E193D0 BL 0x1C16D08
	0x01E193D4 BL 0x1C16F10
	0x01E193D8 MOV X19, X0
	0x01E193DC ADRP X0, 0x22E1000
	0x01E193E0 LDR X0, [X0 + 0x418]
	0x01E193E4 BL 0x1C16D08
	0x01E193E8 MOV X1, X0
	0x01E193EC MOV X0, X19
	0x01E193F0 MOV X2, X31
	0x01E193F4 BL 0x337DF1C
	0x01E193F8 ADRP X0, 0x22E1000
	0x01E193FC LDR X0, [X0 + 0x420]
	0x01E19400 BL 0x1C16D08
	0x01E19404 MOV X1, X0
	0x01E19408 MOV X0, X19
	0x01E1940C BL 0x1C16DEC
	0x01E19410 STP X30, X19, [X31 - 0x10]!
	0x01E19414 LDR X8, [X0 + 0x50]
	0x01E19418 CBZ X8, 0x1E1942C
	0x01E1941C AND W9, W1, 0x1
	0x01E19420 STR W9, [X8 + 0x8]
	0x01E19424 LDP X30, X19, [X31], #0x10
	0x01E19428 RET
	0x01E1942C ADRP X0, 0x22DA000
	0x01E19430 LDR X0, [X0 + 0x5B0]
	0x01E19434 BL 0x1C16D08
	0x01E19438 BL 0x1C16F10
	0x01E1943C MOV X19, X0
	0x01E19440 ADRP X0, 0x22E1000
	0x01E19444 LDR X0, [X0 + 0x418]
	0x01E19448 BL 0x1C16D08
	0x01E1944C MOV X1, X0
	0x01E19450 MOV X0, X19
	0x01E19454 MOV X2, X31
	0x01E19458 BL 0x337DF1C
	0x01E1945C ADRP X0, 0x22E1000
	0x01E19460 LDR X0, [X0 + 0x428]
	0x01E19464 BL 0x1C16D08
	0x01E19468 MOV X1, X0
	0x01E1946C MOV X0, X19
	0x01E19470 BL 0x1C16DEC
	0x01E19474 STR X30, [X31 - 0x20]!
	0x01E19478 STP X20, X19, [X31 + 0x10]
	0x01E1947C ADRP X20, 0x25BF000
	0x01E19480 ADRP X19, 0x22DE000
	0x01E19484 LDRB W8, [X20 + 0xE0B]
	0x01E19488 LDR X19, [X19 + 0x858]
	0x01E1948C TBNZ X8, 0x0, 0x1E194A4
	0x01E19490 ADRP X0, 0x22DE000
	0x01E19494 LDR X0, [X0 + 0x858]
	0x01E19498 BL 0x1C16CF4
	0x01E1949C MOVZ W8, 0x1
	0x01E194A0 STRB W8, [X20 + 0xE0B]
	0x01E194A4 LDR X0, [X19]
	0x01E194A8 LDR W8, [X0 + 0xE0]
	0x01E194AC CBNZ W8, 0x1E194B8
	0x01E194B0 BL 0x1C16DFC
	0x01E194B4 LDR X0, [X19]
	0x01E194B8 LDR X8, [X0 + 0xB8]
	0x01E194BC LDP X20, X19, [X31 + 0x10]
	0x01E194C0 LDR X0, [X8 + 0x18]
	0x01E194C4 LDR X30, [X31], #0x20
	0x01E194C8 RET
	0x01E194CC STP X30, X21, [X31 - 0x20]!
	0x01E194D0 STP X20, X19, [X31 + 0x10]
	0x01E194D4 ADRP X20, 0x25BF000
	0x01E194D8 ADRP X21, 0x22DD000
	0x01E194DC LDRB W8, [X20 + 0xE0C]
	0x01E194E0 LDR X21, [X21 + 0xA78]
	0x01E194E4 MOV X19, X0
	0x01E194E8 TBNZ X8, 0x0, 0x1E19518
	0x01E194EC ADRP X0, 0x22E1000
	0x01E194F0 LDR X0, [X0 + 0x430]
	0x01E194F4 BL 0x1C16CF4
	0x01E194F8 ADRP X0, 0x22DE000
	0x01E194FC LDR X0, [X0 + 0x858]
	0x01E19500 BL 0x1C16CF4
	0x01E19504 ADRP X0, 0x22DD000
	0x01E19508 LDR X0, [X0 + 0xA78]
	0x01E1950C BL 0x1C16CF4
	0x01E19510 MOVZ W8, 0x1
	0x01E19514 STRB W8, [X20 + 0xE0C]
	0x01E19518 LDR X0, [X21]
	0x01E1951C LDR W8, [X0 + 0xE0]
	0x01E19520 CBNZ W8, 0x1E19528
	0x01E19524 BL 0x1C16DFC
	0x01E19528 CBZ X19, 0x1E1957C
	0x01E1952C LDR W8, [X19 + 0x30]
	0x01E19530 ADRP X20, 0x22DE000
	0x01E19534 LDR X20, [X20 + 0x858]
	0x01E19538 ORR W8, W8, 0x8
	0x01E1953C STR W8, [X19 + 0x30]
	0x01E19540 LDR X0, [X20]
	0x01E19544 LDR W8, [X0 + 0xE0]
	0x01E19548 CBNZ W8, 0x1E19554
	0x01E1954C BL 0x1C16DFC
	0x01E19550 LDR X0, [X20]
	0x01E19554 LDR X8, [X0 + 0xB8]
	0x01E19558 LDR X0, [X8 + 0x18]
	0x01E1955C CBZ X0, 0x1E1957C
	0x01E19560 ADRP X8, 0x22E1000
	0x01E19564 LDR X8, [X8 + 0x430]
	0x01E19568 MOV X1, X19
	0x01E1956C LDP X20, X19, [X31 + 0x10]
	0x01E19570 LDR X2, [X8]
	0x01E19574 LDP X30, X21, [X31], #0x20
	0x01E19578 B 0x2DBE67C
	0x01E1957C BL 0x1C16F20
	0x01E19580 STP X30, X21, [X31 - 0x20]!
	0x01E19584 STP X20, X19, [X31 + 0x10]
	0x01E19588 ADRP X20, 0x25BF000
	0x01E1958C ADRP X21, 0x22DE000
	0x01E19590 LDRB W8, [X20 + 0xE0D]
	0x01E19594 LDR X21, [X21 + 0x858]
	0x01E19598 MOV X19, X0
	0x01E1959C TBNZ X8, 0x0, 0x1E195C0
	0x01E195A0 ADRP X0, 0x22E1000
	0x01E195A4 LDR X0, [X0 + 0x438]
	0x01E195A8 BL 0x1C16CF4
	0x01E195AC ADRP X0, 0x22DE000
	0x01E195B0 LDR X0, [X0 + 0x858]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+64], X24
	008 Move [X31+72], X23
	009 Move [X31+80], X22
	010 Move [X31+88], X21
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X20, 0x25C0000
	014 Move W8, [X20+3592]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x22E0000
	021 Move X0, [X0+1472]
	022 Call 0x1C17CF4
	023 Move X0, 0x22DB000
	024 Move X0, [X0+1528]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+3592], W8
	028 Move [X31+56], X31
	029 Move [X31+8], X31
	030 Move X0, [X19+64]
	031 Compare X0, 0
	032 JumpIfEqual {273}
	033 Move X1, X31
	034 Call NetworkObject.get_HasStateAuthority, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {260}
	039 Move W8, [X19+128]
	040 Compare W8, 0
	041 JumpIfEqual {149}
	042 Subtract W9, W8, 1
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, [X19+160]
	045 Compare X0, 0
	046 JumpIfEqual {273}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move W0, [X19+176]
	050 Move V10, [X19+180]
	051 Move X1, X31
	052 Move V8, V0
	053 Move V9, V1
	054 Move V11, V2
	055 Call LayerMask.op_Implicit, X0
	056 Move X8, 0x22DB000
	057 Move X8, [X8+1528]
	058 Move W20, W0
	059 Move X8, [X8]
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {65}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move V0, V8
	066 Move V1, V9
	067 Move V2, V11
	068 Move V3, V10
	069 Move W0, W20
	070 Move X1, X31
	071 Call Physics.OverlapSphere, X0, V0, X1
	072 Compare X0, 0
	073 JumpIfEqual {273}
	074 Move X8, [X0+24]
	075 Move X20, X0
	076 Compare X8, 0
	077 JumpIfEqual {208}
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X9, -20111360
	080 Move X23, 0x22E0000
	081 Move V8, [X9+780]
	082 Move X23, [X23+1472]
	083 Move X21, X31
	084 Add X22, X20, 32
	085 Move W24, 2
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X0, [X22]
	088 Compare X0, 0
	089 JumpIfEqual {273}
	090 Move X1, X31
	091 Call Component.get_gameObject, X0
	092 Compare X0, 0
	093 JumpIfEqual {273}
	094 Move X2, [X23]
	095 Add X1, X31, 8
	096 Call 0x21E7600, X0, X1
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {146}
	101 Move X0, [X31+8]
	102 Move [X19+248], X0
	103 Compare X0, 0
	104 JumpIfEqual {273}
	105 Move V0, [X0+372]
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 Move X1, X31
	108 Call Component.get_transform, X0
	109 Compare X0, 0
	110 JumpIfEqual {273}
	111 Move X1, X31
	112 Call Transform.get_position, X0
	113 Move X0, [X19+152]
	114 Move [X19+256], S0
	115 Move [X19+260], S1
	116 Move [X19+264], S2
	117 Move [X19+128], W24
	118 Move [X19+240], X31
	119 Compare X0, 0
	120 JumpIfEqual {273}
	121 Move W1, 1
	122 Call MobView.SetWalk, X0, X1
	123 Move W1, 2
	124 Move X0, X19
	125 Call MobControllerDog.set_MoveStatus, X0, X1
	126 Move X0, [X19+144]
	127 Compare X0, 0
	128 JumpIfEqual {273}
	129 Move W1, 1
	130 Move X2, X31
	131 Call NavMeshAgent.set_updateRotation, X0, X1
	132 Move X0, [X19+144]
	133 Compare X0, 0
	134 JumpIfEqual {273}
	135 Move V0, [X19+208]
	136 Move X1, X31
	137 Call NavMeshAgent.set_speed, X0, V0
	138 Move X0, [X19+144]
	139 Compare X0, 0
	140 JumpIfEqual {273}
	141 Move V2, [X19+264]
	142 Move V1, [X19+260]
	143 Move V0, [X19+256]
	144 Move X1, X31
	145 Call NavMeshAgent.SetDestination, X0, X1
	146 Move W8, [X20+24]
	147 Add X21, X21, 1
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Move X0, [X19+168]
	150 Compare X0, 0
	151 JumpIfEqual {273}
	152 Move X1, X31
	153 Call Transform.get_position, X0
	154 Move W0, [X19+176]
	155 Move V10, [X19+184]
	156 Move X1, X31
	157 Move V8, V0
	158 Move V9, V1
	159 Move V11, V2
	160 Call LayerMask.op_Implicit, X0
	161 Move X8, 0x22DB000
	162 Move X8, [X8+1528]
	163 Move W20, W0
	164 Move X8, [X8]
	165 Move W9, [X8+224]
	166 Compare W9, 0
	167 JumpIfNotEqual {170}
	168 Move X0, X8
	169 Call 0x1C17DFC
	170 Move V0, V8
	171 Move V1, V9
	172 Move V2, V11
	173 Move V3, V10
	174 Move W0, W20
	175 Move X1, X31
	176 Call Physics.OverlapSphere, X0, V0, X1
	177 Compare X0, 0
	178 JumpIfEqual {273}
	179 Move X8, [X0+24]
	180 Move X20, X0
	181 Compare X8, 0
	182 JumpIfEqual {249}
	183 Move W9, [X19+128]
	184 NotImplemented "Instruction CMP not yet implemented."
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Move X23, 0x22E0000
	187 Move X23, [X23+1472]
	188 Move X21, X31
	189 Add X22, X20, 32
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Move X0, [X22]
	192 Compare X0, 0
	193 JumpIfEqual {273}
	194 Move X1, X31
	195 Call Component.get_gameObject, X0
	196 Compare X0, 0
	197 JumpIfEqual {273}
	198 Move X2, [X23]
	199 Add X1, X31, 56
	200 Call 0x21E7600, X0, X1
	201 Move TEMP, X0
	202 And TEMP, TEMP, 1
	203 Compare TEMP, 1
	204 JumpIfEqual {241}
	205 Move W8, [X20+24]
	206 Add X21, X21, 1
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Move W8, [X19+128]
	209 Move [X19+248], X31
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move X0, [X19+152]
	212 Move W8, 1
	213 Move [X19+128], W8
	214 Move [X19+240], X31
	215 Compare X0, 0
	216 JumpIfEqual {273}
	217 Move W1, W31
	218 Call MobView.SetWalk, X0, X1
	219 Move X0, X19
	220 Move W1, W31
	221 Call MobControllerDog.set_MoveStatus, X0, X1
	222 Move X0, [X19+144]
	223 Compare X0, 0
	224 JumpIfEqual {273}
	225 Move V0, [X19+208]
	226 Move X1, X31
	227 Call NavMeshAgent.set_speed, X0, V0
	228 Move X20, [X19+144]
	229 Move X0, X19
	230 Move X1, X31
	231 Call Component.get_transform, X0
	232 Compare X0, 0
	233 JumpIfEqual {273}
	234 Move X1, X31
	235 Call Transform.get_position, X0
	236 Compare X20, 0
	237 JumpIfEqual {273}
	238 Move X0, X20
	239 Move X1, X31
	240 Call NavMeshAgent.SetDestination, X0, X1
	241 Move X8, [X31+56]
	242 Move X0, [X19+152]
	243 Move W9, 1
	244 Move [X19+128], W9
	245 Move [X19+248], X8
	246 Compare X0, 0
	247 JumpIfEqual {273}
	248 Call MobView.PlaySoundNotice, X0
	249 Move W8, [X19+128]
	250 Compare W8, 0
	251 JumpIfEqual {254}
	252 NotImplemented "Instruction CMP not yet implemented."
	253 NotImplemented "Instruction CMP not yet implemented."
	254 Move X0, X19
	255 Call MobControllerDog.UpdatePatrol, X0
	256 Move X0, X19
	257 Call MobControllerDog.UpdateAttack, X0
	258 Move X0, X19
	259 Call MobControllerDog.AttackPlayer, X0
	260 Move X20, [X31+96]
	261 Move X19, [X31+104]
	262 Move X22, [X31+80]
	263 Move X21, [X31+88]
	264 Move X24, [X31+64]
	265 Move X23, [X31+72]
	266 Move X30, [X31+48]
	267 Move D9, [X31+32]
	268 Move D8, [X31+40]
	269 Move D11, [X31+16]
	270 Move D10, [X31+24]
	271 Add X31, X31, 112
	272 Return 
	273 Call 0x1C17F20
	274 Call 0x1C17F28

Method: System.Void UpdatePatrol()

Disassembly:
	0x01E195B4 BL 0x1C16CF4
	0x01E195B8 MOVZ W8, 0x1
	0x01E195BC STRB W8, [X20 + 0xE0D]
	0x01E195C0 MOV X0, X19
	0x01E195C4 MOV X1, X31
	0x01E195C8 BL 0x1E73F88
	0x01E195CC LDR X0, [X21]
	0x01E195D0 LDR X20, [X19 + 0x98]
	0x01E195D4 LDR W8, [X0 + 0xE0]
	0x01E195D8 CBNZ W8, 0x1E195E4
	0x01E195DC BL 0x1C16DFC
	0x01E195E0 LDR X0, [X21]
	0x01E195E4 CBZ X20, 0x1E19634
	0x01E195E8 LDR X8, [X0 + 0xB8]
	0x01E195EC MOV X0, X20
	0x01E195F0 MOV X1, X31
	0x01E195F4 LDP S1, S2, [X8 + 0x4]
	0x01E195F8 LDR V0, [X8]
	0x01E195FC BL 0x3C3EC04
	0x01E19600 MOV X0, X19
	0x01E19604 BL 0x1E19638
	0x01E19608 LDR X8, [X21]
	0x01E1960C LDR X8, [X8 + 0xB8]
	0x01E19610 LDR X0, [X8 + 0x18]
	0x01E19614 CBZ X0, 0x1E19634
	0x01E19618 ADRP X8, 0x22E1000
	0x01E1961C LDR X8, [X8 + 0x438]
	0x01E19620 MOV X1, X19
	0x01E19624 LDP X20, X19, [X31 + 0x10]
	0x01E19628 LDR X2, [X8]
	0x01E1962C LDP X30, X21, [X31], #0x20
	0x01E19630 B 0x2DBEF30
	0x01E19634 BL 0x1C16F20
	0x01E19638 STP X30, X19, [X31 - 0x10]!
	0x01E1963C LDR X19, [X0 + 0x90]
	0x01E19640 BL 0x1E193A8
	0x01E19644 CBZ X19, 0x1E19660
	0x01E19648 ORN W8, W31, W0, 0x0
	0x01E1964C AND W1, W8, 0x1
	0x01E19650 MOV X0, X19
	0x01E19654 MOV X2, X31
	0x01E19658 LDP X30, X19, [X31], #0x10
	0x01E1965C B 0x3C357B4
	0x01E19660 BL 0x1C16F20
	0x01E19664 STP X30, X23, [X31 - 0x30]!
	0x01E19668 STP X22, X21, [X31 + 0x10]
	0x01E1966C STP X20, X19, [X31 + 0x20]
	0x01E19670 ADRP X23, 0x25BF000
	0x01E19674 ADRP X22, 0x22DE000
	0x01E19678 LDRB W8, [X23 + 0xE0E]
	0x01E1967C LDR X22, [X22 + 0x858]
	0x01E19680 MOV W21, W2
	0x01E19684 MOV X20, X1
	0x01E19688 MOV X19, X0
	0x01E1968C TBNZ X8, 0x0, 0x1E196B0
	0x01E19690 ADRP X0, 0x22E1000
	0x01E19694 LDR X0, [X0 + 0x430]
	0x01E19698 BL 0x1C16CF4
	0x01E1969C ADRP X0, 0x22DE000
	0x01E196A0 LDR X0, [X0 + 0x858]
	0x01E196A4 BL 0x1C16CF4
	0x01E196A8 MOVZ W8, 0x1
	0x01E196AC STRB W8, [X23 + 0xE0E]
	0x01E196B0 AND W2, W21, 0x1
	0x01E196B4 MOV X0, X19
	0x01E196B8 MOV X1, X20
	0x01E196BC MOV X3, X31
	0x01E196C0 BL 0x1E73F8C
	0x01E196C4 LDR X0, [X22]
	0x01E196C8 LDR W8, [X0 + 0xE0]
	0x01E196CC CBNZ W8, 0x1E196D8
	0x01E196D0 BL 0x1C16DFC
	0x01E196D4 LDR X0, [X22]
	0x01E196D8 LDR X8, [X0 + 0xB8]
	0x01E196DC LDR X0, [X8 + 0x18]
	0x01E196E0 CBZ X0, 0x1E19704
	0x01E196E4 ADRP X8, 0x22E1000
	0x01E196E8 LDR X8, [X8 + 0x430]
	0x01E196EC MOV X1, X19
	0x01E196F0 LDP X20, X19, [X31 + 0x20]
	0x01E196F4 LDP X22, X21, [X31 + 0x10]
	0x01E196F8 LDR X2, [X8]
	0x01E196FC LDP X30, X23, [X31], #0x30
	0x01E19700 B 0x2DBE67C
	0x01E19704 BL 0x1C16F20
	0x01E19708 SUB X31, X31, 0x20
	0x01E1970C STP X30, X19, [X31 + 0x10]
	0x01E19710 MOV X1, X31
	0x01E19714 MOV X19, X0
	0x01E19718 BL 0x1E79788
	0x01E1971C MOV X0, X19
	0x01E19720 BL 0x1E193A8
	0x01E19724 TBZ X0, 0x0, 0x1E19750
	0x01E19728 MOV X0, X19
	0x01E1972C BL 0x1E1921C
	0x01E19730 STR W0, [X31 + 0x8]
	0x01E19734 LDR X1, [X19 + 0x38]
	0x01E19738 ADD X0, X31, 0x8
	0x01E1973C MOV X2, X31
	0x01E19740 BL 0x1E91B84
	0x01E19744 TBZ X0, 0x0, 0x1E19750
	0x01E19748 MOV X0, X19
	0x01E1974C BL 0x1E1975C
	0x01E19750 LDP X30, X19, [X31 + 0x10]
	0x01E19754 ADD X31, X31, 0x20
	0x01E19758 RET
	0x01E1975C STP X30, X19, [X31 - 0x10]!
	0x01E19760 MOV W1, W31
	0x01E19764 MOV X19, X0
	0x01E19768 BL 0x1E19410
	0x01E1976C MOV X0, X19
	0x01E19770 MOV W1, W31
	0x01E19774 BL 0x1E19344
	0x01E19778 MOV X0, X31
	0x01E1977C BL 0x1E91B08
	0x01E19780 AND X1, X0, 0x0
	0x01E19784 MOV X0, X19
	0x01E19788 LDP X30, X19, [X31], #0x10
	0x01E1978C B 0x1E1927C
	0x01E19790 STR X30, [X31 - 0x20]!
	0x01E19794 STP X20, X19, [X31 + 0x10]
	0x01E19798 ADRP X20, 0x25BF000
	0x01E1979C LDRB W8, [X20 + 0xE0F]
	0x01E197A0 MOV X19, X1
	0x01E197A4 TBNZ X8, 0x0, 0x1E197BC
	0x01E197A8 ADRP X0, 0x22DD000
	0x01E197AC LDR X0, [X0 + 0x428]
	0x01E197B0 BL 0x1C16CF4
	0x01E197B4 MOVZ W8, 0x1
	0x01E197B8 STRB W8, [X20 + 0xE0F]
	0x01E197BC CBZ X19, 0x1E197F4
	0x01E197C0 MOV X0, X19
	0x01E197C4 MOV X1, X31
	0x01E197C8 BL 0x3C32ECC
	0x01E197CC CBZ X0, 0x1E197F4
	0x01E197D0 ADRP X19, 0x22DD000
	0x01E197D4 LDR X19, [X19 + 0x428]
	0x01E197D8 MOV X1, X31
	0x01E197DC BL 0x3C333E4
	0x01E197E0 LDR X1, [X19]
	0x01E197E4 LDP X20, X19, [X31 + 0x10]
	0x01E197E8 MOV X2, X31
	0x01E197EC LDR X30, [X31], #0x20
	0x01E197F0 B 0x321BA08
	0x01E197F4 BL 0x1C16F20
	0x01E197F8 STR X30, [X31 - 0x20]!
	0x01E197FC STP X20, X19, [X31 + 0x10]
	0x01E19800 MOV X20, X1
	0x01E19804 MOV X19, X0
	0x01E19808 BL 0x1E193A8
	0x01E1980C TBNZ X0, 0x0, 0x1E1981C
	0x01E19810 MOV X0, X19
	0x01E19814 BL 0x1E192DC
	0x01E19818 TBZ X0, 0x0, 0x1E19828
	0x01E1981C LDP X20, X19, [X31 + 0x10]
	0x01E19820 LDR X30, [X31], #0x20
	0x01E19824 RET
	0x01E19828 CBZ X20, 0x1E19858
	0x01E1982C MOV X0, X20
	0x01E19830 MOV X1, X31
	0x01E19834 BL 0x3C8F78C
	0x01E19838 TBZ X0, 0x0, 0x1E19848
	0x01E1983C MOV X1, X20
	0x01E19840 BL 0x1E19790
	0x01E19844 TBZ X0, 0x0, 0x1E1981C
	0x01E19848 MOV X0, X19
	0x01E1984C LDP X20, X19, [X31 + 0x10]
	0x01E19850 LDR X30, [X31], #0x20
	0x01E19854 B 0x1E1985C
	0x01E19858 BL 0x1C16F20
	0x01E1985C STP X30, X21, [X31 - 0x20]!
	0x01E19860 STP X20, X19, [X31 + 0x10]
	0x01E19864 ADRP X20, 0x25BF000
	0x01E19868 LDRB W8, [X20 + 0xE10]
	0x01E1986C MOV X19, X0
	0x01E19870 TBNZ X8, 0x0, 0x1E198A0
	0x01E19874 ADRP X0, 0x22DE000
	0x01E19878 LDR X0, [X0 + 0x858]
	0x01E1987C BL 0x1C16CF4
	0x01E19880 ADRP X0, 0x22DD000
	0x01E19884 LDR X0, [X0 + 0xA78]
	0x01E19888 BL 0x1C16CF4
	0x01E1988C ADRP X0, 0x22E1000
	0x01E19890 LDR X0, [X0 + 0x440]
	0x01E19894 BL 0x1C16CF4
	0x01E19898 MOVZ W8, 0x1
	0x01E1989C STRB W8, [X20 + 0xE10]
	0x01E198A0 LDRB W8, [X19 + 0x58]
	0x01E198A4 CBZ W8, 0x1E19934
	0x01E198A8 STRB W31, [X19 + 0x58]
	0x01E198AC MOV X0, X19
	0x01E198B0 BL 0x1E192DC
	0x01E198B4 TBNZ X0, 0x0, 0x1E19970
	0x01E198B8 MOVZ W1, 0x1
	0x01E198BC MOV X0, X19
	0x01E198C0 BL 0x1E19344
	0x01E198C4 ADRP X21, 0x22DE000
	0x01E198C8 LDR X21, [X21 + 0x858]
	0x01E198CC LDR X20, [X19 + 0x98]
	0x01E198D0 LDR X0, [X21]
	0x01E198D4 LDR W8, [X0 + 0xE0]
	0x01E198D8 CBNZ W8, 0x1E198E4
	0x01E198DC BL 0x1C16DFC
	0x01E198E0 LDR X0, [X21]
	0x01E198E4 CBZ X20, 0x1E19A60
	0x01E198E8 LDR X8, [X0 + 0xB8]
	0x01E198EC MOV X0, X20
	0x01E198F0 MOV X1, X31
	0x01E198F4 LDP S1, S2, [X8 + 0x10]
	0x01E198F8 LDR V0, [X8 + 0xC]
	0x01E198FC BL 0x3C3EC04
	0x01E19900 LDR X20, [X19 + 0x80]
	0x01E19904 MOV X0, X19
	0x01E19908 MOV X1, X31
	0x01E1990C BL 0x3C32E90
	0x01E19910 CBZ X0, 0x1E19A60
	0x01E19914 MOV X1, X31
	0x01E19918 BL 0x3C3F58C
	0x01E1991C MOV X0, X20
	0x01E19920 LDP X20, X19, [X31 + 0x10]
	0x01E19924 FMOV S3, 1
	0x01E19928 MOV X1, X31
	0x01E1992C LDP X30, X21, [X31], #0x20
	0x01E19930 B 0x1DC15C4
	0x01E19934 ADRP X20, 0x22DD000
	0x01E19938 LDR X20, [X20 + 0xA78]
	0x01E1993C LDR X0, [X20]
	0x01E19940 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X8, [X0+272]
	014 Compare X8, 0
	015 JumpIfEqual {262}
	016 Move X8, [X8+24]
	017 Compare X8, 0
	018 JumpIfEqual {249}
	019 Move X19, X0
	020 Move X0, [X0+144]
	021 Compare X0, 0
	022 JumpIfEqual {262}
	023 Move X1, X31
	024 Call Component.get_transform, X0
	025 Compare X0, 0
	026 JumpIfEqual {262}
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X0, X31
	030 Call Extensions.Flatten, X0
	031 Move X8, [X19+272]
	032 Compare X8, 0
	033 JumpIfEqual {262}
	034 NotImplemented "Instruction LDRSW not yet implemented."
	035 Move W10, [X8+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Add X8, X8, X9
	038 Move X0, [X8+32]
	039 Compare X0, 0
	040 JumpIfEqual {262}
	041 Move X1, X31
	042 Move V8, V0
	043 Move V9, V1
	044 Move V10, V2
	045 Call Transform.get_position, X0
	046 Move X0, X31
	047 Call Extensions.Flatten, X0
	048 Move X21, 0x25C0000
	049 Move W8, [X21+2140]
	050 Move V11, V0
	051 Move V12, V1
	052 Move V13, V2
	053 Compare W8, 0
	054 JumpIfNotEqual {60}
	055 Move X0, 0x22DB000
	056 Move X0, [X0+1448]
	057 Call 0x1C17CF4
	058 Move W8, 1
	059 Move [X21+2140], W8
	060 Move X22, 0x22DB000
	061 Move X22, [X22+1448]
	062 Subtract S11, S8, S11
	063 Subtract S9, S9, S12
	064 Subtract S8, S10, S13
	065 Move X0, [X22]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Multiply S0, S11, S11
	071 Multiply S1, S9, S9
	072 Move X8, -20111360
	073 Add S0, S0, S1
	074 Move V1, [X8+188]
	075 Multiply S2, S8, S8
	076 Add S0, S2, S0
	077 NotImplemented "Instruction FSQRT not yet implemented."
	078 NotImplemented "Instruction FCMP not yet implemented."
	079 Move W8, [X19+280]
	080 Move X9, [X19+272]
	081 Add W8, W8, 1
	082 Move [X19+280], W8
	083 Compare X9, 0
	084 JumpIfEqual {262}
	085 Move W9, [X9+24]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move [X19+280], W31
	088 Move X0, [X19+152]
	089 Compare X0, 0
	090 JumpIfEqual {262}
	091 Move W1, W31
	092 Call MobView.SetWalk, X0, X1
	093 Move X0, X19
	094 Move W1, W31
	095 Call MobControllerDog.set_MoveStatus, X0, X1
	096 Move X0, [X19+144]
	097 Compare X0, 0
	098 JumpIfEqual {262}
	099 Move W1, 1
	100 Move X2, X31
	101 Call NavMeshAgent.set_updateRotation, X0, X1
	102 Move X20, [X19+144]
	103 Compare X20, 0
	104 JumpIfEqual {262}
	105 Move X0, X20
	106 Move X1, X31
	107 Call Component.get_transform, X0
	108 Compare X0, 0
	109 JumpIfEqual {262}
	110 Move X1, X31
	111 Call Transform.get_position, X0
	112 Move X0, X20
	113 Move X1, X31
	114 Call NavMeshAgent.SetDestination, X0, X1
	115 Move V8, [X19+220]
	116 Move [X19+236], W31
	117 Move [X19+244], S8
	118 Move V8, [X19+244]
	119 NotImplemented "Instruction FCMP not yet implemented."
	120 Move X0, X31
	121 Call Time.get_deltaTime
	122 Subtract S0, S8, S0
	123 Move X0, [X19+152]
	124 Compare X0, 0
	125 JumpIfEqual {262}
	126 Call MobView.get_isWalking, X0
	127 Move TEMP, X0
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfEqual {168}
	131 Move X0, [X19+152]
	132 Compare X0, 0
	133 JumpIfEqual {262}
	134 Move W1, 1
	135 Call MobView.SetWalk, X0, X1
	136 Move X0, [X19+152]
	137 Compare X0, 0
	138 JumpIfEqual {262}
	139 Move V0, [X19+204]
	140 Call MobView.SetWalkSpeed, X0, V0
	141 Move W1, 1
	142 Move X0, X19
	143 Call MobControllerDog.set_MoveStatus, X0, X1
	144 Move X0, [X19+144]
	145 Compare X0, 0
	146 JumpIfEqual {262}
	147 Move W1, 1
	148 Move X2, X31
	149 Call NavMeshAgent.set_updateRotation, X0, X1
	150 Move X8, [X19+272]
	151 Compare X8, 0
	152 JumpIfEqual {262}
	153 NotImplemented "Instruction LDRSW not yet implemented."
	154 Move W10, [X8+24]
	155 NotImplemented "Instruction CMP not yet implemented."
	156 Add X8, X8, X9
	157 Move X0, [X8+32]
	158 Compare X0, 0
	159 JumpIfEqual {262}
	160 Move X20, [X19+144]
	161 Move X1, X31
	162 Call Transform.get_position, X0
	163 Compare X20, 0
	164 JumpIfEqual {262}
	165 Move X0, X20
	166 Move X1, X31
	167 Call NavMeshAgent.SetDestination, X0, X1
	168 Move V11, [X19+236]
	169 Move X0, X19
	170 Move X1, X31
	171 Call Component.get_transform, X0
	172 Compare X0, 0
	173 JumpIfEqual {262}
	174 Move X1, X31
	175 Call Transform.get_position, X0
	176 Move S12, [X19+224]
	177 Move S13, [X19+228]
	178 Move W8, [X21+2140]
	179 Move V14, [X19+232]
	180 Move V8, V0
	181 Move V9, V1
	182 Move V10, V2
	183 Compare W8, 0
	184 JumpIfNotEqual {190}
	185 Move X0, 0x22DB000
	186 Move X0, [X0+1448]
	187 Call 0x1C17CF4
	188 Move W8, 1
	189 Move [X21+2140], W8
	190 Move X0, [X22]
	191 Subtract S12, S8, S12
	192 Subtract S9, S9, S13
	193 Subtract S8, S10, S14
	194 Move W8, [X0+224]
	195 Compare W8, 0
	196 JumpIfNotEqual {198}
	197 Call 0x1C17DFC
	198 Multiply S0, S12, S12
	199 Multiply S1, S9, S9
	200 Add S0, S0, S1
	201 Multiply S1, S8, S8
	202 Add S0, S1, S0
	203 NotImplemented "Instruction FSQRT not yet implemented."
	204 Add S0, S11, S0
	205 Move X0, X19
	206 Move X1, X31
	207 Move [X19+236], S0
	208 Call Component.get_transform, X0
	209 Compare X0, 0
	210 JumpIfEqual {262}
	211 Move X1, X31
	212 Call Transform.get_position, X0
	213 Move V3, [X19+236]
	214 Move V4, [X19+212]
	215 Move [X19+224], S0
	216 Move [X19+232], S1
	217 Move [X19+232], S2
	218 NotImplemented "Instruction FCMP not yet implemented."
	219 Move X0, [X19+152]
	220 Compare X0, 0
	221 JumpIfEqual {262}
	222 Move W1, W31
	223 Call MobView.SetWalk, X0, X1
	224 Move X0, X19
	225 Move W1, W31
	226 Call MobControllerDog.set_MoveStatus, X0, X1
	227 Move X0, [X19+144]
	228 Compare X0, 0
	229 JumpIfEqual {262}
	230 Move W1, 1
	231 Move X2, X31
	232 Call NavMeshAgent.set_updateRotation, X0, X1
	233 Move X20, [X19+144]
	234 Compare X20, 0
	235 JumpIfEqual {262}
	236 Move X0, X20
	237 Move X1, X31
	238 Call Component.get_transform, X0
	239 Compare X0, 0
	240 JumpIfEqual {262}
	241 Move X1, X31
	242 Call Transform.get_position, X0
	243 Move X0, X20
	244 Move X1, X31
	245 Call NavMeshAgent.SetDestination, X0, X1
	246 Move V0, [X19+220]
	247 Move [X19+236], W31
	248 Move [X19+244], S0
	249 Move X20, [X31+80]
	250 Move X19, [X31+88]
	251 Move X22, [X31+64]
	252 Move X21, [X31+72]
	253 Move X30, [X31+56]
	254 Move D9, [X31+40]
	255 Move D8, [X31+48]
	256 Move D11, [X31+24]
	257 Move D10, [X31+32]
	258 Move D13, [X31+8]
	259 Move D12, [X31+16]
	260 Move V14, [X31+96]
	261 Return 
	262 Call 0x1C17F20
	263 Call 0x1C17F28

Method: System.Void UpdateAttack()

Disassembly:
	0x01E19944 CBNZ W8, 0x1E1994C
	0x01E19948 BL 0x1C16DFC
	0x01E1994C MOV X0, X19
	0x01E19950 MOV X1, X31
	0x01E19954 BL 0x1E77B08
	0x01E19958 LDR X0, [X19 + 0x38]
	0x01E1995C CBZ X0, 0x1E19A60
	0x01E19960 MOV X1, X31
	0x01E19964 BL 0x1E9E538
	0x01E19968 CMP W0, 0x4
	0x01E1996C B.NE 0x1E1997C
	0x01E19970 LDP X20, X19, [X31 + 0x10]
	0x01E19974 LDP X30, X21, [X31], #0x20
	0x01E19978 RET
	0x01E1997C LDR X0, [X19 + 0x40]
	0x01E19980 CBZ X0, 0x1E19A60
	0x01E19984 MOV X1, X31
	0x01E19988 BL 0x1E94078
	0x01E1998C ANDS W31, W0, 0x7
	0x01E19990 B.EQ 0x1E199E8
	0x01E19994 TBNZ X0, 0x0, 0x1E198AC
	0x01E19998 LDR X8, [X19 + 0x38]
	0x01E1999C CBZ X8, 0x1E19A60
	0x01E199A0 LDR X0, [X8 + 0x50]
	0x01E199A4 CBZ X0, 0x1E19A60
	0x01E199A8 MOV X1, X31
	0x01E199AC BL 0x1EC4D00
	0x01E199B0 TBZ X0, 0x0, 0x1E19970
	0x01E199B4 LDR X8, [X19 + 0x38]
	0x01E199B8 CBZ X8, 0x1E19A60
	0x01E199BC LDR X0, [X8 + 0x50]
	0x01E199C0 MOVZ W1, 0x8
	0x01E199C4 MOV X2, X31
	0x01E199C8 BL 0x1ED9318
	0x01E199CC LDR X8, [X19 + 0x40]
	0x01E199D0 CBZ X8, 0x1E19A60
	0x01E199D4 LDR X8, [X8 + 0x20]
	0x01E199D8 MOV X20, X0
	0x01E199DC CBZ X8, 0x1E19A20
	0x01E199E0 LDR W0, [X8]
	0x01E199E4 B 0x1E19A24
	0x01E199E8 LDR X0, [X20]
	0x01E199EC LDR X19, [X19 + 0x40]
	0x01E199F0 LDR W8, [X0 + 0xE0]
	0x01E199F4 CBNZ W8, 0x1E199FC
	0x01E199F8 BL 0x1C16DFC
	0x01E199FC ADRP X8, 0x22E1000
	0x01E19A00 LDR X8, [X8 + 0x440]
	0x01E19A04 MOV X1, X19
	0x01E19A08 LDP X20, X19, [X31 + 0x10]
	0x01E19A0C MOVZ W2, 0x7
	0x01E19A10 LDR X0, [X8]
	0x01E19A14 MOV X3, X31
	0x01E19A18 LDP X30, X21, [X31], #0x20
	0x01E19A1C B 0x1E77B00
	0x01E19A20 MOV X0, X31
	0x01E19A24 LDR W1, [X19 + 0x68]
	0x01E19A28 MOVZ W2, 0x1
	0x01E19A2C MOV X3, X31
	0x01E19A30 BL 0x1E9C23C
	0x01E19A34 STUR X0, [X20 + 0x1C]
	0x01E19A38 CBZ X20, 0x1E19A60
	0x01E19A3C MOVZ W8, 0x40
	0x01E19A40 STR W8, [X20 + 0xC]
	0x01E19A44 LDR X0, [X19 + 0x38]
	0x01E19A48 CBZ X0, 0x1E19A60
	0x01E19A4C MOV X1, X20
	0x01E19A50 LDP X20, X19, [X31 + 0x10]
	0x01E19A54 MOV X2, X31
	0x01E19A58 LDP X30, X21, [X31], #0x20
	0x01E19A5C B 0x1EA1E24
	0x01E19A60 BL 0x1C16F20
	0x01E19A64 STR X30, [X31 - 0x20]!
	0x01E19A68 STP X20, X19, [X31 + 0x10]
	0x01E19A6C MOV X20, X1
	0x01E19A70 MOV X19, X0
	0x01E19A74 BL 0x1E193A8
	0x01E19A78 TBZ X0, 0x0, 0x1E19A88
	0x01E19A7C LDP X20, X19, [X31 + 0x10]
	0x01E19A80 LDR X30, [X31], #0x20
	0x01E19A84 RET
	0x01E19A88 CBZ X20, 0x1E19AB8
	0x01E19A8C MOV X0, X20
	0x01E19A90 MOV X1, X31
	0x01E19A94 BL 0x3C8F78C
	0x01E19A98 TBZ X0, 0x0, 0x1E19AA8
	0x01E19A9C MOV X1, X20
	0x01E19AA0 BL 0x1E19790
	0x01E19AA4 TBZ X0, 0x0, 0x1E19A7C
	0x01E19AA8 MOV X0, X19
	0x01E19AAC LDP X20, X19, [X31 + 0x10]
	0x01E19AB0 LDR X30, [X31], #0x20
	0x01E19AB4 B 0x1E19ABC
	0x01E19AB8 BL 0x1C16F20
	0x01E19ABC SUB X31, X31, 0xA0
	0x01E19AC0 STR D10, [X31 + 0x60]
	0x01E19AC4 STP D9, D8, [X31 + 0x68]
	0x01E19AC8 STR X30, [X31 + 0x78]
	0x01E19ACC STP X22, X21, [X31 + 0x80]
	0x01E19AD0 STP X20, X19, [X31 + 0x90]
	0x01E19AD4 ADRP X20, 0x25BF000
	0x01E19AD8 LDRB W8, [X20 + 0xE11]
	0x01E19ADC MOV X19, X0
	0x01E19AE0 TBNZ X8, 0x0, 0x1E19B7C
	0x01E19AE4 ADRP X0, 0x22DA000
	0x01E19AE8 LDR X0, [X0 + 0xB50]
	0x01E19AEC BL 0x1C16CF4
	0x01E19AF0 ADRP X0, 0x22DE000
	0x01E19AF4 LDR X0, [X0 + 0x858]
	0x01E19AF8 BL 0x1C16CF4
	0x01E19AFC ADRP X0, 0x22DD000
	0x01E19B00 LDR X0, [X0 + 0xA78]
	0x01E19B04 BL 0x1C16CF4
	0x01E19B08 ADRP X0, 0x22DD000
	0x01E19B0C LDR X0, [X0 + 0xF08]
	0x01E19B10 BL 0x1C16CF4
	0x01E19B14 ADRP X0, 0x22DD000
	0x01E19B18 LDR X0, [X0 + 0xB58]
	0x01E19B1C BL 0x1C16CF4
	0x01E19B20 ADRP X0, 0x22DD000
	0x01E19B24 LDR X0, [X0 + 0xB60]
	0x01E19B28 BL 0x1C16CF4
	0x01E19B2C ADRP X0, 0x22DE000
	0x01E19B30 LDR X0, [X0 + 0x160]
	0x01E19B34 BL 0x1C16CF4
	0x01E19B38 ADRP X0, 0x22DE000
	0x01E19B3C LDR X0, [X0 + 0x168]
	0x01E19B40 BL 0x1C16CF4
	0x01E19B44 ADRP X0, 0x22DA000
	0x01E19B48 LDR X0, [X0 + 0x5A0]
	0x01E19B4C BL 0x1C16CF4
	0x01E19B50 ADRP X0, 0x22E1000
	0x01E19B54 LDR X0, [X0 + 0x448]
	0x01E19B58 BL 0x1C16CF4
	0x01E19B5C ADRP X0, 0x22DE000
	0x01E19B60 LDR X0, [X0 + 0x468]
	0x01E19B64 BL 0x1C16CF4
	0x01E19B68 ADRP X0, 0x22E1000
	0x01E19B6C LDR X0, [X0 + 0x450]
	0x01E19B70 BL 0x1C16CF4
	0x01E19B74 MOVZ W8, 0x1
	0x01E19B78 STRB W8, [X20 + 0xE11]
	0x01E19B7C LDRB W8, [X19 + 0x58]
	0x01E19B80 CBZ W8, 0x1E19DC4
	0x01E19B84 STRB W31, [X19 + 0x58]
	0x01E19B88 MOV X0, X19
	0x01E19B8C BL 0x1E193A8
	0x01E19B90 TBNZ X0, 0x0, 0x1E19E00
	0x01E19B94 MOVZ W1, 0x1
	0x01E19B98 MOV X0, X19
	0x01E19B9C BL 0x1E19410
	0x01E19BA0 ADRP X21, 0x22DE000
	0x01E19BA4 LDR X21, [X21 + 0x858]
	0x01E19BA8 LDR X20, [X19 + 0x98]
	0x01E19BAC LDR X0, [X21]
	0x01E19BB0 LDR W8, [X0 + 0xE0]
	0x01E19BB4 CBNZ W8, 0x1E19BC0
	0x01E19BB8 BL 0x1C16DFC
	0x01E19BBC LDR X0, [X21]
	0x01E19BC0 CBZ X20, 0x1E19F20
	0x01E19BC4 LDR X8, [X0 + 0xB8]
	0x01E19BC8 MOV X0, X20
	0x01E19BCC MOV X1, X31
	0x01E19BD0 LDP S1, S2, [X8 + 0x4]
	0x01E19BD4 LDR V0, [X8]
	0x01E19BD8 BL 0x3C3EC04
	0x01E19BDC LDR X0, [X19 + 0x38]
	0x01E19BE0 FMOV S0, 30
	0x01E19BE4 MOV X1, X31
	0x01E19BE8 BL 0x1E91E68
	0x01E19BEC AND X1, X0, 0x0
	0x01E19BF0 MOV X0, X19
	0x01E19BF4 BL 0x1E1927C
	0x01E19BF8 LDR X20, [X19 + 0x38]
	0x01E19BFC LDR X21, [X19 + 0x88]
	0x01E19C00 MOV X0, X19
	0x01E19C04 MOV X1, X31
	0x01E19C08 BL 0x3C32E90
	0x01E19C0C CBZ X0, 0x1E19F20
	0x01E19C10 MOV X1, X31
	0x01E19C14 BL 0x3C3F58C
	0x01E19C18 MOV X0, X19
	0x01E19C1C MOV X1, X31
	0x01E19C20 MOV V8.16B, V0.16B
	0x01E19C24 MOV V9.16B, V1.16B
	0x01E19C28 MOV V10.16B, V2.16B
	0x01E19C2C BL 0x3C32E90
	0x01E19C30 CBZ X0, 0x1E19F20
	0x01E19C34 MOV X1, X31
	0x01E19C38 BL 0x3C3F988
	0x01E19C3C ADRP X8, 0x22DD000
	0x01E19C40 LDR X8, [X8 + 0xB58]
	0x01E19C44 FMOV S3, 0.5
	0x01E19C48 FMUL S0, S0, S3
	0x01E19C4C FMUL S1, S1, S3
	0x01E19C50 LDR X1, [X8]
	0x01E19C54 FMUL S2, S2, S3
	0x01E19C58 FADD S0, S8, S0
	0x01E19C5C FADD S1, S9, S1
	0x01E19C60 FADD S2, S10, S2
	0x01E19C64 ADD X0, X31, 0x30
	0x01E19C68 STP X31, X31, [X31 + 0x30]
	0x01E19C6C BL 0x243BFEC
	0x01E19C70 ADRP X22, 0x25BF000
	0x01E19C74 LDRB W8, [X22 + 0x793]
	0x01E19C78 CBNZ W8, 0x1E19C90
	0x01E19C7C ADRP X0, 0x22DB000
	0x01E19C80 LDR X0, [X0 + 0x5A8]
	0x01E19C84 BL 0x1C16CF4
	0x01E19C88 MOVZ W8, 0x1
	0x01E19C8C STRB W8, [X22 + 0x793]
	0x01E19C90 ADRP X8, 0x22DB000
	0x01E19C94 LDR X8, [X8 + 0x5A8]
	0x01E19C98 ADRP X9, 0x22DD000
	0x01E19C9C ADD X0, X31, 0x18
	0x01E19CA0 LDR X8, [X8]
	0x01E19CA4 LDR X8, [X8 + 0xB8]
	0x01E19CA8 LDR X9, [X9 + 0xB60]
	0x01E19CAC LDP S0, S1, [X8]
	0x01E19CB0 LDP S2, S3, [X8 + 0x8]
	0x01E19CB4 LDR X1, [X9]
	0x01E19CB8 STP X31, X31, [X31 + 0x18]
	0x01E19CBC STR W31, [X31 + 0x28]
	0x01E19CC0 BL 0x2437C9C
	0x01E19CC4 CBZ X20, 0x1E19F20
	0x01E19CC8 ADRP X8, 0x22DD000
	0x01E19CCC LDP X2, X3, [X31 + 0x30]
	0x01E19CD0 LDR X8, [X8 + 0xF08]
	0x01E19CD4 LDUR V0, [X31 + 0x18]
	0x01E19CD8 LDR W9, [X31 + 0x28]
	0x01E19CDC ADD X4, X31, 0x40
	0x01E19CE0 LDR X8, [X8]
	0x01E19CE4 MOV X0, X20
	0x01E19CE8 MOV X1, X21
	0x01E19CEC MOV X5, X31
	0x01E19CF0 MOV X6, X31
	0x01E19CF4 MOV W7, W31
	0x01E19CF8 STR V0, [X31 + 0x4]
	0x01E19CFC STR W9, [X31 + 0x50]
	0x01E19D00 STR X8, [X31]
	0x01E19D04 BL 0x222B8DC
	0x01E19D08 ADRP X8, 0x22DE000
	0x01E19D0C LDR X8, [X8 + 0x160]
	0x01E19D10 MOVZ W1, 0x1
	0x01E19D14 LDR X0, [X8]
	0x01E19D18 BL 0x1C16D6C
	0x01E19D1C MOV X20, X0
	0x01E19D20 MOV X0, X19
	0x01E19D24 MOV X1, X31
	0x01E19D28 BL 0x3C32E90
	0x01E19D2C CBZ X0, 0x1E19F20
	0x01E19D30 MOV X1, X31
	0x01E19D34 BL 0x3C3F58C
	0x01E19D38 ADRP X8, 0x22DA000
	0x01E19D3C LDR X8, [X8 + 0x5A0]
	0x01E19D40 ADD X1, X31, 0x8
	0x01E19D44 STP S0, S1, [X31 + 0x8]
	0x01E19D48 STR S2, [X31 + 0x10]
	0x01E19D4C LDR X0, [X8]
	0x01E19D50 BL 0x1C16E04
	0x01E19D54 ADRP X8, 0x22DE000
	0x01E19D58 ADRP X9, 0x22DE000
	0x01E19D5C LDR X8, [X8 + 0x468]
	0x01E19D60 LDR X9, [X9 + 0x168]
	0x01E19D64 MOV X2, X0
	0x01E19D68 ADD X0, X31, 0x40
	0x01E19D6C LDR X1, [X8]
	0x01E19D70 LDR X3, [X9]
	0x01E19D74 STP X31, X31, [X31 + 0x40]
	0x01E19D78 BL 0x27ABC80
	0x01E19D7C CBZ X20, 0x1E19F20
	0x01E19D80 LDR W8, [X20 + 0x18]
	0x01E19D84 CBZ W8, 0x1E19F24
	0x01E19D88 LDR V0, [X31 + 0x4]
	0x01E19D8C ADRP X8, 0x22DA000
	0x01E19D90 STR V0, [X20 + 0x2]
	0x01E19D94 LDR X8, [X8 + 0xB50]
	0x01E19D98 LDR X0, [X8]
	0x01E19D9C LDR W8, [X0 + 0xE0]
	0x01E19DA0 CBNZ W8, 0x1E19DA8
	0x01E19DA4 BL 0x1C16DFC
	0x01E19DA8 ADRP X8, 0x22E1000
	0x01E19DAC LDR X8, [X8 + 0x448]
	0x01E19DB0 MOV X1, X20
	0x01E19DB4 MOV X2, X31
	0x01E19DB8 LDR X0, [X8]
	0x01E19DBC BL 0x1DD3B5C
	0x01E19DC0 B 0x1E19E00
	0x01E19DC4 ADRP X20, 0x22DD000
	0x01E19DC8 LDR X20, [X20 + 0xA78]
	0x01E19DCC LDR X0, [X20]
	0x01E19DD0 LDR W8, [X0 + 0xE0]
	0x01E19DD4 CBNZ W8, 0x1E19DDC
	0x01E19DD8 BL 0x1C16DFC
	0x01E19DDC MOV X0, X19
	0x01E19DE0 MOV X1, X31
	0x01E19DE4 BL 0x1E77B08
	0x01E19DE8 LDR X0, [X19 + 0x38]
	0x01E19DEC CBZ X0, 0x1E19F20
	0x01E19DF0 MOV X1, X31
	0x01E19DF4 BL 0x1E9E538
	0x01E19DF8 CMP W0, 0x4
	0x01E19DFC B.NE 0x1E19E1C
	0x01E19E00 LDP X20, X19, [X31 + 0x90]
	0x01E19E04 LDP X22, X21, [X31 + 0x80]
	0x01E19E08 LDR X30, [X31 + 0x78]
	0x01E19E0C LDP D9, D8, [X31 + 0x68]
	0x01E19E10 LDR V10, [X31 + 0x60]
	0x01E19E14 ADD X31, X31, 0xA0
	0x01E19E18 RET
	0x01E19E1C LDR X0, [X19 + 0x40]
	0x01E19E20 CBZ X0, 0x1E19F20
	0x01E19E24 MOV X1, X31
	0x01E19E28 BL 0x1E94078
	0x01E19E2C ANDS W31, W0, 0x7
	0x01E19E30 B.EQ 0x1E19E88
	0x01E19E34 TBNZ X0, 0x0, 0x1E19B88
	0x01E19E38 LDR X8, [X19 + 0x38]
	0x01E19E3C CBZ X8, 0x1E19F20
	0x01E19E40 LDR X0, [X8 + 0x50]
	0x01E19E44 CBZ X0, 0x1E19F20
	0x01E19E48 MOV X1, X31
	0x01E19E4C BL 0x1EC4D00
	0x01E19E50 TBZ X0, 0x0, 0x1E19E00
	0x01E19E54 LDR X8, [X19 + 0x38]
	0x01E19E58 CBZ X8, 0x1E19F20
	0x01E19E5C LDR X0, [X8 + 0x50]
	0x01E19E60 MOVZ W1, 0x8
	0x01E19E64 MOV X2, X31
	0x01E19E68 BL 0x1ED9318
	0x01E19E6C LDR X8, [X19 + 0x40]
	0x01E19E70 CBZ X8, 0x1E19F20

ISIL:
	001 Move [X31-112], D15
	002 Move [X31-104], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0x25C0000
	015 Move X20, 0x22DB000
	016 Move W8, [X21+3593]
	017 Move X20, [X20+1432]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x22DB000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3593], W8
	028 Move X0, [X20]
	029 Move X20, [X19+248]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {44}
	042 Move W8, 1
	043 Move [X19+128], W8
	044 Move V8, [X19+244]
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 Move X0, X19
	047 Move X1, X31
	048 Call Component.get_transform, X0
	049 Compare X0, 0
	050 JumpIfEqual {383}
	051 Move X1, X31
	052 Call Transform.get_position, X0
	053 Move X0, X31
	054 Call Extensions.Flatten, X0
	055 Move V3, [X19+264]
	056 Move V8, V0
	057 Move V9, V1
	058 Move V0, [X19+256]
	059 Move V1, [X19+260]
	060 Move V10, V2
	061 Move V2, V3
	062 Move X0, X31
	063 Call Extensions.Flatten, X0
	064 Move X21, 0x25C0000
	065 Move W8, [X21+2140]
	066 Move V11, V0
	067 Move V12, V1
	068 Move V13, V2
	069 Compare W8, 0
	070 JumpIfNotEqual {76}
	071 Move X0, 0x22DB000
	072 Move X0, [X0+1448]
	073 Call 0x1C17CF4
	074 Move W8, 1
	075 Move [X21+2140], W8
	076 Move X22, 0x22DB000
	077 Move X22, [X22+1448]
	078 Subtract S11, S8, S11
	079 Subtract S9, S9, S12
	080 Subtract S8, S10, S13
	081 Move X0, [X22]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {86}
	085 Call 0x1C17DFC
	086 Move X8, -20111360
	087 Multiply S0, S11, S11
	088 Multiply S1, S9, S9
	089 Move V14, [X8+188]
	090 Add S0, S0, S1
	091 Multiply S1, S8, S8
	092 Add S0, S1, S0
	093 NotImplemented "Instruction FSQRT not yet implemented."
	094 NotImplemented "Instruction FCMP not yet implemented."
	095 Move X0, [X19+144]
	096 Compare X0, 0
	097 JumpIfEqual {383}
	098 Move W1, 1
	099 Move X2, X31
	100 Move W20, 1
	101 Call NavMeshAgent.set_updateRotation, X0, X1
	102 Move [X19+236], W31
	103 Move [X19+240], W31
	104 Move [X19+128], W20
	105 Move X0, [X19+152]
	106 Compare X0, 0
	107 JumpIfEqual {383}
	108 Call MobView.get_isWalking, X0
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfEqual {126}
	113 Move X0, [X19+152]
	114 Compare X0, 0
	115 JumpIfEqual {383}
	116 Move W1, 1
	117 Call MobView.SetWalk, X0, X1
	118 Move X0, [X19+152]
	119 Compare X0, 0
	120 JumpIfEqual {383}
	121 Move V0, [X19+208]
	122 Call MobView.SetWalkSpeed, X0, V0
	123 Move W1, 2
	124 Move X0, X19
	125 Call MobControllerDog.set_MoveStatus, X0, X1
	126 Move V8, [X19+256]
	127 Move V9, [X19+260]
	128 Move V10, [X19+264]
	129 Move X0, X19
	130 Move X1, X31
	131 Call Component.get_transform, X0
	132 Compare X0, 0
	133 JumpIfEqual {383}
	134 Move X1, X31
	135 Call Transform.get_position, X0
	136 Subtract S0, S8, S0
	137 Subtract S1, S9, S1
	138 Subtract S2, S10, S2
	139 Move X0, X31
	140 Call Extensions.Flatten, X0
	141 Move X20, 0x25C0000
	142 Move W8, [X20+1925]
	143 Move V8, V0
	144 Move V9, V1
	145 Move V10, V2
	146 Compare W8, 0
	147 JumpIfNotEqual {153}
	148 Move X0, 0x22DB000
	149 Move X0, [X0+1448]
	150 Call 0x1C17CF4
	151 Move W8, 1
	152 Move [X20+1925], W8
	153 Move X0, [X22]
	154 Move W8, [X0+224]
	155 Compare W8, 0
	156 JumpIfNotEqual {158}
	157 Call 0x1C17DFC
	158 Multiply S0, S8, S8
	159 Multiply S1, S9, S9
	160 Move X8, -20111360
	161 Add S0, S0, S1
	162 Move V1, [X8+380]
	163 Multiply S2, S10, S10
	164 Add S0, S2, S0
	165 NotImplemented "Instruction FSQRT not yet implemented."
	166 NotImplemented "Instruction FCMP not yet implemented."
	167 NotImplemented "Instruction FDIV not yet implemented."
	168 NotImplemented "Instruction FDIV not yet implemented."
	169 NotImplemented "Instruction FDIV not yet implemented."
	170 Move X0, X31
	171 Call Time.get_deltaTime
	172 Subtract S0, S8, S0
	173 Move [X19+244], S0
	174 Move X20, 0x25C0000
	175 Move W8, [X20+1923]
	176 Compare W8, 0
	177 JumpIfNotEqual {183}
	178 Move X0, 0x22DB000
	179 Move X0, [X0+1440]
	180 Call 0x1C17CF4
	181 Move W8, 1
	182 Move [X20+1923], W8
	183 Move X8, 0x22DB000
	184 Move X8, [X8+1440]
	185 Move X8, [X8]
	186 Move X8, [X8+184]
	187 Move S8, [X8]
	188 Move S9, [X8+4]
	189 Move V10, [X8+8]
	190 Move X0, X19
	191 Move X1, X31
	192 Call Component.get_transform, X0
	193 Move X20, X0
	194 Move V0, V8
	195 Move V1, V9
	196 Move V2, V10
	197 Move X0, X31
	198 Call Quaternion.LookRotation, X0
	199 Compare X20, 0
	200 JumpIfEqual {383}
	201 Move X0, X20
	202 Move X1, X31
	203 Call Transform.set_rotation, X0, X1
	204 Move X0, [X19+144]
	205 Compare X0, 0
	206 JumpIfEqual {383}
	207 Move V2, [X19+264]
	208 Move V1, [X19+260]
	209 Move V0, [X19+256]
	210 Move X1, X31
	211 Call NavMeshAgent.SetDestination, X0, X1
	212 Move V11, [X19+240]
	213 Move X0, X19
	214 Move X1, X31
	215 Call Component.get_transform, X0
	216 Compare X0, 0
	217 JumpIfEqual {383}
	218 Move X1, X31
	219 Call Transform.get_position, X0
	220 Move S12, [X19+224]
	221 Move S13, [X19+228]
	222 Move W8, [X21+2140]
	223 Move V15, [X19+232]
	224 Move V8, V0
	225 Move V9, V1
	226 Move V10, V2
	227 Compare W8, 0
	228 JumpIfNotEqual {234}
	229 Move X0, 0x22DB000
	230 Move X0, [X0+1448]
	231 Call 0x1C17CF4
	232 Move W8, 1
	233 Move [X21+2140], W8
	234 Move X0, [X22]
	235 Subtract S12, S8, S12
	236 Subtract S9, S9, S13
	237 Subtract S8, S10, S15
	238 Move W8, [X0+224]
	239 Compare W8, 0
	240 JumpIfNotEqual {242}
	241 Call 0x1C17DFC
	242 Multiply S0, S12, S12
	243 Multiply S1, S9, S9
	244 Add S0, S0, S1
	245 Multiply S1, S8, S8
	246 Add S0, S1, S0
	247 NotImplemented "Instruction FSQRT not yet implemented."
	248 Add S0, S11, S0
	249 Move X0, X19
	250 Move X1, X31
	251 Move [X19+240], S0
	252 Call Component.get_transform, X0
	253 Compare X0, 0
	254 JumpIfEqual {383}
	255 Move X1, X31
	256 Call Transform.get_position, X0
	257 Move V3, [X19+240]
	258 Move V4, [X19+216]
	259 Move [X19+224], S0
	260 Move [X19+232], S1
	261 Move [X19+232], S2
	262 NotImplemented "Instruction FCMP not yet implemented."
	263 Move X0, [X19+152]
	264 Compare X0, 0
	265 JumpIfEqual {383}
	266 Move W1, W31
	267 Call MobView.SetWalk, X0, X1
	268 Move X0, X19
	269 Move W1, W31
	270 Call MobControllerDog.set_MoveStatus, X0, X1
	271 Move V0, [X19+220]
	272 Move X20, [X19+144]
	273 Move [X19+240], W31
	274 Move [X19+244], S0
	275 Compare X20, 0
	276 JumpIfEqual {383}
	277 Move X0, X20
	278 Move X1, X31
	279 Call Component.get_transform, X0
	280 Compare X0, 0
	281 JumpIfEqual {383}
	282 Move X1, X31
	283 Call Transform.get_position, X0
	284 Move X0, X20
	285 Move X1, X31
	286 Call NavMeshAgent.SetDestination, X0, X1
	287 Move X0, X19
	288 Move X1, X31
	289 Call Component.get_transform, X0
	290 Compare X0, 0
	291 JumpIfEqual {383}
	292 Move X1, X31
	293 Call Transform.get_position, X0
	294 Move X0, X31
	295 Call Extensions.Flatten, X0
	296 Move V3, [X19+264]
	297 Move V8, V0
	298 Move V9, V1
	299 Move V0, [X19+256]
	300 Move V1, [X19+260]
	301 Move V10, V2
	302 Move V2, V3
	303 Move X0, X31
	304 Call Extensions.Flatten, X0
	305 Move W8, [X21+2140]
	306 Move V11, V0
	307 Move V12, V1
	308 Move V13, V2
	309 Compare W8, 0
	310 JumpIfNotEqual {316}
	311 Move X0, 0x22DB000
	312 Move X0, [X0+1448]
	313 Call 0x1C17CF4
	314 Move W8, 1
	315 Move [X21+2140], W8
	316 Move X0, [X22]
	317 Subtract S11, S8, S11
	318 Subtract S9, S9, S12
	319 Subtract S8, S10, S13
	320 Move W8, [X0+224]
	321 Compare W8, 0
	322 JumpIfNotEqual {324}
	323 Call 0x1C17DFC
	324 Multiply S0, S11, S11
	325 Multiply S1, S9, S9
	326 Add S0, S0, S1
	327 Multiply S1, S8, S8
	328 Add S0, S1, S0
	329 NotImplemented "Instruction FSQRT not yet implemented."
	330 NotImplemented "Instruction FCMP not yet implemented."
	331 Move X0, [X19+152]
	332 Compare X0, 0
	333 JumpIfEqual {383}
	334 Move W1, W31
	335 Call MobView.SetWalk, X0, X1
	336 Move X0, X19
	337 Move W1, W31
	338 Call MobControllerDog.set_MoveStatus, X0, X1
	339 Move V0, [X19+220]
	340 Move X20, [X19+144]
	341 Move [X19+240], W31
	342 Move [X19+244], S0
	343 Compare X20, 0
	344 JumpIfEqual {383}
	345 Move X0, X20
	346 Move X1, X31
	347 Call Component.get_transform, X0
	348 Compare X0, 0
	349 JumpIfEqual {383}
	350 Move X1, X31
	351 Call Transform.get_position, X0
	352 Move X0, X20
	353 Move X20, [X31+96]
	354 Move X19, [X31+104]
	355 Move X22, [X31+80]
	356 Move X21, [X31+88]
	357 Move X30, [X31+64]
	358 Move D9, [X31+48]
	359 Move D8, [X31+56]
	360 Move D11, [X31+32]
	361 Move D10, [X31+40]
	362 Move D13, [X31+16]
	363 Move D12, [X31+24]
	364 Move X1, X31
	365 Move D15, [X31+112]
	366 Move D14, [X31+120]
	367 Call NavMeshAgent.SetDestination, X0, X1
	368 Return 
	369 Move X20, [X31+96]
	370 Move X19, [X31+104]
	371 Move X22, [X31+80]
	372 Move X21, [X31+88]
	373 Move X30, [X31+64]
	374 Move D9, [X31+48]
	375 Move D8, [X31+56]
	376 Move D11, [X31+32]
	377 Move D10, [X31+40]
	378 Move D13, [X31+16]
	379 Move D12, [X31+24]
	380 Move D15, [X31+112]
	381 Move D14, [X31+120]
	382 Return 
	383 Call 0x1C17F20

Method: System.Void AttackPlayer()

Disassembly:
	0x01E19E74 LDR X8, [X8 + 0x20]
	0x01E19E78 MOV X20, X0
	0x01E19E7C CBZ X8, 0x1E19ED0
	0x01E19E80 LDR W0, [X8]
	0x01E19E84 B 0x1E19ED4
	0x01E19E88 LDR X0, [X20]
	0x01E19E8C LDR X19, [X19 + 0x40]
	0x01E19E90 LDR W8, [X0 + 0xE0]
	0x01E19E94 CBNZ W8, 0x1E19E9C
	0x01E19E98 BL 0x1C16DFC
	0x01E19E9C ADRP X8, 0x22E1000
	0x01E19EA0 LDR X8, [X8 + 0x450]
	0x01E19EA4 MOV X1, X19
	0x01E19EA8 LDP X20, X19, [X31 + 0x90]
	0x01E19EAC LDP X22, X21, [X31 + 0x80]
	0x01E19EB0 LDR X0, [X8]
	0x01E19EB4 LDR X30, [X31 + 0x78]
	0x01E19EB8 LDP D9, D8, [X31 + 0x68]
	0x01E19EBC LDR V10, [X31 + 0x60]
	0x01E19EC0 MOVZ W2, 0x7
	0x01E19EC4 MOV X3, X31
	0x01E19EC8 ADD X31, X31, 0xA0
	0x01E19ECC B 0x1E77B00
	0x01E19ED0 MOV X0, X31
	0x01E19ED4 LDR W1, [X19 + 0x68]
	0x01E19ED8 MOVZ W2, 0x2
	0x01E19EDC MOV X3, X31
	0x01E19EE0 BL 0x1E9C23C
	0x01E19EE4 STUR X0, [X20 + 0x1C]
	0x01E19EE8 CBZ X20, 0x1E19F20
	0x01E19EEC MOVZ W8, 0x40
	0x01E19EF0 STR W8, [X20 + 0xC]
	0x01E19EF4 LDR X0, [X19 + 0x38]
	0x01E19EF8 CBZ X0, 0x1E19F20
	0x01E19EFC MOV X1, X20
	0x01E19F00 LDP X20, X19, [X31 + 0x90]
	0x01E19F04 LDP X22, X21, [X31 + 0x80]
	0x01E19F08 LDR X30, [X31 + 0x78]
	0x01E19F0C LDP D9, D8, [X31 + 0x68]
	0x01E19F10 LDR V10, [X31 + 0x60]
	0x01E19F14 MOV X2, X31
	0x01E19F18 ADD X31, X31, 0xA0
	0x01E19F1C B 0x1EA1E24
	0x01E19F20 BL 0x1C16F20
	0x01E19F24 BL 0x1C16F28
	0x01E19F28 B 0x1E19ABC
	0x01E19F2C MOV X1, X31
	0x01E19F30 B 0x1E74F04
	0x01E19F34 STR X30, [X31 - 0x30]!
	0x01E19F38 STP X22, X21, [X31 + 0x10]
	0x01E19F3C STP X20, X19, [X31 + 0x20]
	0x01E19F40 ADRP X19, 0x25BF000
	0x01E19F44 LDRB W8, [X19 + 0xE12]
	0x01E19F48 TBNZ X8, 0x0, 0x1E19F78
	0x01E19F4C ADRP X0, 0x22E1000
	0x01E19F50 LDR X0, [X0 + 0x458]
	0x01E19F54 BL 0x1C16CF4
	0x01E19F58 ADRP X0, 0x22E1000
	0x01E19F5C LDR X0, [X0 + 0x460]
	0x01E19F60 BL 0x1C16CF4
	0x01E19F64 ADRP X0, 0x22DE000
	0x01E19F68 LDR X0, [X0 + 0x858]
	0x01E19F6C BL 0x1C16CF4
	0x01E19F70 MOVZ W8, 0x1
	0x01E19F74 STRB W8, [X19 + 0xE12]
	0x01E19F78 ADRP X22, 0x25BF000
	0x01E19F7C ADRP X20, 0x22DE000
	0x01E19F80 ADRP X21, 0x22E1000
	0x01E19F84 ADRP X19, 0x22E1000
	0x01E19F88 LDRB W8, [X22 + 0x783]
	0x01E19F8C LDR X20, [X20 + 0x858]
	0x01E19F90 LDR X21, [X21 + 0x460]
	0x01E19F94 LDR X19, [X19 + 0x458]
	0x01E19F98 CBNZ W8, 0x1E19FB0
	0x01E19F9C ADRP X0, 0x22DA000
	0x01E19FA0 LDR X0, [X0 + 0x5A0]
	0x01E19FA4 BL 0x1C16CF4
	0x01E19FA8 MOVZ W8, 0x1
	0x01E19FAC STRB W8, [X22 + 0x783]
	0x01E19FB0 ADRP X8, 0x22DA000
	0x01E19FB4 LDR X8, [X8 + 0x5A0]
	0x01E19FB8 LDR X9, [X20]
	0x01E19FBC LDR X8, [X8]
	0x01E19FC0 LDR X9, [X9 + 0xB8]
	0x01E19FC4 LDR X8, [X8 + 0xB8]
	0x01E19FC8 LDR V0, [X8]
	0x01E19FCC LDR V1, [X8 + 0x8]
	0x01E19FD0 STR D0, [X9]
	0x01E19FD4 STR S1, [X9 + 0x8]
	0x01E19FD8 LDR X8, [X20]
	0x01E19FDC ADRP X9, 0xFFFFFFFFFECD4000
	0x01E19FE0 LDR V0, [X9 + 0x9E8]
	0x01E19FE4 LDR X8, [X8 + 0xB8]
	0x01E19FE8 STUR D0, [X8 + 0xC]
	0x01E19FEC STR W31, [X8 + 0x14]
	0x01E19FF0 LDR X0, [X21]
	0x01E19FF4 BL 0x1C16F10
	0x01E19FF8 LDR X1, [X19]
	0x01E19FFC MOV X19, X0
	0x01E1A000 BL 0x2DBDE08
	0x01E1A004 LDR X8, [X20]
	0x01E1A008 LDP X22, X21, [X31 + 0x10]
	0x01E1A00C LDR X8, [X8 + 0xB8]
	0x01E1A010 STR X19, [X8 + 0x18]
	0x01E1A014 LDP X20, X19, [X31 + 0x20]
	0x01E1A018 LDR X30, [X31], #0x30
	0x01E1A01C RET
	0x01E1A020 STP X30, X19, [X31 - 0x10]!
	0x01E1A024 LDR W1, [X0 + 0xA0]
	0x01E1A028 MOV X19, X0
	0x01E1A02C BL 0x1E1927C
	0x01E1A030 LDRB W1, [X19 + 0xA4]
	0x01E1A034 MOV X0, X19
	0x01E1A038 BL 0x1E19344
	0x01E1A03C LDRB W1, [X19 + 0xA5]
	0x01E1A040 MOV X0, X19
	0x01E1A044 LDP X30, X19, [X31], #0x10
	0x01E1A048 B 0x1E19410
	0x01E1A04C STP X30, X19, [X31 - 0x10]!
	0x01E1A050 MOV X19, X0
	0x01E1A054 BL 0x1E1921C
	0x01E1A058 STR W0, [X19 + 0xA0]

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x25C0000
	012 Move X20, 0x22DB000
	013 Move W8, [X21+3594]
	014 Move X20, [X20+1432]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x22DB000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move X0, 0x22E2000
	024 Move X0, [X0+992]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3594], W8
	028 Move X0, [X20]
	029 Move X20, [X19+248]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {116}
	042 Move X0, X19
	043 Move X1, X31
	044 Call Component.get_transform, X0
	045 Compare X0, 0
	046 JumpIfEqual {152}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X0, X31
	050 Call Extensions.Flatten, X0
	051 Move X0, [X19+248]
	052 Compare X0, 0
	053 JumpIfEqual {152}
	054 Move X1, X31
	055 Move V8, V0
	056 Move V9, V1
	057 Move V10, V2
	058 Call Component.get_transform, X0
	059 Compare X0, 0
	060 JumpIfEqual {152}
	061 Move X1, X31
	062 Call Transform.get_position, X0
	063 Move X0, X31
	064 Call Extensions.Flatten, X0
	065 Move X20, 0x25C0000
	066 Move W8, [X20+2140]
	067 Move V11, V0
	068 Move V12, V1
	069 Move V13, V2
	070 Compare W8, 0
	071 JumpIfNotEqual {77}
	072 Move X0, 0x22DB000
	073 Move X0, [X0+1448]
	074 Call 0x1C17CF4
	075 Move W8, 1
	076 Move [X20+2140], W8
	077 Move X8, 0x22DB000
	078 Move X8, [X8+1448]
	079 Subtract S11, S8, S11
	080 Subtract S9, S9, S12
	081 Subtract S8, S10, S13
	082 Move X0, [X8]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Multiply S0, S11, S11
	088 Multiply S1, S9, S9
	089 Move V2, [X19+188]
	090 Add S0, S0, S1
	091 Multiply S1, S8, S8
	092 Add S0, S1, S0
	093 NotImplemented "Instruction FSQRT not yet implemented."
	094 NotImplemented "Instruction FCMP not yet implemented."
	095 Move S0, [X19+196]
	096 Move S8, [X19+200]
	097 NotImplemented "Instruction FCMP not yet implemented."
	098 Move X20, [X19+248]
	099 Move W21, [X19+192]
	100 Move X0, X19
	101 Move X1, X31
	102 Move [X19+200], W31
	103 Call Component.get_transform, X0
	104 Move X8, [X19+64]
	105 Move X2, X0
	106 Compare X8, 0
	107 JumpIfEqual {127}
	108 Move X8, [X8+32]
	109 Compare X8, 0
	110 JumpIfEqual {127}
	111 Move W6, [X8]
	112 Move X0, X31
	113 Call Time.get_deltaTime
	114 Add S0, S8, S0
	115 Move [X19+200], S0
	116 Move X20, [X31+64]
	117 Move X19, [X31+72]
	118 Move X30, [X31+48]
	119 Move X21, [X31+56]
	120 Move D9, [X31+32]
	121 Move D8, [X31+40]
	122 Move D11, [X31+16]
	123 Move D10, [X31+24]
	124 Move D13, [X31+80]
	125 Move D12, [X31+88]
	126 Return 
	127 Move X6, X31
	128 Compare X20, 0
	129 JumpIfEqual {152}
	130 Move X9, 0x22E1000
	131 Move X3, [X19+288]
	132 Move X4, [X19+296]
	133 Move W8, [X19+104]
	134 Move X9, [X9+992]
	135 Move X0, X20
	136 Move W1, W21
	137 Move X20, [X31+64]
	138 Move X19, [X31+72]
	139 Move X5, [X9]
	140 Move X30, [X31+48]
	141 Move X21, [X31+56]
	142 Move D9, [X31+32]
	143 Move D8, [X31+40]
	144 Move D11, [X31+16]
	145 Move D10, [X31+24]
	146 NotImplemented "Instruction BFM not yet implemented."
	147 Move X7, X31
	148 Move D13, [X31+80]
	149 Move D12, [X31+88]
	150 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5, X6
	151 Return 
	152 Call 0x1C17F20

Method: System.Void HandleMoveStatusChanged()

Disassembly:
	0x01E1A0CC LDRB W10, [X8 + 0x130]
	0x01E1A0D0 LDRB W9, [X1 + 0x130]
	0x01E1A0D4 CMP W10, W9
	0x01E1A0D8 B.CC 0x1E1A100
	0x01E1A0DC LDR X8, [X8 + 0xC8]
	0x01E1A0E0 ADD X8, X8, X9, 0x3, LSL
	0x01E1A0E4 LDUR X8, [X8 - 0x8]
	0x01E1A0E8 CMP X8, X1
	0x01E1A0EC B.NE 0x1E1A100
	0x01E1A0F0 MOV X0, X19
	0x01E1A0F4 LDP X20, X19, [X31 + 0x10]
	0x01E1A0F8 LDR X30, [X31], #0x20
	0x01E1A0FC B 0x1E1985C
	0x01E1A100 MOV X0, X19
	0x01E1A104 BL 0x1C171E0
	0x01E1A108 BL 0x1C16F20
	0x01E1A10C STR X30, [X31 - 0x20]!
	0x01E1A110 STP X20, X19, [X31 + 0x10]
	0x01E1A114 ADRP X20, 0x25BE000
	0x01E1A118 LDRB W8, [X20 + 0xE14]
	0x01E1A11C MOV X19, X0
	0x01E1A120 TBNZ X8, 0x0, 0x1E1A138
	0x01E1A124 ADRP X0, 0x22DD000
	0x01E1A128 LDR X0, [X0 + 0x858]
	0x01E1A12C BL 0x1C16CF4
	0x01E1A130 MOVZ W8, 0x1
	0x01E1A134 STRB W8, [X20 + 0xE14]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobControllerDog.get_MoveStatus, X0
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Compare W0, 0
	008 JumpIfNotEqual {32}
	009 Move X8, [X19+152]
	010 Compare X8, 0
	011 JumpIfEqual {35}
	012 Move X0, [X8+48]
	013 Compare X0, 0
	014 JumpIfEqual {35}
	015 Move X1, X31
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call AudioSource.Stop, X0
	019 Return 
	020 Move X0, [X19+152]
	021 Compare X0, 0
	022 JumpIfEqual {35}
	023 Move X1, [X0+72]
	024 Move X0, [X19+152]
	025 Compare X0, 0
	026 JumpIfEqual {35}
	027 Move X1, [X0+64]
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Call MobView.PlaySound, X0, X1
	031 Return 
	032 Move X30, [X31+16]
	033 Move X19, [X31+24]
	034 Return 
	035 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01E1A138 CBZ X19, 0x1E1A190
	0x01E1A13C ADRP X9, 0x22DD000
	0x01E1A140 LDR X9, [X9 + 0x858]
	0x01E1A144 MOVZ W8, 0x1
	0x01E1A148 STRB W8, [X19 + 0x58]
	0x01E1A14C LDR X8, [X19]
	0x01E1A150 LDR X1, [X9]
	0x01E1A154 LDRB W10, [X8 + 0x130]
	0x01E1A158 LDRB W9, [X1 + 0x130]
	0x01E1A15C CMP W10, W9
	0x01E1A160 B.CC 0x1E1A188
	0x01E1A164 LDR X8, [X8 + 0xC8]
	0x01E1A168 ADD X8, X8, X9, 0x3, LSL
	0x01E1A16C LDUR X8, [X8 - 0x8]
	0x01E1A170 CMP X8, X1
	0x01E1A174 B.NE 0x1E1A188
	0x01E1A178 MOV X0, X19
	0x01E1A17C LDP X20, X19, [X31 + 0x10]
	0x01E1A180 LDR X30, [X31], #0x20
	0x01E1A184 B 0x1E19ABC
	0x01E1A188 MOV X0, X19
	0x01E1A18C BL 0x1C171E0
	0x01E1A190 BL 0x1C16F20
	0x01E1A194 STP X30, X21, [X31 - 0x20]!
	0x01E1A198 STP X20, X19, [X31 + 0x10]
	0x01E1A19C ADRP X21, 0x25BE000
	0x01E1A1A0 LDRB W8, [X21 + 0xE18]
	0x01E1A1A4 MOV X19, X1
	0x01E1A1A8 MOV X20, X0
	0x01E1A1AC TBNZ X8, 0x0, 0x1E1A1C4
	0x01E1A1B0 ADRP X0, 0x22D9000
	0x01E1A1B4 LDR X0, [X0 + 0x598]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move S0, 1
	005 Move S1, W31
	006 Move S2, W31
	007 Move S3, 1
	008 Move X0, X31
	009 Call Gizmos.set_color, X0
	010 Move X0, [X19+160]
	011 Compare X0, 0
	012 JumpIfEqual {37}
	013 Move X1, X31
	014 Call Transform.get_position, X0
	015 Move V3, [X19+180]
	016 Move X0, X31
	017 Call Gizmos.DrawWireSphere, X0, V0
	018 Move X8, -20119552
	019 Move X9, -20115456
	020 Move V1, [X8+3984]
	021 Move V2, [X9+48]
	022 Move S0, 1
	023 Move S3, 1
	024 Move X0, X31
	025 Call Gizmos.set_color, X0
	026 Move X0, [X19+168]
	027 Compare X0, 0
	028 JumpIfEqual {37}
	029 Move X1, X31
	030 Call Transform.get_position, X0
	031 Move V3, [X19+184]
	032 Move X0, X31
	033 Move X30, [X31+16]
	034 Move X19, [X31+24]
	035 Call Gizmos.DrawWireSphere, X0, V0
	036 Return 
	037 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01E1A1B8 BL 0x1C16CF4
	0x01E1A1BC MOVZ W8, 0x1
	0x01E1A1C0 STRB W8, [X21 + 0xE18]
	0x01E1A1C4 LDR X0, [X20 + 0x30]
	0x01E1A1C8 CBZ X0, 0x1E1A268
	0x01E1A1CC ADRP X21, 0x22D9000
	0x01E1A1D0 LDR X21, [X21 + 0x598]
	0x01E1A1D4 MOV X1, X31
	0x01E1A1D8 BL 0x3BFC9FC
	0x01E1A1DC LDR X8, [X21]
	0x01E1A1E0 MOV X21, X0
	0x01E1A1E4 LDR W9, [X8 + 0xE0]
	0x01E1A1E8 CBNZ W9, 0x1E1A1F4
	0x01E1A1EC MOV X0, X8
	0x01E1A1F0 BL 0x1C16DFC
	0x01E1A1F4 MOV X0, X21
	0x01E1A1F8 MOV X1, X19

ISIL:
	001 Move X8, -20103168
	002 Move V0, [X8+1744]
	003 Move X8, 0x3F800000
	004 NotImplemented "Instruction MOVK not yet implemented."
	005 Move [X0+188], X8
	006 Move X8, -20103168
	007 Move [X0+180], D0
	008 Move V0, [X8+9]
	009 Move W8, 0xCCCD
	010 NotImplemented "Instruction MOVK not yet implemented."
	011 Move [X0+196], W8
	012 Move W8, 0x40A00000
	013 Move X1, X31
	014 Move [X0+220], W8
	015 Move [X0+204], V0
	016 Move [X0+244], W8
	017 Call NetworkBehaviour..ctor, X0
	018 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01E1A1FC MOV X2, X31
	0x01E1A200 BL 0x3C354F8

ISIL:
	001 Move W1, [X0+304]
	002 Call MobControllerDog.set_MoveStatus, X0, X1
	003 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01E1A204 TBZ X0, 0x0, 0x1E1A22C
	0x01E1A208 LDR X0, [X20 + 0x30]
	0x01E1A20C CBZ X0, 0x1E1A268
	0x01E1A210 MOV X1, X31
	0x01E1A214 BL 0x3BFCC80
	0x01E1A218 TBZ X0, 0x0, 0x1E1A22C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobControllerDog.get_MoveStatus, X0
	005 Move [X19+304], W0
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 

