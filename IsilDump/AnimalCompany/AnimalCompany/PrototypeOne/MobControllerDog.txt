Type: AnimalCompany.PrototypeOne.MobControllerDog

Method: AnimalCompany.PrototypeOne.MobControllerDog/MobMoveStatus get_MoveStatus()

Disassembly:
	0x01D057C8 MOV X1, X31
	0x01D057CC LDP X30, X19, [X31], #0x10
	0x01D057D0 B 0x3A65A98
	0x01D057D4 LDR X0, [X19 + 0x98]
	0x01D057D8 CBZ X0, 0x1D05800
	0x01D057DC LDR X1, [X0 + 0x48]
	0x01D057E0 B 0x1D057F0
	0x01D057E4 LDR X0, [X19 + 0x98]
	0x01D057E8 CBZ X0, 0x1D05800
	0x01D057EC LDR X1, [X0 + 0x40]
	0x01D057F0 LDP X30, X19, [X31], #0x10
	0x01D057F4 B 0x1D068CC
	0x01D057F8 LDP X30, X19, [X31], #0x10
	0x01D057FC RET
	0x01D05800 BL 0x1B6EA1C
	0x01D05804 STP X30, X19, [X31 - 0x10]!
	0x01D05808 MOV X19, X0
	0x01D0580C FMOV S0, 1
	0x01D05810 FMOV S1, W31
	0x01D05814 FMOV S2, W31
	0x01D05818 FMOV S3, 1
	0x01D0581C MOV X0, X31
	0x01D05820 BL 0x3A75B14
	0x01D05824 LDR X0, [X19 + 0xA0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2249000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x224D000
	016 Move X0, [X0+160]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x224D000
	023 Move X0, [X0+168]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_MoveStatus(AnimalCompany.PrototypeOne.MobControllerDog/MobMoveStatus value)

Disassembly:
	0x01D05828 CBZ X0, 0x1D05880
	0x01D0582C MOV X1, X31
	0x01D05830 BL 0x3AA7658
	0x01D05834 LDR V3, [X19 + 0xB4]
	0x01D05838 MOV X0, X31
	0x01D0583C BL 0x3A7567C
	0x01D05840 ADRP X8, 0xFFFFFFFFFEDA4000
	0x01D05844 ADRP X9, 0xFFFFFFFFFEDA4000
	0x01D05848 LDR V1, [X8 + 0x994]
	0x01D0584C LDR V2, [X9 + 0xA28]
	0x01D05850 FMOV S0, 1
	0x01D05854 FMOV S3, 1
	0x01D05858 MOV X0, X31
	0x01D0585C BL 0x3A75B14
	0x01D05860 LDR X0, [X19 + 0xA8]
	0x01D05864 CBZ X0, 0x1D05880
	0x01D05868 MOV X1, X31
	0x01D0586C BL 0x3AA7658
	0x01D05870 LDR V3, [X19 + 0xB8]
	0x01D05874 MOV X0, X31
	0x01D05878 LDP X30, X19, [X31], #0x10
	0x01D0587C B 0x3A7567C
	0x01D05880 BL 0x1B6EA1C
	0x01D05884 ADRP X8, 0xFFFFFFFFFEDA7000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2249000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x224D000
	016 Move X0, [X0+160]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x224D000
	023 Move X0, [X0+176]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void Awake()

Disassembly:
	0x01D05888 LDR V0, [X8 + 0xF98]
	0x01D0588C MOVZ X8, 0x3F800000
	0x01D05890 MOVK X8, 0x14
	0x01D05894 STUR X8, [X0 + 0xBC]
	0x01D05898 ADRP X8, 0xFFFFFFFFFEDA7000
	0x01D0589C STUR D0, [X0 + 0xB4]
	0x01D058A0 LDR V0, [X8 + 0x97]
	0x01D058A4 MOVZ W8, 0xCCCD
	0x01D058A8 MOVK W8, 0x3E4C0000
	0x01D058AC STR W8, [X0 + 0xC4]
	0x01D058B0 MOVZ W8, 0x40A00000
	0x01D058B4 MOV X1, X31
	0x01D058B8 STR W8, [X0 + 0xDC]
	0x01D058BC STUR V0, [X0 + 0xCC]
	0x01D058C0 STR W8, [X0 + 0xF4]
	0x01D058C4 B 0x1D661D8
	0x01D058C8 LDR W1, [X0 + 0x130]
	0x01D058CC B 0x1D04828

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+152]
	005 Move [X19+128], W31
	006 Compare X0, 0
	007 JumpIfEqual {23}
	008 Move W1, W31
	009 Call MobView.SetWalk, X0, X1
	010 Move X0, X19
	011 Move X1, X31
	012 Call Component.get_transform, X0
	013 Compare X0, 0
	014 JumpIfEqual {23}
	015 Move X1, X31
	016 Call Transform.get_position, X0
	017 Move [X19+224], S0
	018 Move [X19+232], S1
	019 Move [X19+232], S2
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 
	023 Call 0x1B6FA1C

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01D058D0 STP X30, X19, [X31 - 0x10]!
	0x01D058D4 MOV X19, X0
	0x01D058D8 BL 0x1D047C8
	0x01D058DC STR W0, [X19 + 0x130]
	0x01D058E0 LDP X30, X19, [X31], #0x10
	0x01D058E4 RET
	0x01D058E8 STP X30, X19, [X31 - 0x10]!
	0x01D058EC LDR X8, [X0 + 0x50]
	0x01D058F0 CBZ X8, 0x1D05900
	0x01D058F4 LDR W0, [X8]
	0x01D058F8 LDP X30, X19, [X31], #0x10
	0x01D058FC RET
	0x01D05900 ADRP X0, 0x2248000
	0x01D05904 LDR X0, [X0 + 0x490]
	0x01D05908 BL 0x1B6E804
	0x01D0590C BL 0x1B6EA0C
	0x01D05910 MOV X19, X0
	0x01D05914 ADRP X0, 0x224C000
	0x01D05918 LDR X0, [X0 + 0xC0]
	0x01D0591C BL 0x1B6E804
	0x01D05920 MOV X1, X0
	0x01D05924 MOV X0, X19
	0x01D05928 MOV X2, X31
	0x01D0592C BL 0x31E7550
	0x01D05930 ADRP X0, 0x224C000
	0x01D05934 LDR X0, [X0 + 0xC8]
	0x01D05938 BL 0x1B6E804
	0x01D0593C MOV X1, X0
	0x01D05940 MOV X0, X19
	0x01D05944 BL 0x1B6E8E8
	0x01D05948 STP X30, X19, [X31 - 0x10]!
	0x01D0594C LDR X8, [X0 + 0x50]
	0x01D05950 CBZ X8, 0x1D05960
	0x01D05954 STR W1, [X8]
	0x01D05958 LDP X30, X19, [X31], #0x10
	0x01D0595C RET
	0x01D05960 ADRP X0, 0x2248000
	0x01D05964 LDR X0, [X0 + 0x490]
	0x01D05968 BL 0x1B6E804
	0x01D0596C BL 0x1B6EA0C
	0x01D05970 MOV X19, X0
	0x01D05974 ADRP X0, 0x224C000
	0x01D05978 LDR X0, [X0 + 0xC0]
	0x01D0597C BL 0x1B6E804
	0x01D05980 MOV X1, X0
	0x01D05984 MOV X0, X19
	0x01D05988 MOV X2, X31
	0x01D0598C BL 0x31E7550
	0x01D05990 ADRP X0, 0x224C000
	0x01D05994 LDR X0, [X0 + 0xD0]
	0x01D05998 BL 0x1B6E804
	0x01D0599C MOV X1, X0
	0x01D059A0 MOV X0, X19
	0x01D059A4 BL 0x1B6E8E8
	0x01D059A8 STP X30, X19, [X31 - 0x10]!
	0x01D059AC LDR X8, [X0 + 0x50]
	0x01D059B0 CBZ X8, 0x1D059C8
	0x01D059B4 LDR W8, [X8 + 0x4]
	0x01D059B8 CMP W8, 0x0
	0x01D059BC CSET W0, NE
	0x01D059C0 LDP X30, X19, [X31], #0x10
	0x01D059C4 RET
	0x01D059C8 ADRP X0, 0x2248000
	0x01D059CC LDR X0, [X0 + 0x490]
	0x01D059D0 BL 0x1B6E804
	0x01D059D4 BL 0x1B6EA0C
	0x01D059D8 MOV X19, X0
	0x01D059DC ADRP X0, 0x224C000
	0x01D059E0 LDR X0, [X0 + 0xD8]
	0x01D059E4 BL 0x1B6E804
	0x01D059E8 MOV X1, X0
	0x01D059EC MOV X0, X19
	0x01D059F0 MOV X2, X31
	0x01D059F4 BL 0x31E7550
	0x01D059F8 ADRP X0, 0x224C000
	0x01D059FC LDR X0, [X0 + 0xE0]
	0x01D05A00 BL 0x1B6E804
	0x01D05A04 MOV X1, X0
	0x01D05A08 MOV X0, X19
	0x01D05A0C BL 0x1B6E8E8
	0x01D05A10 STP X30, X19, [X31 - 0x10]!
	0x01D05A14 LDR X8, [X0 + 0x50]
	0x01D05A18 CBZ X8, 0x1D05A2C
	0x01D05A1C AND W9, W1, 0x1
	0x01D05A20 STR W9, [X8 + 0x4]
	0x01D05A24 LDP X30, X19, [X31], #0x10
	0x01D05A28 RET
	0x01D05A2C ADRP X0, 0x2248000
	0x01D05A30 LDR X0, [X0 + 0x490]
	0x01D05A34 BL 0x1B6E804
	0x01D05A38 BL 0x1B6EA0C
	0x01D05A3C MOV X19, X0
	0x01D05A40 ADRP X0, 0x224C000
	0x01D05A44 LDR X0, [X0 + 0xD8]
	0x01D05A48 BL 0x1B6E804
	0x01D05A4C MOV X1, X0
	0x01D05A50 MOV X0, X19
	0x01D05A54 MOV X2, X31
	0x01D05A58 BL 0x31E7550
	0x01D05A5C ADRP X0, 0x224C000
	0x01D05A60 LDR X0, [X0 + 0xE8]
	0x01D05A64 BL 0x1B6E804
	0x01D05A68 MOV X1, X0
	0x01D05A6C MOV X0, X19
	0x01D05A70 BL 0x1B6E8E8
	0x01D05A74 STP X30, X19, [X31 - 0x10]!
	0x01D05A78 LDR X8, [X0 + 0x50]
	0x01D05A7C CBZ X8, 0x1D05A94
	0x01D05A80 LDR W8, [X8 + 0x8]
	0x01D05A84 CMP W8, 0x0
	0x01D05A88 CSET W0, NE
	0x01D05A8C LDP X30, X19, [X31], #0x10
	0x01D05A90 RET
	0x01D05A94 ADRP X0, 0x2248000
	0x01D05A98 LDR X0, [X0 + 0x490]
	0x01D05A9C BL 0x1B6E804
	0x01D05AA0 BL 0x1B6EA0C
	0x01D05AA4 MOV X19, X0
	0x01D05AA8 ADRP X0, 0x224C000
	0x01D05AAC LDR X0, [X0 + 0xF0]
	0x01D05AB0 BL 0x1B6E804
	0x01D05AB4 MOV X1, X0
	0x01D05AB8 MOV X0, X19
	0x01D05ABC MOV X2, X31
	0x01D05AC0 BL 0x31E7550
	0x01D05AC4 ADRP X0, 0x224C000
	0x01D05AC8 LDR X0, [X0 + 0xF8]
	0x01D05ACC BL 0x1B6E804
	0x01D05AD0 MOV X1, X0
	0x01D05AD4 MOV X0, X19
	0x01D05AD8 BL 0x1B6E8E8
	0x01D05ADC STP X30, X19, [X31 - 0x10]!
	0x01D05AE0 LDR X8, [X0 + 0x50]
	0x01D05AE4 CBZ X8, 0x1D05AF8
	0x01D05AE8 AND W9, W1, 0x1
	0x01D05AEC STR W9, [X8 + 0x8]
	0x01D05AF0 LDP X30, X19, [X31], #0x10
	0x01D05AF4 RET
	0x01D05AF8 ADRP X0, 0x2248000
	0x01D05AFC LDR X0, [X0 + 0x490]
	0x01D05B00 BL 0x1B6E804
	0x01D05B04 BL 0x1B6EA0C
	0x01D05B08 MOV X19, X0
	0x01D05B0C ADRP X0, 0x224C000
	0x01D05B10 LDR X0, [X0 + 0xF0]
	0x01D05B14 BL 0x1B6E804
	0x01D05B18 MOV X1, X0
	0x01D05B1C MOV X0, X19
	0x01D05B20 MOV X2, X31
	0x01D05B24 BL 0x31E7550
	0x01D05B28 ADRP X0, 0x224C000
	0x01D05B2C LDR X0, [X0 + 0x100]
	0x01D05B30 BL 0x1B6E804
	0x01D05B34 MOV X1, X0
	0x01D05B38 MOV X0, X19
	0x01D05B3C BL 0x1B6E8E8
	0x01D05B40 STR X30, [X31 - 0x20]!
	0x01D05B44 STP X20, X19, [X31 + 0x10]
	0x01D05B48 ADRP X20, 0x251E000
	0x01D05B4C ADRP X19, 0x2249000
	0x01D05B50 LDRB W8, [X20 + 0x743]
	0x01D05B54 LDR X19, [X19 + 0xD70]
	0x01D05B58 TBNZ X8, 0x0, 0x1D05B70
	0x01D05B5C ADRP X0, 0x2249000
	0x01D05B60 LDR X0, [X0 + 0xD70]
	0x01D05B64 BL 0x1B6E7F0
	0x01D05B68 MOVZ W8, 0x1
	0x01D05B6C STRB W8, [X20 + 0x743]
	0x01D05B70 LDR X0, [X19]
	0x01D05B74 LDR W8, [X0 + 0xE0]
	0x01D05B78 CBNZ W8, 0x1D05B84
	0x01D05B7C BL 0x1B6E8F8
	0x01D05B80 LDR X0, [X19]
	0x01D05B84 LDR X8, [X0 + 0xB8]
	0x01D05B88 LDP X20, X19, [X31 + 0x10]
	0x01D05B8C LDR X0, [X8 + 0x18]
	0x01D05B90 LDR X30, [X31], #0x20
	0x01D05B94 RET
	0x01D05B98 STP X30, X21, [X31 - 0x20]!
	0x01D05B9C STP X20, X19, [X31 + 0x10]
	0x01D05BA0 ADRP X20, 0x251E000
	0x01D05BA4 ADRP X21, 0x2249000
	0x01D05BA8 LDRB W8, [X20 + 0x744]
	0x01D05BAC LDR X21, [X21 + 0x1C0]
	0x01D05BB0 MOV X19, X0
	0x01D05BB4 TBNZ X8, 0x0, 0x1D05BE4
	0x01D05BB8 ADRP X0, 0x224C000
	0x01D05BBC LDR X0, [X0 + 0x108]
	0x01D05BC0 BL 0x1B6E7F0
	0x01D05BC4 ADRP X0, 0x2249000
	0x01D05BC8 LDR X0, [X0 + 0xD70]
	0x01D05BCC BL 0x1B6E7F0
	0x01D05BD0 ADRP X0, 0x2249000
	0x01D05BD4 LDR X0, [X0 + 0x1C0]
	0x01D05BD8 BL 0x1B6E7F0
	0x01D05BDC MOVZ W8, 0x1
	0x01D05BE0 STRB W8, [X20 + 0x744]
	0x01D05BE4 LDR X0, [X21]
	0x01D05BE8 LDR W8, [X0 + 0xE0]
	0x01D05BEC CBNZ W8, 0x1D05BF4
	0x01D05BF0 BL 0x1B6E8F8
	0x01D05BF4 CBZ X19, 0x1D05C48
	0x01D05BF8 LDR W8, [X19 + 0x30]
	0x01D05BFC ADRP X20, 0x2249000
	0x01D05C00 LDR X20, [X20 + 0xD70]
	0x01D05C04 ORR W8, W8, 0x8
	0x01D05C08 STR W8, [X19 + 0x30]
	0x01D05C0C LDR X0, [X20]
	0x01D05C10 LDR W8, [X0 + 0xE0]
	0x01D05C14 CBNZ W8, 0x1D05C20
	0x01D05C18 BL 0x1B6E8F8
	0x01D05C1C LDR X0, [X20]
	0x01D05C20 LDR X8, [X0 + 0xB8]
	0x01D05C24 LDR X0, [X8 + 0x18]
	0x01D05C28 CBZ X0, 0x1D05C48
	0x01D05C2C ADRP X8, 0x224C000
	0x01D05C30 LDR X8, [X8 + 0x108]
	0x01D05C34 MOV X1, X19
	0x01D05C38 LDP X20, X19, [X31 + 0x10]
	0x01D05C3C LDR X2, [X8]
	0x01D05C40 LDP X30, X21, [X31], #0x20
	0x01D05C44 B 0x2BD3B48
	0x01D05C48 BL 0x1B6EA1C
	0x01D05C4C STP X30, X21, [X31 - 0x20]!
	0x01D05C50 STP X20, X19, [X31 + 0x10]
	0x01D05C54 ADRP X20, 0x251E000
	0x01D05C58 ADRP X21, 0x2249000
	0x01D05C5C LDRB W8, [X20 + 0x745]
	0x01D05C60 LDR X21, [X21 + 0xD70]
	0x01D05C64 MOV X19, X0
	0x01D05C68 TBNZ X8, 0x0, 0x1D05C8C
	0x01D05C6C ADRP X0, 0x224C000
	0x01D05C70 LDR X0, [X0 + 0x110]
	0x01D05C74 BL 0x1B6E7F0
	0x01D05C78 ADRP X0, 0x2249000
	0x01D05C7C LDR X0, [X0 + 0xD70]
	0x01D05C80 BL 0x1B6E7F0
	0x01D05C84 MOVZ W8, 0x1
	0x01D05C88 STRB W8, [X20 + 0x745]
	0x01D05C8C MOV X0, X19
	0x01D05C90 MOV X1, X31
	0x01D05C94 BL 0x1D65284
	0x01D05C98 LDR X0, [X21]
	0x01D05C9C LDR X20, [X19 + 0x98]
	0x01D05CA0 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+64], X24
	008 Move [X31+72], X23
	009 Move [X31+80], X22
	010 Move [X31+88], X21
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X20, 0x251F000
	014 Move W8, [X20+1856]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x224B000
	021 Move X0, [X0+1968]
	022 Call 0x1B6F7F0
	023 Move X0, 0x2249000
	024 Move X0, [X0+1216]
	025 Call 0x1B6F7F0
	026 Move W8, 1
	027 Move [X20+1856], W8
	028 Move [X31+56], X31
	029 Move [X31+8], X31
	030 Move X0, [X19+64]
	031 Compare X0, 0
	032 JumpIfEqual {277}
	033 Move X1, X31
	034 Call NetworkObject.get_HasStateAuthority, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {264}
	039 Move W8, [X19+128]
	040 Compare W8, 0
	041 JumpIfEqual {153}
	042 Subtract W9, W8, 1
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, [X19+160]
	045 Compare X0, 0
	046 JumpIfEqual {277}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move W0, [X19+176]
	050 Move V10, [X19+180]
	051 Move X1, X31
	052 Move V8, V0
	053 Move V9, V1
	054 Move V11, V2
	055 Call LayerMask.op_Implicit, X0
	056 Move X8, 0x2249000
	057 Move X8, [X8+1216]
	058 Move W20, W0
	059 Move X8, [X8]
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {65}
	063 Move X0, X8
	064 Call 0x1B6F8F8
	065 Move V0, V8
	066 Move V1, V9
	067 Move V2, V11
	068 Move V3, V10
	069 Move W0, W20
	070 Move X1, X31
	071 Call Physics.OverlapSphere, X0, V0, X1
	072 Compare X0, 0
	073 JumpIfEqual {277}
	074 Move X8, [X0+24]
	075 Move X20, X0
	076 Compare X8, 0
	077 JumpIfEqual {212}
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X9, -19247104
	080 Move X23, 0x224B000
	081 Move V8, [X9+3304]
	082 Move X23, [X23+1968]
	083 Move X21, X31
	084 Add X22, X20, 32
	085 Move W24, 2
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move X0, [X22]
	088 Compare X0, 0
	089 JumpIfEqual {277}
	090 Move X1, X31
	091 Call Component.get_gameObject, X0
	092 Compare X0, 0
	093 JumpIfEqual {277}
	094 Move X2, [X23]
	095 Add X1, X31, 8
	096 Call 0x20D12D0, X0, X1
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {150}
	101 Move X0, [X31+8]
	102 Move [X19+248], X0
	103 Compare X0, 0
	104 JumpIfEqual {277}
	105 Move X1, X31
	106 Call NetPlayer.get_playerVolume, X0
	107 NotImplemented "Instruction FCMP not yet implemented."
	108 Move X0, [X19+248]
	109 Compare X0, 0
	110 JumpIfEqual {277}
	111 Move X1, X31
	112 Call Component.get_transform, X0
	113 Compare X0, 0
	114 JumpIfEqual {277}
	115 Move X1, X31
	116 Call Transform.get_position, X0
	117 Move X0, [X19+152]
	118 Move [X19+256], S0
	119 Move [X19+260], S1
	120 Move [X19+264], S2
	121 Move [X19+128], W24
	122 Move [X19+240], X31
	123 Compare X0, 0
	124 JumpIfEqual {277}
	125 Move W1, 1
	126 Call MobView.SetWalk, X0, X1
	127 Move W1, 2
	128 Move X0, X19
	129 Call MobControllerDog.set_MoveStatus, X0, X1
	130 Move X0, [X19+144]
	131 Compare X0, 0
	132 JumpIfEqual {277}
	133 Move W1, 1
	134 Move X2, X31
	135 Call NavMeshAgent.set_updateRotation, X0, X1
	136 Move X0, [X19+144]
	137 Compare X0, 0
	138 JumpIfEqual {277}
	139 Move V0, [X19+208]
	140 Move X1, X31
	141 Call NavMeshAgent.set_speed, X0, V0
	142 Move X0, [X19+144]
	143 Compare X0, 0
	144 JumpIfEqual {277}
	145 Move V2, [X19+264]
	146 Move V1, [X19+260]
	147 Move V0, [X19+256]
	148 Move X1, X31
	149 Call NavMeshAgent.SetDestination, X0, X1
	150 Move W8, [X20+24]
	151 Add X21, X21, 1
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move X0, [X19+168]
	154 Compare X0, 0
	155 JumpIfEqual {277}
	156 Move X1, X31
	157 Call Transform.get_position, X0
	158 Move W0, [X19+176]
	159 Move V10, [X19+184]
	160 Move X1, X31
	161 Move V8, V0
	162 Move V9, V1
	163 Move V11, V2
	164 Call LayerMask.op_Implicit, X0
	165 Move X8, 0x2249000
	166 Move X8, [X8+1216]
	167 Move W20, W0
	168 Move X8, [X8]
	169 Move W9, [X8+224]
	170 Compare W9, 0
	171 JumpIfNotEqual {174}
	172 Move X0, X8
	173 Call 0x1B6F8F8
	174 Move V0, V8
	175 Move V1, V9
	176 Move V2, V11
	177 Move V3, V10
	178 Move W0, W20
	179 Move X1, X31
	180 Call Physics.OverlapSphere, X0, V0, X1
	181 Compare X0, 0
	182 JumpIfEqual {277}
	183 Move X8, [X0+24]
	184 Move X20, X0
	185 Compare X8, 0
	186 JumpIfEqual {253}
	187 Move W9, [X19+128]
	188 NotImplemented "Instruction CMP not yet implemented."
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move X23, 0x224B000
	191 Move X23, [X23+1968]
	192 Move X21, X31
	193 Add X22, X20, 32
	194 NotImplemented "Instruction CMP not yet implemented."
	195 Move X0, [X22]
	196 Compare X0, 0
	197 JumpIfEqual {277}
	198 Move X1, X31
	199 Call Component.get_gameObject, X0
	200 Compare X0, 0
	201 JumpIfEqual {277}
	202 Move X2, [X23]
	203 Add X1, X31, 56
	204 Call 0x20D12D0, X0, X1
	205 Move TEMP, X0
	206 And TEMP, TEMP, 1
	207 Compare TEMP, 1
	208 JumpIfEqual {245}
	209 Move W8, [X20+24]
	210 Add X21, X21, 1
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Move W8, [X19+128]
	213 Move [X19+248], X31
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move X0, [X19+152]
	216 Move W8, 1
	217 Move [X19+128], W8
	218 Move [X19+240], X31
	219 Compare X0, 0
	220 JumpIfEqual {277}
	221 Move W1, W31
	222 Call MobView.SetWalk, X0, X1
	223 Move X0, X19
	224 Move W1, W31
	225 Call MobControllerDog.set_MoveStatus, X0, X1
	226 Move X0, [X19+144]
	227 Compare X0, 0
	228 JumpIfEqual {277}
	229 Move V0, [X19+208]
	230 Move X1, X31
	231 Call NavMeshAgent.set_speed, X0, V0
	232 Move X20, [X19+144]
	233 Move X0, X19
	234 Move X1, X31
	235 Call Component.get_transform, X0
	236 Compare X0, 0
	237 JumpIfEqual {277}
	238 Move X1, X31
	239 Call Transform.get_position, X0
	240 Compare X20, 0
	241 JumpIfEqual {277}
	242 Move X0, X20
	243 Move X1, X31
	244 Call NavMeshAgent.SetDestination, X0, X1
	245 Move X8, [X31+56]
	246 Move X0, [X19+152]
	247 Move W9, 1
	248 Move [X19+128], W9
	249 Move [X19+248], X8
	250 Compare X0, 0
	251 JumpIfEqual {277}
	252 Call MobView.PlaySoundNotice, X0
	253 Move W8, [X19+128]
	254 Compare W8, 0
	255 JumpIfEqual {258}
	256 NotImplemented "Instruction CMP not yet implemented."
	257 NotImplemented "Instruction CMP not yet implemented."
	258 Move X0, X19
	259 Call MobControllerDog.UpdatePatrol, X0
	260 Move X0, X19
	261 Call MobControllerDog.UpdateAttack, X0
	262 Move X0, X19
	263 Call MobControllerDog.AttackPlayer, X0
	264 Move X20, [X31+96]
	265 Move X19, [X31+104]
	266 Move X22, [X31+80]
	267 Move X21, [X31+88]
	268 Move X24, [X31+64]
	269 Move X23, [X31+72]
	270 Move X30, [X31+48]
	271 Move D9, [X31+32]
	272 Move D8, [X31+40]
	273 Move D11, [X31+16]
	274 Move D10, [X31+24]
	275 Add X31, X31, 112
	276 Return 
	277 Call 0x1B6FA1C
	278 Call 0x1B6FA24

Method: System.Void UpdatePatrol()

Disassembly:
	0x01D05CA4 CBNZ W8, 0x1D05CB0
	0x01D05CA8 BL 0x1B6E8F8
	0x01D05CAC LDR X0, [X21]
	0x01D05CB0 CBZ X20, 0x1D05D00
	0x01D05CB4 LDR X8, [X0 + 0xB8]
	0x01D05CB8 MOV X0, X20
	0x01D05CBC MOV X1, X31
	0x01D05CC0 LDP S1, S2, [X8 + 0x4]
	0x01D05CC4 LDR V0, [X8]
	0x01D05CC8 BL 0x3AA6D0C
	0x01D05CCC MOV X0, X19
	0x01D05CD0 BL 0x1D05D04
	0x01D05CD4 LDR X8, [X21]
	0x01D05CD8 LDR X8, [X8 + 0xB8]
	0x01D05CDC LDR X0, [X8 + 0x18]
	0x01D05CE0 CBZ X0, 0x1D05D00
	0x01D05CE4 ADRP X8, 0x224C000
	0x01D05CE8 LDR X8, [X8 + 0x110]
	0x01D05CEC MOV X1, X19
	0x01D05CF0 LDP X20, X19, [X31 + 0x10]
	0x01D05CF4 LDR X2, [X8]
	0x01D05CF8 LDP X30, X21, [X31], #0x20
	0x01D05CFC B 0x2BD43FC
	0x01D05D00 BL 0x1B6EA1C
	0x01D05D04 STP X30, X19, [X31 - 0x10]!
	0x01D05D08 LDR X19, [X0 + 0x90]
	0x01D05D0C BL 0x1D05A74
	0x01D05D10 CBZ X19, 0x1D05D2C
	0x01D05D14 ORN W8, W31, W0, 0x0
	0x01D05D18 AND W1, W8, 0x1
	0x01D05D1C MOV X0, X19
	0x01D05D20 MOV X2, X31
	0x01D05D24 LDP X30, X19, [X31], #0x10
	0x01D05D28 B 0x3A9D9A8
	0x01D05D2C BL 0x1B6EA1C
	0x01D05D30 STP X30, X23, [X31 - 0x30]!
	0x01D05D34 STP X22, X21, [X31 + 0x10]
	0x01D05D38 STP X20, X19, [X31 + 0x20]
	0x01D05D3C ADRP X23, 0x251E000
	0x01D05D40 ADRP X22, 0x2249000
	0x01D05D44 LDRB W8, [X23 + 0x746]
	0x01D05D48 LDR X22, [X22 + 0xD70]
	0x01D05D4C MOV W21, W2
	0x01D05D50 MOV X20, X1
	0x01D05D54 MOV X19, X0
	0x01D05D58 TBNZ X8, 0x0, 0x1D05D7C
	0x01D05D5C ADRP X0, 0x224C000
	0x01D05D60 LDR X0, [X0 + 0x108]
	0x01D05D64 BL 0x1B6E7F0
	0x01D05D68 ADRP X0, 0x2249000
	0x01D05D6C LDR X0, [X0 + 0xD70]
	0x01D05D70 BL 0x1B6E7F0
	0x01D05D74 MOVZ W8, 0x1
	0x01D05D78 STRB W8, [X23 + 0x746]
	0x01D05D7C AND W2, W21, 0x1
	0x01D05D80 MOV X0, X19
	0x01D05D84 MOV X1, X20
	0x01D05D88 MOV X3, X31
	0x01D05D8C BL 0x1D65288
	0x01D05D90 LDR X0, [X22]
	0x01D05D94 LDR W8, [X0 + 0xE0]
	0x01D05D98 CBNZ W8, 0x1D05DA4
	0x01D05D9C BL 0x1B6E8F8
	0x01D05DA0 LDR X0, [X22]
	0x01D05DA4 LDR X8, [X0 + 0xB8]
	0x01D05DA8 LDR X0, [X8 + 0x18]
	0x01D05DAC CBZ X0, 0x1D05DD0
	0x01D05DB0 ADRP X8, 0x224C000
	0x01D05DB4 LDR X8, [X8 + 0x108]
	0x01D05DB8 MOV X1, X19
	0x01D05DBC LDP X20, X19, [X31 + 0x20]
	0x01D05DC0 LDP X22, X21, [X31 + 0x10]
	0x01D05DC4 LDR X2, [X8]
	0x01D05DC8 LDP X30, X23, [X31], #0x30
	0x01D05DCC B 0x2BD3B48
	0x01D05DD0 BL 0x1B6EA1C
	0x01D05DD4 SUB X31, X31, 0x20
	0x01D05DD8 STP X30, X19, [X31 + 0x10]
	0x01D05DDC MOV X1, X31
	0x01D05DE0 MOV X19, X0
	0x01D05DE4 BL 0x1D65000
	0x01D05DE8 LDR X0, [X19 + 0x40]
	0x01D05DEC CBZ X0, 0x1D05E38
	0x01D05DF0 LDRB W8, [X0 + 0x60]
	0x01D05DF4 TBNZ X8, 0x1, 0x1D05E38
	0x01D05DF8 MOV X1, X31
	0x01D05DFC BL 0x1D9E780
	0x01D05E00 TBZ X0, 0x0, 0x1D05E38
	0x01D05E04 MOV X0, X19
	0x01D05E08 BL 0x1D05A74
	0x01D05E0C TBZ X0, 0x0, 0x1D05E38
	0x01D05E10 MOV X0, X19
	0x01D05E14 BL 0x1D058E8
	0x01D05E18 STR W0, [X31 + 0x8]
	0x01D05E1C LDR X1, [X19 + 0x38]
	0x01D05E20 ADD X0, X31, 0x8
	0x01D05E24 MOV X2, X31
	0x01D05E28 BL 0x1D9CBCC
	0x01D05E2C TBZ X0, 0x0, 0x1D05E38
	0x01D05E30 MOV X0, X19
	0x01D05E34 BL 0x1D05E44
	0x01D05E38 LDP X30, X19, [X31 + 0x10]
	0x01D05E3C ADD X31, X31, 0x20
	0x01D05E40 RET
	0x01D05E44 STP X30, X19, [X31 - 0x10]!
	0x01D05E48 MOV W1, W31
	0x01D05E4C MOV X19, X0
	0x01D05E50 BL 0x1D05ADC
	0x01D05E54 MOV X0, X19
	0x01D05E58 MOV W1, W31
	0x01D05E5C BL 0x1D05A10
	0x01D05E60 MOV X0, X31
	0x01D05E64 BL 0x1D9CB50
	0x01D05E68 AND X1, X0, 0x0
	0x01D05E6C MOV X0, X19
	0x01D05E70 LDP X30, X19, [X31], #0x10
	0x01D05E74 B 0x1D05948
	0x01D05E78 STR X30, [X31 - 0x20]!
	0x01D05E7C STP X20, X19, [X31 + 0x10]
	0x01D05E80 ADRP X20, 0x251E000
	0x01D05E84 LDRB W8, [X20 + 0x747]
	0x01D05E88 MOV X19, X1
	0x01D05E8C TBNZ X8, 0x0, 0x1D05EB0
	0x01D05E90 ADRP X0, 0x224A000
	0x01D05E94 LDR X0, [X0 + 0x2F0]
	0x01D05E98 BL 0x1B6E7F0
	0x01D05E9C ADRP X0, 0x2248000
	0x01D05EA0 LDR X0, [X0 + 0x478]
	0x01D05EA4 BL 0x1B6E7F0
	0x01D05EA8 MOVZ W8, 0x1
	0x01D05EAC STRB W8, [X20 + 0x747]
	0x01D05EB0 CBZ X19, 0x1D05EFC
	0x01D05EB4 ADRP X8, 0x224A000
	0x01D05EB8 LDR X8, [X8 + 0x2F0]
	0x01D05EBC ADRP X20, 0x2248000
	0x01D05EC0 MOV X0, X19
	0x01D05EC4 LDR X1, [X8]
	0x01D05EC8 LDR X20, [X20 + 0x478]
	0x01D05ECC BL 0x208FDE8
	0x01D05ED0 LDR X8, [X20]
	0x01D05ED4 MOV X19, X0
	0x01D05ED8 LDR W9, [X8 + 0xE0]
	0x01D05EDC CBNZ W9, 0x1D05EE8
	0x01D05EE0 MOV X0, X8
	0x01D05EE4 BL 0x1B6E8F8
	0x01D05EE8 MOV X0, X19
	0x01D05EEC LDP X20, X19, [X31 + 0x10]
	0x01D05EF0 MOV X1, X31
	0x01D05EF4 LDR X30, [X31], #0x20
	0x01D05EF8 B 0x3AA0BFC
	0x01D05EFC BL 0x1B6EA1C
	0x01D05F00 STR X30, [X31 - 0x20]!
	0x01D05F04 STP X20, X19, [X31 + 0x10]
	0x01D05F08 MOV X20, X1
	0x01D05F0C MOV X19, X0
	0x01D05F10 BL 0x1D05A74
	0x01D05F14 TBNZ X0, 0x0, 0x1D05F24
	0x01D05F18 MOV X0, X19
	0x01D05F1C BL 0x1D059A8
	0x01D05F20 TBZ X0, 0x0, 0x1D05F30
	0x01D05F24 LDP X20, X19, [X31 + 0x10]
	0x01D05F28 LDR X30, [X31], #0x20
	0x01D05F2C RET
	0x01D05F30 CBZ X20, 0x1D05F60
	0x01D05F34 MOV X0, X20
	0x01D05F38 MOV X1, X31
	0x01D05F3C BL 0x3AF7384
	0x01D05F40 TBZ X0, 0x0, 0x1D05F50
	0x01D05F44 MOV X1, X20
	0x01D05F48 BL 0x1D05E78
	0x01D05F4C TBZ X0, 0x0, 0x1D05F24
	0x01D05F50 MOV X0, X19
	0x01D05F54 LDP X20, X19, [X31 + 0x10]
	0x01D05F58 LDR X30, [X31], #0x20
	0x01D05F5C B 0x1D05F64
	0x01D05F60 BL 0x1B6EA1C
	0x01D05F64 STP X30, X21, [X31 - 0x20]!
	0x01D05F68 STP X20, X19, [X31 + 0x10]
	0x01D05F6C ADRP X20, 0x251E000
	0x01D05F70 LDRB W8, [X20 + 0x748]
	0x01D05F74 MOV X19, X0
	0x01D05F78 TBNZ X8, 0x0, 0x1D05FA8
	0x01D05F7C ADRP X0, 0x2249000
	0x01D05F80 LDR X0, [X0 + 0xD70]
	0x01D05F84 BL 0x1B6E7F0
	0x01D05F88 ADRP X0, 0x2249000
	0x01D05F8C LDR X0, [X0 + 0x1C0]
	0x01D05F90 BL 0x1B6E7F0
	0x01D05F94 ADRP X0, 0x224C000
	0x01D05F98 LDR X0, [X0 + 0x118]
	0x01D05F9C BL 0x1B6E7F0
	0x01D05FA0 MOVZ W8, 0x1
	0x01D05FA4 STRB W8, [X20 + 0x748]
	0x01D05FA8 LDRB W8, [X19 + 0x58]
	0x01D05FAC CBZ W8, 0x1D0603C
	0x01D05FB0 STRB W31, [X19 + 0x58]
	0x01D05FB4 MOV X0, X19
	0x01D05FB8 BL 0x1D059A8
	0x01D05FBC TBNZ X0, 0x0, 0x1D06078
	0x01D05FC0 MOVZ W1, 0x1
	0x01D05FC4 MOV X0, X19
	0x01D05FC8 BL 0x1D05A10
	0x01D05FCC ADRP X21, 0x2249000
	0x01D05FD0 LDR X21, [X21 + 0xD70]
	0x01D05FD4 LDR X20, [X19 + 0x98]
	0x01D05FD8 LDR X0, [X21]
	0x01D05FDC LDR W8, [X0 + 0xE0]
	0x01D05FE0 CBNZ W8, 0x1D05FEC
	0x01D05FE4 BL 0x1B6E8F8
	0x01D05FE8 LDR X0, [X21]
	0x01D05FEC CBZ X20, 0x1D06174
	0x01D05FF0 LDR X8, [X0 + 0xB8]
	0x01D05FF4 MOV X0, X20
	0x01D05FF8 MOV X1, X31
	0x01D05FFC LDP S1, S2, [X8 + 0x10]
	0x01D06000 LDR V0, [X8 + 0xC]
	0x01D06004 BL 0x3AA6D0C
	0x01D06008 LDR X20, [X19 + 0x80]
	0x01D0600C MOV X0, X19
	0x01D06010 MOV X1, X31
	0x01D06014 BL 0x3A9B084
	0x01D06018 CBZ X0, 0x1D06174
	0x01D0601C MOV X1, X31
	0x01D06020 BL 0x3AA7658
	0x01D06024 MOV X0, X20
	0x01D06028 LDP X20, X19, [X31 + 0x10]
	0x01D0602C FMOV S3, 1
	0x01D06030 MOV X1, X31

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X8, [X0+272]
	014 Compare X8, 0
	015 JumpIfEqual {262}
	016 Move X8, [X8+24]
	017 Compare X8, 0
	018 JumpIfEqual {249}
	019 Move X19, X0
	020 Move X0, [X0+144]
	021 Compare X0, 0
	022 JumpIfEqual {262}
	023 Move X1, X31
	024 Call Component.get_transform, X0
	025 Compare X0, 0
	026 JumpIfEqual {262}
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X0, X31
	030 Call Extensions.Flatten, X0
	031 Move X8, [X19+272]
	032 Compare X8, 0
	033 JumpIfEqual {262}
	034 NotImplemented "Instruction LDRSW not yet implemented."
	035 Move W10, [X8+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Add X8, X8, X9
	038 Move X0, [X8+32]
	039 Compare X0, 0
	040 JumpIfEqual {262}
	041 Move X1, X31
	042 Move V8, V0
	043 Move V9, V1
	044 Move V10, V2
	045 Call Transform.get_position, X0
	046 Move X0, X31
	047 Call Extensions.Flatten, X0
	048 Move X21, 0x251F000
	049 Move W8, [X21+1286]
	050 Move V11, V0
	051 Move V12, V1
	052 Move V13, V2
	053 Compare W8, 0
	054 JumpIfNotEqual {60}
	055 Move X0, 0x2249000
	056 Move X0, [X0+1160]
	057 Call 0x1B6F7F0
	058 Move W8, 1
	059 Move [X21+1286], W8
	060 Move X22, 0x2249000
	061 Move X22, [X22+1160]
	062 Subtract S11, S8, S11
	063 Subtract S9, S9, S12
	064 Subtract S8, S10, S13
	065 Move X0, [X22]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1B6F8F8
	070 Multiply S0, S11, S11
	071 Multiply S1, S9, S9
	072 Move X8, -19247104
	073 Add S0, S0, S1
	074 Move V1, [X8+2736]
	075 Multiply S2, S8, S8
	076 Add S0, S2, S0
	077 NotImplemented "Instruction FSQRT not yet implemented."
	078 NotImplemented "Instruction FCMP not yet implemented."
	079 Move W8, [X19+280]
	080 Move X9, [X19+272]
	081 Add W8, W8, 1
	082 Move [X19+280], W8
	083 Compare X9, 0
	084 JumpIfEqual {262}
	085 Move W9, [X9+24]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move [X19+280], W31
	088 Move X0, [X19+152]
	089 Compare X0, 0
	090 JumpIfEqual {262}
	091 Move W1, W31
	092 Call MobView.SetWalk, X0, X1
	093 Move X0, X19
	094 Move W1, W31
	095 Call MobControllerDog.set_MoveStatus, X0, X1
	096 Move X0, [X19+144]
	097 Compare X0, 0
	098 JumpIfEqual {262}
	099 Move W1, 1
	100 Move X2, X31
	101 Call NavMeshAgent.set_updateRotation, X0, X1
	102 Move X20, [X19+144]
	103 Compare X20, 0
	104 JumpIfEqual {262}
	105 Move X0, X20
	106 Move X1, X31
	107 Call Component.get_transform, X0
	108 Compare X0, 0
	109 JumpIfEqual {262}
	110 Move X1, X31
	111 Call Transform.get_position, X0
	112 Move X0, X20
	113 Move X1, X31
	114 Call NavMeshAgent.SetDestination, X0, X1
	115 Move V8, [X19+220]
	116 Move [X19+236], W31
	117 Move [X19+244], S8
	118 Move V8, [X19+244]
	119 NotImplemented "Instruction FCMP not yet implemented."
	120 Move X0, X31
	121 Call Time.get_deltaTime
	122 Subtract S0, S8, S0
	123 Move X0, [X19+152]
	124 Compare X0, 0
	125 JumpIfEqual {262}
	126 Call MobView.get_isWalking, X0
	127 Move TEMP, X0
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfEqual {168}
	131 Move X0, [X19+152]
	132 Compare X0, 0
	133 JumpIfEqual {262}
	134 Move W1, 1
	135 Call MobView.SetWalk, X0, X1
	136 Move X0, [X19+152]
	137 Compare X0, 0
	138 JumpIfEqual {262}
	139 Move V0, [X19+204]
	140 Call MobView.SetWalkSpeed, X0, V0
	141 Move W1, 1
	142 Move X0, X19
	143 Call MobControllerDog.set_MoveStatus, X0, X1
	144 Move X0, [X19+144]
	145 Compare X0, 0
	146 JumpIfEqual {262}
	147 Move W1, 1
	148 Move X2, X31
	149 Call NavMeshAgent.set_updateRotation, X0, X1
	150 Move X8, [X19+272]
	151 Compare X8, 0
	152 JumpIfEqual {262}
	153 NotImplemented "Instruction LDRSW not yet implemented."
	154 Move W10, [X8+24]
	155 NotImplemented "Instruction CMP not yet implemented."
	156 Add X8, X8, X9
	157 Move X0, [X8+32]
	158 Compare X0, 0
	159 JumpIfEqual {262}
	160 Move X20, [X19+144]
	161 Move X1, X31
	162 Call Transform.get_position, X0
	163 Compare X20, 0
	164 JumpIfEqual {262}
	165 Move X0, X20
	166 Move X1, X31
	167 Call NavMeshAgent.SetDestination, X0, X1
	168 Move V11, [X19+236]
	169 Move X0, X19
	170 Move X1, X31
	171 Call Component.get_transform, X0
	172 Compare X0, 0
	173 JumpIfEqual {262}
	174 Move X1, X31
	175 Call Transform.get_position, X0
	176 Move S12, [X19+224]
	177 Move S13, [X19+228]
	178 Move W8, [X21+1286]
	179 Move V14, [X19+232]
	180 Move V8, V0
	181 Move V9, V1
	182 Move V10, V2
	183 Compare W8, 0
	184 JumpIfNotEqual {190}
	185 Move X0, 0x2249000
	186 Move X0, [X0+1160]
	187 Call 0x1B6F7F0
	188 Move W8, 1
	189 Move [X21+1286], W8
	190 Move X0, [X22]
	191 Subtract S12, S8, S12
	192 Subtract S9, S9, S13
	193 Subtract S8, S10, S14
	194 Move W8, [X0+224]
	195 Compare W8, 0
	196 JumpIfNotEqual {198}
	197 Call 0x1B6F8F8
	198 Multiply S0, S12, S12
	199 Multiply S1, S9, S9
	200 Add S0, S0, S1
	201 Multiply S1, S8, S8
	202 Add S0, S1, S0
	203 NotImplemented "Instruction FSQRT not yet implemented."
	204 Add S0, S11, S0
	205 Move X0, X19
	206 Move X1, X31
	207 Move [X19+236], S0
	208 Call Component.get_transform, X0
	209 Compare X0, 0
	210 JumpIfEqual {262}
	211 Move X1, X31
	212 Call Transform.get_position, X0
	213 Move V3, [X19+236]
	214 Move V4, [X19+212]
	215 Move [X19+224], S0
	216 Move [X19+232], S1
	217 Move [X19+232], S2
	218 NotImplemented "Instruction FCMP not yet implemented."
	219 Move X0, [X19+152]
	220 Compare X0, 0
	221 JumpIfEqual {262}
	222 Move W1, W31
	223 Call MobView.SetWalk, X0, X1
	224 Move X0, X19
	225 Move W1, W31
	226 Call MobControllerDog.set_MoveStatus, X0, X1
	227 Move X0, [X19+144]
	228 Compare X0, 0
	229 JumpIfEqual {262}
	230 Move W1, 1
	231 Move X2, X31
	232 Call NavMeshAgent.set_updateRotation, X0, X1
	233 Move X20, [X19+144]
	234 Compare X20, 0
	235 JumpIfEqual {262}
	236 Move X0, X20
	237 Move X1, X31
	238 Call Component.get_transform, X0
	239 Compare X0, 0
	240 JumpIfEqual {262}
	241 Move X1, X31
	242 Call Transform.get_position, X0
	243 Move X0, X20
	244 Move X1, X31
	245 Call NavMeshAgent.SetDestination, X0, X1
	246 Move V0, [X19+220]
	247 Move [X19+236], W31
	248 Move [X19+244], S0
	249 Move X20, [X31+80]
	250 Move X19, [X31+88]
	251 Move X22, [X31+64]
	252 Move X21, [X31+72]
	253 Move X30, [X31+56]
	254 Move D9, [X31+40]
	255 Move D8, [X31+48]
	256 Move D11, [X31+24]
	257 Move D10, [X31+32]
	258 Move D13, [X31+8]
	259 Move D12, [X31+16]
	260 Move V14, [X31+96]
	261 Return 
	262 Call 0x1B6FA1C
	263 Call 0x1B6FA24

Method: System.Void UpdateAttack()

Disassembly:
	0x01D06034 LDP X30, X21, [X31], #0x20
	0x01D06038 B 0x1CC181C
	0x01D0603C ADRP X20, 0x2248000
	0x01D06040 LDR X20, [X20 + 0x1C0]
	0x01D06044 LDR X0, [X20]
	0x01D06048 LDR W8, [X0 + 0xE0]
	0x01D0604C CBNZ W8, 0x1D06054
	0x01D06050 BL 0x1B6E8F8
	0x01D06054 MOV X0, X19
	0x01D06058 MOV X1, X31
	0x01D0605C BL 0x1D697C8
	0x01D06060 LDR X0, [X19 + 0x38]
	0x01D06064 CBZ X0, 0x1D06174
	0x01D06068 MOV X1, X31
	0x01D0606C BL 0x1D87040
	0x01D06070 CMP W0, 0x4
	0x01D06074 B.NE 0x1D06084
	0x01D06078 LDP X20, X19, [X31 + 0x10]
	0x01D0607C LDP X30, X21, [X31], #0x20
	0x01D06080 RET
	0x01D06084 LDR X0, [X19 + 0x40]
	0x01D06088 CBZ X0, 0x1D06174
	0x01D0608C MOV X1, X31
	0x01D06090 BL 0x1D9F538
	0x01D06094 ANDS W31, W0, 0x7
	0x01D06098 B.EQ 0x1D060FC
	0x01D0609C TBNZ X0, 0x0, 0x1D05FB4
	0x01D060A0 LDR X8, [X19 + 0x38]
	0x01D060A4 CBZ X8, 0x1D06174
	0x01D060A8 LDR X0, [X8 + 0x50]
	0x01D060AC CBZ X0, 0x1D06174
	0x01D060B0 MOV X1, X31
	0x01D060B4 BL 0x1DBEFE4
	0x01D060B8 TBZ X0, 0x0, 0x1D06078
	0x01D060BC LDR X8, [X19 + 0x38]
	0x01D060C0 CBZ X8, 0x1D06174
	0x01D060C4 LDR X0, [X8 + 0x50]
	0x01D060C8 MOVZ W1, 0x8
	0x01D060CC MOV X2, X31
	0x01D060D0 BL 0x1DD601C
	0x01D060D4 MOV X20, X0
	0x01D060D8 MOVZ W0, 0x1
	0x01D060DC MOV X1, X31
	0x01D060E0 BL 0x1D29EBC
	0x01D060E4 LDR X8, [X19 + 0x40]
	0x01D060E8 CBZ X8, 0x1D06174
	0x01D060EC LDR X8, [X8 + 0x20]
	0x01D060F0 CBZ X8, 0x1D06134
	0x01D060F4 LDR W0, [X8]
	0x01D060F8 B 0x1D06138
	0x01D060FC LDR X0, [X20]
	0x01D06100 LDR X19, [X19 + 0x40]
	0x01D06104 LDR W8, [X0 + 0xE0]
	0x01D06108 CBNZ W8, 0x1D06110
	0x01D0610C BL 0x1B6E8F8
	0x01D06110 ADRP X8, 0x224B000
	0x01D06114 LDR X8, [X8 + 0x118]
	0x01D06118 MOV X1, X19
	0x01D0611C LDP X20, X19, [X31 + 0x10]
	0x01D06120 MOVZ W2, 0x7
	0x01D06124 LDR X0, [X8]
	0x01D06128 MOV X3, X31
	0x01D0612C LDP X30, X21, [X31], #0x20
	0x01D06130 B 0x1D69640
	0x01D06134 MOV X0, X31
	0x01D06138 LDR W1, [X19 + 0x68]
	0x01D0613C MOVZ W2, 0x1
	0x01D06140 MOV X3, X31
	0x01D06144 BL 0x1DA8258
	0x01D06148 STUR X0, [X20 + 0x1C]
	0x01D0614C CBZ X20, 0x1D06174
	0x01D06150 MOVZ W8, 0x40
	0x01D06154 STR W8, [X20 + 0xC]
	0x01D06158 LDR X0, [X19 + 0x38]
	0x01D0615C CBZ X0, 0x1D06174
	0x01D06160 MOV X1, X20
	0x01D06164 LDP X20, X19, [X31 + 0x10]
	0x01D06168 MOV X2, X31
	0x01D0616C LDP X30, X21, [X31], #0x20
	0x01D06170 B 0x1D8A710
	0x01D06174 BL 0x1B6EA1C
	0x01D06178 STR X30, [X31 - 0x20]!
	0x01D0617C STP X20, X19, [X31 + 0x10]
	0x01D06180 MOV X20, X1
	0x01D06184 MOV X19, X0
	0x01D06188 BL 0x1D05A74
	0x01D0618C TBZ X0, 0x0, 0x1D0619C
	0x01D06190 LDP X20, X19, [X31 + 0x10]
	0x01D06194 LDR X30, [X31], #0x20
	0x01D06198 RET
	0x01D0619C CBZ X20, 0x1D061CC
	0x01D061A0 MOV X0, X20
	0x01D061A4 MOV X1, X31
	0x01D061A8 BL 0x3AF7384
	0x01D061AC TBZ X0, 0x0, 0x1D061BC
	0x01D061B0 MOV X1, X20
	0x01D061B4 BL 0x1D05E78
	0x01D061B8 TBZ X0, 0x0, 0x1D06190
	0x01D061BC MOV X0, X19
	0x01D061C0 LDP X20, X19, [X31 + 0x10]
	0x01D061C4 LDR X30, [X31], #0x20
	0x01D061C8 B 0x1D061D0
	0x01D061CC BL 0x1B6EA1C
	0x01D061D0 SUB X31, X31, 0xA0
	0x01D061D4 STR D10, [X31 + 0x60]
	0x01D061D8 STP D9, D8, [X31 + 0x68]
	0x01D061DC STR X30, [X31 + 0x78]
	0x01D061E0 STP X22, X21, [X31 + 0x80]
	0x01D061E4 STP X20, X19, [X31 + 0x90]
	0x01D061E8 ADRP X20, 0x251D000
	0x01D061EC LDRB W8, [X20 + 0x749]
	0x01D061F0 MOV X19, X0
	0x01D061F4 TBNZ X8, 0x0, 0x1D06290
	0x01D061F8 ADRP X0, 0x2247000
	0x01D061FC LDR X0, [X0 + 0x9A0]
	0x01D06200 BL 0x1B6E7F0
	0x01D06204 ADRP X0, 0x2248000
	0x01D06208 LDR X0, [X0 + 0xD70]
	0x01D0620C BL 0x1B6E7F0
	0x01D06210 ADRP X0, 0x2248000
	0x01D06214 LDR X0, [X0 + 0x1C0]
	0x01D06218 BL 0x1B6E7F0
	0x01D0621C ADRP X0, 0x2248000
	0x01D06220 LDR X0, [X0 + 0x5D8]
	0x01D06224 BL 0x1B6E7F0
	0x01D06228 ADRP X0, 0x2248000
	0x01D0622C LDR X0, [X0 + 0x248]
	0x01D06230 BL 0x1B6E7F0
	0x01D06234 ADRP X0, 0x2248000
	0x01D06238 LDR X0, [X0 + 0x250]
	0x01D0623C BL 0x1B6E7F0
	0x01D06240 ADRP X0, 0x2248000
	0x01D06244 LDR X0, [X0 + 0x7C0]
	0x01D06248 BL 0x1B6E7F0
	0x01D0624C ADRP X0, 0x2248000
	0x01D06250 LDR X0, [X0 + 0x7C8]
	0x01D06254 BL 0x1B6E7F0
	0x01D06258 ADRP X0, 0x2247000
	0x01D0625C LDR X0, [X0 + 0x480]
	0x01D06260 BL 0x1B6E7F0
	0x01D06264 ADRP X0, 0x224B000
	0x01D06268 LDR X0, [X0 + 0x120]
	0x01D0626C BL 0x1B6E7F0
	0x01D06270 ADRP X0, 0x2248000
	0x01D06274 LDR X0, [X0 + 0xA50]
	0x01D06278 BL 0x1B6E7F0
	0x01D0627C ADRP X0, 0x224B000
	0x01D06280 LDR X0, [X0 + 0x128]
	0x01D06284 BL 0x1B6E7F0
	0x01D06288 MOVZ W8, 0x1
	0x01D0628C STRB W8, [X20 + 0x749]
	0x01D06290 LDRB W8, [X19 + 0x58]
	0x01D06294 CBZ W8, 0x1D064D8
	0x01D06298 STRB W31, [X19 + 0x58]
	0x01D0629C MOV X0, X19
	0x01D062A0 BL 0x1D05A74
	0x01D062A4 TBNZ X0, 0x0, 0x1D06514
	0x01D062A8 MOVZ W1, 0x1
	0x01D062AC MOV X0, X19
	0x01D062B0 BL 0x1D05ADC
	0x01D062B4 ADRP X21, 0x2248000
	0x01D062B8 LDR X21, [X21 + 0xD70]
	0x01D062BC LDR X20, [X19 + 0x98]
	0x01D062C0 LDR X0, [X21]
	0x01D062C4 LDR W8, [X0 + 0xE0]
	0x01D062C8 CBNZ W8, 0x1D062D4
	0x01D062CC BL 0x1B6E8F8
	0x01D062D0 LDR X0, [X21]
	0x01D062D4 CBZ X20, 0x1D06640
	0x01D062D8 LDR X8, [X0 + 0xB8]
	0x01D062DC MOV X0, X20
	0x01D062E0 MOV X1, X31
	0x01D062E4 LDP S1, S2, [X8 + 0x4]
	0x01D062E8 LDR V0, [X8]
	0x01D062EC BL 0x3AA6D0C
	0x01D062F0 LDR X0, [X19 + 0x38]
	0x01D062F4 FMOV S0, 30
	0x01D062F8 MOV X1, X31
	0x01D062FC BL 0x1D9CEB8
	0x01D06300 AND X1, X0, 0x0
	0x01D06304 MOV X0, X19
	0x01D06308 BL 0x1D05948
	0x01D0630C LDR X20, [X19 + 0x38]
	0x01D06310 LDR X21, [X19 + 0x88]
	0x01D06314 MOV X0, X19
	0x01D06318 MOV X1, X31
	0x01D0631C BL 0x3A9B084
	0x01D06320 CBZ X0, 0x1D06640
	0x01D06324 MOV X1, X31
	0x01D06328 BL 0x3AA7658
	0x01D0632C MOV X0, X19
	0x01D06330 MOV X1, X31
	0x01D06334 MOV V8.16B, V0.16B
	0x01D06338 MOV V9.16B, V1.16B
	0x01D0633C MOV V10.16B, V2.16B
	0x01D06340 BL 0x3A9B084
	0x01D06344 CBZ X0, 0x1D06640
	0x01D06348 MOV X1, X31
	0x01D0634C BL 0x3AA7A54
	0x01D06350 ADRP X8, 0x2248000
	0x01D06354 LDR X8, [X8 + 0x248]
	0x01D06358 FMOV S3, 0.5
	0x01D0635C FMUL S0, S0, S3
	0x01D06360 FMUL S1, S1, S3
	0x01D06364 LDR X1, [X8]
	0x01D06368 FMUL S2, S2, S3
	0x01D0636C FADD S0, S8, S0
	0x01D06370 FADD S1, S9, S1
	0x01D06374 FADD S2, S10, S2
	0x01D06378 ADD X0, X31, 0x30
	0x01D0637C STP X31, X31, [X31 + 0x30]
	0x01D06380 BL 0x22DC630
	0x01D06384 ADRP X22, 0x251D000
	0x01D06388 LDRB W8, [X22 + 0x454]
	0x01D0638C CBNZ W8, 0x1D063A4
	0x01D06390 ADRP X0, 0x2248000
	0x01D06394 LDR X0, [X0 + 0x1F8]
	0x01D06398 BL 0x1B6E7F0
	0x01D0639C MOVZ W8, 0x1
	0x01D063A0 STRB W8, [X22 + 0x454]
	0x01D063A4 ADRP X8, 0x2248000
	0x01D063A8 LDR X8, [X8 + 0x1F8]
	0x01D063AC ADRP X9, 0x2248000
	0x01D063B0 ADD X0, X31, 0x18
	0x01D063B4 LDR X8, [X8]
	0x01D063B8 LDR X8, [X8 + 0xB8]
	0x01D063BC LDR X9, [X9 + 0x250]
	0x01D063C0 LDP S0, S1, [X8]
	0x01D063C4 LDP S2, S3, [X8 + 0x8]
	0x01D063C8 LDR X1, [X9]
	0x01D063CC STP X31, X31, [X31 + 0x18]
	0x01D063D0 STR W31, [X31 + 0x28]
	0x01D063D4 BL 0x22D82D0
	0x01D063D8 CBZ X20, 0x1D06640
	0x01D063DC ADRP X8, 0x2248000
	0x01D063E0 LDP X2, X3, [X31 + 0x30]
	0x01D063E4 LDR X8, [X8 + 0x5D8]
	0x01D063E8 LDUR V0, [X31 + 0x18]
	0x01D063EC LDR W9, [X31 + 0x28]
	0x01D063F0 ADD X4, X31, 0x40
	0x01D063F4 LDR X8, [X8]
	0x01D063F8 MOV X0, X20
	0x01D063FC MOV X1, X21
	0x01D06400 MOV X5, X31
	0x01D06404 MOV X6, X31
	0x01D06408 MOV W7, W31
	0x01D0640C STR V0, [X31 + 0x4]
	0x01D06410 STR W9, [X31 + 0x50]
	0x01D06414 STR X8, [X31]
	0x01D06418 BL 0x2112E18
	0x01D0641C ADRP X8, 0x2248000
	0x01D06420 LDR X8, [X8 + 0x7C0]
	0x01D06424 MOVZ W1, 0x1
	0x01D06428 LDR X0, [X8]
	0x01D0642C BL 0x1B6E868
	0x01D06430 MOV X20, X0
	0x01D06434 MOV X0, X19
	0x01D06438 MOV X1, X31
	0x01D0643C BL 0x3A9B084
	0x01D06440 CBZ X0, 0x1D06640
	0x01D06444 MOV X1, X31
	0x01D06448 BL 0x3AA7658
	0x01D0644C ADRP X8, 0x2247000
	0x01D06450 LDR X8, [X8 + 0x480]
	0x01D06454 ADD X1, X31, 0x8
	0x01D06458 STP S0, S1, [X31 + 0x8]
	0x01D0645C STR S2, [X31 + 0x10]
	0x01D06460 LDR X0, [X8]
	0x01D06464 BL 0x1B6E900
	0x01D06468 ADRP X8, 0x2248000
	0x01D0646C ADRP X9, 0x2248000
	0x01D06470 LDR X8, [X8 + 0xA50]
	0x01D06474 LDR X9, [X9 + 0x7C8]
	0x01D06478 MOV X2, X0
	0x01D0647C ADD X0, X31, 0x40
	0x01D06480 LDR X1, [X8]
	0x01D06484 LDR X3, [X9]
	0x01D06488 STP X31, X31, [X31 + 0x40]
	0x01D0648C BL 0x25FCCA4
	0x01D06490 CBZ X20, 0x1D06640
	0x01D06494 LDR W8, [X20 + 0x18]
	0x01D06498 CBZ W8, 0x1D06644
	0x01D0649C LDR V0, [X31 + 0x4]
	0x01D064A0 ADRP X8, 0x2247000
	0x01D064A4 STR V0, [X20 + 0x2]
	0x01D064A8 LDR X8, [X8 + 0x9A0]
	0x01D064AC LDR X0, [X8]
	0x01D064B0 LDR W8, [X0 + 0xE0]
	0x01D064B4 CBNZ W8, 0x1D064BC
	0x01D064B8 BL 0x1B6E8F8
	0x01D064BC ADRP X8, 0x224B000
	0x01D064C0 LDR X8, [X8 + 0x120]
	0x01D064C4 MOV X1, X20
	0x01D064C8 MOV X2, X31
	0x01D064CC LDR X0, [X8]
	0x01D064D0 BL 0x1CCF488
	0x01D064D4 B 0x1D06514
	0x01D064D8 ADRP X20, 0x2248000
	0x01D064DC LDR X20, [X20 + 0x1C0]
	0x01D064E0 LDR X0, [X20]
	0x01D064E4 LDR W8, [X0 + 0xE0]
	0x01D064E8 CBNZ W8, 0x1D064F0
	0x01D064EC BL 0x1B6E8F8
	0x01D064F0 MOV X0, X19
	0x01D064F4 MOV X1, X31
	0x01D064F8 BL 0x1D697C8
	0x01D064FC LDR X0, [X19 + 0x38]
	0x01D06500 CBZ X0, 0x1D06640
	0x01D06504 MOV X1, X31
	0x01D06508 BL 0x1D87040
	0x01D0650C CMP W0, 0x4
	0x01D06510 B.NE 0x1D06530
	0x01D06514 LDP X20, X19, [X31 + 0x90]
	0x01D06518 LDP X22, X21, [X31 + 0x80]
	0x01D0651C LDR X30, [X31 + 0x78]
	0x01D06520 LDP D9, D8, [X31 + 0x68]
	0x01D06524 LDR V10, [X31 + 0x60]
	0x01D06528 ADD X31, X31, 0xA0
	0x01D0652C RET
	0x01D06530 LDR X0, [X19 + 0x40]
	0x01D06534 CBZ X0, 0x1D06640
	0x01D06538 MOV X1, X31
	0x01D0653C BL 0x1D9F538
	0x01D06540 ANDS W31, W0, 0x7
	0x01D06544 B.EQ 0x1D065A8
	0x01D06548 TBNZ X0, 0x0, 0x1D0629C
	0x01D0654C LDR X8, [X19 + 0x38]
	0x01D06550 CBZ X8, 0x1D06640
	0x01D06554 LDR X0, [X8 + 0x50]
	0x01D06558 CBZ X0, 0x1D06640
	0x01D0655C MOV X1, X31
	0x01D06560 BL 0x1DBEFE4

ISIL:
	001 Move [X31-112], D15
	002 Move [X31-104], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0x251E000
	015 Move X20, 0x2248000
	016 Move W8, [X21+1857]
	017 Move X20, [X20+1144]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x2248000
	024 Move X0, [X0+1144]
	025 Call 0x1B6F7F0
	026 Move W8, 1
	027 Move [X21+1857], W8
	028 Move X0, [X20]
	029 Move X20, [X19+248]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1B6F8F8
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {44}
	042 Move W8, 1
	043 Move [X19+128], W8
	044 Move V8, [X19+244]
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 Move X0, X19
	047 Move X1, X31
	048 Call Component.get_transform, X0
	049 Compare X0, 0
	050 JumpIfEqual {383}
	051 Move X1, X31
	052 Call Transform.get_position, X0
	053 Move X0, X31
	054 Call Extensions.Flatten, X0
	055 Move V3, [X19+264]
	056 Move V8, V0
	057 Move V9, V1
	058 Move V0, [X19+256]
	059 Move V1, [X19+260]
	060 Move V10, V2
	061 Move V2, V3
	062 Move X0, X31
	063 Call Extensions.Flatten, X0
	064 Move X21, 0x251E000
	065 Move W8, [X21+1286]
	066 Move V11, V0
	067 Move V12, V1
	068 Move V13, V2
	069 Compare W8, 0
	070 JumpIfNotEqual {76}
	071 Move X0, 0x2248000
	072 Move X0, [X0+1160]
	073 Call 0x1B6F7F0
	074 Move W8, 1
	075 Move [X21+1286], W8
	076 Move X22, 0x2248000
	077 Move X22, [X22+1160]
	078 Subtract S11, S8, S11
	079 Subtract S9, S9, S12
	080 Subtract S8, S10, S13
	081 Move X0, [X22]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {86}
	085 Call 0x1B6F8F8
	086 Move X8, -19251200
	087 Multiply S0, S11, S11
	088 Multiply S1, S9, S9
	089 Move V14, [X8+2736]
	090 Add S0, S0, S1
	091 Multiply S1, S8, S8
	092 Add S0, S1, S0
	093 NotImplemented "Instruction FSQRT not yet implemented."
	094 NotImplemented "Instruction FCMP not yet implemented."
	095 Move X0, [X19+144]
	096 Compare X0, 0
	097 JumpIfEqual {383}
	098 Move W1, 1
	099 Move X2, X31
	100 Move W20, 1
	101 Call NavMeshAgent.set_updateRotation, X0, X1
	102 Move [X19+236], W31
	103 Move [X19+240], W31
	104 Move [X19+128], W20
	105 Move X0, [X19+152]
	106 Compare X0, 0
	107 JumpIfEqual {383}
	108 Call MobView.get_isWalking, X0
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfEqual {126}
	113 Move X0, [X19+152]
	114 Compare X0, 0
	115 JumpIfEqual {383}
	116 Move W1, 1
	117 Call MobView.SetWalk, X0, X1
	118 Move X0, [X19+152]
	119 Compare X0, 0
	120 JumpIfEqual {383}
	121 Move V0, [X19+208]
	122 Call MobView.SetWalkSpeed, X0, V0
	123 Move W1, 2
	124 Move X0, X19
	125 Call MobControllerDog.set_MoveStatus, X0, X1
	126 Move V8, [X19+256]
	127 Move V9, [X19+260]
	128 Move V10, [X19+264]
	129 Move X0, X19
	130 Move X1, X31
	131 Call Component.get_transform, X0
	132 Compare X0, 0
	133 JumpIfEqual {383}
	134 Move X1, X31
	135 Call Transform.get_position, X0
	136 Subtract S0, S8, S0
	137 Subtract S1, S9, S1
	138 Subtract S2, S10, S2
	139 Move X0, X31
	140 Call Extensions.Flatten, X0
	141 Move X20, 0x251E000
	142 Move W8, [X20+1089]
	143 Move V8, V0
	144 Move V9, V1
	145 Move V10, V2
	146 Compare W8, 0
	147 JumpIfNotEqual {153}
	148 Move X0, 0x2248000
	149 Move X0, [X0+1160]
	150 Call 0x1B6F7F0
	151 Move W8, 1
	152 Move [X20+1089], W8
	153 Move X0, [X22]
	154 Move W8, [X0+224]
	155 Compare W8, 0
	156 JumpIfNotEqual {158}
	157 Call 0x1B6F8F8
	158 Multiply S0, S8, S8
	159 Multiply S1, S9, S9
	160 Move X8, -19251200
	161 Add S0, S0, S1
	162 Move V1, [X8+2916]
	163 Multiply S2, S10, S10
	164 Add S0, S2, S0
	165 NotImplemented "Instruction FSQRT not yet implemented."
	166 NotImplemented "Instruction FCMP not yet implemented."
	167 NotImplemented "Instruction FDIV not yet implemented."
	168 NotImplemented "Instruction FDIV not yet implemented."
	169 NotImplemented "Instruction FDIV not yet implemented."
	170 Move X0, X31
	171 Call Time.get_deltaTime
	172 Subtract S0, S8, S0
	173 Move [X19+244], S0
	174 Move X20, 0x251E000
	175 Move W8, [X20+1087]
	176 Compare W8, 0
	177 JumpIfNotEqual {183}
	178 Move X0, 0x2248000
	179 Move X0, [X0+1152]
	180 Call 0x1B6F7F0
	181 Move W8, 1
	182 Move [X20+1087], W8
	183 Move X8, 0x2248000
	184 Move X8, [X8+1152]
	185 Move X8, [X8]
	186 Move X8, [X8+184]
	187 Move S8, [X8]
	188 Move S9, [X8+4]
	189 Move V10, [X8+8]
	190 Move X0, X19
	191 Move X1, X31
	192 Call Component.get_transform, X0
	193 Move X20, X0
	194 Move V0, V8
	195 Move V1, V9
	196 Move V2, V10
	197 Move X0, X31
	198 Call Quaternion.LookRotation, X0
	199 Compare X20, 0
	200 JumpIfEqual {383}
	201 Move X0, X20
	202 Move X1, X31
	203 Call Transform.set_rotation, X0, X1
	204 Move X0, [X19+144]
	205 Compare X0, 0
	206 JumpIfEqual {383}
	207 Move V2, [X19+264]
	208 Move V1, [X19+260]
	209 Move V0, [X19+256]
	210 Move X1, X31
	211 Call NavMeshAgent.SetDestination, X0, X1
	212 Move V11, [X19+240]
	213 Move X0, X19
	214 Move X1, X31
	215 Call Component.get_transform, X0
	216 Compare X0, 0
	217 JumpIfEqual {383}
	218 Move X1, X31
	219 Call Transform.get_position, X0
	220 Move S12, [X19+224]
	221 Move S13, [X19+228]
	222 Move W8, [X21+1286]
	223 Move V15, [X19+232]
	224 Move V8, V0
	225 Move V9, V1
	226 Move V10, V2
	227 Compare W8, 0
	228 JumpIfNotEqual {234}
	229 Move X0, 0x2248000
	230 Move X0, [X0+1160]
	231 Call 0x1B6F7F0
	232 Move W8, 1
	233 Move [X21+1286], W8
	234 Move X0, [X22]
	235 Subtract S12, S8, S12
	236 Subtract S9, S9, S13
	237 Subtract S8, S10, S15
	238 Move W8, [X0+224]
	239 Compare W8, 0
	240 JumpIfNotEqual {242}
	241 Call 0x1B6F8F8
	242 Multiply S0, S12, S12
	243 Multiply S1, S9, S9
	244 Add S0, S0, S1
	245 Multiply S1, S8, S8
	246 Add S0, S1, S0
	247 NotImplemented "Instruction FSQRT not yet implemented."
	248 Add S0, S11, S0
	249 Move X0, X19
	250 Move X1, X31
	251 Move [X19+240], S0
	252 Call Component.get_transform, X0
	253 Compare X0, 0
	254 JumpIfEqual {383}
	255 Move X1, X31
	256 Call Transform.get_position, X0
	257 Move V3, [X19+240]
	258 Move V4, [X19+216]
	259 Move [X19+224], S0
	260 Move [X19+232], S1
	261 Move [X19+232], S2
	262 NotImplemented "Instruction FCMP not yet implemented."
	263 Move X0, [X19+152]
	264 Compare X0, 0
	265 JumpIfEqual {383}
	266 Move W1, W31
	267 Call MobView.SetWalk, X0, X1
	268 Move X0, X19
	269 Move W1, W31
	270 Call MobControllerDog.set_MoveStatus, X0, X1
	271 Move V0, [X19+220]
	272 Move X20, [X19+144]
	273 Move [X19+240], W31
	274 Move [X19+244], S0
	275 Compare X20, 0
	276 JumpIfEqual {383}
	277 Move X0, X20
	278 Move X1, X31
	279 Call Component.get_transform, X0
	280 Compare X0, 0
	281 JumpIfEqual {383}
	282 Move X1, X31
	283 Call Transform.get_position, X0
	284 Move X0, X20
	285 Move X1, X31
	286 Call NavMeshAgent.SetDestination, X0, X1
	287 Move X0, X19
	288 Move X1, X31
	289 Call Component.get_transform, X0
	290 Compare X0, 0
	291 JumpIfEqual {383}
	292 Move X1, X31
	293 Call Transform.get_position, X0
	294 Move X0, X31
	295 Call Extensions.Flatten, X0
	296 Move V3, [X19+264]
	297 Move V8, V0
	298 Move V9, V1
	299 Move V0, [X19+256]
	300 Move V1, [X19+260]
	301 Move V10, V2
	302 Move V2, V3
	303 Move X0, X31
	304 Call Extensions.Flatten, X0
	305 Move W8, [X21+1286]
	306 Move V11, V0
	307 Move V12, V1
	308 Move V13, V2
	309 Compare W8, 0
	310 JumpIfNotEqual {316}
	311 Move X0, 0x2248000
	312 Move X0, [X0+1160]
	313 Call 0x1B6F7F0
	314 Move W8, 1
	315 Move [X21+1286], W8
	316 Move X0, [X22]
	317 Subtract S11, S8, S11
	318 Subtract S9, S9, S12
	319 Subtract S8, S10, S13
	320 Move W8, [X0+224]
	321 Compare W8, 0
	322 JumpIfNotEqual {324}
	323 Call 0x1B6F8F8
	324 Multiply S0, S11, S11
	325 Multiply S1, S9, S9
	326 Add S0, S0, S1
	327 Multiply S1, S8, S8
	328 Add S0, S1, S0
	329 NotImplemented "Instruction FSQRT not yet implemented."
	330 NotImplemented "Instruction FCMP not yet implemented."
	331 Move X0, [X19+152]
	332 Compare X0, 0
	333 JumpIfEqual {383}
	334 Move W1, W31
	335 Call MobView.SetWalk, X0, X1
	336 Move X0, X19
	337 Move W1, W31
	338 Call MobControllerDog.set_MoveStatus, X0, X1
	339 Move V0, [X19+220]
	340 Move X20, [X19+144]
	341 Move [X19+240], W31
	342 Move [X19+244], S0
	343 Compare X20, 0
	344 JumpIfEqual {383}
	345 Move X0, X20
	346 Move X1, X31
	347 Call Component.get_transform, X0
	348 Compare X0, 0
	349 JumpIfEqual {383}
	350 Move X1, X31
	351 Call Transform.get_position, X0
	352 Move X0, X20
	353 Move X20, [X31+96]
	354 Move X19, [X31+104]
	355 Move X22, [X31+80]
	356 Move X21, [X31+88]
	357 Move X30, [X31+64]
	358 Move D9, [X31+48]
	359 Move D8, [X31+56]
	360 Move D11, [X31+32]
	361 Move D10, [X31+40]
	362 Move D13, [X31+16]
	363 Move D12, [X31+24]
	364 Move X1, X31
	365 Move D15, [X31+112]
	366 Move D14, [X31+120]
	367 Call NavMeshAgent.SetDestination, X0, X1
	368 Return 
	369 Move X20, [X31+96]
	370 Move X19, [X31+104]
	371 Move X22, [X31+80]
	372 Move X21, [X31+88]
	373 Move X30, [X31+64]
	374 Move D9, [X31+48]
	375 Move D8, [X31+56]
	376 Move D11, [X31+32]
	377 Move D10, [X31+40]
	378 Move D13, [X31+16]
	379 Move D12, [X31+24]
	380 Move D15, [X31+112]
	381 Move D14, [X31+120]
	382 Return 
	383 Call 0x1B6FA1C

Method: System.Void AttackPlayer()

Disassembly:
	0x01D06564 TBZ X0, 0x0, 0x1D06514
	0x01D06568 LDR X8, [X19 + 0x38]
	0x01D0656C CBZ X8, 0x1D06640
	0x01D06570 LDR X0, [X8 + 0x50]
	0x01D06574 MOVZ W1, 0x8
	0x01D06578 MOV X2, X31
	0x01D0657C BL 0x1DD601C
	0x01D06580 MOV X20, X0
	0x01D06584 MOVZ W0, 0x1
	0x01D06588 MOV X1, X31
	0x01D0658C BL 0x1D29EBC
	0x01D06590 LDR X8, [X19 + 0x40]
	0x01D06594 CBZ X8, 0x1D06640
	0x01D06598 LDR X8, [X8 + 0x20]
	0x01D0659C CBZ X8, 0x1D065F0
	0x01D065A0 LDR W0, [X8]
	0x01D065A4 B 0x1D065F4
	0x01D065A8 LDR X0, [X20]
	0x01D065AC LDR X19, [X19 + 0x40]
	0x01D065B0 LDR W8, [X0 + 0xE0]
	0x01D065B4 CBNZ W8, 0x1D065BC
	0x01D065B8 BL 0x1B6E8F8
	0x01D065BC ADRP X8, 0x224B000
	0x01D065C0 LDR X8, [X8 + 0x128]
	0x01D065C4 MOV X1, X19
	0x01D065C8 LDP X20, X19, [X31 + 0x90]
	0x01D065CC LDP X22, X21, [X31 + 0x80]
	0x01D065D0 LDR X0, [X8]
	0x01D065D4 LDR X30, [X31 + 0x78]
	0x01D065D8 LDP D9, D8, [X31 + 0x68]
	0x01D065DC LDR V10, [X31 + 0x60]
	0x01D065E0 MOVZ W2, 0x7
	0x01D065E4 MOV X3, X31
	0x01D065E8 ADD X31, X31, 0xA0
	0x01D065EC B 0x1D69640
	0x01D065F0 MOV X0, X31
	0x01D065F4 LDR W1, [X19 + 0x68]
	0x01D065F8 MOVZ W2, 0x2
	0x01D065FC MOV X3, X31
	0x01D06600 BL 0x1DA8258
	0x01D06604 STUR X0, [X20 + 0x1C]
	0x01D06608 CBZ X20, 0x1D06640
	0x01D0660C MOVZ W8, 0x40
	0x01D06610 STR W8, [X20 + 0xC]
	0x01D06614 LDR X0, [X19 + 0x38]
	0x01D06618 CBZ X0, 0x1D06640
	0x01D0661C MOV X1, X20
	0x01D06620 LDP X20, X19, [X31 + 0x90]
	0x01D06624 LDP X22, X21, [X31 + 0x80]
	0x01D06628 LDR X30, [X31 + 0x78]
	0x01D0662C LDP D9, D8, [X31 + 0x68]
	0x01D06630 LDR V10, [X31 + 0x60]
	0x01D06634 MOV X2, X31
	0x01D06638 ADD X31, X31, 0xA0
	0x01D0663C B 0x1D8A710
	0x01D06640 BL 0x1B6EA1C
	0x01D06644 BL 0x1B6EA24
	0x01D06648 B 0x1D061D0
	0x01D0664C MOV X1, X31
	0x01D06650 B 0x1D661D8
	0x01D06654 STR X30, [X31 - 0x30]!
	0x01D06658 STP X22, X21, [X31 + 0x10]
	0x01D0665C STP X20, X19, [X31 + 0x20]
	0x01D06660 ADRP X19, 0x251D000
	0x01D06664 LDRB W8, [X19 + 0x74A]
	0x01D06668 TBNZ X8, 0x0, 0x1D06698
	0x01D0666C ADRP X0, 0x224B000
	0x01D06670 LDR X0, [X0 + 0x130]
	0x01D06674 BL 0x1B6E7F0
	0x01D06678 ADRP X0, 0x224B000
	0x01D0667C LDR X0, [X0 + 0x138]
	0x01D06680 BL 0x1B6E7F0
	0x01D06684 ADRP X0, 0x2248000
	0x01D06688 LDR X0, [X0 + 0xD70]
	0x01D0668C BL 0x1B6E7F0
	0x01D06690 MOVZ W8, 0x1
	0x01D06694 STRB W8, [X19 + 0x74A]
	0x01D06698 ADRP X22, 0x251D000
	0x01D0669C ADRP X20, 0x2248000
	0x01D066A0 ADRP X21, 0x224B000
	0x01D066A4 ADRP X19, 0x224B000
	0x01D066A8 LDRB W8, [X22 + 0x43F]
	0x01D066AC LDR X20, [X20 + 0xD70]
	0x01D066B0 LDR X21, [X21 + 0x138]
	0x01D066B4 LDR X19, [X19 + 0x130]
	0x01D066B8 CBNZ W8, 0x1D066D0
	0x01D066BC ADRP X0, 0x2247000
	0x01D066C0 LDR X0, [X0 + 0x480]
	0x01D066C4 BL 0x1B6E7F0
	0x01D066C8 MOVZ W8, 0x1
	0x01D066CC STRB W8, [X22 + 0x43F]
	0x01D066D0 ADRP X8, 0x2247000
	0x01D066D4 LDR X8, [X8 + 0x480]
	0x01D066D8 LDR X9, [X20]
	0x01D066DC LDR X8, [X8]
	0x01D066E0 LDR X9, [X9 + 0xB8]
	0x01D066E4 LDR X8, [X8 + 0xB8]
	0x01D066E8 LDR V0, [X8]
	0x01D066EC LDR V1, [X8 + 0x8]
	0x01D066F0 STR D0, [X9]
	0x01D066F4 STR S1, [X9 + 0x8]
	0x01D066F8 LDR X8, [X20]
	0x01D066FC ADRP X9, 0xFFFFFFFFFEDA7000
	0x01D06700 LDR V0, [X9 + 0x2A8]
	0x01D06704 LDR X8, [X8 + 0xB8]
	0x01D06708 STUR D0, [X8 + 0xC]
	0x01D0670C STR W31, [X8 + 0x14]
	0x01D06710 LDR X0, [X21]
	0x01D06714 BL 0x1B6EA0C
	0x01D06718 LDR X1, [X19]
	0x01D0671C MOV X19, X0
	0x01D06720 BL 0x2BD32D4
	0x01D06724 LDR X8, [X20]

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x251E000
	012 Move X20, 0x2248000
	013 Move W8, [X21+1858]
	014 Move X20, [X20+1144]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x2248000
	021 Move X0, [X0+1144]
	022 Call 0x1B6F7F0
	023 Move X0, 0x224C000
	024 Move X0, [X0+184]
	025 Call 0x1B6F7F0
	026 Move W8, 1
	027 Move [X21+1858], W8
	028 Move X0, [X20]
	029 Move X20, [X19+248]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1B6F8F8
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {131}
	042 Move X0, X19
	043 Move X1, X31
	044 Call Component.get_transform, X0
	045 Compare X0, 0
	046 JumpIfEqual {142}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X0, X31
	050 Call Extensions.Flatten, X0
	051 Move X0, [X19+248]
	052 Compare X0, 0
	053 JumpIfEqual {142}
	054 Move X1, X31
	055 Move V8, V0
	056 Move V9, V1
	057 Move V10, V2
	058 Call Component.get_transform, X0
	059 Compare X0, 0
	060 JumpIfEqual {142}
	061 Move X1, X31
	062 Call Transform.get_position, X0
	063 Move X0, X31
	064 Call Extensions.Flatten, X0
	065 Move X20, 0x251E000
	066 Move W8, [X20+1286]
	067 Move V11, V0
	068 Move V12, V1
	069 Move V13, V2
	070 Compare W8, 0
	071 JumpIfNotEqual {77}
	072 Move X0, 0x2248000
	073 Move X0, [X0+1160]
	074 Call 0x1B6F7F0
	075 Move W8, 1
	076 Move [X20+1286], W8
	077 Move X8, 0x2248000
	078 Move X8, [X8+1160]
	079 Subtract S11, S8, S11
	080 Subtract S9, S9, S12
	081 Subtract S8, S10, S13
	082 Move X0, [X8]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1B6F8F8
	087 Multiply S0, S11, S11
	088 Multiply S1, S9, S9
	089 Move V2, [X19+188]
	090 Add S0, S0, S1
	091 Multiply S1, S8, S8
	092 Add S0, S1, S0
	093 NotImplemented "Instruction FSQRT not yet implemented."
	094 NotImplemented "Instruction FCMP not yet implemented."
	095 Move S0, [X19+196]
	096 Move S8, [X19+200]
	097 NotImplemented "Instruction FCMP not yet implemented."
	098 Move X20, [X19+248]
	099 Move W21, [X19+192]
	100 Move X0, X19
	101 Move X1, X31
	102 Move [X19+200], W31
	103 Call Component.get_transform, X0
	104 Compare X20, 0
	105 JumpIfEqual {142}
	106 Move X8, 0x224C000
	107 Move X3, [X19+288]
	108 Move X4, [X19+296]
	109 Move X8, [X8+184]
	110 Move X2, X0
	111 Move X0, X20
	112 Move W1, W21
	113 Move X5, [X8]
	114 Move X20, [X31+64]
	115 Move X19, [X31+72]
	116 Move X30, [X31+48]
	117 Move X21, [X31+56]
	118 Move D9, [X31+32]
	119 Move D8, [X31+40]
	120 Move D11, [X31+16]
	121 Move D10, [X31+24]
	122 Move X6, X31
	123 Move D13, [X31+80]
	124 Move D12, [X31+88]
	125 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5
	126 Return 
	127 Move X0, X31
	128 Call Time.get_deltaTime
	129 Add S0, S8, S0
	130 Move [X19+200], S0
	131 Move X20, [X31+64]
	132 Move X19, [X31+72]
	133 Move X30, [X31+48]
	134 Move X21, [X31+56]
	135 Move D9, [X31+32]
	136 Move D8, [X31+40]
	137 Move D11, [X31+16]
	138 Move D10, [X31+24]
	139 Move D13, [X31+80]
	140 Move D12, [X31+88]
	141 Return 
	142 Call 0x1B6FA1C

Method: System.Void HandleMoveStatusChanged()

Disassembly:
	0x01D06798 STRB W8, [X19 + 0xA5]
	0x01D0679C LDP X30, X19, [X31], #0x10
	0x01D067A0 RET
	0x01D067A4 STR X30, [X31 - 0x20]!
	0x01D067A8 STP X20, X19, [X31 + 0x10]
	0x01D067AC ADRP X20, 0x251D000
	0x01D067B0 LDRB W8, [X20 + 0x74B]
	0x01D067B4 MOV X19, X0
	0x01D067B8 TBNZ X8, 0x0, 0x1D067D0
	0x01D067BC ADRP X0, 0x2248000
	0x01D067C0 LDR X0, [X0 + 0xD70]
	0x01D067C4 BL 0x1B6E7F0
	0x01D067C8 MOVZ W8, 0x1
	0x01D067CC STRB W8, [X20 + 0x74B]
	0x01D067D0 MOVZ W0, 0x1
	0x01D067D4 MOV X1, X31
	0x01D067D8 MOVZ W20, 0x1
	0x01D067DC BL 0x1D29EBC
	0x01D067E0 CBZ X19, 0x1D06834
	0x01D067E4 ADRP X9, 0x2248000
	0x01D067E8 LDR X9, [X9 + 0xD70]
	0x01D067EC STRB W20, [X19 + 0x58]
	0x01D067F0 LDR X8, [X19]
	0x01D067F4 LDR X1, [X9]
	0x01D067F8 LDRB W10, [X8 + 0x130]
	0x01D067FC LDRB W9, [X1 + 0x130]
	0x01D06800 CMP W10, W9

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobControllerDog.get_MoveStatus, X0
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Compare W0, 0
	008 JumpIfNotEqual {32}
	009 Move X8, [X19+152]
	010 Compare X8, 0
	011 JumpIfEqual {35}
	012 Move X0, [X8+48]
	013 Compare X0, 0
	014 JumpIfEqual {35}
	015 Move X1, X31
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call AudioSource.Stop, X0
	019 Return 
	020 Move X0, [X19+152]
	021 Compare X0, 0
	022 JumpIfEqual {35}
	023 Move X1, [X0+72]
	024 Move X0, [X19+152]
	025 Compare X0, 0
	026 JumpIfEqual {35}
	027 Move X1, [X0+64]
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Call MobView.PlaySound, X0, X1
	031 Return 
	032 Move X30, [X31+16]
	033 Move X19, [X31+24]
	034 Return 
	035 Call 0x1B6FA1C

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01D06804 B.CC 0x1D0682C
	0x01D06808 LDR X8, [X8 + 0xC8]
	0x01D0680C ADD X8, X8, X9, 0x3, LSL
	0x01D06810 LDUR X8, [X8 - 0x8]
	0x01D06814 CMP X8, X1
	0x01D06818 B.NE 0x1D0682C
	0x01D0681C MOV X0, X19
	0x01D06820 LDP X20, X19, [X31 + 0x10]
	0x01D06824 LDR X30, [X31], #0x20
	0x01D06828 B 0x1D05F64
	0x01D0682C MOV X0, X19
	0x01D06830 BL 0x1B6ECDC
	0x01D06834 BL 0x1B6EA1C
	0x01D06838 STR X30, [X31 - 0x20]!
	0x01D0683C STP X20, X19, [X31 + 0x10]
	0x01D06840 ADRP X20, 0x251D000
	0x01D06844 LDRB W8, [X20 + 0x74C]
	0x01D06848 MOV X19, X0
	0x01D0684C TBNZ X8, 0x0, 0x1D06864
	0x01D06850 ADRP X0, 0x2248000
	0x01D06854 LDR X0, [X0 + 0xD70]
	0x01D06858 BL 0x1B6E7F0
	0x01D0685C MOVZ W8, 0x1
	0x01D06860 STRB W8, [X20 + 0x74C]
	0x01D06864 MOVZ W0, 0x1
	0x01D06868 MOV X1, X31
	0x01D0686C MOVZ W20, 0x1
	0x01D06870 BL 0x1D29EBC
	0x01D06874 CBZ X19, 0x1D068C8
	0x01D06878 ADRP X9, 0x2248000
	0x01D0687C LDR X9, [X9 + 0xD70]
	0x01D06880 STRB W20, [X19 + 0x58]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move S0, 1
	005 Move S1, W31
	006 Move S2, W31
	007 Move S3, 1
	008 Move X0, X31
	009 Call Gizmos.set_color, X0
	010 Move X0, [X19+160]
	011 Compare X0, 0
	012 JumpIfEqual {37}
	013 Move X1, X31
	014 Call Transform.get_position, X0
	015 Move V3, [X19+180]
	016 Move X0, X31
	017 Call Gizmos.DrawWireSphere, X0, V0
	018 Move X8, -19251200
	019 Move X9, -19251200
	020 Move V1, [X8+2452]
	021 Move V2, [X9+2600]
	022 Move S0, 1
	023 Move S3, 1
	024 Move X0, X31
	025 Call Gizmos.set_color, X0
	026 Move X0, [X19+168]
	027 Compare X0, 0
	028 JumpIfEqual {37}
	029 Move X1, X31
	030 Call Transform.get_position, X0
	031 Move V3, [X19+184]
	032 Move X0, X31
	033 Move X30, [X31+16]
	034 Move X19, [X31+24]
	035 Call Gizmos.DrawWireSphere, X0, V0
	036 Return 
	037 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01D06884 LDR X8, [X19]
	0x01D06888 LDR X1, [X9]
	0x01D0688C LDRB W10, [X8 + 0x130]
	0x01D06890 LDRB W9, [X1 + 0x130]
	0x01D06894 CMP W10, W9
	0x01D06898 B.CC 0x1D068C0
	0x01D0689C LDR X8, [X8 + 0xC8]
	0x01D068A0 ADD X8, X8, X9, 0x3, LSL
	0x01D068A4 LDUR X8, [X8 - 0x8]
	0x01D068A8 CMP X8, X1
	0x01D068AC B.NE 0x1D068C0
	0x01D068B0 MOV X0, X19
	0x01D068B4 LDP X20, X19, [X31 + 0x10]
	0x01D068B8 LDR X30, [X31], #0x20
	0x01D068BC B 0x1D061D0
	0x01D068C0 MOV X0, X19
	0x01D068C4 BL 0x1B6ECDC

ISIL:
	001 Move X8, -19238912
	002 Move V0, [X8+3992]
	003 Move X8, 0x3F800000
	004 NotImplemented "Instruction MOVK not yet implemented."
	005 Move [X0+188], X8
	006 Move X8, -19238912
	007 Move [X0+180], D0
	008 Move V0, [X8+151]
	009 Move W8, 0xCCCD
	010 NotImplemented "Instruction MOVK not yet implemented."
	011 Move [X0+196], W8
	012 Move W8, 0x40A00000
	013 Move X1, X31
	014 Move [X0+220], W8
	015 Move [X0+204], V0
	016 Move [X0+244], W8
	017 Call NetworkBehaviour..ctor, X0
	018 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01D068C8 BL 0x1B6EA1C
	0x01D068CC STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move W1, [X0+304]
	002 Call MobControllerDog.set_MoveStatus, X0, X1
	003 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01D068D0 STP X20, X19, [X31 + 0x10]
	0x01D068D4 ADRP X21, 0x251D000
	0x01D068D8 LDRB W8, [X21 + 0x750]
	0x01D068DC MOV X19, X1
	0x01D068E0 MOV X20, X0
	0x01D068E4 TBNZ X8, 0x0, 0x1D068FC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobControllerDog.get_MoveStatus, X0
	005 Move [X19+304], W0
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 

