Type: AnimalCompany.PrototypeOne.MobController

Method: AnimalCompany.PrototypeOne.MobController/MobMoveStatus get_MoveStatus()

Disassembly:
	0x01D03D9C BL 0x3A4AD28
	0x01D03DA0 LDR X8, [X19 + 0x118]
	0x01D03DA4 CBZ X8, 0x1D03F24
	0x01D03DA8 LDRSW X9, [X19 + 0x120]
	0x01D03DAC LDR W10, [X8 + 0x18]
	0x01D03DB0 CMP W9, W10
	0x01D03DB4 B.CS 0x1D03F28
	0x01D03DB8 ADD X8, X8, X9, 0x3, LSL
	0x01D03DBC LDR X0, [X8 + 0x20]
	0x01D03DC0 CBZ X0, 0x1D03F24
	0x01D03DC4 LDR X20, [X19 + 0x90]
	0x01D03DC8 MOV X1, X31
	0x01D03DCC BL 0x3AA7658
	0x01D03DD0 CBZ X20, 0x1D03F24
	0x01D03DD4 MOV X0, X20
	0x01D03DD8 MOV X1, X31
	0x01D03DDC BL 0x3A4A810
	0x01D03DE0 LDR V11, [X19 + 0xF8]
	0x01D03DE4 MOV X0, X19
	0x01D03DE8 MOV X1, X31
	0x01D03DEC BL 0x3A9B084
	0x01D03DF0 CBZ X0, 0x1D03F24
	0x01D03DF4 MOV X1, X31
	0x01D03DF8 BL 0x3AA7658

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x224B000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x224F000
	016 Move X0, [X0+120]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x224F000
	023 Move X0, [X0+128]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_MoveStatus(AnimalCompany.PrototypeOne.MobController/MobMoveStatus value)

Disassembly:
	0x01D03DFC LDP S12, S13, [X19 + 0xEC]
	0x01D03E00 LDRB W8, [X21 + 0x506]
	0x01D03E04 LDR V14, [X19 + 0xF4]
	0x01D03E08 MOV V8.16B, V0.16B
	0x01D03E0C MOV V9.16B, V1.16B
	0x01D03E10 MOV V10.16B, V2.16B
	0x01D03E14 CBNZ W8, 0x1D03E2C
	0x01D03E18 ADRP X0, 0x224A000
	0x01D03E1C LDR X0, [X0 + 0x488]
	0x01D03E20 BL 0x1B6E7F0
	0x01D03E24 MOVZ W8, 0x1
	0x01D03E28 STRB W8, [X21 + 0x506]
	0x01D03E2C LDR X0, [X22]
	0x01D03E30 FSUB S12, S8, S12
	0x01D03E34 FSUB S9, S9, S13
	0x01D03E38 FSUB S8, S10, S14
	0x01D03E3C LDR W8, [X0 + 0xE0]
	0x01D03E40 CBNZ W8, 0x1D03E48
	0x01D03E44 BL 0x1B6E8F8
	0x01D03E48 FMUL S0, S12, S12
	0x01D03E4C FMUL S1, S9, S9
	0x01D03E50 FADD S0, S0, S1
	0x01D03E54 FMUL S1, S8, S8
	0x01D03E58 FADD S0, S1, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x224B000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x224F000
	016 Move X0, [X0+120]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x224F000
	023 Move X0, [X0+136]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void Awake()

Disassembly:
	0x01D03E5C FSQRT S0, S0
	0x01D03E60 FADD S0, S11, S0
	0x01D03E64 MOV X0, X19
	0x01D03E68 MOV X1, X31
	0x01D03E6C STR S0, [X19 + 0xF8]
	0x01D03E70 BL 0x3A9B084
	0x01D03E74 CBZ X0, 0x1D03F24
	0x01D03E78 MOV X1, X31
	0x01D03E7C BL 0x3AA7658
	0x01D03E80 LDR V3, [X19 + 0xF8]
	0x01D03E84 LDR V4, [X19 + 0xDC]
	0x01D03E88 STP S0, S1, [X19 + 0xEC]
	0x01D03E8C STR S2, [X19 + 0xF4]
	0x01D03E90 FCMP S3, S4
	0x01D03E94 B.LT 0x1D03F04
	0x01D03E98 LDR X0, [X19 + 0x98]
	0x01D03E9C CBZ X0, 0x1D03F24
	0x01D03EA0 MOV W1, W31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+152]
	005 Move [X19+128], W31
	006 Compare X0, 0
	007 JumpIfEqual {23}
	008 Move W1, W31
	009 Call MobView.SetWalk, X0, X1
	010 Move X0, X19
	011 Move X1, X31
	012 Call Component.get_transform, X0
	013 Compare X0, 0
	014 JumpIfEqual {23}
	015 Move X1, X31
	016 Call Transform.get_position, X0
	017 Move [X19+236], S0
	018 Move [X19+244], S1
	019 Move [X19+244], S2
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 
	023 Call 0x1B6FA1C

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01D03F24 BL 0x1B6EA1C
	0x01D03F28 BL 0x1B6EA24
	0x01D03F2C STR D14, [X31 - 0x70]!
	0x01D03F30 STP D13, D12, [X31 + 0x10]
	0x01D03F34 STP D11, D10, [X31 + 0x20]
	0x01D03F38 STP D9, D8, [X31 + 0x30]
	0x01D03F3C STP X30, X23, [X31 + 0x40]
	0x01D03F40 STP X22, X21, [X31 + 0x50]
	0x01D03F44 STP X20, X19, [X31 + 0x60]
	0x01D03F48 ADRP X21, 0x2520000
	0x01D03F4C ADRP X20, 0x224A000
	0x01D03F50 LDRB W8, [X21 + 0x73E]
	0x01D03F54 LDR X20, [X20 + 0x478]
	0x01D03F58 MOV X19, X0
	0x01D03F5C TBNZ X8, 0x0, 0x1D03F80
	0x01D03F60 ADRP X0, 0x224A000
	0x01D03F64 LDR X0, [X0 + 0x478]
	0x01D03F68 BL 0x1B6E7F0
	0x01D03F6C ADRP X0, 0x224E000
	0x01D03F70 LDR X0, [X0 + 0x98]
	0x01D03F74 BL 0x1B6E7F0
	0x01D03F78 MOVZ W8, 0x1
	0x01D03F7C STRB W8, [X21 + 0x73E]
	0x01D03F80 LDR X0, [X20]
	0x01D03F84 LDR X20, [X19 + 0x108]
	0x01D03F88 LDR W8, [X0 + 0xE0]
	0x01D03F8C CBNZ W8, 0x1D03F94
	0x01D03F90 BL 0x1B6E8F8
	0x01D03F94 MOV X0, X20
	0x01D03F98 MOV X1, X31
	0x01D03F9C MOV X2, X31
	0x01D03FA0 BL 0x3AA0AF0
	0x01D03FA4 TBNZ X0, 0x0, 0x1D03FBC
	0x01D03FA8 LDR X0, [X19 + 0x108]
	0x01D03FAC CBZ X0, 0x1D044A0
	0x01D03FB0 MOV X1, X31
	0x01D03FB4 BL 0x1CB47E0
	0x01D03FB8 TBZ X0, 0x0, 0x1D03FF8
	0x01D03FBC MOV X0, X19
	0x01D03FC0 MOV W1, W31
	0x01D03FC4 STR X31, [X19 + 0x108]
	0x01D03FC8 BL 0x1D02DFC
	0x01D03FCC MOVZ W8, 0x1
	0x01D03FD0 STR W8, [X19 + 0x80]
	0x01D03FD4 STR W31, [X19 + 0xC4]
	0x01D03FD8 LDP X20, X19, [X31 + 0x60]
	0x01D03FDC LDP X22, X21, [X31 + 0x50]
	0x01D03FE0 LDP X30, X23, [X31 + 0x40]
	0x01D03FE4 LDP D9, D8, [X31 + 0x30]
	0x01D03FE8 LDP D11, D10, [X31 + 0x20]
	0x01D03FEC LDP D13, D12, [X31 + 0x10]
	0x01D03FF0 LDR V14, [X31], #0x70
	0x01D03FF4 RET
	0x01D03FF8 MOV X0, X19
	0x01D03FFC MOV X1, X31
	0x01D04000 BL 0x3A9B084
	0x01D04004 CBZ X0, 0x1D044A0
	0x01D04008 MOV X1, X31
	0x01D0400C BL 0x3AA7658
	0x01D04010 MOV X0, X31
	0x01D04014 BL 0x1CC086C
	0x01D04018 LDR X0, [X19 + 0x108]
	0x01D0401C CBZ X0, 0x1D044A0
	0x01D04020 MOV X1, X31
	0x01D04024 MOV V8.16B, V0.16B
	0x01D04028 MOV V9.16B, V1.16B
	0x01D0402C MOV V10.16B, V2.16B
	0x01D04030 BL 0x3A9B084
	0x01D04034 CBZ X0, 0x1D044A0
	0x01D04038 MOV X1, X31
	0x01D0403C BL 0x3AA7658
	0x01D04040 MOV X0, X31
	0x01D04044 BL 0x1CC086C
	0x01D04048 ADRP X22, 0x251F000
	0x01D0404C LDRB W8, [X22 + 0x506]
	0x01D04050 MOV V11.16B, V0.16B
	0x01D04054 MOV V12.16B, V1.16B
	0x01D04058 MOV V13.16B, V2.16B
	0x01D0405C CBNZ W8, 0x1D04074
	0x01D04060 ADRP X0, 0x2249000
	0x01D04064 LDR X0, [X0 + 0x488]
	0x01D04068 BL 0x1B6E7F0
	0x01D0406C MOVZ W8, 0x1
	0x01D04070 STRB W8, [X22 + 0x506]
	0x01D04074 ADRP X23, 0x2249000
	0x01D04078 LDR X23, [X23 + 0x488]
	0x01D0407C FSUB S11, S8, S11
	0x01D04080 FSUB S9, S9, S12
	0x01D04084 FSUB S8, S10, S13
	0x01D04088 LDR X0, [X23]
	0x01D0408C LDR W8, [X0 + 0xE0]
	0x01D04090 CBNZ W8, 0x1D04098
	0x01D04094 BL 0x1B6E8F8
	0x01D04098 FMUL S0, S11, S11
	0x01D0409C FMUL S1, S9, S9
	0x01D040A0 FMUL S2, S8, S8
	0x01D040A4 FADD S0, S0, S1
	0x01D040A8 FADD S0, S2, S0
	0x01D040AC FSQRT S0, S0
	0x01D040B0 FMOV S1, 0.5
	0x01D040B4 FCMP S0, S1
	0x01D040B8 B.PL 0x1D041B0
	0x01D040BC MOV X0, X19
	0x01D040C0 BL 0x1D02D9C
	0x01D040C4 CBZ W0, 0x1D04128
	0x01D040C8 LDR X0, [X19 + 0x98]
	0x01D040CC CBZ X0, 0x1D044A0
	0x01D040D0 MOV W1, W31
	0x01D040D4 BL 0x1D02EA4
	0x01D040D8 MOV X0, X19
	0x01D040DC MOV W1, W31
	0x01D040E0 BL 0x1D02DFC
	0x01D040E4 MOV X0, X31
	0x01D040E8 STR W31, [X19 + 0xFC]
	0x01D040EC BL 0x3AA47CC
	0x01D040F0 LDR X20, [X19 + 0x90]
	0x01D040F4 FMOV S1, -1
	0x01D040F8 FADD S0, S0, S1
	0x01D040FC STR S0, [X19 + 0x100]
	0x01D04100 CBZ X20, 0x1D044A0
	0x01D04104 MOV X0, X20
	0x01D04108 MOV X1, X31
	0x01D0410C BL 0x3A9B084
	0x01D04110 CBZ X0, 0x1D044A0
	0x01D04114 MOV X1, X31
	0x01D04118 BL 0x3AA7658
	0x01D0411C MOV X0, X20
	0x01D04120 MOV X1, X31
	0x01D04124 BL 0x3A4A810
	0x01D04128 LDR W8, [X19 + 0xC4]
	0x01D0412C MOVZ W9, 0xCC
	0x01D04130 LDR V8, [X19 + 0xD0]
	0x01D04134 CMP W8, 0x0
	0x01D04138 MOVZ W8, 0xC8
	0x01D0413C CSEL X8, X8, X9, EQ
	0x01D04140 LDR V0, [X19, X8, LSL]
	0x01D04144 FCMP S8, S0
	0x01D04148 B.LE 0x1D041A0
	0x01D0414C LDR X20, [X19 + 0x108]
	0x01D04150 LDR W21, [X19 + 0xC0]
	0x01D04154 MOV X0, X19
	0x01D04158 MOV X1, X31
	0x01D0415C STR W31, [X19 + 0xD0]
	0x01D04160 BL 0x3A9B084
	0x01D04164 CBZ X20, 0x1D044A0
	0x01D04168 ADRP X8, 0x224D000
	0x01D0416C LDP X3, X4, [X19 + 0x128]
	0x01D04170 LDR X8, [X8 + 0x98]
	0x01D04174 MOV X2, X0
	0x01D04178 MOV X0, X20
	0x01D0417C MOV W1, W21
	0x01D04180 LDR X6, [X8]
	0x01D04184 MOV W5, W31
	0x01D04188 MOV X7, X31
	0x01D0418C BL 0x1CB94E4
	0x01D04190 LDR W8, [X19 + 0xC4]
	0x01D04194 ADD W8, W8, 0x1
	0x01D04198 STR W8, [X19 + 0xC4]
	0x01D0419C B 0x1D041B0
	0x01D041A0 MOV X0, X31
	0x01D041A4 BL 0x3AA481C
	0x01D041A8 FADD S0, S8, S0
	0x01D041AC STR S0, [X19 + 0xD0]
	0x01D041B0 MOV X0, X19
	0x01D041B4 BL 0x1D02D9C
	0x01D041B8 CBNZ W0, 0x1D04204
	0x01D041BC MOV X0, X31
	0x01D041C0 BL 0x3AA47CC
	0x01D041C4 LDR V1, [X19 + 0x100]
	0x01D041C8 LDR V2, [X19 + 0xE4]
	0x01D041CC FSUB S0, S0, S1
	0x01D041D0 FCMP S0, S2
	0x01D041D4 B.LT 0x1D04204
	0x01D041D8 LDR X0, [X19 + 0x98]
	0x01D041DC CBZ X0, 0x1D044A0
	0x01D041E0 MOVZ W1, 0x1
	0x01D041E4 BL 0x1D02EA4
	0x01D041E8 LDR X0, [X19 + 0x98]
	0x01D041EC CBZ X0, 0x1D044A0
	0x01D041F0 LDR V0, [X19 + 0xD8]
	0x01D041F4 BL 0x1D044A4
	0x01D041F8 MOVZ W1, 0x2
	0x01D041FC MOV X0, X19
	0x01D04200 BL 0x1D02DFC
	0x01D04204 MOV X0, X19
	0x01D04208 BL 0x1D02D9C
	0x01D0420C CBZ W0, 0x1D03FD8
	0x01D04210 LDR X0, [X19 + 0x108]
	0x01D04214 CBZ X0, 0x1D044A0
	0x01D04218 MOV X1, X31
	0x01D0421C BL 0x3A9B084
	0x01D04220 CBZ X0, 0x1D044A0
	0x01D04224 MOV X1, X31
	0x01D04228 BL 0x3AA7658
	0x01D0422C MOV X0, X19
	0x01D04230 MOV X1, X31
	0x01D04234 MOV V8.16B, V0.16B
	0x01D04238 MOV V9.16B, V1.16B
	0x01D0423C MOV V10.16B, V2.16B
	0x01D04240 BL 0x3A9B084
	0x01D04244 CBZ X0, 0x1D044A0
	0x01D04248 MOV X1, X31
	0x01D0424C BL 0x3AA7658
	0x01D04250 FSUB S0, S8, S0
	0x01D04254 FSUB S1, S9, S1
	0x01D04258 FSUB S2, S10, S2
	0x01D0425C MOV X0, X31
	0x01D04260 BL 0x1CC086C
	0x01D04264 ADRP X20, 0x251F000
	0x01D04268 LDRB W8, [X20 + 0x441]
	0x01D0426C MOV V8.16B, V0.16B
	0x01D04270 MOV V9.16B, V1.16B
	0x01D04274 MOV V10.16B, V2.16B
	0x01D04278 CBNZ W8, 0x1D04290
	0x01D0427C ADRP X0, 0x2249000
	0x01D04280 LDR X0, [X0 + 0x488]
	0x01D04284 BL 0x1B6E7F0
	0x01D04288 MOVZ W8, 0x1
	0x01D0428C STRB W8, [X20 + 0x441]
	0x01D04290 LDR X0, [X23]
	0x01D04294 LDR W8, [X0 + 0xE0]
	0x01D04298 CBNZ W8, 0x1D042A0
	0x01D0429C BL 0x1B6E8F8
	0x01D042A0 FMUL S0, S8, S8
	0x01D042A4 FMUL S1, S9, S9
	0x01D042A8 ADRP X8, 0xFFFFFFFFFEDA5000
	0x01D042AC FADD S0, S0, S1
	0x01D042B0 LDR V1, [X8 + 0xB64]
	0x01D042B4 FMUL S2, S10, S10
	0x01D042B8 FADD S0, S2, S0
	0x01D042BC FSQRT S0, S0
	0x01D042C0 FCMP S0, S1
	0x01D042C4 B.LE 0x1D042D8
	0x01D042C8 FDIV S8, S8, S0
	0x01D042CC FDIV S9, S9, S0
	0x01D042D0 FDIV S10, S10, S0
	0x01D042D4 B 0x1D04310
	0x01D042D8 ADRP X20, 0x251F000
	0x01D042DC LDRB W8, [X20 + 0x43F]
	0x01D042E0 CBNZ W8, 0x1D042F8
	0x01D042E4 ADRP X0, 0x2249000
	0x01D042E8 LDR X0, [X0 + 0x480]
	0x01D042EC BL 0x1B6E7F0
	0x01D042F0 MOVZ W8, 0x1
	0x01D042F4 STRB W8, [X20 + 0x43F]
	0x01D042F8 ADRP X8, 0x2249000
	0x01D042FC LDR X8, [X8 + 0x480]
	0x01D04300 LDR X8, [X8]
	0x01D04304 LDR X8, [X8 + 0xB8]
	0x01D04308 LDP S8, S9, [X8]
	0x01D0430C LDR V10, [X8 + 0x8]
	0x01D04310 MOV X0, X19
	0x01D04314 MOV X1, X31
	0x01D04318 BL 0x3A9B084
	0x01D0431C MOV X20, X0
	0x01D04320 MOV V0.16B, V8.16B
	0x01D04324 MOV V1.16B, V9.16B
	0x01D04328 MOV V2.16B, V10.16B
	0x01D0432C MOV X0, X31
	0x01D04330 BL 0x3A92C2C
	0x01D04334 CBZ X20, 0x1D044A0
	0x01D04338 MOV X0, X20
	0x01D0433C MOV X1, X31
	0x01D04340 BL 0x3AA7878
	0x01D04344 LDR X0, [X19 + 0x108]
	0x01D04348 CBZ X0, 0x1D044A0
	0x01D0434C LDR X20, [X19 + 0x90]
	0x01D04350 MOV X1, X31
	0x01D04354 BL 0x3A9B084
	0x01D04358 CBZ X0, 0x1D044A0
	0x01D0435C MOV X1, X31
	0x01D04360 BL 0x3AA7658
	0x01D04364 CBZ X20, 0x1D044A0
	0x01D04368 MOV X0, X20
	0x01D0436C MOV X1, X31
	0x01D04370 BL 0x3A4A810
	0x01D04374 LDR V11, [X19 + 0xFC]
	0x01D04378 MOV X0, X19
	0x01D0437C MOV X1, X31
	0x01D04380 BL 0x3A9B084
	0x01D04384 CBZ X0, 0x1D044A0
	0x01D04388 MOV X1, X31
	0x01D0438C BL 0x3AA7658
	0x01D04390 LDP S12, S13, [X19 + 0xEC]
	0x01D04394 LDRB W8, [X22 + 0x506]
	0x01D04398 LDR V14, [X19 + 0xF4]
	0x01D0439C MOV V8.16B, V0.16B
	0x01D043A0 MOV V9.16B, V1.16B
	0x01D043A4 MOV V10.16B, V2.16B
	0x01D043A8 CBNZ W8, 0x1D043C0
	0x01D043AC ADRP X0, 0x2249000
	0x01D043B0 LDR X0, [X0 + 0x488]
	0x01D043B4 BL 0x1B6E7F0
	0x01D043B8 MOVZ W8, 0x1
	0x01D043BC STRB W8, [X22 + 0x506]
	0x01D043C0 LDR X0, [X23]
	0x01D043C4 FSUB S12, S8, S12
	0x01D043C8 FSUB S9, S9, S13
	0x01D043CC FSUB S8, S10, S14
	0x01D043D0 LDR W8, [X0 + 0xE0]
	0x01D043D4 CBNZ W8, 0x1D043DC
	0x01D043D8 BL 0x1B6E8F8
	0x01D043DC FMUL S0, S12, S12
	0x01D043E0 FMUL S1, S9, S9
	0x01D043E4 FADD S0, S0, S1
	0x01D043E8 FMUL S1, S8, S8
	0x01D043EC FADD S0, S1, S0
	0x01D043F0 FSQRT S0, S0
	0x01D043F4 FADD S0, S11, S0
	0x01D043F8 MOV X0, X19
	0x01D043FC MOV X1, X31
	0x01D04400 STR S0, [X19 + 0xFC]
	0x01D04404 BL 0x3A9B084
	0x01D04408 CBZ X0, 0x1D044A0
	0x01D0440C MOV X1, X31
	0x01D04410 BL 0x3AA7658
	0x01D04414 LDR V3, [X19 + 0xFC]
	0x01D04418 LDR V4, [X19 + 0xE0]
	0x01D0441C STP S0, S1, [X19 + 0xEC]
	0x01D04420 STR S2, [X19 + 0xF4]
	0x01D04424 FCMP S3, S4
	0x01D04428 B.LT 0x1D03FD8
	0x01D0442C LDR X0, [X19 + 0x98]
	0x01D04430 CBZ X0, 0x1D044A0
	0x01D04434 MOV W1, W31
	0x01D04438 BL 0x1D02EA4
	0x01D0443C MOV X0, X19
	0x01D04440 MOV W1, W31
	0x01D04444 BL 0x1D02DFC
	0x01D04448 MOV X0, X31
	0x01D0444C STR W31, [X19 + 0xFC]
	0x01D04450 BL 0x3AA47CC
	0x01D04454 LDR X20, [X19 + 0x90]
	0x01D04458 STR S0, [X19 + 0x100]
	0x01D0445C CBZ X20, 0x1D044A0
	0x01D04460 MOV X0, X20
	0x01D04464 MOV X1, X31
	0x01D04468 BL 0x3A9B084
	0x01D0446C CBZ X0, 0x1D044A0
	0x01D04470 MOV X1, X31
	0x01D04474 BL 0x3AA7658
	0x01D04478 MOV X0, X20
	0x01D0447C LDP X20, X19, [X31 + 0x60]
	0x01D04480 LDP X22, X21, [X31 + 0x50]
	0x01D04484 LDP X30, X23, [X31 + 0x40]
	0x01D04488 LDP D9, D8, [X31 + 0x30]
	0x01D0448C LDP D11, D10, [X31 + 0x20]
	0x01D04490 LDP D13, D12, [X31 + 0x10]
	0x01D04494 MOV X1, X31
	0x01D04498 LDR V14, [X31], #0x70
	0x01D0449C B 0x3A4A810
	0x01D044A0 BL 0x1B6EA1C
	0x01D044A4 STR D8, [X31 - 0x30]!
	0x01D044A8 STP X30, X21, [X31 + 0x10]
	0x01D044AC STP X20, X19, [X31 + 0x20]
	0x01D044B0 ADRP X21, 0x251F000
	0x01D044B4 ADRP X20, 0x224D000
	0x01D044B8 LDRB W8, [X21 + 0x74F]
	0x01D044BC LDR X20, [X20 + 0x90]
	0x01D044C0 MOV V8.16B, V0.16B
	0x01D044C4 MOV X19, X0
	0x01D044C8 TBNZ X8, 0x0, 0x1D044E0
	0x01D044CC ADRP X0, 0x224D000
	0x01D044D0 LDR X0, [X0 + 0x90]
	0x01D044D4 BL 0x1B6E7F0
	0x01D044D8 MOVZ W8, 0x1
	0x01D044DC STRB W8, [X21 + 0x74F]
	0x01D044E0 LDR X0, [X20]
	0x01D044E4 LDR X19, [X19 + 0x20]
	0x01D044E8 LDR W8, [X0 + 0xE0]
	0x01D044EC CBNZ W8, 0x1D044F4
	0x01D044F0 BL 0x1B6E8F8
	0x01D044F4 CBZ X19, 0x1D04520
	0x01D044F8 LDR X8, [X20]
	0x01D044FC MOV X0, X19
	0x01D04500 LDP X20, X19, [X31 + 0x20]
	0x01D04504 LDP X30, X21, [X31 + 0x10]
	0x01D04508 LDR X8, [X8 + 0xB8]
	0x01D0450C MOV V0.16B, V8.16B
	0x01D04510 MOV X2, X31
	0x01D04514 LDR W1, [X8 + 0x4]
	0x01D04518 LDR V8, [X31], #0x30
	0x01D0451C B 0x3A5EDB8
	0x01D04520 BL 0x1B6EA1C
	0x01D04524 STP X30, X19, [X31 - 0x10]!
	0x01D04528 MOV X19, X0
	0x01D0452C BL 0x1D02D9C
	0x01D04530 CMP W0, 0x2
	0x01D04534 B.EQ 0x1D04560
	0x01D04538 CMP W0, 0x1
	0x01D0453C B.EQ 0x1D04570
	0x01D04540 CBNZ W0, 0x1D04584
	0x01D04544 LDR X8, [X19 + 0x98]
	0x01D04548 CBZ X8, 0x1D0458C
	0x01D0454C LDR X0, [X8 + 0x30]
	0x01D04550 CBZ X0, 0x1D0458C
	0x01D04554 MOV X1, X31
	0x01D04558 LDP X30, X19, [X31], #0x10
	0x01D0455C B 0x3A65A98
	0x01D04560 LDR X0, [X19 + 0x98]
	0x01D04564 CBZ X0, 0x1D0458C
	0x01D04568 LDR X1, [X0 + 0x48]
	0x01D0456C B 0x1D0457C
	0x01D04570 LDR X0, [X19 + 0x98]
	0x01D04574 CBZ X0, 0x1D0458C
	0x01D04578 LDR X1, [X0 + 0x40]
	0x01D0457C LDP X30, X19, [X31], #0x10
	0x01D04580 B 0x1D068CC
	0x01D04584 LDP X30, X19, [X31], #0x10
	0x01D04588 RET
	0x01D0458C BL 0x1B6EA1C
	0x01D04590 STR X30, [X31 - 0x10]!
	0x01D04594 LDR X0, [X0 + 0x30]
	0x01D04598 CBZ X0, 0x1D045A8
	0x01D0459C MOV X1, X31
	0x01D045A0 LDR X30, [X31], #0x10
	0x01D045A4 B 0x3A65A98
	0x01D045A8 BL 0x1B6EA1C
	0x01D045AC LDR X1, [X0 + 0x40]
	0x01D045B0 B 0x1D068CC
	0x01D045B4 LDR X1, [X0 + 0x48]
	0x01D045B8 B 0x1D068CC
	0x01D045BC STR D10, [X31 - 0x30]!
	0x01D045C0 STP D9, D8, [X31 + 0x10]
	0x01D045C4 STP X30, X19, [X31 + 0x20]
	0x01D045C8 MOV X19, X0
	0x01D045CC FMOV S0, 1
	0x01D045D0 FMOV S1, W31
	0x01D045D4 FMOV S2, W31
	0x01D045D8 FMOV S3, 1
	0x01D045DC MOV X0, X31
	0x01D045E0 BL 0x3A75B14
	0x01D045E4 LDR X0, [X19 + 0xA0]
	0x01D045E8 CBZ X0, 0x1D0468C
	0x01D045EC MOV X1, X31
	0x01D045F0 BL 0x3AA7658
	0x01D045F4 LDR X0, [X19 + 0xA0]
	0x01D045F8 CBZ X0, 0x1D0468C
	0x01D045FC MOV X1, X31
	0x01D04600 MOV V8.16B, V0.16B
	0x01D04604 MOV V9.16B, V1.16B
	0x01D04608 MOV V10.16B, V2.16B
	0x01D0460C BL 0x3AA7AD0
	0x01D04610 LDR V3, [X19 + 0xB8]
	0x01D04614 FMOV S4, 0.75
	0x01D04618 MOV X0, X31
	0x01D0461C FMUL S0, S0, S3
	0x01D04620 FMUL S1, S1, S3
	0x01D04624 FMUL S2, S2, S3
	0x01D04628 FMUL S0, S0, S4
	0x01D0462C FMUL S1, S1, S4
	0x01D04630 FMUL S2, S2, S4
	0x01D04634 FADD S0, S8, S0
	0x01D04638 FADD S1, S9, S1
	0x01D0463C FADD S2, S10, S2
	0x01D04640 BL 0x3A7567C
	0x01D04644 ADRP X8, 0xFFFFFFFFFEDA5000
	0x01D04648 ADRP X9, 0xFFFFFFFFFEDA5000
	0x01D0464C LDR V1, [X8 + 0x994]
	0x01D04650 LDR V2, [X9 + 0xA28]
	0x01D04654 FMOV S0, 1
	0x01D04658 FMOV S3, 1
	0x01D0465C MOV X0, X31
	0x01D04660 BL 0x3A75B14
	0x01D04664 LDR X0, [X19 + 0xA8]
	0x01D04668 CBZ X0, 0x1D0468C
	0x01D0466C MOV X1, X31
	0x01D04670 BL 0x3AA7658
	0x01D04674 LDR V3, [X19 + 0xBC]
	0x01D04678 LDP X30, X19, [X31 + 0x20]
	0x01D0467C LDP D9, D8, [X31 + 0x10]
	0x01D04680 MOV X0, X31
	0x01D04684 LDR V10, [X31], #0x30
	0x01D04688 B 0x3A7567C
	0x01D0468C BL 0x1B6EA1C
	0x01D04690 STP X30, X19, [X31 - 0x10]!
	0x01D04694 LDR X8, [X0 + 0x38]
	0x01D04698 CBZ X8, 0x1D046F4
	0x01D0469C LDR W8, [X8 + 0x180]
	0x01D046A0 CMP W8, 0x2
	0x01D046A4 B.NE 0x1D046EC
	0x01D046A8 MOV X19, X0
	0x01D046AC LDR X0, [X0 + 0x40]
	0x01D046B0 CBZ X0, 0x1D046EC
	0x01D046B4 LDRB W8, [X0 + 0x60]
	0x01D046B8 TBNZ X8, 0x1, 0x1D046EC
	0x01D046BC MOV X1, X31
	0x01D046C0 BL 0x1D9E780
	0x01D046C4 TBZ X0, 0x0, 0x1D046EC
	0x01D046C8 MOV X0, X19
	0x01D046CC MOV W1, W31
	0x01D046D0 BL 0x1D02DFC
	0x01D046D4 LDR X0, [X19 + 0x98]
	0x01D046D8 STR W31, [X19 + 0x80]
	0x01D046DC CBZ X0, 0x1D046F4
	0x01D046E0 MOV W1, W31
	0x01D046E4 LDP X30, X19, [X31], #0x10
	0x01D046E8 B 0x1D02EA4
	0x01D046EC LDP X30, X19, [X31], #0x10
	0x01D046F0 RET
	0x01D046F4 BL 0x1B6EA1C
	0x01D046F8 STR X30, [X31 - 0x30]!
	0x01D046FC STP X22, X21, [X31 + 0x10]
	0x01D04700 STP X20, X19, [X31 + 0x20]
	0x01D04704 ADRP X22, 0x251F000
	0x01D04708 ADRP X21, 0x224C000
	0x01D0470C ADRP X20, 0x224C000
	0x01D04710 LDRB W8, [X22 + 0x73F]
	0x01D04714 LDR X21, [X21 + 0x2B0]
	0x01D04718 LDR X20, [X20 + 0x2A8]
	0x01D0471C MOV X19, X0
	0x01D04720 TBNZ X8, 0x0, 0x1D04744
	0x01D04724 ADRP X0, 0x224C000
	0x01D04728 LDR X0, [X0 + 0x2A8]
	0x01D0472C BL 0x1B6E7F0
	0x01D04730 ADRP X0, 0x224C000
	0x01D04734 LDR X0, [X0 + 0x2B0]
	0x01D04738 BL 0x1B6E7F0
	0x01D0473C MOVZ W8, 0x1
	0x01D04740 STRB W8, [X22 + 0x73F]
	0x01D04744 ADRP X8, 0xFFFFFFFFFEDA8000
	0x01D04748 ADRP X10, 0xFFFFFFFFFEDA9000
	0x01D0474C ADRP X11, 0xFFFFFFFFFEDA6000
	0x01D04750 LDR V0, [X8 + 0xF90]
	0x01D04754 LDR V1, [X10 + 0x148]
	0x01D04758 LDR V2, [X11 + 0x6F]
	0x01D0475C MOVZ W9, 0x32
	0x01D04760 MOVZ W12, 0x40A00000
	0x01D04764 STR W9, [X19 + 0xC0]
	0x01D04768 STR D0, [X19 + 0xB8]
	0x01D0476C STR D1, [X19 + 0xC8]
	0x01D04770 STUR V2, [X19 + 0xD4]
	0x01D04774 STR W12, [X19 + 0xE4]
	0x01D04778 LDR X0, [X21]
	0x01D0477C BL 0x1B6EA0C
	0x01D04780 LDR X1, [X20]
	0x01D04784 MOV X20, X0
	0x01D04788 BL 0x2E45D4C
	0x01D0478C STR X20, [X19 + 0x110]
	0x01D04790 MOV X0, X19
	0x01D04794 LDP X20, X19, [X31 + 0x20]
	0x01D04798 LDP X22, X21, [X31 + 0x10]
	0x01D0479C MOV X1, X31
	0x01D047A0 LDR X30, [X31], #0x30
	0x01D047A4 B 0x1D661D8
	0x01D047A8 LDR W1, [X0 + 0xE8]
	0x01D047AC B 0x1D02DFC
	0x01D047B0 STP X30, X19, [X31 - 0x10]!
	0x01D047B4 MOV X19, X0
	0x01D047B8 BL 0x1D02D9C
	0x01D047BC STR W0, [X19 + 0xE8]
	0x01D047C0 LDP X30, X19, [X31], #0x10
	0x01D047C4 RET
	0x01D047C8 STP X30, X19, [X31 - 0x10]!
	0x01D047CC LDR X8, [X0 + 0x50]
	0x01D047D0 CBZ X8, 0x1D047E0
	0x01D047D4 LDR W0, [X8]
	0x01D047D8 LDP X30, X19, [X31], #0x10
	0x01D047DC RET
	0x01D047E0 ADRP X0, 0x2249000
	0x01D047E4 LDR X0, [X0 + 0x490]
	0x01D047E8 BL 0x1B6E804
	0x01D047EC BL 0x1B6EA0C
	0x01D047F0 MOV X19, X0
	0x01D047F4 ADRP X0, 0x224D000
	0x01D047F8 LDR X0, [X0 + 0xA0]
	0x01D047FC BL 0x1B6E804
	0x01D04800 MOV X1, X0
	0x01D04804 MOV X0, X19
	0x01D04808 MOV X2, X31
	0x01D0480C BL 0x31E7550
	0x01D04810 ADRP X0, 0x224D000
	0x01D04814 LDR X0, [X0 + 0xA8]
	0x01D04818 BL 0x1B6E804
	0x01D0481C MOV X1, X0
	0x01D04820 MOV X0, X19
	0x01D04824 BL 0x1B6E8E8
	0x01D04828 STP X30, X19, [X31 - 0x10]!
	0x01D0482C LDR X8, [X0 + 0x50]
	0x01D04830 CBZ X8, 0x1D04840
	0x01D04834 STR W1, [X8]
	0x01D04838 LDP X30, X19, [X31], #0x10
	0x01D0483C RET
	0x01D04840 ADRP X0, 0x2249000
	0x01D04844 LDR X0, [X0 + 0x490]
	0x01D04848 BL 0x1B6E804
	0x01D0484C BL 0x1B6EA0C
	0x01D04850 MOV X19, X0
	0x01D04854 ADRP X0, 0x224D000
	0x01D04858 LDR X0, [X0 + 0xA0]
	0x01D0485C BL 0x1B6E804
	0x01D04860 MOV X1, X0
	0x01D04864 MOV X0, X19
	0x01D04868 MOV X2, X31
	0x01D0486C BL 0x31E7550
	0x01D04870 ADRP X0, 0x224D000
	0x01D04874 LDR X0, [X0 + 0xB0]
	0x01D04878 BL 0x1B6E804
	0x01D0487C MOV X1, X0
	0x01D04880 MOV X0, X19
	0x01D04884 BL 0x1B6E8E8
	0x01D04888 STP X30, X19, [X31 - 0x10]!
	0x01D0488C MOV X19, X0
	0x01D04890 LDR X0, [X0 + 0x98]
	0x01D04894 STR W31, [X19 + 0x80]
	0x01D04898 CBZ X0, 0x1D048CC
	0x01D0489C MOV W1, W31
	0x01D048A0 BL 0x1D02EA4
	0x01D048A4 MOV X0, X19
	0x01D048A8 MOV X1, X31
	0x01D048AC BL 0x3A9B084
	0x01D048B0 CBZ X0, 0x1D048CC
	0x01D048B4 MOV X1, X31
	0x01D048B8 BL 0x3AA7658
	0x01D048BC STP S0, S1, [X19 + 0xE0]
	0x01D048C0 STR S2, [X19 + 0xE8]
	0x01D048C4 LDP X30, X19, [X31], #0x10
	0x01D048C8 RET
	0x01D048CC BL 0x1B6EA1C
	0x01D048D0 SUB X31, X31, 0x70
	0x01D048D4 STP D11, D10, [X31 + 0x10]
	0x01D048D8 STP D9, D8, [X31 + 0x20]
	0x01D048DC STR X30, [X31 + 0x30]
	0x01D048E0 STP X24, X23, [X31 + 0x40]
	0x01D048E4 STP X22, X21, [X31 + 0x50]
	0x01D048E8 STP X20, X19, [X31 + 0x60]
	0x01D048EC ADRP X20, 0x251F000
	0x01D048F0 LDRB W8, [X20 + 0x740]
	0x01D048F4 MOV X19, X0
	0x01D048F8 TBNZ X8, 0x0, 0x1D0491C
	0x01D048FC ADRP X0, 0x224B000
	0x01D04900 LDR X0, [X0 + 0x7B0]
	0x01D04904 BL 0x1B6E7F0
	0x01D04908 ADRP X0, 0x2249000
	0x01D0490C LDR X0, [X0 + 0x4C0]
	0x01D04910 BL 0x1B6E7F0
	0x01D04914 MOVZ W8, 0x1
	0x01D04918 STRB W8, [X20 + 0x740]
	0x01D0491C STR X31, [X31 + 0x38]
	0x01D04920 STR X31, [X31 + 0x8]
	0x01D04924 LDR X0, [X19 + 0x40]
	0x01D04928 CBZ X0, 0x1D04C9C
	0x01D0492C MOV X1, X31
	0x01D04930 BL 0x1D9E780
	0x01D04934 TBZ X0, 0x0, 0x1D04C7C
	0x01D04938 LDR W8, [X19 + 0x80]
	0x01D0493C CBZ W8, 0x1D04AD4
	0x01D04940 SUB W9, W8, 0x1
	0x01D04944 CMP W9, 0x1
	0x01D04948 B.HI 0x1D04C50
	0x01D0494C LDR X0, [X19 + 0xA0]
	0x01D04950 CBZ X0, 0x1D04C9C
	0x01D04954 MOV X1, X31
	0x01D04958 BL 0x3AA7658
	0x01D0495C LDR W0, [X19 + 0xB0]
	0x01D04960 LDR V10, [X19 + 0xB4]
	0x01D04964 MOV X1, X31
	0x01D04968 MOV V8.16B, V0.16B
	0x01D0496C MOV V9.16B, V1.16B
	0x01D04970 MOV V11.16B, V2.16B
	0x01D04974 BL 0x3A9DE68
	0x01D04978 ADRP X8, 0x2249000
	0x01D0497C LDR X8, [X8 + 0x4C0]
	0x01D04980 MOV W20, W0
	0x01D04984 LDR X8, [X8]
	0x01D04988 LDR W9, [X8 + 0xE0]
	0x01D0498C CBNZ W9, 0x1D04998
	0x01D04990 MOV X0, X8
	0x01D04994 BL 0x1B6E8F8
	0x01D04998 MOV V0.16B, V8.16B
	0x01D0499C MOV V1.16B, V9.16B
	0x01D049A0 MOV V2.16B, V11.16B
	0x01D049A4 MOV V3.16B, V10.16B
	0x01D049A8 MOV W0, W20
	0x01D049AC MOV X1, X31
	0x01D049B0 BL 0x3AF52EC
	0x01D049B4 CBZ X0, 0x1D04C9C
	0x01D049B8 LDR X8, [X0 + 0x18]
	0x01D049BC MOV X20, X0
	0x01D049C0 CBZ X8, 0x1D04BB0
	0x01D049C4 CMP W8, 0x1
	0x01D049C8 B.LT 0x1D04C48
	0x01D049CC ADRP X9, 0xFFFFFFFFFEDA5000
	0x01D049D0 ADRP X23, 0x224B000
	0x01D049D4 LDR V8, [X9 + 0xCE8]
	0x01D049D8 LDR X23, [X23 + 0x7B0]
	0x01D049DC MOV X21, X31
	0x01D049E0 ADD X22, X20, 0x20
	0x01D049E4 MOVZ W24, 0x2
	0x01D049E8 CMP W21, W8
	0x01D049EC B.CS 0x1D04CA0
	0x01D049F0 LDR X0, [X22, X21, LSL #3]
	0x01D049F4 CBZ X0, 0x1D04C9C
	0x01D049F8 MOV X1, X31
	0x01D049FC BL 0x3A9B0C0
	0x01D04A00 CBZ X0, 0x1D04C9C
	0x01D04A04 LDR X2, [X23]
	0x01D04A08 ADD X1, X31, 0x8
	0x01D04A0C BL 0x20D02D0
	0x01D04A10 TBZ X0, 0x0, 0x1D04AC0
	0x01D04A14 LDR X0, [X31 + 0x8]
	0x01D04A18 STR X0, [X19 + 0xF8]
	0x01D04A1C CBZ X0, 0x1D04C9C
	0x01D04A20 MOV X1, X31
	0x01D04A24 BL 0x1CB61C4
	0x01D04A28 FCMP S0, S8
	0x01D04A2C B.LE 0x1D04AC0
	0x01D04A30 LDR X0, [X19 + 0xF8]
	0x01D04A34 CBZ X0, 0x1D04C9C
	0x01D04A38 MOV X1, X31
	0x01D04A3C BL 0x3A9B084
	0x01D04A40 CBZ X0, 0x1D04C9C
	0x01D04A44 MOV X1, X31
	0x01D04A48 BL 0x3AA7658
	0x01D04A4C LDR X0, [X19 + 0x98]
	0x01D04A50 STR S0, [X19 + 0x100]
	0x01D04A54 STR S1, [X19 + 0x104]
	0x01D04A58 STR S2, [X19 + 0x108]
	0x01D04A5C STR W24, [X19 + 0x80]
	0x01D04A60 STR X31, [X19 + 0xF0]
	0x01D04A64 CBZ X0, 0x1D04C9C
	0x01D04A68 MOVZ W1, 0x1
	0x01D04A6C BL 0x1D02EA4
	0x01D04A70 MOVZ W1, 0x2
	0x01D04A74 MOV X0, X19
	0x01D04A78 BL 0x1D04828
	0x01D04A7C LDR X0, [X19 + 0x90]
	0x01D04A80 CBZ X0, 0x1D04C9C
	0x01D04A84 MOVZ W1, 0x1
	0x01D04A88 MOV X2, X31
	0x01D04A8C BL 0x3A4AD28
	0x01D04A90 LDR X0, [X19 + 0x90]
	0x01D04A94 CBZ X0, 0x1D04C9C
	0x01D04A98 LDR V0, [X19 + 0xD0]
	0x01D04A9C MOV X1, X31
	0x01D04AA0 BL 0x3A4AC4C
	0x01D04AA4 LDR X0, [X19 + 0x90]
	0x01D04AA8 CBZ X0, 0x1D04C9C
	0x01D04AAC LDR V2, [X19 + 0x108]
	0x01D04AB0 LDR V1, [X19 + 0x104]
	0x01D04AB4 LDR V0, [X19 + 0x100]
	0x01D04AB8 MOV X1, X31
	0x01D04ABC BL 0x3A4A810
	0x01D04AC0 LDR W8, [X20 + 0x18]
	0x01D04AC4 ADD X21, X21, 0x1
	0x01D04AC8 CMP W21, W8
	0x01D04ACC B.LT 0x1D049E8
	0x01D04AD0 B 0x1D04C48
	0x01D04AD4 LDR X0, [X19 + 0xA8]
	0x01D04AD8 CBZ X0, 0x1D04C9C
	0x01D04ADC MOV X1, X31
	0x01D04AE0 BL 0x3AA7658
	0x01D04AE4 LDR W0, [X19 + 0xB0]
	0x01D04AE8 LDR V10, [X19 + 0xB8]
	0x01D04AEC MOV X1, X31
	0x01D04AF0 MOV V8.16B, V0.16B
	0x01D04AF4 MOV V9.16B, V1.16B
	0x01D04AF8 MOV V11.16B, V2.16B
	0x01D04AFC BL 0x3A9DE68
	0x01D04B00 ADRP X8, 0x2249000
	0x01D04B04 LDR X8, [X8 + 0x4C0]
	0x01D04B08 MOV W20, W0
	0x01D04B0C LDR X8, [X8]
	0x01D04B10 LDR W9, [X8 + 0xE0]
	0x01D04B14 CBNZ W9, 0x1D04B20
	0x01D04B18 MOV X0, X8
	0x01D04B1C BL 0x1B6E8F8
	0x01D04B20 MOV V0.16B, V8.16B
	0x01D04B24 MOV V1.16B, V9.16B
	0x01D04B28 MOV V2.16B, V11.16B
	0x01D04B2C MOV V3.16B, V10.16B
	0x01D04B30 MOV W0, W20
	0x01D04B34 MOV X1, X31
	0x01D04B38 BL 0x3AF52EC
	0x01D04B3C CBZ X0, 0x1D04C9C
	0x01D04B40 LDR X8, [X0 + 0x18]
	0x01D04B44 MOV X20, X0
	0x01D04B48 CBZ X8, 0x1D04C48
	0x01D04B4C LDR W9, [X19 + 0x80]

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+128], D15
	003 Move [X31+136], D14
	004 Move [X31+144], D13
	005 Move [X31+152], D12
	006 Move [X31+160], D11
	007 Move [X31+168], D10
	008 Move [X31+176], D9
	009 Move [X31+184], D8
	010 Move [X31+192], X29
	011 Move [X31+200], X30
	012 Move [X31+208], X28
	013 Move [X31+216], X27
	014 Move [X31+224], X26
	015 Move [X31+232], X25
	016 Move [X31+240], X24
	017 Move [X31+248], X23
	018 Move [X31+256], X22
	019 Move [X31+264], X21
	020 Move [X31+272], X20
	021 Move [X31+280], X19
	022 Move X20, 0x2521000
	023 Move W8, [X20+1853]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {64}
	029 Move X0, 0x224E000
	030 Move X0, [X0+760]
	031 Call 0x1B6F7F0
	032 Move X0, 0x224D000
	033 Move X0, [X0+3496]
	034 Call 0x1B6F7F0
	035 Move X0, 0x224D000
	036 Move X0, [X0+3504]
	037 Call 0x1B6F7F0
	038 Move X0, 0x224D000
	039 Move X0, [X0+3512]
	040 Call 0x1B6F7F0
	041 Move X0, 0x224E000
	042 Move X0, [X0+672]
	043 Call 0x1B6F7F0
	044 Move X0, 0x224E000
	045 Move X0, [X0+936]
	046 Call 0x1B6F7F0
	047 Move X0, 0x224D000
	048 Move X0, [X0+3520]
	049 Call 0x1B6F7F0
	050 Move X0, 0x224D000
	051 Move X0, [X0+3632]
	052 Call 0x1B6F7F0
	053 Move X0, 0x224B000
	054 Move X0, [X0+1144]
	055 Call 0x1B6F7F0
	056 Move X0, 0x224B000
	057 Move X0, [X0+1216]
	058 Call 0x1B6F7F0
	059 Move X0, 0x224D000
	060 Move X0, [X0+720]
	061 Call 0x1B6F7F0
	062 Move W8, 1
	063 Move [X20+1853], W8
	064 NotImplemented "Instruction MOVI not yet implemented."
	065 Move X0, X19
	066 Move X1, X31
	067 Move [X31+112], X31
	068 Move [X31+120], X31
	069 Move [X31+96], X31
	070 Move [X31+104], X31
	071 Move [X31+76], V0
	072 Move [X31+48], V0
	073 Move [X31+56], V0
	074 Call NetworkBehaviour.FixedUpdateNetwork, X0
	075 Move X0, [X19+64]
	076 Compare X0, 0
	077 JumpIfEqual {772}
	078 Move X1, X31
	079 Call NetworkObject.get_HasStateAuthority, X0
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {750}
	084 Move W8, [X19+128]
	085 Compare W8, 0
	086 JumpIfEqual {628}
	087 Subtract W9, W8, 1
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X0, [X19+160]
	090 Compare X0, 0
	091 JumpIfEqual {772}
	092 Move X1, X31
	093 Call Transform.get_position, X0
	094 Move X0, [X19+160]
	095 Compare X0, 0
	096 JumpIfEqual {772}
	097 Move X1, X31
	098 Move V9, V0
	099 Move V10, V1
	100 Move V11, V2
	101 Call Transform.get_forward, X0
	102 Move V8, [X19+184]
	103 Move W0, [X19+176]
	104 Move S3, 0.75
	105 Move X1, X31
	106 Multiply S0, S0, S8
	107 Multiply S1, S1, S8
	108 Multiply S2, S2, S8
	109 Multiply S0, S0, S3
	110 Multiply S1, S1, S3
	111 Multiply S2, S2, S3
	112 Add S9, S9, S0
	113 Add S10, S10, S1
	114 Add S11, S11, S2
	115 Call LayerMask.op_Implicit, X0
	116 Move X26, 0x224A000
	117 Move X26, [X26+1216]
	118 Move W20, W0
	119 Move X8, [X26]
	120 Move W9, [X8+224]
	121 Compare W9, 0
	122 JumpIfNotEqual {125}
	123 Move X0, X8
	124 Call 0x1B6F8F8
	125 Move W1, 2
	126 Move V0, V9
	127 Move V1, V10
	128 Move V2, V11
	129 Move V3, V8
	130 Move W0, W20
	131 Move X2, X31
	132 Call Physics.OverlapSphere, X0, V0, X1, X2
	133 Compare X0, 0
	134 JumpIfEqual {772}
	135 Move X8, [X0+24]
	136 Move X20, X0
	137 Compare X8, 0
	138 JumpIfEqual {669}
	139 Move X9, [X19+272]
	140 Compare X9, 0
	141 JumpIfEqual {772}
	142 Move W2, [X9+24]
	143 Move W10, [X9+28]
	144 Add W10, W10, 1
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move [X9+24], W31
	147 Move [X9+28], W10
	148 Move X0, [X9+16]
	149 Move W1, W31
	150 Move X3, X31
	151 Call Array.Clear, X0, X1, X2
	152 Move X8, [X20+24]
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Move X25, 0x224D000
	155 Move X27, 0x224A000
	156 Move X28, 0x224D000
	157 Move X25, [X25+760]
	158 Move X27, [X27+1144]
	159 Move X28, [X28+672]
	160 Move X23, X31
	161 Add X24, X20, 32
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move X0, [X24]
	164 Compare X0, 0
	165 JumpIfEqual {772}
	166 Move X2, [X25]
	167 Add X1, X31, 120
	168 Call 0x2091EE4, X0, X1
	169 Move TEMP, X0
	170 And TEMP, TEMP, 1
	171 Compare TEMP, 1
	172 JumpIfNotEqual {210}
	173 Move X0, [X27]
	174 Move X21, [X31+120]
	175 Move X22, [X19+264]
	176 Move W8, [X0+224]
	177 Compare W8, 0
	178 JumpIfNotEqual {180}
	179 Call 0x1B6F8F8
	180 Move X0, X21
	181 Move X1, X22
	182 Move X2, X31
	183 Call Object.op_Equality, X0, X1
	184 Move TEMP, X0
	185 And TEMP, TEMP, 1
	186 Compare TEMP, 1
	187 JumpIfEqual {213}
	188 Move X0, [X19+272]
	189 Compare X0, 0
	190 JumpIfEqual {772}
	191 Move W10, [X0+28]
	192 Move X1, [X31+120]
	193 Move X8, [X0+16]
	194 Move X9, [X28]
	195 Add W10, W10, 1
	196 Move [X0+28], W10
	197 Compare X8, 0
	198 JumpIfEqual {772}
	199 NotImplemented "Instruction LDRSW not yet implemented."
	200 Move W11, [X8+24]
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Add W9, W10, 1
	203 Add X8, X8, X10
	204 Move [X0+24], W9
	205 Move [X8+32], X1
	206 Move X8, [X9+32]
	207 Move X8, [X8+192]
	208 Move X2, [X8+112]
	209 Call List`1<Object>.AddWithResize, X0, X1
	210 Move W8, [X20+24]
	211 Add X23, X23, 1
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move X25, 0x224A000
	214 Move X25, [X25+1144]
	215 Move X20, [X19+264]
	216 Move X0, [X25]
	217 Move W8, [X0+224]
	218 Compare W8, 0
	219 JumpIfNotEqual {221}
	220 Call 0x1B6F8F8
	221 Move X0, X20
	222 Move X1, X31
	223 Move X2, X31
	224 Call Object.op_Equality, X0, X1
	225 Move TEMP, X0
	226 And TEMP, TEMP, 1
	227 Compare TEMP, 1
	228 JumpIfNotEqual {702}
	229 Move X0, [X19+272]
	230 Compare X0, 0
	231 JumpIfEqual {772}
	232 Move W8, [X0+24]
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Move X8, 0x224C000
	235 Move X8, [X8+3520]
	236 Move X1, [X8]
	237 Add X8, X31, 24
	238 Call List`1<Object>.GetEnumerator, X0
	239 Move X9, -19243008
	240 Move V1, [X9+2916]
	241 Move X27, 0x224C000
	242 Move X20, 0x224A000
	243 Move X9, -19243008
	244 NotImplemented "Instruction LDUR not yet implemented."
	245 Move X8, [X31+40]
	246 Move X27, [X27+3504]
	247 Move X20, [X20+1160]
	248 Move [X31+8], S1
	249 Move V1, [X9+3616]
	250 Move X28, 0x2520000
	251 Move [X31+6], V0
	252 Move [X31+112], X8
	253 Move [X31+12], S1
	254 Move X1, [X27]
	255 Add X0, X31, 96
	256 Call Enumerator<Object>.MoveNext, X0
	257 Move TEMP, X0
	258 And TEMP, TEMP, 1
	259 Compare TEMP, 1
	260 JumpIfNotEqual {697}
	261 Move X22, [X31+112]
	262 Compare X22, 0
	263 JumpIfEqual {779}
	264 Move X0, X22
	265 Move X1, X31
	266 Call Component.get_transform, X0
	267 Compare X0, 0
	268 JumpIfEqual {780}
	269 Move X1, X31
	270 Call Transform.get_position, X0
	271 Move [X31+20], S0
	272 Move X0, [X19+160]
	273 Compare X0, 0
	274 JumpIfEqual {777}
	275 Move V9, V1
	276 Move V10, V2
	277 Move X1, X31
	278 Call Transform.get_position, X0
	279 Move W8, [X28+1088]
	280 Move V11, V0
	281 Move V12, V1
	282 Move V13, V2
	283 Compare W8, 0
	284 JumpIfNotEqual {289}
	285 Move X0, X20
	286 Call 0x1B6F7F0
	287 Move W8, 1
	288 Move [X28+1088], W8
	289 Move X0, [X20]
	290 Move W8, [X0+224]
	291 Compare W8, 0
	292 JumpIfNotEqual {294}
	293 Call 0x1B6F8F8
	294 Move X0, [X19+160]
	295 Compare X0, 0
	296 JumpIfEqual {778}
	297 Move X1, X31
	298 Call Transform.get_position, X0
	299 Move W0, [X19+180]
	300 Move V14, V0
	301 Move V15, V1
	302 Move V8, V2
	303 Move X1, X31
	304 Call LayerMask.op_Implicit, X0
	305 Move W23, W0
	306 Move X0, [X26]
	307 Move W8, [X0+224]
	308 Compare W8, 0
	309 JumpIfNotEqual {311}
	310 Call 0x1B6F8F8
	311 Move V0, [X31+20]
	312 Subtract S1, S9, S12
	313 Subtract S2, S10, S13
	314 Multiply S4, S1, S1
	315 Subtract S0, S0, S11
	316 Multiply S3, S0, S0
	317 Multiply S5, S2, S2
	318 Add S3, S3, S4
	319 Add S3, S5, S3
	320 NotImplemented "Instruction FSQRT not yet implemented."
	321 NotImplemented "Instruction FDIV not yet implemented."
	322 NotImplemented "Instruction FDIV not yet implemented."
	323 NotImplemented "Instruction FDIV not yet implemented."
	324 Add X0, X31, 48
	325 Move V0, V14
	326 Move V1, V15
	327 Move V2, V8
	328 Move V3, V9
	329 Move V4, V10
	330 Move V5, V11
	331 Move W1, W23
	332 Move X2, X31
	333 Move [X31+16], S6
	334 Call Physics.Raycast, X0, X1, X2, V0, X3
	335 Move TEMP, X0
	336 And TEMP, TEMP, 1
	337 Compare TEMP, 1
	338 JumpIfNotEqual {696}
	339 Move X0, [X25]
	340 Move X23, [X19+264]
	341 Move W8, [X0+224]
	342 Compare W8, 0
	343 JumpIfNotEqual {345}
	344 Call 0x1B6F8F8
	345 Move X0, X23
	346 Move X1, X31
	347 Move X2, X31
	348 Call Object.op_Equality, X0, X1
	349 Move TEMP, X0
	350 And TEMP, TEMP, 1
	351 Compare TEMP, 1
	352 JumpIfNotEqual {614}
	353 Move X8, 0x2520000
	354 Move W8, [X8+1090]
	355 Compare W8, 0
	356 JumpIfNotEqual {363}
	357 Move X0, 0x224A000
	358 Move X0, [X0+1152]
	359 Call 0x1B6F7F0
	360 Move W8, 1
	361 Move X9, 0x2520000
	362 Move [X9+1090], W8
	363 Move X8, 0x224A000
	364 Move X8, [X8+1152]
	365 Move X9, 0x2520000
	366 Move W9, [X9+1089]
	367 Move X8, [X8]
	368 Move X8, [X8+184]
	369 Move S8, [X8+24]
	370 Move S12, [X8+28]
	371 Move V13, [X8+32]
	372 Compare W9, 0
	373 JumpIfNotEqual {379}
	374 Move X0, X20
	375 Call 0x1B6F7F0
	376 Move W8, 1
	377 Move X9, 0x2520000
	378 Move [X9+1089], W8
	379 Move X0, [X20]
	380 Move W8, [X0+224]
	381 Compare W8, 0
	382 JumpIfNotEqual {384}
	383 Call 0x1B6F8F8
	384 Multiply S0, S10, S13
	385 Multiply S1, S11, S12
	386 Multiply S3, S11, S8
	387 Multiply S4, S9, S13
	388 Multiply S5, S9, S12
	389 Multiply S6, S10, S8
	390 Subtract S2, S0, S1
	391 Subtract S1, S3, S4
	392 Subtract S0, S5, S6
	393 Multiply S3, S2, S2
	394 Multiply S4, S1, S1
	395 Add S3, S3, S4
	396 Multiply S4, S0, S0
	397 Add S3, S4, S3
	398 Move V4, [X31+8]
	399 NotImplemented "Instruction FSQRT not yet implemented."
	400 NotImplemented "Instruction FCMP not yet implemented."
	401 NotImplemented "Instruction FDIV not yet implemented."
	402 NotImplemented "Instruction FDIV not yet implemented."
	403 NotImplemented "Instruction FDIV not yet implemented."
	404 Move X8, 0x2520000
	405 Move W8, [X8+1087]
	406 Compare W8, 0
	407 JumpIfNotEqual {414}
	408 Move X0, 0x224A000
	409 Move X0, [X0+1152]
	410 Call 0x1B6F7F0
	411 Move W8, 1
	412 Move X9, 0x2520000
	413 Move [X9+1087], W8
	414 Move X8, 0x224A000
	415 Move X8, [X8+1152]
	416 Move X8, [X8]
	417 Move X8, [X8+184]
	418 Move S11, [X8]
	419 Move S14, [X8+4]
	420 Move V13, [X8+8]
	421 Move X8, 0x224C000
	422 Move X8, [X8+720]
	423 Move X0, [X8]
	424 Move W1, 4
	425 Call 0x1B6F868
	426 Move X23, X0
	427 Move X0, X22
	428 Move X1, X31
	429 Call Component.get_transform, X0
	430 Compare X0, 0
	431 JumpIfEqual {786}
	432 Move X1, X31
	433 Call Transform.get_position, X0
	434 Move X0, [X19+160]
	435 Compare X0, 0
	436 JumpIfEqual {787}
	437 Move V8, V0
	438 Move V9, V1
	439 Move V10, V2
	440 Move X1, X31
	441 Call Transform.get_up, X0
	442 Compare X23, 0
	443 JumpIfEqual {782}
	444 Move W8, [X23+24]
	445 Compare W8, 0
	446 JumpIfEqual {789}
	447 Move S3, 0.5
	448 Multiply S15, S11, S3
	449 Multiply S12, S14, S3
	450 Multiply S5, S13, S3
	451 Move V3, [X31+12]
	452 Add S4, S12, S9
	453 Move [X31+20], S5
	454 Add S5, S5, S10
	455 Multiply S0, S0, S3
	456 Multiply S1, S1, S3
	457 Multiply S2, S2, S3
	458 Add S3, S15, S8
	459 Add S0, S3, S0
	460 Add S1, S4, S1
	461 Add S2, S5, S2
	462 Move [X23+32], S0
	463 Move [X23+40], S1
	464 Move [X23+40], S2
	465 Move X0, X22
	466 Move X1, X31
	467 Call Component.get_transform, X0
	468 Compare X0, 0
	469 JumpIfEqual {788}
	470 Move X1, X31
	471 Call Transform.get_position, X0
	472 Move X0, [X19+160]
	473 Compare X0, 0
	474 JumpIfEqual {785}
	475 Move V8, V0
	476 Move V9, V1
	477 Move V10, V2
	478 Move X1, X31
	479 Call Transform.get_up, X0
	480 Move W8, [X23+24]
	481 NotImplemented "Instruction CMP not yet implemented."
	482 Move V4, V14
	483 Move S3, -0.5
	484 Multiply S14, S11, S3
	485 Multiply S11, S4, S3
	486 Multiply S13, S13, S3
	487 Move V3, [X31+12]
	488 Add S4, S11, S9
	489 Add S5, S13, S10
	490 Multiply S2, S2, S3
	491 Multiply S1, S1, S3
	492 Multiply S0, S0, S3
	493 Add S3, S14, S8
	494 Add S2, S5, S2
	495 Add S1, S4, S1
	496 Add S0, S3, S0
	497 Move [X23+44], S0
	498 Move [X23+52], S1
	499 Move [X23+52], S2
	500 Move X0, X22
	501 Move X1, X31
	502 Call Component.get_transform, X0
	503 Compare X0, 0
	504 JumpIfEqual {791}
	505 Move X1, X31
	506 Call Transform.get_position, X0
	507 Move X0, [X19+160]
	508 Compare X0, 0
	509 JumpIfEqual {783}
	510 Move V8, V0
	511 Move V9, V1
	512 Move V10, V2
	513 Move X1, X31
	514 Call Transform.get_up, X0
	515 Move W8, [X23+24]
	516 NotImplemented "Instruction CMP not yet implemented."
	517 Move V5, [X31+20]
	518 Move V6, [X31+12]
	519 Add S3, S15, S8
	520 Add S4, S12, S9
	521 Add S5, S5, S10
	522 Multiply S2, S2, S6
	523 Multiply S1, S1, S6
	524 Multiply S0, S0, S6
	525 Subtract S2, S5, S2
	526 Subtract S1, S4, S1
	527 Subtract S0, S3, S0
	528 Move [X23+56], S0
	529 Move [X23+64], S1
	530 Move [X23+64], S2
	531 Move X0, X22
	532 Move X1, X31
	533 Call Component.get_transform, X0
	534 Compare X0, 0
	535 JumpIfEqual {784}
	536 Move X1, X31
	537 Call Transform.get_position, X0
	538 Move X0, [X19+160]
	539 Compare X0, 0
	540 JumpIfEqual {790}
	541 Move V8, V0
	542 Move V9, V1
	543 Move V10, V2
	544 Move X1, X31
	545 Call Transform.get_up, X0
	546 Move X8, [X23+24]
	547 NotImplemented "Instruction CMP not yet implemented."
	548 Move V6, [X31+12]
	549 Add S3, S14, S8
	550 Add S4, S11, S9
	551 Add S5, S13, S10
	552 Multiply S2, S2, S6
	553 Multiply S1, S1, S6
	554 Multiply S0, S0, S6
	555 NotImplemented "Instruction CMP not yet implemented."
	556 Subtract S2, S5, S2
	557 Subtract S1, S4, S1
	558 Subtract S0, S3, S0
	559 Move [X23+68], S0
	560 Move [X23+76], S1
	561 Move [X23+76], S2
	562 Move X29, X31
	563 And X8, X8, 0
	564 Add X21, X23, 40
	565 NotImplemented "Instruction CMP not yet implemented."
	566 Move X0, [X19+160]
	567 Compare X0, 0
	568 JumpIfEqual {775}
	569 Move S15, [X21-8]
	570 Move S12, [X21-4]
	571 Move V9, [X21]
	572 Move X1, X31
	573 Call Transform.get_position, X0
	574 Move [X31+20], S0
	575 Move X0, [X19+160]
	576 Compare X0, 0
	577 JumpIfEqual {774}
	578 Move V10, V1
	579 Move V11, V2
	580 Move X1, X31
	581 Call Transform.get_position, X0
	582 Move W0, [X19+180]
	583 Move V8, V0
	584 Move V13, V1
	585 Move V14, V2
	586 Move X1, X31
	587 Call LayerMask.op_Implicit, X0
	588 Move W24, W0
	589 Move X0, [X26]
	590 Move W8, [X0+224]
	591 Compare W8, 0
	592 JumpIfNotEqual {594}
	593 Call 0x1B6F8F8
	594 Subtract S3, S15, S8
	595 Subtract S4, S12, S13
	596 Subtract S5, S9, S14
	597 Move S6, [X31+16]
	598 Move S0, [X31+20]
	599 Add X0, X31, 48
	600 Move V1, V10
	601 Move V2, V11
	602 Move W1, W24
	603 Move X2, X31
	604 Call Physics.Raycast, X0, X1, X2, V0, X3
	605 Move TEMP, X0
	606 And TEMP, TEMP, 1
	607 Compare TEMP, 1
	608 JumpIfNotEqual {613}
	609 Move W8, [X23+24]
	610 Add X29, X29, 1
	611 Add X21, X21, 12
	612 NotImplemented "Instruction CMP not yet implemented."
	613 Move [X19+264], X22
	614 Move X0, [X25]
	615 Move X22, [X19+264]
	616 Move W8, [X0+224]
	617 Compare W8, 0
	618 JumpIfNotEqual {620}
	619 Call 0x1B6F8F8
	620 Move X0, X22
	621 Move X1, X31
	622 Move X2, X31
	623 Call Object.op_Inequality, X0, X1
	624 Move TEMP, X0
	625 And TEMP, TEMP, 1
	626 Compare TEMP, 1
	627 JumpIfNotEqual {254}
	628 Move X0, [X19+168]
	629 Compare X0, 0
	630 JumpIfEqual {772}
	631 Move X1, X31
	632 Call Transform.get_position, X0
	633 Move W0, [X19+176]
	634 Move V10, [X19+188]
	635 Move X1, X31
	636 Move V8, V0
	637 Move V9, V1
	638 Move V11, V2
	639 Call LayerMask.op_Implicit, X0
	640 Move X8, 0x224A000
	641 Move X8, [X8+1216]
	642 Move W20, W0
	643 Move X8, [X8]
	644 Move W9, [X8+224]
	645 Compare W9, 0
	646 JumpIfNotEqual {649}
	647 Move X0, X8
	648 Call 0x1B6F8F8
	649 Move V0, V8
	650 Move V1, V9
	651 Move V2, V11
	652 Move V3, V10
	653 Move W0, W20
	654 Move X1, X31
	655 Call Physics.OverlapSphere, X0, V0, X1
	656 Compare X0, 0
	657 JumpIfEqual {772}
	658 Move X8, [X0+24]
	659 Compare X8, 0
	660 JumpIfEqual {741}
	661 Move W8, [X19+128]
	662 NotImplemented "Instruction CMP not yet implemented."
	663 Move X0, [X19+152]
	664 Move W8, 1
	665 Move [X19+128], W8
	666 Compare X0, 0
	667 JumpIfEqual {772}
	668 Call MobView.PlaySoundNotice, X0
	669 Move W8, [X19+128]
	670 Move [X19+264], X31
	671 NotImplemented "Instruction CMP not yet implemented."
	672 Move X8, [X19+280]
	673 Move W9, 1
	674 Move [X19+128], W9
	675 Compare X8, 0
	676 JumpIfEqual {772}
	677 NotImplemented "Instruction LDRSW not yet implemented."
	678 Move W10, [X8+24]
	679 NotImplemented "Instruction CMP not yet implemented."
	680 Add X8, X8, X9
	681 Move X0, [X8+32]
	682 Compare X0, 0
	683 JumpIfEqual {772}
	684 Move X20, [X19+144]
	685 Move X1, X31
	686 Call Transform.get_position, X0
	687 Compare X20, 0
	688 JumpIfEqual {772}
	689 Move X0, X20
	690 Move X1, X31
	691 Call NavMeshAgent.SetDestination, X0, X1
	692 Move X0, [X19+144]
	693 Compare X0, 0
	694 JumpIfEqual {772}
	695 Move V0, [X19+212]
	696 Move [X19+264], X22
	697 Move X8, 0x224C000
	698 Move X8, [X8+3496]
	699 Add X0, X31, 96
	700 Move X1, [X8]
	701 Call Enumerator<Object>.Dispose, X0
	702 Move X0, [X25]
	703 Move X20, [X19+264]
	704 Move W8, [X0+224]
	705 Compare W8, 0
	706 JumpIfNotEqual {708}
	707 Call 0x1B6F8F8
	708 Move X0, X20
	709 Move X1, X31
	710 Move X2, X31
	711 Call Object.op_Inequality, X0, X1
	712 Move TEMP, X0
	713 And TEMP, TEMP, 1
	714 Compare TEMP, 1
	715 JumpIfNotEqual {741}
	716 Move W8, [X19+128]
	717 NotImplemented "Instruction CMP not yet implemented."
	718 Move W8, 2
	719 Move X0, X31
	720 Move [X19+196], W31
	721 Move [X19+128], W8
	722 Move [X19+252], W31
	723 Call Time.get_time
	724 Move V1, [X19+228]
	725 Move X0, [X19+152]
	726 Subtract S0, S0, S1
	727 Move [X19+256], S0
	728 Compare X0, 0
	729 JumpIfEqual {772}
	730 Move W1, W31
	731 Call MobView.SetWalk, X0, X1
	732 Move X0, X19
	733 Move W1, W31
	734 Call MobController.set_MoveStatus, X0, X1
	735 Move X0, [X19+144]
	736 Compare X0, 0
	737 JumpIfEqual {772}
	738 Move V0, [X19+216]
	739 Move X1, X31
	740 Call NavMeshAgent.set_speed, X0, V0
	741 Move W8, [X19+128]
	742 Compare W8, 0
	743 JumpIfEqual {746}
	744 NotImplemented "Instruction CMP not yet implemented."
	745 NotImplemented "Instruction CMP not yet implemented."
	746 Move X0, X19
	747 Call MobController.UpdatePatrol, X0
	748 Move X0, X19
	749 Call MobController.UpdateAttack, X0
	750 Move X20, [X31+272]
	751 Move X19, [X31+280]
	752 Move X22, [X31+256]
	753 Move X21, [X31+264]
	754 Move X24, [X31+240]
	755 Move X23, [X31+248]
	756 Move X26, [X31+224]
	757 Move X25, [X31+232]
	758 Move X28, [X31+208]
	759 Move X27, [X31+216]
	760 Move X29, [X31+192]
	761 Move X30, [X31+200]
	762 Move D9, [X31+176]
	763 Move D8, [X31+184]
	764 Move D11, [X31+160]
	765 Move D10, [X31+168]
	766 Move D13, [X31+144]
	767 Move D12, [X31+152]
	768 Move D15, [X31+128]
	769 Move D14, [X31+136]
	770 Add X31, X31, 288
	771 Return 
	772 Call 0x1B6FA1C
	773 Call 0x1B6FA24
	774 Call 0x1B6FA1C
	775 Call 0x1B6FA1C
	776 Call 0x1B6FA24
	777 Call 0x1B6FA1C
	778 Call 0x1B6FA1C
	779 Call 0x1B6FA1C
	780 Call 0x1B6FA1C
	781 Call 0x1B6FA24
	782 Call 0x1B6FA1C
	783 Call 0x1B6FA1C
	784 Call 0x1B6FA1C
	785 Call 0x1B6FA1C
	786 Call 0x1B6FA1C
	787 Call 0x1B6FA1C
	788 Call 0x1B6FA1C
	789 Call 0x1B6FA24
	790 Call 0x1B6FA1C
	791 Call 0x1B6FA1C
	792 Call 0x1B6FA24
	793 Call 0x1B6FA24
	794 Move X20, X0
	795 NotImplemented "Instruction CMP not yet implemented."
	796 Move X0, X20
	797 Call 0x3D1A840
	798 Move X21, [X0]
	799 Call 0x3D1A850
	800 Move X8, 0x224C000
	801 Move X8, [X8+3496]
	802 Add X0, X31, 96
	803 Move X1, [X8]
	804 Call Enumerator<Object>.Dispose, X0
	805 Compare X21, 0
	806 JumpIfEqual {702}
	807 Move X0, X21
	808 Call 0x1B6FA14
	809 Move X21, X31
	810 Move X20, X0
	811 Move X8, 0x224C000
	812 Move X8, [X8+3496]
	813 Move X1, [X8]
	814 Add X0, X31, 96
	815 Call Enumerator<Object>.Dispose, X0
	816 Compare X21, 0
	817 JumpIfNotEqual {820}
	818 Move X0, X20
	819 Call 0x1C8518C
	820 Move X0, X21
	821 Call 0x1B6FA14
	822 Call 0x18F56A8

Method: System.Void UpdatePatrol()

Disassembly:
	0x01D04B90 ADD X1, X31, 0x38
	0x01D04B94 BL 0x20D02D0
	0x01D04B98 TBNZ X0, 0x0, 0x1D04C2C
	0x01D04B9C LDR W8, [X20 + 0x18]
	0x01D04BA0 ADD X21, X21, 0x1
	0x01D04BA4 CMP W21, W8
	0x01D04BA8 B.LT 0x1D04B70
	0x01D04BAC B 0x1D04C48
	0x01D04BB0 LDR W8, [X19 + 0x80]
	0x01D04BB4 STR X31, [X19 + 0xF8]
	0x01D04BB8 CMP W8, 0x2
	0x01D04BBC B.NE 0x1D04C4C
	0x01D04BC0 LDR X0, [X19 + 0x98]
	0x01D04BC4 MOVZ W8, 0x1
	0x01D04BC8 STR W8, [X19 + 0x80]
	0x01D04BCC STR X31, [X19 + 0xF0]
	0x01D04BD0 CBZ X0, 0x1D04C9C
	0x01D04BD4 MOV W1, W31
	0x01D04BD8 BL 0x1D02EA4
	0x01D04BDC MOV X0, X19
	0x01D04BE0 MOV W1, W31
	0x01D04BE4 BL 0x1D04828
	0x01D04BE8 LDR X0, [X19 + 0x90]
	0x01D04BEC CBZ X0, 0x1D04C9C
	0x01D04BF0 LDR V0, [X19 + 0xD0]
	0x01D04BF4 MOV X1, X31
	0x01D04BF8 BL 0x3A4AC4C
	0x01D04BFC LDR X20, [X19 + 0x90]
	0x01D04C00 MOV X0, X19
	0x01D04C04 MOV X1, X31
	0x01D04C08 BL 0x3A9B084
	0x01D04C0C CBZ X0, 0x1D04C9C
	0x01D04C10 MOV X1, X31
	0x01D04C14 BL 0x3AA7658
	0x01D04C18 CBZ X20, 0x1D04C9C
	0x01D04C1C MOV X0, X20
	0x01D04C20 MOV X1, X31
	0x01D04C24 BL 0x3A4A810
	0x01D04C28 B 0x1D04C48
	0x01D04C2C LDR X8, [X31 + 0x38]
	0x01D04C30 LDR X0, [X19 + 0x98]
	0x01D04C34 MOVZ W9, 0x1
	0x01D04C38 STR W9, [X19 + 0x80]
	0x01D04C3C STR X8, [X19 + 0xF8]
	0x01D04C40 CBZ X0, 0x1D04C9C
	0x01D04C44 BL 0x1D03B50
	0x01D04C48 LDR W8, [X19 + 0x80]
	0x01D04C4C CBZ W8, 0x1D04C60
	0x01D04C50 CMP W8, 0x2
	0x01D04C54 B.EQ 0x1D04C6C
	0x01D04C58 CMP W8, 0x1
	0x01D04C5C B.NE 0x1D04C74
	0x01D04C60 MOV X0, X19
	0x01D04C64 BL 0x1D04CA4
	0x01D04C68 B 0x1D04C74
	0x01D04C6C MOV X0, X19
	0x01D04C70 BL 0x1D05034
	0x01D04C74 MOV X0, X19
	0x01D04C78 BL 0x1D05564
	0x01D04C7C LDP X20, X19, [X31 + 0x60]
	0x01D04C80 LDP X22, X21, [X31 + 0x50]
	0x01D04C84 LDP X24, X23, [X31 + 0x40]
	0x01D04C88 LDR X30, [X31 + 0x30]
	0x01D04C8C LDP D9, D8, [X31 + 0x20]
	0x01D04C90 LDP D11, D10, [X31 + 0x10]
	0x01D04C94 ADD X31, X31, 0x70
	0x01D04C98 RET
	0x01D04C9C BL 0x1B6EA1C
	0x01D04CA0 BL 0x1B6EA24
	0x01D04CA4 STR D14, [X31 - 0x60]!
	0x01D04CA8 STP D13, D12, [X31 + 0x8]
	0x01D04CAC STP D11, D10, [X31 + 0x18]
	0x01D04CB0 STP D9, D8, [X31 + 0x28]
	0x01D04CB4 STR X30, [X31 + 0x38]
	0x01D04CB8 STP X22, X21, [X31 + 0x40]
	0x01D04CBC STP X20, X19, [X31 + 0x50]
	0x01D04CC0 LDR X8, [X0 + 0x110]
	0x01D04CC4 CBZ X8, 0x1D0502C
	0x01D04CC8 LDR X8, [X8 + 0x18]
	0x01D04CCC CBZ X8, 0x1D0500C
	0x01D04CD0 MOV X19, X0
	0x01D04CD4 LDR X0, [X0 + 0x90]
	0x01D04CD8 CBZ X0, 0x1D0502C
	0x01D04CDC MOV X1, X31
	0x01D04CE0 BL 0x3A9B084
	0x01D04CE4 CBZ X0, 0x1D0502C
	0x01D04CE8 MOV X1, X31
	0x01D04CEC BL 0x3AA7658
	0x01D04CF0 MOV X0, X31
	0x01D04CF4 BL 0x1CC086C
	0x01D04CF8 LDR X8, [X19 + 0x110]
	0x01D04CFC CBZ X8, 0x1D0502C
	0x01D04D00 LDRSW X9, [X19 + 0x118]
	0x01D04D04 LDR W10, [X8 + 0x18]
	0x01D04D08 CMP W9, W10
	0x01D04D0C B.CS 0x1D05030
	0x01D04D10 ADD X8, X8, X9, 0x3, LSL
	0x01D04D14 LDR X0, [X8 + 0x20]
	0x01D04D18 CBZ X0, 0x1D0502C
	0x01D04D1C MOV X1, X31
	0x01D04D20 MOV V8.16B, V0.16B
	0x01D04D24 MOV V9.16B, V1.16B
	0x01D04D28 MOV V10.16B, V2.16B
	0x01D04D2C BL 0x3AA7658
	0x01D04D30 MOV X0, X31
	0x01D04D34 BL 0x1CC086C
	0x01D04D38 ADRP X21, 0x251F000
	0x01D04D3C LDRB W8, [X21 + 0x506]
	0x01D04D40 MOV V11.16B, V0.16B
	0x01D04D44 MOV V12.16B, V1.16B
	0x01D04D48 MOV V13.16B, V2.16B
	0x01D04D4C CBNZ W8, 0x1D04D64
	0x01D04D50 ADRP X0, 0x2249000
	0x01D04D54 LDR X0, [X0 + 0x488]
	0x01D04D58 BL 0x1B6E7F0
	0x01D04D5C MOVZ W8, 0x1
	0x01D04D60 STRB W8, [X21 + 0x506]
	0x01D04D64 ADRP X22, 0x2249000
	0x01D04D68 LDR X22, [X22 + 0x488]
	0x01D04D6C FSUB S11, S8, S11
	0x01D04D70 FSUB S9, S9, S12
	0x01D04D74 FSUB S8, S10, S13
	0x01D04D78 LDR X0, [X22]
	0x01D04D7C LDR W8, [X0 + 0xE0]
	0x01D04D80 CBNZ W8, 0x1D04D88
	0x01D04D84 BL 0x1B6E8F8
	0x01D04D88 FMUL S0, S11, S11
	0x01D04D8C FMUL S1, S9, S9
	0x01D04D90 ADRP X8, 0xFFFFFFFFFEDA5000
	0x01D04D94 FADD S0, S0, S1
	0x01D04D98 LDR V1, [X8 + 0xAB0]
	0x01D04D9C FMUL S2, S8, S8
	0x01D04DA0 FADD S0, S2, S0
	0x01D04DA4 FSQRT S0, S0
	0x01D04DA8 FCMP S0, S1
	0x01D04DAC B.PL 0x1D04E40
	0x01D04DB0 LDR W8, [X19 + 0x118]
	0x01D04DB4 LDR X9, [X19 + 0x110]
	0x01D04DB8 ADD W8, W8, 0x1
	0x01D04DBC STR W8, [X19 + 0x118]
	0x01D04DC0 CBZ X9, 0x1D0502C
	0x01D04DC4 LDR W9, [X9 + 0x18]
	0x01D04DC8 CMP W8, W9
	0x01D04DCC B.LT 0x1D04DD4
	0x01D04DD0 STR W31, [X19 + 0x118]
	0x01D04DD4 LDR X0, [X19 + 0x98]
	0x01D04DD8 CBZ X0, 0x1D0502C
	0x01D04DDC MOV W1, W31
	0x01D04DE0 BL 0x1D02EA4
	0x01D04DE4 MOV X0, X19
	0x01D04DE8 MOV W1, W31
	0x01D04DEC BL 0x1D04828
	0x01D04DF0 LDR X0, [X19 + 0x90]
	0x01D04DF4 CBZ X0, 0x1D0502C
	0x01D04DF8 MOVZ W1, 0x1
	0x01D04DFC MOV X2, X31
	0x01D04E00 BL 0x3A4AD28
	0x01D04E04 LDR X20, [X19 + 0x90]
	0x01D04E08 CBZ X20, 0x1D0502C
	0x01D04E0C MOV X0, X20
	0x01D04E10 MOV X1, X31
	0x01D04E14 BL 0x3A9B084
	0x01D04E18 CBZ X0, 0x1D0502C
	0x01D04E1C MOV X1, X31
	0x01D04E20 BL 0x3AA7658
	0x01D04E24 MOV X0, X20
	0x01D04E28 MOV X1, X31
	0x01D04E2C BL 0x3A4A810
	0x01D04E30 LDR V8, [X19 + 0xDC]
	0x01D04E34 STR W31, [X19 + 0xEC]
	0x01D04E38 STR S8, [X19 + 0xF4]
	0x01D04E3C B 0x1D04E44
	0x01D04E40 LDR V8, [X19 + 0xF4]
	0x01D04E44 FCMP S8, 0x0
	0x01D04E48 B.LE 0x1D04E5C
	0x01D04E4C MOV X0, X31
	0x01D04E50 BL 0x3AA481C
	0x01D04E54 FSUB S0, S8, S0
	0x01D04E58 B 0x1D05008
	0x01D04E5C LDR X0, [X19 + 0x98]
	0x01D04E60 CBZ X0, 0x1D0502C
	0x01D04E64 BL 0x1D05728
	0x01D04E68 TBNZ X0, 0x0, 0x1D04EEC
	0x01D04E6C LDR X0, [X19 + 0x98]
	0x01D04E70 CBZ X0, 0x1D0502C
	0x01D04E74 MOVZ W1, 0x1
	0x01D04E78 BL 0x1D02EA4
	0x01D04E7C LDR X0, [X19 + 0x98]
	0x01D04E80 CBZ X0, 0x1D0502C
	0x01D04E84 LDR V0, [X19 + 0xCC]
	0x01D04E88 BL 0x1D044A4
	0x01D04E8C MOVZ W1, 0x1
	0x01D04E90 MOV X0, X19
	0x01D04E94 BL 0x1D04828
	0x01D04E98 LDR X0, [X19 + 0x90]
	0x01D04E9C CBZ X0, 0x1D0502C
	0x01D04EA0 MOVZ W1, 0x1
	0x01D04EA4 MOV X2, X31
	0x01D04EA8 BL 0x3A4AD28
	0x01D04EAC LDR X8, [X19 + 0x110]
	0x01D04EB0 CBZ X8, 0x1D0502C
	0x01D04EB4 LDRSW X9, [X19 + 0x118]
	0x01D04EB8 LDR W10, [X8 + 0x18]
	0x01D04EBC CMP W9, W10
	0x01D04EC0 B.CS 0x1D05030
	0x01D04EC4 ADD X8, X8, X9, 0x3, LSL
	0x01D04EC8 LDR X0, [X8 + 0x20]
	0x01D04ECC CBZ X0, 0x1D0502C
	0x01D04ED0 LDR X20, [X19 + 0x90]
	0x01D04ED4 MOV X1, X31
	0x01D04ED8 BL 0x3AA7658
	0x01D04EDC CBZ X20, 0x1D0502C
	0x01D04EE0 MOV X0, X20
	0x01D04EE4 MOV X1, X31
	0x01D04EE8 BL 0x3A4A810
	0x01D04EEC LDR V11, [X19 + 0xEC]
	0x01D04EF0 MOV X0, X19
	0x01D04EF4 MOV X1, X31
	0x01D04EF8 BL 0x3A9B084
	0x01D04EFC CBZ X0, 0x1D0502C
	0x01D04F00 MOV X1, X31
	0x01D04F04 BL 0x3AA7658
	0x01D04F08 LDP S12, S13, [X19 + 0xE0]
	0x01D04F0C LDRB W8, [X21 + 0x506]
	0x01D04F10 LDR V14, [X19 + 0xE8]
	0x01D04F14 MOV V8.16B, V0.16B
	0x01D04F18 MOV V9.16B, V1.16B
	0x01D04F1C MOV V10.16B, V2.16B
	0x01D04F20 CBNZ W8, 0x1D04F38
	0x01D04F24 ADRP X0, 0x2249000
	0x01D04F28 LDR X0, [X0 + 0x488]

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X8, [X0+280]
	014 Compare X8, 0
	015 JumpIfEqual {264}
	016 Move X8, [X8+24]
	017 Compare X8, 0
	018 JumpIfEqual {251}
	019 Move X19, X0
	020 Move X0, [X0+144]
	021 Compare X0, 0
	022 JumpIfEqual {264}
	023 Move X1, X31
	024 Call Component.get_transform, X0
	025 Compare X0, 0
	026 JumpIfEqual {264}
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X0, X31
	030 Call Extensions.Flatten, X0
	031 Move X8, [X19+280]
	032 Compare X8, 0
	033 JumpIfEqual {264}
	034 NotImplemented "Instruction LDRSW not yet implemented."
	035 Move W10, [X8+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Add X8, X8, X9
	038 Move X0, [X8+32]
	039 Compare X0, 0
	040 JumpIfEqual {264}
	041 Move X1, X31
	042 Move V8, V0
	043 Move V9, V1
	044 Move V10, V2
	045 Call Transform.get_position, X0
	046 Move X0, X31
	047 Call Extensions.Flatten, X0
	048 Move X21, 0x2520000
	049 Move W8, [X21+1286]
	050 Move V11, V0
	051 Move V12, V1
	052 Move V13, V2
	053 Compare W8, 0
	054 JumpIfNotEqual {60}
	055 Move X0, 0x224A000
	056 Move X0, [X0+1160]
	057 Call 0x1B6F7F0
	058 Move W8, 1
	059 Move [X21+1286], W8
	060 Move X22, 0x224A000
	061 Move X22, [X22+1160]
	062 Subtract S11, S8, S11
	063 Subtract S9, S9, S12
	064 Subtract S8, S10, S13
	065 Move X0, [X22]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1B6F8F8
	070 Multiply S0, S11, S11
	071 Multiply S1, S9, S9
	072 Move X8, -19243008
	073 Add S0, S0, S1
	074 Move V1, [X8+3616]
	075 Multiply S2, S8, S8
	076 Add S0, S2, S0
	077 NotImplemented "Instruction FSQRT not yet implemented."
	078 NotImplemented "Instruction FCMP not yet implemented."
	079 Move W8, [X19+288]
	080 Move X9, [X19+280]
	081 Add W8, W8, 1
	082 Move [X19+288], W8
	083 Compare X9, 0
	084 JumpIfEqual {264}
	085 Move W9, [X9+24]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move [X19+288], W31
	088 Move X0, [X19+152]
	089 Compare X0, 0
	090 JumpIfEqual {264}
	091 Move W1, W31
	092 Call MobView.SetWalk, X0, X1
	093 Move X0, X19
	094 Move W1, W31
	095 Call MobController.set_MoveStatus, X0, X1
	096 Move X0, [X19+144]
	097 Compare X0, 0
	098 JumpIfEqual {264}
	099 Move W1, W31
	100 Move X2, X31
	101 Call NavMeshAgent.set_updateRotation, X0, X1
	102 Move X20, [X19+144]
	103 Compare X20, 0
	104 JumpIfEqual {264}
	105 Move X0, X20
	106 Move X1, X31
	107 Call Component.get_transform, X0
	108 Compare X0, 0
	109 JumpIfEqual {264}
	110 Move X1, X31
	111 Call Transform.get_position, X0
	112 Move X0, X20
	113 Move X1, X31
	114 Call NavMeshAgent.SetDestination, X0, X1
	115 Move X0, X31
	116 Move [X19+248], W31
	117 Call Time.get_time
	118 Move V1, [X19+228]
	119 Subtract S0, S0, S1
	120 Move [X19+256], S0
	121 Move X0, X31
	122 Call Time.get_time
	123 Move V1, [X19+256]
	124 Move V2, [X19+228]
	125 Subtract S0, S0, S1
	126 NotImplemented "Instruction FCMP not yet implemented."
	127 Move X0, X19
	128 Call MobController.get_MoveStatus, X0
	129 Compare W0, 0
	130 JumpIfNotEqual {169}
	131 Move X0, [X19+152]
	132 Move [X19+196], W31
	133 Compare X0, 0
	134 JumpIfEqual {264}
	135 Move W1, 1
	136 Call MobView.SetWalk, X0, X1
	137 Move X0, [X19+152]
	138 Compare X0, 0
	139 JumpIfEqual {264}
	140 Move V0, [X19+212]
	141 Call MobView.SetWalkSpeed, X0, V0
	142 Move W1, 1
	143 Move X0, X19
	144 Call MobController.set_MoveStatus, X0, X1
	145 Move X0, [X19+144]
	146 Compare X0, 0
	147 JumpIfEqual {264}
	148 Move W1, 1
	149 Move X2, X31
	150 Call NavMeshAgent.set_updateRotation, X0, X1
	151 Move X8, [X19+280]
	152 Compare X8, 0
	153 JumpIfEqual {264}
	154 NotImplemented "Instruction LDRSW not yet implemented."
	155 Move W10, [X8+24]
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Add X8, X8, X9
	158 Move X0, [X8+32]
	159 Compare X0, 0
	160 JumpIfEqual {264}
	161 Move X20, [X19+144]
	162 Move X1, X31
	163 Call Transform.get_position, X0
	164 Compare X20, 0
	165 JumpIfEqual {264}
	166 Move X0, X20
	167 Move X1, X31
	168 Call NavMeshAgent.SetDestination, X0, X1
	169 Move V11, [X19+248]
	170 Move X0, X19
	171 Move X1, X31
	172 Call Component.get_transform, X0
	173 Compare X0, 0
	174 JumpIfEqual {264}
	175 Move X1, X31
	176 Call Transform.get_position, X0
	177 Move S12, [X19+236]
	178 Move S13, [X19+240]
	179 Move W8, [X21+1286]
	180 Move V14, [X19+244]
	181 Move V8, V0
	182 Move V9, V1
	183 Move V10, V2
	184 Compare W8, 0
	185 JumpIfNotEqual {191}
	186 Move X0, 0x224A000
	187 Move X0, [X0+1160]
	188 Call 0x1B6F7F0
	189 Move W8, 1
	190 Move [X21+1286], W8
	191 Move X0, [X22]
	192 Subtract S12, S8, S12
	193 Subtract S9, S9, S13
	194 Subtract S8, S10, S14
	195 Move W8, [X0+224]
	196 Compare W8, 0
	197 JumpIfNotEqual {199}
	198 Call 0x1B6F8F8
	199 Multiply S0, S12, S12
	200 Multiply S1, S9, S9
	201 Add S0, S0, S1
	202 Multiply S1, S8, S8
	203 Add S0, S1, S0
	204 NotImplemented "Instruction FSQRT not yet implemented."
	205 Add S0, S11, S0
	206 Move X0, X19
	207 Move X1, X31
	208 Move [X19+248], S0
	209 Call Component.get_transform, X0
	210 Compare X0, 0
	211 JumpIfEqual {264}
	212 Move X1, X31
	213 Call Transform.get_position, X0
	214 Move V3, [X19+248]
	215 Move V4, [X19+220]
	216 Move [X19+236], S0
	217 Move [X19+244], S1
	218 Move [X19+244], S2
	219 NotImplemented "Instruction FCMP not yet implemented."
	220 Move X0, [X19+152]
	221 Compare X0, 0
	222 JumpIfEqual {264}
	223 Move W1, W31
	224 Call MobView.SetWalk, X0, X1
	225 Move X0, X19
	226 Move W1, W31
	227 Call MobController.set_MoveStatus, X0, X1
	228 Move X0, [X19+144]
	229 Compare X0, 0
	230 JumpIfEqual {264}
	231 Move W1, W31
	232 Move X2, X31
	233 Call NavMeshAgent.set_updateRotation, X0, X1
	234 Move X20, [X19+144]
	235 Compare X20, 0
	236 JumpIfEqual {264}
	237 Move X0, X20
	238 Move X1, X31
	239 Call Component.get_transform, X0
	240 Compare X0, 0
	241 JumpIfEqual {264}
	242 Move X1, X31
	243 Call Transform.get_position, X0
	244 Move X0, X20
	245 Move X1, X31
	246 Call NavMeshAgent.SetDestination, X0, X1
	247 Move X0, X31
	248 Move [X19+248], W31
	249 Call Time.get_time
	250 Move [X19+256], S0
	251 Move X20, [X31+80]
	252 Move X19, [X31+88]
	253 Move X22, [X31+64]
	254 Move X21, [X31+72]
	255 Move X30, [X31+56]
	256 Move D9, [X31+40]
	257 Move D8, [X31+48]
	258 Move D11, [X31+24]
	259 Move D10, [X31+32]
	260 Move D13, [X31+8]
	261 Move D12, [X31+16]
	262 Move V14, [X31+96]
	263 Return 
	264 Call 0x1B6FA1C
	265 Call 0x1B6FA24

Method: System.Void UpdateAttack()

Disassembly:
	0x01D04F2C BL 0x1B6E7F0
	0x01D04F30 MOVZ W8, 0x1
	0x01D04F34 STRB W8, [X21 + 0x506]
	0x01D04F38 LDR X0, [X22]
	0x01D04F3C FSUB S12, S8, S12
	0x01D04F40 FSUB S9, S9, S13
	0x01D04F44 FSUB S8, S10, S14
	0x01D04F48 LDR W8, [X0 + 0xE0]
	0x01D04F4C CBNZ W8, 0x1D04F54
	0x01D04F50 BL 0x1B6E8F8
	0x01D04F54 FMUL S0, S12, S12
	0x01D04F58 FMUL S1, S9, S9
	0x01D04F5C FADD S0, S0, S1
	0x01D04F60 FMUL S1, S8, S8
	0x01D04F64 FADD S0, S1, S0
	0x01D04F68 FSQRT S0, S0
	0x01D04F6C FADD S0, S11, S0
	0x01D04F70 MOV X0, X19
	0x01D04F74 MOV X1, X31
	0x01D04F78 STR S0, [X19 + 0xEC]
	0x01D04F7C BL 0x3A9B084
	0x01D04F80 CBZ X0, 0x1D0502C
	0x01D04F84 MOV X1, X31
	0x01D04F88 BL 0x3AA7658
	0x01D04F8C LDR V3, [X19 + 0xEC]
	0x01D04F90 LDR V4, [X19 + 0xD4]
	0x01D04F94 STP S0, S1, [X19 + 0xE0]
	0x01D04F98 STR S2, [X19 + 0xE8]
	0x01D04F9C FCMP S3, S4
	0x01D04FA0 B.LT 0x1D0500C
	0x01D04FA4 LDR X0, [X19 + 0x98]
	0x01D04FA8 CBZ X0, 0x1D0502C
	0x01D04FAC MOV W1, W31
	0x01D04FB0 BL 0x1D02EA4
	0x01D04FB4 MOV X0, X19
	0x01D04FB8 MOV W1, W31
	0x01D04FBC BL 0x1D04828
	0x01D04FC0 LDR X0, [X19 + 0x90]
	0x01D04FC4 CBZ X0, 0x1D0502C
	0x01D04FC8 MOVZ W1, 0x1
	0x01D04FCC MOV X2, X31
	0x01D04FD0 BL 0x3A4AD28
	0x01D04FD4 LDR X20, [X19 + 0x90]
	0x01D04FD8 CBZ X20, 0x1D0502C
	0x01D04FDC MOV X0, X20
	0x01D04FE0 MOV X1, X31
	0x01D04FE4 BL 0x3A9B084
	0x01D04FE8 CBZ X0, 0x1D0502C
	0x01D04FEC MOV X1, X31
	0x01D04FF0 BL 0x3AA7658
	0x01D04FF4 MOV X0, X20
	0x01D04FF8 MOV X1, X31
	0x01D04FFC BL 0x3A4A810
	0x01D05000 LDR V0, [X19 + 0xDC]
	0x01D05004 STR W31, [X19 + 0xEC]
	0x01D05008 STR S0, [X19 + 0xF4]
	0x01D0500C LDP X20, X19, [X31 + 0x50]
	0x01D05010 LDP X22, X21, [X31 + 0x40]
	0x01D05014 LDR X30, [X31 + 0x38]
	0x01D05018 LDP D9, D8, [X31 + 0x28]
	0x01D0501C LDP D11, D10, [X31 + 0x18]
	0x01D05020 LDP D13, D12, [X31 + 0x8]
	0x01D05024 LDR V14, [X31], #0x60
	0x01D05028 RET
	0x01D0502C BL 0x1B6EA1C
	0x01D05030 BL 0x1B6EA24
	0x01D05034 STP D15, D14, [X31 - 0x70]!
	0x01D05038 STP D13, D12, [X31 + 0x10]
	0x01D0503C STP D11, D10, [X31 + 0x20]
	0x01D05040 STP D9, D8, [X31 + 0x30]
	0x01D05044 STR X30, [X31 + 0x40]
	0x01D05048 STP X22, X21, [X31 + 0x50]
	0x01D0504C STP X20, X19, [X31 + 0x60]
	0x01D05050 ADRP X21, 0x251E000
	0x01D05054 ADRP X20, 0x2248000
	0x01D05058 LDRB W8, [X21 + 0x741]
	0x01D0505C LDR X20, [X20 + 0x478]
	0x01D05060 MOV X19, X0
	0x01D05064 TBNZ X8, 0x0, 0x1D0507C
	0x01D05068 ADRP X0, 0x2248000
	0x01D0506C LDR X0, [X0 + 0x478]
	0x01D05070 BL 0x1B6E7F0
	0x01D05074 MOVZ W8, 0x1
	0x01D05078 STRB W8, [X21 + 0x741]
	0x01D0507C LDR X0, [X20]
	0x01D05080 LDR X20, [X19 + 0xF8]
	0x01D05084 LDR W8, [X0 + 0xE0]
	0x01D05088 CBNZ W8, 0x1D05090
	0x01D0508C BL 0x1B6E8F8
	0x01D05090 MOV X0, X20
	0x01D05094 MOV X1, X31
	0x01D05098 MOV X2, X31
	0x01D0509C BL 0x3AA0AF0
	0x01D050A0 TBZ X0, 0x0, 0x1D050B0
	0x01D050A4 MOVZ W8, 0x1
	0x01D050A8 STR W8, [X19 + 0x80]
	0x01D050AC B 0x1D05540
	0x01D050B0 LDR V8, [X19 + 0xF4]
	0x01D050B4 FCMP S8, 0x0
	0x01D050B8 B.PL 0x1D05280
	0x01D050BC MOV X0, X19
	0x01D050C0 MOV X1, X31
	0x01D050C4 BL 0x3A9B084
	0x01D050C8 CBZ X0, 0x1D05560
	0x01D050CC MOV X1, X31
	0x01D050D0 BL 0x3AA7658
	0x01D050D4 MOV X0, X31
	0x01D050D8 BL 0x1CC086C
	0x01D050DC LDR V3, [X19 + 0x108]
	0x01D050E0 MOV V8.16B, V0.16B
	0x01D050E4 MOV V9.16B, V1.16B
	0x01D050E8 LDR V0, [X19 + 0x100]
	0x01D050EC LDR V1, [X19 + 0x104]
	0x01D050F0 MOV V10.16B, V2.16B
	0x01D050F4 MOV V2.16B, V3.16B
	0x01D050F8 MOV X0, X31
	0x01D050FC BL 0x1CC086C
	0x01D05100 ADRP X21, 0x251E000
	0x01D05104 LDRB W8, [X21 + 0x506]
	0x01D05108 MOV V11.16B, V0.16B
	0x01D0510C MOV V12.16B, V1.16B
	0x01D05110 MOV V13.16B, V2.16B
	0x01D05114 CBNZ W8, 0x1D0512C
	0x01D05118 ADRP X0, 0x2248000
	0x01D0511C LDR X0, [X0 + 0x488]
	0x01D05120 BL 0x1B6E7F0
	0x01D05124 MOVZ W8, 0x1
	0x01D05128 STRB W8, [X21 + 0x506]
	0x01D0512C ADRP X22, 0x2248000
	0x01D05130 LDR X22, [X22 + 0x488]
	0x01D05134 FSUB S11, S8, S11
	0x01D05138 FSUB S9, S9, S12
	0x01D0513C FSUB S8, S10, S13
	0x01D05140 LDR X0, [X22]
	0x01D05144 LDR W8, [X0 + 0xE0]
	0x01D05148 CBNZ W8, 0x1D05150
	0x01D0514C BL 0x1B6E8F8
	0x01D05150 ADRP X8, 0xFFFFFFFFFEDA4000
	0x01D05154 FMUL S0, S11, S11
	0x01D05158 FMUL S1, S9, S9
	0x01D0515C LDR V14, [X8 + 0xAB0]
	0x01D05160 FADD S0, S0, S1
	0x01D05164 FMUL S1, S8, S8
	0x01D05168 FADD S0, S1, S0
	0x01D0516C FSQRT S0, S0
	0x01D05170 FCMP S0, S14
	0x01D05174 B.PL 0x1D05198
	0x01D05178 LDR X0, [X19 + 0x90]
	0x01D0517C CBZ X0, 0x1D05560
	0x01D05180 MOVZ W1, 0x1
	0x01D05184 MOV X2, X31
	0x01D05188 MOVZ W20, 0x1
	0x01D0518C BL 0x3A4AD28
	0x01D05190 STP W31, W31, [X19 + 0xEC]
	0x01D05194 STR W20, [X19 + 0x80]
	0x01D05198 LDR X0, [X19 + 0x98]
	0x01D0519C CBZ X0, 0x1D05560
	0x01D051A0 BL 0x1D05728
	0x01D051A4 TBNZ X0, 0x0, 0x1D051D4
	0x01D051A8 LDR X0, [X19 + 0x98]
	0x01D051AC CBZ X0, 0x1D05560
	0x01D051B0 MOVZ W1, 0x1
	0x01D051B4 BL 0x1D02EA4
	0x01D051B8 LDR X0, [X19 + 0x98]
	0x01D051BC CBZ X0, 0x1D05560
	0x01D051C0 LDR V0, [X19 + 0xD0]
	0x01D051C4 BL 0x1D044A4
	0x01D051C8 MOVZ W1, 0x2
	0x01D051CC MOV X0, X19
	0x01D051D0 BL 0x1D04828
	0x01D051D4 LDR V8, [X19 + 0x100]
	0x01D051D8 LDR V9, [X19 + 0x104]
	0x01D051DC LDR V10, [X19 + 0x108]
	0x01D051E0 MOV X0, X19
	0x01D051E4 MOV X1, X31
	0x01D051E8 BL 0x3A9B084
	0x01D051EC CBZ X0, 0x1D05560
	0x01D051F0 MOV X1, X31
	0x01D051F4 BL 0x3AA7658
	0x01D051F8 FSUB S0, S8, S0
	0x01D051FC FSUB S1, S9, S1
	0x01D05200 FSUB S2, S10, S2
	0x01D05204 MOV X0, X31
	0x01D05208 BL 0x1CC086C
	0x01D0520C ADRP X20, 0x251E000
	0x01D05210 LDRB W8, [X20 + 0x441]
	0x01D05214 MOV V8.16B, V0.16B
	0x01D05218 MOV V9.16B, V1.16B
	0x01D0521C MOV V10.16B, V2.16B
	0x01D05220 CBNZ W8, 0x1D05238
	0x01D05224 ADRP X0, 0x2248000
	0x01D05228 LDR X0, [X0 + 0x488]
	0x01D0522C BL 0x1B6E7F0
	0x01D05230 MOVZ W8, 0x1
	0x01D05234 STRB W8, [X20 + 0x441]
	0x01D05238 LDR X0, [X22]
	0x01D0523C LDR W8, [X0 + 0xE0]
	0x01D05240 CBNZ W8, 0x1D05248
	0x01D05244 BL 0x1B6E8F8
	0x01D05248 FMUL S0, S8, S8
	0x01D0524C FMUL S1, S9, S9
	0x01D05250 ADRP X8, 0xFFFFFFFFFEDA4000
	0x01D05254 FADD S0, S0, S1
	0x01D05258 LDR V1, [X8 + 0xB64]
	0x01D0525C FMUL S2, S10, S10
	0x01D05260 FADD S0, S2, S0
	0x01D05264 FSQRT S0, S0
	0x01D05268 FCMP S0, S1
	0x01D0526C B.LE 0x1D05294
	0x01D05270 FDIV S8, S8, S0
	0x01D05274 FDIV S9, S9, S0
	0x01D05278 FDIV S10, S10, S0
	0x01D0527C B 0x1D052CC
	0x01D05280 MOV X0, X31
	0x01D05284 BL 0x3AA481C
	0x01D05288 FSUB S0, S8, S0
	0x01D0528C STR S0, [X19 + 0xF4]
	0x01D05290 B 0x1D05540
	0x01D05294 ADRP X20, 0x251E000
	0x01D05298 LDRB W8, [X20 + 0x43F]
	0x01D0529C CBNZ W8, 0x1D052B4
	0x01D052A0 ADRP X0, 0x2248000
	0x01D052A4 LDR X0, [X0 + 0x480]
	0x01D052A8 BL 0x1B6E7F0
	0x01D052AC MOVZ W8, 0x1
	0x01D052B0 STRB W8, [X20 + 0x43F]
	0x01D052B4 ADRP X8, 0x2248000
	0x01D052B8 LDR X8, [X8 + 0x480]
	0x01D052BC LDR X8, [X8]
	0x01D052C0 LDR X8, [X8 + 0xB8]
	0x01D052C4 LDP S8, S9, [X8]
	0x01D052C8 LDR V10, [X8 + 0x8]
	0x01D052CC MOV X0, X19
	0x01D052D0 MOV X1, X31
	0x01D052D4 BL 0x3A9B084
	0x01D052D8 MOV X20, X0
	0x01D052DC MOV V0.16B, V8.16B
	0x01D052E0 MOV V1.16B, V9.16B
	0x01D052E4 MOV V2.16B, V10.16B
	0x01D052E8 MOV X0, X31
	0x01D052EC BL 0x3A92C2C
	0x01D052F0 CBZ X20, 0x1D05560
	0x01D052F4 MOV X0, X20
	0x01D052F8 MOV X1, X31
	0x01D052FC BL 0x3AA7878
	0x01D05300 LDR X0, [X19 + 0x90]
	0x01D05304 CBZ X0, 0x1D05560
	0x01D05308 LDR V2, [X19 + 0x108]
	0x01D0530C LDR V1, [X19 + 0x104]
	0x01D05310 LDR V0, [X19 + 0x100]
	0x01D05314 MOV X1, X31
	0x01D05318 BL 0x3A4A810
	0x01D0531C LDR V11, [X19 + 0xF0]
	0x01D05320 MOV X0, X19
	0x01D05324 MOV X1, X31
	0x01D05328 BL 0x3A9B084
	0x01D0532C CBZ X0, 0x1D05560
	0x01D05330 MOV X1, X31
	0x01D05334 BL 0x3AA7658
	0x01D05338 LDP S12, S13, [X19 + 0xE0]
	0x01D0533C LDRB W8, [X21 + 0x506]
	0x01D05340 LDR V15, [X19 + 0xE8]
	0x01D05344 MOV V8.16B, V0.16B
	0x01D05348 MOV V9.16B, V1.16B
	0x01D0534C MOV V10.16B, V2.16B
	0x01D05350 CBNZ W8, 0x1D05368
	0x01D05354 ADRP X0, 0x2248000
	0x01D05358 LDR X0, [X0 + 0x488]
	0x01D0535C BL 0x1B6E7F0
	0x01D05360 MOVZ W8, 0x1
	0x01D05364 STRB W8, [X21 + 0x506]
	0x01D05368 LDR X0, [X22]
	0x01D0536C FSUB S12, S8, S12
	0x01D05370 FSUB S9, S9, S13
	0x01D05374 FSUB S8, S10, S15
	0x01D05378 LDR W8, [X0 + 0xE0]
	0x01D0537C CBNZ W8, 0x1D05384
	0x01D05380 BL 0x1B6E8F8
	0x01D05384 FMUL S0, S12, S12
	0x01D05388 FMUL S1, S9, S9
	0x01D0538C FADD S0, S0, S1
	0x01D05390 FMUL S1, S8, S8
	0x01D05394 FADD S0, S1, S0
	0x01D05398 FSQRT S0, S0
	0x01D0539C FADD S0, S11, S0
	0x01D053A0 MOV X0, X19
	0x01D053A4 MOV X1, X31
	0x01D053A8 STR S0, [X19 + 0xF0]
	0x01D053AC BL 0x3A9B084
	0x01D053B0 CBZ X0, 0x1D05560
	0x01D053B4 MOV X1, X31
	0x01D053B8 BL 0x3AA7658
	0x01D053BC LDR V3, [X19 + 0xF0]
	0x01D053C0 LDR V4, [X19 + 0xD8]
	0x01D053C4 STP S0, S1, [X19 + 0xE0]
	0x01D053C8 STR S2, [X19 + 0xE8]
	0x01D053CC FCMP S3, S4
	0x01D053D0 B.LT 0x1D05428
	0x01D053D4 LDR X0, [X19 + 0x98]
	0x01D053D8 CBZ X0, 0x1D05560
	0x01D053DC MOV W1, W31
	0x01D053E0 BL 0x1D02EA4
	0x01D053E4 MOV X0, X19
	0x01D053E8 MOV W1, W31
	0x01D053EC BL 0x1D04828
	0x01D053F0 LDR V0, [X19 + 0xDC]
	0x01D053F4 LDR X20, [X19 + 0x90]
	0x01D053F8 STR W31, [X19 + 0xF0]
	0x01D053FC STR S0, [X19 + 0xF4]
	0x01D05400 CBZ X20, 0x1D05560
	0x01D05404 MOV X0, X20
	0x01D05408 MOV X1, X31
	0x01D0540C BL 0x3A9B084
	0x01D05410 CBZ X0, 0x1D05560
	0x01D05414 MOV X1, X31
	0x01D05418 BL 0x3AA7658
	0x01D0541C MOV X0, X20
	0x01D05420 MOV X1, X31
	0x01D05424 BL 0x3A4A810
	0x01D05428 MOV X0, X19
	0x01D0542C MOV X1, X31
	0x01D05430 BL 0x3A9B084
	0x01D05434 CBZ X0, 0x1D05560
	0x01D05438 MOV X1, X31
	0x01D0543C BL 0x3AA7658
	0x01D05440 MOV X0, X31
	0x01D05444 BL 0x1CC086C
	0x01D05448 LDR V3, [X19 + 0x108]
	0x01D0544C MOV V8.16B, V0.16B
	0x01D05450 MOV V9.16B, V1.16B
	0x01D05454 LDR V0, [X19 + 0x100]
	0x01D05458 LDR V1, [X19 + 0x104]
	0x01D0545C MOV V10.16B, V2.16B
	0x01D05460 MOV V2.16B, V3.16B
	0x01D05464 MOV X0, X31
	0x01D05468 BL 0x1CC086C
	0x01D0546C LDRB W8, [X21 + 0x506]
	0x01D05470 MOV V11.16B, V0.16B
	0x01D05474 MOV V12.16B, V1.16B
	0x01D05478 MOV V13.16B, V2.16B
	0x01D0547C CBNZ W8, 0x1D05494
	0x01D05480 ADRP X0, 0x2248000
	0x01D05484 LDR X0, [X0 + 0x488]
	0x01D05488 BL 0x1B6E7F0
	0x01D0548C MOVZ W8, 0x1
	0x01D05490 STRB W8, [X21 + 0x506]
	0x01D05494 LDR X0, [X22]
	0x01D05498 FSUB S11, S8, S11
	0x01D0549C FSUB S9, S9, S12
	0x01D054A0 FSUB S8, S10, S13

ISIL:
	001 Move [X31-112], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0x2520000
	015 Move X20, 0x224A000
	016 Move W8, [X21+1854]
	017 Move X20, [X20+1144]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0x224A000
	024 Move X0, [X0+1144]
	025 Call 0x1B6F7F0
	026 Move X0, 0x224E000
	027 Move X0, [X0+152]
	028 Call 0x1B6F7F0
	029 Move W8, 1
	030 Move [X21+1854], W8
	031 Move X0, [X20]
	032 Move X20, [X19+264]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1B6F8F8
	037 Move X0, X20
	038 Move X1, X31
	039 Move X2, X31
	040 Call Object.op_Equality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {54}
	045 Move X0, [X19+264]
	046 Compare X0, 0
	047 JumpIfEqual {408}
	048 Move X1, X31
	049 Call NetPlayer.get_isDie, X0
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {75}
	054 Move X0, X19
	055 Move W1, W31
	056 Move [X19+264], X31
	057 Call MobController.set_MoveStatus, X0, X1
	058 Move W8, 1
	059 Move [X19+128], W8
	060 Move [X19+196], W31
	061 Move X20, [X31+96]
	062 Move X19, [X31+104]
	063 Move X22, [X31+80]
	064 Move X21, [X31+88]
	065 Move X30, [X31+64]
	066 Move X23, [X31+72]
	067 Move D9, [X31+48]
	068 Move D8, [X31+56]
	069 Move D11, [X31+32]
	070 Move D10, [X31+40]
	071 Move D13, [X31+16]
	072 Move D12, [X31+24]
	073 Move V14, [X31+112]
	074 Return 
	075 Move X0, X19
	076 Move X1, X31
	077 Call Component.get_transform, X0
	078 Compare X0, 0
	079 JumpIfEqual {408}
	080 Move X1, X31
	081 Call Transform.get_position, X0
	082 Move X0, X31
	083 Call Extensions.Flatten, X0
	084 Move X0, [X19+264]
	085 Compare X0, 0
	086 JumpIfEqual {408}
	087 Move X1, X31
	088 Move V8, V0
	089 Move V9, V1
	090 Move V10, V2
	091 Call Component.get_transform, X0
	092 Compare X0, 0
	093 JumpIfEqual {408}
	094 Move X1, X31
	095 Call Transform.get_position, X0
	096 Move X0, X31
	097 Call Extensions.Flatten, X0
	098 Move X22, 0x251F000
	099 Move W8, [X22+1286]
	100 Move V11, V0
	101 Move V12, V1
	102 Move V13, V2
	103 Compare W8, 0
	104 JumpIfNotEqual {110}
	105 Move X0, 0x2249000
	106 Move X0, [X0+1160]
	107 Call 0x1B6F7F0
	108 Move W8, 1
	109 Move [X22+1286], W8
	110 Move X23, 0x2249000
	111 Move X23, [X23+1160]
	112 Subtract S11, S8, S11
	113 Subtract S9, S9, S12
	114 Subtract S8, S10, S13
	115 Move X0, [X23]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1B6F8F8
	120 Multiply S0, S11, S11
	121 Multiply S1, S9, S9
	122 Multiply S2, S8, S8
	123 Add S0, S0, S1
	124 Add S0, S2, S0
	125 NotImplemented "Instruction FSQRT not yet implemented."
	126 Move S1, 0.5
	127 NotImplemented "Instruction FCMP not yet implemented."
	128 Move X0, X19
	129 Call MobController.get_MoveStatus, X0
	130 Compare W0, 0
	131 JumpIfEqual {159}
	132 Move X0, [X19+152]
	133 Compare X0, 0
	134 JumpIfEqual {408}
	135 Move W1, W31
	136 Call MobView.SetWalk, X0, X1
	137 Move X0, X19
	138 Move W1, W31
	139 Call MobController.set_MoveStatus, X0, X1
	140 Move X0, X31
	141 Move [X19+252], W31
	142 Call Time.get_time
	143 Move X20, [X19+144]
	144 Move S1, -1
	145 Add S0, S0, S1
	146 Move [X19+256], S0
	147 Compare X20, 0
	148 JumpIfEqual {408}
	149 Move X0, X20
	150 Move X1, X31
	151 Call Component.get_transform, X0
	152 Compare X0, 0
	153 JumpIfEqual {408}
	154 Move X1, X31
	155 Call Transform.get_position, X0
	156 Move X0, X20
	157 Move X1, X31
	158 Call NavMeshAgent.SetDestination, X0, X1
	159 Move W8, [X19+196]
	160 Move W9, 204
	161 Move V8, [X19+208]
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move W8, 200
	164 NotImplemented "Instruction CSEL not yet implemented."
	165 Move V0, [X19]
	166 NotImplemented "Instruction FCMP not yet implemented."
	167 Move X20, [X19+264]
	168 Move W21, [X19+192]
	169 Move X0, X19
	170 Move X1, X31
	171 Move [X19+208], W31
	172 Call Component.get_transform, X0
	173 Compare X20, 0
	174 JumpIfEqual {408}
	175 Move X8, 0x224D000
	176 Move X3, [X19+296]
	177 Move X4, [X19+304]
	178 Move X8, [X8+152]
	179 Move X2, X0
	180 Move X0, X20
	181 Move W1, W21
	182 Move X6, [X8]
	183 Move W5, W31
	184 Move X7, X31
	185 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5, X6
	186 Move W8, [X19+196]
	187 Add W8, W8, 1
	188 Move [X19+196], W8
	189 Move X0, X31
	190 Call Time.get_deltaTime
	191 Add S0, S8, S0
	192 Move [X19+208], S0
	193 Move X0, X19
	194 Call MobController.get_MoveStatus, X0
	195 Compare W0, 0
	196 JumpIfNotEqual {216}
	197 Move X0, X31
	198 Call Time.get_time
	199 Move V1, [X19+256]
	200 Move V2, [X19+228]
	201 Subtract S0, S0, S1
	202 NotImplemented "Instruction FCMP not yet implemented."
	203 Move X0, [X19+152]
	204 Compare X0, 0
	205 JumpIfEqual {408}
	206 Move W1, 1
	207 Call MobView.SetWalk, X0, X1
	208 Move X0, [X19+152]
	209 Compare X0, 0
	210 JumpIfEqual {408}
	211 Move V0, [X19+216]
	212 Call MobView.SetWalkSpeed, X0, V0
	213 Move W1, 2
	214 Move X0, X19
	215 Call MobController.set_MoveStatus, X0, X1
	216 Move X0, X19
	217 Call MobController.get_MoveStatus, X0
	218 Compare W0, 0
	219 JumpIfEqual {61}
	220 Move X0, [X19+264]
	221 Compare X0, 0
	222 JumpIfEqual {408}
	223 Move X1, X31
	224 Call Component.get_transform, X0
	225 Compare X0, 0
	226 JumpIfEqual {408}
	227 Move X1, X31
	228 Call Transform.get_position, X0
	229 Move X0, X19
	230 Move X1, X31
	231 Move V8, V0
	232 Move V9, V1
	233 Move V10, V2
	234 Call Component.get_transform, X0
	235 Compare X0, 0
	236 JumpIfEqual {408}
	237 Move X1, X31
	238 Call Transform.get_position, X0
	239 Subtract S0, S8, S0
	240 Subtract S1, S9, S1
	241 Subtract S2, S10, S2
	242 Move X0, X31
	243 Call Extensions.Flatten, X0
	244 Move X20, 0x251F000
	245 Move W8, [X20+1089]
	246 Move V8, V0
	247 Move V9, V1
	248 Move V10, V2
	249 Compare W8, 0
	250 JumpIfNotEqual {256}
	251 Move X0, 0x2249000
	252 Move X0, [X0+1160]
	253 Call 0x1B6F7F0
	254 Move W8, 1
	255 Move [X20+1089], W8
	256 Move X0, [X23]
	257 Move W8, [X0+224]
	258 Compare W8, 0
	259 JumpIfNotEqual {261}
	260 Call 0x1B6F8F8
	261 Multiply S0, S8, S8
	262 Multiply S1, S9, S9
	263 Move X8, -19247104
	264 Add S0, S0, S1
	265 Move V1, [X8+2916]
	266 Multiply S2, S10, S10
	267 Add S0, S2, S0
	268 NotImplemented "Instruction FSQRT not yet implemented."
	269 NotImplemented "Instruction FCMP not yet implemented."
	270 NotImplemented "Instruction FDIV not yet implemented."
	271 NotImplemented "Instruction FDIV not yet implemented."
	272 NotImplemented "Instruction FDIV not yet implemented."
	273 Move X20, 0x251F000
	274 Move W8, [X20+1087]
	275 Compare W8, 0
	276 JumpIfNotEqual {282}
	277 Move X0, 0x2249000
	278 Move X0, [X0+1152]
	279 Call 0x1B6F7F0
	280 Move W8, 1
	281 Move [X20+1087], W8
	282 Move X8, 0x2249000
	283 Move X8, [X8+1152]
	284 Move X8, [X8]
	285 Move X8, [X8+184]
	286 Move S8, [X8]
	287 Move S9, [X8+4]
	288 Move V10, [X8+8]
	289 Move X0, X19
	290 Move X1, X31
	291 Call Component.get_transform, X0
	292 Move X20, X0
	293 Move V0, V8
	294 Move V1, V9
	295 Move V2, V10
	296 Move X0, X31
	297 Call Quaternion.LookRotation, X0
	298 Compare X20, 0
	299 JumpIfEqual {408}
	300 Move X0, X20
	301 Move X1, X31
	302 Call Transform.set_rotation, X0, X1
	303 Move X0, [X19+264]
	304 Compare X0, 0
	305 JumpIfEqual {408}
	306 Move X20, [X19+144]
	307 Move X1, X31
	308 Call Component.get_transform, X0
	309 Compare X0, 0
	310 JumpIfEqual {408}
	311 Move X1, X31
	312 Call Transform.get_position, X0
	313 Compare X20, 0
	314 JumpIfEqual {408}
	315 Move X0, X20
	316 Move X1, X31
	317 Call NavMeshAgent.SetDestination, X0, X1
	318 Move V11, [X19+252]
	319 Move X0, X19
	320 Move X1, X31
	321 Call Component.get_transform, X0
	322 Compare X0, 0
	323 JumpIfEqual {408}
	324 Move X1, X31
	325 Call Transform.get_position, X0
	326 Move S12, [X19+236]
	327 Move S13, [X19+240]
	328 Move W8, [X22+1286]
	329 Move V14, [X19+244]
	330 Move V8, V0
	331 Move V9, V1
	332 Move V10, V2
	333 Compare W8, 0
	334 JumpIfNotEqual {340}
	335 Move X0, 0x2249000
	336 Move X0, [X0+1160]
	337 Call 0x1B6F7F0
	338 Move W8, 1
	339 Move [X22+1286], W8
	340 Move X0, [X23]
	341 Subtract S12, S8, S12
	342 Subtract S9, S9, S13
	343 Subtract S8, S10, S14
	344 Move W8, [X0+224]
	345 Compare W8, 0
	346 JumpIfNotEqual {348}
	347 Call 0x1B6F8F8
	348 Multiply S0, S12, S12
	349 Multiply S1, S9, S9
	350 Add S0, S0, S1
	351 Multiply S1, S8, S8
	352 Add S0, S1, S0
	353 NotImplemented "Instruction FSQRT not yet implemented."
	354 Add S0, S11, S0
	355 Move X0, X19
	356 Move X1, X31
	357 Move [X19+252], S0
	358 Call Component.get_transform, X0
	359 Compare X0, 0
	360 JumpIfEqual {408}
	361 Move X1, X31
	362 Call Transform.get_position, X0
	363 Move V3, [X19+252]
	364 Move V4, [X19+224]
	365 Move [X19+236], S0
	366 Move [X19+244], S1
	367 Move [X19+244], S2
	368 NotImplemented "Instruction FCMP not yet implemented."
	369 Move X0, [X19+152]
	370 Compare X0, 0
	371 JumpIfEqual {408}
	372 Move W1, W31
	373 Call MobView.SetWalk, X0, X1
	374 Move X0, X19
	375 Move W1, W31
	376 Call MobController.set_MoveStatus, X0, X1
	377 Move X0, X31
	378 Move [X19+252], W31
	379 Call Time.get_time
	380 Move X20, [X19+144]
	381 Move [X19+256], S0
	382 Compare X20, 0
	383 JumpIfEqual {408}
	384 Move X0, X20
	385 Move X1, X31
	386 Call Component.get_transform, X0
	387 Compare X0, 0
	388 JumpIfEqual {408}
	389 Move X1, X31
	390 Call Transform.get_position, X0
	391 Move X0, X20
	392 Move X20, [X31+96]
	393 Move X19, [X31+104]
	394 Move X22, [X31+80]
	395 Move X21, [X31+88]
	396 Move X30, [X31+64]
	397 Move X23, [X31+72]
	398 Move D9, [X31+48]
	399 Move D8, [X31+56]
	400 Move D11, [X31+32]
	401 Move D10, [X31+40]
	402 Move D13, [X31+16]
	403 Move D12, [X31+24]
	404 Move X1, X31
	405 Move V14, [X31+112]
	406 Call NavMeshAgent.SetDestination, X0, X1
	407 Return 
	408 Call 0x1B6FA1C

Method: System.Void HandleMoveStatusChanged()

Disassembly:
	0x01D05524 LDR X30, [X31 + 0x40]
	0x01D05528 LDP D9, D8, [X31 + 0x30]
	0x01D0552C LDP D11, D10, [X31 + 0x20]
	0x01D05530 LDP D13, D12, [X31 + 0x10]
	0x01D05534 MOV X1, X31
	0x01D05538 LDP D15, D14, [X31], #0x70
	0x01D0553C B 0x3A4A810
	0x01D05540 LDP X20, X19, [X31 + 0x60]
	0x01D05544 LDP X22, X21, [X31 + 0x50]
	0x01D05548 LDR X30, [X31 + 0x40]
	0x01D0554C LDP D9, D8, [X31 + 0x30]
	0x01D05550 LDP D11, D10, [X31 + 0x20]
	0x01D05554 LDP D13, D12, [X31 + 0x10]
	0x01D05558 LDP D15, D14, [X31], #0x70
	0x01D0555C RET
	0x01D05560 BL 0x1B6EA1C
	0x01D05564 STP D13, D12, [X31 - 0x50]!
	0x01D05568 STP D11, D10, [X31 + 0x10]
	0x01D0556C STP D9, D8, [X31 + 0x20]
	0x01D05570 STP X30, X21, [X31 + 0x30]
	0x01D05574 STP X20, X19, [X31 + 0x40]
	0x01D05578 ADRP X21, 0x251E000
	0x01D0557C ADRP X20, 0x2248000
	0x01D05580 LDRB W8, [X21 + 0x742]
	0x01D05584 LDR X20, [X20 + 0x478]
	0x01D05588 MOV X19, X0
	0x01D0558C TBNZ X8, 0x0, 0x1D055B0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobController.get_MoveStatus, X0
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Compare W0, 0
	008 JumpIfNotEqual {32}
	009 Move X8, [X19+152]
	010 Compare X8, 0
	011 JumpIfEqual {35}
	012 Move X0, [X8+48]
	013 Compare X0, 0
	014 JumpIfEqual {35}
	015 Move X1, X31
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call AudioSource.Stop, X0
	019 Return 
	020 Move X0, [X19+152]
	021 Compare X0, 0
	022 JumpIfEqual {35}
	023 Move X1, [X0+72]
	024 Move X0, [X19+152]
	025 Compare X0, 0
	026 JumpIfEqual {35}
	027 Move X1, [X0+64]
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Call MobView.PlaySound, X0, X1
	031 Return 
	032 Move X30, [X31+16]
	033 Move X19, [X31+24]
	034 Return 
	035 Call 0x1B6FA1C

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01D055BC CBNZ W8, 0x1D055C4
	0x01D055C0 BL 0x1B6E8F8
	0x01D055C4 MOV X0, X20
	0x01D055C8 MOV X1, X31
	0x01D055CC MOV X2, X31
	0x01D055D0 BL 0x3AA0AF0
	0x01D055D4 TBNZ X0, 0x0, 0x1D0570C
	0x01D055D8 MOV X0, X19
	0x01D055DC MOV X1, X31
	0x01D055E0 BL 0x3A9B084
	0x01D055E4 CBZ X0, 0x1D05724
	0x01D055E8 MOV X1, X31
	0x01D055EC BL 0x3AA7658
	0x01D055F0 MOV X0, X31
	0x01D055F4 BL 0x1CC086C
	0x01D055F8 LDR X0, [X19 + 0xF8]
	0x01D055FC CBZ X0, 0x1D05724
	0x01D05600 MOV X1, X31
	0x01D05604 MOV V8.16B, V0.16B
	0x01D05608 MOV V9.16B, V1.16B
	0x01D0560C MOV V10.16B, V2.16B
	0x01D05610 BL 0x3A9B084
	0x01D05614 CBZ X0, 0x1D05724
	0x01D05618 MOV X1, X31
	0x01D0561C BL 0x3AA7658
	0x01D05620 MOV X0, X31
	0x01D05624 BL 0x1CC086C
	0x01D05628 ADRP X20, 0x251E000
	0x01D0562C LDRB W8, [X20 + 0x506]
	0x01D05630 MOV V11.16B, V0.16B
	0x01D05634 MOV V12.16B, V1.16B
	0x01D05638 MOV V13.16B, V2.16B
	0x01D0563C CBNZ W8, 0x1D05654
	0x01D05640 ADRP X0, 0x2248000
	0x01D05644 LDR X0, [X0 + 0x488]
	0x01D05648 BL 0x1B6E7F0
	0x01D0564C MOVZ W8, 0x1
	0x01D05650 STRB W8, [X20 + 0x506]
	0x01D05654 ADRP X8, 0x2248000
	0x01D05658 LDR X8, [X8 + 0x488]
	0x01D0565C FSUB S11, S8, S11
	0x01D05660 FSUB S9, S9, S12
	0x01D05664 FSUB S8, S10, S13
	0x01D05668 LDR X0, [X8]
	0x01D0566C LDR W8, [X0 + 0xE0]
	0x01D05670 CBNZ W8, 0x1D05678
	0x01D05674 BL 0x1B6E8F8
	0x01D05678 FMUL S0, S11, S11
	0x01D0567C FMUL S1, S9, S9
	0x01D05680 LDR V2, [X19 + 0xBC]
	0x01D05684 FADD S0, S0, S1
	0x01D05688 FMUL S1, S8, S8
	0x01D0568C FADD S0, S1, S0

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move S0, 1
	008 Move S1, W31
	009 Move S2, W31
	010 Move S3, 1
	011 Move X0, X31
	012 Call Gizmos.set_color, X0
	013 Move X0, [X19+160]
	014 Compare X0, 0
	015 JumpIfEqual {61}
	016 Move X1, X31
	017 Call Transform.get_position, X0
	018 Move X0, [X19+160]
	019 Compare X0, 0
	020 JumpIfEqual {61}
	021 Move X1, X31
	022 Move V8, V0
	023 Move V9, V1
	024 Move V10, V2
	025 Call Transform.get_forward, X0
	026 Move V3, [X19+184]
	027 Move S4, 0.75
	028 Move X0, X31
	029 Multiply S0, S0, S3
	030 Multiply S1, S1, S3
	031 Multiply S2, S2, S3
	032 Multiply S0, S0, S4
	033 Multiply S1, S1, S4
	034 Multiply S2, S2, S4
	035 Add S0, S8, S0
	036 Add S1, S9, S1
	037 Add S2, S10, S2
	038 Call Gizmos.DrawWireSphere, X0, V0
	039 Move X8, -19247104
	040 Move X9, -19247104
	041 Move V1, [X8+2452]
	042 Move V2, [X9+2600]
	043 Move S0, 1
	044 Move S3, 1
	045 Move X0, X31
	046 Call Gizmos.set_color, X0
	047 Move X0, [X19+168]
	048 Compare X0, 0
	049 JumpIfEqual {61}
	050 Move X1, X31
	051 Call Transform.get_position, X0
	052 Move V3, [X19+188]
	053 Move X30, [X31+32]
	054 Move X19, [X31+40]
	055 Move D9, [X31+16]
	056 Move D8, [X31+24]
	057 Move X0, X31
	058 Move V10, [X31+48]
	059 Call Gizmos.DrawWireSphere, X0, V0
	060 Return 
	061 Call 0x1B6FA1C

Method: System.Void StateAuthorityChanged()

Disassembly:
	0x01D05690 FSQRT S0, S0
	0x01D05694 FCMP S0, S2
	0x01D05698 B.PL 0x1D0570C
	0x01D0569C LDP S0, S8, [X19 + 0xC4]
	0x01D056A0 FCMP S8, S0
	0x01D056A4 B.LE 0x1D056FC
	0x01D056A8 LDR X20, [X19 + 0xF8]
	0x01D056AC LDR W21, [X19 + 0xC0]
	0x01D056B0 MOV X0, X19
	0x01D056B4 MOV X1, X31
	0x01D056B8 STR W31, [X19 + 0xC8]
	0x01D056BC BL 0x3A9B084
	0x01D056C0 CBZ X20, 0x1D05724
	0x01D056C4 ADRP X8, 0x224C000
	0x01D056C8 LDP X3, X4, [X19 + 0x120]
	0x01D056CC LDR X8, [X8 + 0xB8]
	0x01D056D0 MOV X2, X0
	0x01D056D4 MOV X0, X20
	0x01D056D8 MOV W1, W21
	0x01D056DC LDR X5, [X8]
	0x01D056E0 LDP X20, X19, [X31 + 0x40]
	0x01D056E4 LDP X30, X21, [X31 + 0x30]
	0x01D056E8 LDP D9, D8, [X31 + 0x20]
	0x01D056EC LDP D11, D10, [X31 + 0x10]
	0x01D056F0 MOV X6, X31
	0x01D056F4 LDP D13, D12, [X31], #0x50

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+56]
	004 Compare X8, 0
	005 JumpIfEqual {38}
	006 Move W8, [X8+384]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X19, X0
	009 Move X0, [X0+64]
	010 Compare X0, 0
	011 JumpIfEqual {35}
	012 Move W8, [X0+96]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 2
	015 Compare TEMP, 2
	016 JumpIfEqual {35}
	017 Move X1, X31
	018 Call NetworkObject.get_HasStateAuthority, X0
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {35}
	023 Move X0, X19
	024 Move W1, W31
	025 Call MobController.set_MoveStatus, X0, X1
	026 Move X0, [X19+152]
	027 Move [X19+128], W31
	028 Compare X0, 0
	029 JumpIfEqual {38}
	030 Move W1, W31
	031 Move X30, [X31+16]
	032 Move X19, [X31+24]
	033 Call MobView.SetWalk, X0, X1
	034 Return 
	035 Move X30, [X31+16]
	036 Move X19, [X31+24]
	037 Return 
	038 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01D056F8 B 0x1CB92E8
	0x01D056FC MOV X0, X31
	0x01D05700 BL 0x3AA481C
	0x01D05704 FADD S0, S8, S0
	0x01D05708 STR S0, [X19 + 0xC8]
	0x01D0570C LDP X20, X19, [X31 + 0x40]
	0x01D05710 LDP X30, X21, [X31 + 0x30]
	0x01D05714 LDP D9, D8, [X31 + 0x20]
	0x01D05718 LDP D11, D10, [X31 + 0x10]
	0x01D0571C LDP D13, D12, [X31], #0x50
	0x01D05720 RET
	0x01D05724 BL 0x1B6EA1C
	0x01D05728 STP X30, X21, [X31 - 0x20]!
	0x01D0572C STP X20, X19, [X31 + 0x10]
	0x01D05730 ADRP X21, 0x251E000
	0x01D05734 ADRP X20, 0x224C000
	0x01D05738 LDRB W8, [X21 + 0x74D]
	0x01D0573C LDR X20, [X20 + 0x90]
	0x01D05740 MOV X19, X0
	0x01D05744 TBNZ X8, 0x0, 0x1D0575C
	0x01D05748 ADRP X0, 0x224C000
	0x01D0574C LDR X0, [X0 + 0x90]
	0x01D05750 BL 0x1B6E7F0
	0x01D05754 MOVZ W8, 0x1
	0x01D05758 STRB W8, [X21 + 0x74D]
	0x01D0575C LDR X0, [X20]
	0x01D05760 LDR X19, [X19 + 0x20]
	0x01D05764 LDR W8, [X0 + 0xE0]
	0x01D05768 CBNZ W8, 0x1D05770
	0x01D0576C BL 0x1B6E8F8
	0x01D05770 CBZ X19, 0x1D05794
	0x01D05774 LDR X8, [X20]
	0x01D05778 MOV X0, X19
	0x01D0577C LDP X20, X19, [X31 + 0x10]
	0x01D05780 MOV X2, X31
	0x01D05784 LDR X8, [X8 + 0xB8]
	0x01D05788 LDR W1, [X8]
	0x01D0578C LDP X30, X21, [X31], #0x20
	0x01D05790 B 0x3A5EE60
	0x01D05794 BL 0x1B6EA1C
	0x01D05798 STP X30, X19, [X31 - 0x10]!
	0x01D0579C MOV X19, X0
	0x01D057A0 BL 0x1D047C8
	0x01D057A4 CMP W0, 0x2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x251F000
	007 Move X21, 0x224C000
	008 Move X20, 0x224C000
	009 Move W8, [X22+1855]
	010 Move X21, [X21+688]
	011 Move X20, [X20+680]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x224C000
	018 Move X0, [X0+680]
	019 Call 0x1B6F7F0
	020 Move X0, 0x224C000
	021 Move X0, [X0+688]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X22+1855], W8
	025 Move X8, -19234816
	026 Move X10, -19230720
	027 Move X11, -19243008
	028 Move V0, [X8+3984]
	029 Move V1, [X10+328]
	030 Move V2, [X11+111]
	031 Move W9, 50
	032 Move W12, 0x40A00000
	033 Move [X19+192], W9
	034 Move [X19+184], D0
	035 Move [X19+200], D1
	036 Move [X19+212], V2
	037 Move [X19+228], W12
	038 Move X0, [X21]
	039 Call 0x1B6FA0C
	040 Move X1, [X20]
	041 Move X20, X0
	042 Call List`1<Object>..ctor, X0
	043 Move [X19+272], X20
	044 Move X0, X19
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X1, X31
	050 Move X30, [X31+48]
	051 Call NetworkBehaviour..ctor, X0
	052 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01D057A8 B.EQ 0x1D057D4
	0x01D057AC CMP W0, 0x1

ISIL:
	001 Move W1, [X0+232]
	002 Call MobController.set_MoveStatus, X0, X1
	003 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01D057B0 B.EQ 0x1D057E4
	0x01D057B4 CBNZ W0, 0x1D057F8
	0x01D057B8 LDR X8, [X19 + 0x98]
	0x01D057BC CBZ X8, 0x1D05800
	0x01D057C0 LDR X0, [X8 + 0x30]
	0x01D057C4 CBZ X0, 0x1D05800

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobController.get_MoveStatus, X0
	005 Move [X19+232], W0
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 

