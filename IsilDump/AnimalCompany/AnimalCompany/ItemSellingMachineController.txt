Type: AnimalCompany.ItemSellingMachineController

Method: System.Boolean get_isSellingInProgress()

Disassembly:
	0x01CD53F0 TBNZ X0, 0x0, 0x1CD550C
	0x01CD53F4 MOV X0, X19
	0x01CD53F8 BL 0x1CD4588
	0x01CD53FC TBNZ X0, 0x0, 0x1CD550C
	0x01CD5400 ADRP X21, 0x227A000
	0x01CD5404 ADRP X22, 0x227A000
	0x01CD5408 ADRP X23, 0x227A000
	0x01CD540C ADRP X24, 0x227A000
	0x01CD5410 LDR X21, [X21 + 0xC20]
	0x01CD5414 LDR X22, [X22 + 0xC30]
	0x01CD5418 LDR X23, [X23 + 0xAD8]
	0x01CD541C LDR X24, [X24 + 0xAD0]
	0x01CD5420 MOV W20, W31
	0x01CD5424 ADD X8, X31, 0x8
	0x01CD5428 MOV X0, X19
	0x01CD542C BL 0x1CD4714
	0x01CD5430 LDUR V0, [X31 + 0x8]
	0x01CD5434 LDR X8, [X31 + 0x18]
	0x01CD5438 LDR X2, [X21]
	0x01CD543C ADD X0, X31, 0x40
	0x01CD5440 MOV W1, W20
	0x01CD5444 STR V0, [X31 + 0x4]
	0x01CD5448 STR X8, [X31 + 0x50]
	0x01CD544C BL 0x22ACEE4
	0x01CD5450 TBZ X0, 0x0, 0x1CD5500
	0x01CD5454 ADD X8, X31, 0x8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2279000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x227B000
	018 Move X0, [X0+2832]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x227B000
	025 Move X0, [X0+2840]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set_isSellingInProgress(System.Boolean value)

Disassembly:
	0x01CD5458 MOV X0, X19
	0x01CD545C BL 0x1CD47CC
	0x01CD5460 LDUR V0, [X31 + 0x8]
	0x01CD5464 LDR X8, [X31 + 0x18]
	0x01CD5468 LDR X2, [X22]
	0x01CD546C ADD X0, X31, 0x20
	0x01CD5470 MOV W1, W20
	0x01CD5474 STR V0, [X31 + 0x2]
	0x01CD5478 STR X8, [X31 + 0x30]
	0x01CD547C BL 0x22B08D0
	0x01CD5480 STR W0, [X31 + 0x58]
	0x01CD5484 LDR X1, [X19 + 0x38]
	0x01CD5488 ADD X0, X31, 0x58
	0x01CD548C MOV X2, X31
	0x01CD5490 BL 0x1D9CBCC
	0x01CD5494 TBZ X0, 0x0, 0x1CD5500
	0x01CD5498 ADD X8, X31, 0x8
	0x01CD549C MOV X0, X19
	0x01CD54A0 BL 0x1CD4714
	0x01CD54A4 LDUR V0, [X31 + 0x8]
	0x01CD54A8 LDR X8, [X31 + 0x18]
	0x01CD54AC LDR X3, [X23]
	0x01CD54B0 ADD X0, X31, 0x40
	0x01CD54B4 MOV W1, W20
	0x01CD54B8 MOV W2, W31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x2279000
	012 Move X0, [X0+1168]
	013 Call 0x1B6F804
	014 Call 0x1B6FA0C
	015 Move X19, X0
	016 Move X0, 0x227B000
	017 Move X0, [X0+2832]
	018 Call 0x1B6F804
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x227B000
	024 Move X0, [X0+2848]
	025 Call 0x1B6F804
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1B6F8E8

Method: System.Boolean get_isOverheated()

Disassembly:
	0x01CD54BC STR V0, [X31 + 0x4]
	0x01CD54C0 STR X8, [X31 + 0x50]
	0x01CD54C4 BL 0x22AD29C
	0x01CD54C8 ADD X8, X31, 0x8
	0x01CD54CC MOV X0, X19
	0x01CD54D0 BL 0x1CD47CC
	0x01CD54D4 LDUR V0, [X31 + 0x8]
	0x01CD54D8 LDR X8, [X31 + 0x18]
	0x01CD54DC MOV X0, X31
	0x01CD54E0 STR V0, [X31 + 0x2]
	0x01CD54E4 STR X8, [X31 + 0x30]
	0x01CD54E8 BL 0x1D9CB50
	0x01CD54EC LDR X3, [X24]
	0x01CD54F0 AND X2, X0, 0x0
	0x01CD54F4 ADD X0, X31, 0x20
	0x01CD54F8 MOV W1, W20
	0x01CD54FC BL 0x22B0C90
	0x01CD5500 ADD W20, W20, 0x1
	0x01CD5504 CMP W20, 0xB
	0x01CD5508 B.NE 0x1CD5424
	0x01CD550C MOV X0, X19
	0x01CD5510 BL 0x1CD4B84
	0x01CD5514 FCMP S0, 0x0
	0x01CD5518 B.LE 0x1CD5584
	0x01CD551C MOV X0, X19
	0x01CD5520 BL 0x1CD4B84

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+4]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2279000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x227B000
	018 Move X0, [X0+2856]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x227B000
	025 Move X0, [X0+2864]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set_isOverheated(System.Boolean value)

Disassembly:
	0x01CD5524 MOV X0, X19
	0x01CD5528 MOV V8.16B, V0.16B
	0x01CD552C BL 0x1CD44BC
	0x01CD5530 CBZ X19, 0x1CD55A0
	0x01CD5534 ADRP X8, 0xFFFFFFFFFEDD4000
	0x01CD5538 LDR V0, [X8 + 0xAFC]
	0x01CD553C MOVZ W8, 0x42480000
	0x01CD5540 ANDS W31, W0, 0x1
	0x01CD5544 FMOV S1, W8
	0x01CD5548 FCSEL S0, S1, S0, NE
	0x01CD554C FCMP S8, S0
	0x01CD5550 CSET W1, GT
	0x01CD5554 MOV X0, X19
	0x01CD5558 BL 0x1CD4524
	0x01CD555C MOV X0, X19
	0x01CD5560 BL 0x1CD4B84
	0x01CD5564 LDR X0, [X19 + 0x38]
	0x01CD5568 CBZ X0, 0x1CD55A0
	0x01CD556C MOV X1, X31
	0x01CD5570 MOV V8.16B, V0.16B
	0x01CD5574 BL 0x1D87058
	0x01CD5578 FSUB S0, S8, S0
	0x01CD557C MOV X0, X19
	0x01CD5580 BL 0x1CD4BE4
	0x01CD5584 LDP X20, X19, [X31 + 0x90]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+4], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x2279000
	012 Move X0, [X0+1168]
	013 Call 0x1B6F804
	014 Call 0x1B6FA0C
	015 Move X19, X0
	016 Move X0, 0x227B000
	017 Move X0, [X0+2856]
	018 Call 0x1B6F804
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x227B000
	024 Move X0, [X0+2872]
	025 Call 0x1B6F804
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1B6F8E8

Method: System.Boolean get_isExploded()

Disassembly:
	0x01CD5588 LDP X22, X21, [X31 + 0x80]
	0x01CD558C LDP X24, X23, [X31 + 0x70]
	0x01CD5590 LDR X30, [X31 + 0x68]
	0x01CD5594 LDR V8, [X31 + 0x60]
	0x01CD5598 ADD X31, X31, 0xA0
	0x01CD559C RET
	0x01CD55A0 BL 0x1B6EA1C
	0x01CD55A4 SUB X31, X31, 0xB0
	0x01CD55A8 STR D14, [X31 + 0x10]
	0x01CD55AC STP D13, D12, [X31 + 0x20]
	0x01CD55B0 STP D11, D10, [X31 + 0x30]
	0x01CD55B4 STP D9, D8, [X31 + 0x40]
	0x01CD55B8 STP X29, X30, [X31 + 0x50]
	0x01CD55BC STP X28, X27, [X31 + 0x60]
	0x01CD55C0 STP X26, X25, [X31 + 0x70]
	0x01CD55C4 STP X24, X23, [X31 + 0x80]
	0x01CD55C8 STP X22, X21, [X31 + 0x90]
	0x01CD55CC STP X20, X19, [X31 + 0xA0]
	0x01CD55D0 ADRP X20, 0x254E000
	0x01CD55D4 ADRP X23, 0x2279000
	0x01CD55D8 LDRB W8, [X20 + 0x5F6]
	0x01CD55DC LDR X23, [X23 + 0x3D8]
	0x01CD55E0 MOV X19, X0
	0x01CD55E4 TBNZ X8, 0x0, 0x1CD5620
	0x01CD55E8 ADRP X0, 0x227A000
	0x01CD55EC LDR X0, [X0 + 0xC38]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+8]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2279000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x227B000
	018 Move X0, [X0+2880]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x227B000
	025 Move X0, [X0+2888]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set_isExploded(System.Boolean value)

Disassembly:
	0x01CD55F0 BL 0x1B6E7F0
	0x01CD55F4 ADRP X0, 0x2279000
	0x01CD55F8 LDR X0, [X0 + 0x3D8]
	0x01CD55FC BL 0x1B6E7F0
	0x01CD5600 ADRP X0, 0x2278000
	0x01CD5604 LDR X0, [X0 + 0x4C0]
	0x01CD5608 BL 0x1B6E7F0
	0x01CD560C ADRP X0, 0x227A000
	0x01CD5610 LDR X0, [X0 + 0xC40]
	0x01CD5614 BL 0x1B6E7F0
	0x01CD5618 MOVZ W8, 0x1
	0x01CD561C STRB W8, [X20 + 0x5F6]
	0x01CD5620 ADRP X24, 0x2278000
	0x01CD5624 LDR X24, [X24 + 0x4C0]
	0x01CD5628 MOV X0, X19
	0x01CD562C STR X31, [X31 + 0x18]
	0x01CD5630 STR X31, [X31 + 0x8]
	0x01CD5634 BL 0x1CD4C44
	0x01CD5638 MOV X0, X19
	0x01CD563C MOV V9.16B, V0.16B
	0x01CD5640 MOV V10.16B, V1.16B
	0x01CD5644 MOV V11.16B, V2.16B
	0x01CD5648 BL 0x1CD4D44
	0x01CD564C LDR X0, [X23]
	0x01CD5650 MOV V12.16B, V0.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+8], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x2279000
	012 Move X0, [X0+1168]
	013 Call 0x1B6F804
	014 Call 0x1B6FA0C
	015 Move X19, X0
	016 Move X0, 0x227B000
	017 Move X0, [X0+2880]
	018 Call 0x1B6F804
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x227B000
	024 Move X0, [X0+2896]
	025 Call 0x1B6F804
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1B6F8E8

Method: System.Int32 get_itemSoldValue()

Disassembly:
	0x01CD5654 MOV V13.16B, V1.16B
	0x01CD5658 MOV V14.16B, V2.16B
	0x01CD565C LDR W8, [X0 + 0xE0]
	0x01CD5660 CBNZ W8, 0x1CD566C
	0x01CD5664 BL 0x1B6E8F8
	0x01CD5668 LDR X0, [X23]
	0x01CD566C LDR X8, [X0 + 0xB8]
	0x01CD5670 MOV X1, X31
	0x01CD5674 LDR W0, [X8 + 0x8]
	0x01CD5678 BL 0x3A9DE68
	0x01CD567C LDR X8, [X24]
	0x01CD5680 MOV W20, W0
	0x01CD5684 LDR W9, [X8 + 0xE0]
	0x01CD5688 CBNZ W9, 0x1CD5694
	0x01CD568C MOV X0, X8
	0x01CD5690 BL 0x1B6E8F8
	0x01CD5694 ADRP X8, 0xFFFFFFFFFEDD4000
	0x01CD5698 LDR V8, [X8 + 0xA54]
	0x01CD569C MOV V0.16B, V9.16B
	0x01CD56A0 MOV V1.16B, V10.16B
	0x01CD56A4 MOV V2.16B, V11.16B
	0x01CD56A8 MOV V3.16B, V12.16B
	0x01CD56AC MOV V4.16B, V13.16B
	0x01CD56B0 MOV V5.16B, V14.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+12]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2279000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x227B000
	016 Move X0, [X0+2904]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x227B000
	023 Move X0, [X0+2912]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_itemSoldValue(System.Int32 value)

Disassembly:
	0x01CD56B4 MOV V6.16B, V8.16B
	0x01CD56B8 MOV W0, W20
	0x01CD56BC MOV X1, X31
	0x01CD56C0 BL 0x3AF5080
	0x01CD56C4 CBZ X0, 0x1CD591C
	0x01CD56C8 LDR X8, [X0 + 0x18]
	0x01CD56CC MOV X20, X0
	0x01CD56D0 CMP W8, 0x1
	0x01CD56D4 B.LT 0x1CD57A0
	0x01CD56D8 ADRP X26, 0x227A000
	0x01CD56DC ADRP X21, 0x2278000
	0x01CD56E0 LDR X26, [X26 + 0xC40]
	0x01CD56E4 LDR X21, [X21 + 0x480]
	0x01CD56E8 MOV X25, X31
	0x01CD56EC AND X8, X8, 0x0
	0x01CD56F0 ADD X27, X20, 0x20
	0x01CD56F4 ADRP X28, 0x254E000
	0x01CD56F8 MOVZ W29, 0x1
	0x01CD56FC CMP X25, W8, UXTW
	0x01CD5700 B.CS 0x1CD5918
	0x01CD5704 LDR X0, [X27, X25, LSL #3]
	0x01CD5708 ADD X1, X31, 0x18
	0x01CD570C MOV X2, X31
	0x01CD5710 BL 0x1CF27FC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+12], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2279000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x227B000
	016 Move X0, [X0+2904]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x227B000
	023 Move X0, [X0+2920]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: Fusion.NetworkArray`1<System.Boolean> get_isButtonPressed()

Disassembly:
	0x01CD5714 TBZ X0, 0x0, 0x1CD5790
	0x01CD5718 LDR X22, [X31 + 0x18]
	0x01CD571C MOV X0, X19
	0x01CD5720 MOV X1, X31
	0x01CD5724 BL 0x3A9B084
	0x01CD5728 CBZ X0, 0x1CD591C
	0x01CD572C MOV X1, X31
	0x01CD5730 BL 0x3AA7658
	0x01CD5734 LDRB W8, [X28 + 0x43F]
	0x01CD5738 MOV V9.16B, V0.16B
	0x01CD573C MOV V10.16B, V1.16B
	0x01CD5740 MOV V11.16B, V2.16B
	0x01CD5744 CBNZ W8, 0x1CD5754
	0x01CD5748 MOV X0, X21
	0x01CD574C BL 0x1B6E7F0
	0x01CD5750 STRB W29, [X28 + 0x43F]
	0x01CD5754 CBZ X22, 0x1CD591C
	0x01CD5758 LDR X8, [X21]
	0x01CD575C LDR X4, [X26]
	0x01CD5760 MOVZ W1, 0x3E8
	0x01CD5764 MOV X0, X22
	0x01CD5768 LDR X8, [X8 + 0xB8]
	0x01CD576C MOV V0.16B, V9.16B
	0x01CD5770 MOV V1.16B, V10.16B
	0x01CD5774 MOV V2.16B, V11.16B
	0x01CD5778 LDP S4, S5, [X8 + 0x4]
	0x01CD577C LDR V3, [X8]
	0x01CD5780 MOV X2, X31
	0x01CD5784 MOV X3, X31
	0x01CD5788 MOV X5, X31
	0x01CD578C BL 0x1CB95D8
	0x01CD5790 LDR W8, [X20 + 0x18]
	0x01CD5794 ADD X25, X25, 0x1
	0x01CD5798 CMP X25, W8, SXTW
	0x01CD579C B.LT 0x1CD56FC
	0x01CD57A0 MOV X0, X19
	0x01CD57A4 BL 0x1CD4C44
	0x01CD57A8 MOV X0, X19
	0x01CD57AC MOV V9.16B, V0.16B
	0x01CD57B0 MOV V10.16B, V1.16B
	0x01CD57B4 MOV V11.16B, V2.16B
	0x01CD57B8 BL 0x1CD4D44
	0x01CD57BC LDR X0, [X23]
	0x01CD57C0 MOV V12.16B, V0.16B
	0x01CD57C4 MOV V13.16B, V1.16B
	0x01CD57C8 MOV V14.16B, V2.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x254F000
	006 Move W9, [X21+1517]
	007 Move X20, X0
	008 Move X19, X8
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x227B000
	014 Move X0, [X0+2928]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1517], W8
	018 Move X20, [X20+80]
	019 Compare X20, 0
	020 JumpIfEqual {39}
	021 Move X21, 0x227B000
	022 Move X21, [X21+2928]
	023 Move X0, X31
	024 Call ReaderWriter@System_Boolean.GetInstance
	025 Move X3, X0
	026 Move [X19+8], X31
	027 Move [X19+16], X31
	028 Move X4, [X21]
	029 Add X1, X20, 16
	030 Move [X19], X31
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move W2, 11
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call 0x22AE1FC, X0, X1, X2, X3
	038 Return X0
	039 Move X0, 0x2279000
	040 Move X0, [X0+1168]
	041 Call 0x1B6F804
	042 Call 0x1B6FA0C
	043 Move X19, X0
	044 Move X0, 0x227B000
	045 Move X0, [X0+2936]
	046 Call 0x1B6F804
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call InvalidOperationException..ctor, X0, X1
	051 Move X0, 0x227B000
	052 Move X0, [X0+2944]
	053 Call 0x1B6F804
	054 Move X1, X0
	055 Move X0, X19
	056 Call 0x1B6F8E8

Method: Fusion.NetworkArray`1<Fusion.TickTimer> get__timerResetButton()

Disassembly:
	0x01CD57CC LDR W8, [X0 + 0xE0]
	0x01CD57D0 CBNZ W8, 0x1CD57DC
	0x01CD57D4 BL 0x1B6E8F8
	0x01CD57D8 LDR X0, [X23]
	0x01CD57DC LDR X8, [X0 + 0xB8]
	0x01CD57E0 MOV X1, X31
	0x01CD57E4 LDR W0, [X8 + 0xC]
	0x01CD57E8 BL 0x3A9DE68
	0x01CD57EC LDR X8, [X23]
	0x01CD57F0 MOV W20, W0
	0x01CD57F4 MOV X1, X31
	0x01CD57F8 LDR X8, [X8 + 0xB8]
	0x01CD57FC LDR W8, [X8 + 0x10]
	0x01CD5800 MOV X0, X8
	0x01CD5804 BL 0x3A9DE68
	0x01CD5808 LDR X8, [X24]
	0x01CD580C MOV W21, W0
	0x01CD5810 LDR W9, [X8 + 0xE0]
	0x01CD5814 CBNZ W9, 0x1CD5820
	0x01CD5818 MOV X0, X8
	0x01CD581C BL 0x1B6E8F8
	0x01CD5820 ORR W0, W21, W20, 0x0
	0x01CD5824 MOV V0.16B, V9.16B
	0x01CD5828 MOV V1.16B, V10.16B
	0x01CD582C MOV V2.16B, V11.16B
	0x01CD5830 MOV V3.16B, V12.16B
	0x01CD5834 MOV V4.16B, V13.16B
	0x01CD5838 MOV V5.16B, V14.16B
	0x01CD583C MOV V6.16B, V8.16B
	0x01CD5840 MOV X1, X31
	0x01CD5844 BL 0x3AF5080
	0x01CD5848 LDR X8, [X19 + 0xE8]
	0x01CD584C CBZ X8, 0x1CD591C
	0x01CD5850 ADRP X9, 0x227A000
	0x01CD5854 LDR X9, [X9 + 0xC38]
	0x01CD5858 MOV X20, X0
	0x01CD585C MOV X0, X8
	0x01CD5860 LDR X1, [X9]
	0x01CD5864 BL 0x2BD391C
	0x01CD5868 CBZ X20, 0x1CD591C
	0x01CD586C LDR X8, [X20 + 0x18]
	0x01CD5870 CMP W8, 0x1
	0x01CD5874 B.LT 0x1CD58E8
	0x01CD5878 MOV X22, X31
	0x01CD587C AND X8, X8, 0x0
	0x01CD5880 ADD X23, X20, 0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x254F000
	006 Move W9, [X21+1518]
	007 Move X20, X0
	008 Move X19, X8
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x227B000
	014 Move X0, [X0+2952]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1518], W8
	018 Move X20, [X20+80]
	019 Compare X20, 0
	020 JumpIfEqual {39}
	021 Move X21, 0x227B000
	022 Move X21, [X21+2952]
	023 Move X0, X31
	024 Call ReaderWriter@Fusion_TickTimer.GetInstance
	025 Move X3, X0
	026 Move [X19+8], X31
	027 Move [X19+16], X31
	028 Move X4, [X21]
	029 Add X1, X20, 60
	030 Move [X19], X31
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move W2, 11
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call NetworkArray`1<TickTimer>..ctor, X0, X1, X2, X3
	038 Return X0
	039 Move X0, 0x2279000
	040 Move X0, [X0+1168]
	041 Call 0x1B6F804
	042 Call 0x1B6FA0C
	043 Move X19, X0
	044 Move X0, 0x227B000
	045 Move X0, [X0+2960]
	046 Call 0x1B6F804
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call InvalidOperationException..ctor, X0, X1
	051 Move X0, 0x227B000
	052 Move X0, [X0+2968]
	053 Call 0x1B6F804
	054 Move X1, X0
	055 Move X0, X19
	056 Call 0x1B6F8E8

Method: Fusion.TickTimer get__timerAnimationFinished()

Disassembly:
	0x01CD5884 CMP X22, W8, UXTW
	0x01CD5888 B.CS 0x1CD5918
	0x01CD588C LDR X0, [X23, X22, LSL #3]
	0x01CD5890 ADD X1, X31, 0x8
	0x01CD5894 MOV X2, X31
	0x01CD5898 BL 0x1CF25DC
	0x01CD589C TBZ X0, 0x0, 0x1CD58D8
	0x01CD58A0 LDR X0, [X31 + 0x8]
	0x01CD58A4 CBZ X0, 0x1CD591C
	0x01CD58A8 MOV X1, X31
	0x01CD58AC BL 0x1C9A864
	0x01CD58B0 TBZ X0, 0x0, 0x1CD58D8
	0x01CD58B4 MOV X0, X19
	0x01CD58B8 BL 0x1CD4654
	0x01CD58BC LDR X1, [X31 + 0x8]
	0x01CD58C0 MOV W21, W0
	0x01CD58C4 MOV X0, X19
	0x01CD58C8 BL 0x1CD5EB8
	0x01CD58CC ADD W1, W0, W21
	0x01CD58D0 MOV X0, X19
	0x01CD58D4 BL 0x1CD46B4
	0x01CD58D8 LDR W8, [X20 + 0x18]
	0x01CD58DC ADD X22, X22, 0x1
	0x01CD58E0 CMP X22, W8, SXTW

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+104]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2279000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x227B000
	016 Move X0, [X0+2976]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x227B000
	023 Move X0, [X0+2984]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set__timerAnimationFinished(Fusion.TickTimer value)

Disassembly:
	0x01CD58E4 B.LT 0x1CD5884
	0x01CD58E8 LDP X20, X19, [X31 + 0xA0]
	0x01CD58EC LDP X22, X21, [X31 + 0x90]
	0x01CD58F0 LDP X24, X23, [X31 + 0x80]
	0x01CD58F4 LDP X26, X25, [X31 + 0x70]
	0x01CD58F8 LDP X28, X27, [X31 + 0x60]
	0x01CD58FC LDP X29, X30, [X31 + 0x50]
	0x01CD5900 LDP D9, D8, [X31 + 0x40]
	0x01CD5904 LDP D11, D10, [X31 + 0x30]
	0x01CD5908 LDP D13, D12, [X31 + 0x20]
	0x01CD590C LDR V14, [X31 + 0x10]
	0x01CD5910 ADD X31, X31, 0xB0
	0x01CD5914 RET
	0x01CD5918 BL 0x1B6EA24
	0x01CD591C BL 0x1B6EA1C
	0x01CD5920 STP X30, X19, [X31 - 0x10]!
	0x01CD5924 MOV X19, X0
	0x01CD5928 LDR X0, [X0 + 0x40]
	0x01CD592C CBZ X0, 0x1CD59A8
	0x01CD5930 LDRB W8, [X0 + 0x60]
	0x01CD5934 TBNZ X8, 0x1, 0x1CD59A8
	0x01CD5938 MOV X1, X31
	0x01CD593C BL 0x1D9E780
	0x01CD5940 TBZ X0, 0x0, 0x1CD59A8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+104], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2279000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x227B000
	016 Move X0, [X0+2976]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x227B000
	023 Move X0, [X0+2992]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: Fusion.TickTimer get__timerItemSell()

Disassembly:
	0x01CD5944 MOV X0, X19
	0x01CD5948 MOV W1, W31
	0x01CD594C BL 0x1CD4458
	0x01CD5950 MOV X0, X19
	0x01CD5954 BL 0x1CD4F70
	0x01CD5958 MOVZ W1, 0xB
	0x01CD595C MOV W0, W31
	0x01CD5960 MOV X2, X31
	0x01CD5964 BL 0x3A98D10
	0x01CD5968 MOV W1, W0
	0x01CD596C MOV X0, X19
	0x01CD5970 BL 0x1CD4B24
	0x01CD5974 MOV X0, X19
	0x01CD5978 BL 0x1CD4654
	0x01CD597C CMP W0, 0x1
	0x01CD5980 B.LT 0x1CD59A8
	0x01CD5984 MOV X0, X19
	0x01CD5988 BL 0x1CD4654
	0x01CD598C MOV W1, W0
	0x01CD5990 MOV X0, X19
	0x01CD5994 BL 0x1CD62FC
	0x01CD5998 MOV X0, X19
	0x01CD599C MOV W1, W31
	0x01CD59A0 LDP X30, X19, [X31], #0x10

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+108]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2279000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x227B000
	016 Move X0, [X0+3000]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x227B000
	023 Move X0, [X0+3008]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set__timerItemSell(Fusion.TickTimer value)

Disassembly:
	0x01CD59A4 B 0x1CD46B4
	0x01CD59A8 LDP X30, X19, [X31], #0x10
	0x01CD59AC RET
	0x01CD59B0 STR X30, [X31 - 0x20]!
	0x01CD59B4 STP X20, X19, [X31 + 0x10]
	0x01CD59B8 ADRP X20, 0x254E000
	0x01CD59BC LDRB W8, [X20 + 0x5F8]
	0x01CD59C0 MOV X19, X0
	0x01CD59C4 TBNZ X8, 0x0, 0x1CD59E8
	0x01CD59C8 ADRP X0, 0x2279000
	0x01CD59CC LDR X0, [X0 + 0x1C0]
	0x01CD59D0 BL 0x1B6E7F0
	0x01CD59D4 ADRP X0, 0x227A000
	0x01CD59D8 LDR X0, [X0 + 0xC48]
	0x01CD59DC BL 0x1B6E7F0
	0x01CD59E0 MOVZ W8, 0x1
	0x01CD59E4 STRB W8, [X20 + 0x5F8]
	0x01CD59E8 LDRB W8, [X19 + 0x58]
	0x01CD59EC CBZ W8, 0x1CD5A58
	0x01CD59F0 STRB W31, [X19 + 0x58]
	0x01CD59F4 LDR X0, [X19 + 0x40]
	0x01CD59F8 CBZ X0, 0x1CD5A94
	0x01CD59FC LDRB W8, [X0 + 0x60]
	0x01CD5A00 TBNZ X8, 0x1, 0x1CD5A94

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+108], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2279000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x227B000
	016 Move X0, [X0+3000]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x227B000
	023 Move X0, [X0+3016]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: Fusion.TickTimer get__timerRecoverExplosion()

Disassembly:
	0x01CD5A04 MOV X1, X31
	0x01CD5A08 BL 0x1D9E780
	0x01CD5A0C TBZ X0, 0x0, 0x1CD5A94
	0x01CD5A10 FMOV S0, W31
	0x01CD5A14 MOV X0, X19
	0x01CD5A18 BL 0x1CD4BE4
	0x01CD5A1C MOV X0, X19
	0x01CD5A20 MOV W1, W31
	0x01CD5A24 BL 0x1CD4524
	0x01CD5A28 MOV X0, X19
	0x01CD5A2C MOV W1, W31
	0x01CD5A30 BL 0x1CD45F0
	0x01CD5A34 MOVZ W1, 0xB
	0x01CD5A38 MOV W0, W31
	0x01CD5A3C MOV X2, X31
	0x01CD5A40 BL 0x3A98D10
	0x01CD5A44 MOV W1, W0
	0x01CD5A48 MOV X0, X19
	0x01CD5A4C LDP X20, X19, [X31 + 0x10]
	0x01CD5A50 LDR X30, [X31], #0x20
	0x01CD5A54 B 0x1CD4B24
	0x01CD5A58 ADRP X20, 0x2279000
	0x01CD5A5C LDR X20, [X20 + 0x1C0]
	0x01CD5A60 LDR X0, [X20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+112]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2279000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x227B000
	016 Move X0, [X0+3024]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x227B000
	023 Move X0, [X0+3032]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set__timerRecoverExplosion(Fusion.TickTimer value)

Disassembly:
	0x01CD5A64 LDR W8, [X0 + 0xE0]
	0x01CD5A68 CBNZ W8, 0x1CD5A70
	0x01CD5A6C BL 0x1B6E8F8
	0x01CD5A70 MOV X0, X19
	0x01CD5A74 MOV X1, X31
	0x01CD5A78 BL 0x1D697C8
	0x01CD5A7C LDR X0, [X19 + 0x38]
	0x01CD5A80 CBZ X0, 0x1CD5B88
	0x01CD5A84 MOV X1, X31
	0x01CD5A88 BL 0x1D87040
	0x01CD5A8C CMP W0, 0x4
	0x01CD5A90 B.NE 0x1CD5AA0
	0x01CD5A94 LDP X20, X19, [X31 + 0x10]
	0x01CD5A98 LDR X30, [X31], #0x20
	0x01CD5A9C RET
	0x01CD5AA0 LDR X0, [X19 + 0x40]
	0x01CD5AA4 CBZ X0, 0x1CD5B88
	0x01CD5AA8 MOV X1, X31
	0x01CD5AAC BL 0x1D9F538
	0x01CD5AB0 ANDS W31, W0, 0x7
	0x01CD5AB4 B.EQ 0x1CD5B14
	0x01CD5AB8 LDR X8, [X19 + 0x38]
	0x01CD5ABC CBZ X8, 0x1CD5B88
	0x01CD5AC0 LDR X0, [X8 + 0x50]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+112], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2279000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x227B000
	016 Move X0, [X0+3024]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x227B000
	023 Move X0, [X0+3040]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Int32 get_randomButtonId()

Disassembly:
	0x01CD5AC4 CBZ X0, 0x1CD5B88
	0x01CD5AC8 MOV X1, X31
	0x01CD5ACC BL 0x1DBEFE4
	0x01CD5AD0 TBZ X0, 0x0, 0x1CD59F4
	0x01CD5AD4 LDR X8, [X19 + 0x38]
	0x01CD5AD8 CBZ X8, 0x1CD5B88
	0x01CD5ADC LDR X0, [X8 + 0x50]
	0x01CD5AE0 MOVZ W1, 0x8
	0x01CD5AE4 MOV X2, X31
	0x01CD5AE8 BL 0x1DD601C
	0x01CD5AEC MOV X20, X0
	0x01CD5AF0 MOVZ W0, 0x1
	0x01CD5AF4 MOV X1, X31
	0x01CD5AF8 BL 0x1D29EBC
	0x01CD5AFC LDR X8, [X19 + 0x40]
	0x01CD5B00 CBZ X8, 0x1CD5B88
	0x01CD5B04 LDR X8, [X8 + 0x20]
	0x01CD5B08 CBZ X8, 0x1CD5B4C
	0x01CD5B0C LDR W0, [X8]
	0x01CD5B10 B 0x1CD5B50
	0x01CD5B14 LDR X0, [X20]
	0x01CD5B18 LDR X19, [X19 + 0x40]
	0x01CD5B1C LDR W8, [X0 + 0xE0]
	0x01CD5B20 CBNZ W8, 0x1CD5B28

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+116]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2279000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x227B000
	016 Move X0, [X0+3048]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x227B000
	023 Move X0, [X0+3056]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_randomButtonId(System.Int32 value)

Disassembly:
	0x01CD5B24 BL 0x1B6E8F8
	0x01CD5B28 ADRP X8, 0x227A000
	0x01CD5B2C LDR X8, [X8 + 0xC48]
	0x01CD5B30 MOV X1, X19
	0x01CD5B34 LDP X20, X19, [X31 + 0x10]
	0x01CD5B38 MOVZ W2, 0x7
	0x01CD5B3C LDR X0, [X8]
	0x01CD5B40 MOV X3, X31
	0x01CD5B44 LDR X30, [X31], #0x20
	0x01CD5B48 B 0x1D69640
	0x01CD5B4C MOV X0, X31
	0x01CD5B50 LDR W1, [X19 + 0x68]
	0x01CD5B54 MOVZ W2, 0x3
	0x01CD5B58 MOV X3, X31
	0x01CD5B5C BL 0x1DA8258
	0x01CD5B60 STUR X0, [X20 + 0x1C]
	0x01CD5B64 CBZ X20, 0x1CD5B88
	0x01CD5B68 MOVZ W8, 0x40
	0x01CD5B6C STR W8, [X20 + 0xC]
	0x01CD5B70 LDR X0, [X19 + 0x38]
	0x01CD5B74 CBZ X0, 0x1CD5B88
	0x01CD5B78 MOV X1, X20
	0x01CD5B7C MOV X2, X31
	0x01CD5B80 BL 0x1D8A710

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+116], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2279000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x227B000
	016 Move X0, [X0+3048]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x227B000
	023 Move X0, [X0+3064]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Single get_heatMeter()

Disassembly:
	0x01CD5B84 B 0x1CD59F4
	0x01CD5B88 BL 0x1B6EA1C
	0x01CD5B8C SUB X31, X31, 0x70
	0x01CD5B90 STR D8, [X31 + 0x40]
	0x01CD5B94 STP X30, X21, [X31 + 0x50]
	0x01CD5B98 STP X20, X19, [X31 + 0x60]
	0x01CD5B9C ADRP X20, 0x254E000
	0x01CD5BA0 LDRB W8, [X20 + 0x5F4]
	0x01CD5BA4 MOV V8.16B, V0.16B
	0x01CD5BA8 MOV X19, X0
	0x01CD5BAC TBNZ X8, 0x0, 0x1CD5BDC
	0x01CD5BB0 ADRP X0, 0x227A000
	0x01CD5BB4 LDR X0, [X0 + 0xAD0]
	0x01CD5BB8 BL 0x1B6E7F0
	0x01CD5BBC ADRP X0, 0x2279000
	0x01CD5BC0 LDR X0, [X0 + 0x1C0]
	0x01CD5BC4 BL 0x1B6E7F0
	0x01CD5BC8 ADRP X0, 0x227A000
	0x01CD5BCC LDR X0, [X0 + 0xC50]
	0x01CD5BD0 BL 0x1B6E7F0
	0x01CD5BD4 MOVZ W8, 0x1
	0x01CD5BD8 STRB W8, [X20 + 0x5F4]
	0x01CD5BDC STP X31, X31, [X31 + 0x20]
	0x01CD5BE0 STR X31, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+120]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2279000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x227B000
	016 Move X0, [X0+3072]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x227B000
	023 Move X0, [X0+3080]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_heatMeter(System.Single value)

Disassembly:
	0x01CD5BE4 LDRB W8, [X19 + 0x58]
	0x01CD5BE8 CBZ W8, 0x1CD5C98
	0x01CD5BEC STRB W31, [X19 + 0x58]
	0x01CD5BF0 LDR X0, [X19 + 0x40]
	0x01CD5BF4 CBZ X0, 0x1CD5C68
	0x01CD5BF8 LDRB W8, [X0 + 0x60]
	0x01CD5BFC TBNZ X8, 0x1, 0x1CD5C68
	0x01CD5C00 MOV X1, X31
	0x01CD5C04 BL 0x1D9E780
	0x01CD5C08 TBZ X0, 0x0, 0x1CD5C68
	0x01CD5C0C MOVZ W1, 0x1
	0x01CD5C10 MOV X0, X19
	0x01CD5C14 BL 0x1CD4458
	0x01CD5C18 ADRP X21, 0x227A000
	0x01CD5C1C LDR X21, [X21 + 0xAD0]
	0x01CD5C20 MOV W20, W31
	0x01CD5C24 ADD X8, X31, 0x8
	0x01CD5C28 MOV X0, X19
	0x01CD5C2C BL 0x1CD47CC
	0x01CD5C30 LDUR V0, [X31 + 0x8]
	0x01CD5C34 LDR X8, [X31 + 0x18]
	0x01CD5C38 MOV X0, X31
	0x01CD5C3C STR V0, [X31 + 0x2]
	0x01CD5C40 STR X8, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+120], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2279000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x227B000
	016 Move X0, [X0+3072]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x227B000
	023 Move X0, [X0+3088]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: UnityEngine.Vector3 get__capsulePoint0()

Disassembly:
	0x01CD5C44 BL 0x1D9CB50
	0x01CD5C48 LDR X3, [X21]
	0x01CD5C4C AND X2, X0, 0x0
	0x01CD5C50 ADD X0, X31, 0x20
	0x01CD5C54 MOV W1, W20
	0x01CD5C58 BL 0x22B0C90
	0x01CD5C5C ADD W20, W20, 0x1
	0x01CD5C60 CMP W20, 0xB
	0x01CD5C64 B.NE 0x1CD5C24
	0x01CD5C68 LDR X0, [X19 + 0xB0]
	0x01CD5C6C CBZ X0, 0x1CD5DCC
	0x01CD5C70 BL 0x1CD5DD0
	0x01CD5C74 LDR X0, [X19 + 0xB0]
	0x01CD5C78 CBZ X0, 0x1CD5DCC
	0x01CD5C7C ADRP X8, 0xFFFFFFFFFEDD4000
	0x01CD5C80 LDR V0, [X8 + 0xE20]
	0x01CD5C84 FMOV S1, 3
	0x01CD5C88 FMOV S2, 1
	0x01CD5C8C MOV V3.16B, V8.16B
	0x01CD5C90 BL 0x1CD5E4C
	0x01CD5C94 B 0x1CD5D78
	0x01CD5C98 ADRP X20, 0x2279000
	0x01CD5C9C LDR X20, [X20 + 0x1C0]
	0x01CD5CA0 LDR X0, [X20]
	0x01CD5CA4 LDR W8, [X0 + 0xE0]
	0x01CD5CA8 CBNZ W8, 0x1CD5CB0
	0x01CD5CAC BL 0x1B6E8F8
	0x01CD5CB0 MOV X0, X19
	0x01CD5CB4 MOV X1, X31
	0x01CD5CB8 BL 0x1D697C8
	0x01CD5CBC LDR X0, [X19 + 0x38]
	0x01CD5CC0 CBZ X0, 0x1CD5DCC
	0x01CD5CC4 MOV X1, X31
	0x01CD5CC8 BL 0x1D87040
	0x01CD5CCC CMP W0, 0x4
	0x01CD5CD0 B.EQ 0x1CD5D78
	0x01CD5CD4 LDR X0, [X19 + 0x40]
	0x01CD5CD8 CBZ X0, 0x1CD5DCC
	0x01CD5CDC MOV X1, X31
	0x01CD5CE0 BL 0x1D9F538
	0x01CD5CE4 ANDS W31, W0, 0x7
	0x01CD5CE8 B.EQ 0x1CD5D48
	0x01CD5CEC LDR X8, [X19 + 0x38]
	0x01CD5CF0 CBZ X8, 0x1CD5DCC
	0x01CD5CF4 LDR X0, [X8 + 0x50]
	0x01CD5CF8 CBZ X0, 0x1CD5DCC
	0x01CD5CFC MOV X1, X31
	0x01CD5D00 BL 0x1DBEFE4
	0x01CD5D04 TBZ X0, 0x0, 0x1CD5BF0
	0x01CD5D08 LDR X8, [X19 + 0x38]
	0x01CD5D0C CBZ X8, 0x1CD5DCC
	0x01CD5D10 LDR X0, [X8 + 0x50]
	0x01CD5D14 MOVZ W1, 0xC
	0x01CD5D18 MOV X2, X31
	0x01CD5D1C BL 0x1DD601C
	0x01CD5D20 MOV X20, X0
	0x01CD5D24 MOVZ W0, 0x1
	0x01CD5D28 MOV X1, X31
	0x01CD5D2C BL 0x1D29EBC
	0x01CD5D30 LDR X8, [X19 + 0x40]
	0x01CD5D34 CBZ X8, 0x1CD5DCC
	0x01CD5D38 LDR X8, [X8 + 0x20]
	0x01CD5D3C CBZ X8, 0x1CD5D8C
	0x01CD5D40 LDR W0, [X8]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D10
	003 Move [X31+40], D9
	004 Move [X31+48], D8
	005 Move [X31+56], X30
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X20, 0x254F000
	009 Move W8, [X20+1519]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x227B000
	016 Move X0, [X0+3096]
	017 Call 0x1B6F7F0
	018 Move W8, 1
	019 Move [X20+1519], W8
	020 Move X0, X19
	021 Move X1, X31
	022 Call Component.get_transform, X0
	023 Compare X0, 0
	024 JumpIfEqual {78}
	025 Move X19, 0x227B000
	026 Move X19, [X19+3096]
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X0, [X19]
	030 Move V8, V2
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {40}
	034 Move [X31], V1
	035 Move [X31+8], V0
	036 Call 0x1B6F8F8
	037 Move V1, [X31]
	038 Move V0, [X31+16]
	039 Move X0, [X19]
	040 Move X8, [X0+184]
	041 Move X19, 0x254F000
	042 Move W9, [X19+1090]
	043 Move V9, [X8]
	044 Move V10, [X8+8]
	045 Compare W9, 0
	046 JumpIfNotEqual {56}
	047 Move X0, 0x2279000
	048 Move X0, [X0+1152]
	049 Move [X31], V1
	050 Move [X31+8], V0
	051 Call 0x1B6F7F0
	052 Move V1, [X31]
	053 Move V0, [X31+16]
	054 Move W8, 1
	055 Move [X19+1090], W8
	056 Move X8, 0x2279000
	057 Move X8, [X8+1152]
	058 Move V0.S[1], V1.S[0]
	059 Add S5, S8, S10
	060 Add V3, V0, V9
	061 Move X8, [X8]
	062 Move X20, [X31+64]
	063 Move X19, [X31+72]
	064 Move X30, [X31+56]
	065 Move D9, [X31+40]
	066 Move D8, [X31+48]
	067 Move X8, [X8+184]
	068 Move V10, [X31+32]
	069 Move V4, [X8+24]
	070 Move V2, [X8+32]
	071 Add V0, V4, V4
	072 Add S2, S2, S2
	073 Subtract V0, V3, V0
	074 Subtract S2, S5, S2
	075 Move S1, V0.S[1]
	076 Add X31, X31, 80
	077 Return X0
	078 Call 0x1B6FA1C

Method: UnityEngine.Vector3 get__capsulePoint1()

Disassembly:
	0x01CD5D44 B 0x1CD5D90
	0x01CD5D48 LDR X0, [X20]
	0x01CD5D4C LDR X19, [X19 + 0x40]
	0x01CD5D50 LDR W8, [X0 + 0xE0]
	0x01CD5D54 CBNZ W8, 0x1CD5D5C
	0x01CD5D58 BL 0x1B6E8F8
	0x01CD5D5C ADRP X8, 0x227A000
	0x01CD5D60 LDR X8, [X8 + 0xC50]
	0x01CD5D64 MOVZ W2, 0x7
	0x01CD5D68 MOV X1, X19
	0x01CD5D6C MOV X3, X31
	0x01CD5D70 LDR X0, [X8]
	0x01CD5D74 BL 0x1D69640
	0x01CD5D78 LDP X20, X19, [X31 + 0x60]
	0x01CD5D7C LDP X30, X21, [X31 + 0x50]
	0x01CD5D80 LDR V8, [X31 + 0x40]
	0x01CD5D84 ADD X31, X31, 0x70
	0x01CD5D88 RET
	0x01CD5D8C MOV X0, X31
	0x01CD5D90 LDR W1, [X19 + 0x68]
	0x01CD5D94 MOVZ W2, 0x1
	0x01CD5D98 MOV X3, X31
	0x01CD5D9C BL 0x1DA8258
	0x01CD5DA0 STUR X0, [X20 + 0x1C]
	0x01CD5DA4 STR S8, [X20 + 0x24]
	0x01CD5DA8 CBZ X20, 0x1CD5DCC
	0x01CD5DAC MOVZ W8, 0x60
	0x01CD5DB0 STR W8, [X20 + 0xC]
	0x01CD5DB4 LDR X0, [X19 + 0x38]
	0x01CD5DB8 CBZ X0, 0x1CD5DCC
	0x01CD5DBC MOV X1, X20
	0x01CD5DC0 MOV X2, X31
	0x01CD5DC4 BL 0x1D8A710
	0x01CD5DC8 B 0x1CD5BF0
	0x01CD5DCC BL 0x1B6EA1C
	0x01CD5DD0 STR X30, [X31 - 0x20]!
	0x01CD5DD4 STP X20, X19, [X31 + 0x10]
	0x01CD5DD8 LDR X1, [X0 + 0x98]
	0x01CD5DDC CBZ X1, 0x1CD5E38
	0x01CD5DE0 MOV X2, X31
	0x01CD5DE4 MOV X19, X0
	0x01CD5DE8 BL 0x3A9EAE8
	0x01CD5DEC LDR X20, [X19 + 0x78]
	0x01CD5DF0 STR X31, [X19 + 0x98]
	0x01CD5DF4 CBZ X20, 0x1CD5E48
	0x01CD5DF8 LDR W8, [X20 + 0x18]
	0x01CD5DFC CMP W8, 0x1
	0x01CD5E00 B.LT 0x1CD5E38
	0x01CD5E04 MOV W19, W31
	0x01CD5E08 CMP W19, W8
	0x01CD5E0C B.CS 0x1CD5E44
	0x01CD5E10 ADD X8, X20, W19, 0x3, SXTW
	0x01CD5E14 LDR X0, [X8 + 0x20]
	0x01CD5E18 CBZ X0, 0x1CD5E48
	0x01CD5E1C MOV W1, W31
	0x01CD5E20 MOV X2, X31
	0x01CD5E24 BL 0x3A9A604
	0x01CD5E28 LDR W8, [X20 + 0x18]
	0x01CD5E2C ADD W19, W19, 0x1
	0x01CD5E30 CMP W19, W8
	0x01CD5E34 B.LT 0x1CD5E08
	0x01CD5E38 LDP X20, X19, [X31 + 0x10]
	0x01CD5E3C LDR X30, [X31], #0x20
	0x01CD5E40 RET

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D10
	003 Move [X31+40], D9
	004 Move [X31+48], D8
	005 Move [X31+56], X30
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X20, 0x254F000
	009 Move W8, [X20+1520]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x227B000
	016 Move X0, [X0+3096]
	017 Call 0x1B6F7F0
	018 Move W8, 1
	019 Move [X20+1520], W8
	020 Move X0, X19
	021 Move X1, X31
	022 Call Component.get_transform, X0
	023 Compare X0, 0
	024 JumpIfEqual {78}
	025 Move X19, 0x227B000
	026 Move X19, [X19+3096]
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X0, [X19]
	030 Move V8, V2
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {40}
	034 Move [X31], V1
	035 Move [X31+8], V0
	036 Call 0x1B6F8F8
	037 Move V1, [X31]
	038 Move V0, [X31+16]
	039 Move X0, [X19]
	040 Move X8, [X0+184]
	041 Move X19, 0x254F000
	042 Move W9, [X19+1090]
	043 Move V9, [X8]
	044 Move V10, [X8+8]
	045 Compare W9, 0
	046 JumpIfNotEqual {56}
	047 Move X0, 0x2279000
	048 Move X0, [X0+1152]
	049 Move [X31], V1
	050 Move [X31+8], V0
	051 Call 0x1B6F7F0
	052 Move V1, [X31]
	053 Move V0, [X31+16]
	054 Move W8, 1
	055 Move [X19+1090], W8
	056 Move X8, 0x2279000
	057 Move X8, [X8+1152]
	058 Move V0.S[1], V1.S[0]
	059 Add S5, S8, S10
	060 Add V3, V0, V9
	061 Move X8, [X8]
	062 Move X20, [X31+64]
	063 Move X19, [X31+72]
	064 Move X30, [X31+56]
	065 Move D9, [X31+40]
	066 Move D8, [X31+48]
	067 Move X8, [X8+184]
	068 Move V10, [X31+32]
	069 Move V4, [X8+24]
	070 Move V2, [X8+32]
	071 Add V0, V4, V4
	072 Add S2, S2, S2
	073 Add V0, V3, V0
	074 Add S2, S5, S2
	075 Move S1, V0.S[1]
	076 Add X31, X31, 80
	077 Return X0
	078 Call 0x1B6FA1C

Method: System.Void Spawned()

Disassembly:
	0x01CD5E44 BL 0x1B6EA24
	0x01CD5E48 BL 0x1B6EA1C
	0x01CD5E4C STP D11, D10, [X31 - 0x30]!
	0x01CD5E50 STP D9, D8, [X31 + 0x10]
	0x01CD5E54 STP X30, X19, [X31 + 0x20]
	0x01CD5E58 LDR X1, [X0 + 0x90]
	0x01CD5E5C MOV V8.16B, V3.16B
	0x01CD5E60 MOV V9.16B, V2.16B
	0x01CD5E64 MOV V10.16B, V1.16B
	0x01CD5E68 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call NetworkBehaviour.Spawned, X0
	006 Move X8, [X19]
	007 Move X0, X19
	008 Move X2, [X8+584]
	009 Move X1, [X8+592]
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 CallNoReturn X2

Method: System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)

Disassembly:
	0x01CD5E6C MOV V11.16B, V0.16B
	0x01CD5E70 CBZ X1, 0x1CD5E80
	0x01CD5E74 MOV X0, X19

ISIL:
	001 And W2, W2, 1
	002 Move X3, X31
	003 Call NetworkBehaviour.Despawned, X0, X1, X2
	004 Return 

Method: System.Void Setup()

Disassembly:
	0x01CD5E78 MOV X2, X31
	0x01CD5E7C BL 0x3A9EAE8
	0x01CD5E80 MOV X0, X19
	0x01CD5E84 MOV V0.16B, V11.16B
	0x01CD5E88 MOV V1.16B, V10.16B
	0x01CD5E8C MOV V2.16B, V9.16B
	0x01CD5E90 MOV V3.16B, V8.16B
	0x01CD5E94 BL 0x1CD768C
	0x01CD5E98 MOV X1, X0
	0x01CD5E9C STR X0, [X19 + 0x90]
	0x01CD5EA0 MOV X0, X19
	0x01CD5EA4 LDP X30, X19, [X31 + 0x20]
	0x01CD5EA8 LDP D9, D8, [X31 + 0x10]
	0x01CD5EAC MOV X2, X31
	0x01CD5EB0 LDP D11, D10, [X31], #0x30
	0x01CD5EB4 B 0x3A9E9B0
	0x01CD5EB8 SUB X31, X31, 0xC0
	0x01CD5EBC STR X30, [X31 + 0x80]
	0x01CD5EC0 STP X24, X23, [X31 + 0x90]
	0x01CD5EC4 STP X22, X21, [X31 + 0xA0]
	0x01CD5EC8 STP X20, X19, [X31 + 0xB0]
	0x01CD5ECC ADRP X21, 0x254E000
	0x01CD5ED0 LDRB W8, [X21 + 0x5F5]
	0x01CD5ED4 MOV X19, X1
	0x01CD5ED8 MOV X20, X0
	0x01CD5EDC TBNZ X8, 0x0, 0x1CD5FB4
	0x01CD5EE0 ADRP X0, 0x2278000
	0x01CD5EE4 LDR X0, [X0 + 0x9A0]
	0x01CD5EE8 BL 0x1B6E7F0
	0x01CD5EEC ADRP X0, 0x227A000
	0x01CD5EF0 LDR X0, [X0 + 0xC58]
	0x01CD5EF4 BL 0x1B6E7F0
	0x01CD5EF8 ADRP X0, 0x2279000
	0x01CD5EFC LDR X0, [X0 + 0xA18]
	0x01CD5F00 BL 0x1B6E7F0
	0x01CD5F04 ADRP X0, 0x2279000
	0x01CD5F08 LDR X0, [X0 + 0xA20]
	0x01CD5F0C BL 0x1B6E7F0
	0x01CD5F10 ADRP X0, 0x2279000
	0x01CD5F14 LDR X0, [X0 + 0xA28]
	0x01CD5F18 BL 0x1B6E7F0
	0x01CD5F1C ADRP X0, 0x2279000
	0x01CD5F20 LDR X0, [X0 + 0x4B8]
	0x01CD5F24 BL 0x1B6E7F0
	0x01CD5F28 ADRP X0, 0x227A000
	0x01CD5F2C LDR X0, [X0 + 0xC60]
	0x01CD5F30 BL 0x1B6E7F0
	0x01CD5F34 ADRP X0, 0x2278000
	0x01CD5F38 LDR X0, [X0 + 0x5F8]
	0x01CD5F3C BL 0x1B6E7F0
	0x01CD5F40 ADRP X0, 0x2279000
	0x01CD5F44 LDR X0, [X0 + 0xA30]
	0x01CD5F48 BL 0x1B6E7F0
	0x01CD5F4C ADRP X0, 0x2279000
	0x01CD5F50 LDR X0, [X0 + 0x7B8]
	0x01CD5F54 BL 0x1B6E7F0
	0x01CD5F58 ADRP X0, 0x2279000
	0x01CD5F5C LDR X0, [X0 + 0x7C0]
	0x01CD5F60 BL 0x1B6E7F0
	0x01CD5F64 ADRP X0, 0x2279000
	0x01CD5F68 LDR X0, [X0 + 0x7C8]
	0x01CD5F6C BL 0x1B6E7F0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X10, [X0+184]
	005 Compare X10, 0
	006 JumpIfEqual {74}
	007 Move W9, [X10+24]
	008 Move X19, X0
	009 Move X8, X31
	010 Add X10, X10, 32
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X11, [X10]
	013 Compare X11, 0
	014 JumpIfEqual {74}
	015 Move [X11+40], W31
	016 Move [X11+44], W8
	017 Add X8, X8, 1
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move [X11+32], X19
	020 Move X0, [X19+64]
	021 Compare X0, 0
	022 JumpIfEqual {57}
	023 Move W8, [X0+96]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 2
	026 Compare TEMP, 2
	027 JumpIfEqual {57}
	028 Move X1, X31
	029 Call NetworkObject.get_HasStateAuthority, X0
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {57}
	034 Move W1, 11
	035 Move W0, W31
	036 Move X2, X31
	037 Call Random.Range, X0, X1
	038 Move W1, W0
	039 Move X0, X19
	040 Call ItemSellingMachineController.set_randomButtonId, X0, X1
	041 Move X0, X19
	042 Move W1, W31
	043 Call ItemSellingMachineController.set_isSellingInProgress, X0, X1
	044 Move X0, X19
	045 Move W1, W31
	046 Call ItemSellingMachineController.set_isOverheated, X0, X1
	047 Move X0, X19
	048 Move W1, W31
	049 Call ItemSellingMachineController.set_isExploded, X0, X1
	050 Move X0, X19
	051 Move W1, W31
	052 Call ItemSellingMachineController.set_itemSoldValue, X0, X1
	053 Move X0, X19
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X30, [X31+32]
	057 Move X0, X19
	058 Call ItemSellingMachineController.OnButtonStateChanged, X0
	059 Move X0, X19
	060 Call ItemSellingMachineController.HandleIsExploded, X0
	061 Move X20, [X19+176]
	062 Move X0, X19
	063 Call ItemSellingMachineController.get_isOverheated, X0
	064 Compare X20, 0
	065 JumpIfEqual {74}
	066 And W1, W0, 1
	067 Move X0, X20
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Call ItemSellingMachineView.SetOverheatedColor, X0, X1
	072 Return 
	073 Call 0x1B6FA24
	074 Call 0x1B6FA1C

Method: System.Void ResetButtonsState()

Disassembly:
	0x01CD5F70 ADRP X0, 0x2279000
	0x01CD5F74 LDR X0, [X0 + 0x7D0]
	0x01CD5F78 BL 0x1B6E7F0
	0x01CD5F7C ADRP X0, 0x227A000
	0x01CD5F80 LDR X0, [X0 + 0xC68]
	0x01CD5F84 BL 0x1B6E7F0
	0x01CD5F88 ADRP X0, 0x2279000
	0x01CD5F8C LDR X0, [X0 + 0x7E0]
	0x01CD5F90 BL 0x1B6E7F0
	0x01CD5F94 ADRP X0, 0x2279000
	0x01CD5F98 LDR X0, [X0 + 0x420]
	0x01CD5F9C BL 0x1B6E7F0
	0x01CD5FA0 ADRP X0, 0x227A000
	0x01CD5FA4 LDR X0, [X0 + 0xC70]
	0x01CD5FA8 BL 0x1B6E7F0
	0x01CD5FAC MOVZ W8, 0x1
	0x01CD5FB0 STRB W8, [X21 + 0x5F5]
	0x01CD5FB4 STR X31, [X31 + 0x88]
	0x01CD5FB8 STP X31, X31, [X31 + 0x60]
	0x01CD5FBC STR X31, [X31 + 0x70]
	0x01CD5FC0 CBZ X19, 0x1CD6278
	0x01CD5FC4 LDR X8, [X19 + 0x80]
	0x01CD5FC8 CBZ X8, 0x1CD6278
	0x01CD5FCC LDRB W8, [X8 + 0x28]
	0x01CD5FD0 TBNZ X8, 0x0, 0x1CD5FF4
	0x01CD5FD4 LDR X0, [X20 + 0xE8]
	0x01CD5FD8 CBZ X0, 0x1CD6278
	0x01CD5FDC ADRP X8, 0x227A000
	0x01CD5FE0 LDR X8, [X8 + 0xC60]
	0x01CD5FE4 MOV X1, X19
	0x01CD5FE8 LDR X2, [X8]
	0x01CD5FEC BL 0x2BD397C
	0x01CD5FF0 TBZ X0, 0x0, 0x1CD5FFC
	0x01CD5FF4 MOV W21, W31
	0x01CD5FF8 B 0x1CD6250
	0x01CD5FFC ADRP X8, 0x2279000
	0x01CD6000 LDR X8, [X8 + 0x420]
	0x01CD6004 MOV X0, X19
	0x01CD6008 MOV X2, X31
	0x01CD600C LDR X1, [X8]
	0x01CD6010 BL 0x3A9B614
	0x01CD6014 TBZ X0, 0x0, 0x1CD60CC
	0x01CD6018 ADRP X8, 0x2279000
	0x01CD601C LDR X8, [X8 + 0xC58]
	0x01CD6020 ADD X1, X31, 0x88
	0x01CD6024 MOV X0, X19
	0x01CD6028 LDR X2, [X8]
	0x01CD602C BL 0x2090EE4
	0x01CD6030 TBZ X0, 0x0, 0x1CD60CC
	0x01CD6034 LDR X0, [X31 + 0x88]
	0x01CD6038 CBZ X0, 0x1CD6278
	0x01CD603C MOV X1, X31
	0x01CD6040 BL 0x1CA9898
	0x01CD6044 LDR X8, [X31 + 0x88]
	0x01CD6048 CBZ X8, 0x1CD6278
	0x01CD604C MOV X21, X0
	0x01CD6050 MOV X0, X8
	0x01CD6054 MOV X1, X31
	0x01CD6058 BL 0x1CA9818
	0x01CD605C CBZ X21, 0x1CD6278
	0x01CD6060 ADRP X8, 0x2278000
	0x01CD6064 LDR X8, [X8 + 0xA30]
	0x01CD6068 MOV X0, X21
	0x01CD606C LDR X1, [X8]
	0x01CD6070 ADD X8, X31, 0x48
	0x01CD6074 BL 0x2E470E0

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+112], X22
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Move X20, 0x254F000
	008 Move W8, [X20+1521]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x227B000
	015 Move X0, [X0+2768]
	016 Call 0x1B6F7F0
	017 Move X0, 0x227B000
	018 Move X0, [X0+2776]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X20+1521], W8
	022 Move [X31+64], X31
	023 Move [X31+72], X31
	024 Move [X31+80], X31
	025 Move [X31+32], X31
	026 Move [X31+40], X31
	027 Move [X31+48], X31
	028 Move X0, [X19+64]
	029 Compare X0, 0
	030 JumpIfEqual {75}
	031 Move W8, [X0+96]
	032 Move TEMP, X8
	033 And TEMP, TEMP, 2
	034 Compare TEMP, 2
	035 JumpIfEqual {75}
	036 Move X1, X31
	037 Call NetworkObject.get_HasStateAuthority, X0
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {75}
	042 Move X21, 0x227B000
	043 Move X22, 0x227B000
	044 Move X21, [X21+2776]
	045 Move X22, [X22+2768]
	046 Move W20, W31
	047 Add X8, X31, 8
	048 Move X0, X19
	049 Call ItemSellingMachineController.get_isButtonPressed, X0
	050 NotImplemented "Instruction LDUR not yet implemented."
	051 Move X8, [X31+24]
	052 Move X3, [X21]
	053 Add X0, X31, 64
	054 Move W1, W20
	055 Move W2, W31
	056 Move [X31+4], V0
	057 Move [X31+80], X8
	058 Call 0x22AE29C, X0, X1, X2
	059 Add X8, X31, 8
	060 Move X0, X19
	061 Call ItemSellingMachineController.get__timerResetButton, X0
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 Move X8, [X31+24]
	064 Move X0, X31
	065 Move [X31+2], V0
	066 Move [X31+48], X8
	067 Call TickTimer.get_None
	068 Move X3, [X22]
	069 And X2, X0, 0
	070 Add X0, X31, 32
	071 Move W1, W20
	072 Call NetworkArray`1<TickTimer>.Set, X0, X1, X2
	073 Add W20, W20, 1
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X20, [X31+128]
	076 Move X19, [X31+136]
	077 Move X22, [X31+112]
	078 Move X21, [X31+120]
	079 Move X30, [X31+96]
	080 Add X31, X31, 144
	081 Return 

Method: System.Void OnButtonStateChanged()

Disassembly:
	0x01CD6078 LDUR V0, [X31 + 0x48]
	0x01CD607C LDR X8, [X31 + 0x58]
	0x01CD6080 ADRP X22, 0x2278000
	0x01CD6084 MOV W23, W31
	0x01CD6088 STR V0, [X31 + 0x6]
	0x01CD608C STR X8, [X31 + 0x70]
	0x01CD6090 LDR X22, [X22 + 0xA20]
	0x01CD6094 LDR X1, [X22]
	0x01CD6098 ADD X0, X31, 0x60
	0x01CD609C BL 0x2A14F30
	0x01CD60A0 TBZ X0, 0x0, 0x1CD60D4
	0x01CD60A4 LDR X21, [X31 + 0x70]
	0x01CD60A8 MOV X0, X19
	0x01CD60AC MOV X1, X31
	0x01CD60B0 BL 0x1C9A864
	0x01CD60B4 TBZ X0, 0x0, 0x1CD6094
	0x01CD60B8 MOV X0, X20
	0x01CD60BC MOV X1, X21
	0x01CD60C0 BL 0x1CD5EB8
	0x01CD60C4 ADD W23, W0, W23
	0x01CD60C8 B 0x1CD6094
	0x01CD60CC MOV W23, W31
	0x01CD60D0 B 0x1CD60E8
	0x01CD60D4 ADRP X8, 0x2278000
	0x01CD60D8 LDR X8, [X8 + 0xA18]
	0x01CD60DC ADD X0, X31, 0x60
	0x01CD60E0 LDR X1, [X8]
	0x01CD60E4 BL 0x2A14F2C
	0x01CD60E8 LDR X0, [X20 + 0xE8]
	0x01CD60EC CBZ X0, 0x1CD6278
	0x01CD60F0 ADRP X8, 0x2278000
	0x01CD60F4 LDR X8, [X8 + 0x4B8]
	0x01CD60F8 MOV X1, X19
	0x01CD60FC LDR X2, [X8]
	0x01CD6100 BL 0x2BD43FC
	0x01CD6104 LDR X21, [X19 + 0x80]
	0x01CD6108 CBZ X21, 0x1CD6278
	0x01CD610C ADRP X8, 0x2278000
	0x01CD6110 LDR W22, [X21 + 0x24]
	0x01CD6114 LDR X8, [X8 + 0x7C0]
	0x01CD6118 MOVZ W1, 0x3
	0x01CD611C LDR X0, [X8]
	0x01CD6120 BL 0x1B6E868
	0x01CD6124 MOV X20, X0
	0x01CD6128 MOV X0, X21
	0x01CD612C MOV X1, X31
	0x01CD6130 BL 0x3AA0C88
	0x01CD6134 ADRP X8, 0x2278000
	0x01CD6138 ADRP X24, 0x2278000
	0x01CD613C LDR X8, [X8 + 0x7E0]
	0x01CD6140 LDR X24, [X24 + 0x7C8]
	0x01CD6144 MOV X2, X0
	0x01CD6148 ADD X0, X31, 0x30
	0x01CD614C LDR X1, [X8]
	0x01CD6150 LDR X3, [X24]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+72], X23
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move X20, 0x254E000
	009 Move W8, [X20+1522]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x227A000
	016 Move X0, [X0+3104]
	017 Call 0x1B6F7F0
	018 Move W8, 1
	019 Move [X20+1522], W8
	020 Move X23, 0x227A000
	021 Move X23, [X23+3104]
	022 Move X20, X31
	023 Move [X31+32], X31
	024 Move [X31+40], X31
	025 Move [X31+48], X31
	026 Move X8, [X19+184]
	027 Compare X8, 0
	028 JumpIfEqual {64}
	029 Move W9, [X8+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Add X8, X8, X20
	032 Move X21, [X8+32]
	033 Add X8, X31, 8
	034 Move X0, X19
	035 Call ItemSellingMachineController.get_isButtonPressed, X0
	036 NotImplemented "Instruction LDUR not yet implemented."
	037 Move X8, [X31+24]
	038 Move X2, [X23]
	039 Add X0, X31, 32
	040 Move W1, W20
	041 Move [X31+2], V0
	042 Move [X31+48], X8
	043 Call 0x22ADEE4, X0, X1
	044 Move W22, W0
	045 Move X0, X19
	046 Call ItemSellingMachineController.get_randomButtonId, X0
	047 Compare X21, 0
	048 JumpIfEqual {64}
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSET not yet implemented."
	051 And W1, W22, 1
	052 Move X0, X21
	053 Call ItemSellingMachineButtonView.SetBackButtonEmission, X0, X1, X2
	054 Add X20, X20, 1
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X20, [X31+96]
	057 Move X19, [X31+104]
	058 Move X22, [X31+80]
	059 Move X21, [X31+88]
	060 Move X30, [X31+64]
	061 Move X23, [X31+72]
	062 Add X31, X31, 112
	063 Return 
	064 Call 0x1B6FA1C
	065 Call 0x1B6FA24

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01CD629C LDR X22, [X0]
	0x01CD62A0 BL 0x3D19850
	0x01CD62A4 ADRP X8, 0x2278000
	0x01CD62A8 LDR X8, [X8 + 0xA18]
	0x01CD62AC ADD X0, X31, 0x60
	0x01CD62B0 LDR X1, [X8]
	0x01CD62B4 BL 0x2A14F2C
	0x01CD62B8 CBZ X22, 0x1CD60E8
	0x01CD62BC MOV X0, X22
	0x01CD62C0 BL 0x1B6EA14
	0x01CD62C4 MOV X22, X31
	0x01CD62C8 B 0x1CD62D0
	0x01CD62CC MOV X21, X0
	0x01CD62D0 ADRP X8, 0x2278000
	0x01CD62D4 LDR X8, [X8 + 0xA18]
	0x01CD62D8 LDR X1, [X8]
	0x01CD62DC ADD X0, X31, 0x60
	0x01CD62E0 BL 0x2A14F2C
	0x01CD62E4 CBNZ X22, 0x1CD62F0
	0x01CD62E8 MOV X0, X21
	0x01CD62EC BL 0x1C8418C
	0x01CD62F0 MOV X0, X22
	0x01CD62F4 BL 0x1B6EA14
	0x01CD62F8 BL 0x18F46A8
	0x01CD62FC STP X30, X21, [X31 - 0x20]!
	0x01CD6300 STP X20, X19, [X31 + 0x10]
	0x01CD6304 ADRP X21, 0x254D000
	0x01CD6308 LDRB W8, [X21 + 0x5F9]
	0x01CD630C MOV W19, W1
	0x01CD6310 MOV X20, X0
	0x01CD6314 TBNZ X8, 0x0, 0x1CD6338
	0x01CD6318 ADRP X0, 0x2278000
	0x01CD631C LDR X0, [X0 + 0x1C0]
	0x01CD6320 BL 0x1B6E7F0
	0x01CD6324 ADRP X0, 0x2279000
	0x01CD6328 LDR X0, [X0 + 0xC78]
	0x01CD632C BL 0x1B6E7F0
	0x01CD6330 MOVZ W8, 0x1
	0x01CD6334 STRB W8, [X21 + 0x5F9]
	0x01CD6338 LDRB W8, [X20 + 0x58]
	0x01CD633C CBZ W8, 0x1CD6368
	0x01CD6340 STRB W31, [X20 + 0x58]
	0x01CD6344 TBNZ X19, 0x1F, 0x1CD63A4
	0x01CD6348 LDR X0, [X20 + 0xB0]
	0x01CD634C CBZ X0, 0x1CD649C
	0x01CD6350 MOV W1, W19
	0x01CD6354 BL 0x1CD6914
	0x01CD6358 MOV W0, W19
	0x01CD635C LDP X20, X19, [X31 + 0x10]
	0x01CD6360 LDP X30, X21, [X31], #0x20
	0x01CD6364 B 0x1CD2B3C
	0x01CD6368 ADRP X21, 0x2278000
	0x01CD636C LDR X21, [X21 + 0x1C0]
	0x01CD6370 LDR X0, [X21]
	0x01CD6374 LDR W8, [X0 + 0xE0]
	0x01CD6378 CBNZ W8, 0x1CD6380
	0x01CD637C BL 0x1B6E8F8
	0x01CD6380 MOV X0, X20
	0x01CD6384 MOV X1, X31
	0x01CD6388 BL 0x1D697C8
	0x01CD638C LDR X0, [X20 + 0x38]
	0x01CD6390 CBZ X0, 0x1CD649C
	0x01CD6394 MOV X1, X31
	0x01CD6398 BL 0x1D87040
	0x01CD639C CMP W0, 0x4
	0x01CD63A0 B.NE 0x1CD63B0
	0x01CD63A4 LDP X20, X19, [X31 + 0x10]
	0x01CD63A8 LDP X30, X21, [X31], #0x20
	0x01CD63AC RET
	0x01CD63B0 LDR X0, [X20 + 0x40]
	0x01CD63B4 CBZ X0, 0x1CD649C
	0x01CD63B8 MOV X1, X31
	0x01CD63BC BL 0x1D9F538
	0x01CD63C0 ANDS W31, W0, 0x7
	0x01CD63C4 B.EQ 0x1CD6424
	0x01CD63C8 LDR X8, [X20 + 0x38]
	0x01CD63CC CBZ X8, 0x1CD649C
	0x01CD63D0 LDR X0, [X8 + 0x50]
	0x01CD63D4 CBZ X0, 0x1CD649C
	0x01CD63D8 MOV X1, X31
	0x01CD63DC BL 0x1DBEFE4
	0x01CD63E0 TBZ X0, 0x0, 0x1CD6344
	0x01CD63E4 LDR X8, [X20 + 0x38]
	0x01CD63E8 CBZ X8, 0x1CD649C
	0x01CD63EC LDR X0, [X8 + 0x50]
	0x01CD63F0 MOVZ W1, 0xC
	0x01CD63F4 MOV X2, X31
	0x01CD63F8 BL 0x1DD601C
	0x01CD63FC MOV X21, X0
	0x01CD6400 MOVZ W0, 0x1
	0x01CD6404 MOV X1, X31
	0x01CD6408 BL 0x1D29EBC
	0x01CD640C LDR X8, [X20 + 0x40]
	0x01CD6410 CBZ X8, 0x1CD649C
	0x01CD6414 LDR X8, [X8 + 0x20]
	0x01CD6418 CBZ X8, 0x1CD645C
	0x01CD641C LDR W0, [X8]
	0x01CD6420 B 0x1CD6460
	0x01CD6424 LDR X0, [X21]
	0x01CD6428 LDR X19, [X20 + 0x40]
	0x01CD642C LDR W8, [X0 + 0xE0]
	0x01CD6430 CBNZ W8, 0x1CD6438
	0x01CD6434 BL 0x1B6E8F8
	0x01CD6438 ADRP X8, 0x2279000
	0x01CD643C LDR X8, [X8 + 0xC78]
	0x01CD6440 MOV X1, X19
	0x01CD6444 LDP X20, X19, [X31 + 0x10]
	0x01CD6448 MOVZ W2, 0x7
	0x01CD644C LDR X0, [X8]
	0x01CD6450 MOV X3, X31
	0x01CD6454 LDP X30, X21, [X31], #0x20
	0x01CD6458 B 0x1D69640
	0x01CD645C MOV X0, X31
	0x01CD6460 LDR W1, [X20 + 0x68]
	0x01CD6464 MOVZ W2, 0x4
	0x01CD6468 MOV X3, X31
	0x01CD646C BL 0x1DA8258
	0x01CD6470 STUR X0, [X21 + 0x1C]
	0x01CD6474 STR W19, [X21 + 0x24]
	0x01CD6478 CBZ X21, 0x1CD649C
	0x01CD647C MOVZ W8, 0x60
	0x01CD6480 STR W8, [X21 + 0xC]
	0x01CD6484 LDR X0, [X20 + 0x38]
	0x01CD6488 CBZ X0, 0x1CD649C
	0x01CD648C MOV X1, X21
	0x01CD6490 MOV X2, X31
	0x01CD6494 BL 0x1D8A710
	0x01CD6498 B 0x1CD6344
	0x01CD649C BL 0x1B6EA1C
	0x01CD64A0 STR X30, [X31 - 0x20]!
	0x01CD64A4 STP X20, X19, [X31 + 0x10]
	0x01CD64A8 LDR X20, [X0 + 0xB0]
	0x01CD64AC MOV X19, X0
	0x01CD64B0 BL 0x1CD44BC
	0x01CD64B4 CBZ X20, 0x1CD6508
	0x01CD64B8 AND W1, W0, 0x1
	0x01CD64BC MOV X0, X20
	0x01CD64C0 BL 0x1CD5178
	0x01CD64C4 MOV X0, X19
	0x01CD64C8 BL 0x1CD44BC
	0x01CD64CC TBZ X0, 0x0, 0x1CD64FC
	0x01CD64D0 LDR X0, [X19 + 0xC8]
	0x01CD64D4 CBZ X0, 0x1CD6508
	0x01CD64D8 LDR X19, [X19 + 0xD8]
	0x01CD64DC MOV X1, X31
	0x01CD64E0 BL 0x3AA7658
	0x01CD64E4 MOV X0, X19
	0x01CD64E8 LDP X20, X19, [X31 + 0x10]
	0x01CD64EC FMOV S3, 1
	0x01CD64F0 MOV X1, X31
	0x01CD64F4 LDR X30, [X31], #0x20
	0x01CD64F8 B 0x1CCD9CC
	0x01CD64FC LDP X20, X19, [X31 + 0x10]
	0x01CD6500 LDR X30, [X31], #0x20
	0x01CD6504 RET
	0x01CD6508 BL 0x1B6EA1C
	0x01CD650C STR D8, [X31 - 0x40]!
	0x01CD6510 STR X30, [X31 + 0x8]
	0x01CD6514 STP X24, X23, [X31 + 0x10]
	0x01CD6518 STP X22, X21, [X31 + 0x20]
	0x01CD651C STP X20, X19, [X31 + 0x30]
	0x01CD6520 ADRP X21, 0x254D000
	0x01CD6524 LDRB W8, [X21 + 0x606]
	0x01CD6528 MOV W19, W1
	0x01CD652C MOV X20, X0
	0x01CD6530 TBNZ X8, 0x0, 0x1CD6548
	0x01CD6534 ADRP X0, 0x2279000
	0x01CD6538 LDR X0, [X0 + 0xC28]
	0x01CD653C BL 0x1B6E7F0
	0x01CD6540 MOVZ W8, 0x1
	0x01CD6544 STRB W8, [X21 + 0x606]
	0x01CD6548 LDR X8, [X20 + 0x30]
	0x01CD654C CBZ X8, 0x1CD6608
	0x01CD6550 ADRP X24, 0x2279000
	0x01CD6554 LDR X24, [X24 + 0xC28]
	0x01CD6558 MOV X22, X31
	0x01CD655C MOV X23, X31
	0x01CD6560 FMOV S8, 0.5
	0x01CD6564 LDR W9, [X8 + 0x18]
	0x01CD6568 CMP W23, W9
	0x01CD656C B.GE 0x1CD660C
	0x01CD6570 CMP W23, W9
	0x01CD6574 B.CS 0x1CD6624
	0x01CD6578 ADD X8, X8, X23, 0x3, LSL
	0x01CD657C LDR X0, [X8 + 0x20]
	0x01CD6580 CBZ X0, 0x1CD6608
	0x01CD6584 MOV X1, X31
	0x01CD6588 BL 0x3A7BCC8
	0x01CD658C LDR X8, [X24]
	0x01CD6590 MOV X21, X0
	0x01CD6594 LDR W9, [X8 + 0xE0]
	0x01CD6598 CBNZ W9, 0x1CD65A8
	0x01CD659C MOV X0, X8
	0x01CD65A0 BL 0x1B6E8F8

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+96], D8
	003 Move [X31+104], X30
	004 Move [X31+112], X24
	005 Move [X31+120], X23
	006 Move [X31+128], X22
	007 Move [X31+136], X21
	008 Move [X31+144], X20
	009 Move [X31+152], X19
	010 Move X20, 0x254E000
	011 Move W8, [X20+1523]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0x227A000
	018 Move X0, [X0+2768]
	019 Call 0x1B6F7F0
	020 Move X0, 0x227A000
	021 Move X0, [X0+2776]
	022 Call 0x1B6F7F0
	023 Move X0, 0x227A000
	024 Move X0, [X0+3120]
	025 Call 0x1B6F7F0
	026 Move X0, 0x227A000
	027 Move X0, [X0+3104]
	028 Call 0x1B6F7F0
	029 Move W8, 1
	030 Move [X20+1523], W8
	031 Move X0, X19
	032 Move X1, X31
	033 Move [X31+64], X31
	034 Move [X31+72], X31
	035 Move [X31+80], X31
	036 Move [X31+32], X31
	037 Move [X31+40], X31
	038 Move [X31+48], X31
	039 Call NetworkBehaviour.FixedUpdateNetwork, X0
	040 Move X0, [X19+64]
	041 Compare X0, 0
	042 JumpIfEqual {223}
	043 Move W8, [X0+96]
	044 Move TEMP, X8
	045 And TEMP, TEMP, 2
	046 Compare TEMP, 2
	047 JumpIfEqual {223}
	048 Move X1, X31
	049 Call NetworkObject.get_HasStateAuthority, X0
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {223}
	054 Move X0, X19
	055 Call ItemSellingMachineController.get__timerItemSell, X0
	056 Move [X31+88], W0
	057 Move X1, [X19+56]
	058 Add X0, X31, 88
	059 Move X2, X31
	060 Call TickTimer.Expired, X0, X1
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {72}
	065 Move X0, X31
	066 Call TickTimer.get_None
	067 And X1, X0, 0
	068 Move X0, X19
	069 Call ItemSellingMachineController.set__timerItemSell, X0, X1
	070 Move X0, X19
	071 Call ItemSellingMachineController.DespawnItemsKillPlayersAndStoreValues, X0
	072 Move X0, X19
	073 Call ItemSellingMachineController.get__timerAnimationFinished, X0
	074 Move [X31+88], W0
	075 Move X1, [X19+56]
	076 Add X0, X31, 88
	077 Move X2, X31
	078 Call TickTimer.Expired, X0, X1
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {90}
	083 Move X0, X19
	084 Call ItemSellingMachineController.OnItemSellingAnimationFinished, X0
	085 Move X0, X31
	086 Call TickTimer.get_None
	087 And X1, X0, 0
	088 Move X0, X19
	089 Call ItemSellingMachineController.set__timerAnimationFinished, X0, X1
	090 Move X0, X19
	091 Call ItemSellingMachineController.get__timerRecoverExplosion, X0
	092 Move [X31+88], W0
	093 Move X1, [X19+56]
	094 Add X0, X31, 88
	095 Move X2, X31
	096 Call TickTimer.Expired, X0, X1
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {108}
	101 Move X0, X19
	102 Call ItemSellingMachineController.RPC_RecoverExplosion, X0
	103 Move X0, X31
	104 Call TickTimer.get_None
	105 And X1, X0, 0
	106 Move X0, X19
	107 Call ItemSellingMachineController.set__timerRecoverExplosion, X0, X1
	108 Move X0, X19
	109 Call ItemSellingMachineController.get_isSellingInProgress, X0
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfEqual {192}
	114 Move X0, X19
	115 Call ItemSellingMachineController.get_isExploded, X0
	116 Move TEMP, X0
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfEqual {192}
	120 Move X21, 0x227A000
	121 Move X22, 0x227A000
	122 Move X23, 0x227A000
	123 Move X24, 0x227A000
	124 Move X21, [X21+3104]
	125 Move X22, [X22+3120]
	126 Move X23, [X23+2776]
	127 Move X24, [X24+2768]
	128 Move W20, W31
	129 Add X8, X31, 8
	130 Move X0, X19
	131 Call ItemSellingMachineController.get_isButtonPressed, X0
	132 NotImplemented "Instruction LDUR not yet implemented."
	133 Move X8, [X31+24]
	134 Move X2, [X21]
	135 Add X0, X31, 64
	136 Move W1, W20
	137 Move [X31+4], V0
	138 Move [X31+80], X8
	139 Call 0x22ADEE4, X0, X1
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfNotEqual {190}
	144 Add X8, X31, 8
	145 Move X0, X19
	146 Call ItemSellingMachineController.get__timerResetButton, X0
	147 NotImplemented "Instruction LDUR not yet implemented."
	148 Move X8, [X31+24]
	149 Move X2, [X22]
	150 Add X0, X31, 32
	151 Move W1, W20
	152 Move [X31+2], V0
	153 Move [X31+48], X8
	154 Call NetworkArray`1<TickTimer>.get_Item, X0, X1
	155 Move [X31+88], W0
	156 Move X1, [X19+56]
	157 Add X0, X31, 88
	158 Move X2, X31
	159 Call TickTimer.Expired, X0, X1
	160 Move TEMP, X0
	161 And TEMP, TEMP, 1
	162 Compare TEMP, 1
	163 JumpIfNotEqual {190}
	164 Add X8, X31, 8
	165 Move X0, X19
	166 Call ItemSellingMachineController.get_isButtonPressed, X0
	167 NotImplemented "Instruction LDUR not yet implemented."
	168 Move X8, [X31+24]
	169 Move X3, [X23]
	170 Add X0, X31, 64
	171 Move W1, W20
	172 Move W2, W31
	173 Move [X31+4], V0
	174 Move [X31+80], X8
	175 Call 0x22AE29C, X0, X1, X2
	176 Add X8, X31, 8
	177 Move X0, X19
	178 Call ItemSellingMachineController.get__timerResetButton, X0
	179 NotImplemented "Instruction LDUR not yet implemented."
	180 Move X8, [X31+24]
	181 Move X0, X31
	182 Move [X31+2], V0
	183 Move [X31+48], X8
	184 Call TickTimer.get_None
	185 Move X3, [X24]
	186 And X2, X0, 0
	187 Add X0, X31, 32
	188 Move W1, W20
	189 Call NetworkArray`1<TickTimer>.Set, X0, X1, X2
	190 Add W20, W20, 1
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move X0, X19
	193 Call ItemSellingMachineController.get_heatMeter, X0
	194 NotImplemented "Instruction FCMP not yet implemented."
	195 Move X0, X19
	196 Call ItemSellingMachineController.get_heatMeter, X0
	197 Move X0, X19
	198 Move V8, V0
	199 Call ItemSellingMachineController.get_isOverheated, X0
	200 Compare X19, 0
	201 JumpIfEqual {233}
	202 Move X8, -19054592
	203 Move V0, [X8+2812]
	204 Move W8, 0x42480000
	205 And W31, W0, 1
	206 Move S1, W8
	207 NotImplemented "Instruction FCSEL not yet implemented."
	208 NotImplemented "Instruction FCMP not yet implemented."
	209 NotImplemented "Instruction CSET not yet implemented."
	210 Move X0, X19
	211 Call ItemSellingMachineController.set_isOverheated, X0, X1
	212 Move X0, X19
	213 Call ItemSellingMachineController.get_heatMeter, X0
	214 Move X0, [X19+56]
	215 Compare X0, 0
	216 JumpIfEqual {233}
	217 Move X1, X31
	218 Move V8, V0
	219 Call NetworkRunner.get_DeltaTime, X0
	220 Subtract S0, S8, S0
	221 Move X0, X19
	222 Call ItemSellingMachineController.set_heatMeter, X0, V0
	223 Move X20, [X31+144]
	224 Move X19, [X31+152]
	225 Move X22, [X31+128]
	226 Move X21, [X31+136]
	227 Move X24, [X31+112]
	228 Move X23, [X31+120]
	229 Move X30, [X31+104]
	230 Move V8, [X31+96]
	231 Add X31, X31, 160
	232 Return 
	233 Call 0x1B6FA1C

Method: System.Void RPC_StartItemSelling(System.Single randomWaitTime)

Disassembly:
	0x01CD6B8C MOV X0, X19
	0x01CD6B90 BL 0x1CD4458
	0x01CD6B94 LDRB W1, [X19 + 0x81]
	0x01CD6B98 MOV X0, X19
	0x01CD6B9C BL 0x1CD4524
	0x01CD6BA0 LDRB W1, [X19 + 0x82]
	0x01CD6BA4 MOV X0, X19
	0x01CD6BA8 BL 0x1CD45F0
	0x01CD6BAC LDR W1, [X19 + 0x84]
	0x01CD6BB0 MOV X0, X19
	0x01CD6BB4 BL 0x1CD46B4
	0x01CD6BB8 ADD X8, X31, 0x40
	0x01CD6BBC MOV X0, X19
	0x01CD6BC0 BL 0x1CD4714
	0x01CD6BC4 LDR V0, [X31 + 0x4]
	0x01CD6BC8 LDR X8, [X31 + 0x50]
	0x01CD6BCC LDR X0, [X20]
	0x01CD6BD0 STR V0, [X31 + 0x2]
	0x01CD6BD4 STR X8, [X31 + 0x30]
	0x01CD6BD8 LDR W8, [X0 + 0xE0]
	0x01CD6BDC LDR X20, [X19 + 0x88]
	0x01CD6BE0 CBNZ W8, 0x1CD6BE8
	0x01CD6BE4 BL 0x1B6E8F8
	0x01CD6BE8 LDR X2, [X23]
	0x01CD6BEC LDR V0, [X31 + 0x2]
	0x01CD6BF0 LDR X8, [X31 + 0x30]
	0x01CD6BF4 LDR X3, [X24]
	0x01CD6BF8 ADD X0, X31, 0x40
	0x01CD6BFC MOV X1, X20
	0x01CD6C00 STR V0, [X31 + 0x4]
	0x01CD6C04 STR X8, [X31 + 0x50]
	0x01CD6C08 BL 0x210F980
	0x01CD6C0C ADD X8, X31, 0x40
	0x01CD6C10 MOV X0, X19
	0x01CD6C14 BL 0x1CD47CC
	0x01CD6C18 LDR X8, [X31 + 0x50]
	0x01CD6C1C LDR V0, [X31 + 0x4]
	0x01CD6C20 LDR X2, [X22]
	0x01CD6C24 LDR X3, [X21]
	0x01CD6C28 STR X8, [X31 + 0x10]
	0x01CD6C2C STR V0, [X31]
	0x01CD6C30 LDR X1, [X19 + 0x90]
	0x01CD6C34 ADD X0, X31, 0x40
	0x01CD6C38 STR V0, [X31 + 0x4]
	0x01CD6C3C STR X8, [X31 + 0x50]
	0x01CD6C40 BL 0x210FD04
	0x01CD6C44 LDR W1, [X19 + 0x98]
	0x01CD6C48 MOV X0, X19
	0x01CD6C4C BL 0x1CD48E4
	0x01CD6C50 LDR W1, [X19 + 0x9C]
	0x01CD6C54 MOV X0, X19
	0x01CD6C58 BL 0x1CD49A4
	0x01CD6C5C LDR W1, [X19 + 0xA0]
	0x01CD6C60 MOV X0, X19
	0x01CD6C64 BL 0x1CD4A64
	0x01CD6C68 LDR W1, [X19 + 0xA4]
	0x01CD6C6C MOV X0, X19
	0x01CD6C70 BL 0x1CD4B24
	0x01CD6C74 LDR V0, [X19 + 0xA8]
	0x01CD6C78 MOV X0, X19
	0x01CD6C7C BL 0x1CD4BE4
	0x01CD6C80 LDP X20, X19, [X31 + 0x90]
	0x01CD6C84 LDP X22, X21, [X31 + 0x80]
	0x01CD6C88 LDP X24, X23, [X31 + 0x70]
	0x01CD6C8C LDR X30, [X31 + 0x60]
	0x01CD6C90 ADD X31, X31, 0xA0
	0x01CD6C94 RET
	0x01CD6C98 SUB X31, X31, 0x90
	0x01CD6C9C STR X30, [X31 + 0x60]
	0x01CD6CA0 STP X22, X21, [X31 + 0x70]
	0x01CD6CA4 STP X20, X19, [X31 + 0x80]
	0x01CD6CA8 ADRP X20, 0x254D000
	0x01CD6CAC ADRP X21, 0x2278000
	0x01CD6CB0 LDRB W8, [X20 + 0x5FE]
	0x01CD6CB4 LDR X21, [X21 + 0x1C0]
	0x01CD6CB8 MOV X19, X0
	0x01CD6CBC TBNZ X8, 0x0, 0x1CD6CEC
	0x01CD6CC0 ADRP X0, 0x2279000
	0x01CD6CC4 LDR X0, [X0 + 0xCB0]
	0x01CD6CC8 BL 0x1B6E7F0
	0x01CD6CCC ADRP X0, 0x2279000
	0x01CD6CD0 LDR X0, [X0 + 0xCB8]
	0x01CD6CD4 BL 0x1B6E7F0
	0x01CD6CD8 ADRP X0, 0x2278000
	0x01CD6CDC LDR X0, [X0 + 0x1C0]
	0x01CD6CE0 BL 0x1B6E7F0
	0x01CD6CE4 MOVZ W8, 0x1
	0x01CD6CE8 STRB W8, [X20 + 0x5FE]
	0x01CD6CEC ADRP X22, 0x2279000
	0x01CD6CF0 ADRP X20, 0x2279000
	0x01CD6CF4 LDR X22, [X22 + 0xCB0]
	0x01CD6CF8 LDR X20, [X20 + 0xCB8]
	0x01CD6CFC MOV X0, X19
	0x01CD6D00 BL 0x1CD43F0
	0x01CD6D04 AND W8, W0, 0x1
	0x01CD6D08 MOV X0, X19
	0x01CD6D0C STRB W8, [X19 + 0x80]
	0x01CD6D10 BL 0x1CD44BC
	0x01CD6D14 AND W8, W0, 0x1
	0x01CD6D18 MOV X0, X19
	0x01CD6D1C STRB W8, [X19 + 0x81]
	0x01CD6D20 BL 0x1CD4588
	0x01CD6D24 AND W8, W0, 0x1
	0x01CD6D28 MOV X0, X19
	0x01CD6D2C STRB W8, [X19 + 0x82]
	0x01CD6D30 BL 0x1CD4654
	0x01CD6D34 STR W0, [X19 + 0x84]
	0x01CD6D38 ADD X8, X31, 0x40
	0x01CD6D3C MOV X0, X19
	0x01CD6D40 BL 0x1CD4714
	0x01CD6D44 LDR V0, [X31 + 0x4]
	0x01CD6D48 LDR X8, [X31 + 0x50]
	0x01CD6D4C LDR X0, [X21]
	0x01CD6D50 STR V0, [X31 + 0x2]
	0x01CD6D54 STR X8, [X31 + 0x30]
	0x01CD6D58 LDR W8, [X0 + 0xE0]
	0x01CD6D5C CBNZ W8, 0x1CD6D64
	0x01CD6D60 BL 0x1B6E8F8
	0x01CD6D64 LDR V0, [X31 + 0x2]
	0x01CD6D68 LDR X8, [X31 + 0x30]
	0x01CD6D6C LDR X2, [X22]
	0x01CD6D70 ADD X1, X19, 0x88
	0x01CD6D74 ADD X0, X31, 0x40
	0x01CD6D78 STR V0, [X31 + 0x4]
	0x01CD6D7C STR X8, [X31 + 0x50]
	0x01CD6D80 BL 0x210ECA4
	0x01CD6D84 ADD X8, X31, 0x40
	0x01CD6D88 MOV X0, X19
	0x01CD6D8C BL 0x1CD47CC
	0x01CD6D90 LDR X8, [X31 + 0x50]
	0x01CD6D94 LDR V0, [X31 + 0x4]
	0x01CD6D98 LDR X2, [X20]
	0x01CD6D9C ADD X1, X19, 0x90
	0x01CD6DA0 ADD X0, X31, 0x40
	0x01CD6DA4 STR X8, [X31 + 0x10]
	0x01CD6DA8 STR V0, [X31]
	0x01CD6DAC STR V0, [X31 + 0x4]
	0x01CD6DB0 STR X8, [X31 + 0x50]
	0x01CD6DB4 BL 0x210EF50
	0x01CD6DB8 MOV X0, X19
	0x01CD6DBC BL 0x1CD4884
	0x01CD6DC0 STR W0, [X19 + 0x98]
	0x01CD6DC4 MOV X0, X19
	0x01CD6DC8 BL 0x1CD4944
	0x01CD6DCC STR W0, [X19 + 0x9C]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], D8
	003 Move [X31+80], X30
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X20, 0x254E000
	008 Move W8, [X20+1524]
	009 Move V8, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x227A000
	016 Move X0, [X0+2768]
	017 Call 0x1B6F7F0
	018 Move X0, 0x2279000
	019 Move X0, [X0+448]
	020 Call 0x1B6F7F0
	021 Move X0, 0x227A000
	022 Move X0, [X0+3152]
	023 Call 0x1B6F7F0
	024 Move W8, 1
	025 Move [X20+1524], W8
	026 Move [X31+32], X31
	027 Move [X31+40], X31
	028 Move [X31+48], X31
	029 Move W8, [X19+88]
	030 Compare W8, 0
	031 JumpIfEqual {82}
	032 Move [X19+88], W31
	033 Move X0, [X19+64]
	034 Compare X0, 0
	035 JumpIfEqual {69}
	036 Move W8, [X0+96]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 2
	039 Compare TEMP, 2
	040 JumpIfEqual {69}
	041 Move X1, X31
	042 Call NetworkObject.get_HasStateAuthority, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {69}
	047 Move W1, 1
	048 Move X0, X19
	049 Call ItemSellingMachineController.set_isSellingInProgress, X0, X1
	050 Move X21, 0x227A000
	051 Move X21, [X21+2768]
	052 Move W20, W31
	053 Add X8, X31, 8
	054 Move X0, X19
	055 Call ItemSellingMachineController.get__timerResetButton, X0
	056 NotImplemented "Instruction LDUR not yet implemented."
	057 Move X8, [X31+24]
	058 Move X0, X31
	059 Move [X31+2], V0
	060 Move [X31+48], X8
	061 Call TickTimer.get_None
	062 Move X3, [X21]
	063 And X2, X0, 0
	064 Add X0, X31, 32
	065 Move W1, W20
	066 Call NetworkArray`1<TickTimer>.Set, X0, X1, X2
	067 Add W20, W20, 1
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X0, [X19+176]
	070 Compare X0, 0
	071 JumpIfEqual {171}
	072 Call ItemSellingMachineView.StopValueTextAnimation, X0
	073 Move X0, [X19+176]
	074 Compare X0, 0
	075 JumpIfEqual {171}
	076 Move X8, -19054592
	077 Move V0, [X8+3616]
	078 Move S1, 3
	079 Move S2, 1
	080 Move V3, V8
	081 Call ItemSellingMachineView.PlayItemSellAnimation, X0, V0, V1, V2, V3
	082 Move X20, 0x2279000
	083 Move X20, [X20+448]
	084 Move X0, [X20]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1B6F8F8
	089 Move X0, X19
	090 Move X1, X31
	091 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	092 Move X0, [X19+56]
	093 Compare X0, 0
	094 JumpIfEqual {171}
	095 Move X1, X31
	096 Call NetworkRunner.get_Stage, X0
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X0, [X19+64]
	099 Compare X0, 0
	100 JumpIfEqual {171}
	101 Move X1, X31
	102 Call NetworkObject.GetLocalAuthorityMask, X0
	103 And W31, W0, 7
	104 Move X8, [X19+56]
	105 Compare X8, 0
	106 JumpIfEqual {171}
	107 Move X0, [X8+80]
	108 Compare X0, 0
	109 JumpIfEqual {171}
	110 Move X1, X31
	111 Call Simulation.HasAnyActiveConnections, X0
	112 Move TEMP, X0
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {33}
	116 Move X8, [X19+56]
	117 Compare X8, 0
	118 JumpIfEqual {171}
	119 Move X0, [X8+80]
	120 Move W1, 12
	121 Move X2, X31
	122 Call SimulationMessage.Allocate, X0, X1
	123 Move X20, X0
	124 Move W0, 1
	125 Move X1, X31
	126 Call Assert.Check, X0
	127 Move X8, [X19+64]
	128 Compare X8, 0
	129 JumpIfEqual {171}
	130 Move X8, [X8+32]
	131 Compare X8, 0
	132 JumpIfEqual {154}
	133 Move W0, [X8]
	134 Move X0, [X20]
	135 Move X19, [X19+64]
	136 Move W8, [X0+224]
	137 Compare W8, 0
	138 JumpIfNotEqual {140}
	139 Call 0x1B6F8F8
	140 Move X8, 0x227A000
	141 Move X8, [X8+3152]
	142 Move W2, 7
	143 Move X1, X19
	144 Move X3, X31
	145 Move X0, [X8]
	146 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	147 Move X20, [X31+96]
	148 Move X19, [X31+104]
	149 Move X30, [X31+80]
	150 Move X21, [X31+88]
	151 Move V8, [X31+64]
	152 Add X31, X31, 112
	153 Return 
	154 Move X0, X31
	155 Move W1, [X19+104]
	156 Move W2, 1
	157 Move X3, X31
	158 Call RpcHeader.Create, X0, X1, X2
	159 Move [X20+28], X0
	160 Move [X20+36], S8
	161 Compare X20, 0
	162 JumpIfEqual {171}
	163 Move W8, 96
	164 Move [X20+12], W8
	165 Move X0, [X19+56]
	166 Compare X0, 0
	167 JumpIfEqual {171}
	168 Move X1, X20
	169 Move X2, X31
	170 Call NetworkRunner.SendRpc, X0, X1
	171 Call 0x1B6FA1C

Method: System.Int32 SellItem(AnimalCompany.GrabbableItem grabbableItem)

Disassembly:
	0x01CD6EB8 TBNZ X8, 0x0, 0x1CD6ED0
	0x01CD6EBC ADRP X0, 0x2279000
	0x01CD6EC0 LDR X0, [X0 + 0xC18]
	0x01CD6EC4 BL 0x1B6E7F0
	0x01CD6EC8 MOVZ W8, 0x1
	0x01CD6ECC STRB W8, [X20 + 0x600]
	0x01CD6ED0 MOVZ W0, 0x1
	0x01CD6ED4 MOV X1, X31
	0x01CD6ED8 MOVZ W20, 0x1
	0x01CD6EDC BL 0x1D29EBC
	0x01CD6EE0 CBZ X19, 0x1CD6F34
	0x01CD6EE4 ADRP X9, 0x2279000
	0x01CD6EE8 LDR X9, [X9 + 0xC18]
	0x01CD6EEC STRB W20, [X19 + 0x58]
	0x01CD6EF0 LDR X8, [X19]
	0x01CD6EF4 LDR X1, [X9]
	0x01CD6EF8 LDRB W10, [X8 + 0x130]
	0x01CD6EFC LDRB W9, [X1 + 0x130]
	0x01CD6F00 CMP W10, W9
	0x01CD6F04 B.CC 0x1CD6F2C
	0x01CD6F08 LDR X8, [X8 + 0xC8]
	0x01CD6F0C ADD X8, X8, X9, 0x3, LSL
	0x01CD6F10 LDUR X8, [X8 - 0x8]
	0x01CD6F14 CMP X8, X1
	0x01CD6F18 B.NE 0x1CD6F2C
	0x01CD6F1C MOV X0, X19
	0x01CD6F20 LDP X20, X19, [X31 + 0x10]
	0x01CD6F24 LDR X30, [X31], #0x20
	0x01CD6F28 B 0x1CD6628
	0x01CD6F2C MOV X0, X19
	0x01CD6F30 BL 0x1B6ECDC
	0x01CD6F34 BL 0x1B6EA1C
	0x01CD6F38 STR X30, [X31 - 0x20]!
	0x01CD6F3C STP X20, X19, [X31 + 0x10]
	0x01CD6F40 ADRP X20, 0x254D000
	0x01CD6F44 LDRB W8, [X20 + 0x601]
	0x01CD6F48 MOV X19, X0
	0x01CD6F4C TBNZ X8, 0x0, 0x1CD6F64
	0x01CD6F50 ADRP X0, 0x2279000
	0x01CD6F54 LDR X0, [X0 + 0xC18]
	0x01CD6F58 BL 0x1B6E7F0
	0x01CD6F5C MOVZ W8, 0x1
	0x01CD6F60 STRB W8, [X20 + 0x601]
	0x01CD6F64 MOVZ W0, 0x1
	0x01CD6F68 MOV X1, X31
	0x01CD6F6C MOVZ W20, 0x1
	0x01CD6F70 BL 0x1D29EBC
	0x01CD6F74 CBZ X19, 0x1CD6FC8
	0x01CD6F78 ADRP X9, 0x2279000
	0x01CD6F7C LDR X9, [X9 + 0xC18]
	0x01CD6F80 STRB W20, [X19 + 0x58]
	0x01CD6F84 LDR X8, [X19]
	0x01CD6F88 LDR X1, [X9]
	0x01CD6F8C LDRB W10, [X8 + 0x130]
	0x01CD6F90 LDRB W9, [X1 + 0x130]
	0x01CD6F94 CMP W10, W9
	0x01CD6F98 B.CC 0x1CD6FC0
	0x01CD6F9C LDR X8, [X8 + 0xC8]
	0x01CD6FA0 ADD X8, X8, X9, 0x3, LSL
	0x01CD6FA4 LDUR X8, [X8 - 0x8]
	0x01CD6FA8 CMP X8, X1
	0x01CD6FAC B.NE 0x1CD6FC0
	0x01CD6FB0 MOV X0, X19
	0x01CD6FB4 LDP X20, X19, [X31 + 0x10]
	0x01CD6FB8 LDR X30, [X31], #0x20
	0x01CD6FBC B 0x1CD59B0
	0x01CD6FC0 MOV X0, X19
	0x01CD6FC4 BL 0x1B6ECDC
	0x01CD6FC8 BL 0x1B6EA1C
	0x01CD6FCC STP X30, X21, [X31 - 0x20]!
	0x01CD6FD0 STP X20, X19, [X31 + 0x10]
	0x01CD6FD4 ADRP X21, 0x254D000
	0x01CD6FD8 LDRB W8, [X21 + 0x602]
	0x01CD6FDC MOV X20, X1
	0x01CD6FE0 MOV X19, X0
	0x01CD6FE4 TBNZ X8, 0x0, 0x1CD6FFC
	0x01CD6FE8 ADRP X0, 0x2279000
	0x01CD6FEC LDR X0, [X0 + 0xC18]
	0x01CD6FF0 BL 0x1B6E7F0
	0x01CD6FF4 MOVZ W8, 0x1
	0x01CD6FF8 STRB W8, [X21 + 0x602]
	0x01CD6FFC MOVZ W0, 0x1
	0x01CD7000 MOV X1, X31
	0x01CD7004 MOVZ W21, 0x1
	0x01CD7008 BL 0x1D29EBC
	0x01CD700C CBZ X19, 0x1CD7068
	0x01CD7010 ADRP X8, 0x2278000
	0x01CD7014 LDR X8, [X8 + 0xC18]
	0x01CD7018 LDR W1, [X20 + 0x24]
	0x01CD701C STRB W21, [X19 + 0x58]
	0x01CD7020 LDR X9, [X19]
	0x01CD7024 LDR X8, [X8]
	0x01CD7028 LDRB W11, [X9 + 0x130]
	0x01CD702C LDRB W10, [X8 + 0x130]
	0x01CD7030 CMP W11, W10
	0x01CD7034 B.CC 0x1CD705C
	0x01CD7038 LDR X9, [X9 + 0xC8]
	0x01CD703C ADD X9, X9, X10, 0x3, LSL
	0x01CD7040 LDUR X9, [X9 - 0x8]
	0x01CD7044 CMP X9, X8
	0x01CD7048 B.NE 0x1CD705C
	0x01CD704C MOV X0, X19
	0x01CD7050 LDP X20, X19, [X31 + 0x10]
	0x01CD7054 LDP X30, X21, [X31], #0x20
	0x01CD7058 B 0x1CD62FC
	0x01CD705C MOV X0, X19
	0x01CD7060 MOV X1, X8
	0x01CD7064 BL 0x1B6ECDC
	0x01CD7068 BL 0x1B6EA1C
	0x01CD706C STP X30, X21, [X31 - 0x20]!
	0x01CD7070 STP X20, X19, [X31 + 0x10]
	0x01CD7074 ADRP X21, 0x254C000
	0x01CD7078 LDRB W8, [X21 + 0x603]
	0x01CD707C MOV X20, X1
	0x01CD7080 MOV X19, X0
	0x01CD7084 TBNZ X8, 0x0, 0x1CD709C
	0x01CD7088 ADRP X0, 0x2278000
	0x01CD708C LDR X0, [X0 + 0xC18]
	0x01CD7090 BL 0x1B6E7F0
	0x01CD7094 MOVZ W8, 0x1
	0x01CD7098 STRB W8, [X21 + 0x603]
	0x01CD709C MOVZ W0, 0x1
	0x01CD70A0 MOV X1, X31
	0x01CD70A4 MOVZ W21, 0x1
	0x01CD70A8 BL 0x1D29EBC
	0x01CD70AC CBZ X19, 0x1CD7108
	0x01CD70B0 ADRP X8, 0x2278000
	0x01CD70B4 LDR X8, [X8 + 0xC18]
	0x01CD70B8 LDR W1, [X20 + 0x24]
	0x01CD70BC STRB W21, [X19 + 0x58]
	0x01CD70C0 LDR X9, [X19]
	0x01CD70C4 LDR X8, [X8]
	0x01CD70C8 LDRB W11, [X9 + 0x130]
	0x01CD70CC LDRB W10, [X8 + 0x130]
	0x01CD70D0 CMP W11, W10
	0x01CD70D4 B.CC 0x1CD70FC
	0x01CD70D8 LDR X9, [X9 + 0xC8]
	0x01CD70DC ADD X9, X9, X10, 0x3, LSL
	0x01CD70E0 LDUR X9, [X9 - 0x8]
	0x01CD70E4 CMP X9, X8
	0x01CD70E8 B.NE 0x1CD70FC
	0x01CD70EC MOV X0, X19
	0x01CD70F0 LDP X20, X19, [X31 + 0x10]
	0x01CD70F4 LDP X30, X21, [X31], #0x20
	0x01CD70F8 B 0x1CD38C0
	0x01CD70FC MOV X0, X19
	0x01CD7100 MOV X1, X8
	0x01CD7104 BL 0x1B6ECDC
	0x01CD7108 BL 0x1B6EA1C
	0x01CD710C LDR X8, [X0 + 0x90]
	0x01CD7110 CMP X8, 0x0
	0x01CD7114 CSET W0, NE
	0x01CD7118 RET
	0x01CD711C STP X29, X30, [X31 - 0x60]!
	0x01CD7120 STP X28, X27, [X31 + 0x10]
	0x01CD7124 STP X26, X25, [X31 + 0x20]
	0x01CD7128 STP X24, X23, [X31 + 0x30]
	0x01CD712C STP X22, X21, [X31 + 0x40]
	0x01CD7130 STP X20, X19, [X31 + 0x50]
	0x01CD7134 ADRP X20, 0x254C000
	0x01CD7138 LDRB W8, [X20 + 0x604]
	0x01CD713C MOV X19, X0
	0x01CD7140 TBNZ X8, 0x0, 0x1CD71A0
	0x01CD7144 ADRP X0, 0x2278000
	0x01CD7148 LDR X0, [X0 + 0xCC0]
	0x01CD714C BL 0x1B6E7F0
	0x01CD7150 ADRP X0, 0x2278000
	0x01CD7154 LDR X0, [X0 + 0x3E0]
	0x01CD7158 BL 0x1B6E7F0
	0x01CD715C ADRP X0, 0x2278000
	0x01CD7160 LDR X0, [X0 + 0xCC8]
	0x01CD7164 BL 0x1B6E7F0
	0x01CD7168 ADRP X0, 0x2278000
	0x01CD716C LDR X0, [X0 + 0xCD0]
	0x01CD7170 BL 0x1B6E7F0
	0x01CD7174 ADRP X0, 0x2278000
	0x01CD7178 LDR X0, [X0 + 0xCD8]
	0x01CD717C BL 0x1B6E7F0
	0x01CD7180 ADRP X0, 0x2278000
	0x01CD7184 LDR X0, [X0 + 0xCE0]
	0x01CD7188 BL 0x1B6E7F0
	0x01CD718C ADRP X0, 0x2278000
	0x01CD7190 LDR X0, [X0 + 0xC28]
	0x01CD7194 BL 0x1B6E7F0
	0x01CD7198 MOVZ W8, 0x1
	0x01CD719C STRB W8, [X20 + 0x604]
	0x01CD71A0 LDR X20, [X19 + 0x78]
	0x01CD71A4 CBZ X20, 0x1CD7448
	0x01CD71A8 LDR W8, [X20 + 0x18]
	0x01CD71AC CMP W8, 0x1
	0x01CD71B0 B.LT 0x1CD71E8
	0x01CD71B4 MOV W21, W31
	0x01CD71B8 CMP W21, W8
	0x01CD71BC B.CS 0x1CD7468
	0x01CD71C0 ADD X8, X20, W21, 0x3, SXTW
	0x01CD71C4 LDR X0, [X8 + 0x20]
	0x01CD71C8 CBZ X0, 0x1CD7448
	0x01CD71CC MOV W1, W31
	0x01CD71D0 MOV X2, X31
	0x01CD71D4 BL 0x3A9A604
	0x01CD71D8 LDR W8, [X20 + 0x18]
	0x01CD71DC ADD W21, W21, 0x1
	0x01CD71E0 CMP W21, W8
	0x01CD71E4 B.LT 0x1CD71B8
	0x01CD71E8 LDR X20, [X19 + 0x48]
	0x01CD71EC CBZ X20, 0x1CD7448
	0x01CD71F0 LDR W8, [X20 + 0x18]
	0x01CD71F4 CMP W8, 0x1
	0x01CD71F8 B.LT 0x1CD7230
	0x01CD71FC MOV W21, W31
	0x01CD7200 CMP W21, W8
	0x01CD7204 B.CS 0x1CD7468
	0x01CD7208 ADD X8, X20, W21, 0x3, SXTW
	0x01CD720C LDR X0, [X8 + 0x20]
	0x01CD7210 CBZ X0, 0x1CD7448
	0x01CD7214 MOV W1, W31
	0x01CD7218 MOV X2, X31
	0x01CD721C BL 0x3A9A604
	0x01CD7220 LDR W8, [X20 + 0x18]
	0x01CD7224 ADD W21, W21, 0x1
	0x01CD7228 CMP W21, W8
	0x01CD722C B.LT 0x1CD7200
	0x01CD7230 LDR X8, [X19 + 0x28]
	0x01CD7234 CBZ X8, 0x1CD7448
	0x01CD7238 ADRP X9, 0x2278000
	0x01CD723C LDR X9, [X9 + 0xCC8]
	0x01CD7240 LDR W1, [X8 + 0x18]
	0x01CD7244 LDR X0, [X9]
	0x01CD7248 BL 0x1B6E868
	0x01CD724C LDR X8, [X19 + 0x28]
	0x01CD7250 STR X0, [X19 + 0x80]
	0x01CD7254 CBZ X8, 0x1CD7448
	0x01CD7258 ADRP X25, 0x2278000
	0x01CD725C ADRP X26, 0x2278000
	0x01CD7260 ADRP X27, 0x2278000
	0x01CD7264 ADRP X28, 0x2278000
	0x01CD7268 ADRP X23, 0x2278000
	0x01CD726C ADRP X22, 0x2278000
	0x01CD7270 LDR X25, [X25 + 0xCC0]
	0x01CD7274 LDR X26, [X26 + 0xCE0]
	0x01CD7278 LDR X27, [X27 + 0xCD8]
	0x01CD727C LDR X28, [X28 + 0xCD0]
	0x01CD7280 LDR X23, [X23 + 0x3E0]
	0x01CD7284 LDR X22, [X22 + 0xC28]
	0x01CD7288 MOV X24, X31
	0x01CD728C LDRSW X8, [X8 + 0x18]
	0x01CD7290 CMP X24, X8
	0x01CD7294 B.GE 0x1CD7390
	0x01CD7298 LDR X8, [X19 + 0x80]
	0x01CD729C CBZ X8, 0x1CD7448
	0x01CD72A0 LDR W9, [X8 + 0x18]
	0x01CD72A4 CMP X24, X9
	0x01CD72A8 B.CS 0x1CD7468
	0x01CD72AC ADD X8, X8, X24, 0x3, LSL
	0x01CD72B0 STR X31, [X8 + 0x20]
	0x01CD72B4 LDR X8, [X19 + 0x28]
	0x01CD72B8 CBZ X8, 0x1CD7448
	0x01CD72BC LDR W9, [X8 + 0x18]
	0x01CD72C0 CMP X24, X9
	0x01CD72C4 B.CS 0x1CD7468
	0x01CD72C8 ADD X8, X8, X24, 0x3, LSL
	0x01CD72CC LDR X29, [X8 + 0x20]
	0x01CD72D0 CMP W24, 0x2
	0x01CD72D4 B.EQ 0x1CD72FC
	0x01CD72D8 CMP W24, 0x1
	0x01CD72DC B.EQ 0x1CD7314
	0x01CD72E0 CBNZ W24, 0x1CD7380
	0x01CD72E4 CBZ X29, 0x1CD7448
	0x01CD72E8 LDR X0, [X25]
	0x01CD72EC LDR X20, [X29 + 0x20]
	0x01CD72F0 BL 0x1B6EA0C
	0x01CD72F4 LDR X2, [X28]
	0x01CD72F8 B 0x1CD7328

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+128], X30
	003 Move [X31+144], X24
	004 Move [X31+152], X23
	005 Move [X31+160], X22
	006 Move [X31+168], X21
	007 Move [X31+176], X20
	008 Move [X31+184], X19
	009 Move X21, 0x254E000
	010 Move W8, [X21+1525]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {70}
	017 Move X0, 0x2278000
	018 Move X0, [X0+2464]
	019 Call 0x1B6F7F0
	020 Move X0, 0x227A000
	021 Move X0, [X0+3160]
	022 Call 0x1B6F7F0
	023 Move X0, 0x2279000
	024 Move X0, [X0+2584]
	025 Call 0x1B6F7F0
	026 Move X0, 0x2279000
	027 Move X0, [X0+2592]
	028 Call 0x1B6F7F0
	029 Move X0, 0x2279000
	030 Move X0, [X0+2600]
	031 Call 0x1B6F7F0
	032 Move X0, 0x2279000
	033 Move X0, [X0+1208]
	034 Call 0x1B6F7F0
	035 Move X0, 0x227A000
	036 Move X0, [X0+3168]
	037 Call 0x1B6F7F0
	038 Move X0, 0x2278000
	039 Move X0, [X0+1528]
	040 Call 0x1B6F7F0
	041 Move X0, 0x2279000
	042 Move X0, [X0+2608]
	043 Call 0x1B6F7F0
	044 Move X0, 0x2279000
	045 Move X0, [X0+1976]
	046 Call 0x1B6F7F0
	047 Move X0, 0x2279000
	048 Move X0, [X0+1984]
	049 Call 0x1B6F7F0
	050 Move X0, 0x2279000
	051 Move X0, [X0+1992]
	052 Call 0x1B6F7F0
	053 Move X0, 0x2279000
	054 Move X0, [X0+2000]
	055 Call 0x1B6F7F0
	056 Move X0, 0x227A000
	057 Move X0, [X0+3176]
	058 Call 0x1B6F7F0
	059 Move X0, 0x2279000
	060 Move X0, [X0+2016]
	061 Call 0x1B6F7F0
	062 Move X0, 0x2279000
	063 Move X0, [X0+1056]
	064 Call 0x1B6F7F0
	065 Move X0, 0x227A000
	066 Move X0, [X0+3184]
	067 Call 0x1B6F7F0
	068 Move W8, 1
	069 Move [X21+1525], W8
	070 Move [X31+136], X31
	071 Move [X31+96], X31
	072 Move [X31+104], X31
	073 Move [X31+112], X31
	074 Compare X19, 0
	075 JumpIfEqual {281}
	076 Move X8, [X19+128]
	077 Compare X8, 0
	078 JumpIfEqual {281}
	079 Move W8, [X8+40]
	080 Move TEMP, X8
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfEqual {96}
	084 Move X0, [X20+232]
	085 Compare X0, 0
	086 JumpIfEqual {281}
	087 Move X8, 0x227A000
	088 Move X8, [X8+3168]
	089 Move X1, X19
	090 Move X2, [X8]
	091 Call HashSet`1<Object>.Contains, X0, X1
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {97}
	096 Move W21, W31
	097 Move X8, 0x2279000
	098 Move X8, [X8+1056]
	099 Move X0, X19
	100 Move X2, X31
	101 Move X1, [X8]
	102 Call Component.CompareTag, X0, X1
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {163}
	107 Move X8, 0x2279000
	108 Move X8, [X8+3160]
	109 Add X1, X31, 136
	110 Move X0, X19
	111 Move X2, [X8]
	112 Call 0x2091EE4, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfNotEqual {163}
	117 Move X0, [X31+136]
	118 Compare X0, 0
	119 JumpIfEqual {281}
	120 Move X1, X31
	121 Call InventoryBag.GetContainedItems, X0
	122 Move X8, [X31+136]
	123 Compare X8, 0
	124 JumpIfEqual {281}
	125 Move X21, X0
	126 Move X0, X8
	127 Move X1, X31
	128 Call InventoryBag.EmptyContents, X0
	129 Compare X21, 0
	130 JumpIfEqual {281}
	131 Move X8, 0x2278000
	132 Move X8, [X8+2608]
	133 Move X0, X21
	134 Move X1, [X8]
	135 Add X8, X31, 72
	136 Call List`1<Object>.GetEnumerator, X0
	137 NotImplemented "Instruction LDUR not yet implemented."
	138 Move X8, [X31+88]
	139 Move X22, 0x2278000
	140 Move W23, W31
	141 Move [X31+6], V0
	142 Move [X31+112], X8
	143 Move X22, [X22+2592]
	144 Move X1, [X22]
	145 Add X0, X31, 96
	146 Call Enumerator<Object>.MoveNext, X0
	147 Move TEMP, X0
	148 And TEMP, TEMP, 1
	149 Compare TEMP, 1
	150 JumpIfNotEqual {164}
	151 Move X21, [X31+112]
	152 Move X0, X19
	153 Move X1, X31
	154 Call GrabbableItem.get_isVisible, X0
	155 Move TEMP, X0
	156 And TEMP, TEMP, 1
	157 Compare TEMP, 1
	158 JumpIfNotEqual {144}
	159 Move X0, X20
	160 Move X1, X21
	161 Call ItemSellingMachineController.SellItem, X0, X1
	162 Add W23, W0, W23
	163 Move W23, W31
	164 Move X8, 0x2278000
	165 Move X8, [X8+2584]
	166 Add X0, X31, 96
	167 Move X1, [X8]
	168 Call Enumerator<Object>.Dispose, X0
	169 Move X0, [X20+232]
	170 Compare X0, 0
	171 JumpIfEqual {281}
	172 Move X8, 0x2278000
	173 Move X8, [X8+1208]
	174 Move X1, X19
	175 Move X2, [X8]
	176 Call HashSet`1<Object>.Add, X0, X1
	177 Move X21, [X19+128]
	178 Compare X21, 0
	179 JumpIfEqual {281}
	180 Move X8, 0x2278000
	181 Move W22, [X21+36]
	182 Move X8, [X8+1984]
	183 Move W1, 3
	184 Move X0, [X8]
	185 Call 0x1B6F868
	186 Move X20, X0
	187 Move X0, X21
	188 Move X1, X31
	189 Call Object.get_name, X0
	190 Move X8, 0x2278000
	191 Move X24, 0x2278000
	192 Move X8, [X8+2016]
	193 Move X24, [X24+1992]
	194 Move X2, X0
	195 Add X0, X31, 48
	196 Move X1, [X8]
	197 Move X3, [X24]
	198 Move [X31+48], X31
	199 Move [X31+56], X31
	200 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	201 Compare X20, 0
	202 JumpIfEqual {281}
	203 Move W8, [X20+24]
	204 Compare W8, 0
	205 JumpIfEqual {282}
	206 Move V0, [X31+3]
	207 Move X8, 0x2278000
	208 Move X8, [X8+1976]
	209 Move TEMP, 0
	210 Not TEMP
	211 Move X9, TEMP
	212 Move [X20+2], V0
	213 Add X0, X31, 72
	214 Move X8, [X8]
	215 Move X1, X31
	216 Move [X31+72], X8
	217 Move [X31+80], X9
	218 Move W8, [X21+40]
	219 Move [X31+88], W8
	220 Call Enum.ToString, X0
	221 Move X8, 0x2278000
	222 Move X8, [X8+2000]
	223 Move X3, [X24]
	224 Move X2, X0
	225 Add X0, X31, 32
	226 Move X1, [X8]
	227 Move [X31+32], X31
	228 Move [X31+40], X31
	229 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	230 Move W8, [X20+24]
	231 NotImplemented "Instruction CMP not yet implemented."
	232 Move V0, [X31+2]
	233 Move X9, 0x2277000
	234 Add X1, X31, 28
	235 Move [X20+3], V0
	236 Move W8, [X21+36]
	237 Move X9, [X9+1528]
	238 Move [X31+28], W8
	239 Move X0, [X9]
	240 Call 0x1B6F900
	241 Move X8, 0x2279000
	242 Move X8, [X8+3176]
	243 Move X3, [X24]
	244 Move X2, X0
	245 Add X0, X31, 0
	246 Move X1, [X8]
	247 Move [X31], X31
	248 Move [X31+8], X31
	249 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	250 Move W8, [X20+24]
	251 NotImplemented "Instruction CMP not yet implemented."
	252 Move V0, [X31]
	253 Move X8, 0x2277000
	254 Add W21, W22, W23
	255 Move [X20+4], V0
	256 Move X8, [X8+2464]
	257 Move X0, [X8]
	258 Move W8, [X0+224]
	259 Compare W8, 0
	260 JumpIfNotEqual {262}
	261 Call 0x1B6F8F8
	262 Move X8, 0x2279000
	263 Move X8, [X8+3184]
	264 Move X1, X20
	265 Move X2, X31
	266 Move X0, [X8]
	267 Call Analytics.Track, X0, X1
	268 Move X0, X19
	269 Move X1, X31
	270 Call GrabbableItem.RPC_HandleItemSold, X0
	271 Move W0, W21
	272 Move X20, [X31+176]
	273 Move X19, [X31+184]
	274 Move X22, [X31+160]
	275 Move X21, [X31+168]
	276 Move X24, [X31+144]
	277 Move X23, [X31+152]
	278 Move X30, [X31+128]
	279 Add X31, X31, 192
	280 Return X0
	281 Call 0x1B6FA1C
	282 Call 0x1B6FA24
	283 Move X21, X0
	284 NotImplemented "Instruction CMP not yet implemented."
	285 Move X0, X21
	286 Call 0x3D1A840
	287 Move X22, [X0]
	288 Call 0x3D1A850
	289 Move X8, 0x2278000
	290 Move X8, [X8+2584]
	291 Add X0, X31, 96
	292 Move X1, [X8]
	293 Call Enumerator<Object>.Dispose, X0
	294 Compare X22, 0
	295 JumpIfEqual {169}
	296 Move X0, X22
	297 Call 0x1B6FA14
	298 Move X22, X31
	299 Move X21, X0
	300 Move X8, 0x2278000
	301 Move X8, [X8+2584]
	302 Move X1, [X8]
	303 Add X0, X31, 96
	304 Call Enumerator<Object>.Dispose, X0
	305 Compare X22, 0
	306 JumpIfNotEqual {309}
	307 Move X0, X21
	308 Call 0x1C8518C
	309 Move X0, X22
	310 Call 0x1B6FA14
	311 Call 0x18F56A8

Method: System.Void DespawnItemsKillPlayersAndStoreValues()

Disassembly:
	0x01CD65A4 LDR X8, [X24]
	0x01CD65A8 LDR X9, [X20 + 0x20]
	0x01CD65AC CBZ X9, 0x1CD6608
	0x01CD65B0 LDR W10, [X9 + 0x18]
	0x01CD65B4 ADD X23, X23, 0x1
	0x01CD65B8 SUB W11, W23, 0x1
	0x01CD65BC CMP W11, W10
	0x01CD65C0 B.CS 0x1CD6624
	0x01CD65C4 ADD X9, X9, X22
	0x01CD65C8 LDP S0, S1, [X9 + 0x20]
	0x01CD65CC LDP S2, S3, [X9 + 0x28]
	0x01CD65D0 TBZ X19, 0x0, 0x1CD65E4
	0x01CD65D4 FMUL S0, S0, S8
	0x01CD65D8 FMUL S1, S1, S8
	0x01CD65DC FMUL S2, S2, S8
	0x01CD65E0 FMUL S3, S3, S8
	0x01CD65E4 CBZ X21, 0x1CD6608
	0x01CD65E8 LDR X8, [X8 + 0xB8]
	0x01CD65EC MOV X0, X21
	0x01CD65F0 MOV X2, X31
	0x01CD65F4 ADD X22, X22, 0x10
	0x01CD65F8 LDR W1, [X8 + 0x4]
	0x01CD65FC BL 0x3A7D234
	0x01CD6600 LDR X8, [X20 + 0x30]
	0x01CD6604 CBNZ X8, 0x1CD6564
	0x01CD6608 BL 0x1B6EA1C
	0x01CD660C LDP X20, X19, [X31 + 0x30]
	0x01CD6610 LDP X22, X21, [X31 + 0x20]
	0x01CD6614 LDP X24, X23, [X31 + 0x10]
	0x01CD6618 LDR X30, [X31 + 0x8]
	0x01CD661C LDR V8, [X31], #0x40
	0x01CD6620 RET
	0x01CD6624 BL 0x1B6EA24
	0x01CD6628 SUB X31, X31, 0x80
	0x01CD662C STP X30, X23, [X31 + 0x50]
	0x01CD6630 STP X22, X21, [X31 + 0x60]
	0x01CD6634 STP X20, X19, [X31 + 0x70]
	0x01CD6638 ADRP X20, 0x254D000
	0x01CD663C LDRB W8, [X20 + 0x5F7]
	0x01CD6640 MOV X19, X0
	0x01CD6644 TBNZ X8, 0x0, 0x1CD668C
	0x01CD6648 ADRP X0, 0x2278000
	0x01CD664C LDR X0, [X0 + 0x1C0]
	0x01CD6650 BL 0x1B6E7F0
	0x01CD6654 ADRP X0, 0x2278000
	0x01CD6658 LDR X0, [X0 + 0x5D8]
	0x01CD665C BL 0x1B6E7F0
	0x01CD6660 ADRP X0, 0x2278000
	0x01CD6664 LDR X0, [X0 + 0x248]
	0x01CD6668 BL 0x1B6E7F0
	0x01CD666C ADRP X0, 0x2278000
	0x01CD6670 LDR X0, [X0 + 0x250]
	0x01CD6674 BL 0x1B6E7F0
	0x01CD6678 ADRP X0, 0x2279000
	0x01CD667C LDR X0, [X0 + 0xC80]
	0x01CD6680 BL 0x1B6E7F0
	0x01CD6684 MOVZ W8, 0x1
	0x01CD6688 STRB W8, [X20 + 0x5F7]
	0x01CD668C LDRB W8, [X19 + 0x58]
	0x01CD6690 CBZ W8, 0x1CD67D0
	0x01CD6694 STRB W31, [X19 + 0x58]
	0x01CD6698 LDR X0, [X19 + 0x40]
	0x01CD669C CBZ X0, 0x1CD66E0
	0x01CD66A0 LDRB W8, [X0 + 0x60]
	0x01CD66A4 TBNZ X8, 0x1, 0x1CD66E0
	0x01CD66A8 MOV X1, X31
	0x01CD66AC BL 0x1D9E780
	0x01CD66B0 TBZ X0, 0x0, 0x1CD66E0
	0x01CD66B4 FMOV S0, W31
	0x01CD66B8 MOV X0, X19
	0x01CD66BC BL 0x1CD4BE4
	0x01CD66C0 MOV X0, X19
	0x01CD66C4 MOV W1, W31
	0x01CD66C8 BL 0x1CD4524
	0x01CD66CC MOVZ W1, 0x1
	0x01CD66D0 MOV X0, X19
	0x01CD66D4 BL 0x1CD45F0
	0x01CD66D8 MOV X0, X19
	0x01CD66DC BL 0x1CD4F70
	0x01CD66E0 LDR X0, [X19 + 0xC8]
	0x01CD66E4 CBZ X0, 0x1CD6910
	0x01CD66E8 ADRP X23, 0x2278000
	0x01CD66EC ADRP X22, 0x2278000
	0x01CD66F0 LDR X20, [X19 + 0x38]
	0x01CD66F4 LDR X21, [X19 + 0xD0]
	0x01CD66F8 LDR X23, [X23 + 0x248]
	0x01CD66FC LDR X22, [X22 + 0x250]
	0x01CD6700 MOV X1, X31
	0x01CD6704 BL 0x3AA7658
	0x01CD6708 LDR X1, [X23]
	0x01CD670C ADD X0, X31, 0x20
	0x01CD6710 STP X31, X31, [X31 + 0x20]
	0x01CD6714 BL 0x22DC630
	0x01CD6718 ADRP X23, 0x254D000
	0x01CD671C LDRB W8, [X23 + 0x454]
	0x01CD6720 CBNZ W8, 0x1CD6738
	0x01CD6724 ADRP X0, 0x2278000
	0x01CD6728 LDR X0, [X0 + 0x1F8]
	0x01CD672C BL 0x1B6E7F0
	0x01CD6730 MOVZ W8, 0x1
	0x01CD6734 STRB W8, [X23 + 0x454]
	0x01CD6738 ADRP X8, 0x2278000
	0x01CD673C LDR X8, [X8 + 0x1F8]
	0x01CD6740 LDR X1, [X22]
	0x01CD6744 ADD X0, X31, 0x8
	0x01CD6748 LDR X8, [X8]
	0x01CD674C LDR X8, [X8 + 0xB8]
	0x01CD6750 LDP S0, S1, [X8]
	0x01CD6754 LDP S2, S3, [X8 + 0x8]
	0x01CD6758 STP X31, X31, [X31 + 0x8]
	0x01CD675C STR W31, [X31 + 0x18]
	0x01CD6760 BL 0x22D82D0
	0x01CD6764 CBZ X20, 0x1CD6910
	0x01CD6768 ADRP X8, 0x2278000
	0x01CD676C LDR X8, [X8 + 0x5D8]
	0x01CD6770 LDP X2, X3, [X31 + 0x20]
	0x01CD6774 LDUR V0, [X31 + 0x8]
	0x01CD6778 LDR W9, [X31 + 0x18]
	0x01CD677C LDR X8, [X8]
	0x01CD6780 ADD X4, X31, 0x30
	0x01CD6784 MOV X0, X20
	0x01CD6788 MOV X1, X21
	0x01CD678C MOV X5, X31
	0x01CD6790 MOV X6, X31
	0x01CD6794 MOV W7, W31
	0x01CD6798 STR V0, [X31 + 0x3]
	0x01CD679C STR W9, [X31 + 0x40]
	0x01CD67A0 STR X8, [X31]
	0x01CD67A4 BL 0x2112E18
	0x01CD67A8 LDR X0, [X19 + 0xC8]
	0x01CD67AC CBZ X0, 0x1CD6910
	0x01CD67B0 LDR X19, [X19 + 0xE0]
	0x01CD67B4 MOV X1, X31
	0x01CD67B8 BL 0x3AA7658
	0x01CD67BC FMOV S3, 1
	0x01CD67C0 MOV X0, X19
	0x01CD67C4 MOV X1, X31
	0x01CD67C8 BL 0x1CCD9CC
	0x01CD67CC B 0x1CD680C
	0x01CD67D0 ADRP X20, 0x2278000
	0x01CD67D4 LDR X20, [X20 + 0x1C0]
	0x01CD67D8 LDR X0, [X20]
	0x01CD67DC LDR W8, [X0 + 0xE0]
	0x01CD67E0 CBNZ W8, 0x1CD67E8
	0x01CD67E4 BL 0x1B6E8F8
	0x01CD67E8 MOV X0, X19
	0x01CD67EC MOV X1, X31
	0x01CD67F0 BL 0x1D697C8
	0x01CD67F4 LDR X0, [X19 + 0x38]
	0x01CD67F8 CBZ X0, 0x1CD6910
	0x01CD67FC MOV X1, X31
	0x01CD6800 BL 0x1D87040
	0x01CD6804 CMP W0, 0x4
	0x01CD6808 B.NE 0x1CD6820
	0x01CD680C LDP X20, X19, [X31 + 0x70]
	0x01CD6810 LDP X22, X21, [X31 + 0x60]
	0x01CD6814 LDP X30, X23, [X31 + 0x50]
	0x01CD6818 ADD X31, X31, 0x80
	0x01CD681C RET
	0x01CD6820 LDR X0, [X19 + 0x40]
	0x01CD6824 CBZ X0, 0x1CD6910
	0x01CD6828 MOV X1, X31
	0x01CD682C BL 0x1D9F538
	0x01CD6830 ANDS W31, W0, 0x7
	0x01CD6834 B.EQ 0x1CD6894
	0x01CD6838 LDR X8, [X19 + 0x38]
	0x01CD683C CBZ X8, 0x1CD6910
	0x01CD6840 LDR X0, [X8 + 0x50]
	0x01CD6844 CBZ X0, 0x1CD6910
	0x01CD6848 MOV X1, X31
	0x01CD684C BL 0x1DBEFE4
	0x01CD6850 TBZ X0, 0x0, 0x1CD6698
	0x01CD6854 LDR X8, [X19 + 0x38]
	0x01CD6858 CBZ X8, 0x1CD6910
	0x01CD685C LDR X0, [X8 + 0x50]
	0x01CD6860 MOVZ W1, 0x8
	0x01CD6864 MOV X2, X31
	0x01CD6868 BL 0x1DD601C
	0x01CD686C MOV X20, X0
	0x01CD6870 MOVZ W0, 0x1
	0x01CD6874 MOV X1, X31
	0x01CD6878 BL 0x1D29EBC
	0x01CD687C LDR X8, [X19 + 0x40]
	0x01CD6880 CBZ X8, 0x1CD6910
	0x01CD6884 LDR X8, [X8 + 0x20]
	0x01CD6888 CBZ X8, 0x1CD68D4
	0x01CD688C LDR W0, [X8]
	0x01CD6890 B 0x1CD68D8
	0x01CD6894 LDR X0, [X20]
	0x01CD6898 LDR X19, [X19 + 0x40]
	0x01CD689C LDR W8, [X0 + 0xE0]
	0x01CD68A0 CBNZ W8, 0x1CD68A8
	0x01CD68A4 BL 0x1B6E8F8
	0x01CD68A8 ADRP X8, 0x2279000
	0x01CD68AC LDR X8, [X8 + 0xC80]
	0x01CD68B0 MOV X1, X19
	0x01CD68B4 LDP X20, X19, [X31 + 0x70]
	0x01CD68B8 LDP X22, X21, [X31 + 0x60]
	0x01CD68BC LDR X0, [X8]
	0x01CD68C0 LDP X30, X23, [X31 + 0x50]
	0x01CD68C4 MOVZ W2, 0x7
	0x01CD68C8 MOV X3, X31
	0x01CD68CC ADD X31, X31, 0x80
	0x01CD68D0 B 0x1D69640
	0x01CD68D4 MOV X0, X31
	0x01CD68D8 LDR W1, [X19 + 0x68]
	0x01CD68DC MOVZ W2, 0x2
	0x01CD68E0 MOV X3, X31
	0x01CD68E4 BL 0x1DA8258
	0x01CD68E8 STUR X0, [X20 + 0x1C]
	0x01CD68EC CBZ X20, 0x1CD6910
	0x01CD68F0 MOVZ W8, 0x40
	0x01CD68F4 STR W8, [X20 + 0xC]
	0x01CD68F8 LDR X0, [X19 + 0x38]
	0x01CD68FC CBZ X0, 0x1CD6910
	0x01CD6900 MOV X1, X20
	0x01CD6904 MOV X2, X31
	0x01CD6908 BL 0x1D8A710
	0x01CD690C B 0x1CD6698
	0x01CD6910 BL 0x1B6EA1C
	0x01CD6914 STR X30, [X31 - 0x20]!
	0x01CD6918 STP X20, X19, [X31 + 0x10]
	0x01CD691C LDR X8, [X0 + 0x98]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+16], D14
	003 Move [X31+32], D13
	004 Move [X31+40], D12
	005 Move [X31+48], D11
	006 Move [X31+56], D10
	007 Move [X31+64], D9
	008 Move [X31+72], D8
	009 Move [X31+80], X29
	010 Move [X31+88], X30
	011 Move [X31+96], X28
	012 Move [X31+104], X27
	013 Move [X31+112], X26
	014 Move [X31+120], X25
	015 Move [X31+128], X24
	016 Move [X31+136], X23
	017 Move [X31+144], X22
	018 Move [X31+152], X21
	019 Move [X31+160], X20
	020 Move [X31+168], X19
	021 Move X20, 0x254E000
	022 Move X23, 0x2279000
	023 Move W8, [X20+1526]
	024 Move X23, [X23+984]
	025 Move X19, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {44}
	030 Move X0, 0x227A000
	031 Move X0, [X0+3128]
	032 Call 0x1B6F7F0
	033 Move X0, 0x2279000
	034 Move X0, [X0+984]
	035 Call 0x1B6F7F0
	036 Move X0, 0x2278000
	037 Move X0, [X0+1216]
	038 Call 0x1B6F7F0
	039 Move X0, 0x227A000
	040 Move X0, [X0+3136]
	041 Call 0x1B6F7F0
	042 Move W8, 1
	043 Move [X20+1526], W8
	044 Move X24, 0x2278000
	045 Move X24, [X24+1216]
	046 Move X0, X19
	047 Move [X31+24], X31
	048 Move [X31+8], X31
	049 Call ItemSellingMachineController.get__capsulePoint0, X0
	050 Move X0, X19
	051 Move V9, V0
	052 Move V10, V1
	053 Move V11, V2
	054 Call ItemSellingMachineController.get__capsulePoint1, X0
	055 Move X0, [X23]
	056 Move V12, V0
	057 Move V13, V1
	058 Move V14, V2
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {64}
	062 Call 0x1B6F8F8
	063 Move X0, [X23]
	064 Move X8, [X0+184]
	065 Move X1, X31
	066 Move W0, [X8+8]
	067 Call LayerMask.op_Implicit, X0
	068 Move X8, [X24]
	069 Move W20, W0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {75}
	073 Move X0, X8
	074 Call 0x1B6F8F8
	075 Move X8, -19054592
	076 Move V8, [X8+2644]
	077 Move V0, V9
	078 Move V1, V10
	079 Move V2, V11
	080 Move V3, V12
	081 Move V4, V13
	082 Move V5, V14
	083 Move V6, V8
	084 Move W0, W20
	085 Move X1, X31
	086 Call Physics.OverlapCapsule, X0, X1, V0, X2
	087 Compare X0, 0
	088 JumpIfEqual {259}
	089 Move X8, [X0+24]
	090 Move X20, X0
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X26, 0x227A000
	093 Move X21, 0x2278000
	094 Move X26, [X26+3136]
	095 Move X21, [X21+1152]
	096 Move X25, X31
	097 And X8, X8, 0
	098 Add X27, X20, 32
	099 Move X28, 0x254E000
	100 Move W29, 1
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X0, [X27]
	103 Add X1, X31, 24
	104 Move X2, X31
	105 Call TriggerUtilities.TryGetNetPlayerFromCollider, X0, X1
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfNotEqual {144}
	110 Move X22, [X31+24]
	111 Move X0, X19
	112 Move X1, X31
	113 Call Component.get_transform, X0
	114 Compare X0, 0
	115 JumpIfEqual {259}
	116 Move X1, X31
	117 Call Transform.get_position, X0
	118 Move W8, [X28+1087]
	119 Move V9, V0
	120 Move V10, V1
	121 Move V11, V2
	122 Compare W8, 0
	123 JumpIfNotEqual {127}
	124 Move X0, X21
	125 Call 0x1B6F7F0
	126 Move [X28+1087], W29
	127 Compare X22, 0
	128 JumpIfEqual {259}
	129 Move X8, [X21]
	130 Move X4, [X26]
	131 Move W1, 1000
	132 Move X0, X22
	133 Move X8, [X8+184]
	134 Move V0, V9
	135 Move V1, V10
	136 Move V2, V11
	137 Move S4, [X8+4]
	138 Move S5, [X8+8]
	139 Move V3, [X8]
	140 Move X2, X31
	141 Move X3, X31
	142 Move X5, X31
	143 Call NetPlayer.Hit, X0, X1, X2, X3, X4, X5, X6
	144 Move W8, [X20+24]
	145 Add X25, X25, 1
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move X0, X19
	148 Call ItemSellingMachineController.get__capsulePoint0, X0
	149 Move X0, X19
	150 Move V9, V0
	151 Move V10, V1
	152 Move V11, V2
	153 Call ItemSellingMachineController.get__capsulePoint1, X0
	154 Move X0, [X23]
	155 Move V12, V0
	156 Move V13, V1
	157 Move V14, V2
	158 Move W8, [X0+224]
	159 Compare W8, 0
	160 JumpIfNotEqual {163}
	161 Call 0x1B6F8F8
	162 Move X0, [X23]
	163 Move X8, [X0+184]
	164 Move X1, X31
	165 Move W0, [X8+12]
	166 Call LayerMask.op_Implicit, X0
	167 Move X8, [X23]
	168 Move W20, W0
	169 Move X1, X31
	170 Move X8, [X8+184]
	171 Move W8, [X8+16]
	172 Move X0, X8
	173 Call LayerMask.op_Implicit, X0
	174 Move X8, [X24]
	175 Move W21, W0
	176 Move W9, [X8+224]
	177 Compare W9, 0
	178 JumpIfNotEqual {181}
	179 Move X0, X8
	180 Call 0x1B6F8F8
	181 Or W0, W21, W20
	182 Move V0, V9
	183 Move V1, V10
	184 Move V2, V11
	185 Move V3, V12
	186 Move V4, V13
	187 Move V5, V14
	188 Move V6, V8
	189 Move X1, X31
	190 Call Physics.OverlapCapsule, X0, X1, V0, X2
	191 Move X8, [X19+232]
	192 Compare X8, 0
	193 JumpIfEqual {259}
	194 Move X9, 0x227A000
	195 Move X9, [X9+3128]
	196 Move X20, X0
	197 Move X0, X8
	198 Move X1, [X9]
	199 Call HashSet`1<Object>.Clear, X0
	200 Compare X20, 0
	201 JumpIfEqual {259}
	202 Move X8, [X20+24]
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Move X22, X31
	205 And X8, X8, 0
	206 Add X23, X20, 32
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Move X0, [X23]
	209 Add X1, X31, 8
	210 Move X2, X31
	211 Call TriggerUtilities.TryGetItemFromCollider, X0, X1
	212 Move TEMP, X0
	213 And TEMP, TEMP, 1
	214 Compare TEMP, 1
	215 JumpIfNotEqual {234}
	216 Move X0, [X31+8]
	217 Compare X0, 0
	218 JumpIfEqual {259}
	219 Move X1, X31
	220 Call GrabbableItem.get_isVisible, X0
	221 Move TEMP, X0
	222 And TEMP, TEMP, 1
	223 Compare TEMP, 1
	224 JumpIfNotEqual {234}
	225 Move X0, X19
	226 Call ItemSellingMachineController.get_itemSoldValue, X0
	227 Move X1, [X31+8]
	228 Move W21, W0
	229 Move X0, X19
	230 Call ItemSellingMachineController.SellItem, X0, X1
	231 Add W1, W0, W21
	232 Move X0, X19
	233 Call ItemSellingMachineController.set_itemSoldValue, X0, X1
	234 Move W8, [X20+24]
	235 Add X22, X22, 1
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move X20, [X31+160]
	238 Move X19, [X31+168]
	239 Move X22, [X31+144]
	240 Move X21, [X31+152]
	241 Move X24, [X31+128]
	242 Move X23, [X31+136]
	243 Move X26, [X31+112]
	244 Move X25, [X31+120]
	245 Move X28, [X31+96]
	246 Move X27, [X31+104]
	247 Move X29, [X31+80]
	248 Move X30, [X31+88]
	249 Move D9, [X31+64]
	250 Move D8, [X31+72]
	251 Move D11, [X31+48]
	252 Move D10, [X31+56]
	253 Move D13, [X31+32]
	254 Move D12, [X31+40]
	255 Move V14, [X31+16]
	256 Add X31, X31, 176
	257 Return 
	258 Call 0x1B6FA24
	259 Call 0x1B6FA1C

Method: System.Void OnItemSellingAnimationFinished()

Disassembly:
	0x01CD6920 MOV X19, X0
	0x01CD6924 MOV W20, W1
	0x01CD6928 CBZ X8, 0x1CD693C
	0x01CD692C MOV X0, X19
	0x01CD6930 MOV X1, X8
	0x01CD6934 MOV X2, X31
	0x01CD6938 BL 0x3A9EAE8
	0x01CD693C MOV X0, X19
	0x01CD6940 MOV W1, W20
	0x01CD6944 BL 0x1CD773C
	0x01CD6948 MOV X1, X0
	0x01CD694C STR X0, [X19 + 0x98]
	0x01CD6950 MOV X0, X19
	0x01CD6954 LDP X20, X19, [X31 + 0x10]
	0x01CD6958 MOV X2, X31
	0x01CD695C LDR X30, [X31], #0x20
	0x01CD6960 B 0x3A9E9B0
	0x01CD6964 STR D10, [X31 - 0x30]!
	0x01CD6968 STP D9, D8, [X31 + 0x10]
	0x01CD696C STP X30, X19, [X31 + 0x20]
	0x01CD6970 MOV X19, X0
	0x01CD6974 FMOV S0, W31
	0x01CD6978 FMOV S1, 1
	0x01CD697C FMOV S2, W31
	0x01CD6980 FMOV S3, 1
	0x01CD6984 MOV X0, X31
	0x01CD6988 BL 0x3A75B14
	0x01CD698C MOV X0, X19
	0x01CD6990 BL 0x1CD4C44
	0x01CD6994 ADRP X8, 0xFFFFFFFFFEDD3000
	0x01CD6998 LDR V8, [X8 + 0xA54]
	0x01CD699C MOV X0, X31
	0x01CD69A0 MOV V3.16B, V8.16B
	0x01CD69A4 BL 0x3A7567C
	0x01CD69A8 MOV X0, X19
	0x01CD69AC BL 0x1CD4D44

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+64]
	005 Compare X0, 0
	006 JumpIfEqual {44}
	007 Move W8, [X0+96]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 2
	010 Compare TEMP, 2
	011 JumpIfEqual {44}
	012 Move X1, X31
	013 Call NetworkObject.get_HasStateAuthority, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {44}
	018 Move X0, X19
	019 Move W1, W31
	020 Call ItemSellingMachineController.set_isSellingInProgress, X0, X1
	021 Move X0, X19
	022 Call ItemSellingMachineController.ResetButtonsState, X0
	023 Move W1, 11
	024 Move W0, W31
	025 Move X2, X31
	026 Call Random.Range, X0, X1
	027 Move W1, W0
	028 Move X0, X19
	029 Call ItemSellingMachineController.set_randomButtonId, X0, X1
	030 Move X0, X19
	031 Call ItemSellingMachineController.get_itemSoldValue, X0
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X19
	034 Call ItemSellingMachineController.get_itemSoldValue, X0
	035 Move W1, W0
	036 Move X0, X19
	037 Call ItemSellingMachineController.RPC_AddPlayerMoneyToAll, X0, X1
	038 Move X0, X19
	039 Move W1, W31
	040 Move X30, [X31+16]
	041 Move X19, [X31+24]
	042 Call ItemSellingMachineController.set_itemSoldValue, X0, X1
	043 Return 
	044 Move X30, [X31+16]
	045 Move X19, [X31+24]
	046 Return 

Method: System.Void HandleIsOverheated()

Disassembly:
	0x01CD74A0 MOV X0, X19
	0x01CD74A4 MOV W1, W31
	0x01CD74A8 BL 0x1CD74B8
	0x01CD74AC LDP X30, X19, [X31 + 0x10]
	0x01CD74B0 ADD X31, X31, 0x20
	0x01CD74B4 RET
	0x01CD74B8 STR X30, [X31 - 0x30]!
	0x01CD74BC STP X22, X21, [X31 + 0x10]
	0x01CD74C0 STP X20, X19, [X31 + 0x20]
	0x01CD74C4 LDR X8, [X0 + 0x28]
	0x01CD74C8 CBZ X8, 0x1CD756C
	0x01CD74CC LDR W9, [X8 + 0x18]
	0x01CD74D0 MOV W20, W1
	0x01CD74D4 CMP W9, W1
	0x01CD74D8 B.LS 0x1CD7570
	0x01CD74DC SXTW X22, W20
	0x01CD74E0 ADD X8, X8, X22, 0x3, LSL
	0x01CD74E4 MOV X19, X0
	0x01CD74E8 LDR X0, [X8 + 0x20]
	0x01CD74EC CBZ X0, 0x1CD756C
	0x01CD74F0 LDR X21, [X19 + 0x50]
	0x01CD74F4 MOV X1, X31
	0x01CD74F8 BL 0x3A9B084
	0x01CD74FC CBZ X0, 0x1CD756C
	0x01CD7500 MOV X1, X31
	0x01CD7504 BL 0x3AA7658
	0x01CD7508 FMOV S3, 1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, [X0+176]
	005 Move X19, X0
	006 Call ItemSellingMachineController.get_isOverheated, X0
	007 Compare X20, 0
	008 JumpIfEqual {36}
	009 And W1, W0, 1
	010 Move X0, X20
	011 Call ItemSellingMachineView.SetOverheatedColor, X0, X1
	012 Move X0, X19
	013 Call ItemSellingMachineController.get_isOverheated, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {32}
	018 Move X0, [X19+200]
	019 Compare X0, 0
	020 JumpIfEqual {36}
	021 Move X19, [X19+216]
	022 Move X1, X31
	023 Call Transform.get_position, X0
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move S3, 1
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Call SFXManager.PlaySFX, X0, X1, V0
	031 Return 
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return 
	036 Call 0x1B6FA1C

Method: System.Void HandleIsExploded()

Disassembly:
	0x01CD6154 STP X31, X31, [X31 + 0x30]
	0x01CD6158 BL 0x25FCCA4
	0x01CD615C CBZ X20, 0x1CD6278
	0x01CD6160 LDR W8, [X20 + 0x18]
	0x01CD6164 CBZ W8, 0x1CD627C
	0x01CD6168 LDR V0, [X31 + 0x3]
	0x01CD616C ADRP X8, 0x2278000
	0x01CD6170 LDR X8, [X8 + 0x7B8]
	0x01CD6174 MOVN X9, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+176]
	004 Call ItemSellingMachineController.get_isExploded, X0
	005 Compare X19, 0
	006 JumpIfEqual {13}
	007 And W1, W0, 1
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call ItemSellingMachineView.SetExplodedColor, X0, X1
	012 Return 
	013 Call 0x1B6FA1C

Method: System.Void RPC_ExplodeMachine()

Disassembly:
	0x01CD7628 MOVZ W8, 0x1
	0x01CD762C STRB W8, [X21 + 0x607]
	0x01CD7630 LDR X0, [X22]
	0x01CD7634 BL 0x1B6EA0C
	0x01CD7638 MOV X1, X31
	0x01CD763C MOV X21, X0
	0x01CD7640 BL 0x32276F8
	0x01CD7644 STR W31, [X21 + 0x10]
	0x01CD7648 STR X20, [X21 + 0x20]
	0x01CD764C STR W19, [X21 + 0x28]
	0x01CD7650 MOV X0, X21
	0x01CD7654 LDP X20, X19, [X31 + 0x20]
	0x01CD7658 LDP X22, X21, [X31 + 0x10]
	0x01CD765C LDR X30, [X31], #0x30
	0x01CD7660 RET
	0x01CD7664 STR X30, [X31 - 0x20]!
	0x01CD7668 STP X20, X19, [X31 + 0x10]
	0x01CD766C MOV W19, W1
	0x01CD7670 MOV X1, X31
	0x01CD7674 MOV X20, X0
	0x01CD7678 BL 0x32276F8
	0x01CD767C STR W19, [X20 + 0x10]
	0x01CD7680 LDP X20, X19, [X31 + 0x10]
	0x01CD7684 LDR X30, [X31], #0x20
	0x01CD7688 RET
	0x01CD768C STP D11, D10, [X31 - 0x40]!
	0x01CD7690 STP D9, D8, [X31 + 0x10]
	0x01CD7694 STP X30, X21, [X31 + 0x20]
	0x01CD7698 STP X20, X19, [X31 + 0x30]
	0x01CD769C ADRP X20, 0x254C000
	0x01CD76A0 ADRP X21, 0x2278000
	0x01CD76A4 LDRB W8, [X20 + 0x608]
	0x01CD76A8 LDR X21, [X21 + 0xCF0]
	0x01CD76AC MOV V8.16B, V3.16B
	0x01CD76B0 MOV V9.16B, V2.16B
	0x01CD76B4 MOV V10.16B, V1.16B
	0x01CD76B8 MOV V11.16B, V0.16B
	0x01CD76BC MOV X19, X0
	0x01CD76C0 TBNZ X8, 0x0, 0x1CD76D8
	0x01CD76C4 ADRP X0, 0x2278000
	0x01CD76C8 LDR X0, [X0 + 0xCF0]
	0x01CD76CC BL 0x1B6E7F0
	0x01CD76D0 MOVZ W8, 0x1
	0x01CD76D4 STRB W8, [X20 + 0x608]
	0x01CD76D8 LDR X0, [X21]
	0x01CD76DC BL 0x1B6EA0C
	0x01CD76E0 MOV X1, X31
	0x01CD76E4 MOV X20, X0
	0x01CD76E8 BL 0x32276F8
	0x01CD76EC STR W31, [X20 + 0x10]
	0x01CD76F0 STR X19, [X20 + 0x20]
	0x01CD76F4 STP S11, S10, [X20 + 0x28]
	0x01CD76F8 STP S8, S9, [X20 + 0x30]
	0x01CD76FC MOV X0, X20
	0x01CD7700 LDP X20, X19, [X31 + 0x30]
	0x01CD7704 LDP X30, X21, [X31 + 0x20]
	0x01CD7708 LDP D9, D8, [X31 + 0x10]
	0x01CD770C LDP D11, D10, [X31], #0x40
	0x01CD7710 RET
	0x01CD7714 STR X30, [X31 - 0x20]!
	0x01CD7718 STP X20, X19, [X31 + 0x10]
	0x01CD771C MOV W19, W1
	0x01CD7720 MOV X1, X31
	0x01CD7724 MOV X20, X0
	0x01CD7728 BL 0x32276F8
	0x01CD772C STR W19, [X20 + 0x10]
	0x01CD7730 LDP X20, X19, [X31 + 0x10]
	0x01CD7734 LDR X30, [X31], #0x20
	0x01CD7738 RET
	0x01CD773C STR X30, [X31 - 0x30]!
	0x01CD7740 STP X22, X21, [X31 + 0x10]
	0x01CD7744 STP X20, X19, [X31 + 0x20]
	0x01CD7748 ADRP X21, 0x254C000
	0x01CD774C ADRP X22, 0x2278000
	0x01CD7750 LDRB W8, [X21 + 0x609]
	0x01CD7754 LDR X22, [X22 + 0xCF8]
	0x01CD7758 MOV W19, W1
	0x01CD775C MOV X20, X0
	0x01CD7760 TBNZ X8, 0x0, 0x1CD7778
	0x01CD7764 ADRP X0, 0x2278000
	0x01CD7768 LDR X0, [X0 + 0xCF8]
	0x01CD776C BL 0x1B6E7F0
	0x01CD7770 MOVZ W8, 0x1
	0x01CD7774 STRB W8, [X21 + 0x609]
	0x01CD7778 LDR X0, [X22]
	0x01CD777C BL 0x1B6EA0C
	0x01CD7780 MOV X1, X31
	0x01CD7784 MOV X21, X0
	0x01CD7788 BL 0x32276F8
	0x01CD778C STR W31, [X21 + 0x10]
	0x01CD7790 STR X20, [X21 + 0x20]
	0x01CD7794 STR W19, [X21 + 0x28]
	0x01CD7798 MOV X0, X21
	0x01CD779C LDP X20, X19, [X31 + 0x20]
	0x01CD77A0 LDP X22, X21, [X31 + 0x10]
	0x01CD77A4 LDR X30, [X31], #0x30
	0x01CD77A8 RET
	0x01CD77AC STR X30, [X31 - 0x20]!
	0x01CD77B0 STP X20, X19, [X31 + 0x10]
	0x01CD77B4 MOV W19, W1
	0x01CD77B8 MOV X1, X31
	0x01CD77BC MOV X20, X0
	0x01CD77C0 BL 0x32276F8
	0x01CD77C4 STR W19, [X20 + 0x10]
	0x01CD77C8 LDP X20, X19, [X31 + 0x10]
	0x01CD77CC LDR X30, [X31], #0x20
	0x01CD77D0 RET
	0x01CD77D4 STP X30, X21, [X31 - 0x20]!
	0x01CD77D8 STP X20, X19, [X31 + 0x10]
	0x01CD77DC MOV W19, W3
	0x01CD77E0 MOV W20, W2
	0x01CD77E4 MOV W21, W1
	0x01CD77E8 MOV W0, W1
	0x01CD77EC MOV W1, W2
	0x01CD77F0 MOV X2, X31
	0x01CD77F4 BL 0x3A98D10
	0x01CD77F8 CMP W0, W19
	0x01CD77FC B.NE 0x1CD780C
	0x01CD7800 MOV W0, W21
	0x01CD7804 MOV W1, W20
	0x01CD7808 B 0x1CD77F0
	0x01CD780C LDP X20, X19, [X31 + 0x10]
	0x01CD7810 LDP X30, X21, [X31], #0x20
	0x01CD7814 RET
	0x01CD7818 STR X30, [X31 - 0x30]!
	0x01CD781C STP X22, X21, [X31 + 0x10]
	0x01CD7820 STP X20, X19, [X31 + 0x20]
	0x01CD7824 ADRP X21, 0x254C000
	0x01CD7828 ADRP X22, 0x2276000
	0x01CD782C LDRB W8, [X21 + 0x60A]
	0x01CD7830 LDR X22, [X22 + 0x818]
	0x01CD7834 MOV W19, W2
	0x01CD7838 MOV X20, X1
	0x01CD783C TBNZ X8, 0x0, 0x1CD7860
	0x01CD7840 ADRP X0, 0x2276000
	0x01CD7844 LDR X0, [X0 + 0xBD0]
	0x01CD7848 BL 0x1B6E7F0
	0x01CD784C ADRP X0, 0x2276000
	0x01CD7850 LDR X0, [X0 + 0x818]
	0x01CD7854 BL 0x1B6E7F0
	0x01CD7858 MOVZ W8, 0x1
	0x01CD785C STRB W8, [X21 + 0x60A]
	0x01CD7860 LDR X21, [X22]
	0x01CD7864 CMP W19, 0x1
	0x01CD7868 B.LT 0x1CD78AC
	0x01CD786C ADRP X22, 0x2276000
	0x01CD7870 LDR X22, [X22 + 0xBD0]
	0x01CD7874 CMP W19, 0x1
	0x01CD7878 MOV X1, X20
	0x01CD787C B.EQ 0x1CD7894
	0x01CD7880 LDR X1, [X22]
	0x01CD7884 MOV X0, X20
	0x01CD7888 MOV X2, X31
	0x01CD788C BL 0x3084780
	0x01CD7890 MOV X1, X0
	0x01CD7894 MOV X0, X21
	0x01CD7898 MOV X2, X31
	0x01CD789C BL 0x3084780
	0x01CD78A0 SUBS W19, W19, 0x1
	0x01CD78A4 MOV X21, X0
	0x01CD78A8 B.NE 0x1CD7874
	0x01CD78AC MOV X0, X21
	0x01CD78B0 LDP X20, X19, [X31 + 0x20]
	0x01CD78B4 LDP X22, X21, [X31 + 0x10]
	0x01CD78B8 LDR X30, [X31], #0x30
	0x01CD78BC RET
	0x01CD78C0 STP X30, X21, [X31 - 0x20]!
	0x01CD78C4 STP X20, X19, [X31 + 0x10]
	0x01CD78C8 ADRP X20, 0x254C000
	0x01CD78CC ADRP X21, 0x2277000
	0x01CD78D0 LDRB W8, [X20 + 0x60B]
	0x01CD78D4 LDR X21, [X21 + 0x2E8]
	0x01CD78D8 MOV X19, X0
	0x01CD78DC TBNZ X8, 0x0, 0x1CD78F4
	0x01CD78E0 ADRP X0, 0x2277000
	0x01CD78E4 LDR X0, [X0 + 0x2E8]
	0x01CD78E8 BL 0x1B6E7F0
	0x01CD78EC MOVZ W8, 0x1
	0x01CD78F0 STRB W8, [X20 + 0x60B]
	0x01CD78F4 LDR X0, [X21]
	0x01CD78F8 BL 0x1B6EA0C
	0x01CD78FC FMOV S0, 1.5
	0x01CD7900 MOV X1, X31
	0x01CD7904 MOV X20, X0
	0x01CD7908 BL 0x3AA273C
	0x01CD790C STR X20, [X19 + 0x88]
	0x01CD7910 LDR X0, [X21]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+80], X30
	003 Move [X31+88], X23
	004 Move [X31+96], X22
	005 Move [X31+104], X21
	006 Move [X31+112], X20
	007 Move [X31+120], X19
	008 Move X20, 0x254D000
	009 Move W8, [X20+1527]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0x2278000
	016 Move X0, [X0+448]
	017 Call 0x1B6F7F0
	018 Move X0, 0x2278000
	019 Move X0, [X0+1496]
	020 Call 0x1B6F7F0
	021 Move X0, 0x2278000
	022 Move X0, [X0+584]
	023 Call 0x1B6F7F0
	024 Move X0, 0x2278000
	025 Move X0, [X0+592]
	026 Call 0x1B6F7F0
	027 Move X0, 0x2279000
	028 Move X0, [X0+3200]
	029 Call 0x1B6F7F0
	030 Move W8, 1
	031 Move [X20+1527], W8
	032 Move W8, [X19+88]
	033 Compare W8, 0
	034 JumpIfEqual {129}
	035 Move [X19+88], W31
	036 Move X0, [X19+64]
	037 Compare X0, 0
	038 JumpIfEqual {61}
	039 Move W8, [X0+96]
	040 Move TEMP, X8
	041 And TEMP, TEMP, 2
	042 Compare TEMP, 2
	043 JumpIfEqual {61}
	044 Move X1, X31
	045 Call NetworkObject.get_HasStateAuthority, X0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {61}
	050 Move S0, W31
	051 Move X0, X19
	052 Call ItemSellingMachineController.set_heatMeter, X0, V0
	053 Move X0, X19
	054 Move W1, W31
	055 Call ItemSellingMachineController.set_isOverheated, X0, X1
	056 Move W1, 1
	057 Move X0, X19
	058 Call ItemSellingMachineController.set_isExploded, X0, X1
	059 Move X0, X19
	060 Call ItemSellingMachineController.ResetButtonsState, X0
	061 Move X0, [X19+200]
	062 Compare X0, 0
	063 JumpIfEqual {226}
	064 Move X23, 0x2278000
	065 Move X22, 0x2278000
	066 Move X20, [X19+56]
	067 Move X21, [X19+208]
	068 Move X23, [X23+584]
	069 Move X22, [X22+592]
	070 Move X1, X31
	071 Call Transform.get_position, X0
	072 Move X1, [X23]
	073 Add X0, X31, 32
	074 Move [X31+32], X31
	075 Move [X31+40], X31
	076 Call Nullable`1<Vector3>..ctor, X0, X1
	077 Move X23, 0x254D000
	078 Move W8, [X23+1108]
	079 Compare W8, 0
	080 JumpIfNotEqual {86}
	081 Move X0, 0x2278000
	082 Move X0, [X0+504]
	083 Call 0x1B6F7F0
	084 Move W8, 1
	085 Move [X23+1108], W8
	086 Move X8, 0x2278000
	087 Move X8, [X8+504]
	088 Move X1, [X22]
	089 Add X0, X31, 8
	090 Move X8, [X8]
	091 Move X8, [X8+184]
	092 Move S0, [X8]
	093 Move S1, [X8+4]
	094 Move S2, [X8+8]
	095 Move S3, [X8+12]
	096 Move [X31+8], X31
	097 Move [X31+16], X31
	098 Move [X31+24], W31
	099 Call Nullable`1<Quaternion>..ctor, X0, X1
	100 Compare X20, 0
	101 JumpIfEqual {226}
	102 Move X8, 0x2278000
	103 Move X8, [X8+1496]
	104 Move X2, [X31+32]
	105 Move X3, [X31+40]
	106 NotImplemented "Instruction LDUR not yet implemented."
	107 Move W9, [X31+24]
	108 Move X8, [X8]
	109 Add X4, X31, 48
	110 Move X0, X20
	111 Move X1, X21
	112 Move X5, X31
	113 Move X6, X31
	114 Move W7, W31
	115 Move [X31+3], V0
	116 Move [X31+64], W9
	117 Move [X31], X8
	118 Call 0x2113E18, X0, X1, X2, X3, X4, X5, X6
	119 Move X0, [X19+200]
	120 Compare X0, 0
	121 JumpIfEqual {226}
	122 Move X19, [X19+224]
	123 Move X1, X31
	124 Call Transform.get_position, X0
	125 Move S3, 1
	126 Move X0, X19
	127 Move X1, X31
	128 Call SFXManager.PlaySFX, X0, X1, V0
	129 Move X20, 0x2278000
	130 Move X20, [X20+448]
	131 Move X0, [X20]
	132 Move W8, [X0+224]
	133 Compare W8, 0
	134 JumpIfNotEqual {136}
	135 Call 0x1B6F8F8
	136 Move X0, X19
	137 Move X1, X31
	138 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	139 Move X0, [X19+56]
	140 Compare X0, 0
	141 JumpIfEqual {226}
	142 Move X1, X31
	143 Call NetworkRunner.get_Stage, X0
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move X20, [X31+112]
	146 Move X19, [X31+120]
	147 Move X22, [X31+96]
	148 Move X21, [X31+104]
	149 Move X30, [X31+80]
	150 Move X23, [X31+88]
	151 Add X31, X31, 128
	152 Return 
	153 Move X0, [X19+64]
	154 Compare X0, 0
	155 JumpIfEqual {226}
	156 Move X1, X31
	157 Call NetworkObject.GetLocalAuthorityMask, X0
	158 And W31, W0, 7
	159 Move X8, [X19+56]
	160 Compare X8, 0
	161 JumpIfEqual {226}
	162 Move X0, [X8+80]
	163 Compare X0, 0
	164 JumpIfEqual {226}
	165 Move X1, X31
	166 Call Simulation.HasAnyActiveConnections, X0
	167 Move TEMP, X0
	168 And TEMP, TEMP, 1
	169 Compare TEMP, 1
	170 JumpIfNotEqual {36}
	171 Move X8, [X19+56]
	172 Compare X8, 0
	173 JumpIfEqual {226}
	174 Move X0, [X8+80]
	175 Move W1, 8
	176 Move X2, X31
	177 Call SimulationMessage.Allocate, X0, X1
	178 Move X20, X0
	179 Move W0, 1
	180 Move X1, X31
	181 Call Assert.Check, X0
	182 Move X8, [X19+64]
	183 Compare X8, 0
	184 JumpIfEqual {226}
	185 Move X8, [X8+32]
	186 Compare X8, 0
	187 JumpIfEqual {210}
	188 Move W0, [X8]
	189 Move X0, [X20]
	190 Move X19, [X19+64]
	191 Move W8, [X0+224]
	192 Compare W8, 0
	193 JumpIfNotEqual {195}
	194 Call 0x1B6F8F8
	195 Move X8, 0x2279000
	196 Move X8, [X8+3200]
	197 Move X1, X19
	198 Move X20, [X31+112]
	199 Move X19, [X31+120]
	200 Move X22, [X31+96]
	201 Move X21, [X31+104]
	202 Move X0, [X8]
	203 Move X30, [X31+80]
	204 Move X23, [X31+88]
	205 Move W2, 7
	206 Move X3, X31
	207 Add X31, X31, 128
	208 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	209 Return 
	210 Move X0, X31
	211 Move W1, [X19+104]
	212 Move W2, 2
	213 Move X3, X31
	214 Call RpcHeader.Create, X0, X1, X2
	215 Move [X20+28], X0
	216 Compare X20, 0
	217 JumpIfEqual {226}
	218 Move W8, 64
	219 Move [X20+12], W8
	220 Move X0, [X19+56]
	221 Compare X0, 0
	222 JumpIfEqual {226}
	223 Move X1, X20
	224 Move X2, X31
	225 Call NetworkRunner.SendRpc, X0, X1
	226 Call 0x1B6FA1C

Method: System.Void RPC_RecoverExplosion()

Disassembly:
	0x01CD69B0 MOV V3.16B, V8.16B
	0x01CD69B4 MOV X0, X31
	0x01CD69B8 BL 0x3A7567C
	0x01CD69BC MOV X0, X19
	0x01CD69C0 BL 0x1CD4C44
	0x01CD69C4 MOV X0, X19
	0x01CD69C8 MOV V8.16B, V0.16B
	0x01CD69CC MOV V9.16B, V1.16B
	0x01CD69D0 MOV V10.16B, V2.16B
	0x01CD69D4 BL 0x1CD4D44
	0x01CD69D8 MOV V3.16B, V0.16B
	0x01CD69DC MOV V4.16B, V1.16B
	0x01CD69E0 MOV V0.16B, V8.16B
	0x01CD69E4 MOV V1.16B, V9.16B
	0x01CD69E8 LDP X30, X19, [X31 + 0x20]
	0x01CD69EC LDP D9, D8, [X31 + 0x10]
	0x01CD69F0 MOV V5.16B, V2.16B
	0x01CD69F4 MOV V2.16B, V10.16B
	0x01CD69F8 MOV X0, X31
	0x01CD69FC LDR V10, [X31], #0x30
	0x01CD6A00 B 0x3A755E8
	0x01CD6A04 STP X30, X23, [X31 - 0x30]!
	0x01CD6A08 STP X22, X21, [X31 + 0x10]
	0x01CD6A0C STP X20, X19, [X31 + 0x20]
	0x01CD6A10 ADRP X22, 0x254D000
	0x01CD6A14 ADRP X23, 0x2279000
	0x01CD6A18 ADRP X21, 0x2278000
	0x01CD6A1C ADRP X20, 0x2278000
	0x01CD6A20 LDRB W8, [X22 + 0x5FB]
	0x01CD6A24 LDR X23, [X23 + 0xC88]
	0x01CD6A28 LDR X21, [X21 + 0x4F8]
	0x01CD6A2C LDR X20, [X20 + 0x500]
	0x01CD6A30 MOV X19, X0
	0x01CD6A34 TBNZ X8, 0x0, 0x1CD6A64
	0x01CD6A38 ADRP X0, 0x2278000
	0x01CD6A3C LDR X0, [X0 + 0x500]
	0x01CD6A40 BL 0x1B6E7F0
	0x01CD6A44 ADRP X0, 0x2278000
	0x01CD6A48 LDR X0, [X0 + 0x4F8]
	0x01CD6A4C BL 0x1B6E7F0
	0x01CD6A50 ADRP X0, 0x2279000
	0x01CD6A54 LDR X0, [X0 + 0xC88]
	0x01CD6A58 BL 0x1B6E7F0
	0x01CD6A5C MOVZ W8, 0x1
	0x01CD6A60 STRB W8, [X22 + 0x5FB]
	0x01CD6A64 LDR X0, [X23]
	0x01CD6A68 MOVZ W1, 0xC
	0x01CD6A6C BL 0x1B6E868
	0x01CD6A70 STR X0, [X19 + 0xB8]
	0x01CD6A74 LDR X0, [X21]
	0x01CD6A78 BL 0x1B6EA0C
	0x01CD6A7C LDR X1, [X20]
	0x01CD6A80 MOV X20, X0
	0x01CD6A84 BL 0x2BD32D4
	0x01CD6A88 STR X20, [X19 + 0xE8]
	0x01CD6A8C MOV X0, X19
	0x01CD6A90 LDP X20, X19, [X31 + 0x20]
	0x01CD6A94 LDP X22, X21, [X31 + 0x10]
	0x01CD6A98 MOV X1, X31
	0x01CD6A9C LDP X30, X23, [X31], #0x30
	0x01CD6AA0 B 0x1D661D8
	0x01CD6AA4 STR X30, [X31 - 0x20]!
	0x01CD6AA8 STP X20, X19, [X31 + 0x10]
	0x01CD6AAC ADRP X19, 0x254D000
	0x01CD6AB0 ADRP X20, 0x2279000
	0x01CD6AB4 LDRB W8, [X19 + 0x5FC]
	0x01CD6AB8 LDR X20, [X20 + 0xC18]
	0x01CD6ABC TBNZ X8, 0x0, 0x1CD6AD4
	0x01CD6AC0 ADRP X0, 0x2279000
	0x01CD6AC4 LDR X0, [X0 + 0xC18]
	0x01CD6AC8 BL 0x1B6E7F0
	0x01CD6ACC MOVZ W8, 0x1
	0x01CD6AD0 STRB W8, [X19 + 0x5FC]
	0x01CD6AD4 LDR X8, [X20]
	0x01CD6AD8 ADRP X9, 0xFFFFFFFFFEDD7000
	0x01CD6ADC LDR V0, [X9 + 0x1C0]
	0x01CD6AE0 LDP X20, X19, [X31 + 0x10]
	0x01CD6AE4 LDR X8, [X8 + 0xB8]
	0x01CD6AE8 STR D0, [X8]
	0x01CD6AEC STR W31, [X8 + 0x8]
	0x01CD6AF0 LDR X30, [X31], #0x20
	0x01CD6AF4 RET
	0x01CD6AF8 SUB X31, X31, 0xA0
	0x01CD6AFC STR X30, [X31 + 0x60]
	0x01CD6B00 STP X24, X23, [X31 + 0x70]
	0x01CD6B04 STP X22, X21, [X31 + 0x80]
	0x01CD6B08 STP X20, X19, [X31 + 0x90]
	0x01CD6B0C ADRP X21, 0x254D000
	0x01CD6B10 ADRP X20, 0x2278000
	0x01CD6B14 LDRB W8, [X21 + 0x5FD]
	0x01CD6B18 LDR X20, [X20 + 0x1C0]
	0x01CD6B1C MOV X19, X0
	0x01CD6B20 TBNZ X8, 0x0, 0x1CD6B68
	0x01CD6B24 ADRP X0, 0x2279000
	0x01CD6B28 LDR X0, [X0 + 0xC90]
	0x01CD6B2C BL 0x1B6E7F0
	0x01CD6B30 ADRP X0, 0x2279000
	0x01CD6B34 LDR X0, [X0 + 0xC98]
	0x01CD6B38 BL 0x1B6E7F0
	0x01CD6B3C ADRP X0, 0x2278000
	0x01CD6B40 LDR X0, [X0 + 0x1C0]
	0x01CD6B44 BL 0x1B6E7F0
	0x01CD6B48 ADRP X0, 0x2279000
	0x01CD6B4C LDR X0, [X0 + 0xCA0]
	0x01CD6B50 BL 0x1B6E7F0
	0x01CD6B54 ADRP X0, 0x2279000
	0x01CD6B58 LDR X0, [X0 + 0xCA8]
	0x01CD6B5C BL 0x1B6E7F0
	0x01CD6B60 MOVZ W8, 0x1
	0x01CD6B64 STRB W8, [X21 + 0x5FD]
	0x01CD6B68 ADRP X23, 0x2279000
	0x01CD6B6C LDR X23, [X23 + 0xCA0]
	0x01CD6B70 LDRB W1, [X19 + 0x80]
	0x01CD6B74 ADRP X24, 0x2279000
	0x01CD6B78 ADRP X22, 0x2279000
	0x01CD6B7C ADRP X21, 0x2279000
	0x01CD6B80 LDR X24, [X24 + 0xC90]
	0x01CD6B84 LDR X22, [X22 + 0xCA8]
	0x01CD6B88 LDR X21, [X21 + 0xC98]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x254E000
	005 Move W8, [X20+1528]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x2279000
	012 Move X0, [X0+448]
	013 Call 0x1B6F7F0
	014 Move X0, 0x227A000
	015 Move X0, [X0+3144]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1528], W8
	019 Move W8, [X19+88]
	020 Compare W8, 0
	021 JumpIfEqual {57}
	022 Move [X19+88], W31
	023 Move X0, [X19+64]
	024 Compare X0, 0
	025 JumpIfEqual {73}
	026 Move W8, [X0+96]
	027 Move TEMP, X8
	028 And TEMP, TEMP, 2
	029 Compare TEMP, 2
	030 JumpIfEqual {73}
	031 Move X1, X31
	032 Call NetworkObject.get_HasStateAuthority, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {73}
	037 Move S0, W31
	038 Move X0, X19
	039 Call ItemSellingMachineController.set_heatMeter, X0, V0
	040 Move X0, X19
	041 Move W1, W31
	042 Call ItemSellingMachineController.set_isOverheated, X0, X1
	043 Move X0, X19
	044 Move W1, W31
	045 Call ItemSellingMachineController.set_isExploded, X0, X1
	046 Move W1, 11
	047 Move W0, W31
	048 Move X2, X31
	049 Call Random.Range, X0, X1
	050 Move W1, W0
	051 Move X0, X19
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Call ItemSellingMachineController.set_randomButtonId, X0, X1
	056 Return 
	057 Move X20, 0x2279000
	058 Move X20, [X20+448]
	059 Move X0, [X20]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1B6F8F8
	064 Move X0, X19
	065 Move X1, X31
	066 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	067 Move X0, [X19+56]
	068 Compare X0, 0
	069 JumpIfEqual {146}
	070 Move X1, X31
	071 Call NetworkRunner.get_Stage, X0
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X30, [X31+32]
	076 Return 
	077 Move X0, [X19+64]
	078 Compare X0, 0
	079 JumpIfEqual {146}
	080 Move X1, X31
	081 Call NetworkObject.GetLocalAuthorityMask, X0
	082 And W31, W0, 7
	083 Move X8, [X19+56]
	084 Compare X8, 0
	085 JumpIfEqual {146}
	086 Move X0, [X8+80]
	087 Compare X0, 0
	088 JumpIfEqual {146}
	089 Move X1, X31
	090 Call Simulation.HasAnyActiveConnections, X0
	091 Move TEMP, X0
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfNotEqual {23}
	095 Move X8, [X19+56]
	096 Compare X8, 0
	097 JumpIfEqual {146}
	098 Move X0, [X8+80]
	099 Move W1, 8
	100 Move X2, X31
	101 Call SimulationMessage.Allocate, X0, X1
	102 Move X20, X0
	103 Move W0, 1
	104 Move X1, X31
	105 Call Assert.Check, X0
	106 Move X8, [X19+64]
	107 Compare X8, 0
	108 JumpIfEqual {146}
	109 Move X8, [X8+32]
	110 Compare X8, 0
	111 JumpIfEqual {130}
	112 Move W0, [X8]
	113 Move X0, [X20]
	114 Move X19, [X19+64]
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {119}
	118 Call 0x1B6F8F8
	119 Move X8, 0x227A000
	120 Move X8, [X8+3144]
	121 Move X1, X19
	122 Move X20, [X31+16]
	123 Move X19, [X31+24]
	124 Move W2, 7
	125 Move X0, [X8]
	126 Move X3, X31
	127 Move X30, [X31+32]
	128 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	129 Return 
	130 Move X0, X31
	131 Move W1, [X19+104]
	132 Move W2, 3
	133 Move X3, X31
	134 Call RpcHeader.Create, X0, X1, X2
	135 Move [X20+28], X0
	136 Compare X20, 0
	137 JumpIfEqual {146}
	138 Move W8, 64
	139 Move [X20+12], W8
	140 Move X0, [X19+56]
	141 Compare X0, 0
	142 JumpIfEqual {146}
	143 Move X1, X20
	144 Move X2, X31
	145 Call NetworkRunner.SendRpc, X0, X1
	146 Call 0x1B6FA1C

Method: System.Void RPC_AddPlayerMoneyToAll(System.Int32 amount)

Disassembly:
	0x01CD72FC CBZ X29, 0x1CD7448
	0x01CD7300 LDR X0, [X25]
	0x01CD7304 LDR X20, [X29 + 0x20]
	0x01CD7308 BL 0x1B6EA0C
	0x01CD730C LDR X2, [X26]
	0x01CD7310 B 0x1CD7328
	0x01CD7314 CBZ X29, 0x1CD7448
	0x01CD7318 LDR X0, [X25]
	0x01CD731C LDR X20, [X29 + 0x20]
	0x01CD7320 BL 0x1B6EA0C
	0x01CD7324 LDR X2, [X27]
	0x01CD7328 MOV X1, X19
	0x01CD732C MOV X3, X31
	0x01CD7330 MOV X21, X0
	0x01CD7334 BL 0x27EC49C
	0x01CD7338 MOV X0, X20
	0x01CD733C MOV X1, X21
	0x01CD7340 MOV X2, X31
	0x01CD7344 BL 0x322A750
	0x01CD7348 CBZ X0, 0x1CD737C
	0x01CD734C LDR X21, [X25]
	0x01CD7350 MOV X20, X0
	0x01CD7354 MOV X1, X21
	0x01CD7358 BL 0x1B6E8FC
	0x01CD735C CBZ X0, 0x1CD746C
	0x01CD7360 STR X0, [X29 + 0x20]
	0x01CD7364 LDR X21, [X25]
	0x01CD7368 MOV X0, X20
	0x01CD736C MOV X1, X21
	0x01CD7370 BL 0x1B6E8FC
	0x01CD7374 CBNZ X0, 0x1CD7380
	0x01CD7378 B 0x1CD746C
	0x01CD737C STR X31, [X29 + 0x20]
	0x01CD7380 LDR X8, [X19 + 0x28]
	0x01CD7384 ADD X24, X24, 0x1
	0x01CD7388 CBNZ X8, 0x1CD728C
	0x01CD738C B 0x1CD7448
	0x01CD7390 LDR X8, [X19 + 0x30]
	0x01CD7394 CBZ X8, 0x1CD7448
	0x01CD7398 LDR X0, [X23]
	0x01CD739C LDR W1, [X8 + 0x18]
	0x01CD73A0 BL 0x1B6E868
	0x01CD73A4 LDR X8, [X19 + 0x30]
	0x01CD73A8 STR X0, [X19 + 0x20]
	0x01CD73AC CBZ X8, 0x1CD7448
	0x01CD73B0 MOV X23, X31
	0x01CD73B4 MOV X21, X31
	0x01CD73B8 LDR W9, [X8 + 0x18]
	0x01CD73BC CMP W21, W9
	0x01CD73C0 B.GE 0x1CD744C
	0x01CD73C4 CMP W21, W9
	0x01CD73C8 B.CS 0x1CD7468
	0x01CD73CC ADD X8, X8, X21, 0x3, LSL
	0x01CD73D0 LDR X0, [X8 + 0x20]
	0x01CD73D4 CBZ X0, 0x1CD7448
	0x01CD73D8 LDR X24, [X19 + 0x20]
	0x01CD73DC MOV X1, X31
	0x01CD73E0 BL 0x3A7BCC8
	0x01CD73E4 LDR X8, [X22]
	0x01CD73E8 MOV X20, X0
	0x01CD73EC LDR W9, [X8 + 0xE0]
	0x01CD73F0 CBNZ W9, 0x1CD73FC
	0x01CD73F4 MOV X0, X8
	0x01CD73F8 BL 0x1B6E8F8
	0x01CD73FC CBZ X20, 0x1CD7448
	0x01CD7400 LDR X8, [X22]
	0x01CD7404 MOV X0, X20
	0x01CD7408 MOV X2, X31
	0x01CD740C LDR X8, [X8 + 0xB8]
	0x01CD7410 LDR W1, [X8 + 0x4]
	0x01CD7414 BL 0x3A7D110
	0x01CD7418 CBZ X24, 0x1CD7448
	0x01CD741C LDR W8, [X24 + 0x18]
	0x01CD7420 ADD X21, X21, 0x1
	0x01CD7424 SUB W9, W21, 0x1
	0x01CD7428 CMP W9, W8
	0x01CD742C B.CS 0x1CD7468
	0x01CD7430 ADD X8, X24, X23
	0x01CD7434 STP S0, S1, [X8 + 0x20]
	0x01CD7438 STP S2, S3, [X8 + 0x28]
	0x01CD743C LDR X8, [X19 + 0x30]
	0x01CD7440 ADD X23, X23, 0x10
	0x01CD7444 CBNZ X8, 0x1CD73B8
	0x01CD7448 BL 0x1B6EA1C
	0x01CD744C LDP X20, X19, [X31 + 0x50]
	0x01CD7450 LDP X22, X21, [X31 + 0x40]
	0x01CD7454 LDP X24, X23, [X31 + 0x30]
	0x01CD7458 LDP X26, X25, [X31 + 0x20]
	0x01CD745C LDP X28, X27, [X31 + 0x10]
	0x01CD7460 LDP X29, X30, [X31], #0x60
	0x01CD7464 RET
	0x01CD7468 BL 0x1B6EA24
	0x01CD746C MOV X0, X20
	0x01CD7470 MOV X1, X21
	0x01CD7474 BL 0x1B6ECDC
	0x01CD7478 SUB X31, X31, 0x20
	0x01CD747C STP X30, X19, [X31 + 0x10]
	0x01CD7480 MOV X8, X1
	0x01CD7484 MOV X19, X0
	0x01CD7488 ADD X1, X31, 0x8
	0x01CD748C MOV X0, X8
	0x01CD7490 MOV X2, X31
	0x01CD7494 STR X31, [X31 + 0x8]
	0x01CD7498 BL 0x1CF25DC
	0x01CD749C TBZ X0, 0x0, 0x1CD74AC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x254D000
	006 Move W8, [X21+1529]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x2278000
	014 Move X0, [X0+448]
	015 Call 0x1B6F7F0
	016 Move X0, 0x2279000
	017 Move X0, [X0+3192]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X21+1529], W8
	021 Move W8, [X20+88]
	022 Compare W8, 0
	023 JumpIfEqual {41}
	024 Move [X20+88], W31
	025 Move TEMP, X19
	026 And TEMP, TEMP, -2147483648
	027 Compare TEMP, -2147483648
	028 JumpIfEqual {57}
	029 Move X0, [X20+176]
	030 Compare X0, 0
	031 JumpIfEqual {133}
	032 Move W1, W19
	033 Call ItemSellingMachineView.PlayValueTextAnimation, X0, X1
	034 Move W0, W19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Call GameManager.AddPlayerMoney, X0
	040 Return 
	041 Move X21, 0x2278000
	042 Move X21, [X21+448]
	043 Move X0, [X21]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1B6F8F8
	048 Move X0, X20
	049 Move X1, X31
	050 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	051 Move X0, [X20+56]
	052 Compare X0, 0
	053 JumpIfEqual {133}
	054 Move X1, X31
	055 Call NetworkRunner.get_Stage, X0
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return 
	062 Move X0, [X20+64]
	063 Compare X0, 0
	064 JumpIfEqual {133}
	065 Move X1, X31
	066 Call NetworkObject.GetLocalAuthorityMask, X0
	067 And W31, W0, 7
	068 Move X8, [X20+56]
	069 Compare X8, 0
	070 JumpIfEqual {133}
	071 Move X0, [X8+80]
	072 Compare X0, 0
	073 JumpIfEqual {133}
	074 Move X1, X31
	075 Call Simulation.HasAnyActiveConnections, X0
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {25}
	080 Move X8, [X20+56]
	081 Compare X8, 0
	082 JumpIfEqual {133}
	083 Move X0, [X8+80]
	084 Move W1, 12
	085 Move X2, X31
	086 Call SimulationMessage.Allocate, X0, X1
	087 Move X21, X0
	088 Move W0, 1
	089 Move X1, X31
	090 Call Assert.Check, X0
	091 Move X8, [X20+64]
	092 Compare X8, 0
	093 JumpIfEqual {133}
	094 Move X8, [X8+32]
	095 Compare X8, 0
	096 JumpIfEqual {116}
	097 Move W0, [X8]
	098 Move X0, [X21]
	099 Move X19, [X20+64]
	100 Move W8, [X0+224]
	101 Compare W8, 0
	102 JumpIfNotEqual {104}
	103 Call 0x1B6F8F8
	104 Move X8, 0x2279000
	105 Move X8, [X8+3192]
	106 Move X1, X19
	107 Move X20, [X31+16]
	108 Move X19, [X31+24]
	109 Move W2, 7
	110 Move X0, [X8]
	111 Move X3, X31
	112 Move X30, [X31+32]
	113 Move X21, [X31+40]
	114 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	115 Return 
	116 Move X0, X31
	117 Move W1, [X20+104]
	118 Move W2, 4
	119 Move X3, X31
	120 Call RpcHeader.Create, X0, X1, X2
	121 Move [X21+28], X0
	122 Move [X21+36], W19
	123 Compare X21, 0
	124 JumpIfEqual {133}
	125 Move W8, 96
	126 Move [X21+12], W8
	127 Move X0, [X20+56]
	128 Compare X0, 0
	129 JumpIfEqual {133}
	130 Move X1, X21
	131 Move X2, X31
	132 Call NetworkRunner.SendRpc, X0, X1
	133 Call 0x1B6FA1C

Method: System.Void RPC_ButtonPressed(System.Int32 buttonId)

Disassembly:
	0x01CD48C0 MOV X0, X19
	0x01CD48C4 MOV X2, X31
	0x01CD48C8 BL 0x31E7550
	0x01CD48CC ADRP X0, 0x227B000
	0x01CD48D0 LDR X0, [X0 + 0xBA8]
	0x01CD48D4 BL 0x1B6E804
	0x01CD48D8 MOV X1, X0
	0x01CD48DC MOV X0, X19
	0x01CD48E0 BL 0x1B6E8E8
	0x01CD48E4 STP X30, X19, [X31 - 0x10]!
	0x01CD48E8 LDR X8, [X0 + 0x50]
	0x01CD48EC CBZ X8, 0x1CD48FC
	0x01CD48F0 STR W1, [X8 + 0x68]
	0x01CD48F4 LDP X30, X19, [X31], #0x10
	0x01CD48F8 RET
	0x01CD48FC ADRP X0, 0x2279000
	0x01CD4900 LDR X0, [X0 + 0x490]
	0x01CD4904 BL 0x1B6E804
	0x01CD4908 BL 0x1B6EA0C
	0x01CD490C MOV X19, X0
	0x01CD4910 ADRP X0, 0x227B000
	0x01CD4914 LDR X0, [X0 + 0xBA0]
	0x01CD4918 BL 0x1B6E804
	0x01CD491C MOV X1, X0
	0x01CD4920 MOV X0, X19
	0x01CD4924 MOV X2, X31
	0x01CD4928 BL 0x31E7550
	0x01CD492C ADRP X0, 0x227B000
	0x01CD4930 LDR X0, [X0 + 0xBB0]
	0x01CD4934 BL 0x1B6E804
	0x01CD4938 MOV X1, X0
	0x01CD493C MOV X0, X19
	0x01CD4940 BL 0x1B6E8E8
	0x01CD4944 STP X30, X19, [X31 - 0x10]!
	0x01CD4948 LDR X8, [X0 + 0x50]
	0x01CD494C CBZ X8, 0x1CD495C
	0x01CD4950 LDR W0, [X8 + 0x6C]
	0x01CD4954 LDP X30, X19, [X31], #0x10
	0x01CD4958 RET
	0x01CD495C ADRP X0, 0x2279000
	0x01CD4960 LDR X0, [X0 + 0x490]
	0x01CD4964 BL 0x1B6E804
	0x01CD4968 BL 0x1B6EA0C
	0x01CD496C MOV X19, X0
	0x01CD4970 ADRP X0, 0x227B000
	0x01CD4974 LDR X0, [X0 + 0xBB8]
	0x01CD4978 BL 0x1B6E804
	0x01CD497C MOV X1, X0
	0x01CD4980 MOV X0, X19
	0x01CD4984 MOV X2, X31
	0x01CD4988 BL 0x31E7550
	0x01CD498C ADRP X0, 0x227B000
	0x01CD4990 LDR X0, [X0 + 0xBC0]
	0x01CD4994 BL 0x1B6E804
	0x01CD4998 MOV X1, X0
	0x01CD499C MOV X0, X19
	0x01CD49A0 BL 0x1B6E8E8
	0x01CD49A4 STP X30, X19, [X31 - 0x10]!
	0x01CD49A8 LDR X8, [X0 + 0x50]
	0x01CD49AC CBZ X8, 0x1CD49BC
	0x01CD49B0 STR W1, [X8 + 0x6C]
	0x01CD49B4 LDP X30, X19, [X31], #0x10
	0x01CD49B8 RET
	0x01CD49BC ADRP X0, 0x2279000
	0x01CD49C0 LDR X0, [X0 + 0x490]
	0x01CD49C4 BL 0x1B6E804
	0x01CD49C8 BL 0x1B6EA0C
	0x01CD49CC MOV X19, X0
	0x01CD49D0 ADRP X0, 0x227B000
	0x01CD49D4 LDR X0, [X0 + 0xBB8]
	0x01CD49D8 BL 0x1B6E804
	0x01CD49DC MOV X1, X0
	0x01CD49E0 MOV X0, X19
	0x01CD49E4 MOV X2, X31
	0x01CD49E8 BL 0x31E7550
	0x01CD49EC ADRP X0, 0x227B000
	0x01CD49F0 LDR X0, [X0 + 0xBC8]
	0x01CD49F4 BL 0x1B6E804
	0x01CD49F8 MOV X1, X0
	0x01CD49FC MOV X0, X19
	0x01CD4A00 BL 0x1B6E8E8
	0x01CD4A04 STP X30, X19, [X31 - 0x10]!
	0x01CD4A08 LDR X8, [X0 + 0x50]
	0x01CD4A0C CBZ X8, 0x1CD4A1C
	0x01CD4A10 LDR W0, [X8 + 0x70]
	0x01CD4A14 LDP X30, X19, [X31], #0x10
	0x01CD4A18 RET
	0x01CD4A1C ADRP X0, 0x2279000
	0x01CD4A20 LDR X0, [X0 + 0x490]
	0x01CD4A24 BL 0x1B6E804
	0x01CD4A28 BL 0x1B6EA0C
	0x01CD4A2C MOV X19, X0
	0x01CD4A30 ADRP X0, 0x227B000
	0x01CD4A34 LDR X0, [X0 + 0xBD0]
	0x01CD4A38 BL 0x1B6E804
	0x01CD4A3C MOV X1, X0
	0x01CD4A40 MOV X0, X19
	0x01CD4A44 MOV X2, X31
	0x01CD4A48 BL 0x31E7550
	0x01CD4A4C ADRP X0, 0x227B000
	0x01CD4A50 LDR X0, [X0 + 0xBD8]
	0x01CD4A54 BL 0x1B6E804
	0x01CD4A58 MOV X1, X0
	0x01CD4A5C MOV X0, X19
	0x01CD4A60 BL 0x1B6E8E8
	0x01CD4A64 STP X30, X19, [X31 - 0x10]!
	0x01CD4A68 LDR X8, [X0 + 0x50]
	0x01CD4A6C CBZ X8, 0x1CD4A7C
	0x01CD4A70 STR W1, [X8 + 0x70]
	0x01CD4A74 LDP X30, X19, [X31], #0x10
	0x01CD4A78 RET
	0x01CD4A7C ADRP X0, 0x2279000
	0x01CD4A80 LDR X0, [X0 + 0x490]
	0x01CD4A84 BL 0x1B6E804
	0x01CD4A88 BL 0x1B6EA0C
	0x01CD4A8C MOV X19, X0
	0x01CD4A90 ADRP X0, 0x227B000
	0x01CD4A94 LDR X0, [X0 + 0xBD0]
	0x01CD4A98 BL 0x1B6E804
	0x01CD4A9C MOV X1, X0
	0x01CD4AA0 MOV X0, X19
	0x01CD4AA4 MOV X2, X31
	0x01CD4AA8 BL 0x31E7550
	0x01CD4AAC ADRP X0, 0x227B000
	0x01CD4AB0 LDR X0, [X0 + 0xBE0]
	0x01CD4AB4 BL 0x1B6E804
	0x01CD4AB8 MOV X1, X0
	0x01CD4ABC MOV X0, X19
	0x01CD4AC0 BL 0x1B6E8E8
	0x01CD4AC4 STP X30, X19, [X31 - 0x10]!
	0x01CD4AC8 LDR X8, [X0 + 0x50]
	0x01CD4ACC CBZ X8, 0x1CD4ADC
	0x01CD4AD0 LDR W0, [X8 + 0x74]
	0x01CD4AD4 LDP X30, X19, [X31], #0x10
	0x01CD4AD8 RET
	0x01CD4ADC ADRP X0, 0x2279000
	0x01CD4AE0 LDR X0, [X0 + 0x490]
	0x01CD4AE4 BL 0x1B6E804
	0x01CD4AE8 BL 0x1B6EA0C
	0x01CD4AEC MOV X19, X0
	0x01CD4AF0 ADRP X0, 0x227B000
	0x01CD4AF4 LDR X0, [X0 + 0xBE8]
	0x01CD4AF8 BL 0x1B6E804
	0x01CD4AFC MOV X1, X0
	0x01CD4B00 MOV X0, X19
	0x01CD4B04 MOV X2, X31
	0x01CD4B08 BL 0x31E7550
	0x01CD4B0C ADRP X0, 0x227B000
	0x01CD4B10 LDR X0, [X0 + 0xBF0]
	0x01CD4B14 BL 0x1B6E804
	0x01CD4B18 MOV X1, X0
	0x01CD4B1C MOV X0, X19
	0x01CD4B20 BL 0x1B6E8E8
	0x01CD4B24 STP X30, X19, [X31 - 0x10]!
	0x01CD4B28 LDR X8, [X0 + 0x50]
	0x01CD4B2C CBZ X8, 0x1CD4B3C
	0x01CD4B30 STR W1, [X8 + 0x74]
	0x01CD4B34 LDP X30, X19, [X31], #0x10
	0x01CD4B38 RET
	0x01CD4B3C ADRP X0, 0x2279000
	0x01CD4B40 LDR X0, [X0 + 0x490]
	0x01CD4B44 BL 0x1B6E804
	0x01CD4B48 BL 0x1B6EA0C
	0x01CD4B4C MOV X19, X0
	0x01CD4B50 ADRP X0, 0x227B000
	0x01CD4B54 LDR X0, [X0 + 0xBE8]
	0x01CD4B58 BL 0x1B6E804
	0x01CD4B5C MOV X1, X0
	0x01CD4B60 MOV X0, X19
	0x01CD4B64 MOV X2, X31
	0x01CD4B68 BL 0x31E7550
	0x01CD4B6C ADRP X0, 0x227B000
	0x01CD4B70 LDR X0, [X0 + 0xBF8]
	0x01CD4B74 BL 0x1B6E804
	0x01CD4B78 MOV X1, X0
	0x01CD4B7C MOV X0, X19
	0x01CD4B80 BL 0x1B6E8E8
	0x01CD4B84 STP X30, X19, [X31 - 0x10]!
	0x01CD4B88 LDR X8, [X0 + 0x50]
	0x01CD4B8C CBZ X8, 0x1CD4B9C
	0x01CD4B90 LDR V0, [X8 + 0x78]
	0x01CD4B94 LDP X30, X19, [X31], #0x10
	0x01CD4B98 RET
	0x01CD4B9C ADRP X0, 0x2279000
	0x01CD4BA0 LDR X0, [X0 + 0x490]
	0x01CD4BA4 BL 0x1B6E804
	0x01CD4BA8 BL 0x1B6EA0C
	0x01CD4BAC MOV X19, X0
	0x01CD4BB0 ADRP X0, 0x227B000
	0x01CD4BB4 LDR X0, [X0 + 0xC00]
	0x01CD4BB8 BL 0x1B6E804
	0x01CD4BBC MOV X1, X0
	0x01CD4BC0 MOV X0, X19
	0x01CD4BC4 MOV X2, X31
	0x01CD4BC8 BL 0x31E7550
	0x01CD4BCC ADRP X0, 0x227B000
	0x01CD4BD0 LDR X0, [X0 + 0xC08]
	0x01CD4BD4 BL 0x1B6E804
	0x01CD4BD8 MOV X1, X0
	0x01CD4BDC MOV X0, X19
	0x01CD4BE0 BL 0x1B6E8E8
	0x01CD4BE4 STP X30, X19, [X31 - 0x10]!
	0x01CD4BE8 LDR X8, [X0 + 0x50]
	0x01CD4BEC CBZ X8, 0x1CD4BFC
	0x01CD4BF0 STR S0, [X8 + 0x78]
	0x01CD4BF4 LDP X30, X19, [X31], #0x10
	0x01CD4BF8 RET
	0x01CD4BFC ADRP X0, 0x2279000
	0x01CD4C00 LDR X0, [X0 + 0x490]
	0x01CD4C04 BL 0x1B6E804
	0x01CD4C08 BL 0x1B6EA0C
	0x01CD4C0C MOV X19, X0
	0x01CD4C10 ADRP X0, 0x227B000
	0x01CD4C14 LDR X0, [X0 + 0xC00]
	0x01CD4C18 BL 0x1B6E804
	0x01CD4C1C MOV X1, X0
	0x01CD4C20 MOV X0, X19
	0x01CD4C24 MOV X2, X31
	0x01CD4C28 BL 0x31E7550
	0x01CD4C2C ADRP X0, 0x227B000
	0x01CD4C30 LDR X0, [X0 + 0xC10]
	0x01CD4C34 BL 0x1B6E804
	0x01CD4C38 MOV X1, X0
	0x01CD4C3C MOV X0, X19
	0x01CD4C40 BL 0x1B6E8E8
	0x01CD4C44 SUB X31, X31, 0x50
	0x01CD4C48 STR D10, [X31 + 0x20]
	0x01CD4C4C STP D9, D8, [X31 + 0x28]
	0x01CD4C50 STR X30, [X31 + 0x38]
	0x01CD4C54 STP X20, X19, [X31 + 0x40]
	0x01CD4C58 ADRP X20, 0x254F000
	0x01CD4C5C LDRB W8, [X20 + 0x5EF]
	0x01CD4C60 MOV X19, X0
	0x01CD4C64 TBNZ X8, 0x0, 0x1CD4C7C
	0x01CD4C68 ADRP X0, 0x227B000
	0x01CD4C6C LDR X0, [X0 + 0xC18]
	0x01CD4C70 BL 0x1B6E7F0
	0x01CD4C74 MOVZ W8, 0x1
	0x01CD4C78 STRB W8, [X20 + 0x5EF]
	0x01CD4C7C MOV X0, X19

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], D8
	003 Move [X31+112], X30
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Move X21, 0x2550000
	008 Move W8, [X21+1530]
	009 Move W20, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x227C000
	016 Move X0, [X0+2768]
	017 Call 0x1B6F7F0
	018 Move X0, 0x227C000
	019 Move X0, [X0+2776]
	020 Call 0x1B6F7F0
	021 Move X0, 0x227B000
	022 Move X0, [X0+448]
	023 Call 0x1B6F7F0
	024 Move X0, 0x227C000
	025 Move X0, [X0+2784]
	026 Call 0x1B6F7F0
	027 Move W8, 1
	028 Move [X21+1530], W8
	029 Move [X31+64], X31
	030 Move [X31+72], X31
	031 Move [X31+80], X31
	032 Move [X31+32], X31
	033 Move [X31+40], X31
	034 Move [X31+48], X31
	035 Move W8, [X19+88]
	036 Compare W8, 0
	037 JumpIfEqual {172}
	038 Move [X19+88], W31
	039 Move X8, [X19+184]
	040 Compare X8, 0
	041 JumpIfEqual {270}
	042 Move W9, [X8+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X21, W20
	045 Add X8, X8, X21
	046 Move X0, [X8+32]
	047 Compare X0, 0
	048 JumpIfEqual {270}
	049 Call ItemSellingMachineButtonView.PlayButtonPressedAnimation, X0
	050 Move X0, X19
	051 Call ItemSellingMachineController.get_isExploded, X0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {237}
	056 Move X8, [X19+192]
	057 Compare X8, 0
	058 JumpIfEqual {270}
	059 Move W9, [X8+24]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Add X8, X8, X21
	062 Move X21, [X8+32]
	063 Move X0, X19
	064 Move X1, X31
	065 Call Component.get_transform, X0
	066 Compare X0, 0
	067 JumpIfEqual {270}
	068 Move X1, X31
	069 Call Transform.get_position, X0
	070 Move S3, 1
	071 Move X0, X21
	072 Move X1, X31
	073 Call SFXManager.PlaySFX, X0, X1, V0
	074 Move X0, [X19+64]
	075 Compare X0, 0
	076 JumpIfEqual {237}
	077 Move W8, [X0+96]
	078 Move TEMP, X8
	079 And TEMP, TEMP, 2
	080 Compare TEMP, 2
	081 JumpIfEqual {237}
	082 Move X1, X31
	083 Call NetworkObject.get_HasStateAuthority, X0
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {237}
	088 Add X8, X31, 8
	089 Move X0, X19
	090 Call ItemSellingMachineController.get_isButtonPressed, X0
	091 Move X9, 0x227C000
	092 NotImplemented "Instruction LDUR not yet implemented."
	093 Move X8, [X31+24]
	094 Move X9, [X9+2776]
	095 Add X0, X31, 64
	096 Move W2, 1
	097 Move W1, W20
	098 Move X3, [X9]
	099 Move [X31+4], V0
	100 Move [X31+80], X8
	101 Call 0x22AE29C, X0, X1, X2
	102 Add X8, X31, 8
	103 Move X0, X19
	104 Call ItemSellingMachineController.get__timerResetButton, X0
	105 NotImplemented "Instruction LDUR not yet implemented."
	106 Move X8, [X31+24]
	107 Move X1, X31
	108 Move [X31+2], V0
	109 Move [X31+48], X8
	110 Move X0, [X19+56]
	111 Move S0, 5
	112 Call TickTimer.CreateFromSeconds, X0, V0
	113 Move X8, 0x227C000
	114 Move X8, [X8+2768]
	115 And X2, X0, 0
	116 Add X0, X31, 32
	117 Move W1, W20
	118 Move X3, [X8]
	119 Call NetworkArray`1<TickTimer>.Set, X0, X1, X2
	120 Move X0, X19
	121 Call ItemSellingMachineController.get_heatMeter, X0
	122 Move X8, -19046400
	123 Move V1, [X8+2808]
	124 Move X0, X19
	125 Add S0, S0, S1
	126 Call ItemSellingMachineController.set_heatMeter, X0, V0
	127 Move X0, X19
	128 Call ItemSellingMachineController.get_isSellingInProgress, X0
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfEqual {237}
	133 Move X0, X19
	134 Call ItemSellingMachineController.get_randomButtonId, X0
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move X0, X19
	137 Call ItemSellingMachineController.get_heatMeter, X0
	138 Move X8, -19046400
	139 Move V1, [X8+3340]
	140 Move X0, X19
	141 Add S0, S0, S1
	142 Call ItemSellingMachineController.set_heatMeter, X0, V0
	143 Move X0, X19
	144 Call ItemSellingMachineController.get_heatMeter, X0
	145 Move W8, 0x42C80000
	146 Move S1, W8
	147 NotImplemented "Instruction FCMP not yet implemented."
	148 Move S0, 2
	149 Move S1, 5
	150 Move X0, X31
	151 Call Random.Range, V0, V1
	152 Move X0, X19
	153 Move V8, V0
	154 Call ItemSellingMachineController.RPC_StartItemSelling, X0, V0
	155 Move X8, -19046400
	156 Move X0, [X19+56]
	157 Move V0, [X8+2536]
	158 Move X1, X31
	159 Call TickTimer.CreateFromSeconds, X0, V0
	160 And X1, X0, 0
	161 Move X0, X19
	162 Call ItemSellingMachineController.set__timerItemSell, X0, X1
	163 Move X8, -19046400
	164 Move V0, [X8+2496]
	165 Move X0, [X19+56]
	166 Move X1, X31
	167 Add S0, S8, S0
	168 Call TickTimer.CreateFromSeconds, X0, V0
	169 And X1, X0, 0
	170 Move X0, X19
	171 Call ItemSellingMachineController.set__timerAnimationFinished, X0, X1
	172 Move X21, 0x227B000
	173 Move X21, [X21+448]
	174 Move X0, [X21]
	175 Move W8, [X0+224]
	176 Compare W8, 0
	177 JumpIfNotEqual {179}
	178 Call 0x1B6F8F8
	179 Move X0, X19
	180 Move X1, X31
	181 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	182 Move X0, [X19+56]
	183 Compare X0, 0
	184 JumpIfEqual {270}
	185 Move X1, X31
	186 Call NetworkRunner.get_Stage, X0
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move X0, [X19+64]
	189 Compare X0, 0
	190 JumpIfEqual {270}
	191 Move X1, X31
	192 Call NetworkObject.GetLocalAuthorityMask, X0
	193 And W31, W0, 7
	194 Move X8, [X19+56]
	195 Compare X8, 0
	196 JumpIfEqual {270}
	197 Move X0, [X8+80]
	198 Compare X0, 0
	199 JumpIfEqual {270}
	200 Move X1, X31
	201 Call Simulation.HasAnyActiveConnections, X0
	202 Move TEMP, X0
	203 And TEMP, TEMP, 1
	204 Compare TEMP, 1
	205 JumpIfNotEqual {39}
	206 Move X8, [X19+56]
	207 Compare X8, 0
	208 JumpIfEqual {270}
	209 Move X0, [X8+80]
	210 Move W1, 12
	211 Move X2, X31
	212 Call SimulationMessage.Allocate, X0, X1
	213 Move X21, X0
	214 Move W0, 1
	215 Move X1, X31
	216 Call Assert.Check, X0
	217 Move X8, [X19+64]
	218 Compare X8, 0
	219 JumpIfEqual {270}
	220 Move X8, [X8+32]
	221 Compare X8, 0
	222 JumpIfEqual {244}
	223 Move W0, [X8]
	224 Move X0, [X21]
	225 Move X19, [X19+64]
	226 Move W8, [X0+224]
	227 Compare W8, 0
	228 JumpIfNotEqual {230}
	229 Call 0x1B6F8F8
	230 Move X8, 0x227C000
	231 Move X8, [X8+2784]
	232 Move W2, 7
	233 Move X1, X19
	234 Move X3, X31
	235 Move X0, [X8]
	236 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	237 Move X20, [X31+128]
	238 Move X19, [X31+136]
	239 Move X30, [X31+112]
	240 Move X21, [X31+120]
	241 Move V8, [X31+96]
	242 Add X31, X31, 144
	243 Return 
	244 Move X0, X31
	245 Move W1, [X19+104]
	246 Move W2, 5
	247 Move X3, X31
	248 Call RpcHeader.Create, X0, X1, X2
	249 Move [X21+28], X0
	250 Move [X21+36], W20
	251 Compare X21, 0
	252 JumpIfEqual {270}
	253 Move W8, 96
	254 Move [X21+12], W8
	255 Move X0, [X19+56]
	256 Compare X0, 0
	257 JumpIfEqual {270}
	258 Move X1, X21
	259 Move X2, X31
	260 Call NetworkRunner.SendRpc, X0, X1
	261 Move X0, X19
	262 Call ItemSellingMachineController.RPC_ExplodeMachine, X0
	263 Move X0, [X19+56]
	264 Move S0, 5
	265 Move X1, X31
	266 Call TickTimer.CreateFromSeconds, X0, V0
	267 And X1, X0, 0
	268 Move X0, X19
	269 Call ItemSellingMachineController.set__timerRecoverExplosion, X0, X1
	270 Call 0x1B6FA1C
	271 Call 0x1B6FA24

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01CD7964 STR X20, [X19 + 0xB0]
	0x01CD7968 MOV X0, X19
	0x01CD796C LDP X20, X19, [X31 + 0x10]
	0x01CD7970 MOV X1, X31
	0x01CD7974 LDP X30, X21, [X31], #0x20
	0x01CD7978 B 0x3A9EEE4
	0x01CD797C STP X30, X25, [X31 - 0x40]!
	0x01CD7980 STP X24, X23, [X31 + 0x10]
	0x01CD7984 STP X22, X21, [X31 + 0x20]
	0x01CD7988 STP X20, X19, [X31 + 0x30]
	0x01CD798C ADRP X24, 0x254C000
	0x01CD7990 ADRP X25, 0x2278000
	0x01CD7994 ADRP X20, 0x2278000
	0x01CD7998 ADRP X23, 0x2277000
	0x01CD799C ADRP X22, 0x2277000
	0x01CD79A0 ADRP X21, 0x2277000
	0x01CD79A4 ADRP X19, 0x2278000
	0x01CD79A8 LDR X25, [X25 + 0xD00]
	0x01CD79AC LDRB W8, [X24 + 0x60C]
	0x01CD79B0 LDR X20, [X20 + 0xC28]
	0x01CD79B4 LDR X23, [X23 + 0x8A8]
	0x01CD79B8 LDR X22, [X22 + 0x340]
	0x01CD79BC LDR X21, [X21 + 0xFC0]
	0x01CD79C0 LDR X19, [X19 + 0xD08]
	0x01CD79C4 TBNZ X8, 0x0, 0x1CD7A18
	0x01CD79C8 ADRP X0, 0x2278000
	0x01CD79CC LDR X0, [X0 + 0xC28]
	0x01CD79D0 BL 0x1B6E7F0
	0x01CD79D4 ADRP X0, 0x2277000
	0x01CD79D8 LDR X0, [X0 + 0xFC0]
	0x01CD79DC BL 0x1B6E7F0
	0x01CD79E0 ADRP X0, 0x2278000
	0x01CD79E4 LDR X0, [X0 + 0xD08]
	0x01CD79E8 BL 0x1B6E7F0
	0x01CD79EC ADRP X0, 0x2277000
	0x01CD79F0 LDR X0, [X0 + 0x8A8]
	0x01CD79F4 BL 0x1B6E7F0
	0x01CD79F8 ADRP X0, 0x2278000
	0x01CD79FC LDR X0, [X0 + 0xD00]
	0x01CD7A00 BL 0x1B6E7F0

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move S0, W31
	008 Move S1, 1
	009 Move S2, W31
	010 Move S3, 1
	011 Move X0, X31
	012 Call Gizmos.set_color, X0
	013 Move X0, X19
	014 Call ItemSellingMachineController.get__capsulePoint0, X0
	015 Move X8, -19058688
	016 Move V8, [X8+2644]
	017 Move X0, X31
	018 Move V3, V8
	019 Call Gizmos.DrawWireSphere, X0, V0
	020 Move X0, X19
	021 Call ItemSellingMachineController.get__capsulePoint1, X0
	022 Move V3, V8
	023 Move X0, X31
	024 Call Gizmos.DrawWireSphere, X0, V0
	025 Move X0, X19
	026 Call ItemSellingMachineController.get__capsulePoint0, X0
	027 Move X0, X19
	028 Move V8, V0
	029 Move V9, V1
	030 Move V10, V2
	031 Call ItemSellingMachineController.get__capsulePoint1, X0
	032 Move V3, V0
	033 Move V4, V1
	034 Move V0, V8
	035 Move V1, V9
	036 Move X30, [X31+32]
	037 Move X19, [X31+40]
	038 Move D9, [X31+16]
	039 Move D8, [X31+24]
	040 Move V5, V2
	041 Move V2, V10
	042 Move X0, X31
	043 Move V10, [X31+48]
	044 Call Gizmos.DrawLine, X0, X1
	045 Return 

Method: System.Void .ctor()

Disassembly:
	0x01CD7A04 ADRP X0, 0x2277000
	0x01CD7A08 LDR X0, [X0 + 0x340]
	0x01CD7A0C BL 0x1B6E7F0
	0x01CD7A10 MOVZ W8, 0x1
	0x01CD7A14 STRB W8, [X24 + 0x60C]
	0x01CD7A18 LDR X0, [X25]
	0x01CD7A1C MOV X1, X31
	0x01CD7A20 BL 0x3A7AE20
	0x01CD7A24 LDR X8, [X20]
	0x01CD7A28 MOV X1, X31
	0x01CD7A2C LDR X8, [X8 + 0xB8]
	0x01CD7A30 STR W0, [X8]
	0x01CD7A34 LDR X0, [X23]
	0x01CD7A38 BL 0x3A7AE20
	0x01CD7A3C LDR X8, [X20]
	0x01CD7A40 MOV X1, X31
	0x01CD7A44 LDR X8, [X8 + 0xB8]
	0x01CD7A48 STR W0, [X8 + 0x4]
	0x01CD7A4C LDR X0, [X22]
	0x01CD7A50 BL 0x3A7AE20
	0x01CD7A54 LDR X8, [X20]
	0x01CD7A58 MOVZ W1, 0x3
	0x01CD7A5C LDR X8, [X8 + 0xB8]
	0x01CD7A60 STR W0, [X8 + 0x8]
	0x01CD7A64 LDR X0, [X21]
	0x01CD7A68 BL 0x1B6E868
	0x01CD7A6C LDR X1, [X19]
	0x01CD7A70 MOV X2, X31
	0x01CD7A74 MOV X19, X0
	0x01CD7A78 BL 0x312E9C0
	0x01CD7A7C LDR X8, [X20]
	0x01CD7A80 ADRP X9, 0xFFFFFFFFFEDD4000
	0x01CD7A84 LDR V0, [X9 + 0x6C]
	0x01CD7A88 LDP X22, X21, [X31 + 0x20]
	0x01CD7A8C LDR X8, [X8 + 0xB8]
	0x01CD7A90 LDP X24, X23, [X31 + 0x10]
	0x01CD7A94 STR X19, [X8 + 0x10]
	0x01CD7A98 LDP X20, X19, [X31 + 0x30]
	0x01CD7A9C STUR V0, [X8 + 0x18]
	0x01CD7AA0 LDP X30, X25, [X31], #0x40

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x254D000
	008 Move X23, 0x2279000
	009 Move X21, 0x2278000
	010 Move X20, 0x2278000
	011 Move W8, [X22+1531]
	012 Move X23, [X23+3208]
	013 Move X21, [X21+1272]
	014 Move X20, [X20+1280]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x2278000
	021 Move X0, [X0+1280]
	022 Call 0x1B6F7F0
	023 Move X0, 0x2278000
	024 Move X0, [X0+1272]
	025 Call 0x1B6F7F0
	026 Move X0, 0x2279000
	027 Move X0, [X0+3208]
	028 Call 0x1B6F7F0
	029 Move W8, 1
	030 Move [X22+1531], W8
	031 Move X0, [X23]
	032 Move W1, 12
	033 Call 0x1B6F868
	034 Move [X19+184], X0
	035 Move X0, [X21]
	036 Call 0x1B6FA0C
	037 Move X1, [X20]
	038 Move X20, X0
	039 Call HashSet`1<Object>..ctor, X0
	040 Move [X19+232], X20
	041 Move X0, X19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X1, X31
	047 Move X30, [X31+48]
	048 Move X23, [X31+56]
	049 Call NetworkBehaviour..ctor, X0
	050 Return 

Method: System.Void .cctor()

Disassembly:
	0x01CD7AA4 RET
	0x01CD7AA8 STR X30, [X31 - 0x20]!
	0x01CD7AAC STP X20, X19, [X31 + 0x10]
	0x01CD7AB0 ADRP X19, 0x254C000
	0x01CD7AB4 ADRP X20, 0x2278000
	0x01CD7AB8 LDRB W8, [X19 + 0x60D]
	0x01CD7ABC LDR X20, [X20 + 0xD10]
	0x01CD7AC0 TBNZ X8, 0x0, 0x1CD7AD8
	0x01CD7AC4 ADRP X0, 0x2278000
	0x01CD7AC8 LDR X0, [X0 + 0xD10]
	0x01CD7ACC BL 0x1B6E7F0
	0x01CD7AD0 MOVZ W8, 0x1
	0x01CD7AD4 STRB W8, [X19 + 0x60D]
	0x01CD7AD8 LDR X0, [X20]
	0x01CD7ADC BL 0x1B6EA0C
	0x01CD7AE0 MOV X1, X31
	0x01CD7AE4 MOV X19, X0
	0x01CD7AE8 BL 0x32276F8
	0x01CD7AEC LDR X8, [X20]
	0x01CD7AF0 LDR X8, [X8 + 0xB8]
	0x01CD7AF4 STR X19, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x254D000
	005 Move X20, 0x2279000
	006 Move W8, [X19+1532]
	007 Move X20, [X20+3096]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2279000
	013 Move X0, [X0+3096]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X19+1532], W8
	017 Move X8, [X20]
	018 Move X9, -19042304
	019 Move V0, [X9+448]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X8, [X8+184]
	023 Move [X8], D0
	024 Move [X8+8], W31
	025 Move X30, [X31+32]
	026 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01CD7AF8 LDP X20, X19, [X31 + 0x10]
	0x01CD7AFC LDR X30, [X31], #0x20
	0x01CD7B00 RET
	0x01CD7B04 MOV X1, X31
	0x01CD7B08 B 0x32276F8
	0x01CD7B0C CMP X1, 0x0
	0x01CD7B10 CSET W0, EQ
	0x01CD7B14 RET
	0x01CD7B18 RET
	0x01CD7B1C STR X30, [X31 - 0x40]!
	0x01CD7B20 STP X24, X23, [X31 + 0x10]
	0x01CD7B24 STP X22, X21, [X31 + 0x20]
	0x01CD7B28 STP X20, X19, [X31 + 0x30]
	0x01CD7B2C ADRP X20, 0x254C000
	0x01CD7B30 LDRB W8, [X20 + 0x60E]
	0x01CD7B34 MOV X19, X0
	0x01CD7B38 TBNZ X8, 0x0, 0x1CD7B80
	0x01CD7B3C ADRP X0, 0x2278000
	0x01CD7B40 LDR X0, [X0 + 0xD18]
	0x01CD7B44 BL 0x1B6E7F0
	0x01CD7B48 ADRP X0, 0x2278000
	0x01CD7B4C LDR X0, [X0 + 0xC28]
	0x01CD7B50 BL 0x1B6E7F0
	0x01CD7B54 ADRP X0, 0x2278000
	0x01CD7B58 LDR X0, [X0 + 0xD20]
	0x01CD7B5C BL 0x1B6E7F0
	0x01CD7B60 ADRP X0, 0x2278000
	0x01CD7B64 LDR X0, [X0 + 0xD28]
	0x01CD7B68 BL 0x1B6E7F0
	0x01CD7B6C ADRP X0, 0x2278000
	0x01CD7B70 LDR X0, [X0 + 0xD10]
	0x01CD7B74 BL 0x1B6E7F0
	0x01CD7B78 MOVZ W8, 0x1
	0x01CD7B7C STRB W8, [X20 + 0x60E]
	0x01CD7B80 LDR W8, [X19 + 0x10]
	0x01CD7B84 LDR X22, [X19 + 0x20]
	0x01CD7B88 CMP W8, 0x1
	0x01CD7B8C B.EQ 0x1CD7C7C
	0x01CD7B90 CBNZ W8, 0x1CD7E24
	0x01CD7B94 MOVN W8, 0x0
	0x01CD7B98 STR W8, [X19 + 0x10]
	0x01CD7B9C CBZ X22, 0x1CD7E40
	0x01CD7BA0 LDR X0, [X22 + 0x38]
	0x01CD7BA4 CBZ X0, 0x1CD7E40
	0x01CD7BA8 MOV X1, X31
	0x01CD7BAC BL 0x3A7BCC8
	0x01CD7BB0 ADRP X21, 0x2278000
	0x01CD7BB4 LDR X21, [X21 + 0xC28]
	0x01CD7BB8 MOV X20, X0
	0x01CD7BBC LDR X8, [X21]
	0x01CD7BC0 LDR W9, [X8 + 0xE0]
	0x01CD7BC4 CBNZ W9, 0x1CD7BD0
	0x01CD7BC8 MOV X0, X8
	0x01CD7BCC BL 0x1B6E8F8
	0x01CD7BD0 CBZ X20, 0x1CD7E40
	0x01CD7BD4 LDR X8, [X21]
	0x01CD7BD8 FMOV S0, 1
	0x01CD7BDC MOV X0, X20
	0x01CD7BE0 MOV X2, X31
	0x01CD7BE4 LDR X8, [X8 + 0xB8]
	0x01CD7BE8 LDR W1, [X8]
	0x01CD7BEC BL 0x3A7E584
	0x01CD7BF0 LDR X8, [X22 + 0x40]
	0x01CD7BF4 CBZ X8, 0x1CD7E40
	0x01CD7BF8 LDRSW X9, [X19 + 0x28]
	0x01CD7BFC LDR W10, [X8 + 0x18]
	0x01CD7C00 CMP W9, W10
	0x01CD7C04 B.CS 0x1CD7E44
	0x01CD7C08 ADD X8, X8, X9, 0x3, LSL
	0x01CD7C0C LDR X0, [X8 + 0x20]
	0x01CD7C10 CBZ X0, 0x1CD7E40
	0x01CD7C14 MOV X1, X31
	0x01CD7C18 BL 0x3A7BCC8
	0x01CD7C1C CBZ X0, 0x1CD7E40
	0x01CD7C20 LDR X8, [X21]
	0x01CD7C24 FMOV S0, 1
	0x01CD7C28 MOV X2, X31
	0x01CD7C2C LDR X8, [X8 + 0xB8]
	0x01CD7C30 LDR W1, [X8]
	0x01CD7C34 BL 0x3A7E584
	0x01CD7C38 LDR X8, [X22 + 0x48]
	0x01CD7C3C CBZ X8, 0x1CD7E40
	0x01CD7C40 LDRSW X9, [X19 + 0x28]
	0x01CD7C44 LDR W10, [X8 + 0x18]
	0x01CD7C48 CMP W9, W10
	0x01CD7C4C B.CS 0x1CD7E44
	0x01CD7C50 ADD X8, X8, X9, 0x3, LSL
	0x01CD7C54 LDR X0, [X8 + 0x20]
	0x01CD7C58 CBZ X0, 0x1CD7E40
	0x01CD7C5C MOVZ W1, 0x1
	0x01CD7C60 MOV X2, X31
	0x01CD7C64 MOVZ W20, 0x1
	0x01CD7C68 BL 0x3A9A604
	0x01CD7C6C LDR X8, [X22 + 0x88]
	0x01CD7C70 STR W20, [X19 + 0x10]
	0x01CD7C74 STR X8, [X19 + 0x18]
	0x01CD7C78 B 0x1CD7E28
	0x01CD7C7C MOVN W8, 0x0
	0x01CD7C80 STR W8, [X19 + 0x10]
	0x01CD7C84 CBZ X22, 0x1CD7E40
	0x01CD7C88 LDR X8, [X22 + 0x40]
	0x01CD7C8C CBZ X8, 0x1CD7E40
	0x01CD7C90 LDRSW X9, [X19 + 0x28]
	0x01CD7C94 LDR W10, [X8 + 0x18]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+96], X30
	003 Move [X31+112], X24
	004 Move [X31+120], X23
	005 Move [X31+128], X22
	006 Move [X31+136], X21
	007 Move [X31+144], X20
	008 Move [X31+152], X19
	009 Move X21, 0x254D000
	010 Move X20, 0x2278000
	011 Move W8, [X21+1533]
	012 Move X20, [X20+448]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0x2279000
	019 Move X0, [X0+3216]
	020 Call 0x1B6F7F0
	021 Move X0, 0x2279000
	022 Move X0, [X0+3224]
	023 Call 0x1B6F7F0
	024 Move X0, 0x2278000
	025 Move X0, [X0+448]
	026 Call 0x1B6F7F0
	027 Move X0, 0x2279000
	028 Move X0, [X0+3232]
	029 Call 0x1B6F7F0
	030 Move X0, 0x2279000
	031 Move X0, [X0+3240]
	032 Call 0x1B6F7F0
	033 Move W8, 1
	034 Move [X21+1533], W8
	035 Move X23, 0x2279000
	036 Move X23, [X23+3232]
	037 Move W1, [X19+128]
	038 Move X24, 0x2279000
	039 Move X22, 0x2279000
	040 Move X21, 0x2279000
	041 Move X24, [X24+3216]
	042 Move X22, [X22+3240]
	043 Move X21, [X21+3224]
	044 Move X0, X19
	045 Call ItemSellingMachineController.set_isSellingInProgress, X0, X1
	046 Move W1, [X19+129]
	047 Move X0, X19
	048 Call ItemSellingMachineController.set_isOverheated, X0, X1
	049 Move W1, [X19+130]
	050 Move X0, X19
	051 Call ItemSellingMachineController.set_isExploded, X0, X1
	052 Move W1, [X19+132]
	053 Move X0, X19
	054 Call ItemSellingMachineController.set_itemSoldValue, X0, X1
	055 Add X8, X31, 64
	056 Move X0, X19
	057 Call ItemSellingMachineController.get_isButtonPressed, X0
	058 Move V0, [X31+4]
	059 Move X8, [X31+80]
	060 Move X0, [X20]
	061 Move [X31+2], V0
	062 Move [X31+48], X8
	063 Move W8, [X0+224]
	064 Move X20, [X19+136]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1B6F8F8
	068 Move X2, [X23]
	069 Move V0, [X31+2]
	070 Move X8, [X31+48]
	071 Move X3, [X24]
	072 Add X0, X31, 64
	073 Move X1, X20
	074 Move [X31+4], V0
	075 Move [X31+80], X8
	076 Call 0x2110980, X0, X1, X2
	077 Add X8, X31, 64
	078 Move X0, X19
	079 Call ItemSellingMachineController.get__timerResetButton, X0
	080 Move X8, [X31+80]
	081 Move V0, [X31+4]
	082 Move X2, [X22]
	083 Move X3, [X21]
	084 Move [X31+16], X8
	085 Move [X31], V0
	086 Move X1, [X19+144]
	087 Add X0, X31, 64
	088 Move [X31+4], V0
	089 Move [X31+80], X8
	090 Call NetworkBehaviourUtils.InitializeNetworkArray, X0, X1, X2
	091 Move W1, [X19+152]
	092 Move X0, X19
	093 Call ItemSellingMachineController.set__timerAnimationFinished, X0, X1
	094 Move W1, [X19+156]
	095 Move X0, X19
	096 Call ItemSellingMachineController.set__timerItemSell, X0, X1
	097 Move W1, [X19+160]
	098 Move X0, X19
	099 Call ItemSellingMachineController.set__timerRecoverExplosion, X0, X1
	100 Move W1, [X19+164]
	101 Move X0, X19
	102 Call ItemSellingMachineController.set_randomButtonId, X0, X1
	103 Move V0, [X19+168]
	104 Move X0, X19
	105 Call ItemSellingMachineController.set_heatMeter, X0, V0
	106 Move X20, [X31+144]
	107 Move X19, [X31+152]
	108 Move X22, [X31+128]
	109 Move X21, [X31+136]
	110 Move X24, [X31+112]
	111 Move X23, [X31+120]
	112 Move X30, [X31+96]
	113 Add X31, X31, 160
	114 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01CD7C98 CMP W9, W10
	0x01CD7C9C B.CS 0x1CD7E44
	0x01CD7CA0 ADD X8, X8, X9, 0x3, LSL
	0x01CD7CA4 LDR X0, [X8 + 0x20]
	0x01CD7CA8 CBZ X0, 0x1CD7E40
	0x01CD7CAC MOV X1, X31
	0x01CD7CB0 BL 0x3A7BCC8
	0x01CD7CB4 ADRP X23, 0x2278000
	0x01CD7CB8 LDR X23, [X23 + 0xC28]
	0x01CD7CBC MOV X20, X0
	0x01CD7CC0 LDR X8, [X23]
	0x01CD7CC4 LDR W9, [X8 + 0xE0]
	0x01CD7CC8 CBNZ W9, 0x1CD7CD4
	0x01CD7CCC MOV X0, X8
	0x01CD7CD0 BL 0x1B6E8F8
	0x01CD7CD4 CBZ X20, 0x1CD7E40
	0x01CD7CD8 LDR X8, [X23]
	0x01CD7CDC FMOV S0, W31
	0x01CD7CE0 MOV X0, X20
	0x01CD7CE4 MOV X2, X31
	0x01CD7CE8 LDR X8, [X8 + 0xB8]
	0x01CD7CEC LDR W1, [X8]
	0x01CD7CF0 BL 0x3A7E584
	0x01CD7CF4 LDR X8, [X22 + 0x48]
	0x01CD7CF8 CBZ X8, 0x1CD7E40
	0x01CD7CFC LDRSW X9, [X19 + 0x28]
	0x01CD7D00 LDR W10, [X8 + 0x18]
	0x01CD7D04 CMP W9, W10
	0x01CD7D08 B.CS 0x1CD7E44
	0x01CD7D0C ADD X8, X8, X9, 0x3, LSL
	0x01CD7D10 LDR X0, [X8 + 0x20]
	0x01CD7D14 CBZ X0, 0x1CD7E40
	0x01CD7D18 MOV W1, W31
	0x01CD7D1C MOV X2, X31
	0x01CD7D20 BL 0x3A9A604
	0x01CD7D24 LDR X8, [X22 + 0x80]
	0x01CD7D28 CBZ X8, 0x1CD7E40
	0x01CD7D2C LDRSW X9, [X19 + 0x28]
	0x01CD7D30 LDR W10, [X8 + 0x18]
	0x01CD7D34 CMP W9, W10
	0x01CD7D38 B.CS 0x1CD7E44
	0x01CD7D3C ADD X8, X8, X9, 0x3, LSL
	0x01CD7D40 STR X31, [X8 + 0x20]
	0x01CD7D44 ADRP X24, 0x2278000
	0x01CD7D48 LDR X24, [X24 + 0xD10]
	0x01CD7D4C LDR X19, [X22 + 0x80]
	0x01CD7D50 LDR X0, [X24]
	0x01CD7D54 LDR W8, [X0 + 0xE0]
	0x01CD7D58 CBNZ W8, 0x1CD7D64
	0x01CD7D5C BL 0x1B6E8F8
	0x01CD7D60 LDR X0, [X24]
	0x01CD7D64 LDR X8, [X0 + 0xB8]
	0x01CD7D68 LDR X20, [X8 + 0x8]
	0x01CD7D6C CBNZ X20, 0x1CD7DC0
	0x01CD7D70 LDR W8, [X0 + 0xE0]
	0x01CD7D74 CBNZ W8, 0x1CD7D80
	0x01CD7D78 BL 0x1B6E8F8
	0x01CD7D7C LDR X0, [X24]
	0x01CD7D80 ADRP X9, 0x2278000
	0x01CD7D84 LDR X8, [X0 + 0xB8]
	0x01CD7D88 LDR X9, [X9 + 0xD20]
	0x01CD7D8C LDR X21, [X8]
	0x01CD7D90 LDR X0, [X9]
	0x01CD7D94 BL 0x1B6EA0C
	0x01CD7D98 ADRP X8, 0x2278000
	0x01CD7D9C LDR X8, [X8 + 0xD28]
	0x01CD7DA0 MOV X1, X21
	0x01CD7DA4 MOV X3, X31
	0x01CD7DA8 MOV X20, X0
	0x01CD7DAC LDR X2, [X8]
	0x01CD7DB0 BL 0x234AD78
	0x01CD7DB4 LDR X8, [X24]
	0x01CD7DB8 LDR X8, [X8 + 0xB8]
	0x01CD7DBC STR X20, [X8 + 0x8]
	0x01CD7DC0 ADRP X8, 0x2278000
	0x01CD7DC4 LDR X8, [X8 + 0xD18]
	0x01CD7DC8 MOV X0, X19
	0x01CD7DCC MOV X1, X20
	0x01CD7DD0 LDR X2, [X8]
	0x01CD7DD4 BL 0x205F8F0
	0x01CD7DD8 TBZ X0, 0x0, 0x1CD7E24
	0x01CD7DDC LDR X0, [X22 + 0x38]
	0x01CD7DE0 CBZ X0, 0x1CD7E40
	0x01CD7DE4 MOV X1, X31
	0x01CD7DE8 BL 0x3A7BCC8
	0x01CD7DEC LDR X8, [X23]
	0x01CD7DF0 MOV X19, X0
	0x01CD7DF4 LDR W9, [X8 + 0xE0]
	0x01CD7DF8 CBNZ W9, 0x1CD7E04
	0x01CD7DFC MOV X0, X8
	0x01CD7E00 BL 0x1B6E8F8
	0x01CD7E04 CBZ X19, 0x1CD7E40

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+112], X22
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Move X20, 0x254D000
	008 Move X21, 0x2278000
	009 Move W8, [X20+1534]
	010 Move X21, [X21+448]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x2279000
	017 Move X0, [X0+3248]
	018 Call 0x1B6F7F0
	019 Move X0, 0x2279000
	020 Move X0, [X0+3256]
	021 Call 0x1B6F7F0
	022 Move X0, 0x2278000
	023 Move X0, [X0+448]
	024 Call 0x1B6F7F0
	025 Move W8, 1
	026 Move [X20+1534], W8
	027 Move X22, 0x2279000
	028 Move X20, 0x2279000
	029 Move X22, [X22+3248]
	030 Move X20, [X20+3256]
	031 Move X0, X19
	032 Call ItemSellingMachineController.get_isSellingInProgress, X0
	033 And W8, W0, 1
	034 Move X0, X19
	035 Move [X19+128], W8
	036 Call ItemSellingMachineController.get_isOverheated, X0
	037 And W8, W0, 1
	038 Move X0, X19
	039 Move [X19+129], W8
	040 Call ItemSellingMachineController.get_isExploded, X0
	041 And W8, W0, 1
	042 Move X0, X19
	043 Move [X19+130], W8
	044 Call ItemSellingMachineController.get_itemSoldValue, X0
	045 Move [X19+132], W0
	046 Add X8, X31, 64
	047 Move X0, X19
	048 Call ItemSellingMachineController.get_isButtonPressed, X0
	049 Move V0, [X31+4]
	050 Move X8, [X31+80]
	051 Move X0, [X21]
	052 Move [X31+2], V0
	053 Move [X31+48], X8
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1B6F8F8
	058 Move V0, [X31+2]
	059 Move X8, [X31+48]
	060 Move X2, [X22]
	061 Add X1, X19, 136
	062 Add X0, X31, 64
	063 Move [X31+4], V0
	064 Move [X31+80], X8
	065 Call 0x210FCA4, X0, X1
	066 Add X8, X31, 64
	067 Move X0, X19
	068 Call ItemSellingMachineController.get__timerResetButton, X0
	069 Move X8, [X31+80]
	070 Move V0, [X31+4]
	071 Move X2, [X20]
	072 Add X1, X19, 144
	073 Add X0, X31, 64
	074 Move [X31+16], X8
	075 Move [X31], V0
	076 Move [X31+4], V0
	077 Move [X31+80], X8
	078 Call NetworkBehaviourUtils.CopyFromNetworkArray, X0, X1
	079 Move X0, X19
	080 Call ItemSellingMachineController.get__timerAnimationFinished, X0
	081 Move [X19+152], W0
	082 Move X0, X19
	083 Call ItemSellingMachineController.get__timerItemSell, X0
	084 Move [X19+156], W0
	085 Move X0, X19
	086 Call ItemSellingMachineController.get__timerRecoverExplosion, X0
	087 Move [X19+160], W0
	088 Move X0, X19
	089 Call ItemSellingMachineController.get_randomButtonId, X0
	090 Move [X19+164], W0
	091 Move X0, X19
	092 Call ItemSellingMachineController.get_heatMeter, X0
	093 Move [X19+168], S0
	094 Move X20, [X31+128]
	095 Move X19, [X31+136]
	096 Move X22, [X31+112]
	097 Move X21, [X31+120]
	098 Move X30, [X31+96]
	099 Add X31, X31, 144
	100 Return 

Method: System.Void RPC_StartItemSelling@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01CD7E08 LDR X8, [X23]
	0x01CD7E0C FMOV S0, W31
	0x01CD7E10 MOV X0, X19
	0x01CD7E14 MOV X2, X31
	0x01CD7E18 LDR X8, [X8 + 0xB8]
	0x01CD7E1C LDR W1, [X8]
	0x01CD7E20 BL 0x3A7E584
	0x01CD7E24 MOV W20, W31
	0x01CD7E28 MOV W0, W20
	0x01CD7E2C LDP X20, X19, [X31 + 0x30]
	0x01CD7E30 LDP X22, X21, [X31 + 0x20]
	0x01CD7E34 LDP X24, X23, [X31 + 0x10]
	0x01CD7E38 LDR X30, [X31], #0x40
	0x01CD7E3C RET
	0x01CD7E40 BL 0x1B6EA1C
	0x01CD7E44 BL 0x1B6EA24
	0x01CD7E48 LDR X0, [X0 + 0x18]
	0x01CD7E4C RET
	0x01CD7E50 STP X30, X19, [X31 - 0x10]!
	0x01CD7E54 ADRP X0, 0x2276000
	0x01CD7E58 LDR X0, [X0 + 0x990]
	0x01CD7E5C BL 0x1B6E804
	0x01CD7E60 BL 0x1B6EA0C
	0x01CD7E64 MOV X1, X31
	0x01CD7E68 MOV X19, X0
	0x01CD7E6C BL 0x31E99B4
	0x01CD7E70 ADRP X0, 0x2278000
	0x01CD7E74 LDR X0, [X0 + 0xD30]
	0x01CD7E78 BL 0x1B6E804
	0x01CD7E7C MOV X1, X0
	0x01CD7E80 MOV X0, X19
	0x01CD7E84 BL 0x1B6E8E8
	0x01CD7E88 LDR X0, [X0 + 0x18]
	0x01CD7E8C RET
	0x01CD7E90 RET
	0x01CD7E94 STR D10, [X31 - 0x50]!
	0x01CD7E98 STP D9, D8, [X31 + 0x8]
	0x01CD7E9C STR X30, [X31 + 0x18]
	0x01CD7EA0 STP X24, X23, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x254D000
	006 Move W8, [X21+1535]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2279000
	014 Move X0, [X0+3096]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1535], W8
	018 Move W0, 1
	019 Move X1, X31
	020 Move W21, 1
	021 Call Assert.Check, X0
	022 Compare X19, 0
	023 JumpIfEqual {46}
	024 Move X9, 0x2279000
	025 Move X9, [X9+3096]
	026 Move V0, [X20+36]
	027 Move [X19+88], W21
	028 Move X8, [X19]
	029 Move X1, [X9]
	030 Move W10, [X8+304]
	031 Move W9, [X1+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X8, [X8+200]
	034 Add X8, X8, X9
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call ItemSellingMachineController.RPC_StartItemSelling, X0, V0
	043 Return 
	044 Move X0, X19
	045 Call 0x1B6FCDC
	046 Call 0x1B6FA1C

Method: System.Void RPC_ExplodeMachine@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01CD7EA4 STP X22, X21, [X31 + 0x30]
	0x01CD7EA8 STP X20, X19, [X31 + 0x40]
	0x01CD7EAC ADRP X20, 0x254C000
	0x01CD7EB0 LDRB W8, [X20 + 0x60F]
	0x01CD7EB4 MOV X19, X0
	0x01CD7EB8 TBNZ X8, 0x0, 0x1CD7EDC
	0x01CD7EBC ADRP X0, 0x2278000
	0x01CD7EC0 LDR X0, [X0 + 0xC28]
	0x01CD7EC4 BL 0x1B6E7F0
	0x01CD7EC8 ADRP X0, 0x2277000
	0x01CD7ECC LDR X0, [X0 + 0x2E8]
	0x01CD7ED0 BL 0x1B6E7F0
	0x01CD7ED4 MOVZ W8, 0x1
	0x01CD7ED8 STRB W8, [X20 + 0x60F]
	0x01CD7EDC LDR W8, [X19 + 0x10]
	0x01CD7EE0 CMP W8, 0x4
	0x01CD7EE4 B.HI 0x1CD8320
	0x01CD7EE8 LDR X20, [X19 + 0x20]
	0x01CD7EEC ADRP X9, 0xFFFFFFFFFEE15000
	0x01CD7EF0 ADD X9, X9, 0x921
	0x01CD7EF4 ADR X10, 0x10
	0x01CD7EF8 LDRB W11, [X9, X8, LSL]
	0x01CD7EFC ADD X10, X10, X11, 0x2, LSL
	0x01CD7F00 BR X10
	0x01CD7F04 MOVN W8, 0x0
	0x01CD7F08 STR W8, [X19 + 0x10]
	0x01CD7F0C CBZ X20, 0x1CD85F8
	0x01CD7F10 LDR X21, [X20 + 0x80]
	0x01CD7F14 CBZ X21, 0x1CD85F8
	0x01CD7F18 LDR X8, [X21 + 0x18]
	0x01CD7F1C CMP W8, 0x1
	0x01CD7F20 B.LT 0x1CD7F5C
	0x01CD7F24 MOV X22, X31
	0x01CD7F28 AND X8, X8, 0x0
	0x01CD7F2C ADD X23, X21, 0x20
	0x01CD7F30 CMP X22, W8, UXTW
	0x01CD7F34 B.CS 0x1CD85FC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x254D000
	005 Move W8, [X20+1536]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2279000
	012 Move X0, [X0+3096]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1536], W8
	016 Move W0, 1
	017 Move X1, X31
	018 Move W20, 1
	019 Call Assert.Check, X0
	020 Compare X19, 0
	021 JumpIfEqual {42}
	022 Move X9, 0x2279000
	023 Move X9, [X9+3096]
	024 Move [X19+88], W20
	025 Move X8, [X19]
	026 Move X1, [X9]
	027 Move W10, [X8+304]
	028 Move W9, [X1+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X8+200]
	031 Add X8, X8, X9
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Call ItemSellingMachineController.RPC_ExplodeMachine, X0
	039 Return 
	040 Move X0, X19
	041 Call 0x1B6FCDC
	042 Call 0x1B6FA1C

Method: System.Void RPC_RecoverExplosion@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01CD7F38 LDR X1, [X23, X22, LSL #3]
	0x01CD7F3C CBZ X1, 0x1CD7F4C
	0x01CD7F40 MOV X0, X20
	0x01CD7F44 MOV X2, X31
	0x01CD7F48 BL 0x3A9EAE8
	0x01CD7F4C LDR W8, [X21 + 0x18]
	0x01CD7F50 ADD X22, X22, 0x1
	0x01CD7F54 CMP X22, W8, SXTW
	0x01CD7F58 B.LT 0x1CD7F30
	0x01CD7F5C LDR X8, [X20 + 0x48]
	0x01CD7F60 CBZ X8, 0x1CD85F8
	0x01CD7F64 LDR W9, [X8 + 0x18]
	0x01CD7F68 CBZ W9, 0x1CD85FC
	0x01CD7F6C LDR X0, [X8 + 0x20]
	0x01CD7F70 CBZ X0, 0x1CD85F8
	0x01CD7F74 MOV X1, X31
	0x01CD7F78 BL 0x3A7F198
	0x01CD7F7C STR S0, [X19 + 0x38]
	0x01CD7F80 LDR X21, [X20 + 0x48]
	0x01CD7F84 CBZ X21, 0x1CD85F8
	0x01CD7F88 LDR W8, [X21 + 0x18]
	0x01CD7F8C CMP W8, 0x1
	0x01CD7F90 B.LT 0x1CD7FC8
	0x01CD7F94 MOV W22, W31
	0x01CD7F98 CMP W22, W8
	0x01CD7F9C B.CS 0x1CD85FC
	0x01CD7FA0 ADD X8, X21, W22, 0x3, SXTW
	0x01CD7FA4 LDR X0, [X8 + 0x20]
	0x01CD7FA8 CBZ X0, 0x1CD85F8
	0x01CD7FAC MOV W1, W31
	0x01CD7FB0 MOV X2, X31
	0x01CD7FB4 BL 0x3A9A604
	0x01CD7FB8 LDR W8, [X21 + 0x18]
	0x01CD7FBC ADD W22, W22, 0x1
	0x01CD7FC0 CMP W22, W8
	0x01CD7FC4 B.LT 0x1CD7F98
	0x01CD7FC8 LDR X0, [X20 + 0x38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x254D000
	005 Move W8, [X20+1537]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2279000
	012 Move X0, [X0+3096]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1537], W8
	016 Move W0, 1
	017 Move X1, X31
	018 Move W20, 1
	019 Call Assert.Check, X0
	020 Compare X19, 0
	021 JumpIfEqual {42}
	022 Move X9, 0x2279000
	023 Move X9, [X9+3096]
	024 Move [X19+88], W20
	025 Move X8, [X19]
	026 Move X1, [X9]
	027 Move W10, [X8+304]
	028 Move W9, [X1+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X8+200]
	031 Add X8, X8, X9
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Call ItemSellingMachineController.RPC_RecoverExplosion, X0
	039 Return 
	040 Move X0, X19
	041 Call 0x1B6FCDC
	042 Call 0x1B6FA1C

Method: System.Void RPC_AddPlayerMoneyToAll@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01CD7FCC CBZ X0, 0x1CD85F8
	0x01CD7FD0 MOV X1, X31
	0x01CD7FD4 BL 0x3A7BCC8
	0x01CD7FD8 ADRP X22, 0x2278000
	0x01CD7FDC LDR X22, [X22 + 0xC28]
	0x01CD7FE0 MOV X21, X0
	0x01CD7FE4 LDR X8, [X22]
	0x01CD7FE8 LDR W9, [X8 + 0xE0]
	0x01CD7FEC CBNZ W9, 0x1CD7FF8
	0x01CD7FF0 MOV X0, X8
	0x01CD7FF4 BL 0x1B6E8F8
	0x01CD7FF8 CBZ X21, 0x1CD85F8
	0x01CD7FFC LDR X8, [X22]
	0x01CD8000 FMOV S0, 1
	0x01CD8004 MOV X0, X21
	0x01CD8008 MOV X2, X31
	0x01CD800C LDR X8, [X8 + 0xB8]
	0x01CD8010 LDR W1, [X8]
	0x01CD8014 BL 0x3A7E584
	0x01CD8018 LDR X23, [X20 + 0x40]
	0x01CD801C CBZ X23, 0x1CD85F8
	0x01CD8020 LDR W8, [X23 + 0x18]
	0x01CD8024 CMP W8, 0x1
	0x01CD8028 B.LT 0x1CD8094
	0x01CD802C MOV W24, W31
	0x01CD8030 CMP W24, W8
	0x01CD8034 B.CS 0x1CD85FC
	0x01CD8038 ADD X8, X23, W24, 0x3, SXTW
	0x01CD803C LDR X0, [X8 + 0x20]
	0x01CD8040 CBZ X0, 0x1CD85F8
	0x01CD8044 MOV X1, X31
	0x01CD8048 BL 0x3A7BCC8
	0x01CD804C LDR X8, [X22]
	0x01CD8050 MOV X21, X0
	0x01CD8054 LDR W9, [X8 + 0xE0]
	0x01CD8058 CBNZ W9, 0x1CD8064
	0x01CD805C MOV X0, X8
	0x01CD8060 BL 0x1B6E8F8
	0x01CD8064 CBZ X21, 0x1CD85F8
	0x01CD8068 LDR X8, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x254D000
	006 Move W8, [X21+1538]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2279000
	014 Move X0, [X0+3096]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1538], W8
	018 Move W0, 1
	019 Move X1, X31
	020 Move W21, 1
	021 Call Assert.Check, X0
	022 Compare X19, 0
	023 JumpIfEqual {47}
	024 Move X8, 0x2278000
	025 Move X8, [X8+3096]
	026 Move W1, [X20+36]
	027 Move [X19+88], W21
	028 Move X9, [X19]
	029 Move X8, [X8]
	030 Move W11, [X9+304]
	031 Move W10, [X8+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X9, [X9+200]
	034 Add X9, X9, X10
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call ItemSellingMachineController.RPC_AddPlayerMoneyToAll, X0, X1
	043 Return 
	044 Move X0, X19
	045 Move X1, X8
	046 Call 0x1B6FCDC
	047 Call 0x1B6FA1C

Method: System.Void RPC_ButtonPressed@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01CD806C FMOV S0, 1
	0x01CD8070 MOV X0, X21
	0x01CD8074 MOV X2, X31
	0x01CD8078 LDR X8, [X8 + 0xB8]
	0x01CD807C LDR W1, [X8]
	0x01CD8080 BL 0x3A7E584
	0x01CD8084 LDR W8, [X23 + 0x18]
	0x01CD8088 ADD W24, W24, 0x1
	0x01CD808C CMP W24, W8
	0x01CD8090 B.LT 0x1CD8030
	0x01CD8094 LDR X21, [X20 + 0x58]
	0x01CD8098 MOV X0, X20
	0x01CD809C MOV X1, X31
	0x01CD80A0 BL 0x3A9B084
	0x01CD80A4 CBZ X0, 0x1CD85F8
	0x01CD80A8 MOV X1, X31
	0x01CD80AC BL 0x3AA7658
	0x01CD80B0 FMOV S3, 1
	0x01CD80B4 MOV X0, X21
	0x01CD80B8 MOV X1, X31
	0x01CD80BC BL 0x1CCD9CC
	0x01CD80C0 LDR V8, [X19 + 0x28]
	0x01CD80C4 STR S8, [X19 + 0x3C]
	0x01CD80C8 B 0x1CD80D8
	0x01CD80CC LDR V8, [X19 + 0x3C]
	0x01CD80D0 MOVN W8, 0x0
	0x01CD80D4 STR W8, [X19 + 0x10]
	0x01CD80D8 FCMP S8, 0x0
	0x01CD80DC B.LE 0x1CD8328
	0x01CD80E0 MOV X0, X31
	0x01CD80E4 BL 0x3AA481C
	0x01CD80E8 FSUB S0, S8, S0
	0x01CD80EC STR S0, [X19 + 0x3C]
	0x01CD80F0 CBZ X20, 0x1CD85F8
	0x01CD80F4 LDR X8, [X20 + 0x70]
	0x01CD80F8 CBZ X8, 0x1CD85F8
	0x01CD80FC LDR V1, [X19 + 0x28]
	0x01CD8100 ADRP X22, 0x2277000
	0x01CD8104 LDR X22, [X22 + 0xC28]
	0x01CD8108 FMOV S9, 1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x254C000
	006 Move W8, [X21+1539]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2278000
	014 Move X0, [X0+3096]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1539], W8
	018 Move W0, 1
	019 Move X1, X31
	020 Move W21, 1
	021 Call Assert.Check, X0
	022 Compare X19, 0
	023 JumpIfEqual {47}
	024 Move X8, 0x2278000
	025 Move X8, [X8+3096]
	026 Move W1, [X20+36]
	027 Move [X19+88], W21
	028 Move X9, [X19]
	029 Move X8, [X8]
	030 Move W11, [X9+304]
	031 Move W10, [X8+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X9, [X9+200]
	034 Add X9, X9, X10
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call ItemSellingMachineController.RPC_ButtonPressed, X0, X1
	043 Return 
	044 Move X0, X19
	045 Move X1, X8
	046 Call 0x1B6FCDC
	047 Call 0x1B6FA1C

