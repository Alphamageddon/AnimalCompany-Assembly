Type: AnimalCompany.ItemSellingMachineController

Method: System.Boolean get_isSellingInProgress()

Disassembly:
	0x01DD9D0C MOV X0, X19
	0x01DD9D10 BL 0x1DD8D0C
	0x01DD9D14 TBNZ X0, 0x0, 0x1DD9E30
	0x01DD9D18 MOV X0, X19
	0x01DD9D1C BL 0x1DD8EA4
	0x01DD9D20 TBNZ X0, 0x0, 0x1DD9E30
	0x01DD9D24 ADRP X21, 0x231F000
	0x01DD9D28 ADRP X22, 0x231F000
	0x01DD9D2C ADRP X23, 0x231F000
	0x01DD9D30 ADRP X24, 0x231F000
	0x01DD9D34 LDR X21, [X21 + 0xA40]
	0x01DD9D38 LDR X22, [X22 + 0xA50]
	0x01DD9D3C LDR X23, [X23 + 0x8F8]
	0x01DD9D40 LDR X24, [X24 + 0x8F0]
	0x01DD9D44 MOV W20, W31
	0x01DD9D48 ADD X8, X31, 0x8
	0x01DD9D4C MOV X0, X19
	0x01DD9D50 BL 0x1DD9030
	0x01DD9D54 LDUR V0, [X31 + 0x8]
	0x01DD9D58 LDR X8, [X31 + 0x18]
	0x01DD9D5C LDR X2, [X21]
	0x01DD9D60 ADD X0, X31, 0x40
	0x01DD9D64 MOV W1, W20
	0x01DD9D68 STR V0, [X31 + 0x4]
	0x01DD9D6C STR X8, [X31 + 0x50]
	0x01DD9D70 BL 0x240ACF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x231B000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x2320000
	018 Move X0, [X0+2352]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x2320000
	025 Move X0, [X0+2360]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_isSellingInProgress(System.Boolean value)

Disassembly:
	0x01DD9D74 TBZ X0, 0x0, 0x1DD9E24
	0x01DD9D78 ADD X8, X31, 0x8
	0x01DD9D7C MOV X0, X19
	0x01DD9D80 BL 0x1DD90E8
	0x01DD9D84 LDUR V0, [X31 + 0x8]
	0x01DD9D88 LDR X8, [X31 + 0x18]
	0x01DD9D8C LDR X2, [X22]
	0x01DD9D90 ADD X0, X31, 0x20
	0x01DD9D94 MOV W1, W20
	0x01DD9D98 STR V0, [X31 + 0x2]
	0x01DD9D9C STR X8, [X31 + 0x30]
	0x01DD9DA0 BL 0x240E9AC
	0x01DD9DA4 STR W0, [X31 + 0x58]
	0x01DD9DA8 LDR X1, [X19 + 0x38]
	0x01DD9DAC ADD X0, X31, 0x58
	0x01DD9DB0 MOV X2, X31
	0x01DD9DB4 BL 0x1E91B84
	0x01DD9DB8 TBZ X0, 0x0, 0x1DD9E24
	0x01DD9DBC ADD X8, X31, 0x8
	0x01DD9DC0 MOV X0, X19
	0x01DD9DC4 BL 0x1DD9030
	0x01DD9DC8 LDUR V0, [X31 + 0x8]
	0x01DD9DCC LDR X8, [X31 + 0x18]
	0x01DD9DD0 LDR X3, [X23]
	0x01DD9DD4 ADD X0, X31, 0x40

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x231B000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x2320000
	017 Move X0, [X0+2352]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x2320000
	024 Move X0, [X0+2368]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: System.Boolean get_isOverheated()

Disassembly:
	0x01DD9DD8 MOV W1, W20
	0x01DD9DDC MOV W2, W31
	0x01DD9DE0 STR V0, [X31 + 0x4]
	0x01DD9DE4 STR X8, [X31 + 0x50]
	0x01DD9DE8 BL 0x240B0B0
	0x01DD9DEC ADD X8, X31, 0x8
	0x01DD9DF0 MOV X0, X19
	0x01DD9DF4 BL 0x1DD90E8
	0x01DD9DF8 LDUR V0, [X31 + 0x8]
	0x01DD9DFC LDR X8, [X31 + 0x18]
	0x01DD9E00 MOV X0, X31
	0x01DD9E04 STR V0, [X31 + 0x2]
	0x01DD9E08 STR X8, [X31 + 0x30]
	0x01DD9E0C BL 0x1E91B08
	0x01DD9E10 LDR X3, [X24]
	0x01DD9E14 AND X2, X0, 0x0
	0x01DD9E18 ADD X0, X31, 0x20
	0x01DD9E1C MOV W1, W20
	0x01DD9E20 BL 0x240ED7C
	0x01DD9E24 ADD W20, W20, 0x1
	0x01DD9E28 CMP W20, 0xB
	0x01DD9E2C B.NE 0x1DD9D48
	0x01DD9E30 MOV X0, X19
	0x01DD9E34 BL 0x1DD94A0
	0x01DD9E38 FCMP S0, 0x0
	0x01DD9E3C B.LE 0x1DD9EA8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+4]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x231B000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x2320000
	018 Move X0, [X0+2376]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x2320000
	025 Move X0, [X0+2384]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_isOverheated(System.Boolean value)

Disassembly:
	0x01DD9E40 MOV X0, X19
	0x01DD9E44 BL 0x1DD94A0
	0x01DD9E48 MOV X0, X19
	0x01DD9E4C MOV V8.16B, V0.16B
	0x01DD9E50 BL 0x1DD8DD8
	0x01DD9E54 CBZ X19, 0x1DD9EC4
	0x01DD9E58 ADRP X8, 0xFFFFFFFFFED11000
	0x01DD9E5C LDR V0, [X8 + 0x110]
	0x01DD9E60 MOVZ W8, 0x42480000
	0x01DD9E64 ANDS W31, W0, 0x1
	0x01DD9E68 FMOV S1, W8
	0x01DD9E6C FCSEL S0, S1, S0, NE
	0x01DD9E70 FCMP S8, S0
	0x01DD9E74 CSET W1, GT
	0x01DD9E78 MOV X0, X19
	0x01DD9E7C BL 0x1DD8E40
	0x01DD9E80 MOV X0, X19
	0x01DD9E84 BL 0x1DD94A0
	0x01DD9E88 LDR X0, [X19 + 0x38]
	0x01DD9E8C CBZ X0, 0x1DD9EC4
	0x01DD9E90 MOV X1, X31
	0x01DD9E94 MOV V8.16B, V0.16B
	0x01DD9E98 BL 0x1E9E550
	0x01DD9E9C FSUB S0, S8, S0
	0x01DD9EA0 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+4], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x231B000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x2320000
	017 Move X0, [X0+2376]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x2320000
	024 Move X0, [X0+2392]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: System.Boolean get_isExploded()

Disassembly:
	0x01DD9EA4 BL 0x1DD9500
	0x01DD9EA8 LDP X20, X19, [X31 + 0x90]
	0x01DD9EAC LDP X22, X21, [X31 + 0x80]
	0x01DD9EB0 LDP X24, X23, [X31 + 0x70]
	0x01DD9EB4 LDR X30, [X31 + 0x68]
	0x01DD9EB8 LDR V8, [X31 + 0x60]
	0x01DD9EBC ADD X31, X31, 0xA0
	0x01DD9EC0 RET
	0x01DD9EC4 BL 0x1C16F20
	0x01DD9EC8 SUB X31, X31, 0xB0
	0x01DD9ECC STR D14, [X31 + 0x10]
	0x01DD9ED0 STP D13, D12, [X31 + 0x20]
	0x01DD9ED4 STP D11, D10, [X31 + 0x30]
	0x01DD9ED8 STP D9, D8, [X31 + 0x40]
	0x01DD9EDC STP X29, X30, [X31 + 0x50]
	0x01DD9EE0 STP X28, X27, [X31 + 0x60]
	0x01DD9EE4 STP X26, X25, [X31 + 0x70]
	0x01DD9EE8 STP X24, X23, [X31 + 0x80]
	0x01DD9EEC STP X22, X21, [X31 + 0x90]
	0x01DD9EF0 STP X20, X19, [X31 + 0xA0]
	0x01DD9EF4 ADRP X20, 0x25FF000
	0x01DD9EF8 LDRB W8, [X20 + 0xC58]
	0x01DD9EFC MOV X19, X0
	0x01DD9F00 TBNZ X8, 0x0, 0x1DD9F3C
	0x01DD9F04 ADRP X0, 0x231F000
	0x01DD9F08 LDR X0, [X0 + 0xA58]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+8]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x231B000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x2320000
	018 Move X0, [X0+2400]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x2320000
	025 Move X0, [X0+2408]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_isExploded(System.Boolean value)

Disassembly:
	0x01DD9F0C BL 0x1C16CF4
	0x01DD9F10 ADRP X0, 0x231A000
	0x01DD9F14 LDR X0, [X0 + 0x5D8]
	0x01DD9F18 BL 0x1C16CF4
	0x01DD9F1C ADRP X0, 0x231A000
	0x01DD9F20 LDR X0, [X0 + 0x5F8]
	0x01DD9F24 BL 0x1C16CF4
	0x01DD9F28 ADRP X0, 0x231F000
	0x01DD9F2C LDR X0, [X0 + 0xA60]
	0x01DD9F30 BL 0x1C16CF4
	0x01DD9F34 MOVZ W8, 0x1
	0x01DD9F38 STRB W8, [X20 + 0xC58]
	0x01DD9F3C STR X31, [X31 + 0x18]
	0x01DD9F40 STR X31, [X31 + 0x8]
	0x01DD9F44 LDRB W8, [X19 + 0xF0]
	0x01DD9F48 CBZ W8, 0x1DDA238
	0x01DD9F4C ADRP X24, 0x231A000
	0x01DD9F50 ADRP X23, 0x231A000
	0x01DD9F54 LDR X24, [X24 + 0x5D8]
	0x01DD9F58 LDR X23, [X23 + 0x5F8]
	0x01DD9F5C MOV X0, X19
	0x01DD9F60 BL 0x1DD9560
	0x01DD9F64 MOV X0, X19
	0x01DD9F68 MOV V9.16B, V0.16B
	0x01DD9F6C MOV V10.16B, V1.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+8], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x231B000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x2320000
	017 Move X0, [X0+2400]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x2320000
	024 Move X0, [X0+2416]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: System.Int32 get_itemSoldValue()

Disassembly:
	0x01DD9F70 MOV V11.16B, V2.16B
	0x01DD9F74 BL 0x1DD9660
	0x01DD9F78 LDR X0, [X24]
	0x01DD9F7C MOV V12.16B, V0.16B
	0x01DD9F80 MOV V13.16B, V1.16B
	0x01DD9F84 MOV V14.16B, V2.16B
	0x01DD9F88 LDR W8, [X0 + 0xE0]
	0x01DD9F8C CBNZ W8, 0x1DD9F98
	0x01DD9F90 BL 0x1C16DFC
	0x01DD9F94 LDR X0, [X24]
	0x01DD9F98 LDR X8, [X0 + 0xB8]
	0x01DD9F9C MOV X1, X31
	0x01DD9FA0 LDR W0, [X8 + 0xC]
	0x01DD9FA4 BL 0x3C35CB8
	0x01DD9FA8 LDR X8, [X23]
	0x01DD9FAC MOV W20, W0
	0x01DD9FB0 LDR W9, [X8 + 0xE0]
	0x01DD9FB4 CBNZ W9, 0x1DD9FC0
	0x01DD9FB8 MOV X0, X8
	0x01DD9FBC BL 0x1C16DFC
	0x01DD9FC0 ADRP X8, 0xFFFFFFFFFED11000
	0x01DD9FC4 LDR V8, [X8 + 0x5C]
	0x01DD9FC8 MOV V0.16B, V9.16B
	0x01DD9FCC MOV V1.16B, V10.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+12]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x231B000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2320000
	016 Move X0, [X0+2424]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2320000
	023 Move X0, [X0+2432]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_itemSoldValue(System.Int32 value)

Disassembly:
	0x01DD9FD0 MOV V2.16B, V11.16B
	0x01DD9FD4 MOV V3.16B, V12.16B
	0x01DD9FD8 MOV V4.16B, V13.16B
	0x01DD9FDC MOV V5.16B, V14.16B
	0x01DD9FE0 MOV V6.16B, V8.16B
	0x01DD9FE4 MOV W0, W20
	0x01DD9FE8 MOV X1, X31
	0x01DD9FEC BL 0x3C8CE24
	0x01DD9FF0 CBZ X0, 0x1DDA26C
	0x01DD9FF4 LDR X8, [X0 + 0x18]
	0x01DD9FF8 MOV X20, X0
	0x01DD9FFC CMP W8, 0x1
	0x01DDA000 B.LT 0x1DDA0F0
	0x01DDA004 ADRP X21, 0x2319000
	0x01DDA008 ADRP X29, 0x231E000
	0x01DDA00C LDR X21, [X21 + 0x5A0]
	0x01DDA010 LDR X29, [X29 + 0xA60]
	0x01DDA014 MOV X25, X31
	0x01DDA018 AND X8, X8, 0x0
	0x01DDA01C ADD X26, X20, 0x20
	0x01DDA020 ADRP X27, 0x25FE000
	0x01DDA024 MOVZ W28, 0x1
	0x01DDA028 CMP X25, W8, UXTW
	0x01DDA02C B.CS 0x1DDA268

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+12], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x231B000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2320000
	016 Move X0, [X0+2424]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231F000
	023 Move X0, [X0+2440]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: Fusion.NetworkArray`1<System.Boolean> get_isButtonPressed()

Disassembly:
	0x01DDA030 LDR X0, [X26, X25, LSL #3]
	0x01DDA034 ADD X1, X31, 0x18
	0x01DDA038 MOV X2, X31
	0x01DDA03C BL 0x1E02D50
	0x01DDA040 TBZ X0, 0x0, 0x1DDA0E0
	0x01DDA044 LDR X22, [X31 + 0x18]
	0x01DDA048 MOV X0, X19
	0x01DDA04C MOV X1, X31
	0x01DDA050 BL 0x3C32E90
	0x01DDA054 CBZ X0, 0x1DDA26C
	0x01DDA058 MOV X1, X31
	0x01DDA05C BL 0x3C3F58C
	0x01DDA060 LDRB W8, [X27 + 0x783]
	0x01DDA064 MOV V9.16B, V0.16B
	0x01DDA068 MOV V10.16B, V1.16B
	0x01DDA06C MOV V11.16B, V2.16B
	0x01DDA070 CBNZ W8, 0x1DDA080
	0x01DDA074 MOV X0, X21
	0x01DDA078 BL 0x1C16CF4
	0x01DDA07C STRB W28, [X27 + 0x783]
	0x01DDA080 LDR X8, [X21]
	0x01DDA084 LDR X9, [X8 + 0xB8]
	0x01DDA088 LDR X8, [X19 + 0x40]
	0x01DDA08C LDP S3, S4, [X9]
	0x01DDA090 LDR V5, [X9 + 0x8]
	0x01DDA094 CBZ X8, 0x1DDA0A8
	0x01DDA098 LDR X8, [X8 + 0x20]
	0x01DDA09C CBZ X8, 0x1DDA0A8
	0x01DDA0A0 LDR W5, [X8]
	0x01DDA0A4 B 0x1DDA0AC
	0x01DDA0A8 MOV X5, X31
	0x01DDA0AC CBZ X22, 0x1DDA26C
	0x01DDA0B0 LDR W8, [X19 + 0x68]
	0x01DDA0B4 LDR X4, [X29]
	0x01DDA0B8 MOVZ W1, 0x3E8
	0x01DDA0BC MOV X0, X22
	0x01DDA0C0 BFM X5, X8, 0x20, 0x1F
	0x01DDA0C4 MOV V0.16B, V9.16B
	0x01DDA0C8 MOV V1.16B, V10.16B
	0x01DDA0CC MOV V2.16B, V11.16B
	0x01DDA0D0 MOV X2, X31
	0x01DDA0D4 MOV X3, X31
	0x01DDA0D8 MOV X6, X31
	0x01DDA0DC BL 0x1DB7954
	0x01DDA0E0 LDR W8, [X20 + 0x18]
	0x01DDA0E4 ADD X25, X25, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25FF000
	006 Move W9, [X21+3151]
	007 Move X20, X0
	008 Move X19, X8
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x231F000
	014 Move X0, [X0+2448]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3151], W8
	018 Move X20, [X20+80]
	019 Compare X20, 0
	020 JumpIfEqual {39}
	021 Move X21, 0x231F000
	022 Move X21, [X21+2448]
	023 Move X0, X31
	024 Call ReaderWriter@System_Boolean.GetInstance
	025 Move X3, X0
	026 Move [X19+8], X31
	027 Move [X19+16], X31
	028 Move X4, [X21]
	029 Add X1, X20, 16
	030 Move [X19], X31
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move W2, 11
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call 0x240C00C, X0, X1, X2, X3
	038 Return X0
	039 Move X0, 0x231A000
	040 Move X0, [X0+1456]
	041 Call 0x1C17D08
	042 Call 0x1C17F10
	043 Move X19, X0
	044 Move X0, 0x231F000
	045 Move X0, [X0+2456]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call InvalidOperationException..ctor, X0, X1
	051 Move X0, 0x231F000
	052 Move X0, [X0+2464]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X19
	056 Call 0x1C17DEC

Method: Fusion.NetworkArray`1<Fusion.TickTimer> get__timerResetButton()

Disassembly:
	0x01DDA0E8 CMP X25, W8, SXTW
	0x01DDA0EC B.LT 0x1DDA028
	0x01DDA0F0 MOV X0, X19
	0x01DDA0F4 BL 0x1DD9560
	0x01DDA0F8 MOV X0, X19
	0x01DDA0FC MOV V9.16B, V0.16B
	0x01DDA100 MOV V10.16B, V1.16B
	0x01DDA104 MOV V11.16B, V2.16B
	0x01DDA108 BL 0x1DD9660
	0x01DDA10C LDR X0, [X24]
	0x01DDA110 MOV V12.16B, V0.16B
	0x01DDA114 MOV V13.16B, V1.16B
	0x01DDA118 MOV V14.16B, V2.16B
	0x01DDA11C LDR W8, [X0 + 0xE0]
	0x01DDA120 CBNZ W8, 0x1DDA12C
	0x01DDA124 BL 0x1C16DFC
	0x01DDA128 LDR X0, [X24]
	0x01DDA12C LDR X8, [X0 + 0xB8]
	0x01DDA130 MOV X1, X31
	0x01DDA134 LDR W0, [X8 + 0x10]
	0x01DDA138 BL 0x3C35CB8
	0x01DDA13C LDR X8, [X24]
	0x01DDA140 MOV W20, W0
	0x01DDA144 MOV X1, X31
	0x01DDA148 LDR X8, [X8 + 0xB8]
	0x01DDA14C LDR W8, [X8 + 0x14]
	0x01DDA150 MOV X0, X8
	0x01DDA154 BL 0x3C35CB8
	0x01DDA158 LDR X8, [X23]
	0x01DDA15C MOV W21, W0
	0x01DDA160 LDR W9, [X8 + 0xE0]
	0x01DDA164 CBNZ W9, 0x1DDA170
	0x01DDA168 MOV X0, X8
	0x01DDA16C BL 0x1C16DFC
	0x01DDA170 ORR W0, W21, W20, 0x0
	0x01DDA174 MOV V0.16B, V9.16B
	0x01DDA178 MOV V1.16B, V10.16B
	0x01DDA17C MOV V2.16B, V11.16B
	0x01DDA180 MOV V3.16B, V12.16B
	0x01DDA184 MOV V4.16B, V13.16B
	0x01DDA188 MOV V5.16B, V14.16B
	0x01DDA18C MOV V6.16B, V8.16B
	0x01DDA190 MOV X1, X31
	0x01DDA194 BL 0x3C8CE24
	0x01DDA198 LDR X8, [X19 + 0xE8]
	0x01DDA19C CBZ X8, 0x1DDA26C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25FF000
	006 Move W9, [X21+3152]
	007 Move X20, X0
	008 Move X19, X8
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x231F000
	014 Move X0, [X0+2472]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3152], W8
	018 Move X20, [X20+80]
	019 Compare X20, 0
	020 JumpIfEqual {39}
	021 Move X21, 0x231F000
	022 Move X21, [X21+2472]
	023 Move X0, X31
	024 Call ReaderWriter@Fusion_TickTimer.GetInstance
	025 Move X3, X0
	026 Move [X19+8], X31
	027 Move [X19+16], X31
	028 Move X4, [X21]
	029 Add X1, X20, 60
	030 Move [X19], X31
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move W2, 11
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call NetworkArray`1<TickTimer>..ctor, X0, X1, X2, X3
	038 Return X0
	039 Move X0, 0x231A000
	040 Move X0, [X0+1456]
	041 Call 0x1C17D08
	042 Call 0x1C17F10
	043 Move X19, X0
	044 Move X0, 0x231F000
	045 Move X0, [X0+2480]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call InvalidOperationException..ctor, X0, X1
	051 Move X0, 0x231F000
	052 Move X0, [X0+2488]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X19
	056 Call 0x1C17DEC

Method: Fusion.TickTimer get__timerAnimationFinished()

Disassembly:
	0x01DDA1A0 ADRP X9, 0x231E000
	0x01DDA1A4 LDR X9, [X9 + 0xA58]
	0x01DDA1A8 MOV X20, X0
	0x01DDA1AC MOV X0, X8
	0x01DDA1B0 LDR X1, [X9]
	0x01DDA1B4 BL 0x2DBE450
	0x01DDA1B8 CBZ X20, 0x1DDA26C
	0x01DDA1BC LDR X8, [X20 + 0x18]
	0x01DDA1C0 CMP W8, 0x1
	0x01DDA1C4 B.LT 0x1DDA238
	0x01DDA1C8 MOV X22, X31
	0x01DDA1CC AND X8, X8, 0x0
	0x01DDA1D0 ADD X23, X20, 0x20
	0x01DDA1D4 CMP X22, W8, UXTW
	0x01DDA1D8 B.CS 0x1DDA268
	0x01DDA1DC LDR X0, [X23, X22, LSL #3]
	0x01DDA1E0 ADD X1, X31, 0x8
	0x01DDA1E4 MOV X2, X31
	0x01DDA1E8 BL 0x1E02B30
	0x01DDA1EC TBZ X0, 0x0, 0x1DDA228
	0x01DDA1F0 LDR X0, [X31 + 0x8]
	0x01DDA1F4 CBZ X0, 0x1DDA26C
	0x01DDA1F8 MOV X1, X31
	0x01DDA1FC BL 0x1D89D0C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+104]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x231A000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231F000
	016 Move X0, [X0+2496]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231F000
	023 Move X0, [X0+2504]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set__timerAnimationFinished(Fusion.TickTimer value)

Disassembly:
	0x01DDA200 TBZ X0, 0x0, 0x1DDA228
	0x01DDA204 MOV X0, X19
	0x01DDA208 BL 0x1DD8F70
	0x01DDA20C LDR X1, [X31 + 0x8]
	0x01DDA210 MOV W21, W0
	0x01DDA214 MOV X0, X19
	0x01DDA218 BL 0x1DDA814
	0x01DDA21C ADD W1, W0, W21
	0x01DDA220 MOV X0, X19
	0x01DDA224 BL 0x1DD8FD0
	0x01DDA228 LDR W8, [X20 + 0x18]
	0x01DDA22C ADD X22, X22, 0x1
	0x01DDA230 CMP X22, W8, SXTW
	0x01DDA234 B.LT 0x1DDA1D4
	0x01DDA238 LDP X20, X19, [X31 + 0xA0]
	0x01DDA23C LDP X22, X21, [X31 + 0x90]
	0x01DDA240 LDP X24, X23, [X31 + 0x80]
	0x01DDA244 LDP X26, X25, [X31 + 0x70]
	0x01DDA248 LDP X28, X27, [X31 + 0x60]
	0x01DDA24C LDP X29, X30, [X31 + 0x50]
	0x01DDA250 LDP D9, D8, [X31 + 0x40]
	0x01DDA254 LDP D11, D10, [X31 + 0x30]
	0x01DDA258 LDP D13, D12, [X31 + 0x20]
	0x01DDA25C LDR V14, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+104], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x231A000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231F000
	016 Move X0, [X0+2496]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231F000
	023 Move X0, [X0+2512]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: Fusion.TickTimer get__timerItemSell()

Disassembly:
	0x01DDA260 ADD X31, X31, 0xB0
	0x01DDA264 RET
	0x01DDA268 BL 0x1C16F28
	0x01DDA26C BL 0x1C16F20
	0x01DDA270 STP X30, X19, [X31 - 0x10]!
	0x01DDA274 MOV X19, X0
	0x01DDA278 LDR X0, [X0 + 0x40]
	0x01DDA27C CBZ X0, 0x1DDA2F8
	0x01DDA280 LDRB W8, [X0 + 0x60]
	0x01DDA284 TBNZ X8, 0x1, 0x1DDA2F8
	0x01DDA288 MOV X1, X31
	0x01DDA28C BL 0x1E93668
	0x01DDA290 TBZ X0, 0x0, 0x1DDA2F8
	0x01DDA294 MOV X0, X19
	0x01DDA298 MOV W1, W31
	0x01DDA29C BL 0x1DD8D74
	0x01DDA2A0 MOV X0, X19
	0x01DDA2A4 BL 0x1DD9894
	0x01DDA2A8 MOVZ W1, 0xB
	0x01DDA2AC MOV W0, W31
	0x01DDA2B0 MOV X2, X31
	0x01DDA2B4 BL 0x3C309A8
	0x01DDA2B8 MOV W1, W0
	0x01DDA2BC MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+108]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x231A000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231F000
	016 Move X0, [X0+2520]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231F000
	023 Move X0, [X0+2528]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set__timerItemSell(Fusion.TickTimer value)

Disassembly:
	0x01DDA2C0 BL 0x1DD9440
	0x01DDA2C4 MOV X0, X19
	0x01DDA2C8 BL 0x1DD8F70
	0x01DDA2CC CMP W0, 0x1
	0x01DDA2D0 B.LT 0x1DDA2F8
	0x01DDA2D4 MOV X0, X19
	0x01DDA2D8 BL 0x1DD8F70
	0x01DDA2DC MOV W1, W0
	0x01DDA2E0 MOV X0, X19
	0x01DDA2E4 BL 0x1DDAC58
	0x01DDA2E8 MOV X0, X19
	0x01DDA2EC MOV W1, W31
	0x01DDA2F0 LDP X30, X19, [X31], #0x10
	0x01DDA2F4 B 0x1DD8FD0
	0x01DDA2F8 LDP X30, X19, [X31], #0x10
	0x01DDA2FC RET
	0x01DDA300 STR X30, [X31 - 0x20]!
	0x01DDA304 STP X20, X19, [X31 + 0x10]
	0x01DDA308 ADRP X20, 0x25FE000
	0x01DDA30C LDRB W8, [X20 + 0xC5A]
	0x01DDA310 MOV X19, X0
	0x01DDA314 TBNZ X8, 0x0, 0x1DDA338
	0x01DDA318 ADRP X0, 0x231C000
	0x01DDA31C LDR X0, [X0 + 0xA78]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+108], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x231A000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231F000
	016 Move X0, [X0+2520]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231F000
	023 Move X0, [X0+2536]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: Fusion.TickTimer get__timerRecoverExplosion()

Disassembly:
	0x01DDA320 BL 0x1C16CF4
	0x01DDA324 ADRP X0, 0x231E000
	0x01DDA328 LDR X0, [X0 + 0xA68]
	0x01DDA32C BL 0x1C16CF4
	0x01DDA330 MOVZ W8, 0x1
	0x01DDA334 STRB W8, [X20 + 0xC5A]
	0x01DDA338 LDRB W8, [X19 + 0x58]
	0x01DDA33C CBZ W8, 0x1DDA3A8
	0x01DDA340 STRB W31, [X19 + 0x58]
	0x01DDA344 LDR X0, [X19 + 0x40]
	0x01DDA348 CBZ X0, 0x1DDA3E4
	0x01DDA34C LDRB W8, [X0 + 0x60]
	0x01DDA350 TBNZ X8, 0x1, 0x1DDA3E4
	0x01DDA354 MOV X1, X31
	0x01DDA358 BL 0x1E93668
	0x01DDA35C TBZ X0, 0x0, 0x1DDA3E4
	0x01DDA360 FMOV S0, W31
	0x01DDA364 MOV X0, X19
	0x01DDA368 BL 0x1DD9500
	0x01DDA36C MOV X0, X19
	0x01DDA370 MOV W1, W31
	0x01DDA374 BL 0x1DD8E40
	0x01DDA378 MOV X0, X19
	0x01DDA37C MOV W1, W31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+112]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x231A000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231F000
	016 Move X0, [X0+2544]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231F000
	023 Move X0, [X0+2552]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set__timerRecoverExplosion(Fusion.TickTimer value)

Disassembly:
	0x01DDA380 BL 0x1DD8F0C
	0x01DDA384 MOVZ W1, 0xB
	0x01DDA388 MOV W0, W31
	0x01DDA38C MOV X2, X31
	0x01DDA390 BL 0x3C309A8
	0x01DDA394 MOV W1, W0
	0x01DDA398 MOV X0, X19
	0x01DDA39C LDP X20, X19, [X31 + 0x10]
	0x01DDA3A0 LDR X30, [X31], #0x20
	0x01DDA3A4 B 0x1DD9440
	0x01DDA3A8 ADRP X20, 0x231C000
	0x01DDA3AC LDR X20, [X20 + 0xA78]
	0x01DDA3B0 LDR X0, [X20]
	0x01DDA3B4 LDR W8, [X0 + 0xE0]
	0x01DDA3B8 CBNZ W8, 0x1DDA3C0
	0x01DDA3BC BL 0x1C16DFC
	0x01DDA3C0 MOV X0, X19
	0x01DDA3C4 MOV X1, X31
	0x01DDA3C8 BL 0x1E77B08
	0x01DDA3CC LDR X0, [X19 + 0x38]
	0x01DDA3D0 CBZ X0, 0x1DDA4CC
	0x01DDA3D4 MOV X1, X31
	0x01DDA3D8 BL 0x1E9E538
	0x01DDA3DC CMP W0, 0x4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+112], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x231A000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231F000
	016 Move X0, [X0+2544]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231F000
	023 Move X0, [X0+2560]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Int32 get_randomButtonId()

Disassembly:
	0x01DDA3E0 B.NE 0x1DDA3F0
	0x01DDA3E4 LDP X20, X19, [X31 + 0x10]
	0x01DDA3E8 LDR X30, [X31], #0x20
	0x01DDA3EC RET
	0x01DDA3F0 LDR X0, [X19 + 0x40]
	0x01DDA3F4 CBZ X0, 0x1DDA4CC
	0x01DDA3F8 MOV X1, X31
	0x01DDA3FC BL 0x1E94078
	0x01DDA400 ANDS W31, W0, 0x7
	0x01DDA404 B.EQ 0x1DDA458
	0x01DDA408 LDR X8, [X19 + 0x38]
	0x01DDA40C CBZ X8, 0x1DDA4CC
	0x01DDA410 LDR X0, [X8 + 0x50]
	0x01DDA414 CBZ X0, 0x1DDA4CC
	0x01DDA418 MOV X1, X31
	0x01DDA41C BL 0x1EC4D00
	0x01DDA420 TBZ X0, 0x0, 0x1DDA344
	0x01DDA424 LDR X8, [X19 + 0x38]
	0x01DDA428 CBZ X8, 0x1DDA4CC
	0x01DDA42C LDR X0, [X8 + 0x50]
	0x01DDA430 MOVZ W1, 0x8
	0x01DDA434 MOV X2, X31
	0x01DDA438 BL 0x1ED9318
	0x01DDA43C LDR X8, [X19 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+116]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x231A000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231F000
	016 Move X0, [X0+2568]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231F000
	023 Move X0, [X0+2576]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_randomButtonId(System.Int32 value)

Disassembly:
	0x01DDA440 CBZ X8, 0x1DDA4CC
	0x01DDA444 LDR X8, [X8 + 0x20]
	0x01DDA448 MOV X20, X0
	0x01DDA44C CBZ X8, 0x1DDA490
	0x01DDA450 LDR W0, [X8]
	0x01DDA454 B 0x1DDA494
	0x01DDA458 LDR X0, [X20]
	0x01DDA45C LDR X19, [X19 + 0x40]
	0x01DDA460 LDR W8, [X0 + 0xE0]
	0x01DDA464 CBNZ W8, 0x1DDA46C
	0x01DDA468 BL 0x1C16DFC
	0x01DDA46C ADRP X8, 0x231E000
	0x01DDA470 LDR X8, [X8 + 0xA68]
	0x01DDA474 MOV X1, X19
	0x01DDA478 LDP X20, X19, [X31 + 0x10]
	0x01DDA47C MOVZ W2, 0x7
	0x01DDA480 LDR X0, [X8]
	0x01DDA484 MOV X3, X31
	0x01DDA488 LDR X30, [X31], #0x20
	0x01DDA48C B 0x1E77B00
	0x01DDA490 MOV X0, X31
	0x01DDA494 LDR W1, [X19 + 0x68]
	0x01DDA498 MOVZ W2, 0x3
	0x01DDA49C MOV X3, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+116], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x231A000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231F000
	016 Move X0, [X0+2568]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231F000
	023 Move X0, [X0+2584]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get_heatMeter()

Disassembly:
	0x01DDA4A0 BL 0x1E9C23C
	0x01DDA4A4 STUR X0, [X20 + 0x1C]
	0x01DDA4A8 CBZ X20, 0x1DDA4CC
	0x01DDA4AC MOVZ W8, 0x40
	0x01DDA4B0 STR W8, [X20 + 0xC]
	0x01DDA4B4 LDR X0, [X19 + 0x38]
	0x01DDA4B8 CBZ X0, 0x1DDA4CC
	0x01DDA4BC MOV X1, X20
	0x01DDA4C0 MOV X2, X31
	0x01DDA4C4 BL 0x1EA1E24
	0x01DDA4C8 B 0x1DDA344
	0x01DDA4CC BL 0x1C16F20
	0x01DDA4D0 SUB X31, X31, 0x70
	0x01DDA4D4 STR D8, [X31 + 0x40]
	0x01DDA4D8 STP X30, X21, [X31 + 0x50]
	0x01DDA4DC STP X20, X19, [X31 + 0x60]
	0x01DDA4E0 ADRP X20, 0x25FE000
	0x01DDA4E4 LDRB W8, [X20 + 0xC56]
	0x01DDA4E8 MOV V8.16B, V0.16B
	0x01DDA4EC MOV X19, X0
	0x01DDA4F0 TBNZ X8, 0x0, 0x1DDA520
	0x01DDA4F4 ADRP X0, 0x231E000
	0x01DDA4F8 LDR X0, [X0 + 0x8F0]
	0x01DDA4FC BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+120]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x231A000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231F000
	016 Move X0, [X0+2592]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231F000
	023 Move X0, [X0+2600]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_heatMeter(System.Single value)

Disassembly:
	0x01DDA500 ADRP X0, 0x231C000
	0x01DDA504 LDR X0, [X0 + 0xA78]
	0x01DDA508 BL 0x1C16CF4
	0x01DDA50C ADRP X0, 0x231E000
	0x01DDA510 LDR X0, [X0 + 0xA70]
	0x01DDA514 BL 0x1C16CF4
	0x01DDA518 MOVZ W8, 0x1
	0x01DDA51C STRB W8, [X20 + 0xC56]
	0x01DDA520 STP X31, X31, [X31 + 0x20]
	0x01DDA524 STR X31, [X31 + 0x30]
	0x01DDA528 LDRB W8, [X19 + 0x58]
	0x01DDA52C CBZ W8, 0x1DDA5DC
	0x01DDA530 STRB W31, [X19 + 0x58]
	0x01DDA534 LDR X0, [X19 + 0x40]
	0x01DDA538 CBZ X0, 0x1DDA5AC
	0x01DDA53C LDRB W8, [X0 + 0x60]
	0x01DDA540 TBNZ X8, 0x1, 0x1DDA5AC
	0x01DDA544 MOV X1, X31
	0x01DDA548 BL 0x1E93668
	0x01DDA54C TBZ X0, 0x0, 0x1DDA5AC
	0x01DDA550 MOVZ W1, 0x1
	0x01DDA554 MOV X0, X19
	0x01DDA558 BL 0x1DD8D74
	0x01DDA55C ADRP X21, 0x231E000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+120], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x231A000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x231F000
	016 Move X0, [X0+2592]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x231F000
	023 Move X0, [X0+2608]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: UnityEngine.Vector3 get__capsulePoint0()

Disassembly:
	0x01DDA560 LDR X21, [X21 + 0x8F0]
	0x01DDA564 MOV W20, W31
	0x01DDA568 ADD X8, X31, 0x8
	0x01DDA56C MOV X0, X19
	0x01DDA570 BL 0x1DD90E8
	0x01DDA574 LDUR V0, [X31 + 0x8]
	0x01DDA578 LDR X8, [X31 + 0x18]
	0x01DDA57C MOV X0, X31
	0x01DDA580 STR V0, [X31 + 0x2]
	0x01DDA584 STR X8, [X31 + 0x30]
	0x01DDA588 BL 0x1E91B08
	0x01DDA58C LDR X3, [X21]
	0x01DDA590 AND X2, X0, 0x0
	0x01DDA594 ADD X0, X31, 0x20
	0x01DDA598 MOV W1, W20
	0x01DDA59C BL 0x240ED7C
	0x01DDA5A0 ADD W20, W20, 0x1
	0x01DDA5A4 CMP W20, 0xB
	0x01DDA5A8 B.NE 0x1DDA568
	0x01DDA5AC LDR X0, [X19 + 0xB0]
	0x01DDA5B0 CBZ X0, 0x1DDA704
	0x01DDA5B4 BL 0x1DDA708
	0x01DDA5B8 LDR X0, [X19 + 0xB0]
	0x01DDA5BC CBZ X0, 0x1DDA704
	0x01DDA5C0 ADRP X8, 0xFFFFFFFFFED10000
	0x01DDA5C4 LDR V0, [X8 + 0x44C]
	0x01DDA5C8 FMOV S1, 3
	0x01DDA5CC FMOV S2, 1
	0x01DDA5D0 MOV V3.16B, V8.16B
	0x01DDA5D4 BL 0x1DDA7A8
	0x01DDA5D8 B 0x1DDA6B0
	0x01DDA5DC ADRP X20, 0x231C000
	0x01DDA5E0 LDR X20, [X20 + 0xA78]
	0x01DDA5E4 LDR X0, [X20]
	0x01DDA5E8 LDR W8, [X0 + 0xE0]
	0x01DDA5EC CBNZ W8, 0x1DDA5F4
	0x01DDA5F0 BL 0x1C16DFC
	0x01DDA5F4 MOV X0, X19
	0x01DDA5F8 MOV X1, X31
	0x01DDA5FC BL 0x1E77B08
	0x01DDA600 LDR X0, [X19 + 0x38]
	0x01DDA604 CBZ X0, 0x1DDA704
	0x01DDA608 MOV X1, X31
	0x01DDA60C BL 0x1E9E538
	0x01DDA610 CMP W0, 0x4
	0x01DDA614 B.EQ 0x1DDA6B0
	0x01DDA618 LDR X0, [X19 + 0x40]
	0x01DDA61C CBZ X0, 0x1DDA704
	0x01DDA620 MOV X1, X31
	0x01DDA624 BL 0x1E94078
	0x01DDA628 ANDS W31, W0, 0x7
	0x01DDA62C B.EQ 0x1DDA680
	0x01DDA630 LDR X8, [X19 + 0x38]
	0x01DDA634 CBZ X8, 0x1DDA704
	0x01DDA638 LDR X0, [X8 + 0x50]
	0x01DDA63C CBZ X0, 0x1DDA704
	0x01DDA640 MOV X1, X31
	0x01DDA644 BL 0x1EC4D00
	0x01DDA648 TBZ X0, 0x0, 0x1DDA534
	0x01DDA64C LDR X8, [X19 + 0x38]
	0x01DDA650 CBZ X8, 0x1DDA704
	0x01DDA654 LDR X0, [X8 + 0x50]
	0x01DDA658 MOVZ W1, 0xC
	0x01DDA65C MOV X2, X31

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D10
	003 Move [X31+40], D9
	004 Move [X31+48], D8
	005 Move [X31+56], X30
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X20, 0x25FF000
	009 Move W8, [X20+3153]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x231F000
	016 Move X0, [X0+2616]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3153], W8
	020 Move X0, X19
	021 Move X1, X31
	022 Call Component.get_transform, X0
	023 Compare X0, 0
	024 JumpIfEqual {78}
	025 Move X19, 0x231F000
	026 Move X19, [X19+2616]
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X0, [X19]
	030 Move V8, V2
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {40}
	034 Move [X31], V1
	035 Move [X31+8], V0
	036 Call 0x1C17DFC
	037 Move V1, [X31]
	038 Move V0, [X31+16]
	039 Move X0, [X19]
	040 Move X8, [X0+184]
	041 Move X19, 0x25FF000
	042 Move W9, [X19+1926]
	043 Move V9, [X8]
	044 Move V10, [X8+8]
	045 Compare W9, 0
	046 JumpIfNotEqual {56}
	047 Move X0, 0x231A000
	048 Move X0, [X0+1440]
	049 Move [X31], V1
	050 Move [X31+8], V0
	051 Call 0x1C17CF4
	052 Move V1, [X31]
	053 Move V0, [X31+16]
	054 Move W8, 1
	055 Move [X19+1926], W8
	056 Move X8, 0x231A000
	057 Move X8, [X8+1440]
	058 Move V0.S[1], V1.S[0]
	059 Add S5, S8, S10
	060 Add V3, V0, V9
	061 Move X8, [X8]
	062 Move X20, [X31+64]
	063 Move X19, [X31+72]
	064 Move X30, [X31+56]
	065 Move D9, [X31+40]
	066 Move D8, [X31+48]
	067 Move X8, [X8+184]
	068 Move V10, [X31+32]
	069 Move V4, [X8+24]
	070 Move V2, [X8+32]
	071 Add V0, V4, V4
	072 Add S2, S2, S2
	073 Subtract V0, V3, V0
	074 Subtract S2, S5, S2
	075 Move S1, V0.S[1]
	076 Add X31, X31, 80
	077 Return X0
	078 Call 0x1C17F20

Method: UnityEngine.Vector3 get__capsulePoint1()

Disassembly:
	0x01DDA660 BL 0x1ED9318
	0x01DDA664 LDR X8, [X19 + 0x40]
	0x01DDA668 CBZ X8, 0x1DDA704
	0x01DDA66C LDR X8, [X8 + 0x20]
	0x01DDA670 MOV X20, X0
	0x01DDA674 CBZ X8, 0x1DDA6C4
	0x01DDA678 LDR W0, [X8]
	0x01DDA67C B 0x1DDA6C8
	0x01DDA680 LDR X0, [X20]
	0x01DDA684 LDR X19, [X19 + 0x40]
	0x01DDA688 LDR W8, [X0 + 0xE0]
	0x01DDA68C CBNZ W8, 0x1DDA694
	0x01DDA690 BL 0x1C16DFC
	0x01DDA694 ADRP X8, 0x231E000
	0x01DDA698 LDR X8, [X8 + 0xA70]
	0x01DDA69C MOVZ W2, 0x7
	0x01DDA6A0 MOV X1, X19
	0x01DDA6A4 MOV X3, X31
	0x01DDA6A8 LDR X0, [X8]
	0x01DDA6AC BL 0x1E77B00
	0x01DDA6B0 LDP X20, X19, [X31 + 0x60]
	0x01DDA6B4 LDP X30, X21, [X31 + 0x50]
	0x01DDA6B8 LDR V8, [X31 + 0x40]
	0x01DDA6BC ADD X31, X31, 0x70
	0x01DDA6C0 RET
	0x01DDA6C4 MOV X0, X31
	0x01DDA6C8 LDR W1, [X19 + 0x68]
	0x01DDA6CC MOVZ W2, 0x1
	0x01DDA6D0 MOV X3, X31
	0x01DDA6D4 BL 0x1E9C23C
	0x01DDA6D8 STUR X0, [X20 + 0x1C]
	0x01DDA6DC STR S8, [X20 + 0x24]
	0x01DDA6E0 CBZ X20, 0x1DDA704
	0x01DDA6E4 MOVZ W8, 0x60
	0x01DDA6E8 STR W8, [X20 + 0xC]
	0x01DDA6EC LDR X0, [X19 + 0x38]
	0x01DDA6F0 CBZ X0, 0x1DDA704
	0x01DDA6F4 MOV X1, X20
	0x01DDA6F8 MOV X2, X31
	0x01DDA6FC BL 0x1EA1E24
	0x01DDA700 B 0x1DDA534
	0x01DDA704 BL 0x1C16F20
	0x01DDA708 STP X30, X21, [X31 - 0x20]!
	0x01DDA70C STP X20, X19, [X31 + 0x10]
	0x01DDA710 LDR X1, [X0 + 0xA0]
	0x01DDA714 CBZ X1, 0x1DDA798
	0x01DDA718 MOV X2, X31
	0x01DDA71C MOV X19, X0
	0x01DDA720 BL 0x3C36834
	0x01DDA724 LDR X8, [X19 + 0x78]
	0x01DDA728 STR X31, [X19 + 0xA0]
	0x01DDA72C CBZ X8, 0x1DDA794
	0x01DDA730 MOVZ W20, 0x4
	0x01DDA734 LDR W9, [X8 + 0x18]
	0x01DDA738 SUB X21, X20, 0x4
	0x01DDA73C CMP W21, W9
	0x01DDA740 B.GE 0x1DDA798
	0x01DDA744 CMP W21, W9
	0x01DDA748 B.CS 0x1DDA7A4
	0x01DDA74C LDR X0, [X8, X20, LSL #3]
	0x01DDA750 CBZ X0, 0x1DDA794
	0x01DDA754 MOV W1, W31
	0x01DDA758 MOV X2, X31
	0x01DDA75C BL 0x3C32410

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D10
	003 Move [X31+40], D9
	004 Move [X31+48], D8
	005 Move [X31+56], X30
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X20, 0x25FF000
	009 Move W8, [X20+3154]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x231F000
	016 Move X0, [X0+2616]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3154], W8
	020 Move X0, X19
	021 Move X1, X31
	022 Call Component.get_transform, X0
	023 Compare X0, 0
	024 JumpIfEqual {78}
	025 Move X19, 0x231F000
	026 Move X19, [X19+2616]
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X0, [X19]
	030 Move V8, V2
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {40}
	034 Move [X31], V1
	035 Move [X31+8], V0
	036 Call 0x1C17DFC
	037 Move V1, [X31]
	038 Move V0, [X31+16]
	039 Move X0, [X19]
	040 Move X8, [X0+184]
	041 Move X19, 0x25FF000
	042 Move W9, [X19+1926]
	043 Move V9, [X8]
	044 Move V10, [X8+8]
	045 Compare W9, 0
	046 JumpIfNotEqual {56}
	047 Move X0, 0x231A000
	048 Move X0, [X0+1440]
	049 Move [X31], V1
	050 Move [X31+8], V0
	051 Call 0x1C17CF4
	052 Move V1, [X31]
	053 Move V0, [X31+16]
	054 Move W8, 1
	055 Move [X19+1926], W8
	056 Move X8, 0x231A000
	057 Move X8, [X8+1440]
	058 Move V0.S[1], V1.S[0]
	059 Add S5, S8, S10
	060 Add V3, V0, V9
	061 Move X8, [X8]
	062 Move X20, [X31+64]
	063 Move X19, [X31+72]
	064 Move X30, [X31+56]
	065 Move D9, [X31+40]
	066 Move D8, [X31+48]
	067 Move X8, [X8+184]
	068 Move V10, [X31+32]
	069 Move V4, [X8+24]
	070 Move V2, [X8+32]
	071 Add V0, V4, V4
	072 Add S2, S2, S2
	073 Add V0, V3, V0
	074 Add S2, S5, S2
	075 Move S1, V0.S[1]
	076 Add X31, X31, 80
	077 Return X0
	078 Call 0x1C17F20

Method: System.Void Spawned()

Disassembly:
	0x01DDA760 LDR X8, [X19 + 0x80]
	0x01DDA764 CBZ X8, 0x1DDA794
	0x01DDA768 LDR W9, [X8 + 0x18]
	0x01DDA76C CMP W21, W9
	0x01DDA770 B.CS 0x1DDA7A4
	0x01DDA774 LDR X0, [X8, X20, LSL #3]
	0x01DDA778 CBZ X0, 0x1DDA794
	0x01DDA77C MOV W1, W31
	0x01DDA780 MOV X2, X31
	0x01DDA784 BL 0x3C13034
	0x01DDA788 LDR X8, [X19 + 0x78]
	0x01DDA78C ADD X20, X20, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call NetworkBehaviour.Spawned, X0
	006 Move X8, [X19]
	007 Move W9, 1
	008 Move [X19+240], W9
	009 Move X0, X19
	010 Move X2, [X8+584]
	011 Move X1, [X8+592]
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 CallNoReturn X2

Method: System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)

Disassembly:
	0x01DDA790 CBNZ X8, 0x1DDA734
	0x01DDA794 BL 0x1C16F20
	0x01DDA798 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 And W2, W2, 1
	002 Move X3, X31
	003 Call NetworkBehaviour.Despawned, X0, X1, X2
	004 Return 

Method: System.Void Setup()

Disassembly:
	0x01DDA79C LDP X30, X21, [X31], #0x20
	0x01DDA7A0 RET
	0x01DDA7A4 BL 0x1C16F28
	0x01DDA7A8 STP D11, D10, [X31 - 0x30]!
	0x01DDA7AC STP D9, D8, [X31 + 0x10]
	0x01DDA7B0 STP X30, X19, [X31 + 0x20]
	0x01DDA7B4 LDR X1, [X0 + 0x98]
	0x01DDA7B8 MOV V8.16B, V3.16B
	0x01DDA7BC MOV V9.16B, V2.16B
	0x01DDA7C0 MOV V10.16B, V1.16B
	0x01DDA7C4 MOV X19, X0
	0x01DDA7C8 MOV V11.16B, V0.16B
	0x01DDA7CC CBZ X1, 0x1DDA7DC
	0x01DDA7D0 MOV X0, X19
	0x01DDA7D4 MOV X2, X31
	0x01DDA7D8 BL 0x3C36834
	0x01DDA7DC MOV X0, X19
	0x01DDA7E0 MOV V0.16B, V11.16B
	0x01DDA7E4 MOV V1.16B, V10.16B
	0x01DDA7E8 MOV V2.16B, V9.16B
	0x01DDA7EC MOV V3.16B, V8.16B
	0x01DDA7F0 BL 0x1DDBFBC
	0x01DDA7F4 MOV X1, X0
	0x01DDA7F8 STR X0, [X19 + 0x98]
	0x01DDA7FC MOV X0, X19
	0x01DDA800 LDP X30, X19, [X31 + 0x20]
	0x01DDA804 LDP D9, D8, [X31 + 0x10]
	0x01DDA808 MOV X2, X31
	0x01DDA80C LDP D11, D10, [X31], #0x30
	0x01DDA810 B 0x3C366FC
	0x01DDA814 SUB X31, X31, 0xC0
	0x01DDA818 STR X30, [X31 + 0x80]
	0x01DDA81C STP X24, X23, [X31 + 0x90]
	0x01DDA820 STP X22, X21, [X31 + 0xA0]
	0x01DDA824 STP X20, X19, [X31 + 0xB0]
	0x01DDA828 ADRP X21, 0x25FE000
	0x01DDA82C LDRB W8, [X21 + 0xC57]
	0x01DDA830 MOV X19, X1
	0x01DDA834 MOV X20, X0
	0x01DDA838 TBNZ X8, 0x0, 0x1DDA910
	0x01DDA83C ADRP X0, 0x2319000
	0x01DDA840 LDR X0, [X0 + 0xB50]
	0x01DDA844 BL 0x1C16CF4
	0x01DDA848 ADRP X0, 0x231E000
	0x01DDA84C LDR X0, [X0 + 0xA78]
	0x01DDA850 BL 0x1C16CF4
	0x01DDA854 ADRP X0, 0x231D000
	0x01DDA858 LDR X0, [X0 + 0x440]
	0x01DDA85C BL 0x1C16CF4
	0x01DDA860 ADRP X0, 0x231D000
	0x01DDA864 LDR X0, [X0 + 0x448]
	0x01DDA868 BL 0x1C16CF4
	0x01DDA86C ADRP X0, 0x231D000
	0x01DDA870 LDR X0, [X0 + 0x450]
	0x01DDA874 BL 0x1C16CF4
	0x01DDA878 ADRP X0, 0x231C000
	0x01DDA87C LDR X0, [X0 + 0xE00]
	0x01DDA880 BL 0x1C16CF4
	0x01DDA884 ADRP X0, 0x231E000
	0x01DDA888 LDR X0, [X0 + 0xA80]
	0x01DDA88C BL 0x1C16CF4
	0x01DDA890 ADRP X0, 0x2319000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X10, [X0+184]
	005 Compare X10, 0
	006 JumpIfEqual {74}
	007 Move W9, [X10+24]
	008 Move X19, X0
	009 Move X8, X31
	010 Add X10, X10, 32
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X11, [X10]
	013 Compare X11, 0
	014 JumpIfEqual {74}
	015 Move [X11+40], W31
	016 Move [X11+44], W8
	017 Add X8, X8, 1
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move [X11+32], X19
	020 Move X0, [X19+64]
	021 Compare X0, 0
	022 JumpIfEqual {57}
	023 Move W8, [X0+96]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 2
	026 Compare TEMP, 2
	027 JumpIfEqual {57}
	028 Move X1, X31
	029 Call NetworkObject.get_HasStateAuthority, X0
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {57}
	034 Move W1, 11
	035 Move W0, W31
	036 Move X2, X31
	037 Call Random.Range, X0, X1
	038 Move W1, W0
	039 Move X0, X19
	040 Call ItemSellingMachineController.set_randomButtonId, X0, X1
	041 Move X0, X19
	042 Move W1, W31
	043 Call ItemSellingMachineController.set_isSellingInProgress, X0, X1
	044 Move X0, X19
	045 Move W1, W31
	046 Call ItemSellingMachineController.set_isOverheated, X0, X1
	047 Move X0, X19
	048 Move W1, W31
	049 Call ItemSellingMachineController.set_isExploded, X0, X1
	050 Move X0, X19
	051 Move W1, W31
	052 Call ItemSellingMachineController.set_itemSoldValue, X0, X1
	053 Move X0, X19
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X30, [X31+32]
	057 Move X0, X19
	058 Call ItemSellingMachineController.OnButtonStateChanged, X0
	059 Move X0, X19
	060 Call ItemSellingMachineController.HandleIsExploded, X0
	061 Move X20, [X19+176]
	062 Move X0, X19
	063 Call ItemSellingMachineController.get_isOverheated, X0
	064 Compare X20, 0
	065 JumpIfEqual {74}
	066 And W1, W0, 1
	067 Move X0, X20
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Call ItemSellingMachineView.SetOverheatedColor, X0, X1
	072 Return 
	073 Call 0x1C17F28
	074 Call 0x1C17F20

Method: System.Void ResetButtonsState()

Disassembly:
	0x01DDA894 LDR X0, [X0 + 0x758]
	0x01DDA898 BL 0x1C16CF4
	0x01DDA89C ADRP X0, 0x231D000
	0x01DDA8A0 LDR X0, [X0 + 0x458]
	0x01DDA8A4 BL 0x1C16CF4
	0x01DDA8A8 ADRP X0, 0x231D000
	0x01DDA8AC LDR X0, [X0 + 0x148]
	0x01DDA8B0 BL 0x1C16CF4
	0x01DDA8B4 ADRP X0, 0x231D000
	0x01DDA8B8 LDR X0, [X0 + 0x160]
	0x01DDA8BC BL 0x1C16CF4
	0x01DDA8C0 ADRP X0, 0x231D000
	0x01DDA8C4 LDR X0, [X0 + 0x168]
	0x01DDA8C8 BL 0x1C16CF4
	0x01DDA8CC ADRP X0, 0x231D000
	0x01DDA8D0 LDR X0, [X0 + 0x170]
	0x01DDA8D4 BL 0x1C16CF4
	0x01DDA8D8 ADRP X0, 0x231E000
	0x01DDA8DC LDR X0, [X0 + 0xA88]
	0x01DDA8E0 BL 0x1C16CF4
	0x01DDA8E4 ADRP X0, 0x231D000
	0x01DDA8E8 LDR X0, [X0 + 0x180]
	0x01DDA8EC BL 0x1C16CF4
	0x01DDA8F0 ADRP X0, 0x231C000
	0x01DDA8F4 LDR X0, [X0 + 0xD70]
	0x01DDA8F8 BL 0x1C16CF4
	0x01DDA8FC ADRP X0, 0x231E000
	0x01DDA900 LDR X0, [X0 + 0xA90]
	0x01DDA904 BL 0x1C16CF4
	0x01DDA908 MOVZ W8, 0x1
	0x01DDA90C STRB W8, [X21 + 0xC57]
	0x01DDA910 STR X31, [X31 + 0x88]
	0x01DDA914 STP X31, X31, [X31 + 0x60]
	0x01DDA918 STR X31, [X31 + 0x70]
	0x01DDA91C CBZ X19, 0x1DDABD4
	0x01DDA920 LDR X8, [X19 + 0x80]
	0x01DDA924 CBZ X8, 0x1DDABD4
	0x01DDA928 LDRB W8, [X8 + 0x28]
	0x01DDA92C TBNZ X8, 0x0, 0x1DDA950
	0x01DDA930 LDR X0, [X20 + 0xE8]
	0x01DDA934 CBZ X0, 0x1DDABD4
	0x01DDA938 ADRP X8, 0x231E000
	0x01DDA93C LDR X8, [X8 + 0xA80]
	0x01DDA940 MOV X1, X19
	0x01DDA944 LDR X2, [X8]
	0x01DDA948 BL 0x2DBE4B0
	0x01DDA94C TBZ X0, 0x0, 0x1DDA958
	0x01DDA950 MOV W21, W31
	0x01DDA954 B 0x1DDABAC
	0x01DDA958 ADRP X8, 0x231C000
	0x01DDA95C LDR X8, [X8 + 0xD70]
	0x01DDA960 MOV X0, X19
	0x01DDA964 MOV X2, X31
	0x01DDA968 LDR X1, [X8]
	0x01DDA96C BL 0x3C33420
	0x01DDA970 TBZ X0, 0x0, 0x1DDAA28
	0x01DDA974 ADRP X8, 0x231E000
	0x01DDA978 LDR X8, [X8 + 0xA78]
	0x01DDA97C ADD X1, X31, 0x88
	0x01DDA980 MOV X0, X19
	0x01DDA984 LDR X2, [X8]
	0x01DDA988 BL 0x21A4990
	0x01DDA98C TBZ X0, 0x0, 0x1DDAA28
	0x01DDA990 LDR X0, [X31 + 0x88]
	0x01DDA994 CBZ X0, 0x1DDABD4
	0x01DDA998 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+112], X22
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Move X20, 0x25FF000
	008 Move W8, [X20+3155]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x231F000
	015 Move X0, [X0+2288]
	016 Call 0x1C17CF4
	017 Move X0, 0x231F000
	018 Move X0, [X0+2296]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3155], W8
	022 Move [X31+64], X31
	023 Move [X31+72], X31
	024 Move [X31+80], X31
	025 Move [X31+32], X31
	026 Move [X31+40], X31
	027 Move [X31+48], X31
	028 Move X0, [X19+64]
	029 Compare X0, 0
	030 JumpIfEqual {75}
	031 Move W8, [X0+96]
	032 Move TEMP, X8
	033 And TEMP, TEMP, 2
	034 Compare TEMP, 2
	035 JumpIfEqual {75}
	036 Move X1, X31
	037 Call NetworkObject.get_HasStateAuthority, X0
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {75}
	042 Move X21, 0x231F000
	043 Move X22, 0x231F000
	044 Move X21, [X21+2296]
	045 Move X22, [X22+2288]
	046 Move W20, W31
	047 Add X8, X31, 8
	048 Move X0, X19
	049 Call ItemSellingMachineController.get_isButtonPressed, X0
	050 NotImplemented "Instruction LDUR not yet implemented."
	051 Move X8, [X31+24]
	052 Move X3, [X21]
	053 Add X0, X31, 64
	054 Move W1, W20
	055 Move W2, W31
	056 Move [X31+4], V0
	057 Move [X31+80], X8
	058 Call 0x240C0B0, X0, X1, X2
	059 Add X8, X31, 8
	060 Move X0, X19
	061 Call ItemSellingMachineController.get__timerResetButton, X0
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 Move X8, [X31+24]
	064 Move X0, X31
	065 Move [X31+2], V0
	066 Move [X31+48], X8
	067 Call TickTimer.get_None
	068 Move X3, [X22]
	069 And X2, X0, 0
	070 Add X0, X31, 32
	071 Move W1, W20
	072 Call NetworkArray`1<TickTimer>.Set, X0, X1, X2
	073 Add W20, W20, 1
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X20, [X31+128]
	076 Move X19, [X31+136]
	077 Move X22, [X31+112]
	078 Move X21, [X31+120]
	079 Move X30, [X31+96]
	080 Add X31, X31, 144
	081 Return 

Method: System.Void OnButtonStateChanged()

Disassembly:
	0x01DDA99C BL 0x1D9D050
	0x01DDA9A0 LDR X8, [X31 + 0x88]
	0x01DDA9A4 CBZ X8, 0x1DDABD4
	0x01DDA9A8 MOV X21, X0
	0x01DDA9AC MOV X0, X8
	0x01DDA9B0 MOV X1, X31
	0x01DDA9B4 BL 0x1D9CFD0
	0x01DDA9B8 CBZ X21, 0x1DDABD4
	0x01DDA9BC ADRP X8, 0x231D000
	0x01DDA9C0 LDR X8, [X8 + 0x458]
	0x01DDA9C4 MOV X0, X21
	0x01DDA9C8 LDR X1, [X8]
	0x01DDA9CC ADD X8, X31, 0x48
	0x01DDA9D0 BL 0x301CB58
	0x01DDA9D4 LDUR V0, [X31 + 0x48]
	0x01DDA9D8 LDR X8, [X31 + 0x58]
	0x01DDA9DC ADRP X22, 0x231D000
	0x01DDA9E0 MOV W23, W31
	0x01DDA9E4 STR V0, [X31 + 0x6]
	0x01DDA9E8 STR X8, [X31 + 0x70]
	0x01DDA9EC LDR X22, [X22 + 0x448]
	0x01DDA9F0 LDR X1, [X22]
	0x01DDA9F4 ADD X0, X31, 0x60
	0x01DDA9F8 BL 0x2BC4350
	0x01DDA9FC TBZ X0, 0x0, 0x1DDAA30
	0x01DDAA00 LDR X21, [X31 + 0x70]
	0x01DDAA04 MOV X0, X19
	0x01DDAA08 MOV X1, X31
	0x01DDAA0C BL 0x1D89D0C
	0x01DDAA10 TBZ X0, 0x0, 0x1DDA9F0
	0x01DDAA14 MOV X0, X20
	0x01DDAA18 MOV X1, X21
	0x01DDAA1C BL 0x1DDA814
	0x01DDAA20 ADD W23, W0, W23
	0x01DDAA24 B 0x1DDA9F0
	0x01DDAA28 MOV W23, W31
	0x01DDAA2C B 0x1DDAA44
	0x01DDAA30 ADRP X8, 0x231D000
	0x01DDAA34 LDR X8, [X8 + 0x440]
	0x01DDAA38 ADD X0, X31, 0x60
	0x01DDAA3C LDR X1, [X8]
	0x01DDAA40 BL 0x2BC434C
	0x01DDAA44 LDR X0, [X20 + 0xE8]
	0x01DDAA48 CBZ X0, 0x1DDABD4
	0x01DDAA4C ADRP X8, 0x231C000
	0x01DDAA50 LDR X8, [X8 + 0xE00]
	0x01DDAA54 MOV X1, X19
	0x01DDAA58 LDR X2, [X8]
	0x01DDAA5C BL 0x2DBEF30
	0x01DDAA60 LDR X21, [X19 + 0x80]
	0x01DDAA64 CBZ X21, 0x1DDABD4
	0x01DDAA68 ADRP X8, 0x231D000
	0x01DDAA6C LDR W22, [X21 + 0x24]
	0x01DDAA70 LDR X8, [X8 + 0x160]
	0x01DDAA74 MOVZ W1, 0x3

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+72], X23
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move X20, 0x25FF000
	009 Move W8, [X20+3156]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x231F000
	016 Move X0, [X0+2624]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3156], W8
	020 Move X23, 0x231F000
	021 Move X23, [X23+2624]
	022 Move X20, X31
	023 Move [X31+32], X31
	024 Move [X31+40], X31
	025 Move [X31+48], X31
	026 Move X8, [X19+184]
	027 Compare X8, 0
	028 JumpIfEqual {64}
	029 Move W9, [X8+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Add X8, X8, X20
	032 Move X21, [X8+32]
	033 Add X8, X31, 8
	034 Move X0, X19
	035 Call ItemSellingMachineController.get_isButtonPressed, X0
	036 NotImplemented "Instruction LDUR not yet implemented."
	037 Move X8, [X31+24]
	038 Move X2, [X23]
	039 Add X0, X31, 32
	040 Move W1, W20
	041 Move [X31+2], V0
	042 Move [X31+48], X8
	043 Call 0x240BCF4, X0, X1
	044 Move W22, W0
	045 Move X0, X19
	046 Call ItemSellingMachineController.get_randomButtonId, X0
	047 Compare X21, 0
	048 JumpIfEqual {64}
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSET not yet implemented."
	051 And W1, W22, 1
	052 Move X0, X21
	053 Call ItemSellingMachineButtonView.SetBackButtonEmission, X0, X1, X2
	054 Add X20, X20, 1
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X20, [X31+96]
	057 Move X19, [X31+104]
	058 Move X22, [X31+80]
	059 Move X21, [X31+88]
	060 Move X30, [X31+64]
	061 Move X23, [X31+72]
	062 Add X31, X31, 112
	063 Return 
	064 Call 0x1C17F20
	065 Call 0x1C17F28

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01DDABC0 LDP X22, X21, [X31 + 0xA0]
	0x01DDABC4 LDP X24, X23, [X31 + 0x90]
	0x01DDABC8 LDR X30, [X31 + 0x80]
	0x01DDABCC ADD X31, X31, 0xC0
	0x01DDABD0 RET
	0x01DDABD4 BL 0x1C16F20
	0x01DDABD8 BL 0x1C16F28
	0x01DDABDC B 0x1DDABE4
	0x01DDABE0 B 0x1DDABE4
	0x01DDABE4 MOV X21, X0
	0x01DDABE8 CMP W1, 0x1
	0x01DDABEC B.NE 0x1DDAC20
	0x01DDABF0 MOV X0, X21
	0x01DDABF4 BL 0x3EB1AD0
	0x01DDABF8 LDR X22, [X0]
	0x01DDABFC BL 0x3EB1AE0
	0x01DDAC00 ADRP X8, 0x231D000
	0x01DDAC04 LDR X8, [X8 + 0x440]
	0x01DDAC08 ADD X0, X31, 0x60
	0x01DDAC0C LDR X1, [X8]
	0x01DDAC10 BL 0x2BC434C
	0x01DDAC14 CBZ X22, 0x1DDAA44
	0x01DDAC18 MOV X0, X22
	0x01DDAC1C BL 0x1C16F18
	0x01DDAC20 MOV X22, X31
	0x01DDAC24 B 0x1DDAC2C
	0x01DDAC28 MOV X21, X0
	0x01DDAC2C ADRP X8, 0x231D000
	0x01DDAC30 LDR X8, [X8 + 0x440]
	0x01DDAC34 LDR X1, [X8]
	0x01DDAC38 ADD X0, X31, 0x60
	0x01DDAC3C BL 0x2BC434C
	0x01DDAC40 CBNZ X22, 0x1DDAC4C
	0x01DDAC44 MOV X0, X21
	0x01DDAC48 BL 0x1D2C690
	0x01DDAC4C MOV X0, X22
	0x01DDAC50 BL 0x1C16F18
	0x01DDAC54 BL 0x1990590
	0x01DDAC58 STP X30, X21, [X31 - 0x20]!
	0x01DDAC5C STP X20, X19, [X31 + 0x10]
	0x01DDAC60 ADRP X21, 0x25FE000
	0x01DDAC64 LDRB W8, [X21 + 0xC5B]
	0x01DDAC68 MOV W19, W1
	0x01DDAC6C MOV X20, X0
	0x01DDAC70 TBNZ X8, 0x0, 0x1DDAC94
	0x01DDAC74 ADRP X0, 0x231C000
	0x01DDAC78 LDR X0, [X0 + 0xA78]
	0x01DDAC7C BL 0x1C16CF4
	0x01DDAC80 ADRP X0, 0x231E000
	0x01DDAC84 LDR X0, [X0 + 0xA98]
	0x01DDAC88 BL 0x1C16CF4
	0x01DDAC8C MOVZ W8, 0x1
	0x01DDAC90 STRB W8, [X21 + 0xC5B]
	0x01DDAC94 LDRB W8, [X20 + 0x58]
	0x01DDAC98 CBZ W8, 0x1DDACC4
	0x01DDAC9C STRB W31, [X20 + 0x58]
	0x01DDACA0 TBNZ X19, 0x1F, 0x1DDAD00
	0x01DDACA4 LDR X0, [X20 + 0xB0]
	0x01DDACA8 CBZ X0, 0x1DDADEC
	0x01DDACAC MOV W1, W19
	0x01DDACB0 BL 0x1DDB258
	0x01DDACB4 MOV W0, W19
	0x01DDACB8 LDP X20, X19, [X31 + 0x10]
	0x01DDACBC LDP X30, X21, [X31], #0x20
	0x01DDACC0 B 0x1DD71F0
	0x01DDACC4 ADRP X21, 0x231C000
	0x01DDACC8 LDR X21, [X21 + 0xA78]
	0x01DDACCC LDR X0, [X21]
	0x01DDACD0 LDR W8, [X0 + 0xE0]
	0x01DDACD4 CBNZ W8, 0x1DDACDC
	0x01DDACD8 BL 0x1C16DFC
	0x01DDACDC MOV X0, X20
	0x01DDACE0 MOV X1, X31
	0x01DDACE4 BL 0x1E77B08
	0x01DDACE8 LDR X0, [X20 + 0x38]
	0x01DDACEC CBZ X0, 0x1DDADEC
	0x01DDACF0 MOV X1, X31
	0x01DDACF4 BL 0x1E9E538
	0x01DDACF8 CMP W0, 0x4
	0x01DDACFC B.NE 0x1DDAD0C
	0x01DDAD00 LDP X20, X19, [X31 + 0x10]
	0x01DDAD04 LDP X30, X21, [X31], #0x20
	0x01DDAD08 RET
	0x01DDAD0C LDR X0, [X20 + 0x40]
	0x01DDAD10 CBZ X0, 0x1DDADEC
	0x01DDAD14 MOV X1, X31
	0x01DDAD18 BL 0x1E94078
	0x01DDAD1C ANDS W31, W0, 0x7
	0x01DDAD20 B.EQ 0x1DDAD74
	0x01DDAD24 LDR X8, [X20 + 0x38]
	0x01DDAD28 CBZ X8, 0x1DDADEC
	0x01DDAD2C LDR X0, [X8 + 0x50]
	0x01DDAD30 CBZ X0, 0x1DDADEC
	0x01DDAD34 MOV X1, X31
	0x01DDAD38 BL 0x1EC4D00
	0x01DDAD3C TBZ X0, 0x0, 0x1DDACA0
	0x01DDAD40 LDR X8, [X20 + 0x38]
	0x01DDAD44 CBZ X8, 0x1DDADEC
	0x01DDAD48 LDR X0, [X8 + 0x50]
	0x01DDAD4C MOVZ W1, 0xC
	0x01DDAD50 MOV X2, X31
	0x01DDAD54 BL 0x1ED9318
	0x01DDAD58 LDR X8, [X20 + 0x40]
	0x01DDAD5C CBZ X8, 0x1DDADEC
	0x01DDAD60 LDR X8, [X8 + 0x20]
	0x01DDAD64 MOV X21, X0
	0x01DDAD68 CBZ X8, 0x1DDADAC
	0x01DDAD6C LDR W0, [X8]
	0x01DDAD70 B 0x1DDADB0
	0x01DDAD74 LDR X0, [X21]
	0x01DDAD78 LDR X19, [X20 + 0x40]
	0x01DDAD7C LDR W8, [X0 + 0xE0]
	0x01DDAD80 CBNZ W8, 0x1DDAD88
	0x01DDAD84 BL 0x1C16DFC
	0x01DDAD88 ADRP X8, 0x231E000
	0x01DDAD8C LDR X8, [X8 + 0xA98]
	0x01DDAD90 MOV X1, X19
	0x01DDAD94 LDP X20, X19, [X31 + 0x10]
	0x01DDAD98 MOVZ W2, 0x7
	0x01DDAD9C LDR X0, [X8]
	0x01DDADA0 MOV X3, X31
	0x01DDADA4 LDP X30, X21, [X31], #0x20
	0x01DDADA8 B 0x1E77B00
	0x01DDADAC MOV X0, X31
	0x01DDADB0 LDR W1, [X20 + 0x68]
	0x01DDADB4 MOVZ W2, 0x4
	0x01DDADB8 MOV X3, X31
	0x01DDADBC BL 0x1E9C23C
	0x01DDADC0 STUR X0, [X21 + 0x1C]
	0x01DDADC4 STR W19, [X21 + 0x24]
	0x01DDADC8 CBZ X21, 0x1DDADEC
	0x01DDADCC MOVZ W8, 0x60
	0x01DDADD0 STR W8, [X21 + 0xC]
	0x01DDADD4 LDR X0, [X20 + 0x38]
	0x01DDADD8 CBZ X0, 0x1DDADEC
	0x01DDADDC MOV X1, X21
	0x01DDADE0 MOV X2, X31
	0x01DDADE4 BL 0x1EA1E24
	0x01DDADE8 B 0x1DDACA0
	0x01DDADEC BL 0x1C16F20
	0x01DDADF0 STR X30, [X31 - 0x20]!
	0x01DDADF4 STP X20, X19, [X31 + 0x10]
	0x01DDADF8 LDR X20, [X0 + 0xB0]
	0x01DDADFC MOV X19, X0
	0x01DDAE00 BL 0x1DD8DD8
	0x01DDAE04 CBZ X20, 0x1DDAE58
	0x01DDAE08 AND W1, W0, 0x1
	0x01DDAE0C MOV X0, X20
	0x01DDAE10 BL 0x1DD9A9C
	0x01DDAE14 MOV X0, X19
	0x01DDAE18 BL 0x1DD8DD8
	0x01DDAE1C TBZ X0, 0x0, 0x1DDAE4C
	0x01DDAE20 LDR X0, [X19 + 0xC8]
	0x01DDAE24 CBZ X0, 0x1DDAE58
	0x01DDAE28 LDR X19, [X19 + 0xD8]
	0x01DDAE2C MOV X1, X31
	0x01DDAE30 BL 0x3C3F58C
	0x01DDAE34 MOV X0, X19
	0x01DDAE38 LDP X20, X19, [X31 + 0x10]
	0x01DDAE3C FMOV S3, 1
	0x01DDAE40 MOV X1, X31
	0x01DDAE44 LDR X30, [X31], #0x20
	0x01DDAE48 B 0x1DD1B94
	0x01DDAE4C LDP X20, X19, [X31 + 0x10]
	0x01DDAE50 LDR X30, [X31], #0x20
	0x01DDAE54 RET
	0x01DDAE58 BL 0x1C16F20
	0x01DDAE5C STR D8, [X31 - 0x40]!
	0x01DDAE60 STR X30, [X31 + 0x8]
	0x01DDAE64 STP X24, X23, [X31 + 0x10]
	0x01DDAE68 STP X22, X21, [X31 + 0x20]
	0x01DDAE6C STP X20, X19, [X31 + 0x30]
	0x01DDAE70 ADRP X21, 0x25FE000
	0x01DDAE74 LDRB W8, [X21 + 0xC68]
	0x01DDAE78 MOV W19, W1
	0x01DDAE7C MOV X20, X0
	0x01DDAE80 TBNZ X8, 0x0, 0x1DDAE98
	0x01DDAE84 ADRP X0, 0x231E000
	0x01DDAE88 LDR X0, [X0 + 0xA48]
	0x01DDAE8C BL 0x1C16CF4
	0x01DDAE90 MOVZ W8, 0x1
	0x01DDAE94 STRB W8, [X21 + 0xC68]
	0x01DDAE98 LDR X8, [X20 + 0x30]
	0x01DDAE9C CBZ X8, 0x1DDAF58
	0x01DDAEA0 ADRP X24, 0x231E000
	0x01DDAEA4 LDR X24, [X24 + 0xA48]
	0x01DDAEA8 MOV X22, X31
	0x01DDAEAC MOV X23, X31
	0x01DDAEB0 FMOV S8, 0.5
	0x01DDAEB4 LDR W9, [X8 + 0x18]
	0x01DDAEB8 CMP W23, W9
	0x01DDAEBC B.GE 0x1DDAF5C
	0x01DDAEC0 CMP W23, W9
	0x01DDAEC4 B.CS 0x1DDAF74

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+96], D8
	003 Move [X31+104], X30
	004 Move [X31+112], X24
	005 Move [X31+120], X23
	006 Move [X31+128], X22
	007 Move [X31+136], X21
	008 Move [X31+144], X20
	009 Move [X31+152], X19
	010 Move X20, 0x25FF000
	011 Move W8, [X20+3157]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0x231F000
	018 Move X0, [X0+2288]
	019 Call 0x1C17CF4
	020 Move X0, 0x231F000
	021 Move X0, [X0+2296]
	022 Call 0x1C17CF4
	023 Move X0, 0x231F000
	024 Move X0, [X0+2640]
	025 Call 0x1C17CF4
	026 Move X0, 0x231F000
	027 Move X0, [X0+2624]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3157], W8
	031 Move X0, X19
	032 Move X1, X31
	033 Move [X31+64], X31
	034 Move [X31+72], X31
	035 Move [X31+80], X31
	036 Move [X31+32], X31
	037 Move [X31+40], X31
	038 Move [X31+48], X31
	039 Call NetworkBehaviour.FixedUpdateNetwork, X0
	040 Move X0, [X19+64]
	041 Compare X0, 0
	042 JumpIfEqual {223}
	043 Move W8, [X0+96]
	044 Move TEMP, X8
	045 And TEMP, TEMP, 2
	046 Compare TEMP, 2
	047 JumpIfEqual {223}
	048 Move X1, X31
	049 Call NetworkObject.get_HasStateAuthority, X0
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {223}
	054 Move X0, X19
	055 Call ItemSellingMachineController.get__timerItemSell, X0
	056 Move [X31+88], W0
	057 Move X1, [X19+56]
	058 Add X0, X31, 88
	059 Move X2, X31
	060 Call TickTimer.Expired, X0, X1
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {72}
	065 Move X0, X31
	066 Call TickTimer.get_None
	067 And X1, X0, 0
	068 Move X0, X19
	069 Call ItemSellingMachineController.set__timerItemSell, X0, X1
	070 Move X0, X19
	071 Call ItemSellingMachineController.DespawnItemsKillPlayersAndStoreValues, X0
	072 Move X0, X19
	073 Call ItemSellingMachineController.get__timerAnimationFinished, X0
	074 Move [X31+88], W0
	075 Move X1, [X19+56]
	076 Add X0, X31, 88
	077 Move X2, X31
	078 Call TickTimer.Expired, X0, X1
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {90}
	083 Move X0, X19
	084 Call ItemSellingMachineController.OnItemSellingAnimationFinished, X0
	085 Move X0, X31
	086 Call TickTimer.get_None
	087 And X1, X0, 0
	088 Move X0, X19
	089 Call ItemSellingMachineController.set__timerAnimationFinished, X0, X1
	090 Move X0, X19
	091 Call ItemSellingMachineController.get__timerRecoverExplosion, X0
	092 Move [X31+88], W0
	093 Move X1, [X19+56]
	094 Add X0, X31, 88
	095 Move X2, X31
	096 Call TickTimer.Expired, X0, X1
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {108}
	101 Move X0, X19
	102 Call ItemSellingMachineController.RPC_RecoverExplosion, X0
	103 Move X0, X31
	104 Call TickTimer.get_None
	105 And X1, X0, 0
	106 Move X0, X19
	107 Call ItemSellingMachineController.set__timerRecoverExplosion, X0, X1
	108 Move X0, X19
	109 Call ItemSellingMachineController.get_isSellingInProgress, X0
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfEqual {192}
	114 Move X0, X19
	115 Call ItemSellingMachineController.get_isExploded, X0
	116 Move TEMP, X0
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfEqual {192}
	120 Move X21, 0x231F000
	121 Move X22, 0x231F000
	122 Move X23, 0x231F000
	123 Move X24, 0x231F000
	124 Move X21, [X21+2624]
	125 Move X22, [X22+2640]
	126 Move X23, [X23+2296]
	127 Move X24, [X24+2288]
	128 Move W20, W31
	129 Add X8, X31, 8
	130 Move X0, X19
	131 Call ItemSellingMachineController.get_isButtonPressed, X0
	132 NotImplemented "Instruction LDUR not yet implemented."
	133 Move X8, [X31+24]
	134 Move X2, [X21]
	135 Add X0, X31, 64
	136 Move W1, W20
	137 Move [X31+4], V0
	138 Move [X31+80], X8
	139 Call 0x240BCF4, X0, X1
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfNotEqual {190}
	144 Add X8, X31, 8
	145 Move X0, X19
	146 Call ItemSellingMachineController.get__timerResetButton, X0
	147 NotImplemented "Instruction LDUR not yet implemented."
	148 Move X8, [X31+24]
	149 Move X2, [X22]
	150 Add X0, X31, 32
	151 Move W1, W20
	152 Move [X31+2], V0
	153 Move [X31+48], X8
	154 Call NetworkArray`1<TickTimer>.get_Item, X0, X1
	155 Move [X31+88], W0
	156 Move X1, [X19+56]
	157 Add X0, X31, 88
	158 Move X2, X31
	159 Call TickTimer.Expired, X0, X1
	160 Move TEMP, X0
	161 And TEMP, TEMP, 1
	162 Compare TEMP, 1
	163 JumpIfNotEqual {190}
	164 Add X8, X31, 8
	165 Move X0, X19
	166 Call ItemSellingMachineController.get_isButtonPressed, X0
	167 NotImplemented "Instruction LDUR not yet implemented."
	168 Move X8, [X31+24]
	169 Move X3, [X23]
	170 Add X0, X31, 64
	171 Move W1, W20
	172 Move W2, W31
	173 Move [X31+4], V0
	174 Move [X31+80], X8
	175 Call 0x240C0B0, X0, X1, X2
	176 Add X8, X31, 8
	177 Move X0, X19
	178 Call ItemSellingMachineController.get__timerResetButton, X0
	179 NotImplemented "Instruction LDUR not yet implemented."
	180 Move X8, [X31+24]
	181 Move X0, X31
	182 Move [X31+2], V0
	183 Move [X31+48], X8
	184 Call TickTimer.get_None
	185 Move X3, [X24]
	186 And X2, X0, 0
	187 Add X0, X31, 32
	188 Move W1, W20
	189 Call NetworkArray`1<TickTimer>.Set, X0, X1, X2
	190 Add W20, W20, 1
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move X0, X19
	193 Call ItemSellingMachineController.get_heatMeter, X0
	194 NotImplemented "Instruction FCMP not yet implemented."
	195 Move X0, X19
	196 Call ItemSellingMachineController.get_heatMeter, X0
	197 Move X0, X19
	198 Move V8, V0
	199 Call ItemSellingMachineController.get_isOverheated, X0
	200 Compare X19, 0
	201 JumpIfEqual {233}
	202 Move X8, -19853312
	203 Move V0, [X8+272]
	204 Move W8, 0x42480000
	205 And W31, W0, 1
	206 Move S1, W8
	207 NotImplemented "Instruction FCSEL not yet implemented."
	208 NotImplemented "Instruction FCMP not yet implemented."
	209 NotImplemented "Instruction CSET not yet implemented."
	210 Move X0, X19
	211 Call ItemSellingMachineController.set_isOverheated, X0, X1
	212 Move X0, X19
	213 Call ItemSellingMachineController.get_heatMeter, X0
	214 Move X0, [X19+56]
	215 Compare X0, 0
	216 JumpIfEqual {233}
	217 Move X1, X31
	218 Move V8, V0
	219 Call NetworkRunner.get_DeltaTime, X0
	220 Subtract S0, S8, S0
	221 Move X0, X19
	222 Call ItemSellingMachineController.set_heatMeter, X0, V0
	223 Move X20, [X31+144]
	224 Move X19, [X31+152]
	225 Move X22, [X31+128]
	226 Move X21, [X31+136]
	227 Move X24, [X31+112]
	228 Move X23, [X31+120]
	229 Move X30, [X31+104]
	230 Move V8, [X31+96]
	231 Add X31, X31, 160
	232 Return 
	233 Call 0x1C17F20

Method: System.Void RPC_StartItemSelling(System.Single randomWaitTime)

Disassembly:
	0x01DDB4D0 MOV X0, X19
	0x01DDB4D4 BL 0x1DD8D74
	0x01DDB4D8 LDRB W1, [X19 + 0x81]
	0x01DDB4DC MOV X0, X19
	0x01DDB4E0 BL 0x1DD8E40
	0x01DDB4E4 LDRB W1, [X19 + 0x82]
	0x01DDB4E8 MOV X0, X19
	0x01DDB4EC BL 0x1DD8F0C
	0x01DDB4F0 LDR W1, [X19 + 0x84]
	0x01DDB4F4 MOV X0, X19
	0x01DDB4F8 BL 0x1DD8FD0
	0x01DDB4FC ADD X8, X31, 0x40
	0x01DDB500 MOV X0, X19
	0x01DDB504 BL 0x1DD9030
	0x01DDB508 LDR V0, [X31 + 0x4]
	0x01DDB50C LDR X8, [X31 + 0x50]
	0x01DDB510 LDR X0, [X20]
	0x01DDB514 STR V0, [X31 + 0x2]
	0x01DDB518 STR X8, [X31 + 0x30]
	0x01DDB51C LDR W8, [X0 + 0xE0]
	0x01DDB520 LDR X20, [X19 + 0x88]
	0x01DDB524 CBNZ W8, 0x1DDB52C
	0x01DDB528 BL 0x1C16DFC
	0x01DDB52C LDR X2, [X23]
	0x01DDB530 LDR V0, [X31 + 0x2]
	0x01DDB534 LDR X8, [X31 + 0x30]
	0x01DDB538 LDR X3, [X24]
	0x01DDB53C ADD X0, X31, 0x40
	0x01DDB540 MOV X1, X20
	0x01DDB544 STR V0, [X31 + 0x4]
	0x01DDB548 STR X8, [X31 + 0x50]
	0x01DDB54C BL 0x2228F44
	0x01DDB550 ADD X8, X31, 0x40
	0x01DDB554 MOV X0, X19
	0x01DDB558 BL 0x1DD90E8
	0x01DDB55C LDR X8, [X31 + 0x50]
	0x01DDB560 LDR V0, [X31 + 0x4]
	0x01DDB564 LDR X2, [X22]
	0x01DDB568 LDR X3, [X21]
	0x01DDB56C STR X8, [X31 + 0x10]
	0x01DDB570 STR V0, [X31]
	0x01DDB574 LDR X1, [X19 + 0x90]
	0x01DDB578 ADD X0, X31, 0x40
	0x01DDB57C STR V0, [X31 + 0x4]
	0x01DDB580 STR X8, [X31 + 0x50]
	0x01DDB584 BL 0x2229094
	0x01DDB588 LDR W1, [X19 + 0x98]
	0x01DDB58C MOV X0, X19
	0x01DDB590 BL 0x1DD9200
	0x01DDB594 LDR W1, [X19 + 0x9C]
	0x01DDB598 MOV X0, X19
	0x01DDB59C BL 0x1DD92C0
	0x01DDB5A0 LDR W1, [X19 + 0xA0]
	0x01DDB5A4 MOV X0, X19
	0x01DDB5A8 BL 0x1DD9380
	0x01DDB5AC LDR W1, [X19 + 0xA4]
	0x01DDB5B0 MOV X0, X19
	0x01DDB5B4 BL 0x1DD9440
	0x01DDB5B8 LDR V0, [X19 + 0xA8]
	0x01DDB5BC MOV X0, X19
	0x01DDB5C0 BL 0x1DD9500
	0x01DDB5C4 LDP X20, X19, [X31 + 0x90]
	0x01DDB5C8 LDP X22, X21, [X31 + 0x80]
	0x01DDB5CC LDP X24, X23, [X31 + 0x70]
	0x01DDB5D0 LDR X30, [X31 + 0x60]
	0x01DDB5D4 ADD X31, X31, 0xA0
	0x01DDB5D8 RET
	0x01DDB5DC SUB X31, X31, 0x90
	0x01DDB5E0 STR X30, [X31 + 0x60]
	0x01DDB5E4 STP X22, X21, [X31 + 0x70]
	0x01DDB5E8 STP X20, X19, [X31 + 0x80]
	0x01DDB5EC ADRP X20, 0x25FD000
	0x01DDB5F0 ADRP X21, 0x231B000
	0x01DDB5F4 LDRB W8, [X20 + 0xC60]
	0x01DDB5F8 LDR X21, [X21 + 0xA78]
	0x01DDB5FC MOV X19, X0
	0x01DDB600 TBNZ X8, 0x0, 0x1DDB630
	0x01DDB604 ADRP X0, 0x231D000
	0x01DDB608 LDR X0, [X0 + 0xAD0]
	0x01DDB60C BL 0x1C16CF4
	0x01DDB610 ADRP X0, 0x231D000
	0x01DDB614 LDR X0, [X0 + 0xAD8]
	0x01DDB618 BL 0x1C16CF4
	0x01DDB61C ADRP X0, 0x231B000
	0x01DDB620 LDR X0, [X0 + 0xA78]
	0x01DDB624 BL 0x1C16CF4
	0x01DDB628 MOVZ W8, 0x1
	0x01DDB62C STRB W8, [X20 + 0xC60]
	0x01DDB630 ADRP X22, 0x231D000
	0x01DDB634 ADRP X20, 0x231D000
	0x01DDB638 LDR X22, [X22 + 0xAD0]
	0x01DDB63C LDR X20, [X20 + 0xAD8]
	0x01DDB640 MOV X0, X19
	0x01DDB644 BL 0x1DD8D0C
	0x01DDB648 AND W8, W0, 0x1
	0x01DDB64C MOV X0, X19
	0x01DDB650 STRB W8, [X19 + 0x80]
	0x01DDB654 BL 0x1DD8DD8
	0x01DDB658 AND W8, W0, 0x1
	0x01DDB65C MOV X0, X19
	0x01DDB660 STRB W8, [X19 + 0x81]
	0x01DDB664 BL 0x1DD8EA4
	0x01DDB668 AND W8, W0, 0x1
	0x01DDB66C MOV X0, X19
	0x01DDB670 STRB W8, [X19 + 0x82]
	0x01DDB674 BL 0x1DD8F70
	0x01DDB678 STR W0, [X19 + 0x84]
	0x01DDB67C ADD X8, X31, 0x40
	0x01DDB680 MOV X0, X19
	0x01DDB684 BL 0x1DD9030
	0x01DDB688 LDR V0, [X31 + 0x4]
	0x01DDB68C LDR X8, [X31 + 0x50]
	0x01DDB690 LDR X0, [X21]
	0x01DDB694 STR V0, [X31 + 0x2]
	0x01DDB698 STR X8, [X31 + 0x30]
	0x01DDB69C LDR W8, [X0 + 0xE0]
	0x01DDB6A0 CBNZ W8, 0x1DDB6A8
	0x01DDB6A4 BL 0x1C16DFC
	0x01DDB6A8 LDR V0, [X31 + 0x2]
	0x01DDB6AC LDR X8, [X31 + 0x30]
	0x01DDB6B0 LDR X2, [X22]
	0x01DDB6B4 ADD X1, X19, 0x88
	0x01DDB6B8 ADD X0, X31, 0x40
	0x01DDB6BC STR V0, [X31 + 0x4]
	0x01DDB6C0 STR X8, [X31 + 0x50]
	0x01DDB6C4 BL 0x2227DF8
	0x01DDB6C8 ADD X8, X31, 0x40
	0x01DDB6CC MOV X0, X19
	0x01DDB6D0 BL 0x1DD90E8
	0x01DDB6D4 LDR X8, [X31 + 0x50]
	0x01DDB6D8 LDR V0, [X31 + 0x4]
	0x01DDB6DC LDR X2, [X20]
	0x01DDB6E0 ADD X1, X19, 0x90
	0x01DDB6E4 ADD X0, X31, 0x40
	0x01DDB6E8 STR X8, [X31 + 0x10]
	0x01DDB6EC STR V0, [X31]
	0x01DDB6F0 STR V0, [X31 + 0x4]
	0x01DDB6F4 STR X8, [X31 + 0x50]
	0x01DDB6F8 BL 0x22280A4
	0x01DDB6FC MOV X0, X19
	0x01DDB700 BL 0x1DD91A0
	0x01DDB704 STR W0, [X19 + 0x98]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], D8
	003 Move [X31+80], X30
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X20, 0x25FE000
	008 Move W8, [X20+3158]
	009 Move V8, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x231E000
	016 Move X0, [X0+2288]
	017 Call 0x1C17CF4
	018 Move X0, 0x231C000
	019 Move X0, [X0+2680]
	020 Call 0x1C17CF4
	021 Move X0, 0x231E000
	022 Move X0, [X0+2672]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3158], W8
	026 Move [X31+32], X31
	027 Move [X31+40], X31
	028 Move [X31+48], X31
	029 Move W8, [X19+88]
	030 Compare W8, 0
	031 JumpIfEqual {82}
	032 Move [X19+88], W31
	033 Move X0, [X19+64]
	034 Compare X0, 0
	035 JumpIfEqual {69}
	036 Move W8, [X0+96]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 2
	039 Compare TEMP, 2
	040 JumpIfEqual {69}
	041 Move X1, X31
	042 Call NetworkObject.get_HasStateAuthority, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {69}
	047 Move W1, 1
	048 Move X0, X19
	049 Call ItemSellingMachineController.set_isSellingInProgress, X0, X1
	050 Move X21, 0x231E000
	051 Move X21, [X21+2288]
	052 Move W20, W31
	053 Add X8, X31, 8
	054 Move X0, X19
	055 Call ItemSellingMachineController.get__timerResetButton, X0
	056 NotImplemented "Instruction LDUR not yet implemented."
	057 Move X8, [X31+24]
	058 Move X0, X31
	059 Move [X31+2], V0
	060 Move [X31+48], X8
	061 Call TickTimer.get_None
	062 Move X3, [X21]
	063 And X2, X0, 0
	064 Add X0, X31, 32
	065 Move W1, W20
	066 Call NetworkArray`1<TickTimer>.Set, X0, X1, X2
	067 Add W20, W20, 1
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X0, [X19+176]
	070 Compare X0, 0
	071 JumpIfEqual {168}
	072 Call ItemSellingMachineView.StopValueTextAnimation, X0
	073 Move X0, [X19+176]
	074 Compare X0, 0
	075 JumpIfEqual {168}
	076 Move X8, -19857408
	077 Move V0, [X8+1100]
	078 Move S1, 3
	079 Move S2, 1
	080 Move V3, V8
	081 Call ItemSellingMachineView.PlayItemSellAnimation, X0, V0, V1, V2, V3
	082 Move X20, 0x231C000
	083 Move X20, [X20+2680]
	084 Move X0, [X20]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move X0, X19
	090 Move X1, X31
	091 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	092 Move X0, [X19+56]
	093 Compare X0, 0
	094 JumpIfEqual {168}
	095 Move X1, X31
	096 Call NetworkRunner.get_Stage, X0
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X0, [X19+64]
	099 Compare X0, 0
	100 JumpIfEqual {168}
	101 Move X1, X31
	102 Call NetworkObject.GetLocalAuthorityMask, X0
	103 And W31, W0, 7
	104 Move X8, [X19+56]
	105 Compare X8, 0
	106 JumpIfEqual {168}
	107 Move X0, [X8+80]
	108 Compare X0, 0
	109 JumpIfEqual {168}
	110 Move X1, X31
	111 Call Simulation.HasAnyActiveConnections, X0
	112 Move TEMP, X0
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {33}
	116 Move X8, [X19+56]
	117 Compare X8, 0
	118 JumpIfEqual {168}
	119 Move X0, [X8+80]
	120 Move W1, 12
	121 Move X2, X31
	122 Call SimulationMessage.Allocate, X0, X1
	123 Move X8, [X19+64]
	124 Compare X8, 0
	125 JumpIfEqual {168}
	126 Move X8, [X8+32]
	127 Move X20, X0
	128 Compare X8, 0
	129 JumpIfEqual {151}
	130 Move W0, [X8]
	131 Move X0, [X20]
	132 Move X19, [X19+64]
	133 Move W8, [X0+224]
	134 Compare W8, 0
	135 JumpIfNotEqual {137}
	136 Call 0x1C17DFC
	137 Move X8, 0x231E000
	138 Move X8, [X8+2672]
	139 Move W2, 7
	140 Move X1, X19
	141 Move X3, X31
	142 Move X0, [X8]
	143 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	144 Move X20, [X31+96]
	145 Move X19, [X31+104]
	146 Move X30, [X31+80]
	147 Move X21, [X31+88]
	148 Move V8, [X31+64]
	149 Add X31, X31, 112
	150 Return 
	151 Move X0, X31
	152 Move W1, [X19+104]
	153 Move W2, 1
	154 Move X3, X31
	155 Call RpcHeader.Create, X0, X1, X2
	156 Move [X20+28], X0
	157 Move [X20+36], S8
	158 Compare X20, 0
	159 JumpIfEqual {168}
	160 Move W8, 96
	161 Move [X20+12], W8
	162 Move X0, [X19+56]
	163 Compare X0, 0
	164 JumpIfEqual {168}
	165 Move X1, X20
	166 Move X2, X31
	167 Call NetworkRunner.SendRpc, X0, X1
	168 Call 0x1C17F20

Method: System.Int32 SellItem(AnimalCompany.GrabbableItem grabbableItem)

Disassembly:
	0x01DDB814 MOVZ W8, 0x1
	0x01DDB818 STRB W8, [X19 + 0x58]
	0x01DDB81C LDR X8, [X19]
	0x01DDB820 LDR X1, [X9]
	0x01DDB824 LDRB W10, [X8 + 0x130]
	0x01DDB828 LDRB W9, [X1 + 0x130]
	0x01DDB82C CMP W10, W9
	0x01DDB830 B.CC 0x1DDB858
	0x01DDB834 LDR X8, [X8 + 0xC8]
	0x01DDB838 ADD X8, X8, X9, 0x3, LSL
	0x01DDB83C LDUR X8, [X8 - 0x8]
	0x01DDB840 CMP X8, X1
	0x01DDB844 B.NE 0x1DDB858
	0x01DDB848 MOV X0, X19
	0x01DDB84C LDP X20, X19, [X31 + 0x10]
	0x01DDB850 LDR X30, [X31], #0x20
	0x01DDB854 B 0x1DDAF78
	0x01DDB858 MOV X0, X19
	0x01DDB85C BL 0x1C171E0
	0x01DDB860 BL 0x1C16F20
	0x01DDB864 STR X30, [X31 - 0x20]!
	0x01DDB868 STP X20, X19, [X31 + 0x10]
	0x01DDB86C ADRP X20, 0x25FD000
	0x01DDB870 LDRB W8, [X20 + 0xC63]
	0x01DDB874 MOV X19, X0
	0x01DDB878 TBNZ X8, 0x0, 0x1DDB890
	0x01DDB87C ADRP X0, 0x231D000
	0x01DDB880 LDR X0, [X0 + 0xA38]
	0x01DDB884 BL 0x1C16CF4
	0x01DDB888 MOVZ W8, 0x1
	0x01DDB88C STRB W8, [X20 + 0xC63]
	0x01DDB890 CBZ X19, 0x1DDB8E8
	0x01DDB894 ADRP X9, 0x231D000
	0x01DDB898 LDR X9, [X9 + 0xA38]
	0x01DDB89C MOVZ W8, 0x1
	0x01DDB8A0 STRB W8, [X19 + 0x58]
	0x01DDB8A4 LDR X8, [X19]
	0x01DDB8A8 LDR X1, [X9]
	0x01DDB8AC LDRB W10, [X8 + 0x130]
	0x01DDB8B0 LDRB W9, [X1 + 0x130]
	0x01DDB8B4 CMP W10, W9
	0x01DDB8B8 B.CC 0x1DDB8E0
	0x01DDB8BC LDR X8, [X8 + 0xC8]
	0x01DDB8C0 ADD X8, X8, X9, 0x3, LSL
	0x01DDB8C4 LDUR X8, [X8 - 0x8]
	0x01DDB8C8 CMP X8, X1
	0x01DDB8CC B.NE 0x1DDB8E0
	0x01DDB8D0 MOV X0, X19
	0x01DDB8D4 LDP X20, X19, [X31 + 0x10]
	0x01DDB8D8 LDR X30, [X31], #0x20
	0x01DDB8DC B 0x1DDA300
	0x01DDB8E0 MOV X0, X19
	0x01DDB8E4 BL 0x1C171E0
	0x01DDB8E8 BL 0x1C16F20
	0x01DDB8EC STP X30, X21, [X31 - 0x20]!
	0x01DDB8F0 STP X20, X19, [X31 + 0x10]
	0x01DDB8F4 ADRP X21, 0x25FD000
	0x01DDB8F8 LDRB W8, [X21 + 0xC64]
	0x01DDB8FC MOV X20, X1
	0x01DDB900 MOV X19, X0
	0x01DDB904 TBNZ X8, 0x0, 0x1DDB91C
	0x01DDB908 ADRP X0, 0x231D000
	0x01DDB90C LDR X0, [X0 + 0xA38]
	0x01DDB910 BL 0x1C16CF4
	0x01DDB914 MOVZ W8, 0x1
	0x01DDB918 STRB W8, [X21 + 0xC64]
	0x01DDB91C CBZ X19, 0x1DDB97C
	0x01DDB920 ADRP X8, 0x231D000
	0x01DDB924 LDR X8, [X8 + 0xA38]
	0x01DDB928 MOVZ W9, 0x1
	0x01DDB92C LDR W1, [X20 + 0x24]
	0x01DDB930 STRB W9, [X19 + 0x58]
	0x01DDB934 LDR X9, [X19]
	0x01DDB938 LDR X8, [X8]
	0x01DDB93C LDRB W11, [X9 + 0x130]
	0x01DDB940 LDRB W10, [X8 + 0x130]
	0x01DDB944 CMP W11, W10
	0x01DDB948 B.CC 0x1DDB970
	0x01DDB94C LDR X9, [X9 + 0xC8]
	0x01DDB950 ADD X9, X9, X10, 0x3, LSL
	0x01DDB954 LDUR X9, [X9 - 0x8]
	0x01DDB958 CMP X9, X8
	0x01DDB95C B.NE 0x1DDB970
	0x01DDB960 MOV X0, X19
	0x01DDB964 LDP X20, X19, [X31 + 0x10]
	0x01DDB968 LDP X30, X21, [X31], #0x20
	0x01DDB96C B 0x1DDAC58
	0x01DDB970 MOV X0, X19
	0x01DDB974 MOV X1, X8
	0x01DDB978 BL 0x1C171E0
	0x01DDB97C BL 0x1C16F20
	0x01DDB980 STP X30, X21, [X31 - 0x20]!
	0x01DDB984 STP X20, X19, [X31 + 0x10]
	0x01DDB988 ADRP X21, 0x25FD000
	0x01DDB98C LDRB W8, [X21 + 0xC65]
	0x01DDB990 MOV X20, X1
	0x01DDB994 MOV X19, X0
	0x01DDB998 TBNZ X8, 0x0, 0x1DDB9B0
	0x01DDB99C ADRP X0, 0x231D000
	0x01DDB9A0 LDR X0, [X0 + 0xA38]
	0x01DDB9A4 BL 0x1C16CF4
	0x01DDB9A8 MOVZ W8, 0x1
	0x01DDB9AC STRB W8, [X21 + 0xC65]
	0x01DDB9B0 CBZ X19, 0x1DDBA10
	0x01DDB9B4 ADRP X8, 0x231D000
	0x01DDB9B8 LDR X8, [X8 + 0xA38]
	0x01DDB9BC MOVZ W9, 0x1
	0x01DDB9C0 LDR W1, [X20 + 0x24]
	0x01DDB9C4 STRB W9, [X19 + 0x58]
	0x01DDB9C8 LDR X9, [X19]
	0x01DDB9CC LDR X8, [X8]
	0x01DDB9D0 LDRB W11, [X9 + 0x130]
	0x01DDB9D4 LDRB W10, [X8 + 0x130]
	0x01DDB9D8 CMP W11, W10
	0x01DDB9DC B.CC 0x1DDBA04
	0x01DDB9E0 LDR X9, [X9 + 0xC8]
	0x01DDB9E4 ADD X9, X9, X10, 0x3, LSL
	0x01DDB9E8 LDUR X9, [X9 - 0x8]
	0x01DDB9EC CMP X9, X8
	0x01DDB9F0 B.NE 0x1DDBA04
	0x01DDB9F4 MOV X0, X19
	0x01DDB9F8 LDP X20, X19, [X31 + 0x10]
	0x01DDB9FC LDP X30, X21, [X31], #0x20
	0x01DDBA00 B 0x1DD81E8
	0x01DDBA04 MOV X0, X19
	0x01DDBA08 MOV X1, X8
	0x01DDBA0C BL 0x1C171E0
	0x01DDBA10 BL 0x1C16F20
	0x01DDBA14 LDR X8, [X0 + 0x98]
	0x01DDBA18 CMP X8, 0x0
	0x01DDBA1C CSET W0, NE
	0x01DDBA20 RET
	0x01DDBA24 STP X29, X30, [X31 - 0x60]!
	0x01DDBA28 STP X28, X27, [X31 + 0x10]
	0x01DDBA2C STP X26, X25, [X31 + 0x20]
	0x01DDBA30 STP X24, X23, [X31 + 0x30]
	0x01DDBA34 STP X22, X21, [X31 + 0x40]
	0x01DDBA38 STP X20, X19, [X31 + 0x50]
	0x01DDBA3C ADRP X20, 0x25FD000
	0x01DDBA40 LDRB W8, [X20 + 0xC66]
	0x01DDBA44 MOV X19, X0
	0x01DDBA48 TBNZ X8, 0x0, 0x1DDBAA8
	0x01DDBA4C ADRP X0, 0x231A000
	0x01DDBA50 LDR X0, [X0 + 0x6D0]
	0x01DDBA54 BL 0x1C16CF4
	0x01DDBA58 ADRP X0, 0x231D000
	0x01DDBA5C LDR X0, [X0 + 0x140]
	0x01DDBA60 BL 0x1C16CF4
	0x01DDBA64 ADRP X0, 0x231D000
	0x01DDBA68 LDR X0, [X0 + 0xAE0]
	0x01DDBA6C BL 0x1C16CF4
	0x01DDBA70 ADRP X0, 0x231D000
	0x01DDBA74 LDR X0, [X0 + 0xAE8]
	0x01DDBA78 BL 0x1C16CF4
	0x01DDBA7C ADRP X0, 0x231D000
	0x01DDBA80 LDR X0, [X0 + 0xAF0]
	0x01DDBA84 BL 0x1C16CF4
	0x01DDBA88 ADRP X0, 0x231D000
	0x01DDBA8C LDR X0, [X0 + 0xAF8]
	0x01DDBA90 BL 0x1C16CF4
	0x01DDBA94 ADRP X0, 0x231D000
	0x01DDBA98 LDR X0, [X0 + 0xA48]
	0x01DDBA9C BL 0x1C16CF4
	0x01DDBAA0 MOVZ W8, 0x1
	0x01DDBAA4 STRB W8, [X20 + 0xC66]
	0x01DDBAA8 LDR X8, [X19 + 0x78]
	0x01DDBAAC CBZ X8, 0x1DDBD78
	0x01DDBAB0 ADRP X20, 0x231D000
	0x01DDBAB4 ADRP X24, 0x231A000
	0x01DDBAB8 ADRP X25, 0x231D000
	0x01DDBABC ADRP X26, 0x231D000
	0x01DDBAC0 ADRP X27, 0x231D000
	0x01DDBAC4 ADRP X23, 0x231D000
	0x01DDBAC8 ADRP X22, 0x231D000
	0x01DDBACC LDR X20, [X20 + 0xAE0]
	0x01DDBAD0 LDR X24, [X24 + 0x6D0]
	0x01DDBAD4 LDR X25, [X25 + 0xAF8]
	0x01DDBAD8 LDR X26, [X26 + 0xAF0]
	0x01DDBADC LDR X27, [X27 + 0xAE8]
	0x01DDBAE0 LDR X23, [X23 + 0x140]
	0x01DDBAE4 LDR X22, [X22 + 0xA48]
	0x01DDBAE8 MOVZ W21, 0x4
	0x01DDBAEC LDR W9, [X8 + 0x18]
	0x01DDBAF0 SUB X28, X21, 0x4
	0x01DDBAF4 CMP W28, W9
	0x01DDBAF8 B.GE 0x1DDBB50
	0x01DDBAFC CMP W28, W9
	0x01DDBB00 B.CS 0x1DDBD98
	0x01DDBB04 LDR X0, [X8, X21, LSL #3]
	0x01DDBB08 CBZ X0, 0x1DDBD78
	0x01DDBB0C MOV W1, W31
	0x01DDBB10 MOV X2, X31
	0x01DDBB14 BL 0x3C32410
	0x01DDBB18 LDR X8, [X19 + 0x80]
	0x01DDBB1C CBZ X8, 0x1DDBD78
	0x01DDBB20 LDR W9, [X8 + 0x18]
	0x01DDBB24 CMP W28, W9
	0x01DDBB28 B.CS 0x1DDBD98
	0x01DDBB2C LDR X0, [X8, X21, LSL #3]
	0x01DDBB30 CBZ X0, 0x1DDBD78
	0x01DDBB34 MOV W1, W31
	0x01DDBB38 MOV X2, X31
	0x01DDBB3C BL 0x3C13034
	0x01DDBB40 LDR X8, [X19 + 0x78]
	0x01DDBB44 ADD X21, X21, 0x1
	0x01DDBB48 CBNZ X8, 0x1DDBAEC
	0x01DDBB4C B 0x1DDBD78
	0x01DDBB50 LDR X21, [X19 + 0x48]
	0x01DDBB54 CBZ X21, 0x1DDBD78
	0x01DDBB58 LDR W8, [X21 + 0x18]
	0x01DDBB5C CMP W8, 0x1
	0x01DDBB60 B.LT 0x1DDBB98
	0x01DDBB64 MOV W28, W31
	0x01DDBB68 CMP W28, W8
	0x01DDBB6C B.CS 0x1DDBD98
	0x01DDBB70 ADD X8, X21, W28, 0x3, SXTW
	0x01DDBB74 LDR X0, [X8 + 0x20]
	0x01DDBB78 CBZ X0, 0x1DDBD78
	0x01DDBB7C MOV W1, W31
	0x01DDBB80 MOV X2, X31
	0x01DDBB84 BL 0x3C32410
	0x01DDBB88 LDR W8, [X21 + 0x18]
	0x01DDBB8C ADD W28, W28, 0x1
	0x01DDBB90 CMP W28, W8
	0x01DDBB94 B.LT 0x1DDBB68
	0x01DDBB98 LDR X8, [X19 + 0x28]
	0x01DDBB9C CBZ X8, 0x1DDBD78
	0x01DDBBA0 LDR X0, [X20]
	0x01DDBBA4 LDR W1, [X8 + 0x18]
	0x01DDBBA8 BL 0x1C16D6C
	0x01DDBBAC LDR X8, [X19 + 0x28]
	0x01DDBBB0 STR X0, [X19 + 0x88]
	0x01DDBBB4 CBZ X8, 0x1DDBD78
	0x01DDBBB8 MOV X28, X31
	0x01DDBBBC LDRSW X8, [X8 + 0x18]
	0x01DDBBC0 CMP X28, X8
	0x01DDBBC4 B.GE 0x1DDBCC0
	0x01DDBBC8 LDR X8, [X19 + 0x88]
	0x01DDBBCC CBZ X8, 0x1DDBD78
	0x01DDBBD0 LDR W9, [X8 + 0x18]
	0x01DDBBD4 CMP X28, X9
	0x01DDBBD8 B.CS 0x1DDBD98
	0x01DDBBDC ADD X8, X8, X28, 0x3, LSL
	0x01DDBBE0 STR X31, [X8 + 0x20]
	0x01DDBBE4 LDR X8, [X19 + 0x28]
	0x01DDBBE8 CBZ X8, 0x1DDBD78
	0x01DDBBEC LDR W9, [X8 + 0x18]
	0x01DDBBF0 CMP X28, X9
	0x01DDBBF4 B.CS 0x1DDBD98
	0x01DDBBF8 ADD X8, X8, X28, 0x3, LSL
	0x01DDBBFC LDR X29, [X8 + 0x20]
	0x01DDBC00 CMP W28, 0x2
	0x01DDBC04 B.EQ 0x1DDBC2C
	0x01DDBC08 CMP W28, 0x1
	0x01DDBC0C B.EQ 0x1DDBC44
	0x01DDBC10 CBNZ W28, 0x1DDBCB0
	0x01DDBC14 CBZ X29, 0x1DDBD78
	0x01DDBC18 LDR X0, [X24]
	0x01DDBC1C LDR X20, [X29 + 0x20]
	0x01DDBC20 BL 0x1C16F10
	0x01DDBC24 LDR X2, [X27]
	0x01DDBC28 B 0x1DDBC58
	0x01DDBC2C CBZ X29, 0x1DDBD78
	0x01DDBC30 LDR X0, [X24]
	0x01DDBC34 LDR X20, [X29 + 0x20]
	0x01DDBC38 BL 0x1C16F10
	0x01DDBC3C LDR X2, [X25]
	0x01DDBC40 B 0x1DDBC58
	0x01DDBC44 CBZ X29, 0x1DDBD78
	0x01DDBC48 LDR X0, [X24]
	0x01DDBC4C LDR X20, [X29 + 0x20]
	0x01DDBC50 BL 0x1C16F10
	0x01DDBC54 LDR X2, [X26]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+128], X30
	003 Move [X31+144], X24
	004 Move [X31+152], X23
	005 Move [X31+160], X22
	006 Move [X31+168], X21
	007 Move [X31+176], X20
	008 Move [X31+184], X19
	009 Move X21, 0x25FE000
	010 Move W8, [X21+3159]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {70}
	017 Move X0, 0x2319000
	018 Move X0, [X0+2896]
	019 Call 0x1C17CF4
	020 Move X0, 0x231E000
	021 Move X0, [X0+2680]
	022 Call 0x1C17CF4
	023 Move X0, 0x231D000
	024 Move X0, [X0+1088]
	025 Call 0x1C17CF4
	026 Move X0, 0x231D000
	027 Move X0, [X0+1096]
	028 Call 0x1C17CF4
	029 Move X0, 0x231D000
	030 Move X0, [X0+1104]
	031 Call 0x1C17CF4
	032 Move X0, 0x231C000
	033 Move X0, [X0+3584]
	034 Call 0x1C17CF4
	035 Move X0, 0x231E000
	036 Move X0, [X0+2688]
	037 Call 0x1C17CF4
	038 Move X0, 0x2319000
	039 Move X0, [X0+1880]
	040 Call 0x1C17CF4
	041 Move X0, 0x231D000
	042 Move X0, [X0+1112]
	043 Call 0x1C17CF4
	044 Move X0, 0x231D000
	045 Move X0, [X0+328]
	046 Call 0x1C17CF4
	047 Move X0, 0x231D000
	048 Move X0, [X0+352]
	049 Call 0x1C17CF4
	050 Move X0, 0x231D000
	051 Move X0, [X0+360]
	052 Call 0x1C17CF4
	053 Move X0, 0x231D000
	054 Move X0, [X0+368]
	055 Call 0x1C17CF4
	056 Move X0, 0x231E000
	057 Move X0, [X0+2696]
	058 Call 0x1C17CF4
	059 Move X0, 0x231D000
	060 Move X0, [X0+384]
	061 Call 0x1C17CF4
	062 Move X0, 0x231C000
	063 Move X0, [X0+3440]
	064 Call 0x1C17CF4
	065 Move X0, 0x231E000
	066 Move X0, [X0+2704]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X21+3159], W8
	070 Move [X31+136], X31
	071 Move [X31+96], X31
	072 Move [X31+104], X31
	073 Move [X31+112], X31
	074 Compare X19, 0
	075 JumpIfEqual {281}
	076 Move X8, [X19+128]
	077 Compare X8, 0
	078 JumpIfEqual {281}
	079 Move W8, [X8+40]
	080 Move TEMP, X8
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfEqual {96}
	084 Move X0, [X20+232]
	085 Compare X0, 0
	086 JumpIfEqual {281}
	087 Move X8, 0x231E000
	088 Move X8, [X8+2688]
	089 Move X1, X19
	090 Move X2, [X8]
	091 Call HashSet`1<Object>.Contains, X0, X1
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {97}
	096 Move W21, W31
	097 Move X8, 0x231C000
	098 Move X8, [X8+3440]
	099 Move X0, X19
	100 Move X2, X31
	101 Move X1, [X8]
	102 Call Component.CompareTag, X0, X1
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {163}
	107 Move X8, 0x231E000
	108 Move X8, [X8+2680]
	109 Add X1, X31, 136
	110 Move X0, X19
	111 Move X2, [X8]
	112 Call 0x21A5990, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfNotEqual {163}
	117 Move X0, [X31+136]
	118 Compare X0, 0
	119 JumpIfEqual {281}
	120 Move X1, X31
	121 Call InventoryBag.GetContainedItems, X0
	122 Move X8, [X31+136]
	123 Compare X8, 0
	124 JumpIfEqual {281}
	125 Move X21, X0
	126 Move X0, X8
	127 Move X1, X31
	128 Call InventoryBag.EmptyContents, X0
	129 Compare X21, 0
	130 JumpIfEqual {281}
	131 Move X8, 0x231D000
	132 Move X8, [X8+1112]
	133 Move X0, X21
	134 Move X1, [X8]
	135 Add X8, X31, 72
	136 Call List`1<Object>.GetEnumerator, X0
	137 NotImplemented "Instruction LDUR not yet implemented."
	138 Move X8, [X31+88]
	139 Move X22, 0x231D000
	140 Move W23, W31
	141 Move [X31+6], V0
	142 Move [X31+112], X8
	143 Move X22, [X22+1096]
	144 Move X1, [X22]
	145 Add X0, X31, 96
	146 Call Enumerator<Object>.MoveNext, X0
	147 Move TEMP, X0
	148 And TEMP, TEMP, 1
	149 Compare TEMP, 1
	150 JumpIfNotEqual {164}
	151 Move X21, [X31+112]
	152 Move X0, X19
	153 Move X1, X31
	154 Call GrabbableItem.get_isVisible, X0
	155 Move TEMP, X0
	156 And TEMP, TEMP, 1
	157 Compare TEMP, 1
	158 JumpIfNotEqual {144}
	159 Move X0, X20
	160 Move X1, X21
	161 Call ItemSellingMachineController.SellItem, X0, X1
	162 Add W23, W0, W23
	163 Move W23, W31
	164 Move X8, 0x231D000
	165 Move X8, [X8+1088]
	166 Add X0, X31, 96
	167 Move X1, [X8]
	168 Call Enumerator<Object>.Dispose, X0
	169 Move X0, [X20+232]
	170 Compare X0, 0
	171 JumpIfEqual {281}
	172 Move X8, 0x231C000
	173 Move X8, [X8+3584]
	174 Move X1, X19
	175 Move X2, [X8]
	176 Call HashSet`1<Object>.Add, X0, X1
	177 Move X21, [X19+128]
	178 Compare X21, 0
	179 JumpIfEqual {281}
	180 Move X8, 0x231D000
	181 Move W22, [X21+36]
	182 Move X8, [X8+352]
	183 Move W1, 3
	184 Move X0, [X8]
	185 Call 0x1C17D6C
	186 Move X20, X0
	187 Move X0, X21
	188 Move X1, X31
	189 Call Object.get_name, X0
	190 Move X8, 0x231D000
	191 Move X24, 0x231D000
	192 Move X8, [X8+384]
	193 Move X24, [X24+360]
	194 Move X2, X0
	195 Add X0, X31, 48
	196 Move X1, [X8]
	197 Move X3, [X24]
	198 Move [X31+48], X31
	199 Move [X31+56], X31
	200 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	201 Compare X20, 0
	202 JumpIfEqual {281}
	203 Move W8, [X20+24]
	204 Compare W8, 0
	205 JumpIfEqual {282}
	206 Move V0, [X31+3]
	207 Move X8, 0x231D000
	208 Move X8, [X8+328]
	209 Move TEMP, 0
	210 Not TEMP
	211 Move X9, TEMP
	212 Move [X20+2], V0
	213 Add X0, X31, 72
	214 Move X8, [X8]
	215 Move X1, X31
	216 Move [X31+72], X8
	217 Move [X31+80], X9
	218 Move W8, [X21+40]
	219 Move [X31+88], W8
	220 Call Enum.ToString, X0
	221 Move X8, 0x231D000
	222 Move X8, [X8+368]
	223 Move X3, [X24]
	224 Move X2, X0
	225 Add X0, X31, 32
	226 Move X1, [X8]
	227 Move [X31+32], X31
	228 Move [X31+40], X31
	229 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	230 Move W8, [X20+24]
	231 NotImplemented "Instruction CMP not yet implemented."
	232 Move V0, [X31+2]
	233 Move X9, 0x2319000
	234 Add X1, X31, 28
	235 Move [X20+3], V0
	236 Move W8, [X21+36]
	237 Move X9, [X9+1880]
	238 Move [X31+28], W8
	239 Move X0, [X9]
	240 Call 0x1C17E04
	241 Move X8, 0x231E000
	242 Move X8, [X8+2696]
	243 Move X3, [X24]
	244 Move X2, X0
	245 Add X0, X31, 0
	246 Move X1, [X8]
	247 Move [X31], X31
	248 Move [X31+8], X31
	249 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	250 Move W8, [X20+24]
	251 NotImplemented "Instruction CMP not yet implemented."
	252 Move V0, [X31]
	253 Move X8, 0x2319000
	254 Add W21, W22, W23
	255 Move [X20+4], V0
	256 Move X8, [X8+2896]
	257 Move X0, [X8]
	258 Move W8, [X0+224]
	259 Compare W8, 0
	260 JumpIfNotEqual {262}
	261 Call 0x1C17DFC
	262 Move X8, 0x231E000
	263 Move X8, [X8+2704]
	264 Move X1, X20
	265 Move X2, X31
	266 Move X0, [X8]
	267 Call Analytics.Track, X0, X1
	268 Move X0, X19
	269 Move X1, X31
	270 Call GrabbableItem.RPC_HandleItemSold, X0
	271 Move W0, W21
	272 Move X20, [X31+176]
	273 Move X19, [X31+184]
	274 Move X22, [X31+160]
	275 Move X21, [X31+168]
	276 Move X24, [X31+144]
	277 Move X23, [X31+152]
	278 Move X30, [X31+128]
	279 Add X31, X31, 192
	280 Return X0
	281 Call 0x1C17F20
	282 Call 0x1C17F28
	283 Move X21, X0
	284 NotImplemented "Instruction CMP not yet implemented."
	285 Move X0, X21
	286 Call 0x3EB2AD0
	287 Move X22, [X0]
	288 Call 0x3EB2AE0
	289 Move X8, 0x231D000
	290 Move X8, [X8+1088]
	291 Add X0, X31, 96
	292 Move X1, [X8]
	293 Call Enumerator<Object>.Dispose, X0
	294 Compare X22, 0
	295 JumpIfEqual {169}
	296 Move X0, X22
	297 Call 0x1C17F18
	298 Move X22, X31
	299 Move X21, X0
	300 Move X8, 0x231D000
	301 Move X8, [X8+1088]
	302 Move X1, [X8]
	303 Add X0, X31, 96
	304 Call Enumerator<Object>.Dispose, X0
	305 Compare X22, 0
	306 JumpIfNotEqual {309}
	307 Move X0, X21
	308 Call 0x1D2D690
	309 Move X0, X22
	310 Call 0x1C17F18
	311 Call 0x1991590

Method: System.Void DespawnItemsKillPlayersAndStoreValues()

Disassembly:
	0x01DDAEC8 ADD X8, X8, X23, 0x3, LSL
	0x01DDAECC LDR X0, [X8 + 0x20]
	0x01DDAED0 CBZ X0, 0x1DDAF58
	0x01DDAED4 MOV X1, X31
	0x01DDAED8 BL 0x3C1341C
	0x01DDAEDC LDR X8, [X24]
	0x01DDAEE0 MOV X21, X0
	0x01DDAEE4 LDR W9, [X8 + 0xE0]
	0x01DDAEE8 CBNZ W9, 0x1DDAEF8
	0x01DDAEEC MOV X0, X8
	0x01DDAEF0 BL 0x1C16DFC
	0x01DDAEF4 LDR X8, [X24]
	0x01DDAEF8 LDR X9, [X20 + 0x20]
	0x01DDAEFC CBZ X9, 0x1DDAF58
	0x01DDAF00 LDR W10, [X9 + 0x18]
	0x01DDAF04 ADD X23, X23, 0x1
	0x01DDAF08 SUB W11, W23, 0x1
	0x01DDAF0C CMP W11, W10
	0x01DDAF10 B.CS 0x1DDAF74
	0x01DDAF14 ADD X9, X9, X22
	0x01DDAF18 LDP S0, S1, [X9 + 0x20]
	0x01DDAF1C LDP S2, S3, [X9 + 0x28]
	0x01DDAF20 TBZ X19, 0x0, 0x1DDAF34
	0x01DDAF24 FMUL S0, S0, S8
	0x01DDAF28 FMUL S1, S1, S8
	0x01DDAF2C FMUL S2, S2, S8
	0x01DDAF30 FMUL S3, S3, S8
	0x01DDAF34 CBZ X21, 0x1DDAF58
	0x01DDAF38 LDR X8, [X8 + 0xB8]
	0x01DDAF3C MOV X0, X21
	0x01DDAF40 MOV X2, X31
	0x01DDAF44 ADD X22, X22, 0x10
	0x01DDAF48 LDR W1, [X8 + 0x4]
	0x01DDAF4C BL 0x3C14988
	0x01DDAF50 LDR X8, [X20 + 0x30]
	0x01DDAF54 CBNZ X8, 0x1DDAEB4
	0x01DDAF58 BL 0x1C16F20
	0x01DDAF5C LDP X20, X19, [X31 + 0x30]
	0x01DDAF60 LDP X22, X21, [X31 + 0x20]
	0x01DDAF64 LDP X24, X23, [X31 + 0x10]
	0x01DDAF68 LDR X30, [X31 + 0x8]
	0x01DDAF6C LDR V8, [X31], #0x40
	0x01DDAF70 RET
	0x01DDAF74 BL 0x1C16F28
	0x01DDAF78 SUB X31, X31, 0x80
	0x01DDAF7C STP X30, X23, [X31 + 0x50]
	0x01DDAF80 STP X22, X21, [X31 + 0x60]
	0x01DDAF84 STP X20, X19, [X31 + 0x70]
	0x01DDAF88 ADRP X20, 0x25FE000
	0x01DDAF8C LDRB W8, [X20 + 0xC59]
	0x01DDAF90 MOV X19, X0
	0x01DDAF94 TBNZ X8, 0x0, 0x1DDAFDC
	0x01DDAF98 ADRP X0, 0x231C000
	0x01DDAF9C LDR X0, [X0 + 0xA78]
	0x01DDAFA0 BL 0x1C16CF4
	0x01DDAFA4 ADRP X0, 0x231C000
	0x01DDAFA8 LDR X0, [X0 + 0xF08]
	0x01DDAFAC BL 0x1C16CF4
	0x01DDAFB0 ADRP X0, 0x231C000
	0x01DDAFB4 LDR X0, [X0 + 0xB58]
	0x01DDAFB8 BL 0x1C16CF4
	0x01DDAFBC ADRP X0, 0x231C000
	0x01DDAFC0 LDR X0, [X0 + 0xB60]
	0x01DDAFC4 BL 0x1C16CF4
	0x01DDAFC8 ADRP X0, 0x231E000
	0x01DDAFCC LDR X0, [X0 + 0xAA0]
	0x01DDAFD0 BL 0x1C16CF4
	0x01DDAFD4 MOVZ W8, 0x1
	0x01DDAFD8 STRB W8, [X20 + 0xC59]
	0x01DDAFDC LDRB W8, [X19 + 0x58]
	0x01DDAFE0 CBZ W8, 0x1DDB120
	0x01DDAFE4 STRB W31, [X19 + 0x58]
	0x01DDAFE8 LDR X0, [X19 + 0x40]
	0x01DDAFEC CBZ X0, 0x1DDB030
	0x01DDAFF0 LDRB W8, [X0 + 0x60]
	0x01DDAFF4 TBNZ X8, 0x1, 0x1DDB030
	0x01DDAFF8 MOV X1, X31
	0x01DDAFFC BL 0x1E93668
	0x01DDB000 TBZ X0, 0x0, 0x1DDB030
	0x01DDB004 FMOV S0, W31
	0x01DDB008 MOV X0, X19
	0x01DDB00C BL 0x1DD9500
	0x01DDB010 MOV X0, X19
	0x01DDB014 MOV W1, W31
	0x01DDB018 BL 0x1DD8E40
	0x01DDB01C MOVZ W1, 0x1
	0x01DDB020 MOV X0, X19
	0x01DDB024 BL 0x1DD8F0C
	0x01DDB028 MOV X0, X19
	0x01DDB02C BL 0x1DD9894
	0x01DDB030 LDR X0, [X19 + 0xC8]
	0x01DDB034 CBZ X0, 0x1DDB254
	0x01DDB038 ADRP X23, 0x231B000
	0x01DDB03C ADRP X22, 0x231B000
	0x01DDB040 LDR X20, [X19 + 0x38]
	0x01DDB044 LDR X21, [X19 + 0xD0]
	0x01DDB048 LDR X23, [X23 + 0xB58]
	0x01DDB04C LDR X22, [X22 + 0xB60]
	0x01DDB050 MOV X1, X31
	0x01DDB054 BL 0x3C3F58C
	0x01DDB058 LDR X1, [X23]
	0x01DDB05C ADD X0, X31, 0x20
	0x01DDB060 STP X31, X31, [X31 + 0x20]
	0x01DDB064 BL 0x243BFEC
	0x01DDB068 ADRP X23, 0x25FD000
	0x01DDB06C LDRB W8, [X23 + 0x793]
	0x01DDB070 CBNZ W8, 0x1DDB088
	0x01DDB074 ADRP X0, 0x2319000
	0x01DDB078 LDR X0, [X0 + 0x5A8]
	0x01DDB07C BL 0x1C16CF4
	0x01DDB080 MOVZ W8, 0x1
	0x01DDB084 STRB W8, [X23 + 0x793]
	0x01DDB088 ADRP X8, 0x2319000
	0x01DDB08C LDR X8, [X8 + 0x5A8]
	0x01DDB090 LDR X1, [X22]
	0x01DDB094 ADD X0, X31, 0x8
	0x01DDB098 LDR X8, [X8]
	0x01DDB09C LDR X8, [X8 + 0xB8]
	0x01DDB0A0 LDP S0, S1, [X8]
	0x01DDB0A4 LDP S2, S3, [X8 + 0x8]
	0x01DDB0A8 STP X31, X31, [X31 + 0x8]
	0x01DDB0AC STR W31, [X31 + 0x18]
	0x01DDB0B0 BL 0x2437C9C
	0x01DDB0B4 CBZ X20, 0x1DDB254
	0x01DDB0B8 ADRP X8, 0x231B000
	0x01DDB0BC LDR X8, [X8 + 0xF08]
	0x01DDB0C0 LDP X2, X3, [X31 + 0x20]
	0x01DDB0C4 LDUR V0, [X31 + 0x8]
	0x01DDB0C8 LDR W9, [X31 + 0x18]
	0x01DDB0CC LDR X8, [X8]
	0x01DDB0D0 ADD X4, X31, 0x30
	0x01DDB0D4 MOV X0, X20
	0x01DDB0D8 MOV X1, X21
	0x01DDB0DC MOV X5, X31
	0x01DDB0E0 MOV X6, X31
	0x01DDB0E4 MOV W7, W31
	0x01DDB0E8 STR V0, [X31 + 0x3]
	0x01DDB0EC STR W9, [X31 + 0x40]
	0x01DDB0F0 STR X8, [X31]
	0x01DDB0F4 BL 0x222B8DC
	0x01DDB0F8 LDR X0, [X19 + 0xC8]
	0x01DDB0FC CBZ X0, 0x1DDB254
	0x01DDB100 LDR X19, [X19 + 0xE0]
	0x01DDB104 MOV X1, X31
	0x01DDB108 BL 0x3C3F58C
	0x01DDB10C FMOV S3, 1
	0x01DDB110 MOV X0, X19
	0x01DDB114 MOV X1, X31
	0x01DDB118 BL 0x1DD1B94
	0x01DDB11C B 0x1DDB15C
	0x01DDB120 ADRP X20, 0x231B000
	0x01DDB124 LDR X20, [X20 + 0xA78]
	0x01DDB128 LDR X0, [X20]
	0x01DDB12C LDR W8, [X0 + 0xE0]
	0x01DDB130 CBNZ W8, 0x1DDB138
	0x01DDB134 BL 0x1C16DFC
	0x01DDB138 MOV X0, X19
	0x01DDB13C MOV X1, X31
	0x01DDB140 BL 0x1E77B08
	0x01DDB144 LDR X0, [X19 + 0x38]
	0x01DDB148 CBZ X0, 0x1DDB254
	0x01DDB14C MOV X1, X31
	0x01DDB150 BL 0x1E9E538
	0x01DDB154 CMP W0, 0x4
	0x01DDB158 B.NE 0x1DDB170
	0x01DDB15C LDP X20, X19, [X31 + 0x70]
	0x01DDB160 LDP X22, X21, [X31 + 0x60]
	0x01DDB164 LDP X30, X23, [X31 + 0x50]
	0x01DDB168 ADD X31, X31, 0x80
	0x01DDB16C RET
	0x01DDB170 LDR X0, [X19 + 0x40]
	0x01DDB174 CBZ X0, 0x1DDB254
	0x01DDB178 MOV X1, X31
	0x01DDB17C BL 0x1E94078
	0x01DDB180 ANDS W31, W0, 0x7
	0x01DDB184 B.EQ 0x1DDB1D8
	0x01DDB188 LDR X8, [X19 + 0x38]
	0x01DDB18C CBZ X8, 0x1DDB254
	0x01DDB190 LDR X0, [X8 + 0x50]
	0x01DDB194 CBZ X0, 0x1DDB254
	0x01DDB198 MOV X1, X31
	0x01DDB19C BL 0x1EC4D00
	0x01DDB1A0 TBZ X0, 0x0, 0x1DDAFE8
	0x01DDB1A4 LDR X8, [X19 + 0x38]
	0x01DDB1A8 CBZ X8, 0x1DDB254
	0x01DDB1AC LDR X0, [X8 + 0x50]
	0x01DDB1B0 MOVZ W1, 0x8
	0x01DDB1B4 MOV X2, X31
	0x01DDB1B8 BL 0x1ED9318
	0x01DDB1BC LDR X8, [X19 + 0x40]
	0x01DDB1C0 CBZ X8, 0x1DDB254
	0x01DDB1C4 LDR X8, [X8 + 0x20]
	0x01DDB1C8 MOV X20, X0
	0x01DDB1CC CBZ X8, 0x1DDB218
	0x01DDB1D0 LDR W0, [X8]
	0x01DDB1D4 B 0x1DDB21C
	0x01DDB1D8 LDR X0, [X20]
	0x01DDB1DC LDR X19, [X19 + 0x40]
	0x01DDB1E0 LDR W8, [X0 + 0xE0]
	0x01DDB1E4 CBNZ W8, 0x1DDB1EC
	0x01DDB1E8 BL 0x1C16DFC
	0x01DDB1EC ADRP X8, 0x231D000
	0x01DDB1F0 LDR X8, [X8 + 0xAA0]
	0x01DDB1F4 MOV X1, X19
	0x01DDB1F8 LDP X20, X19, [X31 + 0x70]
	0x01DDB1FC LDP X22, X21, [X31 + 0x60]
	0x01DDB200 LDR X0, [X8]
	0x01DDB204 LDP X30, X23, [X31 + 0x50]
	0x01DDB208 MOVZ W2, 0x7
	0x01DDB20C MOV X3, X31
	0x01DDB210 ADD X31, X31, 0x80
	0x01DDB214 B 0x1E77B00
	0x01DDB218 MOV X0, X31
	0x01DDB21C LDR W1, [X19 + 0x68]
	0x01DDB220 MOVZ W2, 0x2
	0x01DDB224 MOV X3, X31
	0x01DDB228 BL 0x1E9C23C
	0x01DDB22C STUR X0, [X20 + 0x1C]
	0x01DDB230 CBZ X20, 0x1DDB254
	0x01DDB234 MOVZ W8, 0x40
	0x01DDB238 STR W8, [X20 + 0xC]
	0x01DDB23C LDR X0, [X19 + 0x38]
	0x01DDB240 CBZ X0, 0x1DDB254
	0x01DDB244 MOV X1, X20
	0x01DDB248 MOV X2, X31
	0x01DDB24C BL 0x1EA1E24
	0x01DDB250 B 0x1DDAFE8
	0x01DDB254 BL 0x1C16F20
	0x01DDB258 STR X30, [X31 - 0x20]!
	0x01DDB25C STP X20, X19, [X31 + 0x10]
	0x01DDB260 LDR X8, [X0 + 0xA0]
	0x01DDB264 MOV X19, X0
	0x01DDB268 MOV W20, W1
	0x01DDB26C CBZ X8, 0x1DDB280

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+16], D14
	003 Move [X31+32], D13
	004 Move [X31+40], D12
	005 Move [X31+48], D11
	006 Move [X31+56], D10
	007 Move [X31+64], D9
	008 Move [X31+72], D8
	009 Move [X31+80], X29
	010 Move [X31+88], X30
	011 Move [X31+96], X28
	012 Move [X31+104], X27
	013 Move [X31+112], X26
	014 Move [X31+120], X25
	015 Move [X31+128], X24
	016 Move [X31+136], X23
	017 Move [X31+144], X22
	018 Move [X31+152], X21
	019 Move [X31+160], X20
	020 Move [X31+168], X19
	021 Move X20, 0x25FF000
	022 Move W8, [X20+3160]
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {42}
	028 Move X0, 0x231F000
	029 Move X0, [X0+2648]
	030 Call 0x1C17CF4
	031 Move X0, 0x231A000
	032 Move X0, [X0+1496]
	033 Call 0x1C17CF4
	034 Move X0, 0x231A000
	035 Move X0, [X0+1528]
	036 Call 0x1C17CF4
	037 Move X0, 0x231F000
	038 Move X0, [X0+2656]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+3160], W8
	042 Move [X31+24], X31
	043 Move [X31+8], X31
	044 Move W8, [X19+240]
	045 Compare W8, 0
	046 JumpIfEqual {250}
	047 Move X24, 0x231A000
	048 Move X23, 0x231A000
	049 Move X24, [X24+1496]
	050 Move X23, [X23+1528]
	051 Move X0, X19
	052 Call ItemSellingMachineController.get__capsulePoint0, X0
	053 Move X0, X19
	054 Move V9, V0
	055 Move V10, V1
	056 Move V11, V2
	057 Call ItemSellingMachineController.get__capsulePoint1, X0
	058 Move X0, [X24]
	059 Move V12, V0
	060 Move V13, V1
	061 Move V14, V2
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {67}
	065 Call 0x1C17DFC
	066 Move X0, [X24]
	067 Move X8, [X0+184]
	068 Move X1, X31
	069 Move W0, [X8+12]
	070 Call LayerMask.op_Implicit, X0
	071 Move X8, [X23]
	072 Move W20, W0
	073 Move W9, [X8+224]
	074 Compare W9, 0
	075 JumpIfNotEqual {78}
	076 Move X0, X8
	077 Call 0x1C17DFC
	078 Move X8, -19853312
	079 Move V8, [X8+92]
	080 Move V0, V9
	081 Move V1, V10
	082 Move V2, V11
	083 Move V3, V12
	084 Move V4, V13
	085 Move V5, V14
	086 Move V6, V8
	087 Move W0, W20
	088 Move X1, X31
	089 Call Physics.OverlapCapsule, X0, X1, V0, X2
	090 Compare X0, 0
	091 JumpIfEqual {272}
	092 Move X8, [X0+24]
	093 Move X20, X0
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X21, 0x2319000
	096 Move X29, 0x231E000
	097 Move X21, [X21+1440]
	098 Move X29, [X29+2656]
	099 Move X25, X31
	100 And X8, X8, 0
	101 Add X26, X20, 32
	102 Move X27, 0x25FE000
	103 Move W28, 1
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X0, [X26]
	106 Add X1, X31, 24
	107 Move X2, X31
	108 Call TriggerUtilities.TryGetNetPlayerFromCollider, X0, X1
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {157}
	113 Move X22, [X31+24]
	114 Move X0, X19
	115 Move X1, X31
	116 Call Component.get_transform, X0
	117 Compare X0, 0
	118 JumpIfEqual {272}
	119 Move X1, X31
	120 Call Transform.get_position, X0
	121 Move W8, [X27+1923]
	122 Move V9, V0
	123 Move V10, V1
	124 Move V11, V2
	125 Compare W8, 0
	126 JumpIfNotEqual {130}
	127 Move X0, X21
	128 Call 0x1C17CF4
	129 Move [X27+1923], W28
	130 Move X8, [X21]
	131 Move X9, [X8+184]
	132 Move X8, [X19+64]
	133 Move S3, [X9]
	134 Move S4, [X9+4]
	135 Move V5, [X9+8]
	136 Compare X8, 0
	137 JumpIfEqual {142}
	138 Move X8, [X8+32]
	139 Compare X8, 0
	140 JumpIfEqual {142}
	141 Move W5, [X8]
	142 Move X5, X31
	143 Compare X22, 0
	144 JumpIfEqual {272}
	145 Move W8, [X19+104]
	146 Move X4, [X29]
	147 Move W1, 1000
	148 Move X0, X22
	149 NotImplemented "Instruction BFM not yet implemented."
	150 Move V0, V9
	151 Move V1, V10
	152 Move V2, V11
	153 Move X2, X31
	154 Move X3, X31
	155 Move X6, X31
	156 Call NetPlayer.Hit, X0, X1, X2, X3, X4, X5, X6, X7
	157 Move W8, [X20+24]
	158 Add X25, X25, 1
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move X0, X19
	161 Call ItemSellingMachineController.get__capsulePoint0, X0
	162 Move X0, X19
	163 Move V9, V0
	164 Move V10, V1
	165 Move V11, V2
	166 Call ItemSellingMachineController.get__capsulePoint1, X0
	167 Move X0, [X24]
	168 Move V12, V0
	169 Move V13, V1
	170 Move V14, V2
	171 Move W8, [X0+224]
	172 Compare W8, 0
	173 JumpIfNotEqual {176}
	174 Call 0x1C17DFC
	175 Move X0, [X24]
	176 Move X8, [X0+184]
	177 Move X1, X31
	178 Move W0, [X8+16]
	179 Call LayerMask.op_Implicit, X0
	180 Move X8, [X24]
	181 Move W20, W0
	182 Move X1, X31
	183 Move X8, [X8+184]
	184 Move W8, [X8+20]
	185 Move X0, X8
	186 Call LayerMask.op_Implicit, X0
	187 Move X8, [X23]
	188 Move W21, W0
	189 Move W9, [X8+224]
	190 Compare W9, 0
	191 JumpIfNotEqual {194}
	192 Move X0, X8
	193 Call 0x1C17DFC
	194 Or W0, W21, W20
	195 Move V0, V9
	196 Move V1, V10
	197 Move V2, V11
	198 Move V3, V12
	199 Move V4, V13
	200 Move V5, V14
	201 Move V6, V8
	202 Move X1, X31
	203 Call Physics.OverlapCapsule, X0, X1, V0, X2
	204 Move X8, [X19+232]
	205 Compare X8, 0
	206 JumpIfEqual {272}
	207 Move X9, 0x231E000
	208 Move X9, [X9+2648]
	209 Move X20, X0
	210 Move X0, X8
	211 Move X1, [X9]
	212 Call HashSet`1<Object>.Clear, X0
	213 Compare X20, 0
	214 JumpIfEqual {272}
	215 Move X8, [X20+24]
	216 NotImplemented "Instruction CMP not yet implemented."
	217 Move X22, X31
	218 And X8, X8, 0
	219 Add X23, X20, 32
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Move X0, [X23]
	222 Add X1, X31, 8
	223 Move X2, X31
	224 Call TriggerUtilities.TryGetItemFromCollider, X0, X1
	225 Move TEMP, X0
	226 And TEMP, TEMP, 1
	227 Compare TEMP, 1
	228 JumpIfNotEqual {247}
	229 Move X0, [X31+8]
	230 Compare X0, 0
	231 JumpIfEqual {272}
	232 Move X1, X31
	233 Call GrabbableItem.get_isVisible, X0
	234 Move TEMP, X0
	235 And TEMP, TEMP, 1
	236 Compare TEMP, 1
	237 JumpIfNotEqual {247}
	238 Move X0, X19
	239 Call ItemSellingMachineController.get_itemSoldValue, X0
	240 Move X1, [X31+8]
	241 Move W21, W0
	242 Move X0, X19
	243 Call ItemSellingMachineController.SellItem, X0, X1
	244 Add W1, W0, W21
	245 Move X0, X19
	246 Call ItemSellingMachineController.set_itemSoldValue, X0, X1
	247 Move W8, [X20+24]
	248 Add X22, X22, 1
	249 NotImplemented "Instruction CMP not yet implemented."
	250 Move X20, [X31+160]
	251 Move X19, [X31+168]
	252 Move X22, [X31+144]
	253 Move X21, [X31+152]
	254 Move X24, [X31+128]
	255 Move X23, [X31+136]
	256 Move X26, [X31+112]
	257 Move X25, [X31+120]
	258 Move X28, [X31+96]
	259 Move X27, [X31+104]
	260 Move X29, [X31+80]
	261 Move X30, [X31+88]
	262 Move D9, [X31+64]
	263 Move D8, [X31+72]
	264 Move D11, [X31+48]
	265 Move D10, [X31+56]
	266 Move D13, [X31+32]
	267 Move D12, [X31+40]
	268 Move V14, [X31+16]
	269 Add X31, X31, 176
	270 Return 
	271 Call 0x1C17F28
	272 Call 0x1C17F20

Method: System.Void OnItemSellingAnimationFinished()

Disassembly:
	0x01DDB270 MOV X0, X19
	0x01DDB274 MOV X1, X8
	0x01DDB278 MOV X2, X31
	0x01DDB27C BL 0x3C36834
	0x01DDB280 MOV X0, X19
	0x01DDB284 MOV W1, W20
	0x01DDB288 BL 0x1DDC06C
	0x01DDB28C MOV X1, X0
	0x01DDB290 STR X0, [X19 + 0xA0]
	0x01DDB294 MOV X0, X19
	0x01DDB298 LDP X20, X19, [X31 + 0x10]
	0x01DDB29C MOV X2, X31
	0x01DDB2A0 LDR X30, [X31], #0x20
	0x01DDB2A4 B 0x3C366FC
	0x01DDB2A8 STR D10, [X31 - 0x30]!
	0x01DDB2AC STP D9, D8, [X31 + 0x10]
	0x01DDB2B0 STP X30, X19, [X31 + 0x20]
	0x01DDB2B4 MOV X19, X0
	0x01DDB2B8 FMOV S0, W31
	0x01DDB2BC FMOV S1, 1
	0x01DDB2C0 FMOV S2, W31
	0x01DDB2C4 FMOV S3, 1
	0x01DDB2C8 MOV X0, X31
	0x01DDB2CC BL 0x3C0D030
	0x01DDB2D0 MOV X0, X19
	0x01DDB2D4 BL 0x1DD9560
	0x01DDB2D8 ADRP X8, 0xFFFFFFFFFED0F000
	0x01DDB2DC LDR V8, [X8 + 0x5C]
	0x01DDB2E0 MOV X0, X31
	0x01DDB2E4 MOV V3.16B, V8.16B
	0x01DDB2E8 BL 0x3C0CB98
	0x01DDB2EC MOV X0, X19
	0x01DDB2F0 BL 0x1DD9660
	0x01DDB2F4 MOV V3.16B, V8.16B
	0x01DDB2F8 MOV X0, X31
	0x01DDB2FC BL 0x3C0CB98

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+64]
	005 Compare X0, 0
	006 JumpIfEqual {44}
	007 Move W8, [X0+96]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 2
	010 Compare TEMP, 2
	011 JumpIfEqual {44}
	012 Move X1, X31
	013 Call NetworkObject.get_HasStateAuthority, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {44}
	018 Move X0, X19
	019 Move W1, W31
	020 Call ItemSellingMachineController.set_isSellingInProgress, X0, X1
	021 Move X0, X19
	022 Call ItemSellingMachineController.ResetButtonsState, X0
	023 Move W1, 11
	024 Move W0, W31
	025 Move X2, X31
	026 Call Random.Range, X0, X1
	027 Move W1, W0
	028 Move X0, X19
	029 Call ItemSellingMachineController.set_randomButtonId, X0, X1
	030 Move X0, X19
	031 Call ItemSellingMachineController.get_itemSoldValue, X0
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X19
	034 Call ItemSellingMachineController.get_itemSoldValue, X0
	035 Move W1, W0
	036 Move X0, X19
	037 Call ItemSellingMachineController.RPC_AddPlayerMoneyToAll, X0, X1
	038 Move X0, X19
	039 Move W1, W31
	040 Move X30, [X31+16]
	041 Move X19, [X31+24]
	042 Call ItemSellingMachineController.set_itemSoldValue, X0, X1
	043 Return 
	044 Move X30, [X31+16]
	045 Move X19, [X31+24]
	046 Return 

Method: System.Void HandleIsOverheated()

Disassembly:
	0x01DDBDF0 STP X20, X19, [X31 + 0x20]
	0x01DDBDF4 LDR X8, [X0 + 0x28]
	0x01DDBDF8 CBZ X8, 0x1DDBE9C
	0x01DDBDFC LDR W9, [X8 + 0x18]
	0x01DDBE00 MOV W20, W1
	0x01DDBE04 CMP W9, W1
	0x01DDBE08 B.LS 0x1DDBEA0
	0x01DDBE0C SXTW X22, W20
	0x01DDBE10 ADD X8, X8, X22, 0x3, LSL
	0x01DDBE14 MOV X19, X0
	0x01DDBE18 LDR X0, [X8 + 0x20]
	0x01DDBE1C CBZ X0, 0x1DDBE9C
	0x01DDBE20 LDR X21, [X19 + 0x50]
	0x01DDBE24 MOV X1, X31
	0x01DDBE28 BL 0x3C32E90
	0x01DDBE2C CBZ X0, 0x1DDBE9C
	0x01DDBE30 MOV X1, X31
	0x01DDBE34 BL 0x3C3F58C
	0x01DDBE38 FMOV S3, 1
	0x01DDBE3C MOV X0, X21
	0x01DDBE40 MOV X1, X31
	0x01DDBE44 BL 0x1DD1B94
	0x01DDBE48 LDR X8, [X19 + 0x88]
	0x01DDBE4C CBZ X8, 0x1DDBE9C
	0x01DDBE50 LDR W9, [X8 + 0x18]
	0x01DDBE54 CMP W9, W20
	0x01DDBE58 B.LS 0x1DDBEA0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, [X0+176]
	005 Move X19, X0
	006 Call ItemSellingMachineController.get_isOverheated, X0
	007 Compare X20, 0
	008 JumpIfEqual {36}
	009 And W1, W0, 1
	010 Move X0, X20
	011 Call ItemSellingMachineView.SetOverheatedColor, X0, X1
	012 Move X0, X19
	013 Call ItemSellingMachineController.get_isOverheated, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {32}
	018 Move X0, [X19+200]
	019 Compare X0, 0
	020 JumpIfEqual {36}
	021 Move X19, [X19+216]
	022 Move X1, X31
	023 Call Transform.get_position, X0
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move S3, 1
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Call SFXManager.PlaySFX, X0, X1, V0
	031 Return 
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return 
	036 Call 0x1C17F20

Method: System.Void HandleIsExploded()

Disassembly:
	0x01DDAA78 LDR X0, [X8]
	0x01DDAA7C BL 0x1C16D6C
	0x01DDAA80 MOV X20, X0
	0x01DDAA84 MOV X0, X21
	0x01DDAA88 MOV X1, X31
	0x01DDAA8C BL 0x3C389D4
	0x01DDAA90 ADRP X8, 0x231D000
	0x01DDAA94 ADRP X24, 0x231D000
	0x01DDAA98 LDR X8, [X8 + 0x180]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+176]
	004 Call ItemSellingMachineController.get_isExploded, X0
	005 Compare X19, 0
	006 JumpIfEqual {13}
	007 And W1, W0, 1
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call ItemSellingMachineView.SetExplodedColor, X0, X1
	012 Return 
	013 Call 0x1C17F20

Method: System.Void RPC_ExplodeMachine()

Disassembly:
	0x01DDBF78 STR X20, [X21 + 0x20]
	0x01DDBF7C STR W19, [X21 + 0x28]
	0x01DDBF80 MOV X0, X21
	0x01DDBF84 LDP X20, X19, [X31 + 0x20]
	0x01DDBF88 LDP X22, X21, [X31 + 0x10]
	0x01DDBF8C LDR X30, [X31], #0x30
	0x01DDBF90 RET
	0x01DDBF94 STR X30, [X31 - 0x20]!
	0x01DDBF98 STP X20, X19, [X31 + 0x10]
	0x01DDBF9C MOV W19, W1
	0x01DDBFA0 MOV X1, X31
	0x01DDBFA4 MOV X20, X0
	0x01DDBFA8 BL 0x33BDD8C
	0x01DDBFAC STR W19, [X20 + 0x10]
	0x01DDBFB0 LDP X20, X19, [X31 + 0x10]
	0x01DDBFB4 LDR X30, [X31], #0x20
	0x01DDBFB8 RET
	0x01DDBFBC STP D11, D10, [X31 - 0x40]!
	0x01DDBFC0 STP D9, D8, [X31 + 0x10]
	0x01DDBFC4 STP X30, X21, [X31 + 0x20]
	0x01DDBFC8 STP X20, X19, [X31 + 0x30]
	0x01DDBFCC ADRP X20, 0x25FD000
	0x01DDBFD0 ADRP X21, 0x231D000
	0x01DDBFD4 LDRB W8, [X20 + 0xC6A]
	0x01DDBFD8 LDR X21, [X21 + 0xB08]
	0x01DDBFDC MOV V8.16B, V3.16B
	0x01DDBFE0 MOV V9.16B, V2.16B
	0x01DDBFE4 MOV V10.16B, V1.16B
	0x01DDBFE8 MOV V11.16B, V0.16B
	0x01DDBFEC MOV X19, X0
	0x01DDBFF0 TBNZ X8, 0x0, 0x1DDC008
	0x01DDBFF4 ADRP X0, 0x231D000
	0x01DDBFF8 LDR X0, [X0 + 0xB08]
	0x01DDBFFC BL 0x1C16CF4
	0x01DDC000 MOVZ W8, 0x1
	0x01DDC004 STRB W8, [X20 + 0xC6A]
	0x01DDC008 LDR X0, [X21]
	0x01DDC00C BL 0x1C16F10
	0x01DDC010 MOV X1, X31
	0x01DDC014 MOV X20, X0
	0x01DDC018 BL 0x33BDD8C
	0x01DDC01C STR W31, [X20 + 0x10]
	0x01DDC020 STR X19, [X20 + 0x20]
	0x01DDC024 STP S11, S10, [X20 + 0x28]
	0x01DDC028 STP S8, S9, [X20 + 0x30]
	0x01DDC02C MOV X0, X20
	0x01DDC030 LDP X20, X19, [X31 + 0x30]
	0x01DDC034 LDP X30, X21, [X31 + 0x20]
	0x01DDC038 LDP D9, D8, [X31 + 0x10]
	0x01DDC03C LDP D11, D10, [X31], #0x40
	0x01DDC040 RET
	0x01DDC044 STR X30, [X31 - 0x20]!
	0x01DDC048 STP X20, X19, [X31 + 0x10]
	0x01DDC04C MOV W19, W1
	0x01DDC050 MOV X1, X31
	0x01DDC054 MOV X20, X0
	0x01DDC058 BL 0x33BDD8C
	0x01DDC05C STR W19, [X20 + 0x10]
	0x01DDC060 LDP X20, X19, [X31 + 0x10]
	0x01DDC064 LDR X30, [X31], #0x20
	0x01DDC068 RET
	0x01DDC06C STR X30, [X31 - 0x30]!
	0x01DDC070 STP X22, X21, [X31 + 0x10]
	0x01DDC074 STP X20, X19, [X31 + 0x20]
	0x01DDC078 ADRP X21, 0x25FC000
	0x01DDC07C ADRP X22, 0x231C000
	0x01DDC080 LDRB W8, [X21 + 0xC6B]
	0x01DDC084 LDR X22, [X22 + 0xB10]
	0x01DDC088 MOV W19, W1
	0x01DDC08C MOV X20, X0
	0x01DDC090 TBNZ X8, 0x0, 0x1DDC0A8
	0x01DDC094 ADRP X0, 0x231C000
	0x01DDC098 LDR X0, [X0 + 0xB10]
	0x01DDC09C BL 0x1C16CF4
	0x01DDC0A0 MOVZ W8, 0x1
	0x01DDC0A4 STRB W8, [X21 + 0xC6B]
	0x01DDC0A8 LDR X0, [X22]
	0x01DDC0AC BL 0x1C16F10
	0x01DDC0B0 MOV X1, X31
	0x01DDC0B4 MOV X21, X0
	0x01DDC0B8 BL 0x33BDD8C
	0x01DDC0BC STR W31, [X21 + 0x10]
	0x01DDC0C0 STR X20, [X21 + 0x20]
	0x01DDC0C4 STR W19, [X21 + 0x28]
	0x01DDC0C8 MOV X0, X21
	0x01DDC0CC LDP X20, X19, [X31 + 0x20]
	0x01DDC0D0 LDP X22, X21, [X31 + 0x10]
	0x01DDC0D4 LDR X30, [X31], #0x30
	0x01DDC0D8 RET
	0x01DDC0DC STR X30, [X31 - 0x20]!
	0x01DDC0E0 STP X20, X19, [X31 + 0x10]
	0x01DDC0E4 MOV W19, W1
	0x01DDC0E8 MOV X1, X31
	0x01DDC0EC MOV X20, X0
	0x01DDC0F0 BL 0x33BDD8C
	0x01DDC0F4 STR W19, [X20 + 0x10]
	0x01DDC0F8 LDP X20, X19, [X31 + 0x10]
	0x01DDC0FC LDR X30, [X31], #0x20
	0x01DDC100 RET
	0x01DDC104 STP X30, X21, [X31 - 0x20]!
	0x01DDC108 STP X20, X19, [X31 + 0x10]
	0x01DDC10C MOV W19, W3
	0x01DDC110 MOV W20, W2
	0x01DDC114 MOV W21, W1
	0x01DDC118 MOV W0, W1
	0x01DDC11C MOV W1, W2
	0x01DDC120 MOV X2, X31
	0x01DDC124 BL 0x3C309A8
	0x01DDC128 CMP W0, W19
	0x01DDC12C B.NE 0x1DDC13C
	0x01DDC130 MOV W0, W21
	0x01DDC134 MOV W1, W20
	0x01DDC138 B 0x1DDC120
	0x01DDC13C LDP X20, X19, [X31 + 0x10]
	0x01DDC140 LDP X30, X21, [X31], #0x20
	0x01DDC144 RET
	0x01DDC148 STR X30, [X31 - 0x30]!
	0x01DDC14C STP X22, X21, [X31 + 0x10]
	0x01DDC150 STP X20, X19, [X31 + 0x20]
	0x01DDC154 ADRP X21, 0x25FC000
	0x01DDC158 ADRP X22, 0x2317000
	0x01DDC15C LDRB W8, [X21 + 0xC6C]
	0x01DDC160 LDR X22, [X22 + 0x988]
	0x01DDC164 MOV W19, W2
	0x01DDC168 MOV X20, X1
	0x01DDC16C TBNZ X8, 0x0, 0x1DDC190
	0x01DDC170 ADRP X0, 0x2317000
	0x01DDC174 LDR X0, [X0 + 0xDD8]
	0x01DDC178 BL 0x1C16CF4
	0x01DDC17C ADRP X0, 0x2317000
	0x01DDC180 LDR X0, [X0 + 0x988]
	0x01DDC184 BL 0x1C16CF4
	0x01DDC188 MOVZ W8, 0x1
	0x01DDC18C STRB W8, [X21 + 0xC6C]
	0x01DDC190 LDR X21, [X22]
	0x01DDC194 CMP W19, 0x1
	0x01DDC198 B.LT 0x1DDC1DC
	0x01DDC19C ADRP X22, 0x2317000
	0x01DDC1A0 LDR X22, [X22 + 0xDD8]
	0x01DDC1A4 CMP W19, 0x1
	0x01DDC1A8 MOV X1, X20
	0x01DDC1AC B.EQ 0x1DDC1C4
	0x01DDC1B0 LDR X1, [X22]
	0x01DDC1B4 MOV X0, X20
	0x01DDC1B8 MOV X2, X31
	0x01DDC1BC BL 0x321B938
	0x01DDC1C0 MOV X1, X0
	0x01DDC1C4 MOV X0, X21
	0x01DDC1C8 MOV X2, X31
	0x01DDC1CC BL 0x321B938
	0x01DDC1D0 SUBS W19, W19, 0x1
	0x01DDC1D4 MOV X21, X0
	0x01DDC1D8 B.NE 0x1DDC1A4
	0x01DDC1DC MOV X0, X21
	0x01DDC1E0 LDP X20, X19, [X31 + 0x20]
	0x01DDC1E4 LDP X22, X21, [X31 + 0x10]
	0x01DDC1E8 LDR X30, [X31], #0x30
	0x01DDC1EC RET
	0x01DDC1F0 STP X30, X21, [X31 - 0x20]!
	0x01DDC1F4 STP X20, X19, [X31 + 0x10]
	0x01DDC1F8 ADRP X20, 0x25FC000
	0x01DDC1FC ADRP X21, 0x231A000
	0x01DDC200 LDRB W8, [X20 + 0xC6D]
	0x01DDC204 LDR X21, [X21 + 0xC30]
	0x01DDC208 MOV X19, X0
	0x01DDC20C TBNZ X8, 0x0, 0x1DDC224
	0x01DDC210 ADRP X0, 0x231A000
	0x01DDC214 LDR X0, [X0 + 0xC30]
	0x01DDC218 BL 0x1C16CF4
	0x01DDC21C MOVZ W8, 0x1
	0x01DDC220 STRB W8, [X20 + 0xC6D]
	0x01DDC224 LDR X0, [X21]
	0x01DDC228 BL 0x1C16F10
	0x01DDC22C FMOV S0, 1.5
	0x01DDC230 MOV X1, X31
	0x01DDC234 MOV X20, X0
	0x01DDC238 BL 0x3C3A634
	0x01DDC23C STR X20, [X19 + 0x90]
	0x01DDC240 LDR X0, [X21]
	0x01DDC244 BL 0x1C16F10
	0x01DDC248 ADRP X8, 0xFFFFFFFFFED0E000
	0x01DDC24C LDR V0, [X8 + 0x30C]
	0x01DDC250 MOV X1, X31
	0x01DDC254 MOV X20, X0

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+80], X30
	003 Move [X31+88], X23
	004 Move [X31+96], X22
	005 Move [X31+104], X21
	006 Move [X31+112], X20
	007 Move [X31+120], X19
	008 Move X20, 0x25FE000
	009 Move W8, [X20+3161]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0x231C000
	016 Move X0, [X0+2680]
	017 Call 0x1C17CF4
	018 Move X0, 0x231C000
	019 Move X0, [X0+3848]
	020 Call 0x1C17CF4
	021 Move X0, 0x231C000
	022 Move X0, [X0+2904]
	023 Call 0x1C17CF4
	024 Move X0, 0x231C000
	025 Move X0, [X0+2912]
	026 Call 0x1C17CF4
	027 Move X0, 0x231E000
	028 Move X0, [X0+2720]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+3161], W8
	032 Move W8, [X19+88]
	033 Compare W8, 0
	034 JumpIfEqual {129}
	035 Move [X19+88], W31
	036 Move X0, [X19+64]
	037 Compare X0, 0
	038 JumpIfEqual {61}
	039 Move W8, [X0+96]
	040 Move TEMP, X8
	041 And TEMP, TEMP, 2
	042 Compare TEMP, 2
	043 JumpIfEqual {61}
	044 Move X1, X31
	045 Call NetworkObject.get_HasStateAuthority, X0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {61}
	050 Move S0, W31
	051 Move X0, X19
	052 Call ItemSellingMachineController.set_heatMeter, X0, V0
	053 Move X0, X19
	054 Move W1, W31
	055 Call ItemSellingMachineController.set_isOverheated, X0, X1
	056 Move W1, 1
	057 Move X0, X19
	058 Call ItemSellingMachineController.set_isExploded, X0, X1
	059 Move X0, X19
	060 Call ItemSellingMachineController.ResetButtonsState, X0
	061 Move X0, [X19+200]
	062 Compare X0, 0
	063 JumpIfEqual {223}
	064 Move X23, 0x231B000
	065 Move X22, 0x231B000
	066 Move X20, [X19+56]
	067 Move X21, [X19+208]
	068 Move X23, [X23+2904]
	069 Move X22, [X22+2912]
	070 Move X1, X31
	071 Call Transform.get_position, X0
	072 Move X1, [X23]
	073 Add X0, X31, 32
	074 Move [X31+32], X31
	075 Move [X31+40], X31
	076 Call Nullable`1<Vector3>..ctor, X0, X1
	077 Move X23, 0x25FD000
	078 Move W8, [X23+1939]
	079 Compare W8, 0
	080 JumpIfNotEqual {86}
	081 Move X0, 0x2319000
	082 Move X0, [X0+1448]
	083 Call 0x1C17CF4
	084 Move W8, 1
	085 Move [X23+1939], W8
	086 Move X8, 0x2319000
	087 Move X8, [X8+1448]
	088 Move X1, [X22]
	089 Add X0, X31, 8
	090 Move X8, [X8]
	091 Move X8, [X8+184]
	092 Move S0, [X8]
	093 Move S1, [X8+4]
	094 Move S2, [X8+8]
	095 Move S3, [X8+12]
	096 Move [X31+8], X31
	097 Move [X31+16], X31
	098 Move [X31+24], W31
	099 Call Nullable`1<Quaternion>..ctor, X0, X1
	100 Compare X20, 0
	101 JumpIfEqual {223}
	102 Move X8, 0x231B000
	103 Move X8, [X8+3848]
	104 Move X2, [X31+32]
	105 Move X3, [X31+40]
	106 NotImplemented "Instruction LDUR not yet implemented."
	107 Move W9, [X31+24]
	108 Move X8, [X8]
	109 Add X4, X31, 48
	110 Move X0, X20
	111 Move X1, X21
	112 Move X5, X31
	113 Move X6, X31
	114 Move W7, W31
	115 Move [X31+3], V0
	116 Move [X31+64], W9
	117 Move [X31], X8
	118 Call 0x222C8DC, X0, X1, X2, X3, X4, X5, X6
	119 Move X0, [X19+200]
	120 Compare X0, 0
	121 JumpIfEqual {223}
	122 Move X19, [X19+224]
	123 Move X1, X31
	124 Call Transform.get_position, X0
	125 Move S3, 1
	126 Move X0, X19
	127 Move X1, X31
	128 Call SFXManager.PlaySFX, X0, X1, V0
	129 Move X20, 0x231B000
	130 Move X20, [X20+2680]
	131 Move X0, [X20]
	132 Move W8, [X0+224]
	133 Compare W8, 0
	134 JumpIfNotEqual {136}
	135 Call 0x1C17DFC
	136 Move X0, X19
	137 Move X1, X31
	138 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	139 Move X0, [X19+56]
	140 Compare X0, 0
	141 JumpIfEqual {223}
	142 Move X1, X31
	143 Call NetworkRunner.get_Stage, X0
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move X20, [X31+112]
	146 Move X19, [X31+120]
	147 Move X22, [X31+96]
	148 Move X21, [X31+104]
	149 Move X30, [X31+80]
	150 Move X23, [X31+88]
	151 Add X31, X31, 128
	152 Return 
	153 Move X0, [X19+64]
	154 Compare X0, 0
	155 JumpIfEqual {223}
	156 Move X1, X31
	157 Call NetworkObject.GetLocalAuthorityMask, X0
	158 And W31, W0, 7
	159 Move X8, [X19+56]
	160 Compare X8, 0
	161 JumpIfEqual {223}
	162 Move X0, [X8+80]
	163 Compare X0, 0
	164 JumpIfEqual {223}
	165 Move X1, X31
	166 Call Simulation.HasAnyActiveConnections, X0
	167 Move TEMP, X0
	168 And TEMP, TEMP, 1
	169 Compare TEMP, 1
	170 JumpIfNotEqual {36}
	171 Move X8, [X19+56]
	172 Compare X8, 0
	173 JumpIfEqual {223}
	174 Move X0, [X8+80]
	175 Move W1, 8
	176 Move X2, X31
	177 Call SimulationMessage.Allocate, X0, X1
	178 Move X8, [X19+64]
	179 Compare X8, 0
	180 JumpIfEqual {223}
	181 Move X8, [X8+32]
	182 Move X20, X0
	183 Compare X8, 0
	184 JumpIfEqual {207}
	185 Move W0, [X8]
	186 Move X0, [X20]
	187 Move X19, [X19+64]
	188 Move W8, [X0+224]
	189 Compare W8, 0
	190 JumpIfNotEqual {192}
	191 Call 0x1C17DFC
	192 Move X8, 0x231D000
	193 Move X8, [X8+2720]
	194 Move X1, X19
	195 Move X20, [X31+112]
	196 Move X19, [X31+120]
	197 Move X22, [X31+96]
	198 Move X21, [X31+104]
	199 Move X0, [X8]
	200 Move X30, [X31+80]
	201 Move X23, [X31+88]
	202 Move W2, 7
	203 Move X3, X31
	204 Add X31, X31, 128
	205 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	206 Return 
	207 Move X0, X31
	208 Move W1, [X19+104]
	209 Move W2, 2
	210 Move X3, X31
	211 Call RpcHeader.Create, X0, X1, X2
	212 Move [X20+28], X0
	213 Compare X20, 0
	214 JumpIfEqual {223}
	215 Move W8, 64
	216 Move [X20+12], W8
	217 Move X0, [X19+56]
	218 Compare X0, 0
	219 JumpIfEqual {223}
	220 Move X1, X20
	221 Move X2, X31
	222 Call NetworkRunner.SendRpc, X0, X1
	223 Call 0x1C17F20

Method: System.Void RPC_RecoverExplosion()

Disassembly:
	0x01DDB300 MOV X0, X19
	0x01DDB304 BL 0x1DD9560
	0x01DDB308 MOV X0, X19
	0x01DDB30C MOV V8.16B, V0.16B
	0x01DDB310 MOV V9.16B, V1.16B
	0x01DDB314 MOV V10.16B, V2.16B
	0x01DDB318 BL 0x1DD9660
	0x01DDB31C MOV V3.16B, V0.16B
	0x01DDB320 MOV V4.16B, V1.16B
	0x01DDB324 MOV V0.16B, V8.16B
	0x01DDB328 MOV V1.16B, V9.16B
	0x01DDB32C LDP X30, X19, [X31 + 0x20]
	0x01DDB330 LDP D9, D8, [X31 + 0x10]
	0x01DDB334 MOV V5.16B, V2.16B
	0x01DDB338 MOV V2.16B, V10.16B
	0x01DDB33C MOV X0, X31
	0x01DDB340 LDR V10, [X31], #0x30
	0x01DDB344 B 0x3C0CB04
	0x01DDB348 STP X30, X23, [X31 - 0x30]!
	0x01DDB34C STP X22, X21, [X31 + 0x10]
	0x01DDB350 STP X20, X19, [X31 + 0x20]
	0x01DDB354 ADRP X22, 0x25FD000
	0x01DDB358 ADRP X23, 0x231D000
	0x01DDB35C ADRP X21, 0x231B000
	0x01DDB360 ADRP X20, 0x231B000
	0x01DDB364 LDRB W8, [X22 + 0xC5D]
	0x01DDB368 LDR X23, [X23 + 0xAA8]
	0x01DDB36C LDR X21, [X21 + 0xE48]
	0x01DDB370 LDR X20, [X20 + 0xE50]
	0x01DDB374 MOV X19, X0
	0x01DDB378 TBNZ X8, 0x0, 0x1DDB3A8
	0x01DDB37C ADRP X0, 0x231B000
	0x01DDB380 LDR X0, [X0 + 0xE50]
	0x01DDB384 BL 0x1C16CF4
	0x01DDB388 ADRP X0, 0x231B000
	0x01DDB38C LDR X0, [X0 + 0xE48]
	0x01DDB390 BL 0x1C16CF4
	0x01DDB394 ADRP X0, 0x231D000
	0x01DDB398 LDR X0, [X0 + 0xAA8]
	0x01DDB39C BL 0x1C16CF4
	0x01DDB3A0 MOVZ W8, 0x1
	0x01DDB3A4 STRB W8, [X22 + 0xC5D]
	0x01DDB3A8 LDR X0, [X23]
	0x01DDB3AC MOVZ W1, 0xC
	0x01DDB3B0 BL 0x1C16D6C
	0x01DDB3B4 STR X0, [X19 + 0xB8]
	0x01DDB3B8 LDR X0, [X21]
	0x01DDB3BC BL 0x1C16F10
	0x01DDB3C0 LDR X1, [X20]
	0x01DDB3C4 MOV X20, X0
	0x01DDB3C8 BL 0x2DBDE08
	0x01DDB3CC STR X20, [X19 + 0xE8]
	0x01DDB3D0 MOV X0, X19
	0x01DDB3D4 LDP X20, X19, [X31 + 0x20]
	0x01DDB3D8 LDP X22, X21, [X31 + 0x10]
	0x01DDB3DC MOV X1, X31
	0x01DDB3E0 LDP X30, X23, [X31], #0x30
	0x01DDB3E4 B 0x1E74F04
	0x01DDB3E8 STR X30, [X31 - 0x20]!
	0x01DDB3EC STP X20, X19, [X31 + 0x10]
	0x01DDB3F0 ADRP X19, 0x25FD000
	0x01DDB3F4 ADRP X20, 0x231D000
	0x01DDB3F8 LDRB W8, [X19 + 0xC5E]
	0x01DDB3FC LDR X20, [X20 + 0xA38]
	0x01DDB400 TBNZ X8, 0x0, 0x1DDB418
	0x01DDB404 ADRP X0, 0x231D000
	0x01DDB408 LDR X0, [X0 + 0xA38]
	0x01DDB40C BL 0x1C16CF4
	0x01DDB410 MOVZ W8, 0x1
	0x01DDB414 STRB W8, [X19 + 0xC5E]
	0x01DDB418 LDR X8, [X20]
	0x01DDB41C ADRP X9, 0xFFFFFFFFFED12000
	0x01DDB420 LDR V0, [X9 + 0x900]
	0x01DDB424 LDP X20, X19, [X31 + 0x10]
	0x01DDB428 LDR X8, [X8 + 0xB8]
	0x01DDB42C STR D0, [X8]
	0x01DDB430 STR W31, [X8 + 0x8]
	0x01DDB434 LDR X30, [X31], #0x20
	0x01DDB438 RET
	0x01DDB43C SUB X31, X31, 0xA0
	0x01DDB440 STR X30, [X31 + 0x60]
	0x01DDB444 STP X24, X23, [X31 + 0x70]
	0x01DDB448 STP X22, X21, [X31 + 0x80]
	0x01DDB44C STP X20, X19, [X31 + 0x90]
	0x01DDB450 ADRP X21, 0x25FD000
	0x01DDB454 ADRP X20, 0x231B000
	0x01DDB458 LDRB W8, [X21 + 0xC5F]
	0x01DDB45C LDR X20, [X20 + 0xA78]
	0x01DDB460 MOV X19, X0
	0x01DDB464 TBNZ X8, 0x0, 0x1DDB4AC
	0x01DDB468 ADRP X0, 0x231D000
	0x01DDB46C LDR X0, [X0 + 0xAB0]
	0x01DDB470 BL 0x1C16CF4
	0x01DDB474 ADRP X0, 0x231D000
	0x01DDB478 LDR X0, [X0 + 0xAB8]
	0x01DDB47C BL 0x1C16CF4
	0x01DDB480 ADRP X0, 0x231B000
	0x01DDB484 LDR X0, [X0 + 0xA78]
	0x01DDB488 BL 0x1C16CF4
	0x01DDB48C ADRP X0, 0x231D000
	0x01DDB490 LDR X0, [X0 + 0xAC0]
	0x01DDB494 BL 0x1C16CF4
	0x01DDB498 ADRP X0, 0x231D000
	0x01DDB49C LDR X0, [X0 + 0xAC8]
	0x01DDB4A0 BL 0x1C16CF4
	0x01DDB4A4 MOVZ W8, 0x1
	0x01DDB4A8 STRB W8, [X21 + 0xC5F]
	0x01DDB4AC ADRP X23, 0x231D000
	0x01DDB4B0 LDR X23, [X23 + 0xAC0]
	0x01DDB4B4 LDRB W1, [X19 + 0x80]
	0x01DDB4B8 ADRP X24, 0x231D000
	0x01DDB4BC ADRP X22, 0x231D000
	0x01DDB4C0 ADRP X21, 0x231D000
	0x01DDB4C4 LDR X24, [X24 + 0xAB0]
	0x01DDB4C8 LDR X22, [X22 + 0xAC8]
	0x01DDB4CC LDR X21, [X21 + 0xAB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25FE000
	005 Move W8, [X20+3162]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x231C000
	012 Move X0, [X0+2680]
	013 Call 0x1C17CF4
	014 Move X0, 0x231E000
	015 Move X0, [X0+2664]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3162], W8
	019 Move W8, [X19+88]
	020 Compare W8, 0
	021 JumpIfEqual {57}
	022 Move [X19+88], W31
	023 Move X0, [X19+64]
	024 Compare X0, 0
	025 JumpIfEqual {73}
	026 Move W8, [X0+96]
	027 Move TEMP, X8
	028 And TEMP, TEMP, 2
	029 Compare TEMP, 2
	030 JumpIfEqual {73}
	031 Move X1, X31
	032 Call NetworkObject.get_HasStateAuthority, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {73}
	037 Move S0, W31
	038 Move X0, X19
	039 Call ItemSellingMachineController.set_heatMeter, X0, V0
	040 Move X0, X19
	041 Move W1, W31
	042 Call ItemSellingMachineController.set_isOverheated, X0, X1
	043 Move X0, X19
	044 Move W1, W31
	045 Call ItemSellingMachineController.set_isExploded, X0, X1
	046 Move W1, 11
	047 Move W0, W31
	048 Move X2, X31
	049 Call Random.Range, X0, X1
	050 Move W1, W0
	051 Move X0, X19
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Call ItemSellingMachineController.set_randomButtonId, X0, X1
	056 Return 
	057 Move X20, 0x231C000
	058 Move X20, [X20+2680]
	059 Move X0, [X20]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X19
	065 Move X1, X31
	066 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	067 Move X0, [X19+56]
	068 Compare X0, 0
	069 JumpIfEqual {143}
	070 Move X1, X31
	071 Call NetworkRunner.get_Stage, X0
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X30, [X31+32]
	076 Return 
	077 Move X0, [X19+64]
	078 Compare X0, 0
	079 JumpIfEqual {143}
	080 Move X1, X31
	081 Call NetworkObject.GetLocalAuthorityMask, X0
	082 And W31, W0, 7
	083 Move X8, [X19+56]
	084 Compare X8, 0
	085 JumpIfEqual {143}
	086 Move X0, [X8+80]
	087 Compare X0, 0
	088 JumpIfEqual {143}
	089 Move X1, X31
	090 Call Simulation.HasAnyActiveConnections, X0
	091 Move TEMP, X0
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfNotEqual {23}
	095 Move X8, [X19+56]
	096 Compare X8, 0
	097 JumpIfEqual {143}
	098 Move X0, [X8+80]
	099 Move W1, 8
	100 Move X2, X31
	101 Call SimulationMessage.Allocate, X0, X1
	102 Move X8, [X19+64]
	103 Compare X8, 0
	104 JumpIfEqual {143}
	105 Move X8, [X8+32]
	106 Move X20, X0
	107 Compare X8, 0
	108 JumpIfEqual {127}
	109 Move W0, [X8]
	110 Move X0, [X20]
	111 Move X19, [X19+64]
	112 Move W8, [X0+224]
	113 Compare W8, 0
	114 JumpIfNotEqual {116}
	115 Call 0x1C17DFC
	116 Move X8, 0x231E000
	117 Move X8, [X8+2664]
	118 Move X1, X19
	119 Move X20, [X31+16]
	120 Move X19, [X31+24]
	121 Move W2, 7
	122 Move X0, [X8]
	123 Move X3, X31
	124 Move X30, [X31+32]
	125 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	126 Return 
	127 Move X0, X31
	128 Move W1, [X19+104]
	129 Move W2, 3
	130 Move X3, X31
	131 Call RpcHeader.Create, X0, X1, X2
	132 Move [X20+28], X0
	133 Compare X20, 0
	134 JumpIfEqual {143}
	135 Move W8, 64
	136 Move [X20+12], W8
	137 Move X0, [X19+56]
	138 Compare X0, 0
	139 JumpIfEqual {143}
	140 Move X1, X20
	141 Move X2, X31
	142 Call NetworkRunner.SendRpc, X0, X1
	143 Call 0x1C17F20

Method: System.Void RPC_AddPlayerMoneyToAll(System.Int32 amount)

Disassembly:
	0x01DDBC58 MOV X1, X19
	0x01DDBC5C MOV X3, X31
	0x01DDBC60 MOV X21, X0
	0x01DDBC64 BL 0x2A6B948
	0x01DDBC68 MOV X0, X20
	0x01DDBC6C MOV X1, X21
	0x01DDBC70 MOV X2, X31
	0x01DDBC74 BL 0x33C0DE4
	0x01DDBC78 CBZ X0, 0x1DDBCAC
	0x01DDBC7C LDR X21, [X24]
	0x01DDBC80 MOV X20, X0
	0x01DDBC84 MOV X1, X21
	0x01DDBC88 BL 0x1C16E00
	0x01DDBC8C CBZ X0, 0x1DDBD9C
	0x01DDBC90 STR X0, [X29 + 0x20]
	0x01DDBC94 LDR X21, [X24]
	0x01DDBC98 MOV X0, X20
	0x01DDBC9C MOV X1, X21
	0x01DDBCA0 BL 0x1C16E00
	0x01DDBCA4 CBNZ X0, 0x1DDBCB0
	0x01DDBCA8 B 0x1DDBD9C
	0x01DDBCAC STR X31, [X29 + 0x20]
	0x01DDBCB0 LDR X8, [X19 + 0x28]
	0x01DDBCB4 ADD X28, X28, 0x1
	0x01DDBCB8 CBNZ X8, 0x1DDBBBC
	0x01DDBCBC B 0x1DDBD78
	0x01DDBCC0 LDR X8, [X19 + 0x30]
	0x01DDBCC4 CBZ X8, 0x1DDBD78
	0x01DDBCC8 LDR X0, [X23]
	0x01DDBCCC LDR W1, [X8 + 0x18]
	0x01DDBCD0 BL 0x1C16D6C
	0x01DDBCD4 LDR X8, [X19 + 0x30]
	0x01DDBCD8 STR X0, [X19 + 0x20]
	0x01DDBCDC CBZ X8, 0x1DDBD78
	0x01DDBCE0 MOV X23, X31
	0x01DDBCE4 MOV X21, X31
	0x01DDBCE8 LDR W9, [X8 + 0x18]
	0x01DDBCEC CMP W21, W9
	0x01DDBCF0 B.GE 0x1DDBD7C
	0x01DDBCF4 CMP W21, W9
	0x01DDBCF8 B.CS 0x1DDBD98
	0x01DDBCFC ADD X8, X8, X21, 0x3, LSL
	0x01DDBD00 LDR X0, [X8 + 0x20]
	0x01DDBD04 CBZ X0, 0x1DDBD78
	0x01DDBD08 LDR X24, [X19 + 0x20]
	0x01DDBD0C MOV X1, X31
	0x01DDBD10 BL 0x3C1341C
	0x01DDBD14 LDR X8, [X22]
	0x01DDBD18 MOV X20, X0
	0x01DDBD1C LDR W9, [X8 + 0xE0]
	0x01DDBD20 CBNZ W9, 0x1DDBD2C
	0x01DDBD24 MOV X0, X8
	0x01DDBD28 BL 0x1C16DFC
	0x01DDBD2C CBZ X20, 0x1DDBD78
	0x01DDBD30 LDR X8, [X22]
	0x01DDBD34 MOV X0, X20
	0x01DDBD38 MOV X2, X31
	0x01DDBD3C LDR X8, [X8 + 0xB8]
	0x01DDBD40 LDR W1, [X8 + 0x4]
	0x01DDBD44 BL 0x3C14864
	0x01DDBD48 CBZ X24, 0x1DDBD78
	0x01DDBD4C LDR W8, [X24 + 0x18]
	0x01DDBD50 ADD X21, X21, 0x1
	0x01DDBD54 SUB W9, W21, 0x1
	0x01DDBD58 CMP W9, W8
	0x01DDBD5C B.CS 0x1DDBD98
	0x01DDBD60 ADD X8, X24, X23
	0x01DDBD64 STP S0, S1, [X8 + 0x20]
	0x01DDBD68 STP S2, S3, [X8 + 0x28]
	0x01DDBD6C LDR X8, [X19 + 0x30]
	0x01DDBD70 ADD X23, X23, 0x10
	0x01DDBD74 CBNZ X8, 0x1DDBCE8
	0x01DDBD78 BL 0x1C16F20
	0x01DDBD7C LDP X20, X19, [X31 + 0x50]
	0x01DDBD80 LDP X22, X21, [X31 + 0x40]
	0x01DDBD84 LDP X24, X23, [X31 + 0x30]
	0x01DDBD88 LDP X26, X25, [X31 + 0x20]
	0x01DDBD8C LDP X28, X27, [X31 + 0x10]
	0x01DDBD90 LDP X29, X30, [X31], #0x60
	0x01DDBD94 RET
	0x01DDBD98 BL 0x1C16F28
	0x01DDBD9C MOV X0, X20
	0x01DDBDA0 MOV X1, X21
	0x01DDBDA4 BL 0x1C171E0
	0x01DDBDA8 SUB X31, X31, 0x20
	0x01DDBDAC STP X30, X19, [X31 + 0x10]
	0x01DDBDB0 MOV X8, X1
	0x01DDBDB4 MOV X19, X0
	0x01DDBDB8 ADD X1, X31, 0x8
	0x01DDBDBC MOV X0, X8
	0x01DDBDC0 MOV X2, X31
	0x01DDBDC4 STR X31, [X31 + 0x8]
	0x01DDBDC8 BL 0x1E02B30
	0x01DDBDCC TBZ X0, 0x0, 0x1DDBDDC
	0x01DDBDD0 MOV X0, X19
	0x01DDBDD4 MOV W1, W31
	0x01DDBDD8 BL 0x1DDBDE8
	0x01DDBDDC LDP X30, X19, [X31 + 0x10]
	0x01DDBDE0 ADD X31, X31, 0x20
	0x01DDBDE4 RET
	0x01DDBDE8 STR X30, [X31 - 0x30]!
	0x01DDBDEC STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25FE000
	006 Move W8, [X21+3163]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x231C000
	014 Move X0, [X0+2680]
	015 Call 0x1C17CF4
	016 Move X0, 0x231E000
	017 Move X0, [X0+2712]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3163], W8
	021 Move W8, [X20+88]
	022 Compare W8, 0
	023 JumpIfEqual {41}
	024 Move [X20+88], W31
	025 Move TEMP, X19
	026 And TEMP, TEMP, -2147483648
	027 Compare TEMP, -2147483648
	028 JumpIfEqual {57}
	029 Move X0, [X20+176]
	030 Compare X0, 0
	031 JumpIfEqual {130}
	032 Move W1, W19
	033 Call ItemSellingMachineView.PlayValueTextAnimation, X0, X1
	034 Move W0, W19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Call GameManager.AddPlayerMoney, X0
	040 Return 
	041 Move X21, 0x231C000
	042 Move X21, [X21+2680]
	043 Move X0, [X21]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Move X1, X31
	050 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	051 Move X0, [X20+56]
	052 Compare X0, 0
	053 JumpIfEqual {130}
	054 Move X1, X31
	055 Call NetworkRunner.get_Stage, X0
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return 
	062 Move X0, [X20+64]
	063 Compare X0, 0
	064 JumpIfEqual {130}
	065 Move X1, X31
	066 Call NetworkObject.GetLocalAuthorityMask, X0
	067 And W31, W0, 7
	068 Move X8, [X20+56]
	069 Compare X8, 0
	070 JumpIfEqual {130}
	071 Move X0, [X8+80]
	072 Compare X0, 0
	073 JumpIfEqual {130}
	074 Move X1, X31
	075 Call Simulation.HasAnyActiveConnections, X0
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {25}
	080 Move X8, [X20+56]
	081 Compare X8, 0
	082 JumpIfEqual {130}
	083 Move X0, [X8+80]
	084 Move W1, 12
	085 Move X2, X31
	086 Call SimulationMessage.Allocate, X0, X1
	087 Move X8, [X20+64]
	088 Compare X8, 0
	089 JumpIfEqual {130}
	090 Move X8, [X8+32]
	091 Move X21, X0
	092 Compare X8, 0
	093 JumpIfEqual {113}
	094 Move W0, [X8]
	095 Move X0, [X21]
	096 Move X19, [X20+64]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 Move X8, 0x231E000
	102 Move X8, [X8+2712]
	103 Move X1, X19
	104 Move X20, [X31+16]
	105 Move X19, [X31+24]
	106 Move W2, 7
	107 Move X0, [X8]
	108 Move X3, X31
	109 Move X30, [X31+32]
	110 Move X21, [X31+40]
	111 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	112 Return 
	113 Move X0, X31
	114 Move W1, [X20+104]
	115 Move W2, 4
	116 Move X3, X31
	117 Call RpcHeader.Create, X0, X1, X2
	118 Move [X21+28], X0
	119 Move [X21+36], W19
	120 Compare X21, 0
	121 JumpIfEqual {130}
	122 Move W8, 96
	123 Move [X21+12], W8
	124 Move X0, [X20+56]
	125 Compare X0, 0
	126 JumpIfEqual {130}
	127 Move X1, X21
	128 Move X2, X31
	129 Call NetworkRunner.SendRpc, X0, X1
	130 Call 0x1C17F20

Method: System.Void RPC_ButtonPressed(System.Int32 buttonId)

Disassembly:
	0x01DD91E8 ADRP X0, 0x231F000
	0x01DD91EC LDR X0, [X0 + 0x9C8]
	0x01DD91F0 BL 0x1C16D08
	0x01DD91F4 MOV X1, X0
	0x01DD91F8 MOV X0, X19
	0x01DD91FC BL 0x1C16DEC
	0x01DD9200 STP X30, X19, [X31 - 0x10]!
	0x01DD9204 LDR X8, [X0 + 0x50]
	0x01DD9208 CBZ X8, 0x1DD9218
	0x01DD920C STR W1, [X8 + 0x68]
	0x01DD9210 LDP X30, X19, [X31], #0x10
	0x01DD9214 RET
	0x01DD9218 ADRP X0, 0x231A000
	0x01DD921C LDR X0, [X0 + 0x5B0]
	0x01DD9220 BL 0x1C16D08
	0x01DD9224 BL 0x1C16F10
	0x01DD9228 MOV X19, X0
	0x01DD922C ADRP X0, 0x231F000
	0x01DD9230 LDR X0, [X0 + 0x9C0]
	0x01DD9234 BL 0x1C16D08
	0x01DD9238 MOV X1, X0
	0x01DD923C MOV X0, X19
	0x01DD9240 MOV X2, X31
	0x01DD9244 BL 0x337DF1C
	0x01DD9248 ADRP X0, 0x231F000
	0x01DD924C LDR X0, [X0 + 0x9D0]
	0x01DD9250 BL 0x1C16D08
	0x01DD9254 MOV X1, X0
	0x01DD9258 MOV X0, X19
	0x01DD925C BL 0x1C16DEC
	0x01DD9260 STP X30, X19, [X31 - 0x10]!
	0x01DD9264 LDR X8, [X0 + 0x50]
	0x01DD9268 CBZ X8, 0x1DD9278
	0x01DD926C LDR W0, [X8 + 0x6C]
	0x01DD9270 LDP X30, X19, [X31], #0x10
	0x01DD9274 RET
	0x01DD9278 ADRP X0, 0x231A000
	0x01DD927C LDR X0, [X0 + 0x5B0]
	0x01DD9280 BL 0x1C16D08
	0x01DD9284 BL 0x1C16F10
	0x01DD9288 MOV X19, X0
	0x01DD928C ADRP X0, 0x231F000
	0x01DD9290 LDR X0, [X0 + 0x9D8]
	0x01DD9294 BL 0x1C16D08
	0x01DD9298 MOV X1, X0
	0x01DD929C MOV X0, X19
	0x01DD92A0 MOV X2, X31
	0x01DD92A4 BL 0x337DF1C
	0x01DD92A8 ADRP X0, 0x231F000
	0x01DD92AC LDR X0, [X0 + 0x9E0]
	0x01DD92B0 BL 0x1C16D08
	0x01DD92B4 MOV X1, X0
	0x01DD92B8 MOV X0, X19
	0x01DD92BC BL 0x1C16DEC
	0x01DD92C0 STP X30, X19, [X31 - 0x10]!
	0x01DD92C4 LDR X8, [X0 + 0x50]
	0x01DD92C8 CBZ X8, 0x1DD92D8
	0x01DD92CC STR W1, [X8 + 0x6C]
	0x01DD92D0 LDP X30, X19, [X31], #0x10
	0x01DD92D4 RET
	0x01DD92D8 ADRP X0, 0x231A000
	0x01DD92DC LDR X0, [X0 + 0x5B0]
	0x01DD92E0 BL 0x1C16D08
	0x01DD92E4 BL 0x1C16F10
	0x01DD92E8 MOV X19, X0
	0x01DD92EC ADRP X0, 0x231F000
	0x01DD92F0 LDR X0, [X0 + 0x9D8]
	0x01DD92F4 BL 0x1C16D08
	0x01DD92F8 MOV X1, X0
	0x01DD92FC MOV X0, X19
	0x01DD9300 MOV X2, X31
	0x01DD9304 BL 0x337DF1C
	0x01DD9308 ADRP X0, 0x231F000
	0x01DD930C LDR X0, [X0 + 0x9E8]
	0x01DD9310 BL 0x1C16D08
	0x01DD9314 MOV X1, X0
	0x01DD9318 MOV X0, X19
	0x01DD931C BL 0x1C16DEC
	0x01DD9320 STP X30, X19, [X31 - 0x10]!
	0x01DD9324 LDR X8, [X0 + 0x50]
	0x01DD9328 CBZ X8, 0x1DD9338
	0x01DD932C LDR W0, [X8 + 0x70]
	0x01DD9330 LDP X30, X19, [X31], #0x10
	0x01DD9334 RET
	0x01DD9338 ADRP X0, 0x231A000
	0x01DD933C LDR X0, [X0 + 0x5B0]
	0x01DD9340 BL 0x1C16D08
	0x01DD9344 BL 0x1C16F10
	0x01DD9348 MOV X19, X0
	0x01DD934C ADRP X0, 0x231F000
	0x01DD9350 LDR X0, [X0 + 0x9F0]
	0x01DD9354 BL 0x1C16D08
	0x01DD9358 MOV X1, X0
	0x01DD935C MOV X0, X19
	0x01DD9360 MOV X2, X31
	0x01DD9364 BL 0x337DF1C
	0x01DD9368 ADRP X0, 0x231F000
	0x01DD936C LDR X0, [X0 + 0x9F8]
	0x01DD9370 BL 0x1C16D08
	0x01DD9374 MOV X1, X0
	0x01DD9378 MOV X0, X19
	0x01DD937C BL 0x1C16DEC
	0x01DD9380 STP X30, X19, [X31 - 0x10]!
	0x01DD9384 LDR X8, [X0 + 0x50]
	0x01DD9388 CBZ X8, 0x1DD9398
	0x01DD938C STR W1, [X8 + 0x70]
	0x01DD9390 LDP X30, X19, [X31], #0x10
	0x01DD9394 RET
	0x01DD9398 ADRP X0, 0x231A000
	0x01DD939C LDR X0, [X0 + 0x5B0]
	0x01DD93A0 BL 0x1C16D08
	0x01DD93A4 BL 0x1C16F10
	0x01DD93A8 MOV X19, X0
	0x01DD93AC ADRP X0, 0x231F000
	0x01DD93B0 LDR X0, [X0 + 0x9F0]
	0x01DD93B4 BL 0x1C16D08
	0x01DD93B8 MOV X1, X0
	0x01DD93BC MOV X0, X19
	0x01DD93C0 MOV X2, X31
	0x01DD93C4 BL 0x337DF1C
	0x01DD93C8 ADRP X0, 0x231F000
	0x01DD93CC LDR X0, [X0 + 0xA00]
	0x01DD93D0 BL 0x1C16D08
	0x01DD93D4 MOV X1, X0
	0x01DD93D8 MOV X0, X19
	0x01DD93DC BL 0x1C16DEC
	0x01DD93E0 STP X30, X19, [X31 - 0x10]!
	0x01DD93E4 LDR X8, [X0 + 0x50]
	0x01DD93E8 CBZ X8, 0x1DD93F8
	0x01DD93EC LDR W0, [X8 + 0x74]
	0x01DD93F0 LDP X30, X19, [X31], #0x10
	0x01DD93F4 RET
	0x01DD93F8 ADRP X0, 0x231A000
	0x01DD93FC LDR X0, [X0 + 0x5B0]
	0x01DD9400 BL 0x1C16D08
	0x01DD9404 BL 0x1C16F10
	0x01DD9408 MOV X19, X0
	0x01DD940C ADRP X0, 0x231F000
	0x01DD9410 LDR X0, [X0 + 0xA08]
	0x01DD9414 BL 0x1C16D08
	0x01DD9418 MOV X1, X0
	0x01DD941C MOV X0, X19
	0x01DD9420 MOV X2, X31
	0x01DD9424 BL 0x337DF1C
	0x01DD9428 ADRP X0, 0x231F000
	0x01DD942C LDR X0, [X0 + 0xA10]
	0x01DD9430 BL 0x1C16D08
	0x01DD9434 MOV X1, X0
	0x01DD9438 MOV X0, X19
	0x01DD943C BL 0x1C16DEC
	0x01DD9440 STP X30, X19, [X31 - 0x10]!
	0x01DD9444 LDR X8, [X0 + 0x50]
	0x01DD9448 CBZ X8, 0x1DD9458
	0x01DD944C STR W1, [X8 + 0x74]
	0x01DD9450 LDP X30, X19, [X31], #0x10
	0x01DD9454 RET
	0x01DD9458 ADRP X0, 0x231A000
	0x01DD945C LDR X0, [X0 + 0x5B0]
	0x01DD9460 BL 0x1C16D08
	0x01DD9464 BL 0x1C16F10
	0x01DD9468 MOV X19, X0
	0x01DD946C ADRP X0, 0x231F000
	0x01DD9470 LDR X0, [X0 + 0xA08]
	0x01DD9474 BL 0x1C16D08
	0x01DD9478 MOV X1, X0
	0x01DD947C MOV X0, X19
	0x01DD9480 MOV X2, X31
	0x01DD9484 BL 0x337DF1C
	0x01DD9488 ADRP X0, 0x231F000
	0x01DD948C LDR X0, [X0 + 0xA18]
	0x01DD9490 BL 0x1C16D08
	0x01DD9494 MOV X1, X0
	0x01DD9498 MOV X0, X19
	0x01DD949C BL 0x1C16DEC
	0x01DD94A0 STP X30, X19, [X31 - 0x10]!
	0x01DD94A4 LDR X8, [X0 + 0x50]
	0x01DD94A8 CBZ X8, 0x1DD94B8
	0x01DD94AC LDR V0, [X8 + 0x78]
	0x01DD94B0 LDP X30, X19, [X31], #0x10
	0x01DD94B4 RET
	0x01DD94B8 ADRP X0, 0x231A000
	0x01DD94BC LDR X0, [X0 + 0x5B0]
	0x01DD94C0 BL 0x1C16D08
	0x01DD94C4 BL 0x1C16F10
	0x01DD94C8 MOV X19, X0
	0x01DD94CC ADRP X0, 0x231F000
	0x01DD94D0 LDR X0, [X0 + 0xA20]
	0x01DD94D4 BL 0x1C16D08
	0x01DD94D8 MOV X1, X0
	0x01DD94DC MOV X0, X19
	0x01DD94E0 MOV X2, X31
	0x01DD94E4 BL 0x337DF1C
	0x01DD94E8 ADRP X0, 0x231F000
	0x01DD94EC LDR X0, [X0 + 0xA28]
	0x01DD94F0 BL 0x1C16D08
	0x01DD94F4 MOV X1, X0
	0x01DD94F8 MOV X0, X19
	0x01DD94FC BL 0x1C16DEC
	0x01DD9500 STP X30, X19, [X31 - 0x10]!
	0x01DD9504 LDR X8, [X0 + 0x50]
	0x01DD9508 CBZ X8, 0x1DD9518
	0x01DD950C STR S0, [X8 + 0x78]
	0x01DD9510 LDP X30, X19, [X31], #0x10
	0x01DD9514 RET
	0x01DD9518 ADRP X0, 0x231A000
	0x01DD951C LDR X0, [X0 + 0x5B0]
	0x01DD9520 BL 0x1C16D08
	0x01DD9524 BL 0x1C16F10
	0x01DD9528 MOV X19, X0
	0x01DD952C ADRP X0, 0x231F000
	0x01DD9530 LDR X0, [X0 + 0xA20]
	0x01DD9534 BL 0x1C16D08
	0x01DD9538 MOV X1, X0
	0x01DD953C MOV X0, X19
	0x01DD9540 MOV X2, X31
	0x01DD9544 BL 0x337DF1C
	0x01DD9548 ADRP X0, 0x231F000
	0x01DD954C LDR X0, [X0 + 0xA30]
	0x01DD9550 BL 0x1C16D08
	0x01DD9554 MOV X1, X0
	0x01DD9558 MOV X0, X19
	0x01DD955C BL 0x1C16DEC
	0x01DD9560 SUB X31, X31, 0x50
	0x01DD9564 STR D10, [X31 + 0x20]
	0x01DD9568 STP D9, D8, [X31 + 0x28]
	0x01DD956C STR X30, [X31 + 0x38]
	0x01DD9570 STP X20, X19, [X31 + 0x40]
	0x01DD9574 ADRP X20, 0x25FF000
	0x01DD9578 LDRB W8, [X20 + 0xC51]
	0x01DD957C MOV X19, X0
	0x01DD9580 TBNZ X8, 0x0, 0x1DD9598
	0x01DD9584 ADRP X0, 0x231F000
	0x01DD9588 LDR X0, [X0 + 0xA38]
	0x01DD958C BL 0x1C16CF4
	0x01DD9590 MOVZ W8, 0x1
	0x01DD9594 STRB W8, [X20 + 0xC51]
	0x01DD9598 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], D8
	003 Move [X31+112], X30
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Move X21, 0x2600000
	008 Move W8, [X21+3164]
	009 Move W20, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x2320000
	016 Move X0, [X0+2288]
	017 Call 0x1C17CF4
	018 Move X0, 0x2320000
	019 Move X0, [X0+2296]
	020 Call 0x1C17CF4
	021 Move X0, 0x231E000
	022 Move X0, [X0+2680]
	023 Call 0x1C17CF4
	024 Move X0, 0x2320000
	025 Move X0, [X0+2304]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3164], W8
	029 Move [X31+64], X31
	030 Move [X31+72], X31
	031 Move [X31+80], X31
	032 Move [X31+32], X31
	033 Move [X31+40], X31
	034 Move [X31+48], X31
	035 Move W8, [X19+88]
	036 Compare W8, 0
	037 JumpIfEqual {172}
	038 Move [X19+88], W31
	039 Move X8, [X19+184]
	040 Compare X8, 0
	041 JumpIfEqual {267}
	042 Move W9, [X8+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X21, W20
	045 Add X8, X8, X21
	046 Move X0, [X8+32]
	047 Compare X0, 0
	048 JumpIfEqual {267}
	049 Call ItemSellingMachineButtonView.PlayButtonPressedAnimation, X0
	050 Move X0, X19
	051 Call ItemSellingMachineController.get_isExploded, X0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {234}
	056 Move X8, [X19+192]
	057 Compare X8, 0
	058 JumpIfEqual {267}
	059 Move W9, [X8+24]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Add X8, X8, X21
	062 Move X21, [X8+32]
	063 Move X0, X19
	064 Move X1, X31
	065 Call Component.get_transform, X0
	066 Compare X0, 0
	067 JumpIfEqual {267}
	068 Move X1, X31
	069 Call Transform.get_position, X0
	070 Move S3, 1
	071 Move X0, X21
	072 Move X1, X31
	073 Call SFXManager.PlaySFX, X0, X1, V0
	074 Move X0, [X19+64]
	075 Compare X0, 0
	076 JumpIfEqual {234}
	077 Move W8, [X0+96]
	078 Move TEMP, X8
	079 And TEMP, TEMP, 2
	080 Compare TEMP, 2
	081 JumpIfEqual {234}
	082 Move X1, X31
	083 Call NetworkObject.get_HasStateAuthority, X0
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {234}
	088 Add X8, X31, 8
	089 Move X0, X19
	090 Call ItemSellingMachineController.get_isButtonPressed, X0
	091 Move X9, 0x2320000
	092 NotImplemented "Instruction LDUR not yet implemented."
	093 Move X8, [X31+24]
	094 Move X9, [X9+2296]
	095 Add X0, X31, 64
	096 Move W2, 1
	097 Move W1, W20
	098 Move X3, [X9]
	099 Move [X31+4], V0
	100 Move [X31+80], X8
	101 Call 0x240C0B0, X0, X1, X2
	102 Add X8, X31, 8
	103 Move X0, X19
	104 Call ItemSellingMachineController.get__timerResetButton, X0
	105 NotImplemented "Instruction LDUR not yet implemented."
	106 Move X8, [X31+24]
	107 Move X1, X31
	108 Move [X31+2], V0
	109 Move [X31+48], X8
	110 Move X0, [X19+56]
	111 Move S0, 5
	112 Call TickTimer.CreateFromSeconds, X0, V0
	113 Move X8, 0x2320000
	114 Move X8, [X8+2288]
	115 And X2, X0, 0
	116 Add X0, X31, 32
	117 Move W1, W20
	118 Move X3, [X8]
	119 Call NetworkArray`1<TickTimer>.Set, X0, X1, X2
	120 Move X0, X19
	121 Call ItemSellingMachineController.get_heatMeter, X0
	122 Move X8, -19849216
	123 Move V1, [X8+268]
	124 Move X0, X19
	125 Add S0, S0, S1
	126 Call ItemSellingMachineController.set_heatMeter, X0, V0
	127 Move X0, X19
	128 Call ItemSellingMachineController.get_isSellingInProgress, X0
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfEqual {234}
	133 Move X0, X19
	134 Call ItemSellingMachineController.get_randomButtonId, X0
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move X0, X19
	137 Call ItemSellingMachineController.get_heatMeter, X0
	138 Move X8, -19849216
	139 Move V1, [X8+824]
	140 Move X0, X19
	141 Add S0, S0, S1
	142 Call ItemSellingMachineController.set_heatMeter, X0, V0
	143 Move X0, X19
	144 Call ItemSellingMachineController.get_heatMeter, X0
	145 Move W8, 0x42C80000
	146 Move S1, W8
	147 NotImplemented "Instruction FCMP not yet implemented."
	148 Move S0, 2
	149 Move S1, 5
	150 Move X0, X31
	151 Call Random.Range, V0, V1
	152 Move X0, X19
	153 Move V8, V0
	154 Call ItemSellingMachineController.RPC_StartItemSelling, X0, V0
	155 Move X8, -19853312
	156 Move X0, [X19+56]
	157 Move V0, [X8+4076]
	158 Move X1, X31
	159 Call TickTimer.CreateFromSeconds, X0, V0
	160 And X1, X0, 0
	161 Move X0, X19
	162 Call ItemSellingMachineController.set__timerItemSell, X0, X1
	163 Move X8, -19853312
	164 Move V0, [X8+4036]
	165 Move X0, [X19+56]
	166 Move X1, X31
	167 Add S0, S8, S0
	168 Call TickTimer.CreateFromSeconds, X0, V0
	169 And X1, X0, 0
	170 Move X0, X19
	171 Call ItemSellingMachineController.set__timerAnimationFinished, X0, X1
	172 Move X21, 0x231E000
	173 Move X21, [X21+2680]
	174 Move X0, [X21]
	175 Move W8, [X0+224]
	176 Compare W8, 0
	177 JumpIfNotEqual {179}
	178 Call 0x1C17DFC
	179 Move X0, X19
	180 Move X1, X31
	181 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	182 Move X0, [X19+56]
	183 Compare X0, 0
	184 JumpIfEqual {267}
	185 Move X1, X31
	186 Call NetworkRunner.get_Stage, X0
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move X0, [X19+64]
	189 Compare X0, 0
	190 JumpIfEqual {267}
	191 Move X1, X31
	192 Call NetworkObject.GetLocalAuthorityMask, X0
	193 And W31, W0, 7
	194 Move X8, [X19+56]
	195 Compare X8, 0
	196 JumpIfEqual {267}
	197 Move X0, [X8+80]
	198 Compare X0, 0
	199 JumpIfEqual {267}
	200 Move X1, X31
	201 Call Simulation.HasAnyActiveConnections, X0
	202 Move TEMP, X0
	203 And TEMP, TEMP, 1
	204 Compare TEMP, 1
	205 JumpIfNotEqual {39}
	206 Move X8, [X19+56]
	207 Compare X8, 0
	208 JumpIfEqual {267}
	209 Move X0, [X8+80]
	210 Move W1, 12
	211 Move X2, X31
	212 Call SimulationMessage.Allocate, X0, X1
	213 Move X8, [X19+64]
	214 Compare X8, 0
	215 JumpIfEqual {267}
	216 Move X8, [X8+32]
	217 Move X21, X0
	218 Compare X8, 0
	219 JumpIfEqual {241}
	220 Move W0, [X8]
	221 Move X0, [X21]
	222 Move X19, [X19+64]
	223 Move W8, [X0+224]
	224 Compare W8, 0
	225 JumpIfNotEqual {227}
	226 Call 0x1C17DFC
	227 Move X8, 0x2320000
	228 Move X8, [X8+2304]
	229 Move W2, 7
	230 Move X1, X19
	231 Move X3, X31
	232 Move X0, [X8]
	233 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	234 Move X20, [X31+128]
	235 Move X19, [X31+136]
	236 Move X30, [X31+112]
	237 Move X21, [X31+120]
	238 Move V8, [X31+96]
	239 Add X31, X31, 144
	240 Return 
	241 Move X0, X31
	242 Move W1, [X19+104]
	243 Move W2, 5
	244 Move X3, X31
	245 Call RpcHeader.Create, X0, X1, X2
	246 Move [X21+28], X0
	247 Move [X21+36], W20
	248 Compare X21, 0
	249 JumpIfEqual {267}
	250 Move W8, 96
	251 Move [X21+12], W8
	252 Move X0, [X19+56]
	253 Compare X0, 0
	254 JumpIfEqual {267}
	255 Move X1, X21
	256 Move X2, X31
	257 Call NetworkRunner.SendRpc, X0, X1
	258 Move X0, X19
	259 Call ItemSellingMachineController.RPC_ExplodeMachine, X0
	260 Move X0, [X19+56]
	261 Move S0, 5
	262 Move X1, X31
	263 Call TickTimer.CreateFromSeconds, X0, V0
	264 And X1, X0, 0
	265 Move X0, X19
	266 Call ItemSellingMachineController.set__timerRecoverExplosion, X0, X1
	267 Call 0x1C17F20
	268 Call 0x1C17F28

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01DDC2A8 B 0x3C36C30
	0x01DDC2AC STP X30, X25, [X31 - 0x40]!
	0x01DDC2B0 STP X24, X23, [X31 + 0x10]
	0x01DDC2B4 STP X22, X21, [X31 + 0x20]
	0x01DDC2B8 STP X20, X19, [X31 + 0x30]
	0x01DDC2BC ADRP X24, 0x25FC000
	0x01DDC2C0 ADRP X25, 0x231C000
	0x01DDC2C4 ADRP X20, 0x231C000
	0x01DDC2C8 ADRP X23, 0x231B000
	0x01DDC2CC ADRP X22, 0x231A000
	0x01DDC2D0 ADRP X21, 0x2317000
	0x01DDC2D4 ADRP X19, 0x231C000
	0x01DDC2D8 LDR X25, [X25 + 0xB18]
	0x01DDC2DC LDRB W8, [X24 + 0xC6E]
	0x01DDC2E0 LDR X20, [X20 + 0xA48]
	0x01DDC2E4 LDR X23, [X23 + 0x220]
	0x01DDC2E8 LDR X22, [X22 + 0xC88]
	0x01DDC2EC LDR X21, [X21 + 0x638]
	0x01DDC2F0 LDR X19, [X19 + 0xB20]
	0x01DDC2F4 TBNZ X8, 0x0, 0x1DDC348
	0x01DDC2F8 ADRP X0, 0x231C000
	0x01DDC2FC LDR X0, [X0 + 0xA48]
	0x01DDC300 BL 0x1C16CF4
	0x01DDC304 ADRP X0, 0x2317000
	0x01DDC308 LDR X0, [X0 + 0x638]
	0x01DDC30C BL 0x1C16CF4
	0x01DDC310 ADRP X0, 0x231C000
	0x01DDC314 LDR X0, [X0 + 0xB20]
	0x01DDC318 BL 0x1C16CF4
	0x01DDC31C ADRP X0, 0x231B000
	0x01DDC320 LDR X0, [X0 + 0x220]
	0x01DDC324 BL 0x1C16CF4
	0x01DDC328 ADRP X0, 0x231C000
	0x01DDC32C LDR X0, [X0 + 0xB18]
	0x01DDC330 BL 0x1C16CF4
	0x01DDC334 ADRP X0, 0x231A000
	0x01DDC338 LDR X0, [X0 + 0xC88]
	0x01DDC33C BL 0x1C16CF4
	0x01DDC340 MOVZ W8, 0x1
	0x01DDC344 STRB W8, [X24 + 0xC6E]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move S0, W31
	008 Move S1, 1
	009 Move S2, W31
	010 Move S3, 1
	011 Move X0, X31
	012 Call Gizmos.set_color, X0
	013 Move X0, X19
	014 Call ItemSellingMachineController.get__capsulePoint0, X0
	015 Move X8, -19861504
	016 Move V8, [X8+92]
	017 Move X0, X31
	018 Move V3, V8
	019 Call Gizmos.DrawWireSphere, X0, V0
	020 Move X0, X19
	021 Call ItemSellingMachineController.get__capsulePoint1, X0
	022 Move V3, V8
	023 Move X0, X31
	024 Call Gizmos.DrawWireSphere, X0, V0
	025 Move X0, X19
	026 Call ItemSellingMachineController.get__capsulePoint0, X0
	027 Move X0, X19
	028 Move V8, V0
	029 Move V9, V1
	030 Move V10, V2
	031 Call ItemSellingMachineController.get__capsulePoint1, X0
	032 Move V3, V0
	033 Move V4, V1
	034 Move V0, V8
	035 Move V1, V9
	036 Move X30, [X31+32]
	037 Move X19, [X31+40]
	038 Move D9, [X31+16]
	039 Move D8, [X31+24]
	040 Move V5, V2
	041 Move V2, V10
	042 Move X0, X31
	043 Move V10, [X31+48]
	044 Call Gizmos.DrawLine, X0, X1
	045 Return 

Method: System.Void .ctor()

Disassembly:
	0x01DDC348 LDR X0, [X25]
	0x01DDC34C MOV X1, X31
	0x01DDC350 BL 0x3C124EC
	0x01DDC354 LDR X8, [X20]
	0x01DDC358 MOV X1, X31
	0x01DDC35C LDR X8, [X8 + 0xB8]
	0x01DDC360 STR W0, [X8]
	0x01DDC364 LDR X0, [X23]
	0x01DDC368 BL 0x3C124EC
	0x01DDC36C LDR X8, [X20]
	0x01DDC370 MOV X1, X31
	0x01DDC374 LDR X8, [X8 + 0xB8]
	0x01DDC378 STR W0, [X8 + 0x4]
	0x01DDC37C LDR X0, [X22]
	0x01DDC380 BL 0x3C124EC
	0x01DDC384 LDR X8, [X20]
	0x01DDC388 MOVZ W1, 0x3
	0x01DDC38C LDR X8, [X8 + 0xB8]
	0x01DDC390 STR W0, [X8 + 0x8]
	0x01DDC394 LDR X0, [X21]
	0x01DDC398 BL 0x1C16D6C
	0x01DDC39C LDR X1, [X19]
	0x01DDC3A0 MOV X2, X31
	0x01DDC3A4 MOV X19, X0
	0x01DDC3A8 BL 0x32C5BD8
	0x01DDC3AC LDR X8, [X20]
	0x01DDC3B0 ADRP X9, 0xFFFFFFFFFED0F000
	0x01DDC3B4 LDR V0, [X9 + 0xD6]
	0x01DDC3B8 LDP X22, X21, [X31 + 0x20]
	0x01DDC3BC LDR X8, [X8 + 0xB8]
	0x01DDC3C0 LDP X24, X23, [X31 + 0x10]
	0x01DDC3C4 STR X19, [X8 + 0x10]
	0x01DDC3C8 LDP X20, X19, [X31 + 0x30]
	0x01DDC3CC STUR V0, [X8 + 0x18]
	0x01DDC3D0 LDP X30, X25, [X31], #0x40
	0x01DDC3D4 RET
	0x01DDC3D8 STR X30, [X31 - 0x20]!
	0x01DDC3DC STP X20, X19, [X31 + 0x10]
	0x01DDC3E0 ADRP X19, 0x25FC000
	0x01DDC3E4 ADRP X20, 0x231C000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x25FD000
	008 Move X23, 0x231D000
	009 Move X21, 0x231B000
	010 Move X20, 0x231B000
	011 Move W8, [X22+3165]
	012 Move X23, [X23+2728]
	013 Move X21, [X21+3656]
	014 Move X20, [X20+3664]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x231B000
	021 Move X0, [X0+3664]
	022 Call 0x1C17CF4
	023 Move X0, 0x231B000
	024 Move X0, [X0+3656]
	025 Call 0x1C17CF4
	026 Move X0, 0x231D000
	027 Move X0, [X0+2728]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+3165], W8
	031 Move X0, [X23]
	032 Move W1, 12
	033 Call 0x1C17D6C
	034 Move [X19+184], X0
	035 Move X0, [X21]
	036 Call 0x1C17F10
	037 Move X1, [X20]
	038 Move X20, X0
	039 Call HashSet`1<Object>..ctor, X0
	040 Move [X19+232], X20
	041 Move X0, X19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X1, X31
	047 Move X30, [X31+48]
	048 Move X23, [X31+56]
	049 Call NetworkBehaviour..ctor, X0
	050 Return 

Method: System.Void .cctor()

Disassembly:
	0x01DDC3E8 LDRB W8, [X19 + 0xC6F]
	0x01DDC3EC LDR X20, [X20 + 0xB28]
	0x01DDC3F0 TBNZ X8, 0x0, 0x1DDC408
	0x01DDC3F4 ADRP X0, 0x231C000
	0x01DDC3F8 LDR X0, [X0 + 0xB28]
	0x01DDC3FC BL 0x1C16CF4
	0x01DDC400 MOVZ W8, 0x1
	0x01DDC404 STRB W8, [X19 + 0xC6F]
	0x01DDC408 LDR X0, [X20]
	0x01DDC40C BL 0x1C16F10
	0x01DDC410 MOV X1, X31
	0x01DDC414 MOV X19, X0
	0x01DDC418 BL 0x33BDD8C
	0x01DDC41C LDR X8, [X20]
	0x01DDC420 LDR X8, [X8 + 0xB8]
	0x01DDC424 STR X19, [X8]
	0x01DDC428 LDP X20, X19, [X31 + 0x10]
	0x01DDC42C LDR X30, [X31], #0x20
	0x01DDC430 RET
	0x01DDC434 MOV X1, X31
	0x01DDC438 B 0x33BDD8C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x25FD000
	005 Move X20, 0x231D000
	006 Move W8, [X19+3166]
	007 Move X20, [X20+2616]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x231D000
	013 Move X0, [X0+2616]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3166], W8
	017 Move X8, [X20]
	018 Move X9, -19849216
	019 Move V0, [X9+2304]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X8, [X8+184]
	023 Move [X8], D0
	024 Move [X8+8], W31
	025 Move X30, [X31+32]
	026 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DDC43C CMP X1, 0x0
	0x01DDC440 CSET W0, EQ
	0x01DDC444 RET
	0x01DDC448 RET
	0x01DDC44C STR X30, [X31 - 0x40]!
	0x01DDC450 STP X24, X23, [X31 + 0x10]
	0x01DDC454 STP X22, X21, [X31 + 0x20]
	0x01DDC458 STP X20, X19, [X31 + 0x30]
	0x01DDC45C ADRP X20, 0x25FC000
	0x01DDC460 LDRB W8, [X20 + 0xC70]
	0x01DDC464 MOV X19, X0
	0x01DDC468 TBNZ X8, 0x0, 0x1DDC4B0
	0x01DDC46C ADRP X0, 0x231C000
	0x01DDC470 LDR X0, [X0 + 0xB30]
	0x01DDC474 BL 0x1C16CF4
	0x01DDC478 ADRP X0, 0x231C000
	0x01DDC47C LDR X0, [X0 + 0xA48]
	0x01DDC480 BL 0x1C16CF4
	0x01DDC484 ADRP X0, 0x231C000
	0x01DDC488 LDR X0, [X0 + 0xB38]
	0x01DDC48C BL 0x1C16CF4
	0x01DDC490 ADRP X0, 0x231C000
	0x01DDC494 LDR X0, [X0 + 0xB40]
	0x01DDC498 BL 0x1C16CF4
	0x01DDC49C ADRP X0, 0x231C000
	0x01DDC4A0 LDR X0, [X0 + 0xB28]
	0x01DDC4A4 BL 0x1C16CF4
	0x01DDC4A8 MOVZ W8, 0x1
	0x01DDC4AC STRB W8, [X20 + 0xC70]
	0x01DDC4B0 LDR W8, [X19 + 0x10]
	0x01DDC4B4 LDR X22, [X19 + 0x20]
	0x01DDC4B8 CMP W8, 0x1
	0x01DDC4BC B.EQ 0x1DDC5AC
	0x01DDC4C0 CBNZ W8, 0x1DDC754
	0x01DDC4C4 MOVN W8, 0x0
	0x01DDC4C8 STR W8, [X19 + 0x10]
	0x01DDC4CC CBZ X22, 0x1DDC770
	0x01DDC4D0 LDR X0, [X22 + 0x38]
	0x01DDC4D4 CBZ X0, 0x1DDC770
	0x01DDC4D8 MOV X1, X31
	0x01DDC4DC BL 0x3C1341C
	0x01DDC4E0 ADRP X21, 0x231C000
	0x01DDC4E4 LDR X21, [X21 + 0xA48]
	0x01DDC4E8 MOV X20, X0
	0x01DDC4EC LDR X8, [X21]
	0x01DDC4F0 LDR W9, [X8 + 0xE0]
	0x01DDC4F4 CBNZ W9, 0x1DDC500
	0x01DDC4F8 MOV X0, X8
	0x01DDC4FC BL 0x1C16DFC
	0x01DDC500 CBZ X20, 0x1DDC770
	0x01DDC504 LDR X8, [X21]
	0x01DDC508 FMOV S0, 1
	0x01DDC50C MOV X0, X20
	0x01DDC510 MOV X2, X31
	0x01DDC514 LDR X8, [X8 + 0xB8]
	0x01DDC518 LDR W1, [X8]
	0x01DDC51C BL 0x3C15CD8
	0x01DDC520 LDR X8, [X22 + 0x40]
	0x01DDC524 CBZ X8, 0x1DDC770
	0x01DDC528 LDRSW X9, [X19 + 0x28]
	0x01DDC52C LDR W10, [X8 + 0x18]
	0x01DDC530 CMP W9, W10
	0x01DDC534 B.CS 0x1DDC774
	0x01DDC538 ADD X8, X8, X9, 0x3, LSL
	0x01DDC53C LDR X0, [X8 + 0x20]
	0x01DDC540 CBZ X0, 0x1DDC770
	0x01DDC544 MOV X1, X31
	0x01DDC548 BL 0x3C1341C
	0x01DDC54C CBZ X0, 0x1DDC770
	0x01DDC550 LDR X8, [X21]
	0x01DDC554 FMOV S0, 1
	0x01DDC558 MOV X2, X31
	0x01DDC55C LDR X8, [X8 + 0xB8]
	0x01DDC560 LDR W1, [X8]
	0x01DDC564 BL 0x3C15CD8
	0x01DDC568 LDR X8, [X22 + 0x48]
	0x01DDC56C CBZ X8, 0x1DDC770
	0x01DDC570 LDRSW X9, [X19 + 0x28]
	0x01DDC574 LDR W10, [X8 + 0x18]
	0x01DDC578 CMP W9, W10
	0x01DDC57C B.CS 0x1DDC774
	0x01DDC580 ADD X8, X8, X9, 0x3, LSL
	0x01DDC584 LDR X0, [X8 + 0x20]
	0x01DDC588 CBZ X0, 0x1DDC770
	0x01DDC58C MOVZ W1, 0x1
	0x01DDC590 MOV X2, X31
	0x01DDC594 MOVZ W20, 0x1
	0x01DDC598 BL 0x3C32410
	0x01DDC59C LDR X8, [X22 + 0x90]
	0x01DDC5A0 STR W20, [X19 + 0x10]
	0x01DDC5A4 STR X8, [X19 + 0x18]
	0x01DDC5A8 B 0x1DDC758
	0x01DDC5AC MOVN W8, 0x0
	0x01DDC5B0 STR W8, [X19 + 0x10]
	0x01DDC5B4 CBZ X22, 0x1DDC770
	0x01DDC5B8 LDR X8, [X22 + 0x40]
	0x01DDC5BC CBZ X8, 0x1DDC770
	0x01DDC5C0 LDRSW X9, [X19 + 0x28]
	0x01DDC5C4 LDR W10, [X8 + 0x18]
	0x01DDC5C8 CMP W9, W10
	0x01DDC5CC B.CS 0x1DDC774
	0x01DDC5D0 ADD X8, X8, X9, 0x3, LSL
	0x01DDC5D4 LDR X0, [X8 + 0x20]
	0x01DDC5D8 CBZ X0, 0x1DDC770

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+96], X30
	003 Move [X31+112], X24
	004 Move [X31+120], X23
	005 Move [X31+128], X22
	006 Move [X31+136], X21
	007 Move [X31+144], X20
	008 Move [X31+152], X19
	009 Move X21, 0x25FD000
	010 Move X20, 0x231B000
	011 Move W8, [X21+3167]
	012 Move X20, [X20+2680]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0x231D000
	019 Move X0, [X0+2736]
	020 Call 0x1C17CF4
	021 Move X0, 0x231D000
	022 Move X0, [X0+2744]
	023 Call 0x1C17CF4
	024 Move X0, 0x231B000
	025 Move X0, [X0+2680]
	026 Call 0x1C17CF4
	027 Move X0, 0x231D000
	028 Move X0, [X0+2752]
	029 Call 0x1C17CF4
	030 Move X0, 0x231D000
	031 Move X0, [X0+2760]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+3167], W8
	035 Move X23, 0x231D000
	036 Move X23, [X23+2752]
	037 Move W1, [X19+128]
	038 Move X24, 0x231D000
	039 Move X22, 0x231D000
	040 Move X21, 0x231D000
	041 Move X24, [X24+2736]
	042 Move X22, [X22+2760]
	043 Move X21, [X21+2744]
	044 Move X0, X19
	045 Call ItemSellingMachineController.set_isSellingInProgress, X0, X1
	046 Move W1, [X19+129]
	047 Move X0, X19
	048 Call ItemSellingMachineController.set_isOverheated, X0, X1
	049 Move W1, [X19+130]
	050 Move X0, X19
	051 Call ItemSellingMachineController.set_isExploded, X0, X1
	052 Move W1, [X19+132]
	053 Move X0, X19
	054 Call ItemSellingMachineController.set_itemSoldValue, X0, X1
	055 Add X8, X31, 64
	056 Move X0, X19
	057 Call ItemSellingMachineController.get_isButtonPressed, X0
	058 Move V0, [X31+4]
	059 Move X8, [X31+80]
	060 Move X0, [X20]
	061 Move [X31+2], V0
	062 Move [X31+48], X8
	063 Move W8, [X0+224]
	064 Move X20, [X19+136]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X2, [X23]
	069 Move V0, [X31+2]
	070 Move X8, [X31+48]
	071 Move X3, [X24]
	072 Add X0, X31, 64
	073 Move X1, X20
	074 Move [X31+4], V0
	075 Move [X31+80], X8
	076 Call 0x2229F44, X0, X1, X2
	077 Add X8, X31, 64
	078 Move X0, X19
	079 Call ItemSellingMachineController.get__timerResetButton, X0
	080 Move X8, [X31+80]
	081 Move V0, [X31+4]
	082 Move X2, [X22]
	083 Move X3, [X21]
	084 Move [X31+16], X8
	085 Move [X31], V0
	086 Move X1, [X19+144]
	087 Add X0, X31, 64
	088 Move [X31+4], V0
	089 Move [X31+80], X8
	090 Call NetworkBehaviourUtils.InitializeNetworkArray, X0, X1, X2
	091 Move W1, [X19+152]
	092 Move X0, X19
	093 Call ItemSellingMachineController.set__timerAnimationFinished, X0, X1
	094 Move W1, [X19+156]
	095 Move X0, X19
	096 Call ItemSellingMachineController.set__timerItemSell, X0, X1
	097 Move W1, [X19+160]
	098 Move X0, X19
	099 Call ItemSellingMachineController.set__timerRecoverExplosion, X0, X1
	100 Move W1, [X19+164]
	101 Move X0, X19
	102 Call ItemSellingMachineController.set_randomButtonId, X0, X1
	103 Move V0, [X19+168]
	104 Move X0, X19
	105 Call ItemSellingMachineController.set_heatMeter, X0, V0
	106 Move X20, [X31+144]
	107 Move X19, [X31+152]
	108 Move X22, [X31+128]
	109 Move X21, [X31+136]
	110 Move X24, [X31+112]
	111 Move X23, [X31+120]
	112 Move X30, [X31+96]
	113 Add X31, X31, 160
	114 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DDC5DC MOV X1, X31
	0x01DDC5E0 BL 0x3C1341C
	0x01DDC5E4 ADRP X23, 0x231C000
	0x01DDC5E8 LDR X23, [X23 + 0xA48]
	0x01DDC5EC MOV X20, X0
	0x01DDC5F0 LDR X8, [X23]
	0x01DDC5F4 LDR W9, [X8 + 0xE0]
	0x01DDC5F8 CBNZ W9, 0x1DDC604
	0x01DDC5FC MOV X0, X8
	0x01DDC600 BL 0x1C16DFC
	0x01DDC604 CBZ X20, 0x1DDC770
	0x01DDC608 LDR X8, [X23]
	0x01DDC60C FMOV S0, W31
	0x01DDC610 MOV X0, X20
	0x01DDC614 MOV X2, X31
	0x01DDC618 LDR X8, [X8 + 0xB8]
	0x01DDC61C LDR W1, [X8]
	0x01DDC620 BL 0x3C15CD8
	0x01DDC624 LDR X8, [X22 + 0x48]
	0x01DDC628 CBZ X8, 0x1DDC770
	0x01DDC62C LDRSW X9, [X19 + 0x28]
	0x01DDC630 LDR W10, [X8 + 0x18]
	0x01DDC634 CMP W9, W10
	0x01DDC638 B.CS 0x1DDC774
	0x01DDC63C ADD X8, X8, X9, 0x3, LSL
	0x01DDC640 LDR X0, [X8 + 0x20]
	0x01DDC644 CBZ X0, 0x1DDC770
	0x01DDC648 MOV W1, W31
	0x01DDC64C MOV X2, X31
	0x01DDC650 BL 0x3C32410
	0x01DDC654 LDR X8, [X22 + 0x88]
	0x01DDC658 CBZ X8, 0x1DDC770
	0x01DDC65C LDRSW X9, [X19 + 0x28]
	0x01DDC660 LDR W10, [X8 + 0x18]
	0x01DDC664 CMP W9, W10
	0x01DDC668 B.CS 0x1DDC774
	0x01DDC66C ADD X8, X8, X9, 0x3, LSL
	0x01DDC670 STR X31, [X8 + 0x20]
	0x01DDC674 ADRP X24, 0x231C000
	0x01DDC678 LDR X24, [X24 + 0xB28]
	0x01DDC67C LDR X19, [X22 + 0x88]
	0x01DDC680 LDR X0, [X24]
	0x01DDC684 LDR W8, [X0 + 0xE0]
	0x01DDC688 CBNZ W8, 0x1DDC694
	0x01DDC68C BL 0x1C16DFC
	0x01DDC690 LDR X0, [X24]
	0x01DDC694 LDR X8, [X0 + 0xB8]
	0x01DDC698 LDR X20, [X8 + 0x8]
	0x01DDC69C CBNZ X20, 0x1DDC6F0
	0x01DDC6A0 LDR W8, [X0 + 0xE0]
	0x01DDC6A4 CBNZ W8, 0x1DDC6B0
	0x01DDC6A8 BL 0x1C16DFC
	0x01DDC6AC LDR X0, [X24]
	0x01DDC6B0 ADRP X9, 0x231C000
	0x01DDC6B4 LDR X8, [X0 + 0xB8]
	0x01DDC6B8 LDR X9, [X9 + 0xB38]
	0x01DDC6BC LDR X21, [X8]
	0x01DDC6C0 LDR X0, [X9]
	0x01DDC6C4 BL 0x1C16F10
	0x01DDC6C8 ADRP X8, 0x231C000
	0x01DDC6CC LDR X8, [X8 + 0xB40]
	0x01DDC6D0 MOV X1, X21
	0x01DDC6D4 MOV X3, X31
	0x01DDC6D8 MOV X20, X0
	0x01DDC6DC LDR X2, [X8]
	0x01DDC6E0 BL 0x24AD1FC
	0x01DDC6E4 LDR X8, [X24]
	0x01DDC6E8 LDR X8, [X8 + 0xB8]
	0x01DDC6EC STR X20, [X8 + 0x8]
	0x01DDC6F0 ADRP X8, 0x231C000
	0x01DDC6F4 LDR X8, [X8 + 0xB30]
	0x01DDC6F8 MOV X0, X19
	0x01DDC6FC MOV X1, X20
	0x01DDC700 LDR X2, [X8]
	0x01DDC704 BL 0x217184C
	0x01DDC708 TBZ X0, 0x0, 0x1DDC754
	0x01DDC70C LDR X0, [X22 + 0x38]
	0x01DDC710 CBZ X0, 0x1DDC770
	0x01DDC714 MOV X1, X31
	0x01DDC718 BL 0x3C1341C
	0x01DDC71C LDR X8, [X23]
	0x01DDC720 MOV X19, X0
	0x01DDC724 LDR W9, [X8 + 0xE0]
	0x01DDC728 CBNZ W9, 0x1DDC734
	0x01DDC72C MOV X0, X8
	0x01DDC730 BL 0x1C16DFC
	0x01DDC734 CBZ X19, 0x1DDC770
	0x01DDC738 LDR X8, [X23]
	0x01DDC73C FMOV S0, W31
	0x01DDC740 MOV X0, X19
	0x01DDC744 MOV X2, X31
	0x01DDC748 LDR X8, [X8 + 0xB8]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+112], X22
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Move X20, 0x25FD000
	008 Move X21, 0x231B000
	009 Move W8, [X20+3168]
	010 Move X21, [X21+2680]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x231D000
	017 Move X0, [X0+2768]
	018 Call 0x1C17CF4
	019 Move X0, 0x231D000
	020 Move X0, [X0+2776]
	021 Call 0x1C17CF4
	022 Move X0, 0x231B000
	023 Move X0, [X0+2680]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3168], W8
	027 Move X22, 0x231D000
	028 Move X20, 0x231D000
	029 Move X22, [X22+2768]
	030 Move X20, [X20+2776]
	031 Move X0, X19
	032 Call ItemSellingMachineController.get_isSellingInProgress, X0
	033 And W8, W0, 1
	034 Move X0, X19
	035 Move [X19+128], W8
	036 Call ItemSellingMachineController.get_isOverheated, X0
	037 And W8, W0, 1
	038 Move X0, X19
	039 Move [X19+129], W8
	040 Call ItemSellingMachineController.get_isExploded, X0
	041 And W8, W0, 1
	042 Move X0, X19
	043 Move [X19+130], W8
	044 Call ItemSellingMachineController.get_itemSoldValue, X0
	045 Move [X19+132], W0
	046 Add X8, X31, 64
	047 Move X0, X19
	048 Call ItemSellingMachineController.get_isButtonPressed, X0
	049 Move V0, [X31+4]
	050 Move X8, [X31+80]
	051 Move X0, [X21]
	052 Move [X31+2], V0
	053 Move [X31+48], X8
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move V0, [X31+2]
	059 Move X8, [X31+48]
	060 Move X2, [X22]
	061 Add X1, X19, 136
	062 Add X0, X31, 64
	063 Move [X31+4], V0
	064 Move [X31+80], X8
	065 Call 0x2228DF8, X0, X1
	066 Add X8, X31, 64
	067 Move X0, X19
	068 Call ItemSellingMachineController.get__timerResetButton, X0
	069 Move X8, [X31+80]
	070 Move V0, [X31+4]
	071 Move X2, [X20]
	072 Add X1, X19, 144
	073 Add X0, X31, 64
	074 Move [X31+16], X8
	075 Move [X31], V0
	076 Move [X31+4], V0
	077 Move [X31+80], X8
	078 Call NetworkBehaviourUtils.CopyFromNetworkArray, X0, X1
	079 Move X0, X19
	080 Call ItemSellingMachineController.get__timerAnimationFinished, X0
	081 Move [X19+152], W0
	082 Move X0, X19
	083 Call ItemSellingMachineController.get__timerItemSell, X0
	084 Move [X19+156], W0
	085 Move X0, X19
	086 Call ItemSellingMachineController.get__timerRecoverExplosion, X0
	087 Move [X19+160], W0
	088 Move X0, X19
	089 Call ItemSellingMachineController.get_randomButtonId, X0
	090 Move [X19+164], W0
	091 Move X0, X19
	092 Call ItemSellingMachineController.get_heatMeter, X0
	093 Move [X19+168], S0
	094 Move X20, [X31+128]
	095 Move X19, [X31+136]
	096 Move X22, [X31+112]
	097 Move X21, [X31+120]
	098 Move X30, [X31+96]
	099 Add X31, X31, 144
	100 Return 

Method: System.Void RPC_StartItemSelling@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01DDC74C LDR W1, [X8]
	0x01DDC750 BL 0x3C15CD8
	0x01DDC754 MOV W20, W31
	0x01DDC758 MOV W0, W20
	0x01DDC75C LDP X20, X19, [X31 + 0x30]
	0x01DDC760 LDP X22, X21, [X31 + 0x20]
	0x01DDC764 LDP X24, X23, [X31 + 0x10]
	0x01DDC768 LDR X30, [X31], #0x40
	0x01DDC76C RET
	0x01DDC770 BL 0x1C16F20
	0x01DDC774 BL 0x1C16F28
	0x01DDC778 LDR X0, [X0 + 0x18]
	0x01DDC77C RET
	0x01DDC780 STP X30, X19, [X31 - 0x10]!
	0x01DDC784 ADRP X0, 0x2317000
	0x01DDC788 LDR X0, [X0 + 0xB40]
	0x01DDC78C BL 0x1C16D08
	0x01DDC790 BL 0x1C16F10
	0x01DDC794 MOV X1, X31
	0x01DDC798 MOV X19, X0
	0x01DDC79C BL 0x3380310
	0x01DDC7A0 ADRP X0, 0x231C000
	0x01DDC7A4 LDR X0, [X0 + 0xB48]
	0x01DDC7A8 BL 0x1C16D08
	0x01DDC7AC MOV X1, X0
	0x01DDC7B0 MOV X0, X19
	0x01DDC7B4 BL 0x1C16DEC
	0x01DDC7B8 LDR X0, [X0 + 0x18]
	0x01DDC7BC RET
	0x01DDC7C0 RET
	0x01DDC7C4 STR D10, [X31 - 0x50]!
	0x01DDC7C8 STP D9, D8, [X31 + 0x8]
	0x01DDC7CC STR X30, [X31 + 0x18]
	0x01DDC7D0 STP X24, X23, [X31 + 0x20]
	0x01DDC7D4 STP X22, X21, [X31 + 0x30]
	0x01DDC7D8 STP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25FD000
	006 Move W8, [X21+3169]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x231D000
	014 Move X0, [X0+2616]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3169], W8
	018 Compare X19, 0
	019 JumpIfEqual {43}
	020 Move X9, 0x231D000
	021 Move X9, [X9+2616]
	022 Move W8, 1
	023 Move V0, [X20+36]
	024 Move [X19+88], W8
	025 Move X8, [X19]
	026 Move X1, [X9]
	027 Move W10, [X8+304]
	028 Move W9, [X1+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X8+200]
	031 Add X8, X8, X9
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Call ItemSellingMachineController.RPC_StartItemSelling, X0, V0
	040 Return 
	041 Move X0, X19
	042 Call 0x1C181E0
	043 Call 0x1C17F20

Method: System.Void RPC_ExplodeMachine@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01DDC7DC ADRP X20, 0x25FC000
	0x01DDC7E0 LDRB W8, [X20 + 0xC71]
	0x01DDC7E4 MOV X19, X0
	0x01DDC7E8 TBNZ X8, 0x0, 0x1DDC80C
	0x01DDC7EC ADRP X0, 0x231C000
	0x01DDC7F0 LDR X0, [X0 + 0xA48]
	0x01DDC7F4 BL 0x1C16CF4
	0x01DDC7F8 ADRP X0, 0x231A000
	0x01DDC7FC LDR X0, [X0 + 0xC30]
	0x01DDC800 BL 0x1C16CF4
	0x01DDC804 MOVZ W8, 0x1
	0x01DDC808 STRB W8, [X20 + 0xC71]
	0x01DDC80C LDR W8, [X19 + 0x10]
	0x01DDC810 CMP W8, 0x4
	0x01DDC814 B.HI 0x1DDCC50
	0x01DDC818 LDR X20, [X19 + 0x20]
	0x01DDC81C ADRP X9, 0xFFFFFFFFFED51000
	0x01DDC820 ADD X9, X9, 0x93A
	0x01DDC824 ADR X10, 0x10
	0x01DDC828 LDRB W11, [X9, X8, LSL]
	0x01DDC82C ADD X10, X10, X11, 0x2, LSL
	0x01DDC830 BR X10
	0x01DDC834 MOVN W8, 0x0
	0x01DDC838 STR W8, [X19 + 0x10]
	0x01DDC83C CBZ X20, 0x1DDCF28
	0x01DDC840 LDR X21, [X20 + 0x88]
	0x01DDC844 CBZ X21, 0x1DDCF28
	0x01DDC848 LDR X8, [X21 + 0x18]
	0x01DDC84C CMP W8, 0x1
	0x01DDC850 B.LT 0x1DDC88C
	0x01DDC854 MOV X22, X31
	0x01DDC858 AND X8, X8, 0x0
	0x01DDC85C ADD X23, X21, 0x20
	0x01DDC860 CMP X22, W8, UXTW

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25FD000
	005 Move W8, [X20+3170]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x231D000
	012 Move X0, [X0+2616]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3170], W8
	016 Compare X19, 0
	017 JumpIfEqual {39}
	018 Move X9, 0x231D000
	019 Move X9, [X9+2616]
	020 Move W8, 1
	021 Move [X19+88], W8
	022 Move X8, [X19]
	023 Move X1, [X9]
	024 Move W10, [X8+304]
	025 Move W9, [X1+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, [X8+200]
	028 Add X8, X8, X9
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Call ItemSellingMachineController.RPC_ExplodeMachine, X0
	036 Return 
	037 Move X0, X19
	038 Call 0x1C181E0
	039 Call 0x1C17F20

Method: System.Void RPC_RecoverExplosion@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01DDC864 B.CS 0x1DDCF2C
	0x01DDC868 LDR X1, [X23, X22, LSL #3]
	0x01DDC86C CBZ X1, 0x1DDC87C
	0x01DDC870 MOV X0, X20
	0x01DDC874 MOV X2, X31
	0x01DDC878 BL 0x3C36834
	0x01DDC87C LDR W8, [X21 + 0x18]
	0x01DDC880 ADD X22, X22, 0x1
	0x01DDC884 CMP X22, W8, SXTW
	0x01DDC888 B.LT 0x1DDC860
	0x01DDC88C LDR X8, [X20 + 0x48]
	0x01DDC890 CBZ X8, 0x1DDCF28
	0x01DDC894 LDR W9, [X8 + 0x18]
	0x01DDC898 CBZ W9, 0x1DDCF2C
	0x01DDC89C LDR X0, [X8 + 0x20]
	0x01DDC8A0 CBZ X0, 0x1DDCF28
	0x01DDC8A4 MOV X1, X31
	0x01DDC8A8 BL 0x3C168EC
	0x01DDC8AC STR S0, [X19 + 0x38]
	0x01DDC8B0 LDR X21, [X20 + 0x48]
	0x01DDC8B4 CBZ X21, 0x1DDCF28
	0x01DDC8B8 LDR W8, [X21 + 0x18]
	0x01DDC8BC CMP W8, 0x1
	0x01DDC8C0 B.LT 0x1DDC8F8
	0x01DDC8C4 MOV W22, W31
	0x01DDC8C8 CMP W22, W8
	0x01DDC8CC B.CS 0x1DDCF2C
	0x01DDC8D0 ADD X8, X21, W22, 0x3, SXTW
	0x01DDC8D4 LDR X0, [X8 + 0x20]
	0x01DDC8D8 CBZ X0, 0x1DDCF28
	0x01DDC8DC MOV W1, W31
	0x01DDC8E0 MOV X2, X31
	0x01DDC8E4 BL 0x3C32410
	0x01DDC8E8 LDR W8, [X21 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25FD000
	005 Move W8, [X20+3171]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x231D000
	012 Move X0, [X0+2616]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3171], W8
	016 Compare X19, 0
	017 JumpIfEqual {39}
	018 Move X9, 0x231D000
	019 Move X9, [X9+2616]
	020 Move W8, 1
	021 Move [X19+88], W8
	022 Move X8, [X19]
	023 Move X1, [X9]
	024 Move W10, [X8+304]
	025 Move W9, [X1+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, [X8+200]
	028 Add X8, X8, X9
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Call ItemSellingMachineController.RPC_RecoverExplosion, X0
	036 Return 
	037 Move X0, X19
	038 Call 0x1C181E0
	039 Call 0x1C17F20

Method: System.Void RPC_AddPlayerMoneyToAll@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01DDC8EC ADD W22, W22, 0x1
	0x01DDC8F0 CMP W22, W8
	0x01DDC8F4 B.LT 0x1DDC8C8
	0x01DDC8F8 LDR X0, [X20 + 0x38]
	0x01DDC8FC CBZ X0, 0x1DDCF28
	0x01DDC900 MOV X1, X31
	0x01DDC904 BL 0x3C1341C
	0x01DDC908 ADRP X22, 0x231C000
	0x01DDC90C LDR X22, [X22 + 0xA48]
	0x01DDC910 MOV X21, X0
	0x01DDC914 LDR X8, [X22]
	0x01DDC918 LDR W9, [X8 + 0xE0]
	0x01DDC91C CBNZ W9, 0x1DDC928
	0x01DDC920 MOV X0, X8
	0x01DDC924 BL 0x1C16DFC
	0x01DDC928 CBZ X21, 0x1DDCF28
	0x01DDC92C LDR X8, [X22]
	0x01DDC930 FMOV S0, 1
	0x01DDC934 MOV X0, X21
	0x01DDC938 MOV X2, X31
	0x01DDC93C LDR X8, [X8 + 0xB8]
	0x01DDC940 LDR W1, [X8]
	0x01DDC944 BL 0x3C15CD8
	0x01DDC948 LDR X23, [X20 + 0x40]
	0x01DDC94C CBZ X23, 0x1DDCF28
	0x01DDC950 LDR W8, [X23 + 0x18]
	0x01DDC954 CMP W8, 0x1
	0x01DDC958 B.LT 0x1DDC9C4
	0x01DDC95C MOV W24, W31
	0x01DDC960 CMP W24, W8
	0x01DDC964 B.CS 0x1DDCF2C
	0x01DDC968 ADD X8, X23, W24, 0x3, SXTW
	0x01DDC96C LDR X0, [X8 + 0x20]
	0x01DDC970 CBZ X0, 0x1DDCF28
	0x01DDC974 MOV X1, X31
	0x01DDC978 BL 0x3C1341C
	0x01DDC97C LDR X8, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25FD000
	006 Move W8, [X21+3172]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x231D000
	014 Move X0, [X0+2616]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3172], W8
	018 Compare X19, 0
	019 JumpIfEqual {44}
	020 Move X8, 0x231D000
	021 Move X8, [X8+2616]
	022 Move W9, 1
	023 Move W1, [X20+36]
	024 Move [X19+88], W9
	025 Move X9, [X19]
	026 Move X8, [X8]
	027 Move W11, [X9+304]
	028 Move W10, [X8+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X9, [X9+200]
	031 Add X9, X9, X10
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Call ItemSellingMachineController.RPC_AddPlayerMoneyToAll, X0, X1
	040 Return 
	041 Move X0, X19
	042 Move X1, X8
	043 Call 0x1C181E0
	044 Call 0x1C17F20

Method: System.Void RPC_ButtonPressed@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01DDC980 MOV X21, X0
	0x01DDC984 LDR W9, [X8 + 0xE0]
	0x01DDC988 CBNZ W9, 0x1DDC994
	0x01DDC98C MOV X0, X8
	0x01DDC990 BL 0x1C16DFC
	0x01DDC994 CBZ X21, 0x1DDCF28
	0x01DDC998 LDR X8, [X22]
	0x01DDC99C FMOV S0, 1
	0x01DDC9A0 MOV X0, X21
	0x01DDC9A4 MOV X2, X31
	0x01DDC9A8 LDR X8, [X8 + 0xB8]
	0x01DDC9AC LDR W1, [X8]
	0x01DDC9B0 BL 0x3C15CD8
	0x01DDC9B4 LDR W8, [X23 + 0x18]
	0x01DDC9B8 ADD W24, W24, 0x1
	0x01DDC9BC CMP W24, W8
	0x01DDC9C0 B.LT 0x1DDC960
	0x01DDC9C4 LDR X21, [X20 + 0x58]
	0x01DDC9C8 MOV X0, X20
	0x01DDC9CC MOV X1, X31
	0x01DDC9D0 BL 0x3C32E90
	0x01DDC9D4 CBZ X0, 0x1DDCF28
	0x01DDC9D8 MOV X1, X31
	0x01DDC9DC BL 0x3C3F58C
	0x01DDC9E0 FMOV S3, 1
	0x01DDC9E4 MOV X0, X21
	0x01DDC9E8 MOV X1, X31
	0x01DDC9EC BL 0x1DD1B94
	0x01DDC9F0 LDR V8, [X19 + 0x28]
	0x01DDC9F4 STR S8, [X19 + 0x3C]
	0x01DDC9F8 B 0x1DDCA08
	0x01DDC9FC LDR V8, [X19 + 0x3C]
	0x01DDCA00 MOVN W8, 0x0
	0x01DDCA04 STR W8, [X19 + 0x10]
	0x01DDCA08 FCMP S8, 0x0
	0x01DDCA0C B.LE 0x1DDCC58
	0x01DDCA10 MOV X0, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25FD000
	006 Move W8, [X21+3173]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x231D000
	014 Move X0, [X0+2616]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3173], W8
	018 Compare X19, 0
	019 JumpIfEqual {44}
	020 Move X8, 0x231D000
	021 Move X8, [X8+2616]
	022 Move W9, 1
	023 Move W1, [X20+36]
	024 Move [X19+88], W9
	025 Move X9, [X19]
	026 Move X8, [X8]
	027 Move W11, [X9+304]
	028 Move W10, [X8+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X9, [X9+200]
	031 Add X9, X9, X10
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Call ItemSellingMachineController.RPC_ButtonPressed, X0, X1
	040 Return 
	041 Move X0, X19
	042 Move X1, X8
	043 Call 0x1C181E0
	044 Call 0x1C17F20

