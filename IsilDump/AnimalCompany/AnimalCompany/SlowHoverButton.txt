Type: AnimalCompany.SlowHoverButton

Method: System.Void SetHoldTime(System.Single time)

Disassembly:
	0x01D7BED0 LDR X0, [X0 + 0x448]
	0x01D7BED4 BL 0x1C16CF4

ISIL:
	001 Move [X0+40], S0
	002 Return 

Method: System.Void OnValidate()

Disassembly:
	0x01D7BED8 MOVZ W8, 0x1
	0x01D7BEDC STRB W8, [X22 + 0x94A]
	0x01D7BEE0 LDR X0, [X23]
	0x01D7BEE4 BL 0x1C16F10
	0x01D7BEE8 LDR X2, [X20]
	0x01D7BEEC MOV X1, X19
	0x01D7BEF0 MOV X3, X31
	0x01D7BEF4 MOV X20, X0
	0x01D7BEF8 BL 0x35C52F0
	0x01D7BEFC LDR X0, [X21]
	0x01D7BF00 LDR W8, [X0 + 0xE0]
	0x01D7BF04 CBNZ W8, 0x1D7BF0C
	0x01D7BF08 BL 0x1C16DFC
	0x01D7BF0C MOV X0, X20
	0x01D7BF10 LDP X20, X19, [X31 + 0x20]
	0x01D7BF14 LDP X22, X21, [X31 + 0x10]
	0x01D7BF18 MOV X1, X31
	0x01D7BF1C LDP X30, X23, [X31], #0x30
	0x01D7BF20 B 0x1D36978
	0x01D7BF24 SUB X31, X31, 0x30
	0x01D7BF28 STP X30, X21, [X31 + 0x10]
	0x01D7BF2C STP X20, X19, [X31 + 0x20]
	0x01D7BF30 ADRP X21, 0x265D000
	0x01D7BF34 ADRP X20, 0x2378000
	0x01D7BF38 LDRB W8, [X21 + 0x94B]
	0x01D7BF3C LDR X20, [X20 + 0x648]
	0x01D7BF40 MOV X19, X0
	0x01D7BF44 TBNZ X8, 0x0, 0x1D7BF68
	0x01D7BF48 ADRP X0, 0x2378000
	0x01D7BF4C LDR X0, [X0 + 0x648]
	0x01D7BF50 BL 0x1C16CF4
	0x01D7BF54 ADRP X0, 0x2379000
	0x01D7BF58 LDR X0, [X0 + 0xB50]
	0x01D7BF5C BL 0x1C16CF4
	0x01D7BF60 MOVZ W8, 0x1
	0x01D7BF64 STRB W8, [X21 + 0x94B]
	0x01D7BF68 LDR X0, [X20]
	0x01D7BF6C LDR X19, [X19 + 0x20]
	0x01D7BF70 LDR W8, [X0 + 0xE0]
	0x01D7BF74 CBNZ W8, 0x1D7BF7C
	0x01D7BF78 BL 0x1C16DFC
	0x01D7BF7C ADRP X21, 0x265D000
	0x01D7BF80 LDRB W8, [X21 + 0x787]
	0x01D7BF84 CBNZ W8, 0x1D7BF9C
	0x01D7BF88 ADRP X0, 0x2378000
	0x01D7BF8C LDR X0, [X0 + 0x648]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x265E000
	005 Move W8, [X20+2369]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x237C000
	012 Move X0, [X0+1048]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2369], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call Component.get_gameObject, X0
	019 Compare X0, 0
	020 JumpIfEqual {51}
	021 Move X20, 0x237C000
	022 Move X20, [X20+1048]
	023 Move W1, 7
	024 Move X2, X31
	025 Call GameObject.set_layer, X0, X1
	026 Move X1, [X20]
	027 Move X0, X19
	028 Call 0x21A553C, X0
	029 Compare X0, 0
	030 JumpIfEqual {51}
	031 Move W8, [X0+24]
	032 Move X19, X0
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W20, W31
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Add X8, X19, W20
	037 Move X0, [X8+32]
	038 Compare X0, 0
	039 JumpIfEqual {51}
	040 Move W1, 1
	041 Move X2, X31
	042 Call Collider.set_isTrigger, X0, X1
	043 Move W8, [X19+24]
	044 Add W20, W20, 1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return 
	050 Call 0x1C17F28
	051 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x01D7BF90 BL 0x1C16CF4
	0x01D7BF94 MOVZ W8, 0x1
	0x01D7BF98 STRB W8, [X21 + 0x787]
	0x01D7BF9C LDR X0, [X20]

ISIL:
	001 Move S0, W31
	002 Move [X0+112], W31
	003 Move [X0+108], W31

Method: System.Void OnDisable()

Disassembly:
	0x01D7C120 LDR V2, [X8 + 0x8]
	0x01D7C124 FMUL S3, S8, S0
	0x01D7C128 FMUL S4, S9, S1
	0x01D7C12C FMUL S5, S10, S2
	0x01D7C130 STP S0, S1, [X19 + 0x2C]

ISIL:
	001 Move S0, W31
	002 Move [X0+96], X31
	003 Move [X0+112], W31
	004 Move [X0+108], W31
	005 Call SlowHoverButton.SetHoverEffect, X0, V0
	006 Return 

Method: System.Void Update()

Disassembly:
	0x01D7C134 FADD S0, S3, S4
	0x01D7C138 FADD S0, S5, S0
	0x01D7C13C FNEG S0, S0
	0x01D7C140 STP S2, S0, [X19 + 0x34]
	0x01D7C144 LDP X20, X19, [X31 + 0x40]
	0x01D7C148 LDR X30, [X31 + 0x30]
	0x01D7C14C LDP D9, D8, [X31 + 0x20]
	0x01D7C150 LDP D11, D10, [X31 + 0x10]
	0x01D7C154 LDP D13, D12, [X31], #0x50
	0x01D7C158 RET
	0x01D7C15C BL 0x1C16F20
	0x01D7C160 STR D14, [X31 - 0x50]!
	0x01D7C164 STP D13, D12, [X31 + 0x10]
	0x01D7C168 STP D11, D10, [X31 + 0x20]
	0x01D7C16C STP D9, D8, [X31 + 0x30]
	0x01D7C170 STP X30, X19, [X31 + 0x40]
	0x01D7C174 MOV X19, X0
	0x01D7C178 MOV X0, X31
	0x01D7C17C BL 0x3C047F8
	0x01D7C180 CBZ X0, 0x1D7C24C
	0x01D7C184 MOV X1, X31
	0x01D7C188 BL 0x3C32E90
	0x01D7C18C CBZ X0, 0x1D7C24C
	0x01D7C190 MOV X1, X31
	0x01D7C194 BL 0x3C3F58C
	0x01D7C198 LDP S11, S12, [X19 + 0x2C]
	0x01D7C19C LDP S13, S14, [X19 + 0x34]
	0x01D7C1A0 MOV X0, X31
	0x01D7C1A4 MOV V8.16B, V0.16B
	0x01D7C1A8 MOV V9.16B, V1.16B
	0x01D7C1AC MOV V10.16B, V2.16B
	0x01D7C1B0 BL 0x3C047F8
	0x01D7C1B4 CBZ X0, 0x1D7C24C
	0x01D7C1B8 MOV X1, X31
	0x01D7C1BC BL 0x3C32E90
	0x01D7C1C0 CBZ X0, 0x1D7C24C
	0x01D7C1C4 MOV X1, X31
	0x01D7C1C8 BL 0x3C3F58C
	0x01D7C1CC LDR X0, [X19 + 0x20]
	0x01D7C1D0 CBZ X0, 0x1D7C24C
	0x01D7C1D4 FMUL S3, S8, S11
	0x01D7C1D8 FMUL S4, S9, S12
	0x01D7C1DC FADD S3, S3, S4
	0x01D7C1E0 FMUL S4, S10, S13
	0x01D7C1E4 FADD S3, S4, S3
	0x01D7C1E8 FADD S3, S14, S3
	0x01D7C1EC FMUL S5, S11, S3
	0x01D7C1F0 FMUL S6, S12, S3
	0x01D7C1F4 FMUL S3, S13, S3
	0x01D7C1F8 FSUB S5, S8, S5
	0x01D7C1FC FSUB S6, S9, S6
	0x01D7C200 LDR V4, [X19 + 0x28]
	0x01D7C204 FSUB S3, S10, S3
	0x01D7C208 FSUB S0, S5, S0
	0x01D7C20C FSUB S1, S6, S1
	0x01D7C210 FSUB S2, S3, S2
	0x01D7C214 FMUL S0, S0, S0
	0x01D7C218 FMUL S1, S1, S1
	0x01D7C21C FADD S0, S0, S1
	0x01D7C220 FMUL S1, S2, S2
	0x01D7C224 LDP X30, X19, [X31 + 0x40]
	0x01D7C228 LDP D9, D8, [X31 + 0x30]
	0x01D7C22C LDP D11, D10, [X31 + 0x20]
	0x01D7C230 LDP D13, D12, [X31 + 0x10]
	0x01D7C234 FADD S0, S1, S0
	0x01D7C238 FCMP S0, S4
	0x01D7C23C CSET W1, MI
	0x01D7C240 MOV X2, X31
	0x01D7C244 LDR V14, [X31], #0x50
	0x01D7C248 B 0x3C13034
	0x01D7C24C BL 0x1C16F20
	0x01D7C250 MOVZ W8, 0x42C80000
	0x01D7C254 MOV X1, X31
	0x01D7C258 STR W8, [X0 + 0x28]
	0x01D7C25C B 0x3C36C30
	0x01D7C260 STR D10, [X31 - 0x30]!
	0x01D7C264 STP D9, D8, [X31 + 0x10]
	0x01D7C268 STP X30, X19, [X31 + 0x20]
	0x01D7C26C MOV X1, X31
	0x01D7C270 MOV X19, X0
	0x01D7C274 BL 0x3C32E90
	0x01D7C278 LDP S8, S9, [X19 + 0x20]
	0x01D7C27C LDR V10, [X19 + 0x28]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x265D000
	008 Move X20, 0x2378000
	009 Move W8, [X21+2370]
	010 Move X20, [X20+1432]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2378000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2370], W8
	021 Move X0, [X20]
	022 Move X20, [X19+96]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {92}
	035 Move W8, [X19+112]
	036 Compare W8, 0
	037 JumpIfNotEqual {92}
	038 Move V8, [X19+108]
	039 Move X0, X31
	040 Call Time.get_deltaTime
	041 Move V1, [X19+40]
	042 Add S0, S8, S0
	043 Move [X19+108], S0
	044 Move X0, X19
	045 NotImplemented "Instruction FDIV not yet implemented."
	046 Call SlowHoverButton.SetHoverEffect, X0, V0
	047 Move W20, [X19+104]
	048 Move V8, [X19+108]
	049 Move V9, [X19+40]
	050 Move X0, X31
	051 Call Time.get_deltaTime
	052 Move V1, V0
	053 NotImplemented "Instruction FDIV not yet implemented."
	054 Move S2, 0.5
	055 Multiply S0, S0, S2
	056 Move W0, W20
	057 Move X1, X31
	058 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	059 Move V0, [X19+108]
	060 Move V1, [X19+40]
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 Move X8, -19468288
	063 Move W0, [X19+104]
	064 Move V1, [X8+188]
	065 Move S0, 1
	066 Move X1, X31
	067 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	068 Move X20, [X19+48]
	069 Move X0, X19
	070 Move X1, X31
	071 Call Component.get_transform, X0
	072 Compare X0, 0
	073 JumpIfEqual {99}
	074 Move X1, X31
	075 Call Transform.get_position, X0
	076 Compare X20, 0
	077 JumpIfEqual {99}
	078 Move S3, 1
	079 Move X0, X20
	080 Move W1, W31
	081 Move X2, X31
	082 Call RandomSFX.Play, X0, X1, V0, X2
	083 Move X8, [X19+32]
	084 Compare X8, 0
	085 JumpIfEqual {90}
	086 Move X9, [X8+24]
	087 Move X0, [X8+64]
	088 Move X1, [X8+40]
	089 NotImplemented "Instruction BLR not yet implemented."
	090 Move W8, 1
	091 Move [X19+112], W8
	092 Move X20, [X31+32]
	093 Move X19, [X31+40]
	094 Move X30, [X31+16]
	095 Move X21, [X31+24]
	096 Move D9, [X31+48]
	097 Move D8, [X31+56]
	098 Return 
	099 Call 0x1C17F20

Method: System.Void SetHoverEffect(System.Single t)

Disassembly:
	0x01D7BFA0 LDR W8, [X0 + 0xE0]
	0x01D7BFA4 CBNZ W8, 0x1D7BFB0
	0x01D7BFA8 BL 0x1C16DFC
	0x01D7BFAC LDR X0, [X20]
	0x01D7BFB0 LDR X8, [X0 + 0xB8]
	0x01D7BFB4 LDR X8, [X8]
	0x01D7BFB8 CBZ X8, 0x1D7C014
	0x01D7BFBC LDR X8, [X8 + 0xB8]
	0x01D7BFC0 CBZ X8, 0x1D7C014
	0x01D7BFC4 LDR X8, [X8 + 0x80]
	0x01D7BFC8 CBZ X8, 0x1D7C014
	0x01D7BFCC LDR X8, [X8 + 0x50]
	0x01D7BFD0 CBZ X8, 0x1D7C014
	0x01D7BFD4 LDR W8, [X8 + 0x4C]
	0x01D7BFD8 ADD X0, X31, 0xC
	0x01D7BFDC MOV X1, X31
	0x01D7BFE0 STR W8, [X31 + 0xC]
	0x01D7BFE4 BL 0x337B6E0
	0x01D7BFE8 CBZ X19, 0x1D7C014
	0x01D7BFEC LDR X8, [X19]
	0x01D7BFF0 MOV X1, X0
	0x01D7BFF4 MOV X0, X19
	0x01D7BFF8 LDR X9, [X8 + 0x558]
	0x01D7BFFC LDR X2, [X8 + 0x560]
	0x01D7C000 BLR X9
	0x01D7C004 LDP X20, X19, [X31 + 0x20]
	0x01D7C008 LDP X30, X21, [X31 + 0x10]
	0x01D7C00C ADD X31, X31, 0x30
	0x01D7C010 RET
	0x01D7C014 BL 0x1C16F20
	0x01D7C018 MOV X1, X31
	0x01D7C01C B 0x3C36C30
	0x01D7C020 STP D13, D12, [X31 - 0x50]!
	0x01D7C024 STP D11, D10, [X31 + 0x10]
	0x01D7C028 STP D9, D8, [X31 + 0x20]
	0x01D7C02C STR X30, [X31 + 0x30]
	0x01D7C030 STP X20, X19, [X31 + 0x40]
	0x01D7C034 MOV X1, X31
	0x01D7C038 MOV X19, X0
	0x01D7C03C BL 0x3C32E90
	0x01D7C040 CBZ X0, 0x1D7C15C
	0x01D7C044 MOV X1, X31
	0x01D7C048 BL 0x3C3FA04
	0x01D7C04C MOV X0, X19
	0x01D7C050 MOV X1, X31
	0x01D7C054 MOV V11.16B, V0.16B
	0x01D7C058 MOV V12.16B, V1.16B
	0x01D7C05C MOV V13.16B, V2.16B
	0x01D7C060 BL 0x3C32E90
	0x01D7C064 CBZ X0, 0x1D7C15C
	0x01D7C068 MOV X1, X31
	0x01D7C06C BL 0x3C3F58C
	0x01D7C070 ADRP X20, 0x265C000
	0x01D7C074 LDRB W8, [X20 + 0x785]
	0x01D7C078 MOV V8.16B, V0.16B
	0x01D7C07C MOV V9.16B, V1.16B
	0x01D7C080 MOV V10.16B, V2.16B
	0x01D7C084 CBNZ W8, 0x1D7C09C
	0x01D7C088 ADRP X0, 0x2377000
	0x01D7C08C LDR X0, [X0 + 0x5A8]
	0x01D7C090 BL 0x1C16CF4
	0x01D7C094 MOVZ W8, 0x1
	0x01D7C098 STRB W8, [X20 + 0x785]
	0x01D7C09C ADRP X8, 0x2377000
	0x01D7C0A0 LDR X8, [X8 + 0x5A8]
	0x01D7C0A4 LDR X0, [X8]
	0x01D7C0A8 LDR W8, [X0 + 0xE0]
	0x01D7C0AC CBNZ W8, 0x1D7C0B4
	0x01D7C0B0 BL 0x1C16DFC
	0x01D7C0B4 FMUL S0, S11, S11
	0x01D7C0B8 FMUL S1, S12, S12
	0x01D7C0BC ADRP X8, 0xFFFFFFFFFED6E000
	0x01D7C0C0 FADD S0, S0, S1
	0x01D7C0C4 LDR V1, [X8 + 0x17C]
	0x01D7C0C8 FMUL S2, S13, S13
	0x01D7C0CC FADD S0, S2, S0
	0x01D7C0D0 FSQRT S2, S0
	0x01D7C0D4 FCMP S2, S1
	0x01D7C0D8 B.LE 0x1D7C0EC
	0x01D7C0DC FDIV S0, S11, S2
	0x01D7C0E0 FDIV S1, S12, S2
	0x01D7C0E4 FDIV S2, S13, S2
	0x01D7C0E8 B 0x1D7C124
	0x01D7C0EC ADRP X20, 0x265C000
	0x01D7C0F0 LDRB W8, [X20 + 0x783]
	0x01D7C0F4 CBNZ W8, 0x1D7C10C
	0x01D7C0F8 ADRP X0, 0x2377000
	0x01D7C0FC LDR X0, [X0 + 0x5A0]
	0x01D7C100 BL 0x1C16CF4
	0x01D7C104 MOVZ W8, 0x1
	0x01D7C108 STRB W8, [X20 + 0x783]
	0x01D7C10C ADRP X8, 0x2377000
	0x01D7C110 LDR X8, [X8 + 0x5A0]
	0x01D7C114 LDR X8, [X8]
	0x01D7C118 LDR X8, [X8 + 0xB8]
	0x01D7C11C LDP S0, S1, [X8]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x265E000
	010 Move X21, 0x2379000
	011 Move W8, [X20+2371]
	012 Move X21, [X21+1432]
	013 Move V8, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x2379000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+2371], W8
	024 Move X0, [X21]
	025 Move X20, [X19+64]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Inequality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {47}
	038 Move X0, [X19+64]
	039 Compare X0, 0
	040 JumpIfEqual {120}
	041 Move X8, -19468288
	042 Move V0, [X8+816]
	043 Move X2, X31
	044 NotImplemented "Instruction FCMP not yet implemented."
	045 NotImplemented "Instruction CSET not yet implemented."
	046 Call Renderer.set_enabled, X0, X1
	047 Move X0, [X21]
	048 Move X20, [X19+72]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X20
	054 Move X1, X31
	055 Move X2, X31
	056 Call Object.op_Inequality, X0, X1
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {72}
	061 Move X0, [X19+72]
	062 Compare X0, 0
	063 JumpIfEqual {120}
	064 Move X8, -19468288
	065 Move V0, [X8+816]
	066 Move S1, W31
	067 Move X1, X31
	068 NotImplemented "Instruction FCMP not yet implemented."
	069 Move S0, 1
	070 NotImplemented "Instruction FCSEL not yet implemented."
	071 Call CanvasRenderer.SetAlpha, X0, V0
	072 Move X21, 0x265D000
	073 Move X20, [X19+56]
	074 Move V9, [X19+80]
	075 Move W8, [X21+2139]
	076 Move V10, [X19+88]
	077 Compare W8, 0
	078 JumpIfNotEqual {84}
	079 Move X0, 0x2378000
	080 Move X0, [X0+1440]
	081 Call 0x1C17CF4
	082 Move W8, 1
	083 Move [X21+2139], W8
	084 Move X8, 0x2378000
	085 Move X8, [X8+1440]
	086 Move S11, 1
	087 Subtract S0, S11, S8
	088 Move S1, 3
	089 Move X8, [X8]
	090 Move X19, [X8+184]
	091 Call 0x3EB2B50
	092 Subtract S0, S11, S0
	093 NotImplemented "Instruction FMIN not yet implemented."
	094 NotImplemented "Instruction FCMP not yet implemented."
	095 Move S0, W31
	096 NotImplemented "Instruction FCSEL not yet implemented."
	097 Compare X20, 0
	098 JumpIfEqual {120}
	099 Move V1, [X19+20]
	100 NotImplemented "Instruction LDUR not yet implemented."
	101 Move X0, X20
	102 Move X20, [X31+48]
	103 Move X19, [X31+56]
	104 Subtract S1, S1, S10
	105 Subtract V2, V2, V9
	106 Multiply S1, S0, S1
	107 NotImplemented "Instruction INVALID not yet implemented."
	108 Add V0, V9, V0
	109 Move X30, [X31+32]
	110 Move X21, [X31+40]
	111 Move D9, [X31+16]
	112 Move D8, [X31+24]
	113 Add S2, S10, S1
	114 Move S1, V0.S[1]
	115 Move X1, X31
	116 Move D11, [X31+64]
	117 Move D10, [X31+72]
	118 Call Transform.set_localScale, X0, X1
	119 Return 
	120 Call 0x1C17F20

Method: System.Void OnTriggerEnter(UnityEngine.Collider other)

Disassembly:
	0x01D7C280 MOV X19, X0
	0x01D7C284 MOV X0, X31
	0x01D7C288 BL 0x3C3C714
	0x01D7C28C CBZ X19, 0x1D7C2B4
	0x01D7C290 FMUL S2, S10, S0
	0x01D7C294 FMUL S1, S9, S0
	0x01D7C298 FMUL S0, S8, S0
	0x01D7C29C MOV X0, X19
	0x01D7C2A0 LDP X30, X19, [X31 + 0x20]
	0x01D7C2A4 LDP D9, D8, [X31 + 0x10]
	0x01D7C2A8 MOV X1, X31
	0x01D7C2AC LDR V10, [X31], #0x30
	0x01D7C2B0 B 0x3C40498
	0x01D7C2B4 BL 0x1C16F20
	0x01D7C2B8 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Add X1, X31, 12
	007 Move X0, X19
	008 Move [X31+12], W31
	009 Call HandInputUtility.HandleFingerTipInput, X0, X1
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {17}
	014 Move W8, [X31+12]
	015 Move [X20+96], X19
	016 Move [X20+104], W8
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return 

Method: System.Void OnTriggerExit(UnityEngine.Collider other)

Disassembly:
	0x01D7C424 LDR V3, [X31 + 0x2]
	0x01D7C428 MOV X0, X20
	0x01D7C42C MOV X1, X31
	0x01D7C430 FMUL S1, S3, S13
	0x01D7C434 FMUL S2, S3, S12
	0x01D7C438 FMUL S3, S3, S11
	0x01D7C43C FMUL S1, S0, S1
	0x01D7C440 FMUL S4, S0, S2
	0x01D7C444 FMUL S0, S0, S3
	0x01D7C448 FSUB S2, S10, S1
	0x01D7C44C FSUB S1, S9, S4
	0x01D7C450 FSUB S0, S8, S0
	0x01D7C454 BL 0x3C3F62C
	0x01D7C458 MOVZ W0, 0x64
	0x01D7C45C MOV X1, X31
	0x01D7C460 BL 0x3C84CAC
	0x01D7C464 TBNZ X0, 0x0, 0x1D7C478
	0x01D7C468 MOVZ W0, 0x113
	0x01D7C46C MOV X1, X31
	0x01D7C470 BL 0x3C84CAC
	0x01D7C474 TBZ X0, 0x0, 0x1D7C510
	0x01D7C478 MOV X0, X19
	0x01D7C47C MOV X1, X31
	0x01D7C480 BL 0x3C32E90
	0x01D7C484 MOV X20, X0
	0x01D7C488 MOV X0, X19
	0x01D7C48C MOV X1, X31
	0x01D7C490 BL 0x3C32E90
	0x01D7C494 CBZ X0, 0x1D7CB40
	0x01D7C498 MOV X1, X31
	0x01D7C49C BL 0x3C3F58C
	0x01D7C4A0 MOV X0, X19
	0x01D7C4A4 MOV X1, X31
	0x01D7C4A8 MOV V8.16B, V0.16B
	0x01D7C4AC MOV V9.16B, V1.16B
	0x01D7C4B0 MOV V10.16B, V2.16B
	0x01D7C4B4 BL 0x3C32E90
	0x01D7C4B8 CBZ X0, 0x1D7CB40
	0x01D7C4BC MOV X1, X31
	0x01D7C4C0 BL 0x3C3F90C
	0x01D7C4C4 MOV X0, X31
	0x01D7C4C8 MOV V11.16B, V0.16B
	0x01D7C4CC MOV V12.16B, V1.16B
	0x01D7C4D0 MOV V13.16B, V2.16B
	0x01D7C4D4 BL 0x3C3C714

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x265D000
	007 Move X21, 0x2378000
	008 Move W8, [X22+2372]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2378000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2372], W8
	021 Move X0, [X21]
	022 Move X21, [X19+96]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X21
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {55}
	035 Move X0, [X19+56]
	036 Move [X19+96], X31
	037 Move [X19+112], W31
	038 Move [X19+108], W31
	039 Compare X0, 0
	040 JumpIfEqual {61}
	041 Move S1, [X19+84]
	042 Move S2, [X19+88]
	043 Move V0, [X19+80]
	044 Move X1, X31
	045 Call Transform.set_localScale, X0, X1
	046 Move X0, X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move S0, W31
	052 Move X30, [X31+48]
	053 Call SlowHoverButton.SetHoverEffect, X0, V0
	054 Return 
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 Return 
	061 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D7C4D8 CBZ X20, 0x1D7CB40
	0x01D7C4DC LDR V3, [X31 + 0x2]
	0x01D7C4E0 MOV X0, X20
	0x01D7C4E4 MOV X1, X31
	0x01D7C4E8 FMUL S1, S3, S13
	0x01D7C4EC FMUL S2, S3, S12
	0x01D7C4F0 FMUL S3, S3, S11
	0x01D7C4F4 FMUL S1, S0, S1
	0x01D7C4F8 FMUL S4, S0, S2
	0x01D7C4FC FMUL S0, S0, S3
	0x01D7C500 FADD S2, S10, S1
	0x01D7C504 FADD S1, S9, S4
	0x01D7C508 FADD S0, S8, S0
	0x01D7C50C BL 0x3C3F62C
	0x01D7C510 MOVZ W0, 0x77
	0x01D7C514 MOV X1, X31
	0x01D7C518 BL 0x3C84CAC
	0x01D7C51C TBNZ X0, 0x0, 0x1D7C530
	0x01D7C520 MOVZ W0, 0x111
	0x01D7C524 MOV X1, X31
	0x01D7C528 BL 0x3C84CAC
	0x01D7C52C TBZ X0, 0x0, 0x1D7C5C8
	0x01D7C530 MOV X0, X19
	0x01D7C534 MOV X1, X31
	0x01D7C538 BL 0x3C32E90
	0x01D7C53C MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, 0x40000000
	005 Move [X0+40], W8
	006 Move X20, 0x265D000
	007 Move W8, [X20+1923]
	008 Move X19, X0
	009 Compare W8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, 0x2378000
	012 Move X0, [X0+1440]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1923], W8
	016 Move X8, 0x2378000
	017 Move X8, [X8+1440]
	018 Move X0, X19
	019 Move X1, X31
	020 Move X8, [X8]
	021 Move X8, [X8+184]
	022 Move V0, [X8]
	023 Move V1, [X8+8]
	024 Move [X19+80], D0
	025 Move [X19+88], S1
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Call MonoBehaviour..ctor, X0
	030 Return 

