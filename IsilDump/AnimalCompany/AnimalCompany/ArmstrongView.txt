Type: AnimalCompany.ArmstrongView

Method: System.Void Awake()

Disassembly:
	0x01CDEB38 BL 0x22D82D0
	0x01CDEB3C CBZ X20, 0x1CDEBA4
	0x01CDEB40 ADRP X8, 0x2270000
	0x01CDEB44 LDR X8, [X8 + 0x5D8]
	0x01CDEB48 LDP X2, X3, [X31 + 0x20]
	0x01CDEB4C LDUR V0, [X31 + 0x8]
	0x01CDEB50 LDR W9, [X31 + 0x18]
	0x01CDEB54 LDR X8, [X8]
	0x01CDEB58 ADD X4, X31, 0x30
	0x01CDEB5C MOV X0, X20
	0x01CDEB60 MOV X1, X21
	0x01CDEB64 MOV X5, X31
	0x01CDEB68 MOV X6, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobView.Awake, X0
	006 Move X0, [X19+56]
	007 Compare X0, 0
	008 JumpIfEqual {17}
	009 Move X1, X31
	010 Call Transform.get_localPosition, X0
	011 Move [X19+140], S0
	012 Move [X19+148], S1
	013 Move [X19+148], S2
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return 
	017 Call 0x1B6FA1C

Method: System.Void Update()

Disassembly:
	0x01CDEB6C MOV W7, W31
	0x01CDEB70 STR V0, [X31 + 0x3]
	0x01CDEB74 STR W9, [X31 + 0x40]
	0x01CDEB78 STR X8, [X31]
	0x01CDEB7C BL 0x2112E18
	0x01CDEB80 MOVZ W1, 0x1
	0x01CDEB84 MOV X0, X19
	0x01CDEB88 MOV X2, X31
	0x01CDEB8C BL 0x1CE5950
	0x01CDEB90 LDP X20, X19, [X31 + 0x70]
	0x01CDEB94 LDP X22, X21, [X31 + 0x60]
	0x01CDEB98 LDP X30, X23, [X31 + 0x50]
	0x01CDEB9C ADD X31, X31, 0x80
	0x01CDEBA0 RET
	0x01CDEBA4 BL 0x1B6EA1C
	0x01CDEBA8 STP X30, X19, [X31 - 0x10]!
	0x01CDEBAC MOV X1, X31
	0x01CDEBB0 MOV X19, X0
	0x01CDEBB4 BL 0x1CE5B40
	0x01CDEBB8 LDR X0, [X19 + 0x40]
	0x01CDEBBC CBZ X0, 0x1CDEBF8
	0x01CDEBC0 MOV X1, X31
	0x01CDEBC4 BL 0x1D9E780
	0x01CDEBC8 TBZ X0, 0x0, 0x1CDEBF0
	0x01CDEBCC MOVZ W1, 0x5
	0x01CDEBD0 MOV X0, X19
	0x01CDEBD4 BL 0x1CDDDD8
	0x01CDEBD8 LDR X0, [X19 + 0xC8]
	0x01CDEBDC CBZ X0, 0x1CDEBF8

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X1, X31
	007 Move X19, X0
	008 Call MobView.Update, X0
	009 Move W8, [X19+133]
	010 Compare W8, 0
	011 JumpIfEqual {33}
	012 Move X0, X31
	013 Call Time.get_time
	014 Move X20, [X19+56]
	015 Compare X20, 0
	016 JumpIfEqual {39}
	017 Move V1, [X19+136]
	018 Move S9, [X19+144]
	019 Move S8, [X19+148]
	020 Multiply S0, S0, S1
	021 Call 0x3D1A8B0
	022 Move X0, X20
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Move V1, V9
	027 Move V2, V8
	028 Move X1, X31
	029 Move D9, [X31+48]
	030 Move D8, [X31+56]
	031 Call Transform.set_localPosition, X0, X1
	032 Return 
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+16]
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Return 
	039 Call 0x1B6FA1C

Method: System.Void SetHeadMoving(System.Boolean isHeadMoving, System.Single speed = 0.2)

Disassembly:
	0x01CDD714 FDIV S0, S0, S3
	0x01CDD718 FDIV S1, S1, S3
	0x01CDD71C FDIV S2, S2, S3
	0x01CDD720 B 0x1CDD748
	0x01CDD724 LDRB W8, [X26 + 0x43F]
	0x01CDD728 CBNZ W8, 0x1CDD738
	0x01CDD72C MOV X0, X22
	0x01CDD730 BL 0x1B6E7F0
	0x01CDD734 STRB W29, [X26 + 0x43F]
	0x01CDD738 LDR X8, [X22]
	0x01CDD73C LDR X8, [X8 + 0xB8]
	0x01CDD740 LDP S0, S1, [X8]
	0x01CDD744 LDR V2, [X8 + 0x8]
	0x01CDD748 LDR X8, [X20 + 0xB8]
	0x01CDD74C CBZ X8, 0x1CDD7C4
	0x01CDD750 LDR V3, [X8 + 0x50]

ISIL:
	001 Move [X31-16], X30
	002 And W8, W1, 1
	003 Move [X0+133], W8
	004 Move [X0+136], S0
	005 Move TEMP, X1
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {11}
	009 Move X30, [X31+16]
	010 Return 
	011 Move X8, [X0+56]
	012 Compare X8, 0
	013 JumpIfEqual {22}
	014 Move S1, [X0+144]
	015 Move S2, [X0+148]
	016 Move V0, [X0+140]
	017 Move X0, X8
	018 Move X1, X31
	019 Move X30, [X31+16]
	020 Call Transform.set_localPosition, X0, X1
	021 Return 
	022 Call 0x1B6FA1C

Method: System.Void SetHeadLookAtTarget(UnityEngine.Vector3 target, UnityEngine.Vector3 viewPoint)

Disassembly:
	0x01CDEBE0 MOVZ W1, 0x1
	0x01CDEBE4 MOV X2, X31
	0x01CDEBE8 LDP X30, X19, [X31], #0x10
	0x01CDEBEC B 0x3A4AB90
	0x01CDEBF0 LDP X30, X19, [X31], #0x10
	0x01CDEBF4 RET
	0x01CDEBF8 BL 0x1B6EA1C
	0x01CDEBFC STP X30, X21, [X31 - 0x20]!
	0x01CDEC00 STP X20, X19, [X31 + 0x10]
	0x01CDEC04 ADRP X21, 0x2545000
	0x01CDEC08 ADRP X20, 0x2271000
	0x01CDEC0C LDRB W8, [X21 + 0x62F]
	0x01CDEC10 LDR X20, [X20 + 0xD48]
	0x01CDEC14 MOV X19, X0
	0x01CDEC18 TBNZ X8, 0x0, 0x1CDEC30
	0x01CDEC1C ADRP X0, 0x2271000
	0x01CDEC20 LDR X0, [X0 + 0xD48]
	0x01CDEC24 BL 0x1B6E7F0
	0x01CDEC28 MOVZ W8, 0x1
	0x01CDEC2C STRB W8, [X21 + 0x62F]
	0x01CDEC30 MOV X0, X19
	0x01CDEC34 MOV X1, X31
	0x01CDEC38 BL 0x1CE76C0
	0x01CDEC3C LDR X0, [X20]
	0x01CDEC40 LDR W8, [X0 + 0xE0]
	0x01CDEC44 CBNZ W8, 0x1CDEC50
	0x01CDEC48 BL 0x1B6E8F8
	0x01CDEC4C LDR X0, [X20]
	0x01CDEC50 LDR X8, [X0 + 0xB8]
	0x01CDEC54 MOV X0, X31
	0x01CDEC58 LDP S0, S1, [X8 + 0xA0]
	0x01CDEC5C LDP S2, S3, [X8 + 0xA8]
	0x01CDEC60 BL 0x3A75B14
	0x01CDEC64 LDR X0, [X19 + 0xD0]
	0x01CDEC68 CBZ X0, 0x1CDECCC
	0x01CDEC6C MOV X1, X31
	0x01CDEC70 BL 0x3AA7658
	0x01CDEC74 LDR X8, [X19 + 0xB8]
	0x01CDEC78 CBZ X8, 0x1CDECCC
	0x01CDEC7C LDR V3, [X8 + 0x48]
	0x01CDEC80 MOV X0, X31
	0x01CDEC84 BL 0x3A7567C
	0x01CDEC88 LDR X8, [X20]
	0x01CDEC8C MOV X0, X31
	0x01CDEC90 LDR X8, [X8 + 0xB8]
	0x01CDEC94 LDP S0, S1, [X8 + 0xB0]
	0x01CDEC98 LDP S2, S3, [X8 + 0xB8]
	0x01CDEC9C BL 0x3A75B14
	0x01CDECA0 LDR X0, [X19 + 0xD0]
	0x01CDECA4 CBZ X0, 0x1CDECCC
	0x01CDECA8 MOV X1, X31
	0x01CDECAC BL 0x3AA7658
	0x01CDECB0 LDR X8, [X19 + 0xB8]
	0x01CDECB4 CBZ X8, 0x1CDECCC
	0x01CDECB8 LDR V3, [X8 + 0x4C]
	0x01CDECBC LDP X20, X19, [X31 + 0x10]
	0x01CDECC0 MOV X0, X31
	0x01CDECC4 LDP X30, X21, [X31], #0x20
	0x01CDECC8 B 0x3A7567C
	0x01CDECCC BL 0x1B6EA1C
	0x01CDECD0 STP X30, X21, [X31 - 0x20]!
	0x01CDECD4 STP X20, X19, [X31 + 0x10]
	0x01CDECD8 ADRP X20, 0x2545000
	0x01CDECDC ADRP X21, 0x2270000
	0x01CDECE0 LDRB W8, [X20 + 0x630]
	0x01CDECE4 LDR X21, [X21 + 0xD78]
	0x01CDECE8 MOV X19, X0
	0x01CDECEC TBNZ X8, 0x0, 0x1CDED04
	0x01CDECF0 ADRP X0, 0x2270000
	0x01CDECF4 LDR X0, [X0 + 0xD78]
	0x01CDECF8 BL 0x1B6E7F0
	0x01CDECFC MOVZ W8, 0x1
	0x01CDED00 STRB W8, [X20 + 0x630]
	0x01CDED04 LDR X0, [X21]
	0x01CDED08 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x2546000
	011 Move W8, [X20+1089]
	012 Move V8, V5
	013 Move V9, V4
	014 Move V11, V3
	015 Move V10, V2
	016 Move V12, V1
	017 Move V13, V0
	018 Move X19, X0
	019 Compare W8, 0
	020 JumpIfNotEqual {26}
	021 Move X0, 0x2270000
	022 Move X0, [X0+1160]
	023 Call 0x1B6F7F0
	024 Move W8, 1
	025 Move [X20+1089], W8
	026 Move X8, 0x2270000
	027 Move X8, [X8+1160]
	028 Subtract S11, S13, S11
	029 Subtract S9, S12, S9
	030 Subtract S10, S10, S8
	031 Move X0, [X8]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1B6F8F8
	036 Multiply S0, S11, S11
	037 Multiply S1, S9, S9
	038 Move X8, -19087360
	039 Add S0, S0, S1
	040 Move V1, [X8+2916]
	041 Multiply S2, S10, S10
	042 Add S0, S2, S0
	043 NotImplemented "Instruction FSQRT not yet implemented."
	044 NotImplemented "Instruction FCMP not yet implemented."
	045 NotImplemented "Instruction FDIV not yet implemented."
	046 NotImplemented "Instruction FDIV not yet implemented."
	047 NotImplemented "Instruction FDIV not yet implemented."
	048 Move X20, 0x2546000
	049 Move W8, [X20+1087]
	050 Compare W8, 0
	051 JumpIfNotEqual {57}
	052 Move X0, 0x2270000
	053 Move X0, [X0+1152]
	054 Call 0x1B6F7F0
	055 Move W8, 1
	056 Move [X20+1087], W8
	057 Move X8, 0x2270000
	058 Move X8, [X8+1152]
	059 Move X8, [X8]
	060 Move X8, [X8+184]
	061 Move S8, [X8]
	062 Move S9, [X8+4]
	063 Move V10, [X8+8]
	064 Move X0, [X19+48]
	065 Compare X0, 0
	066 JumpIfEqual {88}
	067 Move X19, [X19+56]
	068 Move X1, X31
	069 Call Transform.get_position, X0
	070 Compare X19, 0
	071 JumpIfEqual {88}
	072 Add S2, S10, S2
	073 Add S1, S9, S1
	074 Add S0, S8, S0
	075 Move X0, X19
	076 Move X20, [X31+64]
	077 Move X19, [X31+72]
	078 Move X30, [X31+48]
	079 Move D9, [X31+32]
	080 Move D8, [X31+40]
	081 Move D11, [X31+16]
	082 Move D10, [X31+24]
	083 Move X1, X31
	084 Move D13, [X31+80]
	085 Move D12, [X31+88]
	086 Call Transform.set_position, X0, X1
	087 Return 
	088 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CDED0C CBNZ W8, 0x1CDED14
	0x01CDED10 BL 0x1B6E8F8
	0x01CDED14 MOV X0, X19
	0x01CDED18 LDP X20, X19, [X31 + 0x10]
	0x01CDED1C MOV X1, X31
	0x01CDED20 LDP X30, X21, [X31], #0x20
	0x01CDED24 B 0x1CE8008
	0x01CDED28 STP X30, X19, [X31 - 0x10]!
	0x01CDED2C AND W1, W1, 0x1
	0x01CDED30 MOV X2, X31
	0x01CDED34 MOV X19, X0
	0x01CDED38 BL 0x1CE8140
	0x01CDED3C LDR W1, [X19 + 0x174]
	0x01CDED40 MOV X0, X19
	0x01CDED44 BL 0x1CDDDD8
	0x01CDED48 LDR V0, [X19 + 0x188]
	0x01CDED4C MOV X0, X19
	0x01CDED50 LDP X30, X19, [X31], #0x10
	0x01CDED54 B 0x1CDDEB4
	0x01CDED58 STP X30, X19, [X31 - 0x10]!
	0x01CDED5C MOV X1, X31
	0x01CDED60 MOV X19, X0
	0x01CDED64 BL 0x1CE81EC
	0x01CDED68 MOV X0, X19
	0x01CDED6C BL 0x1CDDD78
	0x01CDED70 STR W0, [X19 + 0x174]
	0x01CDED74 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2546000
	006 Move X20, 0x2272000
	007 Move W8, [X21+1577]
	008 Move X20, [X20+3592]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2272000
	015 Move X0, [X0+3592]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1577], W8
	019 Move W9, 0xCCCD
	020 Move W8, 1
	021 NotImplemented "Instruction MOVK not yet implemented."
	022 Move [X19+133], W8
	023 Move [X19+136], W9
	024 Move X0, [X20]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1B6F8F8
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X1, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call MobView..ctor, X0
	036 Return 

