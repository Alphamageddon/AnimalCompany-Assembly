Type: AnimalCompany.ArmstrongView

Method: System.Void Awake()

Disassembly:
	0x01DE43E8 BL 0x3C8B18C
	0x01DE43EC TBNZ X0, 0x0, 0x1DE4520
	0x01DE43F0 LDP S3, S0, [X31 + 0x20]
	0x01DE43F4 FMUL S1, S12, S8
	0x01DE43F8 FMUL S2, S13, S8
	0x01DE43FC FMUL S0, S0, S8
	0x01DE4400 FADD S14, S3, S0
	0x01DE4404 LDR V0, [X31 + 0x1C]
	0x01DE4408 STR S14, [X19 + 0x1D0]
	0x01DE440C FADD S15, S0, S1
	0x01DE4410 LDR V0, [X31 + 0x18]
	0x01DE4414 STR S15, [X19 + 0x1D4]
	0x01DE4418 FADD S8, S0, S2

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobView.Awake, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {17}
	009 Move X1, X31
	010 Call Transform.get_localPosition, X0
	011 Move [X19+176], S0
	012 Move [X19+184], S1
	013 Move [X19+184], S2
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return 
	017 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01DE441C STR S8, [X19 + 0x1D8]
	0x01DE4420 LDRB W8, [X21 + 0xABD]
	0x01DE4424 CBNZ W8, 0x1DE4438
	0x01DE4428 MOV X0, X20
	0x01DE442C BL 0x1C16CF4
	0x01DE4430 MOVZ W8, 0x1
	0x01DE4434 STRB W8, [X21 + 0xABD]
	0x01DE4438 LDR X8, [X20]
	0x01DE443C LDR X0, [X29]
	0x01DE4440 LDR X8, [X8 + 0xB8]
	0x01DE4444 LDR W9, [X0 + 0xE0]
	0x01DE4448 LDP S9, S10, [X8 + 0x24]
	0x01DE444C LDR V11, [X8 + 0x2C]
	0x01DE4450 CBNZ W9, 0x1DE445C
	0x01DE4454 BL 0x1C16DFC
	0x01DE4458 LDR X0, [X29]
	0x01DE445C LDR X8, [X0 + 0xB8]
	0x01DE4460 LDR W0, [X8]
	0x01DE4464 MOV X1, X31
	0x01DE4468 BL 0x3C35CB8
	0x01DE446C MOV W24, W0
	0x01DE4470 LDR X0, [X26]
	0x01DE4474 LDR W8, [X0 + 0xE0]
	0x01DE4478 CBNZ W8, 0x1DE4480
	0x01DE447C BL 0x1C16DFC
	0x01DE4480 ADD X0, X31, 0x40
	0x01DE4484 FMOV S6, 10
	0x01DE4488 MOV V0.16B, V14.16B
	0x01DE448C MOV V1.16B, V15.16B

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X1, X31
	007 Move X19, X0
	008 Call MobView.Update, X0
	009 Move W8, [X19+169]
	010 Compare W8, 0
	011 JumpIfEqual {33}
	012 Move X0, X31
	013 Call Time.get_time
	014 Move X20, [X19+64]
	015 Compare X20, 0
	016 JumpIfEqual {39}
	017 Move V1, [X19+172]
	018 Move S9, [X19+180]
	019 Move S8, [X19+184]
	020 Multiply S0, S0, S1
	021 Call 0x3EB2B70
	022 Move X0, X20
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Move V1, V9
	027 Move V2, V8
	028 Move X1, X31
	029 Move D9, [X31+48]
	030 Move D8, [X31+56]
	031 Call Transform.set_localPosition, X0, X1
	032 Return 
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+16]
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Return 
	039 Call 0x1C17F20

Method: System.Void SetHeadMoving(System.Boolean isHeadMoving, System.Single speed = 0.2)

Disassembly:
	0x01DE2ED4 LDR X1, [X27]
	0x01DE2ED8 ADD X0, X31, 0x20
	0x01DE2EDC BL 0x2BC4350
	0x01DE2EE0 TBZ X0, 0x0, 0x1DE3034
	0x01DE2EE4 LDR X0, [X28]
	0x01DE2EE8 LDR X23, [X31 + 0x30]
	0x01DE2EEC LDR W8, [X0 + 0xE0]
	0x01DE2EF0 CBNZ W8, 0x1DE2EF8
	0x01DE2EF4 BL 0x1C16DFC
	0x01DE2EF8 MOV X0, X19
	0x01DE2EFC MOV X1, X23
	0x01DE2F00 MOV X2, X31
	0x01DE2F04 BL 0x3C3883C
	0x01DE2F08 TBZ X0, 0x0, 0x1DE2ED4
	0x01DE2F0C CBZ X23, 0x1DE3078
	0x01DE2F10 LDR X0, [X23 + 0x90]

ISIL:
	001 Move [X31-16], X30
	002 And W8, W1, 1
	003 Move [X0+169], W8
	004 Move [X0+172], S0
	005 Move TEMP, X1
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {11}
	009 Move X30, [X31+16]
	010 Return 
	011 Move X8, [X0+64]
	012 Compare X8, 0
	013 JumpIfEqual {22}
	014 Move S1, [X0+180]
	015 Move S2, [X0+184]
	016 Move V0, [X0+176]
	017 Move X0, X8
	018 Move X1, X31
	019 Move X30, [X31+16]
	020 Call Transform.set_localPosition, X0, X1
	021 Return 
	022 Call 0x1C17F20

Method: System.Void SetHeadLookAtTarget(UnityEngine.Vector3 target, UnityEngine.Vector3 viewPoint)

Disassembly:
	0x01DE4490 MOV V2.16B, V8.16B
	0x01DE4494 MOV V3.16B, V9.16B
	0x01DE4498 MOV V4.16B, V10.16B
	0x01DE449C MOV V5.16B, V11.16B
	0x01DE44A0 MOV W1, W24
	0x01DE44A4 MOV X2, X31
	0x01DE44A8 BL 0x3C8B18C
	0x01DE44AC TBZ X0, 0x0, 0x1DE4520
	0x01DE44B0 ADD X0, X31, 0x40
	0x01DE44B4 MOV X1, X31
	0x01DE44B8 BL 0x3C8E66C
	0x01DE44BC STR S0, [X19 + 0x1DC]
	0x01DE44C0 STR S1, [X19 + 0x1E0]
	0x01DE44C4 STR S2, [X19 + 0x1E4]
	0x01DE44C8 ADRP X8, 0x25F4000
	0x01DE44CC LDRB W8, [X8 + 0x786]
	0x01DE44D0 LDR X24, [X31 + 0xE8]
	0x01DE44D4 MOV V8.16B, V0.16B
	0x01DE44D8 MOV V9.16B, V1.16B
	0x01DE44DC MOV V10.16B, V2.16B
	0x01DE44E0 CBNZ W8, 0x1DE44F8
	0x01DE44E4 MOV X0, X20
	0x01DE44E8 BL 0x1C16CF4
	0x01DE44EC MOVZ W8, 0x1
	0x01DE44F0 ADRP X9, 0x25F4000
	0x01DE44F4 STRB W8, [X9 + 0x786]
	0x01DE44F8 LDR X8, [X20]
	0x01DE44FC LDR X8, [X8 + 0xB8]
	0x01DE4500 LDP S0, S1, [X8 + 0x18]
	0x01DE4504 LDR V2, [X8 + 0x20]
	0x01DE4508 FADD S0, S8, S0
	0x01DE450C FADD S1, S9, S1
	0x01DE4510 FADD S2, S10, S2
	0x01DE4514 MOV X1, X24
	0x01DE4518 BL 0x1DE4A08
	0x01DE451C TBNZ X0, 0x0, 0x1DE4544
	0x01DE4520 LDR W8, [X23 + 0x18]
	0x01DE4524 ADD X27, X27, 0x1
	0x01DE4528 CMP X27, W8, SXTW
	0x01DE452C B.LT 0x1DE4380
	0x01DE4530 LDR W8, [X22 + 0x18]
	0x01DE4534 ADD X25, X25, 0x1
	0x01DE4538 CMP X25, W8, SXTW
	0x01DE453C B.LT 0x1DE434C
	0x01DE4540 B 0x1DE4090
	0x01DE4544 MOV X0, X19
	0x01DE4548 MOV V0.16B, V8.16B
	0x01DE454C MOV V1.16B, V9.16B
	0x01DE4550 MOV V2.16B, V10.16B
	0x01DE4554 BL 0x1DE4C14
	0x01DE4558 ADRP X8, 0x2314000
	0x01DE455C LDR X8, [X8 + 0xC20]
	0x01DE4560 ADD X0, X31, 0xD0
	0x01DE4564 LDR X1, [X8]
	0x01DE4568 BL 0x2BC434C
	0x01DE456C LDP X20, X19, [X31 + 0x180]
	0x01DE4570 LDP X22, X21, [X31 + 0x170]
	0x01DE4574 LDP X24, X23, [X31 + 0x160]
	0x01DE4578 LDP X26, X25, [X31 + 0x150]
	0x01DE457C LDP X28, X27, [X31 + 0x140]
	0x01DE4580 LDP X29, X30, [X31 + 0x130]
	0x01DE4584 LDP D9, D8, [X31 + 0x120]
	0x01DE4588 LDP D11, D10, [X31 + 0x110]
	0x01DE458C LDP D13, D12, [X31 + 0x100]
	0x01DE4590 LDP D15, D14, [X31 + 0xF0]
	0x01DE4594 ADD X31, X31, 0x190
	0x01DE4598 RET
	0x01DE459C BL 0x1C16F28
	0x01DE45A0 BL 0x1C16F28
	0x01DE45A4 BL 0x1C16F20
	0x01DE45A8 BL 0x1C16F20
	0x01DE45AC BL 0x1C16F20
	0x01DE45B0 BL 0x1C16F20
	0x01DE45B4 BL 0x1C16F20
	0x01DE45B8 BL 0x1C16F20

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x25F5000
	011 Move W8, [X20+1925]
	012 Move V8, V5
	013 Move V9, V4
	014 Move V11, V3
	015 Move V10, V2
	016 Move V12, V1
	017 Move V13, V0
	018 Move X19, X0
	019 Compare W8, 0
	020 JumpIfNotEqual {26}
	021 Move X0, 0x2310000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+1925], W8
	026 Move X8, 0x2310000
	027 Move X8, [X8+1448]
	028 Subtract S11, S13, S11
	029 Subtract S9, S12, S9
	030 Subtract S10, S10, S8
	031 Move X0, [X8]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Multiply S0, S11, S11
	037 Multiply S1, S9, S9
	038 Move X8, -19894272
	039 Add S0, S0, S1
	040 Move V1, [X8+380]
	041 Multiply S2, S10, S10
	042 Add S0, S2, S0
	043 NotImplemented "Instruction FSQRT not yet implemented."
	044 NotImplemented "Instruction FCMP not yet implemented."
	045 NotImplemented "Instruction FDIV not yet implemented."
	046 NotImplemented "Instruction FDIV not yet implemented."
	047 NotImplemented "Instruction FDIV not yet implemented."
	048 Move X20, 0x25F5000
	049 Move W8, [X20+1923]
	050 Compare W8, 0
	051 JumpIfNotEqual {57}
	052 Move X0, 0x2310000
	053 Move X0, [X0+1440]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X20+1923], W8
	057 Move X8, 0x2310000
	058 Move X8, [X8+1440]
	059 Move X8, [X8]
	060 Move X8, [X8+184]
	061 Move S8, [X8]
	062 Move S9, [X8+4]
	063 Move V10, [X8+8]
	064 Move X0, [X19+56]
	065 Compare X0, 0
	066 JumpIfEqual {88}
	067 Move X19, [X19+64]
	068 Move X1, X31
	069 Call Transform.get_position, X0
	070 Compare X19, 0
	071 JumpIfEqual {88}
	072 Add S2, S10, S2
	073 Add S1, S9, S1
	074 Add S0, S8, S0
	075 Move X0, X19
	076 Move X20, [X31+64]
	077 Move X19, [X31+72]
	078 Move X30, [X31+48]
	079 Move D9, [X31+32]
	080 Move D8, [X31+40]
	081 Move D11, [X31+16]
	082 Move D10, [X31+24]
	083 Move X1, X31
	084 Move D13, [X31+80]
	085 Move D12, [X31+88]
	086 Call Transform.set_position, X0, X1
	087 Return 
	088 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DE45BC BL 0x1C16F28
	0x01DE45C0 BL 0x1C16F28
	0x01DE45C4 BL 0x1C16F20
	0x01DE45C8 B 0x1DE464C
	0x01DE45CC B 0x1DE464C
	0x01DE45D0 B 0x1DE464C
	0x01DE45D4 B 0x1DE464C
	0x01DE45D8 B 0x1DE464C
	0x01DE45DC B 0x1DE464C
	0x01DE45E0 B 0x1DE464C
	0x01DE45E4 B 0x1DE464C
	0x01DE45E8 B 0x1DE464C
	0x01DE45EC B 0x1DE464C
	0x01DE45F0 B 0x1DE464C
	0x01DE45F4 B 0x1DE464C
	0x01DE45F8 B 0x1DE464C
	0x01DE45FC B 0x1DE464C
	0x01DE4600 B 0x1DE464C
	0x01DE4604 B 0x1DE464C
	0x01DE4608 B 0x1DE464C
	0x01DE460C B 0x1DE464C
	0x01DE4610 B 0x1DE464C
	0x01DE4614 B 0x1DE464C
	0x01DE4618 B 0x1DE464C
	0x01DE461C B 0x1DE464C
	0x01DE4620 B 0x1DE464C
	0x01DE4624 B 0x1DE464C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25F5000
	006 Move X20, 0x2315000
	007 Move W8, [X21+3217]
	008 Move X20, [X20+3208]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2315000
	015 Move X0, [X0+3208]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3217], W8
	019 Move W9, 0xCCCD
	020 Move W8, 1
	021 NotImplemented "Instruction MOVK not yet implemented."
	022 Move [X19+169], W8
	023 Move [X19+172], W9
	024 Move X0, [X20]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X1, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call MobView..ctor, X0
	036 Return 

