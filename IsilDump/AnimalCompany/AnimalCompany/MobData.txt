Type: AnimalCompany.MobData

Method: System.Single get_bodySizeSqr()

Disassembly:
	0x01CE9470 BL 0x3AF61C4
	0x01CE9474 CBZ X0, 0x1CE95CC
	0x01CE9478 LDR X2, [X24]

ISIL:
	001 Move V0, [X0+72]
	002 Multiply S0, S0, S0
	003 Return V0

Method: System.Single get_attackRangeSqr()

Disassembly:
	0x01CE947C ADD X1, X31, 0x18
	0x01CE9480 BL 0x2090EE4
	0x01CE9484 TBZ X0, 0x0, 0x1CE9544

ISIL:
	001 Move V0, [X0+76]
	002 Multiply S0, S0, S0
	003 Return V0

Method: System.Single get_hearingDistanceSqr()

Disassembly:
	0x01CE9488 LDR X8, [X31 + 0x18]
	0x01CE948C CBZ X8, 0x1CE95CC
	0x01CE9490 LDR X0, [X8 + 0x20]

ISIL:
	001 Move V0, [X0+128]
	002 Multiply S0, S0, S0
	003 Return V0

Method: System.Void .ctor()

Disassembly:
	0x01CE9494 CBZ X0, 0x1CE95CC
	0x01CE9498 MOV X1, X31
	0x01CE949C BL 0x1C9D868
	0x01CE94A0 TBZ X0, 0x0, 0x1CE9544
	0x01CE94A4 ADD X0, X31, 0x20
	0x01CE94A8 MOV X1, X31
	0x01CE94AC BL 0x3AF6270
	0x01CE94B0 LDRB W8, [X26 + 0x43F]
	0x01CE94B4 MOV V8.16B, V0.16B
	0x01CE94B8 MOV V9.16B, V1.16B
	0x01CE94BC MOV V11.16B, V2.16B
	0x01CE94C0 CBNZ W8, 0x1CE94D0
	0x01CE94C4 MOV X0, X22
	0x01CE94C8 BL 0x1B6E7F0
	0x01CE94CC STRB W27, [X26 + 0x43F]
	0x01CE94D0 LDR X8, [X22]
	0x01CE94D4 LDR X8, [X8 + 0xB8]
	0x01CE94D8 LDP S0, S1, [X8]
	0x01CE94DC LDR V2, [X8 + 0x8]
	0x01CE94E0 FSUB S0, S8, S0
	0x01CE94E4 FSUB S1, S9, S1
	0x01CE94E8 FSUB S2, S11, S2
	0x01CE94EC FMUL S0, S0, S0
	0x01CE94F0 FMUL S1, S1, S1
	0x01CE94F4 FADD S0, S0, S1
	0x01CE94F8 FMUL S1, S2, S2
	0x01CE94FC FADD S0, S1, S0
	0x01CE9500 FCMP S0, S12
	0x01CE9504 B.PL 0x1CE9518
	0x01CE9508 LDR X8, [X31 + 0x18]
	0x01CE950C CBZ X8, 0x1CE95CC
	0x01CE9510 LDR X20, [X8 + 0x20]
	0x01CE9514 B 0x1CE9544
	0x01CE9518 ADD X0, X31, 0x20
	0x01CE951C MOV X1, X31
	0x01CE9520 BL 0x3AF6270
	0x01CE9524 MOV V3.16B, V0.16B
	0x01CE9528 MOV V4.16B, V1.16B
	0x01CE952C MOV V5.16B, V2.16B
	0x01CE9530 MOV V0.16B, V14.16B
	0x01CE9534 MOV V1.16B, V13.16B
	0x01CE9538 MOV V2.16B, V10.16B
	0x01CE953C BL 0x1CE8768
	0x01CE9540 TBNZ X0, 0x0, 0x1CE95B4
	0x01CE9544 LDR W8, [X21 + 0x18]
	0x01CE9548 ADD X23, X23, 0x1
	0x01CE954C ADD X25, X25, 0x2C
	0x01CE9550 CMP X23, W8, SXTW
	0x01CE9554 B.LT 0x1CE9448
	0x01CE9558 ADRP X8, 0x2264000
	0x01CE955C LDR X8, [X8 + 0x478]
	0x01CE9560 STR X20, [X19]
	0x01CE9564 LDR X0, [X8]
	0x01CE9568 LDR W8, [X0 + 0xE0]
	0x01CE956C CBNZ W8, 0x1CE9574
	0x01CE9570 BL 0x1B6E8F8
	0x01CE9574 MOV X0, X20
	0x01CE9578 MOV X1, X31
	0x01CE957C MOV X2, X31
	0x01CE9580 BL 0x3A9D6EC
	0x01CE9584 LDP X20, X19, [X31 + 0xD0]
	0x01CE9588 LDP X22, X21, [X31 + 0xC0]
	0x01CE958C LDP X24, X23, [X31 + 0xB0]
	0x01CE9590 LDP X26, X25, [X31 + 0xA0]
	0x01CE9594 LDP X30, X27, [X31 + 0x90]
	0x01CE9598 LDP D9, D8, [X31 + 0x80]
	0x01CE959C LDP D11, D10, [X31 + 0x70]
	0x01CE95A0 LDP D13, D12, [X31 + 0x60]
	0x01CE95A4 LDP D15, D14, [X31 + 0x50]
	0x01CE95A8 AND W0, W0, 0x1
	0x01CE95AC ADD X31, X31, 0xE0
	0x01CE95B0 RET
	0x01CE95B4 LDR X8, [X31 + 0x18]
	0x01CE95B8 CBZ X8, 0x1CE95CC
	0x01CE95BC LDR X8, [X8 + 0x20]
	0x01CE95C0 MOVZ W0, 0x1
	0x01CE95C4 STR X8, [X19]
	0x01CE95C8 B 0x1CE9584
	0x01CE95CC BL 0x1B6EA1C
	0x01CE95D0 BL 0x1B6EA24
	0x01CE95D4 SUB X31, X31, 0x140
	0x01CE95D8 STP D15, D14, [X31 + 0xA0]
	0x01CE95DC STP D13, D12, [X31 + 0xB0]
	0x01CE95E0 STP D11, D10, [X31 + 0xC0]
	0x01CE95E4 STP D9, D8, [X31 + 0xD0]
	0x01CE95E8 STP X29, X30, [X31 + 0xE0]
	0x01CE95EC STP X28, X27, [X31 + 0xF0]
	0x01CE95F0 STP X26, X25, [X31 + 0x100]
	0x01CE95F4 STP X24, X23, [X31 + 0x110]
	0x01CE95F8 STP X22, X21, [X31 + 0x120]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x253B000
	006 Move X20, 0x2266000
	007 Move W8, [X21+1652]
	008 Move X20, [X20+4032]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2266000
	015 Move X0, [X0+4032]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1652], W8
	019 Move X8, -19116032
	020 Move V0, [X8+456]
	021 Move W8, 0x3F800000
	022 Move [X19+40], W8
	023 Move W1, 1
	024 Move [X19+32], D0
	025 Move X0, [X20]
	026 Call 0x1B6F868
	027 Compare X0, 0
	028 JumpIfEqual {107}
	029 Move W8, [X0+24]
	030 Compare W8, 0
	031 JumpIfEqual {106}
	032 Move W8, 0x40400000
	033 Move [X0+32], W8
	034 Move [X19+48], X0
	035 Move X0, [X20]
	036 Move W1, 2
	037 Call 0x1B6F868
	038 Compare X0, 0
	039 JumpIfEqual {107}
	040 Move W8, [X0+24]
	041 Compare W8, 0
	042 JumpIfEqual {106}
	043 Move W9, 0x40E00000
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move [X0+32], W9
	046 Move X8, -19128320
	047 Move V0, [X8+244]
	048 Move W8, 0x41400000
	049 Move [X0+36], W8
	050 Move [X19+56], X0
	051 Move [X19+4], V0
	052 Move X0, [X20]
	053 Move W1, 1
	054 Call 0x1B6F868
	055 Compare X0, 0
	056 JumpIfEqual {107}
	057 Move W8, [X0+24]
	058 Compare W8, 0
	059 JumpIfEqual {106}
	060 Move W8, 0x40400000
	061 Move [X0+32], W8
	062 Move [X19+88], X0
	063 Move X0, [X20]
	064 Move W1, 1
	065 Call 0x1B6F868
	066 Compare X0, 0
	067 JumpIfEqual {107}
	068 Move W8, [X0+24]
	069 Compare W8, 0
	070 JumpIfEqual {106}
	071 Move W8, 0x42C80000
	072 Move V0, 0
	073 Move W9, 0x42DC0000
	074 Move [X0+32], W8
	075 Move [X19+96], X0
	076 Move [X19+104], D0
	077 Move [X19+112], W9
	078 Move X0, [X20]
	079 Move W1, 1
	080 Call 0x1B6F868
	081 Compare X0, 0
	082 JumpIfEqual {107}
	083 Move W8, [X0+24]
	084 Compare W8, 0
	085 JumpIfEqual {106}
	086 Move X9, -19116032
	087 Move V0, [X9+1016]
	088 Move W8, 0x41000000
	089 Move W10, 0x3F800000
	090 Move W11, 1
	091 Move W12, 0x42700000
	092 Move [X0+32], W8
	093 Move [X19+120], X0
	094 Move [X19+136], W10
	095 Move [X19+140], W11
	096 Move [X19+128], D0
	097 Move [X19+144], W12
	098 Move X0, X19
	099 Move X20, [X31+16]
	100 Move X19, [X31+24]
	101 Move X1, X31
	102 Move X30, [X31+32]
	103 Move X21, [X31+40]
	104 Call ScriptableObject..ctor, X0
	105 Return 
	106 Call 0x1B6FA24
	107 Call 0x1B6FA1C

