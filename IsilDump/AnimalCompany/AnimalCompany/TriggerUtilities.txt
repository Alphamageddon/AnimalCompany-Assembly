Type: AnimalCompany.TriggerUtilities

Method: System.Boolean TryGetNetPlayerFromCollider(UnityEngine.Collider col, out AnimalCompany.NetPlayer netPlayer)

Disassembly:
	0x01E03D50 ADRP X22, 0x25D5000
	0x01E03D54 LDRB W8, [X22 + 0x784]
	0x01E03D58 CBNZ W8, 0x1E03D70
	0x01E03D5C ADRP X0, 0x22F0000
	0x01E03D60 LDR X0, [X0 + 0x5A8]
	0x01E03D64 BL 0x1C16CF4
	0x01E03D68 MOVZ W8, 0x1
	0x01E03D6C STRB W8, [X22 + 0x784]
	0x01E03D70 LDR X0, [X20]
	0x01E03D74 LDR W8, [X0 + 0xE0]
	0x01E03D78 CBNZ W8, 0x1E03D80
	0x01E03D7C BL 0x1C16DFC
	0x01E03D80 FMOV S0, 2
	0x01E03D84 FCMP S8, S0
	0x01E03D88 B.LE 0x1E03E5C
	0x01E03D8C MOV X0, X19
	0x01E03D90 MOV X1, X31
	0x01E03D94 BL 0x3C32E90
	0x01E03D98 MOV X20, X0
	0x01E03D9C MOV X0, X31
	0x01E03DA0 BL 0x3C047F8
	0x01E03DA4 CBZ X0, 0x1E03E80

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25D6000
	006 Move W8, [X21+3449]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22F7000
	014 Move X0, [X0+328]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3449], W8
	018 Compare X20, 0
	019 JumpIfEqual {31}
	020 Move X8, 0x22F7000
	021 Move X8, [X8+328]
	022 Move X0, X20
	023 Move X1, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call 0x21A5990, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: System.Boolean TryGetItemFromCollider(UnityEngine.Collider col, out AnimalCompany.GrabbableItem grabbableItem)

Disassembly:
	0x01E03B30 STP D13, D12, [X31 + 0x20]
	0x01E03B34 STP D11, D10, [X31 + 0x30]
	0x01E03B38 STP D9, D8, [X31 + 0x40]
	0x01E03B3C STP X30, X23, [X31 + 0x50]
	0x01E03B40 STP X22, X21, [X31 + 0x60]
	0x01E03B44 STP X20, X19, [X31 + 0x70]
	0x01E03B48 MOV X19, X0
	0x01E03B4C MOV X0, X31
	0x01E03B50 BL 0x3C047F8
	0x01E03B54 CBZ X0, 0x1E03E80
	0x01E03B58 MOV X1, X31
	0x01E03B5C BL 0x3C32E90
	0x01E03B60 CBZ X0, 0x1E03E80
	0x01E03B64 MOV X1, X31
	0x01E03B68 BL 0x3C3FA04
	0x01E03B6C MOV X0, X31
	0x01E03B70 BL 0x1DC0890
	0x01E03B74 ADRP X22, 0x25D5000
	0x01E03B78 LDRB W8, [X22 + 0x785]
	0x01E03B7C MOV V8.16B, V0.16B
	0x01E03B80 MOV V9.16B, V1.16B
	0x01E03B84 MOV V10.16B, V2.16B
	0x01E03B88 CBNZ W8, 0x1E03BA0
	0x01E03B8C ADRP X0, 0x22F0000
	0x01E03B90 LDR X0, [X0 + 0x5A8]
	0x01E03B94 BL 0x1C16CF4
	0x01E03B98 MOVZ W8, 0x1
	0x01E03B9C STRB W8, [X22 + 0x785]
	0x01E03BA0 ADRP X20, 0x22F0000
	0x01E03BA4 LDR X20, [X20 + 0x5A8]
	0x01E03BA8 LDR X0, [X20]
	0x01E03BAC LDR W8, [X0 + 0xE0]
	0x01E03BB0 CBNZ W8, 0x1E03BB8
	0x01E03BB4 BL 0x1C16DFC
	0x01E03BB8 ADRP X8, 0xFFFFFFFFFECE7000
	0x01E03BBC FMUL S0, S8, S8
	0x01E03BC0 FMUL S1, S9, S9
	0x01E03BC4 LDR V14, [X8 + 0x17C]
	0x01E03BC8 ADRP X21, 0x22F0000
	0x01E03BCC FADD S0, S0, S1
	0x01E03BD0 FMUL S1, S10, S10
	0x01E03BD4 LDR X21, [X21 + 0x5A0]
	0x01E03BD8 FADD S0, S1, S0
	0x01E03BDC FSQRT S0, S0
	0x01E03BE0 FCMP S0, S14
	0x01E03BE4 B.LE 0x1E03BF8
	0x01E03BE8 FDIV S8, S8, S0
	0x01E03BEC FDIV S9, S9, S0
	0x01E03BF0 FDIV S10, S10, S0
	0x01E03BF4 B 0x1E03C28
	0x01E03BF8 ADRP X23, 0x25D5000
	0x01E03BFC LDRB W8, [X23 + 0x783]
	0x01E03C00 CBNZ W8, 0x1E03C18
	0x01E03C04 ADRP X0, 0x22F0000
	0x01E03C08 LDR X0, [X0 + 0x5A0]
	0x01E03C0C BL 0x1C16CF4
	0x01E03C10 MOVZ W8, 0x1
	0x01E03C14 STRB W8, [X23 + 0x783]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25D6000
	007 Move W8, [X21+3450]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x22F4000
	015 Move X0, [X0+3000]
	016 Call 0x1C17CF4
	017 Move X0, 0x22F1000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3450], W8
	022 Move [X19], X31
	023 Compare X20, 0
	024 JumpIfEqual {73}
	025 Move X22, 0x22F1000
	026 Move X22, [X22+1432]
	027 Move X0, X20
	028 Move X1, X31
	029 Call Collider.get_attachedRigidbody, X0
	030 Move X8, [X22]
	031 Move X21, X0
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {37}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Move X0, X21
	038 Move X1, X31
	039 Move X2, X31
	040 Call Object.op_Inequality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {51}
	045 Move X0, X20
	046 Move X1, X31
	047 Call Collider.get_attachedRigidbody, X0
	048 Compare X0, 0
	049 JumpIfEqual {73}
	050 Move X20, X0
	051 Move X8, 0x22F4000
	052 Move X8, [X8+3000]
	053 Move X0, X20
	054 Move X1, [X8]
	055 Call 0x21A4894, X0
	056 Move [X19], X0
	057 Move X20, X0
	058 Move X0, [X22]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X20
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X1, X31
	069 Move X2, X31
	070 Move X30, [X31+48]
	071 Call Object.op_Inequality, X0, X1
	072 Return X0
	073 Call 0x1C17F20

Method: System.Boolean TryGetDamageableFromCollider(UnityEngine.Collider col, out AnimalCompany.IDamageable damageable)

Disassembly:
	0x01E03DA8 MOV X1, X31
	0x01E03DAC BL 0x3C32E90
	0x01E03DB0 CBZ X0, 0x1E03E80
	0x01E03DB4 MOV X1, X31
	0x01E03DB8 BL 0x3C3F58C
	0x01E03DBC CBZ X20, 0x1E03E80
	0x01E03DC0 FADD S2, S10, S2
	0x01E03DC4 FADD S1, S9, S1
	0x01E03DC8 FADD S0, S11, S0
	0x01E03DCC MOV X0, X20
	0x01E03DD0 MOV X1, X31
	0x01E03DD4 BL 0x3C3F62C
	0x01E03DD8 MOV X0, X19
	0x01E03DDC MOV X1, X31
	0x01E03DE0 BL 0x3C32E90
	0x01E03DE4 ADRP X20, 0x25D5000
	0x01E03DE8 LDRB W8, [X20 + 0x786]
	0x01E03DEC MOV X19, X0
	0x01E03DF0 CBNZ W8, 0x1E03E08
	0x01E03DF4 ADRP X0, 0x22F0000
	0x01E03DF8 LDR X0, [X0 + 0x5A0]
	0x01E03DFC BL 0x1C16CF4
	0x01E03E00 MOVZ W8, 0x1
	0x01E03E04 STRB W8, [X20 + 0x786]
	0x01E03E08 LDR X8, [X21]
	0x01E03E0C MOV V0.16B, V11.16B
	0x01E03E10 MOV V1.16B, V9.16B
	0x01E03E14 MOV V2.16B, V10.16B
	0x01E03E18 LDR X8, [X8 + 0xB8]
	0x01E03E1C MOV X0, X31
	0x01E03E20 LDP S3, S4, [X8 + 0x18]
	0x01E03E24 LDR V5, [X8 + 0x20]
	0x01E03E28 BL 0x3C2A810
	0x01E03E2C CBZ X19, 0x1E03E80
	0x01E03E30 MOV X0, X19
	0x01E03E34 LDP X20, X19, [X31 + 0x70]
	0x01E03E38 LDP X22, X21, [X31 + 0x60]
	0x01E03E3C LDP X30, X23, [X31 + 0x50]
	0x01E03E40 LDP D9, D8, [X31 + 0x40]
	0x01E03E44 LDP D11, D10, [X31 + 0x30]
	0x01E03E48 LDP D13, D12, [X31 + 0x20]
	0x01E03E4C LDP D15, D14, [X31 + 0x10]
	0x01E03E50 MOV X1, X31
	0x01E03E54 ADD X31, X31, 0x80
	0x01E03E58 B 0x3C3F7AC
	0x01E03E5C LDP X20, X19, [X31 + 0x70]
	0x01E03E60 LDP X22, X21, [X31 + 0x60]
	0x01E03E64 LDP X30, X23, [X31 + 0x50]
	0x01E03E68 LDP D9, D8, [X31 + 0x40]
	0x01E03E6C LDP D11, D10, [X31 + 0x30]
	0x01E03E70 LDP D13, D12, [X31 + 0x20]
	0x01E03E74 LDP D15, D14, [X31 + 0x10]
	0x01E03E78 ADD X31, X31, 0x80
	0x01E03E7C RET
	0x01E03E80 BL 0x1C16F20
	0x01E03E84 STR X30, [X31 - 0x30]!
	0x01E03E88 STP X22, X21, [X31 + 0x10]
	0x01E03E8C STP X20, X19, [X31 + 0x20]
	0x01E03E90 ADRP X21, 0x25D5000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25D6000
	007 Move W8, [X21+3451]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x22F4000
	015 Move X0, [X0+3048]
	016 Call 0x1C17CF4
	017 Move X0, 0x22F1000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3451], W8
	022 Compare X20, 0
	023 JumpIfEqual {73}
	024 Move X22, 0x22F1000
	025 Move X22, [X22+1432]
	026 Move X0, X20
	027 Move X1, X31
	028 Call Component.get_gameObject, X0
	029 Move X21, X0
	030 Move X0, X20
	031 Move X1, X31
	032 Call Collider.get_attachedRigidbody, X0
	033 Move X8, [X22]
	034 Move X22, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X0, X22
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Inequality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {56}
	048 Move X0, X20
	049 Move X1, X31
	050 Call Collider.get_attachedRigidbody, X0
	051 Compare X0, 0
	052 JumpIfEqual {73}
	053 Move X1, X31
	054 Call Component.get_gameObject, X0
	055 Move X21, X0
	056 Compare X21, 0
	057 JumpIfEqual {73}
	058 Move X8, 0x22F4000
	059 Move X8, [X8+3048]
	060 Move X0, X21
	061 Move X1, [X8]
	062 Call 0x21E68C4, X0
	063 Move [X19], X0
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction CSET not yet implemented."
	070 Move W0, W8
	071 Move X30, [X31+48]
	072 Return X0
	073 Call 0x1C17F20

Method: System.Boolean TryGetStunnableFromCollider(UnityEngine.Collider col, out AnimalCompany.IStunnable stunnable)

Disassembly:
	0x01E03E94 ADRP X22, 0x22F6000
	0x01E03E98 LDRB W8, [X21 + 0xD89]
	0x01E03E9C LDR X22, [X22 + 0x858]
	0x01E03EA0 MOV X19, X1
	0x01E03EA4 MOV X20, X0
	0x01E03EA8 TBNZ X8, 0x0, 0x1E03ED8
	0x01E03EAC ADRP X0, 0x22F0000
	0x01E03EB0 LDR X0, [X0 + 0x958]
	0x01E03EB4 BL 0x1C16CF4
	0x01E03EB8 ADRP X0, 0x22F6000
	0x01E03EBC LDR X0, [X0 + 0x860]
	0x01E03EC0 BL 0x1C16CF4
	0x01E03EC4 ADRP X0, 0x22F6000
	0x01E03EC8 LDR X0, [X0 + 0x858]
	0x01E03ECC BL 0x1C16CF4
	0x01E03ED0 MOVZ W8, 0x1
	0x01E03ED4 STRB W8, [X21 + 0xD89]
	0x01E03ED8 LDR X0, [X22]
	0x01E03EDC BL 0x1C16F10
	0x01E03EE0 MOV X1, X31
	0x01E03EE4 MOV X21, X0
	0x01E03EE8 BL 0x33BDD8C
	0x01E03EEC CBZ X21, 0x1E03F3C
	0x01E03EF0 ADRP X8, 0x22F0000
	0x01E03EF4 LDR X8, [X8 + 0x958]
	0x01E03EF8 STP X20, X19, [X21 + 0x10]
	0x01E03EFC ADRP X19, 0x22F6000
	0x01E03F00 LDR X0, [X8]
	0x01E03F04 LDR X19, [X19 + 0x860]
	0x01E03F08 BL 0x1C16F10
	0x01E03F0C LDR X2, [X19]
	0x01E03F10 MOV X1, X21
	0x01E03F14 MOV X3, X31
	0x01E03F18 MOV X19, X0
	0x01E03F1C BL 0x35BC6F0
	0x01E03F20 MOV X0, X19
	0x01E03F24 LDP X20, X19, [X31 + 0x20]
	0x01E03F28 LDP X22, X21, [X31 + 0x10]
	0x01E03F2C MOV W1, W31
	0x01E03F30 MOV X2, X31
	0x01E03F34 LDR X30, [X31], #0x30
	0x01E03F38 B 0x35BBFC4
	0x01E03F3C BL 0x1C16F20
	0x01E03F40 MOV X1, X31
	0x01E03F44 B 0x33BDD8C
	0x01E03F48 STR X30, [X31 - 0x30]!
	0x01E03F4C STP X22, X21, [X31 + 0x10]
	0x01E03F50 STP X20, X19, [X31 + 0x20]
	0x01E03F54 ADRP X21, 0x25D5000
	0x01E03F58 ADRP X22, 0x22F6000
	0x01E03F5C LDRB W8, [X21 + 0xD8A]
	0x01E03F60 LDR X22, [X22 + 0x868]
	0x01E03F64 MOV X19, X1
	0x01E03F68 MOV X20, X0
	0x01E03F6C TBNZ X8, 0x0, 0x1E03F84
	0x01E03F70 ADRP X0, 0x22F6000
	0x01E03F74 LDR X0, [X0 + 0x868]
	0x01E03F78 BL 0x1C16CF4
	0x01E03F7C MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25D6000
	007 Move W8, [X21+3452]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x22F7000
	015 Move X0, [X0+1944]
	016 Call 0x1C17CF4
	017 Move X0, 0x22F1000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3452], W8
	022 Compare X20, 0
	023 JumpIfEqual {73}
	024 Move X22, 0x22F1000
	025 Move X22, [X22+1432]
	026 Move X0, X20
	027 Move X1, X31
	028 Call Component.get_gameObject, X0
	029 Move X21, X0
	030 Move X0, X20
	031 Move X1, X31
	032 Call Collider.get_attachedRigidbody, X0
	033 Move X8, [X22]
	034 Move X22, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X0, X22
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Inequality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {56}
	048 Move X0, X20
	049 Move X1, X31
	050 Call Collider.get_attachedRigidbody, X0
	051 Compare X0, 0
	052 JumpIfEqual {73}
	053 Move X1, X31
	054 Call Component.get_gameObject, X0
	055 Move X21, X0
	056 Compare X21, 0
	057 JumpIfEqual {73}
	058 Move X8, 0x22F7000
	059 Move X8, [X8+1944]
	060 Move X0, X21
	061 Move X1, [X8]
	062 Call 0x21E68C4, X0
	063 Move [X19], X0
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction CSET not yet implemented."
	070 Move W0, W8
	071 Move X30, [X31+48]
	072 Return X0
	073 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01E03F80 STRB W8, [X21 + 0xD8A]
	0x01E03F84 LDR X0, [X22]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

