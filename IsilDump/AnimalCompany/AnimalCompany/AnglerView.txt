Type: AnimalCompany.AnglerView

Method: System.Void SetAnticipation()

Disassembly:
	0x01CDD008 ADRP X8, 0xFFFFFFFFFEDCC000
	0x01CDD00C LDR V1, [X8 + 0xAB4]
	0x01CDD010 LDR X8, [X9 + 0x368]
	0x01CDD014 LDR X1, [X9 + 0x370]
	0x01CDD018 MOV X0, X19
	0x01CDD01C FDIV S0, S0, S1
	0x01CDD020 BLR X8
	0x01CDD024 LDP X20, X19, [X31 + 0x30]
	0x01CDD028 LDP X22, X21, [X31 + 0x20]
	0x01CDD02C LDR X30, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobView.SetAnticipation, X0
	006 Move X0, [X19+200]
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move X1, X31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Call AudioSource.Play, X0
	013 Return 
	014 Call 0x1B6FA1C

Method: System.Void PlayFoundLightSound()

Disassembly:
	0x01CDA294 MOV X0, X19
	0x01CDA298 BL 0x1CD8E14
	0x01CDA29C FMOV S1, 10
	0x01CDA2A0 FCMP S0, S1
	0x01CDA2A4 B.GE 0x1CDA340
	0x01CDA2A8 MOV X0, X19
	0x01CDA2AC BL 0x1CD8D54

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+192]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call AudioSource.Play, X0
	008 Return 
	009 Call 0x1B6FA1C

Method: System.Void PlayRunningSound(System.Boolean play, System.Single volume = 1)

Disassembly:
	0x01CDA2B0 CMP W0, 0x3
	0x01CDA2B4 B.NE 0x1CDA384
	0x01CDA2B8 MOV X0, X19
	0x01CDA2BC BL 0x1CD8E14
	0x01CDA2C0 MOV X0, X19
	0x01CDA2C4 MOV X1, X31
	0x01CDA2C8 MOV V10.16B, V0.16B
	0x01CDA2CC BL 0x1CE4BFC
	0x01CDA2D0 LDR X19, [X19 + 0xC8]
	0x01CDA2D4 CBZ X19, 0x1CDA3A4
	0x01CDA2D8 MOV V8.16B, V0.16B
	0x01CDA2DC ADD X0, X31, 0xC
	0x01CDA2E0 ADD X1, X31, 0x8
	0x01CDA2E4 MOV V0.16B, V10.16B
	0x01CDA2E8 MOV V9.16B, V1.16B
	0x01CDA2EC MOV V11.16B, V2.16B
	0x01CDA2F0 BL 0x3D198F0
	0x01CDA2F4 LDP S0, S2, [X31 + 0x8]
	0x01CDA2F8 FMOV S3, 0.5
	0x01CDA2FC FMOV S1, W31
	0x01CDA300 FADD S1, S9, S1
	0x01CDA304 FMUL S2, S2, S3
	0x01CDA308 FMUL S0, S0, S3
	0x01CDA30C FADD S2, S11, S2
	0x01CDA310 FADD S0, S8, S0
	0x01CDA314 MOV X0, X19
	0x01CDA318 MOV X1, X31
	0x01CDA31C BL 0x3A4A810
	0x01CDA320 B 0x1CDA384
	0x01CDA324 LDR X8, [X19]
	0x01CDA328 MOV X0, X19

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, [X0+208]
	007 Compare X0, 0
	008 JumpIfEqual {46}
	009 Move W20, W1
	010 Move X1, X31
	011 Move V8, V0
	012 Call AudioSource.get_isPlaying, X0
	013 Move TEMP, X20
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {26}
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, [X19+208]
	022 Compare X0, 0
	023 JumpIfEqual {46}
	024 Move X1, X31
	025 Call AudioSource.Play, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {35}
	030 Move X0, [X19+208]
	031 Compare X0, 0
	032 JumpIfEqual {46}
	033 Move X1, X31
	034 Call AudioSource.Stop, X0
	035 Move X0, [X19+208]
	036 Compare X0, 0
	037 JumpIfEqual {46}
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+8]
	041 Move V0, V8
	042 Move X1, X31
	043 Move V8, [X31+32]
	044 Call AudioSource.set_volume, X0, V0
	045 Return 
	046 Call 0x1B6FA1C

Method: System.Void SetGlow(System.Boolean glow, System.Boolean forceZero = False)

Disassembly:
	0x01CDA354 MOV X0, X20
	0x01CDA358 MOV X1, X31
	0x01CDA35C MOV X2, X31
	0x01CDA360 BL 0x3A9D6EC
	0x01CDA364 TBZ X0, 0x0, 0x1CDA37C
	0x01CDA368 LDR X0, [X19 + 0x178]
	0x01CDA36C CBZ X0, 0x1CDA3A4
	0x01CDA370 MOV W1, W31
	0x01CDA374 MOV X2, X31
	0x01CDA378 BL 0x1C9D8D0
	0x01CDA37C MOV X0, X19
	0x01CDA380 BL 0x1CD9014
	0x01CDA384 LDP X20, X19, [X31 + 0xA0]
	0x01CDA388 LDP X22, X21, [X31 + 0x90]
	0x01CDA38C LDR X30, [X31 + 0x80]
	0x01CDA390 LDP D9, D8, [X31 + 0x70]
	0x01CDA394 LDP D11, D10, [X31 + 0x60]
	0x01CDA398 LDP D13, D12, [X31 + 0x50]
	0x01CDA39C ADD X31, X31, 0xB0
	0x01CDA3A0 RET
	0x01CDA3A4 BL 0x1B6EA1C
	0x01CDA3A8 BL 0x1B6EA24
	0x01CDA3AC B 0x1CDA3B0
	0x01CDA3B0 MOV X21, X0
	0x01CDA3B4 CMP W1, 0x1
	0x01CDA3B8 B.NE 0x1CDA3EC
	0x01CDA3BC MOV X0, X21
	0x01CDA3C0 BL 0x3D19840
	0x01CDA3C4 LDR X20, [X0]
	0x01CDA3C8 BL 0x3D19850
	0x01CDA3CC ADRP X8, 0x2275000
	0x01CDA3D0 LDR X8, [X8 + 0xDA8]
	0x01CDA3D4 ADD X0, X31, 0x30
	0x01CDA3D8 LDR X1, [X8]
	0x01CDA3DC BL 0x2A14F2C
	0x01CDA3E0 CBZ X20, 0x1CDA0B0
	0x01CDA3E4 MOV X0, X20
	0x01CDA3E8 BL 0x1B6EA14
	0x01CDA3EC MOV X20, X31
	0x01CDA3F0 B 0x1CDA3F8
	0x01CDA3F4 MOV X21, X0
	0x01CDA3F8 ADRP X8, 0x2275000
	0x01CDA3FC LDR X8, [X8 + 0xDA8]
	0x01CDA400 LDR X1, [X8]
	0x01CDA404 ADD X0, X31, 0x30
	0x01CDA408 BL 0x2A14F2C
	0x01CDA40C CBNZ X20, 0x1CDA418
	0x01CDA410 MOV X0, X21
	0x01CDA414 BL 0x1C8418C
	0x01CDA418 MOV X0, X20
	0x01CDA41C BL 0x1B6EA14
	0x01CDA420 BL 0x18F46A8
	0x01CDA424 SUB X31, X31, 0x80
	0x01CDA428 STP D15, D14, [X31 + 0x10]
	0x01CDA42C STP D13, D12, [X31 + 0x20]
	0x01CDA430 STP D11, D10, [X31 + 0x30]
	0x01CDA434 STP D9, D8, [X31 + 0x40]
	0x01CDA438 STP X30, X23, [X31 + 0x50]
	0x01CDA43C STP X22, X21, [X31 + 0x60]
	0x01CDA440 STP X20, X19, [X31 + 0x70]
	0x01CDA444 MOV X1, X31
	0x01CDA448 MOV X19, X0
	0x01CDA44C BL 0x1CE6A44
	0x01CDA450 MOV X0, X19
	0x01CDA454 MOV X1, X31
	0x01CDA458 BL 0x1CE4BFC
	0x01CDA45C MOV X0, X19
	0x01CDA460 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x254A000
	008 Move W8, [X22+1566]
	009 Move W19, W2
	010 Move W21, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2276000
	017 Move X0, [X0+3480]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X22+1566], W8
	021 Move X0, [X20+176]
	022 Compare X0, 0
	023 JumpIfEqual {97}
	024 Move X23, 0x2276000
	025 Move X23, [X23+3480]
	026 Move X1, X31
	027 Call Renderer.get_material, X0
	028 Move X8, [X23]
	029 Move X22, X0
	030 Move W9, [X8+224]
	031 Compare W9, 0
	032 JumpIfEqual {41}
	033 Move TEMP, X21
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {48}
	037 Add X9, X20, 136
	038 Add X10, X20, 140
	039 Add X11, X20, 144
	040 Add X12, X20, 148
	041 Move X0, X8
	042 Call 0x1B6F8F8
	043 Move X8, [X23]
	044 Move TEMP, X21
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {37}
	048 Add X9, X20, 152
	049 Add X10, X20, 156
	050 Add X11, X20, 160
	051 Add X12, X20, 164
	052 Compare X22, 0
	053 JumpIfEqual {97}
	054 Move X8, [X8+184]
	055 Move V3, [X12]
	056 Move V2, [X11]
	057 Move V1, [X10]
	058 Move W1, [X8]
	059 Move V0, [X9]
	060 Move X0, X22
	061 Move X2, X31
	062 Call Material.SetColor, X0, X1, X2
	063 Move X0, [X20+168]
	064 Compare X0, 0
	065 JumpIfEqual {97}
	066 And W1, W21, 1
	067 Move X2, X31
	068 Call Behaviour.set_enabled, X0, X1
	069 Move TEMP, X21
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {90}
	073 Move TEMP, X19
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {90}
	077 Move X0, [X20+168]
	078 Compare X0, 0
	079 JumpIfEqual {97}
	080 Move X20, [X31+32]
	081 Move X19, [X31+40]
	082 Move X22, [X31+16]
	083 Move X21, [X31+24]
	084 Move S0, W31
	085 Move X1, X31
	086 Move X30, [X31+48]
	087 Move X23, [X31+56]
	088 Call Light.set_intensity, X0, V0
	089 Return 
	090 Move X20, [X31+32]
	091 Move X19, [X31+40]
	092 Move X22, [X31+16]
	093 Move X21, [X31+24]
	094 Move X30, [X31+48]
	095 Move X23, [X31+56]
	096 Return 
	097 Call 0x1B6FA1C

Method: System.Void SetAnimSpeed(System.Boolean isRunning)

Disassembly:
	0x01CDA32C MOV X1, X31
	0x01CDA330 LDR X9, [X8 + 0x398]
	0x01CDA334 LDR X2, [X8 + 0x3A0]
	0x01CDA338 BLR X9
	0x01CDA33C B 0x1CDA37C
	0x01CDA340 LDR X0, [X22]
	0x01CDA344 LDR X20, [X19 + 0x178]
	0x01CDA348 LDR W8, [X0 + 0xE0]
	0x01CDA34C CBNZ W8, 0x1CDA354
	0x01CDA350 BL 0x1B6E8F8

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {11}
	004 And W31, W1, 1
	005 Move S0, 1.5
	006 Move S1, 3.5
	007 NotImplemented "Instruction FCSEL not yet implemented."
	008 Move [X0+224], S0
	009 Move X30, [X31+16]
	010 Return 
	011 Call 0x1B6FA1C

Method: System.Void Awake()

Disassembly:
	0x01CDD030 ADD X31, X31, 0x40
	0x01CDD034 RET
	0x01CDD038 BL 0x1B6EA1C
	0x01CDD03C BL 0x1B6EA24
	0x01CDD040 MOV X1, X31
	0x01CDD044 B 0x32276F8
	0x01CDD048 STR D10, [X31 - 0x30]!
	0x01CDD04C STP D9, D8, [X31 + 0x10]
	0x01CDD050 STP X30, X19, [X31 + 0x20]
	0x01CDD054 MOVZ W1, 0x3
	0x01CDD058 MOV V8.16B, V2.16B
	0x01CDD05C MOV V9.16B, V1.16B
	0x01CDD060 MOV V10.16B, V0.16B
	0x01CDD064 MOV X19, X0
	0x01CDD068 BL 0x1CDC380
	0x01CDD06C FMOV S0, W31
	0x01CDD070 MOV X0, X19
	0x01CDD074 MOV X1, X31
	0x01CDD078 BL 0x1CE472C
	0x01CDD07C MOV X0, X19
	0x01CDD080 MOV V0.16B, V10.16B
	0x01CDD084 MOV V1.16B, V9.16B
	0x01CDD088 MOV V2.16B, V8.16B
	0x01CDD08C MOV X1, X31
	0x01CDD090 BL 0x1CE4C60
	0x01CDD094 LDR X9, [X19 + 0xB8]
	0x01CDD098 CBZ X9, 0x1CDD0FC
	0x01CDD09C LDR X8, [X9 + 0x38]
	0x01CDD0A0 CBZ X8, 0x1CDD0FC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobView.Awake, X0
	006 Move X0, [X19+216]
	007 Compare X0, 0
	008 JumpIfEqual {34}
	009 Move X1, X31
	010 Call Transform.get_localPosition, X0
	011 Move X0, [X19+216]
	012 Move [X19+240], S0
	013 Move [X19+248], S1
	014 Move [X19+248], S2
	015 Compare X0, 0
	016 JumpIfEqual {34}
	017 Move X1, X31
	018 Call Transform.get_localRotation, X0
	019 Move X0, X31
	020 Call Quaternion.Internal_ToEulerRad, X0
	021 Move X8, -19083264
	022 Move V3, [X8+3612]
	023 Move X0, X31
	024 Multiply S0, S0, S3
	025 Multiply S1, S1, S3
	026 Multiply S2, S2, S3
	027 Call Quaternion.Internal_MakePositive, X0
	028 Move [X19+272], S0
	029 Move [X19+276], S1
	030 Move [X19+280], S2
	031 Move X30, [X31+16]
	032 Move X19, [X31+24]
	033 Return 
	034 Call 0x1B6FA1C

Method: System.Void Update()

Disassembly:
	0x01CDD0A4 LDR W10, [X8 + 0x18]
	0x01CDD0A8 CBZ W10, 0x1CDD100
	0x01CDD0AC LDR X10, [X9 + 0x58]
	0x01CDD0B0 CBZ X10, 0x1CDD0FC
	0x01CDD0B4 LDR W11, [X10 + 0x18]
	0x01CDD0B8 CBZ W11, 0x1CDD100
	0x01CDD0BC LDR X9, [X9 + 0x60]
	0x01CDD0C0 CBZ X9, 0x1CDD0FC
	0x01CDD0C4 LDR W11, [X9 + 0x18]
	0x01CDD0C8 CBZ W11, 0x1CDD100
	0x01CDD0CC LDR X11, [X19]
	0x01CDD0D0 LDR V0, [X8 + 0x20]
	0x01CDD0D4 LDR V1, [X10 + 0x20]
	0x01CDD0D8 LDR V2, [X9 + 0x20]
	0x01CDD0DC LDR X3, [X11 + 0x2A8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobView.Update, X0
	006 Move X0, [X19+176]
	007 Compare X0, 0
	008 JumpIfEqual {19}
	009 Move X19, [X19+184]
	010 Move X1, X31
	011 Call Renderer.get_enabled, X0
	012 Compare X19, 0
	013 JumpIfEqual {19}
	014 And W8, W0, 1
	015 Move [X19+32], W8
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return 
	019 Call 0x1B6FA1C

Method: System.Void LateUpdate()

Disassembly:
	0x01CDD0E0 LDR X2, [X11 + 0x2B0]
	0x01CDD0E4 MOV X0, X19
	0x01CDD0E8 LDP X30, X19, [X31 + 0x20]
	0x01CDD0EC LDP D9, D8, [X31 + 0x10]
	0x01CDD0F0 MOV W1, W31
	0x01CDD0F4 LDR V10, [X31], #0x30
	0x01CDD0F8 BR X3
	0x01CDD0FC BL 0x1B6EA1C
	0x01CDD100 BL 0x1B6EA24
	0x01CDD104 STP X30, X19, [X31 - 0x10]!
	0x01CDD108 MOVZ W1, 0x2
	0x01CDD10C MOV X19, X0
	0x01CDD110 BL 0x1CDC380
	0x01CDD114 LDR X0, [X19 + 0xC8]
	0x01CDD118 STR W31, [X19 + 0x178]
	0x01CDD11C CBZ X0, 0x1CDD190
	0x01CDD120 MOV W1, W31
	0x01CDD124 MOV X2, X31
	0x01CDD128 BL 0x3A4AB90
	0x01CDD12C LDR X9, [X19 + 0xB8]
	0x01CDD130 CBZ X9, 0x1CDD190
	0x01CDD134 LDR X8, [X9 + 0x30]
	0x01CDD138 CBZ X8, 0x1CDD190
	0x01CDD13C LDR W10, [X8 + 0x18]
	0x01CDD140 CMP W10, 0x1
	0x01CDD144 B.LS 0x1CDD194
	0x01CDD148 LDR X10, [X9 + 0x58]
	0x01CDD14C CBZ X10, 0x1CDD190
	0x01CDD150 LDR W11, [X10 + 0x18]
	0x01CDD154 CBZ W11, 0x1CDD194
	0x01CDD158 LDR X9, [X9 + 0x60]
	0x01CDD15C CBZ X9, 0x1CDD190
	0x01CDD160 LDR W11, [X9 + 0x18]
	0x01CDD164 CBZ W11, 0x1CDD194
	0x01CDD168 LDR X11, [X19]
	0x01CDD16C LDR V0, [X8 + 0x24]
	0x01CDD170 LDR V1, [X10 + 0x20]
	0x01CDD174 LDR V2, [X9 + 0x20]
	0x01CDD178 LDR X3, [X11 + 0x2A8]
	0x01CDD17C LDR X2, [X11 + 0x2B0]
	0x01CDD180 MOV X0, X19
	0x01CDD184 MOV W1, W31
	0x01CDD188 LDP X30, X19, [X31], #0x10
	0x01CDD18C BR X3
	0x01CDD190 BL 0x1B6EA1C
	0x01CDD194 BL 0x1B6EA24
	0x01CDD198 STR D10, [X31 - 0x30]!
	0x01CDD19C STP D9, D8, [X31 + 0x8]
	0x01CDD1A0 STR X30, [X31 + 0x18]
	0x01CDD1A4 STP X20, X19, [X31 + 0x20]
	0x01CDD1A8 ADRP X20, 0x2546000
	0x01CDD1AC LDRB W8, [X20 + 0x623]
	0x01CDD1B0 MOV X19, X0
	0x01CDD1B4 TBNZ X8, 0x0, 0x1CDD1CC
	0x01CDD1B8 ADRP X0, 0x2270000
	0x01CDD1BC LDR X0, [X0 + 0x478]
	0x01CDD1C0 BL 0x1B6E7F0
	0x01CDD1C4 MOVZ W8, 0x1
	0x01CDD1C8 STRB W8, [X20 + 0x623]
	0x01CDD1CC MOV X0, X19
	0x01CDD1D0 MOV X1, X31
	0x01CDD1D4 BL 0x1CE6A44
	0x01CDD1D8 LDR X0, [X19 + 0xD0]
	0x01CDD1DC CBZ X0, 0x1CDD338
	0x01CDD1E0 ADRP X20, 0x2270000
	0x01CDD1E4 LDR X20, [X20 + 0x478]
	0x01CDD1E8 MOV X1, X31
	0x01CDD1EC BL 0x3AA7658
	0x01CDD1F0 MOV X0, X19
	0x01CDD1F4 MOV X1, X31
	0x01CDD1F8 MOV V8.16B, V0.16B
	0x01CDD1FC MOV V9.16B, V1.16B
	0x01CDD200 MOV V10.16B, V2.16B
	0x01CDD204 BL 0x1CE4BFC
	0x01CDD208 LDR X0, [X20]
	0x01CDD20C LDR X20, [X19 + 0x140]
	0x01CDD210 FSUB S0, S8, S0

ISIL:
	001 Move [X31-80], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X19, X0
	012 Move X0, X31
	013 Call Time.get_time
	014 Move X20, [X19+216]
	015 Compare X20, 0
	016 JumpIfEqual {89}
	017 Move V1, [X19+224]
	018 Move X8, -19083264
	019 Move V3, [X19+236]
	020 Move V13, [X8+2396]
	021 Move S10, [X19+244]
	022 Move S2, [X19+248]
	023 Multiply S8, S0, S1
	024 Add S14, S8, S8
	025 Multiply S0, S3, S13
	026 Move S12, W31
	027 Add S0, S14, S0
	028 Add S9, S2, S12
	029 Call 0x3D1A900
	030 Move V1, [X19+232]
	031 Move V11, [X19+240]
	032 Multiply S0, S1, S0
	033 Add S10, S10, S0
	034 Move V0, V8
	035 Call 0x3D1A900
	036 Move V1, [X19+228]
	037 Move V2, [X19+264]
	038 Multiply S0, S0, S1
	039 Multiply S1, S2, S13
	040 Add S11, S11, S0
	041 Add S0, S8, S1
	042 Call 0x3D1A900
	043 Move V1, [X19+256]
	044 Move V2, [X19+260]
	045 Multiply S8, S1, S0
	046 Multiply S0, S2, S13
	047 Add S0, S14, S0
	048 Call 0x3D1A900
	049 Move V1, [X19+252]
	050 Move X0, X20
	051 Move V2, V9
	052 Move X1, X31
	053 Multiply S13, S1, S0
	054 Move V0, V11
	055 Move V1, V10
	056 Call Transform.set_localPosition, X0, X1
	057 Move V2, [X19+268]
	058 Move V0, [X19+272]
	059 Move V1, [X19+276]
	060 Move V3, [X19+280]
	061 Move X8, -19083264
	062 Move V4, [X8+2804]
	063 Move X20, [X19+216]
	064 Add S2, S13, S2
	065 Add S1, S8, S1
	066 Add S3, S3, S12
	067 Add S0, S0, S2
	068 Multiply S1, S1, S4
	069 Multiply S0, S0, S4
	070 Multiply S2, S3, S4
	071 Move X0, X31
	072 Call Quaternion.Internal_FromEulerRad, X0
	073 Compare X20, 0
	074 JumpIfEqual {89}
	075 Move X0, X20
	076 Move X20, [X31+64]
	077 Move X19, [X31+72]
	078 Move X30, [X31+56]
	079 Move D9, [X31+40]
	080 Move D8, [X31+48]
	081 Move D11, [X31+24]
	082 Move D10, [X31+32]
	083 Move D13, [X31+8]
	084 Move D12, [X31+16]
	085 Move X1, X31
	086 Move V14, [X31+80]
	087 Call Transform.set_localRotation, X0, X1
	088 Return 
	089 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CDD214 FSUB S1, S9, S1
	0x01CDD218 LDR W8, [X0 + 0xE0]
	0x01CDD21C FSUB S2, S10, S2
	0x01CDD220 FMUL S0, S0, S0
	0x01CDD224 FMUL S1, S1, S1
	0x01CDD228 FADD S8, S0, S1
	0x01CDD22C FMUL S9, S2, S2
	0x01CDD230 CBNZ W8, 0x1CDD238
	0x01CDD234 BL 0x1B6E8F8
	0x01CDD238 MOV X0, X20
	0x01CDD23C MOV X1, X31
	0x01CDD240 MOV X2, X31
	0x01CDD244 FADD S9, S9, S8
	0x01CDD248 BL 0x3A9D6EC
	0x01CDD24C TBZ X0, 0x0, 0x1CDD298
	0x01CDD250 LDR X0, [X19 + 0x140]
	0x01CDD254 CBZ X0, 0x1CDD338
	0x01CDD258 MOV X1, X31
	0x01CDD25C BL 0x1CB47E0
	0x01CDD260 TBNZ X0, 0x0, 0x1CDD298
	0x01CDD264 LDR X0, [X19 + 0xB8]
	0x01CDD268 CBZ X0, 0x1CDD338
	0x01CDD26C MOV X1, X31
	0x01CDD270 BL 0x1CE847C
	0x01CDD274 FCMP S9, S0
	0x01CDD278 B.PL 0x1CDD298
	0x01CDD27C LDR X1, [X19 + 0x140]
	0x01CDD280 MOV X0, X19
	0x01CDD284 LDP X20, X19, [X31 + 0x20]
	0x01CDD288 LDR X30, [X31 + 0x18]
	0x01CDD28C LDP D9, D8, [X31 + 0x8]
	0x01CDD290 LDR V10, [X31], #0x30
	0x01CDD294 B 0x1CDD33C
	0x01CDD298 MOV X0, X19
	0x01CDD29C MOV X1, X31
	0x01CDD2A0 BL 0x1CE46CC
	0x01CDD2A4 MOV X0, X19
	0x01CDD2A8 MOV X1, X31
	0x01CDD2AC MOV V8.16B, V0.16B
	0x01CDD2B0 BL 0x1CE4CC4
	0x01CDD2B4 FADD S0, S8, S0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2547000
	006 Move X20, 0x2273000
	007 Move W8, [X21+1567]
	008 Move X20, [X20+3592]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2273000
	015 Move X0, [X0+3592]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1567], W8
	019 Move X8, -19075072
	020 Move V0, [X8+147]
	021 Move W8, 0xCCCD
	022 NotImplemented "Instruction MOVK not yet implemented."
	023 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	024 Move X8, -19075072
	025 Move [X19+136], V0
	026 Move V0, [X8+205]
	027 Move W8, 0x3FC00000
	028 Move [X19+224], W8
	029 Move X8, -19070976
	030 Move [X19+152], V0
	031 Move V0, [X8+75]
	032 Move W8, 0x3F400000
	033 Move [X19+236], W8
	034 Move W8, 0x41400000
	035 Move [X19+228], D1
	036 Move [X19+252], V0
	037 Move [X19+268], W8
	038 Move X0, [X20]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1B6F8F8
	043 Move X0, X19
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X1, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call MobView..ctor, X0
	050 Return 

Method: System.Void .cctor()

Disassembly:
	0x01CDD2B8 MOV X0, X19
	0x01CDD2BC MOV X1, X31
	0x01CDD2C0 BL 0x1CE472C
	0x01CDD2C4 MOV X0, X19
	0x01CDD2C8 MOV X1, X31
	0x01CDD2CC BL 0x1CE46CC
	0x01CDD2D0 LDR X0, [X19 + 0xB8]
	0x01CDD2D4 CBZ X0, 0x1CDD338
	0x01CDD2D8 LDR V1, [X0 + 0x68]
	0x01CDD2DC FCMP S0, S1
	0x01CDD2E0 B.GE 0x1CDD300
	0x01CDD2E4 MOV X1, X31
	0x01CDD2E8 BL 0x1CE847C
	0x01CDD2EC FCMP S9, S0
	0x01CDD2F0 B.PL 0x1CDD308
	0x01CDD2F4 MOV X0, X19
	0x01CDD2F8 BL 0x1CDD868
	0x01CDD2FC B 0x1CDD308
	0x01CDD300 MOV X0, X19
	0x01CDD304 BL 0x1CDC7B8
	0x01CDD308 LDR X20, [X19 + 0xC8]
	0x01CDD30C MOV X0, X19
	0x01CDD310 MOV X1, X31
	0x01CDD314 BL 0x1CE4BFC
	0x01CDD318 CBZ X20, 0x1CDD338
	0x01CDD31C MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2547000
	006 Move X21, 0x2272000
	007 Move X19, 0x2273000
	008 Move W8, [X20+1568]
	009 Move X21, [X21+832]
	010 Move X19, [X19+3480]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x2273000
	016 Move X0, [X0+3480]
	017 Call 0x1B6F7F0
	018 Move X0, 0x2272000
	019 Move X0, [X0+832]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X20+1568], W8
	023 Move X0, [X21]
	024 Move X1, X31
	025 Call Shader.PropertyToID, X0
	026 Move X8, [X19]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, [X8+184]
	030 Move [X8], W0
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

