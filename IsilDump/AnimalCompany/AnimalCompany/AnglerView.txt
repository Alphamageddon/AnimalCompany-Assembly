Type: AnimalCompany.AnglerView

Method: System.Void SetAnticipation()

Disassembly:
	0x01DE27B0 TBZ X0, 0x0, 0x1DE27F4
	0x01DE27B4 LDR X8, [X19]
	0x01DE27B8 MOV X0, X19
	0x01DE27BC MOV X1, X20
	0x01DE27C0 LDR X9, [X8 + 0x3B8]
	0x01DE27C4 LDR X2, [X8 + 0x3C0]
	0x01DE27C8 BLR X9
	0x01DE27CC CBZ X20, 0x1DE2884
	0x01DE27D0 MOV X0, X20
	0x01DE27D4 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobView.SetAnticipation, X0
	006 Move X0, [X19+240]
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move X1, X31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Call AudioSource.Play, X0
	013 Return 
	014 Call 0x1C17F20

Method: System.Void PlayFoundLightSound()

Disassembly:
	0x01DDF934 MOV V1.16B, V9.16B
	0x01DDF938 MOV V2.16B, V10.16B
	0x01DDF93C MOV V3.16B, V11.16B
	0x01DDF940 MOV V4.16B, V12.16B
	0x01DDF944 MOV V5.16B, V13.16B
	0x01DDF948 MOV V6.16B, V14.16B
	0x01DDF94C MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+232]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call AudioSource.Play, X0
	008 Return 
	009 Call 0x1C17F20

Method: System.Void PlayRunningSound(System.Boolean play, System.Single volume = 1)

Disassembly:
	0x01DDF950 BL 0x1DF8984
	0x01DDF954 TBZ X0, 0x0, 0x1DDFA78
	0x01DDF958 LDR X0, [X23]
	0x01DDF95C LDR X20, [X19 + 0x1A8]
	0x01DDF960 LDR X21, [X31 + 0x28]
	0x01DDF964 LDR W8, [X0 + 0xE0]
	0x01DDF968 CBNZ W8, 0x1DDF970
	0x01DDF96C BL 0x1C16DFC
	0x01DDF970 MOV X0, X20
	0x01DDF974 MOV X1, X21
	0x01DDF978 MOV X2, X31
	0x01DDF97C BL 0x3C354F8
	0x01DDF980 TBZ X0, 0x0, 0x1DDF9C4
	0x01DDF984 LDR X8, [X19]
	0x01DDF988 LDR X1, [X31 + 0x28]
	0x01DDF98C MOV X0, X19
	0x01DDF990 LDR X9, [X8 + 0x458]
	0x01DDF994 LDR X2, [X8 + 0x460]
	0x01DDF998 BLR X9
	0x01DDF99C LDR X0, [X31 + 0x28]
	0x01DDF9A0 CBZ X0, 0x1DDFB08
	0x01DDF9A4 MOV X1, X31
	0x01DDF9A8 BL 0x3C32E90
	0x01DDF9AC CBZ X0, 0x1DDFB08
	0x01DDF9B0 MOV X1, X31
	0x01DDF9B4 BL 0x3C3F58C
	0x01DDF9B8 MOV X0, X19
	0x01DDF9BC BL 0x1DE0234
	0x01DDF9C0 B 0x1DDFAE4
	0x01DDF9C4 MOV X0, X19
	0x01DDF9C8 BL 0x1DDE4B0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, [X0+248]
	007 Compare X0, 0
	008 JumpIfEqual {46}
	009 Move W20, W1
	010 Move X1, X31
	011 Move V8, V0
	012 Call AudioSource.get_isPlaying, X0
	013 Move TEMP, X20
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {26}
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, [X19+248]
	022 Compare X0, 0
	023 JumpIfEqual {46}
	024 Move X1, X31
	025 Call AudioSource.Play, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {35}
	030 Move X0, [X19+248]
	031 Compare X0, 0
	032 JumpIfEqual {46}
	033 Move X1, X31
	034 Call AudioSource.Stop, X0
	035 Move X0, [X19+248]
	036 Compare X0, 0
	037 JumpIfEqual {46}
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+8]
	041 Move V0, V8
	042 Move X1, X31
	043 Move V8, [X31+32]
	044 Call AudioSource.set_volume, X0, V0
	045 Return 
	046 Call 0x1C17F20

Method: System.Void SetGlow(System.Boolean glow, System.Boolean forceZero = False)

Disassembly:
	0x01DDF9F4 FCMP S0, S1
	0x01DDF9F8 B.GE 0x1DDFA94
	0x01DDF9FC MOV X0, X19
	0x01DDFA00 BL 0x1DDE3F0
	0x01DDFA04 CMP W0, 0x3
	0x01DDFA08 B.NE 0x1DDFAE4
	0x01DDFA0C MOV X0, X19
	0x01DDFA10 BL 0x1DDE4B0
	0x01DDFA14 MOV X0, X19
	0x01DDFA18 MOV X1, X31
	0x01DDFA1C MOV V10.16B, V0.16B
	0x01DDFA20 BL 0x1DEA5A0
	0x01DDFA24 LDR X19, [X19 + 0xE8]
	0x01DDFA28 CBZ X19, 0x1DDFB08
	0x01DDFA2C MOV V8.16B, V0.16B
	0x01DDFA30 ADD X0, X31, 0xC
	0x01DDFA34 ADD X1, X31, 0x8
	0x01DDFA38 MOV V0.16B, V10.16B
	0x01DDFA3C MOV V9.16B, V1.16B
	0x01DDFA40 MOV V11.16B, V2.16B
	0x01DDFA44 BL 0x3EB1BC0
	0x01DDFA48 LDP S0, S2, [X31 + 0x8]
	0x01DDFA4C FMOV S3, 0.5
	0x01DDFA50 FMOV S1, W31
	0x01DDFA54 FADD S1, S9, S1
	0x01DDFA58 FMUL S2, S2, S3
	0x01DDFA5C FMUL S0, S0, S3
	0x01DDFA60 FADD S2, S11, S2
	0x01DDFA64 FADD S0, S8, S0
	0x01DDFA68 MOV X0, X19
	0x01DDFA6C MOV X1, X31
	0x01DDFA70 BL 0x3BE13F8
	0x01DDFA74 B 0x1DDFAE4
	0x01DDFA78 LDR X8, [X19]
	0x01DDFA7C MOV X0, X19
	0x01DDFA80 MOV X1, X31
	0x01DDFA84 LDR X9, [X8 + 0x458]
	0x01DDFA88 LDR X2, [X8 + 0x460]
	0x01DDFA8C BLR X9
	0x01DDFA90 B 0x1DDFADC
	0x01DDFA94 FMOV S0, W31
	0x01DDFA98 MOV X0, X19
	0x01DDFA9C BL 0x1DDE510
	0x01DDFAA0 LDR X0, [X23]
	0x01DDFAA4 LDR X20, [X19 + 0x1A8]
	0x01DDFAA8 LDR W8, [X0 + 0xE0]
	0x01DDFAAC CBNZ W8, 0x1DDFAB4
	0x01DDFAB0 BL 0x1C16DFC
	0x01DDFAB4 MOV X0, X20
	0x01DDFAB8 MOV X1, X31
	0x01DDFABC MOV X2, X31
	0x01DDFAC0 BL 0x3C354F8
	0x01DDFAC4 TBZ X0, 0x0, 0x1DDFADC
	0x01DDFAC8 LDR X0, [X19 + 0x1A8]
	0x01DDFACC CBZ X0, 0x1DDFB08
	0x01DDFAD0 MOV W1, W31
	0x01DDFAD4 MOV X2, X31
	0x01DDFAD8 BL 0x1D8E048
	0x01DDFADC MOV X0, X19
	0x01DDFAE0 BL 0x1DDE6B0
	0x01DDFAE4 LDP X20, X19, [X31 + 0xB0]
	0x01DDFAE8 LDP X22, X21, [X31 + 0xA0]
	0x01DDFAEC LDP X30, X23, [X31 + 0x90]
	0x01DDFAF0 LDP D9, D8, [X31 + 0x80]
	0x01DDFAF4 LDP D11, D10, [X31 + 0x70]
	0x01DDFAF8 LDP D13, D12, [X31 + 0x60]
	0x01DDFAFC LDR V14, [X31 + 0x50]
	0x01DDFB00 ADD X31, X31, 0xC0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x25FA000
	008 Move W8, [X22+3206]
	009 Move W19, W2
	010 Move W21, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x231A000
	017 Move X0, [X0+3088]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3206], W8
	021 Move X0, [X20+216]
	022 Compare X0, 0
	023 JumpIfEqual {97}
	024 Move X23, 0x231A000
	025 Move X23, [X23+3088]
	026 Move X1, X31
	027 Call Renderer.get_material, X0
	028 Move X8, [X23]
	029 Move X22, X0
	030 Move W9, [X8+224]
	031 Compare W9, 0
	032 JumpIfEqual {41}
	033 Move TEMP, X21
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {48}
	037 Add X9, X20, 172
	038 Add X10, X20, 176
	039 Add X11, X20, 180
	040 Add X12, X20, 184
	041 Move X0, X8
	042 Call 0x1C17DFC
	043 Move X8, [X23]
	044 Move TEMP, X21
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {37}
	048 Add X9, X20, 188
	049 Add X10, X20, 192
	050 Add X11, X20, 196
	051 Add X12, X20, 200
	052 Compare X22, 0
	053 JumpIfEqual {97}
	054 Move X8, [X8+184]
	055 Move V3, [X12]
	056 Move V2, [X11]
	057 Move V1, [X10]
	058 Move W1, [X8]
	059 Move V0, [X9]
	060 Move X0, X22
	061 Move X2, X31
	062 Call Material.SetColor, X0, X1, X2
	063 Move X0, [X20+208]
	064 Compare X0, 0
	065 JumpIfEqual {97}
	066 And W1, W21, 1
	067 Move X2, X31
	068 Call Behaviour.set_enabled, X0, X1
	069 Move TEMP, X21
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {90}
	073 Move TEMP, X19
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {90}
	077 Move X0, [X20+208]
	078 Compare X0, 0
	079 JumpIfEqual {97}
	080 Move X20, [X31+32]
	081 Move X19, [X31+40]
	082 Move X22, [X31+16]
	083 Move X21, [X31+24]
	084 Move S0, W31
	085 Move X1, X31
	086 Move X30, [X31+48]
	087 Move X23, [X31+56]
	088 Call Light.set_intensity, X0, V0
	089 Return 
	090 Move X20, [X31+32]
	091 Move X19, [X31+40]
	092 Move X22, [X31+16]
	093 Move X21, [X31+24]
	094 Move X30, [X31+48]
	095 Move X23, [X31+56]
	096 Return 
	097 Call 0x1C17F20

Method: System.Void SetAnimSpeed(System.Boolean isRunning)

Disassembly:
	0x01DDF9CC MOV X0, X19
	0x01DDF9D0 MOV X1, X31
	0x01DDF9D4 MOV V8.16B, V0.16B
	0x01DDF9D8 BL 0x1DEA4B8
	0x01DDF9DC FADD S0, S8, S0
	0x01DDF9E0 MOV X0, X19
	0x01DDF9E4 BL 0x1DDE510
	0x01DDF9E8 MOV X0, X19
	0x01DDF9EC BL 0x1DDE4B0
	0x01DDF9F0 FMOV S1, 10

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {11}
	004 And W31, W1, 1
	005 Move S0, 1.5
	006 Move S1, 3.5
	007 NotImplemented "Instruction FCSEL not yet implemented."
	008 Move [X0+264], S0
	009 Move X30, [X31+16]
	010 Return 
	011 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x01DE27D8 BL 0x3C32E90
	0x01DE27DC CBZ X0, 0x1DE2884
	0x01DE27E0 MOV X1, X31
	0x01DE27E4 BL 0x3C3F58C
	0x01DE27E8 MOV X0, X19
	0x01DE27EC BL 0x1DE2894
	0x01DE27F0 B 0x1DE27FC
	0x01DE27F4 MOV X0, X19
	0x01DE27F8 BL 0x1DE2950
	0x01DE27FC LDRB W8, [X19 + 0xBD]
	0x01DE2800 CBZ W8, 0x1DE282C
	0x01DE2804 LDRB W8, [X19 + 0xBC]
	0x01DE2808 CBZ W8, 0x1DE283C
	0x01DE280C LDR X8, [X19]
	0x01DE2810 MOV X0, X19
	0x01DE2814 LDP X20, X19, [X31 + 0x20]
	0x01DE2818 LDP X22, X21, [X31 + 0x10]
	0x01DE281C LDR X2, [X8 + 0x418]
	0x01DE2820 LDR X1, [X8 + 0x420]
	0x01DE2824 LDR X30, [X31], #0x30
	0x01DE2828 BR X2
	0x01DE282C LDP X20, X19, [X31 + 0x20]
	0x01DE2830 LDP X22, X21, [X31 + 0x10]
	0x01DE2834 LDR X30, [X31], #0x30
	0x01DE2838 RET
	0x01DE283C LDR X8, [X19 + 0xC0]
	0x01DE2840 CBZ X8, 0x1DE2884
	0x01DE2844 LDR X8, [X8 + 0x30]
	0x01DE2848 CBZ X8, 0x1DE2884
	0x01DE284C LDR W9, [X8 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobView.Awake, X0
	006 Move X0, [X19+256]
	007 Compare X0, 0
	008 JumpIfEqual {34}
	009 Move X1, X31
	010 Call Transform.get_localPosition, X0
	011 Move X0, [X19+256]
	012 Move [X19+280], S0
	013 Move [X19+284], S1
	014 Move [X19+288], S2
	015 Compare X0, 0
	016 JumpIfEqual {34}
	017 Move X1, X31
	018 Call Transform.get_localRotation, X0
	019 Move X0, X31
	020 Call Quaternion.Internal_ToEulerRad, X0
	021 Move X8, -19886080
	022 Move V3, [X8+1096]
	023 Move X0, X31
	024 Multiply S0, S0, S3
	025 Multiply S1, S1, S3
	026 Multiply S2, S2, S3
	027 Call Quaternion.Internal_MakePositive, X0
	028 Move [X19+312], S0
	029 Move [X19+316], S1
	030 Move [X19+320], S2
	031 Move X30, [X31+16]
	032 Move X19, [X31+24]
	033 Return 
	034 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01DE2850 CBZ W9, 0x1DE2888
	0x01DE2854 LDR X9, [X19]
	0x01DE2858 LDR V0, [X8 + 0x20]
	0x01DE285C ADRP X8, 0xFFFFFFFFFED08000
	0x01DE2860 LDR V1, [X8 + 0xC0]
	0x01DE2864 LDR X2, [X9 + 0x428]
	0x01DE2868 LDR X1, [X9 + 0x430]
	0x01DE286C MOV X0, X19
	0x01DE2870 LDP X20, X19, [X31 + 0x20]
	0x01DE2874 LDP X22, X21, [X31 + 0x10]
	0x01DE2878 FDIV S0, S0, S1
	0x01DE287C LDR X30, [X31], #0x30
	0x01DE2880 BR X2
	0x01DE2884 BL 0x1C16F20
	0x01DE2888 BL 0x1C16F28

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobView.Update, X0
	006 Move X0, [X19+216]
	007 Compare X0, 0
	008 JumpIfEqual {19}
	009 Move X19, [X19+224]
	010 Move X1, X31
	011 Call Renderer.get_enabled, X0
	012 Compare X19, 0
	013 JumpIfEqual {19}
	014 And W8, W0, 1
	015 Move [X19+32], W8
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return 
	019 Call 0x1C17F20

Method: System.Void LateUpdate()

Disassembly:
	0x01DE288C MOV X1, X31
	0x01DE2890 B 0x33BDD8C
	0x01DE2894 STR D10, [X31 - 0x30]!
	0x01DE2898 STP D9, D8, [X31 + 0x10]
	0x01DE289C STP X30, X19, [X31 + 0x20]
	0x01DE28A0 MOVZ W1, 0x3
	0x01DE28A4 MOV V8.16B, V2.16B
	0x01DE28A8 MOV V9.16B, V1.16B
	0x01DE28AC MOV V10.16B, V0.16B
	0x01DE28B0 MOV X19, X0
	0x01DE28B4 BL 0x1DE1B3C
	0x01DE28B8 FMOV S0, W31
	0x01DE28BC MOV X0, X19
	0x01DE28C0 MOV X1, X31
	0x01DE28C4 BL 0x1DEA540
	0x01DE28C8 MOV X0, X19
	0x01DE28CC MOV V0.16B, V10.16B
	0x01DE28D0 MOV V1.16B, V9.16B
	0x01DE28D4 MOV V2.16B, V8.16B
	0x01DE28D8 MOV X1, X31
	0x01DE28DC BL 0x1DE9A40
	0x01DE28E0 LDR X9, [X19 + 0xC0]
	0x01DE28E4 CBZ X9, 0x1DE2948
	0x01DE28E8 LDR X8, [X9 + 0x38]
	0x01DE28EC CBZ X8, 0x1DE2948
	0x01DE28F0 LDR W10, [X8 + 0x18]
	0x01DE28F4 CBZ W10, 0x1DE294C
	0x01DE28F8 LDR X10, [X9 + 0x58]
	0x01DE28FC CBZ X10, 0x1DE2948
	0x01DE2900 LDR W11, [X10 + 0x18]
	0x01DE2904 CBZ W11, 0x1DE294C
	0x01DE2908 LDR X9, [X9 + 0x60]
	0x01DE290C CBZ X9, 0x1DE2948
	0x01DE2910 LDR W11, [X9 + 0x18]
	0x01DE2914 CBZ W11, 0x1DE294C
	0x01DE2918 LDR X11, [X19]
	0x01DE291C LDR V0, [X8 + 0x20]
	0x01DE2920 LDR V1, [X10 + 0x20]
	0x01DE2924 LDR V2, [X9 + 0x20]
	0x01DE2928 LDR X3, [X11 + 0x2C8]
	0x01DE292C LDR X2, [X11 + 0x2D0]
	0x01DE2930 MOV X0, X19
	0x01DE2934 LDP X30, X19, [X31 + 0x20]
	0x01DE2938 LDP D9, D8, [X31 + 0x10]
	0x01DE293C MOV W1, W31
	0x01DE2940 LDR V10, [X31], #0x30
	0x01DE2944 BR X3
	0x01DE2948 BL 0x1C16F20
	0x01DE294C BL 0x1C16F28
	0x01DE2950 STP X30, X19, [X31 - 0x10]!
	0x01DE2954 MOVZ W1, 0x2
	0x01DE2958 MOV X19, X0
	0x01DE295C BL 0x1DE1B3C
	0x01DE2960 LDR X0, [X19 + 0xE8]
	0x01DE2964 STR W31, [X19 + 0x1A8]
	0x01DE2968 CBZ X0, 0x1DE29DC
	0x01DE296C MOV W1, W31
	0x01DE2970 MOV X2, X31
	0x01DE2974 BL 0x3BE17B4
	0x01DE2978 LDR X9, [X19 + 0xC0]
	0x01DE297C CBZ X9, 0x1DE29DC
	0x01DE2980 LDR X8, [X9 + 0x30]
	0x01DE2984 CBZ X8, 0x1DE29DC
	0x01DE2988 LDR W10, [X8 + 0x18]
	0x01DE298C CMP W10, 0x1
	0x01DE2990 B.LS 0x1DE29E0
	0x01DE2994 LDR X10, [X9 + 0x58]
	0x01DE2998 CBZ X10, 0x1DE29DC
	0x01DE299C LDR W11, [X10 + 0x18]
	0x01DE29A0 CBZ W11, 0x1DE29E0
	0x01DE29A4 LDR X9, [X9 + 0x60]
	0x01DE29A8 CBZ X9, 0x1DE29DC
	0x01DE29AC LDR W11, [X9 + 0x18]
	0x01DE29B0 CBZ W11, 0x1DE29E0
	0x01DE29B4 LDR X11, [X19]
	0x01DE29B8 LDR V0, [X8 + 0x24]
	0x01DE29BC LDR V1, [X10 + 0x20]
	0x01DE29C0 LDR V2, [X9 + 0x20]

ISIL:
	001 Move [X31-80], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X19, X0
	012 Move X0, X31
	013 Call Time.get_time
	014 Move X20, [X19+256]
	015 Compare X20, 0
	016 JumpIfEqual {89}
	017 Move V1, [X19+264]
	018 Move X8, -19890176
	019 Move V3, [X19+276]
	020 Move V13, [X8+3916]
	021 Move V2, [X19+288]
	022 Move V10, [X19+284]
	023 Multiply S8, S0, S1
	024 Add S14, S8, S8
	025 Multiply S0, S3, S13
	026 Move S12, W31
	027 Add S0, S14, S0
	028 Add S9, S2, S12
	029 Call 0x3EB2BD0
	030 Move V1, [X19+272]
	031 Move V11, [X19+280]
	032 Multiply S0, S1, S0
	033 Add S10, S10, S0
	034 Move V0, V8
	035 Call 0x3EB2BD0
	036 Move V1, [X19+268]
	037 Move V2, [X19+304]
	038 Multiply S0, S0, S1
	039 Multiply S1, S2, S13
	040 Add S11, S11, S0
	041 Add S0, S8, S1
	042 Call 0x3EB2BD0
	043 Move V1, [X19+296]
	044 Move V2, [X19+300]
	045 Multiply S8, S1, S0
	046 Multiply S0, S2, S13
	047 Add S0, S14, S0
	048 Call 0x3EB2BD0
	049 Move V1, [X19+292]
	050 Move X0, X20
	051 Move V2, V9
	052 Move X1, X31
	053 Multiply S13, S1, S0
	054 Move V0, V11
	055 Move V1, V10
	056 Call Transform.set_localPosition, X0, X1
	057 Move V2, [X19+308]
	058 Move V0, [X19+312]
	059 Move V1, [X19+316]
	060 Move V3, [X19+320]
	061 Move X8, -19886080
	062 Move V4, [X8+260]
	063 Move X20, [X19+256]
	064 Add S2, S13, S2
	065 Add S1, S8, S1
	066 Add S3, S3, S12
	067 Add S0, S0, S2
	068 Multiply S1, S1, S4
	069 Multiply S0, S0, S4
	070 Multiply S2, S3, S4
	071 Move X0, X31
	072 Call Quaternion.Internal_FromEulerRad, X0
	073 Compare X20, 0
	074 JumpIfEqual {89}
	075 Move X0, X20
	076 Move X20, [X31+64]
	077 Move X19, [X31+72]
	078 Move X30, [X31+56]
	079 Move D9, [X31+40]
	080 Move D8, [X31+48]
	081 Move D11, [X31+24]
	082 Move D10, [X31+32]
	083 Move D13, [X31+8]
	084 Move D12, [X31+16]
	085 Move X1, X31
	086 Move V14, [X31+80]
	087 Call Transform.set_localRotation, X0, X1
	088 Return 
	089 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DE29C4 LDR X3, [X11 + 0x2C8]
	0x01DE29C8 LDR X2, [X11 + 0x2D0]
	0x01DE29CC MOV X0, X19
	0x01DE29D0 MOV W1, W31
	0x01DE29D4 LDP X30, X19, [X31], #0x10
	0x01DE29D8 BR X3
	0x01DE29DC BL 0x1C16F20
	0x01DE29E0 BL 0x1C16F28
	0x01DE29E4 STR D10, [X31 - 0x30]!
	0x01DE29E8 STP D9, D8, [X31 + 0x8]
	0x01DE29EC STR X30, [X31 + 0x18]
	0x01DE29F0 STP X20, X19, [X31 + 0x20]
	0x01DE29F4 ADRP X20, 0x25F6000
	0x01DE29F8 LDRB W8, [X20 + 0xC8B]
	0x01DE29FC MOV X19, X0
	0x01DE2A00 TBNZ X8, 0x0, 0x1DE2A18
	0x01DE2A04 ADRP X0, 0x2311000
	0x01DE2A08 LDR X0, [X0 + 0x598]
	0x01DE2A0C BL 0x1C16CF4
	0x01DE2A10 MOVZ W8, 0x1
	0x01DE2A14 STRB W8, [X20 + 0xC8B]
	0x01DE2A18 MOV X0, X19
	0x01DE2A1C MOV X1, X31
	0x01DE2A20 BL 0x1DEA1C0
	0x01DE2A24 LDR X0, [X19 + 0xD0]
	0x01DE2A28 CBZ X0, 0x1DE2B84
	0x01DE2A2C ADRP X20, 0x2311000
	0x01DE2A30 LDR X20, [X20 + 0x598]
	0x01DE2A34 MOV X1, X31
	0x01DE2A38 BL 0x3C3F58C
	0x01DE2A3C MOV X0, X19
	0x01DE2A40 MOV X1, X31
	0x01DE2A44 MOV V8.16B, V0.16B
	0x01DE2A48 MOV V9.16B, V1.16B
	0x01DE2A4C MOV V10.16B, V2.16B
	0x01DE2A50 BL 0x1DEA5A0
	0x01DE2A54 LDR X0, [X20]
	0x01DE2A58 LDR X20, [X19 + 0x160]
	0x01DE2A5C FSUB S0, S8, S0
	0x01DE2A60 FSUB S1, S9, S1
	0x01DE2A64 LDR W8, [X0 + 0xE0]
	0x01DE2A68 FSUB S2, S10, S2
	0x01DE2A6C FMUL S0, S0, S0
	0x01DE2A70 FMUL S1, S1, S1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x25F7000
	007 Move X20, 0x2317000
	008 Move W8, [X22+3207]
	009 Move X20, [X20+3208]
	010 Move X19, X0
	011 Add X21, X0, 268
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2317000
	017 Move X0, [X0+3208]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3207], W8
	021 Move X8, -19881984
	022 Move V0, [X8+255]
	023 Move X8, -19877888
	024 Move [X19+172], V0
	025 Move V0, [X8+58]
	026 Move W8, 0x3FC00000
	027 Move [X19+264], W8
	028 Move W8, 0xCCCD
	029 NotImplemented "Instruction MOVK not yet implemented."
	030 Move [X19+188], V0
	031 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	032 Move X8, -19877888
	033 Move [X21], D0
	034 Move V0, [X8+189]
	035 Move W8, 0x3F400000
	036 Move [X19+276], W8
	037 Move W8, 0x41400000
	038 Move [X21+24], V0
	039 Move [X19+308], W8
	040 Move X0, [X20]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X19
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X1, X31
	051 Move X30, [X31+48]
	052 Call MobView..ctor, X0
	053 Return 

Method: System.Void .cctor()

Disassembly:
	0x01DE2A74 FADD S8, S0, S1
	0x01DE2A78 FMUL S9, S2, S2
	0x01DE2A7C CBNZ W8, 0x1DE2A84
	0x01DE2A80 BL 0x1C16DFC
	0x01DE2A84 MOV X0, X20
	0x01DE2A88 MOV X1, X31
	0x01DE2A8C MOV X2, X31
	0x01DE2A90 FADD S9, S9, S8
	0x01DE2A94 BL 0x3C354F8
	0x01DE2A98 TBZ X0, 0x0, 0x1DE2AE4
	0x01DE2A9C LDR X0, [X19 + 0x160]
	0x01DE2AA0 CBZ X0, 0x1DE2B84
	0x01DE2AA4 MOV X1, X31
	0x01DE2AA8 BL 0x1DAEC64
	0x01DE2AAC TBNZ X0, 0x0, 0x1DE2AE4
	0x01DE2AB0 LDR X0, [X19 + 0xC0]
	0x01DE2AB4 CBZ X0, 0x1DE2B84
	0x01DE2AB8 MOV X1, X31
	0x01DE2ABC BL 0x1DEA4D4
	0x01DE2AC0 FCMP S9, S0
	0x01DE2AC4 B.PL 0x1DE2AE4
	0x01DE2AC8 LDR X1, [X19 + 0x160]
	0x01DE2ACC MOV X0, X19
	0x01DE2AD0 LDP X20, X19, [X31 + 0x20]
	0x01DE2AD4 LDR X30, [X31 + 0x18]
	0x01DE2AD8 LDP D9, D8, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25F7000
	006 Move X21, 0x2315000
	007 Move X19, 0x2317000
	008 Move W8, [X20+3208]
	009 Move X21, [X21+3208]
	010 Move X19, [X19+3088]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x2317000
	016 Move X0, [X0+3088]
	017 Call 0x1C17CF4
	018 Move X0, 0x2315000
	019 Move X0, [X0+3208]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3208], W8
	023 Move X0, [X21]
	024 Move X1, X31
	025 Call Shader.PropertyToID, X0
	026 Move X8, [X19]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, [X8+184]
	030 Move [X8], W0
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

