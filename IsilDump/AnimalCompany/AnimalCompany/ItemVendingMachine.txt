Type: AnimalCompany.ItemVendingMachine

Method: System.Boolean get_IsPurchaseLimited()

Disassembly:
	0x01CAB010 ADD X0, X31, 0x10
	0x01CAB014 LDR X1, [X8]
	0x01CAB018 STP X31, X31, [X31 + 0x10]
	0x01CAB01C BL 0x25FCCA4
	0x01CAB020 LDR W8, [X19 + 0x18]
	0x01CAB024 CMP W8, 0x2
	0x01CAB028 B.LS 0x1CAB088
	0x01CAB02C LDR V0, [X31 + 0x1]
	0x01CAB030 ADRP X8, 0x22A2000
	0x01CAB034 STR V0, [X19 + 0x4]
	0x01CAB038 LDR X8, [X8 + 0x9A0]
	0x01CAB03C LDR X0, [X8]
	0x01CAB040 LDR W8, [X0 + 0xE0]
	0x01CAB044 CBNZ W8, 0x1CAB04C
	0x01CAB048 BL 0x1B6E8F8
	0x01CAB04C ADRP X8, 0x22A3000
	0x01CAB050 LDR X8, [X8 + 0x7E8]
	0x01CAB054 MOV X1, X19
	0x01CAB058 MOV X2, X31
	0x01CAB05C LDR X0, [X8]
	0x01CAB060 BL 0x1CCF488
	0x01CAB064 LDP X20, X19, [X31 + 0xF0]
	0x01CAB068 LDP X22, X21, [X31 + 0xE0]
	0x01CAB06C LDP X24, X23, [X31 + 0xD0]
	0x01CAB070 LDP X26, X25, [X31 + 0xC0]
	0x01CAB074 LDP X28, X27, [X31 + 0xB0]
	0x01CAB078 LDR X30, [X31 + 0xA0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2579000
	005 Move X20, 0x22A4000
	006 Move W8, [X19+1149]
	007 Move X20, [X20+1832]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x22A4000
	013 Move X0, [X0+1832]
	014 Call 0x1B6F7F0
	015 Move X0, 0x22A4000
	016 Move X0, [X0+1840]
	017 Call 0x1B6F7F0
	018 Move W8, 1
	019 Move [X19+1149], W8
	020 Move X8, [X20]
	021 Move X8, [X8+184]
	022 Move W9, [X8+8]
	023 Compare W9, 0
	024 JumpIfEqual {28}
	025 Move W8, [X8+4]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSET not yet implemented."
	028 Move W0, W31
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

Method: System.Void Awake()

Disassembly:
	0x01CAB07C ADD X31, X31, 0x100
	0x01CAB080 RET
	0x01CAB084 BL 0x1B6EA1C
	0x01CAB088 BL 0x1B6EA24
	0x01CAB08C BL 0x1B6EA1C
	0x01CAB090 BL 0x1B6EA24
	0x01CAB094 BL 0x1B6EA1C
	0x01CAB098 BL 0x1B6EA1C
	0x01CAB09C BL 0x1B6EA1C
	0x01CAB0A0 BL 0x1B6EA1C
	0x01CAB0A4 BL 0x1B6EA1C
	0x01CAB0A8 B 0x1CAB0FC
	0x01CAB0AC B 0x1CAB0FC
	0x01CAB0B0 B 0x1CAB0FC
	0x01CAB0B4 B 0x1CAB0FC
	0x01CAB0B8 B 0x1CAB0FC
	0x01CAB0BC B 0x1CAB0F0
	0x01CAB0C0 B 0x1CAB0FC
	0x01CAB0C4 B 0x1CAB0F0
	0x01CAB0C8 B 0x1CAB0F0
	0x01CAB0CC B 0x1CAB0F0
	0x01CAB0D0 B 0x1CAB0FC
	0x01CAB0D4 B 0x1CAB0FC
	0x01CAB0D8 B 0x1CAB0FC
	0x01CAB0DC B 0x1CAB0FC
	0x01CAB0E0 B 0x1CAB0F0
	0x01CAB0E4 B 0x1CAB0F0
	0x01CAB0E8 B 0x1CAB0F0
	0x01CAB0EC B 0x1CAB0F0
	0x01CAB0F0 MOV X22, X0
	0x01CAB0F4 AND W25, W24, 0x1
	0x01CAB0F8 B 0x1CAB104
	0x01CAB0FC MOV X22, X0
	0x01CAB100 MOV W25, W31
	0x01CAB104 CMP W1, 0x1
	0x01CAB108 B.NE 0x1CAB1D0
	0x01CAB10C MOV X0, X22
	0x01CAB110 BL 0x3D19840
	0x01CAB114 MOV X22, X0
	0x01CAB118 ADRP X0, 0x22A2000
	0x01CAB11C LDR X0, [X0 + 0x670]
	0x01CAB120 BL 0x1B6E804
	0x01CAB124 LDR X8, [X22]
	0x01CAB128 LDR X1, [X8]
	0x01CAB12C BL 0x1B6ED6C
	0x01CAB130 TBZ X0, 0x0, 0x1CAB1A8
	0x01CAB134 LDR X22, [X22]
	0x01CAB138 BL 0x3D19850
	0x01CAB13C ADRP X0, 0x22A2000
	0x01CAB140 LDR X0, [X0 + 0x628]
	0x01CAB144 BL 0x1B6E804
	0x01CAB148 LDR W8, [X0 + 0xE0]
	0x01CAB14C CBNZ W8, 0x1CAB154
	0x01CAB150 BL 0x1B6E8F8
	0x01CAB154 ADRP X0, 0x22A3000
	0x01CAB158 LDR X0, [X0 + 0x7F0]
	0x01CAB15C BL 0x1B6E804
	0x01CAB160 MOV X23, X0
	0x01CAB164 ADRP X0, 0x22A3000
	0x01CAB168 LDR X0, [X0 + 0x7F8]
	0x01CAB16C BL 0x1B6E804
	0x01CAB170 MOV X24, X0
	0x01CAB174 ADRP X0, 0x22A3000
	0x01CAB178 LDR X0, [X0 + 0x800]
	0x01CAB17C BL 0x1B6E804
	0x01CAB180 MOV X4, X0
	0x01CAB184 MOVZ W5, 0xC0
	0x01CAB188 MOV X0, X23
	0x01CAB18C MOV X1, X22
	0x01CAB190 MOV X2, X31
	0x01CAB194 MOV X3, X24
	0x01CAB198 MOV X6, X31
	0x01CAB19C BL 0x342B5F0
	0x01CAB1A0 TBZ X25, 0x0, 0x1CAAE48
	0x01CAB1A4 B 0x1CAAEA8
	0x01CAB1A8 MOVZ W0, 0x8
	0x01CAB1AC BL 0x3D19860
	0x01CAB1B0 LDR X8, [X22]
	0x01CAB1B4 STR X8, [X0]
	0x01CAB1B8 ADRP X1, 0x2071000
	0x01CAB1BC ADD X1, X1, 0xBD8
	0x01CAB1C0 MOV X2, X31
	0x01CAB1C4 BL 0x3D19870
	0x01CAB1C8 MOV X22, X0
	0x01CAB1CC BL 0x3D19850
	0x01CAB1D0 MOV X0, X22
	0x01CAB1D4 BL 0x1C8418C
	0x01CAB1D8 BL 0x18F46A8
	0x01CAB1DC STP X30, X23, [X31 - 0x30]!
	0x01CAB1E0 STP X22, X21, [X31 + 0x10]
	0x01CAB1E4 STP X20, X19, [X31 + 0x20]
	0x01CAB1E8 ADRP X19, 0x2578000
	0x01CAB1EC ADRP X22, 0x22A3000
	0x01CAB1F0 LDRB W8, [X19 + 0x4E6]
	0x01CAB1F4 LDR X22, [X22 + 0x2A8]
	0x01CAB1F8 TBNZ X8, 0x0, 0x1CAB258
	0x01CAB1FC ADRP X0, 0x22A3000
	0x01CAB200 LDR X0, [X0 + 0x808]
	0x01CAB204 BL 0x1B6E7F0
	0x01CAB208 ADRP X0, 0x22A3000
	0x01CAB20C LDR X0, [X0 + 0x810]
	0x01CAB210 BL 0x1B6E7F0
	0x01CAB214 ADRP X0, 0x22A3000
	0x01CAB218 LDR X0, [X0 + 0x818]
	0x01CAB21C BL 0x1B6E7F0
	0x01CAB220 ADRP X0, 0x22A3000
	0x01CAB224 LDR X0, [X0 + 0x2A8]
	0x01CAB228 BL 0x1B6E7F0
	0x01CAB22C ADRP X0, 0x22A2000
	0x01CAB230 LDR X0, [X0 + 0x478]
	0x01CAB234 BL 0x1B6E7F0
	0x01CAB238 ADRP X0, 0x22A3000
	0x01CAB23C LDR X0, [X0 + 0x820]
	0x01CAB240 BL 0x1B6E7F0
	0x01CAB244 ADRP X0, 0x22A3000
	0x01CAB248 LDR X0, [X0 + 0x828]
	0x01CAB24C BL 0x1B6E7F0
	0x01CAB250 MOVZ W8, 0x1
	0x01CAB254 STRB W8, [X19 + 0x4E6]
	0x01CAB258 LDR X0, [X22]
	0x01CAB25C ADRP X19, 0x22A2000
	0x01CAB260 LDR W8, [X0 + 0xE0]
	0x01CAB264 LDR X19, [X19 + 0x478]
	0x01CAB268 CBNZ W8, 0x1CAB274
	0x01CAB26C BL 0x1B6E8F8
	0x01CAB270 LDR X0, [X22]
	0x01CAB274 LDR X8, [X19]
	0x01CAB278 LDR X9, [X0 + 0xB8]
	0x01CAB27C LDR W10, [X8 + 0xE0]
	0x01CAB280 LDR X19, [X9 + 0x8]
	0x01CAB284 CBNZ W10, 0x1CAB290
	0x01CAB288 MOV X0, X8
	0x01CAB28C BL 0x1B6E8F8
	0x01CAB290 MOV X0, X19
	0x01CAB294 MOV X1, X31
	0x01CAB298 MOV X2, X31
	0x01CAB29C BL 0x3A9D6EC
	0x01CAB2A0 LDR X8, [X22]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2579000
	008 Move X21, 0x22A4000
	009 Move W8, [X20+1150]
	010 Move X21, [X21+1848]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {39}
	016 Move X0, 0x22A4000
	017 Move X0, [X0+1856]
	018 Call 0x1B6F7F0
	019 Move X0, 0x22A3000
	020 Move X0, [X0+1256]
	021 Call 0x1B6F7F0
	022 Move X0, 0x22A4000
	023 Move X0, [X0+1848]
	024 Call 0x1B6F7F0
	025 Move X0, 0x22A3000
	026 Move X0, [X0+2976]
	027 Call 0x1B6F7F0
	028 Move X0, 0x22A4000
	029 Move X0, [X0+1864]
	030 Call 0x1B6F7F0
	031 Move X0, 0x22A4000
	032 Move X0, [X0+1872]
	033 Call 0x1B6F7F0
	034 Move X0, 0x22A3000
	035 Move X0, [X0+2960]
	036 Call 0x1B6F7F0
	037 Move W8, 1
	038 Move [X20+1150], W8
	039 Move X1, [X21]
	040 Move X0, X19
	041 Call 0x2090DE8, X0
	042 Move [X19+80], X0
	043 Compare X0, 0
	044 JumpIfEqual {154}
	045 Move X23, 0x22A4000
	046 Move X23, [X23+1856]
	047 Move X20, X0
	048 Move X21, [X0+32]
	049 Move X22, 0x22A4000
	050 Move X0, [X23]
	051 Move X22, [X22+1864]
	052 Call 0x1B6FA0C
	053 Move X2, [X22]
	054 Move X1, X19
	055 Move X3, X31
	056 Move X22, X0
	057 Call Action`2<Int32Enum, Int32Enum>..ctor, X0, X1, X2
	058 Move X0, X21
	059 Move X1, X22
	060 Move X2, X31
	061 Call Delegate.Combine, X0, X1
	062 Compare X0, 0
	063 JumpIfEqual {80}
	064 Move X22, [X23]
	065 Move X21, X0
	066 Move X1, X22
	067 Call 0x1B6F8FC
	068 Compare X0, 0
	069 JumpIfEqual {156}
	070 Move [X20+32], X0
	071 Move X20, [X23]
	072 Move X0, X21
	073 Move X1, X20
	074 Call 0x1B6F8FC
	075 Compare X0, 0
	076 JumpIfNotEqual {81}
	077 Move X0, X21
	078 Move X1, X20
	079 Call 0x1B6FCDC
	080 Move [X20+32], X31
	081 Move X8, 0x22A3000
	082 Move X8, [X8+2960]
	083 Move X20, 0x22A4000
	084 Move X22, 0x22A3000
	085 Move X21, 0x22A3000
	086 Move X0, [X8]
	087 Move X20, [X20+1872]
	088 Move X22, [X22+2976]
	089 Move X21, [X21+1256]
	090 Call 0x1B6FA0C
	091 Move X2, [X20]
	092 Move X1, X19
	093 Move X3, X31
	094 Move X20, X0
	095 Call ObserverDelegate..ctor, X0, X1, X2
	096 Move X0, [X22]
	097 Move W1, 1
	098 Call 0x1B6F868
	099 Move X8, [X21]
	100 Move X19, X0
	101 Move W9, [X8+224]
	102 Compare W9, 0
	103 JumpIfNotEqual {106}
	104 Move X0, X8
	105 Call 0x1B6F8F8
	106 Move X22, 0x2579000
	107 Move W8, [X22+1091]
	108 Compare W8, 0
	109 JumpIfNotEqual {115}
	110 Move X0, 0x22A3000
	111 Move X0, [X0+1256]
	112 Call 0x1B6F7F0
	113 Move W8, 1
	114 Move [X22+1091], W8
	115 Move X0, [X21]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {121}
	119 Call 0x1B6F8F8
	120 Move X0, [X21]
	121 Move X8, [X0+184]
	122 Move X8, [X8]
	123 Compare X8, 0
	124 JumpIfEqual {154}
	125 Move X8, [X8+168]
	126 Compare X8, 0
	127 JumpIfEqual {154}
	128 Compare X19, 0
	129 JumpIfEqual {154}
	130 Move X21, [X8+112]
	131 Compare X21, 0
	132 JumpIfEqual {139}
	133 Move X8, [X19]
	134 Move X0, X21
	135 Move X1, [X8+64]
	136 Call 0x1B6F8FC
	137 Compare X0, 0
	138 JumpIfEqual {159}
	139 Move W8, [X19+24]
	140 Compare W8, 0
	141 JumpIfEqual {155}
	142 Move [X19+32], X21
	143 Move X0, X20
	144 Move X1, X19
	145 Move X20, [X31+32]
	146 Move X19, [X31+40]
	147 Move X22, [X31+16]
	148 Move X21, [X31+24]
	149 Move X2, X31
	150 Move X30, [X31+48]
	151 Move X23, [X31+56]
	152 Call App.RegisterObserver, X0, X1
	153 Return 
	154 Call 0x1B6FA1C
	155 Call 0x1B6FA24
	156 Move X0, X21
	157 Move X1, X22
	158 Call 0x1B6FCDC
	159 Call 0x1B6FA40
	160 Move X1, X31
	161 Call 0x1B6F8E8

Method: System.Void OnDestroy()

Disassembly:
	0x01CAB2A4 MOV W19, W0
	0x01CAB2A8 LDR W9, [X8 + 0xE0]
	0x01CAB2AC CBNZ W9, 0x1CAB2BC
	0x01CAB2B0 MOV X0, X8
	0x01CAB2B4 BL 0x1B6E8F8
	0x01CAB2B8 LDR X8, [X22]
	0x01CAB2BC LDR X8, [X8 + 0xB8]
	0x01CAB2C0 TBZ X19, 0x0, 0x1CAB2CC
	0x01CAB2C4 LDR X19, [X8 + 0x8]
	0x01CAB2C8 B 0x1CAB3A4
	0x01CAB2CC LDR X0, [X8]
	0x01CAB2D0 CBZ X0, 0x1CAB3B8
	0x01CAB2D4 ADRP X8, 0x22A3000
	0x01CAB2D8 LDR X8, [X8 + 0x808]
	0x01CAB2DC LDR X1, [X8]
	0x01CAB2E0 BL 0x2961038
	0x01CAB2E4 ADRP X23, 0x22A3000
	0x01CAB2E8 LDR X23, [X23 + 0x828]
	0x01CAB2EC MOV X19, X0
	0x01CAB2F0 LDR X8, [X23]
	0x01CAB2F4 LDR W9, [X8 + 0xE0]
	0x01CAB2F8 CBNZ W9, 0x1CAB308
	0x01CAB2FC MOV X0, X8
	0x01CAB300 BL 0x1B6E8F8
	0x01CAB304 LDR X8, [X23]
	0x01CAB308 LDR X9, [X8 + 0xB8]
	0x01CAB30C LDR X20, [X9 + 0x8]
	0x01CAB310 CBNZ X20, 0x1CAB368
	0x01CAB314 LDR W9, [X8 + 0xE0]
	0x01CAB318 CBNZ W9, 0x1CAB328
	0x01CAB31C MOV X0, X8
	0x01CAB320 BL 0x1B6E8F8
	0x01CAB324 LDR X8, [X23]
	0x01CAB328 ADRP X9, 0x22A3000
	0x01CAB32C LDR X8, [X8 + 0xB8]
	0x01CAB330 LDR X9, [X9 + 0x818]
	0x01CAB334 LDR X21, [X8]
	0x01CAB338 LDR X0, [X9]
	0x01CAB33C BL 0x1B6EA0C
	0x01CAB340 ADRP X8, 0x22A3000
	0x01CAB344 LDR X8, [X8 + 0x820]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x2579000
	008 Move X23, 0x22A3000
	009 Move X20, 0x22A4000
	010 Move X21, 0x22A3000
	011 Move W8, [X22+1151]
	012 Move X23, [X23+2960]
	013 Move X20, [X20+1872]
	014 Move X21, [X21+1256]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x22A3000
	021 Move X0, [X0+1256]
	022 Call 0x1B6F7F0
	023 Move X0, 0x22A4000
	024 Move X0, [X0+1872]
	025 Call 0x1B6F7F0
	026 Move X0, 0x22A3000
	027 Move X0, [X0+2960]
	028 Call 0x1B6F7F0
	029 Move W8, 1
	030 Move [X22+1151], W8
	031 Move X0, [X23]
	032 Call 0x1B6FA0C
	033 Move X2, [X20]
	034 Move X1, X19
	035 Move X3, X31
	036 Move X20, X0
	037 Call ObserverDelegate..ctor, X0, X1, X2
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1B6F8F8
	043 Move X0, X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X1, X31
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Call App.DeregisterObserver, X0
	052 Return 

Method: System.Void HandleUserIsDeveloperChanged(SpatialSys.ObservableState.StateChangedEventArgs args)

Disassembly:
	0x01CAB348 MOV X1, X21
	0x01CAB34C MOV X3, X31
	0x01CAB350 MOV X20, X0
	0x01CAB354 LDR X2, [X8]
	0x01CAB358 BL 0x2B796E4
	0x01CAB35C LDR X8, [X23]
	0x01CAB360 LDR X8, [X8 + 0xB8]
	0x01CAB364 STR X20, [X8 + 0x8]
	0x01CAB368 ADRP X8, 0x22A3000
	0x01CAB36C LDR X8, [X8 + 0x810]
	0x01CAB370 MOV X0, X19
	0x01CAB374 MOV X1, X20
	0x01CAB378 LDR X2, [X8]
	0x01CAB37C BL 0x20B0E40
	0x01CAB380 LDR X8, [X22]
	0x01CAB384 MOV X19, X0
	0x01CAB388 LDR W9, [X8 + 0xE0]
	0x01CAB38C CBNZ W9, 0x1CAB39C
	0x01CAB390 MOV X0, X8
	0x01CAB394 BL 0x1B6E8F8
	0x01CAB398 LDR X8, [X22]
	0x01CAB39C LDR X8, [X8 + 0xB8]
	0x01CAB3A0 STR X19, [X8 + 0x8]
	0x01CAB3A4 MOV X0, X19
	0x01CAB3A8 LDP X20, X19, [X31 + 0x20]
	0x01CAB3AC LDP X22, X21, [X31 + 0x10]
	0x01CAB3B0 LDP X30, X23, [X31], #0x30
	0x01CAB3B4 RET
	0x01CAB3B8 BL 0x1B6EA1C
	0x01CAB3BC STP X30, X23, [X31 - 0x30]!
	0x01CAB3C0 STP X22, X21, [X31 + 0x10]
	0x01CAB3C4 STP X20, X19, [X31 + 0x20]
	0x01CAB3C8 ADRP X21, 0x2578000
	0x01CAB3CC ADRP X20, 0x22A3000
	0x01CAB3D0 LDRB W8, [X21 + 0x487]
	0x01CAB3D4 LDR X20, [X20 + 0x6A0]
	0x01CAB3D8 MOV X19, X0
	0x01CAB3DC TBNZ X8, 0x0, 0x1CAB424
	0x01CAB3E0 ADRP X0, 0x22A3000
	0x01CAB3E4 LDR X0, [X0 + 0x6C8]
	0x01CAB3E8 BL 0x1B6E7F0
	0x01CAB3EC ADRP X0, 0x22A3000
	0x01CAB3F0 LDR X0, [X0 + 0x170]
	0x01CAB3F4 BL 0x1B6E7F0
	0x01CAB3F8 ADRP X0, 0x22A3000
	0x01CAB3FC LDR X0, [X0 + 0x830]
	0x01CAB400 BL 0x1B6E7F0
	0x01CAB404 ADRP X0, 0x22A3000
	0x01CAB408 LDR X0, [X0 + 0x838]
	0x01CAB40C BL 0x1B6E7F0
	0x01CAB410 ADRP X0, 0x22A3000
	0x01CAB414 LDR X0, [X0 + 0x6A0]
	0x01CAB418 BL 0x1B6E7F0
	0x01CAB41C MOVZ W8, 0x1
	0x01CAB420 STRB W8, [X21 + 0x487]
	0x01CAB424 LDR X0, [X20]
	0x01CAB428 LDR W20, [X19 + 0x64]
	0x01CAB42C LDR W8, [X0 + 0xE0]
	0x01CAB430 CBNZ W8, 0x1CAB438
	0x01CAB434 BL 0x1B6E8F8
	0x01CAB438 MOV W0, W20
	0x01CAB43C MOV X1, X31
	0x01CAB440 BL 0x301675C
	0x01CAB444 ADRP X8, 0xFFFFFFFFFEDFE000
	0x01CAB448 LDR V2, [X8 + 0xE20]
	0x01CAB44C FMOV S0, W31
	0x01CAB450 FMOV S1, 1
	0x01CAB454 MOV X0, X31
	0x01CAB458 BL 0x301B3D8
	0x01CAB45C CBZ X0, 0x1CAB51C
	0x01CAB460 ADRP X20, 0x22A3000
	0x01CAB464 ADRP X21, 0x22A3000
	0x01CAB468 LDR X20, [X20 + 0x6C8]
	0x01CAB46C LDR X21, [X21 + 0x830]
	0x01CAB470 MOVZ W1, 0x1
	0x01CAB474 MOV X2, X31
	0x01CAB478 BL 0x30310A8
	0x01CAB47C LDR X8, [X20]
	0x01CAB480 MOV X20, X0
	0x01CAB484 MOV X0, X8
	0x01CAB488 BL 0x1B6EA0C
	0x01CAB48C LDR X2, [X21]
	0x01CAB490 MOV X1, X19
	0x01CAB494 MOV X3, X31
	0x01CAB498 MOV X21, X0
	0x01CAB49C BL 0x27EE464
	0x01CAB4A0 CBZ X20, 0x1CAB51C
	0x01CAB4A4 ADRP X22, 0x22A3000
	0x01CAB4A8 ADRP X23, 0x22A3000
	0x01CAB4AC LDR X22, [X22 + 0x170]
	0x01CAB4B0 LDR X23, [X23 + 0x838]
	0x01CAB4B4 MOV X0, X20
	0x01CAB4B8 MOV X1, X21
	0x01CAB4BC MOV X2, X31
	0x01CAB4C0 BL 0x303115C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2579000
	006 Move X20, 0x22A3000
	007 Move W8, [X21+1152]
	008 Move X20, [X20+1256]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0x22A3000
	015 Move X0, [X0+1256]
	016 Call 0x1B6F7F0
	017 Move X0, 0x22A4000
	018 Move X0, [X0+1880]
	019 Call 0x1B6F7F0
	020 Move X0, 0x22A4000
	021 Move X0, [X0+1888]
	022 Call 0x1B6F7F0
	023 Move X0, 0x22A4000
	024 Move X0, [X0+1896]
	025 Call 0x1B6F7F0
	026 Move X0, 0x22A4000
	027 Move X0, [X0+1904]
	028 Call 0x1B6F7F0
	029 Move X0, 0x22A3000
	030 Move X0, [X0+3328]
	031 Call 0x1B6F7F0
	032 Move W8, 1
	033 Move [X21+1152], W8
	034 Move X0, [X20]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1B6F8F8
	039 Move X21, 0x2579000
	040 Move W8, [X21+1091]
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x22A3000
	044 Move X0, [X0+1256]
	045 Call 0x1B6F7F0
	046 Move W8, 1
	047 Move [X21+1091], W8
	048 Move X0, [X20]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {54}
	052 Call 0x1B6F8F8
	053 Move X0, [X20]
	054 Move X8, [X0+184]
	055 Move X8, [X8]
	056 Compare X8, 0
	057 JumpIfEqual {120}
	058 Move X8, [X8+168]
	059 Compare X8, 0
	060 JumpIfEqual {120}
	061 Move X9, 0x22A3000
	062 Move X9, [X9+3328]
	063 Move X0, [X8+112]
	064 Move X1, [X9]
	065 Call 0x24BA848, X0
	066 Move W8, [X19+104]
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {88}
	071 Compare W8, 0
	072 JumpIfNotEqual {115}
	073 Move X0, [X19+32]
	074 Move W8, 1
	075 Move [X19+104], W8
	076 Compare X0, 0
	077 JumpIfEqual {120}
	078 Move X8, 0x22A4000
	079 Move X1, [X19+40]
	080 Move X8, [X8+1888]
	081 Move X20, [X31+16]
	082 Move X19, [X31+24]
	083 Move X2, [X8]
	084 Move X30, [X31+32]
	085 Move X21, [X31+40]
	086 Call List`1<Object>.AddRange, X0, X1
	087 Return 
	088 Compare W8, 0
	089 JumpIfEqual {115}
	090 Move X8, 0x22A4000
	091 Move X20, [X19+32]
	092 Move X8, [X8+1904]
	093 Move X0, [X8]
	094 Call 0x1B6FA0C
	095 Move X8, 0x22A4000
	096 Move X8, [X8+1880]
	097 Move X1, X19
	098 Move X3, X31
	099 Move X21, X0
	100 Move X2, [X8]
	101 Call Predicate`1<Object>..ctor, X0, X1, X2
	102 Compare X20, 0
	103 JumpIfEqual {120}
	104 Move X8, 0x22A4000
	105 Move X8, [X8+1896]
	106 Move X0, X20
	107 Move X20, [X31+16]
	108 Move X19, [X31+24]
	109 Move X1, X21
	110 Move X2, [X8]
	111 Move X30, [X31+32]
	112 Move X21, [X31+40]
	113 Call List`1<Object>.RemoveAll, X0, X1
	114 Return 
	115 Move X20, [X31+16]
	116 Move X19, [X31+24]
	117 Move X30, [X31+32]
	118 Move X21, [X31+40]
	119 Return 
	120 Call 0x1B6FA1C

Method: System.Void Start()

Disassembly:
	0x01CAB4C4 LDR X8, [X22]

ISIL:
No ISIL was generated
Method: System.Void Update()

Disassembly:
	0x01CAB5FC ADRP X8, 0x22A3000
	0x01CAB600 LDR X8, [X8 + 0x840]
	0x01CAB604 MOV X1, X19
	0x01CAB608 MOV X2, X21
	0x01CAB60C LDR X3, [X8]
	0x01CAB610 BL 0x28FA2A8
	0x01CAB614 LDR X0, [X20 + 0x58]
	0x01CAB618 CBZ X0, 0x1CAB63C
	0x01CAB61C ADRP X8, 0x22A3000
	0x01CAB620 LDR X8, [X8 + 0x850]
	0x01CAB624 MOV X1, X19
	0x01CAB628 LDP X20, X19, [X31 + 0x20]
	0x01CAB62C LDP X22, X21, [X31 + 0x10]
	0x01CAB630 LDR X2, [X8]
	0x01CAB634 LDR X30, [X31], #0x30
	0x01CAB638 B 0x28FA228
	0x01CAB63C BL 0x1B6EA1C
	0x01CAB640 STR D10, [X31 - 0x30]!
	0x01CAB644 STP D9, D8, [X31 + 0x10]
	0x01CAB648 STP X30, X19, [X31 + 0x20]
	0x01CAB64C MOV X19, X0
	0x01CAB650 FMOV S0, W31
	0x01CAB654 FMOV S1, 1
	0x01CAB658 FMOV S2, W31
	0x01CAB65C FMOV S3, 1
	0x01CAB660 MOV X0, X31
	0x01CAB664 BL 0x3A75B14
	0x01CAB668 LDR X0, [X19 + 0x38]
	0x01CAB66C CBZ X0, 0x1CAB6F0
	0x01CAB670 MOV X1, X31
	0x01CAB674 BL 0x3AA7658
	0x01CAB678 ADRP X19, 0x2578000
	0x01CAB67C LDRB W8, [X19 + 0x456]
	0x01CAB680 MOV V8.16B, V0.16B
	0x01CAB684 MOV V9.16B, V1.16B
	0x01CAB688 MOV V10.16B, V2.16B
	0x01CAB68C CBNZ W8, 0x1CAB6A4
	0x01CAB690 ADRP X0, 0x22A2000
	0x01CAB694 LDR X0, [X0 + 0x480]
	0x01CAB698 BL 0x1B6E7F0
	0x01CAB69C MOVZ W8, 0x1
	0x01CAB6A0 STRB W8, [X19 + 0x456]
	0x01CAB6A4 ADRP X8, 0x22A2000
	0x01CAB6A8 LDR X8, [X8 + 0x480]
	0x01CAB6AC ADRP X9, 0xFFFFFFFFFEDFE000
	0x01CAB6B0 LDR V0, [X9 + 0xD30]
	0x01CAB6B4 LDP X30, X19, [X31 + 0x20]
	0x01CAB6B8 LDR X8, [X8]
	0x01CAB6BC MOV X0, X31
	0x01CAB6C0 LDR X8, [X8 + 0xB8]
	0x01CAB6C4 LDP S1, S2, [X8 + 0xC]
	0x01CAB6C8 LDR V5, [X8 + 0x14]
	0x01CAB6CC FMUL S3, S1, S0
	0x01CAB6D0 FMUL S4, S2, S0
	0x01CAB6D4 FMUL S5, S5, S0
	0x01CAB6D8 MOV V0.16B, V8.16B
	0x01CAB6DC MOV V1.16B, V9.16B
	0x01CAB6E0 LDP D9, D8, [X31 + 0x10]
	0x01CAB6E4 MOV V2.16B, V10.16B
	0x01CAB6E8 LDR V10, [X31], #0x30
	0x01CAB6EC B 0x3A757BC
	0x01CAB6F0 BL 0x1B6EA1C
	0x01CAB6F4 B 0x1CAA968
	0x01CAB6F8 MOVZ W1, 0x1
	0x01CAB6FC B 0x1CAA900
	0x01CAB700 MOVN W1, 0x0
	0x01CAB704 B 0x1CAA900
	0x01CAB708 STR X30, [X31 - 0x30]!
	0x01CAB70C STP X22, X21, [X31 + 0x10]
	0x01CAB710 STP X20, X19, [X31 + 0x20]
	0x01CAB714 ADRP X21, 0x2578000
	0x01CAB718 ADRP X22, 0x22A3000
	0x01CAB71C ADRP X20, 0x22A3000
	0x01CAB720 LDRB W8, [X21 + 0x488]
	0x01CAB724 LDR X22, [X22 + 0x860]
	0x01CAB728 LDR X20, [X20 + 0x868]
	0x01CAB72C MOV X19, X0
	0x01CAB730 TBNZ X8, 0x0, 0x1CAB754
	0x01CAB734 ADRP X0, 0x22A3000
	0x01CAB738 LDR X0, [X0 + 0x868]
	0x01CAB73C BL 0x1B6E7F0
	0x01CAB740 ADRP X0, 0x22A3000
	0x01CAB744 LDR X0, [X0 + 0x860]
	0x01CAB748 BL 0x1B6E7F0
	0x01CAB74C MOVZ W8, 0x1
	0x01CAB750 STRB W8, [X21 + 0x488]
	0x01CAB754 LDR X0, [X22]
	0x01CAB758 BL 0x1B6EA0C
	0x01CAB75C LDR X1, [X20]
	0x01CAB760 MOV X20, X0
	0x01CAB764 BL 0x28F9A14
	0x01CAB768 STR X20, [X19 + 0x58]
	0x01CAB76C MOV X0, X19
	0x01CAB770 LDP X20, X19, [X31 + 0x20]
	0x01CAB774 LDP X22, X21, [X31 + 0x10]
	0x01CAB778 MOV X1, X31
	0x01CAB77C LDR X30, [X31], #0x30
	0x01CAB780 B 0x3A9EEE4
	0x01CAB784 STP X30, X21, [X31 - 0x20]!
	0x01CAB788 STP X20, X19, [X31 + 0x10]
	0x01CAB78C ADRP X21, 0x2578000
	0x01CAB790 LDRB W8, [X21 + 0x489]
	0x01CAB794 MOV X19, X1
	0x01CAB798 MOV X20, X0
	0x01CAB79C TBNZ X8, 0x0, 0x1CAB7B4
	0x01CAB7A0 ADRP X0, 0x22A3000
	0x01CAB7A4 LDR X0, [X0 + 0x870]
	0x01CAB7A8 BL 0x1B6E7F0
	0x01CAB7AC MOVZ W8, 0x1
	0x01CAB7B0 STRB W8, [X21 + 0x489]
	0x01CAB7B4 LDR X0, [X20 + 0x28]
	0x01CAB7B8 CBZ X0, 0x1CAB7D8
	0x01CAB7BC ADRP X8, 0x22A3000
	0x01CAB7C0 LDR X8, [X8 + 0x870]
	0x01CAB7C4 MOV X1, X19
	0x01CAB7C8 LDP X20, X19, [X31 + 0x10]
	0x01CAB7CC LDR X2, [X8]
	0x01CAB7D0 LDP X30, X21, [X31], #0x20
	0x01CAB7D4 B 0x2E468A0
	0x01CAB7D8 BL 0x1B6EA1C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x2579000
	009 Move W8, [X20+1153]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x22A4000
	016 Move X0, [X0+1832]
	017 Call 0x1B6F7F0
	018 Move X0, 0x22A4000
	019 Move X0, [X0+1936]
	020 Call 0x1B6F7F0
	021 Move X0, 0x22A4000
	022 Move X0, [X0+1944]
	023 Call 0x1B6F7F0
	024 Move X0, 0x22A4000
	025 Move X0, [X0+1952]
	026 Call 0x1B6F7F0
	027 Move W8, 1
	028 Move [X20+1153], W8
	029 Move X21, 0x2579000
	030 Move W8, [X21+1090]
	031 Move X20, [X19+56]
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0x22A3000
	035 Move X0, [X0+1152]
	036 Call 0x1B6F7F0
	037 Move W8, 1
	038 Move [X21+1090], W8
	039 Move X8, 0x22A3000
	040 Move X8, [X8+1152]
	041 Move X0, X31
	042 Move X8, [X8]
	043 Move X8, [X8+184]
	044 Move V8, [X8+24]
	045 Move V9, [X8+32]
	046 Call Time.get_deltaTime
	047 Compare X20, 0
	048 JumpIfEqual {137}
	049 Move S1, 25
	050 Move V2, 0
	051 Multiply S1, S9, S1
	052 NotImplemented "Instruction INVALID not yet implemented."
	053 Multiply S2, S1, S0
	054 NotImplemented "Instruction INVALID not yet implemented."
	055 Move S1, V0.S[1]
	056 Move X0, X20
	057 Move X1, X31
	058 Call Transform.Rotate, X0, X1
	059 Move X0, X19
	060 Call ItemVendingMachine.UpdateItemLimitCheck, X0
	061 Call ItemVendingMachine.get_IsPurchaseLimited
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {129}
	066 Move X0, X31
	067 Call Time.get_time
	068 Move X8, 0x22A4000
	069 Move X8, [X8+1832]
	070 Move X9, 0x22A4000
	071 Move V8, V0
	072 Move X8, [X8]
	073 Move X8, [X8+184]
	074 Move X9, [X9+1936]
	075 Add X0, X8, 8
	076 Move X1, [X9]
	077 Call Nullable`1<Single>.get_Value, X0
	078 Move X20, 0x2579000
	079 Move W8, [X20+1287]
	080 Move V9, V0
	081 Compare W8, 0
	082 JumpIfNotEqual {88}
	083 Move X0, 0x22A3000
	084 Move X0, [X0+1160]
	085 Call 0x1B6F7F0
	086 Move W8, 1
	087 Move [X20+1287], W8
	088 Move X8, 0x22A3000
	089 Move X8, [X8+1160]
	090 Subtract S8, S8, S9
	091 Move X0, [X8]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1B6F8F8
	096 Move X12, 0x22A4000
	097 Move W10, 0x7F800000
	098 Move X12, [X12+1944]
	099 NotImplemented "Instruction FRINTP not yet implemented."
	100 NotImplemented "Instruction FCVTPS not yet implemented."
	101 Move W9, 60
	102 Move W11, 60
	103 Move S1, W10
	104 NotImplemented "Instruction MOVK not yet implemented."
	105 Subtract W8, W9, W8
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 NotImplemented "Instruction CSEL not yet implemented."
	108 Move [X31+12], W8
	109 Move X1, [X12]
	110 Move X19, [X19+48]
	111 Add X0, X31, 12
	112 Move X2, X31
	113 Call Int32.ToString, X0, X1
	114 Move X8, 0x22A4000
	115 Move X8, [X8+1952]
	116 Move X1, X0
	117 Move X2, X31
	118 Move X8, [X8]
	119 Move X0, X8
	120 Call String.Concat, X0, X1
	121 Compare X19, 0
	122 JumpIfEqual {137}
	123 Move X8, [X19]
	124 Move X1, X0
	125 Move X0, X19
	126 Move X9, [X8+1368]
	127 Move X2, [X8+1376]
	128 NotImplemented "Instruction BLR not yet implemented."
	129 Move X20, [X31+48]
	130 Move X19, [X31+56]
	131 Move X30, [X31+32]
	132 Move X21, [X31+40]
	133 Move D9, [X31+16]
	134 Move D8, [X31+24]
	135 Add X31, X31, 64
	136 Return 
	137 Call 0x1B6FA1C

Method: System.Void UpdateItemLimitCheck()

Disassembly:
	0x01CAB7DC STR X30, [X31 - 0x10]!
	0x01CAB7E0 LDR X0, [X0 + 0x30]
	0x01CAB7E4 CBZ X0, 0x1CAB820
	0x01CAB7E8 LDR X8, [X0]
	0x01CAB7EC FMOV S2, 1
	0x01CAB7F0 FMOV S1, W31
	0x01CAB7F4 FSUB S5, S2, S0
	0x01CAB7F8 LDR X2, [X8 + 0x2A8]
	0x01CAB7FC LDR X1, [X8 + 0x2B0]
	0x01CAB800 FMUL S4, S0, S1
	0x01CAB804 FMUL S6, S5, S1
	0x01CAB808 FADD S3, S5, S0
	0x01CAB80C FADD S2, S4, S6
	0x01CAB810 FADD S1, S4, S5
	0x01CAB814 FADD S0, S6, S0
	0x01CAB818 LDR X30, [X31], #0x10
	0x01CAB81C BR X2
	0x01CAB820 BL 0x1B6EA1C
	0x01CAB824 STR X30, [X31 - 0x10]!
	0x01CAB828 LDR X0, [X0 + 0x30]
	0x01CAB82C CBZ X0, 0x1CAB854
	0x01CAB830 LDR X8, [X0]
	0x01CAB834 FMOV S0, W31
	0x01CAB838 FMOV S1, 1
	0x01CAB83C FMOV S2, W31
	0x01CAB840 LDR X2, [X8 + 0x2A8]
	0x01CAB844 LDR X1, [X8 + 0x2B0]
	0x01CAB848 FMOV S3, 1
	0x01CAB84C LDR X30, [X31], #0x10
	0x01CAB850 BR X2
	0x01CAB854 BL 0x1B6EA1C
	0x01CAB858 STR X30, [X31 - 0x10]!
	0x01CAB85C LDR X0, [X0 + 0x88]
	0x01CAB860 CBZ X0, 0x1CAB870
	0x01CAB864 MOV X1, X31
	0x01CAB868 LDR X30, [X31], #0x10
	0x01CAB86C B 0x3AA7AD0
	0x01CAB870 BL 0x1B6EA1C
	0x01CAB874 STP X30, X23, [X31 - 0x30]!
	0x01CAB878 STP X22, X21, [X31 + 0x10]
	0x01CAB87C STP X20, X19, [X31 + 0x20]
	0x01CAB880 ADRP X20, 0x2578000
	0x01CAB884 LDRB W8, [X20 + 0x48A]
	0x01CAB888 MOV X19, X0
	0x01CAB88C TBNZ X8, 0x0, 0x1CAB8B0
	0x01CAB890 ADRP X0, 0x22A3000
	0x01CAB894 LDR X0, [X0 + 0x170]
	0x01CAB898 BL 0x1B6E7F0
	0x01CAB89C ADRP X0, 0x22A3000
	0x01CAB8A0 LDR X0, [X0 + 0x878]
	0x01CAB8A4 BL 0x1B6E7F0
	0x01CAB8A8 MOVZ W8, 0x1
	0x01CAB8AC STRB W8, [X20 + 0x48A]
	0x01CAB8B0 LDR X22, [X19 + 0x80]
	0x01CAB8B4 CBZ X22, 0x1CAB93C
	0x01CAB8B8 ADRP X23, 0x22A3000
	0x01CAB8BC LDR X23, [X23 + 0x170]
	0x01CAB8C0 ADRP X21, 0x22A3000
	0x01CAB8C4 LDR X20, [X22 + 0x190]
	0x01CAB8C8 LDR X0, [X23]
	0x01CAB8CC LDR X21, [X21 + 0x878]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2579000
	007 Move X20, 0x22A4000
	008 Move W8, [X21+1154]
	009 Move X20, [X20+1832]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x22A4000
	016 Move X0, [X0+1832]
	017 Call 0x1B6F7F0
	018 Move X0, 0x22A4000
	019 Move X0, [X0+1840]
	020 Call 0x1B6F7F0
	021 Move X0, 0x22A4000
	022 Move X0, [X0+1936]
	023 Call 0x1B6F7F0
	024 Move W8, 1
	025 Move [X21+1154], W8
	026 Move X0, X31
	027 Call Time.get_frameCount
	028 Move X8, [X20]
	029 Move X8, [X8+184]
	030 Move W9, [X8]
	031 Subtract W9, W0, W9
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W8, [X8+8]
	034 Compare W8, 0
	035 JumpIfEqual {62}
	036 Move X0, X31
	037 Call Time.get_time
	038 Move X8, [X20]
	039 Move X9, 0x22A4000
	040 Move V8, V0
	041 Move X8, [X8+184]
	042 Move X9, [X9+1936]
	043 Add X0, X8, 8
	044 Move X1, [X9]
	045 Call Nullable`1<Single>.get_Value, X0
	046 Move W8, 0x42700000
	047 Subtract S0, S8, S0
	048 Move S1, W8
	049 NotImplemented "Instruction FCMP not yet implemented."
	050 Move X8, [X20]
	051 Move X0, X19
	052 Move X9, [X8+184]
	053 Move [X9+8], X31
	054 Move X8, [X8+184]
	055 Move [X8+4], W31
	056 Call ItemVendingMachine.UpdateCurrentPreview, X0
	057 Move X0, X31
	058 Call Time.get_frameCount
	059 Move X8, [X20]
	060 Move X8, [X8+184]
	061 Move [X8], W0
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X30, [X31+16]
	065 Move X21, [X31+24]
	066 Move V8, [X31+48]
	067 Return 

Method: System.Void HandleKeyInput(UnityEngine.KeyCode keyCode, AnimalCompany.TerminalKeyType keyType)

Disassembly:
	0x01CAB8D0 BL 0x1B6EA0C
	0x01CAB8D4 LDR X2, [X21]
	0x01CAB8D8 MOV X1, X19
	0x01CAB8DC MOV X3, X31
	0x01CAB8E0 MOV X21, X0
	0x01CAB8E4 BL 0x317DB24
	0x01CAB8E8 MOV X0, X20
	0x01CAB8EC MOV X1, X21
	0x01CAB8F0 MOV X2, X31
	0x01CAB8F4 BL 0x322A750
	0x01CAB8F8 CBZ X0, 0x1CAB920
	0x01CAB8FC LDR X1, [X23]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move TEMP, 0
	005 Not TEMP
	006 Move W1, TEMP
	007 Call ItemVendingMachine.TryToBuy, X0
	008 Return 
	009 Move W1, 1
	010 Return 

Method: System.Void SwitchCurrentItem(System.Int32 incr)

Disassembly:
	0x01CAB900 LDR X8, [X0]
	0x01CAB904 CMP X8, X1
	0x01CAB908 B.NE 0x1CAB91C
	0x01CAB90C STR X0, [X22 + 0x190]
	0x01CAB910 LDR X8, [X0]
	0x01CAB914 CMP X8, X1
	0x01CAB918 B.EQ 0x1CAB924
	0x01CAB91C BL 0x1B6ECDC
	0x01CAB920 STR X0, [X22 + 0x190]
	0x01CAB924 MOV X0, X19
	0x01CAB928 LDP X20, X19, [X31 + 0x20]
	0x01CAB92C LDP X22, X21, [X31 + 0x10]
	0x01CAB930 MOV W1, W31
	0x01CAB934 LDP X30, X23, [X31], #0x30
	0x01CAB938 B 0x1CAB940
	0x01CAB93C BL 0x1B6EA1C
	0x01CAB940 STP X30, X23, [X31 - 0x30]!
	0x01CAB944 STP X22, X21, [X31 + 0x10]
	0x01CAB948 STP X20, X19, [X31 + 0x20]
	0x01CAB94C ADRP X21, 0x2578000
	0x01CAB950 LDRB W8, [X21 + 0x48F]
	0x01CAB954 MOV W19, W1
	0x01CAB958 MOV X20, X0
	0x01CAB95C TBNZ X8, 0x0, 0x1CAB974
	0x01CAB960 ADRP X0, 0x22A3000
	0x01CAB964 LDR X0, [X0 + 0x880]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2579000
	006 Move W8, [X21+1155]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22A4000
	014 Move X0, [X0+1912]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1155], W8
	018 Move X8, [X19+32]
	019 Compare X8, 0
	020 JumpIfEqual {35}
	021 Move W8, [X8+24]
	022 Move W9, [X19+96]
	023 Move X0, X19
	024 Add W10, W8, W20
	025 Add W9, W10, W9
	026 NotImplemented "Instruction SDIV not yet implemented."
	027 NotImplemented "Instruction MSUB not yet implemented."
	028 Move [X19+96], W8
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call ItemVendingMachine.UpdateCurrentPreview, X0
	034 Return 
	035 Call 0x1B6FA1C

Method: System.Void TryToBuy()

Disassembly:
	0x01CAB968 BL 0x1B6E7F0
	0x01CAB96C MOVZ W8, 0x1
	0x01CAB970 STRB W8, [X21 + 0x48F]
	0x01CAB974 LDR X0, [X20 + 0x90]
	0x01CAB978 CBZ X0, 0x1CABA48
	0x01CAB97C ADRP X23, 0x22A3000
	0x01CAB980 LDR X23, [X23 + 0x880]
	0x01CAB984 MOV X1, X31
	0x01CAB988 BL 0x3A7BCC8
	0x01CAB98C LDR X8, [X23]
	0x01CAB990 MOV X21, X0
	0x01CAB994 LDR W9, [X8 + 0xE0]
	0x01CAB998 CBZ W9, 0x1CAB9A8
	0x01CAB99C LDR X8, [X8 + 0xB8]
	0x01CAB9A0 LDR W22, [X8]
	0x01CAB9A4 B 0x1CAB9D0
	0x01CAB9A8 MOV X0, X8
	0x01CAB9AC BL 0x1B6E8F8
	0x01CAB9B0 LDR X0, [X23]
	0x01CAB9B4 LDR X8, [X0 + 0xB8]
	0x01CAB9B8 LDR W9, [X0 + 0xE0]
	0x01CAB9BC LDR W22, [X8]
	0x01CAB9C0 CBNZ W9, 0x1CAB9D0
	0x01CAB9C4 BL 0x1B6E8F8
	0x01CAB9C8 LDR X8, [X23]
	0x01CAB9CC LDR X8, [X8 + 0xB8]
	0x01CAB9D0 CBZ X21, 0x1CABA48
	0x01CAB9D4 ANDS W31, W19, 0x1
	0x01CAB9D8 MOVZ W9, 0x24
	0x01CAB9DC MOVZ W10, 0x14
	0x01CAB9E0 MOVZ W11, 0x20
	0x01CAB9E4 MOVZ W12, 0x10
	0x01CAB9E8 MOVZ W13, 0x1C
	0x01CAB9EC CSEL X9, X10, X9, NE
	0x01CAB9F0 MOVZ W10, 0xC
	0x01CAB9F4 CSEL X11, X12, X11, NE
	0x01CAB9F8 MOVZ W12, 0x18
	0x01CAB9FC CSEL X10, X10, X13, NE
	0x01CABA00 MOVZ W13, 0x8
	0x01CABA04 CSEL X12, X13, X12, NE
	0x01CABA08 LDR V3, [X8, X9, LSL]
	0x01CABA0C LDR V2, [X8, X11, LSL]
	0x01CABA10 LDR V1, [X8, X10, LSL]
	0x01CABA14 LDR V0, [X8, X12, LSL]
	0x01CABA18 MOV X0, X21
	0x01CABA1C MOV W1, W22
	0x01CABA20 MOV X2, X31
	0x01CABA24 BL 0x3A7D234
	0x01CABA28 LDR X0, [X20 + 0x98]
	0x01CABA2C CBZ X0, 0x1CABA48
	0x01CABA30 AND W1, W19, 0x1
	0x01CABA34 LDP X20, X19, [X31 + 0x20]
	0x01CABA38 LDP X22, X21, [X31 + 0x10]
	0x01CABA3C MOV X2, X31
	0x01CABA40 LDP X30, X23, [X31], #0x30
	0x01CABA44 B 0x3A7B8E0
	0x01CABA48 BL 0x1B6EA1C
	0x01CABA4C STP X30, X23, [X31 - 0x30]!
	0x01CABA50 STP X22, X21, [X31 + 0x10]
	0x01CABA54 STP X20, X19, [X31 + 0x20]
	0x01CABA58 ADRP X20, 0x2578000
	0x01CABA5C ADRP X21, 0x22A3000
	0x01CABA60 LDRB W8, [X20 + 0x48B]
	0x01CABA64 LDR X21, [X21 + 0x1C0]
	0x01CABA68 MOV X19, X0
	0x01CABA6C TBNZ X8, 0x0, 0x1CABA9C
	0x01CABA70 ADRP X0, 0x22A3000
	0x01CABA74 LDR X0, [X0 + 0x170]
	0x01CABA78 BL 0x1B6E7F0
	0x01CABA7C ADRP X0, 0x22A3000
	0x01CABA80 LDR X0, [X0 + 0x878]
	0x01CABA84 BL 0x1B6E7F0
	0x01CABA88 ADRP X0, 0x22A3000
	0x01CABA8C LDR X0, [X0 + 0x1C0]
	0x01CABA90 BL 0x1B6E7F0
	0x01CABA94 MOVZ W8, 0x1
	0x01CABA98 STRB W8, [X20 + 0x48B]
	0x01CABA9C LDR X0, [X21]
	0x01CABAA0 LDR W8, [X0 + 0xE0]
	0x01CABAA4 CBNZ W8, 0x1CABAAC
	0x01CABAA8 BL 0x1B6E8F8
	0x01CABAAC CBZ X19, 0x1CABB40
	0x01CABAB0 LDR W8, [X19 + 0x30]
	0x01CABAB4 LDR X22, [X19 + 0x80]
	0x01CABAB8 ORR W8, W8, 0x8
	0x01CABABC STR W8, [X19 + 0x30]
	0x01CABAC0 CBZ X22, 0x1CABB40
	0x01CABAC4 ADRP X23, 0x22A3000
	0x01CABAC8 LDR X23, [X23 + 0x170]
	0x01CABACC ADRP X21, 0x22A3000
	0x01CABAD0 LDR X20, [X22 + 0x190]
	0x01CABAD4 LDR X0, [X23]
	0x01CABAD8 LDR X21, [X21 + 0x878]
	0x01CABADC BL 0x1B6EA0C
	0x01CABAE0 LDR X2, [X21]
	0x01CABAE4 MOV X1, X19
	0x01CABAE8 MOV X3, X31
	0x01CABAEC MOV X21, X0
	0x01CABAF0 BL 0x317DB24
	0x01CABAF4 MOV X0, X20
	0x01CABAF8 MOV X1, X21
	0x01CABAFC MOV X2, X31
	0x01CABB00 BL 0x322A948
	0x01CABB04 CBZ X0, 0x1CABB2C
	0x01CABB08 LDR X1, [X23]
	0x01CABB0C LDR X8, [X0]
	0x01CABB10 CMP X8, X1
	0x01CABB14 B.NE 0x1CABB28
	0x01CABB18 STR X0, [X22 + 0x190]
	0x01CABB1C LDR X8, [X0]
	0x01CABB20 CMP X8, X1
	0x01CABB24 B.EQ 0x1CABB30
	0x01CABB28 BL 0x1B6ECDC
	0x01CABB2C STR X0, [X22 + 0x190]
	0x01CABB30 LDP X20, X19, [X31 + 0x20]
	0x01CABB34 LDP X22, X21, [X31 + 0x10]
	0x01CABB38 LDP X30, X23, [X31], #0x30
	0x01CABB3C RET
	0x01CABB40 BL 0x1B6EA1C
	0x01CABB44 LDRB W8, [X0 + 0xC0]
	0x01CABB48 CBZ W8, 0x1CABB50
	0x01CABB4C RET
	0x01CABB50 MOVZ W8, 0x1
	0x01CABB54 STRB W8, [X0 + 0xC0]
	0x01CABB58 B 0x1CABB5C
	0x01CABB5C STR X30, [X31 - 0x20]!
	0x01CABB60 STP X20, X19, [X31 + 0x10]
	0x01CABB64 ADRP X20, 0x2578000
	0x01CABB68 LDRB W8, [X20 + 0x48C]
	0x01CABB6C MOV X19, X0
	0x01CABB70 TBNZ X8, 0x0, 0x1CABB94
	0x01CABB74 ADRP X0, 0x22A3000
	0x01CABB78 LDR X0, [X0 + 0x1C0]
	0x01CABB7C BL 0x1B6E7F0
	0x01CABB80 ADRP X0, 0x22A3000
	0x01CABB84 LDR X0, [X0 + 0x888]
	0x01CABB88 BL 0x1B6E7F0
	0x01CABB8C MOVZ W8, 0x1
	0x01CABB90 STRB W8, [X20 + 0x48C]
	0x01CABB94 LDRB W8, [X19 + 0x58]
	0x01CABB98 CBZ W8, 0x1CABBE0
	0x01CABB9C STRB W31, [X19 + 0x58]
	0x01CABBA0 LDR X1, [X19 + 0xB0]
	0x01CABBA4 CBZ X1, 0x1CABBB4
	0x01CABBA8 MOV X0, X19
	0x01CABBAC MOV X2, X31
	0x01CABBB0 BL 0x3A9EAE8
	0x01CABBB4 MOV X0, X19
	0x01CABBB8 BL 0x1CABD1C
	0x01CABBBC MOV X1, X0
	0x01CABBC0 STR X0, [X19 + 0xB0]
	0x01CABBC4 MOV X0, X19
	0x01CABBC8 MOV X2, X31
	0x01CABBCC BL 0x3A9E9B0
	0x01CABBD0 MOV X0, X19
	0x01CABBD4 LDP X20, X19, [X31 + 0x10]
	0x01CABBD8 LDR X30, [X31], #0x20
	0x01CABBDC B 0x1CABD7C
	0x01CABBE0 ADRP X20, 0x22A3000
	0x01CABBE4 LDR X20, [X20 + 0x1C0]
	0x01CABBE8 LDR X0, [X20]
	0x01CABBEC LDR W8, [X0 + 0xE0]
	0x01CABBF0 CBNZ W8, 0x1CABBF8
	0x01CABBF4 BL 0x1B6E8F8
	0x01CABBF8 MOV X0, X19
	0x01CABBFC MOV X1, X31
	0x01CABC00 BL 0x1D697C8
	0x01CABC04 LDR X0, [X19 + 0x38]
	0x01CABC08 CBZ X0, 0x1CABD18
	0x01CABC0C MOV X1, X31
	0x01CABC10 BL 0x1D87040
	0x01CABC14 CMP W0, 0x4
	0x01CABC18 B.NE 0x1CABC28
	0x01CABC1C LDP X20, X19, [X31 + 0x10]
	0x01CABC20 LDR X30, [X31], #0x20
	0x01CABC24 RET
	0x01CABC28 LDR X0, [X19 + 0x40]
	0x01CABC2C CBZ X0, 0x1CABD18
	0x01CABC30 MOV X1, X31
	0x01CABC34 BL 0x1D9F538
	0x01CABC38 ANDS W31, W0, 0x7
	0x01CABC3C B.EQ 0x1CABCA0
	0x01CABC40 TBNZ X0, 0x0, 0x1CABBA0
	0x01CABC44 LDR X8, [X19 + 0x38]
	0x01CABC48 CBZ X8, 0x1CABD18
	0x01CABC4C LDR X0, [X8 + 0x50]
	0x01CABC50 CBZ X0, 0x1CABD18
	0x01CABC54 MOV X1, X31
	0x01CABC58 BL 0x1DBEFE4
	0x01CABC5C TBZ X0, 0x0, 0x1CABC1C
	0x01CABC60 LDR X8, [X19 + 0x38]
	0x01CABC64 CBZ X8, 0x1CABD18
	0x01CABC68 LDR X0, [X8 + 0x50]
	0x01CABC6C MOVZ W1, 0x8
	0x01CABC70 MOV X2, X31
	0x01CABC74 BL 0x1DD601C
	0x01CABC78 MOV X20, X0
	0x01CABC7C MOVZ W0, 0x1
	0x01CABC80 MOV X1, X31
	0x01CABC84 BL 0x1D29EBC
	0x01CABC88 LDR X8, [X19 + 0x40]
	0x01CABC8C CBZ X8, 0x1CABD18
	0x01CABC90 LDR X8, [X8 + 0x20]
	0x01CABC94 CBZ X8, 0x1CABCD8
	0x01CABC98 LDR W0, [X8]
	0x01CABC9C B 0x1CABCDC
	0x01CABCA0 LDR X0, [X20]
	0x01CABCA4 LDR X19, [X19 + 0x40]
	0x01CABCA8 LDR W8, [X0 + 0xE0]
	0x01CABCAC CBNZ W8, 0x1CABCB4
	0x01CABCB0 BL 0x1B6E8F8
	0x01CABCB4 ADRP X8, 0x22A3000
	0x01CABCB8 LDR X8, [X8 + 0x888]
	0x01CABCBC MOV X1, X19
	0x01CABCC0 LDP X20, X19, [X31 + 0x10]
	0x01CABCC4 MOVZ W2, 0x7
	0x01CABCC8 LDR X0, [X8]
	0x01CABCCC MOV X3, X31
	0x01CABCD0 LDR X30, [X31], #0x20
	0x01CABCD4 B 0x1D69640
	0x01CABCD8 MOV X0, X31
	0x01CABCDC LDR W1, [X19 + 0x68]
	0x01CABCE0 MOVZ W2, 0x1
	0x01CABCE4 MOV X3, X31
	0x01CABCE8 BL 0x1DA8258
	0x01CABCEC STUR X0, [X20 + 0x1C]
	0x01CABCF0 CBZ X20, 0x1CABD18
	0x01CABCF4 MOVZ W8, 0x40
	0x01CABCF8 STR W8, [X20 + 0xC]
	0x01CABCFC LDR X0, [X19 + 0x38]
	0x01CABD00 CBZ X0, 0x1CABD18
	0x01CABD04 MOV X1, X20
	0x01CABD08 LDP X20, X19, [X31 + 0x10]
	0x01CABD0C MOV X2, X31
	0x01CABD10 LDR X30, [X31], #0x20
	0x01CABD14 B 0x1D8A710
	0x01CABD18 BL 0x1B6EA1C
	0x01CABD1C STP X30, X21, [X31 - 0x20]!
	0x01CABD20 STP X20, X19, [X31 + 0x10]
	0x01CABD24 ADRP X20, 0x2578000
	0x01CABD28 ADRP X21, 0x22A3000
	0x01CABD2C LDRB W8, [X20 + 0x48D]
	0x01CABD30 LDR X21, [X21 + 0x890]
	0x01CABD34 MOV X19, X0
	0x01CABD38 TBNZ X8, 0x0, 0x1CABD50
	0x01CABD3C ADRP X0, 0x22A3000
	0x01CABD40 LDR X0, [X0 + 0x890]
	0x01CABD44 BL 0x1B6E7F0
	0x01CABD48 MOVZ W8, 0x1
	0x01CABD4C STRB W8, [X20 + 0x48D]
	0x01CABD50 LDR X0, [X21]
	0x01CABD54 BL 0x1B6EA0C
	0x01CABD58 MOV X1, X31
	0x01CABD5C MOV X20, X0
	0x01CABD60 BL 0x32276F8
	0x01CABD64 STR W31, [X20 + 0x10]
	0x01CABD68 STR X19, [X20 + 0x20]
	0x01CABD6C MOV X0, X20
	0x01CABD70 LDP X20, X19, [X31 + 0x10]
	0x01CABD74 LDP X30, X21, [X31], #0x20
	0x01CABD78 RET
	0x01CABD7C STP X30, X21, [X31 - 0x20]!
	0x01CABD80 STP X20, X19, [X31 + 0x10]
	0x01CABD84 ADRP X20, 0x2578000
	0x01CABD88 LDRB W8, [X20 + 0x48E]
	0x01CABD8C MOV X19, X0
	0x01CABD90 TBNZ X8, 0x0, 0x1CABDB4
	0x01CABD94 ADRP X0, 0x22A3000
	0x01CABD98 LDR X0, [X0 + 0x1C0]
	0x01CABD9C BL 0x1B6E7F0
	0x01CABDA0 ADRP X0, 0x22A3000
	0x01CABDA4 LDR X0, [X0 + 0x898]
	0x01CABDA8 BL 0x1B6E7F0
	0x01CABDAC MOVZ W8, 0x1
	0x01CABDB0 STRB W8, [X20 + 0x48E]
	0x01CABDB4 LDRB W8, [X19 + 0x58]
	0x01CABDB8 CBZ W8, 0x1CABDF8
	0x01CABDBC STRB W31, [X19 + 0x58]
	0x01CABDC0 LDR X1, [X19 + 0xB8]
	0x01CABDC4 CBZ X1, 0x1CABDD4
	0x01CABDC8 MOV X0, X19
	0x01CABDCC MOV X2, X31
	0x01CABDD0 BL 0x3A9EAE8
	0x01CABDD4 MOV X0, X19
	0x01CABDD8 BL 0x1CABF5C
	0x01CABDDC MOV X1, X0
	0x01CABDE0 STR X0, [X19 + 0xB8]
	0x01CABDE4 MOV X0, X19
	0x01CABDE8 LDP X20, X19, [X31 + 0x10]
	0x01CABDEC MOV X2, X31
	0x01CABDF0 LDP X30, X21, [X31], #0x20
	0x01CABDF4 B 0x3A9E9B0
	0x01CABDF8 ADRP X21, 0x22A3000
	0x01CABDFC LDR X21, [X21 + 0x1C0]
	0x01CABE00 LDR X0, [X21]
	0x01CABE04 LDR W8, [X0 + 0xE0]
	0x01CABE08 CBNZ W8, 0x1CABE10
	0x01CABE0C BL 0x1B6E8F8
	0x01CABE10 MOV X0, X19
	0x01CABE14 MOV X1, X31
	0x01CABE18 BL 0x1D697C8
	0x01CABE1C LDR X0, [X19 + 0x38]
	0x01CABE20 CBZ X0, 0x1CABF30
	0x01CABE24 MOV X1, X31
	0x01CABE28 BL 0x1D87040
	0x01CABE2C CMP W0, 0x4
	0x01CABE30 B.NE 0x1CABE40
	0x01CABE34 LDP X20, X19, [X31 + 0x10]
	0x01CABE38 LDP X30, X21, [X31], #0x20
	0x01CABE3C RET
	0x01CABE40 LDR X0, [X19 + 0x40]
	0x01CABE44 CBZ X0, 0x1CABF30
	0x01CABE48 MOV X1, X31
	0x01CABE4C BL 0x1D9F538
	0x01CABE50 TBNZ X0, 0x0, 0x1CABE8C
	0x01CABE54 LDR X0, [X21]
	0x01CABE58 LDR X19, [X19 + 0x40]
	0x01CABE5C LDR W8, [X0 + 0xE0]
	0x01CABE60 CBNZ W8, 0x1CABE68
	0x01CABE64 BL 0x1B6E8F8
	0x01CABE68 ADRP X8, 0x22A3000
	0x01CABE6C LDR X8, [X8 + 0x898]
	0x01CABE70 MOV X1, X19
	0x01CABE74 LDP X20, X19, [X31 + 0x10]
	0x01CABE78 MOVZ W2, 0x1
	0x01CABE7C LDR X0, [X8]
	0x01CABE80 MOV X3, X31
	0x01CABE84 LDP X30, X21, [X31], #0x20
	0x01CABE88 B 0x1D69640
	0x01CABE8C LDR X8, [X19 + 0x38]
	0x01CABE90 CBZ X8, 0x1CABF30
	0x01CABE94 MOV W20, W0
	0x01CABE98 LDR X0, [X8 + 0x50]
	0x01CABE9C CBZ X0, 0x1CABF30
	0x01CABEA0 MOV X1, X31
	0x01CABEA4 BL 0x1DBEFE4
	0x01CABEA8 TBZ X0, 0x0, 0x1CABF24
	0x01CABEAC LDR X8, [X19 + 0x38]
	0x01CABEB0 CBZ X8, 0x1CABF30
	0x01CABEB4 LDR X0, [X8 + 0x50]
	0x01CABEB8 MOVZ W1, 0x8
	0x01CABEBC MOV X2, X31
	0x01CABEC0 BL 0x1DD601C
	0x01CABEC4 MOV X21, X0
	0x01CABEC8 MOVZ W0, 0x1
	0x01CABECC MOV X1, X31
	0x01CABED0 BL 0x1D29EBC
	0x01CABED4 LDR X8, [X19 + 0x40]
	0x01CABED8 CBZ X8, 0x1CABF30
	0x01CABEDC LDR X8, [X8 + 0x20]
	0x01CABEE0 CBZ X8, 0x1CABEEC
	0x01CABEE4 LDR W0, [X8]
	0x01CABEE8 B 0x1CABEF0
	0x01CABEEC MOV X0, X31
	0x01CABEF0 LDR W1, [X19 + 0x68]
	0x01CABEF4 MOVZ W2, 0x2
	0x01CABEF8 MOV X3, X31
	0x01CABEFC BL 0x1DA8258
	0x01CABF00 STUR X0, [X21 + 0x1C]
	0x01CABF04 CBZ X21, 0x1CABF30
	0x01CABF08 MOVZ W8, 0x40
	0x01CABF0C STR W8, [X21 + 0xC]
	0x01CABF10 LDR X0, [X19 + 0x38]
	0x01CABF14 CBZ X0, 0x1CABF30
	0x01CABF18 MOV X1, X21
	0x01CABF1C MOV X2, X31
	0x01CABF20 BL 0x1D8A710
	0x01CABF24 ANDS W31, W20, 0x7
	0x01CABF28 B.NE 0x1CABDC0
	0x01CABF2C B 0x1CABE34
	0x01CABF30 BL 0x1B6EA1C
	0x01CABF34 STR X30, [X31 - 0x20]!
	0x01CABF38 STP X20, X19, [X31 + 0x10]
	0x01CABF3C MOV W19, W1
	0x01CABF40 MOV X1, X31
	0x01CABF44 MOV X20, X0
	0x01CABF48 BL 0x32276F8
	0x01CABF4C STR W19, [X20 + 0x10]
	0x01CABF50 LDP X20, X19, [X31 + 0x10]
	0x01CABF54 LDR X30, [X31], #0x20
	0x01CABF58 RET
	0x01CABF5C STP X30, X21, [X31 - 0x20]!
	0x01CABF60 STP X20, X19, [X31 + 0x10]
	0x01CABF64 ADRP X20, 0x2578000
	0x01CABF68 ADRP X21, 0x22A3000
	0x01CABF6C LDRB W8, [X20 + 0x490]
	0x01CABF70 LDR X21, [X21 + 0x8A0]
	0x01CABF74 MOV X19, X0
	0x01CABF78 TBNZ X8, 0x0, 0x1CABF90
	0x01CABF7C ADRP X0, 0x22A3000
	0x01CABF80 LDR X0, [X0 + 0x8A0]
	0x01CABF84 BL 0x1B6E7F0
	0x01CABF88 MOVZ W8, 0x1
	0x01CABF8C STRB W8, [X20 + 0x490]
	0x01CABF90 LDR X0, [X21]
	0x01CABF94 BL 0x1B6EA0C
	0x01CABF98 MOV X1, X31
	0x01CABF9C MOV X20, X0
	0x01CABFA0 BL 0x32276F8
	0x01CABFA4 STR W31, [X20 + 0x10]
	0x01CABFA8 STR X19, [X20 + 0x20]
	0x01CABFAC MOV X0, X20
	0x01CABFB0 LDP X20, X19, [X31 + 0x10]
	0x01CABFB4 LDP X30, X21, [X31], #0x20
	0x01CABFB8 RET
	0x01CABFBC STR X30, [X31 - 0x20]!
	0x01CABFC0 STP X20, X19, [X31 + 0x10]
	0x01CABFC4 MOV W19, W1
	0x01CABFC8 MOV X1, X31
	0x01CABFCC MOV X20, X0
	0x01CABFD0 BL 0x32276F8
	0x01CABFD4 STR W19, [X20 + 0x10]
	0x01CABFD8 LDP X20, X19, [X31 + 0x10]
	0x01CABFDC LDR X30, [X31], #0x20
	0x01CABFE0 RET
	0x01CABFE4 MOV X1, X31
	0x01CABFE8 B 0x1D661D8
	0x01CABFEC STR X30, [X31 - 0x30]!
	0x01CABFF0 STP X22, X21, [X31 + 0x10]
	0x01CABFF4 STP X20, X19, [X31 + 0x20]
	0x01CABFF8 ADRP X21, 0x2578000
	0x01CABFFC ADRP X22, 0x22A3000
	0x01CAC000 ADRP X19, 0x22A2000
	0x01CAC004 ADRP X20, 0x22A2000
	0x01CAC008 LDRB W8, [X21 + 0x491]
	0x01CAC00C LDR X22, [X22 + 0x340]
	0x01CAC010 LDR X19, [X19 + 0x880]
	0x01CAC014 LDR X20, [X20 + 0x8A8]
	0x01CAC018 TBNZ X8, 0x0, 0x1CAC048
	0x01CAC01C ADRP X0, 0x22A2000
	0x01CAC020 LDR X0, [X0 + 0x880]
	0x01CAC024 BL 0x1B6E7F0
	0x01CAC028 ADRP X0, 0x22A2000
	0x01CAC02C LDR X0, [X0 + 0x8A8]
	0x01CAC030 BL 0x1B6E7F0
	0x01CAC034 ADRP X0, 0x22A2000
	0x01CAC038 LDR X0, [X0 + 0x340]
	0x01CAC03C BL 0x1B6E7F0
	0x01CAC040 MOVZ W8, 0x1
	0x01CAC044 STRB W8, [X21 + 0x491]
	0x01CAC048 LDR X0, [X22]
	0x01CAC04C MOV X1, X31
	0x01CAC050 BL 0x3A7AE20
	0x01CAC054 LDR X8, [X19]
	0x01CAC058 MOV X1, X31
	0x01CAC05C LDR X8, [X8 + 0xB8]
	0x01CAC060 STR W0, [X8]
	0x01CAC064 LDR X0, [X20]
	0x01CAC068 BL 0x3A7AE20
	0x01CAC06C LDR X8, [X19]
	0x01CAC070 ADRP X9, 0xFFFFFFFFFEE00000
	0x01CAC074 LDR V0, [X9 + 0xAF]
	0x01CAC078 ADRP X9, 0xFFFFFFFFFEDFF000
	0x01CAC07C LDR X10, [X8 + 0xB8]
	0x01CAC080 LDR V1, [X9 + 0x7E]
	0x01CAC084 LDP X20, X19, [X31 + 0x20]
	0x01CAC088 LDP X22, X21, [X31 + 0x10]
	0x01CAC08C STR W0, [X10 + 0x4]
	0x01CAC090 STUR V0, [X10 + 0x8]
	0x01CAC094 LDR X9, [X8 + 0xB8]
	0x01CAC098 ADRP X10, 0xFFFFFFFFFEDFF000
	0x01CAC09C LDR V0, [X10 + 0x92]
	0x01CAC0A0 STUR V1, [X9 + 0x18]
	0x01CAC0A4 LDR X8, [X8 + 0xB8]
	0x01CAC0A8 STUR V0, [X8 + 0x28]
	0x01CAC0AC LDR X30, [X31], #0x30
	0x01CAC0B0 RET
	0x01CAC0B4 RET
	0x01CAC0B8 RET
	0x01CAC0BC STR X30, [X31 - 0x20]!
	0x01CAC0C0 STP X20, X19, [X31 + 0x10]
	0x01CAC0C4 ADRP X20, 0x2577000
	0x01CAC0C8 LDRB W8, [X20 + 0x492]
	0x01CAC0CC MOV X19, X0
	0x01CAC0D0 TBNZ X8, 0x0, 0x1CAC0E8
	0x01CAC0D4 ADRP X0, 0x22A2000
	0x01CAC0D8 LDR X0, [X0 + 0x880]
	0x01CAC0DC BL 0x1B6E7F0
	0x01CAC0E0 MOVZ W8, 0x1
	0x01CAC0E4 STRB W8, [X20 + 0x492]
	0x01CAC0E8 MOVZ W0, 0x1
	0x01CAC0EC MOV X1, X31
	0x01CAC0F0 MOVZ W20, 0x1
	0x01CAC0F4 BL 0x1D29EBC
	0x01CAC0F8 CBZ X19, 0x1CAC14C
	0x01CAC0FC ADRP X9, 0x22A2000
	0x01CAC100 LDR X9, [X9 + 0x880]
	0x01CAC104 STRB W20, [X19 + 0x58]
	0x01CAC108 LDR X8, [X19]
	0x01CAC10C LDR X1, [X9]
	0x01CAC110 LDRB W10, [X8 + 0x130]
	0x01CAC114 LDRB W9, [X1 + 0x130]
	0x01CAC118 CMP W10, W9
	0x01CAC11C B.CC 0x1CAC144
	0x01CAC120 LDR X8, [X8 + 0xC8]
	0x01CAC124 ADD X8, X8, X9, 0x3, LSL
	0x01CAC128 LDUR X8, [X8 - 0x8]
	0x01CAC12C CMP X8, X1
	0x01CAC130 B.NE 0x1CAC144
	0x01CAC134 MOV X0, X19
	0x01CAC138 LDP X20, X19, [X31 + 0x10]
	0x01CAC13C LDR X30, [X31], #0x20
	0x01CAC140 B 0x1CABB5C
	0x01CAC144 MOV X0, X19
	0x01CAC148 BL 0x1B6ECDC
	0x01CAC14C BL 0x1B6EA1C
	0x01CAC150 STR X30, [X31 - 0x20]!
	0x01CAC154 STP X20, X19, [X31 + 0x10]
	0x01CAC158 ADRP X20, 0x2577000
	0x01CAC15C LDRB W8, [X20 + 0x493]
	0x01CAC160 MOV X19, X0
	0x01CAC164 TBNZ X8, 0x0, 0x1CAC17C
	0x01CAC168 ADRP X0, 0x22A2000
	0x01CAC16C LDR X0, [X0 + 0x880]
	0x01CAC170 BL 0x1B6E7F0
	0x01CAC174 MOVZ W8, 0x1
	0x01CAC178 STRB W8, [X20 + 0x493]
	0x01CAC17C MOVZ W0, 0x1
	0x01CAC180 MOV X1, X31
	0x01CAC184 MOVZ W20, 0x1
	0x01CAC188 BL 0x1D29EBC
	0x01CAC18C CBZ X19, 0x1CAC1E0
	0x01CAC190 ADRP X9, 0x22A2000
	0x01CAC194 LDR X9, [X9 + 0x880]
	0x01CAC198 STRB W20, [X19 + 0x58]
	0x01CAC19C LDR X8, [X19]
	0x01CAC1A0 LDR X1, [X9]
	0x01CAC1A4 LDRB W10, [X8 + 0x130]
	0x01CAC1A8 LDRB W9, [X1 + 0x130]
	0x01CAC1AC CMP W10, W9
	0x01CAC1B0 B.CC 0x1CAC1D8
	0x01CAC1B4 LDR X8, [X8 + 0xC8]
	0x01CAC1B8 ADD X8, X8, X9, 0x3, LSL
	0x01CAC1BC LDUR X8, [X8 - 0x8]
	0x01CAC1C0 CMP X8, X1
	0x01CAC1C4 B.NE 0x1CAC1D8
	0x01CAC1C8 MOV X0, X19
	0x01CAC1CC LDP X20, X19, [X31 + 0x10]
	0x01CAC1D0 LDR X30, [X31], #0x20
	0x01CAC1D4 B 0x1CABD7C
	0x01CAC1D8 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 256
	002 Move [X31+160], X30
	003 Move [X31+176], X28
	004 Move [X31+184], X27
	005 Move [X31+192], X26
	006 Move [X31+200], X25
	007 Move [X31+208], X24
	008 Move [X31+216], X23
	009 Move [X31+224], X22
	010 Move [X31+232], X21
	011 Move [X31+240], X20
	012 Move [X31+248], X19
	013 Move X20, 0x2579000
	014 Move W8, [X20+1156]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {79}
	020 Move X0, 0x22A3000
	021 Move X0, [X0+2464]
	022 Call 0x1B6F7F0
	023 Move X0, 0x22A4000
	024 Move X0, [X0+616]
	025 Call 0x1B6F7F0
	026 Move X0, 0x22A4000
	027 Move X0, [X0+1960]
	028 Call 0x1B6F7F0
	029 Move X0, 0x22A3000
	030 Move X0, [X0+1528]
	031 Call 0x1B6F7F0
	032 Move X0, 0x22A4000
	033 Move X0, [X0+1832]
	034 Call 0x1B6F7F0
	035 Move X0, 0x22A4000
	036 Move X0, [X0+1920]
	037 Call 0x1B6F7F0
	038 Move X0, 0x22A4000
	039 Move X0, [X0+680]
	040 Call 0x1B6F7F0
	041 Move X0, 0x22A4000
	042 Move X0, [X0+584]
	043 Call 0x1B6F7F0
	044 Move X0, 0x22A4000
	045 Move X0, [X0+592]
	046 Call 0x1B6F7F0
	047 Move X0, 0x22A4000
	048 Move X0, [X0+1968]
	049 Call 0x1B6F7F0
	050 Move X0, 0x22A4000
	051 Move X0, [X0+1840]
	052 Call 0x1B6F7F0
	053 Move X0, 0x22A3000
	054 Move X0, [X0+1144]
	055 Call 0x1B6F7F0
	056 Move X0, 0x22A4000
	057 Move X0, [X0+1976]
	058 Call 0x1B6F7F0
	059 Move X0, 0x22A4000
	060 Move X0, [X0+1984]
	061 Call 0x1B6F7F0
	062 Move X0, 0x22A4000
	063 Move X0, [X0+1992]
	064 Call 0x1B6F7F0
	065 Move X0, 0x22A4000
	066 Move X0, [X0+2000]
	067 Call 0x1B6F7F0
	068 Move X0, 0x22A4000
	069 Move X0, [X0+2008]
	070 Call 0x1B6F7F0
	071 Move X0, 0x22A4000
	072 Move X0, [X0+2016]
	073 Call 0x1B6F7F0
	074 Move X0, 0x22A4000
	075 Move X0, [X0+2024]
	076 Call 0x1B6F7F0
	077 Move W8, 1
	078 Move [X20+1156], W8
	079 Move X22, 0x2579000
	080 Move W8, [X22+1288]
	081 Move [X31+168], X31
	082 Move [X31+152], X31
	083 Compare W8, 0
	084 JumpIfNotEqual {90}
	085 Move X0, 0x22A3000
	086 Move X0, [X0+3960]
	087 Call 0x1B6F7F0
	088 Move W8, 1
	089 Move [X22+1288], W8
	090 Move X23, 0x22A3000
	091 Move X23, [X23+3960]
	092 Move X24, 0x22A3000
	093 Move X8, [X23]
	094 Move X8, [X8+184]
	095 Move X8, [X8+64]
	096 Move X24, [X24+1144]
	097 Compare X8, 0
	098 JumpIfEqual {100}
	099 Move X20, [X8+152]
	100 Move X20, X31
	101 Move X0, [X24]
	102 Move W8, [X0+224]
	103 Compare W8, 0
	104 JumpIfNotEqual {106}
	105 Call 0x1B6F8F8
	106 Move X0, X20
	107 Move X1, X31
	108 Move X2, X31
	109 Call Object.op_Equality, X0, X1
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfEqual {514}
	114 Move X0, X19
	115 Call ItemVendingMachine.UpdateItemLimitCheck, X0
	116 Call ItemVendingMachine.get_IsPurchaseLimited
	117 Move TEMP, X0
	118 And TEMP, TEMP, 1
	119 Compare TEMP, 1
	120 JumpIfEqual {514}
	121 Move X0, [X19+32]
	122 Compare X0, 0
	123 JumpIfEqual {527}
	124 Move X8, 0x22A4000
	125 Move W1, [X19+96]
	126 Move X8, [X8+1920]
	127 Move X2, [X8]
	128 Call List`1<Object>.get_Item, X0, X1
	129 Compare X0, 0
	130 JumpIfEqual {527}
	131 Move X20, X0
	132 Move W0, [X0+32]
	133 Move X1, X31
	134 Call GameManager.TrySpendMoney, X0
	135 Move TEMP, X0
	136 And TEMP, TEMP, 1
	137 Compare TEMP, 1
	138 JumpIfNotEqual {342}
	139 Move X0, [X24]
	140 Move X21, [X20+56]
	141 Move W8, [X0+224]
	142 Compare W8, 0
	143 JumpIfNotEqual {145}
	144 Call 0x1B6F8F8
	145 Move X0, X21
	146 Move X1, X31
	147 Call Object.op_Implicit, X0
	148 Move TEMP, X0
	149 And TEMP, TEMP, 1
	150 Compare TEMP, 1
	151 JumpIfNotEqual {356}
	152 Move W8, [X22+1288]
	153 Compare W8, 0
	154 JumpIfNotEqual {160}
	155 Move X0, 0x22A3000
	156 Move X0, [X0+3960]
	157 Call 0x1B6F7F0
	158 Move W8, 1
	159 Move [X22+1288], W8
	160 Move X8, [X23]
	161 Move X8, [X8+184]
	162 Move X8, [X8+64]
	163 Compare X8, 0
	164 JumpIfEqual {527}
	165 Move X0, [X19+56]
	166 Compare X0, 0
	167 JumpIfEqual {527}
	168 Move X21, [X8+152]
	169 Move X22, [X20+56]
	170 Move X1, X31
	171 Call Transform.get_position, X0
	172 Move X8, 0x22A4000
	173 Move X8, [X8+584]
	174 Add X0, X31, 128
	175 Move [X31+128], X31
	176 Move [X31+136], X31
	177 Move X1, [X8]
	178 Call Nullable`1<Vector3>..ctor, X0, X1
	179 Move X0, [X19+56]
	180 Compare X0, 0
	181 JumpIfEqual {527}
	182 Move X1, X31
	183 Call Transform.get_rotation, X0
	184 Move X8, 0x22A4000
	185 Move X8, [X8+592]
	186 Add X0, X31, 72
	187 Move [X31+72], X31
	188 Move [X31+80], X31
	189 Move [X31+88], W31
	190 Move X1, [X8]
	191 Call Nullable`1<Quaternion>..ctor, X0, X1
	192 Compare X21, 0
	193 JumpIfEqual {527}
	194 NotImplemented "Instruction LDUR not yet implemented."
	195 Move W8, [X31+88]
	196 Move X2, [X31+128]
	197 Move X3, [X31+136]
	198 Add X4, X31, 96
	199 Move X0, X21
	200 Move X1, X22
	201 Move X5, X31
	202 Move X6, X31
	203 Move W7, W31
	204 Move [X31+6], V0
	205 Move [X31+112], W8
	206 Move [X31], X31
	207 Call NetworkRunner.Spawn, X0, X1, X2, X3, X4, X5, X6
	208 Move X8, 0x22A4000
	209 Move X8, [X8+680]
	210 Move X21, X0
	211 Move X8, [X8]
	212 Move W9, [X8+224]
	213 Compare W9, 0
	214 JumpIfNotEqual {217}
	215 Move X0, X8
	216 Call 0x1B6F8F8
	217 Call NetPlayer.get_localPlayer
	218 Compare X21, 0
	219 JumpIfEqual {533}
	220 Move X8, 0x22A4000
	221 Move X8, [X8+616]
	222 Move X23, X0
	223 Move X1, [X8]
	224 Move X0, X21
	225 Call 0x2090DE8, X0
	226 Move X22, X0
	227 Move X0, [X24]
	228 Move W8, [X0+224]
	229 Compare W8, 0
	230 JumpIfNotEqual {232}
	231 Call 0x1B6F8F8
	232 Move X0, X23
	233 Move X1, X31
	234 Move X2, X31
	235 Call Object.op_Inequality, X0, X1
	236 Move TEMP, X0
	237 And TEMP, TEMP, 1
	238 Compare TEMP, 1
	239 JumpIfNotEqual {366}
	240 Move X0, [X24]
	241 Move W8, [X0+224]
	242 Compare W8, 0
	243 JumpIfNotEqual {245}
	244 Call 0x1B6F8F8
	245 Move X0, X22
	246 Move X1, X31
	247 Move X2, X31
	248 Call Object.op_Inequality, X0, X1
	249 Move TEMP, X0
	250 And TEMP, TEMP, 1
	251 Compare TEMP, 1
	252 JumpIfNotEqual {366}
	253 Compare X23, 0
	254 JumpIfEqual {534}
	255 Move X25, [X23+200]
	256 Compare X25, 0
	257 JumpIfEqual {535}
	258 Move X8, [X25+24]
	259 NotImplemented "Instruction CMP not yet implemented."
	260 Move W24, W31
	261 Move X26, X31
	262 And X8, X8, 0
	263 Add X27, X25, 32
	264 NotImplemented "Instruction CMP not yet implemented."
	265 Compare X22, 0
	266 JumpIfEqual {529}
	267 Move W8, [X22+140]
	268 Move X23, [X27]
	269 Compare W8, 0
	270 JumpIfEqual {293}
	271 Compare X23, 0
	272 JumpIfEqual {531}
	273 Move W8, [X23+128]
	274 NotImplemented "Instruction CMP not yet implemented."
	275 Move X0, X23
	276 Move X1, X31
	277 Call AttachedItemAnchor.get_grabbedItem, X0
	278 Move [X31+152], X0
	279 Add X0, X31, 152
	280 Move X1, X31
	281 Call NetworkBehaviourId.get_IsValid, X0
	282 Move TEMP, X0
	283 And TEMP, TEMP, 1
	284 Compare TEMP, 1
	285 JumpIfEqual {308}
	286 Move X8, [X22+64]
	287 Compare X8, 0
	288 JumpIfEqual {313}
	289 Move X8, [X8+32]
	290 Compare X8, 0
	291 JumpIfEqual {313}
	292 Move W1, [X8]
	293 Compare X23, 0
	294 JumpIfEqual {532}
	295 Move W8, [X23+128]
	296 NotImplemented "Instruction CMP not yet implemented."
	297 Move X0, X23
	298 Move X1, X31
	299 Call AttachedItemAnchor.get_grabbedItem, X0
	300 Move [X31+152], X0
	301 Add X0, X31, 152
	302 Move X1, X31
	303 Call NetworkBehaviourId.get_IsValid, X0
	304 Move TEMP, X0
	305 And TEMP, TEMP, 1
	306 Compare TEMP, 1
	307 JumpIfNotEqual {324}
	308 Move W28, W24
	309 Move W8, [X25+24]
	310 Add X26, X26, 1
	311 Move W24, W28
	312 NotImplemented "Instruction CMP not yet implemented."
	313 Move X1, X31
	314 Move W8, [X22+104]
	315 Move W28, 1
	316 NotImplemented "Instruction BFM not yet implemented."
	317 Move W3, 1
	318 Move X0, X23
	319 Move W2, W31
	320 Move X4, X31
	321 Move X5, X31
	322 Move X6, X31
	323 Call AttachedItemAnchor.RPC_TryGrabItem, X0, X1, X2, X3, X4
	324 Move X8, [X22+64]
	325 Compare X8, 0
	326 JumpIfEqual {331}
	327 Move X8, [X8+32]
	328 Compare X8, 0
	329 JumpIfEqual {331}
	330 Move W1, [X8]
	331 Move X1, X31
	332 Move W8, [X22+104]
	333 Move W28, 1
	334 NotImplemented "Instruction BFM not yet implemented."
	335 Move W3, 1
	336 Move X0, X23
	337 Move W2, W31
	338 Move X4, X31
	339 Move X5, X31
	340 Move X6, X31
	341 Call AttachedItemAnchor.RPC_TryGrabItem, X0, X1, X2, X3, X4
	342 Move X0, X19
	343 Call ItemVendingMachine.AnimateNotEnoughMoney, X0
	344 Move X20, [X19+72]
	345 Move X0, X19
	346 Move X1, X31
	347 Call Component.get_transform, X0
	348 Compare X0, 0
	349 JumpIfEqual {527}
	350 Move X1, X31
	351 Call Transform.get_position, X0
	352 Move S3, 1
	353 Move X0, X20
	354 Move X1, X31
	355 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	356 Move W0, [X20+36]
	357 Move X1, X31
	358 Call GameManager.AddPlayerMoney, X0
	359 Move W28, W31
	360 Move TEMP, X28
	361 And TEMP, TEMP, 1
	362 Compare TEMP, 1
	363 JumpIfEqual {394}
	364 Compare X21, 0
	365 JumpIfEqual {527}
	366 Move X8, 0x22A4000
	367 Move X8, [X8+1960]
	368 Add X1, X31, 168
	369 Move X0, X21
	370 Move X2, [X8]
	371 Call 0x2091EE4, X0, X1
	372 Move TEMP, X0
	373 And TEMP, TEMP, 1
	374 Compare TEMP, 1
	375 JumpIfNotEqual {394}
	376 Move X21, [X31+168]
	377 Move X0, X19
	378 Move X1, X31
	379 Call Component.get_transform, X0
	380 Compare X0, 0
	381 JumpIfEqual {527}
	382 Move X1, X31
	383 Call Transform.get_forward, X0
	384 Compare X21, 0
	385 JumpIfEqual {527}
	386 Move S3, 3
	387 Multiply S2, S2, S3
	388 Multiply S1, S1, S3
	389 Multiply S0, S0, S3
	390 Move W1, 2
	391 Move X0, X21
	392 Move X2, X31
	393 Call Rigidbody.AddForce, X0, X1, X2
	394 Move X21, 0x22A4000
	395 Move X21, [X21+1832]
	396 Move X8, [X21]
	397 Move X8, [X8+184]
	398 Move W9, [X8+4]
	399 Move W10, [X8+8]
	400 Add W9, W9, 1
	401 Move [X8+4], W9
	402 Compare W10, 0
	403 JumpIfNotEqual {416}
	404 Move X0, X31
	405 Call Time.get_time
	406 Move X8, 0x22A4000
	407 Move X8, [X8+1968]
	408 Add X0, X31, 72
	409 Move [X31+72], X31
	410 Move X1, [X8]
	411 Call Nullable`1<Single>..ctor, X0, V0
	412 Move X8, [X21]
	413 Move X9, [X31+72]
	414 Move X8, [X8+184]
	415 Move [X8+8], X9
	416 Move X21, [X19+64]
	417 Move X0, X19
	418 Move X1, X31
	419 Call Component.get_transform, X0
	420 Compare X0, 0
	421 JumpIfEqual {527}
	422 Move X1, X31
	423 Call Transform.get_position, X0
	424 Move S3, 1
	425 Move X0, X21
	426 Move X1, X31
	427 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	428 Move X8, 0x22A4000
	429 Move X8, [X8+1984]
	430 Move W1, 3
	431 Move X0, [X8]
	432 Call 0x1B6F868
	433 Move X19, X0
	434 Move X0, X20
	435 Move X1, X31
	436 Call Object.get_name, X0
	437 Move X8, 0x22A4000
	438 Move X21, 0x22A4000
	439 Move X8, [X8+2016]
	440 Move X21, [X21+1992]
	441 Move X2, X0
	442 Add X0, X31, 128
	443 Move X1, [X8]
	444 Move X3, [X21]
	445 Move [X31+128], X31
	446 Move [X31+136], X31
	447 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	448 Compare X19, 0
	449 JumpIfEqual {527}
	450 Move W8, [X19+24]
	451 Compare W8, 0
	452 JumpIfEqual {528}
	453 Move V0, [X31+8]
	454 Move X8, 0x22A4000
	455 Move X8, [X8+1976]
	456 Move TEMP, 0
	457 Not TEMP
	458 Move X9, TEMP
	459 Move [X19+2], V0
	460 Add X0, X31, 72
	461 Move X8, [X8]
	462 Move X1, X31
	463 Move [X31+72], X8
	464 Move [X31+80], X9
	465 Move W8, [X20+40]
	466 Move [X31+88], W8
	467 Call Enum.ToString, X0
	468 Move X8, 0x22A4000
	469 Move X8, [X8+2000]
	470 Move X3, [X21]
	471 Move X2, X0
	472 Add X0, X31, 48
	473 Move X1, [X8]
	474 Move [X31+48], X31
	475 Move [X31+56], X31
	476 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	477 Move W8, [X19+24]
	478 NotImplemented "Instruction CMP not yet implemented."
	479 Move V0, [X31+3]
	480 Move X9, 0x22A3000
	481 Add X1, X31, 44
	482 Move [X19+3], V0
	483 Move W8, [X20+32]
	484 Move X9, [X9+1528]
	485 Move [X31+44], W8
	486 Move X0, [X9]
	487 Call 0x1B6F900
	488 Move X8, 0x22A3000
	489 Move X8, [X8+2008]
	490 Move X3, [X21]
	491 Move X2, X0
	492 Add X0, X31, 16
	493 Move X1, [X8]
	494 Move [X31+16], X31
	495 Move [X31+24], X31
	496 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	497 Move W8, [X19+24]
	498 NotImplemented "Instruction CMP not yet implemented."
	499 Move V0, [X31+1]
	500 Move X8, 0x22A2000
	501 Move [X19+4], V0
	502 Move X8, [X8+2464]
	503 Move X0, [X8]
	504 Move W8, [X0+224]
	505 Compare W8, 0
	506 JumpIfNotEqual {508}
	507 Call 0x1B6F8F8
	508 Move X8, 0x22A3000
	509 Move X8, [X8+2024]
	510 Move X1, X19
	511 Move X2, X31
	512 Move X0, [X8]
	513 Call Analytics.Track, X0, X1
	514 Move X20, [X31+240]
	515 Move X19, [X31+248]
	516 Move X22, [X31+224]
	517 Move X21, [X31+232]
	518 Move X24, [X31+208]
	519 Move X23, [X31+216]
	520 Move X26, [X31+192]
	521 Move X25, [X31+200]
	522 Move X28, [X31+176]
	523 Move X27, [X31+184]
	524 Move X30, [X31+160]
	525 Add X31, X31, 256
	526 Return 
	527 Call 0x1B6FA1C
	528 Call 0x1B6FA24
	529 Call 0x1B6FA1C
	530 Call 0x1B6FA24
	531 Call 0x1B6FA1C
	532 Call 0x1B6FA1C
	533 Call 0x1B6FA1C
	534 Call 0x1B6FA1C
	535 Call 0x1B6FA1C
	536 Move X22, X0
	537 And W25, W24, 1
	538 Move X22, X0
	539 Move W25, W31
	540 NotImplemented "Instruction CMP not yet implemented."
	541 Move X0, X22
	542 Call 0x3D1A840
	543 Move X22, X0
	544 Move X0, 0x22A2000
	545 Move X0, [X0+1648]
	546 Call 0x1B6F804
	547 Move X8, [X22]
	548 Move X1, [X8]
	549 Call 0x1B6FD6C
	550 Move TEMP, X0
	551 And TEMP, TEMP, 1
	552 Compare TEMP, 1
	553 JumpIfNotEqual {586}
	554 Move X22, [X22]
	555 Call 0x3D1A850
	556 Move X0, 0x22A2000
	557 Move X0, [X0+1576]
	558 Call 0x1B6F804
	559 Move W8, [X0+224]
	560 Compare W8, 0
	561 JumpIfNotEqual {563}
	562 Call 0x1B6F8F8
	563 Move X0, 0x22A3000
	564 Move X0, [X0+2032]
	565 Call 0x1B6F804
	566 Move X23, X0
	567 Move X0, 0x22A3000
	568 Move X0, [X0+2040]
	569 Call 0x1B6F804
	570 Move X24, X0
	571 Move X0, 0x22A3000
	572 Move X0, [X0+2048]
	573 Call 0x1B6F804
	574 Move X4, X0
	575 Move W5, 192
	576 Move X0, X23
	577 Move X1, X22
	578 Move X2, X31
	579 Move X3, X24
	580 Move X6, X31
	581 Call Log.Error, X0, X1, X2, X3, X4, X5
	582 Move TEMP, X25
	583 And TEMP, TEMP, 1
	584 Compare TEMP, 1
	585 JumpIfNotEqual {364}
	586 Move W0, 8
	587 Call 0x3D1A860
	588 Move X8, [X22]
	589 Move [X0], X8
	590 Move X1, 0x2071000
	591 Add X1, X1, 3032
	592 Move X2, X31
	593 Call 0x3D1A870
	594 Move X22, X0
	595 Call 0x3D1A850
	596 Move X0, X22
	597 Call 0x1C8518C
	598 Call 0x18F56A8

Method: System.Void UpdateCurrentPreview()

Disassembly:
	0x01CAB4C8 MOV X20, X0
	0x01CAB4CC MOV X0, X8
	0x01CAB4D0 BL 0x1B6EA0C
	0x01CAB4D4 LDR X2, [X23]
	0x01CAB4D8 MOV X1, X19
	0x01CAB4DC MOV X3, X31
	0x01CAB4E0 MOV X21, X0
	0x01CAB4E4 BL 0x317DB24
	0x01CAB4E8 CBZ X20, 0x1CAB51C
	0x01CAB4EC MOV X0, X20
	0x01CAB4F0 MOV X1, X21
	0x01CAB4F4 MOV X2, X31
	0x01CAB4F8 BL 0x30310C4
	0x01CAB4FC CBZ X0, 0x1CAB51C
	0x01CAB500 MOV X1, X31
	0x01CAB504 BL 0x3028CC0
	0x01CAB508 STR W0, [X19 + 0x64]
	0x01CAB50C LDP X20, X19, [X31 + 0x20]
	0x01CAB510 LDP X22, X21, [X31 + 0x10]
	0x01CAB514 LDP X30, X23, [X31], #0x30
	0x01CAB518 RET
	0x01CAB51C BL 0x1B6EA1C
	0x01CAB520 STR X30, [X31 - 0x30]!
	0x01CAB524 STP X22, X21, [X31 + 0x10]
	0x01CAB528 STP X20, X19, [X31 + 0x20]
	0x01CAB52C ADRP X21, 0x2578000
	0x01CAB530 LDRB W8, [X21 + 0x486]
	0x01CAB534 MOV X19, X1
	0x01CAB538 MOV X20, X0
	0x01CAB53C TBNZ X8, 0x0, 0x1CAB584
	0x01CAB540 ADRP X0, 0x22A3000
	0x01CAB544 LDR X0, [X0 + 0x840]
	0x01CAB548 BL 0x1B6E7F0
	0x01CAB54C ADRP X0, 0x22A3000
	0x01CAB550 LDR X0, [X0 + 0x848]
	0x01CAB554 BL 0x1B6E7F0
	0x01CAB558 ADRP X0, 0x22A3000
	0x01CAB55C LDR X0, [X0 + 0x850]
	0x01CAB560 BL 0x1B6E7F0
	0x01CAB564 ADRP X0, 0x22A3000
	0x01CAB568 LDR X0, [X0 + 0x858]
	0x01CAB56C BL 0x1B6E7F0
	0x01CAB570 ADRP X0, 0x22A2000
	0x01CAB574 LDR X0, [X0 + 0x478]
	0x01CAB578 BL 0x1B6E7F0
	0x01CAB57C MOVZ W8, 0x1
	0x01CAB580 STRB W8, [X21 + 0x486]
	0x01CAB584 LDR X0, [X20 + 0x58]
	0x01CAB588 CBZ X0, 0x1CAB63C
	0x01CAB58C ADRP X8, 0x22A3000
	0x01CAB590 LDR X8, [X8 + 0x848]
	0x01CAB594 MOV X1, X19
	0x01CAB598 LDR X2, [X8]
	0x01CAB59C BL 0x28FA49C
	0x01CAB5A0 TBNZ X0, 0x0, 0x1CAB614
	0x01CAB5A4 CBZ X19, 0x1CAB63C
	0x01CAB5A8 ADRP X8, 0x22A2000
	0x01CAB5AC LDR X8, [X8 + 0x478]
	0x01CAB5B0 LDR X21, [X19 + 0x30]
	0x01CAB5B4 LDR X22, [X20 + 0x38]
	0x01CAB5B8 LDR X0, [X8]
	0x01CAB5BC LDR W8, [X0 + 0xE0]
	0x01CAB5C0 CBNZ W8, 0x1CAB5C8
	0x01CAB5C4 BL 0x1B6E8F8
	0x01CAB5C8 ADRP X8, 0x22A3000
	0x01CAB5CC LDR X8, [X8 + 0x858]
	0x01CAB5D0 MOV X0, X21
	0x01CAB5D4 MOV X1, X22
	0x01CAB5D8 LDR X2, [X8]
	0x01CAB5DC BL 0x2114E50
	0x01CAB5E0 CBZ X0, 0x1CAB63C
	0x01CAB5E4 MOV W1, W31
	0x01CAB5E8 MOV X2, X31
	0x01CAB5EC MOV X21, X0
	0x01CAB5F0 BL 0x3A9D9A8
	0x01CAB5F4 LDR X0, [X20 + 0x58]
	0x01CAB5F8 CBZ X0, 0x1CAB63C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2579000
	007 Move W8, [X20+1157]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x22A3000
	014 Move X0, [X0+1528]
	015 Call 0x1B6F7F0
	016 Move X0, 0x22A4000
	017 Move X0, [X0+1912]
	018 Call 0x1B6F7F0
	019 Move X0, 0x22A4000
	020 Move X0, [X0+1920]
	021 Call 0x1B6F7F0
	022 Move X0, 0x22A4000
	023 Move X0, [X0+1928]
	024 Call 0x1B6F7F0
	025 Move W8, 1
	026 Move [X20+1157], W8
	027 Move X0, [X19+32]
	028 Compare X0, 0
	029 JumpIfEqual {83}
	030 Move X21, 0x22A4000
	031 Move X21, [X21+1920]
	032 Move W1, [X19+96]
	033 Move X20, [X19+48]
	034 Move X2, [X21]
	035 Call List`1<Object>.get_Item, X0, X1
	036 Compare X0, 0
	037 JumpIfEqual {83}
	038 Move X8, 0x22A3000
	039 Move X8, [X8+1528]
	040 Move W9, [X0+32]
	041 Move X22, 0x22A4000
	042 Add X1, X31, 12
	043 Move X0, [X8]
	044 Move X22, [X22+1928]
	045 Move [X31+12], W9
	046 Call 0x1B6F900
	047 Move X8, [X22]
	048 Move X1, X0
	049 Move X2, X31
	050 Move X0, X8
	051 Call String.Format, X0, X1
	052 Compare X20, 0
	053 JumpIfEqual {83}
	054 Move X8, [X20]
	055 Move X1, X0
	056 Move X0, X20
	057 Move X9, [X8+1368]
	058 Move X2, [X8+1376]
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X0, [X19+32]
	061 Compare X0, 0
	062 JumpIfEqual {83}
	063 Move W20, W31
	064 Move W8, [X0+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X2, [X21]
	067 Move W1, W20
	068 Call List`1<Object>.get_Item, X0, X1
	069 Move X1, X0
	070 Move X0, X19
	071 Call ItemVendingMachine.GetPreviewGameObject, X0, X1
	072 Compare X0, 0
	073 JumpIfEqual {83}
	074 Move W8, [X19+96]
	075 Move X2, X31
	076 NotImplemented "Instruction CMP not yet implemented."
	077 NotImplemented "Instruction CSET not yet implemented."
	078 Call GameObject.SetActive, X0, X1
	079 Move X0, [X19+32]
	080 Add W20, W20, 1
	081 Compare X0, 0
	082 JumpIfNotEqual {64}
	083 Call 0x1B6FA1C
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X22, [X31+16]
	087 Move X21, [X31+24]
	088 Move X30, [X31+48]
	089 Return 

Method: UnityEngine.GameObject GetPreviewGameObject(AnimalCompany.ItemData itemData)

Disassembly:
	0x01CAC520 MOV X0, X20
	0x01CAC524 MOV X1, X31
	0x01CAC528 FMUL S2, S2, S3
	0x01CAC52C FMUL S1, S1, S3
	0x01CAC530 FMUL S0, S0, S3
	0x01CAC534 BL 0x1C9ED50
	0x01CAC538 LDR X0, [X21 + 0x80]
	0x01CAC53C CBZ X0, 0x1CAC620
	0x01CAC540 ADD X1, X31, 0xC
	0x01CAC544 MOV X2, X31
	0x01CAC548 BL 0x1C9E62C
	0x01CAC54C TBZ X0, 0x0, 0x1CAC5D4
	0x01CAC550 ADRP X8, 0xFFFFFFFFFEDFD000
	0x01CAC554 ADRP X9, 0xFFFFFFFFFEDFD000
	0x01CAC558 LDR W0, [X31 + 0xC]
	0x01CAC55C LDR V0, [X8 + 0xE20]
	0x01CAC560 LDR V1, [X9 + 0xAB0]
	0x01CAC564 MOV X1, X31
	0x01CAC568 BL 0x1CC220C
	0x01CAC56C B 0x1CAC5D4
	0x01CAC570 MOVN W8, 0x0
	0x01CAC574 STR W8, [X19 + 0x10]
	0x01CAC578 CBZ X21, 0x1CAC620
	0x01CAC57C LDR X0, [X21 + 0x80]
	0x01CAC580 CBZ X0, 0x1CAC620
	0x01CAC584 MOV X1, X31
	0x01CAC588 BL 0x1CA33B8
	0x01CAC58C MOV W0, W31
	0x01CAC590 B 0x1CAC610
	0x01CAC594 CBZ X20, 0x1CAC620
	0x01CAC598 LDR X0, [X21 + 0x88]
	0x01CAC59C CBZ X0, 0x1CAC620
	0x01CAC5A0 LDR X20, [X20 + 0x130]
	0x01CAC5A4 MOV X1, X31
	0x01CAC5A8 BL 0x3AA7AD0
	0x01CAC5AC CBZ X20, 0x1CAC620
	0x01CAC5B0 ADRP X8, 0xFFFFFFFFFEDFD000
	0x01CAC5B4 LDR V3, [X8 + 0xDE8]
	0x01CAC5B8 MOVZ W1, 0x2
	0x01CAC5BC MOV X0, X20
	0x01CAC5C0 MOV X2, X31
	0x01CAC5C4 FMUL S2, S2, S3
	0x01CAC5C8 FMUL S1, S1, S3
	0x01CAC5CC FMUL S0, S0, S3
	0x01CAC5D0 BL 0x3AF6FC8
	0x01CAC5D4 MOVZ W8, 0x2
	0x01CAC5D8 STR X31, [X19 + 0x18]
	0x01CAC5DC B 0x1CAC608
	0x01CAC5E0 ADRP X8, 0x22A2000
	0x01CAC5E4 LDR X8, [X8 + 0x2E8]
	0x01CAC5E8 LDR X0, [X8]
	0x01CAC5EC BL 0x1B6EA0C
	0x01CAC5F0 FMOV S0, 4
	0x01CAC5F4 MOV X1, X31
	0x01CAC5F8 MOV X20, X0
	0x01CAC5FC BL 0x3AA273C
	0x01CAC600 STR X20, [X19 + 0x18]
	0x01CAC604 MOVZ W8, 0x3
	0x01CAC608 STR W8, [X19 + 0x10]
	0x01CAC60C MOVZ W0, 0x1
	0x01CAC610 LDP X20, X19, [X31 + 0x20]
	0x01CAC614 LDP X30, X21, [X31 + 0x10]
	0x01CAC618 LDR V8, [X31], #0x30
	0x01CAC61C RET
	0x01CAC620 BL 0x1B6EA1C
	0x01CAC624 LDR X0, [X0 + 0x18]
	0x01CAC628 RET
	0x01CAC62C STP X30, X19, [X31 - 0x10]!
	0x01CAC630 ADRP X0, 0x22A1000
	0x01CAC634 LDR X0, [X0 + 0x990]
	0x01CAC638 BL 0x1B6E804
	0x01CAC63C BL 0x1B6EA0C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2578000
	007 Move W8, [X21+1158]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x22A3000
	015 Move X0, [X0+2112]
	016 Call 0x1B6F7F0
	017 Move X0, 0x22A3000
	018 Move X0, [X0+2120]
	019 Call 0x1B6F7F0
	020 Move X0, 0x22A3000
	021 Move X0, [X0+2128]
	022 Call 0x1B6F7F0
	023 Move X0, 0x22A3000
	024 Move X0, [X0+2136]
	025 Call 0x1B6F7F0
	026 Move X0, 0x22A2000
	027 Move X0, [X0+1144]
	028 Call 0x1B6F7F0
	029 Move W8, 1
	030 Move [X21+1158], W8
	031 Move X0, [X20+88]
	032 Compare X0, 0
	033 JumpIfEqual {89}
	034 Move X8, 0x22A3000
	035 Move X8, [X8+2120]
	036 Move X1, X19
	037 Move X2, [X8]
	038 Call Dictionary`2<Object, Object>.ContainsKey, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {75}
	043 Compare X19, 0
	044 JumpIfEqual {89}
	045 Move X8, 0x22A2000
	046 Move X8, [X8+1144]
	047 Move X21, [X19+48]
	048 Move X22, [X20+56]
	049 Move X0, [X8]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1B6F8F8
	054 Move X8, 0x22A3000
	055 Move X8, [X8+2136]
	056 Move X0, X21
	057 Move X1, X22
	058 Move X2, [X8]
	059 Call 0x2115E50, X0, X1
	060 Compare X0, 0
	061 JumpIfEqual {89}
	062 Move W1, W31
	063 Move X2, X31
	064 Move X21, X0
	065 Call GameObject.SetActive, X0, X1
	066 Move X0, [X20+88]
	067 Compare X0, 0
	068 JumpIfEqual {89}
	069 Move X8, 0x22A3000
	070 Move X8, [X8+2112]
	071 Move X1, X19
	072 Move X2, X21
	073 Move X3, [X8]
	074 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	075 Move X0, [X20+88]
	076 Compare X0, 0
	077 JumpIfEqual {89}
	078 Move X8, 0x22A3000
	079 Move X8, [X8+2128]
	080 Move X1, X19
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X2, [X8]
	086 Move X30, [X31+48]
	087 Call Dictionary`2<Object, Object>.get_Item, X0, X1
	088 Return X0
	089 Call 0x1B6FA1C

Method: System.Void AnimateNotEnoughMoney()

Disassembly:
	0x01CAC3BC STP X30, X19, [X31 - 0x10]!
	0x01CAC3C0 ADRP X0, 0x22A1000
	0x01CAC3C4 LDR X0, [X0 + 0x990]
	0x01CAC3C8 BL 0x1B6E804
	0x01CAC3CC BL 0x1B6EA0C
	0x01CAC3D0 MOV X1, X31
	0x01CAC3D4 MOV X19, X0
	0x01CAC3D8 BL 0x31E99B4
	0x01CAC3DC ADRP X0, 0x22A2000
	0x01CAC3E0 LDR X0, [X0 + 0x8B0]
	0x01CAC3E4 BL 0x1B6E804
	0x01CAC3E8 MOV X1, X0
	0x01CAC3EC MOV X0, X19
	0x01CAC3F0 BL 0x1B6E8E8
	0x01CAC3F4 LDR X0, [X0 + 0x18]
	0x01CAC3F8 RET
	0x01CAC3FC RET
	0x01CAC400 STR D8, [X31 - 0x30]!
	0x01CAC404 STP X30, X21, [X31 + 0x10]
	0x01CAC408 STP X20, X19, [X31 + 0x20]
	0x01CAC40C ADRP X20, 0x2577000
	0x01CAC410 LDRB W8, [X20 + 0x495]
	0x01CAC414 MOV X19, X0
	0x01CAC418 TBNZ X8, 0x0, 0x1CAC430
	0x01CAC41C ADRP X0, 0x22A2000
	0x01CAC420 LDR X0, [X0 + 0x2E8]
	0x01CAC424 BL 0x1B6E7F0
	0x01CAC428 MOVZ W8, 0x1
	0x01CAC42C STRB W8, [X20 + 0x495]
	0x01CAC430 STR W31, [X31 + 0xC]
	0x01CAC434 LDR W8, [X19 + 0x10]
	0x01CAC438 CMP W8, 0x3
	0x01CAC43C B.HI 0x1CAC58C
	0x01CAC440 LDR X21, [X19 + 0x20]
	0x01CAC444 ADRP X9, 0xFFFFFFFFFEE40000
	0x01CAC448 ADD X9, X9, 0x914
	0x01CAC44C ADR X10, 0x10
	0x01CAC450 LDRB W11, [X9, X8, LSL]
	0x01CAC454 ADD X10, X10, X11, 0x2, LSL
	0x01CAC458 BR X10
	0x01CAC45C MOVN W8, 0x0
	0x01CAC460 STR W8, [X19 + 0x10]
	0x01CAC464 CBZ X21, 0x1CAC620
	0x01CAC468 LDR X0, [X21 + 0x88]
	0x01CAC46C CBZ X0, 0x1CAC620
	0x01CAC470 LDR X20, [X21 + 0x80]
	0x01CAC474 MOV X1, X31
	0x01CAC478 BL 0x3AA7AD0
	0x01CAC47C CBZ X20, 0x1CAC620
	0x01CAC480 FMOV S3, 7
	0x01CAC484 FMUL S2, S2, S3
	0x01CAC488 FMUL S1, S1, S3
	0x01CAC48C FMUL S0, S0, S3
	0x01CAC490 MOV X0, X20
	0x01CAC494 MOV X1, X31
	0x01CAC498 BL 0x1C9ED50
	0x01CAC49C MOVZ W0, 0x1
	0x01CAC4A0 STR X31, [X19 + 0x18]
	0x01CAC4A4 STR W0, [X19 + 0x10]
	0x01CAC4A8 B 0x1CAC610
	0x01CAC4AC MOVN W8, 0x0
	0x01CAC4B0 FMOV S8, W31
	0x01CAC4B4 STR W31, [X19 + 0x28]
	0x01CAC4B8 STR W8, [X19 + 0x10]
	0x01CAC4BC B 0x1CAC4D8
	0x01CAC4C0 LDR V8, [X19 + 0x28]
	0x01CAC4C4 FMOV S0, 2
	0x01CAC4C8 MOVN W8, 0x0
	0x01CAC4CC STR W8, [X19 + 0x10]
	0x01CAC4D0 FCMP S8, S0
	0x01CAC4D4 B.PL 0x1CAC5E0
	0x01CAC4D8 MOV X0, X31
	0x01CAC4DC BL 0x3AA481C
	0x01CAC4E0 FADD S0, S8, S0
	0x01CAC4E4 STR S0, [X19 + 0x28]
	0x01CAC4E8 CBZ X21, 0x1CAC620
	0x01CAC4EC LDR X0, [X21 + 0x80]
	0x01CAC4F0 CBZ X0, 0x1CAC620
	0x01CAC4F4 MOV X1, X31
	0x01CAC4F8 BL 0x1C9CA04
	0x01CAC4FC LDR X20, [X21 + 0x80]
	0x01CAC500 TBZ X0, 0x0, 0x1CAC594
	0x01CAC504 LDR X0, [X21 + 0x88]
	0x01CAC508 CBZ X0, 0x1CAC620
	0x01CAC50C MOV X1, X31
	0x01CAC510 BL 0x3AA7AD0
	0x01CAC514 CBZ X20, 0x1CAC620
	0x01CAC518 ADRP X8, 0xFFFFFFFFFEDFD000
	0x01CAC51C LDR V3, [X8 + 0xDE8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x2578000
	008 Move X20, 0x22A3000
	009 Move W8, [X21+1159]
	010 Move X20, [X20+1696]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x22A3000
	017 Move X0, [X0+1736]
	018 Call 0x1B6F7F0
	019 Move X0, 0x22A3000
	020 Move X0, [X0+368]
	021 Call 0x1B6F7F0
	022 Move X0, 0x22A3000
	023 Move X0, [X0+2096]
	024 Call 0x1B6F7F0
	025 Move X0, 0x22A3000
	026 Move X0, [X0+2104]
	027 Call 0x1B6F7F0
	028 Move X0, 0x22A3000
	029 Move X0, [X0+1696]
	030 Call 0x1B6F7F0
	031 Move W8, 1
	032 Move [X21+1159], W8
	033 Move X0, [X20]
	034 Move W20, [X19+100]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1B6F8F8
	039 Move W0, W20
	040 Move X1, X31
	041 Call LeanTween.cancel, X0
	042 Move X8, -18882560
	043 Move V2, [X8+3616]
	044 Move S0, W31
	045 Move S1, 1
	046 Move X0, X31
	047 Call LeanTween.value, V0, V1, V2
	048 Compare X0, 0
	049 JumpIfEqual {103}
	050 Move X20, 0x22A3000
	051 Move X21, 0x22A3000
	052 Move X20, [X20+1736]
	053 Move X21, [X21+2096]
	054 Move W1, 1
	055 Move X2, X31
	056 Call LTDescr.setLoopPingPong, X0, X1
	057 Move X8, [X20]
	058 Move X20, X0
	059 Move X0, X8
	060 Call 0x1B6FA0C
	061 Move X2, [X21]
	062 Move X1, X19
	063 Move X3, X31
	064 Move X21, X0
	065 Call Action`1<Single>..ctor, X0, X1, X2
	066 Compare X20, 0
	067 JumpIfEqual {103}
	068 Move X22, 0x22A3000
	069 Move X23, 0x22A3000
	070 Move X22, [X22+368]
	071 Move X23, [X23+2104]
	072 Move X0, X20
	073 Move X1, X21
	074 Move X2, X31
	075 Call LTDescr.setOnUpdate, X0, X1
	076 Move X8, [X22]
	077 Move X20, X0
	078 Move X0, X8
	079 Call 0x1B6FA0C
	080 Move X2, [X23]
	081 Move X1, X19
	082 Move X3, X31
	083 Move X21, X0
	084 Call Action..ctor, X0, X1, X2
	085 Compare X20, 0
	086 JumpIfEqual {103}
	087 Move X0, X20
	088 Move X1, X21
	089 Move X2, X31
	090 Call LTDescr.setOnComplete, X0, X1
	091 Compare X0, 0
	092 JumpIfEqual {103}
	093 Move X1, X31
	094 Call LTDescr.get_id, X0
	095 Move [X19+100], W0
	096 Move X20, [X31+32]
	097 Move X19, [X31+40]
	098 Move X22, [X31+16]
	099 Move X21, [X31+24]
	100 Move X30, [X31+48]
	101 Move X23, [X31+56]
	102 Return 
	103 Call 0x1B6FA1C

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01CAC640 MOV X1, X31
	0x01CAC644 MOV X19, X0
	0x01CAC648 BL 0x31E99B4
	0x01CAC64C ADRP X0, 0x22A2000
	0x01CAC650 LDR X0, [X0 + 0x8B8]
	0x01CAC654 BL 0x1B6E804
	0x01CAC658 MOV X1, X0
	0x01CAC65C MOV X0, X19
	0x01CAC660 BL 0x1B6E8E8
	0x01CAC664 LDR X0, [X0 + 0x18]
	0x01CAC668 RET
	0x01CAC66C STP X30, X19, [X31 - 0x10]!
	0x01CAC670 LDR X8, [X0 + 0x50]
	0x01CAC674 CBZ X8, 0x1CAC68C
	0x01CAC678 LDR W8, [X8]
	0x01CAC67C CMP W8, 0x0
	0x01CAC680 CSET W0, NE
	0x01CAC684 LDP X30, X19, [X31], #0x10
	0x01CAC688 RET
	0x01CAC68C ADRP X0, 0x22A1000
	0x01CAC690 LDR X0, [X0 + 0x490]
	0x01CAC694 BL 0x1B6E804
	0x01CAC698 BL 0x1B6EA0C
	0x01CAC69C MOV X19, X0
	0x01CAC6A0 ADRP X0, 0x22A2000
	0x01CAC6A4 LDR X0, [X0 + 0x8C0]
	0x01CAC6A8 BL 0x1B6E804
	0x01CAC6AC MOV X1, X0
	0x01CAC6B0 MOV X0, X19
	0x01CAC6B4 MOV X2, X31
	0x01CAC6B8 BL 0x31E7550
	0x01CAC6BC ADRP X0, 0x22A2000
	0x01CAC6C0 LDR X0, [X0 + 0x8C8]
	0x01CAC6C4 BL 0x1B6E804
	0x01CAC6C8 MOV X1, X0
	0x01CAC6CC MOV X0, X19
	0x01CAC6D0 BL 0x1B6E8E8
	0x01CAC6D4 STP X30, X19, [X31 - 0x10]!
	0x01CAC6D8 LDR X8, [X0 + 0x50]
	0x01CAC6DC CBZ X8, 0x1CAC6F0
	0x01CAC6E0 AND W9, W1, 0x1
	0x01CAC6E4 STR W9, [X8]
	0x01CAC6E8 LDP X30, X19, [X31], #0x10
	0x01CAC6EC RET
	0x01CAC6F0 ADRP X0, 0x22A1000

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move S0, W31
	008 Move S1, 1
	009 Move S2, W31
	010 Move S3, 1
	011 Move X0, X31
	012 Call Gizmos.set_color, X0
	013 Move X0, [X19+56]
	014 Compare X0, 0
	015 JumpIfEqual {53}
	016 Move X1, X31
	017 Call Transform.get_position, X0
	018 Move X19, 0x2578000
	019 Move W8, [X19+1110]
	020 Move V8, V0
	021 Move V9, V1
	022 Move V10, V2
	023 Compare W8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, 0x22A2000
	026 Move X0, [X0+1152]
	027 Call 0x1B6F7F0
	028 Move W8, 1
	029 Move [X19+1110], W8
	030 Move X8, 0x22A2000
	031 Move X8, [X8+1152]
	032 Move X9, -18882560
	033 Move V0, [X9+3376]
	034 Move X30, [X31+32]
	035 Move X19, [X31+40]
	036 Move X8, [X8]
	037 Move X0, X31
	038 Move X8, [X8+184]
	039 Move S1, [X8+12]
	040 Move S2, [X8+16]
	041 Move V5, [X8+20]
	042 Multiply S3, S1, S0
	043 Multiply S4, S2, S0
	044 Multiply S5, S5, S0
	045 Move V0, V8
	046 Move V1, V9
	047 Move D9, [X31+16]
	048 Move D8, [X31+24]
	049 Move V2, V10
	050 Move V10, [X31+48]
	051 Call Gizmos.DrawWireCube, X0, X1
	052 Return 
	053 Call 0x1B6FA1C

Method: System.Void TestBuy()

Disassembly:
	0x01CAC6F4 LDR X0, [X0 + 0x490]

ISIL:
	001 Call ItemVendingMachine.TryToBuy, X0
	002 Return 

Method: System.Void TestNext()

Disassembly:
	0x01CAC6F8 BL 0x1B6E804
	0x01CAC6FC BL 0x1B6EA0C

ISIL:
	001 Move W1, 1
	002 Call ItemVendingMachine.SwitchCurrentItem, X0, X1
	003 Return 

Method: System.Void TestPrev()

Disassembly:
	0x01CAC700 MOV X19, X0
	0x01CAC704 ADRP X0, 0x22A2000

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W1, TEMP
	004 Call ItemVendingMachine.SwitchCurrentItem, X0, X1
	005 Return 

Method: System.Void .ctor()

Disassembly:
	0x01CAC708 LDR X0, [X0 + 0x8C0]
	0x01CAC70C BL 0x1B6E804
	0x01CAC710 MOV X1, X0
	0x01CAC714 MOV X0, X19
	0x01CAC718 MOV X2, X31
	0x01CAC71C BL 0x31E7550
	0x01CAC720 ADRP X0, 0x22A2000
	0x01CAC724 LDR X0, [X0 + 0x8D0]
	0x01CAC728 BL 0x1B6E804
	0x01CAC72C MOV X1, X0
	0x01CAC730 MOV X0, X19
	0x01CAC734 BL 0x1B6E8E8
	0x01CAC738 STP X30, X23, [X31 - 0x30]!
	0x01CAC73C STP X22, X21, [X31 + 0x10]
	0x01CAC740 STP X20, X19, [X31 + 0x20]
	0x01CAC744 ADRP X20, 0x2577000
	0x01CAC748 ADRP X21, 0x22A2000
	0x01CAC74C LDRB W8, [X20 + 0x496]
	0x01CAC750 LDR X21, [X21 + 0x8D8]
	0x01CAC754 MOV X19, X0
	0x01CAC758 TBNZ X8, 0x0, 0x1CAC794
	0x01CAC75C ADRP X0, 0x22A2000
	0x01CAC760 LDR X0, [X0 + 0x170]
	0x01CAC764 BL 0x1B6E7F0
	0x01CAC768 ADRP X0, 0x22A2000
	0x01CAC76C LDR X0, [X0 + 0x8D8]
	0x01CAC770 BL 0x1B6E7F0
	0x01CAC774 ADRP X0, 0x22A2000
	0x01CAC778 LDR X0, [X0 + 0x8E0]
	0x01CAC77C BL 0x1B6E7F0
	0x01CAC780 ADRP X0, 0x22A2000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2578000
	007 Move X22, 0x22A3000
	008 Move X20, 0x22A3000
	009 Move W8, [X21+1160]
	010 Move X22, [X22+2144]
	011 Move X20, [X20+2152]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x22A3000
	018 Move X0, [X0+2152]
	019 Call 0x1B6F7F0
	020 Move X0, 0x22A3000
	021 Move X0, [X0+2144]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X21+1160], W8
	025 Move X0, [X22]
	026 Call 0x1B6FA0C
	027 Move X1, [X20]
	028 Move X20, X0
	029 Call Dictionary`2<Object, Object>..ctor, X0
	030 Move [X19+88], X20
	031 Move X0, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X1, X31
	037 Move X30, [X31+48]
	038 Call MonoBehaviour..ctor, X0
	039 Return 

Method: System.Boolean <HandleUserIsDeveloperChanged>b__21_0(AnimalCompany.ItemData item)

Disassembly:
	0x01CAC784 LDR X0, [X0 + 0x8E8]
	0x01CAC788 BL 0x1B6E7F0
	0x01CAC78C MOVZ W8, 0x1
	0x01CAC790 STRB W8, [X20 + 0x496]
	0x01CAC794 LDR X0, [X21]
	0x01CAC798 BL 0x1B6EA0C
	0x01CAC79C MOVZ W1, 0xF0
	0x01CAC7A0 MOVZ W2, 0x140
	0x01CAC7A4 MOVZ W3, 0x10
	0x01CAC7A8 MOV X4, X31
	0x01CAC7AC MOV X20, X0
	0x01CAC7B0 BL 0x3A8A600
	0x01CAC7B4 STR X20, [X19 + 0xB0]
	0x01CAC7B8 LDR X0, [X21]
	0x01CAC7BC BL 0x1B6EA0C
	0x01CAC7C0 MOVZ W1, 0xF0
	0x01CAC7C4 MOVZ W2, 0x140
	0x01CAC7C8 MOV W3, W31
	0x01CAC7CC MOV X4, X31
	0x01CAC7D0 MOV X20, X0
	0x01CAC7D4 BL 0x3A8A600
	0x01CAC7D8 LDR X0, [X19 + 0x88]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2578000
	006 Move W8, [X21+1161]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22A3000
	014 Move X0, [X0+2160]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1161], W8
	018 Move X0, [X20+40]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0x22A3000
	022 Move X8, [X8+2160]
	023 Move X1, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call List`1<Object>.Contains, X0, X1
	030 Return X0
	031 Call 0x1B6FA1C

Method: System.Void <AnimateNotEnoughMoney>b__30_0(System.Single val)

Disassembly:
	0x01CAC7DC STR X20, [X19 + 0xB8]
	0x01CAC7E0 CBZ X0, 0x1CAC8B4
	0x01CAC7E4 LDR X1, [X19 + 0xB0]
	0x01CAC7E8 MOV X2, X31
	0x01CAC7EC BL 0x3A6CE08
	0x01CAC7F0 LDR X0, [X19 + 0x88]
	0x01CAC7F4 CBZ X0, 0x1CAC8B4
	0x01CAC7F8 ADRP X8, 0x22A2000
	0x01CAC7FC LDR X8, [X8 + 0x8E8]
	0x01CAC800 LDR X1, [X19 + 0x98]
	0x01CAC804 MOV X3, X31
	0x01CAC808 LDR X2, [X8]
	0x01CAC80C BL 0x3A6CA5C
	0x01CAC810 LDR X0, [X19 + 0x90]
	0x01CAC814 CBZ X0, 0x1CAC8B4
	0x01CAC818 MOV X1, X31
	0x01CAC81C BL 0x3A7BCC8
	0x01CAC820 CBZ X0, 0x1CAC8B4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {19}
	005 Move X8, [X0]
	006 Move S2, 1
	007 Move S1, W31
	008 Subtract S5, S2, S0
	009 Move X2, [X8+680]
	010 Move X1, [X8+688]
	011 Multiply S4, S0, S1
	012 Multiply S6, S5, S1
	013 Add S3, S5, S0
	014 Add S2, S4, S6
	015 Add S1, S4, S5
	016 Add S0, S6, S0
	017 Move X30, [X31+16]
	018 CallNoReturn X2
	019 Call 0x1B6FA1C

Method: System.Void <AnimateNotEnoughMoney>b__30_1()

Disassembly:
	0x01CAC824 LDR X1, [X19 + 0xB8]
	0x01CAC828 MOV X2, X31
	0x01CAC82C BL 0x3A7D418
	0x01CAC830 LDR X22, [X19 + 0x80]
	0x01CAC834 CBZ X22, 0x1CAC8B4
	0x01CAC838 ADRP X23, 0x22A2000
	0x01CAC83C LDR X23, [X23 + 0x170]
	0x01CAC840 ADRP X21, 0x22A2000
	0x01CAC844 LDR X20, [X22 + 0x190]
	0x01CAC848 LDR X0, [X23]
	0x01CAC84C LDR X21, [X21 + 0x8E0]
	0x01CAC850 BL 0x1B6EA0C
	0x01CAC854 LDR X2, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {14}
	005 Move X8, [X0]
	006 Move S0, W31
	007 Move S1, 1
	008 Move S2, W31
	009 Move X2, [X8+680]
	010 Move X1, [X8+688]
	011 Move S3, 1
	012 Move X30, [X31+16]
	013 CallNoReturn X2
	014 Call 0x1B6FA1C

