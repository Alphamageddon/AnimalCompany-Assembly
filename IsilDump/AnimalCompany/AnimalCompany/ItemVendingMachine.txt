Type: AnimalCompany.ItemVendingMachine

Method: System.Boolean get_IsPurchaseLimited()

Disassembly:
	0x01D9E7BC MOVZ W9, 0x1
	0x01D9E7C0 STRB W9, [X8 + 0x85D]
	0x01D9E7C4 ADRP X8, 0x2357000
	0x01D9E7C8 LDR X8, [X8 + 0x7C8]
	0x01D9E7CC LDR X0, [X8]
	0x01D9E7D0 LDR W8, [X0 + 0xE0]
	0x01D9E7D4 CBNZ W8, 0x1D9E7E8
	0x01D9E7D8 BL 0x1C16DFC
	0x01D9E7DC ADRP X8, 0x2357000
	0x01D9E7E0 LDR X8, [X8 + 0x7C8]
	0x01D9E7E4 LDR X0, [X8]
	0x01D9E7E8 LDR X8, [X0 + 0xB8]
	0x01D9E7EC LDR X8, [X8]
	0x01D9E7F0 CMP X8, 0x0
	0x01D9E7F4 CSEL X9, X25, X8, EQ
	0x01D9E7F8 CBZ X8, 0x1D9E80C
	0x01D9E7FC CBZ X9, 0x1D9EC0C
	0x01D9E800 LDR X25, [X9 + 0x148]
	0x01D9E804 MOV X21, X8
	0x01D9E808 B 0x1D9E810
	0x01D9E80C MOV X25, X31
	0x01D9E810 LDR X0, [X27]
	0x01D9E814 LDR W8, [X0 + 0xE0]
	0x01D9E818 CBNZ W8, 0x1D9E820
	0x01D9E81C BL 0x1C16DFC
	0x01D9E820 MOV X0, X25
	0x01D9E824 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x263B000
	005 Move X20, 0x235A000
	006 Move W8, [X19+2642]
	007 Move X20, [X20+184]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x235A000
	013 Move X0, [X0+184]
	014 Call 0x1C17CF4
	015 Move X0, 0x235A000
	016 Move X0, [X0+192]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+2642], W8
	020 Move X8, [X20]
	021 Move X8, [X8+184]
	022 Move W9, [X8+8]
	023 Compare W9, 0
	024 JumpIfEqual {28}
	025 Move W8, [X8+4]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSET not yet implemented."
	028 Move W0, W31
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

Method: System.Void Awake()

Disassembly:
	0x01D9E828 MOV X2, X31
	0x01D9E82C BL 0x3C354F8
	0x01D9E830 TBZ X0, 0x0, 0x1D9E848
	0x01D9E834 CBZ X25, 0x1D9EBF4
	0x01D9E838 LDRB W8, [X25 + 0x50]
	0x01D9E83C MOV X25, X21
	0x01D9E840 CBNZ W8, 0x1D9E84C
	0x01D9E844 B 0x1D9E870
	0x01D9E848 MOV X25, X21
	0x01D9E84C MOV X0, X24
	0x01D9E850 MOV X1, X31
	0x01D9E854 BL 0x1D880C4
	0x01D9E858 STR X0, [X31 + 0xD8]
	0x01D9E85C ADD X0, X31, 0xD8
	0x01D9E860 MOV X1, X31
	0x01D9E864 BL 0x1E74DE4
	0x01D9E868 TBZ X0, 0x0, 0x1D9E88C
	0x01D9E86C MOV X21, X25
	0x01D9E870 MOV W25, W26
	0x01D9E874 LDR W8, [X28 + 0x18]
	0x01D9E878 ADD X29, X29, 0x1
	0x01D9E87C MOV W26, W25
	0x01D9E880 CMP X29, W8, SXTW
	0x01D9E884 B.LT 0x1D9E660
	0x01D9E888 B 0x1D9E910
	0x01D9E88C LDR X8, [X22 + 0x40]
	0x01D9E890 CBZ X8, 0x1D9E8A8
	0x01D9E894 LDR X8, [X8 + 0x20]
	0x01D9E898 CBZ X8, 0x1D9E8A8
	0x01D9E89C LDR W1, [X8]
	0x01D9E8A0 MOV X21, X25
	0x01D9E8A4 B 0x1D9E8B0
	0x01D9E8A8 MOV X21, X25
	0x01D9E8AC MOV X1, X31
	0x01D9E8B0 LDR W8, [X22 + 0x68]
	0x01D9E8B4 MOVZ W25, 0x1
	0x01D9E8B8 BFM X1, X8, 0x20, 0x1F
	0x01D9E8BC MOVZ W3, 0x1
	0x01D9E8C0 MOV X0, X24
	0x01D9E8C4 MOV W2, W31
	0x01D9E8C8 MOV X4, X31
	0x01D9E8CC MOV X5, X31
	0x01D9E8D0 MOV X6, X31
	0x01D9E8D4 BL 0x1D88C7C
	0x01D9E8D8 B 0x1D9E874
	0x01D9E8DC MOV X1, X31
	0x01D9E8E0 LDR W8, [X22 + 0x68]
	0x01D9E8E4 MOVZ W25, 0x1
	0x01D9E8E8 BFM X1, X8, 0x20, 0x1F
	0x01D9E8EC MOVZ W3, 0x1
	0x01D9E8F0 MOV X0, X24
	0x01D9E8F4 MOV W2, W31
	0x01D9E8F8 MOV X4, X31
	0x01D9E8FC MOV X5, X31
	0x01D9E900 MOV X6, X31
	0x01D9E904 BL 0x1D88C7C
	0x01D9E908 B 0x1D9E874
	0x01D9E90C MOV W25, W31
	0x01D9E910 LDR X24, [X31 + 0x10]
	0x01D9E914 TBNZ X25, 0x0, 0x1D9E978
	0x01D9E918 CBZ X24, 0x1D9EBD4
	0x01D9E91C ADRP X8, 0x2359000
	0x01D9E920 LDR X8, [X8 + 0x130]
	0x01D9E924 ADD X1, X31, 0xE8
	0x01D9E928 MOV X0, X24
	0x01D9E92C LDR X2, [X8]
	0x01D9E930 BL 0x21A4990
	0x01D9E934 TBZ X0, 0x0, 0x1D9E978
	0x01D9E938 LDR X22, [X31 + 0xE8]
	0x01D9E93C MOV X0, X19
	0x01D9E940 MOV X1, X31
	0x01D9E944 BL 0x3C32E90
	0x01D9E948 CBZ X0, 0x1D9EBD4
	0x01D9E94C MOV X1, X31
	0x01D9E950 BL 0x3C3FA04
	0x01D9E954 CBZ X22, 0x1D9EBD4
	0x01D9E958 FMOV S3, 3
	0x01D9E95C FMUL S2, S2, S3
	0x01D9E960 FMUL S1, S1, S3
	0x01D9E964 FMUL S0, S0, S3
	0x01D9E968 MOVZ W1, 0x2
	0x01D9E96C MOV X0, X22
	0x01D9E970 MOV X2, X31
	0x01D9E974 BL 0x3C8F3C4
	0x01D9E978 ADRP X21, 0x2359000
	0x01D9E97C LDR X21, [X21 + 0xB8]
	0x01D9E980 LDR X8, [X21]
	0x01D9E984 LDR X8, [X8 + 0xB8]
	0x01D9E988 LDR W9, [X8 + 0x4]
	0x01D9E98C LDRB W10, [X8 + 0x8]
	0x01D9E990 ADD W9, W9, 0x1
	0x01D9E994 STR W9, [X8 + 0x4]
	0x01D9E998 CBNZ W10, 0x1D9E9CC
	0x01D9E99C MOV X0, X31
	0x01D9E9A0 BL 0x3C3C6C4
	0x01D9E9A4 ADRP X8, 0x2359000
	0x01D9E9A8 LDR X8, [X8 + 0x138]
	0x01D9E9AC ADD X0, X31, 0x58
	0x01D9E9B0 STR X31, [X31 + 0x58]
	0x01D9E9B4 LDR X1, [X8]
	0x01D9E9B8 BL 0x243AC08
	0x01D9E9BC LDR X8, [X21]
	0x01D9E9C0 LDR X9, [X31 + 0x58]
	0x01D9E9C4 LDR X8, [X8 + 0xB8]
	0x01D9E9C8 STR X9, [X8 + 0x8]
	0x01D9E9CC CBZ X24, 0x1D9EBD4
	0x01D9E9D0 MOV X0, X24
	0x01D9E9D4 MOV X1, X31
	0x01D9E9D8 BL 0x3C32E90
	0x01D9E9DC CBZ X0, 0x1D9EBD4
	0x01D9E9E0 MOV X1, X31
	0x01D9E9E4 BL 0x3C3F58C
	0x01D9E9E8 ADRP X21, 0x263A000
	0x01D9E9EC LDRB W8, [X21 + 0x793]
	0x01D9E9F0 MOV V8.16B, V0.16B
	0x01D9E9F4 MOV V9.16B, V1.16B
	0x01D9E9F8 MOV V10.16B, V2.16B
	0x01D9E9FC CBNZ W8, 0x1D9EA14
	0x01D9EA00 ADRP X0, 0x2356000
	0x01D9EA04 LDR X0, [X0 + 0x5A8]
	0x01D9EA08 BL 0x1C16CF4
	0x01D9EA0C MOVZ W8, 0x1
	0x01D9EA10 STRB W8, [X21 + 0x793]
	0x01D9EA14 ADRP X8, 0x2356000
	0x01D9EA18 LDR X8, [X8 + 0x5A8]
	0x01D9EA1C MOVZ W0, 0x22
	0x01D9EA20 MOV V0.16B, V8.16B
	0x01D9EA24 MOV V1.16B, V9.16B
	0x01D9EA28 LDR X8, [X8]
	0x01D9EA2C MOV V2.16B, V10.16B
	0x01D9EA30 MOV X1, X31
	0x01D9EA34 LDR X8, [X8 + 0xB8]
	0x01D9EA38 LDP S3, S4, [X8]
	0x01D9EA3C LDP S5, S6, [X8 + 0x8]
	0x01D9EA40 BL 0x1E04F44
	0x01D9EA44 LDR X21, [X19 + 0x48]
	0x01D9EA48 MOV X0, X19
	0x01D9EA4C MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x263B000
	008 Move X21, 0x235A000
	009 Move W8, [X20+2643]
	010 Move X21, [X21+200]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {39}
	016 Move X0, 0x2359000
	017 Move X0, [X0+1144]
	018 Call 0x1C17CF4
	019 Move X0, 0x2356000
	020 Move X0, [X0+1608]
	021 Call 0x1C17CF4
	022 Move X0, 0x235A000
	023 Move X0, [X0+200]
	024 Call 0x1C17CF4
	025 Move X0, 0x2356000
	026 Move X0, [X0+3504]
	027 Call 0x1C17CF4
	028 Move X0, 0x235A000
	029 Move X0, [X0+208]
	030 Call 0x1C17CF4
	031 Move X0, 0x235A000
	032 Move X0, [X0+216]
	033 Call 0x1C17CF4
	034 Move X0, 0x2356000
	035 Move X0, [X0+3488]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+2643], W8
	039 Move X1, [X21]
	040 Move X0, X19
	041 Call 0x21A4894, X0
	042 Move [X19+88], X0
	043 Compare X0, 0
	044 JumpIfEqual {154}
	045 Move X23, 0x2359000
	046 Move X23, [X23+1144]
	047 Move X20, X0
	048 Move X21, [X0+32]
	049 Move X22, 0x235A000
	050 Move X0, [X23]
	051 Move X22, [X22+208]
	052 Call 0x1C17F10
	053 Move X2, [X22]
	054 Move X1, X19
	055 Move X3, X31
	056 Move X22, X0
	057 Call Action`2<Int32Enum, Int32Enum>..ctor, X0, X1, X2
	058 Move X0, X21
	059 Move X1, X22
	060 Move X2, X31
	061 Call Delegate.Combine, X0, X1
	062 Compare X0, 0
	063 JumpIfEqual {80}
	064 Move X22, [X23]
	065 Move X21, X0
	066 Move X1, X22
	067 Call 0x1C17E00
	068 Compare X0, 0
	069 JumpIfEqual {156}
	070 Move [X20+32], X0
	071 Move X20, [X23]
	072 Move X0, X21
	073 Move X1, X20
	074 Call 0x1C17E00
	075 Compare X0, 0
	076 JumpIfNotEqual {81}
	077 Move X0, X21
	078 Move X1, X20
	079 Call 0x1C181E0
	080 Move [X20+32], X31
	081 Move X8, 0x2356000
	082 Move X8, [X8+3488]
	083 Move X20, 0x235A000
	084 Move X22, 0x2356000
	085 Move X21, 0x2356000
	086 Move X0, [X8]
	087 Move X20, [X20+216]
	088 Move X22, [X22+3504]
	089 Move X21, [X21+1608]
	090 Call 0x1C17F10
	091 Move X2, [X20]
	092 Move X1, X19
	093 Move X3, X31
	094 Move X20, X0
	095 Call ObserverDelegate..ctor, X0, X1, X2
	096 Move X0, [X22]
	097 Move W1, 1
	098 Call 0x1C17D6C
	099 Move X8, [X21]
	100 Move X19, X0
	101 Move W9, [X8+224]
	102 Compare W9, 0
	103 JumpIfNotEqual {106}
	104 Move X0, X8
	105 Call 0x1C17DFC
	106 Move X22, 0x263B000
	107 Move W8, [X22+1927]
	108 Compare W8, 0
	109 JumpIfNotEqual {115}
	110 Move X0, 0x2356000
	111 Move X0, [X0+1608]
	112 Call 0x1C17CF4
	113 Move W8, 1
	114 Move [X22+1927], W8
	115 Move X0, [X21]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {121}
	119 Call 0x1C17DFC
	120 Move X0, [X21]
	121 Move X8, [X0+184]
	122 Move X8, [X8]
	123 Compare X8, 0
	124 JumpIfEqual {154}
	125 Move X8, [X8+184]
	126 Compare X8, 0
	127 JumpIfEqual {154}
	128 Compare X19, 0
	129 JumpIfEqual {154}
	130 Move X21, [X8+152]
	131 Compare X21, 0
	132 JumpIfEqual {139}
	133 Move X8, [X19]
	134 Move X0, X21
	135 Move X1, [X8+64]
	136 Call 0x1C17E00
	137 Compare X0, 0
	138 JumpIfEqual {159}
	139 Move W8, [X19+24]
	140 Compare W8, 0
	141 JumpIfEqual {155}
	142 Move [X19+32], X21
	143 Move X0, X20
	144 Move X1, X19
	145 Move X20, [X31+32]
	146 Move X19, [X31+40]
	147 Move X22, [X31+16]
	148 Move X21, [X31+24]
	149 Move X2, X31
	150 Move X30, [X31+48]
	151 Move X23, [X31+56]
	152 Call App.RegisterObserver, X0, X1
	153 Return 
	154 Call 0x1C17F20
	155 Call 0x1C17F28
	156 Move X0, X21
	157 Move X1, X22
	158 Call 0x1C181E0
	159 Call 0x1C17F44
	160 Move X1, X31
	161 Call 0x1C17DEC

Method: System.Void OnDestroy()

Disassembly:
	0x01D9EA50 BL 0x3C32E90
	0x01D9EA54 CBZ X0, 0x1D9EBD4
	0x01D9EA58 MOV X1, X31
	0x01D9EA5C BL 0x3C3F58C
	0x01D9EA60 FMOV S3, 1
	0x01D9EA64 MOV X0, X21
	0x01D9EA68 MOV X1, X31
	0x01D9EA6C BL 0x1DC15C4
	0x01D9EA70 ADRP X8, 0x2359000
	0x01D9EA74 LDR X8, [X8 + 0x160]
	0x01D9EA78 MOVZ W1, 0x3
	0x01D9EA7C LDR X0, [X8]
	0x01D9EA80 BL 0x1C16D6C
	0x01D9EA84 MOV X19, X0
	0x01D9EA88 MOV X0, X20
	0x01D9EA8C MOV X1, X31
	0x01D9EA90 BL 0x3C389D4
	0x01D9EA94 ADRP X8, 0x2359000
	0x01D9EA98 ADRP X21, 0x2359000
	0x01D9EA9C LDR X8, [X8 + 0x180]
	0x01D9EAA0 LDR X21, [X21 + 0x168]
	0x01D9EAA4 MOV X2, X0
	0x01D9EAA8 ADD X0, X31, 0x90
	0x01D9EAAC LDR X1, [X8]
	0x01D9EAB0 LDR X3, [X21]
	0x01D9EAB4 STP X31, X31, [X31 + 0x90]
	0x01D9EAB8 BL 0x27ABC80
	0x01D9EABC CBZ X19, 0x1D9EBD4
	0x01D9EAC0 LDR W8, [X19 + 0x18]
	0x01D9EAC4 CBZ W8, 0x1D9EBD8
	0x01D9EAC8 LDR V0, [X31 + 0x9]
	0x01D9EACC ADRP X8, 0x2359000
	0x01D9EAD0 LDR X8, [X8 + 0x148]
	0x01D9EAD4 MOVN X9, 0x0
	0x01D9EAD8 STR V0, [X19 + 0x2]
	0x01D9EADC ADD X0, X31, 0x58
	0x01D9EAE0 LDR X8, [X8]
	0x01D9EAE4 MOV X1, X31
	0x01D9EAE8 STP X8, X9, [X31 + 0x58]
	0x01D9EAEC LDR W8, [X20 + 0x28]
	0x01D9EAF0 STR W8, [X31 + 0x68]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x263B000
	008 Move X23, 0x2356000
	009 Move X20, 0x235A000
	010 Move X21, 0x2356000
	011 Move W8, [X22+2644]
	012 Move X23, [X23+3488]
	013 Move X20, [X20+216]
	014 Move X21, [X21+1608]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x2356000
	021 Move X0, [X0+1608]
	022 Call 0x1C17CF4
	023 Move X0, 0x235A000
	024 Move X0, [X0+216]
	025 Call 0x1C17CF4
	026 Move X0, 0x2356000
	027 Move X0, [X0+3488]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+2644], W8
	031 Move X0, [X23]
	032 Call 0x1C17F10
	033 Move X2, [X20]
	034 Move X1, X19
	035 Move X3, X31
	036 Move X20, X0
	037 Call ObserverDelegate..ctor, X0, X1, X2
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X1, X31
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Call App.DeregisterObserver, X0
	052 Return 

Method: System.Void HandleUserIsDeveloperChanged(SpatialSys.ObservableState.StateChangedEventArgs args)

Disassembly:
	0x01D9EAF4 BL 0x33B162C
	0x01D9EAF8 ADRP X8, 0x2359000
	0x01D9EAFC LDR X8, [X8 + 0x170]
	0x01D9EB00 LDR X3, [X21]
	0x01D9EB04 MOV X2, X0
	0x01D9EB08 ADD X0, X31, 0x40
	0x01D9EB0C LDR X1, [X8]
	0x01D9EB10 STP X31, X31, [X31 + 0x40]
	0x01D9EB14 BL 0x27ABC80
	0x01D9EB18 LDR W8, [X19 + 0x18]
	0x01D9EB1C CMP W8, 0x1
	0x01D9EB20 B.LS 0x1D9EBD8
	0x01D9EB24 LDR V0, [X31 + 0x4]
	0x01D9EB28 ADRP X9, 0x2355000
	0x01D9EB2C ADD X1, X31, 0x3C
	0x01D9EB30 STR V0, [X19 + 0x3]
	0x01D9EB34 LDR W8, [X20 + 0x20]
	0x01D9EB38 LDR X9, [X9 + 0x758]
	0x01D9EB3C STR W8, [X31 + 0x3C]
	0x01D9EB40 LDR X0, [X9]
	0x01D9EB44 BL 0x1C16E04
	0x01D9EB48 ADRP X8, 0x2359000
	0x01D9EB4C LDR X8, [X8 + 0x178]
	0x01D9EB50 LDR X3, [X21]
	0x01D9EB54 MOV X2, X0
	0x01D9EB58 ADD X0, X31, 0x20
	0x01D9EB5C LDR X1, [X8]
	0x01D9EB60 STP X31, X31, [X31 + 0x20]
	0x01D9EB64 BL 0x27ABC80
	0x01D9EB68 LDR W8, [X19 + 0x18]
	0x01D9EB6C CMP W8, 0x2
	0x01D9EB70 B.LS 0x1D9EBD8
	0x01D9EB74 LDR V0, [X31 + 0x2]
	0x01D9EB78 ADRP X8, 0x2355000
	0x01D9EB7C STR V0, [X19 + 0x4]
	0x01D9EB80 LDR X8, [X8 + 0xB50]
	0x01D9EB84 LDR X0, [X8]
	0x01D9EB88 LDR W8, [X0 + 0xE0]
	0x01D9EB8C CBNZ W8, 0x1D9EB94
	0x01D9EB90 BL 0x1C16DFC
	0x01D9EB94 ADRP X8, 0x2359000
	0x01D9EB98 LDR X8, [X8 + 0x188]
	0x01D9EB9C MOV X1, X19
	0x01D9EBA0 MOV X2, X31
	0x01D9EBA4 LDR X0, [X8]
	0x01D9EBA8 BL 0x1DD3B5C
	0x01D9EBAC LDP X20, X19, [X31 + 0x150]
	0x01D9EBB0 LDP X22, X21, [X31 + 0x140]
	0x01D9EBB4 LDP X24, X23, [X31 + 0x130]
	0x01D9EBB8 LDP X26, X25, [X31 + 0x120]
	0x01D9EBBC LDP X28, X27, [X31 + 0x110]
	0x01D9EBC0 LDP X29, X30, [X31 + 0x100]
	0x01D9EBC4 LDP D9, D8, [X31 + 0xF0]
	0x01D9EBC8 LDR V10, [X31 + 0xE0]
	0x01D9EBCC ADD X31, X31, 0x160
	0x01D9EBD0 RET
	0x01D9EBD4 BL 0x1C16F20
	0x01D9EBD8 BL 0x1C16F28
	0x01D9EBDC BL 0x1C16F20
	0x01D9EBE0 BL 0x1C16F28
	0x01D9EBE4 BL 0x1C16F20
	0x01D9EBE8 BL 0x1C16F20
	0x01D9EBEC STR X24, [X31 + 0x10]
	0x01D9EBF0 BL 0x1C16F20
	0x01D9EBF4 BL 0x1C16F20
	0x01D9EBF8 AND W21, W26, 0x1
	0x01D9EBFC LDR X24, [X31 + 0x10]
	0x01D9EC00 BL 0x1C16F20
	0x01D9EC04 BL 0x1C16F20
	0x01D9EC08 BL 0x1C16F20
	0x01D9EC0C AND W21, W26, 0x1
	0x01D9EC10 LDR X24, [X31 + 0x10]
	0x01D9EC14 BL 0x1C16F20
	0x01D9EC18 B 0x1D9EC6C
	0x01D9EC1C B 0x1D9EC90
	0x01D9EC20 B 0x1D9EC9C
	0x01D9EC24 B 0x1D9EC9C
	0x01D9EC28 B 0x1D9EC90
	0x01D9EC2C B 0x1D9EC90
	0x01D9EC30 B 0x1D9EC6C
	0x01D9EC34 B 0x1D9EC90
	0x01D9EC38 B 0x1D9EC90
	0x01D9EC3C B 0x1D9EC90
	0x01D9EC40 B 0x1D9EC6C
	0x01D9EC44 B 0x1D9EC90
	0x01D9EC48 B 0x1D9EC90
	0x01D9EC4C B 0x1D9EC90
	0x01D9EC50 B 0x1D9EC90
	0x01D9EC54 STR X24, [X31 + 0x10]
	0x01D9EC58 MOV X22, X0
	0x01D9EC5C B 0x1D9ECA4
	0x01D9EC60 B 0x1D9EC6C
	0x01D9EC64 B 0x1D9EC6C
	0x01D9EC68 B 0x1D9EC9C
	0x01D9EC6C STR X24, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x263B000
	006 Move X20, 0x2356000
	007 Move W8, [X21+2645]
	008 Move X20, [X20+1608]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0x2356000
	015 Move X0, [X0+1608]
	016 Call 0x1C17CF4
	017 Move X0, 0x235A000
	018 Move X0, [X0+224]
	019 Call 0x1C17CF4
	020 Move X0, 0x235A000
	021 Move X0, [X0+232]
	022 Call 0x1C17CF4
	023 Move X0, 0x235A000
	024 Move X0, [X0+240]
	025 Call 0x1C17CF4
	026 Move X0, 0x235A000
	027 Move X0, [X0+248]
	028 Call 0x1C17CF4
	029 Move X0, 0x2357000
	030 Move X0, [X0+376]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+2645], W8
	034 Move X0, [X20]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X21, 0x263B000
	040 Move W8, [X21+1927]
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x2356000
	044 Move X0, [X0+1608]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X21+1927], W8
	048 Move X0, [X20]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {54}
	052 Call 0x1C17DFC
	053 Move X0, [X20]
	054 Move X8, [X0+184]
	055 Move X8, [X8]
	056 Compare X8, 0
	057 JumpIfEqual {120}
	058 Move X8, [X8+184]
	059 Compare X8, 0
	060 JumpIfEqual {120}
	061 Move X9, 0x2357000
	062 Move X9, [X9+376]
	063 Move X0, [X8+152]
	064 Move X1, [X9]
	065 Call 0x2652A74, X0
	066 Move W8, [X19+112]
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {88}
	071 Compare W8, 0
	072 JumpIfNotEqual {115}
	073 Move X0, [X19+32]
	074 Move W8, 1
	075 Move [X19+112], W8
	076 Compare X0, 0
	077 JumpIfEqual {120}
	078 Move X8, 0x235A000
	079 Move X1, [X19+40]
	080 Move X8, [X8+232]
	081 Move X20, [X31+16]
	082 Move X19, [X31+24]
	083 Move X2, [X8]
	084 Move X30, [X31+32]
	085 Move X21, [X31+40]
	086 Call List`1<Object>.AddRange, X0, X1
	087 Return 
	088 Compare W8, 0
	089 JumpIfEqual {115}
	090 Move X8, 0x235A000
	091 Move X20, [X19+32]
	092 Move X8, [X8+248]
	093 Move X0, [X8]
	094 Call 0x1C17F10
	095 Move X8, 0x235A000
	096 Move X8, [X8+224]
	097 Move X1, X19
	098 Move X3, X31
	099 Move X21, X0
	100 Move X2, [X8]
	101 Call Predicate`1<Object>..ctor, X0, X1, X2
	102 Compare X20, 0
	103 JumpIfEqual {120}
	104 Move X8, 0x235A000
	105 Move X8, [X8+240]
	106 Move X0, X20
	107 Move X20, [X31+16]
	108 Move X19, [X31+24]
	109 Move X1, X21
	110 Move X2, [X8]
	111 Move X30, [X31+32]
	112 Move X21, [X31+40]
	113 Call List`1<Object>.RemoveAll, X0, X1
	114 Return 
	115 Move X20, [X31+16]
	116 Move X19, [X31+24]
	117 Move X30, [X31+32]
	118 Move X21, [X31+40]
	119 Return 
	120 Call 0x1C17F20

Method: System.Void Start()

Disassembly:
	0x01D9EC70 B 0x1D9EC9C

ISIL:
No ISIL was generated
Method: System.Void Update()

Disassembly:
	0x01D9EDBC ADRP X0, 0x2359000
	0x01D9EDC0 LDR X0, [X0 + 0x1A8]
	0x01D9EDC4 BL 0x1C16CF4
	0x01D9EDC8 ADRP X0, 0x2359000
	0x01D9EDCC LDR X0, [X0 + 0x1B0]
	0x01D9EDD0 BL 0x1C16CF4
	0x01D9EDD4 ADRP X0, 0x2357000
	0x01D9EDD8 LDR X0, [X0 + 0x5A8]
	0x01D9EDDC BL 0x1C16CF4
	0x01D9EDE0 MOVZ W8, 0x1
	0x01D9EDE4 STRB W8, [X21 + 0xA5C]
	0x01D9EDE8 LDR X0, [X20]
	0x01D9EDEC LDR W20, [X19 + 0x6C]
	0x01D9EDF0 LDR W8, [X0 + 0xE0]
	0x01D9EDF4 CBNZ W8, 0x1D9EDFC
	0x01D9EDF8 BL 0x1C16DFC
	0x01D9EDFC MOV W0, W20
	0x01D9EE00 MOV X1, X31
	0x01D9EE04 BL 0x31AD670
	0x01D9EE08 ADRP X8, 0xFFFFFFFFFED4C000
	0x01D9EE0C LDR V2, [X8 + 0x44C]
	0x01D9EE10 FMOV S0, W31
	0x01D9EE14 FMOV S1, 1
	0x01D9EE18 MOV X0, X31
	0x01D9EE1C BL 0x31B22EC
	0x01D9EE20 CBZ X0, 0x1D9EEE0
	0x01D9EE24 ADRP X20, 0x2357000
	0x01D9EE28 ADRP X21, 0x2359000
	0x01D9EE2C LDR X20, [X20 + 0x5B0]
	0x01D9EE30 LDR X21, [X21 + 0x1A8]
	0x01D9EE34 MOVZ W1, 0x1
	0x01D9EE38 MOV X2, X31
	0x01D9EE3C BL 0x31C7FBC
	0x01D9EE40 LDR X8, [X20]
	0x01D9EE44 MOV X20, X0
	0x01D9EE48 MOV X0, X8
	0x01D9EE4C BL 0x1C16F10
	0x01D9EE50 LDR X2, [X21]
	0x01D9EE54 MOV X1, X19
	0x01D9EE58 MOV X3, X31
	0x01D9EE5C MOV X21, X0
	0x01D9EE60 BL 0x2A6DA40
	0x01D9EE64 CBZ X20, 0x1D9EEE0
	0x01D9EE68 ADRP X22, 0x2356000
	0x01D9EE6C ADRP X23, 0x2359000
	0x01D9EE70 LDR X22, [X22 + 0xE70]
	0x01D9EE74 LDR X23, [X23 + 0x1B0]
	0x01D9EE78 MOV X0, X20
	0x01D9EE7C MOV X1, X21
	0x01D9EE80 MOV X2, X31
	0x01D9EE84 BL 0x31C8070
	0x01D9EE88 LDR X8, [X22]
	0x01D9EE8C MOV X20, X0
	0x01D9EE90 MOV X0, X8
	0x01D9EE94 BL 0x1C16F10
	0x01D9EE98 LDR X2, [X23]
	0x01D9EE9C MOV X1, X19
	0x01D9EEA0 MOV X3, X31
	0x01D9EEA4 MOV X21, X0
	0x01D9EEA8 BL 0x3314368
	0x01D9EEAC CBZ X20, 0x1D9EEE0
	0x01D9EEB0 MOV X0, X20
	0x01D9EEB4 MOV X1, X21
	0x01D9EEB8 MOV X2, X31
	0x01D9EEBC BL 0x31C7FD8
	0x01D9EEC0 CBZ X0, 0x1D9EEE0
	0x01D9EEC4 MOV X1, X31
	0x01D9EEC8 BL 0x31BFBD4
	0x01D9EECC STR W0, [X19 + 0x6C]
	0x01D9EED0 LDP X20, X19, [X31 + 0x20]
	0x01D9EED4 LDP X22, X21, [X31 + 0x10]
	0x01D9EED8 LDP X30, X23, [X31], #0x30
	0x01D9EEDC RET
	0x01D9EEE0 BL 0x1C16F20
	0x01D9EEE4 STR X30, [X31 - 0x30]!
	0x01D9EEE8 STP X22, X21, [X31 + 0x10]
	0x01D9EEEC STP X20, X19, [X31 + 0x20]
	0x01D9EEF0 ADRP X21, 0x263A000
	0x01D9EEF4 LDRB W8, [X21 + 0xA5B]
	0x01D9EEF8 MOV X19, X1
	0x01D9EEFC MOV X20, X0
	0x01D9EF00 TBNZ X8, 0x0, 0x1D9EF48
	0x01D9EF04 ADRP X0, 0x2359000
	0x01D9EF08 LDR X0, [X0 + 0x1B8]
	0x01D9EF0C BL 0x1C16CF4
	0x01D9EF10 ADRP X0, 0x2359000
	0x01D9EF14 LDR X0, [X0 + 0x1C0]
	0x01D9EF18 BL 0x1C16CF4
	0x01D9EF1C ADRP X0, 0x2359000
	0x01D9EF20 LDR X0, [X0 + 0x1C8]
	0x01D9EF24 BL 0x1C16CF4
	0x01D9EF28 ADRP X0, 0x2359000
	0x01D9EF2C LDR X0, [X0 + 0x1D0]
	0x01D9EF30 BL 0x1C16CF4
	0x01D9EF34 ADRP X0, 0x2355000
	0x01D9EF38 LDR X0, [X0 + 0x598]
	0x01D9EF3C BL 0x1C16CF4
	0x01D9EF40 MOVZ W8, 0x1
	0x01D9EF44 STRB W8, [X21 + 0xA5B]
	0x01D9EF48 LDR X0, [X20 + 0x60]
	0x01D9EF4C CBZ X0, 0x1D9F000
	0x01D9EF50 ADRP X8, 0x2359000
	0x01D9EF54 LDR X8, [X8 + 0x1C0]
	0x01D9EF58 MOV X1, X19
	0x01D9EF5C LDR X2, [X8]
	0x01D9EF60 BL 0x2AA528C
	0x01D9EF64 TBNZ X0, 0x0, 0x1D9EFD8
	0x01D9EF68 CBZ X19, 0x1D9F000
	0x01D9EF6C ADRP X8, 0x2355000
	0x01D9EF70 LDR X8, [X8 + 0x598]
	0x01D9EF74 LDR X21, [X19 + 0x30]
	0x01D9EF78 LDR X22, [X20 + 0x40]
	0x01D9EF7C LDR X0, [X8]
	0x01D9EF80 LDR W8, [X0 + 0xE0]
	0x01D9EF84 CBNZ W8, 0x1D9EF8C
	0x01D9EF88 BL 0x1C16DFC
	0x01D9EF8C ADRP X8, 0x2359000
	0x01D9EF90 LDR X8, [X8 + 0x1D0]
	0x01D9EF94 MOV X0, X21
	0x01D9EF98 MOV X1, X22
	0x01D9EF9C LDR X2, [X8]
	0x01D9EFA0 BL 0x222D488
	0x01D9EFA4 CBZ X0, 0x1D9F000
	0x01D9EFA8 MOV W1, W31
	0x01D9EFAC MOV X2, X31

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x263B000
	009 Move W8, [X20+2646]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x235A000
	016 Move X0, [X0+184]
	017 Call 0x1C17CF4
	018 Move X0, 0x235A000
	019 Move X0, [X0+280]
	020 Call 0x1C17CF4
	021 Move X0, 0x235A000
	022 Move X0, [X0+288]
	023 Call 0x1C17CF4
	024 Move X0, 0x235A000
	025 Move X0, [X0+296]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2646], W8
	029 Move X21, 0x263B000
	030 Move W8, [X21+1926]
	031 Move X20, [X19+64]
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0x2356000
	035 Move X0, [X0+1440]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X21+1926], W8
	039 Move X8, 0x2356000
	040 Move X8, [X8+1440]
	041 Move X0, X31
	042 Move X8, [X8]
	043 Move X8, [X8+184]
	044 Move V8, [X8+24]
	045 Move V9, [X8+32]
	046 Call Time.get_deltaTime
	047 Compare X20, 0
	048 JumpIfEqual {143}
	049 Move S1, 25
	050 Move V2, 0
	051 Multiply S1, S9, S1
	052 NotImplemented "Instruction INVALID not yet implemented."
	053 Multiply S2, S1, S0
	054 NotImplemented "Instruction INVALID not yet implemented."
	055 Move S1, V0.S[1]
	056 Move X0, X20
	057 Move X1, X31
	058 Call Transform.Rotate, X0, X1
	059 Move X0, X19
	060 Call ItemVendingMachine.UpdateItemLimitCheck, X0
	061 Call ItemVendingMachine.get_IsPurchaseLimited
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {135}
	066 Move X0, X31
	067 Call Time.get_time
	068 Move X8, 0x235A000
	069 Move X8, [X8+184]
	070 Move X9, 0x235A000
	071 Move V8, V0
	072 Move X8, [X8]
	073 Move X8, [X8+184]
	074 Move X9, [X9+280]
	075 Add X0, X8, 8
	076 Move X1, [X9]
	077 Call Nullable`1<Single>.get_Value, X0
	078 Move X20, 0x263B000
	079 Move W8, [X20+2750]
	080 Move V9, V0
	081 Compare W8, 0
	082 JumpIfNotEqual {88}
	083 Move X0, 0x2356000
	084 Move X0, [X0+1448]
	085 Call 0x1C17CF4
	086 Move W8, 1
	087 Move [X20+2750], W8
	088 Move X8, 0x2356000
	089 Move X8, [X8+1448]
	090 Subtract S8, S8, S9
	091 Move X0, [X8]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X12, 0x235A000
	097 Move W10, 0x7F800000
	098 Move X12, [X12+288]
	099 NotImplemented "Instruction FRINTP not yet implemented."
	100 NotImplemented "Instruction FCVTPS not yet implemented."
	101 Move W9, 60
	102 Move W11, 60
	103 Move S1, W10
	104 NotImplemented "Instruction MOVK not yet implemented."
	105 Subtract W8, W9, W8
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 NotImplemented "Instruction CSEL not yet implemented."
	108 Move [X31+12], W8
	109 Move X1, [X12]
	110 Move X20, [X19+48]
	111 Add X0, X31, 12
	112 Move X2, X31
	113 Call Int32.ToString, X0, X1
	114 Move X8, 0x235A000
	115 Move X8, [X8+296]
	116 Move X1, X0
	117 Move X2, X31
	118 Move X8, [X8]
	119 Move X0, X8
	120 Call String.Concat, X0, X1
	121 Compare X20, 0
	122 JumpIfEqual {143}
	123 Move X8, [X20]
	124 Move X1, X0
	125 Move X0, X20
	126 Move X9, [X8+1368]
	127 Move X2, [X8+1376]
	128 NotImplemented "Instruction BLR not yet implemented."
	129 Move X0, [X19+56]
	130 Compare X0, 0
	131 JumpIfEqual {143}
	132 Move W1, W31
	133 Move X2, X31
	134 Call Behaviour.set_enabled, X0, X1
	135 Move X20, [X31+48]
	136 Move X19, [X31+56]
	137 Move X30, [X31+32]
	138 Move X21, [X31+40]
	139 Move D9, [X31+16]
	140 Move D8, [X31+24]
	141 Add X31, X31, 64
	142 Return 
	143 Call 0x1C17F20

Method: System.Void UpdateItemLimitCheck()

Disassembly:
	0x01D9EFB0 MOV X21, X0
	0x01D9EFB4 BL 0x3C357B4
	0x01D9EFB8 LDR X0, [X20 + 0x60]
	0x01D9EFBC CBZ X0, 0x1D9F000
	0x01D9EFC0 ADRP X8, 0x2359000
	0x01D9EFC4 LDR X8, [X8 + 0x1B8]
	0x01D9EFC8 MOV X1, X19
	0x01D9EFCC MOV X2, X21
	0x01D9EFD0 LDR X3, [X8]
	0x01D9EFD4 BL 0x2AA5098
	0x01D9EFD8 LDR X0, [X20 + 0x60]
	0x01D9EFDC CBZ X0, 0x1D9F000
	0x01D9EFE0 ADRP X8, 0x2359000
	0x01D9EFE4 LDR X8, [X8 + 0x1C8]
	0x01D9EFE8 MOV X1, X19
	0x01D9EFEC LDP X20, X19, [X31 + 0x20]
	0x01D9EFF0 LDP X22, X21, [X31 + 0x10]
	0x01D9EFF4 LDR X2, [X8]
	0x01D9EFF8 LDR X30, [X31], #0x30
	0x01D9EFFC B 0x2AA5018
	0x01D9F000 BL 0x1C16F20
	0x01D9F004 STR D10, [X31 - 0x30]!
	0x01D9F008 STP D9, D8, [X31 + 0x10]
	0x01D9F00C STP X30, X19, [X31 + 0x20]
	0x01D9F010 MOV X19, X0
	0x01D9F014 FMOV S0, W31
	0x01D9F018 FMOV S1, 1
	0x01D9F01C FMOV S2, W31
	0x01D9F020 FMOV S3, 1
	0x01D9F024 MOV X0, X31
	0x01D9F028 BL 0x3C0D030
	0x01D9F02C LDR X0, [X19 + 0x40]
	0x01D9F030 CBZ X0, 0x1D9F0B4
	0x01D9F034 MOV X1, X31
	0x01D9F038 BL 0x3C3F58C
	0x01D9F03C ADRP X19, 0x2639000
	0x01D9F040 LDRB W8, [X19 + 0x85B]
	0x01D9F044 MOV V8.16B, V0.16B
	0x01D9F048 MOV V9.16B, V1.16B
	0x01D9F04C MOV V10.16B, V2.16B
	0x01D9F050 CBNZ W8, 0x1D9F068
	0x01D9F054 ADRP X0, 0x2354000
	0x01D9F058 LDR X0, [X0 + 0x5A0]
	0x01D9F05C BL 0x1C16CF4
	0x01D9F060 MOVZ W8, 0x1
	0x01D9F064 STRB W8, [X19 + 0x85B]
	0x01D9F068 ADRP X8, 0x2354000
	0x01D9F06C LDR X8, [X8 + 0x5A0]
	0x01D9F070 ADRP X9, 0xFFFFFFFFFED4B000
	0x01D9F074 LDR V0, [X9 + 0x35C]
	0x01D9F078 LDP X30, X19, [X31 + 0x20]
	0x01D9F07C LDR X8, [X8]
	0x01D9F080 MOV X0, X31
	0x01D9F084 LDR X8, [X8 + 0xB8]
	0x01D9F088 LDP S1, S2, [X8 + 0xC]
	0x01D9F08C LDR V5, [X8 + 0x14]
	0x01D9F090 FMUL S3, S1, S0
	0x01D9F094 FMUL S4, S2, S0
	0x01D9F098 FMUL S5, S5, S0
	0x01D9F09C MOV V0.16B, V8.16B
	0x01D9F0A0 MOV V1.16B, V9.16B

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x263B000
	007 Move X20, 0x235A000
	008 Move W8, [X21+2647]
	009 Move X20, [X20+184]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x235A000
	016 Move X0, [X0+184]
	017 Call 0x1C17CF4
	018 Move X0, 0x235A000
	019 Move X0, [X0+192]
	020 Call 0x1C17CF4
	021 Move X0, 0x235A000
	022 Move X0, [X0+280]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2647], W8
	026 Move X0, X31
	027 Call Time.get_frameCount
	028 Move X8, [X20]
	029 Move X8, [X8+184]
	030 Move W9, [X8]
	031 Subtract W9, W0, W9
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W8, [X8+8]
	034 Compare W8, 0
	035 JumpIfEqual {62}
	036 Move X0, X31
	037 Call Time.get_time
	038 Move X8, [X20]
	039 Move X9, 0x2359000
	040 Move V8, V0
	041 Move X8, [X8+184]
	042 Move X9, [X9+280]
	043 Add X0, X8, 8
	044 Move X1, [X9]
	045 Call Nullable`1<Single>.get_Value, X0
	046 Move W8, 0x42700000
	047 Subtract S0, S8, S0
	048 Move S1, W8
	049 NotImplemented "Instruction FCMP not yet implemented."
	050 Move X8, [X20]
	051 Move X0, X19
	052 Move X9, [X8+184]
	053 Move [X9+8], X31
	054 Move X8, [X8+184]
	055 Move [X8+4], W31
	056 Call ItemVendingMachine.UpdateCurrentPreview, X0
	057 Move X0, X31
	058 Call Time.get_frameCount
	059 Move X8, [X20]
	060 Move X8, [X8+184]
	061 Move [X8], W0
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X30, [X31+16]
	065 Move X21, [X31+24]
	066 Move V8, [X31+48]
	067 Return 

Method: System.Void HandleKeyInput(UnityEngine.KeyCode keyCode, AnimalCompany.TerminalKeyType keyType)

Disassembly:
	0x01D9F0A4 LDP D9, D8, [X31 + 0x10]
	0x01D9F0A8 MOV V2.16B, V10.16B
	0x01D9F0AC LDR V10, [X31], #0x30
	0x01D9F0B0 B 0x3C0CCD8
	0x01D9F0B4 BL 0x1C16F20
	0x01D9F0B8 B 0x1D9E13C
	0x01D9F0BC MOVZ W1, 0x1
	0x01D9F0C0 B 0x1D9E0D4
	0x01D9F0C4 MOVN W1, 0x0
	0x01D9F0C8 B 0x1D9E0D4
	0x01D9F0CC STR X30, [X31 - 0x30]!
	0x01D9F0D0 STP X22, X21, [X31 + 0x10]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move TEMP, 0
	005 Not TEMP
	006 Move W1, TEMP
	007 Call ItemVendingMachine.TryToBuy, X0
	008 Return 
	009 Move W1, 1
	010 Return 

Method: System.Void SwitchCurrentItem(System.Int32 incr)

Disassembly:
	0x01D9F0D4 STP X20, X19, [X31 + 0x20]
	0x01D9F0D8 ADRP X21, 0x2639000
	0x01D9F0DC ADRP X22, 0x2358000
	0x01D9F0E0 ADRP X20, 0x2358000
	0x01D9F0E4 LDRB W8, [X21 + 0xA5D]
	0x01D9F0E8 LDR X22, [X22 + 0x1D8]
	0x01D9F0EC LDR X20, [X20 + 0x1E0]
	0x01D9F0F0 MOV X19, X0
	0x01D9F0F4 TBNZ X8, 0x0, 0x1D9F118
	0x01D9F0F8 ADRP X0, 0x2358000
	0x01D9F0FC LDR X0, [X0 + 0x1E0]
	0x01D9F100 BL 0x1C16CF4
	0x01D9F104 ADRP X0, 0x2358000
	0x01D9F108 LDR X0, [X0 + 0x1D8]
	0x01D9F10C BL 0x1C16CF4
	0x01D9F110 MOVZ W8, 0x1
	0x01D9F114 STRB W8, [X21 + 0xA5D]
	0x01D9F118 LDR X0, [X22]
	0x01D9F11C BL 0x1C16F10
	0x01D9F120 LDR X1, [X20]
	0x01D9F124 MOV X20, X0
	0x01D9F128 BL 0x2AA4804
	0x01D9F12C STR X20, [X19 + 0x60]
	0x01D9F130 MOV X0, X19
	0x01D9F134 LDP X20, X19, [X31 + 0x20]
	0x01D9F138 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x263A000
	006 Move W8, [X21+2648]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2359000
	014 Move X0, [X0+256]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2648], W8
	018 Move X8, [X19+32]
	019 Compare X8, 0
	020 JumpIfEqual {35}
	021 Move W8, [X8+24]
	022 Move W9, [X19+104]
	023 Move X0, X19
	024 Add W10, W8, W20
	025 Add W9, W10, W9
	026 NotImplemented "Instruction SDIV not yet implemented."
	027 NotImplemented "Instruction MSUB not yet implemented."
	028 Move [X19+104], W8
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call ItemVendingMachine.UpdateCurrentPreview, X0
	034 Return 
	035 Call 0x1C17F20

Method: System.Void TryToBuy()

Disassembly:
	0x01D9F13C MOV X1, X31
	0x01D9F140 LDR X30, [X31], #0x30
	0x01D9F144 B 0x3C36C30
	0x01D9F148 STP X30, X21, [X31 - 0x20]!
	0x01D9F14C STP X20, X19, [X31 + 0x10]
	0x01D9F150 ADRP X21, 0x2639000
	0x01D9F154 LDRB W8, [X21 + 0xA5E]
	0x01D9F158 MOV X19, X1
	0x01D9F15C MOV X20, X0
	0x01D9F160 TBNZ X8, 0x0, 0x1D9F178
	0x01D9F164 ADRP X0, 0x2358000
	0x01D9F168 LDR X0, [X0 + 0x1E8]
	0x01D9F16C BL 0x1C16CF4
	0x01D9F170 MOVZ W8, 0x1
	0x01D9F174 STRB W8, [X21 + 0xA5E]
	0x01D9F178 LDR X0, [X20 + 0x28]
	0x01D9F17C CBZ X0, 0x1D9F19C
	0x01D9F180 ADRP X8, 0x2358000
	0x01D9F184 LDR X8, [X8 + 0x1E8]
	0x01D9F188 MOV X1, X19
	0x01D9F18C LDP X20, X19, [X31 + 0x10]
	0x01D9F190 LDR X2, [X8]
	0x01D9F194 LDP X30, X21, [X31], #0x20
	0x01D9F198 B 0x301C318
	0x01D9F19C BL 0x1C16F20
	0x01D9F1A0 STR X30, [X31 - 0x10]!
	0x01D9F1A4 LDR X0, [X0 + 0x30]
	0x01D9F1A8 CBZ X0, 0x1D9F1E4
	0x01D9F1AC LDR X8, [X0]
	0x01D9F1B0 FMOV S2, 1
	0x01D9F1B4 FMOV S1, W31
	0x01D9F1B8 FSUB S5, S2, S0
	0x01D9F1BC LDR X2, [X8 + 0x2A8]
	0x01D9F1C0 LDR X1, [X8 + 0x2B0]
	0x01D9F1C4 FMUL S4, S0, S1
	0x01D9F1C8 FMUL S6, S5, S1
	0x01D9F1CC FADD S3, S5, S0
	0x01D9F1D0 FADD S2, S4, S6
	0x01D9F1D4 FADD S1, S4, S5
	0x01D9F1D8 FADD S0, S6, S0
	0x01D9F1DC LDR X30, [X31], #0x10
	0x01D9F1E0 BR X2
	0x01D9F1E4 BL 0x1C16F20
	0x01D9F1E8 STR X30, [X31 - 0x10]!
	0x01D9F1EC LDR X0, [X0 + 0x30]
	0x01D9F1F0 CBZ X0, 0x1D9F218
	0x01D9F1F4 LDR X8, [X0]
	0x01D9F1F8 FMOV S0, W31
	0x01D9F1FC FMOV S1, 1
	0x01D9F200 FMOV S2, W31
	0x01D9F204 LDR X2, [X8 + 0x2A8]
	0x01D9F208 LDR X1, [X8 + 0x2B0]
	0x01D9F20C FMOV S3, 1
	0x01D9F210 LDR X30, [X31], #0x10
	0x01D9F214 BR X2
	0x01D9F218 BL 0x1C16F20
	0x01D9F21C STR X30, [X31 - 0x20]!
	0x01D9F220 STP X20, X19, [X31 + 0x10]
	0x01D9F224 ADRP X19, 0x2639000
	0x01D9F228 ADRP X20, 0x2358000
	0x01D9F22C LDRB W8, [X19 + 0xA5F]
	0x01D9F230 LDR X20, [X20 + 0x158]
	0x01D9F234 TBNZ X8, 0x0, 0x1D9F24C
	0x01D9F238 ADRP X0, 0x2358000
	0x01D9F23C LDR X0, [X0 + 0x158]
	0x01D9F240 BL 0x1C16CF4
	0x01D9F244 MOVZ W8, 0x1
	0x01D9F248 STRB W8, [X19 + 0xA5F]
	0x01D9F24C LDR X0, [X20]
	0x01D9F250 BL 0x1C16F10
	0x01D9F254 MOV X1, X31
	0x01D9F258 MOV X19, X0
	0x01D9F25C BL 0x33BDD8C
	0x01D9F260 LDR X8, [X20]
	0x01D9F264 LDR X8, [X8 + 0xB8]
	0x01D9F268 STR X19, [X8]
	0x01D9F26C LDP X20, X19, [X31 + 0x10]
	0x01D9F270 LDR X30, [X31], #0x20
	0x01D9F274 RET
	0x01D9F278 MOV X1, X31
	0x01D9F27C B 0x33BDD8C
	0x01D9F280 STR X30, [X31 - 0x20]!
	0x01D9F284 STP X20, X19, [X31 + 0x10]
	0x01D9F288 ADRP X20, 0x2639000
	0x01D9F28C LDRB W8, [X20 + 0xA60]
	0x01D9F290 MOV X19, X2
	0x01D9F294 TBNZ X8, 0x0, 0x1D9F2B8
	0x01D9F298 ADRP X0, 0x2357000
	0x01D9F29C LDR X0, [X0 + 0xBB8]
	0x01D9F2A0 BL 0x1C16CF4
	0x01D9F2A4 ADRP X0, 0x2354000
	0x01D9F2A8 LDR X0, [X0 + 0x598]
	0x01D9F2AC BL 0x1C16CF4
	0x01D9F2B0 MOVZ W8, 0x1
	0x01D9F2B4 STRB W8, [X20 + 0xA60]
	0x01D9F2B8 CBZ X19, 0x1D9F31C
	0x01D9F2BC ADRP X8, 0x2357000
	0x01D9F2C0 LDR X8, [X8 + 0xBB8]
	0x01D9F2C4 ADRP X20, 0x2354000
	0x01D9F2C8 MOV X0, X19
	0x01D9F2CC LDR X1, [X8]
	0x01D9F2D0 LDR X20, [X20 + 0x598]
	0x01D9F2D4 BL 0x21A3894
	0x01D9F2D8 LDR X8, [X20]
	0x01D9F2DC MOV X19, X0
	0x01D9F2E0 LDR W9, [X8 + 0xE0]
	0x01D9F2E4 CBNZ W9, 0x1D9F2F0
	0x01D9F2E8 MOV X0, X8
	0x01D9F2EC BL 0x1C16DFC
	0x01D9F2F0 MOV X0, X19
	0x01D9F2F4 MOV X1, X31
	0x01D9F2F8 MOV X2, X31
	0x01D9F2FC BL 0x3C354F8
	0x01D9F300 TBZ X0, 0x0, 0x1D9F310
	0x01D9F304 CBZ X19, 0x1D9F31C
	0x01D9F308 MOVZ W8, 0x1
	0x01D9F30C STRB W8, [X19 + 0x148]
	0x01D9F310 LDP X20, X19, [X31 + 0x10]
	0x01D9F314 LDR X30, [X31], #0x20
	0x01D9F318 RET
	0x01D9F31C BL 0x1C16F20
	0x01D9F320 STR X30, [X31 - 0x10]!
	0x01D9F324 LDR X0, [X0 + 0x88]
	0x01D9F328 CBZ X0, 0x1D9F338
	0x01D9F32C MOV X1, X31
	0x01D9F330 LDR X30, [X31], #0x10
	0x01D9F334 B 0x3C3FA04
	0x01D9F338 BL 0x1C16F20
	0x01D9F33C STP X30, X23, [X31 - 0x30]!
	0x01D9F340 STP X22, X21, [X31 + 0x10]
	0x01D9F344 STP X20, X19, [X31 + 0x20]
	0x01D9F348 ADRP X20, 0x2639000
	0x01D9F34C LDRB W8, [X20 + 0xA61]
	0x01D9F350 MOV X19, X0
	0x01D9F354 TBNZ X8, 0x0, 0x1D9F378
	0x01D9F358 ADRP X0, 0x2355000
	0x01D9F35C LDR X0, [X0 + 0xE70]
	0x01D9F360 BL 0x1C16CF4
	0x01D9F364 ADRP X0, 0x2358000
	0x01D9F368 LDR X0, [X0 + 0x1F0]
	0x01D9F36C BL 0x1C16CF4
	0x01D9F370 MOVZ W8, 0x1
	0x01D9F374 STRB W8, [X20 + 0xA61]
	0x01D9F378 LDR X22, [X19 + 0x80]
	0x01D9F37C CBZ X22, 0x1D9F404
	0x01D9F380 ADRP X23, 0x2355000
	0x01D9F384 LDR X23, [X23 + 0xE70]
	0x01D9F388 ADRP X21, 0x2358000
	0x01D9F38C LDR X20, [X22 + 0x1D0]
	0x01D9F390 LDR X0, [X23]
	0x01D9F394 LDR X21, [X21 + 0x1F0]
	0x01D9F398 BL 0x1C16F10
	0x01D9F39C LDR X2, [X21]
	0x01D9F3A0 MOV X1, X19
	0x01D9F3A4 MOV X3, X31
	0x01D9F3A8 MOV X21, X0
	0x01D9F3AC BL 0x3314368
	0x01D9F3B0 MOV X0, X20
	0x01D9F3B4 MOV X1, X21
	0x01D9F3B8 MOV X2, X31
	0x01D9F3BC BL 0x33C0DE4
	0x01D9F3C0 CBZ X0, 0x1D9F3E8
	0x01D9F3C4 LDR X1, [X23]
	0x01D9F3C8 LDR X8, [X0]
	0x01D9F3CC CMP X8, X1
	0x01D9F3D0 B.NE 0x1D9F3E4
	0x01D9F3D4 STR X0, [X22 + 0x1D0]
	0x01D9F3D8 LDR X8, [X0]
	0x01D9F3DC CMP X8, X1
	0x01D9F3E0 B.EQ 0x1D9F3EC
	0x01D9F3E4 BL 0x1C171E0
	0x01D9F3E8 STR X0, [X22 + 0x1D0]
	0x01D9F3EC MOV X0, X19
	0x01D9F3F0 LDP X20, X19, [X31 + 0x20]
	0x01D9F3F4 LDP X22, X21, [X31 + 0x10]
	0x01D9F3F8 MOV W1, W31
	0x01D9F3FC LDP X30, X23, [X31], #0x30
	0x01D9F400 B 0x1D9F408
	0x01D9F404 BL 0x1C16F20
	0x01D9F408 STP X30, X23, [X31 - 0x30]!
	0x01D9F40C STP X22, X21, [X31 + 0x10]
	0x01D9F410 STP X20, X19, [X31 + 0x20]
	0x01D9F414 ADRP X21, 0x2639000
	0x01D9F418 LDRB W8, [X21 + 0xA66]
	0x01D9F41C MOV W19, W1
	0x01D9F420 MOV X20, X0
	0x01D9F424 TBNZ X8, 0x0, 0x1D9F43C
	0x01D9F428 ADRP X0, 0x2358000
	0x01D9F42C LDR X0, [X0 + 0x1F8]
	0x01D9F430 BL 0x1C16CF4
	0x01D9F434 MOVZ W8, 0x1
	0x01D9F438 STRB W8, [X21 + 0xA66]
	0x01D9F43C LDR X0, [X20 + 0x90]
	0x01D9F440 CBZ X0, 0x1D9F510
	0x01D9F444 ADRP X23, 0x2358000
	0x01D9F448 LDR X23, [X23 + 0x1F8]
	0x01D9F44C MOV X1, X31
	0x01D9F450 BL 0x3C1341C
	0x01D9F454 LDR X8, [X23]
	0x01D9F458 MOV X21, X0
	0x01D9F45C LDR W9, [X8 + 0xE0]
	0x01D9F460 CBZ W9, 0x1D9F470
	0x01D9F464 LDR X8, [X8 + 0xB8]
	0x01D9F468 LDR W22, [X8]
	0x01D9F46C B 0x1D9F498
	0x01D9F470 MOV X0, X8
	0x01D9F474 BL 0x1C16DFC
	0x01D9F478 LDR X0, [X23]
	0x01D9F47C LDR X8, [X0 + 0xB8]
	0x01D9F480 LDR W9, [X0 + 0xE0]
	0x01D9F484 LDR W22, [X8]
	0x01D9F488 CBNZ W9, 0x1D9F498
	0x01D9F48C BL 0x1C16DFC
	0x01D9F490 LDR X8, [X23]
	0x01D9F494 LDR X8, [X8 + 0xB8]
	0x01D9F498 CBZ X21, 0x1D9F510
	0x01D9F49C ANDS W31, W19, 0x1
	0x01D9F4A0 MOVZ W9, 0x24
	0x01D9F4A4 MOVZ W10, 0x14
	0x01D9F4A8 MOVZ W11, 0x20
	0x01D9F4AC MOVZ W12, 0x10
	0x01D9F4B0 MOVZ W13, 0x1C
	0x01D9F4B4 CSEL X9, X10, X9, NE
	0x01D9F4B8 MOVZ W10, 0xC
	0x01D9F4BC CSEL X11, X12, X11, NE
	0x01D9F4C0 MOVZ W12, 0x18
	0x01D9F4C4 CSEL X10, X10, X13, NE
	0x01D9F4C8 MOVZ W13, 0x8
	0x01D9F4CC CSEL X12, X13, X12, NE
	0x01D9F4D0 LDR V3, [X8, X9, LSL]
	0x01D9F4D4 LDR V2, [X8, X11, LSL]
	0x01D9F4D8 LDR V1, [X8, X10, LSL]
	0x01D9F4DC LDR V0, [X8, X12, LSL]
	0x01D9F4E0 MOV X0, X21
	0x01D9F4E4 MOV W1, W22
	0x01D9F4E8 MOV X2, X31
	0x01D9F4EC BL 0x3C14988
	0x01D9F4F0 LDR X0, [X20 + 0x98]
	0x01D9F4F4 CBZ X0, 0x1D9F510
	0x01D9F4F8 AND W1, W19, 0x1
	0x01D9F4FC LDP X20, X19, [X31 + 0x20]
	0x01D9F500 LDP X22, X21, [X31 + 0x10]
	0x01D9F504 MOV X2, X31
	0x01D9F508 LDP X30, X23, [X31], #0x30
	0x01D9F50C B 0x3C13034
	0x01D9F510 BL 0x1C16F20
	0x01D9F514 STP X30, X23, [X31 - 0x30]!
	0x01D9F518 STP X22, X21, [X31 + 0x10]
	0x01D9F51C STP X20, X19, [X31 + 0x20]
	0x01D9F520 ADRP X20, 0x2639000
	0x01D9F524 ADRP X21, 0x2357000
	0x01D9F528 LDRB W8, [X20 + 0xA62]
	0x01D9F52C LDR X21, [X21 + 0xA78]
	0x01D9F530 MOV X19, X0
	0x01D9F534 TBNZ X8, 0x0, 0x1D9F564
	0x01D9F538 ADRP X0, 0x2355000
	0x01D9F53C LDR X0, [X0 + 0xE70]
	0x01D9F540 BL 0x1C16CF4
	0x01D9F544 ADRP X0, 0x2358000
	0x01D9F548 LDR X0, [X0 + 0x1F0]
	0x01D9F54C BL 0x1C16CF4
	0x01D9F550 ADRP X0, 0x2357000
	0x01D9F554 LDR X0, [X0 + 0xA78]
	0x01D9F558 BL 0x1C16CF4
	0x01D9F55C MOVZ W8, 0x1
	0x01D9F560 STRB W8, [X20 + 0xA62]
	0x01D9F564 LDR X0, [X21]
	0x01D9F568 LDR W8, [X0 + 0xE0]
	0x01D9F56C CBNZ W8, 0x1D9F574
	0x01D9F570 BL 0x1C16DFC
	0x01D9F574 CBZ X19, 0x1D9F608
	0x01D9F578 LDR W8, [X19 + 0x30]
	0x01D9F57C LDR X22, [X19 + 0x80]
	0x01D9F580 ORR W8, W8, 0x8
	0x01D9F584 STR W8, [X19 + 0x30]
	0x01D9F588 CBZ X22, 0x1D9F608
	0x01D9F58C ADRP X23, 0x2355000
	0x01D9F590 LDR X23, [X23 + 0xE70]
	0x01D9F594 ADRP X21, 0x2358000
	0x01D9F598 LDR X20, [X22 + 0x1D0]
	0x01D9F59C LDR X0, [X23]
	0x01D9F5A0 LDR X21, [X21 + 0x1F0]
	0x01D9F5A4 BL 0x1C16F10
	0x01D9F5A8 LDR X2, [X21]
	0x01D9F5AC MOV X1, X19
	0x01D9F5B0 MOV X3, X31
	0x01D9F5B4 MOV X21, X0
	0x01D9F5B8 BL 0x3314368
	0x01D9F5BC MOV X0, X20
	0x01D9F5C0 MOV X1, X21
	0x01D9F5C4 MOV X2, X31
	0x01D9F5C8 BL 0x33C0FDC
	0x01D9F5CC CBZ X0, 0x1D9F5F4
	0x01D9F5D0 LDR X1, [X23]
	0x01D9F5D4 LDR X8, [X0]
	0x01D9F5D8 CMP X8, X1
	0x01D9F5DC B.NE 0x1D9F5F0
	0x01D9F5E0 STR X0, [X22 + 0x1D0]
	0x01D9F5E4 LDR X8, [X0]
	0x01D9F5E8 CMP X8, X1
	0x01D9F5EC B.EQ 0x1D9F5F8
	0x01D9F5F0 BL 0x1C171E0
	0x01D9F5F4 STR X0, [X22 + 0x1D0]
	0x01D9F5F8 LDP X20, X19, [X31 + 0x20]
	0x01D9F5FC LDP X22, X21, [X31 + 0x10]
	0x01D9F600 LDP X30, X23, [X31], #0x30
	0x01D9F604 RET
	0x01D9F608 BL 0x1C16F20
	0x01D9F60C LDRB W8, [X0 + 0xC0]
	0x01D9F610 CBZ W8, 0x1D9F618
	0x01D9F614 RET
	0x01D9F618 MOVZ W8, 0x1
	0x01D9F61C STRB W8, [X0 + 0xC0]
	0x01D9F620 B 0x1D9F624
	0x01D9F624 STR X30, [X31 - 0x20]!
	0x01D9F628 STP X20, X19, [X31 + 0x10]
	0x01D9F62C ADRP X20, 0x2639000
	0x01D9F630 LDRB W8, [X20 + 0xA63]
	0x01D9F634 MOV X19, X0
	0x01D9F638 TBNZ X8, 0x0, 0x1D9F65C
	0x01D9F63C ADRP X0, 0x2357000
	0x01D9F640 LDR X0, [X0 + 0xA78]
	0x01D9F644 BL 0x1C16CF4
	0x01D9F648 ADRP X0, 0x2358000
	0x01D9F64C LDR X0, [X0 + 0x200]
	0x01D9F650 BL 0x1C16CF4
	0x01D9F654 MOVZ W8, 0x1
	0x01D9F658 STRB W8, [X20 + 0xA63]
	0x01D9F65C LDRB W8, [X19 + 0x58]
	0x01D9F660 CBZ W8, 0x1D9F6A8
	0x01D9F664 STRB W31, [X19 + 0x58]
	0x01D9F668 LDR X1, [X19 + 0xB0]
	0x01D9F66C CBZ X1, 0x1D9F67C
	0x01D9F670 MOV X0, X19
	0x01D9F674 MOV X2, X31
	0x01D9F678 BL 0x3C36834
	0x01D9F67C MOV X0, X19
	0x01D9F680 BL 0x1D9F7D8
	0x01D9F684 MOV X1, X0
	0x01D9F688 STR X0, [X19 + 0xB0]
	0x01D9F68C MOV X0, X19
	0x01D9F690 MOV X2, X31
	0x01D9F694 BL 0x3C366FC
	0x01D9F698 MOV X0, X19
	0x01D9F69C LDP X20, X19, [X31 + 0x10]
	0x01D9F6A0 LDR X30, [X31], #0x20
	0x01D9F6A4 B 0x1D9F838
	0x01D9F6A8 ADRP X20, 0x2357000
	0x01D9F6AC LDR X20, [X20 + 0xA78]
	0x01D9F6B0 LDR X0, [X20]
	0x01D9F6B4 LDR W8, [X0 + 0xE0]
	0x01D9F6B8 CBNZ W8, 0x1D9F6C0
	0x01D9F6BC BL 0x1C16DFC
	0x01D9F6C0 MOV X0, X19
	0x01D9F6C4 MOV X1, X31
	0x01D9F6C8 BL 0x1E77B08
	0x01D9F6CC LDR X0, [X19 + 0x38]
	0x01D9F6D0 CBZ X0, 0x1D9F7D4
	0x01D9F6D4 MOV X1, X31
	0x01D9F6D8 BL 0x1E9E538
	0x01D9F6DC CMP W0, 0x4
	0x01D9F6E0 B.NE 0x1D9F6F0
	0x01D9F6E4 LDP X20, X19, [X31 + 0x10]
	0x01D9F6E8 LDR X30, [X31], #0x20
	0x01D9F6EC RET
	0x01D9F6F0 LDR X0, [X19 + 0x40]
	0x01D9F6F4 CBZ X0, 0x1D9F7D4
	0x01D9F6F8 MOV X1, X31
	0x01D9F6FC BL 0x1E94078
	0x01D9F700 ANDS W31, W0, 0x7
	0x01D9F704 B.EQ 0x1D9F75C
	0x01D9F708 TBNZ X0, 0x0, 0x1D9F668
	0x01D9F70C LDR X8, [X19 + 0x38]
	0x01D9F710 CBZ X8, 0x1D9F7D4
	0x01D9F714 LDR X0, [X8 + 0x50]
	0x01D9F718 CBZ X0, 0x1D9F7D4
	0x01D9F71C MOV X1, X31
	0x01D9F720 BL 0x1EC4D00
	0x01D9F724 TBZ X0, 0x0, 0x1D9F6E4
	0x01D9F728 LDR X8, [X19 + 0x38]
	0x01D9F72C CBZ X8, 0x1D9F7D4
	0x01D9F730 LDR X0, [X8 + 0x50]
	0x01D9F734 MOVZ W1, 0x8
	0x01D9F738 MOV X2, X31
	0x01D9F73C BL 0x1ED9318
	0x01D9F740 LDR X8, [X19 + 0x40]
	0x01D9F744 CBZ X8, 0x1D9F7D4
	0x01D9F748 LDR X8, [X8 + 0x20]
	0x01D9F74C MOV X20, X0
	0x01D9F750 CBZ X8, 0x1D9F794
	0x01D9F754 LDR W0, [X8]
	0x01D9F758 B 0x1D9F798
	0x01D9F75C LDR X0, [X20]
	0x01D9F760 LDR X19, [X19 + 0x40]
	0x01D9F764 LDR W8, [X0 + 0xE0]
	0x01D9F768 CBNZ W8, 0x1D9F770
	0x01D9F76C BL 0x1C16DFC
	0x01D9F770 ADRP X8, 0x2358000
	0x01D9F774 LDR X8, [X8 + 0x200]
	0x01D9F778 MOV X1, X19
	0x01D9F77C LDP X20, X19, [X31 + 0x10]
	0x01D9F780 MOVZ W2, 0x7
	0x01D9F784 LDR X0, [X8]
	0x01D9F788 MOV X3, X31
	0x01D9F78C LDR X30, [X31], #0x20
	0x01D9F790 B 0x1E77B00
	0x01D9F794 MOV X0, X31
	0x01D9F798 LDR W1, [X19 + 0x68]
	0x01D9F79C MOVZ W2, 0x1
	0x01D9F7A0 MOV X3, X31
	0x01D9F7A4 BL 0x1E9C23C
	0x01D9F7A8 STUR X0, [X20 + 0x1C]
	0x01D9F7AC CBZ X20, 0x1D9F7D4
	0x01D9F7B0 MOVZ W8, 0x40
	0x01D9F7B4 STR W8, [X20 + 0xC]
	0x01D9F7B8 LDR X0, [X19 + 0x38]
	0x01D9F7BC CBZ X0, 0x1D9F7D4
	0x01D9F7C0 MOV X1, X20
	0x01D9F7C4 LDP X20, X19, [X31 + 0x10]
	0x01D9F7C8 MOV X2, X31
	0x01D9F7CC LDR X30, [X31], #0x20
	0x01D9F7D0 B 0x1EA1E24
	0x01D9F7D4 BL 0x1C16F20
	0x01D9F7D8 STP X30, X21, [X31 - 0x20]!
	0x01D9F7DC STP X20, X19, [X31 + 0x10]
	0x01D9F7E0 ADRP X20, 0x2639000
	0x01D9F7E4 ADRP X21, 0x2358000
	0x01D9F7E8 LDRB W8, [X20 + 0xA64]
	0x01D9F7EC LDR X21, [X21 + 0x208]
	0x01D9F7F0 MOV X19, X0
	0x01D9F7F4 TBNZ X8, 0x0, 0x1D9F80C
	0x01D9F7F8 ADRP X0, 0x2358000
	0x01D9F7FC LDR X0, [X0 + 0x208]
	0x01D9F800 BL 0x1C16CF4
	0x01D9F804 MOVZ W8, 0x1
	0x01D9F808 STRB W8, [X20 + 0xA64]
	0x01D9F80C LDR X0, [X21]
	0x01D9F810 BL 0x1C16F10
	0x01D9F814 MOV X1, X31
	0x01D9F818 MOV X20, X0
	0x01D9F81C BL 0x33BDD8C
	0x01D9F820 STR W31, [X20 + 0x10]
	0x01D9F824 STR X19, [X20 + 0x20]
	0x01D9F828 MOV X0, X20
	0x01D9F82C LDP X20, X19, [X31 + 0x10]
	0x01D9F830 LDP X30, X21, [X31], #0x20
	0x01D9F834 RET
	0x01D9F838 STP X30, X21, [X31 - 0x20]!
	0x01D9F83C STP X20, X19, [X31 + 0x10]
	0x01D9F840 ADRP X20, 0x2639000
	0x01D9F844 LDRB W8, [X20 + 0xA65]
	0x01D9F848 MOV X19, X0
	0x01D9F84C TBNZ X8, 0x0, 0x1D9F870
	0x01D9F850 ADRP X0, 0x2357000
	0x01D9F854 LDR X0, [X0 + 0xA78]
	0x01D9F858 BL 0x1C16CF4
	0x01D9F85C ADRP X0, 0x2358000
	0x01D9F860 LDR X0, [X0 + 0x210]
	0x01D9F864 BL 0x1C16CF4
	0x01D9F868 MOVZ W8, 0x1
	0x01D9F86C STRB W8, [X20 + 0xA65]
	0x01D9F870 LDRB W8, [X19 + 0x58]
	0x01D9F874 CBZ W8, 0x1D9F8B4
	0x01D9F878 STRB W31, [X19 + 0x58]
	0x01D9F87C LDR X1, [X19 + 0xB8]
	0x01D9F880 CBZ X1, 0x1D9F890
	0x01D9F884 MOV X0, X19
	0x01D9F888 MOV X2, X31
	0x01D9F88C BL 0x3C36834
	0x01D9F890 MOV X0, X19
	0x01D9F894 BL 0x1D9FA0C
	0x01D9F898 MOV X1, X0
	0x01D9F89C STR X0, [X19 + 0xB8]
	0x01D9F8A0 MOV X0, X19
	0x01D9F8A4 LDP X20, X19, [X31 + 0x10]
	0x01D9F8A8 MOV X2, X31
	0x01D9F8AC LDP X30, X21, [X31], #0x20
	0x01D9F8B0 B 0x3C366FC
	0x01D9F8B4 ADRP X21, 0x2357000
	0x01D9F8B8 LDR X21, [X21 + 0xA78]
	0x01D9F8BC LDR X0, [X21]
	0x01D9F8C0 LDR W8, [X0 + 0xE0]
	0x01D9F8C4 CBNZ W8, 0x1D9F8CC
	0x01D9F8C8 BL 0x1C16DFC
	0x01D9F8CC MOV X0, X19
	0x01D9F8D0 MOV X1, X31
	0x01D9F8D4 BL 0x1E77B08
	0x01D9F8D8 LDR X0, [X19 + 0x38]
	0x01D9F8DC CBZ X0, 0x1D9F9E0
	0x01D9F8E0 MOV X1, X31
	0x01D9F8E4 BL 0x1E9E538
	0x01D9F8E8 CMP W0, 0x4
	0x01D9F8EC B.NE 0x1D9F8FC
	0x01D9F8F0 LDP X20, X19, [X31 + 0x10]
	0x01D9F8F4 LDP X30, X21, [X31], #0x20
	0x01D9F8F8 RET
	0x01D9F8FC LDR X0, [X19 + 0x40]
	0x01D9F900 CBZ X0, 0x1D9F9E0
	0x01D9F904 MOV X1, X31
	0x01D9F908 BL 0x1E94078
	0x01D9F90C TBNZ X0, 0x0, 0x1D9F948
	0x01D9F910 LDR X0, [X21]
	0x01D9F914 LDR X19, [X19 + 0x40]
	0x01D9F918 LDR W8, [X0 + 0xE0]
	0x01D9F91C CBNZ W8, 0x1D9F924
	0x01D9F920 BL 0x1C16DFC
	0x01D9F924 ADRP X8, 0x2358000
	0x01D9F928 LDR X8, [X8 + 0x210]
	0x01D9F92C MOV X1, X19
	0x01D9F930 LDP X20, X19, [X31 + 0x10]
	0x01D9F934 MOVZ W2, 0x1
	0x01D9F938 LDR X0, [X8]
	0x01D9F93C MOV X3, X31
	0x01D9F940 LDP X30, X21, [X31], #0x20
	0x01D9F944 B 0x1E77B00
	0x01D9F948 LDR X8, [X19 + 0x38]
	0x01D9F94C CBZ X8, 0x1D9F9E0
	0x01D9F950 MOV W20, W0
	0x01D9F954 LDR X0, [X8 + 0x50]
	0x01D9F958 CBZ X0, 0x1D9F9E0
	0x01D9F95C MOV X1, X31
	0x01D9F960 BL 0x1EC4D00
	0x01D9F964 TBZ X0, 0x0, 0x1D9F9D4
	0x01D9F968 LDR X8, [X19 + 0x38]
	0x01D9F96C CBZ X8, 0x1D9F9E0
	0x01D9F970 LDR X0, [X8 + 0x50]
	0x01D9F974 MOVZ W1, 0x8
	0x01D9F978 MOV X2, X31
	0x01D9F97C BL 0x1ED9318
	0x01D9F980 LDR X8, [X19 + 0x40]
	0x01D9F984 CBZ X8, 0x1D9F9E0
	0x01D9F988 LDR X8, [X8 + 0x20]
	0x01D9F98C MOV X21, X0
	0x01D9F990 CBZ X8, 0x1D9F99C
	0x01D9F994 LDR W0, [X8]
	0x01D9F998 B 0x1D9F9A0
	0x01D9F99C MOV X0, X31
	0x01D9F9A0 LDR W1, [X19 + 0x68]
	0x01D9F9A4 MOVZ W2, 0x2
	0x01D9F9A8 MOV X3, X31
	0x01D9F9AC BL 0x1E9C23C
	0x01D9F9B0 STUR X0, [X21 + 0x1C]
	0x01D9F9B4 CBZ X21, 0x1D9F9E0
	0x01D9F9B8 MOVZ W8, 0x40
	0x01D9F9BC STR W8, [X21 + 0xC]
	0x01D9F9C0 LDR X0, [X19 + 0x38]
	0x01D9F9C4 CBZ X0, 0x1D9F9E0
	0x01D9F9C8 MOV X1, X21
	0x01D9F9CC MOV X2, X31
	0x01D9F9D0 BL 0x1EA1E24
	0x01D9F9D4 ANDS W31, W20, 0x7
	0x01D9F9D8 B.NE 0x1D9F87C
	0x01D9F9DC B 0x1D9F8F0
	0x01D9F9E0 BL 0x1C16F20
	0x01D9F9E4 STR X30, [X31 - 0x20]!
	0x01D9F9E8 STP X20, X19, [X31 + 0x10]
	0x01D9F9EC MOV W19, W1
	0x01D9F9F0 MOV X1, X31
	0x01D9F9F4 MOV X20, X0
	0x01D9F9F8 BL 0x33BDD8C
	0x01D9F9FC STR W19, [X20 + 0x10]
	0x01D9FA00 LDP X20, X19, [X31 + 0x10]
	0x01D9FA04 LDR X30, [X31], #0x20
	0x01D9FA08 RET
	0x01D9FA0C STP X30, X21, [X31 - 0x20]!
	0x01D9FA10 STP X20, X19, [X31 + 0x10]
	0x01D9FA14 ADRP X20, 0x2639000
	0x01D9FA18 ADRP X21, 0x2358000
	0x01D9FA1C LDRB W8, [X20 + 0xA67]
	0x01D9FA20 LDR X21, [X21 + 0x218]
	0x01D9FA24 MOV X19, X0
	0x01D9FA28 TBNZ X8, 0x0, 0x1D9FA40
	0x01D9FA2C ADRP X0, 0x2358000
	0x01D9FA30 LDR X0, [X0 + 0x218]
	0x01D9FA34 BL 0x1C16CF4
	0x01D9FA38 MOVZ W8, 0x1
	0x01D9FA3C STRB W8, [X20 + 0xA67]
	0x01D9FA40 LDR X0, [X21]
	0x01D9FA44 BL 0x1C16F10
	0x01D9FA48 MOV X1, X31
	0x01D9FA4C MOV X20, X0
	0x01D9FA50 BL 0x33BDD8C
	0x01D9FA54 STR W31, [X20 + 0x10]
	0x01D9FA58 STR X19, [X20 + 0x20]
	0x01D9FA5C MOV X0, X20
	0x01D9FA60 LDP X20, X19, [X31 + 0x10]
	0x01D9FA64 LDP X30, X21, [X31], #0x20
	0x01D9FA68 RET
	0x01D9FA6C STR X30, [X31 - 0x20]!
	0x01D9FA70 STP X20, X19, [X31 + 0x10]
	0x01D9FA74 MOV W19, W1
	0x01D9FA78 MOV X1, X31
	0x01D9FA7C MOV X20, X0
	0x01D9FA80 BL 0x33BDD8C
	0x01D9FA84 STR W19, [X20 + 0x10]
	0x01D9FA88 LDP X20, X19, [X31 + 0x10]
	0x01D9FA8C LDR X30, [X31], #0x20
	0x01D9FA90 RET
	0x01D9FA94 MOV X1, X31
	0x01D9FA98 B 0x1E74F04
	0x01D9FA9C STR X30, [X31 - 0x30]!
	0x01D9FAA0 STP X22, X21, [X31 + 0x10]
	0x01D9FAA4 STP X20, X19, [X31 + 0x20]
	0x01D9FAA8 ADRP X21, 0x2639000
	0x01D9FAAC ADRP X22, 0x2357000
	0x01D9FAB0 ADRP X19, 0x2358000
	0x01D9FAB4 ADRP X20, 0x2358000
	0x01D9FAB8 LDRB W8, [X21 + 0xA68]
	0x01D9FABC LDR X22, [X22 + 0xC88]
	0x01D9FAC0 LDR X19, [X19 + 0x1F8]
	0x01D9FAC4 LDR X20, [X20 + 0x220]
	0x01D9FAC8 TBNZ X8, 0x0, 0x1D9FAF8
	0x01D9FACC ADRP X0, 0x2358000
	0x01D9FAD0 LDR X0, [X0 + 0x1F8]
	0x01D9FAD4 BL 0x1C16CF4
	0x01D9FAD8 ADRP X0, 0x2358000
	0x01D9FADC LDR X0, [X0 + 0x220]
	0x01D9FAE0 BL 0x1C16CF4
	0x01D9FAE4 ADRP X0, 0x2357000
	0x01D9FAE8 LDR X0, [X0 + 0xC88]
	0x01D9FAEC BL 0x1C16CF4
	0x01D9FAF0 MOVZ W8, 0x1
	0x01D9FAF4 STRB W8, [X21 + 0xA68]
	0x01D9FAF8 LDR X0, [X22]
	0x01D9FAFC MOV X1, X31
	0x01D9FB00 BL 0x3C124EC
	0x01D9FB04 LDR X8, [X19]
	0x01D9FB08 MOV X1, X31
	0x01D9FB0C LDR X8, [X8 + 0xB8]
	0x01D9FB10 STR W0, [X8]
	0x01D9FB14 LDR X0, [X20]
	0x01D9FB18 BL 0x3C124EC
	0x01D9FB1C LDR X8, [X19]
	0x01D9FB20 ADRP X9, 0xFFFFFFFFFED4E000
	0x01D9FB24 LDR V0, [X9 + 0x22]
	0x01D9FB28 ADRP X9, 0xFFFFFFFFFED4C000
	0x01D9FB2C LDR X10, [X8 + 0xB8]
	0x01D9FB30 LDR V1, [X9 + 0xE8]
	0x01D9FB34 LDP X20, X19, [X31 + 0x20]
	0x01D9FB38 LDP X22, X21, [X31 + 0x10]
	0x01D9FB3C STR W0, [X10 + 0x4]
	0x01D9FB40 STUR V0, [X10 + 0x8]
	0x01D9FB44 LDR X9, [X8 + 0xB8]
	0x01D9FB48 ADRP X10, 0xFFFFFFFFFED4C000
	0x01D9FB4C LDR V0, [X10 + 0xFD]
	0x01D9FB50 STUR V1, [X9 + 0x18]
	0x01D9FB54 LDR X8, [X8 + 0xB8]
	0x01D9FB58 STUR V0, [X8 + 0x28]
	0x01D9FB5C LDR X30, [X31], #0x30
	0x01D9FB60 RET
	0x01D9FB64 RET
	0x01D9FB68 RET
	0x01D9FB6C STR X30, [X31 - 0x20]!
	0x01D9FB70 STP X20, X19, [X31 + 0x10]
	0x01D9FB74 ADRP X20, 0x2639000
	0x01D9FB78 LDRB W8, [X20 + 0xA69]
	0x01D9FB7C MOV X19, X0
	0x01D9FB80 TBNZ X8, 0x0, 0x1D9FB98
	0x01D9FB84 ADRP X0, 0x2358000
	0x01D9FB88 LDR X0, [X0 + 0x1F8]
	0x01D9FB8C BL 0x1C16CF4
	0x01D9FB90 MOVZ W8, 0x1
	0x01D9FB94 STRB W8, [X20 + 0xA69]
	0x01D9FB98 CBZ X19, 0x1D9FBF0
	0x01D9FB9C ADRP X9, 0x2358000
	0x01D9FBA0 LDR X9, [X9 + 0x1F8]
	0x01D9FBA4 MOVZ W8, 0x1
	0x01D9FBA8 STRB W8, [X19 + 0x58]
	0x01D9FBAC LDR X8, [X19]
	0x01D9FBB0 LDR X1, [X9]
	0x01D9FBB4 LDRB W10, [X8 + 0x130]
	0x01D9FBB8 LDRB W9, [X1 + 0x130]
	0x01D9FBBC CMP W10, W9
	0x01D9FBC0 B.CC 0x1D9FBE8
	0x01D9FBC4 LDR X8, [X8 + 0xC8]
	0x01D9FBC8 ADD X8, X8, X9, 0x3, LSL
	0x01D9FBCC LDUR X8, [X8 - 0x8]
	0x01D9FBD0 CMP X8, X1
	0x01D9FBD4 B.NE 0x1D9FBE8
	0x01D9FBD8 MOV X0, X19
	0x01D9FBDC LDP X20, X19, [X31 + 0x10]
	0x01D9FBE0 LDR X30, [X31], #0x20
	0x01D9FBE4 B 0x1D9F624
	0x01D9FBE8 MOV X0, X19
	0x01D9FBEC BL 0x1C171E0
	0x01D9FBF0 BL 0x1C16F20
	0x01D9FBF4 STR X30, [X31 - 0x20]!
	0x01D9FBF8 STP X20, X19, [X31 + 0x10]
	0x01D9FBFC ADRP X20, 0x2639000
	0x01D9FC00 LDRB W8, [X20 + 0xA6A]
	0x01D9FC04 MOV X19, X0
	0x01D9FC08 TBNZ X8, 0x0, 0x1D9FC20
	0x01D9FC0C ADRP X0, 0x2358000
	0x01D9FC10 LDR X0, [X0 + 0x1F8]
	0x01D9FC14 BL 0x1C16CF4
	0x01D9FC18 MOVZ W8, 0x1
	0x01D9FC1C STRB W8, [X20 + 0xA6A]
	0x01D9FC20 CBZ X19, 0x1D9FC78
	0x01D9FC24 ADRP X9, 0x2358000
	0x01D9FC28 LDR X9, [X9 + 0x1F8]
	0x01D9FC2C MOVZ W8, 0x1
	0x01D9FC30 STRB W8, [X19 + 0x58]
	0x01D9FC34 LDR X8, [X19]
	0x01D9FC38 LDR X1, [X9]
	0x01D9FC3C LDRB W10, [X8 + 0x130]
	0x01D9FC40 LDRB W9, [X1 + 0x130]
	0x01D9FC44 CMP W10, W9
	0x01D9FC48 B.CC 0x1D9FC70
	0x01D9FC4C LDR X8, [X8 + 0xC8]
	0x01D9FC50 ADD X8, X8, X9, 0x3, LSL
	0x01D9FC54 LDUR X8, [X8 - 0x8]
	0x01D9FC58 CMP X8, X1
	0x01D9FC5C B.NE 0x1D9FC70
	0x01D9FC60 MOV X0, X19
	0x01D9FC64 LDP X20, X19, [X31 + 0x10]
	0x01D9FC68 LDR X30, [X31], #0x20
	0x01D9FC6C B 0x1D9F838
	0x01D9FC70 MOV X0, X19
	0x01D9FC74 BL 0x1C171E0
	0x01D9FC78 BL 0x1C16F20
	0x01D9FC7C RET
	0x01D9FC80 STR D10, [X31 - 0x40]!
	0x01D9FC84 STP D9, D8, [X31 + 0x10]
	0x01D9FC88 STP X30, X21, [X31 + 0x20]
	0x01D9FC8C STP X20, X19, [X31 + 0x30]
	0x01D9FC90 ADRP X19, 0x2639000
	0x01D9FC94 LDRB W8, [X19 + 0xA6B]
	0x01D9FC98 MOV X20, X0
	0x01D9FC9C TBNZ X8, 0x0, 0x1D9FCB4
	0x01D9FCA0 ADRP X0, 0x2358000
	0x01D9FCA4 LDR X0, [X0 + 0x1F8]
	0x01D9FCA8 BL 0x1C16CF4
	0x01D9FCAC MOVZ W8, 0x1
	0x01D9FCB0 STRB W8, [X19 + 0xA6B]
	0x01D9FCB4 LDR W8, [X20 + 0x10]
	0x01D9FCB8 LDR X19, [X20 + 0x20]
	0x01D9FCBC CMP W8, 0x1
	0x01D9FCC0 B.EQ 0x1D9FCFC
	0x01D9FCC4 CBNZ W8, 0x1D9FE30
	0x01D9FCC8 MOVN W8, 0x0
	0x01D9FCCC STR W8, [X20 + 0x10]
	0x01D9FCD0 CBZ X19, 0x1D9FE48
	0x01D9FCD4 LDR X0, [X19 + 0xA8]
	0x01D9FCD8 CBZ X0, 0x1D9FE48
	0x01D9FCDC MOV X1, X31
	0x01D9FCE0 BL 0x3BFCAC0
	0x01D9FCE4 MOVZ W1, 0x1
	0x01D9FCE8 MOV X0, X19
	0x01D9FCEC BL 0x1D9F408
	0x01D9FCF0 FMOV S8, W31
	0x01D9FCF4 STR W31, [X20 + 0x28]
	0x01D9FCF8 B 0x1D9FD14
	0x01D9FCFC LDR V8, [X20 + 0x28]
	0x01D9FD00 FMOV S0, 2
	0x01D9FD04 MOVN W8, 0x0
	0x01D9FD08 STR W8, [X20 + 0x10]
	0x01D9FD0C FCMP S8, S0
	0x01D9FD10 B.PL 0x1D9FDBC
	0x01D9FD14 MOV X0, X31
	0x01D9FD18 BL 0x3C3C714
	0x01D9FD1C ADRP X8, 0xFFFFFFFFFED4A000
	0x01D9FD20 LDR V1, [X8 + 0xF4C]
	0x01D9FD24 FADD S0, S8, S0
	0x01D9FD28 FMOV S2, 0.5
	0x01D9FD2C FMUL S9, S0, S2
	0x01D9FD30 STR S0, [X20 + 0x28]
	0x01D9FD34 FMUL S0, S9, S1
	0x01D9FD38 BL 0x3EB1B70
	0x01D9FD3C MOV X0, X31
	0x01D9FD40 MOV V8.16B, V0.16B
	0x01D9FD44 BL 0x3C3C6C4
	0x01D9FD48 CBZ X19, 0x1D9FE48
	0x01D9FD4C LDR X21, [X19 + 0xA0]
	0x01D9FD50 CBZ X21, 0x1D9FE48
	0x01D9FD54 ADRP X8, 0xFFFFFFFFFED4B000
	0x01D9FD58 LDR V1, [X8 + 0x284]
	0x01D9FD5C FADD S2, S8, S8
	0x01D9FD60 FMOV S8, 1
	0x01D9FD64 FMIN S10, S2, S8
	0x01D9FD68 FMUL S0, S0, S1
	0x01D9FD6C BL 0x3EB1B70
	0x01D9FD70 ADRP X8, 0xFFFFFFFFFED4B000
	0x01D9FD74 LDR V1, [X8 + 0x35C]
	0x01D9FD78 MOV X0, X21
	0x01D9FD7C MOV X1, X31

ISIL:
	001 Subtract X31, X31, 352
	002 Move [X31+224], D10
	003 Move [X31+240], D9
	004 Move [X31+248], D8
	005 Move [X31+256], X29
	006 Move [X31+264], X30
	007 Move [X31+272], X28
	008 Move [X31+280], X27
	009 Move [X31+288], X26
	010 Move [X31+296], X25
	011 Move [X31+304], X24
	012 Move [X31+312], X23
	013 Move [X31+320], X22
	014 Move [X31+328], X21
	015 Move [X31+336], X20
	016 Move [X31+344], X19
	017 Move X20, 0x263A000
	018 Move W8, [X20+2649]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {98}
	024 Move X0, 0x2355000
	025 Move X0, [X0+2896]
	026 Call 0x1C17CF4
	027 Move X0, 0x2358000
	028 Move X0, [X0+3000]
	029 Call 0x1C17CF4
	030 Move X0, 0x2359000
	031 Move X0, [X0+304]
	032 Call 0x1C17CF4
	033 Move X0, 0x2355000
	034 Move X0, [X0+1880]
	035 Call 0x1C17CF4
	036 Move X0, 0x2359000
	037 Move X0, [X0+184]
	038 Call 0x1C17CF4
	039 Move X0, 0x2359000
	040 Move X0, [X0+264]
	041 Call 0x1C17CF4
	042 Move X0, 0x2357000
	043 Move X0, [X0+2464]
	044 Call 0x1C17CF4
	045 Move X0, 0x2358000
	046 Move X0, [X0+2904]
	047 Call 0x1C17CF4
	048 Move X0, 0x2358000
	049 Move X0, [X0+2912]
	050 Call 0x1C17CF4
	051 Move X0, 0x2359000
	052 Move X0, [X0+312]
	053 Call 0x1C17CF4
	054 Move X0, 0x2359000
	055 Move X0, [X0+192]
	056 Call 0x1C17CF4
	057 Move X0, 0x2355000
	058 Move X0, [X0+1432]
	059 Call 0x1C17CF4
	060 Move X0, 0x2359000
	061 Move X0, [X0+320]
	062 Call 0x1C17CF4
	063 Move X0, 0x2357000
	064 Move X0, [X0+1992]
	065 Call 0x1C17CF4
	066 Move X0, 0x2359000
	067 Move X0, [X0+328]
	068 Call 0x1C17CF4
	069 Move X0, 0x2359000
	070 Move X0, [X0+336]
	071 Call 0x1C17CF4
	072 Move X0, 0x2359000
	073 Move X0, [X0+344]
	074 Call 0x1C17CF4
	075 Move X0, 0x2359000
	076 Move X0, [X0+352]
	077 Call 0x1C17CF4
	078 Move X0, 0x2359000
	079 Move X0, [X0+360]
	080 Call 0x1C17CF4
	081 Move X0, 0x2359000
	082 Move X0, [X0+368]
	083 Call 0x1C17CF4
	084 Move X0, 0x2359000
	085 Move X0, [X0+376]
	086 Call 0x1C17CF4
	087 Move X0, 0x2359000
	088 Move X0, [X0+384]
	089 Call 0x1C17CF4
	090 Move X0, 0x2358000
	091 Move X0, [X0+3440]
	092 Call 0x1C17CF4
	093 Move X0, 0x2359000
	094 Move X0, [X0+392]
	095 Call 0x1C17CF4
	096 Move W8, 1
	097 Move [X20+2649], W8
	098 Move X22, 0x263A000
	099 Move W8, [X22+2751]
	100 Move [X31+232], X31
	101 Move [X31+216], X31
	102 Move [X31+192], X31
	103 Move [X31+200], X31
	104 Move [X31+208], W31
	105 Move [X31+160], X31
	106 Move [X31+168], X31
	107 Move [X31+176], W31
	108 Compare W8, 0
	109 JumpIfNotEqual {115}
	110 Move X0, 0x2358000
	111 Move X0, [X0+3368]
	112 Call 0x1C17CF4
	113 Move W8, 1
	114 Move [X22+2751], W8
	115 Move X23, 0x2358000
	116 Move X23, [X23+3368]
	117 Move X27, 0x2355000
	118 Move X8, [X23]
	119 Move X8, [X8+184]
	120 Move X0, [X8+56]
	121 Move X27, [X27+1432]
	122 Compare X0, 0
	123 JumpIfEqual {127}
	124 Move X1, X31
	125 Call NetworkManager.get_currentRunner, X0
	126 Move X20, X0
	127 Move X20, X31
	128 Move X0, [X27]
	129 Move W8, [X0+224]
	130 Compare W8, 0
	131 JumpIfNotEqual {133}
	132 Call 0x1C17DFC
	133 Move X0, X20
	134 Move X1, X31
	135 Move X2, X31
	136 Call Object.op_Equality, X0, X1
	137 Move TEMP, X0
	138 And TEMP, TEMP, 1
	139 Compare TEMP, 1
	140 JumpIfEqual {773}
	141 Move W8, [X22+2751]
	142 Compare W8, 0
	143 JumpIfNotEqual {149}
	144 Move X0, 0x2358000
	145 Move X0, [X0+3368]
	146 Call 0x1C17CF4
	147 Move W8, 1
	148 Move [X22+2751], W8
	149 Move X8, [X23]
	150 Move X8, [X8+184]
	151 Move X0, [X8+56]
	152 Compare X0, 0
	153 JumpIfEqual {790}
	154 Move X1, X31
	155 Call NetworkManager.get_currentRunner, X0
	156 Compare X0, 0
	157 JumpIfEqual {790}
	158 Move X1, X31
	159 Call NetworkRunner.get_IsRunning, X0
	160 Move TEMP, X0
	161 And TEMP, TEMP, 1
	162 Compare TEMP, 1
	163 JumpIfNotEqual {773}
	164 Move X0, X19
	165 Call ItemVendingMachine.UpdateItemLimitCheck, X0
	166 Call ItemVendingMachine.get_IsPurchaseLimited
	167 Move TEMP, X0
	168 And TEMP, TEMP, 1
	169 Compare TEMP, 1
	170 JumpIfEqual {773}
	171 Move X0, [X19+32]
	172 Compare X0, 0
	173 JumpIfEqual {790}
	174 Move X8, 0x2359000
	175 Move W1, [X19+104]
	176 Move X8, [X8+264]
	177 Move X2, [X8]
	178 Call List`1<Object>.get_Item, X0, X1
	179 Compare X0, 0
	180 JumpIfEqual {790}
	181 Move X20, X0
	182 Move W0, [X0+32]
	183 Move X1, X31
	184 Call GameManager.TrySpendMoney, X0
	185 Move TEMP, X0
	186 And TEMP, TEMP, 1
	187 Compare TEMP, 1
	188 JumpIfNotEqual {261}
	189 Move X0, [X27]
	190 Move X21, [X20+56]
	191 Move W8, [X0+224]
	192 Compare W8, 0
	193 JumpIfNotEqual {195}
	194 Call 0x1C17DFC
	195 Move X0, X21
	196 Move X1, X31
	197 Call Object.op_Implicit, X0
	198 Move TEMP, X0
	199 And TEMP, TEMP, 1
	200 Compare TEMP, 1
	201 JumpIfNotEqual {275}
	202 Move W8, [X22+2751]
	203 Compare W8, 0
	204 JumpIfNotEqual {210}
	205 Move X0, 0x2358000
	206 Move X0, [X0+3368]
	207 Call 0x1C17CF4
	208 Move W8, 1
	209 Move [X22+2751], W8
	210 Move X8, [X23]
	211 Move X8, [X8+184]
	212 Move X0, [X8+56]
	213 Compare X0, 0
	214 JumpIfEqual {790}
	215 Move X1, X31
	216 Call NetworkManager.get_currentRunner, X0
	217 Move X8, [X19+64]
	218 Compare X8, 0
	219 JumpIfEqual {790}
	220 Move X22, [X20+56]
	221 Move X21, X0
	222 Move X0, X8
	223 Move X1, X31
	224 Call Transform.get_position, X0
	225 Move X8, 0x2358000
	226 Move X8, [X8+2904]
	227 Add X0, X31, 144
	228 Move [X31+144], X31
	229 Move [X31+152], X31
	230 Move X1, [X8]
	231 Call Nullable`1<Vector3>..ctor, X0, X1
	232 Move X0, [X19+64]
	233 Compare X0, 0
	234 JumpIfEqual {790}
	235 Move X1, X31
	236 Call Transform.get_rotation, X0
	237 Move X8, 0x2358000
	238 Move X8, [X8+2912]
	239 Add X0, X31, 88
	240 Move [X31+88], X31
	241 Move [X31+96], X31
	242 Move [X31+104], W31
	243 Move X1, [X8]
	244 Call Nullable`1<Quaternion>..ctor, X0, X1
	245 Move X28, 0x2359000
	246 Move X28, [X28+344]
	247 Move X0, [X28]
	248 Move W8, [X0+224]
	249 Compare W8, 0
	250 JumpIfNotEqual {253}
	251 Call 0x1C17DFC
	252 Move X0, [X28]
	253 Move X8, [X0+184]
	254 Move X25, [X8+8]
	255 Compare X25, 0
	256 JumpIfEqual {278}
	257 NotImplemented "Instruction LDUR not yet implemented."
	258 Move W8, [X31+104]
	259 Move X23, [X31+144]
	260 Move X24, [X31+152]
	261 Move X0, X19
	262 Call ItemVendingMachine.AnimateNotEnoughMoney, X0
	263 Move X20, [X19+80]
	264 Move X0, X19
	265 Move X1, X31
	266 Call Component.get_transform, X0
	267 Compare X0, 0
	268 JumpIfEqual {790}
	269 Move X1, X31
	270 Call Transform.get_position, X0
	271 Move S3, 1
	272 Move X0, X20
	273 Move X1, X31
	274 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	275 Move W0, [X20+36]
	276 Move X1, X31
	277 Call GameManager.AddPlayerMoney, X0
	278 NotImplemented "Instruction LDUR not yet implemented."
	279 Move W8, [X31+104]
	280 Move X23, [X31+144]
	281 Move X24, [X31+152]
	282 Move [X31+10], V0
	283 Move [X31+176], W8
	284 Move W8, [X0+224]
	285 Compare W8, 0
	286 JumpIfNotEqual {289}
	287 Call 0x1C17DFC
	288 Move X0, [X28]
	289 Move X9, 0x2359000
	290 Move X8, [X0+184]
	291 Move X9, [X9+320]
	292 Move X26, [X8]
	293 Move X0, [X9]
	294 Call 0x1C17F10
	295 Move X8, 0x2359000
	296 Move X8, [X8+336]
	297 Move X1, X26
	298 Move X3, X31
	299 Move X25, X0
	300 Move X2, [X8]
	301 Call OnBeforeSpawned..ctor, X0, X1, X2
	302 Move X8, [X28]
	303 Move X8, [X8+184]
	304 Move [X8+8], X25
	305 Move V0, [X31+10]
	306 Move W8, [X31+176]
	307 Move [X31+12], V0
	308 Move [X31+208], W8
	309 Compare X21, 0
	310 JumpIfEqual {790}
	311 Move V0, [X31+12]
	312 Move W8, [X31+208]
	313 Add X4, X31, 112
	314 Move X0, X21
	315 Move X1, X22
	316 Move X2, X23
	317 Move X3, X24
	318 Move X5, X31
	319 Move X6, X25
	320 Move W7, W31
	321 Move [X31+7], V0
	322 Move [X31+128], W8
	323 Move [X31], X31
	324 Call NetworkRunner.Spawn, X0, X1, X2, X3, X4, X5, X6
	325 Move X8, 0x2357000
	326 Move X8, [X8+2464]
	327 Move X24, X0
	328 Move X8, [X8]
	329 Move W9, [X8+224]
	330 Compare W9, 0
	331 JumpIfNotEqual {335}
	332 Move X0, X8
	333 Move W21, W31
	334 Call 0x1C17DFC
	335 Move X0, X31
	336 Call NetPlayer.get_localPlayer
	337 Compare X24, 0
	338 JumpIfEqual {796}
	339 Move X8, 0x2358000
	340 Move X8, [X8+3000]
	341 Move X23, X0
	342 Move X1, [X8]
	343 Move X0, X24
	344 Call 0x21A4894, X0
	345 Move X22, X0
	346 Move X0, [X27]
	347 Move W8, [X0+224]
	348 Compare W8, 0
	349 JumpIfNotEqual {351}
	350 Call 0x1C17DFC
	351 Move X0, X23
	352 Move X1, X31
	353 Move X2, X31
	354 Call Object.op_Inequality, X0, X1
	355 Move TEMP, X0
	356 And TEMP, TEMP, 1
	357 Compare TEMP, 1
	358 JumpIfNotEqual {590}
	359 Move X0, [X27]
	360 Move W8, [X0+224]
	361 Compare W8, 0
	362 JumpIfNotEqual {364}
	363 Call 0x1C17DFC
	364 Move X0, X22
	365 Move X1, X31
	366 Move X2, X31
	367 Call Object.op_Inequality, X0, X1
	368 Move TEMP, X0
	369 And TEMP, TEMP, 1
	370 Compare TEMP, 1
	371 JumpIfNotEqual {590}
	372 Move [X31+16], X24
	373 Compare X23, 0
	374 JumpIfEqual {802}
	375 Move X28, [X23+232]
	376 Compare X28, 0
	377 JumpIfEqual {803}
	378 Move X8, [X28+24]
	379 NotImplemented "Instruction CMP not yet implemented."
	380 Move X21, X31
	381 Move W26, W31
	382 Move X29, X31
	383 And X8, X8, 0
	384 Add X23, X28, 32
	385 Move [X31+24], X31
	386 NotImplemented "Instruction CMP not yet implemented."
	387 Compare X22, 0
	388 JumpIfEqual {792}
	389 Move X24, [X23]
	390 Move X0, X22
	391 Move X1, X31
	392 Call Component.get_tag, X0
	393 Move X8, 0x2358000
	394 Move X8, [X8+3440]
	395 Move X1, [X8]
	396 Move X2, X31
	397 Call String.op_Equality, X0, X1
	398 Move X25, X21
	399 Move TEMP, X0
	400 And TEMP, TEMP, 1
	401 Compare TEMP, 1
	402 JumpIfNotEqual {428}
	403 Move W8, [X22+140]
	404 Compare W8, 0
	405 JumpIfEqual {428}
	406 Compare X24, 0
	407 JumpIfEqual {795}
	408 Move W8, [X24+128]
	409 NotImplemented "Instruction CMP not yet implemented."
	410 Move X0, X24
	411 Move X1, X31
	412 Call AttachedItemAnchor.get_grabbedItem, X0
	413 Move [X31+216], X0
	414 Add X0, X31, 216
	415 Move X1, X31
	416 Call NetworkBehaviourId.get_IsValid, X0
	417 Move TEMP, X0
	418 And TEMP, TEMP, 1
	419 Compare TEMP, 1
	420 JumpIfEqual {546}
	421 Move X8, [X22+64]
	422 Compare X8, 0
	423 JumpIfEqual {571}
	424 Move X8, [X8+32]
	425 Compare X8, 0
	426 JumpIfEqual {571}
	427 Move W1, [X8]
	428 Compare X24, 0
	429 JumpIfEqual {794}
	430 Move W8, [X24+128]
	431 NotImplemented "Instruction CMP not yet implemented."
	432 Move X0, X24
	433 Move X1, X31
	434 Call AttachedItemAnchor.get_isHand, X0
	435 Move TEMP, X0
	436 And TEMP, TEMP, 1
	437 Compare TEMP, 1
	438 JumpIfNotEqual {534}
	439 Move X8, 0x2357000
	440 Move X8, [X8+1992]
	441 Move W9, [X24+128]
	442 Move X0, [X8]
	443 Move W8, [X0+224]
	444 Compare W9, 0
	445 JumpIfEqual {480}
	446 Compare W8, 0
	447 JumpIfNotEqual {449}
	448 Call 0x1C17DFC
	449 Move X8, 0x263A000
	450 Move W8, [X8+2141]
	451 Compare W8, 0
	452 JumpIfNotEqual {459}
	453 Move X0, 0x2357000
	454 Move X0, [X0+1992]
	455 Call 0x1C17CF4
	456 Move X8, 0x263A000
	457 Move W9, 1
	458 Move [X8+2141], W9
	459 Move X8, 0x2357000
	460 Move X8, [X8+1992]
	461 Move X0, [X8]
	462 Move W8, [X0+224]
	463 Compare W8, 0
	464 JumpIfNotEqual {469}
	465 Call 0x1C17DFC
	466 Move X8, 0x2357000
	467 Move X8, [X8+1992]
	468 Move X0, [X8]
	469 Move X8, [X0+184]
	470 Move X9, [X31+24]
	471 Move X8, [X8]
	472 NotImplemented "Instruction CMP not yet implemented."
	473 NotImplemented "Instruction CSEL not yet implemented."
	474 Compare X8, 0
	475 JumpIfEqual {513}
	476 Compare X9, 0
	477 JumpIfEqual {799}
	478 Move X25, [X9+336]
	479 Move [X31+24], X8
	480 Compare W8, 0
	481 JumpIfNotEqual {483}
	482 Call 0x1C17DFC
	483 Move X8, 0x263A000
	484 Move W8, [X8+2141]
	485 Compare W8, 0
	486 JumpIfNotEqual {493}
	487 Move X0, 0x2357000
	488 Move X0, [X0+1992]
	489 Call 0x1C17CF4
	490 Move X8, 0x263A000
	491 Move W9, 1
	492 Move [X8+2141], W9
	493 Move X8, 0x2357000
	494 Move X8, [X8+1992]
	495 Move X0, [X8]
	496 Move W8, [X0+224]
	497 Compare W8, 0
	498 JumpIfNotEqual {503}
	499 Call 0x1C17DFC
	500 Move X8, 0x2357000
	501 Move X8, [X8+1992]
	502 Move X0, [X8]
	503 Move X8, [X0+184]
	504 Move X8, [X8]
	505 NotImplemented "Instruction CMP not yet implemented."
	506 NotImplemented "Instruction CSEL not yet implemented."
	507 Compare X8, 0
	508 JumpIfEqual {513}
	509 Compare X9, 0
	510 JumpIfEqual {804}
	511 Move X25, [X9+328]
	512 Move X21, X8
	513 Move X25, X31
	514 Move X0, [X27]
	515 Move W8, [X0+224]
	516 Compare W8, 0
	517 JumpIfNotEqual {519}
	518 Call 0x1C17DFC
	519 Move X0, X25
	520 Move X1, X31
	521 Move X2, X31
	522 Call Object.op_Inequality, X0, X1
	523 Move TEMP, X0
	524 And TEMP, TEMP, 1
	525 Compare TEMP, 1
	526 JumpIfNotEqual {533}
	527 Compare X25, 0
	528 JumpIfEqual {798}
	529 Move W8, [X25+80]
	530 Move X25, X21
	531 Compare W8, 0
	532 JumpIfNotEqual {534}
	533 Move X25, X21
	534 Move X0, X24
	535 Move X1, X31
	536 Call AttachedItemAnchor.get_grabbedItem, X0
	537 Move [X31+216], X0
	538 Add X0, X31, 216
	539 Move X1, X31
	540 Call NetworkBehaviourId.get_IsValid, X0
	541 Move TEMP, X0
	542 And TEMP, TEMP, 1
	543 Compare TEMP, 1
	544 JumpIfNotEqual {551}
	545 Move X21, X25
	546 Move W25, W26
	547 Move W8, [X28+24]
	548 Add X29, X29, 1
	549 Move W26, W25
	550 NotImplemented "Instruction CMP not yet implemented."
	551 Move X8, [X22+64]
	552 Compare X8, 0
	553 JumpIfEqual {559}
	554 Move X8, [X8+32]
	555 Compare X8, 0
	556 JumpIfEqual {559}
	557 Move W1, [X8]
	558 Move X21, X25
	559 Move X21, X25
	560 Move X1, X31
	561 Move W8, [X22+104]
	562 Move W25, 1
	563 NotImplemented "Instruction BFM not yet implemented."
	564 Move W3, 1
	565 Move X0, X24
	566 Move W2, W31
	567 Move X4, X31
	568 Move X5, X31
	569 Move X6, X31
	570 Call AttachedItemAnchor.RPC_TryGrabItem, X0, X1, X2, X3, X4
	571 Move X1, X31
	572 Move W8, [X22+104]
	573 Move W25, 1
	574 NotImplemented "Instruction BFM not yet implemented."
	575 Move W3, 1
	576 Move X0, X24
	577 Move W2, W31
	578 Move X4, X31
	579 Move X5, X31
	580 Move X6, X31
	581 Call AttachedItemAnchor.RPC_TryGrabItem, X0, X1, X2, X3, X4
	582 Move W25, W31
	583 Move X24, [X31+16]
	584 Move TEMP, X25
	585 And TEMP, TEMP, 1
	586 Compare TEMP, 1
	587 JumpIfEqual {618}
	588 Compare X24, 0
	589 JumpIfEqual {790}
	590 Move X8, 0x2359000
	591 Move X8, [X8+304]
	592 Add X1, X31, 232
	593 Move X0, X24
	594 Move X2, [X8]
	595 Call 0x21A5990, X0, X1
	596 Move TEMP, X0
	597 And TEMP, TEMP, 1
	598 Compare TEMP, 1
	599 JumpIfNotEqual {618}
	600 Move X22, [X31+232]
	601 Move X0, X19
	602 Move X1, X31
	603 Call Component.get_transform, X0
	604 Compare X0, 0
	605 JumpIfEqual {790}
	606 Move X1, X31
	607 Call Transform.get_forward, X0
	608 Compare X22, 0
	609 JumpIfEqual {790}
	610 Move S3, 3
	611 Multiply S2, S2, S3
	612 Multiply S1, S1, S3
	613 Multiply S0, S0, S3
	614 Move W1, 2
	615 Move X0, X22
	616 Move X2, X31
	617 Call Rigidbody.AddForce, X0, X1, X2
	618 Move X21, 0x2359000
	619 Move X21, [X21+184]
	620 Move X8, [X21]
	621 Move X8, [X8+184]
	622 Move W9, [X8+4]
	623 Move W10, [X8+8]
	624 Add W9, W9, 1
	625 Move [X8+4], W9
	626 Compare W10, 0
	627 JumpIfNotEqual {640}
	628 Move X0, X31
	629 Call Time.get_time
	630 Move X8, 0x2359000
	631 Move X8, [X8+312]
	632 Add X0, X31, 88
	633 Move [X31+88], X31
	634 Move X1, [X8]
	635 Call Nullable`1<Single>..ctor, X0, V0
	636 Move X8, [X21]
	637 Move X9, [X31+88]
	638 Move X8, [X8+184]
	639 Move [X8+8], X9
	640 Compare X24, 0
	641 JumpIfEqual {790}
	642 Move X0, X24
	643 Move X1, X31
	644 Call Component.get_transform, X0
	645 Compare X0, 0
	646 JumpIfEqual {790}
	647 Move X1, X31
	648 Call Transform.get_position, X0
	649 Move X21, 0x263A000
	650 Move W8, [X21+1939]
	651 Move V8, V0
	652 Move V9, V1
	653 Move V10, V2
	654 Compare W8, 0
	655 JumpIfNotEqual {661}
	656 Move X0, 0x2356000
	657 Move X0, [X0+1448]
	658 Call 0x1C17CF4
	659 Move W8, 1
	660 Move [X21+1939], W8
	661 Move X8, 0x2356000
	662 Move X8, [X8+1448]
	663 Move W0, 34
	664 Move V0, V8
	665 Move V1, V9
	666 Move X8, [X8]
	667 Move V2, V10
	668 Move X1, X31
	669 Move X8, [X8+184]
	670 Move S3, [X8]
	671 Move S4, [X8+4]
	672 Move S5, [X8+8]
	673 Move S6, [X8+12]
	674 Call NetworkVFX.PlayVFX, X0, X1, X2
	675 Move X21, [X19+72]
	676 Move X0, X19
	677 Move X1, X31
	678 Call Component.get_transform, X0
	679 Compare X0, 0
	680 JumpIfEqual {790}
	681 Move X1, X31
	682 Call Transform.get_position, X0
	683 Move S3, 1
	684 Move X0, X21
	685 Move X1, X31
	686 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	687 Move X8, 0x2359000
	688 Move X8, [X8+352]
	689 Move W1, 3
	690 Move X0, [X8]
	691 Call 0x1C17D6C
	692 Move X19, X0
	693 Move X0, X20
	694 Move X1, X31
	695 Call Object.get_name, X0
	696 Move X8, 0x2359000
	697 Move X21, 0x2359000
	698 Move X8, [X8+384]
	699 Move X21, [X21+360]
	700 Move X2, X0
	701 Add X0, X31, 144
	702 Move X1, [X8]
	703 Move X3, [X21]
	704 Move [X31+144], X31
	705 Move [X31+152], X31
	706 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	707 Compare X19, 0
	708 JumpIfEqual {790}
	709 Move W8, [X19+24]
	710 Compare W8, 0
	711 JumpIfEqual {791}
	712 Move V0, [X31+9]
	713 Move X8, 0x2359000
	714 Move X8, [X8+328]
	715 Move TEMP, 0
	716 Not TEMP
	717 Move X9, TEMP
	718 Move [X19+2], V0
	719 Add X0, X31, 88
	720 Move X8, [X8]
	721 Move X1, X31
	722 Move [X31+88], X8
	723 Move [X31+96], X9
	724 Move W8, [X20+40]
	725 Move [X31+104], W8
	726 Call Enum.ToString, X0
	727 Move X8, 0x2359000
	728 Move X8, [X8+368]
	729 Move X3, [X21]
	730 Move X2, X0
	731 Add X0, X31, 64
	732 Move X1, [X8]
	733 Move [X31+64], X31
	734 Move [X31+72], X31
	735 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	736 Move W8, [X19+24]
	737 NotImplemented "Instruction CMP not yet implemented."
	738 Move V0, [X31+4]
	739 Move X9, 0x2355000
	740 Add X1, X31, 60
	741 Move [X19+3], V0
	742 Move W8, [X20+32]
	743 Move X9, [X9+1880]
	744 Move [X31+60], W8
	745 Move X0, [X9]
	746 Call 0x1C17E04
	747 Move X8, 0x2359000
	748 Move X8, [X8+376]
	749 Move X3, [X21]
	750 Move X2, X0
	751 Add X0, X31, 32
	752 Move X1, [X8]
	753 Move [X31+32], X31
	754 Move [X31+40], X31
	755 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	756 Move W8, [X19+24]
	757 NotImplemented "Instruction CMP not yet implemented."
	758 Move V0, [X31+2]
	759 Move X8, 0x2355000
	760 Move [X19+4], V0
	761 Move X8, [X8+2896]
	762 Move X0, [X8]
	763 Move W8, [X0+224]
	764 Compare W8, 0
	765 JumpIfNotEqual {767}
	766 Call 0x1C17DFC
	767 Move X8, 0x2359000
	768 Move X8, [X8+392]
	769 Move X1, X19
	770 Move X2, X31
	771 Move X0, [X8]
	772 Call Analytics.Track, X0, X1
	773 Move X20, [X31+336]
	774 Move X19, [X31+344]
	775 Move X22, [X31+320]
	776 Move X21, [X31+328]
	777 Move X24, [X31+304]
	778 Move X23, [X31+312]
	779 Move X26, [X31+288]
	780 Move X25, [X31+296]
	781 Move X28, [X31+272]
	782 Move X27, [X31+280]
	783 Move X29, [X31+256]
	784 Move X30, [X31+264]
	785 Move D9, [X31+240]
	786 Move D8, [X31+248]
	787 Move V10, [X31+224]
	788 Add X31, X31, 352
	789 Return 
	790 Call 0x1C17F20
	791 Call 0x1C17F28
	792 Call 0x1C17F20
	793 Call 0x1C17F28
	794 Call 0x1C17F20
	795 Call 0x1C17F20
	796 Move [X31+16], X24
	797 Call 0x1C17F20
	798 Call 0x1C17F20
	799 And W21, W26, 1
	800 Move X24, [X31+16]
	801 Call 0x1C17F20
	802 Call 0x1C17F20
	803 Call 0x1C17F20
	804 And W21, W26, 1
	805 Move X24, [X31+16]
	806 Call 0x1C17F20
	807 Move [X31+16], X24
	808 Move X22, X0
	809 Move [X31+16], X24
	810 Move X22, X0
	811 And W21, W26, 1
	812 Move X22, X0
	813 Move W21, W31
	814 NotImplemented "Instruction CMP not yet implemented."
	815 Move X0, X22
	816 Call 0x3EB2AD0
	817 Move X22, X0
	818 Move X0, 0x2355000
	819 Move X0, [X0+2000]
	820 Call 0x1C17D08
	821 Move X8, [X22]
	822 Move X1, [X8]
	823 Call 0x1C18270
	824 Move TEMP, X0
	825 And TEMP, TEMP, 1
	826 Compare TEMP, 1
	827 JumpIfNotEqual {861}
	828 Move X22, [X22]
	829 Call 0x3EB2AE0
	830 Move X0, 0x2355000
	831 Move X0, [X0+1928]
	832 Call 0x1C17D08
	833 Move W8, [X0+224]
	834 Compare W8, 0
	835 JumpIfNotEqual {837}
	836 Call 0x1C17DFC
	837 Move X0, 0x2359000
	838 Move X0, [X0+400]
	839 Call 0x1C17D08
	840 Move X23, X0
	841 Move X0, 0x2359000
	842 Move X0, [X0+408]
	843 Call 0x1C17D08
	844 Move X24, X0
	845 Move X0, 0x2359000
	846 Move X0, [X0+416]
	847 Call 0x1C17D08
	848 Move X4, X0
	849 Move W5, 213
	850 Move X0, X23
	851 Move X1, X22
	852 Move X2, X31
	853 Move X3, X24
	854 Move X6, X31
	855 Call Log.Error, X0, X1, X2, X3, X4, X5
	856 Move X24, [X31+16]
	857 Move TEMP, X21
	858 And TEMP, TEMP, 1
	859 Compare TEMP, 1
	860 JumpIfNotEqual {588}
	861 Move W0, 8
	862 Call 0x3EB2AF0
	863 Move X8, [X22]
	864 Move [X0], X8
	865 Move X1, 0x2116000
	866 Add X1, X1, 3672
	867 Move X2, X31
	868 Call 0x3EB2B00
	869 Move X22, X0
	870 Call 0x3EB2AE0
	871 Move X0, X22
	872 Call 0x1D2D690
	873 Call 0x1991590

Method: System.Void UpdateCurrentPreview()

Disassembly:
	0x01D9EC74 B 0x1D9EC90
	0x01D9EC78 B 0x1D9EC90
	0x01D9EC7C B 0x1D9EC90
	0x01D9EC80 B 0x1D9EC90
	0x01D9EC84 B 0x1D9EC90
	0x01D9EC88 B 0x1D9EC90
	0x01D9EC8C B 0x1D9EC90
	0x01D9EC90 MOV X22, X0
	0x01D9EC94 AND W21, W26, 0x1
	0x01D9EC98 B 0x1D9ECA4
	0x01D9EC9C MOV X22, X0
	0x01D9ECA0 MOV W21, W31
	0x01D9ECA4 CMP W1, 0x1
	0x01D9ECA8 B.NE 0x1D9ED74
	0x01D9ECAC MOV X0, X22
	0x01D9ECB0 BL 0x3EB1AD0
	0x01D9ECB4 MOV X22, X0
	0x01D9ECB8 ADRP X0, 0x2355000
	0x01D9ECBC LDR X0, [X0 + 0x7D0]
	0x01D9ECC0 BL 0x1C16D08
	0x01D9ECC4 LDR X8, [X22]
	0x01D9ECC8 LDR X1, [X8]
	0x01D9ECCC BL 0x1C17270
	0x01D9ECD0 TBZ X0, 0x0, 0x1D9ED4C
	0x01D9ECD4 LDR X22, [X22]
	0x01D9ECD8 BL 0x3EB1AE0
	0x01D9ECDC ADRP X0, 0x2355000
	0x01D9ECE0 LDR X0, [X0 + 0x788]
	0x01D9ECE4 BL 0x1C16D08
	0x01D9ECE8 LDR W8, [X0 + 0xE0]
	0x01D9ECEC CBNZ W8, 0x1D9ECF4
	0x01D9ECF0 BL 0x1C16DFC
	0x01D9ECF4 ADRP X0, 0x2359000
	0x01D9ECF8 LDR X0, [X0 + 0x190]
	0x01D9ECFC BL 0x1C16D08
	0x01D9ED00 MOV X23, X0
	0x01D9ED04 ADRP X0, 0x2359000
	0x01D9ED08 LDR X0, [X0 + 0x198]
	0x01D9ED0C BL 0x1C16D08
	0x01D9ED10 MOV X24, X0
	0x01D9ED14 ADRP X0, 0x2359000
	0x01D9ED18 LDR X0, [X0 + 0x1A0]
	0x01D9ED1C BL 0x1C16D08
	0x01D9ED20 MOV X4, X0
	0x01D9ED24 MOVZ W5, 0xD5
	0x01D9ED28 MOV X0, X23
	0x01D9ED2C MOV X1, X22
	0x01D9ED30 MOV X2, X31
	0x01D9ED34 MOV X3, X24
	0x01D9ED38 MOV X6, X31
	0x01D9ED3C BL 0x35C23E0
	0x01D9ED40 LDR X24, [X31 + 0x10]
	0x01D9ED44 TBZ X21, 0x0, 0x1D9E918
	0x01D9ED48 B 0x1D9E978
	0x01D9ED4C MOVZ W0, 0x8
	0x01D9ED50 BL 0x3EB1AF0
	0x01D9ED54 LDR X8, [X22]
	0x01D9ED58 STR X8, [X0]
	0x01D9ED5C ADRP X1, 0x2116000
	0x01D9ED60 ADD X1, X1, 0xE58
	0x01D9ED64 MOV X2, X31
	0x01D9ED68 BL 0x3EB1B00
	0x01D9ED6C MOV X22, X0
	0x01D9ED70 BL 0x3EB1AE0
	0x01D9ED74 MOV X0, X22
	0x01D9ED78 BL 0x1D2C690
	0x01D9ED7C BL 0x1990590
	0x01D9ED80 STP X30, X23, [X31 - 0x30]!
	0x01D9ED84 STP X22, X21, [X31 + 0x10]
	0x01D9ED88 STP X20, X19, [X31 + 0x20]
	0x01D9ED8C ADRP X21, 0x263A000
	0x01D9ED90 ADRP X20, 0x2357000
	0x01D9ED94 LDRB W8, [X21 + 0xA5C]
	0x01D9ED98 LDR X20, [X20 + 0x5A8]
	0x01D9ED9C MOV X19, X0
	0x01D9EDA0 TBNZ X8, 0x0, 0x1D9EDE8
	0x01D9EDA4 ADRP X0, 0x2357000
	0x01D9EDA8 LDR X0, [X0 + 0x5B0]
	0x01D9EDAC BL 0x1C16CF4
	0x01D9EDB0 ADRP X0, 0x2356000
	0x01D9EDB4 LDR X0, [X0 + 0xE70]
	0x01D9EDB8 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x263B000
	007 Move W8, [X20+2650]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x2356000
	014 Move X0, [X0+1880]
	015 Call 0x1C17CF4
	016 Move X0, 0x235A000
	017 Move X0, [X0+256]
	018 Call 0x1C17CF4
	019 Move X0, 0x235A000
	020 Move X0, [X0+264]
	021 Call 0x1C17CF4
	022 Move X0, 0x235A000
	023 Move X0, [X0+272]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+2650], W8
	027 Move X0, [X19+32]
	028 Compare X0, 0
	029 JumpIfEqual {89}
	030 Move X21, 0x235A000
	031 Move X21, [X21+264]
	032 Move W1, [X19+104]
	033 Move X20, [X19+48]
	034 Move X2, [X21]
	035 Call List`1<Object>.get_Item, X0, X1
	036 Compare X0, 0
	037 JumpIfEqual {89}
	038 Move X8, 0x2356000
	039 Move X8, [X8+1880]
	040 Move W9, [X0+32]
	041 Move X22, 0x235A000
	042 Add X1, X31, 12
	043 Move X0, [X8]
	044 Move X22, [X22+272]
	045 Move [X31+12], W9
	046 Call 0x1C17E04
	047 Move X8, [X22]
	048 Move X1, X0
	049 Move X2, X31
	050 Move X0, X8
	051 Call String.Format, X0, X1
	052 Compare X20, 0
	053 JumpIfEqual {89}
	054 Move X8, [X20]
	055 Move X1, X0
	056 Move X0, X20
	057 Move X9, [X8+1368]
	058 Move X2, [X8+1376]
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X0, [X19+56]
	061 Compare X0, 0
	062 JumpIfEqual {89}
	063 Move W1, 1
	064 Move X2, X31
	065 Call Behaviour.set_enabled, X0, X1
	066 Move X0, [X19+32]
	067 Compare X0, 0
	068 JumpIfEqual {89}
	069 Move W20, W31
	070 Move W8, [X0+24]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X2, [X21]
	073 Move W1, W20
	074 Call List`1<Object>.get_Item, X0, X1
	075 Move X1, X0
	076 Move X0, X19
	077 Call ItemVendingMachine.GetPreviewGameObject, X0, X1
	078 Compare X0, 0
	079 JumpIfEqual {89}
	080 Move W8, [X19+104]
	081 Move X2, X31
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction CSET not yet implemented."
	084 Call GameObject.SetActive, X0, X1
	085 Move X0, [X19+32]
	086 Add W20, W20, 1
	087 Compare X0, 0
	088 JumpIfNotEqual {70}
	089 Call 0x1C17F20
	090 Move X20, [X31+32]
	091 Move X19, [X31+40]
	092 Move X22, [X31+16]
	093 Move X21, [X31+24]
	094 Move X30, [X31+48]
	095 Return 

Method: UnityEngine.GameObject GetPreviewGameObject(AnimalCompany.ItemData itemData)

Disassembly:
	0x01D9FEE4 ADR X10, 0x10
	0x01D9FEE8 LDRB W11, [X9, X8, LSL]
	0x01D9FEEC ADD X10, X10, X11, 0x2, LSL
	0x01D9FEF0 BR X10
	0x01D9FEF4 MOVN W8, 0x0
	0x01D9FEF8 STR W8, [X19 + 0x10]
	0x01D9FEFC CBZ X21, 0x1DA00B8
	0x01D9FF00 LDR X0, [X21 + 0x88]
	0x01D9FF04 CBZ X0, 0x1DA00B8
	0x01D9FF08 LDR X20, [X21 + 0x80]
	0x01D9FF0C MOV X1, X31
	0x01D9FF10 BL 0x3C3FA04
	0x01D9FF14 CBZ X20, 0x1DA00B8
	0x01D9FF18 FMOV S3, 7
	0x01D9FF1C FMUL S2, S2, S3
	0x01D9FF20 FMUL S1, S1, S3
	0x01D9FF24 FMUL S0, S0, S3
	0x01D9FF28 MOV X0, X20
	0x01D9FF2C MOV X1, X31
	0x01D9FF30 BL 0x1D8F63C
	0x01D9FF34 MOVZ W0, 0x1
	0x01D9FF38 STR X31, [X19 + 0x18]
	0x01D9FF3C STR W0, [X19 + 0x10]
	0x01D9FF40 B 0x1DA00A8
	0x01D9FF44 MOVN W8, 0x0
	0x01D9FF48 FMOV S8, W31
	0x01D9FF4C STR W31, [X19 + 0x28]
	0x01D9FF50 STR W8, [X19 + 0x10]
	0x01D9FF54 B 0x1D9FF70
	0x01D9FF58 LDR V8, [X19 + 0x28]
	0x01D9FF5C FMOV S0, 2
	0x01D9FF60 MOVN W8, 0x0
	0x01D9FF64 STR W8, [X19 + 0x10]
	0x01D9FF68 FCMP S8, S0
	0x01D9FF6C B.PL 0x1DA0078
	0x01D9FF70 MOV X0, X31
	0x01D9FF74 BL 0x3C3C714
	0x01D9FF78 FADD S0, S8, S0
	0x01D9FF7C STR S0, [X19 + 0x28]
	0x01D9FF80 CBZ X21, 0x1DA00B8
	0x01D9FF84 LDR X0, [X21 + 0x80]
	0x01D9FF88 CBZ X0, 0x1DA00B8
	0x01D9FF8C MOV X1, X31
	0x01D9FF90 BL 0x1D8D0A8
	0x01D9FF94 LDR X20, [X21 + 0x80]
	0x01D9FF98 TBZ X0, 0x0, 0x1DA002C
	0x01D9FF9C LDR X0, [X21 + 0x88]
	0x01D9FFA0 CBZ X0, 0x1DA00B8
	0x01D9FFA4 MOV X1, X31
	0x01D9FFA8 BL 0x3C3FA04
	0x01D9FFAC CBZ X20, 0x1DA00B8
	0x01D9FFB0 ADRP X8, 0xFFFFFFFFFED4B000
	0x01D9FFB4 LDR V3, [X8 + 0x414]
	0x01D9FFB8 MOV X0, X20
	0x01D9FFBC MOV X1, X31
	0x01D9FFC0 FMUL S2, S2, S3
	0x01D9FFC4 FMUL S1, S1, S3
	0x01D9FFC8 FMUL S0, S0, S3
	0x01D9FFCC BL 0x1D8F63C
	0x01D9FFD0 LDR X0, [X21 + 0x80]
	0x01D9FFD4 CBZ X0, 0x1DA00B8
	0x01D9FFD8 ADD X1, X31, 0xC
	0x01D9FFDC MOV X2, X31
	0x01D9FFE0 BL 0x1D8EF8C
	0x01D9FFE4 TBZ X0, 0x0, 0x1DA006C
	0x01D9FFE8 ADRP X8, 0xFFFFFFFFFED4B000
	0x01D9FFEC ADRP X9, 0xFFFFFFFFFED4B000
	0x01D9FFF0 LDR W0, [X31 + 0xC]
	0x01D9FFF4 LDR V0, [X8 + 0x44C]
	0x01D9FFF8 LDR V1, [X9 + 0xBC]
	0x01D9FFFC MOV X1, X31
	0x01DA0000 BL 0x1DC2324

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x263A000
	007 Move W8, [X21+2651]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x2359000
	015 Move X0, [X0+440]
	016 Call 0x1C17CF4
	017 Move X0, 0x2359000
	018 Move X0, [X0+448]
	019 Call 0x1C17CF4
	020 Move X0, 0x2359000
	021 Move X0, [X0+456]
	022 Call 0x1C17CF4
	023 Move X0, 0x2359000
	024 Move X0, [X0+464]
	025 Call 0x1C17CF4
	026 Move X0, 0x2355000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+2651], W8
	031 Move X0, [X20+96]
	032 Compare X0, 0
	033 JumpIfEqual {89}
	034 Move X8, 0x2359000
	035 Move X8, [X8+448]
	036 Move X1, X19
	037 Move X2, [X8]
	038 Call Dictionary`2<Object, Object>.ContainsKey, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {75}
	043 Compare X19, 0
	044 JumpIfEqual {89}
	045 Move X8, 0x2355000
	046 Move X8, [X8+1432]
	047 Move X21, [X19+48]
	048 Move X22, [X20+64]
	049 Move X0, [X8]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X8, 0x2359000
	055 Move X8, [X8+464]
	056 Move X0, X21
	057 Move X1, X22
	058 Move X2, [X8]
	059 Call 0x222E488, X0, X1
	060 Compare X0, 0
	061 JumpIfEqual {89}
	062 Move W1, W31
	063 Move X2, X31
	064 Move X21, X0
	065 Call GameObject.SetActive, X0, X1
	066 Move X0, [X20+96]
	067 Compare X0, 0
	068 JumpIfEqual {89}
	069 Move X8, 0x2359000
	070 Move X8, [X8+440]
	071 Move X1, X19
	072 Move X2, X21
	073 Move X3, [X8]
	074 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	075 Move X0, [X20+96]
	076 Compare X0, 0
	077 JumpIfEqual {89}
	078 Move X8, 0x2359000
	079 Move X8, [X8+456]
	080 Move X1, X19
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X2, [X8]
	086 Move X30, [X31+48]
	087 Call Dictionary`2<Object, Object>.get_Item, X0, X1
	088 Return X0
	089 Call 0x1C17F20

Method: System.Void AnimateNotEnoughMoney()

Disassembly:
	0x01D9FD80 FMUL S0, S0, S1
	0x01D9FD84 FADD S2, S0, S10
	0x01D9FD88 FMOV S0, 1
	0x01D9FD8C FMOV S1, 1
	0x01D9FD90 BL 0x3C3FC4C
	0x01D9FD94 LDR X0, [X19 + 0xA8]
	0x01D9FD98 CBZ X0, 0x1D9FE48
	0x01D9FD9C FMUL S0, S9, S9
	0x01D9FDA0 FSUB S0, S8, S0
	0x01D9FDA4 MOV X1, X31
	0x01D9FDA8 BL 0x3BFC8DC
	0x01D9FDAC MOVZ W0, 0x1
	0x01D9FDB0 STR X31, [X20 + 0x18]
	0x01D9FDB4 STR W0, [X20 + 0x10]
	0x01D9FDB8 B 0x1D9FE34
	0x01D9FDBC CBZ X19, 0x1D9FE48
	0x01D9FDC0 LDR X0, [X19 + 0x90]
	0x01D9FDC4 CBZ X0, 0x1D9FE48
	0x01D9FDC8 MOV X1, X31
	0x01D9FDCC BL 0x3C1341C
	0x01D9FDD0 ADRP X21, 0x2358000
	0x01D9FDD4 LDR X21, [X21 + 0x1F8]
	0x01D9FDD8 MOV X20, X0
	0x01D9FDDC LDR X8, [X21]
	0x01D9FDE0 LDR W9, [X8 + 0xE0]
	0x01D9FDE4 CBNZ W9, 0x1D9FDF4
	0x01D9FDE8 MOV X0, X8
	0x01D9FDEC BL 0x1C16DFC
	0x01D9FDF0 LDR X8, [X21]
	0x01D9FDF4 CBZ X20, 0x1D9FE48
	0x01D9FDF8 LDR X8, [X8 + 0xB8]
	0x01D9FDFC MOV X0, X20
	0x01D9FE00 MOV X2, X31
	0x01D9FE04 LDP S2, S3, [X8 + 0x30]
	0x01D9FE08 LDP S0, S1, [X8 + 0x28]
	0x01D9FE0C LDR W1, [X8 + 0x4]
	0x01D9FE10 BL 0x3C14988
	0x01D9FE14 LDR X0, [X19 + 0xA8]
	0x01D9FE18 CBZ X0, 0x1D9FE48
	0x01D9FE1C MOV X1, X31
	0x01D9FE20 BL 0x3BFCC04
	0x01D9FE24 MOV X0, X19
	0x01D9FE28 MOV W1, W31
	0x01D9FE2C BL 0x1D9F408
	0x01D9FE30 MOV W0, W31
	0x01D9FE34 LDP X20, X19, [X31 + 0x30]
	0x01D9FE38 LDP X30, X21, [X31 + 0x20]
	0x01D9FE3C LDP D9, D8, [X31 + 0x10]
	0x01D9FE40 LDR V10, [X31], #0x40
	0x01D9FE44 RET
	0x01D9FE48 BL 0x1C16F20
	0x01D9FE4C LDR X0, [X0 + 0x18]
	0x01D9FE50 RET
	0x01D9FE54 STP X30, X19, [X31 - 0x10]!
	0x01D9FE58 ADRP X0, 0x2354000
	0x01D9FE5C LDR X0, [X0 + 0xB40]
	0x01D9FE60 BL 0x1C16D08
	0x01D9FE64 BL 0x1C16F10
	0x01D9FE68 MOV X1, X31
	0x01D9FE6C MOV X19, X0
	0x01D9FE70 BL 0x3380310
	0x01D9FE74 ADRP X0, 0x2358000
	0x01D9FE78 LDR X0, [X0 + 0x228]
	0x01D9FE7C BL 0x1C16D08
	0x01D9FE80 MOV X1, X0
	0x01D9FE84 MOV X0, X19
	0x01D9FE88 BL 0x1C16DEC
	0x01D9FE8C LDR X0, [X0 + 0x18]
	0x01D9FE90 RET
	0x01D9FE94 RET
	0x01D9FE98 STR D8, [X31 - 0x30]!
	0x01D9FE9C STP X30, X21, [X31 + 0x10]
	0x01D9FEA0 STP X20, X19, [X31 + 0x20]
	0x01D9FEA4 ADRP X20, 0x2639000
	0x01D9FEA8 LDRB W8, [X20 + 0xA6C]
	0x01D9FEAC MOV X19, X0
	0x01D9FEB0 TBNZ X8, 0x0, 0x1D9FEC8
	0x01D9FEB4 ADRP X0, 0x2357000
	0x01D9FEB8 LDR X0, [X0 + 0xC30]
	0x01D9FEBC BL 0x1C16CF4
	0x01D9FEC0 MOVZ W8, 0x1
	0x01D9FEC4 STRB W8, [X20 + 0xA6C]
	0x01D9FEC8 STR W31, [X31 + 0xC]
	0x01D9FECC LDR W8, [X19 + 0x10]
	0x01D9FED0 CMP W8, 0x3
	0x01D9FED4 B.HI 0x1DA0024
	0x01D9FED8 LDR X21, [X19 + 0x20]
	0x01D9FEDC ADRP X9, 0xFFFFFFFFFED8E000
	0x01D9FEE0 ADD X9, X9, 0x920

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x263A000
	008 Move X20, 0x2357000
	009 Move W8, [X21+2652]
	010 Move X20, [X20+1448]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x2357000
	017 Move X0, [X0+1456]
	018 Call 0x1C17CF4
	019 Move X0, 0x2356000
	020 Move X0, [X0+3696]
	021 Call 0x1C17CF4
	022 Move X0, 0x2359000
	023 Move X0, [X0+424]
	024 Call 0x1C17CF4
	025 Move X0, 0x2359000
	026 Move X0, [X0+432]
	027 Call 0x1C17CF4
	028 Move X0, 0x2357000
	029 Move X0, [X0+1448]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+2652], W8
	033 Move X0, [X20]
	034 Move W20, [X19+108]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move W0, W20
	040 Move X1, X31
	041 Call LeanTween.cancel, X0
	042 Move X8, -19611648
	043 Move V2, [X8+1100]
	044 Move S0, W31
	045 Move S1, 1
	046 Move X0, X31
	047 Call LeanTween.value, V0, V1, V2
	048 Compare X0, 0
	049 JumpIfEqual {103}
	050 Move X20, 0x2357000
	051 Move X21, 0x2359000
	052 Move X20, [X20+1456]
	053 Move X21, [X21+424]
	054 Move W1, 1
	055 Move X2, X31
	056 Call LTDescr.setLoopPingPong, X0, X1
	057 Move X8, [X20]
	058 Move X20, X0
	059 Move X0, X8
	060 Call 0x1C17F10
	061 Move X2, [X21]
	062 Move X1, X19
	063 Move X3, X31
	064 Move X21, X0
	065 Call Action`1<Single>..ctor, X0, X1, X2
	066 Compare X20, 0
	067 JumpIfEqual {103}
	068 Move X22, 0x2356000
	069 Move X23, 0x2359000
	070 Move X22, [X22+3696]
	071 Move X23, [X23+432]
	072 Move X0, X20
	073 Move X1, X21
	074 Move X2, X31
	075 Call LTDescr.setOnUpdate, X0, X1
	076 Move X8, [X22]
	077 Move X20, X0
	078 Move X0, X8
	079 Call 0x1C17F10
	080 Move X2, [X23]
	081 Move X1, X19
	082 Move X3, X31
	083 Move X21, X0
	084 Call Action..ctor, X0, X1, X2
	085 Compare X20, 0
	086 JumpIfEqual {103}
	087 Move X0, X20
	088 Move X1, X21
	089 Move X2, X31
	090 Call LTDescr.setOnComplete, X0, X1
	091 Compare X0, 0
	092 JumpIfEqual {103}
	093 Move X1, X31
	094 Call LTDescr.get_id, X0
	095 Move [X19+108], W0
	096 Move X20, [X31+32]
	097 Move X19, [X31+40]
	098 Move X22, [X31+16]
	099 Move X21, [X31+24]
	100 Move X30, [X31+48]
	101 Move X23, [X31+56]
	102 Return 
	103 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01DA0004 B 0x1DA006C
	0x01DA0008 MOVN W8, 0x0
	0x01DA000C STR W8, [X19 + 0x10]
	0x01DA0010 CBZ X21, 0x1DA00B8
	0x01DA0014 LDR X0, [X21 + 0x80]
	0x01DA0018 CBZ X0, 0x1DA00B8
	0x01DA001C MOV X1, X31
	0x01DA0020 BL 0x1D948B4
	0x01DA0024 MOV W0, W31
	0x01DA0028 B 0x1DA00A8
	0x01DA002C CBZ X20, 0x1DA00B8
	0x01DA0030 LDR X0, [X21 + 0x88]
	0x01DA0034 CBZ X0, 0x1DA00B8
	0x01DA0038 LDR X20, [X20 + 0x168]
	0x01DA003C MOV X1, X31
	0x01DA0040 BL 0x3C3FA04
	0x01DA0044 CBZ X20, 0x1DA00B8
	0x01DA0048 ADRP X8, 0xFFFFFFFFFED4A000
	0x01DA004C LDR V3, [X8 + 0x414]
	0x01DA0050 MOVZ W1, 0x2
	0x01DA0054 MOV X0, X20
	0x01DA0058 MOV X2, X31
	0x01DA005C FMUL S2, S2, S3
	0x01DA0060 FMUL S1, S1, S3
	0x01DA0064 FMUL S0, S0, S3
	0x01DA0068 BL 0x3C8F3C4
	0x01DA006C MOVZ W8, 0x2
	0x01DA0070 STR X31, [X19 + 0x18]
	0x01DA0074 B 0x1DA00A0
	0x01DA0078 ADRP X8, 0x2356000
	0x01DA007C LDR X8, [X8 + 0xC30]
	0x01DA0080 LDR X0, [X8]
	0x01DA0084 BL 0x1C16F10
	0x01DA0088 FMOV S0, 4
	0x01DA008C MOV X1, X31
	0x01DA0090 MOV X20, X0
	0x01DA0094 BL 0x3C3A634
	0x01DA0098 STR X20, [X19 + 0x18]
	0x01DA009C MOVZ W8, 0x3
	0x01DA00A0 STR W8, [X19 + 0x10]
	0x01DA00A4 MOVZ W0, 0x1
	0x01DA00A8 LDP X20, X19, [X31 + 0x20]
	0x01DA00AC LDP X30, X21, [X31 + 0x10]
	0x01DA00B0 LDR V8, [X31], #0x30
	0x01DA00B4 RET

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move S0, W31
	008 Move S1, 1
	009 Move S2, W31
	010 Move S3, 1
	011 Move X0, X31
	012 Call Gizmos.set_color, X0
	013 Move X0, [X19+64]
	014 Compare X0, 0
	015 JumpIfEqual {53}
	016 Move X1, X31
	017 Call Transform.get_position, X0
	018 Move X19, 0x2639000
	019 Move W8, [X19+2139]
	020 Move V8, V0
	021 Move V9, V1
	022 Move V10, V2
	023 Compare W8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, 0x2354000
	026 Move X0, [X0+1440]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X19+2139], W8
	030 Move X8, 0x2354000
	031 Move X8, [X8+1440]
	032 Move X9, -19615744
	033 Move V0, [X9+860]
	034 Move X30, [X31+32]
	035 Move X19, [X31+40]
	036 Move X8, [X8]
	037 Move X0, X31
	038 Move X8, [X8+184]
	039 Move S1, [X8+12]
	040 Move S2, [X8+16]
	041 Move V5, [X8+20]
	042 Multiply S3, S1, S0
	043 Multiply S4, S2, S0
	044 Multiply S5, S5, S0
	045 Move V0, V8
	046 Move V1, V9
	047 Move D9, [X31+16]
	048 Move D8, [X31+24]
	049 Move V2, V10
	050 Move V10, [X31+48]
	051 Call Gizmos.DrawWireCube, X0, X1
	052 Return 
	053 Call 0x1C17F20

Method: System.Void TestBuy()

Disassembly:
	0x01DA00B8 BL 0x1C16F20

ISIL:
	001 Call ItemVendingMachine.TryToBuy, X0
	002 Return 

Method: System.Void TestNext()

Disassembly:
	0x01DA00BC LDR X0, [X0 + 0x18]
	0x01DA00C0 RET

ISIL:
	001 Move W1, 1
	002 Call ItemVendingMachine.SwitchCurrentItem, X0, X1
	003 Return 

Method: System.Void TestPrev()

Disassembly:
	0x01DA00C4 STP X30, X19, [X31 - 0x10]!
	0x01DA00C8 ADRP X0, 0x2353000

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W1, TEMP
	004 Call ItemVendingMachine.SwitchCurrentItem, X0, X1
	005 Return 

Method: System.Void .ctor()

Disassembly:
	0x01DA00CC LDR X0, [X0 + 0xB40]
	0x01DA00D0 BL 0x1C16D08
	0x01DA00D4 BL 0x1C16F10
	0x01DA00D8 MOV X1, X31
	0x01DA00DC MOV X19, X0
	0x01DA00E0 BL 0x3380310
	0x01DA00E4 ADRP X0, 0x2357000
	0x01DA00E8 LDR X0, [X0 + 0x230]
	0x01DA00EC BL 0x1C16D08
	0x01DA00F0 MOV X1, X0
	0x01DA00F4 MOV X0, X19
	0x01DA00F8 BL 0x1C16DEC
	0x01DA00FC LDR X0, [X0 + 0x18]
	0x01DA0100 RET
	0x01DA0104 STP X30, X19, [X31 - 0x10]!
	0x01DA0108 LDR X8, [X0 + 0x50]
	0x01DA010C CBZ X8, 0x1DA0124
	0x01DA0110 LDR W8, [X8]
	0x01DA0114 CMP W8, 0x0
	0x01DA0118 CSET W0, NE
	0x01DA011C LDP X30, X19, [X31], #0x10
	0x01DA0120 RET
	0x01DA0124 ADRP X0, 0x2353000
	0x01DA0128 LDR X0, [X0 + 0x5B0]
	0x01DA012C BL 0x1C16D08
	0x01DA0130 BL 0x1C16F10
	0x01DA0134 MOV X19, X0
	0x01DA0138 ADRP X0, 0x2357000
	0x01DA013C LDR X0, [X0 + 0x238]
	0x01DA0140 BL 0x1C16D08
	0x01DA0144 MOV X1, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2639000
	007 Move X22, 0x2358000
	008 Move X20, 0x2358000
	009 Move W8, [X21+2653]
	010 Move X22, [X22+472]
	011 Move X20, [X20+480]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2358000
	018 Move X0, [X0+480]
	019 Call 0x1C17CF4
	020 Move X0, 0x2358000
	021 Move X0, [X0+472]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2653], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, [X20]
	028 Move X20, X0
	029 Call Dictionary`2<Object, Object>..ctor, X0
	030 Move [X19+96], X20
	031 Move X0, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X1, X31
	037 Move X30, [X31+48]
	038 Call MonoBehaviour..ctor, X0
	039 Return 

Method: System.Boolean <HandleUserIsDeveloperChanged>b__22_0(AnimalCompany.ItemData item)

Disassembly:
	0x01DA0148 MOV X0, X19
	0x01DA014C MOV X2, X31
	0x01DA0150 BL 0x337DF1C
	0x01DA0154 ADRP X0, 0x2357000
	0x01DA0158 LDR X0, [X0 + 0x240]
	0x01DA015C BL 0x1C16D08
	0x01DA0160 MOV X1, X0
	0x01DA0164 MOV X0, X19
	0x01DA0168 BL 0x1C16DEC
	0x01DA016C STP X30, X19, [X31 - 0x10]!
	0x01DA0170 LDR X8, [X0 + 0x50]
	0x01DA0174 CBZ X8, 0x1DA0188
	0x01DA0178 AND W9, W1, 0x1
	0x01DA017C STR W9, [X8]
	0x01DA0180 LDP X30, X19, [X31], #0x10
	0x01DA0184 RET
	0x01DA0188 ADRP X0, 0x2353000
	0x01DA018C LDR X0, [X0 + 0x5B0]
	0x01DA0190 BL 0x1C16D08
	0x01DA0194 BL 0x1C16F10
	0x01DA0198 MOV X19, X0
	0x01DA019C ADRP X0, 0x2357000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2639000
	006 Move W8, [X21+2654]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2358000
	014 Move X0, [X0+488]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2654], W8
	018 Move X0, [X20+40]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0x2358000
	022 Move X8, [X8+488]
	023 Move X1, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call List`1<Object>.Contains, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: System.Void <AnimateNotEnoughMoney>b__31_0(System.Single val)

Disassembly:
	0x01DA01A0 LDR X0, [X0 + 0x238]
	0x01DA01A4 BL 0x1C16D08
	0x01DA01A8 MOV X1, X0
	0x01DA01AC MOV X0, X19
	0x01DA01B0 MOV X2, X31
	0x01DA01B4 BL 0x337DF1C
	0x01DA01B8 ADRP X0, 0x2357000
	0x01DA01BC LDR X0, [X0 + 0x248]
	0x01DA01C0 BL 0x1C16D08
	0x01DA01C4 MOV X1, X0
	0x01DA01C8 MOV X0, X19
	0x01DA01CC BL 0x1C16DEC
	0x01DA01D0 STR X30, [X31 - 0x20]!
	0x01DA01D4 STP X20, X19, [X31 + 0x10]
	0x01DA01D8 ADRP X19, 0x2638000
	0x01DA01DC ADRP X20, 0x2353000
	0x01DA01E0 LDRB W8, [X19 + 0xA6D]
	0x01DA01E4 LDR X20, [X20 + 0x5D8]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {19}
	005 Move X8, [X0]
	006 Move S2, 1
	007 Move S1, W31
	008 Subtract S5, S2, S0
	009 Move X2, [X8+680]
	010 Move X1, [X8+688]
	011 Multiply S4, S0, S1
	012 Multiply S6, S5, S1
	013 Add S3, S5, S0
	014 Add S2, S4, S6
	015 Add S1, S4, S5
	016 Add S0, S6, S0
	017 Move X30, [X31+16]
	018 CallNoReturn X2
	019 Call 0x1C17F20

Method: System.Void <AnimateNotEnoughMoney>b__31_1()

Disassembly:
	0x01DA01E8 TBNZ X8, 0x0, 0x1DA0200
	0x01DA01EC ADRP X0, 0x2353000
	0x01DA01F0 LDR X0, [X0 + 0x5D8]
	0x01DA01F4 BL 0x1C16CF4
	0x01DA01F8 MOVZ W8, 0x1
	0x01DA01FC STRB W8, [X19 + 0xA6D]
	0x01DA0200 LDR X0, [X20]
	0x01DA0204 LDR W8, [X0 + 0xE0]
	0x01DA0208 CBNZ W8, 0x1DA0214
	0x01DA020C BL 0x1C16DFC
	0x01DA0210 LDR X0, [X20]
	0x01DA0214 LDR X8, [X0 + 0xB8]
	0x01DA0218 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+48]
	003 Compare X0, 0
	004 JumpIfEqual {14}
	005 Move X8, [X0]
	006 Move S0, W31
	007 Move S1, 1
	008 Move S2, W31
	009 Move X2, [X8+680]
	010 Move X1, [X8+688]
	011 Move S3, 1
	012 Move X30, [X31+16]
	013 CallNoReturn X2
	014 Call 0x1C17F20

