Type: AnimalCompany.IAPCurrencyPacksManager

Method: System.Void Awake()

Disassembly:
	0x01D64A00 B.CS 0x1D64AE0
	0x01D64A04 ADD X8, X8, W9, 0x3, SXTW
	0x01D64A08 LDR X8, [X8 + 0x20]
	0x01D64A0C STR X8, [X19 + 0x40]
	0x01D64A10 CBZ X8, 0x1D64ADC
	0x01D64A14 LDR X0, [X21]
	0x01D64A18 LDR X20, [X8 + 0x28]
	0x01D64A1C LDR W9, [X0 + 0xE0]
	0x01D64A20 CBNZ W9, 0x1D64A28
	0x01D64A24 BL 0x1C16DFC
	0x01D64A28 MOV X0, X20
	0x01D64A2C MOV X1, X31
	0x01D64A30 MOV X2, X31
	0x01D64A34 BL 0x3C354F8
	0x01D64A38 TBNZ X0, 0x0, 0x1D64AB8
	0x01D64A3C LDR X8, [X19 + 0x40]
	0x01D64A40 CBZ X8, 0x1D64ADC
	0x01D64A44 LDR X0, [X21]
	0x01D64A48 LDR X20, [X8 + 0x20]
	0x01D64A4C LDR W9, [X0 + 0xE0]
	0x01D64A50 CBNZ W9, 0x1D64A58
	0x01D64A54 BL 0x1C16DFC
	0x01D64A58 MOV X0, X20
	0x01D64A5C MOV X1, X31
	0x01D64A60 MOV X2, X31
	0x01D64A64 BL 0x3C354F8
	0x01D64A68 TBNZ X0, 0x0, 0x1D64A9C
	0x01D64A6C LDR W9, [X19 + 0x38]
	0x01D64A70 LDR X8, [X19 + 0x30]
	0x01D64A74 STR X31, [X19 + 0x40]
	0x01D64A78 ADD W9, W9, 0x1
	0x01D64A7C STR W9, [X19 + 0x38]
	0x01D64A80 CBZ X8, 0x1D64ADC
	0x01D64A84 LDR W10, [X8 + 0x18]
	0x01D64A88 CMP W9, W10
	0x01D64A8C B.LT 0x1D64A00
	0x01D64A90 MOV W0, W31
	0x01D64A94 STR X31, [X19 + 0x30]
	0x01D64A98 B 0x1D64AD0
	0x01D64A9C LDR X8, [X19 + 0x40]
	0x01D64AA0 CBZ X8, 0x1D64ADC
	0x01D64AA4 LDR X8, [X8 + 0x20]
	0x01D64AA8 MOVZ W9, 0x2
	0x01D64AAC STR W9, [X19 + 0x10]
	0x01D64AB0 MOVZ W0, 0x1
	0x01D64AB4 B 0x1D64ACC
	0x01D64AB8 LDR X8, [X19 + 0x40]
	0x01D64ABC CBZ X8, 0x1D64ADC
	0x01D64AC0 LDR X8, [X8 + 0x28]
	0x01D64AC4 MOVZ W0, 0x1
	0x01D64AC8 STR W0, [X19 + 0x10]
	0x01D64ACC STR X8, [X19 + 0x18]
	0x01D64AD0 LDP X20, X19, [X31 + 0x10]
	0x01D64AD4 LDP X30, X21, [X31], #0x20
	0x01D64AD8 RET
	0x01D64ADC BL 0x1C16F20
	0x01D64AE0 BL 0x1C16F28
	0x01D64AE4 LDR X0, [X0 + 0x18]
	0x01D64AE8 RET
	0x01D64AEC STP X30, X19, [X31 - 0x10]!
	0x01D64AF0 ADRP X0, 0x238F000
	0x01D64AF4 LDR X0, [X0 + 0xB40]
	0x01D64AF8 BL 0x1C16D08
	0x01D64AFC BL 0x1C16F10
	0x01D64B00 MOV X1, X31
	0x01D64B04 MOV X19, X0
	0x01D64B08 BL 0x3380310
	0x01D64B0C ADRP X0, 0x2391000
	0x01D64B10 LDR X0, [X0 + 0x878]
	0x01D64B14 BL 0x1C16D08
	0x01D64B18 MOV X1, X0
	0x01D64B1C MOV X0, X19
	0x01D64B20 BL 0x1C16DEC
	0x01D64B24 LDR X0, [X0 + 0x18]
	0x01D64B28 RET
	0x01D64B2C STR X30, [X31 - 0x20]!
	0x01D64B30 STP X20, X19, [X31 + 0x10]
	0x01D64B34 ADRP X20, 0x2674000
	0x01D64B38 LDRB W8, [X20 + 0x865]
	0x01D64B3C MOV X19, X0
	0x01D64B40 TBNZ X8, 0x0, 0x1D64B58
	0x01D64B44 ADRP X0, 0x2391000
	0x01D64B48 LDR X0, [X0 + 0x880]
	0x01D64B4C BL 0x1C16CF4
	0x01D64B50 MOVZ W8, 0x1
	0x01D64B54 STRB W8, [X20 + 0x865]
	0x01D64B58 LDR W8, [X19 + 0x10]
	0x01D64B5C ADDS W31, W8, 0x2
	0x01D64B60 B.NE 0x1D64B80
	0x01D64B64 LDR W20, [X19 + 0x20]
	0x01D64B68 MOV X0, X31
	0x01D64B6C BL 0x33C151C
	0x01D64B70 CMP W20, W0
	0x01D64B74 B.NE 0x1D64B80
	0x01D64B78 STR W31, [X19 + 0x10]
	0x01D64B7C B 0x1D64BB8
	0x01D64B80 ADRP X8, 0x2391000
	0x01D64B84 LDR X8, [X8 + 0x880]
	0x01D64B88 LDR X0, [X8]
	0x01D64B8C BL 0x1C16F10
	0x01D64B90 MOV X1, X31
	0x01D64B94 MOV X20, X0
	0x01D64B98 BL 0x33BDD8C
	0x01D64B9C MOV X0, X31
	0x01D64BA0 STR W31, [X20 + 0x10]
	0x01D64BA4 BL 0x33C151C
	0x01D64BA8 STR W0, [X20 + 0x20]
	0x01D64BAC LDR X8, [X19 + 0x28]
	0x01D64BB0 MOV X19, X20
	0x01D64BB4 STR X8, [X20 + 0x28]
	0x01D64BB8 MOV X0, X19
	0x01D64BBC LDP X20, X19, [X31 + 0x10]
	0x01D64BC0 LDR X30, [X31], #0x20
	0x01D64BC4 RET
	0x01D64BC8 B 0x1D64B2C
	0x01D64BCC STR X30, [X31 - 0x20]!
	0x01D64BD0 STP X20, X19, [X31 + 0x10]
	0x01D64BD4 MOV W19, W1
	0x01D64BD8 MOV X1, X31
	0x01D64BDC MOV X20, X0
	0x01D64BE0 BL 0x33BDD8C
	0x01D64BE4 MOV X0, X31
	0x01D64BE8 STR W19, [X20 + 0x10]
	0x01D64BEC BL 0x33C151C
	0x01D64BF0 STR W0, [X20 + 0x20]
	0x01D64BF4 LDP X20, X19, [X31 + 0x10]
	0x01D64BF8 LDR X30, [X31], #0x20
	0x01D64BFC RET
	0x01D64C00 RET
	0x01D64C04 STP X30, X21, [X31 - 0x20]!
	0x01D64C08 STP X20, X19, [X31 + 0x10]
	0x01D64C0C ADRP X20, 0x2674000
	0x01D64C10 LDRB W8, [X20 + 0x866]
	0x01D64C14 MOV X19, X0
	0x01D64C18 TBNZ X8, 0x0, 0x1D64C3C
	0x01D64C1C ADRP X0, 0x238F000
	0x01D64C20 LDR X0, [X0 + 0x598]
	0x01D64C24 BL 0x1C16CF4
	0x01D64C28 ADRP X0, 0x2391000
	0x01D64C2C LDR X0, [X0 + 0x888]
	0x01D64C30 BL 0x1C16CF4
	0x01D64C34 MOVZ W8, 0x1
	0x01D64C38 STRB W8, [X20 + 0x866]
	0x01D64C3C LDR W8, [X19 + 0x10]
	0x01D64C40 CMP W8, 0x2

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X23, 0x2675000
	011 Move X24, 0x2390000
	012 Move X20, 0x2392000
	013 Move X21, 0x2390000
	014 Move X22, 0x2390000
	015 Move W8, [X23+2127]
	016 Move X24, [X24+3488]
	017 Move X20, [X20+2072]
	018 Move X21, [X21+3504]
	019 Move X22, [X22+1608]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {45}
	025 Move X0, 0x2392000
	026 Move X0, [X0+2080]
	027 Call 0x1C17CF4
	028 Move X0, 0x2390000
	029 Move X0, [X0+1608]
	030 Call 0x1C17CF4
	031 Move X0, 0x2392000
	032 Move X0, [X0+2072]
	033 Call 0x1C17CF4
	034 Move X0, 0x2392000
	035 Move X0, [X0+2088]
	036 Call 0x1C17CF4
	037 Move X0, 0x2390000
	038 Move X0, [X0+3504]
	039 Call 0x1C17CF4
	040 Move X0, 0x2390000
	041 Move X0, [X0+3488]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X23+2127], W8
	045 Move X0, [X24]
	046 Call 0x1C17F10
	047 Move X2, [X20]
	048 Move X1, X19
	049 Move X3, X31
	050 Move X20, X0
	051 Call ObserverDelegate..ctor, X0, X1, X2
	052 Move X0, [X21]
	053 Move W1, 1
	054 Call 0x1C17D6C
	055 Move X8, [X22]
	056 Move X21, X0
	057 Move W9, [X8+224]
	058 Compare W9, 0
	059 JumpIfNotEqual {62}
	060 Move X0, X8
	061 Call 0x1C17DFC
	062 Move X23, 0x2675000
	063 Move W8, [X23+1927]
	064 Compare W8, 0
	065 JumpIfNotEqual {71}
	066 Move X0, 0x2390000
	067 Move X0, [X0+1608]
	068 Call 0x1C17CF4
	069 Move W8, 1
	070 Move [X23+1927], W8
	071 Move X0, [X22]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {77}
	075 Call 0x1C17DFC
	076 Move X0, [X22]
	077 Move X8, [X0+184]
	078 Move X8, [X8]
	079 Compare X8, 0
	080 JumpIfEqual {162}
	081 Move X8, [X8+192]
	082 Compare X8, 0
	083 JumpIfEqual {162}
	084 Compare X21, 0
	085 JumpIfEqual {162}
	086 Move X22, [X8+72]
	087 Compare X22, 0
	088 JumpIfEqual {95}
	089 Move X8, [X21]
	090 Move X0, X22
	091 Move X1, [X8+64]
	092 Call 0x1C17E00
	093 Compare X0, 0
	094 JumpIfEqual {164}
	095 Move W8, [X21+24]
	096 Compare W8, 0
	097 JumpIfEqual {163}
	098 Move X0, X20
	099 Move X1, X21
	100 Move X2, X31
	101 Move [X21+32], X22
	102 Call App.RegisterObserver, X0, X1
	103 Move X22, [X19+32]
	104 Compare X22, 0
	105 JumpIfEqual {162}
	106 Move W8, [X22+24]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X24, 0x2392000
	109 Move X25, 0x2392000
	110 Move X24, [X24+2080]
	111 Move X25, [X25+2088]
	112 Move W23, W31
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Add X8, X22, W23
	115 Move X26, [X8+32]
	116 Compare X26, 0
	117 JumpIfEqual {162}
	118 Move X0, [X24]
	119 Move X20, [X26+56]
	120 Call 0x1C17F10
	121 Move X2, [X25]
	122 Move X1, X19
	123 Move X3, X31
	124 Move X21, X0
	125 Call Action`1<Object>..ctor, X0, X1, X2
	126 Move X0, X20
	127 Move X1, X21
	128 Move X2, X31
	129 Call Delegate.Combine, X0, X1
	130 Compare X0, 0
	131 JumpIfEqual {145}
	132 Move X21, [X24]
	133 Move X20, X0
	134 Move X1, X21
	135 Call 0x1C17E00
	136 Compare X0, 0
	137 JumpIfEqual {159}
	138 Move [X26+56], X0
	139 Move X21, [X24]
	140 Move X0, X20
	141 Move X1, X21
	142 Call 0x1C17E00
	143 Compare X0, 0
	144 JumpIfNotEqual {146}
	145 Move [X26+56], X31
	146 Move W8, [X22+24]
	147 Add W23, W23, 1
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Move X20, [X31+64]
	150 Move X19, [X31+72]
	151 Move X22, [X31+48]
	152 Move X21, [X31+56]
	153 Move X24, [X31+32]
	154 Move X23, [X31+40]
	155 Move X26, [X31+16]
	156 Move X25, [X31+24]
	157 Move X30, [X31+80]
	158 Return 
	159 Move X0, X20
	160 Move X1, X21
	161 Call 0x1C181E0
	162 Call 0x1C17F20
	163 Call 0x1C17F28
	164 Call 0x1C17F44
	165 Move X1, X31
	166 Call 0x1C17DEC

Method: System.Void OnDestroy()

Disassembly:
	0x01D64C44 B.EQ 0x1D64C7C
	0x01D64C48 LDR X21, [X19 + 0x28]
	0x01D64C4C CMP W8, 0x1
	0x01D64C50 B.EQ 0x1D64C88
	0x01D64C54 CBNZ W8, 0x1D64C94
	0x01D64C58 MOVN W8, 0x0
	0x01D64C5C STR W8, [X19 + 0x10]
	0x01D64C60 CBZ X21, 0x1D64E08
	0x01D64C64 LDR X9, [X21 + 0x68]
	0x01D64C68 MOV W8, W31
	0x01D64C6C STR W31, [X19 + 0x38]
	0x01D64C70 STR X9, [X19 + 0x30]
	0x01D64C74 CBNZ X9, 0x1D64D44
	0x01D64C78 B 0x1D64E08
	0x01D64C7C MOVN W8, 0x0
	0x01D64C80 STR W8, [X19 + 0x10]
	0x01D64C84 B 0x1D64DBC
	0x01D64C88 MOVN W8, 0x0
	0x01D64C8C STR W8, [X19 + 0x10]
	0x01D64C90 B 0x1D64D0C
	0x01D64C94 MOV W0, W31
	0x01D64C98 B 0x1D64DFC
	0x01D64C9C B.CS 0x1D64E0C
	0x01D64CA0 ADD X10, X9, W8, 0x3, SXTW
	0x01D64CA4 LDR X10, [X10 + 0x20]
	0x01D64CA8 CBZ X10, 0x1D64E08
	0x01D64CAC LDR W11, [X10 + 0x10]
	0x01D64CB0 AND W11, W11, 0xFFFFFFFE
	0x01D64CB4 CMP W11, 0x2
	0x01D64CB8 B.EQ 0x1D64D38
	0x01D64CBC LDR X10, [X10 + 0x30]
	0x01D64CC0 CBZ X10, 0x1D64D38
	0x01D64CC4 MOV W8, W31
	0x01D64CC8 STR X10, [X19 + 0x40]
	0x01D64CCC STR W31, [X19 + 0x48]
	0x01D64CD0 B 0x1D64D1C
	0x01D64CD4 B.CS 0x1D64E0C
	0x01D64CD8 ADD X8, X10, W8, 0x3, SXTW
	0x01D64CDC LDR X20, [X8 + 0x20]
	0x01D64CE0 CBZ X20, 0x1D64E08
	0x01D64CE4 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x2675000
	008 Move X23, 0x2390000
	009 Move X20, 0x2392000
	010 Move X21, 0x2390000
	011 Move W8, [X22+2128]
	012 Move X23, [X23+3488]
	013 Move X20, [X20+2072]
	014 Move X21, [X21+1608]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x2390000
	021 Move X0, [X0+1608]
	022 Call 0x1C17CF4
	023 Move X0, 0x2392000
	024 Move X0, [X0+2072]
	025 Call 0x1C17CF4
	026 Move X0, 0x2390000
	027 Move X0, [X0+3488]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+2128], W8
	031 Move X0, [X23]
	032 Call 0x1C17F10
	033 Move X2, [X20]
	034 Move X1, X19
	035 Move X3, X31
	036 Move X20, X0
	037 Call ObserverDelegate..ctor, X0, X1, X2
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X1, X31
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Call App.DeregisterObserver, X0
	052 Return 

Method: System.Void HandleProductsUpdated(SpatialSys.ObservableState.StateChangedEventArgs args)

Disassembly:
	0x01D64CE8 MOV X1, X31
	0x01D64CEC BL 0x3C389D4
	0x01D64CF0 CBZ X0, 0x1D64E08
	0x01D64CF4 ADRP X8, 0x2391000
	0x01D64CF8 LDR X8, [X8 + 0x888]
	0x01D64CFC MOV X2, X31
	0x01D64D00 LDR X1, [X8]
	0x01D64D04 BL 0x322BD1C
	0x01D64D08 TBNZ X0, 0x0, 0x1D64D6C
	0x01D64D0C LDR W8, [X19 + 0x48]
	0x01D64D10 LDR X10, [X19 + 0x40]
	0x01D64D14 ADD W8, W8, 0x1
	0x01D64D18 STR W8, [X19 + 0x48]
	0x01D64D1C CBZ X10, 0x1D64E08
	0x01D64D20 LDR W9, [X10 + 0x18]
	0x01D64D24 CMP W8, W9
	0x01D64D28 B.LT 0x1D64CD4
	0x01D64D2C LDR W8, [X19 + 0x38]
	0x01D64D30 LDR X9, [X19 + 0x30]
	0x01D64D34 STR X31, [X19 + 0x40]
	0x01D64D38 ADD W8, W8, 0x1
	0x01D64D3C STR W8, [X19 + 0x38]
	0x01D64D40 CBZ X9, 0x1D64E08
	0x01D64D44 LDR W10, [X9 + 0x18]
	0x01D64D48 CMP W8, W10
	0x01D64D4C B.LT 0x1D64C9C
	0x01D64D50 STR X31, [X19 + 0x30]
	0x01D64D54 CBZ X21, 0x1D64E08
	0x01D64D58 LDR X9, [X21 + 0x70]
	0x01D64D5C MOV W8, W31
	0x01D64D60 STR W31, [X19 + 0x38]
	0x01D64D64 STR X9, [X19 + 0x50]
	0x01D64D68 B 0x1D64DCC
	0x01D64D6C MOVZ W0, 0x1
	0x01D64D70 STR X20, [X19 + 0x18]
	0x01D64D74 STR W0, [X19 + 0x10]
	0x01D64D78 B 0x1D64DFC
	0x01D64D7C B.CS 0x1D64E0C
	0x01D64D80 ADD X8, X9, W8, 0x3, SXTW
	0x01D64D84 LDR X21, [X8 + 0x20]
	0x01D64D88 CBZ X21, 0x1D64E08
	0x01D64D8C ADRP X8, 0x238F000
	0x01D64D90 LDR X8, [X8 + 0x598]
	0x01D64D94 LDR X20, [X21 + 0x28]
	0x01D64D98 LDR X0, [X8]
	0x01D64D9C LDR W8, [X0 + 0xE0]
	0x01D64DA0 CBNZ W8, 0x1D64DA8
	0x01D64DA4 BL 0x1C16DFC
	0x01D64DA8 MOV X0, X20
	0x01D64DAC MOV X1, X31
	0x01D64DB0 MOV X2, X31
	0x01D64DB4 BL 0x3C354F8
	0x01D64DB8 TBNZ X0, 0x0, 0x1D64DE8
	0x01D64DBC LDR W8, [X19 + 0x38]
	0x01D64DC0 LDR X9, [X19 + 0x50]
	0x01D64DC4 ADD W8, W8, 0x1
	0x01D64DC8 STR W8, [X19 + 0x38]
	0x01D64DCC CBZ X9, 0x1D64E08
	0x01D64DD0 LDR W10, [X9 + 0x18]
	0x01D64DD4 CMP W8, W10
	0x01D64DD8 B.LT 0x1D64D7C
	0x01D64DDC MOV W0, W31
	0x01D64DE0 STR X31, [X19 + 0x50]
	0x01D64DE4 B 0x1D64DFC
	0x01D64DE8 LDR X8, [X21 + 0x28]
	0x01D64DEC MOVZ W9, 0x2
	0x01D64DF0 STR W9, [X19 + 0x10]
	0x01D64DF4 MOVZ W0, 0x1
	0x01D64DF8 STR X8, [X19 + 0x18]
	0x01D64DFC LDP X20, X19, [X31 + 0x10]
	0x01D64E00 LDP X30, X21, [X31], #0x20
	0x01D64E04 RET
	0x01D64E08 BL 0x1C16F20
	0x01D64E0C BL 0x1C16F28
	0x01D64E10 LDR X0, [X0 + 0x18]
	0x01D64E14 RET
	0x01D64E18 STP X30, X19, [X31 - 0x10]!
	0x01D64E1C ADRP X0, 0x238F000
	0x01D64E20 LDR X0, [X0 + 0xB40]
	0x01D64E24 BL 0x1C16D08
	0x01D64E28 BL 0x1C16F10
	0x01D64E2C MOV X1, X31
	0x01D64E30 MOV X19, X0
	0x01D64E34 BL 0x3380310
	0x01D64E38 ADRP X0, 0x2391000
	0x01D64E3C LDR X0, [X0 + 0x890]
	0x01D64E40 BL 0x1C16D08
	0x01D64E44 MOV X1, X0
	0x01D64E48 MOV X0, X19
	0x01D64E4C BL 0x1C16DEC
	0x01D64E50 LDR X0, [X0 + 0x18]
	0x01D64E54 RET
	0x01D64E58 STR X30, [X31 - 0x20]!
	0x01D64E5C STP X20, X19, [X31 + 0x10]
	0x01D64E60 ADRP X20, 0x2674000
	0x01D64E64 LDRB W8, [X20 + 0x867]
	0x01D64E68 MOV X19, X0
	0x01D64E6C TBNZ X8, 0x0, 0x1D64E84
	0x01D64E70 ADRP X0, 0x2391000
	0x01D64E74 LDR X0, [X0 + 0x898]
	0x01D64E78 BL 0x1C16CF4
	0x01D64E7C MOVZ W8, 0x1
	0x01D64E80 STRB W8, [X20 + 0x867]
	0x01D64E84 LDR W8, [X19 + 0x10]
	0x01D64E88 ADDS W31, W8, 0x2
	0x01D64E8C B.NE 0x1D64EAC
	0x01D64E90 LDR W20, [X19 + 0x20]
	0x01D64E94 MOV X0, X31
	0x01D64E98 BL 0x33C151C

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X21, 0x2675000
	010 Move X20, 0x2390000
	011 Move W8, [X21+2129]
	012 Move X20, [X20+1608]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0x2390000
	019 Move X0, [X0+1608]
	020 Call 0x1C17CF4
	021 Move X0, 0x2391000
	022 Move X0, [X0+1056]
	023 Call 0x1C17CF4
	024 Move X0, 0x2390000
	025 Move X0, [X0+3528]
	026 Call 0x1C17CF4
	027 Move X0, 0x2391000
	028 Move X0, [X0+2896]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+2129], W8
	032 Move X0, [X20]
	033 Move [X31+24], X31
	034 Move [X31+12], W31
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X21, 0x2675000
	040 Move W8, [X21+1927]
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x2390000
	044 Move X0, [X0+1608]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X21+1927], W8
	048 Move X0, [X20]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {54}
	052 Call 0x1C17DFC
	053 Move X0, [X20]
	054 Move X8, [X0+184]
	055 Move X9, [X8]
	056 Compare X9, 0
	057 JumpIfEqual {131}
	058 Move X20, [X19+32]
	059 Compare X20, 0
	060 JumpIfEqual {131}
	061 Move W8, [X20+24]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X23, 0x2391000
	064 Move X22, [X9+192]
	065 Move X23, [X23+1056]
	066 Move W21, W31
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Compare X22, 0
	069 JumpIfEqual {131}
	070 Add X8, X20, W21
	071 Move X24, [X8+32]
	072 Compare X24, 0
	073 JumpIfEqual {131}
	074 Move X0, [X22+72]
	075 Compare X0, 0
	076 JumpIfEqual {131}
	077 Move X1, [X24+32]
	078 Move X3, [X23]
	079 Add X2, X31, 24
	080 Call StateDictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {119}
	085 Move X8, [X31+24]
	086 Compare X8, 0
	087 JumpIfEqual {131}
	088 Move X8, [X8+112]
	089 Compare X8, 0
	090 JumpIfEqual {131}
	091 Move W8, [X8+76]
	092 Move X19, [X24+40]
	093 Add X0, X31, 12
	094 Move X1, X31
	095 Move [X31+12], W8
	096 Call Int32.ToString, X0
	097 Compare X19, 0
	098 JumpIfEqual {131}
	099 Move X8, [X19]
	100 Move X1, X0
	101 Move X0, X19
	102 Move X9, [X8+1368]
	103 Move X2, [X8+1376]
	104 NotImplemented "Instruction BLR not yet implemented."
	105 Move X8, [X31+24]
	106 Compare X8, 0
	107 JumpIfEqual {131}
	108 Move X8, [X8+96]
	109 Compare X8, 0
	110 JumpIfEqual {131}
	111 Move X0, [X24+48]
	112 Compare X0, 0
	113 JumpIfEqual {131}
	114 Move X9, [X0]
	115 Move X1, [X8+80]
	116 Move X8, [X9+1368]
	117 Move X2, [X9+1376]
	118 NotImplemented "Instruction BLR not yet implemented."
	119 Move W8, [X20+24]
	120 Add W21, W21, 1
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move X20, [X31+64]
	123 Move X19, [X31+72]
	124 Move X22, [X31+48]
	125 Move X21, [X31+56]
	126 Move X24, [X31+32]
	127 Move X23, [X31+40]
	128 Move X30, [X31+16]
	129 Add X31, X31, 80
	130 Return 
	131 Call 0x1C17F20
	132 Call 0x1C17F28

Method: System.Void TryPurchase(AnimalCompany.IAPCurrencyPackButton btn)

Disassembly:
	0x01D64E9C CMP W20, W0
	0x01D64EA0 B.NE 0x1D64EAC
	0x01D64EA4 STR W31, [X19 + 0x10]
	0x01D64EA8 B 0x1D64EE4
	0x01D64EAC ADRP X8, 0x2391000
	0x01D64EB0 LDR X8, [X8 + 0x898]
	0x01D64EB4 LDR X0, [X8]
	0x01D64EB8 BL 0x1C16F10
	0x01D64EBC MOV X1, X31
	0x01D64EC0 MOV X20, X0
	0x01D64EC4 BL 0x33BDD8C
	0x01D64EC8 MOV X0, X31
	0x01D64ECC STR W31, [X20 + 0x10]
	0x01D64ED0 BL 0x33C151C
	0x01D64ED4 STR W0, [X20 + 0x20]
	0x01D64ED8 LDR X8, [X19 + 0x28]
	0x01D64EDC MOV X19, X20
	0x01D64EE0 STR X8, [X20 + 0x28]
	0x01D64EE4 MOV X0, X19
	0x01D64EE8 LDP X20, X19, [X31 + 0x10]
	0x01D64EEC LDR X30, [X31], #0x20
	0x01D64EF0 RET
	0x01D64EF4 B 0x1D64E58
	0x01D64EF8 MOV X1, X31
	0x01D64EFC B 0x3C36D2C
	0x01D64F00 MOV X1, X31
	0x01D64F04 B 0x33BDD8C
	0x01D64F08 MOV X1, X31
	0x01D64F0C B 0x33BDD8C
	0x01D64F10 MOV X1, X31
	0x01D64F14 B 0x33BDD8C
	0x01D64F18 STR X30, [X31 - 0x40]!
	0x01D64F1C STP X24, X23, [X31 + 0x10]
	0x01D64F20 STP X22, X21, [X31 + 0x20]
	0x01D64F24 STP X20, X19, [X31 + 0x30]
	0x01D64F28 ADRP X20, 0x2674000
	0x01D64F2C LDRB W8, [X20 + 0x868]
	0x01D64F30 MOV X19, X0
	0x01D64F34 TBNZ X8, 0x0, 0x1D64F64
	0x01D64F38 ADRP X0, 0x2391000
	0x01D64F3C LDR X0, [X0 + 0x8A0]
	0x01D64F40 BL 0x1C16CF4
	0x01D64F44 ADRP X0, 0x2391000
	0x01D64F48 LDR X0, [X0 + 0x8A8]
	0x01D64F4C BL 0x1C16CF4
	0x01D64F50 ADRP X0, 0x2391000
	0x01D64F54 LDR X0, [X0 + 0x8B0]
	0x01D64F58 BL 0x1C16CF4
	0x01D64F5C MOVZ W8, 0x1
	0x01D64F60 STRB W8, [X20 + 0x868]
	0x01D64F64 LDR X0, [X19 + 0x50]
	0x01D64F68 CBNZ X0, 0x1D65004
	0x01D64F6C ADRP X8, 0x2391000
	0x01D64F70 LDR X8, [X8 + 0x8B0]
	0x01D64F74 LDR X0, [X8]
	0x01D64F78 BL 0x1C16F10
	0x01D64F7C ADRP X8, 0x2391000
	0x01D64F80 LDR X8, [X8 + 0x8A0]
	0x01D64F84 MOV X20, X0
	0x01D64F88 LDR X1, [X8]
	0x01D64F8C BL 0x2AA4804
	0x01D64F90 LDR X22, [X19 + 0x38]
	0x01D64F94 STR X20, [X19 + 0x50]
	0x01D64F98 CBZ X22, 0x1D65018
	0x01D64F9C LDR W8, [X22 + 0x18]
	0x01D64FA0 CMP W8, 0x1
	0x01D64FA4 B.LT 0x1D65000
	0x01D64FA8 ADRP X24, 0x2391000
	0x01D64FAC LDR X24, [X24 + 0x8A8]
	0x01D64FB0 MOV W23, W31
	0x01D64FB4 CMP W23, W8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2675000
	006 Move W8, [X21+2130]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0x2390000
	014 Move X0, [X0+1608]
	015 Call 0x1C17CF4
	016 Move X0, 0x2390000
	017 Move X0, [X0+1928]
	018 Call 0x1C17CF4
	019 Move X0, 0x2392000
	020 Move X0, [X0+2096]
	021 Call 0x1C17CF4
	022 Move X0, 0x2392000
	023 Move X0, [X0+1360]
	024 Call 0x1C17CF4
	025 Move X0, 0x2392000
	026 Move X0, [X0+1368]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+2130], W8
	030 Move X0, [X19+40]
	031 Compare X0, 0
	032 JumpIfEqual {88}
	033 Move X1, X31
	034 Call CommandHandle.get_hasFinalized, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {63}
	039 Compare X20, 0
	040 JumpIfEqual {88}
	041 Move X0, [X20+32]
	042 Move X1, X31
	043 Call ProductCommands.PurchaseProduct, X0
	044 Move X8, 0x2390000
	045 Move X8, [X8+1608]
	046 Move X20, X0
	047 Move X8, [X8]
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {53}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 Move X0, X20
	054 Move W1, W31
	055 Move X2, X31
	056 Call App.ExecuteCommand, X0, X1
	057 Move [X19+40], X0
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return 
	063 Move X8, 0x2390000
	064 Move X8, [X8+1928]
	065 Move X0, [X8]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X8, 0x2392000
	071 Move X9, 0x2392000
	072 Move X10, 0x2392000
	073 Move X8, [X8+1360]
	074 Move X9, [X9+2096]
	075 Move X10, [X10+1368]
	076 Move X20, [X31+16]
	077 Move X19, [X31+24]
	078 Move X0, [X8]
	079 Move X2, [X9]
	080 Move X3, [X10]
	081 Move W4, 49
	082 Move X1, X31
	083 Move X5, X31
	084 Move X30, [X31+32]
	085 Move X21, [X31+40]
	086 Call Log.Error, X0, X1, X2, X3, X4
	087 Return 
	088 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D64FB8 B.CS 0x1D6501C
	0x01D64FBC ADD X8, X22, W23, 0x3, SXTW
	0x01D64FC0 LDR X20, [X8 + 0x20]
	0x01D64FC4 CBZ X20, 0x1D65018
	0x01D64FC8 LDR X21, [X19 + 0x50]
	0x01D64FCC MOV X0, X20
	0x01D64FD0 MOV X1, X31
	0x01D64FD4 BL 0x3C389D4
	0x01D64FD8 CBZ X21, 0x1D65018
	0x01D64FDC LDR X3, [X24]
	0x01D64FE0 MOV X1, X0
	0x01D64FE4 MOV X0, X21
	0x01D64FE8 MOV X2, X20
	0x01D64FEC BL 0x2AA5084
	0x01D64FF0 LDR W8, [X22 + 0x18]
	0x01D64FF4 ADD W23, W23, 0x1
	0x01D64FF8 CMP W23, W8
	0x01D64FFC B.LT 0x1D64FB4
	0x01D65000 LDR X0, [X19 + 0x50]
	0x01D65004 LDP X20, X19, [X31 + 0x30]
	0x01D65008 LDP X22, X21, [X31 + 0x20]
	0x01D6500C LDP X24, X23, [X31 + 0x10]
	0x01D65010 LDR X30, [X31], #0x40
	0x01D65014 RET
	0x01D65018 BL 0x1C16F20
	0x01D6501C BL 0x1C16F28
	0x01D65020 STR X30, [X31 - 0x40]!
	0x01D65024 STP X24, X23, [X31 + 0x10]
	0x01D65028 STP X22, X21, [X31 + 0x20]
	0x01D6502C STP X20, X19, [X31 + 0x30]
	0x01D65030 ADRP X20, 0x2673000
	0x01D65034 LDRB W8, [X20 + 0x869]
	0x01D65038 MOV X19, X0
	0x01D6503C TBNZ X8, 0x0, 0x1D6506C
	0x01D65040 ADRP X0, 0x2390000
	0x01D65044 LDR X0, [X0 + 0x8B8]
	0x01D65048 BL 0x1C16CF4
	0x01D6504C ADRP X0, 0x2390000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2675000
	006 Move X20, 0x2390000
	007 Move W8, [X21+2131]
	008 Move X20, [X20+2200]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2390000
	015 Move X0, [X0+2200]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2131], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X21, 0x2675000
	025 Move W8, [X21+1931]
	026 Compare W8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, 0x238F000
	029 Move X0, [X0+2200]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+1931], W8
	033 Move X0, [X20]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X20]
	039 Move X8, [X0+184]
	040 Move X0, X19
	041 Move X1, X31
	042 Move X8, [X8]
	043 Move [X19+40], X8
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Call MonoBehaviour..ctor, X0
	049 Return 

