Type: AnimalCompany.ItemSellingMachineView/<ShowValueTextCoroutine>d__41

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x01DDD0DC ADD X8, X8, X22, 0x3, LSL
	0x01DDD0E0 LDR X0, [X8 + 0x20]
	0x01DDD0E4 CBZ X0, 0x1DDD3C8
	0x01DDD0E8 MOV W1, W31
	0x01DDD0EC MOV X2, X31
	0x01DDD0F0 BL 0x3C32410
	0x01DDD0F4 LDR X8, [X21 + 0x80]
	0x01DDD0F8 CBZ X8, 0x1DDD3C8
	0x01DDD0FC LDR W9, [X8 + 0x18]
	0x01DDD100 ADD W20, W20, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x01DDDF78 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x01DDDF7C ADRP X0, 0x2316000
	0x01DDDF80 LDR X0, [X0 + 0xB40]
	0x01DDDF84 BL 0x1C16D08
	0x01DDDF88 BL 0x1C16F10
	0x01DDDF8C MOV X1, X31
	0x01DDDF90 MOV X19, X0
	0x01DDDF94 BL 0x3380310
	0x01DDDF98 ADRP X0, 0x231B000
	0x01DDDF9C LDR X0, [X0 + 0xBB8]
	0x01DDDFA0 BL 0x1C16D08
	0x01DDDFA4 MOV X1, X0
	0x01DDDFA8 MOV X0, X19
	0x01DDDFAC BL 0x1C16DEC
	0x01DDDFB0 LDR X0, [X0 + 0x18]
	0x01DDDFB4 RET
	0x01DDDFB8 MOV X1, X31
	0x01DDDFBC B 0x33BDD8C
	0x01DDDFC0 STR X30, [X31 - 0x20]!
	0x01DDDFC4 STP X20, X19, [X31 + 0x10]
	0x01DDDFC8 ADRP X20, 0x25FB000
	0x01DDDFCC ADRP X19, 0x231B000
	0x01DDDFD0 LDRB W8, [X20 + 0xC79]
	0x01DDDFD4 LDR X19, [X19 + 0xBC0]
	0x01DDDFD8 TBNZ X8, 0x0, 0x1DDDFF0
	0x01DDDFDC ADRP X0, 0x231B000
	0x01DDDFE0 LDR X0, [X0 + 0xBC0]
	0x01DDDFE4 BL 0x1C16CF4
	0x01DDDFE8 MOVZ W8, 0x1
	0x01DDDFEC STRB W8, [X20 + 0xC79]
	0x01DDDFF0 LDR X8, [X19]
	0x01DDDFF4 ADRP X9, 0xFFFFFFFFFED0E000
	0x01DDDFF8 LDR V0, [X9 + 0xD5]
	0x01DDDFFC ADRP X9, 0xFFFFFFFFFED0D000
	0x01DDE000 LDR X8, [X8 + 0xB8]
	0x01DDE004 ADRP X10, 0xFFFFFFFFFED0E000
	0x01DDE008 LDR V1, [X10 + 0x18]
	0x01DDE00C ADRP X10, 0xFFFFFFFFFED0C000
	0x01DDE010 STR V0, [X8]
	0x01DDE014 LDR X8, [X19]
	0x01DDE018 LDR V0, [X9 + 0x76]
	0x01DDE01C LDP X20, X19, [X31 + 0x10]
	0x01DDE020 LDR X9, [X8 + 0xB8]
	0x01DDE024 STR V0, [X9 + 0x1]
	0x01DDE028 LDR X9, [X8 + 0xB8]
	0x01DDE02C FMOV V0.4S, 0x0
	0x01DDE030 STR V1, [X9 + 0x2]
	0x01DDE034 LDR X9, [X8 + 0xB8]
	0x01DDE038 LDR V1, [X10 + 0xA9]
	0x01DDE03C ADRP X10, 0xFFFFFFFFFED0C000
	0x01DDE040 STR V0, [X9 + 0x3]
	0x01DDE044 LDR X9, [X8 + 0xB8]
	0x01DDE048 LDR V0, [X10 + 0xBF]
	0x01DDE04C ADRP X10, 0xFFFFFFFFFED0E000
	0x01DDE050 STR V1, [X9 + 0x4]
	0x01DDE054 LDR X9, [X8 + 0xB8]
	0x01DDE058 LDR V1, [X10 + 0xD8]
	0x01DDE05C ADRP X10, 0xFFFFFFFFFED0C000
	0x01DDE060 STR V0, [X9 + 0x5]
	0x01DDE064 LDR X9, [X8 + 0xB8]
	0x01DDE068 STR V1, [X9 + 0x6]
	0x01DDE06C LDR X9, [X8 + 0xB8]
	0x01DDE070 STR V0, [X9 + 0x7]
	0x01DDE074 LDR X9, [X8 + 0xB8]
	0x01DDE078 LDR V0, [X10 + 0xC0]
	0x01DDE07C ADRP X10, 0xFFFFFFFFFED0E000
	0x01DDE080 STR V1, [X9 + 0x8]
	0x01DDE084 LDR X9, [X8 + 0xB8]
	0x01DDE088 LDR V1, [X10 + 0xF3]
	0x01DDE08C ADRP X10, 0xFFFFFFFFFED0F000
	0x01DDE090 STR V0, [X9 + 0x9]
	0x01DDE094 LDR X9, [X8 + 0xB8]
	0x01DDE098 LDR V0, [X10 + 0x8]
	0x01DDE09C ADRP X10, 0xFFFFFFFFFED0C000
	0x01DDE0A0 STR V1, [X9 + 0xA]
	0x01DDE0A4 LDR X9, [X8 + 0xB8]
	0x01DDE0A8 STR V0, [X9 + 0xB]
	0x01DDE0AC LDR X8, [X8 + 0xB8]
	0x01DDE0B0 LDR V0, [X10 + 0x60]
	0x01DDE0B4 STR V0, [X8 + 0xC]
	0x01DDE0B8 LDR X30, [X31], #0x20
	0x01DDE0BC RET
	0x01DDE0C0 MOV X1, X31
	0x01DDE0C4 B 0x33BDD8C
	0x01DDE0C8 STR X30, [X31 - 0x30]!
	0x01DDE0CC STP X22, X21, [X31 + 0x10]
	0x01DDE0D0 STP X20, X19, [X31 + 0x20]
	0x01DDE0D4 ADRP X19, 0x25FA000
	0x01DDE0D8 ADRP X22, 0x2315000
	0x01DDE0DC LDRB W8, [X19 + 0xC7A]
	0x01DDE0E0 LDR X22, [X22 + 0x5D8]
	0x01DDE0E4 TBNZ X8, 0x0, 0x1DDE0FC
	0x01DDE0E8 ADRP X0, 0x2315000
	0x01DDE0EC LDR X0, [X0 + 0x5D8]
	0x01DDE0F0 BL 0x1C16CF4
	0x01DDE0F4 MOVZ W8, 0x1
	0x01DDE0F8 STRB W8, [X19 + 0xC7A]
	0x01DDE0FC MOVZ W0, 0x80000000
	0x01DDE100 MOV X1, X31
	0x01DDE104 BL 0x3C35CBC
	0x01DDE108 LDR X8, [X22]
	0x01DDE10C MOV X1, X31
	0x01DDE110 LDR X8, [X8 + 0xB8]
	0x01DDE114 STR W0, [X8]
	0x01DDE118 MOVZ W0, 0x2000
	0x01DDE11C BL 0x3C35CBC
	0x01DDE120 LDR X8, [X22]
	0x01DDE124 MOV X1, X31
	0x01DDE128 LDR X8, [X8 + 0xB8]
	0x01DDE12C STR W0, [X8 + 0x4]
	0x01DDE130 MOVZ W0, 0x10000
	0x01DDE134 BL 0x3C35CBC
	0x01DDE138 LDR X8, [X22]
	0x01DDE13C MOV X1, X31
	0x01DDE140 LDR X8, [X8 + 0xB8]
	0x01DDE144 STR W0, [X8 + 0x8]
	0x01DDE148 MOVZ W0, 0x100
	0x01DDE14C BL 0x3C35CBC
	0x01DDE150 LDR X8, [X22]
	0x01DDE154 MOV X1, X31
	0x01DDE158 LDR X8, [X8 + 0xB8]
	0x01DDE15C STR W0, [X8 + 0xC]
	0x01DDE160 MOVZ W0, 0x1000
	0x01DDE164 BL 0x3C35CBC
	0x01DDE168 LDR X8, [X22]
	0x01DDE16C MOV X1, X31
	0x01DDE170 LDR X8, [X8 + 0xB8]
	0x01DDE174 STR W0, [X8 + 0x10]
	0x01DDE178 MOVZ W0, 0x400
	0x01DDE17C BL 0x3C35CBC
	0x01DDE180 LDR X8, [X22]
	0x01DDE184 MOV X1, X31
	0x01DDE188 LDR X9, [X8 + 0xB8]
	0x01DDE18C STR W0, [X9 + 0x14]
	0x01DDE190 LDR X8, [X8 + 0xB8]
	0x01DDE194 LDR W0, [X8 + 0x10]
	0x01DDE198 BL 0x3C35CB8
	0x01DDE19C LDR X8, [X22]
	0x01DDE1A0 MOV W19, W0
	0x01DDE1A4 MOV X1, X31
	0x01DDE1A8 LDR X8, [X8 + 0xB8]
	0x01DDE1AC LDR W8, [X8 + 0x14]
	0x01DDE1B0 MOV X0, X8
	0x01DDE1B4 BL 0x3C35CB8
	0x01DDE1B8 ORR W0, W0, W19, 0x0
	0x01DDE1BC MOV X1, X31
	0x01DDE1C0 BL 0x3C35CBC
	0x01DDE1C4 LDR X8, [X22]
	0x01DDE1C8 MOV X1, X31
	0x01DDE1CC LDR X8, [X8 + 0xB8]
	0x01DDE1D0 STR W0, [X8 + 0x18]
	0x01DDE1D4 MOVZ W0, 0x100000
	0x01DDE1D8 BL 0x3C35CBC
	0x01DDE1DC LDR X8, [X22]
	0x01DDE1E0 MOV X1, X31
	0x01DDE1E4 LDR X8, [X8 + 0xB8]
	0x01DDE1E8 STR W0, [X8 + 0x1C]
	0x01DDE1EC MOVZ W0, 0x200000
	0x01DDE1F0 BL 0x3C35CBC
	0x01DDE1F4 LDR X8, [X22]
	0x01DDE1F8 MOV X1, X31
	0x01DDE1FC LDR X8, [X8 + 0xB8]
	0x01DDE200 STR W0, [X8 + 0x20]
	0x01DDE204 MOVZ W0, 0x400000
	0x01DDE208 BL 0x3C35CBC
	0x01DDE20C LDR X8, [X22]
	0x01DDE210 MOV X1, X31
	0x01DDE214 LDR X8, [X8 + 0xB8]
	0x01DDE218 STR W0, [X8 + 0x24]
	0x01DDE21C MOVZ W0, 0x800
	0x01DDE220 BL 0x3C35CBC
	0x01DDE224 LDR X8, [X22]
	0x01DDE228 MOV X1, X31
	0x01DDE22C LDR X8, [X8 + 0xB8]
	0x01DDE230 STR W0, [X8 + 0x28]
	0x01DDE234 MOVZ W0, 0x8000
	0x01DDE238 BL 0x3C35CBC
	0x01DDE23C LDR X8, [X22]
	0x01DDE240 MOV X1, X31
	0x01DDE244 LDR X8, [X8 + 0xB8]
	0x01DDE248 STR W0, [X8 + 0x2C]
	0x01DDE24C MOVZ W0, 0x80
	0x01DDE250 BL 0x3C35CBC
	0x01DDE254 LDR X8, [X22]
	0x01DDE258 MOV X1, X31
	0x01DDE25C LDR X8, [X8 + 0xB8]
	0x01DDE260 STR W0, [X8 + 0x30]
	0x01DDE264 MOVZ W0, 0x200
	0x01DDE268 BL 0x3C35CBC
	0x01DDE26C LDR X8, [X22]
	0x01DDE270 MOV X1, X31
	0x01DDE274 LDR X8, [X8 + 0xB8]
	0x01DDE278 STR W0, [X8 + 0x34]
	0x01DDE27C MOVZ W0, 0x4000000
	0x01DDE280 BL 0x3C35CBC
	0x01DDE284 LDR X8, [X22]
	0x01DDE288 MOV X1, X31
	0x01DDE28C LDR X8, [X8 + 0xB8]
	0x01DDE290 STR W0, [X8 + 0x38]
	0x01DDE294 MOVZ W0, 0x8000000
	0x01DDE298 BL 0x3C35CBC
	0x01DDE29C LDR X8, [X22]
	0x01DDE2A0 MOV X1, X31
	0x01DDE2A4 LDR X9, [X8 + 0xB8]
	0x01DDE2A8 STR W0, [X9 + 0x3C]
	0x01DDE2AC LDR X8, [X8 + 0xB8]
	0x01DDE2B0 LDR W0, [X8]
	0x01DDE2B4 BL 0x3C35CB8
	0x01DDE2B8 LDR X8, [X22]
	0x01DDE2BC MOV W19, W0
	0x01DDE2C0 MOV X1, X31
	0x01DDE2C4 LDR X8, [X8 + 0xB8]
	0x01DDE2C8 LDR W8, [X8 + 0x4]
	0x01DDE2CC MOV X0, X8
	0x01DDE2D0 BL 0x3C35CB8
	0x01DDE2D4 LDR X8, [X22]
	0x01DDE2D8 MOV W20, W0
	0x01DDE2DC MOV X1, X31
	0x01DDE2E0 LDR X8, [X8 + 0xB8]
	0x01DDE2E4 LDR W8, [X8 + 0x8]
	0x01DDE2E8 MOV X0, X8
	0x01DDE2EC BL 0x3C35CB8
	0x01DDE2F0 ORR W8, W19, W20, 0x0
	0x01DDE2F4 ORR W8, W8, W0, 0x0
	0x01DDE2F8 ORR W0, W8, 0x1
	0x01DDE2FC MOV X1, X31
	0x01DDE300 BL 0x3C35CBC
	0x01DDE304 LDR X8, [X22]
	0x01DDE308 MOV X1, X31
	0x01DDE30C LDR X9, [X8 + 0xB8]
	0x01DDE310 STR W0, [X9 + 0x40]
	0x01DDE314 LDR X8, [X8 + 0xB8]
	0x01DDE318 LDR W0, [X8 + 0xC]
	0x01DDE31C BL 0x3C35CB8
	0x01DDE320 LDR X8, [X22]
	0x01DDE324 MOV W19, W0
	0x01DDE328 MOV X1, X31
	0x01DDE32C LDR X8, [X8 + 0xB8]
	0x01DDE330 LDR W8, [X8 + 0x28]
	0x01DDE334 MOV X0, X8
	0x01DDE338 BL 0x3C35CB8
	0x01DDE33C LDR X8, [X22]
	0x01DDE340 MOV W20, W0
	0x01DDE344 MOV X1, X31
	0x01DDE348 LDR X8, [X8 + 0xB8]
	0x01DDE34C LDR W8, [X8 + 0x10]
	0x01DDE350 MOV X0, X8
	0x01DDE354 BL 0x3C35CB8
	0x01DDE358 LDR X8, [X22]
	0x01DDE35C MOV W21, W0
	0x01DDE360 MOV X1, X31
	0x01DDE364 LDR X8, [X8 + 0xB8]
	0x01DDE368 LDR W8, [X8 + 0x4]
	0x01DDE36C MOV X0, X8
	0x01DDE370 BL 0x3C35CB8
	0x01DDE374 ORR W8, W20, W19, 0x0
	0x01DDE378 ORR W8, W8, W21, 0x0
	0x01DDE37C ORR W0, W8, W0, 0x0
	0x01DDE380 MOV X1, X31
	0x01DDE384 BL 0x3C35CBC
	0x01DDE388 LDR X8, [X22]
	0x01DDE38C MOV X1, X31
	0x01DDE390 LDR X9, [X8 + 0xB8]
	0x01DDE394 STR W0, [X9 + 0x44]
	0x01DDE398 LDR X8, [X8 + 0xB8]
	0x01DDE39C LDR W0, [X8 + 0xC]
	0x01DDE3A0 BL 0x3C35CB8
	0x01DDE3A4 LDR X8, [X22]
	0x01DDE3A8 MOV W19, W0
	0x01DDE3AC MOV X1, X31
	0x01DDE3B0 LDR X8, [X8 + 0xB8]
	0x01DDE3B4 LDR W8, [X8 + 0x28]
	0x01DDE3B8 MOV X0, X8
	0x01DDE3BC BL 0x3C35CB8
	0x01DDE3C0 ORR W0, W0, W19, 0x0
	0x01DDE3C4 MOV X1, X31
	0x01DDE3C8 BL 0x3C35CBC
	0x01DDE3CC LDR X8, [X22]

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x25FC000
	009 Move W8, [X20+3186]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x231C000
	016 Move X0, [X0+152]
	017 Call 0x1C17CF4
	018 Move X0, 0x2317000
	019 Move X0, [X0+2440]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3186], W8
	023 Move W8, [X19+16]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X21, [X19+32]
	026 Move X9, -19591168
	027 Add X9, X9, 2367
	028 NotImplemented "Instruction ADR not yet implemented."
	029 Move W11, [X9]
	030 Add X10, X10, X11
	031 CallNoReturn X10
	032 Move TEMP, 0
	033 Not TEMP
	034 Move W8, TEMP
	035 Move [X19+16], W8
	036 Compare X21, 0
	037 JumpIfEqual {298}
	038 Move X8, [X21+120]
	039 Compare X8, 0
	040 JumpIfEqual {298}
	041 Move TEMP, 0
	042 Not TEMP
	043 Move W20, TEMP
	044 Move W10, [X8+24]
	045 Add W9, W20, 1
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X22, W9
	049 Add X8, X8, X22
	050 Move X0, [X8+32]
	051 Compare X0, 0
	052 JumpIfEqual {298}
	053 Move W1, 1
	054 Move X2, X31
	055 Call Behaviour.set_enabled, X0, X1
	056 Move X8, [X21+128]
	057 Compare X8, 0
	058 JumpIfEqual {298}
	059 Move W9, [X8+24]
	060 Add W20, W20, 1
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Add X8, X8, X22
	063 Move X0, [X8+32]
	064 Compare X0, 0
	065 JumpIfEqual {298}
	066 Move W1, 1
	067 Move X2, X31
	068 Call Renderer.set_enabled, X0, X1
	069 Move X8, [X21+120]
	070 Compare X8, 0
	071 JumpIfNotEqual {44}
	072 Move W8, 2
	073 Move [X19+24], X31
	074 Move [X19+16], W8
	075 Move V8, [X19+56]
	076 Move S0, 1
	077 Move TEMP, 0
	078 Not TEMP
	079 Move W8, TEMP
	080 Move [X19+16], W8
	081 NotImplemented "Instruction FCMP not yet implemented."
	082 Move X8, -19857408
	083 Move V0, [X8+1600]
	084 Move [X19+60], D0
	085 Compare X21, 0
	086 JumpIfNotEqual {238}
	087 Move TEMP, 0
	088 Not TEMP
	089 Move W8, TEMP
	090 Move [X19+16], W8
	091 Compare X21, 0
	092 JumpIfEqual {298}
	093 Move X8, [X21+120]
	094 Compare X8, 0
	095 JumpIfEqual {298}
	096 Move TEMP, 0
	097 Not TEMP
	098 Move W20, TEMP
	099 Move W10, [X8+24]
	100 Add W9, W20, 1
	101 NotImplemented "Instruction CMP not yet implemented."
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X22, W9
	104 Add X8, X8, X22
	105 Move X0, [X8+32]
	106 Compare X0, 0
	107 JumpIfEqual {298}
	108 Move W1, W31
	109 Move X2, X31
	110 Call Behaviour.set_enabled, X0, X1
	111 Move X8, [X21+128]
	112 Compare X8, 0
	113 JumpIfEqual {298}
	114 Move W9, [X8+24]
	115 Add W20, W20, 1
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Add X8, X8, X22
	118 Move X0, [X8+32]
	119 Compare X0, 0
	120 JumpIfEqual {298}
	121 Move W1, W31
	122 Move X2, X31
	123 Call Renderer.set_enabled, X0, X1
	124 Move X8, [X21+120]
	125 Compare X8, 0
	126 JumpIfNotEqual {99}
	127 Move TEMP, 0
	128 Not TEMP
	129 Move W8, TEMP
	130 Move [X19+16], W8
	131 Compare X21, 0
	132 JumpIfEqual {298}
	133 Move W2, [X19+64]
	134 Move X1, [X19+48]
	135 Call ItemSellingMachineView.GetRepeatString, X0, X1, X2
	136 Move X8, [X21+120]
	137 Compare X8, 0
	138 JumpIfEqual {298}
	139 Move X20, X0
	140 Move W22, 4
	141 Move W9, [X8+24]
	142 Subtract X23, X22, 4
	143 NotImplemented "Instruction CMP not yet implemented."
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move X0, [X8]
	146 Compare X0, 0
	147 JumpIfEqual {298}
	148 Move W1, 1
	149 Move X2, X31
	150 Call Behaviour.set_enabled, X0, X1
	151 Move X8, [X21+120]
	152 Compare X8, 0
	153 JumpIfEqual {298}
	154 Move W9, [X8+24]
	155 NotImplemented "Instruction CMP not yet implemented."
	156 Move X0, [X8]
	157 Compare X0, 0
	158 JumpIfEqual {298}
	159 Move X8, [X0]
	160 Move X1, X20
	161 Move X9, [X8+1368]
	162 Move X2, [X8+1376]
	163 NotImplemented "Instruction BLR not yet implemented."
	164 Move X8, [X21+128]
	165 Compare X8, 0
	166 JumpIfEqual {298}
	167 Move W9, [X8+24]
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Move X0, [X8]
	170 Compare X0, 0
	171 JumpIfEqual {298}
	172 Move W1, 1
	173 Move X2, X31
	174 Call Renderer.set_enabled, X0, X1
	175 Move X8, [X21+120]
	176 Add X22, X22, 1
	177 Compare X8, 0
	178 JumpIfNotEqual {141}
	179 Move TEMP, 0
	180 Not TEMP
	181 Move W8, TEMP
	182 Move [X19+16], W8
	183 Compare X21, 0
	184 JumpIfEqual {298}
	185 Move X8, [X21+120]
	186 Compare X8, 0
	187 JumpIfEqual {298}
	188 Move W19, W31
	189 Move W9, [X8+24]
	190 NotImplemented "Instruction CMP not yet implemented."
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move X20, W19
	193 Add X8, X8, X20
	194 Move X0, [X8+32]
	195 Compare X0, 0
	196 JumpIfEqual {298}
	197 Move W1, W31
	198 Move X2, X31
	199 Call Behaviour.set_enabled, X0, X1
	200 Move X8, [X21+128]
	201 Compare X8, 0
	202 JumpIfEqual {298}
	203 Move W9, [X8+24]
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Add X8, X8, X20
	206 Move X0, [X8+32]
	207 Compare X0, 0
	208 JumpIfEqual {298}
	209 Move W1, W31
	210 Move X2, X31
	211 Add W19, W19, 1
	212 Call Renderer.set_enabled, X0, X1
	213 Move X8, [X21+120]
	214 Compare X8, 0
	215 JumpIfNotEqual {189}
	216 Move W0, W31
	217 Move X8, 0x2316000
	218 Move X8, [X8+2440]
	219 Move S8, W31
	220 Move X8, [X8]
	221 Move [X19+56], W31
	222 Move [X19+48], X8
	223 Move X0, X31
	224 Call Time.get_deltaTime
	225 Move S1, 0.5
	226 Multiply S0, S0, S1
	227 Add S0, S8, S0
	228 Move S8, 1
	229 NotImplemented "Instruction FCMP not yet implemented."
	230 Move [X19+56], S0
	231 Move W8, [X19+40]
	232 Move X8, [X21+168]
	233 Move W9, 4
	234 Move W8, [X19+60]
	235 Add W8, W8, 1
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move [X19+60], W8
	238 Move X8, [X21+176]
	239 Move W9, 3
	240 Subtract S0, S8, S0
	241 Move S1, 4
	242 Call 0x3EB2B50
	243 Move V1, [X19+40]
	244 Move W8, 0x7F800000
	245 Subtract S0, S8, S0
	246 Move S2, W8
	247 NotImplemented "Instruction SCVTF not yet implemented."
	248 Multiply S0, S0, S1
	249 NotImplemented "Instruction FCVTZS not yet implemented."
	250 NotImplemented "Instruction FCMP not yet implemented."
	251 Move W9, 0x80000000
	252 NotImplemented "Instruction CSEL not yet implemented."
	253 Move X9, 0x231B000
	254 Move X9, [X9+152]
	255 Add X0, X31, 12
	256 Move X2, X31
	257 Move [X31+12], W8
	258 Move X1, [X9]
	259 Call Int32.ToString, X0, X1
	260 Move [X19+48], X0
	261 Compare X21, 0
	262 JumpIfEqual {298}
	263 Move X20, [X21+120]
	264 Compare X20, 0
	265 JumpIfEqual {298}
	266 Move W8, [X20+24]
	267 NotImplemented "Instruction CMP not yet implemented."
	268 Move W21, W31
	269 NotImplemented "Instruction CMP not yet implemented."
	270 Add X8, X20, W21
	271 Move X0, [X8+32]
	272 Compare X0, 0
	273 JumpIfEqual {298}
	274 Move X8, [X0]
	275 Move X1, [X19+48]
	276 Move X9, [X8+1368]
	277 Move X2, [X8+1376]
	278 NotImplemented "Instruction BLR not yet implemented."
	279 Move W8, [X20+24]
	280 Add W21, W21, 1
	281 NotImplemented "Instruction CMP not yet implemented."
	282 Move W0, 1
	283 Move [X19+24], X31
	284 Move [X19+16], W0
	285 Move X8, [X21+184]
	286 Move W9, 5
	287 Move [X19+16], W9
	288 Move [X19+24], X8
	289 Move W0, 1
	290 Move X20, [X31+48]
	291 Move X19, [X31+56]
	292 Move X22, [X31+32]
	293 Move X21, [X31+40]
	294 Move X30, [X31+16]
	295 Move X23, [X31+24]
	296 Move V8, [X31+64]
	297 Return X0
	298 Call 0x1C17F20
	299 Call 0x1C17F28

Method: System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()

Disassembly:
	0x01DDE3D0 LDP X20, X19, [X31 + 0x20]
	0x01DDE3D4 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x01DDE3D8 LDR X8, [X8 + 0xB8]
	0x01DDE3DC STR W0, [X8 + 0x48]
	0x01DDE3E0 LDR X30, [X31], #0x30
	0x01DDE3E4 RET
	0x01DDE3E8 MOV X1, X31
	0x01DDE3EC B 0x33BDD8C
	0x01DDE3F0 STP X30, X19, [X31 - 0x10]!
	0x01DDE3F4 LDR X8, [X0 + 0x50]
	0x01DDE3F8 CBZ X8, 0x1DDE408
	0x01DDE3FC LDR W0, [X8 + 0x3C]
	0x01DDE400 LDP X30, X19, [X31], #0x10
	0x01DDE404 RET
	0x01DDE408 ADRP X0, 0x2315000
	0x01DDE40C LDR X0, [X0 + 0x5B0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x2316000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x231B000
	011 Move X0, [X0+2904]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x01DDE410 BL 0x1C16D08
	0x01DDE414 BL 0x1C16F10

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

