Type: AnimalCompany.TermsAgreements/<AgreeToAllTermsNeeded>d__13

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x01E04FB4 MOV X1, X31
	0x01E04FB8 BL 0x1DBAC58
	0x01E04FBC MOV W1, W19
	0x01E04FC0 MOV V1.16B, V13.16B
	0x01E04FC4 MOV V2.16B, V12.16B
	0x01E04FC8 MOV V3.16B, V11.16B
	0x01E04FCC MOV V4.16B, V10.16B
	0x01E04FD0 MOV V5.16B, V9.16B
	0x01E04FD4 MOV V6.16B, V8.16B
	0x01E04FD8 LDP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x01E05184 STP S12, S11, [X21 + 0x30]

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x01E05188 STP S10, S9, [X21 + 0x38]
	0x01E0518C STR S8, [X21 + 0x40]
	0x01E05190 CBZ X21, 0x1E05204
	0x01E05194 LDR W8, [X21 + 0x14]
	0x01E05198 MOVZ W9, 0x140
	0x01E0519C MOV X0, X20
	0x01E051A0 MOV X1, X21
	0x01E051A4 ORR W8, W8, 0x4
	0x01E051A8 MOV X2, X31
	0x01E051AC STR W9, [X21 + 0xC]
	0x01E051B0 STR W8, [X21 + 0x14]
	0x01E051B4 BL 0x1EA1E24
	0x01E051B8 B 0x1E050A8
	0x01E051BC ADRP X0, 0x22F3000
	0x01E051C0 LDR X0, [X0 + 0x528]
	0x01E051C4 BL 0x1C16D08
	0x01E051C8 BL 0x1C16F10
	0x01E051CC MOV X19, X0
	0x01E051D0 ADRP X0, 0x22F3000
	0x01E051D4 LDR X0, [X0 + 0x530]
	0x01E051D8 BL 0x1C16D08
	0x01E051DC MOV X1, X0
	0x01E051E0 MOV X0, X19
	0x01E051E4 MOV X2, X31
	0x01E051E8 BL 0x330E100
	0x01E051EC ADRP X0, 0x22F4000
	0x01E051F0 LDR X0, [X0 + 0x910]
	0x01E051F4 BL 0x1C16D08
	0x01E051F8 MOV X1, X0
	0x01E051FC MOV X0, X19
	0x01E05200 BL 0x1C16DEC
	0x01E05204 BL 0x1C16F20
	0x01E05208 STR D14, [X31 - 0x60]!
	0x01E0520C STP D13, D12, [X31 + 0x10]
	0x01E05210 STP D11, D10, [X31 + 0x20]
	0x01E05214 STP D9, D8, [X31 + 0x30]
	0x01E05218 STP X30, X21, [X31 + 0x40]
	0x01E0521C STP X20, X19, [X31 + 0x50]
	0x01E05220 ADRP X21, 0x25D3000
	0x01E05224 ADRP X20, 0x22F4000
	0x01E05228 LDRB W8, [X21 + 0xD94]
	0x01E0522C LDR X20, [X20 + 0x8F8]
	0x01E05230 MOV V8.16B, V6.16B
	0x01E05234 MOV V9.16B, V5.16B
	0x01E05238 MOV V10.16B, V4.16B
	0x01E0523C MOV V11.16B, V3.16B
	0x01E05240 MOV V12.16B, V2.16B
	0x01E05244 MOV V13.16B, V1.16B
	0x01E05248 MOV V14.16B, V0.16B
	0x01E0524C MOV W19, W0
	0x01E05250 TBNZ X8, 0x0, 0x1E05274
	0x01E05254 ADRP X0, 0x22F4000
	0x01E05258 LDR X0, [X0 + 0x8F8]
	0x01E0525C BL 0x1C16CF4
	0x01E05260 ADRP X0, 0x22F4000
	0x01E05264 LDR X0, [X0 + 0x918]
	0x01E05268 BL 0x1C16CF4
	0x01E0526C MOVZ W8, 0x1
	0x01E05270 STRB W8, [X21 + 0xD94]
	0x01E05274 LDR X8, [X20]
	0x01E05278 STR X31, [X31 + 0x8]
	0x01E0527C LDR X8, [X8 + 0xB8]
	0x01E05280 LDR X8, [X8]
	0x01E05284 CBZ X8, 0x1E0532C
	0x01E05288 LDR X0, [X8 + 0x50]
	0x01E0528C CBZ X0, 0x1E0532C
	0x01E05290 ADRP X8, 0x22F4000
	0x01E05294 LDR X8, [X8 + 0x918]
	0x01E05298 ADD X2, X31, 0x8
	0x01E0529C MOV W1, W19
	0x01E052A0 LDR X3, [X8]
	0x01E052A4 BL 0x25DA0C8
	0x01E052A8 TBZ X0, 0x0, 0x1E05310
	0x01E052AC LDR X0, [X31 + 0x8]
	0x01E052B0 CBZ X0, 0x1E0532C
	0x01E052B4 MOV X1, X31
	0x01E052B8 BL 0x3C32E90
	0x01E052BC CBZ X0, 0x1E0532C
	0x01E052C0 MOV V0.16B, V14.16B
	0x01E052C4 MOV V1.16B, V13.16B
	0x01E052C8 MOV V2.16B, V12.16B
	0x01E052CC MOV X1, X31
	0x01E052D0 BL 0x3C3F62C
	0x01E052D4 LDR X0, [X31 + 0x8]
	0x01E052D8 CBZ X0, 0x1E0532C
	0x01E052DC MOV X1, X31
	0x01E052E0 BL 0x3C32E90
	0x01E052E4 CBZ X0, 0x1E0532C
	0x01E052E8 MOV V0.16B, V11.16B
	0x01E052EC MOV V1.16B, V10.16B
	0x01E052F0 MOV V2.16B, V9.16B
	0x01E052F4 MOV V3.16B, V8.16B
	0x01E052F8 MOV X1, X31
	0x01E052FC BL 0x3C3F7AC
	0x01E05300 LDR X0, [X31 + 0x8]
	0x01E05304 CBZ X0, 0x1E0532C
	0x01E05308 MOV X1, X31
	0x01E0530C BL 0x3C873AC
	0x01E05310 LDP X20, X19, [X31 + 0x50]
	0x01E05314 LDP X30, X21, [X31 + 0x40]
	0x01E05318 LDP D9, D8, [X31 + 0x30]
	0x01E0531C LDP D11, D10, [X31 + 0x20]
	0x01E05320 LDP D13, D12, [X31 + 0x10]
	0x01E05324 LDR V14, [X31], #0x60
	0x01E05328 RET
	0x01E0532C BL 0x1C16F20
	0x01E05330 STR X30, [X31 - 0x30]!
	0x01E05334 STP X22, X21, [X31 + 0x10]
	0x01E05338 STP X20, X19, [X31 + 0x20]
	0x01E0533C ADRP X21, 0x25D3000
	0x01E05340 ADRP X22, 0x22F4000
	0x01E05344 ADRP X20, 0x22F4000
	0x01E05348 LDRB W8, [X21 + 0xD95]
	0x01E0534C LDR X22, [X22 + 0x920]
	0x01E05350 LDR X20, [X20 + 0x928]
	0x01E05354 MOV X19, X0
	0x01E05358 TBNZ X8, 0x0, 0x1E0537C
	0x01E0535C ADRP X0, 0x22F4000
	0x01E05360 LDR X0, [X0 + 0x928]
	0x01E05364 BL 0x1C16CF4
	0x01E05368 ADRP X0, 0x22F4000
	0x01E0536C LDR X0, [X0 + 0x920]
	0x01E05370 BL 0x1C16CF4
	0x01E05374 MOVZ W8, 0x1
	0x01E05378 STRB W8, [X21 + 0xD95]
	0x01E0537C LDR X0, [X22]
	0x01E05380 BL 0x1C16F10
	0x01E05384 LDR X1, [X20]
	0x01E05388 MOV X20, X0
	0x01E0538C BL 0x25DADB4
	0x01E05390 STR X20, [X19 + 0x50]
	0x01E05394 MOV X0, X19
	0x01E05398 LDP X20, X19, [X31 + 0x20]
	0x01E0539C LDP X22, X21, [X31 + 0x10]
	0x01E053A0 MOV X1, X31
	0x01E053A4 LDR X30, [X31], #0x30
	0x01E053A8 B 0x1E74F1C
	0x01E053AC STR D14, [X31 - 0x60]!
	0x01E053B0 STP D13, D12, [X31 + 0x8]
	0x01E053B4 STP D11, D10, [X31 + 0x18]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x25D4000
	009 Move W8, [X20+3469]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0x22EF000
	016 Move X0, [X0+2392]
	017 Call 0x1C17CF4
	018 Move X0, 0x22F5000
	019 Move X0, [X0+2200]
	020 Call 0x1C17CF4
	021 Move X0, 0x22F5000
	022 Move X0, [X0+2208]
	023 Call 0x1C17CF4
	024 Move X0, 0x22F5000
	025 Move X0, [X0+2216]
	026 Call 0x1C17CF4
	027 Move X0, 0x22F5000
	028 Move X0, [X0+2224]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+3469], W8
	032 Move W8, [X19+16]
	033 Move X23, [X19+32]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Compare W8, 0
	036 JumpIfNotEqual {130}
	037 Move TEMP, 0
	038 Not TEMP
	039 Move W8, TEMP
	040 Move [X19+16], W8
	041 Compare X23, 0
	042 JumpIfEqual {106}
	043 Move X0, [X23+40]
	044 Compare X0, 0
	045 JumpIfEqual {106}
	046 Move X1, X31
	047 Call Component.get_gameObject, X0
	048 Compare X0, 0
	049 JumpIfEqual {106}
	050 Move W1, 1
	051 Move X2, X31
	052 Call GameObject.SetActive, X0, X1
	053 Move W8, W31
	054 Move [X19+48], W31
	055 Move TEMP, 0
	056 Not TEMP
	057 Move W8, TEMP
	058 Move [X19+16], W8
	059 Move X8, 0x22F5000
	060 Move X8, [X8+2224]
	061 Move X0, [X8]
	062 Call 0x1C17F10
	063 Move X1, X31
	064 Move X20, X0
	065 Call Object..ctor, X0
	066 Compare X20, 0
	067 JumpIfEqual {106}
	068 Move [X20+24], X23
	069 Move X8, [X19+40]
	070 Compare X8, 0
	071 JumpIfEqual {106}
	072 NotImplemented "Instruction LDRSW not yet implemented."
	073 Move W10, [X8+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Add X8, X8, X9
	076 Move X21, [X8+32]
	077 Move [X20+16], X31
	078 Compare X23, 0
	079 JumpIfEqual {106}
	080 Move X0, [X23+32]
	081 Compare X0, 0
	082 JumpIfEqual {106}
	083 Move X24, 0x22F5000
	084 Move X24, [X24+2208]
	085 Move W22, W31
	086 Move W8, [X19+48]
	087 Move W9, [X0+24]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X2, [X24]
	090 Move W1, W22
	091 Call List`1<Object>.get_Item, X0, X1
	092 Compare X0, 0
	093 JumpIfEqual {106}
	094 Move X0, [X0+16]
	095 Move X1, X21
	096 Move X2, X31
	097 Call String.op_Equality, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfEqual {131}
	102 Move X0, [X23+32]
	103 Add W22, W22, 1
	104 Compare X0, 0
	105 JumpIfNotEqual {86}
	106 Call 0x1C17F20
	107 Move X0, [X20+16]
	108 Compare X0, 0
	109 JumpIfNotEqual {140}
	110 Move W8, [X19+48]
	111 Add W8, W8, 1
	112 Move [X19+48], W8
	113 Move X9, [X19+40]
	114 Compare X9, 0
	115 JumpIfEqual {106}
	116 Move W9, [X9+24]
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Compare X23, 0
	119 JumpIfEqual {106}
	120 Move X0, [X23+40]
	121 Compare X0, 0
	122 JumpIfEqual {106}
	123 Move X1, X31
	124 Call Component.get_gameObject, X0
	125 Compare X0, 0
	126 JumpIfEqual {106}
	127 Move W1, W31
	128 Move X2, X31
	129 Call GameObject.SetActive, X0, X1
	130 Move W0, W31
	131 Move X0, [X23+32]
	132 Compare X0, 0
	133 JumpIfEqual {106}
	134 Move X2, [X24]
	135 Move W1, W22
	136 Call List`1<Object>.get_Item, X0, X1
	137 Move [X20+16], X0
	138 Compare X0, 0
	139 JumpIfEqual {110}
	140 Move X8, 0x22EF000
	141 Move X8, [X8+2392]
	142 Move X0, [X8]
	143 Call 0x1C17F10
	144 Move X8, 0x22F5000
	145 Move X8, [X8+2216]
	146 Move X1, X20
	147 Move X3, X31
	148 Move X21, X0
	149 Move X2, [X8]
	150 Call CoroutineGenerator..ctor, X0, X1, X2
	151 Move X0, X21
	152 Move W1, W31
	153 Move X2, X31
	154 Call Commands.Coroutine, X0, X1
	155 Move [X19+24], X0
	156 Move W0, 1
	157 Move [X19+16], W0
	158 Move X20, [X31+48]
	159 Move X19, [X31+56]
	160 Move X22, [X31+32]
	161 Move X21, [X31+40]
	162 Move X24, [X31+16]
	163 Move X23, [X31+24]
	164 Move X30, [X31+64]
	165 Return X0
	166 Call 0x1C17F28

Method: SpatialSys.CommandLib.Command System.Collections.Generic.IEnumerator<SpatialSys.CommandLib.Command>.get_Current()

Disassembly:
	0x01E053B8 STP D9, D8, [X31 + 0x28]
	0x01E053BC STR X30, [X31 + 0x38]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x01E053C0 STP X22, X21, [X31 + 0x40]
	0x01E053C4 STP X20, X19, [X31 + 0x50]
	0x01E053C8 ADRP X20, 0x25D3000
	0x01E053CC ADRP X22, 0x22F1000
	0x01E053D0 LDRB W8, [X20 + 0xD96]
	0x01E053D4 LDR X22, [X22 + 0xA78]
	0x01E053D8 MOV X21, X1
	0x01E053DC MOV X19, X0
	0x01E053E0 TBNZ X8, 0x0, 0x1E053F8
	0x01E053E4 ADRP X0, 0x22F1000
	0x01E053E8 LDR X0, [X0 + 0xA78]
	0x01E053EC BL 0x1C16CF4
	0x01E053F0 MOVZ W8, 0x1
	0x01E053F4 STRB W8, [X20 + 0xD96]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x22EF000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x22F5000
	011 Move X0, [X0+2232]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x01E053F8 LDR X0, [X22]
	0x01E053FC LDRB W20, [X21 + 0x24]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

