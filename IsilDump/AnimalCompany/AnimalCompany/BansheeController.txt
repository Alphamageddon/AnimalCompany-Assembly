Type: AnimalCompany.BansheeController

Method: AnimalCompany.BansheeController/Phase get_phase()

Disassembly:
	0x01DE4628 B 0x1DE464C
	0x01DE462C B 0x1DE464C
	0x01DE4630 B 0x1DE464C
	0x01DE4634 B 0x1DE464C
	0x01DE4638 B 0x1DE464C
	0x01DE463C B 0x1DE464C
	0x01DE4640 B 0x1DE464C
	0x01DE4644 B 0x1DE464C
	0x01DE4648 B 0x1DE464C
	0x01DE464C MOV X19, X0
	0x01DE4650 CMP W1, 0x1
	0x01DE4654 B.NE 0x1DE4688
	0x01DE4658 MOV X0, X19
	0x01DE465C BL 0x3EB1AD0
	0x01DE4660 LDR X20, [X0]
	0x01DE4664 BL 0x3EB1AE0
	0x01DE4668 ADRP X8, 0x2314000
	0x01DE466C LDR X8, [X8 + 0xC20]
	0x01DE4670 ADD X0, X31, 0xD0
	0x01DE4674 LDR X1, [X8]
	0x01DE4678 BL 0x2BC434C
	0x01DE467C CBZ X20, 0x1DE456C
	0x01DE4680 MOV X0, X20
	0x01DE4684 BL 0x1C16F18

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+60]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2310000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2315000
	016 Move X0, [X0+3272]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2315000
	023 Move X0, [X0+3280]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_phase(AnimalCompany.BansheeController/Phase value)

Disassembly:
	0x01DE4688 MOV X20, X31
	0x01DE468C B 0x1DE4694
	0x01DE4690 MOV X19, X0
	0x01DE4694 ADRP X8, 0x2314000
	0x01DE4698 LDR X8, [X8 + 0xC20]
	0x01DE469C LDR X1, [X8]
	0x01DE46A0 ADD X0, X31, 0xD0
	0x01DE46A4 BL 0x2BC434C
	0x01DE46A8 CBNZ X20, 0x1DE46B4
	0x01DE46AC MOV X0, X19
	0x01DE46B0 BL 0x1D2C690
	0x01DE46B4 MOV X0, X20
	0x01DE46B8 BL 0x1C16F18
	0x01DE46BC BL 0x1990590
	0x01DE46C0 SUB X31, X31, 0x60
	0x01DE46C4 STP D11, D10, [X31 + 0x20]
	0x01DE46C8 STP D9, D8, [X31 + 0x30]
	0x01DE46CC STP X30, X21, [X31 + 0x40]
	0x01DE46D0 STP X20, X19, [X31 + 0x50]
	0x01DE46D4 ADRP X20, 0x25F4000
	0x01DE46D8 LDRB W8, [X20 + 0xC95]
	0x01DE46DC MOV X19, X0
	0x01DE46E0 TBNZ X8, 0x0, 0x1DE4728
	0x01DE46E4 ADRP X0, 0x2314000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+60], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2310000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2315000
	016 Move X0, [X0+3272]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2315000
	023 Move X0, [X0+3288]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Boolean get_isVisible()

Disassembly:
	0x01DE46E8 LDR X0, [X0 + 0xD20]
	0x01DE46EC BL 0x1C16CF4
	0x01DE46F0 ADRP X0, 0x2314000
	0x01DE46F4 LDR X0, [X0 + 0xD28]
	0x01DE46F8 BL 0x1C16CF4
	0x01DE46FC ADRP X0, 0x2314000
	0x01DE4700 LDR X0, [X0 + 0xD30]
	0x01DE4704 BL 0x1C16CF4
	0x01DE4708 ADRP X0, 0x2314000
	0x01DE470C LDR X0, [X0 + 0xD38]
	0x01DE4710 BL 0x1C16CF4
	0x01DE4714 ADRP X0, 0x2314000
	0x01DE4718 LDR X0, [X0 + 0xC40]
	0x01DE471C BL 0x1C16CF4
	0x01DE4720 MOVZ W8, 0x1
	0x01DE4724 STRB W8, [X20 + 0xC95]
	0x01DE4728 STP X31, X31, [X31 + 0x10]
	0x01DE472C STR X31, [X31 + 0x8]
	0x01DE4730 LDR X0, [X19 + 0xD0]
	0x01DE4734 CBZ X0, 0x1DE4A04
	0x01DE4738 ADRP X21, 0x2314000
	0x01DE473C LDR X21, [X21 + 0xC40]
	0x01DE4740 MOV X1, X31
	0x01DE4744 BL 0x3C3F58C
	0x01DE4748 LDR X0, [X21]
	0x01DE474C MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+64]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2310000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x2315000
	018 Move X0, [X0+3296]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x2315000
	025 Move X0, [X0+3304]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_isVisible(System.Boolean value)

Disassembly:
	0x01DE4750 MOV V9.16B, V1.16B
	0x01DE4754 MOV V10.16B, V2.16B
	0x01DE4758 LDR W8, [X0 + 0xE0]
	0x01DE475C CBNZ W8, 0x1DE4764
	0x01DE4760 BL 0x1C16DFC
	0x01DE4764 MOV V0.16B, V8.16B
	0x01DE4768 MOV V1.16B, V9.16B
	0x01DE476C MOV V2.16B, V10.16B
	0x01DE4770 MOV X0, X31
	0x01DE4774 BL 0x1DF83E4
	0x01DE4778 MOV W20, W0
	0x01DE477C AND W1, W0, 0x1
	0x01DE4780 MOV X0, X19
	0x01DE4784 BL 0x1DE3750
	0x01DE4788 MOV X0, X19
	0x01DE478C BL 0x1DE37B4
	0x01DE4790 MOV X0, X19
	0x01DE4794 MOV X1, X31
	0x01DE4798 MOV V8.16B, V0.16B
	0x01DE479C BL 0x1DEA4B8
	0x01DE47A0 TBZ X20, 0x0, 0x1DE4890
	0x01DE47A4 FADD S0, S8, S0
	0x01DE47A8 MOV X0, X19
	0x01DE47AC BL 0x1DE3814
	0x01DE47B0 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+64], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x2310000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x2315000
	017 Move X0, [X0+3296]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x2315000
	024 Move X0, [X0+3312]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: System.Single get_timerToAttack()

Disassembly:
	0x01DE47B4 BL 0x1DE37B4
	0x01DE47B8 FMOV S1, 5
	0x01DE47BC FCMP S0, S1
	0x01DE47C0 B.LT 0x1DE48A4
	0x01DE47C4 MOV X0, X19
	0x01DE47C8 MOV X1, X31
	0x01DE47CC BL 0x3C32E90
	0x01DE47D0 CBZ X0, 0x1DE4A04
	0x01DE47D4 MOV X1, X31
	0x01DE47D8 BL 0x3C3F58C
	0x01DE47DC MOV X0, X19
	0x01DE47E0 MOV V8.16B, V0.16B
	0x01DE47E4 MOV V9.16B, V1.16B
	0x01DE47E8 MOV V10.16B, V2.16B
	0x01DE47EC BL 0x1DE38C0
	0x01DE47F0 LDR X0, [X21]
	0x01DE47F4 MOV V11.16B, V0.16B
	0x01DE47F8 LDR W8, [X0 + 0xE0]
	0x01DE47FC CBNZ W8, 0x1DE4804
	0x01DE4800 BL 0x1C16DFC
	0x01DE4804 ADD X1, X31, 0x18
	0x01DE4808 MOV X0, X19
	0x01DE480C MOV V0.16B, V8.16B
	0x01DE4810 MOV V1.16B, V9.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+68]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2310000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2315000
	016 Move X0, [X0+3320]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2315000
	023 Move X0, [X0+3328]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_timerToAttack(System.Single value)

Disassembly:
	0x01DE4814 MOV V2.16B, V10.16B
	0x01DE4818 MOV V3.16B, V11.16B
	0x01DE481C MOV X2, X31
	0x01DE4820 BL 0x1DE9804
	0x01DE4824 TBZ X0, 0x0, 0x1DE48A4
	0x01DE4828 ADRP X8, 0x2314000
	0x01DE482C LDR X20, [X31 + 0x18]
	0x01DE4830 LDR X8, [X8 + 0xD38]
	0x01DE4834 LDR X0, [X8]
	0x01DE4838 BL 0x1C16F10
	0x01DE483C ADRP X8, 0x2314000
	0x01DE4840 LDR X8, [X8 + 0xD20]
	0x01DE4844 MOV X1, X19
	0x01DE4848 MOV X3, X31
	0x01DE484C MOV X21, X0
	0x01DE4850 LDR X2, [X8]
	0x01DE4854 BL 0x2D30ADC
	0x01DE4858 ADRP X8, 0x2314000
	0x01DE485C LDR X8, [X8 + 0xD30]
	0x01DE4860 MOV X0, X20
	0x01DE4864 MOV X1, X21
	0x01DE4868 LDR X2, [X8]
	0x01DE486C BL 0x21C9BC8
	0x01DE4870 ADRP X8, 0x2314000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+68], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2310000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2315000
	016 Move X0, [X0+3320]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2315000
	023 Move X0, [X0+3336]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get_DISTANCE_TO_SEARCH()

Disassembly:
	0x01DE4874 LDR X8, [X8 + 0xD28]
	0x01DE4878 LDR X1, [X8]
	0x01DE487C BL 0x21C4D84
	0x01DE4880 MOV X1, X0
	0x01DE4884 MOV X0, X19
	0x01DE4888 BL 0x1DE4C80
	0x01DE488C B 0x1DE4948
	0x01DE4890 FSUB S0, S8, S0
	0x01DE4894 FMOV S1, W31
	0x01DE4898 FMAXNM S0, S0, S1
	0x01DE489C MOV X0, X19
	0x01DE48A0 BL 0x1DE3814

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+192]
	003 Compare X8, 0
	004 JumpIfEqual {14}
	005 Move X8, [X8+88]
	006 Compare X8, 0
	007 JumpIfEqual {14}
	008 Move W9, [X8+24]
	009 Compare W9, 0
	010 JumpIfEqual {15}
	011 Move V0, [X8+32]
	012 Move X30, [X31+16]
	013 Return V0
	014 Call 0x1C17F20
	015 Call 0x1C17F28

Method: System.Single get_DISTANCE_TO_DISAPPEAR()

Disassembly:
	0x01DE48A4 MOV X0, X19
	0x01DE48A8 MOV X1, X31
	0x01DE48AC BL 0x3C32E90
	0x01DE48B0 CBZ X0, 0x1DE4A04
	0x01DE48B4 MOV X1, X31
	0x01DE48B8 BL 0x3C3F58C
	0x01DE48BC LDR X8, [X19 + 0xC0]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+192]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move V0, [X8+128]
	006 Move X30, [X31+16]
	007 Return V0
	008 Call 0x1C17F20

Method: System.Single get_DISTANCE_TO_ATTACK_BY_FLASHLIGHTING()

Disassembly:
	0x01DE48C0 CBZ X8, 0x1DE4A04
	0x01DE48C4 LDR X0, [X21]
	0x01DE48C8 LDR V11, [X8 + 0x80]
	0x01DE48CC MOV V8.16B, V0.16B
	0x01DE48D0 MOV V9.16B, V1.16B
	0x01DE48D4 LDR W9, [X0 + 0xE0]
	0x01DE48D8 MOV V10.16B, V2.16B
	0x01DE48DC CBNZ W9, 0x1DE48E4
	0x01DE48E0 BL 0x1C16DFC
	0x01DE48E4 ADD X1, X31, 0x10
	0x01DE48E8 MOV X0, X19
	0x01DE48EC MOV V0.16B, V8.16B

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+192]
	003 Compare X8, 0
	004 JumpIfEqual {14}
	005 Move X8, [X8+120]
	006 Compare X8, 0
	007 JumpIfEqual {14}
	008 Move W9, [X8+24]
	009 Compare W9, 0
	010 JumpIfEqual {15}
	011 Move V0, [X8+32]
	012 Move X30, [X31+16]
	013 Return V0
	014 Call 0x1C17F20
	015 Call 0x1C17F28

Method: System.Single get_DISTANCE_TO_ATTACK()

Disassembly:
	0x01DE48F0 MOV V1.16B, V9.16B
	0x01DE48F4 MOV V2.16B, V10.16B
	0x01DE48F8 MOV V3.16B, V11.16B
	0x01DE48FC MOV X2, X31
	0x01DE4900 BL 0x1DE9804
	0x01DE4904 TBZ X0, 0x0, 0x1DE4930
	0x01DE4908 LDR V8, [X19 + 0x1B0]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+192]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move V0, [X8+76]
	006 Move X30, [X31+16]
	007 Return V0
	008 Call 0x1C17F20

Method: UnityEngine.Vector3 get_headToRootOffset()

Disassembly:
	0x01DE490C FMOV S0, 5
	0x01DE4910 FCMP S8, S0
	0x01DE4914 B.PL 0x1DE4960
	0x01DE4918 MOV X0, X19
	0x01DE491C MOV X1, X31
	0x01DE4920 BL 0x1DEA4B8
	0x01DE4924 FADD S0, S8, S0
	0x01DE4928 STR S0, [X19 + 0x1B0]
	0x01DE492C B 0x1DE4948
	0x01DE4930 MOVZ W1, 0x1
	0x01DE4934 MOV X0, X19
	0x01DE4938 BL 0x1DE3688
	0x01DE493C MOV X0, X19
	0x01DE4940 MOV W1, W31
	0x01DE4944 BL 0x1DE3750
	0x01DE4948 LDP X20, X19, [X31 + 0x50]
	0x01DE494C LDP X30, X21, [X31 + 0x40]
	0x01DE4950 LDP D9, D8, [X31 + 0x30]
	0x01DE4954 LDP D11, D10, [X31 + 0x20]
	0x01DE4958 ADD X31, X31, 0x60
	0x01DE495C RET
	0x01DE4960 TBNZ X20, 0x0, 0x1DE4948
	0x01DE4964 MOV X0, X19
	0x01DE4968 MOV X1, X31

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X1, X31
	007 Move X19, X0
	008 Call Component.get_transform, X0
	009 Compare X0, 0
	010 JumpIfEqual {30}
	011 Move X1, X31
	012 Call Transform.get_position, X0
	013 Move X0, [X19+496]
	014 Compare X0, 0
	015 JumpIfEqual {30}
	016 Move X1, X31
	017 Move V8, V0
	018 Move V9, V1
	019 Move V10, V2
	020 Call Transform.get_position, X0
	021 Subtract S0, S8, S0
	022 Subtract S1, S9, S1
	023 Move X30, [X31+32]
	024 Move X19, [X31+40]
	025 Move D9, [X31+16]
	026 Move D8, [X31+24]
	027 Subtract S2, S10, S2
	028 Move V10, [X31+48]
	029 Return X0
	030 Call 0x1C17F20

Method: System.Void HandlePhaseChanged()

Disassembly:
	0x01DE496C BL 0x3C32E90
	0x01DE4970 CBZ X0, 0x1DE4A04
	0x01DE4974 MOV X1, X31
	0x01DE4978 BL 0x3C3F58C
	0x01DE497C LDR X8, [X19 + 0xC0]
	0x01DE4980 CBZ X8, 0x1DE4A04
	0x01DE4984 LDR X0, [X21]
	0x01DE4988 LDR V11, [X8 + 0x4C]
	0x01DE498C MOV V8.16B, V0.16B
	0x01DE4990 MOV V9.16B, V1.16B
	0x01DE4994 LDR W9, [X0 + 0xE0]
	0x01DE4998 MOV V10.16B, V2.16B
	0x01DE499C CBNZ W9, 0x1DE49A4
	0x01DE49A0 BL 0x1C16DFC
	0x01DE49A4 ADD X1, X31, 0x8
	0x01DE49A8 MOV X0, X19
	0x01DE49AC MOV V0.16B, V8.16B
	0x01DE49B0 MOV V1.16B, V9.16B
	0x01DE49B4 MOV V2.16B, V10.16B
	0x01DE49B8 MOV V3.16B, V11.16B
	0x01DE49BC MOV X2, X31
	0x01DE49C0 BL 0x1DE9804
	0x01DE49C4 TBZ X0, 0x0, 0x1DE4948
	0x01DE49C8 LDR X8, [X19 + 0xC0]
	0x01DE49CC STR W31, [X19 + 0x1B0]
	0x01DE49D0 CBZ X8, 0x1DE4A04
	0x01DE49D4 LDR X20, [X8 + 0xA0]
	0x01DE49D8 MOV X0, X19
	0x01DE49DC MOV X1, X31
	0x01DE49E0 BL 0x3C32E90
	0x01DE49E4 CBZ X0, 0x1DE4A04
	0x01DE49E8 MOV X1, X31
	0x01DE49EC BL 0x3C3F58C
	0x01DE49F0 FMOV S3, 1
	0x01DE49F4 MOV X0, X20
	0x01DE49F8 MOV X1, X31
	0x01DE49FC BL 0x1DC15C4
	0x01DE4A00 B 0x1DE4948
	0x01DE4A04 BL 0x1C16F20
	0x01DE4A08 SUB X31, X31, 0xA0
	0x01DE4A0C STP D13, D12, [X31 + 0x40]
	0x01DE4A10 STP D11, D10, [X31 + 0x50]
	0x01DE4A14 STP D9, D8, [X31 + 0x60]
	0x01DE4A18 STR X30, [X31 + 0x70]
	0x01DE4A1C STP X22, X21, [X31 + 0x80]
	0x01DE4A20 STP X20, X19, [X31 + 0x90]
	0x01DE4A24 ADRP X20, 0x25F4000
	0x01DE4A28 LDRB W8, [X20 + 0xC94]
	0x01DE4A2C MOV V8.16B, V2.16B
	0x01DE4A30 MOV V9.16B, V1.16B
	0x01DE4A34 MOV V10.16B, V0.16B
	0x01DE4A38 MOV X19, X1
	0x01DE4A3C TBNZ X8, 0x0, 0x1DE4A84
	0x01DE4A40 ADRP X0, 0x2314000
	0x01DE4A44 LDR X0, [X0 + 0xC20]
	0x01DE4A48 BL 0x1C16CF4
	0x01DE4A4C ADRP X0, 0x2314000
	0x01DE4A50 LDR X0, [X0 + 0xC28]
	0x01DE4A54 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call BansheeController.get_phase, X0
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X8, [X19+192]
	010 Compare X8, 0
	011 JumpIfEqual {64}
	012 Move X20, [X8+152]
	013 Move X0, [X19+488]
	014 Compare X0, 0
	015 JumpIfEqual {64}
	016 Move W1, W31
	017 Call BansheeView.SetVisible, X0, X1
	018 Move X0, [X19+488]
	019 Compare X0, 0
	020 JumpIfEqual {64}
	021 Move X8, [X0]
	022 Move X9, [X8+536]
	023 Move X1, [X8+544]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X19+192]
	026 Compare X8, 0
	027 JumpIfEqual {64}
	028 Move X20, [X8+176]
	029 Move X0, X19
	030 Move X1, X31
	031 Call Component.get_transform, X0
	032 Compare X0, 0
	033 JumpIfEqual {64}
	034 Move X1, X31
	035 Call Transform.get_position, X0
	036 Move S3, 1
	037 Move X0, X20
	038 Move X1, X31
	039 Call SFXManager.PlaySFX, X0, X1, V0
	040 Move X20, [X19+488]
	041 Move X0, X19
	042 Call BansheeController.get_phase, X0
	043 Compare X20, 0
	044 JumpIfEqual {64}
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 Move X0, X20
	048 Call BansheeView.SetAttacking, X0, X1
	049 Move X20, [X19+200]
	050 Move X0, X19
	051 Call BansheeController.get_phase, X0
	052 Compare X20, 0
	053 JumpIfEqual {64}
	054 Move X8, [X20]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X0, X20
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X3, [X8+440]
	060 Move X2, [X8+448]
	061 NotImplemented "Instruction CSET not yet implemented."
	062 Move X30, [X31+32]
	063 CallNoReturn X3
	064 Call 0x1C17F20

Method: System.Void HandleVisibleChanged()

Disassembly:
	0x01DE4BF4 ADD X0, X31, 0x20
	0x01DE4BF8 BL 0x2BC434C
	0x01DE4BFC CBNZ X20, 0x1DE4C08
	0x01DE4C00 MOV X0, X19
	0x01DE4C04 BL 0x1D2C690
	0x01DE4C08 MOV X0, X20
	0x01DE4C0C BL 0x1C16F18
	0x01DE4C10 BL 0x1990590
	0x01DE4C14 STR D10, [X31 - 0x30]!

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+488]
	004 Call BansheeController.get_isVisible, X0
	005 Compare X19, 0
	006 JumpIfEqual {13}
	007 And W1, W0, 1
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call BansheeView.SetVisible, X0, X1
	012 Return 
	013 Call 0x1C17F20

Method: System.Void Setup()

Disassembly:
	0x01DE4C18 STP D9, D8, [X31 + 0x10]
	0x01DE4C1C STP X30, X19, [X31 + 0x20]
	0x01DE4C20 MOVZ W1, 0x2
	0x01DE4C24 MOV V8.16B, V2.16B
	0x01DE4C28 MOV V9.16B, V1.16B
	0x01DE4C2C MOV V10.16B, V0.16B
	0x01DE4C30 MOV X19, X0
	0x01DE4C34 BL 0x1DE3688
	0x01DE4C38 MOV X0, X19
	0x01DE4C3C MOV X1, X31
	0x01DE4C40 BL 0x3C32E90
	0x01DE4C44 CBZ X0, 0x1DE4C7C
	0x01DE4C48 MOV V0.16B, V10.16B
	0x01DE4C4C MOV V1.16B, V9.16B
	0x01DE4C50 MOV V2.16B, V8.16B
	0x01DE4C54 MOV X1, X31
	0x01DE4C58 BL 0x3C3F62C
	0x01DE4C5C FMOV S0, W31
	0x01DE4C60 MOV X0, X19
	0x01DE4C64 BL 0x1DE3814
	0x01DE4C68 STR W31, [X19 + 0x1B0]
	0x01DE4C6C LDP X30, X19, [X31 + 0x20]
	0x01DE4C70 LDP D9, D8, [X31 + 0x10]
	0x01DE4C74 LDR V10, [X31], #0x30
	0x01DE4C78 RET
	0x01DE4C7C BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.Setup, X0
	006 Move X0, [X19+232]
	007 Compare X0, 0
	008 JumpIfEqual {34}
	009 Move W1, W31
	010 Move X2, X31
	011 Call Behaviour.set_enabled, X0, X1
	012 Move X0, [X19+64]
	013 Compare X0, 0
	014 JumpIfEqual {34}
	015 Move X1, X31
	016 Call NetworkObject.get_HasStateAuthority, X0
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {27}
	021 Move W1, 1
	022 Move X0, X19
	023 Call BansheeController.set_phase, X0, X1
	024 Move X0, X19
	025 Move W1, W31
	026 Call BansheeController.set_isVisible, X0, X1
	027 Move X0, X19
	028 Call BansheeController.HandlePhaseChanged, X0
	029 Move X0, X19
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Call BansheeController.HandleVisibleChanged, X0
	033 Return 
	034 Call 0x1C17F20

Method: System.Void HandleRevive()

Disassembly:
	0x01DE4CA0 MOV X1, X20
	0x01DE4CA4 LDR X9, [X8 + 0x3B8]
	0x01DE4CA8 LDR X2, [X8 + 0x3C0]
	0x01DE4CAC BLR X9
	0x01DE4CB0 MOVZ W1, 0x1
	0x01DE4CB4 MOV X0, X19
	0x01DE4CB8 BL 0x1DE3750
	0x01DE4CBC LDR X1, [X19 + 0x1F8]
	0x01DE4CC0 CBZ X1, 0x1DE4CD0
	0x01DE4CC4 MOV X0, X19
	0x01DE4CC8 MOV X2, X31
	0x01DE4CCC BL 0x3C36834
	0x01DE4CD0 MOV X0, X19
	0x01DE4CD4 BL 0x1DE4CF4
	0x01DE4CD8 MOV X1, X0
	0x01DE4CDC STR X0, [X19 + 0x1F8]
	0x01DE4CE0 MOV X0, X19
	0x01DE4CE4 LDP X20, X19, [X31 + 0x10]
	0x01DE4CE8 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleRevive, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {27}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {24}
	015 Move W1, 1
	016 Move X0, X19
	017 Call BansheeController.set_phase, X0, X1
	018 Move X0, X19
	019 Move W1, W31
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Call BansheeController.set_isVisible, X0, X1
	023 Return 
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Return 
	027 Call 0x1C17F20

Method: System.Void HandleDie()

Disassembly:
	0x01DE4CEC LDR X30, [X31], #0x20
	0x01DE4CF0 B 0x3C366FC
	0x01DE4CF4 STP X30, X21, [X31 - 0x20]!
	0x01DE4CF8 STP X20, X19, [X31 + 0x10]
	0x01DE4CFC ADRP X20, 0x25F4000
	0x01DE4D00 ADRP X21, 0x2314000
	0x01DE4D04 LDRB W8, [X20 + 0xC97]
	0x01DE4D08 LDR X21, [X21 + 0xD40]
	0x01DE4D0C MOV X19, X0
	0x01DE4D10 TBNZ X8, 0x0, 0x1DE4D28
	0x01DE4D14 ADRP X0, 0x2314000
	0x01DE4D18 LDR X0, [X0 + 0xD40]
	0x01DE4D1C BL 0x1C16CF4
	0x01DE4D20 MOVZ W8, 0x1
	0x01DE4D24 STRB W8, [X20 + 0xC97]
	0x01DE4D28 LDR X0, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleDie, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {24}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {21}
	015 Move W1, 4
	016 Move X0, X19
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call BansheeController.set_phase, X0, X1
	020 Return 
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 
	024 Call 0x1C17F20

Method: System.Void HandleIsDieChanged()

Disassembly:
	0x01DE4D2C BL 0x1C16F10
	0x01DE4D30 MOV X1, X31
	0x01DE4D34 MOV X20, X0
	0x01DE4D38 BL 0x33BDD8C
	0x01DE4D3C STR W31, [X20 + 0x10]
	0x01DE4D40 STR X19, [X20 + 0x20]
	0x01DE4D44 MOV X0, X20
	0x01DE4D48 LDP X20, X19, [X31 + 0x10]
	0x01DE4D4C LDP X30, X21, [X31], #0x20
	0x01DE4D50 RET
	0x01DE4D54 STR X30, [X31 - 0x30]!
	0x01DE4D58 STP X22, X21, [X31 + 0x10]
	0x01DE4D5C STP X20, X19, [X31 + 0x20]
	0x01DE4D60 ADRP X22, 0x25F4000
	0x01DE4D64 ADRP X21, 0x230F000
	0x01DE4D68 LDRB W8, [X22 + 0xC96]
	0x01DE4D6C LDR X21, [X21 + 0x598]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X20, X0
	006 Call MobController.HandleIsDieChanged, X0
	007 Move X19, [X20+488]
	008 Move X0, X20
	009 Move X1, X31
	010 Call MobController.get_isDie, X0
	011 Compare X19, 0
	012 JumpIfEqual {21}
	013 NotImplemented "Instruction ORN not yet implemented."
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 And W1, W8, 1
	018 Move X30, [X31+32]
	019 Call BansheeView.SetVisible, X0, X1
	020 Return 
	021 Call 0x1C17F20

Method: System.Void UpdateMonsterBehaviour()

Disassembly:
	0x01DE4D70 MOV X19, X1
	0x01DE4D74 MOV X20, X0
	0x01DE4D78 TBNZ X8, 0x0, 0x1DE4D90
	0x01DE4D7C ADRP X0, 0x230F000
	0x01DE4D80 LDR X0, [X0 + 0x598]
	0x01DE4D84 BL 0x1C16CF4
	0x01DE4D88 MOVZ W8, 0x1
	0x01DE4D8C STRB W8, [X22 + 0xC96]
	0x01DE4D90 MOV X0, X20
	0x01DE4D94 MOV X1, X19
	0x01DE4D98 MOV X2, X31
	0x01DE4D9C BL 0x1DE9760
	0x01DE4DA0 LDR X0, [X21]
	0x01DE4DA4 LDR X20, [X20 + 0x1E8]
	0x01DE4DA8 LDR W8, [X0 + 0xE0]
	0x01DE4DAC CBNZ W8, 0x1DE4DB4
	0x01DE4DB0 BL 0x1C16DFC
	0x01DE4DB4 MOV X0, X19
	0x01DE4DB8 MOV X1, X31
	0x01DE4DBC MOV X2, X31
	0x01DE4DC0 BL 0x3C354F8
	0x01DE4DC4 MOV X8, X31
	0x01DE4DC8 TBZ X0, 0x0, 0x1DE4DD4
	0x01DE4DCC CBZ X19, 0x1DE4DEC
	0x01DE4DD0 LDR X8, [X19 + 0x90]
	0x01DE4DD4 CBZ X20, 0x1DE4DEC
	0x01DE4DD8 STR X8, [X20 + 0xC8]
	0x01DE4DDC LDP X20, X19, [X31 + 0x20]
	0x01DE4DE0 LDP X22, X21, [X31 + 0x10]
	0x01DE4DE4 LDR X30, [X31], #0x30
	0x01DE4DE8 RET
	0x01DE4DEC BL 0x1C16F20
	0x01DE4DF0 STR X30, [X31 - 0x20]!
	0x01DE4DF4 STP X20, X19, [X31 + 0x10]
	0x01DE4DF8 MOV W19, W1
	0x01DE4DFC MOV X1, X31
	0x01DE4E00 MOV X20, X0
	0x01DE4E04 BL 0x33BDD8C
	0x01DE4E08 STR W19, [X20 + 0x10]
	0x01DE4E0C LDP X20, X19, [X31 + 0x10]
	0x01DE4E10 LDR X30, [X31], #0x20
	0x01DE4E14 RET
	0x01DE4E18 STP X30, X19, [X31 - 0x10]!
	0x01DE4E1C MOVZ W1, 0x4
	0x01DE4E20 MOV X19, X0
	0x01DE4E24 BL 0x1DE3688
	0x01DE4E28 MOV X0, X19
	0x01DE4E2C MOV W1, W31
	0x01DE4E30 BL 0x1DE3750
	0x01DE4E34 LDR X8, [X19]
	0x01DE4E38 MOVZ W1, 0x1

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x25F5000
	006 Move W8, [X20+3218]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2315000
	013 Move X0, [X0+3344]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3218], W8
	017 Move X0, X19
	018 Move X1, X31
	019 Call MobController.UpdateMonsterBehaviour, X0
	020 Move X0, X19
	021 Call BansheeController.get_phase, X0
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X0, X19
	025 Call BansheeController.UpdateSearchingSpot, X0
	026 Move X0, X19
	027 Call BansheeController.UpdateAppeared, X0
	028 Call GameManager.get_isDebug
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {56}
	033 Move X20, [X19+408]
	034 Compare X20, 0
	035 JumpIfEqual {56}
	036 Move X0, X19
	037 Call BansheeController.get_phase, X0
	038 Move X8, 0x2315000
	039 Move X8, [X8+3344]
	040 Move TEMP, 0
	041 Not TEMP
	042 Move X9, TEMP
	043 Move [X31+24], W0
	044 Add X0, X31, 8
	045 Move X8, [X8]
	046 Move X1, X31
	047 Move [X31+8], X8
	048 Move [X31+16], X9
	049 Call Enum.ToString, X0
	050 Move X8, [X20+64]
	051 Move X9, [X20+24]
	052 Move X2, [X20+40]
	053 Move X1, X0
	054 Move X0, X8
	055 NotImplemented "Instruction BLR not yet implemented."
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X30, [X31+32]
	059 Add X31, X31, 64
	060 Return 

Method: System.Void SetSearchingSpot()

Disassembly:
	0x01DE4C80 STR X30, [X31 - 0x20]!
	0x01DE4C84 STP X20, X19, [X31 + 0x10]
	0x01DE4C88 MOV X20, X1
	0x01DE4C8C MOVZ W1, 0x3
	0x01DE4C90 MOV X19, X0
	0x01DE4C94 BL 0x1DE3688
	0x01DE4C98 LDR X8, [X19]
	0x01DE4C9C MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 1
	004 Move X19, X0
	005 Call BansheeController.set_phase, X0, X1
	006 Move X0, X19
	007 Move W1, W31
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call BansheeController.set_isVisible, X0, X1
	011 Return 

Method: System.Void UpdateSearchingSpot()

Disassembly:
	0x01DE4E3C MOV X0, X19
	0x01DE4E40 LDR X3, [X8 + 0x318]
	0x01DE4E44 LDR X2, [X8 + 0x320]
	0x01DE4E48 LDP X30, X19, [X31], #0x10
	0x01DE4E4C BR X3
	0x01DE4E50 RET
	0x01DE4E54 RET
	0x01DE4E58 STP X30, X19, [X31 - 0x10]!
	0x01DE4E5C MOV X19, X0
	0x01DE4E60 LDR X0, [X0 + 0x40]
	0x01DE4E64 CBZ X0, 0x1DE4EC4
	0x01DE4E68 LDRB W8, [X0 + 0x60]
	0x01DE4E6C TBNZ X8, 0x1, 0x1DE4EC4
	0x01DE4E70 MOV X1, X31
	0x01DE4E74 BL 0x1E93668
	0x01DE4E78 TBZ X0, 0x0, 0x1DE4EC4
	0x01DE4E7C MOV X0, X19
	0x01DE4E80 BL 0x1DE3628
	0x01DE4E84 CMP W0, 0x3
	0x01DE4E88 B.NE 0x1DE4EB0
	0x01DE4E8C LDR X1, [X19 + 0x1F8]
	0x01DE4E90 CBZ X1, 0x1DE4EA4
	0x01DE4E94 MOV X0, X19
	0x01DE4E98 MOV X2, X31
	0x01DE4E9C BL 0x3C36834
	0x01DE4EA0 STR X31, [X19 + 0x1F8]
	0x01DE4EA4 MOV X0, X19
	0x01DE4EA8 LDP X30, X19, [X31], #0x10
	0x01DE4EAC B 0x1DE4E18
	0x01DE4EB0 MOV X0, X19
	0x01DE4EB4 BL 0x1DE3628
	0x01DE4EB8 CMP W0, 0x2
	0x01DE4EBC B.NE 0x1DE4EC4
	0x01DE4EC0 STR W31, [X19 + 0x1B0]
	0x01DE4EC4 LDP X30, X19, [X31], #0x10
	0x01DE4EC8 RET
	0x01DE4ECC STR D10, [X31 - 0x40]!
	0x01DE4ED0 STP D9, D8, [X31 + 0x8]
	0x01DE4ED4 STR X30, [X31 + 0x18]
	0x01DE4ED8 STP X22, X21, [X31 + 0x20]
	0x01DE4EDC STP X20, X19, [X31 + 0x30]
	0x01DE4EE0 ADRP X21, 0x25F4000
	0x01DE4EE4 ADRP X20, 0x230F000
	0x01DE4EE8 LDRB W8, [X21 + 0xC98]
	0x01DE4EEC LDR X20, [X20 + 0x970]
	0x01DE4EF0 MOV X19, X0
	0x01DE4EF4 TBNZ X8, 0x0, 0x1DE4F0C
	0x01DE4EF8 ADRP X0, 0x230F000
	0x01DE4EFC LDR X0, [X0 + 0x970]
	0x01DE4F00 BL 0x1C16CF4
	0x01DE4F04 MOVZ W8, 0x1
	0x01DE4F08 STRB W8, [X21 + 0xC98]
	0x01DE4F0C MOV X0, X19
	0x01DE4F10 MOV X1, X31
	0x01DE4F14 BL 0x1DEA894
	0x01DE4F18 LDR X0, [X20]
	0x01DE4F1C LDR W8, [X0 + 0xE0]
	0x01DE4F20 CBNZ W8, 0x1DE4F28
	0x01DE4F24 BL 0x1C16DFC
	0x01DE4F28 MOV X0, X31
	0x01DE4F2C BL 0x3C018E4
	0x01DE4F30 TBZ X0, 0x0, 0x1DE5188
	0x01DE4F34 MOV X0, X19
	0x01DE4F38 BL 0x1DE3628
	0x01DE4F3C CMP W0, 0x1
	0x01DE4F40 B.NE 0x1DE5188
	0x01DE4F44 FMOV S0, 1
	0x01DE4F48 FMOV S1, W31
	0x01DE4F4C FMOV S2, W31
	0x01DE4F50 FMOV S3, 1
	0x01DE4F54 MOV X0, X31
	0x01DE4F58 ADD X22, X19, 0x1BC
	0x01DE4F5C BL 0x3C0D030
	0x01DE4F60 ADRP X20, 0x25F4000
	0x01DE4F64 LDR V9, [X19 + 0x1B8]
	0x01DE4F68 LDRB W8, [X20 + 0x783]
	0x01DE4F6C LDR V10, [X22]
	0x01DE4F70 CBNZ W8, 0x1DE4F88
	0x01DE4F74 ADRP X0, 0x230F000
	0x01DE4F78 LDR X0, [X0 + 0x5A0]
	0x01DE4F7C BL 0x1C16CF4
	0x01DE4F80 MOVZ W8, 0x1
	0x01DE4F84 STRB W8, [X20 + 0x783]
	0x01DE4F88 ADRP X21, 0x230F000
	0x01DE4F8C LDR X21, [X21 + 0x5A0]
	0x01DE4F90 LDR X8, [X21]
	0x01DE4F94 LDR X8, [X8 + 0xB8]
	0x01DE4F98 LDR V0, [X8]
	0x01DE4F9C LDUR V1, [X8 + 0x4]
	0x01DE4FA0 ADRP X8, 0xFFFFFFFFFED05000
	0x01DE4FA4 LDR V8, [X8 + 0xF20]
	0x01DE4FA8 FSUB S0, S9, S0
	0x01DE4FAC FSUB V1.2S, V10.2S, V1.2S
	0x01DE4FB0 FMUL S0, S0, S0
	0x00000000 INVALID
	0x01DE4FB8 FADD S0, S0, S1
	0x01DE4FBC MOV S1, V1.S[1]
	0x01DE4FC0 FADD S0, S1, S0
	0x01DE4FC4 FCMP S0, S8
	0x01DE4FC8 B.MI 0x1DE4FF8
	0x01DE4FCC ADRP X8, 0xFFFFFFFFFED05000
	0x01DE4FD0 LDR V0, [X19 + 0x1B8]
	0x01DE4FD4 LDR V1, [X19 + 0x1BC]
	0x01DE4FD8 LDR V2, [X19 + 0x1C0]
	0x01DE4FDC LDR V3, [X8 + 0xF24]
	0x01DE4FE0 MOV X0, X31
	0x01DE4FE4 BL 0x3C0CC38
	0x01DE4FE8 LDRB W8, [X20 + 0x783]
	0x01DE4FEC CMP W8, 0x0
	0x01DE4FF0 CSET W8, EQ
	0x01DE4FF4 B 0x1DE4FFC
	0x01DE4FF8 MOV W8, W31
	0x01DE4FFC LDR V9, [X19 + 0x1C4]
	0x01DE5000 LDR V10, [X19 + 0x1C8]
	0x01DE5004 CBZ W8, 0x1DE501C
	0x01DE5008 ADRP X0, 0x230E000
	0x01DE500C LDR X0, [X0 + 0x5A0]
	0x01DE5010 BL 0x1C16CF4
	0x01DE5014 MOVZ W8, 0x1
	0x01DE5018 STRB W8, [X20 + 0x783]
	0x01DE501C LDR X8, [X21]
	0x01DE5020 LDR X8, [X8 + 0xB8]
	0x01DE5024 LDR V0, [X8]
	0x01DE5028 LDUR V1, [X8 + 0x4]
	0x01DE502C FSUB S0, S9, S0
	0x01DE5030 FSUB V1.2S, V10.2S, V1.2S
	0x01DE5034 FMUL S0, S0, S0
	0x00000000 INVALID
	0x01DE503C FADD S0, S0, S1
	0x01DE5040 MOV S1, V1.S[1]
	0x01DE5044 FADD S0, S1, S0
	0x01DE5048 FCMP S0, S8
	0x01DE504C B.MI 0x1DE507C
	0x01DE5050 ADRP X8, 0xFFFFFFFFFED04000
	0x01DE5054 LDR V0, [X19 + 0x1C4]
	0x01DE5058 LDR V1, [X19 + 0x1C8]
	0x01DE505C LDR V2, [X19 + 0x1CC]
	0x01DE5060 LDR V3, [X8 + 0xF24]
	0x01DE5064 MOV X0, X31
	0x01DE5068 BL 0x3C0CC38
	0x01DE506C LDRB W8, [X20 + 0x783]
	0x01DE5070 CMP W8, 0x0
	0x01DE5074 CSET W8, EQ
	0x01DE5078 B 0x1DE5080
	0x01DE507C MOV W8, W31
	0x01DE5080 LDR V9, [X19 + 0x1D0]
	0x01DE5084 LDR V10, [X22 + 0x18]
	0x01DE5088 CBZ W8, 0x1DE50A0
	0x01DE508C ADRP X0, 0x230E000
	0x01DE5090 LDR X0, [X0 + 0x5A0]
	0x01DE5094 BL 0x1C16CF4
	0x01DE5098 MOVZ W8, 0x1
	0x01DE509C STRB W8, [X20 + 0x783]
	0x01DE50A0 LDR X8, [X21]
	0x01DE50A4 LDR X8, [X8 + 0xB8]
	0x01DE50A8 LDR V0, [X8]
	0x01DE50AC LDUR V1, [X8 + 0x4]
	0x01DE50B0 FSUB S0, S9, S0
	0x01DE50B4 FSUB V1.2S, V10.2S, V1.2S
	0x01DE50B8 FMUL S0, S0, S0
	0x00000000 INVALID
	0x01DE50C0 FADD S0, S0, S1
	0x01DE50C4 MOV S1, V1.S[1]
	0x01DE50C8 FADD S0, S1, S0
	0x01DE50CC FCMP S0, S8
	0x01DE50D0 B.MI 0x1DE5100
	0x01DE50D4 ADRP X8, 0xFFFFFFFFFED04000
	0x01DE50D8 LDR V0, [X19 + 0x1D0]
	0x01DE50DC LDR V1, [X19 + 0x1D4]
	0x01DE50E0 LDR V2, [X19 + 0x1D8]
	0x01DE50E4 LDR V3, [X8 + 0xF24]
	0x01DE50E8 MOV X0, X31
	0x01DE50EC BL 0x3C0CC38
	0x01DE50F0 LDRB W8, [X20 + 0x783]
	0x01DE50F4 CMP W8, 0x0
	0x01DE50F8 CSET W8, EQ
	0x01DE50FC B 0x1DE5104
	0x01DE5100 MOV W8, W31
	0x01DE5104 LDR V9, [X19 + 0x1DC]
	0x01DE5108 LDR V10, [X19 + 0x1E0]
	0x01DE510C CBZ W8, 0x1DE5124
	0x01DE5110 ADRP X0, 0x230E000
	0x01DE5114 LDR X0, [X0 + 0x5A0]
	0x01DE5118 BL 0x1C16CF4
	0x01DE511C MOVZ W8, 0x1
	0x01DE5120 STRB W8, [X20 + 0x783]
	0x01DE5124 LDR X8, [X21]
	0x01DE5128 LDR X8, [X8 + 0xB8]
	0x01DE512C LDR V0, [X8]
	0x01DE5130 LDUR V1, [X8 + 0x4]
	0x01DE5134 FSUB S0, S9, S0
	0x01DE5138 FSUB V1.2S, V10.2S, V1.2S
	0x01DE513C FMUL S0, S0, S0
	0x00000000 INVALID
	0x01DE5144 FADD S0, S0, S1
	0x01DE5148 MOV S1, V1.S[1]
	0x01DE514C FADD S0, S1, S0
	0x01DE5150 FCMP S0, S8
	0x01DE5154 B.MI 0x1DE5188
	0x01DE5158 ADRP X8, 0xFFFFFFFFFED04000
	0x01DE515C LDR V0, [X19 + 0x1DC]
	0x01DE5160 LDR V1, [X19 + 0x1E0]
	0x01DE5164 LDR V2, [X19 + 0x1E4]
	0x01DE5168 LDR V3, [X8 + 0xF24]
	0x01DE516C LDP X20, X19, [X31 + 0x30]
	0x01DE5170 LDP X22, X21, [X31 + 0x20]
	0x01DE5174 LDR X30, [X31 + 0x18]
	0x01DE5178 LDP D9, D8, [X31 + 0x8]
	0x01DE517C MOV X0, X31
	0x01DE5180 LDR V10, [X31], #0x40
	0x01DE5184 B 0x3C0CC38
	0x01DE5188 LDP X20, X19, [X31 + 0x30]
	0x01DE518C LDP X22, X21, [X31 + 0x20]
	0x01DE5190 LDR X30, [X31 + 0x18]
	0x01DE5194 LDP D9, D8, [X31 + 0x8]
	0x01DE5198 LDR V10, [X31], #0x40
	0x01DE519C RET
	0x01DE51A0 STR X30, [X31 - 0x30]!
	0x01DE51A4 STP X22, X21, [X31 + 0x10]
	0x01DE51A8 STP X20, X19, [X31 + 0x20]
	0x01DE51AC ADRP X20, 0x25F3000
	0x01DE51B0 LDRB W8, [X20 + 0xC99]
	0x01DE51B4 MOV X19, X0
	0x01DE51B8 TBNZ X8, 0x0, 0x1DE51D0
	0x01DE51BC ADRP X0, 0x2312000
	0x01DE51C0 LDR X0, [X0 + 0x860]
	0x01DE51C4 BL 0x1C16CF4
	0x01DE51C8 MOVZ W8, 0x1
	0x01DE51CC STRB W8, [X20 + 0xC99]
	0x01DE51D0 ADRP X22, 0x25F3000
	0x01DE51D4 ADRP X20, 0x2312000
	0x01DE51D8 LDRB W8, [X22 + 0x783]
	0x01DE51DC LDR X20, [X20 + 0x860]
	0x01DE51E0 ADD X21, X19, 0x1C4
	0x01DE51E4 CBNZ W8, 0x1DE51FC
	0x01DE51E8 ADRP X0, 0x230E000
	0x01DE51EC LDR X0, [X0 + 0x5A0]
	0x01DE51F0 BL 0x1C16CF4
	0x01DE51F4 MOVZ W8, 0x1
	0x01DE51F8 STRB W8, [X22 + 0x783]
	0x01DE51FC ADRP X8, 0x230E000
	0x01DE5200 LDR X8, [X8 + 0x5A0]
	0x01DE5204 LDR X8, [X8]
	0x01DE5208 LDR X9, [X8 + 0xB8]
	0x01DE520C LDR V0, [X9]
	0x01DE5210 LDR V1, [X9 + 0x8]
	0x01DE5214 STR D0, [X19 + 0x1B8]
	0x01DE5218 STR S1, [X19 + 0x1C0]
	0x01DE521C LDR X9, [X8 + 0xB8]
	0x01DE5220 LDR V0, [X9]
	0x01DE5224 LDR V1, [X9 + 0x8]
	0x01DE5228 STR D0, [X21]
	0x01DE522C STR S1, [X19 + 0x1CC]
	0x01DE5230 LDR X9, [X8 + 0xB8]
	0x01DE5234 LDR V0, [X9]
	0x01DE5238 LDR V1, [X9 + 0x8]
	0x01DE523C STR D0, [X19 + 0x1D0]
	0x01DE5240 STR S1, [X19 + 0x1D8]
	0x01DE5244 LDR X8, [X8 + 0xB8]
	0x01DE5248 LDR V0, [X8]
	0x01DE524C LDR V1, [X8 + 0x8]
	0x01DE5250 STR D0, [X21 + 0x18]
	0x01DE5254 STR S1, [X19 + 0x1E4]
	0x01DE5258 LDR X0, [X20]
	0x01DE525C LDR W8, [X0 + 0xE0]
	0x01DE5260 CBNZ W8, 0x1DE5268
	0x01DE5264 BL 0x1C16DFC
	0x01DE5268 MOV X0, X19
	0x01DE526C LDP X20, X19, [X31 + 0x20]
	0x01DE5270 LDP X22, X21, [X31 + 0x10]
	0x01DE5274 MOV X1, X31
	0x01DE5278 LDR X30, [X31], #0x30
	0x01DE527C B 0x1DEAEA0
	0x01DE5280 STR D10, [X31 - 0x30]!
	0x01DE5284 STP D9, D8, [X31 + 0x10]
	0x01DE5288 STP X30, X19, [X31 + 0x20]
	0x01DE528C CBZ X1, 0x1DE52F8
	0x01DE5290 MOV X19, X0
	0x01DE5294 LDR X0, [X1 + 0x90]
	0x01DE5298 CBZ X0, 0x1DE52F8
	0x01DE529C MOV X1, X31
	0x01DE52A0 BL 0x3C3F58C
	0x01DE52A4 MOV X0, X19
	0x01DE52A8 MOV X1, X31
	0x01DE52AC MOV V8.16B, V0.16B
	0x01DE52B0 MOV V9.16B, V1.16B
	0x01DE52B4 MOV V10.16B, V2.16B
	0x01DE52B8 BL 0x3C32E90
	0x01DE52BC CBZ X0, 0x1DE52F8
	0x01DE52C0 MOV X1, X31
	0x01DE52C4 BL 0x3C3F58C
	0x01DE52C8 FSUB S0, S8, S0
	0x01DE52CC FSUB S1, S9, S1
	0x01DE52D0 LDP X30, X19, [X31 + 0x20]
	0x01DE52D4 LDP D9, D8, [X31 + 0x10]
	0x01DE52D8 FSUB S2, S10, S2
	0x01DE52DC FMUL S0, S0, S0
	0x01DE52E0 FMUL S1, S1, S1
	0x01DE52E4 FADD S0, S0, S1
	0x01DE52E8 FMUL S1, S2, S2
	0x01DE52EC FADD S0, S1, S0
	0x01DE52F0 LDR V10, [X31], #0x30
	0x01DE52F4 RET
	0x01DE52F8 BL 0x1C16F20
	0x01DE52FC STP X30, X19, [X31 - 0x10]!
	0x01DE5300 AND W1, W1, 0x1
	0x01DE5304 MOV X2, X31
	0x01DE5308 MOV X19, X0
	0x01DE530C BL 0x1DEB2A4
	0x01DE5310 LDR W1, [X19 + 0x1A4]
	0x01DE5314 MOV X0, X19
	0x01DE5318 BL 0x1DE3688
	0x01DE531C LDRB W1, [X19 + 0x1A8]
	0x01DE5320 MOV X0, X19
	0x01DE5324 BL 0x1DE3750
	0x01DE5328 LDR V0, [X19 + 0x1AC]
	0x01DE532C MOV X0, X19
	0x01DE5330 LDP X30, X19, [X31], #0x10
	0x01DE5334 B 0x1DE3814
	0x01DE5338 STP X30, X19, [X31 - 0x10]!
	0x01DE533C MOV X1, X31
	0x01DE5340 MOV X19, X0
	0x01DE5344 BL 0x1DEB39C
	0x01DE5348 MOV X0, X19
	0x01DE534C BL 0x1DE3628
	0x01DE5350 STR W0, [X19 + 0x1A4]
	0x01DE5354 MOV X0, X19
	0x01DE5358 BL 0x1DE36E8
	0x01DE535C AND W8, W0, 0x1
	0x01DE5360 MOV X0, X19
	0x01DE5364 STRB W8, [X19 + 0x1A8]
	0x01DE5368 BL 0x1DE37B4
	0x01DE536C STR S0, [X19 + 0x1AC]
	0x01DE5370 LDP X30, X19, [X31], #0x10
	0x01DE5374 RET
	0x01DE5378 RET
	0x01DE537C SUB X31, X31, 0xB0
	0x01DE5380 STP D15, D14, [X31 + 0x40]
	0x01DE5384 STP D13, D12, [X31 + 0x50]
	0x01DE5388 STP D11, D10, [X31 + 0x60]
	0x01DE538C STP D9, D8, [X31 + 0x70]
	0x01DE5390 STP X30, X23, [X31 + 0x80]
	0x01DE5394 STP X22, X21, [X31 + 0x90]
	0x01DE5398 STP X20, X19, [X31 + 0xA0]
	0x01DE539C ADRP X19, 0x25F3000
	0x01DE53A0 LDRB W8, [X19 + 0xC9A]
	0x01DE53A4 MOV X20, X0
	0x01DE53A8 TBNZ X8, 0x0, 0x1DE53C0
	0x01DE53AC ADRP X0, 0x230E000
	0x01DE53B0 LDR X0, [X0 + 0x598]
	0x01DE53B4 BL 0x1C16CF4
	0x01DE53B8 MOVZ W8, 0x1
	0x01DE53BC STRB W8, [X19 + 0xC9A]
	0x01DE53C0 LDR W8, [X20 + 0x10]
	0x01DE53C4 LDR X19, [X20 + 0x20]
	0x01DE53C8 CMP W8, 0x1
	0x01DE53CC B.EQ 0x1DE5454
	0x01DE53D0 CBNZ W8, 0x1DE5790
	0x01DE53D4 MOVN W8, 0x0
	0x01DE53D8 STR W8, [X20 + 0x10]
	0x01DE53DC CBZ X19, 0x1DE59F8
	0x01DE53E0 ADRP X22, 0x230E000
	0x01DE53E4 LDR X22, [X22 + 0x598]
	0x01DE53E8 LDR X21, [X19 + 0x160]
	0x01DE53EC LDR X0, [X22]
	0x01DE53F0 LDR W8, [X0 + 0xE0]
	0x01DE53F4 CBNZ W8, 0x1DE53FC
	0x01DE53F8 BL 0x1C16DFC
	0x01DE53FC MOV X0, X21
	0x01DE5400 MOV X1, X31
	0x01DE5404 MOV X2, X31
	0x01DE5408 BL 0x3C3883C
	0x01DE540C TBNZ X0, 0x0, 0x1DE5790
	0x01DE5410 LDR X8, [X19 + 0x160]
	0x01DE5414 CBZ X8, 0x1DE59F8
	0x01DE5418 LDR X0, [X22]
	0x01DE541C LDR X21, [X8 + 0x90]
	0x01DE5420 LDR W9, [X0 + 0xE0]
	0x01DE5424 CBNZ W9, 0x1DE542C
	0x01DE5428 BL 0x1C16DFC
	0x01DE542C MOV X0, X21
	0x01DE5430 MOV X1, X31
	0x01DE5434 MOV X2, X31
	0x01DE5438 BL 0x3C3883C
	0x01DE543C TBNZ X0, 0x0, 0x1DE5790
	0x01DE5440 MOVZ W8, 0x3333
	0x01DE5444 MOVK W8, 0x3F330000
	0x01DE5448 STR W8, [X20 + 0x28]
	0x01DE544C MOVZ W23, 0x1
	0x01DE5450 B 0x1DE546C
	0x01DE5454 LDR V0, [X20 + 0x28]
	0x01DE5458 MOVN W8, 0x0
	0x01DE545C STR W8, [X20 + 0x10]
	0x01DE5460 FCMP S0, 0x0
	0x01DE5464 CSET W23, GT
	0x01DE5468 CBZ X19, 0x1DE59F8
	0x01DE546C ADRP X22, 0x230E000
	0x01DE5470 LDR X22, [X22 + 0x598]
	0x01DE5474 LDR X21, [X19 + 0x160]
	0x01DE5478 LDR X0, [X22]
	0x01DE547C LDR W8, [X0 + 0xE0]
	0x01DE5480 CBNZ W8, 0x1DE5488
	0x01DE5484 BL 0x1C16DFC
	0x01DE5488 MOV X0, X21
	0x01DE548C MOV X1, X31
	0x01DE5490 MOV X2, X31
	0x01DE5494 TBZ X23, 0x0, 0x1DE5604
	0x01DE5498 BL 0x3C3883C
	0x01DE549C TBNZ X0, 0x0, 0x1DE5790
	0x01DE54A0 LDR X8, [X19 + 0x160]
	0x01DE54A4 CBZ X8, 0x1DE59F8
	0x01DE54A8 LDR X0, [X22]
	0x01DE54AC LDR X21, [X8 + 0x90]
	0x01DE54B0 LDR W9, [X0 + 0xE0]
	0x01DE54B4 CBNZ W9, 0x1DE54BC
	0x01DE54B8 BL 0x1C16DFC
	0x01DE54BC MOV X0, X21
	0x01DE54C0 MOV X1, X31
	0x01DE54C4 MOV X2, X31
	0x01DE54C8 BL 0x3C3883C
	0x01DE54CC TBNZ X0, 0x0, 0x1DE5790
	0x01DE54D0 LDR X8, [X19 + 0x160]
	0x01DE54D4 CBZ X8, 0x1DE59F8
	0x01DE54D8 LDR X0, [X8 + 0x90]
	0x01DE54DC CBZ X0, 0x1DE59F8
	0x01DE54E0 MOV X1, X31
	0x01DE54E4 BL 0x3C3F58C
	0x01DE54E8 LDR X8, [X19 + 0x160]
	0x01DE54EC CBZ X8, 0x1DE59F8
	0x01DE54F0 LDR X0, [X8 + 0x90]
	0x01DE54F4 STR S2, [X31 + 0x3C]
	0x01DE54F8 CBZ X0, 0x1DE59F8
	0x01DE54FC MOV X1, X31
	0x01DE5500 MOV V10.16B, V1.16B
	0x01DE5504 MOV V9.16B, V0.16B
	0x01DE5508 BL 0x3C3FA04
	0x01DE550C MOV X0, X19
	0x01DE5510 MOV V11.16B, V0.16B
	0x01DE5514 MOV V12.16B, V1.16B
	0x01DE5518 MOV V13.16B, V2.16B
	0x01DE551C BL 0x1DE390C
	0x01DE5520 MOV X0, X19
	0x01DE5524 MOV X1, X31
	0x01DE5528 MOV V14.16B, V0.16B
	0x01DE552C MOV V15.16B, V1.16B
	0x01DE5530 MOV V8.16B, V2.16B
	0x01DE5534 BL 0x3C32E90
	0x01DE5538 CBZ X0, 0x1DE59F8
	0x01DE553C ADRP X8, 0xFFFFFFFFFED05000
	0x01DE5540 LDR V0, [X8 + 0xBC]
	0x01DE5544 LDR V3, [X31 + 0x3C]
	0x01DE5548 MOV X1, X31
	0x01DE554C FMUL S1, S11, S0
	0x01DE5550 FMUL S2, S12, S0
	0x01DE5554 FMUL S0, S13, S0
	0x01DE5558 FADD S1, S9, S1
	0x01DE555C FADD S2, S10, S2
	0x01DE5560 FADD S0, S3, S0
	0x01DE5564 STP S2, S1, [X31 + 0x38]
	0x01DE5568 FADD S12, S14, S1
	0x01DE556C FADD S13, S15, S2
	0x01DE5570 STR S0, [X31 + 0x34]
	0x01DE5574 FADD S14, S8, S0
	0x01DE5578 BL 0x3C3F58C
	0x01DE557C ADRP X21, 0x25F3000
	0x01DE5580 LDRB W8, [X21 + 0x785]
	0x01DE5584 MOV V8.16B, V0.16B
	0x01DE5588 MOV V9.16B, V1.16B
	0x01DE558C MOV V11.16B, V2.16B
	0x01DE5590 CBNZ W8, 0x1DE55A8
	0x01DE5594 ADRP X0, 0x230E000
	0x01DE5598 LDR X0, [X0 + 0x5A8]
	0x01DE559C BL 0x1C16CF4
	0x01DE55A0 MOVZ W8, 0x1
	0x01DE55A4 STRB W8, [X21 + 0x785]
	0x01DE55A8 ADRP X8, 0x230E000
	0x01DE55AC LDR X8, [X8 + 0x5A8]
	0x01DE55B0 FSUB S10, S12, S8
	0x01DE55B4 FSUB S9, S13, S9
	0x01DE55B8 FSUB S8, S14, S11
	0x01DE55BC LDR X0, [X8]
	0x01DE55C0 LDR W8, [X0 + 0xE0]
	0x01DE55C4 CBNZ W8, 0x1DE55CC
	0x01DE55C8 BL 0x1C16DFC
	0x01DE55CC FMUL S0, S10, S10
	0x01DE55D0 FMUL S1, S9, S9
	0x01DE55D4 ADRP X8, 0xFFFFFFFFFED05000
	0x01DE55D8 FADD S0, S0, S1
	0x01DE55DC LDR V1, [X8 + 0x17C]
	0x01DE55E0 FMUL S2, S8, S8
	0x01DE55E4 FADD S0, S2, S0
	0x01DE55E8 FSQRT S0, S0
	0x01DE55EC FCMP S0, S1
	0x01DE55F0 B.LE 0x1DE57B8
	0x01DE55F4 FDIV S10, S10, S0
	0x01DE55F8 FDIV S9, S9, S0
	0x01DE55FC FDIV S8, S8, S0
	0x01DE5600 B 0x1DE57F0
	0x01DE5604 BL 0x3C354F8
	0x01DE5608 TBZ X0, 0x0, 0x1DE5784
	0x01DE560C LDR X8, [X19 + 0x160]
	0x01DE5610 CBZ X8, 0x1DE59F8
	0x01DE5614 LDR X0, [X8 + 0x90]
	0x01DE5618 CBZ X0, 0x1DE59F8
	0x01DE561C MOV X1, X31
	0x01DE5620 BL 0x3C3F58C
	0x01DE5624 MOV X0, X19
	0x01DE5628 MOV X1, X31
	0x01DE562C MOV V8.16B, V0.16B
	0x01DE5630 MOV V9.16B, V1.16B
	0x01DE5634 MOV V10.16B, V2.16B
	0x01DE5638 BL 0x3C32E90
	0x01DE563C CBZ X0, 0x1DE59F8
	0x01DE5640 MOV X1, X31
	0x01DE5644 BL 0x3C3F58C
	0x01DE5648 ADRP X20, 0x25F3000
	0x01DE564C LDRB W8, [X20 + 0x785]
	0x01DE5650 MOV V11.16B, V0.16B
	0x01DE5654 MOV V12.16B, V1.16B
	0x01DE5658 MOV V13.16B, V2.16B
	0x01DE565C CBNZ W8, 0x1DE5674
	0x01DE5660 ADRP X0, 0x230E000
	0x01DE5664 LDR X0, [X0 + 0x5A8]
	0x01DE5668 BL 0x1C16CF4
	0x01DE566C MOVZ W8, 0x1
	0x01DE5670 STRB W8, [X20 + 0x785]
	0x01DE5674 ADRP X8, 0x230E000
	0x01DE5678 LDR X8, [X8 + 0x5A8]
	0x01DE567C FSUB S8, S8, S11
	0x01DE5680 FSUB S9, S9, S12
	0x01DE5684 FSUB S10, S10, S13
	0x01DE5688 LDR X0, [X8]
	0x01DE568C LDR W8, [X0 + 0xE0]
	0x01DE5690 CBNZ W8, 0x1DE5698
	0x01DE5694 BL 0x1C16DFC
	0x01DE5698 FMUL S0, S8, S8
	0x01DE569C FMUL S1, S9, S9
	0x01DE56A0 ADRP X8, 0xFFFFFFFFFED05000
	0x01DE56A4 FADD S0, S0, S1
	0x01DE56A8 LDR V1, [X8 + 0x17C]
	0x01DE56AC FMUL S2, S10, S10
	0x01DE56B0 FADD S0, S2, S0
	0x01DE56B4 FSQRT S0, S0
	0x01DE56B8 FCMP S0, S1
	0x01DE56BC B.LE 0x1DE56D0

ISIL:
	001 Subtract X31, X31, 400
	002 Move [X31+240], D15
	003 Move [X31+248], D14
	004 Move [X31+256], D13
	005 Move [X31+264], D12
	006 Move [X31+272], D11
	007 Move [X31+280], D10
	008 Move [X31+288], D9
	009 Move [X31+296], D8
	010 Move [X31+304], X29
	011 Move [X31+312], X30
	012 Move [X31+320], X28
	013 Move [X31+328], X27
	014 Move [X31+336], X26
	015 Move [X31+344], X25
	016 Move [X31+352], X24
	017 Move [X31+360], X23
	018 Move [X31+368], X22
	019 Move [X31+376], X21
	020 Move [X31+384], X20
	021 Move [X31+392], X19
	022 Move X20, 0x25F5000
	023 Move W8, [X20+3219]
	024 Move X19, X0
	025 Add X21, X31, 160
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {62}
	030 Move X0, 0x2315000
	031 Move X0, [X0+3104]
	032 Call 0x1C17CF4
	033 Move X0, 0x2315000
	034 Move X0, [X0+3112]
	035 Call 0x1C17CF4
	036 Move X0, 0x2315000
	037 Move X0, [X0+3120]
	038 Call 0x1C17CF4
	039 Move X0, 0x2310000
	040 Move X0, [X0+1496]
	041 Call 0x1C17CF4
	042 Move X0, 0x2315000
	043 Move X0, [X0+3128]
	044 Call 0x1C17CF4
	045 Move X0, 0x2315000
	046 Move X0, [X0+3136]
	047 Call 0x1C17CF4
	048 Move X0, 0x2310000
	049 Move X0, [X0+1528]
	050 Call 0x1C17CF4
	051 Move X0, 0x2310000
	052 Move X0, [X0+1592]
	053 Call 0x1C17CF4
	054 Move X0, 0x2315000
	055 Move X0, [X0+3352]
	056 Call 0x1C17CF4
	057 Move X0, 0x2312000
	058 Move X0, [X0+2480]
	059 Call 0x1C17CF4
	060 Move W8, 1
	061 Move [X20+3219], W8
	062 NotImplemented "Instruction MOVI not yet implemented."
	063 Move [X31+224], X31
	064 Move [X31+232], X31
	065 Move [X31+208], X31
	066 Move [X31+216], X31
	067 Move [X21+28], V0
	068 Move [X21+1], V0
	069 Move [X31+10], V0
	070 Move [X31+140], V0
	071 Move [X31+112], V0
	072 Move [X31+120], V0
	073 Move [X31+92], V0
	074 Move [X31+64], V0
	075 Move [X31+72], V0
	076 Move W8, [X19+436]
	077 Add W8, W8, 1
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move [X19+436], W8
	080 Move [X19+436], W31
	081 Move X23, 0x25F5000
	082 Move W8, [X23+1923]
	083 Add X22, X19, 452
	084 Compare W8, 0
	085 JumpIfNotEqual {91}
	086 Move X0, 0x2310000
	087 Move X0, [X0+1440]
	088 Call 0x1C17CF4
	089 Move W8, 1
	090 Move [X23+1923], W8
	091 Move X20, 0x2310000
	092 Move X20, [X20+1440]
	093 Move X0, X19
	094 Move X1, X31
	095 Move X8, [X20]
	096 Move X9, [X8+184]
	097 Move V0, [X9]
	098 Move V1, [X9+8]
	099 Move [X19+440], D0
	100 Move [X19+448], S1
	101 Move X9, [X8+184]
	102 Move V0, [X9]
	103 Move V1, [X9+8]
	104 Move [X22], D0
	105 Move [X19+460], S1
	106 Move X9, [X8+184]
	107 Move V0, [X9]
	108 Move V1, [X9+8]
	109 Move [X19+464], D0
	110 Move [X19+472], S1
	111 Move X8, [X8+184]
	112 Move V0, [X8]
	113 Move V1, [X8+8]
	114 Move [X22+24], D0
	115 Move [X19+484], S1
	116 Call Component.get_transform, X0
	117 Compare X0, 0
	118 JumpIfEqual {549}
	119 Move X1, X31
	120 Call Transform.get_position, X0
	121 Move X0, X19
	122 Move V8, V0
	123 Move V9, V1
	124 Move V10, V2
	125 Call BansheeController.get_DISTANCE_TO_SEARCH, X0
	126 Move X8, 0x2315000
	127 Move X8, [X8+3136]
	128 Move V11, V0
	129 Move X0, [X8]
	130 Move W8, [X0+224]
	131 Compare W8, 0
	132 JumpIfNotEqual {134}
	133 Call 0x1C17DFC
	134 Add X1, X31, 232
	135 Move X0, X19
	136 Move V0, V8
	137 Move V1, V9
	138 Move V2, V10
	139 Move V3, V11
	140 Move X2, X31
	141 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	142 Move TEMP, X0
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfNotEqual {520}
	146 Move W8, [X23+1923]
	147 Compare W8, 0
	148 JumpIfNotEqual {154}
	149 Move X0, 0x230F000
	150 Move X0, [X0+1440]
	151 Call 0x1C17CF4
	152 Move W8, 1
	153 Move [X23+1923], W8
	154 Move X0, [X31+232]
	155 Compare X0, 0
	156 JumpIfEqual {549}
	157 Move X8, 0x2314000
	158 Move X8, [X8+3128]
	159 Move X1, [X8]
	160 Add X8, X31, 40
	161 Call List`1<Object>.GetEnumerator, X0
	162 NotImplemented "Instruction LDUR not yet implemented."
	163 Move X9, -19898368
	164 Move X29, 0x230F000
	165 Move X26, 0x230F000
	166 Move X8, [X31+56]
	167 Move X29, [X29+1496]
	168 Move X26, [X26+1528]
	169 Move [X21+3], V0
	170 Move V0, [X9+380]
	171 Move [X31+224], X8
	172 Move X21, 0x25F4000
	173 Move [X31+20], S0
	174 Move X8, 0x2314000
	175 Move X8, [X8+3112]
	176 Move X1, [X8]
	177 Add X0, X31, 208
	178 Call Enumerator<Object>.MoveNext, X0
	179 Move TEMP, X0
	180 And TEMP, TEMP, 1
	181 Compare TEMP, 1
	182 JumpIfNotEqual {515}
	183 Move X22, [X31+224]
	184 Compare X22, 0
	185 JumpIfEqual {547}
	186 Move X0, [X22+144]
	187 Compare X0, 0
	188 JumpIfEqual {548}
	189 Move X1, X31
	190 Call Transform.get_position, X0
	191 Move [X19+440], S0
	192 Move [X19+444], S1
	193 Move [X19+448], S2
	194 Move X0, [X22+144]
	195 Compare X0, 0
	196 JumpIfEqual {545}
	197 Move X1, X31
	198 Call Transform.get_forward, X0
	199 Move X0, X31
	200 Call Extensions.Flatten, X0
	201 Move X8, 0x25F4000
	202 Move W8, [X8+1925]
	203 Move V8, V0
	204 Move V9, V1
	205 Move V10, V2
	206 Compare W8, 0
	207 JumpIfNotEqual {214}
	208 Move X0, 0x230F000
	209 Move X0, [X0+1448]
	210 Call 0x1C17CF4
	211 Move X8, 0x25F4000
	212 Move W9, 1
	213 Move [X8+1925], W9
	214 Move X8, 0x230F000
	215 Move X8, [X8+1448]
	216 Move X0, [X8]
	217 Move W8, [X0+224]
	218 Compare W8, 0
	219 JumpIfNotEqual {221}
	220 Call 0x1C17DFC
	221 Multiply S0, S8, S8
	222 Multiply S1, S9, S9
	223 Add S0, S0, S1
	224 Multiply S1, S10, S10
	225 Add S0, S1, S0
	226 Move V1, [X31+20]
	227 NotImplemented "Instruction FSQRT not yet implemented."
	228 NotImplemented "Instruction FCMP not yet implemented."
	229 NotImplemented "Instruction FDIV not yet implemented."
	230 NotImplemented "Instruction FDIV not yet implemented."
	231 NotImplemented "Instruction FDIV not yet implemented."
	232 Move X8, 0x25F4000
	233 Move W8, [X8+1923]
	234 Compare W8, 0
	235 JumpIfNotEqual {241}
	236 Move X0, X20
	237 Call 0x1C17CF4
	238 Move X8, 0x25F4000
	239 Move W9, 1
	240 Move [X8+1923], W9
	241 Move X8, [X20]
	242 Move X8, [X8+184]
	243 Move S12, [X8]
	244 Move S11, [X8+4]
	245 Move V13, [X8+8]
	246 Move X0, [X22+144]
	247 Compare X0, 0
	248 JumpIfEqual {546}
	249 Move X1, X31
	250 Call Transform.get_position, X0
	251 Move X0, [X29]
	252 Move V8, V0
	253 Move V9, V1
	254 Move V10, V2
	255 Move W8, [X0+224]
	256 Compare W8, 0
	257 JumpIfNotEqual {260}
	258 Call 0x1C17DFC
	259 Move X0, [X29]
	260 Move X8, [X0+184]
	261 Move W0, [X8]
	262 Move X1, X31
	263 Call LayerMask.op_Implicit, X0
	264 Move W22, W0
	265 Move X0, [X26]
	266 Move W8, [X0+224]
	267 Compare W8, 0
	268 JumpIfNotEqual {270}
	269 Call 0x1C17DFC
	270 Move W8, 0x42C80000
	271 Add X0, X31, 160
	272 Move S6, W8
	273 Move V0, V8
	274 Move V1, V9
	275 Move V2, V10
	276 Move V3, V12
	277 Move V4, V11
	278 Move V5, V13
	279 Move W1, W22
	280 Move X2, X31
	281 Call Physics.Raycast, X0, X1, X2, V0, X3
	282 Move TEMP, X0
	283 And TEMP, TEMP, 1
	284 Compare TEMP, 1
	285 JumpIfNotEqual {174}
	286 Add X0, X31, 160
	287 Move X1, X31
	288 Call RaycastHit.get_point, X0
	289 Subtract S0, S0, S12
	290 Subtract S1, S1, S11
	291 Subtract S2, S2, S13
	292 Move [X31+28], S1
	293 Move [X31+36], S0
	294 Move [X19+452], S0
	295 Move [X19+456], S1
	296 Move [X31+24], S2
	297 Move [X19+460], S2
	298 Move X8, 0x2311000
	299 Move X8, [X8+2480]
	300 Move X0, [X8]
	301 Move W1, 2
	302 Call 0x1C17D6C
	303 Move X8, 0x25F4000
	304 Move W8, [X8+1926]
	305 Move X22, X0
	306 Compare W8, 0
	307 JumpIfNotEqual {313}
	308 Move X0, X20
	309 Call 0x1C17CF4
	310 Move W8, 1
	311 Move X9, 0x25F4000
	312 Move [X9+1926], W8
	313 Compare X22, 0
	314 JumpIfEqual {552}
	315 Move W8, [X22+24]
	316 Compare W8, 0
	317 JumpIfEqual {550}
	318 Move X9, [X20]
	319 NotImplemented "Instruction CMP not yet implemented."
	320 Move X9, [X9+184]
	321 Move S1, [X9+28]
	322 Move S0, [X9+32]
	323 Move V2, [X9+24]
	324 Multiply S3, S11, S0
	325 Multiply S4, S13, S1
	326 Subtract S3, S3, S4
	327 Multiply S4, S13, S2
	328 Multiply S0, S12, S0
	329 Multiply S1, S12, S1
	330 Multiply S2, S11, S2
	331 Subtract S0, S4, S0
	332 Subtract S1, S1, S2
	333 Move [X22+32], S3
	334 Move [X22+40], S0
	335 Move [X22+40], S1
	336 Move X8, [X20]
	337 Move X8, [X8+184]
	338 Move S0, [X8+24]
	339 Move S1, [X8+28]
	340 Move V2, [X8+32]
	341 Move X8, 0x230F000
	342 Multiply S3, S11, S0
	343 Multiply S4, S12, S1
	344 Multiply S5, S12, S2
	345 Multiply S0, S13, S0
	346 Multiply S1, S13, S1
	347 Multiply S2, S11, S2
	348 Subtract S3, S3, S4
	349 Subtract S0, S5, S0
	350 Subtract S1, S1, S2
	351 Move [X22+44], S1
	352 Move [X22+52], S0
	353 Move [X22+52], S3
	354 Move X8, [X8+1592]
	355 Move X0, [X8]
	356 Move W1, 3
	357 Call 0x1C17D6C
	358 Move X8, 0x2314000
	359 Move X8, [X8+3352]
	360 Move X23, X0
	361 Move X1, [X8]
	362 Move X2, X31
	363 Call RuntimeHelpers.InitializeArray, X0, X1
	364 Move X8, [X22+24]
	365 NotImplemented "Instruction CMP not yet implemented."
	366 Move X25, X31
	367 And X8, X8, 0
	368 Add X28, X23, 32
	369 NotImplemented "Instruction CMP not yet implemented."
	370 Compare X23, 0
	371 JumpIfEqual {544}
	372 Move X8, [X23+24]
	373 NotImplemented "Instruction CMP not yet implemented."
	374 Move W9, 12
	375 NotImplemented "Instruction MADD not yet implemented."
	376 Move S0, [X9+32]
	377 Move S12, [X9+36]
	378 Move V13, [X9+40]
	379 Move X27, X31
	380 And X8, X8, 0
	381 Move [X31+36], S0
	382 NotImplemented "Instruction CMP not yet implemented."
	383 Move X0, [X29]
	384 Move V8, [X28]
	385 Move W8, [X0+224]
	386 Compare W8, 0
	387 JumpIfNotEqual {390}
	388 Call 0x1C17DFC
	389 Move X0, [X29]
	390 Move X8, [X0+184]
	391 Move W0, [X8]
	392 Move X1, X31
	393 Call LayerMask.op_Implicit, X0
	394 Move W24, W0
	395 Move X0, [X26]
	396 Move W8, [X0+224]
	397 Compare W8, 0
	398 JumpIfNotEqual {400}
	399 Call 0x1C17DFC
	400 Move S1, [X31+28]
	401 Move S0, [X31+32]
	402 Move V2, [X31+24]
	403 Move V3, [X31+36]
	404 Add X0, X31, 112
	405 Move V4, V12
	406 Move V5, V13
	407 Move V6, V8
	408 Move W1, W24
	409 Move X2, X31
	410 Call Physics.Raycast, X0, X1, X2, V0, X3
	411 Move TEMP, X0
	412 And TEMP, TEMP, 1
	413 Compare TEMP, 1
	414 JumpIfEqual {504}
	415 Move S3, [X31+32]
	416 Move S0, [X31+36]
	417 Multiply S1, S12, S8
	418 Multiply S2, S13, S8
	419 Multiply S0, S0, S8
	420 Add S14, S3, S0
	421 Move V0, [X31+28]
	422 Move [X19+464], S14
	423 Add S15, S0, S1
	424 Move V0, [X31+24]
	425 Move [X19+468], S15
	426 Add S8, S0, S2
	427 Move [X19+472], S8
	428 Move W8, [X21+2749]
	429 Compare W8, 0
	430 JumpIfNotEqual {435}
	431 Move X0, X20
	432 Call 0x1C17CF4
	433 Move W8, 1
	434 Move [X21+2749], W8
	435 Move X8, [X20]
	436 Move X0, [X29]
	437 Move X8, [X8+184]
	438 Move W9, [X0+224]
	439 Move S9, [X8+36]
	440 Move S10, [X8+40]
	441 Move V11, [X8+44]
	442 Compare W9, 0
	443 JumpIfNotEqual {446}
	444 Call 0x1C17DFC
	445 Move X0, [X29]
	446 Move X8, [X0+184]
	447 Move W0, [X8]
	448 Move X1, X31
	449 Call LayerMask.op_Implicit, X0
	450 Move W24, W0
	451 Move X0, [X26]
	452 Move W8, [X0+224]
	453 Compare W8, 0
	454 JumpIfNotEqual {456}
	455 Call 0x1C17DFC
	456 Add X0, X31, 64
	457 Move S6, 10
	458 Move V0, V14
	459 Move V1, V15
	460 Move V2, V8
	461 Move V3, V9
	462 Move V4, V10
	463 Move V5, V11
	464 Move W1, W24
	465 Move X2, X31
	466 Call Physics.Raycast, X0, X1, X2, V0, X3
	467 Move TEMP, X0
	468 And TEMP, TEMP, 1
	469 Compare TEMP, 1
	470 JumpIfNotEqual {504}
	471 Add X0, X31, 64
	472 Move X1, X31
	473 Call RaycastHit.get_point, X0
	474 Move [X19+476], S0
	475 Move [X19+480], S1
	476 Move [X19+484], S2
	477 Move X8, 0x25F4000
	478 Move W8, [X8+1926]
	479 Move X24, [X31+232]
	480 Move V8, V0
	481 Move V9, V1
	482 Move V10, V2
	483 Compare W8, 0
	484 JumpIfNotEqual {490}
	485 Move X0, X20
	486 Call 0x1C17CF4
	487 Move W8, 1
	488 Move X9, 0x25F4000
	489 Move [X9+1926], W8
	490 Move X8, [X20]
	491 Move X8, [X8+184]
	492 Move S0, [X8+24]
	493 Move S1, [X8+28]
	494 Move V2, [X8+32]
	495 Add S0, S8, S0
	496 Add S1, S9, S1
	497 Add S2, S10, S2
	498 Move X1, X24
	499 Call BansheeController.IsNotVisibleByAnyPlayer, X0, X1, X2
	500 Move TEMP, X0
	501 And TEMP, TEMP, 1
	502 Compare TEMP, 1
	503 JumpIfEqual {510}
	504 Move W8, [X23+24]
	505 Add X27, X27, 1
	506 NotImplemented "Instruction CMP not yet implemented."
	507 Move W8, [X22+24]
	508 Add X25, X25, 1
	509 NotImplemented "Instruction CMP not yet implemented."
	510 Move X0, X19
	511 Move V0, V8
	512 Move V1, V9
	513 Move V2, V10
	514 Call BansheeController.SetAppeared, X0, X1
	515 Move X8, 0x2314000
	516 Move X8, [X8+3104]
	517 Add X0, X31, 208
	518 Move X1, [X8]
	519 Call Enumerator<Object>.Dispose, X0
	520 Move X20, [X31+384]
	521 Move X19, [X31+392]
	522 Move X22, [X31+368]
	523 Move X21, [X31+376]
	524 Move X24, [X31+352]
	525 Move X23, [X31+360]
	526 Move X26, [X31+336]
	527 Move X25, [X31+344]
	528 Move X28, [X31+320]
	529 Move X27, [X31+328]
	530 Move X29, [X31+304]
	531 Move X30, [X31+312]
	532 Move D9, [X31+288]
	533 Move D8, [X31+296]
	534 Move D11, [X31+272]
	535 Move D10, [X31+280]
	536 Move D13, [X31+256]
	537 Move D12, [X31+264]
	538 Move D15, [X31+240]
	539 Move D14, [X31+248]
	540 Add X31, X31, 400
	541 Return 
	542 Call 0x1C17F28
	543 Call 0x1C17F28
	544 Call 0x1C17F20
	545 Call 0x1C17F20
	546 Call 0x1C17F20
	547 Call 0x1C17F20
	548 Call 0x1C17F20
	549 Call 0x1C17F20
	550 Call 0x1C17F28
	551 Call 0x1C17F28
	552 Call 0x1C17F20
	553 Move X19, X0
	554 NotImplemented "Instruction CMP not yet implemented."
	555 Move X0, X19
	556 Call 0x3EB2AD0
	557 Move X20, [X0]
	558 Call 0x3EB2AE0
	559 Move X8, 0x2314000
	560 Move X8, [X8+3104]
	561 Add X0, X31, 208
	562 Move X1, [X8]
	563 Call Enumerator<Object>.Dispose, X0
	564 Compare X20, 0
	565 JumpIfEqual {520}
	566 Move X0, X20
	567 Call 0x1C17F18
	568 Move X20, X31
	569 Move X19, X0
	570 Move X8, 0x2314000
	571 Move X8, [X8+3104]
	572 Move X1, [X8]
	573 Add X0, X31, 208
	574 Call Enumerator<Object>.Dispose, X0
	575 Compare X20, 0
	576 JumpIfNotEqual {579}
	577 Move X0, X19
	578 Call 0x1D2D690
	579 Move X0, X20
	580 Call 0x1C17F18
	581 Call 0x1991590

Method: System.Boolean IsNotVisibleByAnyPlayer(System.Collections.Generic.List`1<AnimalCompany.NetPlayer> players, UnityEngine.Vector3 targetPosition)

Disassembly:
	0x01DE5A08 STP X30, X19, [X31 - 0x10]!
	0x01DE5A0C ADRP X0, 0x230E000
	0x01DE5A10 LDR X0, [X0 + 0xB40]
	0x01DE5A14 BL 0x1C16D08
	0x01DE5A18 BL 0x1C16F10
	0x01DE5A1C MOV X1, X31
	0x01DE5A20 MOV X19, X0
	0x01DE5A24 BL 0x3380310
	0x01DE5A28 ADRP X0, 0x2313000
	0x01DE5A2C LDR X0, [X0 + 0xD48]
	0x01DE5A30 BL 0x1C16D08
	0x01DE5A34 MOV X1, X0
	0x01DE5A38 MOV X0, X19
	0x01DE5A3C BL 0x1C16DEC
	0x01DE5A40 LDR X0, [X0 + 0x18]
	0x01DE5A44 RET
	0x01DE5A48 STP X30, X19, [X31 - 0x10]!
	0x01DE5A4C AND W1, W1, 0x1
	0x01DE5A50 MOV X2, X31
	0x01DE5A54 MOV X19, X0
	0x01DE5A58 BL 0x1DFA2F0
	0x01DE5A5C LDR X1, [X19 + 0xD0]
	0x01DE5A60 CBZ X1, 0x1DE5A74
	0x01DE5A64 MOV X0, X19
	0x01DE5A68 MOV X2, X31
	0x01DE5A6C BL 0x3C36834
	0x01DE5A70 STR X31, [X19 + 0xD0]
	0x01DE5A74 LDP X30, X19, [X31], #0x10
	0x01DE5A78 RET
	0x01DE5A7C STP X30, X21, [X31 - 0x20]!
	0x01DE5A80 STP X20, X19, [X31 + 0x10]
	0x01DE5A84 ADRP X20, 0x25F3000
	0x01DE5A88 ADRP X21, 0x2313000
	0x01DE5A8C LDRB W8, [X20 + 0xC9B]
	0x01DE5A90 LDR X21, [X21 + 0xD50]
	0x01DE5A94 MOV X19, X0
	0x01DE5A98 TBNZ X8, 0x0, 0x1DE5AB0
	0x01DE5A9C ADRP X0, 0x2313000
	0x01DE5AA0 LDR X0, [X0 + 0xD50]
	0x01DE5AA4 BL 0x1C16CF4
	0x01DE5AA8 MOVZ W8, 0x1
	0x01DE5AAC STRB W8, [X20 + 0xC9B]
	0x01DE5AB0 LDR X0, [X21]
	0x01DE5AB4 BL 0x1C16F10
	0x01DE5AB8 MOV X1, X31
	0x01DE5ABC MOV X20, X0
	0x01DE5AC0 BL 0x33BDD8C
	0x01DE5AC4 STR W31, [X20 + 0x10]
	0x01DE5AC8 STR X19, [X20 + 0x20]
	0x01DE5ACC MOV X0, X20
	0x01DE5AD0 LDP X20, X19, [X31 + 0x10]
	0x01DE5AD4 LDP X30, X21, [X31], #0x20
	0x01DE5AD8 RET
	0x01DE5ADC STR X30, [X31 - 0x20]!
	0x01DE5AE0 STP X20, X19, [X31 + 0x10]
	0x01DE5AE4 MOV W19, W1
	0x01DE5AE8 MOV X1, X31
	0x01DE5AEC MOV X20, X0
	0x01DE5AF0 BL 0x33BDD8C
	0x01DE5AF4 STR W19, [X20 + 0x10]
	0x01DE5AF8 LDP X20, X19, [X31 + 0x10]
	0x01DE5AFC LDR X30, [X31], #0x20
	0x01DE5B00 RET
	0x01DE5B04 STR X30, [X31 - 0x20]!
	0x01DE5B08 STP X20, X19, [X31 + 0x10]
	0x01DE5B0C ADRP X20, 0x25F3000
	0x01DE5B10 LDRB W8, [X20 + 0xC9C]
	0x01DE5B14 MOV X19, X0
	0x01DE5B18 TBNZ X8, 0x0, 0x1DE5B30
	0x01DE5B1C ADRP X0, 0x230E000
	0x01DE5B20 LDR X0, [X0 + 0x598]
	0x01DE5B24 BL 0x1C16CF4
	0x01DE5B28 MOVZ W8, 0x1
	0x01DE5B2C STRB W8, [X20 + 0xC9C]
	0x01DE5B30 LDRB W8, [X19 + 0xA8]
	0x01DE5B34 CBZ W8, 0x1DE5BB0
	0x01DE5B38 LDRB W8, [X19 + 0x54]
	0x01DE5B3C CBZ W8, 0x1DE5B9C
	0x01DE5B40 LDRB W8, [X19 + 0xD8]
	0x01DE5B44 CBZ W8, 0x1DE5B9C
	0x01DE5B48 ADRP X8, 0x230E000
	0x01DE5B4C LDR X8, [X8 + 0x598]
	0x01DE5B50 LDR X20, [X19 + 0xC8]
	0x01DE5B54 LDR X0, [X8]
	0x01DE5B58 LDR W8, [X0 + 0xE0]
	0x01DE5B5C CBNZ W8, 0x1DE5B64
	0x01DE5B60 BL 0x1C16DFC
	0x01DE5B64 MOV X0, X20
	0x01DE5B68 MOV X1, X31
	0x01DE5B6C MOV X2, X31
	0x01DE5B70 BL 0x3C354F8
	0x01DE5B74 TBZ X0, 0x0, 0x1DE5B9C
	0x01DE5B78 LDR X0, [X19 + 0xC8]
	0x01DE5B7C CBZ X0, 0x1DE5BBC
	0x01DE5B80 LDR X20, [X19 + 0x40]
	0x01DE5B84 MOV X1, X31
	0x01DE5B88 BL 0x3C3F58C
	0x01DE5B8C CBZ X20, 0x1DE5BBC
	0x01DE5B90 MOV X0, X20
	0x01DE5B94 MOV X1, X31
	0x01DE5B98 BL 0x3C3F62C
	0x01DE5B9C MOV X0, X19
	0x01DE5BA0 LDP X20, X19, [X31 + 0x10]
	0x01DE5BA4 MOV X1, X31
	0x01DE5BA8 LDR X30, [X31], #0x20
	0x01DE5BAC B 0x1DE76B0
	0x01DE5BB0 LDP X20, X19, [X31 + 0x10]
	0x01DE5BB4 LDR X30, [X31], #0x20
	0x01DE5BB8 RET
	0x01DE5BBC BL 0x1C16F20
	0x01DE5BC0 STR X30, [X31 - 0x30]!
	0x01DE5BC4 STP X22, X21, [X31 + 0x10]
	0x01DE5BC8 STP X20, X19, [X31 + 0x20]
	0x01DE5BCC ADRP X21, 0x25F3000
	0x01DE5BD0 ADRP X22, 0x2313000
	0x01DE5BD4 ADRP X20, 0x2311000
	0x01DE5BD8 LDRB W8, [X21 + 0xC9D]
	0x01DE5BDC LDR X22, [X22 + 0xD58]
	0x01DE5BE0 LDR X20, [X20 + 0x418]
	0x01DE5BE4 MOV X19, X0
	0x01DE5BE8 TBNZ X8, 0x0, 0x1DE5C0C
	0x01DE5BEC ADRP X0, 0x2311000
	0x01DE5BF0 LDR X0, [X0 + 0x418]
	0x01DE5BF4 BL 0x1C16CF4
	0x01DE5BF8 ADRP X0, 0x2313000
	0x01DE5BFC LDR X0, [X0 + 0xD58]
	0x01DE5C00 BL 0x1C16CF4
	0x01DE5C04 MOVZ W8, 0x1
	0x01DE5C08 STRB W8, [X21 + 0xC9D]
	0x01DE5C0C LDR X1, [X22]
	0x01DE5C10 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], D13
	003 Move [X31+72], D12
	004 Move [X31+80], D11
	005 Move [X31+88], D10
	006 Move [X31+96], D9
	007 Move [X31+104], D8
	008 Move [X31+112], X30
	009 Move [X31+128], X22
	010 Move [X31+136], X21
	011 Move [X31+144], X20
	012 Move [X31+152], X19
	013 Move X20, 0x25F4000
	014 Move W8, [X20+3220]
	015 Move V8, V2
	016 Move V9, V1
	017 Move V10, V0
	018 Move X19, X1
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {40}
	023 Move X0, 0x2314000
	024 Move X0, [X0+3104]
	025 Call 0x1C17CF4
	026 Move X0, 0x2314000
	027 Move X0, [X0+3112]
	028 Call 0x1C17CF4
	029 Move X0, 0x2314000
	030 Move X0, [X0+3120]
	031 Call 0x1C17CF4
	032 Move X0, 0x2314000
	033 Move X0, [X0+3128]
	034 Call 0x1C17CF4
	035 Move X0, 0x2314000
	036 Move X0, [X0+3136]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X20+3220], W8
	040 Move [X31+32], X31
	041 Move [X31+40], X31
	042 Move [X31+48], X31
	043 Compare X19, 0
	044 JumpIfEqual {118}
	045 Move X8, 0x2314000
	046 Move X8, [X8+3128]
	047 Move X21, 0x2314000
	048 Move X22, 0x2314000
	049 Move X20, 0x2314000
	050 Move X1, [X8]
	051 Move X21, [X21+3112]
	052 Move X22, [X22+3136]
	053 Move X20, [X20+3104]
	054 Add X8, X31, 8
	055 Move X0, X19
	056 Call List`1<Object>.GetEnumerator, X0
	057 NotImplemented "Instruction LDUR not yet implemented."
	058 Move X8, [X31+24]
	059 Move [X31+2], V0
	060 Move [X31+48], X8
	061 Move X1, [X21]
	062 Add X0, X31, 32
	063 Call Enumerator<Object>.MoveNext, X0
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {97}
	068 Move X8, [X31+48]
	069 Compare X8, 0
	070 JumpIfEqual {116}
	071 Move X0, [X8+144]
	072 Compare X0, 0
	073 JumpIfEqual {117}
	074 Move X1, X31
	075 Call Transform.get_position, X0
	076 Move X0, [X22]
	077 Move V11, V0
	078 Move V12, V1
	079 Move V13, V2
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {84}
	083 Call 0x1C17DFC
	084 Move V0, V11
	085 Move V1, V12
	086 Move V2, V13
	087 Move V3, V10
	088 Move V4, V9
	089 Move V5, V8
	090 Move X0, X31
	091 Call MobDetectionUtil.IsTargetInLineOfSight, X0, X1
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {61}
	096 Move W19, 4
	097 Move W19, 5
	098 Move X1, [X20]
	099 Add X0, X31, 32
	100 Call Enumerator<Object>.Dispose, X0
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X20, [X31+144]
	103 Move X19, [X31+152]
	104 Move X22, [X31+128]
	105 Move X21, [X31+136]
	106 Move X30, [X31+112]
	107 Move D9, [X31+96]
	108 Move D8, [X31+104]
	109 Move D11, [X31+80]
	110 Move D10, [X31+88]
	111 Move D13, [X31+64]
	112 Move D12, [X31+72]
	113 NotImplemented "Instruction CSET not yet implemented."
	114 Add X31, X31, 160
	115 Return X0
	116 Call 0x1C17F20
	117 Call 0x1C17F20
	118 Call 0x1C17F20
	119 Move X19, X0
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X0, X19
	122 Call 0x3EB2AD0
	123 Move X20, [X0]
	124 Call 0x3EB2AE0
	125 Move X8, 0x2314000
	126 Move X8, [X8+3104]
	127 Add X0, X31, 32
	128 Move X1, [X8]
	129 Call Enumerator<Object>.Dispose, X0
	130 Compare X20, 0
	131 JumpIfNotEqual {134}
	132 Move W19, W31
	133 Move X20, X31
	134 Move X0, X20
	135 Call 0x1C17F18
	136 Move X19, X0
	137 Move X8, 0x2314000
	138 Move X8, [X8+3104]
	139 Move X1, [X8]
	140 Add X0, X31, 32
	141 Call Enumerator<Object>.Dispose, X0
	142 Compare X20, 0
	143 JumpIfNotEqual {146}
	144 Move X0, X19
	145 Call 0x1D2D690
	146 Move X0, X20
	147 Call 0x1C17F18
	148 Call 0x1991590

Method: System.Void SetAppeared(UnityEngine.Vector3 targetPosition)

Disassembly:
	0x01DE5C14 BL 0x21A453C
	0x01DE5C18 STR X0, [X19 + 0x30]
	0x01DE5C1C LDR X1, [X20]
	0x01DE5C20 MOV X0, X19
	0x01DE5C24 BL 0x21A453C
	0x01DE5C28 STR X0, [X19 + 0xC0]
	0x01DE5C2C LDP X20, X19, [X31 + 0x20]
	0x01DE5C30 LDP X22, X21, [X31 + 0x10]
	0x01DE5C34 LDR X30, [X31], #0x30
	0x01DE5C38 RET
	0x01DE5C3C STP X30, X21, [X31 - 0x20]!
	0x01DE5C40 STP X20, X19, [X31 + 0x10]
	0x01DE5C44 ADRP X20, 0x25F3000
	0x01DE5C48 ADRP X21, 0x2313000
	0x01DE5C4C LDRB W8, [X20 + 0xC9E]
	0x01DE5C50 LDR X21, [X21 + 0xC88]
	0x01DE5C54 MOV X19, X0
	0x01DE5C58 TBNZ X8, 0x0, 0x1DE5C70
	0x01DE5C5C ADRP X0, 0x2313000
	0x01DE5C60 LDR X0, [X0 + 0xC88]
	0x01DE5C64 BL 0x1C16CF4
	0x01DE5C68 MOVZ W8, 0x1
	0x01DE5C6C STRB W8, [X20 + 0xC9E]
	0x01DE5C70 LDR X0, [X21]
	0x01DE5C74 LDR W8, [X0 + 0xE0]
	0x01DE5C78 CBNZ W8, 0x1DE5C80
	0x01DE5C7C BL 0x1C16DFC

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move W1, 2
	007 Move V8, V2
	008 Move V9, V1
	009 Move V10, V0
	010 Move X19, X0
	011 Call BansheeController.set_phase, X0, X1
	012 Move X0, X19
	013 Move X1, X31
	014 Call Component.get_transform, X0
	015 Compare X0, 0
	016 JumpIfEqual {32}
	017 Move V0, V10
	018 Move V1, V9
	019 Move V2, V8
	020 Move X1, X31
	021 Call Transform.set_position, X0, X1
	022 Move S0, W31
	023 Move X0, X19
	024 Call BansheeController.set_timerToAttack, X0, V0
	025 Move [X19+432], W31
	026 Move X30, [X31+32]
	027 Move X19, [X31+40]
	028 Move D9, [X31+16]
	029 Move D8, [X31+24]
	030 Move V10, [X31+48]
	031 Return 
	032 Call 0x1C17F20

Method: System.Void UpdateAppeared()

Disassembly:
	0x01DE56C0 FDIV S8, S8, S0
	0x01DE56C4 FDIV S9, S9, S0
	0x01DE56C8 FDIV S10, S10, S0
	0x01DE56CC B 0x1DE5708
	0x01DE56D0 ADRP X20, 0x25F3000
	0x01DE56D4 LDRB W8, [X20 + 0x783]
	0x01DE56D8 CBNZ W8, 0x1DE56F0
	0x01DE56DC ADRP X0, 0x230E000
	0x01DE56E0 LDR X0, [X0 + 0x5A0]
	0x01DE56E4 BL 0x1C16CF4
	0x01DE56E8 MOVZ W8, 0x1
	0x01DE56EC STRB W8, [X20 + 0x783]
	0x01DE56F0 ADRP X8, 0x230E000
	0x01DE56F4 LDR X8, [X8 + 0x5A0]
	0x01DE56F8 LDR X8, [X8]
	0x01DE56FC LDR X8, [X8 + 0xB8]
	0x01DE5700 LDP S8, S9, [X8]
	0x01DE5704 LDR V10, [X8 + 0x8]
	0x01DE5708 LDR X8, [X19 + 0xC0]
	0x01DE570C CBZ X8, 0x1DE59F8
	0x01DE5710 LDR X20, [X19 + 0x160]
	0x01DE5714 CBZ X20, 0x1DE59F8
	0x01DE5718 LDR X0, [X20 + 0x90]
	0x01DE571C CBZ X0, 0x1DE59F8
	0x01DE5720 LDR V11, [X8 + 0x50]
	0x01DE5724 LDR W21, [X8 + 0x24]
	0x01DE5728 MOV X1, X31
	0x01DE572C BL 0x3C3F58C
	0x01DE5730 LDR X8, [X19 + 0xC0]
	0x01DE5734 CBZ X8, 0x1DE59F8
	0x01DE5738 LDR X2, [X8 + 0xB8]
	0x01DE573C LDR X9, [X19 + 0x40]
	0x01DE5740 LDR X4, [X8 + 0x18]
	0x01DE5744 FMUL S3, S8, S11
	0x01DE5748 FMUL S4, S9, S11
	0x01DE574C FMUL S5, S10, S11
	0x01DE5750 CBZ X9, 0x1DE5764
	0x01DE5754 LDR X8, [X9 + 0x20]
	0x01DE5758 CBZ X8, 0x1DE5764
	0x01DE575C LDR W5, [X8]
	0x01DE5760 B 0x1DE5768
	0x01DE5764 MOV X5, X31
	0x01DE5768 LDR W8, [X19 + 0x68]
	0x01DE576C MOV X0, X20
	0x01DE5770 MOV W1, W21
	0x01DE5774 MOV X3, X2
	0x01DE5778 BFM X5, X8, 0x20, 0x1F
	0x01DE577C MOV X6, X31
	0x01DE5780 BL 0x1DB7954
	0x01DE5784 MOV X0, X19
	0x01DE5788 STR X31, [X19 + 0x1F8]
	0x01DE578C BL 0x1DE4E18
	0x01DE5790 MOV W0, W31
	0x01DE5794 LDP X20, X19, [X31 + 0xA0]
	0x01DE5798 LDP X22, X21, [X31 + 0x90]
	0x01DE579C LDP X30, X23, [X31 + 0x80]
	0x01DE57A0 LDP D9, D8, [X31 + 0x70]
	0x01DE57A4 LDP D11, D10, [X31 + 0x60]
	0x01DE57A8 LDP D13, D12, [X31 + 0x50]
	0x01DE57AC LDP D15, D14, [X31 + 0x40]
	0x01DE57B0 ADD X31, X31, 0xB0
	0x01DE57B4 RET
	0x01DE57B8 ADRP X21, 0x25F3000
	0x01DE57BC LDRB W8, [X21 + 0x783]
	0x01DE57C0 CBNZ W8, 0x1DE57D8
	0x01DE57C4 ADRP X0, 0x230E000
	0x01DE57C8 LDR X0, [X0 + 0x5A0]
	0x01DE57CC BL 0x1C16CF4
	0x01DE57D0 MOVZ W8, 0x1
	0x01DE57D4 STRB W8, [X21 + 0x783]
	0x01DE57D8 ADRP X8, 0x230E000
	0x01DE57DC LDR X8, [X8 + 0x5A0]
	0x01DE57E0 LDR X8, [X8]
	0x01DE57E4 LDR X8, [X8 + 0xB8]
	0x01DE57E8 LDP S10, S9, [X8]
	0x01DE57EC LDR V8, [X8 + 0x8]
	0x01DE57F0 LDR X0, [X19 + 0x1F0]
	0x01DE57F4 CBZ X0, 0x1DE59F8
	0x01DE57F8 MOV X1, X31
	0x01DE57FC BL 0x3C3F58C
	0x01DE5800 LDR X8, [X19 + 0x160]
	0x01DE5804 CBZ X8, 0x1DE59F8
	0x01DE5808 LDR X0, [X8 + 0x90]
	0x01DE580C STR S14, [X31 + 0x30]
	0x01DE5810 CBZ X0, 0x1DE59F8
	0x01DE5814 MOV X1, X31
	0x01DE5818 STP S2, S1, [X31 + 0x1C]
	0x01DE581C STP S0, S13, [X31 + 0x24]
	0x01DE5820 STP S8, S9, [X31 + 0x10]
	0x01DE5824 STR S10, [X31 + 0x18]
	0x01DE5828 STR S12, [X31 + 0x2C]
	0x01DE582C BL 0x3C3FA04
	0x01DE5830 FNEG S0, S0
	0x01DE5834 FNEG S1, S1
	0x01DE5838 FNEG S2, S2
	0x01DE583C MOV X0, X31
	0x01DE5840 BL 0x3C2A8C4
	0x01DE5844 MOV X0, X19
	0x01DE5848 MOV X1, X31
	0x01DE584C MOV V14.16B, V0.16B
	0x01DE5850 MOV V15.16B, V1.16B
	0x01DE5854 MOV V8.16B, V2.16B
	0x01DE5858 MOV V9.16B, V3.16B
	0x01DE585C BL 0x3C32E90
	0x01DE5860 MOV X21, X0
	0x01DE5864 MOV X0, X19
	0x01DE5868 MOV X1, X31
	0x01DE586C BL 0x3C32E90
	0x01DE5870 CBZ X0, 0x1DE59F8
	0x01DE5874 MOV X1, X31
	0x01DE5878 BL 0x3C3DEB4
	0x01DE587C MOV X0, X19
	0x01DE5880 MOV X1, X31
	0x01DE5884 MOV V10.16B, V0.16B
	0x01DE5888 MOV V11.16B, V1.16B
	0x01DE588C MOV V12.16B, V2.16B
	0x01DE5890 MOV V13.16B, V3.16B
	0x01DE5894 BL 0x1DEA4B8
	0x01DE5898 FMOV S1, 5
	0x01DE589C FMUL S0, S0, S1
	0x01DE58A0 STR S0, [X31]
	0x01DE58A4 MOV V0.16B, V10.16B
	0x01DE58A8 MOV V1.16B, V11.16B
	0x01DE58AC MOV V2.16B, V12.16B
	0x01DE58B0 MOV V3.16B, V13.16B
	0x01DE58B4 MOV V4.16B, V14.16B
	0x01DE58B8 MOV V5.16B, V15.16B
	0x01DE58BC MOV V6.16B, V8.16B
	0x01DE58C0 MOV V7.16B, V9.16B
	0x01DE58C4 MOV X0, X31
	0x01DE58C8 BL 0x3C2A2F8
	0x01DE58CC CBZ X21, 0x1DE59F8
	0x01DE58D0 LDR V4, [X31 + 0x3C]
	0x01DE58D4 LDP S6, S5, [X31 + 0x20]
	0x01DE58D8 LDR V7, [X31 + 0x1C]
	0x01DE58DC MOV X0, X21
	0x01DE58E0 MOV X1, X31
	0x01DE58E4 FSUB S4, S4, S5
	0x01DE58E8 LDR V5, [X31 + 0x38]
	0x01DE58EC FMUL S4, S4, S4
	0x01DE58F0 FSUB S5, S5, S6
	0x01DE58F4 LDR V6, [X31 + 0x34]
	0x01DE58F8 FMUL S5, S5, S5
	0x01DE58FC FADD S4, S4, S5
	0x01DE5900 FSUB S6, S6, S7
	0x01DE5904 FMUL S5, S6, S6
	0x01DE5908 FADD S8, S5, S4
	0x01DE590C BL 0x3C3F7AC
	0x01DE5910 ADRP X8, 0xFFFFFFFFFED05000
	0x01DE5914 LDR V0, [X8 + 0x330]
	0x01DE5918 LDP S10, S9, [X31 + 0x28]
	0x01DE591C LDR V11, [X31 + 0x30]
	0x01DE5920 FCMP S8, S0
	0x01DE5924 B.PL 0x1DE595C
	0x01DE5928 LDR V8, [X20 + 0x28]
	0x01DE592C MOV X0, X31
	0x01DE5930 BL 0x3C3C714
	0x01DE5934 FSUB S0, S8, S0
	0x01DE5938 MOV X0, X19
	0x01DE593C MOV X1, X31
	0x01DE5940 STR S0, [X20 + 0x28]
	0x01DE5944 BL 0x3C32E90
	0x01DE5948 CBZ X0, 0x1DE59F8
	0x01DE594C MOV V0.16B, V9.16B
	0x01DE5950 MOV V1.16B, V10.16B
	0x01DE5954 MOV V2.16B, V11.16B
	0x01DE5958 B 0x1DE59E0
	0x01DE595C MOV X0, X19
	0x01DE5960 MOV X1, X31
	0x01DE5964 BL 0x3C32E90
	0x01DE5968 CBZ X0, 0x1DE59F8
	0x01DE596C MOV X1, X31
	0x01DE5970 MOV X21, X0
	0x01DE5974 BL 0x3C3F58C
	0x01DE5978 LDR X8, [X19 + 0xC0]
	0x01DE597C CBZ X8, 0x1DE59F8
	0x01DE5980 LDR X8, [X8 + 0x38]
	0x01DE5984 CBZ X8, 0x1DE59F8
	0x01DE5988 LDR W9, [X8 + 0x18]
	0x01DE598C CBZ W9, 0x1DE59FC
	0x01DE5990 MOV V8.16B, V0.16B
	0x01DE5994 MOV V9.16B, V1.16B
	0x01DE5998 LDR V0, [X8 + 0x20]
	0x01DE599C LDR V1, [X31 + 0x18]
	0x01DE59A0 MOV X0, X19
	0x01DE59A4 MOV X1, X31
	0x01DE59A8 MOV V10.16B, V2.16B
	0x01DE59AC FMUL S11, S1, S0
	0x01DE59B0 LDR V1, [X31 + 0x14]
	0x01DE59B4 FMUL S12, S1, S0
	0x01DE59B8 LDR V1, [X31 + 0x10]
	0x01DE59BC FMUL S13, S1, S0
	0x01DE59C0 BL 0x1DEA4B8
	0x01DE59C4 FMUL S1, S11, S0
	0x01DE59C8 FMUL S2, S12, S0
	0x01DE59CC FMUL S3, S13, S0
	0x01DE59D0 FADD S0, S8, S1
	0x01DE59D4 FADD S1, S9, S2
	0x01DE59D8 FADD S2, S10, S3
	0x01DE59DC MOV X0, X21
	0x01DE59E0 MOV X1, X31
	0x01DE59E4 BL 0x3C3F62C
	0x01DE59E8 MOVZ W0, 0x1
	0x01DE59EC STR X31, [X20 + 0x18]
	0x01DE59F0 STR W0, [X20 + 0x10]
	0x01DE59F4 B 0x1DE5794
	0x01DE59F8 BL 0x1C16F20
	0x01DE59FC BL 0x1C16F28
	0x01DE5A00 LDR X0, [X0 + 0x18]
	0x01DE5A04 RET

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], D11
	003 Move [X31+40], D10
	004 Move [X31+48], D9
	005 Move [X31+56], D8
	006 Move [X31+64], X30
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 Move X20, 0x25F4000
	011 Move W8, [X20+3221]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0x2314000
	018 Move X0, [X0+3360]
	019 Call 0x1C17CF4
	020 Move X0, 0x2314000
	021 Move X0, [X0+3368]
	022 Call 0x1C17CF4
	023 Move X0, 0x2314000
	024 Move X0, [X0+3376]
	025 Call 0x1C17CF4
	026 Move X0, 0x2314000
	027 Move X0, [X0+3384]
	028 Call 0x1C17CF4
	029 Move X0, 0x2314000
	030 Move X0, [X0+3136]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+3221], W8
	034 Move [X31+16], X31
	035 Move [X31+24], X31
	036 Move [X31+8], X31
	037 Move X0, [X19+208]
	038 Compare X0, 0
	039 JumpIfEqual {244}
	040 Move X21, 0x2314000
	041 Move X21, [X21+3136]
	042 Move X1, X31
	043 Call Transform.get_position, X0
	044 Move X0, [X21]
	045 Move V8, V0
	046 Move V9, V1
	047 Move V10, V2
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move V0, V8
	053 Move V1, V9
	054 Move V2, V10
	055 Move X0, X31
	056 Call MobDetectionUtil.IsVisibleByAnyLight, X0
	057 Move W20, W0
	058 And W1, W0, 1
	059 Move X0, X19
	060 Call BansheeController.set_isVisible, X0, X1
	061 Move X0, X19
	062 Call BansheeController.get_timerToAttack, X0
	063 Move X0, X19
	064 Move X1, X31
	065 Move V8, V0
	066 Call MobController.get_deltaTime, X0
	067 Move TEMP, X20
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {133}
	071 Add S0, S8, S0
	072 Move X0, X19
	073 Call BansheeController.set_timerToAttack, X0, V0
	074 Move X0, X19
	075 Call BansheeController.get_timerToAttack, X0
	076 Move S1, 5
	077 NotImplemented "Instruction FCMP not yet implemented."
	078 Move X0, X19
	079 Move X1, X31
	080 Call Component.get_transform, X0
	081 Compare X0, 0
	082 JumpIfEqual {244}
	083 Move X1, X31
	084 Call Transform.get_position, X0
	085 Move X0, X19
	086 Move V8, V0
	087 Move V9, V1
	088 Move V10, V2
	089 Call BansheeController.get_DISTANCE_TO_ATTACK_BY_FLASHLIGHTING, X0
	090 Move X0, [X21]
	091 Move V11, V0
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Add X1, X31, 24
	097 Move X0, X19
	098 Move V0, V8
	099 Move V1, V9
	100 Move V2, V10
	101 Move V3, V11
	102 Move X2, X31
	103 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	104 Move TEMP, X0
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfNotEqual {138}
	108 Move X8, 0x2314000
	109 Move X20, [X31+24]
	110 Move X8, [X8+3384]
	111 Move X0, [X8]
	112 Call 0x1C17F10
	113 Move X8, 0x2314000
	114 Move X8, [X8+3360]
	115 Move X1, X19
	116 Move X3, X31
	117 Move X21, X0
	118 Move X2, [X8]
	119 Call Func`2<Object, Single>..ctor, X0, X1, X2
	120 Move X8, 0x2314000
	121 Move X8, [X8+3376]
	122 Move X0, X20
	123 Move X1, X21
	124 Move X2, [X8]
	125 Call Enumerable.OrderBy, X0, X1
	126 Move X8, 0x2314000
	127 Move X8, [X8+3368]
	128 Move X1, [X8]
	129 Call Enumerable.FirstOrDefault, X0
	130 Move X1, X0
	131 Move X0, X19
	132 Call BansheeController.SetAttacking, X0, X1
	133 Subtract S0, S8, S0
	134 Move S1, W31
	135 NotImplemented "Instruction FMAXNM not yet implemented."
	136 Move X0, X19
	137 Call BansheeController.set_timerToAttack, X0, V0
	138 Move X0, X19
	139 Move X1, X31
	140 Call Component.get_transform, X0
	141 Compare X0, 0
	142 JumpIfEqual {244}
	143 Move X1, X31
	144 Call Transform.get_position, X0
	145 Move X8, [X19+192]
	146 Compare X8, 0
	147 JumpIfEqual {244}
	148 Move X0, [X21]
	149 Move V11, [X8+128]
	150 Move V8, V0
	151 Move V9, V1
	152 Move W9, [X0+224]
	153 Move V10, V2
	154 Compare W9, 0
	155 JumpIfNotEqual {157}
	156 Call 0x1C17DFC
	157 Add X1, X31, 16
	158 Move X0, X19
	159 Move V0, V8
	160 Move V1, V9
	161 Move V2, V10
	162 Move V3, V11
	163 Move X2, X31
	164 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	165 Move TEMP, X0
	166 And TEMP, TEMP, 1
	167 Compare TEMP, 1
	168 JumpIfNotEqual {177}
	169 Move V8, [X19+432]
	170 Move S0, 5
	171 NotImplemented "Instruction FCMP not yet implemented."
	172 Move X0, X19
	173 Move X1, X31
	174 Call MobController.get_deltaTime, X0
	175 Add S0, S8, S0
	176 Move [X19+432], S0
	177 Move W1, 1
	178 Move X0, X19
	179 Call BansheeController.set_phase, X0, X1
	180 Move X0, X19
	181 Move W1, W31
	182 Call BansheeController.set_isVisible, X0, X1
	183 Move X20, [X31+80]
	184 Move X19, [X31+88]
	185 Move X30, [X31+64]
	186 Move X21, [X31+72]
	187 Move D9, [X31+48]
	188 Move D8, [X31+56]
	189 Move D11, [X31+32]
	190 Move D10, [X31+40]
	191 Add X31, X31, 96
	192 Return 
	193 Move TEMP, X20
	194 And TEMP, TEMP, 1
	195 Compare TEMP, 1
	196 JumpIfEqual {183}
	197 Move X0, X19
	198 Move X1, X31
	199 Call Component.get_transform, X0
	200 Compare X0, 0
	201 JumpIfEqual {244}
	202 Move X1, X31
	203 Call Transform.get_position, X0
	204 Move X8, [X19+192]
	205 Compare X8, 0
	206 JumpIfEqual {244}
	207 Move X0, [X21]
	208 Move V11, [X8+76]
	209 Move V8, V0
	210 Move V9, V1
	211 Move W9, [X0+224]
	212 Move V10, V2
	213 Compare W9, 0
	214 JumpIfNotEqual {216}
	215 Call 0x1C17DFC
	216 Add X1, X31, 8
	217 Move X0, X19
	218 Move V0, V8
	219 Move V1, V9
	220 Move V2, V10
	221 Move V3, V11
	222 Move X2, X31
	223 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	224 Move TEMP, X0
	225 And TEMP, TEMP, 1
	226 Compare TEMP, 1
	227 JumpIfNotEqual {183}
	228 Move X8, [X19+192]
	229 Move [X19+432], W31
	230 Compare X8, 0
	231 JumpIfEqual {244}
	232 Move X20, [X8+160]
	233 Move X0, X19
	234 Move X1, X31
	235 Call Component.get_transform, X0
	236 Compare X0, 0
	237 JumpIfEqual {244}
	238 Move X1, X31
	239 Call Transform.get_position, X0
	240 Move S3, 1
	241 Move X0, X20
	242 Move X1, X31
	243 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	244 Call 0x1C17F20

Method: System.Void SetAttacking(AnimalCompany.NetPlayer targetPlayer)

Disassembly:
	0x01DE5C80 MOV X0, X19
	0x01DE5C84 LDP X20, X19, [X31 + 0x10]
	0x01DE5C88 MOV X1, X31
	0x01DE5C8C LDP X30, X21, [X31], #0x20
	0x01DE5C90 B 0x1DE7994
	0x01DE5C94 STR X30, [X31 - 0x20]!
	0x01DE5C98 STP X20, X19, [X31 + 0x10]
	0x01DE5C9C ADRP X19, 0x25F3000
	0x01DE5CA0 ADRP X20, 0x2313000
	0x01DE5CA4 LDRB W8, [X19 + 0xC9F]
	0x01DE5CA8 LDR X20, [X20 + 0xD60]
	0x01DE5CAC TBNZ X8, 0x0, 0x1DE5CC4
	0x01DE5CB0 ADRP X0, 0x2313000
	0x01DE5CB4 LDR X0, [X0 + 0xD60]
	0x01DE5CB8 BL 0x1C16CF4
	0x01DE5CBC MOVZ W8, 0x1
	0x01DE5CC0 STRB W8, [X19 + 0xC9F]
	0x01DE5CC4 LDR X8, [X20]
	0x01DE5CC8 ADRP X9, 0xFFFFFFFFFED08000
	0x01DE5CCC LDR V0, [X9 + 0xC20]
	0x01DE5CD0 LDP X20, X19, [X31 + 0x10]
	0x01DE5CD4 LDR X8, [X8 + 0xB8]
	0x01DE5CD8 STR D0, [X8]
	0x01DE5CDC LDR X30, [X31], #0x20
	0x01DE5CE0 RET
	0x01DE5CE4 RET
	0x01DE5CE8 STR D8, [X31 - 0x30]!
	0x01DE5CEC STR X30, [X31 + 0x8]
	0x01DE5CF0 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move W1, 3
	006 Move X19, X0
	007 Call BansheeController.set_phase, X0, X1
	008 Move X8, [X19]
	009 Move X0, X19
	010 Move X1, X20
	011 Move X9, [X8+952]
	012 Move X2, [X8+960]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move W1, 1
	015 Move X0, X19
	016 Call BansheeController.set_isVisible, X0, X1
	017 Move X1, [X19+504]
	018 Compare X1, 0
	019 JumpIfEqual {23}
	020 Move X0, X19
	021 Move X2, X31
	022 Call MonoBehaviour.StopCoroutine, X0, X1
	023 Move X0, X19
	024 Call BansheeController.AttackToTargetCoroutine, X0
	025 Move X1, X0
	026 Move [X19+504], X0
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Call MonoBehaviour.StartCoroutine, X0, X1
	033 Return 

Method: System.Void SetTargetPlayer(AnimalCompany.NetPlayer netPlayer)

Disassembly:
	0x01DE5D54 MOV X0, X31
	0x01DE5D58 LDP S0, S1, [X8]
	0x01DE5D5C BL 0x3C30968
	0x01DE5D60 CBZ X21, 0x1DE5DE0
	0x01DE5D64 LDR X21, [X21 + 0xB0]
	0x01DE5D68 CBZ X21, 0x1DE5DE0
	0x01DE5D6C LDR W8, [X21 + 0x18]
	0x01DE5D70 CMP W8, 0x1
	0x01DE5D74 B.LT 0x1DE5DB4
	0x01DE5D78 MOV V8.16B, V0.16B
	0x01DE5D7C MOV W22, W31
	0x01DE5D80 CMP W22, W8
	0x01DE5D84 B.CS 0x1DE5DDC
	0x01DE5D88 ADD X8, X21, W22, 0x3, SXTW
	0x01DE5D8C LDR X0, [X8 + 0x20]
	0x01DE5D90 CBZ X0, 0x1DE5DE0
	0x01DE5D94 MOV W1, W31
	0x01DE5D98 MOV V0.16B, V8.16B
	0x01DE5D9C MOV X2, X31
	0x01DE5DA0 BL 0x3C16F50
	0x01DE5DA4 LDR W8, [X21 + 0x18]
	0x01DE5DA8 ADD W22, W22, 0x1
	0x01DE5DAC CMP W22, W8
	0x01DE5DB0 B.LT 0x1DE5D80
	0x01DE5DB4 MOVZ W8, 0x1
	0x01DE5DB8 STR X31, [X19 + 0x18]
	0x01DE5DBC STR W8, [X19 + 0x10]
	0x01DE5DC0 CMP W20, 0x2
	0x01DE5DC4 LDP X20, X19, [X31 + 0x20]
	0x01DE5DC8 LDP X22, X21, [X31 + 0x10]
	0x01DE5DCC LDR X30, [X31 + 0x8]
	0x01DE5DD0 CSET W0, CC
	0x01DE5DD4 LDR V8, [X31], #0x30
	0x01DE5DD8 RET
	0x01DE5DDC BL 0x1C16F28
	0x01DE5DE0 BL 0x1C16F20
	0x01DE5DE4 LDR X0, [X0 + 0x18]
	0x01DE5DE8 RET
	0x01DE5DEC STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x25F4000
	007 Move X21, 0x230F000
	008 Move W8, [X22+3222]
	009 Move X21, [X21+1432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x230F000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3222], W8
	021 Move X0, X20
	022 Move X1, X19
	023 Move X2, X31
	024 Call MobController.SetTargetPlayer, X0, X1
	025 Move X0, [X21]
	026 Move X20, [X20+488]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X19
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move X8, X31
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {43}
	040 Compare X19, 0
	041 JumpIfEqual {52}
	042 Move X8, [X19+144]
	043 Compare X20, 0
	044 JumpIfEqual {52}
	045 Move [X20+200], X8
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Return 
	052 Call 0x1C17F20

Method: System.Collections.IEnumerator AttackToTargetCoroutine()

Disassembly:
	0x01DE5CF4 STP X20, X19, [X31 + 0x20]
	0x01DE5CF8 ADRP X20, 0x25F3000
	0x01DE5CFC LDRB W8, [X20 + 0xCA0]
	0x01DE5D00 MOV X19, X0
	0x01DE5D04 TBNZ X8, 0x0, 0x1DE5D1C
	0x01DE5D08 ADRP X0, 0x2313000
	0x01DE5D0C LDR X0, [X0 + 0xD60]
	0x01DE5D10 BL 0x1C16CF4
	0x01DE5D14 MOVZ W8, 0x1
	0x01DE5D18 STRB W8, [X20 + 0xCA0]
	0x01DE5D1C LDR W20, [X19 + 0x10]
	0x01DE5D20 CMP W20, 0x1
	0x01DE5D24 B.HI 0x1DE5DC0
	0x01DE5D28 ADRP X22, 0x2313000
	0x01DE5D2C LDR X22, [X22 + 0xD60]
	0x01DE5D30 MOVN W8, 0x0
	0x01DE5D34 STR W8, [X19 + 0x10]
	0x01DE5D38 LDR X21, [X19 + 0x20]
	0x01DE5D3C LDR X0, [X22]
	0x01DE5D40 LDR W8, [X0 + 0xE0]
	0x01DE5D44 CBNZ W8, 0x1DE5D50
	0x01DE5D48 BL 0x1C16DFC
	0x01DE5D4C LDR X0, [X22]
	0x01DE5D50 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25F4000
	006 Move X21, 0x2314000
	007 Move W8, [X20+3223]
	008 Move X21, [X21+3392]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2314000
	015 Move X0, [X0+3392]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3223], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move [X20+16], W31
	025 Move [X20+32], X19
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Void SetDie()

Disassembly:
	0x01DE5E18 MOV X1, X0
	0x01DE5E1C MOV X0, X19
	0x01DE5E20 BL 0x1C16DEC
	0x01DE5E24 LDR X0, [X0 + 0x18]
	0x01DE5E28 RET
	0x01DE5E2C STP X30, X19, [X31 - 0x10]!
	0x01DE5E30 LDR X8, [X0 + 0x50]
	0x01DE5E34 CBZ X8, 0x1DE5E44
	0x01DE5E38 LDR W0, [X8]
	0x01DE5E3C LDP X30, X19, [X31], #0x10
	0x01DE5E40 RET
	0x01DE5E44 ADRP X0, 0x230E000
	0x01DE5E48 LDR X0, [X0 + 0x5B0]
	0x01DE5E4C BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 4
	004 Move X19, X0
	005 Call BansheeController.set_phase, X0, X1
	006 Move X0, X19
	007 Move W1, W31
	008 Call BansheeController.set_isVisible, X0, X1
	009 Move X8, [X19]
	010 Move W1, 1
	011 Move X0, X19
	012 Move X3, [X8+792]
	013 Move X2, [X8+800]
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 CallNoReturn X3

Method: System.Void Hit(System.Int32 damage, UnityEngine.Vector3 position, AnimalCompany.RandomSFX hitSound, AnimalCompany.RandomSFX killSound, UnityEngine.Vector3 force, System.String hitName, Fusion.NetworkBehaviourId source)

Disassembly:
	0x01DE5E50 BL 0x1C16F10

ISIL:
	001 Return 

Method: System.Void Stun(UnityEngine.Vector3 position, System.Single stunRange, System.Single duration = 3, System.String hitName = , Fusion.NetworkBehaviourId source = null, AnimalCompany.IStunnable/AttenuationType attenType = 0)

Disassembly:
	0x01DE5E54 MOV X19, X0

ISIL:
	001 Return 

Method: System.Void StateAuthorityChanged()

Disassembly:
	0x01DE5E58 ADRP X0, 0x2313000
	0x01DE5E5C LDR X0, [X0 + 0xD70]
	0x01DE5E60 BL 0x1C16D08
	0x01DE5E64 MOV X1, X0
	0x01DE5E68 MOV X0, X19
	0x01DE5E6C MOV X2, X31
	0x01DE5E70 BL 0x337DF1C
	0x01DE5E74 ADRP X0, 0x2313000
	0x01DE5E78 LDR X0, [X0 + 0xD78]
	0x01DE5E7C BL 0x1C16D08
	0x01DE5E80 MOV X1, X0
	0x01DE5E84 MOV X0, X19
	0x01DE5E88 BL 0x1C16DEC
	0x01DE5E8C STP X30, X19, [X31 - 0x10]!
	0x01DE5E90 LDR X8, [X0 + 0x50]
	0x01DE5E94 CBZ X8, 0x1DE5EA4
	0x01DE5E98 STR W1, [X8]
	0x01DE5E9C LDP X30, X19, [X31], #0x10
	0x01DE5EA0 RET
	0x01DE5EA4 ADRP X0, 0x230E000
	0x01DE5EA8 LDR X0, [X0 + 0x5B0]
	0x01DE5EAC BL 0x1C16D08
	0x01DE5EB0 BL 0x1C16F10
	0x01DE5EB4 MOV X19, X0
	0x01DE5EB8 ADRP X0, 0x2313000
	0x01DE5EBC LDR X0, [X0 + 0xD70]
	0x01DE5EC0 BL 0x1C16D08
	0x01DE5EC4 MOV X1, X0
	0x01DE5EC8 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+64]
	005 Compare X0, 0
	006 JumpIfEqual {37}
	007 Move W8, [X0+96]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 2
	010 Compare TEMP, 2
	011 JumpIfEqual {37}
	012 Move X1, X31
	013 Call NetworkObject.get_HasStateAuthority, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {37}
	018 Move X0, X19
	019 Call BansheeController.get_phase, X0
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X1, [X19+504]
	022 Compare X1, 0
	023 JumpIfEqual {28}
	024 Move X0, X19
	025 Move X2, X31
	026 Call MonoBehaviour.StopCoroutine, X0, X1
	027 Move [X19+504], X31
	028 Move X0, X19
	029 Move X30, [X31+16]
	030 Move X19, [X31+24]
	031 Call BansheeController.SetDie, X0
	032 Return 
	033 Move X0, X19
	034 Call BansheeController.get_phase, X0
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move [X19+432], W31
	037 Move X30, [X31+16]
	038 Move X19, [X31+24]
	039 Return 

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01DE5ECC MOV X2, X31
	0x01DE5ED0 BL 0x337DF1C
	0x01DE5ED4 ADRP X0, 0x2313000
	0x01DE5ED8 LDR X0, [X0 + 0xD80]
	0x01DE5EDC BL 0x1C16D08
	0x01DE5EE0 MOV X1, X0
	0x01DE5EE4 MOV X0, X19
	0x01DE5EE8 BL 0x1C16DEC
	0x01DE5EEC STR X30, [X31 - 0x20]!
	0x01DE5EF0 STP X20, X19, [X31 + 0x10]
	0x01DE5EF4 ADRP X20, 0x25F3000
	0x01DE5EF8 LDRB W8, [X20 + 0xCA1]
	0x01DE5EFC MOV X19, X0
	0x01DE5F00 TBNZ X8, 0x0, 0x1DE5F18
	0x01DE5F04 ADRP X0, 0x2313000
	0x01DE5F08 LDR X0, [X0 + 0xD88]
	0x01DE5F0C BL 0x1C16CF4
	0x01DE5F10 MOVZ W8, 0x1
	0x01DE5F14 STRB W8, [X20 + 0xCA1]
	0x01DE5F18 LDR X0, [X19 + 0x88]
	0x01DE5F1C CBZ X0, 0x1DE5F7C
	0x01DE5F20 ADRP X20, 0x2313000
	0x01DE5F24 LDR X20, [X20 + 0xD88]
	0x01DE5F28 MOV X1, X31
	0x01DE5F2C BL 0x3C1341C
	0x01DE5F30 LDR X8, [X20]
	0x01DE5F34 MOV X19, X0
	0x01DE5F38 LDR W9, [X8 + 0xE0]
	0x01DE5F3C CBNZ W9, 0x1DE5F48
	0x01DE5F40 MOV X0, X8
	0x01DE5F44 BL 0x1C16DFC
	0x01DE5F48 CBZ X19, 0x1DE5F7C
	0x01DE5F4C LDR X8, [X20]
	0x01DE5F50 MOV X0, X19
	0x01DE5F54 LDP X20, X19, [X31 + 0x10]
	0x01DE5F58 FMOV S0, W31
	0x01DE5F5C LDR X8, [X8 + 0xB8]
	0x01DE5F60 FMOV S1, W31
	0x01DE5F64 FMOV S2, W31
	0x01DE5F68 FMOV S3, 1
	0x01DE5F6C LDR W1, [X8]
	0x01DE5F70 MOV X2, X31
	0x01DE5F74 LDR X30, [X31], #0x20
	0x01DE5F78 B 0x3C14988
	0x01DE5F7C BL 0x1C16F20
	0x01DE5F80 B 0x1DE5F84
	0x01DE5F84 STP X30, X21, [X31 - 0x20]!
	0x01DE5F88 STP X20, X19, [X31 + 0x10]
	0x01DE5F8C ADRP X20, 0x25F3000
	0x01DE5F90 LDRB W8, [X20 + 0xCA2]
	0x01DE5F94 MOV X19, X0
	0x01DE5F98 TBNZ X8, 0x0, 0x1DE5FC8
	0x01DE5F9C ADRP X0, 0x2313000
	0x01DE5FA0 LDR X0, [X0 + 0xD88]
	0x01DE5FA4 BL 0x1C16CF4
	0x01DE5FA8 ADRP X0, 0x2311000
	0x01DE5FAC LDR X0, [X0 + 0xA78]
	0x01DE5FB0 BL 0x1C16CF4
	0x01DE5FB4 ADRP X0, 0x2313000
	0x01DE5FB8 LDR X0, [X0 + 0xD90]
	0x01DE5FBC BL 0x1C16CF4
	0x01DE5FC0 MOVZ W8, 0x1
	0x01DE5FC4 STRB W8, [X20 + 0xCA2]
	0x01DE5FC8 LDRB W8, [X19 + 0x58]
	0x01DE5FCC CBZ W8, 0x1DE6078
	0x01DE5FD0 STRB W31, [X19 + 0x58]
	0x01DE5FD4 LDR X0, [X19 + 0x40]
	0x01DE5FD8 CBZ X0, 0x1DE600C
	0x01DE5FDC LDRB W8, [X0 + 0x60]
	0x01DE5FE0 TBNZ X8, 0x1, 0x1DE600C
	0x01DE5FE4 MOV X1, X31
	0x01DE5FE8 BL 0x1E93668
	0x01DE5FEC TBZ X0, 0x0, 0x1DE600C
	0x01DE5FF0 LDR X0, [X19 + 0x38]
	0x01DE5FF4 FMOV S0, 3
	0x01DE5FF8 MOV X1, X31
	0x01DE5FFC BL 0x1E91E68
	0x01DE6000 AND X1, X0, 0x0
	0x01DE6004 MOV X0, X19
	0x01DE6008 BL 0x1DE5E8C
	0x01DE600C LDR X0, [X19 + 0x88]
	0x01DE6010 CBZ X0, 0x1DE619C
	0x01DE6014 ADRP X21, 0x2312000
	0x01DE6018 LDR X21, [X21 + 0xD88]
	0x01DE601C MOV X1, X31
	0x01DE6020 BL 0x3C1341C
	0x01DE6024 LDR X8, [X21]
	0x01DE6028 MOV X20, X0
	0x01DE602C LDR W9, [X8 + 0xE0]
	0x01DE6030 CBNZ W9, 0x1DE6040
	0x01DE6034 MOV X0, X8
	0x01DE6038 BL 0x1C16DFC
	0x01DE603C LDR X8, [X21]
	0x01DE6040 CBZ X20, 0x1DE619C
	0x01DE6044 LDR X8, [X8 + 0xB8]
	0x01DE6048 MOV X0, X20
	0x01DE604C MOV X2, X31
	0x01DE6050 LDP S2, S3, [X8 + 0xC]
	0x01DE6054 LDP S0, S1, [X8 + 0x4]
	0x01DE6058 LDR W1, [X8]
	0x01DE605C BL 0x3C14988
	0x01DE6060 LDR X0, [X19 + 0x90]
	0x01DE6064 CBZ X0, 0x1DE619C
	0x01DE6068 LDP X20, X19, [X31 + 0x10]
	0x01DE606C MOV X1, X31
	0x01DE6070 LDP X30, X21, [X31], #0x20
	0x01DE6074 B 0x3BFCAC0
	0x01DE6078 ADRP X20, 0x2310000
	0x01DE607C LDR X20, [X20 + 0xA78]
	0x01DE6080 LDR X0, [X20]
	0x01DE6084 LDR W8, [X0 + 0xE0]
	0x01DE6088 CBNZ W8, 0x1DE6090
	0x01DE608C BL 0x1C16DFC
	0x01DE6090 MOV X0, X19
	0x01DE6094 MOV X1, X31
	0x01DE6098 BL 0x1E77B08
	0x01DE609C LDR X0, [X19 + 0x38]
	0x01DE60A0 CBZ X0, 0x1DE619C
	0x01DE60A4 MOV X1, X31
	0x01DE60A8 BL 0x1E9E538
	0x01DE60AC CMP W0, 0x4
	0x01DE60B0 B.NE 0x1DE60C0
	0x01DE60B4 LDP X20, X19, [X31 + 0x10]
	0x01DE60B8 LDP X30, X21, [X31], #0x20
	0x01DE60BC RET
	0x01DE60C0 LDR X0, [X19 + 0x40]
	0x01DE60C4 CBZ X0, 0x1DE619C
	0x01DE60C8 MOV X1, X31
	0x01DE60CC BL 0x1E94078
	0x01DE60D0 ANDS W31, W0, 0x7
	0x01DE60D4 B.EQ 0x1DE6128
	0x01DE60D8 LDR X8, [X19 + 0x38]
	0x01DE60DC CBZ X8, 0x1DE619C
	0x01DE60E0 LDR X0, [X8 + 0x50]
	0x01DE60E4 CBZ X0, 0x1DE619C
	0x01DE60E8 MOV X1, X31
	0x01DE60EC BL 0x1EC4D00
	0x01DE60F0 TBZ X0, 0x0, 0x1DE5FD4
	0x01DE60F4 LDR X8, [X19 + 0x38]
	0x01DE60F8 CBZ X8, 0x1DE619C
	0x01DE60FC LDR X0, [X8 + 0x50]
	0x01DE6100 MOVZ W1, 0x8
	0x01DE6104 MOV X2, X31
	0x01DE6108 BL 0x1ED9318
	0x01DE610C LDR X8, [X19 + 0x40]
	0x01DE6110 CBZ X8, 0x1DE619C
	0x01DE6114 LDR X8, [X8 + 0x20]
	0x01DE6118 MOV X20, X0
	0x01DE611C CBZ X8, 0x1DE6160
	0x01DE6120 LDR W0, [X8]
	0x01DE6124 B 0x1DE6164
	0x01DE6128 LDR X0, [X20]
	0x01DE612C LDR X19, [X19 + 0x40]
	0x01DE6130 LDR W8, [X0 + 0xE0]
	0x01DE6134 CBNZ W8, 0x1DE613C
	0x01DE6138 BL 0x1C16DFC
	0x01DE613C ADRP X8, 0x2312000
	0x01DE6140 LDR X8, [X8 + 0xD90]
	0x01DE6144 MOV X1, X19
	0x01DE6148 LDP X20, X19, [X31 + 0x10]
	0x01DE614C MOVZ W2, 0x7
	0x01DE6150 LDR X0, [X8]
	0x01DE6154 MOV X3, X31
	0x01DE6158 LDP X30, X21, [X31], #0x20
	0x01DE615C B 0x1E77B00
	0x01DE6160 MOV X0, X31
	0x01DE6164 LDR W1, [X19 + 0x68]
	0x01DE6168 MOVZ W2, 0x1
	0x01DE616C MOV X3, X31
	0x01DE6170 BL 0x1E9C23C
	0x01DE6174 STUR X0, [X20 + 0x1C]
	0x01DE6178 CBZ X20, 0x1DE619C
	0x01DE617C MOVZ W8, 0x40
	0x01DE6180 STR W8, [X20 + 0xC]
	0x01DE6184 LDR X0, [X19 + 0x38]
	0x01DE6188 CBZ X0, 0x1DE619C
	0x01DE618C MOV X1, X20
	0x01DE6190 MOV X2, X31
	0x01DE6194 BL 0x1EA1E24
	0x01DE6198 B 0x1DE5FD4
	0x01DE619C BL 0x1C16F20

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x25F4000
	010 Move X20, 0x230F000
	011 Move W8, [X21+3224]
	012 Move X20, [X20+2416]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x230F000
	019 Move X0, [X0+2416]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3224], W8
	023 Move X0, X19
	024 Move X1, X31
	025 Call MobController.OnDrawGizmos, X0
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X31
	032 Call Application.get_isPlaying
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {186}
	037 Move X0, X19
	038 Call BansheeController.get_phase, X0
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move S0, 1
	041 Move S1, W31
	042 Move S2, W31
	043 Move S3, 1
	044 Move X0, X31
	045 Add X22, X19, 444
	046 Call Gizmos.set_color, X0
	047 Move X20, 0x25F4000
	048 Move V9, [X19+440]
	049 Move W8, [X20+1923]
	050 Move V10, [X22]
	051 Compare W8, 0
	052 JumpIfNotEqual {58}
	053 Move X0, 0x230F000
	054 Move X0, [X0+1440]
	055 Call 0x1C17CF4
	056 Move W8, 1
	057 Move [X20+1923], W8
	058 Move X21, 0x230F000
	059 Move X21, [X21+1440]
	060 Move X8, [X21]
	061 Move X8, [X8+184]
	062 Move V0, [X8]
	063 NotImplemented "Instruction LDUR not yet implemented."
	064 Move X8, -19902464
	065 Move V8, [X8+3872]
	066 Subtract S0, S9, S0
	067 Subtract V1, V10, V1
	068 Multiply S0, S0, S0
	069 NotImplemented "Instruction INVALID not yet implemented."
	070 Add S0, S0, S1
	071 Move S1, V1.S[1]
	072 Add S0, S1, S0
	073 NotImplemented "Instruction FCMP not yet implemented."
	074 Move X8, -19902464
	075 Move V0, [X19+440]
	076 Move V1, [X19+444]
	077 Move V2, [X19+448]
	078 Move V3, [X8+3876]
	079 Move X0, X31
	080 Call Gizmos.DrawSphere, X0, V0
	081 Move W8, [X20+1923]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction CSET not yet implemented."
	084 Move W8, W31
	085 Move V9, [X19+452]
	086 Move V10, [X19+456]
	087 Compare W8, 0
	088 JumpIfEqual {94}
	089 Move X0, 0x230E000
	090 Move X0, [X0+1440]
	091 Call 0x1C17CF4
	092 Move W8, 1
	093 Move [X20+1923], W8
	094 Move X8, [X21]
	095 Move X8, [X8+184]
	096 Move V0, [X8]
	097 NotImplemented "Instruction LDUR not yet implemented."
	098 Subtract S0, S9, S0
	099 Subtract V1, V10, V1
	100 Multiply S0, S0, S0
	101 NotImplemented "Instruction INVALID not yet implemented."
	102 Add S0, S0, S1
	103 Move S1, V1.S[1]
	104 Add S0, S1, S0
	105 NotImplemented "Instruction FCMP not yet implemented."
	106 Move X8, -19906560
	107 Move V0, [X19+452]
	108 Move V1, [X19+456]
	109 Move V2, [X19+460]
	110 Move V3, [X8+3876]
	111 Move X0, X31
	112 Call Gizmos.DrawSphere, X0, V0
	113 Move W8, [X20+1923]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 NotImplemented "Instruction CSET not yet implemented."
	116 Move W8, W31
	117 Move V9, [X19+464]
	118 Move V10, [X22+24]
	119 Compare W8, 0
	120 JumpIfEqual {126}
	121 Move X0, 0x230E000
	122 Move X0, [X0+1440]
	123 Call 0x1C17CF4
	124 Move W8, 1
	125 Move [X20+1923], W8
	126 Move X8, [X21]
	127 Move X8, [X8+184]
	128 Move V0, [X8]
	129 NotImplemented "Instruction LDUR not yet implemented."
	130 Subtract S0, S9, S0
	131 Subtract V1, V10, V1
	132 Multiply S0, S0, S0
	133 NotImplemented "Instruction INVALID not yet implemented."
	134 Add S0, S0, S1
	135 Move S1, V1.S[1]
	136 Add S0, S1, S0
	137 NotImplemented "Instruction FCMP not yet implemented."
	138 Move X8, -19906560
	139 Move V0, [X19+464]
	140 Move V1, [X19+468]
	141 Move V2, [X19+472]
	142 Move V3, [X8+3876]
	143 Move X0, X31
	144 Call Gizmos.DrawSphere, X0, V0
	145 Move W8, [X20+1923]
	146 NotImplemented "Instruction CMP not yet implemented."
	147 NotImplemented "Instruction CSET not yet implemented."
	148 Move W8, W31
	149 Move V9, [X19+476]
	150 Move V10, [X19+480]
	151 Compare W8, 0
	152 JumpIfEqual {158}
	153 Move X0, 0x230E000
	154 Move X0, [X0+1440]
	155 Call 0x1C17CF4
	156 Move W8, 1
	157 Move [X20+1923], W8
	158 Move X8, [X21]
	159 Move X8, [X8+184]
	160 Move V0, [X8]
	161 NotImplemented "Instruction LDUR not yet implemented."
	162 Subtract S0, S9, S0
	163 Subtract V1, V10, V1
	164 Multiply S0, S0, S0
	165 NotImplemented "Instruction INVALID not yet implemented."
	166 Add S0, S0, S1
	167 Move S1, V1.S[1]
	168 Add S0, S1, S0
	169 NotImplemented "Instruction FCMP not yet implemented."
	170 Move X8, -19906560
	171 Move V0, [X19+476]
	172 Move V1, [X19+480]
	173 Move V2, [X19+484]
	174 Move V3, [X8+3876]
	175 Move X20, [X31+48]
	176 Move X19, [X31+56]
	177 Move X22, [X31+32]
	178 Move X21, [X31+40]
	179 Move X30, [X31+24]
	180 Move D9, [X31+8]
	181 Move D8, [X31+16]
	182 Move X0, X31
	183 Move V10, [X31+64]
	184 Call Gizmos.DrawSphere, X0, V0
	185 Return 
	186 Move X20, [X31+48]
	187 Move X19, [X31+56]
	188 Move X22, [X31+32]
	189 Move X21, [X31+40]
	190 Move X30, [X31+24]
	191 Move D9, [X31+8]
	192 Move D8, [X31+16]
	193 Move V10, [X31+64]
	194 Return 

Method: System.Void .ctor()

Disassembly:
	0x01DE61A0 SUB X31, X31, 0x80
	0x01DE61A4 STR X30, [X31 + 0x50]
	0x01DE61A8 STP X22, X21, [X31 + 0x60]
	0x01DE61AC STP X20, X19, [X31 + 0x70]
	0x01DE61B0 ADRP X20, 0x25F2000
	0x01DE61B4 LDRB W8, [X20 + 0xCA3]
	0x01DE61B8 MOV X19, X0
	0x01DE61BC TBNZ X8, 0x0, 0x1DE61E0
	0x01DE61C0 ADRP X0, 0x2310000
	0x01DE61C4 LDR X0, [X0 + 0xB58]
	0x01DE61C8 BL 0x1C16CF4
	0x01DE61CC ADRP X0, 0x2310000
	0x01DE61D0 LDR X0, [X0 + 0xB60]
	0x01DE61D4 BL 0x1C16CF4
	0x01DE61D8 MOVZ W8, 0x1
	0x01DE61DC STRB W8, [X20 + 0xCA3]
	0x01DE61E0 MOV X0, X19
	0x01DE61E4 MOV X1, X31
	0x01DE61E8 BL 0x1E73D04
	0x01DE61EC LDRB W8, [X19 + 0xA0]
	0x01DE61F0 CBNZ W8, 0x1DE62F4
	0x01DE61F4 MOV X0, X19
	0x01DE61F8 BL 0x1DE5E2C
	0x01DE61FC STR W0, [X31 + 0x58]
	0x01DE6200 LDR X1, [X19 + 0x38]
	0x01DE6204 ADD X0, X31, 0x58
	0x01DE6208 MOV X2, X31
	0x01DE620C BL 0x1E91B84
	0x01DE6210 TBZ X0, 0x0, 0x1DE62F4
	0x01DE6214 LDR X20, [X19 + 0x38]
	0x01DE6218 LDR X21, [X19 + 0x98]
	0x01DE621C MOV X0, X19
	0x01DE6220 MOV X1, X31
	0x01DE6224 BL 0x3C32E90
	0x01DE6228 CBZ X0, 0x1DE6308
	0x01DE622C MOV X1, X31
	0x01DE6230 BL 0x3C3F58C
	0x01DE6234 ADRP X8, 0x2310000
	0x01DE6238 LDR X8, [X8 + 0xB58]
	0x01DE623C ADD X0, X31, 0x40
	0x01DE6240 STP X31, X31, [X31 + 0x40]
	0x01DE6244 LDR X1, [X8]
	0x01DE6248 BL 0x243BFEC
	0x01DE624C ADRP X22, 0x25F2000
	0x01DE6250 LDRB W8, [X22 + 0x793]
	0x01DE6254 CBNZ W8, 0x1DE626C
	0x01DE6258 ADRP X0, 0x230E000
	0x01DE625C LDR X0, [X0 + 0x5A8]
	0x01DE6260 BL 0x1C16CF4
	0x01DE6264 MOVZ W8, 0x1
	0x01DE6268 STRB W8, [X22 + 0x793]
	0x01DE626C ADRP X8, 0x230E000
	0x01DE6270 LDR X8, [X8 + 0x5A8]
	0x01DE6274 ADRP X9, 0x2310000
	0x01DE6278 ADD X0, X31, 0x28
	0x01DE627C LDR X8, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x25F3000
	007 Move W8, [X20+3225]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2312000
	014 Move X0, [X0+2144]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+3225], W8
	018 Move X22, 0x25F3000
	019 Move X20, 0x2312000
	020 Move W8, [X22+1923]
	021 Move X20, [X20+2144]
	022 Add X21, X19, 452
	023 Compare W8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, 0x230E000
	026 Move X0, [X0+1440]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+1923], W8
	030 Move X8, 0x230E000
	031 Move X8, [X8+1440]
	032 Move X8, [X8]
	033 Move X9, [X8+184]
	034 Move V0, [X9]
	035 Move V1, [X9+8]
	036 Move [X19+440], D0
	037 Move [X19+448], S1
	038 Move X9, [X8+184]
	039 Move V0, [X9]
	040 Move V1, [X9+8]
	041 Move [X21], D0
	042 Move [X19+460], S1
	043 Move X9, [X8+184]
	044 Move V0, [X9]
	045 Move V1, [X9+8]
	046 Move [X19+464], D0
	047 Move [X19+472], S1
	048 Move X8, [X8+184]
	049 Move V0, [X8]
	050 Move V1, [X8+8]
	051 Move [X21+24], D0
	052 Move [X19+484], S1
	053 Move X0, [X20]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, X19
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+48]
	065 Call MobController..ctor, X0
	066 Return 

Method: System.Single <UpdateAppeared>b__46_0(AnimalCompany.NetPlayer x)

Disassembly:
	0x01DE6280 LDR X8, [X8 + 0xB8]
	0x01DE6284 LDR X9, [X9 + 0xB60]
	0x01DE6288 LDP S0, S1, [X8]
	0x01DE628C LDP S2, S3, [X8 + 0x8]
	0x01DE6290 LDR X1, [X9]
	0x01DE6294 STP X31, X31, [X31 + 0x28]
	0x01DE6298 STR W31, [X31 + 0x38]
	0x01DE629C BL 0x2437C9C
	0x01DE62A0 CBZ X20, 0x1DE6308
	0x01DE62A4 LDUR V0, [X31 + 0x28]
	0x01DE62A8 LDR W8, [X31 + 0x38]
	0x01DE62AC LDP X2, X3, [X31 + 0x40]
	0x01DE62B0 ADD X4, X31, 0x10
	0x01DE62B4 MOV X0, X20
	0x01DE62B8 MOV X1, X21
	0x01DE62BC MOV X5, X31
	0x01DE62C0 MOV X6, X31
	0x01DE62C4 MOV W7, W31
	0x01DE62C8 STR V0, [X31 + 0x1]
	0x01DE62CC STR W8, [X31 + 0x20]
	0x01DE62D0 STR X31, [X31]
	0x01DE62D4 BL 0x1EAE6A8
	0x01DE62D8 LDR X0, [X19 + 0x38]
	0x01DE62DC CBZ X0, 0x1DE6308
	0x01DE62E0 LDR X1, [X19 + 0x40]
	0x01DE62E4 MOV X2, X31
	0x01DE62E8 BL 0x1EA3884
	0x01DE62EC MOVZ W8, 0x1
	0x01DE62F0 STRB W8, [X19 + 0xA0]
	0x01DE62F4 LDP X20, X19, [X31 + 0x70]
	0x01DE62F8 LDP X22, X21, [X31 + 0x60]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Compare X1, 0
	007 JumpIfEqual {38}
	008 Move X19, X0
	009 Move X0, [X1+144]
	010 Compare X0, 0
	011 JumpIfEqual {38}
	012 Move X1, X31
	013 Call Transform.get_position, X0
	014 Move X0, X19
	015 Move X1, X31
	016 Move V8, V0
	017 Move V9, V1
	018 Move V10, V2
	019 Call Component.get_transform, X0
	020 Compare X0, 0
	021 JumpIfEqual {38}
	022 Move X1, X31
	023 Call Transform.get_position, X0
	024 Subtract S0, S8, S0
	025 Subtract S1, S9, S1
	026 Move X30, [X31+32]
	027 Move X19, [X31+40]
	028 Move D9, [X31+16]
	029 Move D8, [X31+24]
	030 Subtract S2, S10, S2
	031 Multiply S0, S0, S0
	032 Multiply S1, S1, S1
	033 Add S0, S0, S1
	034 Multiply S1, S2, S2
	035 Add S0, S1, S0
	036 Move V10, [X31+48]
	037 Return V0
	038 Call 0x1C17F20

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DE62FC LDR X30, [X31 + 0x50]
	0x01DE6300 ADD X31, X31, 0x80
	0x01DE6304 RET
	0x01DE6308 BL 0x1C16F20
	0x01DE630C SUB X31, X31, 0x30
	0x01DE6310 STP X30, X21, [X31 + 0x10]
	0x01DE6314 STP X20, X19, [X31 + 0x20]
	0x01DE6318 ADRP X21, 0x25F2000
	0x01DE631C ADRP X20, 0x230D000
	0x01DE6320 LDRB W8, [X21 + 0xCA4]
	0x01DE6324 LDR X20, [X20 + 0x598]
	0x01DE6328 MOV X19, X0
	0x01DE632C TBNZ X8, 0x0, 0x1DE6344
	0x01DE6330 ADRP X0, 0x230D000
	0x01DE6334 LDR X0, [X0 + 0x598]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 And W1, W1, 1
	004 Move X2, X31
	005 Move X19, X0
	006 Call MobController.CopyBackingFieldsToState, X0, X1
	007 Move W1, [X19+420]
	008 Move X0, X19
	009 Call BansheeController.set_phase, X0, X1
	010 Move W1, [X19+424]
	011 Move X0, X19
	012 Call BansheeController.set_isVisible, X0, X1
	013 Move V0, [X19+428]
	014 Move X0, X19
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Call BansheeController.set_timerToAttack, X0, V0
	018 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DE6338 BL 0x1C16CF4
	0x01DE633C MOVZ W8, 0x1
	0x01DE6340 STRB W8, [X21 + 0xCA4]
	0x01DE6344 LDR X0, [X20]
	0x01DE6348 LDR X20, [X19 + 0x38]
	0x01DE634C LDR W8, [X0 + 0xE0]
	0x01DE6350 CBNZ W8, 0x1DE6358
	0x01DE6354 BL 0x1C16DFC
	0x01DE6358 MOV X0, X20
	0x01DE635C MOV X1, X31
	0x01DE6360 MOV X2, X31
	0x01DE6364 BL 0x3C354F8
	0x01DE6368 TBZ X0, 0x0, 0x1DE63A8
	0x01DE636C LDR X0, [X19 + 0x38]
	0x01DE6370 CBZ X0, 0x1DE63B8
	0x01DE6374 LDR X1, [X19 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.CopyStateToBackingFields, X0
	006 Move X0, X19
	007 Call BansheeController.get_phase, X0
	008 Move [X19+420], W0
	009 Move X0, X19
	010 Call BansheeController.get_isVisible, X0
	011 And W8, W0, 1
	012 Move X0, X19
	013 Move [X19+424], W8
	014 Call BansheeController.get_timerToAttack, X0
	015 Move [X19+428], S0
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return 

