Type: AnimalCompany.RedGreenController

Method: AnimalCompany.RedGreenController/Phase get_phase()

Disassembly:
	0x01DFE40C LDR X0, [X0 + 0x5A8]
	0x01DFE410 BL 0x1C16CF4
	0x01DFE414 MOVZ W8, 0x1
	0x01DFE418 STRB W8, [X25 + 0x785]
	0x01DFE41C ADRP X20, 0x22F5000
	0x01DFE420 LDR X20, [X20 + 0x5A8]
	0x01DFE424 LDR X0, [X20]
	0x01DFE428 LDR W8, [X0 + 0xE0]
	0x01DFE42C CBNZ W8, 0x1DFE434
	0x01DFE430 BL 0x1C16DFC
	0x01DFE434 ADRP X8, 0xFFFFFFFFFECEC000
	0x01DFE438 FMUL S0, S8, S8
	0x01DFE43C FMUL S1, S9, S9
	0x01DFE440 LDR V11, [X8 + 0x17C]
	0x01DFE444 ADRP X21, 0x22F5000
	0x01DFE448 FMUL S2, S10, S10
	0x01DFE44C FADD S0, S0, S1
	0x01DFE450 LDR X21, [X21 + 0x5A0]
	0x01DFE454 FADD S0, S2, S0
	0x01DFE458 FSQRT S0, S0
	0x01DFE45C FCMP S0, S11
	0x01DFE460 ADRP X26, 0x25DA000
	0x01DFE464 B.LE 0x1DFE478
	0x01DFE468 FDIV S8, S8, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+60]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x22F6000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x22FC000
	016 Move X0, [X0+1432]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22FC000
	023 Move X0, [X0+1440]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_phase(AnimalCompany.RedGreenController/Phase value)

Disassembly:
	0x01DFE46C FDIV S9, S9, S0
	0x01DFE470 FDIV S10, S10, S0
	0x01DFE474 B 0x1DFE4A4
	0x01DFE478 LDRB W8, [X26 + 0x783]
	0x01DFE47C CBNZ W8, 0x1DFE494
	0x01DFE480 ADRP X0, 0x22F5000
	0x01DFE484 LDR X0, [X0 + 0x5A0]
	0x01DFE488 BL 0x1C16CF4
	0x01DFE48C MOVZ W8, 0x1
	0x01DFE490 STRB W8, [X26 + 0x783]
	0x01DFE494 LDR X8, [X21]
	0x01DFE498 LDR X8, [X8 + 0xB8]
	0x01DFE49C LDP S8, S9, [X8]
	0x01DFE4A0 LDR V10, [X8 + 0x8]
	0x01DFE4A4 LDR X8, [X19 + 0xC0]
	0x01DFE4A8 CBZ X8, 0x1DFEA34
	0x01DFE4AC LDR V12, [X8 + 0x40]
	0x01DFE4B0 MOV X0, X19
	0x01DFE4B4 MOV X1, X31
	0x01DFE4B8 BL 0x3C32E90
	0x01DFE4BC CBZ X0, 0x1DFEA34
	0x01DFE4C0 MOV X1, X31
	0x01DFE4C4 STP S11, S12, [X31 + 0x88]
	0x01DFE4C8 BL 0x3C3FA04

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+60], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22F6000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x22FC000
	016 Move X0, [X0+1432]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22FC000
	023 Move X0, [X0+1448]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: UnityEngine.Vector3 get_spawnedPosition()

Disassembly:
	0x01DFE4CC ADRP X22, 0x25DA000
	0x01DFE4D0 LDRB W8, [X22 + 0xA24]
	0x01DFE4D4 MOV V11.16B, V0.16B
	0x01DFE4D8 MOV V12.16B, V1.16B
	0x01DFE4DC MOV V13.16B, V2.16B
	0x01DFE4E0 CBNZ W8, 0x1DFE4F8
	0x01DFE4E4 ADRP X0, 0x22F5000
	0x01DFE4E8 LDR X0, [X0 + 0x5A8]
	0x01DFE4EC BL 0x1C16CF4
	0x01DFE4F0 MOVZ W8, 0x1
	0x01DFE4F4 STRB W8, [X22 + 0xA24]
	0x01DFE4F8 LDR X0, [X20]
	0x01DFE4FC FMUL S0, S8, S8
	0x01DFE500 FMUL S1, S9, S9
	0x01DFE504 FADD S0, S0, S1
	0x01DFE508 FMUL S1, S10, S10
	0x01DFE50C LDR W8, [X0 + 0xE0]
	0x01DFE510 FADD S15, S1, S0
	0x01DFE514 FMUL S0, S11, S11
	0x01DFE518 FMUL S1, S12, S12
	0x01DFE51C FADD S0, S0, S1
	0x01DFE520 FMUL S1, S13, S13
	0x01DFE524 FADD S14, S1, S0
	0x01DFE528 CBNZ W8, 0x1DFE530
	0x01DFE52C BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move S0, [X8+64]
	007 Move S1, [X8+68]
	008 Move V2, [X8+72]
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x22F6000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x22FC000
	018 Move X0, [X0+1456]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x22FC000
	025 Move X0, [X0+1464]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_spawnedPosition(UnityEngine.Vector3 value)

Disassembly:
	0x01DFE530 ADRP X8, 0xFFFFFFFFFECEB000
	0x01DFE534 LDR V1, [X8 + 0xFE8]
	0x01DFE538 FMUL S0, S15, S14
	0x01DFE53C FSQRT S0, S0
	0x01DFE540 FMOV S15, W31
	0x01DFE544 FCMP S0, S1
	0x01DFE548 B.MI 0x1DFE5A0
	0x01DFE54C LDR X0, [X20]
	0x01DFE550 FMUL S1, S8, S11
	0x01DFE554 FMUL S2, S9, S12
	0x01DFE558 FMUL S3, S10, S13
	0x01DFE55C FADD S1, S1, S2
	0x01DFE560 FADD S1, S3, S1
	0x01DFE564 LDR W8, [X0 + 0xE0]
	0x01DFE568 FDIV S0, S1, S0
	0x01DFE56C FMOV S1, 1
	0x01DFE570 FMOV S2, -1
	0x01DFE574 FMIN S1, S0, S1
	0x01DFE578 FCMP S0, S2
	0x01DFE57C FCSEL S11, S1, S2, PL
	0x01DFE580 CBNZ W8, 0x1DFE588
	0x01DFE584 BL 0x1C16DFC
	0x01DFE588 FCVT S0, S11
	0x01DFE58C BL 0x3EB1B80
	0x01DFE590 ADRP X8, 0xFFFFFFFFFECEC000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move [X8+64], S0
	007 Move [X8+72], S1
	008 Move [X8+72], S2
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 
	012 Move X0, 0x22F6000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x22FC000
	018 Move X0, [X0+1456]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x22FC000
	025 Move X0, [X0+1472]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Boolean get_isGreen()

Disassembly:
	0x01DFE594 LDR V1, [X8 + 0x448]
	0x00000000 INVALID
	0x01DFE59C FMUL S15, S0, S1
	0x01DFE5A0 MOV X0, X19
	0x01DFE5A4 MOV X1, X31
	0x01DFE5A8 BL 0x3C32E90
	0x01DFE5AC MOV X22, X0
	0x01DFE5B0 MOV X0, X19
	0x01DFE5B4 MOV X1, X31
	0x01DFE5B8 BL 0x3C32E90
	0x01DFE5BC CBZ X0, 0x1DFEA34
	0x01DFE5C0 LDR V0, [X31 + 0x8C]
	0x01DFE5C4 MOV X1, X31
	0x01DFE5C8 FDIV S0, S0, S15
	0x01DFE5CC STR S0, [X31 + 0x8C]
	0x01DFE5D0 BL 0x3C3DEB4
	0x01DFE5D4 MOV V11.16B, V0.16B
	0x01DFE5D8 MOV V12.16B, V1.16B
	0x01DFE5DC MOV V13.16B, V2.16B
	0x01DFE5E0 MOV V0.16B, V8.16B
	0x01DFE5E4 MOV V1.16B, V9.16B
	0x01DFE5E8 MOV V2.16B, V10.16B
	0x01DFE5EC MOV X0, X31
	0x01DFE5F0 MOV V14.16B, V3.16B
	0x01DFE5F4 BL 0x3C2A8C4
	0x01DFE5F8 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+76]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x22F6000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x22FC000
	018 Move X0, [X0+1480]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x22FC000
	025 Move X0, [X0+1488]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_isGreen(System.Boolean value)

Disassembly:
	0x01DFE5FC MOV X1, X31
	0x01DFE600 MOV V8.16B, V0.16B
	0x01DFE604 MOV V9.16B, V1.16B
	0x01DFE608 MOV V10.16B, V2.16B
	0x01DFE60C MOV V15.16B, V3.16B
	0x01DFE610 BL 0x1DEA4B8
	0x01DFE614 LDR V1, [X31 + 0x8C]
	0x01DFE618 MOV V2.16B, V13.16B
	0x01DFE61C MOV V3.16B, V14.16B
	0x01DFE620 MOV V4.16B, V8.16B
	0x01DFE624 FMUL S0, S1, S0
	0x01DFE628 STR S0, [X31]
	0x01DFE62C MOV V0.16B, V11.16B
	0x01DFE630 MOV V1.16B, V12.16B
	0x01DFE634 MOV V5.16B, V9.16B
	0x01DFE638 MOV V6.16B, V10.16B
	0x01DFE63C MOV V7.16B, V15.16B
	0x01DFE640 MOV X0, X31
	0x01DFE644 BL 0x3C2A2F8
	0x01DFE648 CBZ X22, 0x1DFEA34
	0x01DFE64C MOV X0, X22
	0x01DFE650 MOV X1, X31
	0x01DFE654 BL 0x3C3F7AC
	0x01DFE658 LDR X22, [X19 + 0xE8]
	0x01DFE65C MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+76], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x22F6000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x22FC000
	017 Move X0, [X0+1480]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x22FC000
	024 Move X0, [X0+1496]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: System.Single get_switchLightTimer()

Disassembly:
	0x01DFE660 MOV X1, X31
	0x01DFE664 BL 0x3C32E90
	0x01DFE668 LDR V14, [X31 + 0x88]
	0x01DFE66C CBZ X0, 0x1DFEA34
	0x01DFE670 MOV X1, X31
	0x01DFE674 BL 0x3C3F58C
	0x01DFE678 MOV X0, X19
	0x01DFE67C MOV X1, X31
	0x01DFE680 MOV V8.16B, V0.16B
	0x01DFE684 MOV V9.16B, V1.16B
	0x01DFE688 MOV V10.16B, V2.16B
	0x01DFE68C BL 0x3C32E90
	0x01DFE690 CBZ X0, 0x1DFEA34
	0x01DFE694 MOV X1, X31
	0x01DFE698 BL 0x3C3FA04
	0x01DFE69C CBZ X22, 0x1DFEA34
	0x01DFE6A0 FMOV S3, 10
	0x01DFE6A4 FMUL S2, S2, S3
	0x01DFE6A8 FMUL S1, S1, S3
	0x01DFE6AC FMUL S0, S0, S3
	0x01DFE6B0 FADD S2, S10, S2
	0x01DFE6B4 FADD S1, S9, S1
	0x01DFE6B8 FADD S0, S8, S0
	0x01DFE6BC MOV X0, X22

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+80]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x22F6000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x22FC000
	016 Move X0, [X0+1504]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22FC000
	023 Move X0, [X0+1512]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_switchLightTimer(System.Single value)

Disassembly:
	0x01DFE6C0 MOV X1, X31
	0x01DFE6C4 BL 0x3BE13F8
	0x01DFE6C8 LDR X0, [X19 + 0xE8]
	0x01DFE6CC CBZ X0, 0x1DFEA34
	0x01DFE6D0 MOV X1, X31
	0x01DFE6D4 BL 0x3BE1608
	0x01DFE6D8 TBZ X0, 0x0, 0x1DFE754
	0x01DFE6DC LDR X22, [X19 + 0xE8]
	0x01DFE6E0 MOV X0, X19
	0x01DFE6E4 MOV X1, X31
	0x01DFE6E8 BL 0x3C32E90
	0x01DFE6EC CBZ X0, 0x1DFEA34
	0x01DFE6F0 MOV X1, X31
	0x01DFE6F4 BL 0x3C3FA04
	0x01DFE6F8 LDR X8, [X19 + 0xC0]
	0x01DFE6FC CBZ X8, 0x1DFEA34
	0x01DFE700 LDR X8, [X8 + 0x38]
	0x01DFE704 CBZ X8, 0x1DFEA34
	0x01DFE708 LDR W9, [X8 + 0x18]
	0x01DFE70C CBZ W9, 0x1DFEA48
	0x01DFE710 LDR V11, [X8 + 0x20]
	0x01DFE714 MOV X0, X19
	0x01DFE718 MOV X1, X31
	0x01DFE71C MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+80], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22F6000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x22FC000
	016 Move X0, [X0+1504]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22FC000
	023 Move X0, [X0+1520]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get_switchLightInterval()

Disassembly:
	0x01DFE720 MOV V9.16B, V1.16B
	0x01DFE724 MOV V10.16B, V2.16B
	0x01DFE728 BL 0x1DEA4B8
	0x01DFE72C CBZ X22, 0x1DFEA34
	0x01DFE730 FMUL S1, S10, S11
	0x01DFE734 FMUL S3, S9, S11
	0x01DFE738 FMUL S4, S8, S11
	0x01DFE73C FMUL S2, S1, S0
	0x01DFE740 FMUL S1, S3, S0
	0x01DFE744 FMUL S0, S4, S0
	0x01DFE748 MOV X0, X22
	0x01DFE74C MOV X1, X31
	0x01DFE750 BL 0x3BE16E0
	0x01DFE754 MOV X0, X19
	0x01DFE758 BL 0x1DFD8A0
	0x01DFE75C LDR X8, [X19 + 0xC0]
	0x01DFE760 CBZ X8, 0x1DFEA34
	0x01DFE764 ADRP X9, 0x22FA000
	0x01DFE768 LDR X9, [X9 + 0xC40]
	0x01DFE76C MOV V8.16B, V0.16B
	0x01DFE770 LDR V0, [X8 + 0x4C]
	0x01DFE774 MOV V9.16B, V1.16B
	0x01DFE778 LDR X0, [X9]
	0x01DFE77C FMOV S1, 0.5

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+84]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x22F6000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x22FC000
	016 Move X0, [X0+1528]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22FC000
	023 Move X0, [X0+1536]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_switchLightInterval(System.Single value)

Disassembly:
	0x01DFE780 MOV V10.16B, V2.16B
	0x01DFE784 FMUL S11, S0, S1
	0x01DFE788 LDR W8, [X0 + 0xE0]
	0x01DFE78C CBNZ W8, 0x1DFE794
	0x01DFE790 BL 0x1C16DFC
	0x01DFE794 MOV X0, X19
	0x01DFE798 MOV V0.16B, V8.16B
	0x01DFE79C MOV V1.16B, V9.16B
	0x01DFE7A0 MOV V2.16B, V10.16B
	0x01DFE7A4 MOV V3.16B, V11.16B
	0x01DFE7A8 MOV X1, X31
	0x01DFE7AC BL 0x1DEFBA0
	0x01DFE7B0 CBZ X0, 0x1DFEA34
	0x01DFE7B4 ADRP X8, 0x22FA000
	0x01DFE7B8 LDR X8, [X8 + 0xC38]
	0x01DFE7BC LDR X1, [X8]
	0x01DFE7C0 ADD X8, X31, 0x8
	0x01DFE7C4 BL 0x301CB58
	0x01DFE7C8 LDUR V0, [X31 + 0x8]
	0x01DFE7CC LDR X8, [X31 + 0x18]
	0x01DFE7D0 ADRP X27, 0x22FA000
	0x01DFE7D4 LDR X27, [X27 + 0xC28]
	0x01DFE7D8 STR V0, [X31 + 0x2]
	0x01DFE7DC STR X8, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+84], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22F6000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x22FC000
	016 Move X0, [X0+1528]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22FC000
	023 Move X0, [X0+1544]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get_timerAnticipating()

Disassembly:
	0x01DFE7E0 MOVZ W28, 0x1
	0x01DFE7E4 LDR X1, [X27]
	0x01DFE7E8 ADD X0, X31, 0x20
	0x01DFE7EC BL 0x2BC4350
	0x01DFE7F0 TBZ X0, 0x0, 0x1DFE948
	0x01DFE7F4 LDR X0, [X24]
	0x01DFE7F8 LDR X22, [X31 + 0x30]
	0x01DFE7FC LDR X23, [X19 + 0x160]
	0x01DFE800 LDR W8, [X0 + 0xE0]
	0x01DFE804 CBNZ W8, 0x1DFE80C
	0x01DFE808 BL 0x1C16DFC
	0x01DFE80C MOV X0, X23
	0x01DFE810 MOV X1, X22
	0x01DFE814 MOV X2, X31
	0x01DFE818 BL 0x3C3883C
	0x01DFE81C TBZ X0, 0x0, 0x1DFE7E4
	0x01DFE820 CBZ X22, 0x1DFEA40
	0x01DFE824 LDR X0, [X22 + 0x90]
	0x01DFE828 CBZ X0, 0x1DFEA44
	0x01DFE82C MOV X1, X31
	0x01DFE830 BL 0x3C3F58C
	0x01DFE834 MOV V8.16B, V0.16B
	0x01DFE838 MOV V9.16B, V1.16B
	0x01DFE83C MOV V10.16B, V2.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+88]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x22F6000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x22FC000
	016 Move X0, [X0+1552]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22FC000
	023 Move X0, [X0+1560]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_timerAnticipating(System.Single value)

Disassembly:
	0x01DFE840 MOV X0, X19
	0x01DFE844 MOV X1, X31
	0x01DFE848 BL 0x3C32E90
	0x01DFE84C CBZ X0, 0x1DFEA38
	0x01DFE850 MOV X1, X31
	0x01DFE854 BL 0x3C3F58C
	0x01DFE858 LDRB W8, [X25 + 0x785]
	0x01DFE85C MOV V11.16B, V0.16B
	0x01DFE860 MOV V12.16B, V1.16B
	0x01DFE864 MOV V13.16B, V2.16B
	0x01DFE868 CBNZ W8, 0x1DFE878
	0x01DFE86C MOV X0, X20
	0x01DFE870 BL 0x1C16CF4
	0x01DFE874 STRB W28, [X25 + 0x785]
	0x01DFE878 LDR X0, [X20]
	0x01DFE87C LDR W8, [X0 + 0xE0]
	0x01DFE880 CBNZ W8, 0x1DFE888
	0x01DFE884 BL 0x1C16DFC
	0x01DFE888 FSUB S0, S8, S11
	0x01DFE88C FSUB S1, S9, S12
	0x01DFE890 FSUB S2, S10, S13
	0x01DFE894 FMUL S3, S0, S0
	0x01DFE898 FMUL S4, S1, S1
	0x01DFE89C FADD S3, S3, S4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+88], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22F6000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x22FC000
	016 Move X0, [X0+1552]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22FC000
	023 Move X0, [X0+1568]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: UnityEngine.Vector3 get__attackSphereCenter()

Disassembly:
	0x01DFE8A0 FMUL S4, S2, S2
	0x01DFE8A4 FADD S3, S4, S3
	0x01DFE8A8 FSQRT S3, S3
	0x01DFE8AC FCMP S3, S14
	0x01DFE8B0 B.LE 0x1DFE8C4
	0x01DFE8B4 FDIV S0, S0, S3
	0x01DFE8B8 FDIV S1, S1, S3
	0x01DFE8BC FDIV S2, S2, S3
	0x01DFE8C0 B 0x1DFE8E8
	0x01DFE8C4 LDRB W8, [X26 + 0x783]
	0x01DFE8C8 CBNZ W8, 0x1DFE8D8
	0x01DFE8CC MOV X0, X21
	0x01DFE8D0 BL 0x1C16CF4
	0x01DFE8D4 STRB W28, [X26 + 0x783]
	0x01DFE8D8 LDR X8, [X21]
	0x01DFE8DC LDR X8, [X8 + 0xB8]
	0x01DFE8E0 LDP S0, S1, [X8]
	0x01DFE8E4 LDR V2, [X8 + 0x8]
	0x01DFE8E8 LDR X8, [X19 + 0xC0]
	0x01DFE8EC CBZ X8, 0x1DFEA3C
	0x01DFE8F0 LDR X9, [X19 + 0x40]
	0x01DFE8F4 CBZ X9, 0x1DFE908
	0x01DFE8F8 LDR X9, [X9 + 0x20]
	0x01DFE8FC CBZ X9, 0x1DFE908
	0x01DFE900 LDR W6, [X9]
	0x01DFE904 B 0x1DFE90C
	0x01DFE908 MOV X6, X31
	0x01DFE90C LDR V3, [X8 + 0x50]
	0x01DFE910 LDR W1, [X8 + 0x24]
	0x01DFE914 LDR X3, [X8 + 0xB8]
	0x01DFE918 LDR X5, [X8 + 0x18]
	0x01DFE91C LDR W8, [X19 + 0x68]
	0x01DFE920 LDR X2, [X19 + 0xD0]
	0x01DFE924 FMUL S0, S0, S3
	0x01DFE928 FMUL S1, S1, S3
	0x01DFE92C FMUL S2, S2, S3
	0x01DFE930 BFM X6, X8, 0x20, 0x1F

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X0, [X0+208]
	007 Compare X0, 0
	008 JumpIfEqual {44}
	009 Move X1, X31
	010 Call Transform.get_position, X0
	011 Move X19, 0x25DB000
	012 Move W8, [X19+1926]
	013 Move V8, V0
	014 Move V9, V1
	015 Move V10, V2
	016 Compare W8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, 0x22F6000
	019 Move X0, [X0+1440]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+1926], W8
	023 Move X8, 0x22F6000
	024 Move X8, [X8+1440]
	025 Move X9, -20000768
	026 Move V0, [X9+1100]
	027 Move X30, [X31+32]
	028 Move X19, [X31+40]
	029 Move X8, [X8]
	030 Move X8, [X8+184]
	031 Move S1, [X8+24]
	032 Move S2, [X8+28]
	033 Move V3, [X8+32]
	034 Multiply S1, S1, S0
	035 Multiply S2, S2, S0
	036 Multiply S3, S3, S0
	037 Add S0, S8, S1
	038 Add S1, S9, S2
	039 Move D9, [X31+16]
	040 Move D8, [X31+24]
	041 Add S2, S10, S3
	042 Move V10, [X31+48]
	043 Return X0
	044 Call 0x1C17F20

Method: System.Single get__attackSphereRadius()

Disassembly:
	0x01DFE934 MOV X0, X22
	0x01DFE938 MOV X4, X3
	0x01DFE93C MOV X7, X31
	0x01DFE940 BL 0x1DB7738
	0x01DFE944 B 0x1DFE7E4
	0x01DFE948 ADRP X8, 0x22FA000
	0x01DFE94C LDR X8, [X8 + 0xC20]
	0x01DFE950 ADD X0, X31, 0x20
	0x01DFE954 LDR X1, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+192]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move V0, [X8+76]
	006 Move S1, 0.5
	007 Multiply S0, S0, S1
	008 Move X30, [X31+16]
	009 Return V0
	010 Call 0x1C17F20

Method: System.Void HandleLightChanged()

Disassembly:
	0x01DFE958 BL 0x2BC434C
	0x01DFE95C MOV X0, X19
	0x01DFE960 BL 0x1DFD4CC
	0x01DFE964 MOV X0, X19
	0x01DFE968 MOV X1, X31
	0x01DFE96C MOV V8.16B, V0.16B
	0x01DFE970 MOV V9.16B, V1.16B
	0x01DFE974 MOV V10.16B, V2.16B
	0x01DFE978 BL 0x3C32E90

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+472]
	004 Call RedGreenController.get_isGreen, X0
	005 Compare X19, 0
	006 JumpIfEqual {11}
	007 And W1, W0, 1
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call 0x1C17F20

Method: System.Void HandlePhaseChanged()

Disassembly:
	0x01DFEAB4 MOV X22, X31
	0x01DFEAB8 B 0x1DFEAC0
	0x01DFEABC MOV X21, X0
	0x01DFEAC0 ADRP X8, 0x22FA000
	0x01DFEAC4 LDR X8, [X8 + 0xC20]
	0x01DFEAC8 LDR X1, [X8]
	0x01DFEACC ADD X0, X31, 0x20
	0x01DFEAD0 BL 0x2BC434C
	0x01DFEAD4 CBNZ X22, 0x1DFEAE0
	0x01DFEAD8 MOV X0, X21
	0x01DFEADC BL 0x1D2C690
	0x01DFEAE0 MOV X0, X22
	0x01DFEAE4 BL 0x1C16F18
	0x01DFEAE8 BL 0x1990590
	0x01DFEAEC STP D13, D12, [X31 - 0x50]!
	0x01DFEAF0 STP D11, D10, [X31 + 0x10]
	0x01DFEAF4 STP D9, D8, [X31 + 0x20]
	0x01DFEAF8 STR X30, [X31 + 0x30]
	0x01DFEAFC STP X20, X19, [X31 + 0x40]
	0x01DFEB00 MOVZ W1, 0x1
	0x01DFEB04 MOV X19, X0
	0x01DFEB08 BL 0x1DFEBE8
	0x01DFEB0C MOV X0, X19
	0x01DFEB10 MOV X1, X31
	0x01DFEB14 BL 0x3C32E90
	0x01DFEB18 CBZ X0, 0x1DFEBE4
	0x01DFEB1C MOV X1, X31
	0x01DFEB20 BL 0x3C3F58C
	0x01DFEB24 MOV X0, X19
	0x01DFEB28 MOV V8.16B, V0.16B
	0x01DFEB2C MOV V9.16B, V1.16B
	0x01DFEB30 MOV V10.16B, V2.16B
	0x01DFEB34 BL 0x1DFD4CC
	0x01DFEB38 ADRP X20, 0x25DA000
	0x01DFEB3C LDRB W8, [X20 + 0x85C]
	0x01DFEB40 MOV V11.16B, V0.16B
	0x01DFEB44 MOV V12.16B, V1.16B
	0x01DFEB48 MOV V13.16B, V2.16B
	0x01DFEB4C CBNZ W8, 0x1DFEB64
	0x01DFEB50 ADRP X0, 0x22F5000
	0x01DFEB54 LDR X0, [X0 + 0x5A8]
	0x01DFEB58 BL 0x1C16CF4
	0x01DFEB5C MOVZ W8, 0x1
	0x01DFEB60 STRB W8, [X20 + 0x85C]
	0x01DFEB64 ADRP X8, 0x22F5000
	0x01DFEB68 LDR X8, [X8 + 0x5A8]
	0x01DFEB6C FSUB S11, S8, S11
	0x01DFEB70 FSUB S9, S9, S12
	0x01DFEB74 FSUB S8, S10, S13
	0x01DFEB78 LDR X0, [X8]
	0x01DFEB7C LDR W8, [X0 + 0xE0]
	0x01DFEB80 CBNZ W8, 0x1DFEB88
	0x01DFEB84 BL 0x1C16DFC
	0x01DFEB88 FMUL S0, S11, S11
	0x01DFEB8C FMUL S1, S9, S9
	0x01DFEB90 ADRP X8, 0xFFFFFFFFFECEC000
	0x01DFEB94 FADD S0, S0, S1
	0x01DFEB98 LDR V1, [X8 + 0xBC]
	0x01DFEB9C FMUL S2, S8, S8
	0x01DFEBA0 FADD S0, S2, S0
	0x01DFEBA4 FSQRT S0, S0
	0x01DFEBA8 FCMP S0, S1
	0x01DFEBAC B.PL 0x1DFEBCC
	0x01DFEBB0 MOV X0, X19
	0x01DFEBB4 LDP X20, X19, [X31 + 0x40]
	0x01DFEBB8 LDR X30, [X31 + 0x30]
	0x01DFEBBC LDP D9, D8, [X31 + 0x20]
	0x01DFEBC0 LDP D11, D10, [X31 + 0x10]
	0x01DFEBC4 LDP D13, D12, [X31], #0x50
	0x01DFEBC8 B 0x1DFDE94
	0x01DFEBCC LDP X20, X19, [X31 + 0x40]
	0x01DFEBD0 LDR X30, [X31 + 0x30]
	0x01DFEBD4 LDP D9, D8, [X31 + 0x20]
	0x01DFEBD8 LDP D11, D10, [X31 + 0x10]
	0x01DFEBDC LDP D13, D12, [X31], #0x50
	0x01DFEBE0 RET
	0x01DFEBE4 BL 0x1C16F20
	0x01DFEBE8 SUB X31, X31, 0xF0
	0x01DFEBEC STP D15, D14, [X31 + 0x50]
	0x01DFEBF0 STP D13, D12, [X31 + 0x60]
	0x01DFEBF4 STP D11, D10, [X31 + 0x70]
	0x01DFEBF8 STP D9, D8, [X31 + 0x80]
	0x01DFEBFC STP X29, X30, [X31 + 0x90]
	0x01DFEC00 STP X28, X27, [X31 + 0xA0]
	0x01DFEC04 STP X26, X25, [X31 + 0xB0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call RedGreenController.get_phase, X0
	006 Subtract W8, W0, 1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X9, -19726336
	009 Add X9, X9, 2432
	010 NotImplemented "Instruction ADR not yet implemented."
	011 Move W11, [X9]
	012 Add X10, X10, X11
	013 CallNoReturn X10
	014 Move X0, [X19+200]
	015 Compare X0, 0
	016 JumpIfEqual {95}
	017 Move X8, [X0]
	018 Move X9, [X8+472]
	019 Move X1, [X8+480]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X0, [X19+472]
	022 Compare X0, 0
	023 JumpIfEqual {95}
	024 Call RedGreenView.PlayBackToStandSound, X0
	025 Move X0, [X19+200]
	026 Compare X0, 0
	027 JumpIfEqual {95}
	028 Move X8, [X0]
	029 Move X9, [X8+520]
	030 Move X1, [X8+528]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X0, [X19+472]
	033 Compare X0, 0
	034 JumpIfEqual {95}
	035 Call RedGreenView.PlayAnticipationSound, X0
	036 Move X0, [X19+200]
	037 Compare X0, 0
	038 JumpIfEqual {95}
	039 Move X8, [X0]
	040 Move X9, [X8+504]
	041 Move X1, [X8+512]
	042 Move X0, [X19+200]
	043 Compare X0, 0
	044 JumpIfEqual {95}
	045 Move X8, [X0]
	046 Move X9, [X8+488]
	047 Move X1, [X8+496]
	048 Move S0, 1
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Move X20, [X19+472]
	051 Move X0, X19
	052 Call RedGreenController.get_phase, X0
	053 Compare X20, 0
	054 JumpIfEqual {95}
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CSET not yet implemented."
	057 Move X0, X20
	058 Call RedGreenView.PlayRunningSound, X0, X1
	059 Move X20, [X19+472]
	060 Move X0, X19
	061 Call RedGreenController.get_phase, X0
	062 Compare X20, 0
	063 JumpIfEqual {95}
	064 NotImplemented "Instruction CMP not yet implemented."
	065 NotImplemented "Instruction CSET not yet implemented."
	066 Move X0, X20
	067 Call RedGreenView.PlayWalkingSound, X0, X1
	068 Move X20, [X19+472]
	069 Move X0, X19
	070 Call RedGreenController.get_phase, X0
	071 Compare X20, 0
	072 JumpIfEqual {95}
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CSET not yet implemented."
	075 Move X0, X20
	076 Move [X20+296], W1
	077 Call RedGreenView.PlaySawSound, X0, X1
	078 Move X20, [X19+472]
	079 Move X0, X19
	080 Call RedGreenController.get_phase, X0
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move W1, 1
	083 Move X0, X19
	084 Call RedGreenController.get_phase, X0
	085 NotImplemented "Instruction CMP not yet implemented."
	086 NotImplemented "Instruction CSET not yet implemented."
	087 Compare X20, 0
	088 JumpIfEqual {95}
	089 Move X0, X20
	090 Move X20, [X31+16]
	091 Move X19, [X31+24]
	092 Move X30, [X31+32]
	093 Call RedGreenView.SetLightEvil, X0, X1
	094 Return 
	095 Call 0x1C17F20

Method: System.Void Setup()

Disassembly:
	0x01DFEE0C MOV V8.16B, V2.16B
	0x01DFEE10 MOV X1, X23
	0x01DFEE14 BL 0x2AA528C
	0x01DFEE18 LDR X24, [X19 + 0x1E0]
	0x01DFEE1C TBZ X0, 0x0, 0x1DFF074
	0x01DFEE20 CBZ X24, 0x1DFF198
	0x01DFEE24 LDR X2, [X29]
	0x01DFEE28 MOV X0, X24
	0x01DFEE2C MOV X1, X23
	0x01DFEE30 BL 0x2AA5018
	0x01DFEE34 CBZ X0, 0x1DFF1A0
	0x01DFEE38 LDR W8, [X0 + 0x18]
	0x01DFEE3C CBZ W8, 0x1DFF194
	0x01DFEE40 CMP W8, 0x1
	0x01DFEE44 B.EQ 0x1DFF19C
	0x01DFEE48 CMP W8, 0x2
	0x01DFEE4C B.LS 0x1DFF188
	0x01DFEE50 LDP S0, S1, [X0 + 0x20]
	0x01DFEE54 LDR V3, [X31 + 0x14]
	0x01DFEE58 LDR V2, [X0 + 0x28]
	0x01DFEE5C FSUB S1, S9, S1
	0x01DFEE60 FSUB S0, S3, S0
	0x01DFEE64 LDR V3, [X31 + 0x10]
	0x01DFEE68 FSUB S2, S10, S2
	0x01DFEE6C FMUL S0, S0, S0
	0x01DFEE70 FMUL S1, S1, S1
	0x01DFEE74 FADD S0, S0, S1
	0x01DFEE78 FMUL S1, S2, S2
	0x01DFEE7C FADD S0, S0, S1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.Setup, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {37}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {32}
	015 Move X0, X19
	016 Move X1, X31
	017 Call Component.get_transform, X0
	018 Compare X0, 0
	019 JumpIfEqual {37}
	020 Move X1, X31
	021 Call Transform.get_position, X0
	022 Move X0, X19
	023 Call RedGreenController.set_spawnedPosition, X0, X1
	024 Move X8, [X19]
	025 Move X0, X19
	026 Move X1, X31
	027 Move X9, [X8+952]
	028 Move X2, [X8+960]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move X0, X19
	031 Call RedGreenController.SetStanding, X0
	032 Move X0, X19
	033 Move X30, [X31+16]
	034 Move X19, [X31+24]
	035 Call RedGreenController.HandlePhaseChanged, X0
	036 Return 
	037 Call 0x1C17F20

Method: System.Void HandleRevive()

Disassembly:
	0x01DFEF80 LDR W8, [X0 + 0xE0]
	0x01DFEF84 CBNZ W8, 0x1DFEF8C
	0x01DFEF88 BL 0x1C16DFC
	0x01DFEF8C LDR V3, [X31 + 0x14]
	0x01DFEF90 FADD S0, S8, S15
	0x01DFEF94 FADD S1, S11, S14
	0x01DFEF98 FADD S2, S12, S13
	0x01DFEF9C FSUB S3, S3, S0
	0x01DFEFA0 FSUB S4, S9, S1
	0x01DFEFA4 FSUB S5, S10, S2
	0x01DFEFA8 FMUL S6, S3, S3
	0x01DFEFAC FMUL S7, S4, S4
	0x01DFEFB0 FMUL S16, S5, S5
	0x01DFEFB4 FADD S6, S6, S7
	0x01DFEFB8 FADD S6, S6, S16
	0x01DFEFBC FSQRT S6, S6
	0x01DFEFC0 FDIV S3, S3, S6
	0x01DFEFC4 FDIV S4, S4, S6
	0x01DFEFC8 FDIV S5, S5, S6
	0x01DFEFCC MOV X0, X31
	0x01DFEFD0 BL 0x1DF7F84

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleRevive, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {29}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {26}
	015 Move X8, [X19]
	016 Move X0, X19
	017 Move X1, X31
	018 Move X9, [X8+952]
	019 Move X2, [X8+960]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X0, X19
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Call RedGreenController.SetStanding, X0
	025 Return 
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Return 
	029 Call 0x1C17F20

Method: System.Void HandleDie()

Disassembly:
	0x01DFEFD4 TBNZ X0, 0x0, 0x1DFF10C
	0x01DFEFD8 LDR X24, [X19 + 0x1E0]
	0x01DFEFDC LDR X0, [X20]
	0x01DFEFE0 MOVZ W1, 0x3
	0x01DFEFE4 BL 0x1C16D6C
	0x01DFEFE8 MOV X25, X0
	0x01DFEFEC LDR X0, [X23 + 0x90]
	0x01DFEFF0 CBZ X0, 0x1DFF1C4
	0x01DFEFF4 MOV X1, X31
	0x01DFEFF8 BL 0x3C3F58C
	0x01DFEFFC CBZ X25, 0x1DFF1C0
	0x01DFF000 LDR W8, [X25 + 0x18]
	0x01DFF004 CBZ W8, 0x1DFF1BC
	0x01DFF008 STP S0, S1, [X25 + 0x20]
	0x01DFF00C STR S2, [X25 + 0x28]
	0x01DFF010 LDR X0, [X23 + 0x98]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleDie, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {24}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {21}
	015 Move W1, 5
	016 Move X0, X19
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call RedGreenController.set_phase, X0, X1
	020 Return 
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 
	024 Call 0x1C17F20

Method: System.Void Initialize()

Disassembly:
	0x01DFEE80 FCMP S0, S3
	0x01DFEE84 B.GT 0x1DFEEE8
	0x01DFEE88 LDP S0, S1, [X0 + 0x2C]
	0x01DFEE8C LDR V2, [X0 + 0x34]
	0x01DFEE90 FSUB S0, S11, S0

ISIL:
	001 Move X8, [X0]
	002 Move X1, X31
	003 Move X3, [X8+952]
	004 Move X2, [X8+960]
	005 CallNoReturn X3

Method: System.Void UpdateMonsterBehaviour()

Disassembly:
	0x01DFF014 CBZ X0, 0x1DFF1B8
	0x01DFF018 MOV X1, X31
	0x01DFF01C BL 0x3C3F58C
	0x01DFF020 LDR W8, [X25 + 0x18]
	0x01DFF024 CMP W8, 0x1
	0x01DFF028 B.LS 0x1DFF1C8
	0x01DFF02C STP S0, S1, [X25 + 0x2C]
	0x01DFF030 STR S2, [X25 + 0x34]
	0x01DFF034 LDR X0, [X23 + 0xA0]
	0x01DFF038 CBZ X0, 0x1DFF1D4
	0x01DFF03C MOV X1, X31
	0x01DFF040 BL 0x3C3F58C
	0x01DFF044 LDR W8, [X25 + 0x18]
	0x01DFF048 CMP W8, 0x2
	0x01DFF04C B.LS 0x1DFF1CC
	0x01DFF050 STP S0, S1, [X25 + 0x38]
	0x01DFF054 STR S2, [X25 + 0x40]
	0x01DFF058 CBZ X24, 0x1DFF1D0
	0x01DFF05C LDR X3, [X21]
	0x01DFF060 MOV X0, X24
	0x01DFF064 MOV X1, X23
	0x01DFF068 MOV X2, X25
	0x01DFF06C BL 0x2AA5084
	0x01DFF070 B 0x1DFED88
	0x01DFF074 LDR X0, [X20]
	0x01DFF078 MOVZ W1, 0x3
	0x01DFF07C BL 0x1C16D6C
	0x01DFF080 MOV X25, X0
	0x01DFF084 LDR X0, [X23 + 0x90]
	0x01DFF088 CBZ X0, 0x1DFF1B4
	0x01DFF08C MOV X1, X31
	0x01DFF090 BL 0x3C3F58C
	0x01DFF094 CBZ X25, 0x1DFF1B0
	0x01DFF098 LDR W8, [X25 + 0x18]
	0x01DFF09C CBZ W8, 0x1DFF1AC
	0x01DFF0A0 STP S0, S1, [X25 + 0x20]
	0x01DFF0A4 STR S2, [X25 + 0x28]
	0x01DFF0A8 LDR X0, [X23 + 0x98]
	0x01DFF0AC CBZ X0, 0x1DFF1A8
	0x01DFF0B0 MOV X1, X31
	0x01DFF0B4 BL 0x3C3F58C
	0x01DFF0B8 LDR W8, [X25 + 0x18]
	0x01DFF0BC CMP W8, 0x1
	0x01DFF0C0 B.LS 0x1DFF184
	0x01DFF0C4 STP S0, S1, [X25 + 0x2C]
	0x01DFF0C8 STR S2, [X25 + 0x34]
	0x01DFF0CC LDR X0, [X23 + 0xA0]
	0x01DFF0D0 CBZ X0, 0x1DFF1A4
	0x01DFF0D4 MOV X1, X31
	0x01DFF0D8 BL 0x3C3F58C
	0x01DFF0DC LDR W8, [X25 + 0x18]
	0x01DFF0E0 CMP W8, 0x2
	0x01DFF0E4 B.LS 0x1DFF18C
	0x01DFF0E8 STP S0, S1, [X25 + 0x38]
	0x01DFF0EC STR S2, [X25 + 0x40]
	0x01DFF0F0 CBZ X24, 0x1DFF190
	0x01DFF0F4 LDR X3, [X22]
	0x01DFF0F8 MOV X0, X24
	0x01DFF0FC MOV X1, X23
	0x01DFF100 MOV X2, X25
	0x01DFF104 BL 0x2AA5098
	0x01DFF108 B 0x1DFED88
	0x01DFF10C LDR W8, [X31 + 0xC]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x25DA000
	006 Move W8, [X20+3398]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x22FB000
	013 Move X0, [X0+1592]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3398], W8
	017 Move X0, X19
	018 Move X1, X31
	019 Call MobController.UpdateMonsterBehaviour, X0
	020 Move X0, X19
	021 Call RedGreenController.get_phase, X0
	022 Subtract W8, W0, 1
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X9, -19730432
	025 Add X9, X9, 2436
	026 NotImplemented "Instruction ADR not yet implemented."
	027 Move W11, [X9]
	028 Add X10, X10, X11
	029 CallNoReturn X10
	030 Move X0, X19
	031 Call RedGreenController.UpdateStanding, X0
	032 Move X0, X19
	033 Call RedGreenController.UpdateAnticipating, X0
	034 Move X0, X19
	035 Call RedGreenController.UpdateCharging, X0
	036 Move X0, X19
	037 Call RedGreenController.UpdateBackToPosition, X0
	038 Move X0, X31
	039 Call GameManager.get_isDebug
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {67}
	044 Move X20, [X19+408]
	045 Compare X20, 0
	046 JumpIfEqual {67}
	047 Move X0, X19
	048 Call RedGreenController.get_phase, X0
	049 Move X8, 0x22FB000
	050 Move X8, [X8+1592]
	051 Move TEMP, 0
	052 Not TEMP
	053 Move X9, TEMP
	054 Move [X31+24], W0
	055 Add X0, X31, 8
	056 Move X8, [X8]
	057 Move X1, X31
	058 Move [X31+8], X8
	059 Move [X31+16], X9
	060 Call Enum.ToString, X0
	061 Move X8, [X20+64]
	062 Move X9, [X20+24]
	063 Move X2, [X20+40]
	064 Move X1, X0
	065 Move X0, X8
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Move X20, [X31+48]
	068 Move X19, [X31+56]
	069 Move X30, [X31+32]
	070 Add X31, X31, 64
	071 Return 

Method: System.Void SetStanding()

Disassembly:
	0x01DFEE94 FSUB S1, S12, S1
	0x01DFEE98 FSUB S2, S13, S2
	0x01DFEE9C FMUL S0, S0, S0
	0x01DFEEA0 FMUL S1, S1, S1
	0x01DFEEA4 FADD S0, S0, S1
	0x01DFEEA8 FMUL S1, S2, S2
	0x01DFEEAC FADD S0, S0, S1
	0x01DFEEB0 FCMP S0, S3
	0x01DFEEB4 B.GT 0x1DFEEE8
	0x01DFEEB8 LDP S0, S1, [X0 + 0x38]
	0x01DFEEBC LDR V2, [X0 + 0x40]
	0x01DFEEC0 FSUB S0, S14, S0
	0x01DFEEC4 FSUB S1, S15, S1
	0x01DFEEC8 FSUB S2, S8, S2
	0x01DFEECC FMUL S0, S0, S0
	0x01DFEED0 FMUL S1, S1, S1
	0x01DFEED4 FADD S0, S0, S1
	0x01DFEED8 FMUL S1, S2, S2
	0x01DFEEDC FADD S0, S0, S1
	0x01DFEEE0 FCMP S0, S3
	0x01DFEEE4 B.LE 0x1DFEFD8
	0x01DFEEE8 LDR X0, [X19 + 0xD0]
	0x01DFEEEC CBZ X0, 0x1DFF1DC
	0x01DFEEF0 MOV X1, X31
	0x01DFEEF4 BL 0x3C3F58C
	0x01DFEEF8 ADRP X8, 0x25DA000
	0x01DFEEFC LDRB W8, [X8 + 0x786]
	0x01DFEF00 MOV V8.16B, V0.16B
	0x01DFEF04 MOV V11.16B, V1.16B
	0x01DFEF08 MOV V12.16B, V2.16B
	0x01DFEF0C CBNZ W8, 0x1DFEF28
	0x01DFEF10 ADRP X0, 0x22F5000
	0x01DFEF14 LDR X0, [X0 + 0x5A0]
	0x01DFEF18 BL 0x1C16CF4
	0x01DFEF1C ADRP X8, 0x25DA000
	0x01DFEF20 MOVZ W9, 0x1
	0x01DFEF24 STRB W9, [X8 + 0x786]
	0x01DFEF28 ADRP X8, 0x22F5000
	0x01DFEF2C LDR X8, [X8 + 0x5A0]
	0x01DFEF30 ADRP X9, 0x25DA000
	0x01DFEF34 LDRB W9, [X9 + 0x784]
	0x01DFEF38 LDR X8, [X8]
	0x01DFEF3C LDR X8, [X8 + 0xB8]
	0x01DFEF40 LDP S15, S14, [X8 + 0x18]
	0x01DFEF44 LDR V13, [X8 + 0x20]
	0x01DFEF48 CBNZ W9, 0x1DFEF64
	0x01DFEF4C ADRP X0, 0x22F5000
	0x01DFEF50 LDR X0, [X0 + 0x5A8]
	0x01DFEF54 BL 0x1C16CF4
	0x01DFEF58 MOVZ W8, 0x1
	0x01DFEF5C ADRP X9, 0x25DA000
	0x01DFEF60 STRB W8, [X9 + 0x784]
	0x01DFEF64 ADRP X8, 0x22F5000
	0x01DFEF68 LDR X8, [X8 + 0x5A8]
	0x01DFEF6C LDR X0, [X8]
	0x01DFEF70 LDR W8, [X0 + 0xE0]
	0x01DFEF74 CBNZ W8, 0x1DFEF7C
	0x01DFEF78 BL 0x1C16DFC
	0x01DFEF7C LDR X0, [X26]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25DB000
	005 Move W8, [X20+3399]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22FC000
	012 Move X0, [X0+1584]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3399], W8
	016 Move W1, 1
	017 Move X0, X19
	018 Call RedGreenController.set_phase, X0, X1
	019 Move X9, [X19+192]
	020 Compare X9, 0
	021 JumpIfEqual {72}
	022 Move X8, [X9+48]
	023 Compare X8, 0
	024 JumpIfEqual {72}
	025 Move W10, [X8+24]
	026 Compare W10, 0
	027 JumpIfEqual {73}
	028 Move X10, [X9+88]
	029 Compare X10, 0
	030 JumpIfEqual {72}
	031 Move W11, [X10+24]
	032 Compare W11, 0
	033 JumpIfEqual {73}
	034 Move X9, [X9+96]
	035 Compare X9, 0
	036 JumpIfEqual {72}
	037 Move W11, [X9+24]
	038 Compare W11, 0
	039 JumpIfEqual {73}
	040 Move X11, [X19]
	041 Move V0, [X8+32]
	042 Move V1, [X10+32]
	043 Move V2, [X9+32]
	044 Move X8, [X11+712]
	045 Move X2, [X11+720]
	046 Move W1, 1
	047 Move X0, X19
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X0, [X19+480]
	050 Compare X0, 0
	051 JumpIfEqual {72}
	052 Move X8, 0x22FC000
	053 Move X8, [X8+1584]
	054 Move X1, [X8]
	055 Call Dictionary`2<Object, Object>.Clear, X0
	056 Move W1, 1
	057 Move X0, X19
	058 Call RedGreenController.set_isGreen, X0, X1
	059 Move S0, W31
	060 Move X0, X19
	061 Call RedGreenController.set_switchLightTimer, X0, V0
	062 Move V0, [X19+440]
	063 Move V1, [X19+444]
	064 Move X0, X31
	065 Call Random.Range, V0, V1
	066 Move X0, X19
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Call RedGreenController.set_switchLightInterval, X0, V0
	071 Return 
	072 Call 0x1C17F20
	073 Call 0x1C17F28

Method: System.Void UpdateStanding()

Disassembly:
	0x01DFF110 FMOV S0, W31
	0x01DFF114 FMOV S1, 0.5
	0x01DFF118 ANDS W31, W8, 0x1
	0x01DFF11C FCSEL S0, S1, S0, NE
	0x01DFF120 MOV X0, X19
	0x01DFF124 MOV X1, X23
	0x01DFF128 BL 0x1DFF30C
	0x01DFF12C ADRP X8, 0x22F9000
	0x01DFF130 LDR X8, [X8 + 0xC20]
	0x01DFF134 ADD X0, X31, 0x30
	0x01DFF138 LDR X1, [X8]
	0x01DFF13C BL 0x2BC434C
	0x01DFF140 LDP X20, X19, [X31 + 0xE0]
	0x01DFF144 LDP X22, X21, [X31 + 0xD0]
	0x01DFF148 LDP X24, X23, [X31 + 0xC0]
	0x01DFF14C LDP X26, X25, [X31 + 0xB0]
	0x01DFF150 LDP X28, X27, [X31 + 0xA0]
	0x01DFF154 LDP X29, X30, [X31 + 0x90]
	0x01DFF158 LDP D9, D8, [X31 + 0x80]
	0x01DFF15C LDP D11, D10, [X31 + 0x70]
	0x01DFF160 LDP D13, D12, [X31 + 0x60]
	0x01DFF164 LDP D15, D14, [X31 + 0x50]
	0x01DFF168 ADD X31, X31, 0xF0
	0x01DFF16C RET
	0x01DFF170 BL 0x1C16F20
	0x01DFF174 BL 0x1C16F20
	0x01DFF178 BL 0x1C16F20
	0x01DFF17C BL 0x1C16F20
	0x01DFF180 BL 0x1C16F20
	0x01DFF184 BL 0x1C16F28
	0x01DFF188 BL 0x1C16F28
	0x01DFF18C BL 0x1C16F28
	0x01DFF190 BL 0x1C16F20
	0x01DFF194 BL 0x1C16F28
	0x01DFF198 BL 0x1C16F20
	0x01DFF19C BL 0x1C16F28
	0x01DFF1A0 BL 0x1C16F20
	0x01DFF1A4 BL 0x1C16F20
	0x01DFF1A8 BL 0x1C16F20
	0x01DFF1AC BL 0x1C16F28
	0x01DFF1B0 BL 0x1C16F20
	0x01DFF1B4 BL 0x1C16F20
	0x01DFF1B8 BL 0x1C16F20
	0x01DFF1BC BL 0x1C16F28
	0x01DFF1C0 BL 0x1C16F20
	0x01DFF1C4 BL 0x1C16F20
	0x01DFF1C8 BL 0x1C16F28
	0x01DFF1CC BL 0x1C16F28
	0x01DFF1D0 BL 0x1C16F20
	0x01DFF1D4 BL 0x1C16F20
	0x01DFF1D8 BL 0x1C16F20
	0x01DFF1DC BL 0x1C16F20
	0x01DFF1E0 BL 0x1C16F28
	0x01DFF1E4 B 0x1DFF298
	0x01DFF1E8 B 0x1DFF298
	0x01DFF1EC B 0x1DFF298
	0x01DFF1F0 B 0x1DFF298
	0x01DFF1F4 B 0x1DFF298
	0x01DFF1F8 B 0x1DFF298
	0x01DFF1FC B 0x1DFF298
	0x01DFF200 B 0x1DFF298
	0x01DFF204 B 0x1DFF298
	0x01DFF208 B 0x1DFF298
	0x01DFF20C B 0x1DFF298
	0x01DFF210 B 0x1DFF298
	0x01DFF214 B 0x1DFF298
	0x01DFF218 B 0x1DFF298
	0x01DFF21C B 0x1DFF298
	0x01DFF220 B 0x1DFF298
	0x01DFF224 B 0x1DFF298
	0x01DFF228 B 0x1DFF298
	0x01DFF22C B 0x1DFF298
	0x01DFF230 B 0x1DFF298
	0x01DFF234 B 0x1DFF298
	0x01DFF238 B 0x1DFF298
	0x01DFF23C B 0x1DFF298
	0x01DFF240 B 0x1DFF298
	0x01DFF244 B 0x1DFF298
	0x01DFF248 B 0x1DFF298
	0x01DFF24C B 0x1DFF298
	0x01DFF250 B 0x1DFF298
	0x01DFF254 B 0x1DFF298
	0x01DFF258 B 0x1DFF298
	0x01DFF25C B 0x1DFF298
	0x01DFF260 B 0x1DFF298
	0x01DFF264 B 0x1DFF298

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25DA000
	006 Move W8, [X20+3400]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x22FB000
	013 Move X0, [X0+1584]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3400], W8
	017 Move X0, X19
	018 Call RedGreenController.get_switchLightTimer, X0
	019 Move X0, X19
	020 Move X1, X31
	021 Move V8, V0
	022 Call MobController.get_deltaTime, X0
	023 Add S0, S8, S0
	024 Move X0, X19
	025 Call RedGreenController.set_switchLightTimer, X0, V0
	026 Move X0, X19
	027 Call RedGreenController.get_switchLightTimer, X0
	028 Move X0, X19
	029 Move V8, V0
	030 Call RedGreenController.get_switchLightInterval, X0
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 Move X0, X19
	033 Call RedGreenController.get_isGreen, X0
	034 NotImplemented "Instruction ORN not yet implemented."
	035 And W1, W8, 1
	036 Move X0, X19
	037 Call RedGreenController.set_isGreen, X0, X1
	038 Move X0, X19
	039 Call RedGreenController.get_switchLightTimer, X0
	040 Move X0, X19
	041 Move V8, V0
	042 Call RedGreenController.get_switchLightInterval, X0
	043 Subtract S0, S8, S0
	044 Move X0, X19
	045 Call RedGreenController.set_switchLightTimer, X0, V0
	046 Move X0, X19
	047 Call RedGreenController.get_isGreen, X0
	048 And W31, W0, 1
	049 Move W8, 452
	050 Move W9, 444
	051 Move W10, 448
	052 Move W11, 440
	053 NotImplemented "Instruction CSEL not yet implemented."
	054 NotImplemented "Instruction CSEL not yet implemented."
	055 Move V0, [X19]
	056 Move V1, [X19]
	057 Move X0, X31
	058 Call Random.Range, V0, V1
	059 Move X0, X19
	060 Call RedGreenController.set_switchLightInterval, X0, V0
	061 Move X0, X19
	062 Call RedGreenController.get_isGreen, X0
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfEqual {74}
	067 Move X0, [X19+480]
	068 Compare X0, 0
	069 JumpIfEqual {98}
	070 Move X8, 0x22FB000
	071 Move X8, [X8+1584]
	072 Move X1, [X8]
	073 Call Dictionary`2<Object, Object>.Clear, X0
	074 Move X0, X19
	075 Call RedGreenController.get_isGreen, X0
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfEqual {93}
	080 Move X0, X19
	081 Call RedGreenController.get_switchLightTimer, X0
	082 Move X8, -20004864
	083 Move V1, [X8+276]
	084 NotImplemented "Instruction FCMP not yet implemented."
	085 Move X0, X19
	086 Move X20, [X31+16]
	087 Move X19, [X31+24]
	088 Move X30, [X31+8]
	089 Move W1, W31
	090 Move V8, [X31+32]
	091 Call RedGreenController.UpdateDetectingPlayer, X0, X1
	092 Return 
	093 Move X20, [X31+16]
	094 Move X19, [X31+24]
	095 Move X30, [X31+8]
	096 Move V8, [X31+32]
	097 Return 
	098 Call 0x1C17F20

Method: System.Void UpdateDetectingPlayer(System.Boolean shorterAnticipating = False)

Disassembly:
	0x01DFFBE8 CBZ X8, 0x1DFFC90
	0x01DFFBEC ADRP X20, 0x22F4000
	0x01DFFBF0 LDR X20, [X20 + 0x5A0]
	0x01DFFBF4 MOV X22, X31
	0x01DFFBF8 ADRP X23, 0x25D9000
	0x01DFFBFC MOVZ W24, 0x1
	0x01DFFC00 LDR W9, [X8 + 0x18]
	0x01DFFC04 CMP W22, W9
	0x01DFFC08 B.GE 0x1DFFC94
	0x01DFFC0C CMP W22, W9
	0x01DFFC10 B.CS 0x1DFFCB0
	0x01DFFC14 ADD X8, X8, X22, 0x3, LSL
	0x01DFFC18 LDRB W9, [X23 + 0x786]
	0x01DFFC1C LDR X21, [X8 + 0x20]
	0x01DFFC20 CBNZ W9, 0x1DFFC30
	0x01DFFC24 MOV X0, X20
	0x01DFFC28 BL 0x1C16CF4
	0x01DFFC2C STRB W24, [X23 + 0x786]
	0x01DFFC30 LDR X8, [X19 + 0x130]
	0x01DFFC34 CBZ X8, 0x1DFFC90
	0x01DFFC38 LDR W9, [X8 + 0x18]
	0x01DFFC3C CMP W22, W9
	0x01DFFC40 B.CS 0x1DFFCB0
	0x01DFFC44 LDR X9, [X20]
	0x01DFFC48 ADD X8, X8, X22, 0x2, LSL
	0x01DFFC4C LDR V11, [X8 + 0x20]
	0x01DFFC50 MOV X0, X31
	0x01DFFC54 LDR X9, [X9 + 0xB8]
	0x01DFFC58 LDP S10, S9, [X9 + 0x18]
	0x01DFFC5C LDR V8, [X9 + 0x20]
	0x01DFFC60 BL 0x3C3C714
	0x01DFFC64 CBZ X21, 0x1DFFC90
	0x01DFFC68 FMUL S3, S11, S0
	0x01DFFC6C MOV X0, X21
	0x01DFFC70 MOV V0.16B, V10.16B
	0x01DFFC74 MOV V1.16B, V9.16B
	0x01DFFC78 MOV V2.16B, V8.16B
	0x01DFFC7C MOV X1, X31
	0x01DFFC80 BL 0x3C40678
	0x01DFFC84 LDR X8, [X19 + 0x120]
	0x01DFFC88 ADD X22, X22, 0x1
	0x01DFFC8C CBNZ X8, 0x1DFFC00
	0x01DFFC90 BL 0x1C16F20
	0x01DFFC94 LDP X20, X19, [X31 + 0x50]
	0x01DFFC98 LDP X22, X21, [X31 + 0x40]
	0x01DFFC9C LDP X24, X23, [X31 + 0x30]
	0x01DFFCA0 LDR X30, [X31 + 0x20]
	0x01DFFCA4 LDP D9, D8, [X31 + 0x10]
	0x01DFFCA8 LDP D11, D10, [X31], #0x60
	0x01DFFCAC RET
	0x01DFFCB0 BL 0x1C16F28
	0x01DFFCB4 STP X30, X23, [X31 - 0x30]!
	0x01DFFCB8 STP X22, X21, [X31 + 0x10]
	0x01DFFCBC STP X20, X19, [X31 + 0x20]
	0x01DFFCC0 ADRP X23, 0x25D9000
	0x01DFFCC4 ADRP X22, 0x22F4000
	0x01DFFCC8 ADRP X20, 0x22FA000
	0x01DFFCCC ADRP X21, 0x22F9000
	0x01DFFCD0 LDRB W8, [X23 + 0xD53]
	0x01DFFCD4 LDR X22, [X22 + 0x638]
	0x01DFFCD8 LDR X20, [X20 + 0x678]
	0x01DFFCDC LDR X21, [X21 + 0xC88]
	0x01DFFCE0 MOV X19, X0
	0x01DFFCE4 TBNZ X8, 0x0, 0x1DFFD14
	0x01DFFCE8 ADRP X0, 0x22F9000
	0x01DFFCEC LDR X0, [X0 + 0xC88]
	0x01DFFCF0 BL 0x1C16CF4
	0x01DFFCF4 ADRP X0, 0x22F4000
	0x01DFFCF8 LDR X0, [X0 + 0x638]
	0x01DFFCFC BL 0x1C16CF4
	0x01DFFD00 ADRP X0, 0x22FA000
	0x01DFFD04 LDR X0, [X0 + 0x678]
	0x01DFFD08 BL 0x1C16CF4
	0x01DFFD0C MOVZ W8, 0x1
	0x01DFFD10 STRB W8, [X23 + 0xD53]
	0x01DFFD14 ADRP X8, 0xFFFFFFFFFECEC000
	0x01DFFD18 ADRP X9, 0xFFFFFFFFFECED000
	0x01DFFD1C LDR V0, [X8 + 0x2D]
	0x01DFFD20 LDR V1, [X9 + 0x79]
	0x01DFFD24 MOVZ W1, 0x8
	0x01DFFD28 STUR V0, [X19 + 0xAC]
	0x01DFFD2C STUR V1, [X19 + 0xBC]
	0x01DFFD30 LDR X0, [X22]
	0x01DFFD34 BL 0x1C16D6C
	0x01DFFD38 LDR X1, [X20]
	0x01DFFD3C MOV X2, X31
	0x01DFFD40 MOV X20, X0
	0x01DFFD44 BL 0x32C5BD8
	0x01DFFD48 STR X20, [X19 + 0x130]
	0x01DFFD4C LDR X0, [X21]
	0x01DFFD50 LDR W8, [X0 + 0xE0]
	0x01DFFD54 CBNZ W8, 0x1DFFD5C
	0x01DFFD58 BL 0x1C16DFC
	0x01DFFD5C MOV X0, X19
	0x01DFFD60 LDP X20, X19, [X31 + 0x20]
	0x01DFFD64 LDP X22, X21, [X31 + 0x10]
	0x01DFFD68 MOV X1, X31
	0x01DFFD6C LDP X30, X23, [X31], #0x30
	0x01DFFD70 B 0x1DE7994
	0x01DFFD74 STR X30, [X31 - 0x30]!
	0x01DFFD78 STP X22, X21, [X31 + 0x10]
	0x01DFFD7C STP X20, X19, [X31 + 0x20]
	0x01DFFD80 ADRP X21, 0x25D9000
	0x01DFFD84 ADRP X22, 0x22FA000
	0x01DFFD88 ADRP X19, 0x22FA000
	0x01DFFD8C ADRP X20, 0x22FA000
	0x01DFFD90 LDRB W8, [X21 + 0xD54]
	0x01DFFD94 LDR X22, [X22 + 0x680]
	0x01DFFD98 LDR X19, [X19 + 0x628]
	0x01DFFD9C LDR X20, [X20 + 0x688]
	0x01DFFDA0 TBNZ X8, 0x0, 0x1DFFDD0
	0x01DFFDA4 ADRP X0, 0x22FA000
	0x01DFFDA8 LDR X0, [X0 + 0x628]
	0x01DFFDAC BL 0x1C16CF4
	0x01DFFDB0 ADRP X0, 0x22FA000
	0x01DFFDB4 LDR X0, [X0 + 0x680]
	0x01DFFDB8 BL 0x1C16CF4
	0x01DFFDBC ADRP X0, 0x22FA000
	0x01DFFDC0 LDR X0, [X0 + 0x688]
	0x01DFFDC4 BL 0x1C16CF4
	0x01DFFDC8 MOVZ W8, 0x1
	0x01DFFDCC STRB W8, [X21 + 0xD54]
	0x01DFFDD0 LDR X0, [X22]
	0x01DFFDD4 MOV X1, X31
	0x01DFFDD8 BL 0x3C124EC
	0x01DFFDDC LDR X8, [X19]
	0x01DFFDE0 MOV X1, X31
	0x01DFFDE4 LDR X8, [X8 + 0xB8]
	0x01DFFDE8 STR W0, [X8]
	0x01DFFDEC LDR X0, [X20]
	0x01DFFDF0 BL 0x3C124EC
	0x01DFFDF4 LDR X8, [X19]
	0x01DFFDF8 LDP X20, X19, [X31 + 0x20]
	0x01DFFDFC LDP X22, X21, [X31 + 0x10]
	0x01DFFE00 LDR X8, [X8 + 0xB8]
	0x01DFFE04 STR W0, [X8 + 0x4]
	0x01DFFE08 LDR X30, [X31], #0x30
	0x01DFFE0C RET
	0x01DFFE10 SUB X31, X31, 0x80
	0x01DFFE14 STP X30, X25, [X31 + 0x40]
	0x01DFFE18 STP X24, X23, [X31 + 0x50]
	0x01DFFE1C STP X22, X21, [X31 + 0x60]
	0x01DFFE20 STP X20, X19, [X31 + 0x70]
	0x01DFFE24 ADRP X20, 0x25D9000
	0x01DFFE28 ADRP X21, 0x22F9000
	0x01DFFE2C LDRB W8, [X20 + 0xD55]
	0x01DFFE30 LDR X21, [X21 + 0xD8]
	0x01DFFE34 MOV X19, X0
	0x01DFFE38 TBNZ X8, 0x0, 0x1DFFED4
	0x01DFFE3C ADRP X0, 0x22FA000
	0x01DFFE40 LDR X0, [X0 + 0x690]
	0x01DFFE44 BL 0x1C16CF4
	0x01DFFE48 ADRP X0, 0x22FA000
	0x01DFFE4C LDR X0, [X0 + 0x698]
	0x01DFFE50 BL 0x1C16CF4
	0x01DFFE54 ADRP X0, 0x22FA000
	0x01DFFE58 LDR X0, [X0 + 0x6A0]
	0x01DFFE5C BL 0x1C16CF4
	0x01DFFE60 ADRP X0, 0x22FA000
	0x01DFFE64 LDR X0, [X0 + 0x6A8]
	0x01DFFE68 BL 0x1C16CF4
	0x01DFFE6C ADRP X0, 0x22FA000
	0x01DFFE70 LDR X0, [X0 + 0x6B0]
	0x01DFFE74 BL 0x1C16CF4
	0x01DFFE78 ADRP X0, 0x22FA000
	0x01DFFE7C LDR X0, [X0 + 0x6B8]
	0x01DFFE80 BL 0x1C16CF4
	0x01DFFE84 ADRP X0, 0x22F4000
	0x01DFFE88 LDR X0, [X0 + 0x598]
	0x01DFFE8C BL 0x1C16CF4
	0x01DFFE90 ADRP X0, 0x22F9000
	0x01DFFE94 LDR X0, [X0 + 0xD8]
	0x01DFFE98 BL 0x1C16CF4
	0x01DFFE9C ADRP X0, 0x22FA000
	0x01DFFEA0 LDR X0, [X0 + 0x6C0]
	0x01DFFEA4 BL 0x1C16CF4
	0x01DFFEA8 ADRP X0, 0x22F4000
	0x01DFFEAC LDR X0, [X0 + 0x6C0]
	0x01DFFEB0 BL 0x1C16CF4
	0x01DFFEB4 ADRP X0, 0x22FA000
	0x01DFFEB8 LDR X0, [X0 + 0x6C8]
	0x01DFFEBC BL 0x1C16CF4
	0x01DFFEC0 ADRP X0, 0x22FA000
	0x01DFFEC4 LDR X0, [X0 + 0x6D0]
	0x01DFFEC8 BL 0x1C16CF4
	0x01DFFECC MOVZ W8, 0x1
	0x01DFFED0 STRB W8, [X20 + 0xD55]
	0x01DFFED4 LDR X0, [X21]
	0x01DFFED8 STP X31, X31, [X31 + 0x20]
	0x01DFFEDC STR X31, [X31 + 0x30]
	0x01DFFEE0 ADRP X22, 0x22F4000
	0x01DFFEE4 LDR W8, [X0 + 0xE0]
	0x01DFFEE8 LDR X22, [X22 + 0x598]
	0x01DFFEEC CBNZ W8, 0x1DFFEF8
	0x01DFFEF0 BL 0x1C16DFC
	0x01DFFEF4 LDR X0, [X21]
	0x01DFFEF8 LDR X8, [X22]
	0x01DFFEFC LDR X9, [X0 + 0xB8]
	0x01DFFF00 LDR W10, [X8 + 0xE0]
	0x01DFFF04 LDR X20, [X9 + 0x18]
	0x01DFFF08 CBNZ W10, 0x1DFFF14
	0x01DFFF0C MOV X0, X8
	0x01DFFF10 BL 0x1C16DFC
	0x01DFFF14 MOV X0, X20
	0x01DFFF18 MOV X1, X31
	0x01DFFF1C MOV X2, X31
	0x01DFFF20 BL 0x3C354F8
	0x01DFFF24 TBZ X0, 0x0, 0x1DFFF5C
	0x01DFFF28 MOV X0, X19
	0x01DFFF2C MOV X1, X31
	0x01DFFF30 BL 0x3C32ECC
	0x01DFFF34 LDR X8, [X22]
	0x01DFFF38 MOV X19, X0
	0x01DFFF3C LDR W9, [X8 + 0xE0]
	0x01DFFF40 CBNZ W9, 0x1DFFF4C
	0x01DFFF44 MOV X0, X8
	0x01DFFF48 BL 0x1C16DFC
	0x01DFFF4C MOV X0, X19
	0x01DFFF50 MOV X1, X31
	0x01DFFF54 BL 0x3C394A8
	0x01DFFF58 B 0x1E00144
	0x01DFFF5C LDR X0, [X21]
	0x01DFFF60 LDR W8, [X0 + 0xE0]
	0x01DFFF64 CBNZ W8, 0x1DFFF70
	0x01DFFF68 BL 0x1C16DFC
	0x01DFFF6C LDR X0, [X21]
	0x01DFFF70 LDR X8, [X0 + 0xB8]
	0x01DFFF74 MOV X0, X31
	0x01DFFF78 STR X19, [X8 + 0x18]
	0x01DFFF7C BL 0x3C4BB34
	0x01DFFF80 CBZ X0, 0x1E00160
	0x01DFFF84 ADRP X8, 0x22FA000
	0x01DFFF88 LDR X8, [X8 + 0x6C8]
	0x01DFFF8C LDR X9, [X0]
	0x01DFFF90 LDR X8, [X8]
	0x01DFFF94 LDRB W11, [X9 + 0x130]
	0x01DFFF98 LDRB W10, [X8 + 0x130]
	0x01DFFF9C CMP W11, W10
	0x01DFFFA0 B.CC 0x1E00160
	0x01DFFFA4 LDR X11, [X9 + 0xC8]
	0x01DFFFA8 ADD X11, X11, X10, 0x3, LSL
	0x01DFFFAC LDUR X11, [X11 - 0x8]
	0x01DFFFB0 CMP X11, X8
	0x01DFFFB4 B.NE 0x1E00160
	0x01DFFFB8 LDR X9, [X9 + 0xC8]
	0x01DFFFBC MOV W1, W31
	0x01DFFFC0 MOV X2, X31
	0x01DFFFC4 ADD X9, X9, X10, 0x3, LSL
	0x01DFFFC8 LDUR X9, [X9 - 0x8]
	0x01DFFFCC CMP X9, X8
	0x01DFFFD0 CSEL X0, X0, X31, EQ
	0x01DFFFD4 BL 0x3A2BDB4
	0x01DFFFD8 ADRP X23, 0x22F4000
	0x01DFFFDC LDR X23, [X23 + 0x6C0]
	0x01DFFFE0 ADRP X9, 0x22FA000
	0x01DFFFE4 MOV X20, X0
	0x01DFFFE8 LDR X8, [X23]
	0x01DFFFEC LDR X9, [X9 + 0x6C0]
	0x01DFFFF0 LDR W10, [X8 + 0xE0]
	0x01DFFFF4 LDR X21, [X9]
	0x01DFFFF8 CBNZ W10, 0x1E00004
	0x01DFFFFC MOV X0, X8
	0x01E00000 BL 0x1C16DFC
	0x01E00004 MOV X0, X21
	0x01E00008 MOV X1, X31
	0x01E0000C BL 0x338C698
	0x01E00010 CBZ X0, 0x1E00160
	0x01E00014 ADRP X8, 0x22F9000
	0x01E00018 LDR X8, [X8 + 0x6D0]
	0x01E0001C MOVZ W2, 0x24
	0x01E00020 MOV X3, X31
	0x01E00024 LDR X1, [X8]
	0x01E00028 BL 0x3397828
	0x01E0002C CBZ X0, 0x1E00160
	0x01E00030 MOV X1, X20
	0x01E00034 MOV X2, X31
	0x01E00038 BL 0x32CFB70
	0x01E0003C CBZ X0, 0x1E00160
	0x01E00040 ADRP X8, 0x22F9000
	0x01E00044 LDR X8, [X8 + 0x6B8]
	0x01E00048 LDR X9, [X0]
	0x01E0004C LDR X8, [X8]
	0x01E00050 LDRB W11, [X9 + 0x130]
	0x01E00054 LDRB W10, [X8 + 0x130]
	0x01E00058 CMP W11, W10
	0x01E0005C B.CC 0x1E00160
	0x01E00060 LDR X11, [X9 + 0xC8]
	0x01E00064 ADD X11, X11, X10, 0x3, LSL
	0x01E00068 LDUR X11, [X11 - 0x8]
	0x01E0006C CMP X11, X8
	0x01E00070 B.NE 0x1E00160
	0x01E00074 LDR X9, [X9 + 0xC8]
	0x01E00078 ADD X9, X9, X10, 0x3, LSL
	0x01E0007C ADRP X10, 0x22F9000
	0x01E00080 LDUR X9, [X9 - 0x8]
	0x01E00084 LDR X10, [X10 + 0x6B0]
	0x01E00088 CMP X9, X8
	0x01E0008C LDR X1, [X10]
	0x01E00090 CSEL X0, X0, X31, EQ
	0x01E00094 ADD X8, X31, 0x8
	0x01E00098 BL 0x301CB58
	0x01E0009C LDUR V0, [X31 + 0x8]
	0x01E000A0 LDR X8, [X31 + 0x18]
	0x01E000A4 ADRP X24, 0x22F9000
	0x01E000A8 LDR X24, [X24 + 0x698]
	0x01E000AC STR V0, [X31 + 0x2]
	0x01E000B0 STR X8, [X31 + 0x30]
	0x01E000B4 ADRP X25, 0x22F9000
	0x01E000B8 LDR X25, [X25 + 0x6A8]
	0x01E000BC LDR X1, [X24]
	0x01E000C0 ADD X0, X31, 0x20
	0x01E000C4 BL 0x2BC4350
	0x01E000C8 TBZ X0, 0x0, 0x1E00124
	0x01E000CC LDR X20, [X31 + 0x30]
	0x01E000D0 CBZ X20, 0x1E0015C
	0x01E000D4 MOV X0, X20
	0x01E000D8 MOV X1, X31
	0x01E000DC BL 0x33BE520
	0x01E000E0 MOV X21, X0
	0x01E000E4 LDR X0, [X23]
	0x01E000E8 LDR X22, [X25]
	0x01E000EC LDR W8, [X0 + 0xE0]
	0x01E000F0 CBNZ W8, 0x1E000F8
	0x01E000F4 BL 0x1C16DFC
	0x01E000F8 MOV X0, X22
	0x01E000FC MOV X1, X31
	0x01E00100 BL 0x338C698
	0x01E00104 MOV X1, X0
	0x01E00108 MOV X0, X21
	0x01E0010C MOV X2, X31
	0x01E00110 BL 0x3395194
	0x01E00114 TBZ X0, 0x0, 0x1E000BC
	0x01E00118 MOVZ W8, 0x1
	0x01E0011C STR X20, [X19 + 0x28]
	0x01E00120 STRB W8, [X19 + 0x30]
	0x01E00124 ADRP X8, 0x22F9000
	0x01E00128 LDR X8, [X8 + 0x690]
	0x01E0012C ADD X0, X31, 0x20
	0x01E00130 LDR X1, [X8]
	0x01E00134 BL 0x2BC434C
	0x01E00138 LDR X8, [X19 + 0x28]
	0x01E0013C CBZ X8, 0x1E00160
	0x01E00140 STRB W31, [X8 + 0x18]
	0x01E00144 LDP X20, X19, [X31 + 0x70]
	0x01E00148 LDP X22, X21, [X31 + 0x60]
	0x01E0014C LDP X24, X23, [X31 + 0x50]
	0x01E00150 LDP X30, X25, [X31 + 0x40]
	0x01E00154 ADD X31, X31, 0x80
	0x01E00158 RET
	0x01E0015C BL 0x1C16F20
	0x01E00160 BL 0x1C16F20
	0x01E00164 B 0x1E00178
	0x01E00168 B 0x1E00178
	0x01E0016C B 0x1E00178
	0x01E00170 B 0x1E00178
	0x01E00174 B 0x1E00178
	0x01E00178 MOV X20, X0
	0x01E0017C CMP W1, 0x1
	0x01E00180 B.NE 0x1E001B4
	0x01E00184 MOV X0, X20
	0x01E00188 BL 0x3EB1AD0
	0x01E0018C LDR X21, [X0]
	0x01E00190 BL 0x3EB1AE0
	0x01E00194 ADRP X8, 0x22F9000
	0x01E00198 LDR X8, [X8 + 0x690]
	0x01E0019C ADD X0, X31, 0x20
	0x01E001A0 LDR X1, [X8]
	0x01E001A4 BL 0x2BC434C
	0x01E001A8 CBZ X21, 0x1E00138
	0x01E001AC MOV X0, X21
	0x01E001B0 BL 0x1C16F18
	0x01E001B4 MOV X21, X31
	0x01E001B8 B 0x1E001C0
	0x01E001BC MOV X20, X0
	0x01E001C0 ADRP X8, 0x22F9000
	0x01E001C4 LDR X8, [X8 + 0x690]
	0x01E001C8 LDR X1, [X8]
	0x01E001CC ADD X0, X31, 0x20
	0x01E001D0 BL 0x2BC434C
	0x01E001D4 CBNZ X21, 0x1E001E0
	0x01E001D8 MOV X0, X20
	0x01E001DC BL 0x1D2C690
	0x01E001E0 MOV X0, X21
	0x01E001E4 BL 0x1C16F18
	0x01E001E8 BL 0x1990590
	0x01E001EC STP X30, X21, [X31 - 0x20]!
	0x01E001F0 STP X20, X19, [X31 + 0x10]
	0x01E001F4 ADRP X20, 0x25D8000
	0x01E001F8 ADRP X21, 0x22F8000
	0x01E001FC LDRB W8, [X20 + 0xD56]
	0x01E00200 LDR X21, [X21 + 0xD8]
	0x01E00204 MOV X19, X0
	0x01E00208 TBNZ X8, 0x0, 0x1E0022C
	0x01E0020C ADRP X0, 0x22F3000
	0x01E00210 LDR X0, [X0 + 0x598]
	0x01E00214 BL 0x1C16CF4
	0x01E00218 ADRP X0, 0x22F8000
	0x01E0021C LDR X0, [X0 + 0xD8]
	0x01E00220 BL 0x1C16CF4
	0x01E00224 MOVZ W8, 0x1
	0x01E00228 STRB W8, [X20 + 0xD56]
	0x01E0022C LDR X0, [X21]
	0x01E00230 ADRP X20, 0x22F3000
	0x01E00234 LDR W8, [X0 + 0xE0]
	0x01E00238 LDR X20, [X20 + 0x598]
	0x01E0023C CBNZ W8, 0x1E00248
	0x01E00240 BL 0x1C16DFC
	0x01E00244 LDR X0, [X21]
	0x01E00248 LDR X8, [X20]
	0x01E0024C LDR X9, [X0 + 0xB8]
	0x01E00250 LDR W10, [X8 + 0xE0]
	0x01E00254 LDR X20, [X9 + 0x18]
	0x01E00258 CBNZ W10, 0x1E00264
	0x01E0025C MOV X0, X8
	0x01E00260 BL 0x1C16DFC
	0x01E00264 MOV X0, X20
	0x01E00268 MOV X1, X19
	0x01E0026C MOV X2, X31
	0x01E00270 BL 0x3C3883C
	0x01E00274 TBZ X0, 0x0, 0x1E00294
	0x01E00278 LDR X0, [X21]
	0x01E0027C LDR W8, [X0 + 0xE0]
	0x01E00280 CBNZ W8, 0x1E0028C
	0x01E00284 BL 0x1C16DFC
	0x01E00288 LDR X0, [X21]
	0x01E0028C LDR X8, [X0 + 0xB8]
	0x01E00290 STR X31, [X8 + 0x18]
	0x01E00294 LDP X20, X19, [X31 + 0x10]
	0x01E00298 LDP X30, X21, [X31], #0x20
	0x01E0029C RET
	0x01E002A0 STR X30, [X31 - 0x20]!
	0x01E002A4 STP X20, X19, [X31 + 0x10]
	0x01E002A8 ADRP X20, 0x25D8000
	0x01E002AC LDRB W8, [X20 + 0xD57]
	0x01E002B0 MOV X19, X0
	0x01E002B4 TBNZ X8, 0x0, 0x1E002CC
	0x01E002B8 ADRP X0, 0x22F9000
	0x01E002BC LDR X0, [X0 + 0x6D8]
	0x01E002C0 BL 0x1C16CF4
	0x01E002C4 MOVZ W8, 0x1
	0x01E002C8 STRB W8, [X20 + 0xD57]
	0x01E002CC LDR X8, [X19 + 0x38]
	0x01E002D0 CBZ X8, 0x1E00360
	0x01E002D4 LDR W8, [X8 + 0x20]
	0x01E002D8 CMP W8, 0x0
	0x01E002DC B.GT 0x1E002F8
	0x01E002E0 LDR V0, [X19 + 0x40]
	0x01E002E4 FCMP S0, 0x0
	0x01E002E8 B.GT 0x1E002F8
	0x01E002EC LDR V0, [X19 + 0x48]
	0x01E002F0 FCMP S0, 0x0
	0x01E002F4 B.LE 0x1E00350
	0x01E002F8 MOVZ W8, 0x1
	0x01E002FC LDR X9, [X19 + 0x28]
	0x01E00300 CBZ X9, 0x1E00360
	0x01E00304 LDRB W10, [X9 + 0x18]
	0x01E00308 CMP W10, 0x0

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+80], D15
	003 Move [X31+88], D14
	004 Move [X31+96], D13
	005 Move [X31+104], D12
	006 Move [X31+112], D11
	007 Move [X31+120], D10
	008 Move [X31+128], D9
	009 Move [X31+136], D8
	010 Move [X31+144], X29
	011 Move [X31+152], X30
	012 Move [X31+160], X28
	013 Move [X31+168], X27
	014 Move [X31+176], X26
	015 Move [X31+184], X25
	016 Move [X31+192], X24
	017 Move [X31+200], X23
	018 Move [X31+208], X22
	019 Move [X31+216], X21
	020 Move [X31+224], X20
	021 Move [X31+232], X19
	022 Move X20, 0x25DA000
	023 Move W8, [X20+3401]
	024 Move W21, W1
	025 Move X19, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {62}
	030 Move X0, 0x22FB000
	031 Move X0, [X0+1600]
	032 Call 0x1C17CF4
	033 Move X0, 0x22FB000
	034 Move X0, [X0+1608]
	035 Call 0x1C17CF4
	036 Move X0, 0x22FB000
	037 Move X0, [X0+1616]
	038 Call 0x1C17CF4
	039 Move X0, 0x22FB000
	040 Move X0, [X0+1624]
	041 Call 0x1C17CF4
	042 Move X0, 0x22FA000
	043 Move X0, [X0+3104]
	044 Call 0x1C17CF4
	045 Move X0, 0x22FA000
	046 Move X0, [X0+3112]
	047 Call 0x1C17CF4
	048 Move X0, 0x22FA000
	049 Move X0, [X0+3120]
	050 Call 0x1C17CF4
	051 Move X0, 0x22FA000
	052 Move X0, [X0+3128]
	053 Call 0x1C17CF4
	054 Move X0, 0x22FA000
	055 Move X0, [X0+3136]
	056 Call 0x1C17CF4
	057 Move X0, 0x22F7000
	058 Move X0, [X0+2480]
	059 Call 0x1C17CF4
	060 Move W8, 1
	061 Move [X20+3401], W8
	062 Move X0, X19
	063 Move [X31+64], X31
	064 Move [X31+72], X31
	065 Move [X31+48], X31
	066 Move [X31+56], X31
	067 Call RedGreenController.get_spawnedPosition, X0
	068 Move X8, [X19+192]
	069 Compare X8, 0
	070 JumpIfEqual {450}
	071 Move X8, [X8+120]
	072 Compare X8, 0
	073 JumpIfEqual {450}
	074 Move W9, [X8+24]
	075 Compare W9, 0
	076 JumpIfEqual {452}
	077 Move X26, 0x22FA000
	078 Move X26, [X26+3136]
	079 Move V11, [X8+32]
	080 Move V8, V0
	081 Move V9, V1
	082 Move X0, [X26]
	083 Move V10, V2
	084 Move W9, [X0+224]
	085 Compare W9, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 Add X1, X31, 72
	089 Move X0, X19
	090 Move V0, V8
	091 Move V1, V9
	092 Move V2, V10
	093 Move V3, V11
	094 Move X2, X31
	095 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {402}
	100 Move X0, [X31+72]
	101 Move [X31+12], W21
	102 Compare X0, 0
	103 JumpIfEqual {450}
	104 Move X8, 0x22FA000
	105 Move X8, [X8+3128]
	106 Move X1, [X8]
	107 Add X8, X31, 24
	108 Call List`1<Object>.GetEnumerator, X0
	109 NotImplemented "Instruction LDUR not yet implemented."
	110 Move X27, 0x22FA000
	111 Move X28, 0x22FB000
	112 Move X29, 0x22FB000
	113 Move X9, -20004864
	114 Move X20, 0x22F7000
	115 Move X8, [X31+40]
	116 Move X27, [X27+3112]
	117 Move X28, [X28+1608]
	118 Move X29, [X29+1616]
	119 Move X20, [X20+2480]
	120 Move [X31+3], V0
	121 Move V0, [X9+516]
	122 Move X21, 0x22FB000
	123 Move X22, 0x22FB000
	124 Move [X31+16], S0
	125 Move X21, [X21+1624]
	126 Move [X31+64], X8
	127 Move X22, [X22+1600]
	128 Move X1, [X27]
	129 Add X0, X31, 48
	130 Call Enumerator<Object>.MoveNext, X0
	131 Move TEMP, X0
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfNotEqual {397}
	135 Move X23, [X31+64]
	136 Compare X23, 0
	137 JumpIfEqual {424}
	138 Move X0, X23
	139 Move X1, X31
	140 Call NetPlayer.get_isDie, X0
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfEqual {128}
	145 Move X0, [X23+144]
	146 Compare X0, 0
	147 JumpIfEqual {426}
	148 Move X1, X31
	149 Call Transform.get_position, X0
	150 Move [X31+20], S0
	151 Move X0, [X23+152]
	152 Compare X0, 0
	153 JumpIfEqual {427}
	154 Move V9, V1
	155 Move V10, V2
	156 Move X1, X31
	157 Call Transform.get_position, X0
	158 Move X0, [X23+160]
	159 Compare X0, 0
	160 JumpIfEqual {425}
	161 Move V11, V0
	162 Move V12, V1
	163 Move V13, V2
	164 Move X1, X31
	165 Call Transform.get_position, X0
	166 Move X0, [X19+480]
	167 Compare X0, 0
	168 JumpIfEqual {428}
	169 Move X2, [X28]
	170 Move V14, V0
	171 Move V15, V1
	172 Move V8, V2
	173 Move X1, X23
	174 Call Dictionary`2<Object, Object>.ContainsKey, X0, X1
	175 Move X24, [X19+480]
	176 Move TEMP, X0
	177 And TEMP, TEMP, 1
	178 Compare TEMP, 1
	179 JumpIfNotEqual {345}
	180 Compare X24, 0
	181 JumpIfEqual {434}
	182 Move X2, [X29]
	183 Move X0, X24
	184 Move X1, X23
	185 Call Dictionary`2<Object, Object>.get_Item, X0, X1
	186 Compare X0, 0
	187 JumpIfEqual {436}
	188 Move W8, [X0+24]
	189 Compare W8, 0
	190 JumpIfEqual {433}
	191 NotImplemented "Instruction CMP not yet implemented."
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Move S0, [X0+32]
	194 Move S1, [X0+36]
	195 Move V3, [X31+20]
	196 Move V2, [X0+40]
	197 Subtract S1, S9, S1
	198 Subtract S0, S3, S0
	199 Move V3, [X31+16]
	200 Subtract S2, S10, S2
	201 Multiply S0, S0, S0
	202 Multiply S1, S1, S1
	203 Add S0, S0, S1
	204 Multiply S1, S2, S2
	205 Add S0, S0, S1
	206 NotImplemented "Instruction FCMP not yet implemented."
	207 Move S0, [X0+44]
	208 Move S1, [X0+48]
	209 Move V2, [X0+52]
	210 Subtract S0, S11, S0
	211 Subtract S1, S12, S1
	212 Subtract S2, S13, S2
	213 Multiply S0, S0, S0
	214 Multiply S1, S1, S1
	215 Add S0, S0, S1
	216 Multiply S1, S2, S2
	217 Add S0, S0, S1
	218 NotImplemented "Instruction FCMP not yet implemented."
	219 Move S0, [X0+56]
	220 Move S1, [X0+60]
	221 Move V2, [X0+64]
	222 Subtract S0, S14, S0
	223 Subtract S1, S15, S1
	224 Subtract S2, S8, S2
	225 Multiply S0, S0, S0
	226 Multiply S1, S1, S1
	227 Add S0, S0, S1
	228 Multiply S1, S2, S2
	229 Add S0, S0, S1
	230 NotImplemented "Instruction FCMP not yet implemented."
	231 Move X0, [X19+208]
	232 Compare X0, 0
	233 JumpIfEqual {451}
	234 Move X1, X31
	235 Call Transform.get_position, X0
	236 Move X8, 0x25DA000
	237 Move W8, [X8+1926]
	238 Move V8, V0
	239 Move V11, V1
	240 Move V12, V2
	241 Compare W8, 0
	242 JumpIfNotEqual {249}
	243 Move X0, 0x22F5000
	244 Move X0, [X0+1440]
	245 Call 0x1C17CF4
	246 Move X8, 0x25DA000
	247 Move W9, 1
	248 Move [X8+1926], W9
	249 Move X8, 0x22F5000
	250 Move X8, [X8+1440]
	251 Move X9, 0x25DA000
	252 Move W9, [X9+1924]
	253 Move X8, [X8]
	254 Move X8, [X8+184]
	255 Move S15, [X8+24]
	256 Move S14, [X8+28]
	257 Move V13, [X8+32]
	258 Compare W9, 0
	259 JumpIfNotEqual {266}
	260 Move X0, 0x22F5000
	261 Move X0, [X0+1448]
	262 Call 0x1C17CF4
	263 Move W8, 1
	264 Move X9, 0x25DA000
	265 Move [X9+1924], W8
	266 Move X8, 0x22F5000
	267 Move X8, [X8+1448]
	268 Move X0, [X8]
	269 Move W8, [X0+224]
	270 Compare W8, 0
	271 JumpIfNotEqual {273}
	272 Call 0x1C17DFC
	273 Move X0, [X26]
	274 Move W8, [X0+224]
	275 Compare W8, 0
	276 JumpIfNotEqual {278}
	277 Call 0x1C17DFC
	278 Move V3, [X31+20]
	279 Add S0, S8, S15
	280 Add S1, S11, S14
	281 Add S2, S12, S13
	282 Subtract S3, S3, S0
	283 Subtract S4, S9, S1
	284 Subtract S5, S10, S2
	285 Multiply S6, S3, S3
	286 Multiply S7, S4, S4
	287 Multiply S16, S5, S5
	288 Add S6, S6, S7
	289 Add S6, S6, S16
	290 NotImplemented "Instruction FSQRT not yet implemented."
	291 NotImplemented "Instruction FDIV not yet implemented."
	292 NotImplemented "Instruction FDIV not yet implemented."
	293 NotImplemented "Instruction FDIV not yet implemented."
	294 Move X0, X31
	295 Call MobDetectionUtil.IsTargetInLineOfSight, X0, X1, V0
	296 Move TEMP, X0
	297 And TEMP, TEMP, 1
	298 Compare TEMP, 1
	299 JumpIfEqual {389}
	300 Move X24, [X19+480]
	301 Move X0, [X20]
	302 Move W1, 3
	303 Call 0x1C17D6C
	304 Move X25, X0
	305 Move X0, [X23+144]
	306 Compare X0, 0
	307 JumpIfEqual {445}
	308 Move X1, X31
	309 Call Transform.get_position, X0
	310 Compare X25, 0
	311 JumpIfEqual {444}
	312 Move W8, [X25+24]
	313 Compare W8, 0
	314 JumpIfEqual {443}
	315 Move [X25+32], S0
	316 Move [X25+40], S1
	317 Move [X25+40], S2
	318 Move X0, [X23+152]
	319 Compare X0, 0
	320 JumpIfEqual {442}
	321 Move X1, X31
	322 Call Transform.get_position, X0
	323 Move W8, [X25+24]
	324 NotImplemented "Instruction CMP not yet implemented."
	325 Move [X25+44], S0
	326 Move [X25+52], S1
	327 Move [X25+52], S2
	328 Move X0, [X23+160]
	329 Compare X0, 0
	330 JumpIfEqual {449}
	331 Move X1, X31
	332 Call Transform.get_position, X0
	333 Move W8, [X25+24]
	334 NotImplemented "Instruction CMP not yet implemented."
	335 Move [X25+56], S0
	336 Move [X25+64], S1
	337 Move [X25+64], S2
	338 Compare X24, 0
	339 JumpIfEqual {448}
	340 Move X3, [X21]
	341 Move X0, X24
	342 Move X1, X23
	343 Move X2, X25
	344 Call Dictionary`2<Object, Object>.set_Item, X0, X1, X2
	345 Move X0, [X20]
	346 Move W1, 3
	347 Call 0x1C17D6C
	348 Move X25, X0
	349 Move X0, [X23+144]
	350 Compare X0, 0
	351 JumpIfEqual {441}
	352 Move X1, X31
	353 Call Transform.get_position, X0
	354 Compare X25, 0
	355 JumpIfEqual {440}
	356 Move W8, [X25+24]
	357 Compare W8, 0
	358 JumpIfEqual {439}
	359 Move [X25+32], S0
	360 Move [X25+40], S1
	361 Move [X25+40], S2
	362 Move X0, [X23+152]
	363 Compare X0, 0
	364 JumpIfEqual {438}
	365 Move X1, X31
	366 Call Transform.get_position, X0
	367 Move W8, [X25+24]
	368 NotImplemented "Instruction CMP not yet implemented."
	369 Move [X25+44], S0
	370 Move [X25+52], S1
	371 Move [X25+52], S2
	372 Move X0, [X23+160]
	373 Compare X0, 0
	374 JumpIfEqual {437}
	375 Move X1, X31
	376 Call Transform.get_position, X0
	377 Move W8, [X25+24]
	378 NotImplemented "Instruction CMP not yet implemented."
	379 Move [X25+56], S0
	380 Move [X25+64], S1
	381 Move [X25+64], S2
	382 Compare X24, 0
	383 JumpIfEqual {432}
	384 Move X3, [X22]
	385 Move X0, X24
	386 Move X1, X23
	387 Move X2, X25
	388 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	389 Move W8, [X31+12]
	390 Move S0, W31
	391 Move S1, 0.5
	392 And W31, W8, 1
	393 NotImplemented "Instruction FCSEL not yet implemented."
	394 Move X0, X19
	395 Move X1, X23
	396 Call RedGreenController.SetAnticipating, X0, X1, V0
	397 Move X8, 0x22F9000
	398 Move X8, [X8+3104]
	399 Add X0, X31, 48
	400 Move X1, [X8]
	401 Call Enumerator<Object>.Dispose, X0
	402 Move X20, [X31+224]
	403 Move X19, [X31+232]
	404 Move X22, [X31+208]
	405 Move X21, [X31+216]
	406 Move X24, [X31+192]
	407 Move X23, [X31+200]
	408 Move X26, [X31+176]
	409 Move X25, [X31+184]
	410 Move X28, [X31+160]
	411 Move X27, [X31+168]
	412 Move X29, [X31+144]
	413 Move X30, [X31+152]
	414 Move D9, [X31+128]
	415 Move D8, [X31+136]
	416 Move D11, [X31+112]
	417 Move D10, [X31+120]
	418 Move D13, [X31+96]
	419 Move D12, [X31+104]
	420 Move D15, [X31+80]
	421 Move D14, [X31+88]
	422 Add X31, X31, 240
	423 Return 
	424 Call 0x1C17F20
	425 Call 0x1C17F20
	426 Call 0x1C17F20
	427 Call 0x1C17F20
	428 Call 0x1C17F20
	429 Call 0x1C17F28
	430 Call 0x1C17F28
	431 Call 0x1C17F28
	432 Call 0x1C17F20
	433 Call 0x1C17F28
	434 Call 0x1C17F20
	435 Call 0x1C17F28
	436 Call 0x1C17F20
	437 Call 0x1C17F20
	438 Call 0x1C17F20
	439 Call 0x1C17F28
	440 Call 0x1C17F20
	441 Call 0x1C17F20
	442 Call 0x1C17F20
	443 Call 0x1C17F28
	444 Call 0x1C17F20
	445 Call 0x1C17F20
	446 Call 0x1C17F28
	447 Call 0x1C17F28
	448 Call 0x1C17F20
	449 Call 0x1C17F20
	450 Call 0x1C17F20
	451 Call 0x1C17F20
	452 Call 0x1C17F28
	453 Move X19, X0
	454 NotImplemented "Instruction CMP not yet implemented."
	455 Move X0, X19
	456 Call 0x3EB2AD0
	457 Move X20, [X0]
	458 Call 0x3EB2AE0
	459 Move X8, 0x22F9000
	460 Move X8, [X8+3104]
	461 Add X0, X31, 48
	462 Move X1, [X8]
	463 Call Enumerator<Object>.Dispose, X0
	464 Compare X20, 0
	465 JumpIfEqual {402}
	466 Move X0, X20
	467 Call 0x1C17F18
	468 Move X20, X31
	469 Move X19, X0
	470 Move X8, 0x22F9000
	471 Move X8, [X8+3104]
	472 Move X1, [X8]
	473 Add X0, X31, 48
	474 Call Enumerator<Object>.Dispose, X0
	475 Compare X20, 0
	476 JumpIfNotEqual {479}
	477 Move X0, X19
	478 Call 0x1D2D690
	479 Move X0, X20
	480 Call 0x1C17F18
	481 Call 0x1991590

Method: System.Void SetAnticipating(AnimalCompany.NetPlayer targetPlayer, System.Single startTimer = 0)

Disassembly:
	0x01E0030C CSET W10, NE
	0x01E00310 CMP W8, W10
	0x01E00314 B.EQ 0x1E0031C
	0x01E00318 STRB W8, [X9 + 0x18]
	0x01E0031C LDRB W8, [X19 + 0x30]
	0x01E00320 CBZ W8, 0x1E00344
	0x01E00324 MOV X0, X19
	0x01E00328 BL 0x1E00364
	0x01E0032C MOV X0, X19
	0x01E00330 BL 0x1E004DC
	0x01E00334 MOV X0, X19
	0x01E00338 LDP X20, X19, [X31 + 0x10]
	0x01E0033C LDR X30, [X31], #0x20
	0x01E00340 B 0x1E00598
	0x01E00344 LDP X20, X19, [X31 + 0x10]
	0x01E00348 LDR X30, [X31], #0x20
	0x01E0034C RET
	0x01E00350 LDR V0, [X19 + 0x4C]
	0x01E00354 FCMP S0, 0x0
	0x01E00358 CSET W8, GT
	0x01E0035C B 0x1E002FC
	0x01E00360 BL 0x1C16F20
	0x01E00364 STP D9, D8, [X31 - 0x30]!
	0x01E00368 STP X30, X21, [X31 + 0x10]
	0x01E0036C STP X20, X19, [X31 + 0x20]
	0x01E00370 ADRP X20, 0x25D8000
	0x01E00374 LDRB W8, [X20 + 0xD58]
	0x01E00378 MOV X19, X0
	0x01E0037C TBNZ X8, 0x0, 0x1E003B8
	0x01E00380 ADRP X0, 0x22F9000
	0x01E00384 LDR X0, [X0 + 0x6E0]
	0x01E00388 BL 0x1C16CF4
	0x01E0038C ADRP X0, 0x22F9000
	0x01E00390 LDR X0, [X0 + 0x6E8]
	0x01E00394 BL 0x1C16CF4
	0x01E00398 ADRP X0, 0x22F9000
	0x01E0039C LDR X0, [X0 + 0x6D8]
	0x01E003A0 BL 0x1C16CF4
	0x01E003A4 ADRP X0, 0x22F8000
	0x01E003A8 LDR X0, [X0 + 0xD8]
	0x01E003AC BL 0x1C16CF4
	0x01E003B0 MOVZ W8, 0x1
	0x01E003B4 STRB W8, [X20 + 0xD58]
	0x01E003B8 LDR X0, [X19 + 0x38]
	0x01E003BC CBZ X0, 0x1E004D8

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move W1, 2
	007 Move V8, V0
	008 Move X19, X0
	009 Call RedGreenController.set_phase, X0, X1
	010 Move X8, [X19]
	011 Move X0, X19
	012 Move X1, X20
	013 Move X9, [X8+952]
	014 Move X2, [X8+960]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X9, [X19+192]
	017 Compare X9, 0
	018 JumpIfEqual {54}
	019 Move X8, [X9+48]
	020 Compare X8, 0
	021 JumpIfEqual {54}
	022 Move W10, [X8+24]
	023 Compare W10, 0
	024 JumpIfEqual {55}
	025 Move X10, [X9+88]
	026 Compare X10, 0
	027 JumpIfEqual {54}
	028 Move W11, [X10+24]
	029 Compare W11, 0
	030 JumpIfEqual {55}
	031 Move X9, [X9+96]
	032 Compare X9, 0
	033 JumpIfEqual {54}
	034 Move W11, [X9+24]
	035 Compare W11, 0
	036 JumpIfEqual {55}
	037 Move X11, [X19]
	038 Move V0, [X8+32]
	039 Move V1, [X10+32]
	040 Move V2, [X9+32]
	041 Move X8, [X11+712]
	042 Move X2, [X11+720]
	043 Move W1, 1
	044 Move X0, X19
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move X0, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+8]
	050 Move V0, V8
	051 Move V8, [X31+32]
	052 Call RedGreenController.set_timerAnticipating, X0, V0
	053 Return 
	054 Call 0x1C17F20
	055 Call 0x1C17F28

Method: System.Void UpdateAnticipating()

Disassembly:
	0x01DFF268 B 0x1DFF298
	0x01DFF26C B 0x1DFF298
	0x01DFF270 B 0x1DFF298
	0x01DFF274 B 0x1DFF298
	0x01DFF278 B 0x1DFF298
	0x01DFF27C B 0x1DFF298
	0x01DFF280 B 0x1DFF298
	0x01DFF284 B 0x1DFF298
	0x01DFF288 B 0x1DFF298
	0x01DFF28C B 0x1DFF298
	0x01DFF290 B 0x1DFF298
	0x01DFF294 B 0x1DFF298
	0x01DFF298 MOV X19, X0
	0x01DFF29C CMP W1, 0x1
	0x01DFF2A0 B.NE 0x1DFF2D4
	0x01DFF2A4 MOV X0, X19
	0x01DFF2A8 BL 0x3EB1AD0
	0x01DFF2AC LDR X20, [X0]
	0x01DFF2B0 BL 0x3EB1AE0
	0x01DFF2B4 ADRP X8, 0x22F9000
	0x01DFF2B8 LDR X8, [X8 + 0xC20]
	0x01DFF2BC ADD X0, X31, 0x30
	0x01DFF2C0 LDR X1, [X8]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call RedGreenController.get_timerAnticipating, X0
	006 Move X0, X19
	007 Move X1, X31
	008 Move V8, V0
	009 Call MobController.get_deltaTime, X0
	010 Add S0, S8, S0
	011 Move X0, X19
	012 Call RedGreenController.set_timerAnticipating, X0, V0
	013 Move X0, X19
	014 Call RedGreenController.get_timerAnticipating, X0
	015 Move S1, 1
	016 NotImplemented "Instruction FCMP not yet implemented."
	017 Move X0, X19
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Move V8, [X31+32]
	021 Call RedGreenController.SetCharging, X0
	022 Return 
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Move V8, [X31+32]
	026 Return 

Method: System.Void SetCharging()

Disassembly:
	0x01E003C0 LDR W8, [X0 + 0x20]
	0x01E003C4 CMP W8, 0x1
	0x01E003C8 B.LT 0x1E00444
	0x01E003CC ADRP X8, 0x22F9000
	0x01E003D0 LDR X8, [X8 + 0x6E8]
	0x01E003D4 LDR X1, [X8]
	0x01E003D8 BL 0x24F1954
	0x01E003DC CBZ X0, 0x1E004D8
	0x01E003E0 LDR V8, [X19 + 0x44]
	0x01E003E4 LDR V0, [X0 + 0x14]
	0x01E003E8 MOV X20, X0
	0x01E003EC FCMP S8, S0
	0x01E003F0 B.PL 0x1E00454
	0x01E003F4 MOV X0, X31
	0x01E003F8 BL 0x3C3C714
	0x01E003FC FADD S0, S8, S0
	0x01E00400 STR S0, [X19 + 0x44]
	0x01E00404 LDR V8, [X19 + 0x40]
	0x01E00408 LDR V9, [X20 + 0x10]
	0x01E0040C MOV X0, X31
	0x01E00410 BL 0x3C3C714
	0x01E00414 LDR V1, [X20 + 0x14]
	0x01E00418 FSUB S2, S9, S8
	0x01E0041C FCMP S2, 0x0
	0x01E00420 FABD S3, S9, S9
	0x01E00424 FDIV S0, S0, S1
	0x01E00428 FNEG S1, S0
	0x01E0042C FCSEL S1, S0, S1, GE
	0x01E00430 FADD S1, S8, S1
	0x01E00434 FCMP S3, S0
	0x01E00438 FCSEL S0, S1, S9, HI
	0x01E0043C STR S0, [X19 + 0x40]
	0x01E00440 B 0x1E00490
	0x01E00444 LDP X20, X19, [X31 + 0x20]
	0x01E00448 LDP X30, X21, [X31 + 0x10]
	0x01E0044C LDP D9, D8, [X31], #0x30
	0x01E00450 RET
	0x01E00454 STR W31, [X19 + 0x44]
	0x01E00458 LDR V0, [X20 + 0x10]
	0x01E0045C STR S0, [X19 + 0x40]
	0x01E00460 LDR X8, [X20 + 0x18]
	0x01E00464 CBZ X8, 0x1E00478
	0x01E00468 LDR X9, [X8 + 0x18]
	0x01E0046C LDR X0, [X8 + 0x40]
	0x01E00470 LDR X1, [X8 + 0x28]
	0x01E00474 BLR X9
	0x01E00478 LDR X0, [X19 + 0x38]
	0x01E0047C CBZ X0, 0x1E004D8
	0x01E00480 ADRP X8, 0x22F9000
	0x01E00484 LDR X8, [X8 + 0x6E0]
	0x01E00488 LDR X1, [X8]
	0x01E0048C BL 0x24F18D4
	0x01E00490 ADRP X21, 0x22F8000
	0x01E00494 LDR X21, [X21 + 0xD8]
	0x01E00498 LDR X20, [X19 + 0x20]
	0x01E0049C LDR X0, [X21]
	0x01E004A0 LDR W8, [X0 + 0xE0]
	0x01E004A4 CBNZ W8, 0x1E004AC
	0x01E004A8 BL 0x1C16DFC
	0x01E004AC CBZ X20, 0x1E004D8
	0x01E004B0 LDR X8, [X21]
	0x01E004B4 LDR V0, [X19 + 0x40]
	0x01E004B8 MOV X0, X20
	0x01E004BC LDP X20, X19, [X31 + 0x20]
	0x01E004C0 LDR X8, [X8 + 0xB8]
	0x01E004C4 LDP X30, X21, [X31 + 0x10]
	0x01E004C8 MOV X2, X31
	0x01E004CC LDR W1, [X8]
	0x01E004D0 LDP D9, D8, [X31], #0x30
	0x01E004D4 B 0x3C15CD8
	0x01E004D8 BL 0x1C16F20
	0x01E004DC STR D8, [X31 - 0x30]!
	0x01E004E0 STP X30, X21, [X31 + 0x10]
	0x01E004E4 STP X20, X19, [X31 + 0x20]
	0x01E004E8 ADRP X20, 0x25D8000
	0x01E004EC LDRB W8, [X20 + 0xD59]
	0x01E004F0 MOV X19, X0
	0x01E004F4 TBNZ X8, 0x0, 0x1E0050C
	0x01E004F8 ADRP X0, 0x22F8000
	0x01E004FC LDR X0, [X0 + 0xD8]
	0x01E00500 BL 0x1C16CF4
	0x01E00504 MOVZ W8, 0x1
	0x01E00508 STRB W8, [X20 + 0xD59]
	0x01E0050C LDR V8, [X19 + 0x48]
	0x01E00510 FCMP S8, 0x0
	0x01E00514 B.LE 0x1E00584
	0x01E00518 MOV X0, X31
	0x01E0051C BL 0x3C3C714
	0x01E00520 ADRP X8, 0xFFFFFFFFFECEA000
	0x01E00524 LDR V1, [X8 + 0x108]
	0x01E00528 FMOV S2, W31
	0x01E0052C ADRP X21, 0x22F8000
	0x01E00530 FDIV S0, S0, S1
	0x01E00534 FADD S0, S8, S0
	0x01E00538 FMAX S0, S0, S2
	0x01E0053C STR S0, [X19 + 0x48]
	0x01E00540 LDR X21, [X21 + 0xD8]
	0x01E00544 LDR X20, [X19 + 0x20]
	0x01E00548 LDR X0, [X21]
	0x01E0054C LDR W8, [X0 + 0xE0]
	0x01E00550 CBNZ W8, 0x1E00558
	0x01E00554 BL 0x1C16DFC
	0x01E00558 CBZ X20, 0x1E00594
	0x01E0055C LDR X8, [X21]
	0x01E00560 LDR V0, [X19 + 0x48]
	0x01E00564 MOV X0, X20
	0x01E00568 LDP X20, X19, [X31 + 0x20]
	0x01E0056C LDR X8, [X8 + 0xB8]
	0x01E00570 LDP X30, X21, [X31 + 0x10]
	0x01E00574 MOV X2, X31
	0x01E00578 LDR W1, [X8 + 0x8]
	0x01E0057C LDR V8, [X31], #0x30
	0x01E00580 B 0x3C15CD8
	0x01E00584 LDP X20, X19, [X31 + 0x20]
	0x01E00588 LDP X30, X21, [X31 + 0x10]
	0x01E0058C LDR V8, [X31], #0x30
	0x01E00590 RET
	0x01E00594 BL 0x1C16F20
	0x01E00598 STR D8, [X31 - 0x30]!
	0x01E0059C STP X30, X21, [X31 + 0x10]
	0x01E005A0 STP X20, X19, [X31 + 0x20]
	0x01E005A4 ADRP X20, 0x25D8000
	0x01E005A8 LDRB W8, [X20 + 0xD5A]
	0x01E005AC MOV X19, X0
	0x01E005B0 TBNZ X8, 0x0, 0x1E005D4
	0x01E005B4 ADRP X0, 0x22F8000
	0x01E005B8 LDR X0, [X0 + 0xD8]
	0x01E005BC BL 0x1C16CF4
	0x01E005C0 ADRP X0, 0x22F9000
	0x01E005C4 LDR X0, [X0 + 0x6F0]
	0x01E005C8 BL 0x1C16CF4
	0x01E005CC MOVZ W8, 0x1
	0x01E005D0 STRB W8, [X20 + 0xD5A]
	0x01E005D4 LDR V8, [X19 + 0x50]
	0x01E005D8 FCMP S8, 0x0
	0x01E005DC B.LE 0x1E00654
	0x01E005E0 ADRP X21, 0x22F8000
	0x01E005E4 LDR X21, [X21 + 0xD8]
	0x01E005E8 MOV X0, X31
	0x01E005EC BL 0x3C3C714
	0x01E005F0 FSUB S0, S8, S0
	0x01E005F4 FMOV S1, 3
	0x01E005F8 FMOV S2, 1
	0x01E005FC FDIV S1, S0, S1
	0x01E00600 FMOV S3, W31
	0x01E00604 FMIN S2, S1, S2
	0x01E00608 FCMP S1, 0x0
	0x01E0060C FCSEL S1, S2, S3, PL
	0x01E00610 STP S1, S0, [X19 + 0x4C]
	0x01E00614 LDR X0, [X21]
	0x01E00618 LDR X20, [X19 + 0x20]
	0x01E0061C LDR W8, [X0 + 0xE0]
	0x01E00620 CBNZ W8, 0x1E00628
	0x01E00624 BL 0x1C16DFC
	0x01E00628 CBZ X20, 0x1E00690
	0x01E0062C LDR X8, [X21]
	0x01E00630 LDR V0, [X19 + 0x4C]
	0x01E00634 MOV X0, X20

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x25D9000
	009 Move X20, 0x22F4000
	010 Move W8, [X21+3402]
	011 Move X20, [X20+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x22F4000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3402], W8
	022 Move W1, 3
	023 Move X0, X19
	024 Call RedGreenController.set_phase, X0, X1
	025 Move X0, [X20]
	026 Move X20, [X19+352]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {49}
	039 Move X0, X19
	040 Move X20, [X31+48]
	041 Move X19, [X31+56]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Move D9, [X31+16]
	045 Move D8, [X31+24]
	046 Move V10, [X31+64]
	047 Call RedGreenController.SetStanding, X0
	048 Return 
	049 Move S0, W31
	050 Move X0, X19
	051 Move X1, X31
	052 Call MobController.set__timerToChasing, X0, V0
	053 Move X9, [X19+192]
	054 Compare X9, 0
	055 JumpIfEqual {190}
	056 Move X8, [X9+56]
	057 Compare X8, 0
	058 JumpIfEqual {190}
	059 Move W10, [X8+24]
	060 Compare W10, 0
	061 JumpIfEqual {191}
	062 Move X10, [X9+88]
	063 Compare X10, 0
	064 JumpIfEqual {190}
	065 Move W11, [X10+24]
	066 Compare W11, 0
	067 JumpIfEqual {191}
	068 Move X9, [X9+96]
	069 Compare X9, 0
	070 JumpIfEqual {190}
	071 Move W11, [X9+24]
	072 Compare W11, 0
	073 JumpIfEqual {191}
	074 Move X11, [X19]
	075 Move V0, [X8+32]
	076 Move V1, [X10+32]
	077 Move V2, [X9+32]
	078 Move X8, [X11+712]
	079 Move X2, [X11+720]
	080 Move X0, X19
	081 Move W1, W31
	082 NotImplemented "Instruction BLR not yet implemented."
	083 Move X0, [X19+352]
	084 Compare X0, 0
	085 JumpIfEqual {190}
	086 Move X1, X31
	087 Call Component.get_transform, X0
	088 Compare X0, 0
	089 JumpIfEqual {190}
	090 Move X1, X31
	091 Call Transform.get_position, X0
	092 Move X0, X19
	093 Move X1, X31
	094 Move V8, V0
	095 Move V9, V1
	096 Move V10, V2
	097 Call Component.get_transform, X0
	098 Compare X0, 0
	099 JumpIfEqual {190}
	100 Move X1, X31
	101 Call Transform.get_position, X0
	102 Subtract S0, S8, S0
	103 Subtract S1, S9, S1
	104 Subtract S2, S10, S2
	105 Move X0, X31
	106 Call Extensions.Flatten, X0
	107 Move X20, 0x25D9000
	108 Move W8, [X20+1925]
	109 Move V8, V0
	110 Move V9, V1
	111 Move V10, V2
	112 Compare W8, 0
	113 JumpIfNotEqual {119}
	114 Move X0, 0x22F4000
	115 Move X0, [X0+1448]
	116 Call 0x1C17CF4
	117 Move W8, 1
	118 Move [X20+1925], W8
	119 Move X8, 0x22F4000
	120 Move X8, [X8+1448]
	121 Move X0, [X8]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Multiply S0, S8, S8
	127 Multiply S1, S9, S9
	128 Move X8, -20008960
	129 Add S0, S0, S1
	130 Move V1, [X8+380]
	131 Move X20, 0x22F4000
	132 Multiply S2, S10, S10
	133 Move X20, [X20+1440]
	134 Add S0, S2, S0
	135 NotImplemented "Instruction FSQRT not yet implemented."
	136 NotImplemented "Instruction FCMP not yet implemented."
	137 NotImplemented "Instruction FDIV not yet implemented."
	138 NotImplemented "Instruction FDIV not yet implemented."
	139 NotImplemented "Instruction FDIV not yet implemented."
	140 Move X21, 0x25D9000
	141 Move W8, [X21+1923]
	142 Compare W8, 0
	143 JumpIfNotEqual {149}
	144 Move X0, 0x22F4000
	145 Move X0, [X0+1440]
	146 Call 0x1C17CF4
	147 Move W8, 1
	148 Move [X21+1923], W8
	149 Move X8, [X20]
	150 Move X8, [X8+184]
	151 Move S8, [X8]
	152 Move S9, [X8+4]
	153 Move V10, [X8+8]
	154 Move X0, X19
	155 Move X1, X31
	156 Call Component.get_transform, X0
	157 Move X21, 0x25D9000
	158 Move W8, [X21+1926]
	159 Move X19, X0
	160 Compare W8, 0
	161 JumpIfNotEqual {167}
	162 Move X0, 0x22F4000
	163 Move X0, [X0+1440]
	164 Call 0x1C17CF4
	165 Move W8, 1
	166 Move [X21+1926], W8
	167 Move X8, [X20]
	168 Move V0, V8
	169 Move V1, V9
	170 Move V2, V10
	171 Move X8, [X8+184]
	172 Move X0, X31
	173 Move S3, [X8+24]
	174 Move S4, [X8+28]
	175 Move V5, [X8+32]
	176 Call Quaternion.LookRotation, X0, X1
	177 Compare X19, 0
	178 JumpIfEqual {190}
	179 Move X0, X19
	180 Move X20, [X31+48]
	181 Move X19, [X31+56]
	182 Move X30, [X31+32]
	183 Move X21, [X31+40]
	184 Move D9, [X31+16]
	185 Move D8, [X31+24]
	186 Move X1, X31
	187 Move V10, [X31+64]
	188 Call Transform.set_rotation, X0, X1
	189 Return 
	190 Call 0x1C17F20
	191 Call 0x1C17F28

Method: System.Void UpdateCharging()

Disassembly:
	0x01DFF2C4 BL 0x2BC434C
	0x01DFF2C8 CBZ X20, 0x1DFF140
	0x01DFF2CC MOV X0, X20
	0x01DFF2D0 BL 0x1C16F18
	0x01DFF2D4 MOV X20, X31
	0x01DFF2D8 B 0x1DFF2E0
	0x01DFF2DC MOV X19, X0
	0x01DFF2E0 ADRP X8, 0x22F9000
	0x01DFF2E4 LDR X8, [X8 + 0xC20]
	0x01DFF2E8 LDR X1, [X8]
	0x01DFF2EC ADD X0, X31, 0x30
	0x01DFF2F0 BL 0x2BC434C
	0x01DFF2F4 CBNZ X20, 0x1DFF300
	0x01DFF2F8 MOV X0, X19
	0x01DFF2FC BL 0x1D2C690
	0x01DFF300 MOV X0, X20
	0x01DFF304 BL 0x1C16F18
	0x01DFF308 BL 0x1990590
	0x01DFF30C STR D8, [X31 - 0x20]!
	0x01DFF310 STR X30, [X31 + 0x8]
	0x01DFF314 STP X20, X19, [X31 + 0x10]
	0x01DFF318 MOV X20, X1
	0x01DFF31C MOVZ W1, 0x2
	0x01DFF320 MOV V8.16B, V0.16B
	0x01DFF324 MOV X19, X0
	0x01DFF328 BL 0x1DFD46C
	0x01DFF32C LDR X8, [X19]
	0x01DFF330 MOV X0, X19
	0x01DFF334 MOV X1, X20
	0x01DFF338 LDR X9, [X8 + 0x3B8]
	0x01DFF33C LDR X2, [X8 + 0x3C0]
	0x01DFF340 BLR X9
	0x01DFF344 LDR X9, [X19 + 0xC0]
	0x01DFF348 CBZ X9, 0x1DFF3B8
	0x01DFF34C LDR X8, [X9 + 0x30]
	0x01DFF350 CBZ X8, 0x1DFF3B8
	0x01DFF354 LDR W10, [X8 + 0x18]
	0x01DFF358 CBZ W10, 0x1DFF3BC
	0x01DFF35C LDR X10, [X9 + 0x58]
	0x01DFF360 CBZ X10, 0x1DFF3B8
	0x01DFF364 LDR W11, [X10 + 0x18]
	0x01DFF368 CBZ W11, 0x1DFF3BC
	0x01DFF36C LDR X9, [X9 + 0x60]
	0x01DFF370 CBZ X9, 0x1DFF3B8
	0x01DFF374 LDR W11, [X9 + 0x18]
	0x01DFF378 CBZ W11, 0x1DFF3BC
	0x01DFF37C LDR X11, [X19]
	0x01DFF380 LDR V0, [X8 + 0x20]
	0x01DFF384 LDR V1, [X10 + 0x20]
	0x01DFF388 LDR V2, [X9 + 0x20]
	0x01DFF38C LDR X8, [X11 + 0x2C8]
	0x01DFF390 LDR X2, [X11 + 0x2D0]
	0x01DFF394 MOVZ W1, 0x1
	0x01DFF398 MOV X0, X19
	0x01DFF39C BLR X8
	0x01DFF3A0 MOV X0, X19
	0x01DFF3A4 LDP X20, X19, [X31 + 0x10]
	0x01DFF3A8 LDR X30, [X31 + 0x8]
	0x01DFF3AC MOV V0.16B, V8.16B
	0x01DFF3B0 LDR V8, [X31], #0x20
	0x01DFF3B4 B 0x1DFD840
	0x01DFF3B8 BL 0x1C16F20
	0x01DFF3BC BL 0x1C16F28
	0x01DFF3C0 STR D10, [X31 - 0x40]!
	0x01DFF3C4 STP D9, D8, [X31 + 0x10]
	0x01DFF3C8 STP X30, X21, [X31 + 0x20]
	0x01DFF3CC STP X20, X19, [X31 + 0x30]
	0x01DFF3D0 ADRP X21, 0x25D9000
	0x01DFF3D4 ADRP X20, 0x22F4000
	0x01DFF3D8 LDRB W8, [X21 + 0xD4A]
	0x01DFF3DC LDR X20, [X20 + 0x598]
	0x01DFF3E0 MOV X19, X0
	0x01DFF3E4 TBNZ X8, 0x0, 0x1DFF3FC
	0x01DFF3E8 ADRP X0, 0x22F4000
	0x01DFF3EC LDR X0, [X0 + 0x598]
	0x01DFF3F0 BL 0x1C16CF4
	0x01DFF3F4 MOVZ W8, 0x1
	0x01DFF3F8 STRB W8, [X21 + 0xD4A]
	0x01DFF3FC MOVZ W1, 0x3
	0x01DFF400 MOV X0, X19
	0x01DFF404 BL 0x1DFD46C
	0x01DFF408 LDR X0, [X20]
	0x01DFF40C LDR X20, [X19 + 0x160]
	0x01DFF410 LDR W8, [X0 + 0xE0]
	0x01DFF414 CBNZ W8, 0x1DFF41C
	0x01DFF418 BL 0x1C16DFC
	0x01DFF41C MOV X0, X20
	0x01DFF420 MOV X1, X31
	0x01DFF424 MOV X2, X31
	0x01DFF428 BL 0x3C3883C
	0x01DFF42C TBZ X0, 0x0, 0x1DFF448
	0x01DFF430 MOV X0, X19
	0x01DFF434 LDP X20, X19, [X31 + 0x30]
	0x01DFF438 LDP X30, X21, [X31 + 0x20]
	0x01DFF43C LDP D9, D8, [X31 + 0x10]
	0x01DFF440 LDR V10, [X31], #0x40
	0x01DFF444 B 0x1DFDE94
	0x01DFF448 FMOV S0, W31
	0x01DFF44C MOV X0, X19
	0x01DFF450 MOV X1, X31
	0x01DFF454 BL 0x1DEA540
	0x01DFF458 LDR X9, [X19 + 0xC0]
	0x01DFF45C CBZ X9, 0x1DFF630
	0x01DFF460 LDR X8, [X9 + 0x38]
	0x01DFF464 CBZ X8, 0x1DFF630
	0x01DFF468 LDR W10, [X8 + 0x18]
	0x01DFF46C CBZ W10, 0x1DFF634
	0x01DFF470 LDR X10, [X9 + 0x58]
	0x01DFF474 CBZ X10, 0x1DFF630
	0x01DFF478 LDR W11, [X10 + 0x18]
	0x01DFF47C CBZ W11, 0x1DFF634
	0x01DFF480 LDR X9, [X9 + 0x60]
	0x01DFF484 CBZ X9, 0x1DFF630
	0x01DFF488 LDR W11, [X9 + 0x18]
	0x01DFF48C CBZ W11, 0x1DFF634
	0x01DFF490 LDR X11, [X19]
	0x01DFF494 LDR V0, [X8 + 0x20]
	0x01DFF498 LDR V1, [X10 + 0x20]
	0x01DFF49C LDR V2, [X9 + 0x20]
	0x01DFF4A0 LDR X8, [X11 + 0x2C8]
	0x01DFF4A4 LDR X2, [X11 + 0x2D0]
	0x01DFF4A8 MOV X0, X19
	0x01DFF4AC MOV W1, W31
	0x01DFF4B0 BLR X8
	0x01DFF4B4 LDR X0, [X19 + 0x160]
	0x01DFF4B8 CBZ X0, 0x1DFF630
	0x01DFF4BC MOV X1, X31
	0x01DFF4C0 BL 0x3C32E90
	0x01DFF4C4 CBZ X0, 0x1DFF630
	0x01DFF4C8 MOV X1, X31
	0x01DFF4CC BL 0x3C3F58C
	0x01DFF4D0 MOV X0, X19
	0x01DFF4D4 MOV X1, X31
	0x01DFF4D8 MOV V8.16B, V0.16B
	0x01DFF4DC MOV V9.16B, V1.16B
	0x01DFF4E0 MOV V10.16B, V2.16B
	0x01DFF4E4 BL 0x3C32E90
	0x01DFF4E8 CBZ X0, 0x1DFF630
	0x01DFF4EC MOV X1, X31
	0x01DFF4F0 BL 0x3C3F58C
	0x01DFF4F4 FSUB S0, S8, S0
	0x01DFF4F8 FSUB S1, S9, S1
	0x01DFF4FC FSUB S2, S10, S2
	0x01DFF500 MOV X0, X31
	0x01DFF504 BL 0x1DC0890
	0x01DFF508 ADRP X20, 0x25D9000
	0x01DFF50C LDRB W8, [X20 + 0x785]
	0x01DFF510 MOV V8.16B, V0.16B
	0x01DFF514 MOV V9.16B, V1.16B
	0x01DFF518 MOV V10.16B, V2.16B
	0x01DFF51C CBNZ W8, 0x1DFF534
	0x01DFF520 ADRP X0, 0x22F4000
	0x01DFF524 LDR X0, [X0 + 0x5A8]
	0x01DFF528 BL 0x1C16CF4
	0x01DFF52C MOVZ W8, 0x1
	0x01DFF530 STRB W8, [X20 + 0x785]
	0x01DFF534 ADRP X8, 0x22F4000
	0x01DFF538 LDR X8, [X8 + 0x5A8]
	0x01DFF53C LDR X0, [X8]
	0x01DFF540 LDR W8, [X0 + 0xE0]
	0x01DFF544 CBNZ W8, 0x1DFF54C
	0x01DFF548 BL 0x1C16DFC
	0x01DFF54C FMUL S0, S8, S8
	0x01DFF550 FMUL S1, S9, S9
	0x01DFF554 ADRP X8, 0xFFFFFFFFFECEB000
	0x01DFF558 FADD S0, S0, S1
	0x01DFF55C LDR V1, [X8 + 0x17C]
	0x01DFF560 ADRP X20, 0x22F4000
	0x01DFF564 FMUL S2, S10, S10
	0x01DFF568 LDR X20, [X20 + 0x5A0]
	0x01DFF56C FADD S0, S2, S0
	0x01DFF570 FSQRT S0, S0
	0x01DFF574 FCMP S0, S1
	0x01DFF578 B.LE 0x1DFF58C
	0x01DFF57C FDIV S8, S8, S0
	0x01DFF580 FDIV S9, S9, S0
	0x01DFF584 FDIV S10, S10, S0
	0x01DFF588 B 0x1DFF5BC
	0x01DFF58C ADRP X21, 0x25D9000
	0x01DFF590 LDRB W8, [X21 + 0x783]
	0x01DFF594 CBNZ W8, 0x1DFF5AC
	0x01DFF598 ADRP X0, 0x22F4000
	0x01DFF59C LDR X0, [X0 + 0x5A0]
	0x01DFF5A0 BL 0x1C16CF4
	0x01DFF5A4 MOVZ W8, 0x1
	0x01DFF5A8 STRB W8, [X21 + 0x783]
	0x01DFF5AC LDR X8, [X20]
	0x01DFF5B0 LDR X8, [X8 + 0xB8]
	0x01DFF5B4 LDP S8, S9, [X8]
	0x01DFF5B8 LDR V10, [X8 + 0x8]
	0x01DFF5BC MOV X0, X19
	0x01DFF5C0 MOV X1, X31
	0x01DFF5C4 BL 0x3C32E90
	0x01DFF5C8 ADRP X21, 0x25D9000
	0x01DFF5CC LDRB W8, [X21 + 0x786]
	0x01DFF5D0 MOV X19, X0
	0x01DFF5D4 CBNZ W8, 0x1DFF5EC
	0x01DFF5D8 ADRP X0, 0x22F4000
	0x01DFF5DC LDR X0, [X0 + 0x5A0]
	0x01DFF5E0 BL 0x1C16CF4
	0x01DFF5E4 MOVZ W8, 0x1
	0x01DFF5E8 STRB W8, [X21 + 0x786]
	0x01DFF5EC LDR X8, [X20]
	0x01DFF5F0 MOV V0.16B, V8.16B
	0x01DFF5F4 MOV V1.16B, V9.16B
	0x01DFF5F8 MOV V2.16B, V10.16B
	0x01DFF5FC LDR X8, [X8 + 0xB8]
	0x01DFF600 MOV X0, X31
	0x01DFF604 LDP S3, S4, [X8 + 0x18]
	0x01DFF608 LDR V5, [X8 + 0x20]
	0x01DFF60C BL 0x3C2A810
	0x01DFF610 CBZ X19, 0x1DFF630
	0x01DFF614 MOV X0, X19
	0x01DFF618 LDP X20, X19, [X31 + 0x30]
	0x01DFF61C LDP X30, X21, [X31 + 0x20]
	0x01DFF620 LDP D9, D8, [X31 + 0x10]
	0x01DFF624 MOV X1, X31
	0x01DFF628 LDR V10, [X31], #0x40
	0x01DFF62C B 0x3C3F7AC
	0x01DFF630 BL 0x1C16F20
	0x01DFF634 BL 0x1C16F28
	0x01DFF638 STR X30, [X31 - 0x20]!
	0x01DFF63C STP X20, X19, [X31 + 0x10]
	0x01DFF640 ADRP X20, 0x25D9000
	0x01DFF644 LDRB W8, [X20 + 0xD4C]
	0x01DFF648 MOV X19, X0
	0x01DFF64C TBNZ X8, 0x0, 0x1DFF664
	0x01DFF650 ADRP X0, 0x22FA000
	0x01DFF654 LDR X0, [X0 + 0x630]
	0x01DFF658 BL 0x1C16CF4
	0x01DFF65C MOVZ W8, 0x1
	0x01DFF660 STRB W8, [X20 + 0xD4C]
	0x01DFF664 MOVZ W1, 0x4
	0x01DFF668 MOV X0, X19
	0x01DFF66C BL 0x1DFD46C
	0x01DFF670 LDR X9, [X19 + 0xC0]
	0x01DFF674 CBZ X9, 0x1DFF708
	0x01DFF678 LDR X8, [X9 + 0x30]
	0x01DFF67C CBZ X8, 0x1DFF708
	0x01DFF680 LDR W10, [X8 + 0x18]
	0x01DFF684 CBZ W10, 0x1DFF70C
	0x01DFF688 LDR X10, [X9 + 0x58]
	0x01DFF68C CBZ X10, 0x1DFF708
	0x01DFF690 LDR W11, [X10 + 0x18]
	0x01DFF694 CBZ W11, 0x1DFF70C
	0x01DFF698 LDR X9, [X9 + 0x60]
	0x01DFF69C CBZ X9, 0x1DFF708
	0x01DFF6A0 LDR W11, [X9 + 0x18]
	0x01DFF6A4 CBZ W11, 0x1DFF70C
	0x01DFF6A8 LDR X11, [X19]
	0x01DFF6AC LDR V0, [X8 + 0x20]
	0x01DFF6B0 LDR V1, [X10 + 0x20]
	0x01DFF6B4 LDR V2, [X9 + 0x20]
	0x01DFF6B8 LDR X8, [X11 + 0x2C8]
	0x01DFF6BC LDR X2, [X11 + 0x2D0]
	0x01DFF6C0 MOV X0, X19
	0x01DFF6C4 MOV W1, W31
	0x01DFF6C8 BLR X8
	0x01DFF6CC LDR X20, [X19 + 0xE8]
	0x01DFF6D0 MOV X0, X19
	0x01DFF6D4 BL 0x1DFD4CC
	0x01DFF6D8 CBZ X20, 0x1DFF708
	0x01DFF6DC MOV X0, X20
	0x01DFF6E0 MOV X1, X31
	0x01DFF6E4 BL 0x3BE13F8
	0x01DFF6E8 LDR X0, [X19 + 0x1E0]
	0x01DFF6EC CBZ X0, 0x1DFF708
	0x01DFF6F0 ADRP X8, 0x22FA000
	0x01DFF6F4 LDR X8, [X8 + 0x630]
	0x01DFF6F8 LDP X20, X19, [X31 + 0x10]
	0x01DFF6FC LDR X1, [X8]
	0x01DFF700 LDR X30, [X31], #0x20
	0x01DFF704 B 0x2AA5220
	0x01DFF708 BL 0x1C16F20
	0x01DFF70C BL 0x1C16F28
	0x01DFF710 SUB X31, X31, 0x30
	0x01DFF714 STP X30, X21, [X31 + 0x10]
	0x01DFF718 STP X20, X19, [X31 + 0x20]
	0x01DFF71C ADRP X21, 0x25D9000
	0x01DFF720 STR W1, [X31 + 0x8]
	0x01DFF724 ADRP X20, 0x22F7000
	0x01DFF728 LDRB W8, [X21 + 0xD4D]
	0x01DFF72C LDR X20, [X20 + 0xE40]
	0x01DFF730 MOV X19, X0
	0x01DFF734 TBNZ X8, 0x0, 0x1DFF770
	0x01DFF738 ADRP X0, 0x22FA000
	0x01DFF73C LDR X0, [X0 + 0x648]
	0x01DFF740 BL 0x1C16CF4
	0x01DFF744 ADRP X0, 0x22FA000
	0x01DFF748 LDR X0, [X0 + 0x660]
	0x01DFF74C BL 0x1C16CF4
	0x01DFF750 ADRP X0, 0x22F6000
	0x01DFF754 LDR X0, [X0 + 0x9A0]
	0x01DFF758 BL 0x1C16CF4
	0x01DFF75C ADRP X0, 0x22F7000
	0x01DFF760 LDR X0, [X0 + 0xE40]
	0x01DFF764 BL 0x1C16CF4
	0x01DFF768 MOVZ W8, 0x1
	0x01DFF76C STRB W8, [X21 + 0xD4D]
	0x01DFF770 LDR X0, [X20]
	0x01DFF774 STR X31, [X31]
	0x01DFF778 ADRP X20, 0x22F6000
	0x01DFF77C LDR W8, [X0 + 0xE0]
	0x01DFF780 LDR X20, [X20 + 0x9A0]
	0x01DFF784 CBNZ W8, 0x1DFF78C
	0x01DFF788 BL 0x1C16DFC
	0x01DFF78C ADD X0, X31, 0x8
	0x01DFF790 MOV X1, X31
	0x01DFF794 BL 0x1E8D840
	0x01DFF798 LDR X8, [X20]
	0x01DFF79C MOV W20, W0
	0x01DFF7A0 LDR W9, [X8 + 0xE0]
	0x01DFF7A4 CBNZ W9, 0x1DFF7B0
	0x01DFF7A8 MOV X0, X8
	0x01DFF7AC BL 0x1C16DFC
	0x01DFF7B0 ADD X1, X31, 0x0
	0x01DFF7B4 MOV W0, W20
	0x01DFF7B8 MOV X2, X31
	0x01DFF7BC BL 0x1DB2598
	0x01DFF7C0 TBZ X0, 0x0, 0x1DFF800
	0x01DFF7C4 LDR X0, [X19 + 0x1E0]
	0x01DFF7C8 CBZ X0, 0x1DFF810
	0x01DFF7CC ADRP X8, 0x22FA000
	0x01DFF7D0 LDR X1, [X31]
	0x01DFF7D4 LDR X8, [X8 + 0x648]
	0x01DFF7D8 LDR X2, [X8]
	0x01DFF7DC BL 0x2AA528C
	0x01DFF7E0 TBZ X0, 0x0, 0x1DFF800
	0x01DFF7E4 LDR X0, [X19 + 0x1E0]
	0x01DFF7E8 CBZ X0, 0x1DFF810
	0x01DFF7EC ADRP X8, 0x22FA000
	0x01DFF7F0 LDR X1, [X31]
	0x01DFF7F4 LDR X8, [X8 + 0x660]
	0x01DFF7F8 LDR X2, [X8]
	0x01DFF7FC BL 0x2AA64F8
	0x01DFF800 LDP X20, X19, [X31 + 0x20]
	0x01DFF804 LDP X30, X21, [X31 + 0x10]
	0x01DFF808 ADD X31, X31, 0x30
	0x01DFF80C RET
	0x01DFF810 BL 0x1C16F20
	0x01DFF814 STR X30, [X31 - 0x20]!
	0x01DFF818 STP X20, X19, [X31 + 0x10]
	0x01DFF81C ADRP X20, 0x25D9000
	0x01DFF820 LDRB W8, [X20 + 0xD4E]
	0x01DFF824 MOV X19, X0
	0x01DFF828 TBNZ X8, 0x0, 0x1DFF840
	0x01DFF82C ADRP X0, 0x22FA000
	0x01DFF830 LDR X0, [X0 + 0x630]
	0x01DFF834 BL 0x1C16CF4
	0x01DFF838 MOVZ W8, 0x1
	0x01DFF83C STRB W8, [X20 + 0xD4E]
	0x01DFF840 MOV X0, X19
	0x01DFF844 MOV X1, X31
	0x01DFF848 BL 0x1DF5AF0
	0x01DFF84C LDR X8, [X19 + 0x38]
	0x01DFF850 CBZ X8, 0x1DFF8A8
	0x01DFF854 LDR W8, [X8 + 0x188]
	0x01DFF858 CMP W8, 0x2
	0x01DFF85C B.NE 0x1DFF89C
	0x01DFF860 LDR X0, [X19 + 0x40]
	0x01DFF864 CBZ X0, 0x1DFF89C
	0x01DFF868 LDRB W8, [X0 + 0x60]
	0x01DFF86C TBNZ X8, 0x1, 0x1DFF89C
	0x01DFF870 MOV X1, X31
	0x01DFF874 BL 0x1E93668
	0x01DFF878 TBZ X0, 0x0, 0x1DFF89C
	0x01DFF87C LDR X0, [X19 + 0x1E0]
	0x01DFF880 CBZ X0, 0x1DFF8A8
	0x01DFF884 ADRP X8, 0x22FA000
	0x01DFF888 LDR X8, [X8 + 0x630]
	0x01DFF88C LDP X20, X19, [X31 + 0x10]
	0x01DFF890 LDR X1, [X8]
	0x01DFF894 LDR X30, [X31], #0x20
	0x01DFF898 B 0x2AA5220
	0x01DFF89C LDP X20, X19, [X31 + 0x10]
	0x01DFF8A0 LDR X30, [X31], #0x20
	0x01DFF8A4 RET
	0x01DFF8A8 BL 0x1C16F20
	0x01DFF8AC STP X30, X21, [X31 - 0x20]!
	0x01DFF8B0 STP X20, X19, [X31 + 0x10]
	0x01DFF8B4 ADRP X21, 0x25D9000
	0x01DFF8B8 ADRP X20, 0x22F9000
	0x01DFF8BC LDRB W8, [X21 + 0xD4F]
	0x01DFF8C0 LDR X20, [X20 + 0xBC0]
	0x01DFF8C4 MOV X19, X0
	0x01DFF8C8 TBNZ X8, 0x0, 0x1DFF8EC
	0x01DFF8CC ADRP X0, 0x22F4000
	0x01DFF8D0 LDR X0, [X0 + 0x970]
	0x01DFF8D4 BL 0x1C16CF4
	0x01DFF8D8 ADRP X0, 0x22F9000
	0x01DFF8DC LDR X0, [X0 + 0xBC0]
	0x01DFF8E0 BL 0x1C16CF4
	0x01DFF8E4 MOVZ W8, 0x1
	0x01DFF8E8 STRB W8, [X21 + 0xD4F]
	0x01DFF8EC MOV X0, X19
	0x01DFF8F0 MOV X1, X31
	0x01DFF8F4 BL 0x1DEA894
	0x01DFF8F8 LDR X0, [X20]
	0x01DFF8FC LDR W8, [X0 + 0xE0]
	0x01DFF900 CBNZ W8, 0x1DFF90C
	0x01DFF904 BL 0x1C16DFC
	0x01DFF908 LDR X0, [X20]
	0x01DFF90C LDR X8, [X0 + 0xB8]
	0x01DFF910 MOV X0, X31
	0x01DFF914 LDP S0, S1, [X8 + 0xB0]
	0x01DFF918 LDP S2, S3, [X8 + 0xB8]
	0x01DFF91C BL 0x3C0D030
	0x01DFF920 MOV X0, X19
	0x01DFF924 BL 0x1DFD8A0
	0x01DFF928 LDR X8, [X19 + 0xC0]
	0x01DFF92C CBZ X8, 0x1DFF9C8
	0x01DFF930 LDR V3, [X8 + 0x4C]
	0x01DFF934 ADRP X21, 0x22F4000
	0x01DFF938 LDR X21, [X21 + 0x970]
	0x01DFF93C FMOV S4, 0.5
	0x01DFF940 FMUL S3, S3, S4
	0x01DFF944 MOV X0, X31
	0x01DFF948 BL 0x3C0CB98
	0x01DFF94C LDR X8, [X20]
	0x01DFF950 MOV X0, X31
	0x01DFF954 LDR X8, [X8 + 0xB8]
	0x01DFF958 LDP S0, S1, [X8]
	0x01DFF95C LDP S2, S3, [X8 + 0x8]
	0x01DFF960 BL 0x3C0D030
	0x01DFF964 LDR X0, [X21]
	0x01DFF968 LDR W8, [X0 + 0xE0]
	0x01DFF96C CBNZ W8, 0x1DFF974
	0x01DFF970 BL 0x1C16DFC
	0x01DFF974 MOV X0, X31
	0x01DFF978 BL 0x3C018E4
	0x01DFF97C TBZ X0, 0x0, 0x1DFF98C
	0x01DFF980 MOV X0, X19
	0x01DFF984 BL 0x1DFD4CC
	0x01DFF988 B 0x1DFF99C
	0x01DFF98C LDR X0, [X19 + 0xD0]
	0x01DFF990 CBZ X0, 0x1DFF9C8
	0x01DFF994 MOV X1, X31
	0x01DFF998 BL 0x3C3F58C
	0x01DFF99C LDR X8, [X19 + 0xC0]
	0x01DFF9A0 CBZ X8, 0x1DFF9C8
	0x01DFF9A4 LDR X8, [X8 + 0x78]
	0x01DFF9A8 CBZ X8, 0x1DFF9C8
	0x01DFF9AC LDR W9, [X8 + 0x18]
	0x01DFF9B0 CBZ W9, 0x1DFF9CC
	0x01DFF9B4 LDR V3, [X8 + 0x20]
	0x01DFF9B8 LDP X20, X19, [X31 + 0x10]
	0x01DFF9BC MOV X0, X31
	0x01DFF9C0 LDP X30, X21, [X31], #0x20
	0x01DFF9C4 B 0x3C0CB98
	0x01DFF9C8 BL 0x1C16F20
	0x01DFF9CC BL 0x1C16F28
	0x01DFF9D0 STP X30, X23, [X31 - 0x30]!
	0x01DFF9D4 STP X22, X21, [X31 + 0x10]
	0x01DFF9D8 STP X20, X19, [X31 + 0x20]
	0x01DFF9DC ADRP X23, 0x25D9000
	0x01DFF9E0 ADRP X22, 0x22FA000
	0x01DFF9E4 ADRP X20, 0x22FA000
	0x01DFF9E8 ADRP X21, 0x22F8000
	0x01DFF9EC LDRB W8, [X23 + 0xD50]
	0x01DFF9F0 LDR X22, [X22 + 0x668]
	0x01DFF9F4 LDR X20, [X20 + 0x670]
	0x01DFF9F8 LDR X21, [X21 + 0x860]
	0x01DFF9FC MOV X19, X0
	0x01DFFA00 TBNZ X8, 0x0, 0x1DFFA30
	0x01DFFA04 ADRP X0, 0x22FA000
	0x01DFFA08 LDR X0, [X0 + 0x670]
	0x01DFFA0C BL 0x1C16CF4
	0x01DFFA10 ADRP X0, 0x22FA000
	0x01DFFA14 LDR X0, [X0 + 0x668]
	0x01DFFA18 BL 0x1C16CF4
	0x01DFFA1C ADRP X0, 0x22F8000
	0x01DFFA20 LDR X0, [X0 + 0x860]
	0x01DFFA24 BL 0x1C16CF4
	0x01DFFA28 MOVZ W8, 0x1
	0x01DFFA2C STRB W8, [X23 + 0xD50]
	0x01DFFA30 ADRP X8, 0xFFFFFFFFFECEC000
	0x01DFFA34 LDR V0, [X8 + 0xBF]
	0x01DFFA38 ADD X8, X19, 0x1B8
	0x01DFFA3C STR V0, [X8]
	0x01DFFA40 LDR X0, [X22]
	0x01DFFA44 BL 0x1C16F10
	0x01DFFA48 LDR X1, [X20]
	0x01DFFA4C MOV X20, X0
	0x01DFFA50 BL 0x2AA4804
	0x01DFFA54 STR X20, [X19 + 0x1E0]
	0x01DFFA58 LDR X0, [X21]
	0x01DFFA5C LDR W8, [X0 + 0xE0]
	0x01DFFA60 CBNZ W8, 0x1DFFA68
	0x01DFFA64 BL 0x1C16DFC
	0x01DFFA68 MOV X0, X19
	0x01DFFA6C LDP X20, X19, [X31 + 0x20]
	0x01DFFA70 LDP X22, X21, [X31 + 0x10]
	0x01DFFA74 MOV X1, X31
	0x01DFFA78 LDP X30, X23, [X31], #0x30
	0x01DFFA7C B 0x1DEAEA0
	0x01DFFA80 STP X30, X19, [X31 - 0x10]!
	0x01DFFA84 AND W1, W1, 0x1
	0x01DFFA88 MOV X2, X31
	0x01DFFA8C MOV X19, X0
	0x01DFFA90 BL 0x1DEB2A4
	0x01DFFA94 LDR W1, [X19 + 0x1A4]
	0x01DFFA98 MOV X0, X19
	0x01DFFA9C BL 0x1DFD46C
	0x01DFFAA0 LDR V0, [X19 + 0x1A8]
	0x01DFFAA4 LDR V1, [X19 + 0x1AC]
	0x01DFFAA8 LDR V2, [X19 + 0x1B0]
	0x01DFFAAC MOV X0, X19
	0x01DFFAB0 BL 0x1DFD530
	0x01DFFAB4 LDRB W1, [X19 + 0x1B4]
	0x01DFFAB8 MOV X0, X19
	0x01DFFABC BL 0x1DFD5FC
	0x01DFFAC0 LDR V0, [X19 + 0x1C8]
	0x01DFFAC4 MOV X0, X19
	0x01DFFAC8 BL 0x1DFD6C0
	0x01DFFACC LDR V0, [X19 + 0x1CC]
	0x01DFFAD0 MOV X0, X19
	0x01DFFAD4 BL 0x1DFD780
	0x01DFFAD8 LDR V0, [X19 + 0x1D0]
	0x01DFFADC MOV X0, X19
	0x01DFFAE0 LDP X30, X19, [X31], #0x10
	0x01DFFAE4 B 0x1DFD840
	0x01DFFAE8 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+64], D15
	003 Move [X31+72], D14
	004 Move [X31+80], D13
	005 Move [X31+88], D12
	006 Move [X31+96], D11
	007 Move [X31+104], D10
	008 Move [X31+112], D9
	009 Move [X31+120], D8
	010 Move [X31+128], X30
	011 Move [X31+144], X28
	012 Move [X31+152], X27
	013 Move [X31+160], X26
	014 Move [X31+168], X25
	015 Move [X31+176], X24
	016 Move [X31+184], X23
	017 Move [X31+192], X22
	018 Move [X31+200], X21
	019 Move [X31+208], X20
	020 Move [X31+216], X19
	021 Move X20, 0x25DA000
	022 Move X24, 0x22F5000
	023 Move W8, [X20+3403]
	024 Move X24, [X24+1432]
	025 Move X19, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {50}
	030 Move X0, 0x22FA000
	031 Move X0, [X0+3104]
	032 Call 0x1C17CF4
	033 Move X0, 0x22FA000
	034 Move X0, [X0+3112]
	035 Call 0x1C17CF4
	036 Move X0, 0x22FA000
	037 Move X0, [X0+3120]
	038 Call 0x1C17CF4
	039 Move X0, 0x22FA000
	040 Move X0, [X0+3128]
	041 Call 0x1C17CF4
	042 Move X0, 0x22FA000
	043 Move X0, [X0+3136]
	044 Call 0x1C17CF4
	045 Move X0, 0x22F5000
	046 Move X0, [X0+1432]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X20+3403], W8
	050 Move X0, [X24]
	051 Move [X31+32], X31
	052 Move [X31+40], X31
	053 Move [X31+48], X31
	054 Move X20, [X19+352]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X20
	060 Move X1, X31
	061 Move X2, X31
	062 Call Object.op_Equality, X0, X1
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfEqual {527}
	067 Move X0, [X19+352]
	068 Compare X0, 0
	069 JumpIfEqual {550}
	070 Move X1, X31
	071 Call NetPlayer.get_isDie, X0
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {527}
	076 Move X0, [X19+352]
	077 Compare X0, 0
	078 JumpIfEqual {550}
	079 Move X1, X31
	080 Call Component.get_transform, X0
	081 Compare X0, 0
	082 JumpIfEqual {550}
	083 Move X1, X31
	084 Call Transform.get_position, X0
	085 Move X0, X19
	086 Move X1, X31
	087 Move V8, V0
	088 Move V9, V1
	089 Move V10, V2
	090 Call Component.get_transform, X0
	091 Compare X0, 0
	092 JumpIfEqual {550}
	093 Move X1, X31
	094 Call Transform.get_position, X0
	095 Subtract S0, S8, S0
	096 Subtract S1, S9, S1
	097 Subtract S2, S10, S2
	098 Move X0, X31
	099 Call Extensions.Flatten, X0
	100 Move X25, 0x25DA000
	101 Move W8, [X25+1925]
	102 Move V8, V0
	103 Move V9, V1
	104 Move V10, V2
	105 Compare W8, 0
	106 JumpIfNotEqual {112}
	107 Move X0, 0x22F5000
	108 Move X0, [X0+1448]
	109 Call 0x1C17CF4
	110 Move W8, 1
	111 Move [X25+1925], W8
	112 Move X20, 0x22F5000
	113 Move X20, [X20+1448]
	114 Move X0, [X20]
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {119}
	118 Call 0x1C17DFC
	119 Move X8, -20004864
	120 Multiply S0, S8, S8
	121 Multiply S1, S9, S9
	122 Move V11, [X8+380]
	123 Move X21, 0x22F5000
	124 Multiply S2, S10, S10
	125 Add S0, S0, S1
	126 Move X21, [X21+1440]
	127 Add S0, S2, S0
	128 NotImplemented "Instruction FSQRT not yet implemented."
	129 NotImplemented "Instruction FCMP not yet implemented."
	130 Move X26, 0x25DA000
	131 NotImplemented "Instruction FDIV not yet implemented."
	132 NotImplemented "Instruction FDIV not yet implemented."
	133 NotImplemented "Instruction FDIV not yet implemented."
	134 Move W8, [X26+1923]
	135 Compare W8, 0
	136 JumpIfNotEqual {142}
	137 Move X0, 0x22F5000
	138 Move X0, [X0+1440]
	139 Call 0x1C17CF4
	140 Move W8, 1
	141 Move [X26+1923], W8
	142 Move X8, [X21]
	143 Move X8, [X8+184]
	144 Move S8, [X8]
	145 Move S9, [X8+4]
	146 Move V10, [X8+8]
	147 Move X8, [X19+192]
	148 Compare X8, 0
	149 JumpIfEqual {550}
	150 Move V12, [X8+64]
	151 Move X0, X19
	152 Move X1, X31
	153 Call Component.get_transform, X0
	154 Compare X0, 0
	155 JumpIfEqual {550}
	156 Move X1, X31
	157 Move [X31+136], S11
	158 Move [X31+144], S12
	159 Call Transform.get_forward, X0
	160 Move X22, 0x25DA000
	161 Move W8, [X22+2596]
	162 Move V11, V0
	163 Move V12, V1
	164 Move V13, V2
	165 Compare W8, 0
	166 JumpIfNotEqual {172}
	167 Move X0, 0x22F5000
	168 Move X0, [X0+1448]
	169 Call 0x1C17CF4
	170 Move W8, 1
	171 Move [X22+2596], W8
	172 Move X0, [X20]
	173 Multiply S0, S8, S8
	174 Multiply S1, S9, S9
	175 Add S0, S0, S1
	176 Multiply S1, S10, S10
	177 Move W8, [X0+224]
	178 Add S15, S1, S0
	179 Multiply S0, S11, S11
	180 Multiply S1, S12, S12
	181 Add S0, S0, S1
	182 Multiply S1, S13, S13
	183 Add S14, S1, S0
	184 Compare W8, 0
	185 JumpIfNotEqual {187}
	186 Call 0x1C17DFC
	187 Move X8, -20008960
	188 Move V1, [X8+4072]
	189 Multiply S0, S15, S14
	190 NotImplemented "Instruction FSQRT not yet implemented."
	191 Move S15, W31
	192 NotImplemented "Instruction FCMP not yet implemented."
	193 Move X0, [X20]
	194 Multiply S1, S8, S11
	195 Multiply S2, S9, S12
	196 Multiply S3, S10, S13
	197 Add S1, S1, S2
	198 Add S1, S3, S1
	199 Move W8, [X0+224]
	200 NotImplemented "Instruction FDIV not yet implemented."
	201 Move S1, 1
	202 Move S2, -1
	203 NotImplemented "Instruction FMIN not yet implemented."
	204 NotImplemented "Instruction FCMP not yet implemented."
	205 NotImplemented "Instruction FCSEL not yet implemented."
	206 Compare W8, 0
	207 JumpIfNotEqual {209}
	208 Call 0x1C17DFC
	209 NotImplemented "Instruction FCVT not yet implemented."
	210 Call 0x3EB2B80
	211 Move X8, -20004864
	212 Move V1, [X8+1096]
	213 NotImplemented "Instruction INVALID not yet implemented."
	214 Multiply S15, S0, S1
	215 Move X0, X19
	216 Move X1, X31
	217 Call Component.get_transform, X0
	218 Move X22, X0
	219 Move X0, X19
	220 Move X1, X31
	221 Call Component.get_transform, X0
	222 Compare X0, 0
	223 JumpIfEqual {550}
	224 Move V0, [X31+140]
	225 Move X1, X31
	226 NotImplemented "Instruction FDIV not yet implemented."
	227 Move [X31+140], S0
	228 Call Transform.get_rotation, X0
	229 Move V11, V0
	230 Move V12, V1
	231 Move V13, V2
	232 Move V0, V8
	233 Move V1, V9
	234 Move V2, V10
	235 Move X0, X31
	236 Move V14, V3
	237 Call Quaternion.LookRotation, X0
	238 Move X0, X19
	239 Move X1, X31
	240 Move V8, V0
	241 Move V9, V1
	242 Move V10, V2
	243 Move V15, V3
	244 Call MobController.get_deltaTime, X0
	245 Move V1, [X31+140]
	246 Move V2, V13
	247 Move V3, V14
	248 Move V4, V8
	249 Multiply S0, S1, S0
	250 Move [X31], S0
	251 Move V0, V11
	252 Move V1, V12
	253 Move V5, V9
	254 Move V6, V10
	255 Move V7, V15
	256 Move X0, X31
	257 Call Quaternion.Slerp, X0, X1, V0
	258 Compare X22, 0
	259 JumpIfEqual {550}
	260 Move X0, X22
	261 Move X1, X31
	262 Call Transform.set_rotation, X0, X1
	263 Move X22, [X19+232]
	264 Move X0, X19
	265 Move X1, X31
	266 Call Component.get_transform, X0
	267 Move V14, [X31+136]
	268 Compare X0, 0
	269 JumpIfEqual {550}
	270 Move X1, X31
	271 Call Transform.get_position, X0
	272 Move X0, X19
	273 Move X1, X31
	274 Move V8, V0
	275 Move V9, V1
	276 Move V10, V2
	277 Call Component.get_transform, X0
	278 Compare X0, 0
	279 JumpIfEqual {550}
	280 Move X1, X31
	281 Call Transform.get_forward, X0
	282 Compare X22, 0
	283 JumpIfEqual {550}
	284 Move S3, 10
	285 Multiply S2, S2, S3
	286 Multiply S1, S1, S3
	287 Multiply S0, S0, S3
	288 Add S2, S10, S2
	289 Add S1, S9, S1
	290 Add S0, S8, S0
	291 Move X0, X22
	292 Move X1, X31
	293 Call NavMeshAgent.SetDestination, X0, X1
	294 Move X0, [X19+232]
	295 Compare X0, 0
	296 JumpIfEqual {550}
	297 Move X1, X31
	298 Call NavMeshAgent.get_pathPending, X0
	299 Move TEMP, X0
	300 And TEMP, TEMP, 1
	301 Compare TEMP, 1
	302 JumpIfNotEqual {338}
	303 Move X22, [X19+232]
	304 Move X0, X19
	305 Move X1, X31
	306 Call Component.get_transform, X0
	307 Compare X0, 0
	308 JumpIfEqual {550}
	309 Move X1, X31
	310 Call Transform.get_forward, X0
	311 Move X8, [X19+192]
	312 Compare X8, 0
	313 JumpIfEqual {550}
	314 Move X8, [X8+56]
	315 Compare X8, 0
	316 JumpIfEqual {550}
	317 Move W9, [X8+24]
	318 Compare W9, 0
	319 JumpIfEqual {555}
	320 Move V11, [X8+32]
	321 Move X0, X19
	322 Move X1, X31
	323 Move V8, V0
	324 Move V9, V1
	325 Move V10, V2
	326 Call MobController.get_deltaTime, X0
	327 Compare X22, 0
	328 JumpIfEqual {550}
	329 Multiply S1, S10, S11
	330 Multiply S3, S9, S11
	331 Multiply S4, S8, S11
	332 Multiply S2, S1, S0
	333 Multiply S1, S3, S0
	334 Multiply S0, S4, S0
	335 Move X0, X22
	336 Move X1, X31
	337 Call NavMeshAgent.Move, X0, X1
	338 Move X0, X19
	339 Call RedGreenController.get__attackSphereCenter, X0
	340 Move X8, [X19+192]
	341 Compare X8, 0
	342 JumpIfEqual {550}
	343 Move X9, 0x22FA000
	344 Move X9, [X9+3136]
	345 Move V8, V0
	346 Move V0, [X8+76]
	347 Move V9, V1
	348 Move X0, [X9]
	349 Move S1, 0.5
	350 Move V10, V2
	351 Multiply S11, S0, S1
	352 Move W8, [X0+224]
	353 Compare W8, 0
	354 JumpIfNotEqual {356}
	355 Call 0x1C17DFC
	356 Move X0, X19
	357 Move V0, V8
	358 Move V1, V9
	359 Move V2, V10
	360 Move V3, V11
	361 Move X1, X31
	362 Call MobDetectionUtil.GetPlayersInRange, X0, X1, V0
	363 Compare X0, 0
	364 JumpIfEqual {550}
	365 Move X8, 0x22FA000
	366 Move X8, [X8+3128]
	367 Move X1, [X8]
	368 Add X8, X31, 8
	369 Call List`1<Object>.GetEnumerator, X0
	370 NotImplemented "Instruction LDUR not yet implemented."
	371 Move X8, [X31+24]
	372 Move X27, 0x22FA000
	373 Move X27, [X27+3112]
	374 Move [X31+2], V0
	375 Move [X31+48], X8
	376 Move W28, 1
	377 Move X1, [X27]
	378 Add X0, X31, 32
	379 Call Enumerator<Object>.MoveNext, X0
	380 Move TEMP, X0
	381 And TEMP, TEMP, 1
	382 Compare TEMP, 1
	383 JumpIfNotEqual {479}
	384 Move X0, [X24]
	385 Move X22, [X31+48]
	386 Move X23, [X19+352]
	387 Move W8, [X0+224]
	388 Compare W8, 0
	389 JumpIfNotEqual {391}
	390 Call 0x1C17DFC
	391 Move X0, X23
	392 Move X1, X22
	393 Move X2, X31
	394 Call Object.op_Equality, X0, X1
	395 Move TEMP, X0
	396 And TEMP, TEMP, 1
	397 Compare TEMP, 1
	398 JumpIfNotEqual {377}
	399 Compare X22, 0
	400 JumpIfEqual {553}
	401 Move X0, [X22+144]
	402 Compare X0, 0
	403 JumpIfEqual {554}
	404 Move X1, X31
	405 Call Transform.get_position, X0
	406 Move V8, V0
	407 Move V9, V1
	408 Move V10, V2
	409 Move X0, X19
	410 Move X1, X31
	411 Call Component.get_transform, X0
	412 Compare X0, 0
	413 JumpIfEqual {551}
	414 Move X1, X31
	415 Call Transform.get_position, X0
	416 Move W8, [X25+1925]
	417 Move V11, V0
	418 Move V12, V1
	419 Move V13, V2
	420 Compare W8, 0
	421 JumpIfNotEqual {425}
	422 Move X0, X20
	423 Call 0x1C17CF4
	424 Move [X25+1925], W28
	425 Move X0, [X20]
	426 Move W8, [X0+224]
	427 Compare W8, 0
	428 JumpIfNotEqual {430}
	429 Call 0x1C17DFC
	430 Subtract S0, S8, S11
	431 Subtract S1, S9, S12
	432 Subtract S2, S10, S13
	433 Multiply S3, S0, S0
	434 Multiply S4, S1, S1
	435 Add S3, S3, S4
	436 Multiply S4, S2, S2
	437 Add S3, S4, S3
	438 NotImplemented "Instruction FSQRT not yet implemented."
	439 NotImplemented "Instruction FCMP not yet implemented."
	440 NotImplemented "Instruction FDIV not yet implemented."
	441 NotImplemented "Instruction FDIV not yet implemented."
	442 NotImplemented "Instruction FDIV not yet implemented."
	443 Move W8, [X26+1923]
	444 Compare W8, 0
	445 JumpIfNotEqual {449}
	446 Move X0, X21
	447 Call 0x1C17CF4
	448 Move [X26+1923], W28
	449 Move X8, [X21]
	450 Move X8, [X8+184]
	451 Move S0, [X8]
	452 Move S1, [X8+4]
	453 Move V2, [X8+8]
	454 Move X8, [X19+192]
	455 Compare X8, 0
	456 JumpIfEqual {552}
	457 Move X9, [X19+64]
	458 Compare X9, 0
	459 JumpIfEqual {464}
	460 Move X9, [X9+32]
	461 Compare X9, 0
	462 JumpIfEqual {464}
	463 Move W6, [X9]
	464 Move X6, X31
	465 Move V3, [X8+80]
	466 Move W1, [X8+36]
	467 Move X3, [X8+184]
	468 Move X5, [X8+24]
	469 Move W8, [X19+104]
	470 Move X2, [X19+208]
	471 Multiply S0, S0, S3
	472 Multiply S1, S1, S3
	473 Multiply S2, S2, S3
	474 NotImplemented "Instruction BFM not yet implemented."
	475 Move X0, X22
	476 Move X4, X3
	477 Move X7, X31
	478 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5, X6, X7
	479 Move X8, 0x22FA000
	480 Move X8, [X8+3104]
	481 Add X0, X31, 32
	482 Move X1, [X8]
	483 Call Enumerator<Object>.Dispose, X0
	484 Move X0, X19
	485 Call RedGreenController.get_spawnedPosition, X0
	486 Move X0, X19
	487 Move X1, X31
	488 Move V8, V0
	489 Move V9, V1
	490 Move V10, V2
	491 Call Component.get_transform, X0
	492 Compare X0, 0
	493 JumpIfEqual {550}
	494 Move X1, X31
	495 Call Transform.get_position, X0
	496 Move X21, 0x25DA000
	497 Move W8, [X21+2140]
	498 Move V11, V0
	499 Move V12, V1
	500 Move V13, V2
	501 Compare W8, 0
	502 JumpIfNotEqual {508}
	503 Move X0, 0x22F5000
	504 Move X0, [X0+1448]
	505 Call 0x1C17CF4
	506 Move W8, 1
	507 Move [X21+2140], W8
	508 Move X0, [X20]
	509 Move W8, [X0+224]
	510 Compare W8, 0
	511 JumpIfNotEqual {513}
	512 Call 0x1C17DFC
	513 Move X8, [X19+192]
	514 Compare X8, 0
	515 JumpIfEqual {550}
	516 Subtract S0, S8, S11
	517 Subtract S1, S9, S12
	518 Subtract S2, S10, S13
	519 Multiply S0, S0, S0
	520 Multiply S1, S1, S1
	521 Move V3, [X8+128]
	522 Multiply S2, S2, S2
	523 Add S0, S0, S1
	524 Add S0, S2, S0
	525 NotImplemented "Instruction FSQRT not yet implemented."
	526 NotImplemented "Instruction FCMP not yet implemented."
	527 Move X0, X19
	528 Call RedGreenController.SetBackToPosition, X0
	529 Move X20, [X31+208]
	530 Move X19, [X31+216]
	531 Move X22, [X31+192]
	532 Move X21, [X31+200]
	533 Move X24, [X31+176]
	534 Move X23, [X31+184]
	535 Move X26, [X31+160]
	536 Move X25, [X31+168]
	537 Move X28, [X31+144]
	538 Move X27, [X31+152]
	539 Move X30, [X31+128]
	540 Move D9, [X31+112]
	541 Move D8, [X31+120]
	542 Move D11, [X31+96]
	543 Move D10, [X31+104]
	544 Move D13, [X31+80]
	545 Move D12, [X31+88]
	546 Move D15, [X31+64]
	547 Move D14, [X31+72]
	548 Add X31, X31, 224
	549 Return 
	550 Call 0x1C17F20
	551 Call 0x1C17F20
	552 Call 0x1C17F20
	553 Call 0x1C17F20
	554 Call 0x1C17F20
	555 Call 0x1C17F28
	556 Move X21, X0
	557 NotImplemented "Instruction CMP not yet implemented."
	558 Move X0, X21
	559 Call 0x3EB2AD0
	560 Move X22, [X0]
	561 Call 0x3EB2AE0
	562 Move X8, 0x22FA000
	563 Move X8, [X8+3104]
	564 Add X0, X31, 32
	565 Move X1, [X8]
	566 Call Enumerator<Object>.Dispose, X0
	567 Compare X22, 0
	568 JumpIfEqual {484}
	569 Move X0, X22
	570 Call 0x1C17F18
	571 Move X22, X31
	572 Move X21, X0
	573 Move X8, 0x22FA000
	574 Move X8, [X8+3104]
	575 Move X1, [X8]
	576 Add X0, X31, 32
	577 Call Enumerator<Object>.Dispose, X0
	578 Compare X22, 0
	579 JumpIfNotEqual {582}
	580 Move X0, X21
	581 Call 0x1D2D690
	582 Move X0, X22
	583 Call 0x1C17F18
	584 Call 0x1991590

Method: System.Void SetBackToPosition()

Disassembly:
	0x01E00638 MOV X2, X31
	0x01E0063C LDR X8, [X8 + 0xB8]
	0x01E00640 LDR W1, [X8 + 0x10]
	0x01E00644 BL 0x3C15CD8
	0x01E00648 LDR V0, [X19 + 0x50]
	0x01E0064C FCMP S0, 0x0
	0x01E00650 B.LS 0x1E00664
	0x01E00654 LDP X20, X19, [X31 + 0x20]
	0x01E00658 LDP X30, X21, [X31 + 0x10]
	0x01E0065C LDR V8, [X31], #0x30
	0x01E00660 RET
	0x01E00664 LDR X0, [X19 + 0x20]
	0x01E00668 STP W31, W31, [X19 + 0x4C]
	0x01E0066C CBZ X0, 0x1E00690
	0x01E00670 ADRP X8, 0x22F9000
	0x01E00674 LDR X8, [X8 + 0x6F0]
	0x01E00678 LDP X20, X19, [X31 + 0x20]
	0x01E0067C LDP X30, X21, [X31 + 0x10]
	0x01E00680 MOV X2, X31
	0x01E00684 LDR X1, [X8]
	0x01E00688 LDR V8, [X31], #0x30
	0x01E0068C B 0x3C14E80
	0x01E00690 BL 0x1C16F20
	0x01E00694 STR X30, [X31 - 0x20]!
	0x01E00698 STP X20, X19, [X31 + 0x10]
	0x01E0069C ADRP X20, 0x25D8000
	0x01E006A0 ADRP X19, 0x22F8000
	0x01E006A4 LDRB W8, [X20 + 0xD5B]
	0x01E006A8 LDR X19, [X19 + 0xD8]
	0x01E006AC TBNZ X8, 0x0, 0x1E006C4
	0x01E006B0 ADRP X0, 0x22F8000
	0x01E006B4 LDR X0, [X0 + 0xD8]
	0x01E006B8 BL 0x1C16CF4
	0x01E006BC MOVZ W8, 0x1
	0x01E006C0 STRB W8, [X20 + 0xD5B]
	0x01E006C4 LDR X0, [X19]
	0x01E006C8 LDR W8, [X0 + 0xE0]
	0x01E006CC CBNZ W8, 0x1E006D8
	0x01E006D0 BL 0x1C16DFC
	0x01E006D4 LDR X0, [X19]
	0x01E006D8 LDR X8, [X0 + 0xB8]
	0x01E006DC LDR X9, [X8 + 0x18]
	0x01E006E0 CBZ X9, 0x1E0070C
	0x01E006E4 LDR X0, [X9 + 0x20]
	0x01E006E8 MOVZ W10, 0x3F800000
	0x01E006EC STR W10, [X9 + 0x48]
	0x01E006F0 CBZ X0, 0x1E0070C
	0x01E006F4 LDR W1, [X8 + 0x8]
	0x01E006F8 LDP X20, X19, [X31 + 0x10]
	0x01E006FC FMOV S0, 1
	0x01E00700 MOV X2, X31
	0x01E00704 LDR X30, [X31], #0x20
	0x01E00708 B 0x3C15CD8
	0x01E0070C BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25D9000
	005 Move W8, [X20+3404]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22FA000
	012 Move X0, [X0+1584]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3404], W8
	016 Move W1, 4
	017 Move X0, X19
	018 Call RedGreenController.set_phase, X0, X1
	019 Move X9, [X19+192]
	020 Compare X9, 0
	021 JumpIfEqual {68}
	022 Move X8, [X9+48]
	023 Compare X8, 0
	024 JumpIfEqual {68}
	025 Move W10, [X8+24]
	026 Compare W10, 0
	027 JumpIfEqual {69}
	028 Move X10, [X9+88]
	029 Compare X10, 0
	030 JumpIfEqual {68}
	031 Move W11, [X10+24]
	032 Compare W11, 0
	033 JumpIfEqual {69}
	034 Move X9, [X9+96]
	035 Compare X9, 0
	036 JumpIfEqual {68}
	037 Move W11, [X9+24]
	038 Compare W11, 0
	039 JumpIfEqual {69}
	040 Move X11, [X19]
	041 Move V0, [X8+32]
	042 Move V1, [X10+32]
	043 Move V2, [X9+32]
	044 Move X8, [X11+712]
	045 Move X2, [X11+720]
	046 Move X0, X19
	047 Move W1, W31
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X20, [X19+232]
	050 Move X0, X19
	051 Call RedGreenController.get_spawnedPosition, X0
	052 Compare X20, 0
	053 JumpIfEqual {68}
	054 Move X0, X20
	055 Move X1, X31
	056 Call NavMeshAgent.SetDestination, X0, X1
	057 Move X0, [X19+480]
	058 Compare X0, 0
	059 JumpIfEqual {68}
	060 Move X8, 0x22FA000
	061 Move X8, [X8+1584]
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X1, [X8]
	065 Move X30, [X31+32]
	066 Call Dictionary`2<Object, Object>.Clear, X0
	067 Return 
	068 Call 0x1C17F20
	069 Call 0x1C17F28

Method: System.Void UpdateBackToPosition()

Disassembly:
	0x01DFFAEC MOV X1, X31
	0x01DFFAF0 MOV X19, X0
	0x01DFFAF4 BL 0x1DEB39C
	0x01DFFAF8 MOV X0, X19
	0x01DFFAFC BL 0x1DFD40C
	0x01DFFB00 STR W0, [X19 + 0x1A4]
	0x01DFFB04 MOV X0, X19
	0x01DFFB08 BL 0x1DFD4CC
	0x01DFFB0C MOV X0, X19
	0x01DFFB10 STR S0, [X19 + 0x1A8]
	0x01DFFB14 STR S1, [X19 + 0x1AC]
	0x01DFFB18 STR S2, [X19 + 0x1B0]
	0x01DFFB1C BL 0x1DFD594
	0x01DFFB20 AND W8, W0, 0x1
	0x01DFFB24 MOV X0, X19
	0x01DFFB28 STRB W8, [X19 + 0x1B4]
	0x01DFFB2C BL 0x1DFD660
	0x01DFFB30 MOV X0, X19
	0x01DFFB34 STR S0, [X19 + 0x1C8]
	0x01DFFB38 BL 0x1DFD720
	0x01DFFB3C MOV X0, X19
	0x01DFFB40 STR S0, [X19 + 0x1CC]
	0x01DFFB44 BL 0x1DFD7E0
	0x01DFFB48 STR S0, [X19 + 0x1D0]
	0x01DFFB4C LDP X30, X19, [X31], #0x10
	0x01DFFB50 RET
	0x01DFFB54 STR X30, [X31 - 0x20]!
	0x01DFFB58 STP X20, X19, [X31 + 0x10]
	0x01DFFB5C MOV X19, X0
	0x01DFFB60 LDR X0, [X0 + 0x100]
	0x01DFFB64 CBZ X0, 0x1DFFBBC
	0x01DFFB68 MOV W20, W1
	0x01DFFB6C MOV X1, X31
	0x01DFFB70 BL 0x3BFCC80
	0x01DFFB74 TBZ X20, 0x0, 0x1DFFB94
	0x01DFFB78 TBNZ X0, 0x0, 0x1DFFBB0
	0x01DFFB7C LDR X0, [X19 + 0x100]
	0x01DFFB80 CBZ X0, 0x1DFFBBC
	0x01DFFB84 LDP X20, X19, [X31 + 0x10]
	0x01DFFB88 MOV X1, X31
	0x01DFFB8C LDR X30, [X31], #0x20
	0x01DFFB90 B 0x3BFCAC0
	0x01DFFB94 TBZ X0, 0x0, 0x1DFFBB0
	0x01DFFB98 LDR X0, [X19 + 0x100]
	0x01DFFB9C CBZ X0, 0x1DFFBBC
	0x01DFFBA0 LDP X20, X19, [X31 + 0x10]
	0x01DFFBA4 MOV X1, X31
	0x01DFFBA8 LDR X30, [X31], #0x20
	0x01DFFBAC B 0x3BFCC04
	0x01DFFBB0 LDP X20, X19, [X31 + 0x10]
	0x01DFFBB4 LDR X30, [X31], #0x20
	0x01DFFBB8 RET
	0x01DFFBBC BL 0x1C16F20
	0x01DFFBC0 STP D11, D10, [X31 - 0x60]!
	0x01DFFBC4 STP D9, D8, [X31 + 0x10]
	0x01DFFBC8 STR X30, [X31 + 0x20]
	0x01DFFBCC STP X24, X23, [X31 + 0x30]
	0x01DFFBD0 STP X22, X21, [X31 + 0x40]
	0x01DFFBD4 STP X20, X19, [X31 + 0x50]
	0x01DFFBD8 LDRB W8, [X0 + 0x128]
	0x01DFFBDC CBZ W8, 0x1DFFC94
	0x01DFFBE0 LDR X8, [X0 + 0x120]
	0x01DFFBE4 MOV X19, X0

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move W1, 1
	011 Move X19, X0
	012 Call RedGreenController.UpdateDetectingPlayer, X0, X1
	013 Move X0, X19
	014 Move X1, X31
	015 Call Component.get_transform, X0
	016 Compare X0, 0
	017 JumpIfEqual {78}
	018 Move X1, X31
	019 Call Transform.get_position, X0
	020 Move X0, X19
	021 Move V8, V0
	022 Move V9, V1
	023 Move V10, V2
	024 Call RedGreenController.get_spawnedPosition, X0
	025 Move X20, 0x25DA000
	026 Move W8, [X20+2140]
	027 Move V11, V0
	028 Move V12, V1
	029 Move V13, V2
	030 Compare W8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, 0x22F5000
	033 Move X0, [X0+1448]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+2140], W8
	037 Move X8, 0x22F5000
	038 Move X8, [X8+1448]
	039 Subtract S11, S8, S11
	040 Subtract S9, S9, S12
	041 Subtract S8, S10, S13
	042 Move X0, [X8]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Multiply S0, S11, S11
	048 Multiply S1, S9, S9
	049 Move X8, -20004864
	050 Add S0, S0, S1
	051 Move V1, [X8+188]
	052 Multiply S2, S8, S8
	053 Add S0, S2, S0
	054 NotImplemented "Instruction FSQRT not yet implemented."
	055 NotImplemented "Instruction FCMP not yet implemented."
	056 Move X0, X19
	057 Move X20, [X31+64]
	058 Move X19, [X31+72]
	059 Move X30, [X31+48]
	060 Move D9, [X31+32]
	061 Move D8, [X31+40]
	062 Move D11, [X31+16]
	063 Move D10, [X31+24]
	064 Move D13, [X31+80]
	065 Move D12, [X31+88]
	066 Call RedGreenController.SetStanding, X0
	067 Return 
	068 Move X20, [X31+64]
	069 Move X19, [X31+72]
	070 Move X30, [X31+48]
	071 Move D9, [X31+32]
	072 Move D8, [X31+40]
	073 Move D11, [X31+16]
	074 Move D10, [X31+24]
	075 Move D13, [X31+80]
	076 Move D12, [X31+88]
	077 Return 
	078 Call 0x1C17F20

Method: System.Void HandlePlayerLeft(Fusion.PlayerRef player)

Disassembly:
	0x01E00710 STR D8, [X31 - 0x20]!
	0x01E00714 STR X30, [X31 + 0x8]
	0x01E00718 STP X20, X19, [X31 + 0x10]
	0x01E0071C ADRP X20, 0x25D8000
	0x01E00720 ADRP X19, 0x22F8000
	0x01E00724 LDRB W8, [X20 + 0xD5C]
	0x01E00728 LDR X19, [X19 + 0xD8]
	0x01E0072C MOV V8.16B, V0.16B
	0x01E00730 TBNZ X8, 0x0, 0x1E00754
	0x01E00734 ADRP X0, 0x22F8000
	0x01E00738 LDR X0, [X0 + 0xD8]
	0x01E0073C BL 0x1C16CF4
	0x01E00740 ADRP X0, 0x22F9000
	0x01E00744 LDR X0, [X0 + 0x6F0]
	0x01E00748 BL 0x1C16CF4
	0x01E0074C MOVZ W8, 0x1
	0x01E00750 STRB W8, [X20 + 0xD5C]
	0x01E00754 LDR X0, [X19]
	0x01E00758 LDR W8, [X0 + 0xE0]
	0x01E0075C CBNZ W8, 0x1E00768
	0x01E00760 BL 0x1C16DFC
	0x01E00764 LDR X0, [X19]
	0x01E00768 LDR X8, [X0 + 0xB8]
	0x01E0076C LDR X8, [X8 + 0x18]
	0x01E00770 CBZ X8, 0x1E007A0
	0x01E00774 LDR X0, [X8 + 0x20]
	0x01E00778 STR S8, [X8 + 0x50]
	0x01E0077C CBZ X0, 0x1E007A0
	0x01E00780 ADRP X8, 0x22F9000
	0x01E00784 LDR X8, [X8 + 0x6F0]
	0x01E00788 LDP X20, X19, [X31 + 0x10]
	0x01E0078C LDR X30, [X31 + 0x8]
	0x01E00790 MOV X2, X31
	0x01E00794 LDR X1, [X8]
	0x01E00798 LDR V8, [X31], #0x20
	0x01E0079C B 0x3C14E3C
	0x01E007A0 BL 0x1C16F20
	0x01E007A4 STR D10, [X31 - 0x50]!
	0x01E007A8 STP D9, D8, [X31 + 0x8]
	0x01E007AC STR X30, [X31 + 0x18]
	0x01E007B0 STP X24, X23, [X31 + 0x20]
	0x01E007B4 STP X22, X21, [X31 + 0x30]
	0x01E007B8 STP X20, X19, [X31 + 0x40]
	0x01E007BC ADRP X24, 0x25D8000
	0x01E007C0 ADRP X23, 0x22F8000
	0x01E007C4 LDRB W8, [X24 + 0xD5D]
	0x01E007C8 LDR X23, [X23 + 0xD8]
	0x01E007CC MOV W22, W3
	0x01E007D0 MOV X19, X2
	0x01E007D4 MOV X20, X1
	0x01E007D8 MOV X21, X0
	0x01E007DC MOV V8.16B, V2.16B
	0x01E007E0 MOV V9.16B, V1.16B
	0x01E007E4 MOV V10.16B, V0.16B
	0x01E007E8 TBNZ X8, 0x0, 0x1E0080C
	0x01E007EC ADRP X0, 0x22F9000
	0x01E007F0 LDR X0, [X0 + 0x6F8]
	0x01E007F4 BL 0x1C16CF4
	0x01E007F8 ADRP X0, 0x22F8000
	0x01E007FC LDR X0, [X0 + 0xD8]
	0x01E00800 BL 0x1C16CF4
	0x01E00804 MOVZ W8, 0x1
	0x01E00808 STRB W8, [X24 + 0xD5D]
	0x01E0080C LDR X0, [X23]
	0x01E00810 TBZ X22, 0x0, 0x1E0085C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25D9000
	007 Move [X31+8], W1
	008 Move X20, 0x22F7000
	009 Move W8, [X21+3405]
	010 Move X20, [X20+3648]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x22FA000
	017 Move X0, [X0+1608]
	018 Call 0x1C17CF4
	019 Move X0, 0x22FA000
	020 Move X0, [X0+1632]
	021 Call 0x1C17CF4
	022 Move X0, 0x22F6000
	023 Move X0, [X0+2464]
	024 Call 0x1C17CF4
	025 Move X0, 0x22F7000
	026 Move X0, [X0+3648]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+3405], W8
	030 Move X0, [X20]
	031 Move [X31], X31
	032 Move X20, 0x22F6000
	033 Move W8, [X0+224]
	034 Move X20, [X20+2464]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Add X0, X31, 8
	039 Move X1, X31
	040 Call PlayerRef.get_PlayerId, X0
	041 Move X8, [X20]
	042 Move W20, W0
	043 Move W9, [X8+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {48}
	046 Move X0, X8
	047 Call 0x1C17DFC
	048 Add X1, X31, 0
	049 Move W0, W20
	050 Move X2, X31
	051 Call NetPlayer.TryGetPlayerByID, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {76}
	056 Move X0, [X19+480]
	057 Compare X0, 0
	058 JumpIfEqual {82}
	059 Move X8, 0x22FA000
	060 Move X1, [X31]
	061 Move X8, [X8+1608]
	062 Move X2, [X8]
	063 Call Dictionary`2<Object, Object>.ContainsKey, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {76}
	068 Move X0, [X19+480]
	069 Compare X0, 0
	070 JumpIfEqual {82}
	071 Move X8, 0x22FA000
	072 Move X1, [X31]
	073 Move X8, [X8+1632]
	074 Move X2, [X8]
	075 Call Dictionary`2<Object, Object>.Remove, X0, X1
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X30, [X31+16]
	079 Move X21, [X31+24]
	080 Add X31, X31, 48
	081 Return 
	082 Call 0x1C17F20

Method: System.Void StateAuthorityChanged()

Disassembly:
	0x01E00814 LDR W8, [X0 + 0xE0]
	0x01E00818 CBNZ W8, 0x1E00824
	0x01E0081C BL 0x1C16DFC
	0x01E00820 LDR X0, [X23]
	0x01E00824 LDR X8, [X0 + 0xB8]
	0x01E00828 LDR X8, [X8 + 0x18]
	0x01E0082C CBZ X8, 0x1E008B0
	0x01E00830 LDR X0, [X8 + 0x38]
	0x01E00834 CBZ X0, 0x1E008B0
	0x01E00838 ADRP X8, 0x22F9000
	0x01E0083C LDR X8, [X8 + 0x6F8]
	0x01E00840 LDR X1, [X8]
	0x01E00844 BL 0x24F1410
	0x01E00848 LDR X0, [X23]
	0x01E0084C LDR X8, [X0 + 0xB8]
	0x01E00850 LDR X8, [X8 + 0x18]
	0x01E00854 CBZ X8, 0x1E008B0
	0x01E00858 STR X31, [X8 + 0x40]
	0x01E0085C LDR W8, [X0 + 0xE0]
	0x01E00860 CBNZ W8, 0x1E00868
	0x01E00864 BL 0x1C16DFC
	0x01E00868 FMOV S0, 1
	0x01E0086C MOV V1.16B, V10.16B
	0x01E00870 MOV X0, X21
	0x01E00874 BL 0x1E008B4
	0x01E00878 FMOV S0, 1
	0x01E0087C MOV V1.16B, V9.16B
	0x01E00880 MOV X0, X20
	0x01E00884 BL 0x1E008B4
	0x01E00888 MOV V1.16B, V8.16B
	0x01E0088C MOV X0, X19
	0x01E00890 LDP X20, X19, [X31 + 0x40]
	0x01E00894 LDP X22, X21, [X31 + 0x30]
	0x01E00898 LDP X24, X23, [X31 + 0x20]
	0x01E0089C LDR X30, [X31 + 0x18]
	0x01E008A0 LDP D9, D8, [X31 + 0x8]
	0x01E008A4 FMOV S0, W31
	0x01E008A8 LDR V10, [X31], #0x50

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25D9000
	005 Move W8, [X20+3406]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22FA000
	012 Move X0, [X0+1584]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3406], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call MobController.StateAuthorityChanged, X0
	019 Move X8, [X19+56]
	020 Compare X8, 0
	021 JumpIfEqual {53}
	022 Move W8, [X8+392]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X0, [X19+64]
	025 Compare X0, 0
	026 JumpIfEqual {49}
	027 Move W8, [X0+96]
	028 Move TEMP, X8
	029 And TEMP, TEMP, 2
	030 Compare TEMP, 2
	031 JumpIfEqual {49}
	032 Move X1, X31
	033 Call NetworkObject.get_HasStateAuthority, X0
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {49}
	038 Move X0, [X19+480]
	039 Compare X0, 0
	040 JumpIfEqual {53}
	041 Move X8, 0x22FA000
	042 Move X8, [X8+1584]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X1, [X8]
	046 Move X30, [X31+32]
	047 Call Dictionary`2<Object, Object>.Clear, X0
	048 Return 
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Return 
	053 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01E008AC B 0x1E008B4
	0x01E008B0 BL 0x1C16F20
	0x01E008B4 STP D9, D8, [X31 - 0x30]!
	0x01E008B8 STP X30, X21, [X31 + 0x10]
	0x01E008BC STP X20, X19, [X31 + 0x20]
	0x01E008C0 ADRP X21, 0x25D8000
	0x01E008C4 ADRP X20, 0x22F8000
	0x01E008C8 LDRB W8, [X21 + 0xD60]
	0x01E008CC LDR X20, [X20 + 0xD8]
	0x01E008D0 MOV X19, X0
	0x01E008D4 MOV V8.16B, V1.16B
	0x01E008D8 MOV V9.16B, V0.16B
	0x01E008DC TBNZ X8, 0x0, 0x1E0090C
	0x01E008E0 ADRP X0, 0x22F9000
	0x01E008E4 LDR X0, [X0 + 0x700]
	0x01E008E8 BL 0x1C16CF4
	0x01E008EC ADRP X0, 0x22F9000
	0x01E008F0 LDR X0, [X0 + 0x708]
	0x01E008F4 BL 0x1C16CF4
	0x01E008F8 ADRP X0, 0x22F8000
	0x01E008FC LDR X0, [X0 + 0xD8]
	0x01E00900 BL 0x1C16CF4
	0x01E00904 MOVZ W8, 0x1
	0x01E00908 STRB W8, [X21 + 0xD60]
	0x01E0090C LDR X0, [X20]
	0x01E00910 LDR W8, [X0 + 0xE0]
	0x01E00914 CBNZ W8, 0x1E00920
	0x01E00918 BL 0x1C16DFC
	0x01E0091C LDR X0, [X20]
	0x01E00920 LDR X8, [X0 + 0xB8]
	0x01E00924 LDR X8, [X8 + 0x18]
	0x01E00928 CBZ X8, 0x1E00984
	0x01E0092C ADRP X9, 0x22F9000
	0x01E00930 LDR X9, [X9 + 0x700]
	0x01E00934 LDR X20, [X8 + 0x38]
	0x01E00938 LDR X0, [X9]
	0x01E0093C BL 0x1C16F10
	0x01E00940 MOVZ W8, 0x3F000000
	0x01E00944 MOV X1, X31
	0x01E00948 MOV X21, X0
	0x01E0094C STR W8, [X0 + 0x14]
	0x01E00950 BL 0x33BDD8C
	0x01E00954 STP S9, S8, [X21 + 0x10]
	0x01E00958 STR X19, [X21 + 0x18]
	0x01E0095C CBZ X20, 0x1E00984
	0x01E00960 ADRP X8, 0x22F9000
	0x01E00964 LDR X8, [X8 + 0x708]
	0x01E00968 MOV X0, X20
	0x01E0096C MOV X1, X21
	0x01E00970 LDP X20, X19, [X31 + 0x20]
	0x01E00974 LDR X2, [X8]
	0x01E00978 LDP X30, X21, [X31 + 0x10]
	0x01E0097C LDP D9, D8, [X31], #0x30
	0x01E00980 B 0x24F1750
	0x01E00984 BL 0x1C16F20
	0x01E00988 STR D8, [X31 - 0x30]!
	0x01E0098C STR X30, [X31 + 0x8]
	0x01E00990 STP X22, X21, [X31 + 0x10]
	0x01E00994 STP X20, X19, [X31 + 0x20]
	0x01E00998 ADRP X22, 0x25D8000
	0x01E0099C ADRP X21, 0x22F8000
	0x01E009A0 LDRB W8, [X22 + 0xD5E]
	0x01E009A4 LDR X21, [X21 + 0xD8]
	0x01E009A8 MOV W20, W1
	0x01E009AC MOV X19, X0
	0x01E009B0 MOV V8.16B, V0.16B
	0x01E009B4 TBNZ X8, 0x0, 0x1E009D8
	0x01E009B8 ADRP X0, 0x22F9000
	0x01E009BC LDR X0, [X0 + 0x6F8]
	0x01E009C0 BL 0x1C16CF4
	0x01E009C4 ADRP X0, 0x22F8000
	0x01E009C8 LDR X0, [X0 + 0xD8]
	0x01E009CC BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25D9000
	006 Move X20, 0x22F9000
	007 Move W8, [X21+3407]
	008 Move X20, [X20+3008]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x22F4000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move X0, 0x22F9000
	018 Move X0, [X0+3008]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3407], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call MobController.OnDrawGizmos, X0
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X20]
	031 Move X8, [X0+184]
	032 Move X0, X31
	033 Move S0, [X8+176]
	034 Move S1, [X8+180]
	035 Move S2, [X8+184]
	036 Move S3, [X8+188]
	037 Call Gizmos.set_color, X0
	038 Move X0, X19
	039 Call RedGreenController.get__attackSphereCenter, X0
	040 Move X8, [X19+192]
	041 Compare X8, 0
	042 JumpIfEqual {93}
	043 Move V3, [X8+76]
	044 Move X21, 0x22F4000
	045 Move X21, [X21+2416]
	046 Move S4, 0.5
	047 Multiply S3, S3, S4
	048 Move X0, X31
	049 Call Gizmos.DrawWireSphere, X0, V0
	050 Move X8, [X20]
	051 Move X0, X31
	052 Move X8, [X8+184]
	053 Move S0, [X8]
	054 Move S1, [X8+4]
	055 Move S2, [X8+8]
	056 Move S3, [X8+12]
	057 Call Gizmos.set_color, X0
	058 Move X0, [X21]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X31
	064 Call Application.get_isPlaying
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {71}
	069 Move X0, X19
	070 Call RedGreenController.get_spawnedPosition, X0
	071 Move X0, [X19+208]
	072 Compare X0, 0
	073 JumpIfEqual {93}
	074 Move X1, X31
	075 Call Transform.get_position, X0
	076 Move X8, [X19+192]
	077 Compare X8, 0
	078 JumpIfEqual {93}
	079 Move X8, [X8+120]
	080 Compare X8, 0
	081 JumpIfEqual {93}
	082 Move W9, [X8+24]
	083 Compare W9, 0
	084 JumpIfEqual {94}
	085 Move V3, [X8+32]
	086 Move X20, [X31+16]
	087 Move X19, [X31+24]
	088 Move X0, X31
	089 Move X30, [X31+32]
	090 Move X21, [X31+40]
	091 Call Gizmos.DrawWireSphere, X0, V0
	092 Return 
	093 Call 0x1C17F20
	094 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x01E009D0 MOVZ W8, 0x1
	0x01E009D4 STRB W8, [X22 + 0xD5E]
	0x01E009D8 LDR X0, [X21]
	0x01E009DC TBZ X20, 0x0, 0x1E00A28
	0x01E009E0 LDR W8, [X0 + 0xE0]
	0x01E009E4 CBNZ W8, 0x1E009F0
	0x01E009E8 BL 0x1C16DFC
	0x01E009EC LDR X0, [X21]
	0x01E009F0 LDR X8, [X0 + 0xB8]
	0x01E009F4 LDR X8, [X8 + 0x18]
	0x01E009F8 CBZ X8, 0x1E00A94
	0x01E009FC LDR X0, [X8 + 0x38]
	0x01E00A00 CBZ X0, 0x1E00A94
	0x01E00A04 ADRP X8, 0x22F9000
	0x01E00A08 LDR X8, [X8 + 0x6F8]
	0x01E00A0C LDR X1, [X8]
	0x01E00A10 BL 0x24F1410
	0x01E00A14 LDR X0, [X21]
	0x01E00A18 LDR X8, [X0 + 0xB8]
	0x01E00A1C LDR X8, [X8 + 0x18]
	0x01E00A20 CBZ X8, 0x1E00A94
	0x01E00A24 STR X31, [X8 + 0x40]
	0x01E00A28 LDR W8, [X0 + 0xE0]
	0x01E00A2C CBNZ W8, 0x1E00A38
	0x01E00A30 BL 0x1C16DFC
	0x01E00A34 LDR X0, [X21]
	0x01E00A38 LDR X8, [X0 + 0xB8]
	0x01E00A3C LDR X8, [X8 + 0x18]
	0x01E00A40 CBZ X8, 0x1E00A94
	0x01E00A44 LDR V0, [X8 + 0x40]
	0x01E00A48 FMOV S1, 1
	0x01E00A4C FCMP S0, S1
	0x01E00A50 B.NE 0x1E00A68
	0x01E00A54 LDP X20, X19, [X31 + 0x20]
	0x01E00A58 LDP X22, X21, [X31 + 0x10]
	0x01E00A5C LDR X30, [X31 + 0x8]
	0x01E00A60 LDR V8, [X31], #0x30
	0x01E00A64 RET
	0x01E00A68 LDR W8, [X0 + 0xE0]
	0x01E00A6C CBNZ W8, 0x1E00A74
	0x01E00A70 BL 0x1C16DFC
	0x01E00A74 MOV X0, X19
	0x01E00A78 LDP X20, X19, [X31 + 0x20]
	0x01E00A7C LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x25D9000
	008 Move X22, 0x22FA000
	009 Move X20, 0x22FA000
	010 Move X21, 0x22F8000
	011 Move W8, [X23+3408]
	012 Move X22, [X22+1640]
	013 Move X20, [X20+1648]
	014 Move X21, [X21+2144]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x22FA000
	021 Move X0, [X0+1648]
	022 Call 0x1C17CF4
	023 Move X0, 0x22FA000
	024 Move X0, [X0+1640]
	025 Call 0x1C17CF4
	026 Move X0, 0x22F8000
	027 Move X0, [X0+2144]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3408], W8
	031 Move X8, -20004864
	032 Move V0, [X8+191]
	033 Add X8, X19, 440
	034 Move [X8], V0
	035 Move X0, [X22]
	036 Call 0x1C17F10
	037 Move X1, [X20]
	038 Move X20, X0
	039 Call Dictionary`2<Object, Object>..ctor, X0
	040 Move [X19+480], X20
	041 Move X0, [X21]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X1, X31
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Call MobController..ctor, X0
	055 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01E00A80 LDR X30, [X31 + 0x8]
	0x01E00A84 FMOV S0, 1
	0x01E00A88 MOV V1.16B, V8.16B
	0x01E00A8C LDR V8, [X31], #0x30
	0x01E00A90 B 0x1E008B4
	0x01E00A94 BL 0x1C16F20
	0x01E00A98 STR D8, [X31 - 0x30]!
	0x01E00A9C STR X30, [X31 + 0x8]
	0x01E00AA0 STP X22, X21, [X31 + 0x10]
	0x01E00AA4 STP X20, X19, [X31 + 0x20]
	0x01E00AA8 ADRP X22, 0x25D8000
	0x01E00AAC ADRP X21, 0x22F8000
	0x01E00AB0 LDRB W8, [X22 + 0xD5F]
	0x01E00AB4 LDR X21, [X21 + 0xD8]
	0x01E00AB8 MOV W20, W1
	0x01E00ABC MOV X19, X0
	0x01E00AC0 MOV V8.16B, V0.16B
	0x01E00AC4 TBNZ X8, 0x0, 0x1E00AE8
	0x01E00AC8 ADRP X0, 0x22F9000
	0x01E00ACC LDR X0, [X0 + 0x6F8]
	0x01E00AD0 BL 0x1C16CF4
	0x01E00AD4 ADRP X0, 0x22F8000
	0x01E00AD8 LDR X0, [X0 + 0xD8]
	0x01E00ADC BL 0x1C16CF4
	0x01E00AE0 MOVZ W8, 0x1
	0x01E00AE4 STRB W8, [X22 + 0xD5F]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 And W1, W1, 1
	004 Move X2, X31
	005 Move X19, X0
	006 Call MobController.CopyBackingFieldsToState, X0, X1
	007 Move W1, [X19+420]
	008 Move X0, X19
	009 Call RedGreenController.set_phase, X0, X1
	010 Move V0, [X19+424]
	011 Move V1, [X19+428]
	012 Move V2, [X19+432]
	013 Move X0, X19
	014 Call RedGreenController.set_spawnedPosition, X0, X1
	015 Move W1, [X19+436]
	016 Move X0, X19
	017 Call RedGreenController.set_isGreen, X0, X1
	018 Move V0, [X19+456]
	019 Move X0, X19
	020 Call RedGreenController.set_switchLightTimer, X0, V0
	021 Move V0, [X19+460]
	022 Move X0, X19
	023 Call RedGreenController.set_switchLightInterval, X0, V0
	024 Move V0, [X19+464]
	025 Move X0, X19
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Call RedGreenController.set_timerAnticipating, X0, V0
	029 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01E00AE8 LDR X0, [X21]
	0x01E00AEC TBZ X20, 0x0, 0x1E00B40
	0x01E00AF0 LDR W8, [X0 + 0xE0]
	0x01E00AF4 CBNZ W8, 0x1E00B00
	0x01E00AF8 BL 0x1C16DFC
	0x01E00AFC LDR X0, [X21]
	0x01E00B00 LDR X8, [X0 + 0xB8]
	0x01E00B04 LDR X8, [X8 + 0x18]
	0x01E00B08 CBZ X8, 0x1E00BA8
	0x01E00B0C LDR X0, [X8 + 0x38]
	0x01E00B10 CBZ X0, 0x1E00BA8
	0x01E00B14 ADRP X8, 0x22F9000
	0x01E00B18 LDR X8, [X8 + 0x6F8]
	0x01E00B1C LDR X1, [X8]
	0x01E00B20 BL 0x24F1410
	0x01E00B24 LDR X0, [X21]
	0x01E00B28 LDR X8, [X0 + 0xB8]
	0x01E00B2C LDR X8, [X8 + 0x18]
	0x01E00B30 CBZ X8, 0x1E00BA8
	0x01E00B34 ADRP X9, 0xFFFFFFFFFECED000
	0x01E00B38 LDR V0, [X9 + 0x648]
	0x01E00B3C STR D0, [X8 + 0x40]
	0x01E00B40 LDR W8, [X0 + 0xE0]
	0x01E00B44 CBNZ W8, 0x1E00B50
	0x01E00B48 BL 0x1C16DFC
	0x01E00B4C LDR X0, [X21]
	0x01E00B50 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.CopyStateToBackingFields, X0
	006 Move X0, X19
	007 Call RedGreenController.get_phase, X0
	008 Move [X19+420], W0
	009 Move X0, X19
	010 Call RedGreenController.get_spawnedPosition, X0
	011 Move X0, X19
	012 Move [X19+424], S0
	013 Move [X19+428], S1
	014 Move [X19+432], S2
	015 Call RedGreenController.get_isGreen, X0
	016 And W8, W0, 1
	017 Move X0, X19
	018 Move [X19+436], W8
	019 Call RedGreenController.get_switchLightTimer, X0
	020 Move X0, X19
	021 Move [X19+456], S0
	022 Call RedGreenController.get_switchLightInterval, X0
	023 Move X0, X19
	024 Move [X19+460], S0
	025 Call RedGreenController.get_timerAnticipating, X0
	026 Move [X19+464], S0
	027 Move X30, [X31+16]
	028 Move X19, [X31+24]
	029 Return 

