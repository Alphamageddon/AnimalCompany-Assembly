Type: AnimalCompany.RedGreenController

Method: AnimalCompany.RedGreenController/Phase get_phase()

Disassembly:
	0x01CEE25C MOVZ W8, 0x1
	0x01CEE260 STRB W8, [X25 + 0x441]
	0x01CEE264 ADRP X20, 0x225F000
	0x01CEE268 LDR X20, [X20 + 0x488]
	0x01CEE26C LDR X0, [X20]
	0x01CEE270 LDR W8, [X0 + 0xE0]
	0x01CEE274 CBNZ W8, 0x1CEE27C
	0x01CEE278 BL 0x1B6E8F8
	0x01CEE27C ADRP X8, 0xFFFFFFFFFEDBB000
	0x01CEE280 FMUL S0, S8, S8
	0x01CEE284 FMUL S1, S9, S9
	0x01CEE288 LDR V11, [X8 + 0xB64]
	0x01CEE28C ADRP X21, 0x225F000
	0x01CEE290 FMUL S2, S10, S10
	0x01CEE294 FADD S0, S0, S1
	0x01CEE298 LDR X21, [X21 + 0x480]
	0x01CEE29C FADD S0, S2, S0
	0x01CEE2A0 FSQRT S0, S0
	0x01CEE2A4 FCMP S0, S11
	0x01CEE2A8 ADRP X26, 0x2535000
	0x01CEE2AC B.LE 0x1CEE2C0
	0x01CEE2B0 FDIV S8, S8, S0
	0x01CEE2B4 FDIV S9, S9, S0
	0x01CEE2B8 FDIV S10, S10, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+60]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2260000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2263000
	016 Move X0, [X0+1056]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2263000
	023 Move X0, [X0+1064]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_phase(AnimalCompany.RedGreenController/Phase value)

Disassembly:
	0x01CEE2BC B 0x1CEE2EC
	0x01CEE2C0 LDRB W8, [X26 + 0x43F]
	0x01CEE2C4 CBNZ W8, 0x1CEE2DC
	0x01CEE2C8 ADRP X0, 0x225F000
	0x01CEE2CC LDR X0, [X0 + 0x480]
	0x01CEE2D0 BL 0x1B6E7F0
	0x01CEE2D4 MOVZ W8, 0x1
	0x01CEE2D8 STRB W8, [X26 + 0x43F]
	0x01CEE2DC LDR X8, [X21]
	0x01CEE2E0 LDR X8, [X8 + 0xB8]
	0x01CEE2E4 LDP S8, S9, [X8]
	0x01CEE2E8 LDR V10, [X8 + 0x8]
	0x01CEE2EC LDR X8, [X19 + 0xB8]
	0x01CEE2F0 CBZ X8, 0x1CEE81C
	0x01CEE2F4 LDR V12, [X8 + 0x40]
	0x01CEE2F8 MOV X0, X19
	0x01CEE2FC MOV X1, X31
	0x01CEE300 BL 0x3A9B084
	0x01CEE304 CBZ X0, 0x1CEE81C
	0x01CEE308 MOV X1, X31
	0x01CEE30C STP S11, S12, [X31 + 0x98]
	0x01CEE310 BL 0x3AA7AD0
	0x01CEE314 ADRP X22, 0x2535000
	0x01CEE318 LDRB W8, [X22 + 0x457]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+60], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2260000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2263000
	016 Move X0, [X0+1056]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2263000
	023 Move X0, [X0+1072]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: UnityEngine.Vector3 get_spawnedPosition()

Disassembly:
	0x01CEE31C MOV V11.16B, V0.16B
	0x01CEE320 MOV V12.16B, V1.16B
	0x01CEE324 MOV V13.16B, V2.16B
	0x01CEE328 CBNZ W8, 0x1CEE340
	0x01CEE32C ADRP X0, 0x225F000
	0x01CEE330 LDR X0, [X0 + 0x488]
	0x01CEE334 BL 0x1B6E7F0
	0x01CEE338 MOVZ W8, 0x1
	0x01CEE33C STRB W8, [X22 + 0x457]
	0x01CEE340 LDR X0, [X20]
	0x01CEE344 FMUL S0, S8, S8
	0x01CEE348 FMUL S1, S9, S9
	0x01CEE34C FADD S0, S0, S1
	0x01CEE350 FMUL S1, S10, S10
	0x01CEE354 LDR W8, [X0 + 0xE0]
	0x01CEE358 FADD S14, S1, S0
	0x01CEE35C FMUL S0, S11, S11
	0x01CEE360 FMUL S1, S12, S12
	0x01CEE364 FADD S0, S0, S1
	0x01CEE368 FMUL S1, S13, S13
	0x01CEE36C FADD S15, S1, S0
	0x01CEE370 CBNZ W8, 0x1CEE378
	0x01CEE374 BL 0x1B6E8F8
	0x01CEE378 ADRP X8, 0xFFFFFFFFFEDBB000
	0x01CEE37C LDR V1, [X8 + 0x9E4]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move S0, [X8+64]
	007 Move S1, [X8+68]
	008 Move V2, [X8+72]
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2260000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x2263000
	018 Move X0, [X0+1080]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x2263000
	025 Move X0, [X0+1088]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set_spawnedPosition(UnityEngine.Vector3 value)

Disassembly:
	0x01CEE380 FMUL S0, S14, S15
	0x01CEE384 FSQRT S0, S0
	0x01CEE388 FMOV S14, W31
	0x01CEE38C FCMP S0, S1
	0x01CEE390 B.MI 0x1CEE3E8
	0x01CEE394 LDR X0, [X20]
	0x01CEE398 FMUL S1, S8, S11
	0x01CEE39C FMUL S2, S9, S12
	0x01CEE3A0 FMUL S3, S10, S13
	0x01CEE3A4 FADD S1, S1, S2
	0x01CEE3A8 FADD S1, S3, S1
	0x01CEE3AC LDR W8, [X0 + 0xE0]
	0x01CEE3B0 FDIV S0, S1, S0
	0x01CEE3B4 FMOV S1, 1
	0x01CEE3B8 FMOV S2, -1
	0x01CEE3BC FMIN S1, S0, S1
	0x01CEE3C0 FCMP S0, S2
	0x01CEE3C4 FCSEL S11, S1, S2, PL
	0x01CEE3C8 CBNZ W8, 0x1CEE3D0
	0x01CEE3CC BL 0x1B6E8F8
	0x01CEE3D0 FCVT S0, S11
	0x01CEE3D4 BL 0x3D19890
	0x01CEE3D8 ADRP X8, 0xFFFFFFFFFEDBB000
	0x01CEE3DC LDR V1, [X8 + 0xE1C]
	0x00000000 INVALID

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move [X8+64], S0
	007 Move [X8+72], S1
	008 Move [X8+72], S2
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 
	012 Move X0, 0x2260000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x2263000
	018 Move X0, [X0+1080]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x2263000
	025 Move X0, [X0+1096]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Boolean get_isGreen()

Disassembly:
	0x01CEE3E4 FMUL S14, S0, S1
	0x01CEE3E8 MOV X0, X19
	0x01CEE3EC MOV X1, X31
	0x01CEE3F0 BL 0x3A9B084
	0x01CEE3F4 MOV X22, X0
	0x01CEE3F8 MOV X0, X19
	0x01CEE3FC MOV X1, X31
	0x01CEE400 BL 0x3A9B084
	0x01CEE404 CBZ X0, 0x1CEE81C
	0x01CEE408 MOV X1, X31
	0x01CEE40C BL 0x3AA5FBC
	0x01CEE410 MOV V11.16B, V0.16B
	0x01CEE414 MOV V12.16B, V1.16B
	0x01CEE418 MOV V13.16B, V2.16B
	0x01CEE41C MOV V0.16B, V8.16B
	0x01CEE420 MOV V1.16B, V9.16B
	0x01CEE424 MOV V2.16B, V10.16B
	0x01CEE428 MOV X0, X31
	0x01CEE42C STR S3, [X31 + 0x14]
	0x01CEE430 BL 0x3A92C2C
	0x01CEE434 LDR X0, [X19 + 0x38]
	0x01CEE438 CBZ X0, 0x1CEE81C
	0x01CEE43C MOV V8.16B, V0.16B
	0x01CEE440 LDR V0, [X31 + 0x9C]
	0x01CEE444 MOV X1, X31
	0x01CEE448 MOV V9.16B, V1.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+76]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2260000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x2263000
	018 Move X0, [X0+1104]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x2263000
	025 Move X0, [X0+1112]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set_isGreen(System.Boolean value)

Disassembly:
	0x01CEE44C MOV V10.16B, V2.16B
	0x01CEE450 MOV V15.16B, V3.16B
	0x01CEE454 FDIV S14, S0, S14
	0x01CEE458 BL 0x1D87058
	0x01CEE45C LDR V3, [X31 + 0x14]
	0x01CEE460 FMUL S0, S14, S0
	0x01CEE464 STR S0, [X31]
	0x01CEE468 MOV V0.16B, V11.16B
	0x01CEE46C MOV V1.16B, V12.16B
	0x01CEE470 MOV V2.16B, V13.16B
	0x01CEE474 MOV V4.16B, V8.16B
	0x01CEE478 MOV V5.16B, V9.16B
	0x01CEE47C MOV V6.16B, V10.16B
	0x01CEE480 MOV V7.16B, V15.16B
	0x01CEE484 MOV X0, X31
	0x01CEE488 BL 0x3A92660
	0x01CEE48C CBZ X22, 0x1CEE81C
	0x01CEE490 MOV X0, X22
	0x01CEE494 MOV X1, X31
	0x01CEE498 BL 0x3AA7878
	0x01CEE49C LDR X22, [X19 + 0xC8]
	0x01CEE4A0 MOV X0, X19
	0x01CEE4A4 MOV X1, X31
	0x01CEE4A8 BL 0x3A9B084
	0x01CEE4AC LDR V14, [X31 + 0x98]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+76], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x2260000
	012 Move X0, [X0+1168]
	013 Call 0x1B6F804
	014 Call 0x1B6FA0C
	015 Move X19, X0
	016 Move X0, 0x2263000
	017 Move X0, [X0+1104]
	018 Call 0x1B6F804
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x2263000
	024 Move X0, [X0+1120]
	025 Call 0x1B6F804
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1B6F8E8

Method: System.Single get_switchLightTimer()

Disassembly:
	0x01CEE4B0 CBZ X0, 0x1CEE81C
	0x01CEE4B4 MOV X1, X31
	0x01CEE4B8 BL 0x3AA7658
	0x01CEE4BC MOV X0, X19
	0x01CEE4C0 MOV X1, X31
	0x01CEE4C4 MOV V8.16B, V0.16B
	0x01CEE4C8 MOV V9.16B, V1.16B
	0x01CEE4CC MOV V10.16B, V2.16B
	0x01CEE4D0 BL 0x3A9B084
	0x01CEE4D4 CBZ X0, 0x1CEE81C
	0x01CEE4D8 MOV X1, X31
	0x01CEE4DC BL 0x3AA7AD0
	0x01CEE4E0 CBZ X22, 0x1CEE81C
	0x01CEE4E4 FMOV S3, 10
	0x01CEE4E8 FMUL S2, S2, S3
	0x01CEE4EC FMUL S1, S1, S3
	0x01CEE4F0 FMUL S0, S0, S3
	0x01CEE4F4 FADD S2, S10, S2
	0x01CEE4F8 FADD S1, S9, S1
	0x01CEE4FC FADD S0, S8, S0
	0x01CEE500 MOV X0, X22
	0x01CEE504 MOV X1, X31
	0x01CEE508 BL 0x3A4A810
	0x01CEE50C LDR X0, [X19 + 0xC8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+80]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2260000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2263000
	016 Move X0, [X0+1128]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2263000
	023 Move X0, [X0+1136]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_switchLightTimer(System.Single value)

Disassembly:
	0x01CEE510 CBZ X0, 0x1CEE81C
	0x01CEE514 MOV X1, X31
	0x01CEE518 BL 0x3A4A9E4
	0x01CEE51C TBZ X0, 0x0, 0x1CEE59C
	0x01CEE520 LDR X22, [X19 + 0xC8]
	0x01CEE524 MOV X0, X19
	0x01CEE528 MOV X1, X31
	0x01CEE52C BL 0x3A9B084
	0x01CEE530 CBZ X0, 0x1CEE81C
	0x01CEE534 MOV X1, X31
	0x01CEE538 BL 0x3AA7AD0
	0x01CEE53C LDR X8, [X19 + 0xB8]
	0x01CEE540 CBZ X8, 0x1CEE81C
	0x01CEE544 LDR X8, [X8 + 0x38]
	0x01CEE548 CBZ X8, 0x1CEE81C
	0x01CEE54C LDR W9, [X8 + 0x18]
	0x01CEE550 CBZ W9, 0x1CEE830
	0x01CEE554 LDR X0, [X19 + 0x38]
	0x01CEE558 CBZ X0, 0x1CEE81C
	0x01CEE55C LDR V11, [X8 + 0x20]
	0x01CEE560 MOV X1, X31
	0x01CEE564 MOV V8.16B, V0.16B
	0x01CEE568 MOV V9.16B, V1.16B
	0x01CEE56C MOV V10.16B, V2.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+80], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2260000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2263000
	016 Move X0, [X0+1128]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2263000
	023 Move X0, [X0+1144]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Single get_switchLightInterval()

Disassembly:
	0x01CEE570 BL 0x1D87058
	0x01CEE574 CBZ X22, 0x1CEE81C
	0x01CEE578 FMUL S1, S10, S11
	0x01CEE57C FMUL S3, S9, S11
	0x01CEE580 FMUL S4, S8, S11
	0x01CEE584 FMUL S2, S1, S0
	0x01CEE588 FMUL S1, S3, S0
	0x01CEE58C FMUL S0, S4, S0
	0x01CEE590 MOV X0, X22
	0x01CEE594 MOV X1, X31
	0x01CEE598 BL 0x3A4AABC
	0x01CEE59C MOV X0, X19
	0x01CEE5A0 BL 0x1CED6F0
	0x01CEE5A4 LDR X8, [X19 + 0xB8]
	0x01CEE5A8 CBZ X8, 0x1CEE81C
	0x01CEE5AC LDR V3, [X8 + 0x4C]
	0x01CEE5B0 FMOV S4, 0.5
	0x01CEE5B4 FMUL S3, S3, S4
	0x01CEE5B8 BL 0x1CE8C88
	0x01CEE5BC CBZ X0, 0x1CEE81C
	0x01CEE5C0 ADRP X8, 0x2261000
	0x01CEE5C4 LDR X8, [X8 + 0xDC0]
	0x01CEE5C8 LDR X1, [X8]
	0x01CEE5CC ADD X8, X31, 0x18

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+84]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2260000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2263000
	016 Move X0, [X0+1152]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2263000
	023 Move X0, [X0+1160]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_switchLightInterval(System.Single value)

Disassembly:
	0x01CEE5D0 BL 0x2E470E0
	0x01CEE5D4 LDUR V0, [X31 + 0x18]
	0x01CEE5D8 LDR X8, [X31 + 0x28]
	0x01CEE5DC ADRP X27, 0x2261000
	0x01CEE5E0 LDR X27, [X27 + 0xDB0]
	0x01CEE5E4 STR V0, [X31 + 0x3]
	0x01CEE5E8 STR X8, [X31 + 0x40]
	0x01CEE5EC MOVZ W28, 0x1
	0x01CEE5F0 LDR X1, [X27]
	0x01CEE5F4 ADD X0, X31, 0x30
	0x01CEE5F8 BL 0x2A14F30
	0x01CEE5FC TBZ X0, 0x0, 0x1CEE730
	0x01CEE600 LDR X0, [X24]
	0x01CEE604 LDR X22, [X31 + 0x40]
	0x01CEE608 LDR X23, [X19 + 0x140]
	0x01CEE60C LDR W8, [X0 + 0xE0]
	0x01CEE610 CBNZ W8, 0x1CEE618
	0x01CEE614 BL 0x1B6E8F8
	0x01CEE618 MOV X0, X23
	0x01CEE61C MOV X1, X22
	0x01CEE620 MOV X2, X31
	0x01CEE624 BL 0x3AA0AF0
	0x01CEE628 TBZ X0, 0x0, 0x1CEE5F0
	0x01CEE62C CBZ X22, 0x1CEE828

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+84], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2260000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2263000
	016 Move X0, [X0+1152]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2263000
	023 Move X0, [X0+1168]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Single get_timerAnticipating()

Disassembly:
	0x01CEE630 LDR X0, [X22 + 0x88]
	0x01CEE634 CBZ X0, 0x1CEE82C
	0x01CEE638 MOV X1, X31
	0x01CEE63C BL 0x3AA7658
	0x01CEE640 MOV V8.16B, V0.16B
	0x01CEE644 MOV V9.16B, V1.16B
	0x01CEE648 MOV V10.16B, V2.16B
	0x01CEE64C MOV X0, X19
	0x01CEE650 MOV X1, X31
	0x01CEE654 BL 0x3A9B084
	0x01CEE658 CBZ X0, 0x1CEE820
	0x01CEE65C MOV X1, X31
	0x01CEE660 BL 0x3AA7658
	0x01CEE664 LDRB W8, [X25 + 0x441]
	0x01CEE668 MOV V11.16B, V0.16B
	0x01CEE66C MOV V12.16B, V1.16B
	0x01CEE670 MOV V13.16B, V2.16B
	0x01CEE674 CBNZ W8, 0x1CEE684
	0x01CEE678 MOV X0, X20
	0x01CEE67C BL 0x1B6E7F0
	0x01CEE680 STRB W28, [X25 + 0x441]
	0x01CEE684 LDR X0, [X20]
	0x01CEE688 LDR W8, [X0 + 0xE0]
	0x01CEE68C CBNZ W8, 0x1CEE694

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+88]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2260000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2263000
	016 Move X0, [X0+1176]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2263000
	023 Move X0, [X0+1184]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_timerAnticipating(System.Single value)

Disassembly:
	0x01CEE690 BL 0x1B6E8F8
	0x01CEE694 FSUB S0, S8, S11
	0x01CEE698 FSUB S1, S9, S12
	0x01CEE69C FSUB S2, S10, S13
	0x01CEE6A0 FMUL S3, S0, S0
	0x01CEE6A4 FMUL S4, S1, S1
	0x01CEE6A8 FADD S3, S3, S4
	0x01CEE6AC FMUL S4, S2, S2
	0x01CEE6B0 FADD S3, S4, S3
	0x01CEE6B4 FSQRT S3, S3
	0x01CEE6B8 FCMP S3, S14
	0x01CEE6BC B.LE 0x1CEE6D0
	0x01CEE6C0 FDIV S0, S0, S3
	0x01CEE6C4 FDIV S1, S1, S3
	0x01CEE6C8 FDIV S2, S2, S3
	0x01CEE6CC B 0x1CEE6F4
	0x01CEE6D0 LDRB W8, [X26 + 0x43F]
	0x01CEE6D4 CBNZ W8, 0x1CEE6E4
	0x01CEE6D8 MOV X0, X21
	0x01CEE6DC BL 0x1B6E7F0
	0x01CEE6E0 STRB W28, [X26 + 0x43F]
	0x01CEE6E4 LDR X8, [X21]
	0x01CEE6E8 LDR X8, [X8 + 0xB8]
	0x01CEE6EC LDP S0, S1, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+88], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2260000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2263000
	016 Move X0, [X0+1176]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2263000
	023 Move X0, [X0+1192]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: UnityEngine.Vector3 get__attackSphereCenter()

Disassembly:
	0x01CEE6F0 LDR V2, [X8 + 0x8]
	0x01CEE6F4 LDR X8, [X19 + 0xB8]
	0x01CEE6F8 CBZ X8, 0x1CEE824
	0x01CEE6FC LDR V3, [X8 + 0x50]
	0x01CEE700 LDR W1, [X8 + 0x24]
	0x01CEE704 LDR X2, [X19 + 0xD0]
	0x01CEE708 LDR X3, [X8 + 0xB8]
	0x01CEE70C LDR X5, [X8 + 0x18]
	0x01CEE710 FMUL S0, S0, S3
	0x01CEE714 FMUL S1, S1, S3
	0x01CEE718 FMUL S2, S2, S3
	0x01CEE71C MOV X0, X22
	0x01CEE720 MOV X4, X3
	0x01CEE724 MOV X6, X31
	0x01CEE728 BL 0x1CB93D4
	0x01CEE72C B 0x1CEE5F0
	0x01CEE730 ADRP X8, 0x2261000
	0x01CEE734 LDR X8, [X8 + 0xDA8]
	0x01CEE738 ADD X0, X31, 0x30
	0x01CEE73C LDR X1, [X8]
	0x01CEE740 BL 0x2A14F2C
	0x01CEE744 MOV X0, X19
	0x01CEE748 BL 0x1CED31C
	0x01CEE74C MOV X0, X19
	0x01CEE750 MOV X1, X31
	0x01CEE754 MOV V8.16B, V0.16B
	0x01CEE758 MOV V9.16B, V1.16B
	0x01CEE75C MOV V10.16B, V2.16B
	0x01CEE760 BL 0x3A9B084
	0x01CEE764 CBZ X0, 0x1CEE81C
	0x01CEE768 MOV X1, X31
	0x01CEE76C BL 0x3AA7658
	0x01CEE770 ADRP X21, 0x2535000
	0x01CEE774 LDRB W8, [X21 + 0x506]
	0x01CEE778 MOV V11.16B, V0.16B
	0x01CEE77C MOV V12.16B, V1.16B
	0x01CEE780 MOV V13.16B, V2.16B

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X0, [X0+208]
	007 Compare X0, 0
	008 JumpIfEqual {44}
	009 Move X1, X31
	010 Call Transform.get_position, X0
	011 Move X19, 0x2536000
	012 Move W8, [X19+1090]
	013 Move V8, V0
	014 Move V9, V1
	015 Move V10, V2
	016 Compare W8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, 0x2260000
	019 Move X0, [X0+1152]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X19+1090], W8
	023 Move X8, 0x2260000
	024 Move X8, [X8+1152]
	025 Move X9, -19152896
	026 Move V0, [X9+3616]
	027 Move X30, [X31+32]
	028 Move X19, [X31+40]
	029 Move X8, [X8]
	030 Move X8, [X8+184]
	031 Move S1, [X8+24]
	032 Move S2, [X8+28]
	033 Move V3, [X8+32]
	034 Multiply S1, S1, S0
	035 Multiply S2, S2, S0
	036 Multiply S3, S3, S0
	037 Add S0, S8, S1
	038 Add S1, S9, S2
	039 Move D9, [X31+16]
	040 Move D8, [X31+24]
	041 Add S2, S10, S3
	042 Move V10, [X31+48]
	043 Return X0
	044 Call 0x1B6FA1C

Method: System.Single get__attackSphereRadius()

Disassembly:
	0x01CEE784 CBNZ W8, 0x1CEE79C
	0x01CEE788 ADRP X0, 0x225F000
	0x01CEE78C LDR X0, [X0 + 0x488]
	0x01CEE790 BL 0x1B6E7F0
	0x01CEE794 MOVZ W8, 0x1
	0x01CEE798 STRB W8, [X21 + 0x506]
	0x01CEE79C LDR X0, [X20]
	0x01CEE7A0 LDR W8, [X0 + 0xE0]
	0x01CEE7A4 CBNZ W8, 0x1CEE7AC

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+184]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move V0, [X8+76]
	006 Move S1, 0.5
	007 Multiply S0, S0, S1
	008 Move X30, [X31+16]
	009 Return V0
	010 Call 0x1B6FA1C

Method: System.Void HandleLightChanged()

Disassembly:
	0x01CEE7A8 BL 0x1B6E8F8
	0x01CEE7AC LDR X8, [X19 + 0xB8]
	0x01CEE7B0 CBZ X8, 0x1CEE81C
	0x01CEE7B4 FSUB S0, S8, S11
	0x01CEE7B8 FSUB S1, S9, S12
	0x01CEE7BC FSUB S2, S10, S13
	0x01CEE7C0 FMUL S0, S0, S0
	0x01CEE7C4 FMUL S1, S1, S1
	0x01CEE7C8 LDR V3, [X8 + 0x80]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+424]
	004 Call RedGreenController.get_isGreen, X0
	005 Compare X19, 0
	006 JumpIfEqual {11}
	007 And W1, W0, 1
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call 0x1B6FA1C

Method: System.Void HandlePhaseChanged()

Disassembly:
	0x01CEE904 MOV X1, X31
	0x01CEE908 BL 0x3AA7658
	0x01CEE90C MOV X0, X19
	0x01CEE910 MOV V8.16B, V0.16B
	0x01CEE914 MOV V9.16B, V1.16B
	0x01CEE918 MOV V10.16B, V2.16B
	0x01CEE91C BL 0x1CED31C
	0x01CEE920 ADRP X20, 0x2535000
	0x01CEE924 LDRB W8, [X20 + 0x506]
	0x01CEE928 MOV V11.16B, V0.16B
	0x01CEE92C MOV V12.16B, V1.16B
	0x01CEE930 MOV V13.16B, V2.16B
	0x01CEE934 CBNZ W8, 0x1CEE94C
	0x01CEE938 ADRP X0, 0x225F000
	0x01CEE93C LDR X0, [X0 + 0x488]
	0x01CEE940 BL 0x1B6E7F0
	0x01CEE944 MOVZ W8, 0x1
	0x01CEE948 STRB W8, [X20 + 0x506]
	0x01CEE94C ADRP X8, 0x225F000
	0x01CEE950 LDR X8, [X8 + 0x488]
	0x01CEE954 FSUB S11, S8, S11
	0x01CEE958 FSUB S9, S9, S12
	0x01CEE95C FSUB S8, S10, S13
	0x01CEE960 LDR X0, [X8]
	0x01CEE964 LDR W8, [X0 + 0xE0]
	0x01CEE968 CBNZ W8, 0x1CEE970
	0x01CEE96C BL 0x1B6E8F8
	0x01CEE970 FMUL S0, S11, S11
	0x01CEE974 FMUL S1, S9, S9
	0x01CEE978 ADRP X8, 0xFFFFFFFFFEDBB000
	0x01CEE97C FADD S0, S0, S1
	0x01CEE980 LDR V1, [X8 + 0xAB0]
	0x01CEE984 FMUL S2, S8, S8
	0x01CEE988 FADD S0, S2, S0
	0x01CEE98C FSQRT S0, S0
	0x01CEE990 FCMP S0, S1
	0x01CEE994 B.PL 0x1CEE9B4
	0x01CEE998 MOV X0, X19
	0x01CEE99C LDP X20, X19, [X31 + 0x40]
	0x01CEE9A0 LDR X30, [X31 + 0x30]
	0x01CEE9A4 LDP D9, D8, [X31 + 0x20]
	0x01CEE9A8 LDP D11, D10, [X31 + 0x10]
	0x01CEE9AC LDP D13, D12, [X31], #0x50
	0x01CEE9B0 B 0x1CEDCDC
	0x01CEE9B4 LDP X20, X19, [X31 + 0x40]
	0x01CEE9B8 LDR X30, [X31 + 0x30]
	0x01CEE9BC LDP D9, D8, [X31 + 0x20]
	0x01CEE9C0 LDP D11, D10, [X31 + 0x10]
	0x01CEE9C4 LDP D13, D12, [X31], #0x50
	0x01CEE9C8 RET
	0x01CEE9CC BL 0x1B6EA1C
	0x01CEE9D0 SUB X31, X31, 0xF0
	0x01CEE9D4 STP D15, D14, [X31 + 0x50]
	0x01CEE9D8 STP D13, D12, [X31 + 0x60]
	0x01CEE9DC STP D11, D10, [X31 + 0x70]
	0x01CEE9E0 STP D9, D8, [X31 + 0x80]
	0x01CEE9E4 STP X29, X30, [X31 + 0x90]
	0x01CEE9E8 STP X28, X27, [X31 + 0xA0]
	0x01CEE9EC STP X26, X25, [X31 + 0xB0]
	0x01CEE9F0 STP X24, X23, [X31 + 0xC0]
	0x01CEE9F4 STP X22, X21, [X31 + 0xD0]
	0x01CEE9F8 STP X20, X19, [X31 + 0xE0]
	0x01CEE9FC ADRP X20, 0x2535000
	0x01CEEA00 LDRB W8, [X20 + 0x69C]
	0x01CEEA04 MOV W21, W1
	0x01CEEA08 MOV X19, X0
	0x01CEEA0C TBNZ X8, 0x0, 0x1CEEA84
	0x01CEEA10 ADRP X0, 0x2262000
	0x01CEEA14 LDR X0, [X0 + 0x4C8]
	0x01CEEA18 BL 0x1B6E7F0
	0x01CEEA1C ADRP X0, 0x2262000
	0x01CEEA20 LDR X0, [X0 + 0x4D0]
	0x01CEEA24 BL 0x1B6E7F0
	0x01CEEA28 ADRP X0, 0x2262000
	0x01CEEA2C LDR X0, [X0 + 0x4D8]
	0x01CEEA30 BL 0x1B6E7F0
	0x01CEEA34 ADRP X0, 0x2262000
	0x01CEEA38 LDR X0, [X0 + 0x4E0]
	0x01CEEA3C BL 0x1B6E7F0
	0x01CEEA40 ADRP X0, 0x2261000
	0x01CEEA44 LDR X0, [X0 + 0xDA8]
	0x01CEEA48 BL 0x1B6E7F0
	0x01CEEA4C ADRP X0, 0x2261000
	0x01CEEA50 LDR X0, [X0 + 0xDB0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call RedGreenController.get_phase, X0
	006 Subtract W8, W0, 1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X9, -18878464
	009 Add X9, X9, 2397
	010 NotImplemented "Instruction ADR not yet implemented."
	011 Move W11, [X9]
	012 Add X10, X10, X11
	013 CallNoReturn X10
	014 Move X0, [X19+192]
	015 Compare X0, 0
	016 JumpIfEqual {95}
	017 Move X8, [X0]
	018 Move X9, [X8+440]
	019 Move X1, [X8+448]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X0, [X19+424]
	022 Compare X0, 0
	023 JumpIfEqual {95}
	024 Call RedGreenView.PlayBackToStandSound, X0
	025 Move X0, [X19+192]
	026 Compare X0, 0
	027 JumpIfEqual {95}
	028 Move X8, [X0]
	029 Move X9, [X8+488]
	030 Move X1, [X8+496]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X0, [X19+424]
	033 Compare X0, 0
	034 JumpIfEqual {95}
	035 Call RedGreenView.PlayAnticipationSound, X0
	036 Move X0, [X19+192]
	037 Compare X0, 0
	038 JumpIfEqual {95}
	039 Move X8, [X0]
	040 Move X9, [X8+472]
	041 Move X1, [X8+480]
	042 Move X0, [X19+192]
	043 Compare X0, 0
	044 JumpIfEqual {95}
	045 Move X8, [X0]
	046 Move X9, [X8+456]
	047 Move X1, [X8+464]
	048 Move S0, 1
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Move X20, [X19+424]
	051 Move X0, X19
	052 Call RedGreenController.get_phase, X0
	053 Compare X20, 0
	054 JumpIfEqual {95}
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CSET not yet implemented."
	057 Move X0, X20
	058 Call RedGreenView.PlayRunningSound, X0, X1
	059 Move X20, [X19+424]
	060 Move X0, X19
	061 Call RedGreenController.get_phase, X0
	062 Compare X20, 0
	063 JumpIfEqual {95}
	064 NotImplemented "Instruction CMP not yet implemented."
	065 NotImplemented "Instruction CSET not yet implemented."
	066 Move X0, X20
	067 Call RedGreenView.PlayWalkingSound, X0, X1
	068 Move X20, [X19+424]
	069 Move X0, X19
	070 Call RedGreenController.get_phase, X0
	071 Compare X20, 0
	072 JumpIfEqual {95}
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CSET not yet implemented."
	075 Move X0, X20
	076 Move [X20+256], W1
	077 Call RedGreenView.PlaySawSound, X0, X1
	078 Move X20, [X19+424]
	079 Move X0, X19
	080 Call RedGreenController.get_phase, X0
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move W1, 1
	083 Move X0, X19
	084 Call RedGreenController.get_phase, X0
	085 NotImplemented "Instruction CMP not yet implemented."
	086 NotImplemented "Instruction CSET not yet implemented."
	087 Compare X20, 0
	088 JumpIfEqual {95}
	089 Move X0, X20
	090 Move X20, [X31+16]
	091 Move X19, [X31+24]
	092 Move X30, [X31+32]
	093 Call RedGreenView.SetLightEvil, X0, X1
	094 Return 
	095 Call 0x1B6FA1C

Method: System.Void Setup()

Disassembly:
	0x01CEEC58 FADD S0, S0, S1
	0x01CEEC5C FCMP S0, S3
	0x01CEEC60 B.GT 0x1CEEC94
	0x01CEEC64 LDP S0, S1, [X0 + 0x38]
	0x01CEEC68 LDR V2, [X0 + 0x40]
	0x01CEEC6C FSUB S0, S14, S0
	0x01CEEC70 FSUB S1, S15, S1
	0x01CEEC74 FSUB S2, S8, S2
	0x01CEEC78 FMUL S0, S0, S0
	0x01CEEC7C FMUL S1, S1, S1
	0x01CEEC80 FADD S0, S0, S1
	0x01CEEC84 FMUL S1, S2, S2
	0x01CEEC88 FADD S0, S0, S1
	0x01CEEC8C FCMP S0, S3
	0x01CEEC90 B.LE 0x1CEED64
	0x01CEEC94 LDR X0, [X19 + 0xD0]
	0x01CEEC98 CBZ X0, 0x1CEEF68
	0x01CEEC9C MOV X1, X31
	0x01CEECA0 BL 0x3AA7658
	0x01CEECA4 ADRP X8, 0x2535000
	0x01CEECA8 LDRB W8, [X8 + 0x442]
	0x01CEECAC MOV V8.16B, V0.16B
	0x01CEECB0 MOV V11.16B, V1.16B
	0x01CEECB4 MOV V12.16B, V2.16B
	0x01CEECB8 CBNZ W8, 0x1CEECD4
	0x01CEECBC ADRP X0, 0x225F000
	0x01CEECC0 LDR X0, [X0 + 0x480]
	0x01CEECC4 BL 0x1B6E7F0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobController.Setup, X0
	005 Move X0, [X19+64]
	006 Compare X0, 0
	007 JumpIfEqual {36}
	008 Move X1, X31
	009 Call NetworkObject.get_HasStateAuthority, X0
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {31}
	014 Move X0, X19
	015 Move X1, X31
	016 Call Component.get_transform, X0
	017 Compare X0, 0
	018 JumpIfEqual {36}
	019 Move X1, X31
	020 Call Transform.get_position, X0
	021 Move X0, X19
	022 Call RedGreenController.set_spawnedPosition, X0, X1
	023 Move X8, [X19]
	024 Move X0, X19
	025 Move X1, X31
	026 Move X9, [X8+824]
	027 Move X2, [X8+832]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move X0, X19
	030 Call RedGreenController.SetStanding, X0
	031 Move X0, X19
	032 Move X30, [X31+16]
	033 Move X19, [X31+24]
	034 Call RedGreenController.HandlePhaseChanged, X0
	035 Return 
	036 Call 0x1B6FA1C

Method: System.Void HandleRevive()

Disassembly:
	0x01CEEDC8 MOV X1, X31
	0x01CEEDCC BL 0x3AA7658
	0x01CEEDD0 LDR W8, [X25 + 0x18]
	0x01CEEDD4 CMP W8, 0x2
	0x01CEEDD8 B.LS 0x1CEEF58
	0x01CEEDDC STP S0, S1, [X25 + 0x38]
	0x01CEEDE0 STR S2, [X25 + 0x40]
	0x01CEEDE4 CBZ X24, 0x1CEEF5C
	0x01CEEDE8 LDR X3, [X20]
	0x01CEEDEC MOV X0, X24
	0x01CEEDF0 MOV X1, X23
	0x01CEEDF4 MOV X2, X25
	0x01CEEDF8 BL 0x28FA294
	0x01CEEDFC B 0x1CEEB34
	0x01CEEE00 LDR X0, [X29]
	0x01CEEE04 MOVZ W1, 0x3
	0x01CEEE08 BL 0x1B6E868
	0x01CEEE0C MOV X25, X0
	0x01CEEE10 LDR X0, [X23 + 0x88]
	0x01CEEE14 CBZ X0, 0x1CEEF40

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobController.HandleRevive, X0
	005 Move X0, [X19+64]
	006 Compare X0, 0
	007 JumpIfEqual {28}
	008 Move X1, X31
	009 Call NetworkObject.get_HasStateAuthority, X0
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {25}
	014 Move X8, [X19]
	015 Move X0, X19
	016 Move X1, X31
	017 Move X9, [X8+824]
	018 Move X2, [X8+832]
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move X0, X19
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Call RedGreenController.SetStanding, X0
	024 Return 
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Return 
	028 Call 0x1B6FA1C

Method: System.Void HandleDie()

Disassembly:
	0x01CEEE18 MOV X1, X31
	0x01CEEE1C BL 0x3AA7658
	0x01CEEE20 CBZ X25, 0x1CEEF3C
	0x01CEEE24 LDR W8, [X25 + 0x18]
	0x01CEEE28 CBZ W8, 0x1CEEF38
	0x01CEEE2C STP S0, S1, [X25 + 0x20]
	0x01CEEE30 STR S2, [X25 + 0x28]
	0x01CEEE34 LDR X0, [X23 + 0x90]
	0x01CEEE38 CBZ X0, 0x1CEEF34
	0x01CEEE3C MOV X1, X31
	0x01CEEE40 BL 0x3AA7658
	0x01CEEE44 LDR W8, [X25 + 0x18]
	0x01CEEE48 CMP W8, 0x1
	0x01CEEE4C B.LS 0x1CEEF10
	0x01CEEE50 STP S0, S1, [X25 + 0x2C]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobController.HandleDie, X0
	005 Move X0, [X19+64]
	006 Compare X0, 0
	007 JumpIfEqual {23}
	008 Move X1, X31
	009 Call NetworkObject.get_HasStateAuthority, X0
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {20}
	014 Move W1, 5
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call RedGreenController.set_phase, X0, X1
	019 Return 
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 
	023 Call 0x1B6FA1C

Method: System.Void Initialize()

Disassembly:
	0x01CEECC8 ADRP X8, 0x2535000
	0x01CEECCC MOVZ W9, 0x1
	0x01CEECD0 STRB W9, [X8 + 0x442]
	0x01CEECD4 ADRP X8, 0x225F000
	0x01CEECD8 LDR X8, [X8 + 0x480]

ISIL:
	001 Move X8, [X0]
	002 Move X1, X31
	003 Move X3, [X8+824]
	004 Move X2, [X8+832]
	005 CallNoReturn X3

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01CEEE54 STR S2, [X25 + 0x34]
	0x01CEEE58 LDR X0, [X23 + 0x98]
	0x01CEEE5C CBZ X0, 0x1CEEF30
	0x01CEEE60 MOV X1, X31
	0x01CEEE64 BL 0x3AA7658
	0x01CEEE68 LDR W8, [X25 + 0x18]
	0x01CEEE6C CMP W8, 0x2
	0x01CEEE70 B.LS 0x1CEEF18
	0x01CEEE74 STP S0, S1, [X25 + 0x38]
	0x01CEEE78 STR S2, [X25 + 0x40]
	0x01CEEE7C CBZ X24, 0x1CEEF2C
	0x01CEEE80 LDR X3, [X21]
	0x01CEEE84 MOV X0, X24
	0x01CEEE88 MOV X1, X23
	0x01CEEE8C MOV X2, X25
	0x01CEEE90 BL 0x28FA2A8
	0x01CEEE94 B 0x1CEEB34
	0x01CEEE98 LDR W8, [X31 + 0xC]
	0x01CEEE9C FMOV S0, W31
	0x01CEEEA0 FMOV S1, 0.5
	0x01CEEEA4 ANDS W31, W8, 0x1
	0x01CEEEA8 FCSEL S0, S1, S0, NE
	0x01CEEEAC MOV X0, X19
	0x01CEEEB0 MOV X1, X23
	0x01CEEEB4 BL 0x1CEF094
	0x01CEEEB8 ADRP X8, 0x2261000
	0x01CEEEBC LDR X8, [X8 + 0xDA8]
	0x01CEEEC0 ADD X0, X31, 0x30
	0x01CEEEC4 LDR X1, [X8]
	0x01CEEEC8 BL 0x2A14F2C
	0x01CEEECC LDP X20, X19, [X31 + 0xE0]
	0x01CEEED0 LDP X22, X21, [X31 + 0xD0]
	0x01CEEED4 LDP X24, X23, [X31 + 0xC0]
	0x01CEEED8 LDP X26, X25, [X31 + 0xB0]
	0x01CEEEDC LDP X28, X27, [X31 + 0xA0]
	0x01CEEEE0 LDP X29, X30, [X31 + 0x90]
	0x01CEEEE4 LDP D9, D8, [X31 + 0x80]
	0x01CEEEE8 LDP D11, D10, [X31 + 0x70]
	0x01CEEEEC LDP D13, D12, [X31 + 0x60]
	0x01CEEEF0 LDP D15, D14, [X31 + 0x50]
	0x01CEEEF4 ADD X31, X31, 0xF0
	0x01CEEEF8 RET
	0x01CEEEFC BL 0x1B6EA1C
	0x01CEEF00 BL 0x1B6EA1C
	0x01CEEF04 BL 0x1B6EA1C
	0x01CEEF08 BL 0x1B6EA1C
	0x01CEEF0C BL 0x1B6EA1C
	0x01CEEF10 BL 0x1B6EA24
	0x01CEEF14 BL 0x1B6EA24
	0x01CEEF18 BL 0x1B6EA24
	0x01CEEF1C BL 0x1B6EA24
	0x01CEEF20 BL 0x1B6EA1C
	0x01CEEF24 BL 0x1B6EA24
	0x01CEEF28 BL 0x1B6EA1C
	0x01CEEF2C BL 0x1B6EA1C
	0x01CEEF30 BL 0x1B6EA1C
	0x01CEEF34 BL 0x1B6EA1C
	0x01CEEF38 BL 0x1B6EA24
	0x01CEEF3C BL 0x1B6EA1C
	0x01CEEF40 BL 0x1B6EA1C
	0x01CEEF44 BL 0x1B6EA1C
	0x01CEEF48 BL 0x1B6EA24
	0x01CEEF4C BL 0x1B6EA1C
	0x01CEEF50 BL 0x1B6EA1C
	0x01CEEF54 BL 0x1B6EA24

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x2536000
	006 Move W8, [X20+1689]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2263000
	013 Move X0, [X0+1216]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1689], W8
	017 Move X0, X19
	018 Call MobController.FixedUpdateNetwork, X0
	019 Move X0, X19
	020 Call MobController.get__updateValid, X0
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {72}
	025 Move X0, X19
	026 Call RedGreenController.get_phase, X0
	027 Subtract W8, W0, 1
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X9, -18878464
	030 Add X9, X9, 2401
	031 NotImplemented "Instruction ADR not yet implemented."
	032 Move W11, [X9]
	033 Add X10, X10, X11
	034 CallNoReturn X10
	035 Move X0, X19
	036 Call RedGreenController.UpdateStanding, X0
	037 Move X0, X19
	038 Call RedGreenController.UpdateAnticipating, X0
	039 Move X0, X19
	040 Call RedGreenController.UpdateCharging, X0
	041 Move X0, X19
	042 Call RedGreenController.UpdateBackToPosition, X0
	043 Move X0, X31
	044 Call GameManager.get_isDebug
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {72}
	049 Move X20, [X19+360]
	050 Compare X20, 0
	051 JumpIfEqual {72}
	052 Move X0, X19
	053 Call RedGreenController.get_phase, X0
	054 Move X8, 0x2263000
	055 Move X8, [X8+1216]
	056 Move TEMP, 0
	057 Not TEMP
	058 Move X9, TEMP
	059 Move [X31+24], W0
	060 Add X0, X31, 8
	061 Move X8, [X8]
	062 Move X1, X31
	063 Move [X31+8], X8
	064 Move [X31+16], X9
	065 Call Enum.ToString, X0
	066 Move X8, [X20+64]
	067 Move X9, [X20+24]
	068 Move X2, [X20+40]
	069 Move X1, X0
	070 Move X0, X8
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Move X20, [X31+48]
	073 Move X19, [X31+56]
	074 Move X30, [X31+32]
	075 Add X31, X31, 64
	076 Return 

Method: System.Void SetStanding()

Disassembly:
	0x01CEECDC ADRP X9, 0x2535000
	0x01CEECE0 LDRB W9, [X9 + 0x440]
	0x01CEECE4 LDR X8, [X8]
	0x01CEECE8 LDR X8, [X8 + 0xB8]
	0x01CEECEC LDP S15, S14, [X8 + 0x18]
	0x01CEECF0 LDR V13, [X8 + 0x20]
	0x01CEECF4 CBNZ W9, 0x1CEED0C
	0x01CEECF8 MOV X0, X22
	0x01CEECFC BL 0x1B6E7F0
	0x01CEED00 MOVZ W8, 0x1
	0x01CEED04 ADRP X9, 0x2535000
	0x01CEED08 STRB W8, [X9 + 0x440]
	0x01CEED0C LDR X0, [X22]
	0x01CEED10 LDR W8, [X0 + 0xE0]
	0x01CEED14 CBNZ W8, 0x1CEED1C
	0x01CEED18 BL 0x1B6E8F8
	0x01CEED1C LDR V3, [X31 + 0x14]
	0x01CEED20 FADD S0, S8, S15
	0x01CEED24 FADD S1, S11, S14
	0x01CEED28 FADD S2, S12, S13
	0x01CEED2C FSUB S3, S3, S0
	0x01CEED30 FSUB S4, S9, S1
	0x01CEED34 FSUB S5, S10, S2
	0x01CEED38 FMUL S6, S3, S3
	0x01CEED3C FMUL S7, S4, S4
	0x01CEED40 FMUL S16, S5, S5
	0x01CEED44 FADD S6, S6, S7
	0x01CEED48 FADD S6, S6, S16
	0x01CEED4C FSQRT S6, S6
	0x01CEED50 FDIV S3, S3, S6
	0x01CEED54 FDIV S4, S4, S6
	0x01CEED58 FDIV S5, S5, S6
	0x01CEED5C BL 0x1CE8658
	0x01CEED60 TBNZ X0, 0x0, 0x1CEEE98
	0x01CEED64 LDR X24, [X19 + 0x1B0]
	0x01CEED68 LDR X0, [X29]
	0x01CEED6C MOVZ W1, 0x3
	0x01CEED70 BL 0x1B6E868
	0x01CEED74 MOV X25, X0
	0x01CEED78 LDR X0, [X23 + 0x88]
	0x01CEED7C CBZ X0, 0x1CEEF50
	0x01CEED80 MOV X1, X31
	0x01CEED84 BL 0x3AA7658
	0x01CEED88 CBZ X25, 0x1CEEF4C
	0x01CEED8C LDR W8, [X25 + 0x18]
	0x01CEED90 CBZ W8, 0x1CEEF48
	0x01CEED94 STP S0, S1, [X25 + 0x20]
	0x01CEED98 STR S2, [X25 + 0x28]
	0x01CEED9C LDR X0, [X23 + 0x90]
	0x01CEEDA0 CBZ X0, 0x1CEEF44
	0x01CEEDA4 MOV X1, X31
	0x01CEEDA8 BL 0x3AA7658
	0x01CEEDAC LDR W8, [X25 + 0x18]
	0x01CEEDB0 CMP W8, 0x1
	0x01CEEDB4 B.LS 0x1CEEF54
	0x01CEEDB8 STP S0, S1, [X25 + 0x2C]
	0x01CEEDBC STR S2, [X25 + 0x34]
	0x01CEEDC0 LDR X0, [X23 + 0x98]
	0x01CEEDC4 CBZ X0, 0x1CEEF60

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2536000
	005 Move W8, [X20+1690]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2263000
	012 Move X0, [X0+1208]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1690], W8
	016 Move W1, 1
	017 Move X0, X19
	018 Call RedGreenController.set_phase, X0, X1
	019 Move X9, [X19+184]
	020 Compare X9, 0
	021 JumpIfEqual {72}
	022 Move X8, [X9+48]
	023 Compare X8, 0
	024 JumpIfEqual {72}
	025 Move W10, [X8+24]
	026 Compare W10, 0
	027 JumpIfEqual {73}
	028 Move X10, [X9+88]
	029 Compare X10, 0
	030 JumpIfEqual {72}
	031 Move W11, [X10+24]
	032 Compare W11, 0
	033 JumpIfEqual {73}
	034 Move X9, [X9+96]
	035 Compare X9, 0
	036 JumpIfEqual {72}
	037 Move W11, [X9+24]
	038 Compare W11, 0
	039 JumpIfEqual {73}
	040 Move X11, [X19]
	041 Move V0, [X8+32]
	042 Move V1, [X10+32]
	043 Move V2, [X9+32]
	044 Move X8, [X11+680]
	045 Move X2, [X11+688]
	046 Move W1, 1
	047 Move X0, X19
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X0, [X19+432]
	050 Compare X0, 0
	051 JumpIfEqual {72}
	052 Move X8, 0x2263000
	053 Move X8, [X8+1208]
	054 Move X1, [X8]
	055 Call Dictionary`2<Object, Object>.Clear, X0
	056 Move W1, 1
	057 Move X0, X19
	058 Call RedGreenController.set_isGreen, X0, X1
	059 Move S0, W31
	060 Move X0, X19
	061 Call RedGreenController.set_switchLightTimer, X0, V0
	062 Move V0, [X19+392]
	063 Move V1, [X19+396]
	064 Move X0, X31
	065 Call Random.Range, V0, V1
	066 Move X0, X19
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Call RedGreenController.set_switchLightInterval, X0, V0
	071 Return 
	072 Call 0x1B6FA1C
	073 Call 0x1B6FA24

Method: System.Void UpdateStanding()

Disassembly:
	0x01CEEF58 BL 0x1B6EA24
	0x01CEEF5C BL 0x1B6EA1C
	0x01CEEF60 BL 0x1B6EA1C
	0x01CEEF64 BL 0x1B6EA1C
	0x01CEEF68 BL 0x1B6EA1C
	0x01CEEF6C BL 0x1B6EA24
	0x01CEEF70 B 0x1CEF020
	0x01CEEF74 B 0x1CEF020
	0x01CEEF78 B 0x1CEF020
	0x01CEEF7C B 0x1CEF020
	0x01CEEF80 B 0x1CEF020
	0x01CEEF84 B 0x1CEF020
	0x01CEEF88 B 0x1CEF020
	0x01CEEF8C B 0x1CEF020
	0x01CEEF90 B 0x1CEF020
	0x01CEEF94 B 0x1CEF020
	0x01CEEF98 B 0x1CEF020
	0x01CEEF9C B 0x1CEF020
	0x01CEEFA0 B 0x1CEF020
	0x01CEEFA4 B 0x1CEF020
	0x01CEEFA8 B 0x1CEF020
	0x01CEEFAC B 0x1CEF020
	0x01CEEFB0 B 0x1CEF020
	0x01CEEFB4 B 0x1CEF020
	0x01CEEFB8 B 0x1CEF020
	0x01CEEFBC B 0x1CEF020
	0x01CEEFC0 B 0x1CEF020
	0x01CEEFC4 B 0x1CEF020
	0x01CEEFC8 B 0x1CEF020
	0x01CEEFCC B 0x1CEF020
	0x01CEEFD0 B 0x1CEF020
	0x01CEEFD4 B 0x1CEF020
	0x01CEEFD8 B 0x1CEF020
	0x01CEEFDC B 0x1CEF020
	0x01CEEFE0 B 0x1CEF020
	0x01CEEFE4 B 0x1CEF020
	0x01CEEFE8 B 0x1CEF020
	0x01CEEFEC B 0x1CEF020
	0x01CEEFF0 B 0x1CEF020
	0x01CEEFF4 B 0x1CEF020
	0x01CEEFF8 B 0x1CEF020
	0x01CEEFFC B 0x1CEF020
	0x01CEF000 B 0x1CEF020
	0x01CEF004 B 0x1CEF020
	0x01CEF008 B 0x1CEF020
	0x01CEF00C B 0x1CEF020
	0x01CEF010 B 0x1CEF020
	0x01CEF014 B 0x1CEF020
	0x01CEF018 B 0x1CEF020
	0x01CEF01C B 0x1CEF020
	0x01CEF020 MOV X19, X0
	0x01CEF024 CMP W1, 0x1
	0x01CEF028 B.NE 0x1CEF05C
	0x01CEF02C MOV X0, X19
	0x01CEF030 BL 0x3D19840
	0x01CEF034 LDR X20, [X0]
	0x01CEF038 BL 0x3D19850
	0x01CEF03C ADRP X8, 0x2260000
	0x01CEF040 LDR X8, [X8 + 0xDA8]
	0x01CEF044 ADD X0, X31, 0x30
	0x01CEF048 LDR X1, [X8]
	0x01CEF04C BL 0x2A14F2C
	0x01CEF050 CBZ X20, 0x1CEEECC
	0x01CEF054 MOV X0, X20
	0x01CEF058 BL 0x1B6EA14
	0x01CEF05C MOV X20, X31
	0x01CEF060 B 0x1CEF068
	0x01CEF064 MOV X19, X0
	0x01CEF068 ADRP X8, 0x2260000
	0x01CEF06C LDR X8, [X8 + 0xDA8]
	0x01CEF070 LDR X1, [X8]
	0x01CEF074 ADD X0, X31, 0x30
	0x01CEF078 BL 0x2A14F2C
	0x01CEF07C CBNZ X20, 0x1CEF088
	0x01CEF080 MOV X0, X19
	0x01CEF084 BL 0x1C8418C
	0x01CEF088 MOV X0, X20
	0x01CEF08C BL 0x1B6EA14
	0x01CEF090 BL 0x18F46A8
	0x01CEF094 STR D8, [X31 - 0x20]!
	0x01CEF098 STR X30, [X31 + 0x8]
	0x01CEF09C STP X20, X19, [X31 + 0x10]
	0x01CEF0A0 MOV X20, X1
	0x01CEF0A4 MOVZ W1, 0x2
	0x01CEF0A8 MOV V8.16B, V0.16B
	0x01CEF0AC MOV X19, X0
	0x01CEF0B0 BL 0x1CED2BC

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2536000
	006 Move W8, [X20+1691]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2263000
	013 Move X0, [X0+1208]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1691], W8
	017 Move X0, X19
	018 Call RedGreenController.get_switchLightTimer, X0
	019 Move X0, [X19+56]
	020 Compare X0, 0
	021 JumpIfEqual {100}
	022 Move X1, X31
	023 Move V8, V0
	024 Call NetworkRunner.get_DeltaTime, X0
	025 Add S0, S8, S0
	026 Move X0, X19
	027 Call RedGreenController.set_switchLightTimer, X0, V0
	028 Move X0, X19
	029 Call RedGreenController.get_switchLightTimer, X0
	030 Move X0, X19
	031 Move V8, V0
	032 Call RedGreenController.get_switchLightInterval, X0
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 Move X0, X19
	035 Call RedGreenController.get_isGreen, X0
	036 NotImplemented "Instruction ORN not yet implemented."
	037 And W1, W8, 1
	038 Move X0, X19
	039 Call RedGreenController.set_isGreen, X0, X1
	040 Move X0, X19
	041 Call RedGreenController.get_switchLightTimer, X0
	042 Move X0, X19
	043 Move V8, V0
	044 Call RedGreenController.get_switchLightInterval, X0
	045 Subtract S0, S8, S0
	046 Move X0, X19
	047 Call RedGreenController.set_switchLightTimer, X0, V0
	048 Move X0, X19
	049 Call RedGreenController.get_isGreen, X0
	050 And W31, W0, 1
	051 Move W8, 404
	052 Move W9, 396
	053 Move W10, 400
	054 Move W11, 392
	055 NotImplemented "Instruction CSEL not yet implemented."
	056 NotImplemented "Instruction CSEL not yet implemented."
	057 Move V0, [X19]
	058 Move V1, [X19]
	059 Move X0, X31
	060 Call Random.Range, V0, V1
	061 Move X0, X19
	062 Call RedGreenController.set_switchLightInterval, X0, V0
	063 Move X0, X19
	064 Call RedGreenController.get_isGreen, X0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfEqual {76}
	069 Move X0, [X19+432]
	070 Compare X0, 0
	071 JumpIfEqual {100}
	072 Move X8, 0x2262000
	073 Move X8, [X8+1208]
	074 Move X1, [X8]
	075 Call Dictionary`2<Object, Object>.Clear, X0
	076 Move X0, X19
	077 Call RedGreenController.get_isGreen, X0
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfEqual {95}
	082 Move X0, X19
	083 Call RedGreenController.get_switchLightTimer, X0
	084 Move X8, -19156992
	085 Move V1, [X8+2816]
	086 NotImplemented "Instruction FCMP not yet implemented."
	087 Move X0, X19
	088 Move X20, [X31+16]
	089 Move X19, [X31+24]
	090 Move X30, [X31+8]
	091 Move W1, W31
	092 Move V8, [X31+32]
	093 Call RedGreenController.UpdateDetectingPlayer, X0, X1
	094 Return 
	095 Move X20, [X31+16]
	096 Move X19, [X31+24]
	097 Move X30, [X31+8]
	098 Move V8, [X31+32]
	099 Return 
	100 Call 0x1B6FA1C

Method: System.Void UpdateDetectingPlayer(System.Boolean shorterAnticipating = False)

Disassembly:
	0x01CEF9D0 BL 0x3AA481C
	0x01CEF9D4 CBZ X21, 0x1CEFA00
	0x01CEF9D8 FMUL S3, S11, S0
	0x01CEF9DC MOV X0, X21
	0x01CEF9E0 MOV V0.16B, V10.16B
	0x01CEF9E4 MOV V1.16B, V9.16B
	0x01CEF9E8 MOV V2.16B, V8.16B
	0x01CEF9EC MOV X1, X31
	0x01CEF9F0 BL 0x3AA8744
	0x01CEF9F4 LDR X8, [X19 + 0xF8]
	0x01CEF9F8 ADD X22, X22, 0x1
	0x01CEF9FC CBNZ X8, 0x1CEF970
	0x01CEFA00 BL 0x1B6EA1C
	0x01CEFA04 LDP X20, X19, [X31 + 0x50]
	0x01CEFA08 LDP X22, X21, [X31 + 0x40]
	0x01CEFA0C LDP X24, X23, [X31 + 0x30]
	0x01CEFA10 LDR X30, [X31 + 0x20]
	0x01CEFA14 LDP D9, D8, [X31 + 0x10]
	0x01CEFA18 LDP D11, D10, [X31], #0x60
	0x01CEFA1C RET
	0x01CEFA20 BL 0x1B6EA24
	0x01CEFA24 STP X30, X23, [X31 - 0x30]!
	0x01CEFA28 STP X22, X21, [X31 + 0x10]
	0x01CEFA2C STP X20, X19, [X31 + 0x20]
	0x01CEFA30 ADRP X23, 0x2534000
	0x01CEFA34 ADRP X22, 0x225F000
	0x01CEFA38 ADRP X20, 0x2261000
	0x01CEFA3C ADRP X21, 0x2260000
	0x01CEFA40 LDRB W8, [X23 + 0x6A6]
	0x01CEFA44 LDR X22, [X22 + 0xFC0]
	0x01CEFA48 LDR X20, [X20 + 0x500]
	0x01CEFA4C LDR X21, [X21 + 0xE08]
	0x01CEFA50 MOV X19, X0
	0x01CEFA54 TBNZ X8, 0x0, 0x1CEFA84
	0x01CEFA58 ADRP X0, 0x2260000
	0x01CEFA5C LDR X0, [X0 + 0xE08]
	0x01CEFA60 BL 0x1B6E7F0
	0x01CEFA64 ADRP X0, 0x225F000
	0x01CEFA68 LDR X0, [X0 + 0xFC0]
	0x01CEFA6C BL 0x1B6E7F0
	0x01CEFA70 ADRP X0, 0x2261000
	0x01CEFA74 LDR X0, [X0 + 0x500]
	0x01CEFA78 BL 0x1B6E7F0
	0x01CEFA7C MOVZ W8, 0x1
	0x01CEFA80 STRB W8, [X23 + 0x6A6]
	0x01CEFA84 ADRP X8, 0xFFFFFFFFFEDBB000
	0x01CEFA88 ADRP X9, 0xFFFFFFFFFEDBD000
	0x01CEFA8C LDR V0, [X8 + 0xC7]
	0x01CEFA90 LDR V1, [X9 + 0xA]
	0x01CEFA94 MOVZ W1, 0x8
	0x01CEFA98 STUR V0, [X19 + 0x88]
	0x01CEFA9C STUR V1, [X19 + 0x98]
	0x01CEFAA0 LDR X0, [X22]
	0x01CEFAA4 BL 0x1B6E868
	0x01CEFAA8 LDR X1, [X20]
	0x01CEFAAC MOV X2, X31
	0x01CEFAB0 MOV X20, X0
	0x01CEFAB4 BL 0x312E9C0
	0x01CEFAB8 STR X20, [X19 + 0x108]
	0x01CEFABC LDR X0, [X21]
	0x01CEFAC0 LDR W8, [X0 + 0xE0]
	0x01CEFAC4 CBNZ W8, 0x1CEFACC
	0x01CEFAC8 BL 0x1B6E8F8
	0x01CEFACC ADRP X8, 0xFFFFFFFFFEDBE000
	0x01CEFAD0 LDR V0, [X8 + 0xAE0]
	0x01CEFAD4 MOVZ W8, 0x1
	0x01CEFAD8 MOVZ W9, 0x3F800000
	0x01CEFADC STR W31, [X19 + 0x48]
	0x01CEFAE0 STRB W8, [X19 + 0x4C]
	0x01CEFAE4 STR D0, [X19 + 0x40]
	0x01CEFAE8 STR W9, [X19 + 0x80]
	0x01CEFAEC MOV X0, X19
	0x01CEFAF0 LDP X20, X19, [X31 + 0x20]
	0x01CEFAF4 LDP X22, X21, [X31 + 0x10]
	0x01CEFAF8 MOV X1, X31
	0x01CEFAFC LDP X30, X23, [X31], #0x30
	0x01CEFB00 B 0x3A9EEE4
	0x01CEFB04 STR X30, [X31 - 0x30]!
	0x01CEFB08 STP X22, X21, [X31 + 0x10]
	0x01CEFB0C STP X20, X19, [X31 + 0x20]
	0x01CEFB10 ADRP X21, 0x2534000
	0x01CEFB14 ADRP X22, 0x2261000
	0x01CEFB18 ADRP X19, 0x2261000
	0x01CEFB1C ADRP X20, 0x2261000
	0x01CEFB20 LDRB W8, [X21 + 0x6A7]
	0x01CEFB24 LDR X22, [X22 + 0x508]
	0x01CEFB28 LDR X19, [X19 + 0x4B0]
	0x01CEFB2C LDR X20, [X20 + 0x510]
	0x01CEFB30 TBNZ X8, 0x0, 0x1CEFB60
	0x01CEFB34 ADRP X0, 0x2261000
	0x01CEFB38 LDR X0, [X0 + 0x4B0]
	0x01CEFB3C BL 0x1B6E7F0
	0x01CEFB40 ADRP X0, 0x2261000
	0x01CEFB44 LDR X0, [X0 + 0x508]
	0x01CEFB48 BL 0x1B6E7F0
	0x01CEFB4C ADRP X0, 0x2261000
	0x01CEFB50 LDR X0, [X0 + 0x510]
	0x01CEFB54 BL 0x1B6E7F0
	0x01CEFB58 MOVZ W8, 0x1
	0x01CEFB5C STRB W8, [X21 + 0x6A7]
	0x01CEFB60 LDR X0, [X22]
	0x01CEFB64 MOV X1, X31
	0x01CEFB68 BL 0x3A7AE20
	0x01CEFB6C LDR X8, [X19]
	0x01CEFB70 MOV X1, X31
	0x01CEFB74 LDR X8, [X8 + 0xB8]
	0x01CEFB78 STR W0, [X8]
	0x01CEFB7C LDR X0, [X20]
	0x01CEFB80 BL 0x3A7AE20
	0x01CEFB84 LDR X8, [X19]
	0x01CEFB88 LDP X20, X19, [X31 + 0x20]
	0x01CEFB8C LDP X22, X21, [X31 + 0x10]
	0x01CEFB90 LDR X8, [X8 + 0xB8]
	0x01CEFB94 STR W0, [X8 + 0x4]
	0x01CEFB98 LDR X30, [X31], #0x30
	0x01CEFB9C RET
	0x01CEFBA0 SUB X31, X31, 0x80
	0x01CEFBA4 STP X30, X25, [X31 + 0x40]
	0x01CEFBA8 STP X24, X23, [X31 + 0x50]
	0x01CEFBAC STP X22, X21, [X31 + 0x60]
	0x01CEFBB0 STP X20, X19, [X31 + 0x70]
	0x01CEFBB4 ADRP X20, 0x2534000
	0x01CEFBB8 ADRP X21, 0x2260000
	0x01CEFBBC LDRB W8, [X20 + 0x6A8]
	0x01CEFBC0 LDR X21, [X21 + 0x370]
	0x01CEFBC4 MOV X19, X0
	0x01CEFBC8 TBNZ X8, 0x0, 0x1CEFC64
	0x01CEFBCC ADRP X0, 0x2261000
	0x01CEFBD0 LDR X0, [X0 + 0x518]
	0x01CEFBD4 BL 0x1B6E7F0
	0x01CEFBD8 ADRP X0, 0x2261000
	0x01CEFBDC LDR X0, [X0 + 0x520]
	0x01CEFBE0 BL 0x1B6E7F0
	0x01CEFBE4 ADRP X0, 0x2261000
	0x01CEFBE8 LDR X0, [X0 + 0x528]
	0x01CEFBEC BL 0x1B6E7F0
	0x01CEFBF0 ADRP X0, 0x2261000
	0x01CEFBF4 LDR X0, [X0 + 0x530]
	0x01CEFBF8 BL 0x1B6E7F0
	0x01CEFBFC ADRP X0, 0x2261000
	0x01CEFC00 LDR X0, [X0 + 0x538]
	0x01CEFC04 BL 0x1B6E7F0
	0x01CEFC08 ADRP X0, 0x2261000
	0x01CEFC0C LDR X0, [X0 + 0x540]
	0x01CEFC10 BL 0x1B6E7F0
	0x01CEFC14 ADRP X0, 0x225E000
	0x01CEFC18 LDR X0, [X0 + 0x478]
	0x01CEFC1C BL 0x1B6E7F0
	0x01CEFC20 ADRP X0, 0x2260000
	0x01CEFC24 LDR X0, [X0 + 0x370]
	0x01CEFC28 BL 0x1B6E7F0
	0x01CEFC2C ADRP X0, 0x2261000
	0x01CEFC30 LDR X0, [X0 + 0x548]
	0x01CEFC34 BL 0x1B6E7F0
	0x01CEFC38 ADRP X0, 0x225E000
	0x01CEFC3C LDR X0, [X0 + 0x560]
	0x01CEFC40 BL 0x1B6E7F0
	0x01CEFC44 ADRP X0, 0x2261000
	0x01CEFC48 LDR X0, [X0 + 0x550]
	0x01CEFC4C BL 0x1B6E7F0
	0x01CEFC50 ADRP X0, 0x2261000
	0x01CEFC54 LDR X0, [X0 + 0x558]
	0x01CEFC58 BL 0x1B6E7F0
	0x01CEFC5C MOVZ W8, 0x1
	0x01CEFC60 STRB W8, [X20 + 0x6A8]
	0x01CEFC64 LDR X0, [X21]
	0x01CEFC68 STP X31, X31, [X31 + 0x20]
	0x01CEFC6C STR X31, [X31 + 0x30]
	0x01CEFC70 ADRP X22, 0x225E000
	0x01CEFC74 LDR W8, [X0 + 0xE0]
	0x01CEFC78 LDR X22, [X22 + 0x478]
	0x01CEFC7C CBNZ W8, 0x1CEFC88
	0x01CEFC80 BL 0x1B6E8F8
	0x01CEFC84 LDR X0, [X21]
	0x01CEFC88 LDR X8, [X22]
	0x01CEFC8C LDR X9, [X0 + 0xB8]
	0x01CEFC90 LDR W10, [X8 + 0xE0]
	0x01CEFC94 LDR X20, [X9 + 0x10]
	0x01CEFC98 CBNZ W10, 0x1CEFCA4
	0x01CEFC9C MOV X0, X8
	0x01CEFCA0 BL 0x1B6E8F8
	0x01CEFCA4 MOV X0, X20
	0x01CEFCA8 MOV X1, X31
	0x01CEFCAC MOV X2, X31
	0x01CEFCB0 BL 0x3A9D6EC
	0x01CEFCB4 TBZ X0, 0x0, 0x1CEFCEC
	0x01CEFCB8 MOV X0, X19
	0x01CEFCBC MOV X1, X31
	0x01CEFCC0 BL 0x3A9B0C0
	0x01CEFCC4 LDR X8, [X22]
	0x01CEFCC8 MOV X19, X0
	0x01CEFCCC LDR W9, [X8 + 0xE0]
	0x01CEFCD0 CBNZ W9, 0x1CEFCDC
	0x01CEFCD4 MOV X0, X8
	0x01CEFCD8 BL 0x1B6E8F8
	0x01CEFCDC MOV X0, X19
	0x01CEFCE0 MOV X1, X31
	0x01CEFCE4 BL 0x3AA15F4
	0x01CEFCE8 B 0x1CEFED4
	0x01CEFCEC LDR X0, [X21]
	0x01CEFCF0 LDR W8, [X0 + 0xE0]
	0x01CEFCF4 CBNZ W8, 0x1CEFD00
	0x01CEFCF8 BL 0x1B6E8F8
	0x01CEFCFC LDR X0, [X21]
	0x01CEFD00 LDR X8, [X0 + 0xB8]
	0x01CEFD04 MOV X0, X31
	0x01CEFD08 STR X19, [X8 + 0x10]
	0x01CEFD0C BL 0x3AB3C00
	0x01CEFD10 CBZ X0, 0x1CEFEF0
	0x01CEFD14 ADRP X8, 0x2261000
	0x01CEFD18 LDR X8, [X8 + 0x550]
	0x01CEFD1C LDR X9, [X0]
	0x01CEFD20 LDR X8, [X8]
	0x01CEFD24 LDRB W11, [X9 + 0x130]
	0x01CEFD28 LDRB W10, [X8 + 0x130]
	0x01CEFD2C CMP W11, W10
	0x01CEFD30 B.CC 0x1CEFEF0
	0x01CEFD34 LDR X11, [X9 + 0xC8]
	0x01CEFD38 ADD X11, X11, X10, 0x3, LSL
	0x01CEFD3C LDUR X11, [X11 - 0x8]
	0x01CEFD40 CMP X11, X8
	0x01CEFD44 B.NE 0x1CEFEF0
	0x01CEFD48 LDR X9, [X9 + 0xC8]
	0x01CEFD4C MOV W1, W31
	0x01CEFD50 MOV X2, X31
	0x01CEFD54 ADD X9, X9, X10, 0x3, LSL
	0x01CEFD58 LDUR X9, [X9 - 0x8]
	0x01CEFD5C CMP X9, X8
	0x01CEFD60 CSEL X0, X0, X31, EQ
	0x01CEFD64 BL 0x38951CC
	0x01CEFD68 ADRP X23, 0x225E000
	0x01CEFD6C LDR X23, [X23 + 0x560]
	0x01CEFD70 ADRP X9, 0x2261000
	0x01CEFD74 MOV X20, X0
	0x01CEFD78 LDR X8, [X23]
	0x01CEFD7C LDR X9, [X9 + 0x548]
	0x01CEFD80 LDR W10, [X8 + 0xE0]
	0x01CEFD84 LDR X21, [X9]
	0x01CEFD88 CBNZ W10, 0x1CEFD94
	0x01CEFD8C MOV X0, X8
	0x01CEFD90 BL 0x1B6E8F8
	0x01CEFD94 MOV X0, X21
	0x01CEFD98 MOV X1, X31
	0x01CEFD9C BL 0x31F5D3C
	0x01CEFDA0 CBZ X0, 0x1CEFEF0
	0x01CEFDA4 ADRP X8, 0x2261000
	0x01CEFDA8 LDR X8, [X8 + 0x558]
	0x01CEFDAC MOVZ W2, 0x24
	0x01CEFDB0 MOV X3, X31
	0x01CEFDB4 LDR X1, [X8]
	0x01CEFDB8 BL 0x3201130
	0x01CEFDBC CBZ X0, 0x1CEFEF0
	0x01CEFDC0 MOV X1, X20
	0x01CEFDC4 MOV X2, X31
	0x01CEFDC8 BL 0x3138958
	0x01CEFDCC CBZ X0, 0x1CEFEF0
	0x01CEFDD0 ADRP X8, 0x2261000
	0x01CEFDD4 LDR X8, [X8 + 0x540]
	0x01CEFDD8 LDR X9, [X0]
	0x01CEFDDC LDR X8, [X8]
	0x01CEFDE0 LDRB W11, [X9 + 0x130]
	0x01CEFDE4 LDRB W10, [X8 + 0x130]
	0x01CEFDE8 CMP W11, W10
	0x01CEFDEC B.CC 0x1CEFEF0
	0x01CEFDF0 LDR X11, [X9 + 0xC8]
	0x01CEFDF4 ADD X11, X11, X10, 0x3, LSL
	0x01CEFDF8 LDUR X11, [X11 - 0x8]
	0x01CEFDFC CMP X11, X8
	0x01CEFE00 B.NE 0x1CEFEF0
	0x01CEFE04 LDR X9, [X9 + 0xC8]
	0x01CEFE08 ADD X9, X9, X10, 0x3, LSL
	0x01CEFE0C ADRP X10, 0x2261000
	0x01CEFE10 LDUR X9, [X9 - 0x8]
	0x01CEFE14 LDR X10, [X10 + 0x538]
	0x01CEFE18 CMP X9, X8
	0x01CEFE1C LDR X1, [X10]
	0x01CEFE20 CSEL X0, X0, X31, EQ
	0x01CEFE24 ADD X8, X31, 0x8
	0x01CEFE28 BL 0x2E470E0
	0x01CEFE2C LDUR V0, [X31 + 0x8]
	0x01CEFE30 LDR X8, [X31 + 0x18]
	0x01CEFE34 ADRP X24, 0x2261000
	0x01CEFE38 LDR X24, [X24 + 0x520]
	0x01CEFE3C STR V0, [X31 + 0x2]
	0x01CEFE40 STR X8, [X31 + 0x30]
	0x01CEFE44 ADRP X25, 0x2261000
	0x01CEFE48 LDR X25, [X25 + 0x530]
	0x01CEFE4C LDR X1, [X24]
	0x01CEFE50 ADD X0, X31, 0x20
	0x01CEFE54 BL 0x2A14F30
	0x01CEFE58 TBZ X0, 0x0, 0x1CEFEB4
	0x01CEFE5C LDR X20, [X31 + 0x30]
	0x01CEFE60 CBZ X20, 0x1CEFEEC
	0x01CEFE64 MOV X0, X20
	0x01CEFE68 MOV X1, X31
	0x01CEFE6C BL 0x3227E8C
	0x01CEFE70 MOV X21, X0
	0x01CEFE74 LDR X0, [X23]
	0x01CEFE78 LDR X22, [X25]
	0x01CEFE7C LDR W8, [X0 + 0xE0]
	0x01CEFE80 CBNZ W8, 0x1CEFE88
	0x01CEFE84 BL 0x1B6E8F8
	0x01CEFE88 MOV X0, X22
	0x01CEFE8C MOV X1, X31
	0x01CEFE90 BL 0x31F5D3C
	0x01CEFE94 MOV X1, X0
	0x01CEFE98 MOV X0, X21
	0x01CEFE9C MOV X2, X31
	0x01CEFEA0 BL 0x31FEA9C
	0x01CEFEA4 TBZ X0, 0x0, 0x1CEFE4C
	0x01CEFEA8 MOVZ W8, 0x1
	0x01CEFEAC STR X20, [X19 + 0x28]
	0x01CEFEB0 STRB W8, [X19 + 0x30]
	0x01CEFEB4 ADRP X8, 0x2261000
	0x01CEFEB8 LDR X8, [X8 + 0x518]
	0x01CEFEBC ADD X0, X31, 0x20
	0x01CEFEC0 LDR X1, [X8]
	0x01CEFEC4 BL 0x2A14F2C
	0x01CEFEC8 LDR X8, [X19 + 0x28]
	0x01CEFECC CBZ X8, 0x1CEFEF0
	0x01CEFED0 STRB W31, [X8 + 0x18]
	0x01CEFED4 LDP X20, X19, [X31 + 0x70]
	0x01CEFED8 LDP X22, X21, [X31 + 0x60]
	0x01CEFEDC LDP X24, X23, [X31 + 0x50]
	0x01CEFEE0 LDP X30, X25, [X31 + 0x40]
	0x01CEFEE4 ADD X31, X31, 0x80
	0x01CEFEE8 RET
	0x01CEFEEC BL 0x1B6EA1C
	0x01CEFEF0 BL 0x1B6EA1C
	0x01CEFEF4 B 0x1CEFF08
	0x01CEFEF8 B 0x1CEFF08
	0x01CEFEFC B 0x1CEFF08
	0x01CEFF00 B 0x1CEFF08
	0x01CEFF04 B 0x1CEFF08
	0x01CEFF08 MOV X20, X0
	0x01CEFF0C CMP W1, 0x1
	0x01CEFF10 B.NE 0x1CEFF44
	0x01CEFF14 MOV X0, X20
	0x01CEFF18 BL 0x3D19840
	0x01CEFF1C LDR X21, [X0]
	0x01CEFF20 BL 0x3D19850
	0x01CEFF24 ADRP X8, 0x2261000
	0x01CEFF28 LDR X8, [X8 + 0x518]
	0x01CEFF2C ADD X0, X31, 0x20
	0x01CEFF30 LDR X1, [X8]
	0x01CEFF34 BL 0x2A14F2C
	0x01CEFF38 CBZ X21, 0x1CEFEC8
	0x01CEFF3C MOV X0, X21
	0x01CEFF40 BL 0x1B6EA14
	0x01CEFF44 MOV X21, X31
	0x01CEFF48 B 0x1CEFF50
	0x01CEFF4C MOV X20, X0
	0x01CEFF50 ADRP X8, 0x2261000
	0x01CEFF54 LDR X8, [X8 + 0x518]
	0x01CEFF58 LDR X1, [X8]
	0x01CEFF5C ADD X0, X31, 0x20
	0x01CEFF60 BL 0x2A14F2C
	0x01CEFF64 CBNZ X21, 0x1CEFF70
	0x01CEFF68 MOV X0, X20
	0x01CEFF6C BL 0x1C8418C
	0x01CEFF70 MOV X0, X21
	0x01CEFF74 BL 0x1B6EA14
	0x01CEFF78 BL 0x18F46A8
	0x01CEFF7C STP X30, X21, [X31 - 0x20]!
	0x01CEFF80 STP X20, X19, [X31 + 0x10]
	0x01CEFF84 ADRP X20, 0x2534000
	0x01CEFF88 ADRP X21, 0x2260000
	0x01CEFF8C LDRB W8, [X20 + 0x6A9]
	0x01CEFF90 LDR X21, [X21 + 0x370]
	0x01CEFF94 MOV X19, X0
	0x01CEFF98 TBNZ X8, 0x0, 0x1CEFFBC
	0x01CEFF9C ADRP X0, 0x225E000
	0x01CEFFA0 LDR X0, [X0 + 0x478]
	0x01CEFFA4 BL 0x1B6E7F0
	0x01CEFFA8 ADRP X0, 0x2260000
	0x01CEFFAC LDR X0, [X0 + 0x370]
	0x01CEFFB0 BL 0x1B6E7F0
	0x01CEFFB4 MOVZ W8, 0x1
	0x01CEFFB8 STRB W8, [X20 + 0x6A9]
	0x01CEFFBC LDR X0, [X21]
	0x01CEFFC0 ADRP X20, 0x225E000
	0x01CEFFC4 LDR W8, [X0 + 0xE0]
	0x01CEFFC8 LDR X20, [X20 + 0x478]
	0x01CEFFCC CBNZ W8, 0x1CEFFD8
	0x01CEFFD0 BL 0x1B6E8F8
	0x01CEFFD4 LDR X0, [X21]
	0x01CEFFD8 LDR X8, [X20]
	0x01CEFFDC LDR X9, [X0 + 0xB8]
	0x01CEFFE0 LDR W10, [X8 + 0xE0]
	0x01CEFFE4 LDR X20, [X9 + 0x10]
	0x01CEFFE8 CBNZ W10, 0x1CEFFF4
	0x01CEFFEC MOV X0, X8
	0x01CEFFF0 BL 0x1B6E8F8
	0x01CEFFF4 MOV X0, X20
	0x01CEFFF8 MOV X1, X19
	0x01CEFFFC MOV X2, X31
	0x01CF0000 BL 0x3AA0AF0
	0x01CF0004 TBZ X0, 0x0, 0x1CF0024
	0x01CF0008 LDR X0, [X21]
	0x01CF000C LDR W8, [X0 + 0xE0]
	0x01CF0010 CBNZ W8, 0x1CF001C
	0x01CF0014 BL 0x1B6E8F8
	0x01CF0018 LDR X0, [X21]
	0x01CF001C LDR X8, [X0 + 0xB8]
	0x01CF0020 STR X31, [X8 + 0x10]
	0x01CF0024 LDP X20, X19, [X31 + 0x10]
	0x01CF0028 LDP X30, X21, [X31], #0x20
	0x01CF002C RET
	0x01CF0030 STR X30, [X31 - 0x20]!
	0x01CF0034 STP X20, X19, [X31 + 0x10]
	0x01CF0038 ADRP X20, 0x2533000
	0x01CF003C LDRB W8, [X20 + 0x6AA]
	0x01CF0040 MOV X19, X0
	0x01CF0044 TBNZ X8, 0x0, 0x1CF005C
	0x01CF0048 ADRP X0, 0x2260000
	0x01CF004C LDR X0, [X0 + 0x560]
	0x01CF0050 BL 0x1B6E7F0
	0x01CF0054 MOVZ W8, 0x1
	0x01CF0058 STRB W8, [X20 + 0x6AA]
	0x01CF005C LDR X8, [X19 + 0x38]
	0x01CF0060 CBZ X8, 0x1CF00DC
	0x01CF0064 LDR W8, [X8 + 0x20]
	0x01CF0068 CMP W8, 0x0
	0x01CF006C B.GT 0x1CF007C
	0x01CF0070 LDR V0, [X19 + 0x40]
	0x01CF0074 FCMP S0, 0x0
	0x01CF0078 B.LE 0x1CF00CC
	0x01CF007C MOVZ W8, 0x1
	0x01CF0080 LDR X9, [X19 + 0x28]
	0x01CF0084 CBZ X9, 0x1CF00DC
	0x01CF0088 LDRB W10, [X9 + 0x18]
	0x01CF008C CMP W10, 0x0
	0x01CF0090 CSET W10, NE

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+80], D15
	003 Move [X31+88], D14
	004 Move [X31+96], D13
	005 Move [X31+104], D12
	006 Move [X31+112], D11
	007 Move [X31+120], D10
	008 Move [X31+128], D9
	009 Move [X31+136], D8
	010 Move [X31+144], X29
	011 Move [X31+152], X30
	012 Move [X31+160], X28
	013 Move [X31+168], X27
	014 Move [X31+176], X26
	015 Move [X31+184], X25
	016 Move [X31+192], X24
	017 Move [X31+200], X23
	018 Move [X31+208], X22
	019 Move [X31+216], X21
	020 Move [X31+224], X20
	021 Move [X31+232], X19
	022 Move X20, 0x2535000
	023 Move W8, [X20+1692]
	024 Move W21, W1
	025 Move X19, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {59}
	030 Move X0, 0x2262000
	031 Move X0, [X0+1224]
	032 Call 0x1B6F7F0
	033 Move X0, 0x2262000
	034 Move X0, [X0+1232]
	035 Call 0x1B6F7F0
	036 Move X0, 0x2262000
	037 Move X0, [X0+1240]
	038 Call 0x1B6F7F0
	039 Move X0, 0x2262000
	040 Move X0, [X0+1248]
	041 Call 0x1B6F7F0
	042 Move X0, 0x2261000
	043 Move X0, [X0+3496]
	044 Call 0x1B6F7F0
	045 Move X0, 0x2261000
	046 Move X0, [X0+3504]
	047 Call 0x1B6F7F0
	048 Move X0, 0x2261000
	049 Move X0, [X0+3512]
	050 Call 0x1B6F7F0
	051 Move X0, 0x2261000
	052 Move X0, [X0+3520]
	053 Call 0x1B6F7F0
	054 Move X0, 0x2261000
	055 Move X0, [X0+720]
	056 Call 0x1B6F7F0
	057 Move W8, 1
	058 Move [X20+1692], W8
	059 Move X0, X19
	060 Move [X31+64], X31
	061 Move [X31+72], X31
	062 Move [X31+48], X31
	063 Move [X31+56], X31
	064 Call RedGreenController.get_spawnedPosition, X0
	065 Move X8, [X19+184]
	066 Compare X8, 0
	067 JumpIfEqual {425}
	068 Move X8, [X8+120]
	069 Compare X8, 0
	070 JumpIfEqual {425}
	071 Move W9, [X8+24]
	072 Compare W9, 0
	073 JumpIfEqual {427}
	074 Move V3, [X8+32]
	075 Add X1, X31, 72
	076 Move X0, X19
	077 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {377}
	082 Move X0, [X31+72]
	083 Move [X31+12], W21
	084 Compare X0, 0
	085 JumpIfEqual {425}
	086 Move X8, 0x2261000
	087 Move X8, [X8+3520]
	088 Move X1, [X8]
	089 Add X8, X31, 24
	090 Call List`1<Object>.GetEnumerator, X0
	091 NotImplemented "Instruction LDUR not yet implemented."
	092 Move X26, 0x2261000
	093 Move X27, 0x2262000
	094 Move X28, 0x2262000
	095 Move X9, -19156992
	096 Move X22, 0x225F000
	097 Move X29, 0x2261000
	098 Move X8, [X31+40]
	099 Move X26, [X26+3504]
	100 Move X27, [X27+1232]
	101 Move X28, [X28+1240]
	102 Move X22, [X22+1160]
	103 Move X29, [X29+720]
	104 Move [X31+3], V0
	105 Move V0, [X9+3048]
	106 Move X20, 0x2262000
	107 Move X21, 0x2262000
	108 Move [X31+16], S0
	109 Move X20, [X20+1248]
	110 Move [X31+64], X8
	111 Move X21, [X21+1224]
	112 Move X1, [X26]
	113 Add X0, X31, 48
	114 Call Enumerator<Object>.MoveNext, X0
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {372}
	119 Move X23, [X31+64]
	120 Compare X23, 0
	121 JumpIfEqual {399}
	122 Move X0, X23
	123 Move X1, X31
	124 Call NetPlayer.get_isDie, X0
	125 Move TEMP, X0
	126 And TEMP, TEMP, 1
	127 Compare TEMP, 1
	128 JumpIfEqual {112}
	129 Move X0, [X23+136]
	130 Compare X0, 0
	131 JumpIfEqual {401}
	132 Move X1, X31
	133 Call Transform.get_position, X0
	134 Move [X31+20], S0
	135 Move X0, [X23+144]
	136 Compare X0, 0
	137 JumpIfEqual {402}
	138 Move V9, V1
	139 Move V10, V2
	140 Move X1, X31
	141 Call Transform.get_position, X0
	142 Move X0, [X23+152]
	143 Compare X0, 0
	144 JumpIfEqual {400}
	145 Move V11, V0
	146 Move V12, V1
	147 Move V13, V2
	148 Move X1, X31
	149 Call Transform.get_position, X0
	150 Move X0, [X19+432]
	151 Compare X0, 0
	152 JumpIfEqual {403}
	153 Move X2, [X27]
	154 Move V14, V0
	155 Move V15, V1
	156 Move V8, V2
	157 Move X1, X23
	158 Call Dictionary`2<Object, Object>.ContainsKey, X0, X1
	159 Move X24, [X19+432]
	160 Move TEMP, X0
	161 And TEMP, TEMP, 1
	162 Compare TEMP, 1
	163 JumpIfNotEqual {320}
	164 Compare X24, 0
	165 JumpIfEqual {408}
	166 Move X2, [X28]
	167 Move X0, X24
	168 Move X1, X23
	169 Call Dictionary`2<Object, Object>.get_Item, X0, X1
	170 Compare X0, 0
	171 JumpIfEqual {410}
	172 Move W8, [X0+24]
	173 Compare W8, 0
	174 JumpIfEqual {407}
	175 NotImplemented "Instruction CMP not yet implemented."
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move S0, [X0+32]
	178 Move S1, [X0+36]
	179 Move V3, [X31+20]
	180 Move V2, [X0+40]
	181 Subtract S1, S9, S1
	182 Subtract S0, S3, S0
	183 Move V3, [X31+16]
	184 Subtract S2, S10, S2
	185 Multiply S0, S0, S0
	186 Multiply S1, S1, S1
	187 Add S0, S0, S1
	188 Multiply S1, S2, S2
	189 Add S0, S0, S1
	190 NotImplemented "Instruction FCMP not yet implemented."
	191 Move S0, [X0+44]
	192 Move S1, [X0+48]
	193 Move V2, [X0+52]
	194 Subtract S0, S11, S0
	195 Subtract S1, S12, S1
	196 Subtract S2, S13, S2
	197 Multiply S0, S0, S0
	198 Multiply S1, S1, S1
	199 Add S0, S0, S1
	200 Multiply S1, S2, S2
	201 Add S0, S0, S1
	202 NotImplemented "Instruction FCMP not yet implemented."
	203 Move S0, [X0+56]
	204 Move S1, [X0+60]
	205 Move V2, [X0+64]
	206 Subtract S0, S14, S0
	207 Subtract S1, S15, S1
	208 Subtract S2, S8, S2
	209 Multiply S0, S0, S0
	210 Multiply S1, S1, S1
	211 Add S0, S0, S1
	212 Multiply S1, S2, S2
	213 Add S0, S0, S1
	214 NotImplemented "Instruction FCMP not yet implemented."
	215 Move X0, [X19+208]
	216 Compare X0, 0
	217 JumpIfEqual {426}
	218 Move X1, X31
	219 Call Transform.get_position, X0
	220 Move X8, 0x2535000
	221 Move W8, [X8+1090]
	222 Move V8, V0
	223 Move V11, V1
	224 Move V12, V2
	225 Compare W8, 0
	226 JumpIfNotEqual {233}
	227 Move X0, 0x225F000
	228 Move X0, [X0+1152]
	229 Call 0x1B6F7F0
	230 Move X8, 0x2535000
	231 Move W9, 1
	232 Move [X8+1090], W9
	233 Move X8, 0x225F000
	234 Move X8, [X8+1152]
	235 Move X9, 0x2535000
	236 Move W9, [X9+1088]
	237 Move X8, [X8]
	238 Move X8, [X8+184]
	239 Move S15, [X8+24]
	240 Move S14, [X8+28]
	241 Move V13, [X8+32]
	242 Compare W9, 0
	243 JumpIfNotEqual {249}
	244 Move X0, X22
	245 Call 0x1B6F7F0
	246 Move W8, 1
	247 Move X9, 0x2535000
	248 Move [X9+1088], W8
	249 Move X0, [X22]
	250 Move W8, [X0+224]
	251 Compare W8, 0
	252 JumpIfNotEqual {254}
	253 Call 0x1B6F8F8
	254 Move V3, [X31+20]
	255 Add S0, S8, S15
	256 Add S1, S11, S14
	257 Add S2, S12, S13
	258 Subtract S3, S3, S0
	259 Subtract S4, S9, S1
	260 Subtract S5, S10, S2
	261 Multiply S6, S3, S3
	262 Multiply S7, S4, S4
	263 Multiply S16, S5, S5
	264 Add S6, S6, S7
	265 Add S6, S6, S16
	266 NotImplemented "Instruction FSQRT not yet implemented."
	267 NotImplemented "Instruction FDIV not yet implemented."
	268 NotImplemented "Instruction FDIV not yet implemented."
	269 NotImplemented "Instruction FDIV not yet implemented."
	270 Call MobDetectionUtil.IsTargetInLineOfSight, X0, X1, V0
	271 Move TEMP, X0
	272 And TEMP, TEMP, 1
	273 Compare TEMP, 1
	274 JumpIfEqual {364}
	275 Move X24, [X19+432]
	276 Move X0, [X29]
	277 Move W1, 3
	278 Call 0x1B6F868
	279 Move X25, X0
	280 Move X0, [X23+136]
	281 Compare X0, 0
	282 JumpIfEqual {420}
	283 Move X1, X31
	284 Call Transform.get_position, X0
	285 Compare X25, 0
	286 JumpIfEqual {419}
	287 Move W8, [X25+24]
	288 Compare W8, 0
	289 JumpIfEqual {418}
	290 Move [X25+32], S0
	291 Move [X25+40], S1
	292 Move [X25+40], S2
	293 Move X0, [X23+144]
	294 Compare X0, 0
	295 JumpIfEqual {417}
	296 Move X1, X31
	297 Call Transform.get_position, X0
	298 Move W8, [X25+24]
	299 NotImplemented "Instruction CMP not yet implemented."
	300 Move [X25+44], S0
	301 Move [X25+52], S1
	302 Move [X25+52], S2
	303 Move X0, [X23+152]
	304 Compare X0, 0
	305 JumpIfEqual {424}
	306 Move X1, X31
	307 Call Transform.get_position, X0
	308 Move W8, [X25+24]
	309 NotImplemented "Instruction CMP not yet implemented."
	310 Move [X25+56], S0
	311 Move [X25+64], S1
	312 Move [X25+64], S2
	313 Compare X24, 0
	314 JumpIfEqual {423}
	315 Move X3, [X20]
	316 Move X0, X24
	317 Move X1, X23
	318 Move X2, X25
	319 Call Dictionary`2<Object, Object>.set_Item, X0, X1, X2
	320 Move X0, [X29]
	321 Move W1, 3
	322 Call 0x1B6F868
	323 Move X25, X0
	324 Move X0, [X23+136]
	325 Compare X0, 0
	326 JumpIfEqual {416}
	327 Move X1, X31
	328 Call Transform.get_position, X0
	329 Compare X25, 0
	330 JumpIfEqual {415}
	331 Move W8, [X25+24]
	332 Compare W8, 0
	333 JumpIfEqual {414}
	334 Move [X25+32], S0
	335 Move [X25+40], S1
	336 Move [X25+40], S2
	337 Move X0, [X23+144]
	338 Compare X0, 0
	339 JumpIfEqual {413}
	340 Move X1, X31
	341 Call Transform.get_position, X0
	342 Move W8, [X25+24]
	343 NotImplemented "Instruction CMP not yet implemented."
	344 Move [X25+44], S0
	345 Move [X25+52], S1
	346 Move [X25+52], S2
	347 Move X0, [X23+152]
	348 Compare X0, 0
	349 JumpIfEqual {412}
	350 Move X1, X31
	351 Call Transform.get_position, X0
	352 Move W8, [X25+24]
	353 NotImplemented "Instruction CMP not yet implemented."
	354 Move [X25+56], S0
	355 Move [X25+64], S1
	356 Move [X25+64], S2
	357 Compare X24, 0
	358 JumpIfEqual {411}
	359 Move X3, [X21]
	360 Move X0, X24
	361 Move X1, X23
	362 Move X2, X25
	363 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	364 Move W8, [X31+12]
	365 Move S0, W31
	366 Move S1, 0.5
	367 And W31, W8, 1
	368 NotImplemented "Instruction FCSEL not yet implemented."
	369 Move X0, X19
	370 Move X1, X23
	371 Call RedGreenController.SetAnticipating, X0, X1, V0
	372 Move X8, 0x2261000
	373 Move X8, [X8+3496]
	374 Add X0, X31, 48
	375 Move X1, [X8]
	376 Call Enumerator<Object>.Dispose, X0
	377 Move X20, [X31+224]
	378 Move X19, [X31+232]
	379 Move X22, [X31+208]
	380 Move X21, [X31+216]
	381 Move X24, [X31+192]
	382 Move X23, [X31+200]
	383 Move X26, [X31+176]
	384 Move X25, [X31+184]
	385 Move X28, [X31+160]
	386 Move X27, [X31+168]
	387 Move X29, [X31+144]
	388 Move X30, [X31+152]
	389 Move D9, [X31+128]
	390 Move D8, [X31+136]
	391 Move D11, [X31+112]
	392 Move D10, [X31+120]
	393 Move D13, [X31+96]
	394 Move D12, [X31+104]
	395 Move D15, [X31+80]
	396 Move D14, [X31+88]
	397 Add X31, X31, 240
	398 Return 
	399 Call 0x1B6FA1C
	400 Call 0x1B6FA1C
	401 Call 0x1B6FA1C
	402 Call 0x1B6FA1C
	403 Call 0x1B6FA1C
	404 Call 0x1B6FA24
	405 Call 0x1B6FA24
	406 Call 0x1B6FA24
	407 Call 0x1B6FA24
	408 Call 0x1B6FA1C
	409 Call 0x1B6FA24
	410 Call 0x1B6FA1C
	411 Call 0x1B6FA1C
	412 Call 0x1B6FA1C
	413 Call 0x1B6FA1C
	414 Call 0x1B6FA24
	415 Call 0x1B6FA1C
	416 Call 0x1B6FA1C
	417 Call 0x1B6FA1C
	418 Call 0x1B6FA24
	419 Call 0x1B6FA1C
	420 Call 0x1B6FA1C
	421 Call 0x1B6FA24
	422 Call 0x1B6FA24
	423 Call 0x1B6FA1C
	424 Call 0x1B6FA1C
	425 Call 0x1B6FA1C
	426 Call 0x1B6FA1C
	427 Call 0x1B6FA24
	428 Move X19, X0
	429 NotImplemented "Instruction CMP not yet implemented."
	430 Move X0, X19
	431 Call 0x3D1A840
	432 Move X20, [X0]
	433 Call 0x3D1A850
	434 Move X8, 0x2260000
	435 Move X8, [X8+3496]
	436 Add X0, X31, 48
	437 Move X1, [X8]
	438 Call Enumerator<Object>.Dispose, X0
	439 Compare X20, 0
	440 JumpIfEqual {377}
	441 Move X0, X20
	442 Call 0x1B6FA14
	443 Move X20, X31
	444 Move X19, X0
	445 Move X8, 0x2260000
	446 Move X8, [X8+3496]
	447 Move X1, [X8]
	448 Add X0, X31, 48
	449 Call Enumerator<Object>.Dispose, X0
	450 Compare X20, 0
	451 JumpIfNotEqual {454}
	452 Move X0, X19
	453 Call 0x1C8518C
	454 Move X0, X20
	455 Call 0x1B6FA14
	456 Call 0x18F56A8

Method: System.Void SetAnticipating(AnimalCompany.NetPlayer targetPlayer, System.Single startTimer = 0)

Disassembly:
	0x01CF0094 CMP W8, W10
	0x01CF0098 B.EQ 0x1CF00A0
	0x01CF009C STRB W8, [X9 + 0x18]
	0x01CF00A0 LDRB W8, [X19 + 0x30]
	0x01CF00A4 CBZ W8, 0x1CF00C0
	0x01CF00A8 MOV X0, X19
	0x01CF00AC BL 0x1CF00E0
	0x01CF00B0 MOV X0, X19
	0x01CF00B4 LDP X20, X19, [X31 + 0x10]
	0x01CF00B8 LDR X30, [X31], #0x20
	0x01CF00BC B 0x1CF0258
	0x01CF00C0 LDP X20, X19, [X31 + 0x10]
	0x01CF00C4 LDR X30, [X31], #0x20
	0x01CF00C8 RET
	0x01CF00CC LDR V0, [X19 + 0x48]
	0x01CF00D0 FCMP S0, 0x0
	0x01CF00D4 CSET W8, GT
	0x01CF00D8 B 0x1CF0080
	0x01CF00DC BL 0x1B6EA1C
	0x01CF00E0 STP D9, D8, [X31 - 0x30]!
	0x01CF00E4 STP X30, X21, [X31 + 0x10]
	0x01CF00E8 STP X20, X19, [X31 + 0x20]
	0x01CF00EC ADRP X20, 0x2533000
	0x01CF00F0 LDRB W8, [X20 + 0x6AB]
	0x01CF00F4 MOV X19, X0
	0x01CF00F8 TBNZ X8, 0x0, 0x1CF0134
	0x01CF00FC ADRP X0, 0x2260000
	0x01CF0100 LDR X0, [X0 + 0x568]
	0x01CF0104 BL 0x1B6E7F0
	0x01CF0108 ADRP X0, 0x2260000
	0x01CF010C LDR X0, [X0 + 0x570]
	0x01CF0110 BL 0x1B6E7F0
	0x01CF0114 ADRP X0, 0x2260000
	0x01CF0118 LDR X0, [X0 + 0x560]
	0x01CF011C BL 0x1B6E7F0
	0x01CF0120 ADRP X0, 0x225F000
	0x01CF0124 LDR X0, [X0 + 0x370]
	0x01CF0128 BL 0x1B6E7F0
	0x01CF012C MOVZ W8, 0x1
	0x01CF0130 STRB W8, [X20 + 0x6AB]
	0x01CF0134 LDR X0, [X19 + 0x38]
	0x01CF0138 CBZ X0, 0x1CF0254
	0x01CF013C LDR W8, [X0 + 0x20]
	0x01CF0140 CMP W8, 0x1
	0x01CF0144 B.LT 0x1CF01C0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move W1, 2
	007 Move V8, V0
	008 Move X19, X0
	009 Call RedGreenController.set_phase, X0, X1
	010 Move X8, [X19]
	011 Move X0, X19
	012 Move X1, X20
	013 Move X9, [X8+824]
	014 Move X2, [X8+832]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X9, [X19+184]
	017 Compare X9, 0
	018 JumpIfEqual {54}
	019 Move X8, [X9+48]
	020 Compare X8, 0
	021 JumpIfEqual {54}
	022 Move W10, [X8+24]
	023 Compare W10, 0
	024 JumpIfEqual {55}
	025 Move X10, [X9+88]
	026 Compare X10, 0
	027 JumpIfEqual {54}
	028 Move W11, [X10+24]
	029 Compare W11, 0
	030 JumpIfEqual {55}
	031 Move X9, [X9+96]
	032 Compare X9, 0
	033 JumpIfEqual {54}
	034 Move W11, [X9+24]
	035 Compare W11, 0
	036 JumpIfEqual {55}
	037 Move X11, [X19]
	038 Move V0, [X8+32]
	039 Move V1, [X10+32]
	040 Move V2, [X9+32]
	041 Move X8, [X11+680]
	042 Move X2, [X11+688]
	043 Move W1, 1
	044 Move X0, X19
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move X0, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+8]
	050 Move V0, V8
	051 Move V8, [X31+32]
	052 Call RedGreenController.set_timerAnticipating, X0, V0
	053 Return 
	054 Call 0x1B6FA1C
	055 Call 0x1B6FA24

Method: System.Void UpdateAnticipating()

Disassembly:
	0x01CEF0B4 LDR X8, [X19]
	0x01CEF0B8 MOV X0, X19
	0x01CEF0BC MOV X1, X20
	0x01CEF0C0 LDR X9, [X8 + 0x338]
	0x01CEF0C4 LDR X2, [X8 + 0x340]
	0x01CEF0C8 BLR X9
	0x01CEF0CC LDR X9, [X19 + 0xB8]
	0x01CEF0D0 CBZ X9, 0x1CEF140
	0x01CEF0D4 LDR X8, [X9 + 0x30]
	0x01CEF0D8 CBZ X8, 0x1CEF140
	0x01CEF0DC LDR W10, [X8 + 0x18]
	0x01CEF0E0 CBZ W10, 0x1CEF144
	0x01CEF0E4 LDR X10, [X9 + 0x58]
	0x01CEF0E8 CBZ X10, 0x1CEF140
	0x01CEF0EC LDR W11, [X10 + 0x18]
	0x01CEF0F0 CBZ W11, 0x1CEF144
	0x01CEF0F4 LDR X9, [X9 + 0x60]
	0x01CEF0F8 CBZ X9, 0x1CEF140
	0x01CEF0FC LDR W11, [X9 + 0x18]
	0x01CEF100 CBZ W11, 0x1CEF144
	0x01CEF104 LDR X11, [X19]
	0x01CEF108 LDR V0, [X8 + 0x20]
	0x01CEF10C LDR V1, [X10 + 0x20]
	0x01CEF110 LDR V2, [X9 + 0x20]
	0x01CEF114 LDR X8, [X11 + 0x2A8]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call RedGreenController.get_timerAnticipating, X0
	006 Move X0, [X19+56]
	007 Compare X0, 0
	008 JumpIfEqual {29}
	009 Move X1, X31
	010 Move V8, V0
	011 Call NetworkRunner.get_DeltaTime, X0
	012 Add S0, S8, S0
	013 Move X0, X19
	014 Call RedGreenController.set_timerAnticipating, X0, V0
	015 Move X0, X19
	016 Call RedGreenController.get_timerAnticipating, X0
	017 Move S1, 1
	018 NotImplemented "Instruction FCMP not yet implemented."
	019 Move X0, X19
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Move V8, [X31+32]
	023 Call RedGreenController.SetCharging, X0
	024 Return 
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Move V8, [X31+32]
	028 Return 
	029 Call 0x1B6FA1C

Method: System.Void SetCharging()

Disassembly:
	0x01CF0148 ADRP X8, 0x2260000
	0x01CF014C LDR X8, [X8 + 0x570]
	0x01CF0150 LDR X1, [X8]
	0x01CF0154 BL 0x2368C04
	0x01CF0158 CBZ X0, 0x1CF0254
	0x01CF015C LDR V8, [X19 + 0x44]
	0x01CF0160 LDR V0, [X0 + 0x14]
	0x01CF0164 MOV X20, X0
	0x01CF0168 FCMP S8, S0
	0x01CF016C B.PL 0x1CF01D0
	0x01CF0170 MOV X0, X31
	0x01CF0174 BL 0x3AA481C
	0x01CF0178 FADD S0, S8, S0
	0x01CF017C STR S0, [X19 + 0x44]
	0x01CF0180 LDR V8, [X19 + 0x40]
	0x01CF0184 LDR V9, [X20 + 0x10]
	0x01CF0188 MOV X0, X31
	0x01CF018C BL 0x3AA481C
	0x01CF0190 LDR V1, [X20 + 0x14]
	0x01CF0194 FSUB S2, S9, S8
	0x01CF0198 FCMP S2, 0x0
	0x01CF019C FABD S3, S9, S9
	0x01CF01A0 FDIV S0, S0, S1
	0x01CF01A4 FNEG S1, S0
	0x01CF01A8 FCSEL S1, S0, S1, GE
	0x01CF01AC FADD S1, S8, S1
	0x01CF01B0 FCMP S3, S0
	0x01CF01B4 FCSEL S0, S1, S9, HI
	0x01CF01B8 STR S0, [X19 + 0x40]
	0x01CF01BC B 0x1CF020C
	0x01CF01C0 LDP X20, X19, [X31 + 0x20]
	0x01CF01C4 LDP X30, X21, [X31 + 0x10]
	0x01CF01C8 LDP D9, D8, [X31], #0x30
	0x01CF01CC RET
	0x01CF01D0 STR W31, [X19 + 0x44]
	0x01CF01D4 LDR V0, [X20 + 0x10]
	0x01CF01D8 STR S0, [X19 + 0x40]
	0x01CF01DC LDR X8, [X20 + 0x18]
	0x01CF01E0 CBZ X8, 0x1CF01F4
	0x01CF01E4 LDR X9, [X8 + 0x18]
	0x01CF01E8 LDR X0, [X8 + 0x40]
	0x01CF01EC LDR X1, [X8 + 0x28]
	0x01CF01F0 BLR X9
	0x01CF01F4 LDR X0, [X19 + 0x38]
	0x01CF01F8 CBZ X0, 0x1CF0254
	0x01CF01FC ADRP X8, 0x2260000
	0x01CF0200 LDR X8, [X8 + 0x568]
	0x01CF0204 LDR X1, [X8]
	0x01CF0208 BL 0x2368B84
	0x01CF020C ADRP X21, 0x225F000
	0x01CF0210 LDR X21, [X21 + 0x370]
	0x01CF0214 LDR X20, [X19 + 0x20]
	0x01CF0218 LDR X0, [X21]
	0x01CF021C LDR W8, [X0 + 0xE0]
	0x01CF0220 CBNZ W8, 0x1CF0228
	0x01CF0224 BL 0x1B6E8F8
	0x01CF0228 CBZ X20, 0x1CF0254
	0x01CF022C LDR X8, [X21]
	0x01CF0230 LDR V0, [X19 + 0x40]
	0x01CF0234 MOV X0, X20
	0x01CF0238 LDP X20, X19, [X31 + 0x20]
	0x01CF023C LDR X8, [X8 + 0xB8]
	0x01CF0240 LDP X30, X21, [X31 + 0x10]
	0x01CF0244 MOV X2, X31
	0x01CF0248 LDR W1, [X8]
	0x01CF024C LDP D9, D8, [X31], #0x30
	0x01CF0250 B 0x3A7E584
	0x01CF0254 BL 0x1B6EA1C
	0x01CF0258 STR D8, [X31 - 0x30]!
	0x01CF025C STP X30, X21, [X31 + 0x10]
	0x01CF0260 STP X20, X19, [X31 + 0x20]
	0x01CF0264 ADRP X20, 0x2533000
	0x01CF0268 LDRB W8, [X20 + 0x6AC]
	0x01CF026C MOV X19, X0
	0x01CF0270 TBNZ X8, 0x0, 0x1CF0288
	0x01CF0274 ADRP X0, 0x225F000
	0x01CF0278 LDR X0, [X0 + 0x370]
	0x01CF027C BL 0x1B6E7F0
	0x01CF0280 MOVZ W8, 0x1
	0x01CF0284 STRB W8, [X20 + 0x6AC]
	0x01CF0288 LDR V8, [X19 + 0x48]
	0x01CF028C FCMP S8, 0x0
	0x01CF0290 B.LE 0x1CF0300
	0x01CF0294 MOV X0, X31
	0x01CF0298 BL 0x3AA481C
	0x01CF029C ADRP X8, 0xFFFFFFFFFEDB9000
	0x01CF02A0 LDR V1, [X8 + 0xB04]
	0x01CF02A4 FMOV S2, W31
	0x01CF02A8 ADRP X21, 0x225F000
	0x01CF02AC FDIV S0, S0, S1
	0x01CF02B0 FADD S0, S8, S0
	0x01CF02B4 FMAX S0, S0, S2
	0x01CF02B8 STR S0, [X19 + 0x48]
	0x01CF02BC LDR X21, [X21 + 0x370]
	0x01CF02C0 LDR X20, [X19 + 0x20]
	0x01CF02C4 LDR X0, [X21]
	0x01CF02C8 LDR W8, [X0 + 0xE0]
	0x01CF02CC CBNZ W8, 0x1CF02D4
	0x01CF02D0 BL 0x1B6E8F8
	0x01CF02D4 CBZ X20, 0x1CF0310
	0x01CF02D8 LDR X8, [X21]
	0x01CF02DC LDR V0, [X19 + 0x48]
	0x01CF02E0 MOV X0, X20
	0x01CF02E4 LDP X20, X19, [X31 + 0x20]
	0x01CF02E8 LDR X8, [X8 + 0xB8]
	0x01CF02EC LDP X30, X21, [X31 + 0x10]
	0x01CF02F0 MOV X2, X31
	0x01CF02F4 LDR W1, [X8 + 0x8]
	0x01CF02F8 LDR V8, [X31], #0x30
	0x01CF02FC B 0x3A7E584
	0x01CF0300 LDP X20, X19, [X31 + 0x20]
	0x01CF0304 LDP X30, X21, [X31 + 0x10]
	0x01CF0308 LDR V8, [X31], #0x30
	0x01CF030C RET
	0x01CF0310 BL 0x1B6EA1C
	0x01CF0314 STR X30, [X31 - 0x20]!
	0x01CF0318 STP X20, X19, [X31 + 0x10]
	0x01CF031C ADRP X20, 0x2533000
	0x01CF0320 ADRP X19, 0x225F000
	0x01CF0324 LDRB W8, [X20 + 0x6AD]
	0x01CF0328 LDR X19, [X19 + 0x370]
	0x01CF032C TBNZ X8, 0x0, 0x1CF0344
	0x01CF0330 ADRP X0, 0x225F000
	0x01CF0334 LDR X0, [X0 + 0x370]
	0x01CF0338 BL 0x1B6E7F0
	0x01CF033C MOVZ W8, 0x1
	0x01CF0340 STRB W8, [X20 + 0x6AD]
	0x01CF0344 LDR X0, [X19]
	0x01CF0348 LDR W8, [X0 + 0xE0]
	0x01CF034C CBNZ W8, 0x1CF0358
	0x01CF0350 BL 0x1B6E8F8
	0x01CF0354 LDR X0, [X19]
	0x01CF0358 LDR X8, [X0 + 0xB8]
	0x01CF035C LDR X9, [X8 + 0x10]
	0x01CF0360 CBZ X9, 0x1CF038C
	0x01CF0364 LDR X0, [X9 + 0x20]
	0x01CF0368 MOVZ W10, 0x3F800000
	0x01CF036C STR W10, [X9 + 0x48]
	0x01CF0370 CBZ X0, 0x1CF038C
	0x01CF0374 LDR W1, [X8 + 0x8]
	0x01CF0378 LDP X20, X19, [X31 + 0x10]
	0x01CF037C FMOV S0, 1
	0x01CF0380 MOV X2, X31
	0x01CF0384 LDR X30, [X31], #0x20
	0x01CF0388 B 0x3A7E584
	0x01CF038C BL 0x1B6EA1C
	0x01CF0390 STR D10, [X31 - 0x50]!
	0x01CF0394 STP D9, D8, [X31 + 0x8]
	0x01CF0398 STR X30, [X31 + 0x18]
	0x01CF039C STP X24, X23, [X31 + 0x20]
	0x01CF03A0 STP X22, X21, [X31 + 0x30]
	0x01CF03A4 STP X20, X19, [X31 + 0x40]
	0x01CF03A8 ADRP X24, 0x2533000
	0x01CF03AC ADRP X23, 0x225F000
	0x01CF03B0 LDRB W8, [X24 + 0x6AE]
	0x01CF03B4 LDR X23, [X23 + 0x370]
	0x01CF03B8 MOV W22, W3

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x2534000
	009 Move X20, 0x225E000
	010 Move W8, [X21+1693]
	011 Move X20, [X20+1144]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x225E000
	018 Move X0, [X0+1144]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X21+1693], W8
	022 Move W1, 3
	023 Move X0, X19
	024 Call RedGreenController.set_phase, X0, X1
	025 Move X0, [X20]
	026 Move X20, [X19+320]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1B6F8F8
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {49}
	039 Move X0, X19
	040 Move X20, [X31+48]
	041 Move X19, [X31+56]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Move D9, [X31+16]
	045 Move D8, [X31+24]
	046 Move V10, [X31+64]
	047 Call RedGreenController.SetStanding, X0
	048 Return 
	049 Move S0, W31
	050 Move X0, X19
	051 Call MobController.set__timerToChasing, X0, V0
	052 Move X9, [X19+184]
	053 Compare X9, 0
	054 JumpIfEqual {189}
	055 Move X8, [X9+56]
	056 Compare X8, 0
	057 JumpIfEqual {189}
	058 Move W10, [X8+24]
	059 Compare W10, 0
	060 JumpIfEqual {190}
	061 Move X10, [X9+88]
	062 Compare X10, 0
	063 JumpIfEqual {189}
	064 Move W11, [X10+24]
	065 Compare W11, 0
	066 JumpIfEqual {190}
	067 Move X9, [X9+96]
	068 Compare X9, 0
	069 JumpIfEqual {189}
	070 Move W11, [X9+24]
	071 Compare W11, 0
	072 JumpIfEqual {190}
	073 Move X11, [X19]
	074 Move V0, [X8+32]
	075 Move V1, [X10+32]
	076 Move V2, [X9+32]
	077 Move X8, [X11+680]
	078 Move X2, [X11+688]
	079 Move X0, X19
	080 Move W1, W31
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Move X0, [X19+320]
	083 Compare X0, 0
	084 JumpIfEqual {189}
	085 Move X1, X31
	086 Call Component.get_transform, X0
	087 Compare X0, 0
	088 JumpIfEqual {189}
	089 Move X1, X31
	090 Call Transform.get_position, X0
	091 Move X0, X19
	092 Move X1, X31
	093 Move V8, V0
	094 Move V9, V1
	095 Move V10, V2
	096 Call Component.get_transform, X0
	097 Compare X0, 0
	098 JumpIfEqual {189}
	099 Move X1, X31
	100 Call Transform.get_position, X0
	101 Subtract S0, S8, S0
	102 Subtract S1, S9, S1
	103 Subtract S2, S10, S2
	104 Move X0, X31
	105 Call Extensions.Flatten, X0
	106 Move X20, 0x2534000
	107 Move W8, [X20+1089]
	108 Move V8, V0
	109 Move V9, V1
	110 Move V10, V2
	111 Compare W8, 0
	112 JumpIfNotEqual {118}
	113 Move X0, 0x225E000
	114 Move X0, [X0+1160]
	115 Call 0x1B6F7F0
	116 Move W8, 1
	117 Move [X20+1089], W8
	118 Move X8, 0x225E000
	119 Move X8, [X8+1160]
	120 Move X0, [X8]
	121 Move W8, [X0+224]
	122 Compare W8, 0
	123 JumpIfNotEqual {125}
	124 Call 0x1B6F8F8
	125 Multiply S0, S8, S8
	126 Multiply S1, S9, S9
	127 Move X8, -19161088
	128 Add S0, S0, S1
	129 Move V1, [X8+2916]
	130 Move X20, 0x225E000
	131 Multiply S2, S10, S10
	132 Move X20, [X20+1152]
	133 Add S0, S2, S0
	134 NotImplemented "Instruction FSQRT not yet implemented."
	135 NotImplemented "Instruction FCMP not yet implemented."
	136 NotImplemented "Instruction FDIV not yet implemented."
	137 NotImplemented "Instruction FDIV not yet implemented."
	138 NotImplemented "Instruction FDIV not yet implemented."
	139 Move X21, 0x2534000
	140 Move W8, [X21+1087]
	141 Compare W8, 0
	142 JumpIfNotEqual {148}
	143 Move X0, 0x225E000
	144 Move X0, [X0+1152]
	145 Call 0x1B6F7F0
	146 Move W8, 1
	147 Move [X21+1087], W8
	148 Move X8, [X20]
	149 Move X8, [X8+184]
	150 Move S8, [X8]
	151 Move S9, [X8+4]
	152 Move V10, [X8+8]
	153 Move X0, X19
	154 Move X1, X31
	155 Call Component.get_transform, X0
	156 Move X21, 0x2534000
	157 Move W8, [X21+1090]
	158 Move X19, X0
	159 Compare W8, 0
	160 JumpIfNotEqual {166}
	161 Move X0, 0x225E000
	162 Move X0, [X0+1152]
	163 Call 0x1B6F7F0
	164 Move W8, 1
	165 Move [X21+1090], W8
	166 Move X8, [X20]
	167 Move V0, V8
	168 Move V1, V9
	169 Move V2, V10
	170 Move X8, [X8+184]
	171 Move X0, X31
	172 Move S3, [X8+24]
	173 Move S4, [X8+28]
	174 Move V5, [X8+32]
	175 Call Quaternion.LookRotation, X0, X1
	176 Compare X19, 0
	177 JumpIfEqual {189}
	178 Move X0, X19
	179 Move X20, [X31+48]
	180 Move X19, [X31+56]
	181 Move X30, [X31+32]
	182 Move X21, [X31+40]
	183 Move D9, [X31+16]
	184 Move D8, [X31+24]
	185 Move X1, X31
	186 Move V10, [X31+64]
	187 Call Transform.set_rotation, X0, X1
	188 Return 
	189 Call 0x1B6FA1C
	190 Call 0x1B6FA24

Method: System.Void UpdateCharging()

Disassembly:
	0x01CEF118 LDR X2, [X11 + 0x2B0]
	0x01CEF11C MOVZ W1, 0x1
	0x01CEF120 MOV X0, X19
	0x01CEF124 BLR X8
	0x01CEF128 MOV X0, X19
	0x01CEF12C LDP X20, X19, [X31 + 0x10]
	0x01CEF130 LDR X30, [X31 + 0x8]
	0x01CEF134 MOV V0.16B, V8.16B
	0x01CEF138 LDR V8, [X31], #0x20
	0x01CEF13C B 0x1CED690
	0x01CEF140 BL 0x1B6EA1C
	0x01CEF144 BL 0x1B6EA24
	0x01CEF148 STR D10, [X31 - 0x40]!
	0x01CEF14C STP D9, D8, [X31 + 0x10]
	0x01CEF150 STP X30, X21, [X31 + 0x20]
	0x01CEF154 STP X20, X19, [X31 + 0x30]
	0x01CEF158 ADRP X21, 0x2534000
	0x01CEF15C ADRP X20, 0x225E000
	0x01CEF160 LDRB W8, [X21 + 0x69D]
	0x01CEF164 LDR X20, [X20 + 0x478]
	0x01CEF168 MOV X19, X0
	0x01CEF16C TBNZ X8, 0x0, 0x1CEF184
	0x01CEF170 ADRP X0, 0x225E000
	0x01CEF174 LDR X0, [X0 + 0x478]
	0x01CEF178 BL 0x1B6E7F0
	0x01CEF17C MOVZ W8, 0x1
	0x01CEF180 STRB W8, [X21 + 0x69D]
	0x01CEF184 MOVZ W1, 0x3
	0x01CEF188 MOV X0, X19
	0x01CEF18C BL 0x1CED2BC
	0x01CEF190 LDR X0, [X20]
	0x01CEF194 LDR X20, [X19 + 0x140]
	0x01CEF198 LDR W8, [X0 + 0xE0]
	0x01CEF19C CBNZ W8, 0x1CEF1A4
	0x01CEF1A0 BL 0x1B6E8F8
	0x01CEF1A4 MOV X0, X20
	0x01CEF1A8 MOV X1, X31
	0x01CEF1AC MOV X2, X31
	0x01CEF1B0 BL 0x3AA0AF0
	0x01CEF1B4 TBZ X0, 0x0, 0x1CEF1D0
	0x01CEF1B8 MOV X0, X19
	0x01CEF1BC LDP X20, X19, [X31 + 0x30]
	0x01CEF1C0 LDP X30, X21, [X31 + 0x20]
	0x01CEF1C4 LDP D9, D8, [X31 + 0x10]
	0x01CEF1C8 LDR V10, [X31], #0x40
	0x01CEF1CC B 0x1CEDCDC
	0x01CEF1D0 FMOV S0, W31
	0x01CEF1D4 MOV X0, X19
	0x01CEF1D8 BL 0x1CE472C
	0x01CEF1DC LDR X9, [X19 + 0xB8]
	0x01CEF1E0 CBZ X9, 0x1CEF3B4
	0x01CEF1E4 LDR X8, [X9 + 0x38]
	0x01CEF1E8 CBZ X8, 0x1CEF3B4
	0x01CEF1EC LDR W10, [X8 + 0x18]
	0x01CEF1F0 CBZ W10, 0x1CEF3B8
	0x01CEF1F4 LDR X10, [X9 + 0x58]
	0x01CEF1F8 CBZ X10, 0x1CEF3B4
	0x01CEF1FC LDR W11, [X10 + 0x18]
	0x01CEF200 CBZ W11, 0x1CEF3B8
	0x01CEF204 LDR X9, [X9 + 0x60]
	0x01CEF208 CBZ X9, 0x1CEF3B4
	0x01CEF20C LDR W11, [X9 + 0x18]
	0x01CEF210 CBZ W11, 0x1CEF3B8
	0x01CEF214 LDR X11, [X19]
	0x01CEF218 LDR V0, [X8 + 0x20]
	0x01CEF21C LDR V1, [X10 + 0x20]
	0x01CEF220 LDR V2, [X9 + 0x20]
	0x01CEF224 LDR X8, [X11 + 0x2A8]
	0x01CEF228 LDR X2, [X11 + 0x2B0]
	0x01CEF22C MOV X0, X19
	0x01CEF230 MOV W1, W31
	0x01CEF234 BLR X8
	0x01CEF238 LDR X0, [X19 + 0x140]
	0x01CEF23C CBZ X0, 0x1CEF3B4
	0x01CEF240 MOV X1, X31
	0x01CEF244 BL 0x3A9B084
	0x01CEF248 CBZ X0, 0x1CEF3B4
	0x01CEF24C MOV X1, X31
	0x01CEF250 BL 0x3AA7658
	0x01CEF254 MOV X0, X19
	0x01CEF258 MOV X1, X31
	0x01CEF25C MOV V8.16B, V0.16B
	0x01CEF260 MOV V9.16B, V1.16B
	0x01CEF264 MOV V10.16B, V2.16B
	0x01CEF268 BL 0x3A9B084
	0x01CEF26C CBZ X0, 0x1CEF3B4
	0x01CEF270 MOV X1, X31
	0x01CEF274 BL 0x3AA7658
	0x01CEF278 FSUB S0, S8, S0
	0x01CEF27C FSUB S1, S9, S1
	0x01CEF280 FSUB S2, S10, S2
	0x01CEF284 MOV X0, X31
	0x01CEF288 BL 0x1CC086C
	0x01CEF28C ADRP X20, 0x2534000
	0x01CEF290 LDRB W8, [X20 + 0x441]
	0x01CEF294 MOV V8.16B, V0.16B
	0x01CEF298 MOV V9.16B, V1.16B
	0x01CEF29C MOV V10.16B, V2.16B
	0x01CEF2A0 CBNZ W8, 0x1CEF2B8
	0x01CEF2A4 ADRP X0, 0x225E000
	0x01CEF2A8 LDR X0, [X0 + 0x488]
	0x01CEF2AC BL 0x1B6E7F0
	0x01CEF2B0 MOVZ W8, 0x1
	0x01CEF2B4 STRB W8, [X20 + 0x441]
	0x01CEF2B8 ADRP X8, 0x225E000
	0x01CEF2BC LDR X8, [X8 + 0x488]
	0x01CEF2C0 LDR X0, [X8]
	0x01CEF2C4 LDR W8, [X0 + 0xE0]
	0x01CEF2C8 CBNZ W8, 0x1CEF2D0
	0x01CEF2CC BL 0x1B6E8F8
	0x01CEF2D0 FMUL S0, S8, S8
	0x01CEF2D4 FMUL S1, S9, S9
	0x01CEF2D8 ADRP X8, 0xFFFFFFFFFEDBA000
	0x01CEF2DC FADD S0, S0, S1
	0x01CEF2E0 LDR V1, [X8 + 0xB64]
	0x01CEF2E4 ADRP X20, 0x225E000
	0x01CEF2E8 FMUL S2, S10, S10
	0x01CEF2EC LDR X20, [X20 + 0x480]
	0x01CEF2F0 FADD S0, S2, S0
	0x01CEF2F4 FSQRT S0, S0
	0x01CEF2F8 FCMP S0, S1
	0x01CEF2FC B.LE 0x1CEF310
	0x01CEF300 FDIV S8, S8, S0
	0x01CEF304 FDIV S9, S9, S0
	0x01CEF308 FDIV S10, S10, S0
	0x01CEF30C B 0x1CEF340
	0x01CEF310 ADRP X21, 0x2534000
	0x01CEF314 LDRB W8, [X21 + 0x43F]
	0x01CEF318 CBNZ W8, 0x1CEF330
	0x01CEF31C ADRP X0, 0x225E000
	0x01CEF320 LDR X0, [X0 + 0x480]
	0x01CEF324 BL 0x1B6E7F0
	0x01CEF328 MOVZ W8, 0x1
	0x01CEF32C STRB W8, [X21 + 0x43F]
	0x01CEF330 LDR X8, [X20]
	0x01CEF334 LDR X8, [X8 + 0xB8]
	0x01CEF338 LDP S8, S9, [X8]
	0x01CEF33C LDR V10, [X8 + 0x8]
	0x01CEF340 MOV X0, X19
	0x01CEF344 MOV X1, X31
	0x01CEF348 BL 0x3A9B084
	0x01CEF34C ADRP X21, 0x2534000
	0x01CEF350 LDRB W8, [X21 + 0x442]
	0x01CEF354 MOV X19, X0
	0x01CEF358 CBNZ W8, 0x1CEF370
	0x01CEF35C ADRP X0, 0x225E000
	0x01CEF360 LDR X0, [X0 + 0x480]
	0x01CEF364 BL 0x1B6E7F0
	0x01CEF368 MOVZ W8, 0x1
	0x01CEF36C STRB W8, [X21 + 0x442]
	0x01CEF370 LDR X8, [X20]
	0x01CEF374 MOV V0.16B, V8.16B
	0x01CEF378 MOV V1.16B, V9.16B
	0x01CEF37C MOV V2.16B, V10.16B
	0x01CEF380 LDR X8, [X8 + 0xB8]
	0x01CEF384 MOV X0, X31
	0x01CEF388 LDP S3, S4, [X8 + 0x18]
	0x01CEF38C LDR V5, [X8 + 0x20]
	0x01CEF390 BL 0x3A92B78
	0x01CEF394 CBZ X19, 0x1CEF3B4
	0x01CEF398 MOV X0, X19
	0x01CEF39C LDP X20, X19, [X31 + 0x30]
	0x01CEF3A0 LDP X30, X21, [X31 + 0x20]
	0x01CEF3A4 LDP D9, D8, [X31 + 0x10]
	0x01CEF3A8 MOV X1, X31
	0x01CEF3AC LDR V10, [X31], #0x40
	0x01CEF3B0 B 0x3AA7878
	0x01CEF3B4 BL 0x1B6EA1C
	0x01CEF3B8 BL 0x1B6EA24
	0x01CEF3BC STR X30, [X31 - 0x20]!
	0x01CEF3C0 STP X20, X19, [X31 + 0x10]
	0x01CEF3C4 ADRP X20, 0x2534000
	0x01CEF3C8 LDRB W8, [X20 + 0x69F]
	0x01CEF3CC MOV X19, X0
	0x01CEF3D0 TBNZ X8, 0x0, 0x1CEF3E8
	0x01CEF3D4 ADRP X0, 0x2261000
	0x01CEF3D8 LDR X0, [X0 + 0x4B8]
	0x01CEF3DC BL 0x1B6E7F0
	0x01CEF3E0 MOVZ W8, 0x1
	0x01CEF3E4 STRB W8, [X20 + 0x69F]
	0x01CEF3E8 MOVZ W1, 0x4
	0x01CEF3EC MOV X0, X19
	0x01CEF3F0 BL 0x1CED2BC
	0x01CEF3F4 LDR X9, [X19 + 0xB8]
	0x01CEF3F8 CBZ X9, 0x1CEF48C
	0x01CEF3FC LDR X8, [X9 + 0x30]
	0x01CEF400 CBZ X8, 0x1CEF48C
	0x01CEF404 LDR W10, [X8 + 0x18]
	0x01CEF408 CBZ W10, 0x1CEF490
	0x01CEF40C LDR X10, [X9 + 0x58]
	0x01CEF410 CBZ X10, 0x1CEF48C
	0x01CEF414 LDR W11, [X10 + 0x18]
	0x01CEF418 CBZ W11, 0x1CEF490
	0x01CEF41C LDR X9, [X9 + 0x60]
	0x01CEF420 CBZ X9, 0x1CEF48C
	0x01CEF424 LDR W11, [X9 + 0x18]
	0x01CEF428 CBZ W11, 0x1CEF490
	0x01CEF42C LDR X11, [X19]
	0x01CEF430 LDR V0, [X8 + 0x20]
	0x01CEF434 LDR V1, [X10 + 0x20]
	0x01CEF438 LDR V2, [X9 + 0x20]
	0x01CEF43C LDR X8, [X11 + 0x2A8]
	0x01CEF440 LDR X2, [X11 + 0x2B0]
	0x01CEF444 MOV X0, X19
	0x01CEF448 MOV W1, W31
	0x01CEF44C BLR X8
	0x01CEF450 LDR X20, [X19 + 0xC8]
	0x01CEF454 MOV X0, X19
	0x01CEF458 BL 0x1CED31C
	0x01CEF45C CBZ X20, 0x1CEF48C
	0x01CEF460 MOV X0, X20
	0x01CEF464 MOV X1, X31
	0x01CEF468 BL 0x3A4A810
	0x01CEF46C LDR X0, [X19 + 0x1B0]
	0x01CEF470 CBZ X0, 0x1CEF48C
	0x01CEF474 ADRP X8, 0x2261000
	0x01CEF478 LDR X8, [X8 + 0x4B8]
	0x01CEF47C LDP X20, X19, [X31 + 0x10]
	0x01CEF480 LDR X1, [X8]
	0x01CEF484 LDR X30, [X31], #0x20
	0x01CEF488 B 0x28FA430
	0x01CEF48C BL 0x1B6EA1C
	0x01CEF490 BL 0x1B6EA24
	0x01CEF494 SUB X31, X31, 0x30
	0x01CEF498 STP X30, X21, [X31 + 0x10]
	0x01CEF49C STP X20, X19, [X31 + 0x20]
	0x01CEF4A0 ADRP X21, 0x2534000
	0x01CEF4A4 STR W1, [X31 + 0x8]
	0x01CEF4A8 ADRP X20, 0x225F000
	0x01CEF4AC LDRB W8, [X21 + 0x6A0]
	0x01CEF4B0 LDR X20, [X20 + 0x4A8]
	0x01CEF4B4 MOV X19, X0
	0x01CEF4B8 TBNZ X8, 0x0, 0x1CEF4F4
	0x01CEF4BC ADRP X0, 0x2261000
	0x01CEF4C0 LDR X0, [X0 + 0x4D0]
	0x01CEF4C4 BL 0x1B6E7F0
	0x01CEF4C8 ADRP X0, 0x2261000
	0x01CEF4CC LDR X0, [X0 + 0x4E8]
	0x01CEF4D0 BL 0x1B6E7F0
	0x01CEF4D4 ADRP X0, 0x225F000
	0x01CEF4D8 LDR X0, [X0 + 0x2A8]
	0x01CEF4DC BL 0x1B6E7F0
	0x01CEF4E0 ADRP X0, 0x225F000
	0x01CEF4E4 LDR X0, [X0 + 0x4A8]
	0x01CEF4E8 BL 0x1B6E7F0
	0x01CEF4EC MOVZ W8, 0x1
	0x01CEF4F0 STRB W8, [X21 + 0x6A0]
	0x01CEF4F4 LDR X0, [X20]
	0x01CEF4F8 STR X31, [X31]
	0x01CEF4FC ADRP X20, 0x225F000
	0x01CEF500 LDR W8, [X0 + 0xE0]
	0x01CEF504 LDR X20, [X20 + 0x2A8]
	0x01CEF508 CBNZ W8, 0x1CEF510
	0x01CEF50C BL 0x1B6E8F8
	0x01CEF510 ADD X0, X31, 0x8
	0x01CEF514 MOV X1, X31
	0x01CEF518 BL 0x1D81200
	0x01CEF51C LDR X8, [X20]
	0x01CEF520 MOV W20, W0
	0x01CEF524 LDR W9, [X8 + 0xE0]
	0x01CEF528 CBNZ W9, 0x1CEF534
	0x01CEF52C MOV X0, X8
	0x01CEF530 BL 0x1B6E8F8
	0x01CEF534 ADD X1, X31, 0x0
	0x01CEF538 MOV W0, W20
	0x01CEF53C MOV X2, X31
	0x01CEF540 BL 0x1CB64B0
	0x01CEF544 TBZ X0, 0x0, 0x1CEF584
	0x01CEF548 LDR X0, [X19 + 0x1B0]
	0x01CEF54C CBZ X0, 0x1CEF594
	0x01CEF550 ADRP X8, 0x2261000
	0x01CEF554 LDR X1, [X31]
	0x01CEF558 LDR X8, [X8 + 0x4D0]
	0x01CEF55C LDR X2, [X8]
	0x01CEF560 BL 0x28FA49C
	0x01CEF564 TBZ X0, 0x0, 0x1CEF584
	0x01CEF568 LDR X0, [X19 + 0x1B0]
	0x01CEF56C CBZ X0, 0x1CEF594
	0x01CEF570 ADRP X8, 0x2261000
	0x01CEF574 LDR X1, [X31]
	0x01CEF578 LDR X8, [X8 + 0x4E8]
	0x01CEF57C LDR X2, [X8]
	0x01CEF580 BL 0x28FB708
	0x01CEF584 LDP X20, X19, [X31 + 0x20]
	0x01CEF588 LDP X30, X21, [X31 + 0x10]
	0x01CEF58C ADD X31, X31, 0x30
	0x01CEF590 RET
	0x01CEF594 BL 0x1B6EA1C
	0x01CEF598 STR X30, [X31 - 0x20]!
	0x01CEF59C STP X20, X19, [X31 + 0x10]
	0x01CEF5A0 ADRP X20, 0x2534000
	0x01CEF5A4 LDRB W8, [X20 + 0x6A1]
	0x01CEF5A8 MOV X19, X0
	0x01CEF5AC TBNZ X8, 0x0, 0x1CEF5C4
	0x01CEF5B0 ADRP X0, 0x2261000
	0x01CEF5B4 LDR X0, [X0 + 0x4B8]
	0x01CEF5B8 BL 0x1B6E7F0
	0x01CEF5BC MOVZ W8, 0x1
	0x01CEF5C0 STRB W8, [X20 + 0x6A1]
	0x01CEF5C4 MOV X0, X19
	0x01CEF5C8 BL 0x1CE5958
	0x01CEF5CC LDR X8, [X19 + 0x38]
	0x01CEF5D0 CBZ X8, 0x1CEF628
	0x01CEF5D4 LDR W8, [X8 + 0x180]
	0x01CEF5D8 CMP W8, 0x2
	0x01CEF5DC B.NE 0x1CEF61C
	0x01CEF5E0 LDR X0, [X19 + 0x40]
	0x01CEF5E4 CBZ X0, 0x1CEF61C
	0x01CEF5E8 LDRB W8, [X0 + 0x60]
	0x01CEF5EC TBNZ X8, 0x1, 0x1CEF61C
	0x01CEF5F0 MOV X1, X31
	0x01CEF5F4 BL 0x1D9E780
	0x01CEF5F8 TBZ X0, 0x0, 0x1CEF61C
	0x01CEF5FC LDR X0, [X19 + 0x1B0]
	0x01CEF600 CBZ X0, 0x1CEF628
	0x01CEF604 ADRP X8, 0x2261000
	0x01CEF608 LDR X8, [X8 + 0x4B8]
	0x01CEF60C LDP X20, X19, [X31 + 0x10]
	0x01CEF610 LDR X1, [X8]
	0x01CEF614 LDR X30, [X31], #0x20
	0x01CEF618 B 0x28FA430
	0x01CEF61C LDP X20, X19, [X31 + 0x10]
	0x01CEF620 LDR X30, [X31], #0x20
	0x01CEF624 RET
	0x01CEF628 BL 0x1B6EA1C
	0x01CEF62C STP X30, X21, [X31 - 0x20]!
	0x01CEF630 STP X20, X19, [X31 + 0x10]
	0x01CEF634 ADRP X21, 0x2534000
	0x01CEF638 ADRP X20, 0x2260000
	0x01CEF63C LDRB W8, [X21 + 0x6A2]
	0x01CEF640 LDR X20, [X20 + 0xD48]
	0x01CEF644 MOV X19, X0
	0x01CEF648 TBNZ X8, 0x0, 0x1CEF66C
	0x01CEF64C ADRP X0, 0x225E000
	0x01CEF650 LDR X0, [X0 + 0x800]
	0x01CEF654 BL 0x1B6E7F0
	0x01CEF658 ADRP X0, 0x2260000
	0x01CEF65C LDR X0, [X0 + 0xD48]
	0x01CEF660 BL 0x1B6E7F0
	0x01CEF664 MOVZ W8, 0x1
	0x01CEF668 STRB W8, [X21 + 0x6A2]
	0x01CEF66C MOV X0, X19
	0x01CEF670 BL 0x1CE76C0
	0x01CEF674 LDR X0, [X20]
	0x01CEF678 LDR W8, [X0 + 0xE0]
	0x01CEF67C CBNZ W8, 0x1CEF688
	0x01CEF680 BL 0x1B6E8F8
	0x01CEF684 LDR X0, [X20]
	0x01CEF688 LDR X8, [X0 + 0xB8]
	0x01CEF68C MOV X0, X31
	0x01CEF690 LDP S0, S1, [X8 + 0xB0]
	0x01CEF694 LDP S2, S3, [X8 + 0xB8]
	0x01CEF698 BL 0x3A75B14
	0x01CEF69C MOV X0, X19
	0x01CEF6A0 BL 0x1CED6F0
	0x01CEF6A4 LDR X8, [X19 + 0xB8]
	0x01CEF6A8 CBZ X8, 0x1CEF744
	0x01CEF6AC LDR V3, [X8 + 0x4C]
	0x01CEF6B0 ADRP X21, 0x225E000
	0x01CEF6B4 LDR X21, [X21 + 0x800]
	0x01CEF6B8 FMOV S4, 0.5
	0x01CEF6BC FMUL S3, S3, S4
	0x01CEF6C0 MOV X0, X31
	0x01CEF6C4 BL 0x3A7567C
	0x01CEF6C8 LDR X8, [X20]
	0x01CEF6CC MOV X0, X31
	0x01CEF6D0 LDR X8, [X8 + 0xB8]
	0x01CEF6D4 LDP S0, S1, [X8]
	0x01CEF6D8 LDP S2, S3, [X8 + 0x8]
	0x01CEF6DC BL 0x3A75B14
	0x01CEF6E0 LDR X0, [X21]
	0x01CEF6E4 LDR W8, [X0 + 0xE0]
	0x01CEF6E8 CBNZ W8, 0x1CEF6F0
	0x01CEF6EC BL 0x1B6E8F8
	0x01CEF6F0 MOV X0, X31
	0x01CEF6F4 BL 0x3A6A5FC
	0x01CEF6F8 TBZ X0, 0x0, 0x1CEF708
	0x01CEF6FC MOV X0, X19
	0x01CEF700 BL 0x1CED31C
	0x01CEF704 B 0x1CEF718
	0x01CEF708 LDR X0, [X19 + 0xD0]
	0x01CEF70C CBZ X0, 0x1CEF744
	0x01CEF710 MOV X1, X31
	0x01CEF714 BL 0x3AA7658
	0x01CEF718 LDR X8, [X19 + 0xB8]
	0x01CEF71C CBZ X8, 0x1CEF744
	0x01CEF720 LDR X8, [X8 + 0x78]
	0x01CEF724 CBZ X8, 0x1CEF744
	0x01CEF728 LDR W9, [X8 + 0x18]
	0x01CEF72C CBZ W9, 0x1CEF748
	0x01CEF730 LDR V3, [X8 + 0x20]
	0x01CEF734 LDP X20, X19, [X31 + 0x10]
	0x01CEF738 MOV X0, X31
	0x01CEF73C LDP X30, X21, [X31], #0x20
	0x01CEF740 B 0x3A7567C
	0x01CEF744 BL 0x1B6EA1C
	0x01CEF748 BL 0x1B6EA24
	0x01CEF74C STP X30, X23, [X31 - 0x30]!
	0x01CEF750 STP X22, X21, [X31 + 0x10]
	0x01CEF754 STP X20, X19, [X31 + 0x20]
	0x01CEF758 ADRP X23, 0x2534000
	0x01CEF75C ADRP X22, 0x2261000
	0x01CEF760 ADRP X20, 0x2261000
	0x01CEF764 ADRP X21, 0x225F000
	0x01CEF768 LDRB W8, [X23 + 0x6A3]
	0x01CEF76C LDR X22, [X22 + 0x4F0]
	0x01CEF770 LDR X20, [X20 + 0x4F8]
	0x01CEF774 LDR X21, [X21 + 0xD78]
	0x01CEF778 MOV X19, X0
	0x01CEF77C TBNZ X8, 0x0, 0x1CEF7AC
	0x01CEF780 ADRP X0, 0x2261000
	0x01CEF784 LDR X0, [X0 + 0x4F8]
	0x01CEF788 BL 0x1B6E7F0
	0x01CEF78C ADRP X0, 0x2261000
	0x01CEF790 LDR X0, [X0 + 0x4F0]
	0x01CEF794 BL 0x1B6E7F0
	0x01CEF798 ADRP X0, 0x225F000
	0x01CEF79C LDR X0, [X0 + 0xD78]
	0x01CEF7A0 BL 0x1B6E7F0
	0x01CEF7A4 MOVZ W8, 0x1
	0x01CEF7A8 STRB W8, [X23 + 0x6A3]
	0x01CEF7AC ADRP X8, 0xFFFFFFFFFEDBC000
	0x01CEF7B0 LDR V0, [X8 + 0x55]
	0x01CEF7B4 ADD X8, X19, 0x188
	0x01CEF7B8 STR V0, [X8]
	0x01CEF7BC LDR X0, [X22]
	0x01CEF7C0 BL 0x1B6EA0C
	0x01CEF7C4 LDR X1, [X20]
	0x01CEF7C8 MOV X20, X0
	0x01CEF7CC BL 0x28F9A14
	0x01CEF7D0 STR X20, [X19 + 0x1B0]
	0x01CEF7D4 LDR X0, [X21]
	0x01CEF7D8 LDR W8, [X0 + 0xE0]
	0x01CEF7DC CBNZ W8, 0x1CEF7E4
	0x01CEF7E0 BL 0x1B6E8F8
	0x01CEF7E4 MOV X0, X19
	0x01CEF7E8 LDP X20, X19, [X31 + 0x20]
	0x01CEF7EC LDP X22, X21, [X31 + 0x10]
	0x01CEF7F0 LDP X30, X23, [X31], #0x30
	0x01CEF7F4 B 0x1CE8008
	0x01CEF7F8 STP X30, X19, [X31 - 0x10]!
	0x01CEF7FC MOV W1, W31
	0x01CEF800 MOV X19, X0
	0x01CEF804 BL 0x1CE8140
	0x01CEF808 LDR W1, [X19 + 0x174]
	0x01CEF80C MOV X0, X19
	0x01CEF810 BL 0x1CED2BC
	0x01CEF814 LDR V0, [X19 + 0x178]
	0x01CEF818 LDR V1, [X19 + 0x17C]
	0x01CEF81C LDR V2, [X19 + 0x180]
	0x01CEF820 MOV X0, X19
	0x01CEF824 BL 0x1CED380
	0x01CEF828 LDRB W1, [X19 + 0x184]
	0x01CEF82C MOV X0, X19
	0x01CEF830 BL 0x1CED44C
	0x01CEF834 LDR V0, [X19 + 0x198]
	0x01CEF838 MOV X0, X19
	0x01CEF83C BL 0x1CED510
	0x01CEF840 LDR V0, [X19 + 0x19C]
	0x01CEF844 MOV X0, X19
	0x01CEF848 BL 0x1CED5D0
	0x01CEF84C LDR V0, [X19 + 0x1A0]
	0x01CEF850 MOV X0, X19
	0x01CEF854 LDP X30, X19, [X31], #0x10
	0x01CEF858 B 0x1CED690
	0x01CEF85C STP X30, X19, [X31 - 0x10]!
	0x01CEF860 MOV X19, X0
	0x01CEF864 BL 0x1CE81EC
	0x01CEF868 MOV X0, X19
	0x01CEF86C BL 0x1CED25C
	0x01CEF870 STR W0, [X19 + 0x174]
	0x01CEF874 MOV X0, X19
	0x01CEF878 BL 0x1CED31C
	0x01CEF87C MOV X0, X19
	0x01CEF880 STR S0, [X19 + 0x178]
	0x01CEF884 STR S1, [X19 + 0x17C]
	0x01CEF888 STR S2, [X19 + 0x180]
	0x01CEF88C BL 0x1CED3E4
	0x01CEF890 AND W8, W0, 0x1
	0x01CEF894 MOV X0, X19
	0x01CEF898 STRB W8, [X19 + 0x184]
	0x01CEF89C BL 0x1CED4B0
	0x01CEF8A0 MOV X0, X19
	0x01CEF8A4 STR S0, [X19 + 0x198]
	0x01CEF8A8 BL 0x1CED570
	0x01CEF8AC MOV X0, X19
	0x01CEF8B0 STR S0, [X19 + 0x19C]
	0x01CEF8B4 BL 0x1CED630
	0x01CEF8B8 STR S0, [X19 + 0x1A0]
	0x01CEF8BC LDP X30, X19, [X31], #0x10
	0x01CEF8C0 RET
	0x01CEF8C4 STR X30, [X31 - 0x20]!
	0x01CEF8C8 STP X20, X19, [X31 + 0x10]
	0x01CEF8CC MOV X19, X0
	0x01CEF8D0 LDR X0, [X0 + 0xD8]

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+80], D15
	003 Move [X31+88], D14
	004 Move [X31+96], D13
	005 Move [X31+104], D12
	006 Move [X31+112], D11
	007 Move [X31+120], D10
	008 Move [X31+128], D9
	009 Move [X31+136], D8
	010 Move [X31+144], X30
	011 Move [X31+160], X28
	012 Move [X31+168], X27
	013 Move [X31+176], X26
	014 Move [X31+184], X25
	015 Move [X31+192], X24
	016 Move [X31+200], X23
	017 Move [X31+208], X22
	018 Move [X31+216], X21
	019 Move [X31+224], X20
	020 Move [X31+232], X19
	021 Move X20, 0x2535000
	022 Move X24, 0x225F000
	023 Move W8, [X20+1694]
	024 Move X24, [X24+1144]
	025 Move X19, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {47}
	030 Move X0, 0x2261000
	031 Move X0, [X0+3496]
	032 Call 0x1B6F7F0
	033 Move X0, 0x2261000
	034 Move X0, [X0+3504]
	035 Call 0x1B6F7F0
	036 Move X0, 0x2261000
	037 Move X0, [X0+3512]
	038 Call 0x1B6F7F0
	039 Move X0, 0x2261000
	040 Move X0, [X0+3520]
	041 Call 0x1B6F7F0
	042 Move X0, 0x225F000
	043 Move X0, [X0+1144]
	044 Call 0x1B6F7F0
	045 Move W8, 1
	046 Move [X20+1694], W8
	047 Move X0, [X24]
	048 Move [X31+48], X31
	049 Move [X31+56], X31
	050 Move [X31+64], X31
	051 Move X20, [X19+320]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1B6F8F8
	056 Move X0, X20
	057 Move X1, X31
	058 Move X2, X31
	059 Call Object.op_Equality, X0, X1
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {500}
	064 Move X0, [X19+320]
	065 Compare X0, 0
	066 JumpIfEqual {523}
	067 Move X1, X31
	068 Call NetPlayer.get_isDie, X0
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfEqual {500}
	073 Move X0, [X19+320]
	074 Compare X0, 0
	075 JumpIfEqual {523}
	076 Move X1, X31
	077 Call Component.get_transform, X0
	078 Compare X0, 0
	079 JumpIfEqual {523}
	080 Move X1, X31
	081 Call Transform.get_position, X0
	082 Move X0, X19
	083 Move X1, X31
	084 Move V8, V0
	085 Move V9, V1
	086 Move V10, V2
	087 Call Component.get_transform, X0
	088 Compare X0, 0
	089 JumpIfEqual {523}
	090 Move X1, X31
	091 Call Transform.get_position, X0
	092 Subtract S0, S8, S0
	093 Subtract S1, S9, S1
	094 Subtract S2, S10, S2
	095 Move X0, X31
	096 Call Extensions.Flatten, X0
	097 Move X25, 0x2535000
	098 Move W8, [X25+1089]
	099 Move V8, V0
	100 Move V9, V1
	101 Move V10, V2
	102 Compare W8, 0
	103 JumpIfNotEqual {109}
	104 Move X0, 0x225F000
	105 Move X0, [X0+1160]
	106 Call 0x1B6F7F0
	107 Move W8, 1
	108 Move [X25+1089], W8
	109 Move X20, 0x225F000
	110 Move X20, [X20+1160]
	111 Move X0, [X20]
	112 Move W8, [X0+224]
	113 Compare W8, 0
	114 JumpIfNotEqual {116}
	115 Call 0x1B6F8F8
	116 Move X8, -19156992
	117 Multiply S0, S8, S8
	118 Multiply S1, S9, S9
	119 Move V11, [X8+2916]
	120 Move X21, 0x225F000
	121 Multiply S2, S10, S10
	122 Add S0, S0, S1
	123 Move X21, [X21+1152]
	124 Add S0, S2, S0
	125 NotImplemented "Instruction FSQRT not yet implemented."
	126 NotImplemented "Instruction FCMP not yet implemented."
	127 Move X26, 0x2535000
	128 NotImplemented "Instruction FDIV not yet implemented."
	129 NotImplemented "Instruction FDIV not yet implemented."
	130 NotImplemented "Instruction FDIV not yet implemented."
	131 Move W8, [X26+1087]
	132 Compare W8, 0
	133 JumpIfNotEqual {139}
	134 Move X0, 0x225F000
	135 Move X0, [X0+1152]
	136 Call 0x1B6F7F0
	137 Move W8, 1
	138 Move [X26+1087], W8
	139 Move X8, [X21]
	140 Move X8, [X8+184]
	141 Move S8, [X8]
	142 Move S9, [X8+4]
	143 Move V10, [X8+8]
	144 Move X8, [X19+184]
	145 Compare X8, 0
	146 JumpIfEqual {523}
	147 Move V12, [X8+64]
	148 Move X0, X19
	149 Move X1, X31
	150 Call Component.get_transform, X0
	151 Compare X0, 0
	152 JumpIfEqual {523}
	153 Move X1, X31
	154 Move [X31+152], S11
	155 Move [X31+160], S12
	156 Call Transform.get_forward, X0
	157 Move X22, 0x2535000
	158 Move W8, [X22+1111]
	159 Move V11, V0
	160 Move V12, V1
	161 Move V13, V2
	162 Compare W8, 0
	163 JumpIfNotEqual {169}
	164 Move X0, 0x225F000
	165 Move X0, [X0+1160]
	166 Call 0x1B6F7F0
	167 Move W8, 1
	168 Move [X22+1111], W8
	169 Move X0, [X20]
	170 Multiply S0, S8, S8
	171 Multiply S1, S9, S9
	172 Add S0, S0, S1
	173 Multiply S1, S10, S10
	174 Move W8, [X0+224]
	175 Add S14, S1, S0
	176 Multiply S0, S11, S11
	177 Multiply S1, S12, S12
	178 Add S0, S0, S1
	179 Multiply S1, S13, S13
	180 Add S15, S1, S0
	181 Compare W8, 0
	182 JumpIfNotEqual {184}
	183 Call 0x1B6F8F8
	184 Move X8, -19156992
	185 Move V1, [X8+2532]
	186 Multiply S0, S14, S15
	187 NotImplemented "Instruction FSQRT not yet implemented."
	188 Move S14, W31
	189 NotImplemented "Instruction FCMP not yet implemented."
	190 Move X0, [X20]
	191 Multiply S1, S8, S11
	192 Multiply S2, S9, S12
	193 Multiply S3, S10, S13
	194 Add S1, S1, S2
	195 Add S1, S3, S1
	196 Move W8, [X0+224]
	197 NotImplemented "Instruction FDIV not yet implemented."
	198 Move S1, 1
	199 Move S2, -1
	200 NotImplemented "Instruction FMIN not yet implemented."
	201 NotImplemented "Instruction FCMP not yet implemented."
	202 NotImplemented "Instruction FCSEL not yet implemented."
	203 Compare W8, 0
	204 JumpIfNotEqual {206}
	205 Call 0x1B6F8F8
	206 NotImplemented "Instruction FCVT not yet implemented."
	207 Call 0x3D1A890
	208 Move X8, -19156992
	209 Move V1, [X8+3612]
	210 NotImplemented "Instruction INVALID not yet implemented."
	211 Multiply S14, S0, S1
	212 Move X0, X19
	213 Move X1, X31
	214 Call Component.get_transform, X0
	215 Move X22, X0
	216 Move X0, X19
	217 Move X1, X31
	218 Call Component.get_transform, X0
	219 Compare X0, 0
	220 JumpIfEqual {523}
	221 Move X1, X31
	222 Call Transform.get_rotation, X0
	223 Move V11, V0
	224 Move V12, V1
	225 Move V13, V2
	226 Move V0, V8
	227 Move V1, V9
	228 Move V2, V10
	229 Move X0, X31
	230 Move [X31+20], S3
	231 Call Quaternion.LookRotation, X0
	232 Move X0, [X19+56]
	233 Compare X0, 0
	234 JumpIfEqual {523}
	235 Move V8, V0
	236 Move V0, [X31+156]
	237 Move X1, X31
	238 Move V9, V1
	239 Move V10, V2
	240 Move V15, V3
	241 NotImplemented "Instruction FDIV not yet implemented."
	242 Call NetworkRunner.get_DeltaTime, X0
	243 Move V3, [X31+20]
	244 Multiply S0, S14, S0
	245 Move [X31], S0
	246 Move V0, V11
	247 Move V1, V12
	248 Move V2, V13
	249 Move V4, V8
	250 Move V5, V9
	251 Move V6, V10
	252 Move V7, V15
	253 Move X0, X31
	254 Call Quaternion.Slerp, X0, X1, V0
	255 Compare X22, 0
	256 JumpIfEqual {523}
	257 Move X0, X22
	258 Move X1, X31
	259 Call Transform.set_rotation, X0, X1
	260 Move X22, [X19+200]
	261 Move X0, X19
	262 Move X1, X31
	263 Call Component.get_transform, X0
	264 Move V14, [X31+152]
	265 Compare X0, 0
	266 JumpIfEqual {523}
	267 Move X1, X31
	268 Call Transform.get_position, X0
	269 Move X0, X19
	270 Move X1, X31
	271 Move V8, V0
	272 Move V9, V1
	273 Move V10, V2
	274 Call Component.get_transform, X0
	275 Compare X0, 0
	276 JumpIfEqual {523}
	277 Move X1, X31
	278 Call Transform.get_forward, X0
	279 Compare X22, 0
	280 JumpIfEqual {523}
	281 Move S3, 10
	282 Multiply S2, S2, S3
	283 Multiply S1, S1, S3
	284 Multiply S0, S0, S3
	285 Add S2, S10, S2
	286 Add S1, S9, S1
	287 Add S0, S8, S0
	288 Move X0, X22
	289 Move X1, X31
	290 Call NavMeshAgent.SetDestination, X0, X1
	291 Move X0, [X19+200]
	292 Compare X0, 0
	293 JumpIfEqual {523}
	294 Move X1, X31
	295 Call NavMeshAgent.get_pathPending, X0
	296 Move TEMP, X0
	297 And TEMP, TEMP, 1
	298 Compare TEMP, 1
	299 JumpIfNotEqual {337}
	300 Move X22, [X19+200]
	301 Move X0, X19
	302 Move X1, X31
	303 Call Component.get_transform, X0
	304 Compare X0, 0
	305 JumpIfEqual {523}
	306 Move X1, X31
	307 Call Transform.get_forward, X0
	308 Move X8, [X19+184]
	309 Compare X8, 0
	310 JumpIfEqual {523}
	311 Move X8, [X8+56]
	312 Compare X8, 0
	313 JumpIfEqual {523}
	314 Move W9, [X8+24]
	315 Compare W9, 0
	316 JumpIfEqual {528}
	317 Move X0, [X19+56]
	318 Compare X0, 0
	319 JumpIfEqual {523}
	320 Move V11, [X8+32]
	321 Move X1, X31
	322 Move V8, V0
	323 Move V9, V1
	324 Move V10, V2
	325 Call NetworkRunner.get_DeltaTime, X0
	326 Compare X22, 0
	327 JumpIfEqual {523}
	328 Multiply S1, S10, S11
	329 Multiply S3, S9, S11
	330 Multiply S4, S8, S11
	331 Multiply S2, S1, S0
	332 Multiply S1, S3, S0
	333 Multiply S0, S4, S0
	334 Move X0, X22
	335 Move X1, X31
	336 Call NavMeshAgent.Move, X0, X1
	337 Move X0, X19
	338 Call RedGreenController.get__attackSphereCenter, X0
	339 Move X8, [X19+184]
	340 Compare X8, 0
	341 JumpIfEqual {523}
	342 Move V3, [X8+76]
	343 Move S4, 0.5
	344 Multiply S3, S3, S4
	345 Call MobDetectionUtil.GetPlayersInRange, X0, X1, V0
	346 Compare X0, 0
	347 JumpIfEqual {523}
	348 Move X8, 0x2261000
	349 Move X8, [X8+3520]
	350 Move X1, [X8]
	351 Add X8, X31, 24
	352 Call List`1<Object>.GetEnumerator, X0
	353 NotImplemented "Instruction LDUR not yet implemented."
	354 Move X8, [X31+40]
	355 Move X27, 0x2261000
	356 Move X27, [X27+3504]
	357 Move [X31+3], V0
	358 Move [X31+64], X8
	359 Move W28, 1
	360 Move X1, [X27]
	361 Add X0, X31, 48
	362 Call Enumerator<Object>.MoveNext, X0
	363 Move TEMP, X0
	364 And TEMP, TEMP, 1
	365 Compare TEMP, 1
	366 JumpIfNotEqual {452}
	367 Move X0, [X24]
	368 Move X22, [X31+64]
	369 Move X23, [X19+320]
	370 Move W8, [X0+224]
	371 Compare W8, 0
	372 JumpIfNotEqual {374}
	373 Call 0x1B6F8F8
	374 Move X0, X23
	375 Move X1, X22
	376 Move X2, X31
	377 Call Object.op_Equality, X0, X1
	378 Move TEMP, X0
	379 And TEMP, TEMP, 1
	380 Compare TEMP, 1
	381 JumpIfNotEqual {360}
	382 Compare X22, 0
	383 JumpIfEqual {526}
	384 Move X0, [X22+136]
	385 Compare X0, 0
	386 JumpIfEqual {527}
	387 Move X1, X31
	388 Call Transform.get_position, X0
	389 Move V8, V0
	390 Move V9, V1
	391 Move V10, V2
	392 Move X0, X19
	393 Move X1, X31
	394 Call Component.get_transform, X0
	395 Compare X0, 0
	396 JumpIfEqual {524}
	397 Move X1, X31
	398 Call Transform.get_position, X0
	399 Move W8, [X25+1089]
	400 Move V11, V0
	401 Move V12, V1
	402 Move V13, V2
	403 Compare W8, 0
	404 JumpIfNotEqual {408}
	405 Move X0, X20
	406 Call 0x1B6F7F0
	407 Move [X25+1089], W28
	408 Move X0, [X20]
	409 Move W8, [X0+224]
	410 Compare W8, 0
	411 JumpIfNotEqual {413}
	412 Call 0x1B6F8F8
	413 Subtract S0, S8, S11
	414 Subtract S1, S9, S12
	415 Subtract S2, S10, S13
	416 Multiply S3, S0, S0
	417 Multiply S4, S1, S1
	418 Add S3, S3, S4
	419 Multiply S4, S2, S2
	420 Add S3, S4, S3
	421 NotImplemented "Instruction FSQRT not yet implemented."
	422 NotImplemented "Instruction FCMP not yet implemented."
	423 NotImplemented "Instruction FDIV not yet implemented."
	424 NotImplemented "Instruction FDIV not yet implemented."
	425 NotImplemented "Instruction FDIV not yet implemented."
	426 Move W8, [X26+1087]
	427 Compare W8, 0
	428 JumpIfNotEqual {432}
	429 Move X0, X21
	430 Call 0x1B6F7F0
	431 Move [X26+1087], W28
	432 Move X8, [X21]
	433 Move X8, [X8+184]
	434 Move S0, [X8]
	435 Move S1, [X8+4]
	436 Move V2, [X8+8]
	437 Move X8, [X19+184]
	438 Compare X8, 0
	439 JumpIfEqual {525}
	440 Move V3, [X8+80]
	441 Move W1, [X8+36]
	442 Move X2, [X19+208]
	443 Move X3, [X8+184]
	444 Move X5, [X8+24]
	445 Multiply S0, S0, S3
	446 Multiply S1, S1, S3
	447 Multiply S2, S2, S3
	448 Move X0, X22
	449 Move X4, X3
	450 Move X6, X31
	451 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5, X6
	452 Move X8, 0x2261000
	453 Move X8, [X8+3496]
	454 Add X0, X31, 48
	455 Move X1, [X8]
	456 Call Enumerator<Object>.Dispose, X0
	457 Move X0, X19
	458 Call RedGreenController.get_spawnedPosition, X0
	459 Move X0, X19
	460 Move X1, X31
	461 Move V8, V0
	462 Move V9, V1
	463 Move V10, V2
	464 Call Component.get_transform, X0
	465 Compare X0, 0
	466 JumpIfEqual {523}
	467 Move X1, X31
	468 Call Transform.get_position, X0
	469 Move X21, 0x2535000
	470 Move W8, [X21+1286]
	471 Move V11, V0
	472 Move V12, V1
	473 Move V13, V2
	474 Compare W8, 0
	475 JumpIfNotEqual {481}
	476 Move X0, 0x225F000
	477 Move X0, [X0+1160]
	478 Call 0x1B6F7F0
	479 Move W8, 1
	480 Move [X21+1286], W8
	481 Move X0, [X20]
	482 Move W8, [X0+224]
	483 Compare W8, 0
	484 JumpIfNotEqual {486}
	485 Call 0x1B6F8F8
	486 Move X8, [X19+184]
	487 Compare X8, 0
	488 JumpIfEqual {523}
	489 Subtract S0, S8, S11
	490 Subtract S1, S9, S12
	491 Subtract S2, S10, S13
	492 Multiply S0, S0, S0
	493 Multiply S1, S1, S1
	494 Move V3, [X8+128]
	495 Multiply S2, S2, S2
	496 Add S0, S0, S1
	497 Add S0, S2, S0
	498 NotImplemented "Instruction FSQRT not yet implemented."
	499 NotImplemented "Instruction FCMP not yet implemented."
	500 Move X0, X19
	501 Call RedGreenController.SetBackToPosition, X0
	502 Move X20, [X31+224]
	503 Move X19, [X31+232]
	504 Move X22, [X31+208]
	505 Move X21, [X31+216]
	506 Move X24, [X31+192]
	507 Move X23, [X31+200]
	508 Move X26, [X31+176]
	509 Move X25, [X31+184]
	510 Move X28, [X31+160]
	511 Move X27, [X31+168]
	512 Move X30, [X31+144]
	513 Move D9, [X31+128]
	514 Move D8, [X31+136]
	515 Move D11, [X31+112]
	516 Move D10, [X31+120]
	517 Move D13, [X31+96]
	518 Move D12, [X31+104]
	519 Move D15, [X31+80]
	520 Move D14, [X31+88]
	521 Add X31, X31, 240
	522 Return 
	523 Call 0x1B6FA1C
	524 Call 0x1B6FA1C
	525 Call 0x1B6FA1C
	526 Call 0x1B6FA1C
	527 Call 0x1B6FA1C
	528 Call 0x1B6FA24
	529 Move X21, X0
	530 NotImplemented "Instruction CMP not yet implemented."
	531 Move X0, X21
	532 Call 0x3D1A840
	533 Move X22, [X0]
	534 Call 0x3D1A850
	535 Move X8, 0x2261000
	536 Move X8, [X8+3496]
	537 Add X0, X31, 48
	538 Move X1, [X8]
	539 Call Enumerator<Object>.Dispose, X0
	540 Compare X22, 0
	541 JumpIfEqual {457}
	542 Move X0, X22
	543 Call 0x1B6FA14
	544 Move X22, X31
	545 Move X21, X0
	546 Move X8, 0x2261000
	547 Move X8, [X8+3496]
	548 Move X1, [X8]
	549 Add X0, X31, 48
	550 Call Enumerator<Object>.Dispose, X0
	551 Compare X22, 0
	552 JumpIfNotEqual {555}
	553 Move X0, X21
	554 Call 0x1C8518C
	555 Move X0, X22
	556 Call 0x1B6FA14
	557 Call 0x18F56A8

Method: System.Void SetBackToPosition()

Disassembly:
	0x01CF03BC MOV X19, X2
	0x01CF03C0 MOV X20, X1
	0x01CF03C4 MOV X21, X0
	0x01CF03C8 MOV V8.16B, V2.16B
	0x01CF03CC MOV V9.16B, V1.16B
	0x01CF03D0 MOV V10.16B, V0.16B
	0x01CF03D4 TBNZ X8, 0x0, 0x1CF03F8
	0x01CF03D8 ADRP X0, 0x2260000
	0x01CF03DC LDR X0, [X0 + 0x578]
	0x01CF03E0 BL 0x1B6E7F0
	0x01CF03E4 ADRP X0, 0x225F000
	0x01CF03E8 LDR X0, [X0 + 0x370]
	0x01CF03EC BL 0x1B6E7F0
	0x01CF03F0 MOVZ W8, 0x1
	0x01CF03F4 STRB W8, [X24 + 0x6AE]
	0x01CF03F8 LDR X0, [X23]
	0x01CF03FC TBZ X22, 0x0, 0x1CF0448
	0x01CF0400 LDR W8, [X0 + 0xE0]
	0x01CF0404 CBNZ W8, 0x1CF0410
	0x01CF0408 BL 0x1B6E8F8
	0x01CF040C LDR X0, [X23]
	0x01CF0410 LDR X8, [X0 + 0xB8]
	0x01CF0414 LDR X8, [X8 + 0x10]
	0x01CF0418 CBZ X8, 0x1CF049C
	0x01CF041C LDR X0, [X8 + 0x38]
	0x01CF0420 CBZ X0, 0x1CF049C
	0x01CF0424 ADRP X8, 0x2260000
	0x01CF0428 LDR X8, [X8 + 0x578]
	0x01CF042C LDR X1, [X8]
	0x01CF0430 BL 0x23686C0
	0x01CF0434 LDR X0, [X23]
	0x01CF0438 LDR X8, [X0 + 0xB8]
	0x01CF043C LDR X8, [X8 + 0x10]
	0x01CF0440 CBZ X8, 0x1CF049C
	0x01CF0444 STR X31, [X8 + 0x40]
	0x01CF0448 LDR W8, [X0 + 0xE0]
	0x01CF044C CBNZ W8, 0x1CF0454
	0x01CF0450 BL 0x1B6E8F8
	0x01CF0454 FMOV S0, 1
	0x01CF0458 MOV V1.16B, V10.16B
	0x01CF045C MOV X0, X21
	0x01CF0460 BL 0x1CF04A0
	0x01CF0464 FMOV S0, 1
	0x01CF0468 MOV V1.16B, V9.16B
	0x01CF046C MOV X0, X20
	0x01CF0470 BL 0x1CF04A0
	0x01CF0474 MOV V1.16B, V8.16B
	0x01CF0478 MOV X0, X19
	0x01CF047C LDP X20, X19, [X31 + 0x40]
	0x01CF0480 LDP X22, X21, [X31 + 0x30]
	0x01CF0484 LDP X24, X23, [X31 + 0x20]
	0x01CF0488 LDR X30, [X31 + 0x18]
	0x01CF048C LDP D9, D8, [X31 + 0x8]
	0x01CF0490 FMOV S0, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2534000
	005 Move W8, [X20+1695]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2261000
	012 Move X0, [X0+1208]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1695], W8
	016 Move W1, 4
	017 Move X0, X19
	018 Call RedGreenController.set_phase, X0, X1
	019 Move X9, [X19+184]
	020 Compare X9, 0
	021 JumpIfEqual {68}
	022 Move X8, [X9+48]
	023 Compare X8, 0
	024 JumpIfEqual {68}
	025 Move W10, [X8+24]
	026 Compare W10, 0
	027 JumpIfEqual {69}
	028 Move X10, [X9+88]
	029 Compare X10, 0
	030 JumpIfEqual {68}
	031 Move W11, [X10+24]
	032 Compare W11, 0
	033 JumpIfEqual {69}
	034 Move X9, [X9+96]
	035 Compare X9, 0
	036 JumpIfEqual {68}
	037 Move W11, [X9+24]
	038 Compare W11, 0
	039 JumpIfEqual {69}
	040 Move X11, [X19]
	041 Move V0, [X8+32]
	042 Move V1, [X10+32]
	043 Move V2, [X9+32]
	044 Move X8, [X11+680]
	045 Move X2, [X11+688]
	046 Move X0, X19
	047 Move W1, W31
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X20, [X19+200]
	050 Move X0, X19
	051 Call RedGreenController.get_spawnedPosition, X0
	052 Compare X20, 0
	053 JumpIfEqual {68}
	054 Move X0, X20
	055 Move X1, X31
	056 Call NavMeshAgent.SetDestination, X0, X1
	057 Move X0, [X19+432]
	058 Compare X0, 0
	059 JumpIfEqual {68}
	060 Move X8, 0x2261000
	061 Move X8, [X8+1208]
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X1, [X8]
	065 Move X30, [X31+32]
	066 Call Dictionary`2<Object, Object>.Clear, X0
	067 Return 
	068 Call 0x1B6FA1C
	069 Call 0x1B6FA24

Method: System.Void UpdateBackToPosition()

Disassembly:
	0x01CEF8D4 CBZ X0, 0x1CEF92C
	0x01CEF8D8 MOV W20, W1
	0x01CEF8DC MOV X1, X31
	0x01CEF8E0 BL 0x3A65B14
	0x01CEF8E4 TBZ X20, 0x0, 0x1CEF904
	0x01CEF8E8 TBNZ X0, 0x0, 0x1CEF920
	0x01CEF8EC LDR X0, [X19 + 0xD8]
	0x01CEF8F0 CBZ X0, 0x1CEF92C
	0x01CEF8F4 LDP X20, X19, [X31 + 0x10]
	0x01CEF8F8 MOV X1, X31
	0x01CEF8FC LDR X30, [X31], #0x20
	0x01CEF900 B 0x3A65954
	0x01CEF904 TBZ X0, 0x0, 0x1CEF920
	0x01CEF908 LDR X0, [X19 + 0xD8]
	0x01CEF90C CBZ X0, 0x1CEF92C
	0x01CEF910 LDP X20, X19, [X31 + 0x10]
	0x01CEF914 MOV X1, X31
	0x01CEF918 LDR X30, [X31], #0x20
	0x01CEF91C B 0x3A65A98
	0x01CEF920 LDP X20, X19, [X31 + 0x10]
	0x01CEF924 LDR X30, [X31], #0x20
	0x01CEF928 RET
	0x01CEF92C BL 0x1B6EA1C
	0x01CEF930 STP D11, D10, [X31 - 0x60]!
	0x01CEF934 STP D9, D8, [X31 + 0x10]
	0x01CEF938 STR X30, [X31 + 0x20]
	0x01CEF93C STP X24, X23, [X31 + 0x30]
	0x01CEF940 STP X22, X21, [X31 + 0x40]
	0x01CEF944 STP X20, X19, [X31 + 0x50]
	0x01CEF948 LDRB W8, [X0 + 0x100]
	0x01CEF94C CBZ W8, 0x1CEFA04
	0x01CEF950 LDR X8, [X0 + 0xF8]
	0x01CEF954 MOV X19, X0
	0x01CEF958 CBZ X8, 0x1CEFA00
	0x01CEF95C ADRP X20, 0x225E000
	0x01CEF960 LDR X20, [X20 + 0x480]
	0x01CEF964 MOV X22, X31
	0x01CEF968 ADRP X23, 0x2534000
	0x01CEF96C MOVZ W24, 0x1
	0x01CEF970 LDR W9, [X8 + 0x18]
	0x01CEF974 CMP W22, W9
	0x01CEF978 B.GE 0x1CEFA04
	0x01CEF97C CMP W22, W9
	0x01CEF980 B.CS 0x1CEFA20
	0x01CEF984 ADD X8, X8, X22, 0x3, LSL
	0x01CEF988 LDRB W9, [X23 + 0x442]
	0x01CEF98C LDR X21, [X8 + 0x20]
	0x01CEF990 CBNZ W9, 0x1CEF9A0
	0x01CEF994 MOV X0, X20
	0x01CEF998 BL 0x1B6E7F0
	0x01CEF99C STRB W24, [X23 + 0x442]
	0x01CEF9A0 LDR X8, [X19 + 0x108]
	0x01CEF9A4 CBZ X8, 0x1CEFA00
	0x01CEF9A8 LDR W9, [X8 + 0x18]
	0x01CEF9AC CMP W22, W9
	0x01CEF9B0 B.CS 0x1CEFA20
	0x01CEF9B4 LDR X9, [X20]
	0x01CEF9B8 ADD X8, X8, X22, 0x2, LSL
	0x01CEF9BC LDR V11, [X8 + 0x20]
	0x01CEF9C0 MOV X0, X31
	0x01CEF9C4 LDR X9, [X9 + 0xB8]
	0x01CEF9C8 LDP S10, S9, [X9 + 0x18]
	0x01CEF9CC LDR V8, [X9 + 0x20]

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move W1, 1
	011 Move X19, X0
	012 Call RedGreenController.UpdateDetectingPlayer, X0, X1
	013 Move X0, X19
	014 Move X1, X31
	015 Call Component.get_transform, X0
	016 Compare X0, 0
	017 JumpIfEqual {78}
	018 Move X1, X31
	019 Call Transform.get_position, X0
	020 Move X0, X19
	021 Move V8, V0
	022 Move V9, V1
	023 Move V10, V2
	024 Call RedGreenController.get_spawnedPosition, X0
	025 Move X20, 0x2535000
	026 Move W8, [X20+1286]
	027 Move V11, V0
	028 Move V12, V1
	029 Move V13, V2
	030 Compare W8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, 0x225F000
	033 Move X0, [X0+1160]
	034 Call 0x1B6F7F0
	035 Move W8, 1
	036 Move [X20+1286], W8
	037 Move X8, 0x225F000
	038 Move X8, [X8+1160]
	039 Subtract S11, S8, S11
	040 Subtract S9, S9, S12
	041 Subtract S8, S10, S13
	042 Move X0, [X8]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1B6F8F8
	047 Multiply S0, S11, S11
	048 Multiply S1, S9, S9
	049 Move X8, -19156992
	050 Add S0, S0, S1
	051 Move V1, [X8+2736]
	052 Multiply S2, S8, S8
	053 Add S0, S2, S0
	054 NotImplemented "Instruction FSQRT not yet implemented."
	055 NotImplemented "Instruction FCMP not yet implemented."
	056 Move X0, X19
	057 Move X20, [X31+64]
	058 Move X19, [X31+72]
	059 Move X30, [X31+48]
	060 Move D9, [X31+32]
	061 Move D8, [X31+40]
	062 Move D11, [X31+16]
	063 Move D10, [X31+24]
	064 Move D13, [X31+80]
	065 Move D12, [X31+88]
	066 Call RedGreenController.SetStanding, X0
	067 Return 
	068 Move X20, [X31+64]
	069 Move X19, [X31+72]
	070 Move X30, [X31+48]
	071 Move D9, [X31+32]
	072 Move D8, [X31+40]
	073 Move D11, [X31+16]
	074 Move D10, [X31+24]
	075 Move D13, [X31+80]
	076 Move D12, [X31+88]
	077 Return 
	078 Call 0x1B6FA1C

Method: System.Void HandlePlayerLeft(Fusion.PlayerRef player)

Disassembly:
	0x01CF0494 LDR V10, [X31], #0x50
	0x01CF0498 B 0x1CF04A0
	0x01CF049C BL 0x1B6EA1C
	0x01CF04A0 STP D9, D8, [X31 - 0x30]!
	0x01CF04A4 STP X30, X21, [X31 + 0x10]
	0x01CF04A8 STP X20, X19, [X31 + 0x20]
	0x01CF04AC ADRP X21, 0x2533000
	0x01CF04B0 ADRP X20, 0x225F000
	0x01CF04B4 LDRB W8, [X21 + 0x6B1]
	0x01CF04B8 LDR X20, [X20 + 0x370]
	0x01CF04BC MOV X19, X0
	0x01CF04C0 MOV V8.16B, V1.16B
	0x01CF04C4 MOV V9.16B, V0.16B
	0x01CF04C8 TBNZ X8, 0x0, 0x1CF04F8
	0x01CF04CC ADRP X0, 0x2260000
	0x01CF04D0 LDR X0, [X0 + 0x580]
	0x01CF04D4 BL 0x1B6E7F0
	0x01CF04D8 ADRP X0, 0x2260000
	0x01CF04DC LDR X0, [X0 + 0x588]
	0x01CF04E0 BL 0x1B6E7F0
	0x01CF04E4 ADRP X0, 0x225F000
	0x01CF04E8 LDR X0, [X0 + 0x370]
	0x01CF04EC BL 0x1B6E7F0
	0x01CF04F0 MOVZ W8, 0x1
	0x01CF04F4 STRB W8, [X21 + 0x6B1]
	0x01CF04F8 LDR X0, [X20]
	0x01CF04FC LDR W8, [X0 + 0xE0]
	0x01CF0500 CBNZ W8, 0x1CF050C
	0x01CF0504 BL 0x1B6E8F8
	0x01CF0508 LDR X0, [X20]
	0x01CF050C LDR X8, [X0 + 0xB8]
	0x01CF0510 LDR X8, [X8 + 0x10]
	0x01CF0514 CBZ X8, 0x1CF0570
	0x01CF0518 ADRP X9, 0x2260000
	0x01CF051C LDR X9, [X9 + 0x580]
	0x01CF0520 LDR X20, [X8 + 0x38]
	0x01CF0524 LDR X0, [X9]
	0x01CF0528 BL 0x1B6EA0C
	0x01CF052C MOVZ W8, 0x3F000000
	0x01CF0530 MOV X1, X31
	0x01CF0534 MOV X21, X0
	0x01CF0538 STR W8, [X0 + 0x14]
	0x01CF053C BL 0x32276F8
	0x01CF0540 STP S9, S8, [X21 + 0x10]
	0x01CF0544 STR X19, [X21 + 0x18]
	0x01CF0548 CBZ X20, 0x1CF0570
	0x01CF054C ADRP X8, 0x2260000
	0x01CF0550 LDR X8, [X8 + 0x588]
	0x01CF0554 MOV X0, X20
	0x01CF0558 MOV X1, X21
	0x01CF055C LDP X20, X19, [X31 + 0x20]
	0x01CF0560 LDR X2, [X8]
	0x01CF0564 LDP X30, X21, [X31 + 0x10]
	0x01CF0568 LDP D9, D8, [X31], #0x30
	0x01CF056C B 0x2368A00
	0x01CF0570 BL 0x1B6EA1C
	0x01CF0574 STR D8, [X31 - 0x30]!
	0x01CF0578 STR X30, [X31 + 0x8]
	0x01CF057C STP X22, X21, [X31 + 0x10]
	0x01CF0580 STP X20, X19, [X31 + 0x20]
	0x01CF0584 ADRP X22, 0x2533000
	0x01CF0588 ADRP X21, 0x225F000
	0x01CF058C LDRB W8, [X22 + 0x6AF]
	0x01CF0590 LDR X21, [X21 + 0x370]
	0x01CF0594 MOV W20, W1

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2534000
	007 Move [X31+8], W1
	008 Move X20, 0x225F000
	009 Move W8, [X21+1696]
	010 Move X20, [X20+1192]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x2261000
	017 Move X0, [X0+1232]
	018 Call 0x1B6F7F0
	019 Move X0, 0x2261000
	020 Move X0, [X0+1256]
	021 Call 0x1B6F7F0
	022 Move X0, 0x225F000
	023 Move X0, [X0+680]
	024 Call 0x1B6F7F0
	025 Move X0, 0x225F000
	026 Move X0, [X0+1192]
	027 Call 0x1B6F7F0
	028 Move W8, 1
	029 Move [X21+1696], W8
	030 Move X0, [X20]
	031 Move [X31], X31
	032 Move X20, 0x225F000
	033 Move W8, [X0+224]
	034 Move X20, [X20+680]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1B6F8F8
	038 Add X0, X31, 8
	039 Move X1, X31
	040 Call PlayerRef.get_PlayerId, X0
	041 Move X8, [X20]
	042 Move W20, W0
	043 Move W9, [X8+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {48}
	046 Move X0, X8
	047 Call 0x1B6F8F8
	048 Add X1, X31, 0
	049 Move W0, W20
	050 Move X2, X31
	051 Call NetPlayer.TryGetPlayerByID, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {76}
	056 Move X0, [X19+432]
	057 Compare X0, 0
	058 JumpIfEqual {82}
	059 Move X8, 0x2261000
	060 Move X1, [X31]
	061 Move X8, [X8+1232]
	062 Move X2, [X8]
	063 Call Dictionary`2<Object, Object>.ContainsKey, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {76}
	068 Move X0, [X19+432]
	069 Compare X0, 0
	070 JumpIfEqual {82}
	071 Move X8, 0x2261000
	072 Move X1, [X31]
	073 Move X8, [X8+1256]
	074 Move X2, [X8]
	075 Call Dictionary`2<Object, Object>.Remove, X0, X1
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X30, [X31+16]
	079 Move X21, [X31+24]
	080 Add X31, X31, 48
	081 Return 
	082 Call 0x1B6FA1C

Method: System.Void StateAuthorityChanged()

Disassembly:
	0x01CF0598 MOV X19, X0
	0x01CF059C MOV V8.16B, V0.16B
	0x01CF05A0 TBNZ X8, 0x0, 0x1CF05C4
	0x01CF05A4 ADRP X0, 0x2260000
	0x01CF05A8 LDR X0, [X0 + 0x578]
	0x01CF05AC BL 0x1B6E7F0
	0x01CF05B0 ADRP X0, 0x225F000
	0x01CF05B4 LDR X0, [X0 + 0x370]
	0x01CF05B8 BL 0x1B6E7F0
	0x01CF05BC MOVZ W8, 0x1
	0x01CF05C0 STRB W8, [X22 + 0x6AF]
	0x01CF05C4 LDR X0, [X21]
	0x01CF05C8 TBZ X20, 0x0, 0x1CF0614
	0x01CF05CC LDR W8, [X0 + 0xE0]
	0x01CF05D0 CBNZ W8, 0x1CF05DC
	0x01CF05D4 BL 0x1B6E8F8
	0x01CF05D8 LDR X0, [X21]
	0x01CF05DC LDR X8, [X0 + 0xB8]
	0x01CF05E0 LDR X8, [X8 + 0x10]
	0x01CF05E4 CBZ X8, 0x1CF0680
	0x01CF05E8 LDR X0, [X8 + 0x38]
	0x01CF05EC CBZ X0, 0x1CF0680
	0x01CF05F0 ADRP X8, 0x2260000
	0x01CF05F4 LDR X8, [X8 + 0x578]
	0x01CF05F8 LDR X1, [X8]
	0x01CF05FC BL 0x23686C0
	0x01CF0600 LDR X0, [X21]
	0x01CF0604 LDR X8, [X0 + 0xB8]
	0x01CF0608 LDR X8, [X8 + 0x10]
	0x01CF060C CBZ X8, 0x1CF0680
	0x01CF0610 STR X31, [X8 + 0x40]
	0x01CF0614 LDR W8, [X0 + 0xE0]
	0x01CF0618 CBNZ W8, 0x1CF0624
	0x01CF061C BL 0x1B6E8F8
	0x01CF0620 LDR X0, [X21]
	0x01CF0624 LDR X8, [X0 + 0xB8]
	0x01CF0628 LDR X8, [X8 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2534000
	005 Move W8, [X20+1697]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2261000
	012 Move X0, [X0+1208]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1697], W8
	016 Move X0, X19
	017 Call MobController.StateAuthorityChanged, X0
	018 Move X8, [X19+56]
	019 Compare X8, 0
	020 JumpIfEqual {52}
	021 Move W8, [X8+384]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X0, [X19+64]
	024 Compare X0, 0
	025 JumpIfEqual {48}
	026 Move W8, [X0+96]
	027 Move TEMP, X8
	028 And TEMP, TEMP, 2
	029 Compare TEMP, 2
	030 JumpIfEqual {48}
	031 Move X1, X31
	032 Call NetworkObject.get_HasStateAuthority, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {48}
	037 Move X0, [X19+432]
	038 Compare X0, 0
	039 JumpIfEqual {52}
	040 Move X8, 0x2261000
	041 Move X8, [X8+1208]
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X1, [X8]
	045 Move X30, [X31+32]
	046 Call Dictionary`2<Object, Object>.Clear, X0
	047 Return 
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Return 
	052 Call 0x1B6FA1C

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01CF062C CBZ X8, 0x1CF0680
	0x01CF0630 LDR V0, [X8 + 0x40]
	0x01CF0634 FMOV S1, 1
	0x01CF0638 FCMP S0, S1
	0x01CF063C B.NE 0x1CF0654
	0x01CF0640 LDP X20, X19, [X31 + 0x20]
	0x01CF0644 LDP X22, X21, [X31 + 0x10]
	0x01CF0648 LDR X30, [X31 + 0x8]
	0x01CF064C LDR V8, [X31], #0x30
	0x01CF0650 RET
	0x01CF0654 LDR W8, [X0 + 0xE0]
	0x01CF0658 CBNZ W8, 0x1CF0660
	0x01CF065C BL 0x1B6E8F8
	0x01CF0660 MOV X0, X19
	0x01CF0664 LDP X20, X19, [X31 + 0x20]
	0x01CF0668 LDP X22, X21, [X31 + 0x10]
	0x01CF066C LDR X30, [X31 + 0x8]
	0x01CF0670 FMOV S0, 1
	0x01CF0674 MOV V1.16B, V8.16B
	0x01CF0678 LDR V8, [X31], #0x30
	0x01CF067C B 0x1CF04A0
	0x01CF0680 BL 0x1B6EA1C
	0x01CF0684 STR D8, [X31 - 0x30]!
	0x01CF0688 STR X30, [X31 + 0x8]
	0x01CF068C STP X22, X21, [X31 + 0x10]
	0x01CF0690 STP X20, X19, [X31 + 0x20]
	0x01CF0694 ADRP X22, 0x2533000
	0x01CF0698 ADRP X21, 0x225F000
	0x01CF069C LDRB W8, [X22 + 0x6B0]
	0x01CF06A0 LDR X21, [X21 + 0x370]
	0x01CF06A4 MOV W20, W1
	0x01CF06A8 MOV X19, X0
	0x01CF06AC MOV V8.16B, V0.16B
	0x01CF06B0 TBNZ X8, 0x0, 0x1CF06D4
	0x01CF06B4 ADRP X0, 0x2260000
	0x01CF06B8 LDR X0, [X0 + 0x578]
	0x01CF06BC BL 0x1B6E7F0
	0x01CF06C0 ADRP X0, 0x225F000
	0x01CF06C4 LDR X0, [X0 + 0x370]
	0x01CF06C8 BL 0x1B6E7F0
	0x01CF06CC MOVZ W8, 0x1
	0x01CF06D0 STRB W8, [X22 + 0x6B0]
	0x01CF06D4 LDR X0, [X21]
	0x01CF06D8 TBZ X20, 0x0, 0x1CF072C
	0x01CF06DC LDR W8, [X0 + 0xE0]
	0x01CF06E0 CBNZ W8, 0x1CF06EC
	0x01CF06E4 BL 0x1B6E8F8
	0x01CF06E8 LDR X0, [X21]
	0x01CF06EC LDR X8, [X0 + 0xB8]
	0x01CF06F0 LDR X8, [X8 + 0x10]
	0x01CF06F4 CBZ X8, 0x1CF0794
	0x01CF06F8 LDR X0, [X8 + 0x38]
	0x01CF06FC CBZ X0, 0x1CF0794
	0x01CF0700 ADRP X8, 0x2260000
	0x01CF0704 LDR X8, [X8 + 0x578]
	0x01CF0708 LDR X1, [X8]
	0x01CF070C BL 0x23686C0
	0x01CF0710 LDR X0, [X21]
	0x01CF0714 LDR X8, [X0 + 0xB8]
	0x01CF0718 LDR X8, [X8 + 0x10]
	0x01CF071C CBZ X8, 0x1CF0794
	0x01CF0720 ADRP X9, 0xFFFFFFFFFEDBC000
	0x01CF0724 LDR V0, [X9 + 0xF18]
	0x01CF0728 STR D0, [X8 + 0x40]
	0x01CF072C LDR W8, [X0 + 0xE0]
	0x01CF0730 CBNZ W8, 0x1CF073C
	0x01CF0734 BL 0x1B6E8F8
	0x01CF0738 LDR X0, [X21]
	0x01CF073C LDR X8, [X0 + 0xB8]
	0x01CF0740 LDR X8, [X8 + 0x10]
	0x01CF0744 CBZ X8, 0x1CF0794
	0x01CF0748 LDR V0, [X8 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2534000
	006 Move X20, 0x2260000
	007 Move W8, [X21+1698]
	008 Move X20, [X20+3400]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x225E000
	015 Move X0, [X0+2048]
	016 Call 0x1B6F7F0
	017 Move X0, 0x2260000
	018 Move X0, [X0+3400]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X21+1698], W8
	022 Move X0, X19
	023 Call MobController.OnDrawGizmos, X0
	024 Move X0, [X20]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1B6F8F8
	029 Move X0, [X20]
	030 Move X8, [X0+184]
	031 Move X0, X31
	032 Move S0, [X8+176]
	033 Move S1, [X8+180]
	034 Move S2, [X8+184]
	035 Move S3, [X8+188]
	036 Call Gizmos.set_color, X0
	037 Move X0, X19
	038 Call RedGreenController.get__attackSphereCenter, X0
	039 Move X8, [X19+184]
	040 Compare X8, 0
	041 JumpIfEqual {92}
	042 Move V3, [X8+76]
	043 Move X21, 0x225E000
	044 Move X21, [X21+2048]
	045 Move S4, 0.5
	046 Multiply S3, S3, S4
	047 Move X0, X31
	048 Call Gizmos.DrawWireSphere, X0, V0
	049 Move X8, [X20]
	050 Move X0, X31
	051 Move X8, [X8+184]
	052 Move S0, [X8]
	053 Move S1, [X8+4]
	054 Move S2, [X8+8]
	055 Move S3, [X8+12]
	056 Call Gizmos.set_color, X0
	057 Move X0, [X21]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1B6F8F8
	062 Move X0, X31
	063 Call Application.get_isPlaying
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {70}
	068 Move X0, X19
	069 Call RedGreenController.get_spawnedPosition, X0
	070 Move X0, [X19+208]
	071 Compare X0, 0
	072 JumpIfEqual {92}
	073 Move X1, X31
	074 Call Transform.get_position, X0
	075 Move X8, [X19+184]
	076 Compare X8, 0
	077 JumpIfEqual {92}
	078 Move X8, [X8+120]
	079 Compare X8, 0
	080 JumpIfEqual {92}
	081 Move W9, [X8+24]
	082 Compare W9, 0
	083 JumpIfEqual {93}
	084 Move V3, [X8+32]
	085 Move X20, [X31+16]
	086 Move X19, [X31+24]
	087 Move X0, X31
	088 Move X30, [X31+32]
	089 Move X21, [X31+40]
	090 Call Gizmos.DrawWireSphere, X0, V0
	091 Return 
	092 Call 0x1B6FA1C
	093 Call 0x1B6FA24

Method: System.Void .ctor()

Disassembly:
	0x01CF074C FCMP S0, 0x0
	0x01CF0750 B.NE 0x1CF0768
	0x01CF0754 LDP X20, X19, [X31 + 0x20]
	0x01CF0758 LDP X22, X21, [X31 + 0x10]
	0x01CF075C LDR X30, [X31 + 0x8]
	0x01CF0760 LDR V8, [X31], #0x30
	0x01CF0764 RET
	0x01CF0768 LDR W8, [X0 + 0xE0]
	0x01CF076C CBNZ W8, 0x1CF0774
	0x01CF0770 BL 0x1B6E8F8
	0x01CF0774 MOV X0, X19
	0x01CF0778 LDP X20, X19, [X31 + 0x20]
	0x01CF077C LDP X22, X21, [X31 + 0x10]
	0x01CF0780 LDR X30, [X31 + 0x8]
	0x01CF0784 FMOV S0, W31
	0x01CF0788 MOV V1.16B, V8.16B
	0x01CF078C LDR V8, [X31], #0x30
	0x01CF0790 B 0x1CF04A0
	0x01CF0794 BL 0x1B6EA1C
	0x01CF0798 STP D9, D8, [X31 - 0x30]!
	0x01CF079C STR X30, [X31 + 0x10]
	0x01CF07A0 STP X20, X19, [X31 + 0x20]
	0x01CF07A4 MOV X19, X1
	0x01CF07A8 MOVZ W8, 0x3F000000
	0x01CF07AC MOV X1, X31
	0x01CF07B0 MOV V8.16B, V1.16B
	0x01CF07B4 MOV V9.16B, V0.16B
	0x01CF07B8 MOV X20, X0
	0x01CF07BC STR W8, [X0 + 0x14]
	0x01CF07C0 BL 0x32276F8
	0x01CF07C4 STP S9, S8, [X20 + 0x10]
	0x01CF07C8 STR X19, [X20 + 0x18]
	0x01CF07CC LDP X20, X19, [X31 + 0x20]
	0x01CF07D0 LDR X30, [X31 + 0x10]
	0x01CF07D4 LDP D9, D8, [X31], #0x30
	0x01CF07D8 RET
	0x01CF07DC STP D11, D10, [X31 - 0x40]!
	0x01CF07E0 STP D9, D8, [X31 + 0x10]
	0x01CF07E4 STR X30, [X31 + 0x20]
	0x01CF07E8 STP X20, X19, [X31 + 0x30]
	0x01CF07EC ADRP X20, 0x2533000
	0x01CF07F0 ADRP X19, 0x225F000
	0x01CF07F4 LDRB W8, [X20 + 0x6B2]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x2534000
	008 Move X22, 0x2261000
	009 Move X20, 0x2261000
	010 Move X21, 0x225F000
	011 Move W8, [X23+1699]
	012 Move X22, [X22+1264]
	013 Move X20, [X20+1272]
	014 Move X21, [X21+3448]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x2261000
	021 Move X0, [X0+1272]
	022 Call 0x1B6F7F0
	023 Move X0, 0x2261000
	024 Move X0, [X0+1264]
	025 Call 0x1B6F7F0
	026 Move X0, 0x225F000
	027 Move X0, [X0+3448]
	028 Call 0x1B6F7F0
	029 Move W8, 1
	030 Move [X23+1699], W8
	031 Move X8, -19152896
	032 Move V0, [X8+85]
	033 Add X8, X19, 392
	034 Move [X8], V0
	035 Move X0, [X22]
	036 Call 0x1B6FA0C
	037 Move X1, [X20]
	038 Move X20, X0
	039 Call Dictionary`2<Object, Object>..ctor, X0
	040 Move [X19+432], X20
	041 Move X0, [X21]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1B6F8F8
	046 Move X0, X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Call MobController..ctor, X0
	054 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01CF07F8 LDR X19, [X19 + 0x370]
	0x01CF07FC MOV V8.16B, V3.16B
	0x01CF0800 MOV V9.16B, V2.16B
	0x01CF0804 MOV V10.16B, V1.16B
	0x01CF0808 MOV V11.16B, V0.16B
	0x01CF080C TBNZ X8, 0x0, 0x1CF0824
	0x01CF0810 ADRP X0, 0x225F000
	0x01CF0814 LDR X0, [X0 + 0x370]
	0x01CF0818 BL 0x1B6E7F0
	0x01CF081C MOVZ W8, 0x1
	0x01CF0820 STRB W8, [X20 + 0x6B2]
	0x01CF0824 LDR X0, [X19]
	0x01CF0828 LDR W8, [X0 + 0xE0]
	0x01CF082C CBNZ W8, 0x1CF0838
	0x01CF0830 BL 0x1B6E8F8
	0x01CF0834 LDR X0, [X19]
	0x01CF0838 LDR X8, [X0 + 0xB8]
	0x01CF083C LDR X9, [X8 + 0x10]
	0x01CF0840 CBZ X9, 0x1CF0878
	0x01CF0844 LDR X0, [X9 + 0x20]
	0x01CF0848 CBZ X0, 0x1CF0878
	0x01CF084C LDR W1, [X8 + 0x4]
	0x01CF0850 MOV V2.16B, V9.16B
	0x01CF0854 MOV V3.16B, V8.16B
	0x01CF0858 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, W31
	004 Move X19, X0
	005 Call MobController.CopyBackingFieldsToState, X0, X1
	006 Move W1, [X19+372]
	007 Move X0, X19
	008 Call RedGreenController.set_phase, X0, X1
	009 Move V0, [X19+376]
	010 Move V1, [X19+380]
	011 Move V2, [X19+384]
	012 Move X0, X19
	013 Call RedGreenController.set_spawnedPosition, X0, X1
	014 Move W1, [X19+388]
	015 Move X0, X19
	016 Call RedGreenController.set_isGreen, X0, X1
	017 Move V0, [X19+408]
	018 Move X0, X19
	019 Call RedGreenController.set_switchLightTimer, X0, V0
	020 Move V0, [X19+412]
	021 Move X0, X19
	022 Call RedGreenController.set_switchLightInterval, X0, V0
	023 Move V0, [X19+416]
	024 Move X0, X19
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Call RedGreenController.set_timerAnticipating, X0, V0
	028 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01CF085C LDR X30, [X31 + 0x20]
	0x01CF0860 LDP D9, D8, [X31 + 0x10]
	0x01CF0864 MOV V0.16B, V11.16B
	0x01CF0868 MOV V1.16B, V10.16B
	0x01CF086C MOV X2, X31
	0x01CF0870 LDP D11, D10, [X31], #0x40
	0x01CF0874 B 0x3A7D234
	0x01CF0878 BL 0x1B6EA1C
	0x01CF087C STR X30, [X31 - 0x30]!
	0x01CF0880 STP X22, X21, [X31 + 0x10]
	0x01CF0884 STP X20, X19, [X31 + 0x20]
	0x01CF0888 ADRP X21, 0x2533000
	0x01CF088C ADRP X22, 0x2260000
	0x01CF0890 ADRP X20, 0x2260000
	0x01CF0894 LDRB W8, [X21 + 0x6B3]
	0x01CF0898 LDR X22, [X22 + 0x590]
	0x01CF089C LDR X20, [X20 + 0x598]
	0x01CF08A0 MOV X19, X0
	0x01CF08A4 TBNZ X8, 0x0, 0x1CF08C8
	0x01CF08A8 ADRP X0, 0x2260000
	0x01CF08AC LDR X0, [X0 + 0x598]
	0x01CF08B0 BL 0x1B6E7F0
	0x01CF08B4 ADRP X0, 0x2260000
	0x01CF08B8 LDR X0, [X0 + 0x590]
	0x01CF08BC BL 0x1B6E7F0
	0x01CF08C0 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobController.CopyStateToBackingFields, X0
	005 Move X0, X19
	006 Call RedGreenController.get_phase, X0
	007 Move [X19+372], W0
	008 Move X0, X19
	009 Call RedGreenController.get_spawnedPosition, X0
	010 Move X0, X19
	011 Move [X19+376], S0
	012 Move [X19+380], S1
	013 Move [X19+384], S2
	014 Call RedGreenController.get_isGreen, X0
	015 And W8, W0, 1
	016 Move X0, X19
	017 Move [X19+388], W8
	018 Call RedGreenController.get_switchLightTimer, X0
	019 Move X0, X19
	020 Move [X19+408], S0
	021 Call RedGreenController.get_switchLightInterval, X0
	022 Move X0, X19
	023 Move [X19+412], S0
	024 Call RedGreenController.get_timerAnticipating, X0
	025 Move [X19+416], S0
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Return 

