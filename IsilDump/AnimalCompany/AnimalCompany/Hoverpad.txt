Type: AnimalCompany.Hoverpad

Method: System.Int32 get_turnedOnTick()

Disassembly:
	0x01D9B11C MOV X0, X19
	0x01D9B120 BL 0x1D9B158
	0x01D9B124 MOV X0, X20
	0x01D9B128 LDP X20, X19, [X31 + 0x30]
	0x01D9B12C LDP X22, X21, [X31 + 0x20]
	0x01D9B130 LDP X24, X23, [X31 + 0x10]
	0x01D9B134 MOV X1, X31
	0x01D9B138 LDR X30, [X31], #0x40
	0x01D9B13C B 0x1D8F63C
	0x01D9B140 LDP X20, X19, [X31 + 0x30]
	0x01D9B144 LDP X22, X21, [X31 + 0x20]
	0x01D9B148 LDP X24, X23, [X31 + 0x10]
	0x01D9B14C LDR X30, [X31], #0x40
	0x01D9B150 RET
	0x01D9B154 BL 0x1C16F20
	0x01D9B158 SUB X31, X31, 0xD0
	0x01D9B15C STP D15, D14, [X31 + 0x60]
	0x01D9B160 STP D13, D12, [X31 + 0x70]
	0x01D9B164 STP D11, D10, [X31 + 0x80]
	0x01D9B168 STP D9, D8, [X31 + 0x90]
	0x01D9B16C STR X30, [X31 + 0xA0]
	0x01D9B170 STP X22, X21, [X31 + 0xB0]
	0x01D9B174 STP X20, X19, [X31 + 0xC0]
	0x01D9B178 ADRP X21, 0x263D000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2359000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x235C000
	016 Move X0, [X0+3968]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x235C000
	023 Move X0, [X0+3976]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_turnedOnTick(System.Int32 value)

Disassembly:
	0x01D9B17C ADRP X20, 0x235A000
	0x01D9B180 LDRB W8, [X21 + 0xA3D]
	0x01D9B184 LDR X20, [X20 + 0x7C8]
	0x01D9B188 MOV V12.16B, V2.16B
	0x01D9B18C MOV V13.16B, V1.16B
	0x01D9B190 MOV V14.16B, V0.16B
	0x01D9B194 MOV X19, X0
	0x01D9B198 TBNZ X8, 0x0, 0x1D9B1C8
	0x01D9B19C ADRP X0, 0x2358000
	0x01D9B1A0 LDR X0, [X0 + 0x5D8]
	0x01D9B1A4 BL 0x1C16CF4
	0x01D9B1A8 ADRP X0, 0x2358000
	0x01D9B1AC LDR X0, [X0 + 0x5F8]
	0x01D9B1B0 BL 0x1C16CF4
	0x01D9B1B4 ADRP X0, 0x235A000
	0x01D9B1B8 LDR X0, [X0 + 0x7C8]
	0x01D9B1BC BL 0x1C16CF4
	0x01D9B1C0 MOVZ W8, 0x1
	0x01D9B1C4 STRB W8, [X21 + 0xA3D]
	0x01D9B1C8 LDR X0, [X20]
	0x01D9B1CC MOVI V0.2D, 0x0
	0x01D9B1D0 STUR V0, [X31 + 0x4C]
	0x01D9B1D4 STP V0, V0, [X31 + 0x30]
	0x01D9B1D8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2359000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x235C000
	016 Move X0, [X0+3968]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x235C000
	023 Move X0, [X0+3984]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get_battery()

Disassembly:
	0x01D9B1DC CBNZ W8, 0x1D9B1E4
	0x01D9B1E0 BL 0x1C16DFC
	0x01D9B1E4 ADRP X21, 0x263D000
	0x01D9B1E8 LDRB W8, [X21 + 0x85D]
	0x01D9B1EC CBNZ W8, 0x1D9B204
	0x01D9B1F0 ADRP X0, 0x235A000
	0x01D9B1F4 LDR X0, [X0 + 0x7C8]
	0x01D9B1F8 BL 0x1C16CF4
	0x01D9B1FC MOVZ W8, 0x1
	0x01D9B200 STRB W8, [X21 + 0x85D]
	0x01D9B204 LDR X0, [X20]
	0x01D9B208 LDR W8, [X0 + 0xE0]
	0x01D9B20C CBNZ W8, 0x1D9B218
	0x01D9B210 BL 0x1C16DFC
	0x01D9B214 LDR X0, [X20]
	0x01D9B218 LDR X8, [X0 + 0xB8]
	0x01D9B21C LDR X0, [X8]
	0x01D9B220 CBZ X0, 0x1D9B574
	0x01D9B224 MOV X1, X31
	0x01D9B228 BL 0x1DBFEBC
	0x01D9B22C LDR X0, [X19 + 0x80]
	0x01D9B230 CBZ X0, 0x1D9B574
	0x01D9B234 MOV X1, X31
	0x01D9B238 MOV V10.16B, V1.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+4]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2359000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x235C000
	016 Move X0, [X0+3992]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x235C000
	023 Move X0, [X0+4000]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_battery(System.Single value)

Disassembly:
	0x01D9B23C BL 0x3C3FA04
	0x01D9B240 MOV X0, X31
	0x01D9B244 MOV V15.16B, V0.16B
	0x01D9B248 MOV V8.16B, V1.16B
	0x01D9B24C MOV V9.16B, V2.16B
	0x01D9B250 BL 0x3C3C7DC
	0x01D9B254 LDR X0, [X19 + 0x80]
	0x01D9B258 CBZ X0, 0x1D9B574
	0x01D9B25C MOV X1, X31
	0x01D9B260 MOV V11.16B, V0.16B
	0x01D9B264 STP S14, S13, [X31 + 0x8]
	0x01D9B268 STR S12, [X31 + 0x10]
	0x01D9B26C BL 0x3C3F58C
	0x01D9B270 LDR X0, [X19 + 0x80]
	0x01D9B274 STP S1, S0, [X31 + 0xA8]
	0x01D9B278 STR S2, [X31 + 0x14]
	0x01D9B27C CBZ X0, 0x1D9B574
	0x01D9B280 MOV X1, X31
	0x01D9B284 BL 0x3C3FA04
	0x01D9B288 ADRP X21, 0x263D000
	0x01D9B28C LDRB W8, [X21 + 0x785]
	0x01D9B290 MOV V12.16B, V0.16B
	0x01D9B294 MOV V13.16B, V1.16B
	0x01D9B298 MOV V14.16B, V2.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+4], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2359000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x235C000
	016 Move X0, [X0+3992]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x235C000
	023 Move X0, [X0+4008]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Boolean get_isOn()

Disassembly:
	0x01D9B29C CBNZ W8, 0x1D9B2B4
	0x01D9B2A0 ADRP X0, 0x2358000
	0x01D9B2A4 LDR X0, [X0 + 0x5A8]
	0x01D9B2A8 BL 0x1C16CF4
	0x01D9B2AC MOVZ W8, 0x1
	0x01D9B2B0 STRB W8, [X21 + 0x785]
	0x01D9B2B4 ADRP X20, 0x2358000
	0x01D9B2B8 LDR X20, [X20 + 0x5A8]
	0x01D9B2BC LDR X0, [X20]
	0x01D9B2C0 LDR W8, [X0 + 0xE0]
	0x01D9B2C4 CBNZ W8, 0x1D9B2CC
	0x01D9B2C8 BL 0x1C16DFC
	0x01D9B2CC ADRP X8, 0xFFFFFFFFFED4F000
	0x01D9B2D0 LDR V2, [X8 + 0x17C]
	0x01D9B2D4 FMUL S0, S12, S12
	0x01D9B2D8 FMUL S1, S13, S13
	0x01D9B2DC ADRP X19, 0x2358000
	0x01D9B2E0 STR S2, [X31]
	0x01D9B2E4 FADD S0, S0, S1
	0x01D9B2E8 FMUL S1, S14, S14
	0x01D9B2EC LDR X19, [X19 + 0x5D8]
	0x01D9B2F0 FADD S0, S1, S0
	0x01D9B2F4 FSQRT S0, S0
	0x01D9B2F8 FABS S10, S10
	0x01D9B2FC FMOV S3, 2
	0x01D9B300 FCMP S0, S2

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+8]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2359000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x235C000
	018 Move X0, [X0+4016]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x235C000
	025 Move X0, [X0+4024]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_isOn(System.Boolean value)

Disassembly:
	0x01D9B304 B.LE 0x1D9B31C
	0x01D9B308 FDIV S1, S12, S0
	0x01D9B30C STR S1, [X31 + 0x4]
	0x01D9B310 FDIV S13, S13, S0
	0x01D9B314 FDIV S14, S14, S0
	0x01D9B318 B 0x1D9B35C
	0x01D9B31C ADRP X22, 0x263D000
	0x01D9B320 LDRB W8, [X22 + 0x783]
	0x01D9B324 CBNZ W8, 0x1D9B340
	0x01D9B328 ADRP X0, 0x2358000
	0x01D9B32C LDR X0, [X0 + 0x5A0]
	0x01D9B330 BL 0x1C16CF4
	0x01D9B334 FMOV S3, 2
	0x01D9B338 MOVZ W8, 0x1
	0x01D9B33C STRB W8, [X22 + 0x783]
	0x01D9B340 ADRP X8, 0x2358000
	0x01D9B344 LDR X8, [X8 + 0x5A0]
	0x01D9B348 LDR X8, [X8]
	0x01D9B34C LDR X8, [X8 + 0xB8]
	0x01D9B350 LDP S0, S13, [X8]
	0x01D9B354 LDR V14, [X8 + 0x8]
	0x01D9B358 STR S0, [X31 + 0x4]
	0x01D9B35C LDR X0, [X19]
	0x01D9B360 ADRP X22, 0x2358000
	0x01D9B364 FADD S10, S10, S3

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+8], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x2359000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x235C000
	017 Move X0, [X0+4016]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x235C000
	024 Move X0, [X0+4032]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: System.Void Awake()

Disassembly:
	0x01D9B368 FNEG S15, S15
	0x01D9B36C LDR W8, [X0 + 0xE0]
	0x01D9B370 LDR X22, [X22 + 0x5F8]
	0x01D9B374 FNEG S8, S8
	0x01D9B378 FNEG S9, S9
	0x01D9B37C CBNZ W8, 0x1D9B388
	0x01D9B380 BL 0x1C16DFC
	0x01D9B384 LDR X0, [X19]
	0x01D9B388 LDR X8, [X0 + 0xB8]
	0x01D9B38C MOV X1, X31
	0x01D9B390 FMUL S12, S10, S15
	0x01D9B394 FMUL S15, S10, S8
	0x01D9B398 LDR W0, [X8 + 0x40]
	0x01D9B39C FMUL S10, S10, S9
	0x01D9B3A0 BL 0x3C35CB8
	0x01D9B3A4 LDR X8, [X22]
	0x01D9B3A8 MOV W19, W0
	0x01D9B3AC LDR W9, [X8 + 0xE0]
	0x01D9B3B0 CBNZ W9, 0x1D9B3BC
	0x01D9B3B4 MOV X0, X8
	0x01D9B3B8 BL 0x1C16DFC
	0x01D9B3BC LDR V1, [X31 + 0xAC]
	0x01D9B3C0 LDR V0, [X31 + 0xA8]
	0x01D9B3C4 ADD X0, X31, 0x18
	0x01D9B3C8 ADD X1, X31, 0x30
	0x01D9B3CC MOVZ W3, 0x1
	0x01D9B3D0 STP S1, S0, [X31 + 0x18]
	0x01D9B3D4 LDR V1, [X31 + 0x14]
	0x01D9B3D8 LDR V0, [X31 + 0x4]
	0x01D9B3DC MOV W2, W19
	0x01D9B3E0 MOV X4, X31
	0x01D9B3E4 FMUL S8, S11, S12
	0x01D9B3E8 STP S1, S0, [X31 + 0x20]
	0x01D9B3EC FMOV S0, 1
	0x01D9B3F0 FMUL S9, S11, S15
	0x01D9B3F4 FMUL S11, S11, S10
	0x01D9B3F8 STP S13, S14, [X31 + 0x28]
	0x01D9B3FC FMOV S10, 1
	0x01D9B400 BL 0x3C8B63C
	0x01D9B404 TBZ X0, 0x0, 0x1D9B428
	0x01D9B408 ADD X0, X31, 0x30
	0x01D9B40C MOV X1, X31
	0x01D9B410 BL 0x3C8E684
	0x01D9B414 FSUB S0, S10, S0
	0x01D9B418 FADD S0, S0, S10
	0x01D9B41C FMUL S8, S8, S0
	0x01D9B420 FMUL S9, S9, S0
	0x01D9B424 FMUL S11, S11, S0
	0x01D9B428 LDP S1, S0, [X31 + 0xC]
	0x01D9B42C LDR V2, [X31 + 0x8]
	0x01D9B430 MOV X0, X31
	0x01D9B434 FNEG S12, S1
	0x01D9B438 FNEG S10, S2
	0x01D9B43C FNEG S15, S0
	0x01D9B440 BL 0x3C3C7DC
	0x01D9B444 FMUL S13, S0, S10
	0x01D9B448 FMUL S14, S0, S12
	0x01D9B44C FMUL S15, S0, S15
	0x01D9B450 FMUL S0, S8, S8
	0x01D9B454 FMUL S1, S9, S9
	0x01D9B458 FMUL S3, S13, S13
	0x01D9B45C FMUL S4, S14, S14
	0x01D9B460 FMUL S2, S11, S11
	0x01D9B464 FMUL S5, S15, S15
	0x01D9B468 FADD S0, S0, S1
	0x01D9B46C FADD S1, S3, S4
	0x01D9B470 FADD S10, S5, S1
	0x01D9B474 FADD S12, S0, S2
	0x01D9B478 FCMP S10, S12
	0x01D9B47C B.LE 0x1D9B544
	0x01D9B480 LDRB W8, [X21 + 0x785]
	0x01D9B484 CBNZ W8, 0x1D9B49C
	0x01D9B488 ADRP X0, 0x2358000
	0x01D9B48C LDR X0, [X0 + 0x5A8]
	0x01D9B490 BL 0x1C16CF4
	0x01D9B494 MOVZ W8, 0x1
	0x01D9B498 STRB W8, [X21 + 0x785]
	0x01D9B49C LDR X0, [X20]
	0x01D9B4A0 LDR W8, [X0 + 0xE0]
	0x01D9B4A4 CBNZ W8, 0x1D9B4AC
	0x01D9B4A8 BL 0x1C16DFC
	0x01D9B4AC LDR V1, [X31]
	0x01D9B4B0 FSQRT S0, S10
	0x01D9B4B4 FCMP S0, S1
	0x01D9B4B8 B.LE 0x1D9B4CC
	0x01D9B4BC FDIV S10, S13, S0
	0x01D9B4C0 FDIV S14, S14, S0
	0x01D9B4C4 FDIV S15, S15, S0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x263E000
	008 Move X21, 0x235C000
	009 Move W8, [X20+2617]
	010 Move X21, [X21+3000]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x235A000
	017 Move X0, [X0+3696]
	018 Call 0x1C17CF4
	019 Move X0, 0x235C000
	020 Move X0, [X0+3000]
	021 Call 0x1C17CF4
	022 Move X0, 0x235C000
	023 Move X0, [X0+4040]
	024 Call 0x1C17CF4
	025 Move X0, 0x235C000
	026 Move X0, [X0+4048]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2617], W8
	030 Move X1, [X21]
	031 Move X0, X19
	032 Call 0x21A4894, X0
	033 Move [X19+192], X0
	034 Compare X0, 0
	035 JumpIfEqual {96}
	036 Move X23, 0x235A000
	037 Move X23, [X23+3696]
	038 Move X20, X0
	039 Move X21, [X0+464]
	040 Move X22, 0x235C000
	041 Move X0, [X23]
	042 Move X22, [X22+4048]
	043 Call 0x1C17F10
	044 Move X2, [X22]
	045 Move X1, X19
	046 Move X3, X31
	047 Move X22, X0
	048 Call Action..ctor, X0, X1, X2
	049 Move X0, X21
	050 Move X1, X22
	051 Move X2, X31
	052 Call Delegate.Combine, X0, X1
	053 Move X1, [X23]
	054 Compare X0, 0
	055 JumpIfEqual {61}
	056 Move X8, [X0]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move [X20+464], X0
	059 Move X8, [X0]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move [X20+464], X0
	062 Move X22, [X19+192]
	063 Compare X22, 0
	064 JumpIfEqual {96}
	065 Move X21, 0x235C000
	066 Move X20, [X22+456]
	067 Move X21, [X21+4040]
	068 Move X0, X1
	069 Call 0x1C17F10
	070 Move X2, [X21]
	071 Move X1, X19
	072 Move X3, X31
	073 Move X21, X0
	074 Call Action..ctor, X0, X1, X2
	075 Move X0, X20
	076 Move X1, X21
	077 Move X2, X31
	078 Call Delegate.Combine, X0, X1
	079 Compare X0, 0
	080 JumpIfEqual {88}
	081 Move X1, [X23]
	082 Move X8, [X0]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move [X22+456], X0
	085 Move X8, [X0]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Call 0x1C181E0
	088 Move [X22+456], X0
	089 Move X20, [X31+32]
	090 Move X19, [X31+40]
	091 Move X22, [X31+16]
	092 Move X21, [X31+24]
	093 Move X30, [X31+48]
	094 Move X23, [X31+56]
	095 Return 
	096 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x01D9B4C8 B 0x1D9B504
	0x01D9B4CC ADRP X19, 0x263D000
	0x01D9B4D0 LDRB W8, [X19 + 0x783]
	0x01D9B4D4 CBNZ W8, 0x1D9B4EC
	0x01D9B4D8 ADRP X0, 0x2358000
	0x01D9B4DC LDR X0, [X0 + 0x5A0]
	0x01D9B4E0 BL 0x1C16CF4
	0x01D9B4E4 MOVZ W8, 0x1
	0x01D9B4E8 STRB W8, [X19 + 0x783]
	0x01D9B4EC ADRP X8, 0x2358000
	0x01D9B4F0 LDR X8, [X8 + 0x5A0]
	0x01D9B4F4 LDR X8, [X8]
	0x01D9B4F8 LDR X8, [X8 + 0xB8]
	0x01D9B4FC LDP S10, S14, [X8]
	0x01D9B500 LDR V15, [X8 + 0x8]
	0x01D9B504 ADRP X19, 0x263D000
	0x01D9B508 LDRB W8, [X19 + 0x784]
	0x01D9B50C CBNZ W8, 0x1D9B524
	0x01D9B510 ADRP X0, 0x2358000
	0x01D9B514 LDR X0, [X0 + 0x5A8]
	0x01D9B518 BL 0x1C16CF4
	0x01D9B51C MOVZ W8, 0x1
	0x01D9B520 STRB W8, [X19 + 0x784]
	0x01D9B524 LDR X0, [X20]
	0x01D9B528 LDR W8, [X0 + 0xE0]
	0x01D9B52C CBNZ W8, 0x1D9B534
	0x01D9B530 BL 0x1C16DFC
	0x01D9B534 FSQRT S0, S12
	0x01D9B538 FMUL S13, S0, S10
	0x01D9B53C FMUL S14, S0, S14
	0x01D9B540 FMUL S15, S0, S15
	0x01D9B544 FADD S0, S8, S13
	0x01D9B548 FADD S1, S9, S14
	0x01D9B54C FADD S2, S11, S15
	0x01D9B550 LDP X20, X19, [X31 + 0xC0]
	0x01D9B554 LDP X22, X21, [X31 + 0xB0]
	0x01D9B558 LDR X30, [X31 + 0xA0]
	0x01D9B55C LDP D9, D8, [X31 + 0x90]
	0x01D9B560 LDP D11, D10, [X31 + 0x80]
	0x01D9B564 LDP D13, D12, [X31 + 0x70]
	0x01D9B568 LDP D15, D14, [X31 + 0x60]
	0x01D9B56C ADD X31, X31, 0xD0
	0x01D9B570 RET
	0x01D9B574 BL 0x1C16F20
	0x01D9B578 STR X30, [X31 - 0x30]!
	0x01D9B57C STP X22, X21, [X31 + 0x10]
	0x01D9B580 STP X20, X19, [X31 + 0x20]
	0x01D9B584 ADRP X22, 0x263D000
	0x01D9B588 ADRP X21, 0x235B000
	0x01D9B58C ADRP X20, 0x235B000
	0x01D9B590 LDRB W8, [X22 + 0xA3E]
	0x01D9B594 LDR X21, [X21 + 0xFE8]
	0x01D9B598 LDR X20, [X20 + 0xC88]
	0x01D9B59C MOV X19, X0
	0x01D9B5A0 TBNZ X8, 0x0, 0x1D9B5C4
	0x01D9B5A4 ADRP X0, 0x235B000
	0x01D9B5A8 LDR X0, [X0 + 0xFE8]
	0x01D9B5AC BL 0x1C16CF4
	0x01D9B5B0 ADRP X0, 0x235B000
	0x01D9B5B4 LDR X0, [X0 + 0xC88]
	0x01D9B5B8 BL 0x1C16CF4
	0x01D9B5BC MOVZ W8, 0x1
	0x01D9B5C0 STRB W8, [X22 + 0xA3E]
	0x01D9B5C4 MOVZ W8, 0x3F800000
	0x01D9B5C8 STR W8, [X19 + 0xBC]
	0x01D9B5CC LDR X0, [X21]
	0x01D9B5D0 MOV X1, X31
	0x01D9B5D4 BL 0x3C124EC
	0x01D9B5D8 ADRP X8, 0xFFFFFFFFFED50000
	0x01D9B5DC LDR V0, [X8 + 0x5B]
	0x01D9B5E0 STR W0, [X19 + 0xD0]
	0x01D9B5E4 MOV X1, X31
	0x01D9B5E8 STUR V0, [X19 + 0xD4]
	0x01D9B5EC LDR X0, [X20]
	0x01D9B5F0 BL 0x3C124EC
	0x01D9B5F4 STR W0, [X19 + 0xE4]
	0x01D9B5F8 MOV X0, X19
	0x01D9B5FC LDP X20, X19, [X31 + 0x20]
	0x01D9B600 LDP X22, X21, [X31 + 0x10]
	0x01D9B604 MOV X1, X31
	0x01D9B608 LDR X30, [X31], #0x30
	0x01D9B60C B 0x1E74F04
	0x01D9B610 STP X30, X19, [X31 - 0x10]!
	0x01D9B614 LDR W1, [X0 + 0xB8]
	0x01D9B618 MOV X19, X0
	0x01D9B61C BL 0x1D9A17C
	0x01D9B620 LDR V0, [X19 + 0xBC]
	0x01D9B624 MOV X0, X19
	0x01D9B628 BL 0x1D9A23C
	0x01D9B62C LDRB W1, [X19 + 0xC8]
	0x01D9B630 MOV X0, X19
	0x01D9B634 LDP X30, X19, [X31], #0x10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x263E000
	008 Move X21, 0x235C000
	009 Move W8, [X20+2618]
	010 Move X21, [X21+2680]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x235A000
	017 Move X0, [X0+3696]
	018 Call 0x1C17CF4
	019 Move X0, 0x235C000
	020 Move X0, [X0+4040]
	021 Call 0x1C17CF4
	022 Move X0, 0x235C000
	023 Move X0, [X0+4048]
	024 Call 0x1C17CF4
	025 Move X0, 0x235C000
	026 Move X0, [X0+2680]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2618], W8
	030 Move X0, [X21]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Compare X19, 0
	036 JumpIfEqual {102}
	037 Move W8, [X19+48]
	038 Move X23, [X19+192]
	039 Or W8, W8, 8
	040 Move [X19+48], W8
	041 Compare X23, 0
	042 JumpIfEqual {102}
	043 Move X22, 0x235A000
	044 Move X22, [X22+3696]
	045 Move X21, 0x235C000
	046 Move X20, [X23+464]
	047 Move X0, [X22]
	048 Move X21, [X21+4048]
	049 Call 0x1C17F10
	050 Move X2, [X21]
	051 Move X1, X19
	052 Move X3, X31
	053 Move X21, X0
	054 Call Action..ctor, X0, X1, X2
	055 Move X0, X20
	056 Move X1, X21
	057 Move X2, X31
	058 Call Delegate.Remove, X0, X1
	059 Move X1, [X22]
	060 Compare X0, 0
	061 JumpIfEqual {67}
	062 Move X8, [X0]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move [X23+464], X0
	065 Move X8, [X0]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move [X23+464], X0
	068 Move X23, [X19+192]
	069 Compare X23, 0
	070 JumpIfEqual {102}
	071 Move X21, 0x235C000
	072 Move X20, [X23+456]
	073 Move X21, [X21+4040]
	074 Move X0, X1
	075 Call 0x1C17F10
	076 Move X2, [X21]
	077 Move X1, X19
	078 Move X3, X31
	079 Move X21, X0
	080 Call Action..ctor, X0, X1, X2
	081 Move X0, X20
	082 Move X1, X21
	083 Move X2, X31
	084 Call Delegate.Remove, X0, X1
	085 Compare X0, 0
	086 JumpIfEqual {94}
	087 Move X1, [X22]
	088 Move X8, [X0]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move [X23+456], X0
	091 Move X8, [X0]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Call 0x1C181E0
	094 Move [X23+456], X0
	095 Move X20, [X31+32]
	096 Move X19, [X31+40]
	097 Move X22, [X31+16]
	098 Move X21, [X31+24]
	099 Move X30, [X31+48]
	100 Move X23, [X31+56]
	101 Return 
	102 Call 0x1C17F20

Method: System.Void Spawned()

Disassembly:
	0x01D9B638 B 0x1D9A304
	0x01D9B63C STP X30, X19, [X31 - 0x10]!
	0x01D9B640 MOV X19, X0
	0x01D9B644 BL 0x1D9A11C
	0x01D9B648 STR W0, [X19 + 0xB8]
	0x01D9B64C MOV X0, X19
	0x01D9B650 BL 0x1D9A1DC
	0x01D9B654 MOV X0, X19
	0x01D9B658 STR S0, [X19 + 0xBC]
	0x01D9B65C BL 0x1D9A29C
	0x01D9B660 AND W8, W0, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call NetworkBehaviour.Spawned, X0
	006 Move X0, X19
	007 Call Hoverpad.HandleTurnedOnTickChanged, X0
	008 Move X0, X19
	009 Call Hoverpad.HandleIsOnChanged, X0
	010 Move X0, X19
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call Hoverpad.HandleBatteryChanged, X0
	014 Return 

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01D9B85C CBZ X8, 0x1D9B86C
	0x01D9B860 STR W1, [X8 + 0x2C]
	0x01D9B864 LDP X30, X19, [X31], #0x10
	0x01D9B868 RET
	0x01D9B86C ADRP X0, 0x2358000
	0x01D9B870 LDR X0, [X0 + 0x5B0]
	0x01D9B874 BL 0x1C16D08
	0x01D9B878 BL 0x1C16F10
	0x01D9B87C MOV X19, X0
	0x01D9B880 ADRP X0, 0x235C000
	0x01D9B884 LDR X0, [X0 + 0x20]
	0x01D9B888 BL 0x1C16D08
	0x01D9B88C MOV X1, X0
	0x01D9B890 MOV X0, X19
	0x01D9B894 MOV X2, X31
	0x01D9B898 BL 0x337DF1C
	0x01D9B89C ADRP X0, 0x235C000
	0x01D9B8A0 LDR X0, [X0 + 0x30]
	0x01D9B8A4 BL 0x1C16D08
	0x01D9B8A8 MOV X1, X0
	0x01D9B8AC MOV X0, X19
	0x01D9B8B0 BL 0x1C16DEC
	0x01D9B8B4 STP X30, X23, [X31 - 0x30]!
	0x01D9B8B8 STP X22, X21, [X31 + 0x10]
	0x01D9B8BC STP X20, X19, [X31 + 0x20]
	0x01D9B8C0 ADRP X20, 0x263D000
	0x01D9B8C4 LDRB W8, [X20 + 0xA40]
	0x01D9B8C8 MOV X19, X0
	0x01D9B8CC TBNZ X8, 0x0, 0x1D9B8F0
	0x01D9B8D0 ADRP X0, 0x2359000
	0x01D9B8D4 LDR X0, [X0 + 0xE70]
	0x01D9B8D8 BL 0x1C16CF4
	0x01D9B8DC ADRP X0, 0x235C000
	0x01D9B8E0 LDR X0, [X0 + 0x38]
	0x01D9B8E4 BL 0x1C16CF4
	0x01D9B8E8 MOVZ W8, 0x1
	0x01D9B8EC STRB W8, [X20 + 0xA40]
	0x01D9B8F0 LDR X22, [X19 + 0x80]
	0x01D9B8F4 CBZ X22, 0x1D9B974
	0x01D9B8F8 ADRP X23, 0x2359000
	0x01D9B8FC LDR X23, [X23 + 0xE70]
	0x01D9B900 ADRP X21, 0x235C000
	0x01D9B904 LDR X20, [X22 + 0x1D0]
	0x01D9B908 LDR X0, [X23]
	0x01D9B90C LDR X21, [X21 + 0x38]
	0x01D9B910 BL 0x1C16F10
	0x01D9B914 LDR X2, [X21]
	0x01D9B918 MOV X1, X19
	0x01D9B91C MOV X3, X31
	0x01D9B920 MOV X21, X0
	0x01D9B924 BL 0x3314368
	0x01D9B928 MOV X0, X20
	0x01D9B92C MOV X1, X21
	0x01D9B930 MOV X2, X31
	0x01D9B934 BL 0x33C0DE4
	0x01D9B938 CBZ X0, 0x1D9B960
	0x01D9B93C LDR X1, [X23]
	0x01D9B940 LDR X8, [X0]
	0x01D9B944 CMP X8, X1
	0x01D9B948 B.NE 0x1D9B95C
	0x01D9B94C STR X0, [X22 + 0x1D0]
	0x01D9B950 LDR X8, [X0]
	0x01D9B954 CMP X8, X1
	0x01D9B958 B.EQ 0x1D9B964
	0x01D9B95C BL 0x1C171E0
	0x01D9B960 STR X0, [X22 + 0x1D0]
	0x01D9B964 LDP X20, X19, [X31 + 0x20]
	0x01D9B968 LDP X22, X21, [X31 + 0x10]
	0x01D9B96C LDP X30, X23, [X31], #0x30
	0x01D9B970 RET
	0x01D9B974 BL 0x1C16F20
	0x01D9B978 STP X30, X23, [X31 - 0x30]!
	0x01D9B97C STP X22, X21, [X31 + 0x10]
	0x01D9B980 STP X20, X19, [X31 + 0x20]
	0x01D9B984 ADRP X20, 0x263D000
	0x01D9B988 ADRP X21, 0x235B000
	0x01D9B98C LDRB W8, [X20 + 0xA41]
	0x01D9B990 LDR X21, [X21 + 0xA78]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X1, X31
	006 Move X19, X0
	007 Call NetworkBehaviour.FixedUpdateNetwork, X0
	008 Move X0, X19
	009 Call Hoverpad.get_isOn, X0
	010 Move W20, W0
	011 Move X0, X19
	012 Call Hoverpad.get_battery, X0
	013 Move V8, V0
	014 Move TEMP, X20
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {57}
	018 Move X0, [X19+56]
	019 Compare X0, 0
	020 JumpIfEqual {88}
	021 Move X1, X31
	022 Call NetworkRunner.get_DeltaTime, X0
	023 Move X8, -19595264
	024 Move V1, [X8+716]
	025 Move S2, 1
	026 Move X0, X19
	027 Multiply S0, S0, S1
	028 Add S0, S8, S0
	029 NotImplemented "Instruction FMIN not yet implemented."
	030 NotImplemented "Instruction FCMP not yet implemented."
	031 Move S0, W31
	032 NotImplemented "Instruction FCSEL not yet implemented."
	033 Call Hoverpad.set_battery, X0, V0
	034 Move X0, X19
	035 Call Hoverpad.get_battery, X0
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 Move X0, X19
	038 Move W1, W31
	039 Call Hoverpad.set_isOn, X0, X1
	040 Move X20, [X19+168]
	041 Move X0, X19
	042 Move X1, X31
	043 Call Component.get_transform, X0
	044 Compare X0, 0
	045 JumpIfEqual {88}
	046 Move X1, X31
	047 Call Transform.get_position, X0
	048 Move X0, X20
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+8]
	052 Move S3, 0.5
	053 Move X1, X31
	054 Move V8, [X31+32]
	055 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	056 Return 
	057 Move S0, 1
	058 NotImplemented "Instruction FCMP not yet implemented."
	059 Move X0, X19
	060 Call Hoverpad.get_battery, X0
	061 Move X0, [X19+56]
	062 Compare X0, 0
	063 JumpIfEqual {88}
	064 Move X1, X31
	065 Move V8, V0
	066 Call NetworkRunner.get_DeltaTime, X0
	067 Move X8, -19595264
	068 Move V1, [X8+860]
	069 Move X0, X19
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+8]
	073 Multiply S0, S0, S1
	074 Move S2, 1
	075 Add S0, S8, S0
	076 NotImplemented "Instruction FMIN not yet implemented."
	077 NotImplemented "Instruction FCMP not yet implemented."
	078 Move S0, W31
	079 NotImplemented "Instruction FCSEL not yet implemented."
	080 Move V8, [X31+32]
	081 Call Hoverpad.set_battery, X0, V0
	082 Return 
	083 Move X20, [X31+16]
	084 Move X19, [X31+24]
	085 Move X30, [X31+8]
	086 Move V8, [X31+32]
	087 Return 
	088 Call 0x1C17F20

Method: System.Void HandleUse()

Disassembly:
	0x01D9B994 MOV X19, X0
	0x01D9B998 TBNZ X8, 0x0, 0x1D9B9D4
	0x01D9B99C ADRP X0, 0x2359000
	0x01D9B9A0 LDR X0, [X0 + 0xE70]
	0x01D9B9A4 BL 0x1C16CF4
	0x01D9B9A8 ADRP X0, 0x235C000
	0x01D9B9AC LDR X0, [X0 + 0x38]
	0x01D9B9B0 BL 0x1C16CF4
	0x01D9B9B4 ADRP X0, 0x235A000
	0x01D9B9B8 LDR X0, [X0 + 0x5A8]
	0x01D9B9BC BL 0x1C16CF4
	0x01D9B9C0 ADRP X0, 0x235B000
	0x01D9B9C4 LDR X0, [X0 + 0xA78]
	0x01D9B9C8 BL 0x1C16CF4
	0x01D9B9CC MOVZ W8, 0x1
	0x01D9B9D0 STRB W8, [X20 + 0xA41]
	0x01D9B9D4 LDR X0, [X21]
	0x01D9B9D8 LDR W8, [X0 + 0xE0]
	0x01D9B9DC CBNZ W8, 0x1D9B9E4
	0x01D9B9E0 BL 0x1C16DFC
	0x01D9B9E4 CBZ X19, 0x1D9BA9C
	0x01D9B9E8 LDR W8, [X19 + 0x30]
	0x01D9B9EC LDR X22, [X19 + 0x80]
	0x01D9B9F0 ORR W8, W8, 0x8
	0x01D9B9F4 STR W8, [X19 + 0x30]
	0x01D9B9F8 CBZ X22, 0x1D9BA9C
	0x01D9B9FC ADRP X23, 0x2359000
	0x01D9BA00 LDR X23, [X23 + 0xE70]
	0x01D9BA04 ADRP X21, 0x235C000
	0x01D9BA08 LDR X20, [X22 + 0x1D0]
	0x01D9BA0C LDR X0, [X23]
	0x01D9BA10 LDR X21, [X21 + 0x38]
	0x01D9BA14 BL 0x1C16F10
	0x01D9BA18 LDR X2, [X21]
	0x01D9BA1C MOV X1, X19
	0x01D9BA20 MOV X3, X31
	0x01D9BA24 MOV X21, X0
	0x01D9BA28 BL 0x3314368
	0x01D9BA2C MOV X0, X20
	0x01D9BA30 MOV X1, X21
	0x01D9BA34 MOV X2, X31
	0x01D9BA38 BL 0x33C0FDC
	0x01D9BA3C CBZ X0, 0x1D9BA64

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call Hoverpad.get_isOn, X0
	006 Move TEMP, X0
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {17}
	010 Move X0, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move W1, W31
	014 Move X30, [X31+32]
	015 Call Hoverpad.set_isOn, X0, X1
	016 Return 
	017 Move X0, X19
	018 Call Hoverpad.get_battery, X0
	019 Move S1, 0.25
	020 NotImplemented "Instruction FCMP not yet implemented."
	021 Move W1, 1
	022 Move X0, X19
	023 Call Hoverpad.set_isOn, X0, X1
	024 Move X8, [X19+56]
	025 Compare X8, 0
	026 JumpIfEqual {54}
	027 Move X8, [X8+80]
	028 Compare X8, 0
	029 JumpIfEqual {47}
	030 Move W1, [X8+72]
	031 Move X20, [X19+176]
	032 Move X0, X19
	033 Move X1, X31
	034 Call Component.get_transform, X0
	035 Compare X0, 0
	036 JumpIfEqual {54}
	037 Move X1, X31
	038 Call Transform.get_position, X0
	039 Move X0, X20
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move S3, 0.5
	043 Move X1, X31
	044 Move X30, [X31+32]
	045 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	046 Return 
	047 Move W1, W31
	048 Move X0, X19
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Call Hoverpad.set_turnedOnTick, X0, X1
	053 Return 
	054 Call 0x1C17F20

Method: System.Void HandleGrabbedChanged()

Disassembly:
	0x01D9BA40 LDR X1, [X23]
	0x01D9BA44 LDR X8, [X0]
	0x01D9BA48 CMP X8, X1
	0x01D9BA4C B.NE 0x1D9BA60
	0x01D9BA50 STR X0, [X22 + 0x1D0]
	0x01D9BA54 LDR X8, [X0]
	0x01D9BA58 CMP X8, X1
	0x01D9BA5C B.EQ 0x1D9BA68
	0x01D9BA60 BL 0x1C171E0
	0x01D9BA64 STR X0, [X22 + 0x1D0]
	0x01D9BA68 ADRP X8, 0x235A000
	0x01D9BA6C LDR X8, [X8 + 0x5A8]
	0x01D9BA70 LDR W19, [X19 + 0xBC]
	0x01D9BA74 LDR X0, [X8]
	0x01D9BA78 LDR W8, [X0 + 0xE0]
	0x01D9BA7C CBNZ W8, 0x1D9BA84

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Hoverpad.get_isOn, X0
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {18}
	009 Move X0, [X19+192]
	010 Compare X0, 0
	011 JumpIfEqual {27}
	012 Move X1, X31
	013 Call GrabbableItem.get_isAttached, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {21}
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Return 
	021 Move X0, X19
	022 Move W1, W31
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Call Hoverpad.set_isOn, X0, X1
	026 Return 
	027 Call 0x1C17F20

Method: System.Void HandleTurnedOnTickChanged()

Disassembly:
	0x01D9B664 STRB W8, [X19 + 0xC8]
	0x01D9B668 LDP X30, X19, [X31], #0x10
	0x01D9B66C RET
	0x01D9B670 STP X30, X19, [X31 - 0x10]!
	0x01D9B674 LDR X8, [X0 + 0x50]
	0x01D9B678 CBZ X8, 0x1D9B690
	0x01D9B67C LDR W8, [X8]
	0x01D9B680 CMP W8, 0x0
	0x01D9B684 CSET W0, NE
	0x01D9B688 LDP X30, X19, [X31], #0x10
	0x01D9B68C RET
	0x01D9B690 ADRP X0, 0x2358000
	0x01D9B694 LDR X0, [X0 + 0x5B0]
	0x01D9B698 BL 0x1C16D08
	0x01D9B69C BL 0x1C16F10
	0x01D9B6A0 MOV X19, X0
	0x01D9B6A4 ADRP X0, 0x235B000
	0x01D9B6A8 LDR X0, [X0 + 0xFF0]
	0x01D9B6AC BL 0x1C16D08
	0x01D9B6B0 MOV X1, X0
	0x01D9B6B4 MOV X0, X19
	0x01D9B6B8 MOV X2, X31
	0x01D9B6BC BL 0x337DF1C
	0x01D9B6C0 ADRP X0, 0x235B000
	0x01D9B6C4 LDR X0, [X0 + 0xFF8]
	0x01D9B6C8 BL 0x1C16D08
	0x01D9B6CC MOV X1, X0
	0x01D9B6D0 MOV X0, X19
	0x01D9B6D4 BL 0x1C16DEC
	0x01D9B6D8 STP X30, X19, [X31 - 0x10]!
	0x01D9B6DC LDR X8, [X0 + 0x50]
	0x01D9B6E0 CBZ X8, 0x1D9B6F4
	0x01D9B6E4 AND W9, W1, 0x1

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move X0, X31
	008 Call Time.get_time
	009 Move X8, [X19+56]
	010 Compare X8, 0
	011 JumpIfEqual {39}
	012 Move X8, [X8+80]
	013 Move V8, V0
	014 Compare X8, 0
	015 JumpIfEqual {17}
	016 Move W21, [X8+72]
	017 Move W21, W31
	018 Move X0, X19
	019 Call Hoverpad.get_turnedOnTick, X0
	020 Move X8, [X19+56]
	021 Compare X8, 0
	022 JumpIfEqual {39}
	023 Move W20, W0
	024 Move X0, X8
	025 Move X1, X31
	026 Call NetworkRunner.get_TickRate, X0
	027 Subtract W8, W21, W20
	028 NotImplemented "Instruction SCVTF not yet implemented."
	029 NotImplemented "Instruction SCVTF not yet implemented."
	030 NotImplemented "Instruction FDIV not yet implemented."
	031 Subtract S0, S8, S0
	032 Move [X19+204], S0
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+16]
	036 Move X21, [X31+24]
	037 Move V8, [X31+48]
	038 Return 
	039 Call 0x1C17F20

Method: System.Void HandleBatteryChanged()

Disassembly:
	0x01D9B7D4 MOV X2, X31
	0x01D9B7D8 BL 0x337DF1C
	0x01D9B7DC ADRP X0, 0x235C000
	0x01D9B7E0 LDR X0, [X0 + 0x18]
	0x01D9B7E4 BL 0x1C16D08
	0x01D9B7E8 MOV X1, X0
	0x01D9B7EC MOV X0, X19
	0x01D9B7F0 BL 0x1C16DEC
	0x01D9B7F4 STP X30, X19, [X31 - 0x10]!
	0x01D9B7F8 LDR X8, [X0 + 0x50]
	0x01D9B7FC CBZ X8, 0x1D9B80C
	0x01D9B800 LDR W0, [X8 + 0x2C]
	0x01D9B804 LDP X30, X19, [X31], #0x10
	0x01D9B808 RET
	0x01D9B80C ADRP X0, 0x2358000
	0x01D9B810 LDR X0, [X0 + 0x5B0]
	0x01D9B814 BL 0x1C16D08
	0x01D9B818 BL 0x1C16F10
	0x01D9B81C MOV X19, X0
	0x01D9B820 ADRP X0, 0x235C000
	0x01D9B824 LDR X0, [X0 + 0x20]
	0x01D9B828 BL 0x1C16D08
	0x01D9B82C MOV X1, X0
	0x01D9B830 MOV X0, X19
	0x01D9B834 MOV X2, X31
	0x01D9B838 BL 0x337DF1C
	0x01D9B83C ADRP X0, 0x235C000
	0x01D9B840 LDR X0, [X0 + 0x28]
	0x01D9B844 BL 0x1C16D08
	0x01D9B848 MOV X1, X0
	0x01D9B84C MOV X0, X19
	0x01D9B850 BL 0x1C16DEC
	0x01D9B854 STP X30, X19, [X31 - 0x10]!
	0x01D9B858 LDR X8, [X0 + 0x50]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, X0
	010 Move X0, [X0+160]
	011 Compare X0, 0
	012 JumpIfEqual {47}
	013 Move X1, X31
	014 Call Renderer.get_material, X0
	015 Move W19, [X21+228]
	016 Move S8, [X21+212]
	017 Move S9, [X21+216]
	018 Move S10, [X21+220]
	019 Move S11, [X21+224]
	020 Move X20, X0
	021 Move X0, X21
	022 Call Hoverpad.get_battery, X0
	023 Move S1, -0.5
	024 Add S0, S0, S1
	025 Move S1, 20
	026 Multiply S0, S0, S1
	027 Call 0x3EB2B90
	028 Compare X20, 0
	029 JumpIfEqual {47}
	030 Multiply S3, S11, S0
	031 Multiply S2, S10, S0
	032 Multiply S1, S9, S0
	033 Multiply S0, S8, S0
	034 Move X0, X20
	035 Move W1, W19
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Move D9, [X31+16]
	041 Move D8, [X31+24]
	042 Move X2, X31
	043 Move D11, [X31+64]
	044 Move D10, [X31+72]
	045 Call Material.SetColor, X0, X1, X2
	046 Return 
	047 Call 0x1C17F20

Method: System.Void HandleIsOnChanged()

Disassembly:
	0x01D9B6E8 STR W9, [X8]
	0x01D9B6EC LDP X30, X19, [X31], #0x10
	0x01D9B6F0 RET
	0x01D9B6F4 ADRP X0, 0x2358000
	0x01D9B6F8 LDR X0, [X0 + 0x5B0]
	0x01D9B6FC BL 0x1C16D08
	0x01D9B700 BL 0x1C16F10
	0x01D9B704 MOV X19, X0
	0x01D9B708 ADRP X0, 0x235B000
	0x01D9B70C LDR X0, [X0 + 0xFF0]
	0x01D9B710 BL 0x1C16D08
	0x01D9B714 MOV X1, X0
	0x01D9B718 MOV X0, X19
	0x01D9B71C MOV X2, X31
	0x01D9B720 BL 0x337DF1C
	0x01D9B724 ADRP X0, 0x235C000
	0x01D9B728 LDR X0, [X0]
	0x01D9B72C BL 0x1C16D08
	0x01D9B730 MOV X1, X0
	0x01D9B734 MOV X0, X19
	0x01D9B738 BL 0x1C16DEC
	0x01D9B73C STP X30, X21, [X31 - 0x20]!
	0x01D9B740 STP X20, X19, [X31 + 0x10]
	0x01D9B744 ADRP X21, 0x263D000
	0x01D9B748 LDRB W9, [X21 + 0xA3F]
	0x01D9B74C MOV X20, X0
	0x01D9B750 MOV X19, X8
	0x01D9B754 TBNZ X9, 0x0, 0x1D9B76C
	0x01D9B758 ADRP X0, 0x235C000
	0x01D9B75C LDR X0, [X0 + 0x8]
	0x01D9B760 BL 0x1C16CF4
	0x01D9B764 MOVZ W8, 0x1
	0x01D9B768 STRB W8, [X21 + 0xA3F]
	0x01D9B76C LDR X20, [X20 + 0x50]
	0x01D9B770 CBZ X20, 0x1D9B7AC
	0x01D9B774 ADRP X21, 0x235C000
	0x01D9B778 LDR X21, [X21 + 0x8]
	0x01D9B77C MOV X0, X31
	0x01D9B780 BL 0x1D79358
	0x01D9B784 MOV X3, X0
	0x01D9B788 STP X31, X31, [X19 + 0x8]
	0x01D9B78C LDR X4, [X21]
	0x01D9B790 ADD X1, X20, 0x4
	0x01D9B794 STR X31, [X19]
	0x01D9B798 MOV X0, X19
	0x01D9B79C LDP X20, X19, [X31 + 0x10]
	0x01D9B7A0 MOVZ W2, 0xA
	0x01D9B7A4 LDP X30, X21, [X31], #0x20
	0x01D9B7A8 B 0x240C320
	0x01D9B7AC ADRP X0, 0x2358000
	0x01D9B7B0 LDR X0, [X0 + 0x5B0]
	0x01D9B7B4 BL 0x1C16D08
	0x01D9B7B8 BL 0x1C16F10
	0x01D9B7BC MOV X19, X0
	0x01D9B7C0 ADRP X0, 0x235C000
	0x01D9B7C4 LDR X0, [X0 + 0x10]
	0x01D9B7C8 BL 0x1C16D08
	0x01D9B7CC MOV X1, X0
	0x01D9B7D0 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call Hoverpad.UpdateHoverVisual, X0
	006 Move X0, X19
	007 Call Hoverpad.get_isOn, X0
	008 Move X8, [X19+144]
	009 Compare X8, 0
	010 JumpIfEqual {72}
	011 Move W20, W0
	012 Move X0, X8
	013 Move X1, X31
	014 Call AudioSource.get_isPlaying, X0
	015 And W8, W0, 1
	016 And W9, W20, 1
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X0, X19
	019 Call Hoverpad.get_isOn, X0
	020 Move X8, [X19+144]
	021 Compare X8, 0
	022 JumpIfEqual {72}
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {30}
	027 Move X0, X8
	028 Move X1, X31
	029 Call AudioSource.Play, X0
	030 Move X0, X8
	031 Move X1, X31
	032 Call AudioSource.Pause, X0
	033 Move X0, X19
	034 Call Hoverpad.get_isOn, X0
	035 Move X8, [X19+152]
	036 Compare X8, 0
	037 JumpIfEqual {72}
	038 Move W20, W0
	039 Move X0, X8
	040 Move X1, X31
	041 Call AudioSource.get_isPlaying, X0
	042 And W8, W0, 1
	043 And W9, W20, 1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, X19
	046 Call Hoverpad.get_isOn, X0
	047 Move X8, [X19+152]
	048 Compare X8, 0
	049 JumpIfEqual {72}
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {65}
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X0, X8
	057 Move X1, X31
	058 Move X30, [X31+32]
	059 Call AudioSource.Play, X0
	060 Return 
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X30, [X31+32]
	064 Return 
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X0, X8
	068 Move X1, X31
	069 Move X30, [X31+32]
	070 Call AudioSource.Pause, X0
	071 Return 
	072 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01D9BD30 MOV X3, X31
	0x01D9BD34 BL 0x1E9C23C
	0x01D9BD38 STUR X0, [X20 + 0x1C]
	0x01D9BD3C CBZ X20, 0x1D9BD64
	0x01D9BD40 MOVZ W8, 0x40
	0x01D9BD44 STR W8, [X20 + 0xC]
	0x01D9BD48 LDR X0, [X19 + 0x38]
	0x01D9BD4C CBZ X0, 0x1D9BD64
	0x01D9BD50 MOV X1, X20
	0x01D9BD54 LDP X20, X19, [X31 + 0x10]
	0x01D9BD58 MOV X2, X31
	0x01D9BD5C LDR X30, [X31], #0x20
	0x01D9BD60 B 0x1EA1E24
	0x01D9BD64 BL 0x1C16F20
	0x01D9BD68 STR X30, [X31 - 0x20]!
	0x01D9BD6C STP X20, X19, [X31 + 0x10]
	0x01D9BD70 LDR X20, [X0 + 0xA0]
	0x01D9BD74 MOV X1, X31
	0x01D9BD78 MOV X19, X0
	0x01D9BD7C BL 0x3C32E90
	0x01D9BD80 CBZ X0, 0x1D9BDAC
	0x01D9BD84 MOV X1, X31
	0x01D9BD88 BL 0x3C3F58C
	0x01D9BD8C FMOV S3, 1
	0x01D9BD90 MOV X0, X20
	0x01D9BD94 MOV X1, X31
	0x01D9BD98 BL 0x1DD1B94
	0x01D9BD9C MOV X0, X19
	0x01D9BDA0 LDP X20, X19, [X31 + 0x10]
	0x01D9BDA4 LDR X30, [X31], #0x20
	0x01D9BDA8 B 0x1D9BDB4
	0x01D9BDAC BL 0x1C16F20
	0x01D9BDB0 B 0x1D9BBCC
	0x01D9BDB4 STP D9, D8, [X31 - 0x50]!
	0x01D9BDB8 STR X30, [X31 + 0x10]
	0x01D9BDBC STP X24, X23, [X31 + 0x20]
	0x01D9BDC0 STP X22, X21, [X31 + 0x30]
	0x01D9BDC4 STP X20, X19, [X31 + 0x40]
	0x01D9BDC8 ADRP X20, 0x263D000
	0x01D9BDCC ADRP X21, 0x235C000
	0x01D9BDD0 LDRB W8, [X20 + 0xA45]
	0x01D9BDD4 LDR X21, [X21 + 0x58]
	0x01D9BDD8 MOV X19, X0
	0x01D9BDDC TBNZ X8, 0x0, 0x1D9BE30
	0x01D9BDE0 ADRP X0, 0x235A000
	0x01D9BDE4 LDR X0, [X0 + 0x5B0]
	0x01D9BDE8 BL 0x1C16CF4
	0x01D9BDEC ADRP X0, 0x2359000
	0x01D9BDF0 LDR X0, [X0 + 0xE70]
	0x01D9BDF4 BL 0x1C16CF4
	0x01D9BDF8 ADRP X0, 0x235A000
	0x01D9BDFC LDR X0, [X0 + 0x5A8]
	0x01D9BE00 BL 0x1C16CF4
	0x01D9BE04 ADRP X0, 0x235C000
	0x01D9BE08 LDR X0, [X0 + 0x60]
	0x01D9BE0C BL 0x1C16CF4
	0x01D9BE10 ADRP X0, 0x235C000
	0x01D9BE14 LDR X0, [X0 + 0x68]
	0x01D9BE18 BL 0x1C16CF4
	0x01D9BE1C ADRP X0, 0x235C000
	0x01D9BE20 LDR X0, [X0 + 0x58]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Call Hoverpad.get_isOn, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {69}
	013 Move X0, X19
	014 Call Hoverpad.UpdateHoverVisual, X0
	015 Move X8, [X19+192]
	016 Compare X8, 0
	017 JumpIfEqual {76}
	018 Move X0, [X8+360]
	019 Compare X0, 0
	020 JumpIfEqual {76}
	021 Move X19, [X19+144]
	022 Move X1, X31
	023 Call Rigidbody.get_velocity, X0
	024 Move X20, 0x263E000
	025 Move W8, [X20+1924]
	026 Move V8, V0
	027 Move V9, V1
	028 Move V10, V2
	029 Compare W8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, 0x2359000
	032 Move X0, [X0+1448]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+1924], W8
	036 Move X8, 0x2359000
	037 Move X8, [X8+1448]
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Compare X19, 0
	044 JumpIfEqual {76}
	045 Multiply S0, S8, S8
	046 Multiply S1, S9, S9
	047 Multiply S2, S10, S10
	048 Add S0, S0, S1
	049 Move X8, -19595264
	050 Add S0, S2, S0
	051 Move V2, [X8+860]
	052 Move S1, 10
	053 NotImplemented "Instruction FSQRT not yet implemented."
	054 NotImplemented "Instruction FDIV not yet implemented."
	055 Move S1, 1
	056 Move X0, X19
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X30, [X31+24]
	060 Move D9, [X31+8]
	061 Move D8, [X31+16]
	062 NotImplemented "Instruction FMIN not yet implemented."
	063 Multiply S0, S0, S2
	064 Add S0, S0, S2
	065 Move X1, X31
	066 Move V10, [X31+48]
	067 Call AudioSource.set_volume, X0, V0
	068 Return 
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X30, [X31+24]
	072 Move D9, [X31+8]
	073 Move D8, [X31+16]
	074 Move V10, [X31+48]
	075 Return 
	076 Call 0x1C17F20

Method: System.Void FixedUpdate()

Disassembly:
	0x01D9BE24 BL 0x1C16CF4
	0x01D9BE28 MOVZ W8, 0x1
	0x01D9BE2C STRB W8, [X20 + 0xA45]
	0x01D9BE30 LDR X0, [X21]
	0x01D9BE34 BL 0x1C16F10
	0x01D9BE38 MOV X1, X31
	0x01D9BE3C MOV X20, X0
	0x01D9BE40 BL 0x33BDD8C
	0x01D9BE44 CBZ X20, 0x1D9BFD0
	0x01D9BE48 ADRP X22, 0x235A000
	0x01D9BE4C LDR X22, [X22 + 0x5A8]
	0x01D9BE50 STR X19, [X20 + 0x10]
	0x01D9BE54 LDR W21, [X19 + 0xBC]
	0x01D9BE58 LDR X0, [X22]
	0x01D9BE5C LDR W8, [X0 + 0xE0]
	0x01D9BE60 CBNZ W8, 0x1D9BE68

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Hoverpad.get_isOn, X0
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {26}
	009 Move X0, [X19+64]
	010 Compare X0, 0
	011 JumpIfEqual {26}
	012 Move W8, [X0+96]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 2
	015 Compare TEMP, 2
	016 JumpIfEqual {26}
	017 Move X1, X31
	018 Call NetworkObject.get_HasStateAuthority, X0
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {26}
	023 Move X0, X19
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Return 

Method: System.Void UpdateHoverVisual()

Disassembly:
	0x01D9BA80 BL 0x1C16DFC
	0x01D9BA84 MOV W0, W19
	0x01D9BA88 LDP X20, X19, [X31 + 0x20]
	0x01D9BA8C LDP X22, X21, [X31 + 0x10]
	0x01D9BA90 MOV X1, X31
	0x01D9BA94 LDP X30, X23, [X31], #0x30
	0x01D9BA98 B 0x31AD670
	0x01D9BA9C BL 0x1C16F20
	0x01D9BAA0 SUB X31, X31, 0x90
	0x01D9BAA4 STP X30, X23, [X31 + 0x60]
	0x01D9BAA8 STP X22, X21, [X31 + 0x70]
	0x01D9BAAC STP X20, X19, [X31 + 0x80]
	0x01D9BAB0 ADRP X20, 0x263D000
	0x01D9BAB4 LDRB W8, [X20 + 0xA42]
	0x01D9BAB8 MOV X19, X0
	0x01D9BABC TBNZ X8, 0x0, 0x1D9BAEC
	0x01D9BAC0 ADRP X0, 0x235C000
	0x01D9BAC4 LDR X0, [X0 + 0x40]
	0x01D9BAC8 BL 0x1C16CF4
	0x01D9BACC ADRP X0, 0x235C000
	0x01D9BAD0 LDR X0, [X0 + 0x48]
	0x01D9BAD4 BL 0x1C16CF4
	0x01D9BAD8 ADRP X0, 0x235B000
	0x01D9BADC LDR X0, [X0 + 0x398]
	0x01D9BAE0 BL 0x1C16CF4
	0x01D9BAE4 MOVZ W8, 0x1
	0x01D9BAE8 STRB W8, [X20 + 0xA42]
	0x01D9BAEC ADD X8, X31, 0x8
	0x01D9BAF0 MOV X0, X19
	0x01D9BAF4 STP X31, X31, [X31 + 0x40]
	0x01D9BAF8 STR X31, [X31 + 0x50]
	0x01D9BAFC BL 0x1D9B73C
	0x01D9BB00 LDUR V0, [X31 + 0x8]
	0x01D9BB04 LDR X9, [X31 + 0x18]
	0x01D9BB08 MOV W20, W31
	0x01D9BB0C STR V0, [X31 + 0x4]
	0x01D9BB10 LDR W8, [X31 + 0x48]
	0x01D9BB14 STR V0, [X31 + 0x2]
	0x01D9BB18 STR X9, [X31 + 0x50]
	0x01D9BB1C CMP W8, 0x1
	0x01D9BB20 B.LT 0x1D9BBAC
	0x01D9BB24 ADRP X22, 0x235C000
	0x01D9BB28 ADRP X23, 0x235B000
	0x01D9BB2C LDR X22, [X22 + 0x40]
	0x01D9BB30 LDR X23, [X23 + 0x398]
	0x01D9BB34 ADD X8, X31, 0x20
	0x01D9BB38 MOV X0, X19
	0x01D9BB3C BL 0x1D9B73C
	0x01D9BB40 LDR V0, [X31 + 0x2]
	0x01D9BB44 LDR X8, [X31 + 0x30]
	0x01D9BB48 LDR X2, [X22]
	0x01D9BB4C ADD X0, X31, 0x40
	0x01D9BB50 MOV W1, W20
	0x01D9BB54 STR V0, [X31 + 0x4]
	0x01D9BB58 STR X8, [X31 + 0x50]
	0x01D9BB5C BL 0x240C008
	0x01D9BB60 LDR X8, [X23]
	0x01D9BB64 MOV X21, X0
	0x01D9BB68 LDR W9, [X8 + 0xE0]
	0x01D9BB6C CBNZ W9, 0x1D9BB78
	0x01D9BB70 MOV X0, X8
	0x01D9BB74 BL 0x1C16DFC
	0x01D9BB78 CBZ W21, 0x1D9BBAC
	0x01D9BB7C ADD X8, X31, 0x8
	0x01D9BB80 MOV X0, X19
	0x01D9BB84 ADD W20, W20, 0x1
	0x01D9BB88 BL 0x1D9B73C
	0x01D9BB8C LDUR V0, [X31 + 0x8]
	0x01D9BB90 LDR X9, [X31 + 0x18]
	0x01D9BB94 STR V0, [X31 + 0x4]
	0x01D9BB98 LDR W8, [X31 + 0x48]
	0x01D9BB9C STR V0, [X31 + 0x2]
	0x01D9BBA0 STR X9, [X31 + 0x50]
	0x01D9BBA4 CMP W20, W8
	0x01D9BBA8 B.LT 0x1D9BB34
	0x01D9BBAC SCVTF S0, W20
	0x01D9BBB0 LDP X20, X19, [X31 + 0x80]
	0x01D9BBB4 LDP X22, X21, [X31 + 0x70]
	0x01D9BBB8 LDP X30, X23, [X31 + 0x60]
	0x01D9BBBC FMOV S1, 10
	0x01D9BBC0 FDIV S0, S0, S1
	0x01D9BBC4 ADD X31, X31, 0x90
	0x01D9BBC8 RET
	0x01D9BBCC STR X30, [X31 - 0x20]!
	0x01D9BBD0 STP X20, X19, [X31 + 0x10]
	0x01D9BBD4 ADRP X20, 0x263D000
	0x01D9BBD8 LDRB W8, [X20 + 0xA43]
	0x01D9BBDC MOV X19, X0
	0x01D9BBE0 TBNZ X8, 0x0, 0x1D9BC04
	0x01D9BBE4 ADRP X0, 0x235B000
	0x01D9BBE8 LDR X0, [X0 + 0xA78]
	0x01D9BBEC BL 0x1C16CF4
	0x01D9BBF0 ADRP X0, 0x235C000
	0x01D9BBF4 LDR X0, [X0 + 0x50]
	0x01D9BBF8 BL 0x1C16CF4
	0x01D9BBFC MOVZ W8, 0x1
	0x01D9BC00 STRB W8, [X20 + 0xA43]
	0x01D9BC04 LDRB W8, [X19 + 0x58]
	0x01D9BC08 CBZ W8, 0x1D9BC38
	0x01D9BC0C STRB W31, [X19 + 0x58]
	0x01D9BC10 MOV X0, X19
	0x01D9BC14 BL 0x1D9B670
	0x01D9BC18 ORN W8, W31, W0, 0x0
	0x01D9BC1C AND W1, W8, 0x1
	0x01D9BC20 MOV X0, X19
	0x01D9BC24 BL 0x1D9B6D8
	0x01D9BC28 MOV X0, X19
	0x01D9BC2C LDP X20, X19, [X31 + 0x10]
	0x01D9BC30 LDR X30, [X31], #0x20
	0x01D9BC34 B 0x1D9BD68
	0x01D9BC38 ADRP X20, 0x235B000
	0x01D9BC3C LDR X20, [X20 + 0xA78]
	0x01D9BC40 LDR X0, [X20]
	0x01D9BC44 LDR W8, [X0 + 0xE0]
	0x01D9BC48 CBNZ W8, 0x1D9BC50
	0x01D9BC4C BL 0x1C16DFC
	0x01D9BC50 MOV X0, X19
	0x01D9BC54 MOV X1, X31
	0x01D9BC58 BL 0x1E77B08
	0x01D9BC5C LDR X0, [X19 + 0x38]
	0x01D9BC60 CBZ X0, 0x1D9BD64
	0x01D9BC64 MOV X1, X31
	0x01D9BC68 BL 0x1E9E538
	0x01D9BC6C CMP W0, 0x4
	0x01D9BC70 B.NE 0x1D9BC80
	0x01D9BC74 LDP X20, X19, [X31 + 0x10]
	0x01D9BC78 LDR X30, [X31], #0x20
	0x01D9BC7C RET
	0x01D9BC80 LDR X0, [X19 + 0x40]
	0x01D9BC84 CBZ X0, 0x1D9BD64
	0x01D9BC88 MOV X1, X31
	0x01D9BC8C BL 0x1E94078
	0x01D9BC90 ANDS W31, W0, 0x7
	0x01D9BC94 B.EQ 0x1D9BCEC
	0x01D9BC98 TBNZ X0, 0x0, 0x1D9BC10
	0x01D9BC9C LDR X8, [X19 + 0x38]
	0x01D9BCA0 CBZ X8, 0x1D9BD64
	0x01D9BCA4 LDR X0, [X8 + 0x50]
	0x01D9BCA8 CBZ X0, 0x1D9BD64
	0x01D9BCAC MOV X1, X31
	0x01D9BCB0 BL 0x1EC4D00
	0x01D9BCB4 TBZ X0, 0x0, 0x1D9BC74
	0x01D9BCB8 LDR X8, [X19 + 0x38]
	0x01D9BCBC CBZ X8, 0x1D9BD64
	0x01D9BCC0 LDR X0, [X8 + 0x50]
	0x01D9BCC4 MOVZ W1, 0x8
	0x01D9BCC8 MOV X2, X31
	0x01D9BCCC BL 0x1ED9318
	0x01D9BCD0 LDR X8, [X19 + 0x40]
	0x01D9BCD4 CBZ X8, 0x1D9BD64
	0x01D9BCD8 LDR X8, [X8 + 0x20]
	0x01D9BCDC MOV X20, X0
	0x01D9BCE0 CBZ X8, 0x1D9BD24
	0x01D9BCE4 LDR W0, [X8]
	0x01D9BCE8 B 0x1D9BD28
	0x01D9BCEC LDR X0, [X20]
	0x01D9BCF0 LDR X19, [X19 + 0x40]
	0x01D9BCF4 LDR W8, [X0 + 0xE0]
	0x01D9BCF8 CBNZ W8, 0x1D9BD00
	0x01D9BCFC BL 0x1C16DFC
	0x01D9BD00 ADRP X8, 0x235C000
	0x01D9BD04 LDR X8, [X8 + 0x50]
	0x01D9BD08 MOV X1, X19
	0x01D9BD0C LDP X20, X19, [X31 + 0x10]
	0x01D9BD10 MOVZ W2, 0x7
	0x01D9BD14 LDR X0, [X8]
	0x01D9BD18 MOV X3, X31
	0x01D9BD1C LDR X30, [X31], #0x20
	0x01D9BD20 B 0x1E77B00
	0x01D9BD24 MOV X0, X31
	0x01D9BD28 LDR W1, [X19 + 0x68]
	0x01D9BD2C MOVZ W2, 0x1

ISIL:
	001 Move [X31-96], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x263E000
	013 Move W8, [X20+2619]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x235C000
	020 Move X0, [X0+4056]
	021 Call 0x1C17CF4
	022 Move X0, 0x235C000
	023 Move X0, [X0+4064]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+2619], W8
	027 Move X0, X19
	028 Call Hoverpad.get_isOn, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {126}
	033 Move X0, X31
	034 Call Time.get_time
	035 Move X22, [X19+136]
	036 Compare X22, 0
	037 JumpIfEqual {197}
	038 Move V1, [X19+204]
	039 Move X23, 0x235C000
	040 Move X21, 0x2359000
	041 Move X23, [X23+4064]
	042 Move X21, [X21+1440]
	043 Move S2, 3
	044 Subtract S0, S0, S1
	045 Move S3, -1
	046 Multiply S0, S0, S2
	047 Move W20, W31
	048 Move S9, W31
	049 Move X24, 0x263E000
	050 Add S10, S0, S3
	051 Move W25, 1
	052 Move W8, [X22+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction SCVTF not yet implemented."
	055 NotImplemented "Instruction SCVTF not yet implemented."
	056 NotImplemented "Instruction FDIV not yet implemented."
	057 Add S8, S10, S0
	058 Move S1, 1
	059 Move V0, V8
	060 Call 0x3EB2BA0
	061 Move X2, [X23]
	062 NotImplemented "Instruction FCMP not yet implemented."
	063 Move X0, X22
	064 Move W1, W20
	065 NotImplemented "Instruction FCSEL not yet implemented."
	066 Call List`1<Object>.get_Item, X0, X1
	067 Compare X0, 0
	068 JumpIfEqual {197}
	069 Move X1, X31
	070 Call Component.get_transform, X0
	071 Move W8, [X24+2749]
	072 Move X22, X0
	073 Compare W8, 0
	074 JumpIfNotEqual {78}
	075 Move X0, X21
	076 Call 0x1C17CF4
	077 Move [X24+2749], W25
	078 Compare X22, 0
	079 JumpIfEqual {197}
	080 Move X8, [X21]
	081 Move X0, X22
	082 Move X1, X31
	083 Move X8, [X8+184]
	084 Move S1, [X8+40]
	085 Move S0, [X8+44]
	086 Move V3, [X8+36]
	087 Multiply S2, S8, S0
	088 Multiply S1, S8, S1
	089 Multiply S0, S8, S3
	090 Call Transform.set_localPosition, X0, X1
	091 Move X0, [X19+136]
	092 Compare X0, 0
	093 JumpIfEqual {197}
	094 Move X2, [X23]
	095 Move W1, W20
	096 Call List`1<Object>.get_Item, X0, X1
	097 Compare X0, 0
	098 JumpIfEqual {197}
	099 Move X1, X31
	100 Call Renderer.get_material, X0
	101 Compare X0, 0
	102 JumpIfEqual {197}
	103 Move W1, [X19+208]
	104 Move V0, V8
	105 Move X2, X31
	106 Call Material.SetFloat, X0, X1, V0
	107 Move X0, [X19+136]
	108 Compare X0, 0
	109 JumpIfEqual {197}
	110 Move X2, [X23]
	111 Move W1, W20
	112 Call List`1<Object>.get_Item, X0, X1
	113 Compare X0, 0
	114 JumpIfEqual {197}
	115 Move X1, X31
	116 Call Component.get_gameObject, X0
	117 Compare X0, 0
	118 JumpIfEqual {197}
	119 Move W1, 1
	120 Move X2, X31
	121 Call GameObject.SetActive, X0, X1
	122 Move X22, [X19+136]
	123 Add W20, W20, 1
	124 Compare X22, 0
	125 JumpIfNotEqual {52}
	126 Move X0, [X19+136]
	127 Compare X0, 0
	128 JumpIfEqual {197}
	129 Move X23, 0x235C000
	130 Move X21, 0x2359000
	131 Move X23, [X23+4064]
	132 Move X21, [X21+1440]
	133 Move W20, W31
	134 Move X24, 0x263E000
	135 Move W25, 1
	136 Move W8, [X0+24]
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move X2, [X23]
	139 Move W1, W20
	140 Call List`1<Object>.get_Item, X0, X1
	141 Compare X0, 0
	142 JumpIfEqual {197}
	143 Move X1, X31
	144 Call Component.get_transform, X0
	145 Move W8, [X24+1923]
	146 Move X22, X0
	147 Compare W8, 0
	148 JumpIfNotEqual {152}
	149 Move X0, X21
	150 Call 0x1C17CF4
	151 Move [X24+1923], W25
	152 Compare X22, 0
	153 JumpIfEqual {197}
	154 Move X8, [X21]
	155 Move X0, X22
	156 Move X1, X31
	157 Move X8, [X8+184]
	158 Move S1, [X8+4]
	159 Move S2, [X8+8]
	160 Move V0, [X8]
	161 Call Transform.set_localPosition, X0, X1
	162 Move X0, [X19+136]
	163 Compare X0, 0
	164 JumpIfEqual {197}
	165 Move X2, [X23]
	166 Move W1, W20
	167 Call List`1<Object>.get_Item, X0, X1
	168 Compare X0, 0
	169 JumpIfEqual {197}
	170 Move X1, X31
	171 Call Renderer.get_material, X0
	172 Compare X0, 0
	173 JumpIfEqual {197}
	174 Move W1, [X19+208]
	175 Move S0, W31
	176 Move X2, X31
	177 Call Material.SetFloat, X0, X1, V0
	178 Move X0, [X19+136]
	179 Compare X0, 0
	180 JumpIfEqual {197}
	181 Move X2, [X23]
	182 Move W1, W20
	183 Call List`1<Object>.get_Item, X0, X1
	184 Compare X0, 0
	185 JumpIfEqual {197}
	186 Move X1, X31
	187 Call Component.get_gameObject, X0
	188 Compare X0, 0
	189 JumpIfEqual {197}
	190 Move W1, W31
	191 Move X2, X31
	192 Call GameObject.SetActive, X0, X1
	193 Move X0, [X19+136]
	194 Add W20, W20, 1
	195 Compare X0, 0
	196 JumpIfNotEqual {136}
	197 Call 0x1C17F20
	198 Move X20, [X31+80]
	199 Move X19, [X31+88]
	200 Move X22, [X31+64]
	201 Move X21, [X31+72]
	202 Move X24, [X31+48]
	203 Move X23, [X31+56]
	204 Move X30, [X31+32]
	205 Move X25, [X31+40]
	206 Move D9, [X31+16]
	207 Move D8, [X31+24]
	208 Move V10, [X31+96]
	209 Return 

Method: System.Void UpdateForce()

Disassembly:
	0x01D9BE64 BL 0x1C16DFC
	0x01D9BE68 MOV W0, W21
	0x01D9BE6C MOV X1, X31
	0x01D9BE70 BL 0x31AD670
	0x01D9BE74 LDR X0, [X19 + 0x98]
	0x01D9BE78 CBZ X0, 0x1D9BFD0
	0x01D9BE7C MOV X1, X31
	0x01D9BE80 BL 0x3C3F830
	0x01D9BE84 MOV X0, X31
	0x01D9BE88 BL 0x3C2A60C
	0x01D9BE8C ADRP X8, 0xFFFFFFFFFED4F000
	0x01D9BE90 LDR V3, [X8 + 0x448]
	0x01D9BE94 MOV X0, X31
	0x01D9BE98 FMUL S0, S0, S3
	0x01D9BE9C FMUL S1, S1, S3
	0x01D9BEA0 FMUL S2, S2, S3
	0x01D9BEA4 BL 0x3C2AB94
	0x01D9BEA8 MOVZ W8, 0xC3B40000
	0x01D9BEAC MOVZ W9, 0x43340000
	0x01D9BEB0 FMOV S1, W8
	0x01D9BEB4 FMOV S2, W9
	0x01D9BEB8 FADD S1, S0, S1
	0x01D9BEBC FCMP S0, S2
	0x01D9BEC0 MOV X0, X19
	0x01D9BEC4 FCSEL S8, S1, S0, GT
	0x01D9BEC8 BL 0x1D9B670
	0x01D9BECC MOVZ W8, 0xC2B40000
	0x01D9BED0 ANDS W31, W0, 0x1
	0x01D9BED4 FMOV S0, W31
	0x01D9BED8 FMOV S1, W8
	0x01D9BEDC FCSEL S9, S1, S0, NE
	0x01D9BEE0 STR S9, [X20 + 0x18]
	0x01D9BEE4 LDR X0, [X22]
	0x01D9BEE8 LDR W8, [X0 + 0xE0]
	0x01D9BEEC CBNZ W8, 0x1D9BEF4
	0x01D9BEF0 BL 0x1C16DFC
	0x01D9BEF4 ADRP X8, 0xFFFFFFFFFED4F000
	0x01D9BEF8 LDR V2, [X8 + 0x44C]
	0x01D9BEFC MOV V0.16B, V8.16B
	0x01D9BF00 MOV V1.16B, V9.16B
	0x01D9BF04 MOV X0, X31
	0x01D9BF08 BL 0x31B22EC
	0x01D9BF0C CBZ X0, 0x1D9BFD0
	0x01D9BF10 ADRP X21, 0x235A000
	0x01D9BF14 ADRP X22, 0x235C000
	0x01D9BF18 LDR X21, [X21 + 0x5B0]
	0x01D9BF1C LDR X22, [X22 + 0x60]
	0x01D9BF20 MOV X1, X31
	0x01D9BF24 BL 0x31C5C5C
	0x01D9BF28 LDR X8, [X21]
	0x01D9BF2C MOV X21, X0
	0x01D9BF30 MOV X0, X8
	0x01D9BF34 BL 0x1C16F10
	0x01D9BF38 LDR X2, [X22]
	0x01D9BF3C MOV X1, X20
	0x01D9BF40 MOV X3, X31
	0x01D9BF44 MOV X22, X0
	0x01D9BF48 BL 0x2A6DA40
	0x01D9BF4C CBZ X21, 0x1D9BFD0
	0x01D9BF50 ADRP X23, 0x2359000
	0x01D9BF54 ADRP X24, 0x235C000
	0x01D9BF58 LDR X23, [X23 + 0xE70]
	0x01D9BF5C LDR X24, [X24 + 0x68]
	0x01D9BF60 MOV X0, X21
	0x01D9BF64 MOV X1, X22
	0x01D9BF68 MOV X2, X31
	0x01D9BF6C BL 0x31C8070
	0x01D9BF70 LDR X8, [X23]
	0x01D9BF74 MOV X21, X0
	0x01D9BF78 MOV X0, X8
	0x01D9BF7C BL 0x1C16F10
	0x01D9BF80 LDR X2, [X24]
	0x01D9BF84 MOV X1, X20
	0x01D9BF88 MOV X3, X31
	0x01D9BF8C MOV X22, X0
	0x01D9BF90 BL 0x3314368
	0x01D9BF94 CBZ X21, 0x1D9BFD0
	0x01D9BF98 MOV X0, X21
	0x01D9BF9C MOV X1, X22
	0x01D9BFA0 MOV X2, X31
	0x01D9BFA4 BL 0x31C7FD8
	0x01D9BFA8 CBZ X0, 0x1D9BFD0
	0x01D9BFAC MOV X1, X31
	0x01D9BFB0 BL 0x31BFBD4
	0x01D9BFB4 STR W0, [X19 + 0xBC]
	0x01D9BFB8 LDP X20, X19, [X31 + 0x40]
	0x01D9BFBC LDP X22, X21, [X31 + 0x30]
	0x01D9BFC0 LDP X24, X23, [X31 + 0x20]
	0x01D9BFC4 LDR X30, [X31 + 0x10]
	0x01D9BFC8 LDP D9, D8, [X31], #0x50
	0x01D9BFCC RET
	0x01D9BFD0 BL 0x1C16F20
	0x01D9BFD4 STP X30, X21, [X31 - 0x20]!
	0x01D9BFD8 STP X20, X19, [X31 + 0x10]
	0x01D9BFDC ADRP X20, 0x263D000
	0x01D9BFE0 LDRB W8, [X20 + 0xA44]
	0x01D9BFE4 MOV X19, X0
	0x01D9BFE8 TBNZ X8, 0x0, 0x1D9C00C
	0x01D9BFEC ADRP X0, 0x2358000
	0x01D9BFF0 LDR X0, [X0 + 0x598]
	0x01D9BFF4 BL 0x1C16CF4
	0x01D9BFF8 ADRP X0, 0x235A000
	0x01D9BFFC LDR X0, [X0 + 0x7C8]
	0x01D9C000 BL 0x1C16CF4
	0x01D9C004 MOVZ W8, 0x1
	0x01D9C008 STRB W8, [X20 + 0xA44]
	0x01D9C00C LDR X8, [X19 + 0x80]
	0x01D9C010 CBZ X8, 0x1D9C100
	0x01D9C014 ADRP X9, 0x2357000
	0x01D9C018 LDR X9, [X9 + 0x598]
	0x01D9C01C LDR X20, [X8 + 0x150]
	0x01D9C020 LDR X0, [X9]
	0x01D9C024 LDR W9, [X0 + 0xE0]
	0x01D9C028 CBNZ W9, 0x1D9C030
	0x01D9C02C BL 0x1C16DFC
	0x01D9C030 MOV X0, X20
	0x01D9C034 MOV X1, X31
	0x01D9C038 MOV X2, X31
	0x01D9C03C BL 0x3C354F8
	0x01D9C040 TBZ X0, 0x0, 0x1D9C0F4
	0x01D9C044 LDR X8, [X19 + 0x80]
	0x01D9C048 CBZ X8, 0x1D9C100
	0x01D9C04C LDR X8, [X8 + 0x150]
	0x01D9C050 CBZ X8, 0x1D9C100
	0x01D9C054 LDR W9, [X8 + 0x80]
	0x01D9C058 CMP W9, 0x2
	0x01D9C05C B.NE 0x1D9C0F4
	0x01D9C060 LDR X0, [X8 + 0x40]
	0x01D9C064 CBZ X0, 0x1D9C0F4
	0x01D9C068 LDRB W8, [X0 + 0x60]
	0x01D9C06C TBNZ X8, 0x1, 0x1D9C0F4
	0x01D9C070 MOV X1, X31
	0x01D9C074 BL 0x1E93588
	0x01D9C078 TBZ X0, 0x0, 0x1D9C0F4
	0x01D9C07C ADRP X20, 0x2359000
	0x01D9C080 LDR X20, [X20 + 0x7C8]
	0x01D9C084 LDR X0, [X20]
	0x01D9C088 LDR W8, [X0 + 0xE0]
	0x01D9C08C CBNZ W8, 0x1D9C094
	0x01D9C090 BL 0x1C16DFC
	0x01D9C094 ADRP X21, 0x263C000
	0x01D9C098 LDRB W8, [X21 + 0x85D]
	0x01D9C09C CBNZ W8, 0x1D9C0B4
	0x01D9C0A0 ADRP X0, 0x2359000
	0x01D9C0A4 LDR X0, [X0 + 0x7C8]
	0x01D9C0A8 BL 0x1C16CF4
	0x01D9C0AC MOVZ W8, 0x1
	0x01D9C0B0 STRB W8, [X21 + 0x85D]
	0x01D9C0B4 LDR X0, [X20]
	0x01D9C0B8 LDR W8, [X0 + 0xE0]
	0x01D9C0BC CBNZ W8, 0x1D9C0C8
	0x01D9C0C0 BL 0x1C16DFC
	0x01D9C0C4 LDR X0, [X20]
	0x01D9C0C8 LDR X8, [X0 + 0xB8]
	0x01D9C0CC MOV X0, X19
	0x01D9C0D0 LDR X20, [X8]
	0x01D9C0D4 BL 0x1D9BAA0
	0x01D9C0D8 CBZ X20, 0x1D9C100
	0x01D9C0DC MOV X0, X20
	0x01D9C0E0 LDP X20, X19, [X31 + 0x10]
	0x01D9C0E4 MOVZ W1, 0x1
	0x01D9C0E8 MOV X2, X31
	0x01D9C0EC LDP X30, X21, [X31], #0x20
	0x01D9C0F0 B 0x1DC2C54
	0x01D9C0F4 LDP X20, X19, [X31 + 0x10]
	0x01D9C0F8 LDP X30, X21, [X31], #0x20
	0x01D9C0FC RET
	0x01D9C100 BL 0x1C16F20
	0x01D9C104 MOV X1, X31
	0x01D9C108 B 0x33BDD8C
	0x01D9C10C STP X30, X19, [X31 - 0x10]!
	0x01D9C110 MOV X1, X31
	0x01D9C114 MOV X19, X0
	0x01D9C118 BL 0x1E73F88
	0x01D9C11C MOV X0, X19
	0x01D9C120 BL 0x1D9BD68
	0x01D9C124 LDR X0, [X19 + 0x40]
	0x01D9C128 CBZ X0, 0x1D9C160
	0x01D9C12C LDRB W8, [X0 + 0x60]
	0x01D9C130 TBNZ X8, 0x1, 0x1D9C160
	0x01D9C134 MOV X1, X31
	0x01D9C138 BL 0x1E93668
	0x01D9C13C TBZ X0, 0x0, 0x1D9C160
	0x01D9C140 LDR X8, [X19 + 0x80]
	0x01D9C144 CBZ X8, 0x1D9C168
	0x01D9C148 LDR X0, [X8 + 0x168]
	0x01D9C14C CBZ X0, 0x1D9C168
	0x01D9C150 FMOV S0, 5
	0x01D9C154 MOV X1, X31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x263E000
	009 Move W8, [X20+2620]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x2359000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move X0, 0x235B000
	019 Move X0, [X0+1992]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2620], W8
	023 Move X0, [X19+192]
	024 Compare X0, 0
	025 JumpIfEqual {261}
	026 Move X1, X31
	027 Call GrabbableItem.get_netObjectExists, X0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {253}
	032 Move X0, X19
	033 Call Hoverpad.get_isOn, X0
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {253}
	038 Move X0, [X19+192]
	039 Compare X0, 0
	040 JumpIfEqual {261}
	041 Move X1, X31
	042 Call GrabbableItem.get_isVisible, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {253}
	047 Move X20, [X19+192]
	048 Compare X20, 0
	049 JumpIfEqual {261}
	050 Move X22, 0x2359000
	051 Move X22, [X22+1432]
	052 Move X21, [X20+336]
	053 Move X0, [X22]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, X21
	059 Move X1, X31
	060 Move X2, X31
	061 Call Object.op_Inequality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {253}
	066 Move X8, [X19+192]
	067 Compare X8, 0
	068 JumpIfEqual {261}
	069 Move X8, [X8+336]
	070 Compare X8, 0
	071 JumpIfEqual {261}
	072 Move W9, [X8+128]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X0, [X22]
	075 Move X21, [X8+200]
	076 Move W9, [X0+224]
	077 Compare W9, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X0, X21
	081 Move X1, X31
	082 Move X2, X31
	083 Call Object.op_Inequality, X0, X1
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {120}
	088 Move X8, [X19+192]
	089 Compare X8, 0
	090 JumpIfEqual {261}
	091 Move X8, [X8+336]
	092 Compare X8, 0
	093 JumpIfEqual {261}
	094 Move X8, [X8+200]
	095 Compare X8, 0
	096 JumpIfEqual {261}
	097 Move X0, [X22]
	098 Move X21, [X8+336]
	099 Move W9, [X0+224]
	100 Compare W9, 0
	101 JumpIfNotEqual {103}
	102 Call 0x1C17DFC
	103 Move X0, X21
	104 Move X1, X31
	105 Move X2, X31
	106 Call Object.op_Inequality, X0, X1
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {120}
	111 Move X8, [X19+192]
	112 Compare X8, 0
	113 JumpIfEqual {261}
	114 Move X8, [X8+336]
	115 Compare X8, 0
	116 JumpIfEqual {261}
	117 Move X20, [X8+200]
	118 Compare X20, 0
	119 JumpIfEqual {261}
	120 Move X8, [X20+336]
	121 Compare X8, 0
	122 JumpIfEqual {261}
	123 Move X0, [X8+64]
	124 Compare X0, 0
	125 JumpIfEqual {253}
	126 Move W8, [X0+96]
	127 Move TEMP, X8
	128 And TEMP, TEMP, 2
	129 Compare TEMP, 2
	130 JumpIfEqual {253}
	131 Move X1, X31
	132 Call NetworkObject.get_HasStateAuthority, X0
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {253}
	137 Move X23, 0x235B000
	138 Move X23, [X23+1992]
	139 Move X0, [X23]
	140 Move W8, [X0+224]
	141 Compare W8, 0
	142 JumpIfNotEqual {144}
	143 Call 0x1C17DFC
	144 Move X24, 0x263E000
	145 Move W8, [X24+2141]
	146 Compare W8, 0
	147 JumpIfNotEqual {153}
	148 Move X0, 0x235B000
	149 Move X0, [X0+1992]
	150 Call 0x1C17CF4
	151 Move W8, 1
	152 Move [X24+2141], W8
	153 Move X0, [X23]
	154 Move W8, [X0+224]
	155 Compare W8, 0
	156 JumpIfNotEqual {159}
	157 Call 0x1C17DFC
	158 Move X0, [X23]
	159 Move X8, [X22]
	160 Move X9, [X0+184]
	161 Move W10, [X8+224]
	162 Move X21, [X9]
	163 Compare W10, 0
	164 JumpIfNotEqual {167}
	165 Move X0, X8
	166 Call 0x1C17DFC
	167 Move X0, X21
	168 Move X1, X31
	169 Move X2, X31
	170 Call Object.op_Inequality, X0, X1
	171 Move TEMP, X0
	172 And TEMP, TEMP, 1
	173 Compare TEMP, 1
	174 JumpIfNotEqual {253}
	175 Move X0, [X23]
	176 Move W8, [X0+224]
	177 Compare W8, 0
	178 JumpIfNotEqual {180}
	179 Call 0x1C17DFC
	180 Move W8, [X24+2141]
	181 Compare W8, 0
	182 JumpIfNotEqual {188}
	183 Move X0, 0x235A000
	184 Move X0, [X0+1992]
	185 Call 0x1C17CF4
	186 Move W8, 1
	187 Move [X24+2141], W8
	188 Move X0, [X23]
	189 Move W8, [X0+224]
	190 Compare W8, 0
	191 JumpIfNotEqual {194}
	192 Call 0x1C17DFC
	193 Move X0, [X23]
	194 Move X8, [X0+184]
	195 Move X8, [X8]
	196 Compare X8, 0
	197 JumpIfEqual {261}
	198 Move X0, [X22]
	199 Move X21, [X8+48]
	200 Move W9, [X0+224]
	201 Compare W9, 0
	202 JumpIfNotEqual {204}
	203 Call 0x1C17DFC
	204 Move X0, X21
	205 Move X1, X31
	206 Move X2, X31
	207 Call Object.op_Inequality, X0, X1
	208 Move TEMP, X0
	209 And TEMP, TEMP, 1
	210 Compare TEMP, 1
	211 JumpIfNotEqual {253}
	212 Move X0, [X23]
	213 Move W8, [X0+224]
	214 Compare W8, 0
	215 JumpIfNotEqual {217}
	216 Call 0x1C17DFC
	217 Move W8, [X24+2141]
	218 Compare W8, 0
	219 JumpIfNotEqual {225}
	220 Move X0, 0x235A000
	221 Move X0, [X0+1992]
	222 Call 0x1C17CF4
	223 Move W8, 1
	224 Move [X24+2141], W8
	225 Move X0, [X23]
	226 Move W8, [X0+224]
	227 Compare W8, 0
	228 JumpIfNotEqual {231}
	229 Call 0x1C17DFC
	230 Move X0, [X23]
	231 Move X8, [X0+184]
	232 Move X8, [X8]
	233 Compare X8, 0
	234 JumpIfEqual {261}
	235 Move X0, [X8+48]
	236 Compare X0, 0
	237 JumpIfEqual {261}
	238 Move X1, X31
	239 Call Rigidbody.get_velocity, X0
	240 Move X0, X19
	241 Call Hoverpad.CalculateForce, X0, X1
	242 Move X0, X20
	243 Move X20, [X31+48]
	244 Move X19, [X31+56]
	245 Move X22, [X31+32]
	246 Move X21, [X31+40]
	247 Move X24, [X31+16]
	248 Move X23, [X31+24]
	249 Move X1, X31
	250 Move X30, [X31+64]
	251 Call GrabbableItem.AddExternalForce, X0, X1
	252 Return 
	253 Move X20, [X31+48]
	254 Move X19, [X31+56]
	255 Move X22, [X31+32]
	256 Move X21, [X31+40]
	257 Move X24, [X31+16]
	258 Move X23, [X31+24]
	259 Move X30, [X31+64]
	260 Return 
	261 Call 0x1C17F20

Method: UnityEngine.Vector3 CalculateForce(UnityEngine.Vector3 playerVelocity)

Disassembly:
	0x01D9C158 LDP X30, X19, [X31], #0x10
	0x01D9C15C B 0x3C8EC24
	0x01D9C160 LDP X30, X19, [X31], #0x10
	0x01D9C164 RET
	0x01D9C168 BL 0x1C16F20
	0x01D9C16C STR X30, [X31 - 0x20]!
	0x01D9C170 STP X20, X19, [X31 + 0x10]
	0x01D9C174 AND W2, W2, 0x1
	0x01D9C178 MOV X3, X31
	0x01D9C17C MOV X20, X1
	0x01D9C180 MOV X19, X0
	0x01D9C184 BL 0x1E73F8C
	0x01D9C188 CBZ X20, 0x1D9C1B8
	0x01D9C18C MOV X0, X20
	0x01D9C190 MOV X1, X31
	0x01D9C194 BL 0x1E9E7E0
	0x01D9C198 TBZ X0, 0x0, 0x1D9C1A8
	0x01D9C19C LDP X20, X19, [X31 + 0x10]
	0x01D9C1A0 LDR X30, [X31], #0x20
	0x01D9C1A4 RET
	0x01D9C1A8 MOV X0, X19
	0x01D9C1AC LDP X20, X19, [X31 + 0x10]
	0x01D9C1B0 LDR X30, [X31], #0x20
	0x01D9C1B4 B 0x1D9C1BC
	0x01D9C1B8 BL 0x1C16F20
	0x01D9C1BC SUB X31, X31, 0xB0
	0x01D9C1C0 STR X30, [X31 + 0x60]
	0x01D9C1C4 STP X26, X25, [X31 + 0x70]
	0x01D9C1C8 STP X24, X23, [X31 + 0x80]
	0x01D9C1CC STP X22, X21, [X31 + 0x90]
	0x01D9C1D0 STP X20, X19, [X31 + 0xA0]
	0x01D9C1D4 ADRP X20, 0x263C000
	0x01D9C1D8 LDRB W8, [X20 + 0xA49]
	0x01D9C1DC MOV X19, X0
	0x01D9C1E0 TBNZ X8, 0x0, 0x1D9C234
	0x01D9C1E4 ADRP X0, 0x235A000
	0x01D9C1E8 LDR X0, [X0 + 0xBB8]
	0x01D9C1EC BL 0x1C16CF4
	0x01D9C1F0 ADRP X0, 0x235B000
	0x01D9C1F4 LDR X0, [X0 + 0x70]
	0x01D9C1F8 BL 0x1C16CF4
	0x01D9C1FC ADRP X0, 0x235B000
	0x01D9C200 LDR X0, [X0 + 0x40]
	0x01D9C204 BL 0x1C16CF4
	0x01D9C208 ADRP X0, 0x235B000
	0x01D9C20C LDR X0, [X0 + 0x48]
	0x01D9C210 BL 0x1C16CF4
	0x01D9C214 ADRP X0, 0x235A000
	0x01D9C218 LDR X0, [X0 + 0x398]
	0x01D9C21C BL 0x1C16CF4
	0x01D9C220 ADRP X0, 0x2357000
	0x01D9C224 LDR X0, [X0 + 0x598]
	0x01D9C228 BL 0x1C16CF4
	0x01D9C22C MOVZ W8, 0x1
	0x01D9C230 STRB W8, [X20 + 0xA49]
	0x01D9C234 ADD X8, X31, 0x8
	0x01D9C238 MOV X0, X19
	0x01D9C23C STP X31, X31, [X31 + 0x40]
	0x01D9C240 STR X31, [X31 + 0x50]
	0x01D9C244 BL 0x1D9B73C
	0x01D9C248 LDUR V0, [X31 + 0x8]
	0x01D9C24C LDR X9, [X31 + 0x18]
	0x01D9C250 STR V0, [X31 + 0x4]
	0x01D9C254 LDR W8, [X31 + 0x48]
	0x01D9C258 STR V0, [X31 + 0x2]
	0x01D9C25C STR X9, [X31 + 0x50]
	0x01D9C260 CMP W8, 0x1
	0x01D9C264 B.LT 0x1D9C3D0
	0x01D9C268 ADRP X22, 0x235B000
	0x01D9C26C ADRP X23, 0x235A000
	0x01D9C270 ADRP X24, 0x235B000
	0x01D9C274 ADRP X25, 0x2357000
	0x01D9C278 ADRP X26, 0x235A000
	0x01D9C27C LDR X22, [X22 + 0x40]
	0x01D9C280 LDR X23, [X23 + 0x398]
	0x01D9C284 LDR X24, [X24 + 0x70]
	0x01D9C288 LDR X25, [X25 + 0x598]
	0x01D9C28C LDR X26, [X26 + 0xBB8]
	0x01D9C290 MOV W20, W31
	0x01D9C294 ADD X8, X31, 0x20
	0x01D9C298 MOV X0, X19
	0x01D9C29C BL 0x1D9B73C
	0x01D9C2A0 LDR V0, [X31 + 0x2]
	0x01D9C2A4 LDR X8, [X31 + 0x30]
	0x01D9C2A8 LDR X2, [X22]
	0x01D9C2AC ADD X0, X31, 0x40
	0x01D9C2B0 MOV W1, W20
	0x01D9C2B4 STR V0, [X31 + 0x4]
	0x01D9C2B8 STR X8, [X31 + 0x50]
	0x01D9C2BC BL 0x240C008
	0x01D9C2C0 LDR X8, [X23]
	0x01D9C2C4 MOV X21, X0
	0x01D9C2C8 LDR W9, [X8 + 0xE0]
	0x01D9C2CC CBZ W9, 0x1D9C2D8
	0x01D9C2D0 CBNZ W21, 0x1D9C2E4
	0x01D9C2D4 B 0x1D9C3A0
	0x01D9C2D8 MOV X0, X8
	0x01D9C2DC BL 0x1C16DFC
	0x01D9C2E0 CBZ W21, 0x1D9C3A0
	0x01D9C2E4 ADD X8, X31, 0x20
	0x01D9C2E8 MOV X0, X19
	0x01D9C2EC BL 0x1D9B73C
	0x01D9C2F0 LDR V0, [X31 + 0x2]
	0x01D9C2F4 LDR X8, [X31 + 0x30]
	0x01D9C2F8 LDR X2, [X24]
	0x01D9C2FC ADD X0, X31, 0x40
	0x01D9C300 MOV W1, W20
	0x01D9C304 STR V0, [X31 + 0x4]
	0x01D9C308 STR X8, [X31 + 0x50]
	0x01D9C30C BL 0x240C380
	0x01D9C310 LDR X8, [X19 + 0x38]
	0x01D9C314 CBZ X8, 0x1D9C3EC
	0x01D9C318 AND X1, X0, 0x0
	0x01D9C31C MOV X0, X8
	0x01D9C320 MOV X2, X31
	0x01D9C324 BL 0x1EA3204
	0x01D9C328 LDR X8, [X25]
	0x01D9C32C MOV X21, X0
	0x01D9C330 LDR W9, [X8 + 0xE0]
	0x01D9C334 CBNZ W9, 0x1D9C340
	0x01D9C338 MOV X0, X8
	0x01D9C33C BL 0x1C16DFC
	0x01D9C340 MOV X0, X21
	0x01D9C344 MOV X1, X31
	0x01D9C348 MOV X2, X31
	0x01D9C34C BL 0x3C354F8
	0x01D9C350 TBZ X0, 0x0, 0x1D9C3A0
	0x01D9C354 CBZ X21, 0x1D9C3EC
	0x01D9C358 LDR X1, [X26]
	0x01D9C35C MOV X0, X21
	0x01D9C360 BL 0x21A3894
	0x01D9C364 LDR X8, [X25]
	0x01D9C368 MOV X21, X0
	0x01D9C36C LDR W9, [X8 + 0xE0]
	0x01D9C370 CBNZ W9, 0x1D9C37C
	0x01D9C374 MOV X0, X8
	0x01D9C378 BL 0x1C16DFC
	0x01D9C37C MOV X0, X21
	0x01D9C380 MOV X1, X31
	0x01D9C384 MOV X2, X31
	0x01D9C388 BL 0x3C354F8
	0x01D9C38C TBZ X0, 0x0, 0x1D9C3A0
	0x01D9C390 CBZ X21, 0x1D9C3EC
	0x01D9C394 MOV X0, X21
	0x01D9C398 MOV X1, X31
	0x01D9C39C BL 0x1D947A0
	0x01D9C3A0 ADD X8, X31, 0x8
	0x01D9C3A4 MOV X0, X19
	0x01D9C3A8 ADD W20, W20, 0x1
	0x01D9C3AC BL 0x1D9B73C
	0x01D9C3B0 LDUR V0, [X31 + 0x8]
	0x01D9C3B4 LDR X9, [X31 + 0x18]
	0x01D9C3B8 STR V0, [X31 + 0x4]
	0x01D9C3BC LDR W8, [X31 + 0x48]
	0x01D9C3C0 STR V0, [X31 + 0x2]
	0x01D9C3C4 STR X9, [X31 + 0x50]
	0x01D9C3C8 CMP W20, W8
	0x01D9C3CC B.LT 0x1D9C294
	0x01D9C3D0 LDP X20, X19, [X31 + 0xA0]
	0x01D9C3D4 LDP X22, X21, [X31 + 0x90]
	0x01D9C3D8 LDP X24, X23, [X31 + 0x80]
	0x01D9C3DC LDP X26, X25, [X31 + 0x70]
	0x01D9C3E0 LDR X30, [X31 + 0x60]
	0x01D9C3E4 ADD X31, X31, 0xB0
	0x01D9C3E8 RET
	0x01D9C3EC BL 0x1C16F20
	0x01D9C3F0 SUB X31, X31, 0x70
	0x01D9C3F4 STR D10, [X31 + 0x40]
	0x01D9C3F8 STP D9, D8, [X31 + 0x48]
	0x01D9C3FC STR X30, [X31 + 0x58]
	0x01D9C400 STP X20, X19, [X31 + 0x60]
	0x01D9C404 ADRP X20, 0x263C000
	0x01D9C408 LDRB W8, [X20 + 0xA46]
	0x01D9C40C MOV X19, X0
	0x01D9C410 TBNZ X8, 0x0, 0x1D9C434
	0x01D9C414 ADRP X0, 0x235B000
	0x01D9C418 LDR X0, [X0 + 0x40]
	0x01D9C41C BL 0x1C16CF4
	0x01D9C420 ADRP X0, 0x235A000
	0x01D9C424 LDR X0, [X0 + 0x398]
	0x01D9C428 BL 0x1C16CF4
	0x01D9C42C MOVZ W8, 0x1
	0x01D9C430 STRB W8, [X20 + 0xA46]
	0x01D9C434 MOV X0, X19
	0x01D9C438 MOV X1, X31
	0x01D9C43C STP X31, X31, [X31 + 0x20]
	0x01D9C440 STR X31, [X31 + 0x30]
	0x01D9C444 STR W31, [X31 + 0x18]
	0x01D9C448 BL 0x1E73D04
	0x01D9C44C LDR X0, [X19 + 0x40]
	0x01D9C450 CBZ X0, 0x1D9C5D0
	0x01D9C454 LDRB W8, [X0 + 0x60]
	0x01D9C458 TBNZ X8, 0x1, 0x1D9C5D0
	0x01D9C45C MOV X1, X31
	0x01D9C460 BL 0x1E93668
	0x01D9C464 TBZ X0, 0x0, 0x1D9C5D0
	0x01D9C468 MOV X0, X19
	0x01D9C46C BL 0x1D9B670
	0x01D9C470 TBZ X0, 0x0, 0x1D9C5D0
	0x01D9C474 LDR X0, [X19 + 0x90]
	0x01D9C478 CBZ X0, 0x1D9C5E8
	0x01D9C47C MOV X1, X31
	0x01D9C480 BL 0x3C3F988
	0x01D9C484 ADRP X20, 0x263C000
	0x01D9C488 LDRB W8, [X20 + 0x786]
	0x01D9C48C MOV V8.16B, V0.16B
	0x01D9C490 MOV V9.16B, V1.16B
	0x01D9C494 MOV V10.16B, V2.16B
	0x01D9C498 CBNZ W8, 0x1D9C4B0
	0x01D9C49C ADRP X0, 0x2357000
	0x01D9C4A0 LDR X0, [X0 + 0x5A0]
	0x01D9C4A4 BL 0x1C16CF4
	0x01D9C4A8 MOVZ W8, 0x1
	0x01D9C4AC STRB W8, [X20 + 0x786]
	0x01D9C4B0 ADRP X8, 0x2357000
	0x01D9C4B4 LDR X8, [X8 + 0x5A0]
	0x01D9C4B8 ADRP X9, 0xFFFFFFFFFED4E000
	0x01D9C4BC LDR V2, [X9 + 0xBC]
	0x01D9C4C0 LDR X8, [X8]
	0x01D9C4C4 LDR X8, [X8 + 0xB8]
	0x01D9C4C8 LDP S0, S1, [X8 + 0x18]
	0x01D9C4CC LDR V3, [X8 + 0x20]
	0x01D9C4D0 FMUL S0, S8, S0
	0x01D9C4D4 FMUL S1, S9, S1
	0x01D9C4D8 FADD S0, S0, S1
	0x01D9C4DC FMUL S1, S10, S3
	0x01D9C4E0 FADD S0, S1, S0
	0x01D9C4E4 FCMP S0, S2
	0x01D9C4E8 B.LE 0x1D9C50C
	0x01D9C4EC MOV X0, X19
	0x01D9C4F0 BL 0x1D9C5EC
	0x01D9C4F4 MOV X0, X31
	0x01D9C4F8 BL 0x1E91B08
	0x01D9C4FC AND X1, X0, 0x0
	0x01D9C500 MOV X0, X19
	0x01D9C504 BL 0x1D9B854
	0x01D9C508 B 0x1D9C5D0
	0x01D9C50C ADRP X8, 0xFFFFFFFFFED4E000
	0x01D9C510 LDR V1, [X8 + 0x360]
	0x01D9C514 FCMP S0, S1
	0x01D9C518 B.PL 0x1D9C5D0
	0x01D9C51C ADD X8, X31, 0x0
	0x01D9C520 MOV X0, X19
	0x01D9C524 BL 0x1D9B73C
	0x01D9C528 ADRP X9, 0x235B000
	0x01D9C52C LDR V0, [X31]
	0x01D9C530 LDR X8, [X31 + 0x10]
	0x01D9C534 LDR X9, [X9 + 0x40]
	0x01D9C538 ADD X0, X31, 0x20
	0x01D9C53C MOV W1, W31
	0x01D9C540 STR V0, [X31 + 0x2]
	0x01D9C544 LDR X2, [X9]
	0x01D9C548 STR X8, [X31 + 0x30]
	0x01D9C54C BL 0x240C008
	0x01D9C550 ADRP X8, 0x235A000
	0x01D9C554 LDR X8, [X8 + 0x398]
	0x01D9C558 MOV X20, X0
	0x01D9C55C LDR X8, [X8]
	0x01D9C560 LDR W9, [X8 + 0xE0]
	0x01D9C564 CBNZ W9, 0x1D9C570
	0x01D9C568 MOV X0, X8
	0x01D9C56C BL 0x1C16DFC
	0x01D9C570 CBZ W20, 0x1D9C5D0
	0x01D9C574 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+96], D15
	003 Move [X31+104], D14
	004 Move [X31+112], D13
	005 Move [X31+120], D12
	006 Move [X31+128], D11
	007 Move [X31+136], D10
	008 Move [X31+144], D9
	009 Move [X31+152], D8
	010 Move [X31+160], X30
	011 Move [X31+176], X22
	012 Move [X31+184], X21
	013 Move [X31+192], X20
	014 Move [X31+200], X19
	015 Move X21, 0x263D000
	016 Move X20, 0x235A000
	017 Move W8, [X21+2621]
	018 Move X20, [X20+1992]
	019 Move V12, V2
	020 Move V13, V1
	021 Move V14, V0
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {38}
	027 Move X0, 0x2358000
	028 Move X0, [X0+1496]
	029 Call 0x1C17CF4
	030 Move X0, 0x2358000
	031 Move X0, [X0+1528]
	032 Call 0x1C17CF4
	033 Move X0, 0x235A000
	034 Move X0, [X0+1992]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+2621], W8
	038 Move X0, [X20]
	039 NotImplemented "Instruction MOVI not yet implemented."
	040 Move [X31+76], V0
	041 Move [X31+48], V0
	042 Move [X31+56], V0
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X21, 0x263D000
	048 Move W8, [X21+2141]
	049 Compare W8, 0
	050 JumpIfNotEqual {56}
	051 Move X0, 0x235A000
	052 Move X0, [X0+1992]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X21+2141], W8
	056 Move X0, [X20]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {62}
	060 Call 0x1C17DFC
	061 Move X0, [X20]
	062 Move X8, [X0+184]
	063 Move X0, [X8]
	064 Compare X0, 0
	065 JumpIfEqual {303}
	066 Move X1, X31
	067 Call PlayerController.get_playerGravity, X0
	068 Move X0, [X19+128]
	069 Compare X0, 0
	070 JumpIfEqual {303}
	071 Move X1, X31
	072 Move V10, V1
	073 Call Transform.get_forward, X0
	074 Move X0, X31
	075 Move V15, V0
	076 Move V8, V1
	077 Move V9, V2
	078 Call Time.get_fixedDeltaTime
	079 Move X0, [X19+128]
	080 Compare X0, 0
	081 JumpIfEqual {303}
	082 Move X1, X31
	083 Move V11, V0
	084 Move [X31+8], S14
	085 Move [X31+16], S13
	086 Move [X31+16], S12
	087 Call Transform.get_position, X0
	088 Move X0, [X19+128]
	089 Move [X31+168], S1
	090 Move [X31+176], S0
	091 Move [X31+20], S2
	092 Compare X0, 0
	093 JumpIfEqual {303}
	094 Move X1, X31
	095 Call Transform.get_forward, X0
	096 Move X21, 0x263D000
	097 Move W8, [X21+1925]
	098 Move V12, V0
	099 Move V13, V1
	100 Move V14, V2
	101 Compare W8, 0
	102 JumpIfNotEqual {108}
	103 Move X0, 0x2358000
	104 Move X0, [X0+1448]
	105 Call 0x1C17CF4
	106 Move W8, 1
	107 Move [X21+1925], W8
	108 Move X20, 0x2358000
	109 Move X20, [X20+1448]
	110 Move X0, [X20]
	111 Move W8, [X0+224]
	112 Compare W8, 0
	113 JumpIfNotEqual {115}
	114 Call 0x1C17DFC
	115 Move X8, -19599360
	116 Move V2, [X8+380]
	117 Multiply S0, S12, S12
	118 Multiply S1, S13, S13
	119 Move X19, 0x2358000
	120 Move [X31], S2
	121 Add S0, S0, S1
	122 Multiply S1, S14, S14
	123 Move X19, [X19+1496]
	124 Add S0, S1, S0
	125 NotImplemented "Instruction FSQRT not yet implemented."
	126 NotImplemented "Instruction FABS not yet implemented."
	127 Move S3, 2
	128 NotImplemented "Instruction FCMP not yet implemented."
	129 NotImplemented "Instruction FDIV not yet implemented."
	130 Move [X31+4], S1
	131 NotImplemented "Instruction FDIV not yet implemented."
	132 NotImplemented "Instruction FDIV not yet implemented."
	133 Move X22, 0x263D000
	134 Move W8, [X22+1923]
	135 Compare W8, 0
	136 JumpIfNotEqual {143}
	137 Move X0, 0x2358000
	138 Move X0, [X0+1440]
	139 Call 0x1C17CF4
	140 Move S3, 2
	141 Move W8, 1
	142 Move [X22+1923], W8
	143 Move X8, 0x2358000
	144 Move X8, [X8+1440]
	145 Move X8, [X8]
	146 Move X8, [X8+184]
	147 Move S0, [X8]
	148 Move S13, [X8+4]
	149 Move V14, [X8+8]
	150 Move [X31+4], S0
	151 Move X0, [X19]
	152 Move X22, 0x2358000
	153 Add S10, S10, S3
	154 NotImplemented "Instruction FNEG not yet implemented."
	155 Move W8, [X0+224]
	156 Move X22, [X22+1528]
	157 NotImplemented "Instruction FNEG not yet implemented."
	158 NotImplemented "Instruction FNEG not yet implemented."
	159 Compare W8, 0
	160 JumpIfNotEqual {163}
	161 Call 0x1C17DFC
	162 Move X0, [X19]
	163 Move X8, [X0+184]
	164 Move X1, X31
	165 Multiply S12, S10, S15
	166 Multiply S15, S10, S8
	167 Move W0, [X8+64]
	168 Multiply S10, S10, S9
	169 Call LayerMask.op_Implicit, X0
	170 Move X8, [X22]
	171 Move W19, W0
	172 Move W9, [X8+224]
	173 Compare W9, 0
	174 JumpIfNotEqual {177}
	175 Move X0, X8
	176 Call 0x1C17DFC
	177 Move V1, [X31+172]
	178 Move V0, [X31+168]
	179 Add X0, X31, 24
	180 Add X1, X31, 48
	181 Move W3, 1
	182 Move [X31+24], S1
	183 Move [X31+32], S0
	184 Move V1, [X31+20]
	185 Move V0, [X31+4]
	186 Move W2, W19
	187 Move X4, X31
	188 Multiply S8, S11, S12
	189 Move [X31+32], S1
	190 Move [X31+40], S0
	191 Move S0, 1
	192 Multiply S9, S11, S15
	193 Multiply S11, S11, S10
	194 Move [X31+40], S13
	195 Move [X31+48], S14
	196 Move S10, 1
	197 Call Physics.Raycast, X0, X1, V0, X2, X3
	198 Move TEMP, X0
	199 And TEMP, TEMP, 1
	200 Compare TEMP, 1
	201 JumpIfNotEqual {210}
	202 Add X0, X31, 48
	203 Move X1, X31
	204 Call RaycastHit.get_distance, X0
	205 Subtract S0, S10, S0
	206 Add S0, S0, S10
	207 Multiply S8, S8, S0
	208 Multiply S9, S9, S0
	209 Multiply S11, S11, S0
	210 Move S1, [X31+12]
	211 Move S0, [X31+16]
	212 Move V2, [X31+8]
	213 Move X0, X31
	214 NotImplemented "Instruction FNEG not yet implemented."
	215 NotImplemented "Instruction FNEG not yet implemented."
	216 NotImplemented "Instruction FNEG not yet implemented."
	217 Call Time.get_fixedDeltaTime
	218 Multiply S13, S0, S10
	219 Multiply S14, S0, S12
	220 Multiply S15, S0, S15
	221 Multiply S0, S8, S8
	222 Multiply S1, S9, S9
	223 Multiply S3, S13, S13
	224 Multiply S4, S14, S14
	225 Multiply S2, S11, S11
	226 Multiply S5, S15, S15
	227 Add S0, S0, S1
	228 Add S1, S3, S4
	229 Add S10, S5, S1
	230 Add S12, S0, S2
	231 NotImplemented "Instruction FCMP not yet implemented."
	232 Move W8, [X21+1925]
	233 Compare W8, 0
	234 JumpIfNotEqual {240}
	235 Move X0, 0x2358000
	236 Move X0, [X0+1448]
	237 Call 0x1C17CF4
	238 Move W8, 1
	239 Move [X21+1925], W8
	240 Move X0, [X20]
	241 Move W8, [X0+224]
	242 Compare W8, 0
	243 JumpIfNotEqual {245}
	244 Call 0x1C17DFC
	245 Move V1, [X31]
	246 NotImplemented "Instruction FSQRT not yet implemented."
	247 NotImplemented "Instruction FCMP not yet implemented."
	248 NotImplemented "Instruction FDIV not yet implemented."
	249 NotImplemented "Instruction FDIV not yet implemented."
	250 NotImplemented "Instruction FDIV not yet implemented."
	251 Move X19, 0x263D000
	252 Move W8, [X19+1923]
	253 Compare W8, 0
	254 JumpIfNotEqual {260}
	255 Move X0, 0x2358000
	256 Move X0, [X0+1440]
	257 Call 0x1C17CF4
	258 Move W8, 1
	259 Move [X19+1923], W8
	260 Move X8, 0x2358000
	261 Move X8, [X8+1440]
	262 Move X8, [X8]
	263 Move X8, [X8+184]
	264 Move S10, [X8]
	265 Move S14, [X8+4]
	266 Move V15, [X8+8]
	267 Move X19, 0x263D000
	268 Move W8, [X19+1924]
	269 Compare W8, 0
	270 JumpIfNotEqual {276}
	271 Move X0, 0x2358000
	272 Move X0, [X0+1448]
	273 Call 0x1C17CF4
	274 Move W8, 1
	275 Move [X19+1924], W8
	276 Move X0, [X20]
	277 Move W8, [X0+224]
	278 Compare W8, 0
	279 JumpIfNotEqual {281}
	280 Call 0x1C17DFC
	281 NotImplemented "Instruction FSQRT not yet implemented."
	282 Multiply S13, S0, S10
	283 Multiply S14, S0, S14
	284 Multiply S15, S0, S15
	285 Add S0, S8, S13
	286 Add S1, S9, S14
	287 Add S2, S11, S15
	288 Move X20, [X31+192]
	289 Move X19, [X31+200]
	290 Move X22, [X31+176]
	291 Move X21, [X31+184]
	292 Move X30, [X31+160]
	293 Move D9, [X31+144]
	294 Move D8, [X31+152]
	295 Move D11, [X31+128]
	296 Move D10, [X31+136]
	297 Move D13, [X31+112]
	298 Move D12, [X31+120]
	299 Move D15, [X31+96]
	300 Move D14, [X31+104]
	301 Add X31, X31, 208
	302 Return X0
	303 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D9C578 BL 0x1D9B7F4
	0x01D9C57C STR W0, [X31 + 0x18]
	0x01D9C580 ADD X0, X31, 0x18
	0x01D9C584 MOV X1, X31
	0x01D9C588 BL 0x1E91B10
	0x01D9C58C TBZ X0, 0x0, 0x1D9C5BC
	0x01D9C590 MOV X0, X19
	0x01D9C594 BL 0x1D9B7F4
	0x01D9C598 STR W0, [X31 + 0x18]
	0x01D9C59C LDR X1, [X19 + 0x38]
	0x01D9C5A0 ADD X0, X31, 0x18
	0x01D9C5A4 MOV X2, X31
	0x01D9C5A8 BL 0x1E91B84
	0x01D9C5AC TBZ X0, 0x0, 0x1D9C5D0
	0x01D9C5B0 MOV X0, X19
	0x01D9C5B4 BL 0x1D9CADC
	0x01D9C5B8 TBZ X0, 0x0, 0x1D9C5D0
	0x01D9C5BC LDR X0, [X19 + 0x38]
	0x01D9C5C0 FMOV S0, 0.25
	0x01D9C5C4 MOV X1, X31
	0x01D9C5C8 BL 0x1E91E68
	0x01D9C5CC B 0x1D9C4FC
	0x01D9C5D0 LDP X20, X19, [X31 + 0x60]
	0x01D9C5D4 LDR X30, [X31 + 0x58]
	0x01D9C5D8 LDP D9, D8, [X31 + 0x48]
	0x01D9C5DC LDR V10, [X31 + 0x40]
	0x01D9C5E0 ADD X31, X31, 0x70
	0x01D9C5E4 RET
	0x01D9C5E8 BL 0x1C16F20
	0x01D9C5EC SUB X31, X31, 0xE0
	0x01D9C5F0 STR D12, [X31 + 0x60]
	0x01D9C5F4 STP D11, D10, [X31 + 0x70]
	0x01D9C5F8 STP D9, D8, [X31 + 0x80]
	0x01D9C5FC STP X30, X27, [X31 + 0x90]
	0x01D9C600 STP X26, X25, [X31 + 0xA0]
	0x01D9C604 STP X24, X23, [X31 + 0xB0]
	0x01D9C608 STP X22, X21, [X31 + 0xC0]
	0x01D9C60C STP X20, X19, [X31 + 0xD0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x263D000
	007 Move X21, 0x235B000
	008 Move X20, 0x235B000
	009 Move W8, [X22+2622]
	010 Move X21, [X21+4072]
	011 Move X20, [X20+3208]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x235B000
	018 Move X0, [X0+4072]
	019 Call 0x1C17CF4
	020 Move X0, 0x235B000
	021 Move X0, [X0+3208]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2622], W8
	025 Move W8, 0x3F800000
	026 Move [X19+188], W8
	027 Move X0, [X21]
	028 Move X1, X31
	029 Call Shader.PropertyToID, X0
	030 Move X8, -19595264
	031 Move V0, [X8+91]
	032 Move [X19+208], W0
	033 Move X1, X31
	034 Move [X19+212], V0
	035 Move X0, [X20]
	036 Call Shader.PropertyToID, X0
	037 Move [X19+228], W0
	038 Move X0, X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X1, X31
	044 Move X30, [X31+48]
	045 Call NetworkBehaviour..ctor, X0
	046 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01D9C610 ADRP X20, 0x263C000
	0x01D9C614 LDRB W8, [X20 + 0xA4C]
	0x01D9C618 MOV X19, X0
	0x01D9C61C TBNZ X8, 0x0, 0x1D9C694
	0x01D9C620 ADRP X0, 0x235A000
	0x01D9C624 LDR X0, [X0 + 0xBB8]
	0x01D9C628 BL 0x1C16CF4
	0x01D9C62C ADRP X0, 0x235A000
	0x01D9C630 LDR X0, [X0 + 0xB98]
	0x01D9C634 BL 0x1C16CF4
	0x01D9C638 ADRP X0, 0x2357000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, [X0+184]
	004 Move X19, X0
	005 Call Hoverpad.set_turnedOnTick, X0, X1
	006 Move V0, [X19+188]
	007 Move X0, X19
	008 Call Hoverpad.set_battery, X0, V0
	009 Move W1, [X19+200]
	010 Move X0, X19
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call Hoverpad.set_isOn, X0, X1
	014 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01D9C63C LDR X0, [X0 + 0x5D8]
	0x01D9C640 BL 0x1C16CF4
	0x01D9C644 ADRP X0, 0x235B000
	0x01D9C648 LDR X0, [X0 + 0x70]
	0x01D9C64C BL 0x1C16CF4
	0x01D9C650 ADRP X0, 0x235B000
	0x01D9C654 LDR X0, [X0 + 0x78]
	0x01D9C658 BL 0x1C16CF4
	0x01D9C65C ADRP X0, 0x235B000
	0x01D9C660 LDR X0, [X0 + 0x48]
	0x01D9C664 BL 0x1C16CF4
	0x01D9C668 ADRP X0, 0x235A000
	0x01D9C66C LDR X0, [X0 + 0x398]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Hoverpad.get_turnedOnTick, X0
	005 Move [X19+184], W0
	006 Move X0, X19
	007 Call Hoverpad.get_battery, X0
	008 Move X0, X19
	009 Move [X19+188], S0
	010 Call Hoverpad.get_isOn, X0
	011 And W8, W0, 1
	012 Move [X19+200], W8
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return 

