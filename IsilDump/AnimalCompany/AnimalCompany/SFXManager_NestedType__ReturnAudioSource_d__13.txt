Type: AnimalCompany.SFXManager/<ReturnAudioSource>d__13

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x01CCF6A0 CBNZ W8, 0x1CCF6A8
	0x01CCF6A4 BL 0x1B6E8F8
	0x01CCF6A8 MOV X0, X21
	0x01CCF6AC BL 0x1CCED44
	0x01CCF6B0 MOV X2, X0
	0x01CCF6B4 MOV X0, X20
	0x01CCF6B8 MOV X1, X19
	0x01CCF6BC LDP X20, X19, [X31 + 0x20]
	0x01CCF6C0 LDP X22, X21, [X31 + 0x10]
	0x01CCF6C4 MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x01CCF828 FADD S1, S1, S2

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x01CCF82C LDP X30, X19, [X31 + 0x50]
	0x01CCF830 LDP D9, D8, [X31 + 0x40]
	0x01CCF834 LDP D11, D10, [X31 + 0x30]
	0x01CCF838 LDP D13, D12, [X31 + 0x20]
	0x01CCF83C LDP D15, D14, [X31 + 0x10]
	0x01CCF840 FADD S1, S3, S1
	0x01CCF844 FNEG S2, S0
	0x01CCF848 FCMP S1, 0x0
	0x01CCF84C FCSEL S0, S0, S2, GE
	0x01CCF850 ADD X31, X31, 0x60
	0x01CCF854 RET
	0x01CCF858 STP X30, X27, [X31 - 0x50]!
	0x01CCF85C STP X26, X25, [X31 + 0x10]
	0x01CCF860 STP X24, X23, [X31 + 0x20]
	0x01CCF864 STP X22, X21, [X31 + 0x30]
	0x01CCF868 STP X20, X19, [X31 + 0x40]
	0x01CCF86C ADRP X20, 0x2554000
	0x01CCF870 ADRP X21, 0x227E000
	0x01CCF874 LDRB W8, [X20 + 0x5C2]
	0x01CCF878 LDR X21, [X21 + 0x4E8]
	0x01CCF87C MOV X19, X0
	0x01CCF880 TBNZ X8, 0x0, 0x1CCF8E0
	0x01CCF884 ADRP X0, 0x2280000
	0x01CCF888 LDR X0, [X0 + 0x908]
	0x01CCF88C BL 0x1B6E7F0
	0x01CCF890 ADRP X0, 0x227E000
	0x01CCF894 LDR X0, [X0 + 0x9A0]
	0x01CCF898 BL 0x1B6E7F0
	0x01CCF89C ADRP X0, 0x227E000
	0x01CCF8A0 LDR X0, [X0 + 0x4E8]
	0x01CCF8A4 BL 0x1B6E7F0
	0x01CCF8A8 ADRP X0, 0x227E000
	0x01CCF8AC LDR X0, [X0 + 0xBA0]
	0x01CCF8B0 BL 0x1B6E7F0
	0x01CCF8B4 ADRP X0, 0x227E000
	0x01CCF8B8 LDR X0, [X0 + 0xB90]
	0x01CCF8BC BL 0x1B6E7F0
	0x01CCF8C0 ADRP X0, 0x227E000
	0x01CCF8C4 LDR X0, [X0 + 0xBB8]
	0x01CCF8C8 BL 0x1B6E7F0
	0x01CCF8CC ADRP X0, 0x2280000
	0x01CCF8D0 LDR X0, [X0 + 0x910]
	0x01CCF8D4 BL 0x1B6E7F0
	0x01CCF8D8 MOVZ W8, 0x1
	0x01CCF8DC STRB W8, [X20 + 0x5C2]
	0x01CCF8E0 LDR X0, [X21]
	0x01CCF8E4 LDR W8, [X0 + 0xE0]
	0x01CCF8E8 CBNZ W8, 0x1CCF8F0
	0x01CCF8EC BL 0x1B6E8F8
	0x01CCF8F0 ADRP X22, 0x2554000
	0x01CCF8F4 LDRB W8, [X22 + 0x443]
	0x01CCF8F8 CBNZ W8, 0x1CCF910
	0x01CCF8FC ADRP X0, 0x227E000
	0x01CCF900 LDR X0, [X0 + 0x4E8]
	0x01CCF904 BL 0x1B6E7F0
	0x01CCF908 MOVZ W8, 0x1
	0x01CCF90C STRB W8, [X22 + 0x443]
	0x01CCF910 LDR X0, [X21]
	0x01CCF914 LDR W8, [X0 + 0xE0]
	0x01CCF918 CBNZ W8, 0x1CCF924
	0x01CCF91C BL 0x1B6E8F8
	0x01CCF920 LDR X0, [X21]
	0x01CCF924 LDR X8, [X0 + 0xB8]
	0x01CCF928 LDR X8, [X8]
	0x01CCF92C CBZ X8, 0x1CCFA74
	0x01CCF930 LDR X8, [X8 + 0x70]
	0x01CCF934 CBZ X8, 0x1CCFA74
	0x01CCF938 LDR X20, [X8 + 0x50]
	0x01CCF93C CBZ X20, 0x1CCFA74
	0x01CCF940 ADRP X27, 0x227E000
	0x01CCF944 ADRP X26, 0x2280000
	0x01CCF948 ADRP X25, 0x227E000
	0x01CCF94C ADRP X24, 0x2280000
	0x01CCF950 ADRP X23, 0x227E000
	0x01CCF954 LDR X27, [X27 + 0x9A0]
	0x01CCF958 LDR X26, [X26 + 0x910]
	0x01CCF95C LDR X25, [X25 + 0xB90]
	0x01CCF960 LDR X24, [X24 + 0x908]
	0x01CCF964 LDR X23, [X23 + 0xBA0]
	0x01CCF968 MOVZ W1, 0x2E
	0x01CCF96C MOV X0, X20
	0x01CCF970 MOV X2, X31
	0x01CCF974 BL 0x309542C
	0x01CCF978 MOV W2, W0
	0x01CCF97C MOV X0, X20
	0x01CCF980 MOV W1, W31
	0x01CCF984 MOV X3, X31
	0x01CCF988 BL 0x3091C2C
	0x01CCF98C LDR X8, [X27]
	0x01CCF990 MOV X20, X0
	0x01CCF994 LDR W9, [X8 + 0xE0]
	0x01CCF998 CBNZ W9, 0x1CCF9A4
	0x01CCF99C MOV X0, X8
	0x01CCF9A0 BL 0x1B6E8F8
	0x01CCF9A4 LDR X0, [X26]
	0x01CCF9A8 MOV X1, X20
	0x01CCF9AC MOV X2, X31
	0x01CCF9B0 BL 0x1CCECD4
	0x01CCF9B4 LDR X0, [X25]
	0x01CCF9B8 BL 0x1B6EA0C
	0x01CCF9BC LDR X2, [X24]
	0x01CCF9C0 MOV X1, X19
	0x01CCF9C4 MOV X3, X31
	0x01CCF9C8 MOV X20, X0
	0x01CCF9CC BL 0x342E500

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2555000
	007 Move W8, [X20+1460]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x227F000
	014 Move X0, [X0+1144]
	015 Call 0x1B6F7F0
	016 Move X0, 0x2281000
	017 Move X0, [X0+2056]
	018 Call 0x1B6F7F0
	019 Move X0, 0x2281000
	020 Move X0, [X0+856]
	021 Call 0x1B6F7F0
	022 Move X0, 0x2280000
	023 Move X0, [X0+744]
	024 Call 0x1B6F7F0
	025 Move W8, 1
	026 Move [X20+1460], W8
	027 Move W8, [X19+16]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Compare W8, 0
	030 JumpIfNotEqual {120}
	031 Move TEMP, 0
	032 Not TEMP
	033 Move W8, TEMP
	034 Move [X19+16], W8
	035 Move X8, 0x2280000
	036 Move V8, [X19+32]
	037 Move X8, [X8+744]
	038 Move X0, [X8]
	039 Call 0x1B6FA0C
	040 Move X8, -19025920
	041 Move V0, [X8+3336]
	042 Move X1, X31
	043 Move X20, X0
	044 Add S0, S8, S0
	045 Call WaitForSeconds..ctor, X0, V0
	046 Move W0, 1
	047 Move [X19+24], X20
	048 Move [X19+16], W0
	049 Move TEMP, 0
	050 Not TEMP
	051 Move W8, TEMP
	052 Move [X19+16], W8
	053 Move X8, 0x227F000
	054 Move X8, [X8+1144]
	055 Move X20, [X19+40]
	056 Move X0, [X8]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1B6F8F8
	061 Move X0, X20
	062 Move X1, X31
	063 Move X2, X31
	064 Call Object.op_Inequality, X0, X1
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {120}
	069 Move X0, [X19+40]
	070 Compare X0, 0
	071 JumpIfEqual {127}
	072 Move X1, X31
	073 Move X2, X31
	074 Call AudioSource.set_clip, X0, X1
	075 Move X0, [X19+40]
	076 Compare X0, 0
	077 JumpIfEqual {127}
	078 Move W1, 1
	079 Move X2, X31
	080 Call AudioSource.set_mute, X0, X1
	081 Move X0, [X19+40]
	082 Compare X0, 0
	083 JumpIfEqual {127}
	084 Move X1, X31
	085 Call Component.get_transform, X0
	086 Move X21, 0x2281000
	087 Move X21, [X21+856]
	088 Move X8, [X21]
	089 Move X8, [X8+184]
	090 Move X8, [X8]
	091 Compare X8, 0
	092 JumpIfEqual {127}
	093 Move X20, X0
	094 Move X0, X8
	095 Move X1, X31
	096 Call Component.get_gameObject, X0
	097 Compare X0, 0
	098 JumpIfEqual {127}
	099 Move X1, X31
	100 Call GameObject.get_transform, X0
	101 Compare X20, 0
	102 JumpIfEqual {127}
	103 Move X1, X0
	104 Move X0, X20
	105 Move X2, X31
	106 Call Transform.set_parent, X0, X1
	107 Move X8, [X21]
	108 Move X8, [X8+184]
	109 Move X8, [X8]
	110 Compare X8, 0
	111 JumpIfEqual {127}
	112 Move X0, [X8+80]
	113 Compare X0, 0
	114 JumpIfEqual {127}
	115 Move X8, 0x2281000
	116 Move X1, [X19+40]
	117 Move X8, [X8+2056]
	118 Move X2, [X8]
	119 Call Queue`1<Object>.Enqueue, X0, X1
	120 Move W0, W31
	121 Move X20, [X31+32]
	122 Move X19, [X31+40]
	123 Move X30, [X31+16]
	124 Move X21, [X31+24]
	125 Move V8, [X31+48]
	126 Return X0
	127 Call 0x1B6FA1C

Method: System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()

Disassembly:
	0x01CCF9D0 LDR X0, [X23]
	0x01CCF9D4 MOVZ W1, 0x1

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x01CCF9D8 MOVZ W23, 0x1
	0x01CCF9DC BL 0x1B6E868
	0x01CCF9E0 LDRB W8, [X22 + 0x443]
	0x01CCF9E4 MOV X19, X0
	0x01CCF9E8 CBNZ W8, 0x1CCF9FC
	0x01CCF9EC ADRP X0, 0x227E000
	0x01CCF9F0 LDR X0, [X0 + 0x4E8]
	0x01CCF9F4 BL 0x1B6E7F0
	0x01CCF9F8 STRB W23, [X22 + 0x443]
	0x01CCF9FC LDR X0, [X21]
	0x01CCFA00 LDR W8, [X0 + 0xE0]
	0x01CCFA04 CBNZ W8, 0x1CCFA10
	0x01CCFA08 BL 0x1B6E8F8
	0x01CCFA0C LDR X0, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x227F000
	004 Move X0, [X0+2448]
	005 Call 0x1B6F804
	006 Call 0x1B6FA0C
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x2281000
	011 Move X0, [X0+2176]
	012 Call 0x1B6F804
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1B6F8E8

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x01CCFA10 LDR X8, [X0 + 0xB8]
	0x01CCFA14 LDR X8, [X8]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

