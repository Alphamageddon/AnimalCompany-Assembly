Type: AnimalCompany.RedGreenView

Method: System.Void PlayAnticipationSound()

Disassembly:
	0x01CEEA98 CBZ X8, 0x1CEEF64
	0x01CEEA9C LDR X8, [X8 + 0x78]
	0x01CEEAA0 CBZ X8, 0x1CEEF64
	0x01CEEAA4 LDR W9, [X8 + 0x18]
	0x01CEEAA8 CBZ W9, 0x1CEEF6C
	0x01CEEAAC LDR V3, [X8 + 0x20]
	0x01CEEAB0 ADD X1, X31, 0x48
	0x01CEEAB4 MOV X0, X19
	0x01CEEAB8 BL 0x1CE8C04
	0x01CEEABC TBZ X0, 0x0, 0x1CEEECC
	0x01CEEAC0 LDR X0, [X31 + 0x48]
	0x01CEEAC4 STR W21, [X31 + 0xC]
	0x01CEEAC8 CBZ X0, 0x1CEEF64
	0x01CEEACC ADRP X8, 0x2261000
	0x01CEEAD0 LDR X8, [X8 + 0xDC0]
	0x01CEEAD4 LDR X1, [X8]
	0x01CEEAD8 ADD X8, X31, 0x18

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+184]
	005 Compare X0, 0
	006 JumpIfEqual {26}
	007 Move X1, X31
	008 Call AudioSource.get_isPlaying, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {18}
	013 Move X0, [X19+184]
	014 Compare X0, 0
	015 JumpIfEqual {26}
	016 Move X1, X31
	017 Call AudioSource.Stop, X0
	018 Move X0, [X19+184]
	019 Compare X0, 0
	020 JumpIfEqual {26}
	021 Move X1, X31
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Call AudioSource.Play, X0
	025 Return 
	026 Call 0x1B6FA1C

Method: System.Void PlayBackToStandSound()

Disassembly:
	0x01CEEA54 BL 0x1B6E7F0
	0x01CEEA58 ADRP X0, 0x2261000
	0x01CEEA5C LDR X0, [X0 + 0xDB8]
	0x01CEEA60 BL 0x1B6E7F0
	0x01CEEA64 ADRP X0, 0x2261000
	0x01CEEA68 LDR X0, [X0 + 0xDC0]
	0x01CEEA6C BL 0x1B6E7F0
	0x01CEEA70 ADRP X0, 0x2261000
	0x01CEEA74 LDR X0, [X0 + 0x2D0]
	0x01CEEA78 BL 0x1B6E7F0
	0x01CEEA7C MOVZ W8, 0x1
	0x01CEEA80 STRB W8, [X20 + 0x69C]
	0x01CEEA84 MOV X0, X19
	0x01CEEA88 STP X31, X31, [X31 + 0x40]
	0x01CEEA8C STP X31, X31, [X31 + 0x30]
	0x01CEEA90 BL 0x1CED31C
	0x01CEEA94 LDR X8, [X19 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+192]
	005 Compare X0, 0
	006 JumpIfEqual {26}
	007 Move X1, X31
	008 Call AudioSource.get_isPlaying, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {18}
	013 Move X0, [X19+192]
	014 Compare X0, 0
	015 JumpIfEqual {26}
	016 Move X1, X31
	017 Call AudioSource.Stop, X0
	018 Move X0, [X19+192]
	019 Compare X0, 0
	020 JumpIfEqual {26}
	021 Move X1, X31
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Call AudioSource.Play, X0
	025 Return 
	026 Call 0x1B6FA1C

Method: System.Void PlayRunningSound(System.Boolean play)

Disassembly:
	0x01CEEADC BL 0x2E470E0
	0x01CEEAE0 LDUR V0, [X31 + 0x18]
	0x01CEEAE4 ADRP X26, 0x2261000
	0x01CEEAE8 ADRP X27, 0x2262000
	0x01CEEAEC ADRP X28, 0x2262000
	0x01CEEAF0 ADRP X9, 0xFFFFFFFFFEDBB000
	0x01CEEAF4 ADRP X22, 0x225F000
	0x01CEEAF8 ADRP X29, 0x2261000
	0x01CEEAFC LDR X8, [X31 + 0x28]
	0x01CEEB00 LDR X26, [X26 + 0xDB0]
	0x01CEEB04 LDR X27, [X27 + 0x4D0]
	0x01CEEB08 LDR X28, [X28 + 0x4D8]
	0x01CEEB0C LDR X22, [X22 + 0x488]
	0x01CEEB10 LDR X29, [X29 + 0x2D0]
	0x01CEEB14 STR V0, [X31 + 0x3]
	0x01CEEB18 LDR V0, [X9 + 0xBE8]
	0x01CEEB1C ADRP X20, 0x2262000
	0x01CEEB20 ADRP X21, 0x2262000
	0x01CEEB24 STR S0, [X31 + 0x10]
	0x01CEEB28 LDR X20, [X20 + 0x4E0]
	0x01CEEB2C STR X8, [X31 + 0x40]
	0x01CEEB30 LDR X21, [X21 + 0x4C8]
	0x01CEEB34 LDR X1, [X26]
	0x01CEEB38 ADD X0, X31, 0x30
	0x01CEEB3C BL 0x2A14F30
	0x01CEEB40 TBZ X0, 0x0, 0x1CEEEB8
	0x01CEEB44 LDR X23, [X31 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+200]
	006 Compare X0, 0
	007 JumpIfEqual {45}
	008 Move W20, W1
	009 Move X1, X31
	010 Call AudioSource.get_isPlaying, X0
	011 Move TEMP, X20
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {28}
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {41}
	019 Move X0, [X19+200]
	020 Compare X0, 0
	021 JumpIfEqual {45}
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X1, X31
	025 Move X30, [X31+32]
	026 Call AudioSource.Play, X0
	027 Return 
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {41}
	032 Move X0, [X19+200]
	033 Compare X0, 0
	034 JumpIfEqual {45}
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X1, X31
	038 Move X30, [X31+32]
	039 Call AudioSource.Stop, X0
	040 Return 
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Return 
	045 Call 0x1B6FA1C

Method: System.Void PlayWalkingSound(System.Boolean play)

Disassembly:
	0x01CEEB48 CBZ X23, 0x1CEEEFC
	0x01CEEB4C MOV X0, X23
	0x01CEEB50 MOV X1, X31
	0x01CEEB54 BL 0x1CB47E0
	0x01CEEB58 TBNZ X0, 0x0, 0x1CEEB34
	0x01CEEB5C LDR X0, [X23 + 0x88]
	0x01CEEB60 CBZ X0, 0x1CEEF04
	0x01CEEB64 MOV X1, X31
	0x01CEEB68 BL 0x3AA7658
	0x01CEEB6C STR S0, [X31 + 0x14]
	0x01CEEB70 LDR X0, [X23 + 0x90]
	0x01CEEB74 CBZ X0, 0x1CEEF08
	0x01CEEB78 MOV V9.16B, V1.16B
	0x01CEEB7C MOV V10.16B, V2.16B
	0x01CEEB80 MOV X1, X31
	0x01CEEB84 BL 0x3AA7658
	0x01CEEB88 LDR X0, [X23 + 0x98]
	0x01CEEB8C CBZ X0, 0x1CEEF00
	0x01CEEB90 MOV V11.16B, V0.16B
	0x01CEEB94 MOV V12.16B, V1.16B
	0x01CEEB98 MOV V13.16B, V2.16B
	0x01CEEB9C MOV X1, X31
	0x01CEEBA0 BL 0x3AA7658
	0x01CEEBA4 LDR X0, [X19 + 0x1B0]
	0x01CEEBA8 CBZ X0, 0x1CEEF0C
	0x01CEEBAC LDR X2, [X27]
	0x01CEEBB0 MOV V14.16B, V0.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+208]
	006 Compare X0, 0
	007 JumpIfEqual {45}
	008 Move W20, W1
	009 Move X1, X31
	010 Call AudioSource.get_isPlaying, X0
	011 Move TEMP, X20
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {28}
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {41}
	019 Move X0, [X19+208]
	020 Compare X0, 0
	021 JumpIfEqual {45}
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X1, X31
	025 Move X30, [X31+32]
	026 Call AudioSource.Play, X0
	027 Return 
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {41}
	032 Move X0, [X19+208]
	033 Compare X0, 0
	034 JumpIfEqual {45}
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X1, X31
	038 Move X30, [X31+32]
	039 Call AudioSource.Stop, X0
	040 Return 
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Return 
	045 Call 0x1B6FA1C

Method: System.Void PlaySawSound(System.Boolean play)

Disassembly:
	0x01CF08C4 STRB W8, [X21 + 0x6B3]
	0x01CF08C8 LDR X0, [X22]
	0x01CF08CC BL 0x1B6EA0C
	0x01CF08D0 LDR X1, [X20]
	0x01CF08D4 MOV X20, X0
	0x01CF08D8 BL 0x23684F8
	0x01CF08DC STR X20, [X19 + 0x38]
	0x01CF08E0 MOV X0, X19
	0x01CF08E4 LDP X20, X19, [X31 + 0x20]
	0x01CF08E8 LDP X22, X21, [X31 + 0x10]
	0x01CF08EC MOV X1, X31
	0x01CF08F0 LDR X30, [X31], #0x30
	0x01CF08F4 B 0x3A9EEE4
	0x01CF08F8 STR X30, [X31 - 0x40]!
	0x01CF08FC STP X24, X23, [X31 + 0x10]
	0x01CF0900 STP X22, X21, [X31 + 0x20]
	0x01CF0904 STP X20, X19, [X31 + 0x30]
	0x01CF0908 ADRP X23, 0x2533000
	0x01CF090C ADRP X24, 0x2260000
	0x01CF0910 ADRP X19, 0x225F000
	0x01CF0914 ADRP X22, 0x2260000
	0x01CF0918 ADRP X21, 0x2260000
	0x01CF091C ADRP X20, 0x2260000
	0x01CF0920 LDRB W8, [X23 + 0x6B4]
	0x01CF0924 LDR X24, [X24 + 0x5A0]
	0x01CF0928 LDR X19, [X19 + 0x370]
	0x01CF092C LDR X22, [X22 + 0x5A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+216]
	006 Compare X0, 0
	007 JumpIfEqual {45}
	008 Move W20, W1
	009 Move X1, X31
	010 Call AudioSource.get_isPlaying, X0
	011 Move TEMP, X20
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {28}
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {41}
	019 Move X0, [X19+216]
	020 Compare X0, 0
	021 JumpIfEqual {45}
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X1, X31
	025 Move X30, [X31+32]
	026 Call AudioSource.Play, X0
	027 Return 
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {41}
	032 Move X0, [X19+216]
	033 Compare X0, 0
	034 JumpIfEqual {45}
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X1, X31
	038 Move X30, [X31+32]
	039 Call AudioSource.Stop, X0
	040 Return 
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Return 
	045 Call 0x1B6FA1C

Method: System.Void SetSawRotation(System.Boolean rotate)

Disassembly:
	0x01CEEBB4 MOV V15.16B, V1.16B
	0x01CEEBB8 MOV V8.16B, V2.16B
	0x01CEEBBC MOV X1, X23

ISIL:
	001 And W1, W1, 1
	002 Move [X0+256], W1
	003 Call RedGreenView.PlaySawSound, X0, X1
	004 Return 

Method: System.Void SetLightColor(System.Boolean isGreen)

Disassembly:
	0x01CEE7CC FMUL S2, S2, S2
	0x01CEE7D0 FADD S0, S0, S1
	0x01CEE7D4 FADD S0, S2, S0
	0x01CEE7D8 FSQRT S0, S0
	0x01CEE7DC FCMP S0, S3
	0x01CEE7E0 B.LE 0x1CEE7EC
	0x01CEE7E4 MOV X0, X19
	0x01CEE7E8 BL 0x1CEF3BC
	0x01CEE7EC LDP X20, X19, [X31 + 0xE0]
	0x01CEE7F0 LDP X22, X21, [X31 + 0xD0]
	0x01CEE7F4 LDP X24, X23, [X31 + 0xC0]
	0x01CEE7F8 LDP X26, X25, [X31 + 0xB0]
	0x01CEE7FC LDP X28, X27, [X31 + 0xA0]
	0x01CEE800 LDR X30, [X31 + 0x90]
	0x01CEE804 LDP D9, D8, [X31 + 0x80]
	0x01CEE808 LDP D11, D10, [X31 + 0x70]
	0x01CEE80C LDP D13, D12, [X31 + 0x60]
	0x01CEE810 LDP D15, D14, [X31 + 0x50]
	0x01CEE814 ADD X31, X31, 0xF0
	0x01CEE818 RET
	0x01CEE81C BL 0x1B6EA1C
	0x01CEE820 BL 0x1B6EA1C
	0x01CEE824 BL 0x1B6EA1C
	0x01CEE828 BL 0x1B6EA1C
	0x01CEE82C BL 0x1B6EA1C
	0x01CEE830 BL 0x1B6EA24
	0x01CEE834 B 0x1CEE860
	0x01CEE838 B 0x1CEE860
	0x01CEE83C B 0x1CEE860
	0x01CEE840 B 0x1CEE860
	0x01CEE844 B 0x1CEE860
	0x01CEE848 B 0x1CEE860
	0x01CEE84C B 0x1CEE860
	0x01CEE850 B 0x1CEE860
	0x01CEE854 B 0x1CEE860
	0x01CEE858 B 0x1CEE860
	0x01CEE85C B 0x1CEE860
	0x01CEE860 MOV X21, X0
	0x01CEE864 CMP W1, 0x1
	0x01CEE868 B.NE 0x1CEE89C
	0x01CEE86C MOV X0, X21
	0x01CEE870 BL 0x3D19840
	0x01CEE874 LDR X22, [X0]
	0x01CEE878 BL 0x3D19850
	0x01CEE87C ADRP X8, 0x2261000
	0x01CEE880 LDR X8, [X8 + 0xDA8]
	0x01CEE884 ADD X0, X31, 0x30
	0x01CEE888 LDR X1, [X8]
	0x01CEE88C BL 0x2A14F2C
	0x01CEE890 CBZ X22, 0x1CEE744
	0x01CEE894 MOV X0, X22
	0x01CEE898 BL 0x1B6EA14
	0x01CEE89C MOV X22, X31
	0x01CEE8A0 B 0x1CEE8A8
	0x01CEE8A4 MOV X21, X0
	0x01CEE8A8 ADRP X8, 0x2261000
	0x01CEE8AC LDR X8, [X8 + 0xDA8]
	0x01CEE8B0 LDR X1, [X8]
	0x01CEE8B4 ADD X0, X31, 0x30
	0x01CEE8B8 BL 0x2A14F2C
	0x01CEE8BC CBNZ X22, 0x1CEE8C8
	0x01CEE8C0 MOV X0, X21
	0x01CEE8C4 BL 0x1C8418C
	0x01CEE8C8 MOV X0, X22
	0x01CEE8CC BL 0x1B6EA14
	0x01CEE8D0 BL 0x18F46A8
	0x01CEE8D4 STP D13, D12, [X31 - 0x50]!
	0x01CEE8D8 STP D11, D10, [X31 + 0x10]
	0x01CEE8DC STP D9, D8, [X31 + 0x20]
	0x01CEE8E0 STR X30, [X31 + 0x30]
	0x01CEE8E4 STP X20, X19, [X31 + 0x40]
	0x01CEE8E8 MOVZ W1, 0x1
	0x01CEE8EC MOV X19, X0
	0x01CEE8F0 BL 0x1CEE9D0
	0x01CEE8F4 MOV X0, X19
	0x01CEE8F8 MOV X1, X31
	0x01CEE8FC BL 0x3A9B084
	0x01CEE900 CBZ X0, 0x1CEE9CC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2536000
	007 Move W8, [X21+1700]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2263000
	015 Move X0, [X0+1200]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1700], W8
	019 Move X0, [X19+168]
	020 Move TEMP, X20
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {28}
	024 Add X8, X19, 136
	025 Add X9, X19, 140
	026 Add X10, X19, 144
	027 Add X11, X19, 148
	028 Add X8, X19, 152
	029 Add X9, X19, 156
	030 Add X10, X19, 160
	031 Add X11, X19, 164
	032 Compare X0, 0
	033 JumpIfEqual {102}
	034 Move V3, [X11]
	035 Move V2, [X10]
	036 Move V1, [X9]
	037 Move V0, [X8]
	038 Move X1, X31
	039 Call Light.set_color, X0, X1
	040 Move X0, [X19+176]
	041 Compare X0, 0
	042 JumpIfEqual {102}
	043 Move X22, 0x2263000
	044 Move X22, [X22+1200]
	045 Move X1, X31
	046 Call Renderer.get_material, X0
	047 Move X8, [X22]
	048 Move X21, X0
	049 Move W9, [X8+224]
	050 Compare W9, 0
	051 JumpIfNotEqual {54}
	052 Move X0, X8
	053 Call 0x1B6F8F8
	054 Compare X21, 0
	055 JumpIfEqual {102}
	056 Move X8, [X22]
	057 And W31, W20, 1
	058 Move S0, W31
	059 Move S1, 1
	060 Move X8, [X8+184]
	061 NotImplemented "Instruction FCSEL not yet implemented."
	062 Move X0, X21
	063 Move X2, X31
	064 Move W1, [X8]
	065 Call Material.SetFloat, X0, X1, V0
	066 Move TEMP, X20
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {86}
	070 Move X0, [X19+224]
	071 Compare X0, 0
	072 JumpIfEqual {102}
	073 Move X1, X31
	074 Call AudioSource.Play, X0
	075 Move X0, [X19+232]
	076 Compare X0, 0
	077 JumpIfEqual {102}
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, X31
	083 Move X30, [X31+48]
	084 Call AudioSource.Play, X0
	085 Return 
	086 Move X0, [X19+240]
	087 Compare X0, 0
	088 JumpIfEqual {102}
	089 Move X1, X31
	090 Call AudioSource.Play, X0
	091 Move X0, [X19+232]
	092 Compare X0, 0
	093 JumpIfEqual {102}
	094 Move X20, [X31+32]
	095 Move X19, [X31+40]
	096 Move X22, [X31+16]
	097 Move X21, [X31+24]
	098 Move X1, X31
	099 Move X30, [X31+48]
	100 Call AudioSource.Stop, X0
	101 Return 
	102 Call 0x1B6FA1C

Method: System.Void SetLightEvil(System.Boolean isEvil)

Disassembly:
	0x01CEEBC0 BL 0x28FA49C
	0x01CEEBC4 LDR X24, [X19 + 0x1B0]
	0x01CEEBC8 TBZ X0, 0x0, 0x1CEEE00
	0x01CEEBCC CBZ X24, 0x1CEEF20
	0x01CEEBD0 LDR X2, [X28]
	0x01CEEBD4 MOV X0, X24
	0x01CEEBD8 MOV X1, X23
	0x01CEEBDC BL 0x28FA228
	0x01CEEBE0 CBZ X0, 0x1CEEF28
	0x01CEEBE4 LDR W8, [X0 + 0x18]
	0x01CEEBE8 CBZ W8, 0x1CEEF1C
	0x01CEEBEC CMP W8, 0x1
	0x01CEEBF0 B.EQ 0x1CEEF24
	0x01CEEBF4 CMP W8, 0x2
	0x01CEEBF8 B.LS 0x1CEEF14
	0x01CEEBFC LDP S0, S1, [X0 + 0x20]
	0x01CEEC00 LDR V3, [X31 + 0x14]
	0x01CEEC04 LDR V2, [X0 + 0x28]
	0x01CEEC08 FSUB S1, S9, S1
	0x01CEEC0C FSUB S0, S3, S0
	0x01CEEC10 LDR V3, [X31 + 0x10]
	0x01CEEC14 FSUB S2, S10, S2
	0x01CEEC18 FMUL S0, S0, S0
	0x01CEEC1C FMUL S1, S1, S1
	0x01CEEC20 FADD S0, S0, S1
	0x01CEEC24 FMUL S1, S2, S2
	0x01CEEC28 FADD S0, S0, S1
	0x01CEEC2C FCMP S0, S3
	0x01CEEC30 B.GT 0x1CEEC94
	0x01CEEC34 LDP S0, S1, [X0 + 0x2C]
	0x01CEEC38 LDR V2, [X0 + 0x34]
	0x01CEEC3C FSUB S0, S11, S0
	0x01CEEC40 FSUB S1, S12, S1
	0x01CEEC44 FSUB S2, S13, S2
	0x01CEEC48 FMUL S0, S0, S0
	0x01CEEC4C FMUL S1, S1, S1
	0x01CEEC50 FADD S0, S0, S1
	0x01CEEC54 FMUL S1, S2, S2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2536000
	006 Move W8, [X21+1701]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2263000
	014 Move X0, [X0+1200]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1701], W8
	018 Move X0, [X20+176]
	019 Compare X0, 0
	020 JumpIfEqual {49}
	021 Move X21, 0x2263000
	022 Move X21, [X21+1200]
	023 Move X1, X31
	024 Call Renderer.get_material, X0
	025 Move X8, [X21]
	026 Move X20, X0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1B6F8F8
	032 Compare X20, 0
	033 JumpIfEqual {49}
	034 Move X8, [X21]
	035 And W31, W19, 1
	036 Move X0, X20
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X8, [X8+184]
	040 Move S0, W31
	041 Move S1, 1
	042 NotImplemented "Instruction FCSEL not yet implemented."
	043 Move W1, [X8+4]
	044 Move X2, X31
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Call Material.SetFloat, X0, X1, V0
	048 Return 
	049 Call 0x1B6FA1C

Method: System.Void Update()

Disassembly:
	0x01CF0930 LDR X21, [X21 + 0x5B0]
	0x01CF0934 LDR X20, [X20 + 0x5B8]
	0x01CF0938 TBNZ X8, 0x0, 0x1CF0980
	0x01CF093C ADRP X0, 0x225F000
	0x01CF0940 LDR X0, [X0 + 0x370]
	0x01CF0944 BL 0x1B6E7F0
	0x01CF0948 ADRP X0, 0x2260000
	0x01CF094C LDR X0, [X0 + 0x5A8]
	0x01CF0950 BL 0x1B6E7F0
	0x01CF0954 ADRP X0, 0x2260000
	0x01CF0958 LDR X0, [X0 + 0x5B8]
	0x01CF095C BL 0x1B6E7F0
	0x01CF0960 ADRP X0, 0x2260000
	0x01CF0964 LDR X0, [X0 + 0x5B0]
	0x01CF0968 BL 0x1B6E7F0
	0x01CF096C ADRP X0, 0x2260000
	0x01CF0970 LDR X0, [X0 + 0x5A0]
	0x01CF0974 BL 0x1B6E7F0
	0x01CF0978 MOVZ W8, 0x1
	0x01CF097C STRB W8, [X23 + 0x6B4]
	0x01CF0980 LDR X0, [X24]
	0x01CF0984 MOV X1, X31
	0x01CF0988 BL 0x3A7AE20
	0x01CF098C LDR X8, [X19]
	0x01CF0990 MOV X1, X31
	0x01CF0994 LDR X8, [X8 + 0xB8]
	0x01CF0998 STR W0, [X8]
	0x01CF099C LDR X0, [X22]
	0x01CF09A0 BL 0x3A7AE20
	0x01CF09A4 LDR X8, [X19]
	0x01CF09A8 MOV X1, X31
	0x01CF09AC LDR X8, [X8 + 0xB8]
	0x01CF09B0 STR W0, [X8 + 0x4]
	0x01CF09B4 LDR X0, [X21]
	0x01CF09B8 BL 0x3A7AE20
	0x01CF09BC LDR X8, [X19]
	0x01CF09C0 MOV X1, X31
	0x01CF09C4 LDR X8, [X8 + 0xB8]
	0x01CF09C8 STR W0, [X8 + 0x8]
	0x01CF09CC LDR X0, [X20]
	0x01CF09D0 BL 0x3A7AE20
	0x01CF09D4 LDR X8, [X19]
	0x01CF09D8 LDP X20, X19, [X31 + 0x30]
	0x01CF09DC LDP X22, X21, [X31 + 0x20]
	0x01CF09E0 LDP X24, X23, [X31 + 0x10]
	0x01CF09E4 LDR X8, [X8 + 0xB8]
	0x01CF09E8 STR W0, [X8 + 0xC]
	0x01CF09EC LDR X30, [X31], #0x40
	0x01CF09F0 RET
	0x01CF09F4 STR X30, [X31 - 0x20]!
	0x01CF09F8 STP X20, X19, [X31 + 0x10]
	0x01CF09FC ADRP X20, 0x2533000
	0x01CF0A00 ADRP X19, 0x225E000
	0x01CF0A04 LDRB W8, [X20 + 0x6B5]
	0x01CF0A08 LDR X19, [X19 + 0x2A8]
	0x01CF0A0C TBNZ X8, 0x0, 0x1CF0A24
	0x01CF0A10 ADRP X0, 0x225E000
	0x01CF0A14 LDR X0, [X0 + 0x2A8]
	0x01CF0A18 BL 0x1B6E7F0
	0x01CF0A1C MOVZ W8, 0x1
	0x01CF0A20 STRB W8, [X20 + 0x6B5]

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move W8, [X0+256]
	013 Compare W8, 0
	014 JumpIfEqual {63}
	015 Move X8, [X0+248]
	016 Move X19, X0
	017 Compare X8, 0
	018 JumpIfEqual {62}
	019 Move X20, 0x225E000
	020 Move X20, [X20+1152]
	021 Move X22, X31
	022 Move X23, 0x2534000
	023 Move W24, 1
	024 Move W9, [X8+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Add X8, X8, X22
	028 Move W9, [X23+1090]
	029 Move X21, [X8+32]
	030 Compare W9, 0
	031 JumpIfNotEqual {35}
	032 Move X0, X20
	033 Call 0x1B6F7F0
	034 Move [X23+1090], W24
	035 Move X8, [X19+264]
	036 Compare X8, 0
	037 JumpIfEqual {62}
	038 Move W9, [X8+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X9, [X20]
	041 Add X8, X8, X22
	042 Move V11, [X8+32]
	043 Move X0, X31
	044 Move X9, [X9+184]
	045 Move S10, [X9+24]
	046 Move S9, [X9+28]
	047 Move V8, [X9+32]
	048 Call Time.get_deltaTime
	049 Compare X21, 0
	050 JumpIfEqual {62}
	051 Multiply S3, S11, S0
	052 Move X0, X21
	053 Move V0, V10
	054 Move V1, V9
	055 Move V2, V8
	056 Move X1, X31
	057 Call Transform.Rotate, X0, X1, V0
	058 Move X8, [X19+248]
	059 Add X22, X22, 1
	060 Compare X8, 0
	061 JumpIfNotEqual {24}
	062 Call 0x1B6FA1C
	063 Move X20, [X31+80]
	064 Move X19, [X31+88]
	065 Move X22, [X31+64]
	066 Move X21, [X31+72]
	067 Move X24, [X31+48]
	068 Move X23, [X31+56]
	069 Move X30, [X31+32]
	070 Move D9, [X31+16]
	071 Move D8, [X31+24]
	072 Move D11, [X31+96]
	073 Move D10, [X31+104]
	074 Return 
	075 Call 0x1B6FA24

Method: System.Void .ctor()

Disassembly:
	0x01CF0A24 LDR X0, [X19]
	0x01CF0A28 LDR W8, [X0 + 0xE0]
	0x01CF0A2C CBNZ W8, 0x1CF0A34
	0x01CF0A30 BL 0x1B6E8F8
	0x01CF0A34 ADRP X20, 0x2533000
	0x01CF0A38 LDRB W8, [X20 + 0x50A]
	0x01CF0A3C CBNZ W8, 0x1CF0A54
	0x01CF0A40 ADRP X0, 0x225E000
	0x01CF0A44 LDR X0, [X0 + 0x2A8]
	0x01CF0A48 BL 0x1B6E7F0
	0x01CF0A4C MOVZ W8, 0x1
	0x01CF0A50 STRB W8, [X20 + 0x50A]
	0x01CF0A54 LDR X0, [X19]
	0x01CF0A58 LDR W8, [X0 + 0xE0]
	0x01CF0A5C CBNZ W8, 0x1CF0A68
	0x01CF0A60 BL 0x1B6E8F8
	0x01CF0A64 LDR X0, [X19]
	0x01CF0A68 LDR X8, [X0 + 0xB8]
	0x01CF0A6C LDP X20, X19, [X31 + 0x10]
	0x01CF0A70 LDR X0, [X8]
	0x01CF0A74 LDR X30, [X31], #0x20
	0x01CF0A78 RET
	0x01CF0A7C STR X30, [X31 - 0x30]!
	0x01CF0A80 STP X22, X21, [X31 + 0x10]
	0x01CF0A84 STP X20, X19, [X31 + 0x20]
	0x01CF0A88 ADRP X20, 0x2533000
	0x01CF0A8C ADRP X21, 0x225F000
	0x01CF0A90 LDRB W8, [X20 + 0x6B6]
	0x01CF0A94 LDR X21, [X21 + 0x408]
	0x01CF0A98 MOV X19, X0
	0x01CF0A9C TBNZ X8, 0x0, 0x1CF0AC0
	0x01CF0AA0 ADRP X0, 0x225D000
	0x01CF0AA4 LDR X0, [X0 + 0x478]
	0x01CF0AA8 BL 0x1B6E7F0
	0x01CF0AAC ADRP X0, 0x225F000
	0x01CF0AB0 LDR X0, [X0 + 0x408]
	0x01CF0AB4 BL 0x1B6E7F0
	0x01CF0AB8 MOVZ W8, 0x1
	0x01CF0ABC STRB W8, [X20 + 0x6B6]
	0x01CF0AC0 LDR X0, [X21]
	0x01CF0AC4 ADRP X22, 0x225D000
	0x01CF0AC8 LDR W8, [X0 + 0xE0]
	0x01CF0ACC LDR X22, [X22 + 0x478]
	0x01CF0AD0 CBNZ W8, 0x1CF0ADC
	0x01CF0AD4 BL 0x1B6E8F8
	0x01CF0AD8 LDR X0, [X21]
	0x01CF0ADC LDR X8, [X22]
	0x01CF0AE0 LDR X9, [X0 + 0xB8]
	0x01CF0AE4 LDR W10, [X8 + 0xE0]
	0x01CF0AE8 LDR X20, [X9]
	0x01CF0AEC CBNZ W10, 0x1CF0AF8
	0x01CF0AF0 MOV X0, X8
	0x01CF0AF4 BL 0x1B6E8F8
	0x01CF0AF8 MOV X0, X20
	0x01CF0AFC MOV X1, X31
	0x01CF0B00 MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x2534000
	008 Move X22, 0x225F000
	009 Move X20, 0x2261000
	010 Move X21, 0x2260000
	011 Move W8, [X23+1702]
	012 Move X22, [X22+4032]
	013 Move X20, [X20+1280]
	014 Move X21, [X21+3592]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x2260000
	021 Move X0, [X0+3592]
	022 Call 0x1B6F7F0
	023 Move X0, 0x225F000
	024 Move X0, [X0+4032]
	025 Call 0x1B6F7F0
	026 Move X0, 0x2261000
	027 Move X0, [X0+1280]
	028 Call 0x1B6F7F0
	029 Move W8, 1
	030 Move [X23+1702], W8
	031 Move X8, -19156992
	032 Move X9, -19148800
	033 Move V0, [X8+199]
	034 Move V1, [X9+10]
	035 Move W1, 8
	036 Move [X19+136], V0
	037 Move [X19+152], V1
	038 Move X0, [X22]
	039 Call 0x1B6F868
	040 Move X1, [X20]
	041 Move X2, X31
	042 Move X20, X0
	043 Call RuntimeHelpers.InitializeArray, X0, X1
	044 Move [X19+264], X20
	045 Move X0, [X21]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1B6F8F8
	050 Move X8, -19144704
	051 Move V0, [X8+2784]
	052 Move W8, 1
	053 Move W9, 0x3F800000
	054 Move [X19+72], W31
	055 Move [X19+76], W8
	056 Move [X19+64], D0
	057 Move [X19+128], W9
	058 Move X0, X19
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+48]
	065 Move X23, [X31+56]
	066 Call MonoBehaviour..ctor, X0
	067 Return 

Method: System.Void .cctor()

Disassembly:
	0x01CF0B04 BL 0x3A9D6EC
	0x01CF0B08 TBZ X0, 0x0, 0x1CF0B48
	0x01CF0B0C MOV X0, X19
	0x01CF0B10 MOV X1, X31
	0x01CF0B14 BL 0x3A9B0C0
	0x01CF0B18 LDR X8, [X22]
	0x01CF0B1C MOV X19, X0
	0x01CF0B20 LDR W9, [X8 + 0xE0]
	0x01CF0B24 CBNZ W9, 0x1CF0B30
	0x01CF0B28 MOV X0, X8
	0x01CF0B2C BL 0x1B6E8F8
	0x01CF0B30 MOV X0, X19
	0x01CF0B34 LDP X20, X19, [X31 + 0x20]
	0x01CF0B38 LDP X22, X21, [X31 + 0x10]
	0x01CF0B3C MOV X1, X31
	0x01CF0B40 LDR X30, [X31], #0x30
	0x01CF0B44 B 0x3AA15F4
	0x01CF0B48 LDR X0, [X21]
	0x01CF0B4C LDR W8, [X0 + 0xE0]
	0x01CF0B50 CBNZ W8, 0x1CF0B5C
	0x01CF0B54 BL 0x1B6E8F8
	0x01CF0B58 LDR X0, [X21]
	0x01CF0B5C LDR X8, [X0 + 0xB8]
	0x01CF0B60 LDP X22, X21, [X31 + 0x10]
	0x01CF0B64 STR X19, [X8]
	0x01CF0B68 LDP X20, X19, [X31 + 0x20]
	0x01CF0B6C LDR X30, [X31], #0x30
	0x01CF0B70 RET
	0x01CF0B74 STP X30, X21, [X31 - 0x20]!
	0x01CF0B78 STP X20, X19, [X31 + 0x10]
	0x01CF0B7C ADRP X20, 0x2533000
	0x01CF0B80 ADRP X21, 0x225F000
	0x01CF0B84 LDRB W8, [X20 + 0x6B7]
	0x01CF0B88 LDR X21, [X21 + 0x408]
	0x01CF0B8C MOV X19, X0
	0x01CF0B90 TBNZ X8, 0x0, 0x1CF0BB4
	0x01CF0B94 ADRP X0, 0x225D000
	0x01CF0B98 LDR X0, [X0 + 0x478]
	0x01CF0B9C BL 0x1B6E7F0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2534000
	007 Move X22, 0x2261000
	008 Move X19, 0x2261000
	009 Move X20, 0x2261000
	010 Move W8, [X21+1703]
	011 Move X22, [X22+1288]
	012 Move X19, [X19+1200]
	013 Move X20, [X20+1296]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x2261000
	019 Move X0, [X0+1200]
	020 Call 0x1B6F7F0
	021 Move X0, 0x2261000
	022 Move X0, [X0+1288]
	023 Call 0x1B6F7F0
	024 Move X0, 0x2261000
	025 Move X0, [X0+1296]
	026 Call 0x1B6F7F0
	027 Move W8, 1
	028 Move [X21+1703], W8
	029 Move X0, [X22]
	030 Move X1, X31
	031 Call Shader.PropertyToID, X0
	032 Move X8, [X19]
	033 Move X1, X31
	034 Move X8, [X8+184]
	035 Move [X8], W0
	036 Move X0, [X20]
	037 Call Shader.PropertyToID, X0
	038 Move X8, [X19]
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X8, [X8+184]
	044 Move [X8+4], W0
	045 Move X30, [X31+48]
	046 Return 

