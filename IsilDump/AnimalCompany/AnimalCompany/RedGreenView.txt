Type: AnimalCompany.RedGreenView

Method: System.Void PlayAnticipationSound()

Disassembly:
	0x01DFEC4C ADRP X0, 0x22FB000
	0x01DFEC50 LDR X0, [X0 + 0x658]
	0x01DFEC54 BL 0x1C16CF4
	0x01DFEC58 ADRP X0, 0x22FA000
	0x01DFEC5C LDR X0, [X0 + 0xC20]
	0x01DFEC60 BL 0x1C16CF4
	0x01DFEC64 ADRP X0, 0x22FA000
	0x01DFEC68 LDR X0, [X0 + 0xC28]
	0x01DFEC6C BL 0x1C16CF4
	0x01DFEC70 ADRP X0, 0x22FA000
	0x01DFEC74 LDR X0, [X0 + 0xC30]
	0x01DFEC78 BL 0x1C16CF4
	0x01DFEC7C ADRP X0, 0x22FA000
	0x01DFEC80 LDR X0, [X0 + 0xC38]
	0x01DFEC84 BL 0x1C16CF4
	0x01DFEC88 ADRP X0, 0x22FA000
	0x01DFEC8C LDR X0, [X0 + 0xC40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+224]
	005 Compare X0, 0
	006 JumpIfEqual {26}
	007 Move X1, X31
	008 Call AudioSource.get_isPlaying, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {18}
	013 Move X0, [X19+224]
	014 Compare X0, 0
	015 JumpIfEqual {26}
	016 Move X1, X31
	017 Call AudioSource.Stop, X0
	018 Move X0, [X19+224]
	019 Compare X0, 0
	020 JumpIfEqual {26}
	021 Move X1, X31
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Call AudioSource.Play, X0
	025 Return 
	026 Call 0x1C17F20

Method: System.Void PlayBackToStandSound()

Disassembly:
	0x01DFEC08 STP X24, X23, [X31 + 0xC0]
	0x01DFEC0C STP X22, X21, [X31 + 0xD0]
	0x01DFEC10 STP X20, X19, [X31 + 0xE0]
	0x01DFEC14 ADRP X20, 0x25DA000
	0x01DFEC18 LDRB W8, [X20 + 0xD49]
	0x01DFEC1C MOV W21, W1
	0x01DFEC20 MOV X19, X0
	0x01DFEC24 TBNZ X8, 0x0, 0x1DFECA8
	0x01DFEC28 ADRP X0, 0x22FB000
	0x01DFEC2C LDR X0, [X0 + 0x640]
	0x01DFEC30 BL 0x1C16CF4
	0x01DFEC34 ADRP X0, 0x22FB000
	0x01DFEC38 LDR X0, [X0 + 0x648]
	0x01DFEC3C BL 0x1C16CF4
	0x01DFEC40 ADRP X0, 0x22FB000
	0x01DFEC44 LDR X0, [X0 + 0x650]
	0x01DFEC48 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+232]
	005 Compare X0, 0
	006 JumpIfEqual {26}
	007 Move X1, X31
	008 Call AudioSource.get_isPlaying, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {18}
	013 Move X0, [X19+232]
	014 Compare X0, 0
	015 JumpIfEqual {26}
	016 Move X1, X31
	017 Call AudioSource.Stop, X0
	018 Move X0, [X19+232]
	019 Compare X0, 0
	020 JumpIfEqual {26}
	021 Move X1, X31
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Call AudioSource.Play, X0
	025 Return 
	026 Call 0x1C17F20

Method: System.Void PlayRunningSound(System.Boolean play)

Disassembly:
	0x01DFEC90 BL 0x1C16CF4
	0x01DFEC94 ADRP X0, 0x22F7000
	0x01DFEC98 LDR X0, [X0 + 0x9B0]
	0x01DFEC9C BL 0x1C16CF4
	0x01DFECA0 MOVZ W8, 0x1
	0x01DFECA4 STRB W8, [X20 + 0xD49]
	0x01DFECA8 MOV X0, X19
	0x01DFECAC STP X31, X31, [X31 + 0x40]
	0x01DFECB0 STP X31, X31, [X31 + 0x30]
	0x01DFECB4 BL 0x1DFD4CC
	0x01DFECB8 LDR X8, [X19 + 0xC0]
	0x01DFECBC CBZ X8, 0x1DFF1D8
	0x01DFECC0 LDR X8, [X8 + 0x78]
	0x01DFECC4 CBZ X8, 0x1DFF1D8
	0x01DFECC8 LDR W9, [X8 + 0x18]
	0x01DFECCC CBZ W9, 0x1DFF1E0
	0x01DFECD0 ADRP X26, 0x22FA000
	0x01DFECD4 LDR X26, [X26 + 0xC40]
	0x01DFECD8 LDR V11, [X8 + 0x20]
	0x01DFECDC MOV V8.16B, V0.16B
	0x01DFECE0 MOV V9.16B, V1.16B
	0x01DFECE4 LDR X0, [X26]
	0x01DFECE8 MOV V10.16B, V2.16B
	0x01DFECEC LDR W9, [X0 + 0xE0]
	0x01DFECF0 CBNZ W9, 0x1DFECF8
	0x01DFECF4 BL 0x1C16DFC
	0x01DFECF8 ADD X1, X31, 0x48

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+240]
	006 Compare X0, 0
	007 JumpIfEqual {45}
	008 Move W20, W1
	009 Move X1, X31
	010 Call AudioSource.get_isPlaying, X0
	011 Move TEMP, X20
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {28}
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {41}
	019 Move X0, [X19+240]
	020 Compare X0, 0
	021 JumpIfEqual {45}
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X1, X31
	025 Move X30, [X31+32]
	026 Call AudioSource.Play, X0
	027 Return 
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {41}
	032 Move X0, [X19+240]
	033 Compare X0, 0
	034 JumpIfEqual {45}
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X1, X31
	038 Move X30, [X31+32]
	039 Call AudioSource.Stop, X0
	040 Return 
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Return 
	045 Call 0x1C17F20

Method: System.Void PlayWalkingSound(System.Boolean play)

Disassembly:
	0x01DFECFC MOV X0, X19
	0x01DFED00 MOV V0.16B, V8.16B
	0x01DFED04 MOV V1.16B, V9.16B
	0x01DFED08 MOV V2.16B, V10.16B
	0x01DFED0C MOV V3.16B, V11.16B
	0x01DFED10 MOV X2, X31
	0x01DFED14 BL 0x1DE9804
	0x01DFED18 TBZ X0, 0x0, 0x1DFF140
	0x01DFED1C LDR X0, [X31 + 0x48]
	0x01DFED20 STR W21, [X31 + 0xC]
	0x01DFED24 CBZ X0, 0x1DFF1D8
	0x01DFED28 ADRP X8, 0x22FA000
	0x01DFED2C LDR X8, [X8 + 0xC38]
	0x01DFED30 LDR X1, [X8]
	0x01DFED34 ADD X8, X31, 0x18
	0x01DFED38 BL 0x301CB58
	0x01DFED3C LDUR V0, [X31 + 0x18]
	0x01DFED40 ADRP X27, 0x22FA000
	0x01DFED44 ADRP X28, 0x22FB000
	0x01DFED48 ADRP X29, 0x22FB000
	0x01DFED4C ADRP X9, 0xFFFFFFFFFECEC000
	0x01DFED50 ADRP X20, 0x22F7000
	0x01DFED54 LDR X8, [X31 + 0x28]
	0x01DFED58 LDR X27, [X27 + 0xC28]
	0x01DFED5C LDR X28, [X28 + 0x648]
	0x01DFED60 LDR X29, [X29 + 0x650]
	0x01DFED64 LDR X20, [X20 + 0x9B0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+248]
	006 Compare X0, 0
	007 JumpIfEqual {45}
	008 Move W20, W1
	009 Move X1, X31
	010 Call AudioSource.get_isPlaying, X0
	011 Move TEMP, X20
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {28}
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {41}
	019 Move X0, [X19+248]
	020 Compare X0, 0
	021 JumpIfEqual {45}
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X1, X31
	025 Move X30, [X31+32]
	026 Call AudioSource.Play, X0
	027 Return 
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {41}
	032 Move X0, [X19+248]
	033 Compare X0, 0
	034 JumpIfEqual {45}
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X1, X31
	038 Move X30, [X31+32]
	039 Call AudioSource.Stop, X0
	040 Return 
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Return 
	045 Call 0x1C17F20

Method: System.Void PlaySawSound(System.Boolean play)

Disassembly:
	0x01E00B54 LDR X8, [X8 + 0x18]
	0x01E00B58 CBZ X8, 0x1E00BA8
	0x01E00B5C LDR V0, [X8 + 0x40]
	0x01E00B60 FCMP S0, 0x0
	0x01E00B64 B.NE 0x1E00B7C
	0x01E00B68 LDP X20, X19, [X31 + 0x20]
	0x01E00B6C LDP X22, X21, [X31 + 0x10]
	0x01E00B70 LDR X30, [X31 + 0x8]
	0x01E00B74 LDR V8, [X31], #0x30
	0x01E00B78 RET
	0x01E00B7C LDR W8, [X0 + 0xE0]
	0x01E00B80 CBNZ W8, 0x1E00B88
	0x01E00B84 BL 0x1C16DFC
	0x01E00B88 MOV X0, X19
	0x01E00B8C LDP X20, X19, [X31 + 0x20]
	0x01E00B90 LDP X22, X21, [X31 + 0x10]
	0x01E00B94 LDR X30, [X31 + 0x8]
	0x01E00B98 FMOV S0, W31
	0x01E00B9C MOV V1.16B, V8.16B
	0x01E00BA0 LDR V8, [X31], #0x30
	0x01E00BA4 B 0x1E008B4
	0x01E00BA8 BL 0x1C16F20
	0x01E00BAC STP D9, D8, [X31 - 0x30]!
	0x01E00BB0 STR X30, [X31 + 0x10]
	0x01E00BB4 STP X20, X19, [X31 + 0x20]
	0x01E00BB8 MOV X19, X1
	0x01E00BBC MOVZ W8, 0x3F000000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+256]
	006 Compare X0, 0
	007 JumpIfEqual {45}
	008 Move W20, W1
	009 Move X1, X31
	010 Call AudioSource.get_isPlaying, X0
	011 Move TEMP, X20
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {28}
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {41}
	019 Move X0, [X19+256]
	020 Compare X0, 0
	021 JumpIfEqual {45}
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X1, X31
	025 Move X30, [X31+32]
	026 Call AudioSource.Play, X0
	027 Return 
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {41}
	032 Move X0, [X19+256]
	033 Compare X0, 0
	034 JumpIfEqual {45}
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X1, X31
	038 Move X30, [X31+32]
	039 Call AudioSource.Stop, X0
	040 Return 
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Return 
	045 Call 0x1C17F20

Method: System.Void SetSawRotation(System.Boolean rotate)

Disassembly:
	0x01DFED68 STR V0, [X31 + 0x3]
	0x01DFED6C LDR V0, [X9 + 0x204]
	0x01DFED70 ADRP X21, 0x22FB000

ISIL:
	001 And W1, W1, 1
	002 Move [X0+296], W1
	003 Call RedGreenView.PlaySawSound, X0, X1
	004 Return 

Method: System.Void SetLightColor(System.Boolean isGreen)

Disassembly:
	0x01DFE97C CBZ X0, 0x1DFEA34
	0x01DFE980 MOV X1, X31
	0x01DFE984 BL 0x3C3F58C
	0x01DFE988 ADRP X21, 0x25DA000
	0x01DFE98C LDRB W8, [X21 + 0x85C]
	0x01DFE990 MOV V11.16B, V0.16B
	0x01DFE994 MOV V12.16B, V1.16B
	0x01DFE998 MOV V13.16B, V2.16B
	0x01DFE99C CBNZ W8, 0x1DFE9B4
	0x01DFE9A0 ADRP X0, 0x22F5000
	0x01DFE9A4 LDR X0, [X0 + 0x5A8]
	0x01DFE9A8 BL 0x1C16CF4
	0x01DFE9AC MOVZ W8, 0x1
	0x01DFE9B0 STRB W8, [X21 + 0x85C]
	0x01DFE9B4 LDR X0, [X20]
	0x01DFE9B8 LDR W8, [X0 + 0xE0]
	0x01DFE9BC CBNZ W8, 0x1DFE9C4
	0x01DFE9C0 BL 0x1C16DFC
	0x01DFE9C4 LDR X8, [X19 + 0xC0]
	0x01DFE9C8 CBZ X8, 0x1DFEA34
	0x01DFE9CC FSUB S0, S8, S11
	0x01DFE9D0 FSUB S1, S9, S12
	0x01DFE9D4 FSUB S2, S10, S13
	0x01DFE9D8 FMUL S0, S0, S0
	0x01DFE9DC FMUL S1, S1, S1
	0x01DFE9E0 LDR V3, [X8 + 0x80]
	0x01DFE9E4 FMUL S2, S2, S2
	0x01DFE9E8 FADD S0, S0, S1
	0x01DFE9EC FADD S0, S2, S0
	0x01DFE9F0 FSQRT S0, S0
	0x01DFE9F4 FCMP S0, S3
	0x01DFE9F8 B.LE 0x1DFEA04
	0x01DFE9FC MOV X0, X19
	0x01DFEA00 BL 0x1DFF638
	0x01DFEA04 LDP X20, X19, [X31 + 0xD0]
	0x01DFEA08 LDP X22, X21, [X31 + 0xC0]
	0x01DFEA0C LDP X24, X23, [X31 + 0xB0]
	0x01DFEA10 LDP X26, X25, [X31 + 0xA0]
	0x01DFEA14 LDP X28, X27, [X31 + 0x90]
	0x01DFEA18 LDR X30, [X31 + 0x80]
	0x01DFEA1C LDP D9, D8, [X31 + 0x70]
	0x01DFEA20 LDP D11, D10, [X31 + 0x60]
	0x01DFEA24 LDP D13, D12, [X31 + 0x50]
	0x01DFEA28 LDP D15, D14, [X31 + 0x40]
	0x01DFEA2C ADD X31, X31, 0xE0
	0x01DFEA30 RET
	0x01DFEA34 BL 0x1C16F20
	0x01DFEA38 BL 0x1C16F20
	0x01DFEA3C BL 0x1C16F20
	0x01DFEA40 BL 0x1C16F20
	0x01DFEA44 BL 0x1C16F20
	0x01DFEA48 BL 0x1C16F28
	0x01DFEA4C B 0x1DFEA78
	0x01DFEA50 B 0x1DFEA78
	0x01DFEA54 B 0x1DFEA78
	0x01DFEA58 B 0x1DFEA78
	0x01DFEA5C B 0x1DFEA78
	0x01DFEA60 B 0x1DFEA78
	0x01DFEA64 B 0x1DFEA78
	0x01DFEA68 B 0x1DFEA78
	0x01DFEA6C B 0x1DFEA78
	0x01DFEA70 B 0x1DFEA78
	0x01DFEA74 B 0x1DFEA78
	0x01DFEA78 MOV X21, X0
	0x01DFEA7C CMP W1, 0x1
	0x01DFEA80 B.NE 0x1DFEAB4
	0x01DFEA84 MOV X0, X21
	0x01DFEA88 BL 0x3EB1AD0
	0x01DFEA8C LDR X22, [X0]
	0x01DFEA90 BL 0x3EB1AE0
	0x01DFEA94 ADRP X8, 0x22FA000
	0x01DFEA98 LDR X8, [X8 + 0xC20]
	0x01DFEA9C ADD X0, X31, 0x20
	0x01DFEAA0 LDR X1, [X8]
	0x01DFEAA4 BL 0x2BC434C
	0x01DFEAA8 CBZ X22, 0x1DFE95C
	0x01DFEAAC MOV X0, X22
	0x01DFEAB0 BL 0x1C16F18

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25DB000
	007 Move W8, [X21+3409]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22FC000
	015 Move X0, [X0+1576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3409], W8
	019 Move X0, [X19+208]
	020 Move TEMP, X20
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {28}
	024 Add X8, X19, 172
	025 Add X9, X19, 176
	026 Add X10, X19, 180
	027 Add X11, X19, 184
	028 Add X8, X19, 188
	029 Add X9, X19, 192
	030 Add X10, X19, 196
	031 Add X11, X19, 200
	032 Compare X0, 0
	033 JumpIfEqual {102}
	034 Move V3, [X11]
	035 Move V2, [X10]
	036 Move V1, [X9]
	037 Move V0, [X8]
	038 Move X1, X31
	039 Call Light.set_color, X0, X1
	040 Move X0, [X19+216]
	041 Compare X0, 0
	042 JumpIfEqual {102}
	043 Move X22, 0x22FC000
	044 Move X22, [X22+1576]
	045 Move X1, X31
	046 Call Renderer.get_material, X0
	047 Move X8, [X22]
	048 Move X21, X0
	049 Move W9, [X8+224]
	050 Compare W9, 0
	051 JumpIfNotEqual {54}
	052 Move X0, X8
	053 Call 0x1C17DFC
	054 Compare X21, 0
	055 JumpIfEqual {102}
	056 Move X8, [X22]
	057 And W31, W20, 1
	058 Move S0, W31
	059 Move S1, 1
	060 Move X8, [X8+184]
	061 NotImplemented "Instruction FCSEL not yet implemented."
	062 Move X0, X21
	063 Move X2, X31
	064 Move W1, [X8]
	065 Call Material.SetFloat, X0, X1, V0
	066 Move TEMP, X20
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {86}
	070 Move X0, [X19+264]
	071 Compare X0, 0
	072 JumpIfEqual {102}
	073 Move X1, X31
	074 Call AudioSource.Play, X0
	075 Move X0, [X19+272]
	076 Compare X0, 0
	077 JumpIfEqual {102}
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, X31
	083 Move X30, [X31+48]
	084 Call AudioSource.Play, X0
	085 Return 
	086 Move X0, [X19+280]
	087 Compare X0, 0
	088 JumpIfEqual {102}
	089 Move X1, X31
	090 Call AudioSource.Play, X0
	091 Move X0, [X19+272]
	092 Compare X0, 0
	093 JumpIfEqual {102}
	094 Move X20, [X31+32]
	095 Move X19, [X31+40]
	096 Move X22, [X31+16]
	097 Move X21, [X31+24]
	098 Move X1, X31
	099 Move X30, [X31+48]
	100 Call AudioSource.Stop, X0
	101 Return 
	102 Call 0x1C17F20

Method: System.Void SetLightEvil(System.Boolean isEvil)

Disassembly:
	0x01DFED74 ADRP X22, 0x22FB000
	0x01DFED78 STR S0, [X31 + 0x10]
	0x01DFED7C LDR X21, [X21 + 0x658]
	0x01DFED80 STR X8, [X31 + 0x40]
	0x01DFED84 LDR X22, [X22 + 0x640]
	0x01DFED88 LDR X1, [X27]
	0x01DFED8C ADD X0, X31, 0x30
	0x01DFED90 BL 0x2BC4350
	0x01DFED94 TBZ X0, 0x0, 0x1DFF12C
	0x01DFED98 LDR X23, [X31 + 0x40]
	0x01DFED9C CBZ X23, 0x1DFF170
	0x01DFEDA0 MOV X0, X23
	0x01DFEDA4 MOV X1, X31
	0x01DFEDA8 BL 0x1DAEC64
	0x01DFEDAC TBNZ X0, 0x0, 0x1DFED88
	0x01DFEDB0 LDR X0, [X23 + 0x90]
	0x01DFEDB4 CBZ X0, 0x1DFF178
	0x01DFEDB8 MOV X1, X31
	0x01DFEDBC BL 0x3C3F58C
	0x01DFEDC0 STR S0, [X31 + 0x14]
	0x01DFEDC4 LDR X0, [X23 + 0x98]
	0x01DFEDC8 CBZ X0, 0x1DFF17C
	0x01DFEDCC MOV V9.16B, V1.16B
	0x01DFEDD0 MOV V10.16B, V2.16B
	0x01DFEDD4 MOV X1, X31
	0x01DFEDD8 BL 0x3C3F58C
	0x01DFEDDC LDR X0, [X23 + 0xA0]
	0x01DFEDE0 CBZ X0, 0x1DFF174
	0x01DFEDE4 MOV V11.16B, V0.16B
	0x01DFEDE8 MOV V12.16B, V1.16B
	0x01DFEDEC MOV V13.16B, V2.16B
	0x01DFEDF0 MOV X1, X31
	0x01DFEDF4 BL 0x3C3F58C
	0x01DFEDF8 LDR X0, [X19 + 0x1E0]
	0x01DFEDFC CBZ X0, 0x1DFF180
	0x01DFEE00 LDR X2, [X28]
	0x01DFEE04 MOV V14.16B, V0.16B
	0x01DFEE08 MOV V15.16B, V1.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25DB000
	006 Move W8, [X21+3410]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22FC000
	014 Move X0, [X0+1576]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3410], W8
	018 Move X0, [X20+216]
	019 Compare X0, 0
	020 JumpIfEqual {49}
	021 Move X21, 0x22FC000
	022 Move X21, [X21+1576]
	023 Move X1, X31
	024 Call Renderer.get_material, X0
	025 Move X8, [X21]
	026 Move X20, X0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1C17DFC
	032 Compare X20, 0
	033 JumpIfEqual {49}
	034 Move X8, [X21]
	035 And W31, W19, 1
	036 Move X0, X20
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X8, [X8+184]
	040 Move S0, W31
	041 Move S1, 1
	042 NotImplemented "Instruction FCSEL not yet implemented."
	043 Move W1, [X8+4]
	044 Move X2, X31
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Call Material.SetFloat, X0, X1, V0
	048 Return 
	049 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01E00BC0 MOV X1, X31
	0x01E00BC4 MOV V8.16B, V1.16B
	0x01E00BC8 MOV V9.16B, V0.16B
	0x01E00BCC MOV X20, X0
	0x01E00BD0 STR W8, [X0 + 0x14]
	0x01E00BD4 BL 0x33BDD8C
	0x01E00BD8 STP S9, S8, [X20 + 0x10]
	0x01E00BDC STR X19, [X20 + 0x18]
	0x01E00BE0 LDP X20, X19, [X31 + 0x20]
	0x01E00BE4 LDR X30, [X31 + 0x10]
	0x01E00BE8 LDP D9, D8, [X31], #0x30
	0x01E00BEC RET
	0x01E00BF0 STP D11, D10, [X31 - 0x40]!
	0x01E00BF4 STP D9, D8, [X31 + 0x10]
	0x01E00BF8 STR X30, [X31 + 0x20]
	0x01E00BFC STP X20, X19, [X31 + 0x30]
	0x01E00C00 ADRP X20, 0x25D8000
	0x01E00C04 ADRP X19, 0x22F8000
	0x01E00C08 LDRB W8, [X20 + 0xD61]
	0x01E00C0C LDR X19, [X19 + 0xD8]
	0x01E00C10 MOV V8.16B, V3.16B
	0x01E00C14 MOV V9.16B, V2.16B
	0x01E00C18 MOV V10.16B, V1.16B
	0x01E00C1C MOV V11.16B, V0.16B
	0x01E00C20 TBNZ X8, 0x0, 0x1E00C38
	0x01E00C24 ADRP X0, 0x22F8000
	0x01E00C28 LDR X0, [X0 + 0xD8]
	0x01E00C2C BL 0x1C16CF4
	0x01E00C30 MOVZ W8, 0x1
	0x01E00C34 STRB W8, [X20 + 0xD61]
	0x01E00C38 LDR X0, [X19]
	0x01E00C3C LDR W8, [X0 + 0xE0]
	0x01E00C40 CBNZ W8, 0x1E00C4C
	0x01E00C44 BL 0x1C16DFC
	0x01E00C48 LDR X0, [X19]
	0x01E00C4C LDR X8, [X0 + 0xB8]
	0x01E00C50 LDR X9, [X8 + 0x18]
	0x01E00C54 CBZ X9, 0x1E00C8C
	0x01E00C58 LDR X0, [X9 + 0x20]
	0x01E00C5C CBZ X0, 0x1E00C8C
	0x01E00C60 LDR W1, [X8 + 0x4]
	0x01E00C64 MOV V2.16B, V9.16B
	0x01E00C68 MOV V3.16B, V8.16B
	0x01E00C6C LDP X20, X19, [X31 + 0x30]
	0x01E00C70 LDR X30, [X31 + 0x20]
	0x01E00C74 LDP D9, D8, [X31 + 0x10]
	0x01E00C78 MOV V0.16B, V11.16B
	0x01E00C7C MOV V1.16B, V10.16B
	0x01E00C80 MOV X2, X31
	0x01E00C84 LDP D11, D10, [X31], #0x40
	0x01E00C88 B 0x3C14988
	0x01E00C8C BL 0x1C16F20
	0x01E00C90 STR X30, [X31 - 0x30]!
	0x01E00C94 STP X22, X21, [X31 + 0x10]
	0x01E00C98 STP X20, X19, [X31 + 0x20]
	0x01E00C9C ADRP X21, 0x25D8000
	0x01E00CA0 ADRP X22, 0x22F9000
	0x01E00CA4 ADRP X20, 0x22F9000
	0x01E00CA8 LDRB W8, [X21 + 0xD62]
	0x01E00CAC LDR X22, [X22 + 0x710]
	0x01E00CB0 LDR X20, [X20 + 0x718]

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move W8, [X0+296]
	013 Compare W8, 0
	014 JumpIfEqual {63}
	015 Move X8, [X0+288]
	016 Move X19, X0
	017 Compare X8, 0
	018 JumpIfEqual {62}
	019 Move X20, 0x22F4000
	020 Move X20, [X20+1440]
	021 Move X22, X31
	022 Move X23, 0x25D9000
	023 Move W24, 1
	024 Move W9, [X8+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Add X8, X8, X22
	028 Move W9, [X23+1926]
	029 Move X21, [X8+32]
	030 Compare W9, 0
	031 JumpIfNotEqual {35}
	032 Move X0, X20
	033 Call 0x1C17CF4
	034 Move [X23+1926], W24
	035 Move X8, [X19+304]
	036 Compare X8, 0
	037 JumpIfEqual {62}
	038 Move W9, [X8+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X9, [X20]
	041 Add X8, X8, X22
	042 Move V11, [X8+32]
	043 Move X0, X31
	044 Move X9, [X9+184]
	045 Move S10, [X9+24]
	046 Move S9, [X9+28]
	047 Move V8, [X9+32]
	048 Call Time.get_deltaTime
	049 Compare X21, 0
	050 JumpIfEqual {62}
	051 Multiply S3, S11, S0
	052 Move X0, X21
	053 Move V0, V10
	054 Move V1, V9
	055 Move V2, V8
	056 Move X1, X31
	057 Call Transform.Rotate, X0, X1, V0
	058 Move X8, [X19+288]
	059 Add X22, X22, 1
	060 Compare X8, 0
	061 JumpIfNotEqual {24}
	062 Call 0x1C17F20
	063 Move X20, [X31+80]
	064 Move X19, [X31+88]
	065 Move X22, [X31+64]
	066 Move X21, [X31+72]
	067 Move X24, [X31+48]
	068 Move X23, [X31+56]
	069 Move X30, [X31+32]
	070 Move D9, [X31+16]
	071 Move D8, [X31+24]
	072 Move D11, [X31+96]
	073 Move D10, [X31+104]
	074 Return 
	075 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x01E00CB4 MOV X19, X0
	0x01E00CB8 TBNZ X8, 0x0, 0x1E00CDC
	0x01E00CBC ADRP X0, 0x22F9000
	0x01E00CC0 LDR X0, [X0 + 0x718]
	0x01E00CC4 BL 0x1C16CF4
	0x01E00CC8 ADRP X0, 0x22F9000
	0x01E00CCC LDR X0, [X0 + 0x710]
	0x01E00CD0 BL 0x1C16CF4
	0x01E00CD4 MOVZ W8, 0x1
	0x01E00CD8 STRB W8, [X21 + 0xD62]
	0x01E00CDC LDR X0, [X22]
	0x01E00CE0 BL 0x1C16F10
	0x01E00CE4 LDR X1, [X20]
	0x01E00CE8 MOV X20, X0
	0x01E00CEC BL 0x24F1248
	0x01E00CF0 STR X20, [X19 + 0x38]
	0x01E00CF4 MOV X0, X19
	0x01E00CF8 LDP X20, X19, [X31 + 0x20]
	0x01E00CFC LDP X22, X21, [X31 + 0x10]
	0x01E00D00 MOV X1, X31
	0x01E00D04 LDR X30, [X31], #0x30
	0x01E00D08 B 0x3C36C30
	0x01E00D0C STP X30, X25, [X31 - 0x40]!
	0x01E00D10 STP X24, X23, [X31 + 0x10]
	0x01E00D14 STP X22, X21, [X31 + 0x20]
	0x01E00D18 STP X20, X19, [X31 + 0x30]
	0x01E00D1C ADRP X24, 0x25D8000
	0x01E00D20 ADRP X25, 0x22F9000
	0x01E00D24 ADRP X19, 0x22F8000
	0x01E00D28 ADRP X23, 0x22F9000
	0x01E00D2C ADRP X22, 0x22F9000
	0x01E00D30 ADRP X21, 0x22F9000
	0x01E00D34 ADRP X20, 0x22F9000
	0x01E00D38 LDR X25, [X25 + 0x720]
	0x01E00D3C LDRB W8, [X24 + 0xD63]
	0x01E00D40 LDR X19, [X19 + 0xD8]
	0x01E00D44 LDR X23, [X23 + 0x728]
	0x01E00D48 LDR X22, [X22 + 0x730]
	0x01E00D4C LDR X21, [X21 + 0x738]
	0x01E00D50 LDR X20, [X20 + 0x740]
	0x01E00D54 TBNZ X8, 0x0, 0x1E00DA8
	0x01E00D58 ADRP X0, 0x22F8000
	0x01E00D5C LDR X0, [X0 + 0xD8]
	0x01E00D60 BL 0x1C16CF4
	0x01E00D64 ADRP X0, 0x22F9000
	0x01E00D68 LDR X0, [X0 + 0x728]
	0x01E00D6C BL 0x1C16CF4
	0x01E00D70 ADRP X0, 0x22F9000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x25D9000
	008 Move X22, 0x22F4000
	009 Move X20, 0x22FA000
	010 Move X21, 0x22F9000
	011 Move W8, [X23+3411]
	012 Move X22, [X22+1592]
	013 Move X20, [X20+1656]
	014 Move X21, [X21+3208]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x22F9000
	021 Move X0, [X0+3208]
	022 Call 0x1C17CF4
	023 Move X0, 0x22F4000
	024 Move X0, [X0+1592]
	025 Call 0x1C17CF4
	026 Move X0, 0x22FA000
	027 Move X0, [X0+1656]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3411], W8
	031 Move X8, -20004864
	032 Move X9, -20000768
	033 Move V0, [X8+45]
	034 Move V1, [X9+121]
	035 Move W1, 8
	036 Move [X19+172], V0
	037 Move [X19+188], V1
	038 Move X0, [X22]
	039 Call 0x1C17D6C
	040 Move X1, [X20]
	041 Move X2, X31
	042 Move X20, X0
	043 Call RuntimeHelpers.InitializeArray, X0, X1
	044 Move [X19+304], X20
	045 Move X0, [X21]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X19
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X1, X31
	056 Move X30, [X31+48]
	057 Move X23, [X31+56]
	058 Call MobView..ctor, X0
	059 Return 

Method: System.Void .cctor()

Disassembly:
	0x01E00D74 LDR X0, [X0 + 0x738]
	0x01E00D78 BL 0x1C16CF4
	0x01E00D7C ADRP X0, 0x22F9000
	0x01E00D80 LDR X0, [X0 + 0x730]
	0x01E00D84 BL 0x1C16CF4
	0x01E00D88 ADRP X0, 0x22F9000
	0x01E00D8C LDR X0, [X0 + 0x720]
	0x01E00D90 BL 0x1C16CF4
	0x01E00D94 ADRP X0, 0x22F9000
	0x01E00D98 LDR X0, [X0 + 0x740]
	0x01E00D9C BL 0x1C16CF4
	0x01E00DA0 MOVZ W8, 0x1
	0x01E00DA4 STRB W8, [X24 + 0xD63]
	0x01E00DA8 LDR X0, [X25]
	0x01E00DAC MOV X1, X31
	0x01E00DB0 BL 0x3C124EC
	0x01E00DB4 LDR X8, [X19]
	0x01E00DB8 MOV X1, X31
	0x01E00DBC LDR X8, [X8 + 0xB8]
	0x01E00DC0 STR W0, [X8]
	0x01E00DC4 LDR X0, [X23]
	0x01E00DC8 BL 0x3C124EC
	0x01E00DCC LDR X8, [X19]
	0x01E00DD0 MOV X1, X31
	0x01E00DD4 LDR X8, [X8 + 0xB8]
	0x01E00DD8 STR W0, [X8 + 0x4]
	0x01E00DDC LDR X0, [X22]
	0x01E00DE0 BL 0x3C124EC
	0x01E00DE4 LDR X8, [X19]
	0x01E00DE8 MOV X1, X31
	0x01E00DEC LDR X8, [X8 + 0xB8]
	0x01E00DF0 STR W0, [X8 + 0x8]
	0x01E00DF4 LDR X0, [X21]
	0x01E00DF8 BL 0x3C124EC
	0x01E00DFC LDR X8, [X19]
	0x01E00E00 MOV X1, X31
	0x01E00E04 LDR X8, [X8 + 0xB8]
	0x01E00E08 STR W0, [X8 + 0xC]
	0x01E00E0C LDR X0, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25D9000
	007 Move X22, 0x22FA000
	008 Move X19, 0x22FA000
	009 Move X20, 0x22FA000
	010 Move W8, [X21+3412]
	011 Move X22, [X22+1664]
	012 Move X19, [X19+1576]
	013 Move X20, [X20+1672]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x22FA000
	019 Move X0, [X0+1576]
	020 Call 0x1C17CF4
	021 Move X0, 0x22FA000
	022 Move X0, [X0+1664]
	023 Call 0x1C17CF4
	024 Move X0, 0x22FA000
	025 Move X0, [X0+1672]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3412], W8
	029 Move X0, [X22]
	030 Move X1, X31
	031 Call Shader.PropertyToID, X0
	032 Move X8, [X19]
	033 Move X1, X31
	034 Move X8, [X8+184]
	035 Move [X8], W0
	036 Move X0, [X20]
	037 Call Shader.PropertyToID, X0
	038 Move X8, [X19]
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X8, [X8+184]
	044 Move [X8+4], W0
	045 Move X30, [X31+48]
	046 Return 

