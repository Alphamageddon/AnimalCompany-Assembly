Type: AnimalCompany.GrabbableItem

Method: AnimalCompany.ItemData get_itemData()

Disassembly:
	0x01D8F880 LDR W8, [X0 + 0xE0]
	0x01D8F884 CBNZ W8, 0x1D8F88C

ISIL:
	001 Move X0, [X0+128]
	002 Return X0

Method: System.Boolean IsContainsType(AnimalCompany.ItemData/Type type, AnimalCompany.ItemData/Type containedType)

Disassembly:
	0x01D8F888 BL 0x1C16DFC
	0x01D8F88C ADRP X8, 0x2367000
	0x01D8F890 LDR X8, [X8 + 0xD60]

ISIL:
	001 NotImplemented "Instruction BICS not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: AnimalCompany.GrabbableItem/TimeoutAction get__timeoutAction()

Disassembly:
	0x01D8F894 MOV X1, X19
	0x01D8F898 LDP X20, X19, [X31 + 0x20]
	0x01D8F89C LDP X22, X21, [X31 + 0x10]
	0x01D8F8A0 LDR X0, [X8]
	0x01D8F8A4 MOVZ W2, 0x7
	0x01D8F8A8 MOV X3, X31
	0x01D8F8AC LDP X30, X23, [X31], #0x30

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+128]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, 2
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: AnimalCompany.GrabbableItem/TimeoutAction get__salesAction()

Disassembly:
	0x01D8F8B8 MOV W2, W31
	0x01D8F8BC MOV X3, X31
	0x01D8F8C0 BL 0x1E9C494
	0x01D8F8C4 MOV X22, X0
	0x01D8F8C8 B 0x1D8F78C
	0x01D8F8CC MOV X0, X31
	0x01D8F8D0 LDR W1, [X19 + 0x68]
	0x01D8F8D4 MOVZ W2, 0x1
	0x01D8F8D8 MOV X3, X31
	0x01D8F8DC BL 0x1E9C23C

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+128]
	003 Compare X8, 0
	004 JumpIfEqual {13}
	005 Move W8, [X8+40]
	006 And W31, W8, 14
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Move W0, W8
	009 ShiftRight W0, 31
	010 And W0, W0, 0x3FFFFFFF
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: AnimalCompany.GrabbableItem/TimeoutAction GetTimeoutAction(AnimalCompany.ItemData/Type type)

Disassembly:
	0x01D8F8B0 B 0x1E77B00
	0x01D8F8B4 MOV W1, W31

ISIL:
	001 Move W0, 2
	002 Return X0

Method: AnimalCompany.GrabbableItem/TimeoutAction GetSalesAction(AnimalCompany.ItemData/Type type)

Disassembly:
	0x01D8F8E0 AND W8, W21, 0x1
	0x01D8F8E4 STUR X0, [X22 + 0x1C]
	0x01D8F8E8 STUR X20, [X22 + 0x24]
	0x01D8F8EC STR W8, [X22 + 0x2C]

ISIL:
	001 And W31, W1, 14
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Move W0, W8
	004 ShiftRight W0, 31
	005 And W0, W0, 0x3FFFFFFF
	006 Return X0

Method: Fusion.NetworkBehaviourId get_attachedAnchorId()

Disassembly:
	0x01D8A6B8 LDP X20, X19, [X31 + 0x90]
	0x01D8A6BC LDP X22, X21, [X31 + 0x80]
	0x01D8A6C0 LDP X30, X23, [X31 + 0x70]
	0x01D8A6C4 LDP D9, D8, [X31 + 0x60]
	0x01D8A6C8 LDP D11, D10, [X31 + 0x50]
	0x01D8A6CC LDP D13, D12, [X31 + 0x40]
	0x01D8A6D0 LDP D15, D14, [X31 + 0x30]
	0x01D8A6D4 ADD X31, X31, 0xA0
	0x01D8A6D8 RET
	0x01D8A6DC MOV X0, X19
	0x01D8A6E0 BL 0x1C171E0
	0x01D8A6E4 BL 0x1C16F20
	0x01D8A6E8 STR X30, [X31 - 0x20]!
	0x01D8A6EC STP X20, X19, [X31 + 0x10]
	0x01D8A6F0 ADRP X20, 0x264E000
	0x01D8A6F4 LDRB W8, [X20 + 0x9C2]
	0x01D8A6F8 MOV X19, X0
	0x01D8A6FC TBNZ X8, 0x0, 0x1D8A714
	0x01D8A700 ADRP X0, 0x236C000
	0x01D8A704 LDR X0, [X0 + 0xA58]
	0x01D8A708 BL 0x1C16CF4
	0x01D8A70C MOVZ W8, 0x1
	0x01D8A710 STRB W8, [X20 + 0x9C2]
	0x01D8A714 CBZ X19, 0x1D8A76C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move X0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x236A000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x236D000
	016 Move X0, [X0+2712]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x236D000
	023 Move X0, [X0+2720]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_attachedAnchorId(Fusion.NetworkBehaviourId value)

Disassembly:
	0x01D8F8F0 CBZ X22, 0x1D8F91C
	0x01D8F8F4 MOVZ W8, 0xA0
	0x01D8F8F8 STR W8, [X22 + 0xC]
	0x01D8F8FC LDR X0, [X19 + 0x38]
	0x01D8F900 CBZ X0, 0x1D8F91C
	0x01D8F904 MOV X1, X22
	0x01D8F908 LDP X20, X19, [X31 + 0x20]
	0x01D8F90C LDP X22, X21, [X31 + 0x10]
	0x01D8F910 MOV X2, X31
	0x01D8F914 LDP X30, X23, [X31], #0x30
	0x01D8F918 B 0x1EA1E24
	0x01D8F91C BL 0x1C16F20
	0x01D8F920 SUB X31, X31, 0x90
	0x01D8F924 STP D15, D14, [X31 + 0x20]
	0x01D8F928 STP D13, D12, [X31 + 0x30]
	0x01D8F92C STP D11, D10, [X31 + 0x40]
	0x01D8F930 STP D9, D8, [X31 + 0x50]
	0x01D8F934 STP X30, X23, [X31 + 0x60]
	0x01D8F938 STP X22, X21, [X31 + 0x70]
	0x01D8F93C STP X20, X19, [X31 + 0x80]
	0x01D8F940 STP S5, S6, [X31 + 0x18]
	0x01D8F944 STP S3, S4, [X31 + 0x10]
	0x01D8F948 STR S2, [X31 + 0xC]
	0x01D8F94C ADRP X23, 0x2649000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], X1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2365000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2368000
	016 Move X0, [X0+2712]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2368000
	023 Move X0, [X0+3216]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: Fusion.NetworkBehaviourId get_backpackId()

Disassembly:
	0x01D8F6F8 BL 0x3C32E90
	0x01D8F6FC CBZ X0, 0x1D8F734
	0x01D8F700 MOV X1, X31
	0x01D8F704 BL 0x3C3F58C
	0x01D8F708 MOV X0, X20
	0x01D8F70C LDP X20, X19, [X31 + 0x20]
	0x01D8F710 LDP X22, X21, [X31 + 0x10]
	0x01D8F714 FMOV S3, 1
	0x01D8F718 MOV X1, X31
	0x01D8F71C LDR X30, [X31], #0x30
	0x01D8F720 B 0x1DC15C4
	0x01D8F724 LDP X20, X19, [X31 + 0x20]
	0x01D8F728 LDP X22, X21, [X31 + 0x10]
	0x01D8F72C LDR X30, [X31], #0x30
	0x01D8F730 RET
	0x01D8F734 BL 0x1C16F20
	0x01D8F738 STP X30, X23, [X31 - 0x30]!
	0x01D8F73C STP X22, X21, [X31 + 0x10]
	0x01D8F740 STP X20, X19, [X31 + 0x20]
	0x01D8F744 ADRP X23, 0x2649000
	0x01D8F748 LDRB W8, [X23 + 0x9EF]
	0x01D8F74C MOV X22, X3
	0x01D8F750 MOV W21, W2
	0x01D8F754 MOV X20, X1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move X0, [X8+8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2365000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2368000
	016 Move X0, [X0+3192]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2368000
	023 Move X0, [X0+3200]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_backpackId(Fusion.NetworkBehaviourId value)

Disassembly:
	0x01D8F950 ADRP X22, 0x2364000
	0x01D8F954 LDP S10, S8, [X31 + 0xA4]
	0x01D8F958 LDR V9, [X31 + 0xA0]
	0x01D8F95C LDP S12, S15, [X31 + 0x94]
	0x01D8F960 LDRB W8, [X23 + 0x9F1]
	0x01D8F964 LDR V11, [X31 + 0x90]
	0x01D8F968 LDR X22, [X22 + 0x598]
	0x01D8F96C MOV W19, W2
	0x01D8F970 MOV W20, W1
	0x01D8F974 MOV V13.16B, V1.16B
	0x01D8F978 MOV V14.16B, V0.16B
	0x01D8F97C MOV X21, X0
	0x01D8F980 TBNZ X8, 0x0, 0x1D8F998
	0x01D8F984 ADRP X0, 0x2364000
	0x01D8F988 LDR X0, [X0 + 0x598]
	0x01D8F98C BL 0x1C16CF4
	0x01D8F990 MOVZ W8, 0x1
	0x01D8F994 STRB W8, [X23 + 0x9F1]
	0x01D8F998 LDR X0, [X22]
	0x01D8F99C LDR X22, [X21 + 0x150]
	0x01D8F9A0 LDR W8, [X0 + 0xE0]
	0x01D8F9A4 CBNZ W8, 0x1D8F9AC
	0x01D8F9A8 BL 0x1C16DFC
	0x01D8F9AC MOV X0, X22

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+8], X1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2365000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2368000
	016 Move X0, [X0+3192]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2368000
	023 Move X0, [X0+3224]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: AnimalCompany.GrabbedInfo get_grabbedInfo()

Disassembly:
	0x01D8F9B0 MOV X1, X31
	0x01D8F9B4 MOV X2, X31
	0x01D8F9B8 BL 0x3C354F8
	0x01D8F9BC TBZ X0, 0x0, 0x1D8FA18
	0x01D8F9C0 LDR X1, [X21 + 0x150]
	0x01D8F9C4 STP S9, S10, [X31 + 0xA0]
	0x01D8F9C8 STP S11, S12, [X31 + 0x90]
	0x01D8F9CC STR S8, [X31 + 0xA8]
	0x01D8F9D0 AND W2, W20, 0x1
	0x01D8F9D4 AND W3, W19, 0x1
	0x01D8F9D8 STR S15, [X31 + 0x98]
	0x01D8F9DC MOV X0, X21
	0x01D8F9E0 MOV V0.16B, V14.16B
	0x01D8F9E4 MOV V1.16B, V13.16B
	0x01D8F9E8 LDP S2, S3, [X31 + 0xC]
	0x01D8F9EC LDP S4, S5, [X31 + 0x14]
	0x01D8F9F0 LDR V6, [X31 + 0x1C]
	0x01D8F9F4 LDP X20, X19, [X31 + 0x80]
	0x01D8F9F8 LDP X22, X21, [X31 + 0x70]
	0x01D8F9FC LDP X30, X23, [X31 + 0x60]
	0x01D8FA00 LDP D9, D8, [X31 + 0x50]
	0x01D8FA04 LDP D11, D10, [X31 + 0x40]
	0x01D8FA08 LDP D13, D12, [X31 + 0x30]
	0x01D8FA0C LDP D15, D14, [X31 + 0x20]
	0x01D8FA10 ADD X31, X31, 0x90
	0x01D8FA14 B 0x1D89718
	0x01D8FA18 LDP X20, X19, [X31 + 0x80]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X9, [X0+80]
	004 Compare X9, 0
	005 JumpIfEqual {13}
	006 NotImplemented "Instruction LDUR not yet implemented."
	007 Move V1, [X9+1]
	008 Move [X8+12], V0
	009 Move [X8], V1
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0
	013 Move X0, 0x2365000
	014 Move X0, [X0+1456]
	015 Call 0x1C17D08
	016 Call 0x1C17F10
	017 Move X19, X0
	018 Move X0, 0x2368000
	019 Move X0, [X0+3232]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X19
	023 Move X2, X31
	024 Call InvalidOperationException..ctor, X0, X1
	025 Move X0, 0x2368000
	026 Move X0, [X0+3240]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X19
	030 Call 0x1C17DEC

Method: System.Void set_grabbedInfo(AnimalCompany.GrabbedInfo value)

Disassembly:
	0x01D8FA1C LDP X22, X21, [X31 + 0x70]
	0x01D8FA20 LDP X30, X23, [X31 + 0x60]
	0x01D8FA24 LDP D9, D8, [X31 + 0x50]
	0x01D8FA28 LDP D11, D10, [X31 + 0x40]
	0x01D8FA2C LDP D13, D12, [X31 + 0x30]
	0x01D8FA30 LDP D15, D14, [X31 + 0x20]
	0x01D8FA34 ADD X31, X31, 0x90
	0x01D8FA38 RET
	0x01D8FA3C SUB X31, X31, 0x90
	0x01D8FA40 STP D15, D14, [X31 + 0x20]
	0x01D8FA44 STP D13, D12, [X31 + 0x30]
	0x01D8FA48 STP D11, D10, [X31 + 0x40]
	0x01D8FA4C STP D9, D8, [X31 + 0x50]
	0x01D8FA50 STP X30, X23, [X31 + 0x60]
	0x01D8FA54 STP X22, X21, [X31 + 0x70]
	0x01D8FA58 STP X20, X19, [X31 + 0x80]
	0x01D8FA5C ADRP X23, 0x2649000
	0x01D8FA60 MOV V13.16B, V3.16B
	0x01D8FA64 MOV V9.16B, V2.16B
	0x01D8FA68 MOV V10.16B, V1.16B
	0x01D8FA6C MOV V15.16B, V0.16B
	0x01D8FA70 LDP S0, S14, [X31 + 0xA4]
	0x01D8FA74 LDR V1, [X31 + 0xA0]
	0x01D8FA78 LDP S2, S11, [X31 + 0x94]
	0x01D8FA7C LDRB W8, [X23 + 0x9F2]
	0x01D8FA80 LDR V3, [X31 + 0x90]
	0x01D8FA84 MOV W19, W3
	0x01D8FA88 MOV W20, W2
	0x01D8FA8C MOV V12.16B, V5.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {15}
	006 Move W9, [X1+24]
	007 Move X10, [X1+16]
	008 Move V0, [X1]
	009 Move [X8+40], W9
	010 Move [X8+32], X10
	011 Move [X8+1], V0
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Move X0, 0x2365000
	016 Move X0, [X0+1456]
	017 Call 0x1C17D08
	018 Call 0x1C17F10
	019 Move X19, X0
	020 Move X0, 0x2368000
	021 Move X0, [X0+3232]
	022 Call 0x1C17D08
	023 Move X1, X0
	024 Move X0, X19
	025 Move X2, X31
	026 Call InvalidOperationException..ctor, X0, X1
	027 Move X0, 0x2368000
	028 Move X0, [X0+3248]
	029 Call 0x1C17D08
	030 Move X1, X0
	031 Move X0, X19
	032 Call 0x1C17DEC

Method: System.Boolean get_isHidden()

Disassembly:
	0x01D8FA90 MOV V8.16B, V4.16B
	0x01D8FA94 MOV X22, X1
	0x01D8FA98 MOV X21, X0
	0x01D8FA9C TBNZ X8, 0x0, 0x1D8FB18
	0x01D8FAA0 ADRP X0, 0x2367000
	0x01D8FAA4 LDR X0, [X0 + 0xA78]
	0x01D8FAA8 STP S11, S15, [X31 + 0x18]
	0x01D8FAAC STP S14, S10, [X31 + 0x10]
	0x01D8FAB0 STR S9, [X31 + 0xC]
	0x01D8FAB4 MOV V9.16B, V13.16B
	0x01D8FAB8 MOV V13.16B, V8.16B
	0x01D8FABC MOV V8.16B, V12.16B
	0x01D8FAC0 MOV V12.16B, V6.16B
	0x01D8FAC4 MOV V15.16B, V0.16B
	0x01D8FAC8 MOV V11.16B, V1.16B
	0x01D8FACC MOV V10.16B, V2.16B
	0x01D8FAD0 MOV V14.16B, V3.16B
	0x01D8FAD4 BL 0x1C16CF4
	0x01D8FAD8 ADRP X0, 0x2367000
	0x01D8FADC LDR X0, [X0 + 0xD68]
	0x01D8FAE0 BL 0x1C16CF4
	0x01D8FAE4 MOV V3.16B, V14.16B
	0x01D8FAE8 MOV V2.16B, V10.16B
	0x01D8FAEC MOV V1.16B, V11.16B
	0x01D8FAF0 MOV V0.16B, V15.16B
	0x01D8FAF4 MOV V6.16B, V12.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+44]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2365000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x2368000
	018 Move X0, [X0+3256]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x2368000
	025 Move X0, [X0+3264]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_isHidden(System.Boolean value)

Disassembly:
	0x01D8FAF8 MOV V12.16B, V8.16B
	0x01D8FAFC MOV V8.16B, V13.16B
	0x01D8FB00 MOV V13.16B, V9.16B
	0x01D8FB04 LDP S9, S14, [X31 + 0xC]
	0x01D8FB08 LDP S10, S11, [X31 + 0x14]
	0x01D8FB0C LDR V15, [X31 + 0x1C]
	0x01D8FB10 MOVZ W8, 0x1
	0x01D8FB14 STRB W8, [X23 + 0x9F2]
	0x01D8FB18 LDRB W8, [X21 + 0x58]
	0x01D8FB1C CBZ W8, 0x1D8FB7C
	0x01D8FB20 STRB W31, [X21 + 0x58]
	0x01D8FB24 STP S1, S0, [X31 + 0xA0]
	0x01D8FB28 STP S3, S2, [X31 + 0x90]
	0x01D8FB2C STR S14, [X31 + 0xA8]
	0x01D8FB30 AND W2, W20, 0x1
	0x01D8FB34 AND W3, W19, 0x1
	0x01D8FB38 STR S11, [X31 + 0x98]
	0x01D8FB3C MOV X0, X21
	0x01D8FB40 MOV V0.16B, V15.16B
	0x01D8FB44 MOV V1.16B, V10.16B
	0x01D8FB48 MOV V2.16B, V9.16B
	0x01D8FB4C MOV V3.16B, V13.16B
	0x01D8FB50 MOV V4.16B, V8.16B
	0x01D8FB54 MOV V5.16B, V12.16B
	0x01D8FB58 LDP X20, X19, [X31 + 0x80]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8+44], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x2365000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x2368000
	017 Move X0, [X0+3256]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x2368000
	024 Move X0, [X0+3272]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: Fusion.NetworkId get_stuckAnchorId()

Disassembly:
	0x01D8FB5C LDP X22, X21, [X31 + 0x70]
	0x01D8FB60 LDP X30, X23, [X31 + 0x60]
	0x01D8FB64 LDP D9, D8, [X31 + 0x50]
	0x01D8FB68 LDP D11, D10, [X31 + 0x40]
	0x01D8FB6C LDP D13, D12, [X31 + 0x30]
	0x01D8FB70 LDP D15, D14, [X31 + 0x20]
	0x01D8FB74 ADD X31, X31, 0x90
	0x01D8FB78 B 0x1D8FD4C
	0x01D8FB7C STP S3, S2, [X31 + 0xC]
	0x01D8FB80 STP S1, S0, [X31 + 0x14]
	0x01D8FB84 STR S6, [X31 + 0x1C]
	0x01D8FB88 ADRP X23, 0x2367000
	0x01D8FB8C LDR X23, [X23 + 0xA78]
	0x01D8FB90 LDR X0, [X23]
	0x01D8FB94 LDR W8, [X0 + 0xE0]
	0x01D8FB98 CBNZ W8, 0x1D8FBA0
	0x01D8FB9C BL 0x1C16DFC
	0x01D8FBA0 MOV X0, X21
	0x01D8FBA4 MOV X1, X31
	0x01D8FBA8 BL 0x1E77B08
	0x01D8FBAC LDR X0, [X21 + 0x38]
	0x01D8FBB0 CBZ X0, 0x1D8FD48
	0x01D8FBB4 MOV X1, X31
	0x01D8FBB8 BL 0x1E9E538

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+48]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2365000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2368000
	016 Move X0, [X0+3280]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2368000
	023 Move X0, [X0+3288]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_stuckAnchorId(Fusion.NetworkId value)

Disassembly:
	0x01D8FBBC CMP W0, 0x4
	0x01D8FBC0 B.NE 0x1D8FBE8
	0x01D8FBC4 LDP X20, X19, [X31 + 0x80]
	0x01D8FBC8 LDP X22, X21, [X31 + 0x70]
	0x01D8FBCC LDP X30, X23, [X31 + 0x60]
	0x01D8FBD0 LDP D9, D8, [X31 + 0x50]
	0x01D8FBD4 LDP D11, D10, [X31 + 0x40]
	0x01D8FBD8 LDP D13, D12, [X31 + 0x30]
	0x01D8FBDC LDP D15, D14, [X31 + 0x20]
	0x01D8FBE0 ADD X31, X31, 0x90
	0x01D8FBE4 RET
	0x01D8FBE8 LDR X0, [X21 + 0x40]
	0x01D8FBEC CBZ X0, 0x1D8FD48
	0x01D8FBF0 MOV X1, X31
	0x01D8FBF4 BL 0x1E94078
	0x01D8FBF8 ANDS W31, W0, 0x7
	0x01D8FBFC B.EQ 0x1D8FC60
	0x01D8FC00 LDP S0, S6, [X31 + 0x18]
	0x01D8FC04 LDP S2, S1, [X31 + 0x10]
	0x01D8FC08 LDR V3, [X31 + 0xC]
	0x01D8FC0C TBNZ X0, 0x0, 0x1D8FB24
	0x01D8FC10 LDR X8, [X21 + 0x38]
	0x01D8FC14 CBZ X8, 0x1D8FD48
	0x01D8FC18 LDR X0, [X8 + 0x50]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+48], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2365000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2368000
	016 Move X0, [X0+3280]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2368000
	023 Move X0, [X0+3296]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: AnimalCompany.SpawnInfo get_spawnInfo()

Disassembly:
	0x01D8FC1C CBZ X0, 0x1D8FD48
	0x01D8FC20 MOV X1, X31
	0x01D8FC24 BL 0x1EC4D00
	0x01D8FC28 TBZ X0, 0x0, 0x1D8FBC4
	0x01D8FC2C LDR X8, [X21 + 0x38]
	0x01D8FC30 CBZ X8, 0x1D8FD48
	0x01D8FC34 LDR X0, [X8 + 0x50]
	0x01D8FC38 MOVZ W1, 0x4C
	0x01D8FC3C MOV X2, X31
	0x01D8FC40 BL 0x1ED9318
	0x01D8FC44 LDR X8, [X21 + 0x40]
	0x01D8FC48 CBZ X8, 0x1D8FD48
	0x01D8FC4C LDR X8, [X8 + 0x20]
	0x01D8FC50 MOV X23, X0
	0x01D8FC54 CBZ X8, 0x1D8FCB0
	0x01D8FC58 LDR W0, [X8]
	0x01D8FC5C B 0x1D8FCB4
	0x01D8FC60 LDR X0, [X23]
	0x01D8FC64 LDR X19, [X21 + 0x40]
	0x01D8FC68 LDR W8, [X0 + 0xE0]
	0x01D8FC6C CBNZ W8, 0x1D8FC74
	0x01D8FC70 BL 0x1C16DFC
	0x01D8FC74 ADRP X8, 0x2367000
	0x01D8FC78 LDR X8, [X8 + 0xD68]
	0x01D8FC7C MOV X1, X19
	0x01D8FC80 LDP X20, X19, [X31 + 0x80]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X9, [X0+80]
	004 Compare X9, 0
	005 JumpIfEqual {13}
	006 NotImplemented "Instruction LDUR not yet implemented."
	007 NotImplemented "Instruction LDUR not yet implemented."
	008 Move [X8], V1
	009 Move [X8+8], V0
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0
	013 Move X0, 0x2365000
	014 Move X0, [X0+1456]
	015 Call 0x1C17D08
	016 Call 0x1C17F10
	017 Move X19, X0
	018 Move X0, 0x2368000
	019 Move X0, [X0+3304]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X19
	023 Move X2, X31
	024 Call InvalidOperationException..ctor, X0, X1
	025 Move X0, 0x2368000
	026 Move X0, [X0+3312]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X19
	030 Call 0x1C17DEC

Method: System.Void set_spawnInfo(AnimalCompany.SpawnInfo value)

Disassembly:
	0x01D8FC84 LDP X22, X21, [X31 + 0x70]
	0x01D8FC88 LDR X0, [X8]
	0x01D8FC8C LDP X30, X23, [X31 + 0x60]
	0x01D8FC90 LDP D9, D8, [X31 + 0x50]
	0x01D8FC94 LDP D11, D10, [X31 + 0x40]
	0x01D8FC98 LDP D13, D12, [X31 + 0x30]
	0x01D8FC9C LDP D15, D14, [X31 + 0x20]
	0x01D8FCA0 MOVZ W2, 0x7
	0x01D8FCA4 MOV X3, X31
	0x01D8FCA8 ADD X31, X31, 0x90
	0x01D8FCAC B 0x1E77B00
	0x01D8FCB0 MOV X0, X31
	0x01D8FCB4 LDR W1, [X21 + 0x68]
	0x01D8FCB8 MOVZ W2, 0x2
	0x01D8FCBC MOV X3, X31
	0x01D8FCC0 BL 0x1E9C23C
	0x01D8FCC4 LDR V1, [X31 + 0x1C]
	0x01D8FCC8 LDR V0, [X31 + 0xC]
	0x01D8FCCC AND W8, W20, 0x1
	0x01D8FCD0 AND W9, W19, 0x1
	0x01D8FCD4 STUR X0, [X23 + 0x1C]
	0x01D8FCD8 STP S1, S0, [X23 + 0x44]
	0x01D8FCDC LDR V0, [X31 + 0x10]
	0x01D8FCE0 LDR V1, [X31 + 0x14]
	0x01D8FCE4 STUR X22, [X23 + 0x24]
	0x01D8FCE8 STP S15, S10, [X23 + 0x2C]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {13}
	006 Move V1, [X1]
	007 Move V0, [X1+16]
	008 Move [X8+68], V0
	009 Move [X8+52], V1
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Move X0, 0x2365000
	014 Move X0, [X0+1456]
	015 Call 0x1C17D08
	016 Call 0x1C17F10
	017 Move X19, X0
	018 Move X0, 0x2368000
	019 Move X0, [X0+3304]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X19
	023 Move X2, X31
	024 Call InvalidOperationException..ctor, X0, X1
	025 Move X0, 0x2368000
	026 Move X0, [X0+3320]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X19
	030 Call 0x1C17DEC

Method: Fusion.TickTimer get_respawnTimer()

Disassembly:
	0x01D8FCEC STP S0, S11, [X23 + 0x4C]
	0x01D8FCF0 LDR V0, [X31 + 0x18]
	0x01D8FCF4 STP S9, S13, [X23 + 0x34]
	0x01D8FCF8 STP S8, S12, [X23 + 0x3C]
	0x01D8FCFC STR S14, [X23 + 0x5C]
	0x01D8FD00 STP S1, S0, [X23 + 0x54]
	0x01D8FD04 STP W8, W9, [X23 + 0x60]
	0x01D8FD08 CBZ X23, 0x1D8FD48
	0x01D8FD0C MOVZ W8, 0x260
	0x01D8FD10 STR W8, [X23 + 0xC]
	0x01D8FD14 LDR X0, [X21 + 0x38]
	0x01D8FD18 CBZ X0, 0x1D8FD48
	0x01D8FD1C MOV X1, X23
	0x01D8FD20 LDP X20, X19, [X31 + 0x80]
	0x01D8FD24 LDP X22, X21, [X31 + 0x70]
	0x01D8FD28 LDP X30, X23, [X31 + 0x60]
	0x01D8FD2C LDP D9, D8, [X31 + 0x50]
	0x01D8FD30 LDP D11, D10, [X31 + 0x40]
	0x01D8FD34 LDP D13, D12, [X31 + 0x30]
	0x01D8FD38 LDP D15, D14, [X31 + 0x20]
	0x01D8FD3C MOV X2, X31
	0x01D8FD40 ADD X31, X31, 0x90
	0x01D8FD44 B 0x1EA1E24
	0x01D8FD48 BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+84]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2365000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2368000
	016 Move X0, [X0+3328]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2368000
	023 Move X0, [X0+3336]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_respawnTimer(Fusion.TickTimer value)

Disassembly:
	0x01D8FD4C SUB X31, X31, 0x90
	0x01D8FD50 STP D15, D14, [X31 + 0x10]
	0x01D8FD54 STP D13, D12, [X31 + 0x20]
	0x01D8FD58 STP D11, D10, [X31 + 0x30]
	0x01D8FD5C STP D9, D8, [X31 + 0x40]
	0x01D8FD60 STR X30, [X31 + 0x50]
	0x01D8FD64 STP X24, X23, [X31 + 0x60]
	0x01D8FD68 STP X22, X21, [X31 + 0x70]
	0x01D8FD6C STP X20, X19, [X31 + 0x80]
	0x01D8FD70 MOV V9.16B, V0.16B
	0x01D8FD74 LDR V7, [X31 + 0xA8]
	0x01D8FD78 LDR V0, [X31 + 0xA4]
	0x01D8FD7C ADRP X22, 0x2649000
	0x01D8FD80 LDRB W8, [X22 + 0x9F3]
	0x01D8FD84 MOV W19, W3
	0x01D8FD88 STP S0, S7, [X31 + 0x8]
	0x01D8FD8C LDR V0, [X31 + 0xA0]
	0x01D8FD90 LDR V7, [X31 + 0x98]
	0x01D8FD94 MOV W21, W2
	0x01D8FD98 MOV V14.16B, V6.16B
	0x01D8FD9C STR S0, [X31 + 0x4]
	0x01D8FDA0 LDP S10, S0, [X31 + 0x90]
	0x01D8FDA4 MOV V15.16B, V5.16B
	0x01D8FDA8 MOV V11.16B, V4.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+84], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2365000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2368000
	016 Move X0, [X0+3328]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2368000
	023 Move X0, [X0+3344]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Boolean get_wasPurchased()

Disassembly:
	0x01D8FDAC MOV V12.16B, V3.16B
	0x01D8FDB0 MOV V13.16B, V2.16B

ISIL:
	001 Move W0, [X0+328]
	002 Return X0

Method: System.Void set_wasPurchased(System.Boolean value)

Disassembly:
	0x01D8FDB4 MOV V8.16B, V1.16B
	0x01D8FDB8 MOV X20, X0
	0x01D8FDBC STP S0, S7, [X31 + 0x58]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+328], W8
	003 Return 

Method: AnimalCompany.AttachedItemAnchor get_itemAnchor()

Disassembly:
	0x01D8FDC0 TBNZ X8, 0x0, 0x1D8FDE4
	0x01D8FDC4 ADRP X0, 0x2364000

ISIL:
	001 Move X0, [X0+336]
	002 Return X0

Method: UnityEngine.Rigidbody get_itemRigidbody()

Disassembly:
	0x01D8FDC8 LDR X0, [X0 + 0x598]
	0x01D8FDCC BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+360]
	002 Return X0

Method: UnityEngine.Transform get_followTransform()

Disassembly:
	0x01D8FDD0 ADRP X0, 0x2367000
	0x01D8FDD4 LDR X0, [X0 + 0xD70]

ISIL:
	001 Move X0, [X0+376]
	002 Return X0

Method: UnityEngine.Transform get_stuckAnchorTransform()

Disassembly:
	0x01D8FDD8 BL 0x1C16CF4
	0x01D8FDDC MOVZ W8, 0x1

ISIL:
	001 Move X0, [X0+424]
	002 Return X0

Method: UnityEngine.Transform get_stickTransform()

Disassembly:
	0x01D8FDE0 STRB W8, [X22 + 0x9F3]
	0x01D8FDE4 MOV X0, X20

ISIL:
	001 Move X0, [X0+176]
	002 Return X0

Method: System.Boolean get_allowAttachToBack()

Disassembly:
	0x01D8FDE8 BL 0x1D896B8
	0x01D8FDEC MOV X22, X0

ISIL:
	001 Move W0, [X0+140]
	002 Return X0

Method: System.Boolean get_allowAddToBag()

Disassembly:
	0x01D8FDF0 MOV X0, X31
	0x01D8FDF4 BL 0x1E769D8
	0x01D8FDF8 ADRP X24, 0x2649000
	0x01D8FDFC LDRB W8, [X24 + 0xA20]
	0x01D8FE00 MOV X23, X0
	0x01D8FE04 CBNZ W8, 0x1D8FE1C
	0x01D8FE08 ADRP X0, 0x2367000
	0x01D8FE0C LDR X0, [X0 + 0x398]
	0x01D8FE10 BL 0x1C16CF4
	0x01D8FE14 MOVZ W8, 0x1
	0x01D8FE18 STRB W8, [X24 + 0xA20]
	0x01D8FE1C ADRP X8, 0x2367000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+141]
	004 Compare W8, 0
	005 JumpIfEqual {12}
	006 Move X19, X0
	007 Call GrabbableItem.get_isStuck, X0
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {16}
	012 Move W0, W31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return X0
	016 Move X0, X19
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call GrabbableItem.get_isVisible, X0
	020 Return X0

Method: System.Boolean get_allowAttachToItem()

Disassembly:
	0x01D8FEB8 FMOV S3, 1
	0x01D8FEBC MOV X0, X21
	0x01D8FEC0 MOV X1, X31
	0x01D8FEC4 BL 0x1DC15C4
	0x01D8FEC8 MOV X0, X20
	0x01D8FECC BL 0x1D90054
	0x01D8FED0 LDR X0, [X20 + 0x168]
	0x01D8FED4 CBZ X0, 0x1D90018
	0x01D8FED8 MOV V0.16B, V9.16B
	0x01D8FEDC MOV V1.16B, V8.16B
	0x01D8FEE0 MOV V2.16B, V13.16B
	0x01D8FEE4 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+142]
	004 Compare W8, 0
	005 JumpIfEqual {12}
	006 Move X19, X0
	007 Call GrabbableItem.get_isStuck, X0
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {16}
	012 Move W0, W31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return X0
	016 Move X0, X19
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call GrabbableItem.get_isVisible, X0
	020 Return X0

Method: System.Boolean get_canGrab()

Disassembly:
	0x01D89EBC LDR W1, [X19 + 0x80]
	0x01D89EC0 LDR X4, [X8 + 0x18]
	0x01D89EC4 LDR X0, [X8 + 0x40]
	0x01D89EC8 LDR X3, [X8 + 0x28]
	0x01D89ECC LDP X20, X19, [X31 + 0x10]
	0x01D89ED0 LDP X30, X21, [X31], #0x20
	0x01D89ED4 BR X4
	0x01D89ED8 LDP X20, X19, [X31 + 0x10]
	0x01D89EDC LDP X30, X21, [X31], #0x20
	0x01D89EE0 RET
	0x01D89EE4 STR X30, [X31 - 0x30]!
	0x01D89EE8 STP X22, X21, [X31 + 0x10]
	0x01D89EEC STP X20, X19, [X31 + 0x20]
	0x01D89EF0 ADRP X22, 0x264F000
	0x01D89EF4 ADRP X21, 0x236A000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call GrabbableItem.get_isAttached, X0
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {13}
	009 Move W0, W31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0
	013 Move X0, X19
	014 Call GrabbableItem.get_isStuck, X0
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {22}
	019 Move W8, [X19+192]
	020 Compare W8, 0
	021 JumpIfEqual {9}
	022 Move X0, X19
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Call GrabbableItem.get_isVisible, X0
	026 Return X0

Method: System.Boolean get_isInterested()

Disassembly:
	0x01D8FEE8 BL 0x3C8F014
	0x01D8FEEC LDR X0, [X20 + 0x168]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Boolean get_isVisible()

Disassembly:
	0x01D8AD0C STP X30, X19, [X31 - 0x10]!
	0x01D8AD10 LDR X8, [X0 + 0x50]
	0x01D8AD14 CBZ X8, 0x1D8AD24
	0x01D8AD18 LDR W0, [X8]
	0x01D8AD1C LDP X30, X19, [X31], #0x10
	0x01D8AD20 RET
	0x01D8AD24 ADRP X0, 0x2369000
	0x01D8AD28 LDR X0, [X0 + 0x5B0]
	0x01D8AD2C BL 0x1C16D08
	0x01D8AD30 BL 0x1C16F10
	0x01D8AD34 MOV X19, X0
	0x01D8AD38 ADRP X0, 0x236C000
	0x01D8AD3C LDR X0, [X0 + 0xAD8]
	0x01D8AD40 BL 0x1C16D08
	0x01D8AD44 MOV X1, X0
	0x01D8AD48 MOV X0, X19
	0x01D8AD4C MOV X2, X31
	0x01D8AD50 BL 0x337DF1C
	0x01D8AD54 ADRP X0, 0x236C000
	0x01D8AD58 LDR X0, [X0 + 0xAE0]
	0x01D8AD5C BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call GrabbableItem.get_netObjectExists, X0
	006 Move TEMP, X0
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {16}
	010 Move X0, X19
	011 Call GrabbableItem.get_isHidden, X0
	012 Move TEMP, X0
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfNotEqual {17}
	016 Move W8, W31
	017 Move X0, X19
	018 Call GrabbableItem.get_backpackId, X0
	019 Move [X31+8], X0
	020 Add X0, X31, 8
	021 Move X1, X31
	022 Call NetworkBehaviourId.get_IsValid, X0
	023 Xor W8, W0, 1
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 And W0, W8, 1
	027 Add X31, X31, 32
	028 Return X0

Method: System.Boolean get_isAttached()

Disassembly:
	0x01D8E0A8 BL 0x1C16DEC
	0x01D8E0AC STP X30, X23, [X31 - 0x30]!
	0x01D8E0B0 STP X22, X21, [X31 + 0x10]
	0x01D8E0B4 STP X20, X19, [X31 + 0x20]
	0x01D8E0B8 ADRP X20, 0x264A000
	0x01D8E0BC LDRB W8, [X20 + 0x9E3]
	0x01D8E0C0 MOV X19, X0
	0x01D8E0C4 TBNZ X8, 0x0, 0x1D8E0F4
	0x01D8E0C8 ADRP X0, 0x2366000
	0x01D8E0CC LDR X0, [X0 + 0xE70]
	0x01D8E0D0 BL 0x1C16CF4
	0x01D8E0D4 ADRP X0, 0x2368000
	0x01D8E0D8 LDR X0, [X0 + 0xC58]
	0x01D8E0DC BL 0x1C16CF4
	0x01D8E0E0 ADRP X0, 0x2368000
	0x01D8E0E4 LDR X0, [X0 + 0xC60]
	0x01D8E0E8 BL 0x1C16CF4
	0x01D8E0EC MOVZ W8, 0x1
	0x01D8E0F0 STRB W8, [X20 + 0x9E3]
	0x01D8E0F4 LDR X23, [X19 + 0x80]
	0x01D8E0F8 CBZ X23, 0x1D8E1E4
	0x01D8E0FC ADRP X22, 0x2366000
	0x01D8E100 LDR X22, [X22 + 0xE70]
	0x01D8E104 ADRP X21, 0x2368000
	0x01D8E108 LDR X20, [X23 + 0x1D0]
	0x01D8E10C LDR X0, [X22]
	0x01D8E110 LDR X21, [X21 + 0xC60]
	0x01D8E114 BL 0x1C16F10
	0x01D8E118 LDR X2, [X21]
	0x01D8E11C MOV X1, X19
	0x01D8E120 MOV X3, X31
	0x01D8E124 MOV X21, X0
	0x01D8E128 BL 0x3314368
	0x01D8E12C MOV X0, X20
	0x01D8E130 MOV X1, X21
	0x01D8E134 MOV X2, X31
	0x01D8E138 BL 0x33C0DE4
	0x01D8E13C LDR X1, [X22]
	0x01D8E140 CBZ X0, 0x1D8E164
	0x01D8E144 LDR X8, [X0]
	0x01D8E148 CMP X8, X1
	0x01D8E14C B.NE 0x1D8E1CC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Call GrabbableItem.get_attachedAnchorId, X0
	008 Move X20, X0
	009 Move X0, X31
	010 Call NetworkBehaviourId.get_None
	011 Move X22, 0x264B000
	012 Move W8, [X22+2592]
	013 Move X21, X0
	014 Compare W8, 0
	015 JumpIfNotEqual {21}
	016 Move X0, 0x2369000
	017 Move X0, [X0+920]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2592], W8
	021 Move X8, 0x2369000
	022 Move X8, [X8+920]
	023 Move X0, [X8]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X8, X21
	030 ShiftRight X8, 32
	031 And X8, X8, 0x7FFFFFFF
	032 Move X9, X20
	033 ShiftRight X9, 32
	034 And X9, X9, 0x7FFFFFFF
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W0, W31
	037 Move X0, X19
	038 Call GrabbableItem.get_attachedAnchorId, X0
	039 Move [X31+8], X0
	040 Add X0, X31, 8
	041 Move X1, X31
	042 Call NetworkBehaviourId.get_IsValid, X0
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 And W0, W0, 1
	048 Move X30, [X31+48]
	049 Return X0

Method: System.Boolean get_isStuck()

Disassembly:
	0x01D8FE20 LDR X8, [X8 + 0x398]
	0x01D8FE24 LDR X0, [X8]
	0x01D8FE28 LDR W8, [X0 + 0xE0]
	0x01D8FE2C CBNZ W8, 0x1D8FE34
	0x01D8FE30 BL 0x1C16DFC
	0x01D8FE34 CMP W22, W23
	0x01D8FE38 B.NE 0x1D8FE4C
	0x01D8FE3C UBFM X8, X23, 0x20, 0x3F
	0x01D8FE40 UBFM X9, X22, 0x20, 0x3F
	0x01D8FE44 CMP W9, W8
	0x01D8FE48 B.EQ 0x1D8FFF0
	0x01D8FE4C MOV X0, X20
	0x01D8FE50 BL 0x1D9001C
	0x01D8FE54 MOV X0, X31
	0x01D8FE58 BL 0x1E769D8
	0x01D8FE5C MOV X1, X0
	0x01D8FE60 MOV X0, X20
	0x01D8FE64 BL 0x1D8E8F0
	0x01D8FE68 TBZ X21, 0x0, 0x1D8FEC8
	0x01D8FE6C ADRP X8, 0x2364000
	0x01D8FE70 LDR X8, [X8 + 0x598]
	0x01D8FE74 LDR X21, [X20 + 0xE0]
	0x01D8FE78 LDR X0, [X8]
	0x01D8FE7C LDR W8, [X0 + 0xE0]
	0x01D8FE80 CBNZ W8, 0x1D8FE88
	0x01D8FE84 BL 0x1C16DFC
	0x01D8FE88 MOV X0, X21
	0x01D8FE8C MOV X1, X31
	0x01D8FE90 MOV X2, X31
	0x01D8FE94 BL 0x3C354F8
	0x01D8FE98 TBZ X0, 0x0, 0x1D8FEC8
	0x01D8FE9C LDR X21, [X20 + 0xE0]
	0x01D8FEA0 MOV X0, X20
	0x01D8FEA4 MOV X1, X31
	0x01D8FEA8 BL 0x3C32E90
	0x01D8FEAC CBZ X0, 0x1D90018
	0x01D8FEB0 MOV X1, X31
	0x01D8FEB4 BL 0x3C3F58C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x264A000
	006 Move X21, 0x2368000
	007 Move W8, [X20+2537]
	008 Move X21, [X21+920]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2368000
	015 Move X0, [X0+920]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2537], W8
	019 Move X0, X19
	020 Call GrabbableItem.get_stuckAnchorId, X0
	021 Move X8, [X21]
	022 Move X20, X0
	023 Move W9, [X8+224]
	024 Compare W9, 0
	025 JumpIfEqual {39}
	026 Compare W20, 0
	027 JumpIfEqual {43}
	028 Move X0, X19
	029 Call GrabbableItem.get_stuckAnchorId, X0
	030 Move X8, [X21]
	031 Move X19, X0
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {37}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSET not yet implemented."
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Compare W20, 0
	042 JumpIfNotEqual {28}
	043 Move W0, W31
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return X0

Method: System.Boolean get_netObjectExists()

Disassembly:
	0x01D8FEF0 CBZ X0, 0x1D90018
	0x01D8FEF4 MOV V0.16B, V12.16B
	0x01D8FEF8 MOV V1.16B, V11.16B
	0x01D8FEFC MOV V2.16B, V15.16B
	0x01D8FF00 MOV V3.16B, V14.16B
	0x01D8FF04 MOV X1, X31
	0x01D8FF08 BL 0x3C8F148
	0x01D8FF0C LDR X0, [X20 + 0x168]
	0x01D8FF10 CBZ X0, 0x1D90018
	0x01D8FF14 MOV X1, X31
	0x01D8FF18 BL 0x3C8EBE8
	0x01D8FF1C MOV X0, X20
	0x01D8FF20 MOV X1, X31
	0x01D8FF24 BL 0x3C32ECC
	0x01D8FF28 CBZ X0, 0x1D90018
	0x01D8FF2C MOV X1, X31
	0x01D8FF30 BL 0x3C333E4
	0x01D8FF34 ADRP X8, 0x2367000
	0x01D8FF38 LDR X8, [X8 + 0xD70]
	0x01D8FF3C MOV X2, X31
	0x01D8FF40 LDR X1, [X8]
	0x01D8FF44 BL 0x321BA08
	0x01D8FF48 LDR X0, [X20 + 0x168]
	0x01D8FF4C CBZ X0, 0x1D90018
	0x01D8FF50 LDP S1, S2, [X31 + 0x58]
	0x01D8FF54 MOV V0.16B, V10.16B
	0x01D8FF58 MOV X1, X31
	0x01D8FF5C BL 0x3C8E908
	0x01D8FF60 LDR X0, [X20 + 0x168]
	0x01D8FF64 CBZ X0, 0x1D90018
	0x01D8FF68 LDP S0, S1, [X31 + 0x4]
	0x01D8FF6C LDR V2, [X31 + 0xC]
	0x01D8FF70 MOV X1, X31
	0x01D8FF74 BL 0x3C8EA40
	0x01D8FF78 LDR X0, [X20 + 0x170]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x264A000
	006 Move X20, 0x2365000
	007 Move W8, [X21+2538]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2365000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2538], W8
	019 Move X0, [X20]
	020 Move X20, [X19+56]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {44}
	033 Move X0, [X19+56]
	034 Compare X0, 0
	035 JumpIfEqual {50}
	036 Move X1, [X19+64]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X2, X31
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call NetworkRunner.Exists, X0, X1
	043 Return X0
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move W0, W31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Return X0
	050 Call 0x1C17F20

Method: AnimalCompany.FingerUsage get_lockedFingerUsage()

Disassembly:
	0x01D8FF7C CBZ X0, 0x1D90018
	0x01D8FF80 LDR X8, [X0]

ISIL:
	001 Move W0, [X0+188]
	002 Return X0

Method: System.Boolean get_isCollidingEnvironment()

Disassembly:
	0x01D8FF84 MOV W1, W31
	0x01D8FF88 LDP X9, X2, [X8 + 0x1F8]

ISIL:
	001 Move W0, [X0+384]
	002 Return X0

Method: System.Boolean TryGetHandSide(out AnimalCompany.HandSide handSide)

Disassembly:
	0x01D8FF8C BLR X9
	0x01D8FF90 TBZ X19, 0x0, 0x1D8FFAC
	0x01D8FF94 LDR X8, [X20 + 0x1F8]
	0x01D8FF98 CBZ X8, 0x1D8FFAC
	0x01D8FF9C LDR X9, [X8 + 0x18]
	0x01D8FFA0 LDR X0, [X8 + 0x40]
	0x01D8FFA4 LDR X1, [X8 + 0x28]
	0x01D8FFA8 BLR X9
	0x01D8FFAC LDR X8, [X20 + 0x218]
	0x01D8FFB0 CBZ X8, 0x1D8FFF0
	0x01D8FFB4 LDR X2, [X8 + 0x18]
	0x01D8FFB8 LDR X0, [X8 + 0x40]
	0x01D8FFBC LDR X1, [X8 + 0x28]
	0x01D8FFC0 MOV V0.16B, V10.16B
	0x01D8FFC4 LDP S1, S2, [X31 + 0x58]
	0x01D8FFC8 LDP X20, X19, [X31 + 0x80]
	0x01D8FFCC LDP X22, X21, [X31 + 0x70]
	0x01D8FFD0 LDP X24, X23, [X31 + 0x60]
	0x01D8FFD4 LDR X30, [X31 + 0x50]
	0x01D8FFD8 LDP D9, D8, [X31 + 0x40]
	0x01D8FFDC LDP D11, D10, [X31 + 0x30]
	0x01D8FFE0 LDP D13, D12, [X31 + 0x20]
	0x01D8FFE4 LDP D15, D14, [X31 + 0x10]
	0x01D8FFE8 ADD X31, X31, 0x90
	0x01D8FFEC BR X2
	0x01D8FFF0 LDP X20, X19, [X31 + 0x80]
	0x01D8FFF4 LDP X22, X21, [X31 + 0x70]
	0x01D8FFF8 LDP X24, X23, [X31 + 0x60]
	0x01D8FFFC LDR X30, [X31 + 0x50]
	0x01D90000 LDP D9, D8, [X31 + 0x40]
	0x01D90004 LDP D11, D10, [X31 + 0x30]
	0x01D90008 LDP D13, D12, [X31 + 0x20]
	0x01D9000C LDP D15, D14, [X31 + 0x10]
	0x01D90010 ADD X31, X31, 0x90
	0x01D90014 RET
	0x01D90018 BL 0x1C16F20
	0x01D9001C STP X30, X19, [X31 - 0x10]!
	0x01D90020 LDR X8, [X0 + 0x80]
	0x01D90024 CBZ X8, 0x1D90050

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x264A000
	007 Move X21, 0x2365000
	008 Move W8, [X22+2539]
	009 Move X21, [X21+1432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2365000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2539], W8
	021 Move X0, [X21]
	022 Move X21, [X20+336]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X21
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {41}
	035 Move X8, [X20+336]
	036 Compare X8, 0
	037 JumpIfEqual {50}
	038 Move W8, [X8+128]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CSET not yet implemented."
	041 Move W8, 1
	042 Move [X19], W8
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 And W0, W0, 1
	048 Move X30, [X31+48]
	049 Return X0
	050 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerable`1<AnimalCompany.GrabbableItem> get_allLootItems()

Disassembly:
	0x01D90028 MOV X19, X0
	0x01D9002C LDR X0, [X0 + 0x38]
	0x01D90030 MOVZ W8, 0x43960000
	0x01D90034 FMOV S0, W8
	0x01D90038 MOV X1, X31
	0x01D9003C BL 0x1E91E68
	0x01D90040 AND X1, X0, 0x0
	0x01D90044 MOV X0, X19
	0x01D90048 LDP X30, X19, [X31], #0x10
	0x01D9004C B 0x1D8ED4C
	0x01D90050 BL 0x1C16F20
	0x01D90054 STP D15, D14, [X31 - 0xA0]!
	0x01D90058 STP D13, D12, [X31 + 0x10]
	0x01D9005C STP D11, D10, [X31 + 0x20]
	0x01D90060 STP D9, D8, [X31 + 0x30]
	0x01D90064 STP X29, X30, [X31 + 0x40]
	0x01D90068 STP X28, X27, [X31 + 0x50]
	0x01D9006C STP X26, X25, [X31 + 0x60]
	0x01D90070 STP X24, X23, [X31 + 0x70]
	0x01D90074 STP X22, X21, [X31 + 0x80]
	0x01D90078 STP X20, X19, [X31 + 0x90]
	0x01D9007C SUB X31, X31, 0x400

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2649000
	005 Move X19, 0x2367000
	006 Move W8, [X20+2540]
	007 Move X19, [X19+3352]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2367000
	013 Move X0, [X0+3352]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2540], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void Awake()

Disassembly:
	0x01D90080 MRS X23, 0xC000
	0x01D90084 LDR X8, [X23 + 0x28]
	0x01D90088 ADRP X20, 0x2648000
	0x01D9008C MOV X19, X0
	0x01D90090 STR X8, [X31 + 0x3F8]
	0x01D90094 LDRB W8, [X20 + 0x9FF]
	0x01D90098 TBNZ X8, 0x0, 0x1D90104
	0x01D9009C ADRP X0, 0x2364000
	0x01D900A0 LDR X0, [X0 + 0xE70]
	0x01D900A4 BL 0x1C16CF4
	0x01D900A8 ADRP X0, 0x2366000
	0x01D900AC LDR X0, [X0 + 0xD78]
	0x01D900B0 BL 0x1C16CF4
	0x01D900B4 ADRP X0, 0x2366000
	0x01D900B8 LDR X0, [X0 + 0x418]
	0x01D900BC BL 0x1C16CF4
	0x01D900C0 ADRP X0, 0x2366000
	0x01D900C4 LDR X0, [X0 + 0xD80]
	0x01D900C8 BL 0x1C16CF4
	0x01D900CC ADRP X0, 0x2366000
	0x01D900D0 LDR X0, [X0 + 0xD88]
	0x01D900D4 BL 0x1C16CF4
	0x01D900D8 ADRP X0, 0x2366000
	0x01D900DC LDR X0, [X0 + 0xD90]
	0x01D900E0 BL 0x1C16CF4
	0x01D900E4 ADRP X0, 0x2363000
	0x01D900E8 LDR X0, [X0 + 0x598]
	0x01D900EC BL 0x1C16CF4
	0x01D900F0 ADRP X0, 0x2366000
	0x01D900F4 LDR X0, [X0 + 0xD98]
	0x01D900F8 BL 0x1C16CF4
	0x01D900FC MOVZ W8, 0x1
	0x01D90100 STRB W8, [X20 + 0x9FF]
	0x01D90104 MOVI V0.2D, 0x0
	0x01D90108 STP V0, V0, [X31 + 0x3B0]
	0x01D9010C STP V0, V0, [X31 + 0x390]
	0x01D90110 STP V0, V0, [X31 + 0x370]
	0x01D90114 STP V0, V0, [X31 + 0x350]
	0x01D90118 STP V0, V0, [X31 + 0x330]
	0x01D9011C STP V0, V0, [X31 + 0x310]
	0x01D90120 STP V0, V0, [X31 + 0x2F0]
	0x01D90124 STP V0, V0, [X31 + 0x2D0]
	0x01D90128 STP V0, V0, [X31 + 0x2B0]
	0x01D9012C STP V0, V0, [X31 + 0x290]
	0x01D90130 LDR X8, [X19 + 0x1C0]
	0x01D90134 CBZ X8, 0x1D90148
	0x01D90138 LDR X9, [X8 + 0x18]
	0x01D9013C LDR X0, [X8 + 0x40]
	0x01D90140 LDR X1, [X8 + 0x28]
	0x01D90144 BLR X9
	0x01D90148 ADRP X24, 0x2363000
	0x01D9014C LDR X24, [X24 + 0x598]
	0x01D90150 MOVZ W1, 0x1
	0x01D90154 MOV X0, X19
	0x01D90158 BL 0x1D91694
	0x01D9015C MOV X0, X19
	0x01D90160 BL 0x1D8D0A8
	0x01D90164 ADD X20, X19, 0x150
	0x01D90168 STR X31, [X19 + 0x178]
	0x01D9016C STP X31, X31, [X19 + 0x150]
	0x01D90170 TBZ X0, 0x0, 0x1D905E8
	0x01D90174 LDR X21, [X19 + 0x38]
	0x01D90178 MOV X0, X19
	0x01D9017C BL 0x1D896B8
	0x01D90180 CBZ X21, 0x1D913B8
	0x01D90184 ADRP X8, 0x2366000
	0x01D90188 LDR X8, [X8 + 0xD90]
	0x01D9018C MOV X1, X0
	0x01D90190 MOV X0, X21
	0x01D90194 MOV X2, X20
	0x01D90198 LDR X3, [X8]
	0x01D9019C BL 0x222BD98
	0x01D901A0 TBZ X0, 0x0, 0x1D90708
	0x01D901A4 LDR X0, [X20]
	0x01D901A8 CBZ X0, 0x1D913B8
	0x01D901AC ADRP X8, 0x2366000
	0x01D901B0 LDR X8, [X8 + 0xD78]
	0x01D901B4 LDR X1, [X8]
	0x01D901B8 BL 0x21A3894
	0x01D901BC STR X0, [X19 + 0x158]
	0x01D901C0 MOV X0, X19
	0x01D901C4 BL 0x1D92278
	0x01D901C8 LDR X0, [X19 + 0x150]
	0x01D901CC CBZ X0, 0x1D913B8
	0x01D901D0 LDR X8, [X0 + 0x40]
	0x01D901D4 CBZ X8, 0x1D906FC
	0x01D901D8 LDRB W9, [X8 + 0x60]
	0x01D901DC TBNZ X9, 0x1, 0x1D906FC
	0x01D901E0 MOV X0, X8
	0x01D901E4 MOV X1, X31
	0x01D901E8 BL 0x1E93668
	0x01D901EC TBZ X0, 0x0, 0x1D906F4
	0x01D901F0 LDRB W8, [X19 + 0x8B]
	0x01D901F4 CBZ W8, 0x1D909DC
	0x01D901F8 LDR X8, [X20]
	0x01D901FC CBZ X8, 0x1D913B8
	0x01D90200 LDR W8, [X8 + 0x80]
	0x01D90204 CMP W8, 0x1
	0x01D90208 B.HI 0x1D909DC
	0x01D9020C MOV X0, X19
	0x01D90210 MOV X1, X31
	0x01D90214 BL 0x3C32E90
	0x01D90218 CBZ X0, 0x1D913B8
	0x01D9021C MOV X1, X31
	0x01D90220 BL 0x3C3F58C
	0x01D90224 MOV X0, X19
	0x01D90228 MOV X1, X31
	0x01D9022C MOV V12.16B, V0.16B
	0x01D90230 MOV V15.16B, V1.16B
	0x01D90234 MOV V14.16B, V2.16B
	0x01D90238 BL 0x3C32E90
	0x01D9023C CBZ X0, 0x1D913B8
	0x01D90240 ADRP X8, 0x2366000
	0x01D90244 LDR X8, [X8 + 0x418]
	0x01D90248 LDR X1, [X8]
	0x01D9024C BL 0x21A453C
	0x01D90250 CBZ X0, 0x1D913B8
	0x01D90254 LDR W8, [X0 + 0x18]
	0x01D90258 MOV X21, X0
	0x01D9025C CMP W8, 0x1
	0x01D90260 B.LT 0x1D90344
	0x01D90264 MOVN W9, 0x80800000
	0x01D90268 MOV W25, W31
	0x01D9026C FMOV S11, W9
	0x01D90270 CMP W25, W8
	0x01D90274 B.CS 0x1D913BC
	0x01D90278 ADD X22, X21, W25, 0x3, SXTW
	0x01D9027C LDR X0, [X22 + 0x20]!
	0x01D90280 CBZ X0, 0x1D913B8
	0x01D90284 MOV X1, X31
	0x01D90288 BL 0x3C8F70C
	0x01D9028C TBZ X0, 0x0, 0x1D90334
	0x01D90290 LDR W8, [X21 + 0x18]
	0x01D90294 CMP W25, W8
	0x01D90298 B.CS 0x1D913BC
	0x01D9029C LDR X0, [X22]
	0x01D902A0 CBZ X0, 0x1D913B8
	0x01D902A4 MOV X1, X31
	0x01D902A8 BL 0x3C8F78C
	0x01D902AC TBNZ X0, 0x0, 0x1D90334
	0x01D902B0 LDR W8, [X21 + 0x18]
	0x01D902B4 CMP W25, W8
	0x01D902B8 B.CS 0x1D913BC
	0x01D902BC LDR X0, [X19 + 0x178]
	0x01D902C0 CBZ X0, 0x1D913B8
	0x01D902C4 LDR X22, [X22]
	0x01D902C8 MOV X1, X31
	0x01D902CC BL 0x3C3F58C
	0x01D902D0 CBZ X22, 0x1D913B8
	0x01D902D4 MOV X0, X22
	0x01D902D8 MOV X1, X31
	0x01D902DC BL 0x3C8F80C
	0x01D902E0 LDR X0, [X19 + 0x178]
	0x01D902E4 CBZ X0, 0x1D913B8
	0x01D902E8 MOV X1, X31
	0x01D902EC MOV V8.16B, V0.16B
	0x01D902F0 MOV V9.16B, V1.16B
	0x01D902F4 MOV V10.16B, V2.16B
	0x01D902F8 BL 0x3C3F58C
	0x01D902FC FSUB S0, S0, S8
	0x01D90300 FSUB S1, S1, S9
	0x01D90304 FSUB S2, S2, S10
	0x01D90308 FMUL S0, S0, S0
	0x01D9030C FMUL S1, S1, S1
	0x01D90310 FADD S0, S0, S1
	0x01D90314 FMUL S1, S2, S2
	0x01D90318 FADD S0, S1, S0
	0x01D9031C FCMP S0, S11
	0x01D90320 B.PL 0x1D90334
	0x01D90324 MOV V11.16B, V0.16B
	0x01D90328 MOV V14.16B, V10.16B

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x2649000
	010 Move X25, 0x2367000
	011 Move X20, 0x2367000
	012 Move X23, 0x2367000
	013 Move X22, 0x2367000
	014 Move X21, 0x2367000
	015 Move W8, [X24+2541]
	016 Move X25, [X25+2968]
	017 Move X20, [X20+3360]
	018 Move X23, [X23+3368]
	019 Move X22, [X22+3376]
	020 Move X21, [X21+3384]
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {55}
	026 Move X0, 0x2367000
	027 Move X0, [X0+3392]
	028 Call 0x1C17CF4
	029 Move X0, 0x2367000
	030 Move X0, [X0+3376]
	031 Call 0x1C17CF4
	032 Move X0, 0x2367000
	033 Move X0, [X0+2648]
	034 Call 0x1C17CF4
	035 Move X0, 0x2367000
	036 Move X0, [X0+3360]
	037 Call 0x1C17CF4
	038 Move X0, 0x2367000
	039 Move X0, [X0+2968]
	040 Call 0x1C17CF4
	041 Move X0, 0x2367000
	042 Move X0, [X0+3400]
	043 Call 0x1C17CF4
	044 Move X0, 0x2367000
	045 Move X0, [X0+3408]
	046 Call 0x1C17CF4
	047 Move X0, 0x2367000
	048 Move X0, [X0+3384]
	049 Call 0x1C17CF4
	050 Move X0, 0x2367000
	051 Move X0, [X0+3368]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X24+2541], W8
	055 Move X1, [X25]
	056 Move X0, X19
	057 Call 0x21A4894, X0
	058 Move [X19+360], X0
	059 Move X1, [X20]
	060 Move X0, X19
	061 Call 0x21A4894, X0
	062 Move [X19+368], X0
	063 Move X8, [X23]
	064 Move X0, [X22]
	065 Move X8, [X8+184]
	066 Move X20, [X8+40]
	067 Call 0x1C17F10
	068 Move X2, [X21]
	069 Move X1, X19
	070 Move X3, X31
	071 Move X21, X0
	072 Call Action`1<PlayerRef>..ctor, X0, X1, X2
	073 Move X0, X20
	074 Move X1, X21
	075 Move X2, X31
	076 Call Delegate.Combine, X0, X1
	077 Move X20, [X22]
	078 Compare X0, 0
	079 JumpIfEqual {97}
	080 Move X1, X20
	081 Move X21, X0
	082 Call 0x1C17E00
	083 Compare X0, 0
	084 JumpIfEqual {187}
	085 Move X8, [X23]
	086 Move X8, [X8+184]
	087 Move [X8+40], X0
	088 Move X20, [X22]
	089 Move X0, X21
	090 Move X1, X20
	091 Call 0x1C17E00
	092 Compare X0, 0
	093 JumpIfEqual {187}
	094 Move X8, [X23]
	095 Move X20, [X22]
	096 Move X8, [X8+184]
	097 Move X8, [X23]
	098 Move X8, [X8+184]
	099 Move [X8+40], X31
	100 Move X24, 0x2367000
	101 Move X21, [X8+48]
	102 Move X24, [X24+3408]
	103 Move X0, X20
	104 Call 0x1C17F10
	105 Move X2, [X24]
	106 Move X1, X19
	107 Move X3, X31
	108 Move X20, X0
	109 Call Action`1<PlayerRef>..ctor, X0, X1, X2
	110 Move X0, X21
	111 Move X1, X20
	112 Move X2, X31
	113 Call Delegate.Combine, X0, X1
	114 Compare X0, 0
	115 JumpIfEqual {134}
	116 Move X21, [X22]
	117 Move X20, X0
	118 Move X1, X21
	119 Call 0x1C17E00
	120 Compare X0, 0
	121 JumpIfEqual {131}
	122 Move X8, [X23]
	123 Move X8, [X8+184]
	124 Move [X8+48], X0
	125 Move X21, [X22]
	126 Move X0, X20
	127 Move X1, X21
	128 Call 0x1C17E00
	129 Compare X0, 0
	130 JumpIfNotEqual {137}
	131 Move X0, X20
	132 Move X1, X21
	133 Call 0x1C181E0
	134 Move X8, [X23]
	135 Move X8, [X8+184]
	136 Move [X8+48], X31
	137 Move X22, 0x2367000
	138 Move X22, [X22+2648]
	139 Move X23, 0x2367000
	140 Move X21, 0x2367000
	141 Move X8, [X22]
	142 Move X8, [X8+184]
	143 Move X23, [X23+3392]
	144 Move X20, [X8]
	145 Move X0, [X23]
	146 Move X21, [X21+3400]
	147 Call 0x1C17F10
	148 Move X2, [X21]
	149 Move X1, X19
	150 Move X3, X31
	151 Move X21, X0
	152 Call Action`1<NetworkBehaviourId>..ctor, X0, X1, X2
	153 Move X0, X20
	154 Move X1, X21
	155 Move X2, X31
	156 Call Delegate.Combine, X0, X1
	157 Compare X0, 0
	158 JumpIfEqual {175}
	159 Move X20, [X23]
	160 Move X19, X0
	161 Move X1, X20
	162 Call 0x1C17E00
	163 Compare X0, 0
	164 JumpIfEqual {174}
	165 Move X8, [X22]
	166 Move X8, [X8+184]
	167 Move [X8], X0
	168 Move X20, [X23]
	169 Move X0, X19
	170 Move X1, X20
	171 Call 0x1C17E00
	172 Compare X0, 0
	173 JumpIfNotEqual {178}
	174 Move X0, X19
	175 Move X8, [X22]
	176 Move X8, [X8+184]
	177 Move [X8], X31
	178 Move X20, [X31+48]
	179 Move X19, [X31+56]
	180 Move X22, [X31+32]
	181 Move X21, [X31+40]
	182 Move X24, [X31+16]
	183 Move X23, [X31+24]
	184 Move X30, [X31+64]
	185 Move X25, [X31+72]
	186 Return 
	187 Move X0, X21
	188 Move X1, X20
	189 Call 0x1C181E0

Method: System.Void OnDestroy()

Disassembly:
	0x01D9032C MOV V15.16B, V9.16B
	0x01D90330 MOV V12.16B, V8.16B
	0x01D90334 LDR W8, [X21 + 0x18]
	0x01D90338 ADD W25, W25, 0x1
	0x01D9033C CMP W25, W8
	0x01D90340 B.LT 0x1D90270
	0x01D90344 LDR X0, [X19 + 0x178]
	0x01D90348 CBZ X0, 0x1D913B8
	0x01D9034C MOV X1, X31
	0x01D90350 BL 0x3C3DEB4
	0x01D90354 MOV X0, X31
	0x01D90358 BL 0x3C2A260
	0x01D9035C LDR X0, [X19 + 0xD0]
	0x01D90360 CBZ X0, 0x1D913B8
	0x01D90364 MOV X1, X31
	0x01D90368 MOV V8.16B, V0.16B
	0x01D9036C MOV V9.16B, V1.16B
	0x01D90370 MOV V10.16B, V2.16B
	0x01D90374 MOV V11.16B, V3.16B
	0x01D90378 BL 0x3C3F58C
	0x01D9037C FSUB S4, S0, S12
	0x01D90380 FSUB S5, S1, S15
	0x01D90384 FSUB S6, S2, S14
	0x01D90388 MOV V0.16B, V8.16B
	0x01D9038C MOV V1.16B, V9.16B
	0x01D90390 MOV V2.16B, V10.16B
	0x01D90394 MOV V3.16B, V11.16B
	0x01D90398 MOV X0, X31
	0x01D9039C STR S12, [X31 + 0xC]
	0x01D903A0 BL 0x3C2A9FC
	0x01D903A4 MOV X0, X19
	0x01D903A8 MOV X1, X31
	0x01D903AC MOV V11.16B, V0.16B
	0x01D903B0 MOV V12.16B, V1.16B
	0x01D903B4 MOV V13.16B, V2.16B
	0x01D903B8 BL 0x3C32E90
	0x01D903BC CBZ X0, 0x1D913B8
	0x01D903C0 ADD X8, X31, 0x250
	0x01D903C4 MOV X1, X31
	0x01D903C8 BL 0x3C3FF0C
	0x01D903CC LDP V0, V1, [X31 + 0x250]
	0x01D903D0 LDP V2, V3, [X31 + 0x270]
	0x01D903D4 ADD X0, X31, 0x390
	0x01D903D8 MOV X1, X31
	0x01D903DC STP V0, V1, [X31 + 0x390]
	0x01D903E0 STP V2, V3, [X31 + 0x3B0]
	0x01D903E4 BL 0x3C26F30
	0x01D903E8 LDR X0, [X19 + 0x178]
	0x01D903EC CBZ X0, 0x1D913B8
	0x01D903F0 MOV X1, X31
	0x01D903F4 BL 0x3C3DEB4
	0x01D903F8 LDR X0, [X19 + 0xD0]
	0x01D903FC CBZ X0, 0x1D913B8
	0x01D90400 MOV V0.16B, V11.16B
	0x01D90404 MOV V1.16B, V12.16B
	0x01D90408 MOV V2.16B, V13.16B
	0x01D9040C MOV X1, X31
	0x01D90410 BL 0x3C3EC04
	0x01D90414 LDR X0, [X19 + 0x178]
	0x01D90418 CBZ X0, 0x1D913B8
	0x01D9041C LDR X21, [X19 + 0xD0]
	0x01D90420 MOV X1, X31
	0x01D90424 STP S15, S14, [X31 + 0x4]
	0x01D90428 BL 0x3C3DEB4
	0x01D9042C MOV X0, X31
	0x01D90430 BL 0x3C2A260
	0x01D90434 MOV X0, X19
	0x01D90438 MOV X1, X31
	0x01D9043C MOV V13.16B, V0.16B
	0x01D90440 MOV V12.16B, V1.16B
	0x01D90444 MOV V11.16B, V2.16B
	0x01D90448 MOV V14.16B, V3.16B
	0x01D9044C BL 0x3C32E90
	0x01D90450 CBZ X0, 0x1D913B8
	0x01D90454 MOV X1, X31
	0x01D90458 BL 0x3C3DEB4
	0x01D9045C LDR X0, [X19 + 0xD0]
	0x01D90460 CBZ X0, 0x1D913B8
	0x01D90464 MOV X1, X31
	0x01D90468 MOV V9.16B, V0.16B
	0x01D9046C MOV V8.16B, V1.16B
	0x01D90470 MOV V15.16B, V2.16B
	0x01D90474 MOV V10.16B, V3.16B
	0x01D90478 BL 0x3C3F830
	0x01D9047C CBZ X21, 0x1D913B8
	0x01D90480 FMUL S4, S14, S9
	0x01D90484 FMUL S5, S13, S10
	0x01D90488 FMUL S16, S14, S8
	0x01D9048C FMUL S17, S12, S10
	0x01D90490 FMUL S21, S13, S9
	0x01D90494 FMUL S24, S14, S15
	0x01D90498 FMUL S25, S14, S10
	0x01D9049C FMUL S26, S11, S10
	0x01D904A0 FMUL S6, S12, S15
	0x01D904A4 FMUL S18, S11, S9
	0x01D904A8 FMUL S20, S13, S8
	0x01D904AC FMUL S23, S12, S8
	0x01D904B0 FADD S4, S4, S5
	0x01D904B4 FADD S5, S16, S17
	0x01D904B8 FADD S16, S24, S26
	0x01D904BC FSUB S17, S25, S21
	0x01D904C0 FMUL S7, S11, S8
	0x01D904C4 FMUL S19, S13, S15
	0x01D904C8 FMUL S22, S12, S9
	0x01D904CC FMUL S27, S11, S15
	0x01D904D0 FADD S4, S6, S4
	0x01D904D4 FADD S5, S18, S5
	0x01D904D8 FADD S6, S20, S16
	0x01D904DC FSUB S16, S17, S23
	0x01D904E0 FSUB S4, S4, S7
	0x01D904E4 FSUB S5, S5, S19
	0x01D904E8 FSUB S6, S6, S22
	0x01D904EC FSUB S7, S16, S27
	0x01D904F0 FMUL S16, S7, S3
	0x01D904F4 FMUL S17, S4, S0
	0x01D904F8 FMUL S18, S5, S1
	0x01D904FC FMUL S19, S6, S2
	0x01D90500 FMUL S20, S4, S1
	0x01D90504 FMUL S21, S7, S2
	0x01D90508 FMUL S22, S6, S3
	0x01D9050C FMUL S23, S5, S0
	0x01D90510 FMUL S24, S5, S3
	0x01D90514 FMUL S5, S5, S2
	0x01D90518 FMUL S25, S4, S2
	0x01D9051C FMUL S2, S4, S3
	0x01D90520 FMUL S3, S6, S0
	0x01D90524 FMUL S0, S7, S0
	0x01D90528 FMUL S4, S7, S1
	0x01D9052C FMUL S6, S6, S1
	0x01D90530 FSUB S1, S16, S17
	0x01D90534 FADD S7, S21, S22
	0x01D90538 FADD S4, S4, S24
	0x01D9053C FADD S0, S0, S2
	0x01D90540 FSUB S1, S1, S18
	0x01D90544 FADD S2, S20, S7
	0x01D90548 FADD S4, S3, S4
	0x01D9054C FADD S0, S5, S0
	0x01D90550 FSUB S3, S1, S19
	0x01D90554 FSUB S2, S2, S23
	0x01D90558 FSUB S1, S4, S25
	0x01D9055C FSUB S0, S0, S6
	0x01D90560 MOV X0, X21
	0x01D90564 MOV X1, X31
	0x01D90568 BL 0x3C3F8B8
	0x01D9056C LDR X0, [X24]
	0x01D90570 LDR X21, [X19 + 0x1A8]
	0x01D90574 LDR W8, [X0 + 0xE0]
	0x01D90578 CBNZ W8, 0x1D90580
	0x01D9057C BL 0x1C16DFC
	0x01D90580 MOV X0, X21
	0x01D90584 MOV X1, X31
	0x01D90588 MOV X2, X31
	0x01D9058C BL 0x3C3883C
	0x01D90590 MOV W21, W0
	0x01D90594 MOV X0, X19
	0x01D90598 MOV X1, X31
	0x01D9059C BL 0x3C32E90
	0x01D905A0 LDP S1, S2, [X31 + 0x4]
	0x01D905A4 LDR V0, [X31 + 0xC]
	0x01D905A8 CBZ X0, 0x1D913B8
	0x01D905AC TBZ X21, 0x0, 0x1D90C48
	0x01D905B0 MOV X1, X31
	0x01D905B4 BL 0x3C3F62C
	0x01D905B8 MOV X0, X19
	0x01D905BC MOV X1, X31
	0x01D905C0 BL 0x3C32E90
	0x01D905C4 LDR X8, [X19 + 0x178]
	0x01D905C8 CBZ X8, 0x1D913B8
	0x01D905CC MOV X21, X0
	0x01D905D0 MOV X0, X8
	0x01D905D4 MOV X1, X31
	0x01D905D8 BL 0x3C3DEB4
	0x01D905DC CBZ X21, 0x1D913B8
	0x01D905E0 MOV X0, X21
	0x01D905E4 B 0x1D90E04
	0x01D905E8 LDR X0, [X24]
	0x01D905EC LDR X21, [X19 + 0xC8]
	0x01D905F0 LDR W8, [X0 + 0xE0]
	0x01D905F4 CBNZ W8, 0x1D905FC
	0x01D905F8 BL 0x1C16DFC
	0x01D905FC MOV X0, X21
	0x01D90600 MOV X1, X31
	0x01D90604 MOV X2, X31
	0x01D90608 BL 0x3C354F8
	0x01D9060C TBZ X0, 0x0, 0x1D906B4
	0x01D90610 LDR X0, [X19 + 0xC8]
	0x01D90614 CBZ X0, 0x1D913B8
	0x01D90618 LDR X1, [X19 + 0xD0]
	0x01D9061C MOV X2, X31
	0x01D90620 BL 0x3C3FD20
	0x01D90624 ADRP X22, 0x2648000
	0x01D90628 LDRB W8, [X22 + 0x783]
	0x01D9062C LDR X21, [X19 + 0xC8]
	0x01D90630 CBNZ W8, 0x1D90648
	0x01D90634 ADRP X0, 0x2363000
	0x01D90638 LDR X0, [X0 + 0x5A0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x2649000
	009 Move X21, 0x2367000
	010 Move W8, [X20+2542]
	011 Move X21, [X21+2680]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {49}
	017 Move X0, 0x2367000
	018 Move X0, [X0+3392]
	019 Call 0x1C17CF4
	020 Move X0, 0x2367000
	021 Move X0, [X0+3376]
	022 Call 0x1C17CF4
	023 Move X0, 0x2367000
	024 Move X0, [X0+2648]
	025 Call 0x1C17CF4
	026 Move X0, 0x2367000
	027 Move X0, [X0+3400]
	028 Call 0x1C17CF4
	029 Move X0, 0x2367000
	030 Move X0, [X0+3408]
	031 Call 0x1C17CF4
	032 Move X0, 0x2367000
	033 Move X0, [X0+3384]
	034 Call 0x1C17CF4
	035 Move X0, 0x2367000
	036 Move X0, [X0+3352]
	037 Call 0x1C17CF4
	038 Move X0, 0x2367000
	039 Move X0, [X0+3416]
	040 Call 0x1C17CF4
	041 Move X0, 0x2367000
	042 Move X0, [X0+2680]
	043 Call 0x1C17CF4
	044 Move X0, 0x2367000
	045 Move X0, [X0+3368]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X20+2542], W8
	049 Move X0, [X21]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Compare X19, 0
	055 JumpIfEqual {217}
	056 Move W8, [X19+48]
	057 Move X22, 0x2367000
	058 Move X22, [X22+3368]
	059 Move X23, 0x2367000
	060 Or W8, W8, 8
	061 Move [X19+48], W8
	062 Move X8, [X22]
	063 Move X21, 0x2367000
	064 Move X8, [X8+184]
	065 Move X23, [X23+3376]
	066 Move X20, [X8+40]
	067 Move X0, [X23]
	068 Move X21, [X21+3384]
	069 Call 0x1C17F10
	070 Move X2, [X21]
	071 Move X1, X19
	072 Move X3, X31
	073 Move X21, X0
	074 Call Action`1<PlayerRef>..ctor, X0, X1, X2
	075 Move X0, X20
	076 Move X1, X21
	077 Move X2, X31
	078 Call Delegate.Remove, X0, X1
	079 Move X20, [X23]
	080 Compare X0, 0
	081 JumpIfEqual {99}
	082 Move X1, X20
	083 Move X21, X0
	084 Call 0x1C17E00
	085 Compare X0, 0
	086 JumpIfEqual {218}
	087 Move X8, [X22]
	088 Move X8, [X8+184]
	089 Move [X8+40], X0
	090 Move X20, [X23]
	091 Move X0, X21
	092 Move X1, X20
	093 Call 0x1C17E00
	094 Compare X0, 0
	095 JumpIfEqual {218}
	096 Move X8, [X22]
	097 Move X20, [X23]
	098 Move X8, [X8+184]
	099 Move X8, [X22]
	100 Move X8, [X8+184]
	101 Move [X8+40], X31
	102 Move X24, 0x2367000
	103 Move X21, [X8+48]
	104 Move X24, [X24+3408]
	105 Move X0, X20
	106 Call 0x1C17F10
	107 Move X2, [X24]
	108 Move X1, X19
	109 Move X3, X31
	110 Move X20, X0
	111 Call Action`1<PlayerRef>..ctor, X0, X1, X2
	112 Move X0, X21
	113 Move X1, X20
	114 Move X2, X31
	115 Call Delegate.Remove, X0, X1
	116 Compare X0, 0
	117 JumpIfEqual {133}
	118 Move X21, [X23]
	119 Move X20, X0
	120 Move X1, X21
	121 Call 0x1C17E00
	122 Compare X0, 0
	123 JumpIfEqual {173}
	124 Move X8, [X22]
	125 Move X8, [X8+184]
	126 Move [X8+48], X0
	127 Move X21, [X23]
	128 Move X0, X20
	129 Move X1, X21
	130 Call 0x1C17E00
	131 Compare X0, 0
	132 JumpIfNotEqual {136}
	133 Move X8, [X22]
	134 Move X8, [X8+184]
	135 Move [X8+48], X31
	136 Move X22, 0x2367000
	137 Move X22, [X22+2648]
	138 Move X23, 0x2367000
	139 Move X21, 0x2367000
	140 Move X8, [X22]
	141 Move X8, [X8+184]
	142 Move X23, [X23+3392]
	143 Move X20, [X8]
	144 Move X0, [X23]
	145 Move X21, [X21+3400]
	146 Call 0x1C17F10
	147 Move X2, [X21]
	148 Move X1, X19
	149 Move X3, X31
	150 Move X21, X0
	151 Call Action`1<NetworkBehaviourId>..ctor, X0, X1, X2
	152 Move X0, X20
	153 Move X1, X21
	154 Move X2, X31
	155 Call Delegate.Remove, X0, X1
	156 Compare X0, 0
	157 JumpIfEqual {176}
	158 Move X21, [X23]
	159 Move X20, X0
	160 Move X1, X21
	161 Call 0x1C17E00
	162 Compare X0, 0
	163 JumpIfEqual {173}
	164 Move X8, [X22]
	165 Move X8, [X8+184]
	166 Move [X8], X0
	167 Move X21, [X23]
	168 Move X0, X20
	169 Move X1, X21
	170 Call 0x1C17E00
	171 Compare X0, 0
	172 JumpIfNotEqual {179}
	173 Move X0, X20
	174 Move X1, X21
	175 Call 0x1C181E0
	176 Move X8, [X22]
	177 Move X8, [X8+184]
	178 Move [X8], X31
	179 Move X8, [X19+128]
	180 Compare X8, 0
	181 JumpIfEqual {217}
	182 Move W8, [X8+40]
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Move X20, 0x2367000
	185 Move X20, [X20+3352]
	186 Move X0, [X20]
	187 Move W8, [X0+224]
	188 Compare W8, 0
	189 JumpIfNotEqual {192}
	190 Call 0x1C17DFC
	191 Move X0, [X20]
	192 Move X8, [X0+184]
	193 Move X0, [X8]
	194 Compare X0, 0
	195 JumpIfEqual {217}
	196 Move X8, 0x2367000
	197 Move X8, [X8+3416]
	198 Move X1, X19
	199 Move X20, [X31+48]
	200 Move X19, [X31+56]
	201 Move X22, [X31+32]
	202 Move X21, [X31+40]
	203 Move X2, [X8]
	204 Move X24, [X31+16]
	205 Move X23, [X31+24]
	206 Move X30, [X31+64]
	207 Call HashSet`1<Object>.Remove, X0, X1
	208 Return 
	209 Move X20, [X31+48]
	210 Move X19, [X31+56]
	211 Move X22, [X31+32]
	212 Move X21, [X31+40]
	213 Move X24, [X31+16]
	214 Move X23, [X31+24]
	215 Move X30, [X31+64]
	216 Return 
	217 Call 0x1C17F20
	218 Move X0, X21
	219 Move X1, X20
	220 Call 0x1C181E0

Method: System.Void AddExternalForce(UnityEngine.Vector3 force)

Disassembly:
	0x01D9063C BL 0x1C16CF4
	0x01D90640 MOVZ W8, 0x1
	0x01D90644 STRB W8, [X22 + 0x783]
	0x01D90648 ADRP X8, 0x2363000
	0x01D9064C LDR X8, [X8 + 0x5A0]
	0x01D90650 ADRP X22, 0x2648000
	0x01D90654 LDRB W9, [X22 + 0x793]
	0x01D90658 LDR X8, [X8]
	0x01D9065C LDR X8, [X8 + 0xB8]

ISIL:
	001 Add X8, X0, 388
	002 Move V3, [X8]
	003 Move V4, [X8+8]
	004 Move V0.S[1], V1.S[0]
	005 Add V0, V0, V3
	006 Add S1, S2, S4
	007 Move [X8], D0
	008 Move [X8+8], S1
	009 Return 

Method: System.Void SnapToFollow()

Disassembly:
	0x01D8B3AC CBNZ W8, 0x1D8B3B4
	0x01D8B3B0 BL 0x1C16DFC
	0x01D8B3B4 ADRP X8, 0x236B000
	0x01D8B3B8 LDR X8, [X8 + 0xB48]
	0x01D8B3BC MOV X1, X19
	0x01D8B3C0 MOV X2, X31
	0x01D8B3C4 LDR X0, [X8]
	0x01D8B3C8 BL 0x1DC4DD0
	0x01D8B3CC LDP X20, X19, [X31 + 0x30]
	0x01D8B3D0 LDP X30, X21, [X31 + 0x20]
	0x01D8B3D4 LDP D9, D8, [X31 + 0x10]
	0x01D8B3D8 LDR V10, [X31], #0x40
	0x01D8B3DC RET
	0x01D8B3E0 BL 0x1C16F20
	0x01D8B3E4 STP X30, X23, [X31 - 0x30]!
	0x01D8B3E8 STP X22, X21, [X31 + 0x10]
	0x01D8B3EC STP X20, X19, [X31 + 0x20]
	0x01D8B3F0 ADRP X23, 0x264D000
	0x01D8B3F4 ADRP X22, 0x236B000
	0x01D8B3F8 LDRB W8, [X23 + 0x9CB]
	0x01D8B3FC LDR X22, [X22 + 0xB08]
	0x01D8B400 MOV W21, W2
	0x01D8B404 MOV X20, X1
	0x01D8B408 MOV X19, X0
	0x01D8B40C TBNZ X8, 0x0, 0x1D8B430
	0x01D8B410 ADRP X0, 0x236B000
	0x01D8B414 LDR X0, [X0 + 0xB08]
	0x01D8B418 BL 0x1C16CF4
	0x01D8B41C ADRP X0, 0x236B000
	0x01D8B420 LDR X0, [X0 + 0xB30]
	0x01D8B424 BL 0x1C16CF4
	0x01D8B428 MOVZ W8, 0x1
	0x01D8B42C STRB W8, [X23 + 0x9CB]
	0x01D8B430 AND W2, W21, 0x1
	0x01D8B434 MOV X0, X19
	0x01D8B438 MOV X1, X20
	0x01D8B43C MOV X3, X31
	0x01D8B440 BL 0x1E73F8C
	0x01D8B444 LDR X0, [X22]
	0x01D8B448 LDR W8, [X0 + 0xE0]
	0x01D8B44C CBNZ W8, 0x1D8B458
	0x01D8B450 BL 0x1C16DFC
	0x01D8B454 LDR X0, [X22]
	0x01D8B458 LDR X8, [X0 + 0xB8]
	0x01D8B45C LDR X0, [X8]
	0x01D8B460 CBZ X0, 0x1D8B484
	0x01D8B464 ADRP X8, 0x236B000
	0x01D8B468 LDR X8, [X8 + 0xB30]
	0x01D8B46C MOV X1, X19
	0x01D8B470 LDP X20, X19, [X31 + 0x20]
	0x01D8B474 LDP X22, X21, [X31 + 0x10]
	0x01D8B478 LDR X2, [X8]
	0x01D8B47C LDP X30, X23, [X31], #0x30
	0x01D8B480 B 0x2DBE67C
	0x01D8B484 BL 0x1C16F20
	0x01D8B488 SUB X31, X31, 0x20
	0x01D8B48C STP X30, X19, [X31 + 0x10]
	0x01D8B490 MOV X1, X31
	0x01D8B494 MOV X19, X0
	0x01D8B498 BL 0x1E73D04
	0x01D8B49C LDR X0, [X19 + 0x40]
	0x01D8B4A0 CBZ X0, 0x1D8B4EC
	0x01D8B4A4 LDRB W8, [X0 + 0x60]
	0x01D8B4A8 TBNZ X8, 0x1, 0x1D8B4EC
	0x01D8B4AC MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+360]
	006 Compare X0, 0
	007 JumpIfEqual {77}
	008 Move X1, X31
	009 Call Rigidbody.Sleep, X0
	010 Move X0, [X19+376]
	011 Compare X0, 0
	012 JumpIfEqual {77}
	013 Move X20, [X19+360]
	014 Move X1, X31
	015 Call Transform.get_position, X0
	016 Compare X20, 0
	017 JumpIfEqual {77}
	018 Move X0, X20
	019 Move X1, X31
	020 Call Rigidbody.set_position, X0, X1
	021 Move X0, [X19+376]
	022 Compare X0, 0
	023 JumpIfEqual {77}
	024 Move X20, [X19+360]
	025 Move X1, X31
	026 Call Transform.get_rotation, X0
	027 Compare X20, 0
	028 JumpIfEqual {77}
	029 Move X0, X20
	030 Move X1, X31
	031 Call Rigidbody.set_rotation, X0, X1
	032 Move X0, X19
	033 Move X1, X31
	034 Call Component.get_transform, X0
	035 Move X8, [X19+360]
	036 Compare X8, 0
	037 JumpIfEqual {77}
	038 Move X20, X0
	039 Move X0, X8
	040 Move X1, X31
	041 Call Rigidbody.get_position, X0
	042 Compare X20, 0
	043 JumpIfEqual {77}
	044 Move X0, X20
	045 Move X1, X31
	046 Call Transform.set_position, X0, X1
	047 Move X0, X19
	048 Move X1, X31
	049 Call Component.get_transform, X0
	050 Move X8, [X19+360]
	051 Compare X8, 0
	052 JumpIfEqual {77}
	053 Move X20, X0
	054 Move X0, X8
	055 Move X1, X31
	056 Call Rigidbody.get_rotation, X0
	057 Compare X20, 0
	058 JumpIfEqual {77}
	059 Move X0, X20
	060 Move X1, X31
	061 Call Transform.set_rotation, X0, X1
	062 Move X0, X19
	063 Move X1, X31
	064 Call Component.get_transform, X0
	065 Compare X0, 0
	066 JumpIfEqual {77}
	067 Move X1, X31
	068 Call Transform.get_position, X0
	069 Move [X19+404], S0
	070 Move [X19+408], S1
	071 Move [X19+412], S2
	072 Move [X19+384], W31
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X30, [X31+32]
	076 Return 
	077 Call 0x1C17F20

Method: System.Void Grab(AnimalCompany.AttachedItemAnchor interactor, System.Boolean playSFX = True)

Disassembly:
	0x01D89EF8 LDRB W8, [X22 + 0x9BD]
	0x01D89EFC LDR X21, [X21 + 0x598]
	0x01D89F00 MOV W20, W1
	0x01D89F04 MOV X19, X0
	0x01D89F08 TBNZ X8, 0x0, 0x1D89F20
	0x01D89F0C ADRP X0, 0x236A000
	0x01D89F10 LDR X0, [X0 + 0x598]
	0x01D89F14 BL 0x1C16CF4
	0x01D89F18 MOVZ W8, 0x1
	0x01D89F1C STRB W8, [X22 + 0x9BD]
	0x01D89F20 LDR X0, [X21]
	0x01D89F24 LDR X21, [X19 + 0x40]
	0x01D89F28 LDR W8, [X0 + 0xE0]
	0x01D89F2C CBNZ W8, 0x1D89F34
	0x01D89F30 BL 0x1C16DFC
	0x01D89F34 MOV X0, X21
	0x01D89F38 MOV X1, X31
	0x01D89F3C MOV X2, X31
	0x01D89F40 BL 0x3C3883C
	0x01D89F44 TBNZ X0, 0x0, 0x1D89FBC
	0x01D89F48 LDR X0, [X19 + 0x40]
	0x01D89F4C CBZ X0, 0x1D89FCC
	0x01D89F50 MOV X1, X31
	0x01D89F54 BL 0x1E934B8
	0x01D89F58 TBZ X0, 0x0, 0x1D89FBC
	0x01D89F5C MOV X0, X19
	0x01D89F60 BL 0x1D880C4
	0x01D89F64 STR X0, [X31 + 0x8]
	0x01D89F68 ADD X0, X31, 0x8
	0x01D89F6C MOV X1, X31
	0x01D89F70 BL 0x1E74DE4
	0x01D89F74 TBZ X0, 0x0, 0x1D89FBC
	0x01D89F78 ADRP X21, 0x264F000
	0x01D89F7C LDRB W8, [X21 + 0x783]
	0x01D89F80 CBNZ W8, 0x1D89F98
	0x01D89F84 ADRP X0, 0x236A000
	0x01D89F88 LDR X0, [X0 + 0x5A0]
	0x01D89F8C BL 0x1C16CF4
	0x01D89F90 MOVZ W8, 0x1
	0x01D89F94 STRB W8, [X21 + 0x783]
	0x01D89F98 ADRP X8, 0x236A000
	0x01D89F9C LDR X8, [X8 + 0x5A0]
	0x01D89FA0 AND W1, W20, 0x1
	0x01D89FA4 MOV X0, X19
	0x01D89FA8 LDR X8, [X8]
	0x01D89FAC LDR X8, [X8 + 0xB8]
	0x01D89FB0 LDP S0, S1, [X8]
	0x01D89FB4 LDR V2, [X8 + 0x8]
	0x01D89FB8 BL 0x1D89FD0
	0x01D89FBC LDP X20, X19, [X31 + 0x20]
	0x01D89FC0 LDP X22, X21, [X31 + 0x10]
	0x01D89FC4 LDR X30, [X31], #0x30
	0x01D89FC8 RET
	0x01D89FCC BL 0x1C16F20
	0x01D89FD0 SUB X31, X31, 0xA0
	0x01D89FD4 STP D15, D14, [X31 + 0x40]
	0x01D89FD8 STP D13, D12, [X31 + 0x50]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0+56]
	006 Move [X0+416], X1
	007 Compare X8, 0
	008 JumpIfEqual {80}
	009 Move W8, [X8+392]
	010 Move W20, W2
	011 Move X19, X0
	012 Move X21, X1
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X0, [X19+64]
	015 Compare X0, 0
	016 JumpIfEqual {80}
	017 Move W8, [X0+96]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 2
	020 Compare TEMP, 2
	021 JumpIfEqual {62}
	022 Move X1, X31
	023 Call NetworkObject.get_HasStateAuthority, X0
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {59}
	028 Compare X21, 0
	029 JumpIfEqual {80}
	030 Move X8, [X21+64]
	031 Compare X8, 0
	032 JumpIfEqual {69}
	033 Move X8, [X8+32]
	034 Compare X8, 0
	035 JumpIfEqual {69}
	036 Move W1, [X8]
	037 Compare X21, 0
	038 JumpIfEqual {80}
	039 Move X8, [X21+64]
	040 Compare X8, 0
	041 JumpIfEqual {46}
	042 Move X8, [X8+32]
	043 Compare X8, 0
	044 JumpIfEqual {46}
	045 Move W1, [X8]
	046 Move X1, X31
	047 Move W8, [X21+104]
	048 And W2, W20, 1
	049 Move X0, X19
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 NotImplemented "Instruction BFM not yet implemented."
	053 Move X3, X31
	054 Move X4, X31
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Call GrabbableItem.RPC_TryGrab, X0, X1, X2, X3
	058 Return 
	059 Move X0, [X19+64]
	060 Compare X0, 0
	061 JumpIfEqual {80}
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X1, X31
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Call NetworkObject.RequestStateAuthority, X0
	068 Return 
	069 Move X1, X31
	070 Move W8, [X21+104]
	071 And W2, W20, 1
	072 Move X0, X19
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 NotImplemented "Instruction BFM not yet implemented."
	076 Move X30, [X31+32]
	077 Move X21, [X31+40]
	078 Call GrabbableItem.GrabInternal, X0, X1, X2
	079 Return 
	080 Call 0x1C17F20

Method: System.Void RPC_TryGrab(Fusion.NetworkBehaviourId interactorId, System.Boolean playSFX = True, Fusion.RpcInfo info = null)

Disassembly:
	0x01D90738 LDR X9, [X8 + 0x18]
	0x01D9073C LDR X0, [X8 + 0x40]
	0x01D90740 LDR X1, [X8 + 0x28]
	0x01D90744 BLR X9
	0x01D90748 LDR X8, [X25]
	0x01D9074C LDR X0, [X26]
	0x01D90750 LDR X8, [X8 + 0xB8]
	0x01D90754 LDR X21, [X8 + 0xD8]
	0x01D90758 BL 0x1C16F10
	0x01D9075C LDR X2, [X27]
	0x01D90760 MOV X1, X19
	0x01D90764 MOV X3, X31
	0x01D90768 MOV X22, X0
	0x01D9076C BL 0x3314368
	0x01D90770 MOV X0, X21
	0x01D90774 MOV X1, X22
	0x01D90778 MOV X2, X31
	0x01D9077C BL 0x33C0FDC
	0x01D90780 LDR X1, [X26]
	0x01D90784 CBZ X0, 0x1D907B0
	0x01D90788 LDR X8, [X0]
	0x01D9078C CMP X8, X1
	0x01D90790 B.NE 0x1D908F8
	0x01D90794 LDR X8, [X25]
	0x01D90798 LDR X8, [X8 + 0xB8]
	0x01D9079C STR X0, [X8 + 0xD8]
	0x01D907A0 LDR X9, [X0]
	0x01D907A4 CMP X9, X1
	0x01D907A8 B.EQ 0x1D907BC
	0x01D907AC B 0x1D908F8
	0x01D907B0 LDR X8, [X25]
	0x01D907B4 LDR X8, [X8 + 0xB8]
	0x01D907B8 STR X0, [X8 + 0xD8]
	0x01D907BC LDR X21, [X8 + 0xC8]
	0x01D907C0 MOV X0, X1
	0x01D907C4 BL 0x1C16F10
	0x01D907C8 LDR X2, [X27]
	0x01D907CC MOV X1, X19
	0x01D907D0 MOV X3, X31
	0x01D907D4 MOV X22, X0
	0x01D907D8 BL 0x3314368
	0x01D907DC MOV X0, X21
	0x01D907E0 MOV X1, X22
	0x01D907E4 MOV X2, X31
	0x01D907E8 BL 0x33C0FDC
	0x01D907EC LDR X1, [X26]
	0x01D907F0 CBZ X0, 0x1D9081C
	0x01D907F4 LDR X8, [X0]
	0x01D907F8 CMP X8, X1
	0x01D907FC B.NE 0x1D908F8
	0x01D90800 LDR X8, [X25]
	0x01D90804 LDR X8, [X8 + 0xB8]
	0x01D90808 STR X0, [X8 + 0xC8]
	0x01D9080C LDR X9, [X0]
	0x01D90810 CMP X9, X1
	0x01D90814 B.EQ 0x1D90828
	0x01D90818 B 0x1D908F8
	0x01D9081C LDR X8, [X25]
	0x01D90820 LDR X8, [X8 + 0xB8]
	0x01D90824 STR X0, [X8 + 0xC8]
	0x01D90828 ADRP X28, 0x2366000
	0x01D9082C LDR X21, [X8 + 0x58]
	0x01D90830 LDR X28, [X28 + 0xD80]
	0x01D90834 MOV X0, X1
	0x01D90838 BL 0x1C16F10
	0x01D9083C LDR X2, [X28]
	0x01D90840 MOV X1, X19
	0x01D90844 MOV X3, X31
	0x01D90848 MOV X22, X0
	0x01D9084C BL 0x3314368
	0x01D90850 MOV X0, X21
	0x01D90854 MOV X1, X22
	0x01D90858 MOV X2, X31
	0x01D9085C BL 0x33C0FDC
	0x01D90860 LDR X1, [X26]
	0x01D90864 CBZ X0, 0x1D90890
	0x01D90868 LDR X8, [X0]
	0x01D9086C CMP X8, X1
	0x01D90870 B.NE 0x1D908F8
	0x01D90874 LDR X8, [X25]
	0x01D90878 LDR X8, [X8 + 0xB8]
	0x01D9087C STR X0, [X8 + 0x58]
	0x01D90880 LDR X9, [X0]
	0x01D90884 CMP X9, X1
	0x01D90888 B.EQ 0x1D9089C
	0x01D9088C B 0x1D908F8
	0x01D90890 LDR X8, [X25]
	0x01D90894 LDR X8, [X8 + 0xB8]
	0x01D90898 STR X0, [X8 + 0x58]
	0x01D9089C LDR X21, [X8 + 0x48]
	0x01D908A0 MOV X0, X1
	0x01D908A4 BL 0x1C16F10
	0x01D908A8 LDR X2, [X28]
	0x01D908AC MOV X1, X19
	0x01D908B0 MOV X3, X31
	0x01D908B4 MOV X22, X0
	0x01D908B8 BL 0x3314368
	0x01D908BC MOV X0, X21
	0x01D908C0 MOV X1, X22
	0x01D908C4 MOV X2, X31
	0x01D908C8 BL 0x33C0FDC
	0x01D908CC CBZ X0, 0x1D908FC
	0x01D908D0 LDR X1, [X26]
	0x01D908D4 LDR X8, [X0]
	0x01D908D8 CMP X8, X1
	0x01D908DC B.NE 0x1D908F8
	0x01D908E0 LDR X8, [X25]
	0x01D908E4 LDR X8, [X8 + 0xB8]
	0x01D908E8 STR X0, [X8 + 0x48]
	0x01D908EC LDR X8, [X0]
	0x01D908F0 CMP X8, X1
	0x01D908F4 B.EQ 0x1D90908
	0x01D908F8 BL 0x1C171E0
	0x01D908FC LDR X8, [X25]
	0x01D90900 LDR X8, [X8 + 0xB8]
	0x01D90904 STR X0, [X8 + 0x48]
	0x01D90908 LDR X0, [X24]
	0x01D9090C LDR X21, [X20]
	0x01D90910 LDR W8, [X0 + 0xE0]
	0x01D90914 CBNZ W8, 0x1D9091C
	0x01D90918 BL 0x1C16DFC
	0x01D9091C MOV X0, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x2649000
	008 Move W8, [X23+2543]
	009 Move X22, X3
	010 Move W21, W2
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2367000
	018 Move X0, [X0+2680]
	019 Call 0x1C17CF4
	020 Move X0, 0x2367000
	021 Move X0, [X0+3424]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+2543], W8
	025 Move W8, [X19+88]
	026 Compare W8, 0
	027 JumpIfEqual {48}
	028 Move [X19+88], W31
	029 Move X0, [X19+64]
	030 Compare X0, 0
	031 JumpIfEqual {160}
	032 Move X1, X22
	033 ShiftRight X1, 32
	034 And X1, X1, 0x7FFFFFFF
	035 Move X2, X31
	036 Call NetworkObject.AssignInputAuthority, X0, X1
	037 And W2, W21, 1
	038 Move X0, X19
	039 Move X1, X20
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Move X23, [X31+56]
	046 Call GrabbableItem.GrabInternal, X0, X1, X2
	047 Return 
	048 Move X22, 0x2367000
	049 Move X22, [X22+2680]
	050 Move X0, [X22]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, X19
	056 Move X1, X31
	057 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	058 Move X0, [X19+56]
	059 Compare X0, 0
	060 JumpIfEqual {160}
	061 Move X1, X31
	062 Call NetworkRunner.get_Stage, X0
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X30, [X31+48]
	069 Move X23, [X31+56]
	070 Return 
	071 Move X0, [X19+64]
	072 Compare X0, 0
	073 JumpIfEqual {160}
	074 Move X1, X31
	075 Call NetworkObject.GetLocalAuthorityMask, X0
	076 And W31, W0, 7
	077 Move W8, W0
	078 Move X0, [X19+56]
	079 Move TEMP, X8
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfEqual {129}
	083 Compare X0, 0
	084 JumpIfEqual {160}
	085 Move X0, [X0+80]
	086 Compare X0, 0
	087 JumpIfEqual {160}
	088 Move X1, X31
	089 Call Simulation.HasAnyActiveConnections, X0
	090 Move TEMP, X0
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfNotEqual {64}
	094 Move X8, [X19+56]
	095 Compare X8, 0
	096 JumpIfEqual {160}
	097 Move X0, [X8+80]
	098 Move W1, 20
	099 Move X2, X31
	100 Call SimulationMessage.Allocate, X0, X1
	101 Move X8, [X19+64]
	102 Compare X8, 0
	103 JumpIfEqual {160}
	104 Move X8, [X8+32]
	105 Move X22, X0
	106 Compare X8, 0
	107 JumpIfEqual {134}
	108 Move W0, [X8]
	109 Move X0, [X22]
	110 Move X19, [X19+64]
	111 Move W8, [X0+224]
	112 Compare W8, 0
	113 JumpIfNotEqual {115}
	114 Call 0x1C17DFC
	115 Move X8, 0x2367000
	116 Move X8, [X8+3424]
	117 Move X1, X19
	118 Move X20, [X31+32]
	119 Move X19, [X31+40]
	120 Move X22, [X31+16]
	121 Move X21, [X31+24]
	122 Move X0, [X8]
	123 Move W2, 7
	124 Move X3, X31
	125 Move X30, [X31+48]
	126 Move X23, [X31+56]
	127 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	128 Return 
	129 Move W1, W31
	130 Move W2, W31
	131 Move X3, X31
	132 Call RpcInfo.FromLocal, X0, X1, X2
	133 Move X22, X0
	134 Move X0, X31
	135 Move W1, [X19+104]
	136 Move W2, 1
	137 Move X3, X31
	138 Call RpcHeader.Create, X0, X1, X2
	139 And W8, W21, 1
	140 Move [X22+28], X0
	141 Move [X22+36], X20
	142 Move [X22+44], W8
	143 Compare X22, 0
	144 JumpIfEqual {160}
	145 Move W8, 160
	146 Move [X22+12], W8
	147 Move X0, [X19+56]
	148 Compare X0, 0
	149 JumpIfEqual {160}
	150 Move X1, X22
	151 Move X20, [X31+32]
	152 Move X19, [X31+40]
	153 Move X22, [X31+16]
	154 Move X21, [X31+24]
	155 Move X2, X31
	156 Move X30, [X31+48]
	157 Move X23, [X31+56]
	158 Call NetworkRunner.SendRpc, X0, X1
	159 Return 
	160 Call 0x1C17F20

Method: System.Void GrabInternal(Fusion.NetworkBehaviourId interactorId, System.Boolean playSFX = True)

Disassembly:
	0x01D90660 LDP S10, S9, [X8]
	0x01D90664 LDR V8, [X8 + 0x8]
	0x01D90668 CBNZ W9, 0x1D90680
	0x01D9066C ADRP X0, 0x2364000
	0x01D90670 LDR X0, [X0 + 0x5A8]
	0x01D90674 BL 0x1C16CF4
	0x01D90678 MOVZ W8, 0x1
	0x01D9067C STRB W8, [X22 + 0x793]
	0x01D90680 CBZ X21, 0x1D913B8
	0x01D90684 ADRP X8, 0x2364000
	0x01D90688 LDR X8, [X8 + 0x5A8]
	0x01D9068C MOV X0, X21
	0x01D90690 MOV V0.16B, V10.16B
	0x01D90694 MOV V1.16B, V9.16B
	0x01D90698 LDR X8, [X8]
	0x01D9069C MOV V2.16B, V8.16B
	0x01D906A0 MOV X1, X31
	0x01D906A4 LDR X8, [X8 + 0xB8]
	0x01D906A8 LDP S5, S6, [X8 + 0x8]
	0x01D906AC LDP S3, S4, [X8]
	0x01D906B0 BL 0x3C400B4
	0x01D906B4 LDR X0, [X24]
	0x01D906B8 LDR X21, [X19 + 0x170]
	0x01D906BC LDR W8, [X0 + 0xE0]
	0x01D906C0 CBNZ W8, 0x1D906C8
	0x01D906C4 BL 0x1C16DFC
	0x01D906C8 MOV X0, X21
	0x01D906CC MOV X1, X31
	0x01D906D0 MOV X2, X31
	0x01D906D4 BL 0x3C354F8
	0x01D906D8 TBZ X0, 0x0, 0x1D90708
	0x01D906DC LDR X0, [X19 + 0x170]
	0x01D906E0 CBZ X0, 0x1D913B8
	0x01D906E4 MOVZ W1, 0x1
	0x01D906E8 MOV X2, X31
	0x01D906EC BL 0x3C32410
	0x01D906F0 B 0x1D90708
	0x01D906F4 LDR X0, [X20]
	0x01D906F8 CBZ X0, 0x1D913B8
	0x01D906FC MOV X1, X31
	0x01D90700 BL 0x3C32E90
	0x01D90704 STR X0, [X19 + 0x178]
	0x01D90708 ADRP X25, 0x2366000
	0x01D9070C ADRP X26, 0x2364000
	0x01D90710 ADRP X27, 0x2366000
	0x01D90714 LDR X25, [X25 + 0xD98]
	0x01D90718 LDR X26, [X26 + 0xE70]
	0x01D9071C LDR X27, [X27 + 0xD88]
	0x01D90720 MOV X0, X19
	0x01D90724 BL 0x1D9171C
	0x01D90728 MOV X0, X19
	0x01D9072C BL 0x1D91F14
	0x01D90730 LDR X8, [X19 + 0x1C8]
	0x01D90734 CBZ X8, 0x1D90748

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2649000
	007 Move W8, [X22+2544]
	008 Move W20, W2
	009 Move X21, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2364000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+2544], W8
	020 Move X0, X31
	021 Call TickTimer.get_None
	022 And X1, X0, 0
	023 Move X0, X19
	024 Call GrabbableItem.set_respawnTimer, X0, X1
	025 Move X0, X19
	026 Move X1, X21
	027 Call GrabbableItem.set_attachedAnchorId, X0, X1
	028 Move TEMP, X20
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {66}
	032 Move X8, 0x2364000
	033 Move X8, [X8+1432]
	034 Move X20, [X19+216]
	035 Move X0, [X8]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Inequality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {66}
	048 Move X20, [X19+216]
	049 Move X0, X19
	050 Move X1, X31
	051 Call Component.get_transform, X0
	052 Compare X0, 0
	053 JumpIfEqual {72}
	054 Move X1, X31
	055 Call Transform.get_position, X0
	056 Move X0, X20
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move S3, 1
	062 Move X1, X31
	063 Move X30, [X31+48]
	064 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	065 Return 
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Return 
	072 Call 0x1C17F20

Method: System.Void Release(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 velocity, UnityEngine.Vector3 angularVelocity, System.Boolean playSFX = True, System.Boolean fromDeath = False)

Disassembly:
	0x01D90920 MOV X1, X31
	0x01D90924 MOV X2, X31
	0x01D90928 BL 0x3C354F8
	0x01D9092C TBZ X0, 0x0, 0x1D90C08
	0x01D90930 LDR X8, [X20]
	0x01D90934 CBZ X8, 0x1D913B8
	0x01D90938 LDR X0, [X8 + 0x40]
	0x01D9093C CBZ X0, 0x1D90C08
	0x01D90940 LDRB W8, [X0 + 0x60]
	0x01D90944 TBNZ X8, 0x1, 0x1D90C08
	0x01D90948 MOV X1, X31
	0x01D9094C BL 0x1E93588
	0x01D90950 TBZ X0, 0x0, 0x1D90C08
	0x01D90954 LDR X8, [X20]
	0x01D90958 CBZ X8, 0x1D913B8
	0x01D9095C LDR W8, [X8 + 0x80]
	0x01D90960 CMP W8, 0x2
	0x01D90964 B.EQ 0x1D90A80
	0x01D90968 CMP W8, 0x1
	0x01D9096C B.EQ 0x1D90AB8
	0x01D90970 CBNZ W8, 0x1D90C08
	0x01D90974 LDR X8, [X25]
	0x01D90978 LDR X0, [X26]
	0x01D9097C LDR X8, [X8 + 0xB8]
	0x01D90980 LDR X20, [X8 + 0xC8]
	0x01D90984 BL 0x1C16F10
	0x01D90988 LDR X2, [X27]
	0x01D9098C MOV X1, X19
	0x01D90990 MOV X3, X31
	0x01D90994 MOV X21, X0
	0x01D90998 BL 0x3314368
	0x01D9099C MOV X0, X20
	0x01D909A0 MOV X1, X21
	0x01D909A4 MOV X2, X31
	0x01D909A8 BL 0x33C0DE4
	0x01D909AC LDR X1, [X26]
	0x01D909B0 CBZ X0, 0x1D90B20
	0x01D909B4 LDR X8, [X0]
	0x01D909B8 CMP X8, X1
	0x01D909BC B.NE 0x1D908F8
	0x01D909C0 LDR X8, [X25]
	0x01D909C4 LDR X8, [X8 + 0xB8]
	0x01D909C8 STR X0, [X8 + 0xC8]
	0x01D909CC LDR X9, [X0]
	0x01D909D0 CMP X9, X1
	0x01D909D4 B.EQ 0x1D90B2C
	0x01D909D8 B 0x1D908F8
	0x01D909DC LDR X0, [X24]
	0x01D909E0 LDR X21, [X19 + 0x1A8]
	0x01D909E4 LDR W8, [X0 + 0xE0]
	0x01D909E8 CBNZ W8, 0x1D909F0
	0x01D909EC BL 0x1C16DFC
	0x01D909F0 MOV X0, X21
	0x01D909F4 MOV X1, X31
	0x01D909F8 MOV X2, X31
	0x01D909FC BL 0x3C3883C
	0x01D90A00 TBZ X0, 0x0, 0x1D91264
	0x01D90A04 LDR X8, [X20]
	0x01D90A08 CBZ X8, 0x1D913B8
	0x01D90A0C LDR W9, [X8 + 0x80]
	0x01D90A10 CMP W9, 0x3
	0x01D90A14 B.NE 0x1D90E18
	0x01D90A18 LDR X0, [X24]
	0x01D90A1C LDR X21, [X19 + 0x90]
	0x01D90A20 LDR W8, [X0 + 0xE0]
	0x01D90A24 CBNZ W8, 0x1D90A2C
	0x01D90A28 BL 0x1C16DFC
	0x01D90A2C MOV X0, X21
	0x01D90A30 MOV X1, X31
	0x01D90A34 MOV X2, X31
	0x01D90A38 BL 0x3C354F8

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X23
	012 Move [X31+112], X22
	013 Move [X31+120], X21
	014 Move [X31+128], X20
	015 Move [X31+136], X19
	016 Move [X31+24], S5
	017 Move [X31+32], S6
	018 Move [X31+16], S3
	019 Move [X31+24], S4
	020 Move [X31+12], S2
	021 Move X23, 0x2649000
	022 Move X22, 0x2364000
	023 Move S10, [X31+164]
	024 Move S8, [X31+168]
	025 Move V9, [X31+160]
	026 Move S12, [X31+148]
	027 Move S15, [X31+152]
	028 Move W8, [X23+2545]
	029 Move V11, [X31+144]
	030 Move X22, [X22+1432]
	031 Move W19, W2
	032 Move W20, W1
	033 Move V13, V1
	034 Move V14, V0
	035 Move X21, X0
	036 Move TEMP, X8
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {45}
	040 Move X0, 0x2364000
	041 Move X0, [X0+1432]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X23+2545], W8
	045 Move X0, [X22]
	046 Move X22, [X21+336]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X22
	052 Move X1, X31
	053 Move X2, X31
	054 Call Object.op_Inequality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {93}
	059 Move X1, [X21+336]
	060 Move [X31+160], S9
	061 Move [X31+168], S10
	062 Move [X31+144], S11
	063 Move [X31+152], S12
	064 Move [X31+168], S8
	065 And W2, W20, 1
	066 And W3, W19, 1
	067 Move [X31+152], S15
	068 Move X0, X21
	069 Move V0, V14
	070 Move V1, V13
	071 Move S2, [X31+12]
	072 Move S3, [X31+16]
	073 Move S4, [X31+20]
	074 Move S5, [X31+24]
	075 Move V6, [X31+28]
	076 Move X20, [X31+128]
	077 Move X19, [X31+136]
	078 Move X22, [X31+112]
	079 Move X21, [X31+120]
	080 Move X30, [X31+96]
	081 Move X23, [X31+104]
	082 Move D9, [X31+80]
	083 Move D8, [X31+88]
	084 Move D11, [X31+64]
	085 Move D10, [X31+72]
	086 Move D13, [X31+48]
	087 Move D12, [X31+56]
	088 Move D15, [X31+32]
	089 Move D14, [X31+40]
	090 Add X31, X31, 144
	091 Call GrabbableItem.Release, X0, X1, X2, X3, X4, X5, X6, X7
	092 Return 
	093 Move X20, [X31+128]
	094 Move X19, [X31+136]
	095 Move X22, [X31+112]
	096 Move X21, [X31+120]
	097 Move X30, [X31+96]
	098 Move X23, [X31+104]
	099 Move D9, [X31+80]
	100 Move D8, [X31+88]
	101 Move D11, [X31+64]
	102 Move D10, [X31+72]
	103 Move D13, [X31+48]
	104 Move D12, [X31+56]
	105 Move D15, [X31+32]
	106 Move D14, [X31+40]
	107 Add X31, X31, 144
	108 Return 

Method: System.Void Release(AnimalCompany.AttachedItemAnchor interactor, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 velocity, UnityEngine.Vector3 angularVelocity, System.Boolean playSFX = True, System.Boolean fromDeath = False)

Disassembly:
	0x01D8A718 ADRP X9, 0x236C000
	0x01D8A71C LDR X9, [X9 + 0xA58]
	0x01D8A720 MOVZ W8, 0x1
	0x01D8A724 STRB W8, [X19 + 0x58]
	0x01D8A728 LDR X8, [X19]
	0x01D8A72C LDR X1, [X9]
	0x01D8A730 LDRB W10, [X8 + 0x130]
	0x01D8A734 LDRB W9, [X1 + 0x130]
	0x01D8A738 CMP W10, W9
	0x01D8A73C B.CC 0x1D8A764
	0x01D8A740 LDR X8, [X8 + 0xC8]
	0x01D8A744 ADD X8, X8, X9, 0x3, LSL
	0x01D8A748 LDUR X8, [X8 - 0x8]
	0x01D8A74C CMP X8, X1
	0x01D8A750 B.NE 0x1D8A764
	0x01D8A754 MOV X0, X19
	0x01D8A758 LDP X20, X19, [X31 + 0x10]
	0x01D8A75C LDR X30, [X31], #0x20
	0x01D8A760 B 0x1D89528
	0x01D8A764 MOV X0, X19
	0x01D8A768 BL 0x1C171E0
	0x01D8A76C BL 0x1C16F20
	0x01D8A770 STP X30, X19, [X31 - 0x10]!
	0x01D8A774 LDR X8, [X0 + 0x50]
	0x01D8A778 CBZ X8, 0x1D8A790
	0x01D8A77C LDR W8, [X8]
	0x01D8A780 CMP W8, 0x0
	0x01D8A784 CSET W0, NE
	0x01D8A788 LDP X30, X19, [X31], #0x10
	0x01D8A78C RET
	0x01D8A790 ADRP X0, 0x2369000
	0x01D8A794 LDR X0, [X0 + 0x5B0]
	0x01D8A798 BL 0x1C16D08
	0x01D8A79C BL 0x1C16F10
	0x01D8A7A0 MOV X19, X0
	0x01D8A7A4 ADRP X0, 0x236C000
	0x01D8A7A8 LDR X0, [X0 + 0xAA8]
	0x01D8A7AC BL 0x1C16D08
	0x01D8A7B0 MOV X1, X0
	0x01D8A7B4 MOV X0, X19
	0x01D8A7B8 MOV X2, X31
	0x01D8A7BC BL 0x337DF1C
	0x01D8A7C0 ADRP X0, 0x236C000
	0x01D8A7C4 LDR X0, [X0 + 0xAB0]
	0x01D8A7C8 BL 0x1C16D08
	0x01D8A7CC MOV X1, X0
	0x01D8A7D0 MOV X0, X19
	0x01D8A7D4 BL 0x1C16DEC
	0x01D8A7D8 STP X30, X19, [X31 - 0x10]!
	0x01D8A7DC LDR X8, [X0 + 0x50]
	0x01D8A7E0 CBZ X8, 0x1D8A7F4
	0x01D8A7E4 AND W9, W1, 0x1
	0x01D8A7E8 STR W9, [X8]
	0x01D8A7EC LDP X30, X19, [X31], #0x10
	0x01D8A7F0 RET
	0x01D8A7F4 ADRP X0, 0x2369000
	0x01D8A7F8 LDR X0, [X0 + 0x5B0]
	0x01D8A7FC BL 0x1C16D08
	0x01D8A800 BL 0x1C16F10
	0x01D8A804 MOV X19, X0
	0x01D8A808 ADRP X0, 0x236C000
	0x01D8A80C LDR X0, [X0 + 0xAA8]
	0x01D8A810 BL 0x1C16D08
	0x01D8A814 MOV X1, X0
	0x01D8A818 MOV X0, X19
	0x01D8A81C MOV X2, X31
	0x01D8A820 BL 0x337DF1C
	0x01D8A824 ADRP X0, 0x236C000
	0x01D8A828 LDR X0, [X0 + 0xAB8]
	0x01D8A82C BL 0x1C16D08
	0x01D8A830 MOV X1, X0
	0x01D8A834 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X24
	012 Move [X31+104], X23
	013 Move [X31+112], X22
	014 Move [X31+120], X21
	015 Move [X31+128], X20
	016 Move [X31+136], X19
	017 Move S9, [X31+164]
	018 Move S8, [X31+168]
	019 Move V11, [X31+160]
	020 Move S10, [X31+148]
	021 Move S15, [X31+152]
	022 Move V12, [X31+144]
	023 Move [X31+88], S5
	024 Move [X31+96], S6
	025 Move [X31+8], S3
	026 Move [X31+16], S4
	027 Move [X31+4], S2
	028 Move [X0+416], X31
	029 Compare X1, 0
	030 JumpIfEqual {101}
	031 Move X24, 0x264F000
	032 Move W8, [X24+2594]
	033 Move X23, [X1+56]
	034 Move W19, W3
	035 Move W20, W2
	036 Move V13, V1
	037 Move V14, V0
	038 Move X22, X1
	039 Move X21, X0
	040 Compare W8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, 0x236A000
	043 Move X0, [X0+1432]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X24+2594], W8
	047 Move X8, 0x236A000
	048 Move X8, [X8+1432]
	049 Move X0, [X8]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X23
	055 Move X1, X31
	056 Call Object.op_Implicit, X0
	057 Move X1, X31
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {67}
	062 Move X0, [X22+56]
	063 Move X1, X22
	064 Move X2, X31
	065 Call NetworkBehaviour.NetworkWrap, X0, X1
	066 Move X1, X0
	067 Move [X31+160], S11
	068 Move [X31+168], S9
	069 Move [X31+144], S12
	070 Move [X31+152], S10
	071 Move [X31+168], S8
	072 And W2, W20, 1
	073 And W3, W19, 1
	074 Move [X31+152], S15
	075 Move X0, X21
	076 Move V0, V14
	077 Move V1, V13
	078 Move S2, [X31+4]
	079 Move S3, [X31+8]
	080 Move V4, [X31+12]
	081 Move S5, [X31+88]
	082 Move S6, [X31+92]
	083 Move X20, [X31+128]
	084 Move X19, [X31+136]
	085 Move X22, [X31+112]
	086 Move X21, [X31+120]
	087 Move X24, [X31+96]
	088 Move X23, [X31+104]
	089 Move X30, [X31+80]
	090 Move D9, [X31+64]
	091 Move D8, [X31+72]
	092 Move D11, [X31+48]
	093 Move D10, [X31+56]
	094 Move D13, [X31+32]
	095 Move D12, [X31+40]
	096 Move D15, [X31+16]
	097 Move D14, [X31+24]
	098 Add X31, X31, 144
	099 Call GrabbableItem.RPC_Release, X0, X1, X2, X3, X4, X5, X6, X7
	100 Return 
	101 Call 0x1C17F20

Method: System.Void RPC_Release(Fusion.NetworkBehaviourId interactorId, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 velocity, UnityEngine.Vector3 angularVelocity, System.Boolean playSFX = True, System.Boolean fromDeath = False)

Disassembly:
	0x01D90A3C TBZ X0, 0x0, 0x1D90E10
	0x01D90A40 LDR X0, [X19 + 0x90]
	0x01D90A44 CBZ X0, 0x1D913B8
	0x01D90A48 MOV X1, X31
	0x01D90A4C BL 0x3C3F830
	0x01D90A50 MOV X0, X31
	0x01D90A54 BL 0x3C2A260
	0x01D90A58 LDR X0, [X19 + 0x90]
	0x01D90A5C CBZ X0, 0x1D913B8
	0x01D90A60 LDR X21, [X19 + 0xD0]
	0x01D90A64 MOV X1, X31
	0x01D90A68 MOV V8.16B, V0.16B
	0x01D90A6C MOV V9.16B, V1.16B
	0x01D90A70 MOV V10.16B, V2.16B
	0x01D90A74 MOV V11.16B, V3.16B
	0x01D90A78 BL 0x3C3EB78
	0x01D90A7C B 0x1D91028
	0x01D90A80 LDR X20, [X19 + 0xE8]
	0x01D90A84 CBZ X20, 0x1D90C08
	0x01D90A88 MOV X0, X19
	0x01D90A8C MOV X1, X31
	0x01D90A90 BL 0x3C32E90
	0x01D90A94 CBZ X0, 0x1D913B8
	0x01D90A98 MOV X1, X31
	0x01D90A9C BL 0x3C3F58C
	0x01D90AA0 FMOV S3, 1
	0x01D90AA4 MOVZ W1, 0x1
	0x01D90AA8 MOV X0, X20
	0x01D90AAC MOV X2, X31
	0x01D90AB0 BL 0x1DD0FA8
	0x01D90AB4 B 0x1D90C08
	0x01D90AB8 LDR X8, [X25]
	0x01D90ABC LDR X0, [X26]
	0x01D90AC0 LDR X8, [X8 + 0xB8]
	0x01D90AC4 LDR X20, [X8 + 0xD8]
	0x01D90AC8 BL 0x1C16F10
	0x01D90ACC LDR X2, [X27]
	0x01D90AD0 MOV X1, X19
	0x01D90AD4 MOV X3, X31
	0x01D90AD8 MOV X21, X0
	0x01D90ADC BL 0x3314368
	0x01D90AE0 MOV X0, X20
	0x01D90AE4 MOV X1, X21
	0x01D90AE8 MOV X2, X31
	0x01D90AEC BL 0x33C0DE4
	0x01D90AF0 LDR X1, [X26]
	0x01D90AF4 CBZ X0, 0x1D90B80
	0x01D90AF8 LDR X8, [X0]
	0x01D90AFC CMP X8, X1
	0x01D90B00 B.NE 0x1D908F8
	0x01D90B04 LDR X8, [X25]
	0x01D90B08 LDR X8, [X8 + 0xB8]
	0x01D90B0C STR X0, [X8 + 0xD8]
	0x01D90B10 LDR X9, [X0]
	0x01D90B14 CMP X9, X1
	0x01D90B18 B.EQ 0x1D90B8C
	0x01D90B1C B 0x1D908F8
	0x01D90B20 LDR X8, [X25]
	0x01D90B24 LDR X8, [X8 + 0xB8]
	0x01D90B28 STR X0, [X8 + 0xC8]
	0x01D90B2C LDR X20, [X8 + 0x48]
	0x01D90B30 MOV X0, X1
	0x01D90B34 BL 0x1C16F10
	0x01D90B38 LDR X2, [X28]
	0x01D90B3C MOV X1, X19
	0x01D90B40 MOV X3, X31
	0x01D90B44 MOV X21, X0
	0x01D90B48 BL 0x3314368
	0x01D90B4C MOV X0, X20
	0x01D90B50 MOV X1, X21
	0x01D90B54 MOV X2, X31
	0x01D90B58 BL 0x33C0DE4
	0x01D90B5C CBZ X0, 0x1D90BEC
	0x01D90B60 LDR X1, [X26]
	0x01D90B64 LDR X8, [X0]
	0x01D90B68 CMP X8, X1
	0x01D90B6C B.NE 0x1D908F8
	0x01D90B70 LDR X8, [X25]
	0x01D90B74 LDR X8, [X8 + 0xB8]
	0x01D90B78 STR X0, [X8 + 0x48]
	0x01D90B7C B 0x1D90BDC
	0x01D90B80 LDR X8, [X25]
	0x01D90B84 LDR X8, [X8 + 0xB8]
	0x01D90B88 STR X0, [X8 + 0xD8]
	0x01D90B8C LDR X20, [X8 + 0x58]
	0x01D90B90 MOV X0, X1
	0x01D90B94 BL 0x1C16F10
	0x01D90B98 LDR X2, [X28]
	0x01D90B9C MOV X1, X19
	0x01D90BA0 MOV X3, X31
	0x01D90BA4 MOV X21, X0
	0x01D90BA8 BL 0x3314368
	0x01D90BAC MOV X0, X20
	0x01D90BB0 MOV X1, X21
	0x01D90BB4 MOV X2, X31
	0x01D90BB8 BL 0x33C0DE4
	0x01D90BBC CBZ X0, 0x1D90BFC
	0x01D90BC0 LDR X1, [X26]
	0x01D90BC4 LDR X8, [X0]
	0x01D90BC8 CMP X8, X1
	0x01D90BCC B.NE 0x1D908F8
	0x01D90BD0 LDR X8, [X25]
	0x01D90BD4 LDR X8, [X8 + 0xB8]
	0x01D90BD8 STR X0, [X8 + 0x58]
	0x01D90BDC LDR X8, [X0]
	0x01D90BE0 CMP X8, X1
	0x01D90BE4 B.EQ 0x1D90C08
	0x01D90BE8 B 0x1D908F8
	0x01D90BEC LDR X8, [X25]
	0x01D90BF0 LDR X8, [X8 + 0xB8]
	0x01D90BF4 STR X0, [X8 + 0x48]
	0x01D90BF8 B 0x1D90C08
	0x01D90BFC LDR X8, [X25]
	0x01D90C00 LDR X8, [X8 + 0xB8]
	0x01D90C04 STR X0, [X8 + 0x58]
	0x01D90C08 LDR X8, [X23 + 0x28]
	0x01D90C0C LDR X9, [X31 + 0x3F8]
	0x01D90C10 CMP X8, X9
	0x01D90C14 B.NE 0x1D913C0
	0x01D90C18 ADD X31, X31, 0x400
	0x01D90C1C LDP X20, X19, [X31 + 0x90]
	0x01D90C20 LDP X22, X21, [X31 + 0x80]
	0x01D90C24 LDP X24, X23, [X31 + 0x70]
	0x01D90C28 LDP X26, X25, [X31 + 0x60]
	0x01D90C2C LDP X28, X27, [X31 + 0x50]
	0x01D90C30 LDP X29, X30, [X31 + 0x40]
	0x01D90C34 LDP D9, D8, [X31 + 0x30]
	0x01D90C38 LDP D11, D10, [X31 + 0x20]
	0x01D90C3C LDP D13, D12, [X31 + 0x10]
	0x01D90C40 LDP D15, D14, [X31], #0xA0
	0x01D90C44 RET
	0x01D90C48 ADD X8, X31, 0x210
	0x01D90C4C MOV X1, X31
	0x01D90C50 BL 0x3C3FF0C
	0x01D90C54 LDP V0, V1, [X31 + 0x210]
	0x01D90C58 LDP V2, V3, [X31 + 0x230]
	0x01D90C5C STP V0, V1, [X31 + 0x250]
	0x01D90C60 STP V2, V3, [X31 + 0x270]
	0x01D90C64 LDR X0, [X19 + 0xB0]
	0x01D90C68 CBZ X0, 0x1D913B8
	0x01D90C6C ADD X8, X31, 0x210
	0x01D90C70 MOV X1, X31
	0x01D90C74 BL 0x3C3F1C8
	0x01D90C78 LDP V0, V1, [X31 + 0x210]
	0x01D90C7C LDP V2, V3, [X31 + 0x230]
	0x01D90C80 ADD X8, X31, 0x210
	0x01D90C84 ADD X0, X31, 0x1D0
	0x01D90C88 STP V0, V1, [X31 + 0x190]
	0x01D90C8C LDP V0, V1, [X31 + 0x250]
	0x01D90C90 STP V2, V3, [X31 + 0x1B0]
	0x01D90C94 LDP V2, V3, [X31 + 0x270]
	0x01D90C98 ADD X1, X31, 0x190
	0x01D90C9C MOV X2, X31
	0x01D90CA0 STP V0, V1, [X31 + 0x1D0]
	0x01D90CA4 STP V2, V3, [X31 + 0x1F0]
	0x01D90CA8 BL 0x3C27F74
	0x01D90CAC LDP V0, V1, [X31 + 0x210]
	0x01D90CB0 LDP V2, V3, [X31 + 0x230]
	0x01D90CB4 ADD X0, X31, 0x350
	0x01D90CB8 MOV X1, X31
	0x01D90CBC STP V0, V1, [X31 + 0x350]
	0x01D90CC0 STP V2, V3, [X31 + 0x370]
	0x01D90CC4 BL 0x3C26F30
	0x01D90CC8 MOV X0, X31
	0x01D90CCC BL 0x3C2A260
	0x01D90CD0 LDR X0, [X19 + 0x1A8]
	0x01D90CD4 CBZ X0, 0x1D913B8
	0x01D90CD8 MOV X1, X31
	0x01D90CDC MOV V9.16B, V0.16B
	0x01D90CE0 MOV V8.16B, V1.16B
	0x01D90CE4 MOV V10.16B, V2.16B
	0x01D90CE8 MOV V11.16B, V3.16B
	0x01D90CEC BL 0x3C3DEB4
	0x01D90CF0 LDR X0, [X19 + 0x1A8]
	0x01D90CF4 CBZ X0, 0x1D913B8
	0x01D90CF8 FMUL S4, S11, S3
	0x01D90CFC FMUL S5, S9, S0
	0x01D90D00 FMUL S16, S8, S0
	0x01D90D04 FMUL S17, S10, S3
	0x01D90D08 FMUL S18, S11, S2
	0x01D90D0C FMUL S20, S11, S1
	0x01D90D10 FMUL S21, S10, S0
	0x01D90D14 FMUL S0, S11, S0
	0x01D90D18 FMUL S23, S9, S3
	0x01D90D1C FMUL S3, S8, S3
	0x01D90D20 FMUL S6, S8, S1
	0x01D90D24 FMUL S19, S9, S1
	0x01D90D28 FMUL S1, S10, S1
	0x01D90D2C FMUL S22, S9, S2
	0x01D90D30 FSUB S4, S4, S5
	0x01D90D34 FADD S5, S17, S18
	0x01D90D38 FADD S3, S3, S20
	0x01D90D3C FADD S0, S23, S0
	0x01D90D40 FMUL S7, S10, S2
	0x01D90D44 FMUL S2, S8, S2
	0x01D90D48 FSUB S4, S4, S6

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X23
	012 Move [X31+112], X22
	013 Move [X31+120], X21
	014 Move [X31+128], X20
	015 Move [X31+136], X19
	016 Move X23, 0x2649000
	017 Move V13, V3
	018 Move V9, V2
	019 Move V10, V1
	020 Move V15, V0
	021 Move S0, [X31+164]
	022 Move S14, [X31+168]
	023 Move V1, [X31+160]
	024 Move S2, [X31+148]
	025 Move S11, [X31+152]
	026 Move W8, [X23+2546]
	027 Move V3, [X31+144]
	028 Move W19, W3
	029 Move W20, W2
	030 Move V12, V5
	031 Move V8, V4
	032 Move X22, X1
	033 Move X21, X0
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {72}
	038 Move X0, 0x2367000
	039 Move X0, [X0+2680]
	040 Move [X31+24], S11
	041 Move [X31+32], S15
	042 Move [X31+16], S14
	043 Move [X31+24], S10
	044 Move [X31+12], S9
	045 Move V9, V13
	046 Move V13, V8
	047 Move V8, V12
	048 Move V12, V6
	049 Move V15, V0
	050 Move V11, V1
	051 Move V10, V2
	052 Move V14, V3
	053 Call 0x1C17CF4
	054 Move X0, 0x2367000
	055 Move X0, [X0+3432]
	056 Call 0x1C17CF4
	057 Move V3, V14
	058 Move V2, V10
	059 Move V1, V11
	060 Move V0, V15
	061 Move V6, V12
	062 Move V12, V8
	063 Move V8, V13
	064 Move V13, V9
	065 Move S9, [X31+12]
	066 Move S14, [X31+16]
	067 Move S10, [X31+20]
	068 Move S11, [X31+24]
	069 Move V15, [X31+28]
	070 Move W8, 1
	071 Move [X23+2546], W8
	072 Move W8, [X21+88]
	073 Compare W8, 0
	074 JumpIfEqual {106}
	075 Move [X21+88], W31
	076 Move [X31+160], S1
	077 Move [X31+168], S0
	078 Move [X31+144], S3
	079 Move [X31+152], S2
	080 Move [X31+168], S14
	081 And W2, W20, 1
	082 And W3, W19, 1
	083 Move [X31+152], S11
	084 Move X0, X21
	085 Move V0, V15
	086 Move V1, V10
	087 Move V2, V9
	088 Move V3, V13
	089 Move V4, V8
	090 Move V5, V12
	091 Move X20, [X31+128]
	092 Move X19, [X31+136]
	093 Move X22, [X31+112]
	094 Move X21, [X31+120]
	095 Move X30, [X31+96]
	096 Move X23, [X31+104]
	097 Move D9, [X31+80]
	098 Move D8, [X31+88]
	099 Move D11, [X31+64]
	100 Move D10, [X31+72]
	101 Move D13, [X31+48]
	102 Move D12, [X31+56]
	103 Move D15, [X31+32]
	104 Move D14, [X31+40]
	105 Add X31, X31, 144
	106 Move [X31+12], S3
	107 Move [X31+20], S2
	108 Move [X31+20], S1
	109 Move [X31+28], S0
	110 Move [X31+28], S6
	111 Move X23, 0x2367000
	112 Move X23, [X23+2680]
	113 Move X0, [X23]
	114 Move W8, [X0+224]
	115 Compare W8, 0
	116 JumpIfNotEqual {118}
	117 Call 0x1C17DFC
	118 Move X0, X21
	119 Move X1, X31
	120 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	121 Move X0, [X21+56]
	122 Compare X0, 0
	123 JumpIfEqual {269}
	124 Move X1, X31
	125 Call NetworkRunner.get_Stage, X0
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move X20, [X31+128]
	128 Move X19, [X31+136]
	129 Move X22, [X31+112]
	130 Move X21, [X31+120]
	131 Move X30, [X31+96]
	132 Move X23, [X31+104]
	133 Move D9, [X31+80]
	134 Move D8, [X31+88]
	135 Move D11, [X31+64]
	136 Move D10, [X31+72]
	137 Move D13, [X31+48]
	138 Move D12, [X31+56]
	139 Move D15, [X31+32]
	140 Move D14, [X31+40]
	141 Add X31, X31, 144
	142 Return 
	143 Move X0, [X21+64]
	144 Compare X0, 0
	145 JumpIfEqual {269}
	146 Move X1, X31
	147 Call NetworkObject.GetLocalAuthorityMask, X0
	148 And W31, W0, 7
	149 Move S0, [X31+24]
	150 Move S6, [X31+28]
	151 Move S2, [X31+16]
	152 Move S1, [X31+20]
	153 Move V3, [X31+12]
	154 Move TEMP, X0
	155 And TEMP, TEMP, 1
	156 Compare TEMP, 1
	157 JumpIfEqual {76}
	158 Move X8, [X21+56]
	159 Compare X8, 0
	160 JumpIfEqual {269}
	161 Move X0, [X8+80]
	162 Compare X0, 0
	163 JumpIfEqual {269}
	164 Move X1, X31
	165 Call Simulation.HasAnyActiveConnections, X0
	166 Move TEMP, X0
	167 And TEMP, TEMP, 1
	168 Compare TEMP, 1
	169 JumpIfNotEqual {127}
	170 Move X8, [X21+56]
	171 Compare X8, 0
	172 JumpIfEqual {269}
	173 Move X0, [X8+80]
	174 Move W1, 76
	175 Move X2, X31
	176 Call SimulationMessage.Allocate, X0, X1
	177 Move X8, [X21+64]
	178 Compare X8, 0
	179 JumpIfEqual {269}
	180 Move X8, [X8+32]
	181 Move X23, X0
	182 Compare X8, 0
	183 JumpIfEqual {214}
	184 Move W0, [X8]
	185 Move X0, [X23]
	186 Move X19, [X21+64]
	187 Move W8, [X0+224]
	188 Compare W8, 0
	189 JumpIfNotEqual {191}
	190 Call 0x1C17DFC
	191 Move X8, 0x2367000
	192 Move X8, [X8+3432]
	193 Move X1, X19
	194 Move X20, [X31+128]
	195 Move X19, [X31+136]
	196 Move X22, [X31+112]
	197 Move X21, [X31+120]
	198 Move X0, [X8]
	199 Move X30, [X31+96]
	200 Move X23, [X31+104]
	201 Move D9, [X31+80]
	202 Move D8, [X31+88]
	203 Move D11, [X31+64]
	204 Move D10, [X31+72]
	205 Move D13, [X31+48]
	206 Move D12, [X31+56]
	207 Move D15, [X31+32]
	208 Move D14, [X31+40]
	209 Move W2, 7
	210 Move X3, X31
	211 Add X31, X31, 144
	212 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	213 Return 
	214 Move X0, X31
	215 Move W1, [X21+104]
	216 Move W2, 2
	217 Move X3, X31
	218 Call RpcHeader.Create, X0, X1, X2
	219 Move V1, [X31+28]
	220 Move V0, [X31+12]
	221 And W8, W20, 1
	222 And W9, W19, 1
	223 Move [X23+28], X0
	224 Move [X23+68], S1
	225 Move [X23+76], S0
	226 Move V0, [X31+16]
	227 Move V1, [X31+20]
	228 Move [X23+36], X22
	229 Move [X23+44], S15
	230 Move [X23+52], S10
	231 Move [X23+76], S0
	232 Move [X23+84], S11
	233 Move V0, [X31+24]
	234 Move [X23+52], S9
	235 Move [X23+60], S13
	236 Move [X23+60], S8
	237 Move [X23+68], S12
	238 Move [X23+92], S14
	239 Move [X23+84], S1
	240 Move [X23+92], S0
	241 Move [X23+96], W8
	242 Move [X23+100], W9
	243 Compare X23, 0
	244 JumpIfEqual {269}
	245 Move W8, 608
	246 Move [X23+12], W8
	247 Move X0, [X21+56]
	248 Compare X0, 0
	249 JumpIfEqual {269}
	250 Move X1, X23
	251 Move X20, [X31+128]
	252 Move X19, [X31+136]
	253 Move X22, [X31+112]
	254 Move X21, [X31+120]
	255 Move X30, [X31+96]
	256 Move X23, [X31+104]
	257 Move D9, [X31+80]
	258 Move D8, [X31+88]
	259 Move D11, [X31+64]
	260 Move D10, [X31+72]
	261 Move D13, [X31+48]
	262 Move D12, [X31+56]
	263 Move D15, [X31+32]
	264 Move D14, [X31+40]
	265 Move X2, X31
	266 Add X31, X31, 144
	267 Call NetworkRunner.SendRpc, X0, X1
	268 Return 
	269 Call 0x1C17F20

Method: System.Void ReleaseInternal(Fusion.NetworkBehaviourId interactorId, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 velocity, UnityEngine.Vector3 angularVelocity, System.Boolean playSFX = True, System.Boolean fromDeath = False)

Disassembly:
	0x01D90D4C FADD S5, S16, S5
	0x01D90D50 FADD S3, S22, S3
	0x01D90D54 FADD S0, S1, S0
	0x01D90D58 MOV X1, X31
	0x01D90D5C FSUB S8, S4, S7
	0x01D90D60 FSUB S9, S5, S19
	0x01D90D64 FSUB S10, S3, S21
	0x01D90D68 FSUB S11, S0, S2
	0x01D90D6C BL 0x3C3F58C
	0x01D90D70 ADD X0, X31, 0x350
	0x01D90D74 MOV X1, X31
	0x01D90D78 STR S0, [X31 + 0xC]
	0x01D90D7C MOV V13.16B, V1.16B
	0x01D90D80 MOV V14.16B, V2.16B
	0x01D90D84 BL 0x3C28174
	0x01D90D88 FNEG S4, S0
	0x01D90D8C FNEG S5, S1
	0x01D90D90 FNEG S6, S2
	0x01D90D94 MOV V0.16B, V11.16B
	0x01D90D98 MOV V1.16B, V10.16B
	0x01D90D9C MOV V2.16B, V9.16B
	0x01D90DA0 MOV V3.16B, V8.16B
	0x01D90DA4 MOV X0, X31
	0x01D90DA8 STR S8, [X31 + 0x8]
	0x01D90DAC BL 0x3C2A9FC
	0x01D90DB0 MOV X0, X19
	0x01D90DB4 MOV X1, X31
	0x01D90DB8 MOV V15.16B, V0.16B
	0x01D90DBC MOV V12.16B, V1.16B
	0x01D90DC0 MOV V8.16B, V2.16B
	0x01D90DC4 BL 0x3C32E90
	0x01D90DC8 CBZ X0, 0x1D913B8
	0x01D90DCC LDR V0, [X31 + 0xC]
	0x01D90DD0 FADD S2, S14, S8
	0x01D90DD4 FADD S1, S13, S12
	0x01D90DD8 MOV X1, X31
	0x01D90DDC FADD S0, S0, S15
	0x01D90DE0 BL 0x3C3F62C
	0x01D90DE4 MOV X0, X19
	0x01D90DE8 MOV X1, X31
	0x01D90DEC BL 0x3C32E90
	0x01D90DF0 CBZ X0, 0x1D913B8
	0x01D90DF4 LDR V3, [X31 + 0x8]
	0x01D90DF8 MOV V0.16B, V11.16B
	0x01D90DFC MOV V1.16B, V10.16B
	0x01D90E00 MOV V2.16B, V9.16B
	0x01D90E04 MOV X1, X31
	0x01D90E08 BL 0x3C3F7AC
	0x01D90E0C B 0x1D91264
	0x01D90E10 LDR X8, [X20]
	0x01D90E14 CBZ X8, 0x1D913B8
	0x01D90E18 LDR W8, [X8 + 0x80]
	0x01D90E1C CMP W8, 0x2
	0x01D90E20 B.EQ 0x1D90F48
	0x01D90E24 CMP W8, 0x1
	0x01D90E28 B.EQ 0x1D9109C
	0x01D90E2C CBNZ W8, 0x1D91054
	0x01D90E30 LDR X0, [X24]
	0x01D90E34 LDR X21, [X19 + 0xA0]
	0x01D90E38 LDR W8, [X0 + 0xE0]
	0x01D90E3C CBNZ W8, 0x1D90E44
	0x01D90E40 BL 0x1C16DFC
	0x01D90E44 MOV X0, X21
	0x01D90E48 MOV X1, X31
	0x01D90E4C MOV X2, X31
	0x01D90E50 BL 0x3C354F8
	0x01D90E54 TBZ X0, 0x0, 0x1D911E4
	0x01D90E58 MOV X0, X19
	0x01D90E5C MOV X1, X31
	0x01D90E60 BL 0x3C32E90
	0x01D90E64 CBZ X0, 0x1D913B8
	0x01D90E68 ADD X8, X31, 0x210
	0x01D90E6C MOV X1, X31
	0x01D90E70 BL 0x3C3FF0C
	0x01D90E74 LDP V0, V1, [X31 + 0x210]
	0x01D90E78 LDP V2, V3, [X31 + 0x230]
	0x01D90E7C STP V0, V1, [X31 + 0x250]
	0x01D90E80 STP V2, V3, [X31 + 0x270]
	0x01D90E84 LDR X0, [X19 + 0xA0]
	0x01D90E88 CBZ X0, 0x1D913B8
	0x01D90E8C ADD X8, X31, 0x210
	0x01D90E90 MOV X1, X31
	0x01D90E94 BL 0x3C3F1C8
	0x01D90E98 LDP V0, V1, [X31 + 0x210]
	0x01D90E9C LDP V2, V3, [X31 + 0x230]
	0x01D90EA0 ADD X8, X31, 0x210
	0x01D90EA4 ADD X0, X31, 0x150
	0x01D90EA8 STP V0, V1, [X31 + 0x110]
	0x01D90EAC LDP V0, V1, [X31 + 0x250]
	0x01D90EB0 STP V2, V3, [X31 + 0x130]
	0x01D90EB4 LDP V2, V3, [X31 + 0x270]
	0x01D90EB8 ADD X1, X31, 0x110
	0x01D90EBC MOV X2, X31
	0x01D90EC0 STP V0, V1, [X31 + 0x150]
	0x01D90EC4 STP V2, V3, [X31 + 0x170]
	0x01D90EC8 BL 0x3C27F74
	0x01D90ECC LDP V0, V1, [X31 + 0x210]
	0x01D90ED0 LDP V2, V3, [X31 + 0x230]
	0x01D90ED4 ADD X0, X31, 0x310
	0x01D90ED8 MOV X1, X31
	0x01D90EDC STP V0, V1, [X31 + 0x310]
	0x01D90EE0 STP V2, V3, [X31 + 0x330]
	0x01D90EE4 BL 0x3C26F30
	0x01D90EE8 MOV X0, X31
	0x01D90EEC BL 0x3C2A260
	0x01D90EF0 LDR X21, [X19 + 0xD0]
	0x01D90EF4 ADD X0, X31, 0x310
	0x01D90EF8 MOV X1, X31
	0x01D90EFC MOV V8.16B, V0.16B
	0x01D90F00 MOV V9.16B, V1.16B
	0x01D90F04 MOV V10.16B, V2.16B
	0x01D90F08 MOV V11.16B, V3.16B
	0x01D90F0C BL 0x3C28174
	0x01D90F10 FNEG S4, S0
	0x01D90F14 FNEG S5, S1
	0x01D90F18 FNEG S6, S2
	0x01D90F1C MOV V0.16B, V8.16B
	0x01D90F20 MOV V1.16B, V9.16B
	0x01D90F24 MOV V2.16B, V10.16B
	0x01D90F28 MOV V3.16B, V11.16B
	0x01D90F2C MOV X0, X31
	0x01D90F30 BL 0x3C2A9FC
	0x01D90F34 CBZ X21, 0x1D913B8
	0x01D90F38 LDR V3, [X19 + 0x260]
	0x01D90F3C LDR V4, [X19 + 0x25C]
	0x01D90F40 LDR V5, [X19 + 0x258]
	0x01D90F44 B 0x1D911B0
	0x01D90F48 LDR X0, [X24]
	0x01D90F4C LDR X21, [X19 + 0x98]
	0x01D90F50 LDR W8, [X0 + 0xE0]
	0x01D90F54 CBNZ W8, 0x1D90F5C
	0x01D90F58 BL 0x1C16DFC
	0x01D90F5C MOV X0, X21
	0x01D90F60 MOV X1, X31
	0x01D90F64 MOV X2, X31
	0x01D90F68 BL 0x3C354F8
	0x01D90F6C TBZ X0, 0x0, 0x1D91054
	0x01D90F70 MOV X0, X19
	0x01D90F74 MOV X1, X31
	0x01D90F78 BL 0x3C32E90
	0x01D90F7C CBZ X0, 0x1D913B8
	0x01D90F80 ADD X8, X31, 0x210
	0x01D90F84 MOV X1, X31
	0x01D90F88 BL 0x3C3FF0C
	0x01D90F8C LDP V0, V1, [X31 + 0x210]
	0x01D90F90 LDP V2, V3, [X31 + 0x230]
	0x01D90F94 STP V0, V1, [X31 + 0x250]
	0x01D90F98 STP V2, V3, [X31 + 0x270]
	0x01D90F9C LDR X0, [X19 + 0x98]
	0x01D90FA0 CBZ X0, 0x1D913B8
	0x01D90FA4 ADD X8, X31, 0x210
	0x01D90FA8 MOV X1, X31
	0x01D90FAC BL 0x3C3F1C8
	0x01D90FB0 LDP V0, V1, [X31 + 0x210]
	0x01D90FB4 LDP V2, V3, [X31 + 0x230]
	0x01D90FB8 ADD X8, X31, 0x210
	0x01D90FBC ADD X0, X31, 0x50
	0x01D90FC0 STP V0, V1, [X31 + 0x10]
	0x01D90FC4 LDP V0, V1, [X31 + 0x250]
	0x01D90FC8 STP V2, V3, [X31 + 0x30]
	0x01D90FCC LDP V2, V3, [X31 + 0x270]
	0x01D90FD0 ADD X1, X31, 0x10
	0x01D90FD4 MOV X2, X31
	0x01D90FD8 STP V0, V1, [X31 + 0x50]
	0x01D90FDC STP V2, V3, [X31 + 0x70]
	0x01D90FE0 BL 0x3C27F74
	0x01D90FE4 LDP V0, V1, [X31 + 0x210]
	0x01D90FE8 LDP V2, V3, [X31 + 0x230]
	0x01D90FEC ADD X0, X31, 0x290
	0x01D90FF0 MOV X1, X31
	0x01D90FF4 STP V0, V1, [X31 + 0x290]
	0x01D90FF8 STP V2, V3, [X31 + 0x2B0]
	0x01D90FFC BL 0x3C26F30
	0x01D91000 MOV X0, X31
	0x01D91004 BL 0x3C2A260
	0x01D91008 LDR X21, [X19 + 0xD0]
	0x01D9100C ADD X0, X31, 0x290
	0x01D91010 MOV X1, X31
	0x01D91014 MOV V8.16B, V0.16B
	0x01D91018 MOV V9.16B, V1.16B

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X24
	012 Move [X31+104], X23
	013 Move [X31+112], X22
	014 Move [X31+120], X21
	015 Move [X31+128], X20
	016 Move [X31+136], X19
	017 Move V9, V0
	018 Move V7, [X31+168]
	019 Move V0, [X31+164]
	020 Move X22, 0x2649000
	021 Move W8, [X22+2547]
	022 Move W19, W3
	023 Move [X31+8], S0
	024 Move [X31+16], S7
	025 Move V0, [X31+160]
	026 Move V7, [X31+152]
	027 Move W21, W2
	028 Move V14, V6
	029 Move [X31+4], S0
	030 Move S10, [X31+144]
	031 Move S0, [X31+148]
	032 Move V15, V5
	033 Move V11, V4
	034 Move V12, V3
	035 Move V13, V2
	036 Move V8, V1
	037 Move X20, X0
	038 Move [X31+88], S0
	039 Move [X31+96], S7
	040 Move TEMP, X8
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {52}
	044 Move X0, 0x2364000
	045 Move X0, [X0+1432]
	046 Call 0x1C17CF4
	047 Move X0, 0x2367000
	048 Move X0, [X0+3440]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X22+2547], W8
	052 Move X0, X20
	053 Call GrabbableItem.get_attachedAnchorId, X0
	054 Move X22, X0
	055 Move X0, X31
	056 Call NetworkBehaviourId.get_None
	057 Move X24, 0x2649000
	058 Move W8, [X24+2592]
	059 Move X23, X0
	060 Compare W8, 0
	061 JumpIfNotEqual {67}
	062 Move X0, 0x2367000
	063 Move X0, [X0+920]
	064 Call 0x1C17CF4
	065 Move W8, 1
	066 Move [X24+2592], W8
	067 Move X8, 0x2367000
	068 Move X8, [X8+920]
	069 Move X0, [X8]
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X8, X23
	076 ShiftRight X8, 32
	077 And X8, X8, 0x7FFFFFFF
	078 Move X9, X22
	079 ShiftRight X9, 32
	080 And X9, X9, 0x7FFFFFFF
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X0, X20
	083 Call GrabbableItem.StartTimeoutTimer, X0
	084 Move X0, X31
	085 Call NetworkBehaviourId.get_None
	086 Move X1, X0
	087 Move X0, X20
	088 Call GrabbableItem.set_attachedAnchorId, X0, X1
	089 Move TEMP, X21
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {121}
	093 Move X8, 0x2364000
	094 Move X8, [X8+1432]
	095 Move X21, [X20+224]
	096 Move X0, [X8]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 Move X0, X21
	102 Move X1, X31
	103 Move X2, X31
	104 Call Object.op_Inequality, X0, X1
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {121}
	109 Move X21, [X20+224]
	110 Move X0, X20
	111 Move X1, X31
	112 Call Component.get_transform, X0
	113 Compare X0, 0
	114 JumpIfEqual {235}
	115 Move X1, X31
	116 Call Transform.get_position, X0
	117 Move S3, 1
	118 Move X0, X21
	119 Move X1, X31
	120 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	121 Move X0, X20
	122 Call GrabbableItem.HandleGrabbedChanged, X0
	123 Move X0, [X20+360]
	124 Compare X0, 0
	125 JumpIfEqual {235}
	126 Move V0, V9
	127 Move V1, V8
	128 Move V2, V13
	129 Move X1, X31
	130 Call Rigidbody.set_position, X0, X1
	131 Move X0, [X20+360]
	132 Compare X0, 0
	133 JumpIfEqual {235}
	134 Move V0, V12
	135 Move V1, V11
	136 Move V2, V15
	137 Move V3, V14
	138 Move X1, X31
	139 Call Rigidbody.set_rotation, X0, X1
	140 Move X0, [X20+360]
	141 Compare X0, 0
	142 JumpIfEqual {235}
	143 Move X1, X31
	144 Call Rigidbody.get_mass, X0
	145 Move X0, X20
	146 Move X1, X31
	147 Call Component.get_gameObject, X0
	148 Compare X0, 0
	149 JumpIfEqual {235}
	150 Move X1, X31
	151 Call GameObject.get_tag, X0
	152 Move X8, 0x2367000
	153 Move X8, [X8+3440]
	154 Move X2, X31
	155 Move X1, [X8]
	156 Call String.op_Equality, X0, X1
	157 Move X0, [X20+360]
	158 Compare X0, 0
	159 JumpIfEqual {235}
	160 Move S1, [X31+88]
	161 Move S2, [X31+92]
	162 Move V0, V10
	163 Move X1, X31
	164 Call Rigidbody.set_velocity, X0, X1
	165 Move X0, [X20+360]
	166 Compare X0, 0
	167 JumpIfEqual {235}
	168 Move S0, [X31+4]
	169 Move S1, [X31+8]
	170 Move V2, [X31+12]
	171 Move X1, X31
	172 Call Rigidbody.set_angularVelocity, X0, X1
	173 Move X0, [X20+368]
	174 Compare X0, 0
	175 JumpIfEqual {235}
	176 Move X8, [X0]
	177 Move W1, W31
	178 Move X9, [X8+504]
	179 Move X2, [X8+512]
	180 NotImplemented "Instruction BLR not yet implemented."
	181 Move TEMP, X19
	182 And TEMP, TEMP, 1
	183 Compare TEMP, 1
	184 JumpIfNotEqual {192}
	185 Move X8, [X20+504]
	186 Compare X8, 0
	187 JumpIfEqual {192}
	188 Move X9, [X8+24]
	189 Move X0, [X8+64]
	190 Move X1, [X8+40]
	191 NotImplemented "Instruction BLR not yet implemented."
	192 Move X8, [X20+536]
	193 Compare X8, 0
	194 JumpIfEqual {218}
	195 Move X2, [X8+24]
	196 Move X0, [X8+64]
	197 Move X1, [X8+40]
	198 Move V0, V10
	199 Move S1, [X31+88]
	200 Move S2, [X31+92]
	201 Move X20, [X31+128]
	202 Move X19, [X31+136]
	203 Move X22, [X31+112]
	204 Move X21, [X31+120]
	205 Move X24, [X31+96]
	206 Move X23, [X31+104]
	207 Move X30, [X31+80]
	208 Move D9, [X31+64]
	209 Move D8, [X31+72]
	210 Move D11, [X31+48]
	211 Move D10, [X31+56]
	212 Move D13, [X31+32]
	213 Move D12, [X31+40]
	214 Move D15, [X31+16]
	215 Move D14, [X31+24]
	216 Add X31, X31, 144
	217 CallNoReturn X2
	218 Move X20, [X31+128]
	219 Move X19, [X31+136]
	220 Move X22, [X31+112]
	221 Move X21, [X31+120]
	222 Move X24, [X31+96]
	223 Move X23, [X31+104]
	224 Move X30, [X31+80]
	225 Move D9, [X31+64]
	226 Move D8, [X31+72]
	227 Move D11, [X31+48]
	228 Move D10, [X31+56]
	229 Move D13, [X31+32]
	230 Move D12, [X31+40]
	231 Move D15, [X31+16]
	232 Move D14, [X31+24]
	233 Add X31, X31, 144
	234 Return 
	235 Call 0x1C17F20

Method: System.Void StartTimeoutTimer()

Disassembly:
	0x01D9101C MOV V10.16B, V2.16B
	0x01D91020 MOV V11.16B, V3.16B
	0x01D91024 BL 0x3C28174
	0x01D91028 FNEG S4, S0
	0x01D9102C FNEG S5, S1
	0x01D91030 FNEG S6, S2
	0x01D91034 MOV V0.16B, V8.16B
	0x01D91038 MOV V1.16B, V9.16B
	0x01D9103C MOV V2.16B, V10.16B
	0x01D91040 MOV V3.16B, V11.16B
	0x01D91044 MOV X0, X31
	0x01D91048 BL 0x3C2A9FC
	0x01D9104C CBNZ X21, 0x1D911BC
	0x01D91050 B 0x1D913B8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+128]
	004 Compare X8, 0
	005 JumpIfEqual {18}
	006 Move X19, X0
	007 Move X0, [X0+56]
	008 Move W8, 0x43960000
	009 Move S0, W8
	010 Move X1, X31
	011 Call TickTimer.CreateFromSeconds, X0, V0
	012 And X1, X0, 0
	013 Move X0, X19
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Call GrabbableItem.set_respawnTimer, X0, X1
	017 Return 
	018 Call 0x1C17F20

Method: System.Void StartTimeoutTimer(AnimalCompany.GrabbableItem/TimeoutAction action, System.Single time)

Disassembly:
	0x01D923C4 STRB W8, [X22 + 0x85D]
	0x01D923C8 LDR X0, [X20]
	0x01D923CC LDR W8, [X0 + 0xE0]
	0x01D923D0 CBNZ W8, 0x1D923DC
	0x01D923D4 BL 0x1C16DFC
	0x01D923D8 LDR X0, [X20]
	0x01D923DC LDR X8, [X0 + 0xB8]
	0x01D923E0 LDR X0, [X8]
	0x01D923E4 CBZ X0, 0x1D924AC
	0x01D923E8 MOV X1, X31
	0x01D923EC BL 0x1DBFE4C
	0x01D923F0 STR X0, [X19 + 0x178]
	0x01D923F4 B 0x1D92460
	0x01D923F8 ADRP X20, 0x2363000
	0x01D923FC LDR X20, [X20 + 0x7C8]
	0x01D92400 LDR X0, [X20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move X19, X0
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X0, [X19+56]
	007 Move X1, X31
	008 Call TickTimer.CreateFromSeconds, X0, V0
	009 Move X0, X31
	010 Call TickTimer.get_None
	011 And X1, X0, 0
	012 Move X0, X19
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call GrabbableItem.set_respawnTimer, X0, X1
	016 Return 

Method: System.Void RPC_SetGrabbedOffsets(AnimalCompany.GrabbedInfo gInfo)

Disassembly:
	0x01D92404 LDR W8, [X0 + 0xE0]
	0x01D92408 CBNZ W8, 0x1D92410
	0x01D9240C BL 0x1C16DFC
	0x01D92410 ADRP X22, 0x2646000
	0x01D92414 LDRB W8, [X22 + 0x85D]
	0x01D92418 CBNZ W8, 0x1D92430
	0x01D9241C ADRP X0, 0x2363000
	0x01D92420 LDR X0, [X0 + 0x7C8]
	0x01D92424 BL 0x1C16CF4
	0x01D92428 MOVZ W8, 0x1
	0x01D9242C STRB W8, [X22 + 0x85D]
	0x01D92430 LDR X0, [X20]
	0x01D92434 LDR W8, [X0 + 0xE0]
	0x01D92438 CBNZ W8, 0x1D92444
	0x01D9243C BL 0x1C16DFC
	0x01D92440 LDR X0, [X20]
	0x01D92444 LDR X8, [X0 + 0xB8]
	0x01D92448 LDR X8, [X8]
	0x01D9244C CBZ X8, 0x1D924AC
	0x01D92450 LDR X8, [X8 + 0x78]
	0x01D92454 STR X8, [X19 + 0x178]
	0x01D92458 B 0x1D92460
	0x01D9245C STR X31, [X19 + 0x178]
	0x01D92460 LDR X0, [X21]
	0x01D92464 LDR X20, [X19 + 0x178]
	0x01D92468 LDR W8, [X0 + 0xE0]
	0x01D9246C CBNZ W8, 0x1D92474
	0x01D92470 BL 0x1C16DFC
	0x01D92474 MOV X0, X20
	0x01D92478 MOV X1, X31
	0x01D9247C MOV X2, X31
	0x01D92480 BL 0x3C3883C
	0x01D92484 TBZ X0, 0x0, 0x1D9249C
	0x01D92488 LDR X0, [X19 + 0x150]
	0x01D9248C CBZ X0, 0x1D924AC
	0x01D92490 MOV X1, X31
	0x01D92494 BL 0x3C32E90
	0x01D92498 STR X0, [X19 + 0x178]
	0x01D9249C LDP X20, X19, [X31 + 0x20]
	0x01D924A0 LDP X22, X21, [X31 + 0x10]
	0x01D924A4 LDR X30, [X31], #0x30
	0x01D924A8 RET
	0x01D924AC BL 0x1C16F20
	0x01D924B0 STR X30, [X31 - 0x20]!
	0x01D924B4 STP X20, X19, [X31 + 0x10]
	0x01D924B8 MOV X19, X0
	0x01D924BC STR X31, [X31 + 0x8]
	0x01D924C0 BL 0x1D8EE20
	0x01D924C4 TBZ X0, 0x0, 0x1D92504
	0x01D924C8 LDR X20, [X19 + 0x38]
	0x01D924CC MOV X0, X19
	0x01D924D0 BL 0x1D8EB5C
	0x01D924D4 CBZ X20, 0x1D92524
	0x01D924D8 AND X1, X0, 0x0
	0x01D924DC ADD X2, X31, 0x8
	0x01D924E0 MOV X0, X20
	0x01D924E4 MOV X3, X31
	0x01D924E8 BL 0x1EA323C
	0x01D924EC TBZ X0, 0x0, 0x1D92504
	0x01D924F0 LDR X0, [X19 + 0x38]
	0x01D924F4 CBZ X0, 0x1D92524
	0x01D924F8 LDR X1, [X31 + 0x8]
	0x01D924FC MOV X2, X31
	0x01D92500 BL 0x1EA3884
	0x01D92504 MOV X0, X19
	0x01D92508 MOV X1, X31
	0x01D9250C BL 0x1D8EBBC
	0x01D92510 MOV X0, X19
	0x01D92514 BL 0x1D92658
	0x01D92518 LDP X20, X19, [X31 + 0x10]
	0x01D9251C LDR X30, [X31], #0x20
	0x01D92520 RET
	0x01D92524 BL 0x1C16F20
	0x01D92528 SUB X31, X31, 0x70
	0x01D9252C STR D14, [X31 + 0x20]
	0x01D92530 STP D13, D12, [X31 + 0x28]
	0x01D92534 STP D11, D10, [X31 + 0x38]
	0x01D92538 STP D9, D8, [X31 + 0x48]
	0x01D9253C STR X30, [X31 + 0x58]
	0x01D92540 STP X20, X19, [X31 + 0x60]
	0x01D92544 AND X1, X1, 0x0
	0x01D92548 MOV W20, W2
	0x01D9254C MOV X19, X0
	0x01D92550 BL 0x1D8EBBC
	0x01D92554 MOV X0, X19
	0x01D92558 BL 0x1D92658
	0x01D9255C TBZ X20, 0x0, 0x1D92634
	0x01D92560 MOV X0, X19
	0x01D92564 BL 0x1D8D0A8
	0x01D92568 TBZ X0, 0x0, 0x1D92634
	0x01D9256C MOV X0, X19
	0x01D92570 BL 0x1D896B8
	0x01D92574 MOV X0, X19
	0x01D92578 MOV X1, X31
	0x01D9257C BL 0x3C32E90
	0x01D92580 CBZ X0, 0x1D92654
	0x01D92584 MOV X1, X31
	0x01D92588 BL 0x3C3F58C
	0x01D9258C MOV X0, X19
	0x01D92590 MOV X1, X31
	0x01D92594 MOV V8.16B, V0.16B
	0x01D92598 MOV V9.16B, V1.16B
	0x01D9259C MOV V10.16B, V2.16B
	0x01D925A0 BL 0x3C32E90
	0x01D925A4 CBZ X0, 0x1D92654
	0x01D925A8 MOV X1, X31
	0x01D925AC BL 0x3C3DEB4
	0x01D925B0 ADRP X20, 0x2646000
	0x01D925B4 LDRB W8, [X20 + 0x783]
	0x01D925B8 MOV V11.16B, V0.16B
	0x01D925BC MOV V12.16B, V1.16B
	0x01D925C0 MOV V13.16B, V2.16B
	0x01D925C4 MOV V14.16B, V3.16B
	0x01D925C8 CBNZ W8, 0x1D925E0
	0x01D925CC ADRP X0, 0x2361000
	0x01D925D0 LDR X0, [X0 + 0x5A0]
	0x01D925D4 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X22+40]
	009 Move X21, 0x2647000
	010 Move X20, X1
	011 Move X19, X0
	012 Move [X31+40], X8
	013 Move W8, [X21+2548]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x2365000
	019 Move X0, [X0+2680]
	020 Call 0x1C17CF4
	021 Move X0, 0x2365000
	022 Move X0, [X0+3488]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2548], W8
	026 Move W8, [X19+88]
	027 Compare W8, 0
	028 JumpIfEqual {37}
	029 Move [X19+88], W31
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 Move V1, [X20]
	032 Add X1, X31, 0
	033 Move X0, X19
	034 Move [X31+12], V0
	035 Move [X31], V1
	036 Call GrabbableItem.set_grabbedInfo, X0, X1
	037 Move X21, 0x2365000
	038 Move X21, [X21+2680]
	039 Move X0, [X21]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X19
	045 Move X1, X31
	046 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	047 Move X0, [X19+56]
	048 Compare X0, 0
	049 JumpIfEqual {135}
	050 Move X1, X31
	051 Call NetworkRunner.get_Stage, X0
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X0, [X19+64]
	054 Compare X0, 0
	055 JumpIfEqual {135}
	056 Move X1, X31
	057 Call NetworkObject.GetLocalAuthorityMask, X0
	058 And W31, W0, 7
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {30}
	063 Move X8, [X19+56]
	064 Compare X8, 0
	065 JumpIfEqual {135}
	066 Move X0, [X8+80]
	067 Compare X0, 0
	068 JumpIfEqual {135}
	069 Move X1, X31
	070 Call Simulation.HasAnyActiveConnections, X0
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {125}
	075 Move X8, [X19+56]
	076 Compare X8, 0
	077 JumpIfEqual {135}
	078 Move X0, [X8+80]
	079 Move W1, 36
	080 Move X2, X31
	081 Call SimulationMessage.Allocate, X0, X1
	082 Move X8, [X19+64]
	083 Compare X8, 0
	084 JumpIfEqual {135}
	085 Move X8, [X8+32]
	086 Move X21, X0
	087 Compare X8, 0
	088 JumpIfEqual {103}
	089 Move W0, [X8]
	090 Move X0, [X21]
	091 Move X19, [X19+64]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X8, 0x2365000
	097 Move X8, [X8+3488]
	098 Move W2, 7
	099 Move X1, X19
	100 Move X3, X31
	101 Move X0, [X8]
	102 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	103 Move X0, X31
	104 Move W1, [X19+104]
	105 Move W2, 3
	106 Move X3, X31
	107 Call RpcHeader.Create, X0, X1, X2
	108 Move [X21+28], X0
	109 Move V0, [X20]
	110 Move X8, [X20+16]
	111 Move W9, [X20+24]
	112 Move [X21+36], V0
	113 Move [X21+52], X8
	114 Move [X21+60], W9
	115 Compare X21, 0
	116 JumpIfEqual {135}
	117 Move W8, 288
	118 Move [X21+12], W8
	119 Move X0, [X19+56]
	120 Compare X0, 0
	121 JumpIfEqual {135}
	122 Move X1, X21
	123 Move X2, X31
	124 Call NetworkRunner.SendRpc, X0, X1
	125 Move X8, [X22+40]
	126 Move X9, [X31+40]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X20, [X31+80]
	129 Move X19, [X31+88]
	130 Move X22, [X31+64]
	131 Move X21, [X31+72]
	132 Move X30, [X31+48]
	133 Add X31, X31, 96
	134 Return 
	135 Call 0x1C17F20
	136 Call 0x3EB2B20

Method: System.Void HandleBackpackIdChanged()

Disassembly:
	0x01D925D8 MOVZ W8, 0x1
	0x01D925DC STRB W8, [X20 + 0x783]
	0x01D925E0 ADRP X8, 0x2361000
	0x01D925E4 LDR X8, [X8 + 0x5A0]
	0x01D925E8 MOV X0, X19
	0x01D925EC MOV V3.16B, V11.16B
	0x01D925F0 MOV V4.16B, V12.16B
	0x01D925F4 LDR X8, [X8]
	0x01D925F8 MOV V5.16B, V13.16B
	0x01D925FC MOV V6.16B, V14.16B
	0x01D92600 MOV W2, W31
	0x01D92604 LDR X8, [X8 + 0xB8]
	0x01D92608 MOV W3, W31
	0x01D9260C LDP S0, S1, [X8]
	0x01D92610 LDR V2, [X8 + 0x8]
	0x01D92614 STR S0, [X31 + 0x10]
	0x01D92618 STP S1, S2, [X31 + 0x14]
	0x01D9261C STP S1, S2, [X31 + 0x4]
	0x01D92620 STR S0, [X31]
	0x01D92624 MOV V0.16B, V8.16B
	0x01D92628 MOV V1.16B, V9.16B
	0x01D9262C MOV V2.16B, V10.16B
	0x01D92630 BL 0x1D8FD4C
	0x01D92634 LDP X20, X19, [X31 + 0x60]
	0x01D92638 LDR X30, [X31 + 0x58]
	0x01D9263C LDP D9, D8, [X31 + 0x48]
	0x01D92640 LDP D11, D10, [X31 + 0x38]
	0x01D92644 LDP D13, D12, [X31 + 0x28]
	0x01D92648 LDR V14, [X31 + 0x20]
	0x01D9264C ADD X31, X31, 0x70
	0x01D92650 RET
	0x01D92654 BL 0x1C16F20
	0x01D92658 SUB X31, X31, 0x70
	0x01D9265C STR X30, [X31 + 0x20]
	0x01D92660 STP X26, X25, [X31 + 0x30]
	0x01D92664 STP X24, X23, [X31 + 0x40]
	0x01D92668 STP X22, X21, [X31 + 0x50]
	0x01D9266C STP X20, X19, [X31 + 0x60]
	0x01D92670 ADRP X20, 0x2646000
	0x01D92674 ADRP X22, 0x2361000
	0x01D92678 LDRB W8, [X20 + 0x9FD]
	0x01D9267C LDR X22, [X22 + 0x598]
	0x01D92680 MOV X19, X0
	0x01D92684 TBNZ X8, 0x0, 0x1D926F0
	0x01D92688 ADRP X0, 0x2364000
	0x01D9268C LDR X0, [X0 + 0xDC0]
	0x01D92690 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x2647000
	006 Move W8, [X20+2549]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2365000
	013 Move X0, [X0+3496]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2549], W8
	017 Move [X31+8], X31
	018 Move X8, [X19+488]
	019 Compare X8, 0
	020 JumpIfEqual {25}
	021 Move X9, [X8+24]
	022 Move X0, [X8+64]
	023 Move X1, [X8+40]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move W1, 1
	026 Move X0, X19
	027 Call GrabbableItem.UpdateIsVisible, X0, X1
	028 Move X0, X19
	029 Call GrabbableItem.get_backpackId, X0
	030 Move [X31+24], X0
	031 Add X0, X31, 24
	032 Move X1, X31
	033 Call NetworkBehaviourId.get_IsValid, X0
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {50}
	038 Move X20, [X19+56]
	039 Move X0, X19
	040 Call GrabbableItem.get_backpackId, X0
	041 Compare X20, 0
	042 JumpIfEqual {56}
	043 Move X8, 0x2365000
	044 Move X8, [X8+3496]
	045 Move X1, X0
	046 Add X2, X31, 8
	047 Move X0, X20
	048 Move X3, [X8]
	049 Call 0x222CD98, X0, X1, X2
	050 Move [X19+352], X31
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X30, [X31+16]
	054 Add X31, X31, 48
	055 Return 
	056 Call 0x1C17F20

Method: System.Void HandleGrabbedInfoChanged()

Disassembly:
	0x01D9271C TBZ X0, 0x0, 0x1D92750
	0x01D92720 LDR X0, [X19 + 0x1A8]
	0x01D92724 CBZ X0, 0x1D92C48
	0x01D92728 MOV X1, X31
	0x01D9272C BL 0x3C3F58C
	0x01D92730 ADRP X8, 0x2364000
	0x01D92734 LDR X8, [X8 + 0xB58]
	0x01D92738 ADD X0, X31, 0x0
	0x01D9273C STP X31, X31, [X31]
	0x01D92740 LDR X1, [X8]
	0x01D92744 BL 0x243BFEC
	0x01D92748 LDRB W23, [X31]
	0x01D9274C B 0x1D92754
	0x01D92750 MOV W23, W31
	0x01D92754 LDR X0, [X22]
	0x01D92758 LDR X20, [X19 + 0x1A8]
	0x01D9275C LDR W8, [X0 + 0xE0]
	0x01D92760 CBNZ W8, 0x1D92768
	0x01D92764 BL 0x1C16DFC
	0x01D92768 MOV X0, X20
	0x01D9276C MOV X1, X31
	0x01D92770 MOV X2, X31
	0x01D92774 BL 0x3C354F8
	0x01D92778 TBZ X0, 0x0, 0x1D927B0
	0x01D9277C LDR X0, [X19 + 0x1A8]
	0x01D92780 CBZ X0, 0x1D92C48
	0x01D92784 MOV X1, X31
	0x01D92788 BL 0x3C3DEB4
	0x01D9278C ADRP X8, 0x2364000
	0x01D92790 LDR X8, [X8 + 0xB60]
	0x01D92794 ADD X0, X31, 0x0
	0x01D92798 STP X31, X31, [X31]
	0x01D9279C STR W31, [X31 + 0x10]
	0x01D927A0 LDR X1, [X8]
	0x01D927A4 BL 0x2437C9C
	0x01D927A8 LDRB W24, [X31]
	0x01D927AC B 0x1D927B4
	0x01D927B0 MOV W24, W31
	0x01D927B4 LDR X20, [X19 + 0x38]
	0x01D927B8 MOV X0, X19
	0x01D927BC BL 0x1D8EB5C
	0x01D927C0 CBZ X20, 0x1D92C48
	0x01D927C4 AND X1, X0, 0x0
	0x01D927C8 MOV X0, X20
	0x01D927CC MOV X2, X31
	0x01D927D0 BL 0x1EA37F8
	0x01D927D4 TBZ X0, 0x0, 0x1D9292C
	0x01D927D8 LDR X20, [X19 + 0x38]
	0x01D927DC MOV X0, X19
	0x01D927E0 BL 0x1D8EB5C
	0x01D927E4 CBZ X20, 0x1D92C48
	0x01D927E8 AND X1, X0, 0x0
	0x01D927EC ADD X2, X31, 0x28
	0x01D927F0 MOV X0, X20
	0x01D927F4 MOV X3, X31
	0x01D927F8 BL 0x1EA323C
	0x01D927FC TBZ X0, 0x0, 0x1D9292C
	0x01D92800 LDR X0, [X31 + 0x28]
	0x01D92804 CBZ X0, 0x1D92C48
	0x01D92808 MOV X1, X31
	0x01D9280C BL 0x3C32E90
	0x01D92810 STR X0, [X19 + 0x1A8]
	0x01D92814 MOV X20, X0
	0x01D92818 LDR X0, [X22]
	0x01D9281C LDR W8, [X0 + 0xE0]
	0x01D92820 CBNZ W8, 0x1D92828
	0x01D92824 BL 0x1C16DFC
	0x01D92828 MOV X0, X20
	0x01D9282C MOV X1, X31
	0x01D92830 MOV X2, X31
	0x01D92834 BL 0x3C354F8
	0x01D92838 TBZ X0, 0x0, 0x1D9292C
	0x01D9283C LDR X0, [X19 + 0x1A8]
	0x01D92840 CBZ X0, 0x1D92C48
	0x01D92844 ADRP X8, 0x2364000
	0x01D92848 LDR X8, [X8 + 0xDC8]
	0x01D9284C ADD X1, X31, 0x18
	0x01D92850 LDR X2, [X8]
	0x01D92854 BL 0x21A4990
	0x01D92858 TBZ X0, 0x0, 0x1D929DC
	0x01D9285C LDR X0, [X22]
	0x01D92860 LDR X20, [X31 + 0x18]
	0x01D92864 LDR X21, [X19 + 0x1B0]
	0x01D92868 LDR W8, [X0 + 0xE0]
	0x01D9286C CBNZ W8, 0x1D92874
	0x01D92870 BL 0x1C16DFC
	0x01D92874 MOV X0, X20
	0x01D92878 MOV X1, X21
	0x01D9287C MOV X2, X31
	0x01D92880 BL 0x3C354F8
	0x01D92884 TBZ X0, 0x0, 0x1D929DC
	0x01D92888 LDR X0, [X22]
	0x01D9288C LDR X20, [X19 + 0x1B0]
	0x01D92890 LDR W8, [X0 + 0xE0]
	0x01D92894 CBNZ W8, 0x1D9289C
	0x01D92898 BL 0x1C16DFC
	0x01D9289C MOV X0, X20
	0x01D928A0 MOV X1, X31
	0x01D928A4 MOV X2, X31
	0x01D928A8 BL 0x3C354F8
	0x01D928AC TBZ X0, 0x0, 0x1D92BB8
	0x01D928B0 LDR X25, [X19 + 0x1B0]
	0x01D928B4 CBZ X25, 0x1D92C48
	0x01D928B8 ADRP X26, 0x2364000
	0x01D928BC LDR X20, [X25 + 0x80]
	0x01D928C0 LDR X26, [X26 + 0xDC0]
	0x01D928C4 LDR X0, [X26]
	0x01D928C8 BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], D10
	003 Move [X31+56], D9
	004 Move [X31+64], D8
	005 Move [X31+72], X30
	006 Move [X31+80], X22
	007 Move [X31+88], X21
	008 Move [X31+96], X20
	009 Move [X31+104], X19
	010 NotImplemented "Instruction MRS not yet implemented."
	011 Move X8, [X21+40]
	012 Move X22, 0x2647000
	013 Move X20, 0x2362000
	014 Move X19, X0
	015 Move [X31+40], X8
	016 Move W8, [X22+2550]
	017 Move X20, [X20+1432]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x2362000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+2550], W8
	027 Move X0, [X20]
	028 Move X20, [X19+336]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {58}
	041 Move X8, [X19+336]
	042 Compare X8, 0
	043 JumpIfEqual {138}
	044 Move X0, [X8+64]
	045 Compare X0, 0
	046 JumpIfEqual {58}
	047 Move W8, [X0+96]
	048 Move TEMP, X8
	049 And TEMP, TEMP, 2
	050 Compare TEMP, 2
	051 JumpIfEqual {58}
	052 Move X1, X31
	053 Call NetworkObject.get_HasInputAuthority, X0
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfEqual {125}
	058 Move X20, [X19+208]
	059 Add X8, X31, 8
	060 Move X0, X19
	061 Call GrabbableItem.get_grabbedInfo, X0
	062 Compare X20, 0
	063 JumpIfEqual {138}
	064 Move S0, [X31+8]
	065 Move S1, [X31+12]
	066 Move V2, [X31+16]
	067 Move X0, X20
	068 Move X1, X31
	069 Call Transform.set_localPosition, X0, X1
	070 Move X20, [X19+208]
	071 Add X8, X31, 8
	072 Move X0, X19
	073 Call GrabbableItem.get_grabbedInfo, X0
	074 Compare X20, 0
	075 JumpIfEqual {138}
	076 Move S0, [X31+20]
	077 Move S1, [X31+24]
	078 Move S2, [X31+28]
	079 Move S3, [X31+32]
	080 Move X0, X20
	081 Move X1, X31
	082 Call Transform.set_localRotation, X0, X1
	083 Move X20, 0x2647000
	084 Move W8, [X20+1923]
	085 Move X19, [X19+200]
	086 Compare W8, 0
	087 JumpIfNotEqual {93}
	088 Move X0, 0x2362000
	089 Move X0, [X0+1440]
	090 Call 0x1C17CF4
	091 Move W8, 1
	092 Move [X20+1923], W8
	093 Move X8, 0x2362000
	094 Move X8, [X8+1440]
	095 Move X20, 0x2647000
	096 Move W9, [X20+1939]
	097 Move X8, [X8]
	098 Move X8, [X8+184]
	099 Move S10, [X8]
	100 Move S9, [X8+4]
	101 Move V8, [X8+8]
	102 Compare W9, 0
	103 JumpIfNotEqual {109}
	104 Move X0, 0x2363000
	105 Move X0, [X0+1448]
	106 Call 0x1C17CF4
	107 Move W8, 1
	108 Move [X20+1939], W8
	109 Compare X19, 0
	110 JumpIfEqual {138}
	111 Move X8, 0x2363000
	112 Move X8, [X8+1448]
	113 Move X0, X19
	114 Move V0, V10
	115 Move V1, V9
	116 Move X8, [X8]
	117 Move V2, V8
	118 Move X1, X31
	119 Move X8, [X8+184]
	120 Move S5, [X8+8]
	121 Move S6, [X8+12]
	122 Move S3, [X8]
	123 Move S4, [X8+4]
	124 Call Transform.SetLocalPositionAndRotation, X0, X1, X2
	125 Move X8, [X21+40]
	126 Move X9, [X31+40]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X20, [X31+96]
	129 Move X19, [X31+104]
	130 Move X22, [X31+80]
	131 Move X21, [X31+88]
	132 Move X30, [X31+72]
	133 Move D9, [X31+56]
	134 Move D8, [X31+64]
	135 Move V10, [X31+48]
	136 Add X31, X31, 112
	137 Return 
	138 Call 0x1C17F20
	139 Call 0x3EB2B20

Method: System.Void HandleIsHiddenChanged()

Disassembly:
	0x01D928CC ADRP X8, 0x2364000
	0x01D928D0 LDR X8, [X8 + 0xDD0]

ISIL:
	001 Move W1, 1
	002 Call GrabbableItem.UpdateIsVisible, X0, X1
	003 Return 

Method: System.Void SetIsHidden(System.Boolean hide)

Disassembly:
	0x01D8AD60 MOV X1, X0
	0x01D8AD64 MOV X0, X19

ISIL:
	001 And W1, W1, 1
	002 Call GrabbableItem.set_isHidden, X0, X1
	003 Return 

Method: System.Void UpdateIsVisible(System.Boolean applyOnNextUpdate = True)

Disassembly:
	0x01D92694 ADRP X0, 0x2364000
	0x01D92698 LDR X0, [X0 + 0xDC8]
	0x01D9269C BL 0x1C16CF4
	0x01D926A0 ADRP X0, 0x2364000
	0x01D926A4 LDR X0, [X0 + 0xDD0]
	0x01D926A8 BL 0x1C16CF4
	0x01D926AC ADRP X0, 0x2364000
	0x01D926B0 LDR X0, [X0 + 0xB58]
	0x01D926B4 BL 0x1C16CF4
	0x01D926B8 ADRP X0, 0x2364000
	0x01D926BC LDR X0, [X0 + 0xB60]
	0x01D926C0 BL 0x1C16CF4
	0x01D926C4 ADRP X0, 0x2364000
	0x01D926C8 LDR X0, [X0 + 0xDD8]
	0x01D926CC BL 0x1C16CF4
	0x01D926D0 ADRP X0, 0x2364000
	0x01D926D4 LDR X0, [X0 + 0xDE0]
	0x01D926D8 BL 0x1C16CF4
	0x01D926DC ADRP X0, 0x2361000
	0x01D926E0 LDR X0, [X0 + 0x598]
	0x01D926E4 BL 0x1C16CF4
	0x01D926E8 MOVZ W8, 0x1
	0x01D926EC STRB W8, [X20 + 0x9FD]
	0x01D926F0 LDR X0, [X22]
	0x01D926F4 STR X31, [X31 + 0x28]
	0x01D926F8 STR X31, [X31 + 0x18]
	0x01D926FC LDR X20, [X19 + 0x1A8]
	0x01D92700 LDR W8, [X0 + 0xE0]
	0x01D92704 CBNZ W8, 0x1D9270C
	0x01D92708 BL 0x1C16DFC
	0x01D9270C MOV X0, X20
	0x01D92710 MOV X1, X31
	0x01D92714 MOV X2, X31
	0x01D92718 BL 0x3C354F8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move TEMP, X1
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {11}
	009 Move W8, 1
	010 Move [X19+440], W8
	011 Move X0, [X19+200]
	012 Compare X0, 0
	013 JumpIfEqual {43}
	014 Move X1, X31
	015 Call Component.get_gameObject, X0
	016 Move X20, X0
	017 Move X0, X19
	018 Call GrabbableItem.get_isVisible, X0
	019 Compare X20, 0
	020 JumpIfEqual {43}
	021 And W1, W0, 1
	022 Move X0, X20
	023 Move X2, X31
	024 Call GameObject.SetActive, X0, X1
	025 Move X0, X19
	026 Call GrabbableItem.UpdateUseGravity, X0
	027 Move X0, X19
	028 Call GrabbableItem.UpdateDetectCollisions, X0
	029 Move X8, [X19+520]
	030 Compare X8, 0
	031 JumpIfEqual {39}
	032 Move X2, [X8+24]
	033 Move X0, [X8+64]
	034 Move X1, [X8+40]
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 CallNoReturn X2
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return 
	043 Call 0x1C17F20

Method: System.Void UpdateUseGravity()

Disassembly:
	0x01D928D4 MOV X1, X19
	0x01D928D8 MOV X3, X31
	0x01D928DC MOV X21, X0
	0x01D928E0 LDR X2, [X8]
	0x01D928E4 BL 0x2A6B948
	0x01D928E8 MOV X0, X20
	0x01D928EC MOV X1, X21
	0x01D928F0 MOV X2, X31
	0x01D928F4 BL 0x33C0FDC
	0x01D928F8 CBZ X0, 0x1D92BB4
	0x01D928FC LDR X21, [X26]
	0x01D92900 MOV X20, X0
	0x01D92904 MOV X1, X21
	0x01D92908 BL 0x1C16E00
	0x01D9290C CBZ X0, 0x1D92C34
	0x01D92910 STR X0, [X25 + 0x80]
	0x01D92914 LDR X21, [X26]
	0x01D92918 MOV X0, X20
	0x01D9291C MOV X1, X21
	0x01D92920 BL 0x1C16E00
	0x01D92924 CBNZ X0, 0x1D92BB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, [X0+360]
	005 Move X20, X0
	006 Call GrabbableItem.get_isVisible, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {17}
	011 Move W8, [X20+138]
	012 Compare W8, 0
	013 JumpIfEqual {18}
	014 Move X0, X20
	015 Call GrabbableItem.get_isAttached, X0
	016 Xor W8, W0, 1
	017 Move W8, W31
	018 Compare X19, 0
	019 JumpIfEqual {28}
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 And W1, W8, 1
	024 Move X2, X31
	025 Move X30, [X31+32]
	026 Call Rigidbody.set_useGravity, X0, X1
	027 Return 
	028 Call 0x1C17F20

Method: System.Void UpdateIsFrozen()

Disassembly:
	0x01D92988 LDR X2, [X8]
	0x01D9298C BL 0x2A6B948
	0x01D92990 MOV X0, X20
	0x01D92994 MOV X1, X21
	0x01D92998 MOV X2, X31
	0x01D9299C BL 0x33C0FDC
	0x01D929A0 CBZ X0, 0x1D929D4
	0x01D929A4 LDR X21, [X26]
	0x01D929A8 MOV X20, X0
	0x01D929AC MOV X1, X21
	0x01D929B0 BL 0x1C16E00
	0x01D929B4 CBZ X0, 0x1D92C34
	0x01D929B8 STR X0, [X25 + 0x80]
	0x01D929BC LDR X21, [X26]
	0x01D929C0 MOV X0, X20
	0x01D929C4 MOV X1, X21
	0x01D929C8 BL 0x1C16E00
	0x01D929CC CBNZ X0, 0x1D929D8
	0x01D929D0 B 0x1D92C34
	0x01D929D4 STR X31, [X25 + 0x80]
	0x01D929D8 STR X31, [X19 + 0x1B0]
	0x01D929DC ADRP X21, 0x2361000
	0x01D929E0 LDR X0, [X19 + 0x40]
	0x01D929E4 LDR X21, [X21 + 0x5A0]
	0x01D929E8 ADRP X25, 0x2646000
	0x01D929EC CBZ X0, 0x1D92AEC
	0x01D929F0 LDRB W8, [X0 + 0x60]
	0x01D929F4 TBNZ X8, 0x1, 0x1D92AEC
	0x01D929F8 MOV X1, X31
	0x01D929FC BL 0x1E93668
	0x01D92A00 TBZ X0, 0x0, 0x1D92AEC
	0x01D92A04 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x2647000
	006 Move X21, 0x2365000
	007 Move W8, [X19+2551]
	008 Move X21, [X21+920]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2365000
	015 Move X0, [X0+920]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+2551], W8
	019 Move X19, [X20+360]
	020 Move X0, X20
	021 Call GrabbableItem.get_stuckAnchorId, X0
	022 Move X8, [X21]
	023 Move X20, X0
	024 Move W9, [X8+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X8
	028 Call 0x1C17DFC
	029 Compare X19, 0
	030 JumpIfEqual {42}
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move W8, 126
	036 NotImplemented "Instruction CSEL not yet implemented."
	037 Move X2, X31
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call Rigidbody.set_constraints, X0, X1
	041 Return 
	042 Call 0x1C17F20

Method: System.Void AddToBag(Fusion.NetworkBehaviourId bagId)

Disassembly:
	0x01D92A08 BL 0x1D92C4C

ISIL:
No ISIL was generated
Method: System.Void RemoveFromBag(UnityEngine.Vector3 position)

Disassembly:
	0x01D92C48 BL 0x1C16F20

ISIL:
No ISIL was generated
Method: System.Void RPC_AddToBag(Fusion.NetworkBehaviourId backpackId)

Disassembly:
	0x01D92A0C LDRB W8, [X25 + 0x783]
	0x01D92A10 LDR X20, [X19 + 0x168]
	0x01D92A14 CBNZ W8, 0x1D92A2C
	0x01D92A18 ADRP X0, 0x2361000
	0x01D92A1C LDR X0, [X0 + 0x5A0]
	0x01D92A20 BL 0x1C16CF4
	0x01D92A24 MOVZ W8, 0x1
	0x01D92A28 STRB W8, [X25 + 0x783]
	0x01D92A2C CBZ X20, 0x1D92C48
	0x01D92A30 LDR X8, [X21]
	0x01D92A34 MOV X0, X20
	0x01D92A38 MOV X1, X31
	0x01D92A3C LDR X8, [X8 + 0xB8]
	0x01D92A40 LDP S1, S2, [X8 + 0x4]
	0x01D92A44 LDR V0, [X8]
	0x01D92A48 BL 0x3C8E908
	0x01D92A4C LDRB W8, [X25 + 0x783]
	0x01D92A50 LDR X20, [X19 + 0x168]
	0x01D92A54 CBNZ W8, 0x1D92A6C
	0x01D92A58 ADRP X0, 0x2361000
	0x01D92A5C LDR X0, [X0 + 0x5A0]
	0x01D92A60 BL 0x1C16CF4
	0x01D92A64 MOVZ W8, 0x1
	0x01D92A68 STRB W8, [X25 + 0x783]
	0x01D92A6C CBZ X20, 0x1D92C48
	0x01D92A70 LDR X8, [X21]
	0x01D92A74 MOV X0, X20
	0x01D92A78 MOV X1, X31
	0x01D92A7C LDR X8, [X8 + 0xB8]
	0x01D92A80 LDP S1, S2, [X8 + 0x4]
	0x01D92A84 LDR V0, [X8]
	0x01D92A88 BL 0x3C8EA40
	0x01D92A8C LDR X0, [X22]
	0x01D92A90 LDR X20, [X19 + 0x1A8]
	0x01D92A94 LDR W8, [X0 + 0xE0]
	0x01D92A98 CBNZ W8, 0x1D92AA0
	0x01D92A9C BL 0x1C16DFC
	0x01D92AA0 MOV X0, X20
	0x01D92AA4 MOV X1, X31
	0x01D92AA8 MOV X2, X31
	0x01D92AAC BL 0x3C3883C
	0x01D92AB0 TBZ X0, 0x0, 0x1D92AEC
	0x01D92AB4 LDR X0, [X22]
	0x01D92AB8 LDR X20, [X19 + 0x178]
	0x01D92ABC LDR W8, [X0 + 0xE0]
	0x01D92AC0 CBNZ W8, 0x1D92AC8
	0x01D92AC4 BL 0x1C16DFC
	0x01D92AC8 MOV X0, X20
	0x01D92ACC MOV X1, X31
	0x01D92AD0 MOV X2, X31
	0x01D92AD4 BL 0x3C354F8
	0x01D92AD8 CBZ W24, 0x1D92AEC
	0x01D92ADC CBZ W23, 0x1D92AEC
	0x01D92AE0 TBZ X0, 0x0, 0x1D92AEC
	0x01D92AE4 MOV X0, X19
	0x01D92AE8 BL 0x1D8A3AC
	0x01D92AEC LDR X8, [X19 + 0x210]
	0x01D92AF0 CBZ X8, 0x1D92B08
	0x01D92AF4 LDR X1, [X19 + 0x1A8]
	0x01D92AF8 LDR X9, [X8 + 0x18]
	0x01D92AFC LDR X0, [X8 + 0x40]
	0x01D92B00 LDR X2, [X8 + 0x28]
	0x01D92B04 BLR X9
	0x01D92B08 MOV X0, X19
	0x01D92B0C BL 0x1D918D4
	0x01D92B10 MOV X0, X19
	0x01D92B14 BL 0x1D91988
	0x01D92B18 LDRB W8, [X25 + 0x783]
	0x01D92B1C LDR X20, [X19 + 0x168]
	0x01D92B20 CBNZ W8, 0x1D92B38
	0x01D92B24 ADRP X0, 0x2361000
	0x01D92B28 LDR X0, [X0 + 0x5A0]
	0x01D92B2C BL 0x1C16CF4
	0x01D92B30 MOVZ W8, 0x1
	0x01D92B34 STRB W8, [X25 + 0x783]
	0x01D92B38 CBZ X20, 0x1D92C48
	0x01D92B3C LDR X8, [X21]
	0x01D92B40 MOV X0, X20
	0x01D92B44 MOV X1, X31
	0x01D92B48 LDR X8, [X8 + 0xB8]
	0x01D92B4C LDP S1, S2, [X8 + 0x4]
	0x01D92B50 LDR V0, [X8]
	0x01D92B54 BL 0x3C8E908
	0x01D92B58 LDRB W8, [X25 + 0x783]
	0x01D92B5C LDR X19, [X19 + 0x168]
	0x01D92B60 CBNZ W8, 0x1D92B78
	0x01D92B64 ADRP X0, 0x2361000
	0x01D92B68 LDR X0, [X0 + 0x5A0]
	0x01D92B6C BL 0x1C16CF4
	0x01D92B70 MOVZ W8, 0x1
	0x01D92B74 STRB W8, [X25 + 0x783]
	0x01D92B78 CBZ X19, 0x1D92C48
	0x01D92B7C LDR X8, [X21]
	0x01D92B80 MOV X0, X19
	0x01D92B84 MOV X1, X31
	0x01D92B88 LDR X8, [X8 + 0xB8]
	0x01D92B8C LDP S1, S2, [X8 + 0x4]
	0x01D92B90 LDR V0, [X8]
	0x01D92B94 BL 0x3C8EA40
	0x01D92B98 LDP X20, X19, [X31 + 0x60]
	0x01D92B9C LDP X22, X21, [X31 + 0x50]
	0x01D92BA0 LDP X24, X23, [X31 + 0x40]
	0x01D92BA4 LDP X26, X25, [X31 + 0x30]
	0x01D92BA8 LDR X30, [X31 + 0x20]
	0x01D92BAC ADD X31, X31, 0x70
	0x01D92BB0 RET
	0x01D92BB4 STR X31, [X25 + 0x80]
	0x01D92BB8 LDR X25, [X31 + 0x18]
	0x01D92BBC STR X25, [X19 + 0x1B0]
	0x01D92BC0 CBZ X25, 0x1D92C48
	0x01D92BC4 ADRP X26, 0x2364000
	0x01D92BC8 LDR X20, [X25 + 0x80]
	0x01D92BCC LDR X26, [X26 + 0xDC0]
	0x01D92BD0 LDR X0, [X26]
	0x01D92BD4 BL 0x1C16F10
	0x01D92BD8 ADRP X8, 0x2364000
	0x01D92BDC LDR X8, [X8 + 0xDD0]
	0x01D92BE0 MOV X1, X19
	0x01D92BE4 MOV X3, X31
	0x01D92BE8 MOV X21, X0
	0x01D92BEC LDR X2, [X8]
	0x01D92BF0 BL 0x2A6B948
	0x01D92BF4 MOV X0, X20
	0x01D92BF8 MOV X1, X21
	0x01D92BFC MOV X2, X31
	0x01D92C00 BL 0x33C0DE4
	0x01D92C04 CBZ X0, 0x1D92C40
	0x01D92C08 LDR X21, [X26]
	0x01D92C0C MOV X20, X0
	0x01D92C10 MOV X1, X21
	0x01D92C14 BL 0x1C16E00
	0x01D92C18 CBZ X0, 0x1D92C34
	0x01D92C1C STR X0, [X25 + 0x80]
	0x01D92C20 LDR X21, [X26]
	0x01D92C24 MOV X0, X20
	0x01D92C28 MOV X1, X21
	0x01D92C2C BL 0x1C16E00
	0x01D92C30 CBNZ X0, 0x1D929DC
	0x01D92C34 MOV X0, X20
	0x01D92C38 MOV X1, X21
	0x01D92C3C BL 0x1C171E0
	0x01D92C40 STR X31, [X25 + 0x80]
	0x01D92C44 B 0x1D929DC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2647000
	007 Move W8, [X21+2552]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2365000
	015 Move X0, [X0+2680]
	016 Call 0x1C17CF4
	017 Move X0, 0x2365000
	018 Move X0, [X0+3504]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2552], W8
	022 Move W8, [X19+88]
	023 Compare W8, 0
	024 JumpIfEqual {79}
	025 Move [X19+88], W31
	026 Move X0, X19
	027 Move X1, X20
	028 Call GrabbableItem.set_backpackId, X0, X1
	029 Move X21, 0x2647000
	030 Move W8, [X21+1923]
	031 Move X20, [X19+360]
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0x2362000
	035 Move X0, [X0+1440]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X21+1923], W8
	039 Compare X20, 0
	040 JumpIfEqual {180}
	041 Move X22, 0x2362000
	042 Move X22, [X22+1440]
	043 Move X0, X20
	044 Move X1, X31
	045 Move X8, [X22]
	046 Move X8, [X8+184]
	047 Move S1, [X8+4]
	048 Move S2, [X8+8]
	049 Move V0, [X8]
	050 Call Rigidbody.set_velocity, X0, X1
	051 Move W8, [X21+1923]
	052 Move X20, [X19+360]
	053 Compare W8, 0
	054 JumpIfNotEqual {60}
	055 Move X0, 0x2362000
	056 Move X0, [X0+1440]
	057 Call 0x1C17CF4
	058 Move W8, 1
	059 Move [X21+1923], W8
	060 Compare X20, 0
	061 JumpIfEqual {180}
	062 Move X8, [X22]
	063 Move X0, X20
	064 Move X1, X31
	065 Move X8, [X8+184]
	066 Move S1, [X8+4]
	067 Move S2, [X8+8]
	068 Move V0, [X8]
	069 Call Rigidbody.set_angularVelocity, X0, X1
	070 Move X0, X19
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X22, [X31+16]
	074 Move X21, [X31+24]
	075 Move W1, 1
	076 Move X30, [X31+48]
	077 Call GrabbableItem.UpdateIsVisible, X0, X1
	078 Return 
	079 Move X21, 0x2365000
	080 Move X21, [X21+2680]
	081 Move X0, [X21]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {86}
	085 Call 0x1C17DFC
	086 Move X0, X19
	087 Move X1, X31
	088 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	089 Move X0, [X19+56]
	090 Compare X0, 0
	091 JumpIfEqual {180}
	092 Move X1, X31
	093 Call NetworkRunner.get_Stage, X0
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X20, [X31+32]
	096 Move X19, [X31+40]
	097 Move X22, [X31+16]
	098 Move X21, [X31+24]
	099 Move X30, [X31+48]
	100 Return 
	101 Move X0, [X19+64]
	102 Compare X0, 0
	103 JumpIfEqual {180}
	104 Move X1, X31
	105 Call NetworkObject.GetLocalAuthorityMask, X0
	106 And W31, W0, 7
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfEqual {26}
	111 Move X8, [X19+56]
	112 Compare X8, 0
	113 JumpIfEqual {180}
	114 Move X0, [X8+80]
	115 Compare X0, 0
	116 JumpIfEqual {180}
	117 Move X1, X31
	118 Call Simulation.HasAnyActiveConnections, X0
	119 Move TEMP, X0
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfNotEqual {95}
	123 Move X8, [X19+56]
	124 Compare X8, 0
	125 JumpIfEqual {180}
	126 Move X0, [X8+80]
	127 Move W1, 16
	128 Move X2, X31
	129 Call SimulationMessage.Allocate, X0, X1
	130 Move X8, [X19+64]
	131 Compare X8, 0
	132 JumpIfEqual {180}
	133 Move X8, [X8+32]
	134 Move X21, X0
	135 Compare X8, 0
	136 JumpIfEqual {157}
	137 Move W0, [X8]
	138 Move X0, [X21]
	139 Move X19, [X19+64]
	140 Move W8, [X0+224]
	141 Compare W8, 0
	142 JumpIfNotEqual {144}
	143 Call 0x1C17DFC
	144 Move X8, 0x2365000
	145 Move X8, [X8+3504]
	146 Move X1, X19
	147 Move X20, [X31+32]
	148 Move X19, [X31+40]
	149 Move X22, [X31+16]
	150 Move X21, [X31+24]
	151 Move X0, [X8]
	152 Move W2, 7
	153 Move X3, X31
	154 Move X30, [X31+48]
	155 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	156 Return 
	157 Move X0, X31
	158 Move W1, [X19+104]
	159 Move W2, 4
	160 Move X3, X31
	161 Call RpcHeader.Create, X0, X1, X2
	162 Move [X21+28], X0
	163 Move [X21+36], X20
	164 Compare X21, 0
	165 JumpIfEqual {180}
	166 Move W8, 128
	167 Move [X21+12], W8
	168 Move X0, [X19+56]
	169 Compare X0, 0
	170 JumpIfEqual {180}
	171 Move X1, X21
	172 Move X20, [X31+32]
	173 Move X19, [X31+40]
	174 Move X22, [X31+16]
	175 Move X21, [X31+24]
	176 Move X2, X31
	177 Move X30, [X31+48]
	178 Call NetworkRunner.SendRpc, X0, X1
	179 Return 
	180 Call 0x1C17F20

Method: System.Void RPC_RemoveFromBag(UnityEngine.Vector3 position)

Disassembly:
	0x01D92C4C SUB X31, X31, 0x1A0
	0x01D92C50 STR D14, [X31 + 0x140]
	0x01D92C54 STP D13, D12, [X31 + 0x148]
	0x01D92C58 STP D11, D10, [X31 + 0x158]
	0x01D92C5C STP D9, D8, [X31 + 0x168]
	0x01D92C60 STR X29, [X31 + 0x178]
	0x01D92C64 STP X30, X21, [X31 + 0x180]
	0x01D92C68 STP X20, X19, [X31 + 0x190]
	0x01D92C6C ADRP X20, 0x2646000
	0x01D92C70 ADRP X21, 0x2361000
	0x01D92C74 LDRB W8, [X20 + 0x9FC]
	0x01D92C78 LDR X21, [X21 + 0x598]
	0x01D92C7C MOV X19, X0
	0x01D92C80 TBNZ X8, 0x0, 0x1D92C98
	0x01D92C84 ADRP X0, 0x2361000
	0x01D92C88 LDR X0, [X0 + 0x598]
	0x01D92C8C BL 0x1C16CF4
	0x01D92C90 MOVZ W8, 0x1
	0x01D92C94 STRB W8, [X20 + 0x9FC]
	0x01D92C98 LDR X0, [X21]
	0x01D92C9C MOVI V0.2D, 0x0
	0x01D92CA0 STP V0, V0, [X31 + 0x120]
	0x01D92CA4 STP V0, V0, [X31 + 0x100]
	0x01D92CA8 LDR W8, [X0 + 0xE0]
	0x01D92CAC LDR X20, [X19 + 0x1A8]
	0x01D92CB0 CBNZ W8, 0x1D92CB8
	0x01D92CB4 BL 0x1C16DFC
	0x01D92CB8 MOV X0, X20
	0x01D92CBC MOV X1, X31
	0x01D92CC0 MOV X2, X31
	0x01D92CC4 BL 0x3C354F8
	0x01D92CC8 TBZ X0, 0x0, 0x1D92EFC
	0x01D92CCC LDR X0, [X21]
	0x01D92CD0 LDR X20, [X19 + 0xB0]
	0x01D92CD4 LDR W8, [X0 + 0xE0]
	0x01D92CD8 CBNZ W8, 0x1D92CE0
	0x01D92CDC BL 0x1C16DFC
	0x01D92CE0 MOV X0, X20
	0x01D92CE4 MOV X1, X31
	0x01D92CE8 MOV X2, X31
	0x01D92CEC BL 0x3C354F8
	0x01D92CF0 TBZ X0, 0x0, 0x1D92EFC
	0x01D92CF4 MOV X0, X19
	0x01D92CF8 MOV X1, X31
	0x01D92CFC BL 0x3C32E90
	0x01D92D00 CBZ X0, 0x1D92F20
	0x01D92D04 ADD X8, X31, 0x80
	0x01D92D08 MOV X1, X31
	0x01D92D0C BL 0x3C3FF0C
	0x01D92D10 LDP V0, V1, [X31 + 0x80]
	0x01D92D14 LDP V2, V3, [X31 + 0xA0]
	0x01D92D18 STP V0, V1, [X31 + 0xC0]
	0x01D92D1C STP V2, V3, [X31 + 0xE0]
	0x01D92D20 LDR X0, [X19 + 0xB0]
	0x01D92D24 CBZ X0, 0x1D92F20
	0x01D92D28 ADD X8, X31, 0x80
	0x01D92D2C MOV X1, X31
	0x01D92D30 BL 0x3C3F1C8
	0x01D92D34 LDP V0, V1, [X31 + 0x80]
	0x01D92D38 LDP V2, V3, [X31 + 0xA0]
	0x01D92D3C ADD X8, X31, 0x80
	0x01D92D40 ADD X0, X31, 0x40
	0x01D92D44 STP V0, V1, [X31]
	0x01D92D48 LDP V0, V1, [X31 + 0xC0]
	0x01D92D4C STP V2, V3, [X31 + 0x20]
	0x01D92D50 LDP V2, V3, [X31 + 0xE0]
	0x01D92D54 ADD X1, X31, 0x0
	0x01D92D58 MOV X2, X31
	0x01D92D5C STP V0, V1, [X31 + 0x40]
	0x01D92D60 STP V2, V3, [X31 + 0x60]
	0x01D92D64 BL 0x3C27F74
	0x01D92D68 LDP V0, V1, [X31 + 0x80]
	0x01D92D6C LDP V2, V3, [X31 + 0xA0]
	0x01D92D70 ADD X0, X31, 0x100
	0x01D92D74 MOV X1, X31
	0x01D92D78 STP V0, V1, [X31 + 0x100]
	0x01D92D7C STP V2, V3, [X31 + 0x120]
	0x01D92D80 BL 0x3C26F30
	0x01D92D84 MOV X0, X31
	0x01D92D88 BL 0x3C2A260
	0x01D92D8C LDR X0, [X19 + 0x1A8]
	0x01D92D90 CBZ X0, 0x1D92F20
	0x01D92D94 MOV X1, X31
	0x01D92D98 MOV V9.16B, V0.16B
	0x01D92D9C MOV V8.16B, V1.16B
	0x01D92DA0 MOV V10.16B, V2.16B
	0x01D92DA4 MOV V11.16B, V3.16B
	0x01D92DA8 BL 0x3C3DEB4
	0x01D92DAC LDR X0, [X19 + 0x1A8]
	0x01D92DB0 CBZ X0, 0x1D92F20
	0x01D92DB4 FMUL S4, S11, S3
	0x01D92DB8 FMUL S5, S9, S0
	0x01D92DBC FMUL S16, S8, S0
	0x01D92DC0 FMUL S17, S10, S3
	0x01D92DC4 FMUL S18, S11, S2
	0x01D92DC8 FMUL S20, S11, S1
	0x01D92DCC FMUL S21, S10, S0
	0x01D92DD0 FMUL S0, S11, S0
	0x01D92DD4 FMUL S23, S9, S3
	0x01D92DD8 FMUL S3, S8, S3
	0x01D92DDC FMUL S6, S8, S1
	0x01D92DE0 FMUL S19, S9, S1
	0x01D92DE4 FMUL S1, S10, S1
	0x01D92DE8 FMUL S22, S9, S2
	0x01D92DEC FSUB S4, S4, S5
	0x01D92DF0 FADD S5, S17, S18
	0x01D92DF4 FADD S3, S3, S20
	0x01D92DF8 FADD S0, S23, S0
	0x01D92DFC FMUL S7, S10, S2
	0x01D92E00 FMUL S2, S8, S2
	0x01D92E04 FSUB S4, S4, S6
	0x01D92E08 FADD S5, S16, S5
	0x01D92E0C FADD S3, S22, S3
	0x01D92E10 FADD S0, S1, S0
	0x01D92E14 MOV X1, X31
	0x01D92E18 FSUB S8, S4, S7
	0x01D92E1C FSUB S9, S5, S19
	0x01D92E20 FSUB S10, S3, S21
	0x01D92E24 FSUB S11, S0, S2
	0x01D92E28 BL 0x3C3F58C
	0x01D92E2C ADD X0, X31, 0x100
	0x01D92E30 MOV X1, X31
	0x01D92E34 MOV V14.16B, V0.16B
	0x01D92E38 MOV V13.16B, V1.16B
	0x01D92E3C MOV V12.16B, V2.16B
	0x01D92E40 BL 0x3C28174
	0x01D92E44 FNEG S4, S0
	0x01D92E48 FNEG S5, S1
	0x01D92E4C FNEG S6, S2
	0x01D92E50 MOV V0.16B, V11.16B
	0x01D92E54 MOV V1.16B, V10.16B
	0x01D92E58 MOV V2.16B, V9.16B
	0x01D92E5C MOV V3.16B, V8.16B
	0x01D92E60 MOV X0, X31
	0x01D92E64 BL 0x3C2A9FC
	0x01D92E68 LDR X0, [X19 + 0x168]
	0x01D92E6C CBZ X0, 0x1D92F20
	0x01D92E70 FADD S12, S12, S2
	0x01D92E74 FADD S13, S13, S1
	0x01D92E78 FADD S14, S14, S0
	0x01D92E7C MOV V0.16B, V14.16B
	0x01D92E80 MOV V1.16B, V13.16B
	0x01D92E84 MOV V2.16B, V12.16B
	0x01D92E88 MOV X1, X31
	0x01D92E8C BL 0x3C8F014
	0x01D92E90 LDR X0, [X19 + 0x168]
	0x01D92E94 CBZ X0, 0x1D92F20
	0x01D92E98 MOV V0.16B, V11.16B
	0x01D92E9C MOV V1.16B, V10.16B
	0x01D92EA0 MOV V2.16B, V9.16B
	0x01D92EA4 MOV V3.16B, V8.16B
	0x01D92EA8 MOV X1, X31
	0x01D92EAC BL 0x3C8F148
	0x01D92EB0 MOV X0, X19
	0x01D92EB4 MOV X1, X31
	0x01D92EB8 BL 0x3C32E90
	0x01D92EBC CBZ X0, 0x1D92F20
	0x01D92EC0 MOV V0.16B, V14.16B
	0x01D92EC4 MOV V1.16B, V13.16B
	0x01D92EC8 MOV V2.16B, V12.16B
	0x01D92ECC MOV X1, X31
	0x01D92ED0 BL 0x3C3F62C
	0x01D92ED4 MOV X0, X19
	0x01D92ED8 MOV X1, X31
	0x01D92EDC BL 0x3C32E90
	0x01D92EE0 CBZ X0, 0x1D92F20
	0x01D92EE4 MOV V0.16B, V11.16B
	0x01D92EE8 MOV V1.16B, V10.16B
	0x01D92EEC MOV V2.16B, V9.16B
	0x01D92EF0 MOV V3.16B, V8.16B
	0x01D92EF4 MOV X1, X31
	0x01D92EF8 BL 0x3C3F7AC
	0x01D92EFC LDP X20, X19, [X31 + 0x190]
	0x01D92F00 LDP X30, X21, [X31 + 0x180]
	0x01D92F04 LDR X29, [X31 + 0x178]
	0x01D92F08 LDP D9, D8, [X31 + 0x168]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x2647000
	010 Move W8, [X20+2553]
	011 Move V8, V2
	012 Move V9, V1
	013 Move V10, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x2365000
	020 Move X0, [X0+2680]
	021 Call 0x1C17CF4
	022 Move X0, 0x2365000
	023 Move X0, [X0+3512]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+2553], W8
	027 Move W8, [X19+88]
	028 Compare W8, 0
	029 JumpIfEqual {109}
	030 Move [X19+88], W31
	031 Move X0, X31
	032 Call NetworkBehaviourId.get_None
	033 Move X1, X0
	034 Move X0, X19
	035 Call GrabbableItem.set_backpackId, X0, X1
	036 Move X0, X19
	037 Move X1, X31
	038 Call Component.get_transform, X0
	039 Compare X0, 0
	040 JumpIfEqual {221}
	041 Move V0, V10
	042 Move V1, V9
	043 Move V2, V8
	044 Move X1, X31
	045 Call Transform.set_position, X0, X1
	046 Move W1, 1
	047 Move X0, X19
	048 Call GrabbableItem.UpdateIsVisible, X0, X1
	049 Move X0, [X19+360]
	050 Compare X0, 0
	051 JumpIfEqual {221}
	052 Move V0, V10
	053 Move V1, V9
	054 Move V2, V8
	055 Move X1, X31
	056 Call Rigidbody.set_position, X0, X1
	057 Move X21, 0x2647000
	058 Move W8, [X21+1923]
	059 Move X20, [X19+360]
	060 Compare W8, 0
	061 JumpIfNotEqual {67}
	062 Move X0, 0x2362000
	063 Move X0, [X0+1440]
	064 Call 0x1C17CF4
	065 Move W8, 1
	066 Move [X21+1923], W8
	067 Compare X20, 0
	068 JumpIfEqual {221}
	069 Move X22, 0x2362000
	070 Move X22, [X22+1440]
	071 Move X0, X20
	072 Move X1, X31
	073 Move X8, [X22]
	074 Move X8, [X8+184]
	075 Move S1, [X8+4]
	076 Move S2, [X8+8]
	077 Move V0, [X8]
	078 Call Rigidbody.set_velocity, X0, X1
	079 Move W8, [X21+1923]
	080 Move X20, [X19+360]
	081 Compare W8, 0
	082 JumpIfNotEqual {88}
	083 Move X0, 0x2362000
	084 Move X0, [X0+1440]
	085 Call 0x1C17CF4
	086 Move W8, 1
	087 Move [X21+1923], W8
	088 Compare X20, 0
	089 JumpIfEqual {221}
	090 Move X8, [X22]
	091 Move X0, X20
	092 Move X1, X31
	093 Move X8, [X8+184]
	094 Move S1, [X8+4]
	095 Move S2, [X8+8]
	096 Move V0, [X8]
	097 Call Rigidbody.set_angularVelocity, X0, X1
	098 Move X0, X19
	099 Move X20, [X31+48]
	100 Move X19, [X31+56]
	101 Move X22, [X31+32]
	102 Move X21, [X31+40]
	103 Move X30, [X31+24]
	104 Move D9, [X31+8]
	105 Move D8, [X31+16]
	106 Move V10, [X31+64]
	107 Call GrabbableItem.StartTimeoutTimer, X0
	108 Return 
	109 Move X20, 0x2365000
	110 Move X20, [X20+2680]
	111 Move X0, [X20]
	112 Move W8, [X0+224]
	113 Compare W8, 0
	114 JumpIfNotEqual {116}
	115 Call 0x1C17DFC
	116 Move X0, X19
	117 Move X1, X31
	118 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	119 Move X0, [X19+56]
	120 Compare X0, 0
	121 JumpIfEqual {221}
	122 Move X1, X31
	123 Call NetworkRunner.get_Stage, X0
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move X20, [X31+48]
	126 Move X19, [X31+56]
	127 Move X22, [X31+32]
	128 Move X21, [X31+40]
	129 Move X30, [X31+24]
	130 Move D9, [X31+8]
	131 Move D8, [X31+16]
	132 Move V10, [X31+64]
	133 Return 
	134 Move X0, [X19+64]
	135 Compare X0, 0
	136 JumpIfEqual {221}
	137 Move X1, X31
	138 Call NetworkObject.GetLocalAuthorityMask, X0
	139 And W31, W0, 7
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfEqual {31}
	144 Move X8, [X19+56]
	145 Compare X8, 0
	146 JumpIfEqual {221}
	147 Move X0, [X8+80]
	148 Compare X0, 0
	149 JumpIfEqual {221}
	150 Move X1, X31
	151 Call Simulation.HasAnyActiveConnections, X0
	152 Move TEMP, X0
	153 And TEMP, TEMP, 1
	154 Compare TEMP, 1
	155 JumpIfNotEqual {125}
	156 Move X8, [X19+56]
	157 Compare X8, 0
	158 JumpIfEqual {221}
	159 Move X0, [X8+80]
	160 Move W1, 20
	161 Move X2, X31
	162 Call SimulationMessage.Allocate, X0, X1
	163 Move X8, [X19+64]
	164 Compare X8, 0
	165 JumpIfEqual {221}
	166 Move X8, [X8+32]
	167 Move X20, X0
	168 Compare X8, 0
	169 JumpIfEqual {193}
	170 Move W0, [X8]
	171 Move X0, [X20]
	172 Move X19, [X19+64]
	173 Move W8, [X0+224]
	174 Compare W8, 0
	175 JumpIfNotEqual {177}
	176 Call 0x1C17DFC
	177 Move X8, 0x2365000
	178 Move X8, [X8+3512]
	179 Move X1, X19
	180 Move X20, [X31+48]
	181 Move X19, [X31+56]
	182 Move X22, [X31+32]
	183 Move X21, [X31+40]
	184 Move X0, [X8]
	185 Move X30, [X31+24]
	186 Move D9, [X31+8]
	187 Move D8, [X31+16]
	188 Move W2, 7
	189 Move X3, X31
	190 Move V10, [X31+64]
	191 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	192 Return 
	193 Move X0, X31
	194 Move W1, [X19+104]
	195 Move W2, 5
	196 Move X3, X31
	197 Call RpcHeader.Create, X0, X1, X2
	198 Move [X20+28], X0
	199 Move [X20+36], S10
	200 Move [X20+44], S9
	201 Move [X20+44], S8
	202 Compare X20, 0
	203 JumpIfEqual {221}
	204 Move W8, 160
	205 Move [X20+12], W8
	206 Move X0, [X19+56]
	207 Compare X0, 0
	208 JumpIfEqual {221}
	209 Move X1, X20
	210 Move X20, [X31+48]
	211 Move X19, [X31+56]
	212 Move X22, [X31+32]
	213 Move X21, [X31+40]
	214 Move X30, [X31+24]
	215 Move D9, [X31+8]
	216 Move D8, [X31+16]
	217 Move X2, X31
	218 Move V10, [X31+64]
	219 Call NetworkRunner.SendRpc, X0, X1
	220 Return 
	221 Call 0x1C17F20

Method: System.Void SetBackAttach(UnityEngine.Transform backAttach)

Disassembly:
	0x01D92F0C LDP D11, D10, [X31 + 0x158]
	0x01D92F10 LDP D13, D12, [X31 + 0x148]

ISIL:
	001 Move [X0+152], X1
	002 Return 

Method: System.Void UpdateDetectCollisions()

Disassembly:
	0x01D92928 B 0x1D92C34
	0x01D9292C STR X31, [X19 + 0x1A8]
	0x01D92930 LDR X0, [X22]
	0x01D92934 LDR X20, [X19 + 0x1B0]
	0x01D92938 LDR W8, [X0 + 0xE0]
	0x01D9293C CBNZ W8, 0x1D92944
	0x01D92940 BL 0x1C16DFC
	0x01D92944 MOV X0, X20
	0x01D92948 MOV X1, X31
	0x01D9294C MOV X2, X31
	0x01D92950 BL 0x3C354F8
	0x01D92954 TBZ X0, 0x0, 0x1D929D8
	0x01D92958 LDR X25, [X19 + 0x1B0]
	0x01D9295C CBZ X25, 0x1D92C48
	0x01D92960 ADRP X26, 0x2364000
	0x01D92964 LDR X20, [X25 + 0x80]
	0x01D92968 LDR X26, [X26 + 0xDC0]
	0x01D9296C LDR X0, [X26]
	0x01D92970 BL 0x1C16F10
	0x01D92974 ADRP X8, 0x2364000
	0x01D92978 LDR X8, [X8 + 0xDD0]
	0x01D9297C MOV X1, X19
	0x01D92980 MOV X3, X31
	0x01D92984 MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, [X0+360]
	005 Move X20, X0
	006 Call GrabbableItem.get_isVisible, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {22}
	011 Move X0, X20
	012 Call GrabbableItem.get_isAttached, X0
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {32}
	017 Move W8, [X20+136]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSET not yet implemented."
	020 Compare X19, 0
	021 JumpIfNotEqual {25}
	022 Move W1, W31
	023 Compare X19, 0
	024 JumpIfEqual {35}
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X2, X31
	029 Move X30, [X31+32]
	030 Call Rigidbody.set_detectCollisions, X0, X1
	031 Return 
	032 Move W1, 1
	033 Compare X19, 0
	034 JumpIfNotEqual {25}
	035 Call 0x1C17F20

Method: System.Void UpdateLayer()

Disassembly:
	0x01D92F14 LDR V14, [X31 + 0x140]
	0x01D92F18 ADD X31, X31, 0x1A0
	0x01D92F1C RET
	0x01D92F20 BL 0x1C16F20
	0x01D92F24 STP X30, X21, [X31 - 0x20]!
	0x01D92F28 STP X20, X19, [X31 + 0x10]
	0x01D92F2C ADRP X21, 0x2646000
	0x01D92F30 LDRB W8, [X21 + 0x9FE]
	0x01D92F34 MOV X20, X1
	0x01D92F38 MOV X19, X0
	0x01D92F3C TBNZ X8, 0x0, 0x1D92F54
	0x01D92F40 ADRP X0, 0x2364000
	0x01D92F44 LDR X0, [X0 + 0x398]
	0x01D92F48 BL 0x1C16CF4
	0x01D92F4C MOVZ W8, 0x1
	0x01D92F50 STRB W8, [X21 + 0x9FE]
	0x01D92F54 LDR X0, [X19 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call GrabbableItem.get_isAttached, X0
	006 And W31, W0, 1
	007 Move W8, 12
	008 Move W9, 10
	009 Move X0, X19
	010 Move X1, X31
	011 NotImplemented "Instruction CSEL not yet implemented."
	012 Call Component.get_gameObject, X0
	013 Move X1, X0
	014 Move X0, X19
	015 Move W2, W20
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X30, [X31+32]

Method: System.Void UpdateLayerRecursively(UnityEngine.GameObject go, System.Int32 layer)

Disassembly:
	0x01D92F58 CBZ X0, 0x1D92FD0
	0x01D92F5C LDRB W8, [X0 + 0x60]
	0x01D92F60 TBNZ X8, 0x1, 0x1D92FD0
	0x01D92F64 MOV X1, X31
	0x01D92F68 BL 0x1E93668
	0x01D92F6C TBZ X0, 0x0, 0x1D92FD0
	0x01D92F70 CBZ X20, 0x1D92FDC
	0x01D92F74 LDR X8, [X20 + 0x40]
	0x01D92F78 CBZ X8, 0x1D92FDC
	0x01D92F7C LDR X8, [X8 + 0x20]
	0x01D92F80 CBZ X8, 0x1D92F8C
	0x01D92F84 LDR W21, [X8]
	0x01D92F88 B 0x1D92F90
	0x01D92F8C MOV W21, W31
	0x01D92F90 MOV X0, X19
	0x01D92F94 BL 0x1D8EB5C
	0x01D92F98 ADRP X8, 0x2364000
	0x01D92F9C LDR X8, [X8 + 0x398]
	0x01D92FA0 MOV X20, X0
	0x01D92FA4 LDR X8, [X8]
	0x01D92FA8 LDR W9, [X8 + 0xE0]
	0x01D92FAC CBNZ W9, 0x1D92FB8
	0x01D92FB0 MOV X0, X8
	0x01D92FB4 BL 0x1C16DFC
	0x01D92FB8 CMP W21, W20
	0x01D92FBC B.NE 0x1D92FD0
	0x01D92FC0 MOV X0, X19
	0x01D92FC4 LDP X20, X19, [X31 + 0x10]
	0x01D92FC8 LDP X30, X21, [X31], #0x20
	0x01D92FCC B 0x1D924B0
	0x01D92FD0 LDP X20, X19, [X31 + 0x10]
	0x01D92FD4 LDP X30, X21, [X31], #0x20
	0x01D92FD8 RET
	0x01D92FDC BL 0x1C16F20
	0x01D92FE0 SUB X31, X31, 0x80
	0x01D92FE4 STP D9, D8, [X31 + 0x30]
	0x01D92FE8 STP X30, X25, [X31 + 0x40]
	0x01D92FEC STP X24, X23, [X31 + 0x50]
	0x01D92FF0 STP X22, X21, [X31 + 0x60]
	0x01D92FF4 STP X20, X19, [X31 + 0x70]
	0x01D92FF8 MRS X21, 0xC000
	0x01D92FFC LDR X8, [X21 + 0x28]
	0x01D93000 ADRP X22, 0x2645000
	0x01D93004 MOV X19, X0
	0x01D93008 STR X8, [X31 + 0x28]
	0x01D9300C LDRB W8, [X22 + 0x783]
	0x01D93010 LDR X20, [X0 + 0x168]
	0x01D93014 CBNZ W8, 0x1D9302C
	0x01D93018 ADRP X0, 0x2360000
	0x01D9301C LDR X0, [X0 + 0x5A0]
	0x01D93020 BL 0x1C16CF4
	0x01D93024 MOVZ W8, 0x1
	0x01D93028 STRB W8, [X22 + 0x783]
	0x01D9302C CBZ X20, 0x1D93204
	0x01D93030 ADRP X23, 0x2360000
	0x01D93034 LDR X23, [X23 + 0x5A0]
	0x01D93038 MOV X0, X20
	0x01D9303C MOV X1, X31
	0x01D93040 LDR X8, [X23]
	0x01D93044 LDR X8, [X8 + 0xB8]
	0x01D93048 LDP S1, S2, [X8 + 0x4]
	0x01D9304C LDR V0, [X8]
	0x01D93050 BL 0x3C8E908
	0x01D93054 LDRB W8, [X22 + 0x783]
	0x01D93058 LDR X20, [X19 + 0x168]
	0x01D9305C CBNZ W8, 0x1D93074
	0x01D93060 ADRP X0, 0x2360000
	0x01D93064 LDR X0, [X0 + 0x5A0]
	0x01D93068 BL 0x1C16CF4
	0x01D9306C MOVZ W8, 0x1
	0x01D93070 STRB W8, [X22 + 0x783]
	0x01D93074 CBZ X20, 0x1D93204
	0x01D93078 LDR X8, [X23]
	0x01D9307C MOV X0, X20
	0x01D93080 MOV X1, X31
	0x01D93084 LDR X8, [X8 + 0xB8]
	0x01D93088 LDP S1, S2, [X8 + 0x4]
	0x01D9308C LDR V0, [X8]
	0x01D93090 BL 0x3C8EA40
	0x01D93094 LDRB W8, [X22 + 0x783]
	0x01D93098 LDR X20, [X19 + 0xD0]
	0x01D9309C CBNZ W8, 0x1D930B4
	0x01D930A0 ADRP X0, 0x2360000
	0x01D930A4 LDR X0, [X0 + 0x5A0]
	0x01D930A8 BL 0x1C16CF4
	0x01D930AC MOVZ W8, 0x1
	0x01D930B0 STRB W8, [X22 + 0x783]
	0x01D930B4 CBZ X20, 0x1D93204
	0x01D930B8 LDR X8, [X23]
	0x01D930BC MOV X0, X20
	0x01D930C0 MOV X1, X31
	0x01D930C4 LDR X8, [X8 + 0xB8]
	0x01D930C8 LDP S1, S2, [X8 + 0x4]
	0x01D930CC LDR V0, [X8]
	0x01D930D0 BL 0x3C3EC04
	0x01D930D4 ADRP X24, 0x2645000
	0x01D930D8 LDRB W8, [X24 + 0x793]
	0x01D930DC LDR X20, [X19 + 0xD0]
	0x01D930E0 CBNZ W8, 0x1D930F8
	0x01D930E4 ADRP X0, 0x2361000
	0x01D930E8 LDR X0, [X0 + 0x5A8]
	0x01D930EC BL 0x1C16CF4
	0x01D930F0 MOVZ W8, 0x1
	0x01D930F4 STRB W8, [X24 + 0x793]
	0x01D930F8 CBZ X20, 0x1D93204
	0x01D930FC ADRP X25, 0x2361000
	0x01D93100 LDR X25, [X25 + 0x5A8]
	0x01D93104 MOV X0, X20
	0x01D93108 MOV X1, X31
	0x01D9310C LDR X8, [X25]
	0x01D93110 LDR X8, [X8 + 0xB8]
	0x01D93114 LDP S2, S3, [X8 + 0x8]
	0x01D93118 LDP S0, S1, [X8]
	0x01D9311C BL 0x3C3F8B8
	0x01D93120 LDRB W8, [X22 + 0x783]
	0x01D93124 CBNZ W8, 0x1D9313C
	0x01D93128 ADRP X0, 0x2360000
	0x01D9312C LDR X0, [X0 + 0x5A0]
	0x01D93130 BL 0x1C16CF4
	0x01D93134 MOVZ W8, 0x1
	0x01D93138 STRB W8, [X22 + 0x783]
	0x01D9313C LDR X8, [X23]
	0x01D93140 LDRB W9, [X24 + 0x793]
	0x01D93144 LDR X8, [X8 + 0xB8]
	0x01D93148 LDR V9, [X8]
	0x01D9314C LDR V8, [X8 + 0x8]
	0x01D93150 CBNZ W9, 0x1D93168
	0x01D93154 ADRP X0, 0x2361000
	0x01D93158 LDR X0, [X0 + 0x5A8]
	0x01D9315C BL 0x1C16CF4
	0x01D93160 MOVZ W8, 0x1
	0x01D93164 STRB W8, [X24 + 0x793]
	0x01D93168 LDR X8, [X25]
	0x01D9316C ADD X1, X31, 0x8
	0x01D93170 MOV X0, X19
	0x01D93174 LDR X8, [X8 + 0xB8]
	0x01D93178 LDR V0, [X8]
	0x01D9317C STR D9, [X31 + 0x8]
	0x01D93180 STR S8, [X31 + 0x10]
	0x01D93184 STUR V0, [X31 + 0x14]
	0x01D93188 BL 0x1D8EA1C
	0x01D9318C MOV X0, X31
	0x01D93190 BL 0x1E91B08
	0x01D93194 AND X1, X0, 0x0
	0x01D93198 MOV X0, X19
	0x01D9319C BL 0x1D8ED4C
	0x01D931A0 MOV X0, X31
	0x01D931A4 BL 0x1E769D8
	0x01D931A8 MOV X1, X0
	0x01D931AC MOV X0, X19
	0x01D931B0 BL 0x1D8E8F0
	0x01D931B4 MOV X0, X31
	0x01D931B8 BL 0x1E769D8
	0x01D931BC MOV X1, X0
	0x01D931C0 MOV X0, X19
	0x01D931C4 BL 0x1D8E950
	0x01D931C8 MOV X0, X19
	0x01D931CC BL 0x1D90054
	0x01D931D0 MOV X0, X19
	0x01D931D4 BL 0x1D924B0
	0x01D931D8 LDR X8, [X21 + 0x28]
	0x01D931DC LDR X9, [X31 + 0x28]
	0x01D931E0 CMP X8, X9
	0x01D931E4 B.NE 0x1D93208
	0x01D931E8 LDP X20, X19, [X31 + 0x70]
	0x01D931EC LDP X22, X21, [X31 + 0x60]
	0x01D931F0 LDP X24, X23, [X31 + 0x50]
	0x01D931F4 LDP X30, X25, [X31 + 0x40]
	0x01D931F8 LDP D9, D8, [X31 + 0x30]
	0x01D931FC ADD X31, X31, 0x80
	0x01D93200 RET
	0x01D93204 BL 0x1C16F20
	0x01D93208 BL 0x3EB1B20
	0x01D9320C B 0x1D93210
	0x01D93210 STR X30, [X31 - 0x20]!
	0x01D93214 STP X20, X19, [X31 + 0x10]
	0x01D93218 ADRP X20, 0x2645000
	0x01D9321C LDRB W8, [X20 + 0xA00]
	0x01D93220 MOV X19, X0
	0x01D93224 TBNZ X8, 0x0, 0x1D93248
	0x01D93228 ADRP X0, 0x2363000
	0x01D9322C LDR X0, [X0 + 0xA78]
	0x01D93230 BL 0x1C16CF4
	0x01D93234 ADRP X0, 0x2363000
	0x01D93238 LDR X0, [X0 + 0xDE8]
	0x01D9323C BL 0x1C16CF4
	0x01D93240 MOVZ W8, 0x1
	0x01D93244 STRB W8, [X20 + 0xA00]
	0x01D93248 LDRB W8, [X19 + 0x58]
	0x01D9324C CBZ W8, 0x1D93264
	0x01D93250 STRB W31, [X19 + 0x58]
	0x01D93254 MOV X0, X19
	0x01D93258 LDP X20, X19, [X31 + 0x10]
	0x01D9325C LDR X30, [X31], #0x20
	0x01D93260 B 0x1D93394
	0x01D93264 ADRP X20, 0x2363000
	0x01D93268 LDR X20, [X20 + 0xA78]
	0x01D9326C LDR X0, [X20]
	0x01D93270 LDR W8, [X0 + 0xE0]
	0x01D93274 CBNZ W8, 0x1D9327C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x2647000
	009 Move W8, [X22+2554]
	010 Move W20, W2
	011 Move X19, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x2362000
	018 Move X0, [X0+3584]
	019 Call 0x1C17CF4
	020 Move X0, 0x2362000
	021 Move X0, [X0+3608]
	022 Call 0x1C17CF4
	023 Move X0, 0x2364000
	024 Move X0, [X0+1592]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+2554], W8
	028 Compare X19, 0
	029 JumpIfEqual {159}
	030 Move X0, X19
	031 Move X1, X31
	032 Call GameObject.get_layer, X0
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move W1, W20
	036 Move X2, X31
	037 Call GameObject.set_layer, X0, X1
	038 Move X0, X19
	039 Move X1, X31
	040 Call GameObject.get_transform, X0
	041 Compare X0, 0
	042 JumpIfEqual {159}
	043 Move X22, 0x2362000
	044 Move X22, [X22+3584]
	045 Move X1, X31
	046 Call Transform.GetEnumerator, X0
	047 Move X19, X0
	048 Compare X0, 0
	049 JumpIfEqual {160}
	050 Move X23, 0x2362000
	051 Move X24, 0x2363000
	052 Move X23, [X23+3608]
	053 Call 0x3EB24FC
	054 Return 
	055 Move X8, [X19]
	056 Move X1, [X23]
	057 NotImplemented "Instruction LDRH not yet implemented."
	058 Compare X9, 0
	059 JumpIfEqual {66}
	060 Move X10, [X8+176]
	061 Add X10, X10, 8
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Subtract X9, X9, 1
	065 Add X10, X10, 16
	066 Move X0, X19
	067 Move W2, W31
	068 Call 0x1C5D788
	069 NotImplemented "Instruction LDRSW not yet implemented."
	070 Add X8, X8, X9
	071 Add X0, X8, 312
	072 Move X8, [X0]
	073 Move X1, [X0+8]
	074 Move X0, X19
	075 NotImplemented "Instruction BLR not yet implemented."
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {119}
	080 Move X8, [X19]
	081 Move X1, [X23]
	082 NotImplemented "Instruction LDRH not yet implemented."
	083 Compare X9, 0
	084 JumpIfEqual {91}
	085 Move X10, [X8+176]
	086 Add X10, X10, 8
	087 NotImplemented "Instruction LDUR not yet implemented."
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Subtract X9, X9, 1
	090 Add X10, X10, 16
	091 Move W2, 1
	092 Move X0, X19
	093 Call 0x1C5D788
	094 Move W9, [X10]
	095 Add W9, W9, 1
	096 Add X8, X8, W9
	097 Add X0, X8, 312
	098 Move X8, [X0]
	099 Move X1, [X0+8]
	100 Move X0, X19
	101 NotImplemented "Instruction BLR not yet implemented."
	102 Compare X0, 0
	103 JumpIfEqual {158}
	104 Move X8, [X0]
	105 Move X1, [X24]
	106 Move W10, [X8+304]
	107 Move W9, [X1+304]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move X8, [X8+200]
	110 Add X8, X8, X9
	111 NotImplemented "Instruction LDUR not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X1, X31
	114 Call Component.get_gameObject, X0
	115 Move X1, X0
	116 Move X0, X21
	117 Move W2, W20
	118 Call GrabbableItem.UpdateLayerRecursively, X0, X1, X2
	119 Move X20, X31
	120 Move X1, [X22]
	121 Move X0, X19
	122 Call 0x1C17E00
	123 Compare X0, 0
	124 JumpIfEqual {147}
	125 Move X8, [X0]
	126 Move X1, [X22]
	127 Move X19, X0
	128 NotImplemented "Instruction LDRH not yet implemented."
	129 Compare X9, 0
	130 JumpIfEqual {137}
	131 Move X10, [X8+176]
	132 Add X10, X10, 8
	133 NotImplemented "Instruction LDUR not yet implemented."
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Subtract X9, X9, 1
	136 Add X10, X10, 16
	137 Move X0, X19
	138 Move W2, W31
	139 Call 0x1C5D788
	140 NotImplemented "Instruction LDRSW not yet implemented."
	141 Add X8, X8, X9
	142 Add X0, X8, 312
	143 Move X8, [X0]
	144 Move X1, [X0+8]
	145 Move X0, X19
	146 NotImplemented "Instruction BLR not yet implemented."
	147 Compare X20, 0
	148 JumpIfNotEqual {161}
	149 Move X20, [X31+48]
	150 Move X19, [X31+56]
	151 Move X22, [X31+32]
	152 Move X21, [X31+40]
	153 Move X24, [X31+16]
	154 Move X23, [X31+24]
	155 Move X30, [X31+64]
	156 Return 
	157 Call 0x1C181E0
	158 Call 0x1C17F20
	159 Call 0x1C17F20
	160 Call 0x1C17F20
	161 Move X0, X20
	162 Call 0x1C17F18
	163 Move X21, X0
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Move X0, X21
	166 Call 0x3EB2AD0
	167 Move X20, [X0]
	168 Call 0x3EB2AE0
	169 Move X20, X31
	170 Move X21, X0
	171 Move X1, [X22]
	172 Move X0, X19
	173 Call 0x1C17E00
	174 Move X19, X0
	175 Compare X0, 0
	176 JumpIfEqual {198}
	177 Move X8, [X19]
	178 Move X1, [X22]
	179 NotImplemented "Instruction LDRH not yet implemented."
	180 Compare X9, 0
	181 JumpIfEqual {188}
	182 Move X10, [X8+176]
	183 Add X10, X10, 8
	184 NotImplemented "Instruction LDUR not yet implemented."
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Subtract X9, X9, 1
	187 Add X10, X10, 16
	188 Move X0, X19
	189 Move W2, W31
	190 Call 0x1C5D788
	191 NotImplemented "Instruction LDRSW not yet implemented."
	192 Add X8, X8, X9
	193 Add X0, X8, 312
	194 Move X8, [X0]
	195 Move X1, [X0+8]
	196 Move X0, X19
	197 NotImplemented "Instruction BLR not yet implemented."
	198 Compare X20, 0
	199 JumpIfNotEqual {202}
	200 Move X0, X21
	201 Call 0x1D2D690
	202 Move X0, X20
	203 Call 0x1C17F18
	204 Call 0x1991590

Method: System.Void UpdateFollowTransform()

Disassembly:
	0x01D93278 BL 0x1C16DFC
	0x01D9327C MOV X0, X19
	0x01D93280 MOV X1, X31
	0x01D93284 BL 0x1E77B08
	0x01D93288 LDR X0, [X19 + 0x38]
	0x01D9328C CBZ X0, 0x1D93390
	0x01D93290 MOV X1, X31
	0x01D93294 BL 0x1E9E538
	0x01D93298 CMP W0, 0x4
	0x01D9329C B.NE 0x1D932AC
	0x01D932A0 LDP X20, X19, [X31 + 0x10]
	0x01D932A4 LDR X30, [X31], #0x20
	0x01D932A8 RET
	0x01D932AC LDR X0, [X19 + 0x40]
	0x01D932B0 CBZ X0, 0x1D93390
	0x01D932B4 MOV X1, X31
	0x01D932B8 BL 0x1E94078
	0x01D932BC ANDS W31, W0, 0x7
	0x01D932C0 B.EQ 0x1D93318
	0x01D932C4 TBNZ X0, 0x0, 0x1D93254
	0x01D932C8 LDR X8, [X19 + 0x38]
	0x01D932CC CBZ X8, 0x1D93390
	0x01D932D0 LDR X0, [X8 + 0x50]
	0x01D932D4 CBZ X0, 0x1D93390
	0x01D932D8 MOV X1, X31
	0x01D932DC BL 0x1EC4D00
	0x01D932E0 TBZ X0, 0x0, 0x1D932A0
	0x01D932E4 LDR X8, [X19 + 0x38]
	0x01D932E8 CBZ X8, 0x1D93390
	0x01D932EC LDR X0, [X8 + 0x50]
	0x01D932F0 MOVZ W1, 0x8
	0x01D932F4 MOV X2, X31
	0x01D932F8 BL 0x1ED9318
	0x01D932FC LDR X8, [X19 + 0x40]
	0x01D93300 CBZ X8, 0x1D93390
	0x01D93304 LDR X8, [X8 + 0x20]
	0x01D93308 MOV X20, X0
	0x01D9330C CBZ X8, 0x1D93350
	0x01D93310 LDR W0, [X8]
	0x01D93314 B 0x1D93354
	0x01D93318 LDR X0, [X20]
	0x01D9331C LDR X19, [X19 + 0x40]
	0x01D93320 LDR W8, [X0 + 0xE0]
	0x01D93324 CBNZ W8, 0x1D9332C
	0x01D93328 BL 0x1C16DFC
	0x01D9332C ADRP X8, 0x2363000
	0x01D93330 LDR X8, [X8 + 0xDE8]
	0x01D93334 MOV X1, X19
	0x01D93338 LDP X20, X19, [X31 + 0x10]
	0x01D9333C MOVZ W2, 0x7
	0x01D93340 LDR X0, [X8]
	0x01D93344 MOV X3, X31
	0x01D93348 LDR X30, [X31], #0x20
	0x01D9334C B 0x1E77B00
	0x01D93350 MOV X0, X31
	0x01D93354 LDR W1, [X19 + 0x68]
	0x01D93358 MOVZ W2, 0x6
	0x01D9335C MOV X3, X31
	0x01D93360 BL 0x1E9C23C
	0x01D93364 STUR X0, [X20 + 0x1C]
	0x01D93368 CBZ X20, 0x1D93390
	0x01D9336C MOVZ W8, 0x40
	0x01D93370 STR W8, [X20 + 0xC]
	0x01D93374 LDR X0, [X19 + 0x38]
	0x01D93378 CBZ X0, 0x1D93390
	0x01D9337C MOV X1, X20
	0x01D93380 LDP X20, X19, [X31 + 0x10]
	0x01D93384 MOV X2, X31
	0x01D93388 LDR X30, [X31], #0x20
	0x01D9338C B 0x1EA1E24
	0x01D93390 BL 0x1C16F20
	0x01D93394 SUB X31, X31, 0x50
	0x01D93398 STP X30, X21, [X31 + 0x30]
	0x01D9339C STP X20, X19, [X31 + 0x40]
	0x01D933A0 MRS X21, 0xC000
	0x01D933A4 LDR X8, [X21 + 0x28]
	0x01D933A8 MOV X19, X0
	0x01D933AC STR X8, [X31 + 0x28]
	0x01D933B0 ADD X8, X31, 0x8
	0x01D933B4 BL 0x1D8EC1C
	0x01D933B8 LDRB W8, [X31 + 0x24]
	0x01D933BC TBZ X8, 0x0, 0x1D93480
	0x01D933C0 MOV X0, X19
	0x01D933C4 MOV X1, X31
	0x01D933C8 BL 0x3C32E90
	0x01D933CC MOV X20, X0
	0x01D933D0 ADD X8, X31, 0x8
	0x01D933D4 MOV X0, X19
	0x01D933D8 BL 0x1D8EC1C
	0x01D933DC CBZ X20, 0x1D934D8
	0x01D933E0 LDP S0, S1, [X31 + 0x8]
	0x01D933E4 LDR V2, [X31 + 0x10]
	0x01D933E8 MOV X0, X20
	0x01D933EC MOV X1, X31
	0x01D933F0 BL 0x3C3F62C
	0x01D933F4 MOV X0, X19
	0x01D933F8 MOV X1, X31
	0x01D933FC BL 0x3C32E90
	0x01D93400 MOV X20, X0
	0x01D93404 ADD X8, X31, 0x8
	0x01D93408 MOV X0, X19
	0x01D9340C BL 0x1D8EC1C
	0x01D93410 CBZ X20, 0x1D934D8
	0x01D93414 LDP S0, S1, [X31 + 0x14]
	0x01D93418 LDP S2, S3, [X31 + 0x1C]
	0x01D9341C MOV X0, X20
	0x01D93420 MOV X1, X31
	0x01D93424 BL 0x3C3F7AC
	0x01D93428 LDR X20, [X19 + 0x168]
	0x01D9342C MOV X0, X19
	0x01D93430 MOV X1, X31
	0x01D93434 BL 0x3C32E90
	0x01D93438 CBZ X0, 0x1D934D8
	0x01D9343C MOV X1, X31
	0x01D93440 BL 0x3C3F58C
	0x01D93444 CBZ X20, 0x1D934D8
	0x01D93448 MOV X0, X20
	0x01D9344C MOV X1, X31
	0x01D93450 BL 0x3C8F014
	0x01D93454 LDR X20, [X19 + 0x168]
	0x01D93458 MOV X0, X19
	0x01D9345C MOV X1, X31
	0x01D93460 BL 0x3C32E90
	0x01D93464 CBZ X0, 0x1D934D8
	0x01D93468 MOV X1, X31
	0x01D9346C BL 0x3C3DEB4
	0x01D93470 CBZ X20, 0x1D934D8
	0x01D93474 MOV X0, X20
	0x01D93478 MOV X1, X31
	0x01D9347C BL 0x3C8F148
	0x01D93480 MOV X0, X19
	0x01D93484 BL 0x1D92FE0
	0x01D93488 LDR X0, [X19 + 0x170]
	0x01D9348C CBZ X0, 0x1D934D8
	0x01D93490 LDR X8, [X0]
	0x01D93494 MOV W1, W31
	0x01D93498 LDP X9, X2, [X8 + 0x1F8]
	0x01D9349C BLR X9
	0x01D934A0 LDR X8, [X19 + 0x1E0]
	0x01D934A4 CBZ X8, 0x1D934B8
	0x01D934A8 LDR X9, [X8 + 0x18]
	0x01D934AC LDR X0, [X8 + 0x40]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2646000
	007 Move X21, 0x2361000
	008 Move W8, [X20+2555]
	009 Move X21, [X21+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x2361000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move X0, 0x2363000
	019 Move X0, [X0+1992]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2555], W8
	023 Move X0, [X21]
	024 Move X20, [X19+336]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {38}
	037 Move [X19+376], X31
	038 Move X8, [X19+336]
	039 Compare X8, 0
	040 JumpIfEqual {174}
	041 Move X0, [X8+64]
	042 Compare X0, 0
	043 JumpIfEqual {148}
	044 Move W8, [X0+96]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 2
	047 Compare TEMP, 2
	048 JumpIfEqual {148}
	049 Move X1, X31
	050 Call NetworkObject.get_HasInputAuthority, X0
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {148}
	055 Move X8, [X19+336]
	056 Compare X8, 0
	057 JumpIfEqual {174}
	058 Move W8, [X8+128]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Compare W8, 0
	062 JumpIfNotEqual {147}
	063 Move X20, 0x2363000
	064 Move X20, [X20+1992]
	065 Move X0, [X20]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X22, 0x2646000
	071 Move W8, [X22+2141]
	072 Compare W8, 0
	073 JumpIfNotEqual {79}
	074 Move X0, 0x2363000
	075 Move X0, [X0+1992]
	076 Call 0x1C17CF4
	077 Move W8, 1
	078 Move [X22+2141], W8
	079 Move X0, [X20]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {85}
	083 Call 0x1C17DFC
	084 Move X0, [X20]
	085 Move X8, [X0+184]
	086 Move X8, [X8]
	087 Compare X8, 0
	088 JumpIfEqual {174}
	089 Move X8, [X8+112]
	090 Move X20, 0x2363000
	091 Move X20, [X20+1992]
	092 Move X0, [X20]
	093 Move W8, [X0+224]
	094 Compare W8, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1C17DFC
	097 Move X22, 0x2646000
	098 Move W8, [X22+2141]
	099 Compare W8, 0
	100 JumpIfNotEqual {106}
	101 Move X0, 0x2363000
	102 Move X0, [X0+1992]
	103 Call 0x1C17CF4
	104 Move W8, 1
	105 Move [X22+2141], W8
	106 Move X0, [X20]
	107 Move W8, [X0+224]
	108 Compare W8, 0
	109 JumpIfNotEqual {112}
	110 Call 0x1C17DFC
	111 Move X0, [X20]
	112 Move X8, [X0+184]
	113 Move X0, [X8]
	114 Compare X0, 0
	115 JumpIfEqual {174}
	116 Move X1, X31
	117 Call PlayerController.get_backAttachAnchor, X0
	118 Move [X19+376], X0
	119 Move X20, 0x2363000
	120 Move X20, [X20+1992]
	121 Move X0, [X20]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Move X22, 0x2646000
	127 Move W8, [X22+2141]
	128 Compare W8, 0
	129 JumpIfNotEqual {135}
	130 Move X0, 0x2363000
	131 Move X0, [X0+1992]
	132 Call 0x1C17CF4
	133 Move W8, 1
	134 Move [X22+2141], W8
	135 Move X0, [X20]
	136 Move W8, [X0+224]
	137 Compare W8, 0
	138 JumpIfNotEqual {141}
	139 Call 0x1C17DFC
	140 Move X0, [X20]
	141 Move X8, [X0+184]
	142 Move X8, [X8]
	143 Compare X8, 0
	144 JumpIfEqual {174}
	145 Move X8, [X8+120]
	146 Move [X19+376], X8
	147 Move [X19+376], X31
	148 Move X0, [X21]
	149 Move X20, [X19+376]
	150 Move W8, [X0+224]
	151 Compare W8, 0
	152 JumpIfNotEqual {154}
	153 Call 0x1C17DFC
	154 Move X0, X20
	155 Move X1, X31
	156 Move X2, X31
	157 Call Object.op_Equality, X0, X1
	158 Move TEMP, X0
	159 And TEMP, TEMP, 1
	160 Compare TEMP, 1
	161 JumpIfNotEqual {168}
	162 Move X0, [X19+336]
	163 Compare X0, 0
	164 JumpIfEqual {174}
	165 Move X1, X31
	166 Call Component.get_transform, X0
	167 Move [X19+376], X0
	168 Move X20, [X31+32]
	169 Move X19, [X31+40]
	170 Move X22, [X31+16]
	171 Move X21, [X31+24]
	172 Move X30, [X31+48]
	173 Return 
	174 Call 0x1C17F20

Method: System.Void ResetStuckAnchor()

Disassembly:
	0x01D934B0 LDR X1, [X8 + 0x28]
	0x01D934B4 BLR X9
	0x01D934B8 LDR X8, [X21 + 0x28]
	0x01D934BC LDR X9, [X31 + 0x28]
	0x01D934C0 CMP X8, X9
	0x01D934C4 B.NE 0x1D934DC
	0x01D934C8 LDP X20, X19, [X31 + 0x40]
	0x01D934CC LDP X30, X21, [X31 + 0x30]
	0x01D934D0 ADD X31, X31, 0x50
	0x01D934D4 RET
	0x01D934D8 BL 0x1C16F20
	0x01D934DC BL 0x3EB1B20
	0x01D934E0 SUB X31, X31, 0x80
	0x01D934E4 STR D14, [X31 + 0x20]
	0x01D934E8 STP D13, D12, [X31 + 0x28]
	0x01D934EC STP D11, D10, [X31 + 0x38]
	0x01D934F0 STP D9, D8, [X31 + 0x48]
	0x01D934F4 STR X30, [X31 + 0x58]
	0x01D934F8 STP X22, X21, [X31 + 0x60]
	0x01D934FC STP X20, X19, [X31 + 0x70]
	0x01D93500 ADRP X20, 0x2645000
	0x01D93504 LDRB W8, [X20 + 0xA01]
	0x01D93508 MOV X19, X0
	0x01D9350C TBNZ X8, 0x0, 0x1D93530
	0x01D93510 ADRP X0, 0x2363000
	0x01D93514 LDR X0, [X0 + 0xA78]
	0x01D93518 BL 0x1C16CF4
	0x01D9351C ADRP X0, 0x2363000
	0x01D93520 LDR X0, [X0 + 0xDF0]
	0x01D93524 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move [X31+8], X31
	006 Call GrabbableItem.get_isStuck, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {31}
	011 Move X20, [X19+56]
	012 Move X0, X19
	013 Call GrabbableItem.get_stuckAnchorId, X0
	014 Compare X20, 0
	015 JumpIfEqual {40}
	016 And X1, X0, 0
	017 Add X2, X31, 8
	018 Move X0, X20
	019 Move X3, X31
	020 Call NetworkRunner.TryFindObject, X0, X1, X2
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {31}
	025 Move X0, [X19+56]
	026 Compare X0, 0
	027 JumpIfEqual {40}
	028 Move X1, [X31+8]
	029 Move X2, X31
	030 Call NetworkRunner.Despawn, X0, X1
	031 Move X0, X19
	032 Move X1, X31
	033 Call GrabbableItem.set_stuckAnchorId, X0, X1
	034 Move X0, X19
	035 Call GrabbableItem.HandleStuckAnchorIdChanged, X0
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Return 
	040 Call 0x1C17F20

Method: System.Void SetStuckAnchorId(Fusion.NetworkId networkId, System.Boolean release = False)

Disassembly:
	0x01D93528 MOVZ W8, 0x1
	0x01D9352C STRB W8, [X20 + 0xA01]
	0x01D93530 LDRB W8, [X19 + 0x58]
	0x01D93534 CBZ W8, 0x1D936B4
	0x01D93538 STRB W31, [X19 + 0x58]
	0x01D9353C MOV X0, X19
	0x01D93540 BL 0x1D896B8
	0x01D93544 MOV X20, X0
	0x01D93548 MOV X0, X31
	0x01D9354C BL 0x1E769D8
	0x01D93550 ADRP X22, 0x2645000
	0x01D93554 LDRB W8, [X22 + 0xA20]
	0x01D93558 MOV X21, X0
	0x01D9355C CBNZ W8, 0x1D93574
	0x01D93560 ADRP X0, 0x2363000
	0x01D93564 LDR X0, [X0 + 0x398]
	0x01D93568 BL 0x1C16CF4
	0x01D9356C MOVZ W8, 0x1
	0x01D93570 STRB W8, [X22 + 0xA20]
	0x01D93574 ADRP X8, 0x2363000
	0x01D93578 LDR X8, [X8 + 0x398]
	0x01D9357C LDR X0, [X8]
	0x01D93580 LDR W8, [X0 + 0xE0]
	0x01D93584 CBNZ W8, 0x1D9358C
	0x01D93588 BL 0x1C16DFC
	0x01D9358C CMP W20, W21
	0x01D93590 B.NE 0x1D935A4
	0x01D93594 UBFM X8, X21, 0x20, 0x3F
	0x01D93598 UBFM X9, X20, 0x20, 0x3F
	0x01D9359C CMP W9, W8
	0x01D935A0 B.EQ 0x1D9366C
	0x01D935A4 MOV X0, X19
	0x01D935A8 BL 0x1D896B8
	0x01D935AC MOV X0, X19
	0x01D935B0 MOV X1, X31
	0x01D935B4 BL 0x3C32E90
	0x01D935B8 CBZ X0, 0x1D93828
	0x01D935BC MOV X1, X31
	0x01D935C0 BL 0x3C3F58C
	0x01D935C4 MOV X0, X19
	0x01D935C8 MOV X1, X31
	0x01D935CC MOV V8.16B, V0.16B
	0x01D935D0 MOV V9.16B, V1.16B
	0x01D935D4 MOV V10.16B, V2.16B
	0x01D935D8 BL 0x3C32E90
	0x01D935DC CBZ X0, 0x1D93828
	0x01D935E0 MOV X1, X31
	0x01D935E4 BL 0x3C3DEB4
	0x01D935E8 ADRP X20, 0x2645000
	0x01D935EC LDRB W8, [X20 + 0x783]
	0x01D935F0 MOV V11.16B, V0.16B
	0x01D935F4 MOV V12.16B, V1.16B
	0x01D935F8 MOV V13.16B, V2.16B
	0x01D935FC MOV V14.16B, V3.16B
	0x01D93600 CBNZ W8, 0x1D93618
	0x01D93604 ADRP X0, 0x2360000
	0x01D93608 LDR X0, [X0 + 0x5A0]
	0x01D9360C BL 0x1C16CF4
	0x01D93610 MOVZ W8, 0x1
	0x01D93614 STRB W8, [X20 + 0x783]
	0x01D93618 ADRP X8, 0x2360000
	0x01D9361C LDR X8, [X8 + 0x5A0]
	0x01D93620 MOVZ W2, 0x1
	0x01D93624 MOV X0, X19
	0x01D93628 MOV V3.16B, V11.16B
	0x01D9362C LDR X8, [X8]
	0x01D93630 MOV V4.16B, V12.16B
	0x01D93634 MOV V5.16B, V13.16B
	0x01D93638 MOV V6.16B, V14.16B
	0x01D9363C LDR X8, [X8 + 0xB8]
	0x01D93640 MOV W3, W31
	0x01D93644 LDP S0, S1, [X8]
	0x01D93648 LDR V2, [X8 + 0x8]
	0x01D9364C STR S0, [X31 + 0x10]
	0x01D93650 STP S1, S2, [X31 + 0x14]
	0x01D93654 STP S1, S2, [X31 + 0x4]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], D14
	003 Move [X31+40], D13
	004 Move [X31+48], D12
	005 Move [X31+56], D11
	006 Move [X31+64], D10
	007 Move [X31+72], D9
	008 Move [X31+80], D8
	009 Move [X31+88], X30
	010 Move [X31+96], X20
	011 Move [X31+104], X19
	012 And X1, X1, 0
	013 Move W20, W2
	014 Move X19, X0
	015 Call GrabbableItem.set_stuckAnchorId, X0, X1
	016 Move X0, X19
	017 Call GrabbableItem.HandleStuckAnchorIdChanged, X0
	018 Move TEMP, X20
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {84}
	022 Move X0, X19
	023 Call GrabbableItem.get_isAttached, X0
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {84}
	028 Move X0, X19
	029 Call GrabbableItem.get_attachedAnchorId, X0
	030 Move X0, X19
	031 Move X1, X31
	032 Call Component.get_transform, X0
	033 Compare X0, 0
	034 JumpIfEqual {96}
	035 Move X1, X31
	036 Call Transform.get_position, X0
	037 Move X0, X19
	038 Move X1, X31
	039 Move V8, V0
	040 Move V9, V1
	041 Move V10, V2
	042 Call Component.get_transform, X0
	043 Compare X0, 0
	044 JumpIfEqual {96}
	045 Move X1, X31
	046 Call Transform.get_rotation, X0
	047 Move X20, 0x2646000
	048 Move W8, [X20+1923]
	049 Move V11, V0
	050 Move V12, V1
	051 Move V13, V2
	052 Move V14, V3
	053 Compare W8, 0
	054 JumpIfNotEqual {60}
	055 Move X0, 0x2361000
	056 Move X0, [X0+1440]
	057 Call 0x1C17CF4
	058 Move W8, 1
	059 Move [X20+1923], W8
	060 Move X8, 0x2361000
	061 Move X8, [X8+1440]
	062 Move X0, X19
	063 Move V3, V11
	064 Move V4, V12
	065 Move X8, [X8]
	066 Move V5, V13
	067 Move V6, V14
	068 Move W2, W31
	069 Move X8, [X8+184]
	070 Move W3, W31
	071 Move S0, [X8]
	072 Move S1, [X8+4]
	073 Move V2, [X8+8]
	074 Move [X31+16], S0
	075 Move [X31+20], S1
	076 Move [X31+28], S2
	077 Move [X31+4], S1
	078 Move [X31+12], S2
	079 Move [X31], S0
	080 Move V0, V8
	081 Move V1, V9
	082 Move V2, V10
	083 Call GrabbableItem.ReleaseInternal, X0, X1, X2, X3, X4, X5, X6, X7
	084 Move X20, [X31+96]
	085 Move X19, [X31+104]
	086 Move X30, [X31+88]
	087 Move D9, [X31+72]
	088 Move D8, [X31+80]
	089 Move D11, [X31+56]
	090 Move D10, [X31+64]
	091 Move D13, [X31+40]
	092 Move D12, [X31+48]
	093 Move V14, [X31+32]
	094 Add X31, X31, 112
	095 Return 
	096 Call 0x1C17F20

Method: System.Void UpdateTransformFromStuckAnchor()

Disassembly:
	0x01D93C4C LDP X20, X19, [X31 + 0x10]
	0x01D93C50 MOV X1, X31
	0x01D93C54 LDP X30, X21, [X31], #0x20
	0x01D93C58 B 0x1E94414
	0x01D93C5C BL 0x1C16F20
	0x01D93C60 MOVZ W8, 0x1
	0x01D93C64 STRB W8, [X0 + 0x1BA]
	0x01D93C68 RET
	0x01D93C6C MOVZ W8, 0x1
	0x01D93C70 STRB W8, [X0 + 0x1BA]
	0x01D93C74 RET
	0x01D93C78 SUB X31, X31, 0x80
	0x01D93C7C STR D14, [X31 + 0x20]
	0x01D93C80 STP D13, D12, [X31 + 0x28]
	0x01D93C84 STP D11, D10, [X31 + 0x38]
	0x01D93C88 STP D9, D8, [X31 + 0x48]
	0x01D93C8C STR X30, [X31 + 0x58]
	0x01D93C90 STP X22, X21, [X31 + 0x60]
	0x01D93C94 STP X20, X19, [X31 + 0x70]
	0x01D93C98 MOV X20, X1
	0x01D93C9C MOV X19, X0
	0x01D93CA0 BL 0x1D8EEF0
	0x01D93CA4 TBZ X0, 0x0, 0x1D93DE0
	0x01D93CA8 MOV X0, X19
	0x01D93CAC BL 0x1D896B8
	0x01D93CB0 ADRP X22, 0x2645000
	0x01D93CB4 LDRB W8, [X22 + 0xA20]
	0x01D93CB8 MOV X21, X0
	0x01D93CBC CBNZ W8, 0x1D93CD4
	0x01D93CC0 ADRP X0, 0x2363000
	0x01D93CC4 LDR X0, [X0 + 0x398]
	0x01D93CC8 BL 0x1C16CF4
	0x01D93CCC MOVZ W8, 0x1
	0x01D93CD0 STRB W8, [X22 + 0xA20]
	0x01D93CD4 ADRP X8, 0x2363000
	0x01D93CD8 LDR X8, [X8 + 0x398]
	0x01D93CDC LDR X0, [X8]
	0x01D93CE0 LDR W8, [X0 + 0xE0]
	0x01D93CE4 CBNZ W8, 0x1D93CEC
	0x01D93CE8 BL 0x1C16DFC
	0x01D93CEC CMP W20, W21
	0x01D93CF0 B.NE 0x1D93DE0
	0x01D93CF4 UBFM X8, X21, 0x20, 0x3F
	0x01D93CF8 UBFM X9, X20, 0x20, 0x3F
	0x01D93CFC CMP W9, W8
	0x01D93D00 B.NE 0x1D93DE0
	0x01D93D04 LDR X0, [X19 + 0x40]
	0x01D93D08 CBZ X0, 0x1D93DE0
	0x01D93D0C LDRB W8, [X0 + 0x60]
	0x01D93D10 TBNZ X8, 0x1, 0x1D93DE0
	0x01D93D14 MOV X1, X31
	0x01D93D18 BL 0x1E93668
	0x01D93D1C TBZ X0, 0x0, 0x1D93DE0
	0x01D93D20 MOV X0, X19
	0x01D93D24 MOV X1, X31
	0x01D93D28 BL 0x3C32E90
	0x01D93D2C CBZ X0, 0x1D93E04
	0x01D93D30 MOV X1, X31
	0x01D93D34 BL 0x3C3F58C
	0x01D93D38 MOV X0, X19
	0x01D93D3C MOV X1, X31
	0x01D93D40 MOV V8.16B, V0.16B
	0x01D93D44 MOV V9.16B, V1.16B
	0x01D93D48 MOV V10.16B, V2.16B
	0x01D93D4C BL 0x3C32E90
	0x01D93D50 CBZ X0, 0x1D93E04
	0x01D93D54 MOV X1, X31
	0x01D93D58 BL 0x3C3DEB4
	0x01D93D5C ADRP X20, 0x2645000
	0x01D93D60 LDRB W8, [X20 + 0x783]
	0x01D93D64 MOV V11.16B, V0.16B
	0x01D93D68 MOV V12.16B, V1.16B
	0x01D93D6C MOV V13.16B, V2.16B
	0x01D93D70 MOV V14.16B, V3.16B
	0x01D93D74 CBNZ W8, 0x1D93D8C
	0x01D93D78 ADRP X0, 0x2360000
	0x01D93D7C LDR X0, [X0 + 0x5A0]
	0x01D93D80 BL 0x1C16CF4
	0x01D93D84 MOVZ W8, 0x1
	0x01D93D88 STRB W8, [X20 + 0x783]
	0x01D93D8C ADRP X8, 0x2360000
	0x01D93D90 LDR X8, [X8 + 0x5A0]
	0x01D93D94 MOVZ W2, 0x1
	0x01D93D98 MOV X0, X19
	0x01D93D9C MOV V3.16B, V11.16B
	0x01D93DA0 LDR X8, [X8]
	0x01D93DA4 MOV V4.16B, V12.16B
	0x01D93DA8 MOV V5.16B, V13.16B
	0x01D93DAC MOV V6.16B, V14.16B
	0x01D93DB0 LDR X8, [X8 + 0xB8]
	0x01D93DB4 MOV W3, W31
	0x01D93DB8 LDP S0, S1, [X8]
	0x01D93DBC LDR V2, [X8 + 0x8]
	0x01D93DC0 STR S0, [X31 + 0x10]
	0x01D93DC4 STP S1, S2, [X31 + 0x14]
	0x01D93DC8 STP S1, S2, [X31 + 0x4]
	0x01D93DCC STR S0, [X31]
	0x01D93DD0 MOV V0.16B, V8.16B
	0x01D93DD4 MOV V1.16B, V9.16B
	0x01D93DD8 MOV V2.16B, V10.16B
	0x01D93DDC BL 0x1D8FD4C
	0x01D93DE0 LDP X20, X19, [X31 + 0x70]
	0x01D93DE4 LDP X22, X21, [X31 + 0x60]
	0x01D93DE8 LDR X30, [X31 + 0x58]
	0x01D93DEC LDP D9, D8, [X31 + 0x48]
	0x01D93DF0 LDP D11, D10, [X31 + 0x38]
	0x01D93DF4 LDP D13, D12, [X31 + 0x28]
	0x01D93DF8 LDR V14, [X31 + 0x20]
	0x01D93DFC ADD X31, X31, 0x80
	0x01D93E00 RET
	0x01D93E04 BL 0x1C16F20
	0x01D93E08 SUB X31, X31, 0x90
	0x01D93E0C STR D10, [X31 + 0x50]
	0x01D93E10 STP D9, D8, [X31 + 0x60]
	0x01D93E14 STP X30, X21, [X31 + 0x70]
	0x01D93E18 STP X20, X19, [X31 + 0x80]
	0x01D93E1C MRS X20, 0xC000
	0x01D93E20 LDR X8, [X20 + 0x28]
	0x01D93E24 ADRP X21, 0x2645000
	0x01D93E28 MOV X19, X0
	0x01D93E2C STR X8, [X31 + 0x48]
	0x01D93E30 LDRB W8, [X21 + 0xA04]
	0x01D93E34 TBNZ X8, 0x0, 0x1D93E58
	0x01D93E38 ADRP X0, 0x2363000
	0x01D93E3C LDR X0, [X0 + 0xD18]
	0x01D93E40 BL 0x1C16CF4
	0x01D93E44 ADRP X0, 0x2363000
	0x01D93E48 LDR X0, [X0 + 0xE00]
	0x01D93E4C BL 0x1C16CF4
	0x01D93E50 MOVZ W8, 0x1
	0x01D93E54 STRB W8, [X21 + 0xA04]
	0x01D93E58 MOV X0, X19
	0x01D93E5C MOV X1, X31
	0x01D93E60 STRB W31, [X31 + 0x6]
	0x01D93E64 STRH W31, [X31 + 0x4]
	0x01D93E68 BL 0x1E73F88
	0x01D93E6C ADD X8, X31, 0x28
	0x01D93E70 MOV X0, X19
	0x01D93E74 BL 0x1D8EC1C
	0x01D93E78 LDRB W8, [X31 + 0x44]
	0x01D93E7C TBNZ X8, 0x0, 0x1D93F0C
	0x01D93E80 LDR X0, [X19 + 0x40]
	0x01D93E84 CBZ X0, 0x1D93F0C
	0x01D93E88 LDRB W8, [X0 + 0x60]
	0x01D93E8C TBNZ X8, 0x1, 0x1D93F0C
	0x01D93E90 MOV X1, X31
	0x01D93E94 BL 0x1E93668
	0x01D93E98 TBZ X0, 0x0, 0x1D93F0C
	0x01D93E9C MOV X0, X19
	0x01D93EA0 MOV X1, X31
	0x01D93EA4 BL 0x3C32E90
	0x01D93EA8 CBZ X0, 0x1D94000
	0x01D93EAC MOV X1, X31
	0x01D93EB0 BL 0x3C3F58C
	0x01D93EB4 MOV X0, X19
	0x01D93EB8 MOV X1, X31
	0x01D93EBC MOV V8.16B, V0.16B
	0x01D93EC0 MOV V9.16B, V1.16B
	0x01D93EC4 MOV V10.16B, V2.16B
	0x01D93EC8 BL 0x3C32E90
	0x01D93ECC CBZ X0, 0x1D94000
	0x01D93ED0 MOV X1, X31
	0x01D93ED4 BL 0x3C3DEB4
	0x01D93ED8 MOVZ W8, 0x1
	0x01D93EDC STRB W8, [X31 + 0x24]
	0x01D93EE0 LDRH W8, [X31 + 0x4]
	0x01D93EE4 ADD X1, X31, 0x8
	0x01D93EE8 MOV X0, X19
	0x01D93EEC STP S8, S9, [X31 + 0x8]
	0x01D93EF0 STURH W8, [X31 + 0x25]
	0x01D93EF4 LDRB W8, [X31 + 0x6]
	0x01D93EF8 STP S10, S0, [X31 + 0x10]
	0x01D93EFC STP S1, S2, [X31 + 0x18]
	0x01D93F00 STR S3, [X31 + 0x20]
	0x01D93F04 STRB W8, [X31 + 0x27]
	0x01D93F08 BL 0x1D8EC84
	0x01D93F0C LDR X0, [X19 + 0x40]
	0x01D93F10 CBZ X0, 0x1D93F60
	0x01D93F14 LDRB W8, [X0 + 0x60]
	0x01D93F18 TBNZ X8, 0x1, 0x1D93F60
	0x01D93F1C MOV X1, X31
	0x01D93F20 BL 0x1E93668

ISIL:
	001 Subtract X31, X31, 416
	002 Move [X31+320], D14
	003 Move [X31+328], D13
	004 Move [X31+336], D12
	005 Move [X31+344], D11
	006 Move [X31+352], D10
	007 Move [X31+360], D9
	008 Move [X31+368], D8
	009 Move [X31+376], X29
	010 Move [X31+384], X30
	011 Move [X31+392], X21
	012 Move [X31+400], X20
	013 Move [X31+408], X19
	014 Move X20, 0x2646000
	015 Move X21, 0x2361000
	016 Move W8, [X20+2556]
	017 Move X21, [X21+1432]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x2361000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+2556], W8
	028 Move X0, [X21]
	029 NotImplemented "Instruction MOVI not yet implemented."
	030 Move [X31+288], V0
	031 Move [X31+296], V0
	032 Move [X31+256], V0
	033 Move [X31+264], V0
	034 Move W8, [X0+224]
	035 Move X20, [X19+424]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Inequality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {215}
	047 Move X0, [X21]
	048 Move X20, [X19+176]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X20
	054 Move X1, X31
	055 Move X2, X31
	056 Call Object.op_Inequality, X0, X1
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {215}
	061 Move X0, X19
	062 Move X1, X31
	063 Call Component.get_transform, X0
	064 Compare X0, 0
	065 JumpIfEqual {229}
	066 Add X8, X31, 128
	067 Move X1, X31
	068 Call Transform.get_worldToLocalMatrix, X0
	069 Move V0, [X31+128]
	070 Move V1, [X31+144]
	071 Move V2, [X31+160]
	072 Move V3, [X31+176]
	073 Move [X31+192], V0
	074 Move [X31+200], V1
	075 Move [X31+224], V2
	076 Move [X31+232], V3
	077 Move X0, [X19+176]
	078 Compare X0, 0
	079 JumpIfEqual {229}
	080 Add X8, X31, 128
	081 Move X1, X31
	082 Call Transform.get_localToWorldMatrix, X0
	083 Move V0, [X31+128]
	084 Move V1, [X31+144]
	085 Move V2, [X31+160]
	086 Move V3, [X31+176]
	087 Add X8, X31, 128
	088 Add X0, X31, 64
	089 Move [X31], V0
	090 Move [X31+8], V1
	091 Move V0, [X31+192]
	092 Move V1, [X31+208]
	093 Move [X31+32], V2
	094 Move [X31+40], V3
	095 Move V2, [X31+224]
	096 Move V3, [X31+240]
	097 Add X1, X31, 0
	098 Move X2, X31
	099 Move [X31+64], V0
	100 Move [X31+72], V1
	101 Move [X31+96], V2
	102 Move [X31+104], V3
	103 Call Matrix4x4.op_Multiply, X0, X1
	104 Move V0, [X31+128]
	105 Move V1, [X31+144]
	106 Move V2, [X31+160]
	107 Move V3, [X31+176]
	108 Add X0, X31, 256
	109 Move X1, X31
	110 Move [X31+256], V0
	111 Move [X31+264], V1
	112 Move [X31+288], V2
	113 Move [X31+296], V3
	114 Call Matrix4x4.get_rotation, X0
	115 Move X0, X31
	116 Call Quaternion.Inverse, X0
	117 Move X0, [X19+424]
	118 Compare X0, 0
	119 JumpIfEqual {229}
	120 Move X1, X31
	121 Move V9, V0
	122 Move V8, V1
	123 Move V10, V2
	124 Move V11, V3
	125 Call Transform.get_rotation, X0
	126 Move X0, [X19+424]
	127 Compare X0, 0
	128 JumpIfEqual {229}
	129 Multiply S4, S11, S3
	130 Multiply S5, S9, S0
	131 Multiply S16, S8, S0
	132 Multiply S17, S10, S3
	133 Multiply S18, S11, S2
	134 Multiply S20, S11, S1
	135 Multiply S21, S10, S0
	136 Multiply S0, S11, S0
	137 Multiply S23, S9, S3
	138 Multiply S3, S8, S3
	139 Multiply S6, S8, S1
	140 Multiply S19, S9, S1
	141 Multiply S1, S10, S1
	142 Multiply S22, S9, S2
	143 Subtract S4, S4, S5
	144 Add S5, S17, S18
	145 Add S3, S3, S20
	146 Add S0, S23, S0
	147 Multiply S7, S10, S2
	148 Multiply S2, S8, S2
	149 Subtract S4, S4, S6
	150 Add S5, S16, S5
	151 Add S3, S22, S3
	152 Add S0, S1, S0
	153 Move X1, X31
	154 Subtract S8, S4, S7
	155 Subtract S9, S5, S19
	156 Subtract S10, S3, S21
	157 Subtract S11, S0, S2
	158 Call Transform.get_position, X0
	159 Add X0, X31, 256
	160 Move X1, X31
	161 Move V14, V0
	162 Move V13, V1
	163 Move V12, V2
	164 Call Matrix4x4.GetPosition, X0
	165 NotImplemented "Instruction FNEG not yet implemented."
	166 NotImplemented "Instruction FNEG not yet implemented."
	167 NotImplemented "Instruction FNEG not yet implemented."
	168 Move V0, V11
	169 Move V1, V10
	170 Move V2, V9
	171 Move V3, V8
	172 Move X0, X31
	173 Call Quaternion.op_Multiply, X0, X1
	174 Move X0, [X19+360]
	175 Compare X0, 0
	176 JumpIfEqual {229}
	177 Add S12, S12, S2
	178 Add S13, S13, S1
	179 Add S14, S14, S0
	180 Move V0, V14
	181 Move V1, V13
	182 Move V2, V12
	183 Move X1, X31
	184 Call Rigidbody.set_position, X0, X1
	185 Move X0, [X19+360]
	186 Compare X0, 0
	187 JumpIfEqual {229}
	188 Move V0, V11
	189 Move V1, V10
	190 Move V2, V9
	191 Move V3, V8
	192 Move X1, X31
	193 Call Rigidbody.set_rotation, X0, X1
	194 Move X0, X19
	195 Move X1, X31
	196 Call Component.get_transform, X0
	197 Compare X0, 0
	198 JumpIfEqual {229}
	199 Move V0, V14
	200 Move V1, V13
	201 Move V2, V12
	202 Move X1, X31
	203 Call Transform.set_position, X0, X1
	204 Move X0, X19
	205 Move X1, X31
	206 Call Component.get_transform, X0
	207 Compare X0, 0
	208 JumpIfEqual {229}
	209 Move V0, V11
	210 Move V1, V10
	211 Move V2, V9
	212 Move V3, V8
	213 Move X1, X31
	214 Call Transform.set_rotation, X0, X1
	215 Move X20, [X31+400]
	216 Move X19, [X31+408]
	217 Move X30, [X31+384]
	218 Move X21, [X31+392]
	219 Move X29, [X31+376]
	220 Move D9, [X31+360]
	221 Move D8, [X31+368]
	222 Move D11, [X31+344]
	223 Move D10, [X31+352]
	224 Move D13, [X31+328]
	225 Move D12, [X31+336]
	226 Move V14, [X31+320]
	227 Add X31, X31, 416
	228 Return 
	229 Call 0x1C17F20

Method: System.Void HandleStuckAnchorIdChanged()

Disassembly:
	0x01D93658 STR S0, [X31]
	0x01D9365C MOV V0.16B, V8.16B
	0x01D93660 MOV V1.16B, V9.16B
	0x01D93664 MOV V2.16B, V10.16B
	0x01D93668 BL 0x1D8FD4C
	0x01D9366C LDR X8, [X19 + 0x80]
	0x01D93670 CBZ X8, 0x1D93828
	0x01D93674 LDRB W8, [X8 + 0x28]
	0x01D93678 ANDS W31, W8, 0xE
	0x01D9367C B.EQ 0x1D936F0
	0x01D93680 LDR X0, [X19 + 0x38]
	0x01D93684 CBZ X0, 0x1D93828
	0x01D93688 LDR X1, [X19 + 0x40]
	0x01D9368C LDP X20, X19, [X31 + 0x70]
	0x01D93690 LDP X22, X21, [X31 + 0x60]
	0x01D93694 LDR X30, [X31 + 0x58]
	0x01D93698 LDP D9, D8, [X31 + 0x48]
	0x01D9369C LDP D11, D10, [X31 + 0x38]
	0x01D936A0 LDP D13, D12, [X31 + 0x28]
	0x01D936A4 LDR V14, [X31 + 0x20]
	0x01D936A8 MOV X2, X31
	0x01D936AC ADD X31, X31, 0x80
	0x01D936B0 B 0x1EA3884
	0x01D936B4 ADRP X20, 0x2363000
	0x01D936B8 LDR X20, [X20 + 0xA78]
	0x01D936BC LDR X0, [X20]
	0x01D936C0 LDR W8, [X0 + 0xE0]
	0x01D936C4 CBNZ W8, 0x1D936CC
	0x01D936C8 BL 0x1C16DFC
	0x01D936CC MOV X0, X19
	0x01D936D0 MOV X1, X31
	0x01D936D4 BL 0x1E77B08
	0x01D936D8 LDR X0, [X19 + 0x38]
	0x01D936DC CBZ X0, 0x1D93828
	0x01D936E0 MOV X1, X31
	0x01D936E4 BL 0x1E9E538
	0x01D936E8 CMP W0, 0x4
	0x01D936EC B.NE 0x1D93714
	0x01D936F0 LDP X20, X19, [X31 + 0x70]
	0x01D936F4 LDP X22, X21, [X31 + 0x60]
	0x01D936F8 LDR X30, [X31 + 0x58]
	0x01D936FC LDP D9, D8, [X31 + 0x48]
	0x01D93700 LDP D11, D10, [X31 + 0x38]
	0x01D93704 LDP D13, D12, [X31 + 0x28]
	0x01D93708 LDR V14, [X31 + 0x20]
	0x01D9370C ADD X31, X31, 0x80
	0x01D93710 RET
	0x01D93714 LDR X0, [X19 + 0x40]
	0x01D93718 CBZ X0, 0x1D93828
	0x01D9371C MOV X1, X31
	0x01D93720 BL 0x1E94078
	0x01D93724 ANDS W31, W0, 0x7
	0x01D93728 B.EQ 0x1D93780
	0x01D9372C TBNZ X0, 0x0, 0x1D9353C
	0x01D93730 LDR X8, [X19 + 0x38]
	0x01D93734 CBZ X8, 0x1D93828
	0x01D93738 LDR X0, [X8 + 0x50]
	0x01D9373C CBZ X0, 0x1D93828
	0x01D93740 MOV X1, X31
	0x01D93744 BL 0x1EC4D00
	0x01D93748 TBZ X0, 0x0, 0x1D936F0
	0x01D9374C LDR X8, [X19 + 0x38]
	0x01D93750 CBZ X8, 0x1D93828
	0x01D93754 LDR X0, [X8 + 0x50]
	0x01D93758 MOVZ W1, 0x8
	0x01D9375C MOV X2, X31
	0x01D93760 BL 0x1ED9318
	0x01D93764 LDR X8, [X19 + 0x40]
	0x01D93768 CBZ X8, 0x1D93828
	0x01D9376C LDR X8, [X8 + 0x20]
	0x01D93770 MOV X20, X0
	0x01D93774 CBZ X8, 0x1D937D0
	0x01D93778 LDR W0, [X8]
	0x01D9377C B 0x1D937D4
	0x01D93780 LDR X0, [X20]
	0x01D93784 LDR X19, [X19 + 0x40]
	0x01D93788 LDR W8, [X0 + 0xE0]
	0x01D9378C CBNZ W8, 0x1D93794
	0x01D93790 BL 0x1C16DFC
	0x01D93794 ADRP X8, 0x2363000
	0x01D93798 LDR X8, [X8 + 0xDF0]
	0x01D9379C MOV X1, X19
	0x01D937A0 LDP X20, X19, [X31 + 0x70]
	0x01D937A4 LDP X22, X21, [X31 + 0x60]
	0x01D937A8 LDR X0, [X8]
	0x01D937AC LDR X30, [X31 + 0x58]
	0x01D937B0 LDP D9, D8, [X31 + 0x48]
	0x01D937B4 LDP D11, D10, [X31 + 0x38]
	0x01D937B8 LDP D13, D12, [X31 + 0x28]
	0x01D937BC LDR V14, [X31 + 0x20]
	0x01D937C0 MOVZ W2, 0x7
	0x01D937C4 MOV X3, X31
	0x01D937C8 ADD X31, X31, 0x80
	0x01D937CC B 0x1E77B00
	0x01D937D0 MOV X0, X31
	0x01D937D4 LDR W1, [X19 + 0x68]
	0x01D937D8 MOVZ W2, 0x7
	0x01D937DC MOV X3, X31
	0x01D937E0 BL 0x1E9C23C
	0x01D937E4 STUR X0, [X20 + 0x1C]
	0x01D937E8 CBZ X20, 0x1D93828
	0x01D937EC MOVZ W8, 0x40
	0x01D937F0 STR W8, [X20 + 0xC]
	0x01D937F4 LDR X0, [X19 + 0x38]
	0x01D937F8 CBZ X0, 0x1D93828
	0x01D937FC MOV X1, X20
	0x01D93800 LDP X20, X19, [X31 + 0x70]
	0x01D93804 LDP X22, X21, [X31 + 0x60]
	0x01D93808 LDR X30, [X31 + 0x58]
	0x01D9380C LDP D9, D8, [X31 + 0x48]
	0x01D93810 LDP D11, D10, [X31 + 0x38]
	0x01D93814 LDP D13, D12, [X31 + 0x28]
	0x01D93818 LDR V14, [X31 + 0x20]
	0x01D9381C MOV X2, X31
	0x01D93820 ADD X31, X31, 0x80
	0x01D93824 B 0x1EA1E24
	0x01D93828 BL 0x1C16F20
	0x01D9382C RET
	0x01D93830 SUB X31, X31, 0xC0
	0x01D93834 STR D14, [X31 + 0x50]
	0x01D93838 STP D13, D12, [X31 + 0x58]
	0x01D9383C STP D11, D10, [X31 + 0x68]
	0x01D93840 STP D9, D8, [X31 + 0x78]
	0x01D93844 STR X30, [X31 + 0x88]
	0x01D93848 STP X24, X23, [X31 + 0x90]
	0x01D9384C STP X22, X21, [X31 + 0xA0]
	0x01D93850 STP X20, X19, [X31 + 0xB0]
	0x01D93854 MRS X22, 0xC000
	0x01D93858 LDR X8, [X22 + 0x28]
	0x01D9385C ADRP X20, 0x2645000
	0x01D93860 MOV X19, X0
	0x01D93864 STR X8, [X31 + 0x48]
	0x01D93868 LDRB W8, [X20 + 0xA02]
	0x01D9386C TBNZ X8, 0x0, 0x1D93890
	0x01D93870 ADRP X0, 0x2363000
	0x01D93874 LDR X0, [X0 + 0xDF8]
	0x01D93878 BL 0x1C16CF4
	0x01D9387C ADRP X0, 0x2360000
	0x01D93880 LDR X0, [X0 + 0x598]
	0x01D93884 BL 0x1C16CF4
	0x01D93888 MOVZ W8, 0x1
	0x01D9388C STRB W8, [X20 + 0xA02]
	0x01D93890 LDR X0, [X19 + 0x38]
	0x01D93894 CBZ X0, 0x1D93B84
	0x01D93898 LDR W8, [X0 + 0x188]
	0x01D9389C CMP W8, 0x2
	0x01D938A0 B.NE 0x1D93B4C
	0x01D938A4 LDR X8, [X19 + 0x40]
	0x01D938A8 CBZ X8, 0x1D9391C
	0x01D938AC LDRB W9, [X8 + 0x60]
	0x01D938B0 TBNZ X9, 0x1, 0x1D9391C
	0x01D938B4 MOV X0, X8
	0x01D938B8 MOV X1, X31
	0x01D938BC BL 0x1E93668
	0x01D938C0 TBZ X0, 0x0, 0x1D93914
	0x01D938C4 ADRP X23, 0x2360000
	0x01D938C8 LDR X23, [X23 + 0x598]
	0x01D938CC LDR X20, [X19 + 0x1A0]
	0x01D938D0 LDR X0, [X23]
	0x01D938D4 LDR W8, [X0 + 0xE0]
	0x01D938D8 CBNZ W8, 0x1D938E0
	0x01D938DC BL 0x1C16DFC
	0x01D938E0 MOV X0, X20
	0x01D938E4 MOV X1, X31
	0x01D938E8 MOV X2, X31
	0x01D938EC BL 0x3C354F8
	0x01D938F0 TBZ X0, 0x0, 0x1D93980
	0x01D938F4 LDR X8, [X19 + 0x1A0]
	0x01D938F8 CBZ X8, 0x1D93B84
	0x01D938FC LDR X9, [X8 + 0x40]
	0x01D93900 CBZ X9, 0x1D93AB4
	0x01D93904 LDR X9, [X9 + 0x20]
	0x01D93908 CBZ X9, 0x1D93AB4
	0x01D9390C LDR W1, [X9]
	0x01D93910 B 0x1D93AB8
	0x01D93914 LDR X0, [X19 + 0x38]
	0x01D93918 CBZ X0, 0x1D93B84
	0x01D9391C MOV X1, X31
	0x01D93920 BL 0x1E9EA88
	0x01D93924 LDR X8, [X19 + 0x40]
	0x01D93928 CBZ X8, 0x1D93B84
	0x01D9392C MOV X20, X0
	0x01D93930 MOV X0, X8
	0x01D93934 MOV X1, X31
	0x01D93938 BL 0x1E93A0C
	0x01D9393C ADRP X8, 0x2363000
	0x01D93940 LDR X8, [X8 + 0xDF8]
	0x01D93944 AND X1, X0, 0x0
	0x01D93948 MOV X0, X20
	0x01D9394C LDR X2, [X8]
	0x01D93950 BL 0x21BA6AC
	0x01D93954 TBNZ X0, 0x0, 0x1D93B4C
	0x01D93958 LDR X0, [X19 + 0x38]
	0x01D9395C CBZ X0, 0x1D93B84
	0x01D93960 MOV X1, X31
	0x01D93964 BL 0x1EA27F0
	0x01D93968 TBZ X0, 0x0, 0x1D93B4C
	0x01D9396C LDR X0, [X19 + 0x40]
	0x01D93970 CBZ X0, 0x1D93B84
	0x01D93974 MOV X1, X31
	0x01D93978 BL 0x1E94414
	0x01D9397C B 0x1D93B4C
	0x01D93980 MOV X0, X19
	0x01D93984 BL 0x1D896B8
	0x01D93988 MOV X20, X0
	0x01D9398C MOV X0, X31
	0x01D93990 BL 0x1E769D8
	0x01D93994 ADRP X24, 0x2645000
	0x01D93998 LDRB W8, [X24 + 0xA20]
	0x01D9399C MOV X21, X0
	0x01D939A0 CBNZ W8, 0x1D939B8
	0x01D939A4 ADRP X0, 0x2363000
	0x01D939A8 LDR X0, [X0 + 0x398]
	0x01D939AC BL 0x1C16CF4
	0x01D939B0 MOVZ W8, 0x1
	0x01D939B4 STRB W8, [X24 + 0xA20]
	0x01D939B8 ADRP X8, 0x2363000
	0x01D939BC LDR X8, [X8 + 0x398]
	0x01D939C0 LDR X0, [X8]
	0x01D939C4 LDR W8, [X0 + 0xE0]
	0x01D939C8 CBNZ W8, 0x1D939D0
	0x01D939CC BL 0x1C16DFC
	0x01D939D0 CMP W20, W21
	0x01D939D4 B.NE 0x1D939E8
	0x01D939D8 UBFM X8, X21, 0x20, 0x3F
	0x01D939DC UBFM X9, X20, 0x20, 0x3F
	0x01D939E0 CMP W9, W8
	0x01D939E4 B.EQ 0x1D93ACC
	0x01D939E8 MOV X0, X19
	0x01D939EC BL 0x1D896B8
	0x01D939F0 MOV X0, X19
	0x01D939F4 MOV X1, X31
	0x01D939F8 BL 0x3C32E90
	0x01D939FC CBZ X0, 0x1D93B84
	0x01D93A00 MOV X1, X31
	0x01D93A04 BL 0x3C3F58C
	0x01D93A08 MOV X0, X19
	0x01D93A0C MOV X1, X31
	0x01D93A10 MOV V8.16B, V0.16B
	0x01D93A14 MOV V9.16B, V1.16B
	0x01D93A18 MOV V10.16B, V2.16B
	0x01D93A1C BL 0x3C32E90
	0x01D93A20 CBZ X0, 0x1D93B84
	0x01D93A24 MOV X1, X31
	0x01D93A28 BL 0x3C3DEB4
	0x01D93A2C ADRP X20, 0x2645000
	0x01D93A30 LDRB W8, [X20 + 0x783]
	0x01D93A34 MOV V11.16B, V0.16B
	0x01D93A38 MOV V12.16B, V1.16B
	0x01D93A3C MOV V13.16B, V2.16B
	0x01D93A40 MOV V14.16B, V3.16B
	0x01D93A44 CBNZ W8, 0x1D93A5C
	0x01D93A48 ADRP X0, 0x2360000
	0x01D93A4C LDR X0, [X0 + 0x5A0]
	0x01D93A50 BL 0x1C16CF4
	0x01D93A54 MOVZ W8, 0x1
	0x01D93A58 STRB W8, [X20 + 0x783]
	0x01D93A5C ADRP X8, 0x2360000
	0x01D93A60 LDR X8, [X8 + 0x5A0]
	0x01D93A64 MOVZ W2, 0x1
	0x01D93A68 MOV X0, X19
	0x01D93A6C MOV V3.16B, V11.16B
	0x01D93A70 LDR X8, [X8]
	0x01D93A74 MOV V4.16B, V12.16B
	0x01D93A78 MOV V5.16B, V13.16B
	0x01D93A7C MOV V6.16B, V14.16B
	0x01D93A80 LDR X8, [X8 + 0xB8]
	0x01D93A84 MOV W3, W31
	0x01D93A88 LDP S0, S1, [X8]
	0x01D93A8C LDR V2, [X8 + 0x8]
	0x01D93A90 STR S0, [X31 + 0x10]
	0x01D93A94 STP S1, S2, [X31 + 0x14]
	0x01D93A98 STP S1, S2, [X31 + 0x4]
	0x01D93A9C STR S0, [X31]
	0x01D93AA0 MOV V0.16B, V8.16B
	0x01D93AA4 MOV V1.16B, V9.16B
	0x01D93AA8 MOV V2.16B, V10.16B
	0x01D93AAC BL 0x1D8FD4C
	0x01D93AB0 B 0x1D93ACC
	0x01D93AB4 MOV X1, X31
	0x01D93AB8 LDR W8, [X8 + 0x68]
	0x01D93ABC MOVZ W2, 0x1
	0x01D93AC0 MOV X0, X19
	0x01D93AC4 BFM X1, X8, 0x20, 0x1F
	0x01D93AC8 BL 0x1D8F660
	0x01D93ACC MOV X0, X19
	0x01D93AD0 BL 0x1D90054
	0x01D93AD4 LDR X0, [X23]
	0x01D93AD8 LDR X20, [X19 + 0xD0]
	0x01D93ADC LDR W8, [X0 + 0xE0]
	0x01D93AE0 CBNZ W8, 0x1D93AE8
	0x01D93AE4 BL 0x1C16DFC
	0x01D93AE8 MOV X0, X20
	0x01D93AEC MOV X1, X31
	0x01D93AF0 MOV X2, X31
	0x01D93AF4 BL 0x3C354F8
	0x01D93AF8 TBZ X0, 0x0, 0x1D93B44
	0x01D93AFC LDR X0, [X19 + 0xD0]
	0x01D93B00 CBZ X0, 0x1D93B84
	0x01D93B04 MOV X1, X31
	0x01D93B08 BL 0x3C3EB78
	0x01D93B0C LDR X0, [X19 + 0xD0]
	0x01D93B10 CBZ X0, 0x1D93B84
	0x01D93B14 MOV X1, X31
	0x01D93B18 MOV V8.16B, V0.16B
	0x01D93B1C MOV V9.16B, V1.16B
	0x01D93B20 MOV V10.16B, V2.16B
	0x01D93B24 BL 0x3C3F830
	0x01D93B28 ADD X1, X31, 0x28
	0x01D93B2C MOV X0, X19
	0x01D93B30 STP S8, S9, [X31 + 0x28]
	0x01D93B34 STP S10, S0, [X31 + 0x30]
	0x01D93B38 STP S1, S2, [X31 + 0x38]
	0x01D93B3C STR S3, [X31 + 0x40]
	0x01D93B40 BL 0x1D8EA1C
	0x01D93B44 MOVZ W8, 0x1
	0x01D93B48 STRB W8, [X19 + 0x1B9]
	0x01D93B4C LDR X8, [X22 + 0x28]
	0x01D93B50 LDR X9, [X31 + 0x48]
	0x01D93B54 CMP X8, X9
	0x01D93B58 B.NE 0x1D93B88
	0x01D93B5C LDP X20, X19, [X31 + 0xB0]
	0x01D93B60 LDP X22, X21, [X31 + 0xA0]
	0x01D93B64 LDP X24, X23, [X31 + 0x90]
	0x01D93B68 LDR X30, [X31 + 0x88]
	0x01D93B6C LDP D9, D8, [X31 + 0x78]
	0x01D93B70 LDP D11, D10, [X31 + 0x68]
	0x01D93B74 LDP D13, D12, [X31 + 0x58]
	0x01D93B78 LDR V14, [X31 + 0x50]
	0x01D93B7C ADD X31, X31, 0xC0
	0x01D93B80 RET
	0x01D93B84 BL 0x1C16F20
	0x01D93B88 BL 0x3EB1B20
	0x01D93B8C STP X30, X21, [X31 - 0x20]!
	0x01D93B90 STP X20, X19, [X31 + 0x10]
	0x01D93B94 ADRP X21, 0x2645000
	0x01D93B98 LDRB W8, [X21 + 0xA03]
	0x01D93B9C MOV W20, W1
	0x01D93BA0 MOV X19, X0
	0x01D93BA4 TBNZ X8, 0x0, 0x1D93BBC
	0x01D93BA8 ADRP X0, 0x2363000
	0x01D93BAC LDR X0, [X0 + 0xDF8]
	0x01D93BB0 BL 0x1C16CF4
	0x01D93BB4 MOVZ W8, 0x1
	0x01D93BB8 STRB W8, [X21 + 0xA03]
	0x01D93BBC MOV X0, X19
	0x01D93BC0 BL 0x1D8EEF0
	0x01D93BC4 TBZ X0, 0x0, 0x1D93C38
	0x01D93BC8 LDR X0, [X19 + 0x40]
	0x01D93BCC CBZ X0, 0x1D93C5C
	0x01D93BD0 MOV X1, X31
	0x01D93BD4 BL 0x1E934B8
	0x01D93BD8 TBZ X0, 0x0, 0x1D93C38
	0x01D93BDC LDR X0, [X19 + 0x38]
	0x01D93BE0 CBZ X0, 0x1D93C5C
	0x01D93BE4 MOV X1, X31
	0x01D93BE8 BL 0x1EA27F0
	0x01D93BEC TBNZ X0, 0x0, 0x1D93BF4
	0x01D93BF0 TBNZ X20, 0x0, 0x1D93C38
	0x01D93BF4 LDR X0, [X19 + 0x38]
	0x01D93BF8 CBZ X0, 0x1D93C5C
	0x01D93BFC MOV X1, X31
	0x01D93C00 BL 0x1E9EA88
	0x01D93C04 LDR X8, [X19 + 0x40]
	0x01D93C08 CBZ X8, 0x1D93C5C
	0x01D93C0C MOV X20, X0
	0x01D93C10 MOV X0, X8
	0x01D93C14 MOV X1, X31
	0x01D93C18 BL 0x1E93A0C
	0x01D93C1C ADRP X8, 0x2363000
	0x01D93C20 LDR X8, [X8 + 0xDF8]
	0x01D93C24 AND X1, X0, 0x0
	0x01D93C28 MOV X0, X20
	0x01D93C2C LDR X2, [X8]
	0x01D93C30 BL 0x21BA6AC
	0x01D93C34 TBZ X0, 0x0, 0x1D93C44
	0x01D93C38 LDP X20, X19, [X31 + 0x10]
	0x01D93C3C LDP X30, X21, [X31], #0x20
	0x01D93C40 RET
	0x01D93C44 LDR X0, [X19 + 0x40]
	0x01D93C48 CBZ X0, 0x1D93C5C

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], X30
	003 Move [X31+48], X26
	004 Move [X31+56], X25
	005 Move [X31+64], X24
	006 Move [X31+72], X23
	007 Move [X31+80], X22
	008 Move [X31+88], X21
	009 Move [X31+96], X20
	010 Move [X31+104], X19
	011 Move X20, 0x2646000
	012 Move X22, 0x2361000
	013 Move W8, [X20+2557]
	014 Move X22, [X22+1432]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {46}
	020 Move X0, 0x2364000
	021 Move X0, [X0+3520]
	022 Call 0x1C17CF4
	023 Move X0, 0x2364000
	024 Move X0, [X0+3528]
	025 Call 0x1C17CF4
	026 Move X0, 0x2364000
	027 Move X0, [X0+3536]
	028 Call 0x1C17CF4
	029 Move X0, 0x2364000
	030 Move X0, [X0+2904]
	031 Call 0x1C17CF4
	032 Move X0, 0x2364000
	033 Move X0, [X0+2912]
	034 Call 0x1C17CF4
	035 Move X0, 0x2364000
	036 Move X0, [X0+3544]
	037 Call 0x1C17CF4
	038 Move X0, 0x2364000
	039 Move X0, [X0+3552]
	040 Call 0x1C17CF4
	041 Move X0, 0x2361000
	042 Move X0, [X0+1432]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X20+2557], W8
	046 Move X0, [X22]
	047 Move [X31+40], X31
	048 Move [X31+24], X31
	049 Move X20, [X19+424]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X20
	055 Move X1, X31
	056 Move X2, X31
	057 Call Object.op_Inequality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {75}
	062 Move X0, [X19+424]
	063 Compare X0, 0
	064 JumpIfEqual {470}
	065 Move X1, X31
	066 Call Transform.get_position, X0
	067 Move X8, 0x2364000
	068 Move X8, [X8+2904]
	069 Add X0, X31, 0
	070 Move [X31], X31
	071 Move [X31+8], X31
	072 Move X1, [X8]
	073 Call Nullable`1<Vector3>..ctor, X0, X1
	074 Move W23, [X31]
	075 Move W23, W31
	076 Move X0, [X22]
	077 Move X20, [X19+424]
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {82}
	081 Call 0x1C17DFC
	082 Move X0, X20
	083 Move X1, X31
	084 Move X2, X31
	085 Call Object.op_Inequality, X0, X1
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {104}
	090 Move X0, [X19+424]
	091 Compare X0, 0
	092 JumpIfEqual {470}
	093 Move X1, X31
	094 Call Transform.get_rotation, X0
	095 Move X8, 0x2364000
	096 Move X8, [X8+2912]
	097 Add X0, X31, 0
	098 Move [X31], X31
	099 Move [X31+8], X31
	100 Move [X31+16], W31
	101 Move X1, [X8]
	102 Call Nullable`1<Quaternion>..ctor, X0, X1
	103 Move W24, [X31]
	104 Move W24, W31
	105 Move X20, [X19+56]
	106 Move X0, X19
	107 Call GrabbableItem.get_stuckAnchorId, X0
	108 Compare X20, 0
	109 JumpIfEqual {470}
	110 And X1, X0, 0
	111 Move X0, X20
	112 Move X2, X31
	113 Call NetworkRunner.Exists, X0, X1
	114 Move TEMP, X0
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfNotEqual {227}
	118 Move X20, [X19+56]
	119 Move X0, X19
	120 Call GrabbableItem.get_stuckAnchorId, X0
	121 Compare X20, 0
	122 JumpIfEqual {470}
	123 And X1, X0, 0
	124 Add X2, X31, 40
	125 Move X0, X20
	126 Move X3, X31
	127 Call NetworkRunner.TryFindObject, X0, X1, X2
	128 Move TEMP, X0
	129 And TEMP, TEMP, 1
	130 Compare TEMP, 1
	131 JumpIfNotEqual {227}
	132 Move X0, [X31+40]
	133 Compare X0, 0
	134 JumpIfEqual {470}
	135 Move X1, X31
	136 Call Component.get_transform, X0
	137 Move [X19+424], X0
	138 Move X20, X0
	139 Move X0, [X22]
	140 Move W8, [X0+224]
	141 Compare W8, 0
	142 JumpIfNotEqual {144}
	143 Call 0x1C17DFC
	144 Move X0, X20
	145 Move X1, X31
	146 Move X2, X31
	147 Call Object.op_Inequality, X0, X1
	148 Move TEMP, X0
	149 And TEMP, TEMP, 1
	150 Compare TEMP, 1
	151 JumpIfNotEqual {227}
	152 Move X0, [X19+424]
	153 Compare X0, 0
	154 JumpIfEqual {470}
	155 Move X8, 0x2364000
	156 Move X8, [X8+3528]
	157 Add X1, X31, 24
	158 Move X2, [X8]
	159 Call 0x21A5990, X0, X1
	160 Move TEMP, X0
	161 And TEMP, TEMP, 1
	162 Compare TEMP, 1
	163 JumpIfNotEqual {278}
	164 Move X0, [X22]
	165 Move X20, [X31+24]
	166 Move X21, [X19+432]
	167 Move W8, [X0+224]
	168 Compare W8, 0
	169 JumpIfNotEqual {171}
	170 Call 0x1C17DFC
	171 Move X0, X20
	172 Move X1, X21
	173 Move X2, X31
	174 Call Object.op_Inequality, X0, X1
	175 Move TEMP, X0
	176 And TEMP, TEMP, 1
	177 Compare TEMP, 1
	178 JumpIfNotEqual {278}
	179 Move X0, [X22]
	180 Move X20, [X19+432]
	181 Move W8, [X0+224]
	182 Compare W8, 0
	183 JumpIfNotEqual {185}
	184 Call 0x1C17DFC
	185 Move X0, X20
	186 Move X1, X31
	187 Move X2, X31
	188 Call Object.op_Inequality, X0, X1
	189 Move TEMP, X0
	190 And TEMP, TEMP, 1
	191 Compare TEMP, 1
	192 JumpIfNotEqual {431}
	193 Move X25, [X19+432]
	194 Compare X25, 0
	195 JumpIfEqual {470}
	196 Move X26, 0x2364000
	197 Move X20, [X25+128]
	198 Move X26, [X26+3520]
	199 Move X0, [X26]
	200 Call 0x1C17F10
	201 Move X8, 0x2364000
	202 Move X8, [X8+3536]
	203 Move X1, X19
	204 Move X3, X31
	205 Move X21, X0
	206 Move X2, [X8]
	207 Call Action`1<Object>..ctor, X0, X1, X2
	208 Move X0, X20
	209 Move X1, X21
	210 Move X2, X31
	211 Call Delegate.Remove, X0, X1
	212 Compare X0, 0
	213 JumpIfEqual {430}
	214 Move X21, [X26]
	215 Move X20, X0
	216 Move X1, X21
	217 Call 0x1C17E00
	218 Compare X0, 0
	219 JumpIfEqual {466}
	220 Move [X25+128], X0
	221 Move X21, [X26]
	222 Move X0, X20
	223 Move X1, X21
	224 Call 0x1C17E00
	225 Compare X0, 0
	226 JumpIfNotEqual {431}
	227 Move [X19+424], X31
	228 Move X0, [X22]
	229 Move X20, [X19+432]
	230 Move W8, [X0+224]
	231 Compare W8, 0
	232 JumpIfNotEqual {234}
	233 Call 0x1C17DFC
	234 Move X0, X20
	235 Move X1, X31
	236 Move X2, X31
	237 Call Object.op_Inequality, X0, X1
	238 Move TEMP, X0
	239 And TEMP, TEMP, 1
	240 Compare TEMP, 1
	241 JumpIfNotEqual {277}
	242 Move X25, [X19+432]
	243 Compare X25, 0
	244 JumpIfEqual {470}
	245 Move X26, 0x2364000
	246 Move X20, [X25+128]
	247 Move X26, [X26+3520]
	248 Move X0, [X26]
	249 Call 0x1C17F10
	250 Move X8, 0x2364000
	251 Move X8, [X8+3536]
	252 Move X1, X19
	253 Move X3, X31
	254 Move X21, X0
	255 Move X2, [X8]
	256 Call Action`1<Object>..ctor, X0, X1, X2
	257 Move X0, X20
	258 Move X1, X21
	259 Move X2, X31
	260 Call Delegate.Remove, X0, X1
	261 Compare X0, 0
	262 JumpIfEqual {276}
	263 Move X21, [X26]
	264 Move X20, X0
	265 Move X1, X21
	266 Call 0x1C17E00
	267 Compare X0, 0
	268 JumpIfEqual {466}
	269 Move [X25+128], X0
	270 Move X21, [X26]
	271 Move X0, X20
	272 Move X1, X21
	273 Call 0x1C17E00
	274 Compare X0, 0
	275 JumpIfNotEqual {277}
	276 Move [X25+128], X31
	277 Move [X19+432], X31
	278 Move X21, 0x2361000
	279 Move X0, [X19+64]
	280 Move X21, [X21+1440]
	281 Move X25, 0x2646000
	282 Compare X0, 0
	283 JumpIfEqual {369}
	284 Move W8, [X0+96]
	285 Move TEMP, X8
	286 And TEMP, TEMP, 2
	287 Compare TEMP, 2
	288 JumpIfEqual {369}
	289 Move X1, X31
	290 Call NetworkObject.get_HasStateAuthority, X0
	291 Move TEMP, X0
	292 And TEMP, TEMP, 1
	293 Compare TEMP, 1
	294 JumpIfNotEqual {369}
	295 Move X0, X19
	296 Call GrabbableItem.UpdateTransformFromStuckAnchor, X0
	297 Move W8, [X25+1923]
	298 Move X20, [X19+360]
	299 Compare W8, 0
	300 JumpIfNotEqual {306}
	301 Move X0, 0x2361000
	302 Move X0, [X0+1440]
	303 Call 0x1C17CF4
	304 Move W8, 1
	305 Move [X25+1923], W8
	306 Compare X20, 0
	307 JumpIfEqual {470}
	308 Move X8, [X21]
	309 Move X0, X20
	310 Move X1, X31
	311 Move X8, [X8+184]
	312 Move S1, [X8+4]
	313 Move S2, [X8+8]
	314 Move V0, [X8]
	315 Call Rigidbody.set_velocity, X0, X1
	316 Move W8, [X25+1923]
	317 Move X20, [X19+360]
	318 Compare W8, 0
	319 JumpIfNotEqual {325}
	320 Move X0, 0x2361000
	321 Move X0, [X0+1440]
	322 Call 0x1C17CF4
	323 Move W8, 1
	324 Move [X25+1923], W8
	325 Compare X20, 0
	326 JumpIfEqual {470}
	327 Move X8, [X21]
	328 Move X0, X20
	329 Move X1, X31
	330 Move X8, [X8+184]
	331 Move S1, [X8+4]
	332 Move S2, [X8+8]
	333 Move V0, [X8]
	334 Call Rigidbody.set_angularVelocity, X0, X1
	335 Move X0, [X22]
	336 Move X20, [X19+424]
	337 Move W8, [X0+224]
	338 Compare W8, 0
	339 JumpIfNotEqual {341}
	340 Call 0x1C17DFC
	341 Move X0, X20
	342 Move X1, X31
	343 Move X2, X31
	344 Call Object.op_Equality, X0, X1
	345 Move TEMP, X0
	346 And TEMP, TEMP, 1
	347 Compare TEMP, 1
	348 JumpIfNotEqual {369}
	349 Move X0, [X22]
	350 Move X20, [X19+376]
	351 Move W8, [X0+224]
	352 Compare W8, 0
	353 JumpIfNotEqual {355}
	354 Call 0x1C17DFC
	355 Move X0, X20
	356 Move X1, X31
	357 Move X2, X31
	358 Call Object.op_Inequality, X0, X1
	359 Compare W24, 0
	360 JumpIfEqual {369}
	361 Compare W23, 0
	362 JumpIfEqual {369}
	363 Move TEMP, X0
	364 And TEMP, TEMP, 1
	365 Compare TEMP, 1
	366 JumpIfNotEqual {369}
	367 Move X0, X19
	368 Call GrabbableItem.SnapToFollow, X0
	369 Move X8, [X19+528]
	370 Compare X8, 0
	371 JumpIfEqual {377}
	372 Move X1, [X19+424]
	373 Move X9, [X8+24]
	374 Move X0, [X8+64]
	375 Move X2, [X8+40]
	376 NotImplemented "Instruction BLR not yet implemented."
	377 Move X0, X19
	378 Call GrabbableItem.UpdateUseGravity, X0
	379 Move X0, X19
	380 Call GrabbableItem.UpdateIsFrozen, X0
	381 Move W8, [X25+1923]
	382 Move X20, [X19+360]
	383 Compare W8, 0
	384 JumpIfNotEqual {390}
	385 Move X0, 0x2361000
	386 Move X0, [X0+1440]
	387 Call 0x1C17CF4
	388 Move W8, 1
	389 Move [X25+1923], W8
	390 Compare X20, 0
	391 JumpIfEqual {470}
	392 Move X8, [X21]
	393 Move X0, X20
	394 Move X1, X31
	395 Move X8, [X8+184]
	396 Move S1, [X8+4]
	397 Move S2, [X8+8]
	398 Move V0, [X8]
	399 Call Rigidbody.set_velocity, X0, X1
	400 Move W8, [X25+1923]
	401 Move X19, [X19+360]
	402 Compare W8, 0
	403 JumpIfNotEqual {409}
	404 Move X0, 0x2361000
	405 Move X0, [X0+1440]
	406 Call 0x1C17CF4
	407 Move W8, 1
	408 Move [X25+1923], W8
	409 Compare X19, 0
	410 JumpIfEqual {470}
	411 Move X8, [X21]
	412 Move X0, X19
	413 Move X1, X31
	414 Move X8, [X8+184]
	415 Move S1, [X8+4]
	416 Move S2, [X8+8]
	417 Move V0, [X8]
	418 Call Rigidbody.set_angularVelocity, X0, X1
	419 Move X20, [X31+96]
	420 Move X19, [X31+104]
	421 Move X22, [X31+80]
	422 Move X21, [X31+88]
	423 Move X24, [X31+64]
	424 Move X23, [X31+72]
	425 Move X26, [X31+48]
	426 Move X25, [X31+56]
	427 Move X30, [X31+32]
	428 Add X31, X31, 112
	429 Return 
	430 Move [X25+128], X31
	431 Move X25, [X31+24]
	432 Move [X19+432], X25
	433 Compare X25, 0
	434 JumpIfEqual {470}
	435 Move X26, 0x2364000
	436 Move X20, [X25+128]
	437 Move X26, [X26+3520]
	438 Move X0, [X26]
	439 Call 0x1C17F10
	440 Move X8, 0x2364000
	441 Move X8, [X8+3536]
	442 Move X1, X19
	443 Move X3, X31
	444 Move X21, X0
	445 Move X2, [X8]
	446 Call Action`1<Object>..ctor, X0, X1, X2
	447 Move X0, X20
	448 Move X1, X21
	449 Move X2, X31
	450 Call Delegate.Combine, X0, X1
	451 Compare X0, 0
	452 JumpIfEqual {469}
	453 Move X21, [X26]
	454 Move X20, X0
	455 Move X1, X21
	456 Call 0x1C17E00
	457 Compare X0, 0
	458 JumpIfEqual {466}
	459 Move [X25+128], X0
	460 Move X21, [X26]
	461 Move X0, X20
	462 Move X1, X21
	463 Call 0x1C17E00
	464 Compare X0, 0
	465 JumpIfNotEqual {278}
	466 Move X0, X20
	467 Move X1, X21
	468 Call 0x1C181E0
	469 Move [X25+128], X31
	470 Call 0x1C17F20

Method: System.Void OnStuckAnchorDespawned(AnimalCompany.StickyAnchor stickyAnchor)

Disassembly:
	0x01D93F24 TBZ X0, 0x0, 0x1D93F60
	0x01D93F28 MOV X0, X19
	0x01D93F2C BL 0x1D92FE0
	0x01D93F30 LDRB W8, [X19 + 0x148]
	0x01D93F34 CBZ W8, 0x1D93F60
	0x01D93F38 LDR X8, [X19 + 0x80]
	0x01D93F3C CBZ X8, 0x1D94000
	0x01D93F40 LDR X0, [X19 + 0x38]
	0x01D93F44 MOVZ W8, 0x43960000
	0x01D93F48 FMOV S0, W8
	0x01D93F4C MOV X1, X31
	0x01D93F50 BL 0x1E91E68
	0x01D93F54 AND X1, X0, 0x0
	0x01D93F58 MOV X0, X19
	0x01D93F5C BL 0x1D8ED4C
	0x01D93F60 MOV X0, X19
	0x01D93F64 BL 0x1D90054
	0x01D93F68 MOV X0, X19
	0x01D93F6C BL 0x1D915D8
	0x01D93F70 MOV X0, X19
	0x01D93F74 BL 0x1D92658
	0x01D93F78 LDR X8, [X19 + 0x80]
	0x01D93F7C CBZ X8, 0x1D94000
	0x01D93F80 LDR W8, [X8 + 0x28]
	0x01D93F84 CMP W8, 0x2
	0x01D93F88 B.NE 0x1D93FC8
	0x01D93F8C ADRP X21, 0x2363000
	0x01D93F90 LDR X21, [X21 + 0xD18]
	0x01D93F94 LDR X0, [X21]
	0x01D93F98 LDR W8, [X0 + 0xE0]
	0x01D93F9C CBNZ W8, 0x1D93FA8
	0x01D93FA0 BL 0x1C16DFC
	0x01D93FA4 LDR X0, [X21]
	0x01D93FA8 LDR X8, [X0 + 0xB8]
	0x01D93FAC LDR X0, [X8]
	0x01D93FB0 CBZ X0, 0x1D94000
	0x01D93FB4 ADRP X8, 0x2363000
	0x01D93FB8 LDR X8, [X8 + 0xE00]
	0x01D93FBC MOV X1, X19
	0x01D93FC0 LDR X2, [X8]
	0x01D93FC4 BL 0x2DBEF30
	0x01D93FC8 MOVZ W8, 0x101
	0x01D93FCC MOVZ W9, 0x1
	0x01D93FD0 STRH W8, [X19 + 0x1B8]
	0x01D93FD4 STRB W9, [X19 + 0x1BA]
	0x01D93FD8 LDR X8, [X20 + 0x28]
	0x01D93FDC LDR X9, [X31 + 0x48]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2646000
	006 Move W8, [X21+2558]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2364000
	014 Move X0, [X0+920]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2558], W8
	018 Move X0, [X19+64]
	019 Compare X0, 0
	020 JumpIfEqual {61}
	021 Move W8, [X0+96]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 2
	024 Compare TEMP, 2
	025 JumpIfEqual {61}
	026 Move X1, X31
	027 Call NetworkObject.get_HasStateAuthority, X0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {61}
	032 Compare X20, 0
	033 JumpIfEqual {66}
	034 Move X8, [X20+64]
	035 Compare X8, 0
	036 JumpIfEqual {66}
	037 Move X8, [X8+32]
	038 Compare X8, 0
	039 JumpIfEqual {41}
	040 Move W21, [X8]
	041 Move W21, W31
	042 Move X0, X19
	043 Call GrabbableItem.get_stuckAnchorId, X0
	044 Move X8, 0x2364000
	045 Move X8, [X8+920]
	046 Move X20, X0
	047 Move X8, [X8]
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {53}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X0, X19
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 Call GrabbableItem.ResetStuckAnchor, X0
	060 Return 
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Return 
	066 Call 0x1C17F20

Method: System.Void HandleGrabbedChanged()

Disassembly:
	0x01D91054 ADRP X22, 0x2647000
	0x01D91058 LDRB W8, [X22 + 0x783]
	0x01D9105C LDR X21, [X19 + 0xD0]
	0x01D91060 CBNZ W8, 0x1D91078
	0x01D91064 ADRP X0, 0x2362000
	0x01D91068 LDR X0, [X0 + 0x5A0]
	0x01D9106C BL 0x1C16CF4
	0x01D91070 MOVZ W8, 0x1
	0x01D91074 STRB W8, [X22 + 0x783]
	0x01D91078 CBZ X21, 0x1D913B8
	0x01D9107C ADRP X8, 0x2362000
	0x01D91080 LDR X8, [X8 + 0x5A0]
	0x01D91084 MOV X0, X21
	0x01D91088 LDR X8, [X8]
	0x01D9108C LDR X8, [X8 + 0xB8]
	0x01D91090 LDP S1, S2, [X8 + 0x4]
	0x01D91094 LDR V0, [X8]
	0x01D91098 B 0x1D91210
	0x01D9109C LDR X0, [X24]
	0x01D910A0 LDR X21, [X19 + 0xA8]
	0x01D910A4 LDR W8, [X0 + 0xE0]
	0x01D910A8 CBNZ W8, 0x1D910B0
	0x01D910AC BL 0x1C16DFC
	0x01D910B0 MOV X0, X21
	0x01D910B4 MOV X1, X31
	0x01D910B8 MOV X2, X31
	0x01D910BC BL 0x3C354F8
	0x01D910C0 TBZ X0, 0x0, 0x1D911FC
	0x01D910C4 MOV X0, X19
	0x01D910C8 MOV X1, X31
	0x01D910CC BL 0x3C32E90
	0x01D910D0 CBZ X0, 0x1D913B8
	0x01D910D4 ADD X8, X31, 0x210
	0x01D910D8 MOV X1, X31
	0x01D910DC BL 0x3C3FF0C
	0x01D910E0 LDP V0, V1, [X31 + 0x210]
	0x01D910E4 LDP V2, V3, [X31 + 0x230]
	0x01D910E8 STP V0, V1, [X31 + 0x250]
	0x01D910EC STP V2, V3, [X31 + 0x270]
	0x01D910F0 LDR X0, [X19 + 0xA8]
	0x01D910F4 CBZ X0, 0x1D913B8
	0x01D910F8 ADD X8, X31, 0x210
	0x01D910FC MOV X1, X31
	0x01D91100 BL 0x3C3F1C8
	0x01D91104 LDP V0, V1, [X31 + 0x210]
	0x01D91108 LDP V2, V3, [X31 + 0x230]
	0x01D9110C ADD X8, X31, 0x210
	0x01D91110 ADD X0, X31, 0xD0
	0x01D91114 STP V0, V1, [X31 + 0x90]
	0x01D91118 LDP V0, V1, [X31 + 0x250]
	0x01D9111C STP V2, V3, [X31 + 0xB0]
	0x01D91120 LDP V2, V3, [X31 + 0x270]
	0x01D91124 ADD X1, X31, 0x90
	0x01D91128 MOV X2, X31
	0x01D9112C STP V0, V1, [X31 + 0xD0]
	0x01D91130 STP V2, V3, [X31 + 0xF0]
	0x01D91134 BL 0x3C27F74
	0x01D91138 LDP V0, V1, [X31 + 0x210]
	0x01D9113C LDP V2, V3, [X31 + 0x230]
	0x01D91140 ADD X0, X31, 0x2D0
	0x01D91144 MOV X1, X31
	0x01D91148 STP V0, V1, [X31 + 0x2D0]
	0x01D9114C STP V2, V3, [X31 + 0x2F0]
	0x01D91150 BL 0x3C26F30
	0x01D91154 MOV X0, X31
	0x01D91158 BL 0x3C2A260
	0x01D9115C LDR X21, [X19 + 0xD0]
	0x01D91160 ADD X0, X31, 0x2D0
	0x01D91164 MOV X1, X31
	0x01D91168 MOV V8.16B, V0.16B
	0x01D9116C MOV V9.16B, V1.16B
	0x01D91170 MOV V10.16B, V2.16B
	0x01D91174 MOV V11.16B, V3.16B
	0x01D91178 BL 0x3C28174
	0x01D9117C FNEG S4, S0
	0x01D91180 FNEG S5, S1
	0x01D91184 FNEG S6, S2
	0x01D91188 MOV V0.16B, V8.16B
	0x01D9118C MOV V1.16B, V9.16B
	0x01D91190 MOV V2.16B, V10.16B
	0x01D91194 MOV V3.16B, V11.16B
	0x01D91198 MOV X0, X31
	0x01D9119C BL 0x3C2A9FC
	0x01D911A0 CBZ X21, 0x1D913B8
	0x01D911A4 LDR V3, [X19 + 0x254]
	0x01D911A8 LDR V4, [X19 + 0x250]
	0x01D911AC LDR V5, [X19 + 0x24C]
	0x01D911B0 FADD S2, S2, S3
	0x01D911B4 FADD S1, S1, S4
	0x01D911B8 FADD S0, S0, S5
	0x01D911BC MOV X0, X21
	0x01D911C0 MOV X1, X31
	0x01D911C4 BL 0x3C3EC04
	0x01D911C8 LDR X0, [X19 + 0xD0]
	0x01D911CC CBZ X0, 0x1D913B8
	0x01D911D0 MOV V0.16B, V8.16B
	0x01D911D4 MOV V1.16B, V9.16B
	0x01D911D8 MOV V2.16B, V10.16B
	0x01D911DC MOV V3.16B, V11.16B
	0x01D911E0 B 0x1D9125C
	0x01D911E4 LDR X0, [X19 + 0xD0]
	0x01D911E8 CBZ X0, 0x1D913B8
	0x01D911EC LDR V2, [X19 + 0x260]
	0x01D911F0 LDR V1, [X19 + 0x25C]
	0x01D911F4 LDR V0, [X19 + 0x258]
	0x01D911F8 B 0x1D91210
	0x01D911FC LDR X0, [X19 + 0xD0]
	0x01D91200 CBZ X0, 0x1D913B8
	0x01D91204 LDR V2, [X19 + 0x254]
	0x01D91208 LDR V1, [X19 + 0x250]
	0x01D9120C LDR V0, [X19 + 0x24C]
	0x01D91210 MOV X1, X31
	0x01D91214 BL 0x3C3EC04
	0x01D91218 ADRP X22, 0x2647000
	0x01D9121C LDRB W8, [X22 + 0x793]
	0x01D91220 LDR X21, [X19 + 0xD0]
	0x01D91224 CBNZ W8, 0x1D9123C
	0x01D91228 ADRP X0, 0x2363000
	0x01D9122C LDR X0, [X0 + 0x5A8]
	0x01D91230 BL 0x1C16CF4
	0x01D91234 MOVZ W8, 0x1
	0x01D91238 STRB W8, [X22 + 0x793]
	0x01D9123C CBZ X21, 0x1D913B8
	0x01D91240 ADRP X8, 0x2363000
	0x01D91244 LDR X8, [X8 + 0x5A8]
	0x01D91248 MOV X0, X21
	0x01D9124C LDR X8, [X8]
	0x01D91250 LDR X8, [X8 + 0xB8]
	0x01D91254 LDP S2, S3, [X8 + 0x8]
	0x01D91258 LDP S0, S1, [X8]
	0x01D9125C MOV X1, X31
	0x01D91260 BL 0x3C3F8B8
	0x01D91264 LDR X21, [X19 + 0x168]
	0x01D91268 MOV X0, X19
	0x01D9126C MOV X1, X31
	0x01D91270 BL 0x3C32E90
	0x01D91274 CBZ X0, 0x1D913B8
	0x01D91278 MOV X1, X31
	0x01D9127C BL 0x3C3F58C
	0x01D91280 CBZ X21, 0x1D913B8
	0x01D91284 MOV X0, X21
	0x01D91288 MOV X1, X31
	0x01D9128C BL 0x3C8F014
	0x01D91290 LDR X21, [X19 + 0x168]
	0x01D91294 MOV X0, X19
	0x01D91298 MOV X1, X31
	0x01D9129C BL 0x3C32E90
	0x01D912A0 CBZ X0, 0x1D913B8
	0x01D912A4 MOV X1, X31
	0x01D912A8 BL 0x3C3DEB4
	0x01D912AC CBZ X21, 0x1D913B8
	0x01D912B0 MOV X0, X21
	0x01D912B4 MOV X1, X31
	0x01D912B8 BL 0x3C8F148
	0x01D912BC MOV X0, X19
	0x01D912C0 MOV X1, X31
	0x01D912C4 BL 0x3C32E90
	0x01D912C8 CBZ X0, 0x1D913B8
	0x01D912CC MOV X1, X31
	0x01D912D0 BL 0x3C3F58C
	0x01D912D4 LDR X0, [X19 + 0xD0]
	0x01D912D8 STR S0, [X19 + 0x194]
	0x01D912DC STR S1, [X19 + 0x198]
	0x01D912E0 STR S2, [X19 + 0x19C]
	0x01D912E4 CBZ X0, 0x1D913B8
	0x01D912E8 MOV X1, X31
	0x01D912EC BL 0x3C3EB78
	0x01D912F0 LDR X0, [X19 + 0xD0]
	0x01D912F4 CBZ X0, 0x1D913B8
	0x01D912F8 MOV X1, X31
	0x01D912FC MOV V8.16B, V0.16B
	0x01D91300 MOV V9.16B, V1.16B
	0x01D91304 MOV V10.16B, V2.16B
	0x01D91308 BL 0x3C3F830
	0x01D9130C ADD X1, X31, 0x3D8
	0x01D91310 MOV X0, X19
	0x01D91314 STR S8, [X31 + 0x3D8]
	0x01D91318 STR S9, [X31 + 0x3DC]
	0x01D9131C STR S10, [X31 + 0x3E0]
	0x01D91320 STR S0, [X31 + 0x3E4]
	0x01D91324 STR S1, [X31 + 0x3E8]
	0x01D91328 STR S2, [X31 + 0x3EC]
	0x01D9132C STR S3, [X31 + 0x3F0]
	0x01D91330 BL 0x1D91404
	0x01D91334 MOV X0, X19
	0x01D91338 BL 0x1D8A3AC
	0x01D9133C LDR X0, [X19 + 0x40]
	0x01D91340 CBZ X0, 0x1D91358
	0x01D91344 LDRB W8, [X0 + 0x60]
	0x01D91348 TBNZ X8, 0x1, 0x1D91358
	0x01D9134C MOV X1, X31
	0x01D91350 BL 0x1E93668
	0x01D91354 TBNZ X0, 0x0, 0x1D90708
	0x01D91358 LDR X8, [X19 + 0x38]
	0x01D9135C CBZ X8, 0x1D913B8
	0x01D91360 LDR W8, [X8 + 0x188]
	0x01D91364 CMP W8, 0x2
	0x01D91368 B.NE 0x1D91380
	0x01D9136C LDR X0, [X19 + 0x40]
	0x01D91370 CBZ X0, 0x1D913B8
	0x01D91374 MOV X1, X31
	0x01D91378 BL 0x1E94414
	0x01D9137C B 0x1D90708
	0x01D91380 LDR X0, [X24]
	0x01D91384 LDR X21, [X19 + 0x170]
	0x01D91388 LDR W8, [X0 + 0xE0]
	0x01D9138C CBNZ W8, 0x1D91394
	0x01D91390 BL 0x1C16DFC
	0x01D91394 MOV X0, X21
	0x01D91398 MOV X1, X31
	0x01D9139C MOV X2, X31
	0x01D913A0 BL 0x3C354F8
	0x01D913A4 TBZ X0, 0x0, 0x1D90708
	0x01D913A8 LDR X0, [X19 + 0x170]
	0x01D913AC CBZ X0, 0x1D913B8
	0x01D913B0 MOV W1, W31
	0x01D913B4 B 0x1D906E8
	0x01D913B8 BL 0x1C16F20
	0x01D913BC BL 0x1C16F28
	0x01D913C0 BL 0x3EB1B20
	0x01D913C4 STP X30, X19, [X31 - 0x10]!
	0x01D913C8 CMP W1, 0x2
	0x01D913CC MOV X19, X0
	0x01D913D0 B.EQ 0x1D913DC
	0x01D913D4 CMP W1, 0x1
	0x01D913D8 B.NE 0x1D913EC
	0x01D913DC LDR X0, [X19 + 0x38]
	0x01D913E0 MOV X1, X31
	0x01D913E4 BL 0x1E91E68
	0x01D913E8 B 0x1D913F4
	0x01D913EC MOV X0, X31
	0x01D913F0 BL 0x1E91B08
	0x01D913F4 AND X1, X0, 0x0
	0x01D913F8 MOV X0, X19
	0x01D913FC LDP X30, X19, [X31], #0x10
	0x01D91400 B 0x1D8ED4C
	0x01D91404 SUB X31, X31, 0x60
	0x01D91408 STR X30, [X31 + 0x30]
	0x01D9140C STP X22, X21, [X31 + 0x40]
	0x01D91410 STP X20, X19, [X31 + 0x50]
	0x01D91414 MRS X22, 0xC000
	0x01D91418 LDR X8, [X22 + 0x28]
	0x01D9141C ADRP X21, 0x2647000
	0x01D91420 MOV X20, X1
	0x01D91424 MOV X19, X0
	0x01D91428 STR X8, [X31 + 0x28]
	0x01D9142C LDRB W8, [X21 + 0x9F4]
	0x01D91430 TBNZ X8, 0x0, 0x1D91454
	0x01D91434 ADRP X0, 0x2365000
	0x01D91438 LDR X0, [X0 + 0xA78]
	0x01D9143C BL 0x1C16CF4
	0x01D91440 ADRP X0, 0x2365000
	0x01D91444 LDR X0, [X0 + 0xDA0]
	0x01D91448 BL 0x1C16CF4
	0x01D9144C MOVZ W8, 0x1
	0x01D91450 STRB W8, [X21 + 0x9F4]
	0x01D91454 LDRB W8, [X19 + 0x58]
	0x01D91458 CBZ W8, 0x1D91480
	0x01D9145C STRB W31, [X19 + 0x58]
	0x01D91460 LDUR V0, [X20 + 0xC]
	0x01D91464 LDR V1, [X20]
	0x01D91468 ADD X1, X31, 0x0
	0x01D9146C MOV X0, X19
	0x01D91470 STUR V0, [X31 + 0xC]
	0x01D91474 STR V1, [X31]
	0x01D91478 BL 0x1D8EA1C
	0x01D9147C B 0x1D915AC
	0x01D91480 ADRP X21, 0x2365000
	0x01D91484 LDR X21, [X21 + 0xA78]
	0x01D91488 LDR X0, [X21]
	0x01D9148C LDR W8, [X0 + 0xE0]
	0x01D91490 CBNZ W8, 0x1D91498
	0x01D91494 BL 0x1C16DFC
	0x01D91498 MOV X0, X19
	0x01D9149C MOV X1, X31
	0x01D914A0 BL 0x1E77B08
	0x01D914A4 LDR X0, [X19 + 0x38]
	0x01D914A8 CBZ X0, 0x1D915D0
	0x01D914AC MOV X1, X31
	0x01D914B0 BL 0x1E9E538
	0x01D914B4 CMP W0, 0x4
	0x01D914B8 B.EQ 0x1D915AC
	0x01D914BC LDR X0, [X19 + 0x40]
	0x01D914C0 CBZ X0, 0x1D915D0
	0x01D914C4 MOV X1, X31
	0x01D914C8 BL 0x1E94078
	0x01D914CC ANDS W31, W0, 0x7
	0x01D914D0 B.EQ 0x1D91528
	0x01D914D4 TBNZ X0, 0x0, 0x1D91460
	0x01D914D8 LDR X8, [X19 + 0x38]
	0x01D914DC CBZ X8, 0x1D915D0
	0x01D914E0 LDR X0, [X8 + 0x50]
	0x01D914E4 CBZ X0, 0x1D915D0
	0x01D914E8 MOV X1, X31
	0x01D914EC BL 0x1EC4D00
	0x01D914F0 TBZ X0, 0x0, 0x1D915AC
	0x01D914F4 LDR X8, [X19 + 0x38]
	0x01D914F8 CBZ X8, 0x1D915D0
	0x01D914FC LDR X0, [X8 + 0x50]
	0x01D91500 MOVZ W1, 0x24
	0x01D91504 MOV X2, X31
	0x01D91508 BL 0x1ED9318
	0x01D9150C LDR X8, [X19 + 0x40]
	0x01D91510 CBZ X8, 0x1D915D0
	0x01D91514 LDR X8, [X8 + 0x20]
	0x01D91518 MOV X21, X0
	0x01D9151C CBZ X8, 0x1D9155C
	0x01D91520 LDR W0, [X8]
	0x01D91524 B 0x1D91560
	0x01D91528 LDR X0, [X21]
	0x01D9152C LDR X19, [X19 + 0x40]
	0x01D91530 LDR W8, [X0 + 0xE0]
	0x01D91534 CBNZ W8, 0x1D9153C
	0x01D91538 BL 0x1C16DFC
	0x01D9153C ADRP X8, 0x2365000
	0x01D91540 LDR X8, [X8 + 0xDA0]
	0x01D91544 MOVZ W2, 0x7
	0x01D91548 MOV X1, X19
	0x01D9154C MOV X3, X31
	0x01D91550 LDR X0, [X8]
	0x01D91554 BL 0x1E77B00
	0x01D91558 B 0x1D915AC
	0x01D9155C MOV X0, X31
	0x01D91560 LDR W1, [X19 + 0x68]
	0x01D91564 MOVZ W2, 0x3
	0x01D91568 MOV X3, X31
	0x01D9156C BL 0x1E9C23C
	0x01D91570 STUR X0, [X21 + 0x1C]
	0x01D91574 LDR V0, [X20]
	0x01D91578 LDR X8, [X20 + 0x10]
	0x01D9157C LDR W9, [X20 + 0x18]
	0x01D91580 STUR V0, [X21 + 0x24]
	0x01D91584 STUR X8, [X21 + 0x34]
	0x01D91588 STR W9, [X21 + 0x3C]
	0x01D9158C CBZ X21, 0x1D915D0
	0x01D91590 MOVZ W8, 0x120
	0x01D91594 STR W8, [X21 + 0xC]
	0x01D91598 LDR X0, [X19 + 0x38]
	0x01D9159C CBZ X0, 0x1D915D0
	0x01D915A0 MOV X1, X21
	0x01D915A4 MOV X2, X31
	0x01D915A8 BL 0x1EA1E24
	0x01D915AC LDR X8, [X22 + 0x28]
	0x01D915B0 LDR X9, [X31 + 0x28]
	0x01D915B4 CMP X8, X9
	0x01D915B8 B.NE 0x1D915D4
	0x01D915BC LDP X20, X19, [X31 + 0x50]
	0x01D915C0 LDP X22, X21, [X31 + 0x40]
	0x01D915C4 LDR X30, [X31 + 0x30]
	0x01D915C8 ADD X31, X31, 0x60
	0x01D915CC RET
	0x01D915D0 BL 0x1C16F20
	0x01D915D4 BL 0x3EB1B20
	0x01D915D8 SUB X31, X31, 0x30
	0x01D915DC STR X30, [X31 + 0x10]
	0x01D915E0 STP X20, X19, [X31 + 0x20]
	0x01D915E4 ADRP X20, 0x2647000
	0x01D915E8 LDRB W8, [X20 + 0x9F5]
	0x01D915EC MOV X19, X0
	0x01D915F0 TBNZ X8, 0x0, 0x1D91608
	0x01D915F4 ADRP X0, 0x2365000
	0x01D915F8 LDR X0, [X0 + 0xDA8]
	0x01D915FC BL 0x1C16CF4
	0x01D91600 MOVZ W8, 0x1
	0x01D91604 STRB W8, [X20 + 0x9F5]
	0x01D91608 STR X31, [X31 + 0x8]
	0x01D9160C LDR X8, [X19 + 0x1E8]
	0x01D91610 CBZ X8, 0x1D91624
	0x01D91614 LDR X9, [X8 + 0x18]
	0x01D91618 LDR X0, [X8 + 0x40]
	0x01D9161C LDR X1, [X8 + 0x28]
	0x01D91620 BLR X9
	0x01D91624 MOVZ W1, 0x1
	0x01D91628 MOV X0, X19
	0x01D9162C BL 0x1D91694
	0x01D91630 MOV X0, X19
	0x01D91634 BL 0x1D8E6F8
	0x01D91638 STR X0, [X31 + 0x18]
	0x01D9163C ADD X0, X31, 0x18
	0x01D91640 MOV X1, X31
	0x01D91644 BL 0x1E74DE4
	0x01D91648 TBZ X0, 0x0, 0x1D9167C
	0x01D9164C LDR X20, [X19 + 0x38]
	0x01D91650 MOV X0, X19
	0x01D91654 BL 0x1D8E6F8
	0x01D91658 CBZ X20, 0x1D91690
	0x01D9165C ADRP X8, 0x2365000
	0x01D91660 LDR X8, [X8 + 0xDA8]
	0x01D91664 MOV X1, X0
	0x01D91668 ADD X2, X31, 0x8
	0x01D9166C MOV X0, X20
	0x01D91670 LDR X3, [X8]
	0x01D91674 BL 0x222BD98
	0x01D91678 B 0x1D91680
	0x01D9167C STR X31, [X19 + 0x160]
	0x01D91680 LDP X20, X19, [X31 + 0x20]
	0x01D91684 LDR X30, [X31 + 0x10]
	0x01D91688 ADD X31, X31, 0x30
	0x01D9168C RET
	0x01D91690 BL 0x1C16F20
	0x01D91694 STR X30, [X31 - 0x20]!
	0x01D91698 STP X20, X19, [X31 + 0x10]
	0x01D9169C MOV X19, X0
	0x01D916A0 TBZ X1, 0x0, 0x1D916AC
	0x01D916A4 MOVZ W8, 0x1
	0x01D916A8 STRB W8, [X19 + 0x1B8]
	0x01D916AC LDR X0, [X19 + 0xC8]
	0x01D916B0 CBZ X0, 0x1D91718
	0x01D916B4 MOV X1, X31
	0x01D916B8 BL 0x3C32ECC
	0x01D916BC MOV X20, X0
	0x01D916C0 MOV X0, X19
	0x01D916C4 BL 0x1D89D0C
	0x01D916C8 CBZ X20, 0x1D91718
	0x01D916CC AND W1, W0, 0x1
	0x01D916D0 MOV X0, X20
	0x01D916D4 MOV X2, X31
	0x01D916D8 BL 0x3C357B4
	0x01D916DC MOV X0, X19
	0x01D916E0 BL 0x1D918D4
	0x01D916E4 MOV X0, X19
	0x01D916E8 BL 0x1D91928
	0x01D916EC LDR X8, [X19 + 0x208]
	0x01D916F0 CBZ X8, 0x1D9170C
	0x01D916F4 LDR X2, [X8 + 0x18]
	0x01D916F8 LDR X0, [X8 + 0x40]
	0x01D916FC LDR X1, [X8 + 0x28]
	0x01D91700 LDP X20, X19, [X31 + 0x10]
	0x01D91704 LDR X30, [X31], #0x20
	0x01D91708 BR X2
	0x01D9170C LDP X20, X19, [X31 + 0x10]
	0x01D91710 LDR X30, [X31], #0x20
	0x01D91714 RET
	0x01D91718 BL 0x1C16F20
	0x01D9171C SUB X31, X31, 0x70
	0x01D91720 STR D10, [X31 + 0x30]
	0x01D91724 STP D9, D8, [X31 + 0x38]
	0x01D91728 STR X30, [X31 + 0x48]
	0x01D9172C STP X22, X21, [X31 + 0x50]
	0x01D91730 STP X20, X19, [X31 + 0x60]
	0x01D91734 MRS X21, 0xC000
	0x01D91738 LDR X8, [X21 + 0x28]
	0x01D9173C ADRP X22, 0x2647000
	0x01D91740 ADRP X20, 0x2362000
	0x01D91744 MOV X19, X0
	0x01D91748 STR X8, [X31 + 0x28]
	0x01D9174C LDRB W8, [X22 + 0x9F6]
	0x01D91750 LDR X20, [X20 + 0x598]
	0x01D91754 TBNZ X8, 0x0, 0x1D9176C
	0x01D91758 ADRP X0, 0x2362000
	0x01D9175C LDR X0, [X0 + 0x598]
	0x01D91760 BL 0x1C16CF4
	0x01D91764 MOVZ W8, 0x1
	0x01D91768 STRB W8, [X22 + 0x9F6]
	0x01D9176C LDR X0, [X20]
	0x01D91770 LDR X20, [X19 + 0x150]
	0x01D91774 LDR W8, [X0 + 0xE0]
	0x01D91778 CBNZ W8, 0x1D91780
	0x01D9177C BL 0x1C16DFC
	0x01D91780 MOV X0, X20
	0x01D91784 MOV X1, X31
	0x01D91788 MOV X2, X31
	0x01D9178C BL 0x3C3883C
	0x01D91790 TBNZ X0, 0x0, 0x1D917B8
	0x01D91794 LDR X8, [X19 + 0x150]
	0x01D91798 CBZ X8, 0x1D918C4
	0x01D9179C LDR X0, [X8 + 0x40]
	0x01D917A0 CBZ X0, 0x1D917B8
	0x01D917A4 LDRB W8, [X0 + 0x60]
	0x01D917A8 TBNZ X8, 0x1, 0x1D917B8
	0x01D917AC MOV X1, X31
	0x01D917B0 BL 0x1E93588
	0x01D917B4 TBNZ X0, 0x0, 0x1D91898
	0x01D917B8 LDR X20, [X19 + 0xD0]
	0x01D917BC ADD X8, X31, 0x8
	0x01D917C0 MOV X0, X19
	0x01D917C4 BL 0x1D8E9B0
	0x01D917C8 CBZ X20, 0x1D918C4
	0x01D917CC LDP S0, S1, [X31 + 0x8]
	0x01D917D0 LDR V2, [X31 + 0x10]
	0x01D917D4 MOV X0, X20
	0x01D917D8 MOV X1, X31
	0x01D917DC BL 0x3C3EC04
	0x01D917E0 LDR X20, [X19 + 0xD0]
	0x01D917E4 ADD X8, X31, 0x8
	0x01D917E8 MOV X0, X19
	0x01D917EC BL 0x1D8E9B0
	0x01D917F0 CBZ X20, 0x1D918C4
	0x01D917F4 LDP S0, S1, [X31 + 0x14]
	0x01D917F8 LDP S2, S3, [X31 + 0x1C]
	0x01D917FC MOV X0, X20
	0x01D91800 MOV X1, X31
	0x01D91804 BL 0x3C3F8B8
	0x01D91808 ADRP X20, 0x2647000
	0x01D9180C LDRB W8, [X20 + 0x783]
	0x01D91810 LDR X19, [X19 + 0xC8]
	0x01D91814 CBNZ W8, 0x1D9182C
	0x01D91818 ADRP X0, 0x2362000
	0x01D9181C LDR X0, [X0 + 0x5A0]
	0x01D91820 BL 0x1C16CF4
	0x01D91824 MOVZ W8, 0x1
	0x01D91828 STRB W8, [X20 + 0x783]
	0x01D9182C ADRP X8, 0x2362000
	0x01D91830 LDR X8, [X8 + 0x5A0]
	0x01D91834 ADRP X20, 0x2647000
	0x01D91838 LDRB W9, [X20 + 0x793]
	0x01D9183C LDR X8, [X8]
	0x01D91840 LDR X8, [X8 + 0xB8]
	0x01D91844 LDP S10, S9, [X8]
	0x01D91848 LDR V8, [X8 + 0x8]
	0x01D9184C CBNZ W9, 0x1D91864
	0x01D91850 ADRP X0, 0x2363000
	0x01D91854 LDR X0, [X0 + 0x5A8]
	0x01D91858 BL 0x1C16CF4
	0x01D9185C MOVZ W8, 0x1
	0x01D91860 STRB W8, [X20 + 0x793]
	0x01D91864 CBZ X19, 0x1D918C4
	0x01D91868 ADRP X8, 0x2363000
	0x01D9186C LDR X8, [X8 + 0x5A8]
	0x01D91870 MOV X0, X19
	0x01D91874 MOV V0.16B, V10.16B
	0x01D91878 MOV V1.16B, V9.16B
	0x01D9187C LDR X8, [X8]
	0x01D91880 MOV V2.16B, V8.16B
	0x01D91884 MOV X1, X31
	0x01D91888 LDR X8, [X8 + 0xB8]
	0x01D9188C LDP S5, S6, [X8 + 0x8]
	0x01D91890 LDP S3, S4, [X8]
	0x01D91894 BL 0x3C400B4
	0x01D91898 LDR X8, [X21 + 0x28]
	0x01D9189C LDR X9, [X31 + 0x28]
	0x01D918A0 CMP X8, X9
	0x01D918A4 B.NE 0x1D918C8
	0x01D918A8 LDP X20, X19, [X31 + 0x60]
	0x01D918AC LDP X22, X21, [X31 + 0x50]
	0x01D918B0 LDR X30, [X31 + 0x48]
	0x01D918B4 LDP D9, D8, [X31 + 0x38]
	0x01D918B8 LDR V10, [X31 + 0x30]
	0x01D918BC ADD X31, X31, 0x70
	0x01D918C0 RET
	0x01D918C4 BL 0x1C16F20
	0x01D918C8 BL 0x3EB1B20
	0x01D918CC MOVZ W1, 0x1
	0x01D918D0 B 0x1D91694
	0x01D918D4 STR X30, [X31 - 0x20]!
	0x01D918D8 STP X20, X19, [X31 + 0x10]
	0x01D918DC LDR X19, [X0 + 0x168]
	0x01D918E0 MOV X20, X0
	0x01D918E4 BL 0x1D89D0C
	0x01D918E8 TBZ X0, 0x0, 0x1D91904
	0x01D918EC LDRB W8, [X20 + 0x8A]
	0x01D918F0 CBZ W8, 0x1D91908
	0x01D918F4 MOV X0, X20
	0x01D918F8 BL 0x1D8D0A8
	0x01D918FC EOR W8, W0, 0x1
	0x01D91900 B 0x1D91908
	0x01D91904 MOV W8, W31
	0x01D91908 CBZ X19, 0x1D91924
	0x01D9190C MOV X0, X19
	0x01D91910 LDP X20, X19, [X31 + 0x10]
	0x01D91914 AND W1, W8, 0x1
	0x01D91918 MOV X2, X31
	0x01D9191C LDR X30, [X31], #0x20
	0x01D91920 B 0x3C8ECAC
	0x01D91924 BL 0x1C16F20
	0x01D91928 STR X30, [X31 - 0x20]!
	0x01D9192C STP X20, X19, [X31 + 0x10]
	0x01D91930 LDR X19, [X0 + 0x168]
	0x01D91934 MOV X20, X0
	0x01D91938 BL 0x1D89D0C
	0x01D9193C TBZ X0, 0x0, 0x1D91960
	0x01D91940 MOV X0, X20
	0x01D91944 BL 0x1D8D0A8
	0x01D91948 TBZ X0, 0x0, 0x1D9197C
	0x01D9194C LDRB W8, [X20 + 0x88]
	0x01D91950 CMP W8, 0x0
	0x01D91954 CSET W1, NE
	0x01D91958 CBNZ X19, 0x1D91968
	0x01D9195C B 0x1D91984
	0x01D91960 MOV W1, W31
	0x01D91964 CBZ X19, 0x1D91984
	0x01D91968 MOV X0, X19
	0x01D9196C LDP X20, X19, [X31 + 0x10]
	0x01D91970 MOV X2, X31
	0x01D91974 LDR X30, [X31], #0x20
	0x01D91978 B 0x3C8EF30
	0x01D9197C MOVZ W1, 0x1
	0x01D91980 CBNZ X19, 0x1D91968
	0x01D91984 BL 0x1C16F20
	0x01D91988 STP X30, X21, [X31 - 0x20]!
	0x01D9198C STP X20, X19, [X31 + 0x10]
	0x01D91990 ADRP X19, 0x2647000
	0x01D91994 ADRP X21, 0x2365000
	0x01D91998 LDRB W8, [X19 + 0x9F7]
	0x01D9199C LDR X21, [X21 + 0x398]
	0x01D919A0 MOV X20, X0
	0x01D919A4 TBNZ X8, 0x0, 0x1D919BC
	0x01D919A8 ADRP X0, 0x2365000
	0x01D919AC LDR X0, [X0 + 0x398]
	0x01D919B0 BL 0x1C16CF4
	0x01D919B4 MOVZ W8, 0x1
	0x01D919B8 STRB W8, [X19 + 0x9F7]
	0x01D919BC LDR X19, [X20 + 0x168]
	0x01D919C0 MOV X0, X20
	0x01D919C4 BL 0x1D8EB5C
	0x01D919C8 LDR X8, [X21]
	0x01D919CC MOV X20, X0
	0x01D919D0 LDR W9, [X8 + 0xE0]
	0x01D919D4 CBNZ W9, 0x1D919E0
	0x01D919D8 MOV X0, X8
	0x01D919DC BL 0x1C16DFC
	0x01D919E0 CBZ X19, 0x1D91A04
	0x01D919E4 CMP W20, 0x0
	0x01D919E8 MOV X0, X19
	0x01D919EC LDP X20, X19, [X31 + 0x10]
	0x01D919F0 MOVZ W8, 0x7E
	0x01D919F4 CSEL W1, W31, W8, EQ
	0x01D919F8 MOV X2, X31
	0x01D919FC LDP X30, X21, [X31], #0x20
	0x01D91A00 B 0x3C8EDAC
	0x01D91A04 BL 0x1C16F20
	0x01D91A08 B 0x1D91A0C
	0x01D91A0C STR X30, [X31 - 0x30]!
	0x01D91A10 STP X22, X21, [X31 + 0x10]
	0x01D91A14 STP X20, X19, [X31 + 0x20]
	0x01D91A18 ADRP X21, 0x2647000
	0x01D91A1C LDRB W8, [X21 + 0x9F8]
	0x01D91A20 MOV X20, X1
	0x01D91A24 MOV X19, X0
	0x01D91A28 TBNZ X8, 0x0, 0x1D91A4C
	0x01D91A2C ADRP X0, 0x2365000
	0x01D91A30 LDR X0, [X0 + 0xA78]
	0x01D91A34 BL 0x1C16CF4
	0x01D91A38 ADRP X0, 0x2365000
	0x01D91A3C LDR X0, [X0 + 0xDB0]
	0x01D91A40 BL 0x1C16CF4
	0x01D91A44 MOVZ W8, 0x1
	0x01D91A48 STRB W8, [X21 + 0x9F8]
	0x01D91A4C LDRB W8, [X19 + 0x58]
	0x01D91A50 CBZ W8, 0x1D91B08
	0x01D91A54 STRB W31, [X19 + 0x58]
	0x01D91A58 MOV X0, X19
	0x01D91A5C MOV X1, X20
	0x01D91A60 BL 0x1D8E950
	0x01D91A64 ADRP X21, 0x2647000
	0x01D91A68 LDRB W8, [X21 + 0x783]
	0x01D91A6C LDR X20, [X19 + 0x168]
	0x01D91A70 CBNZ W8, 0x1D91A88
	0x01D91A74 ADRP X0, 0x2362000
	0x01D91A78 LDR X0, [X0 + 0x5A0]
	0x01D91A7C BL 0x1C16CF4
	0x01D91A80 MOVZ W8, 0x1
	0x01D91A84 STRB W8, [X21 + 0x783]
	0x01D91A88 CBZ X20, 0x1D91C44
	0x01D91A8C ADRP X22, 0x2362000
	0x01D91A90 LDR X22, [X22 + 0x5A0]
	0x01D91A94 MOV X0, X20
	0x01D91A98 MOV X1, X31
	0x01D91A9C LDR X8, [X22]
	0x01D91AA0 LDR X8, [X8 + 0xB8]
	0x01D91AA4 LDP S1, S2, [X8 + 0x4]
	0x01D91AA8 LDR V0, [X8]
	0x01D91AAC BL 0x3C8E908
	0x01D91AB0 LDRB W8, [X21 + 0x783]
	0x01D91AB4 LDR X20, [X19 + 0x168]
	0x01D91AB8 CBNZ W8, 0x1D91AD0
	0x01D91ABC ADRP X0, 0x2362000
	0x01D91AC0 LDR X0, [X0 + 0x5A0]
	0x01D91AC4 BL 0x1C16CF4
	0x01D91AC8 MOVZ W8, 0x1
	0x01D91ACC STRB W8, [X21 + 0x783]
	0x01D91AD0 CBZ X20, 0x1D91C44
	0x01D91AD4 LDR X8, [X22]
	0x01D91AD8 MOV X0, X20
	0x01D91ADC MOV X1, X31
	0x01D91AE0 LDR X8, [X8 + 0xB8]
	0x01D91AE4 LDP S1, S2, [X8 + 0x4]
	0x01D91AE8 LDR V0, [X8]
	0x01D91AEC BL 0x3C8EA40
	0x01D91AF0 MOV X0, X19
	0x01D91AF4 LDP X20, X19, [X31 + 0x20]
	0x01D91AF8 LDP X22, X21, [X31 + 0x10]
	0x01D91AFC MOVZ W1, 0x1
	0x01D91B00 LDR X30, [X31], #0x30
	0x01D91B04 B 0x1D91694
	0x01D91B08 ADRP X21, 0x2365000
	0x01D91B0C LDR X21, [X21 + 0xA78]
	0x01D91B10 LDR X0, [X21]
	0x01D91B14 LDR W8, [X0 + 0xE0]
	0x01D91B18 CBNZ W8, 0x1D91B20
	0x01D91B1C BL 0x1C16DFC
	0x01D91B20 MOV X0, X19
	0x01D91B24 MOV X1, X31
	0x01D91B28 BL 0x1E77B08
	0x01D91B2C LDR X0, [X19 + 0x38]
	0x01D91B30 CBZ X0, 0x1D91C44
	0x01D91B34 MOV X1, X31
	0x01D91B38 BL 0x1E9E538
	0x01D91B3C CMP W0, 0x4
	0x01D91B40 B.NE 0x1D91B54
	0x01D91B44 LDP X20, X19, [X31 + 0x20]
	0x01D91B48 LDP X22, X21, [X31 + 0x10]
	0x01D91B4C LDR X30, [X31], #0x30
	0x01D91B50 RET
	0x01D91B54 LDR X0, [X19 + 0x40]
	0x01D91B58 CBZ X0, 0x1D91C44
	0x01D91B5C MOV X1, X31
	0x01D91B60 BL 0x1E94078
	0x01D91B64 ANDS W31, W0, 0x7
	0x01D91B68 B.EQ 0x1D91BC0
	0x01D91B6C TBNZ X0, 0x0, 0x1D91A58
	0x01D91B70 LDR X8, [X19 + 0x38]
	0x01D91B74 CBZ X8, 0x1D91C44
	0x01D91B78 LDR X0, [X8 + 0x50]
	0x01D91B7C CBZ X0, 0x1D91C44
	0x01D91B80 MOV X1, X31
	0x01D91B84 BL 0x1EC4D00
	0x01D91B88 TBZ X0, 0x0, 0x1D91B44
	0x01D91B8C LDR X8, [X19 + 0x38]
	0x01D91B90 CBZ X8, 0x1D91C44
	0x01D91B94 LDR X0, [X8 + 0x50]
	0x01D91B98 MOVZ W1, 0x10
	0x01D91B9C MOV X2, X31
	0x01D91BA0 BL 0x1ED9318
	0x01D91BA4 LDR X8, [X19 + 0x40]
	0x01D91BA8 CBZ X8, 0x1D91C44
	0x01D91BAC LDR X8, [X8 + 0x20]
	0x01D91BB0 MOV X21, X0
	0x01D91BB4 CBZ X8, 0x1D91BFC
	0x01D91BB8 LDR W0, [X8]
	0x01D91BBC B 0x1D91C00
	0x01D91BC0 LDR X0, [X21]
	0x01D91BC4 LDR X19, [X19 + 0x40]
	0x01D91BC8 LDR W8, [X0 + 0xE0]
	0x01D91BCC CBNZ W8, 0x1D91BD4
	0x01D91BD0 BL 0x1C16DFC
	0x01D91BD4 ADRP X8, 0x2365000
	0x01D91BD8 LDR X8, [X8 + 0xDB0]
	0x01D91BDC MOV X1, X19
	0x01D91BE0 LDP X20, X19, [X31 + 0x20]
	0x01D91BE4 LDP X22, X21, [X31 + 0x10]
	0x01D91BE8 LDR X0, [X8]
	0x01D91BEC MOVZ W2, 0x7
	0x01D91BF0 MOV X3, X31
	0x01D91BF4 LDR X30, [X31], #0x30
	0x01D91BF8 B 0x1E77B00
	0x01D91BFC MOV X0, X31
	0x01D91C00 LDR W1, [X19 + 0x68]
	0x01D91C04 MOVZ W2, 0x4
	0x01D91C08 MOV X3, X31
	0x01D91C0C BL 0x1E9C23C
	0x01D91C10 STUR X0, [X21 + 0x1C]
	0x01D91C14 STUR X20, [X21 + 0x24]
	0x01D91C18 CBZ X21, 0x1D91C44
	0x01D91C1C MOVZ W8, 0x80
	0x01D91C20 STR W8, [X21 + 0xC]
	0x01D91C24 LDR X0, [X19 + 0x38]
	0x01D91C28 CBZ X0, 0x1D91C44
	0x01D91C2C MOV X1, X21
	0x01D91C30 LDP X20, X19, [X31 + 0x20]
	0x01D91C34 LDP X22, X21, [X31 + 0x10]
	0x01D91C38 MOV X2, X31
	0x01D91C3C LDR X30, [X31], #0x30
	0x01D91C40 B 0x1EA1E24
	0x01D91C44 BL 0x1C16F20
	0x01D91C48 B 0x1D91C4C
	0x01D91C4C STR D10, [X31 - 0x40]!
	0x01D91C50 STP D9, D8, [X31 + 0x8]
	0x01D91C54 STR X30, [X31 + 0x18]
	0x01D91C58 STP X22, X21, [X31 + 0x20]
	0x01D91C5C STP X20, X19, [X31 + 0x30]
	0x01D91C60 ADRP X20, 0x2647000
	0x01D91C64 LDRB W8, [X20 + 0x9F9]
	0x01D91C68 MOV V8.16B, V2.16B
	0x01D91C6C MOV V9.16B, V1.16B
	0x01D91C70 MOV V10.16B, V0.16B
	0x01D91C74 MOV X19, X0
	0x01D91C78 TBNZ X8, 0x0, 0x1D91C9C
	0x01D91C7C ADRP X0, 0x2365000
	0x01D91C80 LDR X0, [X0 + 0xA78]
	0x01D91C84 BL 0x1C16CF4
	0x01D91C88 ADRP X0, 0x2365000
	0x01D91C8C LDR X0, [X0 + 0xDB8]
	0x01D91C90 BL 0x1C16CF4
	0x01D91C94 MOVZ W8, 0x1
	0x01D91C98 STRB W8, [X20 + 0x9F9]
	0x01D91C9C LDRB W8, [X19 + 0x58]
	0x01D91CA0 CBZ W8, 0x1D91DB0
	0x01D91CA4 STRB W31, [X19 + 0x58]
	0x01D91CA8 MOV X0, X31
	0x01D91CAC BL 0x1E769D8
	0x01D91CB0 MOV X1, X0
	0x01D91CB4 MOV X0, X19
	0x01D91CB8 BL 0x1D8E950
	0x01D91CBC MOV X0, X19
	0x01D91CC0 MOV X1, X31
	0x01D91CC4 BL 0x3C32E90
	0x01D91CC8 CBZ X0, 0x1D91F08
	0x01D91CCC MOV V0.16B, V10.16B
	0x01D91CD0 MOV V1.16B, V9.16B
	0x01D91CD4 MOV V2.16B, V8.16B
	0x01D91CD8 MOV X1, X31
	0x01D91CDC BL 0x3C3F62C
	0x01D91CE0 MOVZ W1, 0x1
	0x01D91CE4 MOV X0, X19
	0x01D91CE8 BL 0x1D91694
	0x01D91CEC LDR X0, [X19 + 0x168]
	0x01D91CF0 CBZ X0, 0x1D91F08
	0x01D91CF4 MOV V0.16B, V10.16B
	0x01D91CF8 MOV V1.16B, V9.16B
	0x01D91CFC MOV V2.16B, V8.16B
	0x01D91D00 MOV X1, X31
	0x01D91D04 BL 0x3C8F014
	0x01D91D08 ADRP X21, 0x2647000
	0x01D91D0C LDRB W8, [X21 + 0x783]
	0x01D91D10 LDR X20, [X19 + 0x168]
	0x01D91D14 CBNZ W8, 0x1D91D2C
	0x01D91D18 ADRP X0, 0x2362000
	0x01D91D1C LDR X0, [X0 + 0x5A0]
	0x01D91D20 BL 0x1C16CF4
	0x01D91D24 MOVZ W8, 0x1
	0x01D91D28 STRB W8, [X21 + 0x783]
	0x01D91D2C CBZ X20, 0x1D91F08
	0x01D91D30 ADRP X22, 0x2362000
	0x01D91D34 LDR X22, [X22 + 0x5A0]
	0x01D91D38 MOV X0, X20
	0x01D91D3C MOV X1, X31
	0x01D91D40 LDR X8, [X22]
	0x01D91D44 LDR X8, [X8 + 0xB8]
	0x01D91D48 LDP S1, S2, [X8 + 0x4]
	0x01D91D4C LDR V0, [X8]
	0x01D91D50 BL 0x3C8E908
	0x01D91D54 LDRB W8, [X21 + 0x783]
	0x01D91D58 LDR X20, [X19 + 0x168]
	0x01D91D5C CBNZ W8, 0x1D91D74
	0x01D91D60 ADRP X0, 0x2362000
	0x01D91D64 LDR X0, [X0 + 0x5A0]
	0x01D91D68 BL 0x1C16CF4
	0x01D91D6C MOVZ W8, 0x1
	0x01D91D70 STRB W8, [X21 + 0x783]
	0x01D91D74 CBZ X20, 0x1D91F08
	0x01D91D78 LDR X8, [X22]
	0x01D91D7C MOV X0, X20
	0x01D91D80 MOV X1, X31
	0x01D91D84 LDR X8, [X8 + 0xB8]
	0x01D91D88 LDP S1, S2, [X8 + 0x4]
	0x01D91D8C LDR V0, [X8]
	0x01D91D90 BL 0x3C8EA40
	0x01D91D94 MOV X0, X19
	0x01D91D98 LDP X20, X19, [X31 + 0x30]
	0x01D91D9C LDP X22, X21, [X31 + 0x20]
	0x01D91DA0 LDR X30, [X31 + 0x18]
	0x01D91DA4 LDP D9, D8, [X31 + 0x8]
	0x01D91DA8 LDR V10, [X31], #0x40
	0x01D91DAC B 0x1D9001C
	0x01D91DB0 ADRP X20, 0x2365000
	0x01D91DB4 LDR X20, [X20 + 0xA78]
	0x01D91DB8 LDR X0, [X20]
	0x01D91DBC LDR W8, [X0 + 0xE0]
	0x01D91DC0 CBNZ W8, 0x1D91DC8
	0x01D91DC4 BL 0x1C16DFC
	0x01D91DC8 MOV X0, X19
	0x01D91DCC MOV X1, X31
	0x01D91DD0 BL 0x1E77B08
	0x01D91DD4 LDR X0, [X19 + 0x38]
	0x01D91DD8 CBZ X0, 0x1D91F08
	0x01D91DDC MOV X1, X31
	0x01D91DE0 BL 0x1E9E538
	0x01D91DE4 CMP W0, 0x4
	0x01D91DE8 B.NE 0x1D91E04
	0x01D91DEC LDP X20, X19, [X31 + 0x30]
	0x01D91DF0 LDP X22, X21, [X31 + 0x20]
	0x01D91DF4 LDR X30, [X31 + 0x18]
	0x01D91DF8 LDP D9, D8, [X31 + 0x8]
	0x01D91DFC LDR V10, [X31], #0x40
	0x01D91E00 RET
	0x01D91E04 LDR X0, [X19 + 0x40]
	0x01D91E08 CBZ X0, 0x1D91F08
	0x01D91E0C MOV X1, X31
	0x01D91E10 BL 0x1E94078
	0x01D91E14 ANDS W31, W0, 0x7
	0x01D91E18 B.EQ 0x1D91E70
	0x01D91E1C TBNZ X0, 0x0, 0x1D91CA8
	0x01D91E20 LDR X8, [X19 + 0x38]
	0x01D91E24 CBZ X8, 0x1D91F08
	0x01D91E28 LDR X0, [X8 + 0x50]
	0x01D91E2C CBZ X0, 0x1D91F08
	0x01D91E30 MOV X1, X31
	0x01D91E34 BL 0x1EC4D00
	0x01D91E38 TBZ X0, 0x0, 0x1D91DEC
	0x01D91E3C LDR X8, [X19 + 0x38]
	0x01D91E40 CBZ X8, 0x1D91F08
	0x01D91E44 LDR X0, [X8 + 0x50]
	0x01D91E48 MOVZ W1, 0x14
	0x01D91E4C MOV X2, X31
	0x01D91E50 BL 0x1ED9318
	0x01D91E54 LDR X8, [X19 + 0x40]
	0x01D91E58 CBZ X8, 0x1D91F08
	0x01D91E5C LDR X8, [X8 + 0x20]
	0x01D91E60 MOV X20, X0
	0x01D91E64 CBZ X8, 0x1D91EB4
	0x01D91E68 LDR W0, [X8]
	0x01D91E6C B 0x1D91EB8
	0x01D91E70 LDR X0, [X20]
	0x01D91E74 LDR X19, [X19 + 0x40]
	0x01D91E78 LDR W8, [X0 + 0xE0]
	0x01D91E7C CBNZ W8, 0x1D91E84
	0x01D91E80 BL 0x1C16DFC
	0x01D91E84 ADRP X8, 0x2365000
	0x01D91E88 LDR X8, [X8 + 0xDB8]
	0x01D91E8C MOV X1, X19
	0x01D91E90 LDP X20, X19, [X31 + 0x30]
	0x01D91E94 LDP X22, X21, [X31 + 0x20]
	0x01D91E98 LDR X0, [X8]
	0x01D91E9C LDR X30, [X31 + 0x18]
	0x01D91EA0 LDP D9, D8, [X31 + 0x8]
	0x01D91EA4 MOVZ W2, 0x7
	0x01D91EA8 MOV X3, X31
	0x01D91EAC LDR V10, [X31], #0x40
	0x01D91EB0 B 0x1E77B00
	0x01D91EB4 MOV X0, X31
	0x01D91EB8 LDR W1, [X19 + 0x68]
	0x01D91EBC MOVZ W2, 0x5
	0x01D91EC0 MOV X3, X31
	0x01D91EC4 BL 0x1E9C23C
	0x01D91EC8 STUR X0, [X20 + 0x1C]
	0x01D91ECC STP S10, S9, [X20 + 0x24]
	0x01D91ED0 STR S8, [X20 + 0x2C]
	0x01D91ED4 CBZ X20, 0x1D91F08
	0x01D91ED8 MOVZ W8, 0xA0
	0x01D91EDC STR W8, [X20 + 0xC]
	0x01D91EE0 LDR X0, [X19 + 0x38]
	0x01D91EE4 CBZ X0, 0x1D91F08
	0x01D91EE8 MOV X1, X20
	0x01D91EEC LDP X20, X19, [X31 + 0x30]
	0x01D91EF0 LDP X22, X21, [X31 + 0x20]
	0x01D91EF4 LDR X30, [X31 + 0x18]
	0x01D91EF8 LDP D9, D8, [X31 + 0x8]
	0x01D91EFC MOV X2, X31
	0x01D91F00 LDR V10, [X31], #0x40
	0x01D91F04 B 0x1EA1E24
	0x01D91F08 BL 0x1C16F20
	0x01D91F0C STR X1, [X0 + 0x98]
	0x01D91F10 RET
	0x01D91F14 STR X30, [X31 - 0x20]!
	0x01D91F18 STP X20, X19, [X31 + 0x10]
	0x01D91F1C MOV X19, X0
	0x01D91F20 BL 0x1D8D0A8
	0x01D91F24 ANDS W31, W0, 0x1
	0x01D91F28 MOVZ W8, 0xC
	0x01D91F2C MOVZ W9, 0xA
	0x01D91F30 MOV X0, X19
	0x01D91F34 MOV X1, X31
	0x01D91F38 CSEL W20, W9, W8, NE
	0x01D91F3C BL 0x3C32ECC
	0x01D91F40 MOV X1, X0
	0x01D91F44 MOV X0, X19
	0x01D91F48 MOV W2, W20
	0x01D91F4C LDP X20, X19, [X31 + 0x10]
	0x01D91F50 LDR X30, [X31], #0x20
	0x01D91F54 B 0x1D91F58
	0x01D91F58 STR X30, [X31 - 0x40]!
	0x01D91F5C STP X24, X23, [X31 + 0x10]
	0x01D91F60 STP X22, X21, [X31 + 0x20]
	0x01D91F64 STP X20, X19, [X31 + 0x30]
	0x01D91F68 ADRP X22, 0x2647000
	0x01D91F6C LDRB W8, [X22 + 0x9FA]
	0x01D91F70 MOV W20, W2
	0x01D91F74 MOV X19, X1
	0x01D91F78 MOV X21, X0
	0x01D91F7C TBNZ X8, 0x0, 0x1D91FAC
	0x01D91F80 ADRP X0, 0x2362000
	0x01D91F84 LDR X0, [X0 + 0xE00]
	0x01D91F88 BL 0x1C16CF4
	0x01D91F8C ADRP X0, 0x2362000
	0x01D91F90 LDR X0, [X0 + 0xE18]
	0x01D91F94 BL 0x1C16CF4
	0x01D91F98 ADRP X0, 0x2364000
	0x01D91F9C LDR X0, [X0 + 0x638]
	0x01D91FA0 BL 0x1C16CF4
	0x01D91FA4 MOVZ W8, 0x1
	0x01D91FA8 STRB W8, [X22 + 0x9FA]
	0x01D91FAC CBZ X19, 0x1D921A0
	0x01D91FB0 MOV X0, X19
	0x01D91FB4 MOV X1, X31
	0x01D91FB8 BL 0x3C35734
	0x01D91FBC CMP W0, 0x1A
	0x01D91FC0 B.EQ 0x1D91FD4
	0x01D91FC4 MOV X0, X19
	0x01D91FC8 MOV W1, W20
	0x01D91FCC MOV X2, X31
	0x01D91FD0 BL 0x3C35770
	0x01D91FD4 MOV X0, X19
	0x01D91FD8 MOV X1, X31
	0x01D91FDC BL 0x3C356F8
	0x01D91FE0 CBZ X0, 0x1D921A0
	0x01D91FE4 ADRP X22, 0x2362000
	0x01D91FE8 LDR X22, [X22 + 0xE00]
	0x01D91FEC MOV X1, X31
	0x01D91FF0 BL 0x3C4100C
	0x01D91FF4 MOV X19, X0
	0x01D91FF8 CBZ X0, 0x1D921A4
	0x01D91FFC ADRP X23, 0x2362000
	0x01D92000 ADRP X24, 0x2363000
	0x01D92004 LDR X23, [X23 + 0xE18]
	0x01D92008 B 0x3EB14FC
	0x01D9200C LDR X8, [X19]
	0x01D92010 LDR X1, [X23]
	0x01D92014 LDRH W9, [X8 + 0x12E]
	0x01D92018 CBZ X9, 0x1D9203C
	0x01D9201C LDR X10, [X8 + 0xB0]
	0x01D92020 ADD X10, X10, 0x8
	0x01D92024 LDUR X11, [X10 - 0x8]
	0x01D92028 CMP X11, X1
	0x01D9202C B.EQ 0x1D9204C
	0x01D92030 SUBS X9, X9, 0x1
	0x01D92034 ADD X10, X10, 0x10
	0x01D92038 B.NE 0x1D92024
	0x01D9203C MOV X0, X19
	0x01D92040 MOV W2, W31
	0x01D92044 BL 0x1C5C788
	0x01D92048 B 0x1D92058
	0x01D9204C LDRSW X9, [X10]
	0x01D92050 ADD X8, X8, X9, 0x4, LSL
	0x01D92054 ADD X0, X8, 0x138
	0x01D92058 LDP X8, X1, [X0]
	0x01D9205C MOV X0, X19
	0x01D92060 BLR X8
	0x01D92064 TBZ X0, 0x0, 0x1D92110
	0x01D92068 LDR X8, [X19]
	0x01D9206C LDR X1, [X23]
	0x01D92070 LDRH W9, [X8 + 0x12E]
	0x01D92074 CBZ X9, 0x1D92098
	0x01D92078 LDR X10, [X8 + 0xB0]
	0x01D9207C ADD X10, X10, 0x8
	0x01D92080 LDUR X11, [X10 - 0x8]
	0x01D92084 CMP X11, X1
	0x01D92088 B.EQ 0x1D920A8
	0x01D9208C SUBS X9, X9, 0x1
	0x01D92090 ADD X10, X10, 0x10
	0x01D92094 B.NE 0x1D92080
	0x01D92098 MOVZ W2, 0x1
	0x01D9209C MOV X0, X19
	0x01D920A0 BL 0x1C5C788
	0x01D920A4 B 0x1D920B8
	0x01D920A8 LDR W9, [X10]
	0x01D920AC ADD W9, W9, 0x1
	0x01D920B0 ADD X8, X8, W9, 0x4, SXTW
	0x01D920B4 ADD X0, X8, 0x138
	0x01D920B8 LDP X8, X1, [X0]
	0x01D920BC MOV X0, X19
	0x01D920C0 BLR X8
	0x01D920C4 CBZ X0, 0x1D9219C
	0x01D920C8 LDR X8, [X0]
	0x01D920CC LDR X1, [X24]
	0x01D920D0 LDRB W10, [X8 + 0x130]
	0x01D920D4 LDRB W9, [X1 + 0x130]
	0x01D920D8 CMP W10, W9
	0x01D920DC B.CC 0x1D92198
	0x01D920E0 LDR X8, [X8 + 0xC8]
	0x01D920E4 ADD X8, X8, X9, 0x3, LSL
	0x01D920E8 LDUR X8, [X8 - 0x8]
	0x01D920EC CMP X8, X1
	0x01D920F0 B.NE 0x1D92198
	0x01D920F4 MOV X1, X31
	0x01D920F8 BL 0x3C32ECC
	0x01D920FC MOV X1, X0
	0x01D92100 MOV X0, X21
	0x01D92104 MOV W2, W20
	0x01D92108 BL 0x1D91F58
	0x01D9210C B 0x1D9200C
	0x01D92110 MOV X20, X31
	0x01D92114 LDR X1, [X22]
	0x01D92118 MOV X0, X19
	0x01D9211C BL 0x1C16E00
	0x01D92120 CBZ X0, 0x1D92180
	0x01D92124 LDR X8, [X0]
	0x01D92128 LDR X1, [X22]
	0x01D9212C MOV X19, X0
	0x01D92130 LDRH W9, [X8 + 0x12E]
	0x01D92134 CBZ X9, 0x1D92158
	0x01D92138 LDR X10, [X8 + 0xB0]
	0x01D9213C ADD X10, X10, 0x8
	0x01D92140 LDUR X11, [X10 - 0x8]
	0x01D92144 CMP X11, X1
	0x01D92148 B.EQ 0x1D92168
	0x01D9214C SUBS X9, X9, 0x1
	0x01D92150 ADD X10, X10, 0x10
	0x01D92154 B.NE 0x1D92140
	0x01D92158 MOV X0, X19
	0x01D9215C MOV W2, W31
	0x01D92160 BL 0x1C5C788
	0x01D92164 B 0x1D92174
	0x01D92168 LDRSW X9, [X10]
	0x01D9216C ADD X8, X8, X9, 0x4, LSL
	0x01D92170 ADD X0, X8, 0x138
	0x01D92174 LDP X8, X1, [X0]
	0x01D92178 MOV X0, X19
	0x01D9217C BLR X8
	0x01D92180 CBNZ X20, 0x1D921A8
	0x01D92184 LDP X20, X19, [X31 + 0x30]
	0x01D92188 LDP X22, X21, [X31 + 0x20]
	0x01D9218C LDP X24, X23, [X31 + 0x10]
	0x01D92190 LDR X30, [X31], #0x40
	0x01D92194 RET
	0x01D92198 BL 0x1C171E0
	0x01D9219C BL 0x1C16F20
	0x01D921A0 BL 0x1C16F20
	0x01D921A4 BL 0x1C16F20
	0x01D921A8 MOV X0, X20
	0x01D921AC BL 0x1C16F18
	0x01D921B0 B 0x1D921C8
	0x01D921B4 B 0x1D921C8
	0x01D921B8 B 0x1D921C8
	0x01D921BC B 0x1D921C8
	0x01D921C0 B 0x1D921C8
	0x01D921C4 B 0x1D921C8
	0x01D921C8 MOV X21, X0
	0x01D921CC CMP W1, 0x1
	0x01D921D0 B.NE 0x1D921E8
	0x01D921D4 MOV X0, X21
	0x01D921D8 BL 0x3EB1AD0
	0x01D921DC LDR X20, [X0]
	0x01D921E0 BL 0x3EB1AE0
	0x01D921E4 B 0x1D92114
	0x01D921E8 MOV X20, X31
	0x01D921EC B 0x1D921F4
	0x01D921F0 MOV X21, X0
	0x01D921F4 LDR X1, [X22]
	0x01D921F8 MOV X0, X19
	0x01D921FC BL 0x1C16E00
	0x01D92200 MOV X19, X0
	0x01D92204 CBZ X0, 0x1D92260
	0x01D92208 LDR X8, [X19]
	0x01D9220C LDR X1, [X22]
	0x01D92210 LDRH W9, [X8 + 0x12E]
	0x01D92214 CBZ X9, 0x1D92238
	0x01D92218 LDR X10, [X8 + 0xB0]
	0x01D9221C ADD X10, X10, 0x8
	0x01D92220 LDUR X11, [X10 - 0x8]
	0x01D92224 CMP X11, X1
	0x01D92228 B.EQ 0x1D92248
	0x01D9222C SUBS X9, X9, 0x1
	0x01D92230 ADD X10, X10, 0x10
	0x01D92234 B.NE 0x1D92220
	0x01D92238 MOV X0, X19
	0x01D9223C MOV W2, W31
	0x01D92240 BL 0x1C5C788
	0x01D92244 B 0x1D92254
	0x01D92248 LDRSW X9, [X10]
	0x01D9224C ADD X8, X8, X9, 0x4, LSL
	0x01D92250 ADD X0, X8, 0x138
	0x01D92254 LDP X8, X1, [X0]
	0x01D92258 MOV X0, X19
	0x01D9225C BLR X8
	0x01D92260 CBNZ X20, 0x1D9226C
	0x01D92264 MOV X0, X21
	0x01D92268 BL 0x1D2C690
	0x01D9226C MOV X0, X20
	0x01D92270 BL 0x1C16F18
	0x01D92274 BL 0x1990590
	0x01D92278 STR X30, [X31 - 0x30]!
	0x01D9227C STP X22, X21, [X31 + 0x10]
	0x01D92280 STP X20, X19, [X31 + 0x20]
	0x01D92284 ADRP X20, 0x2646000
	0x01D92288 ADRP X21, 0x2361000
	0x01D9228C LDRB W8, [X20 + 0x9FB]
	0x01D92290 LDR X21, [X21 + 0x598]
	0x01D92294 MOV X19, X0
	0x01D92298 TBNZ X8, 0x0, 0x1D922BC
	0x01D9229C ADRP X0, 0x2361000
	0x01D922A0 LDR X0, [X0 + 0x598]
	0x01D922A4 BL 0x1C16CF4
	0x01D922A8 ADRP X0, 0x2363000
	0x01D922AC LDR X0, [X0 + 0x7C8]
	0x01D922B0 BL 0x1C16CF4
	0x01D922B4 MOVZ W8, 0x1
	0x01D922B8 STRB W8, [X20 + 0x9FB]
	0x01D922BC LDR X0, [X21]
	0x01D922C0 LDR X20, [X19 + 0x150]
	0x01D922C4 LDR W8, [X0 + 0xE0]
	0x01D922C8 CBNZ W8, 0x1D922D0
	0x01D922CC BL 0x1C16DFC
	0x01D922D0 MOV X0, X20
	0x01D922D4 MOV X1, X31
	0x01D922D8 MOV X2, X31
	0x01D922DC BL 0x3C3883C
	0x01D922E0 TBZ X0, 0x0, 0x1D922EC
	0x01D922E4 STR X31, [X19 + 0x178]
	0x01D922E8 B 0x1D9249C
	0x01D922EC LDR X8, [X19 + 0x150]
	0x01D922F0 CBZ X8, 0x1D924AC
	0x01D922F4 LDR X0, [X8 + 0x40]
	0x01D922F8 CBZ X0, 0x1D92460
	0x01D922FC LDRB W8, [X0 + 0x60]
	0x01D92300 TBNZ X8, 0x1, 0x1D92460
	0x01D92304 MOV X1, X31
	0x01D92308 BL 0x1E93588
	0x01D9230C TBZ X0, 0x0, 0x1D92460
	0x01D92310 LDR X8, [X19 + 0x150]
	0x01D92314 CBZ X8, 0x1D924AC
	0x01D92318 LDR W8, [X8 + 0x80]
	0x01D9231C CMP W8, 0x2
	0x01D92320 B.EQ 0x1D92390
	0x01D92324 CMP W8, 0x1
	0x01D92328 B.EQ 0x1D923F8
	0x01D9232C CBNZ W8, 0x1D9245C
	0x01D92330 ADRP X20, 0x2363000
	0x01D92334 LDR X20, [X20 + 0x7C8]
	0x01D92338 LDR X0, [X20]
	0x01D9233C LDR W8, [X0 + 0xE0]
	0x01D92340 CBNZ W8, 0x1D92348
	0x01D92344 BL 0x1C16DFC
	0x01D92348 ADRP X22, 0x2646000
	0x01D9234C LDRB W8, [X22 + 0x85D]
	0x01D92350 CBNZ W8, 0x1D92368
	0x01D92354 ADRP X0, 0x2363000
	0x01D92358 LDR X0, [X0 + 0x7C8]
	0x01D9235C BL 0x1C16CF4
	0x01D92360 MOVZ W8, 0x1
	0x01D92364 STRB W8, [X22 + 0x85D]
	0x01D92368 LDR X0, [X20]
	0x01D9236C LDR W8, [X0 + 0xE0]
	0x01D92370 CBNZ W8, 0x1D9237C
	0x01D92374 BL 0x1C16DFC
	0x01D92378 LDR X0, [X20]
	0x01D9237C LDR X8, [X0 + 0xB8]
	0x01D92380 LDR X8, [X8]
	0x01D92384 CBZ X8, 0x1D924AC
	0x01D92388 LDR X8, [X8 + 0x70]
	0x01D9238C B 0x1D92454
	0x01D92390 ADRP X20, 0x2363000
	0x01D92394 LDR X20, [X20 + 0x7C8]
	0x01D92398 LDR X0, [X20]
	0x01D9239C LDR W8, [X0 + 0xE0]
	0x01D923A0 CBNZ W8, 0x1D923A8
	0x01D923A4 BL 0x1C16DFC
	0x01D923A8 ADRP X22, 0x2646000
	0x01D923AC LDRB W8, [X22 + 0x85D]
	0x01D923B0 CBNZ W8, 0x1D923C8
	0x01D923B4 ADRP X0, 0x2363000
	0x01D923B8 LDR X0, [X0 + 0x7C8]
	0x01D923BC BL 0x1C16CF4
	0x01D923C0 MOVZ W8, 0x1

ISIL:
	001 Move [X31-160], D15
	002 Move [X31-152], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+72], X30
	011 Move [X31+80], X28
	012 Move [X31+88], X27
	013 Move [X31+96], X26
	014 Move [X31+104], X25
	015 Move [X31+112], X24
	016 Move [X31+120], X23
	017 Move [X31+128], X22
	018 Move [X31+136], X21
	019 Move [X31+144], X20
	020 Move [X31+152], X19
	021 Subtract X31, X31, 1024
	022 NotImplemented "Instruction MRS not yet implemented."
	023 Move X8, [X23+40]
	024 Move X20, 0x2648000
	025 Move X19, X0
	026 Move [X31+1016], X8
	027 Move W8, [X20+2559]
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {58}
	032 Move X0, 0x2364000
	033 Move X0, [X0+3696]
	034 Call 0x1C17CF4
	035 Move X0, 0x2366000
	036 Move X0, [X0+3448]
	037 Call 0x1C17CF4
	038 Move X0, 0x2366000
	039 Move X0, [X0+1048]
	040 Call 0x1C17CF4
	041 Move X0, 0x2366000
	042 Move X0, [X0+3456]
	043 Call 0x1C17CF4
	044 Move X0, 0x2366000
	045 Move X0, [X0+3464]
	046 Call 0x1C17CF4
	047 Move X0, 0x2366000
	048 Move X0, [X0+3472]
	049 Call 0x1C17CF4
	050 Move X0, 0x2363000
	051 Move X0, [X0+1432]
	052 Call 0x1C17CF4
	053 Move X0, 0x2366000
	054 Move X0, [X0+3480]
	055 Call 0x1C17CF4
	056 Move W8, 1
	057 Move [X20+2559], W8
	058 NotImplemented "Instruction MOVI not yet implemented."
	059 Move [X31+944], V0
	060 Move [X31+952], V0
	061 Move [X31+912], V0
	062 Move [X31+920], V0
	063 Move [X31+880], V0
	064 Move [X31+888], V0
	065 Move [X31+848], V0
	066 Move [X31+856], V0
	067 Move [X31+816], V0
	068 Move [X31+824], V0
	069 Move [X31+784], V0
	070 Move [X31+792], V0
	071 Move [X31+752], V0
	072 Move [X31+760], V0
	073 Move [X31+720], V0
	074 Move [X31+728], V0
	075 Move [X31+688], V0
	076 Move [X31+696], V0
	077 Move [X31+656], V0
	078 Move [X31+664], V0
	079 Move X8, [X19+448]
	080 Compare X8, 0
	081 JumpIfEqual {86}
	082 Move X9, [X8+24]
	083 Move X0, [X8+64]
	084 Move X1, [X8+40]
	085 NotImplemented "Instruction BLR not yet implemented."
	086 Move X24, 0x2363000
	087 Move X24, [X24+1432]
	088 Move W1, 1
	089 Move X0, X19
	090 Call GrabbableItem.UpdateIsVisible, X0, X1
	091 Move X0, X19
	092 Call GrabbableItem.get_isAttached, X0
	093 Add X20, X19, 336
	094 Move [X19+376], X31
	095 Move [X19+336], X31
	096 Move [X19+344], X31
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {432}
	101 Move X21, [X19+56]
	102 Move X0, X19
	103 Call GrabbableItem.get_attachedAnchorId, X0
	104 Compare X21, 0
	105 JumpIfEqual {1461}
	106 Move X8, 0x2366000
	107 Move X8, [X8+3472]
	108 Move X1, X0
	109 Move X0, X21
	110 Move X2, X20
	111 Move X3, [X8]
	112 Call 0x222CD98, X0, X1, X2
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfNotEqual {520}
	117 Move X0, [X20]
	118 Compare X0, 0
	119 JumpIfEqual {1461}
	120 Move X8, 0x2366000
	121 Move X8, [X8+3448]
	122 Move X1, [X8]
	123 Call 0x21A4894, X0
	124 Move [X19+344], X0
	125 Move X0, X19
	126 Call GrabbableItem.UpdateFollowTransform, X0
	127 Move X0, [X19+336]
	128 Compare X0, 0
	129 JumpIfEqual {1461}
	130 Move X8, [X0+64]
	131 Compare X8, 0
	132 JumpIfEqual {517}
	133 Move W9, [X8+96]
	134 Move TEMP, X9
	135 And TEMP, TEMP, 2
	136 Compare TEMP, 2
	137 JumpIfEqual {517}
	138 Move X0, X8
	139 Move X1, X31
	140 Call NetworkObject.get_HasStateAuthority, X0
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfNotEqual {514}
	145 Move W8, [X19+139]
	146 Compare W8, 0
	147 JumpIfEqual {705}
	148 Move X8, [X20]
	149 Compare X8, 0
	150 JumpIfEqual {1461}
	151 Move W8, [X8+128]
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move X0, X19
	154 Move X1, X31
	155 Call Component.get_transform, X0
	156 Compare X0, 0
	157 JumpIfEqual {1461}
	158 Move X1, X31
	159 Call Transform.get_position, X0
	160 Move X0, X19
	161 Move X1, X31
	162 Move V12, V0
	163 Move V15, V1
	164 Move V14, V2
	165 Call Component.get_transform, X0
	166 Compare X0, 0
	167 JumpIfEqual {1461}
	168 Move X8, 0x2366000
	169 Move X8, [X8+1048]
	170 Move X1, [X8]
	171 Call 0x21A553C, X0
	172 Compare X0, 0
	173 JumpIfEqual {1461}
	174 Move W8, [X0+24]
	175 Move X21, X0
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move TEMP, 0x80800000
	178 Not TEMP
	179 Move W9, TEMP
	180 Move W25, W31
	181 Move S11, W9
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Add X22, X21, W25
	184 Add X22, X22, 32
	185 Move X0, [X22]
	186 Compare X0, 0
	187 JumpIfEqual {1461}
	188 Move X1, X31
	189 Call Collider.get_enabled, X0
	190 Move TEMP, X0
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfNotEqual {239}
	194 Move W8, [X21+24]
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Move X0, [X22]
	197 Compare X0, 0
	198 JumpIfEqual {1461}
	199 Move X1, X31
	200 Call Collider.get_isTrigger, X0
	201 Move TEMP, X0
	202 And TEMP, TEMP, 1
	203 Compare TEMP, 1
	204 JumpIfEqual {239}
	205 Move W8, [X21+24]
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move X0, [X19+376]
	208 Compare X0, 0
	209 JumpIfEqual {1461}
	210 Move X22, [X22]
	211 Move X1, X31
	212 Call Transform.get_position, X0
	213 Compare X22, 0
	214 JumpIfEqual {1461}
	215 Move X0, X22
	216 Move X1, X31
	217 Call Collider.ClosestPoint, X0, X1
	218 Move X0, [X19+376]
	219 Compare X0, 0
	220 JumpIfEqual {1461}
	221 Move X1, X31
	222 Move V8, V0
	223 Move V9, V1
	224 Move V10, V2
	225 Call Transform.get_position, X0
	226 Subtract S0, S0, S8
	227 Subtract S1, S1, S9
	228 Subtract S2, S2, S10
	229 Multiply S0, S0, S0
	230 Multiply S1, S1, S1
	231 Add S0, S0, S1
	232 Multiply S1, S2, S2
	233 Add S0, S1, S0
	234 NotImplemented "Instruction FCMP not yet implemented."
	235 Move V11, V0
	236 Move V14, V10
	237 Move V15, V9
	238 Move V12, V8
	239 Move W8, [X21+24]
	240 Add W25, W25, 1
	241 NotImplemented "Instruction CMP not yet implemented."
	242 Move X0, [X19+376]
	243 Compare X0, 0
	244 JumpIfEqual {1461}
	245 Move X1, X31
	246 Call Transform.get_rotation, X0
	247 Move X0, X31
	248 Call Quaternion.Inverse, X0
	249 Move X0, [X19+208]
	250 Compare X0, 0
	251 JumpIfEqual {1461}
	252 Move X1, X31
	253 Move V8, V0
	254 Move V9, V1
	255 Move V10, V2
	256 Move V11, V3
	257 Call Transform.get_position, X0
	258 Subtract S4, S0, S12
	259 Subtract S5, S1, S15
	260 Subtract S6, S2, S14
	261 Move V0, V8
	262 Move V1, V9
	263 Move V2, V10
	264 Move V3, V11
	265 Move X0, X31
	266 Move [X31+12], S12
	267 Call Quaternion.op_Multiply, X0, X1
	268 Move X0, X19
	269 Move X1, X31
	270 Move V11, V0
	271 Move V12, V1
	272 Move V13, V2
	273 Call Component.get_transform, X0
	274 Compare X0, 0
	275 JumpIfEqual {1461}
	276 Add X8, X31, 592
	277 Move X1, X31
	278 Call Transform.get_worldToLocalMatrix, X0
	279 Move V0, [X31+592]
	280 Move V1, [X31+608]
	281 Move V2, [X31+624]
	282 Move V3, [X31+640]
	283 Add X0, X31, 912
	284 Move X1, X31
	285 Move [X31+912], V0
	286 Move [X31+920], V1
	287 Move [X31+944], V2
	288 Move [X31+952], V3
	289 Call Matrix4x4.get_rotation, X0
	290 Move X0, [X19+376]
	291 Compare X0, 0
	292 JumpIfEqual {1461}
	293 Move X1, X31
	294 Call Transform.get_rotation, X0
	295 Move X0, [X19+208]
	296 Compare X0, 0
	297 JumpIfEqual {1461}
	298 Move V0, V11
	299 Move V1, V12
	300 Move V2, V13
	301 Move X1, X31
	302 Call Transform.set_localPosition, X0, X1
	303 Move X0, [X19+376]
	304 Compare X0, 0
	305 JumpIfEqual {1461}
	306 Move X21, [X19+208]
	307 Move X1, X31
	308 Move [X31+4], S15
	309 Move [X31+12], S14
	310 Call Transform.get_rotation, X0
	311 Move X0, X31
	312 Call Quaternion.Inverse, X0
	313 Move X0, X19
	314 Move X1, X31
	315 Move V13, V0
	316 Move V12, V1
	317 Move V11, V2
	318 Move V14, V3
	319 Call Component.get_transform, X0
	320 Compare X0, 0
	321 JumpIfEqual {1461}
	322 Move X1, X31
	323 Call Transform.get_rotation, X0
	324 Move X0, [X19+208]
	325 Compare X0, 0
	326 JumpIfEqual {1461}
	327 Move X1, X31
	328 Move V9, V0
	329 Move V8, V1
	330 Move V15, V2
	331 Move V10, V3
	332 Call Transform.get_localRotation, X0
	333 Compare X21, 0
	334 JumpIfEqual {1461}
	335 Multiply S4, S14, S9
	336 Multiply S5, S13, S10
	337 Multiply S16, S14, S8
	338 Multiply S17, S12, S10
	339 Multiply S21, S13, S9
	340 Multiply S24, S14, S15
	341 Multiply S25, S14, S10
	342 Multiply S26, S11, S10
	343 Multiply S6, S12, S15
	344 Multiply S18, S11, S9
	345 Multiply S20, S13, S8
	346 Multiply S23, S12, S8
	347 Add S4, S4, S5
	348 Add S5, S16, S17
	349 Add S16, S24, S26
	350 Subtract S17, S25, S21
	351 Multiply S7, S11, S8
	352 Multiply S19, S13, S15
	353 Multiply S22, S12, S9
	354 Multiply S27, S11, S15
	355 Add S4, S6, S4
	356 Add S5, S18, S5
	357 Add S6, S20, S16
	358 Subtract S16, S17, S23
	359 Subtract S4, S4, S7
	360 Subtract S5, S5, S19
	361 Subtract S6, S6, S22
	362 Subtract S7, S16, S27
	363 Multiply S16, S7, S3
	364 Multiply S17, S4, S0
	365 Multiply S18, S5, S1
	366 Multiply S19, S6, S2
	367 Multiply S20, S4, S1
	368 Multiply S21, S7, S2
	369 Multiply S22, S6, S3
	370 Multiply S23, S5, S0
	371 Multiply S24, S5, S3
	372 Multiply S5, S5, S2
	373 Multiply S25, S4, S2
	374 Multiply S2, S4, S3
	375 Multiply S3, S6, S0
	376 Multiply S0, S7, S0
	377 Multiply S4, S7, S1
	378 Multiply S6, S6, S1
	379 Subtract S1, S16, S17
	380 Add S7, S21, S22
	381 Add S4, S4, S24
	382 Add S0, S0, S2
	383 Subtract S1, S1, S18
	384 Add S2, S20, S7
	385 Add S4, S3, S4
	386 Add S0, S5, S0
	387 Subtract S3, S1, S19
	388 Subtract S2, S2, S23
	389 Subtract S1, S4, S25
	390 Subtract S0, S0, S6
	391 Move X0, X21
	392 Move X1, X31
	393 Call Transform.set_localRotation, X0, X1
	394 Move X0, [X24]
	395 Move X21, [X19+424]
	396 Move W8, [X0+224]
	397 Compare W8, 0
	398 JumpIfNotEqual {400}
	399 Call 0x1C17DFC
	400 Move X0, X21
	401 Move X1, X31
	402 Move X2, X31
	403 Call Object.op_Equality, X0, X1
	404 Move W21, W0
	405 Move X0, X19
	406 Move X1, X31
	407 Call Component.get_transform, X0
	408 Move S1, [X31+4]
	409 Move S2, [X31+8]
	410 Move V0, [X31+12]
	411 Compare X0, 0
	412 JumpIfEqual {1461}
	413 Move TEMP, X21
	414 And TEMP, TEMP, 1
	415 Compare TEMP, 1
	416 JumpIfNotEqual {873}
	417 Move X1, X31
	418 Call Transform.set_position, X0, X1
	419 Move X0, X19
	420 Move X1, X31
	421 Call Component.get_transform, X0
	422 Move X8, [X19+376]
	423 Compare X8, 0
	424 JumpIfEqual {1461}
	425 Move X21, X0
	426 Move X0, X8
	427 Move X1, X31
	428 Call Transform.get_rotation, X0
	429 Compare X21, 0
	430 JumpIfEqual {1461}
	431 Move X0, X21
	432 Move X0, [X24]
	433 Move X21, [X19+200]
	434 Move W8, [X0+224]
	435 Compare W8, 0
	436 JumpIfNotEqual {438}
	437 Call 0x1C17DFC
	438 Move X0, X21
	439 Move X1, X31
	440 Move X2, X31
	441 Call Object.op_Inequality, X0, X1
	442 Move TEMP, X0
	443 And TEMP, TEMP, 1
	444 Compare TEMP, 1
	445 JumpIfNotEqual {494}
	446 Move X0, [X19+200]
	447 Compare X0, 0
	448 JumpIfEqual {1461}
	449 Move X1, [X19+208]
	450 Move X2, X31
	451 Call Transform.set_parent, X0, X1
	452 Move X22, 0x2648000
	453 Move W8, [X22+1923]
	454 Move X21, [X19+200]
	455 Compare W8, 0
	456 JumpIfNotEqual {462}
	457 Move X0, 0x2363000
	458 Move X0, [X0+1440]
	459 Call 0x1C17CF4
	460 Move W8, 1
	461 Move [X22+1923], W8
	462 Move X8, 0x2363000
	463 Move X8, [X8+1440]
	464 Move X22, 0x2648000
	465 Move W9, [X22+1939]
	466 Move X8, [X8]
	467 Move X8, [X8+184]
	468 Move S10, [X8]
	469 Move S9, [X8+4]
	470 Move V8, [X8+8]
	471 Compare W9, 0
	472 JumpIfNotEqual {478}
	473 Move X0, 0x2364000
	474 Move X0, [X0+1448]
	475 Call 0x1C17CF4
	476 Move W8, 1
	477 Move [X22+1939], W8
	478 Compare X21, 0
	479 JumpIfEqual {1461}
	480 Move X8, 0x2364000
	481 Move X8, [X8+1448]
	482 Move X0, X21
	483 Move V0, V10
	484 Move V1, V9
	485 Move X8, [X8]
	486 Move V2, V8
	487 Move X1, X31
	488 Move X8, [X8+184]
	489 Move S5, [X8+8]
	490 Move S6, [X8+12]
	491 Move S3, [X8]
	492 Move S4, [X8+4]
	493 Call Transform.SetLocalPositionAndRotation, X0, X1, X2
	494 Move X0, [X24]
	495 Move X21, [X19+368]
	496 Move W8, [X0+224]
	497 Compare W8, 0
	498 JumpIfNotEqual {500}
	499 Call 0x1C17DFC
	500 Move X0, X21
	501 Move X1, X31
	502 Move X2, X31
	503 Call Object.op_Inequality, X0, X1
	504 Move TEMP, X0
	505 And TEMP, TEMP, 1
	506 Compare TEMP, 1
	507 JumpIfNotEqual {520}
	508 Move X0, [X19+368]
	509 Compare X0, 0
	510 JumpIfEqual {1461}
	511 Move W1, 1
	512 Move X2, X31
	513 Call Behaviour.set_enabled, X0, X1
	514 Move X0, [X20]
	515 Compare X0, 0
	516 JumpIfEqual {1461}
	517 Move X1, X31
	518 Call Component.get_transform, X0
	519 Move [X19+376], X0
	520 Move X25, 0x2366000
	521 Move X26, 0x2364000
	522 Move X27, 0x2366000
	523 Move X25, [X25+3480]
	524 Move X26, [X26+3696]
	525 Move X27, [X27+3464]
	526 Move X0, X19
	527 Call GrabbableItem.HandleGrabbedInfoChanged, X0
	528 Move X0, X19
	529 Call GrabbableItem.UpdateLayer, X0
	530 Move X8, [X19+456]
	531 Compare X8, 0
	532 JumpIfEqual {537}
	533 Move X9, [X8+24]
	534 Move X0, [X8+64]
	535 Move X1, [X8+40]
	536 NotImplemented "Instruction BLR not yet implemented."
	537 Move X8, [X25]
	538 Move X0, [X26]
	539 Move X8, [X8+184]
	540 Move X21, [X8+216]
	541 Call 0x1C17F10
	542 Move X2, [X27]
	543 Move X1, X19
	544 Move X3, X31
	545 Move X22, X0
	546 Call Action..ctor, X0, X1, X2
	547 Move X0, X21
	548 Move X1, X22
	549 Move X2, X31
	550 Call Delegate.Remove, X0, X1
	551 Move X1, [X26]
	552 Compare X0, 0
	553 JumpIfEqual {561}
	554 Move X8, [X0]
	555 NotImplemented "Instruction CMP not yet implemented."
	556 Move X8, [X25]
	557 Move X8, [X8+184]
	558 Move [X8+216], X0
	559 Move X9, [X0]
	560 NotImplemented "Instruction CMP not yet implemented."
	561 Move X8, [X25]
	562 Move X8, [X8+184]
	563 Move [X8+216], X0
	564 Move X21, [X8+200]
	565 Move X0, X1
	566 Call 0x1C17F10
	567 Move X2, [X27]
	568 Move X1, X19
	569 Move X3, X31
	570 Move X22, X0
	571 Call Action..ctor, X0, X1, X2
	572 Move X0, X21
	573 Move X1, X22
	574 Move X2, X31
	575 Call Delegate.Remove, X0, X1
	576 Move X1, [X26]
	577 Compare X0, 0
	578 JumpIfEqual {586}
	579 Move X8, [X0]
	580 NotImplemented "Instruction CMP not yet implemented."
	581 Move X8, [X25]
	582 Move X8, [X8+184]
	583 Move [X8+200], X0
	584 Move X9, [X0]
	585 NotImplemented "Instruction CMP not yet implemented."
	586 Move X8, [X25]
	587 Move X8, [X8+184]
	588 Move [X8+200], X0
	589 Move X28, 0x2366000
	590 Move X21, [X8+88]
	591 Move X28, [X28+3456]
	592 Move X0, X1
	593 Call 0x1C17F10
	594 Move X2, [X28]
	595 Move X1, X19
	596 Move X3, X31
	597 Move X22, X0
	598 Call Action..ctor, X0, X1, X2
	599 Move X0, X21
	600 Move X1, X22
	601 Move X2, X31
	602 Call Delegate.Remove, X0, X1
	603 Move X1, [X26]
	604 Compare X0, 0
	605 JumpIfEqual {613}
	606 Move X8, [X0]
	607 NotImplemented "Instruction CMP not yet implemented."
	608 Move X8, [X25]
	609 Move X8, [X8+184]
	610 Move [X8+88], X0
	611 Move X9, [X0]
	612 NotImplemented "Instruction CMP not yet implemented."
	613 Move X8, [X25]
	614 Move X8, [X8+184]
	615 Move [X8+88], X0
	616 Move X21, [X8+72]
	617 Move X0, X1
	618 Call 0x1C17F10
	619 Move X2, [X28]
	620 Move X1, X19
	621 Move X3, X31
	622 Move X22, X0
	623 Call Action..ctor, X0, X1, X2
	624 Move X0, X21
	625 Move X1, X22
	626 Move X2, X31
	627 Call Delegate.Remove, X0, X1
	628 Compare X0, 0
	629 JumpIfEqual {639}
	630 Move X1, [X26]
	631 Move X8, [X0]
	632 NotImplemented "Instruction CMP not yet implemented."
	633 Move X8, [X25]
	634 Move X8, [X8+184]
	635 Move [X8+72], X0
	636 Move X8, [X0]
	637 NotImplemented "Instruction CMP not yet implemented."
	638 Call 0x1C181E0
	639 Move X8, [X25]
	640 Move X8, [X8+184]
	641 Move [X8+72], X0
	642 Move X0, [X24]
	643 Move X21, [X20]
	644 Move W8, [X0+224]
	645 Compare W8, 0
	646 JumpIfNotEqual {648}
	647 Call 0x1C17DFC
	648 Move X0, X21
	649 Move X1, X31
	650 Move X2, X31
	651 Call Object.op_Inequality, X0, X1
	652 Move TEMP, X0
	653 And TEMP, TEMP, 1
	654 Compare TEMP, 1
	655 JumpIfNotEqual {848}
	656 Move X8, [X20]
	657 Compare X8, 0
	658 JumpIfEqual {1461}
	659 Move X0, [X8+64]
	660 Compare X0, 0
	661 JumpIfEqual {848}
	662 Move W8, [X0+96]
	663 Move TEMP, X8
	664 And TEMP, TEMP, 2
	665 Compare TEMP, 2
	666 JumpIfEqual {848}
	667 Move X1, X31
	668 Call NetworkObject.get_HasInputAuthority, X0
	669 Move TEMP, X0
	670 And TEMP, TEMP, 1
	671 Compare TEMP, 1
	672 JumpIfNotEqual {848}
	673 Move X8, [X20]
	674 Compare X8, 0
	675 JumpIfEqual {1461}
	676 Move W8, [X8+128]
	677 NotImplemented "Instruction CMP not yet implemented."
	678 NotImplemented "Instruction CMP not yet implemented."
	679 Compare W8, 0
	680 JumpIfNotEqual {848}
	681 Move X8, [X25]
	682 Move X0, [X26]
	683 Move X8, [X8+184]
	684 Move X20, [X8+200]
	685 Call 0x1C17F10
	686 Move X2, [X27]
	687 Move X1, X19
	688 Move X3, X31
	689 Move X21, X0
	690 Call Action..ctor, X0, X1, X2
	691 Move X0, X20
	692 Move X1, X21
	693 Move X2, X31
	694 Call Delegate.Combine, X0, X1
	695 Move X1, [X26]
	696 Compare X0, 0
	697 JumpIfEqual {794}
	698 Move X8, [X0]
	699 NotImplemented "Instruction CMP not yet implemented."
	700 Move X8, [X25]
	701 Move X8, [X8+184]
	702 Move [X8+200], X0
	703 Move X9, [X0]
	704 NotImplemented "Instruction CMP not yet implemented."
	705 Move X0, [X24]
	706 Move X21, [X19+424]
	707 Move W8, [X0+224]
	708 Compare W8, 0
	709 JumpIfNotEqual {711}
	710 Call 0x1C17DFC
	711 Move X0, X21
	712 Move X1, X31
	713 Move X2, X31
	714 Call Object.op_Equality, X0, X1
	715 Move TEMP, X0
	716 And TEMP, TEMP, 1
	717 Compare TEMP, 1
	718 JumpIfNotEqual {1358}
	719 Move X8, [X20]
	720 Compare X8, 0
	721 JumpIfEqual {1461}
	722 Move W9, [X8+128]
	723 NotImplemented "Instruction CMP not yet implemented."
	724 Move X0, [X24]
	725 Move X21, [X19+144]
	726 Move W8, [X0+224]
	727 Compare W8, 0
	728 JumpIfNotEqual {730}
	729 Call 0x1C17DFC
	730 Move X0, X21
	731 Move X1, X31
	732 Move X2, X31
	733 Call Object.op_Inequality, X0, X1
	734 Move TEMP, X0
	735 And TEMP, TEMP, 1
	736 Compare TEMP, 1
	737 JumpIfNotEqual {1007}
	738 Move X0, [X19+144]
	739 Compare X0, 0
	740 JumpIfEqual {1461}
	741 Move X1, X31
	742 Call Transform.get_localRotation, X0
	743 Move X0, X31
	744 Call Quaternion.Inverse, X0
	745 Move X0, [X19+144]
	746 Compare X0, 0
	747 JumpIfEqual {1461}
	748 Move X21, [X19+208]
	749 Move X1, X31
	750 Move V8, V0
	751 Move V9, V1
	752 Move V10, V2
	753 Move V11, V3
	754 Call Transform.get_localPosition, X0
	755 Move X20, [X19+232]
	756 Compare X20, 0
	757 JumpIfEqual {848}
	758 Move X0, X19
	759 Move X1, X31
	760 Call Component.get_transform, X0
	761 Compare X0, 0
	762 JumpIfEqual {1461}
	763 Move X1, X31
	764 Call Transform.get_position, X0
	765 Move S3, 1
	766 Move W1, 1
	767 Move X0, X20
	768 Move X2, X31
	769 Call RandomSFX.Play, X0, X1, V0, X2
	770 Move X8, [X25]
	771 Move X0, [X26]
	772 Move X8, [X8+184]
	773 Move X20, [X8+216]
	774 Call 0x1C17F10
	775 Move X2, [X27]
	776 Move X1, X19
	777 Move X3, X31
	778 Move X21, X0
	779 Call Action..ctor, X0, X1, X2
	780 Move X0, X20
	781 Move X1, X21
	782 Move X2, X31
	783 Call Delegate.Combine, X0, X1
	784 Move X1, [X26]
	785 Compare X0, 0
	786 JumpIfEqual {817}
	787 Move X8, [X0]
	788 NotImplemented "Instruction CMP not yet implemented."
	789 Move X8, [X25]
	790 Move X8, [X8+184]
	791 Move [X8+216], X0
	792 Move X9, [X0]
	793 NotImplemented "Instruction CMP not yet implemented."
	794 Move X8, [X25]
	795 Move X8, [X8+184]
	796 Move [X8+200], X0
	797 Move X20, [X8+72]
	798 Move X0, X1
	799 Call 0x1C17F10
	800 Move X2, [X28]
	801 Move X1, X19
	802 Move X3, X31
	803 Move X21, X0
	804 Call Action..ctor, X0, X1, X2
	805 Move X0, X20
	806 Move X1, X21
	807 Move X2, X31
	808 Call Delegate.Combine, X0, X1
	809 Compare X0, 0
	810 JumpIfEqual {842}
	811 Move X1, [X26]
	812 Move X8, [X0]
	813 NotImplemented "Instruction CMP not yet implemented."
	814 Move X8, [X25]
	815 Move X8, [X8+184]
	816 Move [X8+72], X0
	817 Move X8, [X25]
	818 Move X8, [X8+184]
	819 Move [X8+216], X0
	820 Move X20, [X8+88]
	821 Move X0, X1
	822 Call 0x1C17F10
	823 Move X2, [X28]
	824 Move X1, X19
	825 Move X3, X31
	826 Move X21, X0
	827 Call Action..ctor, X0, X1, X2
	828 Move X0, X20
	829 Move X1, X21
	830 Move X2, X31
	831 Call Delegate.Combine, X0, X1
	832 Compare X0, 0
	833 JumpIfEqual {845}
	834 Move X1, [X26]
	835 Move X8, [X0]
	836 NotImplemented "Instruction CMP not yet implemented."
	837 Move X8, [X25]
	838 Move X8, [X8+184]
	839 Move [X8+88], X0
	840 Move X8, [X0]
	841 NotImplemented "Instruction CMP not yet implemented."
	842 Move X8, [X25]
	843 Move X8, [X8+184]
	844 Move [X8+72], X0
	845 Move X8, [X25]
	846 Move X8, [X8+184]
	847 Move [X8+88], X0
	848 Move X8, [X23+40]
	849 Move X9, [X31+1016]
	850 NotImplemented "Instruction CMP not yet implemented."
	851 Add X31, X31, 1024
	852 Move X20, [X31+144]
	853 Move X19, [X31+152]
	854 Move X22, [X31+128]
	855 Move X21, [X31+136]
	856 Move X24, [X31+112]
	857 Move X23, [X31+120]
	858 Move X26, [X31+96]
	859 Move X25, [X31+104]
	860 Move X28, [X31+80]
	861 Move X27, [X31+88]
	862 Move X29, [X31+64]
	863 Move X30, [X31+72]
	864 Move D9, [X31+48]
	865 Move D8, [X31+56]
	866 Move D11, [X31+32]
	867 Move D10, [X31+40]
	868 Move D13, [X31+16]
	869 Move D12, [X31+24]
	870 Move D15, [X31+160]
	871 Move D14, [X31+168]
	872 Return 
	873 Add X8, X31, 528
	874 Move X1, X31
	875 Call Transform.get_worldToLocalMatrix, X0
	876 Move V0, [X31+528]
	877 Move V1, [X31+544]
	878 Move V2, [X31+560]
	879 Move V3, [X31+576]
	880 Move [X31+592], V0
	881 Move [X31+600], V1
	882 Move [X31+624], V2
	883 Move [X31+632], V3
	884 Move X0, [X19+176]
	885 Compare X0, 0
	886 JumpIfEqual {1461}
	887 Add X8, X31, 528
	888 Move X1, X31
	889 Call Transform.get_localToWorldMatrix, X0
	890 Move V0, [X31+528]
	891 Move V1, [X31+544]
	892 Move V2, [X31+560]
	893 Move V3, [X31+576]
	894 Add X8, X31, 528
	895 Add X0, X31, 464
	896 Move [X31+400], V0
	897 Move [X31+408], V1
	898 Move V0, [X31+592]
	899 Move V1, [X31+608]
	900 Move [X31+432], V2
	901 Move [X31+440], V3
	902 Move V2, [X31+624]
	903 Move V3, [X31+640]
	904 Add X1, X31, 400
	905 Move X2, X31
	906 Move [X31+464], V0
	907 Move [X31+472], V1
	908 Move [X31+496], V2
	909 Move [X31+504], V3
	910 Call Matrix4x4.op_Multiply, X0, X1
	911 Move V0, [X31+528]
	912 Move V1, [X31+544]
	913 Move V2, [X31+560]
	914 Move V3, [X31+576]
	915 Add X0, X31, 848
	916 Move X1, X31
	917 Move [X31+848], V0
	918 Move [X31+856], V1
	919 Move [X31+880], V2
	920 Move [X31+888], V3
	921 Call Matrix4x4.get_rotation, X0
	922 Move X0, X31
	923 Call Quaternion.Inverse, X0
	924 Move X0, [X19+424]
	925 Compare X0, 0
	926 JumpIfEqual {1461}
	927 Move X1, X31
	928 Move V9, V0
	929 Move V8, V1
	930 Move V10, V2
	931 Move V11, V3
	932 Call Transform.get_rotation, X0
	933 Move X0, [X19+424]
	934 Compare X0, 0
	935 JumpIfEqual {1461}
	936 Multiply S4, S11, S3
	937 Multiply S5, S9, S0
	938 Multiply S16, S8, S0
	939 Multiply S17, S10, S3
	940 Multiply S18, S11, S2
	941 Multiply S20, S11, S1
	942 Multiply S21, S10, S0
	943 Multiply S0, S11, S0
	944 Multiply S23, S9, S3
	945 Multiply S3, S8, S3
	946 Multiply S6, S8, S1
	947 Multiply S19, S9, S1
	948 Multiply S1, S10, S1
	949 Multiply S22, S9, S2
	950 Subtract S4, S4, S5
	951 Add S5, S17, S18
	952 Add S3, S3, S20
	953 Add S0, S23, S0
	954 Multiply S7, S10, S2
	955 Multiply S2, S8, S2
	956 Subtract S4, S4, S6
	957 Add S5, S16, S5
	958 Add S3, S22, S3
	959 Add S0, S1, S0
	960 Move X1, X31
	961 Subtract S8, S4, S7
	962 Subtract S9, S5, S19
	963 Subtract S10, S3, S21
	964 Subtract S11, S0, S2
	965 Call Transform.get_position, X0
	966 Add X0, X31, 848
	967 Move X1, X31
	968 Move [X31+12], S0
	969 Move V13, V1
	970 Move V14, V2
	971 Call Matrix4x4.GetPosition, X0
	972 NotImplemented "Instruction FNEG not yet implemented."
	973 NotImplemented "Instruction FNEG not yet implemented."
	974 NotImplemented "Instruction FNEG not yet implemented."
	975 Move V0, V11
	976 Move V1, V10
	977 Move V2, V9
	978 Move V3, V8
	979 Move X0, X31
	980 Move [X31+8], S8
	981 Call Quaternion.op_Multiply, X0, X1
	982 Move X0, X19
	983 Move X1, X31
	984 Move V15, V0
	985 Move V12, V1
	986 Move V8, V2
	987 Call Component.get_transform, X0
	988 Compare X0, 0
	989 JumpIfEqual {1461}
	990 Move V0, [X31+12]
	991 Add S2, S14, S8
	992 Add S1, S13, S12
	993 Move X1, X31
	994 Add S0, S0, S15
	995 Call Transform.set_position, X0, X1
	996 Move X0, X19
	997 Move X1, X31
	998 Call Component.get_transform, X0
	999 Compare X0, 0
	1000 JumpIfEqual {1461}
	1001 Move V3, [X31+8]
	1002 Move V0, V11
	1003 Move V1, V10
	1004 Move V2, V9
	1005 Move X1, X31
	1006 Call Transform.set_rotation, X0, X1
	1007 Move X8, [X20]
	1008 Compare X8, 0
	1009 JumpIfEqual {1461}
	1010 Move W8, [X8+128]
	1011 NotImplemented "Instruction CMP not yet implemented."
	1012 NotImplemented "Instruction CMP not yet implemented."
	1013 Compare W8, 0
	1014 JumpIfNotEqual {1196}
	1015 Move X0, [X24]
	1016 Move X21, [X19+160]
	1017 Move W8, [X0+224]
	1018 Compare W8, 0
	1019 JumpIfNotEqual {1021}
	1020 Call 0x1C17DFC
	1021 Move X0, X21
	1022 Move X1, X31
	1023 Move X2, X31
	1024 Call Object.op_Inequality, X0, X1
	1025 Move TEMP, X0
	1026 And TEMP, TEMP, 1
	1027 Compare TEMP, 1
	1028 JumpIfNotEqual {1321}
	1029 Move X0, X19
	1030 Move X1, X31
	1031 Call Component.get_transform, X0
	1032 Compare X0, 0
	1033 JumpIfEqual {1461}
	1034 Add X8, X31, 528
	1035 Move X1, X31
	1036 Call Transform.get_worldToLocalMatrix, X0
	1037 Move V0, [X31+528]
	1038 Move V1, [X31+544]
	1039 Move V2, [X31+560]
	1040 Move V3, [X31+576]
	1041 Move [X31+592], V0
	1042 Move [X31+600], V1
	1043 Move [X31+624], V2
	1044 Move [X31+632], V3
	1045 Move X0, [X19+160]
	1046 Compare X0, 0
	1047 JumpIfEqual {1461}
	1048 Add X8, X31, 528
	1049 Move X1, X31
	1050 Call Transform.get_localToWorldMatrix, X0
	1051 Move V0, [X31+528]
	1052 Move V1, [X31+544]
	1053 Move V2, [X31+560]
	1054 Move V3, [X31+576]
	1055 Add X8, X31, 528
	1056 Add X0, X31, 336
	1057 Move [X31+272], V0
	1058 Move [X31+280], V1
	1059 Move V0, [X31+592]
	1060 Move V1, [X31+608]
	1061 Move [X31+304], V2
	1062 Move [X31+312], V3
	1063 Move V2, [X31+624]
	1064 Move V3, [X31+640]
	1065 Add X1, X31, 272
	1066 Move X2, X31
	1067 Move [X31+336], V0
	1068 Move [X31+344], V1
	1069 Move [X31+368], V2
	1070 Move [X31+376], V3
	1071 Call Matrix4x4.op_Multiply, X0, X1
	1072 Move V0, [X31+528]
	1073 Move V1, [X31+544]
	1074 Move V2, [X31+560]
	1075 Move V3, [X31+576]
	1076 Add X0, X31, 784
	1077 Move X1, X31
	1078 Move [X31+784], V0
	1079 Move [X31+792], V1
	1080 Move [X31+816], V2
	1081 Move [X31+824], V3
	1082 Call Matrix4x4.get_rotation, X0
	1083 Move X0, X31
	1084 Call Quaternion.Inverse, X0
	1085 Move X21, [X19+208]
	1086 Add X0, X31, 784
	1087 Move X1, X31
	1088 Move V8, V0
	1089 Move V9, V1
	1090 Move V10, V2
	1091 Move V11, V3
	1092 Call Matrix4x4.GetPosition, X0
	1093 NotImplemented "Instruction FNEG not yet implemented."
	1094 NotImplemented "Instruction FNEG not yet implemented."
	1095 NotImplemented "Instruction FNEG not yet implemented."
	1096 Move V0, V8
	1097 Move V1, V9
	1098 Move V2, V10
	1099 Move V3, V11
	1100 Move X0, X31
	1101 Call Quaternion.op_Multiply, X0, X1
	1102 Compare X21, 0
	1103 JumpIfEqual {1461}
	1104 Move V3, [X19+608]
	1105 Move V4, [X19+604]
	1106 Move V5, [X19+600]
	1107 Move X0, [X24]
	1108 Move X21, [X19+152]
	1109 Move W8, [X0+224]
	1110 Compare W8, 0
	1111 JumpIfNotEqual {1113}
	1112 Call 0x1C17DFC
	1113 Move X0, X21
	1114 Move X1, X31
	1115 Move X2, X31
	1116 Call Object.op_Inequality, X0, X1
	1117 Move TEMP, X0
	1118 And TEMP, TEMP, 1
	1119 Compare TEMP, 1
	1120 JumpIfNotEqual {1196}
	1121 Move X0, X19
	1122 Move X1, X31
	1123 Call Component.get_transform, X0
	1124 Compare X0, 0
	1125 JumpIfEqual {1461}
	1126 Add X8, X31, 528
	1127 Move X1, X31
	1128 Call Transform.get_worldToLocalMatrix, X0
	1129 Move V0, [X31+528]
	1130 Move V1, [X31+544]
	1131 Move V2, [X31+560]
	1132 Move V3, [X31+576]
	1133 Move [X31+592], V0
	1134 Move [X31+600], V1
	1135 Move [X31+624], V2
	1136 Move [X31+632], V3
	1137 Move X0, [X19+152]
	1138 Compare X0, 0
	1139 JumpIfEqual {1461}
	1140 Add X8, X31, 528
	1141 Move X1, X31
	1142 Call Transform.get_localToWorldMatrix, X0
	1143 Move V0, [X31+528]
	1144 Move V1, [X31+544]
	1145 Move V2, [X31+560]
	1146 Move V3, [X31+576]
	1147 Add X8, X31, 528
	1148 Add X0, X31, 80
	1149 Move [X31+16], V0
	1150 Move [X31+24], V1
	1151 Move V0, [X31+592]
	1152 Move V1, [X31+608]
	1153 Move [X31+48], V2
	1154 Move [X31+56], V3
	1155 Move V2, [X31+624]
	1156 Move V3, [X31+640]
	1157 Add X1, X31, 16
	1158 Move X2, X31
	1159 Move [X31+80], V0
	1160 Move [X31+88], V1
	1161 Move [X31+112], V2
	1162 Move [X31+120], V3
	1163 Call Matrix4x4.op_Multiply, X0, X1
	1164 Move V0, [X31+528]
	1165 Move V1, [X31+544]
	1166 Move V2, [X31+560]
	1167 Move V3, [X31+576]
	1168 Add X0, X31, 656
	1169 Move X1, X31
	1170 Move [X31+656], V0
	1171 Move [X31+664], V1
	1172 Move [X31+688], V2
	1173 Move [X31+696], V3
	1174 Call Matrix4x4.get_rotation, X0
	1175 Move X0, X31
	1176 Call Quaternion.Inverse, X0
	1177 Move X21, [X19+208]
	1178 Add X0, X31, 656
	1179 Move X1, X31
	1180 Move V8, V0
	1181 Move V9, V1
	1182 Move V10, V2
	1183 Move V11, V3
	1184 Call Matrix4x4.GetPosition, X0
	1185 NotImplemented "Instruction FNEG not yet implemented."
	1186 NotImplemented "Instruction FNEG not yet implemented."
	1187 NotImplemented "Instruction FNEG not yet implemented."
	1188 Move V0, V8
	1189 Move V1, V9
	1190 Move V2, V10
	1191 Move V3, V11
	1192 Move X0, X31
	1193 Call Quaternion.op_Multiply, X0, X1
	1194 Compare X21, 0
	1195 JumpIfNotEqual {1311}
	1196 Move X22, 0x2647000
	1197 Move W8, [X22+1923]
	1198 Move X21, [X19+208]
	1199 Compare W8, 0
	1200 JumpIfNotEqual {1206}
	1201 Move X0, 0x2362000
	1202 Move X0, [X0+1440]
	1203 Call 0x1C17CF4
	1204 Move W8, 1
	1205 Move [X22+1923], W8
	1206 Compare X21, 0
	1207 JumpIfEqual {1461}
	1208 Move X8, 0x2362000
	1209 Move X8, [X8+1440]
	1210 Move X0, X21
	1211 Move X8, [X8]
	1212 Move X8, [X8+184]
	1213 Move S1, [X8+4]
	1214 Move S2, [X8+8]
	1215 Move V0, [X8]
	1216 Move X0, [X24]
	1217 Move X21, [X19+168]
	1218 Move W8, [X0+224]
	1219 Compare W8, 0
	1220 JumpIfNotEqual {1222}
	1221 Call 0x1C17DFC
	1222 Move X0, X21
	1223 Move X1, X31
	1224 Move X2, X31
	1225 Call Object.op_Inequality, X0, X1
	1226 Move TEMP, X0
	1227 And TEMP, TEMP, 1
	1228 Compare TEMP, 1
	1229 JumpIfNotEqual {1327}
	1230 Move X0, X19
	1231 Move X1, X31
	1232 Call Component.get_transform, X0
	1233 Compare X0, 0
	1234 JumpIfEqual {1461}
	1235 Add X8, X31, 528
	1236 Move X1, X31
	1237 Call Transform.get_worldToLocalMatrix, X0
	1238 Move V0, [X31+528]
	1239 Move V1, [X31+544]
	1240 Move V2, [X31+560]
	1241 Move V3, [X31+576]
	1242 Move [X31+592], V0
	1243 Move [X31+600], V1
	1244 Move [X31+624], V2
	1245 Move [X31+632], V3
	1246 Move X0, [X19+168]
	1247 Compare X0, 0
	1248 JumpIfEqual {1461}
	1249 Add X8, X31, 528
	1250 Move X1, X31
	1251 Call Transform.get_localToWorldMatrix, X0
	1252 Move V0, [X31+528]
	1253 Move V1, [X31+544]
	1254 Move V2, [X31+560]
	1255 Move V3, [X31+576]
	1256 Add X8, X31, 528
	1257 Add X0, X31, 208
	1258 Move [X31+144], V0
	1259 Move [X31+152], V1
	1260 Move V0, [X31+592]
	1261 Move V1, [X31+608]
	1262 Move [X31+176], V2
	1263 Move [X31+184], V3
	1264 Move V2, [X31+624]
	1265 Move V3, [X31+640]
	1266 Add X1, X31, 144
	1267 Move X2, X31
	1268 Move [X31+208], V0
	1269 Move [X31+216], V1
	1270 Move [X31+240], V2
	1271 Move [X31+248], V3
	1272 Call Matrix4x4.op_Multiply, X0, X1
	1273 Move V0, [X31+528]
	1274 Move V1, [X31+544]
	1275 Move V2, [X31+560]
	1276 Move V3, [X31+576]
	1277 Add X0, X31, 720
	1278 Move X1, X31
	1279 Move [X31+720], V0
	1280 Move [X31+728], V1
	1281 Move [X31+752], V2
	1282 Move [X31+760], V3
	1283 Call Matrix4x4.get_rotation, X0
	1284 Move X0, X31
	1285 Call Quaternion.Inverse, X0
	1286 Move X21, [X19+208]
	1287 Add X0, X31, 720
	1288 Move X1, X31
	1289 Move V8, V0
	1290 Move V9, V1
	1291 Move V10, V2
	1292 Move V11, V3
	1293 Call Matrix4x4.GetPosition, X0
	1294 NotImplemented "Instruction FNEG not yet implemented."
	1295 NotImplemented "Instruction FNEG not yet implemented."
	1296 NotImplemented "Instruction FNEG not yet implemented."
	1297 Move V0, V8
	1298 Move V1, V9
	1299 Move V2, V10
	1300 Move V3, V11
	1301 Move X0, X31
	1302 Call Quaternion.op_Multiply, X0, X1
	1303 Compare X21, 0
	1304 JumpIfEqual {1461}
	1305 Move V3, [X19+596]
	1306 Move V4, [X19+592]
	1307 Move V5, [X19+588]
	1308 Add S2, S2, S3
	1309 Add S1, S1, S4
	1310 Add S0, S0, S5
	1311 Move X0, X21
	1312 Move X1, X31
	1313 Call Transform.set_localPosition, X0, X1
	1314 Move X0, [X19+208]
	1315 Compare X0, 0
	1316 JumpIfEqual {1461}
	1317 Move V0, V8
	1318 Move V1, V9
	1319 Move V2, V10
	1320 Move V3, V11
	1321 Move X0, [X19+208]
	1322 Compare X0, 0
	1323 JumpIfEqual {1461}
	1324 Move V2, [X19+608]
	1325 Move V1, [X19+604]
	1326 Move V0, [X19+600]
	1327 Move X0, [X19+208]
	1328 Compare X0, 0
	1329 JumpIfEqual {1461}
	1330 Move V2, [X19+596]
	1331 Move V1, [X19+592]
	1332 Move V0, [X19+588]
	1333 Move X1, X31
	1334 Call Transform.set_localPosition, X0, X1
	1335 Move X22, 0x2647000
	1336 Move W8, [X22+1939]
	1337 Move X21, [X19+208]
	1338 Compare W8, 0
	1339 JumpIfNotEqual {1345}
	1340 Move X0, 0x2363000
	1341 Move X0, [X0+1448]
	1342 Call 0x1C17CF4
	1343 Move W8, 1
	1344 Move [X22+1939], W8
	1345 Compare X21, 0
	1346 JumpIfEqual {1461}
	1347 Move X8, 0x2363000
	1348 Move X8, [X8+1448]
	1349 Move X0, X21
	1350 Move X8, [X8]
	1351 Move X8, [X8+184]
	1352 Move S2, [X8+8]
	1353 Move S3, [X8+12]
	1354 Move S0, [X8]
	1355 Move S1, [X8+4]
	1356 Move X1, X31
	1357 Call Transform.set_localRotation, X0, X1
	1358 Move X21, [X19+360]
	1359 Move X0, X19
	1360 Move X1, X31
	1361 Call Component.get_transform, X0
	1362 Compare X0, 0
	1363 JumpIfEqual {1461}
	1364 Move X1, X31
	1365 Call Transform.get_position, X0
	1366 Compare X21, 0
	1367 JumpIfEqual {1461}
	1368 Move X0, X21
	1369 Move X1, X31
	1370 Call Rigidbody.set_position, X0, X1
	1371 Move X21, [X19+360]
	1372 Move X0, X19
	1373 Move X1, X31
	1374 Call Component.get_transform, X0
	1375 Compare X0, 0
	1376 JumpIfEqual {1461}
	1377 Move X1, X31
	1378 Call Transform.get_rotation, X0
	1379 Compare X21, 0
	1380 JumpIfEqual {1461}
	1381 Move X0, X21
	1382 Move X1, X31
	1383 Call Rigidbody.set_rotation, X0, X1
	1384 Move X0, X19
	1385 Move X1, X31
	1386 Call Component.get_transform, X0
	1387 Compare X0, 0
	1388 JumpIfEqual {1461}
	1389 Move X1, X31
	1390 Call Transform.get_position, X0
	1391 Move X0, [X19+208]
	1392 Move [X19+404], S0
	1393 Move [X19+408], S1
	1394 Move [X19+412], S2
	1395 Compare X0, 0
	1396 JumpIfEqual {1461}
	1397 Move X1, X31
	1398 Call Transform.get_localPosition, X0
	1399 Move X0, [X19+208]
	1400 Compare X0, 0
	1401 JumpIfEqual {1461}
	1402 Move X1, X31
	1403 Move V8, V0
	1404 Move V9, V1
	1405 Move V10, V2
	1406 Call Transform.get_localRotation, X0
	1407 Add X1, X31, 984
	1408 Move X0, X19
	1409 Move [X31+984], S8
	1410 Move [X31+988], S9
	1411 Move [X31+992], S10
	1412 Move [X31+996], S0
	1413 Move [X31+1000], S1
	1414 Move [X31+1004], S2
	1415 Move [X31+1008], S3
	1416 Call GrabbableItem.RPC_SetGrabbedOffsets, X0, X1
	1417 Move X0, X19
	1418 Call GrabbableItem.SnapToFollow, X0
	1419 Move X0, [X19+64]
	1420 Compare X0, 0
	1421 JumpIfEqual {1433}
	1422 Move W8, [X0+96]
	1423 Move TEMP, X8
	1424 And TEMP, TEMP, 2
	1425 Compare TEMP, 2
	1426 JumpIfEqual {1433}
	1427 Move X1, X31
	1428 Call NetworkObject.get_HasStateAuthority, X0
	1429 Move TEMP, X0
	1430 And TEMP, TEMP, 1
	1431 Compare TEMP, 1
	1432 JumpIfEqual {520}
	1433 Move X8, [X19+56]
	1434 Compare X8, 0
	1435 JumpIfEqual {1461}
	1436 Move W8, [X8+392]
	1437 NotImplemented "Instruction CMP not yet implemented."
	1438 Move X0, [X19+64]
	1439 Compare X0, 0
	1440 JumpIfEqual {1461}
	1441 Move X1, X31
	1442 Call NetworkObject.RequestStateAuthority, X0
	1443 Move X0, [X24]
	1444 Move X21, [X19+368]
	1445 Move W8, [X0+224]
	1446 Compare W8, 0
	1447 JumpIfNotEqual {1449}
	1448 Call 0x1C17DFC
	1449 Move X0, X21
	1450 Move X1, X31
	1451 Move X2, X31
	1452 Call Object.op_Inequality, X0, X1
	1453 Move TEMP, X0
	1454 And TEMP, TEMP, 1
	1455 Compare TEMP, 1
	1456 JumpIfNotEqual {520}
	1457 Move X0, [X19+368]
	1458 Compare X0, 0
	1459 JumpIfEqual {1461}
	1460 Move W1, W31
	1461 Call 0x1C17F20
	1462 Call 0x1C17F28
	1463 Call 0x3EB2B20

Method: System.Void InitSpawn()

Disassembly:
	0x01D93FE0 CMP X8, X9
	0x01D93FE4 B.NE 0x1D94004
	0x01D93FE8 LDP X20, X19, [X31 + 0x80]
	0x01D93FEC LDP X30, X21, [X31 + 0x70]
	0x01D93FF0 LDP D9, D8, [X31 + 0x60]
	0x01D93FF4 LDR V10, [X31 + 0x50]
	0x01D93FF8 ADD X31, X31, 0x90
	0x01D93FFC RET
	0x01D94000 BL 0x1C16F20
	0x01D94004 BL 0x3EB1B20
	0x01D94008 STR X30, [X31 - 0x30]!
	0x01D9400C STP X22, X21, [X31 + 0x10]
	0x01D94010 STP X20, X19, [X31 + 0x20]
	0x01D94014 ADRP X22, 0x2644000
	0x01D94018 LDRB W8, [X22 + 0xA05]
	0x01D9401C MOV W21, W2
	0x01D94020 MOV X20, X1
	0x01D94024 MOV X19, X0
	0x01D94028 TBNZ X8, 0x0, 0x1D9404C
	0x01D9402C ADRP X0, 0x2362000
	0x01D94030 LDR X0, [X0 + 0xD18]
	0x01D94034 BL 0x1C16CF4
	0x01D94038 ADRP X0, 0x2362000
	0x01D9403C LDR X0, [X0 + 0xD58]
	0x01D94040 BL 0x1C16CF4
	0x01D94044 MOVZ W8, 0x1
	0x01D94048 STRB W8, [X22 + 0xA05]
	0x01D9404C AND W2, W21, 0x1
	0x01D94050 MOV X0, X19
	0x01D94054 MOV X1, X20
	0x01D94058 MOV X3, X31
	0x01D9405C BL 0x1E73F8C
	0x01D94060 LDR X8, [X19 + 0x1F0]
	0x01D94064 CBZ X8, 0x1D9407C
	0x01D94068 LDR X9, [X8 + 0x18]
	0x01D9406C LDR X0, [X8 + 0x40]
	0x01D94070 LDR X2, [X8 + 0x28]
	0x01D94074 MOV X1, X20
	0x01D94078 BLR X9
	0x01D9407C LDR X8, [X19 + 0x80]
	0x01D94080 CBZ X8, 0x1D940E8
	0x01D94084 LDR W8, [X8 + 0x28]
	0x01D94088 CMP W8, 0x2
	0x01D9408C B.NE 0x1D940D8
	0x01D94090 ADRP X20, 0x2362000
	0x01D94094 LDR X20, [X20 + 0xD18]
	0x01D94098 LDR X0, [X20]
	0x01D9409C LDR W8, [X0 + 0xE0]
	0x01D940A0 CBNZ W8, 0x1D940AC
	0x01D940A4 BL 0x1C16DFC
	0x01D940A8 LDR X0, [X20]
	0x01D940AC LDR X8, [X0 + 0xB8]
	0x01D940B0 LDR X0, [X8]
	0x01D940B4 CBZ X0, 0x1D940E8
	0x01D940B8 ADRP X8, 0x2362000
	0x01D940BC LDR X8, [X8 + 0xD58]
	0x01D940C0 MOV X1, X19
	0x01D940C4 LDP X20, X19, [X31 + 0x20]
	0x01D940C8 LDP X22, X21, [X31 + 0x10]
	0x01D940CC LDR X2, [X8]
	0x01D940D0 LDR X30, [X31], #0x30
	0x01D940D4 B 0x2DBE67C
	0x01D940D8 LDP X20, X19, [X31 + 0x20]
	0x01D940DC LDP X22, X21, [X31 + 0x10]
	0x01D940E0 LDR X30, [X31], #0x30
	0x01D940E4 RET
	0x01D940E8 BL 0x1C16F20
	0x01D940EC LDR X8, [X0 + 0x1D0]
	0x01D940F0 CBZ X8, 0x1D94104
	0x01D940F4 LDR X2, [X8 + 0x18]
	0x01D940F8 LDR X0, [X8 + 0x40]
	0x01D940FC LDR X1, [X8 + 0x28]
	0x01D94100 BR X2
	0x01D94104 RET
	0x01D94108 LDR X8, [X0 + 0x1D8]
	0x01D9410C CBZ X8, 0x1D94120
	0x01D94110 LDR X2, [X8 + 0x18]
	0x01D94114 LDR X0, [X8 + 0x40]
	0x01D94118 LDR X1, [X8 + 0x28]
	0x01D9411C BR X2
	0x01D94120 RET
	0x01D94124 STR D10, [X31 - 0x30]!
	0x01D94128 STP D9, D8, [X31 + 0x8]
	0x01D9412C STR X30, [X31 + 0x18]
	0x01D94130 STP X20, X19, [X31 + 0x20]
	0x01D94134 MOV X19, X0
	0x01D94138 LDR X0, [X0 + 0x168]
	0x01D9413C CBZ X0, 0x1D941EC
	0x01D94140 MOV X1, X31
	0x01D94144 BL 0x3C8EF74
	0x01D94148 LDR X0, [X19 + 0x168]
	0x01D9414C CBZ X0, 0x1D941EC
	0x01D94150 MOV X1, X31
	0x01D94154 BL 0x3C8F0AC
	0x01D94158 LDR X0, [X19 + 0x168]
	0x01D9415C CBZ X0, 0x1D941EC
	0x01D94160 MOV X1, X31
	0x01D94164 BL 0x3C8E868
	0x01D94168 ADRP X20, 0x2644000
	0x01D9416C LDRB W8, [X20 + 0x786]
	0x01D94170 MOV V8.16B, V0.16B
	0x01D94174 MOV V9.16B, V1.16B
	0x01D94178 MOV V10.16B, V2.16B
	0x01D9417C CBNZ W8, 0x1D94194
	0x01D94180 ADRP X0, 0x235F000
	0x01D94184 LDR X0, [X0 + 0x5A0]
	0x01D94188 BL 0x1C16CF4
	0x01D9418C MOVZ W8, 0x1
	0x01D94190 STRB W8, [X20 + 0x786]
	0x01D94194 ADRP X8, 0x235F000
	0x01D94198 LDR X8, [X8 + 0x5A0]
	0x01D9419C FMOV S5, 5
	0x01D941A0 MOV X0, X31
	0x01D941A4 LDR X8, [X8]
	0x01D941A8 LDR X8, [X8 + 0xB8]
	0x01D941AC LDP S0, S1, [X8 + 0x18]
	0x01D941B0 LDR V2, [X8 + 0x20]
	0x01D941B4 FMUL S3, S0, S5
	0x01D941B8 FMUL S4, S1, S5
	0x01D941BC FMUL S5, S2, S5
	0x01D941C0 MOV V0.16B, V8.16B
	0x01D941C4 MOV V1.16B, V9.16B
	0x01D941C8 MOV V2.16B, V10.16B
	0x01D941CC BL 0x1D97268
	0x01D941D0 LDR X20, [X19 + 0x168]
	0x01D941D4 MOV X0, X20
	0x01D941D8 BL 0x19903C0
	0x01D941DC MOV X0, X20
	0x01D941E0 MOV X1, X31
	0x01D941E4 BL 0x3C8E9A0
	0x01D941E8 STR X31, [X19 + 0x1A0]
	0x01D941EC BL 0x1C16F20
	0x01D941F0 LDR X8, [X0 + 0x1D0]
	0x01D941F4 CBZ X8, 0x1D94208
	0x01D941F8 LDR X2, [X8 + 0x18]
	0x01D941FC LDR X0, [X8 + 0x40]
	0x01D94200 LDR X1, [X8 + 0x28]
	0x01D94204 BR X2
	0x01D94208 RET

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], D9
	003 Move [X31+56], D8
	004 Move [X31+64], X30
	005 Move [X31+72], X25
	006 Move [X31+80], X24
	007 Move [X31+88], X23
	008 Move [X31+96], X22
	009 Move [X31+104], X21
	010 Move [X31+112], X20
	011 Move [X31+120], X19
	012 NotImplemented "Instruction MRS not yet implemented."
	013 Move X8, [X21+40]
	014 Move X22, 0x2645000
	015 Move X19, X0
	016 Move [X31+40], X8
	017 Move W8, [X22+1923]
	018 Move X20, [X0+360]
	019 Compare W8, 0
	020 JumpIfNotEqual {26}
	021 Move X0, 0x2360000
	022 Move X0, [X0+1440]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+1923], W8
	026 Compare X20, 0
	027 JumpIfEqual {162}
	028 Move X23, 0x2360000
	029 Move X23, [X23+1440]
	030 Move X0, X20
	031 Move X1, X31
	032 Move X8, [X23]
	033 Move X8, [X8+184]
	034 Move S1, [X8+4]
	035 Move S2, [X8+8]
	036 Move V0, [X8]
	037 Call Rigidbody.set_velocity, X0, X1
	038 Move W8, [X22+1923]
	039 Move X20, [X19+360]
	040 Compare W8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, 0x2360000
	043 Move X0, [X0+1440]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X22+1923], W8
	047 Compare X20, 0
	048 JumpIfEqual {162}
	049 Move X8, [X23]
	050 Move X0, X20
	051 Move X1, X31
	052 Move X8, [X8+184]
	053 Move S1, [X8+4]
	054 Move S2, [X8+8]
	055 Move V0, [X8]
	056 Call Rigidbody.set_angularVelocity, X0, X1
	057 Move W8, [X22+1923]
	058 Move X20, [X19+208]
	059 Compare W8, 0
	060 JumpIfNotEqual {66}
	061 Move X0, 0x2360000
	062 Move X0, [X0+1440]
	063 Call 0x1C17CF4
	064 Move W8, 1
	065 Move [X22+1923], W8
	066 Compare X20, 0
	067 JumpIfEqual {162}
	068 Move X8, [X23]
	069 Move X0, X20
	070 Move X1, X31
	071 Move X8, [X8+184]
	072 Move S1, [X8+4]
	073 Move S2, [X8+8]
	074 Move V0, [X8]
	075 Call Transform.set_localPosition, X0, X1
	076 Move X24, 0x2645000
	077 Move W8, [X24+1939]
	078 Move X20, [X19+208]
	079 Compare W8, 0
	080 JumpIfNotEqual {86}
	081 Move X0, 0x2361000
	082 Move X0, [X0+1448]
	083 Call 0x1C17CF4
	084 Move W8, 1
	085 Move [X24+1939], W8
	086 Compare X20, 0
	087 JumpIfEqual {162}
	088 Move X25, 0x2361000
	089 Move X25, [X25+1448]
	090 Move X0, X20
	091 Move X1, X31
	092 Move X8, [X25]
	093 Move X8, [X8+184]
	094 Move S2, [X8+8]
	095 Move S3, [X8+12]
	096 Move S0, [X8]
	097 Move S1, [X8+4]
	098 Call Transform.set_localRotation, X0, X1
	099 Move W8, [X22+1923]
	100 Compare W8, 0
	101 JumpIfNotEqual {107}
	102 Move X0, 0x2360000
	103 Move X0, [X0+1440]
	104 Call 0x1C17CF4
	105 Move W8, 1
	106 Move [X22+1923], W8
	107 Move X8, [X23]
	108 Move W9, [X24+1939]
	109 Move X8, [X8+184]
	110 Move V9, [X8]
	111 Move V8, [X8+8]
	112 Compare W9, 0
	113 JumpIfNotEqual {119}
	114 Move X0, 0x2361000
	115 Move X0, [X0+1448]
	116 Call 0x1C17CF4
	117 Move W8, 1
	118 Move [X24+1939], W8
	119 Move X8, [X25]
	120 Add X1, X31, 8
	121 Move X0, X19
	122 Move X8, [X8+184]
	123 Move V0, [X8]
	124 Move [X31+8], D9
	125 Move [X31+16], S8
	126 Move [X31+20], V0
	127 Call GrabbableItem.set_grabbedInfo, X0, X1
	128 Move X0, X31
	129 Call TickTimer.get_None
	130 And X1, X0, 0
	131 Move X0, X19
	132 Call GrabbableItem.set_respawnTimer, X0, X1
	133 Move X0, X31
	134 Call NetworkBehaviourId.get_None
	135 Move X1, X0
	136 Move X0, X19
	137 Call GrabbableItem.set_attachedAnchorId, X0, X1
	138 Move X0, X31
	139 Call NetworkBehaviourId.get_None
	140 Move X1, X0
	141 Move X0, X19
	142 Call GrabbableItem.set_backpackId, X0, X1
	143 Move X0, X19
	144 Call GrabbableItem.HandleGrabbedChanged, X0
	145 Move X0, X19
	146 Call GrabbableItem.ResetStuckAnchor, X0
	147 Move X8, [X21+40]
	148 Move X9, [X31+40]
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move X20, [X31+112]
	151 Move X19, [X31+120]
	152 Move X22, [X31+96]
	153 Move X21, [X31+104]
	154 Move X24, [X31+80]
	155 Move X23, [X31+88]
	156 Move X30, [X31+64]
	157 Move X25, [X31+72]
	158 Move D9, [X31+48]
	159 Move D8, [X31+56]
	160 Add X31, X31, 128
	161 Return 
	162 Call 0x1C17F20
	163 Call 0x3EB2B20

Method: System.Void Respawn()

Disassembly:
	0x01D9420C LDR X8, [X0 + 0x1D8]

ISIL:
No ISIL was generated
Method: System.Void RPC_Respawn()

Disassembly:
	0x01D94210 CBZ X8, 0x1D94224
	0x01D94214 LDR X2, [X8 + 0x18]
	0x01D94218 LDR X0, [X8 + 0x40]
	0x01D9421C LDR X1, [X8 + 0x28]
	0x01D94220 BR X2
	0x01D94224 RET
	0x01D94228 SUB X31, X31, 0xA0
	0x01D9422C STR D14, [X31 + 0x30]
	0x01D94230 STP D13, D12, [X31 + 0x38]
	0x01D94234 STP D11, D10, [X31 + 0x48]
	0x01D94238 STP D9, D8, [X31 + 0x58]
	0x01D9423C STR X30, [X31 + 0x68]
	0x01D94240 STP X24, X23, [X31 + 0x70]
	0x01D94244 STP X22, X21, [X31 + 0x80]
	0x01D94248 STP X20, X19, [X31 + 0x90]
	0x01D9424C ADRP X20, 0x2644000
	0x01D94250 ADRP X22, 0x235F000
	0x01D94254 LDRB W8, [X20 + 0xA06]
	0x01D94258 LDR X22, [X22 + 0x598]
	0x01D9425C MOV X19, X0
	0x01D94260 TBNZ X8, 0x0, 0x1D942D8
	0x01D94264 ADRP X0, 0x235F000
	0x01D94268 LDR X0, [X0 + 0x710]
	0x01D9426C BL 0x1C16CF4
	0x01D94270 ADRP X0, 0x235F000
	0x01D94274 LDR X0, [X0 + 0x718]
	0x01D94278 BL 0x1C16CF4
	0x01D9427C ADRP X0, 0x235F000
	0x01D94280 LDR X0, [X0 + 0x720]
	0x01D94284 BL 0x1C16CF4
	0x01D94288 ADRP X0, 0x235F000
	0x01D9428C LDR X0, [X0 + 0x788]
	0x01D94290 BL 0x1C16CF4
	0x01D94294 ADRP X0, 0x235F000
	0x01D94298 LDR X0, [X0 + 0x598]
	0x01D9429C BL 0x1C16CF4
	0x01D942A0 ADRP X0, 0x2362000
	0x01D942A4 LDR X0, [X0 + 0xE08]
	0x01D942A8 BL 0x1C16CF4
	0x01D942AC ADRP X0, 0x2362000
	0x01D942B0 LDR X0, [X0 + 0xE10]
	0x01D942B4 BL 0x1C16CF4
	0x01D942B8 ADRP X0, 0x2362000
	0x01D942BC LDR X0, [X0 + 0xE18]
	0x01D942C0 BL 0x1C16CF4
	0x01D942C4 ADRP X0, 0x2362000
	0x01D942C8 LDR X0, [X0 + 0xE20]
	0x01D942CC BL 0x1C16CF4
	0x01D942D0 MOVZ W8, 0x1
	0x01D942D4 STRB W8, [X20 + 0xA06]
	0x01D942D8 MOV X0, X19
	0x01D942DC MOV X1, X31
	0x01D942E0 STR X31, [X31 + 0x28]
	0x01D942E4 STR W31, [X31 + 0x20]
	0x01D942E8 BL 0x1E73D04
	0x01D942EC MOV X0, X19
	0x01D942F0 BL 0x1D8D0A8
	0x01D942F4 LDR X8, [X22]
	0x01D942F8 LDR X21, [X19 + 0x150]
	0x01D942FC MOV W20, W0
	0x01D94300 LDR W9, [X8 + 0xE0]
	0x01D94304 CBNZ W9, 0x1D94310
	0x01D94308 MOV X0, X8
	0x01D9430C BL 0x1C16DFC
	0x01D94310 MOV X0, X21
	0x01D94314 MOV X1, X31
	0x01D94318 MOV X2, X31
	0x01D9431C BL 0x3C354F8
	0x01D94320 TBZ X20, 0x0, 0x1D944A8
	0x01D94324 TBZ X0, 0x0, 0x1D94504
	0x01D94328 LDR X0, [X19 + 0x150]
	0x01D9432C CBZ X0, 0x1D9479C
	0x01D94330 LDR X8, [X0 + 0x40]
	0x01D94334 CBZ X8, 0x1D94358
	0x01D94338 LDRB W9, [X8 + 0x60]
	0x01D9433C TBNZ X9, 0x1, 0x1D94358
	0x01D94340 MOV X0, X8
	0x01D94344 MOV X1, X31
	0x01D94348 BL 0x1E93668
	0x01D9434C TBNZ X0, 0x0, 0x1D9443C
	0x01D94350 LDR X0, [X19 + 0x150]
	0x01D94354 CBZ X0, 0x1D9479C
	0x01D94358 LDR X20, [X19 + 0x168]
	0x01D9435C MOV X1, X31
	0x01D94360 BL 0x3C32E90
	0x01D94364 CBZ X0, 0x1D9479C
	0x01D94368 MOV X1, X31
	0x01D9436C BL 0x3C3F58C
	0x01D94370 CBZ X20, 0x1D9479C
	0x01D94374 MOV X0, X20
	0x01D94378 MOV X1, X31
	0x01D9437C BL 0x3C8F014
	0x01D94380 LDR X0, [X19 + 0x150]
	0x01D94384 CBZ X0, 0x1D9479C
	0x01D94388 LDR X20, [X19 + 0x168]
	0x01D9438C MOV X1, X31
	0x01D94390 BL 0x3C32E90

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2645000
	005 Move W8, [X20+2560]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x2363000
	012 Move X0, [X0+2680]
	013 Call 0x1C17CF4
	014 Move X0, 0x2363000
	015 Move X0, [X0+3560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2560], W8
	019 Move W8, [X19+88]
	020 Compare W8, 0
	021 JumpIfEqual {27}
	022 Move [X19+88], W31
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Move X20, 0x2363000
	028 Move X20, [X20+2680]
	029 Move X0, [X20]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	037 Move X0, [X19+56]
	038 Compare X0, 0
	039 JumpIfEqual {121}
	040 Move X1, X31
	041 Call NetworkRunner.get_Stage, X0
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Return 
	047 Move X0, [X19+64]
	048 Compare X0, 0
	049 JumpIfEqual {121}
	050 Move X1, X31
	051 Call NetworkObject.GetLocalAuthorityMask, X0
	052 And W31, W0, 7
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {23}
	057 Move X8, [X19+56]
	058 Compare X8, 0
	059 JumpIfEqual {121}
	060 Move X0, [X8+80]
	061 Compare X0, 0
	062 JumpIfEqual {121}
	063 Move X1, X31
	064 Call Simulation.HasAnyActiveConnections, X0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {43}
	069 Move X8, [X19+56]
	070 Compare X8, 0
	071 JumpIfEqual {121}
	072 Move X0, [X8+80]
	073 Move W1, 8
	074 Move X2, X31
	075 Call SimulationMessage.Allocate, X0, X1
	076 Move X8, [X19+64]
	077 Compare X8, 0
	078 JumpIfEqual {121}
	079 Move X8, [X8+32]
	080 Move X20, X0
	081 Compare X8, 0
	082 JumpIfEqual {101}
	083 Move W0, [X8]
	084 Move X0, [X20]
	085 Move X19, [X19+64]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X8, 0x2363000
	091 Move X8, [X8+3560]
	092 Move X1, X19
	093 Move X20, [X31+16]
	094 Move X19, [X31+24]
	095 Move W2, 7
	096 Move X0, [X8]
	097 Move X3, X31
	098 Move X30, [X31+32]
	099 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	100 Return 
	101 Move X0, X31
	102 Move W1, [X19+104]
	103 Move W2, 6
	104 Move X3, X31
	105 Call RpcHeader.Create, X0, X1, X2
	106 Move [X20+28], X0
	107 Compare X20, 0
	108 JumpIfEqual {121}
	109 Move W8, 64
	110 Move [X20+12], W8
	111 Move X0, [X19+56]
	112 Compare X0, 0
	113 JumpIfEqual {121}
	114 Move X1, X20
	115 Move X20, [X31+16]
	116 Move X19, [X31+24]
	117 Move X2, X31
	118 Move X30, [X31+32]
	119 Call NetworkRunner.SendRpc, X0, X1
	120 Return 
	121 Call 0x1C17F20

Method: System.Void RespawnInternally()

Disassembly:
	0x01D94394 CBZ X0, 0x1D9479C
	0x01D94398 MOV X1, X31
	0x01D9439C BL 0x3C3DEB4
	0x01D943A0 CBZ X20, 0x1D9479C
	0x01D943A4 MOV X0, X20
	0x01D943A8 MOV X1, X31
	0x01D943AC BL 0x3C8F148
	0x01D943B0 ADRP X21, 0x2644000
	0x01D943B4 LDRB W8, [X21 + 0x783]
	0x01D943B8 LDR X20, [X19 + 0x168]
	0x01D943BC CBNZ W8, 0x1D943D4
	0x01D943C0 ADRP X0, 0x235F000
	0x01D943C4 LDR X0, [X0 + 0x5A0]
	0x01D943C8 BL 0x1C16CF4
	0x01D943CC MOVZ W8, 0x1
	0x01D943D0 STRB W8, [X21 + 0x783]
	0x01D943D4 CBZ X20, 0x1D9479C
	0x01D943D8 ADRP X23, 0x235F000
	0x01D943DC LDR X23, [X23 + 0x5A0]
	0x01D943E0 MOV X0, X20
	0x01D943E4 MOV X1, X31
	0x01D943E8 LDR X8, [X23]
	0x01D943EC LDR X8, [X8 + 0xB8]
	0x01D943F0 LDP S1, S2, [X8 + 0x4]
	0x01D943F4 LDR V0, [X8]
	0x01D943F8 BL 0x3C8E908
	0x01D943FC LDRB W8, [X21 + 0x783]
	0x01D94400 LDR X20, [X19 + 0x168]
	0x01D94404 CBNZ W8, 0x1D9441C
	0x01D94408 ADRP X0, 0x235F000
	0x01D9440C LDR X0, [X0 + 0x5A0]
	0x01D94410 BL 0x1C16CF4
	0x01D94414 MOVZ W8, 0x1
	0x01D94418 STRB W8, [X21 + 0x783]
	0x01D9441C CBZ X20, 0x1D9479C
	0x01D94420 LDR X8, [X23]
	0x01D94424 MOV X0, X20
	0x01D94428 MOV X1, X31
	0x01D9442C LDR X8, [X8 + 0xB8]
	0x01D94430 LDP S1, S2, [X8 + 0x4]
	0x01D94434 LDR V0, [X8]
	0x01D94438 BL 0x3C8EA40
	0x01D9443C LDR X8, [X19 + 0x150]
	0x01D94440 CBZ X8, 0x1D9479C
	0x01D94444 LDR X0, [X22]
	0x01D94448 LDR X20, [X8 + 0x40]
	0x01D9444C LDR W9, [X0 + 0xE0]
	0x01D94450 CBNZ W9, 0x1D94458
	0x01D94454 BL 0x1C16DFC
	0x01D94458 MOV X0, X20
	0x01D9445C MOV X1, X31
	0x01D94460 MOV X2, X31
	0x01D94464 BL 0x3C3883C
	0x01D94468 TBNZ X0, 0x0, 0x1D94608
	0x01D9446C LDR X8, [X19 + 0x150]
	0x01D94470 CBZ X8, 0x1D9479C
	0x01D94474 LDR X0, [X8 + 0x40]
	0x01D94478 CBZ X0, 0x1D9479C
	0x01D9447C MOV X1, X31
	0x01D94480 BL 0x1E934B8
	0x01D94484 TBZ X0, 0x0, 0x1D94608
	0x01D94488 LDR X8, [X19 + 0x150]
	0x01D9448C CBZ X8, 0x1D9479C
	0x01D94490 LDR X9, [X8 + 0x40]
	0x01D94494 CBZ X9, 0x1D94538
	0x01D94498 LDR X9, [X9 + 0x20]
	0x01D9449C CBZ X9, 0x1D94538
	0x01D944A0 LDR W23, [X9]
	0x01D944A4 B 0x1D9453C
	0x01D944A8 TBZ X0, 0x0, 0x1D944B4
	0x01D944AC MOV X0, X19
	0x01D944B0 BL 0x1D90054
	0x01D944B4 MOV X0, X19
	0x01D944B8 BL 0x1D8E6F8
	0x01D944BC STR X0, [X31 + 0x28]
	0x01D944C0 ADD X0, X31, 0x28
	0x01D944C4 MOV X1, X31
	0x01D944C8 BL 0x1E74DE4
	0x01D944CC TBNZ X0, 0x0, 0x1D94768
	0x01D944D0 LDR X8, [X19 + 0x80]
	0x01D944D4 CBZ X8, 0x1D9479C
	0x01D944D8 MOV X0, X19
	0x01D944DC BL 0x1D8ECEC

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 NotImplemented "Instruction MRS not yet implemented."
	007 Move X8, [X21+40]
	008 Move X19, X0
	009 Move [X31+40], X8
	010 Add X8, X31, 8
	011 Call GrabbableItem.get_spawnInfo, X0
	012 Move W8, [X31+36]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {74}
	017 Move X0, X19
	018 Move X1, X31
	019 Call Component.get_transform, X0
	020 Move X20, X0
	021 Add X8, X31, 8
	022 Move X0, X19
	023 Call GrabbableItem.get_spawnInfo, X0
	024 Compare X20, 0
	025 JumpIfEqual {100}
	026 Move S0, [X31+8]
	027 Move S1, [X31+12]
	028 Move V2, [X31+16]
	029 Move X0, X20
	030 Move X1, X31
	031 Call Transform.set_position, X0, X1
	032 Move X0, X19
	033 Move X1, X31
	034 Call Component.get_transform, X0
	035 Move X20, X0
	036 Add X8, X31, 8
	037 Move X0, X19
	038 Call GrabbableItem.get_spawnInfo, X0
	039 Compare X20, 0
	040 JumpIfEqual {100}
	041 Move S0, [X31+20]
	042 Move S1, [X31+24]
	043 Move S2, [X31+28]
	044 Move S3, [X31+32]
	045 Move X0, X20
	046 Move X1, X31
	047 Call Transform.set_rotation, X0, X1
	048 Move X20, [X19+360]
	049 Move X0, X19
	050 Move X1, X31
	051 Call Component.get_transform, X0
	052 Compare X0, 0
	053 JumpIfEqual {100}
	054 Move X1, X31
	055 Call Transform.get_position, X0
	056 Compare X20, 0
	057 JumpIfEqual {100}
	058 Move X0, X20
	059 Move X1, X31
	060 Call Rigidbody.set_position, X0, X1
	061 Move X20, [X19+360]
	062 Move X0, X19
	063 Move X1, X31
	064 Call Component.get_transform, X0
	065 Compare X0, 0
	066 JumpIfEqual {100}
	067 Move X1, X31
	068 Call Transform.get_rotation, X0
	069 Compare X20, 0
	070 JumpIfEqual {100}
	071 Move X0, X20
	072 Move X1, X31
	073 Call Rigidbody.set_rotation, X0, X1
	074 Move X0, X19
	075 Call GrabbableItem.InitSpawn, X0
	076 Move X0, [X19+368]
	077 Compare X0, 0
	078 JumpIfEqual {100}
	079 Move X8, [X0]
	080 Move W1, W31
	081 Move X9, [X8+504]
	082 Move X2, [X8+512]
	083 NotImplemented "Instruction BLR not yet implemented."
	084 Move X8, [X19+480]
	085 Compare X8, 0
	086 JumpIfEqual {91}
	087 Move X9, [X8+24]
	088 Move X0, [X8+64]
	089 Move X1, [X8+40]
	090 NotImplemented "Instruction BLR not yet implemented."
	091 Move X8, [X21+40]
	092 Move X9, [X31+40]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X20, [X31+64]
	095 Move X19, [X31+72]
	096 Move X30, [X31+48]
	097 Move X21, [X31+56]
	098 Add X31, X31, 80
	099 Return 
	100 Call 0x1C17F20
	101 Call 0x3EB2B20

Method: System.Void RPC_HandleItemSold()

Disassembly:
	0x01D944E0 STR W0, [X31 + 0x20]
	0x01D944E4 LDR X1, [X19 + 0x38]
	0x01D944E8 ADD X0, X31, 0x20
	0x01D944EC MOV X2, X31
	0x01D944F0 BL 0x1E91B84
	0x01D944F4 TBZ X0, 0x0, 0x1D94768
	0x01D944F8 MOV X0, X19
	0x01D944FC BL 0x1D947A0
	0x01D94500 B 0x1D94768
	0x01D94504 MOV X0, X19
	0x01D94508 BL 0x1D90054
	0x01D9450C LDR X0, [X22]
	0x01D94510 LDR X20, [X19 + 0x150]
	0x01D94514 LDR W8, [X0 + 0xE0]
	0x01D94518 CBNZ W8, 0x1D94520
	0x01D9451C BL 0x1C16DFC
	0x01D94520 MOV X0, X20
	0x01D94524 MOV X1, X31
	0x01D94528 MOV X2, X31
	0x01D9452C BL 0x3C3883C
	0x01D94530 TBNZ X0, 0x0, 0x1D946B0
	0x01D94534 B 0x1D94768
	0x01D94538 MOV W23, W31
	0x01D9453C LDR W24, [X8 + 0x68]
	0x01D94540 MOV X0, X19
	0x01D94544 BL 0x1D896B8
	0x01D94548 ADRP X21, 0x2644000
	0x01D9454C LDRB W8, [X21 + 0xA20]
	0x01D94550 MOV X20, X0
	0x01D94554 CBNZ W8, 0x1D9456C
	0x01D94558 ADRP X0, 0x2362000
	0x01D9455C LDR X0, [X0 + 0x398]
	0x01D94560 BL 0x1C16CF4
	0x01D94564 MOVZ W8, 0x1
	0x01D94568 STRB W8, [X21 + 0xA20]
	0x01D9456C ADRP X22, 0x2362000
	0x01D94570 LDR X22, [X22 + 0x398]
	0x01D94574 LDR X0, [X22]
	0x01D94578 LDR W8, [X0 + 0xE0]
	0x01D9457C CBNZ W8, 0x1D94584
	0x01D94580 BL 0x1C16DFC
	0x01D94584 CMP W23, W20
	0x01D94588 B.NE 0x1D94768
	0x01D9458C UBFM X8, X20, 0x20, 0x3F
	0x01D94590 CMP W24, W8
	0x01D94594 B.NE 0x1D94768
	0x01D94598 LDR X0, [X19 + 0x150]
	0x01D9459C CBZ X0, 0x1D9479C
	0x01D945A0 BL 0x1D880C4
	0x01D945A4 LDR X8, [X19 + 0x40]
	0x01D945A8 MOV X20, X0
	0x01D945AC CBZ X8, 0x1D945C0
	0x01D945B0 LDR X8, [X8 + 0x20]
	0x01D945B4 CBZ X8, 0x1D945C0
	0x01D945B8 LDR W23, [X8]
	0x01D945BC B 0x1D945C4
	0x01D945C0 MOV W23, W31
	0x01D945C4 LDRB W8, [X21 + 0xA20]
	0x01D945C8 LDR W24, [X19 + 0x68]
	0x01D945CC CBNZ W8, 0x1D945E4
	0x01D945D0 ADRP X0, 0x2362000
	0x01D945D4 LDR X0, [X0 + 0x398]
	0x01D945D8 BL 0x1C16CF4
	0x01D945DC MOVZ W8, 0x1
	0x01D945E0 STRB W8, [X21 + 0xA20]
	0x01D945E4 LDR X0, [X22]
	0x01D945E8 LDR W8, [X0 + 0xE0]
	0x01D945EC CBNZ W8, 0x1D945F4
	0x01D945F0 BL 0x1C16DFC
	0x01D945F4 CMP W23, W20
	0x01D945F8 B.NE 0x1D94608
	0x01D945FC UBFM X8, X20, 0x20, 0x3F
	0x01D94600 CMP W24, W8
	0x01D94604 B.EQ 0x1D94768
	0x01D94608 ADRP X8, 0x235F000
	0x01D9460C LDR X8, [X8 + 0x720]
	0x01D94610 LDR X0, [X8]
	0x01D94614 BL 0x1C16F10
	0x01D94618 ADRP X8, 0x235F000
	0x01D9461C LDR X8, [X8 + 0x718]
	0x01D94620 MOV X20, X0
	0x01D94624 LDR X1, [X8]
	0x01D94628 BL 0x2AA4804
	0x01D9462C LDR X0, [X19 + 0x80]
	0x01D94630 CBZ X0, 0x1D9479C
	0x01D94634 MOV X1, X31
	0x01D94638 BL 0x3C389D4
	0x01D9463C CBZ X20, 0x1D9479C
	0x01D94640 ADRP X8, 0x2362000
	0x01D94644 ADRP X9, 0x235F000
	0x01D94648 LDR X8, [X8 + 0xE10]
	0x01D9464C LDR X9, [X9 + 0x710]
	0x01D94650 MOV X2, X0
	0x01D94654 MOV X0, X20
	0x01D94658 LDR X1, [X8]
	0x01D9465C LDR X3, [X9]
	0x01D94660 BL 0x2AA5098
	0x01D94664 ADRP X8, 0x235F000
	0x01D94668 LDR X8, [X8 + 0x788]
	0x01D9466C LDR X0, [X8]
	0x01D94670 LDR W8, [X0 + 0xE0]
	0x01D94674 CBNZ W8, 0x1D9467C
	0x01D94678 BL 0x1C16DFC
	0x01D9467C ADRP X8, 0x2362000
	0x01D94680 ADRP X9, 0x2362000
	0x01D94684 ADRP X10, 0x2362000
	0x01D94688 LDR X8, [X8 + 0xE18]
	0x01D9468C LDR X9, [X9 + 0xE20]
	0x01D94690 LDR X10, [X10 + 0xE08]
	0x01D94694 MOVZ W4, 0x46E
	0x01D94698 LDR X0, [X8]
	0x01D9469C LDR X2, [X9]
	0x01D946A0 LDR X3, [X10]
	0x01D946A4 MOV X1, X20
	0x01D946A8 MOV X5, X31
	0x01D946AC BL 0x35C2200
	0x01D946B0 MOV X0, X19
	0x01D946B4 BL 0x1D896B8
	0x01D946B8 LDR X0, [X19 + 0x168]
	0x01D946BC CBZ X0, 0x1D9479C
	0x01D946C0 MOV X1, X31
	0x01D946C4 BL 0x3C8EF74
	0x01D946C8 LDR X0, [X19 + 0x168]
	0x01D946CC CBZ X0, 0x1D9479C
	0x01D946D0 MOV X1, X31
	0x01D946D4 MOV V8.16B, V0.16B
	0x01D946D8 MOV V9.16B, V1.16B
	0x01D946DC MOV V10.16B, V2.16B
	0x01D946E0 BL 0x3C8F0AC
	0x01D946E4 ADRP X20, 0x2644000
	0x01D946E8 LDRB W8, [X20 + 0x783]
	0x01D946EC MOV V11.16B, V0.16B
	0x01D946F0 MOV V12.16B, V1.16B
	0x01D946F4 MOV V13.16B, V2.16B
	0x01D946F8 MOV V14.16B, V3.16B
	0x01D946FC CBNZ W8, 0x1D94714
	0x01D94700 ADRP X0, 0x235F000
	0x01D94704 LDR X0, [X0 + 0x5A0]
	0x01D94708 BL 0x1C16CF4
	0x01D9470C MOVZ W8, 0x1
	0x01D94710 STRB W8, [X20 + 0x783]
	0x01D94714 ADRP X8, 0x235F000
	0x01D94718 LDR X8, [X8 + 0x5A0]
	0x01D9471C MOV X0, X19
	0x01D94720 MOV V3.16B, V11.16B
	0x01D94724 MOV V4.16B, V12.16B
	0x01D94728 LDR X8, [X8]
	0x01D9472C MOV V5.16B, V13.16B
	0x01D94730 MOV V6.16B, V14.16B
	0x01D94734 MOV W2, W31
	0x01D94738 LDR X8, [X8 + 0xB8]
	0x01D9473C MOV W3, W31
	0x01D94740 LDP S0, S1, [X8]
	0x01D94744 LDR V2, [X8 + 0x8]
	0x01D94748 STR S0, [X31 + 0x10]
	0x01D9474C STP S1, S2, [X31 + 0x14]
	0x01D94750 STP S1, S2, [X31 + 0x4]
	0x01D94754 STR S0, [X31]
	0x01D94758 MOV V0.16B, V8.16B
	0x01D9475C MOV V1.16B, V9.16B
	0x01D94760 MOV V2.16B, V10.16B
	0x01D94764 BL 0x1D8FD4C
	0x01D94768 LDRB W8, [X19 + 0x1B9]
	0x01D9476C CBZ W8, 0x1D94774
	0x01D94770 STRB W31, [X19 + 0x1B9]
	0x01D94774 LDP X20, X19, [X31 + 0x90]
	0x01D94778 LDP X22, X21, [X31 + 0x80]
	0x01D9477C LDP X24, X23, [X31 + 0x70]
	0x01D94780 LDR X30, [X31 + 0x68]
	0x01D94784 LDP D9, D8, [X31 + 0x58]
	0x01D94788 LDP D11, D10, [X31 + 0x48]
	0x01D9478C LDP D13, D12, [X31 + 0x38]
	0x01D94790 LDR V14, [X31 + 0x30]
	0x01D94794 ADD X31, X31, 0xA0
	0x01D94798 RET
	0x01D9479C BL 0x1C16F20
	0x01D947A0 STP X30, X21, [X31 - 0x20]!
	0x01D947A4 STP X20, X19, [X31 + 0x10]
	0x01D947A8 ADRP X21, 0x2644000
	0x01D947AC ADRP X20, 0x235F000
	0x01D947B0 LDRB W8, [X21 + 0xA07]
	0x01D947B4 LDR X20, [X20 + 0x598]
	0x01D947B8 MOV X19, X0
	0x01D947BC TBNZ X8, 0x0, 0x1D947D4
	0x01D947C0 ADRP X0, 0x235F000
	0x01D947C4 LDR X0, [X0 + 0x598]
	0x01D947C8 BL 0x1C16CF4
	0x01D947CC MOVZ W8, 0x1
	0x01D947D0 STRB W8, [X21 + 0xA07]
	0x01D947D4 LDR X0, [X20]
	0x01D947D8 LDR X20, [X19 + 0x40]
	0x01D947DC LDR W8, [X0 + 0xE0]
	0x01D947E0 CBNZ W8, 0x1D947E8
	0x01D947E4 BL 0x1C16DFC
	0x01D947E8 MOV X0, X20
	0x01D947EC MOV X1, X31
	0x01D947F0 MOV X2, X31
	0x01D947F4 BL 0x3C3883C
	0x01D947F8 TBNZ X0, 0x0, 0x1D9485C
	0x01D947FC LDR X0, [X19 + 0x40]
	0x01D94800 CBZ X0, 0x1D94868
	0x01D94804 MOV X1, X31
	0x01D94808 BL 0x1E934B8
	0x01D9480C TBZ X0, 0x0, 0x1D9485C
	0x01D94810 MOV X0, X31
	0x01D94814 BL 0x1E769D8
	0x01D94818 MOV X1, X0
	0x01D9481C MOV X0, X19
	0x01D94820 BL 0x1D8E8F0
	0x01D94824 MOV X0, X31
	0x01D94828 BL 0x1E769D8

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D14
	003 Move [X31+40], D13
	004 Move [X31+48], D12
	005 Move [X31+56], D11
	006 Move [X31+64], D10
	007 Move [X31+72], D9
	008 Move [X31+80], D8
	009 Move [X31+88], X30
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X20, 0x2645000
	015 Move W8, [X20+2561]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x2363000
	022 Move X0, [X0+2680]
	023 Call 0x1C17CF4
	024 Move X0, 0x2363000
	025 Move X0, [X0+3568]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2561], W8
	029 Move W8, [X19+88]
	030 Compare W8, 0
	031 JumpIfEqual {144}
	032 Move [X19+88], W31
	033 Move X0, X19
	034 Call GrabbableItem.get_attachedAnchorId, X0
	035 Move X20, X0
	036 Move X0, X31
	037 Call NetworkBehaviourId.get_None
	038 Move X22, 0x2645000
	039 Move W8, [X22+2592]
	040 Move X21, X0
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x2363000
	044 Move X0, [X0+920]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X22+2592], W8
	048 Move X8, 0x2363000
	049 Move X8, [X8+920]
	050 Move X0, [X8]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X8, X21
	057 ShiftRight X8, 32
	058 And X8, X8, 0x7FFFFFFF
	059 Move X9, X20
	060 ShiftRight X9, 32
	061 And X9, X9, 0x7FFFFFFF
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X0, X19
	064 Call GrabbableItem.get_attachedAnchorId, X0
	065 Move X0, X19
	066 Move X1, X31
	067 Call Component.get_transform, X0
	068 Compare X0, 0
	069 JumpIfEqual {268}
	070 Move X1, X31
	071 Call Transform.get_position, X0
	072 Move X0, X19
	073 Move X1, X31
	074 Move V8, V0
	075 Move V9, V1
	076 Move V10, V2
	077 Call Component.get_transform, X0
	078 Compare X0, 0
	079 JumpIfEqual {268}
	080 Move X1, X31
	081 Call Transform.get_rotation, X0
	082 Move X20, 0x2645000
	083 Move W8, [X20+1923]
	084 Move V11, V0
	085 Move V12, V1
	086 Move V13, V2
	087 Move V14, V3
	088 Compare W8, 0
	089 JumpIfNotEqual {95}
	090 Move X0, 0x2360000
	091 Move X0, [X0+1440]
	092 Call 0x1C17CF4
	093 Move W8, 1
	094 Move [X20+1923], W8
	095 Move X8, 0x2360000
	096 Move X8, [X8+1440]
	097 Move W2, 1
	098 Move X0, X19
	099 Move V3, V11
	100 Move X8, [X8]
	101 Move V4, V12
	102 Move V5, V13
	103 Move V6, V14
	104 Move X8, [X8+184]
	105 Move W3, W31
	106 Move S0, [X8]
	107 Move S1, [X8+4]
	108 Move V2, [X8+8]
	109 Move [X31+16], S0
	110 Move [X31+20], S1
	111 Move [X31+28], S2
	112 Move [X31+4], S1
	113 Move [X31+12], S2
	114 Move [X31], S0
	115 Move V0, V8
	116 Move V1, V9
	117 Move V2, V10
	118 Call GrabbableItem.ReleaseInternal, X0, X1, X2, X3, X4, X5, X6, X7
	119 Move X8, [X19+128]
	120 Compare X8, 0
	121 JumpIfEqual {268}
	122 Move W8, [X8+40]
	123 And W31, W8, 14
	124 Move X0, [X19+56]
	125 Compare X0, 0
	126 JumpIfEqual {268}
	127 Move X1, [X19+64]
	128 Move X20, [X31+112]
	129 Move X19, [X31+120]
	130 Move X22, [X31+96]
	131 Move X21, [X31+104]
	132 Move X30, [X31+88]
	133 Move D9, [X31+72]
	134 Move D8, [X31+80]
	135 Move D11, [X31+56]
	136 Move D10, [X31+64]
	137 Move D13, [X31+40]
	138 Move D12, [X31+48]
	139 Move V14, [X31+32]
	140 Move X2, X31
	141 Add X31, X31, 128
	142 Call NetworkRunner.Despawn, X0, X1
	143 Return 
	144 Move X20, 0x2363000
	145 Move X20, [X20+2680]
	146 Move X0, [X20]
	147 Move W8, [X0+224]
	148 Compare W8, 0
	149 JumpIfNotEqual {151}
	150 Call 0x1C17DFC
	151 Move X0, X19
	152 Move X1, X31
	153 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	154 Move X0, [X19+56]
	155 Compare X0, 0
	156 JumpIfEqual {268}
	157 Move X1, X31
	158 Call NetworkRunner.get_Stage, X0
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move X20, [X31+112]
	161 Move X19, [X31+120]
	162 Move X22, [X31+96]
	163 Move X21, [X31+104]
	164 Move X30, [X31+88]
	165 Move D9, [X31+72]
	166 Move D8, [X31+80]
	167 Move D11, [X31+56]
	168 Move D10, [X31+64]
	169 Move D13, [X31+40]
	170 Move D12, [X31+48]
	171 Move V14, [X31+32]
	172 Add X31, X31, 128
	173 Return 
	174 Move X0, [X19+64]
	175 Compare X0, 0
	176 JumpIfEqual {268}
	177 Move X1, X31
	178 Call NetworkObject.GetLocalAuthorityMask, X0
	179 And W31, W0, 7
	180 Move TEMP, X0
	181 And TEMP, TEMP, 1
	182 Compare TEMP, 1
	183 JumpIfEqual {33}
	184 Move X8, [X19+56]
	185 Compare X8, 0
	186 JumpIfEqual {268}
	187 Move X0, [X8+80]
	188 Compare X0, 0
	189 JumpIfEqual {268}
	190 Move X1, X31
	191 Call Simulation.HasAnyActiveConnections, X0
	192 Move TEMP, X0
	193 And TEMP, TEMP, 1
	194 Compare TEMP, 1
	195 JumpIfNotEqual {160}
	196 Move X8, [X19+56]
	197 Compare X8, 0
	198 JumpIfEqual {268}
	199 Move X0, [X8+80]
	200 Move W1, 8
	201 Move X2, X31
	202 Call SimulationMessage.Allocate, X0, X1
	203 Move X8, [X19+64]
	204 Compare X8, 0
	205 JumpIfEqual {268}
	206 Move X8, [X8+32]
	207 Move X20, X0
	208 Compare X8, 0
	209 JumpIfEqual {238}
	210 Move W0, [X8]
	211 Move X0, [X20]
	212 Move X19, [X19+64]
	213 Move W8, [X0+224]
	214 Compare W8, 0
	215 JumpIfNotEqual {217}
	216 Call 0x1C17DFC
	217 Move X8, 0x2363000
	218 Move X8, [X8+3568]
	219 Move X1, X19
	220 Move X20, [X31+112]
	221 Move X19, [X31+120]
	222 Move X22, [X31+96]
	223 Move X21, [X31+104]
	224 Move X0, [X8]
	225 Move X30, [X31+88]
	226 Move D9, [X31+72]
	227 Move D8, [X31+80]
	228 Move D11, [X31+56]
	229 Move D10, [X31+64]
	230 Move D13, [X31+40]
	231 Move D12, [X31+48]
	232 Move V14, [X31+32]
	233 Move W2, 7
	234 Move X3, X31
	235 Add X31, X31, 128
	236 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	237 Return 
	238 Move X0, X31
	239 Move W1, [X19+104]
	240 Move W2, 7
	241 Move X3, X31
	242 Call RpcHeader.Create, X0, X1, X2
	243 Move [X20+28], X0
	244 Compare X20, 0
	245 JumpIfEqual {268}
	246 Move W8, 64
	247 Move [X20+12], W8
	248 Move X0, [X19+56]
	249 Compare X0, 0
	250 JumpIfEqual {268}
	251 Move X1, X20
	252 Move X20, [X31+112]
	253 Move X19, [X31+120]
	254 Move X22, [X31+96]
	255 Move X21, [X31+104]
	256 Move X30, [X31+88]
	257 Move D9, [X31+72]
	258 Move D8, [X31+80]
	259 Move D11, [X31+56]
	260 Move D10, [X31+64]
	261 Move D13, [X31+40]
	262 Move D12, [X31+48]
	263 Move V14, [X31+32]
	264 Move X2, X31
	265 Add X31, X31, 128
	266 Call NetworkRunner.SendRpc, X0, X1
	267 Return 
	268 Call 0x1C17F20

Method: System.Void UpdatePlayersAlwaysInterested()

Disassembly:
	0x01D9482C MOV X1, X0

ISIL:
	001 Return 

Method: System.Void StateAuthorityChanged()

Disassembly:
	0x01D94830 MOV X0, X19
	0x01D94834 BL 0x1D8E950
	0x01D94838 LDR X8, [X19 + 0x80]
	0x01D9483C CBZ X8, 0x1D94868
	0x01D94840 LDR X0, [X19 + 0x38]
	0x01D94844 CBZ X0, 0x1D94868
	0x01D94848 LDR X1, [X19 + 0x40]
	0x01D9484C LDP X20, X19, [X31 + 0x10]
	0x01D94850 MOV X2, X31
	0x01D94854 LDP X30, X21, [X31], #0x20
	0x01D94858 B 0x1EA3884
	0x01D9485C LDP X20, X19, [X31 + 0x10]
	0x01D94860 LDP X30, X21, [X31], #0x20
	0x01D94864 RET
	0x01D94868 BL 0x1C16F20
	0x01D9486C STP X30, X19, [X31 - 0x10]!
	0x01D94870 MOV X1, X31
	0x01D94874 MOV X19, X0
	0x01D94878 BL 0x1E79788
	0x01D9487C LDRB W8, [X19 + 0x1B8]
	0x01D94880 CBZ W8, 0x1D94894
	0x01D94884 MOV X0, X19
	0x01D94888 MOV W1, W31
	0x01D9488C BL 0x1D91694
	0x01D94890 STRB W31, [X19 + 0x1B8]
	0x01D94894 LDRB W8, [X19 + 0x1BA]
	0x01D94898 CBZ W8, 0x1D948AC
	0x01D9489C MOVZ W1, 0x1
	0x01D948A0 MOV X0, X19
	0x01D948A4 BL 0x1D93B8C
	0x01D948A8 STRB W31, [X19 + 0x1BA]
	0x01D948AC LDP X30, X19, [X31], #0x10
	0x01D948B0 RET
	0x01D948B4 STR X30, [X31 - 0x10]!
	0x01D948B8 MOV X8, X0
	0x01D948BC LDR X0, [X0 + 0x38]
	0x01D948C0 CBZ X0, 0x1D948D4
	0x01D948C4 LDR X1, [X8 + 0x40]
	0x01D948C8 MOV X2, X31
	0x01D948CC LDR X30, [X31], #0x10
	0x01D948D0 B 0x1EA3884
	0x01D948D4 BL 0x1C16F20
	0x01D948D8 SUB X31, X31, 0x1A0
	0x01D948DC STR D14, [X31 + 0x140]
	0x01D948E0 STP D13, D12, [X31 + 0x148]
	0x01D948E4 STP D11, D10, [X31 + 0x158]
	0x01D948E8 STP D9, D8, [X31 + 0x168]
	0x01D948EC STR X29, [X31 + 0x178]
	0x01D948F0 STP X30, X21, [X31 + 0x180]
	0x01D948F4 STP X20, X19, [X31 + 0x190]
	0x01D948F8 ADRP X21, 0x2644000
	0x01D948FC ADRP X20, 0x235F000
	0x01D94900 LDRB W8, [X21 + 0xA08]
	0x01D94904 LDR X20, [X20 + 0x598]
	0x01D94908 MOV V11.16B, V6.16B
	0x01D9490C MOV V12.16B, V5.16B
	0x01D94910 MOV V13.16B, V4.16B
	0x01D94914 MOV V14.16B, V3.16B
	0x01D94918 MOV V8.16B, V2.16B
	0x01D9491C MOV V9.16B, V1.16B
	0x01D94920 MOV V10.16B, V0.16B
	0x01D94924 MOV X19, X0
	0x01D94928 TBNZ X8, 0x0, 0x1D9494C
	0x01D9492C ADRP X0, 0x235F000
	0x01D94930 LDR X0, [X0 + 0x598]
	0x01D94934 BL 0x1C16CF4
	0x01D94938 ADRP X0, 0x2361000
	0x01D9493C LDR X0, [X0 + 0x7C8]
	0x01D94940 BL 0x1C16CF4
	0x01D94944 MOVZ W8, 0x1
	0x01D94948 STRB W8, [X21 + 0xA08]
	0x01D9494C LDR X0, [X20]
	0x01D94950 MOVI V0.2D, 0x0
	0x01D94954 STP V0, V0, [X31 + 0x120]
	0x01D94958 STP V0, V0, [X31 + 0x100]
	0x01D9495C LDR W8, [X0 + 0xE0]
	0x01D94960 LDR X20, [X19 + 0xB0]
	0x01D94964 CBNZ W8, 0x1D9496C
	0x01D94968 BL 0x1C16DFC
	0x01D9496C MOV X0, X20
	0x01D94970 MOV X1, X31
	0x01D94974 MOV X2, X31
	0x01D94978 BL 0x3C3883C
	0x01D9497C TBZ X0, 0x0, 0x1D94A20
	0x01D94980 LDR X0, [X19 + 0x168]
	0x01D94984 CBZ X0, 0x1D94DA8
	0x01D94988 MOV V0.16B, V10.16B
	0x01D9498C MOV V1.16B, V9.16B
	0x01D94990 MOV V2.16B, V8.16B
	0x01D94994 MOV X1, X31
	0x01D94998 BL 0x3C8F014
	0x01D9499C LDR X0, [X19 + 0x168]
	0x01D949A0 CBZ X0, 0x1D94DA8
	0x01D949A4 MOV V0.16B, V14.16B
	0x01D949A8 MOV V1.16B, V13.16B
	0x01D949AC MOV V2.16B, V12.16B
	0x01D949B0 MOV V3.16B, V11.16B
	0x01D949B4 MOV X1, X31
	0x01D949B8 BL 0x3C8F148
	0x01D949BC MOV X0, X19
	0x01D949C0 MOV X1, X31
	0x01D949C4 BL 0x3C32E90
	0x01D949C8 LDR X8, [X19 + 0x168]
	0x01D949CC CBZ X8, 0x1D94DA8
	0x01D949D0 MOV X20, X0
	0x01D949D4 MOV X0, X8
	0x01D949D8 MOV X1, X31
	0x01D949DC BL 0x3C8EF74
	0x01D949E0 CBZ X20, 0x1D94DA8
	0x01D949E4 MOV X0, X20
	0x01D949E8 MOV X1, X31
	0x01D949EC BL 0x3C3F62C
	0x01D949F0 MOV X0, X19
	0x01D949F4 MOV X1, X31
	0x01D949F8 BL 0x3C32E90
	0x01D949FC LDR X8, [X19 + 0x168]
	0x01D94A00 CBZ X8, 0x1D94DA8
	0x01D94A04 MOV X20, X0
	0x01D94A08 MOV X0, X8
	0x01D94A0C MOV X1, X31
	0x01D94A10 BL 0x3C8F0AC
	0x01D94A14 CBZ X20, 0x1D94DA8
	0x01D94A18 MOV X0, X20
	0x01D94A1C B 0x1D94BE4
	0x01D94A20 MOV X0, X19
	0x01D94A24 MOV X1, X31
	0x01D94A28 BL 0x3C32E90
	0x01D94A2C CBZ X0, 0x1D94DA8
	0x01D94A30 ADD X8, X31, 0x80
	0x01D94A34 MOV X1, X31
	0x01D94A38 BL 0x3C3FF0C
	0x01D94A3C LDP V0, V1, [X31 + 0x80]
	0x01D94A40 LDP V2, V3, [X31 + 0xA0]
	0x01D94A44 STP V0, V1, [X31 + 0xC0]
	0x01D94A48 STP V2, V3, [X31 + 0xE0]
	0x01D94A4C LDR X0, [X19 + 0xB0]
	0x01D94A50 CBZ X0, 0x1D94DA8
	0x01D94A54 ADD X8, X31, 0x80
	0x01D94A58 MOV X1, X31
	0x01D94A5C BL 0x3C3F1C8
	0x01D94A60 LDP V0, V1, [X31 + 0x80]
	0x01D94A64 LDP V2, V3, [X31 + 0xA0]
	0x01D94A68 ADD X8, X31, 0x80
	0x01D94A6C ADD X0, X31, 0x40
	0x01D94A70 STP V0, V1, [X31]
	0x01D94A74 LDP V0, V1, [X31 + 0xC0]
	0x01D94A78 STP V2, V3, [X31 + 0x20]
	0x01D94A7C LDP V2, V3, [X31 + 0xE0]
	0x01D94A80 ADD X1, X31, 0x0
	0x01D94A84 MOV X2, X31
	0x01D94A88 STP V0, V1, [X31 + 0x40]
	0x01D94A8C STP V2, V3, [X31 + 0x60]
	0x01D94A90 BL 0x3C27F74
	0x01D94A94 LDP V0, V1, [X31 + 0x80]
	0x01D94A98 LDP V2, V3, [X31 + 0xA0]
	0x01D94A9C ADD X0, X31, 0x100
	0x01D94AA0 MOV X1, X31
	0x01D94AA4 STP V0, V1, [X31 + 0x100]
	0x01D94AA8 STP V2, V3, [X31 + 0x120]
	0x01D94AAC BL 0x3C26F30
	0x01D94AB0 MOV X0, X31
	0x01D94AB4 BL 0x3C2A260
	0x01D94AB8 FMUL S4, S11, S0
	0x01D94ABC FMUL S5, S14, S3
	0x01D94AC0 FMUL S16, S11, S1
	0x01D94AC4 FMUL S17, S13, S3
	0x01D94AC8 FMUL S21, S14, S0
	0x01D94ACC FMUL S22, S11, S2
	0x01D94AD0 FMUL S23, S11, S3
	0x01D94AD4 FMUL S3, S12, S3
	0x01D94AD8 FMUL S6, S13, S2
	0x01D94ADC FMUL S7, S12, S1
	0x01D94AE0 FMUL S18, S12, S0
	0x01D94AE4 FMUL S20, S14, S1
	0x01D94AE8 FMUL S1, S13, S1
	0x01D94AEC FADD S4, S4, S5
	0x01D94AF0 FADD S5, S16, S17
	0x01D94AF4 FADD S3, S22, S3
	0x01D94AF8 FSUB S16, S23, S21
	0x01D94AFC FMUL S19, S14, S2
	0x01D94B00 FMUL S0, S13, S0
	0x01D94B04 FMUL S2, S12, S2
	0x01D94B08 FADD S4, S6, S4
	0x01D94B0C FADD S5, S18, S5
	0x01D94B10 FADD S3, S20, S3
	0x01D94B14 FSUB S1, S16, S1
	0x01D94B18 ADD X0, X31, 0x100
	0x01D94B1C MOV X1, X31
	0x01D94B20 FSUB S14, S4, S7
	0x01D94B24 FSUB S13, S5, S19
	0x01D94B28 FSUB S12, S3, S0
	0x01D94B2C FSUB S11, S1, S2
	0x01D94B30 BL 0x3C28174
	0x01D94B34 FNEG S4, S0
	0x01D94B38 FNEG S5, S1
	0x01D94B3C FNEG S6, S2
	0x01D94B40 MOV V0.16B, V14.16B
	0x01D94B44 MOV V1.16B, V13.16B
	0x01D94B48 MOV V2.16B, V12.16B
	0x01D94B4C MOV V3.16B, V11.16B
	0x01D94B50 MOV X0, X31
	0x01D94B54 BL 0x3C2A9FC
	0x01D94B58 LDR X0, [X19 + 0x168]
	0x01D94B5C CBZ X0, 0x1D94DA8
	0x01D94B60 FADD S8, S8, S2
	0x01D94B64 FADD S9, S9, S1
	0x01D94B68 FADD S10, S10, S0
	0x01D94B6C MOV V0.16B, V10.16B
	0x01D94B70 MOV V1.16B, V9.16B
	0x01D94B74 MOV V2.16B, V8.16B
	0x01D94B78 MOV X1, X31
	0x01D94B7C BL 0x3C8F014
	0x01D94B80 LDR X0, [X19 + 0x168]
	0x01D94B84 CBZ X0, 0x1D94DA8
	0x01D94B88 MOV V0.16B, V14.16B

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+80], D14
	003 Move [X31+88], D13
	004 Move [X31+96], D12
	005 Move [X31+104], D11
	006 Move [X31+112], D10
	007 Move [X31+120], D9
	008 Move [X31+128], D8
	009 Move [X31+136], X30
	010 Move [X31+144], X24
	011 Move [X31+152], X23
	012 Move [X31+160], X22
	013 Move [X31+168], X21
	014 Move [X31+176], X20
	015 Move [X31+184], X19
	016 NotImplemented "Instruction MRS not yet implemented."
	017 Move X8, [X22+40]
	018 Move X20, 0x2645000
	019 Move X19, X0
	020 Move [X31+72], X8
	021 Move W8, [X20+2562]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {34}
	026 Move X0, 0x2363000
	027 Move X0, [X0+3576]
	028 Call 0x1C17CF4
	029 Move X0, 0x2360000
	030 Move X0, [X0+1432]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+2562], W8
	034 Move X0, [X19+56]
	035 Compare X0, 0
	036 JumpIfEqual {268}
	037 Move W8, [X0+392]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X8, [X19+64]
	040 Compare X8, 0
	041 JumpIfEqual {83}
	042 Move W9, [X8+96]
	043 Move TEMP, X9
	044 And TEMP, TEMP, 2
	045 Compare TEMP, 2
	046 JumpIfEqual {83}
	047 Move X0, X8
	048 Move X1, X31
	049 Call NetworkObject.get_HasStateAuthority, X0
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {80}
	054 Move X23, 0x2360000
	055 Move X23, [X23+1432]
	056 Move X20, [X19+416]
	057 Move X0, [X23]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X31
	064 Move X2, X31
	065 Call Object.op_Inequality, X0, X1
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {116}
	070 Move X8, [X19+416]
	071 Compare X8, 0
	072 JumpIfEqual {268}
	073 Move X9, [X8+64]
	074 Compare X9, 0
	075 JumpIfEqual {202}
	076 Move X9, [X9+32]
	077 Compare X9, 0
	078 JumpIfEqual {202}
	079 Move W1, [X9]
	080 Move X0, [X19+56]
	081 Compare X0, 0
	082 JumpIfEqual {268}
	083 Move X1, X31
	084 Call NetworkRunner.get_ActivePlayers, X0
	085 Move X8, [X19+64]
	086 Compare X8, 0
	087 JumpIfEqual {268}
	088 Move X20, X0
	089 Move X0, X8
	090 Move X1, X31
	091 Call NetworkObject.get_StateAuthority, X0
	092 Move X8, 0x2363000
	093 Move X8, [X8+3576]
	094 And X1, X0, 0
	095 Move X0, X20
	096 Move X2, [X8]
	097 Call Enumerable.Contains, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfEqual {249}
	102 Move X0, [X19+56]
	103 Compare X0, 0
	104 JumpIfEqual {268}
	105 Move X1, X31
	106 Call NetworkRunner.get_IsSharedModeMasterClient, X0
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {249}
	111 Move X0, [X19+64]
	112 Compare X0, 0
	113 JumpIfEqual {268}
	114 Move X1, X31
	115 Call NetworkObject.RequestStateAuthority, X0
	116 Move X0, X19
	117 Call GrabbableItem.get_attachedAnchorId, X0
	118 Move X20, X0
	119 Move X0, X31
	120 Call NetworkBehaviourId.get_None
	121 Move X24, 0x2645000
	122 Move W8, [X24+2592]
	123 Move X21, X0
	124 Compare W8, 0
	125 JumpIfNotEqual {131}
	126 Move X0, 0x2363000
	127 Move X0, [X0+920]
	128 Call 0x1C17CF4
	129 Move W8, 1
	130 Move [X24+2592], W8
	131 Move X8, 0x2363000
	132 Move X8, [X8+920]
	133 Move X0, [X8]
	134 Move W8, [X0+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {138}
	137 Call 0x1C17DFC
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move X8, X21
	140 ShiftRight X8, 32
	141 And X8, X8, 0x7FFFFFFF
	142 Move X9, X20
	143 ShiftRight X9, 32
	144 And X9, X9, 0x7FFFFFFF
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move X0, X19
	147 Call GrabbableItem.get_attachedAnchorId, X0
	148 Move X0, X19
	149 Move X1, X31
	150 Call Component.get_transform, X0
	151 Compare X0, 0
	152 JumpIfEqual {268}
	153 Move X1, X31
	154 Call Transform.get_position, X0
	155 Move X0, X19
	156 Move X1, X31
	157 Move V8, V0
	158 Move V9, V1
	159 Move V10, V2
	160 Call Component.get_transform, X0
	161 Compare X0, 0
	162 JumpIfEqual {268}
	163 Move X1, X31
	164 Call Transform.get_rotation, X0
	165 Move X20, 0x2645000
	166 Move W8, [X20+1923]
	167 Move V11, V0
	168 Move V12, V1
	169 Move V13, V2
	170 Move V14, V3
	171 Compare W8, 0
	172 JumpIfNotEqual {178}
	173 Move X0, 0x2360000
	174 Move X0, [X0+1440]
	175 Call 0x1C17CF4
	176 Move W8, 1
	177 Move [X20+1923], W8
	178 Move X8, 0x2360000
	179 Move X8, [X8+1440]
	180 Move W2, 1
	181 Move X0, X19
	182 Move V3, V11
	183 Move X8, [X8]
	184 Move V4, V12
	185 Move V5, V13
	186 Move V6, V14
	187 Move X8, [X8+184]
	188 Move W3, W31
	189 Move S0, [X8]
	190 Move S1, [X8+4]
	191 Move V2, [X8+8]
	192 Move [X31+16], S0
	193 Move [X31+20], S1
	194 Move [X31+28], S2
	195 Move [X31+4], S1
	196 Move [X31+12], S2
	197 Move [X31], S0
	198 Move V0, V8
	199 Move V1, V9
	200 Move V2, V10
	201 Call GrabbableItem.ReleaseInternal, X0, X1, X2, X3, X4, X5, X6, X7
	202 Move X1, X31
	203 Move W8, [X8+104]
	204 Move W2, 1
	205 Move X0, X19
	206 NotImplemented "Instruction BFM not yet implemented."
	207 Call GrabbableItem.GrabInternal, X0, X1, X2
	208 Move X0, X19
	209 Call GrabbableItem.HandleGrabbedChanged, X0
	210 Move X0, [X23]
	211 Move X20, [X19+208]
	212 Move W8, [X0+224]
	213 Compare W8, 0
	214 JumpIfNotEqual {216}
	215 Call 0x1C17DFC
	216 Move X0, X20
	217 Move X1, X31
	218 Move X2, X31
	219 Call Object.op_Inequality, X0, X1
	220 Move TEMP, X0
	221 And TEMP, TEMP, 1
	222 Compare TEMP, 1
	223 JumpIfNotEqual {247}
	224 Move X0, [X19+208]
	225 Compare X0, 0
	226 JumpIfEqual {268}
	227 Move X1, X31
	228 Call Transform.get_localPosition, X0
	229 Move X0, [X19+208]
	230 Compare X0, 0
	231 JumpIfEqual {268}
	232 Move X1, X31
	233 Move V8, V0
	234 Move V9, V1
	235 Move V10, V2
	236 Call Transform.get_localRotation, X0
	237 Add X1, X31, 40
	238 Move X0, X19
	239 Move [X31+40], S8
	240 Move [X31+48], S9
	241 Move [X31+48], S10
	242 Move [X31+56], S0
	243 Move [X31+56], S1
	244 Move [X31+64], S2
	245 Move [X31+64], S3
	246 Call GrabbableItem.set_grabbedInfo, X0, X1
	247 Move W8, 1
	248 Move [X19+441], W8
	249 Move X8, [X22+40]
	250 Move X9, [X31+72]
	251 NotImplemented "Instruction CMP not yet implemented."
	252 Move X20, [X31+176]
	253 Move X19, [X31+184]
	254 Move X22, [X31+160]
	255 Move X21, [X31+168]
	256 Move X24, [X31+144]
	257 Move X23, [X31+152]
	258 Move X30, [X31+136]
	259 Move D9, [X31+120]
	260 Move D8, [X31+128]
	261 Move D11, [X31+104]
	262 Move D10, [X31+112]
	263 Move D13, [X31+88]
	264 Move D12, [X31+96]
	265 Move V14, [X31+80]
	266 Add X31, X31, 192
	267 Return 
	268 Call 0x1C17F20
	269 Call 0x3EB2B20

Method: System.Void CheckToAssumeStateAuthority(System.Boolean requireMasterClient = True)

Disassembly:
	0x01D94B8C MOV V1.16B, V13.16B
	0x01D94B90 MOV V2.16B, V12.16B
	0x01D94B94 MOV V3.16B, V11.16B
	0x01D94B98 MOV X1, X31
	0x01D94B9C BL 0x3C8F148
	0x01D94BA0 MOV X0, X19
	0x01D94BA4 MOV X1, X31
	0x01D94BA8 BL 0x3C32E90
	0x01D94BAC CBZ X0, 0x1D94DA8
	0x01D94BB0 MOV V0.16B, V10.16B
	0x01D94BB4 MOV V1.16B, V9.16B
	0x01D94BB8 MOV V2.16B, V8.16B
	0x01D94BBC MOV X1, X31
	0x01D94BC0 BL 0x3C3F62C
	0x01D94BC4 MOV X0, X19
	0x01D94BC8 MOV X1, X31
	0x01D94BCC BL 0x3C32E90
	0x01D94BD0 CBZ X0, 0x1D94DA8
	0x01D94BD4 MOV V0.16B, V14.16B
	0x01D94BD8 MOV V1.16B, V13.16B
	0x01D94BDC MOV V2.16B, V12.16B
	0x01D94BE0 MOV V3.16B, V11.16B
	0x01D94BE4 MOV X1, X31
	0x01D94BE8 BL 0x3C3F7AC
	0x01D94BEC MOV X0, X19
	0x01D94BF0 MOV X1, X31
	0x01D94BF4 BL 0x3C32E90
	0x01D94BF8 CBZ X0, 0x1D94DA8
	0x01D94BFC MOV X1, X31
	0x01D94C00 BL 0x3C3F58C
	0x01D94C04 LDR X0, [X19 + 0x178]
	0x01D94C08 CBZ X0, 0x1D94DA8
	0x01D94C0C ADRP X19, 0x2361000
	0x01D94C10 LDR X19, [X19 + 0x7C8]
	0x01D94C14 MOV X1, X31
	0x01D94C18 MOV V8.16B, V0.16B
	0x01D94C1C MOV V9.16B, V1.16B
	0x01D94C20 MOV V10.16B, V2.16B
	0x01D94C24 BL 0x3C3F58C
	0x01D94C28 MOV X0, X31
	0x01D94C2C FSUB S8, S8, S0
	0x01D94C30 FSUB S9, S9, S1
	0x01D94C34 FSUB S10, S10, S2
	0x01D94C38 BL 0x3C3C714
	0x01D94C3C FDIV S11, S8, S0
	0x01D94C40 FDIV S12, S9, S0
	0x01D94C44 FDIV S13, S10, S0
	0x01D94C48 FMUL S0, S11, S11
	0x01D94C4C FMUL S1, S12, S12
	0x01D94C50 FMUL S2, S13, S13
	0x01D94C54 FADD S0, S0, S1
	0x01D94C58 FADD S14, S2, S0
	0x01D94C5C FMOV S0, 25

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2645000
	006 Move W8, [X21+2563]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2363000
	014 Move X0, [X0+3576]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2563], W8
	018 Move X0, X19
	019 Call GrabbableItem.get_netObjectExists, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {68}
	024 Move X0, [X19+64]
	025 Compare X0, 0
	026 JumpIfEqual {83}
	027 Move X1, X31
	028 Call NetworkObject.get_IsValid, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {68}
	033 Move X0, [X19+56]
	034 Compare X0, 0
	035 JumpIfEqual {83}
	036 Move X1, X31
	037 Call NetworkRunner.get_IsSharedModeMasterClient, X0
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {46}
	042 Move TEMP, X20
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfEqual {68}
	046 Move X0, [X19+56]
	047 Compare X0, 0
	048 JumpIfEqual {83}
	049 Move X1, X31
	050 Call NetworkRunner.get_ActivePlayers, X0
	051 Move X8, [X19+64]
	052 Compare X8, 0
	053 JumpIfEqual {83}
	054 Move X20, X0
	055 Move X0, X8
	056 Move X1, X31
	057 Call NetworkObject.get_StateAuthority, X0
	058 Move X8, 0x2363000
	059 Move X8, [X8+3576]
	060 And X1, X0, 0
	061 Move X0, X20
	062 Move X2, [X8]
	063 Call Enumerable.Contains, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {73}
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 Return 
	073 Move X0, [X19+64]
	074 Compare X0, 0
	075 JumpIfEqual {83}
	076 Move X20, [X31+16]
	077 Move X19, [X31+24]
	078 Move X1, X31
	079 Move X30, [X31+32]
	080 Move X21, [X31+40]
	081 Call NetworkObject.RequestStateAuthority, X0
	082 Return 
	083 Call 0x1C17F20

Method: System.Void HandlePlayerLeft(Fusion.PlayerRef player)

Disassembly:
	0x01D94C60 FCMP S14, S0
	0x01D94C64 B.LE 0x1D94D20
	0x01D94C68 ADRP X20, 0x2644000

ISIL:
	001 Move W8, 1
	002 Move [X0+442], W8
	003 Return 

Method: System.Void HandleMasterClientSwitched(Fusion.PlayerRef player)

Disassembly:
	0x01D94C6C LDRB W8, [X20 + 0x785]
	0x01D94C70 CBNZ W8, 0x1D94C88
	0x01D94C74 ADRP X0, 0x235F000

ISIL:
	001 Move W8, 1
	002 Move [X0+442], W8
	003 Return 

Method: System.Void HandleAttachedAnchorDespawned(Fusion.NetworkBehaviourId anchorId)

Disassembly:
	0x01D94C78 LDR X0, [X0 + 0x5A8]
	0x01D94C7C BL 0x1C16CF4
	0x01D94C80 MOVZ W8, 0x1
	0x01D94C84 STRB W8, [X20 + 0x785]
	0x01D94C88 ADRP X8, 0x235F000
	0x01D94C8C LDR X8, [X8 + 0x5A8]
	0x01D94C90 LDR X0, [X8]
	0x01D94C94 LDR W8, [X0 + 0xE0]
	0x01D94C98 CBNZ W8, 0x1D94CA0
	0x01D94C9C BL 0x1C16DFC
	0x01D94CA0 ADRP X8, 0xFFFFFFFFFED56000
	0x01D94CA4 LDR V0, [X8 + 0x17C]
	0x01D94CA8 FSQRT S2, S14
	0x01D94CAC FCMP S2, S0
	0x01D94CB0 B.LE 0x1D94CC4
	0x01D94CB4 FDIV S0, S11, S2
	0x01D94CB8 FDIV S1, S12, S2
	0x01D94CBC FDIV S2, S13, S2
	0x01D94CC0 B 0x1D94CFC
	0x01D94CC4 ADRP X20, 0x2644000
	0x01D94CC8 LDRB W8, [X20 + 0x783]
	0x01D94CCC CBNZ W8, 0x1D94CE4
	0x01D94CD0 ADRP X0, 0x235F000
	0x01D94CD4 LDR X0, [X0 + 0x5A0]
	0x01D94CD8 BL 0x1C16CF4
	0x01D94CDC MOVZ W8, 0x1
	0x01D94CE0 STRB W8, [X20 + 0x783]
	0x01D94CE4 ADRP X8, 0x235F000
	0x01D94CE8 LDR X8, [X8 + 0x5A0]
	0x01D94CEC LDR X8, [X8]
	0x01D94CF0 LDR X8, [X8 + 0xB8]
	0x01D94CF4 LDP S0, S1, [X8]
	0x01D94CF8 LDR V2, [X8 + 0x8]
	0x01D94CFC FMOV S3, 5
	0x01D94D00 MOV X0, X31
	0x01D94D04 FMUL S8, S0, S3
	0x01D94D08 FMUL S9, S1, S3
	0x01D94D0C FMUL S10, S2, S3
	0x01D94D10 BL 0x3C3C714
	0x01D94D14 FMUL S8, S8, S0
	0x01D94D18 FMUL S9, S9, S0
	0x01D94D1C FMUL S10, S10, S0
	0x01D94D20 LDR X0, [X19]
	0x01D94D24 LDR W8, [X0 + 0xE0]
	0x01D94D28 CBNZ W8, 0x1D94D30
	0x01D94D2C BL 0x1C16DFC
	0x01D94D30 ADRP X20, 0x2644000
	0x01D94D34 LDRB W8, [X20 + 0x85D]
	0x01D94D38 CBNZ W8, 0x1D94D50
	0x01D94D3C ADRP X0, 0x2361000
	0x01D94D40 LDR X0, [X0 + 0x7C8]
	0x01D94D44 BL 0x1C16CF4
	0x01D94D48 MOVZ W8, 0x1
	0x01D94D4C STRB W8, [X20 + 0x85D]
	0x01D94D50 LDR X0, [X19]
	0x01D94D54 LDR W8, [X0 + 0xE0]
	0x01D94D58 CBNZ W8, 0x1D94D64
	0x01D94D5C BL 0x1C16DFC
	0x01D94D60 LDR X0, [X19]
	0x01D94D64 LDR X8, [X0 + 0xB8]
	0x01D94D68 LDR X0, [X8]
	0x01D94D6C CBZ X0, 0x1D94DA8
	0x01D94D70 MOV V0.16B, V8.16B
	0x01D94D74 MOV V1.16B, V9.16B
	0x01D94D78 MOV V2.16B, V10.16B
	0x01D94D7C MOV X1, X31
	0x01D94D80 BL 0x1DC2DAC
	0x01D94D84 LDP X20, X19, [X31 + 0x190]
	0x01D94D88 LDP X30, X21, [X31 + 0x180]
	0x01D94D8C LDR X29, [X31 + 0x178]
	0x01D94D90 LDP D9, D8, [X31 + 0x168]
	0x01D94D94 LDP D11, D10, [X31 + 0x158]
	0x01D94D98 LDP D13, D12, [X31 + 0x148]
	0x01D94D9C LDR V14, [X31 + 0x140]
	0x01D94DA0 ADD X31, X31, 0x1A0
	0x01D94DA4 RET
	0x01D94DA8 BL 0x1C16F20
	0x01D94DAC SUB X31, X31, 0xB0
	0x01D94DB0 STP D15, D14, [X31 + 0x10]
	0x01D94DB4 STP D13, D12, [X31 + 0x20]
	0x01D94DB8 STP D11, D10, [X31 + 0x30]
	0x01D94DBC STP D9, D8, [X31 + 0x40]
	0x01D94DC0 STR X30, [X31 + 0x50]
	0x01D94DC4 STP X28, X27, [X31 + 0x60]
	0x01D94DC8 STP X26, X25, [X31 + 0x70]
	0x01D94DCC STP X24, X23, [X31 + 0x80]
	0x01D94DD0 STP X22, X21, [X31 + 0x90]
	0x01D94DD4 STP X20, X19, [X31 + 0xA0]
	0x01D94DD8 ADRP X20, 0x2644000
	0x01D94DDC ADRP X21, 0x235F000
	0x01D94DE0 LDRB W8, [X20 + 0xA09]
	0x01D94DE4 LDR X21, [X21 + 0x598]
	0x01D94DE8 MOV X19, X0
	0x01D94DEC TBNZ X8, 0x0, 0x1D94E10
	0x01D94DF0 ADRP X0, 0x235F000
	0x01D94DF4 LDR X0, [X0 + 0x598]
	0x01D94DF8 BL 0x1C16CF4
	0x01D94DFC ADRP X0, 0x2361000
	0x01D94E00 LDR X0, [X0 + 0x7C8]
	0x01D94E04 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D14
	003 Move [X31+40], D13
	004 Move [X31+48], D12
	005 Move [X31+56], D11
	006 Move [X31+64], D10
	007 Move [X31+72], D9
	008 Move [X31+80], D8
	009 Move [X31+88], X30
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X20, X1
	015 Move X19, X0
	016 Call GrabbableItem.get_netObjectExists, X0
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {116}
	021 Move X0, X19
	022 Call GrabbableItem.get_attachedAnchorId, X0
	023 Move X22, 0x2645000
	024 Move W8, [X22+2592]
	025 Move X21, X0
	026 Compare W8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, 0x2363000
	029 Move X0, [X0+920]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X22+2592], W8
	033 Move X8, 0x2363000
	034 Move X8, [X8+920]
	035 Move X0, [X8]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X8, X21
	042 ShiftRight X8, 32
	043 And X8, X8, 0x7FFFFFFF
	044 Move X9, X20
	045 ShiftRight X9, 32
	046 And X9, X9, 0x7FFFFFFF
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X0, [X19+64]
	049 Compare X0, 0
	050 JumpIfEqual {116}
	051 Move W8, [X0+96]
	052 Move TEMP, X8
	053 And TEMP, TEMP, 2
	054 Compare TEMP, 2
	055 JumpIfEqual {116}
	056 Move X1, X31
	057 Call NetworkObject.get_HasStateAuthority, X0
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {116}
	062 Move X0, X19
	063 Move X1, X31
	064 Call Component.get_transform, X0
	065 Compare X0, 0
	066 JumpIfEqual {130}
	067 Move X1, X31
	068 Call Transform.get_position, X0
	069 Move X0, X19
	070 Move X1, X31
	071 Move V8, V0
	072 Move V9, V1
	073 Move V10, V2
	074 Call Component.get_transform, X0
	075 Compare X0, 0
	076 JumpIfEqual {130}
	077 Move X1, X31
	078 Call Transform.get_rotation, X0
	079 Move X20, 0x2645000
	080 Move W8, [X20+1923]
	081 Move V11, V0
	082 Move V12, V1
	083 Move V13, V2
	084 Move V14, V3
	085 Compare W8, 0
	086 JumpIfNotEqual {92}
	087 Move X0, 0x2360000
	088 Move X0, [X0+1440]
	089 Call 0x1C17CF4
	090 Move W8, 1
	091 Move [X20+1923], W8
	092 Move X8, 0x2360000
	093 Move X8, [X8+1440]
	094 Move W2, 1
	095 Move X0, X19
	096 Move V3, V11
	097 Move X8, [X8]
	098 Move V4, V12
	099 Move V5, V13
	100 Move V6, V14
	101 Move X8, [X8+184]
	102 Move W3, W31
	103 Move S0, [X8]
	104 Move S1, [X8+4]
	105 Move V2, [X8+8]
	106 Move [X31+16], S0
	107 Move [X31+20], S1
	108 Move [X31+28], S2
	109 Move [X31+4], S1
	110 Move [X31+12], S2
	111 Move [X31], S0
	112 Move V0, V8
	113 Move V1, V9
	114 Move V2, V10
	115 Call GrabbableItem.ReleaseInternal, X0, X1, X2, X3, X4, X5, X6, X7
	116 Move X20, [X31+112]
	117 Move X19, [X31+120]
	118 Move X22, [X31+96]
	119 Move X21, [X31+104]
	120 Move X30, [X31+88]
	121 Move D9, [X31+72]
	122 Move D8, [X31+80]
	123 Move D11, [X31+56]
	124 Move D10, [X31+64]
	125 Move D13, [X31+40]
	126 Move D12, [X31+48]
	127 Move V14, [X31+32]
	128 Add X31, X31, 128
	129 Return 
	130 Call 0x1C17F20

Method: System.Void Spawned()

Disassembly:
	0x01D94E08 MOVZ W8, 0x1
	0x01D94E0C STRB W8, [X20 + 0xA09]
	0x01D94E10 LDR X0, [X21]
	0x01D94E14 LDR X20, [X19 + 0x150]
	0x01D94E18 LDR W8, [X0 + 0xE0]
	0x01D94E1C CBNZ W8, 0x1D94E24
	0x01D94E20 BL 0x1C16DFC
	0x01D94E24 MOV X0, X20
	0x01D94E28 MOV X1, X31
	0x01D94E2C MOV X2, X31
	0x01D94E30 BL 0x3C3883C
	0x01D94E34 TBNZ X0, 0x0, 0x1D952A4
	0x01D94E38 LDR X8, [X19 + 0x150]
	0x01D94E3C CBZ X8, 0x1D952D4
	0x01D94E40 LDR X0, [X8 + 0x40]
	0x01D94E44 CBZ X0, 0x1D952A4
	0x01D94E48 LDRB W8, [X0 + 0x60]
	0x01D94E4C TBNZ X8, 0x1, 0x1D952A4
	0x01D94E50 MOV X1, X31
	0x01D94E54 BL 0x1E93668
	0x01D94E58 TBZ X0, 0x0, 0x1D952A4
	0x01D94E5C LDR X0, [X21]
	0x01D94E60 LDR X20, [X19 + 0x178]
	0x01D94E64 LDR W8, [X0 + 0xE0]
	0x01D94E68 CBNZ W8, 0x1D94E70
	0x01D94E6C BL 0x1C16DFC
	0x01D94E70 MOV X0, X20
	0x01D94E74 MOV X1, X31
	0x01D94E78 MOV X2, X31
	0x01D94E7C BL 0x3C354F8
	0x01D94E80 TBZ X0, 0x0, 0x1D952A4
	0x01D94E84 LDR X0, [X21]
	0x01D94E88 LDR X20, [X19 + 0x1A8]
	0x01D94E8C LDR W8, [X0 + 0xE0]
	0x01D94E90 CBNZ W8, 0x1D94E98
	0x01D94E94 BL 0x1C16DFC
	0x01D94E98 MOV X0, X20
	0x01D94E9C MOV X1, X31
	0x01D94EA0 MOV X2, X31
	0x01D94EA4 BL 0x3C3883C
	0x01D94EA8 TBZ X0, 0x0, 0x1D94F14
	0x01D94EAC MOV X0, X19
	0x01D94EB0 MOV X1, X31
	0x01D94EB4 BL 0x3C32E90
	0x01D94EB8 CBZ X0, 0x1D952D4
	0x01D94EBC MOV X1, X31
	0x01D94EC0 BL 0x3C3F58C
	0x01D94EC4 LDR X0, [X19 + 0x178]
	0x01D94EC8 CBZ X0, 0x1D952D4
	0x01D94ECC MOV X1, X31
	0x01D94ED0 MOV V8.16B, V0.16B
	0x01D94ED4 MOV V9.16B, V1.16B
	0x01D94ED8 MOV V10.16B, V2.16B
	0x01D94EDC BL 0x3C3F58C
	0x01D94EE0 FSUB S0, S8, S0
	0x01D94EE4 FSUB S1, S9, S1
	0x01D94EE8 FSUB S2, S10, S2
	0x01D94EEC FMUL S0, S0, S0
	0x01D94EF0 FMUL S1, S1, S1
	0x01D94EF4 FMUL S2, S2, S2
	0x01D94EF8 FADD S0, S0, S1
	0x01D94EFC FADD S0, S2, S0
	0x01D94F00 FMOV S1, 1
	0x01D94F04 FCMP S0, S1
	0x01D94F08 B.LE 0x1D94F14
	0x01D94F0C MOV X0, X19
	0x01D94F10 BL 0x1D8A3AC
	0x01D94F14 LDRB W8, [X19 + 0x89]
	0x01D94F18 CBZ W8, 0x1D95260
	0x01D94F1C LDR X8, [X19 + 0x150]
	0x01D94F20 CBZ X8, 0x1D952D4
	0x01D94F24 LDRB W8, [X8 + 0x84]
	0x01D94F28 CBZ W8, 0x1D95260
	0x01D94F2C LDR X0, [X21]
	0x01D94F30 LDR X20, [X19 + 0x1A8]
	0x01D94F34 LDR W8, [X0 + 0xE0]
	0x01D94F38 CBNZ W8, 0x1D94F40
	0x01D94F3C BL 0x1C16DFC
	0x01D94F40 MOV X0, X20
	0x01D94F44 MOV X1, X31
	0x01D94F48 MOV X2, X31
	0x01D94F4C BL 0x3C354F8
	0x01D94F50 TBZ X0, 0x0, 0x1D94FB8
	0x01D94F54 LDR X0, [X19 + 0x1A8]
	0x01D94F58 CBZ X0, 0x1D952D4
	0x01D94F5C MOV X1, X31
	0x01D94F60 BL 0x3C3F58C
	0x01D94F64 LDR X0, [X19 + 0x1A8]
	0x01D94F68 CBZ X0, 0x1D952D4
	0x01D94F6C MOV X1, X31
	0x01D94F70 MOV V8.16B, V0.16B
	0x01D94F74 MOV V9.16B, V1.16B
	0x01D94F78 MOV V10.16B, V2.16B
	0x01D94F7C BL 0x3C3DEB4
	0x01D94F80 MOV V4.16B, V0.16B
	0x01D94F84 MOV V5.16B, V1.16B
	0x01D94F88 MOV V6.16B, V2.16B
	0x01D94F8C MOV V7.16B, V3.16B
	0x01D94F90 MOV X0, X19
	0x01D94F94 MOV V0.16B, V8.16B
	0x01D94F98 MOV V1.16B, V9.16B
	0x01D94F9C MOV V2.16B, V10.16B
	0x01D94FA0 MOV V3.16B, V4.16B
	0x01D94FA4 MOV V4.16B, V5.16B
	0x01D94FA8 MOV V5.16B, V6.16B
	0x01D94FAC MOV V6.16B, V7.16B
	0x01D94FB0 BL 0x1D948D8
	0x01D94FB4 B 0x1D95260
	0x01D94FB8 LDRB W8, [X19 + 0x180]
	0x01D94FBC CBZ W8, 0x1D95260
	0x01D94FC0 LDR W8, [X19 + 0x230]
	0x01D94FC4 CMP W8, 0x1
	0x01D94FC8 B.LT 0x1D95260
	0x01D94FCC ADRP X8, 0xFFFFFFFFFED56000
	0x01D94FD0 LDR V0, [X8 + 0x17C]
	0x01D94FD4 ADRP X20, 0x235F000
	0x01D94FD8 LDR X20, [X20 + 0x5A8]
	0x01D94FDC ADRP X21, 0x235F000
	0x01D94FE0 STR S0, [X31 + 0x8]
	0x01D94FE4 ADRP X22, 0x2361000
	0x01D94FE8 LDR X21, [X21 + 0x5A0]
	0x01D94FEC LDR X22, [X22 + 0x7C8]
	0x01D94FF0 MOV X23, X31
	0x01D94FF4 MOV X24, X31
	0x01D94FF8 ADRP X25, 0x2644000
	0x01D94FFC MOVZ W26, 0x1
	0x01D95000 ADRP X27, 0x2643000
	0x01D95004 ADRP X28, 0x2643000

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+80], D10
	003 Move [X31+96], D9
	004 Move [X31+104], D8
	005 Move [X31+112], X30
	006 Move [X31+120], X21
	007 Move [X31+128], X20
	008 Move [X31+136], X19
	009 NotImplemented "Instruction MRS not yet implemented."
	010 Move X8, [X20+40]
	011 Move X21, 0x2645000
	012 Move X19, X0
	013 Move [X31+72], X8
	014 Move W8, [X21+2564]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x2363000
	020 Move X0, [X0+3352]
	021 Call 0x1C17CF4
	022 Move X0, 0x2363000
	023 Move X0, [X0+3584]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+2564], W8
	027 Move X0, X19
	028 Move X1, X31
	029 Move [X31+6], W31
	030 NotImplemented "Instruction STRH not yet implemented."
	031 Call NetworkBehaviour.Spawned, X0
	032 Add X8, X31, 40
	033 Move X0, X19
	034 Call GrabbableItem.get_spawnInfo, X0
	035 Move W8, [X31+68]
	036 Move TEMP, X8
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {87}
	040 Move X0, [X19+64]
	041 Compare X0, 0
	042 JumpIfEqual {87}
	043 Move W8, [X0+96]
	044 Move TEMP, X8
	045 And TEMP, TEMP, 2
	046 Compare TEMP, 2
	047 JumpIfEqual {87}
	048 Move X1, X31
	049 Call NetworkObject.get_HasStateAuthority, X0
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {87}
	054 Move X0, X19
	055 Move X1, X31
	056 Call Component.get_transform, X0
	057 Compare X0, 0
	058 JumpIfEqual {161}
	059 Move X1, X31
	060 Call Transform.get_position, X0
	061 Move X0, X19
	062 Move X1, X31
	063 Move V8, V0
	064 Move V9, V1
	065 Move V10, V2
	066 Call Component.get_transform, X0
	067 Compare X0, 0
	068 JumpIfEqual {161}
	069 Move X1, X31
	070 Call Transform.get_rotation, X0
	071 Move W8, 1
	072 Move [X31+36], W8
	073 NotImplemented "Instruction LDRH not yet implemented."
	074 Add X1, X31, 8
	075 Move X0, X19
	076 Move [X31+8], S8
	077 Move [X31+16], S9
	078 NotImplemented "Instruction STURH not yet implemented."
	079 Move W8, [X31+6]
	080 Move [X31+16], S10
	081 Move [X31+24], S0
	082 Move [X31+24], S1
	083 Move [X31+32], S2
	084 Move [X31+32], S3
	085 Move [X31+39], W8
	086 Call GrabbableItem.set_spawnInfo, X0, X1
	087 Move X0, [X19+64]
	088 Compare X0, 0
	089 JumpIfEqual {117}
	090 Move W8, [X0+96]
	091 Move TEMP, X8
	092 And TEMP, TEMP, 2
	093 Compare TEMP, 2
	094 JumpIfEqual {117}
	095 Move X1, X31
	096 Call NetworkObject.get_HasStateAuthority, X0
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {117}
	101 Move X0, X19
	102 Call GrabbableItem.InitSpawn, X0
	103 Move W8, [X19+328]
	104 Compare W8, 0
	105 JumpIfEqual {117}
	106 Move X8, [X19+128]
	107 Compare X8, 0
	108 JumpIfEqual {161}
	109 Move X0, [X19+56]
	110 Move W8, 0x43960000
	111 Move S0, W8
	112 Move X1, X31
	113 Call TickTimer.CreateFromSeconds, X0, V0
	114 And X1, X0, 0
	115 Move X0, X19
	116 Call GrabbableItem.set_respawnTimer, X0, X1
	117 Move X0, X19
	118 Call GrabbableItem.HandleGrabbedChanged, X0
	119 Move X0, X19
	120 Call GrabbableItem.HandleBackpackIdChanged, X0
	121 Move X0, X19
	122 Call GrabbableItem.HandleStuckAnchorIdChanged, X0
	123 Move X8, [X19+128]
	124 Compare X8, 0
	125 JumpIfEqual {161}
	126 Move W8, [X8+40]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X21, 0x2363000
	129 Move X21, [X21+3352]
	130 Move X0, [X21]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {136}
	134 Call 0x1C17DFC
	135 Move X0, [X21]
	136 Move X8, [X0+184]
	137 Move X0, [X8]
	138 Compare X0, 0
	139 JumpIfEqual {161}
	140 Move X8, 0x2363000
	141 Move X8, [X8+3584]
	142 Move X1, X19
	143 Move X2, [X8]
	144 Call HashSet`1<Object>.Add, X0, X1
	145 Move W8, 257
	146 Move W9, 1
	147 NotImplemented "Instruction STRH not yet implemented."
	148 Move [X19+442], W9
	149 Move X8, [X20+40]
	150 Move X9, [X31+72]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move X20, [X31+128]
	153 Move X19, [X31+136]
	154 Move X30, [X31+112]
	155 Move X21, [X31+120]
	156 Move D9, [X31+96]
	157 Move D8, [X31+104]
	158 Move V10, [X31+80]
	159 Add X31, X31, 144
	160 Return 
	161 Call 0x1C17F20
	162 Call 0x3EB2B20

Method: System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)

Disassembly:
	0x01D95008 MOV X0, X19
	0x01D9500C MOV X1, X31
	0x01D95010 BL 0x3C32E90
	0x01D95014 CBZ X0, 0x1D952D4
	0x01D95018 MOV X1, X31
	0x01D9501C BL 0x3C3F58C
	0x01D95020 MOV X0, X19
	0x01D95024 MOV X1, X31
	0x01D95028 MOV V8.16B, V0.16B
	0x01D9502C MOV V9.16B, V1.16B
	0x01D95030 MOV V10.16B, V2.16B
	0x01D95034 BL 0x3C32E90
	0x01D95038 CBZ X0, 0x1D952D4
	0x01D9503C MOV X1, X31
	0x01D95040 BL 0x3C3DEB4
	0x01D95044 LDR X8, [X19 + 0x228]
	0x01D95048 CBZ X8, 0x1D952D4
	0x01D9504C LDR W9, [X8 + 0x18]
	0x01D95050 CMP X24, X9
	0x01D95054 B.CS 0x1D952D8
	0x01D95058 ADD X8, X8, X23
	0x01D9505C LDP S4, S5, [X8 + 0x20]
	0x01D95060 LDR V6, [X8 + 0x28]
	0x01D95064 MOV X0, X31
	0x01D95068 STR S10, [X31 + 0x5C]
	0x01D9506C MOV V10.16B, V9.16B
	0x01D95070 MOV V9.16B, V8.16B
	0x01D95074 BL 0x3C2A9FC
	0x01D95078 LDR X0, [X19 + 0x178]
	0x01D9507C CBZ X0, 0x1D952D4
	0x01D95080 MOV X1, X31
	0x01D95084 MOV V11.16B, V0.16B
	0x01D95088 MOV V12.16B, V1.16B
	0x01D9508C MOV V13.16B, V2.16B
	0x01D95090 BL 0x3C3F58C
	0x01D95094 MOV X0, X19
	0x01D95098 MOV X1, X31
	0x01D9509C MOV V14.16B, V0.16B
	0x01D950A0 MOV V15.16B, V1.16B
	0x01D950A4 MOV V8.16B, V2.16B
	0x01D950A8 BL 0x3C32E90
	0x01D950AC CBZ X0, 0x1D952D4
	0x01D950B0 MOV X1, X31
	0x01D950B4 BL 0x3C3F58C
	0x01D950B8 LDR X8, [X19 + 0x228]
	0x01D950BC CBZ X8, 0x1D952D4
	0x01D950C0 LDR W9, [X8 + 0x18]
	0x01D950C4 CMP X24, X9
	0x01D950C8 B.CS 0x1D952D8
	0x01D950CC LDR V5, [X31 + 0x5C]
	0x01D950D0 FADD S3, S9, S11
	0x01D950D4 FADD S4, S10, S12
	0x01D950D8 FSUB S0, S14, S0
	0x01D950DC FSUB S1, S15, S1
	0x01D950E0 ADD X8, X8, X23
	0x01D950E4 FADD S11, S3, S0
	0x01D950E8 FADD S12, S4, S1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2644000
	007 Move W8, [X22+2565]
	008 Move W21, W2
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x2362000
	016 Move X0, [X0+3352]
	017 Call 0x1C17CF4
	018 Move X0, 0x2362000
	019 Move X0, [X0+3416]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2565], W8
	023 And W2, W21, 1
	024 Move X0, X19
	025 Move X1, X20
	026 Move X3, X31
	027 Call NetworkBehaviour.Despawned, X0, X1, X2
	028 Move X8, [X19+496]
	029 Compare X8, 0
	030 JumpIfEqual {36}
	031 Move X9, [X8+24]
	032 Move X0, [X8+64]
	033 Move X2, [X8+40]
	034 Move X1, X20
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X8, [X19+128]
	037 Compare X8, 0
	038 JumpIfEqual {70}
	039 Move W8, [X8+40]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X20, 0x2362000
	042 Move X20, [X20+3352]
	043 Move X0, [X20]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {49}
	047 Call 0x1C17DFC
	048 Move X0, [X20]
	049 Move X8, [X0+184]
	050 Move X0, [X8]
	051 Compare X0, 0
	052 JumpIfEqual {70}
	053 Move X8, 0x2362000
	054 Move X8, [X8+3416]
	055 Move X1, X19
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X2, [X8]
	061 Move X30, [X31+48]
	062 Call HashSet`1<Object>.Remove, X0, X1
	063 Return 
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X30, [X31+48]
	069 Return 
	070 Call 0x1C17F20

Method: System.Void HandleUse()

Disassembly:
	0x01D950EC LDP S0, S1, [X8 + 0x2C]
	0x01D950F0 LDR V3, [X8 + 0x34]
	0x01D950F4 FADD S5, S5, S13
	0x01D950F8 FSUB S2, S8, S2
	0x01D950FC FADD S13, S5, S2
	0x01D95100 MOV X0, X31
	0x01D95104 STP S1, S0, [X31 + 0x58]

ISIL:
	001 Move X8, [X0+464]
	002 Compare X8, 0
	003 JumpIfEqual {8}
	004 Move X2, [X8+24]
	005 Move X0, [X8+64]
	006 Move X1, [X8+40]
	007 CallNoReturn X2
	008 Return 

Method: System.Void HandleTriggerUse()

Disassembly:
	0x01D95108 FSUB S8, S11, S0
	0x01D9510C FSUB S9, S12, S1
	0x01D95110 STR S3, [X31 + 0xC]
	0x01D95114 FSUB S10, S13, S3
	0x01D95118 BL 0x3C3C714
	0x01D9511C FDIV S14, S8, S0
	0x01D95120 FDIV S15, S9, S0

ISIL:
	001 Move X8, [X0+472]
	002 Compare X8, 0
	003 JumpIfEqual {8}
	004 Move X2, [X8+24]
	005 Move X0, [X8+64]
	006 Move X1, [X8+40]
	007 CallNoReturn X2
	008 Return 

Method: System.Void TestThrow()

Disassembly:
	0x01D95124 FDIV S8, S10, S0
	0x01D95128 FMUL S0, S14, S14
	0x01D9512C FMUL S1, S15, S15
	0x01D95130 FADD S0, S0, S1
	0x01D95134 FMUL S1, S8, S8
	0x01D95138 FADD S9, S1, S0
	0x01D9513C FMOV S0, 25
	0x01D95140 FCMP S9, S0
	0x01D95144 B.LE 0x1D951EC
	0x01D95148 LDRB W8, [X25 + 0x785]
	0x01D9514C CBNZ W8, 0x1D9515C
	0x01D95150 MOV X0, X20
	0x01D95154 BL 0x1C16CF4
	0x01D95158 STRB W26, [X25 + 0x785]
	0x01D9515C LDR X0, [X20]
	0x01D95160 LDR W8, [X0 + 0xE0]
	0x01D95164 CBNZ W8, 0x1D9516C
	0x01D95168 BL 0x1C16DFC
	0x01D9516C LDR V0, [X31 + 0x8]
	0x01D95170 FSQRT S2, S9
	0x01D95174 FCMP S2, S0
	0x01D95178 B.LE 0x1D9518C
	0x01D9517C FDIV S0, S14, S2
	0x01D95180 FDIV S1, S15, S2
	0x01D95184 FDIV S2, S8, S2
	0x01D95188 B 0x1D951B0
	0x01D9518C LDRB W8, [X27 + 0x783]
	0x01D95190 CBNZ W8, 0x1D951A0
	0x01D95194 MOV X0, X21
	0x01D95198 BL 0x1C16CF4
	0x01D9519C STRB W26, [X27 + 0x783]
	0x01D951A0 LDR X8, [X21]
	0x01D951A4 LDR X8, [X8 + 0xB8]
	0x01D951A8 LDP S0, S1, [X8]
	0x01D951AC LDR V2, [X8 + 0x8]
	0x01D951B0 FMOV S3, 5
	0x01D951B4 MOV X0, X31
	0x01D951B8 FMUL S8, S0, S3
	0x01D951BC FMUL S9, S1, S3
	0x01D951C0 FMUL S10, S2, S3
	0x01D951C4 BL 0x3C3C714
	0x01D951C8 LDR V3, [X31 + 0x5C]
	0x01D951CC FMUL S1, S8, S0
	0x01D951D0 FMUL S2, S9, S0
	0x01D951D4 FMUL S0, S10, S0
	0x01D951D8 FADD S11, S3, S1
	0x01D951DC LDR V1, [X31 + 0x58]
	0x01D951E0 FADD S12, S1, S2
	0x01D951E4 LDR V1, [X31 + 0xC]
	0x01D951E8 FADD S13, S1, S0
	0x01D951EC LDR X0, [X22]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Move X0, [X0+360]
	009 Compare X0, 0
	010 JumpIfEqual {58}
	011 Move X1, X31
	012 Call Rigidbody.get_position, X0
	013 Move X0, [X19+360]
	014 Compare X0, 0
	015 JumpIfEqual {58}
	016 Move X1, X31
	017 Call Rigidbody.get_rotation, X0
	018 Move X0, [X19+360]
	019 Compare X0, 0
	020 JumpIfEqual {58}
	021 Move X1, X31
	022 Call Rigidbody.get_velocity, X0
	023 Move X20, 0x2644000
	024 Move W8, [X20+1926]
	025 Move V8, V0
	026 Move V9, V1
	027 Move V10, V2
	028 Compare W8, 0
	029 JumpIfNotEqual {35}
	030 Move X0, 0x235F000
	031 Move X0, [X0+1440]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+1926], W8
	035 Move X8, 0x235F000
	036 Move X8, [X8+1440]
	037 Move S5, 5
	038 Move X0, X31
	039 Move X8, [X8]
	040 Move X8, [X8+184]
	041 Move S0, [X8+24]
	042 Move S1, [X8+28]
	043 Move V2, [X8+32]
	044 Multiply S3, S0, S5
	045 Multiply S4, S1, S5
	046 Multiply S5, S2, S5
	047 Move V0, V8
	048 Move V1, V9
	049 Move V2, V10
	050 Call 0x1D98268
	051 Move X20, [X19+360]
	052 Move X0, X20
	053 Call 0x19913C0
	054 Move X0, X20
	055 Move X1, X31
	056 Call Rigidbody.get_angularVelocity, X0
	057 Move [X19+416], X31
	058 Call 0x1C17F20

Method: System.Void TestUse()

Disassembly:
	0x01D951F0 LDR W8, [X0 + 0xE0]
	0x01D951F4 CBNZ W8, 0x1D951FC
	0x01D951F8 BL 0x1C16DFC
	0x01D951FC LDRB W8, [X28 + 0x85D]
	0x01D95200 CBNZ W8, 0x1D95210
	0x01D95204 MOV X0, X22
	0x01D95208 BL 0x1C16CF4

ISIL:
	001 Move X8, [X0+464]
	002 Compare X8, 0
	003 JumpIfEqual {8}
	004 Move X2, [X8+24]
	005 Move X0, [X8+64]
	006 Move X1, [X8+40]
	007 CallNoReturn X2
	008 Return 

Method: System.Void TestTriggerUse()

Disassembly:
	0x01D9520C STRB W26, [X28 + 0x85D]
	0x01D95210 LDR X0, [X22]
	0x01D95214 LDR W8, [X0 + 0xE0]
	0x01D95218 CBNZ W8, 0x1D95224
	0x01D9521C BL 0x1C16DFC
	0x01D95220 LDR X0, [X22]
	0x01D95224 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move X8, [X0+472]
	002 Compare X8, 0
	003 JumpIfEqual {8}
	004 Move X2, [X8+24]
	005 Move X0, [X8+64]
	006 Move X1, [X8+40]
	007 CallNoReturn X2
	008 Return 

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01D95228 LDR X0, [X8]
	0x01D9522C CBZ X0, 0x1D952D4
	0x01D95230 LDP S4, S3, [X31 + 0x58]
	0x01D95234 LDR V5, [X31 + 0xC]
	0x01D95238 MOV V0.16B, V11.16B
	0x01D9523C MOV V1.16B, V12.16B
	0x01D95240 MOV V2.16B, V13.16B
	0x01D95244 MOV X1, X31
	0x01D95248 BL 0x1DC2D74
	0x01D9524C LDRSW X8, [X19 + 0x230]
	0x01D95250 ADD X24, X24, 0x1
	0x01D95254 ADD X23, X23, 0x18
	0x01D95258 CMP X24, X8
	0x01D9525C B.LT 0x1D95008
	0x01D95260 LDR X8, [X19 + 0x220]
	0x01D95264 CBZ X8, 0x1D952A4
	0x01D95268 LDR X2, [X8 + 0x18]
	0x01D9526C LDR X0, [X8 + 0x40]
	0x01D95270 LDR X1, [X8 + 0x28]
	0x01D95274 LDP X20, X19, [X31 + 0xA0]
	0x01D95278 LDP X22, X21, [X31 + 0x90]
	0x01D9527C LDP X24, X23, [X31 + 0x80]
	0x01D95280 LDP X26, X25, [X31 + 0x70]
	0x01D95284 LDP X28, X27, [X31 + 0x60]
	0x01D95288 LDR X30, [X31 + 0x50]
	0x01D9528C LDP D9, D8, [X31 + 0x40]
	0x01D95290 LDP D11, D10, [X31 + 0x30]
	0x01D95294 LDP D13, D12, [X31 + 0x20]
	0x01D95298 LDP D15, D14, [X31 + 0x10]
	0x01D9529C ADD X31, X31, 0xB0
	0x01D952A0 BR X2
	0x01D952A4 LDP X20, X19, [X31 + 0xA0]
	0x01D952A8 LDP X22, X21, [X31 + 0x90]
	0x01D952AC LDP X24, X23, [X31 + 0x80]
	0x01D952B0 LDP X26, X25, [X31 + 0x70]
	0x01D952B4 LDP X28, X27, [X31 + 0x60]
	0x01D952B8 LDR X30, [X31 + 0x50]
	0x01D952BC LDP D9, D8, [X31 + 0x40]
	0x01D952C0 LDP D11, D10, [X31 + 0x30]
	0x01D952C4 LDP D13, D12, [X31 + 0x20]
	0x01D952C8 LDP D15, D14, [X31 + 0x10]
	0x01D952CC ADD X31, X31, 0xB0
	0x01D952D0 RET
	0x01D952D4 BL 0x1C16F20
	0x01D952D8 BL 0x1C16F28
	0x01D952DC STP X30, X21, [X31 - 0x20]!
	0x01D952E0 STP X20, X19, [X31 + 0x10]
	0x01D952E4 ADRP X21, 0x2643000
	0x01D952E8 ADRP X20, 0x235E000
	0x01D952EC LDRB W8, [X21 + 0xA0A]
	0x01D952F0 LDR X20, [X20 + 0x598]
	0x01D952F4 MOV X19, X0
	0x01D952F8 TBNZ X8, 0x0, 0x1D95310
	0x01D952FC ADRP X0, 0x235E000
	0x01D95300 LDR X0, [X0 + 0x598]
	0x01D95304 BL 0x1C16CF4
	0x01D95308 MOVZ W8, 0x1
	0x01D9530C STRB W8, [X21 + 0xA0A]
	0x01D95310 LDR X0, [X20]
	0x01D95314 LDR X20, [X19 + 0x150]
	0x01D95318 LDR W8, [X0 + 0xE0]
	0x01D9531C CBNZ W8, 0x1D95324
	0x01D95320 BL 0x1C16DFC
	0x01D95324 MOV X0, X20
	0x01D95328 MOV X1, X31
	0x01D9532C MOV X2, X31
	0x01D95330 BL 0x3C3883C
	0x01D95334 TBZ X0, 0x0, 0x1D95344
	0x01D95338 LDP X20, X19, [X31 + 0x10]
	0x01D9533C LDP X30, X21, [X31], #0x20
	0x01D95340 RET
	0x01D95344 MOV X0, X19
	0x01D95348 LDP X20, X19, [X31 + 0x10]
	0x01D9534C LDP X30, X21, [X31], #0x20
	0x01D95350 B 0x1D89904
	0x01D95354 STP X30, X19, [X31 - 0x10]!
	0x01D95358 MOV X19, X0
	0x01D9535C MOV X0, X31
	0x01D95360 BL 0x3C3C714
	0x01D95364 MOV X0, X19
	0x01D95368 LDP X30, X19, [X31], #0x10
	0x01D9536C B 0x1D95370
	0x01D95370 SUB X31, X31, 0xF0
	0x01D95374 STP D15, D14, [X31 + 0x80]
	0x01D95378 STP D13, D12, [X31 + 0x90]
	0x01D9537C STP D11, D10, [X31 + 0xA0]
	0x01D95380 STP D9, D8, [X31 + 0xB0]
	0x01D95384 STP X30, X23, [X31 + 0xC0]
	0x01D95388 STP X22, X21, [X31 + 0xD0]
	0x01D9538C STP X20, X19, [X31 + 0xE0]
	0x01D95390 ADRP X20, 0x2643000
	0x01D95394 LDRB W8, [X20 + 0xA10]
	0x01D95398 MOV V8.16B, V0.16B
	0x01D9539C MOV X19, X0
	0x01D953A0 TBNZ X8, 0x0, 0x1D953C4
	0x01D953A4 ADRP X0, 0x235E000
	0x01D953A8 LDR X0, [X0 + 0x598]
	0x01D953AC BL 0x1C16CF4
	0x01D953B0 ADRP X0, 0x2360000
	0x01D953B4 LDR X0, [X0 + 0x7C8]
	0x01D953B8 BL 0x1C16CF4
	0x01D953BC MOVZ W8, 0x1
	0x01D953C0 STRB W8, [X20 + 0xA10]
	0x01D953C4 ADRP X21, 0x2643000
	0x01D953C8 LDRB W8, [X21 + 0x783]
	0x01D953CC STP X31, X31, [X31 + 0x70]
	0x01D953D0 CBNZ W8, 0x1D953E8
	0x01D953D4 ADRP X0, 0x235E000
	0x01D953D8 LDR X0, [X0 + 0x5A0]
	0x01D953DC BL 0x1C16CF4
	0x01D953E0 MOVZ W8, 0x1
	0x01D953E4 STRB W8, [X21 + 0x783]
	0x01D953E8 ADRP X22, 0x235E000
	0x01D953EC LDR X22, [X22 + 0x5A0]
	0x01D953F0 LDR V0, [X19 + 0x184]
	0x01D953F4 LDR V1, [X19 + 0x188]
	0x01D953F8 LDR V2, [X19 + 0x18C]
	0x01D953FC LDR X8, [X22]
	0x01D95400 LDR X8, [X8 + 0xB8]
	0x01D95404 LDP S9, S10, [X8]
	0x01D95408 LDR V11, [X8 + 0x8]
	0x01D9540C ADRP X8, 0xFFFFFFFFFED54000
	0x01D95410 LDR V12, [X8 + 0xF20]
	0x01D95414 FSUB S0, S0, S9
	0x01D95418 FSUB S1, S1, S10
	0x01D9541C FMUL S0, S0, S0
	0x01D95420 FMUL S1, S1, S1
	0x01D95424 FADD S0, S0, S1
	0x01D95428 FSUB S1, S2, S11
	0x01D9542C FMUL S1, S1, S1
	0x01D95430 FADD S0, S1, S0
	0x01D95434 FCMP S0, S12
	0x01D95438 B.MI 0x1D954A0
	0x01D9543C LDR X0, [X19 + 0x168]
	0x01D95440 CBZ X0, 0x1D95C94
	0x01D95444 LDR V2, [X19 + 0x18C]
	0x01D95448 LDR V1, [X19 + 0x188]
	0x01D9544C LDR V0, [X19 + 0x184]
	0x01D95450 MOVZ W1, 0x2
	0x01D95454 MOV X2, X31
	0x01D95458 ADD X20, X19, 0x184
	0x01D9545C BL 0x3C8F3C4
	0x01D95460 LDR V9, [X19 + 0x184]
	0x01D95464 LDR V10, [X19 + 0x188]
	0x01D95468 LDRB W8, [X21 + 0x783]
	0x01D9546C LDR V11, [X19 + 0x18C]
	0x01D95470 CBNZ W8, 0x1D95488
	0x01D95474 ADRP X0, 0x235E000
	0x01D95478 LDR X0, [X0 + 0x5A0]
	0x01D9547C BL 0x1C16CF4
	0x01D95480 MOVZ W8, 0x1
	0x01D95484 STRB W8, [X21 + 0x783]
	0x01D95488 LDR X8, [X22]
	0x01D9548C LDR X8, [X8 + 0xB8]
	0x01D95490 LDR V0, [X8]
	0x01D95494 LDR V1, [X8 + 0x8]
	0x01D95498 STR D0, [X20]
	0x01D9549C STR S1, [X19 + 0x18C]
	0x01D954A0 ADRP X23, 0x235E000
	0x01D954A4 LDR X23, [X23 + 0x598]
	0x01D954A8 LDR X20, [X19 + 0x150]
	0x01D954AC LDR X0, [X23]
	0x01D954B0 LDR W8, [X0 + 0xE0]
	0x01D954B4 CBNZ W8, 0x1D954BC
	0x01D954B8 BL 0x1C16DFC
	0x01D954BC MOV X0, X20
	0x01D954C0 MOV X1, X31
	0x01D954C4 MOV X2, X31
	0x01D954C8 BL 0x3C3883C
	0x01D954CC TBNZ X0, 0x0, 0x1D95C70
	0x01D954D0 LDR X8, [X19 + 0x150]
	0x01D954D4 CBZ X8, 0x1D95C94
	0x01D954D8 LDR X0, [X8 + 0x40]
	0x01D954DC CBZ X0, 0x1D95C70
	0x01D954E0 LDRB W8, [X0 + 0x60]
	0x01D954E4 TBNZ X8, 0x1, 0x1D95C70
	0x01D954E8 MOV X1, X31
	0x01D954EC BL 0x1E93668
	0x01D954F0 TBZ X0, 0x0, 0x1D95C70
	0x01D954F4 LDR X0, [X23]
	0x01D954F8 LDR X20, [X19 + 0x1A8]
	0x01D954FC LDR W8, [X0 + 0xE0]
	0x01D95500 CBNZ W8, 0x1D95508
	0x01D95504 BL 0x1C16DFC
	0x01D95508 MOV X0, X20
	0x01D9550C MOV X1, X31
	0x01D95510 MOV X2, X31
	0x01D95514 BL 0x3C354F8
	0x01D95518 TBZ X0, 0x0, 0x1D955A8
	0x01D9551C MOV X0, X19
	0x01D95520 BL 0x1D92C4C
	0x01D95524 LDRB W8, [X21 + 0x783]
	0x01D95528 LDR X20, [X19 + 0x168]
	0x01D9552C CBNZ W8, 0x1D95544
	0x01D95530 ADRP X0, 0x235E000
	0x01D95534 LDR X0, [X0 + 0x5A0]
	0x01D95538 BL 0x1C16CF4
	0x01D9553C MOVZ W8, 0x1
	0x01D95540 STRB W8, [X21 + 0x783]
	0x01D95544 CBZ X20, 0x1D95C94
	0x01D95548 LDR X8, [X22]
	0x01D9554C MOV X0, X20
	0x01D95550 MOV X1, X31
	0x01D95554 LDR X8, [X8 + 0xB8]
	0x01D95558 LDP S1, S2, [X8 + 0x4]
	0x01D9555C LDR V0, [X8]
	0x01D95560 BL 0x3C8E908
	0x01D95564 LDRB W8, [X21 + 0x783]
	0x01D95568 LDR X20, [X19 + 0x168]
	0x01D9556C CBNZ W8, 0x1D95584
	0x01D95570 ADRP X0, 0x235E000
	0x01D95574 LDR X0, [X0 + 0x5A0]
	0x01D95578 BL 0x1C16CF4
	0x01D9557C MOVZ W8, 0x1
	0x01D95580 STRB W8, [X21 + 0x783]
	0x01D95584 CBZ X20, 0x1D95C94
	0x01D95588 LDR X8, [X22]
	0x01D9558C MOV X0, X20
	0x01D95590 MOV X1, X31
	0x01D95594 LDR X8, [X8 + 0xB8]
	0x01D95598 LDP S1, S2, [X8 + 0x4]
	0x01D9559C LDR V0, [X8]
	0x01D955A0 BL 0x3C8EA40
	0x01D955A4 B 0x1D95C6C
	0x01D955A8 LDR X0, [X23]
	0x01D955AC LDR X20, [X19 + 0x178]
	0x01D955B0 LDR W8, [X0 + 0xE0]
	0x01D955B4 CBNZ W8, 0x1D955BC
	0x01D955B8 BL 0x1C16DFC
	0x01D955BC MOV X0, X20
	0x01D955C0 MOV X1, X31
	0x01D955C4 MOV X2, X31
	0x01D955C8 BL 0x3C354F8
	0x01D955CC TBZ X0, 0x0, 0x1D95C6C
	0x01D955D0 LDRB W8, [X21 + 0x783]
	0x01D955D4 CBNZ W8, 0x1D955EC
	0x01D955D8 ADRP X0, 0x235E000
	0x01D955DC LDR X0, [X0 + 0x5A0]
	0x01D955E0 BL 0x1C16CF4
	0x01D955E4 MOVZ W8, 0x1
	0x01D955E8 STRB W8, [X21 + 0x783]
	0x01D955EC LDR X8, [X22]
	0x01D955F0 LDR X8, [X8 + 0xB8]
	0x01D955F4 LDP S0, S1, [X8]
	0x01D955F8 LDR V2, [X8 + 0x8]
	0x01D955FC FSUB S0, S9, S0
	0x01D95600 FSUB S1, S10, S1
	0x01D95604 FSUB S2, S11, S2
	0x01D95608 FMUL S0, S0, S0
	0x01D9560C FMUL S1, S1, S1
	0x01D95610 FADD S0, S0, S1
	0x01D95614 FMUL S1, S2, S2
	0x01D95618 FADD S0, S1, S0
	0x01D9561C FCMP S0, S12
	0x01D95620 B.MI 0x1D95690
	0x01D95624 ADRP X20, 0x2360000
	0x01D95628 LDR X20, [X20 + 0x7C8]
	0x01D9562C LDR X0, [X20]
	0x01D95630 LDR W8, [X0 + 0xE0]
	0x01D95634 CBNZ W8, 0x1D9563C
	0x01D95638 BL 0x1C16DFC
	0x01D9563C ADRP X23, 0x2643000
	0x01D95640 LDRB W8, [X23 + 0x85D]
	0x01D95644 CBNZ W8, 0x1D9565C
	0x01D95648 ADRP X0, 0x2360000
	0x01D9564C LDR X0, [X0 + 0x7C8]
	0x01D95650 BL 0x1C16CF4
	0x01D95654 MOVZ W8, 0x1
	0x01D95658 STRB W8, [X23 + 0x85D]
	0x01D9565C LDR X0, [X20]
	0x01D95660 LDR W8, [X0 + 0xE0]
	0x01D95664 CBNZ W8, 0x1D95670
	0x01D95668 BL 0x1C16DFC
	0x01D9566C LDR X0, [X20]
	0x01D95670 LDR X8, [X0 + 0xB8]
	0x01D95674 LDR X0, [X8]
	0x01D95678 CBZ X0, 0x1D95C94
	0x01D9567C MOV V0.16B, V9.16B
	0x01D95680 MOV V1.16B, V10.16B
	0x01D95684 MOV V2.16B, V11.16B
	0x01D95688 MOV X1, X31
	0x01D9568C BL 0x1DC2D90
	0x01D95690 LDR X0, [X19 + 0x178]
	0x01D95694 CBZ X0, 0x1D95C94
	0x01D95698 MOV X1, X31
	0x01D9569C BL 0x3C32E90
	0x01D956A0 CBZ X0, 0x1D95C94
	0x01D956A4 MOV X1, X31
	0x01D956A8 MOV X20, X0
	0x01D956AC BL 0x3C3F58C
	0x01D956B0 MOV X0, X20
	0x01D956B4 MOV X1, X31
	0x01D956B8 MOV V9.16B, V0.16B
	0x01D956BC MOV V10.16B, V1.16B
	0x01D956C0 STR S2, [X31 + 0x64]
	0x01D956C4 BL 0x3C3DEB4
	0x01D956C8 LDR X0, [X19 + 0x168]
	0x01D956CC CBZ X0, 0x1D95C94
	0x01D956D0 MOV X1, X31
	0x01D956D4 MOV V12.16B, V0.16B
	0x01D956D8 MOV V13.16B, V1.16B
	0x01D956DC MOV V14.16B, V2.16B
	0x01D956E0 MOV V15.16B, V3.16B
	0x01D956E4 BL 0x3C8EF74
	0x01D956E8 LDR X0, [X19 + 0x168]
	0x01D956EC CBZ X0, 0x1D95C94
	0x01D956F0 FSUB S11, S9, S0
	0x01D956F4 LDR V0, [X31 + 0x64]
	0x01D956F8 FSUB S3, S10, S1
	0x01D956FC MOV X1, X31
	0x01D95700 FSUB S0, S0, S2
	0x01D95704 STP S0, S3, [X31 + 0x5C]
	0x01D95708 BL 0x3C8F0AC
	0x01D9570C MOV X0, X31
	0x01D95710 BL 0x3C2A260
	0x01D95714 FMUL S4, S15, S0
	0x01D95718 FMUL S5, S12, S3
	0x01D9571C FMUL S6, S15, S1
	0x01D95720 FMUL S7, S13, S3
	0x01D95724 FADD S4, S4, S5
	0x01D95728 FMUL S5, S15, S2
	0x01D9572C FADD S6, S6, S7
	0x01D95730 FMUL S7, S14, S3
	0x01D95734 FMUL S3, S15, S3
	0x01D95738 FADD S5, S5, S7
	0x01D9573C FMUL S7, S12, S0
	0x01D95740 FSUB S3, S3, S7
	0x01D95744 FMUL S7, S13, S2
	0x01D95748 FADD S4, S7, S4
	0x01D9574C FMUL S7, S14, S0
	0x01D95750 FADD S6, S7, S6
	0x01D95754 FMUL S7, S12, S1
	0x01D95758 FADD S5, S7, S5
	0x01D9575C FMUL S7, S14, S1
	0x01D95760 FMUL S1, S13, S1
	0x01D95764 FSUB S3, S3, S1
	0x01D95768 FMUL S1, S12, S2
	0x01D9576C FMUL S16, S13, S0
	0x01D95770 FMUL S17, S14, S2
	0x01D95774 FSUB S0, S4, S7
	0x01D95778 FSUB S1, S6, S1
	0x01D9577C FSUB S2, S5, S16
	0x01D95780 FSUB S3, S3, S17
	0x01D95784 ADD X0, X31, 0x70
	0x01D95788 ADD X1, X31, 0x7C
	0x01D9578C MOV X2, X31
	0x01D95790 BL 0x3C2A6A8
	0x01D95794 ADRP X8, 0xFFFFFFFFFED55000
	0x01D95798 LDP S3, S0, [X31 + 0x78]
	0x01D9579C LDR V5, [X8 + 0x448]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+48], D14
	003 Move [X31+56], D13
	004 Move [X31+64], D12
	005 Move [X31+72], D11
	006 Move [X31+80], D10
	007 Move [X31+88], D9
	008 Move [X31+96], D8
	009 Move [X31+104], X30
	010 Move [X31+112], X24
	011 Move [X31+120], X23
	012 Move [X31+128], X22
	013 Move [X31+136], X21
	014 Move [X31+144], X20
	015 Move [X31+152], X19
	016 Move X20, 0x2644000
	017 Move X22, 0x235F000
	018 Move W8, [X20+2566]
	019 Move X22, [X22+1432]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {54}
	025 Move X0, 0x235F000
	026 Move X0, [X0+1808]
	027 Call 0x1C17CF4
	028 Move X0, 0x235F000
	029 Move X0, [X0+1816]
	030 Call 0x1C17CF4
	031 Move X0, 0x235F000
	032 Move X0, [X0+1824]
	033 Call 0x1C17CF4
	034 Move X0, 0x235F000
	035 Move X0, [X0+1928]
	036 Call 0x1C17CF4
	037 Move X0, 0x235F000
	038 Move X0, [X0+1432]
	039 Call 0x1C17CF4
	040 Move X0, 0x2362000
	041 Move X0, [X0+3592]
	042 Call 0x1C17CF4
	043 Move X0, 0x2362000
	044 Move X0, [X0+3600]
	045 Call 0x1C17CF4
	046 Move X0, 0x2362000
	047 Move X0, [X0+3608]
	048 Call 0x1C17CF4
	049 Move X0, 0x2362000
	050 Move X0, [X0+3616]
	051 Call 0x1C17CF4
	052 Move W8, 1
	053 Move [X20+2566], W8
	054 Move X0, X19
	055 Move X1, X31
	056 Move [X31+40], X31
	057 Move [X31+32], W31
	058 Call NetworkBehaviour.FixedUpdateNetwork, X0
	059 Move X0, X19
	060 Call GrabbableItem.get_isAttached, X0
	061 Move X8, [X22]
	062 Move X21, [X19+336]
	063 Move W20, W0
	064 Move W9, [X8+224]
	065 Compare W9, 0
	066 JumpIfNotEqual {69}
	067 Move X0, X8
	068 Call 0x1C17DFC
	069 Move X0, X21
	070 Move X1, X31
	071 Move X2, X31
	072 Call Object.op_Inequality, X0, X1
	073 Move TEMP, X20
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {209}
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {241}
	081 Move X0, [X19+336]
	082 Compare X0, 0
	083 JumpIfEqual {432}
	084 Move X8, [X0+64]
	085 Compare X8, 0
	086 JumpIfEqual {102}
	087 Move W9, [X8+96]
	088 Move TEMP, X9
	089 And TEMP, TEMP, 2
	090 Compare TEMP, 2
	091 JumpIfEqual {102}
	092 Move X0, X8
	093 Move X1, X31
	094 Call NetworkObject.get_HasStateAuthority, X0
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfEqual {170}
	099 Move X0, [X19+336]
	100 Compare X0, 0
	101 JumpIfEqual {432}
	102 Move X20, [X19+360]
	103 Move X1, X31
	104 Call Component.get_transform, X0
	105 Compare X0, 0
	106 JumpIfEqual {432}
	107 Move X1, X31
	108 Call Transform.get_position, X0
	109 Compare X20, 0
	110 JumpIfEqual {432}
	111 Move X0, X20
	112 Move X1, X31
	113 Call Rigidbody.set_position, X0, X1
	114 Move X0, [X19+336]
	115 Compare X0, 0
	116 JumpIfEqual {432}
	117 Move X20, [X19+360]
	118 Move X1, X31
	119 Call Component.get_transform, X0
	120 Compare X0, 0
	121 JumpIfEqual {432}
	122 Move X1, X31
	123 Call Transform.get_rotation, X0
	124 Compare X20, 0
	125 JumpIfEqual {432}
	126 Move X0, X20
	127 Move X1, X31
	128 Call Rigidbody.set_rotation, X0, X1
	129 Move X21, 0x2644000
	130 Move W8, [X21+1923]
	131 Move X20, [X19+360]
	132 Compare W8, 0
	133 JumpIfNotEqual {139}
	134 Move X0, 0x235F000
	135 Move X0, [X0+1440]
	136 Call 0x1C17CF4
	137 Move W8, 1
	138 Move [X21+1923], W8
	139 Compare X20, 0
	140 JumpIfEqual {432}
	141 Move X23, 0x235F000
	142 Move X23, [X23+1440]
	143 Move X0, X20
	144 Move X1, X31
	145 Move X8, [X23]
	146 Move X8, [X8+184]
	147 Move S1, [X8+4]
	148 Move S2, [X8+8]
	149 Move V0, [X8]
	150 Call Rigidbody.set_velocity, X0, X1
	151 Move W8, [X21+1923]
	152 Move X20, [X19+360]
	153 Compare W8, 0
	154 JumpIfNotEqual {160}
	155 Move X0, 0x235F000
	156 Move X0, [X0+1440]
	157 Call 0x1C17CF4
	158 Move W8, 1
	159 Move [X21+1923], W8
	160 Compare X20, 0
	161 JumpIfEqual {432}
	162 Move X8, [X23]
	163 Move X0, X20
	164 Move X1, X31
	165 Move X8, [X8+184]
	166 Move S1, [X8+4]
	167 Move S2, [X8+8]
	168 Move V0, [X8]
	169 Call Rigidbody.set_angularVelocity, X0, X1
	170 Move X8, [X19+336]
	171 Compare X8, 0
	172 JumpIfEqual {432}
	173 Move X0, [X22]
	174 Move X20, [X8+64]
	175 Move W9, [X0+224]
	176 Compare W9, 0
	177 JumpIfNotEqual {179}
	178 Call 0x1C17DFC
	179 Move X0, X20
	180 Move X1, X31
	181 Move X2, X31
	182 Call Object.op_Equality, X0, X1
	183 Move TEMP, X0
	184 And TEMP, TEMP, 1
	185 Compare TEMP, 1
	186 JumpIfEqual {315}
	187 Move X8, [X19+336]
	188 Compare X8, 0
	189 JumpIfEqual {432}
	190 Move X0, [X8+64]
	191 Compare X0, 0
	192 JumpIfEqual {432}
	193 Move X1, X31
	194 Call NetworkObject.get_IsValid, X0
	195 Move TEMP, X0
	196 And TEMP, TEMP, 1
	197 Compare TEMP, 1
	198 JumpIfNotEqual {315}
	199 Move X8, [X19+336]
	200 Compare X8, 0
	201 JumpIfEqual {432}
	202 Move X9, [X8+64]
	203 Compare X9, 0
	204 JumpIfEqual {257}
	205 Move X9, [X9+32]
	206 Compare X9, 0
	207 JumpIfEqual {257}
	208 Move W23, [X9]
	209 Move TEMP, X0
	210 And TEMP, TEMP, 1
	211 Compare TEMP, 1
	212 JumpIfNotEqual {215}
	213 Move X0, X19
	214 Call GrabbableItem.HandleGrabbedChanged, X0
	215 Move X0, X19
	216 Call GrabbableItem.get_backpackId, X0
	217 Move [X31+40], X0
	218 Add X0, X31, 40
	219 Move X1, X31
	220 Call NetworkBehaviourId.get_IsValid, X0
	221 Move TEMP, X0
	222 And TEMP, TEMP, 1
	223 Compare TEMP, 1
	224 JumpIfEqual {412}
	225 Move X8, [X19+128]
	226 Compare X8, 0
	227 JumpIfEqual {432}
	228 Move X0, X19
	229 Call GrabbableItem.get_respawnTimer, X0
	230 Move [X31+32], W0
	231 Move X1, [X19+56]
	232 Add X0, X31, 32
	233 Move X2, X31
	234 Call TickTimer.Expired, X0, X1
	235 Move TEMP, X0
	236 And TEMP, TEMP, 1
	237 Compare TEMP, 1
	238 JumpIfNotEqual {412}
	239 Move X0, X19
	240 Call GrabbableItem.RespawnOrDespawn, X0
	241 Move X0, X19
	242 Call GrabbableItem.HandleGrabbedChanged, X0
	243 Move X0, [X22]
	244 Move X20, [X19+336]
	245 Move W8, [X0+224]
	246 Compare W8, 0
	247 JumpIfNotEqual {249}
	248 Call 0x1C17DFC
	249 Move X0, X20
	250 Move X1, X31
	251 Move X2, X31
	252 Call Object.op_Equality, X0, X1
	253 Move TEMP, X0
	254 And TEMP, TEMP, 1
	255 Compare TEMP, 1
	256 JumpIfEqual {360}
	257 Move W23, W31
	258 Move W24, [X8+104]
	259 Move X0, X19
	260 Call GrabbableItem.get_attachedAnchorId, X0
	261 Move X21, 0x2644000
	262 Move W8, [X21+2592]
	263 Move X20, X0
	264 Compare W8, 0
	265 JumpIfNotEqual {271}
	266 Move X0, 0x2362000
	267 Move X0, [X0+920]
	268 Call 0x1C17CF4
	269 Move W8, 1
	270 Move [X21+2592], W8
	271 Move X22, 0x2362000
	272 Move X22, [X22+920]
	273 Move X0, [X22]
	274 Move W8, [X0+224]
	275 Compare W8, 0
	276 JumpIfNotEqual {278}
	277 Call 0x1C17DFC
	278 NotImplemented "Instruction CMP not yet implemented."
	279 Move X8, X20
	280 ShiftRight X8, 32
	281 And X8, X8, 0x7FFFFFFF
	282 NotImplemented "Instruction CMP not yet implemented."
	283 Move X0, [X19+336]
	284 Compare X0, 0
	285 JumpIfEqual {432}
	286 Call AttachedItemAnchor.get_grabbedItem, X0
	287 Move X8, [X19+64]
	288 Move X20, X0
	289 Compare X8, 0
	290 JumpIfEqual {295}
	291 Move X8, [X8+32]
	292 Compare X8, 0
	293 JumpIfEqual {295}
	294 Move W23, [X8]
	295 Move W23, W31
	296 Move W8, [X21+2592]
	297 Move W24, [X19+104]
	298 Compare W8, 0
	299 JumpIfNotEqual {305}
	300 Move X0, 0x2362000
	301 Move X0, [X0+920]
	302 Call 0x1C17CF4
	303 Move W8, 1
	304 Move [X21+2592], W8
	305 Move X0, [X22]
	306 Move W8, [X0+224]
	307 Compare W8, 0
	308 JumpIfNotEqual {310}
	309 Call 0x1C17DFC
	310 NotImplemented "Instruction CMP not yet implemented."
	311 Move X8, X20
	312 ShiftRight X8, 32
	313 And X8, X8, 0x7FFFFFFF
	314 NotImplemented "Instruction CMP not yet implemented."
	315 Move X8, 0x235F000
	316 Move X8, [X8+1824]
	317 Move X0, [X8]
	318 Call 0x1C17F10
	319 Move X8, 0x235F000
	320 Move X8, [X8+1816]
	321 Move X20, X0
	322 Move X1, [X8]
	323 Call Dictionary`2<Object, Object>..ctor, X0
	324 Move X0, [X19+128]
	325 Compare X0, 0
	326 JumpIfEqual {432}
	327 Move X1, X31
	328 Call Object.get_name, X0
	329 Compare X20, 0
	330 JumpIfEqual {432}
	331 Move X8, 0x2362000
	332 Move X9, 0x235F000
	333 Move X8, [X8+3600]
	334 Move X9, [X9+1808]
	335 Move X2, X0
	336 Move X0, X20
	337 Move X1, [X8]
	338 Move X3, [X9]
	339 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	340 Move X8, 0x235F000
	341 Move X8, [X8+1928]
	342 Move X0, [X8]
	343 Move W8, [X0+224]
	344 Compare W8, 0
	345 JumpIfNotEqual {347}
	346 Call 0x1C17DFC
	347 Move X8, 0x2362000
	348 Move X9, 0x2362000
	349 Move X10, 0x2362000
	350 Move X8, [X8+3608]
	351 Move X9, [X9+3616]
	352 Move X10, [X10+3592]
	353 Move W4, 1134
	354 Move X0, [X8]
	355 Move X2, [X9]
	356 Move X3, [X10]
	357 Move X1, X20
	358 Move X5, X31
	359 Call Log.Warning, X0, X1, X2, X3, X4
	360 Move X0, X19
	361 Call GrabbableItem.get_attachedAnchorId, X0
	362 Move X0, [X19+360]
	363 Compare X0, 0
	364 JumpIfEqual {432}
	365 Move X1, X31
	366 Call Rigidbody.get_position, X0
	367 Move X0, [X19+360]
	368 Compare X0, 0
	369 JumpIfEqual {432}
	370 Move X1, X31
	371 Move V8, V0
	372 Move V9, V1
	373 Move V10, V2
	374 Call Rigidbody.get_rotation, X0
	375 Move X20, 0x2644000
	376 Move W8, [X20+1923]
	377 Move V11, V0
	378 Move V12, V1
	379 Move V13, V2
	380 Move V14, V3
	381 Compare W8, 0
	382 JumpIfNotEqual {388}
	383 Move X0, 0x235F000
	384 Move X0, [X0+1440]
	385 Call 0x1C17CF4
	386 Move W8, 1
	387 Move [X20+1923], W8
	388 Move X8, 0x235F000
	389 Move X8, [X8+1440]
	390 Move X0, X19
	391 Move V3, V11
	392 Move V4, V12
	393 Move X8, [X8]
	394 Move V5, V13
	395 Move V6, V14
	396 Move W2, W31
	397 Move X8, [X8+184]
	398 Move W3, W31
	399 Move S0, [X8]
	400 Move S1, [X8+4]
	401 Move V2, [X8+8]
	402 Move [X31+16], S0
	403 Move [X31+20], S1
	404 Move [X31+28], S2
	405 Move [X31+4], S1
	406 Move [X31+12], S2
	407 Move [X31], S0
	408 Move V0, V8
	409 Move V1, V9
	410 Move V2, V10
	411 Call GrabbableItem.ReleaseInternal, X0, X1, X2, X3, X4, X5, X6, X7
	412 Move W8, [X19+441]
	413 Compare W8, 0
	414 JumpIfEqual {416}
	415 Move [X19+441], W31
	416 Move X20, [X31+144]
	417 Move X19, [X31+152]
	418 Move X22, [X31+128]
	419 Move X21, [X31+136]
	420 Move X24, [X31+112]
	421 Move X23, [X31+120]
	422 Move X30, [X31+104]
	423 Move D9, [X31+88]
	424 Move D8, [X31+96]
	425 Move D11, [X31+72]
	426 Move D10, [X31+80]
	427 Move D13, [X31+56]
	428 Move D12, [X31+64]
	429 Move V14, [X31+48]
	430 Add X31, X31, 160
	431 Return 
	432 Call 0x1C17F20

Method: System.Void Render()

Disassembly:
	0x01D9586C MOVZ W8, 0x1
	0x01D95870 STRB W8, [X23 + 0x785]
	0x01D95874 ADRP X20, 0x235E000
	0x01D95878 LDR X20, [X20 + 0x5A8]
	0x01D9587C FSUB S2, S12, S14
	0x01D95880 FSUB S9, S13, S9
	0x01D95884 FSUB S14, S15, S10
	0x01D95888 LDR X0, [X20]
	0x01D9588C LDR W8, [X0 + 0xE0]
	0x01D95890 CBNZ W8, 0x1D958A0
	0x01D95894 MOV V10.16B, V2.16B
	0x01D95898 BL 0x1C16DFC
	0x01D9589C MOV V2.16B, V10.16B
	0x01D958A0 FMUL S0, S2, S2
	0x01D958A4 FMUL S1, S9, S9
	0x01D958A8 ADRP X8, 0xFFFFFFFFFED55000
	0x01D958AC FADD S0, S0, S1
	0x01D958B0 LDR V10, [X8 + 0x17C]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call SimulationBehaviour.Render, X0
	006 Move W8, [X19+440]
	007 Compare W8, 0
	008 JumpIfEqual {13}
	009 Move X0, X19
	010 Move W1, W31
	011 Call GrabbableItem.UpdateIsVisible, X0, X1
	012 Move [X19+440], W31
	013 Move W8, [X19+442]
	014 Compare W8, 0
	015 JumpIfEqual {20}
	016 Move W1, 1
	017 Move X0, X19
	018 Call GrabbableItem.CheckToAssumeStateAuthority, X0, X1
	019 Move [X19+442], W31
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 

Method: System.Void RespawnOrDespawn()

Disassembly:
	0x01D957A0 LDP S1, S2, [X31 + 0x70]
	0x01D957A4 ADRP X8, 0xFFFFFFFFFED55000
	0x01D957A8 LDR V4, [X8 + 0x104]
	0x01D957AC FMUL S0, S0, S5
	0x01D957B0 STR S0, [X31 + 0x7C]
	0x01D957B4 LDRB W8, [X19 + 0x180]
	0x01D957B8 FMUL S1, S0, S1
	0x01D957BC FMUL S2, S0, S2
	0x01D957C0 FMUL S0, S0, S3
	0x01D957C4 FMUL S3, S1, S4
	0x01D957C8 FMUL S1, S2, S4
	0x01D957CC FMUL S0, S0, S4
	0x01D957D0 STP S3, S1, [X31 + 0x68]
	0x01D957D4 STR S0, [X31 + 0x58]
	0x01D957D8 CBZ W8, 0x1D958F8
	0x01D957DC STR S5, [X31 + 0x14]
	0x01D957E0 STR S4, [X31 + 0x54]
	0x01D957E4 LDR V4, [X19 + 0x240]
	0x01D957E8 LDR V5, [X19 + 0x244]
	0x01D957EC LDR V6, [X19 + 0x248]
	0x01D957F0 MOV V0.16B, V12.16B
	0x01D957F4 MOV V1.16B, V13.16B
	0x01D957F8 MOV V2.16B, V14.16B
	0x01D957FC MOV V3.16B, V15.16B
	0x01D95800 MOV X0, X31
	0x01D95804 STP S10, S9, [X31 + 0x4C]
	0x01D95808 BL 0x3C2A9FC
	0x01D9580C LDR X0, [X19 + 0x168]
	0x01D95810 STP S1, S0, [X31 + 0x44]
	0x01D95814 STR S2, [X31 + 0x40]
	0x01D95818 CBZ X0, 0x1D95C94
	0x01D9581C LDR V12, [X19 + 0x234]
	0x01D95820 LDR V13, [X19 + 0x238]
	0x01D95824 LDR V15, [X19 + 0x23C]
	0x01D95828 MOV X1, X31
	0x01D9582C BL 0x3C8EF74
	0x01D95830 LDR X0, [X19 + 0x168]
	0x01D95834 CBZ X0, 0x1D95C94
	0x01D95838 MOV X1, X31
	0x01D9583C MOV V14.16B, V0.16B
	0x01D95840 MOV V9.16B, V1.16B
	0x01D95844 MOV V10.16B, V2.16B
	0x01D95848 BL 0x3C8EF74
	0x01D9584C ADRP X23, 0x2643000
	0x01D95850 LDRB W8, [X23 + 0x785]
	0x01D95854 STP S1, S0, [X31 + 0x1C]
	0x01D95858 STR S2, [X31 + 0x18]
	0x01D9585C CBNZ W8, 0x1D95874
	0x01D95860 ADRP X0, 0x235E000
	0x01D95864 LDR X0, [X0 + 0x5A8]
	0x01D95868 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2644000
	006 Move X20, 0x235F000
	007 Move W8, [X21+2567]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x235F000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2567], W8
	019 Move X0, [X20]
	020 Move X20, [X19+64]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {66}
	033 Move X0, [X19+64]
	034 Compare X0, 0
	035 JumpIfEqual {71}
	036 Move X1, X31
	037 Call NetworkObject.get_IsValid, X0
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {66}
	042 Move X0, X31
	043 Call NetworkBehaviourId.get_None
	044 Move X1, X0
	045 Move X0, X19
	046 Call GrabbableItem.set_attachedAnchorId, X0, X1
	047 Move X0, X31
	048 Call NetworkBehaviourId.get_None
	049 Move X1, X0
	050 Move X0, X19
	051 Call GrabbableItem.set_backpackId, X0, X1
	052 Move X8, [X19+128]
	053 Compare X8, 0
	054 JumpIfEqual {71}
	055 Move X0, [X19+56]
	056 Compare X0, 0
	057 JumpIfEqual {71}
	058 Move X1, [X19+64]
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X2, X31
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Call NetworkRunner.Despawn, X0, X1
	065 Return 
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move X30, [X31+32]
	069 Move X21, [X31+40]
	070 Return 
	071 Call 0x1C17F20

Method: System.Void Despawn()

Disassembly:
	0x01D958B4 FMUL S1, S14, S14
	0x01D958B8 FADD S0, S1, S0
	0x01D958BC MOV V1.16B, V9.16B
	0x01D958C0 LDR V9, [X31 + 0x50]
	0x01D958C4 STP S0, S15, [X31 + 0x34]
	0x01D958C8 FSQRT S0, S0
	0x01D958CC FCMP S0, S10
	0x01D958D0 STR S12, [X31 + 0x3C]
	0x01D958D4 STP S1, S14, [X31 + 0xC]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move X0, [X0+56]
	004 Compare X0, 0
	005 JumpIfEqual {11}
	006 Move X1, [X8+64]
	007 Move X2, X31
	008 Move X30, [X31+16]
	009 Call NetworkRunner.Despawn, X0, X1
	010 Return 
	011 Call 0x1C17F20

Method: System.Void ApplyGrabMovement(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)

Disassembly:
	0x01D958D8 STR S2, [X31 + 0x8]
	0x01D958DC STR S13, [X31 + 0x24]
	0x01D958E0 B.LE 0x1D95904
	0x01D958E4 FDIV S2, S2, S0
	0x01D958E8 FDIV S1, S1, S0
	0x01D958EC STP S1, S2, [X31 + 0x2C]
	0x01D958F0 FDIV S0, S14, S0
	0x01D958F4 B 0x1D95938
	0x01D958F8 LDP S14, S13, [X31 + 0x5C]
	0x01D958FC LDR V15, [X31 + 0x58]
	0x01D95900 B 0x1D95BD4
	0x01D95904 LDRB W8, [X21 + 0x783]
	0x01D95908 CBNZ W8, 0x1D95920
	0x01D9590C ADRP X0, 0x235E000
	0x01D95910 LDR X0, [X0 + 0x5A0]
	0x01D95914 BL 0x1C16CF4
	0x01D95918 MOVZ W8, 0x1
	0x01D9591C STRB W8, [X21 + 0x783]
	0x01D95920 LDR X8, [X22]
	0x01D95924 LDR X8, [X8 + 0xB8]
	0x01D95928 LDR V1, [X8]
	0x01D9592C LDR V0, [X8 + 0x4]
	0x01D95930 STP S0, S1, [X31 + 0x2C]
	0x01D95934 LDR V0, [X8 + 0x8]
	0x01D95938 STR S0, [X31 + 0x28]
	0x01D9593C LDP S1, S0, [X31 + 0x44]
	0x01D95940 LDRB W8, [X23 + 0x785]
	0x01D95944 FADD S12, S9, S0
	0x01D95948 LDR V0, [X31 + 0x4C]
	0x01D9594C FADD S15, S0, S1
	0x01D95950 LDR V0, [X31 + 0x64]
	0x01D95954 LDR V1, [X31 + 0x40]
	0x01D95958 FADD S13, S0, S1
	0x01D9595C CBNZ W8, 0x1D95974
	0x01D95960 ADRP X0, 0x235E000
	0x01D95964 LDR X0, [X0 + 0x5A8]
	0x01D95968 BL 0x1C16CF4
	0x01D9596C MOVZ W8, 0x1
	0x01D95970 STRB W8, [X23 + 0x785]
	0x01D95974 LDR V0, [X31 + 0x20]
	0x01D95978 LDR X0, [X20]
	0x01D9597C FSUB S2, S12, S0
	0x01D95980 LDR V0, [X31 + 0x1C]
	0x01D95984 LDR W8, [X0 + 0xE0]
	0x01D95988 STR S2, [X31 + 0x50]
	0x01D9598C FSUB S3, S15, S0
	0x01D95990 LDR V0, [X31 + 0x18]
	0x01D95994 FSUB S9, S13, S0
	0x01D95998 CBNZ W8, 0x1D959B4
	0x01D9599C MOV V14.16B, V11.16B
	0x01D959A0 MOV V11.16B, V3.16B
	0x01D959A4 BL 0x1C16DFC
	0x01D959A8 LDR V2, [X31 + 0x50]
	0x01D959AC MOV V3.16B, V11.16B
	0x01D959B0 MOV V11.16B, V14.16B
	0x01D959B4 FMUL S0, S2, S2
	0x01D959B8 FMUL S1, S3, S3
	0x01D959BC FADD S0, S0, S1
	0x01D959C0 FMUL S1, S9, S9
	0x01D959C4 FADD S4, S1, S0
	0x01D959C8 FSQRT S0, S4
	0x01D959CC FCMP S0, S10
	0x01D959D0 STR S9, [X31 + 0x4C]
	0x01D959D4 B.LE 0x1D959E8
	0x01D959D8 FDIV S2, S2, S0
	0x01D959DC FDIV S10, S3, S0
	0x01D959E0 FDIV S9, S9, S0
	0x01D959E4 B 0x1D95A24
	0x01D959E8 LDRB W8, [X21 + 0x783]
	0x01D959EC CBNZ W8, 0x1D95A14
	0x01D959F0 ADRP X0, 0x235E000
	0x01D959F4 LDR X0, [X0 + 0x5A0]
	0x01D959F8 MOV V9.16B, V3.16B
	0x01D959FC MOV V10.16B, V4.16B
	0x01D95A00 BL 0x1C16CF4
	0x01D95A04 MOV V4.16B, V10.16B
	0x01D95A08 MOV V3.16B, V9.16B
	0x01D95A0C MOVZ W8, 0x1
	0x01D95A10 STRB W8, [X21 + 0x783]
	0x01D95A14 LDR X8, [X22]
	0x01D95A18 LDR X8, [X8 + 0xB8]
	0x01D95A1C LDP S2, S10, [X8]
	0x01D95A20 LDR V9, [X8 + 0x8]
	0x01D95A24 ADRP X21, 0x2643000
	0x01D95A28 LDRB W8, [X21 + 0xA24]
	0x01D95A2C STR S11, [X31 + 0x64]
	0x01D95A30 CBNZ W8, 0x1D95A70
	0x01D95A34 ADRP X0, 0x235E000
	0x01D95A38 LDR X0, [X0 + 0x5A8]
	0x01D95A3C MOV V11.16B, V3.16B
	0x01D95A40 MOV V14.16B, V4.16B
	0x01D95A44 STR S15, [X31 + 0x48]
	0x01D95A48 MOV V15.16B, V13.16B
	0x01D95A4C MOV V13.16B, V2.16B
	0x01D95A50 BL 0x1C16CF4
	0x01D95A54 MOV V2.16B, V13.16B
	0x01D95A58 MOV V13.16B, V15.16B
	0x01D95A5C LDR V15, [X31 + 0x48]
	0x01D95A60 MOV V4.16B, V14.16B
	0x01D95A64 MOV V3.16B, V11.16B
	0x01D95A68 MOVZ W8, 0x1
	0x01D95A6C STRB W8, [X21 + 0xA24]
	0x01D95A70 LDR V0, [X31 + 0x3C]
	0x01D95A74 LDR X0, [X20]
	0x01D95A78 FSUB S5, S12, S0
	0x01D95A7C LDR V0, [X31 + 0x24]
	0x01D95A80 LDR W8, [X0 + 0xE0]
	0x01D95A84 FMOV S12, 0.5
	0x01D95A88 FSUB S6, S15, S0
	0x01D95A8C LDR V0, [X31 + 0x38]
	0x01D95A90 FSUB S7, S13, S0
	0x01D95A94 LDP S0, S1, [X31 + 0x28]
	0x01D95A98 FMUL S14, S0, S10
	0x01D95A9C FMUL S15, S0, S2
	0x01D95AA0 LDR V0, [X31 + 0x30]
	0x01D95AA4 FMUL S11, S1, S9
	0x01D95AA8 FMUL S13, S0, S9
	0x01D95AAC FMUL S9, S0, S10
	0x01D95AB0 FMUL S10, S1, S2
	0x01D95AB4 CBNZ W8, 0x1D95AD4
	0x01D95AB8 STP S4, S3, [X31 + 0x44]
	0x01D95ABC STP S6, S5, [X31 + 0x3C]
	0x01D95AC0 STR S7, [X31 + 0x38]
	0x01D95AC4 BL 0x1C16DFC
	0x01D95AC8 LDP S7, S6, [X31 + 0x38]
	0x01D95ACC LDP S5, S4, [X31 + 0x40]
	0x01D95AD0 LDR V3, [X31 + 0x48]
	0x01D95AD4 LDR V0, [X31 + 0x34]
	0x01D95AD8 ADRP X8, 0xFFFFFFFFFED54000
	0x01D95ADC LDR V1, [X8 + 0xFE8]
	0x01D95AE0 FMUL S5, S5, S12
	0x01D95AE4 FMUL S6, S6, S12
	0x01D95AE8 FMUL S7, S7, S12
	0x01D95AEC FSUB S2, S11, S14
	0x01D95AF0 FSUB S12, S15, S13
	0x01D95AF4 LDP S13, S11, [X31 + 0x60]
	0x01D95AF8 LDP S15, S14, [X31 + 0x58]
	0x01D95AFC FMUL S0, S0, S4
	0x01D95B00 FSQRT S0, S0
	0x01D95B04 FSUB S10, S9, S10
	0x01D95B08 FCMP S0, S1
	0x01D95B0C FMOV S1, W31
	0x01D95B10 B.MI 0x1D95B84
	0x01D95B14 STP S5, S2, [X31 + 0x44]
	0x01D95B18 LDR V1, [X31 + 0x8]
	0x01D95B1C LDP S4, S2, [X31 + 0x4C]
	0x01D95B20 LDR X0, [X20]
	0x01D95B24 STP S7, S6, [X31 + 0x3C]
	0x01D95B28 FMUL S1, S1, S2
	0x01D95B2C LDR V2, [X31 + 0xC]
	0x01D95B30 LDR W8, [X0 + 0xE0]
	0x01D95B34 FMUL S2, S2, S3
	0x01D95B38 LDR V3, [X31 + 0x10]
	0x01D95B3C FADD S1, S1, S2
	0x01D95B40 FMOV S2, -1
	0x01D95B44 FMUL S3, S3, S4
	0x01D95B48 FADD S1, S3, S1
	0x01D95B4C FDIV S0, S1, S0
	0x01D95B50 FMOV S1, 1
	0x01D95B54 FMIN S1, S0, S1
	0x01D95B58 FCMP S0, S2
	0x01D95B5C FCSEL S9, S1, S2, PL
	0x01D95B60 CBNZ W8, 0x1D95B68
	0x01D95B64 BL 0x1C16DFC
	0x01D95B68 FCVT S0, S9
	0x01D95B6C BL 0x3EB1B80
	0x01D95B70 LDR V1, [X31 + 0x14]
	0x01D95B74 LDP S5, S2, [X31 + 0x44]
	0x01D95B78 LDP S7, S6, [X31 + 0x3C]
	0x00000000 INVALID
	0x01D95B80 FMUL S1, S0, S1
	0x01D95B84 LDR V4, [X31 + 0x54]
	0x01D95B88 FMUL S0, S2, S1
	0x01D95B8C FMUL S2, S12, S1
	0x01D95B90 FMUL S1, S10, S1
	0x01D95B94 FMOV S3, 0.5
	0x01D95B98 FMUL S0, S0, S4
	0x01D95B9C FMUL S2, S2, S4
	0x01D95BA0 FMUL S1, S1, S4
	0x01D95BA4 FMUL S0, S0, S3
	0x01D95BA8 FMUL S2, S2, S3
	0x01D95BAC FMUL S1, S1, S3
	0x01D95BB0 LDR V3, [X31 + 0x68]
	0x01D95BB4 FSUB S11, S11, S5
	0x01D95BB8 FSUB S13, S13, S6
	0x01D95BBC FSUB S14, S14, S7
	0x01D95BC0 FSUB S3, S3, S0
	0x01D95BC4 LDR V0, [X31 + 0x6C]
	0x01D95BC8 FSUB S15, S15, S1
	0x01D95BCC FSUB S0, S0, S2
	0x01D95BD0 STP S3, S0, [X31 + 0x68]
	0x01D95BD4 LDR X20, [X19 + 0x168]
	0x01D95BD8 CBZ X20, 0x1D95C94
	0x01D95BDC FMOV S9, 0.5
	0x01D95BE0 FDIV S0, S14, S8
	0x01D95BE4 FDIV S1, S13, S8
	0x01D95BE8 FDIV S2, S11, S8
	0x01D95BEC MOV X0, X20
	0x01D95BF0 MOV X1, X31
	0x01D95BF4 FMUL S10, S0, S9
	0x01D95BF8 FMUL S11, S1, S9
	0x01D95BFC FMUL S12, S2, S9
	0x01D95C00 BL 0x3C8E868
	0x01D95C04 FSUB S0, S12, S0
	0x01D95C08 FSUB S1, S11, S1
	0x01D95C0C FSUB S2, S10, S2
	0x01D95C10 MOVZ W1, 0x2
	0x01D95C14 MOV X0, X20
	0x01D95C18 MOV X2, X31
	0x01D95C1C BL 0x3C8F3C4
	0x01D95C20 LDR X20, [X19 + 0x168]
	0x01D95C24 CBZ X20, 0x1D95C94
	0x01D95C28 LDP S0, S1, [X31 + 0x68]
	0x01D95C2C FDIV S2, S15, S8
	0x01D95C30 MOV X0, X20
	0x01D95C34 MOV X1, X31
	0x01D95C38 FDIV S0, S0, S8
	0x01D95C3C FDIV S1, S1, S8
	0x01D95C40 FMUL S8, S0, S9
	0x01D95C44 FMUL S10, S1, S9
	0x01D95C48 FMUL S9, S2, S9
	0x01D95C4C BL 0x3C8E9A0
	0x01D95C50 FSUB S0, S8, S0
	0x01D95C54 FSUB S1, S10, S1
	0x01D95C58 FSUB S2, S9, S2
	0x01D95C5C MOVZ W1, 0x2
	0x01D95C60 MOV X0, X20
	0x01D95C64 MOV X2, X31
	0x01D95C68 BL 0x3C8F474
	0x01D95C6C STRB W31, [X19 + 0x180]
	0x01D95C70 LDP X20, X19, [X31 + 0xE0]
	0x01D95C74 LDP X22, X21, [X31 + 0xD0]
	0x01D95C78 LDP X30, X23, [X31 + 0xC0]
	0x01D95C7C LDP D9, D8, [X31 + 0xB0]
	0x01D95C80 LDP D11, D10, [X31 + 0xA0]
	0x01D95C84 LDP D13, D12, [X31 + 0x90]
	0x01D95C88 LDP D15, D14, [X31 + 0x80]
	0x01D95C8C ADD X31, X31, 0xF0
	0x01D95C90 RET
	0x01D95C94 BL 0x1C16F20
	0x01D95C98 STR X30, [X31 - 0x20]!
	0x01D95C9C STP X20, X19, [X31 + 0x10]
	0x01D95CA0 MOV X20, X1
	0x01D95CA4 MOV X19, X0
	0x01D95CA8 BL 0x1D8EEF0
	0x01D95CAC TBZ X0, 0x0, 0x1D95D08
	0x01D95CB0 LDR X0, [X19 + 0x40]
	0x01D95CB4 CBZ X0, 0x1D95D08
	0x01D95CB8 LDRB W8, [X0 + 0x60]
	0x01D95CBC TBNZ X8, 0x1, 0x1D95D08
	0x01D95CC0 MOV X1, X31
	0x01D95CC4 BL 0x1E93668
	0x01D95CC8 TBZ X0, 0x0, 0x1D95D08
	0x01D95CCC CBZ X20, 0x1D95D14
	0x01D95CD0 MOV X0, X20
	0x01D95CD4 MOV X1, X31
	0x01D95CD8 BL 0x3C32ECC
	0x01D95CDC LDR X8, [X19 + 0x168]
	0x01D95CE0 CBZ X8, 0x1D95D14
	0x01D95CE4 MOV X20, X0
	0x01D95CE8 MOV X0, X8
	0x01D95CEC MOV X1, X31
	0x01D95CF0 BL 0x3C8E868
	0x01D95CF4 MOV X0, X19
	0x01D95CF8 MOV X1, X20
	0x01D95CFC LDP X20, X19, [X31 + 0x10]
	0x01D95D00 LDR X30, [X31], #0x20
	0x01D95D04 B 0x1D95D18
	0x01D95D08 LDP X20, X19, [X31 + 0x10]
	0x01D95D0C LDR X30, [X31], #0x20
	0x01D95D10 RET
	0x01D95D14 BL 0x1C16F20
	0x01D95D18 STP D15, D14, [X31 - 0x80]!
	0x01D95D1C STP D13, D12, [X31 + 0x10]
	0x01D95D20 STP D11, D10, [X31 + 0x20]
	0x01D95D24 STP D9, D8, [X31 + 0x30]
	0x01D95D28 STR X30, [X31 + 0x40]
	0x01D95D2C STP X24, X23, [X31 + 0x50]
	0x01D95D30 STP X22, X21, [X31 + 0x60]
	0x01D95D34 STP X20, X19, [X31 + 0x70]
	0x01D95D38 ADRP X21, 0x2643000
	0x01D95D3C ADRP X22, 0x235E000
	0x01D95D40 LDRB W8, [X21 + 0xA0C]
	0x01D95D44 LDR X22, [X22 + 0x598]
	0x01D95D48 MOV V8.16B, V2.16B
	0x01D95D4C MOV V9.16B, V1.16B
	0x01D95D50 MOV V10.16B, V0.16B
	0x01D95D54 MOV X20, X1
	0x01D95D58 MOV X19, X0
	0x01D95D5C TBNZ X8, 0x0, 0x1D95DA4
	0x01D95D60 ADRP X0, 0x2361000
	0x01D95D64 LDR X0, [X0 + 0xBE8]
	0x01D95D68 BL 0x1C16CF4
	0x01D95D6C ADRP X0, 0x2361000
	0x01D95D70 LDR X0, [X0 + 0xBF0]
	0x01D95D74 BL 0x1C16CF4
	0x01D95D78 ADRP X0, 0x2360000
	0x01D95D7C LDR X0, [X0 + 0x9A0]
	0x01D95D80 BL 0x1C16CF4
	0x01D95D84 ADRP X0, 0x235E000
	0x01D95D88 LDR X0, [X0 + 0x598]
	0x01D95D8C BL 0x1C16CF4
	0x01D95D90 ADRP X0, 0x2361000
	0x01D95D94 LDR X0, [X0 + 0xE28]
	0x01D95D98 BL 0x1C16CF4
	0x01D95D9C MOVZ W8, 0x1
	0x01D95DA0 STRB W8, [X21 + 0xA0C]
	0x01D95DA4 LDR X0, [X22]
	0x01D95DA8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 416
	002 Move [X31+320], D14
	003 Move [X31+328], D13
	004 Move [X31+336], D12
	005 Move [X31+344], D11
	006 Move [X31+352], D10
	007 Move [X31+360], D9
	008 Move [X31+368], D8
	009 Move [X31+376], X29
	010 Move [X31+384], X30
	011 Move [X31+392], X21
	012 Move [X31+400], X20
	013 Move [X31+408], X19
	014 Move X21, 0x2644000
	015 Move X20, 0x235F000
	016 Move W8, [X21+2568]
	017 Move X20, [X20+1432]
	018 Move V11, V6
	019 Move V12, V5
	020 Move V13, V4
	021 Move V14, V3
	022 Move V8, V2
	023 Move V9, V1
	024 Move V10, V0
	025 Move X19, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {38}
	030 Move X0, 0x235F000
	031 Move X0, [X0+1432]
	032 Call 0x1C17CF4
	033 Move X0, 0x2361000
	034 Move X0, [X0+1992]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+2568], W8
	038 Move X0, [X20]
	039 NotImplemented "Instruction MOVI not yet implemented."
	040 Move [X31+288], V0
	041 Move [X31+296], V0
	042 Move [X31+256], V0
	043 Move [X31+264], V0
	044 Move W8, [X0+224]
	045 Move X20, [X19+176]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Equality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {102}
	057 Move X0, [X19+360]
	058 Compare X0, 0
	059 JumpIfEqual {362}
	060 Move V0, V10
	061 Move V1, V9
	062 Move V2, V8
	063 Move X1, X31
	064 Call Rigidbody.set_position, X0, X1
	065 Move X0, [X19+360]
	066 Compare X0, 0
	067 JumpIfEqual {362}
	068 Move V0, V14
	069 Move V1, V13
	070 Move V2, V12
	071 Move V3, V11
	072 Move X1, X31
	073 Call Rigidbody.set_rotation, X0, X1
	074 Move X0, X19
	075 Move X1, X31
	076 Call Component.get_transform, X0
	077 Move X8, [X19+360]
	078 Compare X8, 0
	079 JumpIfEqual {362}
	080 Move X20, X0
	081 Move X0, X8
	082 Move X1, X31
	083 Call Rigidbody.get_position, X0
	084 Compare X20, 0
	085 JumpIfEqual {362}
	086 Move X0, X20
	087 Move X1, X31
	088 Call Transform.set_position, X0, X1
	089 Move X0, X19
	090 Move X1, X31
	091 Call Component.get_transform, X0
	092 Move X8, [X19+360]
	093 Compare X8, 0
	094 JumpIfEqual {362}
	095 Move X20, X0
	096 Move X0, X8
	097 Move X1, X31
	098 Call Rigidbody.get_rotation, X0
	099 Compare X20, 0
	100 JumpIfEqual {362}
	101 Move X0, X20
	102 Move X0, X19
	103 Move X1, X31
	104 Call Component.get_transform, X0
	105 Compare X0, 0
	106 JumpIfEqual {362}
	107 Add X8, X31, 128
	108 Move X1, X31
	109 Call Transform.get_worldToLocalMatrix, X0
	110 Move V0, [X31+128]
	111 Move V1, [X31+144]
	112 Move V2, [X31+160]
	113 Move V3, [X31+176]
	114 Move [X31+192], V0
	115 Move [X31+200], V1
	116 Move [X31+224], V2
	117 Move [X31+232], V3
	118 Move X0, [X19+176]
	119 Compare X0, 0
	120 JumpIfEqual {362}
	121 Add X8, X31, 128
	122 Move X1, X31
	123 Call Transform.get_localToWorldMatrix, X0
	124 Move V0, [X31+128]
	125 Move V1, [X31+144]
	126 Move V2, [X31+160]
	127 Move V3, [X31+176]
	128 Add X8, X31, 128
	129 Add X0, X31, 64
	130 Move [X31], V0
	131 Move [X31+8], V1
	132 Move V0, [X31+192]
	133 Move V1, [X31+208]
	134 Move [X31+32], V2
	135 Move [X31+40], V3
	136 Move V2, [X31+224]
	137 Move V3, [X31+240]
	138 Add X1, X31, 0
	139 Move X2, X31
	140 Move [X31+64], V0
	141 Move [X31+72], V1
	142 Move [X31+96], V2
	143 Move [X31+104], V3
	144 Call Matrix4x4.op_Multiply, X0, X1
	145 Move V0, [X31+128]
	146 Move V1, [X31+144]
	147 Move V2, [X31+160]
	148 Move V3, [X31+176]
	149 Add X0, X31, 256
	150 Move X1, X31
	151 Move [X31+256], V0
	152 Move [X31+264], V1
	153 Move [X31+288], V2
	154 Move [X31+296], V3
	155 Call Matrix4x4.get_rotation, X0
	156 Move X0, X31
	157 Call Quaternion.Inverse, X0
	158 Multiply S4, S11, S0
	159 Multiply S5, S14, S3
	160 Multiply S16, S11, S1
	161 Multiply S17, S13, S3
	162 Multiply S21, S14, S0
	163 Multiply S22, S11, S2
	164 Multiply S23, S11, S3
	165 Multiply S3, S12, S3
	166 Multiply S6, S13, S2
	167 Multiply S7, S12, S1
	168 Multiply S18, S12, S0
	169 Multiply S20, S14, S1
	170 Multiply S1, S13, S1
	171 Add S4, S4, S5
	172 Add S5, S16, S17
	173 Add S3, S22, S3
	174 Subtract S16, S23, S21
	175 Multiply S19, S14, S2
	176 Multiply S0, S13, S0
	177 Multiply S2, S12, S2
	178 Add S4, S6, S4
	179 Add S5, S18, S5
	180 Add S3, S20, S3
	181 Subtract S1, S16, S1
	182 Add X0, X31, 256
	183 Move X1, X31
	184 Subtract S14, S4, S7
	185 Subtract S13, S5, S19
	186 Subtract S12, S3, S0
	187 Subtract S11, S1, S2
	188 Call Matrix4x4.GetPosition, X0
	189 NotImplemented "Instruction FNEG not yet implemented."
	190 NotImplemented "Instruction FNEG not yet implemented."
	191 NotImplemented "Instruction FNEG not yet implemented."
	192 Move V0, V14
	193 Move V1, V13
	194 Move V2, V12
	195 Move V3, V11
	196 Move X0, X31
	197 Call Quaternion.op_Multiply, X0, X1
	198 Move X0, [X19+360]
	199 Compare X0, 0
	200 JumpIfEqual {362}
	201 Add S8, S8, S2
	202 Add S9, S9, S1
	203 Add S10, S10, S0
	204 Move V0, V10
	205 Move V1, V9
	206 Move V2, V8
	207 Move X1, X31
	208 Call Rigidbody.set_position, X0, X1
	209 Move X0, [X19+360]
	210 Compare X0, 0
	211 JumpIfEqual {362}
	212 Move V0, V14
	213 Move V1, V13
	214 Move V2, V12
	215 Move V3, V11
	216 Move X1, X31
	217 Call Rigidbody.set_rotation, X0, X1
	218 Move X0, X19
	219 Move X1, X31
	220 Call Component.get_transform, X0
	221 Compare X0, 0
	222 JumpIfEqual {362}
	223 Move V0, V10
	224 Move V1, V9
	225 Move V2, V8
	226 Move X1, X31
	227 Call Transform.set_position, X0, X1
	228 Move X0, X19
	229 Move X1, X31
	230 Call Component.get_transform, X0
	231 Compare X0, 0
	232 JumpIfEqual {362}
	233 Move V0, V14
	234 Move V1, V13
	235 Move V2, V12
	236 Move V3, V11
	237 Move X1, X31
	238 Call Transform.set_rotation, X0, X1
	239 Move X0, X19
	240 Move X1, X31
	241 Call Component.get_transform, X0
	242 Compare X0, 0
	243 JumpIfEqual {362}
	244 Move X1, X31
	245 Call Transform.get_position, X0
	246 Move X0, [X19+376]
	247 Compare X0, 0
	248 JumpIfEqual {362}
	249 Move X19, 0x2361000
	250 Move X19, [X19+1992]
	251 Move X1, X31
	252 Move V8, V0
	253 Move V9, V1
	254 Move V10, V2
	255 Call Transform.get_position, X0
	256 Move X0, X31
	257 Subtract S8, S8, S0
	258 Subtract S9, S9, S1
	259 Subtract S10, S10, S2
	260 Call Time.get_deltaTime
	261 NotImplemented "Instruction FDIV not yet implemented."
	262 NotImplemented "Instruction FDIV not yet implemented."
	263 NotImplemented "Instruction FDIV not yet implemented."
	264 Multiply S0, S11, S11
	265 Multiply S1, S12, S12
	266 Multiply S2, S13, S13
	267 Add S0, S0, S1
	268 Add S14, S2, S0
	269 Move S0, 25
	270 NotImplemented "Instruction FCMP not yet implemented."
	271 Move X20, 0x2644000
	272 Move W8, [X20+1925]
	273 Compare W8, 0
	274 JumpIfNotEqual {280}
	275 Move X0, 0x235F000
	276 Move X0, [X0+1448]
	277 Call 0x1C17CF4
	278 Move W8, 1
	279 Move [X20+1925], W8
	280 Move X8, 0x235F000
	281 Move X8, [X8+1448]
	282 Move X0, [X8]
	283 Move W8, [X0+224]
	284 Compare W8, 0
	285 JumpIfNotEqual {287}
	286 Call 0x1C17DFC
	287 Move X8, -19570688
	288 Move V0, [X8+380]
	289 NotImplemented "Instruction FSQRT not yet implemented."
	290 NotImplemented "Instruction FCMP not yet implemented."
	291 NotImplemented "Instruction FDIV not yet implemented."
	292 NotImplemented "Instruction FDIV not yet implemented."
	293 NotImplemented "Instruction FDIV not yet implemented."
	294 Move X20, 0x2644000
	295 Move W8, [X20+1923]
	296 Compare W8, 0
	297 JumpIfNotEqual {303}
	298 Move X0, 0x235F000
	299 Move X0, [X0+1440]
	300 Call 0x1C17CF4
	301 Move W8, 1
	302 Move [X20+1923], W8
	303 Move X8, 0x235F000
	304 Move X8, [X8+1440]
	305 Move X8, [X8]
	306 Move X8, [X8+184]
	307 Move S0, [X8]
	308 Move S1, [X8+4]
	309 Move V2, [X8+8]
	310 Move S3, 5
	311 Move X0, X31
	312 Multiply S8, S0, S3
	313 Multiply S9, S1, S3
	314 Multiply S10, S2, S3
	315 Call Time.get_deltaTime
	316 Multiply S8, S8, S0
	317 Multiply S9, S9, S0
	318 Multiply S10, S10, S0
	319 Move X0, [X19]
	320 Move W8, [X0+224]
	321 Compare W8, 0
	322 JumpIfNotEqual {324}
	323 Call 0x1C17DFC
	324 Move X20, 0x2644000
	325 Move W8, [X20+2141]
	326 Compare W8, 0
	327 JumpIfNotEqual {333}
	328 Move X0, 0x2361000
	329 Move X0, [X0+1992]
	330 Call 0x1C17CF4
	331 Move W8, 1
	332 Move [X20+2141], W8
	333 Move X0, [X19]
	334 Move W8, [X0+224]
	335 Compare W8, 0
	336 JumpIfNotEqual {339}
	337 Call 0x1C17DFC
	338 Move X0, [X19]
	339 Move X8, [X0+184]
	340 Move X0, [X8]
	341 Compare X0, 0
	342 JumpIfEqual {362}
	343 Move V0, V8
	344 Move V1, V9
	345 Move V2, V10
	346 Move X1, X31
	347 Call PlayerController.AddGrabOffset, X0, X1
	348 Move X20, [X31+400]
	349 Move X19, [X31+408]
	350 Move X30, [X31+384]
	351 Move X21, [X31+392]
	352 Move X29, [X31+376]
	353 Move D9, [X31+360]
	354 Move D8, [X31+368]
	355 Move D11, [X31+344]
	356 Move D10, [X31+352]
	357 Move D13, [X31+328]
	358 Move D12, [X31+336]
	359 Move V14, [X31+320]
	360 Add X31, X31, 416
	361 Return 
	362 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01D95DAC CBNZ W8, 0x1D95DB4
	0x01D95DB0 BL 0x1C16DFC
	0x01D95DB4 MOV X0, X20
	0x01D95DB8 MOV X1, X31
	0x01D95DBC MOV X2, X31
	0x01D95DC0 BL 0x3C3883C
	0x01D95DC4 TBNZ X0, 0x0, 0x1D96120
	0x01D95DC8 MOV X0, X19
	0x01D95DCC BL 0x1D8EEF0
	0x01D95DD0 TBZ X0, 0x0, 0x1D96120
	0x01D95DD4 LDR X0, [X19 + 0x40]
	0x01D95DD8 CBZ X0, 0x1D96120
	0x01D95DDC LDRB W8, [X0 + 0x60]
	0x01D95DE0 TBNZ X8, 0x1, 0x1D96120
	0x01D95DE4 MOV X1, X31
	0x01D95DE8 BL 0x1E93668
	0x01D95DEC TBZ X0, 0x0, 0x1D96120
	0x01D95DF0 CBZ X20, 0x1D96144
	0x01D95DF4 ADRP X8, 0x2361000
	0x01D95DF8 LDR X8, [X8 + 0xBE8]
	0x01D95DFC MOV X0, X20
	0x01D95E00 LDR X1, [X8]
	0x01D95E04 BL 0x21E58C4
	0x01D95E08 CBZ X0, 0x1D96120
	0x01D95E0C ADRP X8, 0x2360000
	0x01D95E10 LDR X8, [X8 + 0x9A0]
	0x01D95E14 LDR X9, [X0]
	0x01D95E18 MOV X20, X0
	0x01D95E1C LDR X8, [X8]
	0x01D95E20 LDRB W11, [X9 + 0x130]
	0x01D95E24 LDRB W10, [X8 + 0x130]
	0x01D95E28 CMP W11, W10
	0x01D95E2C B.CC 0x1D95E54
	0x01D95E30 LDR X9, [X9 + 0xC8]
	0x01D95E34 ADD X9, X9, X10, 0x3, LSL
	0x01D95E38 LDUR X9, [X9 - 0x8]
	0x01D95E3C CMP X9, X8
	0x01D95E40 B.NE 0x1D95E54
	0x01D95E44 MOV X0, X20
	0x01D95E48 MOV X1, X31
	0x01D95E4C BL 0x1DAECCC
	0x01D95E50 TBNZ X0, 0x0, 0x1D96120
	0x01D95E54 MOV X0, X31
	0x01D95E58 BL 0x3C3C73C
	0x01D95E5C LDR V1, [X19 + 0x264]
	0x01D95E60 ADRP X8, 0xFFFFFFFFFED55000
	0x01D95E64 LDR V2, [X8 + 0x35C]
	0x01D95E68 FSUB S0, S0, S1
	0x01D95E6C FCMP S0, S2
	0x01D95E70 B.MI 0x1D96120
	0x01D95E74 ADRP X21, 0x2643000
	0x01D95E78 LDRB W8, [X21 + 0x784]
	0x01D95E7C CBNZ W8, 0x1D95E94
	0x01D95E80 ADRP X0, 0x235E000
	0x01D95E84 LDR X0, [X0 + 0x5A8]
	0x01D95E88 BL 0x1C16CF4
	0x01D95E8C MOVZ W8, 0x1
	0x01D95E90 STRB W8, [X21 + 0x784]
	0x01D95E94 ADRP X23, 0x235E000
	0x01D95E98 LDR X23, [X23 + 0x5A8]
	0x01D95E9C LDR X0, [X23]
	0x01D95EA0 LDR W8, [X0 + 0xE0]
	0x01D95EA4 CBNZ W8, 0x1D95EAC
	0x01D95EA8 BL 0x1C16DFC
	0x01D95EAC LDR X0, [X19 + 0x168]
	0x01D95EB0 CBZ X0, 0x1D96144
	0x01D95EB4 FMUL S0, S10, S10
	0x01D95EB8 FMUL S1, S9, S9
	0x01D95EBC FADD S0, S0, S1
	0x01D95EC0 FMUL S1, S8, S8
	0x01D95EC4 FADD S0, S1, S0
	0x01D95EC8 MOV X1, X31
	0x01D95ECC FSQRT S15, S0
	0x01D95ED0 BL 0x3C8EBE8
	0x01D95ED4 ADRP X21, 0x2643000
	0x01D95ED8 LDRB W8, [X21 + 0xA23]
	0x01D95EDC FMOV S1, -20
	0x01D95EE0 FADD S11, S15, S1
	0x01D95EE4 FMOV S1, 0.125
	0x01D95EE8 FMUL S12, S0, S1
	0x01D95EEC CBNZ W8, 0x1D95F04
	0x01D95EF0 ADRP X0, 0x235E000
	0x01D95EF4 LDR X0, [X0 + 0x5A8]
	0x01D95EF8 BL 0x1C16CF4
	0x01D95EFC MOVZ W8, 0x1
	0x01D95F00 STRB W8, [X21 + 0xA23]
	0x01D95F04 LDR X0, [X23]
	0x01D95F08 FMUL S11, S11, S12
	0x01D95F0C LDR W8, [X0 + 0xE0]
	0x01D95F10 CBNZ W8, 0x1D95F18
	0x01D95F14 BL 0x1C16DFC
	0x01D95F18 MOVZ W8, 0x7F800000
	0x01D95F1C FRINTM S0, S11
	0x01D95F20 FMOV S1, W8
	0x01D95F24 FCVTMS W9, S11
	0x01D95F28 FCMP S0, S1
	0x01D95F2C MOVZ W8, 0x80000000
	0x01D95F30 CSEL W8, W8, W9, EQ
	0x01D95F34 CMP W8, 0x1
	0x01D95F38 B.LT 0x1D96120
	0x01D95F3C LDRB W9, [X21 + 0xA23]
	0x01D95F40 LDR V11, [X19 + 0xB8]
	0x01D95F44 CMP W8, 0xF
	0x01D95F48 MOVZ W10, 0xF
	0x01D95F4C CSEL W8, W8, W10, LT
	0x01D95F50 SCVTF S14, W8
	0x01D95F54 CBNZ W9, 0x1D95F6C
	0x01D95F58 ADRP X0, 0x235E000
	0x01D95F5C LDR X0, [X0 + 0x5A8]
	0x01D95F60 BL 0x1C16CF4
	0x01D95F64 MOVZ W8, 0x1
	0x01D95F68 STRB W8, [X21 + 0xA23]
	0x01D95F6C LDR X0, [X23]
	0x01D95F70 FMUL S11, S11, S14
	0x01D95F74 LDR W8, [X0 + 0xE0]
	0x01D95F78 CBNZ W8, 0x1D95F80
	0x01D95F7C BL 0x1C16DFC
	0x01D95F80 MOVZ W8, 0x7F800000
	0x01D95F84 FRINTM S0, S11
	0x01D95F88 FMOV S1, W8
	0x01D95F8C FCVTMS W9, S11
	0x01D95F90 FCMP S0, S1
	0x01D95F94 MOVZ W8, 0x80000000
	0x01D95F98 MOV X0, X19
	0x01D95F9C MOV X1, X31
	0x01D95FA0 CSEL W21, W8, W9, EQ
	0x01D95FA4 BL 0x3C32E90
	0x01D95FA8 CBZ X0, 0x1D96144
	0x01D95FAC MOV X1, X31
	0x01D95FB0 BL 0x3C3F58C
	0x01D95FB4 ADRP X24, 0x2643000
	0x01D95FB8 LDRB W8, [X24 + 0x785]
	0x01D95FBC LDR X22, [X19 + 0xE0]
	0x01D95FC0 MOV V11.16B, V0.16B
	0x01D95FC4 MOV V12.16B, V1.16B
	0x01D95FC8 MOV V13.16B, V2.16B
	0x01D95FCC CBNZ W8, 0x1D95FE4
	0x01D95FD0 ADRP X0, 0x235E000
	0x01D95FD4 LDR X0, [X0 + 0x5A8]
	0x01D95FD8 BL 0x1C16CF4
	0x01D95FDC MOVZ W8, 0x1
	0x01D95FE0 STRB W8, [X24 + 0x785]
	0x01D95FE4 LDR X0, [X23]
	0x01D95FE8 LDR W8, [X0 + 0xE0]
	0x01D95FEC CBNZ W8, 0x1D95FF4
	0x01D95FF0 BL 0x1C16DFC
	0x01D95FF4 ADRP X8, 0xFFFFFFFFFED55000
	0x01D95FF8 LDR V0, [X8 + 0x17C]
	0x01D95FFC FCMP S15, S0
	0x01D96000 B.LE 0x1D96014
	0x01D96004 FDIV S2, S10, S15
	0x01D96008 FDIV S0, S9, S15
	0x01D9600C FDIV S1, S8, S15
	0x01D96010 B 0x1D9604C
	0x01D96014 ADRP X23, 0x2642000
	0x01D96018 LDRB W8, [X23 + 0x783]
	0x01D9601C CBNZ W8, 0x1D96034
	0x01D96020 ADRP X0, 0x235D000
	0x01D96024 LDR X0, [X0 + 0x5A0]
	0x01D96028 BL 0x1C16CF4
	0x01D9602C MOVZ W8, 0x1
	0x01D96030 STRB W8, [X23 + 0x783]
	0x01D96034 ADRP X8, 0x235D000
	0x01D96038 LDR X8, [X8 + 0x5A0]
	0x01D9603C LDR X8, [X8]
	0x01D96040 LDR X8, [X8 + 0xB8]
	0x01D96044 LDP S2, S0, [X8]
	0x01D96048 LDR V1, [X8 + 0x8]
	0x01D9604C LDR X8, [X19 + 0x40]
	0x01D96050 CBZ X8, 0x1D96064
	0x01D96054 LDR X8, [X8 + 0x20]
	0x01D96058 CBZ X8, 0x1D96064
	0x01D9605C LDR W23, [X8]
	0x01D96060 B 0x1D96068
	0x01D96064 MOV X23, X31
	0x01D96068 ADRP X9, 0x2360000
	0x01D9606C LDR W10, [X19 + 0x68]
	0x01D96070 LDR X8, [X20]
	0x01D96074 LDR X9, [X9 + 0xBF0]
	0x01D96078 ADRP X11, 0x2360000
	0x01D9607C FMUL S8, S2, S14
	0x01D96080 FMUL S10, S0, S14
	0x01D96084 LDR X1, [X9]
	0x01D96088 LDR X11, [X11 + 0xE28]
	0x01D9608C LDRH W9, [X8 + 0x12E]
	0x01D96090 FMUL S9, S1, S14
	0x01D96094 BFM X23, X10, 0x20, 0x1F
	0x01D96098 LDR X24, [X11]
	0x01D9609C CBZ X9, 0x1D960C0
	0x01D960A0 LDR X10, [X8 + 0xB0]
	0x01D960A4 ADD X10, X10, 0x8
	0x01D960A8 LDUR X11, [X10 - 0x8]
	0x01D960AC CMP X11, X1
	0x01D960B0 B.EQ 0x1D960D0
	0x01D960B4 SUBS X9, X9, 0x1
	0x01D960B8 ADD X10, X10, 0x10
	0x01D960BC B.NE 0x1D960A8
	0x01D960C0 MOV X0, X20
	0x01D960C4 MOV W2, W31
	0x01D960C8 BL 0x1C5C788
	0x01D960CC B 0x1D960DC
	0x01D960D0 LDRSW X9, [X10]
	0x01D960D4 ADD X8, X8, X9, 0x4, LSL
	0x01D960D8 ADD X0, X8, 0x138
	0x01D960DC LDP X8, X6, [X0]
	0x01D960E0 MOV X0, X20
	0x01D960E4 MOV W1, W21
	0x01D960E8 MOV V0.16B, V11.16B
	0x01D960EC MOV V1.16B, V12.16B
	0x01D960F0 MOV V2.16B, V13.16B
	0x01D960F4 MOV X2, X22
	0x01D960F8 MOV X3, X31
	0x01D960FC MOV V3.16B, V8.16B
	0x01D96100 MOV V4.16B, V10.16B
	0x01D96104 MOV V5.16B, V9.16B
	0x01D96108 MOV X4, X24
	0x01D9610C MOV X5, X23
	0x01D96110 BLR X8
	0x01D96114 MOV X0, X31
	0x01D96118 BL 0x3C3C73C
	0x01D9611C STR S0, [X19 + 0x264]
	0x01D96120 LDP X20, X19, [X31 + 0x70]
	0x01D96124 LDP X22, X21, [X31 + 0x60]
	0x01D96128 LDP X24, X23, [X31 + 0x50]
	0x01D9612C LDR X30, [X31 + 0x40]
	0x01D96130 LDP D9, D8, [X31 + 0x30]
	0x01D96134 LDP D11, D10, [X31 + 0x20]
	0x01D96138 LDP D13, D12, [X31 + 0x10]
	0x01D9613C LDP D15, D14, [X31], #0x80
	0x01D96140 RET
	0x01D96144 BL 0x1C16F20
	0x01D96148 STR X30, [X31 - 0x30]!
	0x01D9614C STP X22, X21, [X31 + 0x10]
	0x01D96150 STP X20, X19, [X31 + 0x20]
	0x01D96154 ADRP X21, 0x2642000
	0x01D96158 LDRB W8, [X21 + 0xA0D]
	0x01D9615C MOV X20, X1
	0x01D96160 MOV X19, X0
	0x01D96164 TBNZ X8, 0x0, 0x1D96188
	0x01D96168 ADRP X0, 0x235D000
	0x01D9616C LDR X0, [X0 + 0x5D8]
	0x01D96170 BL 0x1C16CF4
	0x01D96174 ADRP X0, 0x235D000
	0x01D96178 LDR X0, [X0 + 0x598]
	0x01D9617C BL 0x1C16CF4
	0x01D96180 MOVZ W8, 0x1
	0x01D96184 STRB W8, [X21 + 0xA0D]
	0x01D96188 CBZ X20, 0x1D96318
	0x01D9618C ADRP X22, 0x235D000
	0x01D96190 LDR X22, [X22 + 0x598]
	0x01D96194 MOV X0, X20
	0x01D96198 MOV X1, X31
	0x01D9619C BL 0x3C8A29C
	0x01D961A0 MOV X21, X0
	0x01D961A4 MOV X0, X20
	0x01D961A8 MOV X1, X31
	0x01D961AC BL 0x3C89FC0
	0x01D961B0 MOV X0, X19
	0x01D961B4 MOV X1, X21
	0x01D961B8 BL 0x1D95D18
	0x01D961BC LDR X0, [X22]
	0x01D961C0 LDR X21, [X19 + 0x150]
	0x01D961C4 LDR W8, [X0 + 0xE0]
	0x01D961C8 CBNZ W8, 0x1D961D0
	0x01D961CC BL 0x1C16DFC
	0x01D961D0 MOV X0, X21
	0x01D961D4 MOV X1, X31
	0x01D961D8 MOV X2, X31
	0x01D961DC BL 0x3C3883C
	0x01D961E0 TBNZ X0, 0x0, 0x1D96308
	0x01D961E4 LDR X8, [X19 + 0x150]
	0x01D961E8 CBZ X8, 0x1D96318
	0x01D961EC LDR X0, [X8 + 0x40]
	0x01D961F0 CBZ X0, 0x1D96308
	0x01D961F4 LDRB W8, [X0 + 0x60]
	0x01D961F8 TBNZ X8, 0x1, 0x1D96308
	0x01D961FC MOV X1, X31
	0x01D96200 BL 0x1E93668
	0x01D96204 TBZ X0, 0x0, 0x1D96308
	0x01D96208 LDRB W8, [X19 + 0x89]
	0x01D9620C CBZ W8, 0x1D96298
	0x01D96210 LDR X0, [X22]
	0x01D96214 LDR X21, [X19 + 0x150]
	0x01D96218 LDR W8, [X0 + 0xE0]
	0x01D9621C CBNZ W8, 0x1D96224
	0x01D96220 BL 0x1C16DFC
	0x01D96224 MOV X0, X21
	0x01D96228 MOV X1, X31
	0x01D9622C MOV X2, X31
	0x01D96230 BL 0x3C354F8
	0x01D96234 TBZ X0, 0x0, 0x1D96298
	0x01D96238 LDR X8, [X19 + 0x150]
	0x01D9623C CBZ X8, 0x1D96318
	0x01D96240 LDRB W8, [X8 + 0x84]
	0x01D96244 CBZ W8, 0x1D96298
	0x01D96248 MOV X0, X31
	0x01D9624C BL 0x3C3C73C
	0x01D96250 LDR V1, [X19 + 0x190]
	0x01D96254 FSUB S0, S0, S1
	0x01D96258 FMOV S1, 0.25
	0x01D9625C FCMP S0, S1
	0x01D96260 B.LE 0x1D96298
	0x01D96264 LDR X21, [X19 + 0x150]
	0x01D96268 MOV X0, X20
	0x01D9626C MOV X1, X31
	0x01D96270 BL 0x3C89FC0
	0x01D96274 CBZ X21, 0x1D96318
	0x01D96278 LDR X8, [X21 + 0x98]
	0x01D9627C CBZ X8, 0x1D96298
	0x01D96280 LDR W1, [X21 + 0x80]
	0x01D96284 LDR X9, [X8 + 0x18]
	0x01D96288 LDR X0, [X8 + 0x40]
	0x01D9628C LDR X3, [X8 + 0x28]
	0x01D96290 MOV X2, X20
	0x01D96294 BLR X9
	0x01D96298 ADRP X21, 0x235D000
	0x01D9629C LDR X21, [X21 + 0x5D8]
	0x01D962A0 LDR X0, [X21]
	0x01D962A4 LDR W8, [X0 + 0xE0]
	0x01D962A8 CBNZ W8, 0x1D962B4
	0x01D962AC BL 0x1C16DFC
	0x01D962B0 LDR X0, [X21]
	0x01D962B4 LDR X8, [X0 + 0xB8]
	0x01D962B8 MOV X0, X20
	0x01D962BC MOV X1, X31
	0x01D962C0 LDR W21, [X8 + 0x40]
	0x01D962C4 BL 0x3C8A29C
	0x01D962C8 CBZ X0, 0x1D96318
	0x01D962CC MOV X1, X31
	0x01D962D0 BL 0x3C35734
	0x01D962D4 MOV W1, W0
	0x01D962D8 MOV X0, X21

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X28
	012 Move [X31+104], X27
	013 Move [X31+112], X26
	014 Move [X31+120], X25
	015 Move [X31+128], X24
	016 Move [X31+136], X23
	017 Move [X31+144], X22
	018 Move [X31+152], X21
	019 Move [X31+160], X20
	020 Move [X31+168], X19
	021 Move X20, 0x2644000
	022 Move X21, 0x235F000
	023 Move W8, [X20+2569]
	024 Move X21, [X21+1432]
	025 Move X19, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {38}
	030 Move X0, 0x235F000
	031 Move X0, [X0+1432]
	032 Call 0x1C17CF4
	033 Move X0, 0x2361000
	034 Move X0, [X0+1992]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+2569], W8
	038 Move X0, [X21]
	039 Move X20, [X19+336]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X31
	046 Move X2, X31
	047 Call Object.op_Equality, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {382}
	052 Move X8, [X19+336]
	053 Compare X8, 0
	054 JumpIfEqual {403}
	055 Move X0, [X8+64]
	056 Compare X0, 0
	057 JumpIfEqual {382}
	058 Move W8, [X0+96]
	059 Move TEMP, X8
	060 And TEMP, TEMP, 2
	061 Compare TEMP, 2
	062 JumpIfEqual {382}
	063 Move X1, X31
	064 Call NetworkObject.get_HasStateAuthority, X0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {382}
	069 Move X0, [X21]
	070 Move X20, [X19+376]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X20
	076 Move X1, X31
	077 Move X2, X31
	078 Call Object.op_Inequality, X0, X1
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {382}
	083 Move X0, [X21]
	084 Move X20, [X19+424]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move X0, X20
	090 Move X1, X31
	091 Move X2, X31
	092 Call Object.op_Equality, X0, X1
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {124}
	097 Move X0, X19
	098 Move X1, X31
	099 Call Component.get_transform, X0
	100 Compare X0, 0
	101 JumpIfEqual {403}
	102 Move X1, X31
	103 Call Transform.get_position, X0
	104 Move X0, [X19+376]
	105 Compare X0, 0
	106 JumpIfEqual {403}
	107 Move X1, X31
	108 Move V8, V0
	109 Move V9, V1
	110 Move V10, V2
	111 Call Transform.get_position, X0
	112 Subtract S0, S8, S0
	113 Subtract S1, S9, S1
	114 Subtract S2, S10, S2
	115 Multiply S0, S0, S0
	116 Multiply S1, S1, S1
	117 Multiply S2, S2, S2
	118 Add S0, S0, S1
	119 Add S0, S2, S0
	120 Move S1, 1
	121 NotImplemented "Instruction FCMP not yet implemented."
	122 Move X0, X19
	123 Call GrabbableItem.SnapToFollow, X0
	124 Move W8, [X19+137]
	125 Compare W8, 0
	126 JumpIfEqual {355}
	127 Move X8, [X19+336]
	128 Compare X8, 0
	129 JumpIfEqual {403}
	130 Move W8, [X8+132]
	131 Compare W8, 0
	132 JumpIfEqual {355}
	133 Move X0, [X21]
	134 Move X20, [X19+424]
	135 Move W8, [X0+224]
	136 Compare W8, 0
	137 JumpIfNotEqual {139}
	138 Call 0x1C17DFC
	139 Move X0, X20
	140 Move X1, X31
	141 Move X2, X31
	142 Call Object.op_Inequality, X0, X1
	143 Move TEMP, X0
	144 And TEMP, TEMP, 1
	145 Compare TEMP, 1
	146 JumpIfNotEqual {173}
	147 Move X0, [X19+424]
	148 Compare X0, 0
	149 JumpIfEqual {403}
	150 Move X1, X31
	151 Call Transform.get_position, X0
	152 Move X0, [X19+424]
	153 Compare X0, 0
	154 JumpIfEqual {403}
	155 Move X1, X31
	156 Move V8, V0
	157 Move V9, V1
	158 Move V10, V2
	159 Call Transform.get_rotation, X0
	160 Move V4, V0
	161 Move V5, V1
	162 Move V6, V2
	163 Move V7, V3
	164 Move X0, X19
	165 Move V0, V8
	166 Move V1, V9
	167 Move V2, V10
	168 Move V3, V4
	169 Move V4, V5
	170 Move V5, V6
	171 Move V6, V7
	172 Call GrabbableItem.ApplyGrabMovement, X0, X1, X2
	173 Move W8, [X19+384]
	174 Compare W8, 0
	175 JumpIfEqual {355}
	176 Move W8, [X19+560]
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move X8, -19570688
	179 Move V0, [X8+380]
	180 Move X20, 0x235F000
	181 Move X20, [X20+1448]
	182 Move X21, 0x235F000
	183 Move [X31+8], S0
	184 Move X22, 0x2361000
	185 Move X21, [X21+1440]
	186 Move X22, [X22+1992]
	187 Move X23, X31
	188 Move X24, X31
	189 Move X25, 0x2644000
	190 Move W26, 1
	191 Move X27, 0x2643000
	192 Move X28, 0x2643000
	193 Move X0, X19
	194 Move X1, X31
	195 Call Component.get_transform, X0
	196 Compare X0, 0
	197 JumpIfEqual {403}
	198 Move X1, X31
	199 Call Transform.get_position, X0
	200 Move X0, X19
	201 Move X1, X31
	202 Move V8, V0
	203 Move V9, V1
	204 Move V10, V2
	205 Call Component.get_transform, X0
	206 Compare X0, 0
	207 JumpIfEqual {403}
	208 Move X1, X31
	209 Call Transform.get_rotation, X0
	210 Move X8, [X19+552]
	211 Compare X8, 0
	212 JumpIfEqual {403}
	213 Move W9, [X8+24]
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Add X8, X8, X23
	216 Move S4, [X8+32]
	217 Move S5, [X8+36]
	218 Move V6, [X8+40]
	219 Move X0, X31
	220 Move [X31+92], S10
	221 Move V10, V9
	222 Move V9, V8
	223 Call Quaternion.op_Multiply, X0, X1
	224 Move X0, [X19+376]
	225 Compare X0, 0
	226 JumpIfEqual {403}
	227 Move X1, X31
	228 Move V11, V0
	229 Move V12, V1
	230 Move V13, V2
	231 Call Transform.get_position, X0
	232 Move X0, X19
	233 Move X1, X31
	234 Move V14, V0
	235 Move V15, V1
	236 Move V8, V2
	237 Call Component.get_transform, X0
	238 Compare X0, 0
	239 JumpIfEqual {403}
	240 Move X1, X31
	241 Call Transform.get_position, X0
	242 Move X8, [X19+552]
	243 Compare X8, 0
	244 JumpIfEqual {403}
	245 Move W9, [X8+24]
	246 NotImplemented "Instruction CMP not yet implemented."
	247 Move V5, [X31+92]
	248 Add S3, S9, S11
	249 Add S4, S10, S12
	250 Subtract S0, S14, S0
	251 Subtract S1, S15, S1
	252 Add X8, X8, X23
	253 Add S11, S3, S0
	254 Add S12, S4, S1
	255 Move S0, [X8+44]
	256 Move S1, [X8+48]
	257 Move V3, [X8+52]
	258 Add S5, S5, S13
	259 Subtract S2, S8, S2
	260 Add S13, S5, S2
	261 Move X0, X31
	262 Move [X31+88], S1
	263 Move [X31+96], S0
	264 Subtract S8, S11, S0
	265 Subtract S9, S12, S1
	266 Move [X31+12], S3
	267 Subtract S10, S13, S3
	268 Call Time.get_deltaTime
	269 NotImplemented "Instruction FDIV not yet implemented."
	270 NotImplemented "Instruction FDIV not yet implemented."
	271 NotImplemented "Instruction FDIV not yet implemented."
	272 Multiply S0, S14, S14
	273 Multiply S1, S15, S15
	274 Add S0, S0, S1
	275 Multiply S1, S8, S8
	276 Add S9, S1, S0
	277 Move S0, 25
	278 NotImplemented "Instruction FCMP not yet implemented."
	279 Move W8, [X25+1925]
	280 Compare W8, 0
	281 JumpIfNotEqual {285}
	282 Move X0, X20
	283 Call 0x1C17CF4
	284 Move [X25+1925], W26
	285 Move X0, [X20]
	286 Move W8, [X0+224]
	287 Compare W8, 0
	288 JumpIfNotEqual {290}
	289 Call 0x1C17DFC
	290 Move V0, [X31+8]
	291 NotImplemented "Instruction FSQRT not yet implemented."
	292 NotImplemented "Instruction FCMP not yet implemented."
	293 NotImplemented "Instruction FDIV not yet implemented."
	294 NotImplemented "Instruction FDIV not yet implemented."
	295 NotImplemented "Instruction FDIV not yet implemented."
	296 Move W8, [X27+1923]
	297 Compare W8, 0
	298 JumpIfNotEqual {302}
	299 Move X0, X21
	300 Call 0x1C17CF4
	301 Move [X27+1923], W26
	302 Move X8, [X21]
	303 Move X8, [X8+184]
	304 Move S0, [X8]
	305 Move S1, [X8+4]
	306 Move V2, [X8+8]
	307 Move S3, 5
	308 Move X0, X31
	309 Multiply S8, S0, S3
	310 Multiply S9, S1, S3
	311 Multiply S10, S2, S3
	312 Call Time.get_deltaTime
	313 Move V3, [X31+92]
	314 Multiply S1, S8, S0
	315 Multiply S2, S9, S0
	316 Multiply S0, S10, S0
	317 Add S11, S3, S1
	318 Move V1, [X31+88]
	319 Add S12, S1, S2
	320 Move V1, [X31+12]
	321 Add S13, S1, S0
	322 Move X0, [X22]
	323 Move W8, [X0+224]
	324 Compare W8, 0
	325 JumpIfNotEqual {327}
	326 Call 0x1C17DFC
	327 Move W8, [X28+2141]
	328 Compare W8, 0
	329 JumpIfNotEqual {333}
	330 Move X0, X22
	331 Call 0x1C17CF4
	332 Move [X28+2141], W26
	333 Move X0, [X22]
	334 Move W8, [X0+224]
	335 Compare W8, 0
	336 JumpIfNotEqual {339}
	337 Call 0x1C17DFC
	338 Move X0, [X22]
	339 Move X8, [X0+184]
	340 Move X0, [X8]
	341 Compare X0, 0
	342 JumpIfEqual {403}
	343 Move S4, [X31+88]
	344 Move S3, [X31+92]
	345 Move V5, [X31+12]
	346 Move V0, V11
	347 Move V1, V12
	348 Move V2, V13
	349 Move X1, X31
	350 Call PlayerController.AddItemContactPoint, X0, X1, X2
	351 NotImplemented "Instruction LDRSW not yet implemented."
	352 Add X24, X24, 1
	353 Add X23, X23, 24
	354 NotImplemented "Instruction CMP not yet implemented."
	355 Move X8, [X19+544]
	356 Compare X8, 0
	357 JumpIfEqual {382}
	358 Move X2, [X8+24]
	359 Move X0, [X8+64]
	360 Move X1, [X8+40]
	361 Move X20, [X31+160]
	362 Move X19, [X31+168]
	363 Move X22, [X31+144]
	364 Move X21, [X31+152]
	365 Move X24, [X31+128]
	366 Move X23, [X31+136]
	367 Move X26, [X31+112]
	368 Move X25, [X31+120]
	369 Move X28, [X31+96]
	370 Move X27, [X31+104]
	371 Move X30, [X31+80]
	372 Move D9, [X31+64]
	373 Move D8, [X31+72]
	374 Move D11, [X31+48]
	375 Move D10, [X31+56]
	376 Move D13, [X31+32]
	377 Move D12, [X31+40]
	378 Move D15, [X31+16]
	379 Move D14, [X31+24]
	380 Add X31, X31, 176
	381 CallNoReturn X2
	382 Move X20, [X31+160]
	383 Move X19, [X31+168]
	384 Move X22, [X31+144]
	385 Move X21, [X31+152]
	386 Move X24, [X31+128]
	387 Move X23, [X31+136]
	388 Move X26, [X31+112]
	389 Move X25, [X31+120]
	390 Move X28, [X31+96]
	391 Move X27, [X31+104]
	392 Move X30, [X31+80]
	393 Move D9, [X31+64]
	394 Move D8, [X31+72]
	395 Move D11, [X31+48]
	396 Move D10, [X31+56]
	397 Move D13, [X31+32]
	398 Move D12, [X31+40]
	399 Move D15, [X31+16]
	400 Move D14, [X31+24]
	401 Add X31, X31, 176
	402 Return 
	403 Call 0x1C17F20
	404 Call 0x1C17F28

Method: System.Void LateUpdate()

Disassembly:
	0x01D962DC MOV X2, X31
	0x01D962E0 BL 0x3B23FA4
	0x01D962E4 TBZ X0, 0x0, 0x1D962FC
	0x01D962E8 MOVZ W8, 0x1
	0x01D962EC MOV X0, X19
	0x01D962F0 MOV X1, X20
	0x01D962F4 STRB W8, [X19 + 0x180]
	0x01D962F8 BL 0x1D9631C
	0x01D962FC MOV X0, X31
	0x01D96300 BL 0x3C3C73C
	0x01D96304 STR S0, [X19 + 0x190]
	0x01D96308 LDP X20, X19, [X31 + 0x20]
	0x01D9630C LDP X22, X21, [X31 + 0x10]
	0x01D96310 LDR X30, [X31], #0x30
	0x01D96314 RET
	0x01D96318 BL 0x1C16F20
	0x01D9631C SUB X31, X31, 0x150
	0x01D96320 STR D14, [X31 + 0xD0]
	0x01D96324 STP D13, D12, [X31 + 0xE0]
	0x01D96328 STP D11, D10, [X31 + 0xF0]
	0x01D9632C STP D9, D8, [X31 + 0x100]
	0x01D96330 STP X29, X30, [X31 + 0x110]
	0x01D96334 STP X24, X23, [X31 + 0x120]
	0x01D96338 STP X22, X21, [X31 + 0x130]
	0x01D9633C STP X20, X19, [X31 + 0x140]
	0x01D96340 ADRP X21, 0x2642000
	0x01D96344 LDRB W8, [X21 + 0xA0F]
	0x01D96348 MOV X20, X1
	0x01D9634C MOV X19, X0
	0x01D96350 TBNZ X8, 0x0, 0x1D96368

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2643000
	006 Move X20, 0x235E000
	007 Move W8, [X21+2570]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x235E000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2570], W8
	019 Move X0, [X20]
	020 Move X20, [X19+336]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {38}
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 
	038 Move X0, X19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Call GrabbableItem.UpdateViewTransform, X0
	044 Return 

Method: System.Void FixedUpdate()

Disassembly:
	0x01D96354 ADRP X0, 0x2360000
	0x01D96358 LDR X0, [X0 + 0xE30]
	0x01D9635C BL 0x1C16CF4
	0x01D96360 MOVZ W8, 0x1
	0x01D96364 STRB W8, [X21 + 0xA0F]
	0x01D96368 MOVI V0.2D, 0x0
	0x01D9636C STP V0, V0, [X31 + 0xB0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, X31
	005 Call Time.get_deltaTime
	006 Move X0, X19
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]

Method: System.Void UpdateViewTransform()

Disassembly:
	0x01D8A904 STP X22, X21, [X31 + 0x10]
	0x01D8A908 STP X20, X19, [X31 + 0x20]
	0x01D8A90C ADRP X20, 0x264E000
	0x01D8A910 ADRP X21, 0x236C000
	0x01D8A914 LDRB W8, [X20 + 0x9C4]
	0x01D8A918 LDR X21, [X21 + 0xA78]
	0x01D8A91C MOV X19, X0
	0x01D8A920 TBNZ X8, 0x0, 0x1D8A950
	0x01D8A924 ADRP X0, 0x236A000
	0x01D8A928 LDR X0, [X0 + 0xE70]
	0x01D8A92C BL 0x1C16CF4
	0x01D8A930 ADRP X0, 0x236C000
	0x01D8A934 LDR X0, [X0 + 0xAC0]
	0x01D8A938 BL 0x1C16CF4
	0x01D8A93C ADRP X0, 0x236C000
	0x01D8A940 LDR X0, [X0 + 0xA78]
	0x01D8A944 BL 0x1C16CF4
	0x01D8A948 MOVZ W8, 0x1
	0x01D8A94C STRB W8, [X20 + 0x9C4]
	0x01D8A950 LDR X0, [X21]
	0x01D8A954 LDR W8, [X0 + 0xE0]
	0x01D8A958 CBNZ W8, 0x1D8A960
	0x01D8A95C BL 0x1C16DFC
	0x01D8A960 CBZ X19, 0x1D8A9F4
	0x01D8A964 LDR W8, [X19 + 0x30]
	0x01D8A968 LDR X22, [X19 + 0x80]
	0x01D8A96C ORR W8, W8, 0x8
	0x01D8A970 STR W8, [X19 + 0x30]
	0x01D8A974 CBZ X22, 0x1D8A9F4
	0x01D8A978 ADRP X23, 0x236A000
	0x01D8A97C LDR X23, [X23 + 0xE70]
	0x01D8A980 ADRP X21, 0x236C000
	0x01D8A984 LDR X20, [X22 + 0x1D0]
	0x01D8A988 LDR X0, [X23]
	0x01D8A98C LDR X21, [X21 + 0xAC0]
	0x01D8A990 BL 0x1C16F10
	0x01D8A994 LDR X2, [X21]
	0x01D8A998 MOV X1, X19
	0x01D8A99C MOV X3, X31
	0x01D8A9A0 MOV X21, X0
	0x01D8A9A4 BL 0x3314368
	0x01D8A9A8 MOV X0, X20
	0x01D8A9AC MOV X1, X21
	0x01D8A9B0 MOV X2, X31
	0x01D8A9B4 BL 0x33C0FDC
	0x01D8A9B8 CBZ X0, 0x1D8A9E0
	0x01D8A9BC LDR X1, [X23]
	0x01D8A9C0 LDR X8, [X0]
	0x01D8A9C4 CMP X8, X1
	0x01D8A9C8 B.NE 0x1D8A9DC
	0x01D8A9CC STR X0, [X22 + 0x1D0]
	0x01D8A9D0 LDR X8, [X0]
	0x01D8A9D4 CMP X8, X1
	0x01D8A9D8 B.EQ 0x1D8A9E4
	0x01D8A9DC BL 0x1C171E0
	0x01D8A9E0 STR X0, [X22 + 0x1D0]
	0x01D8A9E4 LDP X20, X19, [X31 + 0x20]
	0x01D8A9E8 LDP X22, X21, [X31 + 0x10]
	0x01D8A9EC LDP X30, X23, [X31], #0x30
	0x01D8A9F0 RET
	0x01D8A9F4 BL 0x1C16F20
	0x01D8A9F8 STP X30, X19, [X31 - 0x10]!
	0x01D8A9FC MOV X1, X31
	0x01D8AA00 MOV X19, X0
	0x01D8AA04 BL 0x1E73F88
	0x01D8AA08 MOV X0, X19
	0x01D8AA0C LDP X30, X19, [X31], #0x10
	0x01D8AA10 B 0x1D8AA14
	0x01D8AA14 STR X30, [X31 - 0x20]!
	0x01D8AA18 STP X20, X19, [X31 + 0x10]
	0x01D8AA1C MOV X19, X0
	0x01D8AA20 LDR X0, [X0 + 0x90]
	0x01D8AA24 CBZ X0, 0x1D8AABC
	0x01D8AA28 MOV X1, X31
	0x01D8AA2C BL 0x3BFCC80
	0x01D8AA30 AND W20, W0, 0x1
	0x01D8AA34 MOV X0, X19
	0x01D8AA38 BL 0x1D8A770
	0x01D8AA3C AND W8, W0, 0x1
	0x01D8AA40 CMP W20, W8
	0x01D8AA44 B.EQ 0x1D8AA9C
	0x01D8AA48 LDR X20, [X19 + 0x88]
	0x01D8AA4C MOV X0, X19
	0x01D8AA50 MOV X1, X31
	0x01D8AA54 BL 0x3C32E90
	0x01D8AA58 CBZ X0, 0x1D8AABC
	0x01D8AA5C MOV X1, X31
	0x01D8AA60 BL 0x3C3F58C
	0x01D8AA64 FMOV S3, 1
	0x01D8AA68 MOV X0, X20
	0x01D8AA6C MOV X1, X31
	0x01D8AA70 BL 0x1DD1B94
	0x01D8AA74 MOV X0, X19
	0x01D8AA78 BL 0x1D8A770
	0x01D8AA7C LDR X8, [X19 + 0x90]
	0x01D8AA80 CBZ X8, 0x1D8AABC
	0x01D8AA84 TBZ X0, 0x0, 0x1D8AAA8
	0x01D8AA88 LDP X20, X19, [X31 + 0x10]
	0x01D8AA8C MOV X0, X8
	0x01D8AA90 MOV X1, X31
	0x01D8AA94 LDR X30, [X31], #0x20
	0x01D8AA98 B 0x3BFCAC0
	0x01D8AA9C LDP X20, X19, [X31 + 0x10]
	0x01D8AAA0 LDR X30, [X31], #0x20
	0x01D8AAA4 RET
	0x01D8AAA8 LDP X20, X19, [X31 + 0x10]
	0x01D8AAAC MOV X0, X8
	0x01D8AAB0 MOV X1, X31
	0x01D8AAB4 LDR X30, [X31], #0x20
	0x01D8AAB8 B 0x3BFCC44
	0x01D8AABC BL 0x1C16F20
	0x01D8AAC0 STR X30, [X31 - 0x20]!
	0x01D8AAC4 STP X20, X19, [X31 + 0x10]
	0x01D8AAC8 ADRP X20, 0x264E000
	0x01D8AACC LDRB W8, [X20 + 0x9C5]
	0x01D8AAD0 MOV X19, X0
	0x01D8AAD4 TBNZ X8, 0x0, 0x1D8AAF8
	0x01D8AAD8 ADRP X0, 0x236C000
	0x01D8AADC LDR X0, [X0 + 0xA78]
	0x01D8AAE0 BL 0x1C16CF4
	0x01D8AAE4 ADRP X0, 0x236C000
	0x01D8AAE8 LDR X0, [X0 + 0xAC8]
	0x01D8AAEC BL 0x1C16CF4
	0x01D8AAF0 MOVZ W8, 0x1
	0x01D8AAF4 STRB W8, [X20 + 0x9C5]
	0x01D8AAF8 LDRB W8, [X19 + 0x58]
	0x01D8AAFC CBZ W8, 0x1D8AB24
	0x01D8AB00 STRB W31, [X19 + 0x58]
	0x01D8AB04 MOV X0, X19
	0x01D8AB08 BL 0x1D8A770
	0x01D8AB0C ORN W8, W31, W0, 0x0
	0x01D8AB10 MOV X0, X19
	0x01D8AB14 LDP X20, X19, [X31 + 0x10]
	0x01D8AB18 AND W1, W8, 0x1
	0x01D8AB1C LDR X30, [X31], #0x20
	0x01D8AB20 B 0x1D8A7D8
	0x01D8AB24 ADRP X20, 0x236C000
	0x01D8AB28 LDR X20, [X20 + 0xA78]
	0x01D8AB2C LDR X0, [X20]
	0x01D8AB30 LDR W8, [X0 + 0xE0]
	0x01D8AB34 CBNZ W8, 0x1D8AB3C
	0x01D8AB38 BL 0x1C16DFC
	0x01D8AB3C MOV X0, X19
	0x01D8AB40 MOV X1, X31
	0x01D8AB44 BL 0x1E77B08
	0x01D8AB48 LDR X0, [X19 + 0x38]
	0x01D8AB4C CBZ X0, 0x1D8AC50
	0x01D8AB50 MOV X1, X31
	0x01D8AB54 BL 0x1E9E538
	0x01D8AB58 CMP W0, 0x4
	0x01D8AB5C B.NE 0x1D8AB6C
	0x01D8AB60 LDP X20, X19, [X31 + 0x10]
	0x01D8AB64 LDR X30, [X31], #0x20
	0x01D8AB68 RET
	0x01D8AB6C LDR X0, [X19 + 0x40]
	0x01D8AB70 CBZ X0, 0x1D8AC50
	0x01D8AB74 MOV X1, X31
	0x01D8AB78 BL 0x1E94078
	0x01D8AB7C ANDS W31, W0, 0x7
	0x01D8AB80 B.EQ 0x1D8ABD8
	0x01D8AB84 TBNZ X0, 0x0, 0x1D8AB04
	0x01D8AB88 LDR X8, [X19 + 0x38]
	0x01D8AB8C CBZ X8, 0x1D8AC50
	0x01D8AB90 LDR X0, [X8 + 0x50]
	0x01D8AB94 CBZ X0, 0x1D8AC50
	0x01D8AB98 MOV X1, X31
	0x01D8AB9C BL 0x1EC4D00
	0x01D8ABA0 TBZ X0, 0x0, 0x1D8AB60
	0x01D8ABA4 LDR X8, [X19 + 0x38]
	0x01D8ABA8 CBZ X8, 0x1D8AC50
	0x01D8ABAC LDR X0, [X8 + 0x50]
	0x01D8ABB0 MOVZ W1, 0x8
	0x01D8ABB4 MOV X2, X31
	0x01D8ABB8 BL 0x1ED9318
	0x01D8ABBC LDR X8, [X19 + 0x40]
	0x01D8ABC0 CBZ X8, 0x1D8AC50
	0x01D8ABC4 LDR X8, [X8 + 0x20]
	0x01D8ABC8 MOV X20, X0
	0x01D8ABCC CBZ X8, 0x1D8AC10
	0x01D8ABD0 LDR W0, [X8]
	0x01D8ABD4 B 0x1D8AC14
	0x01D8ABD8 LDR X0, [X20]
	0x01D8ABDC LDR X19, [X19 + 0x40]
	0x01D8ABE0 LDR W8, [X0 + 0xE0]
	0x01D8ABE4 CBNZ W8, 0x1D8ABEC
	0x01D8ABE8 BL 0x1C16DFC
	0x01D8ABEC ADRP X8, 0x236C000
	0x01D8ABF0 LDR X8, [X8 + 0xAC8]
	0x01D8ABF4 MOV X1, X19
	0x01D8ABF8 LDP X20, X19, [X31 + 0x10]
	0x01D8ABFC MOVZ W2, 0x7
	0x01D8AC00 LDR X0, [X8]
	0x01D8AC04 MOV X3, X31
	0x01D8AC08 LDR X30, [X31], #0x20
	0x01D8AC0C B 0x1E77B00
	0x01D8AC10 MOV X0, X31
	0x01D8AC14 LDR W1, [X19 + 0x68]
	0x01D8AC18 MOVZ W2, 0x1
	0x01D8AC1C MOV X3, X31
	0x01D8AC20 BL 0x1E9C23C
	0x01D8AC24 STUR X0, [X20 + 0x1C]
	0x01D8AC28 CBZ X20, 0x1D8AC50
	0x01D8AC2C MOVZ W8, 0x40
	0x01D8AC30 STR W8, [X20 + 0xC]
	0x01D8AC34 LDR X0, [X19 + 0x38]
	0x01D8AC38 CBZ X0, 0x1D8AC50
	0x01D8AC3C MOV X1, X20
	0x01D8AC40 LDP X20, X19, [X31 + 0x10]
	0x01D8AC44 MOV X2, X31
	0x01D8AC48 LDR X30, [X31], #0x20

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x264F000
	015 Move X21, 0x236A000
	016 Move W8, [X20+2571]
	017 Move X21, [X21+1432]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x236A000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+2571], W8
	028 Move X0, [X21]
	029 Move X20, [X19+376]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Inequality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {254}
	042 Move X0, [X21]
	043 Move X20, [X19+424]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Move X1, X31
	050 Move X2, X31
	051 Call Object.op_Inequality, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {98}
	056 Move X21, 0x264F000
	057 Move W8, [X21+1923]
	058 Move X20, [X19+200]
	059 Compare W8, 0
	060 JumpIfNotEqual {66}
	061 Move X0, 0x236A000
	062 Move X0, [X0+1440]
	063 Call 0x1C17CF4
	064 Move W8, 1
	065 Move [X21+1923], W8
	066 Move X8, 0x236A000
	067 Move X8, [X8+1440]
	068 Move X21, 0x264F000
	069 Move W9, [X21+1939]
	070 Move X8, [X8]
	071 Move X8, [X8+184]
	072 Move S10, [X8]
	073 Move S9, [X8+4]
	074 Move V8, [X8+8]
	075 Compare W9, 0
	076 JumpIfNotEqual {82}
	077 Move X0, 0x236B000
	078 Move X0, [X0+1448]
	079 Call 0x1C17CF4
	080 Move W8, 1
	081 Move [X21+1939], W8
	082 Compare X20, 0
	083 JumpIfEqual {268}
	084 Move X8, 0x236B000
	085 Move X8, [X8+1448]
	086 Move X0, X20
	087 Move V0, V10
	088 Move V1, V9
	089 Move X8, [X8]
	090 Move V2, V8
	091 Move X1, X31
	092 Move X8, [X8+184]
	093 Move S5, [X8+8]
	094 Move S6, [X8+12]
	095 Move S3, [X8]
	096 Move S4, [X8+4]
	097 Call Transform.SetLocalPositionAndRotation, X0, X1, X2
	098 Move X0, [X21]
	099 Move X20, [X19+336]
	100 Move W8, [X0+224]
	101 Compare W8, 0
	102 JumpIfNotEqual {104}
	103 Call 0x1C17DFC
	104 Move X0, X20
	105 Move X1, X31
	106 Move X2, X31
	107 Call Object.op_Inequality, X0, X1
	108 Move TEMP, X0
	109 And TEMP, TEMP, 1
	110 Compare TEMP, 1
	111 JumpIfNotEqual {141}
	112 Move X8, [X19+336]
	113 Compare X8, 0
	114 JumpIfEqual {268}
	115 Move X0, [X8+64]
	116 Compare X0, 0
	117 JumpIfEqual {141}
	118 Move W8, [X0+96]
	119 Move TEMP, X8
	120 And TEMP, TEMP, 2
	121 Compare TEMP, 2
	122 JumpIfEqual {141}
	123 Move X1, X31
	124 Call NetworkObject.get_HasStateAuthority, X0
	125 Move TEMP, X0
	126 And TEMP, TEMP, 1
	127 Compare TEMP, 1
	128 JumpIfNotEqual {141}
	129 Move W8, [X19+384]
	130 Compare W8, 0
	131 JumpIfEqual {141}
	132 Move W8, [X19+137]
	133 Compare W8, 0
	134 JumpIfEqual {141}
	135 Move X8, [X19+336]
	136 Compare X8, 0
	137 JumpIfEqual {268}
	138 Move W8, [X8+132]
	139 Compare W8, 0
	140 JumpIfNotEqual {56}
	141 Move X0, [X19+376]
	142 Compare X0, 0
	143 JumpIfEqual {268}
	144 Move X20, [X19+200]
	145 Move X1, X31
	146 Call Transform.get_position, X0
	147 Move X0, [X19+376]
	148 Compare X0, 0
	149 JumpIfEqual {268}
	150 Move X1, X31
	151 Move V13, V0
	152 Move V10, V1
	153 Move V14, V2
	154 Call Transform.get_rotation, X0
	155 Move X0, [X19+208]
	156 Compare X0, 0
	157 JumpIfEqual {268}
	158 Move X1, X31
	159 Move V8, V0
	160 Move V9, V1
	161 Move V11, V2
	162 Move V12, V3
	163 Move [X31+8], S14
	164 Move [X31+16], S10
	165 Move V10, V13
	166 Call Transform.get_localPosition, X0
	167 Move V4, V0
	168 Move V5, V1
	169 Move V6, V2
	170 Move V0, V8
	171 Move V1, V9
	172 Move V2, V11
	173 Move V3, V12
	174 Move X0, X31
	175 Call Quaternion.op_Multiply, X0, X1
	176 Move X0, [X19+376]
	177 Compare X0, 0
	178 JumpIfEqual {268}
	179 Move X1, X31
	180 Move V15, V0
	181 Move V8, V1
	182 Move V9, V2
	183 Call Transform.get_rotation, X0
	184 Move X0, [X19+208]
	185 Compare X0, 0
	186 JumpIfEqual {268}
	187 Move X1, X31
	188 Move V12, V0
	189 Move V13, V1
	190 Move V11, V2
	191 Move V14, V3
	192 Call Transform.get_localRotation, X0
	193 Compare X20, 0
	194 JumpIfEqual {268}
	195 Move V4, [X31+12]
	196 Multiply S5, S12, S0
	197 Multiply S20, S14, S2
	198 Multiply S21, S11, S3
	199 Add S16, S4, S8
	200 Move V4, [X31+8]
	201 Multiply S22, S13, S0
	202 Multiply S23, S13, S3
	203 Multiply S25, S11, S0
	204 Add S7, S4, S9
	205 Multiply S4, S14, S3
	206 Multiply S3, S12, S3
	207 Multiply S0, S14, S0
	208 Multiply S26, S14, S1
	209 Multiply S6, S13, S1
	210 Multiply S19, S12, S1
	211 Multiply S24, S13, S2
	212 Subtract S4, S4, S5
	213 Add S5, S20, S21
	214 Add S20, S26, S23
	215 Add S0, S0, S3
	216 Add S17, S10, S15
	217 Multiply S18, S11, S2
	218 Multiply S2, S12, S2
	219 Multiply S1, S11, S1
	220 Subtract S3, S4, S6
	221 Add S4, S19, S5
	222 Add S19, S25, S20
	223 Add S0, S24, S0
	224 Subtract S6, S3, S18
	225 Subtract S5, S4, S22
	226 Subtract S4, S19, S2
	227 Subtract S3, S0, S1
	228 Move X0, X20
	229 Move V0, V17
	230 Move V1, V16
	231 Move V2, V7
	232 Move X1, X31
	233 Call Transform.SetPositionAndRotation, X0, X1, X2
	234 Move X8, [X19+512]
	235 Compare X8, 0
	236 JumpIfEqual {254}
	237 Move X2, [X8+24]
	238 Move X0, [X8+64]
	239 Move X1, [X8+40]
	240 Move X20, [X31+96]
	241 Move X19, [X31+104]
	242 Move X30, [X31+80]
	243 Move X21, [X31+88]
	244 Move D9, [X31+64]
	245 Move D8, [X31+72]
	246 Move D11, [X31+48]
	247 Move D10, [X31+56]
	248 Move D13, [X31+32]
	249 Move D12, [X31+40]
	250 Move D15, [X31+16]
	251 Move D14, [X31+24]
	252 Add X31, X31, 112
	253 CallNoReturn X2
	254 Move X20, [X31+96]
	255 Move X19, [X31+104]
	256 Move X30, [X31+80]
	257 Move X21, [X31+88]
	258 Move D9, [X31+64]
	259 Move D8, [X31+72]
	260 Move D11, [X31+48]
	261 Move D10, [X31+56]
	262 Move D13, [X31+32]
	263 Move D12, [X31+40]
	264 Move D15, [X31+16]
	265 Move D14, [X31+24]
	266 Add X31, X31, 112
	267 Return 
	268 Call 0x1C17F20

Method: System.Void OnTriggerEnter(UnityEngine.Collider other)

Disassembly:
	0x01D96C98 BL 0x1D8EB5C
	0x01D96C9C STR W0, [X19 + 0x120]
	0x01D96CA0 ADD X8, X31, 0x8
	0x01D96CA4 MOV X0, X19
	0x01D96CA8 BL 0x1D8EC1C
	0x01D96CAC LDUR V0, [X31 + 0x18]
	0x01D96CB0 LDUR V1, [X31 + 0x8]
	0x01D96CB4 ADD X8, X19, 0x124
	0x01D96CB8 MOV X0, X19
	0x01D96CBC STP V1, V0, [X8]
	0x01D96CC0 BL 0x1D8ECEC
	0x01D96CC4 STR W0, [X19 + 0x144]
	0x01D96CC8 LDR X8, [X20 + 0x28]
	0x01D96CCC LDR X9, [X31 + 0x48]
	0x01D96CD0 CMP X8, X9
	0x01D96CD4 B.NE 0x1D96CE8
	0x01D96CD8 LDP X20, X19, [X31 + 0x60]
	0x01D96CDC LDR X30, [X31 + 0x50]
	0x01D96CE0 ADD X31, X31, 0x70
	0x01D96CE4 RET
	0x01D96CE8 BL 0x3EB1B20
	0x01D96CEC STP X30, X23, [X31 - 0x30]!
	0x01D96CF0 STP X22, X21, [X31 + 0x10]
	0x01D96CF4 STP X20, X19, [X31 + 0x20]
	0x01D96CF8 ADRP X20, 0x2642000
	0x01D96CFC LDRB W8, [X20 + 0xA16]
	0x01D96D00 MOV X21, X1
	0x01D96D04 MOV X19, X0
	0x01D96D08 TBNZ X8, 0x0, 0x1D96D20
	0x01D96D0C ADRP X0, 0x2360000
	0x01D96D10 LDR X0, [X0 + 0xD18]
	0x01D96D14 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X19, X0
	006 Call GrabbableItem.get_netObjectExists, X0
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {42}
	011 Move X0, [X19+64]
	012 Compare X0, 0
	013 JumpIfEqual {42}
	014 Move W8, [X0+96]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 2
	017 Compare TEMP, 2
	018 JumpIfEqual {42}
	019 Move X1, X31
	020 Call NetworkObject.get_HasStateAuthority, X0
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {42}
	025 Compare X20, 0
	026 JumpIfEqual {46}
	027 Move X0, X20
	028 Move X1, X31
	029 Call Component.get_gameObject, X0
	030 Move X8, [X19+360]
	031 Compare X8, 0
	032 JumpIfEqual {46}
	033 Move X20, X0
	034 Move X0, X8
	035 Move X1, X31
	036 Call Rigidbody.get_velocity, X0
	037 Move X0, X19
	038 Move X1, X20
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Return 
	046 Call 0x1C17F20

Method: System.Void ApplyCollisionDamage(UnityEngine.GameObject target, UnityEngine.Vector3 velocity)

Disassembly:
	0x01D96D18 MOVZ W8, 0x1
	0x01D96D1C STRB W8, [X20 + 0xA16]
	0x01D96D20 CBZ X19, 0x1D96DB0
	0x01D96D24 LDR X0, [X19 + 0x38]
	0x01D96D28 ADRP X23, 0x2360000
	0x01D96D2C LDUR X20, [X21 + 0x24]
	0x01D96D30 LDR W22, [X21 + 0x2C]
	0x01D96D34 LDR X23, [X23 + 0xD18]
	0x01D96D38 MOV X1, X21
	0x01D96D3C MOV W2, W31
	0x01D96D40 MOV X3, X31
	0x01D96D44 BL 0x1E9C514
	0x01D96D48 MOVZ W8, 0x1
	0x01D96D4C STRB W8, [X19 + 0x58]
	0x01D96D50 LDR X9, [X19]
	0x01D96D54 LDR X8, [X23]
	0x01D96D58 LDRB W11, [X9 + 0x130]
	0x01D96D5C LDRB W10, [X8 + 0x130]
	0x01D96D60 CMP W11, W10
	0x01D96D64 B.CC 0x1D96DA4
	0x01D96D68 LDR X9, [X9 + 0xC8]
	0x01D96D6C ADD X9, X9, X10, 0x3, LSL
	0x01D96D70 LDUR X9, [X9 - 0x8]
	0x01D96D74 CMP X9, X8
	0x01D96D78 B.NE 0x1D96DA4
	0x01D96D7C MOV X3, X0
	0x01D96D80 MOV X4, X1
	0x01D96D84 CMP W22, 0x0
	0x01D96D88 MOV X0, X19
	0x01D96D8C MOV X1, X20
	0x01D96D90 LDP X20, X19, [X31 + 0x20]
	0x01D96D94 LDP X22, X21, [X31 + 0x10]
	0x01D96D98 CSET W2, NE
	0x01D96D9C LDP X30, X23, [X31], #0x30
	0x01D96DA0 B 0x1D8F738
	0x01D96DA4 MOV X0, X19
	0x01D96DA8 MOV X1, X8
	0x01D96DAC BL 0x1C171E0
	0x01D96DB0 BL 0x1C16F20
	0x01D96DB4 SUB X31, X31, 0x40
	0x01D96DB8 STP X30, X21, [X31 + 0x20]
	0x01D96DBC STP X20, X19, [X31 + 0x30]
	0x01D96DC0 ADRP X21, 0x2642000
	0x01D96DC4 LDRB W8, [X21 + 0xA17]
	0x01D96DC8 MOV X20, X1
	0x01D96DCC MOV X19, X0
	0x01D96DD0 TBNZ X8, 0x0, 0x1D96DE8
	0x01D96DD4 ADRP X0, 0x2360000
	0x01D96DD8 LDR X0, [X0 + 0xD18]
	0x01D96DDC BL 0x1C16CF4
	0x01D96DE0 MOVZ W8, 0x1
	0x01D96DE4 STRB W8, [X21 + 0xA17]
	0x01D96DE8 CBZ X19, 0x1D96E90
	0x01D96DEC ADRP X8, 0x2360000
	0x01D96DF0 LDR X8, [X8 + 0xD18]
	0x01D96DF4 MOVZ W11, 0x1
	0x01D96DF8 LDUR X1, [X20 + 0x24]
	0x01D96DFC LDP S0, S1, [X20 + 0x2C]
	0x01D96E00 LDP S2, S3, [X20 + 0x34]
	0x01D96E04 LDP S4, S5, [X20 + 0x3C]
	0x01D96E08 LDP S6, S7, [X20 + 0x44]
	0x01D96E0C LDP S16, S17, [X20 + 0x4C]
	0x01D96E10 LDP S18, S19, [X20 + 0x54]
	0x01D96E14 LDR V20, [X20 + 0x5C]
	0x01D96E18 LDP W9, W10, [X20 + 0x60]
	0x01D96E1C STRB W11, [X19 + 0x58]
	0x01D96E20 LDR X11, [X19]
	0x01D96E24 LDR X8, [X8]
	0x01D96E28 LDRB W13, [X11 + 0x130]
	0x01D96E2C LDRB W12, [X8 + 0x130]
	0x01D96E30 CMP W13, W12
	0x01D96E34 B.CC 0x1D96E84
	0x01D96E38 LDR X11, [X11 + 0xC8]
	0x01D96E3C ADD X11, X11, X12, 0x3, LSL
	0x01D96E40 LDUR X11, [X11 - 0x8]
	0x01D96E44 CMP X11, X8
	0x01D96E48 B.NE 0x1D96E84
	0x01D96E4C CMP W10, 0x0
	0x01D96E50 CSET W3, NE
	0x01D96E54 CMP W9, 0x0
	0x01D96E58 CSET W2, NE
	0x01D96E5C MOV X0, X19
	0x01D96E60 STP S19, S20, [X31 + 0x14]
	0x01D96E64 STR S18, [X31 + 0x10]
	0x01D96E68 STP S16, S17, [X31 + 0x4]
	0x01D96E6C STR S7, [X31]
	0x01D96E70 BL 0x1D8FA3C
	0x01D96E74 LDP X20, X19, [X31 + 0x30]
	0x01D96E78 LDP X30, X21, [X31 + 0x20]
	0x01D96E7C ADD X31, X31, 0x40
	0x01D96E80 RET
	0x01D96E84 MOV X0, X19
	0x01D96E88 MOV X1, X8
	0x01D96E8C BL 0x1C171E0
	0x01D96E90 BL 0x1C16F20
	0x01D96E94 SUB X31, X31, 0xA0
	0x01D96E98 STR X30, [X31 + 0x70]
	0x01D96E9C STP X22, X21, [X31 + 0x80]
	0x01D96EA0 STP X20, X19, [X31 + 0x90]
	0x01D96EA4 MRS X21, 0xC000
	0x01D96EA8 LDR X8, [X21 + 0x28]
	0x01D96EAC ADRP X22, 0x2642000
	0x01D96EB0 MOV X20, X1
	0x01D96EB4 MOV X19, X0
	0x01D96EB8 STR X8, [X31 + 0x68]
	0x01D96EBC LDRB W8, [X22 + 0xA18]
	0x01D96EC0 TBNZ X8, 0x0, 0x1D96ED8
	0x01D96EC4 ADRP X0, 0x2360000
	0x01D96EC8 LDR X0, [X0 + 0xD18]
	0x01D96ECC BL 0x1C16CF4
	0x01D96ED0 MOVZ W8, 0x1
	0x01D96ED4 STRB W8, [X22 + 0xA18]
	0x01D96ED8 STP X31, X31, [X31 + 0x40]
	0x01D96EDC STR W31, [X31 + 0x58]
	0x01D96EE0 STR X31, [X31 + 0x50]
	0x01D96EE4 LDR W8, [X20 + 0x3C]
	0x01D96EE8 LDUR X9, [X20 + 0x34]
	0x01D96EEC LDUR V0, [X20 + 0x24]
	0x01D96EF0 STR W8, [X31 + 0x58]
	0x01D96EF4 STR X9, [X31 + 0x50]
	0x01D96EF8 STR V0, [X31 + 0x4]
	0x01D96EFC CBZ X19, 0x1D96F94
	0x01D96F00 MOVZ W8, 0x1
	0x01D96F04 STRB W8, [X19 + 0x58]
	0x01D96F08 LDR V0, [X31 + 0x4]
	0x01D96F0C LDUR V1, [X31 + 0x4C]
	0x01D96F10 ADRP X9, 0x2360000
	0x01D96F14 LDR X9, [X9 + 0xD18]
	0x01D96F18 STR V0, [X31 + 0x2]
	0x01D96F1C STUR V1, [X31 + 0x2C]
	0x01D96F20 LDR X8, [X19]
	0x01D96F24 LDR X1, [X9]
	0x01D96F28 LDRB W10, [X8 + 0x130]
	0x01D96F2C LDRB W9, [X1 + 0x130]
	0x01D96F30 CMP W10, W9
	0x01D96F34 B.CC 0x1D96F8C
	0x01D96F38 LDR X8, [X8 + 0xC8]
	0x01D96F3C ADD X8, X8, X9, 0x3, LSL
	0x01D96F40 LDUR X8, [X8 - 0x8]
	0x01D96F44 CMP X8, X1
	0x01D96F48 B.NE 0x1D96F8C
	0x01D96F4C LDR V0, [X31 + 0x2]
	0x01D96F50 LDUR V1, [X31 + 0x2C]
	0x01D96F54 ADD X1, X31, 0x0
	0x01D96F58 MOV X0, X19
	0x01D96F5C STR V0, [X31]
	0x01D96F60 STUR V1, [X31 + 0xC]
	0x01D96F64 BL 0x1D91404
	0x01D96F68 LDR X8, [X21 + 0x28]
	0x01D96F6C LDR X9, [X31 + 0x68]
	0x01D96F70 CMP X8, X9
	0x01D96F74 B.NE 0x1D96F98
	0x01D96F78 LDP X20, X19, [X31 + 0x90]
	0x01D96F7C LDP X22, X21, [X31 + 0x80]
	0x01D96F80 LDR X30, [X31 + 0x70]
	0x01D96F84 ADD X31, X31, 0xA0
	0x01D96F88 RET
	0x01D96F8C MOV X0, X19
	0x01D96F90 BL 0x1C171E0
	0x01D96F94 BL 0x1C16F20
	0x01D96F98 BL 0x3EB1B20
	0x01D96F9C STP X30, X21, [X31 - 0x20]!
	0x01D96FA0 STP X20, X19, [X31 + 0x10]
	0x01D96FA4 ADRP X21, 0x2642000
	0x01D96FA8 LDRB W8, [X21 + 0xA19]
	0x01D96FAC MOV X20, X1
	0x01D96FB0 MOV X19, X0
	0x01D96FB4 TBNZ X8, 0x0, 0x1D96FCC
	0x01D96FB8 ADRP X0, 0x2360000
	0x01D96FBC LDR X0, [X0 + 0xD18]
	0x01D96FC0 BL 0x1C16CF4
	0x01D96FC4 MOVZ W8, 0x1
	0x01D96FC8 STRB W8, [X21 + 0xA19]
	0x01D96FCC CBZ X19, 0x1D9702C
	0x01D96FD0 ADRP X8, 0x2360000
	0x01D96FD4 LDR X8, [X8 + 0xD18]
	0x01D96FD8 MOVZ W9, 0x1
	0x01D96FDC LDUR X1, [X20 + 0x24]
	0x01D96FE0 STRB W9, [X19 + 0x58]
	0x01D96FE4 LDR X9, [X19]
	0x01D96FE8 LDR X8, [X8]
	0x01D96FEC LDRB W11, [X9 + 0x130]
	0x01D96FF0 LDRB W10, [X8 + 0x130]
	0x01D96FF4 CMP W11, W10
	0x01D96FF8 B.CC 0x1D97020
	0x01D96FFC LDR X9, [X9 + 0xC8]
	0x01D97000 ADD X9, X9, X10, 0x3, LSL
	0x01D97004 LDUR X9, [X9 - 0x8]
	0x01D97008 CMP X9, X8
	0x01D9700C B.NE 0x1D97020
	0x01D97010 MOV X0, X19
	0x01D97014 LDP X20, X19, [X31 + 0x10]
	0x01D97018 LDP X30, X21, [X31], #0x20
	0x01D9701C B 0x1D91A0C
	0x01D97020 MOV X0, X19
	0x01D97024 MOV X1, X8
	0x01D97028 BL 0x1C171E0
	0x01D9702C BL 0x1C16F20
	0x01D97030 STP X30, X21, [X31 - 0x20]!
	0x01D97034 STP X20, X19, [X31 + 0x10]
	0x01D97038 ADRP X21, 0x2641000
	0x01D9703C LDRB W8, [X21 + 0xA1A]
	0x01D97040 MOV X20, X1
	0x01D97044 MOV X19, X0
	0x01D97048 TBNZ X8, 0x0, 0x1D97060
	0x01D9704C ADRP X0, 0x235F000
	0x01D97050 LDR X0, [X0 + 0xD18]
	0x01D97054 BL 0x1C16CF4
	0x01D97058 MOVZ W8, 0x1
	0x01D9705C STRB W8, [X21 + 0xA1A]
	0x01D97060 CBZ X19, 0x1D970C0
	0x01D97064 ADRP X9, 0x235F000
	0x01D97068 LDR X9, [X9 + 0xD18]
	0x01D9706C MOVZ W8, 0x1
	0x01D97070 LDP S0, S1, [X20 + 0x24]
	0x01D97074 LDR V2, [X20 + 0x2C]
	0x01D97078 STRB W8, [X19 + 0x58]
	0x01D9707C LDR X8, [X19]
	0x01D97080 LDR X1, [X9]
	0x01D97084 LDRB W10, [X8 + 0x130]
	0x01D97088 LDRB W9, [X1 + 0x130]
	0x01D9708C CMP W10, W9
	0x01D97090 B.CC 0x1D970B8
	0x01D97094 LDR X8, [X8 + 0xC8]
	0x01D97098 ADD X8, X8, X9, 0x3, LSL
	0x01D9709C LDUR X8, [X8 - 0x8]
	0x01D970A0 CMP X8, X1
	0x01D970A4 B.NE 0x1D970B8
	0x01D970A8 MOV X0, X19
	0x01D970AC LDP X20, X19, [X31 + 0x10]
	0x01D970B0 LDP X30, X21, [X31], #0x20
	0x01D970B4 B 0x1D91C4C
	0x01D970B8 MOV X0, X19
	0x01D970BC BL 0x1C171E0
	0x01D970C0 BL 0x1C16F20
	0x01D970C4 STR X30, [X31 - 0x20]!
	0x01D970C8 STP X20, X19, [X31 + 0x10]
	0x01D970CC ADRP X20, 0x2641000
	0x01D970D0 LDRB W8, [X20 + 0xA1B]
	0x01D970D4 MOV X19, X0
	0x01D970D8 TBNZ X8, 0x0, 0x1D970F0
	0x01D970DC ADRP X0, 0x235F000
	0x01D970E0 LDR X0, [X0 + 0xD18]
	0x01D970E4 BL 0x1C16CF4
	0x01D970E8 MOVZ W8, 0x1
	0x01D970EC STRB W8, [X20 + 0xA1B]
	0x01D970F0 CBZ X19, 0x1D97148
	0x01D970F4 ADRP X9, 0x235F000
	0x01D970F8 LDR X9, [X9 + 0xD18]
	0x01D970FC MOVZ W8, 0x1
	0x01D97100 STRB W8, [X19 + 0x58]
	0x01D97104 LDR X8, [X19]
	0x01D97108 LDR X1, [X9]
	0x01D9710C LDRB W10, [X8 + 0x130]
	0x01D97110 LDRB W9, [X1 + 0x130]
	0x01D97114 CMP W10, W9
	0x01D97118 B.CC 0x1D97140
	0x01D9711C LDR X8, [X8 + 0xC8]
	0x01D97120 ADD X8, X8, X9, 0x3, LSL
	0x01D97124 LDUR X8, [X8 - 0x8]
	0x01D97128 CMP X8, X1
	0x01D9712C B.NE 0x1D97140
	0x01D97130 MOV X0, X19
	0x01D97134 LDP X20, X19, [X31 + 0x10]
	0x01D97138 LDR X30, [X31], #0x20
	0x01D9713C B 0x1D93210
	0x01D97140 MOV X0, X19
	0x01D97144 BL 0x1C171E0

ISIL:
	001 Move [X31-128], D15
	002 Move [X31-120], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X21, 0x2643000
	017 Move X22, 0x235E000
	018 Move W8, [X21+2572]
	019 Move X22, [X22+1432]
	020 Move V8, V2
	021 Move V9, V1
	022 Move V10, V0
	023 Move X20, X1
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {46}
	029 Move X0, 0x2361000
	030 Move X0, [X0+3048]
	031 Call 0x1C17CF4
	032 Move X0, 0x2361000
	033 Move X0, [X0+3056]
	034 Call 0x1C17CF4
	035 Move X0, 0x2360000
	036 Move X0, [X0+2464]
	037 Call 0x1C17CF4
	038 Move X0, 0x235E000
	039 Move X0, [X0+1432]
	040 Call 0x1C17CF4
	041 Move X0, 0x2361000
	042 Move X0, [X0+3624]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X21+2572], W8
	046 Move X0, [X22]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X20
	052 Move X1, X31
	053 Move X2, X31
	054 Call Object.op_Equality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {294}
	059 Move X0, X19
	060 Call GrabbableItem.get_netObjectExists, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {294}
	065 Move X0, [X19+64]
	066 Compare X0, 0
	067 JumpIfEqual {294}
	068 Move W8, [X0+96]
	069 Move TEMP, X8
	070 And TEMP, TEMP, 2
	071 Compare TEMP, 2
	072 JumpIfEqual {294}
	073 Move X1, X31
	074 Call NetworkObject.get_HasStateAuthority, X0
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {294}
	079 Compare X20, 0
	080 JumpIfEqual {310}
	081 Move X8, 0x2361000
	082 Move X8, [X8+3048]
	083 Move X0, X20
	084 Move X1, [X8]
	085 Call 0x21E68C4, X0
	086 Compare X0, 0
	087 JumpIfEqual {294}
	088 Move X8, 0x2360000
	089 Move X8, [X8+2464]
	090 Move X9, [X0]
	091 Move X20, X0
	092 Move X8, [X8]
	093 Move W11, [X9+304]
	094 Move W10, [X8+304]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X9, [X9+200]
	097 Add X9, X9, X10
	098 NotImplemented "Instruction LDUR not yet implemented."
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move X0, X20
	101 Move X1, X31
	102 Call NetPlayer.get_IsMine, X0
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfEqual {294}
	107 Move X0, X31
	108 Call Time.get_fixedTime
	109 Move V1, [X19+612]
	110 Move X8, -19574784
	111 Move V2, [X8+860]
	112 Subtract S0, S0, S1
	113 NotImplemented "Instruction FCMP not yet implemented."
	114 Move X21, 0x2643000
	115 Move W8, [X21+1924]
	116 Compare W8, 0
	117 JumpIfNotEqual {123}
	118 Move X0, 0x235E000
	119 Move X0, [X0+1448]
	120 Call 0x1C17CF4
	121 Move W8, 1
	122 Move [X21+1924], W8
	123 Move X23, 0x235E000
	124 Move X23, [X23+1448]
	125 Move X0, [X23]
	126 Move W8, [X0+224]
	127 Compare W8, 0
	128 JumpIfNotEqual {130}
	129 Call 0x1C17DFC
	130 Move X0, [X19+360]
	131 Compare X0, 0
	132 JumpIfEqual {310}
	133 Multiply S0, S10, S10
	134 Multiply S1, S9, S9
	135 Add S0, S0, S1
	136 Multiply S1, S8, S8
	137 Add S0, S1, S0
	138 Move X1, X31
	139 NotImplemented "Instruction FSQRT not yet implemented."
	140 Call Rigidbody.get_mass, X0
	141 Move X21, 0x2643000
	142 Move W8, [X21+2595]
	143 Move S1, -20
	144 Add S11, S15, S1
	145 Move S1, 0.125
	146 Multiply S12, S0, S1
	147 Compare W8, 0
	148 JumpIfNotEqual {154}
	149 Move X0, 0x235E000
	150 Move X0, [X0+1448]
	151 Call 0x1C17CF4
	152 Move W8, 1
	153 Move [X21+2595], W8
	154 Move X0, [X23]
	155 Multiply S11, S11, S12
	156 Move W8, [X0+224]
	157 Compare W8, 0
	158 JumpIfNotEqual {160}
	159 Call 0x1C17DFC
	160 Move W8, 0x7F800000
	161 NotImplemented "Instruction FRINTM not yet implemented."
	162 Move S1, W8
	163 NotImplemented "Instruction FCVTMS not yet implemented."
	164 NotImplemented "Instruction FCMP not yet implemented."
	165 Move W8, 0x80000000
	166 NotImplemented "Instruction CSEL not yet implemented."
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move W9, [X21+2595]
	169 Move V11, [X19+184]
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Move W10, 15
	172 NotImplemented "Instruction CSEL not yet implemented."
	173 NotImplemented "Instruction SCVTF not yet implemented."
	174 Compare W9, 0
	175 JumpIfNotEqual {181}
	176 Move X0, 0x235E000
	177 Move X0, [X0+1448]
	178 Call 0x1C17CF4
	179 Move W8, 1
	180 Move [X21+2595], W8
	181 Move X0, [X23]
	182 Multiply S11, S11, S14
	183 Move W8, [X0+224]
	184 Compare W8, 0
	185 JumpIfNotEqual {187}
	186 Call 0x1C17DFC
	187 Move W8, 0x7F800000
	188 NotImplemented "Instruction FRINTM not yet implemented."
	189 Move S1, W8
	190 NotImplemented "Instruction FCVTMS not yet implemented."
	191 NotImplemented "Instruction FCMP not yet implemented."
	192 Move W8, 0x80000000
	193 Move X0, X19
	194 Move X1, X31
	195 NotImplemented "Instruction CSEL not yet implemented."
	196 Call Component.get_transform, X0
	197 Compare X0, 0
	198 JumpIfEqual {310}
	199 Move X1, X31
	200 Call Transform.get_position, X0
	201 Move X24, 0x2643000
	202 Move W8, [X24+1925]
	203 Move X22, [X19+224]
	204 Move V11, V0
	205 Move V12, V1
	206 Move V13, V2
	207 Compare W8, 0
	208 JumpIfNotEqual {214}
	209 Move X0, 0x235E000
	210 Move X0, [X0+1448]
	211 Call 0x1C17CF4
	212 Move W8, 1
	213 Move [X24+1925], W8
	214 Move X0, [X23]
	215 Move W8, [X0+224]
	216 Compare W8, 0
	217 JumpIfNotEqual {219}
	218 Call 0x1C17DFC
	219 Move X8, -19574784
	220 Move V0, [X8+380]
	221 NotImplemented "Instruction FCMP not yet implemented."
	222 NotImplemented "Instruction FDIV not yet implemented."
	223 NotImplemented "Instruction FDIV not yet implemented."
	224 NotImplemented "Instruction FDIV not yet implemented."
	225 Move X23, 0x2642000
	226 Move W8, [X23+1923]
	227 Compare W8, 0
	228 JumpIfNotEqual {234}
	229 Move X0, 0x235D000
	230 Move X0, [X0+1440]
	231 Call 0x1C17CF4
	232 Move W8, 1
	233 Move [X23+1923], W8
	234 Move X8, 0x235D000
	235 Move X8, [X8+1440]
	236 Move X8, [X8]
	237 Move X8, [X8+184]
	238 Move S2, [X8]
	239 Move S0, [X8+4]
	240 Move V1, [X8+8]
	241 Move X8, [X19+64]
	242 Compare X8, 0
	243 JumpIfEqual {248}
	244 Move X8, [X8+32]
	245 Compare X8, 0
	246 JumpIfEqual {248}
	247 Move W23, [X8]
	248 Move X23, X31
	249 Move X9, 0x2360000
	250 Move W10, [X19+104]
	251 Move X8, [X20]
	252 Move X9, [X9+3056]
	253 Move X11, 0x2360000
	254 Multiply S8, S2, S14
	255 Multiply S10, S0, S14
	256 Move X1, [X9]
	257 Move X11, [X11+3624]
	258 NotImplemented "Instruction LDRH not yet implemented."
	259 Multiply S9, S1, S14
	260 NotImplemented "Instruction BFM not yet implemented."
	261 Move X24, [X11]
	262 Compare X9, 0
	263 JumpIfEqual {270}
	264 Move X10, [X8+176]
	265 Add X10, X10, 8
	266 NotImplemented "Instruction LDUR not yet implemented."
	267 NotImplemented "Instruction CMP not yet implemented."
	268 Subtract X9, X9, 1
	269 Add X10, X10, 16
	270 Move X0, X20
	271 Move W2, W31
	272 Call 0x1C5D788
	273 NotImplemented "Instruction LDRSW not yet implemented."
	274 Add X8, X8, X9
	275 Add X0, X8, 312
	276 Move X8, [X0]
	277 Move X6, [X0+8]
	278 Move X0, X20
	279 Move W1, W21
	280 Move V0, V11
	281 Move V1, V12
	282 Move V2, V13
	283 Move X2, X22
	284 Move X3, X31
	285 Move V3, V8
	286 Move V4, V10
	287 Move V5, V9
	288 Move X4, X24
	289 Move X5, X23
	290 NotImplemented "Instruction BLR not yet implemented."
	291 Move X0, X31
	292 Call Time.get_fixedTime
	293 Move [X19+612], S0
	294 Move X20, [X31+112]
	295 Move X19, [X31+120]
	296 Move X22, [X31+96]
	297 Move X21, [X31+104]
	298 Move X24, [X31+80]
	299 Move X23, [X31+88]
	300 Move X30, [X31+64]
	301 Move D9, [X31+48]
	302 Move D8, [X31+56]
	303 Move D11, [X31+32]
	304 Move D10, [X31+40]
	305 Move D13, [X31+16]
	306 Move D12, [X31+24]
	307 Move D15, [X31+128]
	308 Move D14, [X31+136]
	309 Return 
	310 Call 0x1C17F20

Method: System.Void OnCollisionEnter(UnityEngine.Collision collisionInfo)

Disassembly:
	0x01D97148 BL 0x1C16F20
	0x01D9714C STR X30, [X31 - 0x20]!
	0x01D97150 STP X20, X19, [X31 + 0x10]
	0x01D97154 ADRP X20, 0x2641000
	0x01D97158 LDRB W8, [X20 + 0xA1C]
	0x01D9715C MOV X19, X0
	0x01D97160 TBNZ X8, 0x0, 0x1D97178
	0x01D97164 ADRP X0, 0x235F000
	0x01D97168 LDR X0, [X0 + 0xD18]
	0x01D9716C BL 0x1C16CF4
	0x01D97170 MOVZ W8, 0x1
	0x01D97174 STRB W8, [X20 + 0xA1C]
	0x01D97178 CBZ X19, 0x1D971D0
	0x01D9717C ADRP X9, 0x235F000
	0x01D97180 LDR X9, [X9 + 0xD18]
	0x01D97184 MOVZ W8, 0x1
	0x01D97188 STRB W8, [X19 + 0x58]
	0x01D9718C LDR X8, [X19]
	0x01D97190 LDR X1, [X9]
	0x01D97194 LDRB W10, [X8 + 0x130]
	0x01D97198 LDRB W9, [X1 + 0x130]
	0x01D9719C CMP W10, W9
	0x01D971A0 B.CC 0x1D971C8
	0x01D971A4 LDR X8, [X8 + 0xC8]
	0x01D971A8 ADD X8, X8, X9, 0x3, LSL
	0x01D971AC LDUR X8, [X8 - 0x8]
	0x01D971B0 CMP X8, X1
	0x01D971B4 B.NE 0x1D971C8
	0x01D971B8 MOV X0, X19
	0x01D971BC LDP X20, X19, [X31 + 0x10]
	0x01D971C0 LDR X30, [X31], #0x20
	0x01D971C4 B 0x1D934E0
	0x01D971C8 MOV X0, X19
	0x01D971CC BL 0x1C171E0
	0x01D971D0 BL 0x1C16F20
	0x01D971D4 STP X30, X21, [X31 - 0x20]!
	0x01D971D8 STP X20, X19, [X31 + 0x10]
	0x01D971DC ADRP X21, 0x2641000
	0x01D971E0 LDRB W8, [X21 + 0xA1D]
	0x01D971E4 MOV X20, X1
	0x01D971E8 MOV X19, X0
	0x01D971EC TBNZ X8, 0x0, 0x1D97204
	0x01D971F0 ADRP X0, 0x235F000
	0x01D971F4 LDR X0, [X0 + 0xD18]
	0x01D971F8 BL 0x1C16CF4
	0x01D971FC MOVZ W8, 0x1
	0x01D97200 STRB W8, [X21 + 0xA1D]
	0x01D97204 CBZ X19, 0x1D97264
	0x01D97208 ADRP X9, 0x235F000
	0x01D9720C LDR X9, [X9 + 0xD18]
	0x01D97210 MOVZ W8, 0x1
	0x01D97214 LDP S0, S1, [X20 + 0x24]
	0x01D97218 LDR V2, [X20 + 0x2C]
	0x01D9721C STRB W8, [X19 + 0x58]
	0x01D97220 LDR X8, [X19]
	0x01D97224 LDR X1, [X9]
	0x01D97228 LDRB W10, [X8 + 0x130]
	0x01D9722C LDRB W9, [X1 + 0x130]
	0x01D97230 CMP W10, W9
	0x01D97234 B.CC 0x1D9725C
	0x01D97238 LDR X8, [X8 + 0xC8]
	0x01D9723C ADD X8, X8, X9, 0x3, LSL
	0x01D97240 LDUR X8, [X8 - 0x8]
	0x01D97244 CMP X8, X1
	0x01D97248 B.NE 0x1D9725C
	0x01D9724C MOV X0, X19
	0x01D97250 LDP X20, X19, [X31 + 0x10]
	0x01D97254 LDP X30, X21, [X31], #0x20
	0x01D97258 B 0x1D96778
	0x01D9725C MOV X0, X19
	0x01D97260 BL 0x1C171E0
	0x01D97264 BL 0x1C16F20
	0x01D97268 FADD S0, S0, S3
	0x01D9726C FADD S1, S1, S4
	0x01D97270 FADD S2, S2, S5
	0x01D97274 RET
	0x01D97278 STP X30, X19, [X31 - 0x10]!
	0x01D9727C LDR X8, [X0 + 0x50]
	0x01D97280 CBZ X8, 0x1D97290
	0x01D97284 LDR W0, [X8]
	0x01D97288 LDP X30, X19, [X31], #0x10
	0x01D9728C RET
	0x01D97290 ADRP X0, 0x235C000
	0x01D97294 LDR X0, [X0 + 0x5B0]
	0x01D97298 BL 0x1C16D08
	0x01D9729C BL 0x1C16F10
	0x01D972A0 MOV X19, X0
	0x01D972A4 ADRP X0, 0x235F000
	0x01D972A8 LDR X0, [X0 + 0xE58]
	0x01D972AC BL 0x1C16D08
	0x01D972B0 MOV X1, X0
	0x01D972B4 MOV X0, X19
	0x01D972B8 MOV X2, X31
	0x01D972BC BL 0x337DF1C
	0x01D972C0 ADRP X0, 0x235F000
	0x01D972C4 LDR X0, [X0 + 0xE60]
	0x01D972C8 BL 0x1C16D08
	0x01D972CC MOV X1, X0
	0x01D972D0 MOV X0, X19
	0x01D972D4 BL 0x1C16DEC
	0x01D972D8 STP X30, X19, [X31 - 0x10]!
	0x01D972DC LDR X8, [X0 + 0x50]
	0x01D972E0 CBZ X8, 0x1D972F0
	0x01D972E4 STR W1, [X8]
	0x01D972E8 LDP X30, X19, [X31], #0x10
	0x01D972EC RET
	0x01D972F0 ADRP X0, 0x235C000
	0x01D972F4 LDR X0, [X0 + 0x5B0]
	0x01D972F8 BL 0x1C16D08
	0x01D972FC BL 0x1C16F10
	0x01D97300 MOV X19, X0
	0x01D97304 ADRP X0, 0x235F000
	0x01D97308 LDR X0, [X0 + 0xE58]
	0x01D9730C BL 0x1C16D08
	0x01D97310 MOV X1, X0
	0x01D97314 MOV X0, X19
	0x01D97318 MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2642000
	007 Move W8, [X21+2573]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x235D000
	015 Move X0, [X0+1496]
	016 Call 0x1C17CF4
	017 Move X0, 0x235D000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2573], W8
	022 Compare X20, 0
	023 JumpIfEqual {150}
	024 Move X22, 0x235D000
	025 Move X22, [X22+1432]
	026 Move X0, X20
	027 Move X1, X31
	028 Call Collision.get_gameObject, X0
	029 Move X21, X0
	030 Move X0, X20
	031 Move X1, X31
	032 Call Collision.get_relativeVelocity, X0
	033 Move X0, X19
	034 Move X1, X21
	035 Call GrabbableItem.ApplyCollisionDamage, X0, X1, X2
	036 Move X0, [X22]
	037 Move X21, [X19+336]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X21
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Equality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {144}
	050 Move X8, [X19+336]
	051 Compare X8, 0
	052 JumpIfEqual {150}
	053 Move X0, [X8+64]
	054 Compare X0, 0
	055 JumpIfEqual {144}
	056 Move W8, [X0+96]
	057 Move TEMP, X8
	058 And TEMP, TEMP, 2
	059 Compare TEMP, 2
	060 JumpIfEqual {144}
	061 Move X1, X31
	062 Call NetworkObject.get_HasStateAuthority, X0
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {144}
	067 Move W8, [X19+137]
	068 Compare W8, 0
	069 JumpIfEqual {111}
	070 Move X0, [X22]
	071 Move X21, [X19+336]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X0, X21
	077 Move X1, X31
	078 Move X2, X31
	079 Call Object.op_Inequality, X0, X1
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {111}
	084 Move X8, [X19+336]
	085 Compare X8, 0
	086 JumpIfEqual {150}
	087 Move W8, [X8+132]
	088 Compare W8, 0
	089 JumpIfEqual {111}
	090 Move X0, X31
	091 Call Time.get_fixedTime
	092 Move V1, [X19+400]
	093 Subtract S0, S0, S1
	094 Move S1, 0.25
	095 NotImplemented "Instruction FCMP not yet implemented."
	096 Move X21, [X19+336]
	097 Move X0, X20
	098 Move X1, X31
	099 Call Collision.get_relativeVelocity, X0
	100 Compare X21, 0
	101 JumpIfEqual {150}
	102 Move X8, [X21+152]
	103 Compare X8, 0
	104 JumpIfEqual {111}
	105 Move W1, [X21+128]
	106 Move X9, [X8+24]
	107 Move X0, [X8+64]
	108 Move X3, [X8+40]
	109 Move X2, X20
	110 NotImplemented "Instruction BLR not yet implemented."
	111 Move X21, 0x235D000
	112 Move X21, [X21+1496]
	113 Move X0, [X21]
	114 Move W8, [X0+224]
	115 Compare W8, 0
	116 JumpIfNotEqual {119}
	117 Call 0x1C17DFC
	118 Move X0, [X21]
	119 Move X8, [X0+184]
	120 Move X0, X20
	121 Move X1, X31
	122 Move W21, [X8+64]
	123 Call Collision.get_gameObject, X0
	124 Compare X0, 0
	125 JumpIfEqual {150}
	126 Move X1, X31
	127 Call GameObject.get_layer, X0
	128 Move W1, W0
	129 Move X0, X21
	130 Move X2, X31
	131 Call LayerMaskExtensions.Contains, X0, X1
	132 Move TEMP, X0
	133 And TEMP, TEMP, 1
	134 Compare TEMP, 1
	135 JumpIfNotEqual {141}
	136 Move W8, 1
	137 Move X0, X19
	138 Move X1, X20
	139 Move [X19+384], W8
	140 Call GrabbableItem.UpdateContactPoints, X0, X1
	141 Move X0, X31
	142 Call Time.get_fixedTime
	143 Move [X19+400], S0
	144 Move X20, [X31+32]
	145 Move X19, [X31+40]
	146 Move X22, [X31+16]
	147 Move X21, [X31+24]
	148 Move X30, [X31+48]
	149 Return 
	150 Call 0x1C17F20

Method: System.Void OnCollisionStay(UnityEngine.Collision collisionInfo)

Disassembly:
	0x01D9765C ADRP X20, 0x2641000
	0x01D97660 LDRB W8, [X20 + 0xA25]
	0x01D97664 MOV X19, X0
	0x01D97668 TBNZ X8, 0x0, 0x1D976BC
	0x01D9766C ADRP X0, 0x235F000
	0x01D97670 LDR X0, [X0 + 0xED0]
	0x01D97674 BL 0x1C16CF4
	0x01D97678 ADRP X0, 0x235D000
	0x01D9767C LDR X0, [X0 + 0xE70]
	0x01D97680 BL 0x1C16CF4
	0x01D97684 ADRP X0, 0x235F000
	0x01D97688 LDR X0, [X0 + 0xED8]
	0x01D9768C BL 0x1C16CF4
	0x01D97690 ADRP X0, 0x235F000
	0x01D97694 LDR X0, [X0 + 0xEE0]
	0x01D97698 BL 0x1C16CF4
	0x01D9769C ADRP X0, 0x235F000
	0x01D976A0 LDR X0, [X0 + 0xEE8]
	0x01D976A4 BL 0x1C16CF4
	0x01D976A8 ADRP X0, 0x235F000
	0x01D976AC LDR X0, [X0 + 0xEF0]
	0x01D976B0 BL 0x1C16CF4
	0x01D976B4 MOVZ W8, 0x1
	0x01D976B8 STRB W8, [X20 + 0xA25]
	0x01D976BC LDR X23, [X19 + 0x80]
	0x01D976C0 CBZ X23, 0x1D978A0
	0x01D976C4 ADRP X22, 0x235D000
	0x01D976C8 LDR X22, [X22 + 0xE70]
	0x01D976CC ADRP X21, 0x235F000
	0x01D976D0 LDR X20, [X23 + 0x1D0]
	0x01D976D4 LDR X0, [X22]
	0x01D976D8 LDR X21, [X21 + 0xEF0]
	0x01D976DC BL 0x1C16F10
	0x01D976E0 LDR X2, [X21]
	0x01D976E4 MOV X1, X19
	0x01D976E8 MOV X3, X31
	0x01D976EC MOV X21, X0
	0x01D976F0 BL 0x3314368
	0x01D976F4 MOV X0, X20
	0x01D976F8 MOV X1, X21
	0x01D976FC MOV X2, X31
	0x01D97700 BL 0x33C0DE4
	0x01D97704 LDR X1, [X22]
	0x01D97708 CBZ X0, 0x1D9772C
	0x01D9770C LDR X8, [X0]
	0x01D97710 CMP X8, X1
	0x01D97714 B.NE 0x1D97800
	0x01D97718 STR X0, [X23 + 0x1D0]
	0x01D9771C LDR X8, [X0]
	0x01D97720 CMP X8, X1
	0x01D97724 B.EQ 0x1D97730
	0x01D97728 B 0x1D97800
	0x01D9772C STR X0, [X23 + 0x1D0]
	0x01D97730 LDR X23, [X19 + 0x80]
	0x01D97734 CBZ X23, 0x1D978A0
	0x01D97738 ADRP X21, 0x235F000
	0x01D9773C LDR X20, [X23 + 0x1E0]
	0x01D97740 LDR X21, [X21 + 0xEE8]
	0x01D97744 MOV X0, X1
	0x01D97748 BL 0x1C16F10
	0x01D9774C LDR X2, [X21]
	0x01D97750 MOV X1, X19
	0x01D97754 MOV X3, X31
	0x01D97758 MOV X21, X0
	0x01D9775C BL 0x3314368
	0x01D97760 MOV X0, X20
	0x01D97764 MOV X1, X21
	0x01D97768 MOV X2, X31
	0x01D9776C BL 0x33C0DE4
	0x01D97770 LDR X1, [X22]
	0x01D97774 CBZ X0, 0x1D97798

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2642000
	007 Move X21, 0x235D000
	008 Move W8, [X22+2574]
	009 Move X21, [X21+1432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x235D000
	017 Move X0, [X0+1496]
	018 Call 0x1C17CF4
	019 Move X0, 0x235D000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2574], W8
	024 Move X0, [X21]
	025 Move X21, [X20+336]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {93}
	038 Move X8, [X20+336]
	039 Compare X8, 0
	040 JumpIfEqual {99}
	041 Move X0, [X8+64]
	042 Compare X0, 0
	043 JumpIfEqual {93}
	044 Move W8, [X0+96]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 2
	047 Compare TEMP, 2
	048 JumpIfEqual {93}
	049 Move X1, X31
	050 Call NetworkObject.get_HasStateAuthority, X0
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {93}
	055 Move X21, 0x235D000
	056 Move X21, [X21+1496]
	057 Move X0, [X21]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {63}
	061 Call 0x1C17DFC
	062 Move X0, [X21]
	063 Compare X19, 0
	064 JumpIfEqual {99}
	065 Move X8, [X0+184]
	066 Move X0, X19
	067 Move X1, X31
	068 Move W21, [X8+64]
	069 Call Collision.get_gameObject, X0
	070 Compare X0, 0
	071 JumpIfEqual {99}
	072 Move X1, X31
	073 Call GameObject.get_layer, X0
	074 Move W1, W0
	075 Move X0, X21
	076 Move X2, X31
	077 Call LayerMaskExtensions.Contains, X0, X1
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {93}
	082 Move W8, 1
	083 Move [X20+384], W8
	084 Move X0, X20
	085 Move X1, X19
	086 Move X20, [X31+32]
	087 Move X19, [X31+40]
	088 Move X22, [X31+16]
	089 Move X21, [X31+24]
	090 Move X30, [X31+48]
	091 Call GrabbableItem.UpdateContactPoints, X0, X1
	092 Return 
	093 Move X20, [X31+32]
	094 Move X19, [X31+40]
	095 Move X22, [X31+16]
	096 Move X21, [X31+24]
	097 Move X30, [X31+48]
	098 Return 
	099 Call 0x1C17F20

Method: System.Void UpdateContactPoints(UnityEngine.Collision collisionInfo)

Disassembly:
	0x01D9731C BL 0x337DF1C
	0x01D97320 ADRP X0, 0x235F000
	0x01D97324 LDR X0, [X0 + 0xE68]
	0x01D97328 BL 0x1C16D08
	0x01D9732C MOV X1, X0
	0x01D97330 MOV X0, X19
	0x01D97334 BL 0x1C16DEC
	0x01D97338 STP X30, X19, [X31 - 0x10]!
	0x01D9733C LDR X8, [X0 + 0x50]
	0x01D97340 CBZ X8, 0x1D97350
	0x01D97344 LDR W0, [X8 + 0x4]
	0x01D97348 LDP X30, X19, [X31], #0x10
	0x01D9734C RET
	0x01D97350 ADRP X0, 0x235C000
	0x01D97354 LDR X0, [X0 + 0x5B0]
	0x01D97358 BL 0x1C16D08
	0x01D9735C BL 0x1C16F10
	0x01D97360 MOV X19, X0
	0x01D97364 ADRP X0, 0x235F000
	0x01D97368 LDR X0, [X0 + 0xE70]
	0x01D9736C BL 0x1C16D08
	0x01D97370 MOV X1, X0
	0x01D97374 MOV X0, X19
	0x01D97378 MOV X2, X31
	0x01D9737C BL 0x337DF1C
	0x01D97380 ADRP X0, 0x235F000
	0x01D97384 LDR X0, [X0 + 0xE78]
	0x01D97388 BL 0x1C16D08
	0x01D9738C MOV X1, X0
	0x01D97390 MOV X0, X19
	0x01D97394 BL 0x1C16DEC
	0x01D97398 STP X30, X19, [X31 - 0x10]!
	0x01D9739C LDR X8, [X0 + 0x50]
	0x01D973A0 CBZ X8, 0x1D973B0
	0x01D973A4 STR W1, [X8 + 0x4]
	0x01D973A8 LDP X30, X19, [X31], #0x10
	0x01D973AC RET
	0x01D973B0 ADRP X0, 0x235C000
	0x01D973B4 LDR X0, [X0 + 0x5B0]
	0x01D973B8 BL 0x1C16D08
	0x01D973BC BL 0x1C16F10
	0x01D973C0 MOV X19, X0
	0x01D973C4 ADRP X0, 0x235F000
	0x01D973C8 LDR X0, [X0 + 0xE70]
	0x01D973CC BL 0x1C16D08
	0x01D973D0 MOV X1, X0
	0x01D973D4 MOV X0, X19
	0x01D973D8 MOV X2, X31
	0x01D973DC BL 0x337DF1C
	0x01D973E0 ADRP X0, 0x235F000
	0x01D973E4 LDR X0, [X0 + 0xE80]
	0x01D973E8 BL 0x1C16D08
	0x01D973EC MOV X1, X0
	0x01D973F0 MOV X0, X19
	0x01D973F4 BL 0x1C16DEC
	0x01D973F8 STP X30, X19, [X31 - 0x10]!
	0x01D973FC LDR X8, [X0 + 0x50]
	0x01D97400 CBZ X8, 0x1D97410
	0x01D97404 LDR W0, [X8 + 0x8]
	0x01D97408 LDP X30, X19, [X31], #0x10
	0x01D9740C RET
	0x01D97410 ADRP X0, 0x235C000
	0x01D97414 LDR X0, [X0 + 0x5B0]
	0x01D97418 BL 0x1C16D08
	0x01D9741C BL 0x1C16F10
	0x01D97420 MOV X19, X0
	0x01D97424 ADRP X0, 0x235F000
	0x01D97428 LDR X0, [X0 + 0xE88]
	0x01D9742C BL 0x1C16D08
	0x01D97430 MOV X1, X0
	0x01D97434 MOV X0, X19
	0x01D97438 MOV X2, X31
	0x01D9743C BL 0x337DF1C
	0x01D97440 ADRP X0, 0x235F000
	0x01D97444 LDR X0, [X0 + 0xE90]
	0x01D97448 BL 0x1C16D08
	0x01D9744C MOV X1, X0
	0x01D97450 MOV X0, X19
	0x01D97454 BL 0x1C16DEC
	0x01D97458 STP X30, X19, [X31 - 0x10]!
	0x01D9745C LDR X8, [X0 + 0x50]
	0x01D97460 CBZ X8, 0x1D97470
	0x01D97464 STR W1, [X8 + 0x8]
	0x01D97468 LDP X30, X19, [X31], #0x10
	0x01D9746C RET
	0x01D97470 ADRP X0, 0x235C000
	0x01D97474 LDR X0, [X0 + 0x5B0]
	0x01D97478 BL 0x1C16D08
	0x01D9747C BL 0x1C16F10
	0x01D97480 MOV X19, X0
	0x01D97484 ADRP X0, 0x235F000
	0x01D97488 LDR X0, [X0 + 0xE88]
	0x01D9748C BL 0x1C16D08
	0x01D97490 MOV X1, X0
	0x01D97494 MOV X0, X19
	0x01D97498 MOV X2, X31
	0x01D9749C BL 0x337DF1C
	0x01D974A0 ADRP X0, 0x235F000
	0x01D974A4 LDR X0, [X0 + 0xE98]
	0x01D974A8 BL 0x1C16D08
	0x01D974AC MOV X1, X0
	0x01D974B0 MOV X0, X19
	0x01D974B4 BL 0x1C16DEC
	0x01D974B8 STP X30, X19, [X31 - 0x10]!
	0x01D974BC LDR X8, [X0 + 0x50]
	0x01D974C0 CBZ X8, 0x1D974D8
	0x01D974C4 LDR W8, [X8 + 0xC]
	0x01D974C8 CMP W8, 0x0
	0x01D974CC CSET W0, NE
	0x01D974D0 LDP X30, X19, [X31], #0x10
	0x01D974D4 RET
	0x01D974D8 ADRP X0, 0x235C000
	0x01D974DC LDR X0, [X0 + 0x5B0]
	0x01D974E0 BL 0x1C16D08
	0x01D974E4 BL 0x1C16F10
	0x01D974E8 MOV X19, X0
	0x01D974EC ADRP X0, 0x235F000
	0x01D974F0 LDR X0, [X0 + 0xEA0]
	0x01D974F4 BL 0x1C16D08
	0x01D974F8 MOV X1, X0
	0x01D974FC MOV X0, X19
	0x01D97500 MOV X2, X31
	0x01D97504 BL 0x337DF1C
	0x01D97508 ADRP X0, 0x235F000
	0x01D9750C LDR X0, [X0 + 0xEA8]
	0x01D97510 BL 0x1C16D08
	0x01D97514 MOV X1, X0
	0x01D97518 MOV X0, X19
	0x01D9751C BL 0x1C16DEC
	0x01D97520 STP X30, X19, [X31 - 0x10]!
	0x01D97524 LDR X8, [X0 + 0x50]
	0x01D97528 CBZ X8, 0x1D9753C
	0x01D9752C AND W9, W1, 0x1
	0x01D97530 STR W9, [X8 + 0xC]
	0x01D97534 LDP X30, X19, [X31], #0x10
	0x01D97538 RET
	0x01D9753C ADRP X0, 0x235C000
	0x01D97540 LDR X0, [X0 + 0x5B0]
	0x01D97544 BL 0x1C16D08
	0x01D97548 BL 0x1C16F10
	0x01D9754C MOV X19, X0
	0x01D97550 ADRP X0, 0x235F000
	0x01D97554 LDR X0, [X0 + 0xEA0]
	0x01D97558 BL 0x1C16D08
	0x01D9755C MOV X1, X0
	0x01D97560 MOV X0, X19
	0x01D97564 MOV X2, X31
	0x01D97568 BL 0x337DF1C
	0x01D9756C ADRP X0, 0x235F000
	0x01D97570 LDR X0, [X0 + 0xEB0]
	0x01D97574 BL 0x1C16D08
	0x01D97578 MOV X1, X0
	0x01D9757C MOV X0, X19
	0x01D97580 BL 0x1C16DEC
	0x01D97584 STP X30, X19, [X31 - 0x10]!
	0x01D97588 LDR X8, [X0 + 0x50]
	0x01D9758C CBZ X8, 0x1D975A4
	0x01D97590 LDR W8, [X8 + 0x10]
	0x01D97594 CMP W8, 0x0
	0x01D97598 CSET W0, NE
	0x01D9759C LDP X30, X19, [X31], #0x10
	0x01D975A0 RET
	0x01D975A4 ADRP X0, 0x235C000
	0x01D975A8 LDR X0, [X0 + 0x5B0]
	0x01D975AC BL 0x1C16D08
	0x01D975B0 BL 0x1C16F10
	0x01D975B4 MOV X19, X0
	0x01D975B8 ADRP X0, 0x235F000
	0x01D975BC LDR X0, [X0 + 0xEB8]
	0x01D975C0 BL 0x1C16D08
	0x01D975C4 MOV X1, X0
	0x01D975C8 MOV X0, X19
	0x01D975CC MOV X2, X31
	0x01D975D0 BL 0x337DF1C
	0x01D975D4 ADRP X0, 0x235F000
	0x01D975D8 LDR X0, [X0 + 0xEC0]
	0x01D975DC BL 0x1C16D08
	0x01D975E0 MOV X1, X0
	0x01D975E4 MOV X0, X19
	0x01D975E8 BL 0x1C16DEC
	0x01D975EC STP X30, X19, [X31 - 0x10]!
	0x01D975F0 LDR X8, [X0 + 0x50]
	0x01D975F4 CBZ X8, 0x1D97608
	0x01D975F8 AND W9, W1, 0x1
	0x01D975FC STR W9, [X8 + 0x10]
	0x01D97600 LDP X30, X19, [X31], #0x10
	0x01D97604 RET
	0x01D97608 ADRP X0, 0x235C000
	0x01D9760C LDR X0, [X0 + 0x5B0]
	0x01D97610 BL 0x1C16D08
	0x01D97614 BL 0x1C16F10
	0x01D97618 MOV X19, X0
	0x01D9761C ADRP X0, 0x235F000
	0x01D97620 LDR X0, [X0 + 0xEB8]
	0x01D97624 BL 0x1C16D08
	0x01D97628 MOV X1, X0
	0x01D9762C MOV X0, X19
	0x01D97630 MOV X2, X31
	0x01D97634 BL 0x337DF1C
	0x01D97638 ADRP X0, 0x235F000
	0x01D9763C LDR X0, [X0 + 0xEC8]
	0x01D97640 BL 0x1C16D08
	0x01D97644 MOV X1, X0
	0x01D97648 MOV X0, X19
	0x01D9764C BL 0x1C16DEC
	0x01D97650 STP X30, X23, [X31 - 0x30]!
	0x01D97654 STP X22, X21, [X31 + 0x10]
	0x01D97658 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 336
	002 Move [X31+208], D14
	003 Move [X31+224], D13
	004 Move [X31+232], D12
	005 Move [X31+240], D11
	006 Move [X31+248], D10
	007 Move [X31+256], D9
	008 Move [X31+264], D8
	009 Move [X31+272], X29
	010 Move [X31+280], X30
	011 Move [X31+288], X24
	012 Move [X31+296], X23
	013 Move [X31+304], X22
	014 Move [X31+312], X21
	015 Move [X31+320], X20
	016 Move [X31+328], X19
	017 Move X21, 0x2642000
	018 Move W8, [X21+2575]
	019 Move X20, X1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x2360000
	026 Move X0, [X0+3632]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+2575], W8
	030 NotImplemented "Instruction MOVI not yet implemented."
	031 Move [X31+176], V0
	032 Move [X31+184], V0
	033 Move [X31+144], V0
	034 Move [X31+152], V0
	035 Move [X31+112], V0
	036 Move [X31+120], V0
	037 Move [X31+80], V0
	038 Move [X31+88], V0
	039 Compare X20, 0
	040 JumpIfEqual {242}
	041 Move X0, X20
	042 Move X1, X31
	043 Call Collision.get_contactCount, X0
	044 Move X8, [X19+552]
	045 Move [X19+560], W0
	046 Compare X8, 0
	047 JumpIfEqual {242}
	048 Move W8, [X8+24]
	049 Move W1, W0
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X8, 0x2360000
	052 Move X8, [X8+3632]
	053 Move X0, [X8]
	054 Call 0x1C17D6C
	055 Move [X19+552], X0
	056 Move X0, [X19+360]
	057 Compare X0, 0
	058 JumpIfEqual {242}
	059 Move X1, X31
	060 Call Rigidbody.get_position, X0
	061 Move X0, [X19+360]
	062 Compare X0, 0
	063 JumpIfEqual {242}
	064 Move X1, X31
	065 Move V8, V0
	066 Move V9, V1
	067 Move V10, V2
	068 Call Rigidbody.get_rotation, X0
	069 Move X21, 0x2642000
	070 Move W8, [X21+2139]
	071 Move V11, V0
	072 Move V12, V1
	073 Move V13, V2
	074 Move V14, V3
	075 Compare W8, 0
	076 JumpIfNotEqual {82}
	077 Move X0, 0x235D000
	078 Move X0, [X0+1440]
	079 Call 0x1C17CF4
	080 Move W8, 1
	081 Move [X21+2139], W8
	082 Move X21, 0x235D000
	083 Move X21, [X21+1440]
	084 Move V1, V9
	085 Move V2, V10
	086 Move V3, V11
	087 Move X8, [X21]
	088 Move V4, V12
	089 Move V5, V13
	090 Move V6, V14
	091 Move X8, [X8+184]
	092 Move X0, X31
	093 Move V0, [X8+20]
	094 NotImplemented "Instruction LDUR not yet implemented."
	095 Add X8, X31, 16
	096 Move [X31+8], S0
	097 Move V0, V8
	098 Move [X31], X9
	099 Call Matrix4x4.TRS, X0, X1, X2
	100 Move V0, [X31+16]
	101 Move V1, [X31+32]
	102 Move V2, [X31+48]
	103 Move V3, [X31+64]
	104 Add X8, X31, 16
	105 Add X0, X31, 80
	106 Move X1, X31
	107 Move [X31+80], V0
	108 Move [X31+88], V1
	109 Move [X31+112], V2
	110 Move [X31+120], V3
	111 Call Matrix4x4.get_inverse, X0
	112 Move X22, 0x2642000
	113 Move V0, [X31+16]
	114 Move V1, [X31+32]
	115 Move V2, [X31+48]
	116 Move V3, [X31+64]
	117 Move W8, [X22+1923]
	118 Move [X31+144], V0
	119 Move [X31+152], V1
	120 Move [X31+176], V2
	121 Move [X31+184], V3
	122 Compare W8, 0
	123 JumpIfNotEqual {129}
	124 Move X0, 0x235D000
	125 Move X0, [X0+1440]
	126 Call 0x1C17CF4
	127 Move W8, 1
	128 Move [X22+1923], W8
	129 Move X8, [X21]
	130 Move X9, [X8+184]
	131 Move W8, [X19+560]
	132 Move S13, [X9]
	133 Move S12, [X9+4]
	134 Move V11, [X9+8]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move X8, -19578880
	137 Move V14, [X8+816]
	138 Move X21, X31
	139 Move X22, X31
	140 Move W23, 32
	141 Move X0, X20
	142 Move X1, X31
	143 Call Collision.get_contacts, X0
	144 Compare X0, 0
	145 JumpIfEqual {242}
	146 Move W8, [X0+24]
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Add X0, X0, X23
	149 Move X1, X31
	150 Call ContactPoint.get_point, X0
	151 Move X0, X20
	152 Move X1, X31
	153 Move V8, V0
	154 Move V9, V1
	155 Move V10, V2
	156 Call Collision.get_contacts, X0
	157 Compare X0, 0
	158 JumpIfEqual {242}
	159 Move W8, [X0+24]
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Add X0, X0, X23
	162 Move X1, X31
	163 Call ContactPoint.get_normal, X0
	164 Move X24, [X19+552]
	165 Compare X24, 0
	166 JumpIfEqual {242}
	167 Multiply S0, S0, S14
	168 Multiply S1, S1, S14
	169 Multiply S2, S2, S14
	170 Add S8, S8, S0
	171 Add S9, S9, S1
	172 Add S10, S10, S2
	173 Add X0, X31, 144
	174 Move V0, V8
	175 Move V1, V9
	176 Move V2, V10
	177 Move X1, X31
	178 Call Matrix4x4.MultiplyPoint, X0, X1
	179 Move W8, [X24+24]
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Add X8, X24, X21
	182 Move [X8+32], S0
	183 Move [X8+40], S1
	184 Move [X8+40], S2
	185 Move X8, [X19+552]
	186 Compare X8, 0
	187 JumpIfEqual {242}
	188 Move W9, [X8+24]
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Add X8, X8, X21
	191 Move X0, X20
	192 Move X1, X31
	193 Move [X8+44], S8
	194 Move [X8+52], S9
	195 Move [X8+52], S10
	196 Call Collision.get_contacts, X0
	197 Compare X0, 0
	198 JumpIfEqual {242}
	199 Move W8, [X0+24]
	200 NotImplemented "Instruction CMP not yet implemented."
	201 Add X0, X0, X23
	202 Move X1, X31
	203 Add S13, S13, S8
	204 Add S12, S12, S9
	205 Add S11, S11, S10
	206 Call ContactPoint.get_normal, X0
	207 NotImplemented "Instruction LDRSW not yet implemented."
	208 Add X22, X22, 1
	209 Add X23, X23, 48
	210 Add X21, X21, 24
	211 NotImplemented "Instruction CMP not yet implemented."
	212 NotImplemented "Instruction SCVTF not yet implemented."
	213 NotImplemented "Instruction FDIV not yet implemented."
	214 NotImplemented "Instruction FDIV not yet implemented."
	215 NotImplemented "Instruction FDIV not yet implemented."
	216 Add X0, X31, 144
	217 Move X1, X31
	218 Move [X19+564], S0
	219 Move [X19+568], S1
	220 Move [X19+572], S2
	221 Call Matrix4x4.MultiplyPoint, X0, X1
	222 Move [X19+576], S0
	223 Move [X19+580], S1
	224 Move [X19+584], S2
	225 Move X20, [X31+320]
	226 Move X19, [X31+328]
	227 Move X22, [X31+304]
	228 Move X21, [X31+312]
	229 Move X24, [X31+288]
	230 Move X23, [X31+296]
	231 Move X29, [X31+272]
	232 Move X30, [X31+280]
	233 Move D9, [X31+256]
	234 Move D8, [X31+264]
	235 Move D11, [X31+240]
	236 Move D10, [X31+248]
	237 Move D13, [X31+224]
	238 Move D12, [X31+232]
	239 Move V14, [X31+208]
	240 Add X31, X31, 336
	241 Return 
	242 Call 0x1C17F20
	243 Call 0x1C17F28

Method: System.Void UpdateVelocities(System.Single dt)

Disassembly:
	0x01D96370 STP V0, V0, [X31 + 0x90]
	0x01D96374 STP V0, V0, [X31 + 0x70]
	0x01D96378 STP V0, V0, [X31 + 0x50]
	0x01D9637C CBZ X20, 0x1D96654
	0x01D96380 MOV X0, X20
	0x01D96384 MOV X1, X31
	0x01D96388 BL 0x3C8A33C
	0x01D9638C LDR X8, [X19 + 0x228]
	0x01D96390 STR W0, [X19 + 0x230]
	0x01D96394 CBZ X8, 0x1D96654
	0x01D96398 LDR W8, [X8 + 0x18]
	0x01D9639C MOV W1, W0
	0x01D963A0 CMP W0, W8
	0x01D963A4 B.LE 0x1D963BC
	0x01D963A8 ADRP X8, 0x2360000
	0x01D963AC LDR X8, [X8 + 0xE30]
	0x01D963B0 LDR X0, [X8]
	0x01D963B4 BL 0x1C16D6C
	0x01D963B8 STR X0, [X19 + 0x228]
	0x01D963BC LDR X0, [X19 + 0x168]
	0x01D963C0 CBZ X0, 0x1D96654
	0x01D963C4 MOV X1, X31
	0x01D963C8 BL 0x3C8EF74
	0x01D963CC LDR X0, [X19 + 0x168]
	0x01D963D0 CBZ X0, 0x1D96654
	0x01D963D4 MOV X1, X31
	0x01D963D8 MOV V8.16B, V0.16B
	0x01D963DC MOV V9.16B, V1.16B
	0x01D963E0 MOV V10.16B, V2.16B
	0x01D963E4 BL 0x3C8F0AC
	0x01D963E8 ADRP X21, 0x2642000
	0x01D963EC LDRB W8, [X21 + 0x85B]
	0x01D963F0 MOV V11.16B, V0.16B
	0x01D963F4 MOV V12.16B, V1.16B
	0x01D963F8 MOV V13.16B, V2.16B
	0x01D963FC MOV V14.16B, V3.16B
	0x01D96400 CBNZ W8, 0x1D96418
	0x01D96404 ADRP X0, 0x235D000
	0x01D96408 LDR X0, [X0 + 0x5A0]
	0x01D9640C BL 0x1C16CF4
	0x01D96410 MOVZ W8, 0x1
	0x01D96414 STRB W8, [X21 + 0x85B]
	0x01D96418 ADRP X21, 0x235D000
	0x01D9641C LDR X21, [X21 + 0x5A0]
	0x01D96420 MOV V1.16B, V9.16B
	0x01D96424 MOV V2.16B, V10.16B
	0x01D96428 MOV V3.16B, V11.16B
	0x01D9642C LDR X8, [X21]
	0x01D96430 MOV V4.16B, V12.16B
	0x01D96434 MOV V5.16B, V13.16B
	0x01D96438 MOV V6.16B, V14.16B
	0x01D9643C LDR X8, [X8 + 0xB8]
	0x01D96440 MOV X0, X31
	0x01D96444 LDR V0, [X8 + 0x14]
	0x01D96448 LDUR X9, [X8 + 0xC]
	0x01D9644C ADD X8, X31, 0x10
	0x01D96450 STR S0, [X31 + 0x8]
	0x01D96454 MOV V0.16B, V8.16B
	0x01D96458 STR X9, [X31]
	0x01D9645C BL 0x3C26FA8
	0x01D96460 LDP V0, V1, [X31 + 0x10]
	0x01D96464 LDP V2, V3, [X31 + 0x30]
	0x01D96468 ADD X8, X31, 0x10
	0x01D9646C ADD X0, X31, 0x50
	0x01D96470 MOV X1, X31
	0x01D96474 STP V0, V1, [X31 + 0x50]
	0x01D96478 STP V2, V3, [X31 + 0x70]
	0x01D9647C BL 0x3C271CC
	0x01D96480 ADRP X22, 0x2642000
	0x01D96484 LDP V0, V1, [X31 + 0x10]
	0x01D96488 LDP V2, V3, [X31 + 0x30]
	0x01D9648C LDRB W8, [X22 + 0x783]
	0x01D96490 STP V0, V1, [X31 + 0x90]
	0x01D96494 STP V2, V3, [X31 + 0xB0]
	0x01D96498 CBNZ W8, 0x1D964B0
	0x01D9649C ADRP X0, 0x235D000
	0x01D964A0 LDR X0, [X0 + 0x5A0]
	0x01D964A4 BL 0x1C16CF4
	0x01D964A8 MOVZ W8, 0x1
	0x01D964AC STRB W8, [X22 + 0x783]
	0x01D964B0 LDR X8, [X21]
	0x01D964B4 LDR X9, [X8 + 0xB8]
	0x01D964B8 LDR W8, [X19 + 0x230]
	0x01D964BC LDP S13, S12, [X9]
	0x01D964C0 LDR V11, [X9 + 0x8]
	0x01D964C4 CMP W8, 0x1
	0x01D964C8 B.LT 0x1D965F8
	0x01D964CC ADRP X8, 0xFFFFFFFFFED54000
	0x01D964D0 LDR V14, [X8 + 0x330]
	0x01D964D4 MOV X21, X31
	0x01D964D8 MOV X22, X31
	0x01D964DC MOVZ W23, 0x20
	0x01D964E0 MOV X0, X20
	0x01D964E4 MOV X1, X31
	0x01D964E8 BL 0x3C8A344
	0x01D964EC CBZ X0, 0x1D96654
	0x01D964F0 LDR W8, [X0 + 0x18]
	0x01D964F4 CMP X22, X8
	0x01D964F8 B.CS 0x1D96658
	0x01D964FC ADD X0, X0, X23
	0x01D96500 MOV X1, X31
	0x01D96504 BL 0x3C901AC
	0x01D96508 MOV X0, X20
	0x01D9650C MOV X1, X31
	0x01D96510 MOV V8.16B, V0.16B
	0x01D96514 MOV V9.16B, V1.16B
	0x01D96518 MOV V10.16B, V2.16B
	0x01D9651C BL 0x3C8A344
	0x01D96520 CBZ X0, 0x1D96654
	0x01D96524 LDR W8, [X0 + 0x18]
	0x01D96528 CMP X22, X8
	0x01D9652C B.CS 0x1D96658
	0x01D96530 ADD X0, X0, X23
	0x01D96534 MOV X1, X31
	0x01D96538 BL 0x3C901B8
	0x01D9653C LDR X24, [X19 + 0x228]
	0x01D96540 CBZ X24, 0x1D96654
	0x01D96544 FMUL S0, S0, S14
	0x01D96548 FMUL S1, S1, S14
	0x01D9654C FMUL S2, S2, S14
	0x01D96550 FADD S8, S8, S0
	0x01D96554 FADD S9, S9, S1
	0x01D96558 FADD S10, S10, S2
	0x01D9655C ADD X0, X31, 0x90
	0x01D96560 MOV V0.16B, V8.16B
	0x01D96564 MOV V1.16B, V9.16B
	0x01D96568 MOV V2.16B, V10.16B
	0x01D9656C MOV X1, X31
	0x01D96570 BL 0x3C281F8
	0x01D96574 LDR W8, [X24 + 0x18]
	0x01D96578 CMP X22, X8
	0x01D9657C B.CS 0x1D96658
	0x01D96580 ADD X8, X24, X21
	0x01D96584 STP S0, S1, [X8 + 0x20]
	0x01D96588 STR S2, [X8 + 0x28]
	0x01D9658C LDR X8, [X19 + 0x228]
	0x01D96590 CBZ X8, 0x1D96654
	0x01D96594 LDR W9, [X8 + 0x18]
	0x01D96598 CMP X22, X9
	0x01D9659C B.CS 0x1D96658
	0x01D965A0 ADD X8, X8, X21
	0x01D965A4 MOV X0, X20
	0x01D965A8 MOV X1, X31
	0x01D965AC STP S8, S9, [X8 + 0x2C]
	0x01D965B0 STR S10, [X8 + 0x34]
	0x01D965B4 BL 0x3C8A344
	0x01D965B8 CBZ X0, 0x1D96654
	0x01D965BC LDR W8, [X0 + 0x18]
	0x01D965C0 CMP X22, X8
	0x01D965C4 B.CS 0x1D96658
	0x01D965C8 ADD X0, X0, X23
	0x01D965CC MOV X1, X31
	0x01D965D0 FADD S13, S13, S8
	0x01D965D4 FADD S12, S12, S9
	0x01D965D8 FADD S11, S11, S10
	0x01D965DC BL 0x3C901B8
	0x01D965E0 LDRSW X8, [X19 + 0x230]
	0x01D965E4 ADD X22, X22, 0x1
	0x01D965E8 ADD X23, X23, 0x30
	0x01D965EC ADD X21, X21, 0x18
	0x01D965F0 CMP X22, X8
	0x01D965F4 B.LT 0x1D964E0
	0x01D965F8 SCVTF S2, W8
	0x01D965FC FDIV S0, S13, S2
	0x01D96600 FDIV S1, S12, S2
	0x01D96604 FDIV S2, S11, S2
	0x01D96608 ADD X0, X31, 0x90
	0x01D9660C MOV X1, X31
	0x01D96610 STR S0, [X19 + 0x234]
	0x01D96614 STR S1, [X19 + 0x238]
	0x01D96618 STR S2, [X19 + 0x23C]
	0x01D9661C BL 0x3C281F8
	0x01D96620 STR S0, [X19 + 0x240]
	0x01D96624 STR S1, [X19 + 0x244]
	0x01D96628 STR S2, [X19 + 0x248]
	0x01D9662C LDP X20, X19, [X31 + 0x140]
	0x01D96630 LDP X22, X21, [X31 + 0x130]
	0x01D96634 LDP X24, X23, [X31 + 0x120]
	0x01D96638 LDP X29, X30, [X31 + 0x110]
	0x01D9663C LDP D9, D8, [X31 + 0x100]
	0x01D96640 LDP D11, D10, [X31 + 0xF0]
	0x01D96644 LDP D13, D12, [X31 + 0xE0]
	0x01D96648 LDR V14, [X31 + 0xD0]
	0x01D9664C ADD X31, X31, 0x150
	0x01D96650 RET
	0x01D96654 BL 0x1C16F20
	0x01D96658 BL 0x1C16F28
	0x01D9665C STR X30, [X31 - 0x30]!
	0x01D96660 STP X22, X21, [X31 + 0x10]
	0x01D96664 STP X20, X19, [X31 + 0x20]
	0x01D96668 ADRP X22, 0x2642000
	0x01D9666C ADRP X21, 0x235D000
	0x01D96670 LDRB W8, [X22 + 0xA0E]
	0x01D96674 LDR X21, [X21 + 0x598]
	0x01D96678 MOV X19, X1
	0x01D9667C MOV X20, X0
	0x01D96680 TBNZ X8, 0x0, 0x1D966A4
	0x01D96684 ADRP X0, 0x235D000
	0x01D96688 LDR X0, [X0 + 0x5D8]
	0x01D9668C BL 0x1C16CF4
	0x01D96690 ADRP X0, 0x235D000
	0x01D96694 LDR X0, [X0 + 0x598]
	0x01D96698 BL 0x1C16CF4
	0x01D9669C MOVZ W8, 0x1
	0x01D966A0 STRB W8, [X22 + 0xA0E]
	0x01D966A4 LDR X0, [X21]
	0x01D966A8 LDR X21, [X20 + 0x150]
	0x01D966AC LDR W8, [X0 + 0xE0]
	0x01D966B0 CBNZ W8, 0x1D966B8
	0x01D966B4 BL 0x1C16DFC
	0x01D966B8 MOV X0, X21
	0x01D966BC MOV X1, X31
	0x01D966C0 MOV X2, X31
	0x01D966C4 BL 0x3C3883C
	0x01D966C8 TBNZ X0, 0x0, 0x1D96764
	0x01D966CC LDR X8, [X20 + 0x150]
	0x01D966D0 CBZ X8, 0x1D96774
	0x01D966D4 LDR X0, [X8 + 0x40]
	0x01D966D8 CBZ X0, 0x1D96764
	0x01D966DC LDRB W8, [X0 + 0x60]
	0x01D966E0 TBNZ X8, 0x1, 0x1D96764
	0x01D966E4 MOV X1, X31
	0x01D966E8 BL 0x1E93668
	0x01D966EC TBZ X0, 0x0, 0x1D96764
	0x01D966F0 ADRP X21, 0x235D000
	0x01D966F4 LDR X21, [X21 + 0x5D8]
	0x01D966F8 LDR X0, [X21]
	0x01D966FC LDR W8, [X0 + 0xE0]
	0x01D96700 CBNZ W8, 0x1D9670C
	0x01D96704 BL 0x1C16DFC
	0x01D96708 LDR X0, [X21]
	0x01D9670C CBZ X19, 0x1D96774
	0x01D96710 LDR X8, [X0 + 0xB8]
	0x01D96714 MOV X0, X19
	0x01D96718 MOV X1, X31
	0x01D9671C LDR W21, [X8 + 0x40]
	0x01D96720 BL 0x3C8A29C
	0x01D96724 CBZ X0, 0x1D96774
	0x01D96728 MOV X1, X31
	0x01D9672C BL 0x3C35734
	0x01D96730 MOV W1, W0
	0x01D96734 MOV X0, X21
	0x01D96738 MOV X2, X31
	0x01D9673C BL 0x3B23FA4
	0x01D96740 TBZ X0, 0x0, 0x1D96764
	0x01D96744 MOVZ W8, 0x1
	0x01D96748 STRB W8, [X20 + 0x180]
	0x01D9674C MOV X0, X20
	0x01D96750 MOV X1, X19
	0x01D96754 LDP X20, X19, [X31 + 0x20]
	0x01D96758 LDP X22, X21, [X31 + 0x10]
	0x01D9675C LDR X30, [X31], #0x30
	0x01D96760 B 0x1D9631C
	0x01D96764 LDP X20, X19, [X31 + 0x20]
	0x01D96768 LDP X22, X21, [X31 + 0x10]
	0x01D9676C LDR X30, [X31], #0x30
	0x01D96770 RET
	0x01D96774 BL 0x1C16F20
	0x01D96778 STR D10, [X31 - 0x30]!
	0x01D9677C STP D9, D8, [X31 + 0x8]
	0x01D96780 STR X30, [X31 + 0x18]
	0x01D96784 STP X20, X19, [X31 + 0x20]
	0x01D96788 ADRP X20, 0x2642000
	0x01D9678C LDRB W8, [X20 + 0xA11]
	0x01D96790 MOV V8.16B, V2.16B
	0x01D96794 MOV V9.16B, V1.16B
	0x01D96798 MOV V10.16B, V0.16B
	0x01D9679C MOV X19, X0
	0x01D967A0 TBNZ X8, 0x0, 0x1D967C4
	0x01D967A4 ADRP X0, 0x2360000
	0x01D967A8 LDR X0, [X0 + 0xA78]
	0x01D967AC BL 0x1C16CF4
	0x01D967B0 ADRP X0, 0x2360000
	0x01D967B4 LDR X0, [X0 + 0xE38]
	0x01D967B8 BL 0x1C16CF4
	0x01D967BC MOVZ W8, 0x1
	0x01D967C0 STRB W8, [X20 + 0xA11]
	0x01D967C4 LDRB W8, [X19 + 0x58]
	0x01D967C8 CBZ W8, 0x1D96804
	0x01D967CC STRB W31, [X19 + 0x58]
	0x01D967D0 MOV X0, X19
	0x01D967D4 MOV X1, X31
	0x01D967D8 BL 0x3C32E90
	0x01D967DC CBZ X0, 0x1D96950
	0x01D967E0 MOV V1.16B, V9.16B
	0x01D967E4 MOV V2.16B, V8.16B
	0x01D967E8 LDP X20, X19, [X31 + 0x20]
	0x01D967EC LDR X30, [X31 + 0x18]
	0x01D967F0 LDP D9, D8, [X31 + 0x8]
	0x01D967F4 MOV V0.16B, V10.16B
	0x01D967F8 MOV X1, X31
	0x01D967FC LDR V10, [X31], #0x30
	0x01D96800 B 0x3C3F62C
	0x01D96804 ADRP X20, 0x2360000
	0x01D96808 LDR X20, [X20 + 0xA78]
	0x01D9680C LDR X0, [X20]
	0x01D96810 LDR W8, [X0 + 0xE0]
	0x01D96814 CBNZ W8, 0x1D9681C
	0x01D96818 BL 0x1C16DFC
	0x01D9681C MOV X0, X19
	0x01D96820 MOV X1, X31
	0x01D96824 BL 0x1E77B08
	0x01D96828 LDR X0, [X19 + 0x38]
	0x01D9682C CBZ X0, 0x1D96950
	0x01D96830 MOV X1, X31
	0x01D96834 BL 0x1E9E538
	0x01D96838 CMP W0, 0x4
	0x01D9683C B.NE 0x1D96854
	0x01D96840 LDP X20, X19, [X31 + 0x20]
	0x01D96844 LDR X30, [X31 + 0x18]
	0x01D96848 LDP D9, D8, [X31 + 0x8]
	0x01D9684C LDR V10, [X31], #0x30
	0x01D96850 RET
	0x01D96854 LDR X0, [X19 + 0x40]
	0x01D96858 CBZ X0, 0x1D96950
	0x01D9685C MOV X1, X31
	0x01D96860 BL 0x1E94078
	0x01D96864 ANDS W31, W0, 0x7
	0x01D96868 B.EQ 0x1D968C0
	0x01D9686C TBNZ X0, 0x0, 0x1D967D0
	0x01D96870 LDR X8, [X19 + 0x38]
	0x01D96874 CBZ X8, 0x1D96950
	0x01D96878 LDR X0, [X8 + 0x50]
	0x01D9687C CBZ X0, 0x1D96950
	0x01D96880 MOV X1, X31
	0x01D96884 BL 0x1EC4D00
	0x01D96888 TBZ X0, 0x0, 0x1D96840
	0x01D9688C LDR X8, [X19 + 0x38]
	0x01D96890 CBZ X8, 0x1D96950
	0x01D96894 LDR X0, [X8 + 0x50]
	0x01D96898 MOVZ W1, 0x14
	0x01D9689C MOV X2, X31
	0x01D968A0 BL 0x1ED9318
	0x01D968A4 LDR X8, [X19 + 0x40]
	0x01D968A8 CBZ X8, 0x1D96950
	0x01D968AC LDR X8, [X8 + 0x20]
	0x01D968B0 MOV X20, X0
	0x01D968B4 CBZ X8, 0x1D96900
	0x01D968B8 LDR W0, [X8]
	0x01D968BC B 0x1D96904
	0x01D968C0 LDR X0, [X20]
	0x01D968C4 LDR X19, [X19 + 0x40]
	0x01D968C8 LDR W8, [X0 + 0xE0]
	0x01D968CC CBNZ W8, 0x1D968D4
	0x01D968D0 BL 0x1C16DFC
	0x01D968D4 ADRP X8, 0x2360000
	0x01D968D8 LDR X8, [X8 + 0xE38]
	0x01D968DC MOV X1, X19
	0x01D968E0 LDP X20, X19, [X31 + 0x20]
	0x01D968E4 LDR X30, [X31 + 0x18]
	0x01D968E8 LDR X0, [X8]
	0x01D968EC LDP D9, D8, [X31 + 0x8]
	0x01D968F0 MOVZ W2, 0x7
	0x01D968F4 MOV X3, X31
	0x01D968F8 LDR V10, [X31], #0x30
	0x01D968FC B 0x1E77B00
	0x01D96900 MOV X0, X31
	0x01D96904 LDR W1, [X19 + 0x68]
	0x01D96908 MOVZ W2, 0x8
	0x01D9690C MOV X3, X31
	0x01D96910 BL 0x1E9C23C
	0x01D96914 STUR X0, [X20 + 0x1C]
	0x01D96918 STP S10, S9, [X20 + 0x24]
	0x01D9691C STR S8, [X20 + 0x2C]
	0x01D96920 CBZ X20, 0x1D96950
	0x01D96924 MOVZ W8, 0xA0
	0x01D96928 STR W8, [X20 + 0xC]
	0x01D9692C LDR X0, [X19 + 0x38]
	0x01D96930 CBZ X0, 0x1D96950
	0x01D96934 MOV X1, X20
	0x01D96938 LDP X20, X19, [X31 + 0x20]
	0x01D9693C LDR X30, [X31 + 0x18]
	0x01D96940 LDP D9, D8, [X31 + 0x8]
	0x01D96944 MOV X2, X31
	0x01D96948 LDR V10, [X31], #0x30
	0x01D9694C B 0x1EA1E24
	0x01D96950 BL 0x1C16F20
	0x01D96954 STP X30, X21, [X31 - 0x20]!
	0x01D96958 STP X20, X19, [X31 + 0x10]
	0x01D9695C ADRP X21, 0x2642000
	0x01D96960 LDRB W8, [X21 + 0xA12]
	0x01D96964 MOV X20, X1
	0x01D96968 MOV X19, X0
	0x01D9696C TBNZ X8, 0x0, 0x1D96984
	0x01D96970 ADRP X0, 0x2360000
	0x01D96974 LDR X0, [X0 + 0xE40]
	0x01D96978 BL 0x1C16CF4
	0x01D9697C MOVZ W8, 0x1
	0x01D96980 STRB W8, [X21 + 0xA12]
	0x01D96984 LDR X0, [X19 + 0x38]
	0x01D96988 CBZ X0, 0x1D969D4
	0x01D9698C ADRP X21, 0x2360000
	0x01D96990 LDR X21, [X21 + 0xE40]
	0x01D96994 MOV X1, X31
	0x01D96998 BL 0x1E9EA20
	0x01D9699C LDR X8, [X21]
	0x01D969A0 MOV X21, X0
	0x01D969A4 LDR W9, [X8 + 0xE0]
	0x01D969A8 CBNZ W9, 0x1D969B4
	0x01D969AC MOV X0, X8
	0x01D969B0 BL 0x1C16DFC
	0x01D969B4 CMP W20, W21
	0x01D969B8 B.NE 0x1D969C8
	0x01D969BC MOVZ W8, 0x1
	0x01D969C0 STRB W8, [X19 + 0x1B8]
	0x01D969C4 STRB W8, [X19 + 0x1BA]
	0x01D969C8 LDP X20, X19, [X31 + 0x10]
	0x01D969CC LDP X30, X21, [X31], #0x20
	0x01D969D0 RET
	0x01D969D4 BL 0x1C16F20
	0x01D969D8 STP X30, X21, [X31 - 0x20]!
	0x01D969DC STP X20, X19, [X31 + 0x10]
	0x01D969E0 ADRP X21, 0x2642000
	0x01D969E4 LDRB W8, [X21 + 0xA13]
	0x01D969E8 MOV X20, X1
	0x01D969EC MOV X19, X0
	0x01D969F0 TBNZ X8, 0x0, 0x1D96A08
	0x01D969F4 ADRP X0, 0x2360000
	0x01D969F8 LDR X0, [X0 + 0xE40]
	0x01D969FC BL 0x1C16CF4
	0x01D96A00 MOVZ W8, 0x1
	0x01D96A04 STRB W8, [X21 + 0xA13]
	0x01D96A08 LDR X0, [X19 + 0x38]
	0x01D96A0C CBZ X0, 0x1D96A54
	0x01D96A10 ADRP X21, 0x2360000
	0x01D96A14 LDR X21, [X21 + 0xE40]
	0x01D96A18 MOV X1, X31
	0x01D96A1C BL 0x1E9EA20
	0x01D96A20 LDR X8, [X21]
	0x01D96A24 MOV X21, X0
	0x01D96A28 LDR W9, [X8 + 0xE0]
	0x01D96A2C CBNZ W9, 0x1D96A38
	0x01D96A30 MOV X0, X8
	0x01D96A34 BL 0x1C16DFC
	0x01D96A38 CMP W20, W21
	0x01D96A3C B.NE 0x1D96A48
	0x01D96A40 MOVZ W8, 0x1
	0x01D96A44 STRB W8, [X19 + 0x1B8]
	0x01D96A48 LDP X20, X19, [X31 + 0x10]
	0x01D96A4C LDP X30, X21, [X31], #0x20
	0x01D96A50 RET
	0x01D96A54 BL 0x1C16F20
	0x01D96A58 STR X30, [X31 - 0x30]!
	0x01D96A5C STP X22, X21, [X31 + 0x10]
	0x01D96A60 STP X20, X19, [X31 + 0x20]
	0x01D96A64 ADRP X22, 0x2642000
	0x01D96A68 ADRP X21, 0x2360000
	0x01D96A6C LDRB W8, [X22 + 0xA14]
	0x01D96A70 LDR X21, [X21 + 0xE30]
	0x01D96A74 MOV X19, X0
	0x01D96A78 ADD X20, X0, 0x24C
	0x01D96A7C TBNZ X8, 0x0, 0x1D96A94
	0x01D96A80 ADRP X0, 0x2360000
	0x01D96A84 LDR X0, [X0 + 0xE30]
	0x01D96A88 BL 0x1C16CF4
	0x01D96A8C MOVZ W8, 0x1
	0x01D96A90 STRB W8, [X22 + 0xA14]
	0x01D96A94 MOVZ X10, 0x3F800000
	0x01D96A98 MOVZ W8, 0x1
	0x01D96A9C MOVZ W9, 0x101
	0x01D96AA0 MOVK X10, 0x7
	0x01D96AA4 STRB W8, [X19 + 0x88]
	0x01D96AA8 STRH W9, [X19 + 0x8A]
	0x01D96AAC STURH W9, [X19 + 0x8D]
	0x01D96AB0 STR X10, [X19 + 0xB8]
	0x01D96AB4 STRB W8, [X19 + 0xC0]
	0x01D96AB8 LDR X0, [X21]
	0x01D96ABC MOVZ W1, 0xA
	0x01D96AC0 BL 0x1C16D6C
	0x01D96AC4 ADRP X8, 0xFFFFFFFFFED55000
	0x01D96AC8 ADRP X9, 0xFFFFFFFFFED58000
	0x01D96ACC LDR V0, [X8 + 0x5A]
	0x01D96AD0 LDR V1, [X9 + 0x360]
	0x01D96AD4 STR X0, [X19 + 0x228]
	0x01D96AD8 MOV X0, X19
	0x01D96ADC STR V0, [X20]
	0x01D96AE0 STR D1, [X20 + 0x10]
	0x01D96AE4 LDP X20, X19, [X31 + 0x20]
	0x01D96AE8 LDP X22, X21, [X31 + 0x10]
	0x01D96AEC MOV X1, X31
	0x01D96AF0 LDR X30, [X31], #0x30
	0x01D96AF4 B 0x1E74F04
	0x01D96AF8 STR X30, [X31 - 0x30]!
	0x01D96AFC STP X22, X21, [X31 + 0x10]
	0x01D96B00 STP X20, X19, [X31 + 0x20]
	0x01D96B04 ADRP X21, 0x2642000
	0x01D96B08 ADRP X22, 0x2360000
	0x01D96B0C ADRP X19, 0x2360000
	0x01D96B10 ADRP X20, 0x2360000
	0x01D96B14 LDRB W8, [X21 + 0xA15]
	0x01D96B18 LDR X22, [X22 + 0xE48]
	0x01D96B1C LDR X19, [X19 + 0xE50]
	0x01D96B20 LDR X20, [X20 + 0xD18]
	0x01D96B24 TBNZ X8, 0x0, 0x1D96B54
	0x01D96B28 ADRP X0, 0x2360000
	0x01D96B2C LDR X0, [X0 + 0xD18]
	0x01D96B30 BL 0x1C16CF4
	0x01D96B34 ADRP X0, 0x2360000
	0x01D96B38 LDR X0, [X0 + 0xE50]
	0x01D96B3C BL 0x1C16CF4
	0x01D96B40 ADRP X0, 0x2360000
	0x01D96B44 LDR X0, [X0 + 0xE48]
	0x01D96B48 BL 0x1C16CF4
	0x01D96B4C MOVZ W8, 0x1
	0x01D96B50 STRB W8, [X21 + 0xA15]
	0x01D96B54 LDR X0, [X22]
	0x01D96B58 BL 0x1C16F10
	0x01D96B5C LDR X1, [X19]
	0x01D96B60 MOV X19, X0
	0x01D96B64 BL 0x2DBDE08
	0x01D96B68 LDR X8, [X20]
	0x01D96B6C LDP X22, X21, [X31 + 0x10]
	0x01D96B70 LDR X8, [X8 + 0xB8]
	0x01D96B74 STR X19, [X8]
	0x01D96B78 LDP X20, X19, [X31 + 0x20]
	0x01D96B7C LDR X30, [X31], #0x30
	0x01D96B80 RET
	0x01D96B84 SUB X31, X31, 0x70
	0x01D96B88 STR X30, [X31 + 0x50]
	0x01D96B8C STP X20, X19, [X31 + 0x60]
	0x01D96B90 MRS X20, 0xC000
	0x01D96B94 LDR X8, [X20 + 0x28]
	0x01D96B98 MOV X19, X0
	0x01D96B9C STR X8, [X31 + 0x48]
	0x01D96BA0 LDR X1, [X0 + 0xF0]
	0x01D96BA4 BL 0x1D8E8F0
	0x01D96BA8 LDR X1, [X19 + 0xF8]
	0x01D96BAC MOV X0, X19
	0x01D96BB0 BL 0x1D8E950
	0x01D96BB4 ADD X8, X19, 0x100
	0x01D96BB8 LDUR V0, [X8 + 0xC]
	0x01D96BBC LDR V1, [X19 + 0x10]
	0x01D96BC0 ADD X1, X31, 0x20
	0x01D96BC4 MOV X0, X19
	0x01D96BC8 STUR V0, [X31 + 0x2C]
	0x01D96BCC STR V1, [X31 + 0x2]
	0x01D96BD0 BL 0x1D8EA1C
	0x01D96BD4 LDRB W1, [X19 + 0x11C]
	0x01D96BD8 MOV X0, X19
	0x01D96BDC BL 0x1D8EAF8
	0x01D96BE0 LDR W1, [X19 + 0x120]
	0x01D96BE4 MOV X0, X19
	0x01D96BE8 BL 0x1D8EBBC
	0x01D96BEC ADD X8, X19, 0x124
	0x01D96BF0 LDP V1, V0, [X8]
	0x01D96BF4 ADD X1, X31, 0x0
	0x01D96BF8 MOV X0, X19
	0x01D96BFC STP V1, V0, [X31]
	0x01D96C00 BL 0x1D8EC84
	0x01D96C04 LDR W1, [X19 + 0x144]
	0x01D96C08 MOV X0, X19
	0x01D96C0C BL 0x1D8ED4C
	0x01D96C10 LDR X8, [X20 + 0x28]
	0x01D96C14 LDR X9, [X31 + 0x48]
	0x01D96C18 CMP X8, X9
	0x01D96C1C B.NE 0x1D96C30
	0x01D96C20 LDP X20, X19, [X31 + 0x60]
	0x01D96C24 LDR X30, [X31 + 0x50]
	0x01D96C28 ADD X31, X31, 0x70
	0x01D96C2C RET
	0x01D96C30 BL 0x3EB1B20
	0x01D96C34 SUB X31, X31, 0x70
	0x01D96C38 STR X30, [X31 + 0x50]
	0x01D96C3C STP X20, X19, [X31 + 0x60]
	0x01D96C40 MRS X20, 0xC000
	0x01D96C44 LDR X8, [X20 + 0x28]
	0x01D96C48 MOV X19, X0
	0x01D96C4C STR X8, [X31 + 0x48]
	0x01D96C50 BL 0x1D896B8
	0x01D96C54 STR X0, [X19 + 0xF0]
	0x01D96C58 MOV X0, X19
	0x01D96C5C BL 0x1D8E6F8
	0x01D96C60 STR X0, [X19 + 0xF8]
	0x01D96C64 ADD X8, X31, 0x28
	0x01D96C68 MOV X0, X19
	0x01D96C6C BL 0x1D8E9B0
	0x01D96C70 LDUR V0, [X31 + 0x34]
	0x01D96C74 LDUR V1, [X31 + 0x28]
	0x01D96C78 ADD X8, X19, 0x100
	0x01D96C7C MOV X0, X19
	0x01D96C80 STUR V0, [X8 + 0xC]
	0x01D96C84 STR V1, [X19 + 0x10]
	0x01D96C88 BL 0x1D8EA90
	0x01D96C8C AND W8, W0, 0x1
	0x01D96C90 MOV X0, X19
	0x01D96C94 STRB W8, [X19 + 0x11C]

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+128], D15
	003 Move [X31+136], D14
	004 Move [X31+144], D13
	005 Move [X31+152], D12
	006 Move [X31+160], D11
	007 Move [X31+168], D10
	008 Move [X31+176], D9
	009 Move [X31+184], D8
	010 Move [X31+192], X30
	011 Move [X31+200], X23
	012 Move [X31+208], X22
	013 Move [X31+216], X21
	014 Move [X31+224], X20
	015 Move [X31+232], X19
	016 Move X20, 0x2643000
	017 Move W8, [X20+2576]
	018 Move V8, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0x235E000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0x2360000
	028 Move X0, [X0+1992]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+2576], W8
	032 Move X21, 0x2643000
	033 Move W8, [X21+1923]
	034 Move [X31+112], X31
	035 Move [X31+120], X31
	036 Compare W8, 0
	037 JumpIfNotEqual {43}
	038 Move X0, 0x235E000
	039 Move X0, [X0+1440]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X21+1923], W8
	043 Move X22, 0x235E000
	044 Move X22, [X22+1440]
	045 Move V0, [X19+388]
	046 Move V1, [X19+392]
	047 Move V2, [X19+396]
	048 Move X8, [X22]
	049 Move X8, [X8+184]
	050 Move S9, [X8]
	051 Move S10, [X8+4]
	052 Move V11, [X8+8]
	053 Move X8, -19578880
	054 Move V12, [X8+3872]
	055 Subtract S0, S0, S9
	056 Subtract S1, S1, S10
	057 Multiply S0, S0, S0
	058 Multiply S1, S1, S1
	059 Add S0, S0, S1
	060 Subtract S1, S2, S11
	061 Multiply S1, S1, S1
	062 Add S0, S1, S0
	063 NotImplemented "Instruction FCMP not yet implemented."
	064 Move X0, [X19+360]
	065 Compare X0, 0
	066 JumpIfEqual {677}
	067 Move V2, [X19+396]
	068 Move V1, [X19+392]
	069 Move V0, [X19+388]
	070 Move W1, 2
	071 Move X2, X31
	072 Add X20, X19, 388
	073 Call Rigidbody.AddForce, X0, X1, X2
	074 Move V9, [X19+388]
	075 Move V10, [X19+392]
	076 Move W8, [X21+1923]
	077 Move V11, [X19+396]
	078 Compare W8, 0
	079 JumpIfNotEqual {85}
	080 Move X0, 0x235E000
	081 Move X0, [X0+1440]
	082 Call 0x1C17CF4
	083 Move W8, 1
	084 Move [X21+1923], W8
	085 Move X8, [X22]
	086 Move X8, [X8+184]
	087 Move V0, [X8]
	088 Move V1, [X8+8]
	089 Move [X20], D0
	090 Move [X19+396], S1
	091 Move X23, 0x235E000
	092 Move X23, [X23+1432]
	093 Move X20, [X19+336]
	094 Move X0, [X23]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move X0, X20
	100 Move X1, X31
	101 Move X2, X31
	102 Call Object.op_Equality, X0, X1
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfEqual {661}
	107 Move X8, [X19+336]
	108 Compare X8, 0
	109 JumpIfEqual {677}
	110 Move X0, [X8+64]
	111 Compare X0, 0
	112 JumpIfEqual {661}
	113 Move W8, [X0+96]
	114 Move TEMP, X8
	115 And TEMP, TEMP, 2
	116 Compare TEMP, 2
	117 JumpIfEqual {661}
	118 Move X1, X31
	119 Call NetworkObject.get_HasStateAuthority, X0
	120 Move TEMP, X0
	121 And TEMP, TEMP, 1
	122 Compare TEMP, 1
	123 JumpIfNotEqual {661}
	124 Move X0, [X23]
	125 Move X20, [X19+424]
	126 Move W8, [X0+224]
	127 Compare W8, 0
	128 JumpIfNotEqual {130}
	129 Call 0x1C17DFC
	130 Move X0, X20
	131 Move X1, X31
	132 Move X2, X31
	133 Call Object.op_Inequality, X0, X1
	134 Move TEMP, X0
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfNotEqual {178}
	138 Move X0, X19
	139 Call GrabbableItem.UpdateTransformFromStuckAnchor, X0
	140 Move W8, [X21+1923]
	141 Move X20, [X19+360]
	142 Compare W8, 0
	143 JumpIfNotEqual {149}
	144 Move X0, 0x235E000
	145 Move X0, [X0+1440]
	146 Call 0x1C17CF4
	147 Move W8, 1
	148 Move [X21+1923], W8
	149 Compare X20, 0
	150 JumpIfEqual {677}
	151 Move X8, [X22]
	152 Move X0, X20
	153 Move X1, X31
	154 Move X8, [X8+184]
	155 Move S1, [X8+4]
	156 Move S2, [X8+8]
	157 Move V0, [X8]
	158 Call Rigidbody.set_velocity, X0, X1
	159 Move W8, [X21+1923]
	160 Move X20, [X19+360]
	161 Compare W8, 0
	162 JumpIfNotEqual {168}
	163 Move X0, 0x235E000
	164 Move X0, [X0+1440]
	165 Call 0x1C17CF4
	166 Move W8, 1
	167 Move [X21+1923], W8
	168 Compare X20, 0
	169 JumpIfEqual {677}
	170 Move X8, [X22]
	171 Move X0, X20
	172 Move X1, X31
	173 Move X8, [X8+184]
	174 Move S1, [X8+4]
	175 Move S2, [X8+8]
	176 Move V0, [X8]
	177 Call Rigidbody.set_angularVelocity, X0, X1
	178 Move X0, [X23]
	179 Move X20, [X19+376]
	180 Move W8, [X0+224]
	181 Compare W8, 0
	182 JumpIfNotEqual {184}
	183 Call 0x1C17DFC
	184 Move X0, X20
	185 Move X1, X31
	186 Move X2, X31
	187 Call Object.op_Inequality, X0, X1
	188 Move TEMP, X0
	189 And TEMP, TEMP, 1
	190 Compare TEMP, 1
	191 JumpIfNotEqual {660}
	192 Move W8, [X21+1923]
	193 Compare W8, 0
	194 JumpIfNotEqual {200}
	195 Move X0, 0x235E000
	196 Move X0, [X0+1440]
	197 Call 0x1C17CF4
	198 Move W8, 1
	199 Move [X21+1923], W8
	200 Move X8, [X22]
	201 Move X8, [X8+184]
	202 Move S0, [X8]
	203 Move S1, [X8+4]
	204 Move V2, [X8+8]
	205 Subtract S0, S9, S0
	206 Subtract S1, S10, S1
	207 Subtract S2, S11, S2
	208 Multiply S0, S0, S0
	209 Multiply S1, S1, S1
	210 Add S0, S0, S1
	211 Multiply S1, S2, S2
	212 Add S0, S1, S0
	213 NotImplemented "Instruction FCMP not yet implemented."
	214 Move X20, 0x2360000
	215 Move X20, [X20+1992]
	216 Move X0, [X20]
	217 Move W8, [X0+224]
	218 Compare W8, 0
	219 JumpIfNotEqual {221}
	220 Call 0x1C17DFC
	221 Move X23, 0x2643000
	222 Move W8, [X23+2141]
	223 Compare W8, 0
	224 JumpIfNotEqual {230}
	225 Move X0, 0x2360000
	226 Move X0, [X0+1992]
	227 Call 0x1C17CF4
	228 Move W8, 1
	229 Move [X23+2141], W8
	230 Move X0, [X20]
	231 Move W8, [X0+224]
	232 Compare W8, 0
	233 JumpIfNotEqual {236}
	234 Call 0x1C17DFC
	235 Move X0, [X20]
	236 Move X8, [X0+184]
	237 Move X0, [X8]
	238 Compare X0, 0
	239 JumpIfEqual {677}
	240 Move V0, V9
	241 Move V1, V10
	242 Move V2, V11
	243 Move X1, X31
	244 Call PlayerController.AddExternalForce, X0, X1
	245 Move X0, [X19+376]
	246 Compare X0, 0
	247 JumpIfEqual {677}
	248 Move X1, X31
	249 Call Component.get_transform, X0
	250 Compare X0, 0
	251 JumpIfEqual {677}
	252 Move X1, X31
	253 Move X20, X0
	254 Call Transform.get_position, X0
	255 Move X0, X20
	256 Move X1, X31
	257 Move V9, V0
	258 Move V10, V1
	259 Move [X31+100], S2
	260 Call Transform.get_rotation, X0
	261 Move X0, [X19+360]
	262 Compare X0, 0
	263 JumpIfEqual {677}
	264 Move X1, X31
	265 Move V12, V0
	266 Move V13, V1
	267 Move V14, V2
	268 Move V15, V3
	269 Call Rigidbody.get_position, X0
	270 Move X0, [X19+360]
	271 Compare X0, 0
	272 JumpIfEqual {677}
	273 Subtract S11, S9, S0
	274 Move V0, [X31+100]
	275 Subtract S3, S10, S1
	276 Move X1, X31
	277 Subtract S0, S0, S2
	278 Move [X31+92], S0
	279 Move [X31+100], S3
	280 Call Rigidbody.get_rotation, X0
	281 Move X0, X31
	282 Call Quaternion.Inverse, X0
	283 Multiply S4, S15, S0
	284 Multiply S5, S12, S3
	285 Multiply S6, S15, S1
	286 Multiply S7, S13, S3
	287 Add S4, S4, S5
	288 Multiply S5, S15, S2
	289 Add S6, S6, S7
	290 Multiply S7, S14, S3
	291 Multiply S3, S15, S3
	292 Add S5, S5, S7
	293 Multiply S7, S12, S0
	294 Subtract S3, S3, S7
	295 Multiply S7, S13, S2
	296 Add S4, S7, S4
	297 Multiply S7, S14, S0
	298 Add S6, S7, S6
	299 Multiply S7, S12, S1
	300 Add S5, S7, S5
	301 Multiply S7, S14, S1
	302 Multiply S1, S13, S1
	303 Subtract S3, S3, S1
	304 Multiply S1, S12, S2
	305 Multiply S16, S13, S0
	306 Multiply S17, S14, S2
	307 Subtract S0, S4, S7
	308 Subtract S1, S6, S1
	309 Subtract S2, S5, S16
	310 Subtract S3, S3, S17
	311 Add X0, X31, 112
	312 Add X1, X31, 124
	313 Move X2, X31
	314 Call Quaternion.Internal_ToAxisAngleRad, X0, X1, X2
	315 Move X8, -19574784
	316 Move S3, [X31+120]
	317 Move S0, [X31+124]
	318 Move V5, [X8+1096]
	319 Move S1, [X31+112]
	320 Move S2, [X31+116]
	321 Move X8, -19574784
	322 Move V4, [X8+260]
	323 Multiply S0, S0, S5
	324 Move [X31+124], S0
	325 Move W8, [X19+384]
	326 Multiply S1, S0, S1
	327 Multiply S2, S0, S2
	328 Multiply S0, S0, S3
	329 Multiply S3, S1, S4
	330 Multiply S1, S2, S4
	331 Multiply S0, S0, S4
	332 Move [X31+104], S3
	333 Move [X31+112], S1
	334 Move [X31+88], S0
	335 Compare W8, 0
	336 JumpIfEqual {416}
	337 Move [X31+20], S5
	338 Move [X31+84], S4
	339 Move V4, [X19+576]
	340 Move V5, [X19+580]
	341 Move V6, [X19+584]
	342 Move V0, V12
	343 Move V1, V13
	344 Move V2, V14
	345 Move V3, V15
	346 Move X0, X31
	347 Move [X31+76], S10
	348 Move [X31+84], S9
	349 Call Quaternion.op_Multiply, X0, X1
	350 Move X0, [X19+360]
	351 Move [X31+68], S1
	352 Move [X31+76], S0
	353 Move [X31+64], S2
	354 Compare X0, 0
	355 JumpIfEqual {677}
	356 Move V12, [X19+564]
	357 Move V13, [X19+568]
	358 Move V15, [X19+572]
	359 Move X1, X31
	360 Call Rigidbody.get_position, X0
	361 Move X0, [X19+360]
	362 Compare X0, 0
	363 JumpIfEqual {677}
	364 Move X1, X31
	365 Move V14, V0
	366 Move V9, V1
	367 Move V10, V2
	368 Call Rigidbody.get_position, X0
	369 Move X23, 0x2643000
	370 Move W8, [X23+1925]
	371 Move [X31+28], S1
	372 Move [X31+36], S0
	373 Move [X31+24], S2
	374 Compare W8, 0
	375 JumpIfNotEqual {381}
	376 Move X0, 0x235E000
	377 Move X0, [X0+1448]
	378 Call 0x1C17CF4
	379 Move W8, 1
	380 Move [X23+1925], W8
	381 Move X20, 0x235E000
	382 Move X20, [X20+1448]
	383 Subtract S2, S12, S14
	384 Subtract S9, S13, S9
	385 Subtract S14, S15, S10
	386 Move X0, [X20]
	387 Move W8, [X0+224]
	388 Compare W8, 0
	389 JumpIfNotEqual {393}
	390 Move V10, V2
	391 Call 0x1C17DFC
	392 Move V2, V10
	393 Multiply S0, S2, S2
	394 Multiply S1, S9, S9
	395 Move X8, -19574784
	396 Add S0, S0, S1
	397 Move V10, [X8+380]
	398 Multiply S1, S14, S14
	399 Add S0, S1, S0
	400 Move V1, V9
	401 Move V9, [X31+80]
	402 Move [X31+52], S0
	403 Move [X31+60], S15
	404 NotImplemented "Instruction FSQRT not yet implemented."
	405 NotImplemented "Instruction FCMP not yet implemented."
	406 Move [X31+60], S12
	407 Move [X31+12], S1
	408 Move [X31+20], S14
	409 Move [X31+8], S2
	410 Move [X31+36], S13
	411 NotImplemented "Instruction FDIV not yet implemented."
	412 NotImplemented "Instruction FDIV not yet implemented."
	413 Move [X31+44], S1
	414 Move [X31+52], S2
	415 NotImplemented "Instruction FDIV not yet implemented."
	416 Move S14, [X31+92]
	417 Move S13, [X31+96]
	418 Move V15, [X31+88]
	419 Move W8, [X21+1923]
	420 Compare W8, 0
	421 JumpIfNotEqual {427}
	422 Move X0, 0x235E000
	423 Move X0, [X0+1440]
	424 Call 0x1C17CF4
	425 Move W8, 1
	426 Move [X21+1923], W8
	427 Move X8, [X22]
	428 Move X8, [X8+184]
	429 Move V1, [X8]
	430 Move V0, [X8+4]
	431 Move [X31+44], S0
	432 Move [X31+52], S1
	433 Move V0, [X8+8]
	434 Move [X31+40], S0
	435 Move S1, [X31+68]
	436 Move S0, [X31+72]
	437 Move W8, [X23+1925]
	438 Add S12, S9, S0
	439 Move V0, [X31+76]
	440 Add S15, S0, S1
	441 Move V0, [X31+100]
	442 Move V1, [X31+64]
	443 Add S13, S0, S1
	444 Compare W8, 0
	445 JumpIfNotEqual {451}
	446 Move X0, 0x235E000
	447 Move X0, [X0+1448]
	448 Call 0x1C17CF4
	449 Move W8, 1
	450 Move [X23+1925], W8
	451 Move V0, [X31+32]
	452 Move X0, [X20]
	453 Subtract S2, S12, S0
	454 Move V0, [X31+28]
	455 Move W8, [X0+224]
	456 Move [X31+80], S2
	457 Subtract S3, S15, S0
	458 Move V0, [X31+24]
	459 Subtract S9, S13, S0
	460 Compare W8, 0
	461 JumpIfNotEqual {468}
	462 Move V14, V11
	463 Move V11, V3
	464 Call 0x1C17DFC
	465 Move V2, [X31+80]
	466 Move V3, V11
	467 Move V11, V14
	468 Multiply S0, S2, S2
	469 Multiply S1, S3, S3
	470 Add S0, S0, S1
	471 Multiply S1, S9, S9
	472 Add S4, S1, S0
	473 NotImplemented "Instruction FSQRT not yet implemented."
	474 NotImplemented "Instruction FCMP not yet implemented."
	475 Move [X31+76], S9
	476 NotImplemented "Instruction FDIV not yet implemented."
	477 NotImplemented "Instruction FDIV not yet implemented."
	478 NotImplemented "Instruction FDIV not yet implemented."
	479 Move W8, [X21+1923]
	480 Compare W8, 0
	481 JumpIfNotEqual {491}
	482 Move X0, 0x235E000
	483 Move X0, [X0+1440]
	484 Move V9, V3
	485 Move V10, V4
	486 Call 0x1C17CF4
	487 Move V4, V10
	488 Move V3, V9
	489 Move W8, 1
	490 Move [X21+1923], W8
	491 Move X8, [X22]
	492 Move X8, [X8+184]
	493 Move S2, [X8]
	494 Move S10, [X8+4]
	495 Move V9, [X8+8]
	496 Move X21, 0x2643000
	497 Move W8, [X21+2596]
	498 Move [X31+100], S11
	499 Compare W8, 0
	500 JumpIfNotEqual {516}
	501 Move X0, 0x235E000
	502 Move X0, [X0+1448]
	503 Move V11, V3
	504 Move V14, V4
	505 Move [X31+72], S15
	506 Move V15, V13
	507 Move V13, V2
	508 Call 0x1C17CF4
	509 Move V2, V13
	510 Move V13, V15
	511 Move V15, [X31+72]
	512 Move V4, V14
	513 Move V3, V11
	514 Move W8, 1
	515 Move [X21+2596], W8
	516 Move V0, [X31+60]
	517 Move X0, [X20]
	518 Subtract S5, S12, S0
	519 Move V0, [X31+36]
	520 Move W8, [X0+224]
	521 Move S12, 0.5
	522 Subtract S6, S15, S0
	523 Move V0, [X31+56]
	524 Subtract S7, S13, S0
	525 Move S0, [X31+40]
	526 Move S1, [X31+44]
	527 Multiply S14, S0, S10
	528 Multiply S15, S0, S2
	529 Move V0, [X31+48]
	530 Multiply S11, S1, S9
	531 Multiply S13, S0, S9
	532 Multiply S9, S0, S10
	533 Multiply S10, S1, S2
	534 Compare W8, 0
	535 JumpIfNotEqual {547}
	536 Move [X31+68], S4
	537 Move [X31+76], S3
	538 Move [X31+60], S6
	539 Move [X31+68], S5
	540 Move [X31+56], S7
	541 Call 0x1C17DFC
	542 Move S7, [X31+56]
	543 Move S6, [X31+60]
	544 Move S5, [X31+64]
	545 Move S4, [X31+68]
	546 Move V3, [X31+72]
	547 Move V0, [X31+52]
	548 Move X8, -19578880
	549 Move V1, [X8+4072]
	550 Multiply S5, S5, S12
	551 Multiply S6, S6, S12
	552 Multiply S7, S7, S12
	553 Subtract S2, S11, S14
	554 Subtract S12, S15, S13
	555 Move S13, [X31+96]
	556 Move S11, [X31+100]
	557 Move S15, [X31+88]
	558 Move S14, [X31+92]
	559 Multiply S0, S0, S4
	560 NotImplemented "Instruction FSQRT not yet implemented."
	561 Subtract S10, S9, S10
	562 NotImplemented "Instruction FCMP not yet implemented."
	563 Move S1, W31
	564 Move [X31+68], S5
	565 Move [X31+76], S2
	566 Move V1, [X31+8]
	567 Move S4, [X31+76]
	568 Move S2, [X31+80]
	569 Move X0, [X20]
	570 Move [X31+60], S7
	571 Move [X31+68], S6
	572 Multiply S1, S1, S2
	573 Move V2, [X31+12]
	574 Move W8, [X0+224]
	575 Multiply S2, S2, S3
	576 Move V3, [X31+16]
	577 Add S1, S1, S2
	578 Move S2, -1
	579 Multiply S3, S3, S4
	580 Add S1, S3, S1
	581 NotImplemented "Instruction FDIV not yet implemented."
	582 Move S1, 1
	583 NotImplemented "Instruction FMIN not yet implemented."
	584 NotImplemented "Instruction FCMP not yet implemented."
	585 NotImplemented "Instruction FCSEL not yet implemented."
	586 Compare W8, 0
	587 JumpIfNotEqual {589}
	588 Call 0x1C17DFC
	589 NotImplemented "Instruction FCVT not yet implemented."
	590 Call 0x3EB2B80
	591 Move V1, [X31+20]
	592 Move S5, [X31+68]
	593 Move S2, [X31+72]
	594 Move S7, [X31+60]
	595 Move S6, [X31+64]
	596 NotImplemented "Instruction INVALID not yet implemented."
	597 Multiply S1, S0, S1
	598 Move V4, [X31+84]
	599 Multiply S0, S2, S1
	600 Multiply S2, S12, S1
	601 Multiply S1, S10, S1
	602 Move S3, 0.5
	603 Multiply S0, S0, S4
	604 Multiply S2, S2, S4
	605 Multiply S1, S1, S4
	606 Multiply S0, S0, S3
	607 Multiply S2, S2, S3
	608 Multiply S1, S1, S3
	609 Move V3, [X31+104]
	610 Subtract S11, S11, S5
	611 Subtract S13, S13, S6
	612 Subtract S14, S14, S7
	613 Subtract S3, S3, S0
	614 Move V0, [X31+108]
	615 Subtract S15, S15, S1
	616 Subtract S0, S0, S2
	617 Move [X31+104], S3
	618 Move [X31+112], S0
	619 Move X20, [X19+360]
	620 Compare X20, 0
	621 JumpIfEqual {677}
	622 Move S9, 0.5
	623 NotImplemented "Instruction FDIV not yet implemented."
	624 NotImplemented "Instruction FDIV not yet implemented."
	625 NotImplemented "Instruction FDIV not yet implemented."
	626 Move X0, X20
	627 Move X1, X31
	628 Multiply S10, S0, S9
	629 Multiply S11, S1, S9
	630 Multiply S12, S2, S9
	631 Call Rigidbody.get_velocity, X0
	632 Subtract S0, S12, S0
	633 Subtract S1, S11, S1
	634 Subtract S2, S10, S2
	635 Move W1, 2
	636 Move X0, X20
	637 Move X2, X31
	638 Call Rigidbody.AddForce, X0, X1, X2
	639 Move X20, [X19+360]
	640 Compare X20, 0
	641 JumpIfEqual {677}
	642 Move S0, [X31+104]
	643 Move S1, [X31+108]
	644 NotImplemented "Instruction FDIV not yet implemented."
	645 Move X0, X20
	646 Move X1, X31
	647 NotImplemented "Instruction FDIV not yet implemented."
	648 NotImplemented "Instruction FDIV not yet implemented."
	649 Multiply S8, S0, S9
	650 Multiply S10, S1, S9
	651 Multiply S9, S2, S9
	652 Call Rigidbody.get_angularVelocity, X0
	653 Subtract S0, S8, S0
	654 Subtract S1, S10, S1
	655 Subtract S2, S9, S2
	656 Move W1, 2
	657 Move X0, X20
	658 Move X2, X31
	659 Call Rigidbody.AddTorque, X0, X1, X2
	660 Move [X19+384], W31
	661 Move X20, [X31+224]
	662 Move X19, [X31+232]
	663 Move X22, [X31+208]
	664 Move X21, [X31+216]
	665 Move X30, [X31+192]
	666 Move X23, [X31+200]
	667 Move D9, [X31+176]
	668 Move D8, [X31+184]
	669 Move D11, [X31+160]
	670 Move D10, [X31+168]
	671 Move D13, [X31+144]
	672 Move D12, [X31+152]
	673 Move D15, [X31+128]
	674 Move D14, [X31+136]
	675 Add X31, X31, 240
	676 Return 
	677 Call 0x1C17F20

Method: System.Void RPC_Teleport(UnityEngine.Vector3 position)

Disassembly:
	0x01D97778 LDR X8, [X0]
	0x01D9777C CMP X8, X1
	0x01D97780 B.NE 0x1D97800
	0x01D97784 STR X0, [X23 + 0x1E0]
	0x01D97788 LDR X8, [X0]
	0x01D9778C CMP X8, X1
	0x01D97790 B.EQ 0x1D9779C
	0x01D97794 B 0x1D97800
	0x01D97798 STR X0, [X23 + 0x1E0]
	0x01D9779C LDR X23, [X19 + 0x80]
	0x01D977A0 CBZ X23, 0x1D978A0
	0x01D977A4 ADRP X21, 0x235F000
	0x01D977A8 LDR X20, [X23 + 0x1F8]
	0x01D977AC LDR X21, [X21 + 0xED8]
	0x01D977B0 MOV X0, X1
	0x01D977B4 BL 0x1C16F10
	0x01D977B8 LDR X2, [X21]
	0x01D977BC MOV X1, X19
	0x01D977C0 MOV X3, X31
	0x01D977C4 MOV X21, X0
	0x01D977C8 BL 0x3314368
	0x01D977CC MOV X0, X20
	0x01D977D0 MOV X1, X21
	0x01D977D4 MOV X2, X31
	0x01D977D8 BL 0x33C0DE4
	0x01D977DC CBZ X0, 0x1D97804
	0x01D977E0 LDR X1, [X22]
	0x01D977E4 LDR X8, [X0]
	0x01D977E8 CMP X8, X1
	0x01D977EC B.NE 0x1D97800
	0x01D977F0 STR X0, [X23 + 0x1F8]
	0x01D977F4 LDR X8, [X0]
	0x01D977F8 CMP X8, X1
	0x01D977FC B.EQ 0x1D97808
	0x01D97800 BL 0x1C171E0
	0x01D97804 STR X0, [X23 + 0x1F8]
	0x01D97808 LDR X22, [X19 + 0x80]
	0x01D9780C CBZ X22, 0x1D978A0
	0x01D97810 ADRP X23, 0x235F000
	0x01D97814 LDR X23, [X23 + 0xED0]
	0x01D97818 ADRP X21, 0x235F000
	0x01D9781C LDR X20, [X22 + 0x218]
	0x01D97820 LDR X0, [X23]
	0x01D97824 LDR X21, [X21 + 0xEE0]
	0x01D97828 BL 0x1C16F10
	0x01D9782C LDR X2, [X21]
	0x01D97830 MOV X1, X19
	0x01D97834 MOV X3, X31
	0x01D97838 MOV X21, X0
	0x01D9783C BL 0x2A6FD70
	0x01D97840 MOV X0, X20
	0x01D97844 MOV X1, X21
	0x01D97848 MOV X2, X31
	0x01D9784C BL 0x33C0DE4
	0x01D97850 CBZ X0, 0x1D9788C
	0x01D97854 LDR X20, [X23]
	0x01D97858 MOV X19, X0
	0x01D9785C MOV X1, X20
	0x01D97860 BL 0x1C16E00
	0x01D97864 CBZ X0, 0x1D97880
	0x01D97868 STR X0, [X22 + 0x218]
	0x01D9786C LDR X20, [X23]
	0x01D97870 MOV X0, X19
	0x01D97874 MOV X1, X20
	0x01D97878 BL 0x1C16E00
	0x01D9787C CBNZ X0, 0x1D97890
	0x01D97880 MOV X0, X19
	0x01D97884 MOV X1, X20
	0x01D97888 BL 0x1C171E0
	0x01D9788C STR X31, [X22 + 0x218]
	0x01D97890 LDP X20, X19, [X31 + 0x20]
	0x01D97894 LDP X22, X21, [X31 + 0x10]
	0x01D97898 LDP X30, X23, [X31], #0x30
	0x01D9789C RET
	0x01D978A0 BL 0x1C16F20
	0x01D978A4 STP X30, X23, [X31 - 0x30]!
	0x01D978A8 STP X22, X21, [X31 + 0x10]
	0x01D978AC STP X20, X19, [X31 + 0x20]
	0x01D978B0 ADRP X20, 0x2641000
	0x01D978B4 ADRP X21, 0x235F000
	0x01D978B8 LDRB W8, [X20 + 0xA26]
	0x01D978BC LDR X21, [X21 + 0xA78]
	0x01D978C0 MOV X19, X0
	0x01D978C4 TBNZ X8, 0x0, 0x1D97924
	0x01D978C8 ADRP X0, 0x235F000
	0x01D978CC LDR X0, [X0 + 0xED0]
	0x01D978D0 BL 0x1C16CF4
	0x01D978D4 ADRP X0, 0x235D000
	0x01D978D8 LDR X0, [X0 + 0xE70]
	0x01D978DC BL 0x1C16CF4
	0x01D978E0 ADRP X0, 0x235F000
	0x01D978E4 LDR X0, [X0 + 0xED8]
	0x01D978E8 BL 0x1C16CF4
	0x01D978EC ADRP X0, 0x235F000
	0x01D978F0 LDR X0, [X0 + 0xEE0]
	0x01D978F4 BL 0x1C16CF4
	0x01D978F8 ADRP X0, 0x235F000
	0x01D978FC LDR X0, [X0 + 0xEE8]
	0x01D97900 BL 0x1C16CF4
	0x01D97904 ADRP X0, 0x235F000
	0x01D97908 LDR X0, [X0 + 0xEF0]
	0x01D9790C BL 0x1C16CF4
	0x01D97910 ADRP X0, 0x235F000
	0x01D97914 LDR X0, [X0 + 0xA78]
	0x01D97918 BL 0x1C16CF4
	0x01D9791C MOVZ W8, 0x1
	0x01D97920 STRB W8, [X20 + 0xA26]
	0x01D97924 LDR X0, [X21]
	0x01D97928 LDR W8, [X0 + 0xE0]
	0x01D9792C CBNZ W8, 0x1D97934
	0x01D97930 BL 0x1C16DFC
	0x01D97934 CBZ X19, 0x1D97B28
	0x01D97938 LDR W8, [X19 + 0x30]
	0x01D9793C LDR X23, [X19 + 0x80]
	0x01D97940 ORR W8, W8, 0x8
	0x01D97944 STR W8, [X19 + 0x30]
	0x01D97948 CBZ X23, 0x1D97B28
	0x01D9794C ADRP X22, 0x235D000
	0x01D97950 LDR X22, [X22 + 0xE70]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2642000
	008 Move W8, [X20+2577]
	009 Move V8, V2
	010 Move V9, V1
	011 Move V10, V0
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2360000
	018 Move X0, [X0+2680]
	019 Call 0x1C17CF4
	020 Move X0, 0x2360000
	021 Move X0, [X0+3640]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2577], W8
	025 Move W8, [X19+88]
	026 Compare W8, 0
	027 JumpIfEqual {46}
	028 Move [X19+88], W31
	029 Move X0, X19
	030 Move X1, X31
	031 Call Component.get_transform, X0
	032 Compare X0, 0
	033 JumpIfEqual {152}
	034 Move V1, V9
	035 Move V2, V8
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+24]
	039 Move D9, [X31+8]
	040 Move D8, [X31+16]
	041 Move V0, V10
	042 Move X1, X31
	043 Move V10, [X31+48]
	044 Call Transform.set_position, X0, X1
	045 Return 
	046 Move X20, 0x2360000
	047 Move X20, [X20+2680]
	048 Move X0, [X20]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X19
	054 Move X1, X31
	055 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	056 Move X0, [X19+56]
	057 Compare X0, 0
	058 JumpIfEqual {152}
	059 Move X1, X31
	060 Call NetworkRunner.get_Stage, X0
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X30, [X31+24]
	065 Move D9, [X31+8]
	066 Move D8, [X31+16]
	067 Move V10, [X31+48]
	068 Return 
	069 Move X0, [X19+64]
	070 Compare X0, 0
	071 JumpIfEqual {152}
	072 Move X1, X31
	073 Call NetworkObject.GetLocalAuthorityMask, X0
	074 And W31, W0, 7
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {29}
	079 Move X8, [X19+56]
	080 Compare X8, 0
	081 JumpIfEqual {152}
	082 Move X0, [X8+80]
	083 Compare X0, 0
	084 JumpIfEqual {152}
	085 Move X1, X31
	086 Call Simulation.HasAnyActiveConnections, X0
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {62}
	091 Move X8, [X19+56]
	092 Compare X8, 0
	093 JumpIfEqual {152}
	094 Move X0, [X8+80]
	095 Move W1, 20
	096 Move X2, X31
	097 Call SimulationMessage.Allocate, X0, X1
	098 Move X8, [X19+64]
	099 Compare X8, 0
	100 JumpIfEqual {152}
	101 Move X8, [X8+32]
	102 Move X20, X0
	103 Compare X8, 0
	104 JumpIfEqual {126}
	105 Move W0, [X8]
	106 Move X0, [X20]
	107 Move X19, [X19+64]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move X8, 0x2360000
	113 Move X8, [X8+3640]
	114 Move X1, X19
	115 Move X20, [X31+32]
	116 Move X19, [X31+40]
	117 Move X30, [X31+24]
	118 Move X0, [X8]
	119 Move D9, [X31+8]
	120 Move D8, [X31+16]
	121 Move W2, 7
	122 Move X3, X31
	123 Move V10, [X31+48]
	124 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	125 Return 
	126 Move X0, X31
	127 Move W1, [X19+104]
	128 Move W2, 8
	129 Move X3, X31
	130 Call RpcHeader.Create, X0, X1, X2
	131 Move [X20+28], X0
	132 Move [X20+36], S10
	133 Move [X20+44], S9
	134 Move [X20+44], S8
	135 Compare X20, 0
	136 JumpIfEqual {152}
	137 Move W8, 160
	138 Move [X20+12], W8
	139 Move X0, [X19+56]
	140 Compare X0, 0
	141 JumpIfEqual {152}
	142 Move X1, X20
	143 Move X20, [X31+32]
	144 Move X19, [X31+40]
	145 Move X30, [X31+24]
	146 Move D9, [X31+8]
	147 Move D8, [X31+16]
	148 Move X2, X31
	149 Move V10, [X31+48]
	150 Call NetworkRunner.SendRpc, X0, X1
	151 Return 
	152 Call 0x1C17F20

Method: System.Void InterestEnter(Fusion.PlayerRef player)

Disassembly:
	0x01D97954 ADRP X21, 0x235F000
	0x01D97958 LDR X20, [X23 + 0x1D0]
	0x01D9795C LDR X0, [X22]
	0x01D97960 LDR X21, [X21 + 0xEF0]
	0x01D97964 BL 0x1C16F10
	0x01D97968 LDR X2, [X21]
	0x01D9796C MOV X1, X19
	0x01D97970 MOV X3, X31
	0x01D97974 MOV X21, X0
	0x01D97978 BL 0x3314368
	0x01D9797C MOV X0, X20
	0x01D97980 MOV X1, X21
	0x01D97984 MOV X2, X31
	0x01D97988 BL 0x33C0FDC
	0x01D9798C LDR X1, [X22]
	0x01D97990 CBZ X0, 0x1D979B4
	0x01D97994 LDR X8, [X0]
	0x01D97998 CMP X8, X1
	0x01D9799C B.NE 0x1D97A88
	0x01D979A0 STR X0, [X23 + 0x1D0]
	0x01D979A4 LDR X8, [X0]
	0x01D979A8 CMP X8, X1
	0x01D979AC B.EQ 0x1D979B8
	0x01D979B0 B 0x1D97A88
	0x01D979B4 STR X0, [X23 + 0x1D0]
	0x01D979B8 LDR X23, [X19 + 0x80]
	0x01D979BC CBZ X23, 0x1D97B28
	0x01D979C0 ADRP X21, 0x235F000
	0x01D979C4 LDR X20, [X23 + 0x1E0]
	0x01D979C8 LDR X21, [X21 + 0xEE8]
	0x01D979CC MOV X0, X1
	0x01D979D0 BL 0x1C16F10
	0x01D979D4 LDR X2, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2642000
	006 Move W8, [X21+2578]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2360000
	014 Move X0, [X0+3648]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2578], W8
	018 Move X0, [X19+56]
	019 Compare X0, 0
	020 JumpIfEqual {41}
	021 Move X21, 0x2360000
	022 Move X21, [X21+3648]
	023 Move X1, X31
	024 Call NetworkRunner.get_LocalPlayer, X0
	025 Move X8, [X21]
	026 Move X21, X0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1C17DFC
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W8, 1
	034 Move [X19+440], W8
	035 Move [X19+442], W8
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return 
	041 Call 0x1C17F20

Method: System.Void InterestExit(Fusion.PlayerRef player)

Disassembly:
	0x01D979D8 MOV X1, X19
	0x01D979DC MOV X3, X31
	0x01D979E0 MOV X21, X0
	0x01D979E4 BL 0x3314368
	0x01D979E8 MOV X0, X20
	0x01D979EC MOV X1, X21
	0x01D979F0 MOV X2, X31
	0x01D979F4 BL 0x33C0FDC
	0x01D979F8 LDR X1, [X22]
	0x01D979FC CBZ X0, 0x1D97A20
	0x01D97A00 LDR X8, [X0]
	0x01D97A04 CMP X8, X1
	0x01D97A08 B.NE 0x1D97A88
	0x01D97A0C STR X0, [X23 + 0x1E0]
	0x01D97A10 LDR X8, [X0]
	0x01D97A14 CMP X8, X1
	0x01D97A18 B.EQ 0x1D97A24
	0x01D97A1C B 0x1D97A88
	0x01D97A20 STR X0, [X23 + 0x1E0]
	0x01D97A24 LDR X23, [X19 + 0x80]
	0x01D97A28 CBZ X23, 0x1D97B28
	0x01D97A2C ADRP X21, 0x235F000
	0x01D97A30 LDR X20, [X23 + 0x1F8]
	0x01D97A34 LDR X21, [X21 + 0xED8]
	0x01D97A38 MOV X0, X1
	0x01D97A3C BL 0x1C16F10
	0x01D97A40 LDR X2, [X21]
	0x01D97A44 MOV X1, X19
	0x01D97A48 MOV X3, X31
	0x01D97A4C MOV X21, X0
	0x01D97A50 BL 0x3314368
	0x01D97A54 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2642000
	006 Move W8, [X21+2579]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2360000
	014 Move X0, [X0+3648]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2579], W8
	018 Move X0, [X19+56]
	019 Compare X0, 0
	020 JumpIfEqual {40}
	021 Move X21, 0x2360000
	022 Move X21, [X21+3648]
	023 Move X1, X31
	024 Call NetworkRunner.get_LocalPlayer, X0
	025 Move X8, [X21]
	026 Move X21, X0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1C17DFC
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W8, 1
	034 Move [X19+440], W8
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return 
	040 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D97A58 MOV X1, X21
	0x01D97A5C MOV X2, X31
	0x01D97A60 BL 0x33C0FDC
	0x01D97A64 CBZ X0, 0x1D97A8C
	0x01D97A68 LDR X1, [X22]
	0x01D97A6C LDR X8, [X0]
	0x01D97A70 CMP X8, X1
	0x01D97A74 B.NE 0x1D97A88
	0x01D97A78 STR X0, [X23 + 0x1F8]
	0x01D97A7C LDR X8, [X0]
	0x01D97A80 CMP X8, X1
	0x01D97A84 B.EQ 0x1D97A90
	0x01D97A88 BL 0x1C171E0
	0x01D97A8C STR X0, [X23 + 0x1F8]
	0x01D97A90 LDR X22, [X19 + 0x80]
	0x01D97A94 CBZ X22, 0x1D97B28
	0x01D97A98 ADRP X23, 0x235F000
	0x01D97A9C LDR X23, [X23 + 0xED0]
	0x01D97AA0 ADRP X21, 0x235F000
	0x01D97AA4 LDR X20, [X22 + 0x218]
	0x01D97AA8 LDR X0, [X23]
	0x01D97AAC LDR X21, [X21 + 0xEE0]
	0x01D97AB0 BL 0x1C16F10
	0x01D97AB4 LDR X2, [X21]
	0x01D97AB8 MOV X1, X19
	0x01D97ABC MOV X3, X31
	0x01D97AC0 MOV X21, X0
	0x01D97AC4 BL 0x2A6FD70
	0x01D97AC8 MOV X0, X20
	0x01D97ACC MOV X1, X21
	0x01D97AD0 MOV X2, X31
	0x01D97AD4 BL 0x33C0FDC
	0x01D97AD8 CBZ X0, 0x1D97B14
	0x01D97ADC LDR X20, [X23]
	0x01D97AE0 MOV X19, X0
	0x01D97AE4 MOV X1, X20
	0x01D97AE8 BL 0x1C16E00
	0x01D97AEC CBZ X0, 0x1D97B08
	0x01D97AF0 STR X0, [X22 + 0x218]
	0x01D97AF4 LDR X20, [X23]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2642000
	007 Move X21, 0x2360000
	008 Move W8, [X22+2580]
	009 Move X21, [X21+3632]
	010 Move X19, X0
	011 Add X20, X0, 588
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2360000
	017 Move X0, [X0+3632]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2580], W8
	021 Move X10, 0x3F800000
	022 Move W8, 1
	023 Move W9, 257
	024 NotImplemented "Instruction MOVK not yet implemented."
	025 Move [X19+136], W8
	026 NotImplemented "Instruction STRH not yet implemented."
	027 NotImplemented "Instruction STURH not yet implemented."
	028 Move [X19+184], X10
	029 Move [X19+192], W8
	030 Move X0, [X21]
	031 Move W1, 10
	032 Call 0x1C17D6C
	033 Move X8, -19574784
	034 Move X9, -19562496
	035 Move V0, [X8+90]
	036 Move V1, [X9+864]
	037 Move [X19+552], X0
	038 Move X0, X19
	039 Move [X20], V0
	040 Move [X20+16], D1
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X1, X31
	046 Move X30, [X31+48]
	047 Call NetworkBehaviour..ctor, X0
	048 Return 

Method: System.Void .cctor()

Disassembly:
	0x01D97AF8 MOV X0, X19
	0x01D97AFC MOV X1, X20
	0x01D97B00 BL 0x1C16E00
	0x01D97B04 CBNZ X0, 0x1D97B18
	0x01D97B08 MOV X0, X19
	0x01D97B0C MOV X1, X20
	0x01D97B10 BL 0x1C171E0
	0x01D97B14 STR X31, [X22 + 0x218]
	0x01D97B18 LDP X20, X19, [X31 + 0x20]
	0x01D97B1C LDP X22, X21, [X31 + 0x10]
	0x01D97B20 LDP X30, X23, [X31], #0x30
	0x01D97B24 RET
	0x01D97B28 BL 0x1C16F20
	0x01D97B2C STP X30, X19, [X31 - 0x10]!
	0x01D97B30 MOV X1, X31
	0x01D97B34 MOV X19, X0
	0x01D97B38 BL 0x1E73F88
	0x01D97B3C MOV X0, X19
	0x01D97B40 BL 0x1D97B50
	0x01D97B44 MOV X0, X19
	0x01D97B48 LDP X30, X19, [X31], #0x10
	0x01D97B4C B 0x1D97BAC
	0x01D97B50 STR X30, [X31 - 0x20]!
	0x01D97B54 STP X20, X19, [X31 + 0x10]
	0x01D97B58 LDR X20, [X0 + 0x90]
	0x01D97B5C MOV X19, X0
	0x01D97B60 BL 0x1D97584
	0x01D97B64 CBZ X20, 0x1D97BA8
	0x01D97B68 ORN W8, W31, W0, 0x0
	0x01D97B6C AND W1, W8, 0x1
	0x01D97B70 MOV X0, X20
	0x01D97B74 MOV X2, X31
	0x01D97B78 BL 0x3C357B4
	0x01D97B7C LDR X20, [X19 + 0x88]
	0x01D97B80 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2642000
	007 Move X22, 0x2360000
	008 Move X19, 0x2360000
	009 Move X20, 0x2360000
	010 Move W8, [X21+2581]
	011 Move X22, [X22+3656]
	012 Move X19, [X19+3664]
	013 Move X20, [X20+3352]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x2360000
	019 Move X0, [X0+3352]
	020 Call 0x1C17CF4
	021 Move X0, 0x2360000
	022 Move X0, [X0+3664]
	023 Call 0x1C17CF4
	024 Move X0, 0x2360000
	025 Move X0, [X0+3656]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+2581], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call HashSet`1<Object>..ctor, X0
	034 Move X8, [X20]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8], X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01D97B84 BL 0x1D97584
	0x01D97B88 CBZ X20, 0x1D97BA8
	0x01D97B8C ORN W8, W31, W0, 0x0
	0x01D97B90 MOV X0, X20
	0x01D97B94 LDP X20, X19, [X31 + 0x10]
	0x01D97B98 AND W1, W8, 0x1
	0x01D97B9C MOV X2, X31
	0x01D97BA0 LDR X30, [X31], #0x20
	0x01D97BA4 B 0x3C357B4
	0x01D97BA8 BL 0x1C16F20
	0x01D97BAC STP X30, X19, [X31 - 0x10]!
	0x01D97BB0 MOV X19, X0
	0x01D97BB4 BL 0x1D974B8
	0x01D97BB8 LDR X1, [X19 + 0x88]
	0x01D97BBC TBZ X0, 0x0, 0x1D97BD0
	0x01D97BC0 BL 0x1D98840
	0x01D97BC4 LDR X1, [X19 + 0x90]
	0x01D97BC8 LDP X30, X19, [X31], #0x10
	0x01D97BCC B 0x1D98840
	0x01D97BD0 MOV X0, X19
	0x01D97BD4 BL 0x1D98984
	0x01D97BD8 LDR X1, [X19 + 0x90]
	0x01D97BDC MOV X0, X19
	0x01D97BE0 LDP X30, X19, [X31], #0x10
	0x01D97BE4 B 0x1D98984
	0x01D97BE8 STP X30, X23, [X31 - 0x30]!
	0x01D97BEC STP X22, X21, [X31 + 0x10]
	0x01D97BF0 STP X20, X19, [X31 + 0x20]
	0x01D97BF4 ADRP X23, 0x2641000
	0x01D97BF8 ADRP X22, 0x235C000
	0x01D97BFC LDRB W8, [X23 + 0xA27]
	0x01D97C00 LDR X22, [X22 + 0x598]
	0x01D97C04 MOV W20, W2
	0x01D97C08 MOV X19, X1
	0x01D97C0C MOV X21, X0
	0x01D97C10 TBNZ X8, 0x0, 0x1D97C28
	0x01D97C14 ADRP X0, 0x235C000
	0x01D97C18 LDR X0, [X0 + 0x598]
	0x01D97C1C BL 0x1C16CF4
	0x01D97C20 MOVZ W8, 0x1
	0x01D97C24 STRB W8, [X23 + 0xA27]
	0x01D97C28 LDR X0, [X22]
	0x01D97C2C LDR X22, [X21 + 0x88]
	0x01D97C30 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], X30
	003 Move [X31+96], X20
	004 Move [X31+104], X19
	005 NotImplemented "Instruction MRS not yet implemented."
	006 Move X8, [X20+40]
	007 Move X19, X0
	008 Move [X31+72], X8
	009 Move X1, [X0+240]
	010 Call GrabbableItem.set_attachedAnchorId, X0, X1
	011 Move X1, [X19+248]
	012 Move X0, X19
	013 Call GrabbableItem.set_backpackId, X0, X1
	014 Add X8, X19, 256
	015 NotImplemented "Instruction LDUR not yet implemented."
	016 Move V1, [X19+16]
	017 Add X1, X31, 32
	018 Move X0, X19
	019 Move [X31+44], V0
	020 Move [X31+2], V1
	021 Call GrabbableItem.set_grabbedInfo, X0, X1
	022 Move W1, [X19+284]
	023 Move X0, X19
	024 Call GrabbableItem.set_isHidden, X0, X1
	025 Move W1, [X19+288]
	026 Move X0, X19
	027 Call GrabbableItem.set_stuckAnchorId, X0, X1
	028 Add X8, X19, 292
	029 Move V1, [X8]
	030 Move V0, [X8+16]
	031 Add X1, X31, 0
	032 Move X0, X19
	033 Move [X31], V1
	034 Move [X31+8], V0
	035 Call GrabbableItem.set_spawnInfo, X0, X1
	036 Move W1, [X19+324]
	037 Move X0, X19
	038 Call GrabbableItem.set_respawnTimer, X0, X1
	039 Move X8, [X20+40]
	040 Move X9, [X31+72]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X20, [X31+96]
	043 Move X19, [X31+104]
	044 Move X30, [X31+80]
	045 Add X31, X31, 112
	046 Return 
	047 Call 0x3EB2B20

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01D97C34 CBNZ W8, 0x1D97C3C
	0x01D97C38 BL 0x1C16DFC
	0x01D97C3C MOV X0, X22
	0x01D97C40 MOV X1, X31
	0x01D97C44 BL 0x3C394A8
	0x01D97C48 LDR X0, [X21 + 0x90]
	0x01D97C4C MOV X1, X31
	0x01D97C50 BL 0x3C394A8
	0x01D97C54 AND W2, W20, 0x1
	0x01D97C58 MOV X0, X21
	0x01D97C5C MOV X1, X19
	0x01D97C60 LDP X20, X19, [X31 + 0x20]
	0x01D97C64 LDP X22, X21, [X31 + 0x10]
	0x01D97C68 MOV X3, X31
	0x01D97C6C LDP X30, X23, [X31], #0x30
	0x01D97C70 B 0x1E73F8C
	0x01D97C74 SUB X31, X31, 0x30
	0x01D97C78 STR X30, [X31 + 0x10]
	0x01D97C7C STP X20, X19, [X31 + 0x20]
	0x01D97C80 ADRP X20, 0x2641000
	0x01D97C84 LDRB W8, [X20 + 0xA28]
	0x01D97C88 MOV X19, X0
	0x01D97C8C TBNZ X8, 0x0, 0x1D97CB0
	0x01D97C90 ADRP X0, 0x235F000
	0x01D97C94 LDR X0, [X0 + 0xEF8]
	0x01D97C98 BL 0x1C16CF4
	0x01D97C9C ADRP X0, 0x235F000
	0x01D97CA0 LDR X0, [X0 + 0xF00]
	0x01D97CA4 BL 0x1C16CF4
	0x01D97CA8 MOVZ W8, 0x1
	0x01D97CAC STRB W8, [X20 + 0xA28]
	0x01D97CB0 MOV X0, X19
	0x01D97CB4 MOV X1, X31
	0x01D97CB8 STR X31, [X31 + 0x8]
	0x01D97CBC STR W31, [X31]
	0x01D97CC0 BL 0x1E73D04
	0x01D97CC4 LDR X0, [X19 + 0x40]
	0x01D97CC8 CBZ X0, 0x1D97E04
	0x01D97CCC LDRB W8, [X0 + 0x60]
	0x01D97CD0 TBNZ X8, 0x1, 0x1D97E04
	0x01D97CD4 MOV X1, X31
	0x01D97CD8 BL 0x1E93668
	0x01D97CDC TBZ X0, 0x0, 0x1D97E04
	0x01D97CE0 MOV X0, X19
	0x01D97CE4 BL 0x1D974B8
	0x01D97CE8 TBZ X0, 0x0, 0x1D97E04

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], X30
	003 Move [X31+96], X20
	004 Move [X31+104], X19
	005 NotImplemented "Instruction MRS not yet implemented."
	006 Move X8, [X20+40]
	007 Move X19, X0
	008 Move [X31+72], X8
	009 Call GrabbableItem.get_attachedAnchorId, X0
	010 Move [X19+240], X0
	011 Move X0, X19
	012 Call GrabbableItem.get_backpackId, X0
	013 Move [X19+248], X0
	014 Add X8, X31, 40
	015 Move X0, X19
	016 Call GrabbableItem.get_grabbedInfo, X0
	017 NotImplemented "Instruction LDUR not yet implemented."
	018 NotImplemented "Instruction LDUR not yet implemented."
	019 Add X8, X19, 256
	020 Move X0, X19
	021 Move [X8+12], V0
	022 Move [X19+16], V1
	023 Call GrabbableItem.get_isHidden, X0
	024 And W8, W0, 1
	025 Move X0, X19
	026 Move [X19+284], W8
	027 Call GrabbableItem.get_stuckAnchorId, X0
	028 Move [X19+288], W0
	029 Add X8, X31, 8
	030 Move X0, X19
	031 Call GrabbableItem.get_spawnInfo, X0
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 Add X8, X19, 292
	035 Move X0, X19
	036 Move [X8], V1
	037 Move [X8+8], V0
	038 Call GrabbableItem.get_respawnTimer, X0
	039 Move [X19+324], W0
	040 Move X8, [X20+40]
	041 Move X9, [X31+72]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X20, [X31+96]
	044 Move X19, [X31+104]
	045 Move X30, [X31+80]
	046 Add X31, X31, 112
	047 Return 
	048 Call 0x3EB2B20

Method: System.Void RPC_TryGrab@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01D97CEC LDR X0, [X19 + 0x80]
	0x01D97CF0 CBZ X0, 0x1D97E14
	0x01D97CF4 MOV X1, X31
	0x01D97CF8 BL 0x1D8E6F8
	0x01D97CFC STR X0, [X31 + 0x18]
	0x01D97D00 ADD X0, X31, 0x18
	0x01D97D04 MOV X1, X31
	0x01D97D08 BL 0x1E74DE4
	0x01D97D0C MOV W20, W0
	0x01D97D10 MOV X0, X19
	0x01D97D14 BL 0x1D97338
	0x01D97D18 TBZ X20, 0x0, 0x1D97D6C
	0x01D97D1C CBNZ W0, 0x1D97DD0
	0x01D97D20 MOV X0, X19
	0x01D97D24 BL 0x1D97278
	0x01D97D28 STR W0, [X31]
	0x01D97D2C LDR X1, [X19 + 0x38]
	0x01D97D30 ADD X0, X31, 0x0
	0x01D97D34 MOV X2, X31
	0x01D97D38 BL 0x1E91C7C
	0x01D97D3C ANDS W31, W0, 0xFF
	0x01D97D40 STR X0, [X31 + 0x8]
	0x01D97D44 B.EQ 0x1D97DD0
	0x01D97D48 ADRP X8, 0x235F000
	0x01D97D4C LDR X8, [X8 + 0xF00]
	0x01D97D50 ADD X0, X31, 0x8
	0x01D97D54 LDR X1, [X8]
	0x01D97D58 BL 0x2434214
	0x01D97D5C MOV W1, W0
	0x01D97D60 MOV X0, X19
	0x01D97D64 BL 0x1D97398
	0x01D97D68 B 0x1D97DD0
	0x01D97D6C CMP W0, 0x1
	0x01D97D70 B.LT 0x1D97DA8
	0x01D97D74 LDR X20, [X19 + 0x38]
	0x01D97D78 MOV X0, X19
	0x01D97D7C BL 0x1D97338
	0x01D97D80 MOV W1, W0
	0x01D97D84 MOV X0, X20
	0x01D97D88 MOV X2, X31
	0x01D97D8C BL 0x1E91F74
	0x01D97D90 AND X1, X0, 0x0
	0x01D97D94 MOV X0, X19
	0x01D97D98 BL 0x1D972D8
	0x01D97D9C MOV X0, X19
	0x01D97DA0 MOV W1, W31
	0x01D97DA4 BL 0x1D97398
	0x01D97DA8 MOV X0, X19
	0x01D97DAC BL 0x1D97278
	0x01D97DB0 STR W0, [X31]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2642000
	008 Move W8, [X20+2582]
	009 Move X21, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2360000
	016 Move X0, [X0+3352]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2582], W8
	020 Compare X19, 0
	021 JumpIfEqual {59}
	022 Move X0, [X19+56]
	023 Move X23, 0x2360000
	024 NotImplemented "Instruction LDUR not yet implemented."
	025 Move W22, [X21+44]
	026 Move X23, [X23+3352]
	027 Move X1, X21
	028 Move W2, W31
	029 Move X3, X31
	030 Call RpcInfo.FromMessage, X0, X1, X2
	031 Move W8, 1
	032 Move [X19+88], W8
	033 Move X9, [X19]
	034 Move X8, [X23]
	035 Move W11, [X9+304]
	036 Move W10, [X8+304]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X9, [X9+200]
	039 Add X9, X9, X10
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X3, X0
	043 Move X4, X1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, X19
	046 Move X1, X20
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 NotImplemented "Instruction CSET not yet implemented."
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Call GrabbableItem.RPC_TryGrab, X0, X1, X2, X3
	055 Return 
	056 Move X0, X19
	057 Move X1, X8
	058 Call 0x1C181E0
	059 Call 0x1C17F20

Method: System.Void RPC_Release@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01D97DB4 LDR X1, [X19 + 0x38]
	0x01D97DB8 ADD X0, X31, 0x0
	0x01D97DBC MOV X2, X31
	0x01D97DC0 BL 0x1E91B84
	0x01D97DC4 TBZ X0, 0x0, 0x1D97DD0
	0x01D97DC8 MOV X0, X19
	0x01D97DCC BL 0x1D97E18
	0x01D97DD0 MOV X0, X19
	0x01D97DD4 BL 0x1D973F8
	0x01D97DD8 STR W0, [X31]
	0x01D97DDC LDR X1, [X19 + 0x38]
	0x01D97DE0 ADD X0, X31, 0x0
	0x01D97DE4 MOV X2, X31
	0x01D97DE8 BL 0x1E91B84
	0x01D97DEC TBZ X0, 0x0, 0x1D97E04
	0x01D97DF0 MOV X0, X31
	0x01D97DF4 BL 0x1E91B08
	0x01D97DF8 AND X1, X0, 0x0
	0x01D97DFC MOV X0, X19
	0x01D97E00 BL 0x1D97458
	0x01D97E04 LDP X20, X19, [X31 + 0x20]
	0x01D97E08 LDR X30, [X31 + 0x10]
	0x01D97E0C ADD X31, X31, 0x30
	0x01D97E10 RET
	0x01D97E14 BL 0x1C16F20
	0x01D97E18 SUB X31, X31, 0xD0
	0x01D97E1C STR D14, [X31 + 0x70]
	0x01D97E20 STP D13, D12, [X31 + 0x78]
	0x01D97E24 STP D11, D10, [X31 + 0x88]
	0x01D97E28 STP D9, D8, [X31 + 0x98]
	0x01D97E2C STR X30, [X31 + 0xA8]
	0x01D97E30 STP X22, X21, [X31 + 0xB0]
	0x01D97E34 STP X20, X19, [X31 + 0xC0]
	0x01D97E38 ADRP X20, 0x2641000
	0x01D97E3C LDRB W8, [X20 + 0xA2A]
	0x01D97E40 MOV X19, X0
	0x01D97E44 TBNZ X8, 0x0, 0x1D97E74
	0x01D97E48 ADRP X0, 0x235F000
	0x01D97E4C LDR X0, [X0 + 0xF08]
	0x01D97E50 BL 0x1C16CF4
	0x01D97E54 ADRP X0, 0x235F000
	0x01D97E58 LDR X0, [X0 + 0xB58]
	0x01D97E5C BL 0x1C16CF4
	0x01D97E60 ADRP X0, 0x235F000
	0x01D97E64 LDR X0, [X0 + 0xB60]
	0x01D97E68 BL 0x1C16CF4
	0x01D97E6C MOVZ W8, 0x1
	0x01D97E70 STRB W8, [X20 + 0xA2A]
	0x01D97E74 MOV X0, X19
	0x01D97E78 BL 0x1D97584
	0x01D97E7C TBNZ X0, 0x0, 0x1D9807C
	0x01D97E80 MOVZ W1, 0x1
	0x01D97E84 MOV X0, X19
	0x01D97E88 BL 0x1D975EC
	0x01D97E8C LDR X0, [X19 + 0x80]
	0x01D97E90 CBZ X0, 0x1D980A0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x2642000
	007 Move W8, [X21+2583]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2360000
	015 Move X0, [X0+3352]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2583], W8
	019 Compare X19, 0
	020 JumpIfEqual {71}
	021 Move X8, 0x2360000
	022 Move X8, [X8+3352]
	023 Move W11, 1
	024 NotImplemented "Instruction LDUR not yet implemented."
	025 Move S0, [X20+44]
	026 Move S1, [X20+48]
	027 Move S2, [X20+52]
	028 Move S3, [X20+56]
	029 Move S4, [X20+60]
	030 Move S5, [X20+64]
	031 Move S6, [X20+68]
	032 Move S7, [X20+72]
	033 Move S16, [X20+76]
	034 Move S17, [X20+80]
	035 Move S18, [X20+84]
	036 Move S19, [X20+88]
	037 Move V20, [X20+92]
	038 Move W9, [X20+96]
	039 Move W10, [X20+100]
	040 Move [X19+88], W11
	041 Move X11, [X19]
	042 Move X8, [X8]
	043 Move W13, [X11+304]
	044 Move W12, [X8+304]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X11, [X11+200]
	047 Add X11, X11, X12
	048 NotImplemented "Instruction LDUR not yet implemented."
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSET not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSET not yet implemented."
	054 Move X0, X19
	055 Move [X31+20], S19
	056 Move [X31+28], S20
	057 Move [X31+16], S18
	058 Move [X31+4], S16
	059 Move [X31+12], S17
	060 Move [X31], S7
	061 Call GrabbableItem.RPC_Release, X0, X1, X2, X3, X4, X5, X6, X7
	062 Move X20, [X31+48]
	063 Move X19, [X31+56]
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Add X31, X31, 64
	067 Return 
	068 Move X0, X19
	069 Move X1, X8
	070 Call 0x1C181E0
	071 Call 0x1C17F20

Method: System.Void RPC_SetGrabbedOffsets@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01D97E94 MOVZ W1, 0x1
	0x01D97E98 MOV X2, X31
	0x01D97E9C BL 0x1D89D60
	0x01D97EA0 MOV X0, X31
	0x01D97EA4 BL 0x1E91B08
	0x01D97EA8 AND X1, X0, 0x0
	0x01D97EAC MOV X0, X19
	0x01D97EB0 BL 0x1D972D8
	0x01D97EB4 MOV X0, X19
	0x01D97EB8 MOV W1, W31
	0x01D97EBC BL 0x1D97398
	0x01D97EC0 LDR X20, [X19 + 0x38]
	0x01D97EC4 LDR X21, [X19 + 0xA0]
	0x01D97EC8 MOV X0, X19
	0x01D97ECC MOV X1, X31
	0x01D97ED0 BL 0x3C32E90
	0x01D97ED4 CBZ X0, 0x1D980A0
	0x01D97ED8 MOV X1, X31
	0x01D97EDC BL 0x3C3F58C
	0x01D97EE0 ADRP X8, 0x235F000
	0x01D97EE4 LDR X8, [X8 + 0xB58]
	0x01D97EE8 ADD X0, X31, 0x40
	0x01D97EEC STP X31, X31, [X31 + 0x40]
	0x01D97EF0 LDR X1, [X8]
	0x01D97EF4 BL 0x243BFEC
	0x01D97EF8 ADRP X22, 0x2641000
	0x01D97EFC LDRB W8, [X22 + 0x793]
	0x01D97F00 CBNZ W8, 0x1D97F18
	0x01D97F04 ADRP X0, 0x235D000
	0x01D97F08 LDR X0, [X0 + 0x5A8]
	0x01D97F0C BL 0x1C16CF4
	0x01D97F10 MOVZ W8, 0x1
	0x01D97F14 STRB W8, [X22 + 0x793]
	0x01D97F18 ADRP X8, 0x235D000
	0x01D97F1C LDR X8, [X8 + 0x5A8]
	0x01D97F20 ADRP X9, 0x235F000
	0x01D97F24 ADD X0, X31, 0x28
	0x01D97F28 LDR X8, [X8]
	0x01D97F2C LDR X8, [X8 + 0xB8]
	0x01D97F30 LDR X9, [X9 + 0xB60]
	0x01D97F34 LDP S0, S1, [X8]
	0x01D97F38 LDP S2, S3, [X8 + 0x8]
	0x01D97F3C LDR X1, [X9]
	0x01D97F40 STP X31, X31, [X31 + 0x28]
	0x01D97F44 STR W31, [X31 + 0x38]
	0x01D97F48 BL 0x2437C9C
	0x01D97F4C CBZ X20, 0x1D980A0
	0x01D97F50 ADRP X8, 0x235F000
	0x01D97F54 LDP X2, X3, [X31 + 0x40]
	0x01D97F58 LDR X8, [X8 + 0xF08]
	0x01D97F5C LDUR V0, [X31 + 0x28]
	0x01D97F60 LDR W9, [X31 + 0x38]
	0x01D97F64 ADD X4, X31, 0x50
	0x01D97F68 LDR X8, [X8]
	0x01D97F6C MOV X0, X20
	0x01D97F70 MOV X1, X21
	0x01D97F74 MOV X5, X31
	0x01D97F78 MOV X6, X31
	0x01D97F7C MOV W7, W31
	0x01D97F80 STR V0, [X31 + 0x5]
	0x01D97F84 STR W9, [X31 + 0x60]
	0x01D97F88 STR X8, [X31]
	0x01D97F8C BL 0x222B8DC
	0x01D97F90 MOV X0, X19
	0x01D97F94 BL 0x1D97B50
	0x01D97F98 LDR X20, [X19 + 0x80]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+112], X30
	003 Move [X31+128], X22
	004 Move [X31+136], X21
	005 Move [X31+144], X20
	006 Move [X31+152], X19
	007 NotImplemented "Instruction MRS not yet implemented."
	008 Move X8, [X21+40]
	009 Move X22, 0x2642000
	010 Move X20, X1
	011 Move X19, X0
	012 Move [X31+104], X8
	013 Move W8, [X22+2584]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x2360000
	019 Move X0, [X0+3352]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2584], W8
	023 Move [X31+64], X31
	024 Move [X31+72], X31
	025 Move [X31+88], W31
	026 Move [X31+80], X31
	027 Move W8, [X20+60]
	028 NotImplemented "Instruction LDUR not yet implemented."
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 Move [X31+88], W8
	031 Move [X31+80], X9
	032 Move [X31+4], V0
	033 Compare X19, 0
	034 JumpIfEqual {71}
	035 Move W8, 1
	036 Move [X19+88], W8
	037 Move V0, [X31+4]
	038 NotImplemented "Instruction LDUR not yet implemented."
	039 Move X9, 0x2360000
	040 Move X9, [X9+3352]
	041 Move [X31+2], V0
	042 Move [X31+44], V1
	043 Move X8, [X19]
	044 Move X1, [X9]
	045 Move W10, [X8+304]
	046 Move W9, [X1+304]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X8, [X8+200]
	049 Add X8, X8, X9
	050 NotImplemented "Instruction LDUR not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move V0, [X31+2]
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 Add X1, X31, 0
	055 Move X0, X19
	056 Move [X31], V0
	057 Move [X31+12], V1
	058 Call GrabbableItem.RPC_SetGrabbedOffsets, X0, X1
	059 Move X8, [X21+40]
	060 Move X9, [X31+104]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, [X31+144]
	063 Move X19, [X31+152]
	064 Move X22, [X31+128]
	065 Move X21, [X31+136]
	066 Move X30, [X31+112]
	067 Add X31, X31, 160
	068 Return 
	069 Move X0, X19
	070 Call 0x1C181E0
	071 Call 0x1C17F20
	072 Call 0x3EB2B20

Method: System.Void RPC_AddToBag@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01D97F9C MOV X0, X19
	0x01D97FA0 MOV X1, X31
	0x01D97FA4 BL 0x3C32E90
	0x01D97FA8 CBZ X0, 0x1D980A0
	0x01D97FAC MOV X1, X31
	0x01D97FB0 BL 0x3C3F58C
	0x01D97FB4 MOV X0, X19
	0x01D97FB8 MOV X1, X31
	0x01D97FBC MOV V8.16B, V0.16B
	0x01D97FC0 MOV V9.16B, V1.16B
	0x01D97FC4 MOV V10.16B, V2.16B
	0x01D97FC8 BL 0x3C32E90
	0x01D97FCC CBZ X0, 0x1D980A0
	0x01D97FD0 MOV X1, X31
	0x01D97FD4 BL 0x3C3DEB4
	0x01D97FD8 ADRP X21, 0x2641000
	0x01D97FDC LDRB W8, [X21 + 0x783]
	0x01D97FE0 MOV V11.16B, V0.16B
	0x01D97FE4 MOV V12.16B, V1.16B
	0x01D97FE8 MOV V13.16B, V2.16B
	0x01D97FEC MOV V14.16B, V3.16B
	0x01D97FF0 CBNZ W8, 0x1D98008
	0x01D97FF4 ADRP X0, 0x235C000
	0x01D97FF8 LDR X0, [X0 + 0x5A0]
	0x01D97FFC BL 0x1C16CF4
	0x01D98000 MOVZ W8, 0x1
	0x01D98004 STRB W8, [X21 + 0x783]
	0x01D98008 CBZ X20, 0x1D980A0
	0x01D9800C ADRP X8, 0x235B000
	0x01D98010 LDR X8, [X8 + 0x5A0]
	0x01D98014 MOV X0, X20
	0x01D98018 MOV V3.16B, V11.16B
	0x01D9801C MOV V4.16B, V12.16B
	0x01D98020 LDR X8, [X8]
	0x01D98024 MOV V5.16B, V13.16B
	0x01D98028 MOV V6.16B, V14.16B
	0x01D9802C MOV W1, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2642000
	006 Move W8, [X21+2585]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2360000
	014 Move X0, [X0+3352]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2585], W8
	018 Compare X19, 0
	019 JumpIfEqual {44}
	020 Move X8, 0x2360000
	021 Move X8, [X8+3352]
	022 Move W9, 1
	023 NotImplemented "Instruction LDUR not yet implemented."
	024 Move [X19+88], W9
	025 Move X9, [X19]
	026 Move X8, [X8]
	027 Move W11, [X9+304]
	028 Move W10, [X8+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X9, [X9+200]
	031 Add X9, X9, X10
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Call GrabbableItem.RPC_AddToBag, X0, X1
	040 Return 
	041 Move X0, X19
	042 Move X1, X8
	043 Call 0x1C181E0
	044 Call 0x1C17F20

Method: System.Void RPC_RemoveFromBag@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01D98030 LDR X8, [X8 + 0xB8]
	0x01D98034 MOV W2, W31
	0x01D98038 MOV X3, X31
	0x01D9803C LDP S1, S0, [X8 + 0x4]
	0x01D98040 LDR V2, [X8]
	0x01D98044 STP S1, S0, [X31 + 0x14]
	0x01D98048 STR S2, [X31 + 0x10]
	0x01D9804C STP S1, S0, [X31 + 0x4]
	0x01D98050 STR S2, [X31]
	0x01D98054 MOV V0.16B, V8.16B
	0x01D98058 MOV V1.16B, V9.16B
	0x01D9805C MOV V2.16B, V10.16B
	0x01D98060 BL 0x1D8F920
	0x01D98064 LDR X0, [X19 + 0x80]
	0x01D98068 CBZ X0, 0x1D980A0
	0x01D9806C FMOV S0, 5
	0x01D98070 MOVZ W1, 0x2
	0x01D98074 MOV X2, X31
	0x01D98078 BL 0x1D913C4
	0x01D9807C LDP X20, X19, [X31 + 0xC0]
	0x01D98080 LDP X22, X21, [X31 + 0xB0]
	0x01D98084 LDR X30, [X31 + 0xA8]
	0x01D98088 LDP D9, D8, [X31 + 0x98]
	0x01D9808C LDP D11, D10, [X31 + 0x88]
	0x01D98090 LDP D13, D12, [X31 + 0x78]
	0x01D98094 LDR V14, [X31 + 0x70]
	0x01D98098 ADD X31, X31, 0xD0
	0x01D9809C RET
	0x01D980A0 BL 0x1C16F20
	0x01D980A4 STR X30, [X31 - 0x20]!
	0x01D980A8 STP X20, X19, [X31 + 0x10]
	0x01D980AC ADRP X20, 0x2640000
	0x01D980B0 LDRB W8, [X20 + 0xA29]
	0x01D980B4 MOV X19, X0
	0x01D980B8 TBNZ X8, 0x0, 0x1D980DC
	0x01D980BC ADRP X0, 0x235E000
	0x01D980C0 LDR X0, [X0 + 0xA78]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2641000
	006 Move W8, [X21+2586]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x235F000
	014 Move X0, [X0+3352]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2586], W8
	018 Compare X19, 0
	019 JumpIfEqual {45}
	020 Move X9, 0x235F000
	021 Move X9, [X9+3352]
	022 Move W8, 1
	023 Move S0, [X20+36]
	024 Move S1, [X20+40]
	025 Move V2, [X20+44]
	026 Move [X19+88], W8
	027 Move X8, [X19]
	028 Move X1, [X9]
	029 Move W10, [X8+304]
	030 Move W9, [X1+304]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X8, [X8+200]
	033 Add X8, X8, X9
	034 NotImplemented "Instruction LDUR not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Call GrabbableItem.RPC_RemoveFromBag, X0, X1
	042 Return 
	043 Move X0, X19
	044 Call 0x1C181E0
	045 Call 0x1C17F20

Method: System.Void RPC_Respawn@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01D980C4 BL 0x1C16CF4
	0x01D980C8 ADRP X0, 0x235E000
	0x01D980CC LDR X0, [X0 + 0xF10]
	0x01D980D0 BL 0x1C16CF4
	0x01D980D4 MOVZ W8, 0x1
	0x01D980D8 STRB W8, [X20 + 0xA29]
	0x01D980DC LDRB W8, [X19 + 0x58]
	0x01D980E0 CBZ W8, 0x1D980F8
	0x01D980E4 STRB W31, [X19 + 0x58]
	0x01D980E8 MOV X0, X19
	0x01D980EC LDP X20, X19, [X31 + 0x10]
	0x01D980F0 LDR X30, [X31], #0x20
	0x01D980F4 B 0x1D97E18
	0x01D980F8 ADRP X20, 0x235E000
	0x01D980FC LDR X20, [X20 + 0xA78]
	0x01D98100 LDR X0, [X20]
	0x01D98104 LDR W8, [X0 + 0xE0]
	0x01D98108 CBNZ W8, 0x1D98110
	0x01D9810C BL 0x1C16DFC
	0x01D98110 MOV X0, X19
	0x01D98114 MOV X1, X31
	0x01D98118 BL 0x1E77B08
	0x01D9811C LDR X0, [X19 + 0x38]
	0x01D98120 CBZ X0, 0x1D98224
	0x01D98124 MOV X1, X31
	0x01D98128 BL 0x1E9E538
	0x01D9812C CMP W0, 0x4
	0x01D98130 B.NE 0x1D98140
	0x01D98134 LDP X20, X19, [X31 + 0x10]
	0x01D98138 LDR X30, [X31], #0x20
	0x01D9813C RET
	0x01D98140 LDR X0, [X19 + 0x40]
	0x01D98144 CBZ X0, 0x1D98224
	0x01D98148 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2641000
	005 Move W8, [X20+2587]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x235F000
	012 Move X0, [X0+3352]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2587], W8
	016 Compare X19, 0
	017 JumpIfEqual {39}
	018 Move X9, 0x235F000
	019 Move X9, [X9+3352]
	020 Move W8, 1
	021 Move [X19+88], W8
	022 Move X8, [X19]
	023 Move X1, [X9]
	024 Move W10, [X8+304]
	025 Move W9, [X1+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, [X8+200]
	028 Add X8, X8, X9
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Call GrabbableItem.RPC_Respawn, X0
	036 Return 
	037 Move X0, X19
	038 Call 0x1C181E0
	039 Call 0x1C17F20

Method: System.Void RPC_HandleItemSold@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01D9814C BL 0x1E94078
	0x01D98150 ANDS W31, W0, 0x7
	0x01D98154 B.EQ 0x1D981AC
	0x01D98158 TBNZ X0, 0x0, 0x1D980E8
	0x01D9815C LDR X8, [X19 + 0x38]
	0x01D98160 CBZ X8, 0x1D98224
	0x01D98164 LDR X0, [X8 + 0x50]
	0x01D98168 CBZ X0, 0x1D98224
	0x01D9816C MOV X1, X31
	0x01D98170 BL 0x1EC4D00
	0x01D98174 TBZ X0, 0x0, 0x1D98134
	0x01D98178 LDR X8, [X19 + 0x38]
	0x01D9817C CBZ X8, 0x1D98224
	0x01D98180 LDR X0, [X8 + 0x50]
	0x01D98184 MOVZ W1, 0x8
	0x01D98188 MOV X2, X31
	0x01D9818C BL 0x1ED9318
	0x01D98190 LDR X8, [X19 + 0x40]
	0x01D98194 CBZ X8, 0x1D98224
	0x01D98198 LDR X8, [X8 + 0x20]
	0x01D9819C MOV X20, X0
	0x01D981A0 CBZ X8, 0x1D981E4
	0x01D981A4 LDR W0, [X8]
	0x01D981A8 B 0x1D981E8
	0x01D981AC LDR X0, [X20]
	0x01D981B0 LDR X19, [X19 + 0x40]
	0x01D981B4 LDR W8, [X0 + 0xE0]
	0x01D981B8 CBNZ W8, 0x1D981C0
	0x01D981BC BL 0x1C16DFC
	0x01D981C0 ADRP X8, 0x235E000
	0x01D981C4 LDR X8, [X8 + 0xF10]
	0x01D981C8 MOV X1, X19
	0x01D981CC LDP X20, X19, [X31 + 0x10]
	0x01D981D0 MOVZ W2, 0x7

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2641000
	005 Move W8, [X20+2588]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x235F000
	012 Move X0, [X0+3352]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2588], W8
	016 Compare X19, 0
	017 JumpIfEqual {39}
	018 Move X9, 0x235F000
	019 Move X9, [X9+3352]
	020 Move W8, 1
	021 Move [X19+88], W8
	022 Move X8, [X19]
	023 Move X1, [X9]
	024 Move W10, [X8+304]
	025 Move W9, [X1+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, [X8+200]
	028 Add X8, X8, X9
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Call GrabbableItem.RPC_HandleItemSold, X0
	036 Return 
	037 Move X0, X19
	038 Call 0x1C181E0
	039 Call 0x1C17F20

Method: System.Void RPC_Teleport@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01D981D4 LDR X0, [X8]
	0x01D981D8 MOV X3, X31
	0x01D981DC LDR X30, [X31], #0x20
	0x01D981E0 B 0x1E77B00
	0x01D981E4 MOV X0, X31
	0x01D981E8 LDR W1, [X19 + 0x68]
	0x01D981EC MOVZ W2, 0x1
	0x01D981F0 MOV X3, X31
	0x01D981F4 BL 0x1E9C23C
	0x01D981F8 STUR X0, [X20 + 0x1C]
	0x01D981FC CBZ X20, 0x1D98224
	0x01D98200 MOVZ W8, 0x40
	0x01D98204 STR W8, [X20 + 0xC]
	0x01D98208 LDR X0, [X19 + 0x38]
	0x01D9820C CBZ X0, 0x1D98224
	0x01D98210 MOV X1, X20
	0x01D98214 LDP X20, X19, [X31 + 0x10]
	0x01D98218 MOV X2, X31
	0x01D9821C LDR X30, [X31], #0x20
	0x01D98220 B 0x1EA1E24
	0x01D98224 BL 0x1C16F20
	0x01D98228 STP X30, X21, [X31 - 0x20]!
	0x01D9822C STP X20, X19, [X31 + 0x10]
	0x01D98230 ADRP X21, 0x2640000
	0x01D98234 LDRB W8, [X21 + 0xA2B]
	0x01D98238 MOV W20, W1
	0x01D9823C MOV X19, X0
	0x01D98240 TBNZ X8, 0x0, 0x1D98264
	0x01D98244 ADRP X0, 0x235E000
	0x01D98248 LDR X0, [X0 + 0xA78]
	0x01D9824C BL 0x1C16CF4
	0x01D98250 ADRP X0, 0x235E000
	0x01D98254 LDR X0, [X0 + 0xF18]
	0x01D98258 BL 0x1C16CF4
	0x01D9825C MOVZ W8, 0x1
	0x01D98260 STRB W8, [X21 + 0xA2B]
	0x01D98264 LDRB W8, [X19 + 0x58]
	0x01D98268 CBZ W8, 0x1D982E0
	0x01D9826C STRB W31, [X19 + 0x58]
	0x01D98270 MOV X0, X19
	0x01D98274 BL 0x1D974B8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2641000
	006 Move W8, [X21+2589]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x235F000
	014 Move X0, [X0+3352]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2589], W8
	018 Compare X19, 0
	019 JumpIfEqual {45}
	020 Move X9, 0x235F000
	021 Move X9, [X9+3352]
	022 Move W8, 1
	023 Move S0, [X20+36]
	024 Move S1, [X20+40]
	025 Move V2, [X20+44]
	026 Move [X19+88], W8
	027 Move X8, [X19]
	028 Move X1, [X9]
	029 Move W10, [X8+304]
	030 Move W9, [X1+304]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X8, [X8+200]
	033 Add X8, X8, X9
	034 NotImplemented "Instruction LDUR not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Call GrabbableItem.RPC_Teleport, X0, X1
	042 Return 
	043 Move X0, X19
	044 Call 0x1C181E0
	045 Call 0x1C17F20
	046 Add S0, S0, S3
	047 Add S1, S1, S4
	048 Add S2, S2, S5
	049 Return 

