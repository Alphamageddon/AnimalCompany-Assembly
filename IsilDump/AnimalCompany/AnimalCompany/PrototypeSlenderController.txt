Type: AnimalCompany.PrototypeSlenderController

Method: AnimalCompany.PrototypeSlenderController/SlenderState get_state()

Disassembly:
	0x01CCDEDC STR W8, [X19 + 0x30]
	0x01CCDEE0 LDR X8, [X22]
	0x01CCDEE4 ADRP X21, 0x2282000
	0x01CCDEE8 LDR X8, [X8 + 0xB8]
	0x01CCDEEC LDR X23, [X23 + 0x168]
	0x01CCDEF0 LDR X20, [X8 + 0x18]
	0x01CCDEF4 LDR X0, [X23]
	0x01CCDEF8 LDR X21, [X21 + 0x810]
	0x01CCDEFC BL 0x1B6EA0C
	0x01CCDF00 LDR X2, [X21]
	0x01CCDF04 MOV X1, X19
	0x01CCDF08 MOV X3, X31
	0x01CCDF0C MOV X21, X0
	0x01CCDF10 BL 0x27EC49C
	0x01CCDF14 MOV X0, X20
	0x01CCDF18 MOV X1, X21
	0x01CCDF1C MOV X2, X31
	0x01CCDF20 BL 0x322A948
	0x01CCDF24 CBZ X0, 0x1CCDF68
	0x01CCDF28 LDR X20, [X23]
	0x01CCDF2C MOV X19, X0
	0x01CCDF30 MOV X1, X20
	0x01CCDF34 BL 0x1B6E8FC
	0x01CCDF38 CBZ X0, 0x1CCDF5C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2281000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2283000
	016 Move X0, [X0+1944]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2283000
	023 Move X0, [X0+1952]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_state(AnimalCompany.PrototypeSlenderController/SlenderState value)

Disassembly:
	0x01CCDF3C LDR X8, [X22]
	0x01CCDF40 LDR X8, [X8 + 0xB8]
	0x01CCDF44 STR X0, [X8 + 0x18]
	0x01CCDF48 LDR X20, [X23]
	0x01CCDF4C MOV X0, X19
	0x01CCDF50 MOV X1, X20
	0x01CCDF54 BL 0x1B6E8FC
	0x01CCDF58 CBNZ X0, 0x1CCDF74
	0x01CCDF5C MOV X0, X19
	0x01CCDF60 MOV X1, X20
	0x01CCDF64 BL 0x1B6ECDC
	0x01CCDF68 LDR X8, [X22]
	0x01CCDF6C LDR X8, [X8 + 0xB8]
	0x01CCDF70 STR X31, [X8 + 0x18]
	0x01CCDF74 LDP X20, X19, [X31 + 0x20]
	0x01CCDF78 LDP X22, X21, [X31 + 0x10]
	0x01CCDF7C LDP X30, X23, [X31], #0x30
	0x01CCDF80 RET
	0x01CCDF84 BL 0x1B6EA1C
	0x01CCDF88 STR X1, [X0 + 0x48]
	0x01CCDF8C RET
	0x01CCDF90 STP D11, D10, [X31 - 0x50]!
	0x01CCDF94 STP D9, D8, [X31 + 0x10]
	0x01CCDF98 STP X30, X23, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2281000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2283000
	016 Move X0, [X0+1944]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2283000
	023 Move X0, [X0+1960]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void Spawned()

Disassembly:
	0x01CCDF9C STP X22, X21, [X31 + 0x30]
	0x01CCDFA0 STP X20, X19, [X31 + 0x40]

ISIL:
	001 Move W1, W31
	002 Call PrototypeSlenderController.set_state, X0, X1
	003 Return 

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01CCDFA4 ADRP X22, 0x2556000
	0x01CCDFA8 LDRB W8, [X22 + 0x5B0]
	0x01CCDFAC MOV W20, W2
	0x01CCDFB0 MOV X19, X1
	0x01CCDFB4 MOV V11.16B, V3.16B
	0x01CCDFB8 MOV V8.16B, V2.16B
	0x01CCDFBC MOV V9.16B, V1.16B
	0x01CCDFC0 MOV V10.16B, V0.16B
	0x01CCDFC4 MOV X21, X0
	0x01CCDFC8 TBNZ X8, 0x0, 0x1CCE010
	0x01CCDFCC ADRP X0, 0x2282000
	0x01CCDFD0 LDR X0, [X0 + 0x7D8]
	0x01CCDFD4 BL 0x1B6E7F0
	0x01CCDFD8 ADRP X0, 0x2282000
	0x01CCDFDC LDR X0, [X0 + 0x7E0]
	0x01CCDFE0 BL 0x1B6E7F0
	0x01CCDFE4 ADRP X0, 0x2280000
	0x01CCDFE8 LDR X0, [X0 + 0x478]
	0x01CCDFEC BL 0x1B6E7F0
	0x01CCDFF0 ADRP X0, 0x2282000
	0x01CCDFF4 LDR X0, [X0 + 0x808]
	0x01CCDFF8 BL 0x1B6E7F0
	0x01CCDFFC ADRP X0, 0x2282000
	0x01CCE000 LDR X0, [X0 + 0x358]
	0x01CCE004 BL 0x1B6E7F0
	0x01CCE008 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+64]
	005 Compare X0, 0
	006 JumpIfEqual {35}
	007 Move X1, X31
	008 Call NetworkObject.get_HasStateAuthority, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {22}
	013 Move X0, X19
	014 Call PrototypeSlenderController.get_state, X0
	015 NotImplemented "Instruction CMP not yet implemented."
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Compare W0, 0
	018 JumpIfNotEqual {22}
	019 Move X0, X19
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return 
	025 Move X0, X19
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Call PrototypeSlenderController.UpdateAttacking, X0
	029 Return 
	030 Move X0, X19
	031 Move X30, [X31+16]
	032 Move X19, [X31+24]
	033 Call PrototypeSlenderController.UpdateRetreat, X0
	034 Return 
	035 Call 0x1B6FA1C

Method: System.Void UpdateIdle()

Disassembly:
	0x01CCE00C STRB W8, [X22 + 0x5B0]
	0x01CCE010 CBZ X21, 0x1CCE258
	0x01CCE014 LDR X22, [X21 + 0x18]
	0x01CCE018 CBZ X22, 0x1CCE258
	0x01CCE01C LDR W1, [X22 + 0x18]
	0x01CCE020 CBZ W1, 0x1CCE0E8
	0x01CCE024 ADRP X23, 0x2281000
	0x01CCE028 LDR X23, [X23 + 0x7E0]
	0x01CCE02C MOV W0, W31
	0x01CCE030 MOV X2, X31
	0x01CCE034 BL 0x3A98D10
	0x01CCE038 LDR X2, [X23]
	0x01CCE03C MOV W1, W0
	0x01CCE040 MOV X0, X22
	0x01CCE044 BL 0x2E46254
	0x01CCE048 CBZ X19, 0x1CCE258
	0x01CCE04C ADRP X22, 0x227F000
	0x01CCE050 LDR X22, [X22 + 0x478]
	0x01CCE054 MOV X1, X0
	0x01CCE058 MOV X0, X19
	0x01CCE05C MOV X2, X31
	0x01CCE060 BL 0x3A65910
	0x01CCE064 MOV X0, X19
	0x01CCE068 MOV X1, X31
	0x01CCE06C BL 0x3A658D4
	0x01CCE070 LDR X8, [X22]
	0x01CCE074 MOV X22, X0
	0x01CCE078 LDR W9, [X8 + 0xE0]
	0x01CCE07C CBNZ W9, 0x1CCE088
	0x01CCE080 MOV X0, X8
	0x01CCE084 BL 0x1B6E8F8
	0x01CCE088 MOV X0, X22
	0x01CCE08C MOV X1, X31
	0x01CCE090 MOV X2, X31
	0x01CCE094 BL 0x3AA0AF0
	0x01CCE098 TBZ X0, 0x0, 0x1CCE100
	0x01CCE09C TBZ X20, 0x0, 0x1CCE0E8
	0x01CCE0A0 ADRP X8, 0x2281000
	0x01CCE0A4 LDR X8, [X8 + 0x358]
	0x01CCE0A8 LDR X8, [X8]
	0x01CCE0AC LDR X8, [X8 + 0xB8]
	0x01CCE0B0 LDR X8, [X8]
	0x01CCE0B4 CBZ X8, 0x1CCE258
	0x01CCE0B8 LDR X0, [X8 + 0x50]
	0x01CCE0BC CBZ X0, 0x1CCE258
	0x01CCE0C0 ADRP X8, 0x2281000
	0x01CCE0C4 LDR X8, [X8 + 0x808]
	0x01CCE0C8 MOV X1, X19
	0x01CCE0CC LDP X20, X19, [X31 + 0x40]
	0x01CCE0D0 LDP X22, X21, [X31 + 0x30]
	0x01CCE0D4 LDR X2, [X8]
	0x01CCE0D8 LDP X30, X23, [X31 + 0x20]
	0x01CCE0DC LDP D9, D8, [X31 + 0x10]
	0x01CCE0E0 LDP D11, D10, [X31], #0x50
	0x01CCE0E4 B 0x2368A00
	0x01CCE0E8 LDP X20, X19, [X31 + 0x40]
	0x01CCE0EC LDP X22, X21, [X31 + 0x30]
	0x01CCE0F0 LDP X30, X23, [X31 + 0x20]
	0x01CCE0F4 LDP D9, D8, [X31 + 0x10]
	0x01CCE0F8 LDP D11, D10, [X31], #0x50
	0x01CCE0FC RET
	0x01CCE100 LDR V0, [X21 + 0x20]
	0x01CCE104 MOV X0, X19
	0x01CCE108 MOV X1, X31
	0x01CCE10C FMUL S0, S0, S11
	0x01CCE110 BL 0x3A657B4
	0x01CCE114 LDP S0, S1, [X21 + 0x24]
	0x01CCE118 MOV X0, X31
	0x01CCE11C BL 0x3A98CD0
	0x01CCE120 MOV X0, X19
	0x01CCE124 MOV X1, X31
	0x01CCE128 BL 0x3A65800
	0x01CCE12C FMOV S0, 1
	0x01CCE130 MOV X0, X19
	0x01CCE134 MOV X1, X31
	0x01CCE138 BL 0x3A65DD0
	0x01CCE13C FMOV S0, 1
	0x01CCE140 MOV X0, X19
	0x01CCE144 MOV X1, X31
	0x01CCE148 BL 0x3A65EA4
	0x01CCE14C FMOV S0, 1
	0x01CCE150 MOV X0, X19
	0x01CCE154 MOV X1, X31
	0x01CCE158 BL 0x3A65F34
	0x01CCE15C LDR V0, [X21 + 0x30]
	0x01CCE160 MOV X0, X19
	0x01CCE164 MOV X1, X31
	0x01CCE168 BL 0x3A65F80
	0x01CCE16C MOV X0, X19
	0x01CCE170 MOV X1, X31
	0x01CCE174 BL 0x3A9B084
	0x01CCE178 CBZ X0, 0x1CCE258
	0x01CCE17C MOV V0.16B, V10.16B
	0x01CCE180 MOV V1.16B, V9.16B
	0x01CCE184 MOV V2.16B, V8.16B
	0x01CCE188 MOV X1, X31
	0x01CCE18C BL 0x3AA76F8
	0x01CCE190 LDR W1, [X21 + 0x2C]
	0x01CCE194 MOV X0, X19
	0x01CCE198 MOV X2, X31
	0x01CCE19C BL 0x3A65FCC
	0x01CCE1A0 MOV X0, X19
	0x01CCE1A4 TBZ X20, 0x0, 0x1CCE22C

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x2556000
	013 Move W8, [X20+1443]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0x2282000
	020 Move X0, [X0+1968]
	021 Call 0x1B6F7F0
	022 Move X0, 0x2280000
	023 Move X0, [X0+1216]
	024 Call 0x1B6F7F0
	025 Move X0, 0x2282000
	026 Move X0, [X0+1976]
	027 Call 0x1B6F7F0
	028 Move W8, 1
	029 Move [X20+1443], W8
	030 Move [X31+8], X31
	031 Move X0, [X19+144]
	032 Compare X0, 0
	033 JumpIfEqual {122}
	034 Move X8, 0x2282000
	035 Move X8, [X8+1976]
	036 Move W2, W31
	037 Move X3, X31
	038 Move X1, [X8]
	039 Call Animator.SetBool, X0, X1, X2
	040 Move X0, [X19+160]
	041 Compare X0, 0
	042 JumpIfEqual {122}
	043 Move W1, 1
	044 Move X2, X31
	045 Call NavMeshAgent.set_isStopped, X0, X1
	046 Move X0, X19
	047 Move X1, X31
	048 Call Component.get_transform, X0
	049 Compare X0, 0
	050 JumpIfEqual {122}
	051 Move X20, 0x2280000
	052 Move X20, [X20+1216]
	053 Move X1, X31
	054 Call Transform.get_position, X0
	055 Move W0, [X19+152]
	056 Move V10, [X19+188]
	057 Move X1, X31
	058 Move V8, V0
	059 Move V9, V1
	060 Move V11, V2
	061 Call LayerMask.op_Implicit, X0
	062 Move X8, [X20]
	063 Move W20, W0
	064 Move W9, [X8+224]
	065 Compare W9, 0
	066 JumpIfNotEqual {69}
	067 Move X0, X8
	068 Call 0x1B6F8F8
	069 Move V0, V8
	070 Move V1, V9
	071 Move V2, V11
	072 Move V3, V10
	073 Move W0, W20
	074 Move X1, X31
	075 Call Physics.OverlapSphere, X0, V0, X1
	076 Compare X0, 0
	077 JumpIfEqual {122}
	078 Move X8, [X0+24]
	079 Move X20, X0
	080 Compare X8, 0
	081 JumpIfEqual {110}
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X23, 0x2282000
	084 Move X23, [X23+1968]
	085 Move X21, X31
	086 Add X22, X20, 32
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X0, [X22]
	089 Compare X0, 0
	090 JumpIfEqual {122}
	091 Move X1, X31
	092 Call Component.get_gameObject, X0
	093 Compare X0, 0
	094 JumpIfEqual {122}
	095 Move X2, [X23]
	096 Add X1, X31, 8
	097 Call 0x20D12D0, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfEqual {105}
	102 Move W8, [X20+24]
	103 Add X21, X21, 1
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X8, [X31+8]
	106 Move W1, 1
	107 Move X0, X19
	108 Move [X19+176], X8
	109 Call PrototypeSlenderController.set_state, X0, X1
	110 Move X20, [X31+80]
	111 Move X19, [X31+88]
	112 Move X22, [X31+64]
	113 Move X21, [X31+72]
	114 Move X30, [X31+48]
	115 Move X23, [X31+56]
	116 Move D9, [X31+32]
	117 Move D8, [X31+40]
	118 Move D11, [X31+16]
	119 Move D10, [X31+24]
	120 Add X31, X31, 96
	121 Return 
	122 Call 0x1B6FA1C
	123 Call 0x1B6FA24

Method: System.Void UpdateAttacking()

Disassembly:
	0x01CCE1A8 MOV W1, W31
	0x01CCE1AC MOV X2, X31
	0x01CCE1B0 BL 0x3A65EF0
	0x01CCE1B4 MOV X0, X19
	0x01CCE1B8 MOV W1, W31
	0x01CCE1BC MOV X2, X31
	0x01CCE1C0 BL 0x3A65E1C
	0x01CCE1C4 MOV X0, X19
	0x01CCE1C8 MOV X1, X31
	0x01CCE1CC BL 0x3A65954
	0x01CCE1D0 ADRP X8, 0x2281000
	0x01CCE1D4 LDR X8, [X8 + 0x358]
	0x01CCE1D8 MOV X0, X19
	0x01CCE1DC MOV X1, X31
	0x01CCE1E0 LDR X8, [X8]
	0x01CCE1E4 LDR X8, [X8 + 0xB8]
	0x01CCE1E8 LDR X20, [X8]
	0x01CCE1EC BL 0x3A658D4
	0x01CCE1F0 CBZ X0, 0x1CCE258
	0x01CCE1F4 MOV X1, X31
	0x01CCE1F8 BL 0x3A64C04
	0x01CCE1FC MOV X0, X19
	0x01CCE200 BL 0x1CCE630
	0x01CCE204 CBZ X20, 0x1CCE258
	0x01CCE208 MOV X1, X0
	0x01CCE20C MOV X0, X20
	0x01CCE210 LDP X20, X19, [X31 + 0x40]
	0x01CCE214 LDP X22, X21, [X31 + 0x30]
	0x01CCE218 LDP X30, X23, [X31 + 0x20]
	0x01CCE21C LDP D9, D8, [X31 + 0x10]
	0x01CCE220 MOV X2, X31
	0x01CCE224 LDP D11, D10, [X31], #0x50
	0x01CCE228 B 0x3A9E9B0
	0x01CCE22C MOV X1, X31
	0x01CCE230 BL 0x3A658D4
	0x01CCE234 MOV X1, X0
	0x01CCE238 MOV X0, X19
	0x01CCE23C LDP X20, X19, [X31 + 0x40]
	0x01CCE240 LDP X22, X21, [X31 + 0x30]
	0x01CCE244 LDP X30, X23, [X31 + 0x20]
	0x01CCE248 LDP D9, D8, [X31 + 0x10]
	0x01CCE24C MOV X2, X31
	0x01CCE250 LDP D11, D10, [X31], #0x50
	0x01CCE254 B 0x3A65994
	0x01CCE258 BL 0x1B6EA1C
	0x01CCE25C STP D11, D10, [X31 - 0x50]!
	0x01CCE260 STP D9, D8, [X31 + 0x10]
	0x01CCE264 STR X30, [X31 + 0x20]
	0x01CCE268 STP X22, X21, [X31 + 0x30]
	0x01CCE26C STP X20, X19, [X31 + 0x40]
	0x01CCE270 ADRP X21, 0x2555000
	0x01CCE274 ADRP X22, 0x2280000
	0x01CCE278 LDRB W8, [X21 + 0x5AF]
	0x01CCE27C LDR X22, [X22 + 0x1C0]
	0x01CCE280 MOV V8.16B, V3.16B
	0x01CCE284 MOV V9.16B, V2.16B
	0x01CCE288 MOV V10.16B, V1.16B
	0x01CCE28C MOV V11.16B, V0.16B
	0x01CCE290 MOV X19, X1
	0x01CCE294 MOV X20, X0
	0x01CCE298 TBNZ X8, 0x0, 0x1CCE328
	0x01CCE29C ADRP X0, 0x227F000
	0x01CCE2A0 LDR X0, [X0 + 0x628]
	0x01CCE2A4 BL 0x1B6E7F0
	0x01CCE2A8 ADRP X0, 0x2280000
	0x01CCE2AC LDR X0, [X0 + 0x1C0]
	0x01CCE2B0 BL 0x1B6E7F0
	0x01CCE2B4 ADRP X0, 0x227F000
	0x01CCE2B8 LDR X0, [X0 + 0x478]
	0x01CCE2BC BL 0x1B6E7F0
	0x01CCE2C0 ADRP X0, 0x2281000
	0x01CCE2C4 LDR X0, [X0 + 0x7E8]
	0x01CCE2C8 BL 0x1B6E7F0
	0x01CCE2CC ADRP X0, 0x2281000
	0x01CCE2D0 LDR X0, [X0 + 0x7F0]
	0x01CCE2D4 BL 0x1B6E7F0
	0x01CCE2D8 ADRP X0, 0x2281000
	0x01CCE2DC LDR X0, [X0 + 0x838]
	0x01CCE2E0 BL 0x1B6E7F0
	0x01CCE2E4 ADRP X0, 0x2281000
	0x01CCE2E8 LDR X0, [X0 + 0x358]
	0x01CCE2EC BL 0x1B6E7F0
	0x01CCE2F0 ADRP X0, 0x2281000
	0x01CCE2F4 LDR X0, [X0 + 0x840]
	0x01CCE2F8 BL 0x1B6E7F0
	0x01CCE2FC ADRP X0, 0x2281000
	0x01CCE300 LDR X0, [X0 + 0x848]
	0x01CCE304 BL 0x1B6E7F0
	0x01CCE308 ADRP X0, 0x2281000
	0x01CCE30C LDR X0, [X0 + 0x850]
	0x01CCE310 BL 0x1B6E7F0
	0x01CCE314 ADRP X0, 0x2281000
	0x01CCE318 LDR X0, [X0 + 0x858]
	0x01CCE31C BL 0x1B6E7F0
	0x01CCE320 MOVZ W8, 0x1
	0x01CCE324 STRB W8, [X21 + 0x5AF]
	0x01CCE328 LDR X0, [X22]
	0x01CCE32C LDR W8, [X0 + 0xE0]
	0x01CCE330 CBNZ W8, 0x1CCE33C
	0x01CCE334 BL 0x1B6E8F8
	0x01CCE338 LDR X0, [X22]
	0x01CCE33C LDR X8, [X0 + 0xB8]
	0x01CCE340 LDRB W9, [X8 + 0x20]
	0x01CCE344 CBZ W9, 0x1CCE420
	0x01CCE348 LDR W9, [X0 + 0xE0]
	0x01CCE34C CBNZ W9, 0x1CCE35C
	0x01CCE350 BL 0x1B6E8F8
	0x01CCE354 LDR X8, [X22]
	0x01CCE358 LDR X8, [X8 + 0xB8]
	0x01CCE35C STRB W31, [X8 + 0x20]
	0x01CCE360 ADRP X8, 0x2281000
	0x01CCE364 LDR X8, [X8 + 0x838]
	0x01CCE368 ADRP X20, 0x227F000
	0x01CCE36C MOV X0, X19
	0x01CCE370 LDR X1, [X8]
	0x01CCE374 LDR X20, [X20 + 0x478]
	0x01CCE378 BL 0x21293B0
	0x01CCE37C LDR X8, [X20]
	0x01CCE380 MOV X20, X0
	0x01CCE384 LDR W9, [X8 + 0xE0]
	0x01CCE388 CBNZ W9, 0x1CCE394
	0x01CCE38C MOV X0, X8
	0x01CCE390 BL 0x1B6E8F8
	0x01CCE394 MOV X0, X20
	0x01CCE398 MOV X1, X31
	0x01CCE39C MOV X2, X31
	0x01CCE3A0 BL 0x3AA0AF0
	0x01CCE3A4 TBZ X0, 0x0, 0x1CCE450
	0x01CCE3A8 ADRP X8, 0x2281000
	0x01CCE3AC LDR X8, [X8 + 0x848]
	0x01CCE3B0 MOV X1, X19
	0x01CCE3B4 MOV X2, X31
	0x01CCE3B8 LDR X0, [X8]
	0x01CCE3BC BL 0x3084780
	0x01CCE3C0 ADRP X8, 0x227F000
	0x01CCE3C4 LDR X8, [X8 + 0x628]
	0x01CCE3C8 MOV X19, X0
	0x01CCE3CC LDR X8, [X8]
	0x01CCE3D0 LDR W9, [X8 + 0xE0]
	0x01CCE3D4 CBNZ W9, 0x1CCE3E0
	0x01CCE3D8 MOV X0, X8
	0x01CCE3DC BL 0x1B6E8F8
	0x01CCE3E0 ADRP X8, 0x2281000
	0x01CCE3E4 ADRP X9, 0x2281000
	0x01CCE3E8 LDR X8, [X8 + 0x850]
	0x01CCE3EC LDR X9, [X9 + 0x840]
	0x01CCE3F0 MOV X0, X19
	0x01CCE3F4 LDP X20, X19, [X31 + 0x40]
	0x01CCE3F8 LDR X2, [X8]
	0x01CCE3FC LDR X3, [X9]
	0x01CCE400 LDP X22, X21, [X31 + 0x30]
	0x01CCE404 LDR X30, [X31 + 0x20]
	0x01CCE408 LDP D9, D8, [X31 + 0x10]
	0x01CCE40C MOVZ W4, 0x5A
	0x01CCE410 MOV X1, X31
	0x01CCE414 MOV X5, X31
	0x01CCE418 LDP D11, D10, [X31], #0x50
	0x01CCE41C B 0x342B554
	0x01CCE420 CBZ X20, 0x1CCE5E8
	0x01CCE424 MOV X0, X20
	0x01CCE428 MOV X1, X31
	0x01CCE42C BL 0x1D87040
	0x01CCE430 CMP W0, 0x4
	0x01CCE434 B.NE 0x1CCE48C
	0x01CCE438 LDP X20, X19, [X31 + 0x40]
	0x01CCE43C LDP X22, X21, [X31 + 0x30]
	0x01CCE440 LDR X30, [X31 + 0x20]
	0x01CCE444 LDP D9, D8, [X31 + 0x10]
	0x01CCE448 LDP D11, D10, [X31], #0x50
	0x01CCE44C RET
	0x01CCE450 ADRP X8, 0x2281000
	0x01CCE454 LDR X8, [X8 + 0x358]
	0x01CCE458 LDR X8, [X8]
	0x01CCE45C LDR X8, [X8 + 0xB8]
	0x01CCE460 LDR X8, [X8]
	0x01CCE464 CBZ X8, 0x1CCE5E4
	0x01CCE468 LDR X0, [X8 + 0x50]
	0x01CCE46C CBZ X0, 0x1CCE5E4
	0x01CCE470 LDR W8, [X0 + 0x20]
	0x01CCE474 CBZ W8, 0x1CCE570
	0x01CCE478 ADRP X8, 0x2281000
	0x01CCE47C LDR X8, [X8 + 0x7E8]
	0x01CCE480 LDR X1, [X8]
	0x01CCE484 BL 0x2368B84
	0x01CCE488 B 0x1CCE574
	0x01CCE48C MOV X0, X19
	0x01CCE490 MOV X1, X31
	0x01CCE494 BL 0x1D816D4
	0x01CCE498 ADD W8, W0, 0x1B
	0x01CCE49C AND W21, W8, 0xFFFFFFFC
	0x01CCE4A0 CMP W21, 0x201
	0x01CCE4A4 B.GE 0x1CCE5A8
	0x01CCE4A8 LDR X0, [X20 + 0x50]
	0x01CCE4AC CBZ X0, 0x1CCE5E4
	0x01CCE4B0 MOV X1, X31
	0x01CCE4B4 BL 0x1DBEFE4
	0x01CCE4B8 TBZ X0, 0x0, 0x1CCE360
	0x01CCE4BC LDR X0, [X20 + 0x50]
	0x01CCE4C0 MOV W1, W21
	0x01CCE4C4 MOV X2, X31
	0x01CCE4C8 BL 0x1DD601C
	0x01CCE4CC MOV X21, X0
	0x01CCE4D0 MOVZ W0, 0x1
	0x01CCE4D4 MOV X1, X31
	0x01CCE4D8 BL 0x1D29EBC
	0x01CCE4DC LDR X0, [X22]
	0x01CCE4E0 ADD X22, X21, 0x1C
	0x01CCE4E4 LDR W8, [X0 + 0xE0]
	0x01CCE4E8 CBNZ W8, 0x1CCE4F0
	0x01CCE4EC BL 0x1B6E8F8
	0x01CCE4F0 ADRP X8, 0x2281000
	0x01CCE4F4 LDR X8, [X8 + 0x858]
	0x01CCE4F8 MOV X1, X31
	0x01CCE4FC LDR X0, [X8]
	0x01CCE500 BL 0x1D69268
	0x01CCE504 MOV X1, X31
	0x01CCE508 BL 0x1DA8294
	0x01CCE50C STUR X0, [X21 + 0x1C]
	0x01CCE510 ADD X0, X21, 0x24
	0x01CCE514 MOV X1, X19
	0x01CCE518 MOV X2, X31
	0x01CCE51C BL 0x1D816C4
	0x01CCE520 ADD W8, W0, 0xB
	0x01CCE524 SXTW X8, W8
	0x01CCE528 AND X8, X8, 0xFFFFFFFF
	0x01CCE52C ADD X9, X22, X8
	0x01CCE530 ADD W10, W8, 0xC
	0x01CCE534 STP S11, S10, [X9]
	0x01CCE538 STR S9, [X9 + 0x8]
	0x01CCE53C STR S8, [X22, W10, SXTW]
	0x01CCE540 CBZ X21, 0x1CCE5E4
	0x01CCE544 LDR W9, [X21 + 0x14]
	0x01CCE548 UBFM W8, W8, 0x1D, 0x1C
	0x01CCE54C ADD W8, W8, 0x80
	0x01CCE550 STR W8, [X21 + 0xC]
	0x01CCE554 ORR W8, W9, 0x4
	0x01CCE558 MOV X0, X20
	0x01CCE55C MOV X1, X21
	0x01CCE560 MOV X2, X31
	0x01CCE564 STR W8, [X21 + 0x14]
	0x01CCE568 BL 0x1D8A710
	0x01CCE56C B 0x1CCE360
	0x01CCE570 BL 0x1CCDD6C
	0x01CCE574 MOV X1, X0
	0x01CCE578 MOV X0, X20
	0x01CCE57C MOV V2.16B, V9.16B
	0x01CCE580 MOV V3.16B, V8.16B
	0x01CCE584 LDP X20, X19, [X31 + 0x40]
	0x01CCE588 LDP X22, X21, [X31 + 0x30]
	0x01CCE58C LDR X30, [X31 + 0x20]
	0x01CCE590 LDP D9, D8, [X31 + 0x10]
	0x01CCE594 MOVZ W2, 0x1
	0x01CCE598 MOV V0.16B, V11.16B
	0x01CCE59C MOV V1.16B, V10.16B
	0x01CCE5A0 LDP D11, D10, [X31], #0x50
	0x01CCE5A4 B 0x1CCDF90
	0x01CCE5A8 LDR X0, [X22]
	0x01CCE5AC LDR W8, [X0 + 0xE0]
	0x01CCE5B0 CBNZ W8, 0x1CCE5B8
	0x01CCE5B4 BL 0x1B6E8F8
	0x01CCE5B8 ADRP X8, 0x2281000
	0x01CCE5BC LDR X8, [X8 + 0x858]
	0x01CCE5C0 MOV W1, W21
	0x01CCE5C4 LDP X20, X19, [X31 + 0x40]
	0x01CCE5C8 LDP X22, X21, [X31 + 0x30]
	0x01CCE5CC LDR X0, [X8]
	0x01CCE5D0 LDR X30, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], D13
	003 Move [X31+104], D12
	004 Move [X31+112], D11
	005 Move [X31+120], D10
	006 Move [X31+128], D9
	007 Move [X31+136], D8
	008 Move [X31+144], X30
	009 Move [X31+160], X22
	010 Move [X31+168], X21
	011 Move [X31+176], X20
	012 Move [X31+184], X19
	013 Move X20, 0x2556000
	014 Move W8, [X20+1444]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {37}
	020 Move X0, 0x2280000
	021 Move X0, [X0+1144]
	022 Call 0x1B6F7F0
	023 Move X0, 0x2282000
	024 Move X0, [X0+1984]
	025 Call 0x1B6F7F0
	026 Move X0, 0x2282000
	027 Move X0, [X0+1992]
	028 Call 0x1B6F7F0
	029 Move X0, 0x2282000
	030 Move X0, [X0+1976]
	031 Call 0x1B6F7F0
	032 Move X0, 0x2282000
	033 Move X0, [X0+2000]
	034 Call 0x1B6F7F0
	035 Move W8, 1
	036 Move [X20+1444], W8
	037 NotImplemented "Instruction MOVI not yet implemented."
	038 Move [X31+80], W31
	039 Move [X31+48], V0
	040 Move [X31+56], V0
	041 Move X0, [X19+144]
	042 Compare X0, 0
	043 JumpIfEqual {311}
	044 Move X8, 0x2282000
	045 Move X8, [X8+1976]
	046 Move X20, 0x2280000
	047 Move W2, 1
	048 Move X3, X31
	049 Move X1, [X8]
	050 Move X20, [X20+1144]
	051 Call Animator.SetBool, X0, X1, X2
	052 Move X0, [X20]
	053 Move X20, [X19+176]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1B6F8F8
	058 Move X0, X20
	059 Move X1, X31
	060 Move X2, X31
	061 Call Object.op_Equality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {68}
	066 Move X0, X19
	067 Move W1, W31
	068 Move X0, [X19+176]
	069 Compare X0, 0
	070 JumpIfEqual {311}
	071 Move X1, X31
	072 Call NetPlayer.get_isDie, X0
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfEqual {294}
	077 Move X0, [X19+144]
	078 Compare X0, 0
	079 JumpIfEqual {311}
	080 Add X8, X31, 8
	081 Move W1, W31
	082 Move X2, X31
	083 Call Animator.GetCurrentAnimatorStateInfo, X0, X1
	084 Move X9, 0x2282000
	085 NotImplemented "Instruction LDUR not yet implemented."
	086 NotImplemented "Instruction LDUR not yet implemented."
	087 Move W8, [X31+40]
	088 Move X9, [X9+2000]
	089 Add X0, X31, 48
	090 Move X2, X31
	091 Move [X31+48], V0
	092 Move [X31+56], V1
	093 Move X1, [X9]
	094 Move [X31+80], W8
	095 Call AnimatorStateInfo.IsName, X0, X1
	096 Move X20, [X19+160]
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {119}
	101 Move X0, [X19+176]
	102 Compare X0, 0
	103 JumpIfEqual {311}
	104 Move X1, X31
	105 Call Component.get_transform, X0
	106 Compare X0, 0
	107 JumpIfEqual {311}
	108 Move X1, X31
	109 Call Transform.get_position, X0
	110 Compare X20, 0
	111 JumpIfEqual {311}
	112 Move X0, X20
	113 Move X1, X31
	114 Call NavMeshAgent.SetDestination, X0, X1
	115 Move X0, [X19+160]
	116 Compare X0, 0
	117 JumpIfEqual {311}
	118 Move W1, W31
	119 Compare X20, 0
	120 JumpIfEqual {311}
	121 Move W1, 1
	122 Move X0, X20
	123 Move X2, X31
	124 Call NavMeshAgent.set_isStopped, X0, X1
	125 Move X0, X19
	126 Move X1, X31
	127 Call Component.get_transform, X0
	128 Compare X0, 0
	129 JumpIfEqual {311}
	130 Move X1, X31
	131 Call Transform.get_position, X0
	132 Move X0, [X19+176]
	133 Compare X0, 0
	134 JumpIfEqual {311}
	135 Move X1, X31
	136 Move V8, V0
	137 Move V9, V1
	138 Move V10, V2
	139 Call Component.get_transform, X0
	140 Compare X0, 0
	141 JumpIfEqual {311}
	142 Move X1, X31
	143 Call Transform.get_position, X0
	144 Move X21, 0x2556000
	145 Move W8, [X21+1286]
	146 Move V11, V0
	147 Move V12, V1
	148 Move V13, V2
	149 Compare W8, 0
	150 JumpIfNotEqual {156}
	151 Move X0, 0x2280000
	152 Move X0, [X0+1160]
	153 Call 0x1B6F7F0
	154 Move W8, 1
	155 Move [X21+1286], W8
	156 Move X22, 0x2280000
	157 Move X22, [X22+1160]
	158 Subtract S11, S8, S11
	159 Subtract S9, S9, S12
	160 Subtract S8, S10, S13
	161 Move X0, [X22]
	162 Move W8, [X0+224]
	163 Compare W8, 0
	164 JumpIfNotEqual {166}
	165 Call 0x1B6F8F8
	166 Move V3, [X19+188]
	167 Multiply S0, S11, S11
	168 Multiply S1, S9, S9
	169 Multiply S2, S8, S8
	170 Add S0, S0, S1
	171 Add S0, S2, S0
	172 Move S1, 1.5
	173 NotImplemented "Instruction FSQRT not yet implemented."
	174 Multiply S1, S3, S1
	175 NotImplemented "Instruction FCMP not yet implemented."
	176 Move W1, 2
	177 Move X0, X19
	178 Call PrototypeSlenderController.set_state, X0, X1
	179 Move X0, X19
	180 Move X1, X31
	181 Call Component.get_transform, X0
	182 Compare X0, 0
	183 JumpIfEqual {311}
	184 Move X1, X31
	185 Call Transform.get_position, X0
	186 Move X0, [X19+176]
	187 Compare X0, 0
	188 JumpIfEqual {311}
	189 Move X1, X31
	190 Move V8, V0
	191 Move V9, V1
	192 Move V10, V2
	193 Call Component.get_transform, X0
	194 Compare X0, 0
	195 JumpIfEqual {311}
	196 Move X1, X31
	197 Call Transform.get_position, X0
	198 Move W8, [X21+1286]
	199 Move V11, V0
	200 Move V12, V1
	201 Move V13, V2
	202 Compare W8, 0
	203 JumpIfNotEqual {209}
	204 Move X0, 0x2280000
	205 Move X0, [X0+1160]
	206 Call 0x1B6F7F0
	207 Move W8, 1
	208 Move [X21+1286], W8
	209 Move X0, [X22]
	210 Subtract S11, S8, S11
	211 Subtract S9, S9, S12
	212 Subtract S8, S10, S13
	213 Move W8, [X0+224]
	214 Compare W8, 0
	215 JumpIfNotEqual {217}
	216 Call 0x1B6F8F8
	217 Multiply S0, S11, S11
	218 Multiply S1, S9, S9
	219 Move V2, [X19+192]
	220 Add S0, S0, S1
	221 Multiply S1, S8, S8
	222 Add S0, S1, S0
	223 NotImplemented "Instruction FSQRT not yet implemented."
	224 NotImplemented "Instruction FCMP not yet implemented."
	225 Move X0, [X19+144]
	226 Compare X0, 0
	227 JumpIfEqual {311}
	228 Move X8, 0x2282000
	229 Move X8, [X8+1984]
	230 Move X2, X31
	231 Move X1, [X8]
	232 Call Animator.SetTrigger, X0, X1
	233 Move X20, [X19+176]
	234 Move X0, X19
	235 Move X1, X31
	236 Call Component.get_transform, X0
	237 Compare X20, 0
	238 JumpIfEqual {311}
	239 Move X8, 0x2282000
	240 Move X3, [X19+136]
	241 Move X8, [X8+1992]
	242 Move X2, X0
	243 Move W1, 100
	244 Move X0, X20
	245 Move X5, [X8]
	246 Move X4, X3
	247 Move X6, X31
	248 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5
	249 Move W1, 2
	250 Move X0, X19
	251 Call PrototypeSlenderController.set_state, X0, X1
	252 Move X0, X19
	253 Move X1, X31
	254 Call Component.get_transform, X0
	255 Compare X0, 0
	256 JumpIfEqual {311}
	257 Move X1, X31
	258 Call Transform.get_position, X0
	259 Move X0, [X19+168]
	260 Compare X0, 0
	261 JumpIfEqual {311}
	262 Move X1, X31
	263 Move V8, V0
	264 Move V9, V1
	265 Move V10, V2
	266 Call Transform.get_position, X0
	267 Move W8, [X21+1286]
	268 Move V11, V0
	269 Move V12, V1
	270 Move V13, V2
	271 Compare W8, 0
	272 JumpIfNotEqual {278}
	273 Move X0, 0x2280000
	274 Move X0, [X0+1160]
	275 Call 0x1B6F7F0
	276 Move W8, 1
	277 Move [X21+1286], W8
	278 Move X0, [X22]
	279 Subtract S11, S8, S11
	280 Subtract S9, S9, S12
	281 Subtract S8, S10, S13
	282 Move W8, [X0+224]
	283 Compare W8, 0
	284 JumpIfNotEqual {286}
	285 Call 0x1B6F8F8
	286 Multiply S0, S11, S11
	287 Multiply S1, S9, S9
	288 Move V2, [X19+184]
	289 Add S0, S0, S1
	290 Multiply S1, S8, S8
	291 Add S0, S1, S0
	292 NotImplemented "Instruction FSQRT not yet implemented."
	293 NotImplemented "Instruction FCMP not yet implemented."
	294 Move W1, 2
	295 Move X0, X19
	296 Move [X19+176], X31
	297 Call PrototypeSlenderController.set_state, X0, X1
	298 Move X20, [X31+176]
	299 Move X19, [X31+184]
	300 Move X22, [X31+160]
	301 Move X21, [X31+168]
	302 Move X30, [X31+144]
	303 Move D9, [X31+128]
	304 Move D8, [X31+136]
	305 Move D11, [X31+112]
	306 Move D10, [X31+120]
	307 Move D13, [X31+96]
	308 Move D12, [X31+104]
	309 Add X31, X31, 192
	310 Return 
	311 Call 0x1B6FA1C

Method: System.Void UpdateRetreat()

Disassembly:
	0x01CCE5D4 LDP D9, D8, [X31 + 0x10]
	0x01CCE5D8 MOV X2, X31
	0x01CCE5DC LDP D11, D10, [X31], #0x50
	0x01CCE5E0 B 0x1D69494
	0x01CCE5E4 BL 0x1B6EA1C
	0x01CCE5E8 ADRP X0, 0x2281000
	0x01CCE5EC LDR X0, [X0 + 0x718]
	0x01CCE5F0 BL 0x1B6E804
	0x01CCE5F4 BL 0x1B6EA0C
	0x01CCE5F8 MOV X19, X0
	0x01CCE5FC ADRP X0, 0x2281000
	0x01CCE600 LDR X0, [X0 + 0x720]
	0x01CCE604 BL 0x1B6E804
	0x01CCE608 MOV X1, X0
	0x01CCE60C MOV X0, X19
	0x01CCE610 MOV X2, X31
	0x01CCE614 BL 0x3173C38
	0x01CCE618 ADRP X0, 0x2281000
	0x01CCE61C LDR X0, [X0 + 0x860]
	0x01CCE620 BL 0x1B6E804
	0x01CCE624 MOV X1, X0
	0x01CCE628 MOV X0, X19
	0x01CCE62C BL 0x1B6E8E8
	0x01CCE630 STR D8, [X31 - 0x30]!
	0x01CCE634 STP X30, X21, [X31 + 0x10]
	0x01CCE638 STP X20, X19, [X31 + 0x20]
	0x01CCE63C ADRP X20, 0x2555000
	0x01CCE640 ADRP X21, 0x2281000
	0x01CCE644 LDRB W8, [X20 + 0x5B1]
	0x01CCE648 LDR X21, [X21 + 0x868]
	0x01CCE64C MOV V8.16B, V0.16B
	0x01CCE650 MOV X19, X0
	0x01CCE654 TBNZ X8, 0x0, 0x1CCE66C
	0x01CCE658 ADRP X0, 0x2281000
	0x01CCE65C LDR X0, [X0 + 0x868]
	0x01CCE660 BL 0x1B6E7F0
	0x01CCE664 MOVZ W8, 0x1
	0x01CCE668 STRB W8, [X20 + 0x5B1]
	0x01CCE66C LDR X0, [X21]
	0x01CCE670 BL 0x1B6EA0C
	0x01CCE674 MOV X1, X31
	0x01CCE678 MOV X20, X0
	0x01CCE67C BL 0x32276F8
	0x01CCE680 STR W31, [X20 + 0x10]
	0x01CCE684 STR X19, [X20 + 0x28]
	0x01CCE688 STR S8, [X20 + 0x20]
	0x01CCE68C MOV X0, X20
	0x01CCE690 LDP X20, X19, [X31 + 0x20]
	0x01CCE694 LDP X30, X21, [X31 + 0x10]
	0x01CCE698 LDR V8, [X31], #0x30
	0x01CCE69C RET
	0x01CCE6A0 STR X30, [X31 - 0x20]!
	0x01CCE6A4 STP X20, X19, [X31 + 0x10]
	0x01CCE6A8 MOV W19, W1
	0x01CCE6AC MOV X1, X31
	0x01CCE6B0 MOV X20, X0
	0x01CCE6B4 BL 0x32276F8
	0x01CCE6B8 STR W19, [X20 + 0x10]
	0x01CCE6BC LDP X20, X19, [X31 + 0x10]
	0x01CCE6C0 LDR X30, [X31], #0x20
	0x01CCE6C4 RET
	0x01CCE6C8 STR X30, [X31 - 0x30]!
	0x01CCE6CC STP X22, X21, [X31 + 0x10]
	0x01CCE6D0 STP X20, X19, [X31 + 0x20]
	0x01CCE6D4 ADRP X21, 0x2555000
	0x01CCE6D8 ADRP X22, 0x2281000
	0x01CCE6DC ADRP X20, 0x2281000
	0x01CCE6E0 LDRB W8, [X21 + 0x5B2]
	0x01CCE6E4 LDR X22, [X22 + 0x870]
	0x01CCE6E8 LDR X20, [X20 + 0x878]
	0x01CCE6EC MOV X19, X0
	0x01CCE6F0 TBNZ X8, 0x0, 0x1CCE714
	0x01CCE6F4 ADRP X0, 0x2281000
	0x01CCE6F8 LDR X0, [X0 + 0x878]
	0x01CCE6FC BL 0x1B6E7F0
	0x01CCE700 ADRP X0, 0x2281000
	0x01CCE704 LDR X0, [X0 + 0x870]
	0x01CCE708 BL 0x1B6E7F0
	0x01CCE70C MOVZ W8, 0x1
	0x01CCE710 STRB W8, [X21 + 0x5B2]
	0x01CCE714 LDR X0, [X22]
	0x01CCE718 BL 0x1B6EA0C
	0x01CCE71C LDR X1, [X20]
	0x01CCE720 MOV X20, X0
	0x01CCE724 BL 0x23684F8
	0x01CCE728 STR X20, [X19 + 0x50]
	0x01CCE72C MOV X0, X19
	0x01CCE730 LDP X20, X19, [X31 + 0x20]
	0x01CCE734 LDP X22, X21, [X31 + 0x10]
	0x01CCE738 MOV X1, X31
	0x01CCE73C LDR X30, [X31], #0x30
	0x01CCE740 B 0x1D6B70C
	0x01CCE744 SUB X31, X31, 0x60
	0x01CCE748 STP D11, D10, [X31 + 0x10]
	0x01CCE74C STP D9, D8, [X31 + 0x20]
	0x01CCE750 STP X30, X23, [X31 + 0x30]
	0x01CCE754 STP X22, X21, [X31 + 0x40]
	0x01CCE758 STP X20, X19, [X31 + 0x50]
	0x01CCE75C ADRP X22, 0x2555000
	0x01CCE760 ADRP X21, 0x2280000
	0x01CCE764 LDRB W8, [X22 + 0x5B3]
	0x01CCE768 LDR X21, [X21 + 0x1C0]
	0x01CCE76C MOV X20, X1
	0x01CCE770 MOV X19, X0
	0x01CCE774 TBNZ X8, 0x0, 0x1CCE78C
	0x01CCE778 ADRP X0, 0x2280000
	0x01CCE77C LDR X0, [X0 + 0x1C0]
	0x01CCE780 BL 0x1B6E7F0
	0x01CCE784 MOVZ W8, 0x1
	0x01CCE788 STRB W8, [X22 + 0x5B3]
	0x01CCE78C MOVZ W0, 0x1
	0x01CCE790 MOV X1, X31
	0x01CCE794 STR X31, [X31 + 0x8]
	0x01CCE798 MOVZ W22, 0x1
	0x01CCE79C BL 0x1D29EBC
	0x01CCE7A0 ADD X0, X20, 0x24
	0x01CCE7A4 ADD X1, X31, 0x8
	0x01CCE7A8 MOV X2, X31
	0x01CCE7AC ADD X23, X20, 0x1C

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], D13
	003 Move [X31+104], D12
	004 Move [X31+112], D11
	005 Move [X31+120], D10
	006 Move [X31+128], D9
	007 Move [X31+136], D8
	008 Move [X31+144], X30
	009 Move [X31+160], X20
	010 Move [X31+168], X19
	011 Move X20, 0x2556000
	012 Move W8, [X20+1445]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x2282000
	019 Move X0, [X0+1976]
	020 Call 0x1B6F7F0
	021 Move X0, 0x2282000
	022 Move X0, [X0+2000]
	023 Call 0x1B6F7F0
	024 Move W8, 1
	025 Move [X20+1445], W8
	026 NotImplemented "Instruction MOVI not yet implemented."
	027 Move [X31+80], W31
	028 Move [X31+48], V0
	029 Move [X31+56], V0
	030 Move X0, [X19+144]
	031 Compare X0, 0
	032 JumpIfEqual {142}
	033 Move X8, 0x2282000
	034 Move X8, [X8+1976]
	035 Move W2, 1
	036 Move X3, X31
	037 Move X1, [X8]
	038 Call Animator.SetBool, X0, X1, X2
	039 Move X0, X19
	040 Move X1, X31
	041 Call Component.get_transform, X0
	042 Compare X0, 0
	043 JumpIfEqual {142}
	044 Move X1, X31
	045 Call Transform.get_position, X0
	046 Move X0, [X19+168]
	047 Compare X0, 0
	048 JumpIfEqual {142}
	049 Move X1, X31
	050 Move V8, V0
	051 Move V9, V1
	052 Move V10, V2
	053 Call Transform.get_position, X0
	054 Move X20, 0x2556000
	055 Move W8, [X20+1286]
	056 Move V11, V0
	057 Move V12, V1
	058 Move V13, V2
	059 Compare W8, 0
	060 JumpIfNotEqual {66}
	061 Move X0, 0x2280000
	062 Move X0, [X0+1160]
	063 Call 0x1B6F7F0
	064 Move W8, 1
	065 Move [X20+1286], W8
	066 Move X8, 0x2280000
	067 Move X8, [X8+1160]
	068 Subtract S11, S8, S11
	069 Subtract S9, S9, S12
	070 Subtract S8, S10, S13
	071 Move X0, [X8]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1B6F8F8
	076 Multiply S0, S11, S11
	077 Multiply S1, S9, S9
	078 Multiply S2, S8, S8
	079 Add S0, S0, S1
	080 Add S0, S2, S0
	081 NotImplemented "Instruction FSQRT not yet implemented."
	082 Move S1, 1
	083 NotImplemented "Instruction FCMP not yet implemented."
	084 Move X0, X19
	085 Move W1, W31
	086 Call PrototypeSlenderController.set_state, X0, X1
	087 Move X0, [X19+144]
	088 Compare X0, 0
	089 JumpIfEqual {142}
	090 Add X8, X31, 8
	091 Move W1, W31
	092 Move X2, X31
	093 Call Animator.GetCurrentAnimatorStateInfo, X0, X1
	094 Move X9, 0x2282000
	095 NotImplemented "Instruction LDUR not yet implemented."
	096 NotImplemented "Instruction LDUR not yet implemented."
	097 Move W8, [X31+40]
	098 Move X9, [X9+2000]
	099 Add X0, X31, 48
	100 Move X2, X31
	101 Move [X31+48], V0
	102 Move [X31+56], V1
	103 Move X1, [X9]
	104 Move [X31+80], W8
	105 Call AnimatorStateInfo.IsName, X0, X1
	106 Move X20, [X19+160]
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {125}
	111 Move X0, [X19+168]
	112 Compare X0, 0
	113 JumpIfEqual {142}
	114 Move X1, X31
	115 Call Transform.get_position, X0
	116 Compare X20, 0
	117 JumpIfEqual {142}
	118 Move X0, X20
	119 Move X1, X31
	120 Call NavMeshAgent.SetDestination, X0, X1
	121 Move X0, [X19+160]
	122 Compare X0, 0
	123 JumpIfEqual {142}
	124 Move W1, W31
	125 Compare X20, 0
	126 JumpIfEqual {142}
	127 Move W1, 1
	128 Move X0, X20
	129 Move X2, X31
	130 Call NavMeshAgent.set_isStopped, X0, X1
	131 Move X20, [X31+160]
	132 Move X19, [X31+168]
	133 Move X30, [X31+144]
	134 Move D9, [X31+128]
	135 Move D8, [X31+136]
	136 Move D11, [X31+112]
	137 Move D10, [X31+120]
	138 Move D13, [X31+96]
	139 Move D12, [X31+104]
	140 Add X31, X31, 176
	141 Return 
	142 Call 0x1B6FA1C

Method: System.Void AnimationFootstep()

Disassembly:
	0x01CCE7B0 BL 0x1D816CC
	0x01CCE7B4 ADD W8, W0, 0xB
	0x01CCE7B8 LDR X0, [X21]
	0x01CCE7BC SXTW X8, W8
	0x01CCE7C0 AND X8, X8, 0xFFFFFFFF
	0x01CCE7C4 ADD X9, X23, X8
	0x01CCE7C8 ADD W8, W8, 0xC
	0x01CCE7CC LDP S11, S9, [X9]
	0x01CCE7D0 LDR V8, [X9 + 0x8]
	0x01CCE7D4 LDR W9, [X0 + 0xE0]
	0x01CCE7D8 LDR V10, [X23, W8, SXTW]
	0x01CCE7DC CBNZ W9, 0x1CCE7E8
	0x01CCE7E0 BL 0x1B6E8F8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+128]
	004 Move X1, X31
	005 Call Component.get_transform, X0
	006 Compare X0, 0
	007 JumpIfEqual {18}
	008 Move X1, X31
	009 Call Transform.get_position, X0
	010 Compare X19, 0
	011 JumpIfEqual {18}
	012 Move S3, 1
	013 Move X0, X19
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Call SFXManager.PlaySFX, X0, X1, V0
	017 Return 
	018 Call 0x1B6FA1C

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01CCE7E4 LDR X0, [X21]
	0x01CCE7E8 LDR X8, [X0 + 0xB8]
	0x01CCE7EC MOV X0, X19
	0x01CCE7F0 MOV V0.16B, V11.16B
	0x01CCE7F4 MOV V1.16B, V9.16B
	0x01CCE7F8 STRB W22, [X8 + 0x20]
	0x01CCE7FC LDR X1, [X31 + 0x8]
	0x01CCE800 MOV V2.16B, V8.16B
	0x01CCE804 MOV V3.16B, V10.16B
	0x01CCE808 BL 0x1CCE25C
	0x01CCE80C LDP X20, X19, [X31 + 0x50]
	0x01CCE810 LDP X22, X21, [X31 + 0x40]
	0x01CCE814 LDP X30, X23, [X31 + 0x30]
	0x01CCE818 LDP D9, D8, [X31 + 0x20]
	0x01CCE81C LDP D11, D10, [X31 + 0x10]
	0x01CCE820 ADD X31, X31, 0x60
	0x01CCE824 RET
	0x01CCE828 RET
	0x01CCE82C STR D8, [X31 - 0x30]!
	0x01CCE830 STP X30, X21, [X31 + 0x10]
	0x01CCE834 STP X20, X19, [X31 + 0x20]
	0x01CCE838 ADRP X20, 0x2555000
	0x01CCE83C LDRB W8, [X20 + 0x5B4]
	0x01CCE840 MOV X19, X0
	0x01CCE844 TBNZ X8, 0x0, 0x1CCE880
	0x01CCE848 ADRP X0, 0x227F000
	0x01CCE84C LDR X0, [X0 + 0x478]
	0x01CCE850 BL 0x1B6E7F0
	0x01CCE854 ADRP X0, 0x2281000
	0x01CCE858 LDR X0, [X0 + 0x808]
	0x01CCE85C BL 0x1B6E7F0
	0x01CCE860 ADRP X0, 0x2281000
	0x01CCE864 LDR X0, [X0 + 0x358]
	0x01CCE868 BL 0x1B6E7F0
	0x01CCE86C ADRP X0, 0x2280000
	0x01CCE870 LDR X0, [X0 + 0x2E8]
	0x01CCE874 BL 0x1B6E7F0
	0x01CCE878 MOVZ W8, 0x1
	0x01CCE87C STRB W8, [X20 + 0x5B4]
	0x01CCE880 LDR W8, [X19 + 0x10]
	0x01CCE884 CMP W8, 0x1
	0x01CCE888 B.EQ 0x1CCE8D4
	0x01CCE88C CBNZ W8, 0x1CCE9B8
	0x01CCE890 MOVN W8, 0x0
	0x01CCE894 STR W8, [X19 + 0x10]
	0x01CCE898 ADRP X8, 0x2280000
	0x01CCE89C LDR V8, [X19 + 0x20]
	0x01CCE8A0 LDR X8, [X8 + 0x2E8]
	0x01CCE8A4 LDR X0, [X8]
	0x01CCE8A8 BL 0x1B6EA0C
	0x01CCE8AC ADRP X8, 0xFFFFFFFFFEDDB000
	0x01CCE8B0 LDR V0, [X8 + 0xD08]
	0x01CCE8B4 MOV X1, X31
	0x01CCE8B8 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2556000
	006 Move X20, 0x2280000
	007 Move W8, [X21+1446]
	008 Move X20, [X20+1144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2280000
	015 Move X0, [X0+1144]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1446], W8
	019 Move X0, [X20]
	020 Move X20, [X19+168]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1B6F8F8
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {47}
	033 Move S0, 1
	034 Move S1, W31
	035 Move S2, W31
	036 Move S3, 1
	037 Move X0, X31
	038 Call Gizmos.set_color, X0
	039 Move X0, [X19+168]
	040 Compare X0, 0
	041 JumpIfEqual {68}
	042 Move X1, X31
	043 Call Transform.get_position, X0
	044 Move V3, [X19+184]
	045 Move X0, X31
	046 Call Gizmos.DrawWireSphere, X0, V0
	047 Move S0, W31
	048 Move S1, 1
	049 Move S2, W31
	050 Move S3, 1
	051 Move X0, X31
	052 Call Gizmos.set_color, X0
	053 Move X0, X19
	054 Move X1, X31
	055 Call Component.get_transform, X0
	056 Compare X0, 0
	057 JumpIfEqual {68}
	058 Move X1, X31
	059 Call Transform.get_position, X0
	060 Move V3, [X19+188]
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X0, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Call Gizmos.DrawWireSphere, X0, V0
	067 Return 
	068 Call 0x1B6FA1C

Method: System.Void StateAuthorityChanged()

Disassembly:
	0x01CCE8BC FADD S0, S8, S0
	0x01CCE8C0 BL 0x3AA273C
	0x01CCE8C4 MOVZ W0, 0x1
	0x01CCE8C8 STR X20, [X19 + 0x18]
	0x01CCE8CC STR W0, [X19 + 0x10]
	0x01CCE8D0 B 0x1CCE9BC
	0x01CCE8D4 MOVN W8, 0x0
	0x01CCE8D8 STR W8, [X19 + 0x10]
	0x01CCE8DC ADRP X8, 0x227F000
	0x01CCE8E0 LDR X8, [X8 + 0x478]
	0x01CCE8E4 LDR X20, [X19 + 0x28]
	0x01CCE8E8 LDR X0, [X8]
	0x01CCE8EC LDR W8, [X0 + 0xE0]
	0x01CCE8F0 CBNZ W8, 0x1CCE8F8
	0x01CCE8F4 BL 0x1B6E8F8
	0x01CCE8F8 MOV X0, X20
	0x01CCE8FC MOV X1, X31
	0x01CCE900 MOV X2, X31
	0x01CCE904 BL 0x3A9D6EC
	0x01CCE908 TBZ X0, 0x0, 0x1CCE9B8
	0x01CCE90C LDR X0, [X19 + 0x28]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+56]
	004 Compare X8, 0
	005 JumpIfEqual {32}
	006 Move W8, [X8+384]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X19, X0
	009 Move X0, [X0+64]
	010 Compare X0, 0
	011 JumpIfEqual {29}
	012 Move W8, [X0+96]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 2
	015 Compare TEMP, 2
	016 JumpIfEqual {29}
	017 Move X1, X31
	018 Call NetworkObject.get_HasStateAuthority, X0
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {29}
	023 Move X0, X19
	024 Move W1, W31
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Call PrototypeSlenderController.set_state, X0, X1
	028 Return 
	029 Move X30, [X31+16]
	030 Move X19, [X31+24]
	031 Return 
	032 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CCE910 CBZ X0, 0x1CCE9CC
	0x01CCE914 MOV X1, X31
	0x01CCE918 MOV X2, X31
	0x01CCE91C BL 0x3A65910
	0x01CCE920 LDR X0, [X19 + 0x28]

ISIL:
	001 Move X8, -19005440
	002 Move V0, [X8+832]
	003 Move X1, X31
	004 Move [X0+188], D0
	005 Call NetworkBehaviour..ctor, X0
	006 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01CCE924 CBZ X0, 0x1CCE9CC
	0x01CCE928 MOVZ W1, 0x1

ISIL:
	001 Move W1, [X0+196]
	002 Call PrototypeSlenderController.set_state, X0, X1
	003 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01CCE92C MOV X2, X31
	0x01CCE930 BL 0x3A65EF0
	0x01CCE934 LDR X0, [X19 + 0x28]
	0x01CCE938 CBZ X0, 0x1CCE9CC
	0x01CCE93C MOV X1, X31
	0x01CCE940 BL 0x3A9B084

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call PrototypeSlenderController.get_state, X0
	005 Move [X19+196], W0
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 

