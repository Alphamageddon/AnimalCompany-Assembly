Type: AnimalCompany.PrototypeSlenderController

Method: AnimalCompany.PrototypeSlenderController/SlenderState get_state()

Disassembly:
	0x01DD2030 LDR X20, [X20 + 0xC0]
	0x01DD2034 BL 0x3C38A84
	0x01DD2038 MOV X0, X19
	0x01DD203C MOV X1, X31
	0x01DD2040 BL 0x3C356F8
	0x01DD2044 LDR X8, [X20]
	0x01DD2048 LDR X8, [X8 + 0xB8]
	0x01DD204C LDR X8, [X8]
	0x01DD2050 CBZ X8, 0x1DD2094
	0x01DD2054 MOV X20, X0
	0x01DD2058 MOV X0, X8
	0x01DD205C MOV X1, X31
	0x01DD2060 BL 0x3C32E90
	0x01DD2064 CBZ X20, 0x1DD2094
	0x01DD2068 ADRP X21, 0x2326000
	0x01DD206C LDR X21, [X21 + 0x640]
	0x01DD2070 MOV X1, X0
	0x01DD2074 MOV X0, X20
	0x01DD2078 MOV X2, X31
	0x01DD207C BL 0x3C3FD20
	0x01DD2080 LDR X1, [X21]
	0x01DD2084 MOV X0, X19
	0x01DD2088 LDP X20, X19, [X31 + 0x10]
	0x01DD208C LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2322000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2327000
	016 Move X0, [X0+1448]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2327000
	023 Move X0, [X0+1456]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_state(AnimalCompany.PrototypeSlenderController/SlenderState value)

Disassembly:
	0x01DD2090 B 0x21E51FC
	0x01DD2094 BL 0x1C16F20
	0x01DD2098 STP X30, X23, [X31 - 0x30]!
	0x01DD209C STP X22, X21, [X31 + 0x10]
	0x01DD20A0 STP X20, X19, [X31 + 0x20]
	0x01DD20A4 ADRP X20, 0x2606000
	0x01DD20A8 ADRP X21, 0x2324000
	0x01DD20AC LDRB W8, [X20 + 0xC00]
	0x01DD20B0 LDR X21, [X21 + 0xA78]
	0x01DD20B4 MOV X19, X0
	0x01DD20B8 TBNZ X8, 0x0, 0x1DD20F4
	0x01DD20BC ADRP X0, 0x2324000
	0x01DD20C0 LDR X0, [X0 + 0xA30]
	0x01DD20C4 BL 0x1C16CF4
	0x01DD20C8 ADRP X0, 0x2324000
	0x01DD20CC LDR X0, [X0 + 0xA78]
	0x01DD20D0 BL 0x1C16CF4
	0x01DD20D4 ADRP X0, 0x2324000
	0x01DD20D8 LDR X0, [X0 + 0xD28]
	0x01DD20DC BL 0x1C16CF4
	0x01DD20E0 ADRP X0, 0x2326000
	0x01DD20E4 LDR X0, [X0 + 0x628]
	0x01DD20E8 BL 0x1C16CF4
	0x01DD20EC MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2322000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2327000
	016 Move X0, [X0+1448]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2327000
	023 Move X0, [X0+1464]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void Spawned()

Disassembly:
	0x01DD20F0 STRB W8, [X20 + 0xC00]
	0x01DD20F4 LDR X0, [X21]

ISIL:
	001 Move W1, W31
	002 Call PrototypeSlenderController.set_state, X0, X1
	003 Return 

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01DD20F8 LDR W8, [X0 + 0xE0]
	0x01DD20FC CBNZ W8, 0x1DD2104
	0x01DD2100 BL 0x1C16DFC
	0x01DD2104 CBZ X19, 0x1DD21C4
	0x01DD2108 LDR W8, [X19 + 0x30]
	0x01DD210C ADRP X22, 0x2324000
	0x01DD2110 LDR X22, [X22 + 0xD28]
	0x01DD2114 ADRP X23, 0x2324000
	0x01DD2118 ORR W8, W8, 0x8
	0x01DD211C STR W8, [X19 + 0x30]
	0x01DD2120 LDR X8, [X22]
	0x01DD2124 ADRP X21, 0x2326000
	0x01DD2128 LDR X8, [X8 + 0xB8]
	0x01DD212C LDR X23, [X23 + 0xA30]
	0x01DD2130 LDR X20, [X8 + 0x10]
	0x01DD2134 LDR X0, [X23]
	0x01DD2138 LDR X21, [X21 + 0x628]
	0x01DD213C BL 0x1C16F10
	0x01DD2140 LDR X2, [X21]
	0x01DD2144 MOV X1, X19
	0x01DD2148 MOV X3, X31
	0x01DD214C MOV X21, X0
	0x01DD2150 BL 0x2A6B948
	0x01DD2154 MOV X0, X20
	0x01DD2158 MOV X1, X21
	0x01DD215C MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+64]
	005 Compare X0, 0
	006 JumpIfEqual {35}
	007 Move X1, X31
	008 Call NetworkObject.get_HasStateAuthority, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {22}
	013 Move X0, X19
	014 Call PrototypeSlenderController.get_state, X0
	015 NotImplemented "Instruction CMP not yet implemented."
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Compare W0, 0
	018 JumpIfNotEqual {22}
	019 Move X0, X19
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return 
	025 Move X0, X19
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Call PrototypeSlenderController.UpdateAttacking, X0
	029 Return 
	030 Move X0, X19
	031 Move X30, [X31+16]
	032 Move X19, [X31+24]
	033 Call PrototypeSlenderController.UpdateRetreat, X0
	034 Return 
	035 Call 0x1C17F20

Method: System.Void UpdateIdle()

Disassembly:
	0x01DD2160 BL 0x33C0FDC
	0x01DD2164 CBZ X0, 0x1DD21A8
	0x01DD2168 LDR X20, [X23]
	0x01DD216C MOV X19, X0
	0x01DD2170 MOV X1, X20
	0x01DD2174 BL 0x1C16E00
	0x01DD2178 CBZ X0, 0x1DD219C
	0x01DD217C LDR X8, [X22]
	0x01DD2180 LDR X8, [X8 + 0xB8]
	0x01DD2184 STR X0, [X8 + 0x10]
	0x01DD2188 LDR X20, [X23]
	0x01DD218C MOV X0, X19
	0x01DD2190 MOV X1, X20
	0x01DD2194 BL 0x1C16E00
	0x01DD2198 CBNZ X0, 0x1DD21B4
	0x01DD219C MOV X0, X19
	0x01DD21A0 MOV X1, X20
	0x01DD21A4 BL 0x1C171E0
	0x01DD21A8 LDR X8, [X22]
	0x01DD21AC LDR X8, [X8 + 0xB8]
	0x01DD21B0 STR X31, [X8 + 0x10]
	0x01DD21B4 LDP X20, X19, [X31 + 0x20]
	0x01DD21B8 LDP X22, X21, [X31 + 0x10]
	0x01DD21BC LDP X30, X23, [X31], #0x30
	0x01DD21C0 RET
	0x01DD21C4 BL 0x1C16F20
	0x01DD21C8 STR X1, [X0 + 0x50]
	0x01DD21CC RET
	0x01DD21D0 STR X30, [X31 - 0x30]!
	0x01DD21D4 STP X22, X21, [X31 + 0x10]
	0x01DD21D8 STP X20, X19, [X31 + 0x20]
	0x01DD21DC ADRP X21, 0x2606000
	0x01DD21E0 ADRP X22, 0x2326000
	0x01DD21E4 LDRB W8, [X21 + 0xC01]
	0x01DD21E8 LDR X22, [X22 + 0xC0]
	0x01DD21EC MOV X19, X1
	0x01DD21F0 MOV X20, X0
	0x01DD21F4 TBNZ X8, 0x0, 0x1DD2218
	0x01DD21F8 ADRP X0, 0x2326000
	0x01DD21FC LDR X0, [X0 + 0x650]
	0x01DD2200 BL 0x1C16CF4
	0x01DD2204 ADRP X0, 0x2326000
	0x01DD2208 LDR X0, [X0 + 0xC0]
	0x01DD220C BL 0x1C16CF4
	0x01DD2210 MOVZ W8, 0x1
	0x01DD2214 STRB W8, [X21 + 0xC01]
	0x01DD2218 LDR X8, [X22]
	0x01DD221C LDR X8, [X8 + 0xB8]
	0x01DD2220 LDR X8, [X8]
	0x01DD2224 CBZ X8, 0x1DD2254
	0x01DD2228 LDR X0, [X8 + 0x60]
	0x01DD222C CBZ X0, 0x1DD2254
	0x01DD2230 ADRP X8, 0x2326000
	0x01DD2234 LDR X8, [X8 + 0x650]
	0x01DD2238 MOV X1, X20
	0x01DD223C MOV X2, X19
	0x01DD2240 LDP X20, X19, [X31 + 0x20]
	0x01DD2244 LDR X3, [X8]
	0x01DD2248 LDP X22, X21, [X31 + 0x10]
	0x01DD224C LDR X30, [X31], #0x30
	0x01DD2250 B 0x2ABF658
	0x01DD2254 BL 0x1C16F20
	0x01DD2258 STP D11, D10, [X31 - 0x50]!
	0x01DD225C STP D9, D8, [X31 + 0x10]
	0x01DD2260 STP X30, X23, [X31 + 0x20]
	0x01DD2264 STP X22, X21, [X31 + 0x30]
	0x01DD2268 STP X20, X19, [X31 + 0x40]
	0x01DD226C ADRP X22, 0x2606000
	0x01DD2270 LDRB W8, [X22 + 0xC09]
	0x01DD2274 MOV W20, W2
	0x01DD2278 MOV X19, X1
	0x01DD227C MOV V11.16B, V3.16B
	0x01DD2280 MOV V8.16B, V2.16B
	0x01DD2284 MOV V9.16B, V1.16B
	0x01DD2288 MOV V10.16B, V0.16B
	0x01DD228C MOV X21, X0
	0x01DD2290 TBNZ X8, 0x0, 0x1DD22D8
	0x01DD2294 ADRP X0, 0x2326000
	0x01DD2298 LDR X0, [X0 + 0x5E8]
	0x01DD229C BL 0x1C16CF4
	0x01DD22A0 ADRP X0, 0x2326000
	0x01DD22A4 LDR X0, [X0 + 0x5F0]
	0x01DD22A8 BL 0x1C16CF4
	0x01DD22AC ADRP X0, 0x2321000
	0x01DD22B0 LDR X0, [X0 + 0x598]
	0x01DD22B4 BL 0x1C16CF4
	0x01DD22B8 ADRP X0, 0x2326000
	0x01DD22BC LDR X0, [X0 + 0x620]
	0x01DD22C0 BL 0x1C16CF4
	0x01DD22C4 ADRP X0, 0x2326000
	0x01DD22C8 LDR X0, [X0 + 0xC0]
	0x01DD22CC BL 0x1C16CF4
	0x01DD22D0 MOVZ W8, 0x1
	0x01DD22D4 STRB W8, [X22 + 0xC09]
	0x01DD22D8 CBZ X21, 0x1DD2538
	0x01DD22DC LDR X22, [X21 + 0x18]
	0x01DD22E0 CBZ X22, 0x1DD2538
	0x01DD22E4 LDR W1, [X22 + 0x18]
	0x01DD22E8 CBZ W1, 0x1DD23B0
	0x01DD22EC ADRP X23, 0x2326000
	0x01DD22F0 LDR X23, [X23 + 0x5F0]
	0x01DD22F4 MOV W0, W31
	0x01DD22F8 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x2607000
	013 Move W8, [X20+3064]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0x2327000
	020 Move X0, [X0+1472]
	021 Call 0x1C17CF4
	022 Move X0, 0x2322000
	023 Move X0, [X0+1528]
	024 Call 0x1C17CF4
	025 Move X0, 0x2327000
	026 Move X0, [X0+1480]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+3064], W8
	030 Move [X31+8], X31
	031 Move X0, [X19+144]
	032 Compare X0, 0
	033 JumpIfEqual {122}
	034 Move X8, 0x2327000
	035 Move X8, [X8+1480]
	036 Move W2, W31
	037 Move X3, X31
	038 Move X1, [X8]
	039 Call Animator.SetBool, X0, X1, X2
	040 Move X0, [X19+160]
	041 Compare X0, 0
	042 JumpIfEqual {122}
	043 Move W1, 1
	044 Move X2, X31
	045 Call NavMeshAgent.set_isStopped, X0, X1
	046 Move X0, X19
	047 Move X1, X31
	048 Call Component.get_transform, X0
	049 Compare X0, 0
	050 JumpIfEqual {122}
	051 Move X20, 0x2322000
	052 Move X20, [X20+1528]
	053 Move X1, X31
	054 Call Transform.get_position, X0
	055 Move W0, [X19+152]
	056 Move V10, [X19+188]
	057 Move X1, X31
	058 Move V8, V0
	059 Move V9, V1
	060 Move V11, V2
	061 Call LayerMask.op_Implicit, X0
	062 Move X8, [X20]
	063 Move W20, W0
	064 Move W9, [X8+224]
	065 Compare W9, 0
	066 JumpIfNotEqual {69}
	067 Move X0, X8
	068 Call 0x1C17DFC
	069 Move V0, V8
	070 Move V1, V9
	071 Move V2, V11
	072 Move V3, V10
	073 Move W0, W20
	074 Move X1, X31
	075 Call Physics.OverlapSphere, X0, V0, X1
	076 Compare X0, 0
	077 JumpIfEqual {122}
	078 Move X8, [X0+24]
	079 Move X20, X0
	080 Compare X8, 0
	081 JumpIfEqual {110}
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X23, 0x2327000
	084 Move X23, [X23+1472]
	085 Move X21, X31
	086 Add X22, X20, 32
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X0, [X22]
	089 Compare X0, 0
	090 JumpIfEqual {122}
	091 Move X1, X31
	092 Call Component.get_gameObject, X0
	093 Compare X0, 0
	094 JumpIfEqual {122}
	095 Move X2, [X23]
	096 Add X1, X31, 8
	097 Call 0x21E7600, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfEqual {105}
	102 Move W8, [X20+24]
	103 Add X21, X21, 1
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X8, [X31+8]
	106 Move W1, 1
	107 Move X0, X19
	108 Move [X19+176], X8
	109 Call PrototypeSlenderController.set_state, X0, X1
	110 Move X20, [X31+80]
	111 Move X19, [X31+88]
	112 Move X22, [X31+64]
	113 Move X21, [X31+72]
	114 Move X30, [X31+48]
	115 Move X23, [X31+56]
	116 Move D9, [X31+32]
	117 Move D8, [X31+40]
	118 Move D11, [X31+16]
	119 Move D10, [X31+24]
	120 Add X31, X31, 96
	121 Return 
	122 Call 0x1C17F20
	123 Call 0x1C17F28

Method: System.Void UpdateAttacking()

Disassembly:
	0x01DD22FC BL 0x3C309A8
	0x01DD2300 LDR X2, [X23]
	0x01DD2304 MOV W1, W0
	0x01DD2308 MOV X0, X22
	0x01DD230C BL 0x301BCCC
	0x01DD2310 CBZ X19, 0x1DD2538
	0x01DD2314 ADRP X22, 0x2321000
	0x01DD2318 LDR X22, [X22 + 0x598]
	0x01DD231C MOV X1, X0
	0x01DD2320 MOV X0, X19
	0x01DD2324 MOV X2, X31
	0x01DD2328 BL 0x3BFCA38
	0x01DD232C MOV X0, X19
	0x01DD2330 MOV X1, X31
	0x01DD2334 BL 0x3BFC9FC
	0x01DD2338 LDR X8, [X22]
	0x01DD233C MOV X22, X0
	0x01DD2340 LDR W9, [X8 + 0xE0]
	0x01DD2344 CBNZ W9, 0x1DD2350
	0x01DD2348 MOV X0, X8
	0x01DD234C BL 0x1C16DFC
	0x01DD2350 MOV X0, X22
	0x01DD2354 MOV X1, X31
	0x01DD2358 MOV X2, X31
	0x01DD235C BL 0x3C3883C
	0x01DD2360 TBZ X0, 0x0, 0x1DD23C8
	0x01DD2364 TBZ X20, 0x0, 0x1DD23B0
	0x01DD2368 ADRP X8, 0x2326000
	0x01DD236C LDR X8, [X8 + 0xC0]
	0x01DD2370 LDR X8, [X8]
	0x01DD2374 LDR X8, [X8 + 0xB8]
	0x01DD2378 LDR X8, [X8]
	0x01DD237C CBZ X8, 0x1DD2538
	0x01DD2380 LDR X0, [X8 + 0x58]
	0x01DD2384 CBZ X0, 0x1DD2538
	0x01DD2388 ADRP X8, 0x2326000
	0x01DD238C LDR X8, [X8 + 0x620]
	0x01DD2390 MOV X1, X19
	0x01DD2394 LDP X20, X19, [X31 + 0x40]
	0x01DD2398 LDP X22, X21, [X31 + 0x30]
	0x01DD239C LDR X2, [X8]
	0x01DD23A0 LDP X30, X23, [X31 + 0x20]
	0x01DD23A4 LDP D9, D8, [X31 + 0x10]
	0x01DD23A8 LDP D11, D10, [X31], #0x50
	0x01DD23AC B 0x24F1750
	0x01DD23B0 LDP X20, X19, [X31 + 0x40]
	0x01DD23B4 LDP X22, X21, [X31 + 0x30]
	0x01DD23B8 LDP X30, X23, [X31 + 0x20]
	0x01DD23BC LDP D9, D8, [X31 + 0x10]
	0x01DD23C0 LDP D11, D10, [X31], #0x50
	0x01DD23C4 RET
	0x01DD23C8 LDR V0, [X21 + 0x20]
	0x01DD23CC MOV X0, X19
	0x01DD23D0 MOV X1, X31
	0x01DD23D4 FMUL S0, S0, S11
	0x01DD23D8 BL 0x3BFC8DC
	0x01DD23DC LDP S0, S1, [X21 + 0x24]
	0x01DD23E0 MOV X0, X31
	0x01DD23E4 BL 0x3C30968
	0x01DD23E8 MOV X0, X19
	0x01DD23EC MOV X1, X31
	0x01DD23F0 BL 0x3BFC928
	0x01DD23F4 FMOV S0, 1
	0x01DD23F8 MOV X0, X19
	0x01DD23FC MOV X1, X31
	0x01DD2400 BL 0x3BFCF3C
	0x01DD2404 FMOV S0, 1
	0x01DD2408 MOV X0, X19
	0x01DD240C MOV X1, X31
	0x01DD2410 BL 0x3BFD010
	0x01DD2414 FMOV S0, 1
	0x01DD2418 MOV X0, X19
	0x01DD241C MOV X1, X31
	0x01DD2420 BL 0x3BFD0A0
	0x01DD2424 LDR V0, [X21 + 0x30]
	0x01DD2428 MOV X0, X19
	0x01DD242C MOV X1, X31
	0x01DD2430 BL 0x3BFD0EC
	0x01DD2434 MOV X0, X19
	0x01DD2438 MOV X1, X31
	0x01DD243C BL 0x3C32E90
	0x01DD2440 CBZ X0, 0x1DD2538
	0x01DD2444 MOV V0.16B, V10.16B
	0x01DD2448 MOV V1.16B, V9.16B
	0x01DD244C MOV V2.16B, V8.16B
	0x01DD2450 MOV X1, X31
	0x01DD2454 BL 0x3C3F62C
	0x01DD2458 LDR W1, [X21 + 0x2C]
	0x01DD245C MOV X0, X19
	0x01DD2460 MOV X2, X31
	0x01DD2464 BL 0x3BFD138
	0x01DD2468 LDR W0, [X21 + 0x34]
	0x01DD246C BL 0x1DD2BFC
	0x01DD2470 MOV X1, X0
	0x01DD2474 MOV X0, X19
	0x01DD2478 MOV X2, X31
	0x01DD247C BL 0x3BFCA7C
	0x01DD2480 MOV X0, X19
	0x01DD2484 TBZ X20, 0x0, 0x1DD250C
	0x01DD2488 MOV W1, W31
	0x01DD248C MOV X2, X31
	0x01DD2490 BL 0x3BFD05C
	0x01DD2494 MOV X0, X19
	0x01DD2498 MOV W1, W31
	0x01DD249C MOV X2, X31
	0x01DD24A0 BL 0x3BFCF88
	0x01DD24A4 MOV X0, X19
	0x01DD24A8 MOV X1, X31
	0x01DD24AC BL 0x3BFCAC0
	0x01DD24B0 ADRP X8, 0x2326000
	0x01DD24B4 LDR X8, [X8 + 0xC0]
	0x01DD24B8 MOV X0, X19
	0x01DD24BC MOV X1, X31
	0x01DD24C0 LDR X8, [X8]
	0x01DD24C4 LDR X8, [X8 + 0xB8]
	0x01DD24C8 LDR X20, [X8]
	0x01DD24CC BL 0x3BFC9FC
	0x01DD24D0 CBZ X0, 0x1DD2538
	0x01DD24D4 MOV X1, X31
	0x01DD24D8 BL 0x3BFBD2C
	0x01DD24DC MOV X0, X19
	0x01DD24E0 BL 0x1DD2C30
	0x01DD24E4 CBZ X20, 0x1DD2538
	0x01DD24E8 MOV X1, X0
	0x01DD24EC MOV X0, X20
	0x01DD24F0 LDP X20, X19, [X31 + 0x40]
	0x01DD24F4 LDP X22, X21, [X31 + 0x30]
	0x01DD24F8 LDP X30, X23, [X31 + 0x20]
	0x01DD24FC LDP D9, D8, [X31 + 0x10]
	0x01DD2500 MOV X2, X31
	0x01DD2504 LDP D11, D10, [X31], #0x50
	0x01DD2508 B 0x3C366FC
	0x01DD250C MOV X1, X31
	0x01DD2510 BL 0x3BFC9FC
	0x01DD2514 MOV X1, X0
	0x01DD2518 MOV X0, X19
	0x01DD251C LDP X20, X19, [X31 + 0x40]
	0x01DD2520 LDP X22, X21, [X31 + 0x30]
	0x01DD2524 LDP X30, X23, [X31 + 0x20]
	0x01DD2528 LDP D9, D8, [X31 + 0x10]
	0x01DD252C MOV X2, X31
	0x01DD2530 LDP D11, D10, [X31], #0x50
	0x01DD2534 B 0x3BFCB00
	0x01DD2538 BL 0x1C16F20
	0x01DD253C SUB X31, X31, 0x50
	0x01DD2540 STP D11, D10, [X31 + 0x10]
	0x01DD2544 STP D9, D8, [X31 + 0x20]
	0x01DD2548 STP X30, X21, [X31 + 0x30]
	0x01DD254C STP X20, X19, [X31 + 0x40]
	0x01DD2550 ADRP X20, 0x2606000
	0x01DD2554 ADRP X21, 0x2326000
	0x01DD2558 LDRB W8, [X20 + 0xC04]
	0x01DD255C LDR X21, [X21 + 0xC0]
	0x01DD2560 MOV V8.16B, V3.16B
	0x01DD2564 MOV V9.16B, V2.16B
	0x01DD2568 MOV V10.16B, V1.16B
	0x01DD256C MOV V11.16B, V0.16B
	0x01DD2570 MOV W19, W0
	0x01DD2574 TBNZ X8, 0x0, 0x1DD25C8
	0x01DD2578 ADRP X0, 0x2321000
	0x01DD257C LDR X0, [X0 + 0x788]
	0x01DD2580 BL 0x1C16CF4
	0x01DD2584 ADRP X0, 0x2326000
	0x01DD2588 LDR X0, [X0 + 0xC0]
	0x01DD258C BL 0x1C16CF4
	0x01DD2590 ADRP X0, 0x2326000
	0x01DD2594 LDR X0, [X0 + 0x658]
	0x01DD2598 BL 0x1C16CF4
	0x01DD259C ADRP X0, 0x2326000
	0x01DD25A0 LDR X0, [X0 + 0x660]
	0x01DD25A4 BL 0x1C16CF4
	0x01DD25A8 ADRP X0, 0x2326000
	0x01DD25AC LDR X0, [X0 + 0x668]
	0x01DD25B0 BL 0x1C16CF4
	0x01DD25B4 ADRP X0, 0x2326000
	0x01DD25B8 LDR X0, [X0 + 0x670]
	0x01DD25BC BL 0x1C16CF4
	0x01DD25C0 MOVZ W8, 0x1
	0x01DD25C4 STRB W8, [X20 + 0xC04]
	0x01DD25C8 LDR X8, [X21]
	0x01DD25CC LDR X8, [X8 + 0xB8]
	0x01DD25D0 LDR X8, [X8]
	0x01DD25D4 CBZ X8, 0x1DD26C0
	0x01DD25D8 LDR X8, [X8 + 0x48]
	0x01DD25DC CBZ X8, 0x1DD26C0
	0x01DD25E0 LDR W9, [X8 + 0x18]
	0x01DD25E4 CMP W9, W19, UXTH
	0x01DD25E8 B.LE 0x1DD2628
	0x01DD25EC AND W10, W19, 0xFFFF
	0x01DD25F0 CMP W10, W9
	0x01DD25F4 B.CS 0x1DD26C4
	0x01DD25F8 ADD X8, X8, W19, 0x3, UXTH
	0x01DD25FC LDR X0, [X8 + 0x20]
	0x01DD2600 MOV V0.16B, V11.16B
	0x01DD2604 MOV V1.16B, V10.16B
	0x01DD2608 MOV V2.16B, V9.16B
	0x01DD260C MOV V3.16B, V8.16B
	0x01DD2610 LDP X20, X19, [X31 + 0x40]
	0x01DD2614 LDP X30, X21, [X31 + 0x30]
	0x01DD2618 LDP D9, D8, [X31 + 0x20]
	0x01DD261C LDP D11, D10, [X31 + 0x10]
	0x01DD2620 ADD X31, X31, 0x50
	0x01DD2624 B 0x1DD1B94
	0x01DD2628 ADRP X8, 0x2326000
	0x01DD262C LDR X8, [X8 + 0x658]
	0x01DD2630 ADD X1, X31, 0xC
	0x01DD2634 STRH W19, [X31 + 0xC]
	0x01DD2638 LDR X0, [X8]
	0x01DD263C BL 0x1C16E04
	0x01DD2640 ADRP X8, 0x2326000
	0x01DD2644 LDR X8, [X8 + 0x668]
	0x01DD2648 MOV X1, X0
	0x01DD264C MOV X2, X31
	0x01DD2650 LDR X8, [X8]
	0x01DD2654 MOV X0, X8
	0x01DD2658 BL 0x321EFD0
	0x01DD265C ADRP X8, 0x2321000
	0x01DD2660 LDR X8, [X8 + 0x788]
	0x01DD2664 MOV X19, X0
	0x01DD2668 LDR X8, [X8]
	0x01DD266C LDR W9, [X8 + 0xE0]
	0x01DD2670 CBNZ W9, 0x1DD267C
	0x01DD2674 MOV X0, X8
	0x01DD2678 BL 0x1C16DFC
	0x01DD267C ADRP X8, 0x2326000
	0x01DD2680 ADRP X9, 0x2326000
	0x01DD2684 LDR X8, [X8 + 0x660]
	0x01DD2688 LDR X9, [X9 + 0x670]
	0x01DD268C MOVZ W4, 0x56
	0x01DD2690 MOV X0, X19
	0x01DD2694 LDR X2, [X8]
	0x01DD2698 LDR X3, [X9]
	0x01DD269C MOV X1, X31
	0x01DD26A0 MOV X5, X31
	0x01DD26A4 BL 0x35C2344
	0x01DD26A8 LDP X20, X19, [X31 + 0x40]
	0x01DD26AC LDP X30, X21, [X31 + 0x30]
	0x01DD26B0 LDP D9, D8, [X31 + 0x20]
	0x01DD26B4 LDP D11, D10, [X31 + 0x10]
	0x01DD26B8 ADD X31, X31, 0x50
	0x01DD26BC RET
	0x01DD26C0 BL 0x1C16F20
	0x01DD26C4 BL 0x1C16F28
	0x01DD26C8 STP D11, D10, [X31 - 0x50]!
	0x01DD26CC STP D9, D8, [X31 + 0x10]
	0x01DD26D0 STR X30, [X31 + 0x20]
	0x01DD26D4 STP X22, X21, [X31 + 0x30]
	0x01DD26D8 STP X20, X19, [X31 + 0x40]
	0x01DD26DC ADRP X22, 0x2606000
	0x01DD26E0 ADRP X21, 0x2324000
	0x01DD26E4 LDRB W8, [X22 + 0xC08]
	0x01DD26E8 LDR X21, [X21 + 0xA78]
	0x01DD26EC MOV V8.16B, V3.16B
	0x01DD26F0 MOV V9.16B, V2.16B
	0x01DD26F4 MOV V10.16B, V1.16B
	0x01DD26F8 MOV V11.16B, V0.16B
	0x01DD26FC MOV W19, W1
	0x01DD2700 MOV X20, X0
	0x01DD2704 TBNZ X8, 0x0, 0x1DD2728
	0x01DD2708 ADRP X0, 0x2324000
	0x01DD270C LDR X0, [X0 + 0xA78]
	0x01DD2710 BL 0x1C16CF4
	0x01DD2714 ADRP X0, 0x2326000
	0x01DD2718 LDR X0, [X0 + 0x678]
	0x01DD271C BL 0x1C16CF4
	0x01DD2720 MOVZ W8, 0x1
	0x01DD2724 STRB W8, [X22 + 0xC08]
	0x01DD2728 LDR X0, [X21]
	0x01DD272C LDR W8, [X0 + 0xE0]
	0x01DD2730 CBNZ W8, 0x1DD273C
	0x01DD2734 BL 0x1C16DFC
	0x01DD2738 LDR X0, [X21]
	0x01DD273C LDR X8, [X0 + 0xB8]
	0x01DD2740 LDRB W9, [X8 + 0x20]
	0x01DD2744 CBZ W9, 0x1DD278C
	0x01DD2748 LDR W9, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], D13
	003 Move [X31+104], D12
	004 Move [X31+112], D11
	005 Move [X31+120], D10
	006 Move [X31+128], D9
	007 Move [X31+136], D8
	008 Move [X31+144], X30
	009 Move [X31+160], X22
	010 Move [X31+168], X21
	011 Move [X31+176], X20
	012 Move [X31+184], X19
	013 Move X20, 0x2607000
	014 Move W8, [X20+3065]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {37}
	020 Move X0, 0x2322000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move X0, 0x2327000
	024 Move X0, [X0+1488]
	025 Call 0x1C17CF4
	026 Move X0, 0x2327000
	027 Move X0, [X0+1496]
	028 Call 0x1C17CF4
	029 Move X0, 0x2327000
	030 Move X0, [X0+1480]
	031 Call 0x1C17CF4
	032 Move X0, 0x2327000
	033 Move X0, [X0+1504]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3065], W8
	037 NotImplemented "Instruction MOVI not yet implemented."
	038 Move [X31+80], W31
	039 Move [X31+48], V0
	040 Move [X31+56], V0
	041 Move X0, [X19+144]
	042 Compare X0, 0
	043 JumpIfEqual {321}
	044 Move X8, 0x2327000
	045 Move X8, [X8+1480]
	046 Move X20, 0x2322000
	047 Move W2, 1
	048 Move X3, X31
	049 Move X1, [X8]
	050 Move X20, [X20+1432]
	051 Call Animator.SetBool, X0, X1, X2
	052 Move X0, [X20]
	053 Move X20, [X19+176]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, X20
	059 Move X1, X31
	060 Move X2, X31
	061 Call Object.op_Equality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {68}
	066 Move X0, X19
	067 Move W1, W31
	068 Move X0, [X19+176]
	069 Compare X0, 0
	070 JumpIfEqual {321}
	071 Move X1, X31
	072 Call NetPlayer.get_isDie, X0
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfEqual {304}
	077 Move X0, [X19+144]
	078 Compare X0, 0
	079 JumpIfEqual {321}
	080 Add X8, X31, 8
	081 Move W1, W31
	082 Move X2, X31
	083 Call Animator.GetCurrentAnimatorStateInfo, X0, X1
	084 Move X9, 0x2327000
	085 NotImplemented "Instruction LDUR not yet implemented."
	086 NotImplemented "Instruction LDUR not yet implemented."
	087 Move W8, [X31+40]
	088 Move X9, [X9+1504]
	089 Add X0, X31, 48
	090 Move X2, X31
	091 Move [X31+48], V0
	092 Move [X31+56], V1
	093 Move X1, [X9]
	094 Move [X31+80], W8
	095 Call AnimatorStateInfo.IsName, X0, X1
	096 Move X20, [X19+160]
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {119}
	101 Move X0, [X19+176]
	102 Compare X0, 0
	103 JumpIfEqual {321}
	104 Move X1, X31
	105 Call Component.get_transform, X0
	106 Compare X0, 0
	107 JumpIfEqual {321}
	108 Move X1, X31
	109 Call Transform.get_position, X0
	110 Compare X20, 0
	111 JumpIfEqual {321}
	112 Move X0, X20
	113 Move X1, X31
	114 Call NavMeshAgent.SetDestination, X0, X1
	115 Move X0, [X19+160]
	116 Compare X0, 0
	117 JumpIfEqual {321}
	118 Move W1, W31
	119 Compare X20, 0
	120 JumpIfEqual {321}
	121 Move W1, 1
	122 Move X0, X20
	123 Move X2, X31
	124 Call NavMeshAgent.set_isStopped, X0, X1
	125 Move X0, X19
	126 Move X1, X31
	127 Call Component.get_transform, X0
	128 Compare X0, 0
	129 JumpIfEqual {321}
	130 Move X1, X31
	131 Call Transform.get_position, X0
	132 Move X0, [X19+176]
	133 Compare X0, 0
	134 JumpIfEqual {321}
	135 Move X1, X31
	136 Move V8, V0
	137 Move V9, V1
	138 Move V10, V2
	139 Call Component.get_transform, X0
	140 Compare X0, 0
	141 JumpIfEqual {321}
	142 Move X1, X31
	143 Call Transform.get_position, X0
	144 Move X21, 0x2607000
	145 Move W8, [X21+2140]
	146 Move V11, V0
	147 Move V12, V1
	148 Move V13, V2
	149 Compare W8, 0
	150 JumpIfNotEqual {156}
	151 Move X0, 0x2322000
	152 Move X0, [X0+1448]
	153 Call 0x1C17CF4
	154 Move W8, 1
	155 Move [X21+2140], W8
	156 Move X22, 0x2322000
	157 Move X22, [X22+1448]
	158 Subtract S11, S8, S11
	159 Subtract S9, S9, S12
	160 Subtract S8, S10, S13
	161 Move X0, [X22]
	162 Move W8, [X0+224]
	163 Compare W8, 0
	164 JumpIfNotEqual {166}
	165 Call 0x1C17DFC
	166 Move V3, [X19+188]
	167 Multiply S0, S11, S11
	168 Multiply S1, S9, S9
	169 Multiply S2, S8, S8
	170 Add S0, S0, S1
	171 Add S0, S2, S0
	172 Move S1, 1.5
	173 NotImplemented "Instruction FSQRT not yet implemented."
	174 Multiply S1, S3, S1
	175 NotImplemented "Instruction FCMP not yet implemented."
	176 Move W1, 2
	177 Move X0, X19
	178 Call PrototypeSlenderController.set_state, X0, X1
	179 Move X0, X19
	180 Move X1, X31
	181 Call Component.get_transform, X0
	182 Compare X0, 0
	183 JumpIfEqual {321}
	184 Move X1, X31
	185 Call Transform.get_position, X0
	186 Move X0, [X19+176]
	187 Compare X0, 0
	188 JumpIfEqual {321}
	189 Move X1, X31
	190 Move V8, V0
	191 Move V9, V1
	192 Move V10, V2
	193 Call Component.get_transform, X0
	194 Compare X0, 0
	195 JumpIfEqual {321}
	196 Move X1, X31
	197 Call Transform.get_position, X0
	198 Move W8, [X21+2140]
	199 Move V11, V0
	200 Move V12, V1
	201 Move V13, V2
	202 Compare W8, 0
	203 JumpIfNotEqual {209}
	204 Move X0, 0x2322000
	205 Move X0, [X0+1448]
	206 Call 0x1C17CF4
	207 Move W8, 1
	208 Move [X21+2140], W8
	209 Move X0, [X22]
	210 Subtract S11, S8, S11
	211 Subtract S9, S9, S12
	212 Subtract S8, S10, S13
	213 Move W8, [X0+224]
	214 Compare W8, 0
	215 JumpIfNotEqual {217}
	216 Call 0x1C17DFC
	217 Multiply S0, S11, S11
	218 Multiply S1, S9, S9
	219 Move V2, [X19+192]
	220 Add S0, S0, S1
	221 Multiply S1, S8, S8
	222 Add S0, S1, S0
	223 NotImplemented "Instruction FSQRT not yet implemented."
	224 NotImplemented "Instruction FCMP not yet implemented."
	225 Move X0, [X19+144]
	226 Compare X0, 0
	227 JumpIfEqual {321}
	228 Move X8, 0x2327000
	229 Move X8, [X8+1488]
	230 Move X2, X31
	231 Move X1, [X8]
	232 Call Animator.SetTrigger, X0, X1
	233 Move X20, [X19+176]
	234 Move X0, X19
	235 Move X1, X31
	236 Call Component.get_transform, X0
	237 Move X8, [X19+64]
	238 Move X2, X0
	239 Compare X8, 0
	240 JumpIfEqual {245}
	241 Move X8, [X8+32]
	242 Compare X8, 0
	243 JumpIfEqual {245}
	244 Move W6, [X8]
	245 Move X6, X31
	246 Compare X20, 0
	247 JumpIfEqual {321}
	248 Move X9, 0x2327000
	249 Move X3, [X19+136]
	250 Move W8, [X19+104]
	251 Move X9, [X9+1496]
	252 Move W1, 100
	253 Move X0, X20
	254 NotImplemented "Instruction BFM not yet implemented."
	255 Move X5, [X9]
	256 Move X4, X3
	257 Move X7, X31
	258 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5, X6
	259 Move W1, 2
	260 Move X0, X19
	261 Call PrototypeSlenderController.set_state, X0, X1
	262 Move X0, X19
	263 Move X1, X31
	264 Call Component.get_transform, X0
	265 Compare X0, 0
	266 JumpIfEqual {321}
	267 Move X1, X31
	268 Call Transform.get_position, X0
	269 Move X0, [X19+168]
	270 Compare X0, 0
	271 JumpIfEqual {321}
	272 Move X1, X31
	273 Move V8, V0
	274 Move V9, V1
	275 Move V10, V2
	276 Call Transform.get_position, X0
	277 Move W8, [X21+2140]
	278 Move V11, V0
	279 Move V12, V1
	280 Move V13, V2
	281 Compare W8, 0
	282 JumpIfNotEqual {288}
	283 Move X0, 0x2322000
	284 Move X0, [X0+1448]
	285 Call 0x1C17CF4
	286 Move W8, 1
	287 Move [X21+2140], W8
	288 Move X0, [X22]
	289 Subtract S11, S8, S11
	290 Subtract S9, S9, S12
	291 Subtract S8, S10, S13
	292 Move W8, [X0+224]
	293 Compare W8, 0
	294 JumpIfNotEqual {296}
	295 Call 0x1C17DFC
	296 Multiply S0, S11, S11
	297 Multiply S1, S9, S9
	298 Move V2, [X19+184]
	299 Add S0, S0, S1
	300 Multiply S1, S8, S8
	301 Add S0, S1, S0
	302 NotImplemented "Instruction FSQRT not yet implemented."
	303 NotImplemented "Instruction FCMP not yet implemented."
	304 Move W1, 2
	305 Move X0, X19
	306 Move [X19+176], X31
	307 Call PrototypeSlenderController.set_state, X0, X1
	308 Move X20, [X31+176]
	309 Move X19, [X31+184]
	310 Move X22, [X31+160]
	311 Move X21, [X31+168]
	312 Move X30, [X31+144]
	313 Move D9, [X31+128]
	314 Move D8, [X31+136]
	315 Move D11, [X31+112]
	316 Move D10, [X31+120]
	317 Move D13, [X31+96]
	318 Move D12, [X31+104]
	319 Add X31, X31, 192
	320 Return 
	321 Call 0x1C17F20

Method: System.Void UpdateRetreat()

Disassembly:
	0x01DD274C CBNZ W9, 0x1DD275C
	0x01DD2750 BL 0x1C16DFC
	0x01DD2754 LDR X8, [X21]
	0x01DD2758 LDR X8, [X8 + 0xB8]
	0x01DD275C STRB W31, [X8 + 0x20]
	0x01DD2760 MOV W0, W19
	0x01DD2764 MOV V2.16B, V9.16B
	0x01DD2768 MOV V3.16B, V8.16B
	0x01DD276C LDP X20, X19, [X31 + 0x40]
	0x01DD2770 LDP X22, X21, [X31 + 0x30]
	0x01DD2774 LDR X30, [X31 + 0x20]
	0x01DD2778 LDP D9, D8, [X31 + 0x10]
	0x01DD277C MOV V0.16B, V11.16B
	0x01DD2780 MOV V1.16B, V10.16B
	0x01DD2784 LDP D11, D10, [X31], #0x50
	0x01DD2788 B 0x1DD253C
	0x01DD278C CBZ X20, 0x1DD2850
	0x01DD2790 MOV X0, X20
	0x01DD2794 MOV X1, X31
	0x01DD2798 BL 0x1E9E538
	0x01DD279C CMP W0, 0x4
	0x01DD27A0 B.NE 0x1DD27BC
	0x01DD27A4 LDP X20, X19, [X31 + 0x40]
	0x01DD27A8 LDP X22, X21, [X31 + 0x30]
	0x01DD27AC LDR X30, [X31 + 0x20]
	0x01DD27B0 LDP D9, D8, [X31 + 0x10]
	0x01DD27B4 LDP D11, D10, [X31], #0x50
	0x01DD27B8 RET
	0x01DD27BC LDR X0, [X20 + 0x50]
	0x01DD27C0 CBZ X0, 0x1DD2898
	0x01DD27C4 MOV X1, X31
	0x01DD27C8 BL 0x1EC4D00
	0x01DD27CC TBZ X0, 0x0, 0x1DD2760
	0x01DD27D0 LDR X0, [X20 + 0x50]
	0x01DD27D4 MOVZ W1, 0x1C
	0x01DD27D8 MOV X2, X31
	0x01DD27DC BL 0x1ED9318
	0x01DD27E0 LDR X8, [X21]
	0x01DD27E4 MOV X21, X0
	0x01DD27E8 LDR W9, [X8 + 0xE0]
	0x01DD27EC CBNZ W9, 0x1DD27F8
	0x01DD27F0 MOV X0, X8
	0x01DD27F4 BL 0x1C16DFC
	0x01DD27F8 ADRP X8, 0x2326000
	0x01DD27FC LDR X8, [X8 + 0x678]
	0x01DD2800 MOV X1, X31
	0x01DD2804 LDR X0, [X8]
	0x01DD2808 BL 0x1E778CC
	0x01DD280C MOV X1, X31
	0x01DD2810 BL 0x1E9C24C
	0x01DD2814 STUR X0, [X21 + 0x1C]
	0x01DD2818 STRH W19, [X21 + 0x24]
	0x01DD281C STP S11, S10, [X21 + 0x28]
	0x01DD2820 STP S9, S8, [X21 + 0x30]
	0x01DD2824 CBZ X21, 0x1DD2898
	0x01DD2828 LDR W8, [X21 + 0x14]
	0x01DD282C MOVZ W9, 0xE0
	0x01DD2830 MOV X0, X20
	0x01DD2834 MOV X1, X21
	0x01DD2838 ORR W8, W8, 0x4
	0x01DD283C MOV X2, X31
	0x01DD2840 STR W9, [X21 + 0xC]
	0x01DD2844 STR W8, [X21 + 0x14]
	0x01DD2848 BL 0x1EA1E24
	0x01DD284C B 0x1DD2760
	0x01DD2850 ADRP X0, 0x2326000
	0x01DD2854 LDR X0, [X0 + 0x528]
	0x01DD2858 BL 0x1C16D08
	0x01DD285C BL 0x1C16F10
	0x01DD2860 MOV X19, X0
	0x01DD2864 ADRP X0, 0x2326000
	0x01DD2868 LDR X0, [X0 + 0x530]
	0x01DD286C BL 0x1C16D08
	0x01DD2870 MOV X1, X0
	0x01DD2874 MOV X0, X19
	0x01DD2878 MOV X2, X31
	0x01DD287C BL 0x330E100
	0x01DD2880 ADRP X0, 0x2326000
	0x01DD2884 LDR X0, [X0 + 0x680]
	0x01DD2888 BL 0x1C16D08
	0x01DD288C MOV X1, X0
	0x01DD2890 MOV X0, X19
	0x01DD2894 BL 0x1C16DEC
	0x01DD2898 BL 0x1C16F20
	0x01DD289C STP D11, D10, [X31 - 0x50]!
	0x01DD28A0 STP D9, D8, [X31 + 0x10]
	0x01DD28A4 STR X30, [X31 + 0x20]
	0x01DD28A8 STP X22, X21, [X31 + 0x30]
	0x01DD28AC STP X20, X19, [X31 + 0x40]
	0x01DD28B0 ADRP X21, 0x2606000
	0x01DD28B4 ADRP X22, 0x2324000
	0x01DD28B8 LDRB W8, [X21 + 0xC07]
	0x01DD28BC LDR X22, [X22 + 0xA78]
	0x01DD28C0 MOV V8.16B, V3.16B
	0x01DD28C4 MOV V9.16B, V2.16B
	0x01DD28C8 MOV V10.16B, V1.16B
	0x01DD28CC MOV V11.16B, V0.16B
	0x01DD28D0 MOV X19, X1
	0x01DD28D4 MOV X20, X0
	0x01DD28D8 TBNZ X8, 0x0, 0x1DD2944
	0x01DD28DC ADRP X0, 0x2321000
	0x01DD28E0 LDR X0, [X0 + 0x788]
	0x01DD28E4 BL 0x1C16CF4
	0x01DD28E8 ADRP X0, 0x2324000
	0x01DD28EC LDR X0, [X0 + 0xA78]
	0x01DD28F0 BL 0x1C16CF4
	0x01DD28F4 ADRP X0, 0x2321000
	0x01DD28F8 LDR X0, [X0 + 0x598]
	0x01DD28FC BL 0x1C16CF4
	0x01DD2900 ADRP X0, 0x2326000
	0x01DD2904 LDR X0, [X0 + 0x688]
	0x01DD2908 BL 0x1C16CF4
	0x01DD290C ADRP X0, 0x2326000
	0x01DD2910 LDR X0, [X0 + 0x690]
	0x01DD2914 BL 0x1C16CF4
	0x01DD2918 ADRP X0, 0x2326000
	0x01DD291C LDR X0, [X0 + 0x660]
	0x01DD2920 BL 0x1C16CF4
	0x01DD2924 ADRP X0, 0x2326000

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], D13
	003 Move [X31+104], D12
	004 Move [X31+112], D11
	005 Move [X31+120], D10
	006 Move [X31+128], D9
	007 Move [X31+136], D8
	008 Move [X31+144], X30
	009 Move [X31+160], X20
	010 Move [X31+168], X19
	011 Move X20, 0x2607000
	012 Move W8, [X20+3066]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x2327000
	019 Move X0, [X0+1480]
	020 Call 0x1C17CF4
	021 Move X0, 0x2327000
	022 Move X0, [X0+1504]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3066], W8
	026 NotImplemented "Instruction MOVI not yet implemented."
	027 Move [X31+80], W31
	028 Move [X31+48], V0
	029 Move [X31+56], V0
	030 Move X0, [X19+144]
	031 Compare X0, 0
	032 JumpIfEqual {142}
	033 Move X8, 0x2327000
	034 Move X8, [X8+1480]
	035 Move W2, 1
	036 Move X3, X31
	037 Move X1, [X8]
	038 Call Animator.SetBool, X0, X1, X2
	039 Move X0, X19
	040 Move X1, X31
	041 Call Component.get_transform, X0
	042 Compare X0, 0
	043 JumpIfEqual {142}
	044 Move X1, X31
	045 Call Transform.get_position, X0
	046 Move X0, [X19+168]
	047 Compare X0, 0
	048 JumpIfEqual {142}
	049 Move X1, X31
	050 Move V8, V0
	051 Move V9, V1
	052 Move V10, V2
	053 Call Transform.get_position, X0
	054 Move X20, 0x2607000
	055 Move W8, [X20+2140]
	056 Move V11, V0
	057 Move V12, V1
	058 Move V13, V2
	059 Compare W8, 0
	060 JumpIfNotEqual {66}
	061 Move X0, 0x2322000
	062 Move X0, [X0+1448]
	063 Call 0x1C17CF4
	064 Move W8, 1
	065 Move [X20+2140], W8
	066 Move X8, 0x2322000
	067 Move X8, [X8+1448]
	068 Subtract S11, S8, S11
	069 Subtract S9, S9, S12
	070 Subtract S8, S10, S13
	071 Move X0, [X8]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Multiply S0, S11, S11
	077 Multiply S1, S9, S9
	078 Multiply S2, S8, S8
	079 Add S0, S0, S1
	080 Add S0, S2, S0
	081 NotImplemented "Instruction FSQRT not yet implemented."
	082 Move S1, 1
	083 NotImplemented "Instruction FCMP not yet implemented."
	084 Move X0, X19
	085 Move W1, W31
	086 Call PrototypeSlenderController.set_state, X0, X1
	087 Move X0, [X19+144]
	088 Compare X0, 0
	089 JumpIfEqual {142}
	090 Add X8, X31, 8
	091 Move W1, W31
	092 Move X2, X31
	093 Call Animator.GetCurrentAnimatorStateInfo, X0, X1
	094 Move X9, 0x2327000
	095 NotImplemented "Instruction LDUR not yet implemented."
	096 NotImplemented "Instruction LDUR not yet implemented."
	097 Move W8, [X31+40]
	098 Move X9, [X9+1504]
	099 Add X0, X31, 48
	100 Move X2, X31
	101 Move [X31+48], V0
	102 Move [X31+56], V1
	103 Move X1, [X9]
	104 Move [X31+80], W8
	105 Call AnimatorStateInfo.IsName, X0, X1
	106 Move X20, [X19+160]
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {125}
	111 Move X0, [X19+168]
	112 Compare X0, 0
	113 JumpIfEqual {142}
	114 Move X1, X31
	115 Call Transform.get_position, X0
	116 Compare X20, 0
	117 JumpIfEqual {142}
	118 Move X0, X20
	119 Move X1, X31
	120 Call NavMeshAgent.SetDestination, X0, X1
	121 Move X0, [X19+160]
	122 Compare X0, 0
	123 JumpIfEqual {142}
	124 Move W1, W31
	125 Compare X20, 0
	126 JumpIfEqual {142}
	127 Move W1, 1
	128 Move X0, X20
	129 Move X2, X31
	130 Call NavMeshAgent.set_isStopped, X0, X1
	131 Move X20, [X31+160]
	132 Move X19, [X31+168]
	133 Move X30, [X31+144]
	134 Move D9, [X31+128]
	135 Move D8, [X31+136]
	136 Move D11, [X31+112]
	137 Move D10, [X31+120]
	138 Move D13, [X31+96]
	139 Move D12, [X31+104]
	140 Add X31, X31, 176
	141 Return 
	142 Call 0x1C17F20

Method: System.Void AnimationFootstep()

Disassembly:
	0x01DD2928 LDR X0, [X0 + 0x698]
	0x01DD292C BL 0x1C16CF4
	0x01DD2930 ADRP X0, 0x2326000
	0x01DD2934 LDR X0, [X0 + 0x6A0]
	0x01DD2938 BL 0x1C16CF4
	0x01DD293C MOVZ W8, 0x1
	0x01DD2940 STRB W8, [X21 + 0xC07]
	0x01DD2944 LDR X0, [X22]
	0x01DD2948 LDR W8, [X0 + 0xE0]
	0x01DD294C CBNZ W8, 0x1DD2958
	0x01DD2950 BL 0x1C16DFC
	0x01DD2954 LDR X0, [X22]
	0x01DD2958 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+128]
	004 Move X1, X31
	005 Call Component.get_transform, X0
	006 Compare X0, 0
	007 JumpIfEqual {18}
	008 Move X1, X31
	009 Call Transform.get_position, X0
	010 Compare X19, 0
	011 JumpIfEqual {18}
	012 Move S3, 1
	013 Move X0, X19
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Call SFXManager.PlaySFX, X0, X1, V0
	017 Return 
	018 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01DD295C LDRB W9, [X8 + 0x20]
	0x01DD2960 CBZ W9, 0x1DD2A3C
	0x01DD2964 LDR W9, [X0 + 0xE0]
	0x01DD2968 CBNZ W9, 0x1DD2978
	0x01DD296C BL 0x1C16DFC
	0x01DD2970 LDR X8, [X22]
	0x01DD2974 LDR X8, [X8 + 0xB8]
	0x01DD2978 STRB W31, [X8 + 0x20]
	0x01DD297C ADRP X8, 0x2326000
	0x01DD2980 LDR X8, [X8 + 0x688]
	0x01DD2984 ADRP X20, 0x2321000
	0x01DD2988 MOV X0, X19
	0x01DD298C LDR X1, [X8]
	0x01DD2990 LDR X20, [X20 + 0x598]
	0x01DD2994 BL 0x2241FB8
	0x01DD2998 LDR X8, [X20]
	0x01DD299C MOV X20, X0
	0x01DD29A0 LDR W9, [X8 + 0xE0]
	0x01DD29A4 CBNZ W9, 0x1DD29B0
	0x01DD29A8 MOV X0, X8
	0x01DD29AC BL 0x1C16DFC
	0x01DD29B0 MOV X0, X20
	0x01DD29B4 MOV X1, X31
	0x01DD29B8 MOV X2, X31
	0x01DD29BC BL 0x3C3883C
	0x01DD29C0 TBZ X0, 0x0, 0x1DD2A6C
	0x01DD29C4 ADRP X8, 0x2326000
	0x01DD29C8 LDR X8, [X8 + 0x698]
	0x01DD29CC MOV X1, X19
	0x01DD29D0 MOV X2, X31
	0x01DD29D4 LDR X0, [X8]
	0x01DD29D8 BL 0x321B938
	0x01DD29DC ADRP X8, 0x2321000
	0x01DD29E0 LDR X8, [X8 + 0x788]
	0x01DD29E4 MOV X19, X0
	0x01DD29E8 LDR X8, [X8]
	0x01DD29EC LDR W9, [X8 + 0xE0]
	0x01DD29F0 CBNZ W9, 0x1DD29FC
	0x01DD29F4 MOV X0, X8
	0x01DD29F8 BL 0x1C16DFC
	0x01DD29FC ADRP X8, 0x2326000
	0x01DD2A00 ADRP X9, 0x2326000
	0x01DD2A04 LDR X8, [X8 + 0x660]
	0x01DD2A08 LDR X9, [X9 + 0x690]
	0x01DD2A0C MOV X0, X19
	0x01DD2A10 LDP X20, X19, [X31 + 0x40]
	0x01DD2A14 LDR X2, [X8]
	0x01DD2A18 LDR X3, [X9]
	0x01DD2A1C LDP X22, X21, [X31 + 0x30]
	0x01DD2A20 LDR X30, [X31 + 0x20]
	0x01DD2A24 LDP D9, D8, [X31 + 0x10]
	0x01DD2A28 MOVZ W4, 0x7B
	0x01DD2A2C MOV X1, X31
	0x01DD2A30 MOV X5, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2607000
	006 Move X20, 0x2322000
	007 Move W8, [X21+3067]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2322000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3067], W8
	019 Move X0, [X20]
	020 Move X20, [X19+168]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {47}
	033 Move S0, 1
	034 Move S1, W31
	035 Move S2, W31
	036 Move S3, 1
	037 Move X0, X31
	038 Call Gizmos.set_color, X0
	039 Move X0, [X19+168]
	040 Compare X0, 0
	041 JumpIfEqual {68}
	042 Move X1, X31
	043 Call Transform.get_position, X0
	044 Move V3, [X19+184]
	045 Move X0, X31
	046 Call Gizmos.DrawWireSphere, X0, V0
	047 Move S0, W31
	048 Move S1, 1
	049 Move S2, W31
	050 Move S3, 1
	051 Move X0, X31
	052 Call Gizmos.set_color, X0
	053 Move X0, X19
	054 Move X1, X31
	055 Call Component.get_transform, X0
	056 Compare X0, 0
	057 JumpIfEqual {68}
	058 Move X1, X31
	059 Call Transform.get_position, X0
	060 Move V3, [X19+188]
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X0, X31
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Call Gizmos.DrawWireSphere, X0, V0
	067 Return 
	068 Call 0x1C17F20

Method: System.Void StateAuthorityChanged()

Disassembly:
	0x01DD2A34 LDP D11, D10, [X31], #0x50
	0x01DD2A38 B 0x35C2344
	0x01DD2A3C CBZ X20, 0x1DD2BB0
	0x01DD2A40 MOV X0, X20
	0x01DD2A44 MOV X1, X31
	0x01DD2A48 BL 0x1E9E538
	0x01DD2A4C CMP W0, 0x4
	0x01DD2A50 B.NE 0x1DD2A98
	0x01DD2A54 LDP X20, X19, [X31 + 0x40]
	0x01DD2A58 LDP X22, X21, [X31 + 0x30]
	0x01DD2A5C LDR X30, [X31 + 0x20]
	0x01DD2A60 LDP D9, D8, [X31 + 0x10]
	0x01DD2A64 LDP D11, D10, [X31], #0x50
	0x01DD2A68 RET
	0x01DD2A6C MOV X0, X20
	0x01DD2A70 MOV V2.16B, V9.16B
	0x01DD2A74 MOV V3.16B, V8.16B
	0x01DD2A78 LDP X20, X19, [X31 + 0x40]
	0x01DD2A7C LDP X22, X21, [X31 + 0x30]
	0x01DD2A80 LDR X30, [X31 + 0x20]
	0x01DD2A84 LDP D9, D8, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+56]
	004 Compare X8, 0
	005 JumpIfEqual {32}
	006 Move W8, [X8+392]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X19, X0
	009 Move X0, [X0+64]
	010 Compare X0, 0
	011 JumpIfEqual {29}
	012 Move W8, [X0+96]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 2
	015 Compare TEMP, 2
	016 JumpIfEqual {29}
	017 Move X1, X31
	018 Call NetworkObject.get_HasStateAuthority, X0
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {29}
	023 Move X0, X19
	024 Move W1, W31
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Call PrototypeSlenderController.set_state, X0, X1
	028 Return 
	029 Move X30, [X31+16]
	030 Move X19, [X31+24]
	031 Return 
	032 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DD2A88 MOV V0.16B, V11.16B
	0x01DD2A8C MOV V1.16B, V10.16B
	0x01DD2A90 LDP D11, D10, [X31], #0x50
	0x01DD2A94 B 0x1DD1B94
	0x01DD2A98 MOV X0, X19

ISIL:
	001 Move X8, -19808256
	002 Move V0, [X8+2696]
	003 Move X1, X31
	004 Move [X0+188], D0
	005 Call NetworkBehaviour..ctor, X0
	006 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DD2A9C MOV X1, X31
	0x01DD2AA0 BL 0x1E8DD08

ISIL:
	001 Move W1, [X0+196]
	002 Call PrototypeSlenderController.set_state, X0, X1
	003 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DD2AA4 ADD W8, W0, 0x1B
	0x01DD2AA8 AND W21, W8, 0xFFFFFFFC
	0x01DD2AAC CMP W21, 0x201
	0x01DD2AB0 B.GE 0x1DD2B74
	0x01DD2AB4 LDR X0, [X20 + 0x50]
	0x01DD2AB8 CBZ X0, 0x1DD2BF8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call PrototypeSlenderController.get_state, X0
	005 Move [X19+196], W0
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 

