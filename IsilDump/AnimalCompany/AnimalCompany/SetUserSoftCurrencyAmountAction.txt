Type: AnimalCompany.SetUserSoftCurrencyAmountAction

Method: System.Void .ctor(System.Int32 amount)

Disassembly:
	0x01D4DEA0 LDR X10, [X10 + 0xE00]
	0x01D4DEA4 LDRH W9, [X8 + 0x12E]
	0x01D4DEA8 LDR X1, [X10]
	0x01D4DEAC CBZ X9, 0x1D4DED0
	0x01D4DEB0 LDR X10, [X8 + 0xB0]
	0x01D4DEB4 ADD X10, X10, 0x8
	0x01D4DEB8 LDUR X11, [X10 - 0x8]
	0x01D4DEBC CMP X11, X1
	0x01D4DEC0 B.EQ 0x1D4DEE0
	0x01D4DEC4 SUBS X9, X9, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call BaseAction..ctor, X0
	008 Move [X20+20], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void Execute(AnimalCompany.AppState state)

Disassembly:
	0x01D4DEC8 ADD X10, X10, 0x10
	0x01D4DECC B.NE 0x1D4DEB8
	0x01D4DED0 MOV X0, X21
	0x01D4DED4 MOV W2, W31
	0x01D4DED8 BL 0x1C5C788
	0x01D4DEDC B 0x1D4DEEC
	0x01D4DEE0 LDRSW X9, [X10]
	0x01D4DEE4 ADD X8, X8, X9, 0x4, LSL
	0x01D4DEE8 ADD X0, X8, 0x138
	0x01D4DEEC LDP X8, X1, [X0]
	0x01D4DEF0 MOV X0, X21
	0x01D4DEF4 BLR X8
	0x01D4DEF8 CBNZ X22, 0x1D4E070
	0x01D4DEFC ORR W8, W23, 0x8
	0x01D4DF00 CMP W8, 0x8
	0x01D4DF04 B.NE 0x1D4DF58
	0x01D4DF08 LDR X0, [X19 + 0x98]
	0x01D4DF0C CBZ X0, 0x1D4DFE8
	0x01D4DF10 ADRP X8, 0x23A7000
	0x01D4DF14 LDR X8, [X8 + 0xAC8]
	0x01D4DF18 LDR X1, [X8]
	0x01D4DF1C BL 0x2610078
	0x01D4DF20 ADRP X9, 0x23A7000
	0x01D4DF24 LDR X8, [X20 + 0x48]
	0x01D4DF28 LDR X9, [X9 + 0x1F8]
	0x01D4DF2C MOV X19, X0
	0x01D4DF30 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x268C000
	006 Move W8, [X21+1942]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x23A7000
	014 Move X0, [X0+3648]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1942], W8
	018 Compare X20, 0
	019 JumpIfEqual {39}
	020 Move X8, [X20+184]
	021 Compare X8, 0
	022 JumpIfEqual {39}
	023 Move X8, [X8+128]
	024 Compare X8, 0
	025 JumpIfEqual {39}
	026 Move X0, [X8+72]
	027 Compare X0, 0
	028 JumpIfEqual {39}
	029 Move X8, 0x23A7000
	030 Move X8, [X8+3648]
	031 Move W1, [X19+20]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X2, [X8]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call StatePrimitive`1<Int32>.set_value, X0, X1
	038 Return 
	039 Call 0x1C17F20

