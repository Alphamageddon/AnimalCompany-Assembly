Type: AnimalCompany.Crate

Method: System.Int32 get_currentHealth()

Disassembly:
	0x01C9C8A4 STP X20, X19, [X31 + 0x40]
	0x01C9C8A8 ADRP X21, 0x2587000
	0x01C9C8AC ADRP X20, 0x22B1000
	0x01C9C8B0 LDRB W8, [X21 + 0x3FF]
	0x01C9C8B4 LDR X20, [X20 + 0x478]
	0x01C9C8B8 MOV X19, X0
	0x01C9C8BC TBNZ X8, 0x0, 0x1C9C8D4
	0x01C9C8C0 ADRP X0, 0x22B1000
	0x01C9C8C4 LDR X0, [X0 + 0x478]
	0x01C9C8C8 BL 0x1B6E7F0
	0x01C9C8CC MOVZ W8, 0x1
	0x01C9C8D0 STRB W8, [X21 + 0x3FF]
	0x01C9C8D4 LDR X0, [X20]
	0x01C9C8D8 LDR X20, [X19 + 0x40]
	0x01C9C8DC LDR W8, [X0 + 0xE0]
	0x01C9C8E0 CBNZ W8, 0x1C9C8E8
	0x01C9C8E4 BL 0x1B6E8F8
	0x01C9C8E8 MOV X0, X20
	0x01C9C8EC MOV X1, X31
	0x01C9C8F0 MOV X2, X31
	0x01C9C8F4 BL 0x3AA0AF0
	0x01C9C8F8 TBNZ X0, 0x0, 0x1C9C9E8
	0x01C9C8FC LDR X0, [X19 + 0x40]
	0x01C9C900 CBZ X0, 0x1C9CA00

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x22B2000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x22B3000
	016 Move X0, [X0+560]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22B3000
	023 Move X0, [X0+568]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_currentHealth(System.Int32 value)

Disassembly:
	0x01C9C904 MOV X1, X31
	0x01C9C908 BL 0x1D9E5D0
	0x01C9C90C TBZ X0, 0x0, 0x1C9C9E8
	0x01C9C910 LDR X0, [X19 + 0xA0]
	0x01C9C914 CBZ X0, 0x1C9CA00
	0x01C9C918 BL 0x1C9CA04
	0x01C9C91C TBZ X0, 0x0, 0x1C9C9E8
	0x01C9C920 LDR X0, [X19 + 0x80]
	0x01C9C924 CBZ X0, 0x1C9CA00
	0x01C9C928 BL 0x1C98D1C
	0x01C9C92C STR X0, [X31 + 0x8]
	0x01C9C930 ADD X0, X31, 0x8
	0x01C9C934 MOV X1, X31
	0x01C9C938 BL 0x1D680F0
	0x01C9C93C ADRP X8, 0xFFFFFFFFFEE0D000
	0x01C9C940 LDR V8, [X8 + 0xA4C]
	0x01C9C944 LDP S1, S9, [X19 + 0xA8]
	0x01C9C948 ANDS W31, W0, 0x1
	0x01C9C94C FMOV S0, W31
	0x01C9C950 MOVZ W8, 0x43C80000
	0x01C9C954 FCSEL S0, S8, S0, NE
	0x01C9C958 FMOV S2, -5
	0x01C9C95C FMOV S3, W8
	0x01C9C960 FSUB S0, S0, S1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22B2000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x22B3000
	016 Move X0, [X0+560]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22B3000
	023 Move X0, [X0+576]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void HandleCurrentHealthChanged()

Disassembly:
	0x01C9C964 FMUL S0, S0, S3
	0x01C9C968 FMUL S1, S9, S2
	0x01C9C96C MOV X0, X31
	0x01C9C970 FADD S10, S0, S1
	0x01C9C974 BL 0x3AA481C
	0x01C9C978 LDR V11, [X19 + 0xA8]
	0x01C9C97C FMUL S0, S0, S10
	0x01C9C980 FADD S9, S9, S0
	0x01C9C984 MOV X0, X31
	0x01C9C988 STR S9, [X19 + 0xAC]
	0x01C9C98C BL 0x3AA481C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+136]
	004 Call Crate.get_currentHealth, X0
	005 Compare X19, 0
	006 JumpIfEqual {15}
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X0, X19
	010 Move X2, X31
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Call GameObject.SetActive, X0, X1
	014 Return 
	015 Call 0x1B6FA1C

Method: System.Void RPC_TakeHit(System.Int32 damage, UnityEngine.Vector3 position, System.String hitSound, System.String killSound, UnityEngine.Vector3 force, System.String hitName)

Disassembly:
	0x01C9C990 FMUL S0, S9, S0
	0x01C9C994 LDR V2, [X19 + 0xA8]
	0x01C9C998 ADRP X8, 0xFFFFFFFFFEE0D000
	0x01C9C99C FMOV S1, -2
	0x01C9C9A0 FADD S0, S11, S0
	0x01C9C9A4 LDR V3, [X8 + 0xDE4]
	0x01C9C9A8 FMIN S4, S0, S8
	0x01C9C9AC FCMP S0, S1
	0x01C9C9B0 FCSEL S0, S4, S1, PL
	0x01C9C9B4 FABD S1, S0, S0
	0x01C9C9B8 FCMP S1, S3
	0x01C9C9BC B.LE 0x1C9C9E8
	0x01C9C9C0 LDR X0, [X19 + 0x88]
	0x01C9C9C4 STR S0, [X19 + 0xA8]
	0x01C9C9C8 CBZ X0, 0x1C9CA00
	0x01C9C9CC MOV X1, X31
	0x01C9C9D0 BL 0x3A7BCC8
	0x01C9C9D4 CBZ X0, 0x1C9CA00
	0x01C9C9D8 LDR V0, [X19 + 0xA8]
	0x01C9C9DC LDR W1, [X19 + 0xB0]
	0x01C9C9E0 MOV X2, X31
	0x01C9C9E4 BL 0x3A7E584
	0x01C9C9E8 LDP X20, X19, [X31 + 0x40]
	0x01C9C9EC LDP X30, X21, [X31 + 0x30]
	0x01C9C9F0 LDP D9, D8, [X31 + 0x20]
	0x01C9C9F4 LDP D11, D10, [X31 + 0x10]
	0x01C9C9F8 ADD X31, X31, 0x50
	0x01C9C9FC RET
	0x01C9CA00 BL 0x1B6EA1C
	0x01C9CA04 STR X30, [X31 - 0x30]!
	0x01C9CA08 STP X22, X21, [X31 + 0x10]
	0x01C9CA0C STP X20, X19, [X31 + 0x20]
	0x01C9CA10 MOV X19, X0
	0x01C9CA14 BL 0x1C99A60
	0x01C9CA18 MOV X20, X0
	0x01C9CA1C MOV X0, X31
	0x01C9CA20 BL 0x1D6815C
	0x01C9CA24 ADRP X22, 0x2587000
	0x01C9CA28 LDRB W8, [X22 + 0x44E]
	0x01C9CA2C MOV X21, X0
	0x01C9CA30 CBNZ W8, 0x1C9CA48
	0x01C9CA34 ADRP X0, 0x22B2000
	0x01C9CA38 LDR X0, [X0 + 0x1E8]
	0x01C9CA3C BL 0x1B6E7F0
	0x01C9CA40 MOVZ W8, 0x1
	0x01C9CA44 STRB W8, [X22 + 0x44E]
	0x01C9CA48 ADRP X8, 0x22B2000
	0x01C9CA4C LDR X8, [X8 + 0x1E8]
	0x01C9CA50 LDR X0, [X8]
	0x01C9CA54 LDR W8, [X0 + 0xE0]
	0x01C9CA58 CBNZ W8, 0x1C9CA60
	0x01C9CA5C BL 0x1B6E8F8
	0x01C9CA60 CMP W20, W21
	0x01C9CA64 B.NE 0x1C9CA80
	0x01C9CA68 UBFM X8, X21, 0x20, 0x3F
	0x01C9CA6C UBFM X9, X20, 0x20, 0x3F
	0x01C9CA70 CMP W9, W8
	0x01C9CA74 B.NE 0x1C9CA80
	0x01C9CA78 MOV W0, W31
	0x01C9CA7C B 0x1C9CA98
	0x01C9CA80 MOV X0, X19
	0x01C9CA84 BL 0x1C99A60
	0x01C9CA88 STR X0, [X31 + 0x8]
	0x01C9CA8C ADD X0, X31, 0x8
	0x01C9CA90 MOV X1, X31
	0x01C9CA94 BL 0x1D680F0
	0x01C9CA98 LDP X20, X19, [X31 + 0x20]
	0x01C9CA9C LDP X22, X21, [X31 + 0x10]
	0x01C9CAA0 AND W0, W0, 0x1
	0x01C9CAA4 LDR X30, [X31], #0x30
	0x01C9CAA8 RET
	0x01C9CAAC STP X30, X21, [X31 - 0x20]!
	0x01C9CAB0 STP X20, X19, [X31 + 0x10]
	0x01C9CAB4 ADRP X20, 0x2587000
	0x01C9CAB8 ADRP X21, 0x22B2000
	0x01C9CABC LDRB W8, [X20 + 0x400]
	0x01C9CAC0 LDR X21, [X21 + 0x290]
	0x01C9CAC4 MOV X19, X0
	0x01C9CAC8 TBNZ X8, 0x0, 0x1C9CAE0
	0x01C9CACC ADRP X0, 0x22B2000
	0x01C9CAD0 LDR X0, [X0 + 0x290]
	0x01C9CAD4 BL 0x1B6E7F0
	0x01C9CAD8 MOVZ W8, 0x1
	0x01C9CADC STRB W8, [X20 + 0x400]
	0x01C9CAE0 LDR X0, [X21]
	0x01C9CAE4 MOV X1, X31
	0x01C9CAE8 BL 0x3A7AE20
	0x01C9CAEC STR W0, [X19 + 0xB0]
	0x01C9CAF0 MOV X0, X19
	0x01C9CAF4 LDP X20, X19, [X31 + 0x10]
	0x01C9CAF8 MOV X1, X31
	0x01C9CAFC LDP X30, X21, [X31], #0x20
	0x01C9CB00 B 0x1D661D8
	0x01C9CB04 RET
	0x01C9CB08 RET
	0x01C9CB0C STR X30, [X31 - 0x30]!
	0x01C9CB10 STP X22, X21, [X31 + 0x10]
	0x01C9CB14 STP X20, X19, [X31 + 0x20]
	0x01C9CB18 ADRP X21, 0x2587000
	0x01C9CB1C ADRP X22, 0x22B2000
	0x01C9CB20 ADRP X20, 0x22B2000
	0x01C9CB24 LDRB W8, [X21 + 0x401]
	0x01C9CB28 LDR X22, [X22 + 0x298]
	0x01C9CB2C LDR X20, [X20 + 0x268]
	0x01C9CB30 MOV X19, X0
	0x01C9CB34 TBNZ X8, 0x0, 0x1C9CB58
	0x01C9CB38 ADRP X0, 0x22B2000
	0x01C9CB3C LDR X0, [X0 + 0x268]
	0x01C9CB40 BL 0x1B6E7F0
	0x01C9CB44 ADRP X0, 0x22B2000
	0x01C9CB48 LDR X0, [X0 + 0x298]
	0x01C9CB4C BL 0x1B6E7F0
	0x01C9CB50 MOVZ W8, 0x1
	0x01C9CB54 STRB W8, [X21 + 0x401]
	0x01C9CB58 LDR X1, [X22]
	0x01C9CB5C MOV X0, X19
	0x01C9CB60 BL 0x208FDE8
	0x01C9CB64 STR X0, [X19 + 0x88]
	0x01C9CB68 LDR X1, [X20]
	0x01C9CB6C MOV X0, X19
	0x01C9CB70 BL 0x208FDE8
	0x01C9CB74 STR X0, [X19 + 0x90]
	0x01C9CB78 LDP X20, X19, [X31 + 0x20]
	0x01C9CB7C LDP X22, X21, [X31 + 0x10]
	0x01C9CB80 LDR X30, [X31], #0x30
	0x01C9CB84 RET
	0x01C9CB88 STR D14, [X31 - 0x60]!
	0x01C9CB8C STP D13, D12, [X31 + 0x8]
	0x01C9CB90 STP D11, D10, [X31 + 0x18]
	0x01C9CB94 STP D9, D8, [X31 + 0x28]
	0x01C9CB98 STR X30, [X31 + 0x38]
	0x01C9CB9C STP X22, X21, [X31 + 0x40]
	0x01C9CBA0 STP X20, X19, [X31 + 0x50]
	0x01C9CBA4 ADRP X21, 0x2587000
	0x01C9CBA8 LDRB W8, [X21 + 0x402]
	0x01C9CBAC MOV X20, X1
	0x01C9CBB0 MOV X19, X0
	0x01C9CBB4 TBNZ X8, 0x0, 0x1C9CBF0
	0x01C9CBB8 ADRP X0, 0x22B2000
	0x01C9CBBC LDR X0, [X0 + 0x2A0]
	0x01C9CBC0 BL 0x1B6E7F0
	0x01C9CBC4 ADRP X0, 0x22B1000
	0x01C9CBC8 LDR X0, [X0 + 0x4B8]
	0x01C9CBCC BL 0x1B6E7F0
	0x01C9CBD0 ADRP X0, 0x22B2000
	0x01C9CBD4 LDR X0, [X0 + 0x2A8]
	0x01C9CBD8 BL 0x1B6E7F0
	0x01C9CBDC ADRP X0, 0x22B1000
	0x01C9CBE0 LDR X0, [X0 + 0x478]
	0x01C9CBE4 BL 0x1B6E7F0
	0x01C9CBE8 MOVZ W8, 0x1
	0x01C9CBEC STRB W8, [X21 + 0x402]
	0x01C9CBF0 LDR X0, [X19 + 0x40]
	0x01C9CBF4 CBZ X0, 0x1C9CEA0
	0x01C9CBF8 LDRB W8, [X0 + 0x60]
	0x01C9CBFC TBNZ X8, 0x1, 0x1C9CEA0
	0x01C9CC00 MOV X1, X31
	0x01C9CC04 BL 0x1D9E780
	0x01C9CC08 TBZ X0, 0x0, 0x1C9CEA0
	0x01C9CC0C MOV X0, X31
	0x01C9CC10 BL 0x3AA47CC
	0x01C9CC14 LDR V1, [X19 + 0x98]
	0x01C9CC18 FSUB S0, S0, S1
	0x01C9CC1C FMOV S1, 0.5
	0x01C9CC20 FCMP S0, S1
	0x01C9CC24 B.MI 0x1C9CEA0
	0x01C9CC28 CBZ X20, 0x1C9CEC0
	0x01C9CC2C MOV X0, X20
	0x01C9CC30 MOV X1, X31
	0x01C9CC34 BL 0x3AF2410
	0x01C9CC38 CBZ X0, 0x1C9CEC0
	0x01C9CC3C LDR W8, [X0 + 0x18]
	0x01C9CC40 CBZ W8, 0x1C9CEC4
	0x01C9CC44 ADD X0, X0, 0x20
	0x01C9CC48 MOV X1, X31
	0x01C9CC4C BL 0x3AF7D18
	0x01C9CC50 MOV X0, X20
	0x01C9CC54 MOV X1, X31
	0x01C9CC58 MOV V8.16B, V0.16B
	0x01C9CC5C MOV V9.16B, V1.16B
	0x01C9CC60 MOV V10.16B, V2.16B
	0x01C9CC64 BL 0x3AF2368
	0x01C9CC68 CBZ X0, 0x1C9CEC0
	0x01C9CC6C ADRP X8, 0x22B2000
	0x01C9CC70 LDR X8, [X8 + 0x2A0]
	0x01C9CC74 LDR X1, [X8]
	0x01C9CC78 BL 0x20CF4D0
	0x01C9CC7C CBZ X0, 0x1C9CD7C
	0x01C9CC80 ADRP X8, 0x22B2000
	0x01C9CC84 LDR X8, [X8 + 0x2A8]
	0x01C9CC88 LDR X9, [X0]
	0x01C9CC8C MOV X21, X0
	0x01C9CC90 LDR X8, [X8]
	0x01C9CC94 LDRB W11, [X9 + 0x130]
	0x01C9CC98 LDRB W10, [X8 + 0x130]
	0x01C9CC9C CMP W11, W10
	0x01C9CCA0 B.CC 0x1C9CCC8
	0x01C9CCA4 LDR X9, [X9 + 0xC8]
	0x01C9CCA8 ADD X9, X9, X10, 0x3, LSL
	0x01C9CCAC LDUR X9, [X9 - 0x8]
	0x01C9CCB0 CMP X9, X8
	0x01C9CCB4 B.NE 0x1C9CCC8
	0x01C9CCB8 MOV X0, X21
	0x01C9CCBC MOV X1, X31
	0x01C9CCC0 BL 0x1CAE940
	0x01C9CCC4 TBNZ X0, 0x0, 0x1C9CEA0
	0x01C9CCC8 MOV X0, X20
	0x01C9CCCC MOV X1, X31
	0x01C9CCD0 BL 0x3AF208C
	0x01C9CCD4 MOV V11.16B, V0.16B
	0x01C9CCD8 MOV V12.16B, V1.16B
	0x01C9CCDC FMUL S0, S0, S0
	0x01C9CCE0 FMUL S1, S1, S1
	0x01C9CCE4 MOV V14.16B, V2.16B
	0x01C9CCE8 FMUL S2, S2, S2
	0x01C9CCEC FADD S0, S0, S1
	0x01C9CCF0 MOVZ W8, 0x42480000
	0x01C9CCF4 FADD S0, S2, S0
	0x01C9CCF8 FMOV S1, W8
	0x01C9CCFC FCMP S0, S1
	0x01C9CD00 B.LE 0x1C9CEA0
	0x01C9CD04 LDR X0, [X19 + 0x88]
	0x01C9CD08 CBZ X0, 0x1C9CEC0
	0x01C9CD0C MOV X1, X31
	0x01C9CD10 BL 0x3AF67EC
	0x01C9CD14 LDR X8, [X19 + 0x90]
	0x01C9CD18 CBZ X8, 0x1C9CEC0
	0x01C9CD1C LDR X9, [X8 + 0x80]
	0x01C9CD20 CBZ X9, 0x1C9CEC0
	0x01C9CD24 ADRP X10, 0x22B1000
	0x01C9CD28 LDR X8, [X21]
	0x01C9CD2C LDR X22, [X9 + 0x18]
	0x01C9CD30 LDR X10, [X10 + 0x4B8]
	0x01C9CD34 FMUL S13, S11, S0
	0x01C9CD38 LDRH W9, [X8 + 0x12E]
	0x01C9CD3C FMUL S12, S12, S0
	0x01C9CD40 LDR X1, [X10]
	0x01C9CD44 FMUL S11, S14, S0
	0x01C9CD48 CBZ X9, 0x1C9CD6C
	0x01C9CD4C LDR X10, [X8 + 0xB0]
	0x01C9CD50 ADD X10, X10, 0x8
	0x01C9CD54 LDUR X11, [X10 - 0x8]
	0x01C9CD58 CMP X11, X1
	0x01C9CD5C B.EQ 0x1C9CE08
	0x01C9CD60 SUBS X9, X9, 0x1
	0x01C9CD64 ADD X10, X10, 0x10
	0x01C9CD68 B.NE 0x1C9CD54
	0x01C9CD6C MOV X0, X21
	0x01C9CD70 MOV W2, W31
	0x01C9CD74 BL 0x1BB4284
	0x01C9CD78 B 0x1C9CE14
	0x01C9CD7C MOV X0, X20
	0x01C9CD80 MOV X1, X31
	0x01C9CD84 BL 0x3AF20B8
	0x01C9CD88 ADRP X8, 0x22B1000
	0x01C9CD8C LDR X8, [X8 + 0x478]
	0x01C9CD90 MOV X21, X0
	0x01C9CD94 LDR X8, [X8]
	0x01C9CD98 LDR W9, [X8 + 0xE0]
	0x01C9CD9C CBNZ W9, 0x1C9CDA8
	0x01C9CDA0 MOV X0, X8
	0x01C9CDA4 BL 0x1B6E8F8
	0x01C9CDA8 MOV X0, X21
	0x01C9CDAC MOV X1, X31
	0x01C9CDB0 MOV X2, X31
	0x01C9CDB4 BL 0x3A9D6EC
	0x01C9CDB8 TBZ X0, 0x0, 0x1C9CEA0
	0x01C9CDBC MOV X0, X20
	0x01C9CDC0 MOV X1, X31
	0x01C9CDC4 BL 0x3AF20B8
	0x01C9CDC8 MOV X21, X0
	0x01C9CDCC MOV X0, X20
	0x01C9CDD0 MOV X1, X31
	0x01C9CDD4 BL 0x3AF208C
	0x01C9CDD8 CBZ X21, 0x1C9CEC0
	0x01C9CDDC FMOV S3, 20
	0x01C9CDE0 FMUL S2, S2, S3
	0x01C9CDE4 FMUL S1, S1, S3
	0x01C9CDE8 FMUL S0, S0, S3
	0x01C9CDEC MOV X0, X21
	0x01C9CDF0 MOV V3.16B, V8.16B
	0x01C9CDF4 MOV V4.16B, V9.16B
	0x01C9CDF8 MOV V5.16B, V10.16B
	0x01C9CDFC MOV X1, X31
	0x01C9CE00 BL 0x3AF71EC
	0x01C9CE04 B 0x1C9CE48
	0x01C9CE08 LDRSW X9, [X10]

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+80], D13
	003 Move [X31+88], D12
	004 Move [X31+96], D11
	005 Move [X31+104], D10
	006 Move [X31+112], D9
	007 Move [X31+120], D8
	008 Move [X31+128], X30
	009 Move [X31+144], X26
	010 Move [X31+152], X25
	011 Move [X31+160], X24
	012 Move [X31+168], X23
	013 Move [X31+176], X22
	014 Move [X31+184], X21
	015 Move [X31+192], X20
	016 Move [X31+200], X19
	017 Move X24, 0x2588000
	018 Move W8, [X24+1016]
	019 Move X20, X4
	020 Move V8, V5
	021 Move V9, V4
	022 Move V10, V3
	023 Move X22, X3
	024 Move X23, X2
	025 Move V11, V2
	026 Move V12, V1
	027 Move V13, V0
	028 Move W21, W1
	029 Move X19, X0
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {48}
	034 Move X0, 0x22B3000
	035 Move X0, [X0+448]
	036 Call 0x1B6F7F0
	037 Move X0, 0x22B3000
	038 Move X0, [X0+584]
	039 Call 0x1B6F7F0
	040 Move X0, 0x22B3000
	041 Move X0, [X0+592]
	042 Call 0x1B6F7F0
	043 Move X0, 0x22B3000
	044 Move X0, [X0+600]
	045 Call 0x1B6F7F0
	046 Move W8, 1
	047 Move [X24+1016], W8
	048 Move W8, [X19+88]
	049 Compare W8, 0
	050 JumpIfEqual {146}
	051 Move [X19+88], W31
	052 Move X0, [X19+64]
	053 Compare X0, 0
	054 JumpIfEqual {162}
	055 Move W8, [X0+96]
	056 Move TEMP, X8
	057 And TEMP, TEMP, 2
	058 Compare TEMP, 2
	059 JumpIfEqual {162}
	060 Move X1, X31
	061 Call NetworkObject.get_HasStateAuthority, X0
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {162}
	066 Move X0, X19
	067 Call Crate.get_currentHealth, X0
	068 Subtract W8, W0, W21
	069 NotImplemented "Instruction BIC not yet implemented."
	070 Move X0, X19
	071 Call Crate.set_currentHealth, X0, X1
	072 Move X0, X19
	073 Call Crate.get_currentHealth, X0
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X0, [X19+136]
	076 Compare X0, 0
	077 JumpIfEqual {361}
	078 Move W1, W31
	079 Move X2, X31
	080 Call GameObject.SetActive, X0, X1
	081 Move X20, [X19+56]
	082 Move X21, [X19+128]
	083 Move X0, X19
	084 Move X1, X31
	085 Call Component.get_transform, X0
	086 Compare X0, 0
	087 JumpIfEqual {361}
	088 Move X1, X31
	089 Call Transform.get_position, X0
	090 Move X8, 0x22B3000
	091 Move X8, [X8+584]
	092 Add X0, X31, 64
	093 Move [X31+64], X31
	094 Move [X31+72], X31
	095 Move X1, [X8]
	096 Call Nullable`1<Vector3>..ctor, X0, X1
	097 Move X0, X19
	098 Move X1, X31
	099 Call Component.get_transform, X0
	100 Compare X0, 0
	101 JumpIfEqual {361}
	102 Move X1, X31
	103 Call Transform.get_rotation, X0
	104 Move X8, 0x22B3000
	105 Move X8, [X8+592]
	106 Add X0, X31, 40
	107 Move [X31+40], X31
	108 Move [X31+48], X31
	109 Move [X31+56], W31
	110 Move X1, [X8]
	111 Call Nullable`1<Quaternion>..ctor, X0, X1
	112 Compare X20, 0
	113 JumpIfEqual {361}
	114 NotImplemented "Instruction LDUR not yet implemented."
	115 Move W8, [X31+56]
	116 Move X2, [X31+64]
	117 Move X3, [X31+72]
	118 Add X4, X31, 16
	119 Move X0, X20
	120 Move X1, X21
	121 Move X5, X31
	122 Move X6, X31
	123 Move W7, W31
	124 Move [X31+1], V0
	125 Move [X31+32], W8
	126 Move [X31], X31
	127 Call NetworkRunner.Spawn, X0, X1, X2, X3, X4, X5, X6
	128 Move X0, [X19+56]
	129 Compare X0, 0
	130 JumpIfEqual {361}
	131 Move X1, [X19+64]
	132 Move X2, X31
	133 Call NetworkRunner.Despawn, X0, X1
	134 Move X20, [X19+144]
	135 Move X0, X19
	136 Move X1, X31
	137 Call Component.get_transform, X0
	138 Compare X0, 0
	139 JumpIfEqual {361}
	140 Move X1, X31
	141 Call Transform.get_position, X0
	142 Move S3, 1
	143 Move X0, X20
	144 Move X1, X31
	145 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	146 Move X25, 0x22B3000
	147 Move X25, [X25+448]
	148 Move X0, [X25]
	149 Move W8, [X0+224]
	150 Compare W8, 0
	151 JumpIfNotEqual {153}
	152 Call 0x1B6F8F8
	153 Move X0, X19
	154 Move X1, X31
	155 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	156 Move X0, [X19+56]
	157 Compare X0, 0
	158 JumpIfEqual {361}
	159 Move X1, X31
	160 Call NetworkRunner.get_Stage, X0
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move X20, [X31+192]
	163 Move X19, [X31+200]
	164 Move X22, [X31+176]
	165 Move X21, [X31+184]
	166 Move X24, [X31+160]
	167 Move X23, [X31+168]
	168 Move X26, [X31+144]
	169 Move X25, [X31+152]
	170 Move X30, [X31+128]
	171 Move D9, [X31+112]
	172 Move D8, [X31+120]
	173 Move D11, [X31+96]
	174 Move D10, [X31+104]
	175 Move D13, [X31+80]
	176 Move D12, [X31+88]
	177 Add X31, X31, 208
	178 Return 
	179 Move X0, [X19+64]
	180 Compare X0, 0
	181 JumpIfEqual {361}
	182 Move X1, X31
	183 Call NetworkObject.GetLocalAuthorityMask, X0
	184 And W31, W0, 7
	185 Move TEMP, X0
	186 And TEMP, TEMP, 1
	187 Compare TEMP, 1
	188 JumpIfEqual {52}
	189 Move X0, X23
	190 Move X1, X31
	191 Call ReadWriteUtilsForWeaver.GetByteCountUtf8NoHash, X0
	192 Move W24, W0
	193 Move X0, X22
	194 Move X1, X31
	195 Call ReadWriteUtilsForWeaver.GetByteCountUtf8NoHash, X0
	196 Add W8, W0, 3
	197 Move X0, X20
	198 Move X1, X31
	199 And W26, W8, 0xFFFFFFFC
	200 Call ReadWriteUtilsForWeaver.GetByteCountUtf8NoHash, X0
	201 Add W9, W24, 39
	202 Add W8, W0, 3
	203 And W9, W9, 0xFFFFFFFC
	204 And W8, W8, 0xFFFFFFFC
	205 Add W9, W9, W26
	206 Add W24, W9, W8
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Move X8, [X19+56]
	209 Compare X8, 0
	210 JumpIfEqual {361}
	211 Move X0, [X8+80]
	212 Compare X0, 0
	213 JumpIfEqual {361}
	214 Move X1, X31
	215 Call Simulation.HasAnyActiveConnections, X0
	216 Move TEMP, X0
	217 And TEMP, TEMP, 1
	218 Compare TEMP, 1
	219 JumpIfNotEqual {162}
	220 Move X8, [X19+56]
	221 Compare X8, 0
	222 JumpIfEqual {361}
	223 Move X0, [X8+80]
	224 Move W1, W24
	225 Move X2, X31
	226 Call SimulationMessage.Allocate, X0, X1
	227 Move X24, X0
	228 Move W0, 1
	229 Move X1, X31
	230 Call Assert.Check, X0
	231 Move X8, [X19+64]
	232 Compare X8, 0
	233 JumpIfEqual {361}
	234 Move X8, [X8+32]
	235 Add X25, X24, 28
	236 Compare X8, 0
	237 JumpIfEqual {297}
	238 Move W0, [X8]
	239 Move X0, [X25]
	240 Move X19, [X19+64]
	241 Move W8, [X0+224]
	242 Compare W8, 0
	243 JumpIfNotEqual {245}
	244 Call 0x1B6F8F8
	245 Move X8, 0x22B3000
	246 Move X8, [X8+600]
	247 Move X1, X19
	248 Move X20, [X31+192]
	249 Move X19, [X31+200]
	250 Move X22, [X31+176]
	251 Move X21, [X31+184]
	252 Move X0, [X8]
	253 Move X24, [X31+160]
	254 Move X23, [X31+168]
	255 Move X26, [X31+144]
	256 Move X25, [X31+152]
	257 Move X30, [X31+128]
	258 Move D9, [X31+112]
	259 Move D8, [X31+120]
	260 Move D11, [X31+96]
	261 Move D10, [X31+104]
	262 Move D13, [X31+80]
	263 Move D12, [X31+88]
	264 Move W2, 7
	265 Move X3, X31
	266 Add X31, X31, 208
	267 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	268 Return 
	269 Move X0, [X25]
	270 Move W8, [X0+224]
	271 Compare W8, 0
	272 JumpIfNotEqual {274}
	273 Call 0x1B6F8F8
	274 Move X8, 0x22B3000
	275 Move X8, [X8+600]
	276 Move W1, W24
	277 Move X20, [X31+192]
	278 Move X19, [X31+200]
	279 Move X22, [X31+176]
	280 Move X21, [X31+184]
	281 Move X0, [X8]
	282 Move X24, [X31+160]
	283 Move X23, [X31+168]
	284 Move X26, [X31+144]
	285 Move X25, [X31+152]
	286 Move X30, [X31+128]
	287 Move D9, [X31+112]
	288 Move D8, [X31+120]
	289 Move D11, [X31+96]
	290 Move D10, [X31+104]
	291 Move D13, [X31+80]
	292 Move D12, [X31+88]
	293 Move X2, X31
	294 Add X31, X31, 208
	295 Call NetworkBehaviourUtils.NotifyRpcPayloadSizeExceeded, X0, X1
	296 Return 
	297 Move X0, X31
	298 Move W1, [X19+104]
	299 Move W2, 1
	300 Move X3, X31
	301 Call RpcHeader.Create, X0, X1, X2
	302 Move [X24+28], X0
	303 Add X0, X24, 52
	304 Move X1, X23
	305 Move X2, X31
	306 Move [X24+36], W21
	307 Move [X24+40], S13
	308 Move [X24+48], S12
	309 Move [X24+48], S11
	310 Call ReadWriteUtilsForWeaver.WriteStringUtf8NoHash, X0, X1
	311 Add W8, W0, 27
	312 And W21, W8, 0xFFFFFFFC
	313 Add X0, X25, W21
	314 Move X1, X22
	315 Move X2, X31
	316 Call ReadWriteUtilsForWeaver.WriteStringUtf8NoHash, X0, X1
	317 Add W8, W0, 3
	318 And W8, W8, 0xFFFFFFFC
	319 Add W8, W8, W21
	320 Add W21, W8, 12
	321 Add X9, X25, W8
	322 Add X0, X25, W21
	323 Move X1, X20
	324 Move X2, X31
	325 Move [X9], S10
	326 Move [X9+8], S9
	327 Move [X9+8], S8
	328 Call ReadWriteUtilsForWeaver.WriteStringUtf8NoHash, X0, X1
	329 Compare X24, 0
	330 JumpIfEqual {361}
	331 Add W8, W0, 3
	332 And W8, W8, 0x1FFFFFFC
	333 Add W8, W8, W21
	334 Move W8, W8
	335 ShiftRight W8, 29
	336 And W8, W8, 0xFFFFFFF
	337 Move [X24+12], W8
	338 Move X0, [X19+56]
	339 Compare X0, 0
	340 JumpIfEqual {361}
	341 Move X1, X24
	342 Move X20, [X31+192]
	343 Move X19, [X31+200]
	344 Move X22, [X31+176]
	345 Move X21, [X31+184]
	346 Move X24, [X31+160]
	347 Move X23, [X31+168]
	348 Move X26, [X31+144]
	349 Move X25, [X31+152]
	350 Move X30, [X31+128]
	351 Move D9, [X31+112]
	352 Move D8, [X31+120]
	353 Move D11, [X31+96]
	354 Move D10, [X31+104]
	355 Move D13, [X31+80]
	356 Move D12, [X31+88]
	357 Move X2, X31
	358 Add X31, X31, 208
	359 Call NetworkRunner.SendRpc, X0, X1
	360 Return 
	361 Call 0x1B6FA1C

Method: System.Void Hit(System.Int32 damage, UnityEngine.Vector3 position, AnimalCompany.RandomSFX hitSound, AnimalCompany.RandomSFX killSound, UnityEngine.Vector3 force, System.String hitName)

Disassembly:
	0x01C9CE0C ADD X8, X8, X9, 0x4, LSL
	0x01C9CE10 ADD X0, X8, 0x138
	0x01C9CE14 LDP X8, X5, [X0]
	0x01C9CE18 MOVZ W1, 0xF
	0x01C9CE1C MOV X0, X21
	0x01C9CE20 MOV V0.16B, V8.16B
	0x01C9CE24 MOV V1.16B, V9.16B
	0x01C9CE28 MOV V2.16B, V10.16B
	0x01C9CE2C MOV X2, X31
	0x01C9CE30 MOV X3, X31
	0x01C9CE34 MOV V3.16B, V13.16B
	0x01C9CE38 MOV V4.16B, V12.16B
	0x01C9CE3C MOV V5.16B, V11.16B
	0x01C9CE40 MOV X4, X22
	0x01C9CE44 BLR X8
	0x01C9CE48 MOV X0, X20
	0x01C9CE4C MOV X1, X31
	0x01C9CE50 BL 0x3AF208C
	0x01C9CE54 FMUL S0, S0, S0
	0x01C9CE58 FMUL S1, S1, S1
	0x01C9CE5C FMUL S2, S2, S2
	0x01C9CE60 MOVZ W8, 0x43480000
	0x01C9CE64 LDR X0, [X19 + 0x80]
	0x01C9CE68 FADD S0, S0, S1
	0x01C9CE6C FMOV S1, W8
	0x01C9CE70 FADD S0, S2, S0
	0x01C9CE74 FDIV S0, S0, S1
	0x01C9CE78 FMOV S1, 1
	0x01C9CE7C FMIN S3, S0, S1
	0x01C9CE80 MOV V0.16B, V8.16B
	0x01C9CE84 MOV V1.16B, V9.16B
	0x01C9CE88 MOV V2.16B, V10.16B
	0x01C9CE8C MOV X1, X31
	0x01C9CE90 BL 0x1CC181C
	0x01C9CE94 MOV X0, X31
	0x01C9CE98 BL 0x3AA4844
	0x01C9CE9C STR S0, [X19 + 0x98]
	0x01C9CEA0 LDP X20, X19, [X31 + 0x50]
	0x01C9CEA4 LDP X22, X21, [X31 + 0x40]
	0x01C9CEA8 LDR X30, [X31 + 0x38]
	0x01C9CEAC LDP D9, D8, [X31 + 0x28]
	0x01C9CEB0 LDP D11, D10, [X31 + 0x18]
	0x01C9CEB4 LDP D13, D12, [X31 + 0x8]
	0x01C9CEB8 LDR V14, [X31], #0x60
	0x01C9CEBC RET
	0x01C9CEC0 BL 0x1B6EA1C
	0x01C9CEC4 BL 0x1B6EA24
	0x01C9CEC8 STP D13, D12, [X31 - 0x50]!
	0x01C9CECC STP D11, D10, [X31 + 0x10]
	0x01C9CED0 STP D9, D8, [X31 + 0x20]
	0x01C9CED4 STP X30, X21, [X31 + 0x30]
	0x01C9CED8 STP X20, X19, [X31 + 0x40]
	0x01C9CEDC ADRP X21, 0x2587000
	0x01C9CEE0 LDRB W8, [X21 + 0x403]
	0x01C9CEE4 MOV X20, X1
	0x01C9CEE8 MOV X19, X0
	0x01C9CEEC TBNZ X8, 0x0, 0x1C9CF10
	0x01C9CEF0 ADRP X0, 0x22B2000
	0x01C9CEF4 LDR X0, [X0 + 0x2B0]
	0x01C9CEF8 BL 0x1B6E7F0
	0x01C9CEFC ADRP X0, 0x22B1000
	0x01C9CF00 LDR X0, [X0 + 0x478]
	0x01C9CF04 BL 0x1B6E7F0
	0x01C9CF08 MOVZ W8, 0x1
	0x01C9CF0C STRB W8, [X21 + 0x403]
	0x01C9CF10 LDR X0, [X19 + 0x40]
	0x01C9CF14 CBZ X0, 0x1C9D0CC
	0x01C9CF18 LDRB W8, [X0 + 0x60]
	0x01C9CF1C TBNZ X8, 0x1, 0x1C9D0CC
	0x01C9CF20 MOV X1, X31
	0x01C9CF24 BL 0x1D9E780
	0x01C9CF28 TBZ X0, 0x0, 0x1C9D0CC
	0x01C9CF2C MOV X0, X31
	0x01C9CF30 BL 0x3AA47CC
	0x01C9CF34 LDR V1, [X19 + 0x98]
	0x01C9CF38 FSUB S0, S0, S1
	0x01C9CF3C FMOV S1, 0.5
	0x01C9CF40 FCMP S0, S1

ISIL:
	001 Move [X31-112], D13
	002 Move [X31-104], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X25
	009 Move [X31+64], X24
	010 Move [X31+72], X23
	011 Move [X31+80], X22
	012 Move [X31+88], X21
	013 Move [X31+96], X20
	014 Move [X31+104], X19
	015 Move X23, 0x2588000
	016 Move X25, 0x22B2000
	017 Move W8, [X23+1017]
	018 Move X25, [X25+1144]
	019 Move X19, X4
	020 Move V8, V5
	021 Move V9, V4
	022 Move V10, V3
	023 Move X22, X3
	024 Move X24, X2
	025 Move V11, V2
	026 Move V12, V1
	027 Move V13, V0
	028 Move W20, W1
	029 Move X21, X0
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {39}
	034 Move X0, 0x22B2000
	035 Move X0, [X0+1144]
	036 Call 0x1B6F7F0
	037 Move W8, 1
	038 Move [X23+1017], W8
	039 Move X0, [X25]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1B6F8F8
	044 Move X0, X24
	045 Move X1, X31
	046 Move X2, X31
	047 Call Object.op_Inequality, X0, X1
	048 Move X23, X31
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {59}
	053 Compare X24, 0
	054 JumpIfEqual {107}
	055 Move X0, X24
	056 Move X1, X31
	057 Call Object.get_name, X0
	058 Move X23, X0
	059 Move X0, [X25]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1B6F8F8
	064 Move X0, X22
	065 Move X1, X31
	066 Move X2, X31
	067 Call Object.op_Inequality, X0, X1
	068 Move X3, X31
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {79}
	073 Compare X22, 0
	074 JumpIfEqual {107}
	075 Move X0, X22
	076 Move X1, X31
	077 Call Object.get_name, X0
	078 Move X3, X0
	079 Compare X21, 0
	080 JumpIfEqual {107}
	081 Move X0, X21
	082 Move W1, W20
	083 Move V2, V11
	084 Move X2, X23
	085 Move V3, V10
	086 Move V4, V9
	087 Move V5, V8
	088 Move X4, X19
	089 Move X20, [X31+96]
	090 Move X19, [X31+104]
	091 Move X22, [X31+80]
	092 Move X21, [X31+88]
	093 Move X24, [X31+64]
	094 Move X23, [X31+72]
	095 Move X30, [X31+48]
	096 Move X25, [X31+56]
	097 Move D9, [X31+32]
	098 Move D8, [X31+40]
	099 Move D11, [X31+16]
	100 Move D10, [X31+24]
	101 Move V0, V13
	102 Move V1, V12
	103 Move D13, [X31+112]
	104 Move D12, [X31+120]
	105 Call Crate.RPC_TakeHit, X0, X1, X2, X3, X4, X5, X6
	106 Return 
	107 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01C9CF44 B.MI 0x1C9D0CC
	0x01C9CF48 CBZ X20, 0x1C9D0E4

ISIL:
	001 Move X1, X31
	002 Call NetworkBehaviour..ctor, X0
	003 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01C9CF4C ADRP X8, 0x22B2000
	0x01C9CF50 LDR X8, [X8 + 0x2B0]

ISIL:
	001 Move W1, [X0+152]
	002 Call Crate.set_currentHealth, X0, X1
	003 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01C9CF54 MOV X0, X20
	0x01C9CF58 LDR X1, [X8]
	0x01C9CF5C BL 0x208FDE8
	0x01C9CF60 ADRP X8, 0x22B1000
	0x01C9CF64 LDR X8, [X8 + 0x478]
	0x01C9CF68 MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Crate.get_currentHealth, X0
	005 Move [X19+152], W0
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 

Method: System.Void RPC_TakeHit@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01C9CF6C LDR X8, [X8]
	0x01C9CF70 LDR W9, [X8 + 0xE0]
	0x01C9CF74 CBNZ W9, 0x1C9CF80
	0x01C9CF78 MOV X0, X8
	0x01C9CF7C BL 0x1B6E8F8
	0x01C9CF80 MOV X0, X20
	0x01C9CF84 MOV X1, X31
	0x01C9CF88 MOV X2, X31
	0x01C9CF8C BL 0x3A9D6EC
	0x01C9CF90 TBZ X0, 0x0, 0x1C9D0CC
	0x01C9CF94 CBZ X20, 0x1C9D0E4
	0x01C9CF98 MOV X0, X20
	0x01C9CF9C MOV X1, X31
	0x01C9CFA0 BL 0x1CAE940
	0x01C9CFA4 TBNZ X0, 0x0, 0x1C9D0CC
	0x01C9CFA8 MOV X0, X19
	0x01C9CFAC MOV X1, X31
	0x01C9CFB0 BL 0x3A9B084
	0x01C9CFB4 CBZ X0, 0x1C9D0E4
	0x01C9CFB8 MOV X1, X31
	0x01C9CFBC BL 0x3AA7658
	0x01C9CFC0 LDR X0, [X19 + 0x88]
	0x01C9CFC4 CBZ X0, 0x1C9D0E4
	0x01C9CFC8 MOV X1, X31
	0x01C9CFCC MOV V8.16B, V0.16B
	0x01C9CFD0 MOV V9.16B, V1.16B
	0x01C9CFD4 MOV V10.16B, V2.16B
	0x01C9CFD8 BL 0x3AF646C
	0x01C9CFDC LDR X0, [X19 + 0x88]
	0x01C9CFE0 CBZ X0, 0x1C9D0E4
	0x01C9CFE4 MOV X1, X31
	0x01C9CFE8 MOV V13.16B, V0.16B
	0x01C9CFEC MOV V11.16B, V1.16B
	0x01C9CFF0 MOV V12.16B, V2.16B
	0x01C9CFF4 BL 0x3AF67EC
	0x01C9CFF8 LDR X8, [X19 + 0x90]
	0x01C9CFFC CBZ X8, 0x1C9D0E4
	0x01C9D000 LDR X8, [X8 + 0x80]
	0x01C9D004 CBZ X8, 0x1C9D0E4
	0x01C9D008 ADRP X9, 0xFFFFFFFFFEE0C000
	0x01C9D00C LDR V2, [X9 + 0xD08]
	0x01C9D010 LDR X4, [X8 + 0x18]
	0x01C9D014 FMUL S1, S13, S0
	0x01C9D018 FMUL S4, S11, S0
	0x01C9D01C FMUL S0, S12, S0
	0x01C9D020 FMUL S3, S1, S2
	0x01C9D024 FMUL S4, S4, S2
	0x01C9D028 FMUL S5, S0, S2
	0x01C9D02C MOVZ W1, 0xF
	0x01C9D030 MOV X0, X20
	0x01C9D034 MOV V0.16B, V8.16B
	0x01C9D038 MOV V1.16B, V9.16B
	0x01C9D03C MOV V2.16B, V10.16B
	0x01C9D040 MOV X2, X31
	0x01C9D044 MOV X3, X31
	0x01C9D048 MOV X5, X31
	0x01C9D04C BL 0x1CB95D8
	0x01C9D050 LDR X0, [X19 + 0x88]
	0x01C9D054 CBZ X0, 0x1C9D0E4
	0x01C9D058 MOV X1, X31
	0x01C9D05C BL 0x3AF646C
	0x01C9D060 LDR X20, [X19 + 0x80]
	0x01C9D064 MOV X0, X19
	0x01C9D068 MOV X1, X31
	0x01C9D06C MOV V8.16B, V0.16B
	0x01C9D070 MOV V9.16B, V1.16B
	0x01C9D074 MOV V10.16B, V2.16B
	0x01C9D078 BL 0x3A9B084
	0x01C9D07C CBZ X0, 0x1C9D0E4
	0x01C9D080 FMUL S0, S8, S8
	0x01C9D084 FMUL S1, S9, S9
	0x01C9D088 FMUL S2, S10, S10
	0x01C9D08C MOVZ W8, 0x42C80000
	0x01C9D090 FADD S0, S0, S1
	0x01C9D094 FMOV S1, W8
	0x01C9D098 FADD S0, S2, S0
	0x01C9D09C FDIV S0, S0, S1
	0x01C9D0A0 FMOV S1, 1
	0x01C9D0A4 MOV X1, X31
	0x01C9D0A8 FMIN S8, S0, S1
	0x01C9D0AC BL 0x3AA7658
	0x01C9D0B0 MOV X0, X20
	0x01C9D0B4 MOV V3.16B, V8.16B
	0x01C9D0B8 MOV X1, X31
	0x01C9D0BC BL 0x1CC181C

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D13
	003 Move [X31+40], D12
	004 Move [X31+48], D11
	005 Move [X31+56], D10
	006 Move [X31+64], D9
	007 Move [X31+72], D8
	008 Move [X31+80], X30
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X20, 0x2588000
	015 Move W8, [X20+1018]
	016 Move X21, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x22B3000
	023 Move X0, [X0+608]
	024 Call 0x1B6F7F0
	025 Move W8, 1
	026 Move [X20+1018], W8
	027 Move W0, 1
	028 Move X1, X31
	029 Move [X31+16], X31
	030 Move [X31+24], X31
	031 Move [X31+8], X31
	032 Move W22, 1
	033 Call Assert.Check, X0
	034 Move W20, [X21+36]
	035 Move S8, [X21+40]
	036 Move S9, [X21+44]
	037 Move V10, [X21+48]
	038 Add X0, X21, 52
	039 Add X1, X31, 24
	040 Move X2, X31
	041 Add X23, X21, 28
	042 Call ReadWriteUtilsForWeaver.ReadStringUtf8NoHash, X0, X1
	043 Add W8, W0, 27
	044 And W21, W8, 0xFFFFFFFC
	045 Add X0, X23, W21
	046 Add X1, X31, 16
	047 Move X2, X31
	048 Call ReadWriteUtilsForWeaver.ReadStringUtf8NoHash, X0, X1
	049 Add W8, W0, 3
	050 And W8, W8, 0xFFFFFFFC
	051 Add W8, W8, W21
	052 Add X9, X23, W8
	053 Move S11, [X9]
	054 Move S12, [X9+4]
	055 Move V13, [X9+8]
	056 Add W8, W8, 12
	057 Add X0, X23, W8
	058 Add X1, X31, 8
	059 Move X2, X31
	060 Call ReadWriteUtilsForWeaver.ReadStringUtf8NoHash, X0, X1
	061 Compare X19, 0
	062 JumpIfEqual {103}
	063 Move X9, 0x22B2000
	064 Move X9, [X9+608]
	065 Move [X19+88], W22
	066 Move X8, [X19]
	067 Move X1, [X9]
	068 Move W10, [X8+304]
	069 Move W9, [X1+304]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X8, [X8+200]
	072 Add X8, X8, X9
	073 NotImplemented "Instruction LDUR not yet implemented."
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X3, [X31+16]
	076 Move X2, [X31+24]
	077 Move X4, [X31+8]
	078 Move X0, X19
	079 Move W1, W20
	080 Move V0, V8
	081 Move V1, V9
	082 Move V2, V10
	083 Move V3, V11
	084 Move V4, V12
	085 Move V5, V13
	086 Call Crate.RPC_TakeHit, X0, X1, X2, X3, X4, X5, X6
	087 Move X20, [X31+112]
	088 Move X19, [X31+120]
	089 Move X22, [X31+96]
	090 Move X21, [X31+104]
	091 Move X30, [X31+80]
	092 Move X23, [X31+88]
	093 Move D9, [X31+64]
	094 Move D8, [X31+72]
	095 Move D11, [X31+48]
	096 Move D10, [X31+56]
	097 Move D13, [X31+32]
	098 Move D12, [X31+40]
	099 Add X31, X31, 128
	100 Return 
	101 Move X0, X19
	102 Call 0x1B6FCDC
	103 Call 0x1B6FA1C

