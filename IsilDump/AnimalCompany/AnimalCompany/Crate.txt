Type: AnimalCompany.Crate

Method: System.Int32 get_health()

Disassembly:
	0x01D8BD0C STP X20, X19, [X31 + 0x60]
	0x01D8BD10 ADRP X25, 0x264D000
	0x01D8BD14 ADRP X24, 0x2368000
	0x01D8BD18 LDRB W8, [X25 + 0x9D0]
	0x01D8BD1C LDR X24, [X24 + 0x598]
	0x01D8BD20 MOV X19, X4
	0x01D8BD24 MOV V8.16B, V5.16B
	0x01D8BD28 MOV V9.16B, V4.16B
	0x01D8BD2C MOV V10.16B, V3.16B
	0x01D8BD30 MOV X22, X3
	0x01D8BD34 MOV X23, X2
	0x01D8BD38 MOV V11.16B, V2.16B
	0x01D8BD3C MOV V12.16B, V1.16B
	0x01D8BD40 MOV V13.16B, V0.16B
	0x01D8BD44 MOV W20, W1
	0x01D8BD48 MOV X21, X0
	0x01D8BD4C TBNZ X8, 0x0, 0x1D8BD70
	0x01D8BD50 ADRP X0, 0x2368000
	0x01D8BD54 LDR X0, [X0 + 0x598]
	0x01D8BD58 BL 0x1C16CF4
	0x01D8BD5C ADRP X0, 0x2368000
	0x01D8BD60 LDR X0, [X0 + 0x988]
	0x01D8BD64 BL 0x1C16CF4
	0x01D8BD68 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2369000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x236C000
	016 Move X0, [X0+2776]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x236C000
	023 Move X0, [X0+2784]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_health(System.Int32 value)

Disassembly:
	0x01D8BD6C STRB W8, [X25 + 0x9D0]
	0x01D8BD70 LDR X0, [X24]
	0x01D8BD74 LDR W8, [X0 + 0xE0]
	0x01D8BD78 CBNZ W8, 0x1D8BD80
	0x01D8BD7C BL 0x1C16DFC
	0x01D8BD80 ADRP X25, 0x2368000
	0x01D8BD84 LDR X25, [X25 + 0x988]
	0x01D8BD88 MOV X0, X23
	0x01D8BD8C MOV X1, X31
	0x01D8BD90 MOV X2, X31
	0x01D8BD94 BL 0x3C354F8
	0x01D8BD98 TBZ X0, 0x0, 0x1D8BDB4
	0x01D8BD9C CBZ X23, 0x1D8BE44
	0x01D8BDA0 MOV X0, X23
	0x01D8BDA4 MOV X1, X31
	0x01D8BDA8 BL 0x3C389D4
	0x01D8BDAC MOV X23, X0
	0x01D8BDB0 B 0x1D8BDB8
	0x01D8BDB4 LDR X23, [X25]
	0x01D8BDB8 LDR X0, [X24]
	0x01D8BDBC LDR W8, [X0 + 0xE0]
	0x01D8BDC0 CBNZ W8, 0x1D8BDC8
	0x01D8BDC4 BL 0x1C16DFC
	0x01D8BDC8 MOV X0, X22

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2369000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x236C000
	016 Move X0, [X0+2776]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x236C000
	023 Move X0, [X0+2792]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: Fusion.TickTimer get_life()

Disassembly:
	0x01D8BDCC MOV X1, X31
	0x01D8BDD0 MOV X2, X31
	0x01D8BDD4 BL 0x3C354F8
	0x01D8BDD8 TBZ X0, 0x0, 0x1D8BDF4
	0x01D8BDDC CBZ X22, 0x1D8BE44
	0x01D8BDE0 MOV X0, X22
	0x01D8BDE4 MOV X1, X31
	0x01D8BDE8 BL 0x3C389D4
	0x01D8BDEC MOV X3, X0
	0x01D8BDF0 B 0x1D8BDF8
	0x01D8BDF4 LDR X3, [X25]
	0x01D8BDF8 CBZ X21, 0x1D8BE44
	0x01D8BDFC MOV X0, X21
	0x01D8BE00 MOV W1, W20
	0x01D8BE04 MOV V2.16B, V11.16B
	0x01D8BE08 MOV X2, X23
	0x01D8BE0C MOV V3.16B, V10.16B
	0x01D8BE10 MOV V4.16B, V9.16B
	0x01D8BE14 MOV V5.16B, V8.16B
	0x01D8BE18 MOV X4, X19
	0x01D8BE1C LDP X20, X19, [X31 + 0x60]
	0x01D8BE20 LDP X22, X21, [X31 + 0x50]
	0x01D8BE24 LDP X24, X23, [X31 + 0x40]
	0x01D8BE28 LDP X30, X25, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+4]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2369000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x236C000
	016 Move X0, [X0+2800]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x236C000
	023 Move X0, [X0+2808]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_life(Fusion.TickTimer value)

Disassembly:
	0x01D8BE2C LDP D9, D8, [X31 + 0x20]
	0x01D8BE30 LDP D11, D10, [X31 + 0x10]
	0x01D8BE34 MOV V0.16B, V13.16B
	0x01D8BE38 MOV V1.16B, V12.16B
	0x01D8BE3C LDP D13, D12, [X31], #0x70
	0x01D8BE40 B 0x1D8B994
	0x01D8BE44 BL 0x1C16F20
	0x01D8BE48 MOVZ W8, 0x5
	0x01D8BE4C MOV X1, X31
	0x01D8BE50 STR W8, [X0 + 0xAC]
	0x01D8BE54 B 0x1E74F04
	0x01D8BE58 STR X30, [X31 - 0x30]!
	0x01D8BE5C STP X22, X21, [X31 + 0x10]
	0x01D8BE60 STP X20, X19, [X31 + 0x20]
	0x01D8BE64 ADRP X21, 0x264D000
	0x01D8BE68 ADRP X22, 0x236B000
	0x01D8BE6C ADRP X19, 0x236B000
	0x01D8BE70 ADRP X20, 0x236B000
	0x01D8BE74 LDRB W8, [X21 + 0x9D1]
	0x01D8BE78 LDR X22, [X22 + 0xB88]
	0x01D8BE7C LDR X19, [X19 + 0xB90]
	0x01D8BE80 LDR X20, [X20 + 0xB08]
	0x01D8BE84 TBNZ X8, 0x0, 0x1D8BEB4
	0x01D8BE88 ADRP X0, 0x236B000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+4], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2369000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x236C000
	016 Move X0, [X0+2800]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x236C000
	023 Move X0, [X0+2816]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Collections.Generic.HashSet`1<AnimalCompany.Crate> get_allCrates()

Disassembly:
	0x01D8BE8C LDR X0, [X0 + 0xB08]
	0x01D8BE90 BL 0x1C16CF4
	0x01D8BE94 ADRP X0, 0x236B000
	0x01D8BE98 LDR X0, [X0 + 0xB90]
	0x01D8BE9C BL 0x1C16CF4
	0x01D8BEA0 ADRP X0, 0x236B000
	0x01D8BEA4 LDR X0, [X0 + 0xB88]
	0x01D8BEA8 BL 0x1C16CF4
	0x01D8BEAC MOVZ W8, 0x1
	0x01D8BEB0 STRB W8, [X21 + 0x9D1]
	0x01D8BEB4 LDR X0, [X22]
	0x01D8BEB8 BL 0x1C16F10
	0x01D8BEBC LDR X1, [X19]
	0x01D8BEC0 MOV X19, X0
	0x01D8BEC4 BL 0x2DBDE08
	0x01D8BEC8 LDR X8, [X20]
	0x01D8BECC LDP X22, X21, [X31 + 0x10]
	0x01D8BED0 LDR X8, [X8 + 0xB8]
	0x01D8BED4 STR X19, [X8]
	0x01D8BED8 LDP X20, X19, [X31 + 0x20]
	0x01D8BEDC LDR X30, [X31], #0x30
	0x01D8BEE0 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x264E000
	005 Move X19, 0x236C000
	006 Move W8, [X20+2503]
	007 Move X19, [X19+2824]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x236C000
	013 Move X0, [X0+2824]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2503], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void Awake()

Disassembly:
	0x01D8BEE4 STR D10, [X31 - 0x50]!
	0x01D8BEE8 STP D9, D8, [X31 + 0x10]
	0x01D8BEEC STP X30, X23, [X31 + 0x20]
	0x01D8BEF0 STP X22, X21, [X31 + 0x30]
	0x01D8BEF4 STP X20, X19, [X31 + 0x40]
	0x01D8BEF8 ADRP X21, 0x264D000
	0x01D8BEFC LDRB W8, [X21 + 0x9D2]
	0x01D8BF00 MOV X20, X1
	0x01D8BF04 MOV X19, X0
	0x01D8BF08 TBNZ X8, 0x0, 0x1D8BF2C
	0x01D8BF0C ADRP X0, 0x236B000
	0x01D8BF10 LDR X0, [X0 + 0xB98]
	0x01D8BF14 BL 0x1C16CF4
	0x01D8BF18 ADRP X0, 0x2368000
	0x01D8BF1C LDR X0, [X0 + 0x598]
	0x01D8BF20 BL 0x1C16CF4
	0x01D8BF24 MOVZ W8, 0x1
	0x01D8BF28 STRB W8, [X21 + 0x9D2]
	0x01D8BF2C MOV X0, X20
	0x01D8BF30 MOV X1, X31
	0x01D8BF34 BL 0x1EB84D4
	0x01D8BF38 TBZ X0, 0x0, 0x1D8C1A4
	0x01D8BF3C ADRP X22, 0x264D000
	0x01D8BF40 LDRB W8, [X22 + 0xA21]
	0x01D8BF44 CBNZ W8, 0x1D8BF68
	0x01D8BF48 ADRP X0, 0x236B000
	0x01D8BF4C LDR X0, [X0 + 0xBA0]
	0x01D8BF50 BL 0x1C16CF4
	0x01D8BF54 ADRP X0, 0x236B000
	0x01D8BF58 LDR X0, [X0 + 0xBA8]
	0x01D8BF5C BL 0x1C16CF4
	0x01D8BF60 MOVZ W8, 0x1
	0x01D8BF64 STRB W8, [X22 + 0xA21]
	0x01D8BF68 LDR W8, [X20 + 0x8]
	0x01D8BF6C LDR X21, [X20 + 0x10]
	0x01D8BF70 CBZ W8, 0x1D8BF84
	0x01D8BF74 CBZ X21, 0x1D8BFE8
	0x01D8BF78 LDR X8, [X21]
	0x01D8BF7C LDRB W9, [X8 + 0x130]
	0x01D8BF80 B 0x1D8BFBC
	0x01D8BF84 CBZ X21, 0x1D8BFE8
	0x01D8BF88 ADRP X9, 0x236B000
	0x01D8BF8C LDR X9, [X9 + 0xBA0]
	0x01D8BF90 LDR X8, [X21]
	0x01D8BF94 LDR X10, [X9]
	0x01D8BF98 LDRB W9, [X8 + 0x130]
	0x01D8BF9C LDRB W11, [X10 + 0x130]
	0x01D8BFA0 CMP W9, W11
	0x01D8BFA4 B.CC 0x1D8BFBC
	0x01D8BFA8 LDR X12, [X8 + 0xC8]
	0x01D8BFAC ADD X11, X12, X11, 0x3, LSL
	0x01D8BFB0 LDUR X11, [X11 - 0x8]
	0x01D8BFB4 CMP X11, X10
	0x01D8BFB8 B.EQ 0x1D8C1BC
	0x01D8BFBC ADRP X10, 0x236B000
	0x01D8BFC0 LDR X10, [X10 + 0xBA8]
	0x01D8BFC4 LDR X1, [X10]
	0x01D8BFC8 LDRB W10, [X1 + 0x130]
	0x01D8BFCC CMP W9, W10
	0x01D8BFD0 B.CC 0x1D8C1D0
	0x01D8BFD4 LDR X8, [X8 + 0xC8]
	0x01D8BFD8 ADD X8, X8, X10, 0x3, LSL
	0x01D8BFDC LDUR X8, [X8 - 0x8]
	0x01D8BFE0 CMP X8, X1
	0x01D8BFE4 B.NE 0x1D8C1D0
	0x01D8BFE8 ADRP X23, 0x2368000
	0x01D8BFEC LDR X23, [X23 + 0x598]
	0x01D8BFF0 LDR X0, [X23]
	0x01D8BFF4 LDR W8, [X0 + 0xE0]
	0x01D8BFF8 CBNZ W8, 0x1D8C000
	0x01D8BFFC BL 0x1C16DFC
	0x01D8C000 MOV X0, X21
	0x01D8C004 MOV X1, X31
	0x01D8C008 MOV X2, X31
	0x01D8C00C BL 0x3C354F8
	0x01D8C010 TBZ X0, 0x0, 0x1D8C1A4
	0x01D8C014 LDRB W8, [X22 + 0xA21]
	0x01D8C018 CBNZ W8, 0x1D8C03C
	0x01D8C01C ADRP X0, 0x236A000
	0x01D8C020 LDR X0, [X0 + 0xBA0]
	0x01D8C024 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X20, 0x264E000
	007 Move W8, [X20+2504]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x236C000
	014 Move X0, [X0+2832]
	015 Call 0x1C17CF4
	016 Move X0, 0x236C000
	017 Move X0, [X0+2840]
	018 Call 0x1C17CF4
	019 Move X0, 0x236C000
	020 Move X0, [X0+2848]
	021 Call 0x1C17CF4
	022 Move X0, 0x236C000
	023 Move X0, [X0+2856]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+2504], W8
	027 NotImplemented "Instruction MOVI not yet implemented."
	028 Move [X31+32], V0
	029 Move [X31+40], V0
	030 Move X8, [X19+144]
	031 Move [X19+168], W31
	032 Compare X8, 0
	033 JumpIfEqual {70}
	034 Move X0, [X8+24]
	035 Compare X0, 0
	036 JumpIfEqual {70}
	037 Move X8, 0x236C000
	038 Move X8, [X8+2856]
	039 Move X20, 0x236C000
	040 Move X21, 0x236C000
	041 Move X1, [X8]
	042 Move X20, [X20+2840]
	043 Move X21, [X21+2832]
	044 Add X8, X31, 0
	045 Call List`1<WeightedItem>.GetEnumerator, X0
	046 Move V0, [X31]
	047 Move V1, [X31+16]
	048 Move [X31+32], V0
	049 Move [X31+40], V1
	050 Move X1, [X20]
	051 Add X0, X31, 32
	052 Call Enumerator<WeightedItem>.MoveNext, X0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {61}
	057 Move V0, [X31+56]
	058 Move V1, [X19+168]
	059 Add S0, S1, S0
	060 Move [X19+168], S0
	061 Move X1, [X21]
	062 Add X0, X31, 32
	063 Call Enumerator<WeightedItem>.Dispose, X0
	064 Move X20, [X31+80]
	065 Move X19, [X31+88]
	066 Move X30, [X31+64]
	067 Move X21, [X31+72]
	068 Add X31, X31, 96
	069 Return 
	070 Call 0x1C17F20
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X20, X0
	073 Move X0, X20
	074 Call 0x3EB2AD0
	075 Move X19, [X0]
	076 Call 0x3EB2AE0
	077 Move X1, [X21]
	078 Add X0, X31, 32
	079 Call Enumerator<WeightedItem>.Dispose, X0
	080 Compare X19, 0
	081 JumpIfEqual {64}
	082 Move X0, X19
	083 Call 0x1C17F18
	084 Move X19, X31
	085 Move X20, X0
	086 Move X1, [X21]
	087 Add X0, X31, 32
	088 Call Enumerator<WeightedItem>.Dispose, X0
	089 Compare X19, 0
	090 JumpIfNotEqual {93}
	091 Move X0, X20
	092 Call 0x1D2D690
	093 Move X0, X19
	094 Call 0x1C17F18
	095 Call 0x1991590

Method: System.Void OnDestroy()

Disassembly:
	0x01D8C028 ADRP X0, 0x236A000
	0x01D8C02C LDR X0, [X0 + 0xBA8]
	0x01D8C030 BL 0x1C16CF4
	0x01D8C034 MOVZ W8, 0x1
	0x01D8C038 STRB W8, [X22 + 0xA21]
	0x01D8C03C LDR W8, [X20 + 0x8]
	0x01D8C040 LDR X0, [X20 + 0x10]
	0x01D8C044 CBZ W8, 0x1D8C058
	0x01D8C048 CBZ X0, 0x1D8C0BC
	0x01D8C04C LDR X8, [X0]
	0x01D8C050 LDRB W9, [X8 + 0x130]
	0x01D8C054 B 0x1D8C090
	0x01D8C058 CBZ X0, 0x1D8C0BC
	0x01D8C05C ADRP X9, 0x236A000
	0x01D8C060 LDR X9, [X9 + 0xBA0]
	0x01D8C064 LDR X8, [X0]
	0x01D8C068 LDR X10, [X9]
	0x01D8C06C LDRB W9, [X8 + 0x130]
	0x01D8C070 LDRB W11, [X10 + 0x130]
	0x01D8C074 CMP W9, W11
	0x01D8C078 B.CC 0x1D8C090
	0x01D8C07C LDR X12, [X8 + 0xC8]
	0x01D8C080 ADD X11, X12, X11, 0x3, LSL
	0x01D8C084 LDUR X11, [X11 - 0x8]
	0x01D8C088 CMP X11, X10
	0x01D8C08C B.EQ 0x1D8C1C4
	0x01D8C090 ADRP X10, 0x236A000
	0x01D8C094 LDR X10, [X10 + 0xBA8]
	0x01D8C098 LDR X1, [X10]
	0x01D8C09C LDRB W10, [X1 + 0x130]
	0x01D8C0A0 CMP W9, W10
	0x01D8C0A4 B.CC 0x1D8C1D4
	0x01D8C0A8 LDR X8, [X8 + 0xC8]
	0x01D8C0AC ADD X8, X8, X10, 0x3, LSL
	0x01D8C0B0 LDUR X8, [X8 - 0x8]
	0x01D8C0B4 CMP X8, X1
	0x01D8C0B8 B.NE 0x1D8C1D4
	0x01D8C0BC CBZ X0, 0x1D8C1CC
	0x01D8C0C0 ADRP X8, 0x236A000
	0x01D8C0C4 LDR X8, [X8 + 0xB98]
	0x01D8C0C8 LDR X1, [X8]
	0x01D8C0CC BL 0x21A3894
	0x01D8C0D0 LDR X8, [X23]
	0x01D8C0D4 MOV X20, X0
	0x01D8C0D8 LDR W9, [X8 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x264D000
	006 Move X21, 0x236B000
	007 Move W8, [X20+2505]
	008 Move X21, [X21+2680]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x236B000
	015 Move X0, [X0+2824]
	016 Call 0x1C17CF4
	017 Move X0, 0x236B000
	018 Move X0, [X0+2864]
	019 Call 0x1C17CF4
	020 Move X0, 0x236B000
	021 Move X0, [X0+2680]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2505], W8
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Compare X19, 0
	031 JumpIfEqual {57}
	032 Move W8, [X19+48]
	033 Move X20, 0x236B000
	034 Move X20, [X20+2824]
	035 Or W8, W8, 8
	036 Move [X19+48], W8
	037 Move X0, [X20]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move X0, [X20]
	043 Move X8, [X0+184]
	044 Move X0, [X8]
	045 Compare X0, 0
	046 JumpIfEqual {57}
	047 Move X8, 0x236B000
	048 Move X8, [X8+2864]
	049 Move X1, X19
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X2, [X8]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Call HashSet`1<Object>.Remove, X0, X1
	056 Return 
	057 Call 0x1C17F20

Method: System.Void Spawned()

Disassembly:
	0x01D8C0DC CBNZ W9, 0x1D8C0E8
	0x01D8C0E0 MOV X0, X8
	0x01D8C0E4 BL 0x1C16DFC
	0x01D8C0E8 MOV X0, X20
	0x01D8C0EC MOV X1, X31
	0x01D8C0F0 MOV X2, X31
	0x01D8C0F4 BL 0x3C354F8
	0x01D8C0F8 TBZ X0, 0x0, 0x1D8C1A4
	0x01D8C0FC MOV X0, X19
	0x01D8C100 MOV X1, X31
	0x01D8C104 BL 0x3C32E90
	0x01D8C108 CBZ X0, 0x1D8C1CC
	0x01D8C10C MOV X1, X31
	0x01D8C110 BL 0x3C3F58C
	0x01D8C114 ADRP X19, 0x264C000
	0x01D8C118 LDRB W8, [X19 + 0x786]
	0x01D8C11C MOV V8.16B, V0.16B
	0x01D8C120 MOV V9.16B, V1.16B
	0x01D8C124 MOV V10.16B, V2.16B
	0x01D8C128 CBNZ W8, 0x1D8C140
	0x01D8C12C ADRP X0, 0x2367000
	0x01D8C130 LDR X0, [X0 + 0x5A0]
	0x01D8C134 BL 0x1C16CF4
	0x01D8C138 MOVZ W8, 0x1
	0x01D8C13C STRB W8, [X19 + 0x786]
	0x01D8C140 CBZ X20, 0x1D8C1CC
	0x01D8C144 ADRP X8, 0x2367000
	0x01D8C148 LDR X8, [X8 + 0x5A0]
	0x01D8C14C FMOV S3, 0.5
	0x01D8C150 MOV X0, X20
	0x01D8C154 LDP X20, X19, [X31 + 0x40]
	0x01D8C158 LDR X8, [X8]
	0x01D8C15C LDP X22, X21, [X31 + 0x30]
	0x01D8C160 LDP X30, X23, [X31 + 0x20]
	0x01D8C164 MOV X1, X31
	0x01D8C168 LDR X8, [X8 + 0xB8]
	0x01D8C16C LDP S1, S0, [X8 + 0x1C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x264D000
	006 Move X20, 0x236B000
	007 Move W8, [X21+2506]
	008 Move X20, [X20+2824]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x236B000
	015 Move X0, [X0+2824]
	016 Call 0x1C17CF4
	017 Move X0, 0x236B000
	018 Move X0, [X0+2872]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2506], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call NetworkBehaviour.Spawned, X0
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X20]
	031 Move X8, [X0+184]
	032 Move X0, [X8]
	033 Compare X0, 0
	034 JumpIfEqual {45}
	035 Move X8, 0x236B000
	036 Move X8, [X8+2872]
	037 Move X1, X19
	038 Move X2, [X8]
	039 Call HashSet`1<Object>.Add, X0, X1
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call 0x1C17F20

Method: System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)

Disassembly:
	0x01D8C3E4 ADRP X0, 0x236A000
	0x01D8C3E8 LDR X0, [X0 + 0xBB0]
	0x01D8C3EC BL 0x1C16CF4
	0x01D8C3F0 ADRP X0, 0x2367000
	0x01D8C3F4 LDR X0, [X0 + 0x598]
	0x01D8C3F8 BL 0x1C16CF4
	0x01D8C3FC MOVZ W8, 0x1
	0x01D8C400 STRB W8, [X20 + 0x9D5]
	0x01D8C404 MOV X0, X19
	0x01D8C408 MOV X1, X31
	0x01D8C40C STR X31, [X31 + 0x8]
	0x01D8C410 BL 0x1EB84D4
	0x01D8C414 TBZ X0, 0x0, 0x1D8C5C4
	0x01D8C418 ADRP X21, 0x264C000
	0x01D8C41C LDRB W8, [X21 + 0xA21]
	0x01D8C420 CBNZ W8, 0x1D8C444
	0x01D8C424 ADRP X0, 0x236A000
	0x01D8C428 LDR X0, [X0 + 0xBA0]
	0x01D8C42C BL 0x1C16CF4
	0x01D8C430 ADRP X0, 0x236A000
	0x01D8C434 LDR X0, [X0 + 0xBA8]
	0x01D8C438 BL 0x1C16CF4
	0x01D8C43C MOVZ W8, 0x1
	0x01D8C440 STRB W8, [X21 + 0xA21]
	0x01D8C444 LDR W8, [X19 + 0x8]
	0x01D8C448 LDR X20, [X19 + 0x10]
	0x01D8C44C CBZ W8, 0x1D8C460
	0x01D8C450 CBZ X20, 0x1D8C4C4
	0x01D8C454 LDR X8, [X20]
	0x01D8C458 LDRB W9, [X8 + 0x130]
	0x01D8C45C B 0x1D8C498
	0x01D8C460 CBZ X20, 0x1D8C4C4
	0x01D8C464 ADRP X9, 0x236A000
	0x01D8C468 LDR X9, [X9 + 0xBA0]
	0x01D8C46C LDR X8, [X20]
	0x01D8C470 LDR X10, [X9]
	0x01D8C474 LDRB W9, [X8 + 0x130]
	0x01D8C478 LDRB W11, [X10 + 0x130]
	0x01D8C47C CMP W9, W11
	0x01D8C480 B.CC 0x1D8C498
	0x01D8C484 LDR X12, [X8 + 0xC8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x264D000
	008 Move X22, 0x236B000
	009 Move W8, [X23+2507]
	010 Move X22, [X22+2824]
	011 Move W21, W2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x236B000
	019 Move X0, [X0+2824]
	020 Call 0x1C17CF4
	021 Move X0, 0x236B000
	022 Move X0, [X0+2864]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+2507], W8
	026 And W2, W21, 1
	027 Move X0, X19
	028 Move X1, X20
	029 Move X3, X31
	030 Call NetworkBehaviour.Despawned, X0, X1, X2
	031 Move X0, [X22]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X22]
	037 Move X8, [X0+184]
	038 Move X0, [X8]
	039 Compare X0, 0
	040 JumpIfEqual {53}
	041 Move X8, 0x236B000
	042 Move X8, [X8+2864]
	043 Move X1, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X2, [X8]
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Call HashSet`1<Object>.Remove, X0, X1
	052 Return 
	053 Call 0x1C17F20

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01D8C488 ADD X11, X12, X11, 0x3, LSL
	0x01D8C48C LDUR X11, [X11 - 0x8]
	0x01D8C490 CMP X11, X10
	0x01D8C494 B.EQ 0x1D8C5D4
	0x01D8C498 ADRP X10, 0x236A000
	0x01D8C49C LDR X10, [X10 + 0xBA8]
	0x01D8C4A0 LDR X1, [X10]
	0x01D8C4A4 LDRB W10, [X1 + 0x130]
	0x01D8C4A8 CMP W9, W10
	0x01D8C4AC B.CC 0x1D8C5E8
	0x01D8C4B0 LDR X8, [X8 + 0xC8]
	0x01D8C4B4 ADD X8, X8, X10, 0x3, LSL
	0x01D8C4B8 LDUR X8, [X8 - 0x8]
	0x01D8C4BC CMP X8, X1
	0x01D8C4C0 B.NE 0x1D8C5E8
	0x01D8C4C4 ADRP X8, 0x2367000
	0x01D8C4C8 LDR X8, [X8 + 0x598]
	0x01D8C4CC LDR X0, [X8]
	0x01D8C4D0 LDR W8, [X0 + 0xE0]
	0x01D8C4D4 CBNZ W8, 0x1D8C4DC
	0x01D8C4D8 BL 0x1C16DFC
	0x01D8C4DC MOV X0, X20
	0x01D8C4E0 MOV X1, X31
	0x01D8C4E4 MOV X2, X31
	0x01D8C4E8 BL 0x3C354F8
	0x01D8C4EC TBZ X0, 0x0, 0x1D8C5C4
	0x01D8C4F0 LDRB W8, [X21 + 0xA21]
	0x01D8C4F4 CBNZ W8, 0x1D8C518
	0x01D8C4F8 ADRP X0, 0x236A000

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call NetworkBehaviour.FixedUpdateNetwork, X0
	007 Move X0, [X19+64]
	008 Compare X0, 0
	009 JumpIfEqual {38}
	010 Move W8, [X0+96]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 2
	013 Compare TEMP, 2
	014 JumpIfEqual {38}
	015 Move X1, X31
	016 Call NetworkObject.get_HasStateAuthority, X0
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {38}
	021 Move X0, X19
	022 Call Crate.get_life, X0
	023 Move [X31+8], W0
	024 Move X1, [X19+56]
	025 Add X0, X31, 8
	026 Move X2, X31
	027 Call TickTimer.Expired, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {38}
	032 Move X0, [X19+56]
	033 Compare X0, 0
	034 JumpIfEqual {42}
	035 Move X1, [X19+64]
	036 Move X2, X31
	037 Call NetworkRunner.Despawn, X0, X1
	038 Move X30, [X31+16]
	039 Move X19, [X31+24]
	040 Add X31, X31, 32
	041 Return 
	042 Call 0x1C17F20

Method: System.Void HandleCurrentHealthChanged()

Disassembly:
	0x01D8C170 LDR V2, [X8 + 0x18]
	0x01D8C174 MOVZ W8, 0x447A0000
	0x01D8C178 FMUL S1, S1, S3
	0x01D8C17C FMUL S4, S2, S3
	0x01D8C180 FSUB S2, S9, S1
	0x01D8C184 FSUB S1, S8, S4
	0x01D8C188 LDP D9, D8, [X31 + 0x10]
	0x01D8C18C FMUL S0, S0, S3
	0x01D8C190 FSUB S3, S10, S0
	0x01D8C194 FMOV S4, 1
	0x01D8C198 FMOV S0, W8
	0x01D8C19C LDR V10, [X31], #0x50
	0x01D8C1A0 B 0x3C8F6F8
	0x01D8C1A4 LDP X20, X19, [X31 + 0x40]
	0x01D8C1A8 LDP X22, X21, [X31 + 0x30]
	0x01D8C1AC LDP X30, X23, [X31 + 0x20]
	0x01D8C1B0 LDP D9, D8, [X31 + 0x10]
	0x01D8C1B4 LDR V10, [X31], #0x50
	0x01D8C1B8 RET
	0x01D8C1BC LDR X21, [X21 + 0x18]
	0x01D8C1C0 B 0x1D8BFE8
	0x01D8C1C4 LDR X0, [X0 + 0x18]
	0x01D8C1C8 CBNZ X0, 0x1D8C0C0
	0x01D8C1CC BL 0x1C16F20
	0x01D8C1D0 MOV X0, X21
	0x01D8C1D4 BL 0x1C171E0
	0x01D8C1D8 STP X30, X19, [X31 - 0x10]!
	0x01D8C1DC LDR W1, [X0 + 0xAC]
	0x01D8C1E0 MOV X19, X0
	0x01D8C1E4 BL 0x1D8AD6C
	0x01D8C1E8 LDR W1, [X19 + 0xB0]
	0x01D8C1EC MOV X0, X19
	0x01D8C1F0 LDP X30, X19, [X31], #0x10
	0x01D8C1F4 B 0x1D8AE2C
	0x01D8C1F8 STP X30, X19, [X31 - 0x10]!
	0x01D8C1FC MOV X19, X0
	0x01D8C200 BL 0x1D8AD0C
	0x01D8C204 STR W0, [X19 + 0xAC]
	0x01D8C208 MOV X0, X19
	0x01D8C20C BL 0x1D8ADCC
	0x01D8C210 STR W0, [X19 + 0xB0]
	0x01D8C214 LDP X30, X19, [X31], #0x10
	0x01D8C218 RET
	0x01D8C21C SUB X31, X31, 0x70
	0x01D8C220 STP D13, D12, [X31 + 0x10]
	0x01D8C224 STP D11, D10, [X31 + 0x20]
	0x01D8C228 STP D9, D8, [X31 + 0x30]
	0x01D8C22C STR X30, [X31 + 0x40]
	0x01D8C230 STP X22, X21, [X31 + 0x50]
	0x01D8C234 STP X20, X19, [X31 + 0x60]
	0x01D8C238 ADRP X20, 0x264C000
	0x01D8C23C LDRB W8, [X20 + 0x9D3]
	0x01D8C240 MOV X21, X1
	0x01D8C244 MOV X19, X0
	0x01D8C248 TBNZ X8, 0x0, 0x1D8C260
	0x01D8C24C ADRP X0, 0x236A000
	0x01D8C250 LDR X0, [X0 + 0xB08]
	0x01D8C254 BL 0x1C16CF4
	0x01D8C258 MOVZ W8, 0x1
	0x01D8C25C STRB W8, [X20 + 0x9D3]
	0x01D8C260 STR X31, [X31 + 0x48]
	0x01D8C264 STP X31, X31, [X31]
	0x01D8C268 LDR W20, [X21 + 0x24]
	0x01D8C26C LDP S8, S9, [X21 + 0x28]
	0x01D8C270 LDR V10, [X21 + 0x30]
	0x01D8C274 ADD X0, X21, 0x34
	0x01D8C278 ADD X1, X31, 0x48
	0x01D8C27C MOV X2, X31
	0x01D8C280 ADD X22, X21, 0x1C
	0x01D8C284 BL 0x1E8DD00
	0x01D8C288 ADD W8, W0, 0x1B
	0x01D8C28C AND W21, W8, 0xFFFFFFFC
	0x01D8C290 ADD X0, X22, W21, SXTW
	0x01D8C294 ADD X1, X31, 0x8
	0x01D8C298 MOV X2, X31
	0x01D8C29C BL 0x1E8DD00
	0x01D8C2A0 ADD W8, W0, 0x3
	0x01D8C2A4 AND W8, W8, 0xFFFFFFFC
	0x01D8C2A8 ADD W8, W8, W21
	0x01D8C2AC ADD X9, X22, W8, SXTW
	0x01D8C2B0 LDP S11, S12, [X9]
	0x01D8C2B4 LDR V13, [X9 + 0x8]
	0x01D8C2B8 ADD W8, W8, 0xC
	0x01D8C2BC ADD X0, X22, W8, SXTW
	0x01D8C2C0 ADD X1, X31, 0x0
	0x01D8C2C4 MOV X2, X31
	0x01D8C2C8 BL 0x1E8DD00
	0x01D8C2CC CBZ X19, 0x1D8C360
	0x01D8C2D0 ADRP X9, 0x236A000
	0x01D8C2D4 LDR X9, [X9 + 0xB08]
	0x01D8C2D8 MOVZ W8, 0x1
	0x01D8C2DC STRB W8, [X19 + 0x58]
	0x01D8C2E0 LDR X8, [X19]
	0x01D8C2E4 LDR X1, [X9]
	0x01D8C2E8 LDRB W10, [X8 + 0x130]
	0x01D8C2EC LDRB W9, [X1 + 0x130]
	0x01D8C2F0 CMP W10, W9
	0x01D8C2F4 B.CC 0x1D8C358
	0x01D8C2F8 LDR X8, [X8 + 0xC8]
	0x01D8C2FC ADD X8, X8, X9, 0x3, LSL
	0x01D8C300 LDUR X8, [X8 - 0x8]
	0x01D8C304 CMP X8, X1
	0x01D8C308 B.NE 0x1D8C358
	0x01D8C30C LDR X2, [X31 + 0x48]
	0x01D8C310 LDP X4, X3, [X31]
	0x01D8C314 MOV X0, X19
	0x01D8C318 MOV W1, W20
	0x01D8C31C MOV V0.16B, V8.16B
	0x01D8C320 MOV V1.16B, V9.16B
	0x01D8C324 MOV V2.16B, V10.16B
	0x01D8C328 MOV V3.16B, V11.16B
	0x01D8C32C MOV V4.16B, V12.16B
	0x01D8C330 MOV V5.16B, V13.16B
	0x01D8C334 BL 0x1D8B994
	0x01D8C338 LDP X20, X19, [X31 + 0x60]
	0x01D8C33C LDP X22, X21, [X31 + 0x50]
	0x01D8C340 LDR X30, [X31 + 0x40]
	0x01D8C344 LDP D9, D8, [X31 + 0x30]
	0x01D8C348 LDP D11, D10, [X31 + 0x20]
	0x01D8C34C LDP D13, D12, [X31 + 0x10]
	0x01D8C350 ADD X31, X31, 0x70
	0x01D8C354 RET
	0x01D8C358 MOV X0, X19
	0x01D8C35C BL 0x1C171E0
	0x01D8C360 BL 0x1C16F20
	0x01D8C364 STR X30, [X31 - 0x20]!
	0x01D8C368 STP X20, X19, [X31 + 0x10]
	0x01D8C36C ADRP X19, 0x264C000
	0x01D8C370 ADRP X20, 0x236A000
	0x01D8C374 LDRB W8, [X19 + 0x9D4]
	0x01D8C378 LDR X20, [X20 + 0xB70]
	0x01D8C37C TBNZ X8, 0x0, 0x1D8C394
	0x01D8C380 ADRP X0, 0x236A000
	0x01D8C384 LDR X0, [X0 + 0xB70]
	0x01D8C388 BL 0x1C16CF4
	0x01D8C38C MOVZ W8, 0x1
	0x01D8C390 STRB W8, [X19 + 0x9D4]
	0x01D8C394 LDR X0, [X20]
	0x01D8C398 BL 0x1C16F10
	0x01D8C39C MOV X1, X31
	0x01D8C3A0 MOV X19, X0
	0x01D8C3A4 BL 0x33BDD8C
	0x01D8C3A8 LDR X8, [X20]
	0x01D8C3AC LDR X8, [X8 + 0xB8]
	0x01D8C3B0 STR X19, [X8]
	0x01D8C3B4 LDP X20, X19, [X31 + 0x10]
	0x01D8C3B8 LDR X30, [X31], #0x20
	0x01D8C3BC RET
	0x01D8C3C0 MOV X1, X31
	0x01D8C3C4 B 0x33BDD8C
	0x01D8C3C8 SUB X31, X31, 0x30
	0x01D8C3CC STP X30, X21, [X31 + 0x10]
	0x01D8C3D0 STP X20, X19, [X31 + 0x20]
	0x01D8C3D4 ADRP X20, 0x264C000
	0x01D8C3D8 LDRB W8, [X20 + 0x9D5]
	0x01D8C3DC MOV X19, X1
	0x01D8C3E0 TBNZ X8, 0x0, 0x1D8C404

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x264D000
	009 Move W8, [X20+2508]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {38}
	015 Move X0, 0x2368000
	016 Move X0, [X0+2896]
	017 Call 0x1C17CF4
	018 Move X0, 0x2368000
	019 Move X0, [X0+2904]
	020 Call 0x1C17CF4
	021 Move X0, 0x2368000
	022 Move X0, [X0+1808]
	023 Call 0x1C17CF4
	024 Move X0, 0x2368000
	025 Move X0, [X0+1816]
	026 Call 0x1C17CF4
	027 Move X0, 0x2368000
	028 Move X0, [X0+1824]
	029 Call 0x1C17CF4
	030 Move X0, 0x236B000
	031 Move X0, [X0+2880]
	032 Call 0x1C17CF4
	033 Move X0, 0x236B000
	034 Move X0, [X0+2888]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+2508], W8
	038 Move X0, X19
	039 Call Crate.get_health, X0
	040 Move X8, [X19+128]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction CSET not yet implemented."
	043 Compare X8, 0
	044 JumpIfEqual {177}
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W20, W0
	047 NotImplemented "Instruction CSET not yet implemented."
	048 Move X0, X8
	049 Move X2, X31
	050 Call GameObject.SetActive, X0, X1
	051 Move W8, [X19+180]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X0, [X19+64]
	054 Move [X19+180], W21
	055 Compare X0, 0
	056 JumpIfEqual {169}
	057 Move W8, [X0+96]
	058 Move TEMP, X8
	059 And TEMP, TEMP, 2
	060 Compare TEMP, 2
	061 JumpIfEqual {169}
	062 Move X1, X31
	063 Call NetworkObject.get_HasStateAuthority, X0
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {169}
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X0, X31
	070 Call Random.get_value
	071 Move X8, -19533824
	072 Move V1, [X8+188]
	073 Move X0, X19
	074 NotImplemented "Instruction FCMP not yet implemented."
	075 NotImplemented "Instruction CSET not yet implemented."
	076 Call Crate.SpawnBomb, X0
	077 Call Crate.SpawnLoot, X0
	078 Move X20, [X19+136]
	079 Move X0, X19
	080 Move X1, X31
	081 Call Component.get_transform, X0
	082 Compare X0, 0
	083 JumpIfEqual {177}
	084 Move X1, X31
	085 Call Transform.get_position, X0
	086 Move S3, 1
	087 Move X0, X20
	088 Move X1, X31
	089 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	090 Move X0, X19
	091 Move X1, X31
	092 Call Component.get_transform, X0
	093 Compare X0, 0
	094 JumpIfEqual {177}
	095 Move X1, X31
	096 Call Transform.get_position, X0
	097 Move X20, 0x264D000
	098 Move W8, [X20+1939]
	099 Move V8, V0
	100 Move V9, V1
	101 Move V10, V2
	102 Compare W8, 0
	103 JumpIfNotEqual {109}
	104 Move X0, 0x2369000
	105 Move X0, [X0+1448]
	106 Call 0x1C17CF4
	107 Move W8, 1
	108 Move [X20+1939], W8
	109 Move X8, 0x2369000
	110 Move X8, [X8+1448]
	111 Move W0, 2
	112 Move V0, V8
	113 Move V1, V9
	114 Move X8, [X8]
	115 Move V2, V10
	116 Move X1, X31
	117 Move X8, [X8+184]
	118 Move S3, [X8]
	119 Move S4, [X8+4]
	120 Move S5, [X8+8]
	121 Move S6, [X8+12]
	122 Call NetworkVFX.PlayVFX, X0, X1, X2
	123 Move X0, [X19+56]
	124 Move S0, 5
	125 Move X1, X31
	126 Call TickTimer.CreateFromSeconds, X0, V0
	127 And X1, X0, 0
	128 Move X0, X19
	129 Call Crate.set_life, X0, X1
	130 Move X8, 0x2368000
	131 Move X8, [X8+1824]
	132 Move X0, [X8]
	133 Call 0x1C17F10
	134 Move X8, 0x2368000
	135 Move X8, [X8+1816]
	136 Move X19, X0
	137 Move X1, [X8]
	138 Call Dictionary`2<Object, Object>..ctor, X0
	139 Move X8, 0x2368000
	140 Move X8, [X8+2904]
	141 Add X1, X31, 12
	142 Move [X31+12], W21
	143 Move X0, [X8]
	144 Call 0x1C17E04
	145 Compare X19, 0
	146 JumpIfEqual {177}
	147 Move X8, 0x236B000
	148 Move X9, 0x2368000
	149 Move X8, [X8+2880]
	150 Move X9, [X9+1808]
	151 Move X2, X0
	152 Move X0, X19
	153 Move X1, [X8]
	154 Move X3, [X9]
	155 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	156 Move X8, 0x2368000
	157 Move X8, [X8+2896]
	158 Move X0, [X8]
	159 Move W8, [X0+224]
	160 Compare W8, 0
	161 JumpIfNotEqual {163}
	162 Call 0x1C17DFC
	163 Move X8, 0x236B000
	164 Move X8, [X8+2888]
	165 Move X1, X19
	166 Move X2, X31
	167 Move X0, [X8]
	168 Call Analytics.Track, X0, X1
	169 Move X20, [X31+48]
	170 Move X19, [X31+56]
	171 Move X30, [X31+32]
	172 Move X21, [X31+40]
	173 Move D9, [X31+16]
	174 Move D8, [X31+24]
	175 Move V10, [X31+64]
	176 Return 
	177 Call 0x1C17F20

Method: System.Void SpawnBomb()

Disassembly:
	0x01D8C4FC LDR X0, [X0 + 0xBA0]
	0x01D8C500 BL 0x1C16CF4
	0x01D8C504 ADRP X0, 0x236A000
	0x01D8C508 LDR X0, [X0 + 0xBA8]
	0x01D8C50C BL 0x1C16CF4
	0x01D8C510 MOVZ W8, 0x1
	0x01D8C514 STRB W8, [X21 + 0xA21]
	0x01D8C518 LDR W8, [X19 + 0x8]
	0x01D8C51C LDR X0, [X19 + 0x10]
	0x01D8C520 CBZ W8, 0x1D8C534
	0x01D8C524 CBZ X0, 0x1D8C598
	0x01D8C528 LDR X8, [X0]
	0x01D8C52C LDRB W9, [X8 + 0x130]
	0x01D8C530 B 0x1D8C56C
	0x01D8C534 CBZ X0, 0x1D8C598
	0x01D8C538 ADRP X9, 0x236A000
	0x01D8C53C LDR X9, [X9 + 0xBA0]
	0x01D8C540 LDR X8, [X0]
	0x01D8C544 LDR X10, [X9]
	0x01D8C548 LDRB W9, [X8 + 0x130]
	0x01D8C54C LDRB W11, [X10 + 0x130]
	0x01D8C550 CMP W9, W11
	0x01D8C554 B.CC 0x1D8C56C
	0x01D8C558 LDR X12, [X8 + 0xC8]
	0x01D8C55C ADD X11, X12, X11, 0x3, LSL
	0x01D8C560 LDUR X11, [X11 - 0x8]
	0x01D8C564 CMP X11, X10
	0x01D8C568 B.EQ 0x1D8C5DC
	0x01D8C56C ADRP X10, 0x236A000
	0x01D8C570 LDR X10, [X10 + 0xBA8]
	0x01D8C574 LDR X1, [X10]
	0x01D8C578 LDRB W10, [X1 + 0x130]
	0x01D8C57C CMP W9, W10
	0x01D8C580 B.CC 0x1D8C5EC
	0x01D8C584 LDR X8, [X8 + 0xC8]
	0x01D8C588 ADD X8, X8, X10, 0x3, LSL
	0x01D8C58C LDUR X8, [X8 - 0x8]
	0x01D8C590 CMP X8, X1
	0x01D8C594 B.NE 0x1D8C5EC
	0x01D8C598 CBZ X0, 0x1D8C5E4
	0x01D8C59C ADRP X8, 0x236A000
	0x01D8C5A0 LDR X8, [X8 + 0xBB0]
	0x01D8C5A4 ADD X1, X31, 0x8
	0x01D8C5A8 LDR X2, [X8]
	0x01D8C5AC BL 0x21A4990
	0x01D8C5B0 TBZ X0, 0x0, 0x1D8C5C4
	0x01D8C5B4 LDR X0, [X31 + 0x8]
	0x01D8C5B8 CBZ X0, 0x1D8C5E4
	0x01D8C5BC MOV X1, X31
	0x01D8C5C0 BL 0x1DE5F80
	0x01D8C5C4 LDP X20, X19, [X31 + 0x20]
	0x01D8C5C8 LDP X30, X21, [X31 + 0x10]
	0x01D8C5CC ADD X31, X31, 0x30
	0x01D8C5D0 RET
	0x01D8C5D4 LDR X20, [X20 + 0x18]
	0x01D8C5D8 B 0x1D8C4C4
	0x01D8C5DC LDR X0, [X0 + 0x18]
	0x01D8C5E0 CBNZ X0, 0x1D8C59C
	0x01D8C5E4 BL 0x1C16F20
	0x01D8C5E8 MOV X0, X20
	0x01D8C5EC BL 0x1C171E0
	0x01D8C5F0 STP X30, X23, [X31 - 0x30]!
	0x01D8C5F4 STP X22, X21, [X31 + 0x10]
	0x01D8C5F8 STP X20, X19, [X31 + 0x20]
	0x01D8C5FC ADRP X20, 0x264C000
	0x01D8C600 ADRP X21, 0x236A000
	0x01D8C604 LDRB W8, [X20 + 0x9D6]
	0x01D8C608 LDR X21, [X21 + 0xBB8]
	0x01D8C60C MOV X19, X0
	0x01D8C610 TBNZ X8, 0x0, 0x1D8C664
	0x01D8C614 ADRP X0, 0x236A000
	0x01D8C618 LDR X0, [X0 + 0xBC0]
	0x01D8C61C BL 0x1C16CF4
	0x01D8C620 ADRP X0, 0x2368000
	0x01D8C624 LDR X0, [X0 + 0xE70]
	0x01D8C628 BL 0x1C16CF4
	0x01D8C62C ADRP X0, 0x236A000
	0x01D8C630 LDR X0, [X0 + 0xBB8]
	0x01D8C634 BL 0x1C16CF4
	0x01D8C638 ADRP X0, 0x236A000
	0x01D8C63C LDR X0, [X0 + 0xBC8]
	0x01D8C640 BL 0x1C16CF4
	0x01D8C644 ADRP X0, 0x236A000
	0x01D8C648 LDR X0, [X0 + 0xBD0]
	0x01D8C64C BL 0x1C16CF4
	0x01D8C650 ADRP X0, 0x236A000
	0x01D8C654 LDR X0, [X0 + 0xBD8]
	0x01D8C658 BL 0x1C16CF4
	0x01D8C65C MOVZ W8, 0x1
	0x01D8C660 STRB W8, [X20 + 0x9D6]
	0x01D8C664 LDR X1, [X21]
	0x01D8C668 MOV X0, X19
	0x01D8C66C BL 0x21A3894
	0x01D8C670 STR X0, [X19 + 0xA0]
	0x01D8C674 CBZ X0, 0x1D8C7F0
	0x01D8C678 ADRP X23, 0x2368000
	0x01D8C67C LDR X23, [X23 + 0xE70]
	0x01D8C680 MOV X20, X0
	0x01D8C684 LDR X21, [X0 + 0x1D8]
	0x01D8C688 ADRP X22, 0x236A000
	0x01D8C68C LDR X0, [X23]
	0x01D8C690 LDR X22, [X22 + 0xBD0]
	0x01D8C694 BL 0x1C16F10
	0x01D8C698 LDR X2, [X22]
	0x01D8C69C MOV X1, X19
	0x01D8C6A0 MOV X3, X31
	0x01D8C6A4 MOV X22, X0
	0x01D8C6A8 BL 0x3314368
	0x01D8C6AC MOV X0, X21
	0x01D8C6B0 MOV X1, X22
	0x01D8C6B4 MOV X2, X31
	0x01D8C6B8 BL 0x33C0DE4
	0x01D8C6BC LDR X1, [X23]
	0x01D8C6C0 CBZ X0, 0x1D8C6E4
	0x01D8C6C4 LDR X8, [X0]
	0x01D8C6C8 CMP X8, X1
	0x01D8C6CC B.NE 0x1D8C74C
	0x01D8C6D0 STR X0, [X20 + 0x1D8]
	0x01D8C6D4 LDR X8, [X0]
	0x01D8C6D8 CMP X8, X1
	0x01D8C6DC B.EQ 0x1D8C6E8
	0x01D8C6E0 B 0x1D8C74C
	0x01D8C6E4 STR X0, [X20 + 0x1D8]
	0x01D8C6E8 LDR X22, [X19 + 0xA0]
	0x01D8C6EC CBZ X22, 0x1D8C7F0
	0x01D8C6F0 ADRP X21, 0x236A000
	0x01D8C6F4 LDR X20, [X22 + 0x1D0]

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+144], X30
	003 Move [X31+152], X25
	004 Move [X31+160], X24
	005 Move [X31+168], X23
	006 Move [X31+176], X22
	007 Move [X31+184], X21
	008 Move [X31+192], X20
	009 Move [X31+200], X19
	010 Move X19, 0x264D000
	011 Move W8, [X19+2509]
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0x236B000
	018 Move X0, [X0+2896]
	019 Call 0x1C17CF4
	020 Move X0, 0x236B000
	021 Move X0, [X0+2904]
	022 Call 0x1C17CF4
	023 Move X0, 0x236B000
	024 Move X0, [X0+2912]
	025 Call 0x1C17CF4
	026 Move X0, 0x236B000
	027 Move X0, [X0+2920]
	028 Call 0x1C17CF4
	029 Move X0, 0x236B000
	030 Move X0, [X0+2928]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X19+2509], W8
	034 Move X19, [X21+56]
	035 Move X20, [X21+152]
	036 Move X0, X21
	037 Move X1, X31
	038 Call Component.get_transform, X0
	039 Compare X0, 0
	040 JumpIfEqual {150}
	041 Move X22, 0x236B000
	042 Move X21, 0x236B000
	043 Move X25, 0x236B000
	044 Move X22, [X22+2904]
	045 Move X21, [X21+2912]
	046 Move X25, [X25+2928]
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X1, [X22]
	050 Add X0, X31, 64
	051 Move [X31+64], X31
	052 Move [X31+72], X31
	053 Call Nullable`1<Vector3>..ctor, X0, X1
	054 Move X22, 0x264D000
	055 Move W8, [X22+1939]
	056 Compare W8, 0
	057 JumpIfNotEqual {63}
	058 Move X0, 0x2369000
	059 Move X0, [X0+1448]
	060 Call 0x1C17CF4
	061 Move W8, 1
	062 Move [X22+1939], W8
	063 Move X8, 0x2369000
	064 Move X8, [X8+1448]
	065 Move X1, [X21]
	066 Add X0, X31, 40
	067 Move X8, [X8]
	068 Move X8, [X8+184]
	069 Move S0, [X8]
	070 Move S1, [X8+4]
	071 Move S2, [X8+8]
	072 Move S3, [X8+12]
	073 Move [X31+40], X31
	074 Move [X31+48], X31
	075 Move [X31+56], W31
	076 Call Nullable`1<Quaternion>..ctor, X0, X1
	077 Move X0, [X25]
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {83}
	081 Call 0x1C17DFC
	082 Move X0, [X25]
	083 Move X8, [X0+184]
	084 Move X23, [X8+8]
	085 Compare X23, 0
	086 JumpIfEqual {91}
	087 NotImplemented "Instruction LDUR not yet implemented."
	088 Move W8, [X31+56]
	089 Move X21, [X31+64]
	090 Move X22, [X31+72]
	091 NotImplemented "Instruction LDUR not yet implemented."
	092 Move W8, [X31+56]
	093 Move X21, [X31+64]
	094 Move X22, [X31+72]
	095 Move [X31+5], V0
	096 Move [X31+96], W8
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {102}
	100 Call 0x1C17DFC
	101 Move X0, [X25]
	102 Move X9, 0x236B000
	103 Move X8, [X0+184]
	104 Move X9, [X9+2896]
	105 Move X24, [X8]
	106 Move X0, [X9]
	107 Call 0x1C17F10
	108 Move X8, 0x236B000
	109 Move X8, [X8+2920]
	110 Move X1, X24
	111 Move X3, X31
	112 Move X23, X0
	113 Move X2, [X8]
	114 Call NetworkObjectSpawnDelegate..ctor, X0, X1, X2
	115 Move X8, [X25]
	116 Move X8, [X8+184]
	117 Move [X8+8], X23
	118 Move V0, [X31+5]
	119 Move W8, [X31+96]
	120 Move [X31+7], V0
	121 Move [X31+128], W8
	122 Compare X19, 0
	123 JumpIfEqual {150}
	124 Move W8, [X31+128]
	125 Move V0, [X31+7]
	126 Add X4, X31, 16
	127 Move X0, X19
	128 Move [X31+32], W8
	129 Add X8, X31, 40
	130 Move X1, X20
	131 Move X2, X21
	132 Move X3, X22
	133 Move X5, X31
	134 Move X6, X31
	135 Move W7, W31
	136 Move [X31+1], V0
	137 Move [X31], X23
	138 Move [X31+8], X31
	139 Call NetworkRunner.SpawnAsync, X0, X1, X2, X3, X4, X5, X6, X7
	140 Move X20, [X31+192]
	141 Move X19, [X31+200]
	142 Move X22, [X31+176]
	143 Move X21, [X31+184]
	144 Move X24, [X31+160]
	145 Move X23, [X31+168]
	146 Move X30, [X31+144]
	147 Move X25, [X31+152]
	148 Add X31, X31, 208
	149 Return 
	150 Call 0x1C17F20

Method: System.Void SpawnLoot()

Disassembly:
	0x01D8C6F8 LDR X21, [X21 + 0xBD8]
	0x01D8C6FC MOV X0, X1
	0x01D8C700 BL 0x1C16F10
	0x01D8C704 LDR X2, [X21]
	0x01D8C708 MOV X1, X19
	0x01D8C70C MOV X3, X31
	0x01D8C710 MOV X21, X0
	0x01D8C714 BL 0x3314368
	0x01D8C718 MOV X0, X20
	0x01D8C71C MOV X1, X21
	0x01D8C720 MOV X2, X31
	0x01D8C724 BL 0x33C0DE4
	0x01D8C728 CBZ X0, 0x1D8C750
	0x01D8C72C LDR X1, [X23]
	0x01D8C730 LDR X8, [X0]
	0x01D8C734 CMP X8, X1
	0x01D8C738 B.NE 0x1D8C74C
	0x01D8C73C STR X0, [X22 + 0x1D0]
	0x01D8C740 LDR X8, [X0]
	0x01D8C744 CMP X8, X1
	0x01D8C748 B.EQ 0x1D8C754
	0x01D8C74C BL 0x1C171E0
	0x01D8C750 STR X0, [X22 + 0x1D0]
	0x01D8C754 LDR X22, [X19 + 0x80]
	0x01D8C758 CBZ X22, 0x1D8C7F0
	0x01D8C75C ADRP X23, 0x236A000
	0x01D8C760 LDR X23, [X23 + 0xBC0]
	0x01D8C764 ADRP X21, 0x236A000
	0x01D8C768 LDR X20, [X22 + 0x90]
	0x01D8C76C LDR X0, [X23]
	0x01D8C770 LDR X21, [X21 + 0xBC8]
	0x01D8C774 BL 0x1C16F10
	0x01D8C778 LDR X2, [X21]
	0x01D8C77C MOV X1, X19
	0x01D8C780 MOV X3, X31
	0x01D8C784 MOV X21, X0
	0x01D8C788 BL 0x2A762F4
	0x01D8C78C MOV X0, X20
	0x01D8C790 MOV X1, X21
	0x01D8C794 MOV X2, X31
	0x01D8C798 BL 0x33C0DE4
	0x01D8C79C CBZ X0, 0x1D8C7D8
	0x01D8C7A0 LDR X21, [X23]
	0x01D8C7A4 MOV X20, X0
	0x01D8C7A8 MOV X1, X21
	0x01D8C7AC BL 0x1C16E00
	0x01D8C7B0 CBZ X0, 0x1D8C7CC
	0x01D8C7B4 STR X0, [X22 + 0x90]
	0x01D8C7B8 LDR X21, [X23]
	0x01D8C7BC MOV X0, X20
	0x01D8C7C0 MOV X1, X21
	0x01D8C7C4 BL 0x1C16E00
	0x01D8C7C8 CBNZ X0, 0x1D8C7DC
	0x01D8C7CC MOV X0, X20
	0x01D8C7D0 MOV X1, X21
	0x01D8C7D4 BL 0x1C171E0
	0x01D8C7D8 STR X31, [X22 + 0x90]
	0x01D8C7DC MOV X0, X19
	0x01D8C7E0 LDP X20, X19, [X31 + 0x20]
	0x01D8C7E4 LDP X22, X21, [X31 + 0x10]
	0x01D8C7E8 LDP X30, X23, [X31], #0x30
	0x01D8C7EC B 0x1D8C7F4
	0x01D8C7F0 BL 0x1C16F20
	0x01D8C7F4 SUB X31, X31, 0x150
	0x01D8C7F8 STP D15, D14, [X31 + 0xD0]
	0x01D8C7FC STP D13, D12, [X31 + 0xE0]
	0x01D8C800 STP D11, D10, [X31 + 0xF0]
	0x01D8C804 STP D9, D8, [X31 + 0x100]
	0x01D8C808 STR X29, [X31 + 0x110]
	0x01D8C80C STP X30, X23, [X31 + 0x120]
	0x01D8C810 STP X22, X21, [X31 + 0x130]
	0x01D8C814 STP X20, X19, [X31 + 0x140]
	0x01D8C818 MOV X21, X0
	0x01D8C81C LDR X0, [X0 + 0x88]
	0x01D8C820 CBZ X0, 0x1D8C97C
	0x01D8C824 MOV X1, X31
	0x01D8C828 BL 0x3C1341C
	0x01D8C82C ADRP X22, 0x264C000
	0x01D8C830 LDRB W8, [X22 + 0xA1F]
	0x01D8C834 LDR W19, [X21 + 0xB0]
	0x01D8C838 MOV X20, X0
	0x01D8C83C CBNZ W8, 0x1D8C854
	0x01D8C840 ADRP X0, 0x2367000
	0x01D8C844 LDR X0, [X0 + 0x5A0]
	0x01D8C848 BL 0x1C16CF4
	0x01D8C84C MOVZ W8, 0x1
	0x01D8C850 STRB W8, [X22 + 0xA1F]
	0x01D8C854 ADRP X22, 0x2367000
	0x01D8C858 LDR X22, [X22 + 0x5A0]
	0x01D8C85C ADRP X23, 0x264C000
	0x01D8C860 LDRB W9, [X23 + 0x793]
	0x01D8C864 LDR V12, [X21 + 0xA8]
	0x01D8C868 LDR X8, [X22]
	0x01D8C86C LDR X8, [X8 + 0xB8]
	0x01D8C870 LDP S13, S0, [X8 + 0x48]
	0x01D8C874 LDR V15, [X8 + 0x50]
	0x01D8C878 CBNZ W9, 0x1D8C898
	0x01D8C87C ADRP X0, 0x2368000
	0x01D8C880 LDR X0, [X0 + 0x5A8]
	0x01D8C884 MOV V8.16B, V0.16B
	0x01D8C888 BL 0x1C16CF4
	0x01D8C88C MOV V0.16B, V8.16B
	0x01D8C890 MOVZ W8, 0x1
	0x01D8C894 STRB W8, [X23 + 0x793]
	0x01D8C898 ADRP X8, 0x2368000
	0x01D8C89C LDR X8, [X8 + 0x5A8]
	0x01D8C8A0 ADRP X21, 0x264C000
	0x01D8C8A4 LDRB W9, [X21 + 0x85B]
	0x01D8C8A8 FMUL S14, S13, S12
	0x01D8C8AC LDR X8, [X8]
	0x01D8C8B0 FMUL S13, S0, S12
	0x01D8C8B4 FMUL S12, S15, S12
	0x01D8C8B8 LDR X8, [X8 + 0xB8]
	0x01D8C8BC LDP S11, S10, [X8]
	0x01D8C8C0 LDP S9, S8, [X8 + 0x8]
	0x01D8C8C4 CBNZ W9, 0x1D8C8DC
	0x01D8C8C8 ADRP X0, 0x2367000
	0x01D8C8CC LDR X0, [X0 + 0x5A0]
	0x01D8C8D0 BL 0x1C16CF4
	0x01D8C8D4 MOVZ W8, 0x1
	0x01D8C8D8 STRB W8, [X21 + 0x85B]
	0x01D8C8DC LDR X8, [X22]
	0x01D8C8E0 MOV V1.16B, V13.16B
	0x01D8C8E4 MOV V2.16B, V12.16B
	0x01D8C8E8 MOV V3.16B, V11.16B
	0x01D8C8EC LDR X8, [X8 + 0xB8]
	0x01D8C8F0 MOV V4.16B, V10.16B
	0x01D8C8F4 MOV V5.16B, V9.16B
	0x01D8C8F8 MOV V6.16B, V8.16B
	0x01D8C8FC LDR V0, [X8 + 0x14]
	0x01D8C900 LDUR X9, [X8 + 0xC]
	0x01D8C904 ADD X8, X31, 0x50
	0x01D8C908 MOV X0, X31
	0x01D8C90C STR S0, [X31 + 0x8]
	0x01D8C910 MOV V0.16B, V14.16B
	0x01D8C914 STR X9, [X31]
	0x01D8C918 BL 0x3C26FA8
	0x01D8C91C LDP V0, V1, [X31 + 0x50]
	0x01D8C920 LDP V2, V3, [X31 + 0x70]
	0x01D8C924 STP V0, V1, [X31 + 0x90]
	0x01D8C928 STP V2, V3, [X31 + 0xB0]
	0x01D8C92C CBZ X20, 0x1D8C97C
	0x01D8C930 LDP V0, V1, [X31 + 0x90]
	0x01D8C934 LDP V2, V3, [X31 + 0xB0]
	0x01D8C938 ADD X2, X31, 0x10
	0x01D8C93C MOV X0, X20
	0x01D8C940 MOV W1, W19
	0x01D8C944 MOV X3, X31
	0x01D8C948 STP V0, V1, [X31 + 0x10]
	0x01D8C94C STP V2, V3, [X31 + 0x30]
	0x01D8C950 BL 0x3C15D84
	0x01D8C954 LDP X20, X19, [X31 + 0x140]
	0x01D8C958 LDP X22, X21, [X31 + 0x130]
	0x01D8C95C LDP X30, X23, [X31 + 0x120]
	0x01D8C960 LDR X29, [X31 + 0x110]
	0x01D8C964 LDP D9, D8, [X31 + 0x100]
	0x01D8C968 LDP D11, D10, [X31 + 0xF0]
	0x01D8C96C LDP D13, D12, [X31 + 0xE0]
	0x01D8C970 LDP D15, D14, [X31 + 0xD0]
	0x01D8C974 ADD X31, X31, 0x150
	0x01D8C978 RET
	0x01D8C97C BL 0x1C16F20
	0x01D8C980 STP X30, X23, [X31 - 0x30]!
	0x01D8C984 STP X22, X21, [X31 + 0x10]
	0x01D8C988 STP X20, X19, [X31 + 0x20]
	0x01D8C98C ADRP X20, 0x264C000
	0x01D8C990 ADRP X21, 0x236A000

ISIL:
	001 Subtract X31, X31, 304
	002 Move [X31+144], D15
	003 Move [X31+152], D14
	004 Move [X31+160], D13
	005 Move [X31+168], D12
	006 Move [X31+176], D11
	007 Move [X31+184], D10
	008 Move [X31+192], D9
	009 Move [X31+200], D8
	010 Move [X31+208], X29
	011 Move [X31+216], X30
	012 Move [X31+224], X28
	013 Move [X31+232], X27
	014 Move [X31+240], X26
	015 Move [X31+248], X25
	016 Move [X31+256], X24
	017 Move [X31+264], X23
	018 Move [X31+272], X22
	019 Move [X31+280], X21
	020 Move [X31+288], X20
	021 Move [X31+296], X19
	022 Move X20, 0x264D000
	023 Move W8, [X20+2510]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {43}
	029 Move X0, 0x236B000
	030 Move X0, [X0+2936]
	031 Call 0x1C17CF4
	032 Move X0, 0x236B000
	033 Move X0, [X0+2896]
	034 Call 0x1C17CF4
	035 Move X0, 0x236B000
	036 Move X0, [X0+2904]
	037 Call 0x1C17CF4
	038 Move X0, 0x236B000
	039 Move X0, [X0+2912]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X20+2510], W8
	043 Move X8, -19533824
	044 Move V0, [X8+1100]
	045 Move X27, 0x236B000
	046 Move X28, 0x236B000
	047 Move X29, 0x236B000
	048 Move X27, [X27+2912]
	049 Move X28, [X28+2896]
	050 Move X29, [X29+2936]
	051 Move [X31+32], S0
	052 Move X20, 0x2368000
	053 Move V13, [X19+160]
	054 Move X20, [X20+1440]
	055 Move W25, W31
	056 Move X26, 0x264D000
	057 NotImplemented "Instruction FCMP not yet implemented."
	058 Move X8, [X19+144]
	059 Compare X8, 0
	060 JumpIfEqual {199}
	061 Move X0, [X8+24]
	062 Move V0, [X19+168]
	063 Move X1, X31
	064 Call LootUtil.PickRandomItem, X0, V0
	065 Move X21, X0
	066 Move X0, X19
	067 Move X1, X31
	068 Call Component.get_transform, X0
	069 Compare X0, 0
	070 JumpIfEqual {199}
	071 Move X1, X31
	072 Call Transform.get_position, X0
	073 Move X0, X31
	074 Move [X31+40], S1
	075 Move [X31+48], S0
	076 Move [X31+36], S2
	077 Call Random.get_onUnitSphere
	078 Move X0, X31
	079 Move V11, V0
	080 Move V12, V1
	081 Move V10, V2
	082 Call Random.get_onUnitSphere
	083 Move W8, [X26+1926]
	084 Move V8, V0
	085 Move V9, V1
	086 Move V14, V2
	087 Compare W8, 0
	088 JumpIfNotEqual {93}
	089 Move X0, X20
	090 Call 0x1C17CF4
	091 Move W8, 1
	092 Move [X26+1926], W8
	093 Move X8, [X20]
	094 Move V0, V8
	095 Move V1, V9
	096 Move V2, V14
	097 Move X8, [X8+184]
	098 Move X0, X31
	099 Move S3, [X8+24]
	100 Move S4, [X8+28]
	101 Move V5, [X8+32]
	102 Call Quaternion.LookRotation, X0, X1
	103 Compare X21, 0
	104 JumpIfEqual {199}
	105 Move V8, V2
	106 Move V2, [X31+32]
	107 Move V9, V3
	108 Move V3, [X31+44]
	109 Move V14, V0
	110 Multiply S0, S11, S2
	111 Move V15, V1
	112 Add S11, S3, S0
	113 Move V0, [X31+40]
	114 Multiply S1, S12, S2
	115 Move X22, [X19+56]
	116 Multiply S2, S10, S2
	117 Add S12, S0, S1
	118 Move V0, [X31+36]
	119 Move X0, X21
	120 Move X1, X31
	121 Add S10, S0, S2
	122 Call Component.get_gameObject, X0
	123 Move X8, 0x236B000
	124 Move X8, [X8+2904]
	125 Move X23, X0
	126 Add X0, X31, 128
	127 Move V0, V11
	128 Move X1, [X8]
	129 Move V1, V12
	130 Move V2, V10
	131 Move [X31+128], X31
	132 Move [X31+136], X31
	133 Call Nullable`1<Vector3>..ctor, X0, X1
	134 Move X1, [X27]
	135 Add X0, X31, 104
	136 Move V0, V14
	137 Move V1, V15
	138 Move V2, V8
	139 Move V3, V9
	140 Move [X31+104], X31
	141 Move [X31+112], X31
	142 Move [X31+120], W31
	143 Call Nullable`1<Quaternion>..ctor, X0, X1
	144 Move X0, [X28]
	145 Call 0x1C17F10
	146 Move X2, [X29]
	147 Move X1, X19
	148 Move X3, X31
	149 Move X24, X0
	150 Call NetworkObjectSpawnDelegate..ctor, X0, X1, X2
	151 Compare X22, 0
	152 JumpIfEqual {199}
	153 Move W8, [X31+120]
	154 NotImplemented "Instruction LDUR not yet implemented."
	155 Move X2, [X31+128]
	156 Move X3, [X31+136]
	157 Add X4, X31, 48
	158 Move [X31+64], W8
	159 Add X8, X31, 80
	160 Move X0, X22
	161 Move X1, X23
	162 Move X5, X31
	163 Move X6, X31
	164 Move W7, W31
	165 Move [X31+3], V0
	166 Move [X31], X24
	167 Move [X31+8], X31
	168 Call NetworkRunner.SpawnAsync, X0, X1, X2, X3, X4, X5, X6, X7
	169 Move X0, X21
	170 Move X1, X31
	171 Call Item.get_itemValue, X0
	172 Move W8, [X19+164]
	173 NotImplemented "Instruction SCVTF not yet implemented."
	174 Add W25, W25, 1
	175 Subtract S13, S13, S0
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move X20, [X31+288]
	178 Move X19, [X31+296]
	179 Move X22, [X31+272]
	180 Move X21, [X31+280]
	181 Move X24, [X31+256]
	182 Move X23, [X31+264]
	183 Move X26, [X31+240]
	184 Move X25, [X31+248]
	185 Move X28, [X31+224]
	186 Move X27, [X31+232]
	187 Move X29, [X31+208]
	188 Move X30, [X31+216]
	189 Move D9, [X31+192]
	190 Move D8, [X31+200]
	191 Move D11, [X31+176]
	192 Move D10, [X31+184]
	193 Move D13, [X31+160]
	194 Move D12, [X31+168]
	195 Move D15, [X31+144]
	196 Move D14, [X31+152]
	197 Add X31, X31, 304
	198 Return 
	199 Call 0x1C17F20

Method: System.Void RPC_TakeHit(System.Int32 damage, UnityEngine.Vector3 position, System.String hitSound, System.String killSound, UnityEngine.Vector3 force, System.String hitName)

Disassembly:
	0x01D8C994 LDRB W8, [X20 + 0x9D7]
	0x01D8C998 LDR X21, [X21 + 0xA78]
	0x01D8C99C MOV X19, X0
	0x01D8C9A0 TBNZ X8, 0x0, 0x1D8C9F4
	0x01D8C9A4 ADRP X0, 0x236A000
	0x01D8C9A8 LDR X0, [X0 + 0xBC0]
	0x01D8C9AC BL 0x1C16CF4
	0x01D8C9B0 ADRP X0, 0x2368000
	0x01D8C9B4 LDR X0, [X0 + 0xE70]
	0x01D8C9B8 BL 0x1C16CF4
	0x01D8C9BC ADRP X0, 0x236A000
	0x01D8C9C0 LDR X0, [X0 + 0xBC8]
	0x01D8C9C4 BL 0x1C16CF4
	0x01D8C9C8 ADRP X0, 0x236A000
	0x01D8C9CC LDR X0, [X0 + 0xBD0]
	0x01D8C9D0 BL 0x1C16CF4
	0x01D8C9D4 ADRP X0, 0x236A000
	0x01D8C9D8 LDR X0, [X0 + 0xBD8]
	0x01D8C9DC BL 0x1C16CF4
	0x01D8C9E0 ADRP X0, 0x236A000
	0x01D8C9E4 LDR X0, [X0 + 0xA78]
	0x01D8C9E8 BL 0x1C16CF4
	0x01D8C9EC MOVZ W8, 0x1
	0x01D8C9F0 STRB W8, [X20 + 0x9D7]
	0x01D8C9F4 LDR X0, [X21]
	0x01D8C9F8 LDR W8, [X0 + 0xE0]
	0x01D8C9FC CBNZ W8, 0x1D8CA04
	0x01D8CA00 BL 0x1C16DFC
	0x01D8CA04 CBZ X19, 0x1D8CB8C
	0x01D8CA08 LDR W8, [X19 + 0x30]
	0x01D8CA0C LDR X23, [X19 + 0xA0]
	0x01D8CA10 ORR W8, W8, 0x8
	0x01D8CA14 STR W8, [X19 + 0x30]
	0x01D8CA18 CBZ X23, 0x1D8CB8C
	0x01D8CA1C ADRP X22, 0x2368000
	0x01D8CA20 LDR X22, [X22 + 0xE70]
	0x01D8CA24 ADRP X21, 0x236A000
	0x01D8CA28 LDR X20, [X23 + 0x1D8]
	0x01D8CA2C LDR X0, [X22]
	0x01D8CA30 LDR X21, [X21 + 0xBD0]
	0x01D8CA34 BL 0x1C16F10
	0x01D8CA38 LDR X2, [X21]
	0x01D8CA3C MOV X1, X19
	0x01D8CA40 MOV X3, X31
	0x01D8CA44 MOV X21, X0
	0x01D8CA48 BL 0x3314368
	0x01D8CA4C MOV X0, X20
	0x01D8CA50 MOV X1, X21
	0x01D8CA54 MOV X2, X31
	0x01D8CA58 BL 0x33C0FDC
	0x01D8CA5C LDR X1, [X22]
	0x01D8CA60 CBZ X0, 0x1D8CA84
	0x01D8CA64 LDR X8, [X0]
	0x01D8CA68 CMP X8, X1
	0x01D8CA6C B.NE 0x1D8CAEC
	0x01D8CA70 STR X0, [X23 + 0x1D8]
	0x01D8CA74 LDR X8, [X0]
	0x01D8CA78 CMP X8, X1
	0x01D8CA7C B.EQ 0x1D8CA88
	0x01D8CA80 B 0x1D8CAEC
	0x01D8CA84 STR X0, [X23 + 0x1D8]
	0x01D8CA88 LDR X23, [X19 + 0xA0]
	0x01D8CA8C CBZ X23, 0x1D8CB8C
	0x01D8CA90 ADRP X21, 0x236A000
	0x01D8CA94 LDR X20, [X23 + 0x1D0]
	0x01D8CA98 LDR X21, [X21 + 0xBD8]
	0x01D8CA9C MOV X0, X1
	0x01D8CAA0 BL 0x1C16F10
	0x01D8CAA4 LDR X2, [X21]
	0x01D8CAA8 MOV X1, X19
	0x01D8CAAC MOV X3, X31
	0x01D8CAB0 MOV X21, X0
	0x01D8CAB4 BL 0x3314368
	0x01D8CAB8 MOV X0, X20
	0x01D8CABC MOV X1, X21
	0x01D8CAC0 MOV X2, X31
	0x01D8CAC4 BL 0x33C0FDC
	0x01D8CAC8 CBZ X0, 0x1D8CAF0
	0x01D8CACC LDR X1, [X22]
	0x01D8CAD0 LDR X8, [X0]
	0x01D8CAD4 CMP X8, X1
	0x01D8CAD8 B.NE 0x1D8CAEC
	0x01D8CADC STR X0, [X23 + 0x1D0]
	0x01D8CAE0 LDR X8, [X0]
	0x01D8CAE4 CMP X8, X1
	0x01D8CAE8 B.EQ 0x1D8CAF4
	0x01D8CAEC BL 0x1C171E0
	0x01D8CAF0 STR X0, [X23 + 0x1D0]
	0x01D8CAF4 LDR X22, [X19 + 0x80]
	0x01D8CAF8 CBZ X22, 0x1D8CB8C
	0x01D8CAFC ADRP X23, 0x236A000
	0x01D8CB00 LDR X23, [X23 + 0xBC0]
	0x01D8CB04 ADRP X21, 0x236A000
	0x01D8CB08 LDR X20, [X22 + 0x90]
	0x01D8CB0C LDR X0, [X23]
	0x01D8CB10 LDR X21, [X21 + 0xBC8]
	0x01D8CB14 BL 0x1C16F10
	0x01D8CB18 LDR X2, [X21]
	0x01D8CB1C MOV X1, X19
	0x01D8CB20 MOV X3, X31
	0x01D8CB24 MOV X21, X0
	0x01D8CB28 BL 0x2A762F4
	0x01D8CB2C MOV X0, X20
	0x01D8CB30 MOV X1, X21
	0x01D8CB34 MOV X2, X31
	0x01D8CB38 BL 0x33C0FDC
	0x01D8CB3C CBZ X0, 0x1D8CB78
	0x01D8CB40 LDR X20, [X23]
	0x01D8CB44 MOV X19, X0
	0x01D8CB48 MOV X1, X20
	0x01D8CB4C BL 0x1C16E00
	0x01D8CB50 CBZ X0, 0x1D8CB6C
	0x01D8CB54 STR X0, [X22 + 0x90]
	0x01D8CB58 LDR X20, [X23]
	0x01D8CB5C MOV X0, X19
	0x01D8CB60 MOV X1, X20
	0x01D8CB64 BL 0x1C16E00
	0x01D8CB68 CBNZ X0, 0x1D8CB7C
	0x01D8CB6C MOV X0, X19
	0x01D8CB70 MOV X1, X20
	0x01D8CB74 BL 0x1C171E0
	0x01D8CB78 STR X31, [X22 + 0x90]
	0x01D8CB7C LDP X20, X19, [X31 + 0x20]
	0x01D8CB80 LDP X22, X21, [X31 + 0x10]
	0x01D8CB84 LDP X30, X23, [X31], #0x30
	0x01D8CB88 RET
	0x01D8CB8C BL 0x1C16F20
	0x01D8CB90 SUB X31, X31, 0x40
	0x01D8CB94 STR D10, [X31 + 0x10]
	0x01D8CB98 STP D9, D8, [X31 + 0x18]
	0x01D8CB9C STR X30, [X31 + 0x28]
	0x01D8CBA0 STP X20, X19, [X31 + 0x30]
	0x01D8CBA4 ADRP X20, 0x264C000
	0x01D8CBA8 LDRB W8, [X20 + 0x9D8]
	0x01D8CBAC MOV X19, X0
	0x01D8CBB0 TBNZ X8, 0x0, 0x1D8CBC8
	0x01D8CBB4 ADRP X0, 0x2367000
	0x01D8CBB8 LDR X0, [X0 + 0x598]
	0x01D8CBBC BL 0x1C16CF4
	0x01D8CBC0 MOVZ W8, 0x1
	0x01D8CBC4 STRB W8, [X20 + 0x9D8]
	0x01D8CBC8 MOV X0, X19
	0x01D8CBCC MOV X1, X31
	0x01D8CBD0 BL 0x3C32E90
	0x01D8CBD4 CBZ X0, 0x1D8CCD4
	0x01D8CBD8 MOV X1, X31
	0x01D8CBDC BL 0x3C3FA04
	0x01D8CBE0 MOVZ W8, 0x420C0000
	0x01D8CBE4 FMOV S3, W8
	0x01D8CBE8 FMUL S8, S0, S3
	0x01D8CBEC FMUL S9, S1, S3
	0x01D8CBF0 FMUL S10, S2, S3
	0x01D8CBF4 STP S8, S9, [X31]
	0x01D8CBF8 STR S10, [X31 + 0x8]
	0x01D8CBFC LDR X8, [X19 + 0x80]
	0x01D8CC00 CBZ X8, 0x1D8CCD4
	0x01D8CC04 ADRP X9, 0x2367000
	0x01D8CC08 LDR X9, [X9 + 0x598]
	0x01D8CC0C LDR X20, [X8 + 0xC0]
	0x01D8CC10 LDR X0, [X9]
	0x01D8CC14 LDR W9, [X0 + 0xE0]
	0x01D8CC18 CBNZ W9, 0x1D8CC20
	0x01D8CC1C BL 0x1C16DFC
	0x01D8CC20 MOV X0, X20
	0x01D8CC24 MOV X1, X31
	0x01D8CC28 MOV X2, X31
	0x01D8CC2C BL 0x3C354F8
	0x01D8CC30 TBZ X0, 0x0, 0x1D8CC78
	0x01D8CC34 LDR X8, [X19 + 0x80]
	0x01D8CC38 CBZ X8, 0x1D8CCD4
	0x01D8CC3C LDR X8, [X8 + 0xC0]
	0x01D8CC40 CBZ X8, 0x1D8CCD4
	0x01D8CC44 LDR X0, [X8 + 0x168]
	0x01D8CC48 CBZ X0, 0x1D8CCD4
	0x01D8CC4C MOV X1, X31
	0x01D8CC50 BL 0x3C8EBE8
	0x01D8CC54 MOVZ W8, 0x420C0000
	0x01D8CC58 ADD X0, X31, 0x0
	0x01D8CC5C FMOV S2, 8
	0x01D8CC60 FMOV S3, 5
	0x01D8CC64 FMOV S1, W8
	0x01D8CC68 MOV X1, X31
	0x01D8CC6C BL 0x1E1C450
	0x01D8CC70 LDP S8, S9, [X31]
	0x01D8CC74 LDR V10, [X31 + 0x8]
	0x01D8CC78 MOV X0, X19
	0x01D8CC7C MOV V0.16B, V8.16B
	0x01D8CC80 MOV V1.16B, V9.16B
	0x01D8CC84 MOV V2.16B, V10.16B
	0x01D8CC88 BL 0x1D8CCD8
	0x01D8CC8C TBZ X0, 0x0, 0x1D8CCBC
	0x01D8CC90 LDR X20, [X19 + 0x98]
	0x01D8CC94 MOV X0, X19
	0x01D8CC98 MOV X1, X31
	0x01D8CC9C BL 0x3C32E90
	0x01D8CCA0 CBZ X0, 0x1D8CCD4
	0x01D8CCA4 MOV X1, X31
	0x01D8CCA8 BL 0x3C3F58C
	0x01D8CCAC FMOV S3, 1
	0x01D8CCB0 MOV X0, X20
	0x01D8CCB4 MOV X1, X31
	0x01D8CCB8 BL 0x1DC15C4
	0x01D8CCBC LDP X20, X19, [X31 + 0x30]
	0x01D8CCC0 LDR X30, [X31 + 0x28]
	0x01D8CCC4 LDP D9, D8, [X31 + 0x18]
	0x01D8CCC8 LDR V10, [X31 + 0x10]
	0x01D8CCCC ADD X31, X31, 0x40
	0x01D8CCD0 RET
	0x01D8CCD4 BL 0x1C16F20
	0x01D8CCD8 SUB X31, X31, 0xA0
	0x01D8CCDC STP D15, D14, [X31 + 0x30]
	0x01D8CCE0 STP D13, D12, [X31 + 0x40]
	0x01D8CCE4 STP D11, D10, [X31 + 0x50]
	0x01D8CCE8 STP D9, D8, [X31 + 0x60]
	0x01D8CCEC STP X30, X23, [X31 + 0x70]
	0x01D8CCF0 STP X22, X21, [X31 + 0x80]

ISIL:
	001 Move [X31-128], D13
	002 Move [X31-120], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X26
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X24, 0x264D000
	017 Move W8, [X24+2511]
	018 Move X20, X4
	019 Move V8, V5
	020 Move V9, V4
	021 Move V10, V3
	022 Move X22, X3
	023 Move X23, X2
	024 Move V11, V2
	025 Move V12, V1
	026 Move V13, V0
	027 Move W21, W1
	028 Move X19, X0
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {41}
	033 Move X0, 0x236B000
	034 Move X0, [X0+2680]
	035 Call 0x1C17CF4
	036 Move X0, 0x236B000
	037 Move X0, [X0+2944]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X24+2511], W8
	041 Move W8, [X19+88]
	042 Compare W8, 0
	043 JumpIfEqual {83}
	044 Move [X19+88], W31
	045 Move X0, [X19+64]
	046 Compare X0, 0
	047 JumpIfEqual {99}
	048 Move W8, [X0+96]
	049 Move TEMP, X8
	050 And TEMP, TEMP, 2
	051 Compare TEMP, 2
	052 JumpIfEqual {99}
	053 Move X1, X31
	054 Call NetworkObject.get_HasStateAuthority, X0
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {99}
	059 Move X0, X19
	060 Call Crate.get_health, X0
	061 Subtract W8, W0, W21
	062 NotImplemented "Instruction BIC not yet implemented."
	063 Move X0, X19
	064 Call Crate.set_health, X0, X1
	065 Move X0, X19
	066 Move X20, [X31+112]
	067 Move X19, [X31+120]
	068 Move X22, [X31+96]
	069 Move X21, [X31+104]
	070 Move X24, [X31+80]
	071 Move X23, [X31+88]
	072 Move X26, [X31+64]
	073 Move X25, [X31+72]
	074 Move X30, [X31+48]
	075 Move D9, [X31+32]
	076 Move D8, [X31+40]
	077 Move D11, [X31+16]
	078 Move D10, [X31+24]
	079 Move D13, [X31+128]
	080 Move D12, [X31+136]
	081 Call Crate.HandleCurrentHealthChanged, X0
	082 Return 
	083 Move X25, 0x236B000
	084 Move X25, [X25+2680]
	085 Move X0, [X25]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X0, X19
	091 Move X1, X31
	092 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	093 Move X0, [X19+56]
	094 Compare X0, 0
	095 JumpIfEqual {291}
	096 Move X1, X31
	097 Call NetworkRunner.get_Stage, X0
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X20, [X31+112]
	100 Move X19, [X31+120]
	101 Move X22, [X31+96]
	102 Move X21, [X31+104]
	103 Move X24, [X31+80]
	104 Move X23, [X31+88]
	105 Move X26, [X31+64]
	106 Move X25, [X31+72]
	107 Move X30, [X31+48]
	108 Move D9, [X31+32]
	109 Move D8, [X31+40]
	110 Move D11, [X31+16]
	111 Move D10, [X31+24]
	112 Move D13, [X31+128]
	113 Move D12, [X31+136]
	114 Return 
	115 Move X0, [X19+64]
	116 Compare X0, 0
	117 JumpIfEqual {291}
	118 Move X1, X31
	119 Call NetworkObject.GetLocalAuthorityMask, X0
	120 And W31, W0, 7
	121 Move TEMP, X0
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfEqual {45}
	125 Move X0, X23
	126 Move X1, X31
	127 Call ReadWriteUtilsForWeaver.GetByteCountUtf8NoHash, X0
	128 Move W24, W0
	129 Move X0, X22
	130 Move X1, X31
	131 Call ReadWriteUtilsForWeaver.GetByteCountUtf8NoHash, X0
	132 Add W8, W0, 3
	133 Move X0, X20
	134 Move X1, X31
	135 And W26, W8, 0xFFFFFFFC
	136 Call ReadWriteUtilsForWeaver.GetByteCountUtf8NoHash, X0
	137 Add W9, W24, 39
	138 Add W8, W0, 3
	139 And W9, W9, 0xFFFFFFFC
	140 And W8, W8, 0xFFFFFFFC
	141 Add W9, W9, W26
	142 Add W24, W9, W8
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move X8, [X19+56]
	145 Compare X8, 0
	146 JumpIfEqual {291}
	147 Move X0, [X8+80]
	148 Compare X0, 0
	149 JumpIfEqual {291}
	150 Move X1, X31
	151 Call Simulation.HasAnyActiveConnections, X0
	152 Move TEMP, X0
	153 And TEMP, TEMP, 1
	154 Compare TEMP, 1
	155 JumpIfNotEqual {99}
	156 Move X8, [X19+56]
	157 Compare X8, 0
	158 JumpIfEqual {291}
	159 Move X0, [X8+80]
	160 Move W1, W24
	161 Move X2, X31
	162 Call SimulationMessage.Allocate, X0, X1
	163 Move X8, [X19+64]
	164 Compare X8, 0
	165 JumpIfEqual {291}
	166 Move X8, [X8+32]
	167 Move X24, X0
	168 Add X25, X0, 28
	169 Compare X8, 0
	170 JumpIfEqual {228}
	171 Move W0, [X8]
	172 Move X0, [X25]
	173 Move X19, [X19+64]
	174 Move W8, [X0+224]
	175 Compare W8, 0
	176 JumpIfNotEqual {178}
	177 Call 0x1C17DFC
	178 Move X8, 0x236B000
	179 Move X8, [X8+2944]
	180 Move X1, X19
	181 Move X20, [X31+112]
	182 Move X19, [X31+120]
	183 Move X22, [X31+96]
	184 Move X21, [X31+104]
	185 Move X0, [X8]
	186 Move X24, [X31+80]
	187 Move X23, [X31+88]
	188 Move X26, [X31+64]
	189 Move X25, [X31+72]
	190 Move X30, [X31+48]
	191 Move D9, [X31+32]
	192 Move D8, [X31+40]
	193 Move D11, [X31+16]
	194 Move D10, [X31+24]
	195 Move W2, 7
	196 Move X3, X31
	197 Move D13, [X31+128]
	198 Move D12, [X31+136]
	199 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	200 Return 
	201 Move X0, [X25]
	202 Move W8, [X0+224]
	203 Compare W8, 0
	204 JumpIfNotEqual {206}
	205 Call 0x1C17DFC
	206 Move X8, 0x236B000
	207 Move X8, [X8+2944]
	208 Move W1, W24
	209 Move X20, [X31+112]
	210 Move X19, [X31+120]
	211 Move X22, [X31+96]
	212 Move X21, [X31+104]
	213 Move X0, [X8]
	214 Move X24, [X31+80]
	215 Move X23, [X31+88]
	216 Move X26, [X31+64]
	217 Move X25, [X31+72]
	218 Move X30, [X31+48]
	219 Move D9, [X31+32]
	220 Move D8, [X31+40]
	221 Move D11, [X31+16]
	222 Move D10, [X31+24]
	223 Move X2, X31
	224 Move D13, [X31+128]
	225 Move D12, [X31+136]
	226 Call NetworkBehaviourUtils.NotifyRpcPayloadSizeExceeded, X0, X1
	227 Return 
	228 Move X0, X31
	229 Move W1, [X19+104]
	230 Move W2, 1
	231 Move X3, X31
	232 Call RpcHeader.Create, X0, X1, X2
	233 Move [X24+28], X0
	234 Add X0, X24, 52
	235 Move X1, X23
	236 Move X2, X31
	237 Move [X24+36], W21
	238 Move [X24+40], S13
	239 Move [X24+48], S12
	240 Move [X24+48], S11
	241 Call ReadWriteUtilsForWeaver.WriteStringUtf8NoHash, X0, X1
	242 Add W8, W0, 27
	243 And W21, W8, 0xFFFFFFFC
	244 Add X0, X25, W21
	245 Move X1, X22
	246 Move X2, X31
	247 Call ReadWriteUtilsForWeaver.WriteStringUtf8NoHash, X0, X1
	248 Add W8, W0, 3
	249 And W8, W8, 0xFFFFFFFC
	250 Add W8, W8, W21
	251 Add W21, W8, 12
	252 Add X9, X25, W8
	253 Add X0, X25, W21
	254 Move X1, X20
	255 Move X2, X31
	256 Move [X9], S10
	257 Move [X9+8], S9
	258 Move [X9+8], S8
	259 Call ReadWriteUtilsForWeaver.WriteStringUtf8NoHash, X0, X1
	260 Compare X24, 0
	261 JumpIfEqual {291}
	262 Add W8, W0, 3
	263 And W8, W8, 0x1FFFFFFC
	264 Add W8, W8, W21
	265 Move W8, W8
	266 ShiftRight W8, 29
	267 And W8, W8, 0xFFFFFFF
	268 Move [X24+12], W8
	269 Move X0, [X19+56]
	270 Compare X0, 0
	271 JumpIfEqual {291}
	272 Move X1, X24
	273 Move X20, [X31+112]
	274 Move X19, [X31+120]
	275 Move X22, [X31+96]
	276 Move X21, [X31+104]
	277 Move X24, [X31+80]
	278 Move X23, [X31+88]
	279 Move X26, [X31+64]
	280 Move X25, [X31+72]
	281 Move X30, [X31+48]
	282 Move D9, [X31+32]
	283 Move D8, [X31+40]
	284 Move D11, [X31+16]
	285 Move D10, [X31+24]
	286 Move X2, X31
	287 Move D13, [X31+128]
	288 Move D12, [X31+136]
	289 Call NetworkRunner.SendRpc, X0, X1
	290 Return 
	291 Call 0x1C17F20

Method: System.Void Hit(System.Int32 damage, UnityEngine.Vector3 position, AnimalCompany.RandomSFX hitSound, AnimalCompany.RandomSFX killSound, UnityEngine.Vector3 force, System.String hitName, Fusion.NetworkBehaviourId source)

Disassembly:
	0x01D8CCF4 STP X20, X19, [X31 + 0x90]
	0x01D8CCF8 MOV X19, X0
	0x01D8CCFC LDR X0, [X0 + 0x80]
	0x01D8CD00 CBZ X0, 0x1D8CE3C
	0x01D8CD04 MOV V11.16B, V2.16B
	0x01D8CD08 MOV V8.16B, V1.16B
	0x01D8CD0C MOV V12.16B, V0.16B
	0x01D8CD10 BL 0x1D880C4
	0x01D8CD14 STR X0, [X31 + 0x28]
	0x01D8CD18 ADD X0, X31, 0x28
	0x01D8CD1C MOV X1, X31
	0x01D8CD20 BL 0x1E74DE4
	0x01D8CD24 MOV W20, W0
	0x01D8CD28 TBZ X0, 0x0, 0x1D8CE14
	0x01D8CD2C LDR X21, [X19 + 0x80]
	0x01D8CD30 CBZ X21, 0x1D8CE3C
	0x01D8CD34 MOV X0, X21
	0x01D8CD38 BL 0x1D880C4
	0x01D8CD3C LDR X8, [X19 + 0x80]
	0x01D8CD40 CBZ X8, 0x1D8CE3C
	0x01D8CD44 MOV X22, X0
	0x01D8CD48 MOV X0, X8
	0x01D8CD4C MOV X1, X31
	0x01D8CD50 BL 0x3C32E90
	0x01D8CD54 CBZ X0, 0x1D8CE3C
	0x01D8CD58 MOV X1, X31
	0x01D8CD5C BL 0x3C3F58C
	0x01D8CD60 LDR X0, [X19 + 0x80]
	0x01D8CD64 CBZ X0, 0x1D8CE3C
	0x01D8CD68 MOV X1, X31
	0x01D8CD6C STP S2, S1, [X31 + 0x20]
	0x01D8CD70 MOV V13.16B, V0.16B
	0x01D8CD74 MOV V10.16B, V8.16B
	0x01D8CD78 BL 0x3C32E90
	0x01D8CD7C CBZ X0, 0x1D8CE3C
	0x01D8CD80 MOV X1, X31
	0x01D8CD84 BL 0x3C3DEB4
	0x01D8CD88 ADRP X23, 0x264C000
	0x01D8CD8C LDRB W8, [X23 + 0x783]
	0x01D8CD90 MOV V14.16B, V0.16B
	0x01D8CD94 MOV V15.16B, V1.16B
	0x01D8CD98 MOV V8.16B, V2.16B
	0x01D8CD9C MOV V9.16B, V3.16B
	0x01D8CDA0 CBNZ W8, 0x1D8CDB8
	0x01D8CDA4 ADRP X0, 0x2367000
	0x01D8CDA8 LDR X0, [X0 + 0x5A0]
	0x01D8CDAC BL 0x1C16CF4
	0x01D8CDB0 MOVZ W8, 0x1
	0x01D8CDB4 STRB W8, [X23 + 0x783]
	0x01D8CDB8 ADRP X8, 0x2367000
	0x01D8CDBC LDR X8, [X8 + 0x5A0]
	0x01D8CDC0 LDP S2, S1, [X31 + 0x20]
	0x01D8CDC4 MOV X0, X21
	0x01D8CDC8 MOV X1, X22
	0x01D8CDCC LDR X8, [X8]
	0x01D8CDD0 MOV V3.16B, V14.16B
	0x01D8CDD4 MOV V4.16B, V15.16B
	0x01D8CDD8 MOV V5.16B, V8.16B
	0x01D8CDDC LDR X8, [X8 + 0xB8]
	0x01D8CDE0 MOV V6.16B, V9.16B
	0x01D8CDE4 MOV W2, W31
	0x01D8CDE8 LDR V0, [X8 + 0x8]
	0x01D8CDEC LDR X9, [X8]
	0x01D8CDF0 STP S10, S11, [X31 + 0x4]
	0x01D8CDF4 STR S12, [X31]
	0x01D8CDF8 STR S0, [X31 + 0x18]
	0x01D8CDFC MOV V0.16B, V13.16B
	0x01D8CE00 STR X9, [X31 + 0x10]
	0x01D8CE04 BL 0x1D88FDC
	0x01D8CE08 LDR X0, [X19 + 0x80]
	0x01D8CE0C CBZ X0, 0x1D8CE3C
	0x01D8CE10 BL 0x1D89528
	0x01D8CE14 AND W0, W20, 0x1
	0x01D8CE18 LDP X20, X19, [X31 + 0x90]
	0x01D8CE1C LDP X22, X21, [X31 + 0x80]
	0x01D8CE20 LDP X30, X23, [X31 + 0x70]
	0x01D8CE24 LDP D9, D8, [X31 + 0x60]
	0x01D8CE28 LDP D11, D10, [X31 + 0x50]
	0x01D8CE2C LDP D13, D12, [X31 + 0x40]
	0x01D8CE30 LDP D15, D14, [X31 + 0x30]
	0x01D8CE34 ADD X31, X31, 0xA0
	0x01D8CE38 RET
	0x01D8CE3C BL 0x1C16F20
	0x01D8CE40 STR X30, [X31 - 0x20]!
	0x01D8CE44 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-112], D13
	002 Move [X31-104], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X25
	009 Move [X31+64], X24
	010 Move [X31+72], X23
	011 Move [X31+80], X22
	012 Move [X31+88], X21
	013 Move [X31+96], X20
	014 Move [X31+104], X19
	015 Move X25, 0x264D000
	016 Move X24, 0x2368000
	017 Move W8, [X25+2512]
	018 Move X24, [X24+1432]
	019 Move X19, X4
	020 Move V8, V5
	021 Move V9, V4
	022 Move V10, V3
	023 Move X22, X3
	024 Move X23, X2
	025 Move V11, V2
	026 Move V12, V1
	027 Move V13, V0
	028 Move W20, W1
	029 Move X21, X0
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {42}
	034 Move X0, 0x2368000
	035 Move X0, [X0+1432]
	036 Call 0x1C17CF4
	037 Move X0, 0x2368000
	038 Move X0, [X0+2440]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X25+2512], W8
	042 Move X0, [X24]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X25, 0x2368000
	048 Move X25, [X25+2440]
	049 Move X0, X23
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Inequality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {63}
	057 Compare X23, 0
	058 JumpIfEqual {112}
	059 Move X0, X23
	060 Move X1, X31
	061 Call Object.get_name, X0
	062 Move X23, X0
	063 Move X23, [X25]
	064 Move X0, [X24]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, X22
	070 Move X1, X31
	071 Move X2, X31
	072 Call Object.op_Inequality, X0, X1
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {83}
	077 Compare X22, 0
	078 JumpIfEqual {112}
	079 Move X0, X22
	080 Move X1, X31
	081 Call Object.get_name, X0
	082 Move X3, X0
	083 Move X3, [X25]
	084 Compare X21, 0
	085 JumpIfEqual {112}
	086 Move X0, X21
	087 Move W1, W20
	088 Move V2, V11
	089 Move X2, X23
	090 Move V3, V10
	091 Move V4, V9
	092 Move V5, V8
	093 Move X4, X19
	094 Move X20, [X31+96]
	095 Move X19, [X31+104]
	096 Move X22, [X31+80]
	097 Move X21, [X31+88]
	098 Move X24, [X31+64]
	099 Move X23, [X31+72]
	100 Move X30, [X31+48]
	101 Move X25, [X31+56]
	102 Move D9, [X31+32]
	103 Move D8, [X31+40]
	104 Move D11, [X31+16]
	105 Move D10, [X31+24]
	106 Move V0, V13
	107 Move V1, V12
	108 Move D13, [X31+112]
	109 Move D12, [X31+120]
	110 Call Crate.RPC_TakeHit, X0, X1, X2, X3, X4, X5, X6
	111 Return 
	112 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D8CE48 ADRP X20, 0x264C000
	0x01D8CE4C LDRB W8, [X20 + 0x783]
	0x01D8CE50 MOV X19, X0
	0x01D8CE54 CBNZ W8, 0x1D8CE6C

ISIL:
	001 Move W8, 5
	002 Move X1, X31
	003 Move [X0+172], W8
	004 Call NetworkBehaviour..ctor, X0
	005 Return 

Method: System.Void .cctor()

Disassembly:
	0x01D8CE58 ADRP X0, 0x2367000
	0x01D8CE5C LDR X0, [X0 + 0x5A0]
	0x01D8CE60 BL 0x1C16CF4
	0x01D8CE64 MOVZ W8, 0x1
	0x01D8CE68 STRB W8, [X20 + 0x783]
	0x01D8CE6C ADRP X8, 0x2367000
	0x01D8CE70 LDR X8, [X8 + 0x5A0]
	0x01D8CE74 MOV X0, X19
	0x01D8CE78 LDP X20, X19, [X31 + 0x10]
	0x01D8CE7C LDR X8, [X8]
	0x01D8CE80 LDR X8, [X8 + 0xB8]
	0x01D8CE84 LDP S0, S1, [X8]
	0x01D8CE88 LDR V2, [X8 + 0x8]
	0x01D8CE8C LDR X30, [X31], #0x20
	0x01D8CE90 B 0x1D8CCD8
	0x01D8CE94 STP X30, X21, [X31 - 0x20]!
	0x01D8CE98 STP X20, X19, [X31 + 0x10]
	0x01D8CE9C ADRP X21, 0x264C000
	0x01D8CEA0 LDRB W8, [X21 + 0x9D9]
	0x01D8CEA4 MOV X20, X2
	0x01D8CEA8 MOV X19, X0
	0x01D8CEAC TBNZ X8, 0x0, 0x1D8CEC4
	0x01D8CEB0 ADRP X0, 0x2367000
	0x01D8CEB4 LDR X0, [X0 + 0x598]
	0x01D8CEB8 BL 0x1C16CF4
	0x01D8CEBC MOVZ W8, 0x1
	0x01D8CEC0 STRB W8, [X21 + 0x9D9]
	0x01D8CEC4 LDR X0, [X19 + 0x40]
	0x01D8CEC8 CBZ X0, 0x1D8CF40
	0x01D8CECC LDRB W8, [X0 + 0x60]
	0x01D8CED0 TBNZ X8, 0x1, 0x1D8CF40
	0x01D8CED4 MOV X1, X31
	0x01D8CED8 BL 0x1E93668
	0x01D8CEDC TBZ X0, 0x0, 0x1D8CF40
	0x01D8CEE0 ADRP X8, 0x2367000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x264D000
	007 Move X22, 0x236B000
	008 Move X19, 0x236B000
	009 Move X20, 0x236B000
	010 Move W8, [X21+2513]
	011 Move X22, [X22+2952]
	012 Move X19, [X19+2960]
	013 Move X20, [X20+2824]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x236B000
	019 Move X0, [X0+2824]
	020 Call 0x1C17CF4
	021 Move X0, 0x236B000
	022 Move X0, [X0+2960]
	023 Call 0x1C17CF4
	024 Move X0, 0x236B000
	025 Move X0, [X0+2952]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+2513], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call HashSet`1<Object>..ctor, X0
	034 Move X8, [X20]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8], X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Void <SpawnLoot>b__27_0(Fusion.NetworkSpawnOp op)

Disassembly:
	0x01D8CEE4 LDR X8, [X8 + 0x598]
	0x01D8CEE8 LDR X0, [X8]
	0x01D8CEEC LDR W8, [X0 + 0xE0]
	0x01D8CEF0 CBNZ W8, 0x1D8CEF8
	0x01D8CEF4 BL 0x1C16DFC
	0x01D8CEF8 MOV X0, X20
	0x01D8CEFC MOV X1, X31
	0x01D8CF00 MOV X2, X31
	0x01D8CF04 BL 0x3C354F8
	0x01D8CF08 TBZ X0, 0x0, 0x1D8CF40
	0x01D8CF0C LDR X20, [X19 + 0x90]
	0x01D8CF10 MOV X0, X19
	0x01D8CF14 MOV X1, X31
	0x01D8CF18 BL 0x3C32E90
	0x01D8CF1C CBZ X0, 0x1D8CF4C
	0x01D8CF20 MOV X1, X31
	0x01D8CF24 BL 0x3C3F58C
	0x01D8CF28 MOV X0, X20
	0x01D8CF2C LDP X20, X19, [X31 + 0x10]
	0x01D8CF30 FMOV S3, 1
	0x01D8CF34 MOV X1, X31
	0x01D8CF38 LDP X30, X21, [X31], #0x20
	0x01D8CF3C B 0x1DC15C4
	0x01D8CF40 LDP X20, X19, [X31 + 0x10]
	0x01D8CF44 LDP X30, X21, [X31], #0x20
	0x01D8CF48 RET
	0x01D8CF4C BL 0x1C16F20
	0x01D8CF50 B 0x1D8CF54
	0x01D8CF54 SUB X31, X31, 0x50
	0x01D8CF58 STP D11, D10, [X31 + 0x10]
	0x01D8CF5C STP D9, D8, [X31 + 0x20]
	0x01D8CF60 STP X30, X21, [X31 + 0x30]
	0x01D8CF64 STP X20, X19, [X31 + 0x40]
	0x01D8CF68 ADRP X21, 0x264C000
	0x01D8CF6C ADRP X20, 0x2367000
	0x01D8CF70 LDRB W8, [X21 + 0x9DA]
	0x01D8CF74 LDR X20, [X20 + 0x598]
	0x01D8CF78 MOV X19, X0
	0x01D8CF7C TBNZ X8, 0x0, 0x1D8CF94
	0x01D8CF80 ADRP X0, 0x2367000
	0x01D8CF84 LDR X0, [X0 + 0x598]
	0x01D8CF88 BL 0x1C16CF4
	0x01D8CF8C MOVZ W8, 0x1
	0x01D8CF90 STRB W8, [X21 + 0x9DA]
	0x01D8CF94 LDR X0, [X20]
	0x01D8CF98 LDR X20, [X19 + 0x40]
	0x01D8CF9C LDR W8, [X0 + 0xE0]
	0x01D8CFA0 CBNZ W8, 0x1D8CFA8
	0x01D8CFA4 BL 0x1C16DFC
	0x01D8CFA8 MOV X0, X20
	0x01D8CFAC MOV X1, X31
	0x01D8CFB0 MOV X2, X31
	0x01D8CFB4 BL 0x3C3883C
	0x01D8CFB8 TBNZ X0, 0x0, 0x1D8D08C
	0x01D8CFBC LDR X0, [X19 + 0x40]
	0x01D8CFC0 CBZ X0, 0x1D8D0A4
	0x01D8CFC4 MOV X1, X31
	0x01D8CFC8 BL 0x1E934B8
	0x01D8CFCC TBZ X0, 0x0, 0x1D8D08C
	0x01D8CFD0 LDR X0, [X19 + 0xA0]
	0x01D8CFD4 CBZ X0, 0x1D8D0A4
	0x01D8CFD8 BL 0x1D8D0A8
	0x01D8CFDC TBZ X0, 0x0, 0x1D8D08C
	0x01D8CFE0 LDR X0, [X19 + 0x80]
	0x01D8CFE4 CBZ X0, 0x1D8D0A4
	0x01D8CFE8 BL 0x1D880C4
	0x01D8CFEC STR X0, [X31 + 0x8]
	0x01D8CFF0 ADD X0, X31, 0x8
	0x01D8CFF4 MOV X1, X31
	0x01D8CFF8 BL 0x1E74DE4
	0x01D8CFFC ADRP X8, 0xFFFFFFFFFED5E000
	0x01D8D000 LDR V8, [X8 + 0x60]
	0x01D8D004 LDP S1, S9, [X19 + 0xA8]
	0x01D8D008 ANDS W31, W0, 0x1
	0x01D8D00C FMOV S0, W31
	0x01D8D010 MOVZ W8, 0x43C80000
	0x01D8D014 FCSEL S0, S8, S0, NE
	0x01D8D018 FMOV S2, -5
	0x01D8D01C FMOV S3, W8
	0x01D8D020 FSUB S0, S0, S1
	0x01D8D024 FMUL S0, S0, S3
	0x01D8D028 FMUL S1, S9, S2
	0x01D8D02C MOV X0, X31
	0x01D8D030 FADD S10, S0, S1
	0x01D8D034 BL 0x3C3C714
	0x01D8D038 LDR V11, [X19 + 0xA8]
	0x01D8D03C FMUL S0, S0, S10
	0x01D8D040 FADD S9, S9, S0
	0x01D8D044 MOV X0, X31
	0x01D8D048 STR S9, [X19 + 0xAC]
	0x01D8D04C BL 0x3C3C714
	0x01D8D050 FMUL S0, S9, S0
	0x01D8D054 LDR V2, [X19 + 0xA8]
	0x01D8D058 ADRP X8, 0xFFFFFFFFFED5D000
	0x01D8D05C FMOV S1, -2
	0x01D8D060 FADD S0, S11, S0
	0x01D8D064 LDR V3, [X8 + 0x410]
	0x01D8D068 FMIN S4, S0, S8
	0x01D8D06C FCMP S0, S1
	0x01D8D070 FCSEL S0, S4, S1, PL
	0x01D8D074 FABD S1, S0, S0
	0x01D8D078 FCMP S1, S3
	0x01D8D07C B.LE 0x1D8D08C
	0x01D8D080 MOV X0, X19
	0x01D8D084 STR S0, [X19 + 0xA8]
	0x01D8D088 BL 0x1D8C7F4
	0x01D8D08C LDP X20, X19, [X31 + 0x40]
	0x01D8D090 LDP X30, X21, [X31 + 0x30]
	0x01D8D094 LDP D9, D8, [X31 + 0x20]
	0x01D8D098 LDP D11, D10, [X31 + 0x10]
	0x01D8D09C ADD X31, X31, 0x50
	0x01D8D0A0 RET
	0x01D8D0A4 BL 0x1C16F20
	0x01D8D0A8 STR X30, [X31 - 0x30]!
	0x01D8D0AC STP X22, X21, [X31 + 0x10]
	0x01D8D0B0 STP X20, X19, [X31 + 0x20]
	0x01D8D0B4 MOV X19, X0
	0x01D8D0B8 BL 0x1D896B8
	0x01D8D0BC MOV X20, X0
	0x01D8D0C0 MOV X0, X31
	0x01D8D0C4 BL 0x1E769D8
	0x01D8D0C8 ADRP X22, 0x264B000
	0x01D8D0CC LDRB W8, [X22 + 0xA20]
	0x01D8D0D0 MOV X21, X0
	0x01D8D0D4 CBNZ W8, 0x1D8D0EC
	0x01D8D0D8 ADRP X0, 0x2369000
	0x01D8D0DC LDR X0, [X0 + 0x398]
	0x01D8D0E0 BL 0x1C16CF4
	0x01D8D0E4 MOVZ W8, 0x1
	0x01D8D0E8 STRB W8, [X22 + 0xA20]
	0x01D8D0EC ADRP X8, 0x2369000
	0x01D8D0F0 LDR X8, [X8 + 0x398]
	0x01D8D0F4 LDR X0, [X8]
	0x01D8D0F8 LDR W8, [X0 + 0xE0]
	0x01D8D0FC CBNZ W8, 0x1D8D104
	0x01D8D100 BL 0x1C16DFC
	0x01D8D104 CMP W20, W21
	0x01D8D108 B.NE 0x1D8D124
	0x01D8D10C UBFM X8, X21, 0x20, 0x3F
	0x01D8D110 UBFM X9, X20, 0x20, 0x3F
	0x01D8D114 CMP W9, W8
	0x01D8D118 B.NE 0x1D8D124
	0x01D8D11C MOV W0, W31
	0x01D8D120 B 0x1D8D13C
	0x01D8D124 MOV X0, X19
	0x01D8D128 BL 0x1D896B8
	0x01D8D12C STR X0, [X31 + 0x8]
	0x01D8D130 ADD X0, X31, 0x8
	0x01D8D134 MOV X1, X31
	0x01D8D138 BL 0x1E74DE4
	0x01D8D13C LDP X20, X19, [X31 + 0x20]
	0x01D8D140 LDP X22, X21, [X31 + 0x10]
	0x01D8D144 AND W0, W0, 0x1
	0x01D8D148 LDR X30, [X31], #0x30
	0x01D8D14C RET
	0x01D8D150 STP X30, X21, [X31 - 0x20]!
	0x01D8D154 STP X20, X19, [X31 + 0x10]
	0x01D8D158 ADRP X20, 0x264B000
	0x01D8D15C ADRP X21, 0x2369000
	0x01D8D160 LDRB W8, [X20 + 0x9DB]
	0x01D8D164 LDR X21, [X21 + 0xBE0]
	0x01D8D168 MOV X19, X0
	0x01D8D16C TBNZ X8, 0x0, 0x1D8D184
	0x01D8D170 ADRP X0, 0x2369000
	0x01D8D174 LDR X0, [X0 + 0xBE0]
	0x01D8D178 BL 0x1C16CF4
	0x01D8D17C MOVZ W8, 0x1
	0x01D8D180 STRB W8, [X20 + 0x9DB]
	0x01D8D184 LDR X0, [X21]
	0x01D8D188 MOV X1, X31
	0x01D8D18C BL 0x3C124EC
	0x01D8D190 STR W0, [X19 + 0xB0]
	0x01D8D194 MOV X0, X19
	0x01D8D198 LDP X20, X19, [X31 + 0x10]
	0x01D8D19C MOV X1, X31
	0x01D8D1A0 LDP X30, X21, [X31], #0x20
	0x01D8D1A4 B 0x1E74F04
	0x01D8D1A8 RET
	0x01D8D1AC RET
	0x01D8D1B0 STR X30, [X31 - 0x30]!
	0x01D8D1B4 STP X22, X21, [X31 + 0x10]
	0x01D8D1B8 STP X20, X19, [X31 + 0x20]
	0x01D8D1BC ADRP X21, 0x264B000
	0x01D8D1C0 ADRP X22, 0x2369000
	0x01D8D1C4 ADRP X20, 0x2369000
	0x01D8D1C8 LDRB W8, [X21 + 0x9DC]
	0x01D8D1CC LDR X22, [X22 + 0xB98]
	0x01D8D1D0 LDR X20, [X20 + 0xBB8]
	0x01D8D1D4 MOV X19, X0

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x264D000
	011 Move W8, [X21+2514]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x236B000
	019 Move X0, [X0+2968]
	020 Call 0x1C17CF4
	021 Move X0, 0x2368000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2514], W8
	026 Move X0, X20
	027 Move X1, X31
	028 Call NetworkSpawnOp.get_IsSpawned, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {203}
	033 Move X22, 0x264D000
	034 Move W8, [X22+2593]
	035 Compare W8, 0
	036 JumpIfNotEqual {45}
	037 Move X0, 0x236B000
	038 Move X0, [X0+2976]
	039 Call 0x1C17CF4
	040 Move X0, 0x236B000
	041 Move X0, [X0+2984]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X22+2593], W8
	045 Move W8, [X20+8]
	046 Move X21, [X20+16]
	047 Compare W8, 0
	048 JumpIfEqual {53}
	049 Compare X21, 0
	050 JumpIfEqual {75}
	051 Move X8, [X21]
	052 Move W9, [X8+304]
	053 Compare X21, 0
	054 JumpIfEqual {75}
	055 Move X9, 0x236B000
	056 Move X9, [X9+2976]
	057 Move X8, [X21]
	058 Move X10, [X9]
	059 Move W9, [X8+304]
	060 Move W11, [X10+304]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X12, [X8+200]
	063 Add X11, X12, X11
	064 NotImplemented "Instruction LDUR not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X10, 0x236B000
	067 Move X10, [X10+2984]
	068 Move X1, [X10]
	069 Move W10, [X1+304]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X8, [X8+200]
	072 Add X8, X8, X10
	073 NotImplemented "Instruction LDUR not yet implemented."
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X23, 0x2368000
	076 Move X23, [X23+1432]
	077 Move X0, [X23]
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {82}
	081 Call 0x1C17DFC
	082 Move X0, X21
	083 Move X1, X31
	084 Move X2, X31
	085 Call Object.op_Inequality, X0, X1
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {203}
	090 Move W8, [X22+2593]
	091 Compare W8, 0
	092 JumpIfNotEqual {101}
	093 Move X0, 0x236A000
	094 Move X0, [X0+2976]
	095 Call 0x1C17CF4
	096 Move X0, 0x236A000
	097 Move X0, [X0+2984]
	098 Call 0x1C17CF4
	099 Move W8, 1
	100 Move [X22+2593], W8
	101 Move W8, [X20+8]
	102 Move X0, [X20+16]
	103 Compare W8, 0
	104 JumpIfEqual {109}
	105 Compare X0, 0
	106 JumpIfEqual {131}
	107 Move X8, [X0]
	108 Move W9, [X8+304]
	109 Compare X0, 0
	110 JumpIfEqual {131}
	111 Move X9, 0x236A000
	112 Move X9, [X9+2976]
	113 Move X8, [X0]
	114 Move X10, [X9]
	115 Move W9, [X8+304]
	116 Move W11, [X10+304]
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move X12, [X8+200]
	119 Add X11, X12, X11
	120 NotImplemented "Instruction LDUR not yet implemented."
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move X10, 0x236A000
	123 Move X10, [X10+2984]
	124 Move X1, [X10]
	125 Move W10, [X1+304]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move X8, [X8+200]
	128 Add X8, X8, X10
	129 NotImplemented "Instruction LDUR not yet implemented."
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Compare X0, 0
	132 JumpIfEqual {217}
	133 Move X8, 0x236A000
	134 Move X8, [X8+2968]
	135 Move X1, [X8]
	136 Call 0x21A4894, X0
	137 Move X8, [X23]
	138 Move X20, X0
	139 Move W9, [X8+224]
	140 Compare W9, 0
	141 JumpIfNotEqual {144}
	142 Move X0, X8
	143 Call 0x1C17DFC
	144 Move X0, X20
	145 Move X1, X31
	146 Move X2, X31
	147 Call Object.op_Inequality, X0, X1
	148 Move TEMP, X0
	149 And TEMP, TEMP, 1
	150 Compare TEMP, 1
	151 JumpIfNotEqual {203}
	152 Move X0, X19
	153 Move X1, X31
	154 Call Component.get_transform, X0
	155 Compare X0, 0
	156 JumpIfEqual {217}
	157 Move X1, X31
	158 Call Transform.get_position, X0
	159 Move X19, 0x264C000
	160 Move W8, [X19+1926]
	161 Move V8, V0
	162 Move V9, V1
	163 Move V10, V2
	164 Compare W8, 0
	165 JumpIfNotEqual {171}
	166 Move X0, 0x2367000
	167 Move X0, [X0+1440]
	168 Call 0x1C17CF4
	169 Move W8, 1
	170 Move [X19+1926], W8
	171 Compare X20, 0
	172 JumpIfEqual {217}
	173 Move X8, 0x2367000
	174 Move X8, [X8+1440]
	175 Move S3, 0.5
	176 Move X0, X20
	177 Move X20, [X31+64]
	178 Move X19, [X31+72]
	179 Move X8, [X8]
	180 Move X22, [X31+48]
	181 Move X21, [X31+56]
	182 Move X30, [X31+32]
	183 Move X23, [X31+40]
	184 Move X1, X31
	185 Move X8, [X8+184]
	186 Move S1, [X8+28]
	187 Move S0, [X8+32]
	188 Move V2, [X8+24]
	189 Move W8, 0x447A0000
	190 Multiply S1, S1, S3
	191 Multiply S4, S2, S3
	192 Subtract S2, S9, S1
	193 Subtract S1, S8, S4
	194 Move D9, [X31+16]
	195 Move D8, [X31+24]
	196 Multiply S0, S0, S3
	197 Subtract S3, S10, S0
	198 Move S4, 1
	199 Move S0, W8
	200 Move V10, [X31+80]
	201 Call Rigidbody.AddExplosionForce, X0, V0, X1, V1
	202 Return 
	203 Move X20, [X31+64]
	204 Move X19, [X31+72]
	205 Move X22, [X31+48]
	206 Move X21, [X31+56]
	207 Move X30, [X31+32]
	208 Move X23, [X31+40]
	209 Move D9, [X31+16]
	210 Move D8, [X31+24]
	211 Move V10, [X31+80]
	212 Return 
	213 Move X21, [X21+24]
	214 Move X0, [X0+24]
	215 Compare X0, 0
	216 JumpIfNotEqual {133}
	217 Call 0x1C17F20
	218 Move X0, X21
	219 Call 0x1C181E0

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01D8D1D8 TBNZ X8, 0x0, 0x1D8D1FC
	0x01D8D1DC ADRP X0, 0x2369000
	0x01D8D1E0 LDR X0, [X0 + 0xBB8]
	0x01D8D1E4 BL 0x1C16CF4
	0x01D8D1E8 ADRP X0, 0x2369000
	0x01D8D1EC LDR X0, [X0 + 0xB98]
	0x01D8D1F0 BL 0x1C16CF4
	0x01D8D1F4 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, [X0+172]
	004 Move X19, X0
	005 Call Crate.set_health, X0, X1
	006 Move W1, [X19+176]
	007 Move X0, X19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call Crate.set_life, X0, X1
	011 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01D8D1F8 STRB W8, [X21 + 0x9DC]
	0x01D8D1FC LDR X1, [X22]
	0x01D8D200 MOV X0, X19
	0x01D8D204 BL 0x21A3894
	0x01D8D208 STR X0, [X19 + 0x88]
	0x01D8D20C LDR X1, [X20]
	0x01D8D210 MOV X0, X19
	0x01D8D214 BL 0x21A3894
	0x01D8D218 STR X0, [X19 + 0x90]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Crate.get_health, X0
	005 Move [X19+172], W0
	006 Move X0, X19
	007 Call Crate.get_life, X0
	008 Move [X19+176], W0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

Method: System.Void RPC_TakeHit@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01D8D21C LDP X20, X19, [X31 + 0x20]
	0x01D8D220 LDP X22, X21, [X31 + 0x10]
	0x01D8D224 LDR X30, [X31], #0x30
	0x01D8D228 RET
	0x01D8D22C STR D14, [X31 - 0x70]!
	0x01D8D230 STP D13, D12, [X31 + 0x10]
	0x01D8D234 STP D11, D10, [X31 + 0x20]
	0x01D8D238 STP D9, D8, [X31 + 0x30]
	0x01D8D23C STP X30, X23, [X31 + 0x40]
	0x01D8D240 STP X22, X21, [X31 + 0x50]
	0x01D8D244 STP X20, X19, [X31 + 0x60]
	0x01D8D248 ADRP X21, 0x264B000
	0x01D8D24C ADRP X22, 0x2366000
	0x01D8D250 LDRB W8, [X21 + 0x9DD]
	0x01D8D254 LDR X22, [X22 + 0x598]
	0x01D8D258 MOV X20, X1
	0x01D8D25C MOV X19, X0
	0x01D8D260 TBNZ X8, 0x0, 0x1D8D29C
	0x01D8D264 ADRP X0, 0x2369000
	0x01D8D268 LDR X0, [X0 + 0xBE8]
	0x01D8D26C BL 0x1C16CF4
	0x01D8D270 ADRP X0, 0x2369000
	0x01D8D274 LDR X0, [X0 + 0xBF0]
	0x01D8D278 BL 0x1C16CF4
	0x01D8D27C ADRP X0, 0x2368000
	0x01D8D280 LDR X0, [X0 + 0x9A0]
	0x01D8D284 BL 0x1C16CF4
	0x01D8D288 ADRP X0, 0x2366000
	0x01D8D28C LDR X0, [X0 + 0x598]
	0x01D8D290 BL 0x1C16CF4
	0x01D8D294 MOVZ W8, 0x1
	0x01D8D298 STRB W8, [X21 + 0x9DD]
	0x01D8D29C LDR X0, [X22]
	0x01D8D2A0 LDR X21, [X19 + 0x38]
	0x01D8D2A4 LDR W8, [X0 + 0xE0]
	0x01D8D2A8 CBNZ W8, 0x1D8D2B0
	0x01D8D2AC BL 0x1C16DFC
	0x01D8D2B0 MOV X0, X21
	0x01D8D2B4 MOV X1, X31
	0x01D8D2B8 MOV X2, X31
	0x01D8D2BC BL 0x3C3883C
	0x01D8D2C0 TBNZ X0, 0x0, 0x1D8D5AC
	0x01D8D2C4 LDR X0, [X19 + 0x38]
	0x01D8D2C8 CBZ X0, 0x1D8D5CC
	0x01D8D2CC LDR X1, [X19 + 0x40]
	0x01D8D2D0 MOV X2, X31
	0x01D8D2D4 BL 0x1EA1A20
	0x01D8D2D8 TBZ X0, 0x0, 0x1D8D5AC
	0x01D8D2DC LDR X0, [X19 + 0x40]
	0x01D8D2E0 CBZ X0, 0x1D8D5AC
	0x01D8D2E4 LDRB W8, [X0 + 0x60]
	0x01D8D2E8 TBNZ X8, 0x1, 0x1D8D5AC
	0x01D8D2EC MOV X1, X31
	0x01D8D2F0 BL 0x1E93668
	0x01D8D2F4 TBZ X0, 0x0, 0x1D8D5AC
	0x01D8D2F8 MOV X0, X31
	0x01D8D2FC BL 0x3C3C6C4
	0x01D8D300 LDR V1, [X19 + 0x98]
	0x01D8D304 FSUB S0, S0, S1
	0x01D8D308 FMOV S1, 0.5
	0x01D8D30C FCMP S0, S1
	0x01D8D310 B.MI 0x1D8D5AC
	0x01D8D314 CBZ X20, 0x1D8D5CC
	0x01D8D318 MOV X0, X20
	0x01D8D31C MOV X1, X31
	0x01D8D320 BL 0x3C8A344
	0x01D8D324 CBZ X0, 0x1D8D5CC
	0x01D8D328 LDR W8, [X0 + 0x18]
	0x01D8D32C CBZ W8, 0x1D8D5D0
	0x01D8D330 ADD X0, X0, 0x20
	0x01D8D334 MOV X1, X31
	0x01D8D338 BL 0x3C901AC
	0x01D8D33C MOV X0, X20
	0x01D8D340 MOV X1, X31
	0x01D8D344 MOV V8.16B, V0.16B
	0x01D8D348 MOV V9.16B, V1.16B
	0x01D8D34C MOV V10.16B, V2.16B
	0x01D8D350 BL 0x3C8A29C
	0x01D8D354 CBZ X0, 0x1D8D5CC
	0x01D8D358 ADRP X8, 0x2369000
	0x01D8D35C LDR X8, [X8 + 0xBE8]
	0x01D8D360 LDR X1, [X8]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+80], X22
	010 Move [X31+88], X21
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X20, 0x264C000
	014 Move W8, [X20+2515]
	015 Move X21, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x236A000
	022 Move X0, [X0+2824]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2515], W8
	026 Move [X31+72], X31
	027 Move [X31], X31
	028 Move [X31+8], X31
	029 Move W20, [X21+36]
	030 Move S8, [X21+40]
	031 Move S9, [X21+44]
	032 Move V10, [X21+48]
	033 Add X0, X21, 52
	034 Add X1, X31, 72
	035 Move X2, X31
	036 Add X22, X21, 28
	037 Call ReadWriteUtilsForWeaver.ReadStringUtf8NoHash, X0, X1
	038 Add W8, W0, 27
	039 And W21, W8, 0xFFFFFFFC
	040 Add X0, X22, W21
	041 Add X1, X31, 8
	042 Move X2, X31
	043 Call ReadWriteUtilsForWeaver.ReadStringUtf8NoHash, X0, X1
	044 Add W8, W0, 3
	045 And W8, W8, 0xFFFFFFFC
	046 Add W8, W8, W21
	047 Add X9, X22, W8
	048 Move S11, [X9]
	049 Move S12, [X9+4]
	050 Move V13, [X9+8]
	051 Add W8, W8, 12
	052 Add X0, X22, W8
	053 Add X1, X31, 0
	054 Move X2, X31
	055 Call ReadWriteUtilsForWeaver.ReadStringUtf8NoHash, X0, X1
	056 Compare X19, 0
	057 JumpIfEqual {98}
	058 Move X9, 0x236A000
	059 Move X9, [X9+2824]
	060 Move W8, 1
	061 Move [X19+88], W8
	062 Move X8, [X19]
	063 Move X1, [X9]
	064 Move W10, [X8+304]
	065 Move W9, [X1+304]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X8, [X8+200]
	068 Add X8, X8, X9
	069 NotImplemented "Instruction LDUR not yet implemented."
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X2, [X31+72]
	072 Move X4, [X31]
	073 Move X3, [X31+8]
	074 Move X0, X19
	075 Move W1, W20
	076 Move V0, V8
	077 Move V1, V9
	078 Move V2, V10
	079 Move V3, V11
	080 Move V4, V12
	081 Move V5, V13
	082 Call Crate.RPC_TakeHit, X0, X1, X2, X3, X4, X5, X6
	083 Move X20, [X31+96]
	084 Move X19, [X31+104]
	085 Move X22, [X31+80]
	086 Move X21, [X31+88]
	087 Move X30, [X31+64]
	088 Move D9, [X31+48]
	089 Move D8, [X31+56]
	090 Move D11, [X31+32]
	091 Move D10, [X31+40]
	092 Move D13, [X31+16]
	093 Move D12, [X31+24]
	094 Add X31, X31, 112
	095 Return 
	096 Move X0, X19
	097 Call 0x1C181E0
	098 Call 0x1C17F20

