Type: AnimalCompany.InventoryBag/<>c__DisplayClass26_0

Method: System.Void .ctor()

Disassembly:
	0x01D9D104 STP X31, X31, [X31 + 0x40]
	0x01D9D108 STR X31, [X31 + 0x50]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void <AnimateOpenClose>b__0(System.Single val)

Disassembly:
	0x01D9E640 CMP W8, 0x1
	0x01D9E644 B.LT 0x1D9E90C
	0x01D9E648 MOV X21, X31
	0x01D9E64C MOV W26, W31
	0x01D9E650 MOV X29, X31
	0x01D9E654 AND X8, X8, 0x0
	0x01D9E658 ADD X23, X28, 0x20
	0x01D9E65C STR X31, [X31 + 0x18]
	0x01D9E660 CMP X29, W8, UXTW
	0x01D9E664 B.CS 0x1D9EBE0
	0x01D9E668 CBZ X22, 0x1D9EBDC
	0x01D9E66C LDR X24, [X23, X29, LSL #3]
	0x01D9E670 MOV X0, X22
	0x01D9E674 MOV X1, X31
	0x01D9E678 BL 0x3C33374
	0x01D9E67C ADRP X8, 0x2358000
	0x01D9E680 LDR X8, [X8 + 0xD70]
	0x01D9E684 LDR X1, [X8]
	0x01D9E688 MOV X2, X31
	0x01D9E68C BL 0x321BA08
	0x01D9E690 MOV X25, X21
	0x01D9E694 TBZ X0, 0x0, 0x1D9E6E8
	0x01D9E698 LDRB W8, [X22 + 0x8C]
	0x01D9E69C CBZ W8, 0x1D9E6E8
	0x01D9E6A0 CBZ X24, 0x1D9EBE8
	0x01D9E6A4 LDR W8, [X24 + 0x80]
	0x01D9E6A8 CMP W8, 0x2
	0x01D9E6AC B.NE 0x1D9E870
	0x01D9E6B0 MOV X0, X24
	0x01D9E6B4 MOV X1, X31
	0x01D9E6B8 BL 0x1D880C4
	0x01D9E6BC STR X0, [X31 + 0xD8]
	0x01D9E6C0 ADD X0, X31, 0xD8
	0x01D9E6C4 MOV X1, X31
	0x01D9E6C8 BL 0x1E74DE4
	0x01D9E6CC TBNZ X0, 0x0, 0x1D9E870
	0x01D9E6D0 LDR X8, [X22 + 0x40]
	0x01D9E6D4 CBZ X8, 0x1D9E8DC
	0x01D9E6D8 LDR X8, [X8 + 0x20]
	0x01D9E6DC CBZ X8, 0x1D9E8DC
	0x01D9E6E0 LDR W1, [X8]
	0x01D9E6E4 B 0x1D9E8E0
	0x01D9E6E8 CBZ X24, 0x1D9EBE4
	0x01D9E6EC LDR W8, [X24 + 0x80]
	0x01D9E6F0 CMP W8, 0x2
	0x01D9E6F4 B.EQ 0x1D9E870
	0x01D9E6F8 MOV X0, X24
	0x01D9E6FC MOV X1, X31
	0x01D9E700 BL 0x1D881A0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x263B000
	006 Move W8, [X20+2640]
	007 Move V8, V0
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2356000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+2640], W8
	018 Move X8, [X19+16]
	019 Compare X8, 0
	020 JumpIfEqual {63}
	021 Move X9, 0x2356000
	022 Move X9, [X9+1432]
	023 Move X20, [X8+152]
	024 Move X0, [X9]
	025 Move W9, [X0+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {42}
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+8]
	040 Move V8, [X31+32]
	041 Return 
	042 Move X8, [X19+16]
	043 Compare X8, 0
	044 JumpIfEqual {63}
	045 Move X9, -19607552
	046 Move V0, [X9+260]
	047 Move X19, [X8+152]
	048 Move S1, W31
	049 Move S2, W31
	050 Multiply S0, S8, S0
	051 Move X0, X31
	052 Call Quaternion.Internal_FromEulerRad, X0
	053 Compare X19, 0
	054 JumpIfEqual {63}
	055 Move X0, X19
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+8]
	059 Move X1, X31
	060 Move V8, [X31+32]
	061 Call Transform.set_localRotation, X0, X1
	062 Return 
	063 Call 0x1C17F20

Method: System.Void <AnimateOpenClose>b__1()

Disassembly:
	0x01D9E704 TBZ X0, 0x0, 0x1D9E84C
	0x01D9E708 ADRP X8, 0x2357000
	0x01D9E70C LDR X8, [X8 + 0x7C8]
	0x01D9E710 LDR W9, [X24 + 0x80]
	0x01D9E714 LDR X0, [X8]
	0x01D9E718 LDR W8, [X0 + 0xE0]
	0x01D9E71C CBZ W9, 0x1D9E798
	0x01D9E720 CBNZ W8, 0x1D9E728
	0x01D9E724 BL 0x1C16DFC
	0x01D9E728 ADRP X8, 0x263A000
	0x01D9E72C LDRB W8, [X8 + 0x85D]
	0x01D9E730 CBNZ W8, 0x1D9E74C
	0x01D9E734 ADRP X0, 0x2357000
	0x01D9E738 LDR X0, [X0 + 0x7C8]
	0x01D9E73C BL 0x1C16CF4
	0x01D9E740 ADRP X8, 0x263A000
	0x01D9E744 MOVZ W9, 0x1
	0x01D9E748 STRB W9, [X8 + 0x85D]
	0x01D9E74C ADRP X8, 0x2357000
	0x01D9E750 LDR X8, [X8 + 0x7C8]
	0x01D9E754 LDR X0, [X8]
	0x01D9E758 LDR W8, [X0 + 0xE0]
	0x01D9E75C CBNZ W8, 0x1D9E770
	0x01D9E760 BL 0x1C16DFC
	0x01D9E764 ADRP X8, 0x2357000
	0x01D9E768 LDR X8, [X8 + 0x7C8]
	0x01D9E76C LDR X0, [X8]
	0x01D9E770 LDR X8, [X0 + 0xB8]
	0x01D9E774 LDR X9, [X31 + 0x18]
	0x01D9E778 LDR X8, [X8]
	0x01D9E77C CMP X8, 0x0
	0x01D9E780 CSEL X9, X9, X8, EQ
	0x01D9E784 CBZ X8, 0x1D9E80C
	0x01D9E788 CBZ X9, 0x1D9EBF8
	0x01D9E78C LDR X25, [X9 + 0x150]
	0x01D9E790 STR X8, [X31 + 0x18]
	0x01D9E794 B 0x1D9E810
	0x01D9E798 CBNZ W8, 0x1D9E7A0
	0x01D9E79C BL 0x1C16DFC
	0x01D9E7A0 ADRP X8, 0x263A000
	0x01D9E7A4 LDRB W8, [X8 + 0x85D]
	0x01D9E7A8 CBNZ W8, 0x1D9E7C4
	0x01D9E7AC ADRP X0, 0x2357000
	0x01D9E7B0 LDR X0, [X0 + 0x7C8]
	0x01D9E7B4 BL 0x1C16CF4
	0x01D9E7B8 ADRP X8, 0x263A000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x263B000
	005 Move W8, [X20+2641]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2356000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2641], W8
	016 Move X8, [X19+16]
	017 Compare X8, 0
	018 JumpIfEqual {60}
	019 Move X9, 0x2356000
	020 Move X9, [X9+1432]
	021 Move X20, [X8+152]
	022 Move X0, [X9]
	023 Move W9, [X0+224]
	024 Compare W9, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {39}
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return 
	039 Move X8, [X19+16]
	040 Compare X8, 0
	041 JumpIfEqual {60}
	042 Move X9, -19607552
	043 Move V0, [X19+24]
	044 Move V1, [X9+260]
	045 Move X19, [X8+152]
	046 Move S2, W31
	047 Move X0, X31
	048 Multiply S0, S0, S1
	049 Move S1, W31
	050 Call Quaternion.Internal_FromEulerRad, X0
	051 Compare X19, 0
	052 JumpIfEqual {60}
	053 Move X0, X19
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X1, X31
	057 Move X30, [X31+32]
	058 Call Transform.set_localRotation, X0, X1
	059 Return 
	060 Call 0x1C17F20

