Type: AnimalCompany.InventoryBag/<>c__DisplayClass26_0

Method: System.Void .ctor()

Disassembly:
	0x01CA9948 LDR X0, [X21]
	0x01CA994C STP X31, X31, [X31 + 0x40]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void <AnimateOpenClose>b__0(System.Single val)

Disassembly:
	0x01CAAE94 FMUL S0, S0, S3
	0x01CAAE98 MOVZ W1, 0x2
	0x01CAAE9C MOV X0, X21
	0x01CAAEA0 MOV X2, X31
	0x01CAAEA4 BL 0x3AF6FC8
	0x01CAAEA8 ADRP X21, 0x22A4000
	0x01CAAEAC LDR X21, [X21 + 0x728]
	0x01CAAEB0 LDR X8, [X21]
	0x01CAAEB4 LDR X8, [X8 + 0xB8]
	0x01CAAEB8 LDR W9, [X8 + 0x4]
	0x01CAAEBC LDRB W10, [X8 + 0x8]
	0x01CAAEC0 ADD W9, W9, 0x1
	0x01CAAEC4 STR W9, [X8 + 0x4]
	0x01CAAEC8 CBNZ W10, 0x1CAAEFC
	0x01CAAECC MOV X0, X31
	0x01CAAED0 BL 0x3AA47CC
	0x01CAAED4 ADRP X8, 0x22A4000
	0x01CAAED8 LDR X8, [X8 + 0x7B0]
	0x01CAAEDC ADD X0, X31, 0x48
	0x01CAAEE0 STR X31, [X31 + 0x48]
	0x01CAAEE4 LDR X1, [X8]
	0x01CAAEE8 BL 0x22DB23C
	0x01CAAEEC LDR X8, [X21]
	0x01CAAEF0 LDR X9, [X31 + 0x48]
	0x01CAAEF4 LDR X8, [X8 + 0xB8]
	0x01CAAEF8 STR X9, [X8 + 0x8]
	0x01CAAEFC LDR X21, [X19 + 0x40]
	0x01CAAF00 MOV X0, X19
	0x01CAAF04 MOV X1, X31
	0x01CAAF08 BL 0x3A9B084
	0x01CAAF0C CBZ X0, 0x1CAB084
	0x01CAAF10 MOV X1, X31
	0x01CAAF14 BL 0x3AA7658
	0x01CAAF18 FMOV S3, 1
	0x01CAAF1C MOV X0, X21
	0x01CAAF20 MOV X1, X31
	0x01CAAF24 BL 0x1CC181C
	0x01CAAF28 ADRP X8, 0x22A4000
	0x01CAAF2C LDR X8, [X8 + 0x7C0]
	0x01CAAF30 MOVZ W1, 0x3
	0x01CAAF34 LDR X0, [X8]
	0x01CAAF38 BL 0x1B6E868
	0x01CAAF3C MOV X19, X0
	0x01CAAF40 MOV X0, X20
	0x01CAAF44 MOV X1, X31
	0x01CAAF48 BL 0x3AA0C88
	0x01CAAF4C ADRP X8, 0x22A4000
	0x01CAAF50 ADRP X21, 0x22A4000
	0x01CAAF54 LDR X8, [X8 + 0x7E0]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x257A000
	006 Move W8, [X20+1147]
	007 Move V8, V0
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22A4000
	014 Move X0, [X0+1144]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X20+1147], W8
	018 Move X8, [X19+16]
	019 Compare X8, 0
	020 JumpIfEqual {63}
	021 Move X9, 0x22A4000
	022 Move X9, [X9+1144]
	023 Move X20, [X8+152]
	024 Move X0, [X9]
	025 Move W9, [X0+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1B6F8F8
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {42}
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+8]
	040 Move V8, [X31+32]
	041 Return 
	042 Move X8, [X19+16]
	043 Compare X8, 0
	044 JumpIfEqual {63}
	045 Move X9, -18874368
	046 Move V0, [X9+2804]
	047 Move X19, [X8+152]
	048 Move S1, W31
	049 Move S2, W31
	050 Multiply S0, S8, S0
	051 Move X0, X31
	052 Call Quaternion.Internal_FromEulerRad, X0
	053 Compare X19, 0
	054 JumpIfEqual {63}
	055 Move X0, X19
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+8]
	059 Move X1, X31
	060 Move V8, [X31+32]
	061 Call Transform.set_localRotation, X0, X1
	062 Return 
	063 Call 0x1B6FA1C

Method: System.Void <AnimateOpenClose>b__1()

Disassembly:
	0x01CAAF58 LDR X21, [X21 + 0x7C8]
	0x01CAAF5C MOV X2, X0
	0x01CAAF60 ADD X0, X31, 0x80
	0x01CAAF64 LDR X1, [X8]
	0x01CAAF68 LDR X3, [X21]
	0x01CAAF6C STP X31, X31, [X31 + 0x80]
	0x01CAAF70 BL 0x25FCCA4
	0x01CAAF74 CBZ X19, 0x1CAB084
	0x01CAAF78 LDR W8, [X19 + 0x18]
	0x01CAAF7C CBZ W8, 0x1CAB088
	0x01CAAF80 LDR V0, [X31 + 0x8]
	0x01CAAF84 ADRP X8, 0x22A4000
	0x01CAAF88 LDR X8, [X8 + 0x7B8]
	0x01CAAF8C MOVN X9, 0x0
	0x01CAAF90 STR V0, [X19 + 0x2]
	0x01CAAF94 ADD X0, X31, 0x48
	0x01CAAF98 LDR X8, [X8]
	0x01CAAF9C MOV X1, X31
	0x01CAAFA0 STP X8, X9, [X31 + 0x48]
	0x01CAAFA4 LDR W8, [X20 + 0x28]
	0x01CAAFA8 STR W8, [X31 + 0x58]
	0x01CAAFAC BL 0x321AF98
	0x01CAAFB0 ADRP X8, 0x22A4000
	0x01CAAFB4 LDR X8, [X8 + 0x7D0]
	0x01CAAFB8 LDR X3, [X21]
	0x01CAAFBC MOV X2, X0
	0x01CAAFC0 ADD X0, X31, 0x30
	0x01CAAFC4 LDR X1, [X8]
	0x01CAAFC8 STP X31, X31, [X31 + 0x30]
	0x01CAAFCC BL 0x25FCCA4
	0x01CAAFD0 LDR W8, [X19 + 0x18]
	0x01CAAFD4 CMP W8, 0x1
	0x01CAAFD8 B.LS 0x1CAB088
	0x01CAAFDC LDR V0, [X31 + 0x3]
	0x01CAAFE0 ADRP X9, 0x22A3000
	0x01CAAFE4 ADD X1, X31, 0x2C
	0x01CAAFE8 STR V0, [X19 + 0x3]
	0x01CAAFEC LDR W8, [X20 + 0x20]
	0x01CAAFF0 LDR X9, [X9 + 0x5F8]
	0x01CAAFF4 STR W8, [X31 + 0x2C]
	0x01CAAFF8 LDR X0, [X9]
	0x01CAAFFC BL 0x1B6E900
	0x01CAB000 ADRP X8, 0x22A3000
	0x01CAB004 LDR X8, [X8 + 0x7D8]
	0x01CAB008 LDR X3, [X21]
	0x01CAB00C MOV X2, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x257A000
	005 Move W8, [X20+1148]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22A4000
	012 Move X0, [X0+1144]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1148], W8
	016 Move X8, [X19+16]
	017 Compare X8, 0
	018 JumpIfEqual {60}
	019 Move X9, 0x22A4000
	020 Move X9, [X9+1144]
	021 Move X20, [X8+152]
	022 Move X0, [X9]
	023 Move W9, [X0+224]
	024 Compare W9, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1B6F8F8
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {39}
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return 
	039 Move X8, [X19+16]
	040 Compare X8, 0
	041 JumpIfEqual {60}
	042 Move X9, -18874368
	043 Move V0, [X19+24]
	044 Move V1, [X9+2804]
	045 Move X19, [X8+152]
	046 Move S2, W31
	047 Move X0, X31
	048 Multiply S0, S0, S1
	049 Move S1, W31
	050 Call Quaternion.Internal_FromEulerRad, X0
	051 Compare X19, 0
	052 JumpIfEqual {60}
	053 Move X0, X19
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X1, X31
	057 Move X30, [X31+32]
	058 Call Transform.set_localRotation, X0, X1
	059 Return 
	060 Call 0x1B6FA1C

