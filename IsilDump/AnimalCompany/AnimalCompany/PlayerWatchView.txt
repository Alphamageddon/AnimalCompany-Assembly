Type: AnimalCompany.PlayerWatchView

Method: AnimalCompany.MapView get_mapView()

Disassembly:
	0x01DCE25C LDR X30, [X31], #0x40
	0x01DCE260 RET

ISIL:
	001 Move X0, [X0+192]
	002 Return X0

Method: System.Void Update()

Disassembly:
	0x01DCE264 STR X30, [X31 - 0x30]!
	0x01DCE268 STP X22, X21, [X31 + 0x10]
	0x01DCE26C STP X20, X19, [X31 + 0x20]
	0x01DCE270 ADRP X21, 0x260A000
	0x01DCE274 ADRP X20, 0x2325000
	0x01DCE278 LDRB W8, [X21 + 0xBD1]
	0x01DCE27C LDR X20, [X20 + 0x9D0]
	0x01DCE280 MOV X19, X0
	0x01DCE284 TBNZ X8, 0x0, 0x1DCE2B4
	0x01DCE288 ADRP X0, 0x232A000
	0x01DCE28C LDR X0, [X0 + 0x348]
	0x01DCE290 BL 0x1C16CF4
	0x01DCE294 ADRP X0, 0x2325000
	0x01DCE298 LDR X0, [X0 + 0x9D0]
	0x01DCE29C BL 0x1C16CF4
	0x01DCE2A0 ADRP X0, 0x232A000
	0x01DCE2A4 LDR X0, [X0 + 0x438]
	0x01DCE2A8 BL 0x1C16CF4
	0x01DCE2AC MOVZ W8, 0x1
	0x01DCE2B0 STRB W8, [X21 + 0xBD1]
	0x01DCE2B4 MOV X0, X19
	0x01DCE2B8 MOV X1, X31
	0x01DCE2BC BL 0x3573914
	0x01DCE2C0 LDR X8, [X20]
	0x01DCE2C4 MOV X20, X0
	0x01DCE2C8 MOVZ W1, 0x1
	0x01DCE2CC MOV X0, X8
	0x01DCE2D0 BL 0x1C16D6C
	0x01DCE2D4 CBZ X0, 0x1DCE3BC
	0x01DCE2D8 LDR X22, [X19 + 0x50]
	0x01DCE2DC MOV X21, X0
	0x01DCE2E0 CBZ X22, 0x1DCE2F8
	0x01DCE2E4 LDR X8, [X21]
	0x01DCE2E8 MOV X0, X22
	0x01DCE2EC LDR X1, [X8 + 0x40]
	0x01DCE2F0 BL 0x1C16E00
	0x01DCE2F4 CBZ X0, 0x1DCE3C4
	0x01DCE2F8 LDR W8, [X21 + 0x18]
	0x01DCE2FC CBZ W8, 0x1DCE3C0
	0x01DCE300 STR X22, [X21 + 0x20]
	0x01DCE304 CBZ X20, 0x1DCE3BC
	0x01DCE308 ADRP X9, 0x232A000
	0x01DCE30C ADRP X10, 0x232A000
	0x01DCE310 LDR X8, [X20]
	0x01DCE314 LDR X9, [X9 + 0x348]
	0x01DCE318 LDR X10, [X10 + 0x438]
	0x01DCE31C LDR X1, [X9]
	0x01DCE320 LDRH W9, [X8 + 0x12E]
	0x01DCE324 LDR X22, [X10]
	0x01DCE328 CBZ X9, 0x1DCE34C
	0x01DCE32C LDR X10, [X8 + 0xB0]
	0x01DCE330 ADD X10, X10, 0x8
	0x01DCE334 LDUR X11, [X10 - 0x8]
	0x01DCE338 CMP X11, X1
	0x01DCE33C B.EQ 0x1DCE35C
	0x01DCE340 SUBS X9, X9, 0x1
	0x01DCE344 ADD X10, X10, 0x10
	0x01DCE348 B.NE 0x1DCE334
	0x01DCE34C MOVZ W2, 0x1
	0x01DCE350 MOV X0, X20
	0x01DCE354 BL 0x1C5C788
	0x01DCE358 B 0x1DCE36C
	0x01DCE35C LDR W9, [X10]
	0x01DCE360 ADD W9, W9, 0x1
	0x01DCE364 ADD X8, X8, W9, 0x4, SXTW
	0x01DCE368 ADD X0, X8, 0x138
	0x01DCE36C LDP X8, X4, [X0]
	0x01DCE370 MOVZ W1, 0x3
	0x01DCE374 MOV X0, X20
	0x01DCE378 MOV X2, X22
	0x01DCE37C MOV X3, X21
	0x01DCE380 BLR X8
	0x01DCE384 MOV X0, X19
	0x01DCE388 BL 0x1DCC610
	0x01DCE38C LDR X8, [X19 + 0x48]
	0x01DCE390 CBZ X8, 0x1DCE3A8
	0x01DCE394 LDR X9, [X8 + 0x18]
	0x01DCE398 LDR X0, [X8 + 0x40]
	0x01DCE39C LDR X2, [X8 + 0x28]
	0x01DCE3A0 MOV X1, X19
	0x01DCE3A4 BLR X9
	0x01DCE3A8 MOV X0, X19
	0x01DCE3AC LDP X20, X19, [X31 + 0x20]
	0x01DCE3B0 LDP X22, X21, [X31 + 0x10]
	0x01DCE3B4 LDR X30, [X31], #0x30
	0x01DCE3B8 B 0x1DCC7D0
	0x01DCE3BC BL 0x1C16F20

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+128], X20
	012 Move [X31+136], X19
	013 Move X20, 0x260B000
	014 Move W8, [X20+2591]
	015 Move X19, X0
	016 Compare W8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, 0x2326000
	019 Move X0, [X0+1440]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2591], W8
	023 Move X8, 0x2326000
	024 Move X8, [X8+1440]
	025 Move X8, [X8]
	026 Move X8, [X8+184]
	027 Move V0, [X8+72]
	028 Move V1, [X8+80]
	029 Move [X31+32], D0
	030 Move [X31+40], S1
	031 Move X0, [X19+136]
	032 Compare X0, 0
	033 JumpIfEqual {104}
	034 Move X1, X31
	035 Call Transform.get_parent, X0
	036 Compare X0, 0
	037 JumpIfEqual {104}
	038 Move X1, X31
	039 Call Transform.get_forward, X0
	040 NotImplemented "Instruction FNEG not yet implemented."
	041 NotImplemented "Instruction FNEG not yet implemented."
	042 NotImplemented "Instruction FNEG not yet implemented."
	043 Add X0, X31, 16
	044 Add X1, X31, 32
	045 Move X2, X31
	046 Move [X31+16], S0
	047 Move [X31+24], S1
	048 Move [X31+24], S2
	049 Call Vector3.OrthoNormalize, X0, X1
	050 Move X19, [X19+136]
	051 Compare X19, 0
	052 JumpIfEqual {104}
	053 Move X0, X19
	054 Move X1, X31
	055 Call Transform.get_rotation, X0
	056 Move S6, [X31+16]
	057 Move S4, [X31+20]
	058 Move V8, V0
	059 Move V9, V1
	060 Move V10, V2
	061 Move S0, [X31+32]
	062 Move S1, [X31+36]
	063 Move V2, [X31+40]
	064 Move V5, [X31+24]
	065 Move V11, V3
	066 Move V3, V6
	067 Move X0, X31
	068 Call Quaternion.LookRotation, X0, X1
	069 Move X0, X31
	070 Move V12, V0
	071 Move V13, V1
	072 Move V14, V2
	073 Move V15, V3
	074 Call Time.get_deltaTime
	075 Move S1, 5
	076 Multiply S0, S0, S1
	077 Move [X31], S0
	078 Move V0, V8
	079 Move V1, V9
	080 Move V2, V10
	081 Move V3, V11
	082 Move V4, V12
	083 Move V5, V13
	084 Move V6, V14
	085 Move V7, V15
	086 Move X0, X31
	087 Call Quaternion.SlerpUnclamped, X0, X1, V0
	088 Move X0, X19
	089 Move X1, X31
	090 Call Transform.set_rotation, X0, X1
	091 Move X20, [X31+128]
	092 Move X19, [X31+136]
	093 Move X30, [X31+112]
	094 Move D9, [X31+96]
	095 Move D8, [X31+104]
	096 Move D11, [X31+80]
	097 Move D10, [X31+88]
	098 Move D13, [X31+64]
	099 Move D12, [X31+72]
	100 Move D15, [X31+48]
	101 Move D14, [X31+56]
	102 Add X31, X31, 144
	103 Return 
	104 Call 0x1C17F20

Method: System.String GetMoneyText(System.Int32 amount)

Disassembly:
	0x01DCE3C0 BL 0x1C16F28
	0x01DCE3C4 BL 0x1C16F44
	0x01DCE3C8 MOV X1, X31
	0x01DCE3CC BL 0x1C16DEC
	0x01DCE3D0 STP X30, X23, [X31 - 0x30]!
	0x01DCE3D4 STP X22, X21, [X31 + 0x10]
	0x01DCE3D8 STP X20, X19, [X31 + 0x20]
	0x01DCE3DC ADRP X21, 0x260A000
	0x01DCE3E0 LDRB W8, [X21 + 0xBD2]
	0x01DCE3E4 MOV X20, X1
	0x01DCE3E8 MOV X19, X0
	0x01DCE3EC TBNZ X8, 0x0, 0x1DCE41C
	0x01DCE3F0 ADRP X0, 0x232A000
	0x01DCE3F4 LDR X0, [X0 + 0x440]
	0x01DCE3F8 BL 0x1C16CF4
	0x01DCE3FC ADRP X0, 0x232A000
	0x01DCE400 LDR X0, [X0 + 0x448]
	0x01DCE404 BL 0x1C16CF4
	0x01DCE408 ADRP X0, 0x232A000
	0x01DCE40C LDR X0, [X0 + 0x340]
	0x01DCE410 BL 0x1C16CF4
	0x01DCE414 MOVZ W8, 0x1
	0x01DCE418 STRB W8, [X21 + 0xBD2]
	0x01DCE41C LDR X21, [X19 + 0x28]
	0x01DCE420 CBZ X21, 0x1DCE4E4
	0x01DCE424 CBZ X20, 0x1DCE51C
	0x01DCE428 ADRP X23, 0x232A000
	0x01DCE42C LDR X8, [X21]
	0x01DCE430 LDR X23, [X23 + 0x340]
	0x01DCE434 LDR X22, [X20 + 0x10]
	0x01DCE438 LDRH W9, [X8 + 0x12E]
	0x01DCE43C LDR X1, [X23]
	0x01DCE440 CBZ X9, 0x1DCE464
	0x01DCE444 LDR X10, [X8 + 0xB0]
	0x01DCE448 ADD X10, X10, 0x8
	0x01DCE44C LDUR X11, [X10 - 0x8]
	0x01DCE450 CMP X11, X1
	0x01DCE454 B.EQ 0x1DCE474
	0x01DCE458 SUBS X9, X9, 0x1
	0x01DCE45C ADD X10, X10, 0x10
	0x01DCE460 B.NE 0x1DCE44C
	0x01DCE464 MOVZ W2, 0x4
	0x01DCE468 MOV X0, X21
	0x01DCE46C BL 0x1C5C788
	0x01DCE470 B 0x1DCE484
	0x01DCE474 LDR W9, [X10]
	0x01DCE478 ADD W9, W9, 0x4
	0x01DCE47C ADD X8, X8, W9, 0x4, SXTW

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x260B000
	005 Move W8, [X20+3004]
	006 Move W19, W1
	007 Move [X31+12], W1
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x232B000
	013 Move X0, [X0+960]
	014 Call 0x1C17CF4
	015 Move X0, 0x232B000
	016 Move X0, [X0+968]
	017 Call 0x1C17CF4
	018 Move X0, 0x232B000
	019 Move X0, [X0+152]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3004], W8
	023 Move W8, 0x2711
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move [X31+8], W31
	026 Move X8, 0x232B000
	027 Move X8, [X8+152]
	028 Add X0, X31, 12
	029 Move X2, X31
	030 Move X1, [X8]
	031 Call Int32.ToString, X0, X1
	032 Move X8, 0x232B000
	033 Move X8, [X8+968]
	034 Move X20, 0x232B000
	035 Move X20, [X20+960]
	036 Move W9, 0x4DD3
	037 Move X1, [X8]
	038 NotImplemented "Instruction MOVK not yet implemented."
	039 NotImplemented "Instruction UMADDL not yet implemented."
	040 Move X8, X8
	041 ShiftRight X8, 38
	042 And X8, X8, 0x7FFFFFFF
	043 Add X0, X31, 8
	044 Move X2, X31
	045 Move [X31+8], W8
	046 Call Int32.ToString, X0, X1
	047 Move X1, [X20]
	048 Move X2, X31
	049 Call String.Concat, X0, X1
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Return X0

Method: System.Void Initialize()

Disassembly:
	0x01DCB3CC STR W20, [X21 + 0x24]
	0x01DCB3D0 CBZ X21, 0x1DCB3F8
	0x01DCB3D4 MOVZ W8, 0x60
	0x01DCB3D8 STR W8, [X21 + 0xC]
	0x01DCB3DC LDR X0, [X19 + 0x38]
	0x01DCB3E0 CBZ X0, 0x1DCB3F8
	0x01DCB3E4 LDP X20, X19, [X31 + 0x10]
	0x01DCB3E8 MOV X1, X21
	0x01DCB3EC MOV X2, X31
	0x01DCB3F0 LDP X30, X21, [X31], #0x20
	0x01DCB3F4 B 0x1EA1E24
	0x01DCB3F8 BL 0x1C16F20
	0x01DCB3FC STP X30, X21, [X31 - 0x20]!
	0x01DCB400 STP X20, X19, [X31 + 0x10]
	0x01DCB404 ADRP X21, 0x260D000
	0x01DCB408 LDRB W8, [X21 + 0xBBD]
	0x01DCB40C MOV W20, W1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, W31
	004 Move X19, X0
	005 Call PlayerWatchView.SetExpandSize, X0, X1
	006 Move X0, X19
	007 Move W1, W31
	008 Call PlayerWatchView.SetLED, X0, X1
	009 Move S0, 1
	010 Move X0, X19
	011 Call PlayerWatchView.SetBatteryLevel, X0, V0
	012 Move S0, 1
	013 Move X0, X19
	014 Call PlayerWatchView.SetHPLevel, X0, V0
	015 Move S0, 1
	016 Move X0, X19
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call PlayerWatchView.SetSignalStrength, X0, V0
	020 Return 

Method: System.Void SetExpandSize(System.Boolean expand)

Disassembly:
	0x01DCC3FC FSUB S1, S9, S1
	0x01DCC400 FSUB S2, S10, S2
	0x01DCC404 FMUL S0, S0, S0
	0x01DCC408 FMUL S1, S1, S1
	0x01DCC40C FADD S0, S0, S1
	0x01DCC410 FMUL S1, S2, S2
	0x01DCC414 FADD S0, S1, S0
	0x01DCC418 FCMP S0, S11
	0x01DCC41C B.PL 0x1DCC304
	0x01DCC420 LDR X20, [X31 + 0x18]
	0x01DCC424 MOV V11.16B, V0.16B
	0x01DCC428 B 0x1DCC304
	0x01DCC42C ADRP X8, 0x232C000
	0x01DCC430 LDR X8, [X8 + 0x310]
	0x01DCC434 ADD X0, X31, 0x20
	0x01DCC438 LDR X1, [X8]
	0x01DCC43C BL 0x2BC3C60
	0x01DCC440 ADRP X22, 0x2327000
	0x01DCC444 LDR X22, [X22 + 0x598]
	0x01DCC448 LDR X21, [X19 + 0xC8]
	0x01DCC44C LDR X0, [X22]
	0x01DCC450 LDR W8, [X0 + 0xE0]
	0x01DCC454 CBNZ W8, 0x1DCC45C
	0x01DCC458 BL 0x1C16DFC
	0x01DCC45C MOV X0, X20
	0x01DCC460 MOV X1, X21
	0x01DCC464 MOV X2, X31
	0x01DCC468 BL 0x3C354F8
	0x01DCC46C TBZ X0, 0x0, 0x1DCC514
	0x01DCC470 LDR X0, [X22]
	0x01DCC474 LDR X21, [X19 + 0xC8]
	0x01DCC478 LDR W8, [X0 + 0xE0]
	0x01DCC47C CBNZ W8, 0x1DCC484
	0x01DCC480 BL 0x1C16DFC
	0x01DCC484 MOV X0, X21
	0x01DCC488 MOV X1, X31
	0x01DCC48C MOV X2, X31
	0x01DCC490 BL 0x3C354F8
	0x01DCC494 TBZ X0, 0x0, 0x1DCC4B0
	0x01DCC498 LDR X0, [X19 + 0x80]
	0x01DCC49C CBZ X0, 0x1DCC534
	0x01DCC4A0 BL 0x1DCC610
	0x01DCC4A4 LDR X0, [X19 + 0x80]
	0x01DCC4A8 CBZ X0, 0x1DCC534
	0x01DCC4AC BL 0x1DCC7D0
	0x01DCC4B0 LDR X0, [X22]
	0x01DCC4B4 LDR W8, [X0 + 0xE0]
	0x01DCC4B8 CBNZ W8, 0x1DCC4C0
	0x01DCC4BC BL 0x1C16DFC
	0x01DCC4C0 MOV X0, X20
	0x01DCC4C4 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x260D000
	006 Move W8, [X21+3005]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x232D000
	014 Move X0, [X0+776]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3005], W8
	018 Move X19, [X19+32]
	019 Move TEMP, X20
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {35}
	023 Move X20, 0x232D000
	024 Move X20, [X20+776]
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X20]
	031 Move X10, [X0+184]
	032 Add X8, X10, 80
	033 Add X9, X10, 84
	034 Add X10, X10, 88
	035 Move X20, 0x260D000
	036 Move W8, [X20+2139]
	037 Compare W8, 0
	038 JumpIfNotEqual {44}
	039 Move X0, 0x2328000
	040 Move X0, [X0+1440]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X20+2139], W8
	044 Move X8, 0x2328000
	045 Move X8, [X8+1440]
	046 Move X8, [X8]
	047 Move X10, [X8+184]
	048 Add X8, X10, 12
	049 Add X9, X10, 16
	050 Add X10, X10, 20
	051 Compare X19, 0
	052 JumpIfEqual {64}
	053 Move V0, [X8]
	054 Move V1, [X9]
	055 Move V2, [X10]
	056 Move X0, X19
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X1, X31
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Call Transform.set_localScale, X0, X1
	063 Return 
	064 Call 0x1C17F20

Method: System.Void SetChannelText(System.Int32 channel)

Disassembly:
	0x01DCCB28 LDR X8, [X21]
	0x01DCCB2C LDR X10, [X10 + 0x378]
	0x01DCCB30 LDRH W9, [X8 + 0x12E]
	0x01DCCB34 LDR X19, [X10]
	0x01DCCB38 CBZ X9, 0x1DCCB5C
	0x01DCCB3C LDR X10, [X8 + 0xB0]
	0x01DCCB40 ADD X10, X10, 0x8
	0x01DCCB44 LDUR X11, [X10 - 0x8]
	0x01DCCB48 CMP X11, X1
	0x01DCCB4C B.EQ 0x1DCCC30
	0x01DCCB50 SUBS X9, X9, 0x1
	0x01DCCB54 ADD X10, X10, 0x10
	0x01DCCB58 B.NE 0x1DCCB44
	0x01DCCB5C MOVZ W2, 0x1
	0x01DCCB60 MOV X0, X21
	0x01DCCB64 BL 0x1C5C788
	0x01DCCB68 B 0x1DCCC40
	0x01DCCB6C LDR W9, [X10]
	0x01DCCB70 ADD W9, W9, 0x1
	0x01DCCB74 ADD X8, X8, W9, 0x4, SXTW
	0x01DCCB78 ADD X0, X8, 0x138
	0x01DCCB7C LDP X8, X4, [X0]
	0x01DCCB80 MOVZ W1, 0x3
	0x01DCCB84 MOV X0, X21
	0x01DCCB88 MOV X2, X23
	0x01DCCB8C MOV X3, X22
	0x01DCCB90 BLR X8
	0x01DCCB94 ADRP X8, 0x2328000
	0x01DCCB98 LDR X8, [X8 + 0xE70]
	0x01DCCB9C LDR X0, [X8]
	0x01DCCBA0 BL 0x1C16F10
	0x01DCCBA4 ADRP X8, 0x232C000
	0x01DCCBA8 LDR X8, [X8 + 0x368]
	0x01DCCBAC MOV X1, X20
	0x01DCCBB0 MOV X3, X31
	0x01DCCBB4 MOV X21, X0
	0x01DCCBB8 LDR X2, [X8]
	0x01DCCBBC BL 0x3314368
	0x01DCCBC0 MOV X0, X19
	0x01DCCBC4 MOV X1, X21
	0x01DCCBC8 MOV X2, X31
	0x01DCCBCC BL 0x357AE1C
	0x01DCCBD0 ADRP X8, 0x232C000
	0x01DCCBD4 LDR X8, [X8 + 0x358]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x260D000
	009 Move X22, 0x2328000
	010 Move X21, 0x232C000
	011 Move W8, [X23+3006]
	012 Move X22, [X22+1880]
	013 Move X21, [X21+272]
	014 Move W20, W1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x2328000
	021 Move X0, [X0+1880]
	022 Call 0x1C17CF4
	023 Move X0, 0x232C000
	024 Move X0, [X0+272]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+3006], W8
	028 Move X0, [X22]
	029 Move X19, [X19+64]
	030 Add X1, X31, 12
	031 Move [X31+12], W20
	032 Call 0x1C17E04
	033 Move X8, [X21]
	034 Move X1, X0
	035 Move X2, X31
	036 Move X0, X8
	037 Call String.Format, X0, X1
	038 Compare X19, 0
	039 JumpIfEqual {54}
	040 Move X8, [X19]
	041 Move X1, X0
	042 Move X0, X19
	043 Move X9, [X8+1368]
	044 Move X2, [X8+1376]
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X30, [X31+16]
	051 Move X23, [X31+24]
	052 Add X31, X31, 64
	053 Return 
	054 Call 0x1C17F20

Method: System.Void SetMoneyText(System.Int32 amount)

Disassembly:
	0x01DCE5A8 MOV X0, X21
	0x01DCE5AC BL 0x1C5C6E0
	0x01DCE5B0 LDR X8, [X21 + 0x38]
	0x01DCE5B4 LDR X0, [X8 + 0x10]
	0x01DCE5B8 LDRB W8, [X0 + 0x135]
	0x01DCE5BC TBNZ X8, 0x0, 0x1DCE5C4
	0x01DCE5C0 BL 0x1C5C684
	0x01DCE5C4 LDR W8, [X0 + 0xE0]
	0x01DCE5C8 CBNZ W8, 0x1DCE5D0
	0x01DCE5CC BL 0x1C16DFC
	0x01DCE5D0 LDR X8, [X21 + 0x38]
	0x01DCE5D4 LDR X0, [X8 + 0x10]
	0x01DCE5D8 LDRB W8, [X0 + 0x135]
	0x01DCE5DC TBNZ X8, 0x0, 0x1DCE5E4
	0x01DCE5E0 BL 0x1C5C684
	0x01DCE5E4 CBZ X20, 0x1DCE6C4
	0x01DCE5E8 ADRP X9, 0x232A000
	0x01DCE5EC ADRP X11, 0x232A000
	0x01DCE5F0 LDR X9, [X9 + 0x348]
	0x01DCE5F4 LDR X10, [X0 + 0xB8]
	0x01DCE5F8 LDR X8, [X20]
	0x01DCE5FC LDR X11, [X11 + 0x450]
	0x01DCE600 ADRP X24, 0x232A000
	0x01DCE604 ADRP X23, 0x232A000
	0x01DCE608 LDR X1, [X9]
	0x01DCE60C LDR X21, [X10]
	0x01DCE610 LDRH W9, [X8 + 0x12E]
	0x01DCE614 LDR X22, [X11]
	0x01DCE618 LDR X24, [X24 + 0x408]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x260B000
	006 Move W8, [X21+3007]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2326000
	014 Move X0, [X0+2440]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3007], W8
	018 Move X20, [X20+48]
	019 Move W1, W19
	020 Call PlayerWatchView.GetMoneyText, X0, X1
	021 Compare X20, 0
	022 JumpIfEqual {37}
	023 Move X9, 0x2326000
	024 Move X8, [X20]
	025 Move X9, [X9+2440]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X3, [X8+1368]
	028 Move X9, [X9]
	029 Move X2, [X8+1376]
	030 NotImplemented "Instruction CSEL not yet implemented."
	031 Move X0, X20
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 CallNoReturn X3
	037 Call 0x1C17F20

Method: System.Void SetDisplay(AnimalCompany.PlayerWatch/WatchDisplay display)

Disassembly:
	0x01DCCCD0 BL 0x1C16CF4
	0x01DCCCD4 ADRP X0, 0x232C000
	0x01DCCCD8 LDR X0, [X0 + 0x3A0]
	0x01DCCCDC BL 0x1C16CF4
	0x01DCCCE0 ADRP X0, 0x232C000
	0x01DCCCE4 LDR X0, [X0 + 0x3A8]
	0x01DCCCE8 BL 0x1C16CF4
	0x01DCCCEC MOVZ W8, 0x1
	0x01DCCCF0 STRB W8, [X20 + 0xBD3]
	0x01DCCCF4 MOVI V0.2D, 0x0
	0x01DCCCF8 STP V0, V0, [X31 + 0x50]
	0x01DCCCFC STR V0, [X31 + 0x4]
	0x01DCCD00 LDR X8, [X19 + 0x50]
	0x01DCCD04 CBZ X8, 0x1DCCD7C
	0x01DCCD08 LDR X20, [X19 + 0x28]
	0x01DCCD0C CBZ X20, 0x1DCCE30
	0x01DCCD10 LDP V0, V1, [X8 + 0x10]
	0x01DCCD14 LDR V2, [X8 + 0x3]
	0x01DCCD18 ADD X0, X31, 0x40
	0x01DCCD1C MOV X1, X31
	0x01DCCD20 STP V0, V1, [X31 + 0x40]
	0x01DCCD24 LDP W21, W22, [X31 + 0x44]
	0x01DCCD28 STR V2, [X31 + 0x6]
	0x01DCCD2C BL 0x35679D8
	0x01DCCD30 ADRP X10, 0x232C000
	0x01DCCD34 LDR X8, [X20]
	0x01DCCD38 LDR X10, [X10 + 0x340]
	0x01DCCD3C MOV W23, W0
	0x01DCCD40 LDRH W9, [X8 + 0x12E]
	0x01DCCD44 LDR X1, [X10]
	0x01DCCD48 CBZ X9, 0x1DCCD6C
	0x01DCCD4C LDR X10, [X8 + 0xB0]
	0x01DCCD50 ADD X10, X10, 0x8
	0x01DCCD54 LDUR X11, [X10 - 0x8]
	0x01DCCD58 CMP X11, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+176]
	006 Compare X0, 0
	007 JumpIfEqual {42}
	008 Move W20, W1
	009 Move X1, X31
	010 Call Component.get_gameObject, X0
	011 Compare X0, 0
	012 JumpIfEqual {42}
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W1, W31
	015 Move X2, X31
	016 Call GameObject.SetActive, X0, X1
	017 Move X0, [X19+184]
	018 Compare X0, 0
	019 JumpIfEqual {42}
	020 Move X1, X31
	021 Call Component.get_gameObject, X0
	022 Compare X0, 0
	023 JumpIfEqual {42}
	024 Move W1, 1
	025 Move W1, 1
	026 Move X2, X31
	027 Call GameObject.SetActive, X0, X1
	028 Move X0, [X19+184]
	029 Compare X0, 0
	030 JumpIfEqual {42}
	031 Move X1, X31
	032 Call Component.get_gameObject, X0
	033 Compare X0, 0
	034 JumpIfEqual {42}
	035 Move W1, W31
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X2, X31
	039 Move X30, [X31+32]
	040 Call GameObject.SetActive, X0, X1
	041 Return 
	042 Call 0x1C17F20

Method: System.Void SetMoneyText(System.Int32 amount, System.Int32 amountPrev, System.Boolean animate)

Disassembly:
	0x01DCCBD8 LDR X0, [X8]
	0x01DCCBDC BL 0x1C16F10
	0x01DCCBE0 ADRP X8, 0x232C000
	0x01DCCBE4 LDR X8, [X8 + 0x360]
	0x01DCCBE8 MOV X1, X20
	0x01DCCBEC MOV X3, X31
	0x01DCCBF0 MOV X21, X0
	0x01DCCBF4 LDR X2, [X8]
	0x01DCCBF8 BL 0x2A6B948
	0x01DCCBFC MOV X0, X19
	0x01DCCC00 MOV X1, X21
	0x01DCCC04 MOV X2, X31
	0x01DCCC08 BL 0x357ACBC
	0x01DCCC0C MOV X0, X20
	0x01DCCC10 STR X19, [X20 + 0x50]
	0x01DCCC14 BL 0x1DCDF48
	0x01DCCC18 MOV X0, X20
	0x01DCCC1C LDP X20, X19, [X31 + 0x30]
	0x01DCCC20 LDP X22, X21, [X31 + 0x20]
	0x01DCCC24 LDP X24, X23, [X31 + 0x10]
	0x01DCCC28 LDR X30, [X31], #0x40
	0x01DCCC2C B 0x1DCCC60
	0x01DCCC30 LDR W9, [X10]
	0x01DCCC34 ADD W9, W9, 0x1
	0x01DCCC38 ADD X8, X8, W9, 0x4, SXTW
	0x01DCCC3C ADD X0, X8, 0x138
	0x01DCCC40 LDP X8, X4, [X0]
	0x01DCCC44 MOVZ W1, 0x1
	0x01DCCC48 B 0x1DCCAFC
	0x01DCCC4C BL 0x1C16F20
	0x01DCCC50 BL 0x1C16F28
	0x01DCCC54 BL 0x1C16F44
	0x01DCCC58 MOV X1, X31
	0x01DCCC5C BL 0x1C16DEC
	0x01DCCC60 SUB X31, X31, 0xA0
	0x01DCCC64 STP X30, X23, [X31 + 0x70]
	0x01DCCC68 STP X22, X21, [X31 + 0x80]
	0x01DCCC6C STP X20, X19, [X31 + 0x90]
	0x01DCCC70 ADRP X20, 0x260C000
	0x01DCCC74 LDRB W8, [X20 + 0xBD3]
	0x01DCCC78 MOV X19, X0
	0x01DCCC7C TBNZ X8, 0x0, 0x1DCCCF4
	0x01DCCC80 ADRP X0, 0x2327000
	0x01DCCC84 LDR X0, [X0 + 0x9C8]
	0x01DCCC88 BL 0x1C16CF4
	0x01DCCC8C ADRP X0, 0x232C000
	0x01DCCC90 LDR X0, [X0 + 0x340]
	0x01DCCC94 BL 0x1C16CF4
	0x01DCCC98 ADRP X0, 0x232C000
	0x01DCCC9C LDR X0, [X0 + 0x348]
	0x01DCCCA0 BL 0x1C16CF4
	0x01DCCCA4 ADRP X0, 0x2327000
	0x01DCCCA8 LDR X0, [X0 + 0x9D0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x260D000
	008 Move W8, [X23+3008]
	009 Move W22, W3
	010 Move W21, W2
	011 Move W20, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x2328000
	018 Move X0, [X0+2440]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+3008], W8
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move TEMP, X22
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {49}
	027 Move X1, [X19+200]
	028 Compare X1, 0
	029 JumpIfEqual {33}
	030 Move X0, X19
	031 Move X2, X31
	032 Call MonoBehaviour.StopCoroutine, X0, X1
	033 Move X0, X19
	034 Move W1, W20
	035 Move W2, W21
	036 Call PlayerWatchView.SetMoneyTextAnimationCoroutine, X0, X1, X2
	037 Move X1, X0
	038 Move [X19+200], X0
	039 Move X0, X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X2, X31
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Call MonoBehaviour.StartCoroutine, X0, X1
	048 Return 
	049 Move X19, [X19+48]
	050 Move W1, W20
	051 Call PlayerWatchView.GetMoneyText, X0, X1
	052 Compare X19, 0
	053 JumpIfEqual {70}
	054 Move X9, 0x2328000
	055 Move X8, [X19]
	056 Move X9, [X9+2440]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X3, [X8+1368]
	061 Move X9, [X9]
	062 Move X2, [X8+1376]
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Move X0, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X30, [X31+48]
	068 Move X23, [X31+56]
	069 CallNoReturn X3
	070 Call 0x1C17F20

Method: System.Void SetBackpackStatus(System.Boolean equipped, System.Single fillAmount)

Disassembly:
	0x01DCC748 BLR X8
	0x01DCC74C LDR X20, [X19 + 0x28]
	0x01DCC750 CBZ X20, 0x1DCC7BC
	0x01DCC754 ADRP X10, 0x232C000
	0x01DCC758 LDR X8, [X20]
	0x01DCC75C LDR X10, [X10 + 0x340]
	0x01DCC760 LDRH W9, [X8 + 0x12E]
	0x01DCC764 LDR X1, [X10]
	0x01DCC768 CBZ X9, 0x1DCC78C
	0x01DCC76C LDR X10, [X8 + 0xB0]
	0x01DCC770 ADD X10, X10, 0x8
	0x01DCC774 LDUR X11, [X10 - 0x8]
	0x01DCC778 CMP X11, X1
	0x01DCC77C B.EQ 0x1DCC79C
	0x01DCC780 SUBS X9, X9, 0x1
	0x01DCC784 ADD X10, X10, 0x10
	0x01DCC788 B.NE 0x1DCC774
	0x01DCC78C MOVZ W2, 0x3
	0x01DCC790 MOV X0, X20
	0x01DCC794 BL 0x1C5C788
	0x01DCC798 B 0x1DCC7AC
	0x01DCC79C LDR W9, [X10]
	0x01DCC7A0 ADD W9, W9, 0x3
	0x01DCC7A4 ADD X8, X8, W9, 0x4, SXTW
	0x01DCC7A8 ADD X0, X8, 0x138
	0x01DCC7AC LDP X8, X1, [X0]
	0x01DCC7B0 MOV X0, X20
	0x01DCC7B4 BLR X8
	0x01DCC7B8 STR X31, [X19 + 0x28]
	0x01DCC7BC LDP X20, X19, [X31 + 0x20]
	0x01DCC7C0 LDP X22, X21, [X31 + 0x10]
	0x01DCC7C4 LDR X30, [X31], #0x30
	0x01DCC7C8 RET
	0x01DCC7CC BL 0x1C16F20
	0x01DCC7D0 STP X30, X23, [X31 - 0x30]!
	0x01DCC7D4 STP X22, X21, [X31 + 0x10]
	0x01DCC7D8 STP X20, X19, [X31 + 0x20]
	0x01DCC7DC ADRP X20, 0x260C000
	0x01DCC7E0 LDRB W8, [X20 + 0xBD6]
	0x01DCC7E4 MOV X19, X0
	0x01DCC7E8 TBNZ X8, 0x0, 0x1DCC824
	0x01DCC7EC ADRP X0, 0x232C000
	0x01DCC7F0 LDR X0, [X0 + 0x358]
	0x01DCC7F4 BL 0x1C16CF4
	0x01DCC7F8 ADRP X0, 0x2328000
	0x01DCC7FC LDR X0, [X0 + 0xE70]
	0x01DCC800 BL 0x1C16CF4
	0x01DCC804 ADRP X0, 0x232C000
	0x01DCC808 LDR X0, [X0 + 0x360]
	0x01DCC80C BL 0x1C16CF4
	0x01DCC810 ADRP X0, 0x232C000
	0x01DCC814 LDR X0, [X0 + 0x368]
	0x01DCC818 BL 0x1C16CF4
	0x01DCC81C MOVZ W8, 0x1
	0x01DCC820 STRB W8, [X20 + 0xBD6]
	0x01DCC824 LDR X20, [X19 + 0x50]
	0x01DCC828 CBZ X20, 0x1DCC8B0

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x260D000
	008 Move X22, 0x232D000
	009 Move W8, [X20+3009]
	010 Move X22, [X22+776]
	011 Move V8, V0
	012 Move W21, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x232D000
	019 Move X0, [X0+776]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3009], W8
	023 Move X0, [X22]
	024 Move X20, [X19+112]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X22]
	030 Compare X20, 0
	031 JumpIfEqual {68}
	032 And W31, W21, 1
	033 Move W9, 44
	034 Move W10, 28
	035 Move W11, 40
	036 Move W12, 24
	037 Move W13, 36
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Move W10, 20
	040 NotImplemented "Instruction CSEL not yet implemented."
	041 Move W12, 32
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 Move W13, 16
	044 Move X8, [X0+184]
	045 NotImplemented "Instruction CSEL not yet implemented."
	046 Move X13, [X20]
	047 Move X0, X20
	048 Move V3, [X8]
	049 Move V2, [X8]
	050 Move V1, [X8]
	051 Move V0, [X8]
	052 Move X8, [X13+680]
	053 Move X1, [X13+688]
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Move X0, [X19+104]
	056 Compare X0, 0
	057 JumpIfEqual {68}
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X30, [X31+8]
	063 Move V0, V8
	064 Move X1, X31
	065 Move V8, [X31+48]
	066 Call Image.set_fillAmount, X0, V0
	067 Return 
	068 Call 0x1C17F20

Method: System.Void SetWeight(System.Single weightNormalized)

Disassembly:
	0x01DCC88C MOV X3, X31
	0x01DCC890 MOV X21, X0
	0x01DCC894 BL 0x3314368
	0x01DCC898 CBZ X20, 0x1DCC8C0
	0x01DCC89C MOV X0, X20
	0x01DCC8A0 MOV X1, X21
	0x01DCC8A4 MOV X2, X31
	0x01DCC8A8 BL 0x357AEB8
	0x01DCC8AC STR X31, [X19 + 0x50]
	0x01DCC8B0 LDP X20, X19, [X31 + 0x20]
	0x01DCC8B4 LDP X22, X21, [X31 + 0x10]
	0x01DCC8B8 LDP X30, X23, [X31], #0x30
	0x01DCC8BC RET
	0x01DCC8C0 BL 0x1C16F20
	0x01DCC8C4 STR X30, [X31 - 0x40]!
	0x01DCC8C8 STP X24, X23, [X31 + 0x10]
	0x01DCC8CC STP X22, X21, [X31 + 0x20]
	0x01DCC8D0 STP X20, X19, [X31 + 0x30]
	0x01DCC8D4 ADRP X21, 0x260C000
	0x01DCC8D8 LDRB W8, [X21 + 0xBD0]
	0x01DCC8DC MOV X19, X1
	0x01DCC8E0 MOV X20, X0
	0x01DCC8E4 TBNZ X8, 0x0, 0x1DCC95C
	0x01DCC8E8 ADRP X0, 0x232C000
	0x01DCC8EC LDR X0, [X0 + 0x358]
	0x01DCC8F0 BL 0x1C16CF4
	0x01DCC8F4 ADRP X0, 0x2328000
	0x01DCC8F8 LDR X0, [X0 + 0xE70]
	0x01DCC8FC BL 0x1C16CF4
	0x01DCC900 ADRP X0, 0x232C000
	0x01DCC904 LDR X0, [X0 + 0x348]
	0x01DCC908 BL 0x1C16CF4
	0x01DCC90C ADRP X0, 0x2327000
	0x01DCC910 LDR X0, [X0 + 0x9D0]
	0x01DCC914 BL 0x1C16CF4
	0x01DCC918 ADRP X0, 0x232C000
	0x01DCC91C LDR X0, [X0 + 0x360]
	0x01DCC920 BL 0x1C16CF4
	0x01DCC924 ADRP X0, 0x232C000
	0x01DCC928 LDR X0, [X0 + 0x368]
	0x01DCC92C BL 0x1C16CF4
	0x01DCC930 ADRP X0, 0x232C000
	0x01DCC934 LDR X0, [X0 + 0x370]
	0x01DCC938 BL 0x1C16CF4
	0x01DCC93C ADRP X0, 0x232C000
	0x01DCC940 LDR X0, [X0 + 0x378]
	0x01DCC944 BL 0x1C16CF4
	0x01DCC948 ADRP X0, 0x232C000
	0x01DCC94C LDR X0, [X0 + 0x380]
	0x01DCC950 BL 0x1C16CF4
	0x01DCC954 MOVZ W8, 0x1
	0x01DCC958 STRB W8, [X21 + 0xBD0]
	0x01DCC95C ADRP X21, 0x2327000
	0x01DCC960 ADRP X23, 0x232C000
	0x01DCC964 LDR X8, [X20 + 0x50]
	0x01DCC968 LDR X21, [X21 + 0x9D0]
	0x01DCC96C LDR X23, [X23 + 0x348]
	0x01DCC970 CBZ X8, 0x1DCCA3C
	0x01DCC974 MOV X0, X20
	0x01DCC978 MOV X1, X31
	0x01DCC97C BL 0x3573914
	0x01DCC980 LDR X8, [X21]
	0x01DCC984 MOV X21, X0
	0x01DCC988 MOVZ W1, 0x2
	0x01DCC98C MOV X0, X8
	0x01DCC990 BL 0x1C16D6C
	0x01DCC994 CBZ X0, 0x1DCCC4C
	0x01DCC998 LDR X20, [X20 + 0x50]
	0x01DCC99C MOV X22, X0
	0x01DCC9A0 CBZ X20, 0x1DCC9B8
	0x01DCC9A4 LDR X8, [X22]
	0x01DCC9A8 MOV X0, X20
	0x01DCC9AC LDR X1, [X8 + 0x40]
	0x01DCC9B0 BL 0x1C16E00
	0x01DCC9B4 CBZ X0, 0x1DCCC54
	0x01DCC9B8 LDR W8, [X22 + 0x18]
	0x01DCC9BC CBZ W8, 0x1DCCC50
	0x01DCC9C0 STR X20, [X22 + 0x20]
	0x01DCC9C4 CBZ X19, 0x1DCC9E0
	0x01DCC9C8 LDR X8, [X22]
	0x01DCC9CC MOV X0, X19
	0x01DCC9D0 LDR X1, [X8 + 0x40]
	0x01DCC9D4 BL 0x1C16E00
	0x01DCC9D8 CBZ X0, 0x1DCCC54
	0x01DCC9DC LDR W8, [X22 + 0x18]
	0x01DCC9E0 CMP W8, 0x1
	0x01DCC9E4 B.LS 0x1DCCC50
	0x01DCC9E8 STR X19, [X22 + 0x28]
	0x01DCC9EC CBZ X21, 0x1DCCC4C
	0x01DCC9F0 ADRP X10, 0x232C000
	0x01DCC9F4 LDR X8, [X21]
	0x01DCC9F8 LDR X10, [X10 + 0x370]
	0x01DCC9FC LDR X1, [X23]
	0x01DCCA00 LDRH W9, [X8 + 0x12E]
	0x01DCCA04 LDR X19, [X10]
	0x01DCCA08 CBZ X9, 0x1DCCA2C

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x260D000
	007 Move W8, [X20+3010]
	008 Move V8, V0
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x232D000
	015 Move X0, [X0+776]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3010], W8
	019 Move X0, [X19+120]
	020 Compare X0, 0
	021 JumpIfEqual {120}
	022 Move V0, V8
	023 Move X1, X31
	024 Call Image.set_fillAmount, X0, V0
	025 Move X21, 0x232D000
	026 Move X21, [X21+776]
	027 Move S0, 0.25
	028 NotImplemented "Instruction FCMP not yet implemented."
	029 Move X0, [X21]
	030 Move X20, [X19+128]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X21]
	036 Move X8, [X0+184]
	037 Move S0, 0.75
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Compare X20, 0
	040 JumpIfEqual {120}
	041 Move X9, [X20]
	042 Move S2, [X8+72]
	043 Move S3, [X8+76]
	044 Move S0, [X8+64]
	045 Move S1, [X8+68]
	046 Move X0, X20
	047 Move X8, [X9+680]
	048 Move X1, [X9+688]
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Move X0, [X19+120]
	051 Compare X0, 0
	052 JumpIfEqual {120}
	053 Move X8, [X21]
	054 Move X9, [X0]
	055 Move X8, [X8+184]
	056 Move X2, [X9+680]
	057 Move S2, [X8+72]
	058 Move S3, [X8+76]
	059 Move S0, [X8+64]
	060 Move S1, [X8+68]
	061 Move X0, [X21]
	062 Move X20, [X19+128]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {68}
	066 Call 0x1C17DFC
	067 Move X0, [X21]
	068 Compare X20, 0
	069 JumpIfEqual {120}
	070 Move X8, [X0+184]
	071 Move X9, [X20]
	072 Move X0, X20
	073 Move S2, [X8+24]
	074 Move S3, [X8+28]
	075 Move S0, [X8+16]
	076 Move S1, [X8+20]
	077 Move X8, [X9+680]
	078 Move X1, [X9+688]
	079 NotImplemented "Instruction BLR not yet implemented."
	080 Move X0, [X19+120]
	081 Compare X0, 0
	082 JumpIfEqual {120}
	083 Move X8, [X21]
	084 Move X9, [X0]
	085 Move X8, [X8+184]
	086 Move X2, [X9+680]
	087 Move S2, [X8+24]
	088 Move S3, [X8+28]
	089 Move S0, [X8+16]
	090 Move S1, [X8+20]
	091 Compare X20, 0
	092 JumpIfEqual {120}
	093 Move X9, [X20]
	094 Move S2, [X8+56]
	095 Move S3, [X8+60]
	096 Move S0, [X8+48]
	097 Move S1, [X8+52]
	098 Move X0, X20
	099 Move X8, [X9+680]
	100 Move X1, [X9+688]
	101 NotImplemented "Instruction BLR not yet implemented."
	102 Move X0, [X19+120]
	103 Compare X0, 0
	104 JumpIfEqual {120}
	105 Move X8, [X21]
	106 Move X9, [X0]
	107 Move X8, [X8+184]
	108 Move X2, [X9+680]
	109 Move S2, [X8+56]
	110 Move S3, [X8+60]
	111 Move S0, [X8+48]
	112 Move S1, [X8+52]
	113 Move X1, [X9+688]
	114 Move X20, [X31+32]
	115 Move X19, [X31+40]
	116 Move X30, [X31+16]
	117 Move X21, [X31+24]
	118 Move V8, [X31+48]
	119 CallNoReturn X2
	120 Call 0x1C17F20

Method: System.Collections.IEnumerator SetMoneyTextAnimationCoroutine(System.Int32 amount, System.Int32 amountPrev)

Disassembly:
	0x01DCE61C LDR X23, [X23 + 0x410]
	0x01DCE620 CBZ X9, 0x1DCE644
	0x01DCE624 LDR X10, [X8 + 0xB0]
	0x01DCE628 ADD X10, X10, 0x8
	0x01DCE62C LDUR X11, [X10 - 0x8]
	0x01DCE630 CMP X11, X1
	0x01DCE634 B.EQ 0x1DCE654
	0x01DCE638 SUBS X9, X9, 0x1
	0x01DCE63C ADD X10, X10, 0x10
	0x01DCE640 B.NE 0x1DCE62C
	0x01DCE644 MOVZ W2, 0x1
	0x01DCE648 MOV X0, X20
	0x01DCE64C BL 0x1C5C788
	0x01DCE650 B 0x1DCE664
	0x01DCE654 LDR W9, [X10]
	0x01DCE658 ADD W9, W9, 0x1
	0x01DCE65C ADD X8, X8, W9, 0x4, SXTW
	0x01DCE660 ADD X0, X8, 0x138
	0x01DCE664 LDP X8, X4, [X0]
	0x01DCE668 MOVZ W1, 0x3
	0x01DCE66C MOV X0, X20
	0x01DCE670 MOV X2, X22
	0x01DCE674 MOV X3, X21
	0x01DCE678 BLR X8
	0x01DCE67C MOV X0, X19
	0x01DCE680 BL 0x1DCC610
	0x01DCE684 MOV X0, X19
	0x01DCE688 BL 0x1DCC7D0
	0x01DCE68C LDR X0, [X24]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x260B000
	008 Move X23, 0x232B000
	009 Move W8, [X22+3011]
	010 Move X23, [X23+976]
	011 Move W19, W2
	012 Move W20, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x232B000
	019 Move X0, [X0+976]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3011], W8
	023 Move X0, [X23]
	024 Call 0x1C17F10
	025 Move X1, X31
	026 Move X22, X0
	027 Call Object..ctor, X0
	028 Move [X22+16], W31
	029 Move [X22+32], X21
	030 Move [X22+40], W20
	031 Move [X22+44], W19
	032 Move X0, X22
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Move X23, [X31+56]
	039 Return X0

Method: System.Void SetLED(System.Boolean isOn)

Disassembly:
	0x01DCCF78 LDR V2, [X31 + 0x6]
	0x01DCCF7C LDR X8, [X8 + 0x390]
	0x01DCCF80 MOV X21, X0
	0x01DCCF84 ADD X1, X31, 0x10
	0x01DCCF88 STP V0, V1, [X31 + 0x10]
	0x01DCCF8C LDR X0, [X8]
	0x01DCCF90 STR V2, [X31 + 0x3]
	0x01DCCF94 BL 0x1C16E04
	0x01DCCF98 CBZ X21, 0x1DCD0A4
	0x01DCCF9C MOV X22, X0
	0x01DCCFA0 CBZ X0, 0x1DCCFB8
	0x01DCCFA4 LDR X8, [X21]
	0x01DCCFA8 MOV X0, X22
	0x01DCCFAC LDR X1, [X8 + 0x40]
	0x01DCCFB0 BL 0x1C16E00
	0x01DCCFB4 CBZ X0, 0x1DCD0AC
	0x01DCCFB8 LDR W8, [X21 + 0x18]
	0x01DCCFBC CBZ W8, 0x1DCD0A8
	0x01DCCFC0 STR X22, [X21 + 0x20]
	0x01DCCFC4 ADRP X8, 0x232C000
	0x01DCCFC8 LDR V0, [X19 + 0x3]
	0x01DCCFCC LDR X8, [X8 + 0x388]
	0x01DCCFD0 ADD X1, X31, 0x0
	0x01DCCFD4 STR V0, [X31]
	0x01DCCFD8 LDR X0, [X8]
	0x01DCCFDC BL 0x1C16E04
	0x01DCCFE0 MOV X19, X0
	0x01DCCFE4 CBZ X0, 0x1DCCFFC
	0x01DCCFE8 LDR X8, [X21]
	0x01DCCFEC MOV X0, X19
	0x01DCCFF0 LDR X1, [X8 + 0x40]
	0x01DCCFF4 BL 0x1C16E00
	0x01DCCFF8 CBZ X0, 0x1DCD0AC
	0x01DCCFFC LDR W8, [X21 + 0x18]
	0x01DCD000 CMP W8, 0x1
	0x01DCD004 B.LS 0x1DCD0A8
	0x01DCD008 STR X19, [X21 + 0x28]
	0x01DCD00C CBZ X20, 0x1DCD0A4
	0x01DCD010 ADRP X9, 0x232B000
	0x01DCD014 LDR X8, [X20]
	0x01DCD018 LDR X9, [X9 + 0x348]
	0x01DCD01C ADRP X10, 0x232B000
	0x01DCD020 LDR X1, [X9]
	0x01DCD024 LDR X10, [X10 + 0x398]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x260D000
	007 Move X21, 0x232D000
	008 Move W8, [X22+3012]
	009 Move X21, [X21+776]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x232D000
	017 Move X0, [X0+776]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3012], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, [X20+40]
	027 Compare X0, 0
	028 JumpIfEqual {56}
	029 Move X1, X31
	030 Call Renderer.get_material, X0
	031 Move X8, [X21]
	032 Move X20, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Compare X20, 0
	039 JumpIfEqual {56}
	040 Move X8, [X21]
	041 And W31, W19, 1
	042 Move X0, X20
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X8, [X8+184]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move S0, W31
	049 Move S1, 1
	050 Move W1, [X8]
	051 NotImplemented "Instruction FCSEL not yet implemented."
	052 Move X2, X31
	053 Move X30, [X31+48]
	054 Call Material.SetFloat, X0, X1, V0
	055 Return 
	056 Call 0x1C17F20

Method: System.Void SetBatteryLevel(System.Single level)

Disassembly:
	0x01DCE480 ADD X0, X8, 0x138
	0x01DCE484 LDP X8, X2, [X0]
	0x01DCE488 MOV X0, X21
	0x01DCE48C MOV X1, X22
	0x01DCE490 BLR X8
	0x01DCE494 LDRB W8, [X20 + 0x18]
	0x01DCE498 CBZ W8, 0x1DCE4E4
	0x01DCE49C LDR X19, [X19 + 0x28]
	0x01DCE4A0 CBZ X19, 0x1DCE51C
	0x01DCE4A4 LDR X8, [X19]
	0x01DCE4A8 LDR X1, [X23]
	0x01DCE4AC LDRH W9, [X8 + 0x12E]
	0x01DCE4B0 CBZ X9, 0x1DCE4D4
	0x01DCE4B4 LDR X10, [X8 + 0xB0]
	0x01DCE4B8 ADD X10, X10, 0x8
	0x01DCE4BC LDUR X11, [X10 - 0x8]
	0x01DCE4C0 CMP X11, X1
	0x01DCE4C4 B.EQ 0x1DCE4F4
	0x01DCE4C8 SUBS X9, X9, 0x1
	0x01DCE4CC ADD X10, X10, 0x10
	0x01DCE4D0 B.NE 0x1DCE4BC
	0x01DCE4D4 MOVZ W2, 0x2
	0x01DCE4D8 MOV X0, X19
	0x01DCE4DC BL 0x1C5C788
	0x01DCE4E0 B 0x1DCE504
	0x01DCE4E4 LDP X20, X19, [X31 + 0x20]
	0x01DCE4E8 LDP X22, X21, [X31 + 0x10]
	0x01DCE4EC LDP X30, X23, [X31], #0x30
	0x01DCE4F0 RET
	0x01DCE4F4 LDR W9, [X10]
	0x01DCE4F8 ADD W9, W9, 0x2
	0x01DCE4FC ADD X8, X8, W9, 0x4, SXTW
	0x01DCE500 ADD X0, X8, 0x138
	0x01DCE504 LDP X2, X1, [X0]
	0x01DCE508 MOV X0, X19
	0x01DCE50C LDP X20, X19, [X31 + 0x20]
	0x01DCE510 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x260B000
	006 Move W8, [X20+3013]
	007 Move V8, V0
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x232B000
	014 Move X0, [X0+776]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+3013], W8
	018 Move X0, [X19+40]
	019 Compare X0, 0
	020 JumpIfEqual {46}
	021 Move X20, 0x232B000
	022 Move X20, [X20+776]
	023 Move X1, X31
	024 Call Renderer.get_material, X0
	025 Move X8, [X20]
	026 Move X19, X0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1C17DFC
	032 Compare X19, 0
	033 JumpIfEqual {46}
	034 Move X8, [X20]
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+8]
	039 Move X8, [X8+184]
	040 Move V0, V8
	041 Move X2, X31
	042 Move W1, [X8+4]
	043 Move V8, [X31+32]
	044 Call Material.SetFloat, X0, X1, V0
	045 Return 
	046 Call 0x1C17F20

Method: System.Void SetHPLevel(System.Single level)

Disassembly:
	0x01DCC56C B 0x1DCC59C
	0x01DCC570 B 0x1DCC59C
	0x01DCC574 B 0x1DCC59C
	0x01DCC578 B 0x1DCC59C
	0x01DCC57C B 0x1DCC59C
	0x01DCC580 B 0x1DCC59C
	0x01DCC584 B 0x1DCC59C
	0x01DCC588 B 0x1DCC59C
	0x01DCC58C B 0x1DCC59C
	0x01DCC590 B 0x1DCC59C
	0x01DCC594 B 0x1DCC59C
	0x01DCC598 B 0x1DCC59C
	0x01DCC59C MOV X21, X0
	0x01DCC5A0 CMP W1, 0x1
	0x01DCC5A4 B.NE 0x1DCC5D8
	0x01DCC5A8 MOV X0, X21
	0x01DCC5AC BL 0x3EB1AD0
	0x01DCC5B0 LDR X22, [X0]
	0x01DCC5B4 BL 0x3EB1AE0
	0x01DCC5B8 ADRP X8, 0x232C000
	0x01DCC5BC LDR X8, [X8 + 0x310]
	0x01DCC5C0 ADD X0, X31, 0x20
	0x01DCC5C4 LDR X1, [X8]
	0x01DCC5C8 BL 0x2BC3C60
	0x01DCC5CC CBZ X22, 0x1DCC440
	0x01DCC5D0 MOV X0, X22
	0x01DCC5D4 BL 0x1C16F18
	0x01DCC5D8 MOV X22, X31
	0x01DCC5DC B 0x1DCC5E4
	0x01DCC5E0 MOV X21, X0
	0x01DCC5E4 ADRP X8, 0x232C000
	0x01DCC5E8 LDR X8, [X8 + 0x310]
	0x01DCC5EC LDR X1, [X8]
	0x01DCC5F0 ADD X0, X31, 0x20
	0x01DCC5F4 BL 0x2BC3C60
	0x01DCC5F8 CBNZ X22, 0x1DCC604
	0x01DCC5FC MOV X0, X21
	0x01DCC600 BL 0x1D2C690
	0x01DCC604 MOV X0, X22
	0x01DCC608 BL 0x1C16F18
	0x01DCC60C BL 0x1990590
	0x01DCC610 STR X30, [X31 - 0x30]!
	0x01DCC614 STP X22, X21, [X31 + 0x10]
	0x01DCC618 STP X20, X19, [X31 + 0x20]
	0x01DCC61C ADRP X21, 0x260C000
	0x01DCC620 ADRP X20, 0x2327000
	0x01DCC624 LDRB W8, [X21 + 0xBD5]
	0x01DCC628 LDR X20, [X20 + 0x9C8]
	0x01DCC62C MOV X19, X0
	0x01DCC630 TBNZ X8, 0x0, 0x1DCC66C
	0x01DCC634 ADRP X0, 0x2327000
	0x01DCC638 LDR X0, [X0 + 0x9C8]
	0x01DCC63C BL 0x1C16CF4
	0x01DCC640 ADRP X0, 0x232C000
	0x01DCC644 LDR X0, [X0 + 0x340]
	0x01DCC648 BL 0x1C16CF4
	0x01DCC64C ADRP X0, 0x232C000
	0x01DCC650 LDR X0, [X0 + 0x348]
	0x01DCC654 BL 0x1C16CF4
	0x01DCC658 ADRP X0, 0x232C000
	0x01DCC65C LDR X0, [X0 + 0x350]
	0x01DCC660 BL 0x1C16CF4
	0x01DCC664 MOVZ W8, 0x1
	0x01DCC668 STRB W8, [X21 + 0xBD5]
	0x01DCC66C MOV X0, X19
	0x01DCC670 MOV X1, X31
	0x01DCC674 BL 0x3573914
	0x01DCC678 LDR X21, [X20]
	0x01DCC67C MOV X20, X0
	0x01DCC680 LDR X8, [X21 + 0x38]
	0x01DCC684 CBNZ X8, 0x1DCC694
	0x01DCC688 MOV X0, X21
	0x01DCC68C BL 0x1C5C6E0
	0x01DCC690 LDR X8, [X21 + 0x38]
	0x01DCC694 LDR X0, [X8 + 0x10]
	0x01DCC698 LDRB W8, [X0 + 0x135]
	0x01DCC69C TBNZ X8, 0x0, 0x1DCC6A4
	0x01DCC6A0 BL 0x1C5C684
	0x01DCC6A4 LDR W8, [X0 + 0xE0]
	0x01DCC6A8 CBNZ W8, 0x1DCC6B0
	0x01DCC6AC BL 0x1C16DFC
	0x01DCC6B0 LDR X8, [X21 + 0x38]
	0x01DCC6B4 LDR X0, [X8 + 0x10]
	0x01DCC6B8 LDRB W8, [X0 + 0x135]
	0x01DCC6BC TBNZ X8, 0x0, 0x1DCC6C4
	0x01DCC6C0 BL 0x1C5C684
	0x01DCC6C4 CBZ X20, 0x1DCC7CC
	0x01DCC6C8 ADRP X9, 0x232C000
	0x01DCC6CC ADRP X11, 0x232C000
	0x01DCC6D0 LDR X9, [X9 + 0x348]
	0x01DCC6D4 LDR X10, [X0 + 0xB8]
	0x01DCC6D8 LDR X8, [X20]
	0x01DCC6DC LDR X11, [X11 + 0x350]
	0x01DCC6E0 LDR X1, [X9]
	0x01DCC6E4 LDR X21, [X10]
	0x01DCC6E8 LDRH W9, [X8 + 0x12E]
	0x01DCC6EC LDR X22, [X11]
	0x01DCC6F0 CBZ X9, 0x1DCC714

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x260D000
	007 Move W8, [X20+3014]
	008 Move V8, V0
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x232D000
	015 Move X0, [X0+776]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3014], W8
	019 Move X0, [X19+88]
	020 Compare X0, 0
	021 JumpIfEqual {122}
	022 Move V0, V8
	023 Move X1, X31
	024 Call Image.set_fillAmount, X0, V0
	025 Move X8, -19795968
	026 Move V0, [X8+144]
	027 Move X21, 0x232D000
	028 Move X21, [X21+776]
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 Move X0, [X21]
	031 Move X20, [X19+88]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X21]
	037 Compare X20, 0
	038 JumpIfEqual {122}
	039 Move X8, [X0+184]
	040 Move X9, [X20]
	041 Move X0, X20
	042 Move S2, [X8+56]
	043 Move S3, [X8+60]
	044 Move S0, [X8+48]
	045 Move S1, [X8+52]
	046 Move X8, [X9+680]
	047 Move X1, [X9+688]
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X0, [X19+96]
	050 Compare X0, 0
	051 JumpIfEqual {122}
	052 Move X8, [X21]
	053 Move X9, [X0]
	054 Move X8, [X8+184]
	055 Move X2, [X9+680]
	056 Move S2, [X8+56]
	057 Move S3, [X8+60]
	058 Move S0, [X8+48]
	059 Move S1, [X8+52]
	060 Move X0, [X21]
	061 Move X20, [X19+88]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {67}
	065 Call 0x1C17DFC
	066 Move X0, [X21]
	067 Move X8, -19795968
	068 Move V0, [X8+860]
	069 Move X8, [X0+184]
	070 NotImplemented "Instruction FCMP not yet implemented."
	071 Compare X20, 0
	072 JumpIfEqual {122}
	073 Move X9, [X20]
	074 Move S2, [X8+72]
	075 Move S3, [X8+76]
	076 Move S0, [X8+64]
	077 Move S1, [X8+68]
	078 Move X0, X20
	079 Move X8, [X9+680]
	080 Move X1, [X9+688]
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Move X0, [X19+96]
	083 Compare X0, 0
	084 JumpIfEqual {122}
	085 Move X8, [X21]
	086 Move X9, [X0]
	087 Move X8, [X8+184]
	088 Move X2, [X9+680]
	089 Move S2, [X8+72]
	090 Move S3, [X8+76]
	091 Move S0, [X8+64]
	092 Move S1, [X8+68]
	093 Compare X20, 0
	094 JumpIfEqual {122}
	095 Move X9, [X20]
	096 Move S2, [X8+24]
	097 Move S3, [X8+28]
	098 Move S0, [X8+16]
	099 Move S1, [X8+20]
	100 Move X0, X20
	101 Move X8, [X9+680]
	102 Move X1, [X9+688]
	103 NotImplemented "Instruction BLR not yet implemented."
	104 Move X0, [X19+96]
	105 Compare X0, 0
	106 JumpIfEqual {122}
	107 Move X8, [X21]
	108 Move X9, [X0]
	109 Move X8, [X8+184]
	110 Move X2, [X9+680]
	111 Move S2, [X8+24]
	112 Move S3, [X8+28]
	113 Move S0, [X8+16]
	114 Move S1, [X8+20]
	115 Move X1, [X9+688]
	116 Move X20, [X31+32]
	117 Move X19, [X31+40]
	118 Move X30, [X31+16]
	119 Move X21, [X31+24]
	120 Move V8, [X31+48]
	121 CallNoReturn X2
	122 Call 0x1C17F20

Method: System.Void SetSignalStrength(System.Single level)

Disassembly:
	0x01DCE514 LDP X30, X23, [X31], #0x30
	0x01DCE518 BR X2
	0x01DCE51C BL 0x1C16F20
	0x01DCE520 STR X30, [X31 - 0x40]!
	0x01DCE524 STP X24, X23, [X31 + 0x10]
	0x01DCE528 STP X22, X21, [X31 + 0x20]
	0x01DCE52C STP X20, X19, [X31 + 0x30]
	0x01DCE530 ADRP X21, 0x260A000
	0x01DCE534 ADRP X20, 0x2325000
	0x01DCE538 LDRB W8, [X21 + 0xBD4]
	0x01DCE53C LDR X20, [X20 + 0x9C8]
	0x01DCE540 MOV X19, X0
	0x01DCE544 TBNZ X8, 0x0, 0x1DCE58C
	0x01DCE548 ADRP X0, 0x2325000
	0x01DCE54C LDR X0, [X0 + 0x9C8]
	0x01DCE550 BL 0x1C16CF4
	0x01DCE554 ADRP X0, 0x232A000
	0x01DCE558 LDR X0, [X0 + 0x408]
	0x01DCE55C BL 0x1C16CF4
	0x01DCE560 ADRP X0, 0x232A000
	0x01DCE564 LDR X0, [X0 + 0x348]
	0x01DCE568 BL 0x1C16CF4
	0x01DCE56C ADRP X0, 0x232A000
	0x01DCE570 LDR X0, [X0 + 0x410]
	0x01DCE574 BL 0x1C16CF4
	0x01DCE578 ADRP X0, 0x232A000
	0x01DCE57C LDR X0, [X0 + 0x450]
	0x01DCE580 BL 0x1C16CF4
	0x01DCE584 MOVZ W8, 0x1
	0x01DCE588 STRB W8, [X21 + 0xBD4]
	0x01DCE58C MOV X0, X19
	0x01DCE590 MOV X1, X31
	0x01DCE594 BL 0x3573914
	0x01DCE598 LDR X21, [X20]
	0x01DCE59C MOV X20, X0
	0x01DCE5A0 LDR X8, [X21 + 0x38]
	0x01DCE5A4 CBNZ X8, 0x1DCE5B4

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x260B000
	006 Move W8, [X20+3015]
	007 Move V8, V0
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x232B000
	014 Move X0, [X0+776]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+3015], W8
	018 Move X0, [X19+40]
	019 Compare X0, 0
	020 JumpIfEqual {46}
	021 Move X20, 0x232B000
	022 Move X20, [X20+776]
	023 Move X1, X31
	024 Call Renderer.get_material, X0
	025 Move X8, [X20]
	026 Move X19, X0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1C17DFC
	032 Compare X19, 0
	033 JumpIfEqual {46}
	034 Move X8, [X20]
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+8]
	039 Move X8, [X8+184]
	040 Move V0, V8
	041 Move X2, X31
	042 Move W1, [X8+12]
	043 Move V8, [X31+32]
	044 Call Material.SetFloat, X0, X1, V0
	045 Return 
	046 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DCE6B8 MOV X1, X31
	0x01DCE6BC LDR X30, [X31], #0x40
	0x01DCE6C0 B 0x3BFB568
	0x01DCE6C4 BL 0x1C16F20
	0x01DCE6C8 STR X30, [X31 - 0x30]!
	0x01DCE6CC STP X22, X21, [X31 + 0x10]
	0x01DCE6D0 STP X20, X19, [X31 + 0x20]
	0x01DCE6D4 ADRP X20, 0x260A000
	0x01DCE6D8 LDRB W8, [X20 + 0xBD7]
	0x01DCE6DC MOV X19, X0
	0x01DCE6E0 TBNZ X8, 0x0, 0x1DCE71C
	0x01DCE6E4 ADRP X0, 0x2325000
	0x01DCE6E8 LDR X0, [X0 + 0x9C8]
	0x01DCE6EC BL 0x1C16CF4
	0x01DCE6F0 ADRP X0, 0x232A000
	0x01DCE6F4 LDR X0, [X0 + 0x340]
	0x01DCE6F8 BL 0x1C16CF4
	0x01DCE6FC ADRP X0, 0x232A000
	0x01DCE700 LDR X0, [X0 + 0x348]
	0x01DCE704 BL 0x1C16CF4
	0x01DCE708 ADRP X0, 0x232A000
	0x01DCE70C LDR X0, [X0 + 0x458]
	0x01DCE710 BL 0x1C16CF4
	0x01DCE714 MOVZ W8, 0x1
	0x01DCE718 STRB W8, [X20 + 0xBD7]
	0x01DCE71C ADD X0, X19, 0x58
	0x01DCE720 MOV W1, W31
	0x01DCE724 MOV X2, X31
	0x01DCE728 BL 0x33E9064
	0x01DCE72C CBZ W0, 0x1DCE830
	0x01DCE730 ADRP X20, 0x2325000
	0x01DCE734 LDR X20, [X20 + 0x9C8]
	0x01DCE738 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x260B000
	006 Move X21, 0x2329000
	007 Move W8, [X20+3016]
	008 Move X21, [X21+3120]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2329000
	015 Move X0, [X0+3120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3016], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X8, -19804160
	022 Move V0, [X8+780]
	023 Move X1, X31
	024 Move X20, X0
	025 Call WaitForSeconds..ctor, X0, V0
	026 Move [X19+208], X20
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move S0, 1
	030 Move X1, X31
	031 Move X20, X0
	032 Call WaitForSeconds..ctor, X0, V0
	033 Move [X19+216], X20
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X1, X31
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call MonoBehaviour..ctor, X0
	041 Return 

Method: System.Void .cctor()

Disassembly:
	0x01DCE73C MOV X1, X31
	0x01DCE740 BL 0x3573914
	0x01DCE744 LDR X21, [X20]
	0x01DCE748 MOV X20, X0
	0x01DCE74C LDR X8, [X21 + 0x38]
	0x01DCE750 CBNZ X8, 0x1DCE760
	0x01DCE754 MOV X0, X21
	0x01DCE758 BL 0x1C5C6E0
	0x01DCE75C LDR X8, [X21 + 0x38]
	0x01DCE760 LDR X0, [X8 + 0x10]
	0x01DCE764 LDRB W8, [X0 + 0x135]
	0x01DCE768 TBNZ X8, 0x0, 0x1DCE770
	0x01DCE76C BL 0x1C5C684
	0x01DCE770 LDR W8, [X0 + 0xE0]
	0x01DCE774 CBNZ W8, 0x1DCE77C
	0x01DCE778 BL 0x1C16DFC
	0x01DCE77C LDR X8, [X21 + 0x38]
	0x01DCE780 LDR X0, [X8 + 0x10]
	0x01DCE784 LDRB W8, [X0 + 0x135]
	0x01DCE788 TBNZ X8, 0x0, 0x1DCE790
	0x01DCE78C BL 0x1C5C684
	0x01DCE790 CBZ X20, 0x1DCE8B8
	0x01DCE794 ADRP X9, 0x232A000
	0x01DCE798 ADRP X11, 0x232A000
	0x01DCE79C LDR X9, [X9 + 0x348]
	0x01DCE7A0 LDR X10, [X0 + 0xB8]
	0x01DCE7A4 LDR X8, [X20]
	0x01DCE7A8 LDR X11, [X11 + 0x458]
	0x01DCE7AC LDR X1, [X9]
	0x01DCE7B0 LDR X21, [X10]
	0x01DCE7B4 LDRH W9, [X8 + 0x12E]
	0x01DCE7B8 LDR X22, [X11]
	0x01DCE7BC CBZ X9, 0x1DCE7E0
	0x01DCE7C0 LDR X10, [X8 + 0xB0]
	0x01DCE7C4 ADD X10, X10, 0x8
	0x01DCE7C8 LDUR X11, [X10 - 0x8]
	0x01DCE7CC CMP X11, X1
	0x01DCE7D0 B.EQ 0x1DCE7F0
	0x01DCE7D4 SUBS X9, X9, 0x1
	0x01DCE7D8 ADD X10, X10, 0x10
	0x01DCE7DC B.NE 0x1DCE7C8
	0x01DCE7E0 MOVZ W2, 0x1
	0x01DCE7E4 MOV X0, X20
	0x01DCE7E8 BL 0x1C5C788
	0x01DCE7EC B 0x1DCE800
	0x01DCE7F0 LDR W9, [X10]
	0x01DCE7F4 ADD W9, W9, 0x1
	0x01DCE7F8 ADD X8, X8, W9, 0x4, SXTW
	0x01DCE7FC ADD X0, X8, 0x138
	0x01DCE800 LDP X8, X4, [X0]
	0x01DCE804 MOVZ W1, 0x3
	0x01DCE808 MOV X0, X20
	0x01DCE80C MOV X2, X22
	0x01DCE810 MOV X3, X21
	0x01DCE814 BLR X8
	0x01DCE818 MOV X0, X19
	0x01DCE81C BL 0x1DCC610
	0x01DCE820 MOV X0, X19
	0x01DCE824 BL 0x1DCDF48
	0x01DCE828 MOV X0, X19
	0x01DCE82C BL 0x1DCCC60
	0x01DCE830 LDR X19, [X19 + 0x28]
	0x01DCE834 CBZ X19, 0x1DCE880
	0x01DCE838 ADRP X10, 0x232A000
	0x01DCE83C LDR X8, [X19]
	0x01DCE840 LDR X10, [X10 + 0x340]
	0x01DCE844 LDRH W9, [X8 + 0x12E]
	0x01DCE848 LDR X1, [X10]
	0x01DCE84C CBZ X9, 0x1DCE870
	0x01DCE850 LDR X10, [X8 + 0xB0]
	0x01DCE854 ADD X10, X10, 0x8
	0x01DCE858 LDUR X11, [X10 - 0x8]
	0x01DCE85C CMP X11, X1
	0x01DCE860 B.EQ 0x1DCE890
	0x01DCE864 SUBS X9, X9, 0x1
	0x01DCE868 ADD X10, X10, 0x10
	0x01DCE86C B.NE 0x1DCE858
	0x01DCE870 MOVZ W2, 0x5
	0x01DCE874 MOV X0, X19
	0x01DCE878 BL 0x1C5C788
	0x01DCE87C B 0x1DCE8A0
	0x01DCE880 LDP X20, X19, [X31 + 0x20]
	0x01DCE884 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x260B000
	009 Move X24, 0x232B000
	010 Move X19, 0x232B000
	011 Move X22, 0x232B000
	012 Move X21, 0x232B000
	013 Move X20, 0x232B000
	014 Move W8, [X23+3017]
	015 Move X24, [X24+984]
	016 Move X19, [X19+776]
	017 Move X22, [X22+992]
	018 Move X21, [X21+1000]
	019 Move X20, [X20+1008]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {41}
	024 Move X0, 0x232B000
	025 Move X0, [X0+776]
	026 Call 0x1C17CF4
	027 Move X0, 0x232B000
	028 Move X0, [X0+984]
	029 Call 0x1C17CF4
	030 Move X0, 0x232B000
	031 Move X0, [X0+1008]
	032 Call 0x1C17CF4
	033 Move X0, 0x232B000
	034 Move X0, [X0+1000]
	035 Call 0x1C17CF4
	036 Move X0, 0x232B000
	037 Move X0, [X0+992]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X23+3017], W8
	041 Move X0, [X24]
	042 Move X1, X31
	043 Call Shader.PropertyToID, X0
	044 Move X8, [X19]
	045 Move X1, X31
	046 Move X8, [X8+184]
	047 Move [X8], W0
	048 Move X0, [X22]
	049 Call Shader.PropertyToID, X0
	050 Move X8, [X19]
	051 Move X1, X31
	052 Move X8, [X8+184]
	053 Move [X8+4], W0
	054 Move X0, [X21]
	055 Call Shader.PropertyToID, X0
	056 Move X8, [X19]
	057 Move X1, X31
	058 Move X8, [X8+184]
	059 Move [X8+8], W0
	060 Move X0, [X20]
	061 Call Shader.PropertyToID, X0
	062 Move X8, [X19]
	063 Move X9, -19804160
	064 Move V0, [X9+252]
	065 Move X10, -19804160
	066 Move X9, [X8+184]
	067 Move X20, [X31+48]
	068 Move X19, [X31+56]
	069 Move X22, [X31+32]
	070 Move X21, [X31+40]
	071 Move X24, [X31+16]
	072 Move X23, [X31+24]
	073 Move [X9+1], V0
	074 Move [X9+12], W0
	075 Move V0, [X10+98]
	076 Move X9, [X8+184]
	077 Move X10, -19804160
	078 Move [X9+2], V0
	079 Move V0, [X10+190]
	080 Move X9, [X8+184]
	081 Move X10, -19800064
	082 Move [X9+3], V0
	083 Move V0, [X10+189]
	084 Move X9, [X8+184]
	085 Move [X9+4], V0
	086 Move X8, [X8+184]
	087 NotImplemented "Instruction MOVI not yet implemented."
	088 Move W9, 0x40000000
	089 Move [X8+80], D0
	090 Move [X8+88], W9
	091 Move X30, [X31+64]
	092 Return 

