Type: AnimalCompany.PlayerWatchView

Method: AnimalCompany.MapView get_mapView()

Disassembly:
	0x01CCAA80 STP X22, X21, [X31 + 0x10]
	0x01CCAA84 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move X0, [X0+184]
	002 Return X0

Method: System.Void Update()

Disassembly:
	0x01CCAA88 ADRP X21, 0x2559000
	0x01CCAA8C ADRP X20, 0x2283000
	0x01CCAA90 LDRB W8, [X21 + 0x580]
	0x01CCAA94 LDR X20, [X20 + 0x860]
	0x01CCAA98 MOV X19, X0
	0x01CCAA9C TBNZ X8, 0x0, 0x1CCAACC
	0x01CCAAA0 ADRP X0, 0x2285000
	0x01CCAAA4 LDR X0, [X0 + 0x558]
	0x01CCAAA8 BL 0x1B6E7F0
	0x01CCAAAC ADRP X0, 0x2283000
	0x01CCAAB0 LDR X0, [X0 + 0x860]
	0x01CCAAB4 BL 0x1B6E7F0
	0x01CCAAB8 ADRP X0, 0x2285000
	0x01CCAABC LDR X0, [X0 + 0x650]
	0x01CCAAC0 BL 0x1B6E7F0
	0x01CCAAC4 MOVZ W8, 0x1
	0x01CCAAC8 STRB W8, [X21 + 0x580]
	0x01CCAACC MOV X0, X19
	0x01CCAAD0 MOV X1, X31
	0x01CCAAD4 BL 0x33DD3DC
	0x01CCAAD8 LDR X8, [X20]
	0x01CCAADC MOV X20, X0
	0x01CCAAE0 MOVZ W1, 0x1
	0x01CCAAE4 MOV X0, X8
	0x01CCAAE8 BL 0x1B6E868
	0x01CCAAEC CBZ X0, 0x1CCABD4
	0x01CCAAF0 LDR X22, [X19 + 0x50]
	0x01CCAAF4 MOV X21, X0
	0x01CCAAF8 CBZ X22, 0x1CCAB10
	0x01CCAAFC LDR X8, [X21]
	0x01CCAB00 MOV X0, X22
	0x01CCAB04 LDR X1, [X8 + 0x40]
	0x01CCAB08 BL 0x1B6E8FC
	0x01CCAB0C CBZ X0, 0x1CCABDC
	0x01CCAB10 LDR W8, [X21 + 0x18]
	0x01CCAB14 CBZ W8, 0x1CCABD8
	0x01CCAB18 STR X22, [X21 + 0x20]
	0x01CCAB1C CBZ X20, 0x1CCABD4
	0x01CCAB20 ADRP X9, 0x2285000
	0x01CCAB24 ADRP X10, 0x2285000
	0x01CCAB28 LDR X8, [X20]
	0x01CCAB2C LDR X9, [X9 + 0x558]
	0x01CCAB30 LDR X10, [X10 + 0x650]
	0x01CCAB34 LDR X1, [X9]
	0x01CCAB38 LDRH W9, [X8 + 0x12E]
	0x01CCAB3C LDR X22, [X10]
	0x01CCAB40 CBZ X9, 0x1CCAB64
	0x01CCAB44 LDR X10, [X8 + 0xB0]
	0x01CCAB48 ADD X10, X10, 0x8
	0x01CCAB4C LDUR X11, [X10 - 0x8]
	0x01CCAB50 CMP X11, X1
	0x01CCAB54 B.EQ 0x1CCAB74
	0x01CCAB58 SUBS X9, X9, 0x1
	0x01CCAB5C ADD X10, X10, 0x10
	0x01CCAB60 B.NE 0x1CCAB4C
	0x01CCAB64 MOVZ W2, 0x1
	0x01CCAB68 MOV X0, X20
	0x01CCAB6C BL 0x1BB4284
	0x01CCAB70 B 0x1CCAB84
	0x01CCAB74 LDR W9, [X10]
	0x01CCAB78 ADD W9, W9, 0x1
	0x01CCAB7C ADD X8, X8, W9, 0x4, SXTW
	0x01CCAB80 ADD X0, X8, 0x138
	0x01CCAB84 LDP X8, X4, [X0]
	0x01CCAB88 MOVZ W1, 0x3
	0x01CCAB8C MOV X0, X20
	0x01CCAB90 MOV X2, X22
	0x01CCAB94 MOV X3, X21
	0x01CCAB98 BLR X8
	0x01CCAB9C MOV X0, X19
	0x01CCABA0 BL 0x1CC8E28
	0x01CCABA4 LDR X8, [X19 + 0x48]
	0x01CCABA8 CBZ X8, 0x1CCABC0
	0x01CCABAC LDR X9, [X8 + 0x18]
	0x01CCABB0 LDR X0, [X8 + 0x40]
	0x01CCABB4 LDR X2, [X8 + 0x28]
	0x01CCABB8 MOV X1, X19
	0x01CCABBC BLR X9
	0x01CCABC0 MOV X0, X19
	0x01CCABC4 LDP X20, X19, [X31 + 0x20]
	0x01CCABC8 LDP X22, X21, [X31 + 0x10]
	0x01CCABCC LDR X30, [X31], #0x30
	0x01CCABD0 B 0x1CC8FE8
	0x01CCABD4 BL 0x1B6EA1C
	0x01CCABD8 BL 0x1B6EA24
	0x01CCABDC BL 0x1B6EA40
	0x01CCABE0 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+128], X20
	012 Move [X31+136], X19
	013 Move X20, 0x255A000
	014 Move W8, [X20+1295]
	015 Move X19, X0
	016 Compare W8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, 0x2284000
	019 Move X0, [X0+1152]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X20+1295], W8
	023 Move X8, 0x2284000
	024 Move X8, [X8+1152]
	025 Move X8, [X8]
	026 Move X8, [X8+184]
	027 Move V0, [X8+72]
	028 Move V1, [X8+80]
	029 Move [X31+32], D0
	030 Move [X31+40], S1
	031 Move X0, [X19+128]
	032 Compare X0, 0
	033 JumpIfEqual {104}
	034 Move X1, X31
	035 Call Transform.get_parent, X0
	036 Compare X0, 0
	037 JumpIfEqual {104}
	038 Move X1, X31
	039 Call Transform.get_forward, X0
	040 NotImplemented "Instruction FNEG not yet implemented."
	041 NotImplemented "Instruction FNEG not yet implemented."
	042 NotImplemented "Instruction FNEG not yet implemented."
	043 Add X0, X31, 16
	044 Add X1, X31, 32
	045 Move X2, X31
	046 Move [X31+16], S0
	047 Move [X31+24], S1
	048 Move [X31+24], S2
	049 Call Vector3.OrthoNormalize, X0, X1
	050 Move X19, [X19+128]
	051 Compare X19, 0
	052 JumpIfEqual {104}
	053 Move X0, X19
	054 Move X1, X31
	055 Call Transform.get_rotation, X0
	056 Move S6, [X31+16]
	057 Move S4, [X31+20]
	058 Move V8, V0
	059 Move V9, V1
	060 Move V10, V2
	061 Move S0, [X31+32]
	062 Move S1, [X31+36]
	063 Move V2, [X31+40]
	064 Move V5, [X31+24]
	065 Move V11, V3
	066 Move V3, V6
	067 Move X0, X31
	068 Call Quaternion.LookRotation, X0, X1
	069 Move X0, X31
	070 Move V12, V0
	071 Move V13, V1
	072 Move V14, V2
	073 Move V15, V3
	074 Call Time.get_deltaTime
	075 Move S1, 5
	076 Multiply S0, S0, S1
	077 Move [X31], S0
	078 Move V0, V8
	079 Move V1, V9
	080 Move V2, V10
	081 Move V3, V11
	082 Move V4, V12
	083 Move V5, V13
	084 Move V6, V14
	085 Move V7, V15
	086 Move X0, X31
	087 Call Quaternion.SlerpUnclamped, X0, X1, V0
	088 Move X0, X19
	089 Move X1, X31
	090 Call Transform.set_rotation, X0, X1
	091 Move X20, [X31+128]
	092 Move X19, [X31+136]
	093 Move X30, [X31+112]
	094 Move D9, [X31+96]
	095 Move D8, [X31+104]
	096 Move D11, [X31+80]
	097 Move D10, [X31+88]
	098 Move D13, [X31+64]
	099 Move D12, [X31+72]
	100 Move D15, [X31+48]
	101 Move D14, [X31+56]
	102 Add X31, X31, 144
	103 Return 
	104 Call 0x1B6FA1C

Method: System.String GetMoneyText(System.Int32 amount)

Disassembly:
	0x01CCABE4 BL 0x1B6E8E8
	0x01CCABE8 STP X30, X23, [X31 - 0x30]!
	0x01CCABEC STP X22, X21, [X31 + 0x10]
	0x01CCABF0 STP X20, X19, [X31 + 0x20]
	0x01CCABF4 ADRP X21, 0x2559000
	0x01CCABF8 LDRB W8, [X21 + 0x581]
	0x01CCABFC MOV X20, X1
	0x01CCAC00 MOV X19, X0
	0x01CCAC04 TBNZ X8, 0x0, 0x1CCAC34
	0x01CCAC08 ADRP X0, 0x2285000
	0x01CCAC0C LDR X0, [X0 + 0x658]
	0x01CCAC10 BL 0x1B6E7F0
	0x01CCAC14 ADRP X0, 0x2285000
	0x01CCAC18 LDR X0, [X0 + 0x660]
	0x01CCAC1C BL 0x1B6E7F0
	0x01CCAC20 ADRP X0, 0x2285000
	0x01CCAC24 LDR X0, [X0 + 0x550]
	0x01CCAC28 BL 0x1B6E7F0
	0x01CCAC2C MOVZ W8, 0x1
	0x01CCAC30 STRB W8, [X21 + 0x581]
	0x01CCAC34 LDR X21, [X19 + 0x28]
	0x01CCAC38 CBZ X21, 0x1CCACFC
	0x01CCAC3C CBZ X20, 0x1CCAD34
	0x01CCAC40 ADRP X23, 0x2285000
	0x01CCAC44 LDR X8, [X21]
	0x01CCAC48 LDR X23, [X23 + 0x550]
	0x01CCAC4C LDR X22, [X20 + 0x10]
	0x01CCAC50 LDRH W9, [X8 + 0x12E]
	0x01CCAC54 LDR X1, [X23]
	0x01CCAC58 CBZ X9, 0x1CCAC7C
	0x01CCAC5C LDR X10, [X8 + 0xB0]
	0x01CCAC60 ADD X10, X10, 0x8
	0x01CCAC64 LDUR X11, [X10 - 0x8]
	0x01CCAC68 CMP X11, X1
	0x01CCAC6C B.EQ 0x1CCAC8C
	0x01CCAC70 SUBS X9, X9, 0x1
	0x01CCAC74 ADD X10, X10, 0x10
	0x01CCAC78 B.NE 0x1CCAC64
	0x01CCAC7C MOVZ W2, 0x4
	0x01CCAC80 MOV X0, X21
	0x01CCAC84 BL 0x1BB4284
	0x01CCAC88 B 0x1CCAC9C
	0x01CCAC8C LDR W9, [X10]
	0x01CCAC90 ADD W9, W9, 0x4
	0x01CCAC94 ADD X8, X8, W9, 0x4, SXTW
	0x01CCAC98 ADD X0, X8, 0x138
	0x01CCAC9C LDP X8, X2, [X0]
	0x01CCACA0 MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x255A000
	005 Move W8, [X20+1387]
	006 Move W19, W1
	007 Move [X31+12], W1
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x2286000
	013 Move X0, [X0+1488]
	014 Call 0x1B6F7F0
	015 Move X0, 0x2286000
	016 Move X0, [X0+1496]
	017 Call 0x1B6F7F0
	018 Move X0, 0x2286000
	019 Move X0, [X0+816]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X20+1387], W8
	023 Move W8, 0x2711
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move [X31+8], W31
	026 Move X8, 0x2286000
	027 Move X8, [X8+816]
	028 Add X0, X31, 12
	029 Move X2, X31
	030 Move X1, [X8]
	031 Call Int32.ToString, X0, X1
	032 Move X8, 0x2286000
	033 Move X8, [X8+1496]
	034 Move X20, 0x2286000
	035 Move X20, [X20+1488]
	036 Move W9, 0x4DD3
	037 Move X1, [X8]
	038 NotImplemented "Instruction MOVK not yet implemented."
	039 NotImplemented "Instruction UMADDL not yet implemented."
	040 Move X8, X8
	041 ShiftRight X8, 38
	042 And X8, X8, 0x7FFFFFFF
	043 Add X0, X31, 8
	044 Move X2, X31
	045 Move [X31+8], W8
	046 Call Int32.ToString, X0, X1
	047 Move X1, [X20]
	048 Move X2, X31
	049 Call String.Concat, X0, X1
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Return X0

Method: System.Void Initialize()

Disassembly:
	0x01CC7BEC MOV X3, X31
	0x01CC7BF0 BL 0x1DA8258
	0x01CC7BF4 STUR X0, [X21 + 0x1C]
	0x01CC7BF8 STR W20, [X21 + 0x24]
	0x01CC7BFC CBZ X21, 0x1CC7C24
	0x01CC7C00 MOVZ W8, 0x60
	0x01CC7C04 STR W8, [X21 + 0xC]
	0x01CC7C08 LDR X0, [X19 + 0x38]
	0x01CC7C0C CBZ X0, 0x1CC7C24
	0x01CC7C10 LDP X20, X19, [X31 + 0x10]
	0x01CC7C14 MOV X1, X21
	0x01CC7C18 MOV X2, X31
	0x01CC7C1C LDP X30, X21, [X31], #0x20
	0x01CC7C20 B 0x1D8A710
	0x01CC7C24 BL 0x1B6EA1C
	0x01CC7C28 STP X30, X21, [X31 - 0x20]!
	0x01CC7C2C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, W31
	004 Move X19, X0
	005 Call PlayerWatchView.SetExpandSize, X0, X1
	006 Move X0, X19
	007 Move W1, W31
	008 Call PlayerWatchView.SetLED, X0, X1
	009 Move S0, 1
	010 Move X0, X19
	011 Call PlayerWatchView.SetBatteryLevel, X0, V0
	012 Move S0, 1
	013 Move X0, X19
	014 Call PlayerWatchView.SetHPLevel, X0, V0
	015 Move S0, 1
	016 Move X0, X19
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call PlayerWatchView.SetSignalStrength, X0, V0
	020 Return 

Method: System.Void SetExpandSize(System.Boolean expand)

Disassembly:
	0x01CC8C28 FMUL S0, S0, S0
	0x01CC8C2C FMUL S1, S1, S1
	0x01CC8C30 FADD S0, S0, S1
	0x01CC8C34 FMUL S1, S2, S2
	0x01CC8C38 FADD S0, S1, S0
	0x01CC8C3C FCMP S0, S11
	0x01CC8C40 B.PL 0x1CC8B3C
	0x01CC8C44 LDR X20, [X31 + 0x18]
	0x01CC8C48 MOV V11.16B, V0.16B
	0x01CC8C4C B 0x1CC8B3C
	0x01CC8C50 ADRP X8, 0x2287000
	0x01CC8C54 LDR X8, [X8 + 0x520]
	0x01CC8C58 ADD X0, X31, 0x20
	0x01CC8C5C LDR X1, [X8]
	0x01CC8C60 BL 0x2A14840
	0x01CC8C64 ADRP X22, 0x2285000
	0x01CC8C68 LDR X22, [X22 + 0x478]
	0x01CC8C6C LDR X21, [X19 + 0xC8]
	0x01CC8C70 LDR X0, [X22]
	0x01CC8C74 LDR W8, [X0 + 0xE0]
	0x01CC8C78 CBNZ W8, 0x1CC8C80
	0x01CC8C7C BL 0x1B6E8F8
	0x01CC8C80 MOV X0, X20
	0x01CC8C84 MOV X1, X21
	0x01CC8C88 MOV X2, X31
	0x01CC8C8C BL 0x3A9D6EC
	0x01CC8C90 TBZ X0, 0x0, 0x1CC8D38
	0x01CC8C94 LDR X0, [X22]
	0x01CC8C98 LDR X21, [X19 + 0xC8]
	0x01CC8C9C LDR W8, [X0 + 0xE0]
	0x01CC8CA0 CBNZ W8, 0x1CC8CA8
	0x01CC8CA4 BL 0x1B6E8F8
	0x01CC8CA8 MOV X0, X21
	0x01CC8CAC MOV X1, X31
	0x01CC8CB0 MOV X2, X31
	0x01CC8CB4 BL 0x3A9D6EC
	0x01CC8CB8 TBZ X0, 0x0, 0x1CC8CD4
	0x01CC8CBC LDR X0, [X19 + 0x88]
	0x01CC8CC0 CBZ X0, 0x1CC8D58
	0x01CC8CC4 BL 0x1CC8E28
	0x01CC8CC8 LDR X0, [X19 + 0x88]
	0x01CC8CCC CBZ X0, 0x1CC8D58
	0x01CC8CD0 BL 0x1CC8FE8
	0x01CC8CD4 LDR X0, [X22]
	0x01CC8CD8 LDR W8, [X0 + 0xE0]
	0x01CC8CDC CBNZ W8, 0x1CC8CE4
	0x01CC8CE0 BL 0x1B6E8F8
	0x01CC8CE4 MOV X0, X20
	0x01CC8CE8 MOV X1, X31
	0x01CC8CEC MOV X2, X31
	0x01CC8CF0 BL 0x3A9D6EC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x255C000
	006 Move W8, [X21+1388]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2288000
	014 Move X0, [X0+1288]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1388], W8
	018 Move X19, [X19+32]
	019 Move TEMP, X20
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {35}
	023 Move X20, 0x2288000
	024 Move X20, [X20+1288]
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1B6F8F8
	030 Move X0, [X20]
	031 Move X10, [X0+184]
	032 Add X8, X10, 80
	033 Add X9, X10, 84
	034 Add X10, X10, 88
	035 Move X20, 0x255C000
	036 Move W8, [X20+1110]
	037 Compare W8, 0
	038 JumpIfNotEqual {44}
	039 Move X0, 0x2286000
	040 Move X0, [X0+1152]
	041 Call 0x1B6F7F0
	042 Move W8, 1
	043 Move [X20+1110], W8
	044 Move X8, 0x2286000
	045 Move X8, [X8+1152]
	046 Move X8, [X8]
	047 Move X10, [X8+184]
	048 Add X8, X10, 12
	049 Add X9, X10, 16
	050 Add X10, X10, 20
	051 Compare X19, 0
	052 JumpIfEqual {64}
	053 Move V0, [X8]
	054 Move V1, [X9]
	055 Move V2, [X10]
	056 Move X0, X19
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X1, X31
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Call Transform.set_localScale, X0, X1
	063 Return 
	064 Call 0x1B6FA1C

Method: System.Void SetChannelText(System.Int32 channel)

Disassembly:
	0x01CC9354 LDR X10, [X8 + 0xB0]
	0x01CC9358 ADD X10, X10, 0x8
	0x01CC935C LDUR X11, [X10 - 0x8]
	0x01CC9360 CMP X11, X1
	0x01CC9364 B.EQ 0x1CC9448
	0x01CC9368 SUBS X9, X9, 0x1
	0x01CC936C ADD X10, X10, 0x10
	0x01CC9370 B.NE 0x1CC935C
	0x01CC9374 MOVZ W2, 0x1
	0x01CC9378 MOV X0, X21
	0x01CC937C BL 0x1BB4284
	0x01CC9380 B 0x1CC9458
	0x01CC9384 LDR W9, [X10]
	0x01CC9388 ADD W9, W9, 0x1
	0x01CC938C ADD X8, X8, W9, 0x4, SXTW
	0x01CC9390 ADD X0, X8, 0x138
	0x01CC9394 LDP X8, X4, [X0]
	0x01CC9398 MOVZ W1, 0x3
	0x01CC939C MOV X0, X21
	0x01CC93A0 MOV X2, X23
	0x01CC93A4 MOV X3, X22
	0x01CC93A8 BLR X8
	0x01CC93AC ADRP X8, 0x2285000
	0x01CC93B0 LDR X8, [X8 + 0x170]
	0x01CC93B4 LDR X0, [X8]
	0x01CC93B8 BL 0x1B6EA0C
	0x01CC93BC ADRP X8, 0x2286000
	0x01CC93C0 LDR X8, [X8 + 0x578]
	0x01CC93C4 MOV X1, X20
	0x01CC93C8 MOV X3, X31
	0x01CC93CC MOV X21, X0
	0x01CC93D0 LDR X2, [X8]
	0x01CC93D4 BL 0x317DB24
	0x01CC93D8 MOV X0, X19
	0x01CC93DC MOV X1, X21
	0x01CC93E0 MOV X2, X31
	0x01CC93E4 BL 0x33E48E4
	0x01CC93E8 ADRP X8, 0x2286000
	0x01CC93EC LDR X8, [X8 + 0x568]
	0x01CC93F0 LDR X0, [X8]
	0x01CC93F4 BL 0x1B6EA0C
	0x01CC93F8 ADRP X8, 0x2286000
	0x01CC93FC LDR X8, [X8 + 0x570]
	0x01CC9400 MOV X1, X20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x255B000
	009 Move X22, 0x2285000
	010 Move X21, 0x2287000
	011 Move W8, [X23+1389]
	012 Move X22, [X22+1528]
	013 Move X21, [X21+1296]
	014 Move W20, W1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x2285000
	021 Move X0, [X0+1528]
	022 Call 0x1B6F7F0
	023 Move X0, 0x2287000
	024 Move X0, [X0+1296]
	025 Call 0x1B6F7F0
	026 Move W8, 1
	027 Move [X23+1389], W8
	028 Move X0, [X22]
	029 Move X19, [X19+56]
	030 Add X1, X31, 12
	031 Move [X31+12], W20
	032 Call 0x1B6F900
	033 Move X8, [X21]
	034 Move X1, X0
	035 Move X2, X31
	036 Move X0, X8
	037 Call String.Format, X0, X1
	038 Compare X19, 0
	039 JumpIfEqual {54}
	040 Move X8, [X19]
	041 Move X1, X0
	042 Move X0, X19
	043 Move X9, [X8+1368]
	044 Move X2, [X8+1376]
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X30, [X31+16]
	051 Move X23, [X31+24]
	052 Add X31, X31, 64
	053 Return 
	054 Call 0x1B6FA1C

Method: System.Void SetMoneyText(System.Int32 amount)

Disassembly:
	0x01CCADCC LDR X0, [X8 + 0x10]
	0x01CCADD0 LDRB W8, [X0 + 0x135]
	0x01CCADD4 TBNZ X8, 0x0, 0x1CCADDC
	0x01CCADD8 BL 0x1BB4180
	0x01CCADDC LDR W8, [X0 + 0xE0]
	0x01CCADE0 CBNZ W8, 0x1CCADE8
	0x01CCADE4 BL 0x1B6E8F8
	0x01CCADE8 LDR X8, [X21 + 0x38]
	0x01CCADEC LDR X0, [X8 + 0x10]
	0x01CCADF0 LDRB W8, [X0 + 0x135]
	0x01CCADF4 TBNZ X8, 0x0, 0x1CCADFC
	0x01CCADF8 BL 0x1BB4180
	0x01CCADFC CBZ X20, 0x1CCAEDC
	0x01CCAE00 ADRP X9, 0x2285000
	0x01CCAE04 ADRP X11, 0x2285000
	0x01CCAE08 LDR X9, [X9 + 0x558]
	0x01CCAE0C LDR X10, [X0 + 0xB8]
	0x01CCAE10 LDR X8, [X20]
	0x01CCAE14 LDR X11, [X11 + 0x668]
	0x01CCAE18 ADRP X24, 0x2285000
	0x01CCAE1C ADRP X23, 0x2285000
	0x01CCAE20 LDR X1, [X9]
	0x01CCAE24 LDR X21, [X10]
	0x01CCAE28 LDRH W9, [X8 + 0x12E]
	0x01CCAE2C LDR X22, [X11]
	0x01CCAE30 LDR X24, [X24 + 0x618]
	0x01CCAE34 LDR X23, [X23 + 0x620]
	0x01CCAE38 CBZ X9, 0x1CCAE5C
	0x01CCAE3C LDR X10, [X8 + 0xB0]
	0x01CCAE40 ADD X10, X10, 0x8
	0x01CCAE44 LDUR X11, [X10 - 0x8]
	0x01CCAE48 CMP X11, X1
	0x01CCAE4C B.EQ 0x1CCAE6C
	0x01CCAE50 SUBS X9, X9, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x255A000
	007 Move X21, 0x2286000
	008 Move W8, [X22+1390]
	009 Move X21, [X21+1304]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2286000
	017 Move X0, [X0+1304]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X22+1390], W8
	021 Move X19, [X19+48]
	022 Move W1, W20
	023 Call PlayerWatchView.GetMoneyText, X0, X1
	024 Move X8, [X21]
	025 Move X1, X0
	026 Move X2, X31
	027 Move X0, X8
	028 Call String.Concat, X0, X1
	029 Compare X19, 0
	030 JumpIfEqual {42}
	031 Move X8, [X19]
	032 Move X1, X0
	033 Move X0, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X3, [X8+1368]
	037 Move X2, [X8+1376]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 CallNoReturn X3
	042 Call 0x1B6FA1C

Method: System.Void SetDisplay(AnimalCompany.PlayerWatch/WatchDisplay display)

Disassembly:
	0x01CC9508 STRB W8, [X20 + 0x582]
	0x01CC950C MOVI V0.2D, 0x0
	0x01CC9510 STP V0, V0, [X31 + 0x50]
	0x01CC9514 STR V0, [X31 + 0x4]
	0x01CC9518 LDR X8, [X19 + 0x50]
	0x01CC951C CBZ X8, 0x1CC9594
	0x01CC9520 LDR X20, [X19 + 0x28]
	0x01CC9524 CBZ X20, 0x1CC9648
	0x01CC9528 LDP V0, V1, [X8 + 0x10]
	0x01CC952C LDR V2, [X8 + 0x3]
	0x01CC9530 ADD X0, X31, 0x40
	0x01CC9534 MOV X1, X31
	0x01CC9538 STP V0, V1, [X31 + 0x40]
	0x01CC953C LDP W21, W22, [X31 + 0x44]
	0x01CC9540 STR V2, [X31 + 0x6]
	0x01CC9544 BL 0x33D14A0
	0x01CC9548 ADRP X10, 0x2286000
	0x01CC954C LDR X8, [X20]
	0x01CC9550 LDR X10, [X10 + 0x550]
	0x01CC9554 MOV W23, W0
	0x01CC9558 LDRH W9, [X8 + 0x12E]
	0x01CC955C LDR X1, [X10]
	0x01CC9560 CBZ X9, 0x1CC9584
	0x01CC9564 LDR X10, [X8 + 0xB0]
	0x01CC9568 ADD X10, X10, 0x8
	0x01CC956C LDUR X11, [X10 - 0x8]
	0x01CC9570 CMP X11, X1
	0x01CC9574 B.EQ 0x1CC9738
	0x01CC9578 SUBS X9, X9, 0x1
	0x01CC957C ADD X10, X10, 0x10
	0x01CC9580 B.NE 0x1CC956C
	0x01CC9584 MOVZ W2, 0x1
	0x01CC9588 MOV X0, X20
	0x01CC958C BL 0x1BB4284
	0x01CC9590 B 0x1CC9748

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+168]
	006 Compare X0, 0
	007 JumpIfEqual {42}
	008 Move W20, W1
	009 Move X1, X31
	010 Call Component.get_gameObject, X0
	011 Compare X0, 0
	012 JumpIfEqual {42}
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W1, W31
	015 Move X2, X31
	016 Call GameObject.SetActive, X0, X1
	017 Move X0, [X19+176]
	018 Compare X0, 0
	019 JumpIfEqual {42}
	020 Move X1, X31
	021 Call Component.get_gameObject, X0
	022 Compare X0, 0
	023 JumpIfEqual {42}
	024 Move W1, 1
	025 Move W1, 1
	026 Move X2, X31
	027 Call GameObject.SetActive, X0, X1
	028 Move X0, [X19+176]
	029 Compare X0, 0
	030 JumpIfEqual {42}
	031 Move X1, X31
	032 Call Component.get_gameObject, X0
	033 Compare X0, 0
	034 JumpIfEqual {42}
	035 Move W1, W31
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X2, X31
	039 Move X30, [X31+32]
	040 Call GameObject.SetActive, X0, X1
	041 Return 
	042 Call 0x1B6FA1C

Method: System.Void SetMoneyText(System.Int32 amount, System.Int32 amountPrev, System.Boolean animate)

Disassembly:
	0x01CC9404 MOV X3, X31
	0x01CC9408 MOV X21, X0
	0x01CC940C LDR X2, [X8]
	0x01CC9410 BL 0x27EC49C
	0x01CC9414 MOV X0, X19
	0x01CC9418 MOV X1, X21
	0x01CC941C MOV X2, X31
	0x01CC9420 BL 0x33E4784
	0x01CC9424 MOV X0, X20
	0x01CC9428 STR X19, [X20 + 0x50]
	0x01CC942C BL 0x1CCA760
	0x01CC9430 MOV X0, X20
	0x01CC9434 LDP X20, X19, [X31 + 0x30]
	0x01CC9438 LDP X22, X21, [X31 + 0x20]
	0x01CC943C LDP X24, X23, [X31 + 0x10]
	0x01CC9440 LDR X30, [X31], #0x40
	0x01CC9444 B 0x1CC9478
	0x01CC9448 LDR W9, [X10]
	0x01CC944C ADD W9, W9, 0x1
	0x01CC9450 ADD X8, X8, W9, 0x4, SXTW
	0x01CC9454 ADD X0, X8, 0x138
	0x01CC9458 LDP X8, X4, [X0]
	0x01CC945C MOVZ W1, 0x1
	0x01CC9460 B 0x1CC9314
	0x01CC9464 BL 0x1B6EA1C
	0x01CC9468 BL 0x1B6EA24
	0x01CC946C BL 0x1B6EA40
	0x01CC9470 MOV X1, X31
	0x01CC9474 BL 0x1B6E8E8
	0x01CC9478 SUB X31, X31, 0xA0
	0x01CC947C STP X30, X23, [X31 + 0x70]
	0x01CC9480 STP X22, X21, [X31 + 0x80]
	0x01CC9484 STP X20, X19, [X31 + 0x90]
	0x01CC9488 ADRP X20, 0x255A000
	0x01CC948C LDRB W8, [X20 + 0x582]
	0x01CC9490 MOV X19, X0
	0x01CC9494 TBNZ X8, 0x0, 0x1CC950C
	0x01CC9498 ADRP X0, 0x2284000
	0x01CC949C LDR X0, [X0 + 0x858]
	0x01CC94A0 BL 0x1B6E7F0
	0x01CC94A4 ADRP X0, 0x2286000
	0x01CC94A8 LDR X0, [X0 + 0x550]
	0x01CC94AC BL 0x1B6E7F0
	0x01CC94B0 ADRP X0, 0x2286000
	0x01CC94B4 LDR X0, [X0 + 0x558]
	0x01CC94B8 BL 0x1B6E7F0
	0x01CC94BC ADRP X0, 0x2284000
	0x01CC94C0 LDR X0, [X0 + 0x860]
	0x01CC94C4 BL 0x1B6E7F0
	0x01CC94C8 ADRP X0, 0x2286000
	0x01CC94CC LDR X0, [X0 + 0x598]
	0x01CC94D0 BL 0x1B6E7F0
	0x01CC94D4 ADRP X0, 0x2286000
	0x01CC94D8 LDR X0, [X0 + 0x5A0]
	0x01CC94DC BL 0x1B6E7F0
	0x01CC94E0 ADRP X0, 0x2286000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x255B000
	008 Move W8, [X23+1391]
	009 Move W22, W3
	010 Move W21, W2
	011 Move W20, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x2287000
	018 Move X0, [X0+1304]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X23+1391], W8
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move TEMP, X22
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {49}
	027 Move X1, [X19+192]
	028 Compare X1, 0
	029 JumpIfEqual {33}
	030 Move X0, X19
	031 Move X2, X31
	032 Call MonoBehaviour.StopCoroutine, X0, X1
	033 Move X0, X19
	034 Move W1, W20
	035 Move W2, W21
	036 Call PlayerWatchView.SetMoneyTextAnimationCoroutine, X0, X1, X2
	037 Move X1, X0
	038 Move [X19+192], X0
	039 Move X0, X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X2, X31
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Call MonoBehaviour.StartCoroutine, X0, X1
	048 Return 
	049 Move X19, [X19+48]
	050 Move W1, W20
	051 Call PlayerWatchView.GetMoneyText, X0, X1
	052 Move X8, 0x2287000
	053 Move X8, [X8+1304]
	054 Move X1, X0
	055 Move X2, X31
	056 Move X8, [X8]
	057 Move X0, X8
	058 Call String.Concat, X0, X1
	059 Compare X19, 0
	060 JumpIfEqual {73}
	061 Move X8, [X19]
	062 Move X1, X0
	063 Move X0, X19
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X3, [X8+1368]
	067 Move X2, [X8+1376]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Move X23, [X31+56]
	072 CallNoReturn X3
	073 Call 0x1B6FA1C

Method: System.Void SetBackpackStatus(System.Boolean equipped, System.Single fillAmount)

Disassembly:
	0x01CC8F74 LDR X10, [X10 + 0x550]
	0x01CC8F78 LDRH W9, [X8 + 0x12E]
	0x01CC8F7C LDR X1, [X10]
	0x01CC8F80 CBZ X9, 0x1CC8FA4
	0x01CC8F84 LDR X10, [X8 + 0xB0]
	0x01CC8F88 ADD X10, X10, 0x8
	0x01CC8F8C LDUR X11, [X10 - 0x8]
	0x01CC8F90 CMP X11, X1
	0x01CC8F94 B.EQ 0x1CC8FB4
	0x01CC8F98 SUBS X9, X9, 0x1
	0x01CC8F9C ADD X10, X10, 0x10
	0x01CC8FA0 B.NE 0x1CC8F8C
	0x01CC8FA4 MOVZ W2, 0x3
	0x01CC8FA8 MOV X0, X20
	0x01CC8FAC BL 0x1BB4284
	0x01CC8FB0 B 0x1CC8FC4
	0x01CC8FB4 LDR W9, [X10]
	0x01CC8FB8 ADD W9, W9, 0x3
	0x01CC8FBC ADD X8, X8, W9, 0x4, SXTW
	0x01CC8FC0 ADD X0, X8, 0x138
	0x01CC8FC4 LDP X8, X1, [X0]
	0x01CC8FC8 MOV X0, X20
	0x01CC8FCC BLR X8
	0x01CC8FD0 STR X31, [X19 + 0x28]
	0x01CC8FD4 LDP X20, X19, [X31 + 0x20]
	0x01CC8FD8 LDP X22, X21, [X31 + 0x10]
	0x01CC8FDC LDR X30, [X31], #0x30
	0x01CC8FE0 RET
	0x01CC8FE4 BL 0x1B6EA1C
	0x01CC8FE8 STP X30, X23, [X31 - 0x30]!
	0x01CC8FEC STP X22, X21, [X31 + 0x10]
	0x01CC8FF0 STP X20, X19, [X31 + 0x20]
	0x01CC8FF4 ADRP X20, 0x255B000
	0x01CC8FF8 LDRB W8, [X20 + 0x585]
	0x01CC8FFC MOV X19, X0
	0x01CC9000 TBNZ X8, 0x0, 0x1CC903C
	0x01CC9004 ADRP X0, 0x2286000
	0x01CC9008 LDR X0, [X0 + 0x568]
	0x01CC900C BL 0x1B6E7F0
	0x01CC9010 ADRP X0, 0x2285000
	0x01CC9014 LDR X0, [X0 + 0x170]
	0x01CC9018 BL 0x1B6E7F0
	0x01CC901C ADRP X0, 0x2286000
	0x01CC9020 LDR X0, [X0 + 0x570]
	0x01CC9024 BL 0x1B6E7F0
	0x01CC9028 ADRP X0, 0x2286000
	0x01CC902C LDR X0, [X0 + 0x578]
	0x01CC9030 BL 0x1B6E7F0
	0x01CC9034 MOVZ W8, 0x1
	0x01CC9038 STRB W8, [X20 + 0x585]
	0x01CC903C LDR X20, [X19 + 0x50]
	0x01CC9040 CBZ X20, 0x1CC90C8
	0x01CC9044 ADRP X8, 0x2286000
	0x01CC9048 LDR X8, [X8 + 0x568]
	0x01CC904C ADRP X21, 0x2286000
	0x01CC9050 ADRP X22, 0x2285000
	0x01CC9054 ADRP X23, 0x2286000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x255C000
	008 Move X22, 0x2288000
	009 Move W8, [X20+1392]
	010 Move X22, [X22+1288]
	011 Move V8, V0
	012 Move W21, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x2288000
	019 Move X0, [X0+1288]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X20+1392], W8
	023 Move X0, [X22]
	024 Move X20, [X19+104]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1B6F8F8
	029 Move X0, [X22]
	030 Compare X20, 0
	031 JumpIfEqual {68}
	032 And W31, W21, 1
	033 Move W9, 44
	034 Move W10, 28
	035 Move W11, 40
	036 Move W12, 24
	037 Move W13, 36
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Move W10, 20
	040 NotImplemented "Instruction CSEL not yet implemented."
	041 Move W12, 32
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 Move W13, 16
	044 Move X8, [X0+184]
	045 NotImplemented "Instruction CSEL not yet implemented."
	046 Move X13, [X20]
	047 Move X0, X20
	048 Move V3, [X8]
	049 Move V2, [X8]
	050 Move V1, [X8]
	051 Move V0, [X8]
	052 Move X8, [X13+680]
	053 Move X1, [X13+688]
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Move X0, [X19+96]
	056 Compare X0, 0
	057 JumpIfEqual {68}
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X30, [X31+8]
	063 Move V0, V8
	064 Move X1, X31
	065 Move V8, [X31+48]
	066 Call Image.set_fillAmount, X0, V0
	067 Return 
	068 Call 0x1B6FA1C

Method: System.Void SetWeight(System.Single weightNormalized)

Disassembly:
	0x01CC90B8 MOV X1, X21
	0x01CC90BC MOV X2, X31
	0x01CC90C0 BL 0x33E4980
	0x01CC90C4 STR X31, [X19 + 0x50]
	0x01CC90C8 LDP X20, X19, [X31 + 0x20]
	0x01CC90CC LDP X22, X21, [X31 + 0x10]
	0x01CC90D0 LDP X30, X23, [X31], #0x30
	0x01CC90D4 RET
	0x01CC90D8 BL 0x1B6EA1C
	0x01CC90DC STR X30, [X31 - 0x40]!
	0x01CC90E0 STP X24, X23, [X31 + 0x10]
	0x01CC90E4 STP X22, X21, [X31 + 0x20]
	0x01CC90E8 STP X20, X19, [X31 + 0x30]
	0x01CC90EC ADRP X21, 0x255A000
	0x01CC90F0 LDRB W8, [X21 + 0x57F]
	0x01CC90F4 MOV X19, X1
	0x01CC90F8 MOV X20, X0
	0x01CC90FC TBNZ X8, 0x0, 0x1CC9174
	0x01CC9100 ADRP X0, 0x2286000
	0x01CC9104 LDR X0, [X0 + 0x568]
	0x01CC9108 BL 0x1B6E7F0
	0x01CC910C ADRP X0, 0x2285000
	0x01CC9110 LDR X0, [X0 + 0x170]
	0x01CC9114 BL 0x1B6E7F0
	0x01CC9118 ADRP X0, 0x2286000
	0x01CC911C LDR X0, [X0 + 0x558]
	0x01CC9120 BL 0x1B6E7F0
	0x01CC9124 ADRP X0, 0x2284000
	0x01CC9128 LDR X0, [X0 + 0x860]
	0x01CC912C BL 0x1B6E7F0
	0x01CC9130 ADRP X0, 0x2286000
	0x01CC9134 LDR X0, [X0 + 0x570]
	0x01CC9138 BL 0x1B6E7F0
	0x01CC913C ADRP X0, 0x2286000
	0x01CC9140 LDR X0, [X0 + 0x578]
	0x01CC9144 BL 0x1B6E7F0
	0x01CC9148 ADRP X0, 0x2286000
	0x01CC914C LDR X0, [X0 + 0x580]
	0x01CC9150 BL 0x1B6E7F0
	0x01CC9154 ADRP X0, 0x2286000
	0x01CC9158 LDR X0, [X0 + 0x588]
	0x01CC915C BL 0x1B6E7F0
	0x01CC9160 ADRP X0, 0x2286000
	0x01CC9164 LDR X0, [X0 + 0x590]
	0x01CC9168 BL 0x1B6E7F0
	0x01CC916C MOVZ W8, 0x1
	0x01CC9170 STRB W8, [X21 + 0x57F]
	0x01CC9174 ADRP X21, 0x2284000
	0x01CC9178 ADRP X23, 0x2286000
	0x01CC917C LDR X8, [X20 + 0x50]
	0x01CC9180 LDR X21, [X21 + 0x860]
	0x01CC9184 LDR X23, [X23 + 0x558]
	0x01CC9188 CBZ X8, 0x1CC9254
	0x01CC918C MOV X0, X20
	0x01CC9190 MOV X1, X31
	0x01CC9194 BL 0x33DD3DC
	0x01CC9198 LDR X8, [X21]
	0x01CC919C MOV X21, X0
	0x01CC91A0 MOVZ W1, 0x2
	0x01CC91A4 MOV X0, X8
	0x01CC91A8 BL 0x1B6E868
	0x01CC91AC CBZ X0, 0x1CC9464
	0x01CC91B0 LDR X20, [X20 + 0x50]
	0x01CC91B4 MOV X22, X0
	0x01CC91B8 CBZ X20, 0x1CC91D0
	0x01CC91BC LDR X8, [X22]
	0x01CC91C0 MOV X0, X20
	0x01CC91C4 LDR X1, [X8 + 0x40]
	0x01CC91C8 BL 0x1B6E8FC
	0x01CC91CC CBZ X0, 0x1CC946C
	0x01CC91D0 LDR W8, [X22 + 0x18]
	0x01CC91D4 CBZ W8, 0x1CC9468
	0x01CC91D8 STR X20, [X22 + 0x20]
	0x01CC91DC CBZ X19, 0x1CC91F8
	0x01CC91E0 LDR X8, [X22]
	0x01CC91E4 MOV X0, X19
	0x01CC91E8 LDR X1, [X8 + 0x40]
	0x01CC91EC BL 0x1B6E8FC
	0x01CC91F0 CBZ X0, 0x1CC946C
	0x01CC91F4 LDR W8, [X22 + 0x18]
	0x01CC91F8 CMP W8, 0x1
	0x01CC91FC B.LS 0x1CC9468
	0x01CC9200 STR X19, [X22 + 0x28]
	0x01CC9204 CBZ X21, 0x1CC9464
	0x01CC9208 ADRP X10, 0x2286000
	0x01CC920C LDR X8, [X21]
	0x01CC9210 LDR X10, [X10 + 0x580]
	0x01CC9214 LDR X1, [X23]
	0x01CC9218 LDRH W9, [X8 + 0x12E]
	0x01CC921C LDR X19, [X10]
	0x01CC9220 CBZ X9, 0x1CC9244
	0x01CC9224 LDR X10, [X8 + 0xB0]
	0x01CC9228 ADD X10, X10, 0x8
	0x01CC922C LDUR X11, [X10 - 0x8]
	0x01CC9230 CMP X11, X1
	0x01CC9234 B.EQ 0x1CC92FC

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x255B000
	007 Move W8, [X20+1393]
	008 Move V8, V0
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2287000
	015 Move X0, [X0+1288]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1393], W8
	019 Move X0, [X19+112]
	020 Compare X0, 0
	021 JumpIfEqual {120}
	022 Move V0, V8
	023 Move X1, X31
	024 Call Image.set_fillAmount, X0, V0
	025 Move X21, 0x2287000
	026 Move X21, [X21+1288]
	027 Move S0, 0.25
	028 NotImplemented "Instruction FCMP not yet implemented."
	029 Move X0, [X21]
	030 Move X20, [X19+120]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1B6F8F8
	035 Move X0, [X21]
	036 Move X8, [X0+184]
	037 Move S0, 0.75
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Compare X20, 0
	040 JumpIfEqual {120}
	041 Move X9, [X20]
	042 Move S2, [X8+72]
	043 Move S3, [X8+76]
	044 Move S0, [X8+64]
	045 Move S1, [X8+68]
	046 Move X0, X20
	047 Move X8, [X9+680]
	048 Move X1, [X9+688]
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Move X0, [X19+112]
	051 Compare X0, 0
	052 JumpIfEqual {120}
	053 Move X8, [X21]
	054 Move X9, [X0]
	055 Move X8, [X8+184]
	056 Move X2, [X9+680]
	057 Move S2, [X8+72]
	058 Move S3, [X8+76]
	059 Move S0, [X8+64]
	060 Move S1, [X8+68]
	061 Move X0, [X21]
	062 Move X20, [X19+120]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {68}
	066 Call 0x1B6F8F8
	067 Move X0, [X21]
	068 Compare X20, 0
	069 JumpIfEqual {120}
	070 Move X8, [X0+184]
	071 Move X9, [X20]
	072 Move X0, X20
	073 Move S2, [X8+24]
	074 Move S3, [X8+28]
	075 Move S0, [X8+16]
	076 Move S1, [X8+20]
	077 Move X8, [X9+680]
	078 Move X1, [X9+688]
	079 NotImplemented "Instruction BLR not yet implemented."
	080 Move X0, [X19+112]
	081 Compare X0, 0
	082 JumpIfEqual {120}
	083 Move X8, [X21]
	084 Move X9, [X0]
	085 Move X8, [X8+184]
	086 Move X2, [X9+680]
	087 Move S2, [X8+24]
	088 Move S3, [X8+28]
	089 Move S0, [X8+16]
	090 Move S1, [X8+20]
	091 Compare X20, 0
	092 JumpIfEqual {120}
	093 Move X9, [X20]
	094 Move S2, [X8+56]
	095 Move S3, [X8+60]
	096 Move S0, [X8+48]
	097 Move S1, [X8+52]
	098 Move X0, X20
	099 Move X8, [X9+680]
	100 Move X1, [X9+688]
	101 NotImplemented "Instruction BLR not yet implemented."
	102 Move X0, [X19+112]
	103 Compare X0, 0
	104 JumpIfEqual {120}
	105 Move X8, [X21]
	106 Move X9, [X0]
	107 Move X8, [X8+184]
	108 Move X2, [X9+680]
	109 Move S2, [X8+56]
	110 Move S3, [X8+60]
	111 Move S0, [X8+48]
	112 Move S1, [X8+52]
	113 Move X1, [X9+688]
	114 Move X20, [X31+32]
	115 Move X19, [X31+40]
	116 Move X30, [X31+16]
	117 Move X21, [X31+24]
	118 Move V8, [X31+48]
	119 CallNoReturn X2
	120 Call 0x1B6FA1C

Method: System.Collections.IEnumerator SetMoneyTextAnimationCoroutine(System.Int32 amount, System.Int32 amountPrev)

Disassembly:
	0x01CCAE54 ADD X10, X10, 0x10
	0x01CCAE58 B.NE 0x1CCAE44
	0x01CCAE5C MOVZ W2, 0x1
	0x01CCAE60 MOV X0, X20
	0x01CCAE64 BL 0x1BB4284
	0x01CCAE68 B 0x1CCAE7C
	0x01CCAE6C LDR W9, [X10]
	0x01CCAE70 ADD W9, W9, 0x1
	0x01CCAE74 ADD X8, X8, W9, 0x4, SXTW
	0x01CCAE78 ADD X0, X8, 0x138
	0x01CCAE7C LDP X8, X4, [X0]
	0x01CCAE80 MOVZ W1, 0x3
	0x01CCAE84 MOV X0, X20
	0x01CCAE88 MOV X2, X22
	0x01CCAE8C MOV X3, X21
	0x01CCAE90 BLR X8
	0x01CCAE94 MOV X0, X19
	0x01CCAE98 BL 0x1CC8E28
	0x01CCAE9C MOV X0, X19
	0x01CCAEA0 BL 0x1CC8FE8
	0x01CCAEA4 LDR X0, [X24]
	0x01CCAEA8 BL 0x1B6EA0C
	0x01CCAEAC LDR X2, [X23]
	0x01CCAEB0 MOV X1, X19
	0x01CCAEB4 MOV X3, X31
	0x01CCAEB8 MOV X20, X0
	0x01CCAEBC BL 0x3A6467C
	0x01CCAEC0 MOV X0, X20
	0x01CCAEC4 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x255A000
	008 Move X23, 0x2286000
	009 Move W8, [X22+1394]
	010 Move X23, [X23+1504]
	011 Move W19, W2
	012 Move W20, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x2286000
	019 Move X0, [X0+1504]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X22+1394], W8
	023 Move X0, [X23]
	024 Call 0x1B6FA0C
	025 Move X1, X31
	026 Move X22, X0
	027 Call Object..ctor, X0
	028 Move [X22+16], W31
	029 Move [X22+32], X21
	030 Move [X22+40], W20
	031 Move [X22+44], W19
	032 Move X0, X22
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Move X23, [X31+56]
	039 Return X0

Method: System.Void SetLED(System.Boolean isOn)

Disassembly:
	0x01CC97B0 CBZ X21, 0x1CC98BC
	0x01CC97B4 MOV X22, X0
	0x01CC97B8 CBZ X0, 0x1CC97D0
	0x01CC97BC LDR X8, [X21]
	0x01CC97C0 MOV X0, X22
	0x01CC97C4 LDR X1, [X8 + 0x40]
	0x01CC97C8 BL 0x1B6E8FC
	0x01CC97CC CBZ X0, 0x1CC98C4
	0x01CC97D0 LDR W8, [X21 + 0x18]
	0x01CC97D4 CBZ W8, 0x1CC98C0
	0x01CC97D8 STR X22, [X21 + 0x20]
	0x01CC97DC ADRP X8, 0x2286000
	0x01CC97E0 LDR V0, [X19 + 0x3]
	0x01CC97E4 LDR X8, [X8 + 0x598]
	0x01CC97E8 ADD X1, X31, 0x0
	0x01CC97EC STR V0, [X31]
	0x01CC97F0 LDR X0, [X8]
	0x01CC97F4 BL 0x1B6E900
	0x01CC97F8 MOV X19, X0
	0x01CC97FC CBZ X0, 0x1CC9814
	0x01CC9800 LDR X8, [X21]
	0x01CC9804 MOV X0, X19
	0x01CC9808 LDR X1, [X8 + 0x40]
	0x01CC980C BL 0x1B6E8FC
	0x01CC9810 CBZ X0, 0x1CC98C4
	0x01CC9814 LDR W8, [X21 + 0x18]
	0x01CC9818 CMP W8, 0x1
	0x01CC981C B.LS 0x1CC98C0
	0x01CC9820 STR X19, [X21 + 0x28]
	0x01CC9824 CBZ X20, 0x1CC98BC
	0x01CC9828 ADRP X9, 0x2286000
	0x01CC982C LDR X8, [X20]
	0x01CC9830 LDR X9, [X9 + 0x558]
	0x01CC9834 ADRP X10, 0x2286000
	0x01CC9838 LDR X1, [X9]
	0x01CC983C LDR X10, [X10 + 0x5A8]
	0x01CC9840 LDRH W9, [X8 + 0x12E]
	0x01CC9844 LDR X19, [X10]
	0x01CC9848 CBZ X9, 0x1CC986C
	0x01CC984C LDR X10, [X8 + 0xB0]
	0x01CC9850 ADD X10, X10, 0x8
	0x01CC9854 LDUR X11, [X10 - 0x8]
	0x01CC9858 CMP X11, X1
	0x01CC985C B.EQ 0x1CC987C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x255B000
	007 Move X21, 0x2287000
	008 Move W8, [X22+1395]
	009 Move X21, [X21+1288]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2287000
	017 Move X0, [X0+1288]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X22+1395], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1B6F8F8
	026 Move X0, [X20+40]
	027 Compare X0, 0
	028 JumpIfEqual {56}
	029 Move X1, X31
	030 Call Renderer.get_material, X0
	031 Move X8, [X21]
	032 Move X20, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1B6F8F8
	038 Compare X20, 0
	039 JumpIfEqual {56}
	040 Move X8, [X21]
	041 And W31, W19, 1
	042 Move X0, X20
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X8, [X8+184]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move S0, W31
	049 Move S1, 1
	050 Move W1, [X8]
	051 NotImplemented "Instruction FCSEL not yet implemented."
	052 Move X2, X31
	053 Move X30, [X31+48]
	054 Call Material.SetFloat, X0, X1, V0
	055 Return 
	056 Call 0x1B6FA1C

Method: System.Void SetBatteryLevel(System.Single level)

Disassembly:
	0x01CCACA4 MOV X1, X22
	0x01CCACA8 BLR X8
	0x01CCACAC LDRB W8, [X20 + 0x18]
	0x01CCACB0 CBZ W8, 0x1CCACFC
	0x01CCACB4 LDR X19, [X19 + 0x28]
	0x01CCACB8 CBZ X19, 0x1CCAD34
	0x01CCACBC LDR X8, [X19]
	0x01CCACC0 LDR X1, [X23]
	0x01CCACC4 LDRH W9, [X8 + 0x12E]
	0x01CCACC8 CBZ X9, 0x1CCACEC
	0x01CCACCC LDR X10, [X8 + 0xB0]
	0x01CCACD0 ADD X10, X10, 0x8
	0x01CCACD4 LDUR X11, [X10 - 0x8]
	0x01CCACD8 CMP X11, X1
	0x01CCACDC B.EQ 0x1CCAD0C
	0x01CCACE0 SUBS X9, X9, 0x1
	0x01CCACE4 ADD X10, X10, 0x10
	0x01CCACE8 B.NE 0x1CCACD4
	0x01CCACEC MOVZ W2, 0x2
	0x01CCACF0 MOV X0, X19
	0x01CCACF4 BL 0x1BB4284
	0x01CCACF8 B 0x1CCAD1C
	0x01CCACFC LDP X20, X19, [X31 + 0x20]
	0x01CCAD00 LDP X22, X21, [X31 + 0x10]
	0x01CCAD04 LDP X30, X23, [X31], #0x30
	0x01CCAD08 RET
	0x01CCAD0C LDR W9, [X10]
	0x01CCAD10 ADD W9, W9, 0x2
	0x01CCAD14 ADD X8, X8, W9, 0x4, SXTW
	0x01CCAD18 ADD X0, X8, 0x138
	0x01CCAD1C LDP X2, X1, [X0]
	0x01CCAD20 MOV X0, X19
	0x01CCAD24 LDP X20, X19, [X31 + 0x20]
	0x01CCAD28 LDP X22, X21, [X31 + 0x10]
	0x01CCAD2C LDP X30, X23, [X31], #0x30
	0x01CCAD30 BR X2
	0x01CCAD34 BL 0x1B6EA1C

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x255A000
	006 Move W8, [X20+1396]
	007 Move V8, V0
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2286000
	014 Move X0, [X0+1288]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X20+1396], W8
	018 Move X0, [X19+40]
	019 Compare X0, 0
	020 JumpIfEqual {46}
	021 Move X20, 0x2286000
	022 Move X20, [X20+1288]
	023 Move X1, X31
	024 Call Renderer.get_material, X0
	025 Move X8, [X20]
	026 Move X19, X0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1B6F8F8
	032 Compare X19, 0
	033 JumpIfEqual {46}
	034 Move X8, [X20]
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+8]
	039 Move X8, [X8+184]
	040 Move V0, V8
	041 Move X2, X31
	042 Move W1, [X8+4]
	043 Move V8, [X31+32]
	044 Call Material.SetFloat, X0, X1, V0
	045 Return 
	046 Call 0x1B6FA1C

Method: System.Void SetHPLevel(System.Single level)

Disassembly:
	0x01CC8D98 B 0x1CC8DB4
	0x01CC8D9C B 0x1CC8DB4
	0x01CC8DA0 B 0x1CC8DB4
	0x01CC8DA4 B 0x1CC8DB4
	0x01CC8DA8 B 0x1CC8DB4
	0x01CC8DAC B 0x1CC8DB4
	0x01CC8DB0 B 0x1CC8DB4
	0x01CC8DB4 MOV X21, X0
	0x01CC8DB8 CMP W1, 0x1
	0x01CC8DBC B.NE 0x1CC8DF0
	0x01CC8DC0 MOV X0, X21
	0x01CC8DC4 BL 0x3D19840
	0x01CC8DC8 LDR X22, [X0]
	0x01CC8DCC BL 0x3D19850
	0x01CC8DD0 ADRP X8, 0x2287000
	0x01CC8DD4 LDR X8, [X8 + 0x520]
	0x01CC8DD8 ADD X0, X31, 0x20
	0x01CC8DDC LDR X1, [X8]
	0x01CC8DE0 BL 0x2A14840
	0x01CC8DE4 CBZ X22, 0x1CC8C64
	0x01CC8DE8 MOV X0, X22
	0x01CC8DEC BL 0x1B6EA14
	0x01CC8DF0 MOV X22, X31
	0x01CC8DF4 B 0x1CC8DFC
	0x01CC8DF8 MOV X21, X0
	0x01CC8DFC ADRP X8, 0x2287000
	0x01CC8E00 LDR X8, [X8 + 0x520]
	0x01CC8E04 LDR X1, [X8]
	0x01CC8E08 ADD X0, X31, 0x20
	0x01CC8E0C BL 0x2A14840
	0x01CC8E10 CBNZ X22, 0x1CC8E1C
	0x01CC8E14 MOV X0, X21
	0x01CC8E18 BL 0x1C8418C
	0x01CC8E1C MOV X0, X22
	0x01CC8E20 BL 0x1B6EA14
	0x01CC8E24 BL 0x18F46A8
	0x01CC8E28 STR X30, [X31 - 0x30]!
	0x01CC8E2C STP X22, X21, [X31 + 0x10]
	0x01CC8E30 STP X20, X19, [X31 + 0x20]
	0x01CC8E34 ADRP X21, 0x255B000
	0x01CC8E38 ADRP X20, 0x2285000
	0x01CC8E3C LDRB W8, [X21 + 0x584]
	0x01CC8E40 LDR X20, [X20 + 0x858]
	0x01CC8E44 MOV X19, X0
	0x01CC8E48 TBNZ X8, 0x0, 0x1CC8E84
	0x01CC8E4C ADRP X0, 0x2285000
	0x01CC8E50 LDR X0, [X0 + 0x858]
	0x01CC8E54 BL 0x1B6E7F0
	0x01CC8E58 ADRP X0, 0x2287000
	0x01CC8E5C LDR X0, [X0 + 0x550]
	0x01CC8E60 BL 0x1B6E7F0
	0x01CC8E64 ADRP X0, 0x2287000
	0x01CC8E68 LDR X0, [X0 + 0x558]
	0x01CC8E6C BL 0x1B6E7F0
	0x01CC8E70 ADRP X0, 0x2287000
	0x01CC8E74 LDR X0, [X0 + 0x560]
	0x01CC8E78 BL 0x1B6E7F0
	0x01CC8E7C MOVZ W8, 0x1
	0x01CC8E80 STRB W8, [X21 + 0x584]
	0x01CC8E84 MOV X0, X19
	0x01CC8E88 MOV X1, X31
	0x01CC8E8C BL 0x33DD3DC
	0x01CC8E90 LDR X21, [X20]
	0x01CC8E94 MOV X20, X0
	0x01CC8E98 LDR X8, [X21 + 0x38]
	0x01CC8E9C CBNZ X8, 0x1CC8EAC
	0x01CC8EA0 MOV X0, X21
	0x01CC8EA4 BL 0x1BB41DC
	0x01CC8EA8 LDR X8, [X21 + 0x38]
	0x01CC8EAC LDR X0, [X8 + 0x10]
	0x01CC8EB0 LDRB W8, [X0 + 0x135]
	0x01CC8EB4 TBNZ X8, 0x0, 0x1CC8EBC
	0x01CC8EB8 BL 0x1BB4180
	0x01CC8EBC LDR W8, [X0 + 0xE0]
	0x01CC8EC0 CBNZ W8, 0x1CC8EC8
	0x01CC8EC4 BL 0x1B6E8F8
	0x01CC8EC8 LDR X8, [X21 + 0x38]
	0x01CC8ECC LDR X0, [X8 + 0x10]
	0x01CC8ED0 LDRB W8, [X0 + 0x135]
	0x01CC8ED4 TBNZ X8, 0x0, 0x1CC8EDC
	0x01CC8ED8 BL 0x1BB4180
	0x01CC8EDC CBZ X20, 0x1CC8FE4
	0x01CC8EE0 ADRP X9, 0x2287000
	0x01CC8EE4 ADRP X11, 0x2287000
	0x01CC8EE8 LDR X9, [X9 + 0x558]
	0x01CC8EEC LDR X10, [X0 + 0xB8]
	0x01CC8EF0 LDR X8, [X20]
	0x01CC8EF4 LDR X11, [X11 + 0x560]
	0x01CC8EF8 LDR X1, [X9]
	0x01CC8EFC LDR X21, [X10]
	0x01CC8F00 LDRH W9, [X8 + 0x12E]
	0x01CC8F04 LDR X22, [X11]
	0x01CC8F08 CBZ X9, 0x1CC8F2C
	0x01CC8F0C LDR X10, [X8 + 0xB0]
	0x01CC8F10 ADD X10, X10, 0x8
	0x01CC8F14 LDUR X11, [X10 - 0x8]
	0x01CC8F18 CMP X11, X1
	0x01CC8F1C B.EQ 0x1CC8F3C

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x255C000
	007 Move W8, [X20+1397]
	008 Move V8, V0
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2288000
	015 Move X0, [X0+1288]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1397], W8
	019 Move X0, [X19+80]
	020 Compare X0, 0
	021 JumpIfEqual {122}
	022 Move V0, V8
	023 Move X1, X31
	024 Call Image.set_fillAmount, X0, V0
	025 Move X8, -18997248
	026 Move V0, [X8+2688]
	027 Move X21, 0x2288000
	028 Move X21, [X21+1288]
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 Move X0, [X21]
	031 Move X20, [X19+80]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1B6F8F8
	036 Move X0, [X21]
	037 Compare X20, 0
	038 JumpIfEqual {122}
	039 Move X8, [X0+184]
	040 Move X9, [X20]
	041 Move X0, X20
	042 Move S2, [X8+56]
	043 Move S3, [X8+60]
	044 Move S0, [X8+48]
	045 Move S1, [X8+52]
	046 Move X8, [X9+680]
	047 Move X1, [X9+688]
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X0, [X19+88]
	050 Compare X0, 0
	051 JumpIfEqual {122}
	052 Move X8, [X21]
	053 Move X9, [X0]
	054 Move X8, [X8+184]
	055 Move X2, [X9+680]
	056 Move S2, [X8+56]
	057 Move S3, [X8+60]
	058 Move S0, [X8+48]
	059 Move S1, [X8+52]
	060 Move X0, [X21]
	061 Move X20, [X19+80]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {67}
	065 Call 0x1B6F8F8
	066 Move X0, [X21]
	067 Move X8, -18997248
	068 Move V0, [X8+3376]
	069 Move X8, [X0+184]
	070 NotImplemented "Instruction FCMP not yet implemented."
	071 Compare X20, 0
	072 JumpIfEqual {122}
	073 Move X9, [X20]
	074 Move S2, [X8+72]
	075 Move S3, [X8+76]
	076 Move S0, [X8+64]
	077 Move S1, [X8+68]
	078 Move X0, X20
	079 Move X8, [X9+680]
	080 Move X1, [X9+688]
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Move X0, [X19+88]
	083 Compare X0, 0
	084 JumpIfEqual {122}
	085 Move X8, [X21]
	086 Move X9, [X0]
	087 Move X8, [X8+184]
	088 Move X2, [X9+680]
	089 Move S2, [X8+72]
	090 Move S3, [X8+76]
	091 Move S0, [X8+64]
	092 Move S1, [X8+68]
	093 Compare X20, 0
	094 JumpIfEqual {122}
	095 Move X9, [X20]
	096 Move S2, [X8+24]
	097 Move S3, [X8+28]
	098 Move S0, [X8+16]
	099 Move S1, [X8+20]
	100 Move X0, X20
	101 Move X8, [X9+680]
	102 Move X1, [X9+688]
	103 NotImplemented "Instruction BLR not yet implemented."
	104 Move X0, [X19+88]
	105 Compare X0, 0
	106 JumpIfEqual {122}
	107 Move X8, [X21]
	108 Move X9, [X0]
	109 Move X8, [X8+184]
	110 Move X2, [X9+680]
	111 Move S2, [X8+24]
	112 Move S3, [X8+28]
	113 Move S0, [X8+16]
	114 Move S1, [X8+20]
	115 Move X1, [X9+688]
	116 Move X20, [X31+32]
	117 Move X19, [X31+40]
	118 Move X30, [X31+16]
	119 Move X21, [X31+24]
	120 Move V8, [X31+48]
	121 CallNoReturn X2
	122 Call 0x1B6FA1C

Method: System.Void SetSignalStrength(System.Single level)

Disassembly:
	0x01CCAD38 STR X30, [X31 - 0x40]!
	0x01CCAD3C STP X24, X23, [X31 + 0x10]
	0x01CCAD40 STP X22, X21, [X31 + 0x20]
	0x01CCAD44 STP X20, X19, [X31 + 0x30]
	0x01CCAD48 ADRP X21, 0x2559000
	0x01CCAD4C ADRP X20, 0x2283000
	0x01CCAD50 LDRB W8, [X21 + 0x583]
	0x01CCAD54 LDR X20, [X20 + 0x858]
	0x01CCAD58 MOV X19, X0
	0x01CCAD5C TBNZ X8, 0x0, 0x1CCADA4
	0x01CCAD60 ADRP X0, 0x2283000
	0x01CCAD64 LDR X0, [X0 + 0x858]
	0x01CCAD68 BL 0x1B6E7F0
	0x01CCAD6C ADRP X0, 0x2285000
	0x01CCAD70 LDR X0, [X0 + 0x618]
	0x01CCAD74 BL 0x1B6E7F0
	0x01CCAD78 ADRP X0, 0x2285000
	0x01CCAD7C LDR X0, [X0 + 0x558]
	0x01CCAD80 BL 0x1B6E7F0
	0x01CCAD84 ADRP X0, 0x2285000
	0x01CCAD88 LDR X0, [X0 + 0x620]
	0x01CCAD8C BL 0x1B6E7F0
	0x01CCAD90 ADRP X0, 0x2285000
	0x01CCAD94 LDR X0, [X0 + 0x668]
	0x01CCAD98 BL 0x1B6E7F0
	0x01CCAD9C MOVZ W8, 0x1
	0x01CCADA0 STRB W8, [X21 + 0x583]
	0x01CCADA4 MOV X0, X19
	0x01CCADA8 MOV X1, X31
	0x01CCADAC BL 0x33DD3DC
	0x01CCADB0 LDR X21, [X20]
	0x01CCADB4 MOV X20, X0
	0x01CCADB8 LDR X8, [X21 + 0x38]
	0x01CCADBC CBNZ X8, 0x1CCADCC
	0x01CCADC0 MOV X0, X21
	0x01CCADC4 BL 0x1BB41DC
	0x01CCADC8 LDR X8, [X21 + 0x38]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x255A000
	006 Move W8, [X20+1398]
	007 Move V8, V0
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2286000
	014 Move X0, [X0+1288]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X20+1398], W8
	018 Move X0, [X19+40]
	019 Compare X0, 0
	020 JumpIfEqual {46}
	021 Move X20, 0x2286000
	022 Move X20, [X20+1288]
	023 Move X1, X31
	024 Call Renderer.get_material, X0
	025 Move X8, [X20]
	026 Move X19, X0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1B6F8F8
	032 Compare X19, 0
	033 JumpIfEqual {46}
	034 Move X8, [X20]
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+8]
	039 Move X8, [X8+184]
	040 Move V0, V8
	041 Move X2, X31
	042 Move W1, [X8+12]
	043 Move V8, [X31+32]
	044 Call Material.SetFloat, X0, X1, V0
	045 Return 
	046 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CCAEF0 LDRB W8, [X20 + 0x586]
	0x01CCAEF4 MOV X19, X0
	0x01CCAEF8 TBNZ X8, 0x0, 0x1CCAF34
	0x01CCAEFC ADRP X0, 0x2283000
	0x01CCAF00 LDR X0, [X0 + 0x858]
	0x01CCAF04 BL 0x1B6E7F0
	0x01CCAF08 ADRP X0, 0x2285000
	0x01CCAF0C LDR X0, [X0 + 0x550]
	0x01CCAF10 BL 0x1B6E7F0
	0x01CCAF14 ADRP X0, 0x2285000
	0x01CCAF18 LDR X0, [X0 + 0x558]
	0x01CCAF1C BL 0x1B6E7F0
	0x01CCAF20 ADRP X0, 0x2285000
	0x01CCAF24 LDR X0, [X0 + 0x670]
	0x01CCAF28 BL 0x1B6E7F0
	0x01CCAF2C MOVZ W8, 0x1
	0x01CCAF30 STRB W8, [X20 + 0x586]
	0x01CCAF34 ADD X0, X19, 0x58
	0x01CCAF38 MOV W1, W31
	0x01CCAF3C MOV X2, X31
	0x01CCAF40 BL 0x32529D0
	0x01CCAF44 CBZ W0, 0x1CCB048
	0x01CCAF48 ADRP X20, 0x2283000
	0x01CCAF4C LDR X20, [X20 + 0x858]
	0x01CCAF50 MOV X0, X19
	0x01CCAF54 MOV X1, X31
	0x01CCAF58 BL 0x33DD3DC
	0x01CCAF5C LDR X21, [X20]
	0x01CCAF60 MOV X20, X0
	0x01CCAF64 LDR X8, [X21 + 0x38]
	0x01CCAF68 CBNZ X8, 0x1CCAF78
	0x01CCAF6C MOV X0, X21
	0x01CCAF70 BL 0x1BB41DC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x255A000
	006 Move X21, 0x2285000
	007 Move W8, [X20+1399]
	008 Move X21, [X21+744]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2285000
	015 Move X0, [X0+744]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1399], W8
	019 Move X0, [X21]
	020 Call 0x1B6FA0C
	021 Move X8, -19005440
	022 Move V0, [X8+3304]
	023 Move X1, X31
	024 Move X20, X0
	025 Call WaitForSeconds..ctor, X0, V0
	026 Move [X19+200], X20
	027 Move X0, [X21]
	028 Call 0x1B6FA0C
	029 Move S0, 1
	030 Move X1, X31
	031 Move X20, X0
	032 Call WaitForSeconds..ctor, X0, V0
	033 Move [X19+208], X20
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X1, X31
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call MonoBehaviour..ctor, X0
	041 Return 

Method: System.Void .cctor()

Disassembly:
	0x01CCAF74 LDR X8, [X21 + 0x38]
	0x01CCAF78 LDR X0, [X8 + 0x10]
	0x01CCAF7C LDRB W8, [X0 + 0x135]
	0x01CCAF80 TBNZ X8, 0x0, 0x1CCAF88
	0x01CCAF84 BL 0x1BB4180
	0x01CCAF88 LDR W8, [X0 + 0xE0]
	0x01CCAF8C CBNZ W8, 0x1CCAF94
	0x01CCAF90 BL 0x1B6E8F8
	0x01CCAF94 LDR X8, [X21 + 0x38]
	0x01CCAF98 LDR X0, [X8 + 0x10]
	0x01CCAF9C LDRB W8, [X0 + 0x135]
	0x01CCAFA0 TBNZ X8, 0x0, 0x1CCAFA8
	0x01CCAFA4 BL 0x1BB4180
	0x01CCAFA8 CBZ X20, 0x1CCB0D0
	0x01CCAFAC ADRP X9, 0x2285000
	0x01CCAFB0 ADRP X11, 0x2285000
	0x01CCAFB4 LDR X9, [X9 + 0x558]
	0x01CCAFB8 LDR X10, [X0 + 0xB8]
	0x01CCAFBC LDR X8, [X20]
	0x01CCAFC0 LDR X11, [X11 + 0x670]
	0x01CCAFC4 LDR X1, [X9]
	0x01CCAFC8 LDR X21, [X10]
	0x01CCAFCC LDRH W9, [X8 + 0x12E]
	0x01CCAFD0 LDR X22, [X11]
	0x01CCAFD4 CBZ X9, 0x1CCAFF8
	0x01CCAFD8 LDR X10, [X8 + 0xB0]
	0x01CCAFDC ADD X10, X10, 0x8
	0x01CCAFE0 LDUR X11, [X10 - 0x8]
	0x01CCAFE4 CMP X11, X1
	0x01CCAFE8 B.EQ 0x1CCB008
	0x01CCAFEC SUBS X9, X9, 0x1
	0x01CCAFF0 ADD X10, X10, 0x10
	0x01CCAFF4 B.NE 0x1CCAFE0
	0x01CCAFF8 MOVZ W2, 0x1
	0x01CCAFFC MOV X0, X20
	0x01CCB000 BL 0x1BB4284
	0x01CCB004 B 0x1CCB018
	0x01CCB008 LDR W9, [X10]
	0x01CCB00C ADD W9, W9, 0x1
	0x01CCB010 ADD X8, X8, W9, 0x4, SXTW
	0x01CCB014 ADD X0, X8, 0x138
	0x01CCB018 LDP X8, X4, [X0]
	0x01CCB01C MOVZ W1, 0x3
	0x01CCB020 MOV X0, X20
	0x01CCB024 MOV X2, X22
	0x01CCB028 MOV X3, X21
	0x01CCB02C BLR X8
	0x01CCB030 MOV X0, X19
	0x01CCB034 BL 0x1CC8E28
	0x01CCB038 MOV X0, X19
	0x01CCB03C BL 0x1CCA760
	0x01CCB040 MOV X0, X19
	0x01CCB044 BL 0x1CC9478
	0x01CCB048 LDR X19, [X19 + 0x28]
	0x01CCB04C CBZ X19, 0x1CCB098
	0x01CCB050 ADRP X10, 0x2284000
	0x01CCB054 LDR X8, [X19]
	0x01CCB058 LDR X10, [X10 + 0x550]
	0x01CCB05C LDRH W9, [X8 + 0x12E]
	0x01CCB060 LDR X1, [X10]
	0x01CCB064 CBZ X9, 0x1CCB088
	0x01CCB068 LDR X10, [X8 + 0xB0]
	0x01CCB06C ADD X10, X10, 0x8
	0x01CCB070 LDUR X11, [X10 - 0x8]
	0x01CCB074 CMP X11, X1
	0x01CCB078 B.EQ 0x1CCB0A8
	0x01CCB07C SUBS X9, X9, 0x1
	0x01CCB080 ADD X10, X10, 0x10
	0x01CCB084 B.NE 0x1CCB070
	0x01CCB088 MOVZ W2, 0x5
	0x01CCB08C MOV X0, X19
	0x01CCB090 BL 0x1BB4284
	0x01CCB094 B 0x1CCB0B8
	0x01CCB098 LDP X20, X19, [X31 + 0x20]
	0x01CCB09C LDP X22, X21, [X31 + 0x10]
	0x01CCB0A0 LDR X30, [X31], #0x30
	0x01CCB0A4 RET
	0x01CCB0A8 LDR W9, [X10]
	0x01CCB0AC ADD W9, W9, 0x5
	0x01CCB0B0 ADD X8, X8, W9, 0x4, SXTW
	0x01CCB0B4 ADD X0, X8, 0x138
	0x01CCB0B8 LDP X2, X1, [X0]
	0x01CCB0BC MOV X0, X19

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x255A000
	009 Move X24, 0x2286000
	010 Move X19, 0x2286000
	011 Move X22, 0x2286000
	012 Move X21, 0x2286000
	013 Move X20, 0x2286000
	014 Move W8, [X23+1400]
	015 Move X24, [X24+1512]
	016 Move X19, [X19+1288]
	017 Move X22, [X22+1520]
	018 Move X21, [X21+1528]
	019 Move X20, [X20+1536]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {41}
	024 Move X0, 0x2286000
	025 Move X0, [X0+1288]
	026 Call 0x1B6F7F0
	027 Move X0, 0x2286000
	028 Move X0, [X0+1512]
	029 Call 0x1B6F7F0
	030 Move X0, 0x2286000
	031 Move X0, [X0+1536]
	032 Call 0x1B6F7F0
	033 Move X0, 0x2286000
	034 Move X0, [X0+1528]
	035 Call 0x1B6F7F0
	036 Move X0, 0x2286000
	037 Move X0, [X0+1520]
	038 Call 0x1B6F7F0
	039 Move W8, 1
	040 Move [X23+1400], W8
	041 Move X0, [X24]
	042 Move X1, X31
	043 Call Shader.PropertyToID, X0
	044 Move X8, [X19]
	045 Move X1, X31
	046 Move X8, [X8+184]
	047 Move [X8], W0
	048 Move X0, [X22]
	049 Call Shader.PropertyToID, X0
	050 Move X8, [X19]
	051 Move X1, X31
	052 Move X8, [X8+184]
	053 Move [X8+4], W0
	054 Move X0, [X21]
	055 Call Shader.PropertyToID, X0
	056 Move X8, [X19]
	057 Move X1, X31
	058 Move X8, [X8+184]
	059 Move [X8+8], W0
	060 Move X0, [X20]
	061 Call Shader.PropertyToID, X0
	062 Move X8, [X19]
	063 Move X9, -19005440
	064 Move V0, [X9+150]
	065 Move X10, -19009536
	066 Move X9, [X8+184]
	067 Move X20, [X31+48]
	068 Move X19, [X31+56]
	069 Move X22, [X31+32]
	070 Move X21, [X31+40]
	071 Move X24, [X31+16]
	072 Move X23, [X31+24]
	073 Move [X9+1], V0
	074 Move [X9+12], W0
	075 Move V0, [X10+255]
	076 Move X9, [X8+184]
	077 Move X10, -19005440
	078 Move [X9+2], V0
	079 Move V0, [X10+88]
	080 Move X9, [X8+184]
	081 Move X10, -19001344
	082 Move [X9+3], V0
	083 Move V0, [X10+83]
	084 Move X9, [X8+184]
	085 Move [X9+4], V0
	086 Move X8, [X8+184]
	087 NotImplemented "Instruction MOVI not yet implemented."
	088 Move W9, 0x40000000
	089 Move [X8+80], D0
	090 Move [X8+88], W9
	091 Move X30, [X31+64]
	092 Return 

