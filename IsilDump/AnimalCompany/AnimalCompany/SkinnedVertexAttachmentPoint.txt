Type: AnimalCompany.SkinnedVertexAttachmentPoint

Method: System.Void Awake()

Disassembly:
	0x01DCF934 STP X0, X1, [X31 + 0x8]
	0x01DCF938 ADD X0, X31, 0x8
	0x01DCF93C ADD X2, X31, 0x1C
	0x01DCF940 MOV X1, X20
	0x01DCF944 MOV X3, X31
	0x01DCF948 BL 0x3E642D8
	0x01DCF94C LDR X2, [X23]
	0x01DCF950 MOV X0, X21
	0x01DCF954 MOV X1, X20
	0x01DCF958 BL 0x29BD368
	0x01DCF95C LDR V1, [X31 + 0x1C]
	0x01DCF960 FCMP S0, S1
	0x01DCF964 B.EQ 0x1DCF99C
	0x01DCF968 ADRP X8, 0x2329000
	0x01DCF96C LDR X8, [X8 + 0x498]
	0x01DCF970 MOV X0, X21
	0x01DCF974 MOV X1, X20
	0x01DCF978 MOV V0.16B, V1.16B
	0x01DCF97C LDR X2, [X8]
	0x01DCF980 BL 0x29BD3F4
	0x01DCF984 CBZ X19, 0x1DCF99C
	0x01DCF988 LDR V0, [X31 + 0x1C]
	0x01DCF98C LDR X8, [X19 + 0x18]
	0x01DCF990 LDR X0, [X19 + 0x40]
	0x01DCF994 LDR X1, [X19 + 0x28]
	0x01DCF998 BLR X8
	0x01DCF99C LDP X20, X19, [X31 + 0x40]
	0x01DCF9A0 LDP X22, X21, [X31 + 0x30]
	0x01DCF9A4 LDP X30, X23, [X31 + 0x20]
	0x01DCF9A8 ADD X31, X31, 0x50
	0x01DCF9AC RET
	0x01DCF9B0 BL 0x1C16F20
	0x01DCF9B4 SUB X31, X31, 0x50
	0x01DCF9B8 STR X30, [X31 + 0x10]
	0x01DCF9BC STP X24, X23, [X31 + 0x20]
	0x01DCF9C0 STP X22, X21, [X31 + 0x30]
	0x01DCF9C4 STP X20, X19, [X31 + 0x40]
	0x01DCF9C8 ADRP X24, 0x2609000
	0x01DCF9CC LDRB W8, [X24 + 0xBE3]
	0x01DCF9D0 MOV X19, X4
	0x01DCF9D4 MOV X20, X3
	0x01DCF9D8 MOV X21, X2
	0x01DCF9DC MOV W22, W1
	0x01DCF9E0 MOV X23, X0
	0x01DCF9E4 TBNZ X8, 0x0, 0x1DCFA20
	0x01DCF9E8 ADRP X0, 0x2329000
	0x01DCF9EC LDR X0, [X0 + 0x4A0]
	0x01DCF9F0 BL 0x1C16CF4
	0x01DCF9F4 ADRP X0, 0x2329000
	0x01DCF9F8 LDR X0, [X0 + 0x4A8]
	0x01DCF9FC BL 0x1C16CF4
	0x01DCFA00 ADRP X0, 0x2329000
	0x01DCFA04 LDR X0, [X0 + 0x4B0]
	0x01DCFA08 BL 0x1C16CF4
	0x01DCFA0C ADRP X0, 0x2329000
	0x01DCFA10 LDR X0, [X0 + 0x4B8]
	0x01DCFA14 BL 0x1C16CF4
	0x01DCFA18 MOVZ W8, 0x1
	0x01DCFA1C STRB W8, [X24 + 0xBE3]
	0x01DCFA20 CMP W22, 0x0
	0x01DCFA24 MOVZ W8, 0x38
	0x01DCFA28 MOVZ W9, 0x30
	0x01DCFA2C STRB W31, [X31 + 0x1C]
	0x01DCFA30 CSEL X8, X9, X8, EQ
	0x01DCFA34 LDR X22, [X23, X8, LSL]
	0x01DCFA38 MOVZ W8, 0x28
	0x01DCFA3C MOVZ W9, 0x20
	0x01DCFA40 CSEL X8, X9, X8, EQ
	0x01DCFA44 CBZ X22, 0x1DCFB48
	0x01DCFA48 ADRP X9, 0x2329000
	0x01DCFA4C LDR X9, [X9 + 0x4A8]
	0x01DCFA50 LDR X23, [X23, X8, LSL]
	0x01DCFA54 MOV X0, X22
	0x01DCFA58 MOV X1, X21
	0x01DCFA5C LDR X2, [X9]
	0x01DCFA60 BL 0x29BA514
	0x01DCFA64 TBNZ X0, 0x0, 0x1DCFA84
	0x01DCFA68 ADRP X8, 0x2329000
	0x01DCFA6C LDR X8, [X8 + 0x4A0]
	0x01DCFA70 MOV X0, X22
	0x01DCFA74 MOV X1, X21
	0x01DCFA78 MOV W2, W31
	0x01DCFA7C LDR X3, [X8]
	0x01DCFA80 BL 0x29BA30C
	0x01DCFA84 CBZ X23, 0x1DCFB48
	0x01DCFA88 ADRP X24, 0x2329000
	0x01DCFA8C LDR X24, [X24 + 0x4B0]
	0x01DCFA90 MOV X0, X23
	0x01DCFA94 MOV X1, X31
	0x01DCFA98 BL 0x3B34C50
	0x01DCFA9C STP X0, X1, [X31]
	0x01DCFAA0 ADD X0, X31, 0x0
	0x01DCFAA4 ADD X2, X31, 0x1C
	0x01DCFAA8 MOV X1, X21
	0x01DCFAAC MOV X3, X31
	0x01DCFAB0 BL 0x3E641D0
	0x01DCFAB4 LDR X2, [X24]
	0x01DCFAB8 MOV X0, X22
	0x01DCFABC MOV X1, X21
	0x01DCFAC0 BL 0x29BA260
	0x01DCFAC4 LDRB W8, [X31 + 0x1C]
	0x01DCFAC8 AND W9, W0, 0x1
	0x01DCFACC CMP W8, W9
	0x01DCFAD0 B.EQ 0x1DCFB30
	0x01DCFAD4 ADRP X9, 0x2329000
	0x01DCFAD8 LDR X9, [X9 + 0x4B8]
	0x01DCFADC CMP W8, 0x0
	0x01DCFAE0 CSET W2, NE
	0x01DCFAE4 MOV X0, X22
	0x01DCFAE8 LDR X3, [X9]
	0x01DCFAEC MOV X1, X21
	0x01DCFAF0 BL 0x29BA2F4
	0x01DCFAF4 LDR X2, [X24]
	0x01DCFAF8 MOV X0, X22
	0x01DCFAFC MOV X1, X21
	0x01DCFB00 BL 0x29BA260
	0x01DCFB04 TBZ X0, 0x0, 0x1DCFB1C
	0x01DCFB08 CBZ X20, 0x1DCFB30
	0x01DCFB0C LDR X8, [X20 + 0x18]
	0x01DCFB10 LDR X0, [X20 + 0x40]
	0x01DCFB14 LDR X1, [X20 + 0x28]
	0x01DCFB18 B 0x1DCFB2C

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x260A000
	012 Move W8, [X20+3034]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x232A000
	019 Move X0, [X0+1120]
	020 Call 0x1C17CF4
	021 Move X0, 0x232A000
	022 Move X0, [X0+1128]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3034], W8
	026 Move X22, [X19+40]
	027 Compare X22, 0
	028 JumpIfEqual {144}
	029 Move X23, 0x232A000
	030 Move X23, [X23+1120]
	031 Move X21, 0x232A000
	032 Move X20, [X22+152]
	033 Move X0, [X23]
	034 Move X21, [X21+1128]
	035 Call 0x1C17F10
	036 Move X2, [X21]
	037 Move X1, X19
	038 Move X3, X31
	039 Move X21, X0
	040 Call Action`1<Int32Enum>..ctor, X0, X1, X2
	041 Move X0, X20
	042 Move X1, X21
	043 Move X2, X31
	044 Call Delegate.Combine, X0, X1
	045 Compare X0, 0
	046 JumpIfEqual {63}
	047 Move X21, [X23]
	048 Move X20, X0
	049 Move X1, X21
	050 Call 0x1C17E00
	051 Compare X0, 0
	052 JumpIfEqual {60}
	053 Move [X22+152], X0
	054 Move X21, [X23]
	055 Move X0, X20
	056 Move X1, X21
	057 Call 0x1C17E00
	058 Compare X0, 0
	059 JumpIfNotEqual {64}
	060 Move X0, X20
	061 Move X1, X21
	062 Call 0x1C181E0
	063 Move [X22+152], X31
	064 Move X8, [X19+40]
	065 Compare X8, 0
	066 JumpIfEqual {144}
	067 Move X20, [X8+40]
	068 Move X21, [X19+48]
	069 Add X0, X19, 64
	070 Move X1, X31
	071 Call BoneWeight.get_boneIndex0, X0
	072 Compare X21, 0
	073 JumpIfEqual {144}
	074 Move W8, [X21+24]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Compare X20, 0
	077 JumpIfEqual {144}
	078 Add X8, X21, W0
	079 Move W1, [X8+32]
	080 Move X0, X20
	081 Move X2, X31
	082 Call AvatarArmature.GetBone, X0, X1
	083 Move [X19+128], X0
	084 Compare X0, 0
	085 JumpIfEqual {144}
	086 Move X1, X31
	087 Call Transform.get_rotation, X0
	088 Move X0, X31
	089 Call Quaternion.Inverse, X0
	090 Move X0, X19
	091 Move X1, X31
	092 Move V10, V0
	093 Move V9, V1
	094 Move V8, V2
	095 Move V11, V3
	096 Call Component.get_transform, X0
	097 Compare X0, 0
	098 JumpIfEqual {144}
	099 Move X1, X31
	100 Call Transform.get_rotation, X0
	101 Multiply S4, S11, S0
	102 Multiply S5, S10, S3
	103 Multiply S16, S11, S1
	104 Multiply S17, S9, S3
	105 Multiply S21, S10, S0
	106 Multiply S22, S11, S2
	107 Multiply S23, S11, S3
	108 Multiply S3, S8, S3
	109 Multiply S6, S9, S2
	110 Multiply S7, S8, S1
	111 Multiply S18, S8, S0
	112 Multiply S20, S10, S1
	113 Multiply S1, S9, S1
	114 Add S4, S4, S5
	115 Add S5, S16, S17
	116 Add S3, S22, S3
	117 Subtract S16, S23, S21
	118 Multiply S19, S10, S2
	119 Multiply S0, S9, S0
	120 Multiply S2, S8, S2
	121 Add S4, S6, S4
	122 Add S5, S18, S5
	123 Add S3, S20, S3
	124 Subtract S1, S16, S1
	125 Subtract S4, S4, S7
	126 Subtract S5, S5, S19
	127 Subtract S0, S3, S0
	128 Subtract S1, S1, S2
	129 Move [X19+136], S4
	130 Move [X19+144], S5
	131 Move [X19+144], S0
	132 Move [X19+152], S1
	133 Move X20, [X31+64]
	134 Move X19, [X31+72]
	135 Move X22, [X31+48]
	136 Move X21, [X31+56]
	137 Move X30, [X31+32]
	138 Move X23, [X31+40]
	139 Move D9, [X31+16]
	140 Move D8, [X31+24]
	141 Move D11, [X31+80]
	142 Move D10, [X31+88]
	143 Return 
	144 Call 0x1C17F20
	145 Call 0x1C17F28

Method: System.Void OnDestroy()

Disassembly:
	0x01DCFB1C CBZ X19, 0x1DCFB30
	0x01DCFB20 LDR X8, [X19 + 0x18]
	0x01DCFB24 LDR X0, [X19 + 0x40]
	0x01DCFB28 LDR X1, [X19 + 0x28]
	0x01DCFB2C BLR X8
	0x01DCFB30 LDP X20, X19, [X31 + 0x40]
	0x01DCFB34 LDP X22, X21, [X31 + 0x30]
	0x01DCFB38 LDP X24, X23, [X31 + 0x20]
	0x01DCFB3C LDR X30, [X31 + 0x10]
	0x01DCFB40 ADD X31, X31, 0x50
	0x01DCFB44 RET
	0x01DCFB48 BL 0x1C16F20
	0x01DCFB4C SUB X31, X31, 0x30
	0x01DCFB50 STR X30, [X31 + 0x10]
	0x01DCFB54 STP X20, X19, [X31 + 0x20]
	0x01DCFB58 MOV X19, X2
	0x01DCFB5C MOV X20, X1
	0x01DCFB60 BL 0x1DCF310
	0x01DCFB64 CBZ X0, 0x1DCFB9C
	0x01DCFB68 MOV X1, X31
	0x01DCFB6C BL 0x3B34C50
	0x01DCFB70 STP X0, X1, [X31]
	0x01DCFB74 ADD X0, X31, 0x0
	0x01DCFB78 MOV X1, X20
	0x01DCFB7C MOV X2, X19
	0x01DCFB80 MOV X3, X31
	0x01DCFB84 BL 0x3E643E0
	0x01DCFB88 LDP X20, X19, [X31 + 0x20]
	0x01DCFB8C LDR X30, [X31 + 0x10]
	0x01DCFB90 AND W0, W0, 0x1
	0x01DCFB94 ADD X31, X31, 0x30
	0x01DCFB98 RET
	0x01DCFB9C BL 0x1C16F20
	0x01DCFBA0 STR X30, [X31 - 0x40]!
	0x01DCFBA4 STP X24, X23, [X31 + 0x10]
	0x01DCFBA8 STP X22, X21, [X31 + 0x20]
	0x01DCFBAC STP X20, X19, [X31 + 0x30]
	0x01DCFBB0 ADRP X20, 0x2609000
	0x01DCFBB4 ADRP X24, 0x2329000
	0x01DCFBB8 ADRP X23, 0x2329000
	0x01DCFBBC ADRP X22, 0x2329000
	0x01DCFBC0 ADRP X21, 0x2329000
	0x01DCFBC4 LDRB W8, [X20 + 0xBE6]
	0x01DCFBC8 LDR X24, [X24 + 0x4C0]
	0x01DCFBCC LDR X23, [X23 + 0x4C8]
	0x01DCFBD0 LDR X22, [X22 + 0x4D0]
	0x01DCFBD4 LDR X21, [X21 + 0x4D8]
	0x01DCFBD8 MOV X19, X0
	0x01DCFBDC TBNZ X8, 0x0, 0x1DCFC18
	0x01DCFBE0 ADRP X0, 0x2329000
	0x01DCFBE4 LDR X0, [X0 + 0x4D8]
	0x01DCFBE8 BL 0x1C16CF4
	0x01DCFBEC ADRP X0, 0x2329000
	0x01DCFBF0 LDR X0, [X0 + 0x4C8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x260A000
	008 Move W8, [X20+3035]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x232A000
	015 Move X0, [X0+1120]
	016 Call 0x1C17CF4
	017 Move X0, 0x232A000
	018 Move X0, [X0+1128]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3035], W8
	022 Move X22, [X19+40]
	023 Compare X22, 0
	024 JumpIfEqual {67}
	025 Move X23, 0x232A000
	026 Move X23, [X23+1120]
	027 Move X21, 0x232A000
	028 Move X20, [X22+152]
	029 Move X0, [X23]
	030 Move X21, [X21+1128]
	031 Call 0x1C17F10
	032 Move X2, [X21]
	033 Move X1, X19
	034 Move X3, X31
	035 Move X21, X0
	036 Call Action`1<Int32Enum>..ctor, X0, X1, X2
	037 Move X0, X20
	038 Move X1, X21
	039 Move X2, X31
	040 Call Delegate.Remove, X0, X1
	041 Compare X0, 0
	042 JumpIfEqual {59}
	043 Move X20, [X23]
	044 Move X19, X0
	045 Move X1, X20
	046 Call 0x1C17E00
	047 Compare X0, 0
	048 JumpIfEqual {56}
	049 Move [X22+152], X0
	050 Move X20, [X23]
	051 Move X0, X19
	052 Move X1, X20
	053 Call 0x1C17E00
	054 Compare X0, 0
	055 JumpIfNotEqual {60}
	056 Move X0, X19
	057 Move X1, X20
	058 Call 0x1C181E0
	059 Move [X22+152], X31
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X30, [X31+48]
	065 Move X23, [X31+56]
	066 Return 
	067 Call 0x1C17F20

Method: System.Void HandleCageMeshUpdated(AnimalCompany.AvatarSystem.AvatarRawBodyPartType partType)

Disassembly:
	0x01DCFBF4 BL 0x1C16CF4
	0x01DCFBF8 ADRP X0, 0x2329000
	0x01DCFBFC LDR X0, [X0 + 0x4D0]
	0x01DCFC00 BL 0x1C16CF4
	0x01DCFC04 ADRP X0, 0x2329000
	0x01DCFC08 LDR X0, [X0 + 0x4C0]
	0x01DCFC0C BL 0x1C16CF4
	0x01DCFC10 MOVZ W8, 0x1
	0x01DCFC14 STRB W8, [X20 + 0xBE6]
	0x01DCFC18 LDR X0, [X24]
	0x01DCFC1C BL 0x1C16F10
	0x01DCFC20 LDR X1, [X23]
	0x01DCFC24 MOV X20, X0
	0x01DCFC28 BL 0x29B9A48
	0x01DCFC2C STR X20, [X19 + 0x30]
	0x01DCFC30 LDR X0, [X24]
	0x01DCFC34 BL 0x1C16F10
	0x01DCFC38 LDR X1, [X23]
	0x01DCFC3C MOV X20, X0
	0x01DCFC40 BL 0x29B9A48
	0x01DCFC44 STR X20, [X19 + 0x38]
	0x01DCFC48 LDR X0, [X22]
	0x01DCFC4C BL 0x1C16F10
	0x01DCFC50 LDR X1, [X21]
	0x01DCFC54 MOV X20, X0
	0x01DCFC58 BL 0x29BCB54
	0x01DCFC5C STR X20, [X19 + 0x40]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move [X31+8], W31
	005 Move [X31], X31
	006 Move W8, [X0+32]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X19, X0
	009 Move X0, [X0+40]
	010 Compare X0, 0
	011 JumpIfEqual {32}
	012 Move W1, [X19+108]
	013 Add X2, X31, 0
	014 Move X3, X31
	015 Call AvatarView.TryGetCageVertexAtIndex, X0, X1, X2
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfNotEqual {28}
	020 Move V0, [X31]
	021 Move V1, [X31+8]
	022 Move V2, [X19+112]
	023 Move V3, [X19+120]
	024 Add V0, V0, V2
	025 Add S1, S1, S3
	026 Move [X19+96], D0
	027 Move [X19+104], S1
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Add X31, X31, 32
	031 Return 
	032 Call 0x1C17F20

Method: System.Void CalcPositionWithBone(System.Int32 boneIndex, ref UnityEngine.Vector3 pos)

Disassembly:
	0x01DCFC60 LDR X0, [X22]
	0x01DCFC64 BL 0x1C16F10
	0x01DCFC68 LDR X1, [X21]
	0x01DCFC6C MOV X20, X0
	0x01DCFC70 BL 0x29BCB54
	0x01DCFC74 STR X20, [X19 + 0x48]
	0x01DCFC78 MOV X0, X19
	0x01DCFC7C LDP X20, X19, [X31 + 0x30]
	0x01DCFC80 LDP X22, X21, [X31 + 0x20]
	0x01DCFC84 LDP X24, X23, [X31 + 0x10]
	0x01DCFC88 MOV X1, X31
	0x01DCFC8C LDR X30, [X31], #0x40
	0x01DCFC90 B 0x3C36C30
	0x01DCFC94 STR X30, [X31 - 0x30]!
	0x01DCFC98 STP X22, X21, [X31 + 0x10]
	0x01DCFC9C STP X20, X19, [X31 + 0x20]
	0x01DCFCA0 ADRP X20, 0x2609000
	0x01DCFCA4 ADRP X22, 0x2329000
	0x01DCFCA8 ADRP X21, 0x2324000
	0x01DCFCAC LDRB W8, [X20 + 0xBE7]
	0x01DCFCB0 LDR X22, [X22 + 0xB0]
	0x01DCFCB4 LDR X21, [X21 + 0x598]
	0x01DCFCB8 MOV X19, X0
	0x01DCFCBC TBNZ X8, 0x0, 0x1DCFCEC
	0x01DCFCC0 ADRP X0, 0x2329000
	0x01DCFCC4 LDR X0, [X0 + 0xB0]
	0x01DCFCC8 BL 0x1C16CF4
	0x01DCFCCC ADRP X0, 0x2324000
	0x01DCFCD0 LDR X0, [X0 + 0x598]
	0x01DCFCD4 BL 0x1C16CF4
	0x01DCFCD8 ADRP X0, 0x2329000
	0x01DCFCDC LDR X0, [X0 + 0x4E0]
	0x01DCFCE0 BL 0x1C16CF4
	0x01DCFCE4 MOVZ W8, 0x1
	0x01DCFCE8 STRB W8, [X20 + 0xBE7]
	0x01DCFCEC LDR X8, [X22]
	0x01DCFCF0 LDR X0, [X21]
	0x01DCFCF4 LDR X8, [X8 + 0xB8]
	0x01DCFCF8 LDR W9, [X0 + 0xE0]
	0x01DCFCFC LDR X20, [X8]
	0x01DCFD00 CBNZ W9, 0x1DCFD08
	0x01DCFD04 BL 0x1C16DFC
	0x01DCFD08 MOV X0, X20
	0x01DCFD0C MOV X1, X31
	0x01DCFD10 MOV X2, X31
	0x01DCFD14 BL 0x3C3883C
	0x01DCFD18 TBZ X0, 0x0, 0x1DCFD2C
	0x01DCFD1C LDR X8, [X22]
	0x01DCFD20 LDR X8, [X8 + 0xB8]
	0x01DCFD24 STR X19, [X8]
	0x01DCFD28 B 0x1DCFD5C
	0x01DCFD2C MOV X0, X19
	0x01DCFD30 MOV X1, X31
	0x01DCFD34 BL 0x3C32ECC
	0x01DCFD38 LDR X8, [X21]
	0x01DCFD3C MOV X20, X0
	0x01DCFD40 LDR W9, [X8 + 0xE0]
	0x01DCFD44 CBNZ W9, 0x1DCFD50
	0x01DCFD48 MOV X0, X8
	0x01DCFD4C BL 0x1C16DFC
	0x01DCFD50 MOV X0, X20
	0x01DCFD54 MOV X1, X31
	0x01DCFD58 BL 0x3C394A8
	0x01DCFD5C LDR X0, [X19 + 0x20]
	0x01DCFD60 CBZ X0, 0x1DCFD9C
	0x01DCFD64 LDR X8, [X0]
	0x01DCFD68 LDR X9, [X8 + 0x338]
	0x01DCFD6C LDR X1, [X8 + 0x340]
	0x01DCFD70 BLR X9
	0x01DCFD74 CBZ X0, 0x1DCFD9C
	0x01DCFD78 ADRP X8, 0x2329000
	0x01DCFD7C LDR X8, [X8 + 0x4E0]
	0x01DCFD80 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 432
	002 Move [X31+384], X29
	003 Move [X31+392], X30
	004 Move [X31+400], X22
	005 Move [X31+408], X21
	006 Move [X31+416], X20
	007 Move [X31+424], X19
	008 NotImplemented "Instruction MOVI not yet implemented."
	009 Move [X31+352], V0
	010 Move [X31+360], V0
	011 Move [X31+320], V0
	012 Move [X31+328], V0
	013 Move X9, [X0+40]
	014 Compare X9, 0
	015 JumpIfEqual {105}
	016 Move X8, [X0+48]
	017 Move X20, X0
	018 Compare X8, 0
	019 JumpIfEqual {105}
	020 Move W10, [X8+24]
	021 Move W21, W1
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X0, [X9+40]
	024 Compare X0, 0
	025 JumpIfEqual {105}
	026 Move X22, W21
	027 Add X8, X8, X22
	028 Move W1, [X8+32]
	029 Move X19, X2
	030 Move X2, X31
	031 Call AvatarArmature.GetBone, X0, X1
	032 Compare X0, 0
	033 JumpIfEqual {105}
	034 Add X8, X31, 192
	035 Move X1, X31
	036 Call Transform.get_localToWorldMatrix, X0
	037 Move V0, [X31+192]
	038 Move V1, [X31+208]
	039 Move V2, [X31+224]
	040 Move V3, [X31+240]
	041 Move [X31+256], V0
	042 Move [X31+264], V1
	043 Move [X31+288], V2
	044 Move [X31+296], V3
	045 Move X8, [X20+56]
	046 Compare X8, 0
	047 JumpIfEqual {105}
	048 Move W9, [X8+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Add X8, X8, X22
	051 Move V2, [X8+32]
	052 Move V3, [X8+48]
	053 Move V4, [X8+64]
	054 Move V5, [X8+80]
	055 Move V0, [X31+256]
	056 Move V1, [X31+272]
	057 Add X8, X31, 128
	058 Move [X31+192], V2
	059 Move [X31+200], V3
	060 Move [X31+224], V4
	061 Move [X31+232], V5
	062 Move [X31+64], V0
	063 Move [X31+72], V1
	064 Move V0, [X31+288]
	065 Move V1, [X31+304]
	066 Move V2, [X31+224]
	067 Move V3, [X31+240]
	068 Move V4, [X31+192]
	069 Move V5, [X31+208]
	070 Add X0, X31, 64
	071 Add X1, X31, 0
	072 Move X2, X31
	073 Move [X31+96], V0
	074 Move [X31+104], V1
	075 Move [X31+32], V2
	076 Move [X31+40], V3
	077 Move [X31], V4
	078 Move [X31+8], V5
	079 Call Matrix4x4.op_Multiply, X0, X1
	080 Move V0, [X31+128]
	081 Move V1, [X31+144]
	082 Move V2, [X31+160]
	083 Move V3, [X31+176]
	084 Add X0, X31, 320
	085 Move X1, X31
	086 Move [X31+320], V0
	087 Move [X31+328], V1
	088 Move [X31+352], V2
	089 Move [X31+360], V3
	090 Move S0, [X20+96]
	091 Move S1, [X20+100]
	092 Move V2, [X20+104]
	093 Call Matrix4x4.MultiplyPoint, X0, X1
	094 Move [X19], S0
	095 Move [X19+8], S1
	096 Move [X19+8], S2
	097 Move X20, [X31+416]
	098 Move X19, [X31+424]
	099 Move X22, [X31+400]
	100 Move X21, [X31+408]
	101 Move X29, [X31+384]
	102 Move X30, [X31+392]
	103 Add X31, X31, 432
	104 Return 
	105 Call 0x1C17F20
	106 Call 0x1C17F28

Method: System.Void LateUpdate()

Disassembly:
	0x01DCFD84 LDP X22, X21, [X31 + 0x10]
	0x01DCFD88 MOVZ W2, 0x4
	0x01DCFD8C LDR X1, [X8]
	0x01DCFD90 MOV X3, X31
	0x01DCFD94 LDR X30, [X31], #0x30
	0x01DCFD98 B 0x3C15B84
	0x01DCFD9C BL 0x1C16F20
	0x01DCFDA0 SUB X31, X31, 0x70
	0x01DCFDA4 STR X30, [X31 + 0x30]
	0x01DCFDA8 STP X24, X23, [X31 + 0x40]
	0x01DCFDAC STP X22, X21, [X31 + 0x50]
	0x01DCFDB0 STP X20, X19, [X31 + 0x60]
	0x01DCFDB4 ADRP X20, 0x2609000
	0x01DCFDB8 LDRB W8, [X20 + 0xBE9]
	0x01DCFDBC MOV X19, X0
	0x01DCFDC0 TBNZ X8, 0x0, 0x1DCFE20
	0x01DCFDC4 ADRP X0, 0x2329000
	0x01DCFDC8 LDR X0, [X0 + 0x4E8]
	0x01DCFDCC BL 0x1C16CF4
	0x01DCFDD0 ADRP X0, 0x2329000
	0x01DCFDD4 LDR X0, [X0 + 0x4F0]
	0x01DCFDD8 BL 0x1C16CF4
	0x01DCFDDC ADRP X0, 0x2329000
	0x01DCFDE0 LDR X0, [X0 + 0x4F8]
	0x01DCFDE4 BL 0x1C16CF4
	0x01DCFDE8 ADRP X0, 0x2329000
	0x01DCFDEC LDR X0, [X0 + 0x500]
	0x01DCFDF0 BL 0x1C16CF4
	0x01DCFDF4 ADRP X0, 0x2327000
	0x01DCFDF8 LDR X0, [X0 + 0x1B8]
	0x01DCFDFC BL 0x1C16CF4
	0x01DCFE00 ADRP X0, 0x2325000
	0x01DCFE04 LDR X0, [X0 + 0xFE0]
	0x01DCFE08 BL 0x1C16CF4
	0x01DCFE0C ADRP X0, 0x2324000
	0x01DCFE10 LDR X0, [X0 + 0x988]
	0x01DCFE14 BL 0x1C16CF4
	0x01DCFE18 MOVZ W8, 0x1
	0x01DCFE1C STRB W8, [X20 + 0xBE9]
	0x01DCFE20 MOVI V0.2D, 0x0
	0x01DCFE24 STR X31, [X31 + 0x20]
	0x01DCFE28 STP V0, V0, [X31]
	0x01DCFE2C LDRB W8, [X19 + 0x38]
	0x01DCFE30 CBZ W8, 0x1DCFEF8
	0x01DCFE34 LDR X0, [X19 + 0x20]
	0x01DCFE38 STRB W31, [X19 + 0x38]
	0x01DCFE3C CBZ X0, 0x1DCFF14
	0x01DCFE40 ADRP X9, 0x2324000
	0x01DCFE44 LDR X8, [X0]
	0x01DCFE48 LDR X9, [X9 + 0x988]
	0x01DCFE4C LDR X2, [X8 + 0x560]
	0x01DCFE50 LDR X1, [X9]
	0x01DCFE54 LDR X9, [X8 + 0x558]
	0x01DCFE58 BLR X9
	0x01DCFE5C LDR X0, [X19 + 0x30]
	0x01DCFE60 CBZ X0, 0x1DCFF14
	0x01DCFE64 ADRP X8, 0x2329000
	0x01DCFE68 LDR X8, [X8 + 0x4E8]
	0x01DCFE6C ADRP X23, 0x2329000
	0x01DCFE70 ADRP X24, 0x2325000
	0x01DCFE74 ADRP X22, 0x2329000
	0x01DCFE78 LDR X1, [X8]
	0x01DCFE7C LDR X23, [X23 + 0x4F8]
	0x01DCFE80 LDR X24, [X24 + 0xFE0]
	0x01DCFE84 LDR X22, [X22 + 0x4F0]
	0x01DCFE88 ADD X8, X31, 0x0
	0x01DCFE8C BL 0x2AA54BC
	0x01DCFE90 LDR X1, [X23]
	0x01DCFE94 ADD X0, X31, 0x0
	0x01DCFE98 BL 0x2C0A728
	0x01DCFE9C TBZ X0, 0x0, 0x1DCFEEC
	0x01DCFEA0 LDR X20, [X19 + 0x20]
	0x01DCFEA4 CBZ X20, 0x1DCFF10
	0x01DCFEA8 LDR X8, [X20]
	0x01DCFEAC LDR X21, [X31 + 0x18]
	0x01DCFEB0 LDR X1, [X8 + 0x550]
	0x01DCFEB4 LDR X9, [X8 + 0x548]
	0x01DCFEB8 MOV X0, X20
	0x01DCFEBC BLR X9
	0x01DCFEC0 LDR X2, [X24]
	0x01DCFEC4 MOV X1, X21
	0x01DCFEC8 MOV X3, X31
	0x01DCFECC BL 0x32274B8
	0x01DCFED0 MOV X1, X0
	0x01DCFED4 LDR X8, [X20]
	0x01DCFED8 LDR X9, [X8 + 0x558]
	0x01DCFEDC LDR X2, [X8 + 0x560]
	0x01DCFEE0 MOV X0, X20
	0x01DCFEE4 BLR X9
	0x01DCFEE8 B 0x1DCFE90
	0x01DCFEEC LDR X1, [X22]
	0x01DCFEF0 ADD X0, X31, 0x0
	0x01DCFEF4 BL 0x2C0A83C
	0x01DCFEF8 LDP X20, X19, [X31 + 0x60]
	0x01DCFEFC LDP X22, X21, [X31 + 0x50]
	0x01DCFF00 LDP X24, X23, [X31 + 0x40]
	0x01DCFF04 LDR X30, [X31 + 0x30]
	0x01DCFF08 ADD X31, X31, 0x70
	0x01DCFF0C RET
	0x01DCFF10 BL 0x1C16F20
	0x01DCFF14 BL 0x1C16F20
	0x01DCFF18 B 0x1DCFF24
	0x01DCFF1C B 0x1DCFF24
	0x01DCFF20 B 0x1DCFF24
	0x01DCFF24 MOV X19, X0
	0x01DCFF28 CMP W1, 0x1
	0x01DCFF2C B.NE 0x1DCFF58
	0x01DCFF30 MOV X0, X19
	0x01DCFF34 BL 0x3EB1AD0
	0x01DCFF38 LDR X20, [X0]
	0x01DCFF3C BL 0x3EB1AE0
	0x01DCFF40 LDR X1, [X22]
	0x01DCFF44 ADD X0, X31, 0x0
	0x01DCFF48 BL 0x2C0A83C
	0x01DCFF4C CBZ X20, 0x1DCFEF8
	0x01DCFF50 MOV X0, X20
	0x01DCFF54 BL 0x1C16F18
	0x01DCFF58 MOV X20, X31
	0x01DCFF5C B 0x1DCFF64
	0x01DCFF60 MOV X19, X0
	0x01DCFF64 LDR X1, [X22]
	0x01DCFF68 ADD X0, X31, 0x0
	0x01DCFF6C BL 0x2C0A83C
	0x01DCFF70 CBNZ X20, 0x1DCFF7C
	0x01DCFF74 MOV X0, X19
	0x01DCFF78 BL 0x1D2C690
	0x01DCFF7C MOV X0, X20
	0x01DCFF80 BL 0x1C16F18
	0x01DCFF84 BL 0x1990590
	0x01DCFF88 STR X30, [X31 - 0x30]!
	0x01DCFF8C STP X22, X21, [X31 + 0x10]
	0x01DCFF90 STP X20, X19, [X31 + 0x20]
	0x01DCFF94 ADRP X21, 0x2609000
	0x01DCFF98 ADRP X22, 0x2325000
	0x01DCFF9C ADRP X20, 0x2325000
	0x01DCFFA0 LDRB W8, [X21 + 0xBEA]
	0x01DCFFA4 LDR X22, [X22 + 0x6D0]
	0x01DCFFA8 LDR X20, [X20 + 0x6C0]
	0x01DCFFAC MOV X19, X0
	0x01DCFFB0 TBNZ X8, 0x0, 0x1DCFFD4
	0x01DCFFB4 ADRP X0, 0x2325000
	0x01DCFFB8 LDR X0, [X0 + 0x6C0]
	0x01DCFFBC BL 0x1C16CF4
	0x01DCFFC0 ADRP X0, 0x2325000
	0x01DCFFC4 LDR X0, [X0 + 0x6D0]
	0x01DCFFC8 BL 0x1C16CF4
	0x01DCFFCC MOVZ W8, 0x1
	0x01DCFFD0 STRB W8, [X21 + 0xBEA]
	0x01DCFFD4 LDR X0, [X22]
	0x01DCFFD8 BL 0x1C16F10
	0x01DCFFDC LDR X1, [X20]
	0x01DCFFE0 MOV X20, X0
	0x01DCFFE4 BL 0x2AA4804
	0x01DCFFE8 STR X20, [X19 + 0x30]
	0x01DCFFEC MOV X0, X19
	0x01DCFFF0 LDP X20, X19, [X31 + 0x20]
	0x01DCFFF4 LDP X22, X21, [X31 + 0x10]
	0x01DCFFF8 MOV X1, X31
	0x01DCFFFC LDR X30, [X31], #0x30
	0x01DD0000 B 0x3C36C30
	0x01DD0004 MOV X1, X31
	0x01DD0008 B 0x3C36C30
	0x01DD000C STP X30, X21, [X31 - 0x20]!
	0x01DD0010 STP X20, X19, [X31 + 0x10]
	0x01DD0014 ADRP X20, 0x2608000
	0x01DD0018 LDRB W8, [X20 + 0xBEB]
	0x01DD001C MOV X19, X0
	0x01DD0020 TBNZ X8, 0x0, 0x1DD0038
	0x01DD0024 ADRP X0, 0x2325000
	0x01DD0028 LDR X0, [X0 + 0x790]
	0x01DD002C BL 0x1C16CF4
	0x01DD0030 MOVZ W8, 0x1
	0x01DD0034 STRB W8, [X20 + 0xBEB]
	0x01DD0038 LDR X0, [X19 + 0x20]
	0x01DD003C CBZ X0, 0x1DD00A8
	0x01DD0040 ADRP X8, 0x2325000
	0x01DD0044 LDR X8, [X8 + 0x790]
	0x01DD0048 LDR X1, [X8]
	0x01DD004C BL 0x21E5F08
	0x01DD0050 CBZ X0, 0x1DD00A8
	0x01DD0054 LDR W8, [X0 + 0x18]
	0x01DD0058 MOV X20, X0
	0x01DD005C CMP W8, 0x1
	0x01DD0060 B.LT 0x1DD0098
	0x01DD0064 MOV W21, W31
	0x01DD0068 CMP W21, W8
	0x01DD006C B.CS 0x1DD00A4
	0x01DD0070 ADD X8, X20, W21, 0x3, SXTW
	0x01DD0074 LDR X0, [X8 + 0x20]
	0x01DD0078 CBZ X0, 0x1DD00A8
	0x01DD007C LDR X1, [X19 + 0x28]
	0x01DD0080 MOV X2, X31
	0x01DD0084 BL 0x3C13418
	0x01DD0088 LDR W8, [X20 + 0x18]
	0x01DD008C ADD W21, W21, 0x1

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+120], X21
	012 Move [X31+128], X20
	013 Move [X31+136], X19
	014 Add X20, X0, 64
	015 Move X19, X0
	016 Move X0, X20
	017 Move X1, X31
	018 Call BoneWeight.get_weight0, X0
	019 NotImplemented "Instruction FCMP not yet implemented."
	020 Move X0, X20
	021 Move X1, X31
	022 Call BoneWeight.get_boneIndex0, X0
	023 Move X8, [X19+152]
	024 Compare X8, 0
	025 JumpIfEqual {213}
	026 Move W9, [X8+24]
	027 Compare W9, 0
	028 JumpIfEqual {214}
	029 Move W1, W0
	030 Add X2, X8, 32
	031 Move X0, X19
	032 Call SkinnedVertexAttachmentPoint.CalcPositionWithBone, X0, X1, X2
	033 Move X0, X20
	034 Move X1, X31
	035 Call BoneWeight.get_weight1, X0
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 Move X0, X20
	038 Move X1, X31
	039 Call BoneWeight.get_boneIndex1, X0
	040 Move X8, [X19+152]
	041 Compare X8, 0
	042 JumpIfEqual {213}
	043 Move W9, [X8+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move W1, W0
	046 Add X2, X8, 44
	047 Move X0, X19
	048 Call SkinnedVertexAttachmentPoint.CalcPositionWithBone, X0, X1, X2
	049 Move X0, X20
	050 Move X1, X31
	051 Call BoneWeight.get_weight2, X0
	052 NotImplemented "Instruction FCMP not yet implemented."
	053 Move X0, X20
	054 Move X1, X31
	055 Call BoneWeight.get_boneIndex2, X0
	056 Move X8, [X19+152]
	057 Compare X8, 0
	058 JumpIfEqual {213}
	059 Move W9, [X8+24]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move W1, W0
	062 Add X2, X8, 56
	063 Move X0, X19
	064 Call SkinnedVertexAttachmentPoint.CalcPositionWithBone, X0, X1, X2
	065 Move X0, X20
	066 Move X1, X31
	067 Call BoneWeight.get_weight3, X0
	068 NotImplemented "Instruction FCMP not yet implemented."
	069 Move X0, X20
	070 Move X1, X31
	071 Call BoneWeight.get_boneIndex3, X0
	072 Move X8, [X19+152]
	073 Compare X8, 0
	074 JumpIfEqual {213}
	075 Move W9, [X8+24]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move W1, W0
	078 Add X2, X8, 68
	079 Move X0, X19
	080 Call SkinnedVertexAttachmentPoint.CalcPositionWithBone, X0, X1, X2
	081 Move X0, X19
	082 Move X1, X31
	083 Call Component.get_transform, X0
	084 Move X8, [X19+152]
	085 Compare X8, 0
	086 JumpIfEqual {213}
	087 Move W9, [X8+24]
	088 Compare W9, 0
	089 JumpIfEqual {214}
	090 Move V8, [X8+32]
	091 Move V9, [X8+40]
	092 Move X21, X0
	093 Move X0, X20
	094 Move X1, X31
	095 Call BoneWeight.get_weight0, X0
	096 Move X8, [X19+152]
	097 Compare X8, 0
	098 JumpIfEqual {213}
	099 Move W9, [X8+24]
	100 Move [X31+2], V0
	101 NotImplemented "Instruction CMP not yet implemented."
	102 NotImplemented "Instruction LDUR not yet implemented."
	103 Move V11, [X8+52]
	104 Move X0, X20
	105 Move X1, X31
	106 Call BoneWeight.get_weight1, X0
	107 Move X8, [X19+152]
	108 Compare X8, 0
	109 JumpIfEqual {213}
	110 Move W9, [X8+24]
	111 Move [X31+1], V0
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move V12, [X8+56]
	114 Move V13, [X8+64]
	115 Move X0, X20
	116 Move X1, X31
	117 Call BoneWeight.get_weight2, X0
	118 Move X8, [X19+152]
	119 Compare X8, 0
	120 JumpIfEqual {213}
	121 Move W9, [X8+24]
	122 Move [X31], V0
	123 NotImplemented "Instruction CMP not yet implemented."
	124 NotImplemented "Instruction LDUR not yet implemented."
	125 Move V15, [X8+76]
	126 Move X0, X20
	127 Move X1, X31
	128 Call BoneWeight.get_weight3, X0
	129 Compare X21, 0
	130 JumpIfEqual {213}
	131 Move V4, [X31+16]
	132 Move V2, [X31+32]
	133 Move V6, [X31]
	134 Multiply S7, S15, S0
	135 NotImplemented "Instruction INVALID not yet implemented."
	136 NotImplemented "Instruction INVALID not yet implemented."
	137 NotImplemented "Instruction INVALID not yet implemented."
	138 Multiply S2, S9, S2
	139 Multiply S4, S11, S4
	140 NotImplemented "Instruction INVALID not yet implemented."
	141 Add V1, V1, V3
	142 Multiply S6, S13, S6
	143 Add S2, S2, S4
	144 Add V1, V1, V5
	145 Add S2, S2, S6
	146 Add V0, V1, V0
	147 Add S2, S2, S7
	148 Move S1, V0.S[1]
	149 Move X0, X21
	150 Move X1, X31
	151 Call Transform.set_position, X0, X1
	152 Move X0, X19
	153 Move X1, X31
	154 Call Component.get_transform, X0
	155 Move X8, [X19+128]
	156 Compare X8, 0
	157 JumpIfEqual {213}
	158 Move X20, X0
	159 Move X0, X8
	160 Move X1, X31
	161 Call Transform.get_rotation, X0
	162 Compare X20, 0
	163 JumpIfEqual {213}
	164 Move S7, [X19+144]
	165 Move S4, [X19+148]
	166 Move S5, [X19+136]
	167 Move S6, [X19+140]
	168 Move X0, X20
	169 Move X20, [X31+128]
	170 Move X19, [X31+136]
	171 Multiply S16, S3, S4
	172 Multiply S17, S0, S5
	173 Multiply S18, S1, S6
	174 Multiply S19, S2, S7
	175 Multiply S20, S0, S6
	176 Multiply S21, S3, S7
	177 Multiply S22, S2, S4
	178 Multiply S23, S1, S5
	179 Multiply S24, S1, S4
	180 Multiply S1, S1, S7
	181 Multiply S7, S0, S7
	182 Multiply S0, S0, S4
	183 Multiply S4, S2, S5
	184 Multiply S5, S3, S5
	185 Multiply S3, S3, S6
	186 Move X30, [X31+112]
	187 Move X21, [X31+120]
	188 Move D9, [X31+96]
	189 Move D8, [X31+104]
	190 Move D11, [X31+80]
	191 Move D10, [X31+88]
	192 Move D13, [X31+64]
	193 Move D12, [X31+72]
	194 Move D15, [X31+48]
	195 Move D14, [X31+56]
	196 Multiply S6, S2, S6
	197 Subtract S2, S16, S17
	198 Add S16, S21, S22
	199 Add S3, S3, S24
	200 Add S0, S5, S0
	201 Subtract S2, S2, S18
	202 Add S5, S20, S16
	203 Add S4, S4, S3
	204 Add S0, S1, S0
	205 Subtract S3, S2, S19
	206 Subtract S2, S5, S23
	207 Subtract S1, S4, S7
	208 Subtract S0, S0, S6
	209 Move X1, X31
	210 Add X31, X31, 144
	211 Call Transform.set_rotation, X0, X1
	212 Return 
	213 Call 0x1C17F20
	214 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x01DD0090 CMP W21, W8
	0x01DD0094 B.LT 0x1DD0068
	0x01DD0098 LDP X20, X19, [X31 + 0x10]
	0x01DD009C LDP X30, X21, [X31], #0x20
	0x01DD00A0 RET
	0x01DD00A4 BL 0x1C16F28
	0x01DD00A8 BL 0x1C16F20
	0x01DD00AC MOV X1, X31
	0x01DD00B0 B 0x3C36C30
	0x01DD00B4 STP X30, X19, [X31 - 0x10]!
	0x01DD00B8 ADRP X19, 0x2608000
	0x01DD00BC LDRB W8, [X19 + 0xABF]
	0x01DD00C0 CBNZ W8, 0x1DD00D8
	0x01DD00C4 ADRP X0, 0x2326000
	0x01DD00C8 LDR X0, [X0 + 0xD28]
	0x01DD00CC BL 0x1C16CF4
	0x01DD00D0 MOVZ W8, 0x1
	0x01DD00D4 STRB W8, [X19 + 0xABF]
	0x01DD00D8 ADRP X8, 0x2326000
	0x01DD00DC LDR X8, [X8 + 0xD28]
	0x01DD00E0 LDR X8, [X8]
	0x01DD00E4 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2609000
	006 Move X21, 0x2326000
	007 Move W8, [X20+3036]
	008 Move X21, [X21+2480]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2326000
	015 Move X0, [X0+2480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3036], W8
	019 Move X0, [X21]
	020 Move W1, 4
	021 Call 0x1C17D6C
	022 Move [X19+152], X0
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X1, X31
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call MonoBehaviour..ctor, X0
	030 Return 

