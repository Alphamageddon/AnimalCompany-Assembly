Type: AnimalCompany.FakeGorillaController

Method: AnimalCompany.FakeGorillaController/Phase get_phase()

Disassembly:
	0x01DEFAE0 MOV X0, X19
	0x01DEFAE4 LDP X20, X19, [X31 + 0x10]
	0x01DEFAE8 MOVZ W1, 0x1
	0x01DEFAEC LDR X3, [X8 + 0x318]
	0x01DEFAF0 LDR X2, [X8 + 0x320]
	0x01DEFAF4 LDP X30, X21, [X31], #0x20
	0x01DEFAF8 BR X3
	0x01DEFAFC MOV X0, X31
	0x01DEFB00 LDR W1, [X19 + 0x68]
	0x01DEFB04 MOVZ W2, 0x2
	0x01DEFB08 MOV X3, X31
	0x01DEFB0C BL 0x1E9C23C
	0x01DEFB10 STUR X0, [X21 + 0x1C]
	0x01DEFB14 STR W20, [X21 + 0x24]
	0x01DEFB18 CBZ X21, 0x1DEFB3C
	0x01DEFB1C MOVZ W8, 0x60
	0x01DEFB20 STR W8, [X21 + 0xC]
	0x01DEFB24 LDR X0, [X19 + 0x38]
	0x01DEFB28 CBZ X0, 0x1DEFB3C
	0x01DEFB2C MOV X1, X21
	0x01DEFB30 MOV X2, X31
	0x01DEFB34 BL 0x1EA1E24
	0x01DEFB38 B 0x1DEF988
	0x01DEFB3C BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+60]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2305000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x230B000
	016 Move X0, [X0+120]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x230B000
	023 Move X0, [X0+128]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_phase(AnimalCompany.FakeGorillaController/Phase value)

Disassembly:
	0x01DEFB40 STP X30, X19, [X31 - 0x10]!
	0x01DEFB44 LDR X8, [X0 + 0x50]
	0x01DEFB48 CBZ X8, 0x1DEFB58
	0x01DEFB4C LDR W0, [X8 + 0xC]
	0x01DEFB50 LDP X30, X19, [X31], #0x10
	0x01DEFB54 RET
	0x01DEFB58 ADRP X0, 0x2304000
	0x01DEFB5C LDR X0, [X0 + 0x5B0]
	0x01DEFB60 BL 0x1C16D08
	0x01DEFB64 BL 0x1C16F10
	0x01DEFB68 MOV X19, X0
	0x01DEFB6C ADRP X0, 0x230A000
	0x01DEFB70 LDR X0, [X0 + 0x138]
	0x01DEFB74 BL 0x1C16D08
	0x01DEFB78 MOV X1, X0
	0x01DEFB7C MOV X0, X19
	0x01DEFB80 MOV X2, X31
	0x01DEFB84 BL 0x337DF1C
	0x01DEFB88 ADRP X0, 0x230A000
	0x01DEFB8C LDR X0, [X0 + 0x140]
	0x01DEFB90 BL 0x1C16D08
	0x01DEFB94 MOV X1, X0
	0x01DEFB98 MOV X0, X19
	0x01DEFB9C BL 0x1C16DEC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+60], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2305000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x230B000
	016 Move X0, [X0+120]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x230B000
	023 Move X0, [X0+136]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: UnityEngine.Color get_playerColor()

Disassembly:
	0x01DEFBA0 SUB X31, X31, 0x60
	0x01DEFBA4 STP D11, D10, [X31 + 0x10]
	0x01DEFBA8 STP D9, D8, [X31 + 0x20]
	0x01DEFBAC STP X30, X23, [X31 + 0x30]
	0x01DEFBB0 STP X22, X21, [X31 + 0x40]
	0x01DEFBB4 STP X20, X19, [X31 + 0x50]
	0x01DEFBB8 ADRP X19, 0x25E9000
	0x01DEFBBC ADRP X21, 0x2309000
	0x01DEFBC0 LDRB W8, [X19 + 0xD1E]
	0x01DEFBC4 LDR X21, [X21 + 0xC40]
	0x01DEFBC8 MOV V8.16B, V3.16B
	0x01DEFBCC MOV V9.16B, V2.16B
	0x01DEFBD0 MOV V10.16B, V1.16B
	0x01DEFBD4 MOV V11.16B, V0.16B
	0x01DEFBD8 TBNZ X8, 0x0, 0x1DEFC2C
	0x01DEFBDC ADRP X0, 0x230A000
	0x01DEFBE0 LDR X0, [X0 + 0x148]
	0x01DEFBE4 BL 0x1C16CF4
	0x01DEFBE8 ADRP X0, 0x2304000
	0x01DEFBEC LDR X0, [X0 + 0x5D8]
	0x01DEFBF0 BL 0x1C16CF4
	0x01DEFBF4 ADRP X0, 0x230A000
	0x01DEFBF8 LDR X0, [X0 + 0x150]
	0x01DEFBFC BL 0x1C16CF4
	0x01DEFC00 ADRP X0, 0x230A000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {13}
	006 Move S0, [X8+64]
	007 Move S1, [X8+68]
	008 Move S2, [X8+72]
	009 Move S3, [X8+76]
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0
	013 Move X0, 0x2305000
	014 Move X0, [X0+1456]
	015 Call 0x1C17D08
	016 Call 0x1C17F10
	017 Move X19, X0
	018 Move X0, 0x230B000
	019 Move X0, [X0+144]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X19
	023 Move X2, X31
	024 Call InvalidOperationException..ctor, X0, X1
	025 Move X0, 0x230B000
	026 Move X0, [X0+152]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X19
	030 Call 0x1C17DEC

Method: System.Void set_playerColor(UnityEngine.Color value)

Disassembly:
	0x01DEFC04 LDR X0, [X0 + 0x158]
	0x01DEFC08 BL 0x1C16CF4
	0x01DEFC0C ADRP X0, 0x2309000
	0x01DEFC10 LDR X0, [X0 + 0xC40]
	0x01DEFC14 BL 0x1C16CF4
	0x01DEFC18 ADRP X0, 0x2304000
	0x01DEFC1C LDR X0, [X0 + 0x5F8]
	0x01DEFC20 BL 0x1C16CF4
	0x01DEFC24 MOVZ W8, 0x1
	0x01DEFC28 STRB W8, [X19 + 0xD1E]
	0x01DEFC2C LDR X0, [X21]
	0x01DEFC30 STR X31, [X31 + 0x8]
	0x01DEFC34 LDR W8, [X0 + 0xE0]
	0x01DEFC38 CBNZ W8, 0x1DEFC44
	0x01DEFC3C BL 0x1C16DFC
	0x01DEFC40 LDR X0, [X21]
	0x01DEFC44 LDR X8, [X0 + 0xB8]
	0x01DEFC48 LDR X9, [X8]
	0x01DEFC4C CBZ X9, 0x1DEFE20
	0x01DEFC50 LDP W2, W10, [X9 + 0x18]
	0x01DEFC54 ADRP X20, 0x2304000
	0x01DEFC58 LDR X20, [X20 + 0x5D8]
	0x01DEFC5C ADD W10, W10, 0x1
	0x01DEFC60 CMP W2, 0x1
	0x01DEFC64 STP W31, W10, [X9 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {13}
	006 Move [X8+64], S0
	007 Move [X8+72], S1
	008 Move [X8+72], S2
	009 Move [X8+80], S3
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Move X0, 0x2305000
	014 Move X0, [X0+1456]
	015 Call 0x1C17D08
	016 Call 0x1C17F10
	017 Move X19, X0
	018 Move X0, 0x230B000
	019 Move X0, [X0+144]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X19
	023 Move X2, X31
	024 Call InvalidOperationException..ctor, X0, X1
	025 Move X0, 0x230B000
	026 Move X0, [X0+160]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X19
	030 Call 0x1C17DEC

Method: UnityEngine.Vector3 get_positionAngry()

Disassembly:
	0x01DEFC68 B.LT 0x1DEFC84
	0x01DEFC6C LDR X0, [X9 + 0x10]
	0x01DEFC70 MOV W1, W31
	0x01DEFC74 MOV X3, X31
	0x01DEFC78 BL 0x339FA34
	0x01DEFC7C LDR X8, [X21]
	0x01DEFC80 LDR X8, [X8 + 0xB8]
	0x01DEFC84 LDR X0, [X20]
	0x01DEFC88 ADRP X22, 0x2304000
	0x01DEFC8C LDR X19, [X8 + 0x8]
	0x01DEFC90 LDR W9, [X0 + 0xE0]
	0x01DEFC94 LDR X22, [X22 + 0x5F8]
	0x01DEFC98 CBNZ W9, 0x1DEFCA4
	0x01DEFC9C BL 0x1C16DFC
	0x01DEFCA0 LDR X0, [X20]
	0x01DEFCA4 LDR X8, [X0 + 0xB8]
	0x01DEFCA8 MOV X1, X31
	0x01DEFCAC LDR W0, [X8 + 0xC]
	0x01DEFCB0 BL 0x3C35CB8
	0x01DEFCB4 LDR X8, [X22]
	0x01DEFCB8 MOV W20, W0
	0x01DEFCBC LDR W9, [X8 + 0xE0]
	0x01DEFCC0 CBNZ W9, 0x1DEFCCC
	0x01DEFCC4 MOV X0, X8
	0x01DEFCC8 BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move S0, [X8+80]
	007 Move S1, [X8+84]
	008 Move V2, [X8+88]
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2305000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x230B000
	018 Move X0, [X0+168]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x230B000
	025 Move X0, [X0+176]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_positionAngry(UnityEngine.Vector3 value)

Disassembly:
	0x01DEFCCC MOV V0.16B, V11.16B
	0x01DEFCD0 MOV V1.16B, V10.16B
	0x01DEFCD4 MOV V2.16B, V9.16B
	0x01DEFCD8 MOV V3.16B, V8.16B
	0x01DEFCDC MOV X0, X19
	0x01DEFCE0 MOV W1, W20
	0x01DEFCE4 MOV X2, X31
	0x01DEFCE8 BL 0x3C8D760
	0x01DEFCEC LDR X8, [X21]
	0x01DEFCF0 LDR X9, [X8 + 0xB8]
	0x01DEFCF4 LDR X9, [X9 + 0x8]
	0x01DEFCF8 CBZ X9, 0x1DEFE20
	0x01DEFCFC LDR W9, [X9 + 0x18]
	0x01DEFD00 ADRP X20, 0x230A000
	0x01DEFD04 ADRP X22, 0x230A000
	0x01DEFD08 LDR X20, [X20 + 0x148]
	0x01DEFD0C LDR X22, [X22 + 0x150]
	0x01DEFD10 CMP W0, W9
	0x01DEFD14 CSEL W9, W0, W9, LT
	0x01DEFD18 MOV W19, W31
	0x01DEFD1C BIC W23, W9, W9, 0x1F
	0x01DEFD20 LDR W9, [X8 + 0xE0]
	0x01DEFD24 CBNZ W9, 0x1DEFD34
	0x01DEFD28 MOV X0, X8
	0x01DEFD2C BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move [X8+80], S0
	007 Move [X8+88], S1
	008 Move [X8+88], S2
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 
	012 Move X0, 0x2305000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x230B000
	018 Move X0, [X0+168]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x230B000
	025 Move X0, [X0+184]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Single get_RADIUS_BODY()

Disassembly:
	0x01DEFD30 LDR X8, [X21]
	0x01DEFD34 LDR X8, [X8 + 0xB8]
	0x01DEFD38 CMP W23, W19
	0x01DEFD3C B.EQ 0x1DEFE00
	0x01DEFD40 LDR X8, [X8 + 0x8]
	0x01DEFD44 CBZ X8, 0x1DEFE20
	0x01DEFD48 LDR W9, [X8 + 0x18]
	0x01DEFD4C CMP W19, W9
	0x01DEFD50 B.CS 0x1DEFE24
	0x01DEFD54 ADD X8, X8, W19, 0x3, SXTW
	0x01DEFD58 LDR X0, [X8 + 0x20]
	0x01DEFD5C CBZ X0, 0x1DEFE20
	0x01DEFD60 LDR X2, [X20]
	0x01DEFD64 ADD X1, X31, 0x8
	0x01DEFD68 BL 0x21A4990
	0x01DEFD6C TBZ X0, 0x0, 0x1DEFDF4
	0x01DEFD70 LDR X0, [X31 + 0x8]
	0x01DEFD74 CBZ X0, 0x1DEFE20
	0x01DEFD78 MOV X1, X31
	0x01DEFD7C BL 0x1DB193C
	0x01DEFD80 TBNZ X0, 0x0, 0x1DEFDF4
	0x01DEFD84 LDR X0, [X21]
	0x01DEFD88 LDR W8, [X0 + 0xE0]
	0x01DEFD8C CBNZ W8, 0x1DEFD98
	0x01DEFD90 BL 0x1C16DFC
	0x01DEFD94 LDR X0, [X21]
	0x01DEFD98 LDR X8, [X0 + 0xB8]
	0x01DEFD9C LDR X0, [X8]
	0x01DEFDA0 CBZ X0, 0x1DEFE20
	0x01DEFDA4 LDR W10, [X0 + 0x1C]
	0x01DEFDA8 LDR X1, [X31 + 0x8]
	0x01DEFDAC LDR X8, [X0 + 0x10]
	0x01DEFDB0 LDR X9, [X22]
	0x01DEFDB4 ADD W10, W10, 0x1
	0x01DEFDB8 STR W10, [X0 + 0x1C]
	0x01DEFDBC CBZ X8, 0x1DEFE20
	0x01DEFDC0 LDRSW X10, [X0 + 0x18]
	0x01DEFDC4 LDR W11, [X8 + 0x18]
	0x01DEFDC8 CMP W10, W11
	0x01DEFDCC B.CS 0x1DEFDE4
	0x01DEFDD0 ADD W9, W10, 0x1
	0x01DEFDD4 ADD X8, X8, X10, 0x3, LSL
	0x01DEFDD8 STR W9, [X0 + 0x18]
	0x01DEFDDC STR X1, [X8 + 0x20]
	0x01DEFDE0 B 0x1DEFDF4
	0x01DEFDE4 LDR X8, [X9 + 0x20]
	0x01DEFDE8 LDR X8, [X8 + 0xC0]
	0x01DEFDEC LDR X2, [X8 + 0x70]
	0x01DEFDF0 BL 0x301BF90
	0x01DEFDF4 LDR X8, [X21]
	0x01DEFDF8 ADD W19, W19, 0x1
	0x01DEFDFC B 0x1DEFD20
	0x01DEFE00 LDR X0, [X8]
	0x01DEFE04 LDP X20, X19, [X31 + 0x50]
	0x01DEFE08 LDP X22, X21, [X31 + 0x40]
	0x01DEFE0C LDP X30, X23, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25EA000
	005 Move W8, [X20+3287]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x230B000
	012 Move X0, [X0+192]
	013 Call 0x1C17CF4
	014 Move X0, 0x230B000
	015 Move X0, [X0+200]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3287], W8
	019 Move X0, [X19+464]
	020 Compare X0, 0
	021 JumpIfEqual {43}
	022 Move X9, 0x230B000
	023 Move X9, [X9+192]
	024 Move X8, [X0]
	025 Move X10, [X9]
	026 Move W9, [X8+304]
	027 Move W11, [X10+304]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X12, [X8+200]
	030 Add X11, X12, X11
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X10, 0x230B000
	034 Move X10, [X10+200]
	035 Move X10, [X10]
	036 Move W11, [X10+304]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X8, [X8+200]
	039 Add X8, X8, X11
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 Move X8, -19939328
	044 Move V0, [X8+1100]
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Return V0
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X1, X31
	052 Move X30, [X31+32]
	053 Call CapsuleCollider.get_radius, X0
	054 Return V0
	055 Compare X0, 0
	056 JumpIfEqual {63}
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X1, X31
	060 Move X30, [X31+32]
	061 Call SphereCollider.get_radius, X0
	062 Return V0
	063 Call 0x1C17F20

Method: System.Single get_RADIUS_ARM_RANGE()

Disassembly:
	0x01DEFE10 LDP D9, D8, [X31 + 0x20]
	0x01DEFE14 LDP D11, D10, [X31 + 0x10]
	0x01DEFE18 ADD X31, X31, 0x60
	0x01DEFE1C RET
	0x01DEFE20 BL 0x1C16F20
	0x01DEFE24 BL 0x1C16F28
	0x01DEFE28 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+472]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call SphereCollider.get_radius, X0
	008 Return V0
	009 Call 0x1C17F20

Method: System.Single get__timeToLoseAnger()

Disassembly:
	0x01DEFE2C MOV X19, X0
	0x01DEFE30 BL 0x1DF3200
	0x01DEFE34 MOVZ W1, 0x4
	0x01DEFE38 MOV X0, X19
	0x01DEFE3C BL 0x1DEEB40
	0x01DEFE40 MOVZ W8, 0x1
	0x01DEFE44 STRB W8, [X19 + 0xF1]
	0x01DEFE48 LDP X30, X19, [X31], #0x10
	0x01DEFE4C RET
	0x01DEFE50 STR D10, [X31 - 0x30]!

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+56]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X1, X31
	006 Call NetworkRunner.get_DeltaTime, X0
	007 Move S1, 10
	008 NotImplemented "Instruction FDIV not yet implemented."
	009 Move X30, [X31+16]
	010 Return V0
	011 Call 0x1C17F20

Method: Fusion.NetworkDictionary`2<System.UInt32, System.Single> get__angerMetersByPlayerId()

Disassembly:
	0x01DEFE54 STP D9, D8, [X31 + 0x10]
	0x01DEFE58 STP X30, X19, [X31 + 0x20]
	0x01DEFE5C LDR X8, [X0]
	0x01DEFE60 MOV V8.16B, V5.16B
	0x01DEFE64 MOV V9.16B, V4.16B
	0x01DEFE68 MOV V10.16B, V3.16B
	0x01DEFE6C LDR X9, [X8 + 0x3D8]
	0x01DEFE70 LDR X2, [X8 + 0x3E0]
	0x01DEFE74 MOV X19, X0
	0x01DEFE78 BLR X9
	0x01DEFE7C STR S10, [X19 + 0x218]
	0x01DEFE80 STR S9, [X19 + 0x21C]
	0x01DEFE84 STR S8, [X19 + 0x220]
	0x01DEFE88 LDP X30, X19, [X31 + 0x20]
	0x01DEFE8C LDP D9, D8, [X31 + 0x10]
	0x01DEFE90 LDR V10, [X31], #0x30
	0x01DEFE94 RET
	0x01DEFE98 LDR X8, [X0]
	0x01DEFE9C LDR X3, [X8 + 0x3D8]
	0x01DEFEA0 LDR X2, [X8 + 0x3E0]
	0x01DEFEA4 BR X3
	0x01DEFEA8 STP X30, X19, [X31 - 0x10]!
	0x01DEFEAC MOV X19, X0
	0x01DEFEB0 BL 0x1DE89FC
	0x01DEFEB4 LDR X0, [X19 + 0x1F8]
	0x01DEFEB8 CBZ X0, 0x1DEFEE8
	0x01DEFEBC BL 0x1DEFEEC
	0x01DEFEC0 LDR X0, [X19 + 0x40]
	0x01DEFEC4 CBZ X0, 0x1DEFEE8
	0x01DEFEC8 MOV X1, X31
	0x01DEFECC BL 0x1E93668
	0x01DEFED0 TBZ X0, 0x0, 0x1DEFEE0
	0x01DEFED4 MOV X0, X19
	0x01DEFED8 LDP X30, X19, [X31], #0x10
	0x01DEFEDC B 0x1DEF22C
	0x01DEFEE0 LDP X30, X19, [X31], #0x10
	0x01DEFEE4 RET
	0x01DEFEE8 BL 0x1C16F20
	0x01DEFEEC STP X30, X21, [X31 - 0x20]!
	0x01DEFEF0 STP X20, X19, [X31 + 0x10]
	0x01DEFEF4 ADRP X21, 0x25E9000
	0x01DEFEF8 ADRP X20, 0x2304000
	0x01DEFEFC LDRB W8, [X21 + 0xCF0]
	0x01DEFF00 LDR X20, [X20 + 0x598]
	0x01DEFF04 MOV X19, X0
	0x01DEFF08 TBNZ X8, 0x0, 0x1DEFF20
	0x01DEFF0C ADRP X0, 0x2304000
	0x01DEFF10 LDR X0, [X0 + 0x598]
	0x01DEFF14 BL 0x1C16CF4
	0x01DEFF18 MOVZ W8, 0x1
	0x01DEFF1C STRB W8, [X21 + 0xCF0]
	0x01DEFF20 LDR X0, [X20]
	0x01DEFF24 LDR X20, [X19 + 0xB8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25EA000
	007 Move W9, [X21+3288]
	008 Move X20, X0
	009 Move X19, X8
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x230B000
	015 Move X0, [X0+208]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3288], W8
	019 Move X21, [X20+80]
	020 Compare X21, 0
	021 JumpIfEqual {47}
	022 Move X22, 0x230B000
	023 Move X22, [X22+208]
	024 Move X0, X31
	025 Call ReaderWriter@System_UInt32.GetInstance
	026 Move X20, X0
	027 Move X0, X31
	028 Call ReaderWriter@System_Single.GetInstance
	029 NotImplemented "Instruction MOVI not yet implemented."
	030 Move X4, X0
	031 Move X5, [X22]
	032 Move [X19], V0
	033 Move [X19+8], V0
	034 Add X1, X21, 92
	035 Move [X19+32], V0
	036 Move [X19+40], V0
	037 Move X0, X19
	038 Move X3, X20
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move W2, 17
	044 Move X30, [X31+48]
	045 Call 0x241682C, X0, X1, X2, X3, X4
	046 Return X0
	047 Move X0, 0x2305000
	048 Move X0, [X0+1456]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X19, X0
	052 Move X0, 0x230B000
	053 Move X0, [X0+216]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Move X2, X31
	058 Call InvalidOperationException..ctor, X0, X1
	059 Move X0, 0x230B000
	060 Move X0, [X0+224]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Call 0x1C17DEC

Method: UnityEngine.Vector3 get__attackPosition()

Disassembly:
	0x01DEFF28 LDR W8, [X0 + 0xE0]
	0x01DEFF2C CBNZ W8, 0x1DEFF34
	0x01DEFF30 BL 0x1C16DFC
	0x01DEFF34 MOV X0, X20
	0x01DEFF38 MOV X1, X31
	0x01DEFF3C MOV X2, X31
	0x01DEFF40 BL 0x3C354F8

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+208]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Transform.get_position, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Boolean get__isMad()

Disassembly:
	0x01DEFF44 TBZ X0, 0x0, 0x1DEFF70
	0x01DEFF48 LDR X0, [X19 + 0xB8]
	0x01DEFF4C CBZ X0, 0x1DEFF7C
	0x01DEFF50 LDP X20, X19, [X31 + 0x10]
	0x01DEFF54 FMOV S0, W31
	0x01DEFF58 FMOV S1, W31
	0x01DEFF5C FMOV S2, W31
	0x01DEFF60 MOV W1, W31
	0x01DEFF64 MOV X2, X31
	0x01DEFF68 LDP X30, X21, [X31], #0x20
	0x01DEFF6C B 0x1DC4E6C
	0x01DEFF70 LDP X20, X19, [X31 + 0x10]
	0x01DEFF74 LDP X30, X21, [X31], #0x20
	0x01DEFF78 RET
	0x01DEFF7C BL 0x1C16F20
	0x01DEFF80 STP X30, X19, [X31 - 0x10]!
	0x01DEFF84 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call FakeGorillaController.get_phase, X0
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X0, X19
	007 Call FakeGorillaController.get_phase, X0
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move W0, 1
	010 Move X0, X19
	011 Call FakeGorillaController.get_phase, X0
	012 NotImplemented "Instruction CMP not yet implemented."
	013 NotImplemented "Instruction CSET not yet implemented."
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return X0

Method: System.Void GetChildColliders()

Disassembly:
	0x01DEFF88 LDR X0, [X0 + 0x1F8]
	0x01DEFF8C CBZ X0, 0x1DEFFD4
	0x01DEFF90 LDR V2, [X19 + 0x220]
	0x01DEFF94 LDR V1, [X19 + 0x21C]
	0x01DEFF98 LDR V0, [X19 + 0x218]
	0x01DEFF9C BL 0x1DEFFD8
	0x01DEFFA0 MOV X0, X19
	0x01DEFFA4 BL 0x1DE8BF8
	0x01DEFFA8 LDR X0, [X19 + 0x40]
	0x01DEFFAC CBZ X0, 0x1DEFFD4
	0x01DEFFB0 MOV X1, X31
	0x01DEFFB4 BL 0x1E93668
	0x01DEFFB8 TBZ X0, 0x0, 0x1DEFFCC
	0x01DEFFBC MOVZ W1, 0x6
	0x01DEFFC0 MOV X0, X19
	0x01DEFFC4 LDP X30, X19, [X31], #0x10
	0x01DEFFC8 B 0x1DEEB40
	0x01DEFFCC LDP X30, X19, [X31], #0x10
	0x01DEFFD0 RET
	0x01DEFFD4 BL 0x1C16F20
	0x01DEFFD8 STR D10, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25EA000
	006 Move X21, 0x230B000
	007 Move W8, [X20+3289]
	008 Move X21, [X21+232]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x230B000
	015 Move X0, [X0+232]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3289], W8
	019 Move X2, [X21]
	020 Move W1, 1
	021 Move X0, X19
	022 Call 0x21A55B8, X0, X1
	023 Move [X19+480], X0
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Move X21, [X31+40]
	028 Return 

Method: System.Void Awake()

Disassembly:
	0x01DEFFDC STP D9, D8, [X31 + 0x8]
	0x01DEFFE0 STR X30, [X31 + 0x18]
	0x01DEFFE4 STP X20, X19, [X31 + 0x20]
	0x01DEFFE8 ADRP X20, 0x25E9000
	0x01DEFFEC LDRB W8, [X20 + 0xCEF]
	0x01DEFFF0 MOV V8.16B, V2.16B
	0x01DEFFF4 MOV V9.16B, V1.16B
	0x01DEFFF8 MOV V10.16B, V0.16B
	0x01DEFFFC MOV X19, X0
	0x01DF0000 TBNZ X8, 0x0, 0x1DF0018
	0x01DF0004 ADRP X0, 0x2303000
	0x01DF0008 LDR X0, [X0 + 0x598]
	0x01DF000C BL 0x1C16CF4
	0x01DF0010 MOVZ W8, 0x1
	0x01DF0014 STRB W8, [X20 + 0xCEF]
	0x01DF0018 ADRP X20, 0x2303000
	0x01DF001C LDR X1, [X19 + 0xE8]
	0x01DF0020 LDR X20, [X20 + 0x598]
	0x01DF0024 CBZ X1, 0x1DF0034
	0x01DF0028 MOV X0, X19
	0x01DF002C MOV X2, X31
	0x01DF0030 BL 0x3C36834
	0x01DF0034 LDR X0, [X20]
	0x01DF0038 LDR X20, [X19 + 0xB8]
	0x01DF003C LDR W8, [X0 + 0xE0]
	0x01DF0040 CBNZ W8, 0x1DF0048
	0x01DF0044 BL 0x1C16DFC
	0x01DF0048 MOV X0, X20
	0x01DF004C MOV X1, X31
	0x01DF0050 MOV X2, X31
	0x01DF0054 BL 0x3C354F8
	0x01DF0058 TBZ X0, 0x0, 0x1DF008C
	0x01DF005C LDR X0, [X19 + 0xB8]
	0x01DF0060 CBZ X0, 0x1DF00A0
	0x01DF0064 MOV V1.16B, V9.16B
	0x01DF0068 MOV V2.16B, V8.16B
	0x01DF006C LDP X20, X19, [X31 + 0x20]
	0x01DF0070 LDR X30, [X31 + 0x18]
	0x01DF0074 LDP D9, D8, [X31 + 0x8]
	0x01DF0078 MOVZ W1, 0x1
	0x01DF007C MOV V0.16B, V10.16B
	0x01DF0080 MOV X2, X31
	0x01DF0084 LDR V10, [X31], #0x30
	0x01DF0088 B 0x1DC4E6C
	0x01DF008C LDP X20, X19, [X31 + 0x20]
	0x01DF0090 LDR X30, [X31 + 0x18]
	0x01DF0094 LDP D9, D8, [X31 + 0x8]
	0x01DF0098 LDR V10, [X31], #0x30
	0x01DF009C RET
	0x01DF00A0 BL 0x1C16F20
	0x01DF00A4 STP X30, X19, [X31 - 0x10]!
	0x01DF00A8 LDR X8, [X0 + 0x50]
	0x01DF00AC CBZ X8, 0x1DF00C4
	0x01DF00B0 LDR W8, [X8]
	0x01DF00B4 CMP W8, 0x0
	0x01DF00B8 CSET W0, NE
	0x01DF00BC LDP X30, X19, [X31], #0x10
	0x01DF00C0 RET
	0x01DF00C4 ADRP X0, 0x2303000
	0x01DF00C8 LDR X0, [X0 + 0x5B0]
	0x01DF00CC BL 0x1C16D08
	0x01DF00D0 BL 0x1C16F10
	0x01DF00D4 MOV X19, X0
	0x01DF00D8 ADRP X0, 0x2309000
	0x01DF00DC LDR X0, [X0 + 0x160]
	0x01DF00E0 BL 0x1C16D08
	0x01DF00E4 MOV X1, X0
	0x01DF00E8 MOV X0, X19
	0x01DF00EC MOV X2, X31
	0x01DF00F0 BL 0x337DF1C
	0x01DF00F4 ADRP X0, 0x2309000
	0x01DF00F8 LDR X0, [X0 + 0x168]
	0x01DF00FC BL 0x1C16D08
	0x01DF0100 MOV X1, X0
	0x01DF0104 MOV X0, X19
	0x01DF0108 BL 0x1C16DEC
	0x01DF010C STR X30, [X31 - 0x20]!
	0x01DF0110 STP X20, X19, [X31 + 0x10]
	0x01DF0114 LDRB W9, [X0 + 0xE0]
	0x01DF0118 AND W8, W1, 0x1
	0x01DF011C CMP W9, W8
	0x01DF0120 B.NE 0x1DF0130
	0x01DF0124 LDP X20, X19, [X31 + 0x10]
	0x01DF0128 LDR X30, [X31], #0x20
	0x01DF012C RET
	0x01DF0130 MOV X19, X0
	0x01DF0134 MOV W20, W1
	0x01DF0138 STRB W8, [X0 + 0xE0]
	0x01DF013C TBZ X1, 0x0, 0x1DF0150
	0x01DF0140 LDR X0, [X19 + 0xD8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x25EA000
	010 Move W8, [X20+3290]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x230B000
	017 Move X0, [X0+240]
	018 Call 0x1C17CF4
	019 Move X0, 0x230A000
	020 Move X0, [X0+248]
	021 Call 0x1C17CF4
	022 Move X0, 0x2304000
	023 Move X0, [X0+1528]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3290], W8
	027 Move X22, [X19+480]
	028 Compare X22, 0
	029 JumpIfEqual {88}
	030 Move X8, [X22+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X24, 0x2304000
	033 Move X24, [X24+1528]
	034 Move X23, X31
	035 And X8, X8, 0
	036 Add X25, X22, 32
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X0, [X24]
	039 Move X20, [X25]
	040 Move X21, [X19+472]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X21
	046 Move X1, X20
	047 Move X2, X31
	048 Call Physics.IgnoreCollision, X0, X1
	049 Move W8, [X22+24]
	050 Add X23, X23, 1
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X8, 0x230A000
	053 Move X8, [X8+240]
	054 Move W1, 2
	055 Move X0, [X8]
	056 Call 0x1C17D6C
	057 Move [X19+528], X0
	058 Compare X0, 0
	059 JumpIfEqual {88}
	060 Move X23, 0x230A000
	061 Move X23, [X23+248]
	062 Move W24, 0xCCCD
	063 Move X20, X0
	064 Move X22, X31
	065 NotImplemented "Instruction MOVK not yet implemented."
	066 NotImplemented "Instruction LDRSW not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X0, [X23]
	069 Call 0x1C17F10
	070 Move X1, X31
	071 Move X21, X0
	072 Move [X0+24], W24
	073 Call Object..ctor, X0
	074 Move X8, [X20]
	075 Move X0, X21
	076 Move X1, [X8+64]
	077 Call 0x1C17E00
	078 Compare X0, 0
	079 JumpIfEqual {99}
	080 Move W8, [X20+24]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Add X8, X20, X22
	083 Move [X8+32], X21
	084 Move X20, [X19+528]
	085 Add X22, X22, 1
	086 Compare X20, 0
	087 JumpIfNotEqual {66}
	088 Call 0x1C17F20
	089 Move X20, [X31+48]
	090 Move X19, [X31+56]
	091 Move X22, [X31+32]
	092 Move X21, [X31+40]
	093 Move X24, [X31+16]
	094 Move X23, [X31+24]
	095 Move X30, [X31+64]
	096 Move X25, [X31+72]
	097 Return 
	098 Call 0x1C17F28
	099 Call 0x1C17F44
	100 Move X1, X31
	101 Call 0x1C17DEC

Method: System.Void Setup()

Disassembly:
	0x01DF0158 MOV X0, X19
	0x01DF015C MOV X2, X31
	0x01DF0160 BL 0x3C36834
	0x01DF0164 AND W1, W20, 0x1
	0x01DF0168 MOV X0, X19
	0x01DF016C BL 0x1DF4370
	0x01DF0170 MOV X1, X0
	0x01DF0174 STR X0, [X19 + 0xE8]
	0x01DF0178 MOV X0, X19
	0x01DF017C LDP X20, X19, [X31 + 0x10]
	0x01DF0180 MOV X2, X31
	0x01DF0184 LDR X30, [X31], #0x20
	0x01DF0188 B 0x3C366FC
	0x01DF018C BL 0x1C16F20
	0x01DF0190 SUB X31, X31, 0x130
	0x01DF0194 STR X29, [X31 + 0xE0]
	0x01DF0198 STP X30, X25, [X31 + 0xF0]
	0x01DF019C STP X24, X23, [X31 + 0x100]
	0x01DF01A0 STP X22, X21, [X31 + 0x110]
	0x01DF01A4 STP X20, X19, [X31 + 0x120]
	0x01DF01A8 ADRP X21, 0x25E8000
	0x01DF01AC LDRB W8, [X21 + 0xCDC]
	0x01DF01B0 MOV X19, X0
	0x01DF01B4 ADD X20, X31, 0x90
	0x01DF01B8 TBNZ X8, 0x0, 0x1DF0224
	0x01DF01BC ADRP X0, 0x2309000
	0x01DF01C0 LDR X0, [X0 + 0x170]
	0x01DF01C4 BL 0x1C16CF4
	0x01DF01C8 ADRP X0, 0x2309000
	0x01DF01CC LDR X0, [X0 + 0x178]
	0x01DF01D0 BL 0x1C16CF4
	0x01DF01D4 ADRP X0, 0x2309000
	0x01DF01D8 LDR X0, [X0 + 0x180]
	0x01DF01DC BL 0x1C16CF4
	0x01DF01E0 ADRP X0, 0x2309000
	0x01DF01E4 LDR X0, [X0 + 0x188]
	0x01DF01E8 BL 0x1C16CF4
	0x01DF01EC ADRP X0, 0x2309000
	0x01DF01F0 LDR X0, [X0 + 0x190]
	0x01DF01F4 BL 0x1C16CF4
	0x01DF01F8 ADRP X0, 0x2309000
	0x01DF01FC LDR X0, [X0 + 0x198]
	0x01DF0200 BL 0x1C16CF4
	0x01DF0204 ADRP X0, 0x2309000
	0x01DF0208 LDR X0, [X0 + 0x1A0]
	0x01DF020C BL 0x1C16CF4
	0x01DF0210 ADRP X0, 0x2309000
	0x01DF0214 LDR X0, [X0 + 0x1A8]
	0x01DF0218 BL 0x1C16CF4
	0x01DF021C MOVZ W8, 0x1
	0x01DF0220 STRB W8, [X21 + 0xCDC]
	0x01DF0224 ADRP X25, 0x2309000
	0x01DF0228 LDR X25, [X25 + 0x198]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, X0
	009 Call MobController.Setup, X0
	010 Move X0, [X19+64]
	011 Compare X0, 0
	012 JumpIfEqual {65}
	013 Move X1, X31
	014 Call NetworkObject.get_HasStateAuthority, X0
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {37}
	019 Move X0, X19
	020 Call FakeGorillaController.SetRoaming, X0
	021 Move X8, [X19]
	022 Move X0, X19
	023 Move X9, [X8+936]
	024 Move X1, [X8+944]
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Move X8, -19943424
	027 Move V5, [X8+92]
	028 Move S0, W31
	029 Move S1, 1
	030 Move S2, 0.5
	031 Move S3, 1
	032 Move S4, 0.5
	033 Move X0, X31
	034 Call Random.ColorHSV, V0, V1, V2, V3, V4, V5
	035 Move X0, X19
	036 Call FakeGorillaController.set_playerColor, X0, X1
	037 Move X20, [X19+504]
	038 Move X0, X19
	039 Call FakeGorillaController.get_playerColor, X0
	040 Move X0, X19
	041 Move V8, V0
	042 Move V9, V1
	043 Move V10, V2
	044 Move V11, V3
	045 Call FakeGorillaController.get__isMad, X0
	046 Compare X20, 0
	047 JumpIfEqual {65}
	048 Move X0, X20
	049 Move V0, V8
	050 Move V1, V9
	051 Move V2, V10
	052 Move V3, V11
	053 Move W1, W31
	054 Call FakeGorillaView.SetupAvatar, X0, X1, X2
	055 Move X0, X19
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X30, [X31+32]
	059 Move D9, [X31+16]
	060 Move D8, [X31+24]
	061 Move D11, [X31+64]
	062 Move D10, [X31+72]
	063 Call FakeGorillaController.HandlePhaseChanged, X0
	064 Return 
	065 Call 0x1C17F20

Method: System.Void RPC_Hit(System.Int32 damage)

Disassembly:
	0x01DF06B0 ADRP X25, 0x2309000
	0x01DF06B4 ADRP X26, 0x2309000
	0x01DF06B8 ADRP X27, 0x2305000
	0x01DF06BC ADRP X20, 0x2309000
	0x01DF06C0 ADRP X29, 0x2309000
	0x01DF06C4 ADRP X28, 0x2309000
	0x01DF06C8 ADRP X24, 0x2308000
	0x01DF06CC LDR X21, [X21 + 0x1E0]
	0x01DF06D0 LDR X23, [X23 + 0x198]
	0x01DF06D4 LDR X25, [X25 + 0x178]
	0x01DF06D8 LDR X26, [X26 + 0x180]
	0x01DF06DC LDR X27, [X27 + 0x9A0]
	0x01DF06E0 LDR X20, [X20 + 0x1D0]
	0x01DF06E4 LDR X29, [X29 + 0x1B8]
	0x01DF06E8 LDR X28, [X28 + 0x200]
	0x01DF06EC LDR X24, [X24 + 0xC28]
	0x01DF06F0 LDR X0, [X8]
	0x01DF06F4 BL 0x1C16F10
	0x01DF06F8 LDR X1, [X21]
	0x01DF06FC MOV X22, X0
	0x01DF0700 BL 0x30C0EA0
	0x01DF0704 ADD X8, X31, 0x10
	0x01DF0708 MOV X0, X19
	0x01DF070C BL 0x1DEEE54
	0x01DF0710 LDP V0, V1, [X31 + 0x10]
	0x01DF0714 LDP V2, V3, [X31 + 0x30]
	0x01DF0718 LDR X1, [X23]
	0x01DF071C ADD X8, X31, 0x10
	0x01DF0720 ADD X0, X31, 0xA0
	0x01DF0724 STP V0, V1, [X31 + 0xA0]
	0x01DF0728 STP V2, V3, [X31 + 0xC0]
	0x01DF072C BL 0x2416BB8
	0x01DF0730 ADD X0, X31, 0xE0
	0x01DF0734 ADD X1, X31, 0x10
	0x01DF0738 MOVZ W2, 0x48
	0x01DF073C BL 0x3EB1AC0
	0x01DF0740 LDR X1, [X25]
	0x01DF0744 ADD X0, X31, 0xE0
	0x01DF0748 BL 0x2C1CA00
	0x01DF074C TBZ X0, 0x0, 0x1DF0808
	0x01DF0750 LDR X1, [X26]
	0x01DF0754 ADD X0, X31, 0xE0
	0x01DF0758 BL 0x2C1CAAC
	0x01DF075C MOV X21, X0
	0x01DF0760 LDR X0, [X27]
	0x01DF0764 LDR W8, [X0 + 0xE0]
	0x01DF0768 CBNZ W8, 0x1DF0770
	0x01DF076C BL 0x1C16DFC
	0x01DF0770 ADD X1, X31, 0x98
	0x01DF0774 MOV W0, W21
	0x01DF0778 MOV X2, X31
	0x01DF077C BL 0x1DB2598
	0x01DF0780 TBZ X0, 0x0, 0x1DF07AC
	0x01DF0784 LDR X0, [X31 + 0x98]
	0x01DF0788 CBZ X0, 0x1DF0BF0
	0x01DF078C MOV X1, X31
	0x01DF0790 BL 0x1DAEC64
	0x01DF0794 UBFM X8, X21, 0x20, 0x3F
	0x01DF0798 FMOV S0, W8
	0x01DF079C FCMP S0, 0x0
	0x01DF07A0 B.LS 0x1DF07AC
	0x01DF07A4 EOR W8, W0, 0x1
	0x01DF07A8 TBNZ X8, 0x0, 0x1DF0740
	0x01DF07AC CBZ X22, 0x1DF0BE4
	0x01DF07B0 LDR W10, [X22 + 0x1C]
	0x01DF07B4 LDR X8, [X22 + 0x10]
	0x01DF07B8 LDR X9, [X20]
	0x01DF07BC ADD W10, W10, 0x1
	0x01DF07C0 STR W10, [X22 + 0x1C]
	0x01DF07C4 CBZ X8, 0x1DF0BE8
	0x01DF07C8 LDRSW X10, [X22 + 0x18]
	0x01DF07CC LDR W11, [X8 + 0x18]
	0x01DF07D0 CMP W10, W11
	0x01DF07D4 B.CS 0x1DF07EC
	0x01DF07D8 ADD W9, W10, 0x1
	0x01DF07DC ADD X8, X8, X10, 0x2, LSL
	0x01DF07E0 STR W9, [X22 + 0x18]
	0x01DF07E4 STR W21, [X8 + 0x20]
	0x01DF07E8 B 0x1DF0740
	0x01DF07EC LDR X8, [X9 + 0x20]
	0x01DF07F0 LDR X8, [X8 + 0xC0]
	0x01DF07F4 LDR X2, [X8 + 0x70]
	0x01DF07F8 MOV X0, X22
	0x01DF07FC MOV W1, W21
	0x01DF0800 BL 0x30C1698
	0x01DF0804 B 0x1DF0740
	0x01DF0808 ADRP X8, 0x2309000
	0x01DF080C LDR X8, [X8 + 0x170]
	0x01DF0810 ADD X0, X31, 0xE0
	0x01DF0814 LDR X1, [X8]
	0x01DF0818 BL 0x2C1CC18
	0x01DF081C CBZ X22, 0x1DF0BF8
	0x01DF0820 ADRP X8, 0x2309000
	0x01DF0824 LDR X8, [X8 + 0x1D8]
	0x01DF0828 MOV X0, X22
	0x01DF082C LDR X1, [X8]
	0x01DF0830 ADD X8, X31, 0x10
	0x01DF0834 BL 0x30C2248
	0x01DF0838 LDR V0, [X31 + 0x1]
	0x01DF083C LDR X8, [X31 + 0x20]
	0x01DF0840 STR V0, [X31 + 0x8]
	0x01DF0844 STR X8, [X31 + 0x90]
	0x01DF0848 LDR X1, [X29]
	0x01DF084C ADD X0, X31, 0x80
	0x01DF0850 BL 0x2BCF054
	0x01DF0854 TBZ X0, 0x0, 0x1DF088C
	0x01DF0858 LDR W21, [X31 + 0x90]
	0x01DF085C ADD X8, X31, 0x10
	0x01DF0860 MOV X0, X19
	0x01DF0864 BL 0x1DEEE54
	0x01DF0868 LDP V0, V1, [X31 + 0x10]
	0x01DF086C LDP V2, V3, [X31 + 0x30]
	0x01DF0870 LDR X2, [X28]
	0x01DF0874 STP V0, V1, [X31 + 0xA0]
	0x01DF0878 STP V2, V3, [X31 + 0xC0]
	0x01DF087C ADD X0, X31, 0xA0
	0x01DF0880 MOV W1, W21
	0x01DF0884 BL 0x2415F70
	0x01DF0888 B 0x1DF0848
	0x01DF088C ADRP X8, 0x2309000
	0x01DF0890 LDR X8, [X8 + 0x1B0]
	0x01DF0894 ADD X0, X31, 0x80
	0x01DF0898 LDR X1, [X8]
	0x01DF089C BL 0x2BCF050
	0x01DF08A0 ADRP X8, 0x2308000
	0x01DF08A4 LDR X8, [X8 + 0xC38]
	0x01DF08A8 LDR X0, [X31 + 0x8]
	0x01DF08AC LDR X1, [X8]
	0x01DF08B0 ADD X8, X31, 0x10
	0x01DF08B4 BL 0x301CB58
	0x01DF08B8 LDR V0, [X31 + 0x1]
	0x01DF08BC LDR X8, [X31 + 0x20]
	0x01DF08C0 ADRP X9, 0xFFFFFFFFFECF9000
	0x01DF08C4 ADRP X21, 0x2309000
	0x01DF08C8 STR V0, [X31 + 0x6]
	0x01DF08CC STR X8, [X31 + 0x70]
	0x01DF08D0 ADRP X22, 0x2309000
	0x01DF08D4 LDR V8, [X9 + 0xF24]
	0x01DF08D8 LDR X21, [X21 + 0x1F8]
	0x01DF08DC LDR X22, [X22 + 0x1F0]
	0x01DF08E0 LDR X1, [X24]
	0x01DF08E4 ADD X0, X31, 0x60
	0x01DF08E8 BL 0x2BC4350
	0x01DF08EC TBZ X0, 0x0, 0x1DF0988
	0x01DF08F0 LDR X20, [X31 + 0x70]
	0x01DF08F4 CBZ X20, 0x1DF0BE0
	0x01DF08F8 MOV X0, X20
	0x01DF08FC MOV X1, X31
	0x01DF0900 BL 0x1DAEC64
	0x01DF0904 TBNZ X0, 0x0, 0x1DF08E0
	0x01DF0908 LDR X8, [X20 + 0x40]
	0x01DF090C CBZ X8, 0x1DF0BEC
	0x01DF0910 LDR X8, [X8 + 0x20]
	0x01DF0914 CBZ X8, 0x1DF0920
	0x01DF0918 LDR W20, [X8]
	0x01DF091C B 0x1DF0924
	0x01DF0920 MOV W20, W31
	0x01DF0924 ADD X8, X31, 0x10
	0x01DF0928 MOV X0, X19
	0x01DF092C BL 0x1DEEE54
	0x01DF0930 LDP V0, V1, [X31 + 0x10]
	0x01DF0934 LDP V2, V3, [X31 + 0x30]
	0x01DF0938 LDR X2, [X21]
	0x01DF093C STP V0, V1, [X31 + 0xA0]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x25E9000
	012 Move W8, [X21+3291]
	013 Move W20, W1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {48}
	019 Move X0, 0x2309000
	020 Move X0, [X0+3720]
	021 Call 0x1C17CF4
	022 Move X0, 0x2308000
	023 Move X0, [X0+2712]
	024 Call 0x1C17CF4
	025 Move X0, 0x230A000
	026 Move X0, [X0+280]
	027 Call 0x1C17CF4
	028 Move X0, 0x2308000
	029 Move X0, [X0+2720]
	030 Call 0x1C17CF4
	031 Move X0, 0x2309000
	032 Move X0, [X0+3728]
	033 Call 0x1C17CF4
	034 Move X0, 0x2309000
	035 Move X0, [X0+3136]
	036 Call 0x1C17CF4
	037 Move X0, 0x2304000
	038 Move X0, [X0+1432]
	039 Call 0x1C17CF4
	040 Move X0, 0x230A000
	041 Move X0, [X0+288]
	042 Call 0x1C17CF4
	043 Move X0, 0x230A000
	044 Move X0, [X0+296]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X21+3291], W8
	048 Move X0, X19
	049 Move W1, W20
	050 Call MobController.RPC_Hit, X0, X1
	051 Move X0, [X19+64]
	052 Compare X0, 0
	053 JumpIfEqual {182}
	054 Move W8, [X0+96]
	055 Move TEMP, X8
	056 And TEMP, TEMP, 2
	057 Compare TEMP, 2
	058 JumpIfEqual {182}
	059 Move X1, X31
	060 Call NetworkObject.get_HasStateAuthority, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {182}
	065 Move X0, X19
	066 Call MobController.get_health, X0
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X0, [X19+208]
	069 Compare X0, 0
	070 JumpIfEqual {193}
	071 Move X1, X31
	072 Call Transform.get_position, X0
	073 Move X8, [X19+192]
	074 Compare X8, 0
	075 JumpIfEqual {193}
	076 Move X8, [X8+120]
	077 Compare X8, 0
	078 JumpIfEqual {193}
	079 Move W9, [X8+24]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X9, 0x2309000
	082 Move X9, [X9+3136]
	083 Move V11, [X8+36]
	084 Move V8, V0
	085 Move V9, V1
	086 Move X0, [X9]
	087 Move V10, V2
	088 Move W9, [X0+224]
	089 Compare W9, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move V0, V8
	093 Move V1, V9
	094 Move V2, V10
	095 Move V3, V11
	096 Call MobDetectionUtil.GetPlayersInRange, X0, X1, V0
	097 Move X8, 0x2309000
	098 Move X8, [X8+3720]
	099 Move X20, X0
	100 Move X8, [X8]
	101 Move X0, X8
	102 Call 0x1C17F10
	103 Move X8, 0x230A000
	104 Move X8, [X8+280]
	105 Move X1, X19
	106 Move X3, X31
	107 Move X21, X0
	108 Move X2, [X8]
	109 Call Comparison`1<Object>..ctor, X0, X1, X2
	110 Compare X20, 0
	111 JumpIfEqual {193}
	112 Move X8, 0x2309000
	113 Move X8, [X8+3728]
	114 Move X0, X20
	115 Move X1, X21
	116 Move X2, [X8]
	117 Call List`1<Object>.Sort, X0, X1
	118 Move X23, 0x230A000
	119 Move X23, [X23+296]
	120 Move X0, [X23]
	121 Move W8, [X0+224]
	122 Compare W8, 0
	123 JumpIfNotEqual {126}
	124 Call 0x1C17DFC
	125 Move X0, [X23]
	126 Move X8, [X0+184]
	127 Move X21, [X8+8]
	128 Compare X21, 0
	129 JumpIfNotEqual {151}
	130 Move W8, [X0+224]
	131 Compare W8, 0
	132 JumpIfNotEqual {135}
	133 Call 0x1C17DFC
	134 Move X0, [X23]
	135 Move X9, 0x2308000
	136 Move X8, [X0+184]
	137 Move X9, [X9+2720]
	138 Move X22, [X8]
	139 Move X0, [X9]
	140 Call 0x1C17F10
	141 Move X8, 0x230A000
	142 Move X8, [X8+288]
	143 Move X1, X22
	144 Move X3, X31
	145 Move X21, X0
	146 Move X2, [X8]
	147 Call Func`2<Object, Boolean>..ctor, X0, X1, X2
	148 Move X8, [X23]
	149 Move X8, [X8+184]
	150 Move [X8+8], X21
	151 Move X8, 0x2308000
	152 Move X8, [X8+2712]
	153 Move X0, X20
	154 Move X1, X21
	155 Move X2, [X8]
	156 Call 0x21C670C, X0, X1
	157 Move X8, 0x2304000
	158 Move X8, [X8+1432]
	159 Move X20, X0
	160 Move X8, [X8]
	161 Move W9, [X8+224]
	162 Compare W9, 0
	163 JumpIfNotEqual {166}
	164 Move X0, X8
	165 Call 0x1C17DFC
	166 Move X0, X20
	167 Move X1, X31
	168 Move X2, X31
	169 Call Object.op_Inequality, X0, X1
	170 Move TEMP, X0
	171 And TEMP, TEMP, 1
	172 Compare TEMP, 1
	173 JumpIfNotEqual {182}
	174 Move X0, X19
	175 Move X1, X20
	176 Call FakeGorillaController.SetChasing, X0, X1
	177 Move W1, 4
	178 Move X0, X19
	179 Call FakeGorillaController.set_phase, X0, X1
	180 Move W8, 1
	181 Move [X19+241], W8
	182 Move X20, [X31+64]
	183 Move X19, [X31+72]
	184 Move X22, [X31+48]
	185 Move X21, [X31+56]
	186 Move X30, [X31+32]
	187 Move X23, [X31+40]
	188 Move D9, [X31+16]
	189 Move D8, [X31+24]
	190 Move D11, [X31+80]
	191 Move D10, [X31+88]
	192 Return 
	193 Call 0x1C17F20
	194 Call 0x1C17F28

Method: System.Void Hit(System.Int32 damage, UnityEngine.Vector3 position, AnimalCompany.RandomSFX hitSound, AnimalCompany.RandomSFX killSound, UnityEngine.Vector3 force, System.String hitName, Fusion.NetworkBehaviourId source)

Disassembly:
	0x01DF0E50 LDRB W8, [X21 + 0xCE5]
	0x01DF0E54 LDR X20, [X20 + 0x598]
	0x01DF0E58 MOV X19, X0
	0x01DF0E5C TBNZ X8, 0x0, 0x1DF0E8C
	0x01DF0E60 ADRP X0, 0x2308000
	0x01DF0E64 LDR X0, [X0 + 0xC40]
	0x01DF0E68 BL 0x1C16CF4
	0x01DF0E6C ADRP X0, 0x2309000
	0x01DF0E70 LDR X0, [X0 + 0x208]
	0x01DF0E74 BL 0x1C16CF4
	0x01DF0E78 ADRP X0, 0x2303000
	0x01DF0E7C LDR X0, [X0 + 0x598]
	0x01DF0E80 BL 0x1C16CF4
	0x01DF0E84 MOVZ W8, 0x1
	0x01DF0E88 STRB W8, [X21 + 0xCE5]
	0x01DF0E8C LDR X0, [X20]
	0x01DF0E90 MOVI V0.2D, 0x0
	0x01DF0E94 STP V0, V0, [X31 + 0x60]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X8, [X0]
	007 Move V8, V5
	008 Move V9, V4
	009 Move V10, V3
	010 Move X9, [X8+984]
	011 Move X2, [X8+992]
	012 Move X19, X0
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move [X19+536], S10
	015 Move [X19+540], S9
	016 Move [X19+544], S8
	017 Move X30, [X31+32]
	018 Move X19, [X31+40]
	019 Move D9, [X31+16]
	020 Move D8, [X31+24]
	021 Move V10, [X31+48]
	022 Return 

Method: System.Void HandleRevive()

Disassembly:
	0x01DF0EA8 BL 0x1C16DFC
	0x01DF0EAC MOV X0, X20
	0x01DF0EB0 MOV X1, X31
	0x01DF0EB4 MOV X2, X31
	0x01DF0EB8 BL 0x3C354F8
	0x01DF0EBC TBZ X0, 0x0, 0x1DF0F9C
	0x01DF0EC0 LDR X0, [X19 + 0x160]
	0x01DF0EC4 CBZ X0, 0x1DF0FCC
	0x01DF0EC8 MOV X1, X31
	0x01DF0ECC BL 0x1DAEC64
	0x01DF0ED0 TBZ X0, 0x0, 0x1DF0F10
	0x01DF0ED4 ADD X8, X31, 0x0
	0x01DF0ED8 MOV X0, X19
	0x01DF0EDC BL 0x1DEEE54
	0x01DF0EE0 ADRP X8, 0x2309000
	0x01DF0EE4 LDP V0, V1, [X31]
	0x01DF0EE8 LDP V2, V3, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobController.HandleRevive, X0
	005 Move X0, [X19+504]
	006 Compare X0, 0
	007 JumpIfEqual {26}
	008 Call FakeGorillaView.SetRevive, X0
	009 Move X0, [X19+64]
	010 Compare X0, 0
	011 JumpIfEqual {26}
	012 Move X1, X31
	013 Call NetworkObject.get_HasStateAuthority, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {23}
	018 Move X0, X19
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Call FakeGorillaController.SetRoaming, X0
	022 Return 
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Return 
	026 Call 0x1C17F20

Method: System.Void HandleDie()

Disassembly:
	0x01DF0F80 MOV V1.16B, V9.16B
	0x01DF0F84 MOV V2.16B, V10.16B
	0x01DF0F88 MOV V3.16B, V11.16B
	0x01DF0F8C MOV V4.16B, V12.16B
	0x01DF0F90 MOV V5.16B, V13.16B
	0x01DF0F94 BL 0x1DF37E8
	0x01DF0F98 TBNZ X0, 0x0, 0x1DF0ED4
	0x01DF0F9C LDR X8, [X19]
	0x01DF0FA0 MOV X0, X19
	0x01DF0FA4 LDR X9, [X8 + 0x3C8]
	0x01DF0FA8 LDR X1, [X8 + 0x3D0]
	0x01DF0FAC BLR X9
	0x01DF0FB0 LDP X20, X19, [X31 + 0xC0]
	0x01DF0FB4 LDP X30, X21, [X31 + 0xB0]
	0x01DF0FB8 LDP D9, D8, [X31 + 0xA0]
	0x01DF0FBC LDP D11, D10, [X31 + 0x90]
	0x01DF0FC0 LDP D13, D12, [X31 + 0x80]
	0x01DF0FC4 ADD X31, X31, 0xD0
	0x01DF0FC8 RET
	0x01DF0FCC BL 0x1C16F20
	0x01DF0FD0 SUB X31, X31, 0xD0
	0x01DF0FD4 STP D13, D12, [X31 + 0x80]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+504]
	005 Compare X0, 0
	006 JumpIfEqual {31}
	007 Move V2, [X19+544]
	008 Move V1, [X19+540]
	009 Move V0, [X19+536]
	010 Call FakeGorillaView.SetDie, X0, X1
	011 Move X0, X19
	012 Call MobController.HandleDie, X0
	013 Move X0, [X19+64]
	014 Compare X0, 0
	015 JumpIfEqual {31}
	016 Move X1, X31
	017 Call NetworkObject.get_HasStateAuthority, X0
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {28}
	022 Move W1, 6
	023 Move X0, X19
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Call FakeGorillaController.set_phase, X0, X1
	027 Return 
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Return 
	031 Call 0x1C17F20

Method: System.Void HandlePhaseChanged()

Disassembly:
	0x01DF0618 STP V0, V0, [X31 + 0xE0]
	0x01DF061C STP V0, V0, [X31 + 0xC0]
	0x01DF0620 STP V0, V0, [X31 + 0xA0]
	0x01DF0624 STR X31, [X31 + 0x58]
	0x01DF0628 LDR X0, [X19 + 0xD0]
	0x01DF062C CBZ X0, 0x1DF0BF8
	0x01DF0630 MOV X1, X31
	0x01DF0634 BL 0x3C3F58C
	0x01DF0638 LDR X8, [X19 + 0xC0]
	0x01DF063C CBZ X8, 0x1DF0BF8
	0x01DF0640 LDR X8, [X8 + 0x78]
	0x01DF0644 CBZ X8, 0x1DF0BF8
	0x01DF0648 LDR W9, [X8 + 0x18]
	0x01DF064C CMP W9, 0x1
	0x01DF0650 B.LS 0x1DF0C04
	0x01DF0654 ADRP X9, 0x2308000
	0x01DF0658 LDR X9, [X9 + 0xC40]
	0x01DF065C LDR V11, [X8 + 0x24]
	0x01DF0660 MOV V8.16B, V0.16B
	0x01DF0664 MOV V9.16B, V1.16B
	0x01DF0668 LDR X0, [X9]
	0x01DF066C MOV V10.16B, V2.16B
	0x01DF0670 LDR W9, [X0 + 0xE0]
	0x01DF0674 CBNZ W9, 0x1DF067C
	0x01DF0678 BL 0x1C16DFC
	0x01DF067C MOV V0.16B, V8.16B
	0x01DF0680 MOV V1.16B, V9.16B
	0x01DF0684 MOV V2.16B, V10.16B
	0x01DF0688 MOV V3.16B, V11.16B
	0x01DF068C BL 0x1DEFBA0
	0x01DF0690 CBZ X0, 0x1DF0BF8
	0x01DF0694 LDR W8, [X0 + 0x18]
	0x01DF0698 CBZ W8, 0x1DF0B7C
	0x01DF069C STR X0, [X31 + 0x8]
	0x01DF06A0 ADRP X8, 0x2309000
	0x01DF06A4 LDR X8, [X8 + 0x1E8]
	0x01DF06A8 ADRP X21, 0x2309000
	0x01DF06AC ADRP X23, 0x2309000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call FakeGorillaController.get_phase, X0
	006 Subtract W8, W0, 3
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X0, [X19+200]
	009 Compare X0, 0
	010 JumpIfEqual {46}
	011 Move X8, [X0]
	012 Move X9, [X8+504]
	013 Move X1, [X8+512]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X0, [X19+200]
	017 Compare X0, 0
	018 JumpIfEqual {46}
	019 Move X8, [X0]
	020 Move X9, [X8+488]
	021 Move X1, [X8+496]
	022 Move S0, 1
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move X0, X19
	025 Call MobController.get_isDie, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {34}
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Return 
	034 Move X20, [X19+504]
	035 Move X0, X19
	036 Call FakeGorillaController.get__isMad, X0
	037 Compare X20, 0
	038 JumpIfEqual {46}
	039 And W1, W0, 1
	040 Move X0, X20
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Call FakeGorillaView.SetMad, X0, X1
	045 Return 
	046 Call 0x1C17F20

Method: System.Void UpdateMonsterBehaviour()

Disassembly:
	0x01DF1190 BL 0x1E9E550
	0x01DF1194 FADD S0, S8, S0
	0x01DF1198 MOV X0, X19
	0x01DF119C BL 0x1DF38DC
	0x01DF11A0 MOV X0, X19
	0x01DF11A4 BL 0x1DF393C
	0x01DF11A8 LDR X8, [X19 + 0xC0]
	0x01DF11AC CBZ X8, 0x1DF12D4
	0x01DF11B0 LDR V1, [X8 + 0x6C]
	0x01DF11B4 FCMP S0, S1
	0x01DF11B8 B.GE 0x1DF1244
	0x01DF11BC ADRP X8, 0x2307000
	0x01DF11C0 LDR X8, [X8 + 0xC40]
	0x01DF11C4 ADD X20, X19, 0x178
	0x01DF11C8 LDR X0, [X8]
	0x01DF11CC LDR W8, [X0 + 0xE0]
	0x01DF11D0 CBNZ W8, 0x1DF11D8
	0x01DF11D4 BL 0x1C16DFC
	0x01DF11D8 MOV X0, X19
	0x01DF11DC MOV X1, X20
	0x01DF11E0 BL 0x1DEA6E8
	0x01DF11E4 TBZ X0, 0x0, 0x1DF12A4
	0x01DF11E8 LDRB W8, [X19 + 0xF1]
	0x01DF11EC LDR X20, [X19 + 0x178]
	0x01DF11F0 CBZ W8, 0x1DF1258
	0x01DF11F4 CBZ X20, 0x1DF12D4
	0x01DF11F8 LDR W1, [X20 + 0x18]
	0x01DF11FC MOV W0, W31
	0x01DF1200 MOV X2, X31
	0x01DF1204 BL 0x3C309A8
	0x01DF1208 ADRP X8, 0x2307000
	0x01DF120C LDR X8, [X8 + 0xC70]
	0x01DF1210 MOV W1, W0
	0x01DF1214 MOV X0, X20
	0x01DF1218 LDR X2, [X8]
	0x01DF121C BL 0x301BCCC
	0x01DF1220 MOV X1, X0
	0x01DF1224 MOV X0, X19
	0x01DF1228 BL 0x1DF3200
	0x01DF122C MOVZ W1, 0x4
	0x01DF1230 MOV X0, X19
	0x01DF1234 BL 0x1DEEB40
	0x01DF1238 MOVZ W8, 0x1
	0x01DF123C STRB W8, [X19 + 0xF1]
	0x01DF1240 B 0x1DF1294
	0x01DF1244 MOV X0, X19
	0x01DF1248 LDP X20, X19, [X31 + 0x10]
	0x01DF124C LDR X30, [X31 + 0x8]
	0x01DF1250 LDR V8, [X31], #0x20
	0x01DF1254 B 0x1DEF22C
	0x01DF1258 CBZ X20, 0x1DF12D4
	0x01DF125C ADRP X8, 0x2307000
	0x01DF1260 LDR X1, [X19 + 0x160]
	0x01DF1264 LDR X8, [X8 + 0xE98]
	0x01DF1268 MOV X0, X20
	0x01DF126C LDR X2, [X8]
	0x01DF1270 BL 0x301C318
	0x01DF1274 TBZ X0, 0x0, 0x1DF12A4
	0x01DF1278 LDR X1, [X19 + 0x160]
	0x01DF127C MOV X0, X19
	0x01DF1280 BL 0x1DF3200
	0x01DF1284 MOVZ W1, 0x3
	0x01DF1288 MOV X0, X19
	0x01DF128C BL 0x1DEEB40
	0x01DF1290 STRB W31, [X19 + 0xF1]
	0x01DF1294 LDP X20, X19, [X31 + 0x10]
	0x01DF1298 LDR X30, [X31 + 0x8]
	0x01DF129C LDR V8, [X31], #0x20
	0x01DF12A0 RET
	0x01DF12A4 MOV X0, X19
	0x01DF12A8 BL 0x1DF2AA8
	0x01DF12AC MOV X0, X19
	0x01DF12B0 BL 0x1DF2CE4
	0x01DF12B4 MOV X0, X19
	0x01DF12B8 BL 0x1DEA5A0
	0x01DF12BC MOV X0, X19
	0x01DF12C0 LDP X20, X19, [X31 + 0x10]
	0x01DF12C4 LDR X30, [X31 + 0x8]
	0x01DF12C8 FMOV S3, W31
	0x01DF12CC LDR V8, [X31], #0x20
	0x01DF12D0 B 0x1DF12D8
	0x01DF12D4 BL 0x1C16F20
	0x01DF12D8 SUB X31, X31, 0x1F0
	0x01DF12DC STP D15, D14, [X31 + 0x150]
	0x01DF12E0 STP D13, D12, [X31 + 0x160]
	0x01DF12E4 STP D11, D10, [X31 + 0x170]
	0x01DF12E8 STP D9, D8, [X31 + 0x180]
	0x01DF12EC STP X29, X30, [X31 + 0x190]
	0x01DF12F0 STP X28, X27, [X31 + 0x1A0]
	0x01DF12F4 STP X26, X25, [X31 + 0x1B0]
	0x01DF12F8 STP X24, X23, [X31 + 0x1C0]
	0x01DF12FC STP X22, X21, [X31 + 0x1D0]
	0x01DF1300 STP X20, X19, [X31 + 0x1E0]
	0x01DF1304 ADRP X20, 0x25E7000
	0x01DF1308 LDRB W8, [X20 + 0xCDD]
	0x01DF130C MOV V8.16B, V3.16B
	0x01DF1310 MOV V9.16B, V2.16B
	0x01DF1314 MOV V11.16B, V1.16B
	0x01DF1318 MOV V10.16B, V0.16B
	0x01DF131C MOV X19, X0
	0x01DF1320 ADD X27, X31, 0xB0
	0x01DF1324 TBNZ X8, 0x0, 0x1DF139C
	0x01DF1328 ADRP X0, 0x2302000
	0x01DF132C LDR X0, [X0 + 0xA28]
	0x01DF1330 BL 0x1C16CF4
	0x01DF1334 ADRP X0, 0x2308000
	0x01DF1338 LDR X0, [X0 + 0x210]
	0x01DF133C BL 0x1C16CF4
	0x01DF1340 ADRP X0, 0x2308000
	0x01DF1344 LDR X0, [X0 + 0x218]
	0x01DF1348 BL 0x1C16CF4
	0x01DF134C ADRP X0, 0x2308000
	0x01DF1350 LDR X0, [X0 + 0x220]
	0x01DF1354 BL 0x1C16CF4
	0x01DF1358 ADRP X0, 0x2302000
	0x01DF135C LDR X0, [X0 + 0x5D8]
	0x01DF1360 BL 0x1C16CF4
	0x01DF1364 ADRP X0, 0x2308000
	0x01DF1368 LDR X0, [X0 + 0x228]
	0x01DF136C BL 0x1C16CF4
	0x01DF1370 ADRP X0, 0x2308000
	0x01DF1374 LDR X0, [X0 + 0x40]
	0x01DF1378 BL 0x1C16CF4
	0x01DF137C ADRP X0, 0x2307000
	0x01DF1380 LDR X0, [X0 + 0xC40]
	0x01DF1384 BL 0x1C16CF4
	0x01DF1388 ADRP X0, 0x2302000
	0x01DF138C LDR X0, [X0 + 0x5F8]
	0x01DF1390 BL 0x1C16CF4
	0x01DF1394 MOVZ W8, 0x1
	0x01DF1398 STRB W8, [X20 + 0xCDD]
	0x01DF139C ADRP X24, 0x2302000
	0x01DF13A0 ADRP X20, 0x2307000
	0x01DF13A4 ADRP X26, 0x2308000
	0x01DF13A8 ADRP X28, 0x2308000
	0x01DF13AC LDR X24, [X24 + 0x5D8]
	0x01DF13B0 LDR X20, [X20 + 0xC40]
	0x01DF13B4 LDR X26, [X26 + 0x228]
	0x01DF13B8 LDR X28, [X28 + 0x218]
	0x01DF13BC MOV X21, X31
	0x01DF13C0 MOVI V0.2D, 0x0
	0x01DF13C4 MOVZ W8, 0x1
	0x01DF13C8 STP V0, V0, [X31 + 0x130]
	0x01DF13CC STP V0, V0, [X31 + 0x110]
	0x01DF13D0 STUR V0, [X27 + 0x4C]
	0x01DF13D4 STP V0, V0, [X31 + 0xE0]
	0x01DF13D8 STUR V0, [X27 + 0x1C]
	0x01DF13DC STP V0, V0, [X31 + 0xB0]
	0x01DF13E0 STUR V0, [X31 + 0x9C]
	0x01DF13E4 STP V0, V0, [X31 + 0x80]
	0x01DF13E8 LDR X9, [X19 + 0x210]
	0x01DF13EC CBZ X9, 0x1DF1D04
	0x01DF13F0 MOV W22, W8
	0x01DF13F4 LDR W8, [X9 + 0x18]
	0x01DF13F8 CMP X21, X8
	0x01DF13FC B.CS 0x1DF1D08
	0x01DF1400 ADD X8, X9, X21, 0x3, LSL
	0x01DF1404 LDR X23, [X8 + 0x20]
	0x01DF1408 CBZ X23, 0x1DF1D04
	0x01DF140C LDRB W8, [X23 + 0x10]
	0x01DF1410 CBZ W8, 0x1DF1474
	0x01DF1414 MOV X0, X31
	0x01DF1418 BL 0x3C3C6C4
	0x01DF141C LDP S1, S2, [X23 + 0x14]
	0x01DF1420 FSUB S0, S0, S1
	0x01DF1424 FCMP S0, S2
	0x01DF1428 B.LT 0x1DF1474
	0x01DF142C STRB W31, [X23 + 0x10]
	0x01DF1430 LDR X8, [X19 + 0x210]
	0x01DF1434 CBZ X8, 0x1DF1D04
	0x01DF1438 LDR W9, [X8 + 0x18]
	0x01DF143C CMP X21, X9
	0x01DF1440 B.CS 0x1DF1D08
	0x01DF1444 ADD X8, X8, X21, 0x3, LSL
	0x01DF1448 LDR X8, [X8 + 0x20]
	0x01DF144C CBZ X8, 0x1DF1D04
	0x01DF1450 LDR V0, [X8 + 0x30]
	0x01DF1454 LDR X9, [X8 + 0x28]
	0x01DF1458 MOV X0, X19
	0x01DF145C MOV V1.16B, V11.16B
	0x01DF1460 STR S0, [X31 + 0x8]
	0x01DF1464 MOV V0.16B, V10.16B
	0x01DF1468 MOV V2.16B, V9.16B
	0x01DF146C STR X9, [X31]
	0x01DF1470 BL 0x1DF1DC8
	0x01DF1474 MOV W8, W31
	0x01DF1478 MOVZ W21, 0x1
	0x01DF147C TBNZ X22, 0x0, 0x1DF13E8
	0x01DF1480 LDR X0, [X19 + 0x1F0]
	0x01DF1484 CBZ X0, 0x1DF1D04
	0x01DF1488 LDR X21, [X19 + 0x1D8]
	0x01DF148C MOV X1, X31
	0x01DF1490 STP S9, S11, [X31 + 0x38]

ISIL:
	001 Subtract X31, X31, 304
	002 Move [X31+224], X29
	003 Move [X31+240], X30
	004 Move [X31+248], X25
	005 Move [X31+256], X24
	006 Move [X31+264], X23
	007 Move [X31+272], X22
	008 Move [X31+280], X21
	009 Move [X31+288], X20
	010 Move [X31+296], X19
	011 Move X21, 0x25E8000
	012 Move W8, [X21+3292]
	013 Move X19, X0
	014 Add X20, X31, 144
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {45}
	019 Move X0, 0x2309000
	020 Move X0, [X0+368]
	021 Call 0x1C17CF4
	022 Move X0, 0x2309000
	023 Move X0, [X0+376]
	024 Call 0x1C17CF4
	025 Move X0, 0x2309000
	026 Move X0, [X0+384]
	027 Call 0x1C17CF4
	028 Move X0, 0x2309000
	029 Move X0, [X0+392]
	030 Call 0x1C17CF4
	031 Move X0, 0x2309000
	032 Move X0, [X0+400]
	033 Call 0x1C17CF4
	034 Move X0, 0x2309000
	035 Move X0, [X0+408]
	036 Call 0x1C17CF4
	037 Move X0, 0x2309000
	038 Move X0, [X0+416]
	039 Call 0x1C17CF4
	040 Move X0, 0x2309000
	041 Move X0, [X0+424]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X21+3292], W8
	045 Move X25, 0x2309000
	046 Move X25, [X25+408]
	047 NotImplemented "Instruction MOVI not yet implemented."
	048 Move X0, X31
	049 Move [X31+208], X31
	050 Move [X20+32], V0
	051 Move [X20+40], V0
	052 Move [X20], V0
	053 Move [X20+8], V0
	054 Move [X31+112], V0
	055 Move [X31+120], V0
	056 Move [X31+80], V0
	057 Move [X31+88], V0
	058 Call GameManager.get_isDebug
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {66}
	063 Move X0, X31
	064 Call Time.get_realtimeSinceStartup
	065 Move [X19+400], S0
	066 Move X22, 0x2309000
	067 Move X23, 0x2309000
	068 Move X24, 0x2309000
	069 Move X21, 0x2309000
	070 Move X22, [X22+376]
	071 Move X23, [X23+384]
	072 Move X24, [X24+416]
	073 Move X21, [X21+368]
	074 Add X8, X31, 8
	075 Move X0, X19
	076 Call FakeGorillaController.get__angerMetersByPlayerId, X0
	077 NotImplemented "Instruction LDUR not yet implemented."
	078 NotImplemented "Instruction LDUR not yet implemented."
	079 NotImplemented "Instruction LDUR not yet implemented."
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 Move X1, [X25]
	082 Add X8, X31, 8
	083 Add X0, X31, 80
	084 Move [X31+80], V0
	085 Move [X31+88], V1
	086 Move [X31+112], V2
	087 Move [X31+120], V3
	088 Call 0x2417BB8, X0
	089 Add X0, X31, 144
	090 Add X1, X31, 8
	091 Move W2, 72
	092 Call 0x3EB2AC0
	093 Move X1, [X22]
	094 Add X0, X31, 144
	095 Call 0x2C1DA00, X0
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {126}
	100 Move X1, [X23]
	101 Add X0, X31, 144
	102 Call 0x2C1DAAC, X0
	103 Move X20, X0
	104 Add X8, X31, 8
	105 Move X0, X19
	106 Call FakeGorillaController.get__angerMetersByPlayerId, X0
	107 NotImplemented "Instruction LDUR not yet implemented."
	108 NotImplemented "Instruction LDUR not yet implemented."
	109 NotImplemented "Instruction LDUR not yet implemented."
	110 NotImplemented "Instruction LDUR not yet implemented."
	111 Move [X31+80], V0
	112 Move [X31+88], V1
	113 Move [X31+112], V2
	114 Move [X31+120], V3
	115 Move X0, X19
	116 Call FakeGorillaController.get__timeToLoseAnger, X0
	117 Move X2, [X24]
	118 Move X8, X20
	119 ShiftRight X8, 32
	120 And X8, X8, 0x7FFFFFFF
	121 Move S1, W8
	122 Subtract S0, S1, S0
	123 Add X0, X31, 80
	124 Move W1, W20
	125 Call 0x2416D94, X0, X1, X2
	126 Move X1, [X21]
	127 Add X0, X31, 144
	128 Call 0x2C1DC18, X0
	129 Move X0, X19
	130 Call FakeGorillaController.get_phase, X0
	131 Subtract W8, W0, 1
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move X9, -19673088
	134 Add X9, X9, 2412
	135 NotImplemented "Instruction ADR not yet implemented."
	136 Move W11, [X9]
	137 Add X10, X10, X11
	138 CallNoReturn X10
	139 Move X8, [X19]
	140 Move X0, X19
	141 Move X9, [X8+904]
	142 Move X1, [X8+912]
	143 NotImplemented "Instruction BLR not yet implemented."
	144 Move X0, X19
	145 Call FakeGorillaController.UpdateSearching, X0
	146 Move X0, X19
	147 Call FakeGorillaController.UpdateChasingLoot, X0
	148 Move X0, X19
	149 Call FakeGorillaController.UpdateChasingPlayer, X0
	150 Move X0, X19
	151 Call FakeGorillaController.UpdateAwared, X0
	152 Move X0, X31
	153 Call GameManager.get_isDebug
	154 Move TEMP, X0
	155 And TEMP, TEMP, 1
	156 Compare TEMP, 1
	157 JumpIfNotEqual {181}
	158 Move X20, [X19+408]
	159 Compare X20, 0
	160 JumpIfEqual {181}
	161 Move X0, X19
	162 Call FakeGorillaController.get_phase, X0
	163 Move X8, 0x2309000
	164 Move X8, [X8+424]
	165 Move TEMP, 0
	166 Not TEMP
	167 Move X9, TEMP
	168 Move [X31+24], W0
	169 Add X0, X31, 8
	170 Move X8, [X8]
	171 Move X1, X31
	172 Move [X31+8], X8
	173 Move [X31+16], X9
	174 Call Enum.ToString, X0
	175 Move X8, [X20+64]
	176 Move X9, [X20+24]
	177 Move X2, [X20+40]
	178 Move X1, X0
	179 Move X0, X8
	180 NotImplemented "Instruction BLR not yet implemented."
	181 Move X20, [X31+288]
	182 Move X19, [X31+296]
	183 Move X22, [X31+272]
	184 Move X21, [X31+280]
	185 Move X24, [X31+256]
	186 Move X23, [X31+264]
	187 Move X30, [X31+240]
	188 Move X25, [X31+248]
	189 Move X29, [X31+224]
	190 Add X31, X31, 304
	191 Return 
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Call 0x3EB2AD0
	194 Move X8, [X0]
	195 Move [X31+232], X8
	196 Call 0x3EB2AE0
	197 Move X1, [X21]
	198 Add X0, X31, 144
	199 Call 0x2C1DC18, X0
	200 Move X0, [X31+232]
	201 Compare X0, 0
	202 JumpIfEqual {129}
	203 Call 0x1C17F18
	204 Move X19, X0
	205 Move [X31+232], X31
	206 Move X19, X0
	207 Move X1, [X21]
	208 Add X0, X31, 144
	209 Call 0x2C1DC18, X0
	210 Move X8, [X31+232]
	211 Compare X8, 0
	212 JumpIfNotEqual {215}
	213 Move X0, X19
	214 Call 0x1D2D690
	215 Move X0, [X31+232]
	216 Call 0x1C17F18
	217 Call 0x1991590

Method: System.Void UpdateGorillaMoveToTarget(UnityEngine.Vector3 targetPosition, System.Single forceToTarget = 0)

Disassembly:
	0x01DF22D8 LDR V0, [X31 + 0x4]
	0x01DF22DC LDP S12, S11, [X31 + 0xC4]
	0x01DF22E0 LDR V13, [X31 + 0xC0]
	0x01DF22E4 MOV X1, X31
	0x01DF22E8 FMUL S15, S0, S10
	0x01DF22EC LDR V0, [X31 + 0x8]
	0x01DF22F0 FMUL S10, S0, S10
	0x01DF22F4 LDR V0, [X31 + 0xC]
	0x01DF22F8 FMUL S0, S0, S8
	0x01DF22FC FABS S0, S0
	0x01DF2300 FADD S0, S0, S0
	0x01DF2304 FSQRT S8, S0
	0x01DF2308 BL 0x3C3F90C
	0x01DF230C LDR X0, [X20]
	0x01DF2310 FMUL S0, S14, S0
	0x01DF2314 FMUL S1, S14, S1
	0x01DF2318 FMUL S2, S14, S2
	0x01DF231C LDR W8, [X0 + 0xE0]
	0x01DF2320 FMUL S0, S9, S0
	0x01DF2324 FMUL S1, S9, S1
	0x01DF2328 FMUL S2, S9, S2
	0x01DF232C FADD S10, S10, S0
	0x01DF2330 FADD S9, S8, S1
	0x01DF2334 FADD S8, S15, S2
	0x01DF2338 CBNZ W8, 0x1DF2344
	0x01DF233C BL 0x1C16DFC
	0x01DF2340 LDR X0, [X20]
	0x01DF2344 LDR X8, [X0 + 0xB8]
	0x01DF2348 MOV X0, X31
	0x01DF234C LDP S0, S1, [X8]
	0x01DF2350 BL 0x3C30968
	0x01DF2354 FMUL S1, S13, S0
	0x01DF2358 FMUL S2, S12, S0
	0x01DF235C FMUL S3, S11, S0
	0x01DF2360 FADD S0, S10, S1
	0x01DF2364 FADD S1, S9, S2
	0x01DF2368 FADD S2, S8, S3
	0x01DF236C FMUL S3, S13, S0
	0x01DF2370 FMUL S4, S12, S1
	0x01DF2374 FADD S3, S3, S4
	0x01DF2378 FMUL S4, S11, S2
	0x01DF237C FADD S3, S4, S3
	0x01DF2380 FCMP S3, 0x0
	0x01DF2384 B.PL 0x1DF23A8
	0x01DF2388 FMOV S4, -2
	0x01DF238C FMUL S3, S3, S4
	0x01DF2390 FMUL S4, S13, S3
	0x01DF2394 FMUL S5, S12, S3
	0x01DF2398 FMUL S3, S11, S3
	0x01DF239C FADD S0, S0, S4
	0x01DF23A0 FADD S1, S1, S5
	0x01DF23A4 FADD S2, S2, S3
	0x01DF23A8 LDR X0, [X19 + 0x1E8]
	0x01DF23AC CBZ X0, 0x1DF23E0
	0x01DF23B0 MOV X1, X31
	0x01DF23B4 BL 0x3C8E908
	0x01DF23B8 LDP X20, X19, [X31 + 0xB0]
	0x01DF23BC LDP X22, X21, [X31 + 0xA0]
	0x01DF23C0 LDP X24, X23, [X31 + 0x90]
	0x01DF23C4 LDP X30, X25, [X31 + 0x80]
	0x01DF23C8 LDP D9, D8, [X31 + 0x70]
	0x01DF23CC LDP D11, D10, [X31 + 0x60]
	0x01DF23D0 LDP D13, D12, [X31 + 0x50]
	0x01DF23D4 LDP D15, D14, [X31 + 0x40]
	0x01DF23D8 ADD X31, X31, 0xC0
	0x01DF23DC RET
	0x01DF23E0 BL 0x1C16F20
	0x01DF23E4 SUB X31, X31, 0x80
	0x01DF23E8 STP D15, D14, [X31 + 0x10]
	0x01DF23EC STP D13, D12, [X31 + 0x20]
	0x01DF23F0 STP D11, D10, [X31 + 0x30]
	0x01DF23F4 STP D9, D8, [X31 + 0x40]
	0x01DF23F8 STP X30, X23, [X31 + 0x50]
	0x01DF23FC STP X22, X21, [X31 + 0x60]
	0x01DF2400 STP X20, X19, [X31 + 0x70]
	0x01DF2404 MOV X19, X0
	0x01DF2408 LDR X0, [X0 + 0x1F0]
	0x01DF240C STP S4, S5, [X31 + 0x4]
	0x01DF2410 STR S3, [X31]
	0x01DF2414 STR S2, [X31 + 0xC]
	0x01DF2418 CBZ X0, 0x1DF26A0
	0x01DF241C LDP S12, S11, [X31 + 0x84]
	0x01DF2420 LDR V13, [X31 + 0x80]
	0x01DF2424 MOV X1, X31
	0x01DF2428 MOV V10.16B, V1.16B
	0x01DF242C MOV V9.16B, V0.16B
	0x01DF2430 BL 0x3C3F58C
	0x01DF2434 ADRP X20, 0x25E6000
	0x01DF2438 LDRB W8, [X20 + 0x785]
	0x01DF243C MOV V14.16B, V0.16B
	0x01DF2440 MOV V15.16B, V1.16B
	0x01DF2444 MOV V8.16B, V2.16B
	0x01DF2448 CBNZ W8, 0x1DF2460
	0x01DF244C ADRP X0, 0x2301000
	0x01DF2450 LDR X0, [X0 + 0x5A8]
	0x01DF2454 BL 0x1C16CF4
	0x01DF2458 MOVZ W8, 0x1
	0x01DF245C STRB W8, [X20 + 0x785]
	0x01DF2460 ADRP X20, 0x2301000
	0x01DF2464 LDR X20, [X20 + 0x5A8]
	0x01DF2468 FSUB S14, S13, S14
	0x01DF246C FSUB S15, S12, S15
	0x01DF2470 FSUB S8, S11, S8
	0x01DF2474 LDR X0, [X20]
	0x01DF2478 LDR W8, [X0 + 0xE0]
	0x01DF247C CBNZ W8, 0x1DF2484
	0x01DF2480 BL 0x1C16DFC
	0x01DF2484 FMUL S0, S14, S14
	0x01DF2488 FMUL S1, S15, S15
	0x01DF248C ADRP X8, 0xFFFFFFFFFECF8000
	0x01DF2490 FADD S0, S0, S1
	0x01DF2494 LDR V1, [X8 + 0x17C]
	0x01DF2498 FMUL S2, S8, S8
	0x01DF249C FADD S0, S2, S0
	0x01DF24A0 FSQRT S0, S0
	0x01DF24A4 FCMP S0, S1
	0x01DF24A8 B.LE 0x1DF24BC
	0x01DF24AC FDIV S14, S14, S0
	0x01DF24B0 FDIV S15, S15, S0
	0x01DF24B4 FDIV S8, S8, S0
	0x01DF24B8 B 0x1DF24F4
	0x01DF24BC ADRP X21, 0x25E6000
	0x01DF24C0 LDRB W8, [X21 + 0x783]
	0x01DF24C4 CBNZ W8, 0x1DF24DC
	0x01DF24C8 ADRP X0, 0x2301000
	0x01DF24CC LDR X0, [X0 + 0x5A0]
	0x01DF24D0 BL 0x1C16CF4
	0x01DF24D4 MOVZ W8, 0x1
	0x01DF24D8 STRB W8, [X21 + 0x783]
	0x01DF24DC ADRP X8, 0x2301000
	0x01DF24E0 LDR X8, [X8 + 0x5A0]
	0x01DF24E4 LDR X8, [X8]
	0x01DF24E8 LDR X8, [X8 + 0xB8]
	0x01DF24EC LDP S14, S15, [X8]
	0x01DF24F0 LDR V8, [X8 + 0x8]
	0x01DF24F4 LDR X0, [X19 + 0x1F0]
	0x01DF24F8 CBZ X0, 0x1DF26A0
	0x01DF24FC MOV X1, X31
	0x01DF2500 BL 0x3C3F90C
	0x01DF2504 FMUL S0, S14, S0
	0x01DF2508 FMUL S1, S15, S1
	0x01DF250C LDR X8, [X19 + 0x210]
	0x01DF2510 FADD S0, S0, S1
	0x01DF2514 FMUL S1, S8, S2
	0x01DF2518 FADD S0, S1, S0
	0x01DF251C FCMP S0, 0x0
	0x01DF2520 CSET W21, PL
	0x01DF2524 CBZ X8, 0x1DF26A0
	0x01DF2528 LDR W9, [X8 + 0x18]
	0x01DF252C FCMP S0, 0x0
	0x01DF2530 CSET W22, PL
	0x01DF2534 CMP W22, W9
	0x01DF2538 B.CS 0x1DF26A4
	0x01DF253C ADD X8, X8, X21, 0x3, LSL
	0x01DF2540 LDR X23, [X8 + 0x20]
	0x01DF2544 CBZ X23, 0x1DF26A0
	0x01DF2548 LDRB W8, [X23 + 0x10]
	0x01DF254C CBNZ W8, 0x1DF267C
	0x01DF2550 MOVZ W8, 0x1
	0x01DF2554 MOV X0, X31
	0x01DF2558 STRB W8, [X23 + 0x10]
	0x01DF255C BL 0x3C3C6C4
	0x01DF2560 STR S0, [X23 + 0x14]
	0x01DF2564 LDR X8, [X19 + 0x210]
	0x01DF2568 CBZ X8, 0x1DF26A0
	0x01DF256C LDR W9, [X8 + 0x18]
	0x01DF2570 CMP W22, W9
	0x01DF2574 B.CS 0x1DF26A4
	0x01DF2578 ADD X8, X8, X21, 0x3, LSL
	0x01DF257C LDR X8, [X8 + 0x20]
	0x01DF2580 CBZ X8, 0x1DF26A0
	0x01DF2584 LDR V0, [X31 + 0xC]
	0x01DF2588 STP S9, S10, [X8 + 0x1C]
	0x01DF258C STR S0, [X8 + 0x24]
	0x01DF2590 LDR X8, [X19 + 0x210]
	0x01DF2594 CBZ X8, 0x1DF26A0
	0x01DF2598 LDR W9, [X8 + 0x18]
	0x01DF259C CMP W22, W9
	0x01DF25A0 B.CS 0x1DF26A4
	0x01DF25A4 ADD X8, X8, X21, 0x3, LSL
	0x01DF25A8 LDR X8, [X8 + 0x20]
	0x01DF25AC CBZ X8, 0x1DF26A0
	0x01DF25B0 LDR V1, [X31]
	0x01DF25B4 LDR V0, [X31 + 0x4]
	0x01DF25B8 STP S1, S0, [X8 + 0x28]
	0x01DF25BC LDR V0, [X31 + 0x8]
	0x01DF25C0 STR S0, [X8 + 0x30]
	0x01DF25C4 LDR X8, [X19 + 0x200]
	0x01DF25C8 CBZ X8, 0x1DF26A0
	0x01DF25CC LDR W9, [X8 + 0x18]
	0x01DF25D0 CMP W22, W9
	0x01DF25D4 B.CS 0x1DF26A4
	0x01DF25D8 ADD X8, X8, X21, 0x3, LSL
	0x01DF25DC LDR X0, [X8 + 0x20]
	0x01DF25E0 CBZ X0, 0x1DF26A0
	0x01DF25E4 MOV X1, X31
	0x01DF25E8 BL 0x3C3F58C
	0x01DF25EC ADRP X23, 0x25E6000
	0x01DF25F0 LDRB W8, [X23 + 0x85C]
	0x01DF25F4 MOV V8.16B, V0.16B
	0x01DF25F8 MOV V9.16B, V1.16B
	0x01DF25FC MOV V10.16B, V2.16B
	0x01DF2600 CBNZ W8, 0x1DF2618
	0x01DF2604 ADRP X0, 0x2301000
	0x01DF2608 LDR X0, [X0 + 0x5A8]
	0x01DF260C BL 0x1C16CF4
	0x01DF2610 MOVZ W8, 0x1
	0x01DF2614 STRB W8, [X23 + 0x85C]
	0x01DF2618 LDR X0, [X20]
	0x01DF261C LDR W8, [X0 + 0xE0]
	0x01DF2620 CBNZ W8, 0x1DF2628
	0x01DF2624 BL 0x1C16DFC
	0x01DF2628 LDR X8, [X19 + 0x210]
	0x01DF262C CBZ X8, 0x1DF26A0
	0x01DF2630 LDR W9, [X8 + 0x18]
	0x01DF2634 CMP W22, W9
	0x01DF2638 B.CS 0x1DF26A4
	0x01DF263C ADD X8, X8, X21, 0x3, LSL
	0x01DF2640 LDR X8, [X8 + 0x20]
	0x01DF2644 CBZ X8, 0x1DF26A0
	0x01DF2648 FSUB S0, S8, S13
	0x01DF264C FSUB S1, S9, S12
	0x01DF2650 FSUB S2, S10, S11
	0x01DF2654 FMUL S0, S0, S0
	0x01DF2658 FMUL S1, S1, S1
	0x01DF265C FMUL S2, S2, S2
	0x01DF2660 FADD S0, S0, S1
	0x01DF2664 FADD S0, S2, S0
	0x01DF2668 MOVZ W9, 0x42480000
	0x01DF266C FSQRT S0, S0
	0x01DF2670 FMOV S1, W9
	0x01DF2674 FDIV S0, S0, S1
	0x01DF2678 STR S0, [X8 + 0x18]
	0x01DF267C LDP X20, X19, [X31 + 0x70]
	0x01DF2680 LDP X22, X21, [X31 + 0x60]
	0x01DF2684 LDP X30, X23, [X31 + 0x50]
	0x01DF2688 LDP D9, D8, [X31 + 0x40]
	0x01DF268C LDP D11, D10, [X31 + 0x30]
	0x01DF2690 LDP D13, D12, [X31 + 0x20]
	0x01DF2694 LDP D15, D14, [X31 + 0x10]
	0x01DF2698 ADD X31, X31, 0x80
	0x01DF269C RET
	0x01DF26A0 BL 0x1C16F20
	0x01DF26A4 BL 0x1C16F28
	0x01DF26A8 STP X30, X19, [X31 - 0x10]!
	0x01DF26AC LDR X8, [X0 + 0x50]
	0x01DF26B0 CBZ X8, 0x1DF26C0
	0x01DF26B4 LDR V0, [X8 + 0x10]
	0x01DF26B8 LDP X30, X19, [X31], #0x10
	0x01DF26BC RET
	0x01DF26C0 ADRP X0, 0x2301000
	0x01DF26C4 LDR X0, [X0 + 0x5B0]
	0x01DF26C8 BL 0x1C16D08
	0x01DF26CC BL 0x1C16F10
	0x01DF26D0 MOV X19, X0
	0x01DF26D4 ADRP X0, 0x2307000
	0x01DF26D8 LDR X0, [X0 + 0x230]
	0x01DF26DC BL 0x1C16D08
	0x01DF26E0 MOV X1, X0
	0x01DF26E4 MOV X0, X19
	0x01DF26E8 MOV X2, X31
	0x01DF26EC BL 0x337DF1C
	0x01DF26F0 ADRP X0, 0x2307000
	0x01DF26F4 LDR X0, [X0 + 0x238]
	0x01DF26F8 BL 0x1C16D08
	0x01DF26FC MOV X1, X0
	0x01DF2700 MOV X0, X19
	0x01DF2704 BL 0x1C16DEC
	0x01DF2708 STP X30, X21, [X31 - 0x20]!
	0x01DF270C STP X20, X19, [X31 + 0x10]
	0x01DF2710 ADRP X21, 0x25E6000
	0x01DF2714 ADRP X20, 0x2306000
	0x01DF2718 LDRB W8, [X21 + 0xCDF]
	0x01DF271C LDR X20, [X20 + 0xC40]
	0x01DF2720 MOV X19, X0
	0x01DF2724 TBNZ X8, 0x0, 0x1DF273C
	0x01DF2728 ADRP X0, 0x2306000
	0x01DF272C LDR X0, [X0 + 0xC40]
	0x01DF2730 BL 0x1C16CF4
	0x01DF2734 MOVZ W8, 0x1
	0x01DF2738 STRB W8, [X21 + 0xCDF]
	0x01DF273C LDR X0, [X20]
	0x01DF2740 ADD X20, X19, 0x178
	0x01DF2744 LDR W8, [X0 + 0xE0]
	0x01DF2748 CBNZ W8, 0x1DF2750
	0x01DF274C BL 0x1C16DFC
	0x01DF2750 MOV X0, X19
	0x01DF2754 MOV X1, X20
	0x01DF2758 BL 0x1DEA6E8
	0x01DF275C TBZ X0, 0x0, 0x1DF2774
	0x01DF2760 LDR X1, [X19 + 0x178]
	0x01DF2764 MOV X0, X19
	0x01DF2768 LDP X20, X19, [X31 + 0x10]
	0x01DF276C LDP X30, X21, [X31], #0x20
	0x01DF2770 B 0x1DF27A0
	0x01DF2774 MOV X0, X19
	0x01DF2778 BL 0x1DF2AA8
	0x01DF277C MOV X0, X19
	0x01DF2780 BL 0x1DF2CE4
	0x01DF2784 MOV X0, X19
	0x01DF2788 BL 0x1DEA5A0
	0x01DF278C MOV X0, X19
	0x01DF2790 LDP X20, X19, [X31 + 0x10]
	0x01DF2794 FMOV S3, W31
	0x01DF2798 LDP X30, X21, [X31], #0x20
	0x01DF279C B 0x1DF12D8
	0x01DF27A0 SUB X31, X31, 0xE0
	0x01DF27A4 STP X30, X25, [X31 + 0xA0]
	0x01DF27A8 STP X24, X23, [X31 + 0xB0]
	0x01DF27AC STP X22, X21, [X31 + 0xC0]
	0x01DF27B0 STP X20, X19, [X31 + 0xD0]
	0x01DF27B4 ADRP X21, 0x25E6000
	0x01DF27B8 LDRB W8, [X21 + 0xCE0]
	0x01DF27BC MOV X20, X1
	0x01DF27C0 MOV X19, X0
	0x01DF27C4 TBNZ X8, 0x0, 0x1DF2824
	0x01DF27C8 ADRP X0, 0x2306000
	0x01DF27CC LDR X0, [X0 + 0xC20]
	0x01DF27D0 BL 0x1C16CF4
	0x01DF27D4 ADRP X0, 0x2306000
	0x01DF27D8 LDR X0, [X0 + 0xC28]
	0x01DF27DC BL 0x1C16CF4
	0x01DF27E0 ADRP X0, 0x2306000
	0x01DF27E4 LDR X0, [X0 + 0xC30]
	0x01DF27E8 BL 0x1C16CF4
	0x01DF27EC ADRP X0, 0x2306000
	0x01DF27F0 LDR X0, [X0 + 0xC38]
	0x01DF27F4 BL 0x1C16CF4
	0x01DF27F8 ADRP X0, 0x2307000
	0x01DF27FC LDR X0, [X0 + 0x1F0]
	0x01DF2800 BL 0x1C16CF4
	0x01DF2804 ADRP X0, 0x2307000
	0x01DF2808 LDR X0, [X0 + 0x1F8]
	0x01DF280C BL 0x1C16CF4
	0x01DF2810 ADRP X0, 0x2307000
	0x01DF2814 LDR X0, [X0 + 0x240]
	0x01DF2818 BL 0x1C16CF4
	0x01DF281C MOVZ W8, 0x1
	0x01DF2820 STRB W8, [X21 + 0xCE0]
	0x01DF2824 MOVI V0.2D, 0x0
	0x01DF2828 MOVZ W1, 0x2
	0x01DF282C MOV X0, X19
	0x01DF2830 STP X31, X31, [X31 + 0x80]
	0x01DF2834 STR X31, [X31 + 0x90]
	0x01DF2838 STP V0, V0, [X31 + 0x60]
	0x01DF283C STP V0, V0, [X31 + 0x40]
	0x01DF2840 BL 0x1DEEB40
	0x01DF2844 LDR X8, [X19]
	0x01DF2848 MOV X0, X19
	0x01DF284C MOV X1, X31
	0x01DF2850 LDR X9, [X8 + 0x3B8]
	0x01DF2854 LDR X2, [X8 + 0x3C0]
	0x01DF2858 BLR X9
	0x01DF285C LDR X9, [X19 + 0xC0]
	0x01DF2860 CBZ X9, 0x1DF2A18
	0x01DF2864 LDR X8, [X9 + 0x30]
	0x01DF2868 CBZ X8, 0x1DF2A18
	0x01DF286C LDR W10, [X8 + 0x18]
	0x01DF2870 CBZ W10, 0x1DF2A1C
	0x01DF2874 LDR X10, [X9 + 0x58]
	0x01DF2878 CBZ X10, 0x1DF2A18
	0x01DF287C LDR W11, [X10 + 0x18]
	0x01DF2880 CBZ W11, 0x1DF2A1C
	0x01DF2884 LDR X9, [X9 + 0x60]
	0x01DF2888 CBZ X9, 0x1DF2A18
	0x01DF288C LDR W11, [X9 + 0x18]
	0x01DF2890 CBZ W11, 0x1DF2A1C
	0x01DF2894 LDR X11, [X19]
	0x01DF2898 LDR V0, [X8 + 0x20]
	0x01DF289C LDR V1, [X10 + 0x20]
	0x01DF28A0 LDR V2, [X9 + 0x20]
	0x01DF28A4 LDR X8, [X11 + 0x2C8]
	0x01DF28A8 LDR X2, [X11 + 0x2D0]
	0x01DF28AC MOVZ W1, 0x1
	0x01DF28B0 MOV X0, X19
	0x01DF28B4 BLR X8
	0x01DF28B8 CBZ X20, 0x1DF2A18
	0x01DF28BC ADRP X8, 0x2306000
	0x01DF28C0 LDR X8, [X8 + 0xC38]
	0x01DF28C4 ADRP X21, 0x2306000
	0x01DF28C8 ADRP X23, 0x2307000
	0x01DF28CC LDR X21, [X21 + 0xC28]
	0x01DF28D0 LDR X23, [X23 + 0x240]
	0x01DF28D4 LDR X1, [X8]
	0x01DF28D8 ADRP X24, 0x2307000
	0x01DF28DC ADRP X25, 0x2307000
	0x01DF28E0 ADRP X22, 0x2306000
	0x01DF28E4 LDR X24, [X24 + 0x1F8]
	0x01DF28E8 LDR X25, [X25 + 0x1F0]
	0x01DF28EC LDR X22, [X22 + 0xC20]
	0x01DF28F0 ADD X8, X31, 0x0
	0x01DF28F4 MOV X0, X20
	0x01DF28F8 BL 0x301CB58
	0x01DF28FC LDR V0, [X31]
	0x01DF2900 LDR X8, [X31 + 0x10]
	0x01DF2904 STR V0, [X31 + 0x8]
	0x01DF2908 STR X8, [X31 + 0x90]
	0x01DF290C LDR X1, [X21]
	0x01DF2910 ADD X0, X31, 0x80
	0x01DF2914 BL 0x2BC4350
	0x01DF2918 TBZ X0, 0x0, 0x1DF29E4
	0x01DF291C LDR X20, [X31 + 0x90]
	0x01DF2920 CBZ X20, 0x1DF2A10
	0x01DF2924 MOV X0, X20
	0x01DF2928 MOV X1, X31
	0x01DF292C BL 0x1DAEC64
	0x01DF2930 TBNZ X0, 0x0, 0x1DF290C
	0x01DF2934 LDR X8, [X20 + 0x40]
	0x01DF2938 CBZ X8, 0x1DF2A14
	0x01DF293C LDR X8, [X8 + 0x20]
	0x01DF2940 CBZ X8, 0x1DF294C
	0x01DF2944 LDR W20, [X8]
	0x01DF2948 B 0x1DF2950
	0x01DF294C MOV W20, W31
	0x01DF2950 ADD X8, X31, 0x0
	0x01DF2954 MOV X0, X19
	0x01DF2958 BL 0x1DEEE54
	0x01DF295C LDP V0, V1, [X31]
	0x01DF2960 LDP V2, V3, [X31 + 0x20]
	0x01DF2964 LDR X1, [X23]
	0x01DF2968 STP V0, V1, [X31 + 0x40]
	0x01DF296C STP V2, V3, [X31 + 0x60]
	0x01DF2970 ADD X0, X31, 0x40
	0x01DF2974 BL 0x2415724
	0x01DF2978 CMP W0, 0x7
	0x01DF297C B.GT 0x1DF290C
	0x01DF2980 ADD X8, X31, 0x0
	0x01DF2984 MOV X0, X19
	0x01DF2988 BL 0x1DEEE54
	0x01DF298C LDP V0, V1, [X31]
	0x01DF2990 LDP V2, V3, [X31 + 0x20]
	0x01DF2994 LDR X2, [X24]
	0x01DF2998 STP V0, V1, [X31 + 0x40]
	0x01DF299C STP V2, V3, [X31 + 0x60]
	0x01DF29A0 ADD X0, X31, 0x40
	0x01DF29A4 MOV W1, W20
	0x01DF29A8 BL 0x2415AF8
	0x01DF29AC TBNZ X0, 0x0, 0x1DF290C
	0x01DF29B0 ADD X8, X31, 0x0
	0x01DF29B4 MOV X0, X19
	0x01DF29B8 BL 0x1DEEE54
	0x01DF29BC LDP V0, V1, [X31]
	0x01DF29C0 LDP V2, V3, [X31 + 0x20]
	0x01DF29C4 LDR X2, [X25]
	0x01DF29C8 STP V0, V1, [X31 + 0x40]
	0x01DF29CC STP V2, V3, [X31 + 0x60]
	0x01DF29D0 ADD X0, X31, 0x40
	0x01DF29D4 FMOV S0, W31
	0x01DF29D8 MOV W1, W20
	0x01DF29DC BL 0x2415E40
	0x01DF29E0 B 0x1DF290C
	0x01DF29E4 LDR X1, [X22]
	0x01DF29E8 ADD X0, X31, 0x80
	0x01DF29EC BL 0x2BC434C
	0x01DF29F0 MOVZ W8, 0x1
	0x01DF29F4 STR W8, [X19 + 0xE0]
	0x01DF29F8 LDP X20, X19, [X31 + 0xD0]
	0x01DF29FC LDP X22, X21, [X31 + 0xC0]
	0x01DF2A00 LDP X24, X23, [X31 + 0xB0]
	0x01DF2A04 LDP X30, X25, [X31 + 0xA0]
	0x01DF2A08 ADD X31, X31, 0xE0
	0x01DF2A0C RET
	0x01DF2A10 BL 0x1C16F20
	0x01DF2A14 BL 0x1C16F20
	0x01DF2A18 BL 0x1C16F20
	0x01DF2A1C BL 0x1C16F28
	0x01DF2A20 B 0x1DF2A44
	0x01DF2A24 B 0x1DF2A44
	0x01DF2A28 B 0x1DF2A44
	0x01DF2A2C B 0x1DF2A44
	0x01DF2A30 B 0x1DF2A44
	0x01DF2A34 B 0x1DF2A44
	0x01DF2A38 B 0x1DF2A44
	0x01DF2A3C B 0x1DF2A44
	0x01DF2A40 B 0x1DF2A44
	0x01DF2A44 MOV X20, X0
	0x01DF2A48 CMP W1, 0x1
	0x01DF2A4C B.NE 0x1DF2A78
	0x01DF2A50 MOV X0, X20
	0x01DF2A54 BL 0x3EB1AD0
	0x01DF2A58 LDR X21, [X0]
	0x01DF2A5C BL 0x3EB1AE0
	0x01DF2A60 LDR X1, [X22]
	0x01DF2A64 ADD X0, X31, 0x80
	0x01DF2A68 BL 0x2BC434C
	0x01DF2A6C CBZ X21, 0x1DF29F0
	0x01DF2A70 MOV X0, X21
	0x01DF2A74 BL 0x1C16F18
	0x01DF2A78 MOV X21, X31
	0x01DF2A7C B 0x1DF2A84
	0x01DF2A80 MOV X20, X0
	0x01DF2A84 LDR X1, [X22]
	0x01DF2A88 ADD X0, X31, 0x80
	0x01DF2A8C BL 0x2BC434C
	0x01DF2A90 CBNZ X21, 0x1DF2A9C
	0x01DF2A94 MOV X0, X20
	0x01DF2A98 BL 0x1D2C690
	0x01DF2A9C MOV X0, X21
	0x01DF2AA0 BL 0x1C16F18
	0x01DF2AA4 BL 0x1990590
	0x01DF2AA8 STP D13, D12, [X31 - 0x50]!
	0x01DF2AAC STP D11, D10, [X31 + 0x10]
	0x01DF2AB0 STP D9, D8, [X31 + 0x20]
	0x01DF2AB4 STP X30, X21, [X31 + 0x30]
	0x01DF2AB8 STP X20, X19, [X31 + 0x40]
	0x01DF2ABC ADRP X20, 0x25E6000
	0x01DF2AC0 LDRB W8, [X20 + 0xD06]
	0x01DF2AC4 MOV X19, X0
	0x01DF2AC8 TBNZ X8, 0x0, 0x1DF2AE0
	0x01DF2ACC ADRP X0, 0x2301000
	0x01DF2AD0 LDR X0, [X0 + 0x598]
	0x01DF2AD4 BL 0x1C16CF4
	0x01DF2AD8 MOVZ W8, 0x1
	0x01DF2ADC STRB W8, [X20 + 0xD06]
	0x01DF2AE0 LDR X0, [X19 + 0x38]
	0x01DF2AE4 CBZ X0, 0x1DF2CE0
	0x01DF2AE8 ADRP X21, 0x2301000
	0x01DF2AEC LDR V8, [X19 + 0xB8]
	0x01DF2AF0 LDR X21, [X21 + 0x598]
	0x01DF2AF4 MOV X1, X31
	0x01DF2AF8 BL 0x1E9E550
	0x01DF2AFC MOVZ W8, 0x42700000
	0x01DF2B00 FADD S0, S8, S0
	0x01DF2B04 FMOV S1, W8
	0x01DF2B08 FCMP S0, S1
	0x01DF2B0C STR S0, [X19 + 0xB8]
	0x01DF2B10 B.LE 0x1DF2B4C
	0x01DF2B14 LDR X8, [X19]
	0x01DF2B18 STR W31, [X19 + 0xB8]
	0x01DF2B1C MOV X0, X19
	0x01DF2B20 MOV W1, W31
	0x01DF2B24 LDR X9, [X8 + 0x368]
	0x01DF2B28 LDR X2, [X8 + 0x370]
	0x01DF2B2C BLR X9
	0x01DF2B30 LDRB W8, [X19 + 0xF0]
	0x01DF2B34 CBZ W8, 0x1DF2B4C
	0x01DF2B38 LDR X8, [X19]
	0x01DF2B3C MOV X0, X19
	0x01DF2B40 LDR X9, [X8 + 0x398]
	0x01DF2B44 LDR X1, [X8 + 0x3A0]
	0x01DF2B48 BLR X9
	0x01DF2B4C LDR X0, [X21]
	0x01DF2B50 LDR X20, [X19 + 0x150]
	0x01DF2B54 LDR W8, [X0 + 0xE0]
	0x01DF2B58 CBNZ W8, 0x1DF2B60
	0x01DF2B5C BL 0x1C16DFC
	0x01DF2B60 MOV X0, X20
	0x01DF2B64 MOV X1, X31
	0x01DF2B68 MOV X2, X31
	0x01DF2B6C BL 0x3C3883C
	0x01DF2B70 TBNZ X0, 0x0, 0x1DF2B9C
	0x01DF2B74 LDR X0, [X21]
	0x01DF2B78 LDR X20, [X19 + 0x158]
	0x01DF2B7C LDR W8, [X0 + 0xE0]
	0x01DF2B80 CBNZ W8, 0x1DF2B88
	0x01DF2B84 BL 0x1C16DFC
	0x01DF2B88 MOV X0, X20
	0x01DF2B8C MOV X1, X31
	0x01DF2B90 MOV X2, X31
	0x01DF2B94 BL 0x3C3883C
	0x01DF2B98 TBZ X0, 0x0, 0x1DF2BB4
	0x01DF2B9C LDR X8, [X19]
	0x01DF2BA0 MOVZ W1, 0x1
	0x01DF2BA4 MOV X0, X19
	0x01DF2BA8 LDR X9, [X8 + 0x368]
	0x01DF2BAC LDR X2, [X8 + 0x370]
	0x01DF2BB0 BLR X9
	0x01DF2BB4 LDR X8, [X19 + 0x150]
	0x01DF2BB8 STRB W31, [X19 + 0xBD]
	0x01DF2BBC CBZ X8, 0x1DF2CE0
	0x01DF2BC0 LDR X0, [X19 + 0xD0]
	0x01DF2BC4 CBZ X0, 0x1DF2CE0
	0x01DF2BC8 LDP S11, S12, [X8 + 0x28]
	0x01DF2BCC LDR V13, [X8 + 0x30]
	0x01DF2BD0 MOV X1, X31
	0x01DF2BD4 BL 0x3C3F58C
	0x01DF2BD8 ADRP X20, 0x25E6000
	0x01DF2BDC LDRB W8, [X20 + 0x85C]
	0x01DF2BE0 MOV V8.16B, V0.16B
	0x01DF2BE4 MOV V9.16B, V1.16B
	0x01DF2BE8 MOV V10.16B, V2.16B
	0x01DF2BEC CBNZ W8, 0x1DF2C04
	0x01DF2BF0 ADRP X0, 0x2301000
	0x01DF2BF4 LDR X0, [X0 + 0x5A8]
	0x01DF2BF8 BL 0x1C16CF4
	0x01DF2BFC MOVZ W8, 0x1
	0x01DF2C00 STRB W8, [X20 + 0x85C]
	0x01DF2C04 ADRP X8, 0x2301000
	0x01DF2C08 LDR X8, [X8 + 0x5A8]
	0x01DF2C0C FSUB S11, S11, S8
	0x01DF2C10 FSUB S9, S12, S9
	0x01DF2C14 FSUB S8, S13, S10
	0x01DF2C18 LDR X0, [X8]
	0x01DF2C1C LDR W8, [X0 + 0xE0]
	0x01DF2C20 CBNZ W8, 0x1DF2C28
	0x01DF2C24 BL 0x1C16DFC
	0x01DF2C28 FMUL S0, S11, S11
	0x01DF2C2C FMUL S1, S9, S9
	0x01DF2C30 FADD S0, S0, S1
	0x01DF2C34 FMUL S1, S8, S8
	0x01DF2C38 FADD S0, S1, S0
	0x01DF2C3C MOV X0, X19
	0x01DF2C40 FSQRT S8, S0
	0x01DF2C44 BL 0x1DF4B6C
	0x01DF2C48 FCMP S8, S0
	0x01DF2C4C B.PL 0x1DF2CC8
	0x01DF2C50 LDRB W8, [X19 + 0xBC]
	0x01DF2C54 CBNZ W8, 0x1DF2C60
	0x01DF2C58 MOVZ W8, 0x101
	0x01DF2C5C STRH W8, [X19 + 0xBC]
	0x01DF2C60 LDR X0, [X19 + 0x38]
	0x01DF2C64 CBZ X0, 0x1DF2CE0
	0x01DF2C68 LDR V8, [X19 + 0xB4]
	0x01DF2C6C MOV X1, X31
	0x01DF2C70 BL 0x1E9E550
	0x01DF2C74 LDR X8, [X19 + 0xC0]
	0x01DF2C78 FADD S0, S8, S0
	0x01DF2C7C STR S0, [X19 + 0xB4]
	0x01DF2C80 CBZ X8, 0x1DF2CE0
	0x01DF2C84 LDR V1, [X8 + 0x44]
	0x01DF2C88 FCMP S0, S1
	0x01DF2C8C B.LE 0x1DF2CC8
	0x01DF2C90 LDR X8, [X19]
	0x01DF2C94 MOVZ W9, 0x100
	0x01DF2C98 STR W31, [X19 + 0xB4]
	0x01DF2C9C STRH W9, [X19 + 0xBC]
	0x01DF2CA0 LDR X3, [X8 + 0x368]
	0x01DF2CA4 LDR X2, [X8 + 0x370]
	0x01DF2CA8 MOV X0, X19
	0x01DF2CAC LDP X20, X19, [X31 + 0x40]
	0x01DF2CB0 LDP X30, X21, [X31 + 0x30]
	0x01DF2CB4 LDP D9, D8, [X31 + 0x20]
	0x01DF2CB8 LDP D11, D10, [X31 + 0x10]
	0x01DF2CBC MOV W1, W31
	0x01DF2CC0 LDP D13, D12, [X31], #0x50
	0x01DF2CC4 BR X3
	0x01DF2CC8 LDP X20, X19, [X31 + 0x40]
	0x01DF2CCC LDP X30, X21, [X31 + 0x30]
	0x01DF2CD0 LDP D9, D8, [X31 + 0x20]
	0x01DF2CD4 LDP D11, D10, [X31 + 0x10]
	0x01DF2CD8 LDP D13, D12, [X31], #0x50
	0x01DF2CDC RET
	0x01DF2CE0 BL 0x1C16F20
	0x01DF2CE4 SUB X31, X31, 0xB0
	0x01DF2CE8 STP D13, D12, [X31 + 0x60]
	0x01DF2CEC STP D11, D10, [X31 + 0x70]
	0x01DF2CF0 STP D9, D8, [X31 + 0x80]
	0x01DF2CF4 STR X30, [X31 + 0x90]
	0x01DF2CF8 STP X20, X19, [X31 + 0xA0]
	0x01DF2CFC MOVI V0.2D, 0x0
	0x01DF2D00 MOV X1, X31
	0x01DF2D04 MOV X19, X0
	0x01DF2D08 STR W31, [X31 + 0x50]
	0x01DF2D0C STR W31, [X31 + 0x20]
	0x01DF2D10 STP V0, V0, [X31 + 0x30]
	0x01DF2D14 STP V0, V0, [X31]
	0x01DF2D18 BL 0x3C32E90
	0x01DF2D1C CBZ X0, 0x1DF3034
	0x01DF2D20 MOV X1, X31
	0x01DF2D24 BL 0x3C3F58C
	0x01DF2D28 MOV X0, X19
	0x01DF2D2C MOV V8.16B, V0.16B
	0x01DF2D30 MOV V9.16B, V1.16B
	0x01DF2D34 MOV V10.16B, V2.16B
	0x01DF2D38 BL 0x1DEA5A0
	0x01DF2D3C FSUB S0, S8, S0
	0x01DF2D40 FSUB S1, S9, S1
	0x01DF2D44 FSUB S2, S10, S2
	0x01DF2D48 FMUL S0, S0, S0
	0x01DF2D4C FMUL S1, S1, S1
	0x01DF2D50 FMUL S2, S2, S2
	0x01DF2D54 FADD S0, S0, S1
	0x01DF2D58 FADD S0, S2, S0
	0x01DF2D5C FMOV S1, 2.25
	0x01DF2D60 FCMP S0, S1
	0x01DF2D64 B.PL 0x1DF3018
	0x01DF2D68 LDR X20, [X19 + 0xE8]
	0x01DF2D6C MOV X0, X19
	0x01DF2D70 MOV X1, X31
	0x01DF2D74 BL 0x3C32E90
	0x01DF2D78 CBZ X0, 0x1DF3034
	0x01DF2D7C MOV X1, X31
	0x01DF2D80 BL 0x3C3F58C
	0x01DF2D84 CBZ X20, 0x1DF3034

ISIL:
	001 Subtract X31, X31, 496
	002 Move [X31+336], D15
	003 Move [X31+344], D14
	004 Move [X31+352], D13
	005 Move [X31+360], D12
	006 Move [X31+368], D11
	007 Move [X31+376], D10
	008 Move [X31+384], D9
	009 Move [X31+392], D8
	010 Move [X31+400], X29
	011 Move [X31+408], X30
	012 Move [X31+416], X28
	013 Move [X31+424], X27
	014 Move [X31+432], X26
	015 Move [X31+440], X25
	016 Move [X31+448], X24
	017 Move [X31+456], X23
	018 Move [X31+464], X22
	019 Move [X31+472], X21
	020 Move [X31+480], X20
	021 Move [X31+488], X19
	022 Move X20, 0x25E7000
	023 Move W8, [X20+3293]
	024 Move V8, V3
	025 Move V9, V2
	026 Move V11, V1
	027 Move V10, V0
	028 Move X19, X0
	029 Add X27, X31, 176
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {63}
	034 Move X0, 0x2302000
	035 Move X0, [X0+2600]
	036 Call 0x1C17CF4
	037 Move X0, 0x2308000
	038 Move X0, [X0+528]
	039 Call 0x1C17CF4
	040 Move X0, 0x2308000
	041 Move X0, [X0+536]
	042 Call 0x1C17CF4
	043 Move X0, 0x2308000
	044 Move X0, [X0+544]
	045 Call 0x1C17CF4
	046 Move X0, 0x2302000
	047 Move X0, [X0+1496]
	048 Call 0x1C17CF4
	049 Move X0, 0x2308000
	050 Move X0, [X0+552]
	051 Call 0x1C17CF4
	052 Move X0, 0x2308000
	053 Move X0, [X0+64]
	054 Call 0x1C17CF4
	055 Move X0, 0x2307000
	056 Move X0, [X0+3136]
	057 Call 0x1C17CF4
	058 Move X0, 0x2302000
	059 Move X0, [X0+1528]
	060 Call 0x1C17CF4
	061 Move W8, 1
	062 Move [X20+3293], W8
	063 Move X24, 0x2302000
	064 Move X20, 0x2307000
	065 Move X26, 0x2308000
	066 Move X28, 0x2308000
	067 Move X24, [X24+1496]
	068 Move X20, [X20+3136]
	069 Move X26, [X26+552]
	070 Move X28, [X28+536]
	071 Move X21, X31
	072 NotImplemented "Instruction MOVI not yet implemented."
	073 Move W8, 1
	074 Move [X31+304], V0
	075 Move [X31+312], V0
	076 Move [X31+272], V0
	077 Move [X31+280], V0
	078 Move [X27+76], V0
	079 Move [X31+224], V0
	080 Move [X31+232], V0
	081 Move [X27+28], V0
	082 Move [X31+176], V0
	083 Move [X31+184], V0
	084 Move [X31+156], V0
	085 Move [X31+128], V0
	086 Move [X31+136], V0
	087 Move X9, [X19+528]
	088 Compare X9, 0
	089 JumpIfEqual {742}
	090 Move W22, W8
	091 Move W8, [X9+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Add X8, X9, X21
	094 Move X23, [X8+32]
	095 Compare X23, 0
	096 JumpIfEqual {742}
	097 Move W8, [X23+16]
	098 Compare W8, 0
	099 JumpIfEqual {125}
	100 Move X0, X31
	101 Call Time.get_time
	102 Move S1, [X23+20]
	103 Move S2, [X23+24]
	104 Subtract S0, S0, S1
	105 NotImplemented "Instruction FCMP not yet implemented."
	106 Move [X23+16], W31
	107 Move X8, [X19+528]
	108 Compare X8, 0
	109 JumpIfEqual {742}
	110 Move W9, [X8+24]
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Add X8, X8, X21
	113 Move X8, [X8+32]
	114 Compare X8, 0
	115 JumpIfEqual {742}
	116 Move V0, [X8+48]
	117 Move X9, [X8+40]
	118 Move X0, X19
	119 Move V1, V11
	120 Move [X31+8], S0
	121 Move V0, V10
	122 Move V2, V9
	123 Move [X31], X9
	124 Call FakeGorillaController.ApplyBounceForce, X0, X1, X2, X3
	125 Move W8, W31
	126 Move W21, 1
	127 Move TEMP, X22
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfEqual {87}
	131 Move X0, [X19+496]
	132 Compare X0, 0
	133 JumpIfEqual {742}
	134 Move X21, [X19+472]
	135 Move X1, X31
	136 Move [X31+56], S9
	137 Move [X31+64], S11
	138 Move [X31+52], S10
	139 Move [X31+44], S8
	140 Call Transform.get_position, X0
	141 Move X0, [X19+496]
	142 Compare X0, 0
	143 JumpIfEqual {742}
	144 Move X1, X31
	145 Move V8, V0
	146 Move V11, V1
	147 Move V12, V2
	148 Call Transform.get_rotation, X0
	149 Move X0, X19
	150 Move V13, V0
	151 Move V15, V1
	152 Move V9, V2
	153 Move V10, V3
	154 Call FakeGorillaController.get_RADIUS_BODY, X0
	155 Move X0, [X24]
	156 Move V14, V0
	157 Move W8, [X0+224]
	158 Compare W8, 0
	159 JumpIfNotEqual {162}
	160 Call 0x1C17DFC
	161 Move X0, [X24]
	162 Move X8, [X20]
	163 Move X9, [X0+184]
	164 Add X20, X19, 520
	165 Move W10, [X8+224]
	166 Move W22, [X9]
	167 Compare W10, 0
	168 JumpIfNotEqual {171}
	169 Move X0, X8
	170 Call 0x1C17DFC
	171 Move X0, X20
	172 Move X1, X21
	173 Move V0, V8
	174 Move V1, V11
	175 Move V2, V12
	176 Move V3, V13
	177 Move V4, V15
	178 Move V5, V9
	179 Move V6, V10
	180 Move V7, V14
	181 Move X2, X22
	182 Call MobDetectionUtil.GetContactPoints, X0, X1, X2, X3, V0, X4
	183 Move X0, [X19+496]
	184 Compare X0, 0
	185 JumpIfEqual {742}
	186 Move X1, X31
	187 Call Transform.get_position, X0
	188 Move X8, [X20]
	189 Move S12, [X31+52]
	190 Move S10, [X31+56]
	191 Move V3, [X31+60]
	192 Compare X8, 0
	193 JumpIfEqual {742}
	194 Subtract S0, S12, S0
	195 Move [X31+48], S0
	196 Move W8, [X8+24]
	197 Move X22, 0x2302000
	198 Move X23, 0x2302000
	199 Move X22, [X22+1440]
	200 Move X23, [X23+1448]
	201 Subtract S13, S3, S1
	202 Subtract S14, S10, S2
	203 Move X25, 0x25E7000
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move X21, -19951616
	206 Move X29, 0x25E7000
	207 Move [X31+36], S14
	208 Move [X31+44], S13
	209 Move W8, [X29+1923]
	210 Compare W8, 0
	211 JumpIfNotEqual {217}
	212 Move X0, 0x2302000
	213 Move X0, [X0+1440]
	214 Call 0x1C17CF4
	215 Move W8, 1
	216 Move [X29+1923], W8
	217 Move X0, [X20]
	218 Compare X0, 0
	219 JumpIfEqual {742}
	220 Move X8, [X22]
	221 Move X1, [X26]
	222 Move X8, [X8+184]
	223 Move S10, [X8+4]
	224 Move S9, [X8+8]
	225 Move V12, [X8]
	226 Add X8, X31, 64
	227 Call List`1<RaycastHit>.GetEnumerator, X0
	228 Move V0, [X31+64]
	229 Move V1, [X31+80]
	230 Move V2, [X31+96]
	231 Move V3, [X31+112]
	232 Add X8, X31, 272
	233 Add X26, X8, 16
	234 Move [X31+272], V0
	235 Move [X31+280], V1
	236 Move [X31+304], V2
	237 Move [X31+312], V3
	238 Move V11, V9
	239 Move V8, V10
	240 Move V13, V12
	241 Move X1, [X28]
	242 Add X0, X31, 272
	243 Call Enumerator<RaycastHit>.MoveNext, X0
	244 Move TEMP, X0
	245 And TEMP, TEMP, 1
	246 Compare TEMP, 1
	247 JumpIfNotEqual {266}
	248 NotImplemented "Instruction LDUR not yet implemented."
	249 Move V2, [X26]
	250 Move V1, [X26+16]
	251 Move [X27+76], V0
	252 Move [X31+224], V2
	253 Move [X31+232], V1
	254 Add X0, X31, 224
	255 Move X1, X31
	256 Call RaycastHit.get_point, X0
	257 Add S13, S13, S0
	258 Add S8, S8, S1
	259 Add S11, S11, S2
	260 Add X0, X31, 224
	261 Move X1, X31
	262 Call RaycastHit.get_normal, X0
	263 Add S12, S12, S0
	264 Add S10, S10, S1
	265 Add S9, S9, S2
	266 Move X8, 0x2308000
	267 Move X8, [X8+528]
	268 Add X0, X31, 272
	269 Move X1, [X8]
	270 Call Enumerator<RaycastHit>.Dispose, X0
	271 Move X8, [X20]
	272 Compare X8, 0
	273 JumpIfEqual {742}
	274 Move X26, 0x2302000
	275 Move W9, [X25+1925]
	276 Move V14, [X8+24]
	277 Move X26, [X26+1528]
	278 Compare W9, 0
	279 JumpIfNotEqual {285}
	280 Move X0, 0x2302000
	281 Move X0, [X0+1448]
	282 Call 0x1C17CF4
	283 Move W8, 1
	284 Move [X25+1925], W8
	285 Move X0, [X23]
	286 NotImplemented "Instruction SCVTF not yet implemented."
	287 Move W8, [X0+224]
	288 Compare W8, 0
	289 JumpIfNotEqual {291}
	290 Call 0x1C17DFC
	291 Multiply S0, S12, S12
	292 Multiply S1, S10, S10
	293 Move V2, [X21+380]
	294 Add S0, S1, S0
	295 Multiply S1, S9, S9
	296 Add S0, S1, S0
	297 NotImplemented "Instruction FSQRT not yet implemented."
	298 NotImplemented "Instruction FDIV not yet implemented."
	299 NotImplemented "Instruction FDIV not yet implemented."
	300 NotImplemented "Instruction FCMP not yet implemented."
	301 NotImplemented "Instruction FDIV not yet implemented."
	302 NotImplemented "Instruction FDIV not yet implemented."
	303 NotImplemented "Instruction FDIV not yet implemented."
	304 Move S12, [X31+52]
	305 Move S10, [X31+56]
	306 NotImplemented "Instruction FDIV not yet implemented."
	307 Move X0, [X19+496]
	308 Compare X0, 0
	309 JumpIfEqual {742}
	310 Move X1, X31
	311 Call Transform.get_position, X0
	312 Move X26, 0x2302000
	313 Move X0, [X19+472]
	314 Move X26, [X26+1528]
	315 Compare X0, 0
	316 JumpIfEqual {742}
	317 Move X1, X31
	318 Move V8, V0
	319 Move V11, V1
	320 Move V15, V2
	321 Call SphereCollider.get_radius, X0
	322 Move X0, [X24]
	323 Move V9, V0
	324 Move W8, [X0+224]
	325 Compare W8, 0
	326 JumpIfNotEqual {329}
	327 Call 0x1C17DFC
	328 Move X0, [X24]
	329 Move X8, [X0+184]
	330 Move X1, X31
	331 Move W0, [X8]
	332 Call LayerMask.op_Implicit, X0
	333 Move X8, [X26]
	334 Move W20, W0
	335 Move W9, [X8+224]
	336 Compare W9, 0
	337 JumpIfNotEqual {340}
	338 Move X0, X8
	339 Call 0x1C17DFC
	340 Move V3, [X31+48]
	341 Add X0, X31, 176
	342 Move V0, V8
	343 Move V1, V11
	344 Move V2, V15
	345 Move V4, V13
	346 Move V5, V14
	347 Move V6, V9
	348 Move W1, W20
	349 Move X2, X31
	350 Call Physics.Raycast, X0, X1, X2, V0, X3
	351 Move TEMP, X0
	352 And TEMP, TEMP, 1
	353 Compare TEMP, 1
	354 JumpIfNotEqual {391}
	355 Add X0, X31, 176
	356 Move X1, X31
	357 Call RaycastHit.get_point, X0
	358 Add X0, X31, 176
	359 Move X1, X31
	360 Move V15, V0
	361 Move V8, V1
	362 Move V11, V2
	363 Call RaycastHit.get_normal, X0
	364 Move V3, V0
	365 Move V4, V1
	366 Move V5, V2
	367 Move W8, [X29+1923]
	368 Move V12, [X31+52]
	369 Compare W8, 0
	370 JumpIfNotEqual {376}
	371 Move X0, 0x2302000
	372 Move X0, [X0+1440]
	373 Call 0x1C17CF4
	374 Move W8, 1
	375 Move [X29+1923], W8
	376 Move X8, [X22]
	377 Move V10, [X31+56]
	378 Move X8, [X8+184]
	379 Move S3, [X8]
	380 Move S4, [X8+4]
	381 Move V5, [X8+8]
	382 Move V0, [X31+60]
	383 Move X0, X19
	384 Move V1, V8
	385 Move V2, V11
	386 Move [X31], S12
	387 Move [X31+8], S0
	388 Move V0, V15
	389 Move [X31+8], S10
	390 Call FakeGorillaController.RequestMoveToTarget, X0, X1, X2, X3
	391 Move X0, [X19+488]
	392 Compare X0, 0
	393 JumpIfEqual {742}
	394 Move X1, X31
	395 Call Rigidbody.get_velocity, X0
	396 Move X0, X19
	397 Move X1, X31
	398 Move V14, V0
	399 Move V8, V1
	400 Move V9, V2
	401 Call Component.get_transform, X0
	402 Compare X0, 0
	403 JumpIfEqual {742}
	404 Move X1, X31
	405 Move [X31+56], S9
	406 Move [X31+64], S8
	407 Call Transform.get_position, X0
	408 Move X20, 0x25E7000
	409 Move W8, [X20+2749]
	410 Move V8, V0
	411 Move V15, V1
	412 Move V11, V2
	413 Compare W8, 0
	414 JumpIfNotEqual {420}
	415 Move X0, 0x2302000
	416 Move X0, [X0+1440]
	417 Call 0x1C17CF4
	418 Move W8, 1
	419 Move [X20+2749], W8
	420 Move X8, [X22]
	421 Move X0, [X24]
	422 Move X8, [X8+184]
	423 Move W9, [X0+224]
	424 Move S12, [X8+36]
	425 Move S13, [X8+40]
	426 Move V9, [X8+44]
	427 Compare W9, 0
	428 JumpIfNotEqual {431}
	429 Call 0x1C17DFC
	430 Move X0, [X24]
	431 Move X8, [X0+184]
	432 Move X1, X31
	433 Move W0, [X8]
	434 Call LayerMask.op_Implicit, X0
	435 Move X8, [X26]
	436 Move W20, W0
	437 Move W9, [X8+224]
	438 Compare W9, 0
	439 JumpIfNotEqual {442}
	440 Move X0, X8
	441 Call 0x1C17DFC
	442 Add X0, X31, 128
	443 Move S6, 6
	444 Move V0, V8
	445 Move V1, V15
	446 Move V2, V11
	447 Move V3, V12
	448 Move V4, V13
	449 Move V5, V9
	450 Move W1, W20
	451 Move X2, X31
	452 Call Physics.Raycast, X0, X1, X2, V0, X3
	453 Move V1, [X31+44]
	454 Move S0, 2
	455 Move W20, W0
	456 And W31, W0, 1
	457 Add S0, S1, S0
	458 Move X0, X19
	459 Move X1, X31
	460 NotImplemented "Instruction FCSEL not yet implemented."
	461 Call Component.get_transform, X0
	462 Compare X0, 0
	463 JumpIfEqual {742}
	464 Move X1, X31
	465 Call Transform.get_position, X0
	466 Move X0, X19
	467 Move X1, X31
	468 Move V8, V0
	469 Move V9, V1
	470 Move V11, V2
	471 Call Component.get_transform, X0
	472 Compare X0, 0
	473 JumpIfEqual {742}
	474 Move X1, X31
	475 Move [X31+28], S14
	476 Move [X31+36], S11
	477 Move [X31+44], S9
	478 Move [X31+52], S8
	479 Call Transform.get_position, X0
	480 Move X24, 0x25E7000
	481 Move W8, [X24+1926]
	482 Move V12, V0
	483 Move V9, V1
	484 Move V13, V2
	485 Compare W8, 0
	486 JumpIfNotEqual {492}
	487 Move X0, 0x2302000
	488 Move X0, [X0+1440]
	489 Call 0x1C17CF4
	490 Move W8, 1
	491 Move [X24+1926], W8
	492 Move X8, [X22]
	493 Move S0, 6
	494 And W31, W20, 1
	495 Move S11, 1
	496 Move X8, [X8+184]
	497 Move S8, W31
	498 NotImplemented "Instruction FCSEL not yet implemented."
	499 NotImplemented "Instruction FCSEL not yet implemented."
	500 Move S1, [X8+24]
	501 Move S2, [X8+28]
	502 Move V3, [X8+32]
	503 Move X8, 0x2302000
	504 Move X8, [X8+2600]
	505 Multiply S1, S1, S0
	506 Multiply S2, S2, S0
	507 Multiply S0, S3, S0
	508 Move X0, [X8]
	509 Subtract S12, S12, S1
	510 Subtract S9, S9, S2
	511 Subtract S13, S13, S0
	512 Move W8, [X0+224]
	513 Compare W8, 0
	514 JumpIfNotEqual {516}
	515 Call 0x1C17DFC
	516 Move V0, [X31+52]
	517 Move V1, [X31+44]
	518 Move V2, [X31+32]
	519 Move V3, V12
	520 Move V4, V9
	521 Move V5, V13
	522 Move X0, X31
	523 Move [X31+8], S8
	524 Move [X31+16], S11
	525 Move [X31], S14
	526 Move [X31+8], S15
	527 Call Debug.DrawLine, X0, X1, X2
	528 Move V12, [X31+48]
	529 Move S14, [X31+36]
	530 Move S13, [X31+40]
	531 Move X0, X31
	532 Move V0, V12
	533 Move V1, V13
	534 Move V2, V14
	535 Call Extensions.Flatten, X0
	536 Move X0, [X19+56]
	537 Compare X0, 0
	538 JumpIfEqual {742}
	539 Move X1, X31
	540 Move V8, V0
	541 Move V9, V1
	542 Move V11, V2
	543 Call NetworkRunner.get_DeltaTime, X0
	544 Move X0, [X19+488]
	545 Compare X0, 0
	546 JumpIfEqual {742}
	547 Multiply S2, S9, S0
	548 Multiply S3, S10, S2
	549 Move V2, [X31+56]
	550 Multiply S1, S11, S0
	551 Multiply S1, S10, S1
	552 Multiply S0, S8, S0
	553 Add S2, S2, S1
	554 Move V1, [X31+60]
	555 Multiply S0, S10, S0
	556 Move X1, X31
	557 Add S1, S1, S3
	558 Move V3, [X31+28]
	559 Add S0, S3, S0
	560 Call Rigidbody.set_velocity, X0, X1
	561 Move V0, V12
	562 Move V1, V13
	563 Move V2, V14
	564 Move X0, X31
	565 Call Extensions.Flatten, X0
	566 Move W8, [X25+1925]
	567 Move V8, V0
	568 Move V9, V1
	569 Move V10, V2
	570 Compare W8, 0
	571 JumpIfNotEqual {577}
	572 Move X0, 0x2302000
	573 Move X0, [X0+1448]
	574 Call 0x1C17CF4
	575 Move W8, 1
	576 Move [X25+1925], W8
	577 Move X0, [X23]
	578 Move W8, [X0+224]
	579 Compare W8, 0
	580 JumpIfNotEqual {582}
	581 Call 0x1C17DFC
	582 Multiply S0, S8, S8
	583 Multiply S1, S9, S9
	584 Move V2, [X21+380]
	585 Add S0, S0, S1
	586 Multiply S1, S10, S10
	587 Add S0, S1, S0
	588 NotImplemented "Instruction FSQRT not yet implemented."
	589 NotImplemented "Instruction FCMP not yet implemented."
	590 NotImplemented "Instruction FDIV not yet implemented."
	591 NotImplemented "Instruction FDIV not yet implemented."
	592 NotImplemented "Instruction FDIV not yet implemented."
	593 Move W8, [X29+1923]
	594 Compare W8, 0
	595 JumpIfNotEqual {601}
	596 Move X0, 0x2302000
	597 Move X0, [X0+1440]
	598 Call 0x1C17CF4
	599 Move W8, 1
	600 Move [X29+1923], W8
	601 Move X8, [X22]
	602 Move X8, [X8+184]
	603 Move S8, [X8]
	604 Move S9, [X8+4]
	605 Move V10, [X8+8]
	606 Move X8, [X19+192]
	607 Compare X8, 0
	608 JumpIfEqual {742}
	609 Move V11, [X8+64]
	610 Move X0, X19
	611 Move X1, X31
	612 Call Component.get_transform, X0
	613 Compare X0, 0
	614 JumpIfEqual {742}
	615 Move X1, X31
	616 Move [X31+60], S11
	617 Call Transform.get_forward, X0
	618 Move X20, 0x25E7000
	619 Move W8, [X20+2596]
	620 Move V11, V0
	621 Move V12, V1
	622 Move V13, V2
	623 Compare W8, 0
	624 JumpIfNotEqual {630}
	625 Move X0, 0x2302000
	626 Move X0, [X0+1448]
	627 Call 0x1C17CF4
	628 Move W8, 1
	629 Move [X20+2596], W8
	630 Move X0, [X23]
	631 Multiply S0, S8, S8
	632 Multiply S1, S9, S9
	633 Add S0, S0, S1
	634 Multiply S1, S10, S10
	635 Move W8, [X0+224]
	636 Add S15, S1, S0
	637 Multiply S0, S11, S11
	638 Multiply S1, S12, S12
	639 Add S0, S0, S1
	640 Multiply S1, S13, S13
	641 Add S14, S1, S0
	642 Compare W8, 0
	643 JumpIfNotEqual {645}
	644 Call 0x1C17DFC
	645 Move X8, -19955712
	646 Move V1, [X8+4072]
	647 Multiply S0, S15, S14
	648 NotImplemented "Instruction FSQRT not yet implemented."
	649 Move S15, W31
	650 NotImplemented "Instruction FCMP not yet implemented."
	651 Move X0, [X23]
	652 Multiply S1, S8, S11
	653 Multiply S2, S9, S12
	654 Multiply S3, S10, S13
	655 Add S1, S1, S2
	656 Add S1, S3, S1
	657 Move W8, [X0+224]
	658 NotImplemented "Instruction FDIV not yet implemented."
	659 Move S1, 1
	660 Move S2, -1
	661 NotImplemented "Instruction FMIN not yet implemented."
	662 NotImplemented "Instruction FCMP not yet implemented."
	663 NotImplemented "Instruction FCSEL not yet implemented."
	664 Compare W8, 0
	665 JumpIfNotEqual {667}
	666 Call 0x1C17DFC
	667 NotImplemented "Instruction FCVT not yet implemented."
	668 Call 0x3EB2B80
	669 Move X8, -19951616
	670 Move V1, [X8+1096]
	671 NotImplemented "Instruction INVALID not yet implemented."
	672 Multiply S15, S0, S1
	673 Move X0, X19
	674 Move X1, X31
	675 Call Component.get_transform, X0
	676 Move X20, X0
	677 Move X0, X19
	678 Move X1, X31
	679 Call Component.get_transform, X0
	680 Compare X0, 0
	681 JumpIfEqual {742}
	682 Move V0, [X31+60]
	683 Move X1, X31
	684 NotImplemented "Instruction FDIV not yet implemented."
	685 Move [X31+60], S0
	686 Call Transform.get_rotation, X0
	687 Move V11, V0
	688 Move V12, V1
	689 Move V13, V2
	690 Move V0, V8
	691 Move V1, V9
	692 Move V2, V10
	693 Move X0, X31
	694 Move V14, V3
	695 Call Quaternion.LookRotation, X0
	696 Move X0, X31
	697 Move V8, V0
	698 Move V9, V1
	699 Move V10, V2
	700 Move V15, V3
	701 Call Time.get_deltaTime
	702 Move V1, [X31+60]
	703 Move V2, V13
	704 Move V3, V14
	705 Move V4, V8
	706 Multiply S0, S1, S0
	707 Move [X31], S0
	708 Move V0, V11
	709 Move V1, V12
	710 Move V5, V9
	711 Move V6, V10
	712 Move V7, V15
	713 Move X0, X31
	714 Call Quaternion.Slerp, X0, X1, V0
	715 Compare X20, 0
	716 JumpIfEqual {742}
	717 Move X0, X20
	718 Move X1, X31
	719 Call Transform.set_rotation, X0, X1
	720 Move X20, [X31+480]
	721 Move X19, [X31+488]
	722 Move X22, [X31+464]
	723 Move X21, [X31+472]
	724 Move X24, [X31+448]
	725 Move X23, [X31+456]
	726 Move X26, [X31+432]
	727 Move X25, [X31+440]
	728 Move X28, [X31+416]
	729 Move X27, [X31+424]
	730 Move X29, [X31+400]
	731 Move X30, [X31+408]
	732 Move D9, [X31+384]
	733 Move D8, [X31+392]
	734 Move D11, [X31+368]
	735 Move D10, [X31+376]
	736 Move D13, [X31+352]
	737 Move D12, [X31+360]
	738 Move D15, [X31+336]
	739 Move D14, [X31+344]
	740 Add X31, X31, 496
	741 Return 
	742 Call 0x1C17F20
	743 Call 0x1C17F28
	744 Move X27, X0
	745 NotImplemented "Instruction CMP not yet implemented."
	746 Move X0, X27
	747 Call 0x3EB2AD0
	748 Move X26, [X0]
	749 Call 0x3EB2AE0
	750 Move X8, 0x2308000
	751 Move X8, [X8+528]
	752 Add X0, X31, 272
	753 Move X1, [X8]
	754 Call Enumerator<RaycastHit>.Dispose, X0
	755 Compare X26, 0
	756 JumpIfEqual {271}
	757 Move X0, X26
	758 Call 0x1C17F18
	759 Move X26, X31
	760 Move X27, X0
	761 Move X8, 0x2308000
	762 Move X8, [X8+528]
	763 Move X1, [X8]
	764 Add X0, X31, 272
	765 Call Enumerator<RaycastHit>.Dispose, X0
	766 Compare X26, 0
	767 JumpIfNotEqual {770}
	768 Move X0, X27
	769 Call 0x1D2D690
	770 Move X0, X26
	771 Call 0x1C17F18
	772 Call 0x1991590

Method: System.Void RequestMoveToTarget(UnityEngine.Vector3 hitPosition, UnityEngine.Vector3 hitNormal, UnityEngine.Vector3 targetPosition)

Disassembly:
	0x01DF33E4 ADRP X9, 0x2305000
	0x01DF33E8 LDR X9, [X9 + 0xC40]
	0x01DF33EC LDR V11, [X8 + 0x4C]
	0x01DF33F0 MOV V8.16B, V0.16B
	0x01DF33F4 MOV V9.16B, V1.16B
	0x01DF33F8 LDR X0, [X9]
	0x01DF33FC MOV V10.16B, V2.16B
	0x01DF3400 LDR W9, [X0 + 0xE0]
	0x01DF3404 CBNZ W9, 0x1DF340C
	0x01DF3408 BL 0x1C16DFC
	0x01DF340C MOV V0.16B, V8.16B
	0x01DF3410 MOV V1.16B, V9.16B
	0x01DF3414 MOV V2.16B, V10.16B
	0x01DF3418 MOV V3.16B, V11.16B
	0x01DF341C BL 0x1DEFBA0
	0x01DF3420 CBZ X0, 0x1DF3698
	0x01DF3424 ADRP X8, 0x2305000
	0x01DF3428 LDR X8, [X8 + 0xC38]
	0x01DF342C LDR X1, [X8]
	0x01DF3430 ADD X8, X31, 0x8
	0x01DF3434 BL 0x301CB58
	0x01DF3438 LDUR V0, [X31 + 0x8]
	0x01DF343C LDR X8, [X31 + 0x18]
	0x01DF3440 ADRP X22, 0x2305000
	0x01DF3444 STR V0, [X31 + 0x2]
	0x01DF3448 STR X8, [X31 + 0x30]
	0x01DF344C LDR X22, [X22 + 0xC28]
	0x01DF3450 LDR X1, [X22]
	0x01DF3454 ADD X0, X31, 0x20
	0x01DF3458 BL 0x2BC4350
	0x01DF345C TBZ X0, 0x0, 0x1DF34EC
	0x01DF3460 LDR X0, [X31 + 0x30]
	0x01DF3464 CBZ X0, 0x1DF3688
	0x01DF3468 MOV X1, X31
	0x01DF346C BL 0x1DAEC64
	0x01DF3470 TBNZ X0, 0x0, 0x1DF3450
	0x01DF3474 FMOV S0, W31
	0x01DF3478 MOV X0, X19
	0x01DF347C BL 0x1DE8788
	0x01DF3480 LDR X8, [X19 + 0xC0]
	0x01DF3484 CBZ X8, 0x1DF3690
	0x01DF3488 LDR X20, [X19 + 0x160]
	0x01DF348C LDR W21, [X8 + 0x24]
	0x01DF3490 MOV X0, X19
	0x01DF3494 MOV X1, X31
	0x01DF3498 BL 0x3C32E90
	0x01DF349C LDR X8, [X19 + 0xC0]
	0x01DF34A0 CBZ X8, 0x1DF3694
	0x01DF34A4 LDR X9, [X19 + 0x40]
	0x01DF34A8 MOV X2, X0
	0x01DF34AC CBZ X9, 0x1DF34C0
	0x01DF34B0 LDR X9, [X9 + 0x20]
	0x01DF34B4 CBZ X9, 0x1DF34C0
	0x01DF34B8 LDR W6, [X9]
	0x01DF34BC B 0x1DF34C4
	0x01DF34C0 MOV X6, X31
	0x01DF34C4 CBZ X20, 0x1DF368C
	0x01DF34C8 LDR W9, [X19 + 0x68]
	0x01DF34CC LDP X4, X3, [X8 + 0xB8]
	0x01DF34D0 LDR X5, [X8 + 0x18]
	0x01DF34D4 BFM X6, X9, 0x20, 0x1F
	0x01DF34D8 MOV X0, X20
	0x01DF34DC MOV W1, W21
	0x01DF34E0 MOV X7, X31
	0x01DF34E4 BL 0x1DB7644
	0x01DF34E8 B 0x1DF3450
	0x01DF34EC ADRP X8, 0x2305000
	0x01DF34F0 LDR X8, [X8 + 0xC20]
	0x01DF34F4 ADD X0, X31, 0x20
	0x01DF34F8 LDR X1, [X8]
	0x01DF34FC BL 0x2BC434C
	0x01DF3500 ADRP X8, 0x2300000
	0x01DF3504 LDR X8, [X8 + 0x598]
	0x01DF3508 LDR X20, [X19 + 0x160]
	0x01DF350C LDR X0, [X8]
	0x01DF3510 LDR W8, [X0 + 0xE0]
	0x01DF3514 CBNZ W8, 0x1DF351C
	0x01DF3518 BL 0x1C16DFC
	0x01DF351C MOV X0, X20
	0x01DF3520 MOV X1, X31
	0x01DF3524 MOV X2, X31
	0x01DF3528 BL 0x3C3883C
	0x01DF352C TBZ X0, 0x0, 0x1DF3648
	0x01DF3530 MOV X0, X19
	0x01DF3534 BL 0x1DEA4E0
	0x01DF3538 LDR X0, [X19 + 0x38]
	0x01DF353C CBZ X0, 0x1DF3698
	0x01DF3540 MOV X1, X31
	0x01DF3544 MOV V8.16B, V0.16B
	0x01DF3548 BL 0x1E9E550
	0x01DF354C FADD S0, S8, S0
	0x01DF3550 MOV X0, X19
	0x01DF3554 BL 0x1DEA540
	0x01DF3558 MOV X0, X19
	0x01DF355C BL 0x1DEA4E0
	0x01DF3560 LDR X8, [X19 + 0xC0]
	0x01DF3564 CBZ X8, 0x1DF3698
	0x01DF3568 LDR V1, [X8 + 0x68]
	0x01DF356C FCMP S0, S1
	0x01DF3570 B.GE 0x1DF3660
	0x01DF3574 LDR X0, [X19 + 0xD0]
	0x01DF3578 CBZ X0, 0x1DF3698
	0x01DF357C MOV X1, X31
	0x01DF3580 BL 0x3C3F58C
	0x01DF3584 MOV X0, X19
	0x01DF3588 MOV V8.16B, V0.16B
	0x01DF358C MOV V9.16B, V1.16B
	0x01DF3590 MOV V10.16B, V2.16B
	0x01DF3594 BL 0x1DEA5A0
	0x01DF3598 ADRP X20, 0x25E5000
	0x01DF359C LDRB W8, [X20 + 0x85C]
	0x01DF35A0 MOV V11.16B, V0.16B
	0x01DF35A4 MOV V12.16B, V1.16B
	0x01DF35A8 MOV V13.16B, V2.16B
	0x01DF35AC CBNZ W8, 0x1DF35C4
	0x01DF35B0 ADRP X0, 0x2300000
	0x01DF35B4 LDR X0, [X0 + 0x5A8]
	0x01DF35B8 BL 0x1C16CF4
	0x01DF35BC MOVZ W8, 0x1
	0x01DF35C0 STRB W8, [X20 + 0x85C]
	0x01DF35C4 ADRP X8, 0x2300000
	0x01DF35C8 LDR X8, [X8 + 0x5A8]
	0x01DF35CC LDR X0, [X8]
	0x01DF35D0 LDR W8, [X0 + 0xE0]
	0x01DF35D4 CBNZ W8, 0x1DF35DC
	0x01DF35D8 BL 0x1C16DFC
	0x01DF35DC LDR X8, [X19 + 0xC0]
	0x01DF35E0 CBZ X8, 0x1DF3698
	0x01DF35E4 LDR X8, [X8 + 0x58]
	0x01DF35E8 CBZ X8, 0x1DF3698
	0x01DF35EC LDR W9, [X8 + 0x18]
	0x01DF35F0 CBZ W9, 0x1DF369C
	0x01DF35F4 FSUB S0, S8, S11
	0x01DF35F8 FSUB S1, S9, S12
	0x01DF35FC FSUB S2, S10, S13
	0x01DF3600 LDR V3, [X8 + 0x20]
	0x01DF3604 FMUL S0, S0, S0
	0x01DF3608 FMUL S1, S1, S1
	0x01DF360C FADD S0, S0, S1
	0x01DF3610 FMUL S1, S2, S2
	0x01DF3614 FADD S0, S1, S0
	0x01DF3618 FSQRT S0, S0
	0x01DF361C FCMP S0, S3
	0x01DF3620 B.PL 0x1DF3648
	0x01DF3624 MOV X0, X19
	0x01DF3628 BL 0x1DEA4E0
	0x01DF362C LDR X8, [X19 + 0xC0]
	0x01DF3630 CBZ X8, 0x1DF3698
	0x01DF3634 LDR V1, [X8 + 0x6C]
	0x01DF3638 FCMP S0, S1
	0x01DF363C B.LT 0x1DF3648
	0x01DF3640 MOV X0, X19
	0x01DF3644 BL 0x1DF3734
	0x01DF3648 MOV X0, X19
	0x01DF364C BL 0x1DEA5A0
	0x01DF3650 FMOV S3, 4
	0x01DF3654 MOV X0, X19
	0x01DF3658 BL 0x1DF12D8
	0x01DF365C B 0x1DF3668
	0x01DF3660 MOV X0, X19
	0x01DF3664 BL 0x1DEF22C
	0x01DF3668 LDP X20, X19, [X31 + 0x90]
	0x01DF366C LDP X22, X21, [X31 + 0x80]
	0x01DF3670 LDR X30, [X31 + 0x70]
	0x01DF3674 LDP D9, D8, [X31 + 0x60]
	0x01DF3678 LDP D11, D10, [X31 + 0x50]
	0x01DF367C LDP D13, D12, [X31 + 0x40]
	0x01DF3680 ADD X31, X31, 0xA0
	0x01DF3684 RET
	0x01DF3688 BL 0x1C16F20
	0x01DF368C BL 0x1C16F20
	0x01DF3690 BL 0x1C16F20
	0x01DF3694 BL 0x1C16F20
	0x01DF3698 BL 0x1C16F20
	0x01DF369C BL 0x1C16F28
	0x01DF36A0 B 0x1DF36C0
	0x01DF36A4 B 0x1DF36C0

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X19, X0
	017 Move X0, [X0+496]
	018 Move [X31+4], S4
	019 Move [X31+12], S5
	020 Move [X31], S3
	021 Move [X31+12], S2
	022 Compare X0, 0
	023 JumpIfEqual {206}
	024 Move S12, [X31+132]
	025 Move S11, [X31+136]
	026 Move V13, [X31+128]
	027 Move X1, X31
	028 Move V10, V1
	029 Move V9, V0
	030 Call Transform.get_position, X0
	031 Move X20, 0x25E6000
	032 Move W8, [X20+1925]
	033 Move V14, V0
	034 Move V15, V1
	035 Move V8, V2
	036 Compare W8, 0
	037 JumpIfNotEqual {43}
	038 Move X0, 0x2301000
	039 Move X0, [X0+1448]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X20+1925], W8
	043 Move X20, 0x2301000
	044 Move X20, [X20+1448]
	045 Subtract S14, S13, S14
	046 Subtract S15, S12, S15
	047 Subtract S8, S11, S8
	048 Move X0, [X20]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Multiply S0, S14, S14
	054 Multiply S1, S15, S15
	055 Move X8, -19955712
	056 Add S0, S0, S1
	057 Move V1, [X8+380]
	058 Multiply S2, S8, S8
	059 Add S0, S2, S0
	060 NotImplemented "Instruction FSQRT not yet implemented."
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 NotImplemented "Instruction FDIV not yet implemented."
	063 NotImplemented "Instruction FDIV not yet implemented."
	064 NotImplemented "Instruction FDIV not yet implemented."
	065 Move X21, 0x25E6000
	066 Move W8, [X21+1923]
	067 Compare W8, 0
	068 JumpIfNotEqual {74}
	069 Move X0, 0x2301000
	070 Move X0, [X0+1440]
	071 Call 0x1C17CF4
	072 Move W8, 1
	073 Move [X21+1923], W8
	074 Move X8, 0x2301000
	075 Move X8, [X8+1440]
	076 Move X8, [X8]
	077 Move X8, [X8+184]
	078 Move S14, [X8]
	079 Move S15, [X8+4]
	080 Move V8, [X8+8]
	081 Move X0, [X19+496]
	082 Compare X0, 0
	083 JumpIfEqual {206}
	084 Move X1, X31
	085 Call Transform.get_right, X0
	086 Multiply S0, S14, S0
	087 Multiply S1, S15, S1
	088 Move X8, [X19+528]
	089 Add S0, S0, S1
	090 Multiply S1, S8, S2
	091 Add S0, S1, S0
	092 NotImplemented "Instruction FCMP not yet implemented."
	093 NotImplemented "Instruction CSET not yet implemented."
	094 Compare X8, 0
	095 JumpIfEqual {206}
	096 Move W9, [X8+24]
	097 NotImplemented "Instruction FCMP not yet implemented."
	098 NotImplemented "Instruction CSET not yet implemented."
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Add X8, X8, X21
	101 Move X23, [X8+32]
	102 Compare X23, 0
	103 JumpIfEqual {206}
	104 Move W8, [X23+16]
	105 Compare W8, 0
	106 JumpIfNotEqual {190}
	107 Move W8, 1
	108 Move X0, X31
	109 Move [X23+16], W8
	110 Call Time.get_time
	111 Move [X23+20], S0
	112 Move X8, [X19+528]
	113 Compare X8, 0
	114 JumpIfEqual {206}
	115 Move W9, [X8+24]
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Add X8, X8, X21
	118 Move X8, [X8+32]
	119 Compare X8, 0
	120 JumpIfEqual {206}
	121 Move V0, [X31+12]
	122 Move [X8+28], S9
	123 Move [X8+36], S10
	124 Move [X8+36], S0
	125 Move X8, [X19+528]
	126 Compare X8, 0
	127 JumpIfEqual {206}
	128 Move W9, [X8+24]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Add X8, X8, X21
	131 Move X8, [X8+32]
	132 Compare X8, 0
	133 JumpIfEqual {206}
	134 Move V1, [X31]
	135 Move V0, [X31+4]
	136 Move [X8+40], S1
	137 Move [X8+48], S0
	138 Move V0, [X31+8]
	139 Move [X8+48], S0
	140 Move X8, [X19+512]
	141 Compare X8, 0
	142 JumpIfEqual {206}
	143 Move W9, [X8+24]
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Add X8, X8, X21
	146 Move X0, [X8+32]
	147 Compare X0, 0
	148 JumpIfEqual {206}
	149 Move X1, X31
	150 Call Transform.get_position, X0
	151 Move X23, 0x25E6000
	152 Move W8, [X23+2140]
	153 Move V8, V0
	154 Move V9, V1
	155 Move V10, V2
	156 Compare W8, 0
	157 JumpIfNotEqual {163}
	158 Move X0, 0x2301000
	159 Move X0, [X0+1448]
	160 Call 0x1C17CF4
	161 Move W8, 1
	162 Move [X23+2140], W8
	163 Move X0, [X20]
	164 Move W8, [X0+224]
	165 Compare W8, 0
	166 JumpIfNotEqual {168}
	167 Call 0x1C17DFC
	168 Move X8, [X19+528]
	169 Compare X8, 0
	170 JumpIfEqual {206}
	171 Move W9, [X8+24]
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Add X8, X8, X21
	174 Move X8, [X8+32]
	175 Compare X8, 0
	176 JumpIfEqual {206}
	177 Subtract S0, S8, S13
	178 Subtract S1, S9, S12
	179 Subtract S2, S10, S11
	180 Multiply S0, S0, S0
	181 Multiply S1, S1, S1
	182 Multiply S2, S2, S2
	183 Add S0, S0, S1
	184 Add S0, S2, S0
	185 Move W9, 0x42480000
	186 NotImplemented "Instruction FSQRT not yet implemented."
	187 Move S1, W9
	188 NotImplemented "Instruction FDIV not yet implemented."
	189 Move [X8+24], S0
	190 Move X20, [X31+112]
	191 Move X19, [X31+120]
	192 Move X22, [X31+96]
	193 Move X21, [X31+104]
	194 Move X30, [X31+80]
	195 Move X23, [X31+88]
	196 Move D9, [X31+64]
	197 Move D8, [X31+72]
	198 Move D11, [X31+48]
	199 Move D10, [X31+56]
	200 Move D13, [X31+32]
	201 Move D12, [X31+40]
	202 Move D15, [X31+16]
	203 Move D14, [X31+24]
	204 Add X31, X31, 128
	205 Return 
	206 Call 0x1C17F20
	207 Call 0x1C17F28

Method: System.Void ApplyBounceForce(UnityEngine.Vector3 targetPosition, UnityEngine.Vector3 hitPosition, UnityEngine.Vector3 hitNormal)

Disassembly:
	0x01DF2DC8 CBZ X0, 0x1DF3034
	0x01DF2DCC MOV X1, X31
	0x01DF2DD0 BL 0x3C3F58C
	0x01DF2DD4 MOV X0, X19
	0x01DF2DD8 MOV X1, X31
	0x01DF2DDC MOV V8.16B, V0.16B
	0x01DF2DE0 MOV V9.16B, V1.16B
	0x01DF2DE4 MOV V10.16B, V2.16B
	0x01DF2DE8 BL 0x3C32E90
	0x01DF2DEC CBZ X0, 0x1DF3034
	0x01DF2DF0 MOV X1, X31
	0x01DF2DF4 BL 0x3C3F58C
	0x01DF2DF8 ADRP X20, 0x25E6000
	0x01DF2DFC LDRB W8, [X20 + 0x786]
	0x01DF2E00 MOV V11.16B, V0.16B
	0x01DF2E04 MOV V12.16B, V1.16B
	0x01DF2E08 MOV V13.16B, V2.16B
	0x01DF2E0C CBNZ W8, 0x1DF2E24
	0x01DF2E10 ADRP X0, 0x2301000
	0x01DF2E14 LDR X0, [X0 + 0x5A0]
	0x01DF2E18 BL 0x1C16CF4
	0x01DF2E1C MOVZ W8, 0x1
	0x01DF2E20 STRB W8, [X20 + 0x786]
	0x01DF2E24 ADRP X8, 0x2301000
	0x01DF2E28 LDR X8, [X8 + 0x5A0]
	0x01DF2E2C FMOV S3, 10
	0x01DF2E30 ADD X0, X31, 0x30
	0x01DF2E34 MOVN W1, 0x0
	0x01DF2E38 LDR X8, [X8]
	0x01DF2E3C MOV X2, X31
	0x01DF2E40 LDR X8, [X8 + 0xB8]
	0x01DF2E44 LDP S0, S1, [X8 + 0x18]
	0x01DF2E48 LDR V2, [X8 + 0x20]
	0x01DF2E4C FMUL S0, S0, S3
	0x01DF2E50 FMUL S1, S1, S3
	0x01DF2E54 FMUL S2, S2, S3
	0x01DF2E58 FSUB S3, S11, S0
	0x01DF2E5C FSUB S4, S12, S1
	0x01DF2E60 FSUB S5, S13, S2
	0x01DF2E64 MOV V0.16B, V8.16B
	0x01DF2E68 MOV V1.16B, V9.16B
	0x01DF2E6C MOV V2.16B, V10.16B
	0x01DF2E70 BL 0x3BE219C
	0x01DF2E74 TBZ X0, 0x0, 0x1DF2E98
	0x01DF2E78 LDR X20, [X19 + 0xE8]
	0x01DF2E7C ADD X0, X31, 0x30
	0x01DF2E80 MOV X1, X31
	0x01DF2E84 BL 0x3BE1B44
	0x01DF2E88 CBZ X20, 0x1DF3034
	0x01DF2E8C MOV X0, X20
	0x01DF2E90 MOV X1, X31
	0x01DF2E94 BL 0x3BE1644
	0x01DF2E98 LDR X0, [X19 + 0xE8]
	0x01DF2E9C CBZ X0, 0x1DF3034
	0x01DF2EA0 MOV X1, X31
	0x01DF2EA4 BL 0x3BE1B08
	0x01DF2EA8 TBNZ X0, 0x0, 0x1DF2EDC
	0x01DF2EAC LDR X0, [X19 + 0xE8]
	0x01DF2EB0 CBZ X0, 0x1DF3034
	0x01DF2EB4 MOV X1, X31
	0x01DF2EB8 BL 0x3BE15CC
	0x01DF2EBC TBNZ X0, 0x0, 0x1DF2EDC
	0x01DF2EC0 LDR X20, [X19 + 0xE8]
	0x01DF2EC4 MOV X0, X19
	0x01DF2EC8 BL 0x1DEA5A0
	0x01DF2ECC CBZ X20, 0x1DF3034
	0x01DF2ED0 MOV X0, X20
	0x01DF2ED4 MOV X1, X31
	0x01DF2ED8 BL 0x3BE1644
	0x01DF2EDC LDR X0, [X19 + 0xE8]
	0x01DF2EE0 CBZ X0, 0x1DF3034
	0x01DF2EE4 MOV X1, X31
	0x01DF2EE8 BL 0x3BE1B08
	0x01DF2EEC TBNZ X0, 0x0, 0x1DF2FC0
	0x01DF2EF0 LDR X0, [X19 + 0xE8]
	0x01DF2EF4 CBZ X0, 0x1DF3034
	0x01DF2EF8 MOV X1, X31
	0x01DF2EFC BL 0x3BE15CC
	0x01DF2F00 TBNZ X0, 0x0, 0x1DF2FC0
	0x01DF2F04 MOV X0, X19
	0x01DF2F08 BL 0x1DEA5A0
	0x01DF2F0C MOV X0, X19
	0x01DF2F10 MOV V8.16B, V0.16B
	0x01DF2F14 MOV V9.16B, V1.16B
	0x01DF2F18 MOV V10.16B, V2.16B
	0x01DF2F1C BL 0x1DEA5A0
	0x01DF2F20 ADRP X20, 0x25E6000
	0x01DF2F24 LDRB W8, [X20 + 0x786]
	0x01DF2F28 MOV V11.16B, V0.16B
	0x01DF2F2C MOV V12.16B, V1.16B
	0x01DF2F30 MOV V13.16B, V2.16B
	0x01DF2F34 CBNZ W8, 0x1DF2F4C
	0x01DF2F38 ADRP X0, 0x2301000
	0x01DF2F3C LDR X0, [X0 + 0x5A0]
	0x01DF2F40 BL 0x1C16CF4
	0x01DF2F44 MOVZ W8, 0x1
	0x01DF2F48 STRB W8, [X20 + 0x786]
	0x01DF2F4C ADRP X8, 0x2301000
	0x01DF2F50 LDR X8, [X8 + 0x5A0]
	0x01DF2F54 FMOV S3, 10
	0x01DF2F58 ADD X0, X31, 0x0
	0x01DF2F5C MOVN W1, 0x0
	0x01DF2F60 LDR X8, [X8]
	0x01DF2F64 MOV X2, X31
	0x01DF2F68 LDR X8, [X8 + 0xB8]
	0x01DF2F6C LDP S0, S1, [X8 + 0x18]
	0x01DF2F70 LDR V2, [X8 + 0x20]
	0x01DF2F74 FMUL S0, S0, S3
	0x01DF2F78 FMUL S1, S1, S3
	0x01DF2F7C FMUL S2, S2, S3
	0x01DF2F80 FSUB S3, S11, S0
	0x01DF2F84 FSUB S4, S12, S1
	0x01DF2F88 FSUB S5, S13, S2
	0x01DF2F8C MOV V0.16B, V8.16B
	0x01DF2F90 MOV V1.16B, V9.16B
	0x01DF2F94 MOV V2.16B, V10.16B
	0x01DF2F98 BL 0x3BE219C
	0x01DF2F9C TBZ X0, 0x0, 0x1DF2FC0
	0x01DF2FA0 LDR X20, [X19 + 0xE8]
	0x01DF2FA4 ADD X0, X31, 0x0
	0x01DF2FA8 MOV X1, X31
	0x01DF2FAC BL 0x3BE1B44
	0x01DF2FB0 CBZ X20, 0x1DF3034
	0x01DF2FB4 MOV X0, X20
	0x01DF2FB8 MOV X1, X31
	0x01DF2FBC BL 0x3BE1644
	0x01DF2FC0 LDR X0, [X19 + 0xE8]
	0x01DF2FC4 CBZ X0, 0x1DF3034
	0x01DF2FC8 MOV X1, X31
	0x01DF2FCC BL 0x3BE1B08
	0x01DF2FD0 TBNZ X0, 0x0, 0x1DF2FE8
	0x01DF2FD4 LDR X0, [X19 + 0xE8]
	0x01DF2FD8 CBZ X0, 0x1DF3034
	0x01DF2FDC MOV X1, X31
	0x01DF2FE0 BL 0x3BE15CC
	0x01DF2FE4 TBZ X0, 0x0, 0x1DF3000
	0x01DF2FE8 LDR X8, [X19]
	0x01DF2FEC MOV X0, X19
	0x01DF2FF0 LDR X9, [X8 + 0x3A8]
	0x01DF2FF4 LDR X1, [X8 + 0x3B0]
	0x01DF2FF8 BLR X9
	0x01DF2FFC B 0x1DF3018
	0x01DF3000 LDR X8, [X19 + 0x150]
	0x01DF3004 CBZ X8, 0x1DF3034
	0x01DF3008 LDP S0, S1, [X8 + 0x28]
	0x01DF300C LDR V2, [X8 + 0x30]
	0x01DF3010 MOV X0, X19
	0x01DF3014 BL 0x1DE9A40
	0x01DF3018 LDP X20, X19, [X31 + 0xA0]
	0x01DF301C LDR X30, [X31 + 0x90]
	0x01DF3020 LDP D9, D8, [X31 + 0x80]
	0x01DF3024 LDP D11, D10, [X31 + 0x70]
	0x01DF3028 LDP D13, D12, [X31 + 0x60]
	0x01DF302C ADD X31, X31, 0xB0
	0x01DF3030 RET
	0x01DF3034 BL 0x1C16F20
	0x01DF3038 STP X30, X21, [X31 - 0x20]!
	0x01DF303C STP X20, X19, [X31 + 0x10]
	0x01DF3040 ADRP X20, 0x25E5000
	0x01DF3044 ADRP X21, 0x2300000
	0x01DF3048 LDRB W8, [X20 + 0xCE1]
	0x01DF304C LDR X21, [X21 + 0x598]
	0x01DF3050 MOV X19, X1
	0x01DF3054 TBNZ X8, 0x0, 0x1DF306C
	0x01DF3058 ADRP X0, 0x2300000
	0x01DF305C LDR X0, [X0 + 0x598]
	0x01DF3060 BL 0x1C16CF4
	0x01DF3064 MOVZ W8, 0x1
	0x01DF3068 STRB W8, [X20 + 0xCE1]
	0x01DF306C LDR X0, [X21]
	0x01DF3070 LDR W8, [X0 + 0xE0]
	0x01DF3074 CBNZ W8, 0x1DF307C
	0x01DF3078 BL 0x1C16DFC
	0x01DF307C MOV X0, X19
	0x01DF3080 MOV X1, X31
	0x01DF3084 MOV X2, X31
	0x01DF3088 BL 0x3C3883C
	0x01DF308C TBNZ X0, 0x0, 0x1DF30BC
	0x01DF3090 CBZ X19, 0x1DF30F0
	0x01DF3094 LDR X8, [X19 + 0xE8]
	0x01DF3098 CBZ X8, 0x1DF30BC
	0x01DF309C LDR W9, [X8 + 0x18]
	0x01DF30A0 CMP W9, 0x2
	0x01DF30A4 B.LT 0x1DF30BC
	0x01DF30A8 LDR X1, [X8 + 0x20]
	0x01DF30AC BL 0x1DF30F8
	0x01DF30B0 TBZ X0, 0x0, 0x1DF30CC
	0x01DF30B4 MOVZ W0, 0x1
	0x01DF30B8 B 0x1DF30C0
	0x01DF30BC MOV W0, W31
	0x01DF30C0 LDP X20, X19, [X31 + 0x10]
	0x01DF30C4 LDP X30, X21, [X31], #0x20
	0x01DF30C8 RET
	0x01DF30CC LDR X8, [X19 + 0xE8]
	0x01DF30D0 CBZ X8, 0x1DF30F0
	0x01DF30D4 LDR W9, [X8 + 0x18]
	0x01DF30D8 CMP W9, 0x1
	0x01DF30DC B.LS 0x1DF30F4
	0x01DF30E0 LDR X1, [X8 + 0x28]
	0x01DF30E4 LDP X20, X19, [X31 + 0x10]
	0x01DF30E8 LDP X30, X21, [X31], #0x20
	0x01DF30EC B 0x1DF30F8
	0x01DF30F0 BL 0x1C16F20
	0x01DF30F4 BL 0x1C16F28
	0x01DF30F8 STP X30, X21, [X31 - 0x20]!
	0x01DF30FC STP X20, X19, [X31 + 0x10]
	0x01DF3100 ADRP X20, 0x25E5000
	0x01DF3104 ADRP X21, 0x2300000
	0x01DF3108 LDRB W8, [X20 + 0xCE2]
	0x01DF310C LDR X21, [X21 + 0x598]
	0x01DF3110 MOV X19, X1
	0x01DF3114 TBNZ X8, 0x0, 0x1DF312C
	0x01DF3118 ADRP X0, 0x2300000
	0x01DF311C LDR X0, [X0 + 0x598]
	0x01DF3120 BL 0x1C16CF4
	0x01DF3124 MOVZ W8, 0x1
	0x01DF3128 STRB W8, [X20 + 0xCE2]
	0x01DF312C LDR X0, [X21]
	0x01DF3130 LDR W8, [X0 + 0xE0]
	0x01DF3134 CBNZ W8, 0x1DF313C
	0x01DF3138 BL 0x1C16DFC
	0x01DF313C MOV X0, X19
	0x01DF3140 MOV X1, X31
	0x01DF3144 MOV X2, X31
	0x01DF3148 BL 0x3C354F8
	0x01DF314C TBZ X0, 0x0, 0x1DF31C8
	0x01DF3150 CBZ X19, 0x1DF31D8
	0x01DF3154 LDR X0, [X21]
	0x01DF3158 LDR X20, [X19 + 0xC0]
	0x01DF315C LDR W8, [X0 + 0xE0]
	0x01DF3160 CBNZ W8, 0x1DF3168
	0x01DF3164 BL 0x1C16DFC
	0x01DF3168 MOV X0, X20
	0x01DF316C MOV X1, X31
	0x01DF3170 MOV X2, X31
	0x01DF3174 BL 0x3C354F8
	0x01DF3178 TBZ X0, 0x0, 0x1DF31C8
	0x01DF317C LDR X8, [X19 + 0xC0]
	0x01DF3180 CBZ X8, 0x1DF31D8
	0x01DF3184 LDR X0, [X21]
	0x01DF3188 LDR X20, [X8 + 0x80]
	0x01DF318C LDR W9, [X0 + 0xE0]
	0x01DF3190 CBNZ W9, 0x1DF3198
	0x01DF3194 BL 0x1C16DFC
	0x01DF3198 MOV X0, X20
	0x01DF319C MOV X1, X31
	0x01DF31A0 MOV X2, X31
	0x01DF31A4 BL 0x3C354F8
	0x01DF31A8 TBZ X0, 0x0, 0x1DF31C8
	0x01DF31AC LDR X8, [X19 + 0xC0]
	0x01DF31B0 CBZ X8, 0x1DF31D8
	0x01DF31B4 LDR X8, [X8 + 0x80]
	0x01DF31B8 CBZ X8, 0x1DF31D8
	0x01DF31BC LDRB W8, [X8 + 0x28]
	0x01DF31C0 UBFM W0, W8, 0x1, 0x1
	0x01DF31C4 B 0x1DF31CC
	0x01DF31C8 MOV W0, W31
	0x01DF31CC LDP X20, X19, [X31 + 0x10]
	0x01DF31D0 LDP X30, X21, [X31], #0x20
	0x01DF31D4 RET
	0x01DF31D8 BL 0x1C16F20
	0x01DF31DC STP X30, X19, [X31 - 0x10]!
	0x01DF31E0 MOV X19, X0
	0x01DF31E4 BL 0x1DF3200
	0x01DF31E8 MOVZ W1, 0x3
	0x01DF31EC MOV X0, X19
	0x01DF31F0 BL 0x1DEEB40
	0x01DF31F4 STRB W31, [X19 + 0xF1]
	0x01DF31F8 LDP X30, X19, [X31], #0x10
	0x01DF31FC RET
	0x01DF3200 STR X30, [X31 - 0x20]!
	0x01DF3204 STP X20, X19, [X31 + 0x10]
	0x01DF3208 LDR X8, [X0]
	0x01DF320C MOV X19, X0
	0x01DF3210 MOV X20, X1
	0x01DF3214 LDR X9, [X8 + 0x3B8]
	0x01DF3218 LDR X2, [X8 + 0x3C0]
	0x01DF321C BLR X9
	0x01DF3220 LDR X9, [X19 + 0xC0]
	0x01DF3224 CBZ X9, 0x1DF32F4
	0x01DF3228 LDR X8, [X9 + 0x38]
	0x01DF322C CBZ X8, 0x1DF32F4
	0x01DF3230 LDR W10, [X8 + 0x18]
	0x01DF3234 CBZ W10, 0x1DF32F8
	0x01DF3238 LDR X10, [X9 + 0x58]
	0x01DF323C CBZ X10, 0x1DF32F4
	0x01DF3240 LDR W11, [X10 + 0x18]
	0x01DF3244 CBZ W11, 0x1DF32F8
	0x01DF3248 LDR X9, [X9 + 0x60]
	0x01DF324C CBZ X9, 0x1DF32F4
	0x01DF3250 LDR W11, [X9 + 0x18]
	0x01DF3254 CBZ W11, 0x1DF32F8
	0x01DF3258 LDR X11, [X19]
	0x01DF325C LDR V0, [X8 + 0x20]
	0x01DF3260 LDR V1, [X10 + 0x20]
	0x01DF3264 LDR V2, [X9 + 0x20]
	0x01DF3268 LDR X8, [X11 + 0x2C8]
	0x01DF326C LDR X2, [X11 + 0x2D0]
	0x01DF3270 MOVZ W1, 0x1
	0x01DF3274 MOV X0, X19
	0x01DF3278 BLR X8
	0x01DF327C CBZ X20, 0x1DF32F4
	0x01DF3280 MOV X0, X20
	0x01DF3284 MOV X1, X31
	0x01DF3288 BL 0x3C32E90
	0x01DF328C CBZ X0, 0x1DF32F4
	0x01DF3290 MOV X1, X31
	0x01DF3294 BL 0x3C3F58C
	0x01DF3298 MOV X0, X19
	0x01DF329C BL 0x1DE9A40
	0x01DF32A0 LDR X8, [X19 + 0xC0]
	0x01DF32A4 CBZ X8, 0x1DF32F4
	0x01DF32A8 LDR V0, [X8 + 0x28]
	0x01DF32AC MOV X0, X19
	0x01DF32B0 BL 0x1DE8788
	0x01DF32B4 FMOV S0, W31
	0x01DF32B8 MOV X0, X19
	0x01DF32BC BL 0x1DEA540
	0x01DF32C0 MOV X0, X20
	0x01DF32C4 MOV X1, X31
	0x01DF32C8 BL 0x3C32E90
	0x01DF32CC CBZ X0, 0x1DF32F4
	0x01DF32D0 MOV X1, X31
	0x01DF32D4 BL 0x3C3F58C
	0x01DF32D8 MOV X0, X19
	0x01DF32DC BL 0x1DEECCC
	0x01DF32E0 MOVZ W8, 0x1
	0x01DF32E4 STR W8, [X19 + 0xE0]
	0x01DF32E8 LDP X20, X19, [X31 + 0x10]
	0x01DF32EC LDR X30, [X31], #0x20
	0x01DF32F0 RET
	0x01DF32F4 BL 0x1C16F20
	0x01DF32F8 BL 0x1C16F28
	0x01DF32FC SUB X31, X31, 0xA0
	0x01DF3300 STP D13, D12, [X31 + 0x40]
	0x01DF3304 STP D11, D10, [X31 + 0x50]
	0x01DF3308 STP D9, D8, [X31 + 0x60]
	0x01DF330C STR X30, [X31 + 0x70]
	0x01DF3310 STP X22, X21, [X31 + 0x80]
	0x01DF3314 STP X20, X19, [X31 + 0x90]
	0x01DF3318 ADRP X20, 0x25E5000
	0x01DF331C LDRB W8, [X20 + 0xCE4]
	0x01DF3320 MOV X19, X0
	0x01DF3324 TBNZ X8, 0x0, 0x1DF3378
	0x01DF3328 ADRP X0, 0x2305000
	0x01DF332C LDR X0, [X0 + 0xC20]
	0x01DF3330 BL 0x1C16CF4
	0x01DF3334 ADRP X0, 0x2305000
	0x01DF3338 LDR X0, [X0 + 0xC28]
	0x01DF333C BL 0x1C16CF4
	0x01DF3340 ADRP X0, 0x2305000
	0x01DF3344 LDR X0, [X0 + 0xC30]
	0x01DF3348 BL 0x1C16CF4
	0x01DF334C ADRP X0, 0x2305000
	0x01DF3350 LDR X0, [X0 + 0xC38]
	0x01DF3354 BL 0x1C16CF4
	0x01DF3358 ADRP X0, 0x2305000
	0x01DF335C LDR X0, [X0 + 0xC40]
	0x01DF3360 BL 0x1C16CF4
	0x01DF3364 ADRP X0, 0x2300000
	0x01DF3368 LDR X0, [X0 + 0x598]
	0x01DF336C BL 0x1C16CF4
	0x01DF3370 MOVZ W8, 0x1
	0x01DF3374 STRB W8, [X20 + 0xCE4]
	0x01DF3378 MOV X0, X19
	0x01DF337C STP X31, X31, [X31 + 0x20]
	0x01DF3380 STR X31, [X31 + 0x30]
	0x01DF3384 BL 0x1DEA1C0
	0x01DF3388 MOV X0, X19
	0x01DF338C BL 0x1DEA458
	0x01DF3390 LDR X0, [X19 + 0x38]
	0x01DF3394 CBZ X0, 0x1DF3698
	0x01DF3398 MOV X1, X31
	0x01DF339C MOV V8.16B, V0.16B
	0x01DF33A0 BL 0x1E9E550
	0x01DF33A4 FADD S0, S8, S0
	0x01DF33A8 MOV X0, X19
	0x01DF33AC BL 0x1DE8788
	0x01DF33B0 MOV X0, X19
	0x01DF33B4 BL 0x1DEA458
	0x01DF33B8 LDR X8, [X19 + 0xC0]
	0x01DF33BC CBZ X8, 0x1DF3698
	0x01DF33C0 LDR V1, [X8 + 0x28]
	0x01DF33C4 FCMP S0, S1
	0x01DF33C8 B.LT 0x1DF3500
	0x01DF33CC LDR X0, [X19 + 0xD0]
	0x01DF33D0 CBZ X0, 0x1DF3698
	0x01DF33D4 MOV X1, X31
	0x01DF33D8 BL 0x3C3F58C
	0x01DF33DC LDR X8, [X19 + 0xC0]
	0x01DF33E0 CBZ X8, 0x1DF3698

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+64], D15
	003 Move [X31+72], D14
	004 Move [X31+80], D13
	005 Move [X31+88], D12
	006 Move [X31+96], D11
	007 Move [X31+104], D10
	008 Move [X31+112], D9
	009 Move [X31+120], D8
	010 Move [X31+128], X30
	011 Move [X31+136], X25
	012 Move [X31+144], X24
	013 Move [X31+152], X23
	014 Move [X31+160], X22
	015 Move [X31+168], X21
	016 Move [X31+176], X20
	017 Move [X31+184], X19
	018 Move X20, 0x25E7000
	019 Move W8, [X20+3294]
	020 Move V8, V2
	021 Move V9, V1
	022 Move V10, V0
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {39}
	028 Move X0, 0x2308000
	029 Move X0, [X0+456]
	030 Call 0x1C17CF4
	031 Move X0, 0x2302000
	032 Move X0, [X0+1496]
	033 Call 0x1C17CF4
	034 Move X0, 0x2302000
	035 Move X0, [X0+1528]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+3294], W8
	039 NotImplemented "Instruction MOVI not yet implemented."
	040 Move [X31+44], V0
	041 Move [X31+16], V0
	042 Move [X31+24], V0
	043 Move X0, [X19+496]
	044 Compare X0, 0
	045 JumpIfEqual {435}
	046 Move X23, 0x2302000
	047 Move X21, 0x2302000
	048 Move X23, [X23+1496]
	049 Move X21, [X21+1528]
	050 Move X1, X31
	051 Call Transform.get_position, X0
	052 Move X0, [X23]
	053 Move V11, V0
	054 Move V12, V1
	055 Move V13, V2
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {61}
	059 Call 0x1C17DFC
	060 Move X0, [X23]
	061 Move X8, [X0+184]
	062 Move X1, X31
	063 Move W0, [X8]
	064 Call LayerMask.op_Implicit, X0
	065 Move X8, [X21]
	066 Move W20, W0
	067 Move W9, [X8+224]
	068 Compare W9, 0
	069 JumpIfNotEqual {72}
	070 Move X0, X8
	071 Call 0x1C17DFC
	072 Add X0, X31, 16
	073 Move V0, V11
	074 Move V1, V12
	075 Move V2, V13
	076 Move V3, V10
	077 Move V4, V9
	078 Move V5, V8
	079 Move W1, W20
	080 Move X2, X31
	081 Call Physics.Linecast, X0, X1, X2, X3
	082 Xor W22, W0, 1
	083 Move TEMP, X22
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfEqual {182}
	087 Move X8, -19951616
	088 Move V14, [X8+1100]
	089 Move X25, -19677184
	090 Move W24, W31
	091 Add X25, X25, 2417
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move V13, V8
	094 Move V12, V9
	095 Move V11, V10
	096 Move W8, W24
	097 NotImplemented "Instruction ADR not yet implemented."
	098 Move W10, [X25]
	099 Add X9, X9, X10
	100 CallNoReturn X9
	101 Move X0, [X19+496]
	102 Compare X0, 0
	103 JumpIfEqual {435}
	104 Move X1, X31
	105 Call Transform.get_up, X0
	106 Add S11, S10, S0
	107 Add S12, S9, S1
	108 Add S13, S8, S2
	109 Move X0, [X19+496]
	110 Compare X0, 0
	111 JumpIfEqual {435}
	112 Move X1, X31
	113 Call Transform.get_right, X0
	114 Move X0, [X19+496]
	115 Compare X0, 0
	116 JumpIfEqual {435}
	117 Move X1, X31
	118 Call Transform.get_right, X0
	119 Move X0, [X19+496]
	120 Compare X0, 0
	121 JumpIfEqual {435}
	122 Move X1, X31
	123 Call Transform.get_forward, X0
	124 Move X0, [X19+496]
	125 Compare X0, 0
	126 JumpIfEqual {435}
	127 Add S13, S8, S2
	128 Add S12, S9, S1
	129 Add S11, S10, S0
	130 Move X0, [X19+496]
	131 Compare X0, 0
	132 JumpIfEqual {435}
	133 Move X1, X31
	134 Call Transform.get_forward, X0
	135 Move X0, [X19+496]
	136 Compare X0, 0
	137 JumpIfEqual {435}
	138 Subtract S13, S8, S2
	139 Subtract S12, S9, S1
	140 Subtract S11, S10, S0
	141 Move X1, X31
	142 Call Transform.get_up, X0
	143 Multiply S0, S0, S14
	144 Multiply S1, S1, S14
	145 Multiply S2, S2, S14
	146 Add S11, S11, S0
	147 Add S12, S12, S1
	148 Add S13, S13, S2
	149 Move X0, [X23]
	150 Move W8, [X0+224]
	151 Compare W8, 0
	152 JumpIfNotEqual {155}
	153 Call 0x1C17DFC
	154 Move X0, [X23]
	155 Move X8, [X0+184]
	156 Move X1, X31
	157 Move W0, [X8]
	158 Call LayerMask.op_Implicit, X0
	159 Move X8, [X21]
	160 Move W20, W0
	161 Move W9, [X8+224]
	162 Compare W9, 0
	163 JumpIfNotEqual {166}
	164 Move X0, X8
	165 Call 0x1C17DFC
	166 Add X0, X31, 16
	167 Move V0, V11
	168 Move V1, V12
	169 Move V2, V13
	170 Move V3, V10
	171 Move V4, V9
	172 Move V5, V8
	173 Move W1, W20
	174 Move X2, X31
	175 Call Physics.Linecast, X0, X1, X2, X3
	176 Move TEMP, X0
	177 And TEMP, TEMP, 1
	178 Compare TEMP, 1
	179 JumpIfEqual {183}
	180 Add W24, W24, 1
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move W22, 1
	183 Move W22, 1
	184 Move V10, V11
	185 Move V9, V12
	186 Move V8, V13
	187 Move X20, 0x25E6000
	188 Move W8, [X20+1923]
	189 Compare W8, 0
	190 JumpIfNotEqual {196}
	191 Move X0, 0x2301000
	192 Move X0, [X0+1440]
	193 Call 0x1C17CF4
	194 Move W8, 1
	195 Move [X20+1923], W8
	196 Move X0, [X19+496]
	197 Compare X0, 0
	198 JumpIfEqual {435}
	199 Move X1, X31
	200 Call Transform.get_position, X0
	201 Move X24, 0x25E6000
	202 Move W8, [X24+1925]
	203 Move V11, V0
	204 Move V12, V1
	205 Move V13, V2
	206 Compare W8, 0
	207 JumpIfNotEqual {213}
	208 Move X0, 0x2301000
	209 Move X0, [X0+1448]
	210 Call 0x1C17CF4
	211 Move W8, 1
	212 Move [X24+1925], W8
	213 Move X8, 0x2301000
	214 Move X8, [X8+1448]
	215 Subtract S10, S10, S11
	216 Subtract S14, S9, S12
	217 Subtract S8, S8, S13
	218 Move X0, [X8]
	219 Move W8, [X0+224]
	220 Compare W8, 0
	221 JumpIfNotEqual {223}
	222 Call 0x1C17DFC
	223 Multiply S0, S10, S10
	224 Multiply S1, S14, S14
	225 Move X8, -19955712
	226 Add S0, S0, S1
	227 Move V1, [X8+380]
	228 Move X24, 0x2301000
	229 Multiply S2, S8, S8
	230 Move X24, [X24+1440]
	231 Add S0, S2, S0
	232 NotImplemented "Instruction FSQRT not yet implemented."
	233 NotImplemented "Instruction FCMP not yet implemented."
	234 NotImplemented "Instruction FDIV not yet implemented."
	235 NotImplemented "Instruction FDIV not yet implemented."
	236 Move W8, [X20+1923]
	237 Compare W8, 0
	238 JumpIfNotEqual {244}
	239 Move X0, 0x2301000
	240 Move X0, [X0+1440]
	241 Call 0x1C17CF4
	242 Move W8, 1
	243 Move [X20+1923], W8
	244 Move X8, [X24]
	245 Move X8, [X8+184]
	246 Move V9, [X8]
	247 Move V8, [X8+8]
	248 Move X20, 0x25E6000
	249 Move W8, [X20+1926]
	250 Compare W8, 0
	251 JumpIfNotEqual {257}
	252 Move X0, 0x2301000
	253 Move X0, [X0+1440]
	254 Call 0x1C17CF4
	255 Move W8, 1
	256 Move [X20+1926], W8
	257 Move X0, X19
	258 Move X1, X31
	259 Call Component.get_transform, X0
	260 Compare X0, 0
	261 JumpIfEqual {435}
	262 Move X1, X31
	263 Move [X31+4], S8
	264 Call Transform.get_position, X0
	265 Move X20, 0x25E6000
	266 Move W8, [X20+2749]
	267 Move V15, V1
	268 Move V10, V2
	269 Move [X31+12], S0
	270 Compare W8, 0
	271 JumpIfNotEqual {277}
	272 Move X0, 0x2301000
	273 Move X0, [X0+1440]
	274 Call 0x1C17CF4
	275 Move W8, 1
	276 Move [X20+2749], W8
	277 Move X8, [X24]
	278 Move X0, [X23]
	279 Move S8, 1
	280 Move X8, [X8+184]
	281 Move W9, [X0+224]
	282 Move S13, [X8+36]
	283 Move S11, [X8+40]
	284 Move V12, [X8+44]
	285 Compare W9, 0
	286 JumpIfNotEqual {289}
	287 Call 0x1C17DFC
	288 Move X0, [X23]
	289 Move X8, [X0+184]
	290 Move X1, X31
	291 Move [X31+8], S9
	292 Add S8, S14, S8
	293 Move W0, [X8]
	294 Call LayerMask.op_Implicit, X0
	295 Move X8, [X21]
	296 Move W20, W0
	297 Move W9, [X8+224]
	298 Compare W9, 0
	299 JumpIfNotEqual {302}
	300 Move X0, X8
	301 Call 0x1C17DFC
	302 Move V0, [X31+12]
	303 NotImplemented "Instruction FCMP not yet implemented."
	304 Add X0, X31, 16
	305 Move S6, 6
	306 Move V1, V15
	307 Move V2, V10
	308 Move V3, V13
	309 Move V4, V11
	310 Move V5, V12
	311 Move W1, W20
	312 Move X2, X31
	313 NotImplemented "Instruction FABS not yet implemented."
	314 NotImplemented "Instruction CSET not yet implemented."
	315 Call Physics.Raycast, X0, X1, X2, V0, X3
	316 Xor W8, W0, 1
	317 Move X0, [X21]
	318 Move S11, 3
	319 Add S0, S8, S11
	320 And W31, W23, W8
	321 Move W8, [X0+224]
	322 NotImplemented "Instruction FCSEL not yet implemented."
	323 NotImplemented "Instruction FMIN not yet implemented."
	324 NotImplemented "Instruction FCMP not yet implemented."
	325 Move S12, W31
	326 NotImplemented "Instruction FCSEL not yet implemented."
	327 Move [X31+12], S0
	328 Compare W8, 0
	329 JumpIfNotEqual {331}
	330 Call 0x1C17DFC
	331 Move X0, X31
	332 Call Physics.get_gravity
	333 Move X0, X19
	334 Move V8, V1
	335 Call MobController.get_navAgentSpeed, X0
	336 Move X8, -19955712
	337 Move V10, V0
	338 Move V0, [X8+144]
	339 NotImplemented "Instruction FCMP not yet implemented."
	340 Move S1, 1
	341 NotImplemented "Instruction FCSEL not yet implemented."
	342 And W31, W22, 1
	343 NotImplemented "Instruction FCSEL not yet implemented."
	344 NotImplemented "Instruction FCMP not yet implemented."
	345 NotImplemented "Instruction FCCMP not yet implemented."
	346 NotImplemented "Instruction FCCMP not yet implemented."
	347 NotImplemented "Instruction FCSEL not yet implemented."
	348 Move S0, -1
	349 Move S1, 1
	350 Move X0, X31
	351 Call Random.Range, V0, V1
	352 Move X0, [X19+496]
	353 Compare X0, 0
	354 JumpIfEqual {435}
	355 Move X20, 0x2307000
	356 Move V9, V0
	357 Move X20, [X20+456]
	358 Move V0, [X31+4]
	359 Move S12, [X31+196]
	360 Move S11, [X31+200]
	361 Move V13, [X31+192]
	362 Move X1, X31
	363 Multiply S15, S0, S10
	364 Move V0, [X31+8]
	365 Multiply S10, S0, S10
	366 Move V0, [X31+12]
	367 Multiply S0, S0, S8
	368 NotImplemented "Instruction FABS not yet implemented."
	369 Add S0, S0, S0
	370 NotImplemented "Instruction FSQRT not yet implemented."
	371 Call Transform.get_right, X0
	372 Move X0, [X20]
	373 Multiply S0, S14, S0
	374 Multiply S1, S14, S1
	375 Multiply S2, S14, S2
	376 Move W8, [X0+224]
	377 Multiply S0, S9, S0
	378 Multiply S1, S9, S1
	379 Multiply S2, S9, S2
	380 Add S10, S10, S0
	381 Add S9, S8, S1
	382 Add S8, S15, S2
	383 Compare W8, 0
	384 JumpIfNotEqual {387}
	385 Call 0x1C17DFC
	386 Move X0, [X20]
	387 Move X8, [X0+184]
	388 Move X0, X31
	389 Move S0, [X8]
	390 Move S1, [X8+4]
	391 Call Random.Range, V0, V1
	392 Multiply S1, S13, S0
	393 Multiply S2, S12, S0
	394 Multiply S3, S11, S0
	395 Add S0, S10, S1
	396 Add S1, S9, S2
	397 Add S2, S8, S3
	398 Multiply S3, S13, S0
	399 Multiply S4, S12, S1
	400 Add S3, S3, S4
	401 Multiply S4, S11, S2
	402 Add S3, S4, S3
	403 NotImplemented "Instruction FCMP not yet implemented."
	404 Move S4, -2
	405 Multiply S3, S3, S4
	406 Multiply S4, S13, S3
	407 Multiply S5, S12, S3
	408 Multiply S3, S11, S3
	409 Add S0, S0, S4
	410 Add S1, S1, S5
	411 Add S2, S2, S3
	412 Move X0, [X19+488]
	413 Compare X0, 0
	414 JumpIfEqual {435}
	415 Move X1, X31
	416 Call Rigidbody.set_velocity, X0, X1
	417 Move X20, [X31+176]
	418 Move X19, [X31+184]
	419 Move X22, [X31+160]
	420 Move X21, [X31+168]
	421 Move X24, [X31+144]
	422 Move X23, [X31+152]
	423 Move X30, [X31+128]
	424 Move X25, [X31+136]
	425 Move D9, [X31+112]
	426 Move D8, [X31+120]
	427 Move D11, [X31+96]
	428 Move D10, [X31+104]
	429 Move D13, [X31+80]
	430 Move D12, [X31+88]
	431 Move D15, [X31+64]
	432 Move D14, [X31+72]
	433 Add X31, X31, 192
	434 Return 
	435 Call 0x1C17F20

Method: System.Void SetRoaming()

Disassembly:
	0x01DF022C MOVI V0.2D, 0x0
	0x01DF0230 MOV X0, X31
	0x01DF0234 STR X31, [X31 + 0xD0]
	0x01DF0238 STP V0, V0, [X20 + 0x20]
	0x01DF023C STP V0, V0, [X20]
	0x01DF0240 STP V0, V0, [X31 + 0x70]
	0x01DF0244 STP V0, V0, [X31 + 0x50]
	0x01DF0248 BL 0x1DD6AE8
	0x01DF024C TBZ X0, 0x0, 0x1DF025C
	0x01DF0250 MOV X0, X31
	0x01DF0254 BL 0x3C3A708
	0x01DF0258 STR S0, [X19 + 0x190]
	0x01DF025C ADRP X22, 0x2309000
	0x01DF0260 ADRP X23, 0x2309000
	0x01DF0264 ADRP X24, 0x2309000
	0x01DF0268 ADRP X21, 0x2309000
	0x01DF026C LDR X22, [X22 + 0x178]
	0x01DF0270 LDR X23, [X23 + 0x180]
	0x01DF0274 LDR X24, [X24 + 0x1A0]
	0x01DF0278 LDR X21, [X21 + 0x170]
	0x01DF027C ADD X8, X31, 0x8
	0x01DF0280 MOV X0, X19
	0x01DF0284 BL 0x1DEEE54
	0x01DF0288 LDUR V0, [X31 + 0x8]
	0x01DF028C LDUR V1, [X31 + 0x18]
	0x01DF0290 LDUR V2, [X31 + 0x28]
	0x01DF0294 LDUR V3, [X31 + 0x38]
	0x01DF0298 LDR X1, [X25]
	0x01DF029C ADD X8, X31, 0x8
	0x01DF02A0 ADD X0, X31, 0x50
	0x01DF02A4 STP V0, V1, [X31 + 0x50]
	0x01DF02A8 STP V2, V3, [X31 + 0x70]
	0x01DF02AC BL 0x2416BB8
	0x01DF02B0 ADD X0, X31, 0x90
	0x01DF02B4 ADD X1, X31, 0x8
	0x01DF02B8 MOVZ W2, 0x48
	0x01DF02BC BL 0x3EB1AC0
	0x01DF02C0 LDR X1, [X22]
	0x01DF02C4 ADD X0, X31, 0x90
	0x01DF02C8 BL 0x2C1CA00
	0x01DF02CC TBZ X0, 0x0, 0x1DF032C
	0x01DF02D0 LDR X1, [X23]
	0x01DF02D4 ADD X0, X31, 0x90
	0x01DF02D8 BL 0x2C1CAAC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 1
	004 Move X19, X0
	005 Call FakeGorillaController.set_phase, X0, X1
	006 Move X8, [X19]
	007 Move X0, X19
	008 Move X1, X31
	009 Move X9, [X8+952]
	010 Move X2, [X8+960]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move X9, [X19+192]
	013 Compare X9, 0
	014 JumpIfEqual {52}
	015 Move X8, [X9+48]
	016 Compare X8, 0
	017 JumpIfEqual {52}
	018 Move W10, [X8+24]
	019 Compare W10, 0
	020 JumpIfEqual {53}
	021 Move X10, [X9+88]
	022 Compare X10, 0
	023 JumpIfEqual {52}
	024 Move W11, [X10+24]
	025 Compare W11, 0
	026 JumpIfEqual {53}
	027 Move X9, [X9+96]
	028 Compare X9, 0
	029 JumpIfEqual {52}
	030 Move W11, [X9+24]
	031 Compare W11, 0
	032 JumpIfEqual {53}
	033 Move X11, [X19]
	034 Move V0, [X8+32]
	035 Move V1, [X10+32]
	036 Move V2, [X9+32]
	037 Move X8, [X11+712]
	038 Move X2, [X11+720]
	039 Move W1, 1
	040 Move X0, X19
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move X8, [X19]
	043 Move W1, 1
	044 Move X0, X19
	045 Move X9, [X8+872]
	046 Move X2, [X8+880]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move [X19+224], W31
	049 Move X30, [X31+16]
	050 Move X19, [X31+24]
	051 Return 
	052 Call 0x1C17F20
	053 Call 0x1C17F28

Method: System.Void UpdateRoaming()

Disassembly:
	0x01DF3708 ADRP X8, 0x2305000
	0x01DF370C LDR X8, [X8 + 0xC20]
	0x01DF3710 LDR X1, [X8]
	0x01DF3714 ADD X0, X31, 0x20
	0x01DF3718 BL 0x2BC434C
	0x01DF371C CBNZ X21, 0x1DF3728
	0x01DF3720 MOV X0, X20
	0x01DF3724 BL 0x1D2C690
	0x01DF3728 MOV X0, X21
	0x01DF372C BL 0x1C16F18
	0x01DF3730 BL 0x1990590
	0x01DF3734 STR X30, [X31 - 0x20]!
	0x01DF3738 STP X20, X19, [X31 + 0x10]
	0x01DF373C MOVZ W1, 0x5
	0x01DF3740 MOV X19, X0
	0x01DF3744 BL 0x1DEEB40
	0x01DF3748 FMOV S0, W31
	0x01DF374C MOV X0, X19
	0x01DF3750 BL 0x1DF38DC
	0x01DF3754 LDR X9, [X19 + 0xC0]
	0x01DF3758 CBZ X9, 0x1DF37E0
	0x01DF375C LDR X8, [X9 + 0x38]
	0x01DF3760 CBZ X8, 0x1DF37E0
	0x01DF3764 LDR W10, [X8 + 0x18]
	0x01DF3768 CBZ W10, 0x1DF37E4
	0x01DF376C LDR X10, [X9 + 0x58]
	0x01DF3770 CBZ X10, 0x1DF37E0
	0x01DF3774 LDR W11, [X10 + 0x18]
	0x01DF3778 CBZ W11, 0x1DF37E4
	0x01DF377C LDR X9, [X9 + 0x60]
	0x01DF3780 CBZ X9, 0x1DF37E0
	0x01DF3784 LDR W11, [X9 + 0x18]
	0x01DF3788 CBZ W11, 0x1DF37E4
	0x01DF378C LDR X11, [X19]
	0x01DF3790 LDR V0, [X8 + 0x20]
	0x01DF3794 LDR V1, [X10 + 0x20]
	0x01DF3798 LDR V2, [X9 + 0x20]
	0x01DF379C LDR X8, [X11 + 0x2C8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25E6000
	006 Move X20, 0x2306000
	007 Move W8, [X21+3295]
	008 Move X20, [X20+3136]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2306000
	015 Move X0, [X0+3136]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3295], W8
	019 Move X0, [X20]
	020 Add X20, X19, 376
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X1, X20
	027 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {38}
	032 Move X1, [X19+376]
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Move X0, X19
	039 Call MobController.UpdateRoaming, X0
	040 Move X0, X19
	041 Call MobController.UpdateRoamingPath, X0
	042 Move X0, X19
	043 Call MobController.get__targetPosition, X0
	044 Move X0, X19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move S3, W31
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Call FakeGorillaController.UpdateGorillaMoveToTarget, X0, X1, V0
	051 Return 

Method: System.Void SetAwared(System.Collections.Generic.List`1<AnimalCompany.NetPlayer> players)

Disassembly:
	0x01DF37A0 LDR X2, [X11 + 0x2D0]
	0x01DF37A4 MOVZ W1, 0x1
	0x01DF37A8 MOV X0, X19
	0x01DF37AC MOVZ W20, 0x1
	0x01DF37B0 BLR X8
	0x01DF37B4 MOV X0, X19
	0x01DF37B8 BL 0x1DEA5A0
	0x01DF37BC LDR X8, [X19]
	0x01DF37C0 MOV X0, X19
	0x01DF37C4 LDR X9, [X8 + 0x378]
	0x01DF37C8 LDR X1, [X8 + 0x380]
	0x01DF37CC BLR X9
	0x01DF37D0 STR W20, [X19 + 0xE0]
	0x01DF37D4 LDP X20, X19, [X31 + 0x10]
	0x01DF37D8 LDR X30, [X31], #0x20
	0x01DF37DC RET
	0x01DF37E0 BL 0x1C16F20
	0x01DF37E4 BL 0x1C16F28
	0x01DF37E8 STR D14, [X31 - 0x50]!
	0x01DF37EC STP D13, D12, [X31 + 0x10]
	0x01DF37F0 STP D11, D10, [X31 + 0x20]
	0x01DF37F4 STP D9, D8, [X31 + 0x30]
	0x01DF37F8 STP X30, X19, [X31 + 0x40]
	0x01DF37FC ADRP X19, 0x25E5000
	0x01DF3800 LDRB W8, [X19 + 0xD1A]
	0x01DF3804 MOV V11.16B, V5.16B
	0x01DF3808 MOV V12.16B, V4.16B
	0x01DF380C MOV V13.16B, V3.16B
	0x01DF3810 MOV V8.16B, V2.16B
	0x01DF3814 MOV V9.16B, V1.16B
	0x01DF3818 MOV V10.16B, V0.16B
	0x01DF381C TBNZ X8, 0x0, 0x1DF3834
	0x01DF3820 ADRP X0, 0x2305000
	0x01DF3824 LDR X0, [X0 + 0xC40]
	0x01DF3828 BL 0x1C16CF4
	0x01DF382C MOVZ W8, 0x1
	0x01DF3830 STRB W8, [X19 + 0xD1A]
	0x01DF3834 ADRP X19, 0x25E5000
	0x01DF3838 LDRB W8, [X19 + 0x784]
	0x01DF383C CBNZ W8, 0x1DF3854
	0x01DF3840 ADRP X0, 0x2300000
	0x01DF3844 LDR X0, [X0 + 0x5A8]
	0x01DF3848 BL 0x1C16CF4
	0x01DF384C MOVZ W8, 0x1
	0x01DF3850 STRB W8, [X19 + 0x784]
	0x01DF3854 ADRP X8, 0x2300000
	0x01DF3858 LDR X8, [X8 + 0x5A8]
	0x01DF385C ADRP X19, 0x2305000
	0x01DF3860 FSUB S13, S13, S10
	0x01DF3864 FSUB S12, S12, S9
	0x01DF3868 LDR X0, [X8]
	0x01DF386C FSUB S14, S11, S8
	0x01DF3870 LDR W8, [X0 + 0xE0]
	0x01DF3874 LDR X19, [X19 + 0xC40]
	0x01DF3878 CBNZ W8, 0x1DF3880
	0x01DF387C BL 0x1C16DFC
	0x01DF3880 LDR X0, [X19]
	0x01DF3884 FMUL S0, S13, S13
	0x01DF3888 FMUL S1, S12, S12
	0x01DF388C FADD S0, S0, S1
	0x01DF3890 LDR W8, [X0 + 0xE0]
	0x01DF3894 FMUL S1, S14, S14
	0x01DF3898 FADD S0, S1, S0
	0x01DF389C FSQRT S11, S0
	0x01DF38A0 CBNZ W8, 0x1DF38A8
	0x01DF38A4 BL 0x1C16DFC
	0x01DF38A8 FDIV S5, S14, S11
	0x01DF38AC FDIV S4, S12, S11
	0x01DF38B0 FDIV S3, S13, S11
	0x01DF38B4 MOV V0.16B, V10.16B
	0x01DF38B8 MOV V1.16B, V9.16B
	0x01DF38BC MOV V2.16B, V8.16B
	0x01DF38C0 MOV V6.16B, V11.16B
	0x01DF38C4 LDP X30, X19, [X31 + 0x40]
	0x01DF38C8 LDP D9, D8, [X31 + 0x30]
	0x01DF38CC LDP D11, D10, [X31 + 0x20]
	0x01DF38D0 LDP D13, D12, [X31 + 0x10]
	0x01DF38D4 LDR V14, [X31], #0x50
	0x01DF38D8 B 0x1DF7F84
	0x01DF38DC STP X30, X19, [X31 - 0x10]!
	0x01DF38E0 LDR X8, [X0 + 0x50]
	0x01DF38E4 CBZ X8, 0x1DF38F4
	0x01DF38E8 STR S0, [X8 + 0x28]
	0x01DF38EC LDP X30, X19, [X31], #0x10
	0x01DF38F0 RET
	0x01DF38F4 ADRP X0, 0x2300000
	0x01DF38F8 LDR X0, [X0 + 0x5B0]
	0x01DF38FC BL 0x1C16D08
	0x01DF3900 BL 0x1C16F10
	0x01DF3904 MOV X19, X0
	0x01DF3908 ADRP X0, 0x2306000
	0x01DF390C LDR X0, [X0 + 0x248]
	0x01DF3910 BL 0x1C16D08
	0x01DF3914 MOV X1, X0
	0x01DF3918 MOV X0, X19
	0x01DF391C MOV X2, X31
	0x01DF3920 BL 0x337DF1C
	0x01DF3924 ADRP X0, 0x2306000
	0x01DF3928 LDR X0, [X0 + 0x250]
	0x01DF392C BL 0x1C16D08
	0x01DF3930 MOV X1, X0
	0x01DF3934 MOV X0, X19
	0x01DF3938 BL 0x1C16DEC
	0x01DF393C STP X30, X19, [X31 - 0x10]!
	0x01DF3940 LDR X8, [X0 + 0x50]
	0x01DF3944 CBZ X8, 0x1DF3954
	0x01DF3948 LDR V0, [X8 + 0x28]
	0x01DF394C LDP X30, X19, [X31], #0x10
	0x01DF3950 RET
	0x01DF3954 ADRP X0, 0x2300000
	0x01DF3958 LDR X0, [X0 + 0x5B0]
	0x01DF395C BL 0x1C16D08
	0x01DF3960 BL 0x1C16F10
	0x01DF3964 MOV X19, X0
	0x01DF3968 ADRP X0, 0x2306000
	0x01DF396C LDR X0, [X0 + 0x248]
	0x01DF3970 BL 0x1C16D08
	0x01DF3974 MOV X1, X0
	0x01DF3978 MOV X0, X19
	0x01DF397C MOV X2, X31
	0x01DF3980 BL 0x337DF1C
	0x01DF3984 ADRP X0, 0x2306000
	0x01DF3988 LDR X0, [X0 + 0x258]
	0x01DF398C BL 0x1C16D08
	0x01DF3990 MOV X1, X0
	0x01DF3994 MOV X0, X19
	0x01DF3998 BL 0x1C16DEC
	0x01DF399C SUB X31, X31, 0xF0
	0x01DF39A0 STR D10, [X31 + 0xB0]
	0x01DF39A4 STP D9, D8, [X31 + 0xC0]
	0x01DF39A8 STP X30, X21, [X31 + 0xD0]
	0x01DF39AC STP X20, X19, [X31 + 0xE0]
	0x01DF39B0 ADRP X21, 0x25E5000
	0x01DF39B4 ADRP X20, 0x2305000
	0x01DF39B8 LDRB W8, [X21 + 0xCE8]
	0x01DF39BC LDR X20, [X20 + 0xBC0]
	0x01DF39C0 MOV X19, X0
	0x01DF39C4 TBNZ X8, 0x0, 0x1DF3A24
	0x01DF39C8 ADRP X0, 0x2300000
	0x01DF39CC LDR X0, [X0 + 0x970]
	0x01DF39D0 BL 0x1C16CF4
	0x01DF39D4 ADRP X0, 0x2305000
	0x01DF39D8 LDR X0, [X0 + 0xBC0]
	0x01DF39DC BL 0x1C16CF4
	0x01DF39E0 ADRP X0, 0x2306000
	0x01DF39E4 LDR X0, [X0 + 0x210]
	0x01DF39E8 BL 0x1C16CF4
	0x01DF39EC ADRP X0, 0x2306000
	0x01DF39F0 LDR X0, [X0 + 0x218]
	0x01DF39F4 BL 0x1C16CF4
	0x01DF39F8 ADRP X0, 0x2306000
	0x01DF39FC LDR X0, [X0 + 0x220]
	0x01DF3A00 BL 0x1C16CF4
	0x01DF3A04 ADRP X0, 0x2306000
	0x01DF3A08 LDR X0, [X0 + 0x228]
	0x01DF3A0C BL 0x1C16CF4
	0x01DF3A10 ADRP X0, 0x2306000
	0x01DF3A14 LDR X0, [X0 + 0x40]
	0x01DF3A18 BL 0x1C16CF4
	0x01DF3A1C MOVZ W8, 0x1
	0x01DF3A20 STRB W8, [X21 + 0xCE8]
	0x01DF3A24 MOVI V0.2D, 0x0
	0x01DF3A28 MOV X0, X19
	0x01DF3A2C STP V0, V0, [X31 + 0x90]
	0x01DF3A30 STP V0, V0, [X31 + 0x70]
	0x01DF3A34 STUR V0, [X31 + 0x5C]
	0x01DF3A38 STP V0, V0, [X31 + 0x40]
	0x01DF3A3C BL 0x1DEA894
	0x01DF3A40 LDR X0, [X20]
	0x01DF3A44 LDR W8, [X0 + 0xE0]
	0x01DF3A48 CBNZ W8, 0x1DF3A54
	0x01DF3A4C BL 0x1C16DFC
	0x01DF3A50 LDR X0, [X20]
	0x01DF3A54 LDR X8, [X0 + 0xB8]
	0x01DF3A58 MOV X0, X31
	0x01DF3A5C LDP S0, S1, [X8 + 0xB0]
	0x01DF3A60 LDP S2, S3, [X8 + 0xB8]
	0x01DF3A64 BL 0x3C0D030
	0x01DF3A68 LDR X0, [X19 + 0xD0]
	0x01DF3A6C CBZ X0, 0x1DF3D54
	0x01DF3A70 MOV X1, X31
	0x01DF3A74 BL 0x3C3F58C
	0x01DF3A78 LDR X8, [X19 + 0xC0]
	0x01DF3A7C CBZ X8, 0x1DF3D54
	0x01DF3A80 LDR V3, [X8 + 0x4C]
	0x01DF3A84 MOV X0, X31
	0x01DF3A88 BL 0x3C0CB98
	0x01DF3A8C FMOV S0, 1
	0x01DF3A90 FMOV S1, 0.5
	0x01DF3A94 FMOV S2, W31
	0x01DF3A98 FMOV S3, 1
	0x01DF3A9C MOV X0, X31
	0x01DF3AA0 BL 0x3C0D030
	0x01DF3AA4 LDR X0, [X19 + 0x1F0]

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+160], X30
	003 Move [X31+168], X25
	004 Move [X31+176], X24
	005 Move [X31+184], X23
	006 Move [X31+192], X22
	007 Move [X31+200], X21
	008 Move [X31+208], X20
	009 Move [X31+216], X19
	010 Move X21, 0x25E6000
	011 Move W8, [X21+3296]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {41}
	018 Move X0, 0x2306000
	019 Move X0, [X0+3104]
	020 Call 0x1C17CF4
	021 Move X0, 0x2306000
	022 Move X0, [X0+3112]
	023 Call 0x1C17CF4
	024 Move X0, 0x2306000
	025 Move X0, [X0+3120]
	026 Call 0x1C17CF4
	027 Move X0, 0x2306000
	028 Move X0, [X0+3128]
	029 Call 0x1C17CF4
	030 Move X0, 0x2307000
	031 Move X0, [X0+496]
	032 Call 0x1C17CF4
	033 Move X0, 0x2307000
	034 Move X0, [X0+504]
	035 Call 0x1C17CF4
	036 Move X0, 0x2307000
	037 Move X0, [X0+576]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X21+3296], W8
	041 NotImplemented "Instruction MOVI not yet implemented."
	042 Move W1, 2
	043 Move X0, X19
	044 Move [X31+128], X31
	045 Move [X31+136], X31
	046 Move [X31+144], X31
	047 Move [X31+96], V0
	048 Move [X31+104], V0
	049 Move [X31+64], V0
	050 Move [X31+72], V0
	051 Call FakeGorillaController.set_phase, X0, X1
	052 Move X8, [X19]
	053 Move X0, X19
	054 Move X1, X31
	055 Move X9, [X8+952]
	056 Move X2, [X8+960]
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move X9, [X19+192]
	059 Compare X9, 0
	060 JumpIfEqual {202}
	061 Move X8, [X9+48]
	062 Compare X8, 0
	063 JumpIfEqual {202}
	064 Move W10, [X8+24]
	065 Compare W10, 0
	066 JumpIfEqual {203}
	067 Move X10, [X9+88]
	068 Compare X10, 0
	069 JumpIfEqual {202}
	070 Move W11, [X10+24]
	071 Compare W11, 0
	072 JumpIfEqual {203}
	073 Move X9, [X9+96]
	074 Compare X9, 0
	075 JumpIfEqual {202}
	076 Move W11, [X9+24]
	077 Compare W11, 0
	078 JumpIfEqual {203}
	079 Move X11, [X19]
	080 Move V0, [X8+32]
	081 Move V1, [X10+32]
	082 Move V2, [X9+32]
	083 Move X8, [X11+712]
	084 Move X2, [X11+720]
	085 Move W1, 1
	086 Move X0, X19
	087 NotImplemented "Instruction BLR not yet implemented."
	088 Compare X20, 0
	089 JumpIfEqual {202}
	090 Move X8, 0x2306000
	091 Move X8, [X8+3128]
	092 Move X21, 0x2306000
	093 Move X23, 0x2307000
	094 Move X21, [X21+3112]
	095 Move X23, [X23+576]
	096 Move X1, [X8]
	097 Move X24, 0x2307000
	098 Move X25, 0x2307000
	099 Move X22, 0x2306000
	100 Move X24, [X24+504]
	101 Move X25, [X25+496]
	102 Move X22, [X22+3104]
	103 Add X8, X31, 0
	104 Move X0, X20
	105 Call List`1<Object>.GetEnumerator, X0
	106 Move V0, [X31]
	107 Move X8, [X31+16]
	108 Move [X31+8], V0
	109 Move [X31+144], X8
	110 Move X1, [X21]
	111 Add X0, X31, 128
	112 Call Enumerator<Object>.MoveNext, X0
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfNotEqual {185}
	117 Move X20, [X31+144]
	118 Compare X20, 0
	119 JumpIfEqual {200}
	120 Move X0, X20
	121 Move X1, X31
	122 Call NetPlayer.get_isDie, X0
	123 Move TEMP, X0
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfEqual {110}
	127 Move X8, [X20+64]
	128 Compare X8, 0
	129 JumpIfEqual {201}
	130 Move X8, [X8+32]
	131 Compare X8, 0
	132 JumpIfEqual {134}
	133 Move W20, [X8]
	134 Move W20, W31
	135 Add X8, X31, 0
	136 Move X0, X19
	137 Call FakeGorillaController.get__angerMetersByPlayerId, X0
	138 Move V0, [X31]
	139 Move V1, [X31+16]
	140 Move V2, [X31+32]
	141 Move V3, [X31+48]
	142 Move X1, [X23]
	143 Move [X31+64], V0
	144 Move [X31+72], V1
	145 Move [X31+96], V2
	146 Move [X31+104], V3
	147 Add X0, X31, 64
	148 Call 0x2416724, X0
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Add X8, X31, 0
	151 Move X0, X19
	152 Call FakeGorillaController.get__angerMetersByPlayerId, X0
	153 Move V0, [X31]
	154 Move V1, [X31+16]
	155 Move V2, [X31+32]
	156 Move V3, [X31+48]
	157 Move X2, [X24]
	158 Move [X31+64], V0
	159 Move [X31+72], V1
	160 Move [X31+96], V2
	161 Move [X31+104], V3
	162 Add X0, X31, 64
	163 Move W1, W20
	164 Call 0x2416AF8, X0, X1
	165 Move TEMP, X0
	166 And TEMP, TEMP, 1
	167 Compare TEMP, 1
	168 JumpIfEqual {110}
	169 Add X8, X31, 0
	170 Move X0, X19
	171 Call FakeGorillaController.get__angerMetersByPlayerId, X0
	172 Move V0, [X31]
	173 Move V1, [X31+16]
	174 Move V2, [X31+32]
	175 Move V3, [X31+48]
	176 Move X2, [X25]
	177 Move [X31+64], V0
	178 Move [X31+72], V1
	179 Move [X31+96], V2
	180 Move [X31+104], V3
	181 Add X0, X31, 64
	182 Move S0, W31
	183 Move W1, W20
	184 Call 0x2416E40, X0, X1, X2
	185 Move X1, [X22]
	186 Add X0, X31, 128
	187 Call Enumerator<Object>.Dispose, X0
	188 Move W8, 1
	189 Move [X19+224], W8
	190 Move X20, [X31+208]
	191 Move X19, [X31+216]
	192 Move X22, [X31+192]
	193 Move X21, [X31+200]
	194 Move X24, [X31+176]
	195 Move X23, [X31+184]
	196 Move X30, [X31+160]
	197 Move X25, [X31+168]
	198 Add X31, X31, 224
	199 Return 
	200 Call 0x1C17F20
	201 Call 0x1C17F20
	202 Call 0x1C17F20
	203 Call 0x1C17F28
	204 Move X20, X0
	205 NotImplemented "Instruction CMP not yet implemented."
	206 Move X0, X20
	207 Call 0x3EB2AD0
	208 Move X21, [X0]
	209 Call 0x3EB2AE0
	210 Move X1, [X22]
	211 Add X0, X31, 128
	212 Call Enumerator<Object>.Dispose, X0
	213 Compare X21, 0
	214 JumpIfEqual {188}
	215 Move X0, X21
	216 Call 0x1C17F18
	217 Move X21, X31
	218 Move X20, X0
	219 Move X1, [X22]
	220 Add X0, X31, 128
	221 Call Enumerator<Object>.Dispose, X0
	222 Compare X21, 0
	223 JumpIfNotEqual {226}
	224 Move X0, X20
	225 Call 0x1D2D690
	226 Move X0, X21
	227 Call 0x1C17F18
	228 Call 0x1991590

Method: System.Boolean IsPlayerHoldingLoot(AnimalCompany.NetPlayer player)

Disassembly:
	0x01DF4038 LDR X0, [X22]
	0x01DF403C FSUB S11, S8, S11
	0x01DF4040 FSUB S9, S9, S12
	0x01DF4044 FSUB S8, S10, S13
	0x01DF4048 LDR W8, [X0 + 0xE0]
	0x01DF404C CBNZ W8, 0x1DF4054
	0x01DF4050 BL 0x1C16DFC
	0x01DF4054 FMUL S0, S11, S11
	0x01DF4058 FMUL S1, S9, S9
	0x01DF405C FADD S0, S0, S1
	0x01DF4060 FMUL S1, S8, S8
	0x01DF4064 FADD S0, S1, S0
	0x01DF4068 FSQRT S0, S0
	0x01DF406C ADD X0, X31, 0x3C
	0x01DF4070 MOV X1, X31
	0x01DF4074 BL 0x338FCB8
	0x01DF4078 LDP X20, X19, [X31 + 0x50]
	0x01DF407C LDP X22, X21, [X31 + 0x40]
	0x01DF4080 LDR X30, [X31 + 0x30]
	0x01DF4084 LDP D9, D8, [X31 + 0x20]
	0x01DF4088 LDP D11, D10, [X31 + 0x10]
	0x01DF408C LDP D13, D12, [X31], #0x60
	0x01DF4090 RET
	0x01DF4094 BL 0x1C16F20
	0x01DF4098 SUB X31, X31, 0xB0
	0x01DF409C STR X30, [X31 + 0x80]
	0x01DF40A0 STP X22, X21, [X31 + 0x90]
	0x01DF40A4 STP X20, X19, [X31 + 0xA0]
	0x01DF40A8 ADRP X21, 0x25E4000
	0x01DF40AC ADRP X20, 0x2302000
	0x01DF40B0 LDRB W8, [X21 + 0xCEB]
	0x01DF40B4 LDR X20, [X20 + 0xA78]
	0x01DF40B8 MOV X19, X0
	0x01DF40BC TBNZ X8, 0x0, 0x1DF40EC
	0x01DF40C0 ADRP X0, 0x2305000
	0x01DF40C4 LDR X0, [X0 + 0x260]
	0x01DF40C8 BL 0x1C16CF4
	0x01DF40CC ADRP X0, 0x2302000
	0x01DF40D0 LDR X0, [X0 + 0xA78]
	0x01DF40D4 BL 0x1C16CF4
	0x01DF40D8 ADRP X0, 0x2305000
	0x01DF40DC LDR X0, [X0 + 0x268]
	0x01DF40E0 BL 0x1C16CF4
	0x01DF40E4 MOVZ W8, 0x1
	0x01DF40E8 STRB W8, [X21 + 0xCEB]
	0x01DF40EC ADRP X21, 0x2305000
	0x01DF40F0 ADRP X22, 0x2305000
	0x01DF40F4 LDR X21, [X21 + 0x268]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25E5000
	006 Move X21, 0x2300000
	007 Move W8, [X20+3297]
	008 Move X21, [X21+1432]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2300000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3297], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Move X2, X31
	027 Call Object.op_Equality, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {46}
	032 Compare X19, 0
	033 JumpIfEqual {62}
	034 Move X8, [X19+232]
	035 Compare X8, 0
	036 JumpIfEqual {46}
	037 Move W9, [X8+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X1, [X8+32]
	040 Call FakeGorillaController.IsAnchorHoldingLoot, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {52}
	045 Move W0, 1
	046 Move W0, W31
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0
	052 Move X8, [X19+232]
	053 Compare X8, 0
	054 JumpIfEqual {62}
	055 Move W9, [X8+24]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X1, [X8+40]
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Call 0x1C17F20
	063 Call 0x1C17F28

Method: System.Boolean IsAnchorHoldingLoot(AnimalCompany.AttachedItemAnchor anchor)

Disassembly:
	0x01DF40F8 LDR X22, [X22 + 0x260]
	0x01DF40FC MOV X0, X19
	0x01DF4100 MOV W1, W31
	0x01DF4104 BL 0x1DEB2A4
	0x01DF4108 LDR W1, [X19 + 0x1A4]
	0x01DF410C MOV X0, X19
	0x01DF4110 BL 0x1DEEB40
	0x01DF4114 LDR V0, [X19 + 0x1A8]
	0x01DF4118 LDR V1, [X19 + 0x1AC]
	0x01DF411C LDR V2, [X19 + 0x1B0]
	0x01DF4120 LDR V3, [X19 + 0x1B4]
	0x01DF4124 MOV X0, X19
	0x01DF4128 BL 0x1DEEC04
	0x01DF412C LDR V0, [X19 + 0x1B8]
	0x01DF4130 LDR V1, [X19 + 0x1BC]
	0x01DF4134 LDR V2, [X19 + 0x1C0]
	0x01DF4138 MOV X0, X19
	0x01DF413C BL 0x1DEECCC
	0x01DF4140 ADD X8, X31, 0x40
	0x01DF4144 MOV X0, X19
	0x01DF4148 BL 0x1DEEE54
	0x01DF414C LDP V0, V1, [X31 + 0x40]
	0x01DF4150 LDP V2, V3, [X31 + 0x60]
	0x01DF4154 LDR X0, [X20]
	0x01DF4158 STP V0, V1, [X31]
	0x01DF415C STP V2, V3, [X31 + 0x20]
	0x01DF4160 LDR W8, [X0 + 0xE0]
	0x01DF4164 LDR X19, [X19 + 0x1C8]
	0x01DF4168 CBNZ W8, 0x1DF4170
	0x01DF416C BL 0x1C16DFC
	0x01DF4170 LDR X2, [X21]
	0x01DF4174 LDR X3, [X22]
	0x01DF4178 LDP V0, V1, [X31]
	0x01DF417C LDP V2, V3, [X31 + 0x20]
	0x01DF4180 ADD X0, X31, 0x40
	0x01DF4184 MOV X1, X19
	0x01DF4188 STP V0, V1, [X31 + 0x40]
	0x01DF418C STP V2, V3, [X31 + 0x60]
	0x01DF4190 BL 0x2229220
	0x01DF4194 LDP X20, X19, [X31 + 0xA0]
	0x01DF4198 LDP X22, X21, [X31 + 0x90]
	0x01DF419C LDR X30, [X31 + 0x80]
	0x01DF41A0 ADD X31, X31, 0xB0
	0x01DF41A4 RET
	0x01DF41A8 SUB X31, X31, 0xA0
	0x01DF41AC STP X30, X21, [X31 + 0x80]
	0x01DF41B0 STP X20, X19, [X31 + 0x90]
	0x01DF41B4 ADRP X21, 0x25E4000
	0x01DF41B8 ADRP X20, 0x2302000
	0x01DF41BC LDRB W8, [X21 + 0xCEC]
	0x01DF41C0 LDR X20, [X20 + 0xA78]
	0x01DF41C4 MOV X19, X0
	0x01DF41C8 TBNZ X8, 0x0, 0x1DF41EC
	0x01DF41CC ADRP X0, 0x2305000
	0x01DF41D0 LDR X0, [X0 + 0x270]
	0x01DF41D4 BL 0x1C16CF4
	0x01DF41D8 ADRP X0, 0x2302000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25E5000
	006 Move X21, 0x2300000
	007 Move W8, [X20+3298]
	008 Move X21, [X21+1432]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2300000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3298], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Move X2, X31
	027 Call Object.op_Inequality, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {75}
	032 Compare X19, 0
	033 JumpIfEqual {81}
	034 Move X0, [X21]
	035 Move X20, [X19+192]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Inequality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {75}
	048 Move X8, [X19+192]
	049 Compare X8, 0
	050 JumpIfEqual {81}
	051 Move X0, [X21]
	052 Move X20, [X8+128]
	053 Move W9, [X0+224]
	054 Compare W9, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X31
	059 Move X2, X31
	060 Call Object.op_Inequality, X0, X1
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {75}
	065 Move X8, [X19+192]
	066 Compare X8, 0
	067 JumpIfEqual {81}
	068 Move X8, [X8+128]
	069 Compare X8, 0
	070 JumpIfEqual {81}
	071 Move W8, [X8+40]
	072 Move W0, W8
	073 ShiftRight W0, 1
	074 And W0, W0, 1
	075 Move W0, W31
	076 Move X20, [X31+16]
	077 Move X19, [X31+24]
	078 Move X30, [X31+32]
	079 Move X21, [X31+40]
	080 Return X0
	081 Call 0x1C17F20

Method: System.Void UpdateAwared()

Disassembly:
	0x01DF1494 STR S10, [X31 + 0x34]
	0x01DF1498 STR S8, [X31 + 0x2C]
	0x01DF149C BL 0x3C3F58C
	0x01DF14A0 LDR X0, [X19 + 0x1F0]
	0x01DF14A4 CBZ X0, 0x1DF1D04
	0x01DF14A8 MOV X1, X31
	0x01DF14AC MOV V8.16B, V0.16B
	0x01DF14B0 MOV V11.16B, V1.16B
	0x01DF14B4 MOV V12.16B, V2.16B
	0x01DF14B8 BL 0x3C3DEB4
	0x01DF14BC MOV X0, X19
	0x01DF14C0 MOV V13.16B, V0.16B
	0x01DF14C4 MOV V15.16B, V1.16B
	0x01DF14C8 MOV V9.16B, V2.16B
	0x01DF14CC MOV V10.16B, V3.16B
	0x01DF14D0 BL 0x1DEED30
	0x01DF14D4 LDR X0, [X24]
	0x01DF14D8 MOV V14.16B, V0.16B
	0x01DF14DC LDR W8, [X0 + 0xE0]
	0x01DF14E0 CBNZ W8, 0x1DF14EC
	0x01DF14E4 BL 0x1C16DFC
	0x01DF14E8 LDR X0, [X24]
	0x01DF14EC LDR X8, [X20]
	0x01DF14F0 LDR X9, [X0 + 0xB8]
	0x01DF14F4 ADD X20, X19, 0x208
	0x01DF14F8 LDR W10, [X8 + 0xE0]
	0x01DF14FC LDR W22, [X9]
	0x01DF1500 CBNZ W10, 0x1DF150C
	0x01DF1504 MOV X0, X8
	0x01DF1508 BL 0x1C16DFC
	0x01DF150C MOV X0, X20
	0x01DF1510 MOV X1, X21
	0x01DF1514 MOV V0.16B, V8.16B
	0x01DF1518 MOV V1.16B, V11.16B
	0x01DF151C MOV V2.16B, V12.16B
	0x01DF1520 MOV V3.16B, V13.16B
	0x01DF1524 MOV V4.16B, V15.16B
	0x01DF1528 MOV V5.16B, V9.16B
	0x01DF152C MOV V6.16B, V10.16B
	0x01DF1530 MOV V7.16B, V14.16B
	0x01DF1534 MOV X2, X22
	0x01DF1538 BL 0x1DEE6B8
	0x01DF153C LDR X0, [X19 + 0x1F0]
	0x01DF1540 CBZ X0, 0x1DF1D04
	0x01DF1544 MOV X1, X31
	0x01DF1548 BL 0x3C3F58C
	0x01DF154C LDR X8, [X20]
	0x01DF1550 LDP S12, S10, [X31 + 0x34]
	0x01DF1554 LDR V3, [X31 + 0x3C]
	0x01DF1558 CBZ X8, 0x1DF1D04
	0x01DF155C FSUB S0, S12, S0
	0x01DF1560 STR S0, [X31 + 0x30]
	0x01DF1564 LDR W8, [X8 + 0x18]
	0x01DF1568 ADRP X22, 0x2302000
	0x01DF156C ADRP X23, 0x2302000
	0x01DF1570 LDR X22, [X22 + 0x5A0]
	0x01DF1574 LDR X23, [X23 + 0x5A8]
	0x01DF1578 FSUB S13, S3, S1
	0x01DF157C FSUB S14, S10, S2
	0x01DF1580 ADRP X25, 0x25E7000
	0x01DF1584 CMP W8, 0x1
	0x01DF1588 ADRP X21, 0xFFFFFFFFFECF9000
	0x01DF158C ADRP X29, 0x25E7000
	0x01DF1590 STP S14, S13, [X31 + 0x24]
	0x01DF1594 B.LT 0x1DF16EC
	0x01DF1598 LDRB W8, [X29 + 0x783]
	0x01DF159C CBNZ W8, 0x1DF15B4
	0x01DF15A0 ADRP X0, 0x2302000
	0x01DF15A4 LDR X0, [X0 + 0x5A0]
	0x01DF15A8 BL 0x1C16CF4
	0x01DF15AC MOVZ W8, 0x1
	0x01DF15B0 STRB W8, [X29 + 0x783]
	0x01DF15B4 LDR X0, [X20]
	0x01DF15B8 CBZ X0, 0x1DF1D04
	0x01DF15BC LDR X8, [X22]
	0x01DF15C0 LDR X1, [X26]
	0x01DF15C4 LDR X8, [X8 + 0xB8]
	0x01DF15C8 LDP S10, S9, [X8 + 0x4]
	0x01DF15CC LDR V12, [X8]
	0x01DF15D0 ADD X8, X31, 0x40
	0x01DF15D4 BL 0x3030AB8
	0x01DF15D8 LDP V0, V1, [X31 + 0x40]
	0x01DF15DC LDP V2, V3, [X31 + 0x60]
	0x01DF15E0 ADD X8, X31, 0x110
	0x01DF15E4 ADD X26, X8, 0x10
	0x01DF15E8 STP V0, V1, [X31 + 0x110]
	0x01DF15EC STP V2, V3, [X31 + 0x130]
	0x01DF15F0 MOV V11.16B, V9.16B
	0x01DF15F4 MOV V8.16B, V10.16B
	0x01DF15F8 MOV V13.16B, V12.16B
	0x01DF15FC LDR X1, [X28]
	0x01DF1600 ADD X0, X31, 0x110
	0x01DF1604 BL 0x2BC706C
	0x01DF1608 TBZ X0, 0x0, 0x1DF1650
	0x01DF160C LDUR V0, [X26 + 0x1C]
	0x01DF1610 LDP V2, V1, [X26]
	0x01DF1614 STUR V0, [X27 + 0x4C]
	0x01DF1618 STP V2, V1, [X31 + 0xE0]
	0x01DF161C ADD X0, X31, 0xE0
	0x01DF1620 MOV X1, X31
	0x01DF1624 BL 0x3C8E66C
	0x01DF1628 FADD S13, S13, S0
	0x01DF162C FADD S8, S8, S1
	0x01DF1630 FADD S11, S11, S2
	0x01DF1634 ADD X0, X31, 0xE0
	0x01DF1638 MOV X1, X31
	0x01DF163C BL 0x3C8E678
	0x01DF1640 FADD S12, S12, S0
	0x01DF1644 FADD S10, S10, S1
	0x01DF1648 FADD S9, S9, S2
	0x01DF164C B 0x1DF15FC
	0x01DF1650 ADRP X8, 0x2308000
	0x01DF1654 LDR X8, [X8 + 0x210]
	0x01DF1658 ADD X0, X31, 0x110
	0x01DF165C LDR X1, [X8]
	0x01DF1660 BL 0x2BC7068
	0x01DF1664 LDR X8, [X20]
	0x01DF1668 CBZ X8, 0x1DF1D04
	0x01DF166C ADRP X26, 0x2302000
	0x01DF1670 LDRB W9, [X25 + 0x785]
	0x01DF1674 LDR V14, [X8 + 0x18]
	0x01DF1678 LDR X26, [X26 + 0x5F8]
	0x01DF167C CBNZ W9, 0x1DF1694
	0x01DF1680 ADRP X0, 0x2302000
	0x01DF1684 LDR X0, [X0 + 0x5A8]
	0x01DF1688 BL 0x1C16CF4
	0x01DF168C MOVZ W8, 0x1
	0x01DF1690 STRB W8, [X25 + 0x785]
	0x01DF1694 LDR X0, [X23]
	0x01DF1698 SCVTF S14, S14
	0x01DF169C LDR W8, [X0 + 0xE0]
	0x01DF16A0 CBNZ W8, 0x1DF16A8
	0x01DF16A4 BL 0x1C16DFC
	0x01DF16A8 FMUL S0, S12, S12
	0x01DF16AC FMUL S1, S10, S10
	0x01DF16B0 LDR V2, [X21 + 0x17C]
	0x01DF16B4 FADD S0, S1, S0
	0x01DF16B8 FMUL S1, S9, S9
	0x01DF16BC FADD S0, S1, S0
	0x01DF16C0 FSQRT S0, S0
	0x01DF16C4 FDIV S15, S13, S14
	0x01DF16C8 FDIV S8, S8, S14
	0x01DF16CC FCMP S0, S2
	0x01DF16D0 FDIV S11, S11, S14
	0x01DF16D4 B.LE 0x1DF17C4
	0x01DF16D8 FDIV S3, S12, S0
	0x01DF16DC FDIV S4, S10, S0
	0x01DF16E0 LDP S12, S10, [X31 + 0x34]
	0x01DF16E4 FDIV S5, S9, S0
	0x01DF16E8 B 0x1DF17F8
	0x01DF16EC LDR X0, [X19 + 0x1F0]
	0x01DF16F0 CBZ X0, 0x1DF1D04
	0x01DF16F4 MOV X1, X31
	0x01DF16F8 BL 0x3C3F58C
	0x01DF16FC ADRP X26, 0x2302000
	0x01DF1700 LDR X0, [X19 + 0x1D8]
	0x01DF1704 LDR X26, [X26 + 0x5F8]
	0x01DF1708 CBZ X0, 0x1DF1D04
	0x01DF170C MOV X1, X31
	0x01DF1710 MOV V8.16B, V0.16B
	0x01DF1714 MOV V11.16B, V1.16B
	0x01DF1718 MOV V15.16B, V2.16B
	0x01DF171C BL 0x3C90124
	0x01DF1720 LDR X0, [X24]
	0x01DF1724 MOV V9.16B, V0.16B
	0x01DF1728 LDR W8, [X0 + 0xE0]
	0x01DF172C CBNZ W8, 0x1DF1738
	0x01DF1730 BL 0x1C16DFC
	0x01DF1734 LDR X0, [X24]
	0x01DF1738 LDR X8, [X0 + 0xB8]
	0x01DF173C MOV X1, X31
	0x01DF1740 LDR W0, [X8]
	0x01DF1744 BL 0x3C35CB8
	0x01DF1748 LDR X8, [X26]
	0x01DF174C MOV W20, W0
	0x01DF1750 LDR W9, [X8 + 0xE0]
	0x01DF1754 CBNZ W9, 0x1DF1760
	0x01DF1758 MOV X0, X8
	0x01DF175C BL 0x1C16DFC
	0x01DF1760 LDR V3, [X31 + 0x30]
	0x01DF1764 ADD X0, X31, 0xB0
	0x01DF1768 MOV V0.16B, V8.16B
	0x01DF176C MOV V1.16B, V11.16B
	0x01DF1770 MOV V2.16B, V15.16B
	0x01DF1774 MOV V4.16B, V13.16B
	0x01DF1778 MOV V5.16B, V14.16B
	0x01DF177C MOV V6.16B, V9.16B
	0x01DF1780 MOV W1, W20
	0x01DF1784 MOV X2, X31
	0x01DF1788 BL 0x3C8B18C
	0x01DF178C TBZ X0, 0x0, 0x1DF1818
	0x01DF1790 ADD X0, X31, 0xB0
	0x01DF1794 MOV X1, X31
	0x01DF1798 BL 0x3C8E66C
	0x01DF179C ADD X0, X31, 0xB0
	0x01DF17A0 MOV X1, X31
	0x01DF17A4 MOV V15.16B, V0.16B
	0x01DF17A8 MOV V8.16B, V1.16B
	0x01DF17AC MOV V11.16B, V2.16B
	0x01DF17B0 BL 0x3C8E678
	0x01DF17B4 MOV V3.16B, V0.16B
	0x01DF17B8 MOV V4.16B, V1.16B
	0x01DF17BC MOV V5.16B, V2.16B
	0x01DF17C0 B 0x1DF17F8
	0x01DF17C4 LDRB W8, [X29 + 0x783]
	0x01DF17C8 LDR V12, [X31 + 0x34]
	0x01DF17CC CBNZ W8, 0x1DF17E4
	0x01DF17D0 ADRP X0, 0x2302000
	0x01DF17D4 LDR X0, [X0 + 0x5A0]
	0x01DF17D8 BL 0x1C16CF4
	0x01DF17DC MOVZ W8, 0x1
	0x01DF17E0 STRB W8, [X29 + 0x783]
	0x01DF17E4 LDR X8, [X22]
	0x01DF17E8 LDR V10, [X31 + 0x38]
	0x01DF17EC LDR X8, [X8 + 0xB8]
	0x01DF17F0 LDP S3, S4, [X8]
	0x01DF17F4 LDR V5, [X8 + 0x8]
	0x01DF17F8 LDR V0, [X31 + 0x3C]
	0x01DF17FC MOV X0, X19
	0x01DF1800 MOV V1.16B, V8.16B
	0x01DF1804 MOV V2.16B, V11.16B
	0x01DF1808 STP S12, S0, [X31]
	0x01DF180C MOV V0.16B, V15.16B
	0x01DF1810 STR S10, [X31 + 0x8]
	0x01DF1814 BL 0x1DF23E4
	0x01DF1818 LDR X0, [X19 + 0x1E8]
	0x01DF181C CBZ X0, 0x1DF1D04
	0x01DF1820 MOV X1, X31
	0x01DF1824 BL 0x3C8E868
	0x01DF1828 MOV X0, X19
	0x01DF182C MOV X1, X31
	0x01DF1830 MOV V14.16B, V0.16B
	0x01DF1834 MOV V8.16B, V1.16B
	0x01DF1838 MOV V9.16B, V2.16B
	0x01DF183C BL 0x3C32E90
	0x01DF1840 CBZ X0, 0x1DF1D04
	0x01DF1844 MOV X1, X31
	0x01DF1848 STP S9, S8, [X31 + 0x38]
	0x01DF184C BL 0x3C3F58C
	0x01DF1850 ADRP X20, 0x25E7000
	0x01DF1854 LDRB W8, [X20 + 0xABD]
	0x01DF1858 MOV V8.16B, V0.16B
	0x01DF185C MOV V15.16B, V1.16B
	0x01DF1860 MOV V11.16B, V2.16B
	0x01DF1864 CBNZ W8, 0x1DF187C
	0x01DF1868 ADRP X0, 0x2302000
	0x01DF186C LDR X0, [X0 + 0x5A0]
	0x01DF1870 BL 0x1C16CF4
	0x01DF1874 MOVZ W8, 0x1
	0x01DF1878 STRB W8, [X20 + 0xABD]
	0x01DF187C LDR X8, [X22]
	0x01DF1880 LDR X0, [X24]
	0x01DF1884 LDR X8, [X8 + 0xB8]
	0x01DF1888 LDR W9, [X0 + 0xE0]
	0x01DF188C LDP S12, S13, [X8 + 0x24]
	0x01DF1890 LDR V9, [X8 + 0x2C]
	0x01DF1894 CBNZ W9, 0x1DF18A0
	0x01DF1898 BL 0x1C16DFC
	0x01DF189C LDR X0, [X24]
	0x01DF18A0 LDR X8, [X0 + 0xB8]
	0x01DF18A4 MOV X1, X31
	0x01DF18A8 LDR W0, [X8]
	0x01DF18AC BL 0x3C35CB8
	0x01DF18B0 LDR X8, [X26]
	0x01DF18B4 MOV W20, W0
	0x01DF18B8 LDR W9, [X8 + 0xE0]
	0x01DF18BC CBNZ W9, 0x1DF18C8
	0x01DF18C0 MOV X0, X8
	0x01DF18C4 BL 0x1C16DFC
	0x01DF18C8 ADD X0, X31, 0x80
	0x01DF18CC FMOV S6, 6
	0x01DF18D0 MOV V0.16B, V8.16B
	0x01DF18D4 MOV V1.16B, V15.16B
	0x01DF18D8 MOV V2.16B, V11.16B
	0x01DF18DC MOV V3.16B, V12.16B
	0x01DF18E0 MOV V4.16B, V13.16B
	0x01DF18E4 MOV V5.16B, V9.16B
	0x01DF18E8 MOV W1, W20
	0x01DF18EC MOV X2, X31
	0x01DF18F0 BL 0x3C8B18C
	0x01DF18F4 LDR V1, [X31 + 0x2C]
	0x01DF18F8 FMOV S0, 2
	0x01DF18FC MOV W20, W0
	0x01DF1900 ANDS W31, W0, 0x1
	0x01DF1904 FADD S0, S1, S0
	0x01DF1908 MOV X0, X19
	0x01DF190C MOV X1, X31
	0x01DF1910 FCSEL S10, S1, S0, NE
	0x01DF1914 BL 0x3C32E90
	0x01DF1918 CBZ X0, 0x1DF1D04
	0x01DF191C MOV X1, X31
	0x01DF1920 BL 0x3C3F58C
	0x01DF1924 MOV X0, X19
	0x01DF1928 MOV X1, X31
	0x01DF192C MOV V8.16B, V0.16B
	0x01DF1930 MOV V9.16B, V1.16B
	0x01DF1934 MOV V11.16B, V2.16B
	0x01DF1938 BL 0x3C32E90
	0x01DF193C CBZ X0, 0x1DF1D04
	0x01DF1940 MOV X1, X31
	0x01DF1944 STP S14, S11, [X31 + 0x1C]
	0x01DF1948 STR S9, [X31 + 0x2C]
	0x01DF194C STR S8, [X31 + 0x34]
	0x01DF1950 BL 0x3C3F58C
	0x01DF1954 ADRP X24, 0x25E7000
	0x01DF1958 LDRB W8, [X24 + 0x786]
	0x01DF195C MOV V12.16B, V0.16B
	0x01DF1960 MOV V9.16B, V1.16B
	0x01DF1964 MOV V13.16B, V2.16B
	0x01DF1968 CBNZ W8, 0x1DF1980
	0x01DF196C ADRP X0, 0x2302000
	0x01DF1970 LDR X0, [X0 + 0x5A0]
	0x01DF1974 BL 0x1C16CF4
	0x01DF1978 MOVZ W8, 0x1
	0x01DF197C STRB W8, [X24 + 0x786]
	0x01DF1980 LDR X8, [X22]
	0x01DF1984 FMOV S0, 6
	0x01DF1988 ANDS W31, W20, 0x1
	0x01DF198C FMOV S11, 1
	0x01DF1990 LDR X8, [X8 + 0xB8]
	0x01DF1994 FMOV S8, W31
	0x01DF1998 FCSEL S14, S8, S11, NE
	0x01DF199C FCSEL S15, S11, S8, NE
	0x01DF19A0 LDP S1, S2, [X8 + 0x18]
	0x01DF19A4 LDR V3, [X8 + 0x20]
	0x01DF19A8 ADRP X8, 0x2302000
	0x01DF19AC LDR X8, [X8 + 0xA28]
	0x01DF19B0 FMUL S1, S1, S0
	0x01DF19B4 FMUL S2, S2, S0
	0x01DF19B8 FMUL S0, S3, S0
	0x01DF19BC LDR X0, [X8]
	0x01DF19C0 FSUB S12, S12, S1
	0x01DF19C4 FSUB S9, S9, S2
	0x01DF19C8 FSUB S13, S13, S0
	0x01DF19CC LDR W8, [X0 + 0xE0]
	0x01DF19D0 CBNZ W8, 0x1DF19D8
	0x01DF19D4 BL 0x1C16DFC
	0x01DF19D8 LDR V0, [X31 + 0x34]
	0x01DF19DC LDR V1, [X31 + 0x2C]
	0x01DF19E0 LDR V2, [X31 + 0x20]
	0x01DF19E4 MOV V3.16B, V12.16B
	0x01DF19E8 MOV V4.16B, V9.16B
	0x01DF19EC MOV V5.16B, V13.16B
	0x01DF19F0 MOV X0, X31
	0x01DF19F4 STP S8, S11, [X31 + 0x8]
	0x01DF19F8 STP S14, S15, [X31]
	0x01DF19FC BL 0x3C05BF8
	0x01DF1A00 LDR V12, [X31 + 0x30]
	0x01DF1A04 LDP S14, S13, [X31 + 0x24]
	0x01DF1A08 MOV X0, X31
	0x01DF1A0C MOV V0.16B, V12.16B
	0x01DF1A10 MOV V1.16B, V13.16B
	0x01DF1A14 MOV V2.16B, V14.16B
	0x01DF1A18 BL 0x1DC0890
	0x01DF1A1C LDR X0, [X19 + 0x38]
	0x01DF1A20 CBZ X0, 0x1DF1D04
	0x01DF1A24 MOV X1, X31
	0x01DF1A28 MOV V8.16B, V0.16B
	0x01DF1A2C MOV V9.16B, V1.16B
	0x01DF1A30 MOV V11.16B, V2.16B
	0x01DF1A34 BL 0x1E9E550
	0x01DF1A38 LDR X0, [X19 + 0x1E8]
	0x01DF1A3C CBZ X0, 0x1DF1D04
	0x01DF1A40 FMUL S2, S9, S0
	0x01DF1A44 FMUL S3, S10, S2
	0x01DF1A48 LDR V2, [X31 + 0x38]
	0x01DF1A4C FMUL S1, S11, S0
	0x01DF1A50 FMUL S1, S10, S1
	0x01DF1A54 FMUL S0, S8, S0
	0x01DF1A58 FADD S2, S2, S1
	0x01DF1A5C LDR V1, [X31 + 0x3C]
	0x01DF1A60 FMUL S0, S10, S0
	0x01DF1A64 MOV X1, X31
	0x01DF1A68 FADD S1, S1, S3
	0x01DF1A6C LDR V3, [X31 + 0x1C]
	0x01DF1A70 FADD S0, S3, S0
	0x01DF1A74 BL 0x3C8E908
	0x01DF1A78 MOV V0.16B, V12.16B
	0x01DF1A7C MOV V1.16B, V13.16B
	0x01DF1A80 MOV V2.16B, V14.16B
	0x01DF1A84 MOV X0, X31
	0x01DF1A88 BL 0x1DC0890
	0x01DF1A8C LDRB W8, [X25 + 0x785]
	0x01DF1A90 MOV V8.16B, V0.16B
	0x01DF1A94 MOV V9.16B, V1.16B
	0x01DF1A98 MOV V10.16B, V2.16B
	0x01DF1A9C CBNZ W8, 0x1DF1AB4
	0x01DF1AA0 ADRP X0, 0x2302000
	0x01DF1AA4 LDR X0, [X0 + 0x5A8]
	0x01DF1AA8 BL 0x1C16CF4
	0x01DF1AAC MOVZ W8, 0x1
	0x01DF1AB0 STRB W8, [X25 + 0x785]
	0x01DF1AB4 LDR X0, [X23]
	0x01DF1AB8 LDR W8, [X0 + 0xE0]
	0x01DF1ABC CBNZ W8, 0x1DF1AC4
	0x01DF1AC0 BL 0x1C16DFC
	0x01DF1AC4 FMUL S0, S8, S8
	0x01DF1AC8 FMUL S1, S9, S9
	0x01DF1ACC LDR V2, [X21 + 0x17C]
	0x01DF1AD0 FADD S0, S0, S1
	0x01DF1AD4 FMUL S1, S10, S10
	0x01DF1AD8 FADD S0, S1, S0
	0x01DF1ADC FSQRT S0, S0
	0x01DF1AE0 FCMP S0, S2
	0x01DF1AE4 B.LE 0x1DF1AF8
	0x01DF1AE8 FDIV S8, S8, S0
	0x01DF1AEC FDIV S9, S9, S0
	0x01DF1AF0 FDIV S10, S10, S0
	0x01DF1AF4 B 0x1DF1B24
	0x01DF1AF8 LDRB W8, [X29 + 0x783]
	0x01DF1AFC CBNZ W8, 0x1DF1B14
	0x01DF1B00 ADRP X0, 0x2302000
	0x01DF1B04 LDR X0, [X0 + 0x5A0]
	0x01DF1B08 BL 0x1C16CF4
	0x01DF1B0C MOVZ W8, 0x1
	0x01DF1B10 STRB W8, [X29 + 0x783]
	0x01DF1B14 LDR X8, [X22]
	0x01DF1B18 LDR X8, [X8 + 0xB8]
	0x01DF1B1C LDP S8, S9, [X8]
	0x01DF1B20 LDR V10, [X8 + 0x8]
	0x01DF1B24 LDR X8, [X19 + 0xC0]
	0x01DF1B28 CBZ X8, 0x1DF1D04
	0x01DF1B2C LDR V11, [X8 + 0x40]
	0x01DF1B30 MOV X0, X19
	0x01DF1B34 MOV X1, X31
	0x01DF1B38 BL 0x3C32E90
	0x01DF1B3C CBZ X0, 0x1DF1D04
	0x01DF1B40 MOV X1, X31
	0x01DF1B44 STR S11, [X31 + 0x3C]
	0x01DF1B48 BL 0x3C3FA04
	0x01DF1B4C ADRP X20, 0x25E7000
	0x01DF1B50 LDRB W8, [X20 + 0xA24]
	0x01DF1B54 MOV V11.16B, V0.16B
	0x01DF1B58 MOV V12.16B, V1.16B
	0x01DF1B5C MOV V13.16B, V2.16B
	0x01DF1B60 CBNZ W8, 0x1DF1B78
	0x01DF1B64 ADRP X0, 0x2302000
	0x01DF1B68 LDR X0, [X0 + 0x5A8]
	0x01DF1B6C BL 0x1C16CF4
	0x01DF1B70 MOVZ W8, 0x1
	0x01DF1B74 STRB W8, [X20 + 0xA24]
	0x01DF1B78 LDR X0, [X23]
	0x01DF1B7C FMUL S0, S8, S8
	0x01DF1B80 FMUL S1, S9, S9
	0x01DF1B84 FADD S0, S0, S1
	0x01DF1B88 FMUL S1, S10, S10
	0x01DF1B8C LDR W8, [X0 + 0xE0]
	0x01DF1B90 FADD S15, S1, S0
	0x01DF1B94 FMUL S0, S11, S11
	0x01DF1B98 FMUL S1, S12, S12
	0x01DF1B9C FADD S0, S0, S1
	0x01DF1BA0 FMUL S1, S13, S13
	0x01DF1BA4 FADD S14, S1, S0
	0x01DF1BA8 CBNZ W8, 0x1DF1BB0
	0x01DF1BAC BL 0x1C16DFC
	0x01DF1BB0 ADRP X8, 0xFFFFFFFFFECF8000
	0x01DF1BB4 LDR V1, [X8 + 0xFE8]
	0x01DF1BB8 FMUL S0, S15, S14
	0x01DF1BBC FSQRT S0, S0
	0x01DF1BC0 FMOV S15, W31
	0x01DF1BC4 FCMP S0, S1
	0x01DF1BC8 B.MI 0x1DF1C20
	0x01DF1BCC LDR X0, [X23]
	0x01DF1BD0 FMUL S1, S8, S11
	0x01DF1BD4 FMUL S2, S9, S12
	0x01DF1BD8 FMUL S3, S10, S13
	0x01DF1BDC FADD S1, S1, S2
	0x01DF1BE0 FADD S1, S3, S1
	0x01DF1BE4 LDR W8, [X0 + 0xE0]
	0x01DF1BE8 FDIV S0, S1, S0
	0x01DF1BEC FMOV S1, 1
	0x01DF1BF0 FMOV S2, -1
	0x01DF1BF4 FMIN S1, S0, S1
	0x01DF1BF8 FCMP S0, S2
	0x01DF1BFC FCSEL S11, S1, S2, PL
	0x01DF1C00 CBNZ W8, 0x1DF1C08
	0x01DF1C04 BL 0x1C16DFC
	0x01DF1C08 FCVT S0, S11
	0x01DF1C0C BL 0x3EB1B80
	0x01DF1C10 ADRP X8, 0xFFFFFFFFFECF9000
	0x01DF1C14 LDR V1, [X8 + 0x448]
	0x00000000 INVALID
	0x01DF1C1C FMUL S15, S0, S1
	0x01DF1C20 MOV X0, X19
	0x01DF1C24 MOV X1, X31
	0x01DF1C28 BL 0x3C32E90
	0x01DF1C2C MOV X20, X0
	0x01DF1C30 MOV X0, X19
	0x01DF1C34 MOV X1, X31
	0x01DF1C38 BL 0x3C32E90
	0x01DF1C3C CBZ X0, 0x1DF1D04
	0x01DF1C40 LDR V0, [X31 + 0x3C]
	0x01DF1C44 MOV X1, X31
	0x01DF1C48 FDIV S0, S0, S15
	0x01DF1C4C STR S0, [X31 + 0x3C]
	0x01DF1C50 BL 0x3C3DEB4
	0x01DF1C54 MOV V11.16B, V0.16B
	0x01DF1C58 MOV V12.16B, V1.16B
	0x01DF1C5C MOV V13.16B, V2.16B
	0x01DF1C60 MOV V0.16B, V8.16B
	0x01DF1C64 MOV V1.16B, V9.16B
	0x01DF1C68 MOV V2.16B, V10.16B
	0x01DF1C6C MOV X0, X31
	0x01DF1C70 MOV V14.16B, V3.16B
	0x01DF1C74 BL 0x3C2A8C4
	0x01DF1C78 MOV X0, X31
	0x01DF1C7C MOV V8.16B, V0.16B
	0x01DF1C80 MOV V9.16B, V1.16B
	0x01DF1C84 MOV V10.16B, V2.16B
	0x01DF1C88 MOV V15.16B, V3.16B
	0x01DF1C8C BL 0x3C3C714
	0x01DF1C90 LDR V1, [X31 + 0x3C]
	0x01DF1C94 MOV V2.16B, V13.16B
	0x01DF1C98 MOV V3.16B, V14.16B
	0x01DF1C9C MOV V4.16B, V8.16B
	0x01DF1CA0 FMUL S0, S1, S0
	0x01DF1CA4 STR S0, [X31]
	0x01DF1CA8 MOV V0.16B, V11.16B
	0x01DF1CAC MOV V1.16B, V12.16B
	0x01DF1CB0 MOV V5.16B, V9.16B
	0x01DF1CB4 MOV V6.16B, V10.16B
	0x01DF1CB8 MOV V7.16B, V15.16B
	0x01DF1CBC MOV X0, X31
	0x01DF1CC0 BL 0x3C2A2F8
	0x01DF1CC4 CBZ X20, 0x1DF1D04
	0x01DF1CC8 MOV X0, X20
	0x01DF1CCC MOV X1, X31
	0x01DF1CD0 BL 0x3C3F7AC
	0x01DF1CD4 LDP X20, X19, [X31 + 0x1E0]
	0x01DF1CD8 LDP X22, X21, [X31 + 0x1D0]
	0x01DF1CDC LDP X24, X23, [X31 + 0x1C0]
	0x01DF1CE0 LDP X26, X25, [X31 + 0x1B0]
	0x01DF1CE4 LDP X28, X27, [X31 + 0x1A0]
	0x01DF1CE8 LDP X29, X30, [X31 + 0x190]
	0x01DF1CEC LDP D9, D8, [X31 + 0x180]
	0x01DF1CF0 LDP D11, D10, [X31 + 0x170]
	0x01DF1CF4 LDP D13, D12, [X31 + 0x160]
	0x01DF1CF8 LDP D15, D14, [X31 + 0x150]
	0x01DF1CFC ADD X31, X31, 0x1F0
	0x01DF1D00 RET
	0x01DF1D04 BL 0x1C16F20
	0x01DF1D08 BL 0x1C16F28
	0x01DF1D0C B 0x1DF1D14
	0x01DF1D10 B 0x1DF1D14
	0x01DF1D14 MOV X27, X0
	0x01DF1D18 CMP W1, 0x1
	0x01DF1D1C B.NE 0x1DF1D50
	0x01DF1D20 MOV X0, X27
	0x01DF1D24 BL 0x3EB1AD0
	0x01DF1D28 LDR X26, [X0]
	0x01DF1D2C BL 0x3EB1AE0
	0x01DF1D30 ADRP X8, 0x2308000
	0x01DF1D34 LDR X8, [X8 + 0x210]
	0x01DF1D38 ADD X0, X31, 0x110
	0x01DF1D3C LDR X1, [X8]
	0x01DF1D40 BL 0x2BC7068
	0x01DF1D44 CBZ X26, 0x1DF1664
	0x01DF1D48 MOV X0, X26
	0x01DF1D4C BL 0x1C16F18
	0x01DF1D50 MOV X26, X31
	0x01DF1D54 B 0x1DF1D5C
	0x01DF1D58 MOV X27, X0
	0x01DF1D5C ADRP X8, 0x2308000
	0x01DF1D60 LDR X8, [X8 + 0x210]
	0x01DF1D64 LDR X1, [X8]
	0x01DF1D68 ADD X0, X31, 0x110
	0x01DF1D6C BL 0x2BC7068
	0x01DF1D70 CBNZ X26, 0x1DF1D7C
	0x01DF1D74 MOV X0, X27
	0x01DF1D78 BL 0x1D2C690
	0x01DF1D7C MOV X0, X26
	0x01DF1D80 BL 0x1C16F18
	0x01DF1D84 BL 0x1990590
	0x01DF1D88 STP X30, X19, [X31 - 0x10]!
	0x01DF1D8C LDRB W8, [X0 + 0x10]
	0x01DF1D90 CBZ W8, 0x1DF1DB0
	0x01DF1D94 MOV X19, X0
	0x01DF1D98 MOV X0, X31
	0x01DF1D9C BL 0x3C3C6C4
	0x01DF1DA0 LDP S1, S2, [X19 + 0x14]
	0x01DF1DA4 FSUB S0, S0, S1
	0x01DF1DA8 FCMP S0, S2
	0x01DF1DAC B.GE 0x1DF1DB8
	0x01DF1DB0 MOV W0, W31
	0x01DF1DB4 B 0x1DF1DC0
	0x01DF1DB8 MOVZ W0, 0x1
	0x01DF1DBC STRB W31, [X19 + 0x10]
	0x01DF1DC0 LDP X30, X19, [X31], #0x10
	0x01DF1DC4 RET
	0x01DF1DC8 SUB X31, X31, 0xC0
	0x01DF1DCC STP D15, D14, [X31 + 0x40]
	0x01DF1DD0 STP D13, D12, [X31 + 0x50]
	0x01DF1DD4 STP D11, D10, [X31 + 0x60]
	0x01DF1DD8 STP D9, D8, [X31 + 0x70]
	0x01DF1DDC STP X30, X25, [X31 + 0x80]
	0x01DF1DE0 STP X24, X23, [X31 + 0x90]
	0x01DF1DE4 STP X22, X21, [X31 + 0xA0]
	0x01DF1DE8 STP X20, X19, [X31 + 0xB0]
	0x01DF1DEC ADRP X20, 0x25E7000
	0x01DF1DF0 LDRB W8, [X20 + 0xCDE]
	0x01DF1DF4 MOV V8.16B, V2.16B
	0x01DF1DF8 MOV V9.16B, V1.16B
	0x01DF1DFC MOV V10.16B, V0.16B
	0x01DF1E00 MOV X19, X0
	0x01DF1E04 TBNZ X8, 0x0, 0x1DF1E34
	0x01DF1E08 ADRP X0, 0x2308000
	0x01DF1E0C LDR X0, [X0 + 0x1C8]
	0x01DF1E10 BL 0x1C16CF4
	0x01DF1E14 ADRP X0, 0x2302000
	0x01DF1E18 LDR X0, [X0 + 0x5D8]
	0x01DF1E1C BL 0x1C16CF4
	0x01DF1E20 ADRP X0, 0x2302000
	0x01DF1E24 LDR X0, [X0 + 0x5F8]
	0x01DF1E28 BL 0x1C16CF4
	0x01DF1E2C MOVZ W8, 0x1

ISIL:
	001 Subtract X31, X31, 432
	002 Move [X31+304], D11
	003 Move [X31+312], D10
	004 Move [X31+320], D9
	005 Move [X31+328], D8
	006 Move [X31+336], X29
	007 Move [X31+344], X30
	008 Move [X31+352], X28
	009 Move [X31+360], X27
	010 Move [X31+368], X26
	011 Move [X31+376], X25
	012 Move [X31+384], X24
	013 Move [X31+392], X23
	014 Move [X31+400], X22
	015 Move [X31+408], X21
	016 Move [X31+416], X20
	017 Move [X31+424], X19
	018 Move X20, 0x25E8000
	019 Move W8, [X20+3299]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {102}
	025 Move X0, 0x2308000
	026 Move X0, [X0+3104]
	027 Call 0x1C17CF4
	028 Move X0, 0x2309000
	029 Move X0, [X0+368]
	030 Call 0x1C17CF4
	031 Move X0, 0x2309000
	032 Move X0, [X0+432]
	033 Call 0x1C17CF4
	034 Move X0, 0x2308000
	035 Move X0, [X0+3112]
	036 Call 0x1C17CF4
	037 Move X0, 0x2309000
	038 Move X0, [X0+376]
	039 Call 0x1C17CF4
	040 Move X0, 0x2309000
	041 Move X0, [X0+440]
	042 Call 0x1C17CF4
	043 Move X0, 0x2309000
	044 Move X0, [X0+384]
	045 Call 0x1C17CF4
	046 Move X0, 0x2309000
	047 Move X0, [X0+448]
	048 Call 0x1C17CF4
	049 Move X0, 0x2308000
	050 Move X0, [X0+3120]
	051 Call 0x1C17CF4
	052 Move X0, 0x2309000
	053 Move X0, [X0+456]
	054 Call 0x1C17CF4
	055 Move X0, 0x2309000
	056 Move X0, [X0+392]
	057 Call 0x1C17CF4
	058 Move X0, 0x2309000
	059 Move X0, [X0+400]
	060 Call 0x1C17CF4
	061 Move X0, 0x2309000
	062 Move X0, [X0+464]
	063 Call 0x1C17CF4
	064 Move X0, 0x2308000
	065 Move X0, [X0+3128]
	066 Call 0x1C17CF4
	067 Move X0, 0x2309000
	068 Move X0, [X0+472]
	069 Call 0x1C17CF4
	070 Move X0, 0x2309000
	071 Move X0, [X0+480]
	072 Call 0x1C17CF4
	073 Move X0, 0x2308000
	074 Move X0, [X0+3248]
	075 Call 0x1C17CF4
	076 Move X0, 0x2309000
	077 Move X0, [X0+488]
	078 Call 0x1C17CF4
	079 Move X0, 0x2308000
	080 Move X0, [X0+3136]
	081 Call 0x1C17CF4
	082 Move X0, 0x2305000
	083 Move X0, [X0+2464]
	084 Call 0x1C17CF4
	085 Move X0, 0x2309000
	086 Move X0, [X0+496]
	087 Call 0x1C17CF4
	088 Move X0, 0x2309000
	089 Move X0, [X0+504]
	090 Call 0x1C17CF4
	091 Move X0, 0x2309000
	092 Move X0, [X0+408]
	093 Call 0x1C17CF4
	094 Move X0, 0x2309000
	095 Move X0, [X0+512]
	096 Call 0x1C17CF4
	097 Move X0, 0x2309000
	098 Move X0, [X0+416]
	099 Call 0x1C17CF4
	100 Move W8, 1
	101 Move [X20+3299], W8
	102 NotImplemented "Instruction MOVI not yet implemented."
	103 Move [X31+288], X31
	104 Move [X31+144], X31
	105 Move [X31+152], X31
	106 Move [X31+128], X31
	107 Move [X31+136], X31
	108 Move [X31+96], X31
	109 Move [X31+104], X31
	110 Move [X31+112], X31
	111 Move [X31+256], V0
	112 Move [X31+264], V0
	113 Move [X31+224], V0
	114 Move [X31+232], V0
	115 Move [X31+192], V0
	116 Move [X31+200], V0
	117 Move [X31+160], V0
	118 Move [X31+168], V0
	119 Move [X31+88], X31
	120 Move X0, [X19+208]
	121 Compare X0, 0
	122 JumpIfEqual {570}
	123 Move X1, X31
	124 Call Transform.get_position, X0
	125 Move X8, [X19+192]
	126 Compare X8, 0
	127 JumpIfEqual {570}
	128 Move X8, [X8+120]
	129 Compare X8, 0
	130 JumpIfEqual {570}
	131 Move W9, [X8+24]
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move X9, 0x2308000
	134 Move X9, [X9+3136]
	135 Move V11, [X8+36]
	136 Move V8, V0
	137 Move V9, V1
	138 Move X0, [X9]
	139 Move V10, V2
	140 Move W9, [X0+224]
	141 Compare W9, 0
	142 JumpIfNotEqual {144}
	143 Call 0x1C17DFC
	144 Move V0, V8
	145 Move V1, V9
	146 Move V2, V10
	147 Move V3, V11
	148 Call MobDetectionUtil.GetPlayersInRange, X0, X1, V0
	149 Compare X0, 0
	150 JumpIfEqual {570}
	151 Move W8, [X0+24]
	152 Compare W8, 0
	153 JumpIfEqual {532}
	154 Move [X31+8], X0
	155 Move X8, 0x2309000
	156 Move X8, [X8+488]
	157 Move X21, 0x2309000
	158 Move X23, 0x2309000
	159 Move X25, 0x2309000
	160 Move X26, 0x2309000
	161 Move X27, 0x2305000
	162 Move X20, 0x2309000
	163 Move X29, 0x2309000
	164 Move X28, 0x2309000
	165 Move X24, 0x2308000
	166 Move X21, [X21+480]
	167 Move X23, [X23+408]
	168 Move X25, [X25+376]
	169 Move X26, [X26+384]
	170 Move X27, [X27+2464]
	171 Move X20, [X20+464]
	172 Move X29, [X29+440]
	173 Move X28, [X28+512]
	174 Move X24, [X24+3112]
	175 Move X0, [X8]
	176 Call 0x1C17F10
	177 Move X1, [X21]
	178 Move X22, X0
	179 Call List`1<UInt32>..ctor, X0
	180 Add X8, X31, 16
	181 Move X0, X19
	182 Call FakeGorillaController.get__angerMetersByPlayerId, X0
	183 Move V0, [X31+16]
	184 Move V1, [X31+32]
	185 Move V2, [X31+48]
	186 Move V3, [X31+64]
	187 Move X1, [X23]
	188 Add X8, X31, 16
	189 Add X0, X31, 160
	190 Move [X31+160], V0
	191 Move [X31+168], V1
	192 Move [X31+192], V2
	193 Move [X31+200], V3
	194 Call 0x2417BB8, X0
	195 Add X0, X31, 224
	196 Add X1, X31, 16
	197 Move W2, 72
	198 Call 0x3EB2AC0
	199 Move X1, [X25]
	200 Add X0, X31, 224
	201 Call 0x2C1DA00, X0
	202 Move TEMP, X0
	203 And TEMP, TEMP, 1
	204 Compare TEMP, 1
	205 JumpIfNotEqual {260}
	206 Move X1, [X26]
	207 Add X0, X31, 224
	208 Call 0x2C1DAAC, X0
	209 Move X21, X0
	210 Move X0, [X27]
	211 Move W8, [X0+224]
	212 Compare W8, 0
	213 JumpIfNotEqual {215}
	214 Call 0x1C17DFC
	215 Add X1, X31, 152
	216 Move W0, W21
	217 Move X2, X31
	218 Call NetPlayer.TryGetPlayerByID, X0, X1
	219 Move TEMP, X0
	220 And TEMP, TEMP, 1
	221 Compare TEMP, 1
	222 JumpIfNotEqual {238}
	223 Move X0, [X31+152]
	224 Compare X0, 0
	225 JumpIfEqual {568}
	226 Move X1, X31
	227 Call NetPlayer.get_isDie, X0
	228 Move X8, X21
	229 ShiftRight X8, 32
	230 And X8, X8, 0x7FFFFFFF
	231 Move S0, W8
	232 NotImplemented "Instruction FCMP not yet implemented."
	233 Xor W8, W0, 1
	234 Move TEMP, X8
	235 And TEMP, TEMP, 1
	236 Compare TEMP, 1
	237 JumpIfEqual {199}
	238 Compare X22, 0
	239 JumpIfEqual {565}
	240 Move W10, [X22+28]
	241 Move X8, [X22+16]
	242 Move X9, [X20]
	243 Add W10, W10, 1
	244 Move [X22+28], W10
	245 Compare X8, 0
	246 JumpIfEqual {566}
	247 NotImplemented "Instruction LDRSW not yet implemented."
	248 Move W11, [X8+24]
	249 NotImplemented "Instruction CMP not yet implemented."
	250 Add W9, W10, 1
	251 Add X8, X8, X10
	252 Move [X22+24], W9
	253 Move [X8+32], W21
	254 Move X8, [X9+32]
	255 Move X8, [X8+192]
	256 Move X2, [X8+112]
	257 Move X0, X22
	258 Move W1, W21
	259 Call List`1<UInt32>.AddWithResize, X0, X1
	260 Move X8, 0x2309000
	261 Move X8, [X8+368]
	262 Add X0, X31, 224
	263 Move X1, [X8]
	264 Call 0x2C1DC18, X0
	265 Compare X22, 0
	266 JumpIfEqual {570}
	267 Move X8, 0x2309000
	268 Move X8, [X8+472]
	269 Move X0, X22
	270 Move X1, [X8]
	271 Add X8, X31, 16
	272 Call List`1<UInt32>.GetEnumerator, X0
	273 Move V0, [X31+1]
	274 Move X8, [X31+32]
	275 Move [X31+8], V0
	276 Move [X31+144], X8
	277 Move X1, [X29]
	278 Add X0, X31, 128
	279 Call Enumerator<UInt32>.MoveNext, X0
	280 Move TEMP, X0
	281 And TEMP, TEMP, 1
	282 Compare TEMP, 1
	283 JumpIfNotEqual {300}
	284 Move W21, [X31+144]
	285 Add X8, X31, 16
	286 Move X0, X19
	287 Call FakeGorillaController.get__angerMetersByPlayerId, X0
	288 Move V0, [X31+16]
	289 Move V1, [X31+32]
	290 Move V2, [X31+48]
	291 Move V3, [X31+64]
	292 Move X2, [X28]
	293 Move [X31+160], V0
	294 Move [X31+168], V1
	295 Move [X31+192], V2
	296 Move [X31+200], V3
	297 Add X0, X31, 160
	298 Move W1, W21
	299 Call 0x2416F70, X0, X1
	300 Move X8, 0x2309000
	301 Move X8, [X8+432]
	302 Add X0, X31, 128
	303 Move X1, [X8]
	304 Call Enumerator<UInt32>.Dispose, X0
	305 Move X8, 0x2308000
	306 Move X8, [X8+3128]
	307 Move X0, [X31+8]
	308 Move X1, [X8]
	309 Add X8, X31, 16
	310 Call List`1<Object>.GetEnumerator, X0
	311 Move V0, [X31+1]
	312 Move X8, [X31+32]
	313 Move X9, -19951616
	314 Move X21, 0x2309000
	315 Move [X31+6], V0
	316 Move [X31+112], X8
	317 Move X22, 0x2309000
	318 Move V8, [X9+3876]
	319 Move X21, [X21+504]
	320 Move X22, [X22+496]
	321 Move X1, [X24]
	322 Add X0, X31, 96
	323 Call Enumerator<Object>.MoveNext, X0
	324 Move TEMP, X0
	325 And TEMP, TEMP, 1
	326 Compare TEMP, 1
	327 JumpIfNotEqual {381}
	328 Move X20, [X31+112]
	329 Compare X20, 0
	330 JumpIfEqual {564}
	331 Move X0, X20
	332 Move X1, X31
	333 Call NetPlayer.get_isDie, X0
	334 Move TEMP, X0
	335 And TEMP, TEMP, 1
	336 Compare TEMP, 1
	337 JumpIfEqual {321}
	338 Move X8, [X20+64]
	339 Compare X8, 0
	340 JumpIfEqual {567}
	341 Move X8, [X8+32]
	342 Compare X8, 0
	343 JumpIfEqual {345}
	344 Move W20, [X8]
	345 Move W20, W31
	346 Add X8, X31, 16
	347 Move X0, X19
	348 Call FakeGorillaController.get__angerMetersByPlayerId, X0
	349 Move V0, [X31+16]
	350 Move V1, [X31+32]
	351 Move V2, [X31+48]
	352 Move V3, [X31+64]
	353 Move X2, [X21]
	354 Move [X31+160], V0
	355 Move [X31+168], V1
	356 Move [X31+192], V2
	357 Move [X31+200], V3
	358 Add X0, X31, 160
	359 Move W1, W20
	360 Call 0x2416AF8, X0, X1
	361 Move TEMP, X0
	362 And TEMP, TEMP, 1
	363 Compare TEMP, 1
	364 JumpIfEqual {321}
	365 Add X8, X31, 16
	366 Move X0, X19
	367 Call FakeGorillaController.get__angerMetersByPlayerId, X0
	368 Move V0, [X31+16]
	369 Move V1, [X31+32]
	370 Move V2, [X31+48]
	371 Move V3, [X31+64]
	372 Move X2, [X22]
	373 Move [X31+160], V0
	374 Move [X31+168], V1
	375 Move [X31+192], V2
	376 Move [X31+200], V3
	377 Add X0, X31, 160
	378 Move W1, W20
	379 Move V0, V8
	380 Call 0x2416E40, X0, X1, X2
	381 Move X8, 0x2308000
	382 Move X8, [X8+3104]
	383 Add X0, X31, 96
	384 Move X1, [X8]
	385 Call Enumerator<Object>.Dispose, X0
	386 Add X8, X31, 16
	387 Move X0, X19
	388 Call FakeGorillaController.get__angerMetersByPlayerId, X0
	389 Move X8, 0x2309000
	390 Move V0, [X31+16]
	391 Move V1, [X31+32]
	392 Move V2, [X31+48]
	393 Move V3, [X31+64]
	394 Move X8, [X8+408]
	395 Add X0, X31, 160
	396 Move [X31+160], V0
	397 Move [X31+168], V1
	398 Move [X31+192], V2
	399 Move [X31+200], V3
	400 Move X1, [X8]
	401 Add X8, X31, 16
	402 Call 0x2417BB8, X0
	403 Add X0, X31, 224
	404 Add X1, X31, 16
	405 Move W2, 72
	406 Call 0x3EB2AC0
	407 Move X22, 0x2309000
	408 Move X23, 0x2309000
	409 Move X22, [X22+456]
	410 Move X23, [X23+416]
	411 Move X1, [X25]
	412 Add X0, X31, 224
	413 Call 0x2C1DA00, X0
	414 Move TEMP, X0
	415 And TEMP, TEMP, 1
	416 Compare TEMP, 1
	417 JumpIfNotEqual {518}
	418 Move X1, [X26]
	419 Add X0, X31, 224
	420 Call 0x2C1DAAC, X0
	421 Move X20, X0
	422 Move X0, [X27]
	423 Move W8, [X0+224]
	424 Compare W8, 0
	425 JumpIfNotEqual {427}
	426 Call 0x1C17DFC
	427 Add X1, X31, 88
	428 Move W0, W20
	429 Move X2, X31
	430 Call NetPlayer.TryGetPlayerByID, X0, X1
	431 Move TEMP, X0
	432 And TEMP, TEMP, 1
	433 Compare TEMP, 1
	434 JumpIfNotEqual {411}
	435 Move X1, [X31+88]
	436 Move X0, X19
	437 Call FakeGorillaController.IsPlayerHoldingLoot, X0, X1
	438 Move W21, W0
	439 Move X0, [X19+56]
	440 Move TEMP, X21
	441 And TEMP, TEMP, 1
	442 Compare TEMP, 1
	443 JumpIfNotEqual {460}
	444 Compare X0, 0
	445 JumpIfEqual {571}
	446 Move X1, X31
	447 Call NetworkRunner.get_DeltaTime, X0
	448 Move X0, [X22]
	449 Move V8, V0
	450 Move W8, [X0+224]
	451 Compare W8, 0
	452 JumpIfNotEqual {455}
	453 Call 0x1C17DFC
	454 Move X0, [X22]
	455 Move X8, [X0+184]
	456 Move S0, [X8+8]
	457 Move S1, [X8+12]
	458 Move X0, X31
	459 Call Random.Range, V0, V1
	460 Compare X0, 0
	461 JumpIfEqual {572}
	462 Move X1, X31
	463 Call NetworkRunner.get_DeltaTime, X0
	464 Move X0, [X22]
	465 Move V8, V0
	466 Move W8, [X0+224]
	467 Compare W8, 0
	468 JumpIfNotEqual {471}
	469 Call 0x1C17DFC
	470 Move X0, [X22]
	471 Move X8, [X0+184]
	472 Move S0, [X8+16]
	473 Move S1, [X8+20]
	474 Move X0, X31
	475 Call Random.Range, V0, V1
	476 NotImplemented "Instruction FDIV not yet implemented."
	477 Move X0, X19
	478 Call FakeGorillaController.get__timeToLoseAnger, X0
	479 Move V8, V0
	480 Add X8, X31, 16
	481 Move X0, X19
	482 Call FakeGorillaController.get__angerMetersByPlayerId, X0
	483 Move X8, X20
	484 ShiftRight X8, 32
	485 And X8, X8, 0x7FFFFFFF
	486 Move V0, [X31+16]
	487 Move V1, [X31+32]
	488 Move V2, [X31+48]
	489 Move V3, [X31+64]
	490 Move X2, [X23]
	491 Move S4, W8
	492 Add S4, S9, S4
	493 Add S8, S4, S8
	494 Move [X31+160], V0
	495 Move [X31+168], V1
	496 Move [X31+192], V2
	497 Move [X31+200], V3
	498 Add X0, X31, 160
	499 Move W1, W20
	500 Move V0, V8
	501 Call 0x2416D94, X0, X1, X2
	502 Move X8, [X19+192]
	503 Compare X8, 0
	504 JumpIfEqual {569}
	505 Move V0, [X8+136]
	506 NotImplemented "Instruction FCMP not yet implemented."
	507 Move X1, [X31+88]
	508 Move TEMP, X21
	509 And TEMP, TEMP, 1
	510 Compare TEMP, 1
	511 JumpIfNotEqual {534}
	512 Move X0, X19
	513 Call FakeGorillaController.SetChasing, X0, X1
	514 Move W1, 3
	515 Move X0, X19
	516 Call FakeGorillaController.set_phase, X0, X1
	517 Move W8, W31
	518 Move X8, 0x2309000
	519 Move X8, [X8+368]
	520 Add X0, X31, 224
	521 Move X1, [X8]
	522 Call 0x2C1DC18, X0
	523 Move X0, X19
	524 Call MobController.UpdateRoaming, X0
	525 Move X0, X19
	526 Call MobController.UpdateRoamingPath, X0
	527 Move X0, X19
	528 Call MobController.get__targetPosition, X0
	529 Move S3, W31
	530 Move X0, X19
	531 Call FakeGorillaController.UpdateGorillaMoveToTarget, X0, X1, V0
	532 Move X0, X19
	533 Call FakeGorillaController.SetRoaming, X0
	534 Move X0, X19
	535 Call FakeGorillaController.SetChasing, X0, X1
	536 Move W1, 4
	537 Move X0, X19
	538 Call FakeGorillaController.set_phase, X0, X1
	539 Move W8, 1
	540 Move [X19+241], W8
	541 Move X8, 0x2309000
	542 Move X8, [X8+368]
	543 Add X0, X31, 224
	544 Move X1, [X8]
	545 Call 0x2C1DC18, X0
	546 Move X20, [X31+416]
	547 Move X19, [X31+424]
	548 Move X22, [X31+400]
	549 Move X21, [X31+408]
	550 Move X24, [X31+384]
	551 Move X23, [X31+392]
	552 Move X26, [X31+368]
	553 Move X25, [X31+376]
	554 Move X28, [X31+352]
	555 Move X27, [X31+360]
	556 Move X29, [X31+336]
	557 Move X30, [X31+344]
	558 Move D9, [X31+320]
	559 Move D8, [X31+328]
	560 Move D11, [X31+304]
	561 Move D10, [X31+312]
	562 Add X31, X31, 432
	563 Return 
	564 Call 0x1C17F20
	565 Call 0x1C17F20
	566 Call 0x1C17F20
	567 Call 0x1C17F20
	568 Call 0x1C17F20
	569 Call 0x1C17F20
	570 Call 0x1C17F20
	571 Call 0x1C17F20
	572 Call 0x1C17F20
	573 Call 0x1C17F28
	574 Move X23, X0
	575 NotImplemented "Instruction CMP not yet implemented."
	576 Move X0, X23
	577 Call 0x3EB2AD0
	578 Move X20, [X0]
	579 Call 0x3EB2AE0
	580 Move X8, 0x2309000
	581 Move X8, [X8+368]
	582 Add X0, X31, 224
	583 Move X1, [X8]
	584 Call 0x2C1DC18, X0
	585 Compare X20, 0
	586 JumpIfEqual {523}
	587 Move X20, X31
	588 Move X23, X0
	589 Move X8, 0x2309000
	590 Move X8, [X8+368]
	591 Move X1, [X8]
	592 Add X0, X31, 224
	593 Call 0x2C1DC18, X0
	594 Compare X20, 0
	595 JumpIfEqual {674}
	596 Move X0, X20
	597 Call 0x1C17F18
	598 Move X23, X0
	599 NotImplemented "Instruction CMP not yet implemented."
	600 Move X0, X23
	601 Call 0x3EB2AD0
	602 Move X20, [X0]
	603 Call 0x3EB2AE0
	604 Move X8, 0x2308000
	605 Move X8, [X8+3104]
	606 Add X0, X31, 96
	607 Move X1, [X8]
	608 Call Enumerator<Object>.Dispose, X0
	609 Compare X20, 0
	610 JumpIfEqual {386}
	611 Move X0, X20
	612 Call 0x1C17F18
	613 Move X20, X31
	614 Move X23, X0
	615 Move X8, 0x2308000
	616 Move X8, [X8+3104]
	617 Move X1, [X8]
	618 Add X0, X31, 96
	619 Call Enumerator<Object>.Dispose, X0
	620 Compare X20, 0
	621 JumpIfEqual {674}
	622 Move X0, X20
	623 Call 0x1C17F18
	624 Move X23, X0
	625 NotImplemented "Instruction CMP not yet implemented."
	626 Move X0, X23
	627 Call 0x3EB2AD0
	628 Move X22, [X0]
	629 Call 0x3EB2AE0
	630 Move X8, 0x2309000
	631 Move X8, [X8+432]
	632 Add X0, X31, 128
	633 Move X1, [X8]
	634 Call Enumerator<UInt32>.Dispose, X0
	635 Compare X22, 0
	636 JumpIfEqual {305}
	637 Move X0, X22
	638 Call 0x1C17F18
	639 Move X22, X31
	640 Move X23, X0
	641 Move X8, 0x2309000
	642 Move X8, [X8+432]
	643 Move X1, [X8]
	644 Add X0, X31, 128
	645 Call Enumerator<UInt32>.Dispose, X0
	646 Compare X22, 0
	647 JumpIfEqual {674}
	648 Move X0, X22
	649 Call 0x1C17F18
	650 Move X23, X0
	651 NotImplemented "Instruction CMP not yet implemented."
	652 Move X0, X23
	653 Call 0x3EB2AD0
	654 Move X21, [X0]
	655 Call 0x3EB2AE0
	656 Move X8, 0x2309000
	657 Move X8, [X8+368]
	658 Add X0, X31, 224
	659 Move X1, [X8]
	660 Call 0x2C1DC18, X0
	661 Compare X21, 0
	662 JumpIfEqual {265}
	663 Move X0, X21
	664 Call 0x1C17F18
	665 Move X21, X31
	666 Move X23, X0
	667 Move X8, 0x2309000
	668 Move X8, [X8+368]
	669 Move X1, [X8]
	670 Add X0, X31, 224
	671 Call 0x2C1DC18, X0
	672 Compare X21, 0
	673 JumpIfNotEqual {676}
	674 Move X0, X23
	675 Call 0x1D2D690
	676 Move X0, X21
	677 Call 0x1C17F18
	678 Call 0x1991590

Method: System.Void SetChasingLoot(AnimalCompany.NetPlayer player)

Disassembly:
	0x01DF41DC LDR X0, [X0 + 0xA78]
	0x01DF41E0 BL 0x1C16CF4
	0x01DF41E4 MOVZ W8, 0x1
	0x01DF41E8 STRB W8, [X21 + 0xCEC]
	0x01DF41EC ADRP X21, 0x2305000
	0x01DF41F0 LDR X21, [X21 + 0x270]
	0x01DF41F4 MOV X0, X19
	0x01DF41F8 BL 0x1DEB39C
	0x01DF41FC MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call FakeGorillaController.SetChasing, X0, X1
	005 Move W1, 3
	006 Move X0, X19
	007 Call FakeGorillaController.set_phase, X0, X1
	008 Move [X19+241], W31
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

Method: System.Void SetChasingPlayer(AnimalCompany.NetPlayer player)

Disassembly:
	0x01DF0E28 BL 0x1C16F18
	0x01DF0E2C BL 0x1990590
	0x01DF0E30 SUB X31, X31, 0xD0
	0x01DF0E34 STP D13, D12, [X31 + 0x80]
	0x01DF0E38 STP D11, D10, [X31 + 0x90]
	0x01DF0E3C STP D9, D8, [X31 + 0xA0]
	0x01DF0E40 STP X30, X21, [X31 + 0xB0]
	0x01DF0E44 STP X20, X19, [X31 + 0xC0]
	0x01DF0E48 ADRP X21, 0x25E8000
	0x01DF0E4C ADRP X20, 0x2303000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call FakeGorillaController.SetChasing, X0, X1
	005 Move W1, 4
	006 Move X0, X19
	007 Call FakeGorillaController.set_phase, X0, X1
	008 Move W8, 1
	009 Move [X19+241], W8
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 

Method: System.Void SetChasing(AnimalCompany.NetPlayer player)

Disassembly:
	0x01DF4200 BL 0x1DEEAE0
	0x01DF4204 STR W0, [X19 + 0x1A4]
	0x01DF4208 MOV X0, X19
	0x01DF420C BL 0x1DEEBA0
	0x01DF4210 MOV X0, X19
	0x01DF4214 STR S0, [X19 + 0x1A8]
	0x01DF4218 STR S1, [X19 + 0x1AC]
	0x01DF421C STR S2, [X19 + 0x1B0]
	0x01DF4220 STR S3, [X19 + 0x1B4]
	0x01DF4224 BL 0x1DEEC68
	0x01DF4228 ADD X8, X31, 0x40
	0x01DF422C MOV X0, X19
	0x01DF4230 STR S0, [X19 + 0x1B8]
	0x01DF4234 STR S1, [X19 + 0x1BC]
	0x01DF4238 STR S2, [X19 + 0x1C0]
	0x01DF423C BL 0x1DEEE54
	0x01DF4240 LDP V0, V1, [X31 + 0x40]
	0x01DF4244 LDP V2, V3, [X31 + 0x60]
	0x01DF4248 LDR X0, [X20]
	0x01DF424C STP V0, V1, [X31]
	0x01DF4250 STP V2, V3, [X31 + 0x20]
	0x01DF4254 LDR W8, [X0 + 0xE0]
	0x01DF4258 CBNZ W8, 0x1DF4260
	0x01DF425C BL 0x1C16DFC
	0x01DF4260 LDR X2, [X21]
	0x01DF4264 LDP V0, V1, [X31]
	0x01DF4268 LDP V2, V3, [X31 + 0x20]
	0x01DF426C ADD X1, X19, 0x1C8
	0x01DF4270 ADD X0, X31, 0x40
	0x01DF4274 STP V0, V1, [X31 + 0x40]
	0x01DF4278 STP V2, V3, [X31 + 0x60]
	0x01DF427C BL 0x2228398
	0x01DF4280 LDP X20, X19, [X31 + 0x90]
	0x01DF4284 LDP X30, X21, [X31 + 0x80]
	0x01DF4288 ADD X31, X31, 0xA0
	0x01DF428C RET
	0x01DF4290 STR X30, [X31 - 0x20]!
	0x01DF4294 STP X20, X19, [X31 + 0x10]
	0x01DF4298 ADRP X19, 0x25E4000
	0x01DF429C ADRP X20, 0x2305000
	0x01DF42A0 LDRB W8, [X19 + 0xCED]
	0x01DF42A4 LDR X20, [X20 + 0x128]
	0x01DF42A8 TBNZ X8, 0x0, 0x1DF42C0
	0x01DF42AC ADRP X0, 0x2305000
	0x01DF42B0 LDR X0, [X0 + 0x128]
	0x01DF42B4 BL 0x1C16CF4
	0x01DF42B8 MOVZ W8, 0x1
	0x01DF42BC STRB W8, [X19 + 0xCED]
	0x01DF42C0 LDR X0, [X20]
	0x01DF42C4 BL 0x1C16F10
	0x01DF42C8 MOV X1, X31
	0x01DF42CC MOV X19, X0
	0x01DF42D0 BL 0x33BDD8C
	0x01DF42D4 LDR X8, [X20]
	0x01DF42D8 LDR X8, [X8 + 0xB8]
	0x01DF42DC STR X19, [X8]
	0x01DF42E0 LDP X20, X19, [X31 + 0x10]
	0x01DF42E4 LDR X30, [X31], #0x20
	0x01DF42E8 RET
	0x01DF42EC MOV X1, X31
	0x01DF42F0 B 0x33BDD8C
	0x01DF42F4 STR X30, [X31 - 0x10]!
	0x01DF42F8 CBZ X1, 0x1DF4318

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0]
	005 Move X19, X0
	006 Move X20, X1
	007 Move X9, [X8+952]
	008 Move X2, [X8+960]
	009 NotImplemented "Instruction BLR not yet implemented."
	010 Move X9, [X19+192]
	011 Compare X9, 0
	012 JumpIfEqual {75}
	013 Move X8, [X9+56]
	014 Compare X8, 0
	015 JumpIfEqual {75}
	016 Move W10, [X8+24]
	017 Compare W10, 0
	018 JumpIfEqual {76}
	019 Move X10, [X9+88]
	020 Compare X10, 0
	021 JumpIfEqual {75}
	022 Move W11, [X10+24]
	023 Compare W11, 0
	024 JumpIfEqual {76}
	025 Move X9, [X9+96]
	026 Compare X9, 0
	027 JumpIfEqual {75}
	028 Move W11, [X9+24]
	029 Compare W11, 0
	030 JumpIfEqual {76}
	031 Move X11, [X19]
	032 Move V0, [X8+32]
	033 Move V1, [X10+32]
	034 Move V2, [X9+32]
	035 Move X8, [X11+712]
	036 Move X2, [X11+720]
	037 Move W1, 1
	038 Move X0, X19
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Compare X20, 0
	041 JumpIfEqual {75}
	042 Move X0, X20
	043 Move X1, X31
	044 Call Component.get_transform, X0
	045 Compare X0, 0
	046 JumpIfEqual {75}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X0, X19
	050 Call MobController.set__targetPosition, X0, X1
	051 Move X8, [X19+192]
	052 Compare X8, 0
	053 JumpIfEqual {75}
	054 Move V0, [X8+40]
	055 Move X0, X19
	056 Call MobController.set__timerAttackInterval, X0, V0
	057 Move S0, W31
	058 Move X0, X19
	059 Call MobController.set__timerToChasing, X0, V0
	060 Move X0, X20
	061 Move X1, X31
	062 Call Component.get_transform, X0
	063 Compare X0, 0
	064 JumpIfEqual {75}
	065 Move X1, X31
	066 Call Transform.get_position, X0
	067 Move X0, X19
	068 Call FakeGorillaController.set_positionAngry, X0, X1
	069 Move W8, 1
	070 Move [X19+224], W8
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move X30, [X31+32]
	074 Return 
	075 Call 0x1C17F20
	076 Call 0x1C17F28

Method: System.Void UpdateChasing()

Disassembly:
	0x01DF42FC MOV X0, X1
	0x01DF4300 MOV X1, X31
	0x01DF4304 BL 0x1DAEC64
	0x01DF4308 ORN W8, W31, W0, 0x0
	0x01DF430C AND W0, W8, 0x1
	0x01DF4310 LDR X30, [X31], #0x10
	0x01DF4314 RET
	0x01DF4318 BL 0x1C16F20
	0x01DF431C STR X30, [X31 - 0x10]!
	0x01DF4320 LDR X0, [X0 + 0xB0]
	0x01DF4324 CBZ X0, 0x1DF4334
	0x01DF4328 MOV X1, X31
	0x01DF432C LDR X30, [X31], #0x10
	0x01DF4330 B 0x1E1E7F4
	0x01DF4334 BL 0x1C16F20
	0x01DF4338 STR X30, [X31 - 0x10]!
	0x01DF433C LDR X0, [X0 + 0xB0]
	0x01DF4340 CBZ X0, 0x1DF4350
	0x01DF4344 MOV X1, X31
	0x01DF4348 LDR X30, [X31], #0x10
	0x01DF434C B 0x1E1E824
	0x01DF4350 BL 0x1C16F20
	0x01DF4354 STR X30, [X31 - 0x10]!
	0x01DF4358 LDR X0, [X0 + 0xB0]
	0x01DF435C CBZ X0, 0x1DF436C
	0x01DF4360 MOV X1, X31
	0x01DF4364 LDR X30, [X31], #0x10
	0x01DF4368 B 0x1E1E8CC
	0x01DF436C BL 0x1C16F20
	0x01DF4370 STR X30, [X31 - 0x30]!
	0x01DF4374 STP X22, X21, [X31 + 0x10]
	0x01DF4378 STP X20, X19, [X31 + 0x20]
	0x01DF437C ADRP X22, 0x25E4000
	0x01DF4380 ADRP X21, 0x2305000
	0x01DF4384 LDRB W8, [X22 + 0xCF1]
	0x01DF4388 LDR X21, [X21 + 0x278]
	0x01DF438C MOV W20, W1
	0x01DF4390 MOV X19, X0
	0x01DF4394 TBNZ X8, 0x0, 0x1DF43AC
	0x01DF4398 ADRP X0, 0x2305000
	0x01DF439C LDR X0, [X0 + 0x278]
	0x01DF43A0 BL 0x1C16CF4
	0x01DF43A4 MOVZ W8, 0x1
	0x01DF43A8 STRB W8, [X22 + 0xCF1]
	0x01DF43AC LDR X0, [X21]
	0x01DF43B0 AND W21, W20, 0x1
	0x01DF43B4 BL 0x1C16F10
	0x01DF43B8 MOV X1, X31
	0x01DF43BC MOV X20, X0
	0x01DF43C0 BL 0x33BDD8C
	0x01DF43C4 STR W31, [X20 + 0x10]
	0x01DF43C8 STR X19, [X20 + 0x28]
	0x01DF43CC STRB W21, [X20 + 0x20]
	0x01DF43D0 MOV X0, X20
	0x01DF43D4 LDP X20, X19, [X31 + 0x20]
	0x01DF43D8 LDP X22, X21, [X31 + 0x10]
	0x01DF43DC LDR X30, [X31], #0x30
	0x01DF43E0 RET
	0x01DF43E4 STR X30, [X31 - 0x20]!
	0x01DF43E8 STP X20, X19, [X31 + 0x10]
	0x01DF43EC MOV W19, W1
	0x01DF43F0 MOV X1, X31
	0x01DF43F4 MOV X20, X0
	0x01DF43F8 BL 0x33BDD8C
	0x01DF43FC STR W19, [X20 + 0x10]
	0x01DF4400 LDP X20, X19, [X31 + 0x10]
	0x01DF4404 LDR X30, [X31], #0x20
	0x01DF4408 RET
	0x01DF440C STP X30, X21, [X31 - 0x20]!
	0x01DF4410 STP X20, X19, [X31 + 0x10]
	0x01DF4414 ADRP X20, 0x25E4000
	0x01DF4418 ADRP X21, 0x2304000
	0x01DF441C LDRB W8, [X20 + 0xCF2]
	0x01DF4420 LDR X21, [X21 + 0xC88]
	0x01DF4424 MOV X19, X0
	0x01DF4428 TBNZ X8, 0x0, 0x1DF4440
	0x01DF442C ADRP X0, 0x2304000
	0x01DF4430 LDR X0, [X0 + 0xC88]
	0x01DF4434 BL 0x1C16CF4
	0x01DF4438 MOVZ W8, 0x1
	0x01DF443C STRB W8, [X20 + 0xCF2]
	0x01DF4440 LDR X0, [X21]
	0x01DF4444 LDR W8, [X0 + 0xE0]
	0x01DF4448 CBNZ W8, 0x1DF4450
	0x01DF444C BL 0x1C16DFC
	0x01DF4450 ADRP X8, 0xFFFFFFFFFECFA000
	0x01DF4454 LDR V0, [X8 + 0x268]
	0x01DF4458 MOVZ W8, 0x1
	0x01DF445C MOVZ W9, 0x3F800000
	0x01DF4460 STR W31, [X19 + 0x50]
	0x01DF4464 STRB W8, [X19 + 0x54]
	0x01DF4468 STR D0, [X19 + 0x48]
	0x01DF446C STR W9, [X19 + 0x80]
	0x01DF4470 MOV X0, X19
	0x01DF4474 LDP X20, X19, [X31 + 0x10]
	0x01DF4478 MOV X1, X31
	0x01DF447C LDP X30, X21, [X31], #0x20
	0x01DF4480 B 0x3C36C30
	0x01DF4484 STP X30, X21, [X31 - 0x20]!
	0x01DF4488 STP X20, X19, [X31 + 0x10]
	0x01DF448C ADRP X20, 0x25E4000
	0x01DF4490 ADRP X21, 0x2303000
	0x01DF4494 ADRP X19, 0x2305000
	0x01DF4498 LDRB W8, [X20 + 0xCF3]
	0x01DF449C LDR X21, [X21 + 0x220]
	0x01DF44A0 LDR X19, [X19 + 0x110]
	0x01DF44A4 TBNZ X8, 0x0, 0x1DF44C8
	0x01DF44A8 ADRP X0, 0x2305000
	0x01DF44AC LDR X0, [X0 + 0x110]
	0x01DF44B0 BL 0x1C16CF4
	0x01DF44B4 ADRP X0, 0x2303000
	0x01DF44B8 LDR X0, [X0 + 0x220]
	0x01DF44BC BL 0x1C16CF4
	0x01DF44C0 MOVZ W8, 0x1
	0x01DF44C4 STRB W8, [X20 + 0xCF3]
	0x01DF44C8 LDR X0, [X21]
	0x01DF44CC MOV X1, X31
	0x01DF44D0 BL 0x3C124EC
	0x01DF44D4 LDR X8, [X19]
	0x01DF44D8 LDP X20, X19, [X31 + 0x10]
	0x01DF44DC LDR X8, [X8 + 0xB8]
	0x01DF44E0 STR W0, [X8]
	0x01DF44E4 LDP X30, X21, [X31], #0x20
	0x01DF44E8 RET
	0x01DF44EC RET
	0x01DF44F0 STR D10, [X31 - 0x30]!
	0x01DF44F4 STP D9, D8, [X31 + 0x8]
	0x01DF44F8 STR X30, [X31 + 0x18]
	0x01DF44FC STP X20, X19, [X31 + 0x20]
	0x01DF4500 LDR W8, [X0 + 0x10]
	0x01DF4504 LDR X20, [X0 + 0x28]
	0x01DF4508 MOV X19, X0
	0x01DF450C CMP W8, 0x1
	0x01DF4510 B.EQ 0x1DF455C
	0x01DF4514 CBNZ W8, 0x1DF4790
	0x01DF4518 MOVN W8, 0x0
	0x01DF451C STR W8, [X19 + 0x10]
	0x01DF4520 CBZ X20, 0x1DF47A8
	0x01DF4524 LDRB W8, [X19 + 0x20]
	0x01DF4528 CBZ W8, 0x1DF45FC
	0x01DF452C LDR X0, [X20 + 0xB0]
	0x01DF4530 CBZ X0, 0x1DF47A8
	0x01DF4534 MOV X1, X31
	0x01DF4538 BL 0x1E1E7F4
	0x01DF453C CBZ X0, 0x1DF47A8
	0x01DF4540 MOV W1, W31
	0x01DF4544 MOV X2, X31
	0x01DF4548 BL 0x3C13034
	0x01DF454C LDR X0, [X20 + 0xC8]
	0x01DF4550 CBZ X0, 0x1DF47A8
	0x01DF4554 MOVZ W1, 0x1
	0x01DF4558 B 0x1DF4608
	0x01DF455C LDR V8, [X19 + 0x44]
	0x01DF4560 FMOV S0, 1
	0x01DF4564 MOVN W8, 0x0
	0x01DF4568 STR W8, [X19 + 0x10]
	0x01DF456C FCMP S8, S0
	0x01DF4570 B.MI 0x1DF4680
	0x01DF4574 CBZ X20, 0x1DF47A8
	0x01DF4578 LDR X0, [X20 + 0xC8]
	0x01DF457C CBZ X0, 0x1DF47A8
	0x01DF4580 LDR V0, [X19 + 0x34]
	0x01DF4584 MOVZ W1, 0x1
	0x01DF4588 MOV X2, X31
	0x01DF458C BL 0x3C16F50
	0x01DF4590 LDR X0, [X20 + 0xB0]
	0x01DF4594 CBZ X0, 0x1DF47A8
	0x01DF4598 LDR V8, [X19 + 0x38]
	0x01DF459C MOV X1, X31
	0x01DF45A0 BL 0x1E1E824
	0x01DF45A4 CBZ X0, 0x1DF47A8
	0x01DF45A8 MOV V0.16B, V8.16B
	0x01DF45AC MOV V1.16B, V8.16B
	0x01DF45B0 MOV V2.16B, V8.16B
	0x01DF45B4 MOV X1, X31
	0x01DF45B8 BL 0x3C3FC4C
	0x01DF45BC LDR X0, [X20 + 0xB0]
	0x01DF45C0 CBZ X0, 0x1DF47A8
	0x01DF45C4 MOV X1, X31
	0x01DF45C8 BL 0x1E1E8CC
	0x01DF45CC CBZ X0, 0x1DF47A8
	0x01DF45D0 MOV V0.16B, V8.16B
	0x01DF45D4 MOV V1.16B, V8.16B
	0x01DF45D8 MOV V2.16B, V8.16B
	0x01DF45DC MOV X1, X31
	0x01DF45E0 BL 0x3C3FC4C
	0x01DF45E4 LDRB W8, [X19 + 0x20]
	0x01DF45E8 CBZ W8, 0x1DF475C
	0x01DF45EC LDR X0, [X20 + 0xD0]
	0x01DF45F0 CBZ X0, 0x1DF47A8
	0x01DF45F4 MOVZ W1, 0x1
	0x01DF45F8 B 0x1DF4788
	0x01DF45FC LDR X0, [X20 + 0xD0]
	0x01DF4600 CBZ X0, 0x1DF47A8
	0x01DF4604 MOV W1, W31
	0x01DF4608 MOV X2, X31
	0x01DF460C BL 0x3C13034
	0x01DF4610 LDRB W9, [X19 + 0x20]
	0x01DF4614 MOVZ W10, 0x42C80000
	0x01DF4618 FMOV S0, W31
	0x01DF461C FMOV S1, 1.5
	0x01DF4620 FMOV S2, 1
	0x01DF4624 FMOV S3, W10
	0x01DF4628 CMP W9, 0x0
	0x01DF462C MOVZ W8, 0x3F000000
	0x01DF4630 FCSEL S0, S0, S3, EQ
	0x01DF4634 FCSEL S1, S2, S1, EQ
	0x01DF4638 STR W8, [X19 + 0x30]
	0x01DF463C STP S0, S1, [X19 + 0x34]
	0x01DF4640 LDR X0, [X20 + 0xC8]
	0x01DF4644 CBZ X0, 0x1DF47A8
	0x01DF4648 MOVZ W1, 0x1
	0x01DF464C MOV X2, X31
	0x01DF4650 BL 0x3C16F0C
	0x01DF4654 STR S0, [X19 + 0x3C]
	0x01DF4658 LDR X0, [X20 + 0xB0]
	0x01DF465C CBZ X0, 0x1DF47A8
	0x01DF4660 MOV X1, X31
	0x01DF4664 BL 0x1E1E824
	0x01DF4668 CBZ X0, 0x1DF47A8
	0x01DF466C MOV X1, X31
	0x01DF4670 BL 0x3C3FBAC
	0x01DF4674 FMOV S8, W31
	0x01DF4678 STR S2, [X19 + 0x40]
	0x01DF467C STR W31, [X19 + 0x44]
	0x01DF4680 MOV X0, X31
	0x01DF4684 BL 0x3C3C714
	0x01DF4688 LDR V1, [X19 + 0x30]
	0x01DF468C FDIV S0, S0, S1
	0x01DF4690 FADD S0, S8, S0
	0x01DF4694 STR S0, [X19 + 0x44]
	0x01DF4698 CBZ X20, 0x1DF47A8
	0x01DF469C LDR X0, [X20 + 0xC8]
	0x01DF46A0 CBZ X0, 0x1DF47A8
	0x01DF46A4 LDR V1, [X19 + 0x3C]
	0x01DF46A8 LDR V2, [X19 + 0x34]
	0x01DF46AC FMOV S8, 1
	0x01DF46B0 FCMP S0, 0x0
	0x01DF46B4 FMOV S9, W31
	0x01DF46B8 FMIN S0, S0, S8
	0x01DF46BC FSUB S2, S2, S1
	0x01DF46C0 FCSEL S0, S0, S9, PL
	0x01DF46C4 FMUL S0, S0, S2
	0x01DF46C8 FADD S0, S1, S0
	0x01DF46CC MOVZ W1, 0x1
	0x01DF46D0 MOV X2, X31
	0x01DF46D4 BL 0x3C16F50
	0x01DF46D8 LDR V0, [X19 + 0x44]
	0x01DF46DC LDR X0, [X20 + 0xB0]
	0x01DF46E0 FMIN S1, S0, S8
	0x01DF46E4 FCMP S0, 0x0
	0x01DF46E8 FCSEL S8, S1, S9, PL
	0x01DF46EC CBZ X0, 0x1DF47A8
	0x01DF46F0 LDR V9, [X19 + 0x40]
	0x01DF46F4 LDR V10, [X19 + 0x38]
	0x01DF46F8 MOV X1, X31
	0x01DF46FC BL 0x1E1E824
	0x01DF4700 CBZ X0, 0x1DF47A8
	0x01DF4704 FSUB S0, S10, S9
	0x01DF4708 FMUL S0, S0, S8
	0x01DF470C FADD S8, S9, S0
	0x01DF4710 MOV V0.16B, V8.16B
	0x01DF4714 MOV V1.16B, V8.16B
	0x01DF4718 MOV V2.16B, V8.16B
	0x01DF471C MOV X1, X31
	0x01DF4720 BL 0x3C3FC4C
	0x01DF4724 LDR X0, [X20 + 0xB0]
	0x01DF4728 CBZ X0, 0x1DF47A8
	0x01DF472C MOV X1, X31
	0x01DF4730 BL 0x1E1E8CC

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], D13
	003 Move [X31+72], D12
	004 Move [X31+80], D11
	005 Move [X31+88], D10
	006 Move [X31+96], D9
	007 Move [X31+104], D8
	008 Move [X31+112], X30
	009 Move [X31+128], X22
	010 Move [X31+136], X21
	011 Move [X31+144], X20
	012 Move [X31+152], X19
	013 Move X20, 0x25E5000
	014 Move W8, [X20+3300]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {40}
	020 Move X0, 0x2305000
	021 Move X0, [X0+3104]
	022 Call 0x1C17CF4
	023 Move X0, 0x2305000
	024 Move X0, [X0+3112]
	025 Call 0x1C17CF4
	026 Move X0, 0x2305000
	027 Move X0, [X0+3120]
	028 Call 0x1C17CF4
	029 Move X0, 0x2305000
	030 Move X0, [X0+3128]
	031 Call 0x1C17CF4
	032 Move X0, 0x2305000
	033 Move X0, [X0+3136]
	034 Call 0x1C17CF4
	035 Move X0, 0x2300000
	036 Move X0, [X0+1432]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X20+3300], W8
	040 Move X0, X19
	041 Move [X31+32], X31
	042 Move [X31+40], X31
	043 Move [X31+48], X31
	044 Call MobController.UpdateChasing, X0
	045 Move X0, X19
	046 Call MobController.get__timerAttackInterval, X0
	047 Move X0, [X19+56]
	048 Compare X0, 0
	049 JumpIfEqual {271}
	050 Move X1, X31
	051 Move V8, V0
	052 Call NetworkRunner.get_DeltaTime, X0
	053 Add S0, S8, S0
	054 Move X0, X19
	055 Call MobController.set__timerAttackInterval, X0, V0
	056 Move X0, X19
	057 Call MobController.get__timerAttackInterval, X0
	058 Move X8, [X19+192]
	059 Compare X8, 0
	060 JumpIfEqual {271}
	061 Move V1, [X8+40]
	062 NotImplemented "Instruction FCMP not yet implemented."
	063 Move X0, [X19+208]
	064 Compare X0, 0
	065 JumpIfEqual {271}
	066 Move X1, X31
	067 Call Transform.get_position, X0
	068 Move X8, [X19+192]
	069 Compare X8, 0
	070 JumpIfEqual {271}
	071 Move X9, 0x2305000
	072 Move X9, [X9+3136]
	073 Move V11, [X8+76]
	074 Move V8, V0
	075 Move V9, V1
	076 Move X0, [X9]
	077 Move V10, V2
	078 Move W9, [X0+224]
	079 Compare W9, 0
	080 JumpIfNotEqual {82}
	081 Call 0x1C17DFC
	082 Move V0, V8
	083 Move V1, V9
	084 Move V2, V10
	085 Move V3, V11
	086 Call MobDetectionUtil.GetPlayersInRange, X0, X1, V0
	087 Compare X0, 0
	088 JumpIfEqual {271}
	089 Move X8, 0x2305000
	090 Move X8, [X8+3128]
	091 Move X1, [X8]
	092 Add X8, X31, 8
	093 Call List`1<Object>.GetEnumerator, X0
	094 NotImplemented "Instruction LDUR not yet implemented."
	095 Move X8, [X31+24]
	096 Move X22, 0x2305000
	097 Move [X31+2], V0
	098 Move [X31+48], X8
	099 Move X22, [X22+3112]
	100 Move X1, [X22]
	101 Add X0, X31, 32
	102 Call Enumerator<Object>.MoveNext, X0
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {150}
	107 Move X0, [X31+48]
	108 Compare X0, 0
	109 JumpIfEqual {267}
	110 Move X1, X31
	111 Call NetPlayer.get_isDie, X0
	112 Move TEMP, X0
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfEqual {100}
	116 Move S0, W31
	117 Move X0, X19
	118 Call MobController.set__timerAttackInterval, X0, V0
	119 Move X8, [X19+192]
	120 Compare X8, 0
	121 JumpIfEqual {269}
	122 Move X20, [X19+352]
	123 Move W21, [X8+36]
	124 Move X0, X19
	125 Move X1, X31
	126 Call Component.get_transform, X0
	127 Move X8, [X19+192]
	128 Compare X8, 0
	129 JumpIfEqual {270}
	130 Move X9, [X19+64]
	131 Move X2, X0
	132 Compare X9, 0
	133 JumpIfEqual {138}
	134 Move X9, [X9+32]
	135 Compare X9, 0
	136 JumpIfEqual {138}
	137 Move W6, [X9]
	138 Move X6, X31
	139 Compare X20, 0
	140 JumpIfEqual {268}
	141 Move W9, [X19+104]
	142 Move X4, [X8+184]
	143 Move X3, [X8+192]
	144 Move X5, [X8+24]
	145 NotImplemented "Instruction BFM not yet implemented."
	146 Move X0, X20
	147 Move W1, W21
	148 Move X7, X31
	149 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5, X6
	150 Move X8, 0x2305000
	151 Move X8, [X8+3104]
	152 Add X0, X31, 32
	153 Move X1, [X8]
	154 Call Enumerator<Object>.Dispose, X0
	155 Move X8, 0x2300000
	156 Move X8, [X8+1432]
	157 Move X20, [X19+352]
	158 Move X0, [X8]
	159 Move W8, [X0+224]
	160 Compare W8, 0
	161 JumpIfNotEqual {163}
	162 Call 0x1C17DFC
	163 Move X0, X20
	164 Move X1, X31
	165 Move X2, X31
	166 Call Object.op_Equality, X0, X1
	167 Move TEMP, X0
	168 And TEMP, TEMP, 1
	169 Compare TEMP, 1
	170 JumpIfNotEqual {247}
	171 Move X0, X19
	172 Call MobController.get__timerToChasing, X0
	173 Move X0, [X19+56]
	174 Compare X0, 0
	175 JumpIfEqual {271}
	176 Move X1, X31
	177 Move V8, V0
	178 Call NetworkRunner.get_DeltaTime, X0
	179 Add S0, S8, S0
	180 Move X0, X19
	181 Call MobController.set__timerToChasing, X0, V0
	182 Move X0, X19
	183 Call MobController.get__timerToChasing, X0
	184 Move X8, [X19+192]
	185 Compare X8, 0
	186 JumpIfEqual {271}
	187 Move V1, [X8+104]
	188 NotImplemented "Instruction FCMP not yet implemented."
	189 Move X0, [X19+208]
	190 Compare X0, 0
	191 JumpIfEqual {271}
	192 Move X1, X31
	193 Call Transform.get_position, X0
	194 Move X0, X19
	195 Move V8, V0
	196 Move V9, V1
	197 Move V10, V2
	198 Call MobController.get__targetPosition, X0
	199 Move X20, 0x25E5000
	200 Move W8, [X20+2140]
	201 Move V11, V0
	202 Move V12, V1
	203 Move V13, V2
	204 Compare W8, 0
	205 JumpIfNotEqual {211}
	206 Move X0, 0x2300000
	207 Move X0, [X0+1448]
	208 Call 0x1C17CF4
	209 Move W8, 1
	210 Move [X20+2140], W8
	211 Move X8, 0x2300000
	212 Move X8, [X8+1448]
	213 Move X0, [X8]
	214 Move W8, [X0+224]
	215 Compare W8, 0
	216 JumpIfNotEqual {218}
	217 Call 0x1C17DFC
	218 Move X8, [X19+192]
	219 Compare X8, 0
	220 JumpIfEqual {271}
	221 Move X8, [X8+88]
	222 Compare X8, 0
	223 JumpIfEqual {271}
	224 Move W9, [X8+24]
	225 Compare W9, 0
	226 JumpIfEqual {272}
	227 Subtract S0, S8, S11
	228 Subtract S1, S9, S12
	229 Subtract S2, S10, S13
	230 Move V3, [X8+32]
	231 Multiply S0, S0, S0
	232 Multiply S1, S1, S1
	233 Add S0, S0, S1
	234 Multiply S1, S2, S2
	235 Add S0, S1, S0
	236 NotImplemented "Instruction FSQRT not yet implemented."
	237 NotImplemented "Instruction FCMP not yet implemented."
	238 Move X0, X19
	239 Call MobController.get__timerToChasing, X0
	240 Move X8, [X19+192]
	241 Compare X8, 0
	242 JumpIfEqual {271}
	243 Move V1, [X8+108]
	244 NotImplemented "Instruction FCMP not yet implemented."
	245 Move X0, X19
	246 Call FakeGorillaController.SetSearching, X0
	247 Move X0, X19
	248 Call MobController.get__targetPosition, X0
	249 Move S3, 4
	250 Move X0, X19
	251 Call FakeGorillaController.UpdateGorillaMoveToTarget, X0, X1, V0
	252 Move X0, X19
	253 Call FakeGorillaController.SetRoaming, X0
	254 Move X20, [X31+144]
	255 Move X19, [X31+152]
	256 Move X22, [X31+128]
	257 Move X21, [X31+136]
	258 Move X30, [X31+112]
	259 Move D9, [X31+96]
	260 Move D8, [X31+104]
	261 Move D11, [X31+80]
	262 Move D10, [X31+88]
	263 Move D13, [X31+64]
	264 Move D12, [X31+72]
	265 Add X31, X31, 160
	266 Return 
	267 Call 0x1C17F20
	268 Call 0x1C17F20
	269 Call 0x1C17F20
	270 Call 0x1C17F20
	271 Call 0x1C17F20
	272 Call 0x1C17F28
	273 Move X20, X0
	274 NotImplemented "Instruction CMP not yet implemented."
	275 Move X0, X20
	276 Call 0x3EB2AD0
	277 Move X21, [X0]
	278 Call 0x3EB2AE0
	279 Move X8, 0x2305000
	280 Move X8, [X8+3104]
	281 Add X0, X31, 32
	282 Move X1, [X8]
	283 Call Enumerator<Object>.Dispose, X0
	284 Compare X21, 0
	285 JumpIfEqual {155}
	286 Move X0, X21
	287 Call 0x1C17F18
	288 Move X21, X31
	289 Move X20, X0
	290 Move X8, 0x2305000
	291 Move X8, [X8+3104]
	292 Move X1, [X8]
	293 Add X0, X31, 32
	294 Call Enumerator<Object>.Dispose, X0
	295 Compare X21, 0
	296 JumpIfNotEqual {299}
	297 Move X0, X20
	298 Call 0x1D2D690
	299 Move X0, X21
	300 Call 0x1C17F18
	301 Call 0x1991590

Method: System.Void UpdateChasingLoot()

Disassembly:
	0x01DF1E30 STRB W8, [X20 + 0xCDE]
	0x01DF1E34 MOVI V0.2D, 0x0
	0x01DF1E38 STUR V0, [X31 + 0x2C]
	0x01DF1E3C STP V0, V0, [X31 + 0x10]
	0x01DF1E40 LDR X0, [X19 + 0x1F0]
	0x01DF1E44 CBZ X0, 0x1DF23E0
	0x01DF1E48 ADRP X23, 0x2302000
	0x01DF1E4C ADRP X21, 0x2302000
	0x01DF1E50 LDR X23, [X23 + 0x5D8]
	0x01DF1E54 LDR X21, [X21 + 0x5F8]
	0x01DF1E58 MOV X1, X31
	0x01DF1E5C BL 0x3C3F58C
	0x01DF1E60 LDR X0, [X23]
	0x01DF1E64 MOV V11.16B, V0.16B
	0x01DF1E68 MOV V12.16B, V1.16B
	0x01DF1E6C MOV V13.16B, V2.16B
	0x01DF1E70 LDR W8, [X0 + 0xE0]
	0x01DF1E74 CBNZ W8, 0x1DF1E80
	0x01DF1E78 BL 0x1C16DFC
	0x01DF1E7C LDR X0, [X23]
	0x01DF1E80 LDR X8, [X0 + 0xB8]
	0x01DF1E84 MOV X1, X31
	0x01DF1E88 LDR W0, [X8]
	0x01DF1E8C BL 0x3C35CB8
	0x01DF1E90 LDR X8, [X21]
	0x01DF1E94 MOV W20, W0
	0x01DF1E98 LDR W9, [X8 + 0xE0]
	0x01DF1E9C CBNZ W9, 0x1DF1EA8
	0x01DF1EA0 MOV X0, X8
	0x01DF1EA4 BL 0x1C16DFC
	0x01DF1EA8 ADD X0, X31, 0x10
	0x01DF1EAC MOV V0.16B, V11.16B
	0x01DF1EB0 MOV V1.16B, V12.16B
	0x01DF1EB4 MOV V2.16B, V13.16B
	0x01DF1EB8 MOV V3.16B, V10.16B
	0x01DF1EBC MOV V4.16B, V9.16B
	0x01DF1EC0 MOV V5.16B, V8.16B
	0x01DF1EC4 MOV W1, W20
	0x01DF1EC8 MOV X2, X31
	0x01DF1ECC BL 0x3C8BA00
	0x01DF1ED0 EOR W22, W0, 0x1
	0x01DF1ED4 TBNZ X22, 0x0, 0x1DF2040
	0x01DF1ED8 ADRP X8, 0xFFFFFFFFFECF9000
	0x01DF1EDC LDR V14, [X8 + 0x44C]
	0x01DF1EE0 ADRP X25, 0xFFFFFFFFFED3C000
	0x01DF1EE4 MOV W24, W31
	0x01DF1EE8 ADD X25, X25, 0x971
	0x01DF1EEC CMP W24, 0x4
	0x01DF1EF0 MOV V13.16B, V8.16B
	0x01DF1EF4 MOV V12.16B, V9.16B
	0x01DF1EF8 MOV V11.16B, V10.16B
	0x01DF1EFC B.HI 0x1DF1FC8
	0x01DF1F00 MOV W8, W24
	0x01DF1F04 ADR X9, 0x10
	0x01DF1F08 LDRB W10, [X25, X8, LSL]
	0x01DF1F0C ADD X9, X9, X10, 0x2, LSL
	0x01DF1F10 BR X9
	0x01DF1F14 LDR X0, [X19 + 0x1F0]
	0x01DF1F18 CBZ X0, 0x1DF23E0
	0x01DF1F1C MOV X1, X31
	0x01DF1F20 BL 0x3C3F988
	0x01DF1F24 FADD S11, S10, S0
	0x01DF1F28 FADD S12, S9, S1
	0x01DF1F2C FADD S13, S8, S2
	0x01DF1F30 B 0x1DF1FC8
	0x01DF1F34 LDR X0, [X19 + 0x1F0]
	0x01DF1F38 CBZ X0, 0x1DF23E0
	0x01DF1F3C MOV X1, X31
	0x01DF1F40 BL 0x3C3F90C
	0x01DF1F44 B 0x1DF1F6C
	0x01DF1F48 LDR X0, [X19 + 0x1F0]
	0x01DF1F4C CBZ X0, 0x1DF23E0
	0x01DF1F50 MOV X1, X31
	0x01DF1F54 BL 0x3C3F90C
	0x01DF1F58 B 0x1DF1F94
	0x01DF1F5C LDR X0, [X19 + 0x1F0]
	0x01DF1F60 CBZ X0, 0x1DF23E0
	0x01DF1F64 MOV X1, X31
	0x01DF1F68 BL 0x3C3FA04
	0x01DF1F6C LDR X0, [X19 + 0x1F0]
	0x01DF1F70 CBZ X0, 0x1DF23E0
	0x01DF1F74 FADD S13, S8, S2
	0x01DF1F78 FADD S12, S9, S1
	0x01DF1F7C FADD S11, S10, S0
	0x01DF1F80 B 0x1DF1FA8
	0x01DF1F84 LDR X0, [X19 + 0x1F0]
	0x01DF1F88 CBZ X0, 0x1DF23E0
	0x01DF1F8C MOV X1, X31
	0x01DF1F90 BL 0x3C3FA04
	0x01DF1F94 LDR X0, [X19 + 0x1F0]
	0x01DF1F98 CBZ X0, 0x1DF23E0
	0x01DF1F9C FSUB S13, S8, S2
	0x01DF1FA0 FSUB S12, S9, S1
	0x01DF1FA4 FSUB S11, S10, S0
	0x01DF1FA8 MOV X1, X31
	0x01DF1FAC BL 0x3C3F988
	0x01DF1FB0 FMUL S0, S0, S14
	0x01DF1FB4 FMUL S1, S1, S14
	0x01DF1FB8 FMUL S2, S2, S14
	0x01DF1FBC FADD S11, S11, S0
	0x01DF1FC0 FADD S12, S12, S1
	0x01DF1FC4 FADD S13, S13, S2
	0x01DF1FC8 LDR X0, [X23]
	0x01DF1FCC LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+128], D13
	003 Move [X31+136], D12
	004 Move [X31+144], D11
	005 Move [X31+152], D10
	006 Move [X31+160], D9
	007 Move [X31+168], D8
	008 Move [X31+176], X30
	009 Move [X31+184], X21
	010 Move [X31+192], X20
	011 Move [X31+200], X19
	012 Move X21, 0x25E8000
	013 Move X20, 0x2303000
	014 Move W8, [X21+3301]
	015 Move X20, [X20+1432]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {32}
	021 Move X0, 0x2308000
	022 Move X0, [X0+3136]
	023 Call 0x1C17CF4
	024 Move X0, 0x2309000
	025 Move X0, [X0+520]
	026 Call 0x1C17CF4
	027 Move X0, 0x2303000
	028 Move X0, [X0+1432]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+3301], W8
	032 Move X0, [X20]
	033 NotImplemented "Instruction MOVI not yet implemented."
	034 Move [X31+96], V0
	035 Move [X31+104], V0
	036 Move [X31+64], V0
	037 Move [X31+72], V0
	038 Move W8, [X0+224]
	039 Move X20, [X19+352]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Inequality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {123}
	051 Move X0, [X19+352]
	052 Compare X0, 0
	053 JumpIfEqual {140}
	054 Move X1, X31
	055 Call NetPlayer.get_isDie, X0
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {78}
	060 Add X8, X31, 0
	061 Move X0, X19
	062 Call FakeGorillaController.get__angerMetersByPlayerId, X0
	063 Move X8, 0x2309000
	064 Move V0, [X31]
	065 Move V1, [X31+16]
	066 Move V2, [X31+32]
	067 Move V3, [X31+48]
	068 Move X8, [X8+520]
	069 Add X0, X31, 64
	070 Move [X31+64], V0
	071 Move [X31+72], V1
	072 Move [X31+96], V2
	073 Move [X31+104], V3
	074 Move X1, [X8]
	075 Call 0x2416A70, X0
	076 Move X0, X19
	077 Call FakeGorillaController.SetRoaming, X0
	078 Move X1, [X19+352]
	079 Move X0, X19
	080 Call FakeGorillaController.IsPlayerHoldingLoot, X0, X1
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfEqual {123}
	085 Move X0, [X19+208]
	086 Compare X0, 0
	087 JumpIfEqual {140}
	088 Move X1, X31
	089 Call Transform.get_position, X0
	090 Move X0, [X19+352]
	091 Compare X0, 0
	092 JumpIfEqual {140}
	093 Move X1, X31
	094 Move V8, V0
	095 Move V9, V1
	096 Move V10, V2
	097 Call Component.get_transform, X0
	098 Compare X0, 0
	099 JumpIfEqual {140}
	100 Move X1, X31
	101 Call Transform.get_position, X0
	102 Move X8, 0x2308000
	103 Move X8, [X8+3136]
	104 Move V11, V0
	105 Move V12, V1
	106 Move V13, V2
	107 Move X0, [X8]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move V0, V8
	113 Move V1, V9
	114 Move V2, V10
	115 Move V3, V11
	116 Move V4, V12
	117 Move V5, V13
	118 Call MobDetectionUtil.IsTargetInLineOfSight, X0, X1
	119 Move TEMP, X0
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfEqual {60}
	123 Move X8, [X19]
	124 Move X0, X19
	125 Move X9, [X8+968]
	126 Move X1, [X8+976]
	127 NotImplemented "Instruction BLR not yet implemented."
	128 Move X20, [X31+192]
	129 Move X19, [X31+200]
	130 Move X30, [X31+176]
	131 Move X21, [X31+184]
	132 Move D9, [X31+160]
	133 Move D8, [X31+168]
	134 Move D11, [X31+144]
	135 Move D10, [X31+152]
	136 Move D13, [X31+128]
	137 Move D12, [X31+136]
	138 Add X31, X31, 208
	139 Return 
	140 Call 0x1C17F20

Method: System.Void UpdateChasingPlayer()

Disassembly:
	0x01DF1FD0 CBNZ W8, 0x1DF1FDC
	0x01DF1FD4 BL 0x1C16DFC
	0x01DF1FD8 LDR X0, [X23]
	0x01DF1FDC LDR X8, [X0 + 0xB8]
	0x01DF1FE0 MOV X1, X31
	0x01DF1FE4 LDR W0, [X8]
	0x01DF1FE8 BL 0x3C35CB8
	0x01DF1FEC LDR X8, [X21]
	0x01DF1FF0 MOV W20, W0
	0x01DF1FF4 LDR W9, [X8 + 0xE0]
	0x01DF1FF8 CBNZ W9, 0x1DF2004
	0x01DF1FFC MOV X0, X8
	0x01DF2000 BL 0x1C16DFC
	0x01DF2004 ADD X0, X31, 0x10
	0x01DF2008 MOV V0.16B, V11.16B
	0x01DF200C MOV V1.16B, V12.16B
	0x01DF2010 MOV V2.16B, V13.16B
	0x01DF2014 MOV V3.16B, V10.16B
	0x01DF2018 MOV V4.16B, V9.16B
	0x01DF201C MOV V5.16B, V8.16B
	0x01DF2020 MOV W1, W20
	0x01DF2024 MOV X2, X31
	0x01DF2028 BL 0x3C8BA00
	0x01DF202C TBNZ X0, 0x0, 0x1DF2048
	0x01DF2030 ADD W24, W24, 0x1
	0x01DF2034 CMP W24, 0x5
	0x01DF2038 B.NE 0x1DF1EEC
	0x01DF203C B 0x1DF2058
	0x01DF2040 MOVZ W22, 0x1
	0x01DF2044 B 0x1DF2058
	0x01DF2048 MOVZ W22, 0x1
	0x01DF204C MOV V10.16B, V11.16B
	0x01DF2050 MOV V9.16B, V12.16B
	0x01DF2054 MOV V8.16B, V13.16B
	0x01DF2058 ADRP X20, 0x25E6000
	0x01DF205C LDRB W8, [X20 + 0x783]
	0x01DF2060 CBNZ W8, 0x1DF2078
	0x01DF2064 ADRP X0, 0x2301000
	0x01DF2068 LDR X0, [X0 + 0x5A0]
	0x01DF206C BL 0x1C16CF4
	0x01DF2070 MOVZ W8, 0x1
	0x01DF2074 STRB W8, [X20 + 0x783]
	0x01DF2078 LDR X0, [X19 + 0x1F0]
	0x01DF207C CBZ X0, 0x1DF23E0
	0x01DF2080 MOV X1, X31
	0x01DF2084 BL 0x3C3F58C
	0x01DF2088 ADRP X24, 0x25E6000
	0x01DF208C LDRB W8, [X24 + 0x785]
	0x01DF2090 MOV V11.16B, V0.16B
	0x01DF2094 MOV V12.16B, V1.16B
	0x01DF2098 MOV V13.16B, V2.16B
	0x01DF209C CBNZ W8, 0x1DF20B4
	0x01DF20A0 ADRP X0, 0x2301000
	0x01DF20A4 LDR X0, [X0 + 0x5A8]
	0x01DF20A8 BL 0x1C16CF4
	0x01DF20AC MOVZ W8, 0x1
	0x01DF20B0 STRB W8, [X24 + 0x785]
	0x01DF20B4 ADRP X8, 0x2301000
	0x01DF20B8 LDR X8, [X8 + 0x5A8]
	0x01DF20BC FSUB S10, S10, S11
	0x01DF20C0 FSUB S14, S9, S12
	0x01DF20C4 FSUB S8, S8, S13
	0x01DF20C8 LDR X0, [X8]
	0x01DF20CC LDR W8, [X0 + 0xE0]
	0x01DF20D0 CBNZ W8, 0x1DF20D8
	0x01DF20D4 BL 0x1C16DFC
	0x01DF20D8 FMUL S0, S10, S10
	0x01DF20DC FMUL S1, S14, S14
	0x01DF20E0 ADRP X8, 0xFFFFFFFFFECF8000
	0x01DF20E4 FADD S0, S0, S1
	0x01DF20E8 LDR V1, [X8 + 0x17C]
	0x01DF20EC ADRP X24, 0x2301000
	0x01DF20F0 FMUL S2, S8, S8
	0x01DF20F4 LDR X24, [X24 + 0x5A0]
	0x01DF20F8 FADD S0, S2, S0
	0x01DF20FC FSQRT S0, S0
	0x01DF2100 FCMP S0, S1
	0x01DF2104 B.LE 0x1DF2114
	0x01DF2108 FDIV S9, S10, S0
	0x01DF210C FDIV S8, S8, S0
	0x01DF2110 B 0x1DF2140
	0x01DF2114 LDRB W8, [X20 + 0x783]
	0x01DF2118 CBNZ W8, 0x1DF2130
	0x01DF211C ADRP X0, 0x2301000
	0x01DF2120 LDR X0, [X0 + 0x5A0]

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+128], D13
	003 Move [X31+136], D12
	004 Move [X31+144], D11
	005 Move [X31+152], D10
	006 Move [X31+160], D9
	007 Move [X31+168], D8
	008 Move [X31+176], X30
	009 Move [X31+192], X20
	010 Move [X31+200], X19
	011 Move X20, 0x25E8000
	012 Move W8, [X20+3302]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x2309000
	019 Move X0, [X0+520]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3302], W8
	023 NotImplemented "Instruction MOVI not yet implemented."
	024 Move [X31+96], V0
	025 Move [X31+104], V0
	026 Move [X31+64], V0
	027 Move [X31+72], V0
	028 Move X8, [X19]
	029 Move X0, X19
	030 Move X9, [X8+968]
	031 Move X1, [X8+976]
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X0, X19
	034 Call FakeGorillaController.get_positionAngry, X0
	035 Move X0, X19
	036 Move X1, X31
	037 Move V8, V0
	038 Move V9, V1
	039 Move V10, V2
	040 Call Component.get_transform, X0
	041 Compare X0, 0
	042 JumpIfEqual {104}
	043 Move X1, X31
	044 Call Transform.get_position, X0
	045 Move X20, 0x25E7000
	046 Move W8, [X20+2140]
	047 Move V11, V0
	048 Move V12, V1
	049 Move V13, V2
	050 Compare W8, 0
	051 JumpIfNotEqual {57}
	052 Move X0, 0x2302000
	053 Move X0, [X0+1448]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X20+2140], W8
	057 Move X8, 0x2302000
	058 Move X8, [X8+1448]
	059 Subtract S11, S8, S11
	060 Subtract S9, S9, S12
	061 Subtract S8, S10, S13
	062 Move X0, [X8]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Multiply S0, S11, S11
	068 Multiply S1, S9, S9
	069 Multiply S2, S8, S8
	070 Add S0, S0, S1
	071 Add S0, S2, S0
	072 NotImplemented "Instruction FSQRT not yet implemented."
	073 Move S1, 30
	074 NotImplemented "Instruction FCMP not yet implemented."
	075 Add X8, X31, 0
	076 Move X0, X19
	077 Call FakeGorillaController.get__angerMetersByPlayerId, X0
	078 Move X8, 0x2308000
	079 Move V0, [X31]
	080 Move V1, [X31+16]
	081 Move V2, [X31+32]
	082 Move V3, [X31+48]
	083 Move X8, [X8+520]
	084 Add X0, X31, 64
	085 Move [X31+64], V0
	086 Move [X31+72], V1
	087 Move [X31+96], V2
	088 Move [X31+104], V3
	089 Move X1, [X8]
	090 Call 0x2416A70, X0
	091 Move X0, X19
	092 Call FakeGorillaController.SetRoaming, X0
	093 Move X20, [X31+192]
	094 Move X19, [X31+200]
	095 Move X30, [X31+176]
	096 Move D9, [X31+160]
	097 Move D8, [X31+168]
	098 Move D11, [X31+144]
	099 Move D10, [X31+152]
	100 Move D13, [X31+128]
	101 Move D12, [X31+136]
	102 Add X31, X31, 208
	103 Return 
	104 Call 0x1C17F20

Method: System.Void SetSearching()

Disassembly:
	0x01DF4734 CBZ X0, 0x1DF47A8
	0x01DF4738 MOV V0.16B, V8.16B
	0x01DF473C MOV V1.16B, V8.16B
	0x01DF4740 MOV V2.16B, V8.16B
	0x01DF4744 MOV X1, X31
	0x01DF4748 BL 0x3C3FC4C
	0x01DF474C MOVZ W0, 0x1
	0x01DF4750 STR X31, [X19 + 0x18]
	0x01DF4754 STR W0, [X19 + 0x10]
	0x01DF4758 B 0x1DF4794
	0x01DF475C LDR X0, [X20 + 0xB0]
	0x01DF4760 CBZ X0, 0x1DF47A8
	0x01DF4764 MOV X1, X31
	0x01DF4768 BL 0x1E1E7F4
	0x01DF476C CBZ X0, 0x1DF47A8
	0x01DF4770 MOVZ W1, 0x1
	0x01DF4774 MOV X2, X31
	0x01DF4778 BL 0x3C13034
	0x01DF477C LDR X0, [X20 + 0xC8]
	0x01DF4780 CBZ X0, 0x1DF47A8
	0x01DF4784 MOV W1, W31
	0x01DF4788 MOV X2, X31
	0x01DF478C BL 0x3C13034
	0x01DF4790 MOV W0, W31
	0x01DF4794 LDP X20, X19, [X31 + 0x20]
	0x01DF4798 LDR X30, [X31 + 0x18]
	0x01DF479C LDP D9, D8, [X31 + 0x8]
	0x01DF47A0 LDR V10, [X31], #0x30
	0x01DF47A4 RET
	0x01DF47A8 BL 0x1C16F20
	0x01DF47AC LDR X0, [X0 + 0x18]
	0x01DF47B0 RET
	0x01DF47B4 STP X30, X19, [X31 - 0x10]!
	0x01DF47B8 ADRP X0, 0x22FF000
	0x01DF47BC LDR X0, [X0 + 0xB40]
	0x01DF47C0 BL 0x1C16D08
	0x01DF47C4 BL 0x1C16F10
	0x01DF47C8 MOV X1, X31
	0x01DF47CC MOV X19, X0
	0x01DF47D0 BL 0x3380310
	0x01DF47D4 ADRP X0, 0x2305000
	0x01DF47D8 LDR X0, [X0 + 0x280]
	0x01DF47DC BL 0x1C16D08
	0x01DF47E0 MOV X1, X0
	0x01DF47E4 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W1, 5
	005 Move X19, X0
	006 Call FakeGorillaController.set_phase, X0, X1
	007 Move S0, W31
	008 Move X0, X19
	009 Call MobController.set__timerToSearching, X0, V0
	010 Move X9, [X19+192]
	011 Compare X9, 0
	012 JumpIfEqual {53}
	013 Move X8, [X9+56]
	014 Compare X8, 0
	015 JumpIfEqual {53}
	016 Move W10, [X8+24]
	017 Compare W10, 0
	018 JumpIfEqual {54}
	019 Move X10, [X9+88]
	020 Compare X10, 0
	021 JumpIfEqual {53}
	022 Move W11, [X10+24]
	023 Compare W11, 0
	024 JumpIfEqual {54}
	025 Move X9, [X9+96]
	026 Compare X9, 0
	027 JumpIfEqual {53}
	028 Move W11, [X9+24]
	029 Compare W11, 0
	030 JumpIfEqual {54}
	031 Move X11, [X19]
	032 Move V0, [X8+32]
	033 Move V1, [X10+32]
	034 Move V2, [X9+32]
	035 Move X8, [X11+712]
	036 Move X2, [X11+720]
	037 Move W1, 1
	038 Move X0, X19
	039 Move W20, 1
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X0, X19
	042 Call MobController.get__targetPosition, X0
	043 Move X8, [X19]
	044 Move X0, X19
	045 Move X9, [X8+888]
	046 Move X1, [X8+896]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move [X19+224], W20
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Return 
	053 Call 0x1C17F20
	054 Call 0x1C17F28

Method: System.Void UpdateSearching()

Disassembly:
	0x01DF2124 BL 0x1C16CF4
	0x01DF2128 MOVZ W8, 0x1
	0x01DF212C STRB W8, [X20 + 0x783]
	0x01DF2130 LDR X8, [X24]
	0x01DF2134 LDR X8, [X8 + 0xB8]
	0x01DF2138 LDR V9, [X8]
	0x01DF213C LDR V8, [X8 + 0x8]
	0x01DF2140 ADRP X20, 0x25E6000
	0x01DF2144 LDRB W8, [X20 + 0x786]
	0x01DF2148 CBNZ W8, 0x1DF2160
	0x01DF214C ADRP X0, 0x2301000
	0x01DF2150 LDR X0, [X0 + 0x5A0]
	0x01DF2154 BL 0x1C16CF4
	0x01DF2158 MOVZ W8, 0x1
	0x01DF215C STRB W8, [X20 + 0x786]
	0x01DF2160 MOV X0, X19
	0x01DF2164 MOV X1, X31
	0x01DF2168 BL 0x3C32E90
	0x01DF216C CBZ X0, 0x1DF23E0
	0x01DF2170 MOV X1, X31
	0x01DF2174 STR S8, [X31 + 0x4]
	0x01DF2178 BL 0x3C3F58C
	0x01DF217C ADRP X20, 0x25E6000
	0x01DF2180 LDRB W8, [X20 + 0xABD]
	0x01DF2184 MOV V15.16B, V1.16B
	0x01DF2188 MOV V10.16B, V2.16B
	0x01DF218C STR S0, [X31 + 0xC]
	0x01DF2190 CBNZ W8, 0x1DF21A8
	0x01DF2194 ADRP X0, 0x2301000
	0x01DF2198 LDR X0, [X0 + 0x5A0]
	0x01DF219C BL 0x1C16CF4
	0x01DF21A0 MOVZ W8, 0x1
	0x01DF21A4 STRB W8, [X20 + 0xABD]
	0x01DF21A8 LDR X8, [X24]
	0x01DF21AC LDR X0, [X23]
	0x01DF21B0 FMOV S8, 1
	0x01DF21B4 LDR X8, [X8 + 0xB8]
	0x01DF21B8 LDR W9, [X0 + 0xE0]
	0x01DF21BC LDP S13, S11, [X8 + 0x24]
	0x01DF21C0 LDR V12, [X8 + 0x2C]
	0x01DF21C4 CBNZ W9, 0x1DF21D0
	0x01DF21C8 BL 0x1C16DFC
	0x01DF21CC LDR X0, [X23]
	0x01DF21D0 LDR X8, [X0 + 0xB8]
	0x01DF21D4 MOV X1, X31
	0x01DF21D8 STR S9, [X31 + 0x8]
	0x01DF21DC FADD S8, S14, S8
	0x01DF21E0 LDR W0, [X8]
	0x01DF21E4 BL 0x3C35CB8
	0x01DF21E8 LDR X8, [X21]
	0x01DF21EC MOV W20, W0
	0x01DF21F0 LDR W9, [X8 + 0xE0]
	0x01DF21F4 CBNZ W9, 0x1DF2200
	0x01DF21F8 MOV X0, X8
	0x01DF21FC BL 0x1C16DFC
	0x01DF2200 LDR V0, [X31 + 0xC]
	0x01DF2204 FCMP S14, 0x0
	0x01DF2208 ADD X0, X31, 0x10
	0x01DF220C FMOV S6, 6
	0x01DF2210 MOV V1.16B, V15.16B
	0x01DF2214 MOV V2.16B, V10.16B
	0x01DF2218 MOV V3.16B, V13.16B
	0x01DF221C MOV V4.16B, V11.16B
	0x01DF2220 MOV V5.16B, V12.16B
	0x01DF2224 MOV W1, W20
	0x01DF2228 MOV X2, X31
	0x01DF222C FABS S9, S14
	0x01DF2230 CSET W23, GT
	0x01DF2234 BL 0x3C8B18C
	0x01DF2238 EOR W8, W0, 0x1
	0x01DF223C LDR X0, [X21]
	0x01DF2240 FMOV S11, 3
	0x01DF2244 FADD S0, S8, S11
	0x01DF2248 ANDS W31, W23, W8, 0x0
	0x01DF224C LDR W8, [X0 + 0xE0]
	0x01DF2250 FCSEL S0, S0, S8, NE
	0x01DF2254 FMIN S1, S0, S11
	0x01DF2258 FCMP S0, 0x0
	0x01DF225C FMOV S12, W31
	0x01DF2260 FCSEL S0, S1, S12, PL
	0x01DF2264 STR S0, [X31 + 0xC]
	0x01DF2268 CBNZ W8, 0x1DF2270
	0x01DF226C BL 0x1C16DFC
	0x01DF2270 MOV X0, X31
	0x01DF2274 BL 0x3C8A660
	0x01DF2278 MOV X0, X19
	0x01DF227C MOV V8.16B, V1.16B
	0x01DF2280 BL 0x1DF26A8
	0x01DF2284 ADRP X8, 0xFFFFFFFFFECF8000
	0x01DF2288 MOV V10.16B, V0.16B
	0x01DF228C LDR V0, [X8 + 0x90]
	0x01DF2290 FCMP S14, S11
	0x01DF2294 FMOV S1, 1
	0x01DF2298 FCSEL S2, S11, S1, GT
	0x01DF229C ANDS W31, W22, 0x1
	0x01DF22A0 FCSEL S0, S1, S0, NE
	0x01DF22A4 FCMP S9, S1
	0x01DF22A8 FCCMP S14, S12, 0x0, PL
	0x01DF22AC FCCMP S14, S11, 0x0, LE
	0x01DF22B0 FCSEL S14, S2, S0, GT
	0x01DF22B4 FMOV S0, -1
	0x01DF22B8 FMOV S1, 1
	0x01DF22BC MOV X0, X31
	0x01DF22C0 BL 0x3C30968
	0x01DF22C4 LDR X0, [X19 + 0x1F0]
	0x01DF22C8 CBZ X0, 0x1DF23E0
	0x01DF22CC ADRP X20, 0x2307000
	0x01DF22D0 MOV V9.16B, V0.16B
	0x01DF22D4 LDR X20, [X20 + 0x1C8]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25E7000
	006 Move W8, [X20+3303]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {26}
	012 Move X0, 0x2307000
	013 Move X0, [X0+3736]
	014 Call 0x1C17CF4
	015 Move X0, 0x2307000
	016 Move X0, [X0+3248]
	017 Call 0x1C17CF4
	018 Move X0, 0x2307000
	019 Move X0, [X0+3184]
	020 Call 0x1C17CF4
	021 Move X0, 0x2307000
	022 Move X0, [X0+3136]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3303], W8
	026 Move X0, X19
	027 Call MobController.get__timerToSearching, X0
	028 Move X0, [X19+56]
	029 Compare X0, 0
	030 JumpIfEqual {126}
	031 Move X1, X31
	032 Move V8, V0
	033 Call NetworkRunner.get_DeltaTime, X0
	034 Add S0, S8, S0
	035 Move X0, X19
	036 Call MobController.set__timerToSearching, X0, V0
	037 Move X0, X19
	038 Call MobController.get__timerToSearching, X0
	039 Move X8, [X19+192]
	040 Compare X8, 0
	041 JumpIfEqual {126}
	042 Move V1, [X8+108]
	043 NotImplemented "Instruction FCMP not yet implemented."
	044 Move X8, 0x2307000
	045 Move X8, [X8+3136]
	046 Add X20, X19, 376
	047 Move X0, [X8]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X0, X19
	053 Move X1, X20
	054 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {114}
	059 Move W8, [X19+241]
	060 Move X20, [X19+376]
	061 Compare W8, 0
	062 JumpIfEqual {90}
	063 Compare X20, 0
	064 JumpIfEqual {126}
	065 Move W1, [X20+24]
	066 Move W0, W31
	067 Move X2, X31
	068 Call Random.Range, X0, X1
	069 Move X8, 0x2307000
	070 Move X8, [X8+3184]
	071 Move W1, W0
	072 Move X0, X20
	073 Move X2, [X8]
	074 Call List`1<Object>.get_Item, X0, X1
	075 Move X1, X0
	076 Move X0, X19
	077 Call FakeGorillaController.SetChasing, X0, X1
	078 Move W1, 4
	079 Move X0, X19
	080 Call FakeGorillaController.set_phase, X0, X1
	081 Move W8, 1
	082 Move [X19+241], W8
	083 Move X0, X19
	084 Move X20, [X31+16]
	085 Move X19, [X31+24]
	086 Move X30, [X31+8]
	087 Move V8, [X31+32]
	088 Call FakeGorillaController.SetRoaming, X0
	089 Return 
	090 Compare X20, 0
	091 JumpIfEqual {126}
	092 Move X8, 0x2307000
	093 Move X1, [X19+352]
	094 Move X8, [X8+3736]
	095 Move X0, X20
	096 Move X2, [X8]
	097 Call List`1<Object>.Contains, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {114}
	102 Move X1, [X19+352]
	103 Move X0, X19
	104 Call FakeGorillaController.SetChasing, X0, X1
	105 Move W1, 3
	106 Move X0, X19
	107 Call FakeGorillaController.set_phase, X0, X1
	108 Move [X19+241], W31
	109 Move X20, [X31+16]
	110 Move X19, [X31+24]
	111 Move X30, [X31+8]
	112 Move V8, [X31+32]
	113 Return 
	114 Move X0, X19
	115 Call MobController.UpdateRoaming, X0
	116 Move X0, X19
	117 Call MobController.UpdateRoamingPath, X0
	118 Move X0, X19
	119 Call MobController.get__targetPosition, X0
	120 Move X0, X19
	121 Move X20, [X31+16]
	122 Move X19, [X31+24]
	123 Move X30, [X31+8]
	124 Move S3, W31
	125 Move V8, [X31+32]
	126 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01DF499C LDP X30, X19, [X31], #0x10
	0x01DF49A0 RET
	0x01DF49A4 ADRP X0, 0x22FF000
	0x01DF49A8 LDR X0, [X0 + 0x5B0]
	0x01DF49AC BL 0x1C16D08
	0x01DF49B0 BL 0x1C16F10
	0x01DF49B4 MOV X19, X0
	0x01DF49B8 ADRP X0, 0x2305000
	0x01DF49BC LDR X0, [X0 + 0x2A8]
	0x01DF49C0 BL 0x1C16D08
	0x01DF49C4 MOV X1, X0
	0x01DF49C8 MOV X0, X19
	0x01DF49CC MOV X2, X31
	0x01DF49D0 BL 0x337DF1C
	0x01DF49D4 ADRP X0, 0x2305000
	0x01DF49D8 LDR X0, [X0 + 0x2B8]
	0x01DF49DC BL 0x1C16D08
	0x01DF49E0 MOV X1, X0
	0x01DF49E4 MOV X0, X19
	0x01DF49E8 BL 0x1C16DEC
	0x01DF49EC STP X30, X19, [X31 - 0x10]!
	0x01DF49F0 LDR X8, [X0 + 0x50]
	0x01DF49F4 CBZ X8, 0x1DF4A04
	0x01DF49F8 STR W1, [X8 + 0xC]
	0x01DF49FC LDP X30, X19, [X31], #0x10
	0x01DF4A00 RET
	0x01DF4A04 ADRP X0, 0x22FF000
	0x01DF4A08 LDR X0, [X0 + 0x5B0]
	0x01DF4A0C BL 0x1C16D08
	0x01DF4A10 BL 0x1C16F10
	0x01DF4A14 MOV X19, X0
	0x01DF4A18 ADRP X0, 0x2305000
	0x01DF4A1C LDR X0, [X0 + 0x138]
	0x01DF4A20 BL 0x1C16D08
	0x01DF4A24 MOV X1, X0
	0x01DF4A28 MOV X0, X19
	0x01DF4A2C MOV X2, X31
	0x01DF4A30 BL 0x337DF1C
	0x01DF4A34 ADRP X0, 0x2305000
	0x01DF4A38 LDR X0, [X0 + 0x2C0]
	0x01DF4A3C BL 0x1C16D08
	0x01DF4A40 MOV X1, X0
	0x01DF4A44 MOV X0, X19
	0x01DF4A48 BL 0x1C16DEC
	0x01DF4A4C STP X30, X19, [X31 - 0x10]!
	0x01DF4A50 LDR X8, [X0 + 0x50]
	0x01DF4A54 CBZ X8, 0x1DF4A64
	0x01DF4A58 STR S0, [X8 + 0x10]
	0x01DF4A5C LDP X30, X19, [X31], #0x10
	0x01DF4A60 RET
	0x01DF4A64 ADRP X0, 0x22FF000
	0x01DF4A68 LDR X0, [X0 + 0x5B0]
	0x01DF4A6C BL 0x1C16D08
	0x01DF4A70 BL 0x1C16F10
	0x01DF4A74 MOV X19, X0
	0x01DF4A78 ADRP X0, 0x2305000
	0x01DF4A7C LDR X0, [X0 + 0x230]
	0x01DF4A80 BL 0x1C16D08
	0x01DF4A84 MOV X1, X0
	0x01DF4A88 MOV X0, X19
	0x01DF4A8C MOV X2, X31
	0x01DF4A90 BL 0x337DF1C
	0x01DF4A94 ADRP X0, 0x2305000
	0x01DF4A98 LDR X0, [X0 + 0x2C8]
	0x01DF4A9C BL 0x1C16D08
	0x01DF4AA0 MOV X1, X0
	0x01DF4AA4 MOV X0, X19
	0x01DF4AA8 BL 0x1C16DEC
	0x01DF4AAC STP X30, X19, [X31 - 0x10]!
	0x01DF4AB0 LDR X8, [X0 + 0x50]
	0x01DF4AB4 CBZ X8, 0x1DF4AC4
	0x01DF4AB8 LDR V0, [X8 + 0x14]
	0x01DF4ABC LDP X30, X19, [X31], #0x10
	0x01DF4AC0 RET
	0x01DF4AC4 ADRP X0, 0x22FF000
	0x01DF4AC8 LDR X0, [X0 + 0x5B0]
	0x01DF4ACC BL 0x1C16D08
	0x01DF4AD0 BL 0x1C16F10
	0x01DF4AD4 MOV X19, X0
	0x01DF4AD8 ADRP X0, 0x2305000
	0x01DF4ADC LDR X0, [X0 + 0x2D0]
	0x01DF4AE0 BL 0x1C16D08
	0x01DF4AE4 MOV X1, X0
	0x01DF4AE8 MOV X0, X19
	0x01DF4AEC MOV X2, X31
	0x01DF4AF0 BL 0x337DF1C
	0x01DF4AF4 ADRP X0, 0x2305000
	0x01DF4AF8 LDR X0, [X0 + 0x2D8]
	0x01DF4AFC BL 0x1C16D08
	0x01DF4B00 MOV X1, X0
	0x01DF4B04 MOV X0, X19
	0x01DF4B08 BL 0x1C16DEC
	0x01DF4B0C STP X30, X19, [X31 - 0x10]!
	0x01DF4B10 LDR X8, [X0 + 0x50]
	0x01DF4B14 CBZ X8, 0x1DF4B24
	0x01DF4B18 STR S0, [X8 + 0x14]
	0x01DF4B1C LDP X30, X19, [X31], #0x10
	0x01DF4B20 RET
	0x01DF4B24 ADRP X0, 0x22FF000
	0x01DF4B28 LDR X0, [X0 + 0x5B0]
	0x01DF4B2C BL 0x1C16D08
	0x01DF4B30 BL 0x1C16F10
	0x01DF4B34 MOV X19, X0
	0x01DF4B38 ADRP X0, 0x2305000
	0x01DF4B3C LDR X0, [X0 + 0x2D0]
	0x01DF4B40 BL 0x1C16D08
	0x01DF4B44 MOV X1, X0
	0x01DF4B48 MOV X0, X19
	0x01DF4B4C MOV X2, X31
	0x01DF4B50 BL 0x337DF1C
	0x01DF4B54 ADRP X0, 0x2305000
	0x01DF4B58 LDR X0, [X0 + 0x2E0]
	0x01DF4B5C BL 0x1C16D08
	0x01DF4B60 MOV X1, X0
	0x01DF4B64 MOV X0, X19
	0x01DF4B68 BL 0x1C16DEC
	0x01DF4B6C STP X30, X19, [X31 - 0x10]!
	0x01DF4B70 LDR X8, [X0 + 0x50]
	0x01DF4B74 CBZ X8, 0x1DF4B84
	0x01DF4B78 LDR V0, [X8 + 0x18]
	0x01DF4B7C LDP X30, X19, [X31], #0x10
	0x01DF4B80 RET
	0x01DF4B84 ADRP X0, 0x22FF000
	0x01DF4B88 LDR X0, [X0 + 0x5B0]
	0x01DF4B8C BL 0x1C16D08
	0x01DF4B90 BL 0x1C16F10
	0x01DF4B94 MOV X19, X0
	0x01DF4B98 ADRP X0, 0x2305000
	0x01DF4B9C LDR X0, [X0 + 0x2E8]
	0x01DF4BA0 BL 0x1C16D08
	0x01DF4BA4 MOV X1, X0
	0x01DF4BA8 MOV X0, X19
	0x01DF4BAC MOV X2, X31
	0x01DF4BB0 BL 0x337DF1C
	0x01DF4BB4 ADRP X0, 0x2305000
	0x01DF4BB8 LDR X0, [X0 + 0x2F0]
	0x01DF4BBC BL 0x1C16D08
	0x01DF4BC0 MOV X1, X0
	0x01DF4BC4 MOV X0, X19
	0x01DF4BC8 BL 0x1C16DEC
	0x01DF4BCC STP X30, X19, [X31 - 0x10]!
	0x01DF4BD0 LDR X8, [X0 + 0x50]
	0x01DF4BD4 CBZ X8, 0x1DF4BE4
	0x01DF4BD8 STR S0, [X8 + 0x18]
	0x01DF4BDC LDP X30, X19, [X31], #0x10
	0x01DF4BE0 RET
	0x01DF4BE4 ADRP X0, 0x22FF000
	0x01DF4BE8 LDR X0, [X0 + 0x5B0]
	0x01DF4BEC BL 0x1C16D08
	0x01DF4BF0 BL 0x1C16F10
	0x01DF4BF4 MOV X19, X0
	0x01DF4BF8 ADRP X0, 0x2305000
	0x01DF4BFC LDR X0, [X0 + 0x2E8]
	0x01DF4C00 BL 0x1C16D08
	0x01DF4C04 MOV X1, X0
	0x01DF4C08 MOV X0, X19
	0x01DF4C0C MOV X2, X31
	0x01DF4C10 BL 0x337DF1C
	0x01DF4C14 ADRP X0, 0x2305000
	0x01DF4C18 LDR X0, [X0 + 0x2F8]
	0x01DF4C1C BL 0x1C16D08
	0x01DF4C20 MOV X1, X0
	0x01DF4C24 MOV X0, X19
	0x01DF4C28 BL 0x1C16DEC
	0x01DF4C2C STP X30, X19, [X31 - 0x10]!
	0x01DF4C30 LDR X8, [X0 + 0x50]
	0x01DF4C34 CBZ X8, 0x1DF4C44
	0x01DF4C38 LDR V0, [X8 + 0x1C]
	0x01DF4C3C LDP X30, X19, [X31], #0x10
	0x01DF4C40 RET
	0x01DF4C44 ADRP X0, 0x22FF000
	0x01DF4C48 LDR X0, [X0 + 0x5B0]
	0x01DF4C4C BL 0x1C16D08
	0x01DF4C50 BL 0x1C16F10
	0x01DF4C54 MOV X19, X0
	0x01DF4C58 ADRP X0, 0x2305000
	0x01DF4C5C LDR X0, [X0 + 0x300]
	0x01DF4C60 BL 0x1C16D08
	0x01DF4C64 MOV X1, X0
	0x01DF4C68 MOV X0, X19
	0x01DF4C6C MOV X2, X31
	0x01DF4C70 BL 0x337DF1C
	0x01DF4C74 ADRP X0, 0x2305000
	0x01DF4C78 LDR X0, [X0 + 0x308]
	0x01DF4C7C BL 0x1C16D08
	0x01DF4C80 MOV X1, X0
	0x01DF4C84 MOV X0, X19
	0x01DF4C88 BL 0x1C16DEC
	0x01DF4C8C STP X30, X19, [X31 - 0x10]!
	0x01DF4C90 LDR X8, [X0 + 0x50]
	0x01DF4C94 CBZ X8, 0x1DF4CA4
	0x01DF4C98 STR S0, [X8 + 0x1C]
	0x01DF4C9C LDP X30, X19, [X31], #0x10
	0x01DF4CA0 RET
	0x01DF4CA4 ADRP X0, 0x22FF000
	0x01DF4CA8 LDR X0, [X0 + 0x5B0]
	0x01DF4CAC BL 0x1C16D08
	0x01DF4CB0 BL 0x1C16F10
	0x01DF4CB4 MOV X19, X0
	0x01DF4CB8 ADRP X0, 0x2305000
	0x01DF4CBC LDR X0, [X0 + 0x300]
	0x01DF4CC0 BL 0x1C16D08
	0x01DF4CC4 MOV X1, X0
	0x01DF4CC8 MOV X0, X19
	0x01DF4CCC MOV X2, X31
	0x01DF4CD0 BL 0x337DF1C
	0x01DF4CD4 ADRP X0, 0x2305000
	0x01DF4CD8 LDR X0, [X0 + 0x310]
	0x01DF4CDC BL 0x1C16D08
	0x01DF4CE0 MOV X1, X0
	0x01DF4CE4 MOV X0, X19
	0x01DF4CE8 BL 0x1C16DEC
	0x01DF4CEC STP X30, X19, [X31 - 0x10]!
	0x01DF4CF0 LDR X8, [X0 + 0x50]
	0x01DF4CF4 CBZ X8, 0x1DF4D04
	0x01DF4CF8 LDR W0, [X8 + 0x20]
	0x01DF4CFC LDP X30, X19, [X31], #0x10
	0x01DF4D00 RET
	0x01DF4D04 ADRP X0, 0x22FF000
	0x01DF4D08 LDR X0, [X0 + 0x5B0]
	0x01DF4D0C BL 0x1C16D08
	0x01DF4D10 BL 0x1C16F10
	0x01DF4D14 MOV X19, X0
	0x01DF4D18 ADRP X0, 0x2305000
	0x01DF4D1C LDR X0, [X0 + 0x318]
	0x01DF4D20 BL 0x1C16D08
	0x01DF4D24 MOV X1, X0
	0x01DF4D28 MOV X0, X19
	0x01DF4D2C MOV X2, X31
	0x01DF4D30 BL 0x337DF1C
	0x01DF4D34 ADRP X0, 0x2305000
	0x01DF4D38 LDR X0, [X0 + 0x320]
	0x01DF4D3C BL 0x1C16D08
	0x01DF4D40 MOV X1, X0
	0x01DF4D44 MOV X0, X19
	0x01DF4D48 BL 0x1C16DEC
	0x01DF4D4C STP X30, X19, [X31 - 0x10]!
	0x01DF4D50 LDR X8, [X0 + 0x50]
	0x01DF4D54 CBZ X8, 0x1DF4D64
	0x01DF4D58 STR W1, [X8 + 0x20]
	0x01DF4D5C LDP X30, X19, [X31], #0x10
	0x01DF4D60 RET
	0x01DF4D64 ADRP X0, 0x22FF000
	0x01DF4D68 LDR X0, [X0 + 0x5B0]
	0x01DF4D6C BL 0x1C16D08
	0x01DF4D70 BL 0x1C16F10
	0x01DF4D74 MOV X19, X0
	0x01DF4D78 ADRP X0, 0x2305000
	0x01DF4D7C LDR X0, [X0 + 0x318]
	0x01DF4D80 BL 0x1C16D08
	0x01DF4D84 MOV X1, X0
	0x01DF4D88 MOV X0, X19
	0x01DF4D8C MOV X2, X31
	0x01DF4D90 BL 0x337DF1C
	0x01DF4D94 ADRP X0, 0x2305000
	0x01DF4D98 LDR X0, [X0 + 0x328]
	0x01DF4D9C BL 0x1C16D08
	0x01DF4DA0 MOV X1, X0
	0x01DF4DA4 MOV X0, X19
	0x01DF4DA8 BL 0x1C16DEC
	0x01DF4DAC LDR X0, [X0 + 0xC0]
	0x01DF4DB0 RET
	0x01DF4DB4 LDR X0, [X0 + 0xC8]
	0x01DF4DB8 RET
	0x01DF4DBC LDR X0, [X0 + 0xD0]
	0x01DF4DC0 RET
	0x01DF4DC4 LDR X0, [X0 + 0xD8]
	0x01DF4DC8 RET
	0x01DF4DCC STR X30, [X31 - 0x10]!
	0x01DF4DD0 LDR X8, [X0 + 0xC0]

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+176], D10
	003 Move [X31+192], D9
	004 Move [X31+200], D8
	005 Move [X31+208], X30
	006 Move [X31+216], X21
	007 Move [X31+224], X20
	008 Move [X31+232], X19
	009 Move X21, 0x25E5000
	010 Move X20, 0x2305000
	011 Move W8, [X21+3304]
	012 Move X20, [X20+3008]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {41}
	018 Move X0, 0x2300000
	019 Move X0, [X0+2416]
	020 Call 0x1C17CF4
	021 Move X0, 0x2305000
	022 Move X0, [X0+3008]
	023 Call 0x1C17CF4
	024 Move X0, 0x2306000
	025 Move X0, [X0+528]
	026 Call 0x1C17CF4
	027 Move X0, 0x2306000
	028 Move X0, [X0+536]
	029 Call 0x1C17CF4
	030 Move X0, 0x2306000
	031 Move X0, [X0+544]
	032 Call 0x1C17CF4
	033 Move X0, 0x2306000
	034 Move X0, [X0+552]
	035 Call 0x1C17CF4
	036 Move X0, 0x2306000
	037 Move X0, [X0+64]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X21+3304], W8
	041 NotImplemented "Instruction MOVI not yet implemented."
	042 Move X0, X19
	043 Move [X31+144], V0
	044 Move [X31+152], V0
	045 Move [X31+112], V0
	046 Move [X31+120], V0
	047 Move [X31+92], V0
	048 Move [X31+64], V0
	049 Move [X31+72], V0
	050 Call MobController.OnDrawGizmos, X0
	051 Move X0, [X20]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {57}
	055 Call 0x1C17DFC
	056 Move X0, [X20]
	057 Move X8, [X0+184]
	058 Move X0, X31
	059 Move S0, [X8+176]
	060 Move S1, [X8+180]
	061 Move S2, [X8+184]
	062 Move S3, [X8+188]
	063 Call Gizmos.set_color, X0
	064 Move X0, [X19+208]
	065 Compare X0, 0
	066 JumpIfEqual {274}
	067 Move X1, X31
	068 Call Transform.get_position, X0
	069 Move X8, [X19+192]
	070 Compare X8, 0
	071 JumpIfEqual {274}
	072 Move V3, [X8+76]
	073 Move X0, X31
	074 Call Gizmos.DrawWireSphere, X0, V0
	075 Move S0, 1
	076 Move S1, 0.5
	077 Move S2, W31
	078 Move S3, 1
	079 Move X0, X31
	080 Call Gizmos.set_color, X0
	081 Move X0, [X19+496]
	082 Compare X0, 0
	083 JumpIfEqual {274}
	084 Move X1, X31
	085 Call Transform.get_position, X0
	086 Move X0, X19
	087 Move V8, V0
	088 Move V9, V1
	089 Move V10, V2
	090 Call FakeGorillaController.get_RADIUS_BODY, X0
	091 Move V3, V0
	092 Move V0, V8
	093 Move V1, V9
	094 Move V2, V10
	095 Move X0, X31
	096 Call Gizmos.DrawWireSphere, X0, V0
	097 Move X8, -19963904
	098 Move X9, -19959808
	099 Move V1, [X8+3984]
	100 Move V2, [X9+48]
	101 Move S0, 1
	102 Move S3, 1
	103 Move X0, X31
	104 Call Gizmos.set_color, X0
	105 Move X0, [X19+496]
	106 Compare X0, 0
	107 JumpIfEqual {274}
	108 Move X1, X31
	109 Call Transform.get_position, X0
	110 Move X0, [X19+472]
	111 Compare X0, 0
	112 JumpIfEqual {274}
	113 Move X1, X31
	114 Move V8, V0
	115 Move V9, V1
	116 Move V10, V2
	117 Call SphereCollider.get_radius, X0
	118 Move V3, V0
	119 Move V0, V8
	120 Move V1, V9
	121 Move V2, V10
	122 Move X0, X31
	123 Call Gizmos.DrawWireSphere, X0, V0
	124 Move X8, [X19+520]
	125 Compare X8, 0
	126 JumpIfEqual {181}
	127 Move W8, [X8+24]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move S0, W31
	130 Move S1, 1
	131 Move S2, W31
	132 Move S3, 1
	133 Move X0, X31
	134 Call Gizmos.set_color, X0
	135 Move X0, [X19+520]
	136 Compare X0, 0
	137 JumpIfEqual {274}
	138 Move X8, 0x2306000
	139 Move X8, [X8+552]
	140 Move X1, [X8]
	141 Add X8, X31, 0
	142 Call List`1<RaycastHit>.GetEnumerator, X0
	143 Move V0, [X31]
	144 Move V1, [X31+16]
	145 Move V2, [X31+32]
	146 Move V3, [X31+48]
	147 Move X9, -19959808
	148 Move X21, 0x2306000
	149 Move [X31+112], V0
	150 Move [X31+120], V1
	151 Move [X31+144], V2
	152 Move [X31+152], V3
	153 Move V8, [X9+188]
	154 Move X21, [X21+536]
	155 Add X8, X31, 112
	156 Add X20, X8, 16
	157 Move X1, [X21]
	158 Add X0, X31, 112
	159 Call Enumerator<RaycastHit>.MoveNext, X0
	160 Move TEMP, X0
	161 And TEMP, TEMP, 1
	162 Compare TEMP, 1
	163 JumpIfNotEqual {176}
	164 NotImplemented "Instruction LDUR not yet implemented."
	165 Move V2, [X20]
	166 Move V1, [X20+16]
	167 Move [X31+92], V0
	168 Move [X31+64], V2
	169 Move [X31+72], V1
	170 Add X0, X31, 64
	171 Move X1, X31
	172 Call RaycastHit.get_point, X0
	173 Move V3, V8
	174 Move X0, X31
	175 Call Gizmos.DrawSphere, X0, V0
	176 Move X8, 0x2306000
	177 Move X8, [X8+528]
	178 Add X0, X31, 112
	179 Move X1, [X8]
	180 Call Enumerator<RaycastHit>.Dispose, X0
	181 Move X8, 0x2300000
	182 Move X8, [X8+2416]
	183 Move X0, [X8]
	184 Move W8, [X0+224]
	185 Compare W8, 0
	186 JumpIfNotEqual {188}
	187 Call 0x1C17DFC
	188 Move X0, X31
	189 Call Application.get_isPlaying
	190 Move TEMP, X0
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfNotEqual {230}
	194 Move S0, 1
	195 Move S1, W31
	196 Move S2, W31
	197 Move S3, 1
	198 Move X0, X31
	199 Call Gizmos.set_color, X0
	200 Move X0, X19
	201 Call MobController.get__targetPosition, X0
	202 Move X8, -19959808
	203 Move V3, [X8+860]
	204 Move X0, X31
	205 Call Gizmos.DrawWireSphere, X0, V0
	206 Move X0, X19
	207 Call MobController.get__targetPosition, X0
	208 Move X8, -19963904
	209 Move V3, [X8+3876]
	210 Move X0, X31
	211 Call Gizmos.DrawSphere, X0, V0
	212 Move X0, [X19+496]
	213 Compare X0, 0
	214 JumpIfEqual {274}
	215 Move X1, X31
	216 Call Transform.get_position, X0
	217 Move X0, X19
	218 Move V8, V0
	219 Move V9, V1
	220 Move V10, V2
	221 Call MobController.get__targetPosition, X0
	222 Move V3, V0
	223 Move V4, V1
	224 Move V5, V2
	225 Move V0, V8
	226 Move V1, V9
	227 Move V2, V10
	228 Move X0, X31
	229 Call Gizmos.DrawLine, X0, X1
	230 Move X8, [X19+248]
	231 Compare X8, 0
	232 JumpIfEqual {264}
	233 Move S0, 1
	234 Move S1, W31
	235 Move S2, W31
	236 Move S3, 1
	237 Move X0, X31
	238 Call Gizmos.set_color, X0
	239 Move X0, [X19+248]
	240 Compare X0, 0
	241 JumpIfEqual {274}
	242 Move X1, X31
	243 Call NavMeshPath.get_corners, X0
	244 Compare X0, 0
	245 JumpIfEqual {274}
	246 Move X8, [X0+24]
	247 Move X19, X0
	248 NotImplemented "Instruction CMP not yet implemented."
	249 Move X9, -19959808
	250 Move V8, [X9+188]
	251 Move X20, X31
	252 And X8, X8, 0
	253 Add X21, X19, 40
	254 NotImplemented "Instruction CMP not yet implemented."
	255 Move S0, [X21-8]
	256 Move S1, [X21-4]
	257 Move V2, [X21+12]
	258 Move V3, V8
	259 Move X0, X31
	260 Call Gizmos.DrawSphere, X0, V0
	261 Move W8, [X19+24]
	262 Add X20, X20, 1
	263 NotImplemented "Instruction CMP not yet implemented."
	264 Move X20, [X31+224]
	265 Move X19, [X31+232]
	266 Move X30, [X31+208]
	267 Move X21, [X31+216]
	268 Move D9, [X31+192]
	269 Move D8, [X31+200]
	270 Move V10, [X31+176]
	271 Add X31, X31, 240
	272 Return 
	273 Call 0x1C17F28
	274 Call 0x1C17F20
	275 Move X20, X0
	276 NotImplemented "Instruction CMP not yet implemented."
	277 Move X0, X20
	278 Call 0x3EB2AD0
	279 Move X21, [X0]
	280 Call 0x3EB2AE0
	281 Move X8, 0x2306000
	282 Move X8, [X8+528]
	283 Add X0, X31, 112
	284 Move X1, [X8]
	285 Call Enumerator<RaycastHit>.Dispose, X0
	286 Compare X21, 0
	287 JumpIfEqual {181}
	288 Move X0, X21
	289 Call 0x1C17F18
	290 Move X21, X31
	291 Move X20, X0
	292 Move X8, 0x2306000
	293 Move X8, [X8+528]
	294 Move X1, [X8]
	295 Add X0, X31, 112
	296 Call Enumerator<RaycastHit>.Dispose, X0
	297 Compare X21, 0
	298 JumpIfNotEqual {301}
	299 Move X0, X20
	300 Call 0x1D2D690
	301 Move X0, X21
	302 Call 0x1C17F18
	303 Call 0x1991590

Method: System.Void .ctor()

Disassembly:
	0x01DF4DD4 CBZ X8, 0x1DF4E00
	0x01DF4DD8 LDR X8, [X8 + 0x78]
	0x01DF4DDC CBZ X8, 0x1DF4E00
	0x01DF4DE0 LDRSW X9, [X0 + 0xE0]
	0x01DF4DE4 LDR W10, [X8 + 0x18]
	0x01DF4DE8 CMP W9, W10
	0x01DF4DEC B.CS 0x1DF4E04
	0x01DF4DF0 ADD X8, X8, X9, 0x2, LSL
	0x01DF4DF4 LDR V0, [X8 + 0x20]
	0x01DF4DF8 LDR X30, [X31], #0x10
	0x01DF4DFC RET
	0x01DF4E00 BL 0x1C16F20
	0x01DF4E04 BL 0x1C16F28
	0x01DF4E08 SUB X31, X31, 0x90
	0x01DF4E0C STP X30, X23, [X31 + 0x60]
	0x01DF4E10 STP X22, X21, [X31 + 0x70]
	0x01DF4E14 STP X20, X19, [X31 + 0x80]
	0x01DF4E18 ADRP X21, 0x25E4000
	0x01DF4E1C LDRB W9, [X21 + 0xCF4]
	0x01DF4E20 MOV X20, X0
	0x01DF4E24 MOV X19, X8
	0x01DF4E28 TBNZ X9, 0x0, 0x1DF4EA0
	0x01DF4E2C ADRP X0, 0x2305000
	0x01DF4E30 LDR X0, [X0 + 0x330]
	0x01DF4E34 BL 0x1C16CF4
	0x01DF4E38 ADRP X0, 0x22FF000
	0x01DF4E3C LDR X0, [X0 + 0x758]
	0x01DF4E40 BL 0x1C16CF4
	0x01DF4E44 ADRP X0, 0x22FF000
	0x01DF4E48 LDR X0, [X0 + 0x788]
	0x01DF4E4C BL 0x1C16CF4
	0x01DF4E50 ADRP X0, 0x2305000
	0x01DF4E54 LDR X0, [X0 + 0x338]
	0x01DF4E58 BL 0x1C16CF4
	0x01DF4E5C ADRP X0, 0x2305000
	0x01DF4E60 LDR X0, [X0 + 0x340]
	0x01DF4E64 BL 0x1C16CF4
	0x01DF4E68 ADRP X0, 0x2305000
	0x01DF4E6C LDR X0, [X0 + 0x348]
	0x01DF4E70 BL 0x1C16CF4
	0x01DF4E74 ADRP X0, 0x2305000
	0x01DF4E78 LDR X0, [X0 + 0x350]
	0x01DF4E7C BL 0x1C16CF4
	0x01DF4E80 ADRP X0, 0x2304000
	0x01DF4E84 LDR X0, [X0 + 0xE50]
	0x01DF4E88 BL 0x1C16CF4
	0x01DF4E8C ADRP X0, 0x2305000
	0x01DF4E90 LDR X0, [X0 + 0x358]
	0x01DF4E94 BL 0x1C16CF4
	0x01DF4E98 MOVZ W8, 0x1
	0x01DF4E9C STRB W8, [X21 + 0xCF4]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x25E5000
	009 Move X24, 0x2306000
	010 Move X20, 0x2306000
	011 Move X22, 0x2306000
	012 Move X21, 0x2304000
	013 Move W8, [X23+3305]
	014 Move X24, [X24+104]
	015 Move X20, [X20+112]
	016 Move X22, [X22+240]
	017 Move X21, [X21+2144]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x2306000
	024 Move X0, [X0+240]
	025 Call 0x1C17CF4
	026 Move X0, 0x2306000
	027 Move X0, [X0+112]
	028 Call 0x1C17CF4
	029 Move X0, 0x2306000
	030 Move X0, [X0+104]
	031 Call 0x1C17CF4
	032 Move X0, 0x2304000
	033 Move X0, [X0+2144]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X23+3305], W8
	037 Move X0, [X24]
	038 Call 0x1C17F10
	039 Move X2, [X20]
	040 Move W1, 8
	041 Move X20, X0
	042 Call List`1<RaycastHit>..ctor, X0, X1
	043 Move [X19+520], X20
	044 Move X0, [X22]
	045 Move W1, 2
	046 Call 0x1C17D6C
	047 Move [X19+528], X0
	048 Move X0, [X21]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X19
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X24, [X31+16]
	059 Move X23, [X31+24]
	060 Move X30, [X31+64]
	061 Call MobController..ctor, X0
	062 Return 

Method: System.Void .cctor()

Disassembly:
	0x01DF4EA0 STP X31, X31, [X31 + 0x28]
	0x01DF4EA4 STR X31, [X31 + 0x38]
	0x01DF4EA8 ADRP X23, 0x2305000
	0x01DF4EAC LDRB W8, [X20 + 0x108]
	0x01DF4EB0 LDR X23, [X23 + 0x348]
	0x01DF4EB4 ADD X21, X20, 0x108
	0x01DF4EB8 CBNZ W8, 0x1DF4FAC
	0x01DF4EBC ADRP X8, 0x2305000
	0x01DF4EC0 LDR X8, [X8 + 0x330]
	0x01DF4EC4 LDR W22, [X20 + 0x100]
	0x01DF4EC8 LDR X0, [X8]
	0x01DF4ECC LDR W8, [X0 + 0xE0]
	0x01DF4ED0 CBNZ W8, 0x1DF4ED8
	0x01DF4ED4 BL 0x1C16DFC
	0x01DF4ED8 ADD X1, X31, 0x28
	0x01DF4EDC MOV W0, W22
	0x01DF4EE0 MOV X2, X31
	0x01DF4EE4 BL 0x1E1649C
	0x01DF4EE8 TBZ X0, 0x0, 0x1DF4F28
	0x01DF4EEC ADRP X8, 0x2305000
	0x01DF4EF0 LDR X8, [X8 + 0x338]
	0x01DF4EF4 LDUR V1, [X31 + 0x28]
	0x01DF4EF8 LDR X9, [X31 + 0x38]
	0x01DF4EFC MOVI V0.2D, 0x0
	0x01DF4F00 LDR X2, [X8]
	0x01DF4F04 ADD X0, X31, 0x0
	0x01DF4F08 ADD X1, X31, 0x40
	0x01DF4F0C STP V0, V0, [X31]
	0x01DF4F10 STR V1, [X31 + 0x4]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25E5000
	005 Move X19, 0x2306000
	006 Move W8, [X20+3306]
	007 Move X19, [X19+456]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2306000
	013 Move X0, [X0+456]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3306], W8
	017 Move X8, [X19]
	018 Move X9, -19947520
	019 Move V0, [X9+2992]
	020 Move X9, -19943424
	021 Move X8, [X8+184]
	022 Move X10, -19947520
	023 Move [X8], D0
	024 Move X8, [X19]
	025 Move V0, [X9+312]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X9, [X8+184]
	029 Move [X9+8], D0
	030 Move X8, [X8+184]
	031 Move V0, [X10+1920]
	032 Move [X8+16], D0
	033 Move X30, [X31+32]
	034 Return 

Method: System.Int32 <RPC_Hit>b__49_0(AnimalCompany.NetPlayer a, AnimalCompany.NetPlayer b)

Disassembly:
	0x01DF4F14 STR X9, [X31 + 0x50]
	0x01DF4F18 BL 0x2434D34
	0x01DF4F1C LDP V1, V0, [X31]
	0x01DF4F20 STP V1, V0, [X21]
	0x01DF4F24 B 0x1DF4FAC
	0x01DF4F28 ADRP X9, 0x22FF000
	0x01DF4F2C LDR W8, [X20 + 0x100]
	0x01DF4F30 LDR X9, [X9 + 0x758]
	0x01DF4F34 ADD X1, X31, 0x0
	0x01DF4F38 STR W8, [X31]
	0x01DF4F3C LDR X0, [X9]
	0x01DF4F40 BL 0x1C16E04
	0x01DF4F44 ADRP X8, 0x2305000
	0x01DF4F48 LDR X8, [X8 + 0x358]
	0x01DF4F4C MOV X1, X0
	0x01DF4F50 MOV X2, X31
	0x01DF4F54 LDR X8, [X8]
	0x01DF4F58 MOV X0, X8
	0x01DF4F5C BL 0x321EFD0
	0x01DF4F60 ADRP X8, 0x22FF000
	0x01DF4F64 LDR X8, [X8 + 0x788]
	0x01DF4F68 MOV X22, X0
	0x01DF4F6C LDR X8, [X8]
	0x01DF4F70 LDR W9, [X8 + 0xE0]
	0x01DF4F74 CBNZ W9, 0x1DF4F80
	0x01DF4F78 MOV X0, X8
	0x01DF4F7C BL 0x1C16DFC
	0x01DF4F80 ADRP X8, 0x2304000
	0x01DF4F84 ADRP X9, 0x2305000
	0x01DF4F88 LDR X8, [X8 + 0xE50]
	0x01DF4F8C LDR X9, [X9 + 0x350]
	0x01DF4F90 MOVZ W4, 0x65
	0x01DF4F94 MOV X0, X22
	0x01DF4F98 LDR X2, [X8]
	0x01DF4F9C LDR X3, [X9]
	0x01DF4FA0 MOV X1, X31
	0x01DF4FA4 MOV X5, X31
	0x01DF4FA8 BL 0x35C2344
	0x01DF4FAC LDR X1, [X23]
	0x01DF4FB0 ADD X8, X31, 0x40
	0x01DF4FB4 MOV X0, X21
	0x01DF4FB8 BL 0x2434D58
	0x01DF4FBC LDR X8, [X31 + 0x50]
	0x01DF4FC0 LDR V0, [X31 + 0x4]
	0x01DF4FC4 ADD X9, X20, 0x128
	0x01DF4FC8 MOV X0, X21
	0x01DF4FCC STR X8, [X31 + 0x10]
	0x01DF4FD0 STR V0, [X31]
	0x01DF4FD4 STR X8, [X9 + 0x10]
	0x01DF4FD8 STR V0, [X9]
	0x01DF4FDC LDR X1, [X23]
	0x01DF4FE0 ADD X8, X31, 0x40
	0x01DF4FE4 BL 0x2434D58
	0x01DF4FE8 LDR X8, [X31 + 0x50]
	0x01DF4FEC LDR V0, [X31 + 0x4]
	0x01DF4FF0 LDP X22, X21, [X31 + 0x70]
	0x01DF4FF4 LDP X30, X23, [X31 + 0x60]
	0x01DF4FF8 STR X8, [X19 + 0x10]
	0x01DF4FFC STR V0, [X19]
	0x01DF5000 LDP X20, X19, [X31 + 0x80]
	0x01DF5004 ADD X31, X31, 0x90
	0x01DF5008 RET
	0x01DF500C LDR X0, [X0 + 0x160]
	0x01DF5010 RET
	0x01DF5014 STR X30, [X31 - 0x20]!
	0x01DF5018 STP X20, X19, [X31 + 0x10]
	0x01DF501C ADRP X20, 0x25E3000
	0x01DF5020 ADRP X19, 0x2300000
	0x01DF5024 LDRB W8, [X20 + 0xCF5]
	0x01DF5028 LDR X19, [X19 + 0x9A0]
	0x01DF502C TBNZ X8, 0x0, 0x1DF5044
	0x01DF5030 ADRP X0, 0x2300000
	0x01DF5034 LDR X0, [X0 + 0x9A0]
	0x01DF5038 BL 0x1C16CF4
	0x01DF503C MOVZ W8, 0x1
	0x01DF5040 STRB W8, [X20 + 0xCF5]
	0x01DF5044 LDR X0, [X19]
	0x01DF5048 LDR W8, [X0 + 0xE0]
	0x01DF504C CBNZ W8, 0x1DF5054
	0x01DF5050 BL 0x1C16DFC
	0x01DF5054 ADRP X20, 0x25E3000
	0x01DF5058 LDRB W8, [X20 + 0xB6A]
	0x01DF505C CBNZ W8, 0x1DF5074
	0x01DF5060 ADRP X0, 0x2300000
	0x01DF5064 LDR X0, [X0 + 0x9A0]
	0x01DF5068 BL 0x1C16CF4
	0x01DF506C MOVZ W8, 0x1
	0x01DF5070 STRB W8, [X20 + 0xB6A]
	0x01DF5074 LDR X0, [X19]
	0x01DF5078 LDR W8, [X0 + 0xE0]
	0x01DF507C CBNZ W8, 0x1DF5088
	0x01DF5080 BL 0x1C16DFC
	0x01DF5084 LDR X0, [X19]
	0x01DF5088 LDR X8, [X0 + 0xB8]
	0x01DF508C LDP X20, X19, [X31 + 0x10]
	0x01DF5090 LDR X0, [X8]
	0x01DF5094 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Compare X1, 0
	013 JumpIfEqual {117}
	014 Move X19, X0
	015 Move X0, X1
	016 Move X1, X31
	017 Move X20, X2
	018 Call Component.get_transform, X0
	019 Compare X0, 0
	020 JumpIfEqual {117}
	021 Move X1, X31
	022 Call Transform.get_position, X0
	023 Move X0, [X19+208]
	024 Compare X0, 0
	025 JumpIfEqual {117}
	026 Move X1, X31
	027 Move V8, V0
	028 Move V9, V1
	029 Move V10, V2
	030 Call Transform.get_position, X0
	031 Move X21, 0x25E5000
	032 Move W8, [X21+2140]
	033 Move V11, V0
	034 Move V12, V1
	035 Move V13, V2
	036 Compare W8, 0
	037 JumpIfNotEqual {43}
	038 Move X0, 0x2300000
	039 Move X0, [X0+1448]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X21+2140], W8
	043 Move X22, 0x2300000
	044 Move X22, [X22+1448]
	045 Subtract S11, S8, S11
	046 Subtract S9, S9, S12
	047 Subtract S8, S10, S13
	048 Move X0, [X22]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Multiply S0, S11, S11
	054 Multiply S1, S9, S9
	055 Add S0, S0, S1
	056 Multiply S1, S8, S8
	057 Add S0, S1, S0
	058 NotImplemented "Instruction FSQRT not yet implemented."
	059 Move [X31+60], S0
	060 Compare X20, 0
	061 JumpIfEqual {117}
	062 Move X0, X20
	063 Move X1, X31
	064 Call Component.get_transform, X0
	065 Compare X0, 0
	066 JumpIfEqual {117}
	067 Move X1, X31
	068 Call Transform.get_position, X0
	069 Move X0, [X19+208]
	070 Compare X0, 0
	071 JumpIfEqual {117}
	072 Move X1, X31
	073 Move V8, V0
	074 Move V9, V1
	075 Move V10, V2
	076 Call Transform.get_position, X0
	077 Move W8, [X21+2140]
	078 Move V11, V0
	079 Move V12, V1
	080 Move V13, V2
	081 Compare W8, 0
	082 JumpIfNotEqual {88}
	083 Move X0, 0x22FF000
	084 Move X0, [X0+1448]
	085 Call 0x1C17CF4
	086 Move W8, 1
	087 Move [X21+2140], W8
	088 Move X0, [X22]
	089 Subtract S11, S8, S11
	090 Subtract S9, S9, S12
	091 Subtract S8, S10, S13
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Multiply S0, S11, S11
	097 Multiply S1, S9, S9
	098 Add S0, S0, S1
	099 Multiply S1, S8, S8
	100 Add S0, S1, S0
	101 NotImplemented "Instruction FSQRT not yet implemented."
	102 Add X0, X31, 60
	103 Move X1, X31
	104 Call Single.CompareTo, X0, V0
	105 Move X20, [X31+80]
	106 Move X19, [X31+88]
	107 Move X22, [X31+64]
	108 Move X21, [X31+72]
	109 Move X30, [X31+48]
	110 Move D9, [X31+32]
	111 Move D8, [X31+40]
	112 Move D11, [X31+16]
	113 Move D10, [X31+24]
	114 Move D13, [X31+96]
	115 Move D12, [X31+104]
	116 Return X0
	117 Call 0x1C17F20

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DF5098 RET
	0x01DF509C STR X30, [X31 - 0x20]!
	0x01DF50A0 STP X20, X19, [X31 + 0x10]
	0x01DF50A4 ADRP X20, 0x25E3000
	0x01DF50A8 ADRP X19, 0x2302000
	0x01DF50AC LDRB W8, [X20 + 0xCF6]
	0x01DF50B0 LDR X19, [X19 + 0x860]
	0x01DF50B4 TBNZ X8, 0x0, 0x1DF50CC
	0x01DF50B8 ADRP X0, 0x2302000
	0x01DF50BC LDR X0, [X0 + 0x860]
	0x01DF50C0 BL 0x1C16CF4
	0x01DF50C4 MOVZ W8, 0x1
	0x01DF50C8 STRB W8, [X20 + 0xCF6]
	0x01DF50CC LDR X0, [X19]
	0x01DF50D0 LDR W8, [X0 + 0xE0]
	0x01DF50D4 CBNZ W8, 0x1DF50E0
	0x01DF50D8 BL 0x1C16DFC
	0x01DF50DC LDR X0, [X19]
	0x01DF50E0 LDR X8, [X0 + 0xB8]
	0x01DF50E4 LDP X20, X19, [X31 + 0x10]
	0x01DF50E8 LDR X0, [X8 + 0x8]
	0x01DF50EC LDR X30, [X31], #0x20
	0x01DF50F0 RET
	0x01DF50F4 STR W1, [X0 + 0x100]
	0x01DF50F8 RET
	0x01DF50FC SUB X31, X31, 0x30
	0x01DF5100 STP X30, X21, [X31 + 0x10]
	0x01DF5104 STP X20, X19, [X31 + 0x20]
	0x01DF5108 ADRP X21, 0x25E3000
	0x01DF510C LDRB W8, [X21 + 0xCF7]
	0x01DF5110 MOV X19, X1
	0x01DF5114 MOV X20, X0
	0x01DF5118 TBNZ X8, 0x0, 0x1DF5178
	0x01DF511C ADRP X0, 0x22FE000
	0x01DF5120 LDR X0, [X0 + 0xA28]
	0x01DF5124 BL 0x1C16CF4
	0x01DF5128 ADRP X0, 0x22FE000
	0x01DF512C LDR X0, [X0 + 0xAC8]
	0x01DF5130 BL 0x1C16CF4
	0x01DF5134 ADRP X0, 0x2304000
	0x01DF5138 LDR X0, [X0 + 0x360]
	0x01DF513C BL 0x1C16CF4
	0x01DF5140 ADRP X0, 0x2304000
	0x01DF5144 LDR X0, [X0 + 0x368]
	0x01DF5148 BL 0x1C16CF4
	0x01DF514C ADRP X0, 0x2304000
	0x01DF5150 LDR X0, [X0 + 0x370]
	0x01DF5154 BL 0x1C16CF4
	0x01DF5158 ADRP X0, 0x2304000
	0x01DF515C LDR X0, [X0 + 0x378]
	0x01DF5160 BL 0x1C16CF4
	0x01DF5164 ADRP X0, 0x2304000
	0x01DF5168 LDR X0, [X0 + 0x380]
	0x01DF516C BL 0x1C16CF4
	0x01DF5170 MOVZ W8, 0x1
	0x01DF5174 STRB W8, [X21 + 0xCF7]
	0x01DF5178 MOV X0, X31
	0x01DF517C BL 0x1DD6AE8
	0x01DF5180 TBZ X0, 0x0, 0x1DF52B8
	0x01DF5184 MOV X0, X31
	0x01DF5188 BL 0x3C3A708
	0x01DF518C LDR V1, [X20 + 0x190]
	0x01DF5190 ADRP X8, 0xFFFFFFFFFECF5000
	0x01DF5194 LDR V2, [X8 + 0x35C]
	0x01DF5198 MOVZ W8, 0x447A0000
	0x01DF519C FSUB S0, S0, S1
	0x01DF51A0 FMOV S1, W8
	0x01DF51A4 FMUL S0, S0, S1

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+128], X30
	003 Move [X31+144], X22
	004 Move [X31+152], X21
	005 Move [X31+160], X20
	006 Move [X31+168], X19
	007 Move X21, 0x25E4000
	008 Move X20, 0x2302000
	009 Move W8, [X21+3307]
	010 Move X20, [X20+2680]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x2305000
	017 Move X0, [X0+608]
	018 Call 0x1C17CF4
	019 Move X0, 0x2302000
	020 Move X0, [X0+2680]
	021 Call 0x1C17CF4
	022 Move X0, 0x2305000
	023 Move X0, [X0+616]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3307], W8
	027 Move X21, 0x2305000
	028 Move X22, 0x2305000
	029 Move X21, [X21+616]
	030 Move X22, [X22+608]
	031 Move X0, X19
	032 Move W1, W31
	033 Call MobController.CopyBackingFieldsToState, X0, X1
	034 Move W1, [X19+420]
	035 Move X0, X19
	036 Call FakeGorillaController.set_phase, X0, X1
	037 Move V0, [X19+424]
	038 Move V1, [X19+428]
	039 Move V2, [X19+432]
	040 Move V3, [X19+436]
	041 Move X0, X19
	042 Call FakeGorillaController.set_playerColor, X0, X1
	043 Move V0, [X19+440]
	044 Move V1, [X19+444]
	045 Move V2, [X19+448]
	046 Move X0, X19
	047 Call FakeGorillaController.set_positionAngry, X0, X1
	048 Add X8, X31, 64
	049 Move X0, X19
	050 Call FakeGorillaController.get__angerMetersByPlayerId, X0
	051 Move V0, [X31+64]
	052 Move V1, [X31+80]
	053 Move V2, [X31+96]
	054 Move V3, [X31+112]
	055 Move X0, [X20]
	056 Move [X31], V0
	057 Move [X31+8], V1
	058 Move [X31+32], V2
	059 Move [X31+40], V3
	060 Move W8, [X0+224]
	061 Move X19, [X19+456]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Move X2, [X21]
	066 Move X3, [X22]
	067 Move V0, [X31]
	068 Move V1, [X31+16]
	069 Move V2, [X31+32]
	070 Move V3, [X31+48]
	071 Add X0, X31, 64
	072 Move X1, X19
	073 Move [X31+64], V0
	074 Move [X31+72], V1
	075 Move [X31+96], V2
	076 Move [X31+104], V3
	077 Call 0x222A220, X0, X1, X2
	078 Move X20, [X31+160]
	079 Move X19, [X31+168]
	080 Move X22, [X31+144]
	081 Move X21, [X31+152]
	082 Move X30, [X31+128]
	083 Add X31, X31, 176
	084 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DF51A8 FCMP S0, S2
	0x01DF51AC STR S0, [X31 + 0xC]
	0x01DF51B0 B.LE 0x1DF52B8
	0x01DF51B4 ADRP X8, 0x22FE000
	0x01DF51B8 LDR X8, [X8 + 0xAC8]
	0x01DF51BC MOVZ W1, 0x7
	0x01DF51C0 LDR X0, [X8]
	0x01DF51C4 BL 0x1C16D6C
	0x01DF51C8 CBZ X0, 0x1DF52CC
	0x01DF51CC LDR W8, [X0 + 0x18]
	0x01DF51D0 MOV X21, X0
	0x01DF51D4 CBZ W8, 0x1DF52C8
	0x01DF51D8 ADRP X8, 0x2304000
	0x01DF51DC LDR X8, [X8 + 0x370]
	0x01DF51E0 MOV X0, X20
	0x01DF51E4 MOV X1, X31
	0x01DF51E8 LDR X8, [X8]
	0x01DF51EC STR X8, [X21 + 0x20]
	0x01DF51F0 BL 0x3C389D4
	0x01DF51F4 LDR W8, [X21 + 0x18]
	0x01DF51F8 CMP W8, 0x1
	0x01DF51FC B.LS 0x1DF52C8
	0x01DF5200 CMP W8, 0x2
	0x01DF5204 STR X0, [X21 + 0x28]
	0x01DF5208 B.EQ 0x1DF52C8
	0x01DF520C ADRP X9, 0x2304000
	0x01DF5210 LDR X9, [X9 + 0x380]
	0x01DF5214 CMP W8, 0x3
	0x01DF5218 LDR X9, [X9]
	0x01DF521C STR X9, [X21 + 0x30]
	0x01DF5220 B.LS 0x1DF52C8
	0x01DF5224 CMP W8, 0x4
	0x01DF5228 STR X19, [X21 + 0x38]
	0x01DF522C B.EQ 0x1DF52C8
	0x01DF5230 ADRP X8, 0x2304000
	0x01DF5234 LDR X8, [X8 + 0x368]
	0x01DF5238 ADD X0, X31, 0xC
	0x01DF523C MOV X2, X31
	0x01DF5240 LDR X8, [X8]
	0x01DF5244 STR X8, [X21 + 0x40]
	0x01DF5248 ADRP X8, 0x2304000
	0x01DF524C LDR X8, [X8 + 0x360]
	0x01DF5250 LDR X1, [X8]
	0x01DF5254 BL 0x338FF2C
	0x01DF5258 LDR W8, [X21 + 0x18]
	0x01DF525C CMP W8, 0x5
	0x01DF5260 B.LS 0x1DF52C8
	0x01DF5264 CMP W8, 0x6
	0x01DF5268 STR X0, [X21 + 0x48]
	0x01DF526C B.EQ 0x1DF52C8
	0x01DF5270 ADRP X8, 0x2304000
	0x01DF5274 LDR X8, [X8 + 0x378]
	0x01DF5278 MOV X0, X21
	0x01DF527C MOV X1, X31
	0x01DF5280 LDR X8, [X8]
	0x01DF5284 STR X8, [X21 + 0x50]
	0x01DF5288 BL 0x32278CC
	0x01DF528C ADRP X8, 0x22FE000

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+128], X30
	003 Move [X31+136], X21
	004 Move [X31+144], X20
	005 Move [X31+152], X19
	006 Move X21, 0x25E4000
	007 Move X20, 0x2302000
	008 Move W8, [X21+3308]
	009 Move X20, [X20+2680]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x2305000
	016 Move X0, [X0+624]
	017 Call 0x1C17CF4
	018 Move X0, 0x2302000
	019 Move X0, [X0+2680]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3308], W8
	023 Move X21, 0x2305000
	024 Move X21, [X21+624]
	025 Move X0, X19
	026 Call MobController.CopyStateToBackingFields, X0
	027 Move X0, X19
	028 Call FakeGorillaController.get_phase, X0
	029 Move [X19+420], W0
	030 Move X0, X19
	031 Call FakeGorillaController.get_playerColor, X0
	032 Move X0, X19
	033 Move [X19+424], S0
	034 Move [X19+428], S1
	035 Move [X19+432], S2
	036 Move [X19+436], S3
	037 Call FakeGorillaController.get_positionAngry, X0
	038 Add X8, X31, 64
	039 Move X0, X19
	040 Move [X19+440], S0
	041 Move [X19+444], S1
	042 Move [X19+448], S2
	043 Call FakeGorillaController.get__angerMetersByPlayerId, X0
	044 Move V0, [X31+64]
	045 Move V1, [X31+80]
	046 Move V2, [X31+96]
	047 Move V3, [X31+112]
	048 Move X0, [X20]
	049 Move [X31], V0
	050 Move [X31+8], V1
	051 Move [X31+32], V2
	052 Move [X31+40], V3
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X2, [X21]
	058 Move V0, [X31]
	059 Move V1, [X31+16]
	060 Move V2, [X31+32]
	061 Move V3, [X31+48]
	062 Add X1, X19, 456
	063 Add X0, X31, 64
	064 Move [X31+64], V0
	065 Move [X31+72], V1
	066 Move [X31+96], V2
	067 Move [X31+104], V3
	068 Call 0x2229398, X0, X1
	069 Move X20, [X31+144]
	070 Move X19, [X31+152]
	071 Move X30, [X31+128]
	072 Move X21, [X31+136]
	073 Add X31, X31, 160
	074 Return 

