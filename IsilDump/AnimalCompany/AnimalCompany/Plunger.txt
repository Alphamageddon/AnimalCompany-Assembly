Type: AnimalCompany.Plunger

Method: System.Boolean get_isSuctioned()

Disassembly:
	0x01DA1104 CBZ X0, 0x1DA1300
	0x01DA1108 ADRP X20, 0x2352000
	0x01DA110C LDR X20, [X20 + 0x5F8]
	0x01DA1110 MOV X1, X31
	0x01DA1114 MOV V9.16B, V0.16B
	0x01DA1118 MOV V10.16B, V1.16B
	0x01DA111C MOV V11.16B, V2.16B
	0x01DA1120 BL 0x3C3FA04
	0x01DA1124 MOV V12.16B, V0.16B
	0x01DA1128 MOV V13.16B, V1.16B
	0x01DA112C MOV V14.16B, V2.16B
	0x01DA1130 BL 0x1DA01D0
	0x01DA1134 AND X0, X0, 0x0
	0x01DA1138 MOV X1, X31
	0x01DA113C BL 0x3C35CB8
	0x01DA1140 LDR X8, [X20]
	0x01DA1144 MOV W20, W0
	0x01DA1148 LDR W9, [X8 + 0xE0]
	0x01DA114C CBNZ W9, 0x1DA1158
	0x01DA1150 MOV X0, X8
	0x01DA1154 BL 0x1C16DFC
	0x01DA1158 ADD X0, X31, 0x10
	0x01DA115C MOVZ W2, 0x1
	0x01DA1160 MOV V0.16B, V9.16B
	0x01DA1164 MOV V1.16B, V10.16B
	0x01DA1168 MOV V2.16B, V11.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2353000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x2357000
	018 Move X0, [X0+568]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x2357000
	025 Move X0, [X0+576]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_isSuctioned(System.Boolean value)

Disassembly:
	0x01DA116C MOV V3.16B, V12.16B
	0x01DA1170 MOV V4.16B, V13.16B
	0x01DA1174 MOV V5.16B, V14.16B
	0x01DA1178 MOV V6.16B, V8.16B
	0x01DA117C MOV W1, W20
	0x01DA1180 MOV X3, X31
	0x01DA1184 BL 0x3C8AEC8
	0x01DA1188 TBZ X0, 0x0, 0x1DA12E0
	0x01DA118C ADD X0, X31, 0x10
	0x01DA1190 MOV X1, X31
	0x01DA1194 BL 0x3C8E66C
	0x01DA1198 ADD X0, X31, 0x10
	0x01DA119C MOV X1, X31
	0x01DA11A0 STP S1, S0, [X31 + 0x8]
	0x01DA11A4 MOV V10.16B, V2.16B
	0x01DA11A8 BL 0x3C8E678
	0x01DA11AC ADD X0, X31, 0x10
	0x01DA11B0 MOV X1, X31
	0x01DA11B4 MOV V11.16B, V0.16B
	0x01DA11B8 MOV V12.16B, V1.16B
	0x01DA11BC MOV V13.16B, V2.16B
	0x01DA11C0 BL 0x3C8E678
	0x01DA11C4 LDR X0, [X19 + 0x88]
	0x01DA11C8 CBZ X0, 0x1DA1300
	0x01DA11CC MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x2353000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x2357000
	017 Move X0, [X0+568]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x2357000
	024 Move X0, [X0+584]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: UnityEngine.LayerMask get_suctionToLayers()

Disassembly:
	0x01DA11D0 FNEG S8, S2
	0x01DA11D4 FNEG S9, S1
	0x01DA11D8 FNEG S14, S0
	0x01DA11DC BL 0x3C3F988
	0x01DA11E0 MOV V3.16B, V0.16B
	0x01DA11E4 MOV V4.16B, V1.16B
	0x01DA11E8 MOV V5.16B, V2.16B
	0x01DA11EC MOV V0.16B, V14.16B
	0x01DA11F0 MOV V1.16B, V9.16B
	0x01DA11F4 MOV V2.16B, V8.16B
	0x01DA11F8 MOV X0, X31
	0x01DA11FC BL 0x3C2A810
	0x01DA1200 ADD X0, X31, 0x10
	0x01DA1204 MOV X1, X31
	0x01DA1208 MOV V14.16B, V0.16B
	0x01DA120C MOV V15.16B, V1.16B
	0x01DA1210 MOV V8.16B, V2.16B
	0x01DA1214 MOV V9.16B, V3.16B
	0x01DA1218 BL 0x3C8E5C0
	0x01DA121C CBZ X0, 0x1DA1300
	0x01DA1220 ADRP X8, 0x2356000
	0x01DA1224 LDR X8, [X8 + 0x278]
	0x01DA1228 LDR X1, [X8]
	0x01DA122C BL 0x21A3F50
	0x01DA1230 LDR X8, [X21]
	0x01DA1234 LDR X20, [X19 + 0xB8]
	0x01DA1238 MOV X21, X0
	0x01DA123C LDR W9, [X8 + 0xE0]
	0x01DA1240 CBNZ W9, 0x1DA124C
	0x01DA1244 MOV X0, X8
	0x01DA1248 BL 0x1C16DFC
	0x01DA124C MOV X0, X21
	0x01DA1250 MOV X1, X31
	0x01DA1254 MOV X2, X31
	0x01DA1258 BL 0x3C354F8
	0x01DA125C MOV X1, X31
	0x01DA1260 TBZ X0, 0x0, 0x1DA1278
	0x01DA1264 CBZ X21, 0x1DA1300
	0x01DA1268 MOV X0, X21
	0x01DA126C MOV X1, X31
	0x01DA1270 BL 0x3C32E90
	0x01DA1274 MOV X1, X0
	0x01DA1278 CBZ X20, 0x1DA1300

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2638000
	005 Move X20, 0x2353000
	006 Move W8, [X19+2669]
	007 Move X20, [X20+1496]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2353000
	013 Move X0, [X0+1496]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2669], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X20]
	023 Move X8, [X0+184]
	024 Move X1, X31
	025 Move W0, [X8]
	026 Call LayerMask.op_Implicit, X0
	027 Move X8, [X20]
	028 Move W19, W0
	029 Move X1, X31
	030 Move X8, [X8+184]
	031 Move W8, [X8+4]
	032 Move X0, X8
	033 Call LayerMask.op_Implicit, X0
	034 Move X8, [X20]
	035 Move W20, W0
	036 Move X1, X31
	037 Move X8, [X8+184]
	038 Move W8, [X8+40]
	039 Move X0, X8
	040 Call LayerMask.op_Implicit, X0
	041 Or W8, W20, W19
	042 Or W0, W8, W0
	043 Move X1, X31
	044 Call LayerMask.op_Implicit, X0
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 And X0, X0, 0
	048 Move X30, [X31+32]
	049 Return X0

Method: System.Void Awake()

Disassembly:
	0x01DA127C ADRP X8, 0xFFFFFFFFFED49000
	0x01DA1280 LDR V0, [X8 + 0x410]
	0x01DA1284 MOV X0, X20
	0x01DA1288 MOV V4.16B, V15.16B
	0x01DA128C MOV V5.16B, V8.16B
	0x01DA1290 FMUL S1, S11, S0
	0x01DA1294 FMUL S2, S12, S0
	0x01DA1298 FMUL S3, S13, S0
	0x01DA129C LDR V0, [X31 + 0xC]
	0x01DA12A0 MOV V6.16B, V9.16B
	0x01DA12A4 MOV W2, W31
	0x01DA12A8 FADD S0, S0, S1
	0x01DA12AC LDR V1, [X31 + 0x8]
	0x01DA12B0 FADD S1, S1, S2
	0x01DA12B4 FADD S2, S10, S3
	0x01DA12B8 MOV V3.16B, V14.16B
	0x01DA12BC BL 0x1DA15B0
	0x01DA12C0 MOV X0, X19
	0x01DA12C4 BL 0x1DA0104
	0x01DA12C8 TBNZ X0, 0x0, 0x1DA12E0
	0x01DA12CC MOVZ W1, 0x1
	0x01DA12D0 MOV X0, X19
	0x01DA12D4 BL 0x1DA016C
	0x01DA12D8 MOV X0, X19
	0x01DA12DC BL 0x1DA06F0
	0x01DA12E0 LDP X20, X19, [X31 + 0x90]
	0x01DA12E4 LDP X30, X21, [X31 + 0x80]
	0x01DA12E8 LDP D9, D8, [X31 + 0x70]
	0x01DA12EC LDP D11, D10, [X31 + 0x60]
	0x01DA12F0 LDP D13, D12, [X31 + 0x50]
	0x01DA12F4 LDP D15, D14, [X31 + 0x40]
	0x01DA12F8 ADD X31, X31, 0xA0
	0x01DA12FC RET
	0x01DA1300 BL 0x1C16F20
	0x01DA1304 STR X30, [X31 - 0x10]!
	0x01DA1308 LDR X0, [X0 + 0x80]
	0x01DA130C CBZ X0, 0x1DA131C
	0x01DA1310 MOV X1, X31
	0x01DA1314 LDR X30, [X31], #0x10
	0x01DA1318 B 0x1D924B0
	0x01DA131C BL 0x1C16F20
	0x01DA1320 MOV X1, X31
	0x01DA1324 B 0x1E73D04
	0x01DA1328 STP D11, D10, [X31 - 0x40]!
	0x01DA132C STP D9, D8, [X31 + 0x10]
	0x01DA1330 STP X30, X21, [X31 + 0x20]
	0x01DA1334 STP X20, X19, [X31 + 0x30]
	0x01DA1338 ADRP X20, 0x2637000
	0x01DA133C ADRP X21, 0x2352000
	0x01DA1340 LDRB W8, [X20 + 0xA70]
	0x01DA1344 LDR X21, [X21 + 0x598]
	0x01DA1348 MOV X19, X0
	0x01DA134C TBNZ X8, 0x0, 0x1DA1364
	0x01DA1350 ADRP X0, 0x2352000
	0x01DA1354 LDR X0, [X0 + 0x598]
	0x01DA1358 BL 0x1C16CF4
	0x01DA135C MOVZ W8, 0x1
	0x01DA1360 STRB W8, [X20 + 0xA70]
	0x01DA1364 LDR X0, [X21]
	0x01DA1368 LDR X20, [X19 + 0xD8]
	0x01DA136C LDR W8, [X0 + 0xE0]
	0x01DA1370 CBNZ W8, 0x1DA1378
	0x01DA1374 BL 0x1C16DFC
	0x01DA1378 MOV X0, X20
	0x01DA137C MOV X1, X31
	0x01DA1380 MOV X2, X31
	0x01DA1384 BL 0x3C354F8
	0x01DA1388 TBNZ X0, 0x0, 0x1DA13A8
	0x01DA138C MOV X0, X31
	0x01DA1390 BL 0x3C3C6C4
	0x01DA1394 LDR V1, [X19 + 0xEC]
	0x01DA1398 FSUB S0, S0, S1
	0x01DA139C FMOV S1, 3
	0x01DA13A0 FCMP S0, S1
	0x01DA13A4 B.PL 0x1DA13F0
	0x01DA13A8 LDR X0, [X21]
	0x01DA13AC LDR X20, [X19 + 0x38]
	0x01DA13B0 LDR W8, [X0 + 0xE0]
	0x01DA13B4 CBNZ W8, 0x1DA13BC
	0x01DA13B8 BL 0x1C16DFC
	0x01DA13BC MOV X0, X20
	0x01DA13C0 MOV X1, X31
	0x01DA13C4 MOV X2, X31
	0x01DA13C8 BL 0x3C354F8
	0x01DA13CC TBZ X0, 0x0, 0x1DA13F0
	0x01DA13D0 LDR X0, [X19 + 0x38]
	0x01DA13D4 CBZ X0, 0x1DA15AC
	0x01DA13D8 LDR X1, [X19 + 0x40]
	0x01DA13DC MOV X2, X31
	0x01DA13E0 BL 0x1EA1A20
	0x01DA13E4 TBZ X0, 0x0, 0x1DA13F0
	0x01DA13E8 MOV X0, X19
	0x01DA13EC BL 0x1DA078C
	0x01DA13F0 MOV X0, X19
	0x01DA13F4 BL 0x1DA0104
	0x01DA13F8 TBNZ X0, 0x0, 0x1DA1598
	0x01DA13FC LDR X0, [X21]
	0x01DA1400 LDR X20, [X19 + 0xD8]
	0x01DA1404 LDR W8, [X0 + 0xE0]
	0x01DA1408 CBNZ W8, 0x1DA1410
	0x01DA140C BL 0x1C16DFC
	0x01DA1410 MOV X0, X20
	0x01DA1414 MOV X1, X31
	0x01DA1418 MOV X2, X31
	0x01DA141C BL 0x3C354F8
	0x01DA1420 TBZ X0, 0x0, 0x1DA1598
	0x01DA1424 LDR X8, [X19 + 0xB0]
	0x01DA1428 CBZ X8, 0x1DA15AC
	0x01DA142C LDRB W8, [X8 + 0x180]
	0x01DA1430 CBZ W8, 0x1DA1598
	0x01DA1434 LDR X0, [X19 + 0xD8]
	0x01DA1438 CBZ X0, 0x1DA15AC
	0x01DA143C MOV X1, X31
	0x01DA1440 BL 0x3C3F58C
	0x01DA1444 MOV X0, X19
	0x01DA1448 MOV X1, X31
	0x01DA144C MOV V8.16B, V0.16B
	0x01DA1450 MOV V9.16B, V1.16B
	0x01DA1454 MOV V10.16B, V2.16B
	0x01DA1458 BL 0x3C32E90
	0x01DA145C CBZ X0, 0x1DA15AC
	0x01DA1460 MOV X1, X31
	0x01DA1464 BL 0x3C3F58C
	0x01DA1468 ADRP X8, 0xFFFFFFFFFED48000
	0x01DA146C FSUB S8, S8, S0
	0x01DA1470 FSUB S9, S9, S1
	0x01DA1474 FSUB S10, S10, S2
	0x01DA1478 LDR V2, [X8 + 0xF50]
	0x01DA147C FMUL S0, S8, S8
	0x01DA1480 FMUL S1, S9, S9
	0x01DA1484 FADD S0, S0, S1
	0x01DA1488 FMUL S1, S10, S10
	0x01DA148C FADD S11, S1, S0
	0x01DA1490 FCMP S11, S2
	0x01DA1494 B.LE 0x1DA1598
	0x01DA1498 LDR X0, [X19 + 0x40]
	0x01DA149C CBZ X0, 0x1DA1598
	0x01DA14A0 LDRB W8, [X0 + 0x60]
	0x01DA14A4 TBNZ X8, 0x1, 0x1DA1598
	0x01DA14A8 MOV X1, X31
	0x01DA14AC BL 0x1E93668
	0x01DA14B0 TBZ X0, 0x0, 0x1DA1598

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+128], X30
	003 Move [X31+136], X23
	004 Move [X31+144], X22
	005 Move [X31+152], X21
	006 Move [X31+160], X20
	007 Move [X31+168], X19
	008 Move X21, 0x2638000
	009 Move X22, 0x2356000
	010 Move X20, 0x2357000
	011 Move W8, [X21+2670]
	012 Move X22, [X22+3000]
	013 Move X20, [X20+592]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {39}
	019 Move X0, 0x2357000
	020 Move X0, [X0+600]
	021 Call 0x1C17CF4
	022 Move X0, 0x2354000
	023 Move X0, [X0+3696]
	024 Call 0x1C17CF4
	025 Move X0, 0x2356000
	026 Move X0, [X0+3000]
	027 Call 0x1C17CF4
	028 Move X0, 0x2357000
	029 Move X0, [X0+592]
	030 Call 0x1C17CF4
	031 Move X0, 0x2357000
	032 Move X0, [X0+608]
	033 Call 0x1C17CF4
	034 Move X0, 0x2357000
	035 Move X0, [X0+616]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X21+2670], W8
	039 Move X1, [X22]
	040 Move X0, X19
	041 Call 0x21A4894, X0
	042 Move [X19+176], X0
	043 Move X1, [X20]
	044 Move X0, X19
	045 Call 0x21A4894, X0
	046 Move X8, [X19+128]
	047 Move [X19+184], X0
	048 Compare X8, 0
	049 JumpIfEqual {165}
	050 Move X0, X8
	051 Move X1, X31
	052 Call Renderer.get_material, X0
	053 Move X22, 0x2638000
	054 Move W8, [X22+2752]
	055 Move W20, [X19+228]
	056 Move X21, X0
	057 Compare W8, 0
	058 JumpIfNotEqual {64}
	059 Move X0, 0x2357000
	060 Move X0, [X0+624]
	061 Call 0x1C17CF4
	062 Move W8, 1
	063 Move [X22+2752], W8
	064 Move X8, 0x2357000
	065 Move X8, [X8+624]
	066 Move X8, [X8]
	067 Move X8, [X8+184]
	068 Move V1, [X8+96]
	069 Move V0, [X8+112]
	070 Move V2, [X8+64]
	071 Move V3, [X8+80]
	072 Move [X31+96], V1
	073 Move [X31+104], V0
	074 Move [X31+64], V2
	075 Move [X31+72], V3
	076 Compare X21, 0
	077 JumpIfEqual {165}
	078 Move V0, [X31+64]
	079 Move V1, [X31+80]
	080 Move V2, [X31+96]
	081 Move V3, [X31+112]
	082 Add X2, X31, 0
	083 Move X0, X21
	084 Move W1, W20
	085 Move X3, X31
	086 Move [X31], V0
	087 Move [X31+8], V1
	088 Move [X31+32], V2
	089 Move [X31+40], V3
	090 Call Material.SetMatrix, X0, X1, X2
	091 Move X22, [X19+176]
	092 Compare X22, 0
	093 JumpIfEqual {165}
	094 Move X23, 0x2357000
	095 Move X23, [X23+600]
	096 Move X21, 0x2357000
	097 Move X20, [X22+528]
	098 Move X0, [X23]
	099 Move X21, [X21+616]
	100 Call 0x1C17F10
	101 Move X2, [X21]
	102 Move X1, X19
	103 Move X3, X31
	104 Move X21, X0
	105 Call Action`1<Object>..ctor, X0, X1, X2
	106 Move X0, X20
	107 Move X1, X21
	108 Move X2, X31
	109 Call Delegate.Combine, X0, X1
	110 Compare X0, 0
	111 JumpIfEqual {127}
	112 Move X21, [X23]
	113 Move X20, X0
	114 Move X1, X21
	115 Call 0x1C17E00
	116 Compare X0, 0
	117 JumpIfEqual {125}
	118 Move [X22+528], X0
	119 Move X21, [X23]
	120 Move X0, X20
	121 Move X1, X21
	122 Call 0x1C17E00
	123 Compare X0, 0
	124 JumpIfNotEqual {128}
	125 Move X0, X20
	126 Move X1, X21
	127 Move [X22+528], X31
	128 Move X22, [X19+176]
	129 Compare X22, 0
	130 JumpIfEqual {165}
	131 Move X23, 0x2354000
	132 Move X23, [X23+3696]
	133 Move X21, 0x2357000
	134 Move X20, [X22+456]
	135 Move X0, [X23]
	136 Move X21, [X21+608]
	137 Call 0x1C17F10
	138 Move X2, [X21]
	139 Move X1, X19
	140 Move X3, X31
	141 Move X21, X0
	142 Call Action..ctor, X0, X1, X2
	143 Move X0, X20
	144 Move X1, X21
	145 Move X2, X31
	146 Call Delegate.Combine, X0, X1
	147 Compare X0, 0
	148 JumpIfEqual {156}
	149 Move X1, [X23]
	150 Move X8, [X0]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move [X22+456], X0
	153 Move X8, [X0]
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Call 0x1C181E0
	156 Move [X22+456], X0
	157 Move X20, [X31+160]
	158 Move X19, [X31+168]
	159 Move X22, [X31+144]
	160 Move X21, [X31+152]
	161 Move X30, [X31+128]
	162 Move X23, [X31+136]
	163 Add X31, X31, 176
	164 Return 
	165 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x01DA14B4 ADRP X20, 0x2637000
	0x01DA14B8 LDRB W8, [X20 + 0x785]
	0x01DA14BC CBNZ W8, 0x1DA14D4
	0x01DA14C0 ADRP X0, 0x2352000
	0x01DA14C4 LDR X0, [X0 + 0x5A8]
	0x01DA14C8 BL 0x1C16CF4
	0x01DA14CC MOVZ W8, 0x1
	0x01DA14D0 STRB W8, [X20 + 0x785]
	0x01DA14D4 ADRP X8, 0x2352000
	0x01DA14D8 LDR X8, [X8 + 0x5A8]
	0x01DA14DC LDR X0, [X8]
	0x01DA14E0 LDR W8, [X0 + 0xE0]
	0x01DA14E4 CBNZ W8, 0x1DA14EC
	0x01DA14E8 BL 0x1C16DFC
	0x01DA14EC ADRP X8, 0xFFFFFFFFFED49000
	0x01DA14F0 LDR V1, [X8 + 0x17C]
	0x01DA14F4 FSQRT S0, S11
	0x01DA14F8 FCMP S0, S1
	0x01DA14FC B.LE 0x1DA1510
	0x01DA1500 FDIV S8, S8, S0
	0x01DA1504 FDIV S9, S9, S0
	0x01DA1508 FDIV S10, S10, S0
	0x01DA150C B 0x1DA1548
	0x01DA1510 ADRP X20, 0x2637000
	0x01DA1514 LDRB W8, [X20 + 0x783]
	0x01DA1518 CBNZ W8, 0x1DA1530
	0x01DA151C ADRP X0, 0x2352000
	0x01DA1520 LDR X0, [X0 + 0x5A0]
	0x01DA1524 BL 0x1C16CF4
	0x01DA1528 MOVZ W8, 0x1
	0x01DA152C STRB W8, [X20 + 0x783]
	0x01DA1530 ADRP X8, 0x2352000
	0x01DA1534 LDR X8, [X8 + 0x5A0]
	0x01DA1538 LDR X8, [X8]
	0x01DA153C LDR X8, [X8 + 0xB8]
	0x01DA1540 LDP S8, S9, [X8]
	0x01DA1544 LDR V10, [X8 + 0x8]
	0x01DA1548 LDR X0, [X19 + 0x88]
	0x01DA154C CBZ X0, 0x1DA15AC
	0x01DA1550 MOV X1, X31
	0x01DA1554 BL 0x3C3FA04
	0x01DA1558 FMUL S0, S8, S0
	0x01DA155C FMUL S1, S9, S1
	0x01DA1560 FMUL S2, S10, S2
	0x01DA1564 FADD S0, S0, S1
	0x01DA1568 FADD S0, S2, S0
	0x01DA156C FMOV S1, 0.5
	0x01DA1570 FCMP S0, S1
	0x01DA1574 B.LE 0x1DA1598
	0x01DA1578 ADRP X8, 0xFFFFFFFFFED48000
	0x01DA157C LDR V0, [X8 + 0xF54]
	0x01DA1580 MOV X0, X19
	0x01DA1584 LDP X20, X19, [X31 + 0x30]
	0x01DA1588 LDP X30, X21, [X31 + 0x20]
	0x01DA158C LDP D9, D8, [X31 + 0x10]
	0x01DA1590 LDP D11, D10, [X31], #0x40
	0x01DA1594 B 0x1DA1034
	0x01DA1598 LDP X20, X19, [X31 + 0x30]
	0x01DA159C LDP X30, X21, [X31 + 0x20]
	0x01DA15A0 LDP D9, D8, [X31 + 0x10]
	0x01DA15A4 LDP D11, D10, [X31], #0x40
	0x01DA15A8 RET
	0x01DA15AC BL 0x1C16F20
	0x01DA15B0 SUB X31, X31, 0xD0
	0x01DA15B4 STR D14, [X31 + 0x50]
	0x01DA15B8 STP D13, D12, [X31 + 0x60]
	0x01DA15BC STP D11, D10, [X31 + 0x70]
	0x01DA15C0 STP D9, D8, [X31 + 0x80]
	0x01DA15C4 STP X30, X25, [X31 + 0x90]
	0x01DA15C8 STP X24, X23, [X31 + 0xA0]
	0x01DA15CC STP X22, X21, [X31 + 0xB0]
	0x01DA15D0 STP X20, X19, [X31 + 0xC0]
	0x01DA15D4 ADRP X22, 0x2637000
	0x01DA15D8 ADRP X25, 0x2355000
	0x01DA15DC ADRP X24, 0x2355000
	0x01DA15E0 LDRB W8, [X22 + 0xA93]
	0x01DA15E4 LDR X25, [X25 + 0xB58]
	0x01DA15E8 LDR X24, [X24 + 0xB60]
	0x01DA15EC MOV W19, W2
	0x01DA15F0 MOV X20, X1
	0x01DA15F4 MOV V8.16B, V6.16B
	0x01DA15F8 MOV V9.16B, V5.16B
	0x01DA15FC MOV V10.16B, V4.16B
	0x01DA1600 MOV V11.16B, V3.16B
	0x01DA1604 MOV V12.16B, V2.16B
	0x01DA1608 MOV V13.16B, V1.16B
	0x01DA160C MOV V14.16B, V0.16B
	0x01DA1610 MOV X21, X0
	0x01DA1614 TBNZ X8, 0x0, 0x1DA1638
	0x01DA1618 ADRP X0, 0x2355000
	0x01DA161C LDR X0, [X0 + 0xB58]
	0x01DA1620 BL 0x1C16CF4
	0x01DA1624 ADRP X0, 0x2355000
	0x01DA1628 LDR X0, [X0 + 0xB60]
	0x01DA162C BL 0x1C16CF4
	0x01DA1630 MOVZ W8, 0x1
	0x01DA1634 STRB W8, [X22 + 0xA93]
	0x01DA1638 LDR X1, [X25]
	0x01DA163C LDR X22, [X21 + 0x38]
	0x01DA1640 LDR X23, [X21 + 0x88]
	0x01DA1644 ADD X0, X31, 0x40
	0x01DA1648 MOV V0.16B, V14.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2638000
	008 Move X21, 0x2356000
	009 Move W8, [X20+2671]
	010 Move X21, [X21+2680]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x2357000
	017 Move X0, [X0+600]
	018 Call 0x1C17CF4
	019 Move X0, 0x2354000
	020 Move X0, [X0+3696]
	021 Call 0x1C17CF4
	022 Move X0, 0x2356000
	023 Move X0, [X0+2680]
	024 Call 0x1C17CF4
	025 Move X0, 0x2357000
	026 Move X0, [X0+608]
	027 Call 0x1C17CF4
	028 Move X0, 0x2357000
	029 Move X0, [X0+616]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+2671], W8
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Compare X19, 0
	039 JumpIfEqual {116}
	040 Move W8, [X19+48]
	041 Move X22, [X19+176]
	042 Or W8, W8, 8
	043 Move [X19+48], W8
	044 Compare X22, 0
	045 JumpIfEqual {116}
	046 Move X23, 0x2357000
	047 Move X23, [X23+600]
	048 Move X21, 0x2357000
	049 Move X20, [X22+528]
	050 Move X0, [X23]
	051 Move X21, [X21+616]
	052 Call 0x1C17F10
	053 Move X2, [X21]
	054 Move X1, X19
	055 Move X3, X31
	056 Move X21, X0
	057 Call Action`1<Object>..ctor, X0, X1, X2
	058 Move X0, X20
	059 Move X1, X21
	060 Move X2, X31
	061 Call Delegate.Remove, X0, X1
	062 Compare X0, 0
	063 JumpIfEqual {79}
	064 Move X21, [X23]
	065 Move X20, X0
	066 Move X1, X21
	067 Call 0x1C17E00
	068 Compare X0, 0
	069 JumpIfEqual {77}
	070 Move [X22+528], X0
	071 Move X21, [X23]
	072 Move X0, X20
	073 Move X1, X21
	074 Call 0x1C17E00
	075 Compare X0, 0
	076 JumpIfNotEqual {80}
	077 Move X0, X20
	078 Move X1, X21
	079 Move [X22+528], X31
	080 Move X22, [X19+176]
	081 Compare X22, 0
	082 JumpIfEqual {116}
	083 Move X23, 0x2354000
	084 Move X23, [X23+3696]
	085 Move X21, 0x2357000
	086 Move X20, [X22+456]
	087 Move X0, [X23]
	088 Move X21, [X21+608]
	089 Call 0x1C17F10
	090 Move X2, [X21]
	091 Move X1, X19
	092 Move X3, X31
	093 Move X21, X0
	094 Call Action..ctor, X0, X1, X2
	095 Move X0, X20
	096 Move X1, X21
	097 Move X2, X31
	098 Call Delegate.Remove, X0, X1
	099 Compare X0, 0
	100 JumpIfEqual {108}
	101 Move X1, [X23]
	102 Move X8, [X0]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move [X22+456], X0
	105 Move X8, [X0]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Call 0x1C181E0
	108 Move [X22+456], X0
	109 Move X20, [X31+32]
	110 Move X19, [X31+40]
	111 Move X22, [X31+16]
	112 Move X21, [X31+24]
	113 Move X30, [X31+48]
	114 Move X23, [X31+56]
	115 Return 
	116 Call 0x1C17F20

Method: System.Void InitMtx()

Disassembly:
	0x01DA164C MOV V1.16B, V13.16B
	0x01DA1650 MOV V2.16B, V12.16B
	0x01DA1654 STP X31, X31, [X31 + 0x40]
	0x01DA1658 BL 0x243BFEC
	0x01DA165C LDR X1, [X24]
	0x01DA1660 ADD X0, X31, 0x28
	0x01DA1664 MOV V0.16B, V11.16B
	0x01DA1668 MOV V1.16B, V10.16B
	0x01DA166C MOV V2.16B, V9.16B
	0x01DA1670 MOV V3.16B, V8.16B
	0x01DA1674 STP X31, X31, [X31 + 0x28]
	0x01DA1678 STR W31, [X31 + 0x38]
	0x01DA167C BL 0x2437C9C
	0x01DA1680 CBZ X22, 0x1DA1728
	0x01DA1684 LDUR V0, [X31 + 0x28]
	0x01DA1688 LDR W8, [X31 + 0x38]
	0x01DA168C LDP X2, X3, [X31 + 0x40]
	0x01DA1690 ADD X4, X31, 0x10
	0x01DA1694 MOV X0, X22
	0x01DA1698 MOV X1, X23
	0x01DA169C MOV X5, X31
	0x01DA16A0 MOV X6, X31
	0x01DA16A4 MOV W7, W31
	0x01DA16A8 STR V0, [X31 + 0x1]
	0x01DA16AC STR W8, [X31 + 0x20]
	0x01DA16B0 STR X31, [X31]
	0x01DA16B4 BL 0x1EAE848
	0x01DA16B8 CBZ X0, 0x1DA1728
	0x01DA16BC MOV X1, X31
	0x01DA16C0 MOV X22, X0
	0x01DA16C4 BL 0x3C32E90
	0x01DA16C8 CBZ X0, 0x1DA1728
	0x01DA16CC MOV X1, X20
	0x01DA16D0 MOV X2, X31
	0x01DA16D4 BL 0x3C3FD20
	0x01DA16D8 LDR X8, [X22 + 0x20]
	0x01DA16DC LDR X0, [X21 + 0x80]
	0x01DA16E0 CBZ X8, 0x1DA1720
	0x01DA16E4 LDR W1, [X8]
	0x01DA16E8 CBZ X0, 0x1DA1728
	0x01DA16EC AND W2, W19, 0x1

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+128], X30
	003 Move [X31+136], X21
	004 Move [X31+144], X20
	005 Move [X31+152], X19
	006 Move X19, X0
	007 Move X0, [X0+128]
	008 Compare X0, 0
	009 JumpIfEqual {56}
	010 Move X1, X31
	011 Call Renderer.get_sharedMaterial, X0
	012 Move X21, 0x2638000
	013 Move W8, [X21+2752]
	014 Move W19, [X19+228]
	015 Move X20, X0
	016 Compare W8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, 0x2357000
	019 Move X0, [X0+624]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+2752], W8
	023 Move X8, 0x2357000
	024 Move X8, [X8+624]
	025 Move X8, [X8]
	026 Move X8, [X8+184]
	027 Move V1, [X8+96]
	028 Move V0, [X8+112]
	029 Move V2, [X8+64]
	030 Move V3, [X8+80]
	031 Move [X31+96], V1
	032 Move [X31+104], V0
	033 Move [X31+64], V2
	034 Move [X31+72], V3
	035 Compare X20, 0
	036 JumpIfEqual {56}
	037 Move V0, [X31+64]
	038 Move V1, [X31+80]
	039 Move V2, [X31+96]
	040 Move V3, [X31+112]
	041 Add X2, X31, 0
	042 Move X0, X20
	043 Move W1, W19
	044 Move X3, X31
	045 Move [X31], V0
	046 Move [X31+8], V1
	047 Move [X31+32], V2
	048 Move [X31+40], V3
	049 Call Material.SetMatrix, X0, X1, X2
	050 Move X20, [X31+144]
	051 Move X19, [X31+152]
	052 Move X30, [X31+128]
	053 Move X21, [X31+136]
	054 Add X31, X31, 160
	055 Return 
	056 Call 0x1C17F20

Method: System.Void HandleIsSuctionedChanged()

Disassembly:
	0x01DA16F0 MOV X3, X31
	0x01DA16F4 BL 0x1D92528
	0x01DA16F8 LDP X20, X19, [X31 + 0xC0]
	0x01DA16FC LDP X22, X21, [X31 + 0xB0]
	0x01DA1700 LDP X24, X23, [X31 + 0xA0]
	0x01DA1704 LDP X30, X25, [X31 + 0x90]
	0x01DA1708 LDP D9, D8, [X31 + 0x80]
	0x01DA170C LDP D11, D10, [X31 + 0x70]
	0x01DA1710 LDP D13, D12, [X31 + 0x60]
	0x01DA1714 LDR V14, [X31 + 0x50]
	0x01DA1718 ADD X31, X31, 0xD0
	0x01DA171C RET
	0x01DA1720 MOV X1, X31
	0x01DA1724 CBNZ X0, 0x1DA16EC
	0x01DA1728 BL 0x1C16F20
	0x01DA172C SUB X31, X31, 0x70
	0x01DA1730 STP D15, D14, [X31 + 0x10]
	0x01DA1734 STP D13, D12, [X31 + 0x20]
	0x01DA1738 STP D11, D10, [X31 + 0x30]
	0x01DA173C STP D9, D8, [X31 + 0x40]
	0x01DA1740 STP X30, X21, [X31 + 0x50]
	0x01DA1744 STP X20, X19, [X31 + 0x60]
	0x01DA1748 MOV X20, X1
	0x01DA174C MOV X19, X0
	0x01DA1750 BL 0x1DA01D0
	0x01DA1754 CBZ X20, 0x1DA18E4
	0x01DA1758 MOV X21, X0
	0x01DA175C MOV X0, X20
	0x01DA1760 MOV X1, X31
	0x01DA1764 BL 0x3C8A29C
	0x01DA1768 CBZ X0, 0x1DA18E4
	0x01DA176C MOV X1, X31
	0x01DA1770 BL 0x3C35734
	0x01DA1774 MOV W1, W0
	0x01DA1778 AND X0, X21, 0x0
	0x01DA177C MOV X2, X31
	0x01DA1780 BL 0x3B23FA4
	0x01DA1784 TBZ X0, 0x0, 0x1DA1898
	0x01DA1788 LDR X0, [X19 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call Plunger.UpdateStretchySuction, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {52}
	009 Move W8, [X0+96]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 2
	012 Compare TEMP, 2
	013 JumpIfEqual {52}
	014 Move X1, X31
	015 Call NetworkObject.get_HasStateAuthority, X0
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfNotEqual {52}
	020 Move X0, X19
	021 Call Plunger.get_isSuctioned, X0
	022 Move X8, [X19+184]
	023 Compare X8, 0
	024 JumpIfEqual {59}
	025 Move W20, W0
	026 Move X0, X8
	027 Call StickyItem.get_isStuck, X0
	028 Move TEMP, X20
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {40}
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {52}
	036 Move X8, -19623936
	037 Move V0, [X8+3876]
	038 Move X0, X19
	039 Call Plunger.CheckAndStick, X0, V0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {52}
	044 Move X8, [X19+184]
	045 Compare X8, 0
	046 JumpIfEqual {59}
	047 Move X0, [X8+128]
	048 Compare X0, 0
	049 JumpIfEqual {59}
	050 Move X1, X31
	051 Call GrabbableItem.ResetStuckAnchor, X0
	052 Move X0, X31
	053 Call Time.get_time
	054 Move [X19+236], S0
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Return 
	059 Call 0x1C17F20

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01DA2320 LDP D9, D8, [X31 + 0x28]
	0x01DA2324 LDR V10, [X31 + 0x20]

ISIL:
	001 Move X1, X31
	002 Call NetworkBehaviour.FixedUpdateNetwork, X0
	003 Return 

Method: System.Void LateUpdate()

Disassembly:
	0x01DA2328 ADD X31, X31, 0x50
	0x01DA232C RET
	0x01DA2330 BL 0x1C16F20
	0x01DA2334 STP X30, X19, [X31 - 0x10]!
	0x01DA2338 MOV X19, X0
	0x01DA233C MOV X0, X31
	0x01DA2340 BL 0x3C3C88C
	0x01DA2344 LDR W8, [X19 + 0xCC]
	0x01DA2348 SUB W8, W0, W8
	0x01DA234C CMP W8, 0x2
	0x01DA2350 CSET W8, LT
	0x01DA2354 STRB W8, [X19 + 0xD4]
	0x01DA2358 LDP X30, X19, [X31], #0x10
	0x01DA235C RET
	0x01DA2360 STP X30, X21, [X31 - 0x20]!
	0x01DA2364 STP X20, X19, [X31 + 0x10]
	0x01DA2368 LDRB W8, [X0 + 0xD5]
	0x01DA236C MOV X19, X0
	0x01DA2370 CBZ W8, 0x1DA2388
	0x01DA2374 LDRB W8, [X19 + 0xD4]
	0x01DA2378 CBZ W8, 0x1DA2384
	0x01DA237C MOVZ W8, 0x1
	0x01DA2380 B 0x1DA2388
	0x01DA2384 STRB W31, [X19 + 0xD5]
	0x01DA2388 LDRB W9, [X19 + 0xD6]
	0x01DA238C CMP W8, W9
	0x01DA2390 B.EQ 0x1DA24A0
	0x01DA2394 LDR X0, [X19 + 0x40]
	0x01DA2398 CBZ X0, 0x1DA24A0
	0x01DA239C LDRB W8, [X0 + 0x60]
	0x01DA23A0 TBNZ X8, 0x1, 0x1DA24A0
	0x01DA23A4 MOV X1, X31
	0x01DA23A8 BL 0x1E93668
	0x01DA23AC TBZ X0, 0x0, 0x1DA24A0
	0x01DA23B0 ADRP X21, 0x2636000
	0x01DA23B4 LDRB W8, [X21 + 0x784]
	0x01DA23B8 LDRB W20, [X19 + 0xD5]
	0x01DA23BC CBNZ W8, 0x1DA23D4
	0x01DA23C0 ADRP X0, 0x2351000
	0x01DA23C4 LDR X0, [X0 + 0x5A8]
	0x01DA23C8 BL 0x1C16CF4
	0x01DA23CC MOVZ W8, 0x1
	0x01DA23D0 STRB W8, [X21 + 0x784]
	0x01DA23D4 ADRP X8, 0x2351000
	0x01DA23D8 LDR X8, [X8 + 0x5A8]
	0x01DA23DC LDR X0, [X8]
	0x01DA23E0 LDR W8, [X0 + 0xE0]
	0x01DA23E4 CBNZ W8, 0x1DA23EC
	0x01DA23E8 BL 0x1C16DFC
	0x01DA23EC CBZ W20, 0x1DA2420
	0x01DA23F0 LDR X20, [X19 + 0x98]
	0x01DA23F4 MOV X0, X19
	0x01DA23F8 MOV X1, X31
	0x01DA23FC BL 0x3C32E90
	0x01DA2400 CBZ X0, 0x1DA24B4
	0x01DA2404 MOV X1, X31
	0x01DA2408 BL 0x3C3F58C
	0x01DA240C FMOV S3, 1
	0x01DA2410 MOV X0, X20
	0x01DA2414 MOV X1, X31
	0x01DA2418 BL 0x1DC15C4
	0x01DA241C B 0x1DA24A0
	0x01DA2420 LDR X20, [X19 + 0xA0]
	0x01DA2424 MOV X0, X19
	0x01DA2428 MOV X1, X31
	0x01DA242C BL 0x3C32E90
	0x01DA2430 CBZ X0, 0x1DA24B4
	0x01DA2434 MOV X1, X31
	0x01DA2438 BL 0x3C3F58C
	0x01DA243C FMOV S3, 1
	0x01DA2440 MOV X0, X20
	0x01DA2444 MOV X1, X31
	0x01DA2448 BL 0x1DC15C4
	0x01DA244C ADRP X20, 0x2636000
	0x01DA2450 LDRB W8, [X20 + 0x783]
	0x01DA2454 CBNZ W8, 0x1DA246C
	0x01DA2458 ADRP X0, 0x2351000
	0x01DA245C LDR X0, [X0 + 0x5A0]
	0x01DA2460 BL 0x1C16CF4
	0x01DA2464 MOVZ W8, 0x1
	0x01DA2468 STRB W8, [X20 + 0x783]
	0x01DA246C ADRP X8, 0x2351000
	0x01DA2470 LDR X8, [X8 + 0x5A0]
	0x01DA2474 MOV X0, X19
	0x01DA2478 LDR X8, [X8]
	0x01DA247C LDR X8, [X8 + 0xB8]
	0x01DA2480 LDR V0, [X8]
	0x01DA2484 LDR V1, [X8 + 0x8]
	0x01DA2488 MOVZ W8, 0x999A
	0x01DA248C MOVK W8, 0x3E990000
	0x01DA2490 STR D0, [X19 + 0xD8]
	0x01DA2494 STR S1, [X19 + 0xE0]
	0x01DA2498 STR W8, [X19 + 0xC0]
	0x01DA249C BL 0x1DA1CF0
	0x01DA24A0 LDRB W8, [X19 + 0xD5]
	0x01DA24A4 STRB W8, [X19 + 0xD6]
	0x01DA24A8 LDP X20, X19, [X31 + 0x10]
	0x01DA24AC LDP X30, X21, [X31], #0x20
	0x01DA24B0 RET
	0x01DA24B4 BL 0x1C16F20
	0x01DA24B8 B 0x1DA24BC
	0x01DA24BC STP X30, X19, [X31 - 0x10]!
	0x01DA24C0 MOV X19, X0
	0x01DA24C4 BL 0x1DA2124
	0x01DA24C8 MOV X0, X19
	0x01DA24CC BL 0x1DA1CF0
	0x01DA24D0 ADRP X8, 0xFFFFFFFFFED48000
	0x01DA24D4 LDR V0, [X19 + 0xC0]
	0x01DA24D8 LDR V1, [X8 + 0x44C]
	0x01DA24DC FCMP S0, S1
	0x01DA24E0 B.PL 0x1DA24F0
	0x01DA24E4 MOV X0, X19
	0x01DA24E8 LDP X30, X19, [X31], #0x10
	0x01DA24EC B 0x1DA24F8
	0x01DA24F0 LDP X30, X19, [X31], #0x10
	0x01DA24F4 RET
	0x01DA24F8 SUB X31, X31, 0x80
	0x01DA24FC STR D10, [X31 + 0x30]
	0x01DA2500 STP D9, D8, [X31 + 0x38]
	0x01DA2504 STR X30, [X31 + 0x48]
	0x01DA2508 STP X24, X23, [X31 + 0x50]
	0x01DA250C STP X22, X21, [X31 + 0x60]
	0x01DA2510 STP X20, X19, [X31 + 0x70]
	0x01DA2514 ADRP X20, 0x2636000
	0x01DA2518 LDRB W8, [X20 + 0xA79]
	0x01DA251C MOV X19, X0
	0x01DA2520 TBNZ X8, 0x0, 0x1DA2544
	0x01DA2524 ADRP X0, 0x2351000
	0x01DA2528 LDR X0, [X0 + 0x598]
	0x01DA252C BL 0x1C16CF4
	0x01DA2530 ADRP X0, 0x2353000
	0x01DA2534 LDR X0, [X0 + 0x7C8]
	0x01DA2538 BL 0x1C16CF4
	0x01DA253C MOVZ W8, 0x1
	0x01DA2540 STRB W8, [X20 + 0xA79]
	0x01DA2544 STR X31, [X31 + 0x28]
	0x01DA2548 STR W31, [X31 + 0x20]
	0x01DA254C STR X31, [X31 + 0x18]
	0x01DA2550 LDR X0, [X19 + 0xB8]
	0x01DA2554 CBZ X0, 0x1DA28A8
	0x01DA2558 MOV X1, X31
	0x01DA255C BL 0x1D8EEF0
	0x01DA2560 TBZ X0, 0x0, 0x1DA2888
	0x01DA2564 LDR V0, [X19 + 0xC0]
	0x01DA2568 FCMP S0, 0x0
	0x01DA256C B.LE 0x1DA2888
	0x01DA2570 LDR X0, [X19 + 0xB8]
	0x01DA2574 CBZ X0, 0x1DA28A8
	0x01DA2578 MOV X1, X31
	0x01DA257C BL 0x1D89D0C
	0x01DA2580 TBZ X0, 0x0, 0x1DA2888
	0x01DA2584 ADD X1, X31, 0x28
	0x01DA2588 MOV X0, X19
	0x01DA258C BL 0x1DA2AC8
	0x01DA2590 LDR X20, [X31 + 0x28]
	0x01DA2594 CBZ X20, 0x1DA28A8
	0x01DA2598 LDR X8, [X20 + 0x150]
	0x01DA259C CBZ X8, 0x1DA28A8
	0x01DA25A0 LDP S8, S9, [X8 + 0xA8]
	0x01DA25A4 LDR V10, [X8 + 0xB0]
	0x01DA25A8 TBNZ X0, 0x0, 0x1DA2798
	0x01DA25AC ADRP X22, 0x2353000

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x2637000
	010 Move X21, 0x2352000
	011 Move W8, [X20+2672]
	012 Move X21, [X21+1432]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x2352000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2672], W8
	023 Move X0, [X21]
	024 Move X20, [X19+216]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Inequality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {43}
	037 Move X0, X31
	038 Call Time.get_time
	039 Move V1, [X19+236]
	040 Subtract S0, S0, S1
	041 Move S1, 3
	042 NotImplemented "Instruction FCMP not yet implemented."
	043 Move X0, [X21]
	044 Move X20, [X19+56]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Inequality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {69}
	057 Move X0, [X19+56]
	058 Compare X0, 0
	059 JumpIfEqual {208}
	060 Move X1, [X19+64]
	061 Move X2, X31
	062 Call NetworkRunner.Exists, X0, X1
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {69}
	067 Move X0, X19
	068 Call Plunger.UpdateStretchySuction, X0
	069 Move X0, X19
	070 Call Plunger.get_isSuctioned, X0
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {199}
	075 Move X0, [X21]
	076 Move X20, [X19+216]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {81}
	080 Call 0x1C17DFC
	081 Move X0, X20
	082 Move X1, X31
	083 Move X2, X31
	084 Call Object.op_Inequality, X0, X1
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {199}
	089 Move X8, [X19+176]
	090 Compare X8, 0
	091 JumpIfEqual {208}
	092 Move W8, [X8+384]
	093 Compare W8, 0
	094 JumpIfEqual {199}
	095 Move X0, [X19+216]
	096 Compare X0, 0
	097 JumpIfEqual {208}
	098 Move X1, X31
	099 Call Transform.get_position, X0
	100 Move X0, X19
	101 Move X1, X31
	102 Move V8, V0
	103 Move V9, V1
	104 Move V10, V2
	105 Call Component.get_transform, X0
	106 Compare X0, 0
	107 JumpIfEqual {208}
	108 Move X1, X31
	109 Call Transform.get_position, X0
	110 Move X8, -19628032
	111 Subtract S8, S8, S0
	112 Subtract S9, S9, S1
	113 Subtract S10, S10, S2
	114 Move V2, [X8+3920]
	115 Multiply S0, S8, S8
	116 Multiply S1, S9, S9
	117 Add S0, S0, S1
	118 Multiply S1, S10, S10
	119 Add S11, S1, S0
	120 NotImplemented "Instruction FCMP not yet implemented."
	121 Move X0, [X19+64]
	122 Compare X0, 0
	123 JumpIfEqual {199}
	124 Move W8, [X0+96]
	125 Move TEMP, X8
	126 And TEMP, TEMP, 2
	127 Compare TEMP, 2
	128 JumpIfEqual {199}
	129 Move X1, X31
	130 Call NetworkObject.get_HasStateAuthority, X0
	131 Move TEMP, X0
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfNotEqual {199}
	135 Move X20, 0x2637000
	136 Move W8, [X20+1925]
	137 Compare W8, 0
	138 JumpIfNotEqual {144}
	139 Move X0, 0x2352000
	140 Move X0, [X0+1448]
	141 Call 0x1C17CF4
	142 Move W8, 1
	143 Move [X20+1925], W8
	144 Move X8, 0x2352000
	145 Move X8, [X8+1448]
	146 Move X0, [X8]
	147 Move W8, [X0+224]
	148 Compare W8, 0
	149 JumpIfNotEqual {151}
	150 Call 0x1C17DFC
	151 Move X8, -19623936
	152 Move V1, [X8+380]
	153 NotImplemented "Instruction FSQRT not yet implemented."
	154 NotImplemented "Instruction FCMP not yet implemented."
	155 NotImplemented "Instruction FDIV not yet implemented."
	156 NotImplemented "Instruction FDIV not yet implemented."
	157 NotImplemented "Instruction FDIV not yet implemented."
	158 Move X20, 0x2637000
	159 Move W8, [X20+1923]
	160 Compare W8, 0
	161 JumpIfNotEqual {167}
	162 Move X0, 0x2352000
	163 Move X0, [X0+1440]
	164 Call 0x1C17CF4
	165 Move W8, 1
	166 Move [X20+1923], W8
	167 Move X8, 0x2352000
	168 Move X8, [X8+1440]
	169 Move X8, [X8]
	170 Move X8, [X8+184]
	171 Move S8, [X8]
	172 Move S9, [X8+4]
	173 Move V10, [X8+8]
	174 Move X0, [X19+136]
	175 Compare X0, 0
	176 JumpIfEqual {208}
	177 Move X1, X31
	178 Call Transform.get_forward, X0
	179 Multiply S0, S8, S0
	180 Multiply S1, S9, S1
	181 Multiply S2, S10, S2
	182 Add S0, S0, S1
	183 Add S0, S2, S0
	184 Move S1, 0.5
	185 NotImplemented "Instruction FCMP not yet implemented."
	186 Move X8, -19628032
	187 Move V0, [X8+3924]
	188 Move X0, X19
	189 Move X20, [X31+48]
	190 Move X19, [X31+56]
	191 Move X30, [X31+32]
	192 Move X21, [X31+40]
	193 Move D9, [X31+16]
	194 Move D8, [X31+24]
	195 Move D11, [X31+64]
	196 Move D10, [X31+72]
	197 Call Plunger.CheckAndStick, X0, V0
	198 Return 
	199 Move X20, [X31+48]
	200 Move X19, [X31+56]
	201 Move X30, [X31+32]
	202 Move X21, [X31+40]
	203 Move D9, [X31+16]
	204 Move D8, [X31+24]
	205 Move D11, [X31+64]
	206 Move D10, [X31+72]
	207 Return 
	208 Call 0x1C17F20

Method: System.Void UpdateStretchySuction()

Disassembly:
	0x01DA178C CBZ X0, 0x1DA1898
	0x01DA1790 LDRB W8, [X0 + 0x60]
	0x01DA1794 TBNZ X8, 0x1, 0x1DA1898
	0x01DA1798 MOV X1, X31
	0x01DA179C BL 0x1E93668
	0x01DA17A0 TBZ X0, 0x0, 0x1DA1898
	0x01DA17A4 LDR X0, [X19 + 0xB8]
	0x01DA17A8 CBZ X0, 0x1DA18E4
	0x01DA17AC BL 0x1DA0F8C
	0x01DA17B0 TBNZ X0, 0x0, 0x1DA1898
	0x01DA17B4 LDR X0, [X19 + 0x88]
	0x01DA17B8 CBZ X0, 0x1DA18E4
	0x01DA17BC MOV X1, X31
	0x01DA17C0 BL 0x3C3FA04
	0x01DA17C4 ADRP X21, 0x2637000
	0x01DA17C8 LDRB W8, [X21 + 0xABD]
	0x01DA17CC MOV V8.16B, V0.16B
	0x01DA17D0 MOV V9.16B, V1.16B
	0x01DA17D4 MOV V13.16B, V2.16B
	0x01DA17D8 CBNZ W8, 0x1DA17F0
	0x01DA17DC ADRP X0, 0x2352000
	0x01DA17E0 LDR X0, [X0 + 0x5A0]
	0x01DA17E4 BL 0x1C16CF4
	0x01DA17E8 MOVZ W8, 0x1
	0x01DA17EC STRB W8, [X21 + 0xABD]
	0x01DA17F0 ADRP X8, 0x2352000
	0x01DA17F4 LDR X8, [X8 + 0x5A0]
	0x01DA17F8 MOV X0, X20
	0x01DA17FC MOV X1, X31
	0x01DA1800 LDR X8, [X8]
	0x01DA1804 LDR X8, [X8 + 0xB8]
	0x01DA1808 LDP S14, S15, [X8 + 0x24]
	0x01DA180C LDR V10, [X8 + 0x2C]
	0x01DA1810 BL 0x3C89FC0
	0x01DA1814 LDR X0, [X19 + 0x88]
	0x01DA1818 STR S0, [X31 + 0xC]
	0x01DA181C CBZ X0, 0x1DA18E4
	0x01DA1820 ADRP X8, 0xFFFFFFFFFED49000
	0x01DA1824 LDR V3, [X8 + 0x10C]
	0x01DA1828 MOV V11.16B, V1.16B
	0x01DA182C MOV V12.16B, V2.16B
	0x01DA1830 FMUL S1, S8, S14
	0x01DA1834 FMUL S2, S9, S15
	0x01DA1838 FMUL S0, S13, S10
	0x01DA183C FADD S1, S1, S2
	0x01DA1840 FADD S0, S0, S1
	0x01DA1844 FMOV S4, 3
	0x01DA1848 FCMP S0, S3
	0x01DA184C FMOV S0, 15
	0x01DA1850 MOV X1, X31
	0x01DA1854 FCSEL S14, S0, S4, GT
	0x01DA1858 BL 0x3C3FA04
	0x01DA185C MOV X0, X19
	0x01DA1860 MOV V9.16B, V0.16B
	0x01DA1864 MOV V13.16B, V1.16B
	0x01DA1868 MOV V8.16B, V2.16B
	0x01DA186C BL 0x1DA0104
	0x01DA1870 TBNZ X0, 0x0, 0x1DA18B8
	0x01DA1874 LDR V0, [X31 + 0xC]
	0x01DA1878 FMUL S1, S11, S13
	0x01DA187C FMUL S0, S0, S9
	0x01DA1880 FADD S0, S0, S1
	0x01DA1884 FMUL S1, S12, S8
	0x01DA1888 FADD S0, S1, S0
	0x01DA188C FNEG S0, S0
	0x01DA1890 FCMP S14, S0
	0x01DA1894 B.MI 0x1DA18B8
	0x01DA1898 LDP X20, X19, [X31 + 0x60]
	0x01DA189C LDP X30, X21, [X31 + 0x50]
	0x01DA18A0 LDP D9, D8, [X31 + 0x40]
	0x01DA18A4 LDP D11, D10, [X31 + 0x30]
	0x01DA18A8 LDP D13, D12, [X31 + 0x20]
	0x01DA18AC LDP D15, D14, [X31 + 0x10]
	0x01DA18B0 ADD X31, X31, 0x70
	0x01DA18B4 RET
	0x01DA18B8 ADRP X8, 0xFFFFFFFFFED48000
	0x01DA18BC LDR V0, [X8 + 0xF24]
	0x01DA18C0 MOV X0, X19
	0x01DA18C4 LDP X20, X19, [X31 + 0x60]
	0x01DA18C8 LDP X30, X21, [X31 + 0x50]
	0x01DA18CC LDP D9, D8, [X31 + 0x40]
	0x01DA18D0 LDP D11, D10, [X31 + 0x30]
	0x01DA18D4 LDP D13, D12, [X31 + 0x20]
	0x01DA18D8 LDP D15, D14, [X31 + 0x10]
	0x01DA18DC ADD X31, X31, 0x70
	0x01DA18E0 B 0x1DA1034
	0x01DA18E4 BL 0x1C16F20
	0x01DA18E8 B 0x1DA172C
	0x01DA18EC STR X30, [X31 - 0x30]!
	0x01DA18F0 STP X22, X21, [X31 + 0x10]
	0x01DA18F4 STP X20, X19, [X31 + 0x20]
	0x01DA18F8 ADRP X21, 0x2637000
	0x01DA18FC ADRP X22, 0x2352000
	0x01DA1900 LDRB W8, [X21 + 0xA73]
	0x01DA1904 LDR X22, [X22 + 0x598]
	0x01DA1908 MOV X20, X1
	0x01DA190C MOV X19, X0
	0x01DA1910 TBNZ X8, 0x0, 0x1DA1928
	0x01DA1914 ADRP X0, 0x2352000
	0x01DA1918 LDR X0, [X0 + 0x598]
	0x01DA191C BL 0x1C16CF4
	0x01DA1920 MOVZ W8, 0x1
	0x01DA1924 STRB W8, [X21 + 0xA73]
	0x01DA1928 LDR X0, [X22]
	0x01DA192C LDR W8, [X0 + 0xE0]
	0x01DA1930 CBNZ W8, 0x1DA1938
	0x01DA1934 BL 0x1C16DFC
	0x01DA1938 MOV X0, X20
	0x01DA193C MOV X1, X31
	0x01DA1940 MOV X2, X31
	0x01DA1944 BL 0x3C3883C
	0x01DA1948 LDRB W8, [X19 + 0xE8]
	0x01DA194C TBZ X0, 0x0, 0x1DA197C
	0x01DA1950 CBZ W8, 0x1DA1980
	0x01DA1954 LDR X0, [X19 + 0x88]
	0x01DA1958 CBZ X0, 0x1DA1A84
	0x01DA195C LDR X21, [X19 + 0xA0]
	0x01DA1960 MOV X1, X31
	0x01DA1964 BL 0x3C3F58C
	0x01DA1968 FMOV S3, 1
	0x01DA196C MOV X0, X21
	0x01DA1970 MOV X1, X31
	0x01DA1974 BL 0x1DD1B94
	0x01DA1978 B 0x1DA1980
	0x01DA197C CBZ W8, 0x1DA19C4
	0x01DA1980 LDR X0, [X22]
	0x01DA1984 LDR W8, [X0 + 0xE0]
	0x01DA1988 CBNZ W8, 0x1DA1990
	0x01DA198C BL 0x1C16DFC
	0x01DA1990 MOV X0, X20
	0x01DA1994 MOV X1, X31
	0x01DA1998 MOV X2, X31
	0x01DA199C BL 0x3C354F8
	0x01DA19A0 AND W8, W0, 0x1
	0x01DA19A4 MOV X0, X31
	0x01DA19A8 STRB W8, [X19 + 0xE8]
	0x01DA19AC BL 0x3C3C6C4
	0x01DA19B0 STR S0, [X19 + 0xEC]
	0x01DA19B4 LDP X20, X19, [X31 + 0x20]
	0x01DA19B8 LDP X22, X21, [X31 + 0x10]
	0x01DA19BC LDR X30, [X31], #0x30
	0x01DA19C0 RET
	0x01DA19C4 LDR X0, [X19 + 0x88]
	0x01DA19C8 CBZ X0, 0x1DA1A84
	0x01DA19CC LDR X21, [X19 + 0x98]
	0x01DA19D0 MOV X1, X31
	0x01DA19D4 BL 0x3C3F58C
	0x01DA19D8 FMOV S3, 1
	0x01DA19DC MOV X0, X21
	0x01DA19E0 MOV X1, X31
	0x01DA19E4 BL 0x1DD1B94
	0x01DA19E8 LDR X0, [X19 + 0x40]
	0x01DA19EC CBZ X0, 0x1DA1980
	0x01DA19F0 LDRB W8, [X0 + 0x60]
	0x01DA19F4 TBNZ X8, 0x1, 0x1DA1980
	0x01DA19F8 MOV X1, X31
	0x01DA19FC BL 0x1E93668
	0x01DA1A00 TBZ X0, 0x0, 0x1DA1980
	0x01DA1A04 LDR X8, [X19 + 0xB0]
	0x01DA1A08 CBZ X8, 0x1DA1A84
	0x01DA1A0C LDR X0, [X22]
	0x01DA1A10 LDR X21, [X8 + 0x150]
	0x01DA1A14 LDR W9, [X0 + 0xE0]
	0x01DA1A18 CBNZ W9, 0x1DA1A20
	0x01DA1A1C BL 0x1C16DFC
	0x01DA1A20 MOV X0, X21
	0x01DA1A24 MOV X1, X31
	0x01DA1A28 MOV X2, X31
	0x01DA1A2C BL 0x3C354F8
	0x01DA1A30 TBZ X0, 0x0, 0x1DA1980
	0x01DA1A34 LDR X8, [X19 + 0xB0]
	0x01DA1A38 CBZ X8, 0x1DA1A84
	0x01DA1A3C LDR X0, [X8 + 0x150]
	0x01DA1A40 CBZ X0, 0x1DA1A84
	0x01DA1A44 MOV X1, X31
	0x01DA1A48 BL 0x1D881A0
	0x01DA1A4C TBZ X0, 0x0, 0x1DA1980
	0x01DA1A50 LDR X8, [X19 + 0xB0]
	0x01DA1A54 CBZ X8, 0x1DA1A84
	0x01DA1A58 LDR X8, [X8 + 0x150]
	0x01DA1A5C CBZ X8, 0x1DA1A84
	0x01DA1A60 LDR W8, [X8 + 0x80]
	0x01DA1A64 FMOV S0, 1
	0x01DA1A68 MOV X1, X31
	0x01DA1A6C CMP W8, 0x0
	0x01DA1A70 ADRP X8, 0xFFFFFFFFFED49000
	0x01DA1A74 LDR V1, [X8 + 0xBC]
	0x01DA1A78 CSET W0, NE
	0x01DA1A7C BL 0x1DC2324
	0x01DA1A80 B 0x1DA1980
	0x01DA1A84 BL 0x1C16F20
	0x01DA1A88 B 0x1DA1A8C
	0x01DA1A8C STP X30, X19, [X31 - 0x10]!
	0x01DA1A90 LDR X8, [X0 + 0xB0]
	0x01DA1A94 CBZ X8, 0x1DA1AB8
	0x01DA1A98 LDR X8, [X8 + 0x178]
	0x01DA1A9C MOV X19, X0
	0x01DA1AA0 STR X8, [X0 + 0xD8]
	0x01DA1AA4 MOV X0, X31
	0x01DA1AA8 BL 0x3C3C6C4
	0x01DA1AAC STR S0, [X19 + 0xEC]
	0x01DA1AB0 LDP X30, X19, [X31], #0x10
	0x01DA1AB4 RET
	0x01DA1AB8 BL 0x1C16F20
	0x01DA1ABC STR X30, [X31 - 0x30]!
	0x01DA1AC0 STP X22, X21, [X31 + 0x10]
	0x01DA1AC4 STP X20, X19, [X31 + 0x20]
	0x01DA1AC8 ADRP X21, 0x2637000
	0x01DA1ACC ADRP X22, 0x2356000
	0x01DA1AD0 ADRP X20, 0x2355000
	0x01DA1AD4 LDRB W8, [X21 + 0xA74]
	0x01DA1AD8 LDR X22, [X22 + 0x280]
	0x01DA1ADC LDR X20, [X20 + 0xBE0]
	0x01DA1AE0 MOV X19, X0
	0x01DA1AE4 TBNZ X8, 0x0, 0x1DA1B08
	0x01DA1AE8 ADRP X0, 0x2356000
	0x01DA1AEC LDR X0, [X0 + 0x280]
	0x01DA1AF0 BL 0x1C16CF4
	0x01DA1AF4 ADRP X0, 0x2355000
	0x01DA1AF8 LDR X0, [X0 + 0xBE0]
	0x01DA1AFC BL 0x1C16CF4
	0x01DA1B00 MOVZ W8, 0x1
	0x01DA1B04 STRB W8, [X21 + 0xA74]
	0x01DA1B08 LDR X0, [X22]
	0x01DA1B0C MOV X1, X31
	0x01DA1B10 BL 0x3C124EC
	0x01DA1B14 STR W0, [X19 + 0xE0]
	0x01DA1B18 LDR X0, [X20]
	0x01DA1B1C MOV X1, X31
	0x01DA1B20 BL 0x3C124EC
	0x01DA1B24 STR W0, [X19 + 0xE4]
	0x01DA1B28 MOV X0, X19
	0x01DA1B2C LDP X20, X19, [X31 + 0x20]
	0x01DA1B30 LDP X22, X21, [X31 + 0x10]
	0x01DA1B34 MOV X1, X31
	0x01DA1B38 LDR X30, [X31], #0x30
	0x01DA1B3C B 0x1E74F04
	0x01DA1B40 LDRB W1, [X0 + 0xA8]
	0x01DA1B44 B 0x1DA016C
	0x01DA1B48 STP X30, X19, [X31 - 0x10]!
	0x01DA1B4C MOV X19, X0
	0x01DA1B50 BL 0x1DA0104
	0x01DA1B54 AND W8, W0, 0x1
	0x01DA1B58 STRB W8, [X19 + 0xA8]
	0x01DA1B5C LDP X30, X19, [X31], #0x10
	0x01DA1B60 RET
	0x01DA1B64 STP X30, X23, [X31 - 0x30]!
	0x01DA1B68 STP X22, X21, [X31 + 0x10]
	0x01DA1B6C STP X20, X19, [X31 + 0x20]
	0x01DA1B70 ADRP X20, 0x2637000
	0x01DA1B74 ADRP X21, 0x2355000
	0x01DA1B78 LDRB W8, [X20 + 0xA75]
	0x01DA1B7C LDR X21, [X21 + 0xBB8]
	0x01DA1B80 MOV X19, X0
	0x01DA1B84 TBNZ X8, 0x0, 0x1DA1BCC
	0x01DA1B88 ADRP X0, 0x2354000
	0x01DA1B8C LDR X0, [X0 + 0x6D0]
	0x01DA1B90 BL 0x1C16CF4
	0x01DA1B94 ADRP X0, 0x2353000
	0x01DA1B98 LDR X0, [X0 + 0xE70]
	0x01DA1B9C BL 0x1C16CF4
	0x01DA1BA0 ADRP X0, 0x2355000
	0x01DA1BA4 LDR X0, [X0 + 0xBB8]
	0x01DA1BA8 BL 0x1C16CF4
	0x01DA1BAC ADRP X0, 0x2356000
	0x01DA1BB0 LDR X0, [X0 + 0x288]
	0x01DA1BB4 BL 0x1C16CF4
	0x01DA1BB8 ADRP X0, 0x2356000
	0x01DA1BBC LDR X0, [X0 + 0x290]
	0x01DA1BC0 BL 0x1C16CF4
	0x01DA1BC4 MOVZ W8, 0x1
	0x01DA1BC8 STRB W8, [X20 + 0xA75]
	0x01DA1BCC LDR X1, [X21]
	0x01DA1BD0 MOV X0, X19
	0x01DA1BD4 BL 0x21A3894
	0x01DA1BD8 LDR X22, [X19 + 0x80]
	0x01DA1BDC STR X0, [X19 + 0xB8]
	0x01DA1BE0 CBZ X22, 0x1DA1CEC
	0x01DA1BE4 ADRP X23, 0x2354000
	0x01DA1BE8 LDR X23, [X23 + 0x6D0]
	0x01DA1BEC ADRP X21, 0x2356000
	0x01DA1BF0 LDR X20, [X22 + 0x28]
	0x01DA1BF4 LDR X0, [X23]
	0x01DA1BF8 LDR X21, [X21 + 0x290]
	0x01DA1BFC BL 0x1C16F10
	0x01DA1C00 LDR X2, [X21]
	0x01DA1C04 MOV X1, X19
	0x01DA1C08 MOV X3, X31
	0x01DA1C0C MOV X21, X0
	0x01DA1C10 BL 0x2A6B948
	0x01DA1C14 MOV X0, X20
	0x01DA1C18 MOV X1, X21
	0x01DA1C1C MOV X2, X31
	0x01DA1C20 BL 0x33C0DE4
	0x01DA1C24 CBZ X0, 0x1DA1C60
	0x01DA1C28 LDR X21, [X23]
	0x01DA1C2C MOV X20, X0
	0x01DA1C30 MOV X1, X21
	0x01DA1C34 BL 0x1C16E00
	0x01DA1C38 CBZ X0, 0x1DA1C54
	0x01DA1C3C STR X0, [X22 + 0x28]
	0x01DA1C40 LDR X21, [X23]
	0x01DA1C44 MOV X0, X20
	0x01DA1C48 MOV X1, X21
	0x01DA1C4C BL 0x1C16E00
	0x01DA1C50 CBNZ X0, 0x1DA1C64
	0x01DA1C54 MOV X0, X20
	0x01DA1C58 MOV X1, X21
	0x01DA1C5C B 0x1DA1CD0
	0x01DA1C60 STR X31, [X22 + 0x28]
	0x01DA1C64 LDR X22, [X19 + 0xB8]
	0x01DA1C68 CBZ X22, 0x1DA1CEC
	0x01DA1C6C ADRP X23, 0x2353000
	0x01DA1C70 LDR X23, [X23 + 0xE70]
	0x01DA1C74 ADRP X21, 0x2356000
	0x01DA1C78 LDR X20, [X22 + 0x220]
	0x01DA1C7C LDR X0, [X23]
	0x01DA1C80 LDR X21, [X21 + 0x288]
	0x01DA1C84 BL 0x1C16F10
	0x01DA1C88 LDR X2, [X21]
	0x01DA1C8C MOV X1, X19
	0x01DA1C90 MOV X3, X31
	0x01DA1C94 MOV X21, X0
	0x01DA1C98 BL 0x3314368
	0x01DA1C9C MOV X0, X20
	0x01DA1CA0 MOV X1, X21
	0x01DA1CA4 MOV X2, X31
	0x01DA1CA8 BL 0x33C0DE4
	0x01DA1CAC CBZ X0, 0x1DA1CD4
	0x01DA1CB0 LDR X1, [X23]
	0x01DA1CB4 LDR X8, [X0]
	0x01DA1CB8 CMP X8, X1
	0x01DA1CBC B.NE 0x1DA1CD0
	0x01DA1CC0 STR X0, [X22 + 0x220]
	0x01DA1CC4 LDR X8, [X0]
	0x01DA1CC8 CMP X8, X1
	0x01DA1CCC B.EQ 0x1DA1CD8
	0x01DA1CD0 BL 0x1C171E0
	0x01DA1CD4 STR X0, [X22 + 0x220]
	0x01DA1CD8 MOV X0, X19
	0x01DA1CDC LDP X20, X19, [X31 + 0x20]
	0x01DA1CE0 LDP X22, X21, [X31 + 0x10]
	0x01DA1CE4 LDP X30, X23, [X31], #0x30
	0x01DA1CE8 B 0x1DA1CF0
	0x01DA1CEC BL 0x1C16F20
	0x01DA1CF0 SUB X31, X31, 0x1A0
	0x01DA1CF4 STR X29, [X31 + 0x180]
	0x01DA1CF8 STP X30, X19, [X31 + 0x190]
	0x01DA1CFC MOV X19, X0
	0x01DA1D00 LDR X0, [X0 + 0x90]
	0x01DA1D04 CBZ X0, 0x1DA1E04
	0x01DA1D08 ADRP X8, 0xFFFFFFFFFED49000
	0x01DA1D0C LDR V0, [X19 + 0xC0]
	0x01DA1D10 LDR V1, [X8 + 0x35C]
	0x01DA1D14 MOV X1, X31
	0x01DA1D18 FDIV S2, S0, S1
	0x01DA1D1C FMOV S0, 1
	0x01DA1D20 FMOV S1, 1
	0x01DA1D24 BL 0x3C3FC4C
	0x01DA1D28 LDR X0, [X19 + 0xB0]
	0x01DA1D2C CBZ X0, 0x1DA1E04
	0x01DA1D30 MOV X1, X31
	0x01DA1D34 BL 0x3C32E90
	0x01DA1D38 CBZ X0, 0x1DA1E04
	0x01DA1D3C ADD X8, X31, 0x140
	0x01DA1D40 MOV X1, X31
	0x01DA1D44 BL 0x3C3FF0C
	0x01DA1D48 LDP V0, V1, [X31 + 0x140]
	0x01DA1D4C LDP V2, V3, [X31 + 0x160]
	0x01DA1D50 STP V0, V1, [X31 + 0x100]
	0x01DA1D54 STP V2, V3, [X31 + 0x120]
	0x01DA1D58 LDR X0, [X19 + 0xA8]
	0x01DA1D5C CBZ X0, 0x1DA1E04
	0x01DA1D60 ADD X8, X31, 0x140
	0x01DA1D64 MOV X1, X31
	0x01DA1D68 BL 0x3C3F1C8
	0x01DA1D6C LDP V0, V1, [X31 + 0x140]
	0x01DA1D70 LDP V2, V3, [X31 + 0x160]
	0x01DA1D74 ADD X8, X31, 0xC0
	0x01DA1D78 ADD X0, X31, 0x80
	0x01DA1D7C STP V0, V1, [X31 + 0x40]
	0x01DA1D80 LDP V0, V1, [X31 + 0x100]
	0x01DA1D84 STP V2, V3, [X31 + 0x60]
	0x01DA1D88 LDP V2, V3, [X31 + 0x120]
	0x01DA1D8C ADD X1, X31, 0x40
	0x01DA1D90 MOV X2, X31
	0x01DA1D94 STP V0, V1, [X31 + 0x80]
	0x01DA1D98 STP V2, V3, [X31 + 0xA0]
	0x01DA1D9C BL 0x3C27F74
	0x01DA1DA0 LDP V0, V1, [X31 + 0xC0]
	0x01DA1DA4 LDP V2, V3, [X31 + 0xE0]
	0x01DA1DA8 STP V0, V1, [X31 + 0x140]
	0x01DA1DAC STP V2, V3, [X31 + 0x160]
	0x01DA1DB0 LDR X0, [X19 + 0xB0]
	0x01DA1DB4 CBZ X0, 0x1DA1E04
	0x01DA1DB8 MOV X1, X31
	0x01DA1DBC BL 0x3C1341C
	0x01DA1DC0 LDR W1, [X19 + 0xE4]
	0x01DA1DC4 LDP V0, V1, [X31 + 0x140]
	0x01DA1DC8 LDP V2, V3, [X31 + 0x160]
	0x01DA1DCC STP V0, V1, [X31 + 0xC0]
	0x01DA1DD0 STP V2, V3, [X31 + 0xE0]
	0x01DA1DD4 CBZ X0, 0x1DA1E04
	0x01DA1DD8 LDP V0, V1, [X31 + 0xC0]
	0x01DA1DDC LDP V2, V3, [X31 + 0xE0]
	0x01DA1DE0 ADD X2, X31, 0x0
	0x01DA1DE4 MOV X3, X31
	0x01DA1DE8 STP V0, V1, [X31]
	0x01DA1DEC STP V2, V3, [X31 + 0x20]
	0x01DA1DF0 BL 0x3C15D84
	0x01DA1DF4 LDP X30, X19, [X31 + 0x190]
	0x01DA1DF8 LDR X29, [X31 + 0x180]
	0x01DA1DFC ADD X31, X31, 0x1A0
	0x01DA1E00 RET
	0x01DA1E04 BL 0x1C16F20
	0x01DA1E08 STP X30, X23, [X31 - 0x30]!
	0x01DA1E0C STP X22, X21, [X31 + 0x10]
	0x01DA1E10 STP X20, X19, [X31 + 0x20]
	0x01DA1E14 ADRP X20, 0x2637000
	0x01DA1E18 ADRP X21, 0x2355000
	0x01DA1E1C LDRB W8, [X20 + 0xA76]
	0x01DA1E20 LDR X21, [X21 + 0xA78]
	0x01DA1E24 MOV X19, X0
	0x01DA1E28 TBNZ X8, 0x0, 0x1DA1E70
	0x01DA1E2C ADRP X0, 0x2354000
	0x01DA1E30 LDR X0, [X0 + 0x6D0]
	0x01DA1E34 BL 0x1C16CF4
	0x01DA1E38 ADRP X0, 0x2353000
	0x01DA1E3C LDR X0, [X0 + 0xE70]
	0x01DA1E40 BL 0x1C16CF4
	0x01DA1E44 ADRP X0, 0x2355000
	0x01DA1E48 LDR X0, [X0 + 0xA78]
	0x01DA1E4C BL 0x1C16CF4
	0x01DA1E50 ADRP X0, 0x2356000
	0x01DA1E54 LDR X0, [X0 + 0x288]
	0x01DA1E58 BL 0x1C16CF4
	0x01DA1E5C ADRP X0, 0x2356000
	0x01DA1E60 LDR X0, [X0 + 0x290]
	0x01DA1E64 BL 0x1C16CF4
	0x01DA1E68 MOVZ W8, 0x1
	0x01DA1E6C STRB W8, [X20 + 0xA76]
	0x01DA1E70 LDR X0, [X21]
	0x01DA1E74 LDR W8, [X0 + 0xE0]
	0x01DA1E78 CBNZ W8, 0x1DA1E80
	0x01DA1E7C BL 0x1C16DFC
	0x01DA1E80 CBZ X19, 0x1DA1F9C
	0x01DA1E84 LDR W8, [X19 + 0x30]
	0x01DA1E88 LDR X22, [X19 + 0x80]
	0x01DA1E8C ORR W8, W8, 0x8
	0x01DA1E90 STR W8, [X19 + 0x30]
	0x01DA1E94 CBZ X22, 0x1DA1F9C
	0x01DA1E98 ADRP X23, 0x2354000
	0x01DA1E9C LDR X23, [X23 + 0x6D0]
	0x01DA1EA0 ADRP X21, 0x2356000
	0x01DA1EA4 LDR X20, [X22 + 0x28]
	0x01DA1EA8 LDR X0, [X23]
	0x01DA1EAC LDR X21, [X21 + 0x290]
	0x01DA1EB0 BL 0x1C16F10
	0x01DA1EB4 LDR X2, [X21]
	0x01DA1EB8 MOV X1, X19
	0x01DA1EBC MOV X3, X31
	0x01DA1EC0 MOV X21, X0
	0x01DA1EC4 BL 0x2A6B948
	0x01DA1EC8 MOV X0, X20
	0x01DA1ECC MOV X1, X21
	0x01DA1ED0 MOV X2, X31
	0x01DA1ED4 BL 0x33C0FDC
	0x01DA1ED8 CBZ X0, 0x1DA1F14
	0x01DA1EDC LDR X21, [X23]
	0x01DA1EE0 MOV X20, X0
	0x01DA1EE4 MOV X1, X21
	0x01DA1EE8 BL 0x1C16E00
	0x01DA1EEC CBZ X0, 0x1DA1F08
	0x01DA1EF0 STR X0, [X22 + 0x28]
	0x01DA1EF4 LDR X21, [X23]
	0x01DA1EF8 MOV X0, X20
	0x01DA1EFC MOV X1, X21
	0x01DA1F00 BL 0x1C16E00
	0x01DA1F04 CBNZ X0, 0x1DA1F18
	0x01DA1F08 MOV X0, X20
	0x01DA1F0C MOV X1, X21
	0x01DA1F10 B 0x1DA1F84
	0x01DA1F14 STR X31, [X22 + 0x28]
	0x01DA1F18 LDR X22, [X19 + 0xB8]
	0x01DA1F1C CBZ X22, 0x1DA1F9C
	0x01DA1F20 ADRP X23, 0x2353000
	0x01DA1F24 LDR X23, [X23 + 0xE70]
	0x01DA1F28 ADRP X21, 0x2356000
	0x01DA1F2C LDR X20, [X22 + 0x220]
	0x01DA1F30 LDR X0, [X23]
	0x01DA1F34 LDR X21, [X21 + 0x288]
	0x01DA1F38 BL 0x1C16F10
	0x01DA1F3C LDR X2, [X21]
	0x01DA1F40 MOV X1, X19
	0x01DA1F44 MOV X3, X31
	0x01DA1F48 MOV X21, X0
	0x01DA1F4C BL 0x3314368
	0x01DA1F50 MOV X0, X20
	0x01DA1F54 MOV X1, X21
	0x01DA1F58 MOV X2, X31
	0x01DA1F5C BL 0x33C0FDC
	0x01DA1F60 CBZ X0, 0x1DA1F88
	0x01DA1F64 LDR X1, [X23]
	0x01DA1F68 LDR X8, [X0]
	0x01DA1F6C CMP X8, X1
	0x01DA1F70 B.NE 0x1DA1F84
	0x01DA1F74 STR X0, [X22 + 0x220]
	0x01DA1F78 LDR X8, [X0]
	0x01DA1F7C CMP X8, X1
	0x01DA1F80 B.EQ 0x1DA1F8C
	0x01DA1F84 BL 0x1C171E0
	0x01DA1F88 STR X0, [X22 + 0x220]

ISIL:
	001 Move [X31-128], D15
	002 Move [X31-120], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+72], X30
	011 Move [X31+80], X24
	012 Move [X31+88], X23
	013 Move [X31+96], X22
	014 Move [X31+104], X21
	015 Move [X31+112], X20
	016 Move [X31+120], X19
	017 Subtract X31, X31, 544
	018 Move X20, 0x2638000
	019 Move W8, [X20+2673]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x2353000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2673], W8
	030 NotImplemented "Instruction MOVI not yet implemented."
	031 Move X0, X19
	032 Move [X31+512], V0
	033 Move [X31+520], V0
	034 Move [X31+480], V0
	035 Move [X31+488], V0
	036 Move [X31+448], V0
	037 Move [X31+456], V0
	038 Move [X31+416], V0
	039 Move [X31+424], V0
	040 Call Plunger.get_isSuctioned, X0
	041 Move X21, -19623936
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {67}
	046 Move X20, 0x2638000
	047 Move W8, [X20+2591]
	048 Compare W8, 0
	049 JumpIfNotEqual {55}
	050 Move X0, 0x2353000
	051 Move X0, [X0+1440]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X20+2591], W8
	055 Move X8, 0x2353000
	056 Move X8, [X8+1440]
	057 Move V0, [X21+4032]
	058 Move X8, [X8]
	059 Move X8, [X8+184]
	060 Move V1, [X8+72]
	061 Move V2, [X8+80]
	062 Move W8, 0x5C29
	063 NotImplemented "Instruction MOVK not yet implemented."
	064 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	065 NotImplemented "Instruction INVALID not yet implemented."
	066 Multiply S9, S2, S0
	067 Move X20, 0x2638000
	068 Move W8, [X20+1923]
	069 Compare W8, 0
	070 JumpIfNotEqual {76}
	071 Move X0, 0x2353000
	072 Move X0, [X0+1440]
	073 Call 0x1C17CF4
	074 Move W8, 1
	075 Move [X20+1923], W8
	076 Move X8, 0x2353000
	077 Move X8, [X8+1440]
	078 Move X8, [X8]
	079 Move X8, [X8+184]
	080 Move V11, [X8]
	081 Move V9, [X8+8]
	082 Move X0, X19
	083 Call Plunger.get_isSuctioned, X0
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {187}
	088 Move X22, 0x2353000
	089 Move X22, [X22+1432]
	090 Move X20, [X19+216]
	091 Move X0, [X22]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X0, X20
	097 Move X1, X31
	098 Move X2, X31
	099 Call Object.op_Inequality, X0, X1
	100 Move TEMP, X0
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfNotEqual {187}
	104 Move X0, [X19+128]
	105 Compare X0, 0
	106 JumpIfEqual {624}
	107 Add X8, X31, 352
	108 Move X1, X31
	109 Call Renderer.get_worldToLocalMatrix, X0
	110 Move V0, [X31+352]
	111 Move V1, [X31+368]
	112 Move V2, [X31+384]
	113 Move V3, [X31+400]
	114 Move X0, X19
	115 Move X1, X31
	116 Move [X31+416], V0
	117 Move [X31+424], V1
	118 Move [X31+448], V2
	119 Move [X31+456], V3
	120 Call Component.get_transform, X0
	121 Compare X0, 0
	122 JumpIfEqual {624}
	123 Move X1, X31
	124 Call Transform.get_position, X0
	125 Add X0, X31, 416
	126 Move X1, X31
	127 Call Matrix4x4.MultiplyPoint, X0, X1
	128 Move X0, [X19+128]
	129 Compare X0, 0
	130 JumpIfEqual {624}
	131 Add X8, X31, 352
	132 Move X1, X31
	133 Move V12, V0
	134 Move V13, V1
	135 Move V8, V2
	136 Call Renderer.get_worldToLocalMatrix, X0
	137 Move V0, [X31+352]
	138 Move V1, [X31+368]
	139 Move V2, [X31+384]
	140 Move V3, [X31+400]
	141 Move [X31+416], V0
	142 Move [X31+424], V1
	143 Move [X31+448], V2
	144 Move [X31+456], V3
	145 Move X0, [X19+216]
	146 Compare X0, 0
	147 JumpIfEqual {624}
	148 Move X1, X31
	149 Call Transform.get_position, X0
	150 Add X0, X31, 416
	151 Move X1, X31
	152 Call Matrix4x4.MultiplyPoint, X0, X1
	153 Move X23, 0x2638000
	154 Move W8, [X23+1925]
	155 Move V14, V2
	156 Move [X31+80], D0
	157 Move [X31+64], D1
	158 Compare W8, 0
	159 JumpIfNotEqual {165}
	160 Move X0, 0x2353000
	161 Move X0, [X0+1448]
	162 Call 0x1C17CF4
	163 Move W8, 1
	164 Move [X23+1925], W8
	165 Move X20, 0x2353000
	166 Move X20, [X20+1448]
	167 Move X0, [X20]
	168 Move W8, [X0+224]
	169 Compare W8, 0
	170 JumpIfNotEqual {172}
	171 Call 0x1C17DFC
	172 Move X8, -19619840
	173 Multiply S0, S12, S12
	174 Multiply S1, S13, S13
	175 Move V10, [X8+380]
	176 Add S0, S0, S1
	177 Multiply S1, S8, S8
	178 Add S0, S1, S0
	179 NotImplemented "Instruction FSQRT not yet implemented."
	180 NotImplemented "Instruction FCMP not yet implemented."
	181 Move [X31+56], D11
	182 Move [X31+32], S12
	183 Move [X31+16], S13
	184 NotImplemented "Instruction FDIV not yet implemented."
	185 NotImplemented "Instruction FDIV not yet implemented."
	186 NotImplemented "Instruction FDIV not yet implemented."
	187 Move X22, 0x2638000
	188 Move W8, [X22+1939]
	189 Move X20, [X19+144]
	190 Compare W8, 0
	191 JumpIfNotEqual {197}
	192 Move X0, 0x2354000
	193 Move X0, [X0+1448]
	194 Call 0x1C17CF4
	195 Move W8, 1
	196 Move [X22+1939], W8
	197 Compare X20, 0
	198 JumpIfEqual {624}
	199 Move X8, 0x2354000
	200 Move X8, [X8+1448]
	201 Move X0, X20
	202 Move X1, X31
	203 Move X8, [X8]
	204 Move X8, [X8+184]
	205 Move S2, [X8+8]
	206 Move S3, [X8+12]
	207 Move S0, [X8]
	208 Move S1, [X8+4]
	209 Call Transform.set_localRotation, X0, X1
	210 Move X0, [X19+144]
	211 Compare X0, 0
	212 JumpIfEqual {624}
	213 Move X1, X31
	214 Call Transform.get_localPosition, X0
	215 Subtract S2, S9, S2
	216 NotImplemented "Instruction LDUR not yet implemented."
	217 Move V9, [X19+212]
	218 Move W8, 0x43480000
	219 Move V0.S[1], V1.S[0]
	220 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	221 Move S3, W8
	222 Subtract V0, V11, V0
	223 Multiply S2, S2, S3
	224 NotImplemented "Instruction MOVI not yet implemented."
	225 NotImplemented "Instruction INVALID not yet implemented."
	226 Move S1, -8
	227 NotImplemented "Instruction INVALID not yet implemented."
	228 Multiply S1, S9, S1
	229 Move X0, X31
	230 Add V10, V0, V3
	231 Add S11, S2, S1
	232 Call Time.get_deltaTime
	233 Move X0, [X19+144]
	234 NotImplemented "Instruction INVALID not yet implemented."
	235 Multiply S0, S0, S11
	236 Add V1, V8, V1
	237 Add S0, S9, S0
	238 Move [X19+204], D1
	239 Move [X19+212], S0
	240 Compare X0, 0
	241 JumpIfEqual {624}
	242 Move X1, X31
	243 Call Transform.get_localPosition, X0
	244 Move S11, [X19+204]
	245 Move S12, [X19+208]
	246 Move V13, [X19+212]
	247 Move X0, X31
	248 Move V8, V0
	249 Move V9, V1
	250 Move V10, V2
	251 Call Time.get_deltaTime
	252 Move X0, [X19+144]
	253 Compare X0, 0
	254 JumpIfEqual {624}
	255 Move V2, [X21+4032]
	256 Multiply S1, S13, S0
	257 Multiply S3, S12, S0
	258 Multiply S0, S11, S0
	259 Add S4, S10, S1
	260 Add S1, S9, S3
	261 NotImplemented "Instruction FMAX not yet implemented."
	262 Add S0, S8, S0
	263 Move X1, X31
	264 Call Transform.set_localPosition, X0, X1
	265 Move X0, [X19+128]
	266 Compare X0, 0
	267 JumpIfEqual {624}
	268 Add X8, X31, 288
	269 Move X1, X31
	270 Call Renderer.get_worldToLocalMatrix, X0
	271 Move V0, [X31+288]
	272 Move V1, [X31+304]
	273 Move V2, [X31+320]
	274 Move V3, [X31+336]
	275 Move [X31+352], V0
	276 Move [X31+360], V1
	277 Move [X31+384], V2
	278 Move [X31+392], V3
	279 Move X0, [X19+144]
	280 Compare X0, 0
	281 JumpIfEqual {624}
	282 Add X8, X31, 288
	283 Move X1, X31
	284 Call Transform.get_localToWorldMatrix, X0
	285 Move V0, [X31+288]
	286 Move V1, [X31+304]
	287 Move V2, [X31+320]
	288 Move V3, [X31+336]
	289 Add X8, X31, 288
	290 Add X0, X31, 224
	291 Move [X31+160], V0
	292 Move [X31+168], V1
	293 Move V0, [X31+352]
	294 Move V1, [X31+368]
	295 Move [X31+192], V2
	296 Move [X31+200], V3
	297 Move V2, [X31+384]
	298 Move V3, [X31+400]
	299 Add X1, X31, 160
	300 Move X2, X31
	301 Move [X31+224], V0
	302 Move [X31+232], V1
	303 Move [X31+256], V2
	304 Move [X31+264], V3
	305 Call Matrix4x4.op_Multiply, X0, X1
	306 Move V0, [X31+288]
	307 Move V1, [X31+304]
	308 Move V2, [X31+320]
	309 Move V3, [X31+336]
	310 Move [X31+480], V0
	311 Move [X31+488], V1
	312 Move [X31+512], V2
	313 Move [X31+520], V3
	314 Move X0, [X19+128]
	315 Compare X0, 0
	316 JumpIfEqual {624}
	317 Move X1, X31
	318 Call Renderer.get_material, X0
	319 Move W1, [X19+228]
	320 Move V0, [X31+480]
	321 Move V1, [X31+496]
	322 Move V2, [X31+512]
	323 Move V3, [X31+528]
	324 Move [X31+288], V0
	325 Move [X31+296], V1
	326 Move [X31+320], V2
	327 Move [X31+328], V3
	328 Compare X0, 0
	329 JumpIfEqual {624}
	330 Move V0, [X31+288]
	331 Move V1, [X31+304]
	332 Move V2, [X31+320]
	333 Move V3, [X31+336]
	334 Add X2, X31, 96
	335 Move X3, X31
	336 Move [X31+96], V0
	337 Move [X31+104], V1
	338 Move [X31+128], V2
	339 Move [X31+136], V3
	340 Call Material.SetMatrix, X0, X1, X2
	341 Add X31, X31, 544
	342 Move X20, [X31+112]
	343 Move X19, [X31+120]
	344 Move X22, [X31+96]
	345 Move X21, [X31+104]
	346 Move X24, [X31+80]
	347 Move X23, [X31+88]
	348 Move X29, [X31+64]
	349 Move X30, [X31+72]
	350 Move D9, [X31+48]
	351 Move D8, [X31+56]
	352 Move D11, [X31+32]
	353 Move D10, [X31+40]
	354 Move D13, [X31+16]
	355 Move D12, [X31+24]
	356 Move D15, [X31+128]
	357 Move D14, [X31+136]
	358 Return 
	359 Move X24, 0x2638000
	360 Move W8, [X24+1923]
	361 Compare W8, 0
	362 JumpIfNotEqual {368}
	363 Move X0, 0x2353000
	364 Move X0, [X0+1440]
	365 Call 0x1C17CF4
	366 Move W8, 1
	367 Move [X24+1923], W8
	368 Move X8, 0x2353000
	369 Move X8, [X8+1440]
	370 Move X8, [X8]
	371 Move X8, [X8+184]
	372 Move S11, [X8]
	373 Move S12, [X8+4]
	374 Move V13, [X8+8]
	375 Move W8, [X23+1925]
	376 Move S15, W31
	377 Compare W8, 0
	378 JumpIfNotEqual {384}
	379 Move X0, 0x2353000
	380 Move X0, [X0+1448]
	381 Call 0x1C17CF4
	382 Move W8, 1
	383 Move [X23+1925], W8
	384 Move X0, [X20]
	385 NotImplemented "Instruction FMAX not yet implemented."
	386 Move W8, [X0+224]
	387 Compare W8, 0
	388 JumpIfNotEqual {390}
	389 Call 0x1C17DFC
	390 Move V4, [X31+64]
	391 Move V2, [X31+80]
	392 Move [X31+52], S9
	393 Multiply S0, S2, S2
	394 Multiply S1, S4, S4
	395 Add S0, S0, S1
	396 Multiply S1, S14, S14
	397 Add S15, S0, S1
	398 NotImplemented "Instruction FSQRT not yet implemented."
	399 NotImplemented "Instruction FCMP not yet implemented."
	400 Move [X31], V0
	401 NotImplemented "Instruction FDIV not yet implemented."
	402 NotImplemented "Instruction FDIV not yet implemented."
	403 Move V9, V14
	404 NotImplemented "Instruction FDIV not yet implemented."
	405 Move X24, 0x2638000
	406 Move W8, [X24+1923]
	407 Compare W8, 0
	408 JumpIfNotEqual {414}
	409 Move X0, 0x2353000
	410 Move X0, [X0+1440]
	411 Call 0x1C17CF4
	412 Move W8, 1
	413 Move [X24+1923], W8
	414 Move X8, 0x2353000
	415 Move X8, [X8+1440]
	416 Move V9, V14
	417 Move X8, [X8]
	418 Move X8, [X8+184]
	419 Move S3, [X8]
	420 Move S4, [X8+4]
	421 Move V5, [X8+8]
	422 Move V0, V11
	423 Move V1, V12
	424 Move V2, V13
	425 Move X0, X31
	426 Call Quaternion.FromToRotation, X0, X1
	427 Move X0, [X19+144]
	428 Compare X0, 0
	429 JumpIfEqual {624}
	430 Move X1, X31
	431 Move V11, V0
	432 Move V12, V1
	433 Move V13, V2
	434 Move V14, V3
	435 Call Transform.set_localRotation, X0, X1
	436 Move V4, [X31+32]
	437 Move V5, [X31+16]
	438 Move V0, V11
	439 Move V1, V12
	440 Move V2, V13
	441 Move V3, V14
	442 Move V6, V8
	443 Move X0, X31
	444 Call Quaternion.op_Multiply, X0, X1
	445 Move V8, V2
	446 Multiply S2, S0, S0
	447 Multiply S3, S1, S1
	448 Add S2, S2, S3
	449 Multiply S3, S8, S8
	450 Add S11, S3, S2
	451 NotImplemented "Instruction FCMP not yet implemented."
	452 Move W8, [X23+1925]
	453 Move V12, V9
	454 Compare W8, 0
	455 JumpIfNotEqual {465}
	456 Move X0, 0x2353000
	457 Move X0, [X0+1448]
	458 Move [X31+16], V1
	459 Move [X31+24], V0
	460 Call 0x1C17CF4
	461 Move V1, [X31+16]
	462 Move V0, [X31+32]
	463 Move W8, 1
	464 Move [X23+1925], W8
	465 Move X0, [X20]
	466 Move V9, [X31+52]
	467 Move W8, [X0+224]
	468 Compare W8, 0
	469 JumpIfNotEqual {475}
	470 Move [X31+16], V1
	471 Move [X31+24], V0
	472 Call 0x1C17DFC
	473 Move V1, [X31+16]
	474 Move V0, [X31+32]
	475 Move V3, [X31+64]
	476 Move V2, [X31+80]
	477 NotImplemented "Instruction FSQRT not yet implemented."
	478 NotImplemented "Instruction FCMP not yet implemented."
	479 Move V11, [X31+56]
	480 NotImplemented "Instruction FDIV not yet implemented."
	481 NotImplemented "Instruction FDIV not yet implemented."
	482 NotImplemented "Instruction FDIV not yet implemented."
	483 Move V0.S[1], V1.S[0]
	484 Move V11, [X31+56]
	485 Move V3, [X31+64]
	486 Move V2, [X31+80]
	487 Move V12, V9
	488 Move V9, [X31+52]
	489 Move V0.S[1], V1.S[0]
	490 Move X23, 0x2638000
	491 Move W8, [X23+1923]
	492 Move V11, [X31+56]
	493 Compare W8, 0
	494 JumpIfNotEqual {502}
	495 Move X0, 0x2353000
	496 Move X0, [X0+1440]
	497 Call 0x1C17CF4
	498 Move V3, [X31+64]
	499 Move V2, [X31+80]
	500 Move W8, 1
	501 Move [X23+1923], W8
	502 Move X8, 0x2353000
	503 Move X8, [X8+1440]
	504 Move X8, [X8]
	505 Move X8, [X8+184]
	506 Move V0, [X8]
	507 Move V8, [X8+8]
	508 Move X23, 0x2638000
	509 Move W8, [X23+1924]
	510 Compare W8, 0
	511 JumpIfNotEqual {521}
	512 Move X0, 0x2353000
	513 Move X0, [X0+1448]
	514 Move [X31+2], V0
	515 Call 0x1C17CF4
	516 Move V0, [X31+2]
	517 Move V3, [X31+64]
	518 Move V2, [X31+80]
	519 Move W8, 1
	520 Move [X23+1924], W8
	521 Move X0, [X20]
	522 Move W8, [X0+224]
	523 Compare W8, 0
	524 JumpIfNotEqual {530}
	525 Move [X31+2], V0
	526 Call 0x1C17DFC
	527 Move V0, [X31+2]
	528 Move V3, [X31+64]
	529 Move V2, [X31+80]
	530 Move V1, [X31]
	531 NotImplemented "Instruction INVALID not yet implemented."
	532 Multiply S8, S1, S8
	533 Move V2.S[1], V3.S[0]
	534 Move V3, [X21+4032]
	535 Move X0, [X19+64]
	536 Subtract V1, V2, V0
	537 Subtract S2, S12, S8
	538 Add V11, V11, V1
	539 Add S1, S9, S2
	540 NotImplemented "Instruction FMAX not yet implemented."
	541 Compare X0, 0
	542 JumpIfEqual {210}
	543 Move W8, [X0+96]
	544 Move TEMP, X8
	545 And TEMP, TEMP, 2
	546 Compare TEMP, 2
	547 JumpIfEqual {210}
	548 Move X1, X31
	549 Call NetworkObject.get_HasStateAuthority, X0
	550 Move TEMP, X0
	551 And TEMP, TEMP, 1
	552 Compare TEMP, 1
	553 JumpIfNotEqual {210}
	554 Move X8, -19619840
	555 Move V8, [X8+336]
	556 NotImplemented "Instruction INVALID not yet implemented."
	557 NotImplemented "Instruction FADDP not yet implemented."
	558 Multiply S1, S9, S9
	559 Add S10, S0, S1
	560 NotImplemented "Instruction FCMP not yet implemented."
	561 Move X0, X19
	562 Move W1, W31
	563 Call Plunger.set_isSuctioned, X0, X1
	564 Move X0, X19
	565 Call Plunger.HandleIsSuctionedChanged, X0
	566 Move X8, -19619840
	567 Move V0, [X8+716]
	568 Move X8, -19619840
	569 Move V1, [X8+92]
	570 NotImplemented "Instruction FDIV not yet implemented."
	571 Add S0, S8, S0
	572 NotImplemented "Instruction FDIV not yet implemented."
	573 NotImplemented "Instruction FCMP not yet implemented."
	574 Move S1, 1
	575 NotImplemented "Instruction FCMP not yet implemented."
	576 Move X8, -19619840
	577 Move V1, [X8+816]
	578 NotImplemented "Instruction FCMP not yet implemented."
	579 Move X8, [X19+176]
	580 Compare X8, 0
	581 JumpIfEqual {624}
	582 Move X0, [X22]
	583 Move X20, [X8+336]
	584 Move W9, [X0+224]
	585 Compare W9, 0
	586 JumpIfNotEqual {588}
	587 Call 0x1C17DFC
	588 Move X0, X20
	589 Move X1, X31
	590 Move X2, X31
	591 Call Object.op_Inequality, X0, X1
	592 Move TEMP, X0
	593 And TEMP, TEMP, 1
	594 Compare TEMP, 1
	595 JumpIfNotEqual {210}
	596 Move X8, [X19+176]
	597 Compare X8, 0
	598 JumpIfEqual {624}
	599 Move X0, [X8+336]
	600 Compare X0, 0
	601 JumpIfEqual {624}
	602 Move X1, X31
	603 Call AttachedItemAnchor.get_isHand, X0
	604 Move TEMP, X0
	605 And TEMP, TEMP, 1
	606 Compare TEMP, 1
	607 JumpIfNotEqual {210}
	608 Move X8, [X19+176]
	609 Compare X8, 0
	610 JumpIfEqual {624}
	611 Move X8, [X8+336]
	612 Compare X8, 0
	613 JumpIfEqual {624}
	614 Move W8, [X8+128]
	615 Move X0, X31
	616 NotImplemented "Instruction CMP not yet implemented."
	617 NotImplemented "Instruction CSET not yet implemented."
	618 Call Time.get_deltaTime
	619 Add S1, S0, S0
	620 Move W0, W20
	621 Move V0, V8
	622 Move X1, X31
	623 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	624 Call 0x1C17F20

Method: System.Void CheckAndStick(System.Single maxDistance)

Disassembly:
	0x01DA2034 ADRP X8, 0xFFFFFFFFFED48000
	0x01DA2038 FMUL S0, S8, S8
	0x01DA203C FMUL S1, S9, S9
	0x01DA2040 LDR V2, [X8 + 0x17C]
	0x01DA2044 FADD S0, S0, S1
	0x01DA2048 FMUL S1, S10, S10
	0x01DA204C FADD S0, S1, S0
	0x01DA2050 FSQRT S1, S0
	0x01DA2054 FCMP S1, S2
	0x01DA2058 B.LE 0x1DA206C
	0x01DA205C FDIV S11, S8, S1
	0x01DA2060 FDIV S0, S9, S1
	0x01DA2064 FDIV S8, S10, S1
	0x01DA2068 B 0x1DA20A4
	0x01DA206C ADRP X21, 0x2636000
	0x01DA2070 LDRB W8, [X21 + 0x783]
	0x01DA2074 CBNZ W8, 0x1DA208C
	0x01DA2078 ADRP X0, 0x2351000
	0x01DA207C LDR X0, [X0 + 0x5A0]
	0x01DA2080 BL 0x1C16CF4
	0x01DA2084 MOVZ W8, 0x1
	0x01DA2088 STRB W8, [X21 + 0x783]
	0x01DA208C ADRP X8, 0x2351000
	0x01DA2090 LDR X8, [X8 + 0x5A0]
	0x01DA2094 LDR X8, [X8]
	0x01DA2098 LDR X8, [X8 + 0xB8]
	0x01DA209C LDP S11, S0, [X8]
	0x01DA20A0 LDR V8, [X8 + 0x8]
	0x01DA20A4 LDR X0, [X19 + 0x88]
	0x01DA20A8 CBZ X0, 0x1DA2120
	0x01DA20AC MOV X1, X31
	0x01DA20B0 FNEG S9, S0
	0x01DA20B4 BL 0x3C3FA04
	0x01DA20B8 ADRP X8, 0xFFFFFFFFFED48000
	0x01DA20BC LDR V3, [X8 + 0xBC]
	0x01DA20C0 FMUL S1, S1, S9
	0x01DA20C4 FMUL S0, S11, S0
	0x01DA20C8 FSUB S0, S1, S0
	0x01DA20CC FMUL S1, S8, S2
	0x01DA20D0 FSUB S0, S0, S1
	0x01DA20D4 FCMP S0, S3
	0x01DA20D8 B.LE 0x1DA210C
	0x01DA20DC MOV X0, X20
	0x01DA20E0 MOV X1, X31
	0x01DA20E4 BL 0x3C89FC0
	0x01DA20E8 MOV X0, X19
	0x01DA20EC LDP X20, X19, [X31 + 0x30]
	0x01DA20F0 LDP X30, X21, [X31 + 0x20]
	0x01DA20F4 LDP D9, D8, [X31 + 0x10]
	0x01DA20F8 FNEG S0, S0
	0x01DA20FC FNEG S1, S1
	0x01DA2100 FNEG S2, S2
	0x01DA2104 LDP D11, D10, [X31], #0x40
	0x01DA2108 B 0x1DA2270
	0x01DA210C LDP X20, X19, [X31 + 0x30]
	0x01DA2110 LDP X30, X21, [X31 + 0x20]
	0x01DA2114 LDP D9, D8, [X31 + 0x10]
	0x01DA2118 LDP D11, D10, [X31], #0x40
	0x01DA211C RET
	0x01DA2120 BL 0x1C16F20
	0x01DA2124 SUB X31, X31, 0x90
	0x01DA2128 STR D14, [X31 + 0x30]
	0x01DA212C STP D13, D12, [X31 + 0x40]
	0x01DA2130 STP D11, D10, [X31 + 0x50]
	0x01DA2134 STP D9, D8, [X31 + 0x60]
	0x01DA2138 STP X30, X21, [X31 + 0x70]
	0x01DA213C STP X20, X19, [X31 + 0x80]
	0x01DA2140 ADRP X20, 0x2636000
	0x01DA2144 LDRB W8, [X20 + 0xA77]
	0x01DA2148 MOV X19, X0
	0x01DA214C TBNZ X8, 0x0, 0x1DA2170
	0x01DA2150 ADRP X0, 0x2351000
	0x01DA2154 LDR X0, [X0 + 0x5D8]
	0x01DA2158 BL 0x1C16CF4
	0x01DA215C ADRP X0, 0x2351000
	0x01DA2160 LDR X0, [X0 + 0x5F8]
	0x01DA2164 BL 0x1C16CF4
	0x01DA2168 MOVZ W8, 0x1
	0x01DA216C STRB W8, [X20 + 0xA77]
	0x01DA2170 MOVI V0.2D, 0x0
	0x01DA2174 STUR V0, [X31 + 0x1C]
	0x01DA2178 STP V0, V0, [X31]
	0x01DA217C LDR X0, [X19 + 0x88]
	0x01DA2180 CBZ X0, 0x1DA226C
	0x01DA2184 MOV X1, X31
	0x01DA2188 BL 0x3C3F58C
	0x01DA218C LDR X0, [X19 + 0x88]
	0x01DA2190 CBZ X0, 0x1DA226C
	0x01DA2194 ADRP X21, 0x2351000
	0x01DA2198 ADRP X20, 0x2351000
	0x01DA219C LDR X21, [X21 + 0x5D8]
	0x01DA21A0 LDR X20, [X20 + 0x5F8]
	0x01DA21A4 MOV X1, X31
	0x01DA21A8 MOV V8.16B, V0.16B
	0x01DA21AC MOV V9.16B, V1.16B
	0x01DA21B0 MOV V10.16B, V2.16B
	0x01DA21B4 BL 0x3C3FA04
	0x01DA21B8 LDR X0, [X21]
	0x01DA21BC MOV V11.16B, V0.16B
	0x01DA21C0 MOV V12.16B, V1.16B
	0x01DA21C4 MOV V13.16B, V2.16B
	0x01DA21C8 LDR W8, [X0 + 0xE0]
	0x01DA21CC CBNZ W8, 0x1DA21D8
	0x01DA21D0 BL 0x1C16DFC
	0x01DA21D4 LDR X0, [X21]
	0x01DA21D8 LDR X8, [X0 + 0xB8]
	0x01DA21DC MOV X1, X31
	0x01DA21E0 LDR W0, [X8 + 0x40]
	0x01DA21E4 BL 0x3C35CB8
	0x01DA21E8 LDR X8, [X20]
	0x01DA21EC MOV W20, W0
	0x01DA21F0 LDR W9, [X8 + 0xE0]
	0x01DA21F4 CBNZ W9, 0x1DA2200
	0x01DA21F8 MOV X0, X8
	0x01DA21FC BL 0x1C16DFC
	0x01DA2200 ADRP X8, 0xFFFFFFFFFED48000
	0x01DA2204 LDR V14, [X8 + 0x44C]
	0x01DA2208 ADD X0, X31, 0x0
	0x01DA220C MOV V0.16B, V8.16B
	0x01DA2210 MOV V1.16B, V9.16B
	0x01DA2214 MOV V2.16B, V10.16B
	0x01DA2218 MOV V3.16B, V11.16B
	0x01DA221C MOV V4.16B, V12.16B
	0x01DA2220 MOV V5.16B, V13.16B
	0x01DA2224 MOV V6.16B, V14.16B
	0x01DA2228 MOV W1, W20
	0x01DA222C MOV X2, X31
	0x01DA2230 BL 0x3C8B18C
	0x01DA2234 TBZ X0, 0x0, 0x1DA2248
	0x01DA2238 ADD X0, X31, 0x0
	0x01DA223C MOV X1, X31
	0x01DA2240 BL 0x3C8E684
	0x01DA2244 MOV V14.16B, V0.16B
	0x01DA2248 STR S14, [X19 + 0xC0]
	0x01DA224C LDP X20, X19, [X31 + 0x80]
	0x01DA2250 LDP X30, X21, [X31 + 0x70]
	0x01DA2254 LDP D9, D8, [X31 + 0x60]
	0x01DA2258 LDP D11, D10, [X31 + 0x50]
	0x01DA225C LDP D13, D12, [X31 + 0x40]
	0x01DA2260 LDR V14, [X31 + 0x30]
	0x01DA2264 ADD X31, X31, 0x90
	0x01DA2268 RET
	0x01DA226C BL 0x1C16F20
	0x01DA2270 SUB X31, X31, 0x50
	0x01DA2274 STR D10, [X31 + 0x20]
	0x01DA2278 STP D9, D8, [X31 + 0x28]
	0x01DA227C STR X30, [X31 + 0x38]
	0x01DA2280 STP X20, X19, [X31 + 0x40]
	0x01DA2284 ADD X1, X31, 0x18
	0x01DA2288 MOV V8.16B, V2.16B
	0x01DA228C MOV V9.16B, V1.16B
	0x01DA2290 MOV V10.16B, V0.16B
	0x01DA2294 MOV X19, X0
	0x01DA2298 STR X31, [X31 + 0x18]
	0x01DA229C STR W31, [X31 + 0x10]
	0x01DA22A0 STR X31, [X31 + 0x8]
	0x01DA22A4 BL 0x1DA2AC8
	0x01DA22A8 TBZ X0, 0x0, 0x1DA2318
	0x01DA22AC LDR X20, [X31 + 0x18]
	0x01DA22B0 CBZ X20, 0x1DA2330
	0x01DA22B4 LDR X0, [X20 + 0x40]
	0x01DA22B8 CBZ X0, 0x1DA2318
	0x01DA22BC LDRB W8, [X0 + 0x60]
	0x01DA22C0 TBNZ X8, 0x1, 0x1DA2318
	0x01DA22C4 MOV X1, X31
	0x01DA22C8 BL 0x1E93668
	0x01DA22CC TBZ X0, 0x0, 0x1DA2318
	0x01DA22D0 ADD X1, X31, 0x8
	0x01DA22D4 MOV X0, X19
	0x01DA22D8 MOV V0.16B, V10.16B
	0x01DA22DC MOV V1.16B, V9.16B
	0x01DA22E0 MOV V2.16B, V8.16B
	0x01DA22E4 BL 0x1DA28AC
	0x01DA22E8 TBZ X0, 0x0, 0x1DA2318
	0x01DA22EC LDP S0, S1, [X31 + 0x8]
	0x01DA22F0 LDR V2, [X31 + 0x10]
	0x01DA22F4 MOV X0, X20
	0x01DA22F8 MOV X1, X31
	0x01DA22FC BL 0x1D8F63C
	0x01DA2300 LDR W8, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], D15
	003 Move [X31+72], D14
	004 Move [X31+80], D13
	005 Move [X31+88], D12
	006 Move [X31+96], D11
	007 Move [X31+104], D10
	008 Move [X31+112], D9
	009 Move [X31+120], D8
	010 Move [X31+128], X30
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 Move X20, 0x2637000
	015 Move W8, [X20+2674]
	016 Move V8, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0x2356000
	023 Move X0, [X0+632]
	024 Call 0x1C17CF4
	025 Move X0, 0x2352000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move X0, 0x2352000
	029 Move X0, [X0+1528]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+2674], W8
	033 NotImplemented "Instruction MOVI not yet implemented."
	034 Move [X31+44], V0
	035 Move [X31+16], V0
	036 Move [X31+24], V0
	037 Move X8, [X19+176]
	038 Compare X8, 0
	039 JumpIfEqual {224}
	040 Move X21, 0x2352000
	041 Move X21, [X21+1432]
	042 Move X20, [X8+336]
	043 Move X0, [X21]
	044 Move W9, [X0+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Move X1, X31
	050 Move X2, X31
	051 Call Object.op_Inequality, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {68}
	056 Move X8, [X19+176]
	057 Compare X8, 0
	058 JumpIfEqual {224}
	059 Move X0, [X8+336]
	060 Compare X0, 0
	061 JumpIfEqual {224}
	062 Move X1, X31
	063 Call AttachedItemAnchor.get_isHand, X0
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {210}
	068 Move X0, [X19+136]
	069 Compare X0, 0
	070 JumpIfEqual {224}
	071 Move X1, X31
	072 Call Transform.get_position, X0
	073 Move X0, [X19+136]
	074 Compare X0, 0
	075 JumpIfEqual {224}
	076 Move X20, 0x2352000
	077 Move X20, [X20+1528]
	078 Move X1, X31
	079 Move V9, V0
	080 Move V10, V1
	081 Move V11, V2
	082 Call Transform.get_forward, X0
	083 Move V12, V0
	084 Move V13, V1
	085 Move V14, V2
	086 Call Plunger.get_suctionToLayers, X0
	087 And X0, X0, 0
	088 Move X1, X31
	089 Call LayerMask.op_Implicit, X0
	090 Move X8, [X20]
	091 Move W20, W0
	092 Move W9, [X8+224]
	093 Compare W9, 0
	094 JumpIfNotEqual {97}
	095 Move X0, X8
	096 Call 0x1C17DFC
	097 Add X0, X31, 16
	098 Move W2, 1
	099 Move V0, V9
	100 Move V1, V10
	101 Move V2, V11
	102 Move V3, V12
	103 Move V4, V13
	104 Move V5, V14
	105 Move V6, V8
	106 Move W1, W20
	107 Move X3, X31
	108 Call Physics.Raycast, X0, X1, X2, V0, X3, X4
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {210}
	113 Add X0, X31, 16
	114 Move X1, X31
	115 Call RaycastHit.get_point, X0
	116 Add X0, X31, 16
	117 Move X1, X31
	118 Move [X31+8], S1
	119 Move [X31+16], S0
	120 Move V10, V2
	121 Call RaycastHit.get_normal, X0
	122 Add X0, X31, 16
	123 Move X1, X31
	124 Move V11, V0
	125 Move V12, V1
	126 Move V13, V2
	127 Call RaycastHit.get_normal, X0
	128 Move X0, [X19+136]
	129 Compare X0, 0
	130 JumpIfEqual {224}
	131 Move X1, X31
	132 NotImplemented "Instruction FNEG not yet implemented."
	133 NotImplemented "Instruction FNEG not yet implemented."
	134 NotImplemented "Instruction FNEG not yet implemented."
	135 Call Transform.get_up, X0
	136 Move V3, V0
	137 Move V4, V1
	138 Move V5, V2
	139 Move V0, V14
	140 Move V1, V9
	141 Move V2, V8
	142 Move X0, X31
	143 Call Quaternion.LookRotation, X0, X1
	144 Add X0, X31, 16
	145 Move X1, X31
	146 Move V14, V0
	147 Move V15, V1
	148 Move V8, V2
	149 Move V9, V3
	150 Call RaycastHit.get_collider, X0
	151 Compare X0, 0
	152 JumpIfEqual {224}
	153 Move X8, 0x2356000
	154 Move X8, [X8+632]
	155 Move X1, [X8]
	156 Call 0x21A4F50, X0
	157 Move X8, [X21]
	158 Move X20, [X19+184]
	159 Move X21, X0
	160 Move W9, [X8+224]
	161 Compare W9, 0
	162 JumpIfNotEqual {165}
	163 Move X0, X8
	164 Call 0x1C17DFC
	165 Move X0, X21
	166 Move X1, X31
	167 Move X2, X31
	168 Call Object.op_Inequality, X0, X1
	169 Move X1, X31
	170 Move TEMP, X0
	171 And TEMP, TEMP, 1
	172 Compare TEMP, 1
	173 JumpIfNotEqual {180}
	174 Compare X21, 0
	175 JumpIfEqual {224}
	176 Move X0, X21
	177 Move X1, X31
	178 Call Component.get_transform, X0
	179 Move X1, X0
	180 Compare X20, 0
	181 JumpIfEqual {224}
	182 Move X8, -19623936
	183 Move V0, [X8+1040]
	184 Move X0, X20
	185 Move V4, V15
	186 Move V5, V8
	187 Multiply S1, S11, S0
	188 Multiply S2, S12, S0
	189 Multiply S3, S13, S0
	190 Move V0, [X31+12]
	191 Move V6, V9
	192 Move W2, W31
	193 Add S0, S0, S1
	194 Move V1, [X31+8]
	195 Add S1, S1, S2
	196 Add S2, S10, S3
	197 Move V3, V14
	198 Call StickyItem.Stick, X0, X1, X2, X3, X4
	199 Move X0, X19
	200 Call Plunger.get_isSuctioned, X0
	201 Move TEMP, X0
	202 And TEMP, TEMP, 1
	203 Compare TEMP, 1
	204 JumpIfEqual {210}
	205 Move W1, 1
	206 Move X0, X19
	207 Call Plunger.set_isSuctioned, X0, X1
	208 Move X0, X19
	209 Call Plunger.HandleIsSuctionedChanged, X0
	210 Move X20, [X31+144]
	211 Move X19, [X31+152]
	212 Move X30, [X31+128]
	213 Move X21, [X31+136]
	214 Move D9, [X31+112]
	215 Move D8, [X31+120]
	216 Move D11, [X31+96]
	217 Move D10, [X31+104]
	218 Move D13, [X31+80]
	219 Move D12, [X31+88]
	220 Move D15, [X31+64]
	221 Move D14, [X31+72]
	222 Add X31, X31, 160
	223 Return 
	224 Call 0x1C17F20

Method: System.Void CheckCollision(UnityEngine.Collision collision)

Disassembly:
	0x01DA272C B.LE 0x1DA2798
	0x01DA2730 LDR X0, [X22]
	0x01DA2734 LDR W8, [X0 + 0xE0]
	0x01DA2738 CBNZ W8, 0x1DA2740
	0x01DA273C BL 0x1C16DFC
	0x01DA2740 LDRB W8, [X23 + 0x85D]
	0x01DA2744 CBNZ W8, 0x1DA275C
	0x01DA2748 ADRP X0, 0x2353000
	0x01DA274C LDR X0, [X0 + 0x7C8]
	0x01DA2750 BL 0x1C16CF4
	0x01DA2754 MOVZ W8, 0x1
	0x01DA2758 STRB W8, [X23 + 0x85D]
	0x01DA275C LDR X0, [X22]
	0x01DA2760 LDR W8, [X0 + 0xE0]
	0x01DA2764 CBNZ W8, 0x1DA2770
	0x01DA2768 BL 0x1C16DFC
	0x01DA276C LDR X0, [X22]
	0x01DA2770 LDR X8, [X0 + 0xB8]
	0x01DA2774 LDR X8, [X8]
	0x01DA2778 CBZ X8, 0x1DA28A8
	0x01DA277C LDR X0, [X8 + 0x30]
	0x01DA2780 CBZ X0, 0x1DA28A8
	0x01DA2784 MOV X1, X31
	0x01DA2788 BL 0x3C8E868
	0x01DA278C MOV V8.16B, V0.16B
	0x01DA2790 MOV V9.16B, V1.16B
	0x01DA2794 MOV V10.16B, V2.16B
	0x01DA2798 LDR X8, [X20 + 0x150]
	0x01DA279C CBZ X8, 0x1DA28A8
	0x01DA27A0 LDR X0, [X8 + 0x40]
	0x01DA27A4 CBZ X0, 0x1DA2888
	0x01DA27A8 LDRB W8, [X0 + 0x60]
	0x01DA27AC TBNZ X8, 0x1, 0x1DA2888
	0x01DA27B0 MOV X1, X31
	0x01DA27B4 BL 0x1E93668
	0x01DA27B8 TBZ X0, 0x0, 0x1DA2888
	0x01DA27BC ADD X1, X31, 0x18
	0x01DA27C0 MOV X0, X19
	0x01DA27C4 MOV V0.16B, V8.16B
	0x01DA27C8 MOV V1.16B, V9.16B
	0x01DA27CC MOV V2.16B, V10.16B
	0x01DA27D0 BL 0x1DA28AC
	0x01DA27D4 TBZ X0, 0x0, 0x1DA2888
	0x01DA27D8 LDR V8, [X31 + 0x18]
	0x01DA27DC LDR V9, [X31 + 0x20]
	0x01DA27E0 MOV X0, X31
	0x01DA27E4 BL 0x3C3C714
	0x01DA27E8 FMOV S1, 30
	0x01DA27EC FMUL S1, S0, S1
	0x00000000 INVALID
	0x01DA27F4 FMUL S8, S9, S1
	0x01DA27F8 MOV S1, V0.S[1]
	0x01DA27FC MOV X0, X20
	0x01DA2800 MOV V2.16B, V8.16B
	0x01DA2804 MOV X1, X31
	0x01DA2808 STR V0, [X31]
	0x01DA280C STR D0, [X31 + 0x18]
	0x01DA2810 STR S8, [X31 + 0x20]
	0x01DA2814 BL 0x1D8F63C
	0x01DA2818 LDR V0, [X19 + 0xD8]
	0x01DA281C LDR V1, [X19 + 0xE0]
	0x01DA2820 LDR V2, [X31]
	0x01DA2824 MOVZ W8, 0x1
	0x01DA2828 STRB W8, [X19 + 0xD5]
	0x01DA282C FADD S1, S8, S1
	0x01DA2830 FADD V0.2S, V2.2S, V0.2S
	0x01DA2834 STR D0, [X19 + 0xD8]
	0x01DA2838 STR S1, [X19 + 0xE0]
	0x01DA283C LDR X0, [X20 + 0x150]
	0x01DA2840 CBZ X0, 0x1DA28A8
	0x01DA2844 MOV X1, X31
	0x01DA2848 BL 0x1D881A0
	0x01DA284C TBZ X0, 0x0, 0x1DA2888
	0x01DA2850 LDR X8, [X19 + 0xB8]
	0x01DA2854 CBZ X8, 0x1DA28A8
	0x01DA2858 LDR X8, [X8 + 0x150]
	0x01DA285C CBZ X8, 0x1DA28A8
	0x01DA2860 LDR W8, [X8 + 0x80]
	0x01DA2864 MOV X0, X31
	0x01DA2868 CMP W8, 0x0
	0x01DA286C CSET W19, NE
	0x01DA2870 BL 0x3C3C714
	0x01DA2874 FADD S1, S0, S0
	0x01DA2878 FMOV S0, 0.25
	0x01DA287C MOV W0, W19
	0x01DA2880 MOV X1, X31
	0x01DA2884 BL 0x1DC2324
	0x01DA2888 LDP X20, X19, [X31 + 0x70]
	0x01DA288C LDP X22, X21, [X31 + 0x60]
	0x01DA2890 LDP X24, X23, [X31 + 0x50]
	0x01DA2894 LDR X30, [X31 + 0x48]
	0x01DA2898 LDP D9, D8, [X31 + 0x38]
	0x01DA289C LDR V10, [X31 + 0x30]
	0x01DA28A0 ADD X31, X31, 0x80
	0x01DA28A4 RET
	0x01DA28A8 BL 0x1C16F20
	0x01DA28AC SUB X31, X31, 0x70
	0x01DA28B0 STR D14, [X31 + 0x10]
	0x01DA28B4 STP D13, D12, [X31 + 0x18]
	0x01DA28B8 STP D11, D10, [X31 + 0x28]
	0x01DA28BC STP D9, D8, [X31 + 0x38]
	0x01DA28C0 STR X30, [X31 + 0x48]
	0x01DA28C4 STP X22, X21, [X31 + 0x50]
	0x01DA28C8 STP X20, X19, [X31 + 0x60]
	0x01DA28CC ADRP X8, 0xFFFFFFFFFED48000
	0x01DA28D0 LDR V11, [X0 + 0xC0]
	0x01DA28D4 LDR V12, [X8 + 0x44C]
	0x01DA28D8 MOV X19, X1
	0x01DA28DC FCMP S11, S12
	0x01DA28E0 B.PL 0x1DA2964
	0x01DA28E4 ADRP X21, 0x2636000

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, X1
	015 Move X19, X0
	016 Call Plunger.get_suctionToLayers, X0
	017 Compare X20, 0
	018 JumpIfEqual {152}
	019 Move X21, X0
	020 Move X0, X20
	021 Move X1, X31
	022 Call Collision.get_gameObject, X0
	023 Compare X0, 0
	024 JumpIfEqual {152}
	025 Move X1, X31
	026 Call GameObject.get_layer, X0
	027 Move W1, W0
	028 And X0, X21, 0
	029 Move X2, X31
	030 Call LayerMaskExtensions.Contains, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {120}
	035 Move X0, [X19+64]
	036 Compare X0, 0
	037 JumpIfEqual {120}
	038 Move W8, [X0+96]
	039 Move TEMP, X8
	040 And TEMP, TEMP, 2
	041 Compare TEMP, 2
	042 JumpIfEqual {120}
	043 Move X1, X31
	044 Call NetworkObject.get_HasStateAuthority, X0
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {120}
	049 Move X0, [X19+184]
	050 Compare X0, 0
	051 JumpIfEqual {152}
	052 Call StickyItem.get_isStuck, X0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {120}
	057 Move X0, [X19+136]
	058 Compare X0, 0
	059 JumpIfEqual {152}
	060 Move X1, X31
	061 Call Transform.get_forward, X0
	062 Move X21, 0x2637000
	063 Move W8, [X21+2749]
	064 Move V8, V0
	065 Move V9, V1
	066 Move V13, V2
	067 Compare W8, 0
	068 JumpIfNotEqual {74}
	069 Move X0, 0x2352000
	070 Move X0, [X0+1440]
	071 Call 0x1C17CF4
	072 Move W8, 1
	073 Move [X21+2749], W8
	074 Move X8, 0x2352000
	075 Move X8, [X8+1440]
	076 Move X0, X20
	077 Move X1, X31
	078 Move X8, [X8]
	079 Move X8, [X8+184]
	080 Move S14, [X8+36]
	081 Move S15, [X8+40]
	082 Move V10, [X8+44]
	083 Call Collision.get_relativeVelocity, X0
	084 Move X0, [X19+136]
	085 Move [X31+12], S0
	086 Compare X0, 0
	087 JumpIfEqual {152}
	088 Move X8, -19623936
	089 Move V3, [X8+268]
	090 Move V11, V1
	091 Move V12, V2
	092 Multiply S1, S8, S14
	093 Multiply S2, S9, S15
	094 Multiply S0, S13, S10
	095 Add S1, S1, S2
	096 Add S0, S0, S1
	097 Move S4, 3
	098 NotImplemented "Instruction FCMP not yet implemented."
	099 Move S0, 15
	100 Move X1, X31
	101 NotImplemented "Instruction FCSEL not yet implemented."
	102 Call Transform.get_forward, X0
	103 Move X0, X19
	104 Move V9, V0
	105 Move V13, V1
	106 Move V8, V2
	107 Call Plunger.get_isSuctioned, X0
	108 Move TEMP, X0
	109 And TEMP, TEMP, 1
	110 Compare TEMP, 1
	111 JumpIfEqual {134}
	112 Move V0, [X31+12]
	113 Multiply S1, S11, S13
	114 Multiply S0, S0, S9
	115 Add S0, S0, S1
	116 Multiply S1, S12, S8
	117 Add S0, S1, S0
	118 NotImplemented "Instruction FNEG not yet implemented."
	119 NotImplemented "Instruction FCMP not yet implemented."
	120 Move X20, [X31+96]
	121 Move X19, [X31+104]
	122 Move X30, [X31+80]
	123 Move X21, [X31+88]
	124 Move D9, [X31+64]
	125 Move D8, [X31+72]
	126 Move D11, [X31+48]
	127 Move D10, [X31+56]
	128 Move D13, [X31+32]
	129 Move D12, [X31+40]
	130 Move D15, [X31+16]
	131 Move D14, [X31+24]
	132 Add X31, X31, 112
	133 Return 
	134 Move X8, -19628032
	135 Move V0, [X8+3876]
	136 Move X0, X19
	137 Move X20, [X31+96]
	138 Move X19, [X31+104]
	139 Move X30, [X31+80]
	140 Move X21, [X31+88]
	141 Move D9, [X31+64]
	142 Move D8, [X31+72]
	143 Move D11, [X31+48]
	144 Move D10, [X31+56]
	145 Move D13, [X31+32]
	146 Move D12, [X31+40]
	147 Move D15, [X31+16]
	148 Move D14, [X31+24]
	149 Add X31, X31, 112
	150 Call Plunger.CheckAndStick, X0, V0
	151 Return 
	152 Call 0x1C17F20

Method: System.Void OnCollisionEnter(UnityEngine.Collision collision)

Disassembly:
	0x01DA28E8 LDRB W8, [X21 + 0x785]

ISIL:
	001 Call Plunger.CheckCollision, X0, X1
	002 Return 

Method: System.Void HandleStuckAnchorChanged(UnityEngine.Transform stuckAnchor)

Disassembly:
	0x01DA28EC MOV V8.16B, V2.16B
	0x01DA28F0 MOV V9.16B, V1.16B
	0x01DA28F4 MOV X20, X0
	0x01DA28F8 MOV V10.16B, V0.16B
	0x01DA28FC CBNZ W8, 0x1DA2914
	0x01DA2900 ADRP X0, 0x2351000
	0x01DA2904 LDR X0, [X0 + 0x5A8]
	0x01DA2908 BL 0x1C16CF4
	0x01DA290C MOVZ W8, 0x1
	0x01DA2910 STRB W8, [X21 + 0x785]
	0x01DA2914 ADRP X21, 0x2351000
	0x01DA2918 LDR X21, [X21 + 0x5A8]
	0x01DA291C LDR X0, [X21]
	0x01DA2920 LDR W8, [X0 + 0xE0]
	0x01DA2924 CBNZ W8, 0x1DA292C
	0x01DA2928 BL 0x1C16DFC
	0x01DA292C FMUL S0, S10, S10
	0x01DA2930 FMUL S1, S9, S9
	0x01DA2934 ADRP X8, 0xFFFFFFFFFED48000
	0x01DA2938 FADD S0, S0, S1
	0x01DA293C LDR V1, [X8 + 0x17C]
	0x01DA2940 FMUL S2, S8, S8
	0x01DA2944 FADD S0, S2, S0
	0x01DA2948 FSQRT S13, S0
	0x01DA294C FCMP S13, S1
	0x01DA2950 B.LE 0x1DA29A0
	0x01DA2954 FDIV S10, S10, S13
	0x01DA2958 FDIV S9, S9, S13
	0x01DA295C FDIV S8, S8, S13
	0x01DA2960 B 0x1DA29D8
	0x01DA2964 ADRP X20, 0x2636000
	0x01DA2968 LDRB W8, [X20 + 0x783]
	0x01DA296C CBNZ W8, 0x1DA2984
	0x01DA2970 ADRP X0, 0x2351000
	0x01DA2974 LDR X0, [X0 + 0x5A0]
	0x01DA2978 BL 0x1C16CF4
	0x01DA297C MOVZ W8, 0x1
	0x01DA2980 STRB W8, [X20 + 0x783]
	0x01DA2984 ADRP X8, 0x2351000
	0x01DA2988 LDR X8, [X8 + 0x5A0]
	0x01DA298C LDR X8, [X8]
	0x01DA2990 LDR X8, [X8 + 0xB8]
	0x01DA2994 LDR V0, [X8]
	0x01DA2998 LDR V1, [X8 + 0x8]
	0x01DA299C B 0x1DA2A90
	0x01DA29A0 ADRP X22, 0x2636000
	0x01DA29A4 LDRB W8, [X22 + 0x783]
	0x01DA29A8 CBNZ W8, 0x1DA29C0
	0x01DA29AC ADRP X0, 0x2351000
	0x01DA29B0 LDR X0, [X0 + 0x5A0]
	0x01DA29B4 BL 0x1C16CF4
	0x01DA29B8 MOVZ W8, 0x1
	0x01DA29BC STRB W8, [X22 + 0x783]
	0x01DA29C0 ADRP X8, 0x2351000
	0x01DA29C4 LDR X8, [X8 + 0x5A0]
	0x01DA29C8 LDR X8, [X8]
	0x01DA29CC LDR X8, [X8 + 0xB8]
	0x01DA29D0 LDP S10, S9, [X8]
	0x01DA29D4 LDR V8, [X8 + 0x8]
	0x01DA29D8 LDR X0, [X20 + 0x88]
	0x01DA29DC CBZ X0, 0x1DA2AC4
	0x01DA29E0 MOV X1, X31
	0x01DA29E4 BL 0x3C3FA04
	0x01DA29E8 LDR V3, [X20 + 0xC0]
	0x01DA29EC ADRP X22, 0x2636000
	0x01DA29F0 FMUL S0, S10, S0
	0x01DA29F4 FMUL S1, S9, S1
	0x01DA29F8 LDRB W8, [X22 + 0x784]
	0x01DA29FC FMUL S2, S8, S2
	0x01DA2A00 FADD S0, S0, S1
	0x01DA2A04 FADD S9, S2, S0
	0x01DA2A08 FSUB S0, S12, S3
	0x01DA2A0C FMOV S8, W31
	0x01DA2A10 FDIV S10, S0, S12
	0x01DA2A14 FMOV S14, 3
	0x01DA2A18 CBNZ W8, 0x1DA2A30
	0x01DA2A1C ADRP X0, 0x2351000
	0x01DA2A20 LDR X0, [X0 + 0x5A8]
	0x01DA2A24 BL 0x1C16CF4
	0x01DA2A28 MOVZ W8, 0x1
	0x01DA2A2C STRB W8, [X22 + 0x784]
	0x01DA2A30 LDR X0, [X21]
	0x01DA2A34 FMAX S9, S9, S8
	0x01DA2A38 FMUL S8, S10, S14
	0x01DA2A3C LDR W8, [X0 + 0xE0]
	0x01DA2A40 CBNZ W8, 0x1DA2A48
	0x01DA2A44 BL 0x1C16DFC
	0x01DA2A48 FMUL S0, S13, S9
	0x01DA2A4C FMOV S1, 0.25
	0x01DA2A50 LDR X0, [X20 + 0x88]
	0x01DA2A54 FMUL S0, S0, S1
	0x01DA2A58 FMOV S1, 10
	0x01DA2A5C FMINNM S0, S0, S1
	0x01DA2A60 FCMP S0, S8
	0x01DA2A64 FCSEL S0, S0, S8, GT
	0x01DA2A68 STR V0, [X31]
	0x01DA2A6C CBZ X0, 0x1DA2AC4
	0x01DA2A70 MOV X1, X31
	0x01DA2A74 BL 0x3C3FA04
	0x01DA2A78 FNEG S2, S2
	0x01DA2A7C MOV V0.S[1], V1.S[0]
	0x01DA2A80 LDR V1, [X31]
	0x01DA2A84 UNIMPLEMENTED

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2637000
	007 Move X22, 0x2352000
	008 Move W8, [X21+2675]
	009 Move X22, [X22+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2352000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2675], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Move X2, X31
	029 Call Object.op_Equality, X0, X1
	030 Move W8, [X19+232]
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {47}
	035 Compare W8, 0
	036 JumpIfEqual {49}
	037 Move X0, [X19+136]
	038 Compare X0, 0
	039 JumpIfEqual {136}
	040 Move X21, [X19+160]
	041 Move X1, X31
	042 Call Transform.get_position, X0
	043 Move S3, 1
	044 Move X0, X21
	045 Move X1, X31
	046 Call SFXManager.PlaySFX, X0, X1, V0
	047 Compare W8, 0
	048 JumpIfEqual {69}
	049 Move X0, [X22]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X20
	055 Move X1, X31
	056 Move X2, X31
	057 Call Object.op_Inequality, X0, X1
	058 And W8, W0, 1
	059 Move X0, X31
	060 Move [X19+232], W8
	061 Call Time.get_time
	062 Move [X19+236], S0
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move X30, [X31+48]
	068 Return 
	069 Move X0, [X19+136]
	070 Compare X0, 0
	071 JumpIfEqual {136}
	072 Move X21, [X19+152]
	073 Move X1, X31
	074 Call Transform.get_position, X0
	075 Move S3, 1
	076 Move X0, X21
	077 Move X1, X31
	078 Call SFXManager.PlaySFX, X0, X1, V0
	079 Move X0, [X19+64]
	080 Compare X0, 0
	081 JumpIfEqual {49}
	082 Move W8, [X0+96]
	083 Move TEMP, X8
	084 And TEMP, TEMP, 2
	085 Compare TEMP, 2
	086 JumpIfEqual {49}
	087 Move X1, X31
	088 Call NetworkObject.get_HasStateAuthority, X0
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {49}
	093 Move X8, [X19+176]
	094 Compare X8, 0
	095 JumpIfEqual {136}
	096 Move X0, [X22]
	097 Move X21, [X8+336]
	098 Move W9, [X0+224]
	099 Compare W9, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move X0, X21
	103 Move X1, X31
	104 Move X2, X31
	105 Call Object.op_Inequality, X0, X1
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfNotEqual {49}
	110 Move X8, [X19+176]
	111 Compare X8, 0
	112 JumpIfEqual {136}
	113 Move X0, [X8+336]
	114 Compare X0, 0
	115 JumpIfEqual {136}
	116 Move X1, X31
	117 Call AttachedItemAnchor.get_isHand, X0
	118 Move TEMP, X0
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfNotEqual {49}
	122 Move X8, [X19+176]
	123 Compare X8, 0
	124 JumpIfEqual {136}
	125 Move X8, [X8+336]
	126 Compare X8, 0
	127 JumpIfEqual {136}
	128 Move W8, [X8+128]
	129 Move S0, 1
	130 Move X1, X31
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X8, -19623936
	133 Move V1, [X8+188]
	134 NotImplemented "Instruction CSET not yet implemented."
	135 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	136 Call 0x1C17F20

Method: System.Void HandleGrabbedChanged()

Disassembly:
	0x00000000 INVALID

ISIL:
No ISIL was generated
Method: System.Void HandleIsGrabbedAndAnchoredChanged()

Disassembly:
	0x01DA2A8C FMUL S1, S1, S2
	0x01DA2A90 FCMP S11, S12
	0x01DA2A94 STR D0, [X19]
	0x01DA2A98 STR S1, [X19 + 0x8]
	0x01DA2A9C LDP X20, X19, [X31 + 0x60]
	0x01DA2AA0 LDP X22, X21, [X31 + 0x50]
	0x01DA2AA4 LDR X30, [X31 + 0x48]
	0x01DA2AA8 LDP D9, D8, [X31 + 0x38]
	0x01DA2AAC LDP D11, D10, [X31 + 0x28]
	0x01DA2AB0 LDP D13, D12, [X31 + 0x18]
	0x01DA2AB4 LDR V14, [X31 + 0x10]
	0x01DA2AB8 CSET W0, MI

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+176]
	004 Compare X8, 0
	005 JumpIfEqual {15}
	006 Move X8, [X8+376]
	007 Move X19, X0
	008 Move [X0+216], X8
	009 Move X0, X31
	010 Call Time.get_time
	011 Move [X19+236], S0
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DA2ABC ADD X31, X31, 0x70
	0x01DA2AC0 RET
	0x01DA2AC4 BL 0x1C16F20
	0x01DA2AC8 STR X30, [X31 - 0x30]!
	0x01DA2ACC STP X22, X21, [X31 + 0x10]
	0x01DA2AD0 STP X20, X19, [X31 + 0x20]
	0x01DA2AD4 ADRP X21, 0x2636000
	0x01DA2AD8 LDRB W8, [X21 + 0xA78]
	0x01DA2ADC MOV X19, X1
	0x01DA2AE0 MOV X20, X0
	0x01DA2AE4 TBNZ X8, 0x0, 0x1DA2AFC
	0x01DA2AE8 ADRP X0, 0x2351000
	0x01DA2AEC LDR X0, [X0 + 0x598]
	0x01DA2AF0 BL 0x1C16CF4
	0x01DA2AF4 MOVZ W8, 0x1
	0x01DA2AF8 STRB W8, [X21 + 0xA78]
	0x01DA2AFC LDR X8, [X20 + 0xB8]
	0x01DA2B00 STR X8, [X19]
	0x01DA2B04 LDR X8, [X20 + 0xB8]
	0x01DA2B08 CBZ X8, 0x1DA2BFC
	0x01DA2B0C ADRP X22, 0x2351000
	0x01DA2B10 LDR X22, [X22 + 0x598]
	0x01DA2B14 LDR X21, [X8 + 0x150]
	0x01DA2B18 LDR X0, [X22]
	0x01DA2B1C LDR W9, [X0 + 0xE0]
	0x01DA2B20 CBNZ W9, 0x1DA2B28
	0x01DA2B24 BL 0x1C16DFC
	0x01DA2B28 MOV X0, X21
	0x01DA2B2C MOV X1, X31
	0x01DA2B30 MOV X2, X31
	0x01DA2B34 BL 0x3C354F8
	0x01DA2B38 TBZ X0, 0x0, 0x1DA2BE0
	0x01DA2B3C LDR X8, [X20 + 0xB8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2637000
	007 Move X22, 0x2356000
	008 Move X20, 0x2355000
	009 Move W8, [X21+2676]
	010 Move X22, [X22+640]
	011 Move X20, [X20+3040]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2356000
	018 Move X0, [X0+640]
	019 Call 0x1C17CF4
	020 Move X0, 0x2355000
	021 Move X0, [X0+3040]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2676], W8
	025 Move X0, [X22]
	026 Move X1, X31
	027 Call Shader.PropertyToID, X0
	028 Move [X19+224], W0
	029 Move X0, [X20]
	030 Move X1, X31
	031 Call Shader.PropertyToID, X0
	032 Move [X19+228], W0
	033 Move X0, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X1, X31
	039 Move X30, [X31+48]
	040 Call NetworkBehaviour..ctor, X0
	041 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DA2B40 CBZ X8, 0x1DA2BFC
	0x01DA2B44 LDR X8, [X8 + 0x150]

ISIL:
	001 Move W1, [X0+168]
	002 Call Plunger.set_isSuctioned, X0, X1
	003 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DA2B48 CBZ X8, 0x1DA2BFC
	0x01DA2B4C LDR W9, [X8 + 0x80]
	0x01DA2B50 CMP W9, 0x3
	0x01DA2B54 B.NE 0x1DA2BE8
	0x01DA2B58 LDR X0, [X22]
	0x01DA2B5C LDR X21, [X8 + 0xC8]
	0x01DA2B60 LDR W9, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Plunger.get_isSuctioned, X0
	005 And W8, W0, 1
	006 Move [X19+168], W8
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 

