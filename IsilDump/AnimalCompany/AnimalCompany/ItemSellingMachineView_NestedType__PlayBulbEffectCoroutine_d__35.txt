Type: AnimalCompany.ItemSellingMachineView/<PlayBulbEffectCoroutine>d__35

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x01CD8664 ADRP X20, 0x254B000
	0x01CD8668 LDRB W8, [X20 + 0x610]
	0x01CD866C MOV X19, X0
	0x01CD8670 TBNZ X8, 0x0, 0x1CD86A0
	0x01CD8674 ADRP X0, 0x2277000
	0x01CD8678 LDR X0, [X0 + 0x518]
	0x01CD867C BL 0x1B6E7F0
	0x01CD8680 ADRP X0, 0x2277000
	0x01CD8684 LDR X0, [X0 + 0x330]
	0x01CD8688 BL 0x1B6E7F0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x01CD8B18 ADRP X10, 0xFFFFFFFFFEDD4000

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x01CD8B1C STR V1, [X9 + 0x4]
	0x01CD8B20 LDR X9, [X8 + 0xB8]
	0x01CD8B24 LDR V1, [X10 + 0x66]
	0x01CD8B28 ADRP X10, 0xFFFFFFFFFEDD2000
	0x01CD8B2C STR V0, [X9 + 0x5]
	0x01CD8B30 LDR X9, [X8 + 0xB8]
	0x01CD8B34 STR V1, [X9 + 0x6]
	0x01CD8B38 LDR X9, [X8 + 0xB8]
	0x01CD8B3C STR V0, [X9 + 0x7]
	0x01CD8B40 LDR X9, [X8 + 0xB8]
	0x01CD8B44 LDR V0, [X10 + 0x5A]
	0x01CD8B48 ADRP X10, 0xFFFFFFFFFEDD4000
	0x01CD8B4C STR V1, [X9 + 0x8]
	0x01CD8B50 LDR X9, [X8 + 0xB8]
	0x01CD8B54 LDR V1, [X10 + 0x81]
	0x01CD8B58 ADRP X10, 0xFFFFFFFFFEDD4000
	0x01CD8B5C STR V0, [X9 + 0x9]
	0x01CD8B60 LDR X9, [X8 + 0xB8]
	0x01CD8B64 LDR V0, [X10 + 0x96]
	0x01CD8B68 ADRP X10, 0xFFFFFFFFFEDD1000
	0x01CD8B6C STR V1, [X9 + 0xA]
	0x01CD8B70 LDR X9, [X8 + 0xB8]
	0x01CD8B74 STR V0, [X9 + 0xB]
	0x01CD8B78 LDR X8, [X8 + 0xB8]
	0x01CD8B7C LDR V0, [X10 + 0xFD]
	0x01CD8B80 STR V0, [X8 + 0xC]
	0x01CD8B84 LDR X30, [X31], #0x20
	0x01CD8B88 RET
	0x01CD8B8C MOV X1, X31
	0x01CD8B90 B 0x32276F8
	0x01CD8B94 STR X30, [X31 - 0x20]!
	0x01CD8B98 STP X20, X19, [X31 + 0x10]
	0x01CD8B9C ADRP X19, 0x254B000
	0x01CD8BA0 ADRP X20, 0x2276000
	0x01CD8BA4 LDRB W8, [X19 + 0x612]
	0x01CD8BA8 LDR X20, [X20 + 0x3D8]
	0x01CD8BAC TBNZ X8, 0x0, 0x1CD8BC4
	0x01CD8BB0 ADRP X0, 0x2276000
	0x01CD8BB4 LDR X0, [X0 + 0x3D8]
	0x01CD8BB8 BL 0x1B6E7F0
	0x01CD8BBC MOVZ W8, 0x1
	0x01CD8BC0 STRB W8, [X19 + 0x612]
	0x01CD8BC4 MOVZ W0, 0x80000000
	0x01CD8BC8 MOV X1, X31
	0x01CD8BCC BL 0x3A9DE6C
	0x01CD8BD0 LDR X8, [X20]
	0x01CD8BD4 MOV X1, X31
	0x01CD8BD8 LDR X8, [X8 + 0xB8]
	0x01CD8BDC STR W0, [X8]
	0x01CD8BE0 MOVZ W0, 0x2000
	0x01CD8BE4 BL 0x3A9DE6C
	0x01CD8BE8 LDR X8, [X20]
	0x01CD8BEC MOV X1, X31
	0x01CD8BF0 LDR X8, [X8 + 0xB8]
	0x01CD8BF4 STR W0, [X8 + 0x4]
	0x01CD8BF8 MOVZ W0, 0x100
	0x01CD8BFC BL 0x3A9DE6C
	0x01CD8C00 LDR X8, [X20]
	0x01CD8C04 MOV X1, X31
	0x01CD8C08 LDR X8, [X8 + 0xB8]
	0x01CD8C0C STR W0, [X8 + 0x8]
	0x01CD8C10 MOVZ W0, 0x1000
	0x01CD8C14 BL 0x3A9DE6C
	0x01CD8C18 LDR X8, [X20]
	0x01CD8C1C MOV X1, X31
	0x01CD8C20 LDR X8, [X8 + 0xB8]
	0x01CD8C24 STR W0, [X8 + 0xC]
	0x01CD8C28 MOVZ W0, 0x400
	0x01CD8C2C BL 0x3A9DE6C
	0x01CD8C30 LDR X8, [X20]
	0x01CD8C34 MOV X1, X31
	0x01CD8C38 LDR X9, [X8 + 0xB8]
	0x01CD8C3C STR W0, [X9 + 0x10]
	0x01CD8C40 LDR X8, [X8 + 0xB8]
	0x01CD8C44 LDR W0, [X8 + 0xC]
	0x01CD8C48 BL 0x3A9DE68
	0x01CD8C4C LDR X8, [X20]
	0x01CD8C50 MOV W19, W0
	0x01CD8C54 MOV X1, X31
	0x01CD8C58 LDR X8, [X8 + 0xB8]
	0x01CD8C5C LDR W8, [X8 + 0x10]
	0x01CD8C60 MOV X0, X8
	0x01CD8C64 BL 0x3A9DE68
	0x01CD8C68 ORR W0, W0, W19, 0x0
	0x01CD8C6C MOV X1, X31
	0x01CD8C70 BL 0x3A9DE6C
	0x01CD8C74 LDR X8, [X20]
	0x01CD8C78 MOV X1, X31
	0x01CD8C7C LDR X8, [X8 + 0xB8]
	0x01CD8C80 STR W0, [X8 + 0x14]
	0x01CD8C84 MOVZ W0, 0x100000
	0x01CD8C88 BL 0x3A9DE6C
	0x01CD8C8C LDR X8, [X20]
	0x01CD8C90 MOV X1, X31
	0x01CD8C94 LDR X8, [X8 + 0xB8]
	0x01CD8C98 STR W0, [X8 + 0x18]
	0x01CD8C9C MOVZ W0, 0x200000
	0x01CD8CA0 BL 0x3A9DE6C
	0x01CD8CA4 LDR X8, [X20]
	0x01CD8CA8 MOV X1, X31
	0x01CD8CAC LDR X8, [X8 + 0xB8]
	0x01CD8CB0 STR W0, [X8 + 0x1C]
	0x01CD8CB4 MOVZ W0, 0x800
	0x01CD8CB8 BL 0x3A9DE6C
	0x01CD8CBC LDR X8, [X20]
	0x01CD8CC0 MOV X1, X31
	0x01CD8CC4 LDR X8, [X8 + 0xB8]
	0x01CD8CC8 STR W0, [X8 + 0x20]
	0x01CD8CCC MOVZ W0, 0x8000
	0x01CD8CD0 BL 0x3A9DE6C
	0x01CD8CD4 LDR X8, [X20]
	0x01CD8CD8 MOV X1, X31
	0x01CD8CDC LDR X8, [X8 + 0xB8]
	0x01CD8CE0 STR W0, [X8 + 0x24]
	0x01CD8CE4 MOVZ W0, 0x80
	0x01CD8CE8 BL 0x3A9DE6C
	0x01CD8CEC LDR X8, [X20]
	0x01CD8CF0 MOV X1, X31
	0x01CD8CF4 LDR X8, [X8 + 0xB8]
	0x01CD8CF8 STR W0, [X8 + 0x28]
	0x01CD8CFC MOVZ W0, 0x200
	0x01CD8D00 BL 0x3A9DE6C
	0x01CD8D04 LDR X8, [X20]
	0x01CD8D08 MOV X1, X31
	0x01CD8D0C LDR X8, [X8 + 0xB8]
	0x01CD8D10 STR W0, [X8 + 0x2C]
	0x01CD8D14 MOVZ W0, 0x4000000
	0x01CD8D18 BL 0x3A9DE6C
	0x01CD8D1C LDR X8, [X20]
	0x01CD8D20 MOV X1, X31
	0x01CD8D24 LDR X8, [X8 + 0xB8]
	0x01CD8D28 STR W0, [X8 + 0x30]
	0x01CD8D2C MOVZ W0, 0x8000000
	0x01CD8D30 BL 0x3A9DE6C
	0x01CD8D34 LDR X8, [X20]
	0x01CD8D38 LDP X20, X19, [X31 + 0x10]
	0x01CD8D3C LDR X8, [X8 + 0xB8]
	0x01CD8D40 STR W0, [X8 + 0x34]
	0x01CD8D44 LDR X30, [X31], #0x20
	0x01CD8D48 RET
	0x01CD8D4C MOV X1, X31
	0x01CD8D50 B 0x32276F8
	0x01CD8D54 STP X30, X19, [X31 - 0x10]!
	0x01CD8D58 LDR X8, [X0 + 0x50]
	0x01CD8D5C CBZ X8, 0x1CD8D6C
	0x01CD8D60 LDR W0, [X8 + 0x3C]
	0x01CD8D64 LDP X30, X19, [X31], #0x10
	0x01CD8D68 RET
	0x01CD8D6C ADRP X0, 0x2275000
	0x01CD8D70 LDR X0, [X0 + 0x490]
	0x01CD8D74 BL 0x1B6E804
	0x01CD8D78 BL 0x1B6EA0C
	0x01CD8D7C MOV X19, X0
	0x01CD8D80 ADRP X0, 0x2277000
	0x01CD8D84 LDR X0, [X0 + 0xD50]
	0x01CD8D88 BL 0x1B6E804
	0x01CD8D8C MOV X1, X0
	0x01CD8D90 MOV X0, X19
	0x01CD8D94 MOV X2, X31
	0x01CD8D98 BL 0x31E7550
	0x01CD8D9C ADRP X0, 0x2277000
	0x01CD8DA0 LDR X0, [X0 + 0xD58]
	0x01CD8DA4 BL 0x1B6E804
	0x01CD8DA8 MOV X1, X0
	0x01CD8DAC MOV X0, X19
	0x01CD8DB0 BL 0x1B6E8E8
	0x01CD8DB4 STP X30, X19, [X31 - 0x10]!
	0x01CD8DB8 LDR X8, [X0 + 0x50]
	0x01CD8DBC CBZ X8, 0x1CD8DCC
	0x01CD8DC0 STR W1, [X8 + 0x3C]
	0x01CD8DC4 LDP X30, X19, [X31], #0x10
	0x01CD8DC8 RET
	0x01CD8DCC ADRP X0, 0x2275000
	0x01CD8DD0 LDR X0, [X0 + 0x490]
	0x01CD8DD4 BL 0x1B6E804
	0x01CD8DD8 BL 0x1B6EA0C
	0x01CD8DDC MOV X19, X0
	0x01CD8DE0 ADRP X0, 0x2277000
	0x01CD8DE4 LDR X0, [X0 + 0xD50]
	0x01CD8DE8 BL 0x1B6E804
	0x01CD8DEC MOV X1, X0
	0x01CD8DF0 MOV X0, X19
	0x01CD8DF4 MOV X2, X31
	0x01CD8DF8 BL 0x31E7550
	0x01CD8DFC ADRP X0, 0x2277000
	0x01CD8E00 LDR X0, [X0 + 0xD60]
	0x01CD8E04 BL 0x1B6E804
	0x01CD8E08 MOV X1, X0
	0x01CD8E0C MOV X0, X19
	0x01CD8E10 BL 0x1B6E8E8
	0x01CD8E14 STP X30, X19, [X31 - 0x10]!
	0x01CD8E18 LDR X8, [X0 + 0x50]
	0x01CD8E1C CBZ X8, 0x1CD8E2C
	0x01CD8E20 LDR V0, [X8 + 0x40]
	0x01CD8E24 LDP X30, X19, [X31], #0x10
	0x01CD8E28 RET
	0x01CD8E2C ADRP X0, 0x2275000
	0x01CD8E30 LDR X0, [X0 + 0x490]
	0x01CD8E34 BL 0x1B6E804
	0x01CD8E38 BL 0x1B6EA0C
	0x01CD8E3C MOV X19, X0
	0x01CD8E40 ADRP X0, 0x2277000
	0x01CD8E44 LDR X0, [X0 + 0xD68]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x254C000
	009 Move W8, [X20+1550]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0x2278000
	016 Move X0, [X0+3352]
	017 Call 0x1B6F7F0
	018 Move X0, 0x2278000
	019 Move X0, [X0+3112]
	020 Call 0x1B6F7F0
	021 Move X0, 0x2278000
	022 Move X0, [X0+3360]
	023 Call 0x1B6F7F0
	024 Move X0, 0x2278000
	025 Move X0, [X0+3368]
	026 Call 0x1B6F7F0
	027 Move X0, 0x2278000
	028 Move X0, [X0+3344]
	029 Call 0x1B6F7F0
	030 Move W8, 1
	031 Move [X20+1550], W8
	032 Move W8, [X19+16]
	033 Move X22, [X19+32]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Compare W8, 0
	036 JumpIfNotEqual {225}
	037 Move TEMP, 0
	038 Not TEMP
	039 Move W8, TEMP
	040 Move [X19+16], W8
	041 Compare X22, 0
	042 JumpIfEqual {235}
	043 Move X0, [X22+56]
	044 Compare X0, 0
	045 JumpIfEqual {235}
	046 Move X1, X31
	047 Call Renderer.get_material, X0
	048 Move X21, 0x2278000
	049 Move X21, [X21+3112]
	050 Move X20, X0
	051 Move X8, [X21]
	052 Move W9, [X8+224]
	053 Compare W9, 0
	054 JumpIfNotEqual {57}
	055 Move X0, X8
	056 Call 0x1B6F8F8
	057 Compare X20, 0
	058 JumpIfEqual {235}
	059 Move X8, [X21]
	060 Move S0, 1
	061 Move X0, X20
	062 Move X2, X31
	063 Move X8, [X8+184]
	064 Move W1, [X8]
	065 Call Material.SetFloat, X0, X1, V0
	066 Move X8, [X22+64]
	067 Compare X8, 0
	068 JumpIfEqual {235}
	069 NotImplemented "Instruction LDRSW not yet implemented."
	070 Move W10, [X8+24]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Add X8, X8, X9
	073 Move X0, [X8+32]
	074 Compare X0, 0
	075 JumpIfEqual {235}
	076 Move X1, X31
	077 Call Renderer.get_material, X0
	078 Compare X0, 0
	079 JumpIfEqual {235}
	080 Move X8, [X21]
	081 Move S0, 1
	082 Move X2, X31
	083 Move X8, [X8+184]
	084 Move W1, [X8]
	085 Call Material.SetFloat, X0, X1, V0
	086 Move X8, [X22+72]
	087 Compare X8, 0
	088 JumpIfEqual {235}
	089 NotImplemented "Instruction LDRSW not yet implemented."
	090 Move W10, [X8+24]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Add X8, X8, X9
	093 Move X0, [X8+32]
	094 Compare X0, 0
	095 JumpIfEqual {235}
	096 Move W1, 1
	097 Move X2, X31
	098 Move W20, 1
	099 Call Behaviour.set_enabled, X0, X1
	100 Move X8, [X22+136]
	101 Move [X19+16], W20
	102 Move [X19+24], X8
	103 Move TEMP, 0
	104 Not TEMP
	105 Move W8, TEMP
	106 Move [X19+16], W8
	107 Compare X22, 0
	108 JumpIfEqual {235}
	109 Move X8, [X22+64]
	110 Compare X8, 0
	111 JumpIfEqual {235}
	112 NotImplemented "Instruction LDRSW not yet implemented."
	113 Move W10, [X8+24]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Add X8, X8, X9
	116 Move X0, [X8+32]
	117 Compare X0, 0
	118 JumpIfEqual {235}
	119 Move X1, X31
	120 Call Renderer.get_material, X0
	121 Move X23, 0x2278000
	122 Move X23, [X23+3112]
	123 Move X20, X0
	124 Move X8, [X23]
	125 Move W9, [X8+224]
	126 Compare W9, 0
	127 JumpIfNotEqual {130}
	128 Move X0, X8
	129 Call 0x1B6F8F8
	130 Compare X20, 0
	131 JumpIfEqual {235}
	132 Move X8, [X23]
	133 Move S0, W31
	134 Move X0, X20
	135 Move X2, X31
	136 Move X8, [X8+184]
	137 Move W1, [X8]
	138 Call Material.SetFloat, X0, X1, V0
	139 Move X8, [X22+72]
	140 Compare X8, 0
	141 JumpIfEqual {235}
	142 NotImplemented "Instruction LDRSW not yet implemented."
	143 Move W10, [X8+24]
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Add X8, X8, X9
	146 Move X0, [X8+32]
	147 Compare X0, 0
	148 JumpIfEqual {235}
	149 Move W1, W31
	150 Move X2, X31
	151 Call Behaviour.set_enabled, X0, X1
	152 Move X8, [X22+128]
	153 Compare X8, 0
	154 JumpIfEqual {235}
	155 NotImplemented "Instruction LDRSW not yet implemented."
	156 Move W10, [X8+24]
	157 NotImplemented "Instruction CMP not yet implemented."
	158 Add X8, X8, X9
	159 Move [X8+32], X31
	160 Move X24, 0x2278000
	161 Move X24, [X24+3344]
	162 Move X19, [X22+128]
	163 Move X0, [X24]
	164 Move W8, [X0+224]
	165 Compare W8, 0
	166 JumpIfNotEqual {169}
	167 Call 0x1B6F8F8
	168 Move X0, [X24]
	169 Move X8, [X0+184]
	170 Move X20, [X8+8]
	171 Compare X20, 0
	172 JumpIfNotEqual {194}
	173 Move W8, [X0+224]
	174 Compare W8, 0
	175 JumpIfNotEqual {178}
	176 Call 0x1B6F8F8
	177 Move X0, [X24]
	178 Move X9, 0x2278000
	179 Move X8, [X0+184]
	180 Move X9, [X9+3360]
	181 Move X21, [X8]
	182 Move X0, [X9]
	183 Call 0x1B6FA0C
	184 Move X8, 0x2278000
	185 Move X8, [X8+3368]
	186 Move X1, X21
	187 Move X3, X31
	188 Move X20, X0
	189 Move X2, [X8]
	190 Call Predicate`1<Object>..ctor, X0, X1, X2
	191 Move X8, [X24]
	192 Move X8, [X8+184]
	193 Move [X8+8], X20
	194 Move X8, 0x2278000
	195 Move X8, [X8+3352]
	196 Move X0, X19
	197 Move X1, X20
	198 Move X2, [X8]
	199 Call Array.TrueForAll, X0, X1
	200 Move TEMP, X0
	201 And TEMP, TEMP, 1
	202 Compare TEMP, 1
	203 JumpIfNotEqual {225}
	204 Move X0, [X22+56]
	205 Compare X0, 0
	206 JumpIfEqual {235}
	207 Move X1, X31
	208 Call Renderer.get_material, X0
	209 Move X8, [X23]
	210 Move X19, X0
	211 Move W9, [X8+224]
	212 Compare W9, 0
	213 JumpIfNotEqual {216}
	214 Move X0, X8
	215 Call 0x1B6F8F8
	216 Compare X19, 0
	217 JumpIfEqual {235}
	218 Move X8, [X23]
	219 Move S0, W31
	220 Move X0, X19
	221 Move X2, X31
	222 Move X8, [X8+184]
	223 Move W1, [X8]
	224 Call Material.SetFloat, X0, X1, V0
	225 Move W20, W31
	226 Move W0, W20
	227 Move X20, [X31+48]
	228 Move X19, [X31+56]
	229 Move X22, [X31+32]
	230 Move X21, [X31+40]
	231 Move X24, [X31+16]
	232 Move X23, [X31+24]
	233 Move X30, [X31+64]
	234 Return X0
	235 Call 0x1B6FA1C
	236 Call 0x1B6FA24

Method: System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()

Disassembly:
	0x01CD8E48 BL 0x1B6E804
	0x01CD8E4C MOV X1, X0

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x01CD8E50 MOV X0, X19
	0x01CD8E54 MOV X2, X31
	0x01CD8E58 BL 0x31E7550
	0x01CD8E5C ADRP X0, 0x2277000
	0x01CD8E60 LDR X0, [X0 + 0xD70]
	0x01CD8E64 BL 0x1B6E804
	0x01CD8E68 MOV X1, X0
	0x01CD8E6C MOV X0, X19
	0x01CD8E70 BL 0x1B6E8E8
	0x01CD8E74 STP X30, X19, [X31 - 0x10]!
	0x01CD8E78 LDR X8, [X0 + 0x50]
	0x01CD8E7C CBZ X8, 0x1CD8E8C
	0x01CD8E80 STR S0, [X8 + 0x40]
	0x01CD8E84 LDP X30, X19, [X31], #0x10

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x2276000
	004 Move X0, [X0+2448]
	005 Call 0x1B6F804
	006 Call 0x1B6FA0C
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x2278000
	011 Move X0, [X0+3376]
	012 Call 0x1B6F804
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1B6F8E8

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x01CD8E88 RET
	0x01CD8E8C ADRP X0, 0x2275000

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

