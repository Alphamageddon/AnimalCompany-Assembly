Type: AnimalCompany.ItemSellingMachineView/<PlayItemSellAnimationCoroutine>d__38

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x01DDD044 B.CS 0x1DDD3CC
	0x01DDD048 ADD X8, X8, X22, 0x3, LSL
	0x01DDD04C LDR X0, [X8 + 0x20]
	0x01DDD050 CBZ X0, 0x1DDD3C8
	0x01DDD054 MOVZ W1, 0x1
	0x01DDD058 MOV X2, X31
	0x01DDD05C BL 0x3C13034
	0x01DDD060 LDR X8, [X21 + 0x78]
	0x01DDD064 CBNZ X8, 0x1DDCFFC
	0x01DDD068 B 0x1DDD3C8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x01DDD7C0 MOVZ W8, 0x1

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x01DDD7C4 STRB W8, [X21 + 0xC77]
	0x01DDD7C8 LDR X0, [X20]
	0x01DDD7CC LDR W8, [X0 + 0xE0]
	0x01DDD7D0 CBNZ W8, 0x1DDD7D8
	0x01DDD7D4 BL 0x1C16DFC
	0x01DDD7D8 ADRP X21, 0x25FB000
	0x01DDD7DC LDRB W8, [X21 + 0x78B]
	0x01DDD7E0 CBNZ W8, 0x1DDD7F8
	0x01DDD7E4 ADRP X0, 0x2316000
	0x01DDD7E8 LDR X0, [X0 + 0x898]
	0x01DDD7EC BL 0x1C16CF4
	0x01DDD7F0 MOVZ W8, 0x1
	0x01DDD7F4 STRB W8, [X21 + 0x78B]
	0x01DDD7F8 LDR X0, [X20]
	0x01DDD7FC LDR W8, [X0 + 0xE0]
	0x01DDD800 CBNZ W8, 0x1DDD80C
	0x01DDD804 BL 0x1C16DFC
	0x01DDD808 LDR X0, [X20]
	0x01DDD80C LDR X8, [X0 + 0xB8]
	0x01DDD810 MOV X0, X19
	0x01DDD814 MOV X1, X31
	0x01DDD818 LDR X8, [X8]
	0x01DDD81C STR X8, [X19 + 0x30]
	0x01DDD820 LDP X20, X19, [X31 + 0x10]
	0x01DDD824 LDP X30, X21, [X31], #0x20
	0x01DDD828 B 0x3C36C30
	0x01DDD82C RET
	0x01DDD830 SUB X31, X31, 0x70
	0x01DDD834 STR D8, [X31 + 0x20]
	0x01DDD838 STP X30, X25, [X31 + 0x30]
	0x01DDD83C STP X24, X23, [X31 + 0x40]
	0x01DDD840 STP X22, X21, [X31 + 0x50]
	0x01DDD844 STP X20, X19, [X31 + 0x60]
	0x01DDD848 ADRP X20, 0x25FB000
	0x01DDD84C LDRB W8, [X20 + 0xC78]
	0x01DDD850 MOV X19, X0
	0x01DDD854 TBNZ X8, 0x0, 0x1DDD914
	0x01DDD858 ADRP X0, 0x2316000
	0x01DDD85C LDR X0, [X0 + 0x648]
	0x01DDD860 BL 0x1C16CF4
	0x01DDD864 ADRP X0, 0x2317000
	0x01DDD868 LDR X0, [X0 + 0x9F0]
	0x01DDD86C BL 0x1C16CF4
	0x01DDD870 ADRP X0, 0x231B000
	0x01DDD874 LDR X0, [X0 + 0xB78]
	0x01DDD878 BL 0x1C16CF4
	0x01DDD87C ADRP X0, 0x2316000
	0x01DDD880 LDR X0, [X0 + 0x758]
	0x01DDD884 BL 0x1C16CF4
	0x01DDD888 ADRP X0, 0x2316000
	0x01DDD88C LDR X0, [X0 + 0x9D0]
	0x01DDD890 BL 0x1C16CF4
	0x01DDD894 ADRP X0, 0x2317000
	0x01DDD898 LDR X0, [X0 + 0xC60]
	0x01DDD89C BL 0x1C16CF4
	0x01DDD8A0 ADRP X0, 0x2318000
	0x01DDD8A4 LDR X0, [X0 + 0x570]
	0x01DDD8A8 BL 0x1C16CF4
	0x01DDD8AC ADRP X0, 0x231B000
	0x01DDD8B0 LDR X0, [X0 + 0xB80]
	0x01DDD8B4 BL 0x1C16CF4
	0x01DDD8B8 ADRP X0, 0x231B000
	0x01DDD8BC LDR X0, [X0 + 0xB88]
	0x01DDD8C0 BL 0x1C16CF4
	0x01DDD8C4 ADRP X0, 0x231B000
	0x01DDD8C8 LDR X0, [X0 + 0xB90]
	0x01DDD8CC BL 0x1C16CF4
	0x01DDD8D0 ADRP X0, 0x231B000
	0x01DDD8D4 LDR X0, [X0 + 0xB98]
	0x01DDD8D8 BL 0x1C16CF4
	0x01DDD8DC ADRP X0, 0x231B000
	0x01DDD8E0 LDR X0, [X0 + 0xBA0]
	0x01DDD8E4 BL 0x1C16CF4
	0x01DDD8E8 ADRP X0, 0x231B000
	0x01DDD8EC LDR X0, [X0 + 0xBA8]
	0x01DDD8F0 BL 0x1C16CF4
	0x01DDD8F4 ADRP X0, 0x2316000
	0x01DDD8F8 LDR X0, [X0 + 0x988]
	0x01DDD8FC BL 0x1C16CF4
	0x01DDD900 ADRP X0, 0x231B000
	0x01DDD904 LDR X0, [X0 + 0xBB0]
	0x01DDD908 BL 0x1C16CF4
	0x01DDD90C MOVZ W8, 0x1
	0x01DDD910 STRB W8, [X20 + 0xC78]
	0x01DDD914 STR X31, [X31 + 0x28]
	0x01DDD918 STP X31, X31, [X31 + 0x10]
	0x01DDD91C LDR W8, [X19 + 0x10]
	0x01DDD920 ADRP X25, 0x2316000
	0x01DDD924 ADRP X24, 0x2317000
	0x01DDD928 ADRP X23, 0x2318000
	0x01DDD92C LDR X25, [X25 + 0x648]
	0x01DDD930 LDR X22, [X19 + 0x20]
	0x01DDD934 LDR X24, [X24 + 0x9F0]
	0x01DDD938 LDR X23, [X23 + 0x570]
	0x01DDD93C CMP W8, 0x1
	0x01DDD940 B.EQ 0x1DDDA80
	0x01DDD944 CBNZ W8, 0x1DDDDC4
	0x01DDD948 MOVN W8, 0x0
	0x01DDD94C STR W8, [X19 + 0x10]
	0x01DDD950 LDR X0, [X25]
	0x01DDD954 LDR W8, [X0 + 0xE0]
	0x01DDD958 CBNZ W8, 0x1DDD960
	0x01DDD95C BL 0x1C16DFC
	0x01DDD960 ADRP X20, 0x25FB000
	0x01DDD964 LDRB W8, [X20 + 0x787]
	0x01DDD968 CBNZ W8, 0x1DDD980
	0x01DDD96C ADRP X0, 0x2316000
	0x01DDD970 LDR X0, [X0 + 0x648]
	0x01DDD974 BL 0x1C16CF4
	0x01DDD978 MOVZ W8, 0x1
	0x01DDD97C STRB W8, [X20 + 0x787]
	0x01DDD980 LDR X0, [X25]
	0x01DDD984 LDR W8, [X0 + 0xE0]
	0x01DDD988 CBNZ W8, 0x1DDD994
	0x01DDD98C BL 0x1C16DFC
	0x01DDD990 LDR X0, [X25]
	0x01DDD994 LDR X8, [X0 + 0xB8]
	0x01DDD998 LDR X8, [X8]
	0x01DDD99C CBZ X8, 0x1DDDF5C
	0x01DDD9A0 LDR X8, [X8 + 0xA0]
	0x01DDD9A4 CBZ X8, 0x1DDDF5C
	0x01DDD9A8 LDR X8, [X8 + 0x50]
	0x01DDD9AC LDR X0, [X24]
	0x01DDD9B0 STR X8, [X31 + 0x10]
	0x01DDD9B4 LDR W8, [X0 + 0xE0]
	0x01DDD9B8 CBNZ W8, 0x1DDD9C0
	0x01DDD9BC BL 0x1C16DFC
	0x01DDD9C0 ADD X0, X31, 0x10
	0x01DDD9C4 MOV X1, X31
	0x01DDD9C8 BL 0x3361FC4
	0x01DDD9CC LDRB W8, [X20 + 0x787]
	0x01DDD9D0 STR X0, [X31 + 0x28]
	0x01DDD9D4 CBNZ W8, 0x1DDD9EC
	0x01DDD9D8 ADRP X0, 0x2316000
	0x01DDD9DC LDR X0, [X0 + 0x648]
	0x01DDD9E0 BL 0x1C16CF4
	0x01DDD9E4 MOVZ W8, 0x1
	0x01DDD9E8 STRB W8, [X20 + 0x787]
	0x01DDD9EC LDR X0, [X25]
	0x01DDD9F0 LDR W8, [X0 + 0xE0]
	0x01DDD9F4 CBNZ W8, 0x1DDDA00
	0x01DDD9F8 BL 0x1C16DFC
	0x01DDD9FC LDR X0, [X25]
	0x01DDDA00 LDR X8, [X0 + 0xB8]
	0x01DDDA04 LDR X8, [X8]
	0x01DDDA08 CBZ X8, 0x1DDDF5C
	0x01DDDA0C LDR X8, [X8 + 0xA0]
	0x01DDDA10 CBZ X8, 0x1DDDF5C
	0x01DDDA14 LDR X20, [X8 + 0x50]
	0x01DDDA18 MOV X0, X31
	0x01DDDA1C BL 0x33616A4
	0x01DDDA20 MOV X1, X0
	0x01DDDA24 MOV X0, X20
	0x01DDDA28 MOV X2, X31
	0x01DDDA2C BL 0x3363010
	0x01DDDA30 STR X0, [X31 + 0x18]
	0x01DDDA34 CBZ X22, 0x1DDDF5C
	0x01DDDA38 LDR X0, [X23]
	0x01DDDA3C LDR X20, [X22 + 0x28]
	0x01DDDA40 LDR W8, [X0 + 0xE0]
	0x01DDDA44 CBNZ W8, 0x1DDDA4C
	0x01DDDA48 BL 0x1C16DFC
	0x01DDDA4C ADD X0, X31, 0x18
	0x01DDDA50 MOV X1, X31
	0x01DDDA54 BL 0x33941D0
	0x01DDDA58 ADRP X8, 0x231B000
	0x01DDDA5C LDR X8, [X8 + 0xBB0]
	0x01DDDA60 FMOV D1, 1
	0x01DDDA64 FCMP D0, D1
	0x01DDDA68 LDR X21, [X8]
	0x01DDDA6C B.PL 0x1DDDA8C
	0x01DDDA70 ADRP X8, 0x231B000
	0x01DDDA74 LDR X8, [X8 + 0xB90]
	0x01DDDA78 LDR X1, [X8]
	0x01DDDA7C B 0x1DDDAE4
	0x01DDDA80 MOVN W8, 0x0
	0x01DDDA84 STR W8, [X19 + 0x10]
	0x01DDDA88 B 0x1DDDB0C
	0x01DDDA8C LDR X0, [X24]
	0x01DDDA90 LDR W8, [X0 + 0xE0]
	0x01DDDA94 CBNZ W8, 0x1DDDA9C
	0x01DDDA98 BL 0x1C16DFC
	0x01DDDA9C ADD X0, X31, 0x28
	0x01DDDAA0 MOV X1, X31
	0x01DDDAA4 BL 0x33611C0
	0x01DDDAA8 ADRP X8, 0x231B000
	0x01DDDAAC LDR X8, [X8 + 0xB78]
	0x01DDDAB0 STR W0, [X31 + 0xC]
	0x01DDDAB4 ADD X1, X31, 0xC
	0x01DDDAB8 LDR X8, [X8]
	0x01DDDABC MOV X0, X8
	0x01DDDAC0 BL 0x1C16E04
	0x01DDDAC4 ADRP X8, 0x231B000
	0x01DDDAC8 LDR X8, [X8 + 0xB88]
	0x01DDDACC MOV X1, X0
	0x01DDDAD0 MOV X2, X31
	0x01DDDAD4 LDR X8, [X8]
	0x01DDDAD8 MOV X0, X8
	0x01DDDADC BL 0x321EFD0
	0x01DDDAE0 MOV X1, X0
	0x01DDDAE4 MOV X0, X21
	0x01DDDAE8 MOV X2, X31
	0x01DDDAEC BL 0x321B938
	0x01DDDAF0 CBZ X20, 0x1DDDF5C
	0x01DDDAF4 LDR X8, [X20]
	0x01DDDAF8 MOV X1, X0
	0x01DDDAFC MOV X0, X20
	0x01DDDB00 LDR X9, [X8 + 0x558]
	0x01DDDB04 LDR X2, [X8 + 0x560]
	0x01DDDB08 BLR X9
	0x01DDDB0C LDR X0, [X25]
	0x01DDDB10 LDR W8, [X0 + 0xE0]
	0x01DDDB14 CBNZ W8, 0x1DDDB1C
	0x01DDDB18 BL 0x1C16DFC
	0x01DDDB1C ADRP X20, 0x25FB000
	0x01DDDB20 LDRB W8, [X20 + 0x787]
	0x01DDDB24 CBNZ W8, 0x1DDDB3C
	0x01DDDB28 ADRP X0, 0x2316000
	0x01DDDB2C LDR X0, [X0 + 0x648]
	0x01DDDB30 BL 0x1C16CF4
	0x01DDDB34 MOVZ W8, 0x1
	0x01DDDB38 STRB W8, [X20 + 0x787]
	0x01DDDB3C LDR X0, [X25]
	0x01DDDB40 LDR W8, [X0 + 0xE0]
	0x01DDDB44 CBNZ W8, 0x1DDDB50
	0x01DDDB48 BL 0x1C16DFC
	0x01DDDB4C LDR X0, [X25]
	0x01DDDB50 LDR X8, [X0 + 0xB8]
	0x01DDDB54 LDR X8, [X8]
	0x01DDDB58 CBZ X8, 0x1DDDF5C
	0x01DDDB5C LDR X8, [X8 + 0xA0]
	0x01DDDB60 CBZ X8, 0x1DDDF5C
	0x01DDDB64 LDR X0, [X24]
	0x01DDDB68 LDR X20, [X8 + 0x50]
	0x01DDDB6C LDR W9, [X0 + 0xE0]
	0x01DDDB70 CBNZ W9, 0x1DDDB78
	0x01DDDB74 BL 0x1C16DFC
	0x01DDDB78 MOV X0, X31
	0x01DDDB7C BL 0x33616A4
	0x01DDDB80 MOV X1, X0
	0x01DDDB84 MOV X0, X20
	0x01DDDB88 MOV X2, X31
	0x01DDDB8C BL 0x3363010
	0x01DDDB90 LDR X8, [X23]
	0x01DDDB94 STR X0, [X31 + 0x18]
	0x01DDDB98 LDR W9, [X8 + 0xE0]
	0x01DDDB9C CBNZ W9, 0x1DDDBA8
	0x01DDDBA0 MOV X0, X8
	0x01DDDBA4 BL 0x1C16DFC
	0x01DDDBA8 ADD X0, X31, 0x18
	0x01DDDBAC MOV X1, X31
	0x01DDDBB0 BL 0x3394234
	0x01DDDBB4 FCMP D0, 0x0
	0x01DDDBB8 B.LS 0x1DDDD78
	0x01DDDBBC LDR X0, [X23]
	0x01DDDBC0 LDR W8, [X0 + 0xE0]
	0x01DDDBC4 CBNZ W8, 0x1DDDBCC
	0x01DDDBC8 BL 0x1C16DFC
	0x01DDDBCC ADD X0, X31, 0x18
	0x01DDDBD0 MOV X1, X31
	0x01DDDBD4 BL 0x33941D0
	0x01DDDBD8 FMOV D1, 1
	0x01DDDBDC FCMP D0, D1
	0x01DDDBE0 B.LE 0x1DDDDCC
	0x01DDDBE4 ADRP X8, 0x2316000
	0x01DDDBE8 LDR X8, [X8 + 0x9D0]
	0x01DDDBEC MOVZ W1, 0x4
	0x01DDDBF0 LDR X0, [X8]
	0x01DDDBF4 BL 0x1C16D6C
	0x01DDDBF8 LDR X8, [X23]
	0x01DDDBFC MOV X20, X0
	0x01DDDC00 LDR W9, [X8 + 0xE0]
	0x01DDDC04 CBNZ W9, 0x1DDDC10
	0x01DDDC08 MOV X0, X8
	0x01DDDC0C BL 0x1C16DFC
	0x01DDDC10 ADD X0, X31, 0x18
	0x01DDDC14 MOV X1, X31
	0x01DDDC18 BL 0x33941D0
	0x01DDDC1C ADRP X23, 0x2316000
	0x01DDDC20 LDR X23, [X23 + 0x758]
	0x01DDDC24 MOVZ X9, 0x7FF00000
	0x01DDDC28 FMOV D1, X9
	0x01DDDC2C FCVTZS W8, D0
	0x01DDDC30 LDR X0, [X23]
	0x01DDDC34 FCMP D0, D1
	0x01DDDC38 MOVZ W9, 0x80000000
	0x01DDDC3C CSEL W8, W9, W8, EQ
	0x01DDDC40 ADD X1, X31, 0xC
	0x01DDDC44 STR W8, [X31 + 0xC]
	0x01DDDC48 BL 0x1C16E04
	0x01DDDC4C CBZ X20, 0x1DDDF5C
	0x01DDDC50 MOV X21, X0
	0x01DDDC54 CBZ X0, 0x1DDDC6C
	0x01DDDC58 LDR X8, [X20]
	0x01DDDC5C MOV X0, X21
	0x01DDDC60 LDR X1, [X8 + 0x40]
	0x01DDDC64 BL 0x1C16E00
	0x01DDDC68 CBZ X0, 0x1DDDF64
	0x01DDDC6C LDR W8, [X20 + 0x18]
	0x01DDDC70 CBZ W8, 0x1DDDF60
	0x01DDDC74 ADD X0, X31, 0x18
	0x01DDDC78 MOV X1, X31
	0x01DDDC7C STR X21, [X20 + 0x20]
	0x01DDDC80 BL 0x33940AC
	0x01DDDC84 LDR X8, [X23]
	0x01DDDC88 STR W0, [X31 + 0x8]
	0x01DDDC8C ADD X1, X31, 0x8
	0x01DDDC90 MOV X0, X8
	0x01DDDC94 BL 0x1C16E04
	0x01DDDC98 MOV X21, X0
	0x01DDDC9C CBZ X0, 0x1DDDCB4
	0x01DDDCA0 LDR X8, [X20]
	0x01DDDCA4 MOV X0, X21
	0x01DDDCA8 LDR X1, [X8 + 0x40]
	0x01DDDCAC BL 0x1C16E00
	0x01DDDCB0 CBZ X0, 0x1DDDF64
	0x01DDDCB4 LDR W8, [X20 + 0x18]
	0x01DDDCB8 CMP W8, 0x1
	0x01DDDCBC B.LS 0x1DDDF60
	0x01DDDCC0 ADD X0, X31, 0x18
	0x01DDDCC4 MOV X1, X31
	0x01DDDCC8 STR X21, [X20 + 0x28]
	0x01DDDCCC BL 0x339413C
	0x01DDDCD0 LDR X8, [X23]
	0x01DDDCD4 STR W0, [X31 + 0x4]
	0x01DDDCD8 ADD X1, X31, 0x4
	0x01DDDCDC MOV X0, X8
	0x01DDDCE0 BL 0x1C16E04
	0x01DDDCE4 MOV X21, X0
	0x01DDDCE8 CBZ X0, 0x1DDDD00
	0x01DDDCEC LDR X8, [X20]
	0x01DDDCF0 MOV X0, X21
	0x01DDDCF4 LDR X1, [X8 + 0x40]
	0x01DDDCF8 BL 0x1C16E00
	0x01DDDCFC CBZ X0, 0x1DDDF64
	0x01DDDD00 LDR W8, [X20 + 0x18]
	0x01DDDD04 CMP W8, 0x2
	0x01DDDD08 B.LS 0x1DDDF60
	0x01DDDD0C ADD X0, X31, 0x18
	0x01DDDD10 MOV X1, X31
	0x01DDDD14 STR X21, [X20 + 0x30]
	0x01DDDD18 BL 0x3394184
	0x01DDDD1C LDR X8, [X23]
	0x01DDDD20 STR W0, [X31]
	0x01DDDD24 ADD X1, X31, 0x0
	0x01DDDD28 MOV X0, X8
	0x01DDDD2C BL 0x1C16E04
	0x01DDDD30 MOV X21, X0
	0x01DDDD34 CBZ X0, 0x1DDDD4C
	0x01DDDD38 LDR X8, [X20]
	0x01DDDD3C MOV X0, X21
	0x01DDDD40 LDR X1, [X8 + 0x40]
	0x01DDDD44 BL 0x1C16E00
	0x01DDDD48 CBZ X0, 0x1DDDF64
	0x01DDDD4C LDR W8, [X20 + 0x18]
	0x01DDDD50 CMP W8, 0x3
	0x01DDDD54 B.LS 0x1DDDF60
	0x01DDDD58 STR X21, [X20 + 0x38]
	0x01DDDD5C ADRP X8, 0x231B000
	0x01DDDD60 LDR X8, [X8 + 0xB98]
	0x01DDDD64 MOV X1, X20
	0x01DDDD68 MOV X2, X31
	0x01DDDD6C LDR X0, [X8]
	0x01DDDD70 BL 0x3227C5C
	0x01DDDD74 B 0x1DDDF04
	0x01DDDD78 CBZ X22, 0x1DDDF5C
	0x01DDDD7C LDR X0, [X22 + 0x28]
	0x01DDDD80 CBZ X0, 0x1DDDF5C
	0x01DDDD84 ADRP X9, 0x231B000
	0x01DDDD88 LDR X8, [X0]
	0x01DDDD8C LDR X9, [X9 + 0xB80]
	0x01DDDD90 LDR X2, [X8 + 0x560]
	0x01DDDD94 LDR X1, [X9]
	0x01DDDD98 LDR X9, [X8 + 0x558]
	0x01DDDD9C BLR X9
	0x01DDDDA0 LDR X0, [X22 + 0x20]
	0x01DDDDA4 CBZ X0, 0x1DDDF5C
	0x01DDDDA8 ADRP X9, 0x2316000
	0x01DDDDAC LDR X8, [X0]
	0x01DDDDB0 LDR X9, [X9 + 0x988]
	0x01DDDDB4 LDR X2, [X8 + 0x560]
	0x01DDDDB8 LDR X1, [X9]
	0x01DDDDBC LDR X9, [X8 + 0x558]
	0x01DDDDC0 BLR X9
	0x01DDDDC4 MOV W0, W31
	0x01DDDDC8 B 0x1DDDF40
	0x01DDDDCC LDR X0, [X23]
	0x01DDDDD0 LDR W8, [X0 + 0xE0]
	0x01DDDDD4 CBNZ W8, 0x1DDDDDC
	0x01DDDDD8 BL 0x1C16DFC
	0x01DDDDDC ADD X0, X31, 0x18
	0x01DDDDE0 MOV X1, X31
	0x01DDDDE4 BL 0x33941E8
	0x01DDDDE8 LDR X0, [X23]
	0x01DDDDEC MOV V8.16B, V0.16B
	0x01DDDDF0 LDR W8, [X0 + 0xE0]
	0x01DDDDF4 CBNZ W8, 0x1DDDDFC
	0x01DDDDF8 BL 0x1C16DFC
	0x01DDDDFC FMOV D0, 1
	0x01DDDE00 ADD X0, X31, 0x18
	0x01DDDE04 MOV X1, X31
	0x01DDDE08 FCMP D8, D0
	0x01DDDE0C B.LE 0x1DDDEA0
	0x01DDDE10 BL 0x33940AC
	0x01DDDE14 ADRP X23, 0x2316000
	0x01DDDE18 LDR X23, [X23 + 0x758]
	0x01DDDE1C STR W0, [X31 + 0xC]
	0x01DDDE20 ADD X1, X31, 0xC
	0x01DDDE24 LDR X8, [X23]
	0x01DDDE28 MOV X0, X8
	0x01DDDE2C BL 0x1C16E04
	0x01DDDE30 MOV X20, X0
	0x01DDDE34 ADD X0, X31, 0x18
	0x01DDDE38 MOV X1, X31
	0x01DDDE3C BL 0x339413C
	0x01DDDE40 LDR X8, [X23]
	0x01DDDE44 STR W0, [X31 + 0x8]
	0x01DDDE48 ADD X1, X31, 0x8
	0x01DDDE4C MOV X0, X8
	0x01DDDE50 BL 0x1C16E04
	0x01DDDE54 MOV X21, X0
	0x01DDDE58 ADD X0, X31, 0x18
	0x01DDDE5C MOV X1, X31
	0x01DDDE60 BL 0x3394184
	0x01DDDE64 LDR X8, [X23]
	0x01DDDE68 STR W0, [X31 + 0x4]
	0x01DDDE6C ADD X1, X31, 0x4
	0x01DDDE70 MOV X0, X8
	0x01DDDE74 BL 0x1C16E04
	0x01DDDE78 ADRP X8, 0x231B000
	0x01DDDE7C LDR X8, [X8 + 0xBA0]
	0x01DDDE80 MOV X3, X0
	0x01DDDE84 MOV X1, X20
	0x01DDDE88 MOV X2, X21
	0x01DDDE8C LDR X8, [X8]
	0x01DDDE90 MOV X4, X31
	0x01DDDE94 MOV X0, X8
	0x01DDDE98 BL 0x3227C18
	0x01DDDE9C B 0x1DDDF04
	0x01DDDEA0 BL 0x339413C
	0x01DDDEA4 ADRP X21, 0x2316000
	0x01DDDEA8 LDR X21, [X21 + 0x758]
	0x01DDDEAC STR W0, [X31 + 0xC]
	0x01DDDEB0 ADD X1, X31, 0xC
	0x01DDDEB4 LDR X8, [X21]
	0x01DDDEB8 MOV X0, X8
	0x01DDDEBC BL 0x1C16E04
	0x01DDDEC0 MOV X20, X0
	0x01DDDEC4 ADD X0, X31, 0x18
	0x01DDDEC8 MOV X1, X31
	0x01DDDECC BL 0x3394184
	0x01DDDED0 LDR X8, [X21]
	0x01DDDED4 STR W0, [X31 + 0x8]
	0x01DDDED8 ADD X1, X31, 0x8
	0x01DDDEDC MOV X0, X8
	0x01DDDEE0 BL 0x1C16E04
	0x01DDDEE4 ADRP X8, 0x231B000
	0x01DDDEE8 LDR X8, [X8 + 0xBA8]
	0x01DDDEEC MOV X2, X0
	0x01DDDEF0 MOV X1, X20
	0x01DDDEF4 MOV X3, X31
	0x01DDDEF8 LDR X8, [X8]
	0x01DDDEFC MOV X0, X8
	0x01DDDF00 BL 0x3227BD4
	0x01DDDF04 MOV X1, X0
	0x01DDDF08 CBZ X22, 0x1DDDF5C
	0x01DDDF0C LDR X0, [X22 + 0x20]
	0x01DDDF10 CBZ X0, 0x1DDDF5C
	0x01DDDF14 LDR X8, [X0]
	0x01DDDF18 LDR X9, [X8 + 0x558]
	0x01DDDF1C LDR X2, [X8 + 0x560]
	0x01DDDF20 BLR X9
	0x01DDDF24 FMOV S0, 1
	0x01DDDF28 MOV W0, W31
	0x01DDDF2C MOV X1, X31

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x25FC000
	012 Move W8, [X20+3185]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x231C000
	019 Move X0, [X0+2632]
	020 Call 0x1C17CF4
	021 Move X0, 0x231A000
	022 Move X0, [X0+3120]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3185], W8
	026 Move W8, [X19+16]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X20, [X19+32]
	029 Move X9, -19591168
	030 Add X9, X9, 2362
	031 NotImplemented "Instruction ADR not yet implemented."
	032 Move W11, [X9]
	033 Add X10, X10, X11
	034 CallNoReturn X10
	035 Move TEMP, 0
	036 Not TEMP
	037 Move W8, TEMP
	038 Move [X19+16], W8
	039 Compare X20, 0
	040 JumpIfEqual {506}
	041 Move X21, [X20+136]
	042 Compare X21, 0
	043 JumpIfEqual {506}
	044 Move X8, [X21+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X22, X31
	047 And X8, X8, 0
	048 Add X23, X21, 32
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X1, [X23]
	051 Compare X1, 0
	052 JumpIfEqual {56}
	053 Move X0, X20
	054 Move X2, X31
	055 Call MonoBehaviour.StopCoroutine, X0, X1
	056 Move W8, [X21+24]
	057 Add X22, X22, 1
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X8, [X20+72]
	060 Compare X8, 0
	061 JumpIfEqual {506}
	062 Move W9, [X8+24]
	063 Compare W9, 0
	064 JumpIfEqual {507}
	065 Move X0, [X8+32]
	066 Compare X0, 0
	067 JumpIfEqual {506}
	068 Move X1, X31
	069 Call Light.get_intensity, X0
	070 Move [X19+56], S0
	071 Move X21, [X20+72]
	072 Compare X21, 0
	073 JumpIfEqual {506}
	074 Move W8, [X21+24]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move W22, W31
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Add X8, X21, W22
	079 Move X0, [X8+32]
	080 Compare X0, 0
	081 JumpIfEqual {506}
	082 Move W1, W31
	083 Move X2, X31
	084 Call Behaviour.set_enabled, X0, X1
	085 Move W8, [X21+24]
	086 Add W22, W22, 1
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X0, [X20+56]
	089 Compare X0, 0
	090 JumpIfEqual {506}
	091 Move X1, X31
	092 Call Renderer.get_material, X0
	093 Move X22, 0x231C000
	094 Move X22, [X22+2632]
	095 Move X21, X0
	096 Move X8, [X22]
	097 Move W9, [X8+224]
	098 Compare W9, 0
	099 JumpIfNotEqual {102}
	100 Move X0, X8
	101 Call 0x1C17DFC
	102 Compare X21, 0
	103 JumpIfEqual {506}
	104 Move X8, [X22]
	105 Move S0, 1
	106 Move X0, X21
	107 Move X2, X31
	108 Move X8, [X8+184]
	109 Move W1, [X8]
	110 Call Material.SetFloat, X0, X1, V0
	111 Move X23, [X20+64]
	112 Compare X23, 0
	113 JumpIfEqual {506}
	114 Move W8, [X23+24]
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move W24, W31
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Add X8, X23, W24
	119 Move X0, [X8+32]
	120 Compare X0, 0
	121 JumpIfEqual {506}
	122 Move X1, X31
	123 Call Renderer.get_material, X0
	124 Move X8, [X22]
	125 Move X21, X0
	126 Move W9, [X8+224]
	127 Compare W9, 0
	128 JumpIfNotEqual {131}
	129 Move X0, X8
	130 Call 0x1C17DFC
	131 Compare X21, 0
	132 JumpIfEqual {506}
	133 Move X8, [X22]
	134 Move S0, 1
	135 Move X0, X21
	136 Move X2, X31
	137 Move X8, [X8+184]
	138 Move W1, [X8]
	139 Call Material.SetFloat, X0, X1, V0
	140 Move W8, [X23+24]
	141 Add W24, W24, 1
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move X21, [X20+88]
	144 Move X0, X20
	145 Move X1, X31
	146 Call Component.get_transform, X0
	147 Compare X0, 0
	148 JumpIfEqual {506}
	149 Move X1, X31
	150 Call Transform.get_position, X0
	151 Move S3, 1
	152 Move X0, X21
	153 Move X1, X31
	154 Call SFXManager.PlaySFX, X0, X1, V0
	155 Move V8, [X19+40]
	156 Move [X19+60], S8
	157 Move V8, [X19+60]
	158 Move TEMP, 0
	159 Not TEMP
	160 Move W8, TEMP
	161 Move [X19+16], W8
	162 NotImplemented "Instruction FCMP not yet implemented."
	163 Move X0, X31
	164 Call Time.get_deltaTime
	165 Subtract S0, S8, S0
	166 Move [X19+60], S0
	167 Compare X20, 0
	168 JumpIfEqual {506}
	169 Move X8, [X20+112]
	170 Compare X8, 0
	171 JumpIfEqual {506}
	172 Move V1, [X19+40]
	173 Move X22, 0x231C000
	174 Move X22, [X22+2632]
	175 Move S9, 1
	176 NotImplemented "Instruction FDIV not yet implemented."
	177 Move TEMP, 0
	178 Not TEMP
	179 Move W21, TEMP
	180 Subtract S8, S9, S0
	181 Move S10, W31
	182 Move W8, [X8+24]
	183 Add W23, W21, 1
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Subtract S0, S9, S8
	186 Move S1, 3
	187 Call 0x3EB2B50
	188 Move X0, [X22]
	189 Move V8, V0
	190 Move W8, [X0+224]
	191 Compare W8, 0
	192 JumpIfNotEqual {195}
	193 Call 0x1C17DFC
	194 Move X0, [X22]
	195 Move X8, [X0+184]
	196 Move X8, [X8+16]
	197 Compare X8, 0
	198 JumpIfEqual {506}
	199 Move W9, [X8+24]
	200 NotImplemented "Instruction CMP not yet implemented."
	201 Move X9, [X20+112]
	202 Subtract S8, S9, S8
	203 NotImplemented "Instruction FMIN not yet implemented."
	204 NotImplemented "Instruction FCMP not yet implemented."
	205 NotImplemented "Instruction FCSEL not yet implemented."
	206 Compare X9, 0
	207 JumpIfEqual {506}
	208 Move W10, [X9+24]
	209 Add W21, W21, 1
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move X10, W23
	212 Add X9, X9, X10
	213 Move X0, [X9+32]
	214 Compare X0, 0
	215 JumpIfEqual {506}
	216 Add X8, X8, X10
	217 Move V1, [X8+32]
	218 Move X1, X31
	219 Subtract S2, S10, S1
	220 Multiply S0, S0, S2
	221 Add S0, S1, S0
	222 Move S1, W31
	223 Move S2, W31
	224 Call Transform.set_localEulerAngles, X0, X1
	225 Move X8, [X20+112]
	226 Compare X8, 0
	227 JumpIfNotEqual {182}
	228 Move V8, [X19+60]
	229 Move TEMP, 0
	230 Not TEMP
	231 Move W8, TEMP
	232 Move [X19+16], W8
	233 Move TEMP, 0
	234 Not TEMP
	235 Move W8, TEMP
	236 Move [X19+16], W8
	237 Compare X20, 0
	238 JumpIfEqual {506}
	239 Move X21, [X20+96]
	240 Move X0, X20
	241 Move X1, X31
	242 Call Component.get_transform, X0
	243 Compare X0, 0
	244 JumpIfEqual {506}
	245 Move X1, X31
	246 Call Transform.get_position, X0
	247 Move S3, 1
	248 Move X0, X21
	249 Move X1, X31
	250 Call SFXManager.PlaySFX, X0, X1, V0
	251 Move V8, [X19+52]
	252 Move [X19+60], S8
	253 Move V8, [X19+60]
	254 Move TEMP, 0
	255 Not TEMP
	256 Move W8, TEMP
	257 Move [X19+16], W8
	258 NotImplemented "Instruction FCMP not yet implemented."
	259 Move X0, X31
	260 Call Time.get_deltaTime
	261 Subtract S0, S8, S0
	262 Move [X19+60], S0
	263 Compare X20, 0
	264 JumpIfEqual {506}
	265 Move X8, [X20+112]
	266 Compare X8, 0
	267 JumpIfEqual {506}
	268 Move V1, [X19+52]
	269 Move X22, 0x231C000
	270 Move X22, [X22+2632]
	271 Move S9, 1
	272 NotImplemented "Instruction FDIV not yet implemented."
	273 Move W21, W31
	274 Subtract S8, S9, S0
	275 Move S10, W31
	276 Move W8, [X8+24]
	277 NotImplemented "Instruction CMP not yet implemented."
	278 Subtract S0, S9, S8
	279 Move S1, 3
	280 Call 0x3EB2B50
	281 Move X0, [X22]
	282 Move V8, V0
	283 Move W8, [X0+224]
	284 Compare W8, 0
	285 JumpIfNotEqual {288}
	286 Call 0x1C17DFC
	287 Move X0, [X22]
	288 Move X8, [X0+184]
	289 Move X8, [X8+16]
	290 Compare X8, 0
	291 JumpIfEqual {506}
	292 Move W9, [X8+24]
	293 NotImplemented "Instruction CMP not yet implemented."
	294 Move X9, [X20+112]
	295 Subtract S8, S9, S8
	296 NotImplemented "Instruction FMIN not yet implemented."
	297 NotImplemented "Instruction FCMP not yet implemented."
	298 NotImplemented "Instruction FCSEL not yet implemented."
	299 Compare X9, 0
	300 JumpIfEqual {506}
	301 Move W10, [X9+24]
	302 NotImplemented "Instruction CMP not yet implemented."
	303 Move X10, W21
	304 Add X9, X9, X10
	305 Move X0, [X9+32]
	306 Compare X0, 0
	307 JumpIfEqual {506}
	308 Add X8, X8, X10
	309 Move V1, [X8+32]
	310 Move S2, W31
	311 Move X1, X31
	312 Add W21, W21, 1
	313 Multiply S0, S0, S1
	314 Add S0, S0, S10
	315 Move S1, W31
	316 Call Transform.set_localEulerAngles, X0, X1
	317 Move X8, [X20+112]
	318 Compare X8, 0
	319 JumpIfNotEqual {276}
	320 Move W0, W31
	321 Compare X20, 0
	322 JumpIfEqual {506}
	323 Move X21, [X20+104]
	324 Move X0, X20
	325 Move X1, X31
	326 Call Component.get_transform, X0
	327 Compare X0, 0
	328 JumpIfEqual {506}
	329 Move X1, X31
	330 Call Transform.get_position, X0
	331 Move S3, 1
	332 Move X0, X21
	333 Move X1, X31
	334 Call SFXManager.PlaySFX, X0, X1, V0
	335 Move X22, [X20+72]
	336 Compare X22, 0
	337 JumpIfEqual {506}
	338 Move W8, [X22+24]
	339 NotImplemented "Instruction CMP not yet implemented."
	340 Move W23, W31
	341 NotImplemented "Instruction CMP not yet implemented."
	342 Add X8, X22, W23
	343 Move X21, [X8+32]
	344 Compare X21, 0
	345 JumpIfEqual {506}
	346 Move W1, 1
	347 Move X0, X21
	348 Move X2, X31
	349 Call Behaviour.set_enabled, X0, X1
	350 Move S0, W31
	351 Move X0, X21
	352 Move X1, X31
	353 Call Light.set_intensity, X0, V0
	354 Move W8, [X22+24]
	355 Add W23, W23, 1
	356 NotImplemented "Instruction CMP not yet implemented."
	357 Move V8, [X19+44]
	358 Move [X19+60], S8
	359 NotImplemented "Instruction FCMP not yet implemented."
	360 Move X0, X31
	361 Call Time.get_deltaTime
	362 Subtract S0, S8, S0
	363 Move [X19+60], S0
	364 Compare X20, 0
	365 JumpIfEqual {506}
	366 Move X20, [X20+72]
	367 Compare X20, 0
	368 JumpIfEqual {506}
	369 Move W8, [X20+24]
	370 NotImplemented "Instruction CMP not yet implemented."
	371 Move V1, [X19+44]
	372 Move S2, 1
	373 Move S3, -1
	374 Move W21, W31
	375 NotImplemented "Instruction FDIV not yet implemented."
	376 Subtract S0, S2, S0
	377 Add S0, S0, S0
	378 Add S0, S0, S3
	379 Multiply S1, S0, S0
	380 Move V3, [X19+56]
	381 Multiply S1, S0, S1
	382 Multiply S0, S0, S1
	383 Subtract S0, S2, S0
	384 Multiply S8, S3, S0
	385 NotImplemented "Instruction CMP not yet implemented."
	386 Add X8, X20, W21
	387 Move X0, [X8+32]
	388 Compare X0, 0
	389 JumpIfEqual {506}
	390 Move V0, V8
	391 Move X1, X31
	392 Call Light.set_intensity, X0, V0
	393 Move W8, [X20+24]
	394 Add W21, W21, 1
	395 NotImplemented "Instruction CMP not yet implemented."
	396 Move W8, 2
	397 Move [X19+24], X31
	398 Compare X20, 0
	399 JumpIfEqual {506}
	400 Move X22, [X20+72]
	401 Compare X22, 0
	402 JumpIfEqual {506}
	403 Move W8, [X22+24]
	404 NotImplemented "Instruction CMP not yet implemented."
	405 Move W23, W31
	406 NotImplemented "Instruction CMP not yet implemented."
	407 Add X8, X22, W23
	408 Move X21, [X8+32]
	409 Compare X21, 0
	410 JumpIfEqual {506}
	411 Move X0, X21
	412 Move W1, W31
	413 Move X2, X31
	414 Call Behaviour.set_enabled, X0, X1
	415 Move V0, [X19+56]
	416 Move X0, X21
	417 Move X1, X31
	418 Call Light.set_intensity, X0, V0
	419 Move W8, [X22+24]
	420 Add W23, W23, 1
	421 NotImplemented "Instruction CMP not yet implemented."
	422 Move X0, [X20+56]
	423 Compare X0, 0
	424 JumpIfEqual {506}
	425 Move X1, X31
	426 Call Renderer.get_material, X0
	427 Move X22, 0x231C000
	428 Move X22, [X22+2632]
	429 Move X21, X0
	430 Move X8, [X22]
	431 Move W9, [X8+224]
	432 Compare W9, 0
	433 JumpIfNotEqual {436}
	434 Move X0, X8
	435 Call 0x1C17DFC
	436 Compare X21, 0
	437 JumpIfEqual {506}
	438 Move X8, [X22]
	439 Move S0, W31
	440 Move X0, X21
	441 Move X2, X31
	442 Move X8, [X8+184]
	443 Move W1, [X8]
	444 Call Material.SetFloat, X0, X1, V0
	445 Move X21, [X20+64]
	446 Compare X21, 0
	447 JumpIfEqual {506}
	448 Move W8, [X21+24]
	449 NotImplemented "Instruction CMP not yet implemented."
	450 Move W23, W31
	451 NotImplemented "Instruction CMP not yet implemented."
	452 Add X8, X21, W23
	453 Move X0, [X8+32]
	454 Compare X0, 0
	455 JumpIfEqual {506}
	456 Move X1, X31
	457 Call Renderer.get_material, X0
	458 Move X8, [X22]
	459 Move X20, X0
	460 Move W9, [X8+224]
	461 Compare W9, 0
	462 JumpIfNotEqual {465}
	463 Move X0, X8
	464 Call 0x1C17DFC
	465 Compare X20, 0
	466 JumpIfEqual {506}
	467 Move X8, [X22]
	468 Move S0, W31
	469 Move X0, X20
	470 Move X2, X31
	471 Move X8, [X8+184]
	472 Move W1, [X8]
	473 Call Material.SetFloat, X0, X1, V0
	474 Move W8, [X21+24]
	475 Add W23, W23, 1
	476 NotImplemented "Instruction CMP not yet implemented."
	477 Move X8, 0x231A000
	478 Move V8, [X19+48]
	479 Move X8, [X8+3120]
	480 Move X0, [X8]
	481 Call 0x1C17F10
	482 Move V0, V8
	483 Move X1, X31
	484 Move X20, X0
	485 Call WaitForSeconds..ctor, X0, V0
	486 Move [X19+24], X20
	487 Move W8, 3
	488 Move [X19+24], X31
	489 Move W8, 4
	490 Move [X19+16], W8
	491 Move W0, 1
	492 Move W0, 1
	493 Move [X19+24], X31
	494 Move [X19+16], W0
	495 Move X20, [X31+64]
	496 Move X19, [X31+72]
	497 Move X22, [X31+48]
	498 Move X21, [X31+56]
	499 Move X24, [X31+32]
	500 Move X23, [X31+40]
	501 Move X30, [X31+24]
	502 Move D9, [X31+8]
	503 Move D8, [X31+16]
	504 Move V10, [X31+80]
	505 Return X0
	506 Call 0x1C17F20
	507 Call 0x1C17F28

Method: System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()

Disassembly:
	0x01DDDF30 BL 0x35BB1E4
	0x01DDDF34 STR X0, [X19 + 0x18]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x01DDDF38 MOVZ W0, 0x1
	0x01DDDF3C STR W0, [X19 + 0x10]
	0x01DDDF40 LDP X20, X19, [X31 + 0x60]
	0x01DDDF44 LDP X22, X21, [X31 + 0x50]
	0x01DDDF48 LDP X24, X23, [X31 + 0x40]
	0x01DDDF4C LDP X30, X25, [X31 + 0x30]
	0x01DDDF50 LDR V8, [X31 + 0x20]
	0x01DDDF54 ADD X31, X31, 0x70
	0x01DDDF58 RET
	0x01DDDF5C BL 0x1C16F20
	0x01DDDF60 BL 0x1C16F28
	0x01DDDF64 BL 0x1C16F44
	0x01DDDF68 MOV X1, X31
	0x01DDDF6C BL 0x1C16DEC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x2317000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x231C000
	011 Move X0, [X0+2896]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x01DDDF70 LDR X0, [X0 + 0x18]
	0x01DDDF74 RET

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

