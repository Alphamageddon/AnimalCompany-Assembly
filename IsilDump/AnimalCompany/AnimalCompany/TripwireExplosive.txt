Type: AnimalCompany.TripwireExplosive

Method: System.Boolean get_isExploded()

Disassembly:
	0x01DA86B4 LDP X20, X19, [X31 + 0x20]
	0x01DA86B8 LDP X22, X21, [X31 + 0x10]
	0x01DA86BC LDR X30, [X31], #0x30
	0x01DA86C0 B 0x1DA81D8
	0x01DA86C4 STP X30, X23, [X31 - 0x30]!
	0x01DA86C8 STP X22, X21, [X31 + 0x10]
	0x01DA86CC STP X20, X19, [X31 + 0x20]
	0x01DA86D0 ADRP X20, 0x2630000
	0x01DA86D4 LDRB W8, [X20 + 0xAB0]
	0x01DA86D8 MOV X19, X0
	0x01DA86DC TBNZ X8, 0x0, 0x1DA8724
	0x01DA86E0 ADRP X0, 0x234D000
	0x01DA86E4 LDR X0, [X0 + 0x5B0]
	0x01DA86E8 BL 0x1C16CF4
	0x01DA86EC ADRP X0, 0x234C000
	0x01DA86F0 LDR X0, [X0 + 0xE70]
	0x01DA86F4 BL 0x1C16CF4
	0x01DA86F8 ADRP X0, 0x234D000
	0x01DA86FC LDR X0, [X0 + 0x5A8]
	0x01DA8700 BL 0x1C16CF4
	0x01DA8704 ADRP X0, 0x234F000
	0x01DA8708 LDR X0, [X0 + 0x590]
	0x01DA870C BL 0x1C16CF4
	0x01DA8710 ADRP X0, 0x234F000
	0x01DA8714 LDR X0, [X0 + 0x598]
	0x01DA8718 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x234C000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x2350000
	018 Move X0, [X0+1280]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x2350000
	025 Move X0, [X0+1288]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_isExploded(System.Boolean value)

Disassembly:
	0x01DA871C MOVZ W8, 0x1
	0x01DA8720 STRB W8, [X20 + 0xAB0]
	0x01DA8724 LDR X20, [X19 + 0xA8]
	0x01DA8728 MOV X0, X19
	0x01DA872C MOV X1, X31
	0x01DA8730 BL 0x3C32E90
	0x01DA8734 CBZ X0, 0x1DA884C
	0x01DA8738 ADRP X21, 0x234D000
	0x01DA873C LDR X21, [X21 + 0x5A8]
	0x01DA8740 MOV X1, X31
	0x01DA8744 BL 0x3C3F58C
	0x01DA8748 FMOV S3, 1
	0x01DA874C MOV X0, X20
	0x01DA8750 MOV X1, X31
	0x01DA8754 BL 0x1DD1B94
	0x01DA8758 LDR X0, [X21]
	0x01DA875C LDR W20, [X19 + 0xDC]
	0x01DA8760 LDR W8, [X0 + 0xE0]
	0x01DA8764 CBNZ W8, 0x1DA876C
	0x01DA8768 BL 0x1C16DFC
	0x01DA876C MOV W0, W20
	0x01DA8770 MOV X1, X31
	0x01DA8774 BL 0x31AD670
	0x01DA8778 FMOV S0, 1
	0x01DA877C FMOV S1, W31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x234C000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x2350000
	017 Move X0, [X0+1280]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x2350000
	024 Move X0, [X0+1296]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: AnimalCompany.TripwireExplosive/ArmedState get_armedState()

Disassembly:
	0x01DA8780 FMOV S2, 0.25
	0x01DA8784 MOV X0, X31
	0x01DA8788 BL 0x31B22EC
	0x01DA878C CBZ X0, 0x1DA884C
	0x01DA8790 ADRP X20, 0x234D000
	0x01DA8794 ADRP X21, 0x234F000
	0x01DA8798 LDR X20, [X20 + 0x5B0]
	0x01DA879C LDR X21, [X21 + 0x590]
	0x01DA87A0 MOVZ W1, 0x6
	0x01DA87A4 MOV X2, X31
	0x01DA87A8 BL 0x31C7FBC
	0x01DA87AC LDR X8, [X20]
	0x01DA87B0 MOV X20, X0
	0x01DA87B4 MOV X0, X8
	0x01DA87B8 BL 0x1C16F10
	0x01DA87BC LDR X2, [X21]
	0x01DA87C0 MOV X1, X19
	0x01DA87C4 MOV X3, X31
	0x01DA87C8 MOV X21, X0
	0x01DA87CC BL 0x2A6DA40
	0x01DA87D0 CBZ X20, 0x1DA884C
	0x01DA87D4 ADRP X22, 0x234C000
	0x01DA87D8 ADRP X23, 0x234F000
	0x01DA87DC LDR X22, [X22 + 0xE70]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+4]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x234C000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2350000
	016 Move X0, [X0+1304]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2350000
	023 Move X0, [X0+1312]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_armedState(AnimalCompany.TripwireExplosive/ArmedState value)

Disassembly:
	0x01DA87E0 LDR X23, [X23 + 0x598]
	0x01DA87E4 MOV X0, X20
	0x01DA87E8 MOV X1, X21
	0x01DA87EC MOV X2, X31
	0x01DA87F0 BL 0x31C8070
	0x01DA87F4 LDR X8, [X22]
	0x01DA87F8 MOV X20, X0
	0x01DA87FC MOV X0, X8
	0x01DA8800 BL 0x1C16F10
	0x01DA8804 LDR X2, [X23]
	0x01DA8808 MOV X1, X19
	0x01DA880C MOV X3, X31
	0x01DA8810 MOV X21, X0
	0x01DA8814 BL 0x3314368
	0x01DA8818 CBZ X20, 0x1DA884C
	0x01DA881C MOV X0, X20
	0x01DA8820 MOV X1, X21
	0x01DA8824 MOV X2, X31
	0x01DA8828 BL 0x31C7FD8
	0x01DA882C CBZ X0, 0x1DA884C
	0x01DA8830 MOV X1, X31
	0x01DA8834 BL 0x31BFBD4
	0x01DA8838 STR W0, [X19 + 0xDC]
	0x01DA883C LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+4], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x234C000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2350000
	016 Move X0, [X0+1304]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2350000
	023 Move X0, [X0+1320]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get_laserDistance()

Disassembly:
	0x01DA8840 LDP X22, X21, [X31 + 0x10]
	0x01DA8844 LDP X30, X23, [X31], #0x30
	0x01DA8848 RET
	0x01DA884C BL 0x1C16F20
	0x01DA8850 STR X30, [X31 - 0x30]!
	0x01DA8854 STP X22, X21, [X31 + 0x10]
	0x01DA8858 STP X20, X19, [X31 + 0x20]
	0x01DA885C ADRP X21, 0x2630000
	0x01DA8860 LDRB W8, [X21 + 0xAAC]
	0x01DA8864 MOV X20, X1
	0x01DA8868 MOV X19, X0
	0x01DA886C TBNZ X8, 0x0, 0x1DA889C
	0x01DA8870 ADRP X0, 0x234B000
	0x01DA8874 LDR X0, [X0 + 0x5D8]
	0x01DA8878 BL 0x1C16CF4
	0x01DA887C ADRP X0, 0x234B000
	0x01DA8880 LDR X0, [X0 + 0x598]
	0x01DA8884 BL 0x1C16CF4
	0x01DA8888 ADRP X0, 0x234E000
	0x01DA888C LDR X0, [X0 + 0x428]
	0x01DA8890 BL 0x1C16CF4
	0x01DA8894 MOVZ W8, 0x1
	0x01DA8898 STRB W8, [X21 + 0xAAC]
	0x01DA889C MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x234C000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2350000
	016 Move X0, [X0+1328]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2350000
	023 Move X0, [X0+1336]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_laserDistance(System.Single value)

Disassembly:
	0x01DA88A0 BL 0x1DA76B4
	0x01DA88A4 TBNZ X0, 0x0, 0x1DA8994
	0x01DA88A8 ADRP X21, 0x234B000
	0x01DA88AC LDR X21, [X21 + 0x5D8]
	0x01DA88B0 LDR X0, [X21]
	0x01DA88B4 LDR W8, [X0 + 0xE0]
	0x01DA88B8 CBNZ W8, 0x1DA88C4
	0x01DA88BC BL 0x1C16DFC
	0x01DA88C0 LDR X0, [X21]
	0x01DA88C4 CBZ X20, 0x1DA89D4
	0x01DA88C8 LDR X8, [X0 + 0xB8]
	0x01DA88CC MOV X0, X20
	0x01DA88D0 MOV X1, X31
	0x01DA88D4 LDR W21, [X8]
	0x01DA88D8 BL 0x3C32ECC
	0x01DA88DC CBZ X0, 0x1DA89D4
	0x01DA88E0 MOV X1, X31
	0x01DA88E4 BL 0x3C35734
	0x01DA88E8 MOV W1, W0
	0x01DA88EC MOV X0, X21
	0x01DA88F0 MOV X2, X31
	0x01DA88F4 BL 0x3B23FA4
	0x01DA88F8 TBNZ X0, 0x0, 0x1DA8994
	0x01DA88FC MOV X0, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+8], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x234C000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2350000
	016 Move X0, [X0+1328]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2350000
	023 Move X0, [X0+1344]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: Fusion.TickTimer get_startupTimer()

Disassembly:
	0x01DA8900 BL 0x3C3C6C4
	0x01DA8904 LDR V1, [X19 + 0xE0]
	0x01DA8908 FSUB S0, S0, S1
	0x01DA890C FMOV S1, 3
	0x01DA8910 FCMP S0, S1
	0x01DA8914 B.MI 0x1DA8994
	0x01DA8918 MOV X0, X20
	0x01DA891C MOV X1, X31
	0x01DA8920 BL 0x3C8F78C
	0x01DA8924 TBZ X0, 0x0, 0x1DA894C
	0x01DA8928 MOV X0, X20
	0x01DA892C MOV X1, X31
	0x01DA8930 BL 0x3C33374
	0x01DA8934 ADRP X8, 0x234E000
	0x01DA8938 LDR X8, [X8 + 0x428]
	0x01DA893C MOV X2, X31
	0x01DA8940 LDR X1, [X8]
	0x01DA8944 BL 0x3226EF8
	0x01DA8948 TBNZ X0, 0x0, 0x1DA8994
	0x01DA894C MOV X0, X20
	0x01DA8950 MOV X1, X31
	0x01DA8954 BL 0x3C8E82C
	0x01DA8958 LDR X8, [X19 + 0xB0]
	0x01DA895C CBZ X8, 0x1DA89D4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+12]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x234C000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2350000
	016 Move X0, [X0+1352]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2350000
	023 Move X0, [X0+1360]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_startupTimer(Fusion.TickTimer value)

Disassembly:
	0x01DA8960 ADRP X9, 0x234B000
	0x01DA8964 LDR X9, [X9 + 0x598]
	0x01DA8968 MOV X21, X0
	0x01DA896C LDR X22, [X8 + 0x168]
	0x01DA8970 LDR X0, [X9]
	0x01DA8974 LDR W9, [X0 + 0xE0]
	0x01DA8978 CBNZ W9, 0x1DA8980
	0x01DA897C BL 0x1C16DFC
	0x01DA8980 MOV X0, X21
	0x01DA8984 MOV X1, X22
	0x01DA8988 MOV X2, X31
	0x01DA898C BL 0x3C3883C
	0x01DA8990 TBZ X0, 0x0, 0x1DA89A4
	0x01DA8994 LDP X20, X19, [X31 + 0x20]
	0x01DA8998 LDP X22, X21, [X31 + 0x10]
	0x01DA899C LDR X30, [X31], #0x30
	0x01DA89A0 RET
	0x01DA89A4 LDR X0, [X19 + 0x90]
	0x01DA89A8 CBZ X0, 0x1DA89D4
	0x01DA89AC MOV X1, X31
	0x01DA89B0 BL 0x3C3F58C
	0x01DA89B4 MOV X0, X20
	0x01DA89B8 MOV X1, X31
	0x01DA89BC BL 0x3C8F80C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+12], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x234C000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2350000
	016 Move X0, [X0+1352]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2350000
	023 Move X0, [X0+1368]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void Awake()

Disassembly:
	0x01DA89C0 MOV X0, X19
	0x01DA89C4 LDP X20, X19, [X31 + 0x20]
	0x01DA89C8 LDP X22, X21, [X31 + 0x10]
	0x01DA89CC LDR X30, [X31], #0x30
	0x01DA89D0 B 0x1DA89D8
	0x01DA89D4 BL 0x1C16F20
	0x01DA89D8 SUB X31, X31, 0xC0
	0x01DA89DC STR D10, [X31 + 0x70]
	0x01DA89E0 STP D9, D8, [X31 + 0x80]
	0x01DA89E4 STP X30, X23, [X31 + 0x90]
	0x01DA89E8 STP X22, X21, [X31 + 0xA0]
	0x01DA89EC STP X20, X19, [X31 + 0xB0]
	0x01DA89F0 ADRP X20, 0x2630000
	0x01DA89F4 LDRB W8, [X20 + 0xAB1]
	0x01DA89F8 MOV V8.16B, V2.16B
	0x01DA89FC MOV V9.16B, V1.16B
	0x01DA8A00 MOV V10.16B, V0.16B
	0x01DA8A04 MOV X19, X0
	0x01DA8A08 TBNZ X8, 0x0, 0x1DA8A8C
	0x01DA8A0C ADRP X0, 0x234B000
	0x01DA8A10 LDR X0, [X0 + 0xB50]
	0x01DA8A14 BL 0x1C16CF4
	0x01DA8A18 ADRP X0, 0x234E000
	0x01DA8A1C LDR X0, [X0 + 0xA78]
	0x01DA8A20 BL 0x1C16CF4
	0x01DA8A24 ADRP X0, 0x234E000
	0x01DA8A28 LDR X0, [X0 + 0xB58]
	0x01DA8A2C BL 0x1C16CF4
	0x01DA8A30 ADRP X0, 0x234E000
	0x01DA8A34 LDR X0, [X0 + 0xB60]
	0x01DA8A38 BL 0x1C16CF4
	0x01DA8A3C ADRP X0, 0x234F000
	0x01DA8A40 LDR X0, [X0 + 0x160]
	0x01DA8A44 BL 0x1C16CF4
	0x01DA8A48 ADRP X0, 0x234F000
	0x01DA8A4C LDR X0, [X0 + 0x168]
	0x01DA8A50 BL 0x1C16CF4
	0x01DA8A54 ADRP X0, 0x234B000
	0x01DA8A58 LDR X0, [X0 + 0x5A0]
	0x01DA8A5C BL 0x1C16CF4
	0x01DA8A60 ADRP X0, 0x234F000
	0x01DA8A64 LDR X0, [X0 + 0x5A0]
	0x01DA8A68 BL 0x1C16CF4
	0x01DA8A6C ADRP X0, 0x234F000
	0x01DA8A70 LDR X0, [X0 + 0x468]
	0x01DA8A74 BL 0x1C16CF4
	0x01DA8A78 ADRP X0, 0x234F000
	0x01DA8A7C LDR X0, [X0 + 0x5A8]
	0x01DA8A80 BL 0x1C16CF4
	0x01DA8A84 MOVZ W8, 0x1
	0x01DA8A88 STRB W8, [X20 + 0xAB1]
	0x01DA8A8C LDRB W8, [X19 + 0x58]
	0x01DA8A90 CBZ W8, 0x1DA8C48
	0x01DA8A94 STRB W31, [X19 + 0x58]
	0x01DA8A98 MOV X0, X19
	0x01DA8A9C BL 0x1DA76B4
	0x01DA8AA0 TBNZ X0, 0x0, 0x1DA8C84
	0x01DA8AA4 MOV X0, X19
	0x01DA8AA8 BL 0x1DA7780
	0x01DA8AAC CMP W0, 0x2
	0x01DA8AB0 B.NE 0x1DA8C84
	0x01DA8AB4 MOVZ W1, 0x1
	0x01DA8AB8 MOV X0, X19
	0x01DA8ABC MOVZ W22, 0x1
	0x01DA8AC0 BL 0x1DA771C
	0x01DA8AC4 ADRP X8, 0x234E000
	0x01DA8AC8 LDR X20, [X19 + 0x38]
	0x01DA8ACC LDR X21, [X19 + 0x88]
	0x01DA8AD0 LDR X8, [X8 + 0xB58]
	0x01DA8AD4 ADD X0, X31, 0x60
	0x01DA8AD8 MOV V0.16B, V10.16B
	0x01DA8ADC MOV V1.16B, V9.16B
	0x01DA8AE0 LDR X1, [X8]
	0x01DA8AE4 MOV V2.16B, V8.16B
	0x01DA8AE8 STP X31, X31, [X31 + 0x60]
	0x01DA8AEC BL 0x243BFEC
	0x01DA8AF0 ADRP X23, 0x2630000
	0x01DA8AF4 LDRB W8, [X23 + 0x793]
	0x01DA8AF8 CBNZ W8, 0x1DA8B0C
	0x01DA8AFC ADRP X0, 0x234C000
	0x01DA8B00 LDR X0, [X0 + 0x5A8]
	0x01DA8B04 BL 0x1C16CF4
	0x01DA8B08 STRB W22, [X23 + 0x793]
	0x01DA8B0C ADRP X8, 0x234C000
	0x01DA8B10 LDR X8, [X8 + 0x5A8]
	0x01DA8B14 ADRP X9, 0x234E000
	0x01DA8B18 ADD X0, X31, 0x48
	0x01DA8B1C LDR X8, [X8]
	0x01DA8B20 LDR X8, [X8 + 0xB8]
	0x01DA8B24 LDR X9, [X9 + 0xB60]
	0x01DA8B28 LDP S0, S1, [X8]
	0x01DA8B2C LDP S2, S3, [X8 + 0x8]
	0x01DA8B30 LDR X1, [X9]
	0x01DA8B34 STP X31, X31, [X31 + 0x48]
	0x01DA8B38 STR W31, [X31 + 0x58]
	0x01DA8B3C BL 0x2437C9C
	0x01DA8B40 CBZ X20, 0x1DA8DAC
	0x01DA8B44 LDUR V0, [X31 + 0x48]
	0x01DA8B48 LDR W8, [X31 + 0x58]
	0x01DA8B4C LDP X2, X3, [X31 + 0x60]
	0x01DA8B50 ADD X4, X31, 0x30
	0x01DA8B54 MOV X0, X20
	0x01DA8B58 MOV X1, X21
	0x01DA8B5C MOV X5, X31
	0x01DA8B60 MOV X6, X31
	0x01DA8B64 MOV W7, W31
	0x01DA8B68 STR V0, [X31 + 0x3]
	0x01DA8B6C STR W8, [X31 + 0x40]
	0x01DA8B70 STR X31, [X31]
	0x01DA8B74 BL 0x1EAE6A8
	0x01DA8B78 ADRP X8, 0x234F000
	0x01DA8B7C LDR X8, [X8 + 0x160]
	0x01DA8B80 MOVZ W1, 0x1
	0x01DA8B84 LDR X0, [X8]
	0x01DA8B88 BL 0x1C16D6C
	0x01DA8B8C MOV X20, X0
	0x01DA8B90 MOV X0, X19
	0x01DA8B94 MOV X1, X31
	0x01DA8B98 BL 0x3C32E90
	0x01DA8B9C CBZ X0, 0x1DA8DAC
	0x01DA8BA0 MOV X1, X31
	0x01DA8BA4 BL 0x3C3F58C
	0x01DA8BA8 ADRP X8, 0x234B000
	0x01DA8BAC LDR X8, [X8 + 0x5A0]
	0x01DA8BB0 ADD X1, X31, 0x20
	0x01DA8BB4 STP S0, S1, [X31 + 0x20]
	0x01DA8BB8 STR S2, [X31 + 0x28]
	0x01DA8BBC LDR X0, [X8]
	0x01DA8BC0 BL 0x1C16E04
	0x01DA8BC4 ADRP X8, 0x234F000
	0x01DA8BC8 ADRP X9, 0x234F000
	0x01DA8BCC LDR X8, [X8 + 0x468]
	0x01DA8BD0 LDR X9, [X9 + 0x168]
	0x01DA8BD4 MOV X2, X0
	0x01DA8BD8 ADD X0, X31, 0x10
	0x01DA8BDC LDR X1, [X8]
	0x01DA8BE0 LDR X3, [X9]
	0x01DA8BE4 STP X31, X31, [X31 + 0x10]
	0x01DA8BE8 BL 0x27ABC80
	0x01DA8BEC CBZ X20, 0x1DA8DAC
	0x01DA8BF0 LDR W8, [X20 + 0x18]
	0x01DA8BF4 CBZ W8, 0x1DA8DB0
	0x01DA8BF8 LDR V0, [X31 + 0x1]
	0x01DA8BFC ADRP X8, 0x234B000
	0x01DA8C00 STR V0, [X20 + 0x2]
	0x01DA8C04 LDR X8, [X8 + 0xB50]
	0x01DA8C08 LDR X0, [X8]
	0x01DA8C0C LDR W8, [X0 + 0xE0]
	0x01DA8C10 CBNZ W8, 0x1DA8C18
	0x01DA8C14 BL 0x1C16DFC
	0x01DA8C18 ADRP X8, 0x234F000
	0x01DA8C1C LDR X8, [X8 + 0x5A0]
	0x01DA8C20 MOV X1, X20
	0x01DA8C24 MOV X2, X31
	0x01DA8C28 LDR X0, [X8]
	0x01DA8C2C BL 0x1DD3B5C
	0x01DA8C30 LDR X0, [X19 + 0x38]
	0x01DA8C34 CBZ X0, 0x1DA8DAC
	0x01DA8C38 LDR X1, [X19 + 0x40]
	0x01DA8C3C MOV X2, X31
	0x01DA8C40 BL 0x1EA3884
	0x01DA8C44 B 0x1DA8C84
	0x01DA8C48 ADRP X20, 0x234E000
	0x01DA8C4C LDR X20, [X20 + 0xA78]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x2631000
	008 Move X22, 0x234F000
	009 Move X20, 0x2350000
	010 Move W8, [X21+2728]
	011 Move X22, [X22+3000]
	012 Move X20, [X20+592]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {47}
	018 Move X0, 0x2350000
	019 Move X0, [X0+600]
	020 Call 0x1C17CF4
	021 Move X0, 0x234E000
	022 Move X0, [X0+1744]
	023 Call 0x1C17CF4
	024 Move X0, 0x234D000
	025 Move X0, [X0+3696]
	026 Call 0x1C17CF4
	027 Move X0, 0x2350000
	028 Move X0, [X0+1376]
	029 Call 0x1C17CF4
	030 Move X0, 0x234F000
	031 Move X0, [X0+3000]
	032 Call 0x1C17CF4
	033 Move X0, 0x2350000
	034 Move X0, [X0+592]
	035 Call 0x1C17CF4
	036 Move X0, 0x2350000
	037 Move X0, [X0+1384]
	038 Call 0x1C17CF4
	039 Move X0, 0x2350000
	040 Move X0, [X0+1392]
	041 Call 0x1C17CF4
	042 Move X0, 0x2350000
	043 Move X0, [X0+1400]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X21+2728], W8
	047 Move X1, [X22]
	048 Move X0, X19
	049 Call 0x21A4894, X0
	050 Move [X19+176], X0
	051 Move X1, [X20]
	052 Move X0, X19
	053 Call 0x21A4894, X0
	054 Move X8, [X19+144]
	055 Move [X19+184], X0
	056 Compare X8, 0
	057 JumpIfEqual {182}
	058 Move X9, 0x2350000
	059 Move X9, [X9+1376]
	060 Move X0, X8
	061 Move X1, [X9]
	062 Call 0x21A4AF8, X0
	063 Move X8, [X19+128]
	064 Move [X19+208], X0
	065 Compare X8, 0
	066 JumpIfEqual {182}
	067 Move X0, X8
	068 Move W1, W31
	069 Move X2, X31
	070 Call Behaviour.set_enabled, X0, X1
	071 Move X22, [X19+128]
	072 Compare X22, 0
	073 JumpIfEqual {182}
	074 Move X23, 0x234E000
	075 Move X23, [X23+1744]
	076 Move X21, 0x2350000
	077 Move X20, [X22+32]
	078 Move X0, [X23]
	079 Move X21, [X21+1392]
	080 Call 0x1C17F10
	081 Move X2, [X21]
	082 Move X1, X19
	083 Move X3, X31
	084 Move X21, X0
	085 Call Action`1<Object>..ctor, X0, X1, X2
	086 Move X0, X20
	087 Move X1, X21
	088 Move X2, X31
	089 Call Delegate.Combine, X0, X1
	090 Compare X0, 0
	091 JumpIfEqual {107}
	092 Move X21, [X23]
	093 Move X20, X0
	094 Move X1, X21
	095 Call 0x1C17E00
	096 Compare X0, 0
	097 JumpIfEqual {105}
	098 Move [X22+32], X0
	099 Move X21, [X23]
	100 Move X0, X20
	101 Move X1, X21
	102 Call 0x1C17E00
	103 Compare X0, 0
	104 JumpIfNotEqual {108}
	105 Move X0, X20
	106 Move X1, X21
	107 Move [X22+32], X31
	108 Move X22, [X19+176]
	109 Compare X22, 0
	110 JumpIfEqual {182}
	111 Move X23, 0x234D000
	112 Move X23, [X23+3696]
	113 Move X21, 0x2350000
	114 Move X20, [X22+464]
	115 Move X0, [X23]
	116 Move X21, [X21+1400]
	117 Call 0x1C17F10
	118 Move X2, [X21]
	119 Move X1, X19
	120 Move X3, X31
	121 Move X21, X0
	122 Call Action..ctor, X0, X1, X2
	123 Move X0, X20
	124 Move X1, X21
	125 Move X2, X31
	126 Call Delegate.Combine, X0, X1
	127 Compare X0, 0
	128 JumpIfEqual {136}
	129 Move X1, [X23]
	130 Move X8, [X0]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move [X22+464], X0
	133 Move X8, [X0]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Call 0x1C181E0
	136 Move [X22+464], X0
	137 Move X22, [X19+176]
	138 Compare X22, 0
	139 JumpIfEqual {182}
	140 Move X23, 0x2350000
	141 Move X23, [X23+600]
	142 Move X21, 0x2350000
	143 Move X20, [X22+528]
	144 Move X0, [X23]
	145 Move X21, [X21+1384]
	146 Call 0x1C17F10
	147 Move X2, [X21]
	148 Move X1, X19
	149 Move X3, X31
	150 Move X21, X0
	151 Call Action`1<Object>..ctor, X0, X1, X2
	152 Move X0, X20
	153 Move X1, X21
	154 Move X2, X31
	155 Call Delegate.Combine, X0, X1
	156 Compare X0, 0
	157 JumpIfEqual {174}
	158 Move X20, [X23]
	159 Move X19, X0
	160 Move X1, X20
	161 Call 0x1C17E00
	162 Compare X0, 0
	163 JumpIfEqual {171}
	164 Move [X22+528], X0
	165 Move X20, [X23]
	166 Move X0, X19
	167 Move X1, X20
	168 Call 0x1C17E00
	169 Compare X0, 0
	170 JumpIfNotEqual {175}
	171 Move X0, X19
	172 Move X1, X20
	173 Call 0x1C181E0
	174 Move [X22+528], X31
	175 Move X20, [X31+32]
	176 Move X19, [X31+40]
	177 Move X22, [X31+16]
	178 Move X21, [X31+24]
	179 Move X30, [X31+48]
	180 Move X23, [X31+56]
	181 Return 
	182 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x01DA8C50 LDR X0, [X20]
	0x01DA8C54 LDR W8, [X0 + 0xE0]
	0x01DA8C58 CBNZ W8, 0x1DA8C60
	0x01DA8C5C BL 0x1C16DFC
	0x01DA8C60 MOV X0, X19
	0x01DA8C64 MOV X1, X31
	0x01DA8C68 BL 0x1E77B08
	0x01DA8C6C LDR X0, [X19 + 0x38]
	0x01DA8C70 CBZ X0, 0x1DA8DAC
	0x01DA8C74 MOV X1, X31
	0x01DA8C78 BL 0x1E9E538
	0x01DA8C7C CMP W0, 0x4
	0x01DA8C80 B.NE 0x1DA8CA0
	0x01DA8C84 LDP X20, X19, [X31 + 0xB0]
	0x01DA8C88 LDP X22, X21, [X31 + 0xA0]
	0x01DA8C8C LDP X30, X23, [X31 + 0x90]
	0x01DA8C90 LDP D9, D8, [X31 + 0x80]
	0x01DA8C94 LDR V10, [X31 + 0x70]
	0x01DA8C98 ADD X31, X31, 0xC0
	0x01DA8C9C RET
	0x01DA8CA0 LDR X0, [X19 + 0x40]
	0x01DA8CA4 CBZ X0, 0x1DA8DAC
	0x01DA8CA8 MOV X1, X31
	0x01DA8CAC BL 0x1E94078
	0x01DA8CB0 ANDS W31, W0, 0x7
	0x01DA8CB4 B.EQ 0x1DA8D0C
	0x01DA8CB8 TBNZ X0, 0x0, 0x1DA8A98
	0x01DA8CBC LDR X8, [X19 + 0x38]
	0x01DA8CC0 CBZ X8, 0x1DA8DAC
	0x01DA8CC4 LDR X0, [X8 + 0x50]
	0x01DA8CC8 CBZ X0, 0x1DA8DAC
	0x01DA8CCC MOV X1, X31
	0x01DA8CD0 BL 0x1EC4D00
	0x01DA8CD4 TBZ X0, 0x0, 0x1DA8C84
	0x01DA8CD8 LDR X8, [X19 + 0x38]
	0x01DA8CDC CBZ X8, 0x1DA8DAC
	0x01DA8CE0 LDR X0, [X8 + 0x50]
	0x01DA8CE4 MOVZ W1, 0x14
	0x01DA8CE8 MOV X2, X31
	0x01DA8CEC BL 0x1ED9318
	0x01DA8CF0 LDR X8, [X19 + 0x40]
	0x01DA8CF4 CBZ X8, 0x1DA8DAC
	0x01DA8CF8 LDR X8, [X8 + 0x20]
	0x01DA8CFC MOV X20, X0
	0x01DA8D00 CBZ X8, 0x1DA8D54
	0x01DA8D04 LDR W0, [X8]
	0x01DA8D08 B 0x1DA8D58
	0x01DA8D0C LDR X0, [X20]
	0x01DA8D10 LDR X19, [X19 + 0x40]
	0x01DA8D14 LDR W8, [X0 + 0xE0]
	0x01DA8D18 CBNZ W8, 0x1DA8D20
	0x01DA8D1C BL 0x1C16DFC
	0x01DA8D20 ADRP X8, 0x234F000
	0x01DA8D24 LDR X8, [X8 + 0x5A8]
	0x01DA8D28 MOV X1, X19
	0x01DA8D2C LDP X20, X19, [X31 + 0xB0]
	0x01DA8D30 LDP X22, X21, [X31 + 0xA0]
	0x01DA8D34 LDR X0, [X8]
	0x01DA8D38 LDP X30, X23, [X31 + 0x90]
	0x01DA8D3C LDP D9, D8, [X31 + 0x80]
	0x01DA8D40 LDR V10, [X31 + 0x70]
	0x01DA8D44 MOVZ W2, 0x7
	0x01DA8D48 MOV X3, X31
	0x01DA8D4C ADD X31, X31, 0xC0
	0x01DA8D50 B 0x1E77B00
	0x01DA8D54 MOV X0, X31
	0x01DA8D58 LDR W1, [X19 + 0x68]
	0x01DA8D5C MOVZ W2, 0x1
	0x01DA8D60 MOV X3, X31
	0x01DA8D64 BL 0x1E9C23C
	0x01DA8D68 STUR X0, [X20 + 0x1C]
	0x01DA8D6C STP S10, S9, [X20 + 0x24]
	0x01DA8D70 STR S8, [X20 + 0x2C]
	0x01DA8D74 CBZ X20, 0x1DA8DAC
	0x01DA8D78 MOVZ W8, 0xA0
	0x01DA8D7C STR W8, [X20 + 0xC]
	0x01DA8D80 LDR X0, [X19 + 0x38]
	0x01DA8D84 CBZ X0, 0x1DA8DAC
	0x01DA8D88 MOV X1, X20
	0x01DA8D8C LDP X20, X19, [X31 + 0xB0]
	0x01DA8D90 LDP X22, X21, [X31 + 0xA0]
	0x01DA8D94 LDP X30, X23, [X31 + 0x90]
	0x01DA8D98 LDP D9, D8, [X31 + 0x80]
	0x01DA8D9C LDR V10, [X31 + 0x70]
	0x01DA8DA0 MOV X2, X31
	0x01DA8DA4 ADD X31, X31, 0xC0
	0x01DA8DA8 B 0x1EA1E24
	0x01DA8DAC BL 0x1C16F20
	0x01DA8DB0 BL 0x1C16F28
	0x01DA8DB4 SUB X31, X31, 0x90
	0x01DA8DB8 STR D14, [X31 + 0x30]
	0x01DA8DBC STP D13, D12, [X31 + 0x40]
	0x01DA8DC0 STP D11, D10, [X31 + 0x50]
	0x01DA8DC4 STP D9, D8, [X31 + 0x60]
	0x01DA8DC8 STP X30, X21, [X31 + 0x70]
	0x01DA8DCC STP X20, X19, [X31 + 0x80]
	0x01DA8DD0 ADRP X20, 0x2630000
	0x01DA8DD4 LDRB W8, [X20 + 0xAAD]
	0x01DA8DD8 MOV X19, X0
	0x01DA8DDC TBNZ X8, 0x0, 0x1DA8E00
	0x01DA8DE0 ADRP X0, 0x234B000
	0x01DA8DE4 LDR X0, [X0 + 0x5D8]
	0x01DA8DE8 BL 0x1C16CF4
	0x01DA8DEC ADRP X0, 0x234B000
	0x01DA8DF0 LDR X0, [X0 + 0x5F8]
	0x01DA8DF4 BL 0x1C16CF4
	0x01DA8DF8 MOVZ W8, 0x1
	0x01DA8DFC STRB W8, [X20 + 0xAAD]
	0x01DA8E00 MOVI V0.2D, 0x0
	0x01DA8E04 STUR V0, [X31 + 0x1C]
	0x01DA8E08 STP V0, V0, [X31]
	0x01DA8E0C LDR X0, [X19 + 0xB0]
	0x01DA8E10 CBZ X0, 0x1DA8F1C
	0x01DA8E14 MOV X1, X31
	0x01DA8E18 BL 0x1D89904
	0x01DA8E1C LDR X0, [X19 + 0x90]
	0x01DA8E20 CBZ X0, 0x1DA8F1C
	0x01DA8E24 MOV X1, X31
	0x01DA8E28 BL 0x3C3F58C
	0x01DA8E2C LDR X0, [X19 + 0x90]
	0x01DA8E30 CBZ X0, 0x1DA8F1C
	0x01DA8E34 ADRP X21, 0x234B000
	0x01DA8E38 ADRP X20, 0x234B000
	0x01DA8E3C LDR X21, [X21 + 0x5D8]
	0x01DA8E40 LDR X20, [X20 + 0x5F8]
	0x01DA8E44 MOV X1, X31
	0x01DA8E48 MOV V8.16B, V0.16B
	0x01DA8E4C MOV V9.16B, V1.16B
	0x01DA8E50 MOV V10.16B, V2.16B
	0x01DA8E54 BL 0x3C3FA04
	0x01DA8E58 LDR X0, [X21]
	0x01DA8E5C MOV V11.16B, V0.16B
	0x01DA8E60 MOV V12.16B, V1.16B
	0x01DA8E64 MOV V13.16B, V2.16B
	0x01DA8E68 LDR W8, [X0 + 0xE0]
	0x01DA8E6C CBNZ W8, 0x1DA8E78
	0x01DA8E70 BL 0x1C16DFC
	0x01DA8E74 LDR X0, [X21]
	0x01DA8E78 LDR X8, [X0 + 0xB8]
	0x01DA8E7C MOV X1, X31
	0x01DA8E80 LDR W0, [X8]
	0x01DA8E84 BL 0x3C35CB8
	0x01DA8E88 LDR X8, [X20]
	0x01DA8E8C MOV W20, W0
	0x01DA8E90 LDR W9, [X8 + 0xE0]
	0x01DA8E94 CBNZ W9, 0x1DA8EA0
	0x01DA8E98 MOV X0, X8
	0x01DA8E9C BL 0x1C16DFC
	0x01DA8EA0 MOVZ W8, 0x447A0000
	0x01DA8EA4 FMOV S14, W8
	0x01DA8EA8 ADD X0, X31, 0x0
	0x01DA8EAC MOV V0.16B, V8.16B
	0x01DA8EB0 MOV V1.16B, V9.16B
	0x01DA8EB4 MOV V2.16B, V10.16B
	0x01DA8EB8 MOV V3.16B, V11.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2631000
	008 Move X21, 0x234F000
	009 Move W8, [X20+2729]
	010 Move X21, [X21+2680]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {42}
	016 Move X0, 0x2350000
	017 Move X0, [X0+600]
	018 Call 0x1C17CF4
	019 Move X0, 0x234E000
	020 Move X0, [X0+1744]
	021 Call 0x1C17CF4
	022 Move X0, 0x234D000
	023 Move X0, [X0+3696]
	024 Call 0x1C17CF4
	025 Move X0, 0x234E000
	026 Move X0, [X0+1448]
	027 Call 0x1C17CF4
	028 Move X0, 0x234F000
	029 Move X0, [X0+2680]
	030 Call 0x1C17CF4
	031 Move X0, 0x2350000
	032 Move X0, [X0+1384]
	033 Call 0x1C17CF4
	034 Move X0, 0x2350000
	035 Move X0, [X0+1392]
	036 Call 0x1C17CF4
	037 Move X0, 0x2350000
	038 Move X0, [X0+1400]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+2729], W8
	042 Move X0, [X21]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Compare X19, 0
	048 JumpIfEqual {174}
	049 Move W8, [X19+48]
	050 Move X22, [X19+128]
	051 Or W8, W8, 8
	052 Move [X19+48], W8
	053 Compare X22, 0
	054 JumpIfEqual {174}
	055 Move X23, 0x234E000
	056 Move X23, [X23+1744]
	057 Move X21, 0x2350000
	058 Move X20, [X22+32]
	059 Move X0, [X23]
	060 Move X21, [X21+1392]
	061 Call 0x1C17F10
	062 Move X2, [X21]
	063 Move X1, X19
	064 Move X3, X31
	065 Move X21, X0
	066 Call Action`1<Object>..ctor, X0, X1, X2
	067 Move X0, X20
	068 Move X1, X21
	069 Move X2, X31
	070 Call Delegate.Remove, X0, X1
	071 Compare X0, 0
	072 JumpIfEqual {86}
	073 Move X21, [X23]
	074 Move X20, X0
	075 Move X1, X21
	076 Call 0x1C17E00
	077 Compare X0, 0
	078 JumpIfEqual {149}
	079 Move [X22+32], X0
	080 Move X21, [X23]
	081 Move X0, X20
	082 Move X1, X21
	083 Call 0x1C17E00
	084 Compare X0, 0
	085 JumpIfNotEqual {87}
	086 Move [X22+32], X31
	087 Move X22, [X19+176]
	088 Compare X22, 0
	089 JumpIfEqual {174}
	090 Move X23, 0x234D000
	091 Move X23, [X23+3696]
	092 Move X21, 0x2350000
	093 Move X20, [X22+464]
	094 Move X0, [X23]
	095 Move X21, [X21+1400]
	096 Call 0x1C17F10
	097 Move X2, [X21]
	098 Move X1, X19
	099 Move X3, X31
	100 Move X21, X0
	101 Call Action..ctor, X0, X1, X2
	102 Move X0, X20
	103 Move X1, X21
	104 Move X2, X31
	105 Call Delegate.Remove, X0, X1
	106 Compare X0, 0
	107 JumpIfEqual {114}
	108 Move X1, [X23]
	109 Move X8, [X0]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move [X22+464], X0
	112 Move X8, [X0]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move [X22+464], X0
	115 Move X22, [X19+176]
	116 Compare X22, 0
	117 JumpIfEqual {174}
	118 Move X23, 0x2350000
	119 Move X23, [X23+600]
	120 Move X21, 0x2350000
	121 Move X20, [X22+528]
	122 Move X0, [X23]
	123 Move X21, [X21+1384]
	124 Call 0x1C17F10
	125 Move X2, [X21]
	126 Move X1, X19
	127 Move X3, X31
	128 Move X21, X0
	129 Call Action`1<Object>..ctor, X0, X1, X2
	130 Move X0, X20
	131 Move X1, X21
	132 Move X2, X31
	133 Call Delegate.Remove, X0, X1
	134 Compare X0, 0
	135 JumpIfEqual {152}
	136 Move X21, [X23]
	137 Move X20, X0
	138 Move X1, X21
	139 Call 0x1C17E00
	140 Compare X0, 0
	141 JumpIfEqual {149}
	142 Move [X22+528], X0
	143 Move X21, [X23]
	144 Move X0, X20
	145 Move X1, X21
	146 Call 0x1C17E00
	147 Compare X0, 0
	148 JumpIfNotEqual {153}
	149 Move X0, X20
	150 Move X1, X21
	151 Call 0x1C181E0
	152 Move [X22+528], X31
	153 Move X8, 0x234E000
	154 Move X8, [X8+1448]
	155 Move W20, [X19+216]
	156 Move X0, [X8]
	157 Move W8, [X0+224]
	158 Compare W8, 0
	159 JumpIfNotEqual {161}
	160 Call 0x1C17DFC
	161 Move W0, W20
	162 Move X1, X31
	163 Call LeanTween.cancel, X0
	164 Move W0, [X19+220]
	165 Move X20, [X31+32]
	166 Move X19, [X31+40]
	167 Move X22, [X31+16]
	168 Move X21, [X31+24]
	169 Move X1, X31
	170 Move X30, [X31+48]
	171 Move X23, [X31+56]
	172 Call LeanTween.cancel, X0
	173 Return 
	174 Call 0x1C17F20

Method: System.Void OnCollisionEnter(UnityEngine.Collision collision)

Disassembly:
	0x01DA8EBC MOV V4.16B, V12.16B
	0x01DA8EC0 MOV V5.16B, V13.16B
	0x01DA8EC4 MOV V6.16B, V14.16B
	0x01DA8EC8 MOV W1, W20
	0x01DA8ECC MOV X2, X31
	0x01DA8ED0 BL 0x3C8B18C
	0x01DA8ED4 TBZ X0, 0x0, 0x1DA8EE8
	0x01DA8ED8 ADD X0, X31, 0x0
	0x01DA8EDC MOV X1, X31
	0x01DA8EE0 BL 0x3C8E684
	0x01DA8EE4 MOV V14.16B, V0.16B
	0x01DA8EE8 MOV X0, X19
	0x01DA8EEC MOV V0.16B, V14.16B
	0x01DA8EF0 BL 0x1DA78A0
	0x01DA8EF4 MOV X0, X19
	0x01DA8EF8 BL 0x1DA8268
	0x01DA8EFC LDP X20, X19, [X31 + 0x80]
	0x01DA8F00 LDP X30, X21, [X31 + 0x70]
	0x01DA8F04 LDP D9, D8, [X31 + 0x60]
	0x01DA8F08 LDP D11, D10, [X31 + 0x50]
	0x01DA8F0C LDP D13, D12, [X31 + 0x40]
	0x01DA8F10 LDR V14, [X31 + 0x30]
	0x01DA8F14 ADD X31, X31, 0x90
	0x01DA8F18 RET
	0x01DA8F1C BL 0x1C16F20
	0x01DA8F20 MOV X1, X31
	0x01DA8F24 B 0x1E74F04
	0x01DA8F28 STR D8, [X31 - 0x30]!
	0x01DA8F2C STP X30, X21, [X31 + 0x10]
	0x01DA8F30 STP X20, X19, [X31 + 0x20]
	0x01DA8F34 ADRP X21, 0x2630000
	0x01DA8F38 ADRP X20, 0x234B000
	0x01DA8F3C LDRB W8, [X21 + 0xAB2]
	0x01DA8F40 LDR X20, [X20 + 0x598]
	0x01DA8F44 MOV V8.16B, V0.16B
	0x01DA8F48 MOV X19, X0
	0x01DA8F4C TBNZ X8, 0x0, 0x1DA8F64
	0x01DA8F50 ADRP X0, 0x234B000
	0x01DA8F54 LDR X0, [X0 + 0x598]
	0x01DA8F58 BL 0x1C16CF4
	0x01DA8F5C MOVZ W8, 0x1
	0x01DA8F60 STRB W8, [X21 + 0xAB2]
	0x01DA8F64 LDR X0, [X20]
	0x01DA8F68 LDR X20, [X19 + 0x98]
	0x01DA8F6C LDR W8, [X0 + 0xE0]
	0x01DA8F70 CBNZ W8, 0x1DA8F78
	0x01DA8F74 BL 0x1C16DFC
	0x01DA8F78 MOV X0, X20
	0x01DA8F7C MOV X1, X31
	0x01DA8F80 MOV X2, X31
	0x01DA8F84 BL 0x3C3883C
	0x01DA8F88 TBZ X0, 0x0, 0x1DA8F9C
	0x01DA8F8C LDP X20, X19, [X31 + 0x20]
	0x01DA8F90 LDP X30, X21, [X31 + 0x10]
	0x01DA8F94 LDR V8, [X31], #0x30
	0x01DA8F98 RET
	0x01DA8F9C LDR X0, [X19 + 0x98]
	0x01DA8FA0 CBZ X0, 0x1DA8FC4

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X1, 0
	008 JumpIfEqual {76}
	009 Move X20, X1
	010 Move X19, X0
	011 Move X0, X1
	012 Move X1, X31
	013 Call Collision.get_gameObject, X0
	014 Compare X0, 0
	015 JumpIfEqual {76}
	016 Move X1, X31
	017 Call GameObject.get_layer, X0
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X0, [X19+64]
	020 Compare X0, 0
	021 JumpIfEqual {69}
	022 Move W8, [X0+96]
	023 Move TEMP, X8
	024 And TEMP, TEMP, 2
	025 Compare TEMP, 2
	026 JumpIfEqual {69}
	027 Move X1, X31
	028 Call NetworkObject.get_HasStateAuthority, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {69}
	033 Move X0, [X19+184]
	034 Compare X0, 0
	035 JumpIfEqual {76}
	036 Call StickyItem.get_isStuck, X0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {69}
	041 Move X0, X20
	042 Move X1, X31
	043 Call Collision.get_relativeVelocity, X0
	044 Move X8, [X19+176]
	045 Compare X8, 0
	046 JumpIfEqual {76}
	047 Move X0, [X8+176]
	048 Compare X0, 0
	049 JumpIfEqual {76}
	050 Move X1, X31
	051 Move V8, V0
	052 Move V9, V1
	053 Move V10, V2
	054 Call Transform.get_forward, X0
	055 Multiply S0, S8, S0
	056 Multiply S1, S9, S1
	057 Multiply S2, S10, S2
	058 Add S0, S0, S1
	059 Add S0, S2, S0
	060 Move S1, -10
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 Move X0, X19
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X30, [X31+24]
	066 Move D9, [X31+8]
	067 Move D8, [X31+16]
	068 Move V10, [X31+48]
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X30, [X31+24]
	072 Move D9, [X31+8]
	073 Move D8, [X31+16]
	074 Move V10, [X31+48]
	075 Return 
	076 Call 0x1C17F20

Method: System.Void Spawned()

Disassembly:
	0x01DA91A8 LDR W1, [X19 + 0xCC]
	0x01DA91AC MOV X0, X19
	0x01DA91B0 LDP X30, X19, [X31], #0x10
	0x01DA91B4 B 0x1DA7960
	0x01DA91B8 STP X30, X19, [X31 - 0x10]!
	0x01DA91BC MOV X19, X0
	0x01DA91C0 BL 0x1DA76B4
	0x01DA91C4 AND W8, W0, 0x1
	0x01DA91C8 MOV X0, X19
	0x01DA91CC STRB W8, [X19 + 0xC0]
	0x01DA91D0 BL 0x1DA7780
	0x01DA91D4 STR W0, [X19 + 0xC4]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call NetworkBehaviour.Spawned, X0
	006 Move X0, X31
	007 Call Time.get_time
	008 Move X0, X19
	009 Move [X19+224], S0
	010 Call TripwireExplosive.HandleArmedStateChanged, X0
	011 Move X0, X19
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call TripwireExplosive.HandleLaserDistanceChanged, X0
	015 Return 

Method: System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)

Disassembly:
	0x01DA9304 STR W9, [X8]
	0x01DA9308 LDP X30, X19, [X31], #0x10
	0x01DA930C RET
	0x01DA9310 ADRP X0, 0x234A000
	0x01DA9314 LDR X0, [X0 + 0x5B0]
	0x01DA9318 BL 0x1C16D08
	0x01DA931C BL 0x1C16F10
	0x01DA9320 MOV X19, X0
	0x01DA9324 ADRP X0, 0x234E000
	0x01DA9328 LDR X0, [X0 + 0x5B8]
	0x01DA932C BL 0x1C16D08
	0x01DA9330 MOV X1, X0
	0x01DA9334 MOV X0, X19
	0x01DA9338 MOV X2, X31
	0x01DA933C BL 0x337DF1C
	0x01DA9340 ADRP X0, 0x234E000
	0x01DA9344 LDR X0, [X0 + 0x5C8]
	0x01DA9348 BL 0x1C16D08
	0x01DA934C MOV X1, X0
	0x01DA9350 MOV X0, X19
	0x01DA9354 BL 0x1C16DEC
	0x01DA9358 SUB X31, X31, 0xB0
	0x01DA935C STP X30, X23, [X31 + 0x80]
	0x01DA9360 STP X22, X21, [X31 + 0x90]
	0x01DA9364 STP X20, X19, [X31 + 0xA0]
	0x01DA9368 ADRP X20, 0x262F000
	0x01DA936C ADRP X21, 0x234D000
	0x01DA9370 LDRB W8, [X20 + 0xAB7]
	0x01DA9374 LDR X21, [X21 + 0xBB8]
	0x01DA9378 MOV X19, X0
	0x01DA937C TBNZ X8, 0x0, 0x1DA93B8
	0x01DA9380 ADRP X0, 0x234B000
	0x01DA9384 LDR X0, [X0 + 0xE70]
	0x01DA9388 BL 0x1C16CF4
	0x01DA938C ADRP X0, 0x234D000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x2630000
	008 Move X22, 0x234D000
	009 Move W8, [X23+2730]
	010 Move X22, [X22+1448]
	011 Move W21, W2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x234D000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+2730], W8
	023 And W2, W21, 1
	024 Move X0, X19
	025 Move X1, X20
	026 Move X3, X31
	027 Call NetworkBehaviour.Despawned, X0, X1, X2
	028 Move X0, [X22]
	029 Move W20, [X19+216]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move W0, W20
	035 Move X1, X31
	036 Call LeanTween.cancel, X0
	037 Move W0, [X19+220]
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X1, X31
	043 Move X30, [X31+48]
	044 Move X23, [X31+56]
	045 Call LeanTween.cancel, X0
	046 Return 

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01DA9390 LDR X0, [X0 + 0xBB8]
	0x01DA9394 BL 0x1C16CF4
	0x01DA9398 ADRP X0, 0x234E000
	0x01DA939C LDR X0, [X0 + 0x5D0]
	0x01DA93A0 BL 0x1C16CF4
	0x01DA93A4 ADRP X0, 0x234E000
	0x01DA93A8 LDR X0, [X0 + 0x5D8]
	0x01DA93AC BL 0x1C16CF4
	0x01DA93B0 MOVZ W8, 0x1
	0x01DA93B4 STRB W8, [X20 + 0xAB7]
	0x01DA93B8 LDR X1, [X21]
	0x01DA93BC MOV X0, X19
	0x01DA93C0 BL 0x21A3894
	0x01DA93C4 STR X0, [X19 + 0xD0]
	0x01DA93C8 CBZ X0, 0x1DA953C
	0x01DA93CC ADRP X23, 0x234B000
	0x01DA93D0 LDR X23, [X23 + 0xE70]
	0x01DA93D4 MOV X20, X0
	0x01DA93D8 LDR X21, [X0 + 0x1D0]
	0x01DA93DC ADRP X22, 0x234E000
	0x01DA93E0 LDR X0, [X23]
	0x01DA93E4 LDR X22, [X22 + 0x5D8]
	0x01DA93E8 BL 0x1C16F10
	0x01DA93EC LDR X2, [X22]
	0x01DA93F0 MOV X1, X19

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call NetworkBehaviour.FixedUpdateNetwork, X0
	007 Move X0, X19
	008 Call TripwireExplosive.get_armedState, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X0, X19
	011 Call TripwireExplosive.get_startupTimer, X0
	012 Move [X31+8], W0
	013 Move X1, [X19+56]
	014 Add X0, X31, 8
	015 Move X2, X31
	016 Call TickTimer.ExpiredOrNotRunning, X0, X1
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {26}
	021 Move W1, 2
	022 Move X0, X19
	023 Call TripwireExplosive.set_armedState, X0, X1
	024 Move X0, X19
	025 Call TripwireExplosive.HandleArmedStateChanged, X0
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Add X31, X31, 32
	029 Return 

Method: System.Void HandleUse()

Disassembly:
	0x01DA93F4 MOV X3, X31
	0x01DA93F8 MOV X22, X0
	0x01DA93FC BL 0x3314368
	0x01DA9400 MOV X0, X21
	0x01DA9404 MOV X1, X22
	0x01DA9408 MOV X2, X31
	0x01DA940C BL 0x33C0DE4
	0x01DA9410 LDR X1, [X23]
	0x01DA9414 CBZ X0, 0x1DA9438
	0x01DA9418 LDR X8, [X0]
	0x01DA941C CMP X8, X1
	0x01DA9420 B.NE 0x1DA94A0
	0x01DA9424 STR X0, [X20 + 0x1D0]
	0x01DA9428 LDR X8, [X0]
	0x01DA942C CMP X8, X1
	0x01DA9430 B.EQ 0x1DA943C
	0x01DA9434 B 0x1DA94A0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+64]
	005 Compare X0, 0
	006 JumpIfEqual {24}
	007 Move W8, [X0+96]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 2
	010 Compare TEMP, 2
	011 JumpIfEqual {24}
	012 Move X1, X31
	013 Call NetworkObject.get_HasStateAuthority, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {24}
	018 Move X0, X19
	019 Call TripwireExplosive.CheckAndStick, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {27}
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Return 
	027 Move X0, X19
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]

Method: System.Void HandleStuckAnchorChanged(UnityEngine.Transform stuckAnchor)

Disassembly:
	0x01DA95E8 BL 0x1C16F10
	0x01DA95EC LDR X2, [X21]
	0x01DA95F0 MOV X1, X19
	0x01DA95F4 MOV X3, X31
	0x01DA95F8 MOV X21, X0
	0x01DA95FC BL 0x3314368
	0x01DA9600 MOV X0, X20
	0x01DA9604 MOV X1, X21
	0x01DA9608 MOV X2, X31
	0x01DA960C BL 0x33C0FDC
	0x01DA9610 LDR X1, [X22]
	0x01DA9614 CBZ X0, 0x1DA9638
	0x01DA9618 LDR X8, [X0]
	0x01DA961C CMP X8, X1
	0x01DA9620 B.NE 0x1DA96A0
	0x01DA9624 STR X0, [X23 + 0x1D0]
	0x01DA9628 LDR X8, [X0]
	0x01DA962C CMP X8, X1
	0x01DA9630 B.EQ 0x1DA963C
	0x01DA9634 B 0x1DA96A0
	0x01DA9638 STR X0, [X23 + 0x1D0]
	0x01DA963C LDR X23, [X19 + 0xD0]
	0x01DA9640 CBZ X23, 0x1DA96DC
	0x01DA9644 ADRP X21, 0x234E000
	0x01DA9648 LDR X20, [X23 + 0x1C0]
	0x01DA964C LDR X21, [X21 + 0x5D0]
	0x01DA9650 MOV X0, X1
	0x01DA9654 BL 0x1C16F10
	0x01DA9658 LDR X2, [X21]
	0x01DA965C MOV X1, X19
	0x01DA9660 MOV X3, X31
	0x01DA9664 MOV X21, X0
	0x01DA9668 BL 0x3314368
	0x01DA966C MOV X0, X20
	0x01DA9670 MOV X1, X21
	0x01DA9674 MOV X2, X31
	0x01DA9678 BL 0x33C0FDC
	0x01DA967C CBZ X0, 0x1DA96A4
	0x01DA9680 LDR X1, [X22]
	0x01DA9684 LDR X8, [X0]
	0x01DA9688 CMP X8, X1
	0x01DA968C B.NE 0x1DA96A0
	0x01DA9690 STR X0, [X23 + 0x1C0]
	0x01DA9694 LDR X8, [X0]
	0x01DA9698 CMP X8, X1
	0x01DA969C B.EQ 0x1DA96A8
	0x01DA96A0 BL 0x1C171E0
	0x01DA96A4 STR X0, [X23 + 0x1C0]
	0x01DA96A8 ADRP X8, 0x234C000
	0x01DA96AC LDR X8, [X8 + 0x5A8]
	0x01DA96B0 LDR W19, [X19 + 0xD8]
	0x01DA96B4 LDR X0, [X8]
	0x01DA96B8 LDR W8, [X0 + 0xE0]
	0x01DA96BC CBNZ W8, 0x1DA96C4
	0x01DA96C0 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2630000
	007 Move X22, 0x234B000
	008 Move W8, [X21+2731]
	009 Move X22, [X22+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x234B000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2731], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Move X2, X31
	029 Call Object.op_Inequality, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {52}
	034 Move X0, [X19+64]
	035 Compare X0, 0
	036 JumpIfEqual {52}
	037 Move W8, [X0+96]
	038 Move TEMP, X8
	039 And TEMP, TEMP, 2
	040 Compare TEMP, 2
	041 JumpIfEqual {52}
	042 Move X1, X31
	043 Call NetworkObject.get_HasStateAuthority, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {52}
	048 Move X0, X19
	049 Call TripwireExplosive.get_armedState, X0
	050 Compare W0, 0
	051 JumpIfEqual {58}
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+48]
	057 Return 
	058 Move X0, [X19+56]
	059 Move S0, 3
	060 Move X1, X31
	061 Call TickTimer.CreateFromSeconds, X0, V0
	062 And X1, X0, 0
	063 Move X0, X19
	064 Call TripwireExplosive.set_startupTimer, X0, X1
	065 Move W1, 1
	066 Move X0, X19
	067 Call TripwireExplosive.set_armedState, X0, X1
	068 Move X0, X19
	069 Call TripwireExplosive.AnimateLaserStarting, X0
	070 Move X0, X19
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X22, [X31+16]
	074 Move X21, [X31+24]
	075 Move X30, [X31+48]
	076 Call TripwireExplosive.HandleArmedStateChanged, X0
	077 Return 

Method: System.Void HandleTripwireTriggerEnter(UnityEngine.Collider collider)

Disassembly:
	0x01DA9850 STP X20, X19, [X31 + 0x10]
	0x01DA9854 LDR X20, [X0 + 0x98]
	0x01DA9858 MOV X19, X0
	0x01DA985C BL 0x1DA928C
	0x01DA9860 CBZ X20, 0x1DA98A8
	0x01DA9864 AND W1, W0, 0x1
	0x01DA9868 MOV X0, X20
	0x01DA986C MOV X2, X31
	0x01DA9870 BL 0x3C8F748
	0x01DA9874 LDR X20, [X19 + 0xA0]
	0x01DA9878 MOV X0, X19
	0x01DA987C BL 0x1DA928C
	0x01DA9880 CBZ X20, 0x1DA98A8
	0x01DA9884 ORN W8, W31, W0, 0x0
	0x01DA9888 AND W1, W8, 0x1
	0x01DA988C MOV X0, X20
	0x01DA9890 MOV X2, X31
	0x01DA9894 BL 0x3C8F748
	0x01DA9898 MOV X0, X19
	0x01DA989C LDP X20, X19, [X31 + 0x10]
	0x01DA98A0 LDR X30, [X31], #0x20
	0x01DA98A4 B 0x1DA98AC
	0x01DA98A8 BL 0x1C16F20
	0x01DA98AC STR D10, [X31 - 0x50]!
	0x01DA98B0 STP D9, D8, [X31 + 0x8]
	0x01DA98B4 STR X30, [X31 + 0x18]
	0x01DA98B8 STP X24, X23, [X31 + 0x20]
	0x01DA98BC STP X22, X21, [X31 + 0x30]
	0x01DA98C0 STP X20, X19, [X31 + 0x40]
	0x01DA98C4 ADRP X20, 0x262F000
	0x01DA98C8 ADRP X21, 0x234E000
	0x01DA98CC LDRB W8, [X20 + 0xABB]
	0x01DA98D0 LDR X21, [X21 + 0x5E0]
	0x01DA98D4 MOV X19, X0
	0x01DA98D8 TBNZ X8, 0x0, 0x1DA992C
	0x01DA98DC ADRP X0, 0x234C000
	0x01DA98E0 LDR X0, [X0 + 0x5B0]
	0x01DA98E4 BL 0x1C16CF4
	0x01DA98E8 ADRP X0, 0x234B000
	0x01DA98EC LDR X0, [X0 + 0xE70]
	0x01DA98F0 BL 0x1C16CF4
	0x01DA98F4 ADRP X0, 0x234C000
	0x01DA98F8 LDR X0, [X0 + 0x5A8]
	0x01DA98FC BL 0x1C16CF4
	0x01DA9900 ADRP X0, 0x234E000
	0x01DA9904 LDR X0, [X0 + 0x5E8]
	0x01DA9908 BL 0x1C16CF4
	0x01DA990C ADRP X0, 0x234E000
	0x01DA9910 LDR X0, [X0 + 0x5F0]
	0x01DA9914 BL 0x1C16CF4
	0x01DA9918 ADRP X0, 0x234E000
	0x01DA991C LDR X0, [X0 + 0x5E0]
	0x01DA9920 BL 0x1C16CF4
	0x01DA9924 MOVZ W8, 0x1
	0x01DA9928 STRB W8, [X20 + 0xABB]
	0x01DA992C LDR X0, [X21]
	0x01DA9930 BL 0x1C16F10
	0x01DA9934 MOV X1, X31
	0x01DA9938 MOV X20, X0
	0x01DA993C BL 0x1DAA208
	0x01DA9940 CBZ X20, 0x1DA9AE0
	0x01DA9944 ADRP X22, 0x234C000
	0x01DA9948 LDR X22, [X22 + 0x5A8]
	0x01DA994C STR X19, [X20 + 0x10]
	0x01DA9950 LDR W21, [X19 + 0xD8]
	0x01DA9954 LDR X0, [X22]
	0x01DA9958 LDR W8, [X0 + 0xE0]
	0x01DA995C CBNZ W8, 0x1DA9964
	0x01DA9960 BL 0x1C16DFC
	0x01DA9964 MOV W0, W21
	0x01DA9968 MOV X1, X31
	0x01DA996C BL 0x31AD670
	0x01DA9970 LDR V8, [X19 + 0xDC]
	0x01DA9974 MOV X0, X19
	0x01DA9978 BL 0x1DA928C
	0x01DA997C ANDS W31, W0, 0x1
	0x01DA9980 FMOV S0, W31
	0x01DA9984 FMOV S1, 1
	0x01DA9988 FCSEL S0, S1, S0, NE
	0x01DA998C MOV X0, X19
	0x01DA9990 STR S0, [X20 + 0x18]
	0x01DA9994 BL 0x1DA928C
	0x01DA9998 LDR X8, [X19 + 0x90]
	0x01DA999C CBZ X8, 0x1DA9AE0
	0x01DA99A0 ANDS W31, W0, 0x1
	0x01DA99A4 MOVZ W9, 0xB0
	0x01DA99A8 MOVZ W10, 0xA8
	0x01DA99AC CSEL X9, X10, X9, NE
	0x01DA99B0 LDR X21, [X19, X9, LSL]
	0x01DA99B4 MOV X0, X8
	0x01DA99B8 MOV X1, X31
	0x01DA99BC BL 0x3C3F58C
	0x01DA99C0 FMOV S3, 1
	0x01DA99C4 MOV X0, X21
	0x01DA99C8 MOV X1, X31
	0x01DA99CC BL 0x1DD1B94
	0x01DA99D0 MOV X0, X19
	0x01DA99D4 BL 0x1DA928C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2630000
	007 Move W8, [X21+2732]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x234B000
	015 Move X0, [X0+1496]
	016 Call 0x1C17CF4
	017 Move X0, 0x234B000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x234E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2732], W8
	025 Move X0, X19
	026 Call TripwireExplosive.get_isExploded, X0
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {106}
	031 Move X21, 0x234B000
	032 Move X21, [X21+1496]
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X21]
	039 Compare X20, 0
	040 JumpIfEqual {126}
	041 Move X8, [X0+184]
	042 Move X0, X20
	043 Move X1, X31
	044 Move W21, [X8]
	045 Call Component.get_gameObject, X0
	046 Compare X0, 0
	047 JumpIfEqual {126}
	048 Move X1, X31
	049 Call GameObject.get_layer, X0
	050 Move W1, W0
	051 Move X0, X21
	052 Move X2, X31
	053 Call LayerMaskExtensions.Contains, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfEqual {106}
	058 Move X0, X31
	059 Call Time.get_time
	060 Move V1, [X19+224]
	061 Subtract S0, S0, S1
	062 Move S1, 3
	063 NotImplemented "Instruction FCMP not yet implemented."
	064 Move X0, X20
	065 Move X1, X31
	066 Call Collider.get_isTrigger, X0
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {83}
	071 Move X0, X20
	072 Move X1, X31
	073 Call Component.get_tag, X0
	074 Move X8, 0x234E000
	075 Move X8, [X8+1064]
	076 Move X2, X31
	077 Move X1, [X8]
	078 Call String.op_Inequality, X0, X1
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfEqual {106}
	083 Move X0, X20
	084 Move X1, X31
	085 Call Collider.get_attachedRigidbody, X0
	086 Move X8, [X19+176]
	087 Compare X8, 0
	088 JumpIfEqual {126}
	089 Move X9, 0x234B000
	090 Move X9, [X9+1432]
	091 Move X21, X0
	092 Move X22, [X8+360]
	093 Move X0, [X9]
	094 Move W9, [X0+224]
	095 Compare W9, 0
	096 JumpIfNotEqual {98}
	097 Call 0x1C17DFC
	098 Move X0, X21
	099 Move X1, X22
	100 Move X2, X31
	101 Call Object.op_Equality, X0, X1
	102 Move TEMP, X0
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfNotEqual {112}
	106 Move X20, [X31+32]
	107 Move X19, [X31+40]
	108 Move X22, [X31+16]
	109 Move X21, [X31+24]
	110 Move X30, [X31+48]
	111 Return 
	112 Move X0, [X19+144]
	113 Compare X0, 0
	114 JumpIfEqual {126}
	115 Move X1, X31
	116 Call Transform.get_position, X0
	117 Move X0, X20
	118 Move X1, X31
	119 Call Collider.ClosestPoint, X0, X1
	120 Move X0, X19
	121 Move X20, [X31+32]
	122 Move X19, [X31+40]
	123 Move X22, [X31+16]
	124 Move X21, [X31+24]
	125 Move X30, [X31+48]
	126 Call 0x1C17F20

Method: System.Void HandleArmedStateChanged()

Disassembly:
	0x01DA91D8 MOV X0, X19
	0x01DA91DC BL 0x1DA7840
	0x01DA91E0 MOV X0, X19
	0x01DA91E4 STR S0, [X19 + 0xC8]
	0x01DA91E8 BL 0x1DA7900
	0x01DA91EC STR W0, [X19 + 0xCC]
	0x01DA91F0 LDP X30, X19, [X31], #0x10
	0x01DA91F4 RET
	0x01DA91F8 STP X30, X21, [X31 - 0x20]!
	0x01DA91FC STP X20, X19, [X31 + 0x10]
	0x01DA9200 ADRP X21, 0x262F000
	0x01DA9204 LDRB W8, [X21 + 0xAB6]
	0x01DA9208 MOV X20, X1
	0x01DA920C MOV X19, X0
	0x01DA9210 TBNZ X8, 0x0, 0x1DA9228
	0x01DA9214 ADRP X0, 0x234E000
	0x01DA9218 LDR X0, [X0 + 0x5B0]
	0x01DA921C BL 0x1C16CF4
	0x01DA9220 MOVZ W8, 0x1
	0x01DA9224 STRB W8, [X21 + 0xAB6]
	0x01DA9228 CBZ X19, 0x1DA9288
	0x01DA922C ADRP X9, 0x234E000
	0x01DA9230 LDR X9, [X9 + 0x5B0]
	0x01DA9234 MOVZ W8, 0x1
	0x01DA9238 LDP S0, S1, [X20 + 0x24]
	0x01DA923C LDR V2, [X20 + 0x2C]
	0x01DA9240 STRB W8, [X19 + 0x58]
	0x01DA9244 LDR X8, [X19]
	0x01DA9248 LDR X1, [X9]
	0x01DA924C LDRB W10, [X8 + 0x130]
	0x01DA9250 LDRB W9, [X1 + 0x130]
	0x01DA9254 CMP W10, W9
	0x01DA9258 B.CC 0x1DA9280
	0x01DA925C LDR X8, [X8 + 0xC8]
	0x01DA9260 ADD X8, X8, X9, 0x3, LSL
	0x01DA9264 LDUR X8, [X8 - 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+64]
	006 Compare X0, 0
	007 JumpIfEqual {25}
	008 Move W8, [X0+96]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 2
	011 Compare TEMP, 2
	012 JumpIfEqual {25}
	013 Move X1, X31
	014 Call NetworkObject.get_HasStateAuthority, X0
	015 Move W20, W0
	016 Move X0, X19
	017 Call TripwireExplosive.get_armedState, X0
	018 Move TEMP, X20
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {27}
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X0, X19
	024 Call TripwireExplosive.CheckAndUpdateLaser, X0
	025 Move X0, X19
	026 Call TripwireExplosive.get_armedState, X0
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, X19
	029 Call TripwireExplosive.AnimateLaserStarting, X0
	030 Move X20, [X19+128]
	031 Move X0, X19
	032 Call TripwireExplosive.get_armedState, X0
	033 Compare X20, 0
	034 JumpIfEqual {44}
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X0, X20
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 NotImplemented "Instruction CSET not yet implemented."
	040 Move X2, X31
	041 Move X30, [X31+32]
	042 Call Behaviour.set_enabled, X0, X1
	043 Return 
	044 Call 0x1C17F20

Method: System.Void HandleLaserDistanceChanged()

Disassembly:
	0x01DA9268 CMP X8, X1
	0x01DA926C B.NE 0x1DA9280
	0x01DA9270 MOV X0, X19
	0x01DA9274 LDP X20, X19, [X31 + 0x10]
	0x01DA9278 LDP X30, X21, [X31], #0x20
	0x01DA927C B 0x1DA89D8
	0x01DA9280 MOV X0, X19
	0x01DA9284 BL 0x1C171E0
	0x01DA9288 BL 0x1C16F20
	0x01DA928C STP X30, X19, [X31 - 0x10]!
	0x01DA9290 LDR X8, [X0 + 0x50]
	0x01DA9294 CBZ X8, 0x1DA92AC
	0x01DA9298 LDR W8, [X8]
	0x01DA929C CMP W8, 0x0
	0x01DA92A0 CSET W0, NE
	0x01DA92A4 LDP X30, X19, [X31], #0x10
	0x01DA92A8 RET
	0x01DA92AC ADRP X0, 0x234A000
	0x01DA92B0 LDR X0, [X0 + 0x5B0]
	0x01DA92B4 BL 0x1C16D08
	0x01DA92B8 BL 0x1C16F10
	0x01DA92BC MOV X19, X0
	0x01DA92C0 ADRP X0, 0x234E000
	0x01DA92C4 LDR X0, [X0 + 0x5B8]
	0x01DA92C8 BL 0x1C16D08
	0x01DA92CC MOV X1, X0
	0x01DA92D0 MOV X0, X19
	0x01DA92D4 MOV X2, X31
	0x01DA92D8 BL 0x337DF1C
	0x01DA92DC ADRP X0, 0x234E000
	0x01DA92E0 LDR X0, [X0 + 0x5C0]
	0x01DA92E4 BL 0x1C16D08
	0x01DA92E8 MOV X1, X0
	0x01DA92EC MOV X0, X19
	0x01DA92F0 BL 0x1C16DEC
	0x01DA92F4 STP X30, X19, [X31 - 0x10]!
	0x01DA92F8 LDR X8, [X0 + 0x50]
	0x01DA92FC CBZ X8, 0x1DA9310
	0x01DA9300 AND W9, W1, 0x1

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move X0, [X0+144]
	008 Compare X0, 0
	009 JumpIfEqual {50}
	010 Move X1, X31
	011 Call Component.get_transform, X0
	012 Move X8, [X19+144]
	013 Compare X8, 0
	014 JumpIfEqual {50}
	015 Move X20, X0
	016 Move X0, X8
	017 Move X1, X31
	018 Call Component.get_transform, X0
	019 Compare X0, 0
	020 JumpIfEqual {50}
	021 Move X1, X31
	022 Call Transform.get_localScale, X0
	023 Move X0, [X19+144]
	024 Compare X0, 0
	025 JumpIfEqual {50}
	026 Move X1, X31
	027 Move V8, V0
	028 Call Component.get_transform, X0
	029 Compare X0, 0
	030 JumpIfEqual {50}
	031 Move X1, X31
	032 Call Transform.get_localScale, X0
	033 Move X0, X19
	034 Move V9, V1
	035 Call TripwireExplosive.get_laserDistance, X0
	036 Compare X20, 0
	037 JumpIfEqual {50}
	038 Move X0, X20
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+16]
	042 Move V2, V0
	043 Move V0, V8
	044 Move V1, V9
	045 Move X1, X31
	046 Move D9, [X31+48]
	047 Move D8, [X31+56]
	048 Call Transform.set_localScale, X0, X1
	049 Return 
	050 Call 0x1C17F20

Method: System.Void CheckAndUpdateLaser()

Disassembly:
	0x01DA9DB4 ADRP X0, 0x234C000
	0x01DA9DB8 LDR X0, [X0 + 0x7C8]
	0x01DA9DBC BL 0x1C16CF4
	0x01DA9DC0 MOVZ W8, 0x1
	0x01DA9DC4 STRB W8, [X20 + 0xABA]
	0x01DA9DC8 STR W31, [X31 + 0x18]
	0x01DA9DCC STR X31, [X31 + 0x10]
	0x01DA9DD0 STR W31, [X31 + 0x8]
	0x01DA9DD4 STR X31, [X31]
	0x01DA9DD8 LDR X0, [X19 + 0xD0]
	0x01DA9DDC CBZ X0, 0x1DAA168
	0x01DA9DE0 MOV X1, X31
	0x01DA9DE4 BL 0x1D8EEF0
	0x01DA9DE8 TBZ X0, 0x0, 0x1DAA150
	0x01DA9DEC MOV X0, X19
	0x01DA9DF0 BL 0x1DA928C
	0x01DA9DF4 TBZ X0, 0x0, 0x1DAA150
	0x01DA9DF8 LDR X0, [X19 + 0xD0]
	0x01DA9DFC CBZ X0, 0x1DAA168
	0x01DA9E00 MOV X1, X31
	0x01DA9E04 BL 0x1D89D0C
	0x01DA9E08 TBZ X0, 0x0, 0x1DAA150
	0x01DA9E0C LDR X20, [X19 + 0xD0]
	0x01DA9E10 CBZ X20, 0x1DAA168
	0x01DA9E14 ADRP X22, 0x234A000
	0x01DA9E18 LDR X22, [X22 + 0x598]
	0x01DA9E1C LDR X21, [X20 + 0x150]
	0x01DA9E20 LDR X0, [X22]
	0x01DA9E24 LDR W8, [X0 + 0xE0]
	0x01DA9E28 CBNZ W8, 0x1DA9E30
	0x01DA9E2C BL 0x1C16DFC
	0x01DA9E30 MOV X0, X21
	0x01DA9E34 MOV X1, X31
	0x01DA9E38 MOV X2, X31
	0x01DA9E3C BL 0x3C354F8
	0x01DA9E40 TBZ X0, 0x0, 0x1DAA0DC
	0x01DA9E44 LDR X8, [X19 + 0xD0]
	0x01DA9E48 CBZ X8, 0x1DAA168
	0x01DA9E4C LDR X8, [X8 + 0x150]
	0x01DA9E50 CBZ X8, 0x1DAA168
	0x01DA9E54 LDR W9, [X8 + 0x80]
	0x01DA9E58 CMP W9, 0x3
	0x01DA9E5C B.NE 0x1DA9EE0
	0x01DA9E60 LDR X0, [X22]
	0x01DA9E64 LDR X21, [X8 + 0xC8]
	0x01DA9E68 LDR W9, [X0 + 0xE0]
	0x01DA9E6C CBNZ W9, 0x1DA9E74
	0x01DA9E70 BL 0x1C16DFC
	0x01DA9E74 MOV X0, X21
	0x01DA9E78 MOV X1, X31
	0x01DA9E7C MOV X2, X31
	0x01DA9E80 BL 0x3C354F8
	0x01DA9E84 TBZ X0, 0x0, 0x1DAA0DC
	0x01DA9E88 LDR X8, [X19 + 0xD0]
	0x01DA9E8C CBZ X8, 0x1DAA168
	0x01DA9E90 LDR X8, [X8 + 0x150]
	0x01DA9E94 CBZ X8, 0x1DAA168
	0x01DA9E98 LDR X8, [X8 + 0xC8]
	0x01DA9E9C CBZ X8, 0x1DAA168
	0x01DA9EA0 LDR X0, [X22]
	0x01DA9EA4 LDR X21, [X8 + 0x150]
	0x01DA9EA8 LDR W9, [X0 + 0xE0]
	0x01DA9EAC CBNZ W9, 0x1DA9EB4
	0x01DA9EB0 BL 0x1C16DFC
	0x01DA9EB4 MOV X0, X21
	0x01DA9EB8 MOV X1, X31
	0x01DA9EBC MOV X2, X31
	0x01DA9EC0 BL 0x3C354F8
	0x01DA9EC4 TBZ X0, 0x0, 0x1DAA0DC
	0x01DA9EC8 LDR X8, [X19 + 0xD0]
	0x01DA9ECC CBZ X8, 0x1DAA168
	0x01DA9ED0 LDR X8, [X8 + 0x150]
	0x01DA9ED4 CBZ X8, 0x1DAA168
	0x01DA9ED8 LDR X20, [X8 + 0xC8]
	0x01DA9EDC CBZ X20, 0x1DAA168
	0x01DA9EE0 LDR X8, [X20 + 0x150]
	0x01DA9EE4 CBZ X8, 0x1DAA168
	0x01DA9EE8 LDR X0, [X8 + 0x40]
	0x01DA9EEC CBZ X0, 0x1DAA150
	0x01DA9EF0 LDRB W8, [X0 + 0x60]
	0x01DA9EF4 TBNZ X8, 0x1, 0x1DAA150
	0x01DA9EF8 MOV X1, X31
	0x01DA9EFC BL 0x1E93668
	0x01DA9F00 TBZ X0, 0x0, 0x1DAA150
	0x01DA9F04 ADRP X23, 0x234C000
	0x01DA9F08 LDR X23, [X23 + 0x7C8]
	0x01DA9F0C LDR X0, [X23]
	0x01DA9F10 LDR W8, [X0 + 0xE0]
	0x01DA9F14 CBNZ W8, 0x1DA9F1C
	0x01DA9F18 BL 0x1C16DFC
	0x01DA9F1C ADRP X24, 0x262F000

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], D14
	003 Move [X31+64], D13
	004 Move [X31+72], D12
	005 Move [X31+80], D11
	006 Move [X31+88], D10
	007 Move [X31+96], D9
	008 Move [X31+104], D8
	009 Move [X31+112], X30
	010 Move [X31+120], X21
	011 Move [X31+128], X20
	012 Move [X31+136], X19
	013 Move X20, 0x2630000
	014 Move W8, [X20+2733]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x234B000
	021 Move X0, [X0+1496]
	022 Call 0x1C17CF4
	023 Move X0, 0x234B000
	024 Move X0, [X0+1528]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+2733], W8
	028 NotImplemented "Instruction MOVI not yet implemented."
	029 Move [X31+28], V0
	030 Move [X31], V0
	031 Move [X31+8], V0
	032 Move X0, [X19+176]
	033 Compare X0, 0
	034 JumpIfEqual {113}
	035 Move X1, X31
	036 Call GrabbableItem.UpdateViewTransform, X0
	037 Move X0, [X19+144]
	038 Compare X0, 0
	039 JumpIfEqual {113}
	040 Move X1, X31
	041 Call Transform.get_position, X0
	042 Move X0, [X19+144]
	043 Compare X0, 0
	044 JumpIfEqual {113}
	045 Move X21, 0x234B000
	046 Move X20, 0x234B000
	047 Move X21, [X21+1496]
	048 Move X20, [X20+1528]
	049 Move X1, X31
	050 Move V8, V0
	051 Move V9, V1
	052 Move V10, V2
	053 Call Transform.get_forward, X0
	054 Move X0, [X21]
	055 Move V11, V0
	056 Move V12, V1
	057 Move V13, V2
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {63}
	061 Call 0x1C17DFC
	062 Move X0, [X21]
	063 Move X8, [X0+184]
	064 Move X1, X31
	065 Move W0, [X8]
	066 Call LayerMask.op_Implicit, X0
	067 Move X8, [X20]
	068 Move W20, W0
	069 Move W9, [X8+224]
	070 Compare W9, 0
	071 JumpIfNotEqual {74}
	072 Move X0, X8
	073 Call 0x1C17DFC
	074 Move W8, 0x447A0000
	075 Move S14, W8
	076 Add X0, X31, 0
	077 Move V0, V8
	078 Move V1, V9
	079 Move V2, V10
	080 Move V3, V11
	081 Move V4, V12
	082 Move V5, V13
	083 Move V6, V14
	084 Move W1, W20
	085 Move X2, X31
	086 Call Physics.Raycast, X0, X1, X2, V0, X3
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {95}
	091 Add X0, X31, 0
	092 Move X1, X31
	093 Call RaycastHit.get_distance, X0
	094 Move V14, V0
	095 Move X0, X19
	096 Move V0, V14
	097 Call TripwireExplosive.set_laserDistance, X0, V0
	098 Move X0, X19
	099 Call TripwireExplosive.HandleLaserDistanceChanged, X0
	100 Move X20, [X31+128]
	101 Move X19, [X31+136]
	102 Move X30, [X31+112]
	103 Move X21, [X31+120]
	104 Move D9, [X31+96]
	105 Move D8, [X31+104]
	106 Move D11, [X31+80]
	107 Move D10, [X31+88]
	108 Move D13, [X31+64]
	109 Move D12, [X31+72]
	110 Move V14, [X31+48]
	111 Add X31, X31, 144
	112 Return 
	113 Call 0x1C17F20

Method: System.Boolean CheckAndStick()

Disassembly:
	0x01DA8FA4 LDP X20, X19, [X31 + 0x20]
	0x01DA8FA8 LDP X30, X21, [X31 + 0x10]
	0x01DA8FAC FMOV S0, W31
	0x01DA8FB0 FMOV S1, W31
	0x01DA8FB4 MOV V2.16B, V8.16B
	0x01DA8FB8 MOV X1, X31
	0x01DA8FBC LDR V8, [X31], #0x30
	0x01DA8FC0 B 0x3C3EC04
	0x01DA8FC4 BL 0x1C16F20
	0x01DA8FC8 STP X30, X21, [X31 - 0x20]!
	0x01DA8FCC STP X20, X19, [X31 + 0x10]
	0x01DA8FD0 ADRP X21, 0x2630000
	0x01DA8FD4 ADRP X20, 0x234B000
	0x01DA8FD8 LDRB W8, [X21 + 0xAB3]
	0x01DA8FDC LDR X20, [X20 + 0x598]
	0x01DA8FE0 MOV X19, X0
	0x01DA8FE4 TBNZ X8, 0x0, 0x1DA8FFC
	0x01DA8FE8 ADRP X0, 0x234B000
	0x01DA8FEC LDR X0, [X0 + 0x598]
	0x01DA8FF0 BL 0x1C16CF4
	0x01DA8FF4 MOVZ W8, 0x1
	0x01DA8FF8 STRB W8, [X21 + 0xAB3]
	0x01DA8FFC LDR X0, [X20]
	0x01DA9000 LDR X20, [X19 + 0x98]
	0x01DA9004 LDR W8, [X0 + 0xE0]
	0x01DA9008 CBNZ W8, 0x1DA9010
	0x01DA900C BL 0x1C16DFC
	0x01DA9010 MOV X0, X20
	0x01DA9014 MOV X1, X31
	0x01DA9018 MOV X2, X31
	0x01DA901C BL 0x3C3883C
	0x01DA9020 TBZ X0, 0x0, 0x1DA9030
	0x01DA9024 LDP X20, X19, [X31 + 0x10]
	0x01DA9028 LDP X30, X21, [X31], #0x20
	0x01DA902C RET
	0x01DA9030 LDR X0, [X19 + 0x98]
	0x01DA9034 CBZ X0, 0x1DA9054
	0x01DA9038 LDP X20, X19, [X31 + 0x10]
	0x01DA903C FMOV S0, W31
	0x01DA9040 FMOV S1, W31
	0x01DA9044 FMOV S2, 0.25
	0x01DA9048 MOV X1, X31
	0x01DA904C LDP X30, X21, [X31], #0x20
	0x01DA9050 B 0x3C3EC04
	0x01DA9054 BL 0x1C16F20
	0x01DA9058 STR D8, [X31 - 0x30]!
	0x01DA905C STP X30, X21, [X31 + 0x10]
	0x01DA9060 STP X20, X19, [X31 + 0x20]
	0x01DA9064 ADRP X21, 0x262F000
	0x01DA9068 ADRP X20, 0x234A000
	0x01DA906C LDRB W8, [X21 + 0xAB4]
	0x01DA9070 LDR X20, [X20 + 0x598]
	0x01DA9074 MOV V8.16B, V0.16B
	0x01DA9078 MOV X19, X0
	0x01DA907C TBNZ X8, 0x0, 0x1DA9094
	0x01DA9080 ADRP X0, 0x234A000
	0x01DA9084 LDR X0, [X0 + 0x598]
	0x01DA9088 BL 0x1C16CF4
	0x01DA908C MOVZ W8, 0x1
	0x01DA9090 STRB W8, [X21 + 0xAB4]
	0x01DA9094 LDR X0, [X20]
	0x01DA9098 LDR X20, [X19 + 0x90]
	0x01DA909C LDR W8, [X0 + 0xE0]
	0x01DA90A0 CBNZ W8, 0x1DA90A8
	0x01DA90A4 BL 0x1C16DFC
	0x01DA90A8 MOV X0, X20
	0x01DA90AC MOV X1, X31
	0x01DA90B0 MOV X2, X31
	0x01DA90B4 BL 0x3C3883C
	0x01DA90B8 TBZ X0, 0x0, 0x1DA90CC
	0x01DA90BC LDP X20, X19, [X31 + 0x20]
	0x01DA90C0 LDP X30, X21, [X31 + 0x10]
	0x01DA90C4 LDR V8, [X31], #0x30
	0x01DA90C8 RET
	0x01DA90CC LDR X0, [X19 + 0xD0]
	0x01DA90D0 CBZ X0, 0x1DA90F4
	0x01DA90D4 LDP X20, X19, [X31 + 0x20]
	0x01DA90D8 LDP X30, X21, [X31 + 0x10]
	0x01DA90DC FMOV S0, 0.5
	0x01DA90E0 FCMP S8, S0
	0x01DA90E4 CSET W1, GT
	0x01DA90E8 MOV X2, X31
	0x01DA90EC LDR V8, [X31], #0x30
	0x01DA90F0 B 0x3C13034
	0x01DA90F4 BL 0x1C16F20
	0x01DA90F8 STP X30, X21, [X31 - 0x20]!
	0x01DA90FC STP X20, X19, [X31 + 0x10]
	0x01DA9100 ADRP X21, 0x262F000
	0x01DA9104 ADRP X20, 0x234A000
	0x01DA9108 LDRB W8, [X21 + 0xAB5]
	0x01DA910C LDR X20, [X20 + 0x598]
	0x01DA9110 MOV X19, X0
	0x01DA9114 TBNZ X8, 0x0, 0x1DA912C
	0x01DA9118 ADRP X0, 0x234A000
	0x01DA911C LDR X0, [X0 + 0x598]
	0x01DA9120 BL 0x1C16CF4
	0x01DA9124 MOVZ W8, 0x1
	0x01DA9128 STRB W8, [X21 + 0xAB5]
	0x01DA912C LDR X0, [X20]
	0x01DA9130 LDR X20, [X19 + 0x90]
	0x01DA9134 LDR W8, [X0 + 0xE0]
	0x01DA9138 CBNZ W8, 0x1DA9140
	0x01DA913C BL 0x1C16DFC
	0x01DA9140 MOV X0, X20
	0x01DA9144 MOV X1, X31
	0x01DA9148 MOV X2, X31
	0x01DA914C BL 0x3C3883C
	0x01DA9150 TBZ X0, 0x0, 0x1DA9160
	0x01DA9154 LDP X20, X19, [X31 + 0x10]
	0x01DA9158 LDP X30, X21, [X31], #0x20
	0x01DA915C RET
	0x01DA9160 LDR X0, [X19 + 0xD0]
	0x01DA9164 CBZ X0, 0x1DA917C
	0x01DA9168 LDP X20, X19, [X31 + 0x10]
	0x01DA916C MOVZ W1, 0x1
	0x01DA9170 MOV X2, X31
	0x01DA9174 LDP X30, X21, [X31], #0x20
	0x01DA9178 B 0x3C13034
	0x01DA917C BL 0x1C16F20
	0x01DA9180 STP X30, X19, [X31 - 0x10]!
	0x01DA9184 LDRB W1, [X0 + 0xC0]
	0x01DA9188 MOV X19, X0
	0x01DA918C BL 0x1DA771C
	0x01DA9190 LDR W1, [X19 + 0xC4]
	0x01DA9194 MOV X0, X19
	0x01DA9198 BL 0x1DA77E0
	0x01DA919C LDR V0, [X19 + 0xC8]
	0x01DA91A0 MOV X0, X19
	0x01DA91A4 BL 0x1DA78A0

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], D13
	003 Move [X31+56], D12
	004 Move [X31+64], D11
	005 Move [X31+72], D10
	006 Move [X31+80], D9
	007 Move [X31+88], D8
	008 Move [X31+96], X30
	009 Move [X31+112], X20
	010 Move [X31+120], X19
	011 Move X20, 0x2631000
	012 Move W8, [X20+2734]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x234C000
	019 Move X0, [X0+1496]
	020 Call 0x1C17CF4
	021 Move X0, 0x234C000
	022 Move X0, [X0+1528]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2734], W8
	026 NotImplemented "Instruction MOVI not yet implemented."
	027 Move X0, X19
	028 Move [X31+28], V0
	029 Move [X31], V0
	030 Move [X31+8], V0
	031 Call TripwireExplosive.get_armedState, X0
	032 Compare W0, 0
	033 JumpIfNotEqual {139}
	034 Move X8, [X19+176]
	035 Compare X8, 0
	036 JumpIfEqual {152}
	037 Move X0, [X8+176]
	038 Compare X0, 0
	039 JumpIfEqual {152}
	040 Move X1, X31
	041 Call Transform.get_position, X0
	042 Move X8, [X19+176]
	043 Compare X8, 0
	044 JumpIfEqual {152}
	045 Move X0, [X8+176]
	046 Compare X0, 0
	047 JumpIfEqual {152}
	048 Move X1, X31
	049 Move V8, V0
	050 Move V9, V1
	051 Move V10, V2
	052 Call Transform.get_forward, X0
	053 Move X20, 0x234B000
	054 Move X20, [X20+1496]
	055 Move V11, V0
	056 Move V12, V1
	057 Move V13, V2
	058 Move X0, [X20]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {64}
	062 Call 0x1C17DFC
	063 Move X0, [X20]
	064 Move X8, [X0+184]
	065 Move X1, X31
	066 Move W0, [X8]
	067 Call LayerMask.op_Implicit, X0
	068 Move X8, 0x234B000
	069 Move X8, [X8+1528]
	070 Move W20, W0
	071 Move X8, [X8]
	072 Move W9, [X8+224]
	073 Compare W9, 0
	074 JumpIfNotEqual {77}
	075 Move X0, X8
	076 Call 0x1C17DFC
	077 Move X8, -19652608
	078 Move V6, [X8+860]
	079 Add X0, X31, 0
	080 Move V0, V8
	081 Move V1, V9
	082 Move V2, V10
	083 Move V3, V11
	084 Move V4, V12
	085 Move V5, V13
	086 Move W1, W20
	087 Move X2, X31
	088 Call Physics.Raycast, X0, X1, X2, V0, X3
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {139}
	093 Add X0, X31, 0
	094 Move X1, X31
	095 Call RaycastHit.get_point, X0
	096 Add X0, X31, 0
	097 Move X1, X31
	098 Call RaycastHit.get_normal, X0
	099 Move X0, X19
	100 Move X1, X31
	101 Move V8, V0
	102 Move V9, V1
	103 Move V10, V2
	104 Call Component.get_transform, X0
	105 Compare X0, 0
	106 JumpIfEqual {152}
	107 Move X1, X31
	108 NotImplemented "Instruction FNEG not yet implemented."
	109 NotImplemented "Instruction FNEG not yet implemented."
	110 NotImplemented "Instruction FNEG not yet implemented."
	111 Call Transform.get_up, X0
	112 Move V3, V0
	113 Move V4, V1
	114 Move V5, V2
	115 Move V0, V8
	116 Move V1, V9
	117 Move V2, V10
	118 Move X0, X31
	119 Call Quaternion.LookRotation, X0, X1
	120 Move X19, [X19+184]
	121 Add X0, X31, 0
	122 Move X1, X31
	123 Move V8, V0
	124 Move V9, V1
	125 Move V10, V2
	126 Move V11, V3
	127 Call RaycastHit.get_point, X0
	128 Compare X19, 0
	129 JumpIfEqual {152}
	130 Move W2, 1
	131 Move X0, X19
	132 Move V3, V8
	133 Move V4, V9
	134 Move V5, V10
	135 Move V6, V11
	136 Move X1, X31
	137 Move W20, 1
	138 Call StickyItem.Stick, X0, X1, X2, X3, X4
	139 Move W20, W31
	140 Move W0, W20
	141 Move X20, [X31+112]
	142 Move X19, [X31+120]
	143 Move X30, [X31+96]
	144 Move D9, [X31+80]
	145 Move D8, [X31+88]
	146 Move D11, [X31+64]
	147 Move D10, [X31+72]
	148 Move D13, [X31+48]
	149 Move D12, [X31+56]
	150 Add X31, X31, 128
	151 Return X0
	152 Call 0x1C17F20

Method: System.Void AnimateSpike()

Disassembly:
	0x01DA9438 STR X0, [X20 + 0x1D0]
	0x01DA943C LDR X22, [X19 + 0xD0]
	0x01DA9440 CBZ X22, 0x1DA953C
	0x01DA9444 ADRP X21, 0x234E000
	0x01DA9448 LDR X20, [X22 + 0x1C0]
	0x01DA944C LDR X21, [X21 + 0x5D0]
	0x01DA9450 MOV X0, X1
	0x01DA9454 BL 0x1C16F10
	0x01DA9458 LDR X2, [X21]
	0x01DA945C MOV X1, X19
	0x01DA9460 MOV X3, X31
	0x01DA9464 MOV X21, X0
	0x01DA9468 BL 0x3314368
	0x01DA946C MOV X0, X20
	0x01DA9470 MOV X1, X21
	0x01DA9474 MOV X2, X31
	0x01DA9478 BL 0x33C0DE4
	0x01DA947C CBZ X0, 0x1DA94A4
	0x01DA9480 LDR X1, [X23]
	0x01DA9484 LDR X8, [X0]
	0x01DA9488 CMP X8, X1
	0x01DA948C B.NE 0x1DA94A0
	0x01DA9490 STR X0, [X22 + 0x1C0]
	0x01DA9494 LDR X8, [X0]
	0x01DA9498 CMP X8, X1
	0x01DA949C B.EQ 0x1DA94A8
	0x01DA94A0 BL 0x1C171E0
	0x01DA94A4 STR X0, [X22 + 0x1C0]
	0x01DA94A8 LDR X0, [X19 + 0x80]
	0x01DA94AC CBZ X0, 0x1DA953C
	0x01DA94B0 MOV X1, X31
	0x01DA94B4 BL 0x3C1341C
	0x01DA94B8 ADRP X21, 0x262F000
	0x01DA94BC LDRB W8, [X21 + 0xAC0]
	0x01DA94C0 LDR W19, [X19 + 0x104]
	0x01DA94C4 MOV X20, X0
	0x01DA94C8 CBNZ W8, 0x1DA94E0
	0x01DA94CC ADRP X0, 0x234E000
	0x01DA94D0 LDR X0, [X0 + 0x270]
	0x01DA94D4 BL 0x1C16CF4
	0x01DA94D8 MOVZ W8, 0x1
	0x01DA94DC STRB W8, [X21 + 0xAC0]
	0x01DA94E0 ADRP X8, 0x234E000
	0x01DA94E4 LDR X8, [X8 + 0x270]
	0x01DA94E8 LDR X8, [X8]
	0x01DA94EC LDR X8, [X8 + 0xB8]
	0x01DA94F0 LDP V1, V0, [X8 + 0x60]
	0x01DA94F4 LDP V2, V3, [X8 + 0x40]
	0x01DA94F8 STP V1, V0, [X31 + 0x60]
	0x01DA94FC STP V2, V3, [X31 + 0x40]
	0x01DA9500 CBZ X20, 0x1DA953C
	0x01DA9504 LDP V0, V1, [X31 + 0x40]
	0x01DA9508 LDP V2, V3, [X31 + 0x60]
	0x01DA950C ADD X2, X31, 0x0
	0x01DA9510 MOV X0, X20
	0x01DA9514 MOV W1, W19
	0x01DA9518 MOV X3, X31
	0x01DA951C STP V0, V1, [X31]
	0x01DA9520 STP V2, V3, [X31 + 0x20]
	0x01DA9524 BL 0x3C15D84
	0x01DA9528 LDP X20, X19, [X31 + 0xA0]
	0x01DA952C LDP X22, X21, [X31 + 0x90]
	0x01DA9530 LDP X30, X23, [X31 + 0x80]
	0x01DA9534 ADD X31, X31, 0xB0
	0x01DA9538 RET
	0x01DA953C BL 0x1C16F20
	0x01DA9540 STP X30, X23, [X31 - 0x30]!
	0x01DA9544 STP X22, X21, [X31 + 0x10]
	0x01DA9548 STP X20, X19, [X31 + 0x20]
	0x01DA954C ADRP X20, 0x262F000
	0x01DA9550 ADRP X21, 0x234D000
	0x01DA9554 LDRB W8, [X20 + 0xAB8]
	0x01DA9558 LDR X21, [X21 + 0xA78]
	0x01DA955C MOV X19, X0
	0x01DA9560 TBNZ X8, 0x0, 0x1DA95A8
	0x01DA9564 ADRP X0, 0x234B000
	0x01DA9568 LDR X0, [X0 + 0xE70]
	0x01DA956C BL 0x1C16CF4
	0x01DA9570 ADRP X0, 0x234C000
	0x01DA9574 LDR X0, [X0 + 0x5A8]
	0x01DA9578 BL 0x1C16CF4
	0x01DA957C ADRP X0, 0x234D000
	0x01DA9580 LDR X0, [X0 + 0xA78]
	0x01DA9584 BL 0x1C16CF4
	0x01DA9588 ADRP X0, 0x234E000
	0x01DA958C LDR X0, [X0 + 0x5D0]
	0x01DA9590 BL 0x1C16CF4
	0x01DA9594 ADRP X0, 0x234E000
	0x01DA9598 LDR X0, [X0 + 0x5D8]
	0x01DA959C BL 0x1C16CF4
	0x01DA95A0 MOVZ W8, 0x1
	0x01DA95A4 STRB W8, [X20 + 0xAB8]
	0x01DA95A8 LDR X0, [X21]
	0x01DA95AC LDR W8, [X0 + 0xE0]
	0x01DA95B0 CBNZ W8, 0x1DA95B8
	0x01DA95B4 BL 0x1C16DFC
	0x01DA95B8 CBZ X19, 0x1DA96DC
	0x01DA95BC LDR W8, [X19 + 0x30]
	0x01DA95C0 LDR X23, [X19 + 0xD0]
	0x01DA95C4 ORR W8, W8, 0x8
	0x01DA95C8 STR W8, [X19 + 0x30]
	0x01DA95CC CBZ X23, 0x1DA96DC
	0x01DA95D0 ADRP X22, 0x234B000
	0x01DA95D4 LDR X22, [X22 + 0xE70]
	0x01DA95D8 ADRP X21, 0x234E000
	0x01DA95DC LDR X20, [X23 + 0x1D0]
	0x01DA95E0 LDR X0, [X22]
	0x01DA95E4 LDR X21, [X21 + 0x5D8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2630000
	008 Move W8, [X20+2735]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x234D000
	015 Move X0, [X0+1456]
	016 Call 0x1C17CF4
	017 Move X0, 0x234C000
	018 Move X0, [X0+3696]
	019 Call 0x1C17CF4
	020 Move X0, 0x234D000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move X0, 0x234F000
	024 Move X0, [X0+1408]
	025 Call 0x1C17CF4
	026 Move X0, 0x234F000
	027 Move X0, [X0+1416]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+2735], W8
	031 Move X20, [X19+160]
	032 Move X0, X19
	033 Move X1, X31
	034 Call Component.get_transform, X0
	035 Compare X0, 0
	036 JumpIfEqual {125}
	037 Move X21, 0x234D000
	038 Move X21, [X21+1448]
	039 Move X1, X31
	040 Call Transform.get_position, X0
	041 Move S3, 0.5
	042 Move X0, X20
	043 Move X1, X31
	044 Call SFXManager.PlaySFX, X0, X1, V0
	045 Move X0, [X21]
	046 Move W20, [X19+216]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move W0, W20
	052 Move X1, X31
	053 Call LeanTween.cancel, X0
	054 Move X0, [X19+152]
	055 Compare X0, 0
	056 JumpIfEqual {125}
	057 Move X1, X31
	058 Call Component.get_transform, X0
	059 Compare X0, 0
	060 JumpIfEqual {125}
	061 Move X1, X31
	062 Call Transform.get_localPosition, X0
	063 Move X8, -19652608
	064 Move X9, -19652608
	065 Move V0, V2
	066 Move V1, [X8+304]
	067 Move V2, [X9+188]
	068 Move X0, X31
	069 Call LeanTween.value, V0, V1, V2
	070 Compare X0, 0
	071 JumpIfEqual {125}
	072 Move X20, 0x234D000
	073 Move X21, 0x234F000
	074 Move X20, [X20+1456]
	075 Move X21, [X21+1408]
	076 Move W1, 1
	077 Move X2, X31
	078 Call LTDescr.setLoopPingPong, X0, X1
	079 Move X8, [X20]
	080 Move X20, X0
	081 Move X0, X8
	082 Call 0x1C17F10
	083 Move X2, [X21]
	084 Move X1, X19
	085 Move X3, X31
	086 Move X21, X0
	087 Call Action`1<Single>..ctor, X0, X1, X2
	088 Compare X20, 0
	089 JumpIfEqual {125}
	090 Move X22, 0x234C000
	091 Move X23, 0x234F000
	092 Move X22, [X22+3696]
	093 Move X23, [X23+1416]
	094 Move X0, X20
	095 Move X1, X21
	096 Move X2, X31
	097 Call LTDescr.setOnUpdate, X0, X1
	098 Move X8, [X22]
	099 Move X20, X0
	100 Move X0, X8
	101 Call 0x1C17F10
	102 Move X2, [X23]
	103 Move X1, X19
	104 Move X3, X31
	105 Move X21, X0
	106 Call Action..ctor, X0, X1, X2
	107 Compare X20, 0
	108 JumpIfEqual {125}
	109 Move X0, X20
	110 Move X1, X21
	111 Move X2, X31
	112 Call LTDescr.setOnComplete, X0, X1
	113 Compare X0, 0
	114 JumpIfEqual {125}
	115 Move X1, X31
	116 Call LTDescr.get_id, X0
	117 Move [X19+216], W0
	118 Move X20, [X31+32]
	119 Move X19, [X31+40]
	120 Move X22, [X31+16]
	121 Move X21, [X31+24]
	122 Move X30, [X31+48]
	123 Move X23, [X31+56]
	124 Return 
	125 Call 0x1C17F20

Method: System.Void AnimateLaserStarting()

Disassembly:
	0x01DA96C4 MOV W0, W19
	0x01DA96C8 LDP X20, X19, [X31 + 0x20]
	0x01DA96CC LDP X22, X21, [X31 + 0x10]
	0x01DA96D0 MOV X1, X31
	0x01DA96D4 LDP X30, X23, [X31], #0x30
	0x01DA96D8 B 0x31AD670
	0x01DA96DC BL 0x1C16F20
	0x01DA96E0 STP X30, X19, [X31 - 0x10]!
	0x01DA96E4 MOV X1, X31
	0x01DA96E8 MOV X19, X0
	0x01DA96EC BL 0x1E73F88
	0x01DA96F0 MOV X0, X19
	0x01DA96F4 BL 0x1DA9704
	0x01DA96F8 MOV X0, X19
	0x01DA96FC LDP X30, X19, [X31], #0x10
	0x01DA9700 B 0x1DA984C
	0x01DA9704 SUB X31, X31, 0x1B0
	0x01DA9708 STR X29, [X31 + 0x180]
	0x01DA970C STP X30, X21, [X31 + 0x190]
	0x01DA9710 STP X20, X19, [X31 + 0x1A0]
	0x01DA9714 ADRP X21, 0x262F000
	0x01DA9718 ADRP X20, 0x234A000
	0x01DA971C LDRB W8, [X21 + 0xAB9]
	0x01DA9720 LDR X20, [X20 + 0x598]
	0x01DA9724 MOV X19, X0
	0x01DA9728 TBNZ X8, 0x0, 0x1DA9740
	0x01DA972C ADRP X0, 0x234A000
	0x01DA9730 LDR X0, [X0 + 0x598]
	0x01DA9734 BL 0x1C16CF4
	0x01DA9738 MOVZ W8, 0x1
	0x01DA973C STRB W8, [X21 + 0xAB9]
	0x01DA9740 LDR X0, [X20]
	0x01DA9744 LDR X20, [X19 + 0x88]
	0x01DA9748 LDR W8, [X0 + 0xE0]
	0x01DA974C CBNZ W8, 0x1DA9754
	0x01DA9750 BL 0x1C16DFC
	0x01DA9754 MOV X0, X20
	0x01DA9758 MOV X1, X31
	0x01DA975C MOV X2, X31
	0x01DA9760 BL 0x3C3883C
	0x01DA9764 TBNZ X0, 0x0, 0x1DA9834
	0x01DA9768 LDR X0, [X19 + 0x80]
	0x01DA976C CBZ X0, 0x1DA9848
	0x01DA9770 MOV X1, X31
	0x01DA9774 BL 0x3C32E90
	0x01DA9778 CBZ X0, 0x1DA9848
	0x01DA977C ADD X8, X31, 0x140
	0x01DA9780 MOV X1, X31
	0x01DA9784 BL 0x3C3FF0C
	0x01DA9788 LDP V0, V1, [X31 + 0x140]
	0x01DA978C LDP V2, V3, [X31 + 0x160]
	0x01DA9790 STP V0, V1, [X31 + 0x100]
	0x01DA9794 STP V2, V3, [X31 + 0x120]
	0x01DA9798 LDR X0, [X19 + 0x88]
	0x01DA979C CBZ X0, 0x1DA9848
	0x01DA97A0 ADD X8, X31, 0x140
	0x01DA97A4 MOV X1, X31
	0x01DA97A8 BL 0x3C3F1C8
	0x01DA97AC LDP V0, V1, [X31 + 0x140]
	0x01DA97B0 LDP V2, V3, [X31 + 0x160]
	0x01DA97B4 ADD X8, X31, 0xC0
	0x01DA97B8 ADD X0, X31, 0x80
	0x01DA97BC STP V0, V1, [X31 + 0x40]
	0x01DA97C0 LDP V0, V1, [X31 + 0x100]
	0x01DA97C4 STP V2, V3, [X31 + 0x60]
	0x01DA97C8 LDP V2, V3, [X31 + 0x120]
	0x01DA97CC ADD X1, X31, 0x40
	0x01DA97D0 MOV X2, X31
	0x01DA97D4 STP V0, V1, [X31 + 0x80]
	0x01DA97D8 STP V2, V3, [X31 + 0xA0]
	0x01DA97DC BL 0x3C27F74
	0x01DA97E0 LDP V0, V1, [X31 + 0xC0]
	0x01DA97E4 LDP V2, V3, [X31 + 0xE0]
	0x01DA97E8 STP V0, V1, [X31 + 0x140]
	0x01DA97EC STP V2, V3, [X31 + 0x160]
	0x01DA97F0 LDR X0, [X19 + 0x80]
	0x01DA97F4 CBZ X0, 0x1DA9848
	0x01DA97F8 MOV X1, X31
	0x01DA97FC BL 0x3C1341C
	0x01DA9800 LDR W1, [X19 + 0x104]
	0x01DA9804 LDP V0, V1, [X31 + 0x140]
	0x01DA9808 LDP V2, V3, [X31 + 0x160]
	0x01DA980C STP V0, V1, [X31 + 0xC0]
	0x01DA9810 STP V2, V3, [X31 + 0xE0]
	0x01DA9814 CBZ X0, 0x1DA9848
	0x01DA9818 LDP V0, V1, [X31 + 0xC0]
	0x01DA981C LDP V2, V3, [X31 + 0xE0]
	0x01DA9820 ADD X2, X31, 0x0
	0x01DA9824 MOV X3, X31
	0x01DA9828 STP V0, V1, [X31]
	0x01DA982C STP V2, V3, [X31 + 0x20]
	0x01DA9830 BL 0x3C15D84
	0x01DA9834 LDP X20, X19, [X31 + 0x1A0]
	0x01DA9838 LDP X30, X21, [X31 + 0x190]
	0x01DA983C LDR X29, [X31 + 0x180]
	0x01DA9840 ADD X31, X31, 0x1B0
	0x01DA9844 RET
	0x01DA9848 BL 0x1C16F20
	0x01DA984C STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2630000
	008 Move W8, [X20+2736]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x234D000
	015 Move X0, [X0+1456]
	016 Call 0x1C17CF4
	017 Move X0, 0x234C000
	018 Move X0, [X0+3696]
	019 Call 0x1C17CF4
	020 Move X0, 0x234D000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move X0, 0x234F000
	024 Move X0, [X0+1424]
	025 Call 0x1C17CF4
	026 Move X0, 0x234F000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+2736], W8
	031 Move X20, [X19+168]
	032 Move X0, X19
	033 Move X1, X31
	034 Call Component.get_transform, X0
	035 Compare X0, 0
	036 JumpIfEqual {114}
	037 Move X21, 0x234D000
	038 Move X21, [X21+1448]
	039 Move X1, X31
	040 Call Transform.get_position, X0
	041 Move S3, 1
	042 Move X0, X20
	043 Move X1, X31
	044 Call SFXManager.PlaySFX, X0, X1, V0
	045 Move X0, [X21]
	046 Move W20, [X19+220]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move W0, W20
	052 Move X1, X31
	053 Call LeanTween.cancel, X0
	054 Move S0, 1
	055 Move S1, W31
	056 Move S2, 0.25
	057 Move X0, X31
	058 Call LeanTween.value, V0, V1, V2
	059 Compare X0, 0
	060 JumpIfEqual {114}
	061 Move X20, 0x234D000
	062 Move X21, 0x234F000
	063 Move X20, [X20+1456]
	064 Move X21, [X21+1424]
	065 Move W1, 6
	066 Move X2, X31
	067 Call LTDescr.setLoopPingPong, X0, X1
	068 Move X8, [X20]
	069 Move X20, X0
	070 Move X0, X8
	071 Call 0x1C17F10
	072 Move X2, [X21]
	073 Move X1, X19
	074 Move X3, X31
	075 Move X21, X0
	076 Call Action`1<Single>..ctor, X0, X1, X2
	077 Compare X20, 0
	078 JumpIfEqual {114}
	079 Move X22, 0x234C000
	080 Move X23, 0x234F000
	081 Move X22, [X22+3696]
	082 Move X23, [X23+1432]
	083 Move X0, X20
	084 Move X1, X21
	085 Move X2, X31
	086 Call LTDescr.setOnUpdate, X0, X1
	087 Move X8, [X22]
	088 Move X20, X0
	089 Move X0, X8
	090 Call 0x1C17F10
	091 Move X2, [X23]
	092 Move X1, X19
	093 Move X3, X31
	094 Move X21, X0
	095 Call Action..ctor, X0, X1, X2
	096 Compare X20, 0
	097 JumpIfEqual {114}
	098 Move X0, X20
	099 Move X1, X21
	100 Move X2, X31
	101 Call LTDescr.setOnComplete, X0, X1
	102 Compare X0, 0
	103 JumpIfEqual {114}
	104 Move X1, X31
	105 Call LTDescr.get_id, X0
	106 Move [X19+220], W0
	107 Move X20, [X31+32]
	108 Move X19, [X31+40]
	109 Move X22, [X31+16]
	110 Move X21, [X31+24]
	111 Move X30, [X31+48]
	112 Move X23, [X31+56]
	113 Return 
	114 Call 0x1C17F20

Method: System.Void RPC_TriggerEnter(UnityEngine.Vector3 position)

Disassembly:
	0x01DA99D8 MOV W8, W0
	0x01DA99DC LDR X0, [X22]
	0x01DA99E0 ADRP X9, 0xFFFFFFFFFED40000
	0x01DA99E4 LDR V0, [X9 + 0xFB8]
	0x01DA99E8 LDR V9, [X20 + 0x18]
	0x01DA99EC LDR W9, [X0 + 0xE0]
	0x01DA99F0 ANDS W31, W8, 0x1
	0x01DA99F4 FMOV S1, 0.75
	0x01DA99F8 FCSEL S10, S1, S0, NE
	0x01DA99FC CBNZ W9, 0x1DA9A04
	0x01DA9A00 BL 0x1C16DFC
	0x01DA9A04 MOV V0.16B, V8.16B
	0x01DA9A08 MOV V1.16B, V9.16B
	0x01DA9A0C MOV V2.16B, V10.16B
	0x01DA9A10 MOV X0, X31
	0x01DA9A14 BL 0x31B22EC
	0x01DA9A18 CBZ X0, 0x1DA9AE0
	0x01DA9A1C ADRP X21, 0x234C000
	0x01DA9A20 ADRP X22, 0x234E000
	0x01DA9A24 LDR X21, [X21 + 0x5B0]
	0x01DA9A28 LDR X22, [X22 + 0x5E8]
	0x01DA9A2C MOV X1, X31
	0x01DA9A30 BL 0x31C5C5C
	0x01DA9A34 LDR X8, [X21]
	0x01DA9A38 MOV X21, X0
	0x01DA9A3C MOV X0, X8
	0x01DA9A40 BL 0x1C16F10
	0x01DA9A44 LDR X2, [X22]
	0x01DA9A48 MOV X1, X20
	0x01DA9A4C MOV X3, X31
	0x01DA9A50 MOV X22, X0
	0x01DA9A54 BL 0x2A6DA40
	0x01DA9A58 CBZ X21, 0x1DA9AE0
	0x01DA9A5C ADRP X23, 0x234B000
	0x01DA9A60 ADRP X24, 0x234E000
	0x01DA9A64 LDR X23, [X23 + 0xE70]
	0x01DA9A68 LDR X24, [X24 + 0x5F0]
	0x01DA9A6C MOV X0, X21
	0x01DA9A70 MOV X1, X22
	0x01DA9A74 MOV X2, X31
	0x01DA9A78 BL 0x31C8070
	0x01DA9A7C LDR X8, [X23]
	0x01DA9A80 MOV X21, X0
	0x01DA9A84 MOV X0, X8
	0x01DA9A88 BL 0x1C16F10
	0x01DA9A8C LDR X2, [X24]
	0x01DA9A90 MOV X1, X20
	0x01DA9A94 MOV X3, X31
	0x01DA9A98 MOV X22, X0
	0x01DA9A9C BL 0x3314368
	0x01DA9AA0 CBZ X21, 0x1DA9AE0
	0x01DA9AA4 MOV X0, X21
	0x01DA9AA8 MOV X1, X22
	0x01DA9AAC MOV X2, X31
	0x01DA9AB0 BL 0x31C7FD8
	0x01DA9AB4 CBZ X0, 0x1DA9AE0
	0x01DA9AB8 MOV X1, X31
	0x01DA9ABC BL 0x31BFBD4
	0x01DA9AC0 STR W0, [X19 + 0xD8]
	0x01DA9AC4 LDP X20, X19, [X31 + 0x40]
	0x01DA9AC8 LDP X22, X21, [X31 + 0x30]
	0x01DA9ACC LDP X24, X23, [X31 + 0x20]
	0x01DA9AD0 LDR X30, [X31 + 0x18]
	0x01DA9AD4 LDP D9, D8, [X31 + 0x8]
	0x01DA9AD8 LDR V10, [X31], #0x50
	0x01DA9ADC RET
	0x01DA9AE0 BL 0x1C16F20
	0x01DA9AE4 STP X30, X19, [X31 - 0x10]!
	0x01DA9AE8 MOV X19, X0
	0x01DA9AEC BL 0x1DA928C
	0x01DA9AF0 ORN W8, W31, W0, 0x0
	0x01DA9AF4 AND W1, W8, 0x1
	0x01DA9AF8 MOV X0, X19
	0x01DA9AFC BL 0x1DA92F4
	0x01DA9B00 MOV X0, X19
	0x01DA9B04 LDP X30, X19, [X31], #0x10
	0x01DA9B08 B 0x1DA984C
	0x01DA9B0C STR X30, [X31 - 0x20]!
	0x01DA9B10 STP X20, X19, [X31 + 0x10]
	0x01DA9B14 LDR X20, [X0 + 0xD0]
	0x01DA9B18 MOV X19, X0
	0x01DA9B1C BL 0x1DA928C
	0x01DA9B20 CBZ X20, 0x1DA9B48
	0x01DA9B24 ANDS W31, W0, 0x1
	0x01DA9B28 MOVZ W8, 0xC0
	0x01DA9B2C MOVZ W9, 0xB8
	0x01DA9B30 CSEL X8, X9, X8, NE
	0x01DA9B34 LDR X8, [X19, X8, LSL]
	0x01DA9B38 STR X8, [X20 + 0x98]
	0x01DA9B3C LDP X20, X19, [X31 + 0x10]
	0x01DA9B40 LDR X30, [X31], #0x20
	0x01DA9B44 RET
	0x01DA9B48 BL 0x1C16F20
	0x01DA9B4C SUB X31, X31, 0x80
	0x01DA9B50 STR D14, [X31 + 0x20]
	0x01DA9B54 STP D13, D12, [X31 + 0x28]
	0x01DA9B58 STP D11, D10, [X31 + 0x38]
	0x01DA9B5C STP D9, D8, [X31 + 0x48]
	0x01DA9B60 STR X30, [X31 + 0x58]
	0x01DA9B64 STP X22, X21, [X31 + 0x60]
	0x01DA9B68 STP X20, X19, [X31 + 0x70]
	0x01DA9B6C ADRP X21, 0x234A000
	0x01DA9B70 LDR X21, [X21 + 0x5A0]
	0x01DA9B74 MOV X19, X1
	0x01DA9B78 FCMP S0, 0x0
	0x01DA9B7C B.PL 0x1DA9CD8
	0x01DA9B80 MOV X20, X0
	0x01DA9B84 LDR X0, [X0 + 0x90]
	0x01DA9B88 CBZ X0, 0x1DA9D80
	0x01DA9B8C MOV X1, X31
	0x01DA9B90 MOV V8.16B, V0.16B
	0x01DA9B94 BL 0x3C3FA04
	0x01DA9B98 ADRP X22, 0x262F000
	0x01DA9B9C LDRB W8, [X22 + 0x786]
	0x01DA9BA0 MOV V9.16B, V0.16B
	0x01DA9BA4 MOV V10.16B, V1.16B
	0x01DA9BA8 MOV V11.16B, V2.16B
	0x01DA9BAC CBNZ W8, 0x1DA9BC4
	0x01DA9BB0 ADRP X0, 0x234A000
	0x01DA9BB4 LDR X0, [X0 + 0x5A0]
	0x01DA9BB8 BL 0x1C16CF4
	0x01DA9BBC MOVZ W8, 0x1
	0x01DA9BC0 STRB W8, [X22 + 0x786]
	0x01DA9BC4 LDR X8, [X21]
	0x01DA9BC8 LDR X8, [X8 + 0xB8]
	0x01DA9BCC LDP S0, S1, [X8 + 0x18]
	0x01DA9BD0 LDR V2, [X8 + 0x20]
	0x01DA9BD4 FMUL S0, S9, S0
	0x01DA9BD8 FMUL S1, S10, S1
	0x01DA9BDC FADD S0, S0, S1
	0x01DA9BE0 FMUL S1, S11, S2
	0x01DA9BE4 FADD S10, S1, S0
	0x01DA9BE8 FCMP S10, 0x0
	0x01DA9BEC B.LE 0x1DA9CD8
	0x01DA9BF0 LDR X0, [X20 + 0x90]
	0x01DA9BF4 CBZ X0, 0x1DA9D80
	0x01DA9BF8 MOV X1, X31
	0x01DA9BFC BL 0x3C3FA04
	0x01DA9C00 LDRB W8, [X22 + 0x786]
	0x01DA9C04 MOV V9.16B, V2.16B
	0x01DA9C08 CBNZ W8, 0x1DA9C28
	0x01DA9C0C ADRP X0, 0x234A000
	0x01DA9C10 LDR X0, [X0 + 0x5A0]
	0x01DA9C14 STP V1, V0, [X31]
	0x01DA9C18 BL 0x1C16CF4
	0x01DA9C1C LDP V1, V0, [X31]
	0x01DA9C20 MOVZ W8, 0x1
	0x01DA9C24 STRB W8, [X22 + 0x786]
	0x01DA9C28 LDR X8, [X21]
	0x01DA9C2C ADRP X20, 0x262F000
	0x01DA9C30 FMOV V4.2S, 0x0
	0x01DA9C34 FMOV S3, 3
	0x01DA9C38 LDR X8, [X8 + 0xB8]
	0x01DA9C3C FMOV S11, -0.25
	0x01DA9C40 MOV V0.S[1], V1.S[0]
	0x01DA9C44 LDR V5, [X8 + 0x18]
	0x01DA9C48 LDR V2, [X8 + 0x20]
	0x01DA9C4C LDRB W8, [X20 + 0x785]
	0x00000000 INVALID
	0x01DA9C54 FMUL S14, S2, S3
	0x01DA9C58 CBNZ W8, 0x1DA9C78
	0x01DA9C5C ADRP X0, 0x234A000
	0x01DA9C60 LDR X0, [X0 + 0x5A8]
	0x01DA9C64 STR V0, [X31 + 0x1]
	0x01DA9C68 BL 0x1C16CF4
	0x01DA9C6C LDR V0, [X31 + 0x1]
	0x01DA9C70 MOVZ W8, 0x1
	0x01DA9C74 STRB W8, [X20 + 0x785]
	0x01DA9C78 ADRP X8, 0x234A000
	0x01DA9C7C LDR X8, [X8 + 0x5A8]
	0x01DA9C80 FMUL S12, S10, S10
	0x01DA9C84 FMUL S11, S8, S11
	0x01DA9C88 FADD V10.2S, V0.2S, V13.2S
	0x01DA9C8C LDR X0, [X8]
	0x01DA9C90 FADD S8, S9, S14
	0x01DA9C94 LDR W8, [X0 + 0xE0]
	0x01DA9C98 CBNZ W8, 0x1DA9CA0
	0x01DA9C9C BL 0x1C16DFC
	0x01DA9CA0 ADRP X8, 0xFFFFFFFFFED41000
	0x00000000 INVALID
	0x01DA9CA8 LDR V2, [X8 + 0x17C]
	0x01DA9CAC FADDP S0, V0.2S
	0x01DA9CB0 FMUL S1, S8, S8
	0x01DA9CB4 FADD S0, S1, S0
	0x01DA9CB8 FSQRT S1, S0
	0x01DA9CBC FCMP S1, S2
	0x01DA9CC0 FMUL S2, S11, S12
	0x01DA9CC4 B.LE 0x1DA9D10
	0x01DA9CC8 UNIMPLEMENTED
	0x00000000 INVALID
	0x01DA9CD0 FDIV S1, S8, S1
	0x01DA9CD4 B 0x1DA9D48
	0x01DA9CD8 ADRP X20, 0x262F000
	0x01DA9CDC LDRB W8, [X20 + 0x783]
	0x01DA9CE0 CBNZ W8, 0x1DA9CF8
	0x01DA9CE4 ADRP X0, 0x234A000
	0x01DA9CE8 LDR X0, [X0 + 0x5A0]
	0x01DA9CEC BL 0x1C16CF4
	0x01DA9CF0 MOVZ W8, 0x1
	0x01DA9CF4 STRB W8, [X20 + 0x783]
	0x01DA9CF8 LDR X8, [X21]
	0x01DA9CFC MOV W0, W31
	0x01DA9D00 LDR X8, [X8 + 0xB8]
	0x01DA9D04 LDR V0, [X8]
	0x01DA9D08 LDR V1, [X8 + 0x8]
	0x01DA9D0C B 0x1DA9D54
	0x01DA9D10 ADRP X20, 0x262F000
	0x01DA9D14 LDRB W8, [X20 + 0x783]
	0x01DA9D18 CBNZ W8, 0x1DA9D38
	0x01DA9D1C ADRP X0, 0x234A000
	0x01DA9D20 LDR X0, [X0 + 0x5A0]
	0x01DA9D24 STR V2, [X31 + 0x1]
	0x01DA9D28 BL 0x1C16CF4
	0x01DA9D2C LDR V2, [X31 + 0x1]
	0x01DA9D30 MOVZ W8, 0x1
	0x01DA9D34 STRB W8, [X20 + 0x783]
	0x01DA9D38 LDR X8, [X21]
	0x01DA9D3C LDR X8, [X8 + 0xB8]
	0x01DA9D40 LDR V0, [X8]
	0x01DA9D44 LDR V1, [X8 + 0x8]
	0x00000000 INVALID
	0x01DA9D4C FMUL S1, S2, S1
	0x01DA9D50 MOVZ W0, 0x1
	0x01DA9D54 STR D0, [X19]
	0x01DA9D58 STR S1, [X19 + 0x8]
	0x01DA9D5C LDP X20, X19, [X31 + 0x70]
	0x01DA9D60 LDP X22, X21, [X31 + 0x60]
	0x01DA9D64 LDR X30, [X31 + 0x58]
	0x01DA9D68 LDP D9, D8, [X31 + 0x48]
	0x01DA9D6C LDP D11, D10, [X31 + 0x38]
	0x01DA9D70 LDP D13, D12, [X31 + 0x28]
	0x01DA9D74 LDR V14, [X31 + 0x20]
	0x01DA9D78 ADD X31, X31, 0x80
	0x01DA9D7C RET
	0x01DA9D80 BL 0x1C16F20
	0x01DA9D84 SUB X31, X31, 0x60
	0x01DA9D88 STR X30, [X31 + 0x20]
	0x01DA9D8C STP X24, X23, [X31 + 0x30]
	0x01DA9D90 STP X22, X21, [X31 + 0x40]
	0x01DA9D94 STP X20, X19, [X31 + 0x50]
	0x01DA9D98 ADRP X20, 0x262F000
	0x01DA9D9C LDRB W8, [X20 + 0xABA]
	0x01DA9DA0 MOV X19, X0
	0x01DA9DA4 TBNZ X8, 0x0, 0x1DA9DC8
	0x01DA9DA8 ADRP X0, 0x234A000
	0x01DA9DAC LDR X0, [X0 + 0x598]
	0x01DA9DB0 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+112], D10
	003 Move [X31+128], D9
	004 Move [X31+136], D8
	005 Move [X31+144], X30
	006 Move [X31+152], X23
	007 Move [X31+160], X22
	008 Move [X31+168], X21
	009 Move [X31+176], X20
	010 Move [X31+184], X19
	011 Move X20, 0x2630000
	012 Move W8, [X20+2737]
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {53}
	021 Move X0, 0x234B000
	022 Move X0, [X0+2896]
	023 Call 0x1C17CF4
	024 Move X0, 0x234E000
	025 Move X0, [X0+2680]
	026 Call 0x1C17CF4
	027 Move X0, 0x234E000
	028 Move X0, [X0+2904]
	029 Call 0x1C17CF4
	030 Move X0, 0x234E000
	031 Move X0, [X0+2912]
	032 Call 0x1C17CF4
	033 Move X0, 0x234F000
	034 Move X0, [X0+352]
	035 Call 0x1C17CF4
	036 Move X0, 0x234F000
	037 Move X0, [X0+360]
	038 Call 0x1C17CF4
	039 Move X0, 0x234B000
	040 Move X0, [X0+1440]
	041 Call 0x1C17CF4
	042 Move X0, 0x234F000
	043 Move X0, [X0+1440]
	044 Call 0x1C17CF4
	045 Move X0, 0x234F000
	046 Move X0, [X0+1128]
	047 Call 0x1C17CF4
	048 Move X0, 0x234F000
	049 Move X0, [X0+1448]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X20+2737], W8
	053 Move W8, [X19+88]
	054 Compare W8, 0
	055 JumpIfEqual {180}
	056 Move [X19+88], W31
	057 Move X0, X19
	058 Call TripwireExplosive.get_isExploded, X0
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {196}
	063 Move X0, X19
	064 Call TripwireExplosive.get_armedState, X0
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move W1, 1
	067 Move X0, X19
	068 Move W22, 1
	069 Call TripwireExplosive.set_isExploded, X0, X1
	070 Move X8, 0x234E000
	071 Move X20, [X19+56]
	072 Move X21, [X19+136]
	073 Move X8, [X8+2904]
	074 Add X0, X31, 96
	075 Move V0, V10
	076 Move V1, V9
	077 Move X1, [X8]
	078 Move V2, V8
	079 Move [X31+96], X31
	080 Move [X31+104], X31
	081 Call Nullable`1<Vector3>..ctor, X0, X1
	082 Move X23, 0x2630000
	083 Move W8, [X23+1939]
	084 Compare W8, 0
	085 JumpIfNotEqual {90}
	086 Move X0, 0x234C000
	087 Move X0, [X0+1448]
	088 Call 0x1C17CF4
	089 Move [X23+1939], W22
	090 Move X8, 0x234C000
	091 Move X8, [X8+1448]
	092 Move X9, 0x234E000
	093 Add X0, X31, 72
	094 Move X8, [X8]
	095 Move X8, [X8+184]
	096 Move X9, [X9+2912]
	097 Move S0, [X8]
	098 Move S1, [X8+4]
	099 Move S2, [X8+8]
	100 Move S3, [X8+12]
	101 Move X1, [X9]
	102 Move [X31+72], X31
	103 Move [X31+80], X31
	104 Move [X31+88], W31
	105 Call Nullable`1<Quaternion>..ctor, X0, X1
	106 Compare X20, 0
	107 JumpIfEqual {298}
	108 NotImplemented "Instruction LDUR not yet implemented."
	109 Move W8, [X31+88]
	110 Move X2, [X31+96]
	111 Move X3, [X31+104]
	112 Add X4, X31, 48
	113 Move X0, X20
	114 Move X1, X21
	115 Move X5, X31
	116 Move X6, X31
	117 Move W7, W31
	118 Move [X31+3], V0
	119 Move [X31+64], W8
	120 Move [X31], X31
	121 Call NetworkRunner.Spawn, X0, X1, X2, X3, X4, X5, X6
	122 Move X8, 0x234F000
	123 Move X8, [X8+352]
	124 Move W1, 1
	125 Move X0, [X8]
	126 Call 0x1C17D6C
	127 Move X20, X0
	128 Move X0, X19
	129 Move X1, X31
	130 Call Component.get_transform, X0
	131 Compare X0, 0
	132 JumpIfEqual {298}
	133 Move X1, X31
	134 Call Transform.get_position, X0
	135 Move X8, 0x234B000
	136 Move X8, [X8+1440]
	137 Add X1, X31, 32
	138 Move [X31+32], S0
	139 Move [X31+40], S1
	140 Move [X31+40], S2
	141 Move X0, [X8]
	142 Call 0x1C17E04
	143 Move X8, 0x234F000
	144 Move X9, 0x234F000
	145 Move X8, [X8+1128]
	146 Move X9, [X9+360]
	147 Move X2, X0
	148 Add X0, X31, 16
	149 Move X1, [X8]
	150 Move X3, [X9]
	151 Move [X31+16], X31
	152 Move [X31+24], X31
	153 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	154 Compare X20, 0
	155 JumpIfEqual {298}
	156 Move W8, [X20+24]
	157 Compare W8, 0
	158 JumpIfEqual {299}
	159 Move V0, [X31+1]
	160 Move X8, 0x234B000
	161 Move [X20+2], V0
	162 Move X8, [X8+2896]
	163 Move X0, [X8]
	164 Move W8, [X0+224]
	165 Compare W8, 0
	166 JumpIfNotEqual {168}
	167 Call 0x1C17DFC
	168 Move X8, 0x234F000
	169 Move X8, [X8+1440]
	170 Move X1, X20
	171 Move X2, X31
	172 Move X0, [X8]
	173 Call Analytics.Track, X0, X1
	174 Move X0, [X19+56]
	175 Compare X0, 0
	176 JumpIfEqual {298}
	177 Move X1, [X19+64]
	178 Move X2, X31
	179 Call NetworkRunner.Despawn, X0, X1
	180 Move X20, 0x234E000
	181 Move X20, [X20+2680]
	182 Move X0, [X20]
	183 Move W8, [X0+224]
	184 Compare W8, 0
	185 JumpIfNotEqual {187}
	186 Call 0x1C17DFC
	187 Move X0, X19
	188 Move X1, X31
	189 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	190 Move X0, [X19+56]
	191 Compare X0, 0
	192 JumpIfEqual {298}
	193 Move X1, X31
	194 Call NetworkRunner.get_Stage, X0
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Move X20, [X31+176]
	197 Move X19, [X31+184]
	198 Move X22, [X31+160]
	199 Move X21, [X31+168]
	200 Move X30, [X31+144]
	201 Move X23, [X31+152]
	202 Move D9, [X31+128]
	203 Move D8, [X31+136]
	204 Move V10, [X31+112]
	205 Add X31, X31, 192
	206 Return 
	207 Move X0, [X19+64]
	208 Compare X0, 0
	209 JumpIfEqual {298}
	210 Move X1, X31
	211 Call NetworkObject.GetLocalAuthorityMask, X0
	212 And W31, W0, 7
	213 Move TEMP, X0
	214 And TEMP, TEMP, 1
	215 Compare TEMP, 1
	216 JumpIfEqual {57}
	217 Move X8, [X19+56]
	218 Compare X8, 0
	219 JumpIfEqual {298}
	220 Move X0, [X8+80]
	221 Compare X0, 0
	222 JumpIfEqual {298}
	223 Move X1, X31
	224 Call Simulation.HasAnyActiveConnections, X0
	225 Move TEMP, X0
	226 And TEMP, TEMP, 1
	227 Compare TEMP, 1
	228 JumpIfNotEqual {196}
	229 Move X8, [X19+56]
	230 Compare X8, 0
	231 JumpIfEqual {298}
	232 Move X0, [X8+80]
	233 Move W1, 20
	234 Move X2, X31
	235 Call SimulationMessage.Allocate, X0, X1
	236 Move X8, [X19+64]
	237 Compare X8, 0
	238 JumpIfEqual {298}
	239 Move X8, [X8+32]
	240 Move X20, X0
	241 Compare X8, 0
	242 JumpIfEqual {268}
	243 Move W0, [X8]
	244 Move X0, [X20]
	245 Move X19, [X19+64]
	246 Move W8, [X0+224]
	247 Compare W8, 0
	248 JumpIfNotEqual {250}
	249 Call 0x1C17DFC
	250 Move X8, 0x234F000
	251 Move X8, [X8+1448]
	252 Move X1, X19
	253 Move X20, [X31+176]
	254 Move X19, [X31+184]
	255 Move X22, [X31+160]
	256 Move X21, [X31+168]
	257 Move X0, [X8]
	258 Move X30, [X31+144]
	259 Move X23, [X31+152]
	260 Move D9, [X31+128]
	261 Move D8, [X31+136]
	262 Move V10, [X31+112]
	263 Move W2, 7
	264 Move X3, X31
	265 Add X31, X31, 192
	266 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	267 Return 
	268 Move X0, X31
	269 Move W1, [X19+104]
	270 Move W2, 1
	271 Move X3, X31
	272 Call RpcHeader.Create, X0, X1, X2
	273 Move [X20+28], X0
	274 Move [X20+36], S10
	275 Move [X20+44], S9
	276 Move [X20+44], S8
	277 Compare X20, 0
	278 JumpIfEqual {298}
	279 Move W8, 160
	280 Move [X20+12], W8
	281 Move X0, [X19+56]
	282 Compare X0, 0
	283 JumpIfEqual {298}
	284 Move X1, X20
	285 Move X20, [X31+176]
	286 Move X19, [X31+184]
	287 Move X22, [X31+160]
	288 Move X21, [X31+168]
	289 Move X30, [X31+144]
	290 Move X23, [X31+152]
	291 Move D9, [X31+128]
	292 Move D8, [X31+136]
	293 Move V10, [X31+112]
	294 Move X2, X31
	295 Add X31, X31, 192
	296 Call NetworkRunner.SendRpc, X0, X1
	297 Return 
	298 Call 0x1C17F20
	299 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x01DA9F20 LDRB W8, [X24 + 0x85D]
	0x01DA9F24 CBNZ W8, 0x1DA9F3C

ISIL:
	001 Move X1, X31
	002 Call NetworkBehaviour..ctor, X0
	003 Return 

Method: System.Void <AnimateSpike>b__43_0(System.Single val)

Disassembly:
	0x01DA9F28 ADRP X0, 0x234C000
	0x01DA9F2C LDR X0, [X0 + 0x7C8]
	0x01DA9F30 BL 0x1C16CF4
	0x01DA9F34 MOVZ W8, 0x1
	0x01DA9F38 STRB W8, [X24 + 0x85D]
	0x01DA9F3C LDR X0, [X23]
	0x01DA9F40 LDR W8, [X0 + 0xE0]
	0x01DA9F44 CBNZ W8, 0x1DA9F50
	0x01DA9F48 BL 0x1C16DFC
	0x01DA9F4C LDR X0, [X23]
	0x01DA9F50 LDR X8, [X22]
	0x01DA9F54 LDR X9, [X0 + 0xB8]
	0x01DA9F58 LDR W10, [X8 + 0xE0]
	0x01DA9F5C LDR X21, [X9]
	0x01DA9F60 CBNZ W10, 0x1DA9F6C
	0x01DA9F64 MOV X0, X8
	0x01DA9F68 BL 0x1C16DFC
	0x01DA9F6C MOV X0, X21
	0x01DA9F70 MOV X1, X31
	0x01DA9F74 MOV X2, X31
	0x01DA9F78 BL 0x3C354F8
	0x01DA9F7C TBZ X0, 0x0, 0x1DAA150
	0x01DA9F80 LDR X0, [X23]
	0x01DA9F84 LDR W8, [X0 + 0xE0]
	0x01DA9F88 CBNZ W8, 0x1DA9F90
	0x01DA9F8C BL 0x1C16DFC
	0x01DA9F90 LDRB W8, [X24 + 0x85D]
	0x01DA9F94 CBNZ W8, 0x1DA9FAC
	0x01DA9F98 ADRP X0, 0x234C000
	0x01DA9F9C LDR X0, [X0 + 0x7C8]
	0x01DA9FA0 BL 0x1C16CF4
	0x01DA9FA4 MOVZ W8, 0x1
	0x01DA9FA8 STRB W8, [X24 + 0x85D]
	0x01DA9FAC LDR X0, [X23]
	0x01DA9FB0 LDR W8, [X0 + 0xE0]
	0x01DA9FB4 CBNZ W8, 0x1DA9FC0
	0x01DA9FB8 BL 0x1C16DFC
	0x01DA9FBC LDR X0, [X23]
	0x01DA9FC0 LDR X8, [X0 + 0xB8]
	0x01DA9FC4 LDR X8, [X8]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2630000
	007 Move X20, 0x234B000
	008 Move W8, [X21+2738]
	009 Move X20, [X20+1432]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x234B000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2738], W8
	021 Move X0, [X20]
	022 Move X20, [X19+152]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {41}
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move V8, [X31+48]
	040 Return 
	041 Move X0, [X19+152]
	042 Compare X0, 0
	043 JumpIfEqual {55}
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X30, [X31+16]
	047 Move X21, [X31+24]
	048 Move S0, W31
	049 Move S1, W31
	050 Move V2, V8
	051 Move X1, X31
	052 Move V8, [X31+48]
	053 Call Transform.set_localPosition, X0, X1
	054 Return 
	055 Call 0x1C17F20

Method: System.Void <AnimateSpike>b__43_1()

Disassembly:
	0x01DA9FC8 CBZ X8, 0x1DAA168
	0x01DA9FCC LDR X0, [X22]
	0x01DA9FD0 LDR X21, [X8 + 0x30]
	0x01DA9FD4 LDR W9, [X0 + 0xE0]
	0x01DA9FD8 CBNZ W9, 0x1DA9FE0
	0x01DA9FDC BL 0x1C16DFC
	0x01DA9FE0 MOV X0, X21
	0x01DA9FE4 MOV X1, X31
	0x01DA9FE8 MOV X2, X31
	0x01DA9FEC BL 0x3C354F8
	0x01DA9FF0 TBZ X0, 0x0, 0x1DAA150
	0x01DA9FF4 LDR X0, [X23]
	0x01DA9FF8 LDR W8, [X0 + 0xE0]
	0x01DA9FFC CBNZ W8, 0x1DAA004
	0x01DAA000 BL 0x1C16DFC
	0x01DAA004 LDRB W8, [X24 + 0x85D]
	0x01DAA008 CBNZ W8, 0x1DAA020
	0x01DAA00C ADRP X0, 0x234B000
	0x01DAA010 LDR X0, [X0 + 0x7C8]
	0x01DAA014 BL 0x1C16CF4
	0x01DAA018 MOVZ W8, 0x1
	0x01DAA01C STRB W8, [X24 + 0x85D]
	0x01DAA020 LDR X0, [X23]
	0x01DAA024 LDR W8, [X0 + 0xE0]
	0x01DAA028 CBNZ W8, 0x1DAA034
	0x01DAA02C BL 0x1C16DFC
	0x01DAA030 LDR X0, [X23]
	0x01DAA034 LDR X8, [X0 + 0xB8]
	0x01DAA038 LDR X8, [X8]
	0x01DAA03C CBZ X8, 0x1DAA168
	0x01DAA040 LDR X0, [X8 + 0x30]
	0x01DAA044 CBZ X0, 0x1DAA168
	0x01DAA048 MOV X1, X31
	0x01DAA04C BL 0x3C8EC70
	0x01DAA050 TBZ X0, 0x0, 0x1DAA150
	0x01DAA054 LDR X0, [X23]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2630000
	006 Move X20, 0x234B000
	007 Move W8, [X21+2739]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x234B000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2739], W8
	019 Move X0, [X20]
	020 Move X20, [X19+152]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {38}
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 
	038 Move X0, [X19+152]
	039 Compare X0, 0
	040 JumpIfEqual {51}
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move S0, W31
	044 Move S1, W31
	045 Move S2, 0.25
	046 Move X1, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Transform.set_localPosition, X0, X1
	050 Return 
	051 Call 0x1C17F20

Method: System.Void <AnimateLaserStarting>b__44_0(System.Single val)

Disassembly:
	0x01DAA058 LDR W8, [X0 + 0xE0]
	0x01DAA05C CBNZ W8, 0x1DAA064
	0x01DAA060 BL 0x1C16DFC
	0x01DAA064 LDRB W8, [X24 + 0x85D]
	0x01DAA068 CBNZ W8, 0x1DAA080
	0x01DAA06C ADRP X0, 0x234B000
	0x01DAA070 LDR X0, [X0 + 0x7C8]
	0x01DAA074 BL 0x1C16CF4
	0x01DAA078 MOVZ W8, 0x1
	0x01DAA07C STRB W8, [X24 + 0x85D]
	0x01DAA080 LDR X0, [X23]
	0x01DAA084 LDR W8, [X0 + 0xE0]
	0x01DAA088 CBNZ W8, 0x1DAA094
	0x01DAA08C BL 0x1C16DFC
	0x01DAA090 LDR X0, [X23]
	0x01DAA094 LDR X8, [X0 + 0xB8]
	0x01DAA098 LDR X8, [X8]
	0x01DAA09C CBZ X8, 0x1DAA168
	0x01DAA0A0 LDR X0, [X8 + 0x30]
	0x01DAA0A4 CBZ X0, 0x1DAA168
	0x01DAA0A8 MOV X1, X31
	0x01DAA0AC BL 0x3C8E868
	0x01DAA0B0 MOV V0.16B, V1.16B
	0x01DAA0B4 ADD X1, X31, 0x10
	0x01DAA0B8 MOV X0, X19
	0x01DAA0BC BL 0x1DA9B4C
	0x01DAA0C0 TBZ X0, 0x0, 0x1DAA150
	0x01DAA0C4 LDP S0, S1, [X31 + 0x10]
	0x01DAA0C8 LDR V2, [X31 + 0x18]
	0x01DAA0CC MOV X0, X20
	0x01DAA0D0 MOV X1, X31
	0x01DAA0D4 BL 0x1D8F63C
	0x01DAA0D8 B 0x1DAA150
	0x01DAA0DC LDR X0, [X20 + 0x40]
	0x01DAA0E0 CBZ X0, 0x1DAA150
	0x01DAA0E4 LDRB W8, [X0 + 0x60]
	0x01DAA0E8 TBNZ X8, 0x1, 0x1DAA150
	0x01DAA0EC MOV X1, X31
	0x01DAA0F0 BL 0x1E93668
	0x01DAA0F4 TBZ X0, 0x0, 0x1DAA150

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x262F000
	007 Move X20, 0x234A000
	008 Move W8, [X21+2740]
	009 Move X20, [X20+1432]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x234A000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2740], W8
	021 Move X0, [X20]
	022 Move X20, [X19+144]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {41}
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move V8, [X31+48]
	040 Return 
	041 Move X0, [X19+208]
	042 Compare X0, 0
	043 JumpIfEqual {55}
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X30, [X31+16]
	047 Move X21, [X31+24]
	048 Move S0, 0.5
	049 NotImplemented "Instruction FCMP not yet implemented."
	050 NotImplemented "Instruction CSET not yet implemented."
	051 Move X2, X31
	052 Move V8, [X31+48]
	053 Call Renderer.set_enabled, X0, X1
	054 Return 
	055 Call 0x1C17F20

Method: System.Void <AnimateLaserStarting>b__44_1()

Disassembly:
	0x01DAA0F8 LDR X0, [X20 + 0x168]
	0x01DAA0FC CBZ X0, 0x1DAA168
	0x01DAA100 MOV X1, X31
	0x01DAA104 BL 0x3C8E868
	0x01DAA108 MOV V0.16B, V1.16B
	0x01DAA10C ADD X1, X31, 0x0
	0x01DAA110 MOV X0, X19
	0x01DAA114 BL 0x1DA9B4C
	0x01DAA118 TBZ X0, 0x0, 0x1DAA150
	0x01DAA11C LDR X19, [X20 + 0x168]
	0x01DAA120 CBZ X19, 0x1DAA168
	0x01DAA124 MOV X0, X19
	0x01DAA128 MOV X1, X31
	0x01DAA12C BL 0x3C8E868
	0x01DAA130 LDP S3, S4, [X31]
	0x01DAA134 LDR V5, [X31 + 0x8]
	0x01DAA138 MOV X0, X19
	0x01DAA13C MOV X1, X31
	0x01DAA140 FADD S0, S0, S3
	0x01DAA144 FADD S1, S1, S4
	0x01DAA148 FADD S2, S2, S5
	0x01DAA14C BL 0x3C8E908
	0x01DAA150 LDP X20, X19, [X31 + 0x50]
	0x01DAA154 LDP X22, X21, [X31 + 0x40]
	0x01DAA158 LDP X24, X23, [X31 + 0x30]
	0x01DAA15C LDR X30, [X31 + 0x20]
	0x01DAA160 ADD X31, X31, 0x60
	0x01DAA164 RET
	0x01DAA168 BL 0x1C16F20
	0x01DAA16C STP X30, X21, [X31 - 0x20]!
	0x01DAA170 STP X20, X19, [X31 + 0x10]
	0x01DAA174 ADRP X21, 0x262E000
	0x01DAA178 ADRP X20, 0x234C000
	0x01DAA17C LDRB W8, [X21 + 0xABC]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x262F000
	006 Move X20, 0x234A000
	007 Move W8, [X21+2741]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x234A000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2741], W8
	019 Move X0, [X20]
	020 Move X20, [X19+144]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {38}
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 
	038 Move X0, [X19+208]
	039 Compare X0, 0
	040 JumpIfEqual {49}
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move W1, 1
	044 Move X2, X31
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Call Renderer.set_enabled, X0, X1
	048 Return 
	049 Call 0x1C17F20

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DAA180 LDR X20, [X20 + 0xBE0]
	0x01DAA184 MOV X19, X0
	0x01DAA188 TBNZ X8, 0x0, 0x1DAA1A0
	0x01DAA18C ADRP X0, 0x234C000
	0x01DAA190 LDR X0, [X0 + 0xBE0]
	0x01DAA194 BL 0x1C16CF4
	0x01DAA198 MOVZ W8, 0x1
	0x01DAA19C STRB W8, [X21 + 0xABC]
	0x01DAA1A0 ADRP X8, 0xFFFFFFFFFED42000
	0x01DAA1A4 ADRP X9, 0xFFFFFFFFFED42000
	0x01DAA1A8 LDR V0, [X8 + 0x5F]
	0x01DAA1AC LDR V1, [X9 + 0xF2]
	0x01DAA1B0 MOVZ W8, 0xCCCD
	0x01DAA1B4 MOVK W8, 0x3DCC0000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, [X0+192]
	004 Move X19, X0
	005 Call TripwireExplosive.set_isExploded, X0, X1
	006 Move W1, [X19+196]
	007 Move X0, X19
	008 Call TripwireExplosive.set_armedState, X0, X1
	009 Move V0, [X19+200]
	010 Move X0, X19
	011 Call TripwireExplosive.set_laserDistance, X0, V0
	012 Move W1, [X19+204]
	013 Move X0, X19
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Call TripwireExplosive.set_startupTimer, X0, X1
	017 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DAA1B8 STR W8, [X19 + 0x100]
	0x01DAA1BC STP V0, V1, [X19 + 0xE0]
	0x01DAA1C0 LDR X0, [X20]
	0x01DAA1C4 MOV X1, X31
	0x01DAA1C8 BL 0x3C124EC
	0x01DAA1CC STR W0, [X19 + 0x104]
	0x01DAA1D0 MOV X0, X19
	0x01DAA1D4 LDP X20, X19, [X31 + 0x10]
	0x01DAA1D8 MOV X1, X31
	0x01DAA1DC LDP X30, X21, [X31], #0x20
	0x01DAA1E0 B 0x1E74F04
	0x01DAA1E4 LDRB W1, [X0 + 0xC8]
	0x01DAA1E8 B 0x1DA92F4
	0x01DAA1EC STP X30, X19, [X31 - 0x10]!
	0x01DAA1F0 MOV X19, X0
	0x01DAA1F4 BL 0x1DA928C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call TripwireExplosive.get_isExploded, X0
	005 And W8, W0, 1
	006 Move X0, X19
	007 Move [X19+192], W8
	008 Call TripwireExplosive.get_armedState, X0
	009 Move [X19+196], W0
	010 Move X0, X19
	011 Call TripwireExplosive.get_laserDistance, X0
	012 Move X0, X19
	013 Move [X19+200], S0
	014 Call TripwireExplosive.get_startupTimer, X0
	015 Move [X19+204], W0
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return 

Method: System.Void RPC_TriggerEnter@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01DAA1F8 AND W8, W0, 0x1
	0x01DAA1FC STRB W8, [X19 + 0xC8]
	0x01DAA200 LDP X30, X19, [X31], #0x10
	0x01DAA204 RET
	0x01DAA208 MOV X1, X31
	0x01DAA20C B 0x33BDD8C
	0x01DAA210 SUB X31, X31, 0x50
	0x01DAA214 STR D10, [X31 + 0x10]
	0x01DAA218 STP D9, D8, [X31 + 0x20]
	0x01DAA21C STP X30, X21, [X31 + 0x30]
	0x01DAA220 STP X20, X19, [X31 + 0x40]
	0x01DAA224 ADRP X20, 0x262E000
	0x01DAA228 LDRB W8, [X20 + 0xAC1]
	0x01DAA22C MOV V8.16B, V0.16B
	0x01DAA230 MOV X19, X0
	0x01DAA234 TBNZ X8, 0x0, 0x1DAA24C
	0x01DAA238 ADRP X0, 0x2349000
	0x01DAA23C LDR X0, [X0 + 0x598]
	0x01DAA240 BL 0x1C16CF4
	0x01DAA244 MOVZ W8, 0x1
	0x01DAA248 STRB W8, [X20 + 0xAC1]
	0x01DAA24C LDR X8, [X19 + 0x10]
	0x01DAA250 CBZ X8, 0x1DAA3A0
	0x01DAA254 ADRP X9, 0x2349000
	0x01DAA258 LDR X9, [X9 + 0x598]
	0x01DAA25C LDR X20, [X8 + 0x88]
	0x01DAA260 LDR X0, [X9]
	0x01DAA264 LDR W9, [X0 + 0xE0]
	0x01DAA268 CBNZ W9, 0x1DAA270
	0x01DAA26C BL 0x1C16DFC
	0x01DAA270 MOV X0, X20
	0x01DAA274 MOV X1, X31
	0x01DAA278 MOV X2, X31
	0x01DAA27C BL 0x3C3883C
	0x01DAA280 TBZ X0, 0x0, 0x1DAA29C
	0x01DAA284 LDP X20, X19, [X31 + 0x40]
	0x01DAA288 LDP X30, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x262F000
	006 Move W8, [X21+2742]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x234E000
	014 Move X0, [X0+1456]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2742], W8
	018 Compare X19, 0
	019 JumpIfEqual {45}
	020 Move X9, 0x234E000
	021 Move X9, [X9+1456]
	022 Move W8, 1
	023 Move S0, [X20+36]
	024 Move S1, [X20+40]
	025 Move V2, [X20+44]
	026 Move [X19+88], W8
	027 Move X8, [X19]
	028 Move X1, [X9]
	029 Move W10, [X8+304]
	030 Move W9, [X1+304]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X8, [X8+200]
	033 Add X8, X8, X9
	034 NotImplemented "Instruction LDUR not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Call TripwireExplosive.RPC_TriggerEnter, X0, X1
	042 Return 
	043 Move X0, X19
	044 Call 0x1C181E0
	045 Call 0x1C17F20

