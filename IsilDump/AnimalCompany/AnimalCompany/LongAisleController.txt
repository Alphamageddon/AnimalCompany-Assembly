Type: AnimalCompany.LongAisleController

Method: AnimalCompany.LongAisleController/Phase get_phase()

Disassembly:
	0x01CEBA60 LDP X30, X21, [X31 + 0x50]
	0x01CEBA64 LDP D9, D8, [X31 + 0x40]
	0x01CEBA68 LDP D11, D10, [X31 + 0x30]
	0x01CEBA6C LDP D13, D12, [X31 + 0x20]
	0x01CEBA70 LDP D15, D14, [X31 + 0x10]
	0x01CEBA74 ADD X31, X31, 0x70
	0x01CEBA78 B 0x1CEC0BC
	0x01CEBA7C BL 0x1B6EA1C
	0x01CEBA80 STR D14, [X31 - 0x90]!
	0x01CEBA84 STP D13, D12, [X31 + 0x10]
	0x01CEBA88 STP D11, D10, [X31 + 0x20]
	0x01CEBA8C STP D9, D8, [X31 + 0x30]
	0x01CEBA90 STP X30, X27, [X31 + 0x40]
	0x01CEBA94 STP X26, X25, [X31 + 0x50]
	0x01CEBA98 STP X24, X23, [X31 + 0x60]
	0x01CEBA9C STP X22, X21, [X31 + 0x70]
	0x01CEBAA0 STP X20, X19, [X31 + 0x80]
	0x01CEBAA4 ADRP X20, 0x2538000
	0x01CEBAA8 LDRB W8, [X20 + 0x691]
	0x01CEBAAC MOV X19, X0
	0x01CEBAB0 TBNZ X8, 0x0, 0x1CEBAE0
	0x01CEBAB4 ADRP X0, 0x2265000
	0x01CEBAB8 LDR X0, [X0 + 0x2F8]
	0x01CEBABC BL 0x1B6E7F0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+60]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2263000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2266000
	016 Move X0, [X0+904]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2266000
	023 Move X0, [X0+912]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_phase(AnimalCompany.LongAisleController/Phase value)

Disassembly:
	0x01CEBAC0 ADRP X0, 0x2263000
	0x01CEBAC4 LDR X0, [X0 + 0x3D8]
	0x01CEBAC8 BL 0x1B6E7F0
	0x01CEBACC ADRP X0, 0x2262000
	0x01CEBAD0 LDR X0, [X0 + 0x4C0]
	0x01CEBAD4 BL 0x1B6E7F0
	0x01CEBAD8 MOVZ W8, 0x1
	0x01CEBADC STRB W8, [X20 + 0x691]
	0x01CEBAE0 STR X31, [X31 + 0x8]
	0x01CEBAE4 LDR X8, [X19 + 0xB8]
	0x01CEBAE8 CBZ X8, 0x1CEBEB4
	0x01CEBAEC LDR X8, [X8 + 0x38]
	0x01CEBAF0 CBZ X8, 0x1CEBEB4
	0x01CEBAF4 LDR V8, [X19 + 0x17C]
	0x01CEBAF8 LDR W9, [X8 + 0x18]
	0x01CEBAFC FMOV S0, 5
	0x01CEBB00 FCMP S8, S0
	0x01CEBB04 B.GE 0x1CEBB14
	0x01CEBB08 CBZ W9, 0x1CEBEB8
	0x01CEBB0C ADD X8, X8, 0x20
	0x01CEBB10 B 0x1CEBB20
	0x01CEBB14 CMP W9, 0x1
	0x01CEBB18 B.LS 0x1CEBEB8
	0x01CEBB1C ADD X8, X8, 0x24

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+60], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2263000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2266000
	016 Move X0, [X0+904]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2266000
	023 Move X0, [X0+920]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void HandlePhaseChanged()

Disassembly:
	0x01CEBB20 LDR X0, [X19 + 0x38]
	0x01CEBB24 CBZ X0, 0x1CEBEB4
	0x01CEBB28 LDR V11, [X8]
	0x01CEBB2C MOV X1, X31
	0x01CEBB30 BL 0x1D87058
	0x01CEBB34 LDR X0, [X19 + 0xD0]
	0x01CEBB38 FADD S0, S8, S0
	0x01CEBB3C STR S0, [X19 + 0x17C]
	0x01CEBB40 CBZ X0, 0x1CEBEB4
	0x01CEBB44 ADRP X22, 0x2263000
	0x01CEBB48 ADRP X21, 0x2262000
	0x01CEBB4C LDR X22, [X22 + 0x3D8]
	0x01CEBB50 LDR X21, [X21 + 0x4C0]
	0x01CEBB54 MOV X1, X31
	0x01CEBB58 BL 0x3AA7658
	0x01CEBB5C LDR X0, [X22]
	0x01CEBB60 MOV V8.16B, V0.16B
	0x01CEBB64 MOV V9.16B, V1.16B
	0x01CEBB68 MOV V10.16B, V2.16B
	0x01CEBB6C LDR W8, [X0 + 0xE0]
	0x01CEBB70 CBNZ W8, 0x1CEBB7C
	0x01CEBB74 BL 0x1B6E8F8
	0x01CEBB78 LDR X0, [X22]
	0x01CEBB7C LDR X8, [X0 + 0xB8]
	0x01CEBB80 MOV X1, X31
	0x01CEBB84 LDR W0, [X8]
	0x01CEBB88 BL 0x3A9DE68
	0x01CEBB8C LDR X8, [X21]
	0x01CEBB90 MOV W20, W0
	0x01CEBB94 LDR W9, [X8 + 0xE0]
	0x01CEBB98 CBNZ W9, 0x1CEBBA4
	0x01CEBB9C MOV X0, X8
	0x01CEBBA0 BL 0x1B6E8F8
	0x01CEBBA4 ADRP X8, 0xFFFFFFFFFEDBE000
	0x01CEBBA8 LDR V3, [X8 + 0xE20]
	0x01CEBBAC MOV V0.16B, V8.16B
	0x01CEBBB0 MOV V1.16B, V9.16B
	0x01CEBBB4 MOV V2.16B, V10.16B
	0x01CEBBB8 MOV W0, W20
	0x01CEBBBC MOV X1, X31
	0x01CEBBC0 BL 0x3AF52EC
	0x01CEBBC4 CBZ X0, 0x1CEBEB4
	0x01CEBBC8 LDR X8, [X0 + 0x18]
	0x01CEBBCC CBNZ X8, 0x1CEBBE0
	0x01CEBBD0 LDR V0, [X19 + 0x17C]
	0x01CEBBD4 FMOV S1, 10
	0x01CEBBD8 FCMP S0, S1
	0x01CEBBDC B.LE 0x1CEBE68
	0x01CEBBE0 MOV X0, X19
	0x01CEBBE4 BL 0x1CEC124
	0x01CEBBE8 MOV X0, X19
	0x01CEBBEC MOV X1, X31
	0x01CEBBF0 BL 0x3A9B084
	0x01CEBBF4 CBZ X0, 0x1CEBEB4
	0x01CEBBF8 MOV X1, X31
	0x01CEBBFC BL 0x3AA7658
	0x01CEBC00 ADRP X20, 0x2538000
	0x01CEBC04 LDRB W8, [X20 + 0x442]
	0x01CEBC08 MOV V8.16B, V0.16B
	0x01CEBC0C MOV V9.16B, V1.16B
	0x01CEBC10 MOV V10.16B, V2.16B
	0x01CEBC14 CBNZ W8, 0x1CEBC2C
	0x01CEBC18 ADRP X0, 0x2262000
	0x01CEBC1C LDR X0, [X0 + 0x480]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+496]
	006 Compare X0, 0
	007 JumpIfEqual {76}
	008 Move X1, X31
	009 Call AudioSource.get_isPlaying, X0
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {19}
	014 Move X0, [X19+496]
	015 Compare X0, 0
	016 JumpIfEqual {76}
	017 Move X1, X31
	018 Call AudioSource.Stop, X0
	019 Move X0, X19
	020 Call LongAisleController.get_phase, X0
	021 Subtract W8, W0, 1
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X9, -18866176
	024 Add X9, X9, 2387
	025 NotImplemented "Instruction ADR not yet implemented."
	026 Move W11, [X9]
	027 Add X10, X10, X11
	028 CallNoReturn X10
	029 Move X0, [X19+192]
	030 Compare X0, 0
	031 JumpIfEqual {76}
	032 Move X8, [X0]
	033 Move X9, [X8+440]
	034 Move X1, [X8+448]
	035 Move X0, [X19+192]
	036 Compare X0, 0
	037 JumpIfEqual {76}
	038 Move X8, [X0]
	039 Move X9, [X8+488]
	040 Move X1, [X8+496]
	041 Move X0, [X19+192]
	042 Compare X0, 0
	043 JumpIfEqual {76}
	044 Move X8, [X0]
	045 Move S0, 1
	046 Move X9, [X8+472]
	047 Move X1, [X8+480]
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X0, [X19+496]
	050 Compare X0, 0
	051 JumpIfEqual {76}
	052 Move X1, X31
	053 Call AudioSource.Play, X0
	054 Move X0, [X19+192]
	055 Compare X0, 0
	056 JumpIfEqual {76}
	057 Move X8, [X0]
	058 Move X9, [X8+552]
	059 Move X1, [X8+560]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X20, [X19+192]
	062 Move X0, X19
	063 Call LongAisleController.get_phase, X0
	064 Compare X20, 0
	065 JumpIfEqual {76}
	066 Move X8, [X20]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X0, X20
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move X3, [X8+536]
	072 Move X2, [X8+544]
	073 NotImplemented "Instruction CSET not yet implemented."
	074 Move X30, [X31+32]
	075 CallNoReturn X3
	076 Call 0x1B6FA1C

Method: System.Void Setup()

Disassembly:
	0x01CEBC20 BL 0x1B6E7F0
	0x01CEBC24 MOVZ W8, 0x1
	0x01CEBC28 STRB W8, [X20 + 0x442]
	0x01CEBC2C LDR X8, [X19 + 0xB8]
	0x01CEBC30 CBZ X8, 0x1CEBEB4
	0x01CEBC34 ADRP X20, 0x2262000
	0x01CEBC38 LDR X20, [X20 + 0x480]
	0x01CEBC3C LDR X0, [X22]
	0x01CEBC40 LDR V11, [X8 + 0x4C]
	0x01CEBC44 LDR X9, [X20]
	0x01CEBC48 LDR W10, [X0 + 0xE0]
	0x01CEBC4C LDR X9, [X9 + 0xB8]
	0x01CEBC50 LDP S12, S13, [X9 + 0x18]
	0x01CEBC54 LDR V14, [X9 + 0x20]
	0x01CEBC58 CBNZ W10, 0x1CEBC64
	0x01CEBC5C BL 0x1B6E8F8
	0x01CEBC60 LDR X0, [X22]
	0x01CEBC64 LDR X8, [X0 + 0xB8]
	0x01CEBC68 MOV X1, X31
	0x01CEBC6C FADD S12, S8, S12
	0x01CEBC70 FADD S9, S9, S13
	0x01CEBC74 LDR W0, [X8 + 0x8]
	0x01CEBC78 FADD S8, S10, S14
	0x01CEBC7C BL 0x3A9DE68
	0x01CEBC80 LDR X8, [X21]
	0x01CEBC84 MOV W21, W0
	0x01CEBC88 LDR W9, [X8 + 0xE0]
	0x01CEBC8C CBNZ W9, 0x1CEBC98
	0x01CEBC90 MOV X0, X8
	0x01CEBC94 BL 0x1B6E8F8
	0x01CEBC98 MOV V0.16B, V12.16B
	0x01CEBC9C MOV V1.16B, V9.16B
	0x01CEBCA0 MOV V2.16B, V8.16B
	0x01CEBCA4 MOV V3.16B, V11.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobController.Setup, X0
	005 Move X0, [X19+200]
	006 Compare X0, 0
	007 JumpIfEqual {41}
	008 Move W1, 1
	009 Move X2, X31
	010 Call NavMeshAgent.set_updatePosition, X0, X1
	011 Move X0, [X19+200]
	012 Compare X0, 0
	013 JumpIfEqual {41}
	014 Move W1, 1
	015 Move X2, X31
	016 Call NavMeshAgent.set_updateRotation, X0, X1
	017 Move X8, [X19+184]
	018 Compare X8, 0
	019 JumpIfEqual {41}
	020 Move X8, [X8+48]
	021 Compare X8, 0
	022 JumpIfEqual {41}
	023 Move W9, [X8+24]
	024 Compare W9, 0
	025 JumpIfEqual {42}
	026 Move X0, [X19+200]
	027 Compare X0, 0
	028 JumpIfEqual {41}
	029 Move V0, [X8+32]
	030 Move X1, X31
	031 Call NavMeshAgent.set_speed, X0, V0
	032 Move X0, [X19+200]
	033 Compare X0, 0
	034 JumpIfEqual {41}
	035 Move W1, W31
	036 Move X2, X31
	037 Call NavMeshAgent.set_isStopped, X0, X1
	038 Move X0, X19
	039 Move X30, [X31+16]
	040 Move X19, [X31+24]
	041 Call 0x1B6FA1C
	042 Call 0x1B6FA24

Method: System.Void GetAisleData()

Disassembly:
	0x01CEBD14 LDR X0, [X31 + 0x8]
	0x01CEBD18 CBZ X0, 0x1CEBEB4
	0x01CEBD1C MOV X1, X31
	0x01CEBD20 BL 0x1CB47E0
	0x01CEBD24 TBNZ X0, 0x0, 0x1CEBE30
	0x01CEBD28 LDR X8, [X31 + 0x8]
	0x01CEBD2C CBZ X8, 0x1CEBEB4
	0x01CEBD30 LDR X0, [X8 + 0x88]
	0x01CEBD34 CBZ X0, 0x1CEBEB4
	0x01CEBD38 MOV X1, X31
	0x01CEBD3C BL 0x3AA7658
	0x01CEBD40 MOV X0, X19
	0x01CEBD44 MOV X1, X31
	0x01CEBD48 MOV V8.16B, V0.16B
	0x01CEBD4C MOV V9.16B, V1.16B
	0x01CEBD50 MOV V10.16B, V2.16B
	0x01CEBD54 BL 0x3A9B084
	0x01CEBD58 CBZ X0, 0x1CEBEB4
	0x01CEBD5C MOV X1, X31
	0x01CEBD60 BL 0x3AA7658
	0x01CEBD64 LDRB W8, [X25 + 0x441]
	0x01CEBD68 MOV V11.16B, V0.16B
	0x01CEBD6C MOV V12.16B, V1.16B
	0x01CEBD70 MOV V13.16B, V2.16B
	0x01CEBD74 CBNZ W8, 0x1CEBD84
	0x01CEBD78 MOV X0, X22
	0x01CEBD7C BL 0x1B6E7F0
	0x01CEBD80 STRB W26, [X25 + 0x441]
	0x01CEBD84 LDR X0, [X22]
	0x01CEBD88 LDR W8, [X0 + 0xE0]
	0x01CEBD8C CBNZ W8, 0x1CEBD94
	0x01CEBD90 BL 0x1B6E8F8
	0x01CEBD94 FSUB S0, S8, S11
	0x01CEBD98 FSUB S1, S9, S12
	0x01CEBD9C FSUB S2, S10, S13
	0x01CEBDA0 FMUL S3, S0, S0
	0x01CEBDA4 FMUL S4, S1, S1
	0x01CEBDA8 FADD S3, S3, S4
	0x01CEBDAC FMUL S4, S2, S2
	0x01CEBDB0 FADD S3, S4, S3
	0x01CEBDB4 FSQRT S3, S3
	0x01CEBDB8 FCMP S3, S14
	0x01CEBDBC B.LE 0x1CEBDD0
	0x01CEBDC0 FDIV S0, S0, S3
	0x01CEBDC4 FDIV S1, S1, S3
	0x01CEBDC8 FDIV S2, S2, S3
	0x01CEBDCC B 0x1CEBDF4
	0x01CEBDD0 LDRB W8, [X27 + 0x43F]
	0x01CEBDD4 CBNZ W8, 0x1CEBDE4
	0x01CEBDD8 MOV X0, X20
	0x01CEBDDC BL 0x1B6E7F0
	0x01CEBDE0 STRB W26, [X27 + 0x43F]
	0x01CEBDE4 LDR X8, [X20]
	0x01CEBDE8 LDR X8, [X8 + 0xB8]
	0x01CEBDEC LDP S0, S1, [X8]
	0x01CEBDF0 LDR V2, [X8 + 0x8]
	0x01CEBDF4 LDR X8, [X19 + 0xB8]
	0x01CEBDF8 CBZ X8, 0x1CEBEB4
	0x01CEBDFC LDR X0, [X31 + 0x8]
	0x01CEBE00 CBZ X0, 0x1CEBEB4
	0x01CEBE04 LDR V3, [X8 + 0x50]
	0x01CEBE08 LDR X3, [X8 + 0xB8]
	0x01CEBE0C LDR X5, [X8 + 0x18]
	0x01CEBE10 LDR X2, [X19 + 0xD0]
	0x01CEBE14 LDR W1, [X8 + 0x24]
	0x01CEBE18 FMUL S2, S2, S3
	0x01CEBE1C FMUL S1, S1, S3
	0x01CEBE20 FMUL S0, S0, S3
	0x01CEBE24 MOV X4, X3
	0x01CEBE28 MOV X6, X31
	0x01CEBE2C BL 0x1CB93D4
	0x01CEBE30 LDR W8, [X21 + 0x18]
	0x01CEBE34 ADD W23, W23, 0x1
	0x01CEBE38 CMP W23, W8
	0x01CEBE3C B.LT 0x1CEBCF0
	0x01CEBE40 LDP X20, X19, [X31 + 0x80]
	0x01CEBE44 LDP X22, X21, [X31 + 0x70]
	0x01CEBE48 LDP X24, X23, [X31 + 0x60]
	0x01CEBE4C LDP X26, X25, [X31 + 0x50]
	0x01CEBE50 LDP X30, X27, [X31 + 0x40]
	0x01CEBE54 LDP D9, D8, [X31 + 0x30]
	0x01CEBE58 LDP D11, D10, [X31 + 0x20]
	0x01CEBE5C LDP D13, D12, [X31 + 0x10]
	0x01CEBE60 LDR V14, [X31], #0x90
	0x01CEBE64 RET
	0x01CEBE68 LDR X0, [X19 + 0x38]
	0x01CEBE6C CBZ X0, 0x1CEBEB4
	0x01CEBE70 LDR X20, [X19 + 0xC8]
	0x01CEBE74 LDR V10, [X19 + 0x1A4]
	0x01CEBE78 LDR V9, [X19 + 0x1A0]
	0x01CEBE7C LDR V8, [X19 + 0x19C]
	0x01CEBE80 MOV X1, X31
	0x01CEBE84 BL 0x1D87058
	0x01CEBE88 CBZ X20, 0x1CEBEB4
	0x01CEBE8C FMUL S1, S11, S10
	0x01CEBE90 FMUL S3, S11, S9
	0x01CEBE94 FMUL S4, S11, S8
	0x01CEBE98 FMUL S2, S1, S0
	0x01CEBE9C FMUL S1, S3, S0
	0x01CEBEA0 FMUL S0, S4, S0
	0x01CEBEA4 MOV X0, X20
	0x01CEBEA8 MOV X1, X31
	0x01CEBEAC BL 0x3A4AABC
	0x01CEBEB0 B 0x1CEBBE8
	0x01CEBEB4 BL 0x1B6EA1C
	0x01CEBEB8 BL 0x1B6EA24
	0x01CEBEBC STR D8, [X31 - 0x20]!
	0x01CEBEC0 STP X30, X19, [X31 + 0x10]
	0x01CEBEC4 LDR V8, [X0 + 0x180]
	0x01CEBEC8 FMOV S0, 3
	0x01CEBECC MOV X19, X0
	0x01CEBED0 FCMP S8, S0
	0x01CEBED4 B.PL 0x1CEBEF4
	0x01CEBED8 LDR X0, [X19 + 0x38]
	0x01CEBEDC CBZ X0, 0x1CEBF10
	0x01CEBEE0 MOV X1, X31
	0x01CEBEE4 BL 0x1D87058
	0x01CEBEE8 FADD S0, S8, S0
	0x01CEBEEC STR S0, [X19 + 0x180]
	0x01CEBEF0 B 0x1CEBF04
	0x01CEBEF4 MOVZ W1, 0x5
	0x01CEBEF8 MOV X0, X19
	0x01CEBEFC BL 0x1CEAAC0
	0x01CEBF00 STR W31, [X19 + 0x184]
	0x01CEBF04 LDP X30, X19, [X31 + 0x10]
	0x01CEBF08 LDR V8, [X31], #0x20
	0x01CEBF0C RET
	0x01CEBF10 BL 0x1B6EA1C
	0x01CEBF14 STR D8, [X31 - 0x20]!
	0x01CEBF18 STP X30, X19, [X31 + 0x10]
	0x01CEBF1C ADD X1, X31, 0x8
	0x01CEBF20 MOV X19, X0
	0x01CEBF24 STR X31, [X31 + 0x8]
	0x01CEBF28 BL 0x1CE85FC
	0x01CEBF2C TBZ X0, 0x0, 0x1CEBF40
	0x01CEBF30 LDR X1, [X31 + 0x8]
	0x01CEBF34 MOV X0, X19
	0x01CEBF38 BL 0x1CEBF84
	0x01CEBF3C B 0x1CEBF74
	0x01CEBF40 LDR V8, [X19 + 0x184]
	0x01CEBF44 FMOV S0, 2
	0x01CEBF48 FCMP S8, S0
	0x01CEBF4C B.PL 0x1CEBF6C
	0x01CEBF50 LDR X0, [X19 + 0x38]
	0x01CEBF54 CBZ X0, 0x1CEBF80
	0x01CEBF58 MOV X1, X31
	0x01CEBF5C BL 0x1D87058
	0x01CEBF60 FADD S0, S8, S0
	0x01CEBF64 STR S0, [X19 + 0x184]
	0x01CEBF68 B 0x1CEBF74
	0x01CEBF6C MOV X0, X19
	0x01CEBF70 BL 0x1CEACA8
	0x01CEBF74 LDP X30, X19, [X31 + 0x10]
	0x01CEBF78 LDR V8, [X31], #0x20
	0x01CEBF7C RET
	0x01CEBF80 BL 0x1B6EA1C
	0x01CEBF84 STP X30, X23, [X31 - 0x30]!
	0x01CEBF88 STP X22, X21, [X31 + 0x10]
	0x01CEBF8C STP X20, X19, [X31 + 0x20]
	0x01CEBF90 ADRP X22, 0x2538000
	0x01CEBF94 ADRP X23, 0x2264000
	0x01CEBF98 ADRP X21, 0x2265000
	0x01CEBF9C LDRB W8, [X22 + 0x68F]
	0x01CEBFA0 LDR X23, [X23 + 0xF10]
	0x01CEBFA4 LDR X21, [X21 + 0x3C0]
	0x01CEBFA8 MOV X20, X1
	0x01CEBFAC MOV X19, X0
	0x01CEBFB0 TBNZ X8, 0x0, 0x1CEBFEC
	0x01CEBFB4 ADRP X0, 0x2264000
	0x01CEBFB8 LDR X0, [X0 + 0xF10]
	0x01CEBFBC BL 0x1B6E7F0
	0x01CEBFC0 ADRP X0, 0x2264000
	0x01CEBFC4 LDR X0, [X0 + 0xF18]
	0x01CEBFC8 BL 0x1B6E7F0
	0x01CEBFCC ADRP X0, 0x2264000
	0x01CEBFD0 LDR X0, [X0 + 0xDF0]

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+96], D14
	003 Move [X31+104], D13
	004 Move [X31+112], D12
	005 Move [X31+120], D11
	006 Move [X31+128], D10
	007 Move [X31+136], D9
	008 Move [X31+144], D8
	009 Move [X31+152], X30
	010 Move [X31+160], X28
	011 Move [X31+168], X27
	012 Move [X31+176], X26
	013 Move [X31+184], X25
	014 Move [X31+192], X24
	015 Move [X31+200], X23
	016 Move [X31+208], X22
	017 Move [X31+216], X21
	018 Move [X31+224], X20
	019 Move [X31+232], X19
	020 Move X20, 0x2539000
	021 Move W8, [X20+1675]
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {38}
	027 Move X0, 0x2266000
	028 Move X0, [X0+928]
	029 Call 0x1B6F7F0
	030 Move X0, 0x2263000
	031 Move X0, [X0+1144]
	032 Call 0x1B6F7F0
	033 Move X0, 0x2263000
	034 Move X0, [X0+1216]
	035 Call 0x1B6F7F0
	036 Move W8, 1
	037 Move [X20+1675], W8
	038 Move [X31+88], X31
	039 Move X0, [X19+208]
	040 Compare X0, 0
	041 JumpIfEqual {214}
	042 Move X20, 0x2263000
	043 Move X20, [X20+1216]
	044 Move X1, X31
	045 Call Transform.get_position, X0
	046 Move W0, [X19+480]
	047 Move X1, X31
	048 Move V8, V0
	049 Move V9, V1
	050 Move V10, V2
	051 Call LayerMask.op_Implicit, X0
	052 Move X8, [X20]
	053 Move W20, W0
	054 Move W9, [X8+224]
	055 Compare W9, 0
	056 JumpIfNotEqual {59}
	057 Move X0, X8
	058 Call 0x1B6F8F8
	059 Move S3, 0.5
	060 Move V0, V8
	061 Move V1, V9
	062 Move V2, V10
	063 Move W0, W20
	064 Move X1, X31
	065 Call Physics.OverlapSphere, X0, V0, X1
	066 Compare X0, 0
	067 JumpIfEqual {214}
	068 Move W8, [X0+24]
	069 Move X24, 0x2263000
	070 Move X24, [X24+1144]
	071 Move X21, X0
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X26, 0x2266000
	074 Move X22, 0x2263000
	075 Move X26, [X26+928]
	076 Move X22, [X22+1160]
	077 Move TEMP, 0x80800000
	078 Not TEMP
	079 Move W9, TEMP
	080 Move W25, W31
	081 Move X20, X31
	082 Move X27, 0x2539000
	083 Move S14, W9
	084 Move W28, 1
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Add X8, X21, W25
	087 Move X0, [X8+32]
	088 Compare X0, 0
	089 JumpIfEqual {214}
	090 Move X2, [X26]
	091 Add X1, X31, 88
	092 Call 0x2091EE4, X0, X1
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {158}
	097 Move X0, [X24]
	098 Move X23, [X19+320]
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {103}
	102 Call 0x1B6F8F8
	103 Move X0, X23
	104 Move X1, X31
	105 Move X2, X31
	106 Call Object.op_Inequality, X0, X1
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {162}
	111 Move X0, [X19+320]
	112 Compare X0, 0
	113 JumpIfEqual {214}
	114 Move X1, X31
	115 Call Component.get_transform, X0
	116 Compare X0, 0
	117 JumpIfEqual {214}
	118 Move X1, X31
	119 Call Transform.get_position, X0
	120 Move X0, [X31+88]
	121 Compare X0, 0
	122 JumpIfEqual {214}
	123 Move X1, X31
	124 Move V8, V0
	125 Move V9, V1
	126 Move V10, V2
	127 Call Component.get_transform, X0
	128 Compare X0, 0
	129 JumpIfEqual {214}
	130 Move X1, X31
	131 Call Transform.get_position, X0
	132 Move W8, [X27+1286]
	133 Move V11, V0
	134 Move V12, V1
	135 Move V13, V2
	136 Compare W8, 0
	137 JumpIfNotEqual {141}
	138 Move X0, X22
	139 Call 0x1B6F7F0
	140 Move [X27+1286], W28
	141 Move X0, [X22]
	142 Move W8, [X0+224]
	143 Compare W8, 0
	144 JumpIfNotEqual {146}
	145 Call 0x1B6F8F8
	146 Subtract S0, S8, S11
	147 Subtract S1, S9, S12
	148 Subtract S2, S10, S13
	149 Multiply S0, S0, S0
	150 Multiply S1, S1, S1
	151 Add S0, S0, S1
	152 Multiply S1, S2, S2
	153 Add S0, S1, S0
	154 NotImplemented "Instruction FSQRT not yet implemented."
	155 NotImplemented "Instruction FCMP not yet implemented."
	156 Move X20, [X31+88]
	157 Move V14, V0
	158 Move W8, [X21+24]
	159 Add W25, W25, 1
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move X20, X31
	162 Move X20, [X31+88]
	163 Move X0, [X24]
	164 Move W8, [X0+224]
	165 Compare W8, 0
	166 JumpIfNotEqual {168}
	167 Call 0x1B6F8F8
	168 Move X0, X20
	169 Move X1, X31
	170 Move X2, X31
	171 Call Object.op_Inequality, X0, X1
	172 Move TEMP, X0
	173 And TEMP, TEMP, 1
	174 Compare TEMP, 1
	175 JumpIfNotEqual {194}
	176 Compare X20, 0
	177 JumpIfEqual {214}
	178 Move X8, -19140608
	179 Move V0, [X8+3308]
	180 Add X8, X31, 8
	181 Move X0, X20
	182 Move X1, X31
	183 Call AisleObject.GetAisleData, X0, V0
	184 Move X8, [X31+40]
	185 NotImplemented "Instruction LDUR not yet implemented."
	186 NotImplemented "Instruction LDUR not yet implemented."
	187 Add X9, X19, 440
	188 Move [X31+80], X8
	189 Move [X31+48], V1
	190 Move [X31+56], V0
	191 Move [X9+32], X8
	192 Move [X9], V1
	193 Move [X9+8], V0
	194 Move X20, [X31+224]
	195 Move X19, [X31+232]
	196 Move X22, [X31+208]
	197 Move X21, [X31+216]
	198 Move X24, [X31+192]
	199 Move X23, [X31+200]
	200 Move X26, [X31+176]
	201 Move X25, [X31+184]
	202 Move X28, [X31+160]
	203 Move X27, [X31+168]
	204 Move X30, [X31+152]
	205 Move D9, [X31+136]
	206 Move D8, [X31+144]
	207 Move D11, [X31+120]
	208 Move D10, [X31+128]
	209 Move D13, [X31+104]
	210 Move D12, [X31+112]
	211 Move V14, [X31+96]
	212 Add X31, X31, 240
	213 Return 
	214 Call 0x1B6FA1C
	215 Call 0x1B6FA24

Method: System.Void Initialize()

Disassembly:
	0x01CEBFD4 BL 0x1B6E7F0
	0x01CEBFD8 ADRP X0, 0x2265000
	0x01CEBFDC LDR X0, [X0 + 0x3C0]
	0x01CEBFE0 BL 0x1B6E7F0
	0x01CEBFE4 MOVZ W8, 0x1
	0x01CEBFE8 STRB W8, [X22 + 0x68F]
	0x01CEBFEC LDR X0, [X23]
	0x01CEBFF0 BL 0x1B6EA0C
	0x01CEBFF4 LDR X2, [X21]
	0x01CEBFF8 MOV X1, X19
	0x01CEBFFC MOV X3, X31
	0x01CEC000 MOV X21, X0
	0x01CEC004 BL 0x27B63FC
	0x01CEC008 CBZ X20, 0x1CEC0B8
	0x01CEC00C ADRP X8, 0x2263000
	0x01CEC010 LDR X8, [X8 + 0xF18]
	0x01CEC014 ADRP X22, 0x2263000
	0x01CEC018 MOV X0, X20
	0x01CEC01C MOV X1, X21
	0x01CEC020 LDR X2, [X8]
	0x01CEC024 LDR X22, [X22 + 0xDF0]
	0x01CEC028 BL 0x2E482B8
	0x01CEC02C LDR X2, [X22]
	0x01CEC030 MOV X0, X20
	0x01CEC034 MOV W1, W31
	0x01CEC038 BL 0x2E46254
	0x01CEC03C LDR X8, [X19]
	0x01CEC040 MOV X1, X0
	0x01CEC044 MOV X0, X19
	0x01CEC048 LDR X9, [X8 + 0x338]
	0x01CEC04C LDR X2, [X8 + 0x340]
	0x01CEC050 BLR X9
	0x01CEC054 MOVZ W1, 0x2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2539000
	005 Move W8, [X20+1676]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2266000
	012 Move X0, [X0+936]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1676], W8
	016 Move X8, [X19+392]
	017 Compare X8, 0
	018 JumpIfEqual {41}
	019 Move W2, [X8+24]
	020 Move W9, [X8+28]
	021 Add W9, W9, 1
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move [X8+24], W31
	024 Move [X8+28], W9
	025 Move X0, [X8+16]
	026 Move W1, W31
	027 Move X3, X31
	028 Call Array.Clear, X0, X1, X2
	029 Move X8, [X19]
	030 Move X0, X19
	031 Move X1, X31
	032 Move X9, [X8+824]
	033 Move X2, [X8+832]
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move [X19+376], X31
	036 Move [X19+384], X31
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return 
	041 Call 0x1B6FA1C

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01CEC058 MOV X0, X19
	0x01CEC05C BL 0x1CEAAC0
	0x01CEC060 LDR X0, [X19 + 0xC8]
	0x01CEC064 STR W31, [X19 + 0x178]
	0x01CEC068 CBZ X0, 0x1CEC0B8
	0x01CEC06C MOVZ W1, 0x1
	0x01CEC070 MOV X2, X31
	0x01CEC074 BL 0x3A4AB90
	0x01CEC078 MOV X0, X19
	0x01CEC07C BL 0x1CEAD14
	0x01CEC080 LDR X8, [X19 + 0xB8]
	0x01CEC084 CBZ X8, 0x1CEC0B8
	0x01CEC088 LDR X0, [X19 + 0xD0]
	0x01CEC08C CBZ X0, 0x1CEC0B8
	0x01CEC090 LDR X19, [X8 + 0xA0]
	0x01CEC094 MOV X1, X31
	0x01CEC098 BL 0x3AA7658
	0x01CEC09C MOV X0, X19
	0x01CEC0A0 LDP X20, X19, [X31 + 0x20]
	0x01CEC0A4 LDP X22, X21, [X31 + 0x10]
	0x01CEC0A8 FMOV S3, 1
	0x01CEC0AC MOV X1, X31
	0x01CEC0B0 LDP X30, X23, [X31], #0x30
	0x01CEC0B4 B 0x1CC181C
	0x01CEC0B8 BL 0x1B6EA1C
	0x01CEC0BC STR X30, [X31 - 0x20]!
	0x01CEC0C0 STP X20, X19, [X31 + 0x10]
	0x01CEC0C4 ADRP X20, 0x2537000
	0x01CEC0C8 LDRB W8, [X20 + 0x690]
	0x01CEC0CC MOV X19, X0
	0x01CEC0D0 TBNZ X8, 0x0, 0x1CEC0E8
	0x01CEC0D4 ADRP X0, 0x2263000
	0x01CEC0D8 LDR X0, [X0 + 0xE30]
	0x01CEC0DC BL 0x1B6E7F0
	0x01CEC0E0 MOVZ W8, 0x1
	0x01CEC0E4 STRB W8, [X20 + 0x690]
	0x01CEC0E8 MOVZ W1, 0x3
	0x01CEC0EC MOV X0, X19
	0x01CEC0F0 BL 0x1CEAAC0
	0x01CEC0F4 LDR X8, [X19 + 0x188]
	0x01CEC0F8 CBZ X8, 0x1CEC120
	0x01CEC0FC LDR W8, [X8 + 0x18]
	0x01CEC100 FMOV S0, W31
	0x01CEC104 FMOV S1, 5
	0x01CEC108 CMP W8, 0x0
	0x01CEC10C FCSEL S0, S1, S0, GT
	0x01CEC110 STR S0, [X19 + 0x17C]
	0x01CEC114 LDP X20, X19, [X31 + 0x10]
	0x01CEC118 LDR X30, [X31], #0x20
	0x01CEC11C RET
	0x01CEC120 BL 0x1B6EA1C
	0x01CEC124 STP X30, X19, [X31 - 0x10]!
	0x01CEC128 MOVZ W1, 0x4
	0x01CEC12C MOV X19, X0
	0x01CEC130 BL 0x1CEAAC0
	0x01CEC134 LDR X0, [X19 + 0xD0]
	0x01CEC138 STR W31, [X19 + 0x180]
	0x01CEC13C CBZ X0, 0x1CEC160
	0x01CEC140 LDR X19, [X19 + 0x1E8]
	0x01CEC144 MOV X1, X31
	0x01CEC148 BL 0x3AA7658
	0x01CEC14C FMOV S3, 1
	0x01CEC150 MOV X0, X19
	0x01CEC154 MOV X1, X31
	0x01CEC158 LDP X30, X19, [X31], #0x10
	0x01CEC15C B 0x1CC181C
	0x01CEC160 BL 0x1B6EA1C
	0x01CEC164 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x2538000
	006 Move W8, [X20+1677]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2265000
	013 Move X0, [X0+944]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1677], W8
	017 Move X0, X19
	018 Call MobController.FixedUpdateNetwork, X0
	019 Move X0, X19
	020 Call MobController.get__updateValid, X0
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {74}
	025 Move X0, X19
	026 Call LongAisleController.get_phase, X0
	027 Subtract W8, W0, 1
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X9, -18870272
	030 Add X9, X9, 2392
	031 NotImplemented "Instruction ADR not yet implemented."
	032 Move W11, [X9]
	033 Add X10, X10, X11
	034 CallNoReturn X10
	035 Move X0, X19
	036 Call LongAisleController.UpdateWaiting, X0
	037 Move X0, X19
	038 Call LongAisleController.UpdatePreparing, X0
	039 Move X0, X19
	040 Call LongAisleController.UpdateCharging, X0
	041 Move X0, X19
	042 Call LongAisleController.UpdateStunned, X0
	043 Move X0, X19
	044 Call LongAisleController.UpdateSearching, X0
	045 Move X0, X31
	046 Call GameManager.get_isDebug
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {74}
	051 Move X20, [X19+360]
	052 Compare X20, 0
	053 JumpIfEqual {74}
	054 Move X0, X19
	055 Call LongAisleController.get_phase, X0
	056 Move X8, 0x2265000
	057 Move X8, [X8+944]
	058 Move TEMP, 0
	059 Not TEMP
	060 Move X9, TEMP
	061 Move [X31+24], W0
	062 Add X0, X31, 8
	063 Move X8, [X8]
	064 Move X1, X31
	065 Move [X31+8], X8
	066 Move [X31+16], X9
	067 Call Enum.ToString, X0
	068 Move X8, [X20+64]
	069 Move X9, [X20+24]
	070 Move X2, [X20+40]
	071 Move X1, X0
	072 Move X0, X8
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Move X20, [X31+48]
	075 Move X19, [X31+56]
	076 Move X30, [X31+32]
	077 Add X31, X31, 64
	078 Return 

Method: System.Void SetWaiting()

Disassembly:
	0x01CEBCA8 MOV W0, W21
	0x01CEBCAC MOV X1, X31
	0x01CEBCB0 BL 0x3AF52EC
	0x01CEBCB4 CBZ X0, 0x1CEBEB4
	0x01CEBCB8 LDR W8, [X0 + 0x18]
	0x01CEBCBC MOV X21, X0
	0x01CEBCC0 CMP W8, 0x1
	0x01CEBCC4 B.LT 0x1CEBE40
	0x01CEBCC8 ADRP X24, 0x2265000
	0x01CEBCCC ADRP X9, 0xFFFFFFFFFEDBE000
	0x01CEBCD0 ADRP X22, 0x2262000
	0x01CEBCD4 LDR X24, [X24 + 0x2F8]
	0x01CEBCD8 LDR V14, [X9 + 0xB64]
	0x01CEBCDC LDR X22, [X22 + 0x488]
	0x01CEBCE0 MOV W23, W31
	0x01CEBCE4 ADRP X25, 0x2538000
	0x01CEBCE8 MOVZ W26, 0x1
	0x01CEBCEC ADRP X27, 0x2538000
	0x01CEBCF0 CMP W23, W8
	0x01CEBCF4 B.CS 0x1CEBEB8
	0x01CEBCF8 ADD X8, X21, W23, 0x3, SXTW
	0x01CEBCFC LDR X0, [X8 + 0x20]
	0x01CEBD00 CBZ X0, 0x1CEBEB4
	0x01CEBD04 LDR X2, [X24]
	0x01CEBD08 ADD X1, X31, 0x8
	0x01CEBD0C BL 0x2090EE4
	0x01CEBD10 TBZ X0, 0x0, 0x1CEBE30

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 1
	004 Move X19, X0
	005 Call LongAisleController.set_phase, X0, X1
	006 Move X0, X19
	007 Call LongAisleController.Initialize, X0
	008 Move X0, X19
	009 Call LongAisleController.GetAisleData, X0
	010 Add X8, X19, 452
	011 Move W9, [X19+460]
	012 Move X8, [X8]
	013 Move X0, [X19+200]
	014 Move [X19+408], W9
	015 Move [X19+400], X8
	016 Compare X0, 0
	017 JumpIfEqual {32}
	018 Move V2, [X19+448]
	019 Move V1, [X19+444]
	020 Move V0, [X19+440]
	021 Move X1, X31
	022 Call NavMeshAgent.SetDestination, X0, X1
	023 Move X0, [X19+200]
	024 Compare X0, 0
	025 JumpIfEqual {32}
	026 Move W1, W31
	027 Move X2, X31
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Call NavMeshAgent.set_isStopped, X0, X1
	031 Return 
	032 Call 0x1B6FA1C

Method: System.Void UpdateWaiting()

Disassembly:
	0x01CEC168 MOVZ W1, 0x5
	0x01CEC16C MOV X19, X0
	0x01CEC170 BL 0x1CEAAC0
	0x01CEC174 STR W31, [X19 + 0x184]
	0x01CEC178 LDP X30, X19, [X31], #0x10
	0x01CEC17C RET
	0x01CEC180 STR D10, [X31 - 0x40]!
	0x01CEC184 STP D9, D8, [X31 + 0x10]
	0x01CEC188 STP X30, X21, [X31 + 0x20]
	0x01CEC18C STP X20, X19, [X31 + 0x30]
	0x01CEC190 ADRP X21, 0x2537000
	0x01CEC194 ADRP X20, 0x2263000
	0x01CEC198 LDRB W8, [X21 + 0x692]
	0x01CEC19C LDR X20, [X20 + 0xD48]
	0x01CEC1A0 MOV X19, X0
	0x01CEC1A4 TBNZ X8, 0x0, 0x1CEC1BC
	0x01CEC1A8 ADRP X0, 0x2263000
	0x01CEC1AC LDR X0, [X0 + 0xD48]
	0x01CEC1B0 BL 0x1B6E7F0
	0x01CEC1B4 MOVZ W8, 0x1
	0x01CEC1B8 STRB W8, [X21 + 0x692]
	0x01CEC1BC MOV X0, X19
	0x01CEC1C0 BL 0x1CE76C0
	0x01CEC1C4 LDR X0, [X20]
	0x01CEC1C8 LDR W8, [X0 + 0xE0]
	0x01CEC1CC CBNZ W8, 0x1CEC1D8
	0x01CEC1D0 BL 0x1B6E8F8
	0x01CEC1D4 LDR X0, [X20]
	0x01CEC1D8 LDR X8, [X0 + 0xB8]
	0x01CEC1DC MOV X0, X31
	0x01CEC1E0 LDP S0, S1, [X8 + 0xB0]
	0x01CEC1E4 LDP S2, S3, [X8 + 0xB8]
	0x01CEC1E8 BL 0x3A75B14
	0x01CEC1EC MOV X0, X19
	0x01CEC1F0 MOV X1, X31
	0x01CEC1F4 BL 0x3A9B084
	0x01CEC1F8 CBZ X0, 0x1CEC278
	0x01CEC1FC MOV X1, X31
	0x01CEC200 BL 0x3AA7658
	0x01CEC204 ADRP X20, 0x2537000
	0x01CEC208 LDRB W8, [X20 + 0x442]
	0x01CEC20C MOV V8.16B, V0.16B
	0x01CEC210 MOV V9.16B, V1.16B
	0x01CEC214 MOV V10.16B, V2.16B
	0x01CEC218 CBNZ W8, 0x1CEC230
	0x01CEC21C ADRP X0, 0x2261000
	0x01CEC220 LDR X0, [X0 + 0x480]
	0x01CEC224 BL 0x1B6E7F0
	0x01CEC228 MOVZ W8, 0x1
	0x01CEC22C STRB W8, [X20 + 0x442]
	0x01CEC230 LDR X8, [X19 + 0xB8]
	0x01CEC234 CBZ X8, 0x1CEC278
	0x01CEC238 ADRP X9, 0x2261000
	0x01CEC23C LDR X9, [X9 + 0x480]
	0x01CEC240 LDR V3, [X8 + 0x4C]
	0x01CEC244 LDP X20, X19, [X31 + 0x30]
	0x01CEC248 LDP X30, X21, [X31 + 0x20]
	0x01CEC24C LDR X9, [X9]
	0x01CEC250 MOV X0, X31
	0x01CEC254 LDR X9, [X9 + 0xB8]
	0x01CEC258 LDP S1, S0, [X9 + 0x1C]
	0x01CEC25C LDR V4, [X9 + 0x18]
	0x01CEC260 FADD S2, S10, S0
	0x01CEC264 FADD S1, S9, S1
	0x01CEC268 FADD S0, S8, S4
	0x01CEC26C LDP D9, D8, [X31 + 0x10]
	0x01CEC270 LDR V10, [X31], #0x40
	0x01CEC274 B 0x3A7567C
	0x01CEC278 BL 0x1B6EA1C
	0x01CEC27C STP X30, X23, [X31 - 0x30]!
	0x01CEC280 STP X22, X21, [X31 + 0x10]
	0x01CEC284 STP X20, X19, [X31 + 0x20]
	0x01CEC288 ADRP X22, 0x2537000
	0x01CEC28C ADRP X23, 0x2264000
	0x01CEC290 ADRP X20, 0x2264000
	0x01CEC294 ADRP X21, 0x2262000
	0x01CEC298 LDRB W8, [X22 + 0x693]
	0x01CEC29C LDR X23, [X23 + 0x2B0]
	0x01CEC2A0 LDR X20, [X20 + 0x2A8]
	0x01CEC2A4 LDR X21, [X21 + 0xD78]
	0x01CEC2A8 MOV X19, X0
	0x01CEC2AC TBNZ X8, 0x0, 0x1CEC2DC
	0x01CEC2B0 ADRP X0, 0x2264000
	0x01CEC2B4 LDR X0, [X0 + 0x2A8]
	0x01CEC2B8 BL 0x1B6E7F0
	0x01CEC2BC ADRP X0, 0x2264000
	0x01CEC2C0 LDR X0, [X0 + 0x2B0]
	0x01CEC2C4 BL 0x1B6E7F0
	0x01CEC2C8 ADRP X0, 0x2262000
	0x01CEC2CC LDR X0, [X0 + 0xD78]
	0x01CEC2D0 BL 0x1B6E7F0
	0x01CEC2D4 MOVZ W8, 0x1
	0x01CEC2D8 STRB W8, [X22 + 0x693]
	0x01CEC2DC LDR X0, [X23]
	0x01CEC2E0 BL 0x1B6EA0C
	0x01CEC2E4 LDR X1, [X20]
	0x01CEC2E8 MOV X20, X0
	0x01CEC2EC BL 0x2E45D4C
	0x01CEC2F0 STR X20, [X19 + 0x188]
	0x01CEC2F4 LDR X0, [X21]
	0x01CEC2F8 LDR W8, [X0 + 0xE0]
	0x01CEC2FC CBNZ W8, 0x1CEC304
	0x01CEC300 BL 0x1B6E8F8
	0x01CEC304 MOV X0, X19
	0x01CEC308 LDP X20, X19, [X31 + 0x20]
	0x01CEC30C LDP X22, X21, [X31 + 0x10]
	0x01CEC310 LDP X30, X23, [X31], #0x30
	0x01CEC314 B 0x1CE8008
	0x01CEC318 STP D13, D12, [X31 - 0x60]!
	0x01CEC31C STP D11, D10, [X31 + 0x10]
	0x01CEC320 STP D9, D8, [X31 + 0x20]
	0x01CEC324 STR X30, [X31 + 0x30]
	0x01CEC328 STP X22, X21, [X31 + 0x40]
	0x01CEC32C STP X20, X19, [X31 + 0x50]
	0x01CEC330 CBZ X1, 0x1CEC4A8
	0x01CEC334 MOV X19, X0
	0x01CEC338 MOV X0, X1
	0x01CEC33C MOV X1, X31
	0x01CEC340 MOV X20, X2
	0x01CEC344 BL 0x3A9B084
	0x01CEC348 CBZ X0, 0x1CEC4A8
	0x01CEC34C MOV X1, X31
	0x01CEC350 BL 0x3AA7658
	0x01CEC354 MOV X0, X19
	0x01CEC358 MOV X1, X31
	0x01CEC35C MOV V8.16B, V0.16B
	0x01CEC360 MOV V9.16B, V1.16B
	0x01CEC364 MOV V10.16B, V2.16B
	0x01CEC368 BL 0x3A9B084
	0x01CEC36C CBZ X0, 0x1CEC4A8
	0x01CEC370 MOV X1, X31
	0x01CEC374 BL 0x3AA7658
	0x01CEC378 ADRP X21, 0x2537000
	0x01CEC37C LDRB W8, [X21 + 0x506]
	0x01CEC380 MOV V11.16B, V0.16B
	0x01CEC384 MOV V12.16B, V1.16B
	0x01CEC388 MOV V13.16B, V2.16B
	0x01CEC38C CBNZ W8, 0x1CEC3A4
	0x01CEC390 ADRP X0, 0x2261000
	0x01CEC394 LDR X0, [X0 + 0x488]
	0x01CEC398 BL 0x1B6E7F0
	0x01CEC39C MOVZ W8, 0x1
	0x01CEC3A0 STRB W8, [X21 + 0x506]
	0x01CEC3A4 ADRP X22, 0x2261000
	0x01CEC3A8 LDR X22, [X22 + 0x488]
	0x01CEC3AC FSUB S11, S8, S11
	0x01CEC3B0 FSUB S9, S9, S12
	0x01CEC3B4 FSUB S8, S10, S13
	0x01CEC3B8 LDR X0, [X22]
	0x01CEC3BC LDR W8, [X0 + 0xE0]
	0x01CEC3C0 CBNZ W8, 0x1CEC3C8
	0x01CEC3C4 BL 0x1B6E8F8
	0x01CEC3C8 FMUL S0, S11, S11
	0x01CEC3CC FMUL S1, S9, S9
	0x01CEC3D0 FADD S0, S0, S1
	0x01CEC3D4 FMUL S1, S8, S8
	0x01CEC3D8 FADD S0, S1, S0
	0x01CEC3DC FSQRT S0, S0
	0x01CEC3E0 STR S0, [X31 + 0x3C]
	0x01CEC3E4 CBZ X20, 0x1CEC4A8
	0x01CEC3E8 MOV X0, X20
	0x01CEC3EC MOV X1, X31
	0x01CEC3F0 BL 0x3A9B084
	0x01CEC3F4 CBZ X0, 0x1CEC4A8
	0x01CEC3F8 MOV X1, X31
	0x01CEC3FC BL 0x3AA7658
	0x01CEC400 MOV X0, X19
	0x01CEC404 MOV X1, X31
	0x01CEC408 MOV V8.16B, V0.16B
	0x01CEC40C MOV V9.16B, V1.16B
	0x01CEC410 MOV V10.16B, V2.16B
	0x01CEC414 BL 0x3A9B084
	0x01CEC418 CBZ X0, 0x1CEC4A8
	0x01CEC41C MOV X1, X31
	0x01CEC420 BL 0x3AA7658
	0x01CEC424 LDRB W8, [X21 + 0x506]
	0x01CEC428 MOV V11.16B, V0.16B
	0x01CEC42C MOV V12.16B, V1.16B
	0x01CEC430 MOV V13.16B, V2.16B
	0x01CEC434 CBNZ W8, 0x1CEC44C
	0x01CEC438 ADRP X0, 0x2261000
	0x01CEC43C LDR X0, [X0 + 0x488]
	0x01CEC440 BL 0x1B6E7F0
	0x01CEC444 MOVZ W8, 0x1
	0x01CEC448 STRB W8, [X21 + 0x506]
	0x01CEC44C LDR X0, [X22]
	0x01CEC450 FSUB S11, S8, S11
	0x01CEC454 FSUB S9, S9, S12
	0x01CEC458 FSUB S8, S10, S13
	0x01CEC45C LDR W8, [X0 + 0xE0]
	0x01CEC460 CBNZ W8, 0x1CEC468
	0x01CEC464 BL 0x1B6E8F8
	0x01CEC468 FMUL S0, S11, S11
	0x01CEC46C FMUL S1, S9, S9
	0x01CEC470 FADD S0, S0, S1
	0x01CEC474 FMUL S1, S8, S8
	0x01CEC478 FADD S0, S1, S0
	0x01CEC47C FSQRT S0, S0
	0x01CEC480 ADD X0, X31, 0x3C
	0x01CEC484 MOV X1, X31
	0x01CEC488 BL 0x31F935C
	0x01CEC48C LDP X20, X19, [X31 + 0x50]
	0x01CEC490 LDP X22, X21, [X31 + 0x40]
	0x01CEC494 LDR X30, [X31 + 0x30]
	0x01CEC498 LDP D9, D8, [X31 + 0x20]
	0x01CEC49C LDP D11, D10, [X31 + 0x10]
	0x01CEC4A0 LDP D13, D12, [X31], #0x60
	0x01CEC4A4 RET
	0x01CEC4A8 BL 0x1B6EA1C
	0x01CEC4AC STP D13, D12, [X31 - 0x60]!
	0x01CEC4B0 STP D11, D10, [X31 + 0x10]
	0x01CEC4B4 STP D9, D8, [X31 + 0x20]
	0x01CEC4B8 STR X30, [X31 + 0x30]
	0x01CEC4BC STP X22, X21, [X31 + 0x40]
	0x01CEC4C0 STP X20, X19, [X31 + 0x50]
	0x01CEC4C4 CBZ X1, 0x1CEC63C
	0x01CEC4C8 MOV X19, X0
	0x01CEC4CC MOV X0, X1
	0x01CEC4D0 MOV X1, X31
	0x01CEC4D4 MOV X20, X2
	0x01CEC4D8 BL 0x3A9B084
	0x01CEC4DC CBZ X0, 0x1CEC63C
	0x01CEC4E0 MOV X1, X31
	0x01CEC4E4 BL 0x3AA7658
	0x01CEC4E8 MOV X0, X19
	0x01CEC4EC MOV X1, X31
	0x01CEC4F0 MOV V8.16B, V0.16B
	0x01CEC4F4 MOV V9.16B, V1.16B
	0x01CEC4F8 MOV V10.16B, V2.16B
	0x01CEC4FC BL 0x3A9B084
	0x01CEC500 CBZ X0, 0x1CEC63C
	0x01CEC504 MOV X1, X31
	0x01CEC508 BL 0x3AA7658
	0x01CEC50C ADRP X21, 0x2537000
	0x01CEC510 LDRB W8, [X21 + 0x506]
	0x01CEC514 MOV V11.16B, V0.16B
	0x01CEC518 MOV V12.16B, V1.16B
	0x01CEC51C MOV V13.16B, V2.16B
	0x01CEC520 CBNZ W8, 0x1CEC538
	0x01CEC524 ADRP X0, 0x2261000
	0x01CEC528 LDR X0, [X0 + 0x488]
	0x01CEC52C BL 0x1B6E7F0
	0x01CEC530 MOVZ W8, 0x1
	0x01CEC534 STRB W8, [X21 + 0x506]
	0x01CEC538 ADRP X22, 0x2261000
	0x01CEC53C LDR X22, [X22 + 0x488]
	0x01CEC540 FSUB S11, S8, S11
	0x01CEC544 FSUB S9, S9, S12
	0x01CEC548 FSUB S8, S10, S13
	0x01CEC54C LDR X0, [X22]
	0x01CEC550 LDR W8, [X0 + 0xE0]
	0x01CEC554 CBNZ W8, 0x1CEC55C
	0x01CEC558 BL 0x1B6E8F8
	0x01CEC55C FMUL S0, S11, S11
	0x01CEC560 FMUL S1, S9, S9
	0x01CEC564 FADD S0, S0, S1
	0x01CEC568 FMUL S1, S8, S8
	0x01CEC56C FADD S0, S1, S0
	0x01CEC570 FSQRT S0, S0
	0x01CEC574 STR S0, [X31 + 0x3C]
	0x01CEC578 CBZ X20, 0x1CEC63C
	0x01CEC57C MOV X0, X20
	0x01CEC580 MOV X1, X31
	0x01CEC584 BL 0x3A9B084
	0x01CEC588 CBZ X0, 0x1CEC63C
	0x01CEC58C MOV X1, X31
	0x01CEC590 BL 0x3AA7658
	0x01CEC594 MOV X0, X19
	0x01CEC598 MOV X1, X31
	0x01CEC59C MOV V8.16B, V0.16B
	0x01CEC5A0 MOV V9.16B, V1.16B
	0x01CEC5A4 MOV V10.16B, V2.16B
	0x01CEC5A8 BL 0x3A9B084
	0x01CEC5AC CBZ X0, 0x1CEC63C
	0x01CEC5B0 MOV X1, X31
	0x01CEC5B4 BL 0x3AA7658
	0x01CEC5B8 LDRB W8, [X21 + 0x506]
	0x01CEC5BC MOV V11.16B, V0.16B
	0x01CEC5C0 MOV V12.16B, V1.16B
	0x01CEC5C4 MOV V13.16B, V2.16B
	0x01CEC5C8 CBNZ W8, 0x1CEC5E0
	0x01CEC5CC ADRP X0, 0x2261000
	0x01CEC5D0 LDR X0, [X0 + 0x488]
	0x01CEC5D4 BL 0x1B6E7F0
	0x01CEC5D8 MOVZ W8, 0x1
	0x01CEC5DC STRB W8, [X21 + 0x506]
	0x01CEC5E0 LDR X0, [X22]
	0x01CEC5E4 FSUB S11, S8, S11
	0x01CEC5E8 FSUB S9, S9, S12
	0x01CEC5EC FSUB S8, S10, S13
	0x01CEC5F0 LDR W8, [X0 + 0xE0]
	0x01CEC5F4 CBNZ W8, 0x1CEC5FC
	0x01CEC5F8 BL 0x1B6E8F8
	0x01CEC5FC FMUL S0, S11, S11
	0x01CEC600 FMUL S1, S9, S9
	0x01CEC604 FADD S0, S0, S1
	0x01CEC608 FMUL S1, S8, S8
	0x01CEC60C FADD S0, S1, S0
	0x01CEC610 FSQRT S0, S0
	0x01CEC614 ADD X0, X31, 0x3C
	0x01CEC618 MOV X1, X31
	0x01CEC61C BL 0x31F935C
	0x01CEC620 LDP X20, X19, [X31 + 0x50]
	0x01CEC624 LDP X22, X21, [X31 + 0x40]
	0x01CEC628 LDR X30, [X31 + 0x30]
	0x01CEC62C LDP D9, D8, [X31 + 0x20]
	0x01CEC630 LDP D11, D10, [X31 + 0x10]
	0x01CEC634 LDP D13, D12, [X31], #0x60
	0x01CEC638 RET
	0x01CEC63C BL 0x1B6EA1C
	0x01CEC640 STP X30, X19, [X31 - 0x10]!
	0x01CEC644 MOV W1, W31
	0x01CEC648 MOV X19, X0
	0x01CEC64C BL 0x1CE8140
	0x01CEC650 LDR W1, [X19 + 0x174]
	0x01CEC654 MOV X0, X19
	0x01CEC658 LDP X30, X19, [X31], #0x10
	0x01CEC65C B 0x1CEAAC0
	0x01CEC660 STP X30, X19, [X31 - 0x10]!
	0x01CEC664 MOV X19, X0
	0x01CEC668 BL 0x1CE81EC
	0x01CEC66C MOV X0, X19
	0x01CEC670 BL 0x1CEAA60
	0x01CEC674 STR W0, [X19 + 0x174]
	0x01CEC678 LDP X30, X19, [X31], #0x10
	0x01CEC67C RET
	0x01CEC680 STP X30, X21, [X31 - 0x20]!
	0x01CEC684 STP X20, X19, [X31 + 0x10]
	0x01CEC688 ADRP X20, 0x2537000
	0x01CEC68C ADRP X21, 0x2263000
	0x01CEC690 LDRB W8, [X20 + 0x694]
	0x01CEC694 LDR X21, [X21 + 0xE08]
	0x01CEC698 MOV X19, X0
	0x01CEC69C TBNZ X8, 0x0, 0x1CEC6B4
	0x01CEC6A0 ADRP X0, 0x2263000
	0x01CEC6A4 LDR X0, [X0 + 0xE08]
	0x01CEC6A8 BL 0x1B6E7F0
	0x01CEC6AC MOVZ W8, 0x1
	0x01CEC6B0 STRB W8, [X20 + 0x694]
	0x01CEC6B4 LDR X0, [X21]
	0x01CEC6B8 LDR W8, [X0 + 0xE0]
	0x01CEC6BC CBNZ W8, 0x1CEC6C4
	0x01CEC6C0 BL 0x1B6E8F8
	0x01CEC6C4 ADRP X8, 0xFFFFFFFFFEDC1000
	0x01CEC6C8 LDR V0, [X8 + 0xAE0]
	0x01CEC6CC MOVZ W8, 0x1
	0x01CEC6D0 MOVZ W9, 0x3F800000
	0x01CEC6D4 STR W31, [X19 + 0x48]
	0x01CEC6D8 STRB W8, [X19 + 0x4C]
	0x01CEC6DC STR D0, [X19 + 0x40]
	0x01CEC6E0 STR W9, [X19 + 0x80]
	0x01CEC6E4 MOV X0, X19
	0x01CEC6E8 LDP X20, X19, [X31 + 0x10]
	0x01CEC6EC MOV X1, X31
	0x01CEC6F0 LDP X30, X21, [X31], #0x20
	0x01CEC6F4 B 0x3A9EEE4

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X22
	012 Move [X31+104], X21
	013 Move [X31+112], X20
	014 Move [X31+120], X19
	015 Move X20, 0x2538000
	016 Move W8, [X20+1678]
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {36}
	022 Move X0, 0x2264000
	023 Move X0, [X0+3856]
	024 Call 0x1B6F7F0
	025 Move X0, 0x2264000
	026 Move X0, [X0+3864]
	027 Call 0x1B6F7F0
	028 Move X0, 0x2264000
	029 Move X0, [X0+3568]
	030 Call 0x1B6F7F0
	031 Move X0, 0x2265000
	032 Move X0, [X0+952]
	033 Call 0x1B6F7F0
	034 Move W8, 1
	035 Move [X20+1678], W8
	036 Add X20, X19, 392
	037 Move X0, X19
	038 Move X1, X20
	039 Move [X31+88], X31
	040 Call MobDetectionUtil.TryGetPlayersBySound, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {231}
	045 Move X8, 0x2264000
	046 Move X8, [X8+3856]
	047 Move X22, 0x2265000
	048 Move X21, [X19+392]
	049 Move X0, [X8]
	050 Move X22, [X22+952]
	051 Call 0x1B6FA0C
	052 Move X2, [X22]
	053 Move X1, X19
	054 Move X3, X31
	055 Move X22, X0
	056 Call Comparison`1<Object>..ctor, X0, X1, X2
	057 Compare X21, 0
	058 JumpIfEqual {391}
	059 Move X8, 0x2264000
	060 Move X8, [X8+3864]
	061 Move X0, X21
	062 Move X1, X22
	063 Move X2, [X8]
	064 Call List`1<Object>.Sort, X0, X1
	065 Move X0, [X20]
	066 Compare X0, 0
	067 JumpIfEqual {391}
	068 Move X8, 0x2264000
	069 Move X8, [X8+3568]
	070 Move W1, W31
	071 Move X2, [X8]
	072 Call List`1<Object>.get_Item, X0, X1
	073 Compare X0, 0
	074 JumpIfEqual {391}
	075 Move X1, X31
	076 Call Component.get_transform, X0
	077 Compare X0, 0
	078 JumpIfEqual {391}
	079 Move X1, X31
	080 Call Transform.get_position, X0
	081 Move X20, 0x2538000
	082 Move V11, [X19+440]
	083 Move V13, [X19+444]
	084 Move W8, [X20+1089]
	085 Move V14, [X19+448]
	086 Move V8, V0
	087 Move V9, V1
	088 Move V10, V2
	089 Compare W8, 0
	090 JumpIfNotEqual {96}
	091 Move X0, 0x2262000
	092 Move X0, [X0+1160]
	093 Call 0x1B6F7F0
	094 Move W8, 1
	095 Move [X20+1089], W8
	096 Move X21, 0x2262000
	097 Move X21, [X21+1160]
	098 Subtract S12, S8, S11
	099 Subtract S9, S9, S13
	100 Subtract S8, S10, S14
	101 Move X0, [X21]
	102 Move W8, [X0+224]
	103 Compare W8, 0
	104 JumpIfNotEqual {106}
	105 Call 0x1B6F8F8
	106 Move X8, -19144704
	107 Multiply S0, S12, S12
	108 Multiply S1, S9, S9
	109 Move V11, [X8+2916]
	110 Add S0, S0, S1
	111 Multiply S1, S8, S8
	112 Add S0, S1, S0
	113 NotImplemented "Instruction FSQRT not yet implemented."
	114 NotImplemented "Instruction FCMP not yet implemented."
	115 NotImplemented "Instruction FDIV not yet implemented."
	116 NotImplemented "Instruction FDIV not yet implemented."
	117 NotImplemented "Instruction FDIV not yet implemented."
	118 Move X22, 0x2538000
	119 Move W8, [X22+1087]
	120 Compare W8, 0
	121 JumpIfNotEqual {127}
	122 Move X0, 0x2262000
	123 Move X0, [X0+1152]
	124 Call 0x1B6F7F0
	125 Move W8, 1
	126 Move [X22+1087], W8
	127 Move X8, 0x2262000
	128 Move X8, [X8+1152]
	129 Move X8, [X8]
	130 Move X8, [X8+184]
	131 Move S0, [X8]
	132 Move S1, [X8+4]
	133 Move V2, [X8+8]
	134 Move X8, [X19+472]
	135 Compare X8, 0
	136 JumpIfEqual {391}
	137 Move V4, [X19+452]
	138 Move V5, [X19+456]
	139 Move V3, [X19+460]
	140 Move W9, [X8+24]
	141 Multiply S0, S0, S4
	142 Multiply S1, S1, S5
	143 Multiply S2, S2, S3
	144 Add S0, S0, S1
	145 Add S0, S2, S0
	146 NotImplemented "Instruction FCMP not yet implemented."
	147 Compare W9, 0
	148 JumpIfEqual {392}
	149 Add X9, X8, 32
	150 Add X10, X8, 36
	151 Add X8, X8, 40
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Add X9, X8, 44
	154 Add X10, X8, 48
	155 Add X8, X8, 52
	156 Move V8, [X8]
	157 Move V9, [X10]
	158 Move V10, [X9]
	159 Move V12, [X19+440]
	160 Move V13, [X19+444]
	161 Move W8, [X20+1089]
	162 Move V15, [X19+448]
	163 Compare W8, 0
	164 JumpIfNotEqual {170}
	165 Move X0, 0x2262000
	166 Move X0, [X0+1160]
	167 Call 0x1B6F7F0
	168 Move W8, 1
	169 Move [X20+1089], W8
	170 Move X0, [X21]
	171 Subtract S14, S10, S12
	172 Subtract S13, S9, S13
	173 Subtract S12, S8, S15
	174 Move W8, [X0+224]
	175 Compare W8, 0
	176 JumpIfNotEqual {178}
	177 Call 0x1B6F8F8
	178 Multiply S0, S14, S14
	179 Multiply S1, S13, S13
	180 Add S0, S0, S1
	181 Multiply S1, S12, S12
	182 Add S0, S1, S0
	183 NotImplemented "Instruction FSQRT not yet implemented."
	184 NotImplemented "Instruction FCMP not yet implemented."
	185 NotImplemented "Instruction FDIV not yet implemented."
	186 NotImplemented "Instruction FDIV not yet implemented."
	187 NotImplemented "Instruction FDIV not yet implemented."
	188 Move X20, 0x2538000
	189 Move W8, [X20+1087]
	190 Compare W8, 0
	191 JumpIfNotEqual {197}
	192 Move X0, 0x2262000
	193 Move X0, [X0+1152]
	194 Call 0x1B6F7F0
	195 Move W8, 1
	196 Move [X20+1087], W8
	197 Move X8, 0x2262000
	198 Move X8, [X8+1152]
	199 Move X8, [X8]
	200 Move X8, [X8+184]
	201 Move S0, [X8]
	202 Move S1, [X8+4]
	203 Move V2, [X8+8]
	204 Move X0, [X19+200]
	205 Move [X19+400], S0
	206 Move [X19+404], S1
	207 Move [X19+408], S2
	208 Compare X0, 0
	209 JumpIfEqual {391}
	210 Move X1, X31
	211 Call NavMeshAgent.get_destination, X0
	212 Move X8, -19144704
	213 Subtract S0, S0, S10
	214 Subtract S1, S1, S9
	215 Move V3, [X8+2356]
	216 Subtract S2, S2, S8
	217 Multiply S0, S0, S0
	218 Multiply S1, S1, S1
	219 Add S0, S0, S1
	220 Multiply S1, S2, S2
	221 Add S0, S1, S0
	222 NotImplemented "Instruction FCMP not yet implemented."
	223 Move X0, [X19+200]
	224 Compare X0, 0
	225 JumpIfEqual {391}
	226 Move V0, V10
	227 Move V1, V9
	228 Move V2, V8
	229 Move X1, X31
	230 Call NavMeshAgent.SetDestination, X0, X1
	231 Move V8, [X19+400]
	232 Move V9, [X19+404]
	233 Move V10, [X19+408]
	234 Move X0, X19
	235 Move X1, X31
	236 Call Component.get_transform, X0
	237 Compare X0, 0
	238 JumpIfEqual {391}
	239 Move X1, X31
	240 Call Transform.get_forward, X0
	241 Move X8, -19144704
	242 Move V3, [X8+2648]
	243 Multiply S0, S8, S0
	244 Multiply S1, S9, S1
	245 Add S0, S0, S1
	246 Multiply S1, S10, S2
	247 Add S0, S1, S0
	248 NotImplemented "Instruction FCMP not yet implemented."
	249 Move X8, [X19+184]
	250 Compare X8, 0
	251 JumpIfEqual {391}
	252 Move V11, [X8+64]
	253 Move X0, X19
	254 Move X1, X31
	255 Call Component.get_transform, X0
	256 Compare X0, 0
	257 JumpIfEqual {391}
	258 Move X1, X31
	259 Move [X31+12], S11
	260 Call Transform.get_forward, X0
	261 Move X20, 0x2538000
	262 Move W8, [X20+1111]
	263 Move V11, V0
	264 Move V12, V1
	265 Move V13, V2
	266 Compare W8, 0
	267 JumpIfNotEqual {273}
	268 Move X0, 0x2262000
	269 Move X0, [X0+1160]
	270 Call 0x1B6F7F0
	271 Move W8, 1
	272 Move [X20+1111], W8
	273 Move X20, 0x2262000
	274 Move X20, [X20+1160]
	275 Multiply S0, S8, S8
	276 Multiply S1, S9, S9
	277 Add S0, S0, S1
	278 Move X0, [X20]
	279 Multiply S1, S10, S10
	280 Add S14, S1, S0
	281 Multiply S0, S11, S11
	282 Move W8, [X0+224]
	283 Multiply S1, S12, S12
	284 Add S0, S0, S1
	285 Multiply S1, S13, S13
	286 Add S15, S1, S0
	287 Compare W8, 0
	288 JumpIfNotEqual {290}
	289 Call 0x1B6F8F8
	290 Move X8, -19144704
	291 Move V1, [X8+2532]
	292 Multiply S0, S14, S15
	293 NotImplemented "Instruction FSQRT not yet implemented."
	294 Move S14, W31
	295 NotImplemented "Instruction FCMP not yet implemented."
	296 Move X0, [X20]
	297 Multiply S1, S8, S11
	298 Multiply S2, S9, S12
	299 Multiply S3, S10, S13
	300 Add S1, S1, S2
	301 Add S1, S3, S1
	302 Move W8, [X0+224]
	303 NotImplemented "Instruction FDIV not yet implemented."
	304 Move S1, 1
	305 Move S2, -1
	306 NotImplemented "Instruction FMIN not yet implemented."
	307 NotImplemented "Instruction FCMP not yet implemented."
	308 NotImplemented "Instruction FCSEL not yet implemented."
	309 Compare W8, 0
	310 JumpIfNotEqual {312}
	311 Call 0x1B6F8F8
	312 NotImplemented "Instruction FCVT not yet implemented."
	313 Call 0x3D1A890
	314 Move X8, -19144704
	315 Move V1, [X8+3612]
	316 NotImplemented "Instruction INVALID not yet implemented."
	317 Multiply S14, S0, S1
	318 Move X0, X19
	319 Move X1, X31
	320 Call Component.get_transform, X0
	321 Move X20, X0
	322 Move X0, X19
	323 Move X1, X31
	324 Call Component.get_transform, X0
	325 Compare X0, 0
	326 JumpIfEqual {391}
	327 Move X1, X31
	328 Call Transform.get_rotation, X0
	329 Move V11, V0
	330 Move V12, V1
	331 Move V13, V2
	332 Move V0, V8
	333 Move V1, V9
	334 Move V2, V10
	335 Move X0, X31
	336 Move [X31+8], S3
	337 Call Quaternion.LookRotation, X0
	338 Move X0, [X19+56]
	339 Compare X0, 0
	340 JumpIfEqual {391}
	341 Move V8, V0
	342 Move V0, [X31+12]
	343 Move X1, X31
	344 Move V9, V1
	345 Move V10, V2
	346 Move V15, V3
	347 NotImplemented "Instruction FDIV not yet implemented."
	348 Call NetworkRunner.get_DeltaTime, X0
	349 Move V3, [X31+8]
	350 Multiply S0, S14, S0
	351 Move [X31], S0
	352 Move V0, V11
	353 Move V1, V12
	354 Move V2, V13
	355 Move V4, V8
	356 Move V5, V9
	357 Move V6, V10
	358 Move V7, V15
	359 Move X0, X31
	360 Call Quaternion.Slerp, X0, X1, V0
	361 Compare X20, 0
	362 JumpIfEqual {391}
	363 Move X0, X20
	364 Move X1, X31
	365 Call Transform.set_rotation, X0, X1
	366 Add X1, X31, 88
	367 Move X0, X19
	368 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	369 Move TEMP, X0
	370 And TEMP, TEMP, 1
	371 Compare TEMP, 1
	372 JumpIfNotEqual {376}
	373 Move X1, [X31+88]
	374 Move X0, X19
	375 Call LongAisleController.SetPreparing, X0, X1
	376 Move X20, [X31+112]
	377 Move X19, [X31+120]
	378 Move X22, [X31+96]
	379 Move X21, [X31+104]
	380 Move X30, [X31+80]
	381 Move D9, [X31+64]
	382 Move D8, [X31+72]
	383 Move D11, [X31+48]
	384 Move D10, [X31+56]
	385 Move D13, [X31+32]
	386 Move D12, [X31+40]
	387 Move D15, [X31+16]
	388 Move D14, [X31+24]
	389 Add X31, X31, 128
	390 Return 
	391 Call 0x1B6FA1C
	392 Call 0x1B6FA24

Method: System.Void SetPreparing(System.Collections.Generic.List`1<AnimalCompany.NetPlayer> playersDetected)

Disassembly:
	0x01CECF84 MOV X1, X31
	0x01CECF88 BL 0x3AECD78
	0x01CECF8C TBZ X0, 0x0, 0x1CECFE8
	0x01CECF90 ADRP X21, 0x2537000
	0x01CECF94 LDRB W8, [X21 + 0x50E]
	0x01CECF98 LDR X20, [X19 + 0x30]
	0x01CECF9C CBNZ W8, 0x1CECFB4
	0x01CECFA0 ADRP X0, 0x2261000
	0x01CECFA4 LDR X0, [X0 + 0x480]
	0x01CECFA8 BL 0x1B6E7F0
	0x01CECFAC MOVZ W8, 0x1
	0x01CECFB0 STRB W8, [X21 + 0x50E]
	0x01CECFB4 CBZ X20, 0x1CED250
	0x01CECFB8 ADRP X8, 0x2261000
	0x01CECFBC LDR X8, [X8 + 0x480]
	0x01CECFC0 MOV X0, X20
	0x01CECFC4 MOV X1, X31
	0x01CECFC8 LDR X8, [X8]
	0x01CECFCC LDR X8, [X8 + 0xB8]
	0x01CECFD0 LDP S1, S0, [X8 + 0x34]
	0x01CECFD4 LDR V3, [X8 + 0x30]
	0x01CECFD8 FMUL S2, S8, S0
	0x01CECFDC FMUL S1, S8, S1
	0x01CECFE0 FMUL S0, S8, S3
	0x01CECFE4 BL 0x3A4AABC
	0x01CECFE8 MOVZ W0, 0x64
	0x01CECFEC MOV X1, X31
	0x01CECFF0 BL 0x3AECD78
	0x01CECFF4 TBZ X0, 0x0, 0x1CED050
	0x01CECFF8 ADRP X21, 0x2537000
	0x01CECFFC LDRB W8, [X21 + 0x511]
	0x01CED000 LDR X20, [X19 + 0x30]
	0x01CED004 CBNZ W8, 0x1CED01C
	0x01CED008 ADRP X0, 0x2260000
	0x01CED00C LDR X0, [X0 + 0x480]
	0x01CED010 BL 0x1B6E7F0
	0x01CED014 MOVZ W8, 0x1
	0x01CED018 STRB W8, [X21 + 0x511]
	0x01CED01C CBZ X20, 0x1CED250
	0x01CED020 ADRP X8, 0x2260000
	0x01CED024 LDR X8, [X8 + 0x480]
	0x01CED028 MOV X0, X20
	0x01CED02C MOV X1, X31
	0x01CED030 LDR X8, [X8]
	0x01CED034 LDR X8, [X8 + 0xB8]
	0x01CED038 LDP S1, S0, [X8 + 0x40]
	0x01CED03C LDR V3, [X8 + 0x3C]
	0x01CED040 FMUL S2, S8, S0
	0x01CED044 FMUL S1, S8, S1
	0x01CED048 FMUL S0, S8, S3
	0x01CED04C BL 0x3A4AABC
	0x01CED050 MOVZ W0, 0x20
	0x01CED054 MOV X1, X31
	0x01CED058 BL 0x3AECDF0
	0x01CED05C TBZ X0, 0x0, 0x1CED088
	0x01CED060 LDR X20, [X19 + 0x30]
	0x01CED064 CBZ X20, 0x1CED250
	0x01CED068 MOV X0, X20
	0x01CED06C MOV X1, X31
	0x01CED070 BL 0x3A4AB54
	0x01CED074 ORN W8, W31, W0, 0x0
	0x01CED078 AND W1, W8, 0x1
	0x01CED07C MOV X0, X20
	0x01CED080 MOV X2, X31
	0x01CED084 BL 0x3A4AB90
	0x01CED088 MOV X0, X19
	0x01CED08C MOV X1, X31
	0x01CED090 BL 0x3A9B084
	0x01CED094 CBZ X0, 0x1CED250
	0x01CED098 MOV X1, X31
	0x01CED09C BL 0x3AA7658
	0x01CED0A0 LDR X0, [X19 + 0x20]
	0x01CED0A4 CBZ X0, 0x1CED250
	0x01CED0A8 MOV X1, X31
	0x01CED0AC MOV V8.16B, V0.16B
	0x01CED0B0 MOV V9.16B, V1.16B
	0x01CED0B4 MOV V10.16B, V2.16B
	0x01CED0B8 BL 0x3AA7658

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x2538000
	008 Move X23, 0x2264000
	009 Move X21, 0x2265000
	010 Move W8, [X22+1679]
	011 Move X23, [X23+3856]
	012 Move X21, [X21+960]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0x2264000
	020 Move X0, [X0+3856]
	021 Call 0x1B6F7F0
	022 Move X0, 0x2264000
	023 Move X0, [X0+3864]
	024 Call 0x1B6F7F0
	025 Move X0, 0x2264000
	026 Move X0, [X0+3568]
	027 Call 0x1B6F7F0
	028 Move X0, 0x2265000
	029 Move X0, [X0+960]
	030 Call 0x1B6F7F0
	031 Move W8, 1
	032 Move [X22+1679], W8
	033 Move X0, [X23]
	034 Call 0x1B6FA0C
	035 Move X2, [X21]
	036 Move X1, X19
	037 Move X3, X31
	038 Move X21, X0
	039 Call Comparison`1<Object>..ctor, X0, X1, X2
	040 Compare X20, 0
	041 JumpIfEqual {92}
	042 Move X8, 0x2263000
	043 Move X8, [X8+3864]
	044 Move X22, 0x2263000
	045 Move X0, X20
	046 Move X1, X21
	047 Move X2, [X8]
	048 Move X22, [X22+3568]
	049 Call List`1<Object>.Sort, X0, X1
	050 Move X2, [X22]
	051 Move X0, X20
	052 Move W1, W31
	053 Call List`1<Object>.get_Item, X0, X1
	054 Move X8, [X19]
	055 Move X1, X0
	056 Move X0, X19
	057 Move X9, [X8+824]
	058 Move X2, [X8+832]
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move W1, 2
	061 Move X0, X19
	062 Call LongAisleController.set_phase, X0, X1
	063 Move X0, [X19+200]
	064 Move [X19+376], W31
	065 Compare X0, 0
	066 JumpIfEqual {92}
	067 Move W1, 1
	068 Move X2, X31
	069 Call NavMeshAgent.set_isStopped, X0, X1
	070 Move X0, X19
	071 Call LongAisleController.GetAisleData, X0
	072 Move X8, [X19+184]
	073 Compare X8, 0
	074 JumpIfEqual {92}
	075 Move X0, [X19+208]
	076 Compare X0, 0
	077 JumpIfEqual {92}
	078 Move X19, [X8+160]
	079 Move X1, X31
	080 Call Transform.get_position, X0
	081 Move X0, X19
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X22, [X31+16]
	085 Move X21, [X31+24]
	086 Move S3, 1
	087 Move X1, X31
	088 Move X30, [X31+48]
	089 Move X23, [X31+56]
	090 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	091 Return 
	092 Call 0x1B6FA1C

Method: System.Void UpdatePreparing()

Disassembly:
	0x01CEC6F8 LDR W1, [X0 + 0x18]
	0x01CEC6FC B 0x1CEC700
	0x01CEC700 STR X30, [X31 - 0x50]!
	0x01CEC704 STP X26, X25, [X31 + 0x10]
	0x01CEC708 STP X24, X23, [X31 + 0x20]
	0x01CEC70C STP X22, X21, [X31 + 0x30]
	0x01CEC710 STP X20, X19, [X31 + 0x40]
	0x01CEC714 ADRP X22, 0x2537000
	0x01CEC718 ADRP X23, 0x2264000
	0x01CEC71C ADRP X21, 0x2264000
	0x01CEC720 ADRP X25, 0x2264000
	0x01CEC724 LDRB W8, [X22 + 0x695]
	0x01CEC728 LDR X23, [X23 + 0x3C8]
	0x01CEC72C LDR X21, [X21 + 0x3D0]
	0x01CEC730 LDR X25, [X25 + 0x3D8]
	0x01CEC734 MOV W19, W1
	0x01CEC738 MOV X20, X0
	0x01CEC73C TBNZ X8, 0x0, 0x1CEC79C
	0x01CEC740 ADRP X0, 0x2264000
	0x01CEC744 LDR X0, [X0 + 0x3E0]
	0x01CEC748 BL 0x1B6E7F0
	0x01CEC74C ADRP X0, 0x2264000
	0x01CEC750 LDR X0, [X0 + 0x3E8]
	0x01CEC754 BL 0x1B6E7F0
	0x01CEC758 ADRP X0, 0x2264000
	0x01CEC75C LDR X0, [X0 + 0x3F0]
	0x01CEC760 BL 0x1B6E7F0
	0x01CEC764 ADRP X0, 0x2264000
	0x01CEC768 LDR X0, [X0 + 0x3D0]
	0x01CEC76C BL 0x1B6E7F0
	0x01CEC770 ADRP X0, 0x2264000
	0x01CEC774 LDR X0, [X0 + 0x3C8]
	0x01CEC778 BL 0x1B6E7F0
	0x01CEC77C ADRP X0, 0x2264000
	0x01CEC780 LDR X0, [X0 + 0x3F8]
	0x01CEC784 BL 0x1B6E7F0
	0x01CEC788 ADRP X0, 0x2264000
	0x01CEC78C LDR X0, [X0 + 0x3D8]
	0x01CEC790 BL 0x1B6E7F0
	0x01CEC794 MOVZ W8, 0x1
	0x01CEC798 STRB W8, [X22 + 0x695]
	0x01CEC79C LDR X0, [X23]
	0x01CEC7A0 BL 0x1B6EA0C
	0x01CEC7A4 LDR X1, [X21]
	0x01CEC7A8 MOV X21, X0
	0x01CEC7AC BL 0x2E45D4C
	0x01CEC7B0 LDR X0, [X25]
	0x01CEC7B4 LDR X22, [X20 + 0x20]
	0x01CEC7B8 LDR W8, [X0 + 0xE0]
	0x01CEC7BC CBNZ W8, 0x1CEC7C8
	0x01CEC7C0 BL 0x1B6E8F8
	0x01CEC7C4 LDR X0, [X25]
	0x01CEC7C8 LDR X8, [X0 + 0xB8]
	0x01CEC7CC ADRP X26, 0x2264000
	0x01CEC7D0 LDR X23, [X8 + 0x8]
	0x01CEC7D4 LDR X26, [X26 + 0x3E0]
	0x01CEC7D8 CBNZ X23, 0x1CEC82C
	0x01CEC7DC LDR W8, [X0 + 0xE0]
	0x01CEC7E0 CBNZ W8, 0x1CEC7EC
	0x01CEC7E4 BL 0x1B6E8F8
	0x01CEC7E8 LDR X0, [X25]
	0x01CEC7EC ADRP X9, 0x2264000
	0x01CEC7F0 LDR X8, [X0 + 0xB8]
	0x01CEC7F4 LDR X9, [X9 + 0x3E8]
	0x01CEC7F8 LDR X24, [X8]
	0x01CEC7FC LDR X0, [X9]
	0x01CEC800 BL 0x1B6EA0C
	0x01CEC804 ADRP X8, 0x2264000
	0x01CEC808 LDR X8, [X8 + 0x3F8]
	0x01CEC80C MOV X1, X24
	0x01CEC810 MOV X3, X31
	0x01CEC814 MOV X23, X0
	0x01CEC818 LDR X2, [X8]
	0x01CEC81C BL 0x2B7A3E4
	0x01CEC820 LDR X8, [X25]
	0x01CEC824 LDR X8, [X8 + 0xB8]
	0x01CEC828 STR X23, [X8 + 0x8]
	0x01CEC82C LDR X2, [X26]
	0x01CEC830 MOV X0, X22
	0x01CEC834 MOV X1, X23
	0x01CEC838 BL 0x20C0008
	0x01CEC83C CMP W19, 0x1
	0x01CEC840 B.LT 0x1CEC918
	0x01CEC844 ADRP X24, 0x2264000
	0x01CEC848 LDR X24, [X24 + 0x3F0]
	0x01CEC84C MOV W23, W31
	0x01CEC850 ADD W22, W0, 0x1
	0x01CEC854 MOV W0, W31
	0x01CEC858 MOV W1, W22
	0x01CEC85C MOV X2, X31
	0x01CEC860 BL 0x3A98D10
	0x01CEC864 LDR X8, [X20 + 0x20]
	0x01CEC868 CBZ X8, 0x1CEC934
	0x01CEC86C LDR W9, [X8 + 0x18]
	0x01CEC870 CMP W9, 0x1
	0x01CEC874 B.LT 0x1CEC90C
	0x01CEC878 MOV W10, W31
	0x01CEC87C MOV W11, W31
	0x01CEC880 CMP W10, W9
	0x01CEC884 B.CS 0x1CEC938
	0x01CEC888 ADD X12, X8, W10, 0x3, SXTW
	0x01CEC88C LDR X12, [X12 + 0x20]
	0x01CEC890 CBZ X12, 0x1CEC934
	0x01CEC894 LDR W13, [X12 + 0x18]
	0x01CEC898 ADD W11, W13, W11
	0x01CEC89C CMP W0, W11
	0x01CEC8A0 B.LE 0x1CEC8B4
	0x01CEC8A4 ADD W10, W10, 0x1
	0x01CEC8A8 CMP W10, W9
	0x01CEC8AC B.LT 0x1CEC880
	0x01CEC8B0 B 0x1CEC90C
	0x01CEC8B4 CBZ X21, 0x1CEC934
	0x01CEC8B8 LDR W10, [X21 + 0x1C]
	0x01CEC8BC LDR X1, [X12 + 0x10]
	0x01CEC8C0 LDR X8, [X21 + 0x10]
	0x01CEC8C4 LDR X9, [X24]
	0x01CEC8C8 ADD W10, W10, 0x1
	0x01CEC8CC STR W10, [X21 + 0x1C]
	0x01CEC8D0 CBZ X8, 0x1CEC934
	0x01CEC8D4 LDRSW X10, [X21 + 0x18]
	0x01CEC8D8 LDR W11, [X8 + 0x18]
	0x01CEC8DC CMP W10, W11
	0x01CEC8E0 B.CS 0x1CEC8F8
	0x01CEC8E4 ADD W9, W10, 0x1
	0x01CEC8E8 ADD X8, X8, X10, 0x3, LSL
	0x01CEC8EC STR W9, [X21 + 0x18]
	0x01CEC8F0 STR X1, [X8 + 0x20]
	0x01CEC8F4 B 0x1CEC90C
	0x01CEC8F8 LDR X8, [X9 + 0x20]
	0x01CEC8FC MOV X0, X21
	0x01CEC900 LDR X8, [X8 + 0xC0]
	0x01CEC904 LDR X2, [X8 + 0x70]
	0x01CEC908 BL 0x2E46518
	0x01CEC90C ADD W23, W23, 0x1
	0x01CEC910 CMP W23, W19
	0x01CEC914 B.NE 0x1CEC854
	0x01CEC918 MOV X0, X21
	0x01CEC91C LDP X20, X19, [X31 + 0x40]
	0x01CEC920 LDP X22, X21, [X31 + 0x30]
	0x01CEC924 LDP X24, X23, [X31 + 0x20]
	0x01CEC928 LDP X26, X25, [X31 + 0x10]
	0x01CEC92C LDR X30, [X31], #0x50
	0x01CEC930 RET
	0x01CEC934 BL 0x1B6EA1C
	0x01CEC938 BL 0x1B6EA24
	0x01CEC93C STP X29, X30, [X31 - 0x60]!
	0x01CEC940 STP X28, X27, [X31 + 0x10]
	0x01CEC944 STP X26, X25, [X31 + 0x20]
	0x01CEC948 STP X24, X23, [X31 + 0x30]
	0x01CEC94C STP X22, X21, [X31 + 0x40]
	0x01CEC950 STP X20, X19, [X31 + 0x50]
	0x01CEC954 ADRP X22, 0x2537000
	0x01CEC958 ADRP X23, 0x2264000
	0x01CEC95C ADRP X21, 0x2264000
	0x01CEC960 LDRB W8, [X22 + 0x696]
	0x01CEC964 LDR X23, [X23 + 0x3C8]
	0x01CEC968 LDR X21, [X21 + 0x3D0]
	0x01CEC96C MOV W19, W1
	0x01CEC970 MOV X20, X0
	0x01CEC974 TBNZ X8, 0x0, 0x1CEC9EC
	0x01CEC978 ADRP X0, 0x2264000
	0x01CEC97C LDR X0, [X0 + 0x400]
	0x01CEC980 BL 0x1B6E7F0
	0x01CEC984 ADRP X0, 0x2264000
	0x01CEC988 LDR X0, [X0 + 0x3E0]
	0x01CEC98C BL 0x1B6E7F0
	0x01CEC990 ADRP X0, 0x2264000
	0x01CEC994 LDR X0, [X0 + 0x3E8]
	0x01CEC998 BL 0x1B6E7F0
	0x01CEC99C ADRP X0, 0x2264000
	0x01CEC9A0 LDR X0, [X0 + 0x3F0]
	0x01CEC9A4 BL 0x1B6E7F0
	0x01CEC9A8 ADRP X0, 0x2264000
	0x01CEC9AC LDR X0, [X0 + 0x3D0]
	0x01CEC9B0 BL 0x1B6E7F0
	0x01CEC9B4 ADRP X0, 0x2264000
	0x01CEC9B8 LDR X0, [X0 + 0x3C8]
	0x01CEC9BC BL 0x1B6E7F0
	0x01CEC9C0 ADRP X0, 0x2264000
	0x01CEC9C4 LDR X0, [X0 + 0x408]
	0x01CEC9C8 BL 0x1B6E7F0
	0x01CEC9CC ADRP X0, 0x2264000
	0x01CEC9D0 LDR X0, [X0 + 0x410]
	0x01CEC9D4 BL 0x1B6E7F0
	0x01CEC9D8 ADRP X0, 0x2264000
	0x01CEC9DC LDR X0, [X0 + 0x3D8]
	0x01CEC9E0 BL 0x1B6E7F0
	0x01CEC9E4 MOVZ W8, 0x1
	0x01CEC9E8 STRB W8, [X22 + 0x696]
	0x01CEC9EC LDR X0, [X23]
	0x01CEC9F0 BL 0x1B6EA0C
	0x01CEC9F4 LDR X1, [X21]
	0x01CEC9F8 MOV X21, X0
	0x01CEC9FC BL 0x2E45D4C
	0x01CECA00 LDR X8, [X20 + 0x20]
	0x01CECA04 CBZ X8, 0x1CECCFC
	0x01CECA08 ADRP X9, 0x2264000
	0x01CECA0C LDR X9, [X9 + 0x400]
	0x01CECA10 LDR W1, [X8 + 0x18]
	0x01CECA14 ADRP X26, 0x2264000
	0x01CECA18 LDR X0, [X9]
	0x01CECA1C LDR X26, [X26 + 0x3D8]
	0x01CECA20 BL 0x1B6E868
	0x01CECA24 LDR X8, [X26]
	0x01CECA28 LDR X23, [X20 + 0x20]
	0x01CECA2C MOV X22, X0
	0x01CECA30 LDR W9, [X8 + 0xE0]
	0x01CECA34 CBNZ W9, 0x1CECA44
	0x01CECA38 MOV X0, X8
	0x01CECA3C BL 0x1B6E8F8
	0x01CECA40 LDR X8, [X26]
	0x01CECA44 LDR X9, [X8 + 0xB8]
	0x01CECA48 ADRP X27, 0x2264000
	0x01CECA4C LDR X24, [X9 + 0x10]
	0x01CECA50 LDR X27, [X27 + 0x3E0]
	0x01CECA54 CBNZ X24, 0x1CECAAC
	0x01CECA58 LDR W9, [X8 + 0xE0]
	0x01CECA5C CBNZ W9, 0x1CECA6C
	0x01CECA60 MOV X0, X8
	0x01CECA64 BL 0x1B6E8F8
	0x01CECA68 LDR X8, [X26]
	0x01CECA6C LDR X8, [X8 + 0xB8]
	0x01CECA70 LDR X25, [X8]
	0x01CECA74 ADRP X8, 0x2264000
	0x01CECA78 LDR X8, [X8 + 0x3E8]
	0x01CECA7C LDR X0, [X8]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X19, X0
	015 Move X0, [X0+320]
	016 Compare X0, 0
	017 JumpIfEqual {257}
	018 Move X1, X31
	019 Call Component.get_transform, X0
	020 Compare X0, 0
	021 JumpIfEqual {257}
	022 Move X1, X31
	023 Call Transform.get_position, X0
	024 Move X0, X19
	025 Move X1, X31
	026 Move V8, V0
	027 Move V9, V1
	028 Move V10, V2
	029 Call Component.get_transform, X0
	030 Compare X0, 0
	031 JumpIfEqual {257}
	032 Move X1, X31
	033 Call Transform.get_position, X0
	034 Move X20, 0x2538000
	035 Move W8, [X20+1089]
	036 Move V11, V0
	037 Move V12, V1
	038 Move V13, V2
	039 Compare W8, 0
	040 JumpIfNotEqual {46}
	041 Move X0, 0x2262000
	042 Move X0, [X0+1160]
	043 Call 0x1B6F7F0
	044 Move W8, 1
	045 Move [X20+1089], W8
	046 Move X20, 0x2262000
	047 Move X20, [X20+1160]
	048 Subtract S11, S8, S11
	049 Subtract S9, S9, S12
	050 Subtract S8, S10, S13
	051 Move X0, [X20]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1B6F8F8
	056 Multiply S0, S11, S11
	057 Multiply S1, S9, S9
	058 Move X8, -19144704
	059 Add S0, S0, S1
	060 Move V1, [X8+2916]
	061 Multiply S2, S8, S8
	062 Add S0, S2, S0
	063 NotImplemented "Instruction FSQRT not yet implemented."
	064 NotImplemented "Instruction FCMP not yet implemented."
	065 NotImplemented "Instruction FDIV not yet implemented."
	066 NotImplemented "Instruction FDIV not yet implemented."
	067 NotImplemented "Instruction FDIV not yet implemented."
	068 Move X21, 0x2538000
	069 Move W8, [X21+1087]
	070 Compare W8, 0
	071 JumpIfNotEqual {77}
	072 Move X0, 0x2262000
	073 Move X0, [X0+1152]
	074 Call 0x1B6F7F0
	075 Move W8, 1
	076 Move [X21+1087], W8
	077 Move X8, 0x2262000
	078 Move X8, [X8+1152]
	079 Move X8, [X8]
	080 Move X8, [X8+184]
	081 Move S14, [X8]
	082 Move S12, [X8+4]
	083 Move V13, [X8+8]
	084 Move V0, [X19+452]
	085 Move V1, [X19+456]
	086 Move V2, [X19+460]
	087 Move X8, [X19+184]
	088 Multiply S3, S14, S0
	089 Multiply S4, S12, S1
	090 Add S3, S3, S4
	091 Multiply S4, S13, S2
	092 Add S3, S4, S3
	093 NotImplemented "Instruction FNEG not yet implemented."
	094 NotImplemented "Instruction FCMP not yet implemented."
	095 NotImplemented "Instruction FNEG not yet implemented."
	096 NotImplemented "Instruction FCSEL not yet implemented."
	097 NotImplemented "Instruction FNEG not yet implemented."
	098 NotImplemented "Instruction FCSEL not yet implemented."
	099 NotImplemented "Instruction FCSEL not yet implemented."
	100 Move [X19+412], S0
	101 Move [X19+416], S1
	102 Move [X19+420], S2
	103 Compare X8, 0
	104 JumpIfEqual {257}
	105 Move V8, [X8+64]
	106 Move X0, X19
	107 Move X1, X31
	108 Call Component.get_transform, X0
	109 Compare X0, 0
	110 JumpIfEqual {257}
	111 Move X1, X31
	112 Move [X31+12], S8
	113 Call Transform.get_forward, X0
	114 Move X21, 0x2538000
	115 Move W8, [X21+1111]
	116 Move V8, V0
	117 Move V9, V1
	118 Move V10, V2
	119 Compare W8, 0
	120 JumpIfNotEqual {126}
	121 Move X0, 0x2262000
	122 Move X0, [X0+1160]
	123 Call 0x1B6F7F0
	124 Move W8, 1
	125 Move [X21+1111], W8
	126 Move X0, [X20]
	127 Multiply S0, S14, S14
	128 Multiply S1, S12, S12
	129 Add S0, S0, S1
	130 Multiply S1, S13, S13
	131 Move W8, [X0+224]
	132 Add S11, S1, S0
	133 Multiply S0, S8, S8
	134 Multiply S1, S9, S9
	135 Add S0, S0, S1
	136 Multiply S1, S10, S10
	137 Add S15, S1, S0
	138 Compare W8, 0
	139 JumpIfNotEqual {141}
	140 Call 0x1B6F8F8
	141 Move X8, -19144704
	142 Move V1, [X8+2532]
	143 Multiply S0, S11, S15
	144 NotImplemented "Instruction FSQRT not yet implemented."
	145 Move S11, W31
	146 NotImplemented "Instruction FCMP not yet implemented."
	147 Move X0, [X20]
	148 Multiply S1, S14, S8
	149 Multiply S2, S12, S9
	150 Multiply S3, S13, S10
	151 Add S1, S1, S2
	152 Add S1, S3, S1
	153 Move W8, [X0+224]
	154 NotImplemented "Instruction FDIV not yet implemented."
	155 Move S1, 1
	156 Move S2, -1
	157 NotImplemented "Instruction FMIN not yet implemented."
	158 NotImplemented "Instruction FCMP not yet implemented."
	159 NotImplemented "Instruction FCSEL not yet implemented."
	160 Compare W8, 0
	161 JumpIfNotEqual {163}
	162 Call 0x1B6F8F8
	163 NotImplemented "Instruction FCVT not yet implemented."
	164 Call 0x3D1A890
	165 Move X8, -19144704
	166 Move V1, [X8+3612]
	167 NotImplemented "Instruction INVALID not yet implemented."
	168 Multiply S11, S0, S1
	169 Move X0, X19
	170 Move X1, X31
	171 Call Component.get_transform, X0
	172 Move X20, X0
	173 Move X0, X19
	174 Move X1, X31
	175 Call Component.get_transform, X0
	176 Compare X0, 0
	177 JumpIfEqual {257}
	178 Move X1, X31
	179 Call Transform.get_rotation, X0
	180 Move [X31+8], S0
	181 Move V9, V1
	182 Move V10, V2
	183 Move V0, [X19+412]
	184 Move V1, [X19+416]
	185 Move V2, [X19+420]
	186 Move X0, X31
	187 Move V8, V3
	188 Call Quaternion.LookRotation, X0
	189 Move X0, [X19+56]
	190 Compare X0, 0
	191 JumpIfEqual {257}
	192 Move V12, V0
	193 Move V0, [X31+12]
	194 Move X1, X31
	195 Move V13, V1
	196 Move V14, V2
	197 Move V15, V3
	198 NotImplemented "Instruction FDIV not yet implemented."
	199 Call NetworkRunner.get_DeltaTime, X0
	200 Multiply S0, S11, S0
	201 Move [X31], S0
	202 Move V0, [X31+8]
	203 Move V1, V9
	204 Move V2, V10
	205 Move V3, V8
	206 Move V4, V12
	207 Move V5, V13
	208 Move V6, V14
	209 Move V7, V15
	210 Move X0, X31
	211 Call Quaternion.Slerp, X0, X1, V0
	212 Compare X20, 0
	213 JumpIfEqual {257}
	214 Move X0, X20
	215 Move X1, X31
	216 Call Transform.set_rotation, X0, X1
	217 Move V8, [X19+376]
	218 Move S0, 1.5
	219 NotImplemented "Instruction FCMP not yet implemented."
	220 Move X0, [X19+56]
	221 Compare X0, 0
	222 JumpIfEqual {257}
	223 Move X1, X31
	224 Call NetworkRunner.get_DeltaTime, X0
	225 Add S0, S8, S0
	226 Move [X19+376], S0
	227 Move X20, [X31+96]
	228 Move X19, [X31+104]
	229 Move X30, [X31+80]
	230 Move X21, [X31+88]
	231 Move D9, [X31+64]
	232 Move D8, [X31+72]
	233 Move D11, [X31+48]
	234 Move D10, [X31+56]
	235 Move D13, [X31+32]
	236 Move D12, [X31+40]
	237 Move D15, [X31+16]
	238 Move D14, [X31+24]
	239 Add X31, X31, 112
	240 Return 
	241 Move X0, X19
	242 Move X20, [X31+96]
	243 Move X19, [X31+104]
	244 Move X30, [X31+80]
	245 Move X21, [X31+88]
	246 Move D9, [X31+64]
	247 Move D8, [X31+72]
	248 Move D11, [X31+48]
	249 Move D10, [X31+56]
	250 Move D13, [X31+32]
	251 Move D12, [X31+40]
	252 Move D15, [X31+16]
	253 Move D14, [X31+24]
	254 Add X31, X31, 112
	255 Call LongAisleController.SetCharging, X0
	256 Return 
	257 Call 0x1B6FA1C

Method: System.Void SetCharging()

Disassembly:
	0x01CED0BC ADRP X21, 0x2536000
	0x01CED0C0 LDRB W8, [X21 + 0x506]
	0x01CED0C4 MOV V11.16B, V0.16B
	0x01CED0C8 MOV V12.16B, V1.16B
	0x01CED0CC MOV V13.16B, V2.16B
	0x01CED0D0 CBNZ W8, 0x1CED0E8
	0x01CED0D4 ADRP X0, 0x2260000
	0x01CED0D8 LDR X0, [X0 + 0x488]
	0x01CED0DC BL 0x1B6E7F0
	0x01CED0E0 MOVZ W8, 0x1
	0x01CED0E4 STRB W8, [X21 + 0x506]
	0x01CED0E8 ADRP X22, 0x2260000
	0x01CED0EC LDR X22, [X22 + 0x488]
	0x01CED0F0 FSUB S11, S8, S11
	0x01CED0F4 FSUB S9, S9, S12
	0x01CED0F8 FSUB S8, S10, S13
	0x01CED0FC LDR X0, [X22]
	0x01CED100 LDR W8, [X0 + 0xE0]
	0x01CED104 CBNZ W8, 0x1CED10C
	0x01CED108 BL 0x1B6E8F8
	0x01CED10C ADRP X8, 0xFFFFFFFFFEDBC000
	0x01CED110 FMUL S0, S11, S11
	0x01CED114 FMUL S1, S9, S9
	0x01CED118 LDR V14, [X8 + 0xAB0]
	0x01CED11C FADD S0, S0, S1
	0x01CED120 FMUL S1, S8, S8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2537000
	005 Move W8, [X20+1680]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2263000
	012 Move X0, [X0+3632]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1680], W8
	016 Move W1, 3
	017 Move X0, X19
	018 Call LongAisleController.set_phase, X0, X1
	019 Move X8, [X19+392]
	020 Compare X8, 0
	021 JumpIfEqual {32}
	022 Move W8, [X8+24]
	023 Move S0, W31
	024 Move S1, 5
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction FCSEL not yet implemented."
	027 Move [X19+380], S0
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return 
	032 Call 0x1B6FA1C

Method: System.Void UpdateCharging()

Disassembly:
	0x01CECA80 BL 0x1B6EA0C
	0x01CECA84 ADRP X8, 0x2264000
	0x01CECA88 LDR X8, [X8 + 0x408]
	0x01CECA8C MOV X1, X25
	0x01CECA90 MOV X3, X31
	0x01CECA94 MOV X24, X0
	0x01CECA98 LDR X2, [X8]
	0x01CECA9C BL 0x2B7A3E4
	0x01CECAA0 LDR X8, [X26]
	0x01CECAA4 LDR X8, [X8 + 0xB8]
	0x01CECAA8 STR X24, [X8 + 0x10]
	0x01CECAAC LDR X2, [X27]
	0x01CECAB0 MOV X0, X23
	0x01CECAB4 MOV X1, X24
	0x01CECAB8 BL 0x20C0008
	0x01CECABC CMP W19, 0x1
	0x01CECAC0 B.LT 0x1CECCD8
	0x01CECAC4 LDR X23, [X20 + 0x20]
	0x01CECAC8 MOV W24, W0
	0x01CECACC MOV W25, W31
	0x01CECAD0 MOV W29, W31
	0x01CECAD4 ADD X28, X22, 0x20
	0x01CECAD8 CBZ X23, 0x1CECCFC
	0x01CECADC LDR W8, [X23 + 0x18]
	0x01CECAE0 CMP W25, W8
	0x01CECAE4 B.NE 0x1CECBAC
	0x01CECAE8 CBZ X22, 0x1CECCFC
	0x01CECAEC LDR W8, [X22 + 0x18]
	0x01CECAF0 UBFM X9, X8, 0x20, 0x1F
	0x01CECAF4 CMP X9, 0x1
	0x01CECAF8 B.LT 0x1CECB1C
	0x01CECAFC MOV X9, X31
	0x01CECB00 SXTW X10, W8
	0x01CECB04 CMP X9, X8
	0x01CECB08 B.CS 0x1CECCF8
	0x01CECB0C STRB W31, [X28, X9, LSL]
	0x01CECB10 ADD X9, X9, 0x1
	0x01CECB14 CMP X10, X9
	0x01CECB18 B.NE 0x1CECB04
	0x01CECB1C LDR X0, [X26]
	0x01CECB20 LDR W8, [X0 + 0xE0]
	0x01CECB24 CBNZ W8, 0x1CECB30
	0x01CECB28 BL 0x1B6E8F8
	0x01CECB2C LDR X0, [X26]
	0x01CECB30 LDR X8, [X0 + 0xB8]
	0x01CECB34 LDR X24, [X8 + 0x18]
	0x01CECB38 CBNZ X24, 0x1CECB8C
	0x01CECB3C LDR W8, [X0 + 0xE0]
	0x01CECB40 CBNZ W8, 0x1CECB4C
	0x01CECB44 BL 0x1B6E8F8
	0x01CECB48 LDR X0, [X26]
	0x01CECB4C LDR X8, [X0 + 0xB8]
	0x01CECB50 LDR X25, [X8]
	0x01CECB54 ADRP X8, 0x2264000
	0x01CECB58 LDR X8, [X8 + 0x3E8]
	0x01CECB5C LDR X0, [X8]
	0x01CECB60 BL 0x1B6EA0C
	0x01CECB64 ADRP X8, 0x2264000
	0x01CECB68 LDR X8, [X8 + 0x410]
	0x01CECB6C MOV X1, X25
	0x01CECB70 MOV X3, X31
	0x01CECB74 MOV X24, X0
	0x01CECB78 LDR X2, [X8]
	0x01CECB7C BL 0x2B7A3E4
	0x01CECB80 LDR X8, [X26]
	0x01CECB84 LDR X8, [X8 + 0xB8]
	0x01CECB88 STR X24, [X8 + 0x18]
	0x01CECB8C ADRP X8, 0x2264000
	0x01CECB90 LDR X8, [X8 + 0x3E0]
	0x01CECB94 MOV X0, X23
	0x01CECB98 MOV X1, X24
	0x01CECB9C LDR X2, [X8]
	0x01CECBA0 BL 0x20C0008
	0x01CECBA4 MOV W24, W0
	0x01CECBA8 MOV W25, W31
	0x01CECBAC ADD W1, W24, 0x1
	0x01CECBB0 MOV W0, W31
	0x01CECBB4 MOV X2, X31
	0x01CECBB8 BL 0x3A98D10
	0x01CECBBC LDR X23, [X20 + 0x20]
	0x01CECBC0 CBZ X23, 0x1CECCFC
	0x01CECBC4 LDR W9, [X23 + 0x18]
	0x01CECBC8 UBFM X8, X9, 0x20, 0x1F
	0x01CECBCC CMP X8, 0x1
	0x01CECBD0 B.LT 0x1CECCCC
	0x01CECBD4 MOV W10, W31
	0x01CECBD8 MOV X27, X31
	0x01CECBDC SXTW X11, W9
	0x01CECBE0 CBZ X22, 0x1CECCFC
	0x01CECBE4 LDR W8, [X22 + 0x18]
	0x01CECBE8 CMP X27, X8
	0x01CECBEC B.CS 0x1CECCF8
	0x01CECBF0 LDRB W12, [X28, X27, LSL]
	0x01CECBF4 CBNZ W12, 0x1CECC1C
	0x01CECBF8 CMP X27, X9
	0x01CECBFC B.CS 0x1CECCF8
	0x01CECC00 ADD X12, X23, X27, 0x3, LSL
	0x01CECC04 LDR X12, [X12 + 0x20]
	0x01CECC08 CBZ X12, 0x1CECCFC
	0x01CECC0C LDR W13, [X12 + 0x18]
	0x01CECC10 ADD W10, W13, W10
	0x01CECC14 CMP W0, W10
	0x01CECC18 B.LE 0x1CECC2C
	0x01CECC1C ADD X27, X27, 0x1
	0x01CECC20 CMP X27, X11
	0x01CECC24 B.LT 0x1CECBE0
	0x01CECC28 B 0x1CECCCC
	0x01CECC2C CBZ X21, 0x1CECCFC
	0x01CECC30 ADRP X10, 0x2264000
	0x01CECC34 LDR X1, [X12 + 0x10]
	0x01CECC38 LDR W11, [X21 + 0x1C]
	0x01CECC3C LDR X9, [X21 + 0x10]
	0x01CECC40 LDR X10, [X10 + 0x3F0]
	0x01CECC44 ADD W11, W11, 0x1
	0x01CECC48 LDR X10, [X10]
	0x01CECC4C STR W11, [X21 + 0x1C]
	0x01CECC50 CBZ X9, 0x1CECCFC
	0x01CECC54 LDRSW X11, [X21 + 0x18]
	0x01CECC58 LDR W12, [X9 + 0x18]
	0x01CECC5C CMP W11, W12
	0x01CECC60 B.CS 0x1CECC78
	0x01CECC64 ADD W10, W11, 0x1
	0x01CECC68 ADD X9, X9, X11, 0x3, LSL
	0x01CECC6C STR W10, [X21 + 0x18]
	0x01CECC70 STR X1, [X9 + 0x20]
	0x01CECC74 B 0x1CECC90
	0x01CECC78 LDR X8, [X10 + 0x20]
	0x01CECC7C MOV X0, X21
	0x01CECC80 LDR X8, [X8 + 0xC0]
	0x01CECC84 LDR X2, [X8 + 0x70]
	0x01CECC88 BL 0x2E46518
	0x01CECC8C LDR X8, [X22 + 0x18]
	0x01CECC90 CMP W27, W8
	0x01CECC94 B.CS 0x1CECCF8
	0x01CECC98 MOVZ W8, 0x1
	0x01CECC9C STRB W8, [X28, X27, LSL]
	0x01CECCA0 LDR X23, [X20 + 0x20]
	0x01CECCA4 CBZ X23, 0x1CECCFC
	0x01CECCA8 LDR W8, [X23 + 0x18]
	0x01CECCAC CMP W27, W8
	0x01CECCB0 B.CS 0x1CECCF8
	0x01CECCB4 ADD X8, X23, X27, 0x3, LSL
	0x01CECCB8 LDR X8, [X8 + 0x20]
	0x01CECCBC CBZ X8, 0x1CECCFC
	0x01CECCC0 LDR W8, [X8 + 0x18]
	0x01CECCC4 ADD W25, W25, 0x1
	0x01CECCC8 SUB W24, W24, W8
	0x01CECCCC ADD W29, W29, 0x1
	0x01CECCD0 CMP W29, W19
	0x01CECCD4 B.NE 0x1CECAD8
	0x01CECCD8 MOV X0, X21
	0x01CECCDC LDP X20, X19, [X31 + 0x50]
	0x01CECCE0 LDP X22, X21, [X31 + 0x40]
	0x01CECCE4 LDP X24, X23, [X31 + 0x30]
	0x01CECCE8 LDP X26, X25, [X31 + 0x20]
	0x01CECCEC LDP X28, X27, [X31 + 0x10]
	0x01CECCF0 LDP X29, X30, [X31], #0x60
	0x01CECCF4 RET
	0x01CECCF8 BL 0x1B6EA24
	0x01CECCFC BL 0x1B6EA1C
	0x01CECD00 ADRP X8, 0xFFFFFFFFFEDC1000
	0x01CECD04 LDR V0, [X8 + 0xAE8]
	0x01CECD08 MOV X1, X31
	0x01CECD0C STR D0, [X0 + 0x18]
	0x01CECD10 B 0x3A9EFE0
	0x01CECD14 MOVZ W8, 0x3E8
	0x01CECD18 MOV X1, X31
	0x01CECD1C STR W8, [X0 + 0x18]
	0x01CECD20 B 0x32276F8
	0x01CECD24 STR X30, [X31 - 0x20]!
	0x01CECD28 STP X20, X19, [X31 + 0x10]
	0x01CECD2C ADRP X19, 0x2537000
	0x01CECD30 ADRP X20, 0x2264000
	0x01CECD34 LDRB W8, [X19 + 0x697]
	0x01CECD38 LDR X20, [X20 + 0x3D8]
	0x01CECD3C TBNZ X8, 0x0, 0x1CECD54
	0x01CECD40 ADRP X0, 0x2264000
	0x01CECD44 LDR X0, [X0 + 0x3D8]
	0x01CECD48 BL 0x1B6E7F0
	0x01CECD4C MOVZ W8, 0x1
	0x01CECD50 STRB W8, [X19 + 0x697]
	0x01CECD54 LDR X0, [X20]
	0x01CECD58 BL 0x1B6EA0C
	0x01CECD5C MOV X1, X31
	0x01CECD60 MOV X19, X0
	0x01CECD64 BL 0x32276F8
	0x01CECD68 LDR X8, [X20]
	0x01CECD6C LDR X8, [X8 + 0xB8]
	0x01CECD70 STR X19, [X8]
	0x01CECD74 LDP X20, X19, [X31 + 0x10]
	0x01CECD78 LDR X30, [X31], #0x20
	0x01CECD7C RET
	0x01CECD80 MOV X1, X31
	0x01CECD84 B 0x32276F8
	0x01CECD88 STR X30, [X31 - 0x10]!
	0x01CECD8C CBZ X1, 0x1CECD9C
	0x01CECD90 LDR W0, [X1 + 0x18]
	0x01CECD94 LDR X30, [X31], #0x10
	0x01CECD98 RET
	0x01CECD9C BL 0x1B6EA1C
	0x01CECDA0 STR X30, [X31 - 0x10]!
	0x01CECDA4 CBZ X1, 0x1CECDB4
	0x01CECDA8 LDR W0, [X1 + 0x18]
	0x01CECDAC LDR X30, [X31], #0x10
	0x01CECDB0 RET
	0x01CECDB4 BL 0x1B6EA1C
	0x01CECDB8 STR X30, [X31 - 0x10]!
	0x01CECDBC CBZ X1, 0x1CECDCC
	0x01CECDC0 LDR W0, [X1 + 0x18]
	0x01CECDC4 LDR X30, [X31], #0x10
	0x01CECDC8 RET
	0x01CECDCC BL 0x1B6EA1C
	0x01CECDD0 STP X30, X21, [X31 - 0x20]!
	0x01CECDD4 STP X20, X19, [X31 + 0x10]
	0x01CECDD8 ADRP X20, 0x2537000
	0x01CECDDC ADRP X21, 0x2264000
	0x01CECDE0 LDRB W8, [X20 + 0x698]
	0x01CECDE4 LDR X21, [X21 + 0x418]
	0x01CECDE8 MOV X19, X0
	0x01CECDEC TBNZ X8, 0x0, 0x1CECE04
	0x01CECDF0 ADRP X0, 0x2264000
	0x01CECDF4 LDR X0, [X0 + 0x418]
	0x01CECDF8 BL 0x1B6E7F0
	0x01CECDFC MOVZ W8, 0x1
	0x01CECE00 STRB W8, [X20 + 0x698]
	0x01CECE04 LDR X1, [X21]
	0x01CECE08 MOV X0, X19
	0x01CECE0C BL 0x208FDE8
	0x01CECE10 STR X0, [X19 + 0x30]
	0x01CECE14 CBZ X0, 0x1CECE64
	0x01CECE18 MOVZ W1, 0x1
	0x01CECE1C MOV X2, X31
	0x01CECE20 BL 0x3A4ACE4
	0x01CECE24 LDR X0, [X19 + 0x30]
	0x01CECE28 CBZ X0, 0x1CECE64
	0x01CECE2C MOVZ W1, 0x1
	0x01CECE30 MOV X2, X31
	0x01CECE34 BL 0x3A4AD28
	0x01CECE38 LDR X0, [X19 + 0x20]
	0x01CECE3C CBZ X0, 0x1CECE64
	0x01CECE40 LDR X19, [X19 + 0x30]
	0x01CECE44 MOV X1, X31
	0x01CECE48 BL 0x3AA7658
	0x01CECE4C CBZ X19, 0x1CECE64
	0x01CECE50 MOV X0, X19
	0x01CECE54 LDP X20, X19, [X31 + 0x10]
	0x01CECE58 MOV X1, X31
	0x01CECE5C LDP X30, X21, [X31], #0x20
	0x01CECE60 B 0x3A4A810
	0x01CECE64 BL 0x1B6EA1C
	0x01CECE68 STR D14, [X31 - 0x60]!
	0x01CECE6C STP D13, D12, [X31 + 0x8]
	0x01CECE70 STP D11, D10, [X31 + 0x18]
	0x01CECE74 STP D9, D8, [X31 + 0x28]
	0x01CECE78 STR X30, [X31 + 0x38]
	0x01CECE7C STP X22, X21, [X31 + 0x40]
	0x01CECE80 STP X20, X19, [X31 + 0x50]
	0x01CECE84 MOV X19, X0
	0x01CECE88 MOVZ W0, 0x130
	0x01CECE8C MOV X1, X31
	0x01CECE90 BL 0x3AECD78
	0x01CECE94 ANDS W31, W0, 0x1
	0x01CECE98 FMOV S0, 1
	0x01CECE9C FMOV S1, 2
	0x01CECEA0 MOV X0, X31
	0x01CECEA4 FCSEL S8, S1, S0, NE
	0x01CECEA8 BL 0x3AA481C
	0x01CECEAC MOVZ W0, 0x77
	0x01CECEB0 MOV X1, X31
	0x01CECEB4 FMUL S8, S8, S0
	0x01CECEB8 BL 0x3AECD78

ISIL:
	001 Move [X31-144], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X27
	010 Move [X31+80], X26
	011 Move [X31+88], X25
	012 Move [X31+96], X24
	013 Move [X31+104], X23
	014 Move [X31+112], X22
	015 Move [X31+120], X21
	016 Move [X31+128], X20
	017 Move [X31+136], X19
	018 Move X20, 0x2538000
	019 Move W8, [X20+1681]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {36}
	025 Move X0, 0x2265000
	026 Move X0, [X0+760]
	027 Call 0x1B6F7F0
	028 Move X0, 0x2263000
	029 Move X0, [X0+984]
	030 Call 0x1B6F7F0
	031 Move X0, 0x2262000
	032 Move X0, [X0+1216]
	033 Call 0x1B6F7F0
	034 Move W8, 1
	035 Move [X20+1681], W8
	036 Move [X31+8], X31
	037 Move X8, [X19+184]
	038 Compare X8, 0
	039 JumpIfEqual {314}
	040 Move X8, [X8+56]
	041 Compare X8, 0
	042 JumpIfEqual {314}
	043 Move V8, [X19+380]
	044 Move W9, [X8+24]
	045 Move S0, 5
	046 NotImplemented "Instruction FCMP not yet implemented."
	047 Compare W9, 0
	048 JumpIfEqual {315}
	049 Add X8, X8, 32
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add X8, X8, 36
	052 Move X0, [X19+56]
	053 Compare X0, 0
	054 JumpIfEqual {314}
	055 Move V11, [X8]
	056 Move X1, X31
	057 Call NetworkRunner.get_DeltaTime, X0
	058 Move X0, [X19+208]
	059 Add S0, S8, S0
	060 Move [X19+380], S0
	061 Compare X0, 0
	062 JumpIfEqual {314}
	063 Move X22, 0x2263000
	064 Move X21, 0x2262000
	065 Move X22, [X22+984]
	066 Move X21, [X21+1216]
	067 Move X1, X31
	068 Call Transform.get_position, X0
	069 Move X0, [X22]
	070 Move V8, V0
	071 Move V9, V1
	072 Move V10, V2
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {78}
	076 Call 0x1B6F8F8
	077 Move X0, [X22]
	078 Move X8, [X0+184]
	079 Move X1, X31
	080 Move W0, [X8]
	081 Call LayerMask.op_Implicit, X0
	082 Move X8, [X21]
	083 Move W20, W0
	084 Move W9, [X8+224]
	085 Compare W9, 0
	086 JumpIfNotEqual {89}
	087 Move X0, X8
	088 Call 0x1B6F8F8
	089 Move X8, -19144704
	090 Move V3, [X8+3616]
	091 Move V0, V8
	092 Move V1, V9
	093 Move V2, V10
	094 Move W0, W20
	095 Move X1, X31
	096 Call Physics.OverlapSphere, X0, V0, X1
	097 Compare X0, 0
	098 JumpIfEqual {314}
	099 Move X8, [X0+24]
	100 Compare X8, 0
	101 JumpIfNotEqual {105}
	102 Move V0, [X19+380]
	103 Move S1, 10
	104 NotImplemented "Instruction FCMP not yet implemented."
	105 Move X0, X19
	106 Call LongAisleController.SetStunned, X0
	107 Move X0, X19
	108 Move X1, X31
	109 Call Component.get_transform, X0
	110 Compare X0, 0
	111 JumpIfEqual {314}
	112 Move X1, X31
	113 Call Transform.get_position, X0
	114 Move X20, 0x2538000
	115 Move W8, [X20+1090]
	116 Move V8, V0
	117 Move V9, V1
	118 Move V10, V2
	119 Compare W8, 0
	120 JumpIfNotEqual {126}
	121 Move X0, 0x2262000
	122 Move X0, [X0+1152]
	123 Call 0x1B6F7F0
	124 Move W8, 1
	125 Move [X20+1090], W8
	126 Move X8, [X19+184]
	127 Compare X8, 0
	128 JumpIfEqual {314}
	129 Move X20, 0x2262000
	130 Move X20, [X20+1152]
	131 Move X0, [X22]
	132 Move V11, [X8+76]
	133 Move X9, [X20]
	134 Move W10, [X0+224]
	135 Move X9, [X9+184]
	136 Move S12, [X9+24]
	137 Move S13, [X9+28]
	138 Move V14, [X9+32]
	139 Compare W10, 0
	140 JumpIfNotEqual {143}
	141 Call 0x1B6F8F8
	142 Move X0, [X22]
	143 Move X8, [X0+184]
	144 Move X1, X31
	145 Add S12, S8, S12
	146 Add S9, S9, S13
	147 Move W0, [X8+8]
	148 Add S8, S10, S14
	149 Call LayerMask.op_Implicit, X0
	150 Move X8, [X21]
	151 Move W21, W0
	152 Move W9, [X8+224]
	153 Compare W9, 0
	154 JumpIfNotEqual {157}
	155 Move X0, X8
	156 Call 0x1B6F8F8
	157 Move V0, V12
	158 Move V1, V9
	159 Move V2, V8
	160 Move V3, V11
	161 Move W0, W21
	162 Move X1, X31
	163 Call Physics.OverlapSphere, X0, V0, X1
	164 Compare X0, 0
	165 JumpIfEqual {314}
	166 Move W8, [X0+24]
	167 Move X21, X0
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Move X24, 0x2265000
	170 Move X9, -19144704
	171 Move X22, 0x2262000
	172 Move X24, [X24+760]
	173 Move V14, [X9+2916]
	174 Move X22, [X22+1160]
	175 Move W23, W31
	176 Move X25, 0x2538000
	177 Move W26, 1
	178 Move X27, 0x2538000
	179 NotImplemented "Instruction CMP not yet implemented."
	180 Add X8, X21, W23
	181 Move X0, [X8+32]
	182 Compare X0, 0
	183 JumpIfEqual {314}
	184 Move X2, [X24]
	185 Add X1, X31, 8
	186 Call 0x2091EE4, X0, X1
	187 Move TEMP, X0
	188 And TEMP, TEMP, 1
	189 Compare TEMP, 1
	190 JumpIfNotEqual {273}
	191 Move X0, [X31+8]
	192 Compare X0, 0
	193 JumpIfEqual {314}
	194 Move X1, X31
	195 Call NetPlayer.get_isDie, X0
	196 Move TEMP, X0
	197 And TEMP, TEMP, 1
	198 Compare TEMP, 1
	199 JumpIfEqual {273}
	200 Move X8, [X31+8]
	201 Compare X8, 0
	202 JumpIfEqual {314}
	203 Move X0, [X8+136]
	204 Compare X0, 0
	205 JumpIfEqual {314}
	206 Move X1, X31
	207 Call Transform.get_position, X0
	208 Move X0, X19
	209 Move X1, X31
	210 Move V8, V0
	211 Move V9, V1
	212 Move V10, V2
	213 Call Component.get_transform, X0
	214 Compare X0, 0
	215 JumpIfEqual {314}
	216 Move X1, X31
	217 Call Transform.get_position, X0
	218 Move W8, [X25+1089]
	219 Move V11, V0
	220 Move V12, V1
	221 Move V13, V2
	222 Compare W8, 0
	223 JumpIfNotEqual {227}
	224 Move X0, X22
	225 Call 0x1B6F7F0
	226 Move [X25+1089], W26
	227 Move X0, [X22]
	228 Move W8, [X0+224]
	229 Compare W8, 0
	230 JumpIfNotEqual {232}
	231 Call 0x1B6F8F8
	232 Subtract S0, S8, S11
	233 Subtract S1, S9, S12
	234 Subtract S2, S10, S13
	235 Multiply S3, S0, S0
	236 Multiply S4, S1, S1
	237 Add S3, S3, S4
	238 Multiply S4, S2, S2
	239 Add S3, S4, S3
	240 NotImplemented "Instruction FSQRT not yet implemented."
	241 NotImplemented "Instruction FCMP not yet implemented."
	242 NotImplemented "Instruction FDIV not yet implemented."
	243 NotImplemented "Instruction FDIV not yet implemented."
	244 NotImplemented "Instruction FDIV not yet implemented."
	245 Move W8, [X27+1087]
	246 Compare W8, 0
	247 JumpIfNotEqual {251}
	248 Move X0, X20
	249 Call 0x1B6F7F0
	250 Move [X27+1087], W26
	251 Move X8, [X20]
	252 Move X8, [X8+184]
	253 Move S0, [X8]
	254 Move S1, [X8+4]
	255 Move V2, [X8+8]
	256 Move X8, [X19+184]
	257 Compare X8, 0
	258 JumpIfEqual {314}
	259 Move X0, [X31+8]
	260 Compare X0, 0
	261 JumpIfEqual {314}
	262 Move V3, [X8+80]
	263 Move X3, [X8+184]
	264 Move X5, [X8+24]
	265 Move X2, [X19+208]
	266 Move W1, [X8+36]
	267 Multiply S2, S2, S3
	268 Multiply S1, S1, S3
	269 Multiply S0, S0, S3
	270 Move X4, X3
	271 Move X6, X31
	272 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5, X6
	273 Move W8, [X21+24]
	274 Add W23, W23, 1
	275 NotImplemented "Instruction CMP not yet implemented."
	276 Move X20, [X31+128]
	277 Move X19, [X31+136]
	278 Move X22, [X31+112]
	279 Move X21, [X31+120]
	280 Move X24, [X31+96]
	281 Move X23, [X31+104]
	282 Move X26, [X31+80]
	283 Move X25, [X31+88]
	284 Move X30, [X31+64]
	285 Move X27, [X31+72]
	286 Move D9, [X31+48]
	287 Move D8, [X31+56]
	288 Move D11, [X31+32]
	289 Move D10, [X31+40]
	290 Move D13, [X31+16]
	291 Move D12, [X31+24]
	292 Move V14, [X31+144]
	293 Return 
	294 Move X0, [X19+56]
	295 Compare X0, 0
	296 JumpIfEqual {314}
	297 Move X20, [X19+200]
	298 Move V10, [X19+420]
	299 Move V9, [X19+416]
	300 Move V8, [X19+412]
	301 Move X1, X31
	302 Call NetworkRunner.get_DeltaTime, X0
	303 Compare X20, 0
	304 JumpIfEqual {314}
	305 Multiply S1, S11, S10
	306 Multiply S3, S11, S9
	307 Multiply S4, S11, S8
	308 Multiply S2, S1, S0
	309 Multiply S1, S3, S0
	310 Multiply S0, S4, S0
	311 Move X0, X20
	312 Move X1, X31
	313 Call NavMeshAgent.Move, X0, X1
	314 Call 0x1B6FA1C
	315 Call 0x1B6FA24

Method: System.Void SetStunned()

Disassembly:
	0x01CED124 FADD S0, S1, S0
	0x01CED128 FSQRT S0, S0
	0x01CED12C FCMP S0, S14
	0x01CED130 B.PL 0x1CED158
	0x01CED134 LDR X0, [X19 + 0x28]
	0x01CED138 CBZ X0, 0x1CED250
	0x01CED13C LDR X20, [X19 + 0x30]
	0x01CED140 MOV X1, X31
	0x01CED144 BL 0x3AA7658
	0x01CED148 CBZ X20, 0x1CED250
	0x01CED14C MOV X0, X20
	0x01CED150 MOV X1, X31
	0x01CED154 BL 0x3A4A810
	0x01CED158 MOV X0, X19
	0x01CED15C MOV X1, X31
	0x01CED160 BL 0x3A9B084

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 4
	004 Move X19, X0
	005 Call LongAisleController.set_phase, X0, X1
	006 Move X0, [X19+208]
	007 Move [X19+384], W31
	008 Compare X0, 0
	009 JumpIfEqual {20}
	010 Move X19, [X19+488]
	011 Move X1, X31
	012 Call Transform.get_position, X0
	013 Move S3, 1
	014 Move X0, X19
	015 Move X1, X31
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	019 Return 
	020 Call 0x1B6FA1C

Method: System.Void UpdateStunned()

Disassembly:
	0x01CECEBC TBZ X0, 0x0, 0x1CECF18
	0x01CECEC0 ADRP X21, 0x2537000
	0x01CECEC4 LDRB W8, [X21 + 0x50F]
	0x01CECEC8 LDR X20, [X19 + 0x30]
	0x01CECECC CBNZ W8, 0x1CECEE4
	0x01CECED0 ADRP X0, 0x2261000
	0x01CECED4 LDR X0, [X0 + 0x480]
	0x01CECED8 BL 0x1B6E7F0
	0x01CECEDC MOVZ W8, 0x1
	0x01CECEE0 STRB W8, [X21 + 0x50F]
	0x01CECEE4 CBZ X20, 0x1CED250
	0x01CECEE8 ADRP X8, 0x2261000
	0x01CECEEC LDR X8, [X8 + 0x480]
	0x01CECEF0 MOV X0, X20
	0x01CECEF4 MOV X1, X31
	0x01CECEF8 LDR X8, [X8]
	0x01CECEFC LDR X8, [X8 + 0xB8]
	0x01CECF00 LDP S1, S0, [X8 + 0x4C]
	0x01CECF04 LDR V3, [X8 + 0x48]
	0x01CECF08 FMUL S2, S8, S0
	0x01CECF0C FMUL S1, S8, S1
	0x01CECF10 FMUL S0, S8, S3

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move V8, [X0+384]
	005 Move S0, 3
	006 Move X19, X0
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 Move X0, [X19+56]
	009 Compare X0, 0
	010 JumpIfEqual {23}
	011 Move X1, X31
	012 Call NetworkRunner.get_DeltaTime, X0
	013 Add S0, S8, S0
	014 Move [X19+384], S0
	015 Move W1, 5
	016 Move X0, X19
	017 Call LongAisleController.set_phase, X0, X1
	018 Move [X19+388], W31
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Move V8, [X31+32]
	022 Return 
	023 Call 0x1B6FA1C

Method: System.Void SetSearching()

Disassembly:
	0x01CED164 CBZ X0, 0x1CED250
	0x01CED168 MOV X1, X31
	0x01CED16C BL 0x3AA7658
	0x01CED170 LDR X0, [X19 + 0x28]
	0x01CED174 CBZ X0, 0x1CED250
	0x01CED178 MOV X1, X31
	0x01CED17C MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 5
	004 Move X19, X0
	005 Call LongAisleController.set_phase, X0, X1
	006 Move [X19+388], W31
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 

Method: System.Void UpdateSearching()

Disassembly:
	0x01CECF14 BL 0x3A4AABC
	0x01CECF18 MOVZ W0, 0x73
	0x01CECF1C MOV X1, X31
	0x01CECF20 BL 0x3AECD78
	0x01CECF24 TBZ X0, 0x0, 0x1CECF80
	0x01CECF28 ADRP X21, 0x2537000
	0x01CECF2C LDRB W8, [X21 + 0x711]
	0x01CECF30 LDR X20, [X19 + 0x30]
	0x01CECF34 CBNZ W8, 0x1CECF4C
	0x01CECF38 ADRP X0, 0x2261000
	0x01CECF3C LDR X0, [X0 + 0x480]
	0x01CECF40 BL 0x1B6E7F0
	0x01CECF44 MOVZ W8, 0x1
	0x01CECF48 STRB W8, [X21 + 0x711]
	0x01CECF4C CBZ X20, 0x1CED250
	0x01CECF50 ADRP X8, 0x2261000
	0x01CECF54 LDR X8, [X8 + 0x480]
	0x01CECF58 MOV X0, X20
	0x01CECF5C MOV X1, X31
	0x01CECF60 LDR X8, [X8]
	0x01CECF64 LDR X8, [X8 + 0xB8]
	0x01CECF68 LDP S1, S0, [X8 + 0x58]
	0x01CECF6C LDR V3, [X8 + 0x54]
	0x01CECF70 FMUL S2, S8, S0
	0x01CECF74 FMUL S1, S8, S1
	0x01CECF78 FMUL S0, S8, S3
	0x01CECF7C BL 0x3A4AABC
	0x01CECF80 MOVZ W0, 0x61

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Add X1, X31, 8
	005 Move X19, X0
	006 Move [X31+8], X31
	007 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {15}
	012 Move X1, [X31+8]
	013 Move X0, X19
	014 Call LongAisleController.SetPreparing, X0, X1
	015 Move V8, [X19+388]
	016 Move S0, 2
	017 NotImplemented "Instruction FCMP not yet implemented."
	018 Move X0, [X19+56]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X1, X31
	022 Call NetworkRunner.get_DeltaTime, X0
	023 Add S0, S8, S0
	024 Move [X19+388], S0
	025 Move X0, X19
	026 Call LongAisleController.SetWaiting, X0
	027 Move X30, [X31+16]
	028 Move X19, [X31+24]
	029 Move V8, [X31+32]
	030 Return 
	031 Call 0x1B6FA1C

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01CED180 MOV V9.16B, V1.16B
	0x01CED184 MOV V10.16B, V2.16B
	0x01CED188 BL 0x3AA7658
	0x01CED18C LDRB W8, [X21 + 0x506]
	0x01CED190 MOV V11.16B, V0.16B
	0x01CED194 MOV V12.16B, V1.16B
	0x01CED198 MOV V13.16B, V2.16B
	0x01CED19C CBNZ W8, 0x1CED1B4
	0x01CED1A0 ADRP X0, 0x2260000
	0x01CED1A4 LDR X0, [X0 + 0x488]
	0x01CED1A8 BL 0x1B6E7F0
	0x01CED1AC MOVZ W8, 0x1
	0x01CED1B0 STRB W8, [X21 + 0x506]
	0x01CED1B4 LDR X0, [X22]
	0x01CED1B8 FSUB S11, S8, S11
	0x01CED1BC FSUB S9, S9, S12
	0x01CED1C0 FSUB S8, S10, S13
	0x01CED1C4 LDR W8, [X0 + 0xE0]
	0x01CED1C8 CBNZ W8, 0x1CED1D0
	0x01CED1CC BL 0x1B6E8F8
	0x01CED1D0 FMUL S0, S11, S11
	0x01CED1D4 FMUL S1, S9, S9
	0x01CED1D8 FADD S0, S0, S1
	0x01CED1DC FMUL S1, S8, S8
	0x01CED1E0 FADD S0, S1, S0
	0x01CED1E4 FSQRT S0, S0
	0x01CED1E8 FCMP S0, S14
	0x01CED1EC B.PL 0x1CED230
	0x01CED1F0 LDR X0, [X19 + 0x20]
	0x01CED1F4 CBZ X0, 0x1CED250
	0x01CED1F8 LDR X19, [X19 + 0x30]
	0x01CED1FC MOV X1, X31
	0x01CED200 BL 0x3AA7658
	0x01CED204 CBZ X19, 0x1CED250
	0x01CED208 MOV X0, X19
	0x01CED20C LDP X20, X19, [X31 + 0x50]
	0x01CED210 LDP X22, X21, [X31 + 0x40]
	0x01CED214 LDR X30, [X31 + 0x38]
	0x01CED218 LDP D9, D8, [X31 + 0x28]
	0x01CED21C LDP D11, D10, [X31 + 0x18]
	0x01CED220 LDP D13, D12, [X31 + 0x8]
	0x01CED224 MOV X1, X31
	0x01CED228 LDR V14, [X31], #0x60
	0x01CED22C B 0x3A4A810
	0x01CED230 LDP X20, X19, [X31 + 0x50]
	0x01CED234 LDP X22, X21, [X31 + 0x40]
	0x01CED238 LDR X30, [X31 + 0x38]
	0x01CED23C LDP D9, D8, [X31 + 0x28]
	0x01CED240 LDP D11, D10, [X31 + 0x18]
	0x01CED244 LDP D13, D12, [X31 + 0x8]
	0x01CED248 LDR V14, [X31], #0x60
	0x01CED24C RET
	0x01CED250 BL 0x1B6EA1C
	0x01CED254 MOV X1, X31
	0x01CED258 B 0x3A9EEE4
	0x01CED25C STP X30, X19, [X31 - 0x10]!
	0x01CED260 LDR X8, [X0 + 0x50]
	0x01CED264 CBZ X8, 0x1CED274
	0x01CED268 LDR W0, [X8 + 0x3C]
	0x01CED26C LDP X30, X19, [X31], #0x10
	0x01CED270 RET
	0x01CED274 ADRP X0, 0x2260000
	0x01CED278 LDR X0, [X0 + 0x490]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x2537000
	009 Move X20, 0x2263000
	010 Move W8, [X21+1682]
	011 Move X20, [X20+3400]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x2263000
	018 Move X0, [X0+3400]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X21+1682], W8
	022 Move X0, X19
	023 Call MobController.OnDrawGizmos, X0
	024 Move X0, [X20]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1B6F8F8
	029 Move X0, [X20]
	030 Move X8, [X0+184]
	031 Move X0, X31
	032 Move S0, [X8+176]
	033 Move S1, [X8+180]
	034 Move S2, [X8+184]
	035 Move S3, [X8+188]
	036 Call Gizmos.set_color, X0
	037 Move X0, X19
	038 Move X1, X31
	039 Call Component.get_transform, X0
	040 Compare X0, 0
	041 JumpIfEqual {80}
	042 Move X1, X31
	043 Call Transform.get_position, X0
	044 Move X20, 0x2537000
	045 Move W8, [X20+1090]
	046 Move V8, V0
	047 Move V9, V1
	048 Move V10, V2
	049 Compare W8, 0
	050 JumpIfNotEqual {56}
	051 Move X0, 0x2261000
	052 Move X0, [X0+1152]
	053 Call 0x1B6F7F0
	054 Move W8, 1
	055 Move [X20+1090], W8
	056 Move X8, [X19+184]
	057 Compare X8, 0
	058 JumpIfEqual {80}
	059 Move X9, 0x2261000
	060 Move X9, [X9+1152]
	061 Move V3, [X8+76]
	062 Move X20, [X31+48]
	063 Move X19, [X31+56]
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Move X9, [X9]
	067 Move X0, X31
	068 Move X9, [X9+184]
	069 Move S1, [X9+28]
	070 Move S0, [X9+32]
	071 Move V4, [X9+24]
	072 Add S2, S10, S0
	073 Add S1, S9, S1
	074 Add S0, S8, S4
	075 Move D9, [X31+16]
	076 Move D8, [X31+24]
	077 Move V10, [X31+64]
	078 Call Gizmos.DrawWireSphere, X0, V0
	079 Return 
	080 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CED27C BL 0x1B6E804
	0x01CED280 BL 0x1B6EA0C
	0x01CED284 MOV X19, X0
	0x01CED288 ADRP X0, 0x2263000
	0x01CED28C LDR X0, [X0 + 0x420]
	0x01CED290 BL 0x1B6E804
	0x01CED294 MOV X1, X0
	0x01CED298 MOV X0, X19
	0x01CED29C MOV X2, X31
	0x01CED2A0 BL 0x31E7550
	0x01CED2A4 ADRP X0, 0x2263000
	0x01CED2A8 LDR X0, [X0 + 0x428]
	0x01CED2AC BL 0x1B6E804
	0x01CED2B0 MOV X1, X0
	0x01CED2B4 MOV X0, X19
	0x01CED2B8 BL 0x1B6E8E8
	0x01CED2BC STP X30, X19, [X31 - 0x10]!
	0x01CED2C0 LDR X8, [X0 + 0x50]
	0x01CED2C4 CBZ X8, 0x1CED2D4
	0x01CED2C8 STR W1, [X8 + 0x3C]
	0x01CED2CC LDP X30, X19, [X31], #0x10
	0x01CED2D0 RET
	0x01CED2D4 ADRP X0, 0x2260000
	0x01CED2D8 LDR X0, [X0 + 0x490]
	0x01CED2DC BL 0x1B6E804
	0x01CED2E0 BL 0x1B6EA0C
	0x01CED2E4 MOV X19, X0
	0x01CED2E8 ADRP X0, 0x2263000
	0x01CED2EC LDR X0, [X0 + 0x420]
	0x01CED2F0 BL 0x1B6E804
	0x01CED2F4 MOV X1, X0
	0x01CED2F8 MOV X0, X19
	0x01CED2FC MOV X2, X31
	0x01CED300 BL 0x31E7550
	0x01CED304 ADRP X0, 0x2263000
	0x01CED308 LDR X0, [X0 + 0x430]
	0x01CED30C BL 0x1B6E804
	0x01CED310 MOV X1, X0
	0x01CED314 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x2537000
	008 Move X23, 0x2264000
	009 Move X20, 0x2264000
	010 Move X21, 0x2262000
	011 Move W8, [X22+1683]
	012 Move X23, [X23+688]
	013 Move X20, [X20+680]
	014 Move X21, [X21+3448]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x2264000
	021 Move X0, [X0+680]
	022 Call 0x1B6F7F0
	023 Move X0, 0x2264000
	024 Move X0, [X0+688]
	025 Call 0x1B6F7F0
	026 Move X0, 0x2262000
	027 Move X0, [X0+3448]
	028 Call 0x1B6F7F0
	029 Move W8, 1
	030 Move [X22+1683], W8
	031 Move X0, [X23]
	032 Call 0x1B6FA0C
	033 Move X1, [X20]
	034 Move X20, X0
	035 Call List`1<Object>..ctor, X0
	036 Move [X19+392], X20
	037 Move X0, [X21]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1B6F8F8
	042 Move X0, X19
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X30, [X31+48]
	048 Move X23, [X31+56]
	049 Call MobController..ctor, X0
	050 Return 

Method: System.Int32 <UpdateWaiting>b__29_0(AnimalCompany.NetPlayer a, AnimalCompany.NetPlayer b)

Disassembly:
	0x01CED318 BL 0x1B6E8E8
	0x01CED31C STP X30, X19, [X31 - 0x10]!
	0x01CED320 LDR X8, [X0 + 0x50]
	0x01CED324 CBZ X8, 0x1CED338
	0x01CED328 LDP S0, S1, [X8 + 0x40]
	0x01CED32C LDR V2, [X8 + 0x48]
	0x01CED330 LDP X30, X19, [X31], #0x10
	0x01CED334 RET
	0x01CED338 ADRP X0, 0x2260000
	0x01CED33C LDR X0, [X0 + 0x490]
	0x01CED340 BL 0x1B6E804
	0x01CED344 BL 0x1B6EA0C
	0x01CED348 MOV X19, X0
	0x01CED34C ADRP X0, 0x2263000
	0x01CED350 LDR X0, [X0 + 0x438]
	0x01CED354 BL 0x1B6E804
	0x01CED358 MOV X1, X0
	0x01CED35C MOV X0, X19
	0x01CED360 MOV X2, X31
	0x01CED364 BL 0x31E7550
	0x01CED368 ADRP X0, 0x2263000
	0x01CED36C LDR X0, [X0 + 0x440]
	0x01CED370 BL 0x1B6E804
	0x01CED374 MOV X1, X0
	0x01CED378 MOV X0, X19
	0x01CED37C BL 0x1B6E8E8
	0x01CED380 STP X30, X19, [X31 - 0x10]!
	0x01CED384 LDR X8, [X0 + 0x50]
	0x01CED388 CBZ X8, 0x1CED39C
	0x01CED38C STP S0, S1, [X8 + 0x40]
	0x01CED390 STR S2, [X8 + 0x48]
	0x01CED394 LDP X30, X19, [X31], #0x10
	0x01CED398 RET
	0x01CED39C ADRP X0, 0x2260000
	0x01CED3A0 LDR X0, [X0 + 0x490]
	0x01CED3A4 BL 0x1B6E804
	0x01CED3A8 BL 0x1B6EA0C
	0x01CED3AC MOV X19, X0
	0x01CED3B0 ADRP X0, 0x2263000
	0x01CED3B4 LDR X0, [X0 + 0x438]
	0x01CED3B8 BL 0x1B6E804
	0x01CED3BC MOV X1, X0
	0x01CED3C0 MOV X0, X19
	0x01CED3C4 MOV X2, X31
	0x01CED3C8 BL 0x31E7550
	0x01CED3CC ADRP X0, 0x2263000
	0x01CED3D0 LDR X0, [X0 + 0x448]
	0x01CED3D4 BL 0x1B6E804
	0x01CED3D8 MOV X1, X0
	0x01CED3DC MOV X0, X19
	0x01CED3E0 BL 0x1B6E8E8
	0x01CED3E4 STP X30, X19, [X31 - 0x10]!
	0x01CED3E8 LDR X8, [X0 + 0x50]
	0x01CED3EC CBZ X8, 0x1CED404
	0x01CED3F0 LDR W8, [X8 + 0x4C]
	0x01CED3F4 CMP W8, 0x0
	0x01CED3F8 CSET W0, NE
	0x01CED3FC LDP X30, X19, [X31], #0x10
	0x01CED400 RET
	0x01CED404 ADRP X0, 0x2260000
	0x01CED408 LDR X0, [X0 + 0x490]
	0x01CED40C BL 0x1B6E804
	0x01CED410 BL 0x1B6EA0C
	0x01CED414 MOV X19, X0
	0x01CED418 ADRP X0, 0x2263000
	0x01CED41C LDR X0, [X0 + 0x450]
	0x01CED420 BL 0x1B6E804
	0x01CED424 MOV X1, X0
	0x01CED428 MOV X0, X19
	0x01CED42C MOV X2, X31
	0x01CED430 BL 0x31E7550
	0x01CED434 ADRP X0, 0x2263000
	0x01CED438 LDR X0, [X0 + 0x458]
	0x01CED43C BL 0x1B6E804
	0x01CED440 MOV X1, X0
	0x01CED444 MOV X0, X19
	0x01CED448 BL 0x1B6E8E8
	0x01CED44C STP X30, X19, [X31 - 0x10]!
	0x01CED450 LDR X8, [X0 + 0x50]
	0x01CED454 CBZ X8, 0x1CED468
	0x01CED458 AND W9, W1, 0x1
	0x01CED45C STR W9, [X8 + 0x4C]
	0x01CED460 LDP X30, X19, [X31], #0x10
	0x01CED464 RET
	0x01CED468 ADRP X0, 0x2260000
	0x01CED46C LDR X0, [X0 + 0x490]
	0x01CED470 BL 0x1B6E804
	0x01CED474 BL 0x1B6EA0C
	0x01CED478 MOV X19, X0
	0x01CED47C ADRP X0, 0x2263000
	0x01CED480 LDR X0, [X0 + 0x450]
	0x01CED484 BL 0x1B6E804
	0x01CED488 MOV X1, X0
	0x01CED48C MOV X0, X19
	0x01CED490 MOV X2, X31
	0x01CED494 BL 0x31E7550
	0x01CED498 ADRP X0, 0x2263000
	0x01CED49C LDR X0, [X0 + 0x460]
	0x01CED4A0 BL 0x1B6E804
	0x01CED4A4 MOV X1, X0
	0x01CED4A8 MOV X0, X19

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Compare X1, 0
	013 JumpIfEqual {121}
	014 Move X19, X0
	015 Move X0, X1
	016 Move X1, X31
	017 Move X20, X2
	018 Call Component.get_transform, X0
	019 Compare X0, 0
	020 JumpIfEqual {121}
	021 Move X1, X31
	022 Call Transform.get_position, X0
	023 Move X0, X19
	024 Move X1, X31
	025 Move V8, V0
	026 Move V9, V1
	027 Move V10, V2
	028 Call Component.get_transform, X0
	029 Compare X0, 0
	030 JumpIfEqual {121}
	031 Move X1, X31
	032 Call Transform.get_position, X0
	033 Move X21, 0x2537000
	034 Move W8, [X21+1286]
	035 Move V11, V0
	036 Move V12, V1
	037 Move V13, V2
	038 Compare W8, 0
	039 JumpIfNotEqual {45}
	040 Move X0, 0x2261000
	041 Move X0, [X0+1160]
	042 Call 0x1B6F7F0
	043 Move W8, 1
	044 Move [X21+1286], W8
	045 Move X22, 0x2261000
	046 Move X22, [X22+1160]
	047 Subtract S11, S8, S11
	048 Subtract S9, S9, S12
	049 Subtract S8, S10, S13
	050 Move X0, [X22]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1B6F8F8
	055 Multiply S0, S11, S11
	056 Multiply S1, S9, S9
	057 Add S0, S0, S1
	058 Multiply S1, S8, S8
	059 Add S0, S1, S0
	060 NotImplemented "Instruction FSQRT not yet implemented."
	061 Move [X31+60], S0
	062 Compare X20, 0
	063 JumpIfEqual {121}
	064 Move X0, X20
	065 Move X1, X31
	066 Call Component.get_transform, X0
	067 Compare X0, 0
	068 JumpIfEqual {121}
	069 Move X1, X31
	070 Call Transform.get_position, X0
	071 Move X0, X19
	072 Move X1, X31
	073 Move V8, V0
	074 Move V9, V1
	075 Move V10, V2
	076 Call Component.get_transform, X0
	077 Compare X0, 0
	078 JumpIfEqual {121}
	079 Move X1, X31
	080 Call Transform.get_position, X0
	081 Move W8, [X21+1286]
	082 Move V11, V0
	083 Move V12, V1
	084 Move V13, V2
	085 Compare W8, 0
	086 JumpIfNotEqual {92}
	087 Move X0, 0x2261000
	088 Move X0, [X0+1160]
	089 Call 0x1B6F7F0
	090 Move W8, 1
	091 Move [X21+1286], W8
	092 Move X0, [X22]
	093 Subtract S11, S8, S11
	094 Subtract S9, S9, S12
	095 Subtract S8, S10, S13
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1B6F8F8
	100 Multiply S0, S11, S11
	101 Multiply S1, S9, S9
	102 Add S0, S0, S1
	103 Multiply S1, S8, S8
	104 Add S0, S1, S0
	105 NotImplemented "Instruction FSQRT not yet implemented."
	106 Add X0, X31, 60
	107 Move X1, X31
	108 Call Single.CompareTo, X0, V0
	109 Move X20, [X31+80]
	110 Move X19, [X31+88]
	111 Move X22, [X31+64]
	112 Move X21, [X31+72]
	113 Move X30, [X31+48]
	114 Move D9, [X31+32]
	115 Move D8, [X31+40]
	116 Move D11, [X31+16]
	117 Move D10, [X31+24]
	118 Move D13, [X31+96]
	119 Move D12, [X31+104]
	120 Return X0
	121 Call 0x1B6FA1C

Method: System.Int32 <SetPreparing>b__30_0(AnimalCompany.NetPlayer a, AnimalCompany.NetPlayer b)

Disassembly:
	0x01CED4AC BL 0x1B6E8E8
	0x01CED4B0 STP X30, X19, [X31 - 0x10]!
	0x01CED4B4 LDR X8, [X0 + 0x50]
	0x01CED4B8 CBZ X8, 0x1CED4C8
	0x01CED4BC LDR V0, [X8 + 0x50]
	0x01CED4C0 LDP X30, X19, [X31], #0x10
	0x01CED4C4 RET
	0x01CED4C8 ADRP X0, 0x2260000
	0x01CED4CC LDR X0, [X0 + 0x490]
	0x01CED4D0 BL 0x1B6E804
	0x01CED4D4 BL 0x1B6EA0C
	0x01CED4D8 MOV X19, X0
	0x01CED4DC ADRP X0, 0x2263000
	0x01CED4E0 LDR X0, [X0 + 0x468]
	0x01CED4E4 BL 0x1B6E804
	0x01CED4E8 MOV X1, X0
	0x01CED4EC MOV X0, X19
	0x01CED4F0 MOV X2, X31
	0x01CED4F4 BL 0x31E7550
	0x01CED4F8 ADRP X0, 0x2263000
	0x01CED4FC LDR X0, [X0 + 0x470]
	0x01CED500 BL 0x1B6E804
	0x01CED504 MOV X1, X0
	0x01CED508 MOV X0, X19
	0x01CED50C BL 0x1B6E8E8
	0x01CED510 STP X30, X19, [X31 - 0x10]!
	0x01CED514 LDR X8, [X0 + 0x50]
	0x01CED518 CBZ X8, 0x1CED528
	0x01CED51C STR S0, [X8 + 0x50]
	0x01CED520 LDP X30, X19, [X31], #0x10
	0x01CED524 RET
	0x01CED528 ADRP X0, 0x2260000
	0x01CED52C LDR X0, [X0 + 0x490]
	0x01CED530 BL 0x1B6E804
	0x01CED534 BL 0x1B6EA0C
	0x01CED538 MOV X19, X0
	0x01CED53C ADRP X0, 0x2263000
	0x01CED540 LDR X0, [X0 + 0x468]
	0x01CED544 BL 0x1B6E804
	0x01CED548 MOV X1, X0
	0x01CED54C MOV X0, X19
	0x01CED550 MOV X2, X31
	0x01CED554 BL 0x31E7550
	0x01CED558 ADRP X0, 0x2263000
	0x01CED55C LDR X0, [X0 + 0x478]
	0x01CED560 BL 0x1B6E804
	0x01CED564 MOV X1, X0
	0x01CED568 MOV X0, X19
	0x01CED56C BL 0x1B6E8E8
	0x01CED570 STP X30, X19, [X31 - 0x10]!
	0x01CED574 LDR X8, [X0 + 0x50]
	0x01CED578 CBZ X8, 0x1CED588
	0x01CED57C LDR V0, [X8 + 0x54]
	0x01CED580 LDP X30, X19, [X31], #0x10
	0x01CED584 RET
	0x01CED588 ADRP X0, 0x2260000
	0x01CED58C LDR X0, [X0 + 0x490]
	0x01CED590 BL 0x1B6E804
	0x01CED594 BL 0x1B6EA0C
	0x01CED598 MOV X19, X0
	0x01CED59C ADRP X0, 0x2263000
	0x01CED5A0 LDR X0, [X0 + 0x480]
	0x01CED5A4 BL 0x1B6E804
	0x01CED5A8 MOV X1, X0
	0x01CED5AC MOV X0, X19
	0x01CED5B0 MOV X2, X31
	0x01CED5B4 BL 0x31E7550
	0x01CED5B8 ADRP X0, 0x2263000
	0x01CED5BC LDR X0, [X0 + 0x488]
	0x01CED5C0 BL 0x1B6E804
	0x01CED5C4 MOV X1, X0
	0x01CED5C8 MOV X0, X19
	0x01CED5CC BL 0x1B6E8E8
	0x01CED5D0 STP X30, X19, [X31 - 0x10]!
	0x01CED5D4 LDR X8, [X0 + 0x50]
	0x01CED5D8 CBZ X8, 0x1CED5E8
	0x01CED5DC STR S0, [X8 + 0x54]
	0x01CED5E0 LDP X30, X19, [X31], #0x10
	0x01CED5E4 RET
	0x01CED5E8 ADRP X0, 0x2260000
	0x01CED5EC LDR X0, [X0 + 0x490]
	0x01CED5F0 BL 0x1B6E804
	0x01CED5F4 BL 0x1B6EA0C
	0x01CED5F8 MOV X19, X0
	0x01CED5FC ADRP X0, 0x2263000
	0x01CED600 LDR X0, [X0 + 0x480]
	0x01CED604 BL 0x1B6E804
	0x01CED608 MOV X1, X0
	0x01CED60C MOV X0, X19
	0x01CED610 MOV X2, X31
	0x01CED614 BL 0x31E7550
	0x01CED618 ADRP X0, 0x2263000
	0x01CED61C LDR X0, [X0 + 0x490]
	0x01CED620 BL 0x1B6E804
	0x01CED624 MOV X1, X0
	0x01CED628 MOV X0, X19
	0x01CED62C BL 0x1B6E8E8
	0x01CED630 STP X30, X19, [X31 - 0x10]!
	0x01CED634 LDR X8, [X0 + 0x50]
	0x01CED638 CBZ X8, 0x1CED648
	0x01CED63C LDR V0, [X8 + 0x58]

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Compare X1, 0
	013 JumpIfEqual {121}
	014 Move X19, X0
	015 Move X0, X1
	016 Move X1, X31
	017 Move X20, X2
	018 Call Component.get_transform, X0
	019 Compare X0, 0
	020 JumpIfEqual {121}
	021 Move X1, X31
	022 Call Transform.get_position, X0
	023 Move X0, X19
	024 Move X1, X31
	025 Move V8, V0
	026 Move V9, V1
	027 Move V10, V2
	028 Call Component.get_transform, X0
	029 Compare X0, 0
	030 JumpIfEqual {121}
	031 Move X1, X31
	032 Call Transform.get_position, X0
	033 Move X21, 0x2537000
	034 Move W8, [X21+1286]
	035 Move V11, V0
	036 Move V12, V1
	037 Move V13, V2
	038 Compare W8, 0
	039 JumpIfNotEqual {45}
	040 Move X0, 0x2261000
	041 Move X0, [X0+1160]
	042 Call 0x1B6F7F0
	043 Move W8, 1
	044 Move [X21+1286], W8
	045 Move X22, 0x2261000
	046 Move X22, [X22+1160]
	047 Subtract S11, S8, S11
	048 Subtract S9, S9, S12
	049 Subtract S8, S10, S13
	050 Move X0, [X22]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1B6F8F8
	055 Multiply S0, S11, S11
	056 Multiply S1, S9, S9
	057 Add S0, S0, S1
	058 Multiply S1, S8, S8
	059 Add S0, S1, S0
	060 NotImplemented "Instruction FSQRT not yet implemented."
	061 Move [X31+60], S0
	062 Compare X20, 0
	063 JumpIfEqual {121}
	064 Move X0, X20
	065 Move X1, X31
	066 Call Component.get_transform, X0
	067 Compare X0, 0
	068 JumpIfEqual {121}
	069 Move X1, X31
	070 Call Transform.get_position, X0
	071 Move X0, X19
	072 Move X1, X31
	073 Move V8, V0
	074 Move V9, V1
	075 Move V10, V2
	076 Call Component.get_transform, X0
	077 Compare X0, 0
	078 JumpIfEqual {121}
	079 Move X1, X31
	080 Call Transform.get_position, X0
	081 Move W8, [X21+1286]
	082 Move V11, V0
	083 Move V12, V1
	084 Move V13, V2
	085 Compare W8, 0
	086 JumpIfNotEqual {92}
	087 Move X0, 0x2261000
	088 Move X0, [X0+1160]
	089 Call 0x1B6F7F0
	090 Move W8, 1
	091 Move [X21+1286], W8
	092 Move X0, [X22]
	093 Subtract S11, S8, S11
	094 Subtract S9, S9, S12
	095 Subtract S8, S10, S13
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1B6F8F8
	100 Multiply S0, S11, S11
	101 Multiply S1, S9, S9
	102 Add S0, S0, S1
	103 Multiply S1, S8, S8
	104 Add S0, S1, S0
	105 NotImplemented "Instruction FSQRT not yet implemented."
	106 Add X0, X31, 60
	107 Move X1, X31
	108 Call Single.CompareTo, X0, V0
	109 Move X20, [X31+80]
	110 Move X19, [X31+88]
	111 Move X22, [X31+64]
	112 Move X21, [X31+72]
	113 Move X30, [X31+48]
	114 Move D9, [X31+32]
	115 Move D8, [X31+40]
	116 Move D11, [X31+16]
	117 Move D10, [X31+24]
	118 Move D13, [X31+96]
	119 Move D12, [X31+104]
	120 Return X0
	121 Call 0x1B6FA1C

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01CED640 LDP X30, X19, [X31], #0x10
	0x01CED644 RET
	0x01CED648 ADRP X0, 0x2260000
	0x01CED64C LDR X0, [X0 + 0x490]
	0x01CED650 BL 0x1B6E804
	0x01CED654 BL 0x1B6EA0C
	0x01CED658 MOV X19, X0
	0x01CED65C ADRP X0, 0x2263000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, W31
	004 Move X19, X0
	005 Call MobController.CopyBackingFieldsToState, X0, X1
	006 Move W1, [X19+372]
	007 Move X0, X19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call LongAisleController.set_phase, X0, X1
	011 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01CED660 LDR X0, [X0 + 0x498]
	0x01CED664 BL 0x1B6E804
	0x01CED668 MOV X1, X0
	0x01CED66C MOV X0, X19
	0x01CED670 MOV X2, X31
	0x01CED674 BL 0x31E7550
	0x01CED678 ADRP X0, 0x2263000
	0x01CED67C LDR X0, [X0 + 0x4A0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobController.CopyStateToBackingFields, X0
	005 Move X0, X19
	006 Call LongAisleController.get_phase, X0
	007 Move [X19+372], W0
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 

