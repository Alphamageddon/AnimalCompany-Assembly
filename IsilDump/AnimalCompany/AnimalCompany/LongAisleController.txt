Type: AnimalCompany.LongAisleController

Method: AnimalCompany.LongAisleController/Phase get_phase()

Disassembly:
	0x01DFBB6C BL 0x1DEA4B8
	0x01DFBB70 FADD S0, S8, S0
	0x01DFBB74 STR S0, [X19 + 0x1A8]
	0x01DFBB78 LDP X20, X19, [X31 + 0x60]
	0x01DFBB7C LDP X30, X21, [X31 + 0x50]
	0x01DFBB80 LDP D9, D8, [X31 + 0x40]
	0x01DFBB84 LDP D11, D10, [X31 + 0x30]
	0x01DFBB88 LDP D13, D12, [X31 + 0x20]
	0x01DFBB8C LDP D15, D14, [X31 + 0x10]
	0x01DFBB90 ADD X31, X31, 0x70
	0x01DFBB94 RET
	0x01DFBB98 MOV X0, X19
	0x01DFBB9C LDP X20, X19, [X31 + 0x60]
	0x01DFBBA0 LDP X30, X21, [X31 + 0x50]
	0x01DFBBA4 LDP D9, D8, [X31 + 0x40]
	0x01DFBBA8 LDP D11, D10, [X31 + 0x30]
	0x01DFBBAC LDP D13, D12, [X31 + 0x20]
	0x01DFBBB0 LDP D15, D14, [X31 + 0x10]
	0x01DFBBB4 ADD X31, X31, 0x70
	0x01DFBBB8 B 0x1DFC260
	0x01DFBBBC BL 0x1C16F20
	0x01DFBBC0 STR D14, [X31 - 0x90]!
	0x01DFBBC4 STP D13, D12, [X31 + 0x10]
	0x01DFBBC8 STP D11, D10, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+60]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x22F9000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x22FF000
	016 Move X0, [X0+1296]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22FF000
	023 Move X0, [X0+1304]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_phase(AnimalCompany.LongAisleController/Phase value)

Disassembly:
	0x01DFBBCC STP D9, D8, [X31 + 0x30]
	0x01DFBBD0 STP X30, X27, [X31 + 0x40]
	0x01DFBBD4 STP X26, X25, [X31 + 0x50]
	0x01DFBBD8 STP X24, X23, [X31 + 0x60]
	0x01DFBBDC STP X22, X21, [X31 + 0x70]
	0x01DFBBE0 STP X20, X19, [X31 + 0x80]
	0x01DFBBE4 ADRP X20, 0x25DD000
	0x01DFBBE8 LDRB W8, [X20 + 0xD3D]
	0x01DFBBEC MOV X19, X0
	0x01DFBBF0 TBNZ X8, 0x0, 0x1DFBC20
	0x01DFBBF4 ADRP X0, 0x22FE000
	0x01DFBBF8 LDR X0, [X0 + 0x148]
	0x01DFBBFC BL 0x1C16CF4
	0x01DFBC00 ADRP X0, 0x22F8000
	0x01DFBC04 LDR X0, [X0 + 0x5D8]
	0x01DFBC08 BL 0x1C16CF4
	0x01DFBC0C ADRP X0, 0x22F8000
	0x01DFBC10 LDR X0, [X0 + 0x5F8]
	0x01DFBC14 BL 0x1C16CF4
	0x01DFBC18 MOVZ W8, 0x1
	0x01DFBC1C STRB W8, [X20 + 0xD3D]
	0x01DFBC20 STR X31, [X31 + 0x8]
	0x01DFBC24 LDR X8, [X19 + 0xC0]
	0x01DFBC28 CBZ X8, 0x1DFC010

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+60], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22F9000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x22FF000
	016 Move X0, [X0+1296]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22FF000
	023 Move X0, [X0+1312]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void HandlePhaseChanged()

Disassembly:
	0x01DFBC2C LDR X8, [X8 + 0x38]
	0x01DFBC30 CBZ X8, 0x1DFC010
	0x01DFBC34 LDR V8, [X19 + 0x1AC]
	0x01DFBC38 LDR W9, [X8 + 0x18]
	0x01DFBC3C FMOV S0, 5
	0x01DFBC40 FCMP S8, S0
	0x01DFBC44 B.GE 0x1DFBC54
	0x01DFBC48 CBZ W9, 0x1DFC014
	0x01DFBC4C ADD X8, X8, 0x20
	0x01DFBC50 B 0x1DFBC60
	0x01DFBC54 CMP W9, 0x1
	0x01DFBC58 B.LS 0x1DFC014
	0x01DFBC5C ADD X8, X8, 0x24
	0x01DFBC60 LDR V11, [X8]
	0x01DFBC64 MOV X0, X19
	0x01DFBC68 MOV X1, X31
	0x01DFBC6C BL 0x1DEA4B8
	0x01DFBC70 LDR X0, [X19 + 0xD0]
	0x01DFBC74 FADD S0, S8, S0
	0x01DFBC78 STR S0, [X19 + 0x1AC]
	0x01DFBC7C CBZ X0, 0x1DFC010
	0x01DFBC80 ADRP X22, 0x22F8000
	0x01DFBC84 ADRP X21, 0x22F8000
	0x01DFBC88 LDR X22, [X22 + 0x5D8]
	0x01DFBC8C LDR X21, [X21 + 0x5F8]
	0x01DFBC90 MOV X1, X31
	0x01DFBC94 BL 0x3C3F58C
	0x01DFBC98 LDR X0, [X22]
	0x01DFBC9C MOV V8.16B, V0.16B
	0x01DFBCA0 MOV V9.16B, V1.16B
	0x01DFBCA4 MOV V10.16B, V2.16B
	0x01DFBCA8 LDR W8, [X0 + 0xE0]
	0x01DFBCAC CBNZ W8, 0x1DFBCB8
	0x01DFBCB0 BL 0x1C16DFC
	0x01DFBCB4 LDR X0, [X22]
	0x01DFBCB8 LDR X8, [X0 + 0xB8]
	0x01DFBCBC MOV X1, X31
	0x01DFBCC0 LDR W0, [X8]
	0x01DFBCC4 BL 0x3C35CB8
	0x01DFBCC8 LDR X8, [X21]
	0x01DFBCCC MOV W20, W0
	0x01DFBCD0 LDR W9, [X8 + 0xE0]
	0x01DFBCD4 CBNZ W9, 0x1DFBCE0
	0x01DFBCD8 MOV X0, X8
	0x01DFBCDC BL 0x1C16DFC
	0x01DFBCE0 ADRP X8, 0xFFFFFFFFFECEF000
	0x01DFBCE4 LDR V3, [X8 + 0x44C]
	0x01DFBCE8 MOV V0.16B, V8.16B
	0x01DFBCEC MOV V1.16B, V9.16B
	0x01DFBCF0 MOV V2.16B, V10.16B
	0x01DFBCF4 MOV W0, W20
	0x01DFBCF8 MOV X1, X31
	0x01DFBCFC BL 0x3C8D090
	0x01DFBD00 CBZ X0, 0x1DFC010

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+544]
	005 Compare X0, 0
	006 JumpIfEqual {68}
	007 Move X1, X31
	008 Call AudioSource.get_isPlaying, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {18}
	013 Move X0, [X19+544]
	014 Compare X0, 0
	015 JumpIfEqual {68}
	016 Move X1, X31
	017 Call AudioSource.Stop, X0
	018 Move X0, X19
	019 Call LongAisleController.get_phase, X0
	020 Subtract W8, W0, 1
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X9, -19714048
	023 Add X9, X9, 2422
	024 NotImplemented "Instruction ADR not yet implemented."
	025 Move W11, [X9]
	026 Add X10, X10, X11
	027 CallNoReturn X10
	028 Move X0, [X19+200]
	029 Compare X0, 0
	030 JumpIfEqual {68}
	031 Move X8, [X0]
	032 Move X2, [X8+472]
	033 Move X1, [X8+480]
	034 Move X0, [X19+200]
	035 Compare X0, 0
	036 JumpIfEqual {68}
	037 Move X8, [X0]
	038 Move X2, [X8+520]
	039 Move X1, [X8+528]
	040 Move X0, [X19+200]
	041 Compare X0, 0
	042 JumpIfEqual {68}
	043 Move X8, [X0]
	044 Move S0, 1
	045 Move X9, [X8+504]
	046 Move X1, [X8+512]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move X0, [X19+544]
	049 Compare X0, 0
	050 JumpIfEqual {68}
	051 Move X1, X31
	052 Move X30, [X31+16]
	053 Move X19, [X31+24]
	054 Call AudioSource.Play, X0
	055 Return 
	056 Move X30, [X31+16]
	057 Move X19, [X31+24]
	058 Return 
	059 Move X0, [X19+200]
	060 Compare X0, 0
	061 JumpIfEqual {68}
	062 Move X8, [X0]
	063 Move X2, [X8+584]
	064 Move X1, [X8+592]
	065 Move X30, [X31+16]
	066 Move X19, [X31+24]
	067 CallNoReturn X2
	068 Call 0x1C17F20

Method: System.Void Setup()

Disassembly:
	0x01DFBD04 LDR X8, [X0 + 0x18]
	0x01DFBD08 CBNZ X8, 0x1DFBD1C
	0x01DFBD0C LDR V0, [X19 + 0x1AC]
	0x01DFBD10 FMOV S1, 10
	0x01DFBD14 FCMP S0, S1
	0x01DFBD18 B.LE 0x1DFBFC8
	0x01DFBD1C MOV X0, X19
	0x01DFBD20 BL 0x1DFC2C8
	0x01DFBD24 MOV X0, X19
	0x01DFBD28 MOV X1, X31
	0x01DFBD2C BL 0x3C32E90
	0x01DFBD30 CBZ X0, 0x1DFC010
	0x01DFBD34 MOV X1, X31
	0x01DFBD38 BL 0x3C3F58C
	0x01DFBD3C ADRP X20, 0x25DD000
	0x01DFBD40 LDRB W8, [X20 + 0x786]
	0x01DFBD44 MOV V8.16B, V0.16B
	0x01DFBD48 MOV V9.16B, V1.16B
	0x01DFBD4C MOV V10.16B, V2.16B
	0x01DFBD50 CBNZ W8, 0x1DFBD68
	0x01DFBD54 ADRP X0, 0x22F8000
	0x01DFBD58 LDR X0, [X0 + 0x5A0]
	0x01DFBD5C BL 0x1C16CF4
	0x01DFBD60 MOVZ W8, 0x1
	0x01DFBD64 STRB W8, [X20 + 0x786]
	0x01DFBD68 LDR X8, [X19 + 0xC0]
	0x01DFBD6C CBZ X8, 0x1DFC010
	0x01DFBD70 ADRP X20, 0x22F8000
	0x01DFBD74 LDR X20, [X20 + 0x5A0]
	0x01DFBD78 LDR X0, [X22]
	0x01DFBD7C LDR V11, [X8 + 0x4C]
	0x01DFBD80 LDR X9, [X20]
	0x01DFBD84 LDR W10, [X0 + 0xE0]
	0x01DFBD88 LDR X9, [X9 + 0xB8]
	0x01DFBD8C LDP S12, S13, [X9 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.Setup, X0
	006 Move X0, [X19+232]
	007 Compare X0, 0
	008 JumpIfEqual {42}
	009 Move W1, 1
	010 Move X2, X31
	011 Call NavMeshAgent.set_updatePosition, X0, X1
	012 Move X0, [X19+232]
	013 Compare X0, 0
	014 JumpIfEqual {42}
	015 Move W1, 1
	016 Move X2, X31
	017 Call NavMeshAgent.set_updateRotation, X0, X1
	018 Move X8, [X19+192]
	019 Compare X8, 0
	020 JumpIfEqual {42}
	021 Move X8, [X8+48]
	022 Compare X8, 0
	023 JumpIfEqual {42}
	024 Move W9, [X8+24]
	025 Compare W9, 0
	026 JumpIfEqual {43}
	027 Move X0, [X19+232]
	028 Compare X0, 0
	029 JumpIfEqual {42}
	030 Move V0, [X8+32]
	031 Move X1, X31
	032 Call NavMeshAgent.set_speed, X0, V0
	033 Move X0, [X19+232]
	034 Compare X0, 0
	035 JumpIfEqual {42}
	036 Move W1, W31
	037 Move X2, X31
	038 Call NavMeshAgent.set_isStopped, X0, X1
	039 Move X0, X19
	040 Move X30, [X31+16]
	041 Move X19, [X31+24]
	042 Call 0x1C17F20
	043 Call 0x1C17F28

Method: System.Void GetAisleData()

Disassembly:
	0x01DFBDFC CMP W8, 0x1
	0x01DFBE00 B.LT 0x1DFBFA0
	0x01DFBE04 ADRP X24, 0x22FE000
	0x01DFBE08 ADRP X9, 0xFFFFFFFFFECEF000
	0x01DFBE0C ADRP X22, 0x22F8000
	0x01DFBE10 LDR X24, [X24 + 0x148]
	0x01DFBE14 LDR V14, [X9 + 0x17C]
	0x01DFBE18 LDR X22, [X22 + 0x5A8]
	0x01DFBE1C MOV W23, W31
	0x01DFBE20 ADRP X25, 0x25DD000
	0x01DFBE24 MOVZ W26, 0x1
	0x01DFBE28 ADRP X27, 0x25DD000
	0x01DFBE2C CMP W23, W8
	0x01DFBE30 B.CS 0x1DFC014
	0x01DFBE34 ADD X8, X21, W23, 0x3, SXTW
	0x01DFBE38 LDR X0, [X8 + 0x20]
	0x01DFBE3C CBZ X0, 0x1DFC010
	0x01DFBE40 LDR X2, [X24]
	0x01DFBE44 ADD X1, X31, 0x8
	0x01DFBE48 BL 0x21A4990
	0x01DFBE4C TBZ X0, 0x0, 0x1DFBF90
	0x01DFBE50 LDR X0, [X31 + 0x8]
	0x01DFBE54 CBZ X0, 0x1DFC010
	0x01DFBE58 MOV X1, X31
	0x01DFBE5C BL 0x1DAEC64
	0x01DFBE60 TBNZ X0, 0x0, 0x1DFBF90
	0x01DFBE64 LDR X8, [X31 + 0x8]
	0x01DFBE68 CBZ X8, 0x1DFC010
	0x01DFBE6C LDR X0, [X8 + 0x90]
	0x01DFBE70 CBZ X0, 0x1DFC010
	0x01DFBE74 MOV X1, X31
	0x01DFBE78 BL 0x3C3F58C
	0x01DFBE7C MOV X0, X19
	0x01DFBE80 MOV X1, X31
	0x01DFBE84 MOV V8.16B, V0.16B
	0x01DFBE88 MOV V9.16B, V1.16B
	0x01DFBE8C MOV V10.16B, V2.16B
	0x01DFBE90 BL 0x3C32E90
	0x01DFBE94 CBZ X0, 0x1DFC010
	0x01DFBE98 MOV X1, X31
	0x01DFBE9C BL 0x3C3F58C
	0x01DFBEA0 LDRB W8, [X25 + 0x785]
	0x01DFBEA4 MOV V11.16B, V0.16B
	0x01DFBEA8 MOV V12.16B, V1.16B
	0x01DFBEAC MOV V13.16B, V2.16B
	0x01DFBEB0 CBNZ W8, 0x1DFBEC0
	0x01DFBEB4 MOV X0, X22
	0x01DFBEB8 BL 0x1C16CF4
	0x01DFBEBC STRB W26, [X25 + 0x785]
	0x01DFBEC0 LDR X0, [X22]
	0x01DFBEC4 LDR W8, [X0 + 0xE0]
	0x01DFBEC8 CBNZ W8, 0x1DFBED0
	0x01DFBECC BL 0x1C16DFC
	0x01DFBED0 FSUB S0, S8, S11
	0x01DFBED4 FSUB S1, S9, S12
	0x01DFBED8 FSUB S2, S10, S13
	0x01DFBEDC FMUL S3, S0, S0
	0x01DFBEE0 FMUL S4, S1, S1
	0x01DFBEE4 FADD S3, S3, S4
	0x01DFBEE8 FMUL S4, S2, S2
	0x01DFBEEC FADD S3, S4, S3
	0x01DFBEF0 FSQRT S3, S3
	0x01DFBEF4 FCMP S3, S14
	0x01DFBEF8 B.LE 0x1DFBF0C
	0x01DFBEFC FDIV S0, S0, S3
	0x01DFBF00 FDIV S1, S1, S3
	0x01DFBF04 FDIV S2, S2, S3
	0x01DFBF08 B 0x1DFBF30
	0x01DFBF0C LDRB W8, [X27 + 0x783]
	0x01DFBF10 CBNZ W8, 0x1DFBF20
	0x01DFBF14 MOV X0, X20
	0x01DFBF18 BL 0x1C16CF4
	0x01DFBF1C STRB W26, [X27 + 0x783]
	0x01DFBF20 LDR X8, [X20]
	0x01DFBF24 LDR X8, [X8 + 0xB8]
	0x01DFBF28 LDP S0, S1, [X8]
	0x01DFBF2C LDR V2, [X8 + 0x8]
	0x01DFBF30 LDR X8, [X19 + 0xC0]
	0x01DFBF34 CBZ X8, 0x1DFC010
	0x01DFBF38 LDR X9, [X19 + 0x40]
	0x01DFBF3C CBZ X9, 0x1DFBF50
	0x01DFBF40 LDR X9, [X9 + 0x20]
	0x01DFBF44 CBZ X9, 0x1DFBF50
	0x01DFBF48 LDR W6, [X9]
	0x01DFBF4C B 0x1DFBF54
	0x01DFBF50 MOV X6, X31
	0x01DFBF54 LDR X0, [X31 + 0x8]
	0x01DFBF58 CBZ X0, 0x1DFC010
	0x01DFBF5C LDR V3, [X8 + 0x50]
	0x01DFBF60 LDR W1, [X8 + 0x24]
	0x01DFBF64 LDR X3, [X8 + 0xB8]
	0x01DFBF68 LDR X5, [X8 + 0x18]
	0x01DFBF6C LDR W8, [X19 + 0x68]
	0x01DFBF70 LDR X2, [X19 + 0xD0]
	0x01DFBF74 FMUL S0, S0, S3
	0x01DFBF78 FMUL S1, S1, S3
	0x01DFBF7C FMUL S2, S2, S3
	0x01DFBF80 BFM X6, X8, 0x20, 0x1F
	0x01DFBF84 MOV X4, X3
	0x01DFBF88 MOV X7, X31
	0x01DFBF8C BL 0x1DB7738
	0x01DFBF90 LDR W8, [X21 + 0x18]
	0x01DFBF94 ADD W23, W23, 0x1
	0x01DFBF98 CMP W23, W8
	0x01DFBF9C B.LT 0x1DFBE2C
	0x01DFBFA0 LDP X20, X19, [X31 + 0x80]
	0x01DFBFA4 LDP X22, X21, [X31 + 0x70]
	0x01DFBFA8 LDP X24, X23, [X31 + 0x60]
	0x01DFBFAC LDP X26, X25, [X31 + 0x50]
	0x01DFBFB0 LDP X30, X27, [X31 + 0x40]
	0x01DFBFB4 LDP D9, D8, [X31 + 0x30]
	0x01DFBFB8 LDP D11, D10, [X31 + 0x20]
	0x01DFBFBC LDP D13, D12, [X31 + 0x10]
	0x01DFBFC0 LDR V14, [X31], #0x90
	0x01DFBFC4 RET
	0x01DFBFC8 LDR X20, [X19 + 0xE8]
	0x01DFBFCC LDR V8, [X19 + 0x1CC]
	0x01DFBFD0 LDR V9, [X19 + 0x1D0]
	0x01DFBFD4 LDR V10, [X19 + 0x1D4]
	0x01DFBFD8 MOV X0, X19
	0x01DFBFDC MOV X1, X31
	0x01DFBFE0 BL 0x1DEA4B8
	0x01DFBFE4 CBZ X20, 0x1DFC010
	0x01DFBFE8 FMUL S1, S11, S10
	0x01DFBFEC FMUL S3, S11, S9
	0x01DFBFF0 FMUL S4, S11, S8
	0x01DFBFF4 FMUL S2, S1, S0
	0x01DFBFF8 FMUL S1, S3, S0
	0x01DFBFFC FMUL S0, S4, S0
	0x01DFC000 MOV X0, X20
	0x01DFC004 MOV X1, X31
	0x01DFC008 BL 0x3BE16E0
	0x01DFC00C B 0x1DFBD24
	0x01DFC010 BL 0x1C16F20
	0x01DFC014 BL 0x1C16F28
	0x01DFC018 STR D8, [X31 - 0x20]!
	0x01DFC01C STP X30, X19, [X31 + 0x10]
	0x01DFC020 LDR V8, [X0 + 0x1B0]
	0x01DFC024 FMOV S0, 3
	0x01DFC028 MOV X19, X0
	0x01DFC02C FCMP S8, S0
	0x01DFC030 B.PL 0x1DFC04C
	0x01DFC034 MOV X0, X19
	0x01DFC038 MOV X1, X31
	0x01DFC03C BL 0x1DEA4B8
	0x01DFC040 FADD S0, S8, S0
	0x01DFC044 STR S0, [X19 + 0x1B0]
	0x01DFC048 B 0x1DFC05C
	0x01DFC04C MOVZ W1, 0x5
	0x01DFC050 MOV X0, X19
	0x01DFC054 BL 0x1DFABCC
	0x01DFC058 STR W31, [X19 + 0x1B4]
	0x01DFC05C LDP X30, X19, [X31 + 0x10]
	0x01DFC060 LDR V8, [X31], #0x20
	0x01DFC064 RET
	0x01DFC068 STR D8, [X31 - 0x30]!
	0x01DFC06C STP X30, X21, [X31 + 0x10]
	0x01DFC070 STP X20, X19, [X31 + 0x20]
	0x01DFC074 ADRP X21, 0x25DC000
	0x01DFC078 ADRP X20, 0x22FC000
	0x01DFC07C LDRB W8, [X21 + 0xD3E]
	0x01DFC080 LDR X20, [X20 + 0xC40]
	0x01DFC084 MOV X19, X0
	0x01DFC088 TBNZ X8, 0x0, 0x1DFC0A0
	0x01DFC08C ADRP X0, 0x22FC000
	0x01DFC090 LDR X0, [X0 + 0xC40]
	0x01DFC094 BL 0x1C16CF4
	0x01DFC098 MOVZ W8, 0x1
	0x01DFC09C STRB W8, [X21 + 0xD3E]
	0x01DFC0A0 LDR X0, [X20]
	0x01DFC0A4 ADD X20, X19, 0x178
	0x01DFC0A8 LDR W8, [X0 + 0xE0]
	0x01DFC0AC CBNZ W8, 0x1DFC0B4
	0x01DFC0B0 BL 0x1C16DFC
	0x01DFC0B4 MOV X0, X19
	0x01DFC0B8 MOV X1, X20

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+96], D14
	003 Move [X31+104], D13
	004 Move [X31+112], D12
	005 Move [X31+120], D11
	006 Move [X31+128], D10
	007 Move [X31+136], D9
	008 Move [X31+144], D8
	009 Move [X31+152], X30
	010 Move [X31+160], X28
	011 Move [X31+168], X27
	012 Move [X31+176], X26
	013 Move [X31+184], X25
	014 Move [X31+192], X24
	015 Move [X31+200], X23
	016 Move [X31+208], X22
	017 Move [X31+216], X21
	018 Move [X31+224], X20
	019 Move [X31+232], X19
	020 Move X20, 0x25DE000
	021 Move W8, [X20+3383]
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {38}
	027 Move X0, 0x22FF000
	028 Move X0, [X0+1320]
	029 Call 0x1C17CF4
	030 Move X0, 0x22F9000
	031 Move X0, [X0+1432]
	032 Call 0x1C17CF4
	033 Move X0, 0x22F9000
	034 Move X0, [X0+1528]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+3383], W8
	038 Move [X31+88], X31
	039 Move X0, [X19+208]
	040 Compare X0, 0
	041 JumpIfEqual {214}
	042 Move X20, 0x22F9000
	043 Move X20, [X20+1528]
	044 Move X1, X31
	045 Call Transform.get_position, X0
	046 Move W0, [X19+528]
	047 Move X1, X31
	048 Move V8, V0
	049 Move V9, V1
	050 Move V10, V2
	051 Call LayerMask.op_Implicit, X0
	052 Move X8, [X20]
	053 Move W20, W0
	054 Move W9, [X8+224]
	055 Compare W9, 0
	056 JumpIfNotEqual {59}
	057 Move X0, X8
	058 Call 0x1C17DFC
	059 Move S3, 0.5
	060 Move V0, V8
	061 Move V1, V9
	062 Move V2, V10
	063 Move W0, W20
	064 Move X1, X31
	065 Call Physics.OverlapSphere, X0, V0, X1
	066 Compare X0, 0
	067 JumpIfEqual {214}
	068 Move W8, [X0+24]
	069 Move X24, 0x22F9000
	070 Move X24, [X24+1432]
	071 Move X21, X0
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X26, 0x22FF000
	074 Move X22, 0x22F9000
	075 Move X26, [X26+1320]
	076 Move X22, [X22+1448]
	077 Move TEMP, 0x80800000
	078 Not TEMP
	079 Move W9, TEMP
	080 Move W25, W31
	081 Move X20, X31
	082 Move X27, 0x25DE000
	083 Move S14, W9
	084 Move W28, 1
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Add X8, X21, W25
	087 Move X0, [X8+32]
	088 Compare X0, 0
	089 JumpIfEqual {214}
	090 Move X2, [X26]
	091 Add X1, X31, 88
	092 Call 0x21A5990, X0, X1
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {158}
	097 Move X0, [X24]
	098 Move X23, [X19+352]
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {103}
	102 Call 0x1C17DFC
	103 Move X0, X23
	104 Move X1, X31
	105 Move X2, X31
	106 Call Object.op_Inequality, X0, X1
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {162}
	111 Move X0, [X19+352]
	112 Compare X0, 0
	113 JumpIfEqual {214}
	114 Move X1, X31
	115 Call Component.get_transform, X0
	116 Compare X0, 0
	117 JumpIfEqual {214}
	118 Move X1, X31
	119 Call Transform.get_position, X0
	120 Move X0, [X31+88]
	121 Compare X0, 0
	122 JumpIfEqual {214}
	123 Move X1, X31
	124 Move V8, V0
	125 Move V9, V1
	126 Move V10, V2
	127 Call Component.get_transform, X0
	128 Compare X0, 0
	129 JumpIfEqual {214}
	130 Move X1, X31
	131 Call Transform.get_position, X0
	132 Move W8, [X27+2140]
	133 Move V11, V0
	134 Move V12, V1
	135 Move V13, V2
	136 Compare W8, 0
	137 JumpIfNotEqual {141}
	138 Move X0, X22
	139 Call 0x1C17CF4
	140 Move [X27+2140], W28
	141 Move X0, [X22]
	142 Move W8, [X0+224]
	143 Compare W8, 0
	144 JumpIfNotEqual {146}
	145 Call 0x1C17DFC
	146 Subtract S0, S8, S11
	147 Subtract S1, S9, S12
	148 Subtract S2, S10, S13
	149 Multiply S0, S0, S0
	150 Multiply S1, S1, S1
	151 Add S0, S0, S1
	152 Multiply S1, S2, S2
	153 Add S0, S1, S0
	154 NotImplemented "Instruction FSQRT not yet implemented."
	155 NotImplemented "Instruction FCMP not yet implemented."
	156 Move X20, [X31+88]
	157 Move V14, V0
	158 Move W8, [X21+24]
	159 Add W25, W25, 1
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move X20, X31
	162 Move X20, [X31+88]
	163 Move X0, [X24]
	164 Move W8, [X0+224]
	165 Compare W8, 0
	166 JumpIfNotEqual {168}
	167 Call 0x1C17DFC
	168 Move X0, X20
	169 Move X1, X31
	170 Move X2, X31
	171 Call Object.op_Inequality, X0, X1
	172 Move TEMP, X0
	173 And TEMP, TEMP, 1
	174 Compare TEMP, 1
	175 JumpIfNotEqual {194}
	176 Compare X20, 0
	177 JumpIfEqual {214}
	178 Move X8, -19992576
	179 Move V0, [X8+788]
	180 Add X8, X31, 8
	181 Move X0, X20
	182 Move X1, X31
	183 Call AisleObject.GetAisleData, X0, V0
	184 Move X8, [X31+40]
	185 NotImplemented "Instruction LDUR not yet implemented."
	186 NotImplemented "Instruction LDUR not yet implemented."
	187 Add X9, X19, 488
	188 Move [X31+80], X8
	189 Move [X31+48], V1
	190 Move [X31+56], V0
	191 Move [X9+32], X8
	192 Move [X9], V1
	193 Move [X9+8], V0
	194 Move X20, [X31+224]
	195 Move X19, [X31+232]
	196 Move X22, [X31+208]
	197 Move X21, [X31+216]
	198 Move X24, [X31+192]
	199 Move X23, [X31+200]
	200 Move X26, [X31+176]
	201 Move X25, [X31+184]
	202 Move X28, [X31+160]
	203 Move X27, [X31+168]
	204 Move X30, [X31+152]
	205 Move D9, [X31+136]
	206 Move D8, [X31+144]
	207 Move D11, [X31+120]
	208 Move D10, [X31+128]
	209 Move D13, [X31+104]
	210 Move D12, [X31+112]
	211 Move V14, [X31+96]
	212 Add X31, X31, 240
	213 Return 
	214 Call 0x1C17F20
	215 Call 0x1C17F28

Method: System.Void Initialize()

Disassembly:
	0x01DFC0BC MOV X2, X31
	0x01DFC0C0 BL 0x1DEA6E8
	0x01DFC0C4 TBZ X0, 0x0, 0x1DFC0E0
	0x01DFC0C8 LDR X1, [X19 + 0x178]
	0x01DFC0CC MOV X0, X19
	0x01DFC0D0 LDP X20, X19, [X31 + 0x20]
	0x01DFC0D4 LDP X30, X21, [X31 + 0x10]
	0x01DFC0D8 LDR V8, [X31], #0x30
	0x01DFC0DC B 0x1DFC128
	0x01DFC0E0 LDR V8, [X19 + 0x1B4]
	0x01DFC0E4 FMOV S0, 2
	0x01DFC0E8 FCMP S8, S0
	0x01DFC0EC B.PL 0x1DFC114
	0x01DFC0F0 MOV X0, X19
	0x01DFC0F4 MOV X1, X31
	0x01DFC0F8 BL 0x1DEA4B8
	0x01DFC0FC FADD S0, S8, S0
	0x01DFC100 STR S0, [X19 + 0x1B4]
	0x01DFC104 LDP X20, X19, [X31 + 0x20]
	0x01DFC108 LDP X30, X21, [X31 + 0x10]
	0x01DFC10C LDR V8, [X31], #0x30
	0x01DFC110 RET
	0x01DFC114 MOV X0, X19
	0x01DFC118 LDP X20, X19, [X31 + 0x20]
	0x01DFC11C LDP X30, X21, [X31 + 0x10]
	0x01DFC120 LDR V8, [X31], #0x30
	0x01DFC124 B 0x1DFAD90
	0x01DFC128 STP X30, X23, [X31 - 0x30]!
	0x01DFC12C STP X22, X21, [X31 + 0x10]
	0x01DFC130 STP X20, X19, [X31 + 0x20]
	0x01DFC134 ADRP X22, 0x25DC000
	0x01DFC138 ADRP X23, 0x22FC000
	0x01DFC13C ADRP X21, 0x22FD000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25DD000
	005 Move W8, [X20+3384]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22FE000
	012 Move X0, [X0+344]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3384], W8
	016 Move X8, [X19+440]
	017 Compare X8, 0
	018 JumpIfEqual {41}
	019 Move W2, [X8+24]
	020 Move W9, [X8+28]
	021 Add W9, W9, 1
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move [X8+24], W31
	024 Move [X8+28], W9
	025 Move X0, [X8+16]
	026 Move W1, W31
	027 Move X3, X31
	028 Call Array.Clear, X0, X1, X2
	029 Move X8, [X19]
	030 Move X0, X19
	031 Move X1, X31
	032 Move X9, [X8+952]
	033 Move X2, [X8+960]
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move [X19+424], X31
	036 Move [X19+432], X31
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return 
	041 Call 0x1C17F20

Method: System.Void UpdateMonsterBehaviour()

Disassembly:
	0x01DFC140 LDRB W8, [X22 + 0xD3B]
	0x01DFC144 LDR X23, [X23 + 0xE88]
	0x01DFC148 LDR X21, [X21 + 0x540]
	0x01DFC14C MOV X20, X1
	0x01DFC150 MOV X19, X0
	0x01DFC154 TBNZ X8, 0x0, 0x1DFC190
	0x01DFC158 ADRP X0, 0x22FC000
	0x01DFC15C LDR X0, [X0 + 0xE88]
	0x01DFC160 BL 0x1C16CF4
	0x01DFC164 ADRP X0, 0x22FC000
	0x01DFC168 LDR X0, [X0 + 0xE90]
	0x01DFC16C BL 0x1C16CF4
	0x01DFC170 ADRP X0, 0x22FC000
	0x01DFC174 LDR X0, [X0 + 0xC70]
	0x01DFC178 BL 0x1C16CF4
	0x01DFC17C ADRP X0, 0x22FD000
	0x01DFC180 LDR X0, [X0 + 0x540]
	0x01DFC184 BL 0x1C16CF4
	0x01DFC188 MOVZ W8, 0x1
	0x01DFC18C STRB W8, [X22 + 0xD3B]
	0x01DFC190 LDR X0, [X23]
	0x01DFC194 BL 0x1C16F10
	0x01DFC198 LDR X2, [X21]
	0x01DFC19C MOV X1, X19
	0x01DFC1A0 MOV X3, X31
	0x01DFC1A4 MOV X21, X0
	0x01DFC1A8 BL 0x295A080
	0x01DFC1AC CBZ X20, 0x1DFC25C
	0x01DFC1B0 ADRP X8, 0x22FC000
	0x01DFC1B4 LDR X8, [X8 + 0xE90]
	0x01DFC1B8 ADRP X22, 0x22FC000
	0x01DFC1BC MOV X0, X20
	0x01DFC1C0 MOV X1, X21
	0x01DFC1C4 LDR X2, [X8]
	0x01DFC1C8 LDR X22, [X22 + 0xC70]
	0x01DFC1CC BL 0x301DD30
	0x01DFC1D0 LDR X2, [X22]
	0x01DFC1D4 MOV X0, X20
	0x01DFC1D8 MOV W1, W31
	0x01DFC1DC BL 0x301BCCC
	0x01DFC1E0 LDR X8, [X19]
	0x01DFC1E4 MOV X1, X0
	0x01DFC1E8 MOV X0, X19
	0x01DFC1EC LDR X9, [X8 + 0x3B8]
	0x01DFC1F0 LDR X2, [X8 + 0x3C0]
	0x01DFC1F4 BLR X9
	0x01DFC1F8 MOVZ W1, 0x2
	0x01DFC1FC MOV X0, X19
	0x01DFC200 BL 0x1DFABCC
	0x01DFC204 LDR X0, [X19 + 0xE8]
	0x01DFC208 STR W31, [X19 + 0x1A8]
	0x01DFC20C CBZ X0, 0x1DFC25C
	0x01DFC210 MOVZ W1, 0x1
	0x01DFC214 MOV X2, X31
	0x01DFC218 BL 0x3BE17B4
	0x01DFC21C MOV X0, X19
	0x01DFC220 BL 0x1DFADFC
	0x01DFC224 LDR X8, [X19 + 0xC0]
	0x01DFC228 CBZ X8, 0x1DFC25C
	0x01DFC22C LDR X0, [X19 + 0xD0]
	0x01DFC230 CBZ X0, 0x1DFC25C
	0x01DFC234 LDR X19, [X8 + 0xA0]
	0x01DFC238 MOV X1, X31
	0x01DFC23C BL 0x3C3F58C
	0x01DFC240 MOV X0, X19
	0x01DFC244 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x25DD000
	006 Move W8, [X20+3385]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x22FE000
	013 Move X0, [X0+1328]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3385], W8
	017 Move X0, X19
	018 Move X1, X31
	019 Call MobController.UpdateMonsterBehaviour, X0
	020 Move X0, X19
	021 Call LongAisleController.get_phase, X0
	022 Subtract W8, W0, 1
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X9, -19718144
	025 Add X9, X9, 2427
	026 NotImplemented "Instruction ADR not yet implemented."
	027 Move W11, [X9]
	028 Add X10, X10, X11
	029 CallNoReturn X10
	030 Move X0, X19
	031 Call LongAisleController.UpdateWaiting, X0
	032 Move X0, X19
	033 Call LongAisleController.UpdatePreparing, X0
	034 Move X0, X19
	035 Call LongAisleController.UpdateCharging, X0
	036 Move X0, X19
	037 Call LongAisleController.UpdateStunned, X0
	038 Move X0, X19
	039 Call LongAisleController.UpdateSearching, X0
	040 Move X0, X31
	041 Call GameManager.get_isDebug
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {69}
	046 Move X20, [X19+408]
	047 Compare X20, 0
	048 JumpIfEqual {69}
	049 Move X0, X19
	050 Call LongAisleController.get_phase, X0
	051 Move X8, 0x22FE000
	052 Move X8, [X8+1328]
	053 Move TEMP, 0
	054 Not TEMP
	055 Move X9, TEMP
	056 Move [X31+24], W0
	057 Add X0, X31, 8
	058 Move X8, [X8]
	059 Move X1, X31
	060 Move [X31+8], X8
	061 Move [X31+16], X9
	062 Call Enum.ToString, X0
	063 Move X8, [X20+64]
	064 Move X9, [X20+24]
	065 Move X2, [X20+40]
	066 Move X1, X0
	067 Move X0, X8
	068 NotImplemented "Instruction BLR not yet implemented."
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X30, [X31+32]
	072 Add X31, X31, 64
	073 Return 

Method: System.Void SetWaiting()

Disassembly:
	0x01DFBD90 LDR V14, [X9 + 0x20]
	0x01DFBD94 CBNZ W10, 0x1DFBDA0
	0x01DFBD98 BL 0x1C16DFC
	0x01DFBD9C LDR X0, [X22]
	0x01DFBDA0 LDR X8, [X0 + 0xB8]
	0x01DFBDA4 MOV X1, X31
	0x01DFBDA8 FADD S12, S8, S12
	0x01DFBDAC FADD S9, S9, S13
	0x01DFBDB0 LDR W0, [X8 + 0xC]
	0x01DFBDB4 FADD S8, S10, S14
	0x01DFBDB8 BL 0x3C35CB8
	0x01DFBDBC LDR X8, [X21]
	0x01DFBDC0 MOV W21, W0
	0x01DFBDC4 LDR W9, [X8 + 0xE0]
	0x01DFBDC8 CBNZ W9, 0x1DFBDD4
	0x01DFBDCC MOV X0, X8
	0x01DFBDD0 BL 0x1C16DFC
	0x01DFBDD4 MOV V0.16B, V12.16B
	0x01DFBDD8 MOV V1.16B, V9.16B
	0x01DFBDDC MOV V2.16B, V8.16B
	0x01DFBDE0 MOV V3.16B, V11.16B
	0x01DFBDE4 MOV W0, W21
	0x01DFBDE8 MOV X1, X31
	0x01DFBDEC BL 0x3C8D090
	0x01DFBDF0 CBZ X0, 0x1DFC010
	0x01DFBDF4 LDR W8, [X0 + 0x18]
	0x01DFBDF8 MOV X21, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 1
	004 Move X19, X0
	005 Call LongAisleController.set_phase, X0, X1
	006 Move X0, X19
	007 Call LongAisleController.Initialize, X0
	008 Move X0, X19
	009 Call LongAisleController.GetAisleData, X0
	010 Add X8, X19, 500
	011 Move W9, [X19+508]
	012 Move X8, [X8]
	013 Move X0, [X19+232]
	014 Move [X19+456], W9
	015 Move [X19+448], X8
	016 Compare X0, 0
	017 JumpIfEqual {32}
	018 Move V2, [X19+496]
	019 Move V1, [X19+492]
	020 Move V0, [X19+488]
	021 Move X1, X31
	022 Call NavMeshAgent.SetDestination, X0, X1
	023 Move X0, [X19+232]
	024 Compare X0, 0
	025 JumpIfEqual {32}
	026 Move W1, W31
	027 Move X2, X31
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Call NavMeshAgent.set_isStopped, X0, X1
	031 Return 
	032 Call 0x1C17F20

Method: System.Void UpdateWaiting()

Disassembly:
	0x01DFC248 LDP X22, X21, [X31 + 0x10]
	0x01DFC24C FMOV S3, 1
	0x01DFC250 MOV X1, X31
	0x01DFC254 LDP X30, X23, [X31], #0x30
	0x01DFC258 B 0x1DC15C4
	0x01DFC25C BL 0x1C16F20
	0x01DFC260 STR X30, [X31 - 0x20]!
	0x01DFC264 STP X20, X19, [X31 + 0x10]
	0x01DFC268 ADRP X20, 0x25DC000
	0x01DFC26C LDRB W8, [X20 + 0xD3C]
	0x01DFC270 MOV X19, X0
	0x01DFC274 TBNZ X8, 0x0, 0x1DFC28C
	0x01DFC278 ADRP X0, 0x22FC000
	0x01DFC27C LDR X0, [X0 + 0xCB0]
	0x01DFC280 BL 0x1C16CF4
	0x01DFC284 MOVZ W8, 0x1
	0x01DFC288 STRB W8, [X20 + 0xD3C]
	0x01DFC28C MOVZ W1, 0x3
	0x01DFC290 MOV X0, X19
	0x01DFC294 BL 0x1DFABCC
	0x01DFC298 LDR X8, [X19 + 0x1B8]
	0x01DFC29C CBZ X8, 0x1DFC2C4
	0x01DFC2A0 LDR W8, [X8 + 0x18]
	0x01DFC2A4 FMOV S0, W31
	0x01DFC2A8 FMOV S1, 5
	0x01DFC2AC CMP W8, 0x0
	0x01DFC2B0 FCSEL S0, S1, S0, GT
	0x01DFC2B4 STR S0, [X19 + 0x1AC]
	0x01DFC2B8 LDP X20, X19, [X31 + 0x10]
	0x01DFC2BC LDR X30, [X31], #0x20
	0x01DFC2C0 RET
	0x01DFC2C4 BL 0x1C16F20
	0x01DFC2C8 STP X30, X19, [X31 - 0x10]!
	0x01DFC2CC LDR X8, [X0]
	0x01DFC2D0 FMOV S0, 3
	0x01DFC2D4 MOVZ W1, 0x1
	0x01DFC2D8 MOV X19, X0
	0x01DFC2DC LDR X9, [X8 + 0x328]
	0x01DFC2E0 LDR X2, [X8 + 0x330]
	0x01DFC2E4 BLR X9
	0x01DFC2E8 MOVZ W1, 0x4
	0x01DFC2EC MOV X0, X19
	0x01DFC2F0 BL 0x1DFABCC
	0x01DFC2F4 LDR X0, [X19 + 0xD0]
	0x01DFC2F8 STR W31, [X19 + 0x1B0]
	0x01DFC2FC CBZ X0, 0x1DFC320
	0x01DFC300 LDR X19, [X19 + 0x218]
	0x01DFC304 MOV X1, X31
	0x01DFC308 BL 0x3C3F58C
	0x01DFC30C FMOV S3, 1
	0x01DFC310 MOV X0, X19
	0x01DFC314 MOV X1, X31
	0x01DFC318 LDP X30, X19, [X31], #0x10
	0x01DFC31C B 0x1DC15C4
	0x01DFC320 BL 0x1C16F20
	0x01DFC324 STP X30, X19, [X31 - 0x10]!
	0x01DFC328 MOVZ W1, 0x5
	0x01DFC32C MOV X19, X0
	0x01DFC330 BL 0x1DFABCC
	0x01DFC334 STR W31, [X19 + 0x1B4]
	0x01DFC338 LDP X30, X19, [X31], #0x10
	0x01DFC33C RET
	0x01DFC340 STR D10, [X31 - 0x40]!
	0x01DFC344 STP D9, D8, [X31 + 0x10]
	0x01DFC348 STP X30, X21, [X31 + 0x20]
	0x01DFC34C STP X20, X19, [X31 + 0x30]
	0x01DFC350 ADRP X21, 0x25DC000
	0x01DFC354 ADRP X20, 0x22FC000
	0x01DFC358 LDRB W8, [X21 + 0xD3F]
	0x01DFC35C LDR X20, [X20 + 0xBC0]
	0x01DFC360 MOV X19, X0
	0x01DFC364 TBNZ X8, 0x0, 0x1DFC37C
	0x01DFC368 ADRP X0, 0x22FC000
	0x01DFC36C LDR X0, [X0 + 0xBC0]
	0x01DFC370 BL 0x1C16CF4
	0x01DFC374 MOVZ W8, 0x1
	0x01DFC378 STRB W8, [X21 + 0xD3F]
	0x01DFC37C MOV X0, X19
	0x01DFC380 MOV X1, X31
	0x01DFC384 BL 0x1DEA894
	0x01DFC388 LDR X0, [X20]
	0x01DFC38C LDR W8, [X0 + 0xE0]
	0x01DFC390 CBNZ W8, 0x1DFC39C
	0x01DFC394 BL 0x1C16DFC
	0x01DFC398 LDR X0, [X20]
	0x01DFC39C LDR X8, [X0 + 0xB8]
	0x01DFC3A0 MOV X0, X31
	0x01DFC3A4 LDP S0, S1, [X8 + 0xB0]
	0x01DFC3A8 LDP S2, S3, [X8 + 0xB8]
	0x01DFC3AC BL 0x3C0D030
	0x01DFC3B0 MOV X0, X19
	0x01DFC3B4 MOV X1, X31
	0x01DFC3B8 BL 0x3C32E90
	0x01DFC3BC CBZ X0, 0x1DFC43C
	0x01DFC3C0 MOV X1, X31
	0x01DFC3C4 BL 0x3C3F58C
	0x01DFC3C8 ADRP X20, 0x25DC000
	0x01DFC3CC LDRB W8, [X20 + 0x786]
	0x01DFC3D0 MOV V8.16B, V0.16B
	0x01DFC3D4 MOV V9.16B, V1.16B
	0x01DFC3D8 MOV V10.16B, V2.16B
	0x01DFC3DC CBNZ W8, 0x1DFC3F4
	0x01DFC3E0 ADRP X0, 0x22F7000
	0x01DFC3E4 LDR X0, [X0 + 0x5A0]
	0x01DFC3E8 BL 0x1C16CF4
	0x01DFC3EC MOVZ W8, 0x1
	0x01DFC3F0 STRB W8, [X20 + 0x786]
	0x01DFC3F4 LDR X8, [X19 + 0xC0]
	0x01DFC3F8 CBZ X8, 0x1DFC43C
	0x01DFC3FC ADRP X9, 0x22F7000
	0x01DFC400 LDR X9, [X9 + 0x5A0]
	0x01DFC404 LDR V3, [X8 + 0x4C]
	0x01DFC408 LDP X20, X19, [X31 + 0x30]
	0x01DFC40C LDP X30, X21, [X31 + 0x20]
	0x01DFC410 LDR X9, [X9]
	0x01DFC414 MOV X0, X31
	0x01DFC418 LDR X9, [X9 + 0xB8]
	0x01DFC41C LDP S1, S0, [X9 + 0x1C]
	0x01DFC420 LDR V4, [X9 + 0x18]
	0x01DFC424 FADD S2, S10, S0
	0x01DFC428 FADD S1, S9, S1
	0x01DFC42C FADD S0, S8, S4
	0x01DFC430 LDP D9, D8, [X31 + 0x10]
	0x01DFC434 LDR V10, [X31], #0x40
	0x01DFC438 B 0x3C0CB98
	0x01DFC43C BL 0x1C16F20
	0x01DFC440 STP X30, X23, [X31 - 0x30]!
	0x01DFC444 STP X22, X21, [X31 + 0x10]
	0x01DFC448 STP X20, X19, [X31 + 0x20]
	0x01DFC44C ADRP X22, 0x25DC000
	0x01DFC450 ADRP X23, 0x22FC000
	0x01DFC454 ADRP X20, 0x22FD000
	0x01DFC458 ADRP X21, 0x22FB000
	0x01DFC45C LDRB W8, [X22 + 0xD40]
	0x01DFC460 LDR X23, [X23 + 0xEE8]
	0x01DFC464 LDR X20, [X20 + 0x480]
	0x01DFC468 LDR X21, [X21 + 0x860]
	0x01DFC46C MOV X19, X0
	0x01DFC470 TBNZ X8, 0x0, 0x1DFC4A0
	0x01DFC474 ADRP X0, 0x22FD000
	0x01DFC478 LDR X0, [X0 + 0x480]
	0x01DFC47C BL 0x1C16CF4
	0x01DFC480 ADRP X0, 0x22FC000
	0x01DFC484 LDR X0, [X0 + 0xEE8]
	0x01DFC488 BL 0x1C16CF4
	0x01DFC48C ADRP X0, 0x22FB000
	0x01DFC490 LDR X0, [X0 + 0x860]
	0x01DFC494 BL 0x1C16CF4
	0x01DFC498 MOVZ W8, 0x1
	0x01DFC49C STRB W8, [X22 + 0xD40]
	0x01DFC4A0 LDR X0, [X23]
	0x01DFC4A4 BL 0x1C16F10
	0x01DFC4A8 LDR X1, [X20]
	0x01DFC4AC MOV X20, X0
	0x01DFC4B0 BL 0x301B7C4
	0x01DFC4B4 STR X20, [X19 + 0x1B8]
	0x01DFC4B8 LDR X0, [X21]
	0x01DFC4BC LDR W8, [X0 + 0xE0]
	0x01DFC4C0 CBNZ W8, 0x1DFC4C8
	0x01DFC4C4 BL 0x1C16DFC
	0x01DFC4C8 MOV X0, X19
	0x01DFC4CC LDP X20, X19, [X31 + 0x20]
	0x01DFC4D0 LDP X22, X21, [X31 + 0x10]
	0x01DFC4D4 MOV X1, X31
	0x01DFC4D8 LDP X30, X23, [X31], #0x30
	0x01DFC4DC B 0x1DEAEA0
	0x01DFC4E0 STP D13, D12, [X31 - 0x60]!
	0x01DFC4E4 STP D11, D10, [X31 + 0x10]
	0x01DFC4E8 STP D9, D8, [X31 + 0x20]
	0x01DFC4EC STR X30, [X31 + 0x30]
	0x01DFC4F0 STP X22, X21, [X31 + 0x40]
	0x01DFC4F4 STP X20, X19, [X31 + 0x50]
	0x01DFC4F8 CBZ X1, 0x1DFC670
	0x01DFC4FC MOV X19, X0
	0x01DFC500 MOV X0, X1
	0x01DFC504 MOV X1, X31
	0x01DFC508 MOV X20, X2
	0x01DFC50C BL 0x3C32E90
	0x01DFC510 CBZ X0, 0x1DFC670
	0x01DFC514 MOV X1, X31
	0x01DFC518 BL 0x3C3F58C
	0x01DFC51C MOV X0, X19
	0x01DFC520 MOV X1, X31
	0x01DFC524 MOV V8.16B, V0.16B
	0x01DFC528 MOV V9.16B, V1.16B
	0x01DFC52C MOV V10.16B, V2.16B
	0x01DFC530 BL 0x3C32E90
	0x01DFC534 CBZ X0, 0x1DFC670
	0x01DFC538 MOV X1, X31
	0x01DFC53C BL 0x3C3F58C
	0x01DFC540 ADRP X21, 0x25DC000
	0x01DFC544 LDRB W8, [X21 + 0x85C]
	0x01DFC548 MOV V11.16B, V0.16B
	0x01DFC54C MOV V12.16B, V1.16B
	0x01DFC550 MOV V13.16B, V2.16B
	0x01DFC554 CBNZ W8, 0x1DFC56C
	0x01DFC558 ADRP X0, 0x22F7000
	0x01DFC55C LDR X0, [X0 + 0x5A8]
	0x01DFC560 BL 0x1C16CF4
	0x01DFC564 MOVZ W8, 0x1
	0x01DFC568 STRB W8, [X21 + 0x85C]
	0x01DFC56C ADRP X22, 0x22F7000
	0x01DFC570 LDR X22, [X22 + 0x5A8]
	0x01DFC574 FSUB S11, S8, S11
	0x01DFC578 FSUB S9, S9, S12
	0x01DFC57C FSUB S8, S10, S13
	0x01DFC580 LDR X0, [X22]
	0x01DFC584 LDR W8, [X0 + 0xE0]
	0x01DFC588 CBNZ W8, 0x1DFC590
	0x01DFC58C BL 0x1C16DFC
	0x01DFC590 FMUL S0, S11, S11
	0x01DFC594 FMUL S1, S9, S9
	0x01DFC598 FADD S0, S0, S1
	0x01DFC59C FMUL S1, S8, S8
	0x01DFC5A0 FADD S0, S1, S0
	0x01DFC5A4 FSQRT S0, S0
	0x01DFC5A8 STR S0, [X31 + 0x3C]
	0x01DFC5AC CBZ X20, 0x1DFC670
	0x01DFC5B0 MOV X0, X20
	0x01DFC5B4 MOV X1, X31
	0x01DFC5B8 BL 0x3C32E90
	0x01DFC5BC CBZ X0, 0x1DFC670
	0x01DFC5C0 MOV X1, X31
	0x01DFC5C4 BL 0x3C3F58C
	0x01DFC5C8 MOV X0, X19
	0x01DFC5CC MOV X1, X31
	0x01DFC5D0 MOV V8.16B, V0.16B
	0x01DFC5D4 MOV V9.16B, V1.16B
	0x01DFC5D8 MOV V10.16B, V2.16B
	0x01DFC5DC BL 0x3C32E90
	0x01DFC5E0 CBZ X0, 0x1DFC670
	0x01DFC5E4 MOV X1, X31
	0x01DFC5E8 BL 0x3C3F58C
	0x01DFC5EC LDRB W8, [X21 + 0x85C]
	0x01DFC5F0 MOV V11.16B, V0.16B
	0x01DFC5F4 MOV V12.16B, V1.16B
	0x01DFC5F8 MOV V13.16B, V2.16B
	0x01DFC5FC CBNZ W8, 0x1DFC614
	0x01DFC600 ADRP X0, 0x22F7000
	0x01DFC604 LDR X0, [X0 + 0x5A8]
	0x01DFC608 BL 0x1C16CF4
	0x01DFC60C MOVZ W8, 0x1
	0x01DFC610 STRB W8, [X21 + 0x85C]
	0x01DFC614 LDR X0, [X22]
	0x01DFC618 FSUB S11, S8, S11
	0x01DFC61C FSUB S9, S9, S12
	0x01DFC620 FSUB S8, S10, S13
	0x01DFC624 LDR W8, [X0 + 0xE0]
	0x01DFC628 CBNZ W8, 0x1DFC630
	0x01DFC62C BL 0x1C16DFC
	0x01DFC630 FMUL S0, S11, S11
	0x01DFC634 FMUL S1, S9, S9
	0x01DFC638 FADD S0, S0, S1
	0x01DFC63C FMUL S1, S8, S8
	0x01DFC640 FADD S0, S1, S0
	0x01DFC644 FSQRT S0, S0
	0x01DFC648 ADD X0, X31, 0x3C
	0x01DFC64C MOV X1, X31
	0x01DFC650 BL 0x338FCB8
	0x01DFC654 LDP X20, X19, [X31 + 0x50]
	0x01DFC658 LDP X22, X21, [X31 + 0x40]
	0x01DFC65C LDR X30, [X31 + 0x30]
	0x01DFC660 LDP D9, D8, [X31 + 0x20]
	0x01DFC664 LDP D11, D10, [X31 + 0x10]
	0x01DFC668 LDP D13, D12, [X31], #0x60
	0x01DFC66C RET
	0x01DFC670 BL 0x1C16F20
	0x01DFC674 STP D13, D12, [X31 - 0x60]!
	0x01DFC678 STP D11, D10, [X31 + 0x10]
	0x01DFC67C STP D9, D8, [X31 + 0x20]
	0x01DFC680 STR X30, [X31 + 0x30]
	0x01DFC684 STP X22, X21, [X31 + 0x40]
	0x01DFC688 STP X20, X19, [X31 + 0x50]
	0x01DFC68C CBZ X1, 0x1DFC804
	0x01DFC690 MOV X19, X0
	0x01DFC694 MOV X0, X1
	0x01DFC698 MOV X1, X31
	0x01DFC69C MOV X20, X2
	0x01DFC6A0 BL 0x3C32E90
	0x01DFC6A4 CBZ X0, 0x1DFC804
	0x01DFC6A8 MOV X1, X31
	0x01DFC6AC BL 0x3C3F58C
	0x01DFC6B0 MOV X0, X19
	0x01DFC6B4 MOV X1, X31
	0x01DFC6B8 MOV V8.16B, V0.16B
	0x01DFC6BC MOV V9.16B, V1.16B
	0x01DFC6C0 MOV V10.16B, V2.16B
	0x01DFC6C4 BL 0x3C32E90
	0x01DFC6C8 CBZ X0, 0x1DFC804
	0x01DFC6CC MOV X1, X31
	0x01DFC6D0 BL 0x3C3F58C
	0x01DFC6D4 ADRP X21, 0x25DC000
	0x01DFC6D8 LDRB W8, [X21 + 0x85C]
	0x01DFC6DC MOV V11.16B, V0.16B
	0x01DFC6E0 MOV V12.16B, V1.16B
	0x01DFC6E4 MOV V13.16B, V2.16B
	0x01DFC6E8 CBNZ W8, 0x1DFC700
	0x01DFC6EC ADRP X0, 0x22F7000
	0x01DFC6F0 LDR X0, [X0 + 0x5A8]
	0x01DFC6F4 BL 0x1C16CF4
	0x01DFC6F8 MOVZ W8, 0x1
	0x01DFC6FC STRB W8, [X21 + 0x85C]
	0x01DFC700 ADRP X22, 0x22F7000
	0x01DFC704 LDR X22, [X22 + 0x5A8]
	0x01DFC708 FSUB S11, S8, S11
	0x01DFC70C FSUB S9, S9, S12
	0x01DFC710 FSUB S8, S10, S13
	0x01DFC714 LDR X0, [X22]
	0x01DFC718 LDR W8, [X0 + 0xE0]
	0x01DFC71C CBNZ W8, 0x1DFC724
	0x01DFC720 BL 0x1C16DFC
	0x01DFC724 FMUL S0, S11, S11
	0x01DFC728 FMUL S1, S9, S9
	0x01DFC72C FADD S0, S0, S1
	0x01DFC730 FMUL S1, S8, S8
	0x01DFC734 FADD S0, S1, S0
	0x01DFC738 FSQRT S0, S0
	0x01DFC73C STR S0, [X31 + 0x3C]
	0x01DFC740 CBZ X20, 0x1DFC804
	0x01DFC744 MOV X0, X20
	0x01DFC748 MOV X1, X31
	0x01DFC74C BL 0x3C32E90
	0x01DFC750 CBZ X0, 0x1DFC804
	0x01DFC754 MOV X1, X31
	0x01DFC758 BL 0x3C3F58C
	0x01DFC75C MOV X0, X19
	0x01DFC760 MOV X1, X31
	0x01DFC764 MOV V8.16B, V0.16B
	0x01DFC768 MOV V9.16B, V1.16B
	0x01DFC76C MOV V10.16B, V2.16B
	0x01DFC770 BL 0x3C32E90
	0x01DFC774 CBZ X0, 0x1DFC804
	0x01DFC778 MOV X1, X31
	0x01DFC77C BL 0x3C3F58C
	0x01DFC780 LDRB W8, [X21 + 0x85C]
	0x01DFC784 MOV V11.16B, V0.16B
	0x01DFC788 MOV V12.16B, V1.16B
	0x01DFC78C MOV V13.16B, V2.16B
	0x01DFC790 CBNZ W8, 0x1DFC7A8
	0x01DFC794 ADRP X0, 0x22F7000
	0x01DFC798 LDR X0, [X0 + 0x5A8]
	0x01DFC79C BL 0x1C16CF4
	0x01DFC7A0 MOVZ W8, 0x1
	0x01DFC7A4 STRB W8, [X21 + 0x85C]
	0x01DFC7A8 LDR X0, [X22]
	0x01DFC7AC FSUB S11, S8, S11
	0x01DFC7B0 FSUB S9, S9, S12
	0x01DFC7B4 FSUB S8, S10, S13
	0x01DFC7B8 LDR W8, [X0 + 0xE0]
	0x01DFC7BC CBNZ W8, 0x1DFC7C4
	0x01DFC7C0 BL 0x1C16DFC
	0x01DFC7C4 FMUL S0, S11, S11
	0x01DFC7C8 FMUL S1, S9, S9
	0x01DFC7CC FADD S0, S0, S1
	0x01DFC7D0 FMUL S1, S8, S8
	0x01DFC7D4 FADD S0, S1, S0
	0x01DFC7D8 FSQRT S0, S0
	0x01DFC7DC ADD X0, X31, 0x3C
	0x01DFC7E0 MOV X1, X31
	0x01DFC7E4 BL 0x338FCB8
	0x01DFC7E8 LDP X20, X19, [X31 + 0x50]
	0x01DFC7EC LDP X22, X21, [X31 + 0x40]
	0x01DFC7F0 LDR X30, [X31 + 0x30]
	0x01DFC7F4 LDP D9, D8, [X31 + 0x20]
	0x01DFC7F8 LDP D11, D10, [X31 + 0x10]
	0x01DFC7FC LDP D13, D12, [X31], #0x60
	0x01DFC800 RET
	0x01DFC804 BL 0x1C16F20
	0x01DFC808 STP X30, X19, [X31 - 0x10]!
	0x01DFC80C AND W1, W1, 0x1
	0x01DFC810 MOV X2, X31
	0x01DFC814 MOV X19, X0
	0x01DFC818 BL 0x1DEB2A4
	0x01DFC81C LDR W1, [X19 + 0x1A4]
	0x01DFC820 MOV X0, X19
	0x01DFC824 LDP X30, X19, [X31], #0x10
	0x01DFC828 B 0x1DFABCC
	0x01DFC82C STP X30, X19, [X31 - 0x10]!
	0x01DFC830 MOV X1, X31
	0x01DFC834 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X20, 0x25DD000
	017 Move X23, 0x22FD000
	018 Move W8, [X20+3386]
	019 Move X23, [X23+3136]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {42}
	025 Move X0, 0x22FD000
	026 Move X0, [X0+3720]
	027 Call 0x1C17CF4
	028 Move X0, 0x22FD000
	029 Move X0, [X0+3728]
	030 Call 0x1C17CF4
	031 Move X0, 0x22FD000
	032 Move X0, [X0+3184]
	033 Call 0x1C17CF4
	034 Move X0, 0x22FE000
	035 Move X0, [X0+1336]
	036 Call 0x1C17CF4
	037 Move X0, 0x22FD000
	038 Move X0, [X0+3136]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+3386], W8
	042 Move X0, [X23]
	043 Add X20, X19, 440
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X19
	049 Move X1, X20
	050 Move X2, X31
	051 Call MobDetectionUtil.TryGetPlayersBySound, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {242}
	056 Move X8, 0x22FD000
	057 Move X8, [X8+3720]
	058 Move X22, 0x22FE000
	059 Move X21, [X19+440]
	060 Move X0, [X8]
	061 Move X22, [X22+1336]
	062 Call 0x1C17F10
	063 Move X2, [X22]
	064 Move X1, X19
	065 Move X3, X31
	066 Move X22, X0
	067 Call Comparison`1<Object>..ctor, X0, X1, X2
	068 Compare X21, 0
	069 JumpIfEqual {426}
	070 Move X8, 0x22FD000
	071 Move X8, [X8+3728]
	072 Move X0, X21
	073 Move X1, X22
	074 Move X2, [X8]
	075 Call List`1<Object>.Sort, X0, X1
	076 Move X0, [X20]
	077 Compare X0, 0
	078 JumpIfEqual {426}
	079 Move X8, 0x22FD000
	080 Move X8, [X8+3184]
	081 Move W1, W31
	082 Move X2, [X8]
	083 Call List`1<Object>.get_Item, X0, X1
	084 Compare X0, 0
	085 JumpIfEqual {426}
	086 Move X1, X31
	087 Call Component.get_transform, X0
	088 Compare X0, 0
	089 JumpIfEqual {426}
	090 Move X1, X31
	091 Call Transform.get_position, X0
	092 Move X20, 0x25DD000
	093 Move V11, [X19+488]
	094 Move V13, [X19+492]
	095 Move W8, [X20+1925]
	096 Move V14, [X19+496]
	097 Move V8, V0
	098 Move V9, V1
	099 Move V10, V2
	100 Compare W8, 0
	101 JumpIfNotEqual {107}
	102 Move X0, 0x22F8000
	103 Move X0, [X0+1448]
	104 Call 0x1C17CF4
	105 Move W8, 1
	106 Move [X20+1925], W8
	107 Move X21, 0x22F8000
	108 Move X21, [X21+1448]
	109 Subtract S12, S8, S11
	110 Subtract S9, S9, S13
	111 Subtract S8, S10, S14
	112 Move X0, [X21]
	113 Move W8, [X0+224]
	114 Compare W8, 0
	115 JumpIfNotEqual {117}
	116 Call 0x1C17DFC
	117 Move X8, -19992576
	118 Multiply S0, S12, S12
	119 Multiply S1, S9, S9
	120 Move V11, [X8+380]
	121 Add S0, S0, S1
	122 Multiply S1, S8, S8
	123 Add S0, S1, S0
	124 NotImplemented "Instruction FSQRT not yet implemented."
	125 NotImplemented "Instruction FCMP not yet implemented."
	126 NotImplemented "Instruction FDIV not yet implemented."
	127 NotImplemented "Instruction FDIV not yet implemented."
	128 NotImplemented "Instruction FDIV not yet implemented."
	129 Move X22, 0x25DD000
	130 Move W8, [X22+1923]
	131 Compare W8, 0
	132 JumpIfNotEqual {138}
	133 Move X0, 0x22F8000
	134 Move X0, [X0+1440]
	135 Call 0x1C17CF4
	136 Move W8, 1
	137 Move [X22+1923], W8
	138 Move X8, 0x22F8000
	139 Move X8, [X8+1440]
	140 Move X8, [X8]
	141 Move X8, [X8+184]
	142 Move S0, [X8]
	143 Move S1, [X8+4]
	144 Move V2, [X8+8]
	145 Move X8, [X19+520]
	146 Compare X8, 0
	147 JumpIfEqual {426}
	148 Move V4, [X19+500]
	149 Move V5, [X19+504]
	150 Move V3, [X19+508]
	151 Move W9, [X8+24]
	152 Multiply S0, S0, S4
	153 Multiply S1, S1, S5
	154 Multiply S2, S2, S3
	155 Add S0, S0, S1
	156 Add S0, S2, S0
	157 NotImplemented "Instruction FCMP not yet implemented."
	158 Compare W9, 0
	159 JumpIfEqual {427}
	160 Add X9, X8, 32
	161 Add X10, X8, 36
	162 Add X8, X8, 40
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Add X9, X8, 44
	165 Add X10, X8, 48
	166 Add X8, X8, 52
	167 Move V8, [X8]
	168 Move V9, [X10]
	169 Move V10, [X9]
	170 Move V12, [X19+488]
	171 Move V13, [X19+492]
	172 Move W8, [X20+1925]
	173 Move V15, [X19+496]
	174 Compare W8, 0
	175 JumpIfNotEqual {181}
	176 Move X0, 0x22F8000
	177 Move X0, [X0+1448]
	178 Call 0x1C17CF4
	179 Move W8, 1
	180 Move [X20+1925], W8
	181 Move X0, [X21]
	182 Subtract S14, S10, S12
	183 Subtract S13, S9, S13
	184 Subtract S12, S8, S15
	185 Move W8, [X0+224]
	186 Compare W8, 0
	187 JumpIfNotEqual {189}
	188 Call 0x1C17DFC
	189 Multiply S0, S14, S14
	190 Multiply S1, S13, S13
	191 Add S0, S0, S1
	192 Multiply S1, S12, S12
	193 Add S0, S1, S0
	194 NotImplemented "Instruction FSQRT not yet implemented."
	195 NotImplemented "Instruction FCMP not yet implemented."
	196 NotImplemented "Instruction FDIV not yet implemented."
	197 NotImplemented "Instruction FDIV not yet implemented."
	198 NotImplemented "Instruction FDIV not yet implemented."
	199 Move X20, 0x25DD000
	200 Move W8, [X20+1923]
	201 Compare W8, 0
	202 JumpIfNotEqual {208}
	203 Move X0, 0x22F8000
	204 Move X0, [X0+1440]
	205 Call 0x1C17CF4
	206 Move W8, 1
	207 Move [X20+1923], W8
	208 Move X8, 0x22F8000
	209 Move X8, [X8+1440]
	210 Move X8, [X8]
	211 Move X8, [X8+184]
	212 Move S0, [X8]
	213 Move S1, [X8+4]
	214 Move V2, [X8+8]
	215 Move X0, [X19+232]
	216 Move [X19+448], S0
	217 Move [X19+452], S1
	218 Move [X19+456], S2
	219 Compare X0, 0
	220 JumpIfEqual {426}
	221 Move X1, X31
	222 Call NavMeshAgent.get_destination, X0
	223 Move X8, -19996672
	224 Subtract S0, S0, S10
	225 Subtract S1, S1, S9
	226 Move V3, [X8+3872]
	227 Subtract S2, S2, S8
	228 Multiply S0, S0, S0
	229 Multiply S1, S1, S1
	230 Add S0, S0, S1
	231 Multiply S1, S2, S2
	232 Add S0, S1, S0
	233 NotImplemented "Instruction FCMP not yet implemented."
	234 Move X0, [X19+232]
	235 Compare X0, 0
	236 JumpIfEqual {426}
	237 Move V0, V10
	238 Move V1, V9
	239 Move V2, V8
	240 Move X1, X31
	241 Call NavMeshAgent.SetDestination, X0, X1
	242 Move V8, [X19+448]
	243 Move V9, [X19+452]
	244 Move V10, [X19+456]
	245 Move X0, X19
	246 Move X1, X31
	247 Call Component.get_transform, X0
	248 Compare X0, 0
	249 JumpIfEqual {426}
	250 Move X1, X31
	251 Call Transform.get_forward, X0
	252 Move X8, -19992576
	253 Move V3, [X8+104]
	254 Multiply S0, S8, S0
	255 Multiply S1, S9, S1
	256 Add S0, S0, S1
	257 Multiply S1, S10, S2
	258 Add S0, S1, S0
	259 NotImplemented "Instruction FCMP not yet implemented."
	260 Move X8, [X19+192]
	261 Compare X8, 0
	262 JumpIfEqual {426}
	263 Move V11, [X8+64]
	264 Move X0, X19
	265 Move X1, X31
	266 Call Component.get_transform, X0
	267 Compare X0, 0
	268 JumpIfEqual {426}
	269 Move X1, X31
	270 Move [X31+12], S11
	271 Call Transform.get_forward, X0
	272 Move X20, 0x25DD000
	273 Move W8, [X20+2596]
	274 Move V11, V0
	275 Move V12, V1
	276 Move V13, V2
	277 Compare W8, 0
	278 JumpIfNotEqual {284}
	279 Move X0, 0x22F8000
	280 Move X0, [X0+1448]
	281 Call 0x1C17CF4
	282 Move W8, 1
	283 Move [X20+2596], W8
	284 Move X20, 0x22F8000
	285 Move X20, [X20+1448]
	286 Multiply S0, S8, S8
	287 Multiply S1, S9, S9
	288 Add S0, S0, S1
	289 Move X0, [X20]
	290 Multiply S1, S10, S10
	291 Add S15, S1, S0
	292 Multiply S0, S11, S11
	293 Move W8, [X0+224]
	294 Multiply S1, S12, S12
	295 Add S0, S0, S1
	296 Multiply S1, S13, S13
	297 Add S14, S1, S0
	298 Compare W8, 0
	299 JumpIfNotEqual {301}
	300 Call 0x1C17DFC
	301 Move X8, -19996672
	302 Move V1, [X8+4072]
	303 Multiply S0, S15, S14
	304 NotImplemented "Instruction FSQRT not yet implemented."
	305 Move S15, W31
	306 NotImplemented "Instruction FCMP not yet implemented."
	307 Move X0, [X20]
	308 Multiply S1, S8, S11
	309 Multiply S2, S9, S12
	310 Multiply S3, S10, S13
	311 Add S1, S1, S2
	312 Add S1, S3, S1
	313 Move W8, [X0+224]
	314 NotImplemented "Instruction FDIV not yet implemented."
	315 Move S1, 1
	316 Move S2, -1
	317 NotImplemented "Instruction FMIN not yet implemented."
	318 NotImplemented "Instruction FCMP not yet implemented."
	319 NotImplemented "Instruction FCSEL not yet implemented."
	320 Compare W8, 0
	321 JumpIfNotEqual {323}
	322 Call 0x1C17DFC
	323 NotImplemented "Instruction FCVT not yet implemented."
	324 Call 0x3EB2B80
	325 Move X8, -19992576
	326 Move V1, [X8+1096]
	327 NotImplemented "Instruction INVALID not yet implemented."
	328 Multiply S15, S0, S1
	329 Move X0, X19
	330 Move X1, X31
	331 Call Component.get_transform, X0
	332 Move X20, X0
	333 Move X0, X19
	334 Move X1, X31
	335 Call Component.get_transform, X0
	336 Compare X0, 0
	337 JumpIfEqual {426}
	338 Move V0, [X31+12]
	339 Move X1, X31
	340 NotImplemented "Instruction FDIV not yet implemented."
	341 Move [X31+12], S0
	342 Call Transform.get_rotation, X0
	343 Move V11, V0
	344 Move V12, V1
	345 Move V13, V2
	346 Move V0, V8
	347 Move V1, V9
	348 Move V2, V10
	349 Move X0, X31
	350 Move V14, V3
	351 Call Quaternion.LookRotation, X0
	352 Move X0, X19
	353 Move X1, X31
	354 Move V8, V0
	355 Move V9, V1
	356 Move V10, V2
	357 Move V15, V3
	358 Call MobController.get_deltaTime, X0
	359 Move V1, [X31+12]
	360 Move V2, V13
	361 Move V3, V14
	362 Move V4, V8
	363 Multiply S0, S1, S0
	364 Move [X31], S0
	365 Move V0, V11
	366 Move V1, V12
	367 Move V5, V9
	368 Move V6, V10
	369 Move V7, V15
	370 Move X0, X31
	371 Call Quaternion.Slerp, X0, X1, V0
	372 Compare X20, 0
	373 JumpIfEqual {426}
	374 Move X0, X20
	375 Move X1, X31
	376 Call Transform.set_rotation, X0, X1
	377 Move X0, [X23]
	378 Add X20, X19, 376
	379 Move W8, [X0+224]
	380 Compare W8, 0
	381 JumpIfNotEqual {383}
	382 Call 0x1C17DFC
	383 Move X0, X19
	384 Move X1, X20
	385 Move X2, X31
	386 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	387 Move TEMP, X0
	388 And TEMP, TEMP, 1
	389 Compare TEMP, 1
	390 JumpIfNotEqual {410}
	391 Move X1, [X19+376]
	392 Move X0, X19
	393 Move X20, [X31+112]
	394 Move X19, [X31+120]
	395 Move X22, [X31+96]
	396 Move X21, [X31+104]
	397 Move X30, [X31+80]
	398 Move X23, [X31+88]
	399 Move D9, [X31+64]
	400 Move D8, [X31+72]
	401 Move D11, [X31+48]
	402 Move D10, [X31+56]
	403 Move D13, [X31+32]
	404 Move D12, [X31+40]
	405 Move D15, [X31+16]
	406 Move D14, [X31+24]
	407 Add X31, X31, 128
	408 Call LongAisleController.SetPreparing, X0, X1
	409 Return 
	410 Move X20, [X31+112]
	411 Move X19, [X31+120]
	412 Move X22, [X31+96]
	413 Move X21, [X31+104]
	414 Move X30, [X31+80]
	415 Move X23, [X31+88]
	416 Move D9, [X31+64]
	417 Move D8, [X31+72]
	418 Move D11, [X31+48]
	419 Move D10, [X31+56]
	420 Move D13, [X31+32]
	421 Move D12, [X31+40]
	422 Move D15, [X31+16]
	423 Move D14, [X31+24]
	424 Add X31, X31, 128
	425 Return 
	426 Call 0x1C17F20
	427 Call 0x1C17F28

Method: System.Void SetPreparing(System.Collections.Generic.List`1<AnimalCompany.NetPlayer> playersDetected)

Disassembly:
	0x01DFD128 FMUL S0, S8, S3
	0x01DFD12C BL 0x3BE16E0
	0x01DFD130 MOVZ W0, 0x61
	0x01DFD134 MOV X1, X31
	0x01DFD138 BL 0x3C84CAC
	0x01DFD13C TBZ X0, 0x0, 0x1DFD198
	0x01DFD140 ADRP X21, 0x25DB000
	0x01DFD144 LDRB W8, [X21 + 0xB6F]
	0x01DFD148 LDR X20, [X19 + 0x30]
	0x01DFD14C CBNZ W8, 0x1DFD164
	0x01DFD150 ADRP X0, 0x22F6000
	0x01DFD154 LDR X0, [X0 + 0x5A0]
	0x01DFD158 BL 0x1C16CF4
	0x01DFD15C MOVZ W8, 0x1
	0x01DFD160 STRB W8, [X21 + 0xB6F]
	0x01DFD164 CBZ X20, 0x1DFD400
	0x01DFD168 ADRP X8, 0x22F6000
	0x01DFD16C LDR X8, [X8 + 0x5A0]
	0x01DFD170 MOV X0, X20
	0x01DFD174 MOV X1, X31
	0x01DFD178 LDR X8, [X8]
	0x01DFD17C LDR X8, [X8 + 0xB8]
	0x01DFD180 LDP S1, S0, [X8 + 0x34]
	0x01DFD184 LDR V3, [X8 + 0x30]
	0x01DFD188 FMUL S2, S8, S0
	0x01DFD18C FMUL S1, S8, S1
	0x01DFD190 FMUL S0, S8, S3
	0x01DFD194 BL 0x3BE16E0
	0x01DFD198 MOVZ W0, 0x64
	0x01DFD19C MOV X1, X31
	0x01DFD1A0 BL 0x3C84CAC
	0x01DFD1A4 TBZ X0, 0x0, 0x1DFD200
	0x01DFD1A8 ADRP X21, 0x25DB000
	0x01DFD1AC LDRB W8, [X21 + 0xB70]
	0x01DFD1B0 LDR X20, [X19 + 0x30]
	0x01DFD1B4 CBNZ W8, 0x1DFD1CC
	0x01DFD1B8 ADRP X0, 0x22F6000
	0x01DFD1BC LDR X0, [X0 + 0x5A0]
	0x01DFD1C0 BL 0x1C16CF4
	0x01DFD1C4 MOVZ W8, 0x1
	0x01DFD1C8 STRB W8, [X21 + 0xB70]
	0x01DFD1CC CBZ X20, 0x1DFD400
	0x01DFD1D0 ADRP X8, 0x22F6000
	0x01DFD1D4 LDR X8, [X8 + 0x5A0]
	0x01DFD1D8 MOV X0, X20
	0x01DFD1DC MOV X1, X31
	0x01DFD1E0 LDR X8, [X8]
	0x01DFD1E4 LDR X8, [X8 + 0xB8]
	0x01DFD1E8 LDP S1, S0, [X8 + 0x40]
	0x01DFD1EC LDR V3, [X8 + 0x3C]
	0x01DFD1F0 FMUL S2, S8, S0
	0x01DFD1F4 FMUL S1, S8, S1
	0x01DFD1F8 FMUL S0, S8, S3
	0x01DFD1FC BL 0x3BE16E0
	0x01DFD200 MOVZ W0, 0x20
	0x01DFD204 MOV X1, X31
	0x01DFD208 BL 0x3C84D24
	0x01DFD20C TBZ X0, 0x0, 0x1DFD238
	0x01DFD210 LDR X20, [X19 + 0x30]
	0x01DFD214 CBZ X20, 0x1DFD400
	0x01DFD218 MOV X0, X20
	0x01DFD21C MOV X1, X31
	0x01DFD220 BL 0x3BE1778
	0x01DFD224 ORN W8, W31, W0, 0x0
	0x01DFD228 AND W1, W8, 0x1
	0x01DFD22C MOV X0, X20
	0x01DFD230 MOV X2, X31
	0x01DFD234 BL 0x3BE17B4
	0x01DFD238 MOV X0, X19
	0x01DFD23C MOV X1, X31
	0x01DFD240 BL 0x3C32E90
	0x01DFD244 CBZ X0, 0x1DFD400
	0x01DFD248 MOV X1, X31
	0x01DFD24C BL 0x3C3F58C
	0x01DFD250 LDR X0, [X19 + 0x20]
	0x01DFD254 CBZ X0, 0x1DFD400
	0x01DFD258 MOV X1, X31
	0x01DFD25C MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x25DC000
	008 Move X23, 0x22FC000
	009 Move X21, 0x22FD000
	010 Move W8, [X22+3387]
	011 Move X23, [X23+3720]
	012 Move X21, [X21+1344]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0x22FC000
	020 Move X0, [X0+3720]
	021 Call 0x1C17CF4
	022 Move X0, 0x22FC000
	023 Move X0, [X0+3728]
	024 Call 0x1C17CF4
	025 Move X0, 0x22FC000
	026 Move X0, [X0+3184]
	027 Call 0x1C17CF4
	028 Move X0, 0x22FD000
	029 Move X0, [X0+1344]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X22+3387], W8
	033 Move X0, [X23]
	034 Call 0x1C17F10
	035 Move X2, [X21]
	036 Move X1, X19
	037 Move X3, X31
	038 Move X21, X0
	039 Call Comparison`1<Object>..ctor, X0, X1, X2
	040 Compare X20, 0
	041 JumpIfEqual {92}
	042 Move X8, 0x22FC000
	043 Move X8, [X8+3728]
	044 Move X22, 0x22FC000
	045 Move X0, X20
	046 Move X1, X21
	047 Move X2, [X8]
	048 Move X22, [X22+3184]
	049 Call List`1<Object>.Sort, X0, X1
	050 Move X2, [X22]
	051 Move X0, X20
	052 Move W1, W31
	053 Call List`1<Object>.get_Item, X0, X1
	054 Move X8, [X19]
	055 Move X1, X0
	056 Move X0, X19
	057 Move X9, [X8+952]
	058 Move X2, [X8+960]
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move W1, 2
	061 Move X0, X19
	062 Call LongAisleController.set_phase, X0, X1
	063 Move X0, [X19+232]
	064 Move [X19+424], W31
	065 Compare X0, 0
	066 JumpIfEqual {92}
	067 Move W1, 1
	068 Move X2, X31
	069 Call NavMeshAgent.set_isStopped, X0, X1
	070 Move X0, X19
	071 Call LongAisleController.GetAisleData, X0
	072 Move X8, [X19+192]
	073 Compare X8, 0
	074 JumpIfEqual {92}
	075 Move X0, [X19+208]
	076 Compare X0, 0
	077 JumpIfEqual {92}
	078 Move X19, [X8+160]
	079 Move X1, X31
	080 Call Transform.get_position, X0
	081 Move X0, X19
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X22, [X31+16]
	085 Move X21, [X31+24]
	086 Move S3, 1
	087 Move X1, X31
	088 Move X30, [X31+48]
	089 Move X23, [X31+56]
	090 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	091 Return 
	092 Call 0x1C17F20

Method: System.Void UpdatePreparing()

Disassembly:
	0x01DFC838 BL 0x1DEB39C
	0x01DFC83C MOV X0, X19
	0x01DFC840 BL 0x1DFAB6C
	0x01DFC844 STR W0, [X19 + 0x1A4]
	0x01DFC848 LDP X30, X19, [X31], #0x10
	0x01DFC84C RET
	0x01DFC850 STP X30, X21, [X31 - 0x20]!
	0x01DFC854 STP X20, X19, [X31 + 0x10]
	0x01DFC858 ADRP X20, 0x25DC000
	0x01DFC85C ADRP X21, 0x22FC000
	0x01DFC860 LDRB W8, [X20 + 0xD41]
	0x01DFC864 LDR X21, [X21 + 0xC88]
	0x01DFC868 MOV X19, X0
	0x01DFC86C TBNZ X8, 0x0, 0x1DFC884
	0x01DFC870 ADRP X0, 0x22FC000
	0x01DFC874 LDR X0, [X0 + 0xC88]
	0x01DFC878 BL 0x1C16CF4
	0x01DFC87C MOVZ W8, 0x1
	0x01DFC880 STRB W8, [X20 + 0xD41]
	0x01DFC884 LDR X0, [X21]
	0x01DFC888 LDR W8, [X0 + 0xE0]
	0x01DFC88C CBNZ W8, 0x1DFC894
	0x01DFC890 BL 0x1C16DFC
	0x01DFC894 MOV X0, X19
	0x01DFC898 LDP X20, X19, [X31 + 0x10]
	0x01DFC89C MOV X1, X31
	0x01DFC8A0 LDP X30, X21, [X31], #0x20
	0x01DFC8A4 B 0x1DE7994
	0x01DFC8A8 LDR W1, [X0 + 0x18]
	0x01DFC8AC B 0x1DFC8B0
	0x01DFC8B0 STR X30, [X31 - 0x50]!
	0x01DFC8B4 STP X26, X25, [X31 + 0x10]
	0x01DFC8B8 STP X24, X23, [X31 + 0x20]
	0x01DFC8BC STP X22, X21, [X31 + 0x30]
	0x01DFC8C0 STP X20, X19, [X31 + 0x40]
	0x01DFC8C4 ADRP X22, 0x25DC000
	0x01DFC8C8 ADRP X23, 0x22FD000
	0x01DFC8CC ADRP X21, 0x22FD000
	0x01DFC8D0 ADRP X25, 0x22FD000
	0x01DFC8D4 LDRB W8, [X22 + 0xD42]
	0x01DFC8D8 LDR X23, [X23 + 0x548]
	0x01DFC8DC LDR X21, [X21 + 0x550]
	0x01DFC8E0 LDR X25, [X25 + 0x558]
	0x01DFC8E4 MOV W19, W1
	0x01DFC8E8 MOV X20, X0
	0x01DFC8EC TBNZ X8, 0x0, 0x1DFC94C
	0x01DFC8F0 ADRP X0, 0x22FD000
	0x01DFC8F4 LDR X0, [X0 + 0x560]
	0x01DFC8F8 BL 0x1C16CF4
	0x01DFC8FC ADRP X0, 0x22FD000
	0x01DFC900 LDR X0, [X0 + 0x568]
	0x01DFC904 BL 0x1C16CF4
	0x01DFC908 ADRP X0, 0x22FD000
	0x01DFC90C LDR X0, [X0 + 0x570]
	0x01DFC910 BL 0x1C16CF4
	0x01DFC914 ADRP X0, 0x22FD000
	0x01DFC918 LDR X0, [X0 + 0x550]
	0x01DFC91C BL 0x1C16CF4
	0x01DFC920 ADRP X0, 0x22FD000
	0x01DFC924 LDR X0, [X0 + 0x548]
	0x01DFC928 BL 0x1C16CF4
	0x01DFC92C ADRP X0, 0x22FD000
	0x01DFC930 LDR X0, [X0 + 0x578]
	0x01DFC934 BL 0x1C16CF4
	0x01DFC938 ADRP X0, 0x22FD000
	0x01DFC93C LDR X0, [X0 + 0x558]
	0x01DFC940 BL 0x1C16CF4
	0x01DFC944 MOVZ W8, 0x1
	0x01DFC948 STRB W8, [X22 + 0xD42]
	0x01DFC94C LDR X0, [X23]
	0x01DFC950 BL 0x1C16F10
	0x01DFC954 LDR X1, [X21]
	0x01DFC958 MOV X21, X0
	0x01DFC95C BL 0x301B7C4
	0x01DFC960 LDR X0, [X25]
	0x01DFC964 LDR X22, [X20 + 0x20]
	0x01DFC968 LDR W8, [X0 + 0xE0]
	0x01DFC96C CBNZ W8, 0x1DFC978
	0x01DFC970 BL 0x1C16DFC
	0x01DFC974 LDR X0, [X25]
	0x01DFC978 LDR X8, [X0 + 0xB8]
	0x01DFC97C ADRP X26, 0x22FD000
	0x01DFC980 LDR X23, [X8 + 0x8]
	0x01DFC984 LDR X26, [X26 + 0x560]
	0x01DFC988 CBNZ X23, 0x1DFC9DC
	0x01DFC98C LDR W8, [X0 + 0xE0]
	0x01DFC990 CBNZ W8, 0x1DFC99C
	0x01DFC994 BL 0x1C16DFC
	0x01DFC998 LDR X0, [X25]
	0x01DFC99C ADRP X9, 0x22FD000
	0x01DFC9A0 LDR X8, [X0 + 0xB8]
	0x01DFC9A4 LDR X9, [X9 + 0x568]
	0x01DFC9A8 LDR X24, [X8]
	0x01DFC9AC LDR X0, [X9]
	0x01DFC9B0 BL 0x1C16F10
	0x01DFC9B4 ADRP X8, 0x22FD000
	0x01DFC9B8 LDR X8, [X8 + 0x578]
	0x01DFC9BC MOV X1, X24
	0x01DFC9C0 MOV X3, X31
	0x01DFC9C4 MOV X23, X0
	0x01DFC9C8 LDR X2, [X8]
	0x01DFC9CC BL 0x2D30128
	0x01DFC9D0 LDR X8, [X25]
	0x01DFC9D4 LDR X8, [X8 + 0xB8]
	0x01DFC9D8 STR X23, [X8 + 0x8]
	0x01DFC9DC LDR X2, [X26]
	0x01DFC9E0 MOV X0, X22
	0x01DFC9E4 MOV X1, X23
	0x01DFC9E8 BL 0x21D49C0
	0x01DFC9EC CMP W19, 0x1
	0x01DFC9F0 B.LT 0x1DFCAC8
	0x01DFC9F4 ADRP X24, 0x22FD000
	0x01DFC9F8 LDR X24, [X24 + 0x570]
	0x01DFC9FC MOV W23, W31
	0x01DFCA00 ADD W22, W0, 0x1
	0x01DFCA04 MOV W0, W31
	0x01DFCA08 MOV W1, W22
	0x01DFCA0C MOV X2, X31
	0x01DFCA10 BL 0x3C309A8
	0x01DFCA14 LDR X8, [X20 + 0x20]
	0x01DFCA18 CBZ X8, 0x1DFCAE4
	0x01DFCA1C LDR W9, [X8 + 0x18]
	0x01DFCA20 CMP W9, 0x1
	0x01DFCA24 B.LT 0x1DFCABC
	0x01DFCA28 MOV W10, W31
	0x01DFCA2C MOV W11, W31
	0x01DFCA30 CMP W10, W9
	0x01DFCA34 B.CS 0x1DFCAE8
	0x01DFCA38 ADD X12, X8, W10, 0x3, SXTW
	0x01DFCA3C LDR X12, [X12 + 0x20]
	0x01DFCA40 CBZ X12, 0x1DFCAE4
	0x01DFCA44 LDR W13, [X12 + 0x18]
	0x01DFCA48 ADD W11, W13, W11
	0x01DFCA4C CMP W0, W11
	0x01DFCA50 B.LE 0x1DFCA64
	0x01DFCA54 ADD W10, W10, 0x1
	0x01DFCA58 CMP W10, W9
	0x01DFCA5C B.LT 0x1DFCA30
	0x01DFCA60 B 0x1DFCABC
	0x01DFCA64 CBZ X21, 0x1DFCAE4
	0x01DFCA68 LDR W10, [X21 + 0x1C]
	0x01DFCA6C LDR X1, [X12 + 0x10]
	0x01DFCA70 LDR X8, [X21 + 0x10]
	0x01DFCA74 LDR X9, [X24]
	0x01DFCA78 ADD W10, W10, 0x1
	0x01DFCA7C STR W10, [X21 + 0x1C]
	0x01DFCA80 CBZ X8, 0x1DFCAE4
	0x01DFCA84 LDRSW X10, [X21 + 0x18]
	0x01DFCA88 LDR W11, [X8 + 0x18]
	0x01DFCA8C CMP W10, W11
	0x01DFCA90 B.CS 0x1DFCAA8
	0x01DFCA94 ADD W9, W10, 0x1
	0x01DFCA98 ADD X8, X8, X10, 0x3, LSL
	0x01DFCA9C STR W9, [X21 + 0x18]
	0x01DFCAA0 STR X1, [X8 + 0x20]
	0x01DFCAA4 B 0x1DFCABC
	0x01DFCAA8 LDR X8, [X9 + 0x20]
	0x01DFCAAC MOV X0, X21
	0x01DFCAB0 LDR X8, [X8 + 0xC0]
	0x01DFCAB4 LDR X2, [X8 + 0x70]
	0x01DFCAB8 BL 0x301BF90
	0x01DFCABC ADD W23, W23, 0x1
	0x01DFCAC0 CMP W23, W19
	0x01DFCAC4 B.NE 0x1DFCA04
	0x01DFCAC8 MOV X0, X21
	0x01DFCACC LDP X20, X19, [X31 + 0x40]
	0x01DFCAD0 LDP X22, X21, [X31 + 0x30]
	0x01DFCAD4 LDP X24, X23, [X31 + 0x20]
	0x01DFCAD8 LDP X26, X25, [X31 + 0x10]
	0x01DFCADC LDR X30, [X31], #0x50
	0x01DFCAE0 RET
	0x01DFCAE4 BL 0x1C16F20
	0x01DFCAE8 BL 0x1C16F28
	0x01DFCAEC STP X29, X30, [X31 - 0x60]!
	0x01DFCAF0 STP X28, X27, [X31 + 0x10]
	0x01DFCAF4 STP X26, X25, [X31 + 0x20]
	0x01DFCAF8 STP X24, X23, [X31 + 0x30]
	0x01DFCAFC STP X22, X21, [X31 + 0x40]
	0x01DFCB00 STP X20, X19, [X31 + 0x50]
	0x01DFCB04 ADRP X22, 0x25DC000
	0x01DFCB08 ADRP X23, 0x22FD000
	0x01DFCB0C ADRP X21, 0x22FD000
	0x01DFCB10 LDRB W8, [X22 + 0xD43]
	0x01DFCB14 LDR X23, [X23 + 0x548]
	0x01DFCB18 LDR X21, [X21 + 0x550]
	0x01DFCB1C MOV W19, W1
	0x01DFCB20 MOV X20, X0
	0x01DFCB24 TBNZ X8, 0x0, 0x1DFCB9C
	0x01DFCB28 ADRP X0, 0x22F9000
	0x01DFCB2C LDR X0, [X0 + 0x9B8]
	0x01DFCB30 BL 0x1C16CF4
	0x01DFCB34 ADRP X0, 0x22FD000
	0x01DFCB38 LDR X0, [X0 + 0x560]
	0x01DFCB3C BL 0x1C16CF4
	0x01DFCB40 ADRP X0, 0x22FD000
	0x01DFCB44 LDR X0, [X0 + 0x568]
	0x01DFCB48 BL 0x1C16CF4
	0x01DFCB4C ADRP X0, 0x22FD000
	0x01DFCB50 LDR X0, [X0 + 0x570]
	0x01DFCB54 BL 0x1C16CF4
	0x01DFCB58 ADRP X0, 0x22FD000
	0x01DFCB5C LDR X0, [X0 + 0x550]
	0x01DFCB60 BL 0x1C16CF4
	0x01DFCB64 ADRP X0, 0x22FD000
	0x01DFCB68 LDR X0, [X0 + 0x548]
	0x01DFCB6C BL 0x1C16CF4
	0x01DFCB70 ADRP X0, 0x22FD000
	0x01DFCB74 LDR X0, [X0 + 0x580]
	0x01DFCB78 BL 0x1C16CF4
	0x01DFCB7C ADRP X0, 0x22FD000
	0x01DFCB80 LDR X0, [X0 + 0x588]
	0x01DFCB84 BL 0x1C16CF4
	0x01DFCB88 ADRP X0, 0x22FD000
	0x01DFCB8C LDR X0, [X0 + 0x558]
	0x01DFCB90 BL 0x1C16CF4
	0x01DFCB94 MOVZ W8, 0x1
	0x01DFCB98 STRB W8, [X22 + 0xD43]
	0x01DFCB9C LDR X0, [X23]
	0x01DFCBA0 BL 0x1C16F10
	0x01DFCBA4 LDR X1, [X21]
	0x01DFCBA8 MOV X21, X0
	0x01DFCBAC BL 0x301B7C4
	0x01DFCBB0 LDR X8, [X20 + 0x20]
	0x01DFCBB4 CBZ X8, 0x1DFCEAC
	0x01DFCBB8 ADRP X9, 0x22F9000
	0x01DFCBBC LDR X9, [X9 + 0x9B8]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X19, X0
	015 Move X0, [X0+352]
	016 Compare X0, 0
	017 JumpIfEqual {255}
	018 Move X1, X31
	019 Call Component.get_transform, X0
	020 Compare X0, 0
	021 JumpIfEqual {255}
	022 Move X1, X31
	023 Call Transform.get_position, X0
	024 Move X0, X19
	025 Move X1, X31
	026 Move V8, V0
	027 Move V9, V1
	028 Move V10, V2
	029 Call Component.get_transform, X0
	030 Compare X0, 0
	031 JumpIfEqual {255}
	032 Move X1, X31
	033 Call Transform.get_position, X0
	034 Move X20, 0x25DD000
	035 Move W8, [X20+1925]
	036 Move V11, V0
	037 Move V12, V1
	038 Move V13, V2
	039 Compare W8, 0
	040 JumpIfNotEqual {46}
	041 Move X0, 0x22F8000
	042 Move X0, [X0+1448]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X20+1925], W8
	046 Move X20, 0x22F8000
	047 Move X20, [X20+1448]
	048 Subtract S11, S8, S11
	049 Subtract S9, S9, S12
	050 Subtract S8, S10, S13
	051 Move X0, [X20]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Multiply S0, S11, S11
	057 Multiply S1, S9, S9
	058 Move X8, -19992576
	059 Add S0, S0, S1
	060 Move V1, [X8+380]
	061 Multiply S2, S8, S8
	062 Add S0, S2, S0
	063 NotImplemented "Instruction FSQRT not yet implemented."
	064 NotImplemented "Instruction FCMP not yet implemented."
	065 NotImplemented "Instruction FDIV not yet implemented."
	066 NotImplemented "Instruction FDIV not yet implemented."
	067 NotImplemented "Instruction FDIV not yet implemented."
	068 Move X21, 0x25DD000
	069 Move W8, [X21+1923]
	070 Compare W8, 0
	071 JumpIfNotEqual {77}
	072 Move X0, 0x22F8000
	073 Move X0, [X0+1440]
	074 Call 0x1C17CF4
	075 Move W8, 1
	076 Move [X21+1923], W8
	077 Move X8, 0x22F8000
	078 Move X8, [X8+1440]
	079 Move X8, [X8]
	080 Move X8, [X8+184]
	081 Move S12, [X8]
	082 Move S13, [X8+4]
	083 Move V14, [X8+8]
	084 Move V0, [X19+500]
	085 Move V1, [X19+504]
	086 Move V2, [X19+508]
	087 Move X8, [X19+192]
	088 Multiply S3, S12, S0
	089 Multiply S4, S13, S1
	090 Add S3, S3, S4
	091 Multiply S4, S14, S2
	092 Add S3, S4, S3
	093 NotImplemented "Instruction FNEG not yet implemented."
	094 NotImplemented "Instruction FCMP not yet implemented."
	095 NotImplemented "Instruction FNEG not yet implemented."
	096 NotImplemented "Instruction FCSEL not yet implemented."
	097 NotImplemented "Instruction FNEG not yet implemented."
	098 NotImplemented "Instruction FCSEL not yet implemented."
	099 NotImplemented "Instruction FCSEL not yet implemented."
	100 Move [X19+460], S0
	101 Move [X19+464], S1
	102 Move [X19+468], S2
	103 Compare X8, 0
	104 JumpIfEqual {255}
	105 Move V8, [X8+64]
	106 Move X0, X19
	107 Move X1, X31
	108 Call Component.get_transform, X0
	109 Compare X0, 0
	110 JumpIfEqual {255}
	111 Move X1, X31
	112 Move [X31+12], S8
	113 Call Transform.get_forward, X0
	114 Move X21, 0x25DD000
	115 Move W8, [X21+2596]
	116 Move V8, V0
	117 Move V9, V1
	118 Move V10, V2
	119 Compare W8, 0
	120 JumpIfNotEqual {126}
	121 Move X0, 0x22F8000
	122 Move X0, [X0+1448]
	123 Call 0x1C17CF4
	124 Move W8, 1
	125 Move [X21+2596], W8
	126 Move X0, [X20]
	127 Multiply S0, S12, S12
	128 Multiply S1, S13, S13
	129 Add S0, S0, S1
	130 Multiply S1, S14, S14
	131 Move W8, [X0+224]
	132 Add S15, S1, S0
	133 Multiply S0, S8, S8
	134 Multiply S1, S9, S9
	135 Add S0, S0, S1
	136 Multiply S1, S10, S10
	137 Add S11, S1, S0
	138 Compare W8, 0
	139 JumpIfNotEqual {141}
	140 Call 0x1C17DFC
	141 Move X8, -19996672
	142 Move V1, [X8+4072]
	143 Multiply S0, S15, S11
	144 NotImplemented "Instruction FSQRT not yet implemented."
	145 Move S15, W31
	146 NotImplemented "Instruction FCMP not yet implemented."
	147 Move X0, [X20]
	148 Multiply S1, S12, S8
	149 Multiply S2, S13, S9
	150 Multiply S3, S14, S10
	151 Add S1, S1, S2
	152 Add S1, S3, S1
	153 Move W8, [X0+224]
	154 NotImplemented "Instruction FDIV not yet implemented."
	155 Move S1, 1
	156 Move S2, -1
	157 NotImplemented "Instruction FMIN not yet implemented."
	158 NotImplemented "Instruction FCMP not yet implemented."
	159 NotImplemented "Instruction FCSEL not yet implemented."
	160 Compare W8, 0
	161 JumpIfNotEqual {163}
	162 Call 0x1C17DFC
	163 NotImplemented "Instruction FCVT not yet implemented."
	164 Call 0x3EB2B80
	165 Move X8, -19992576
	166 Move V1, [X8+1096]
	167 NotImplemented "Instruction INVALID not yet implemented."
	168 Multiply S15, S0, S1
	169 Move X0, X19
	170 Move X1, X31
	171 Call Component.get_transform, X0
	172 Move X20, X0
	173 Move X0, X19
	174 Move X1, X31
	175 Call Component.get_transform, X0
	176 Compare X0, 0
	177 JumpIfEqual {255}
	178 Move V0, [X31+12]
	179 Move X1, X31
	180 NotImplemented "Instruction FDIV not yet implemented."
	181 Move [X31+12], S0
	182 Call Transform.get_rotation, X0
	183 Move V8, V0
	184 Move V9, V1
	185 Move V10, V2
	186 Move V0, [X19+460]
	187 Move V1, [X19+464]
	188 Move V2, [X19+468]
	189 Move X0, X31
	190 Move V11, V3
	191 Call Quaternion.LookRotation, X0
	192 Move X0, X19
	193 Move X1, X31
	194 Move V12, V0
	195 Move V13, V1
	196 Move V14, V2
	197 Move V15, V3
	198 Call MobController.get_deltaTime, X0
	199 Move V1, [X31+12]
	200 Move V2, V10
	201 Move V3, V11
	202 Move V4, V12
	203 Multiply S0, S1, S0
	204 Move [X31], S0
	205 Move V0, V8
	206 Move V1, V9
	207 Move V5, V13
	208 Move V6, V14
	209 Move V7, V15
	210 Move X0, X31
	211 Call Quaternion.Slerp, X0, X1, V0
	212 Compare X20, 0
	213 JumpIfEqual {255}
	214 Move X0, X20
	215 Move X1, X31
	216 Call Transform.set_rotation, X0, X1
	217 Move V8, [X19+424]
	218 Move S0, 1.5
	219 NotImplemented "Instruction FCMP not yet implemented."
	220 Move X0, X19
	221 Move X1, X31
	222 Call MobController.get_deltaTime, X0
	223 Add S0, S8, S0
	224 Move [X19+424], S0
	225 Move X20, [X31+96]
	226 Move X19, [X31+104]
	227 Move X30, [X31+80]
	228 Move X21, [X31+88]
	229 Move D9, [X31+64]
	230 Move D8, [X31+72]
	231 Move D11, [X31+48]
	232 Move D10, [X31+56]
	233 Move D13, [X31+32]
	234 Move D12, [X31+40]
	235 Move D15, [X31+16]
	236 Move D14, [X31+24]
	237 Add X31, X31, 112
	238 Return 
	239 Move X0, X19
	240 Move X20, [X31+96]
	241 Move X19, [X31+104]
	242 Move X30, [X31+80]
	243 Move X21, [X31+88]
	244 Move D9, [X31+64]
	245 Move D8, [X31+72]
	246 Move D11, [X31+48]
	247 Move D10, [X31+56]
	248 Move D13, [X31+32]
	249 Move D12, [X31+40]
	250 Move D15, [X31+16]
	251 Move D14, [X31+24]
	252 Add X31, X31, 112
	253 Call LongAisleController.SetCharging, X0
	254 Return 
	255 Call 0x1C17F20

Method: System.Void SetCharging()

Disassembly:
	0x01DFD260 MOV V9.16B, V1.16B
	0x01DFD264 MOV V10.16B, V2.16B
	0x01DFD268 BL 0x3C3F58C
	0x01DFD26C ADRP X21, 0x25DB000
	0x01DFD270 LDRB W8, [X21 + 0x85C]
	0x01DFD274 MOV V11.16B, V0.16B
	0x01DFD278 MOV V12.16B, V1.16B
	0x01DFD27C MOV V13.16B, V2.16B
	0x01DFD280 CBNZ W8, 0x1DFD298
	0x01DFD284 ADRP X0, 0x22F6000
	0x01DFD288 LDR X0, [X0 + 0x5A8]
	0x01DFD28C BL 0x1C16CF4
	0x01DFD290 MOVZ W8, 0x1
	0x01DFD294 STRB W8, [X21 + 0x85C]
	0x01DFD298 ADRP X22, 0x22F6000
	0x01DFD29C LDR X22, [X22 + 0x5A8]
	0x01DFD2A0 FSUB S11, S8, S11
	0x01DFD2A4 FSUB S9, S9, S12
	0x01DFD2A8 FSUB S8, S10, S13
	0x01DFD2AC LDR X0, [X22]
	0x01DFD2B0 LDR W8, [X0 + 0xE0]
	0x01DFD2B4 CBNZ W8, 0x1DFD2BC
	0x01DFD2B8 BL 0x1C16DFC
	0x01DFD2BC ADRP X8, 0xFFFFFFFFFECED000
	0x01DFD2C0 FMUL S0, S11, S11
	0x01DFD2C4 FMUL S1, S9, S9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25DC000
	005 Move W8, [X20+3388]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22FC000
	012 Move X0, [X0+3248]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3388], W8
	016 Move W1, 3
	017 Move X0, X19
	018 Call LongAisleController.set_phase, X0, X1
	019 Move X8, [X19+440]
	020 Compare X8, 0
	021 JumpIfEqual {32}
	022 Move W8, [X8+24]
	023 Move S0, W31
	024 Move S1, 5
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction FCSEL not yet implemented."
	027 Move [X19+428], S0
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return 
	032 Call 0x1C17F20

Method: System.Void UpdateCharging()

Disassembly:
	0x01DFCBC0 LDR W1, [X8 + 0x18]
	0x01DFCBC4 ADRP X26, 0x22FD000
	0x01DFCBC8 LDR X0, [X9]
	0x01DFCBCC LDR X26, [X26 + 0x558]
	0x01DFCBD0 BL 0x1C16D6C
	0x01DFCBD4 LDR X8, [X26]
	0x01DFCBD8 LDR X23, [X20 + 0x20]
	0x01DFCBDC MOV X22, X0
	0x01DFCBE0 LDR W9, [X8 + 0xE0]
	0x01DFCBE4 CBNZ W9, 0x1DFCBF4
	0x01DFCBE8 MOV X0, X8
	0x01DFCBEC BL 0x1C16DFC
	0x01DFCBF0 LDR X8, [X26]
	0x01DFCBF4 LDR X9, [X8 + 0xB8]
	0x01DFCBF8 ADRP X27, 0x22FD000
	0x01DFCBFC LDR X24, [X9 + 0x10]
	0x01DFCC00 LDR X27, [X27 + 0x560]
	0x01DFCC04 CBNZ X24, 0x1DFCC5C
	0x01DFCC08 LDR W9, [X8 + 0xE0]
	0x01DFCC0C CBNZ W9, 0x1DFCC1C
	0x01DFCC10 MOV X0, X8
	0x01DFCC14 BL 0x1C16DFC
	0x01DFCC18 LDR X8, [X26]
	0x01DFCC1C LDR X8, [X8 + 0xB8]
	0x01DFCC20 LDR X25, [X8]
	0x01DFCC24 ADRP X8, 0x22FD000
	0x01DFCC28 LDR X8, [X8 + 0x568]
	0x01DFCC2C LDR X0, [X8]
	0x01DFCC30 BL 0x1C16F10
	0x01DFCC34 ADRP X8, 0x22FD000
	0x01DFCC38 LDR X8, [X8 + 0x580]
	0x01DFCC3C MOV X1, X25
	0x01DFCC40 MOV X3, X31
	0x01DFCC44 MOV X24, X0
	0x01DFCC48 LDR X2, [X8]
	0x01DFCC4C BL 0x2D30128
	0x01DFCC50 LDR X8, [X26]
	0x01DFCC54 LDR X8, [X8 + 0xB8]
	0x01DFCC58 STR X24, [X8 + 0x10]
	0x01DFCC5C LDR X2, [X27]
	0x01DFCC60 MOV X0, X23
	0x01DFCC64 MOV X1, X24
	0x01DFCC68 BL 0x21D49C0
	0x01DFCC6C CMP W19, 0x1
	0x01DFCC70 B.LT 0x1DFCE88
	0x01DFCC74 LDR X23, [X20 + 0x20]
	0x01DFCC78 MOV W24, W0
	0x01DFCC7C MOV W25, W31
	0x01DFCC80 MOV W29, W31
	0x01DFCC84 ADD X28, X22, 0x20
	0x01DFCC88 CBZ X23, 0x1DFCEAC
	0x01DFCC8C LDR W8, [X23 + 0x18]
	0x01DFCC90 CMP W25, W8
	0x01DFCC94 B.NE 0x1DFCD5C
	0x01DFCC98 CBZ X22, 0x1DFCEAC
	0x01DFCC9C LDR W8, [X22 + 0x18]
	0x01DFCCA0 UBFM X9, X8, 0x20, 0x1F
	0x01DFCCA4 CMP X9, 0x1
	0x01DFCCA8 B.LT 0x1DFCCCC
	0x01DFCCAC MOV X9, X31
	0x01DFCCB0 SXTW X10, W8
	0x01DFCCB4 CMP X9, X8
	0x01DFCCB8 B.CS 0x1DFCEA8
	0x01DFCCBC STRB W31, [X28, X9, LSL]
	0x01DFCCC0 ADD X9, X9, 0x1
	0x01DFCCC4 CMP X10, X9
	0x01DFCCC8 B.NE 0x1DFCCB4
	0x01DFCCCC LDR X0, [X26]
	0x01DFCCD0 LDR W8, [X0 + 0xE0]
	0x01DFCCD4 CBNZ W8, 0x1DFCCE0
	0x01DFCCD8 BL 0x1C16DFC
	0x01DFCCDC LDR X0, [X26]
	0x01DFCCE0 LDR X8, [X0 + 0xB8]
	0x01DFCCE4 LDR X24, [X8 + 0x18]
	0x01DFCCE8 CBNZ X24, 0x1DFCD3C
	0x01DFCCEC LDR W8, [X0 + 0xE0]
	0x01DFCCF0 CBNZ W8, 0x1DFCCFC
	0x01DFCCF4 BL 0x1C16DFC
	0x01DFCCF8 LDR X0, [X26]
	0x01DFCCFC LDR X8, [X0 + 0xB8]
	0x01DFCD00 LDR X25, [X8]
	0x01DFCD04 ADRP X8, 0x22FD000
	0x01DFCD08 LDR X8, [X8 + 0x568]
	0x01DFCD0C LDR X0, [X8]
	0x01DFCD10 BL 0x1C16F10
	0x01DFCD14 ADRP X8, 0x22FD000
	0x01DFCD18 LDR X8, [X8 + 0x588]
	0x01DFCD1C MOV X1, X25
	0x01DFCD20 MOV X3, X31
	0x01DFCD24 MOV X24, X0
	0x01DFCD28 LDR X2, [X8]
	0x01DFCD2C BL 0x2D30128
	0x01DFCD30 LDR X8, [X26]
	0x01DFCD34 LDR X8, [X8 + 0xB8]
	0x01DFCD38 STR X24, [X8 + 0x18]
	0x01DFCD3C ADRP X8, 0x22FD000
	0x01DFCD40 LDR X8, [X8 + 0x560]
	0x01DFCD44 MOV X0, X23
	0x01DFCD48 MOV X1, X24
	0x01DFCD4C LDR X2, [X8]
	0x01DFCD50 BL 0x21D49C0
	0x01DFCD54 MOV W24, W0
	0x01DFCD58 MOV W25, W31
	0x01DFCD5C ADD W1, W24, 0x1
	0x01DFCD60 MOV W0, W31
	0x01DFCD64 MOV X2, X31
	0x01DFCD68 BL 0x3C309A8
	0x01DFCD6C LDR X23, [X20 + 0x20]
	0x01DFCD70 CBZ X23, 0x1DFCEAC
	0x01DFCD74 LDR W9, [X23 + 0x18]
	0x01DFCD78 UBFM X8, X9, 0x20, 0x1F
	0x01DFCD7C CMP X8, 0x1
	0x01DFCD80 B.LT 0x1DFCE7C
	0x01DFCD84 MOV W10, W31
	0x01DFCD88 MOV X27, X31
	0x01DFCD8C SXTW X11, W9
	0x01DFCD90 CBZ X22, 0x1DFCEAC
	0x01DFCD94 LDR W8, [X22 + 0x18]
	0x01DFCD98 CMP X27, X8
	0x01DFCD9C B.CS 0x1DFCEA8
	0x01DFCDA0 LDRB W12, [X28, X27, LSL]
	0x01DFCDA4 CBNZ W12, 0x1DFCDCC
	0x01DFCDA8 CMP X27, X9
	0x01DFCDAC B.CS 0x1DFCEA8
	0x01DFCDB0 ADD X12, X23, X27, 0x3, LSL
	0x01DFCDB4 LDR X12, [X12 + 0x20]
	0x01DFCDB8 CBZ X12, 0x1DFCEAC
	0x01DFCDBC LDR W13, [X12 + 0x18]
	0x01DFCDC0 ADD W10, W13, W10
	0x01DFCDC4 CMP W0, W10
	0x01DFCDC8 B.LE 0x1DFCDDC
	0x01DFCDCC ADD X27, X27, 0x1
	0x01DFCDD0 CMP X27, X11
	0x01DFCDD4 B.LT 0x1DFCD90
	0x01DFCDD8 B 0x1DFCE7C
	0x01DFCDDC CBZ X21, 0x1DFCEAC
	0x01DFCDE0 ADRP X10, 0x22FD000
	0x01DFCDE4 LDR X1, [X12 + 0x10]
	0x01DFCDE8 LDR W11, [X21 + 0x1C]
	0x01DFCDEC LDR X9, [X21 + 0x10]
	0x01DFCDF0 LDR X10, [X10 + 0x570]
	0x01DFCDF4 ADD W11, W11, 0x1
	0x01DFCDF8 LDR X10, [X10]
	0x01DFCDFC STR W11, [X21 + 0x1C]
	0x01DFCE00 CBZ X9, 0x1DFCEAC
	0x01DFCE04 LDRSW X11, [X21 + 0x18]
	0x01DFCE08 LDR W12, [X9 + 0x18]
	0x01DFCE0C CMP W11, W12
	0x01DFCE10 B.CS 0x1DFCE28
	0x01DFCE14 ADD W10, W11, 0x1
	0x01DFCE18 ADD X9, X9, X11, 0x3, LSL
	0x01DFCE1C STR W10, [X21 + 0x18]
	0x01DFCE20 STR X1, [X9 + 0x20]
	0x01DFCE24 B 0x1DFCE40
	0x01DFCE28 LDR X8, [X10 + 0x20]
	0x01DFCE2C MOV X0, X21
	0x01DFCE30 LDR X8, [X8 + 0xC0]
	0x01DFCE34 LDR X2, [X8 + 0x70]
	0x01DFCE38 BL 0x301BF90
	0x01DFCE3C LDR X8, [X22 + 0x18]
	0x01DFCE40 CMP W27, W8
	0x01DFCE44 B.CS 0x1DFCEA8
	0x01DFCE48 MOVZ W8, 0x1
	0x01DFCE4C STRB W8, [X28, X27, LSL]
	0x01DFCE50 LDR X23, [X20 + 0x20]
	0x01DFCE54 CBZ X23, 0x1DFCEAC
	0x01DFCE58 LDR W8, [X23 + 0x18]
	0x01DFCE5C CMP W27, W8
	0x01DFCE60 B.CS 0x1DFCEA8
	0x01DFCE64 ADD X8, X23, X27, 0x3, LSL
	0x01DFCE68 LDR X8, [X8 + 0x20]
	0x01DFCE6C CBZ X8, 0x1DFCEAC
	0x01DFCE70 LDR W8, [X8 + 0x18]
	0x01DFCE74 ADD W25, W25, 0x1
	0x01DFCE78 SUB W24, W24, W8
	0x01DFCE7C ADD W29, W29, 0x1
	0x01DFCE80 CMP W29, W19
	0x01DFCE84 B.NE 0x1DFCC88
	0x01DFCE88 MOV X0, X21
	0x01DFCE8C LDP X20, X19, [X31 + 0x50]
	0x01DFCE90 LDP X22, X21, [X31 + 0x40]
	0x01DFCE94 LDP X24, X23, [X31 + 0x30]
	0x01DFCE98 LDP X26, X25, [X31 + 0x20]
	0x01DFCE9C LDP X28, X27, [X31 + 0x10]
	0x01DFCEA0 LDP X29, X30, [X31], #0x60
	0x01DFCEA4 RET
	0x01DFCEA8 BL 0x1C16F28
	0x01DFCEAC BL 0x1C16F20
	0x01DFCEB0 ADRP X8, 0xFFFFFFFFFECF2000
	0x01DFCEB4 LDR V0, [X8 + 0x270]
	0x01DFCEB8 MOV X1, X31
	0x01DFCEBC STR D0, [X0 + 0x18]
	0x01DFCEC0 B 0x3C36D2C
	0x01DFCEC4 MOVZ W8, 0x3E8
	0x01DFCEC8 MOV X1, X31
	0x01DFCECC STR W8, [X0 + 0x18]
	0x01DFCED0 B 0x33BDD8C
	0x01DFCED4 STR X30, [X31 - 0x20]!
	0x01DFCED8 STP X20, X19, [X31 + 0x10]
	0x01DFCEDC ADRP X19, 0x25DC000
	0x01DFCEE0 ADRP X20, 0x22FD000
	0x01DFCEE4 LDRB W8, [X19 + 0xD44]
	0x01DFCEE8 LDR X20, [X20 + 0x558]
	0x01DFCEEC TBNZ X8, 0x0, 0x1DFCF04
	0x01DFCEF0 ADRP X0, 0x22FD000
	0x01DFCEF4 LDR X0, [X0 + 0x558]
	0x01DFCEF8 BL 0x1C16CF4
	0x01DFCEFC MOVZ W8, 0x1
	0x01DFCF00 STRB W8, [X19 + 0xD44]
	0x01DFCF04 LDR X0, [X20]
	0x01DFCF08 BL 0x1C16F10
	0x01DFCF0C MOV X1, X31
	0x01DFCF10 MOV X19, X0
	0x01DFCF14 BL 0x33BDD8C
	0x01DFCF18 LDR X8, [X20]
	0x01DFCF1C LDR X8, [X8 + 0xB8]
	0x01DFCF20 STR X19, [X8]
	0x01DFCF24 LDP X20, X19, [X31 + 0x10]
	0x01DFCF28 LDR X30, [X31], #0x20
	0x01DFCF2C RET
	0x01DFCF30 MOV X1, X31
	0x01DFCF34 B 0x33BDD8C
	0x01DFCF38 STR X30, [X31 - 0x10]!
	0x01DFCF3C CBZ X1, 0x1DFCF4C
	0x01DFCF40 LDR W0, [X1 + 0x18]
	0x01DFCF44 LDR X30, [X31], #0x10
	0x01DFCF48 RET
	0x01DFCF4C BL 0x1C16F20
	0x01DFCF50 STR X30, [X31 - 0x10]!
	0x01DFCF54 CBZ X1, 0x1DFCF64
	0x01DFCF58 LDR W0, [X1 + 0x18]
	0x01DFCF5C LDR X30, [X31], #0x10
	0x01DFCF60 RET
	0x01DFCF64 BL 0x1C16F20
	0x01DFCF68 STR X30, [X31 - 0x10]!
	0x01DFCF6C CBZ X1, 0x1DFCF7C
	0x01DFCF70 LDR W0, [X1 + 0x18]
	0x01DFCF74 LDR X30, [X31], #0x10
	0x01DFCF78 RET
	0x01DFCF7C BL 0x1C16F20
	0x01DFCF80 STP X30, X21, [X31 - 0x20]!
	0x01DFCF84 STP X20, X19, [X31 + 0x10]
	0x01DFCF88 ADRP X20, 0x25DC000
	0x01DFCF8C ADRP X21, 0x22FD000
	0x01DFCF90 LDRB W8, [X20 + 0xD45]
	0x01DFCF94 LDR X21, [X21 + 0x590]
	0x01DFCF98 MOV X19, X0
	0x01DFCF9C TBNZ X8, 0x0, 0x1DFCFB4
	0x01DFCFA0 ADRP X0, 0x22FD000
	0x01DFCFA4 LDR X0, [X0 + 0x590]
	0x01DFCFA8 BL 0x1C16CF4
	0x01DFCFAC MOVZ W8, 0x1
	0x01DFCFB0 STRB W8, [X20 + 0xD45]
	0x01DFCFB4 LDR X1, [X21]
	0x01DFCFB8 MOV X0, X19
	0x01DFCFBC BL 0x21A3894
	0x01DFCFC0 STR X0, [X19 + 0x30]
	0x01DFCFC4 CBZ X0, 0x1DFD014
	0x01DFCFC8 MOVZ W1, 0x1
	0x01DFCFCC MOV X2, X31
	0x01DFCFD0 BL 0x3BE1A80
	0x01DFCFD4 LDR X0, [X19 + 0x30]
	0x01DFCFD8 CBZ X0, 0x1DFD014
	0x01DFCFDC MOVZ W1, 0x1
	0x01DFCFE0 MOV X2, X31
	0x01DFCFE4 BL 0x3BE1AC4
	0x01DFCFE8 LDR X0, [X19 + 0x20]
	0x01DFCFEC CBZ X0, 0x1DFD014
	0x01DFCFF0 LDR X19, [X19 + 0x30]
	0x01DFCFF4 MOV X1, X31
	0x01DFCFF8 BL 0x3C3F58C
	0x01DFCFFC CBZ X19, 0x1DFD014
	0x01DFD000 MOV X0, X19
	0x01DFD004 LDP X20, X19, [X31 + 0x10]
	0x01DFD008 MOV X1, X31
	0x01DFD00C LDP X30, X21, [X31], #0x20
	0x01DFD010 B 0x3BE13F8
	0x01DFD014 BL 0x1C16F20

ISIL:
	001 Move [X31-144], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X27
	010 Move [X31+80], X26
	011 Move [X31+88], X25
	012 Move [X31+96], X24
	013 Move [X31+104], X23
	014 Move [X31+112], X22
	015 Move [X31+120], X21
	016 Move [X31+128], X20
	017 Move [X31+136], X19
	018 Move X20, 0x25DD000
	019 Move W8, [X20+3389]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {36}
	025 Move X0, 0x22FE000
	026 Move X0, [X0+328]
	027 Call 0x1C17CF4
	028 Move X0, 0x22F8000
	029 Move X0, [X0+1496]
	030 Call 0x1C17CF4
	031 Move X0, 0x22F8000
	032 Move X0, [X0+1528]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+3389], W8
	036 Move [X31+8], X31
	037 Move X8, [X19+192]
	038 Compare X8, 0
	039 JumpIfEqual {320}
	040 Move X8, [X8+56]
	041 Compare X8, 0
	042 JumpIfEqual {320}
	043 Move V8, [X19+428]
	044 Move W9, [X8+24]
	045 Move S0, 5
	046 NotImplemented "Instruction FCMP not yet implemented."
	047 Compare W9, 0
	048 JumpIfEqual {321}
	049 Add X8, X8, 32
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add X8, X8, 36
	052 Move V11, [X8]
	053 Move X0, X19
	054 Move X1, X31
	055 Call MobController.get_deltaTime, X0
	056 Move X0, [X19+208]
	057 Add S0, S8, S0
	058 Move [X19+428], S0
	059 Compare X0, 0
	060 JumpIfEqual {320}
	061 Move X22, 0x22F8000
	062 Move X21, 0x22F8000
	063 Move X22, [X22+1496]
	064 Move X21, [X21+1528]
	065 Move X1, X31
	066 Call Transform.get_position, X0
	067 Move X0, [X22]
	068 Move V8, V0
	069 Move V9, V1
	070 Move V10, V2
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {76}
	074 Call 0x1C17DFC
	075 Move X0, [X22]
	076 Move X8, [X0+184]
	077 Move X1, X31
	078 Move W0, [X8]
	079 Call LayerMask.op_Implicit, X0
	080 Move X8, [X21]
	081 Move W20, W0
	082 Move W9, [X8+224]
	083 Compare W9, 0
	084 JumpIfNotEqual {87}
	085 Move X0, X8
	086 Call 0x1C17DFC
	087 Move X8, -19992576
	088 Move V3, [X8+1100]
	089 Move V0, V8
	090 Move V1, V9
	091 Move V2, V10
	092 Move W0, W20
	093 Move X1, X31
	094 Call Physics.OverlapSphere, X0, V0, X1
	095 Compare X0, 0
	096 JumpIfEqual {320}
	097 Move X8, [X0+24]
	098 Compare X8, 0
	099 JumpIfNotEqual {103}
	100 Move V0, [X19+428]
	101 Move S1, 10
	102 NotImplemented "Instruction FCMP not yet implemented."
	103 Move X0, X19
	104 Call LongAisleController.SetStunned, X0
	105 Move X0, X19
	106 Move X1, X31
	107 Call Component.get_transform, X0
	108 Compare X0, 0
	109 JumpIfEqual {320}
	110 Move X1, X31
	111 Call Transform.get_position, X0
	112 Move X20, 0x25DD000
	113 Move W8, [X20+1926]
	114 Move V8, V0
	115 Move V9, V1
	116 Move V10, V2
	117 Compare W8, 0
	118 JumpIfNotEqual {124}
	119 Move X0, 0x22F8000
	120 Move X0, [X0+1440]
	121 Call 0x1C17CF4
	122 Move W8, 1
	123 Move [X20+1926], W8
	124 Move X8, [X19+192]
	125 Compare X8, 0
	126 JumpIfEqual {320}
	127 Move X20, 0x22F8000
	128 Move X20, [X20+1440]
	129 Move X0, [X22]
	130 Move V11, [X8+76]
	131 Move X9, [X20]
	132 Move W10, [X0+224]
	133 Move X9, [X9+184]
	134 Move S12, [X9+24]
	135 Move S13, [X9+28]
	136 Move V14, [X9+32]
	137 Compare W10, 0
	138 JumpIfNotEqual {141}
	139 Call 0x1C17DFC
	140 Move X0, [X22]
	141 Move X8, [X0+184]
	142 Move X1, X31
	143 Add S12, S8, S12
	144 Add S9, S9, S13
	145 Move W0, [X8+12]
	146 Add S8, S10, S14
	147 Call LayerMask.op_Implicit, X0
	148 Move X8, [X21]
	149 Move W21, W0
	150 Move W9, [X8+224]
	151 Compare W9, 0
	152 JumpIfNotEqual {155}
	153 Move X0, X8
	154 Call 0x1C17DFC
	155 Move V0, V12
	156 Move V1, V9
	157 Move V2, V8
	158 Move V3, V11
	159 Move W0, W21
	160 Move X1, X31
	161 Call Physics.OverlapSphere, X0, V0, X1
	162 Compare X0, 0
	163 JumpIfEqual {320}
	164 Move W8, [X0+24]
	165 Move X21, X0
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move X24, 0x22FE000
	168 Move X9, -19992576
	169 Move X22, 0x22F8000
	170 Move X24, [X24+328]
	171 Move V14, [X9+380]
	172 Move X22, [X22+1448]
	173 Move W23, W31
	174 Move X25, 0x25DD000
	175 Move W26, 1
	176 Move X27, 0x25DD000
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Add X8, X21, W23
	179 Move X0, [X8+32]
	180 Compare X0, 0
	181 JumpIfEqual {320}
	182 Move X2, [X24]
	183 Add X1, X31, 8
	184 Call 0x21A5990, X0, X1
	185 Move TEMP, X0
	186 And TEMP, TEMP, 1
	187 Compare TEMP, 1
	188 JumpIfNotEqual {281}
	189 Move X0, [X31+8]
	190 Compare X0, 0
	191 JumpIfEqual {320}
	192 Move X1, X31
	193 Call NetPlayer.get_isDie, X0
	194 Move TEMP, X0
	195 And TEMP, TEMP, 1
	196 Compare TEMP, 1
	197 JumpIfEqual {281}
	198 Move X8, [X31+8]
	199 Compare X8, 0
	200 JumpIfEqual {320}
	201 Move X0, [X8+144]
	202 Compare X0, 0
	203 JumpIfEqual {320}
	204 Move X1, X31
	205 Call Transform.get_position, X0
	206 Move X0, X19
	207 Move X1, X31
	208 Move V8, V0
	209 Move V9, V1
	210 Move V10, V2
	211 Call Component.get_transform, X0
	212 Compare X0, 0
	213 JumpIfEqual {320}
	214 Move X1, X31
	215 Call Transform.get_position, X0
	216 Move W8, [X25+1925]
	217 Move V11, V0
	218 Move V12, V1
	219 Move V13, V2
	220 Compare W8, 0
	221 JumpIfNotEqual {225}
	222 Move X0, X22
	223 Call 0x1C17CF4
	224 Move [X25+1925], W26
	225 Move X0, [X22]
	226 Move W8, [X0+224]
	227 Compare W8, 0
	228 JumpIfNotEqual {230}
	229 Call 0x1C17DFC
	230 Subtract S0, S8, S11
	231 Subtract S1, S9, S12
	232 Subtract S2, S10, S13
	233 Multiply S3, S0, S0
	234 Multiply S4, S1, S1
	235 Add S3, S3, S4
	236 Multiply S4, S2, S2
	237 Add S3, S4, S3
	238 NotImplemented "Instruction FSQRT not yet implemented."
	239 NotImplemented "Instruction FCMP not yet implemented."
	240 NotImplemented "Instruction FDIV not yet implemented."
	241 NotImplemented "Instruction FDIV not yet implemented."
	242 NotImplemented "Instruction FDIV not yet implemented."
	243 Move W8, [X27+1923]
	244 Compare W8, 0
	245 JumpIfNotEqual {249}
	246 Move X0, X20
	247 Call 0x1C17CF4
	248 Move [X27+1923], W26
	249 Move X8, [X20]
	250 Move X8, [X8+184]
	251 Move S0, [X8]
	252 Move S1, [X8+4]
	253 Move V2, [X8+8]
	254 Move X8, [X19+192]
	255 Compare X8, 0
	256 JumpIfEqual {320}
	257 Move X9, [X19+64]
	258 Compare X9, 0
	259 JumpIfEqual {264}
	260 Move X9, [X9+32]
	261 Compare X9, 0
	262 JumpIfEqual {264}
	263 Move W6, [X9]
	264 Move X6, X31
	265 Move X0, [X31+8]
	266 Compare X0, 0
	267 JumpIfEqual {320}
	268 Move V3, [X8+80]
	269 Move W1, [X8+36]
	270 Move X3, [X8+184]
	271 Move X5, [X8+24]
	272 Move W8, [X19+104]
	273 Move X2, [X19+208]
	274 Multiply S0, S0, S3
	275 Multiply S1, S1, S3
	276 Multiply S2, S2, S3
	277 NotImplemented "Instruction BFM not yet implemented."
	278 Move X4, X3
	279 Move X7, X31
	280 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5, X6, X7
	281 Move W8, [X21+24]
	282 Add W23, W23, 1
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Move X20, [X31+128]
	285 Move X19, [X31+136]
	286 Move X22, [X31+112]
	287 Move X21, [X31+120]
	288 Move X24, [X31+96]
	289 Move X23, [X31+104]
	290 Move X26, [X31+80]
	291 Move X25, [X31+88]
	292 Move X30, [X31+64]
	293 Move X27, [X31+72]
	294 Move D9, [X31+48]
	295 Move D8, [X31+56]
	296 Move D11, [X31+32]
	297 Move D10, [X31+40]
	298 Move D13, [X31+16]
	299 Move D12, [X31+24]
	300 Move V14, [X31+144]
	301 Return 
	302 Move X20, [X19+232]
	303 Move V8, [X19+460]
	304 Move V9, [X19+464]
	305 Move V10, [X19+468]
	306 Move X0, X19
	307 Move X1, X31
	308 Call MobController.get_deltaTime, X0
	309 Compare X20, 0
	310 JumpIfEqual {320}
	311 Multiply S1, S11, S10
	312 Multiply S3, S11, S9
	313 Multiply S4, S11, S8
	314 Multiply S2, S1, S0
	315 Multiply S1, S3, S0
	316 Multiply S0, S4, S0
	317 Move X0, X20
	318 Move X1, X31
	319 Call NavMeshAgent.Move, X0, X1
	320 Call 0x1C17F20
	321 Call 0x1C17F28

Method: System.Void SetStunned()

Disassembly:
	0x01DFD2C8 LDR V14, [X8 + 0xBC]
	0x01DFD2CC FADD S0, S0, S1
	0x01DFD2D0 FMUL S1, S8, S8
	0x01DFD2D4 FADD S0, S1, S0
	0x01DFD2D8 FSQRT S0, S0
	0x01DFD2DC FCMP S0, S14
	0x01DFD2E0 B.PL 0x1DFD308
	0x01DFD2E4 LDR X0, [X19 + 0x28]
	0x01DFD2E8 CBZ X0, 0x1DFD400
	0x01DFD2EC LDR X20, [X19 + 0x30]
	0x01DFD2F0 MOV X1, X31
	0x01DFD2F4 BL 0x3C3F58C
	0x01DFD2F8 CBZ X20, 0x1DFD400
	0x01DFD2FC MOV X0, X20
	0x01DFD300 MOV X1, X31
	0x01DFD304 BL 0x3BE13F8
	0x01DFD308 MOV X0, X19
	0x01DFD30C MOV X1, X31
	0x01DFD310 BL 0x3C32E90
	0x01DFD314 CBZ X0, 0x1DFD400
	0x01DFD318 MOV X1, X31
	0x01DFD31C BL 0x3C3F58C
	0x01DFD320 LDR X0, [X19 + 0x28]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move S0, 3
	005 Move W1, 1
	006 Move X19, X0
	007 Move X9, [X8+808]
	008 Move X2, [X8+816]
	009 NotImplemented "Instruction BLR not yet implemented."
	010 Move W1, 4
	011 Move X0, X19
	012 Call LongAisleController.set_phase, X0, X1
	013 Move X0, [X19+208]
	014 Move [X19+432], W31
	015 Compare X0, 0
	016 JumpIfEqual {27}
	017 Move X19, [X19+536]
	018 Move X1, X31
	019 Call Transform.get_position, X0
	020 Move S3, 1
	021 Move X0, X19
	022 Move X1, X31
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	026 Return 
	027 Call 0x1C17F20

Method: System.Void UpdateStunned()

Disassembly:
	0x01DFD018 STR D14, [X31 - 0x60]!
	0x01DFD01C STP D13, D12, [X31 + 0x8]
	0x01DFD020 STP D11, D10, [X31 + 0x18]
	0x01DFD024 STP D9, D8, [X31 + 0x28]
	0x01DFD028 STR X30, [X31 + 0x38]
	0x01DFD02C STP X22, X21, [X31 + 0x40]
	0x01DFD030 STP X20, X19, [X31 + 0x50]
	0x01DFD034 MOV X19, X0
	0x01DFD038 MOVZ W0, 0x130
	0x01DFD03C MOV X1, X31
	0x01DFD040 BL 0x3C84CAC
	0x01DFD044 ANDS W31, W0, 0x1
	0x01DFD048 FMOV S0, 1
	0x01DFD04C FMOV S1, 2
	0x01DFD050 MOV X0, X31
	0x01DFD054 FCSEL S8, S1, S0, NE
	0x01DFD058 BL 0x3C3C714
	0x01DFD05C MOVZ W0, 0x77
	0x01DFD060 MOV X1, X31
	0x01DFD064 FMUL S8, S8, S0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move V8, [X0+432]
	005 Move S0, 3
	006 Move X19, X0
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 Move X0, X19
	009 Move X1, X31
	010 Call MobController.get_deltaTime, X0
	011 Add S0, S8, S0
	012 Move [X19+432], S0
	013 Move W1, 5
	014 Move X0, X19
	015 Call LongAisleController.set_phase, X0, X1
	016 Move [X19+436], W31
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Move V8, [X31+32]
	020 Return 

Method: System.Void SetSearching()

Disassembly:
	0x01DFD324 CBZ X0, 0x1DFD400
	0x01DFD328 MOV X1, X31
	0x01DFD32C MOV V8.16B, V0.16B
	0x01DFD330 MOV V9.16B, V1.16B
	0x01DFD334 MOV V10.16B, V2.16B
	0x01DFD338 BL 0x3C3F58C
	0x01DFD33C LDRB W8, [X21 + 0x85C]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 5
	004 Move X19, X0
	005 Call LongAisleController.set_phase, X0, X1
	006 Move [X19+436], W31
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 

Method: System.Void UpdateSearching()

Disassembly:
	0x01DFD068 BL 0x3C84CAC
	0x01DFD06C TBZ X0, 0x0, 0x1DFD0C8
	0x01DFD070 ADRP X21, 0x25DB000
	0x01DFD074 LDRB W8, [X21 + 0xA1F]
	0x01DFD078 LDR X20, [X19 + 0x30]
	0x01DFD07C CBNZ W8, 0x1DFD094
	0x01DFD080 ADRP X0, 0x22F6000
	0x01DFD084 LDR X0, [X0 + 0x5A0]
	0x01DFD088 BL 0x1C16CF4
	0x01DFD08C MOVZ W8, 0x1
	0x01DFD090 STRB W8, [X21 + 0xA1F]
	0x01DFD094 CBZ X20, 0x1DFD400
	0x01DFD098 ADRP X8, 0x22F6000
	0x01DFD09C LDR X8, [X8 + 0x5A0]
	0x01DFD0A0 MOV X0, X20
	0x01DFD0A4 MOV X1, X31
	0x01DFD0A8 LDR X8, [X8]
	0x01DFD0AC LDR X8, [X8 + 0xB8]
	0x01DFD0B0 LDP S1, S0, [X8 + 0x4C]
	0x01DFD0B4 LDR V3, [X8 + 0x48]
	0x01DFD0B8 FMUL S2, S8, S0
	0x01DFD0BC FMUL S1, S8, S1
	0x01DFD0C0 FMUL S0, S8, S3
	0x01DFD0C4 BL 0x3BE16E0
	0x01DFD0C8 MOVZ W0, 0x73
	0x01DFD0CC MOV X1, X31
	0x01DFD0D0 BL 0x3C84CAC
	0x01DFD0D4 TBZ X0, 0x0, 0x1DFD130
	0x01DFD0D8 ADRP X21, 0x25DB000
	0x01DFD0DC LDRB W8, [X21 + 0xDDE]
	0x01DFD0E0 LDR X20, [X19 + 0x30]
	0x01DFD0E4 CBNZ W8, 0x1DFD0FC
	0x01DFD0E8 ADRP X0, 0x22F6000
	0x01DFD0EC LDR X0, [X0 + 0x5A0]
	0x01DFD0F0 BL 0x1C16CF4
	0x01DFD0F4 MOVZ W8, 0x1
	0x01DFD0F8 STRB W8, [X21 + 0xDDE]
	0x01DFD0FC CBZ X20, 0x1DFD400
	0x01DFD100 ADRP X8, 0x22F6000
	0x01DFD104 LDR X8, [X8 + 0x5A0]
	0x01DFD108 MOV X0, X20
	0x01DFD10C MOV X1, X31
	0x01DFD110 LDR X8, [X8]
	0x01DFD114 LDR X8, [X8 + 0xB8]
	0x01DFD118 LDP S1, S0, [X8 + 0x58]
	0x01DFD11C LDR V3, [X8 + 0x54]
	0x01DFD120 FMUL S2, S8, S0
	0x01DFD124 FMUL S1, S8, S1

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25DC000
	007 Move X20, 0x22FC000
	008 Move W8, [X21+3390]
	009 Move X20, [X20+3136]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x22FC000
	016 Move X0, [X0+3136]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3390], W8
	020 Move X0, [X20]
	021 Add X20, X19, 376
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X19
	027 Move X1, X20
	028 Move X2, X31
	029 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {41}
	034 Move X1, [X19+376]
	035 Move X0, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+16]
	039 Move X21, [X31+24]
	040 Move V8, [X31+48]
	041 Move V8, [X19+436]
	042 Move S0, 2
	043 NotImplemented "Instruction FCMP not yet implemented."
	044 Move X0, X19
	045 Move X1, X31
	046 Call MobController.get_deltaTime, X0
	047 Add S0, S8, S0
	048 Move [X19+436], S0
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X30, [X31+16]
	052 Move X21, [X31+24]
	053 Move V8, [X31+48]
	054 Return 
	055 Move X0, X19
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X30, [X31+16]
	059 Move X21, [X31+24]
	060 Move V8, [X31+48]
	061 Call LongAisleController.SetWaiting, X0
	062 Return 

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01DFD340 MOV V11.16B, V0.16B
	0x01DFD344 MOV V12.16B, V1.16B
	0x01DFD348 MOV V13.16B, V2.16B
	0x01DFD34C CBNZ W8, 0x1DFD364
	0x01DFD350 ADRP X0, 0x22F6000
	0x01DFD354 LDR X0, [X0 + 0x5A8]
	0x01DFD358 BL 0x1C16CF4
	0x01DFD35C MOVZ W8, 0x1
	0x01DFD360 STRB W8, [X21 + 0x85C]
	0x01DFD364 LDR X0, [X22]
	0x01DFD368 FSUB S11, S8, S11
	0x01DFD36C FSUB S9, S9, S12
	0x01DFD370 FSUB S8, S10, S13
	0x01DFD374 LDR W8, [X0 + 0xE0]
	0x01DFD378 CBNZ W8, 0x1DFD380
	0x01DFD37C BL 0x1C16DFC
	0x01DFD380 FMUL S0, S11, S11
	0x01DFD384 FMUL S1, S9, S9
	0x01DFD388 FADD S0, S0, S1
	0x01DFD38C FMUL S1, S8, S8
	0x01DFD390 FADD S0, S1, S0
	0x01DFD394 FSQRT S0, S0
	0x01DFD398 FCMP S0, S14
	0x01DFD39C B.PL 0x1DFD3E0
	0x01DFD3A0 LDR X0, [X19 + 0x20]
	0x01DFD3A4 CBZ X0, 0x1DFD400
	0x01DFD3A8 LDR X19, [X19 + 0x30]
	0x01DFD3AC MOV X1, X31
	0x01DFD3B0 BL 0x3C3F58C
	0x01DFD3B4 CBZ X19, 0x1DFD400
	0x01DFD3B8 MOV X0, X19
	0x01DFD3BC LDP X20, X19, [X31 + 0x50]
	0x01DFD3C0 LDP X22, X21, [X31 + 0x40]
	0x01DFD3C4 LDR X30, [X31 + 0x38]
	0x01DFD3C8 LDP D9, D8, [X31 + 0x28]
	0x01DFD3CC LDP D11, D10, [X31 + 0x18]
	0x01DFD3D0 LDP D13, D12, [X31 + 0x8]
	0x01DFD3D4 MOV X1, X31
	0x01DFD3D8 LDR V14, [X31], #0x60
	0x01DFD3DC B 0x3BE13F8
	0x01DFD3E0 LDP X20, X19, [X31 + 0x50]
	0x01DFD3E4 LDP X22, X21, [X31 + 0x40]
	0x01DFD3E8 LDR X30, [X31 + 0x38]
	0x01DFD3EC LDP D9, D8, [X31 + 0x28]
	0x01DFD3F0 LDP D11, D10, [X31 + 0x18]
	0x01DFD3F4 LDP D13, D12, [X31 + 0x8]
	0x01DFD3F8 LDR V14, [X31], #0x60
	0x01DFD3FC RET
	0x01DFD400 BL 0x1C16F20
	0x01DFD404 MOV X1, X31
	0x01DFD408 B 0x3C36C30
	0x01DFD40C STP X30, X19, [X31 - 0x10]!
	0x01DFD410 LDR X8, [X0 + 0x50]
	0x01DFD414 CBZ X8, 0x1DFD424
	0x01DFD418 LDR W0, [X8 + 0x3C]
	0x01DFD41C LDP X30, X19, [X31], #0x10
	0x01DFD420 RET
	0x01DFD424 ADRP X0, 0x22F6000
	0x01DFD428 LDR X0, [X0 + 0x5B0]
	0x01DFD42C BL 0x1C16D08
	0x01DFD430 BL 0x1C16F10
	0x01DFD434 MOV X19, X0
	0x01DFD438 ADRP X0, 0x22FC000
	0x01DFD43C LDR X0, [X0 + 0x598]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x25DC000
	009 Move X20, 0x22FC000
	010 Move W8, [X21+3391]
	011 Move X20, [X20+3008]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x22FC000
	018 Move X0, [X0+3008]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3391], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call MobController.OnDrawGizmos, X0
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X20]
	031 Move X8, [X0+184]
	032 Move X0, X31
	033 Move S0, [X8+176]
	034 Move S1, [X8+180]
	035 Move S2, [X8+184]
	036 Move S3, [X8+188]
	037 Call Gizmos.set_color, X0
	038 Move X0, X19
	039 Move X1, X31
	040 Call Component.get_transform, X0
	041 Compare X0, 0
	042 JumpIfEqual {81}
	043 Move X1, X31
	044 Call Transform.get_position, X0
	045 Move X20, 0x25DC000
	046 Move W8, [X20+1926]
	047 Move V8, V0
	048 Move V9, V1
	049 Move V10, V2
	050 Compare W8, 0
	051 JumpIfNotEqual {57}
	052 Move X0, 0x22F7000
	053 Move X0, [X0+1440]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X20+1926], W8
	057 Move X8, [X19+192]
	058 Compare X8, 0
	059 JumpIfEqual {81}
	060 Move X9, 0x22F7000
	061 Move X9, [X9+1440]
	062 Move V3, [X8+76]
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Move X9, [X9]
	068 Move X0, X31
	069 Move X9, [X9+184]
	070 Move S1, [X9+28]
	071 Move S0, [X9+32]
	072 Move V4, [X9+24]
	073 Add S2, S10, S0
	074 Add S1, S9, S1
	075 Add S0, S8, S4
	076 Move D9, [X31+16]
	077 Move D8, [X31+24]
	078 Move V10, [X31+64]
	079 Call Gizmos.DrawWireSphere, X0, V0
	080 Return 
	081 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DFD440 BL 0x1C16D08
	0x01DFD444 MOV X1, X0
	0x01DFD448 MOV X0, X19
	0x01DFD44C MOV X2, X31
	0x01DFD450 BL 0x337DF1C
	0x01DFD454 ADRP X0, 0x22FC000
	0x01DFD458 LDR X0, [X0 + 0x5A0]
	0x01DFD45C BL 0x1C16D08
	0x01DFD460 MOV X1, X0
	0x01DFD464 MOV X0, X19
	0x01DFD468 BL 0x1C16DEC
	0x01DFD46C STP X30, X19, [X31 - 0x10]!
	0x01DFD470 LDR X8, [X0 + 0x50]
	0x01DFD474 CBZ X8, 0x1DFD484
	0x01DFD478 STR W1, [X8 + 0x3C]
	0x01DFD47C LDP X30, X19, [X31], #0x10
	0x01DFD480 RET
	0x01DFD484 ADRP X0, 0x22F6000
	0x01DFD488 LDR X0, [X0 + 0x5B0]
	0x01DFD48C BL 0x1C16D08
	0x01DFD490 BL 0x1C16F10
	0x01DFD494 MOV X19, X0
	0x01DFD498 ADRP X0, 0x22FC000
	0x01DFD49C LDR X0, [X0 + 0x598]
	0x01DFD4A0 BL 0x1C16D08
	0x01DFD4A4 MOV X1, X0
	0x01DFD4A8 MOV X0, X19
	0x01DFD4AC MOV X2, X31
	0x01DFD4B0 BL 0x337DF1C
	0x01DFD4B4 ADRP X0, 0x22FC000
	0x01DFD4B8 LDR X0, [X0 + 0x5A8]
	0x01DFD4BC BL 0x1C16D08
	0x01DFD4C0 MOV X1, X0
	0x01DFD4C4 MOV X0, X19
	0x01DFD4C8 BL 0x1C16DEC
	0x01DFD4CC STP X30, X19, [X31 - 0x10]!
	0x01DFD4D0 LDR X8, [X0 + 0x50]
	0x01DFD4D4 CBZ X8, 0x1DFD4E8
	0x01DFD4D8 LDP S0, S1, [X8 + 0x40]
	0x01DFD4DC LDR V2, [X8 + 0x48]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x25DC000
	008 Move X23, 0x22FC000
	009 Move X20, 0x22FD000
	010 Move X21, 0x22FB000
	011 Move W8, [X22+3392]
	012 Move X23, [X23+3816]
	013 Move X20, [X20+1152]
	014 Move X21, [X21+2144]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x22FD000
	021 Move X0, [X0+1152]
	022 Call 0x1C17CF4
	023 Move X0, 0x22FC000
	024 Move X0, [X0+3816]
	025 Call 0x1C17CF4
	026 Move X0, 0x22FB000
	027 Move X0, [X0+2144]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+3392], W8
	031 Move X0, [X23]
	032 Call 0x1C17F10
	033 Move X1, [X20]
	034 Move X20, X0
	035 Call List`1<Object>..ctor, X0
	036 Move [X19+440], X20
	037 Move X0, [X21]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X1, X31
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Call MobController..ctor, X0
	051 Return 

Method: System.Int32 <UpdateWaiting>b__29_0(AnimalCompany.NetPlayer a, AnimalCompany.NetPlayer b)

Disassembly:
	0x01DFD4E0 LDP X30, X19, [X31], #0x10
	0x01DFD4E4 RET
	0x01DFD4E8 ADRP X0, 0x22F6000
	0x01DFD4EC LDR X0, [X0 + 0x5B0]
	0x01DFD4F0 BL 0x1C16D08
	0x01DFD4F4 BL 0x1C16F10
	0x01DFD4F8 MOV X19, X0
	0x01DFD4FC ADRP X0, 0x22FC000
	0x01DFD500 LDR X0, [X0 + 0x5B0]
	0x01DFD504 BL 0x1C16D08
	0x01DFD508 MOV X1, X0
	0x01DFD50C MOV X0, X19
	0x01DFD510 MOV X2, X31
	0x01DFD514 BL 0x337DF1C
	0x01DFD518 ADRP X0, 0x22FC000
	0x01DFD51C LDR X0, [X0 + 0x5B8]
	0x01DFD520 BL 0x1C16D08
	0x01DFD524 MOV X1, X0
	0x01DFD528 MOV X0, X19
	0x01DFD52C BL 0x1C16DEC
	0x01DFD530 STP X30, X19, [X31 - 0x10]!
	0x01DFD534 LDR X8, [X0 + 0x50]
	0x01DFD538 CBZ X8, 0x1DFD54C
	0x01DFD53C STP S0, S1, [X8 + 0x40]
	0x01DFD540 STR S2, [X8 + 0x48]
	0x01DFD544 LDP X30, X19, [X31], #0x10
	0x01DFD548 RET
	0x01DFD54C ADRP X0, 0x22F6000
	0x01DFD550 LDR X0, [X0 + 0x5B0]
	0x01DFD554 BL 0x1C16D08
	0x01DFD558 BL 0x1C16F10
	0x01DFD55C MOV X19, X0
	0x01DFD560 ADRP X0, 0x22FC000
	0x01DFD564 LDR X0, [X0 + 0x5B0]
	0x01DFD568 BL 0x1C16D08
	0x01DFD56C MOV X1, X0
	0x01DFD570 MOV X0, X19
	0x01DFD574 MOV X2, X31
	0x01DFD578 BL 0x337DF1C
	0x01DFD57C ADRP X0, 0x22FC000
	0x01DFD580 LDR X0, [X0 + 0x5C0]
	0x01DFD584 BL 0x1C16D08
	0x01DFD588 MOV X1, X0
	0x01DFD58C MOV X0, X19
	0x01DFD590 BL 0x1C16DEC
	0x01DFD594 STP X30, X19, [X31 - 0x10]!
	0x01DFD598 LDR X8, [X0 + 0x50]
	0x01DFD59C CBZ X8, 0x1DFD5B4
	0x01DFD5A0 LDR W8, [X8 + 0x4C]
	0x01DFD5A4 CMP W8, 0x0
	0x01DFD5A8 CSET W0, NE
	0x01DFD5AC LDP X30, X19, [X31], #0x10
	0x01DFD5B0 RET
	0x01DFD5B4 ADRP X0, 0x22F6000
	0x01DFD5B8 LDR X0, [X0 + 0x5B0]
	0x01DFD5BC BL 0x1C16D08
	0x01DFD5C0 BL 0x1C16F10
	0x01DFD5C4 MOV X19, X0
	0x01DFD5C8 ADRP X0, 0x22FC000
	0x01DFD5CC LDR X0, [X0 + 0x5C8]
	0x01DFD5D0 BL 0x1C16D08
	0x01DFD5D4 MOV X1, X0
	0x01DFD5D8 MOV X0, X19
	0x01DFD5DC MOV X2, X31
	0x01DFD5E0 BL 0x337DF1C
	0x01DFD5E4 ADRP X0, 0x22FC000
	0x01DFD5E8 LDR X0, [X0 + 0x5D0]
	0x01DFD5EC BL 0x1C16D08
	0x01DFD5F0 MOV X1, X0
	0x01DFD5F4 MOV X0, X19
	0x01DFD5F8 BL 0x1C16DEC
	0x01DFD5FC STP X30, X19, [X31 - 0x10]!
	0x01DFD600 LDR X8, [X0 + 0x50]
	0x01DFD604 CBZ X8, 0x1DFD618
	0x01DFD608 AND W9, W1, 0x1
	0x01DFD60C STR W9, [X8 + 0x4C]
	0x01DFD610 LDP X30, X19, [X31], #0x10
	0x01DFD614 RET
	0x01DFD618 ADRP X0, 0x22F6000
	0x01DFD61C LDR X0, [X0 + 0x5B0]
	0x01DFD620 BL 0x1C16D08
	0x01DFD624 BL 0x1C16F10
	0x01DFD628 MOV X19, X0
	0x01DFD62C ADRP X0, 0x22FC000
	0x01DFD630 LDR X0, [X0 + 0x5C8]
	0x01DFD634 BL 0x1C16D08
	0x01DFD638 MOV X1, X0
	0x01DFD63C MOV X0, X19
	0x01DFD640 MOV X2, X31
	0x01DFD644 BL 0x337DF1C
	0x01DFD648 ADRP X0, 0x22FC000
	0x01DFD64C LDR X0, [X0 + 0x5D8]
	0x01DFD650 BL 0x1C16D08
	0x01DFD654 MOV X1, X0
	0x01DFD658 MOV X0, X19
	0x01DFD65C BL 0x1C16DEC
	0x01DFD660 STP X30, X19, [X31 - 0x10]!
	0x01DFD664 LDR X8, [X0 + 0x50]
	0x01DFD668 CBZ X8, 0x1DFD678
	0x01DFD66C LDR V0, [X8 + 0x50]
	0x01DFD670 LDP X30, X19, [X31], #0x10

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Compare X1, 0
	013 JumpIfEqual {121}
	014 Move X19, X0
	015 Move X0, X1
	016 Move X1, X31
	017 Move X20, X2
	018 Call Component.get_transform, X0
	019 Compare X0, 0
	020 JumpIfEqual {121}
	021 Move X1, X31
	022 Call Transform.get_position, X0
	023 Move X0, X19
	024 Move X1, X31
	025 Move V8, V0
	026 Move V9, V1
	027 Move V10, V2
	028 Call Component.get_transform, X0
	029 Compare X0, 0
	030 JumpIfEqual {121}
	031 Move X1, X31
	032 Call Transform.get_position, X0
	033 Move X21, 0x25DC000
	034 Move W8, [X21+2140]
	035 Move V11, V0
	036 Move V12, V1
	037 Move V13, V2
	038 Compare W8, 0
	039 JumpIfNotEqual {45}
	040 Move X0, 0x22F7000
	041 Move X0, [X0+1448]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X21+2140], W8
	045 Move X22, 0x22F7000
	046 Move X22, [X22+1448]
	047 Subtract S11, S8, S11
	048 Subtract S9, S9, S12
	049 Subtract S8, S10, S13
	050 Move X0, [X22]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Multiply S0, S11, S11
	056 Multiply S1, S9, S9
	057 Add S0, S0, S1
	058 Multiply S1, S8, S8
	059 Add S0, S1, S0
	060 NotImplemented "Instruction FSQRT not yet implemented."
	061 Move [X31+60], S0
	062 Compare X20, 0
	063 JumpIfEqual {121}
	064 Move X0, X20
	065 Move X1, X31
	066 Call Component.get_transform, X0
	067 Compare X0, 0
	068 JumpIfEqual {121}
	069 Move X1, X31
	070 Call Transform.get_position, X0
	071 Move X0, X19
	072 Move X1, X31
	073 Move V8, V0
	074 Move V9, V1
	075 Move V10, V2
	076 Call Component.get_transform, X0
	077 Compare X0, 0
	078 JumpIfEqual {121}
	079 Move X1, X31
	080 Call Transform.get_position, X0
	081 Move W8, [X21+2140]
	082 Move V11, V0
	083 Move V12, V1
	084 Move V13, V2
	085 Compare W8, 0
	086 JumpIfNotEqual {92}
	087 Move X0, 0x22F7000
	088 Move X0, [X0+1448]
	089 Call 0x1C17CF4
	090 Move W8, 1
	091 Move [X21+2140], W8
	092 Move X0, [X22]
	093 Subtract S11, S8, S11
	094 Subtract S9, S9, S12
	095 Subtract S8, S10, S13
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Multiply S0, S11, S11
	101 Multiply S1, S9, S9
	102 Add S0, S0, S1
	103 Multiply S1, S8, S8
	104 Add S0, S1, S0
	105 NotImplemented "Instruction FSQRT not yet implemented."
	106 Add X0, X31, 60
	107 Move X1, X31
	108 Call Single.CompareTo, X0, V0
	109 Move X20, [X31+80]
	110 Move X19, [X31+88]
	111 Move X22, [X31+64]
	112 Move X21, [X31+72]
	113 Move X30, [X31+48]
	114 Move D9, [X31+32]
	115 Move D8, [X31+40]
	116 Move D11, [X31+16]
	117 Move D10, [X31+24]
	118 Move D13, [X31+96]
	119 Move D12, [X31+104]
	120 Return X0
	121 Call 0x1C17F20

Method: System.Int32 <SetPreparing>b__30_0(AnimalCompany.NetPlayer a, AnimalCompany.NetPlayer b)

Disassembly:
	0x01DFD674 RET
	0x01DFD678 ADRP X0, 0x22F6000
	0x01DFD67C LDR X0, [X0 + 0x5B0]
	0x01DFD680 BL 0x1C16D08
	0x01DFD684 BL 0x1C16F10
	0x01DFD688 MOV X19, X0
	0x01DFD68C ADRP X0, 0x22FC000
	0x01DFD690 LDR X0, [X0 + 0x5E0]
	0x01DFD694 BL 0x1C16D08
	0x01DFD698 MOV X1, X0
	0x01DFD69C MOV X0, X19
	0x01DFD6A0 MOV X2, X31
	0x01DFD6A4 BL 0x337DF1C
	0x01DFD6A8 ADRP X0, 0x22FC000
	0x01DFD6AC LDR X0, [X0 + 0x5E8]
	0x01DFD6B0 BL 0x1C16D08
	0x01DFD6B4 MOV X1, X0
	0x01DFD6B8 MOV X0, X19
	0x01DFD6BC BL 0x1C16DEC
	0x01DFD6C0 STP X30, X19, [X31 - 0x10]!
	0x01DFD6C4 LDR X8, [X0 + 0x50]
	0x01DFD6C8 CBZ X8, 0x1DFD6D8
	0x01DFD6CC STR S0, [X8 + 0x50]
	0x01DFD6D0 LDP X30, X19, [X31], #0x10
	0x01DFD6D4 RET
	0x01DFD6D8 ADRP X0, 0x22F6000
	0x01DFD6DC LDR X0, [X0 + 0x5B0]
	0x01DFD6E0 BL 0x1C16D08
	0x01DFD6E4 BL 0x1C16F10
	0x01DFD6E8 MOV X19, X0
	0x01DFD6EC ADRP X0, 0x22FC000
	0x01DFD6F0 LDR X0, [X0 + 0x5E0]
	0x01DFD6F4 BL 0x1C16D08
	0x01DFD6F8 MOV X1, X0
	0x01DFD6FC MOV X0, X19
	0x01DFD700 MOV X2, X31
	0x01DFD704 BL 0x337DF1C
	0x01DFD708 ADRP X0, 0x22FC000
	0x01DFD70C LDR X0, [X0 + 0x5F0]
	0x01DFD710 BL 0x1C16D08
	0x01DFD714 MOV X1, X0
	0x01DFD718 MOV X0, X19
	0x01DFD71C BL 0x1C16DEC
	0x01DFD720 STP X30, X19, [X31 - 0x10]!
	0x01DFD724 LDR X8, [X0 + 0x50]
	0x01DFD728 CBZ X8, 0x1DFD738
	0x01DFD72C LDR V0, [X8 + 0x54]
	0x01DFD730 LDP X30, X19, [X31], #0x10
	0x01DFD734 RET
	0x01DFD738 ADRP X0, 0x22F6000
	0x01DFD73C LDR X0, [X0 + 0x5B0]
	0x01DFD740 BL 0x1C16D08
	0x01DFD744 BL 0x1C16F10
	0x01DFD748 MOV X19, X0
	0x01DFD74C ADRP X0, 0x22FC000
	0x01DFD750 LDR X0, [X0 + 0x5F8]
	0x01DFD754 BL 0x1C16D08
	0x01DFD758 MOV X1, X0
	0x01DFD75C MOV X0, X19
	0x01DFD760 MOV X2, X31
	0x01DFD764 BL 0x337DF1C
	0x01DFD768 ADRP X0, 0x22FC000
	0x01DFD76C LDR X0, [X0 + 0x600]
	0x01DFD770 BL 0x1C16D08
	0x01DFD774 MOV X1, X0
	0x01DFD778 MOV X0, X19
	0x01DFD77C BL 0x1C16DEC
	0x01DFD780 STP X30, X19, [X31 - 0x10]!
	0x01DFD784 LDR X8, [X0 + 0x50]
	0x01DFD788 CBZ X8, 0x1DFD798
	0x01DFD78C STR S0, [X8 + 0x54]
	0x01DFD790 LDP X30, X19, [X31], #0x10
	0x01DFD794 RET
	0x01DFD798 ADRP X0, 0x22F6000
	0x01DFD79C LDR X0, [X0 + 0x5B0]
	0x01DFD7A0 BL 0x1C16D08
	0x01DFD7A4 BL 0x1C16F10
	0x01DFD7A8 MOV X19, X0
	0x01DFD7AC ADRP X0, 0x22FC000
	0x01DFD7B0 LDR X0, [X0 + 0x5F8]
	0x01DFD7B4 BL 0x1C16D08
	0x01DFD7B8 MOV X1, X0
	0x01DFD7BC MOV X0, X19
	0x01DFD7C0 MOV X2, X31
	0x01DFD7C4 BL 0x337DF1C
	0x01DFD7C8 ADRP X0, 0x22FC000
	0x01DFD7CC LDR X0, [X0 + 0x608]
	0x01DFD7D0 BL 0x1C16D08
	0x01DFD7D4 MOV X1, X0
	0x01DFD7D8 MOV X0, X19
	0x01DFD7DC BL 0x1C16DEC
	0x01DFD7E0 STP X30, X19, [X31 - 0x10]!
	0x01DFD7E4 LDR X8, [X0 + 0x50]
	0x01DFD7E8 CBZ X8, 0x1DFD7F8
	0x01DFD7EC LDR V0, [X8 + 0x58]
	0x01DFD7F0 LDP X30, X19, [X31], #0x10
	0x01DFD7F4 RET
	0x01DFD7F8 ADRP X0, 0x22F6000
	0x01DFD7FC LDR X0, [X0 + 0x5B0]
	0x01DFD800 BL 0x1C16D08
	0x01DFD804 BL 0x1C16F10

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Compare X1, 0
	013 JumpIfEqual {121}
	014 Move X19, X0
	015 Move X0, X1
	016 Move X1, X31
	017 Move X20, X2
	018 Call Component.get_transform, X0
	019 Compare X0, 0
	020 JumpIfEqual {121}
	021 Move X1, X31
	022 Call Transform.get_position, X0
	023 Move X0, X19
	024 Move X1, X31
	025 Move V8, V0
	026 Move V9, V1
	027 Move V10, V2
	028 Call Component.get_transform, X0
	029 Compare X0, 0
	030 JumpIfEqual {121}
	031 Move X1, X31
	032 Call Transform.get_position, X0
	033 Move X21, 0x25DC000
	034 Move W8, [X21+2140]
	035 Move V11, V0
	036 Move V12, V1
	037 Move V13, V2
	038 Compare W8, 0
	039 JumpIfNotEqual {45}
	040 Move X0, 0x22F7000
	041 Move X0, [X0+1448]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X21+2140], W8
	045 Move X22, 0x22F7000
	046 Move X22, [X22+1448]
	047 Subtract S11, S8, S11
	048 Subtract S9, S9, S12
	049 Subtract S8, S10, S13
	050 Move X0, [X22]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Multiply S0, S11, S11
	056 Multiply S1, S9, S9
	057 Add S0, S0, S1
	058 Multiply S1, S8, S8
	059 Add S0, S1, S0
	060 NotImplemented "Instruction FSQRT not yet implemented."
	061 Move [X31+60], S0
	062 Compare X20, 0
	063 JumpIfEqual {121}
	064 Move X0, X20
	065 Move X1, X31
	066 Call Component.get_transform, X0
	067 Compare X0, 0
	068 JumpIfEqual {121}
	069 Move X1, X31
	070 Call Transform.get_position, X0
	071 Move X0, X19
	072 Move X1, X31
	073 Move V8, V0
	074 Move V9, V1
	075 Move V10, V2
	076 Call Component.get_transform, X0
	077 Compare X0, 0
	078 JumpIfEqual {121}
	079 Move X1, X31
	080 Call Transform.get_position, X0
	081 Move W8, [X21+2140]
	082 Move V11, V0
	083 Move V12, V1
	084 Move V13, V2
	085 Compare W8, 0
	086 JumpIfNotEqual {92}
	087 Move X0, 0x22F7000
	088 Move X0, [X0+1448]
	089 Call 0x1C17CF4
	090 Move W8, 1
	091 Move [X21+2140], W8
	092 Move X0, [X22]
	093 Subtract S11, S8, S11
	094 Subtract S9, S9, S12
	095 Subtract S8, S10, S13
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Multiply S0, S11, S11
	101 Multiply S1, S9, S9
	102 Add S0, S0, S1
	103 Multiply S1, S8, S8
	104 Add S0, S1, S0
	105 NotImplemented "Instruction FSQRT not yet implemented."
	106 Add X0, X31, 60
	107 Move X1, X31
	108 Call Single.CompareTo, X0, V0
	109 Move X20, [X31+80]
	110 Move X19, [X31+88]
	111 Move X22, [X31+64]
	112 Move X21, [X31+72]
	113 Move X30, [X31+48]
	114 Move D9, [X31+32]
	115 Move D8, [X31+40]
	116 Move D11, [X31+16]
	117 Move D10, [X31+24]
	118 Move D13, [X31+96]
	119 Move D12, [X31+104]
	120 Return X0
	121 Call 0x1C17F20

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DFD808 MOV X19, X0
	0x01DFD80C ADRP X0, 0x22FC000
	0x01DFD810 LDR X0, [X0 + 0x610]
	0x01DFD814 BL 0x1C16D08
	0x01DFD818 MOV X1, X0
	0x01DFD81C MOV X0, X19
	0x01DFD820 MOV X2, X31
	0x01DFD824 BL 0x337DF1C
	0x01DFD828 ADRP X0, 0x22FC000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 And W1, W1, 1
	004 Move X2, X31
	005 Move X19, X0
	006 Call MobController.CopyBackingFieldsToState, X0, X1
	007 Move W1, [X19+420]
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call LongAisleController.set_phase, X0, X1
	012 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DFD82C LDR X0, [X0 + 0x618]
	0x01DFD830 BL 0x1C16D08
	0x01DFD834 MOV X1, X0
	0x01DFD838 MOV X0, X19
	0x01DFD83C BL 0x1C16DEC
	0x01DFD840 STP X30, X19, [X31 - 0x10]!
	0x01DFD844 LDR X8, [X0 + 0x50]
	0x01DFD848 CBZ X8, 0x1DFD858
	0x01DFD84C STR S0, [X8 + 0x58]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.CopyStateToBackingFields, X0
	006 Move X0, X19
	007 Call LongAisleController.get_phase, X0
	008 Move [X19+420], W0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

