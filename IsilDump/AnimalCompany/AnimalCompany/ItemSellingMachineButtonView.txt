Type: AnimalCompany.ItemSellingMachineButtonView

Method: System.Void OnDestroy()

Disassembly:
	0x01CD46EC MOV X1, X0
	0x01CD46F0 MOV X0, X19
	0x01CD46F4 MOV X2, X31
	0x01CD46F8 BL 0x31E7550
	0x01CD46FC ADRP X0, 0x227B000
	0x01CD4700 LDR X0, [X0 + 0xB68]
	0x01CD4704 BL 0x1B6E804
	0x01CD4708 MOV X1, X0
	0x01CD470C MOV X0, X19
	0x01CD4710 BL 0x1B6E8E8
	0x01CD4714 STP X30, X21, [X31 - 0x20]!
	0x01CD4718 STP X20, X19, [X31 + 0x10]
	0x01CD471C ADRP X21, 0x254F000
	0x01CD4720 LDRB W9, [X21 + 0x5ED]
	0x01CD4724 MOV X20, X0
	0x01CD4728 MOV X19, X8
	0x01CD472C TBNZ X9, 0x0, 0x1CD4744
	0x01CD4730 ADRP X0, 0x227B000
	0x01CD4734 LDR X0, [X0 + 0xB70]
	0x01CD4738 BL 0x1B6E7F0
	0x01CD473C MOVZ W8, 0x1
	0x01CD4740 STRB W8, [X21 + 0x5ED]
	0x01CD4744 LDR X20, [X20 + 0x50]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2550000
	006 Move X20, 0x227B000
	007 Move W8, [X21+1508]
	008 Move X20, [X20+1696]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x227B000
	015 Move X0, [X0+1696]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1508], W8
	019 Move X0, [X20]
	020 Move W19, [X19+76]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1B6F8F8
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call LeanTween.cancel, X0
	032 Return 

Method: System.Void Setup(AnimalCompany.ItemSellingMachineController controller, System.Int32 buttonGroupId, System.Int32 buttonId)

Disassembly:
	0x01CD4748 CBZ X20, 0x1CD4784
	0x01CD474C ADRP X21, 0x227B000
	0x01CD4750 LDR X21, [X21 + 0xB70]

ISIL:
	001 Move [X0+32], X1
	002 Move [X0+40], W2
	003 Move [X0+44], W3
	004 Return 

Method: System.Void OnTriggerEnter(UnityEngine.Collider other)

Disassembly:
	0x01CD4754 MOV X0, X31
	0x01CD4758 BL 0x1D15B74
	0x01CD475C MOV X3, X0
	0x01CD4760 STP X31, X31, [X19 + 0x8]
	0x01CD4764 LDR X4, [X21]
	0x01CD4768 ADD X1, X20, 0x10
	0x01CD476C STR X31, [X19]
	0x01CD4770 MOV X0, X19
	0x01CD4774 LDP X20, X19, [X31 + 0x10]
	0x01CD4778 MOVZ W2, 0xB
	0x01CD477C LDP X30, X21, [X31], #0x20
	0x01CD4780 B 0x22AD1FC
	0x01CD4784 ADRP X0, 0x2279000
	0x01CD4788 LDR X0, [X0 + 0x490]
	0x01CD478C BL 0x1B6E804
	0x01CD4790 BL 0x1B6EA0C
	0x01CD4794 MOV X19, X0
	0x01CD4798 ADRP X0, 0x227B000
	0x01CD479C LDR X0, [X0 + 0xB78]
	0x01CD47A0 BL 0x1B6E804
	0x01CD47A4 MOV X1, X0
	0x01CD47A8 MOV X0, X19
	0x01CD47AC MOV X2, X31
	0x01CD47B0 BL 0x31E7550
	0x01CD47B4 ADRP X0, 0x227B000
	0x01CD47B8 LDR X0, [X0 + 0xB80]
	0x01CD47BC BL 0x1B6E804
	0x01CD47C0 MOV X1, X0
	0x01CD47C4 MOV X0, X19
	0x01CD47C8 BL 0x1B6E8E8
	0x01CD47CC STP X30, X21, [X31 - 0x20]!
	0x01CD47D0 STP X20, X19, [X31 + 0x10]
	0x01CD47D4 ADRP X21, 0x254F000
	0x01CD47D8 LDRB W9, [X21 + 0x5EE]
	0x01CD47DC MOV X20, X0
	0x01CD47E0 MOV X19, X8
	0x01CD47E4 TBNZ X9, 0x0, 0x1CD47FC
	0x01CD47E8 ADRP X0, 0x227B000
	0x01CD47EC LDR X0, [X0 + 0xB88]
	0x01CD47F0 BL 0x1B6E7F0
	0x01CD47F4 MOVZ W8, 0x1
	0x01CD47F8 STRB W8, [X21 + 0x5EE]
	0x01CD47FC LDR X20, [X20 + 0x50]
	0x01CD4800 CBZ X20, 0x1CD483C
	0x01CD4804 ADRP X21, 0x227B000
	0x01CD4808 LDR X21, [X21 + 0xB88]
	0x01CD480C MOV X0, X31
	0x01CD4810 BL 0x1D15C78
	0x01CD4814 MOV X3, X0
	0x01CD4818 STP X31, X31, [X19 + 0x8]
	0x01CD481C LDR X4, [X21]
	0x01CD4820 ADD X1, X20, 0x3C
	0x01CD4824 STR X31, [X19]
	0x01CD4828 MOV X0, X19
	0x01CD482C LDP X20, X19, [X31 + 0x10]
	0x01CD4830 MOVZ W2, 0xB
	0x01CD4834 LDP X30, X21, [X31], #0x20
	0x01CD4838 B 0x22B0BE8
	0x01CD483C ADRP X0, 0x2279000
	0x01CD4840 LDR X0, [X0 + 0x490]
	0x01CD4844 BL 0x1B6E804
	0x01CD4848 BL 0x1B6EA0C
	0x01CD484C MOV X19, X0
	0x01CD4850 ADRP X0, 0x227B000
	0x01CD4854 LDR X0, [X0 + 0xB90]
	0x01CD4858 BL 0x1B6E804
	0x01CD485C MOV X1, X0
	0x01CD4860 MOV X0, X19
	0x01CD4864 MOV X2, X31
	0x01CD4868 BL 0x31E7550
	0x01CD486C ADRP X0, 0x227B000
	0x01CD4870 LDR X0, [X0 + 0xB98]
	0x01CD4874 BL 0x1B6E804
	0x01CD4878 MOV X1, X0
	0x01CD487C MOV X0, X19
	0x01CD4880 BL 0x1B6E8E8
	0x01CD4884 STP X30, X19, [X31 - 0x10]!
	0x01CD4888 LDR X8, [X0 + 0x50]
	0x01CD488C CBZ X8, 0x1CD489C
	0x01CD4890 LDR W0, [X8 + 0x68]
	0x01CD4894 LDP X30, X19, [X31], #0x10
	0x01CD4898 RET
	0x01CD489C ADRP X0, 0x2279000
	0x01CD48A0 LDR X0, [X0 + 0x490]
	0x01CD48A4 BL 0x1B6E804
	0x01CD48A8 BL 0x1B6EA0C
	0x01CD48AC MOV X19, X0
	0x01CD48B0 ADRP X0, 0x227B000
	0x01CD48B4 LDR X0, [X0 + 0xBA0]
	0x01CD48B8 BL 0x1B6E804
	0x01CD48BC MOV X1, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2550000
	007 Move W8, [X21+1509]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x227C000
	015 Move X0, [X0+2760]
	016 Call 0x1B6F7F0
	017 Move X0, 0x227A000
	018 Move X0, [X0+1144]
	019 Call 0x1B6F7F0
	020 Move X0, 0x227B000
	021 Move X0, [X0+2808]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X21+1509], W8
	025 Move X0, X31
	026 Call Time.get_time
	027 Move V1, [X19+72]
	028 Move X8, -19046400
	029 Move V2, [X8+3376]
	030 Subtract S0, S0, S1
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 Compare X20, 0
	033 JumpIfEqual {114}
	034 Move X0, X20
	035 Move X1, X31
	036 Call Collider.get_attachedRigidbody, X0
	037 Move X22, 0x227A000
	038 Move X22, [X22+1144]
	039 Move X21, X0
	040 Move X8, [X22]
	041 Move W9, [X8+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X8
	045 Call 0x1B6F8F8
	046 Move X0, X21
	047 Move X1, X31
	048 Move X2, X31
	049 Call Object.op_Equality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfEqual {108}
	054 Move X0, X20
	055 Move X1, X31
	056 Call Component.get_gameObject, X0
	057 Compare X0, 0
	058 JumpIfEqual {114}
	059 Move X8, 0x227B000
	060 Move X8, [X8+2808]
	061 Move X2, X31
	062 Move X1, [X8]
	063 Call GameObject.CompareTag, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {108}
	068 Move X0, X20
	069 Move X1, X31
	070 Call Collider.get_attachedRigidbody, X0
	071 Compare X0, 0
	072 JumpIfEqual {114}
	073 Move X1, X31
	074 Call Component.get_gameObject, X0
	075 Compare X0, 0
	076 JumpIfEqual {114}
	077 Move X8, 0x227C000
	078 Move X8, [X8+2760]
	079 Move X1, [X8]
	080 Call 0x20D04D0, X0
	081 Move X8, [X22]
	082 Move X20, X0
	083 Move W9, [X8+224]
	084 Compare W9, 0
	085 JumpIfNotEqual {88}
	086 Move X0, X8
	087 Call 0x1B6F8F8
	088 Move X0, X20
	089 Move X1, X31
	090 Move X2, X31
	091 Call Object.op_Inequality, X0, X1
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {108}
	096 Move X0, X31
	097 Call Time.get_time
	098 Move X0, [X19+32]
	099 Move [X19+72], S0
	100 Compare X0, 0
	101 JumpIfEqual {114}
	102 Move W1, [X19+44]
	103 Move X20, [X31+32]
	104 Move X19, [X31+40]
	105 Move X22, [X31+16]
	106 Move X21, [X31+24]
	107 Move X30, [X31+48]
	108 Move X20, [X31+32]
	109 Move X19, [X31+40]
	110 Move X22, [X31+16]
	111 Move X21, [X31+24]
	112 Move X30, [X31+48]
	113 Return 
	114 Call 0x1B6FA1C

Method: System.Void PlayButtonPressedAnimation()

Disassembly:
	0x01CD4C80 MOV X1, X31
	0x01CD4C84 BL 0x3A9B084
	0x01CD4C88 CBZ X0, 0x1CD4D40
	0x01CD4C8C ADRP X19, 0x227B000
	0x01CD4C90 LDR X19, [X19 + 0xC18]
	0x01CD4C94 MOV X1, X31
	0x01CD4C98 BL 0x3AA7658
	0x01CD4C9C LDR X0, [X19]
	0x01CD4CA0 MOV V8.16B, V2.16B
	0x01CD4CA4 LDR W8, [X0 + 0xE0]
	0x01CD4CA8 CBNZ W8, 0x1CD4CBC
	0x01CD4CAC STP V1, V0, [X31]
	0x01CD4CB0 BL 0x1B6E8F8
	0x01CD4CB4 LDP V1, V0, [X31]
	0x01CD4CB8 LDR X0, [X19]
	0x01CD4CBC LDR X8, [X0 + 0xB8]
	0x01CD4CC0 ADRP X19, 0x254F000
	0x01CD4CC4 LDRB W9, [X19 + 0x442]
	0x01CD4CC8 LDR V9, [X8]
	0x01CD4CCC LDR V10, [X8 + 0x8]
	0x01CD4CD0 CBNZ W9, 0x1CD4CF0
	0x01CD4CD4 ADRP X0, 0x2279000
	0x01CD4CD8 LDR X0, [X0 + 0x480]
	0x01CD4CDC STP V1, V0, [X31]
	0x01CD4CE0 BL 0x1B6E7F0
	0x01CD4CE4 LDP V1, V0, [X31]
	0x01CD4CE8 MOVZ W8, 0x1
	0x01CD4CEC STRB W8, [X19 + 0x442]
	0x01CD4CF0 ADRP X8, 0x2279000
	0x01CD4CF4 LDR X8, [X8 + 0x480]
	0x01CD4CF8 MOV V0.S[1], V1.S[0]
	0x01CD4CFC FADD S5, S8, S10
	0x01CD4D00 FADD V3.2S, V0.2S, V9.2S
	0x01CD4D04 LDR X8, [X8]
	0x01CD4D08 LDP X20, X19, [X31 + 0x40]
	0x01CD4D0C LDR X30, [X31 + 0x38]
	0x01CD4D10 LDP D9, D8, [X31 + 0x28]
	0x01CD4D14 LDR X8, [X8 + 0xB8]
	0x01CD4D18 LDR V10, [X31 + 0x20]
	0x01CD4D1C LDR V4, [X8 + 0x18]
	0x01CD4D20 LDR V2, [X8 + 0x20]
	0x01CD4D24 FADD V0.2S, V4.2S, V4.2S
	0x01CD4D28 FADD S2, S2, S2
	0x01CD4D2C FSUB V0.2S, V3.2S, V0.2S
	0x01CD4D30 FSUB S2, S5, S2
	0x01CD4D34 MOV S1, V0.S[1]
	0x01CD4D38 ADD X31, X31, 0x50
	0x01CD4D3C RET
	0x01CD4D40 BL 0x1B6EA1C
	0x01CD4D44 SUB X31, X31, 0x50
	0x01CD4D48 STR D10, [X31 + 0x20]
	0x01CD4D4C STP D9, D8, [X31 + 0x28]
	0x01CD4D50 STR X30, [X31 + 0x38]
	0x01CD4D54 STP X20, X19, [X31 + 0x40]
	0x01CD4D58 ADRP X20, 0x254F000
	0x01CD4D5C LDRB W8, [X20 + 0x5F0]
	0x01CD4D60 MOV X19, X0
	0x01CD4D64 TBNZ X8, 0x0, 0x1CD4D7C
	0x01CD4D68 ADRP X0, 0x227B000
	0x01CD4D6C LDR X0, [X0 + 0xC18]
	0x01CD4D70 BL 0x1B6E7F0
	0x01CD4D74 MOVZ W8, 0x1
	0x01CD4D78 STRB W8, [X20 + 0x5F0]
	0x01CD4D7C MOV X0, X19
	0x01CD4D80 MOV X1, X31
	0x01CD4D84 BL 0x3A9B084
	0x01CD4D88 CBZ X0, 0x1CD4E40
	0x01CD4D8C ADRP X19, 0x227B000
	0x01CD4D90 LDR X19, [X19 + 0xC18]
	0x01CD4D94 MOV X1, X31
	0x01CD4D98 BL 0x3AA7658
	0x01CD4D9C LDR X0, [X19]
	0x01CD4DA0 MOV V8.16B, V2.16B
	0x01CD4DA4 LDR W8, [X0 + 0xE0]
	0x01CD4DA8 CBNZ W8, 0x1CD4DBC
	0x01CD4DAC STP V1, V0, [X31]
	0x01CD4DB0 BL 0x1B6E8F8
	0x01CD4DB4 LDP V1, V0, [X31]
	0x01CD4DB8 LDR X0, [X19]
	0x01CD4DBC LDR X8, [X0 + 0xB8]
	0x01CD4DC0 ADRP X19, 0x254F000
	0x01CD4DC4 LDRB W9, [X19 + 0x442]
	0x01CD4DC8 LDR V9, [X8]
	0x01CD4DCC LDR V10, [X8 + 0x8]
	0x01CD4DD0 CBNZ W9, 0x1CD4DF0
	0x01CD4DD4 ADRP X0, 0x2279000
	0x01CD4DD8 LDR X0, [X0 + 0x480]
	0x01CD4DDC STP V1, V0, [X31]
	0x01CD4DE0 BL 0x1B6E7F0
	0x01CD4DE4 LDP V1, V0, [X31]
	0x01CD4DE8 MOVZ W8, 0x1
	0x01CD4DEC STRB W8, [X19 + 0x442]
	0x01CD4DF0 ADRP X8, 0x2279000
	0x01CD4DF4 LDR X8, [X8 + 0x480]
	0x01CD4DF8 MOV V0.S[1], V1.S[0]
	0x01CD4DFC FADD S5, S8, S10
	0x01CD4E00 FADD V3.2S, V0.2S, V9.2S
	0x01CD4E04 LDR X8, [X8]
	0x01CD4E08 LDP X20, X19, [X31 + 0x40]
	0x01CD4E0C LDR X30, [X31 + 0x38]
	0x01CD4E10 LDP D9, D8, [X31 + 0x28]
	0x01CD4E14 LDR X8, [X8 + 0xB8]
	0x01CD4E18 LDR V10, [X31 + 0x20]
	0x01CD4E1C LDR V4, [X8 + 0x18]
	0x01CD4E20 LDR V2, [X8 + 0x20]
	0x01CD4E24 FADD V0.2S, V4.2S, V4.2S
	0x01CD4E28 FADD S2, S2, S2
	0x01CD4E2C FADD V0.2S, V3.2S, V0.2S
	0x01CD4E30 FADD S2, S5, S2
	0x01CD4E34 MOV S1, V0.S[1]
	0x01CD4E38 ADD X31, X31, 0x50
	0x01CD4E3C RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x2550000
	008 Move X20, 0x227B000
	009 Move W8, [X21+1510]
	010 Move X20, [X20+1696]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0x227B000
	017 Move X0, [X0+1736]
	018 Call 0x1B6F7F0
	019 Move X0, 0x227B000
	020 Move X0, [X0+368]
	021 Call 0x1B6F7F0
	022 Move X0, 0x227C000
	023 Move X0, [X0+2792]
	024 Call 0x1B6F7F0
	025 Move X0, 0x227C000
	026 Move X0, [X0+2800]
	027 Call 0x1B6F7F0
	028 Move X0, 0x227C000
	029 Move X0, [X0+2808]
	030 Call 0x1B6F7F0
	031 Move X0, 0x227B000
	032 Move X0, [X0+1696]
	033 Call 0x1B6F7F0
	034 Move W8, 1
	035 Move [X21+1510], W8
	036 Move X0, [X20]
	037 Move W20, [X19+76]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1B6F8F8
	042 Move W0, W20
	043 Move X1, X31
	044 Call LeanTween.cancel, X0
	045 Move X0, [X19+56]
	046 Compare X0, 0
	047 JumpIfEqual {131}
	048 Move X21, 0x227C000
	049 Move X21, [X21+2808]
	050 Move X1, X31
	051 Call Renderer.get_material, X0
	052 Move X8, [X21]
	053 Move X20, X0
	054 Move W9, [X8+224]
	055 Compare W9, 0
	056 JumpIfNotEqual {60}
	057 Move X0, X8
	058 Call 0x1B6F8F8
	059 Move X8, [X21]
	060 Compare X20, 0
	061 JumpIfEqual {131}
	062 Move X8, [X8+184]
	063 Move X0, X20
	064 Move X2, X31
	065 Move S2, [X8+12]
	066 Move S3, [X8+16]
	067 Move S0, [X8+4]
	068 Move S1, [X8+8]
	069 Move W1, [X8]
	070 Call Material.SetColor, X0, X1, X2
	071 Move X8, -19046400
	072 Move V2, [X8+3376]
	073 Move S0, W31
	074 Move S1, 1
	075 Move X0, X31
	076 Call LeanTween.value, V0, V1, V2
	077 Compare X0, 0
	078 JumpIfEqual {131}
	079 Move X20, 0x227B000
	080 Move X21, 0x227C000
	081 Move X20, [X20+1736]
	082 Move X21, [X21+2792]
	083 Move X1, X31
	084 Call LTDescr.setEaseOutCirc, X0
	085 Move X8, [X20]
	086 Move X20, X0
	087 Move X0, X8
	088 Call 0x1B6FA0C
	089 Move X2, [X21]
	090 Move X1, X19
	091 Move X3, X31
	092 Move X21, X0
	093 Call Action`1<Single>..ctor, X0, X1, X2
	094 Compare X20, 0
	095 JumpIfEqual {131}
	096 Move X22, 0x227B000
	097 Move X23, 0x227C000
	098 Move X22, [X22+368]
	099 Move X23, [X23+2800]
	100 Move X0, X20
	101 Move X1, X21
	102 Move X2, X31
	103 Call LTDescr.setOnUpdate, X0, X1
	104 Move X8, [X22]
	105 Move X20, X0
	106 Move X0, X8
	107 Call 0x1B6FA0C
	108 Move X2, [X23]
	109 Move X1, X19
	110 Move X3, X31
	111 Move X21, X0
	112 Call Action..ctor, X0, X1, X2
	113 Compare X20, 0
	114 JumpIfEqual {131}
	115 Move X0, X20
	116 Move X1, X21
	117 Move X2, X31
	118 Call LTDescr.setOnComplete, X0, X1
	119 Compare X0, 0
	120 JumpIfEqual {131}
	121 Move X1, X31
	122 Call LTDescr.get_id, X0
	123 Move [X19+76], W0
	124 Move X20, [X31+32]
	125 Move X19, [X31+40]
	126 Move X22, [X31+16]
	127 Move X21, [X31+24]
	128 Move X30, [X31+48]
	129 Move X23, [X31+56]
	130 Return 
	131 Call 0x1B6FA1C

Method: System.Void SetBackButtonEmission(System.Boolean isOn, System.Boolean isCorrect)

Disassembly:
	0x01CD4E40 BL 0x1B6EA1C
	0x01CD4E44 STP X30, X19, [X31 - 0x10]!
	0x01CD4E48 MOV X1, X31
	0x01CD4E4C MOV X19, X0
	0x01CD4E50 BL 0x1D65284
	0x01CD4E54 LDR X8, [X19]
	0x01CD4E58 MOV X0, X19
	0x01CD4E5C LDR X2, [X8 + 0x248]
	0x01CD4E60 LDR X1, [X8 + 0x250]
	0x01CD4E64 LDP X30, X19, [X31], #0x10
	0x01CD4E68 BR X2
	0x01CD4E6C AND W2, W2, 0x1
	0x01CD4E70 MOV X3, X31
	0x01CD4E74 B 0x1D65288
	0x01CD4E78 STR X30, [X31 - 0x20]!
	0x01CD4E7C STP X20, X19, [X31 + 0x10]
	0x01CD4E80 LDR X10, [X0 + 0xB8]
	0x01CD4E84 CBZ X10, 0x1CD4F6C
	0x01CD4E88 LDR W9, [X10 + 0x18]
	0x01CD4E8C MOV X19, X0
	0x01CD4E90 MOV X8, X31
	0x01CD4E94 ADD X10, X10, 0x20
	0x01CD4E98 CMP X8, X9
	0x01CD4E9C B.CS 0x1CD4F68
	0x01CD4EA0 LDR X11, [X10, X8, LSL #3]
	0x01CD4EA4 CBZ X11, 0x1CD4F6C
	0x01CD4EA8 STP W31, W8, [X11 + 0x28]
	0x01CD4EAC ADD X8, X8, 0x1
	0x01CD4EB0 CMP X8, 0xB
	0x01CD4EB4 STR X19, [X11 + 0x20]
	0x01CD4EB8 B.NE 0x1CD4E98
	0x01CD4EBC LDR X0, [X19 + 0x40]
	0x01CD4EC0 CBZ X0, 0x1CD4F34
	0x01CD4EC4 LDRB W8, [X0 + 0x60]
	0x01CD4EC8 TBNZ X8, 0x1, 0x1CD4F34
	0x01CD4ECC MOV X1, X31
	0x01CD4ED0 BL 0x1D9E780
	0x01CD4ED4 TBZ X0, 0x0, 0x1CD4F34
	0x01CD4ED8 MOVZ W1, 0xB
	0x01CD4EDC MOV W0, W31
	0x01CD4EE0 MOV X2, X31
	0x01CD4EE4 BL 0x3A98D10
	0x01CD4EE8 MOV W1, W0
	0x01CD4EEC MOV X0, X19
	0x01CD4EF0 BL 0x1CD4B24
	0x01CD4EF4 MOV X0, X19
	0x01CD4EF8 MOV W1, W31
	0x01CD4EFC BL 0x1CD4458
	0x01CD4F00 MOV X0, X19
	0x01CD4F04 MOV W1, W31
	0x01CD4F08 BL 0x1CD4524
	0x01CD4F0C MOV X0, X19
	0x01CD4F10 MOV W1, W31
	0x01CD4F14 BL 0x1CD45F0
	0x01CD4F18 MOV X0, X19
	0x01CD4F1C MOV W1, W31
	0x01CD4F20 BL 0x1CD46B4
	0x01CD4F24 MOV X0, X19
	0x01CD4F28 LDP X20, X19, [X31 + 0x10]
	0x01CD4F2C LDR X30, [X31], #0x20
	0x01CD4F30 B 0x1CD4F70
	0x01CD4F34 MOV X0, X19
	0x01CD4F38 BL 0x1CD5078
	0x01CD4F3C MOV X0, X19
	0x01CD4F40 BL 0x1CD5154
	0x01CD4F44 LDR X20, [X19 + 0xB0]
	0x01CD4F48 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x2550000
	008 Move W8, [X21+1511]
	009 Move W20, W2
	010 Move W22, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x227C000
	017 Move X0, [X0+2808]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X21+1511], W8
	021 Move X0, [X19+64]
	022 Compare X0, 0
	023 JumpIfEqual {83}
	024 Move X23, 0x227C000
	025 Move X23, [X23+2808]
	026 Move X1, X31
	027 Call Renderer.get_material, X0
	028 Move X8, [X23]
	029 Move X19, X0
	030 Move W9, [X8+224]
	031 Compare W9, 0
	032 JumpIfNotEqual {36}
	033 Move X0, X8
	034 Call 0x1B6F8F8
	035 Move X8, [X23]
	036 Move X9, [X8+184]
	037 Move W21, [X9]
	038 Move TEMP, X22
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {66}
	042 Move W10, [X8+224]
	043 Compare W10, 0
	044 JumpIfNotEqual {49}
	045 Move X0, X8
	046 Call 0x1B6F8F8
	047 Move X8, [X23]
	048 Move X9, [X8+184]
	049 And W31, W20, 1
	050 Move W8, 20
	051 Move W10, 4
	052 Move W11, 24
	053 Move W12, 8
	054 Move W13, 28
	055 NotImplemented "Instruction CSEL not yet implemented."
	056 Move W10, 12
	057 NotImplemented "Instruction CSEL not yet implemented."
	058 Move W12, 32
	059 NotImplemented "Instruction CSEL not yet implemented."
	060 Move W13, 16
	061 NotImplemented "Instruction CSEL not yet implemented."
	062 Move V0, [X9]
	063 Move V1, [X9]
	064 Move V2, [X9]
	065 Move V3, [X9]
	066 Move S2, W31
	067 Move S3, 1
	068 Move S1, W31
	069 Move S0, W31
	070 Compare X19, 0
	071 JumpIfEqual {83}
	072 Move X0, X19
	073 Move W1, W21
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X22, [X31+16]
	077 Move X21, [X31+24]
	078 Move X2, X31
	079 Move X30, [X31+48]
	080 Move X23, [X31+56]
	081 Call Material.SetColor, X0, X1, X2
	082 Return 
	083 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CD4F4C BL 0x1CD44BC
	0x01CD4F50 CBZ X20, 0x1CD4F6C

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x01CD4F54 AND W1, W0, 0x1
	0x01CD4F58 MOV X0, X20
	0x01CD4F5C LDP X20, X19, [X31 + 0x10]
	0x01CD4F60 LDR X30, [X31], #0x20
	0x01CD4F64 B 0x1CD5178
	0x01CD4F68 BL 0x1B6EA24
	0x01CD4F6C BL 0x1B6EA1C
	0x01CD4F70 SUB X31, X31, 0x90
	0x01CD4F74 STR X30, [X31 + 0x60]
	0x01CD4F78 STP X22, X21, [X31 + 0x70]
	0x01CD4F7C STP X20, X19, [X31 + 0x80]
	0x01CD4F80 ADRP X20, 0x254F000
	0x01CD4F84 LDRB W8, [X20 + 0x5F1]
	0x01CD4F88 MOV X19, X0
	0x01CD4F8C TBNZ X8, 0x0, 0x1CD4FB0
	0x01CD4F90 ADRP X0, 0x227B000
	0x01CD4F94 LDR X0, [X0 + 0xAD0]
	0x01CD4F98 BL 0x1B6E7F0
	0x01CD4F9C ADRP X0, 0x227B000
	0x01CD4FA0 LDR X0, [X0 + 0xAD8]
	0x01CD4FA4 BL 0x1B6E7F0
	0x01CD4FA8 MOVZ W8, 0x1
	0x01CD4FAC STRB W8, [X20 + 0x5F1]
	0x01CD4FB0 STP X31, X31, [X31 + 0x40]
	0x01CD4FB4 STR X31, [X31 + 0x50]
	0x01CD4FB8 STP X31, X31, [X31 + 0x20]
	0x01CD4FBC STR X31, [X31 + 0x30]
	0x01CD4FC0 LDR X0, [X19 + 0x40]
	0x01CD4FC4 CBZ X0, 0x1CD5064
	0x01CD4FC8 LDRB W8, [X0 + 0x60]
	0x01CD4FCC TBNZ X8, 0x1, 0x1CD5064
	0x01CD4FD0 MOV X1, X31
	0x01CD4FD4 BL 0x1D9E780
	0x01CD4FD8 TBZ X0, 0x0, 0x1CD5064

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2550000
	006 Move X21, 0x227B000
	007 Move X19, 0x227C000
	008 Move W8, [X20+1512]
	009 Move X21, [X21+832]
	010 Move X19, [X19+2808]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x227C000
	016 Move X0, [X0+2808]
	017 Call 0x1B6F7F0
	018 Move X0, 0x227B000
	019 Move X0, [X0+832]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X20+1512], W8
	023 Move X0, [X21]
	024 Move X1, X31
	025 Call Shader.PropertyToID, X0
	026 Move X8, [X19]
	027 Move X9, -19042304
	028 Move V0, [X9+170]
	029 Move X9, -19042304
	030 Move X8, [X8+184]
	031 Move [X8], W0
	032 Move [X8+4], V0
	033 Move X8, [X19]
	034 Move V0, [X9+134]
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8+20], V0
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return 

Method: System.Void <PlayButtonPressedAnimation>b__16_0(System.Single val)

Disassembly:
	0x01CD4FDC ADRP X21, 0x227B000
	0x01CD4FE0 ADRP X22, 0x227B000
	0x01CD4FE4 LDR X21, [X21 + 0xAD8]
	0x01CD4FE8 LDR X22, [X22 + 0xAD0]
	0x01CD4FEC MOV W20, W31
	0x01CD4FF0 ADD X8, X31, 0x8
	0x01CD4FF4 MOV X0, X19
	0x01CD4FF8 BL 0x1CD4714
	0x01CD4FFC LDUR V0, [X31 + 0x8]
	0x01CD5000 LDR X8, [X31 + 0x18]
	0x01CD5004 LDR X3, [X21]
	0x01CD5008 ADD X0, X31, 0x40
	0x01CD500C MOV W1, W20
	0x01CD5010 MOV W2, W31
	0x01CD5014 STR V0, [X31 + 0x4]
	0x01CD5018 STR X8, [X31 + 0x50]
	0x01CD501C BL 0x22AD29C
	0x01CD5020 ADD X8, X31, 0x8
	0x01CD5024 MOV X0, X19
	0x01CD5028 BL 0x1CD47CC
	0x01CD502C LDUR V0, [X31 + 0x8]
	0x01CD5030 LDR X8, [X31 + 0x18]
	0x01CD5034 MOV X0, X31
	0x01CD5038 STR V0, [X31 + 0x2]
	0x01CD503C STR X8, [X31 + 0x30]
	0x01CD5040 BL 0x1D9CB50
	0x01CD5044 LDR X3, [X22]
	0x01CD5048 AND X2, X0, 0x0
	0x01CD504C ADD X0, X31, 0x20
	0x01CD5050 MOV W1, W20
	0x01CD5054 BL 0x22B0C90
	0x01CD5058 ADD W20, W20, 0x1
	0x01CD505C CMP W20, 0xB
	0x01CD5060 B.NE 0x1CD4FF0
	0x01CD5064 LDP X20, X19, [X31 + 0x80]
	0x01CD5068 LDP X22, X21, [X31 + 0x70]
	0x01CD506C LDR X30, [X31 + 0x60]
	0x01CD5070 ADD X31, X31, 0x90
	0x01CD5074 RET
	0x01CD5078 SUB X31, X31, 0x70
	0x01CD507C STP X30, X23, [X31 + 0x40]
	0x01CD5080 STP X22, X21, [X31 + 0x50]
	0x01CD5084 STP X20, X19, [X31 + 0x60]
	0x01CD5088 ADRP X20, 0x254E000
	0x01CD508C LDRB W8, [X20 + 0x5F2]
	0x01CD5090 MOV X19, X0
	0x01CD5094 TBNZ X8, 0x0, 0x1CD50AC
	0x01CD5098 ADRP X0, 0x227A000
	0x01CD509C LDR X0, [X0 + 0xC20]
	0x01CD50A0 BL 0x1B6E7F0
	0x01CD50A4 MOVZ W8, 0x1
	0x01CD50A8 STRB W8, [X20 + 0x5F2]
	0x01CD50AC ADRP X23, 0x227A000
	0x01CD50B0 LDR X23, [X23 + 0xC20]
	0x01CD50B4 MOV X20, X31
	0x01CD50B8 STP X31, X31, [X31 + 0x20]
	0x01CD50BC STR X31, [X31 + 0x30]
	0x01CD50C0 LDR X8, [X19 + 0xB8]
	0x01CD50C4 CBZ X8, 0x1CD514C
	0x01CD50C8 LDR W9, [X8 + 0x18]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2550000
	007 Move X20, 0x227A000
	008 Move W8, [X21+1513]
	009 Move X20, [X20+1144]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x227A000
	017 Move X0, [X0+1696]
	018 Call 0x1B6F7F0
	019 Move X0, 0x2279000
	020 Move X0, [X0+1144]
	021 Call 0x1B6F7F0
	022 Move W8, 1
	023 Move [X21+1513], W8
	024 Move X0, [X20]
	025 Move X20, [X19+48]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1B6F8F8
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {55}
	038 Move X8, 0x227A000
	039 Move X8, [X8+1696]
	040 Move W19, [X19+76]
	041 Move X0, [X8]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1B6F8F8
	046 Move W0, W19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 Move X21, [X31+24]
	051 Move X1, X31
	052 Move V8, [X31+48]
	053 Call LeanTween.cancel, X0
	054 Return 
	055 Move X0, [X19+48]
	056 Compare X0, 0
	057 JumpIfEqual {77}
	058 Move X8, -19050496
	059 Move V3, [X8+2540]
	060 Move S1, 1
	061 NotImplemented "Instruction FMIN not yet implemented."
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X30, [X31+16]
	065 Move X21, [X31+24]
	066 Move S2, W31
	067 Multiply S1, S1, S3
	068 NotImplemented "Instruction FCMP not yet implemented."
	069 Add S1, S1, S2
	070 Move S0, W31
	071 NotImplemented "Instruction FCSEL not yet implemented."
	072 Move S1, W31
	073 Move X1, X31
	074 Move V8, [X31+48]
	075 Call Transform.set_localPosition, X0, X1
	076 Return 
	077 Call 0x1B6FA1C

Method: System.Void <PlayButtonPressedAnimation>b__16_1()

Disassembly:
	0x01CD50CC CMP X20, X9
	0x01CD50D0 B.CS 0x1CD5150
	0x01CD50D4 ADD X8, X8, X20, 0x3, LSL
	0x01CD50D8 LDR X21, [X8 + 0x20]
	0x01CD50DC ADD X8, X31, 0x8
	0x01CD50E0 MOV X0, X19
	0x01CD50E4 BL 0x1CD4714
	0x01CD50E8 LDUR V0, [X31 + 0x8]
	0x01CD50EC LDR X8, [X31 + 0x18]
	0x01CD50F0 LDR X2, [X23]
	0x01CD50F4 ADD X0, X31, 0x20
	0x01CD50F8 MOV W1, W20
	0x01CD50FC STR V0, [X31 + 0x2]
	0x01CD5100 STR X8, [X31 + 0x30]
	0x01CD5104 BL 0x22ACEE4
	0x01CD5108 MOV W22, W0
	0x01CD510C MOV X0, X19
	0x01CD5110 BL 0x1CD4AC4
	0x01CD5114 CBZ X21, 0x1CD514C
	0x01CD5118 CMP X20, W0, UXTW
	0x01CD511C CSET W2, EQ
	0x01CD5120 AND W1, W22, 0x1
	0x01CD5124 MOV X0, X21
	0x01CD5128 BL 0x1CD3E40
	0x01CD512C ADD X20, X20, 0x1
	0x01CD5130 CMP X20, 0xB
	0x01CD5134 B.NE 0x1CD50C0
	0x01CD5138 LDP X20, X19, [X31 + 0x60]
	0x01CD513C LDP X22, X21, [X31 + 0x50]
	0x01CD5140 LDP X30, X23, [X31 + 0x40]
	0x01CD5144 ADD X31, X31, 0x70
	0x01CD5148 RET
	0x01CD514C BL 0x1B6EA1C
	0x01CD5150 BL 0x1B6EA24
	0x01CD5154 STP X30, X19, [X31 - 0x10]!
	0x01CD5158 LDR X19, [X0 + 0xB0]
	0x01CD515C BL 0x1CD4588
	0x01CD5160 CBZ X19, 0x1CD5174
	0x01CD5164 AND W1, W0, 0x1
	0x01CD5168 MOV X0, X19
	0x01CD516C LDP X30, X19, [X31], #0x10
	0x01CD5170 B 0x1CD650C
	0x01CD5174 BL 0x1B6EA1C
	0x01CD5178 STP D11, D10, [X31 - 0x50]!
	0x01CD517C STP D9, D8, [X31 + 0x10]
	0x01CD5180 STR X30, [X31 + 0x20]
	0x01CD5184 STP X22, X21, [X31 + 0x30]
	0x01CD5188 STP X20, X19, [X31 + 0x40]
	0x01CD518C ADRP X21, 0x254E000
	0x01CD5190 LDRB W8, [X21 + 0x605]
	0x01CD5194 MOV W20, W1
	0x01CD5198 MOV X19, X0
	0x01CD519C TBNZ X8, 0x0, 0x1CD51B4
	0x01CD51A0 ADRP X0, 0x227A000
	0x01CD51A4 LDR X0, [X0 + 0xC28]
	0x01CD51A8 BL 0x1B6E7F0
	0x01CD51AC MOVZ W8, 0x1
	0x01CD51B0 STRB W8, [X21 + 0x605]
	0x01CD51B4 ADRP X21, 0x227A000
	0x01CD51B8 LDR X21, [X21 + 0xC28]
	0x01CD51BC TBZ X20, 0x0, 0x1CD51E4
	0x01CD51C0 LDR X0, [X21]
	0x01CD51C4 LDR W8, [X0 + 0xE0]
	0x01CD51C8 CBNZ W8, 0x1CD51D4
	0x01CD51CC BL 0x1B6E8F8
	0x01CD51D0 LDR X0, [X21]
	0x01CD51D4 LDR X8, [X0 + 0xB8]
	0x01CD51D8 LDP S11, S10, [X8 + 0x18]
	0x01CD51DC LDP S8, S9, [X8 + 0x20]
	0x01CD51E0 B 0x1CD51F4
	0x01CD51E4 FMOV S8, W31
	0x01CD51E8 FMOV S9, 1
	0x01CD51EC FMOV S10, W31
	0x01CD51F0 FMOV S11, W31
	0x01CD51F4 LDR X20, [X19 + 0x30]
	0x01CD51F8 CBZ X20, 0x1CD5294
	0x01CD51FC LDR W8, [X20 + 0x18]
	0x01CD5200 CMP W8, 0x1
	0x01CD5204 B.LT 0x1CD527C
	0x01CD5208 MOV W22, W31
	0x01CD520C CMP W22, W8
	0x01CD5210 B.CS 0x1CD5298
	0x01CD5214 ADD X8, X20, W22, 0x3, SXTW
	0x01CD5218 LDR X0, [X8 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x254F000
	008 Move X21, 0x227A000
	009 Move W8, [X20+1514]
	010 Move X21, [X21+1696]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x227A000
	017 Move X0, [X0+1736]
	018 Call 0x1B6F7F0
	019 Move X0, 0x227A000
	020 Move X0, [X0+368]
	021 Call 0x1B6F7F0
	022 Move X0, 0x227B000
	023 Move X0, [X0+2816]
	024 Call 0x1B6F7F0
	025 Move X0, 0x227B000
	026 Move X0, [X0+2824]
	027 Call 0x1B6F7F0
	028 Move X0, 0x227A000
	029 Move X0, [X0+1696]
	030 Call 0x1B6F7F0
	031 Move W8, 1
	032 Move [X20+1514], W8
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1B6F8F8
	038 Move X8, -19050496
	039 Move V2, [X8+3236]
	040 Move S0, W31
	041 Move S1, 1
	042 Move X0, X31
	043 Call LeanTween.value, V0, V1, V2
	044 Compare X0, 0
	045 JumpIfEqual {98}
	046 Move X20, 0x227A000
	047 Move X21, 0x227B000
	048 Move X20, [X20+1736]
	049 Move X21, [X21+2816]
	050 Move X1, X31
	051 Call LTDescr.setEaseOutCirc, X0
	052 Move X8, [X20]
	053 Move X20, X0
	054 Move X0, X8
	055 Call 0x1B6FA0C
	056 Move X2, [X21]
	057 Move X1, X19
	058 Move X3, X31
	059 Move X21, X0
	060 Call Action`1<Single>..ctor, X0, X1, X2
	061 Compare X20, 0
	062 JumpIfEqual {98}
	063 Move X22, 0x227A000
	064 Move X23, 0x227B000
	065 Move X22, [X22+368]
	066 Move X23, [X23+2824]
	067 Move X0, X20
	068 Move X1, X21
	069 Move X2, X31
	070 Call LTDescr.setOnUpdate, X0, X1
	071 Move X8, [X22]
	072 Move X20, X0
	073 Move X0, X8
	074 Call 0x1B6FA0C
	075 Move X2, [X23]
	076 Move X1, X19
	077 Move X3, X31
	078 Move X21, X0
	079 Call Action..ctor, X0, X1, X2
	080 Compare X20, 0
	081 JumpIfEqual {98}
	082 Move X0, X20
	083 Move X1, X21
	084 Move X2, X31
	085 Call LTDescr.setOnComplete, X0, X1
	086 Compare X0, 0
	087 JumpIfEqual {98}
	088 Move X1, X31
	089 Call LTDescr.get_id, X0
	090 Move [X19+76], W0
	091 Move X20, [X31+32]
	092 Move X19, [X31+40]
	093 Move X22, [X31+16]
	094 Move X21, [X31+24]
	095 Move X30, [X31+48]
	096 Move X23, [X31+56]
	097 Return 
	098 Call 0x1B6FA1C

Method: System.Void <PlayButtonPressedAnimation>b__16_2(System.Single val)

Disassembly:
	0x01CD521C CBZ X0, 0x1CD5294
	0x01CD5220 MOV X1, X31
	0x01CD5224 BL 0x3A7BCC8
	0x01CD5228 LDR X8, [X21]
	0x01CD522C MOV X19, X0
	0x01CD5230 LDR W9, [X8 + 0xE0]
	0x01CD5234 CBNZ W9, 0x1CD5240
	0x01CD5238 MOV X0, X8
	0x01CD523C BL 0x1B6E8F8
	0x01CD5240 CBZ X19, 0x1CD5294
	0x01CD5244 LDR X8, [X21]
	0x01CD5248 MOV X0, X19
	0x01CD524C MOV V0.16B, V11.16B
	0x01CD5250 MOV V1.16B, V10.16B
	0x01CD5254 LDR X8, [X8 + 0xB8]
	0x01CD5258 MOV V2.16B, V8.16B
	0x01CD525C MOV V3.16B, V9.16B
	0x01CD5260 MOV X2, X31
	0x01CD5264 LDR W1, [X8 + 0x8]
	0x01CD5268 BL 0x3A7D234
	0x01CD526C LDR W8, [X20 + 0x18]
	0x01CD5270 ADD W22, W22, 0x1
	0x01CD5274 CMP W22, W8
	0x01CD5278 B.LT 0x1CD520C
	0x01CD527C LDP X20, X19, [X31 + 0x40]
	0x01CD5280 LDP X22, X21, [X31 + 0x30]
	0x01CD5284 LDR X30, [X31 + 0x20]
	0x01CD5288 LDP D9, D8, [X31 + 0x10]
	0x01CD528C LDP D11, D10, [X31], #0x50
	0x01CD5290 RET
	0x01CD5294 BL 0x1B6EA1C
	0x01CD5298 BL 0x1B6EA24
	0x01CD529C SUB X31, X31, 0xA0
	0x01CD52A0 STR D8, [X31 + 0x60]
	0x01CD52A4 STR X30, [X31 + 0x68]
	0x01CD52A8 STP X24, X23, [X31 + 0x70]
	0x01CD52AC STP X22, X21, [X31 + 0x80]
	0x01CD52B0 STP X20, X19, [X31 + 0x90]
	0x01CD52B4 ADRP X20, 0x254E000
	0x01CD52B8 LDRB W8, [X20 + 0x5F3]
	0x01CD52BC MOV X19, X0
	0x01CD52C0 TBNZ X8, 0x0, 0x1CD52FC
	0x01CD52C4 ADRP X0, 0x227A000
	0x01CD52C8 LDR X0, [X0 + 0xAD0]
	0x01CD52CC BL 0x1B6E7F0
	0x01CD52D0 ADRP X0, 0x227A000
	0x01CD52D4 LDR X0, [X0 + 0xAD8]
	0x01CD52D8 BL 0x1B6E7F0
	0x01CD52DC ADRP X0, 0x227A000
	0x01CD52E0 LDR X0, [X0 + 0xC30]
	0x01CD52E4 BL 0x1B6E7F0
	0x01CD52E8 ADRP X0, 0x227A000
	0x01CD52EC LDR X0, [X0 + 0xC20]
	0x01CD52F0 BL 0x1B6E7F0
	0x01CD52F4 MOVZ W8, 0x1
	0x01CD52F8 STRB W8, [X20 + 0x5F3]
	0x01CD52FC MOV X0, X19
	0x01CD5300 MOV X1, X31
	0x01CD5304 STP X31, X31, [X31 + 0x40]
	0x01CD5308 STR X31, [X31 + 0x50]
	0x01CD530C STP X31, X31, [X31 + 0x20]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x254F000
	007 Move X20, 0x2279000
	008 Move W8, [X21+1515]
	009 Move X20, [X20+1144]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x227A000
	017 Move X0, [X0+1696]
	018 Call 0x1B6F7F0
	019 Move X0, 0x2279000
	020 Move X0, [X0+1144]
	021 Call 0x1B6F7F0
	022 Move W8, 1
	023 Move [X21+1515], W8
	024 Move X0, [X20]
	025 Move X20, [X19+48]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1B6F8F8
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {55}
	038 Move X8, 0x227A000
	039 Move X8, [X8+1696]
	040 Move W19, [X19+76]
	041 Move X0, [X8]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1B6F8F8
	046 Move W0, W19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 Move X21, [X31+24]
	051 Move X1, X31
	052 Move V8, [X31+48]
	053 Call LeanTween.cancel, X0
	054 Return 
	055 Move X0, [X19+48]
	056 Compare X0, 0
	057 JumpIfEqual {78}
	058 Move X8, -19050496
	059 Move X9, -19050496
	060 Move V2, [X8+3384]
	061 Move V3, [X9+2540]
	062 Move S1, 1
	063 NotImplemented "Instruction FMIN not yet implemented."
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X30, [X31+16]
	067 Move X21, [X31+24]
	068 Multiply S1, S1, S2
	069 NotImplemented "Instruction FCMP not yet implemented."
	070 Add S1, S1, S3
	071 Move S0, W31
	072 NotImplemented "Instruction FCSEL not yet implemented."
	073 Move S1, W31
	074 Move X1, X31
	075 Move V8, [X31+48]
	076 Call Transform.set_localPosition, X0, X1
	077 Return 
	078 Call 0x1B6FA1C

Method: System.Void <PlayButtonPressedAnimation>b__16_3()

Disassembly:
	0x01CD5310 STR X31, [X31 + 0x30]
	0x01CD5314 BL 0x1D65000
	0x01CD5318 LDR X0, [X19 + 0x40]
	0x01CD531C CBZ X0, 0x1CD5584
	0x01CD5320 LDRB W8, [X0 + 0x60]
	0x01CD5324 TBNZ X8, 0x1, 0x1CD5584
	0x01CD5328 MOV X1, X31
	0x01CD532C BL 0x1D9E780
	0x01CD5330 TBZ X0, 0x0, 0x1CD5584
	0x01CD5334 MOV X0, X19
	0x01CD5338 BL 0x1CD4944
	0x01CD533C STR W0, [X31 + 0x58]
	0x01CD5340 LDR X1, [X19 + 0x38]
	0x01CD5344 ADD X0, X31, 0x58
	0x01CD5348 MOV X2, X31
	0x01CD534C BL 0x1D9CBCC
	0x01CD5350 TBZ X0, 0x0, 0x1CD5370
	0x01CD5354 MOV X0, X31
	0x01CD5358 BL 0x1D9CB50
	0x01CD535C AND X1, X0, 0x0
	0x01CD5360 MOV X0, X19
	0x01CD5364 BL 0x1CD49A4
	0x01CD5368 MOV X0, X19
	0x01CD536C BL 0x1CD55A4
	0x01CD5370 MOV X0, X19
	0x01CD5374 BL 0x1CD4884
	0x01CD5378 STR W0, [X31 + 0x58]
	0x01CD537C LDR X1, [X19 + 0x38]
	0x01CD5380 ADD X0, X31, 0x58
	0x01CD5384 MOV X2, X31
	0x01CD5388 BL 0x1D9CBCC
	0x01CD538C TBZ X0, 0x0, 0x1CD53AC
	0x01CD5390 MOV X0, X19
	0x01CD5394 BL 0x1CD5920
	0x01CD5398 MOV X0, X31
	0x01CD539C BL 0x1D9CB50
	0x01CD53A0 AND X1, X0, 0x0
	0x01CD53A4 MOV X0, X19
	0x01CD53A8 BL 0x1CD48E4
	0x01CD53AC MOV X0, X19
	0x01CD53B0 BL 0x1CD4A04
	0x01CD53B4 STR W0, [X31 + 0x58]
	0x01CD53B8 LDR X1, [X19 + 0x38]
	0x01CD53BC ADD X0, X31, 0x58
	0x01CD53C0 MOV X2, X31
	0x01CD53C4 BL 0x1D9CBCC
	0x01CD53C8 TBZ X0, 0x0, 0x1CD53E8
	0x01CD53CC MOV X0, X19
	0x01CD53D0 BL 0x1CD59B0
	0x01CD53D4 MOV X0, X31
	0x01CD53D8 BL 0x1D9CB50
	0x01CD53DC AND X1, X0, 0x0
	0x01CD53E0 MOV X0, X19
	0x01CD53E4 BL 0x1CD4A64
	0x01CD53E8 MOV X0, X19
	0x01CD53EC BL 0x1CD43F0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x254F000
	006 Move W8, [X20+1516]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x227B000
	013 Move X0, [X0+2808]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1516], W8
	017 Move X0, [X19+56]
	018 Compare X0, 0
	019 JumpIfEqual {70}
	020 Move X21, 0x227B000
	021 Move X21, [X21+2808]
	022 Move X1, X31
	023 Call Renderer.get_material, X0
	024 Move X8, [X21]
	025 Move X20, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1B6F8F8
	031 Compare X20, 0
	032 JumpIfEqual {70}
	033 Move X8, [X21]
	034 Move S0, W31
	035 Move S1, W31
	036 Move S2, W31
	037 Move X8, [X8+184]
	038 Move S3, 1
	039 Move X0, X20
	040 Move X2, X31
	041 Move W1, [X8]
	042 Call Material.SetColor, X0, X1, X2
	043 Move X20, 0x254F000
	044 Move W8, [X20+1087]
	045 Move X19, [X19+48]
	046 Compare W8, 0
	047 JumpIfNotEqual {53}
	048 Move X0, 0x2279000
	049 Move X0, [X0+1152]
	050 Call 0x1B6F7F0
	051 Move W8, 1
	052 Move [X20+1087], W8
	053 Compare X19, 0
	054 JumpIfEqual {70}
	055 Move X8, 0x2279000
	056 Move X8, [X8+1152]
	057 Move X0, X19
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X1, X31
	061 Move X8, [X8]
	062 Move X8, [X8+184]
	063 Move S1, [X8+4]
	064 Move S2, [X8+8]
	065 Move V0, [X8]
	066 Move X30, [X31+32]
	067 Move X21, [X31+40]
	068 Call Transform.set_localPosition, X0, X1
	069 Return 
	070 Call 0x1B6FA1C

