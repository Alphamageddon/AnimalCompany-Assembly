Type: AnimalCompany.ItemSellingMachineButtonView

Method: System.Void OnDestroy()

Disassembly:
	0x01DD9014 BL 0x337DF1C
	0x01DD9018 ADRP X0, 0x231F000
	0x01DD901C LDR X0, [X0 + 0x988]
	0x01DD9020 BL 0x1C16D08
	0x01DD9024 MOV X1, X0
	0x01DD9028 MOV X0, X19
	0x01DD902C BL 0x1C16DEC
	0x01DD9030 STP X30, X21, [X31 - 0x20]!
	0x01DD9034 STP X20, X19, [X31 + 0x10]
	0x01DD9038 ADRP X21, 0x25FF000
	0x01DD903C LDRB W9, [X21 + 0xC4F]
	0x01DD9040 MOV X20, X0
	0x01DD9044 MOV X19, X8
	0x01DD9048 TBNZ X9, 0x0, 0x1DD9060
	0x01DD904C ADRP X0, 0x231F000
	0x01DD9050 LDR X0, [X0 + 0x990]
	0x01DD9054 BL 0x1C16CF4
	0x01DD9058 MOVZ W8, 0x1
	0x01DD905C STRB W8, [X21 + 0xC4F]
	0x01DD9060 LDR X20, [X20 + 0x50]
	0x01DD9064 CBZ X20, 0x1DD90A0
	0x01DD9068 ADRP X21, 0x231F000
	0x01DD906C LDR X21, [X21 + 0x990]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2600000
	006 Move X20, 0x231D000
	007 Move W8, [X21+3142]
	008 Move X20, [X20+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x231D000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3142], W8
	019 Move X0, [X20]
	020 Move W19, [X19+76]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call LeanTween.cancel, X0
	032 Return 

Method: System.Void Setup(AnimalCompany.ItemSellingMachineController controller, System.Int32 buttonGroupId, System.Int32 buttonId)

Disassembly:
	0x01DD9070 MOV X0, X31
	0x01DD9074 BL 0x1D795F4
	0x01DD9078 MOV X3, X0

ISIL:
	001 Move [X0+32], X1
	002 Move [X0+40], W2
	003 Move [X0+44], W3
	004 Return 

Method: System.Void OnTriggerEnter(UnityEngine.Collider other)

Disassembly:
	0x01DD907C STP X31, X31, [X19 + 0x8]
	0x01DD9080 LDR X4, [X21]
	0x01DD9084 ADD X1, X20, 0x10
	0x01DD9088 STR X31, [X19]
	0x01DD908C MOV X0, X19
	0x01DD9090 LDP X20, X19, [X31 + 0x10]
	0x01DD9094 MOVZ W2, 0xB
	0x01DD9098 LDP X30, X21, [X31], #0x20
	0x01DD909C B 0x240B00C
	0x01DD90A0 ADRP X0, 0x231A000
	0x01DD90A4 LDR X0, [X0 + 0x5B0]
	0x01DD90A8 BL 0x1C16D08
	0x01DD90AC BL 0x1C16F10
	0x01DD90B0 MOV X19, X0
	0x01DD90B4 ADRP X0, 0x231F000
	0x01DD90B8 LDR X0, [X0 + 0x998]
	0x01DD90BC BL 0x1C16D08
	0x01DD90C0 MOV X1, X0
	0x01DD90C4 MOV X0, X19
	0x01DD90C8 MOV X2, X31
	0x01DD90CC BL 0x337DF1C
	0x01DD90D0 ADRP X0, 0x231F000
	0x01DD90D4 LDR X0, [X0 + 0x9A0]
	0x01DD90D8 BL 0x1C16D08
	0x01DD90DC MOV X1, X0
	0x01DD90E0 MOV X0, X19
	0x01DD90E4 BL 0x1C16DEC
	0x01DD90E8 STP X30, X21, [X31 - 0x20]!
	0x01DD90EC STP X20, X19, [X31 + 0x10]
	0x01DD90F0 ADRP X21, 0x25FF000
	0x01DD90F4 LDRB W9, [X21 + 0xC50]
	0x01DD90F8 MOV X20, X0
	0x01DD90FC MOV X19, X8
	0x01DD9100 TBNZ X9, 0x0, 0x1DD9118
	0x01DD9104 ADRP X0, 0x231F000
	0x01DD9108 LDR X0, [X0 + 0x9A8]
	0x01DD910C BL 0x1C16CF4
	0x01DD9110 MOVZ W8, 0x1
	0x01DD9114 STRB W8, [X21 + 0xC50]
	0x01DD9118 LDR X20, [X20 + 0x50]
	0x01DD911C CBZ X20, 0x1DD9158
	0x01DD9120 ADRP X21, 0x231F000
	0x01DD9124 LDR X21, [X21 + 0x9A8]
	0x01DD9128 MOV X0, X31
	0x01DD912C BL 0x1D796F8
	0x01DD9130 MOV X3, X0
	0x01DD9134 STP X31, X31, [X19 + 0x8]
	0x01DD9138 LDR X4, [X21]
	0x01DD913C ADD X1, X20, 0x3C
	0x01DD9140 STR X31, [X19]
	0x01DD9144 MOV X0, X19
	0x01DD9148 LDP X20, X19, [X31 + 0x10]
	0x01DD914C MOVZ W2, 0xB
	0x01DD9150 LDP X30, X21, [X31], #0x20
	0x01DD9154 B 0x240ECC4
	0x01DD9158 ADRP X0, 0x231A000
	0x01DD915C LDR X0, [X0 + 0x5B0]
	0x01DD9160 BL 0x1C16D08
	0x01DD9164 BL 0x1C16F10
	0x01DD9168 MOV X19, X0
	0x01DD916C ADRP X0, 0x231F000
	0x01DD9170 LDR X0, [X0 + 0x9B0]
	0x01DD9174 BL 0x1C16D08
	0x01DD9178 MOV X1, X0
	0x01DD917C MOV X0, X19
	0x01DD9180 MOV X2, X31
	0x01DD9184 BL 0x337DF1C
	0x01DD9188 ADRP X0, 0x231F000
	0x01DD918C LDR X0, [X0 + 0x9B8]
	0x01DD9190 BL 0x1C16D08
	0x01DD9194 MOV X1, X0
	0x01DD9198 MOV X0, X19
	0x01DD919C BL 0x1C16DEC
	0x01DD91A0 STP X30, X19, [X31 - 0x10]!
	0x01DD91A4 LDR X8, [X0 + 0x50]
	0x01DD91A8 CBZ X8, 0x1DD91B8
	0x01DD91AC LDR W0, [X8 + 0x68]
	0x01DD91B0 LDP X30, X19, [X31], #0x10
	0x01DD91B4 RET
	0x01DD91B8 ADRP X0, 0x231A000
	0x01DD91BC LDR X0, [X0 + 0x5B0]
	0x01DD91C0 BL 0x1C16D08
	0x01DD91C4 BL 0x1C16F10
	0x01DD91C8 MOV X19, X0
	0x01DD91CC ADRP X0, 0x231F000
	0x01DD91D0 LDR X0, [X0 + 0x9C0]
	0x01DD91D4 BL 0x1C16D08
	0x01DD91D8 MOV X1, X0
	0x01DD91DC MOV X0, X19
	0x01DD91E0 MOV X2, X31
	0x01DD91E4 BL 0x337DF1C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2600000
	007 Move W8, [X21+3143]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x2320000
	015 Move X0, [X0+2280]
	016 Call 0x1C17CF4
	017 Move X0, 0x231B000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x231E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3143], W8
	025 Move X0, X31
	026 Call Time.get_time
	027 Move V1, [X19+72]
	028 Move X8, -19849216
	029 Move V2, [X8+860]
	030 Subtract S0, S0, S1
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 Compare X20, 0
	033 JumpIfEqual {114}
	034 Move X0, X20
	035 Move X1, X31
	036 Call Collider.get_attachedRigidbody, X0
	037 Move X22, 0x231B000
	038 Move X22, [X22+1432]
	039 Move X21, X0
	040 Move X8, [X22]
	041 Move W9, [X8+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X0, X21
	047 Move X1, X31
	048 Move X2, X31
	049 Call Object.op_Equality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfEqual {108}
	054 Move X0, X20
	055 Move X1, X31
	056 Call Component.get_gameObject, X0
	057 Compare X0, 0
	058 JumpIfEqual {114}
	059 Move X8, 0x231E000
	060 Move X8, [X8+1064]
	061 Move X2, X31
	062 Move X1, [X8]
	063 Call GameObject.CompareTag, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {108}
	068 Move X0, X20
	069 Move X1, X31
	070 Call Collider.get_attachedRigidbody, X0
	071 Compare X0, 0
	072 JumpIfEqual {114}
	073 Move X1, X31
	074 Call Component.get_gameObject, X0
	075 Compare X0, 0
	076 JumpIfEqual {114}
	077 Move X8, 0x2320000
	078 Move X8, [X8+2280]
	079 Move X1, [X8]
	080 Call 0x21E68C4, X0
	081 Move X8, [X22]
	082 Move X20, X0
	083 Move W9, [X8+224]
	084 Compare W9, 0
	085 JumpIfNotEqual {88}
	086 Move X0, X8
	087 Call 0x1C17DFC
	088 Move X0, X20
	089 Move X1, X31
	090 Move X2, X31
	091 Call Object.op_Inequality, X0, X1
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {108}
	096 Move X0, X31
	097 Call Time.get_time
	098 Move X0, [X19+32]
	099 Move [X19+72], S0
	100 Compare X0, 0
	101 JumpIfEqual {114}
	102 Move W1, [X19+44]
	103 Move X20, [X31+32]
	104 Move X19, [X31+40]
	105 Move X22, [X31+16]
	106 Move X21, [X31+24]
	107 Move X30, [X31+48]
	108 Move X20, [X31+32]
	109 Move X19, [X31+40]
	110 Move X22, [X31+16]
	111 Move X21, [X31+24]
	112 Move X30, [X31+48]
	113 Return 
	114 Call 0x1C17F20

Method: System.Void PlayButtonPressedAnimation()

Disassembly:
	0x01DD959C MOV X1, X31
	0x01DD95A0 BL 0x3C32E90
	0x01DD95A4 CBZ X0, 0x1DD965C
	0x01DD95A8 ADRP X19, 0x231F000
	0x01DD95AC LDR X19, [X19 + 0xA38]
	0x01DD95B0 MOV X1, X31
	0x01DD95B4 BL 0x3C3F58C
	0x01DD95B8 LDR X0, [X19]
	0x01DD95BC MOV V8.16B, V2.16B
	0x01DD95C0 LDR W8, [X0 + 0xE0]
	0x01DD95C4 CBNZ W8, 0x1DD95D8
	0x01DD95C8 STP V1, V0, [X31]
	0x01DD95CC BL 0x1C16DFC
	0x01DD95D0 LDP V1, V0, [X31]
	0x01DD95D4 LDR X0, [X19]
	0x01DD95D8 LDR X8, [X0 + 0xB8]
	0x01DD95DC ADRP X19, 0x25FF000
	0x01DD95E0 LDRB W9, [X19 + 0x786]
	0x01DD95E4 LDR V9, [X8]
	0x01DD95E8 LDR V10, [X8 + 0x8]
	0x01DD95EC CBNZ W9, 0x1DD960C
	0x01DD95F0 ADRP X0, 0x231A000
	0x01DD95F4 LDR X0, [X0 + 0x5A0]
	0x01DD95F8 STP V1, V0, [X31]
	0x01DD95FC BL 0x1C16CF4
	0x01DD9600 LDP V1, V0, [X31]
	0x01DD9604 MOVZ W8, 0x1
	0x01DD9608 STRB W8, [X19 + 0x786]
	0x01DD960C ADRP X8, 0x231A000
	0x01DD9610 LDR X8, [X8 + 0x5A0]
	0x01DD9614 MOV V0.S[1], V1.S[0]
	0x01DD9618 FADD S5, S8, S10
	0x01DD961C FADD V3.2S, V0.2S, V9.2S
	0x01DD9620 LDR X8, [X8]
	0x01DD9624 LDP X20, X19, [X31 + 0x40]
	0x01DD9628 LDR X30, [X31 + 0x38]
	0x01DD962C LDP D9, D8, [X31 + 0x28]
	0x01DD9630 LDR X8, [X8 + 0xB8]
	0x01DD9634 LDR V10, [X31 + 0x20]
	0x01DD9638 LDR V4, [X8 + 0x18]
	0x01DD963C LDR V2, [X8 + 0x20]
	0x01DD9640 FADD V0.2S, V4.2S, V4.2S
	0x01DD9644 FADD S2, S2, S2
	0x01DD9648 FSUB V0.2S, V3.2S, V0.2S
	0x01DD964C FSUB S2, S5, S2
	0x01DD9650 MOV S1, V0.S[1]
	0x01DD9654 ADD X31, X31, 0x50
	0x01DD9658 RET
	0x01DD965C BL 0x1C16F20
	0x01DD9660 SUB X31, X31, 0x50
	0x01DD9664 STR D10, [X31 + 0x20]
	0x01DD9668 STP D9, D8, [X31 + 0x28]
	0x01DD966C STR X30, [X31 + 0x38]
	0x01DD9670 STP X20, X19, [X31 + 0x40]
	0x01DD9674 ADRP X20, 0x25FF000
	0x01DD9678 LDRB W8, [X20 + 0xC52]
	0x01DD967C MOV X19, X0
	0x01DD9680 TBNZ X8, 0x0, 0x1DD9698
	0x01DD9684 ADRP X0, 0x231F000
	0x01DD9688 LDR X0, [X0 + 0xA38]
	0x01DD968C BL 0x1C16CF4
	0x01DD9690 MOVZ W8, 0x1
	0x01DD9694 STRB W8, [X20 + 0xC52]
	0x01DD9698 MOV X0, X19
	0x01DD969C MOV X1, X31
	0x01DD96A0 BL 0x3C32E90
	0x01DD96A4 CBZ X0, 0x1DD975C
	0x01DD96A8 ADRP X19, 0x231F000
	0x01DD96AC LDR X19, [X19 + 0xA38]
	0x01DD96B0 MOV X1, X31
	0x01DD96B4 BL 0x3C3F58C
	0x01DD96B8 LDR X0, [X19]
	0x01DD96BC MOV V8.16B, V2.16B
	0x01DD96C0 LDR W8, [X0 + 0xE0]
	0x01DD96C4 CBNZ W8, 0x1DD96D8
	0x01DD96C8 STP V1, V0, [X31]
	0x01DD96CC BL 0x1C16DFC
	0x01DD96D0 LDP V1, V0, [X31]
	0x01DD96D4 LDR X0, [X19]
	0x01DD96D8 LDR X8, [X0 + 0xB8]
	0x01DD96DC ADRP X19, 0x25FF000
	0x01DD96E0 LDRB W9, [X19 + 0x786]
	0x01DD96E4 LDR V9, [X8]
	0x01DD96E8 LDR V10, [X8 + 0x8]
	0x01DD96EC CBNZ W9, 0x1DD970C
	0x01DD96F0 ADRP X0, 0x231A000
	0x01DD96F4 LDR X0, [X0 + 0x5A0]
	0x01DD96F8 STP V1, V0, [X31]
	0x01DD96FC BL 0x1C16CF4
	0x01DD9700 LDP V1, V0, [X31]
	0x01DD9704 MOVZ W8, 0x1
	0x01DD9708 STRB W8, [X19 + 0x786]
	0x01DD970C ADRP X8, 0x231A000
	0x01DD9710 LDR X8, [X8 + 0x5A0]
	0x01DD9714 MOV V0.S[1], V1.S[0]
	0x01DD9718 FADD S5, S8, S10
	0x01DD971C FADD V3.2S, V0.2S, V9.2S
	0x01DD9720 LDR X8, [X8]
	0x01DD9724 LDP X20, X19, [X31 + 0x40]
	0x01DD9728 LDR X30, [X31 + 0x38]
	0x01DD972C LDP D9, D8, [X31 + 0x28]
	0x01DD9730 LDR X8, [X8 + 0xB8]
	0x01DD9734 LDR V10, [X31 + 0x20]
	0x01DD9738 LDR V4, [X8 + 0x18]
	0x01DD973C LDR V2, [X8 + 0x20]
	0x01DD9740 FADD V0.2S, V4.2S, V4.2S
	0x01DD9744 FADD S2, S2, S2
	0x01DD9748 FADD V0.2S, V3.2S, V0.2S
	0x01DD974C FADD S2, S5, S2
	0x01DD9750 MOV S1, V0.S[1]
	0x01DD9754 ADD X31, X31, 0x50
	0x01DD9758 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x2600000
	008 Move X20, 0x231D000
	009 Move W8, [X21+3144]
	010 Move X20, [X20+1448]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0x231D000
	017 Move X0, [X0+1456]
	018 Call 0x1C17CF4
	019 Move X0, 0x231C000
	020 Move X0, [X0+3696]
	021 Call 0x1C17CF4
	022 Move X0, 0x2320000
	023 Move X0, [X0+2312]
	024 Call 0x1C17CF4
	025 Move X0, 0x2320000
	026 Move X0, [X0+2320]
	027 Call 0x1C17CF4
	028 Move X0, 0x2320000
	029 Move X0, [X0+2328]
	030 Call 0x1C17CF4
	031 Move X0, 0x231D000
	032 Move X0, [X0+1448]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+3144], W8
	036 Move X0, [X20]
	037 Move W20, [X19+76]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move W0, W20
	043 Move X1, X31
	044 Call LeanTween.cancel, X0
	045 Move X0, [X19+56]
	046 Compare X0, 0
	047 JumpIfEqual {131}
	048 Move X21, 0x2320000
	049 Move X21, [X21+2328]
	050 Move X1, X31
	051 Call Renderer.get_material, X0
	052 Move X8, [X21]
	053 Move X20, X0
	054 Move W9, [X8+224]
	055 Compare W9, 0
	056 JumpIfNotEqual {60}
	057 Move X0, X8
	058 Call 0x1C17DFC
	059 Move X8, [X21]
	060 Compare X20, 0
	061 JumpIfEqual {131}
	062 Move X8, [X8+184]
	063 Move X0, X20
	064 Move X2, X31
	065 Move S2, [X8+12]
	066 Move S3, [X8+16]
	067 Move S0, [X8+4]
	068 Move S1, [X8+8]
	069 Move W1, [X8]
	070 Call Material.SetColor, X0, X1, X2
	071 Move X8, -19849216
	072 Move V2, [X8+860]
	073 Move S0, W31
	074 Move S1, 1
	075 Move X0, X31
	076 Call LeanTween.value, V0, V1, V2
	077 Compare X0, 0
	078 JumpIfEqual {131}
	079 Move X20, 0x231D000
	080 Move X21, 0x2320000
	081 Move X20, [X20+1456]
	082 Move X21, [X21+2312]
	083 Move X1, X31
	084 Call LTDescr.setEaseOutCirc, X0
	085 Move X8, [X20]
	086 Move X20, X0
	087 Move X0, X8
	088 Call 0x1C17F10
	089 Move X2, [X21]
	090 Move X1, X19
	091 Move X3, X31
	092 Move X21, X0
	093 Call Action`1<Single>..ctor, X0, X1, X2
	094 Compare X20, 0
	095 JumpIfEqual {131}
	096 Move X22, 0x231C000
	097 Move X23, 0x2320000
	098 Move X22, [X22+3696]
	099 Move X23, [X23+2320]
	100 Move X0, X20
	101 Move X1, X21
	102 Move X2, X31
	103 Call LTDescr.setOnUpdate, X0, X1
	104 Move X8, [X22]
	105 Move X20, X0
	106 Move X0, X8
	107 Call 0x1C17F10
	108 Move X2, [X23]
	109 Move X1, X19
	110 Move X3, X31
	111 Move X21, X0
	112 Call Action..ctor, X0, X1, X2
	113 Compare X20, 0
	114 JumpIfEqual {131}
	115 Move X0, X20
	116 Move X1, X21
	117 Move X2, X31
	118 Call LTDescr.setOnComplete, X0, X1
	119 Compare X0, 0
	120 JumpIfEqual {131}
	121 Move X1, X31
	122 Call LTDescr.get_id, X0
	123 Move [X19+76], W0
	124 Move X20, [X31+32]
	125 Move X19, [X31+40]
	126 Move X22, [X31+16]
	127 Move X21, [X31+24]
	128 Move X30, [X31+48]
	129 Move X23, [X31+56]
	130 Return 
	131 Call 0x1C17F20

Method: System.Void SetBackButtonEmission(System.Boolean isOn, System.Boolean isCorrect)

Disassembly:
	0x01DD975C BL 0x1C16F20
	0x01DD9760 STP X30, X19, [X31 - 0x10]!
	0x01DD9764 MOV X1, X31
	0x01DD9768 MOV X19, X0
	0x01DD976C BL 0x1E73F88
	0x01DD9770 LDR X8, [X19]
	0x01DD9774 MOVZ W9, 0x1
	0x01DD9778 STRB W9, [X19 + 0xF0]
	0x01DD977C MOV X0, X19
	0x01DD9780 LDR X2, [X8 + 0x248]
	0x01DD9784 LDR X1, [X8 + 0x250]
	0x01DD9788 LDP X30, X19, [X31], #0x10
	0x01DD978C BR X2
	0x01DD9790 AND W2, W2, 0x1
	0x01DD9794 MOV X3, X31
	0x01DD9798 B 0x1E73F8C
	0x01DD979C STR X30, [X31 - 0x20]!
	0x01DD97A0 STP X20, X19, [X31 + 0x10]
	0x01DD97A4 LDR X10, [X0 + 0xB8]
	0x01DD97A8 CBZ X10, 0x1DD9890
	0x01DD97AC LDR W9, [X10 + 0x18]
	0x01DD97B0 MOV X19, X0
	0x01DD97B4 MOV X8, X31
	0x01DD97B8 ADD X10, X10, 0x20
	0x01DD97BC CMP X8, X9
	0x01DD97C0 B.CS 0x1DD988C
	0x01DD97C4 LDR X11, [X10, X8, LSL #3]
	0x01DD97C8 CBZ X11, 0x1DD9890
	0x01DD97CC STP W31, W8, [X11 + 0x28]
	0x01DD97D0 ADD X8, X8, 0x1
	0x01DD97D4 CMP X8, 0xB
	0x01DD97D8 STR X19, [X11 + 0x20]
	0x01DD97DC B.NE 0x1DD97BC
	0x01DD97E0 LDR X0, [X19 + 0x40]
	0x01DD97E4 CBZ X0, 0x1DD9858
	0x01DD97E8 LDRB W8, [X0 + 0x60]
	0x01DD97EC TBNZ X8, 0x1, 0x1DD9858
	0x01DD97F0 MOV X1, X31
	0x01DD97F4 BL 0x1E93668
	0x01DD97F8 TBZ X0, 0x0, 0x1DD9858
	0x01DD97FC MOVZ W1, 0xB
	0x01DD9800 MOV W0, W31
	0x01DD9804 MOV X2, X31
	0x01DD9808 BL 0x3C309A8
	0x01DD980C MOV W1, W0
	0x01DD9810 MOV X0, X19
	0x01DD9814 BL 0x1DD9440
	0x01DD9818 MOV X0, X19
	0x01DD981C MOV W1, W31
	0x01DD9820 BL 0x1DD8D74
	0x01DD9824 MOV X0, X19
	0x01DD9828 MOV W1, W31
	0x01DD982C BL 0x1DD8E40
	0x01DD9830 MOV X0, X19
	0x01DD9834 MOV W1, W31
	0x01DD9838 BL 0x1DD8F0C
	0x01DD983C MOV X0, X19
	0x01DD9840 MOV W1, W31
	0x01DD9844 BL 0x1DD8FD0
	0x01DD9848 MOV X0, X19
	0x01DD984C LDP X20, X19, [X31 + 0x10]
	0x01DD9850 LDR X30, [X31], #0x20
	0x01DD9854 B 0x1DD9894
	0x01DD9858 MOV X0, X19
	0x01DD985C BL 0x1DD999C
	0x01DD9860 MOV X0, X19
	0x01DD9864 BL 0x1DD9A78

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x2600000
	008 Move W8, [X21+3145]
	009 Move W20, W2
	010 Move W22, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2320000
	017 Move X0, [X0+2328]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3145], W8
	021 Move X0, [X19+64]
	022 Compare X0, 0
	023 JumpIfEqual {83}
	024 Move X23, 0x2320000
	025 Move X23, [X23+2328]
	026 Move X1, X31
	027 Call Renderer.get_material, X0
	028 Move X8, [X23]
	029 Move X19, X0
	030 Move W9, [X8+224]
	031 Compare W9, 0
	032 JumpIfNotEqual {36}
	033 Move X0, X8
	034 Call 0x1C17DFC
	035 Move X8, [X23]
	036 Move X9, [X8+184]
	037 Move W21, [X9]
	038 Move TEMP, X22
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {66}
	042 Move W10, [X8+224]
	043 Compare W10, 0
	044 JumpIfNotEqual {49}
	045 Move X0, X8
	046 Call 0x1C17DFC
	047 Move X8, [X23]
	048 Move X9, [X8+184]
	049 And W31, W20, 1
	050 Move W8, 20
	051 Move W10, 4
	052 Move W11, 24
	053 Move W12, 8
	054 Move W13, 28
	055 NotImplemented "Instruction CSEL not yet implemented."
	056 Move W10, 12
	057 NotImplemented "Instruction CSEL not yet implemented."
	058 Move W12, 32
	059 NotImplemented "Instruction CSEL not yet implemented."
	060 Move W13, 16
	061 NotImplemented "Instruction CSEL not yet implemented."
	062 Move V0, [X9]
	063 Move V1, [X9]
	064 Move V2, [X9]
	065 Move V3, [X9]
	066 Move S2, W31
	067 Move S3, 1
	068 Move S1, W31
	069 Move S0, W31
	070 Compare X19, 0
	071 JumpIfEqual {83}
	072 Move X0, X19
	073 Move W1, W21
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X22, [X31+16]
	077 Move X21, [X31+24]
	078 Move X2, X31
	079 Move X30, [X31+48]
	080 Move X23, [X31+56]
	081 Call Material.SetColor, X0, X1, X2
	082 Return 
	083 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DD9868 LDR X20, [X19 + 0xB0]
	0x01DD986C MOV X0, X19

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x01DD9870 BL 0x1DD8DD8
	0x01DD9874 CBZ X20, 0x1DD9890
	0x01DD9878 AND W1, W0, 0x1
	0x01DD987C MOV X0, X20
	0x01DD9880 LDP X20, X19, [X31 + 0x10]
	0x01DD9884 LDR X30, [X31], #0x20
	0x01DD9888 B 0x1DD9A9C
	0x01DD988C BL 0x1C16F28
	0x01DD9890 BL 0x1C16F20
	0x01DD9894 SUB X31, X31, 0x90
	0x01DD9898 STR X30, [X31 + 0x60]
	0x01DD989C STP X22, X21, [X31 + 0x70]
	0x01DD98A0 STP X20, X19, [X31 + 0x80]
	0x01DD98A4 ADRP X20, 0x25FF000
	0x01DD98A8 LDRB W8, [X20 + 0xC53]
	0x01DD98AC MOV X19, X0
	0x01DD98B0 TBNZ X8, 0x0, 0x1DD98D4
	0x01DD98B4 ADRP X0, 0x231F000
	0x01DD98B8 LDR X0, [X0 + 0x8F0]
	0x01DD98BC BL 0x1C16CF4
	0x01DD98C0 ADRP X0, 0x231F000
	0x01DD98C4 LDR X0, [X0 + 0x8F8]
	0x01DD98C8 BL 0x1C16CF4
	0x01DD98CC MOVZ W8, 0x1
	0x01DD98D0 STRB W8, [X20 + 0xC53]
	0x01DD98D4 STP X31, X31, [X31 + 0x40]
	0x01DD98D8 STR X31, [X31 + 0x50]
	0x01DD98DC STP X31, X31, [X31 + 0x20]
	0x01DD98E0 STR X31, [X31 + 0x30]
	0x01DD98E4 LDR X0, [X19 + 0x40]
	0x01DD98E8 CBZ X0, 0x1DD9988
	0x01DD98EC LDRB W8, [X0 + 0x60]
	0x01DD98F0 TBNZ X8, 0x1, 0x1DD9988
	0x01DD98F4 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2600000
	006 Move X21, 0x231E000
	007 Move X19, 0x2320000
	008 Move W8, [X20+3146]
	009 Move X21, [X21+3208]
	010 Move X19, [X19+2328]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x2320000
	016 Move X0, [X0+2328]
	017 Call 0x1C17CF4
	018 Move X0, 0x231E000
	019 Move X0, [X0+3208]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3146], W8
	023 Move X0, [X21]
	024 Move X1, X31
	025 Call Shader.PropertyToID, X0
	026 Move X8, [X19]
	027 Move X9, -19845120
	028 Move V0, [X9+16]
	029 Move X9, -19849216
	030 Move X8, [X8+184]
	031 Move [X8], W0
	032 Move [X8+4], V0
	033 Move X8, [X19]
	034 Move V0, [X9+236]
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8+20], V0
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return 

Method: System.Void <PlayButtonPressedAnimation>b__16_0(System.Single val)

Disassembly:
	0x01DD98F8 BL 0x1E93668
	0x01DD98FC TBZ X0, 0x0, 0x1DD9988
	0x01DD9900 ADRP X21, 0x231F000
	0x01DD9904 ADRP X22, 0x231F000
	0x01DD9908 LDR X21, [X21 + 0x8F8]
	0x01DD990C LDR X22, [X22 + 0x8F0]
	0x01DD9910 MOV W20, W31
	0x01DD9914 ADD X8, X31, 0x8
	0x01DD9918 MOV X0, X19
	0x01DD991C BL 0x1DD9030
	0x01DD9920 LDUR V0, [X31 + 0x8]
	0x01DD9924 LDR X8, [X31 + 0x18]
	0x01DD9928 LDR X3, [X21]
	0x01DD992C ADD X0, X31, 0x40
	0x01DD9930 MOV W1, W20
	0x01DD9934 MOV W2, W31
	0x01DD9938 STR V0, [X31 + 0x4]
	0x01DD993C STR X8, [X31 + 0x50]
	0x01DD9940 BL 0x240B0B0
	0x01DD9944 ADD X8, X31, 0x8
	0x01DD9948 MOV X0, X19
	0x01DD994C BL 0x1DD90E8
	0x01DD9950 LDUR V0, [X31 + 0x8]
	0x01DD9954 LDR X8, [X31 + 0x18]
	0x01DD9958 MOV X0, X31
	0x01DD995C STR V0, [X31 + 0x2]
	0x01DD9960 STR X8, [X31 + 0x30]
	0x01DD9964 BL 0x1E91B08
	0x01DD9968 LDR X3, [X22]
	0x01DD996C AND X2, X0, 0x0
	0x01DD9970 ADD X0, X31, 0x20
	0x01DD9974 MOV W1, W20
	0x01DD9978 BL 0x240ED7C
	0x01DD997C ADD W20, W20, 0x1
	0x01DD9980 CMP W20, 0xB
	0x01DD9984 B.NE 0x1DD9914
	0x01DD9988 LDP X20, X19, [X31 + 0x80]
	0x01DD998C LDP X22, X21, [X31 + 0x70]
	0x01DD9990 LDR X30, [X31 + 0x60]
	0x01DD9994 ADD X31, X31, 0x90
	0x01DD9998 RET
	0x01DD999C SUB X31, X31, 0x70
	0x01DD99A0 STP X30, X23, [X31 + 0x40]
	0x01DD99A4 STP X22, X21, [X31 + 0x50]
	0x01DD99A8 STP X20, X19, [X31 + 0x60]
	0x01DD99AC ADRP X20, 0x25FF000
	0x01DD99B0 LDRB W8, [X20 + 0xC54]
	0x01DD99B4 MOV X19, X0
	0x01DD99B8 TBNZ X8, 0x0, 0x1DD99D0
	0x01DD99BC ADRP X0, 0x231F000
	0x01DD99C0 LDR X0, [X0 + 0xA40]
	0x01DD99C4 BL 0x1C16CF4
	0x01DD99C8 MOVZ W8, 0x1
	0x01DD99CC STRB W8, [X20 + 0xC54]
	0x01DD99D0 ADRP X23, 0x231F000
	0x01DD99D4 LDR X23, [X23 + 0xA40]
	0x01DD99D8 MOV X20, X31
	0x01DD99DC STP X31, X31, [X31 + 0x20]
	0x01DD99E0 STR X31, [X31 + 0x30]
	0x01DD99E4 LDR X8, [X19 + 0xB8]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2600000
	007 Move X20, 0x231B000
	008 Move W8, [X21+3147]
	009 Move X20, [X20+1432]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x231D000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move X0, 0x231B000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3147], W8
	024 Move X0, [X20]
	025 Move X20, [X19+48]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {55}
	038 Move X8, 0x231D000
	039 Move X8, [X8+1448]
	040 Move W19, [X19+76]
	041 Move X0, [X8]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move W0, W19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 Move X21, [X31+24]
	051 Move X1, X31
	052 Move V8, [X31+48]
	053 Call LeanTween.cancel, X0
	054 Return 
	055 Move X0, [X19+48]
	056 Compare X0, 0
	057 JumpIfEqual {77}
	058 Move X8, -19853312
	059 Move V3, [X8+4080]
	060 Move S1, 1
	061 NotImplemented "Instruction FMIN not yet implemented."
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X30, [X31+16]
	065 Move X21, [X31+24]
	066 Move S2, W31
	067 Multiply S1, S1, S3
	068 NotImplemented "Instruction FCMP not yet implemented."
	069 Add S1, S1, S2
	070 Move S0, W31
	071 NotImplemented "Instruction FCSEL not yet implemented."
	072 Move S1, W31
	073 Move X1, X31
	074 Move V8, [X31+48]
	075 Call Transform.set_localPosition, X0, X1
	076 Return 
	077 Call 0x1C17F20

Method: System.Void <PlayButtonPressedAnimation>b__16_1()

Disassembly:
	0x01DD99E8 CBZ X8, 0x1DD9A70
	0x01DD99EC LDR W9, [X8 + 0x18]
	0x01DD99F0 CMP X20, X9
	0x01DD99F4 B.CS 0x1DD9A74
	0x01DD99F8 ADD X8, X8, X20, 0x3, LSL
	0x01DD99FC LDR X21, [X8 + 0x20]
	0x01DD9A00 ADD X8, X31, 0x8
	0x01DD9A04 MOV X0, X19
	0x01DD9A08 BL 0x1DD9030
	0x01DD9A0C LDUR V0, [X31 + 0x8]
	0x01DD9A10 LDR X8, [X31 + 0x18]
	0x01DD9A14 LDR X2, [X23]
	0x01DD9A18 ADD X0, X31, 0x20
	0x01DD9A1C MOV W1, W20
	0x01DD9A20 STR V0, [X31 + 0x2]
	0x01DD9A24 STR X8, [X31 + 0x30]
	0x01DD9A28 BL 0x240ACF4
	0x01DD9A2C MOV W22, W0
	0x01DD9A30 MOV X0, X19
	0x01DD9A34 BL 0x1DD93E0
	0x01DD9A38 CBZ X21, 0x1DD9A70
	0x01DD9A3C CMP X20, W0, UXTW
	0x01DD9A40 CSET W2, EQ
	0x01DD9A44 AND W1, W22, 0x1
	0x01DD9A48 MOV X0, X21
	0x01DD9A4C BL 0x1DD875C
	0x01DD9A50 ADD X20, X20, 0x1
	0x01DD9A54 CMP X20, 0xB
	0x01DD9A58 B.NE 0x1DD99E4
	0x01DD9A5C LDP X20, X19, [X31 + 0x60]
	0x01DD9A60 LDP X22, X21, [X31 + 0x50]
	0x01DD9A64 LDP X30, X23, [X31 + 0x40]
	0x01DD9A68 ADD X31, X31, 0x70
	0x01DD9A6C RET
	0x01DD9A70 BL 0x1C16F20
	0x01DD9A74 BL 0x1C16F28
	0x01DD9A78 STP X30, X19, [X31 - 0x10]!
	0x01DD9A7C LDR X19, [X0 + 0xB0]
	0x01DD9A80 BL 0x1DD8EA4
	0x01DD9A84 CBZ X19, 0x1DD9A98
	0x01DD9A88 AND W1, W0, 0x1
	0x01DD9A8C MOV X0, X19
	0x01DD9A90 LDP X30, X19, [X31], #0x10
	0x01DD9A94 B 0x1DDAE5C
	0x01DD9A98 BL 0x1C16F20
	0x01DD9A9C STP D11, D10, [X31 - 0x50]!
	0x01DD9AA0 STP D9, D8, [X31 + 0x10]
	0x01DD9AA4 STR X30, [X31 + 0x20]
	0x01DD9AA8 STP X22, X21, [X31 + 0x30]
	0x01DD9AAC STP X20, X19, [X31 + 0x40]
	0x01DD9AB0 ADRP X21, 0x25FF000
	0x01DD9AB4 LDRB W8, [X21 + 0xC67]
	0x01DD9AB8 MOV W20, W1
	0x01DD9ABC MOV X19, X0
	0x01DD9AC0 TBNZ X8, 0x0, 0x1DD9AD8
	0x01DD9AC4 ADRP X0, 0x231F000
	0x01DD9AC8 LDR X0, [X0 + 0xA48]
	0x01DD9ACC BL 0x1C16CF4
	0x01DD9AD0 MOVZ W8, 0x1
	0x01DD9AD4 STRB W8, [X21 + 0xC67]
	0x01DD9AD8 ADRP X21, 0x231F000
	0x01DD9ADC LDR X21, [X21 + 0xA48]
	0x01DD9AE0 TBZ X20, 0x0, 0x1DD9B08
	0x01DD9AE4 LDR X0, [X21]
	0x01DD9AE8 LDR W8, [X0 + 0xE0]
	0x01DD9AEC CBNZ W8, 0x1DD9AF8
	0x01DD9AF0 BL 0x1C16DFC
	0x01DD9AF4 LDR X0, [X21]
	0x01DD9AF8 LDR X8, [X0 + 0xB8]
	0x01DD9AFC LDP S11, S10, [X8 + 0x18]
	0x01DD9B00 LDP S8, S9, [X8 + 0x20]
	0x01DD9B04 B 0x1DD9B18
	0x01DD9B08 FMOV S8, W31
	0x01DD9B0C FMOV S9, 1
	0x01DD9B10 FMOV S10, W31
	0x01DD9B14 FMOV S11, W31
	0x01DD9B18 LDR X20, [X19 + 0x30]
	0x01DD9B1C CBZ X20, 0x1DD9BB8
	0x01DD9B20 LDR W8, [X20 + 0x18]
	0x01DD9B24 CMP W8, 0x1
	0x01DD9B28 B.LT 0x1DD9BA0
	0x01DD9B2C MOV W22, W31
	0x01DD9B30 CMP W22, W8
	0x01DD9B34 B.CS 0x1DD9BBC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2600000
	008 Move X21, 0x231D000
	009 Move W8, [X20+3148]
	010 Move X21, [X21+1448]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x231D000
	017 Move X0, [X0+1456]
	018 Call 0x1C17CF4
	019 Move X0, 0x231C000
	020 Move X0, [X0+3696]
	021 Call 0x1C17CF4
	022 Move X0, 0x2320000
	023 Move X0, [X0+2336]
	024 Call 0x1C17CF4
	025 Move X0, 0x2320000
	026 Move X0, [X0+2344]
	027 Call 0x1C17CF4
	028 Move X0, 0x231D000
	029 Move X0, [X0+1448]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+3148], W8
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X8, -19849216
	039 Move V2, [X8+712]
	040 Move S0, W31
	041 Move S1, 1
	042 Move X0, X31
	043 Call LeanTween.value, V0, V1, V2
	044 Compare X0, 0
	045 JumpIfEqual {98}
	046 Move X20, 0x231D000
	047 Move X21, 0x2320000
	048 Move X20, [X20+1456]
	049 Move X21, [X21+2336]
	050 Move X1, X31
	051 Call LTDescr.setEaseOutCirc, X0
	052 Move X8, [X20]
	053 Move X20, X0
	054 Move X0, X8
	055 Call 0x1C17F10
	056 Move X2, [X21]
	057 Move X1, X19
	058 Move X3, X31
	059 Move X21, X0
	060 Call Action`1<Single>..ctor, X0, X1, X2
	061 Compare X20, 0
	062 JumpIfEqual {98}
	063 Move X22, 0x231C000
	064 Move X23, 0x2320000
	065 Move X22, [X22+3696]
	066 Move X23, [X23+2344]
	067 Move X0, X20
	068 Move X1, X21
	069 Move X2, X31
	070 Call LTDescr.setOnUpdate, X0, X1
	071 Move X8, [X22]
	072 Move X20, X0
	073 Move X0, X8
	074 Call 0x1C17F10
	075 Move X2, [X23]
	076 Move X1, X19
	077 Move X3, X31
	078 Move X21, X0
	079 Call Action..ctor, X0, X1, X2
	080 Compare X20, 0
	081 JumpIfEqual {98}
	082 Move X0, X20
	083 Move X1, X21
	084 Move X2, X31
	085 Call LTDescr.setOnComplete, X0, X1
	086 Compare X0, 0
	087 JumpIfEqual {98}
	088 Move X1, X31
	089 Call LTDescr.get_id, X0
	090 Move [X19+76], W0
	091 Move X20, [X31+32]
	092 Move X19, [X31+40]
	093 Move X22, [X31+16]
	094 Move X21, [X31+24]
	095 Move X30, [X31+48]
	096 Move X23, [X31+56]
	097 Return 
	098 Call 0x1C17F20

Method: System.Void <PlayButtonPressedAnimation>b__16_2(System.Single val)

Disassembly:
	0x01DD9B38 ADD X8, X20, W22, 0x3, SXTW
	0x01DD9B3C LDR X0, [X8 + 0x20]
	0x01DD9B40 CBZ X0, 0x1DD9BB8
	0x01DD9B44 MOV X1, X31
	0x01DD9B48 BL 0x3C1341C
	0x01DD9B4C LDR X8, [X21]
	0x01DD9B50 MOV X19, X0
	0x01DD9B54 LDR W9, [X8 + 0xE0]
	0x01DD9B58 CBNZ W9, 0x1DD9B64
	0x01DD9B5C MOV X0, X8
	0x01DD9B60 BL 0x1C16DFC
	0x01DD9B64 CBZ X19, 0x1DD9BB8
	0x01DD9B68 LDR X8, [X21]
	0x01DD9B6C MOV X0, X19
	0x01DD9B70 MOV V0.16B, V11.16B
	0x01DD9B74 MOV V1.16B, V10.16B
	0x01DD9B78 LDR X8, [X8 + 0xB8]
	0x01DD9B7C MOV V2.16B, V8.16B
	0x01DD9B80 MOV V3.16B, V9.16B
	0x01DD9B84 MOV X2, X31
	0x01DD9B88 LDR W1, [X8 + 0x8]
	0x01DD9B8C BL 0x3C14988
	0x01DD9B90 LDR W8, [X20 + 0x18]
	0x01DD9B94 ADD W22, W22, 0x1
	0x01DD9B98 CMP W22, W8
	0x01DD9B9C B.LT 0x1DD9B30
	0x01DD9BA0 LDP X20, X19, [X31 + 0x40]
	0x01DD9BA4 LDP X22, X21, [X31 + 0x30]
	0x01DD9BA8 LDR X30, [X31 + 0x20]
	0x01DD9BAC LDP D9, D8, [X31 + 0x10]
	0x01DD9BB0 LDP D11, D10, [X31], #0x50
	0x01DD9BB4 RET
	0x01DD9BB8 BL 0x1C16F20
	0x01DD9BBC BL 0x1C16F28
	0x01DD9BC0 SUB X31, X31, 0xA0
	0x01DD9BC4 STR D8, [X31 + 0x60]
	0x01DD9BC8 STR X30, [X31 + 0x68]
	0x01DD9BCC STP X24, X23, [X31 + 0x70]
	0x01DD9BD0 STP X22, X21, [X31 + 0x80]
	0x01DD9BD4 STP X20, X19, [X31 + 0x90]
	0x01DD9BD8 ADRP X20, 0x25FF000
	0x01DD9BDC LDRB W8, [X20 + 0xC55]
	0x01DD9BE0 MOV X19, X0
	0x01DD9BE4 TBNZ X8, 0x0, 0x1DD9C20
	0x01DD9BE8 ADRP X0, 0x231F000
	0x01DD9BEC LDR X0, [X0 + 0x8F0]
	0x01DD9BF0 BL 0x1C16CF4
	0x01DD9BF4 ADRP X0, 0x231F000
	0x01DD9BF8 LDR X0, [X0 + 0x8F8]
	0x01DD9BFC BL 0x1C16CF4
	0x01DD9C00 ADRP X0, 0x231F000
	0x01DD9C04 LDR X0, [X0 + 0xA50]
	0x01DD9C08 BL 0x1C16CF4
	0x01DD9C0C ADRP X0, 0x231F000
	0x01DD9C10 LDR X0, [X0 + 0xA40]
	0x01DD9C14 BL 0x1C16CF4
	0x01DD9C18 MOVZ W8, 0x1
	0x01DD9C1C STRB W8, [X20 + 0xC55]
	0x01DD9C20 MOV X0, X19
	0x01DD9C24 MOV X1, X31
	0x01DD9C28 STP X31, X31, [X31 + 0x40]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2600000
	007 Move X20, 0x231B000
	008 Move W8, [X21+3149]
	009 Move X20, [X20+1432]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x231D000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move X0, 0x231B000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3149], W8
	024 Move X0, [X20]
	025 Move X20, [X19+48]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {55}
	038 Move X8, 0x231D000
	039 Move X8, [X8+1448]
	040 Move W19, [X19+76]
	041 Move X0, [X8]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move W0, W19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 Move X21, [X31+24]
	051 Move X1, X31
	052 Move V8, [X31+48]
	053 Call LeanTween.cancel, X0
	054 Return 
	055 Move X0, [X19+48]
	056 Compare X0, 0
	057 JumpIfEqual {78}
	058 Move X8, -19849216
	059 Move X9, -19853312
	060 Move V2, [X8+868]
	061 Move V3, [X9+4080]
	062 Move S1, 1
	063 NotImplemented "Instruction FMIN not yet implemented."
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X30, [X31+16]
	067 Move X21, [X31+24]
	068 Multiply S1, S1, S2
	069 NotImplemented "Instruction FCMP not yet implemented."
	070 Add S1, S1, S3
	071 Move S0, W31
	072 NotImplemented "Instruction FCSEL not yet implemented."
	073 Move S1, W31
	074 Move X1, X31
	075 Move V8, [X31+48]
	076 Call Transform.set_localPosition, X0, X1
	077 Return 
	078 Call 0x1C17F20

Method: System.Void <PlayButtonPressedAnimation>b__16_3()

Disassembly:
	0x01DD9C2C STR X31, [X31 + 0x50]
	0x01DD9C30 STP X31, X31, [X31 + 0x20]
	0x01DD9C34 STR X31, [X31 + 0x30]
	0x01DD9C38 BL 0x1E73D04
	0x01DD9C3C LDR X0, [X19 + 0x40]
	0x01DD9C40 CBZ X0, 0x1DD9EA8
	0x01DD9C44 LDRB W8, [X0 + 0x60]
	0x01DD9C48 TBNZ X8, 0x1, 0x1DD9EA8
	0x01DD9C4C MOV X1, X31
	0x01DD9C50 BL 0x1E93668
	0x01DD9C54 TBZ X0, 0x0, 0x1DD9EA8
	0x01DD9C58 MOV X0, X19
	0x01DD9C5C BL 0x1DD9260
	0x01DD9C60 STR W0, [X31 + 0x58]
	0x01DD9C64 LDR X1, [X19 + 0x38]
	0x01DD9C68 ADD X0, X31, 0x58
	0x01DD9C6C MOV X2, X31
	0x01DD9C70 BL 0x1E91B84
	0x01DD9C74 TBZ X0, 0x0, 0x1DD9C94
	0x01DD9C78 MOV X0, X31
	0x01DD9C7C BL 0x1E91B08
	0x01DD9C80 AND X1, X0, 0x0
	0x01DD9C84 MOV X0, X19
	0x01DD9C88 BL 0x1DD92C0
	0x01DD9C8C MOV X0, X19
	0x01DD9C90 BL 0x1DD9EC8
	0x01DD9C94 MOV X0, X19
	0x01DD9C98 BL 0x1DD91A0
	0x01DD9C9C STR W0, [X31 + 0x58]
	0x01DD9CA0 LDR X1, [X19 + 0x38]
	0x01DD9CA4 ADD X0, X31, 0x58
	0x01DD9CA8 MOV X2, X31
	0x01DD9CAC BL 0x1E91B84
	0x01DD9CB0 TBZ X0, 0x0, 0x1DD9CD0
	0x01DD9CB4 MOV X0, X19
	0x01DD9CB8 BL 0x1DDA270
	0x01DD9CBC MOV X0, X31
	0x01DD9CC0 BL 0x1E91B08
	0x01DD9CC4 AND X1, X0, 0x0
	0x01DD9CC8 MOV X0, X19
	0x01DD9CCC BL 0x1DD9200
	0x01DD9CD0 MOV X0, X19
	0x01DD9CD4 BL 0x1DD9320
	0x01DD9CD8 STR W0, [X31 + 0x58]
	0x01DD9CDC LDR X1, [X19 + 0x38]
	0x01DD9CE0 ADD X0, X31, 0x58
	0x01DD9CE4 MOV X2, X31
	0x01DD9CE8 BL 0x1E91B84
	0x01DD9CEC TBZ X0, 0x0, 0x1DD9D0C
	0x01DD9CF0 MOV X0, X19
	0x01DD9CF4 BL 0x1DDA300
	0x01DD9CF8 MOV X0, X31
	0x01DD9CFC BL 0x1E91B08
	0x01DD9D00 AND X1, X0, 0x0
	0x01DD9D04 MOV X0, X19
	0x01DD9D08 BL 0x1DD9380

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2600000
	006 Move W8, [X20+3150]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2320000
	013 Move X0, [X0+2328]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3150], W8
	017 Move X0, [X19+56]
	018 Compare X0, 0
	019 JumpIfEqual {70}
	020 Move X21, 0x2320000
	021 Move X21, [X21+2328]
	022 Move X1, X31
	023 Call Renderer.get_material, X0
	024 Move X8, [X21]
	025 Move X20, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Compare X20, 0
	032 JumpIfEqual {70}
	033 Move X8, [X21]
	034 Move S0, W31
	035 Move S1, W31
	036 Move S2, W31
	037 Move X8, [X8+184]
	038 Move S3, 1
	039 Move X0, X20
	040 Move X2, X31
	041 Move W1, [X8]
	042 Call Material.SetColor, X0, X1, X2
	043 Move X20, 0x2600000
	044 Move W8, [X20+1923]
	045 Move X19, [X19+48]
	046 Compare W8, 0
	047 JumpIfNotEqual {53}
	048 Move X0, 0x231B000
	049 Move X0, [X0+1440]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X20+1923], W8
	053 Compare X19, 0
	054 JumpIfEqual {70}
	055 Move X8, 0x231B000
	056 Move X8, [X8+1440]
	057 Move X0, X19
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X1, X31
	061 Move X8, [X8]
	062 Move X8, [X8+184]
	063 Move S1, [X8+4]
	064 Move S2, [X8+8]
	065 Move V0, [X8]
	066 Move X30, [X31+32]
	067 Move X21, [X31+40]
	068 Call Transform.set_localPosition, X0, X1
	069 Return 
	070 Call 0x1C17F20

