Type: AnimalCompany.Explosion

Method: UnityEngine.Vector3 get__capsulePoint0()

Disassembly:
	0x01DD6D78 LDP X22, X21, [X31 + 0x20]
	0x01DD6D7C LDP X24, X23, [X31 + 0x10]
	0x01DD6D80 LDR X30, [X31], #0x40
	0x01DD6D84 RET
	0x01DD6D88 BL 0x1C16F20
	0x01DD6D8C STP X30, X23, [X31 - 0x30]!
	0x01DD6D90 STP X22, X21, [X31 + 0x10]
	0x01DD6D94 STP X20, X19, [X31 + 0x20]
	0x01DD6D98 ADRP X20, 0x2602000
	0x01DD6D9C ADRP X21, 0x2322000
	0x01DD6DA0 LDRB W8, [X20 + 0xC3D]
	0x01DD6DA4 LDR X21, [X21 + 0x868]
	0x01DD6DA8 MOV X19, X0
	0x01DD6DAC TBNZ X8, 0x0, 0x1DD6DDC
	0x01DD6DB0 ADRP X0, 0x2322000
	0x01DD6DB4 LDR X0, [X0 + 0x870]
	0x01DD6DB8 BL 0x1C16CF4
	0x01DD6DBC ADRP X0, 0x2322000
	0x01DD6DC0 LDR X0, [X0 + 0x878]
	0x01DD6DC4 BL 0x1C16CF4
	0x01DD6DC8 ADRP X0, 0x2322000
	0x01DD6DCC LDR X0, [X0 + 0x868]
	0x01DD6DD0 BL 0x1C16CF4
	0x01DD6DD4 MOVZ W8, 0x1
	0x01DD6DD8 STRB W8, [X20 + 0xC3D]
	0x01DD6DDC LDR X8, [X21]
	0x01DD6DE0 LDR X8, [X8 + 0xB8]
	0x01DD6DE4 STR X31, [X8]
	0x01DD6DE8 LDR X22, [X19 + 0x28]
	0x01DD6DEC CBZ X22, 0x1DD6E80
	0x01DD6DF0 ADRP X23, 0x2322000
	0x01DD6DF4 LDR X23, [X23 + 0x870]
	0x01DD6DF8 ADRP X21, 0x2322000
	0x01DD6DFC LDR X20, [X22 + 0x20]
	0x01DD6E00 LDR X0, [X23]
	0x01DD6E04 LDR X21, [X21 + 0x878]
	0x01DD6E08 BL 0x1C16F10
	0x01DD6E0C LDR X2, [X21]
	0x01DD6E10 MOV X1, X19
	0x01DD6E14 MOV X3, X31
	0x01DD6E18 MOV X21, X0
	0x01DD6E1C BL 0x2A6B948
	0x01DD6E20 MOV X0, X20
	0x01DD6E24 MOV X1, X21
	0x01DD6E28 MOV X2, X31
	0x01DD6E2C BL 0x33C0FDC
	0x01DD6E30 CBZ X0, 0x1DD6E6C
	0x01DD6E34 LDR X20, [X23]
	0x01DD6E38 MOV X19, X0
	0x01DD6E3C MOV X1, X20

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D10
	003 Move [X31+40], D9
	004 Move [X31+48], D8
	005 Move [X31+56], X30
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X1, X31
	009 Move X19, X0
	010 Call Component.get_transform, X0
	011 Compare X0, 0
	012 JumpIfEqual {58}
	013 Move X1, X31
	014 Call Transform.get_position, X0
	015 Move X20, 0x2603000
	016 Move V9, [X19+152]
	017 Move W8, [X20+1926]
	018 Move V10, [X19+160]
	019 Move V8, V2
	020 Compare W8, 0
	021 JumpIfNotEqual {31}
	022 Move X0, 0x231E000
	023 Move X0, [X0+1440]
	024 Move [X31], V1
	025 Move [X31+8], V0
	026 Call 0x1C17CF4
	027 Move V1, [X31]
	028 Move V0, [X31+16]
	029 Move W8, 1
	030 Move [X20+1926], W8
	031 Move X8, 0x231E000
	032 Move X8, [X8+1440]
	033 Move V5, [X19+148]
	034 Move V0.S[1], V1.S[0]
	035 Add S6, S8, S10
	036 Move X8, [X8]
	037 Add V4, V0, V9
	038 Move X20, [X31+64]
	039 Move X19, [X31+72]
	040 Move X30, [X31+56]
	041 Move X8, [X8+184]
	042 Move D9, [X31+40]
	043 Move D8, [X31+48]
	044 Move V10, [X31+32]
	045 Move V2, [X8+24]
	046 Move V3, [X8+32]
	047 NotImplemented "Instruction INVALID not yet implemented."
	048 Multiply S0, S3, S5
	049 NotImplemented "Instruction MOVI not yet implemented."
	050 NotImplemented "Instruction INVALID not yet implemented."
	051 Move S3, 0.5
	052 Multiply S3, S0, S3
	053 Add V0, V4, V2
	054 Add S2, S6, S3
	055 Move S1, V0.S[1]
	056 Add X31, X31, 80
	057 Return X0
	058 Call 0x1C17F20

Method: UnityEngine.Vector3 get__capsulePoint1()

Disassembly:
	0x01DD6E40 BL 0x1C16E00
	0x01DD6E44 CBZ X0, 0x1DD6E60
	0x01DD6E48 STR X0, [X22 + 0x20]
	0x01DD6E4C LDR X20, [X23]
	0x01DD6E50 MOV X0, X19
	0x01DD6E54 MOV X1, X20
	0x01DD6E58 BL 0x1C16E00
	0x01DD6E5C CBNZ X0, 0x1DD6E70
	0x01DD6E60 MOV X0, X19
	0x01DD6E64 MOV X1, X20
	0x01DD6E68 BL 0x1C171E0
	0x01DD6E6C STR X31, [X22 + 0x20]
	0x01DD6E70 LDP X20, X19, [X31 + 0x20]
	0x01DD6E74 LDP X22, X21, [X31 + 0x10]
	0x01DD6E78 LDP X30, X23, [X31], #0x30
	0x01DD6E7C RET
	0x01DD6E80 BL 0x1C16F20
	0x01DD6E84 STR X30, [X31 - 0x10]!
	0x01DD6E88 CBZ X1, 0x1DD6EA8
	0x01DD6E8C LDR X8, [X0 + 0x30]
	0x01DD6E90 MOVZ W2, 0x1
	0x01DD6E94 MOV X0, X1
	0x01DD6E98 MOV X3, X31
	0x01DD6E9C MOV X1, X8
	0x01DD6EA0 LDR X30, [X31], #0x10
	0x01DD6EA4 B 0x1DC24D8
	0x01DD6EA8 BL 0x1C16F20
	0x01DD6EAC STP X30, X21, [X31 - 0x20]!
	0x01DD6EB0 STP X20, X19, [X31 + 0x10]
	0x01DD6EB4 ADRP X21, 0x2602000
	0x01DD6EB8 ADRP X20, 0x231D000
	0x01DD6EBC LDRB W8, [X21 + 0xC3E]
	0x01DD6EC0 LDR X20, [X20 + 0x648]
	0x01DD6EC4 MOV W19, W0
	0x01DD6EC8 TBNZ X8, 0x0, 0x1DD6EEC
	0x01DD6ECC ADRP X0, 0x231D000
	0x01DD6ED0 LDR X0, [X0 + 0x648]
	0x01DD6ED4 BL 0x1C16CF4
	0x01DD6ED8 ADRP X0, 0x231F000
	0x01DD6EDC LDR X0, [X0 + 0x410]
	0x01DD6EE0 BL 0x1C16CF4
	0x01DD6EE4 MOVZ W8, 0x1
	0x01DD6EE8 STRB W8, [X21 + 0xC3E]
	0x01DD6EEC LDR X0, [X20]
	0x01DD6EF0 LDR W8, [X0 + 0xE0]
	0x01DD6EF4 CBNZ W8, 0x1DD6EFC
	0x01DD6EF8 BL 0x1C16DFC
	0x01DD6EFC ADRP X21, 0x2602000
	0x01DD6F00 LDRB W8, [X21 + 0x787]
	0x01DD6F04 CBNZ W8, 0x1DD6F1C

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D10
	003 Move [X31+40], D9
	004 Move [X31+48], D8
	005 Move [X31+56], X30
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X1, X31
	009 Move X19, X0
	010 Call Component.get_transform, X0
	011 Compare X0, 0
	012 JumpIfEqual {58}
	013 Move X1, X31
	014 Call Transform.get_position, X0
	015 Move X20, 0x2603000
	016 Move V9, [X19+152]
	017 Move W8, [X20+1926]
	018 Move V10, [X19+160]
	019 Move V8, V2
	020 Compare W8, 0
	021 JumpIfNotEqual {31}
	022 Move X0, 0x231E000
	023 Move X0, [X0+1440]
	024 Move [X31], V1
	025 Move [X31+8], V0
	026 Call 0x1C17CF4
	027 Move V1, [X31]
	028 Move V0, [X31+16]
	029 Move W8, 1
	030 Move [X20+1926], W8
	031 Move X8, 0x231E000
	032 Move X8, [X8+1440]
	033 Move V5, [X19+148]
	034 Move V0.S[1], V1.S[0]
	035 Add S6, S8, S10
	036 Move X8, [X8]
	037 Add V4, V0, V9
	038 Move X20, [X31+64]
	039 Move X19, [X31+72]
	040 Move X30, [X31+56]
	041 Move X8, [X8+184]
	042 Move D9, [X31+40]
	043 Move D8, [X31+48]
	044 Move V10, [X31+32]
	045 Move V2, [X8+24]
	046 Move V3, [X8+32]
	047 NotImplemented "Instruction INVALID not yet implemented."
	048 Multiply S0, S3, S5
	049 NotImplemented "Instruction MOVI not yet implemented."
	050 NotImplemented "Instruction INVALID not yet implemented."
	051 Move S3, -0.5
	052 Multiply S3, S0, S3
	053 Add V0, V4, V2
	054 Add S2, S6, S3
	055 Move S1, V0.S[1]
	056 Add X31, X31, 80
	057 Return X0
	058 Call 0x1C17F20

Method: System.Boolean get_isPVPSource()

Disassembly:
	0x01DD6F08 ADRP X0, 0x231D000
	0x01DD6F0C LDR X0, [X0 + 0x648]

ISIL:
	001 Move W0, [X0+208]
	002 Return X0

Method: Fusion.TickTimer get_life()

Disassembly:
	0x01DD6F10 BL 0x1C16CF4
	0x01DD6F14 MOVZ W8, 0x1
	0x01DD6F18 STRB W8, [X21 + 0x787]
	0x01DD6F1C LDR X0, [X20]
	0x01DD6F20 LDR W8, [X0 + 0xE0]
	0x01DD6F24 CBNZ W8, 0x1DD6F30
	0x01DD6F28 BL 0x1C16DFC
	0x01DD6F2C LDR X0, [X20]
	0x01DD6F30 LDR X8, [X0 + 0xB8]
	0x01DD6F34 LDR X8, [X8]
	0x01DD6F38 CBZ X8, 0x1DD6F88
	0x01DD6F3C LDR X8, [X8 + 0xB8]
	0x01DD6F40 CBZ X8, 0x1DD6F88
	0x01DD6F44 LDR X8, [X8 + 0x80]
	0x01DD6F48 CBZ X8, 0x1DD6F88
	0x01DD6F4C ADRP X9, 0x231F000
	0x01DD6F50 LDR X9, [X9 + 0x410]
	0x01DD6F54 LDR X0, [X8 + 0x48]
	0x01DD6F58 LDR X1, [X9]
	0x01DD6F5C BL 0x26581F4
	0x01DD6F60 MOV W20, W0
	0x01DD6F64 CMP W0, W19
	0x01DD6F68 B.LT 0x1DD6F74
	0x01DD6F6C MOV W0, W19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x231E000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2323000
	016 Move X0, [X0+2080]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2323000
	023 Move X0, [X0+2088]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_life(Fusion.TickTimer value)

Disassembly:
	0x01DD6F70 BL 0x1DD6F8C
	0x01DD6F74 CMP W20, W19
	0x01DD6F78 LDP X20, X19, [X31 + 0x10]
	0x01DD6F7C CSET W0, GE
	0x01DD6F80 LDP X30, X21, [X31], #0x20
	0x01DD6F84 RET
	0x01DD6F88 BL 0x1C16F20
	0x01DD6F8C SUB X31, X31, 0x60
	0x01DD6F90 STP X30, X25, [X31 + 0x20]
	0x01DD6F94 STP X24, X23, [X31 + 0x30]
	0x01DD6F98 STP X22, X21, [X31 + 0x40]
	0x01DD6F9C STP X20, X19, [X31 + 0x50]
	0x01DD6FA0 ADRP X20, 0x2602000
	0x01DD6FA4 LDRB W8, [X20 + 0xC40]
	0x01DD6FA8 MOV W19, W0
	0x01DD6FAC TBNZ X8, 0x0, 0x1DD7030
	0x01DD6FB0 ADRP X0, 0x231D000
	0x01DD6FB4 LDR X0, [X0 + 0xB50]
	0x01DD6FB8 BL 0x1C16CF4
	0x01DD6FBC ADRP X0, 0x231D000
	0x01DD6FC0 LDR X0, [X0 + 0x648]
	0x01DD6FC4 BL 0x1C16CF4
	0x01DD6FC8 ADRP X0, 0x231D000
	0x01DD6FCC LDR X0, [X0 + 0xAB0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x231E000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2323000
	016 Move X0, [X0+2080]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2323000
	023 Move X0, [X0+2096]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void Spawned()

Disassembly:
	0x01DD6FD0 BL 0x1C16CF4
	0x01DD6FD4 ADRP X0, 0x231D000
	0x01DD6FD8 LDR X0, [X0 + 0x758]
	0x01DD6FDC BL 0x1C16CF4
	0x01DD6FE0 ADRP X0, 0x2322000
	0x01DD6FE4 LDR X0, [X0 + 0x890]
	0x01DD6FE8 BL 0x1C16CF4
	0x01DD6FEC ADRP X0, 0x231F000
	0x01DD6FF0 LDR X0, [X0 + 0x410]
	0x01DD6FF4 BL 0x1C16CF4
	0x01DD6FF8 ADRP X0, 0x2321000
	0x01DD6FFC LDR X0, [X0 + 0x160]
	0x01DD7000 BL 0x1C16CF4
	0x01DD7004 ADRP X0, 0x2320000
	0x01DD7008 LDR X0, [X0 + 0x168]
	0x01DD700C BL 0x1C16CF4
	0x01DD7010 ADRP X0, 0x2321000
	0x01DD7014 LDR X0, [X0 + 0x898]
	0x01DD7018 BL 0x1C16CF4
	0x01DD701C ADRP X0, 0x2321000
	0x01DD7020 LDR X0, [X0 + 0x8A0]
	0x01DD7024 BL 0x1C16CF4
	0x01DD7028 MOVZ W8, 0x1
	0x01DD702C STRB W8, [X20 + 0xC40]
	0x01DD7030 TBNZ X19, 0x1F, 0x1DD71C4
	0x01DD7034 ADRP X8, 0x231C000
	0x01DD7038 LDR X8, [X8 + 0xAB0]
	0x01DD703C ADRP X21, 0x231C000
	0x01DD7040 MOVZ W1, 0x1
	0x01DD7044 LDR X0, [X8]
	0x01DD7048 LDR X21, [X21 + 0x648]
	0x01DD704C BL 0x1C16D6C
	0x01DD7050 LDR X8, [X21]
	0x01DD7054 MOV X20, X0
	0x01DD7058 LDR W9, [X8 + 0xE0]
	0x01DD705C CBNZ W9, 0x1DD7068
	0x01DD7060 MOV X0, X8
	0x01DD7064 BL 0x1C16DFC
	0x01DD7068 ADRP X22, 0x2601000
	0x01DD706C LDRB W8, [X22 + 0x787]
	0x01DD7070 CBNZ W8, 0x1DD7088
	0x01DD7074 ADRP X0, 0x231C000
	0x01DD7078 LDR X0, [X0 + 0x648]
	0x01DD707C BL 0x1C16CF4
	0x01DD7080 MOVZ W8, 0x1
	0x01DD7084 STRB W8, [X22 + 0x787]
	0x01DD7088 LDR X0, [X21]
	0x01DD708C LDR W8, [X0 + 0xE0]
	0x01DD7090 CBNZ W8, 0x1DD709C
	0x01DD7094 BL 0x1C16DFC
	0x01DD7098 LDR X0, [X21]
	0x01DD709C LDR X8, [X0 + 0xB8]
	0x01DD70A0 LDR X8, [X8]
	0x01DD70A4 CBZ X8, 0x1DD71DC
	0x01DD70A8 LDR X8, [X8 + 0xB8]
	0x01DD70AC CBZ X8, 0x1DD71DC
	0x01DD70B0 LDR X8, [X8 + 0x80]
	0x01DD70B4 CBZ X8, 0x1DD71DC
	0x01DD70B8 ADRP X9, 0x231E000
	0x01DD70BC LDR X9, [X9 + 0x410]
	0x01DD70C0 LDR X0, [X8 + 0x48]
	0x01DD70C4 ADRP X21, 0x2321000
	0x01DD70C8 LDR X1, [X9]
	0x01DD70CC LDR X21, [X21 + 0x890]
	0x01DD70D0 BL 0x26581F4
	0x01DD70D4 LDR X8, [X21]
	0x01DD70D8 MOV W22, W0
	0x01DD70DC MOV X0, X8
	0x01DD70E0 BL 0x1C16F10
	0x01DD70E4 SUB W1, W22, W19
	0x01DD70E8 MOV X2, X31
	0x01DD70EC MOV X21, X0
	0x01DD70F0 BL 0x1D4CEA0
	0x01DD70F4 CBZ X20, 0x1DD71DC
	0x01DD70F8 CBZ X21, 0x1DD7110
	0x01DD70FC LDR X8, [X20]
	0x01DD7100 MOV X0, X21
	0x01DD7104 LDR X1, [X8 + 0x40]
	0x01DD7108 BL 0x1C16E00
	0x01DD710C CBZ X0, 0x1DD71E4
	0x01DD7110 LDR W8, [X20 + 0x18]
	0x01DD7114 CBZ W8, 0x1DD71E0
	0x01DD7118 ADRP X22, 0x2320000
	0x01DD711C ADRP X23, 0x231C000
	0x01DD7120 ADRP X24, 0x2321000
	0x01DD7124 ADRP X25, 0x2320000
	0x01DD7128 LDR X22, [X22 + 0x160]
	0x01DD712C LDR X23, [X23 + 0x758]
	0x01DD7130 LDR X24, [X24 + 0x8A0]
	0x01DD7134 LDR X25, [X25 + 0x168]
	0x01DD7138 MOV X0, X20
	0x01DD713C MOV X1, X31
	0x01DD7140 STR X21, [X20 + 0x20]
	0x01DD7144 BL 0x1D351C4
	0x01DD7148 LDR X0, [X22]
	0x01DD714C MOVZ W1, 0x1
	0x01DD7150 BL 0x1C16D6C
	0x01DD7154 MOV X20, X0
	0x01DD7158 LDR X0, [X23]
	0x01DD715C ADD X1, X31, 0x1C
	0x01DD7160 STR W19, [X31 + 0x1C]
	0x01DD7164 BL 0x1C16E04
	0x01DD7168 LDR X1, [X24]
	0x01DD716C LDR X3, [X25]
	0x01DD7170 MOV X2, X0
	0x01DD7174 ADD X0, X31, 0x0
	0x01DD7178 STP X31, X31, [X31]
	0x01DD717C BL 0x27ABC80
	0x01DD7180 CBZ X20, 0x1DD71DC
	0x01DD7184 LDR W8, [X20 + 0x18]
	0x01DD7188 CBZ W8, 0x1DD71E0
	0x01DD718C LDR V0, [X31]
	0x01DD7190 ADRP X8, 0x231C000
	0x01DD7194 LDR X8, [X8 + 0xB50]
	0x01DD7198 ADRP X19, 0x2321000
	0x01DD719C STR V0, [X20 + 0x2]
	0x01DD71A0 LDR X0, [X8]
	0x01DD71A4 LDR W8, [X0 + 0xE0]
	0x01DD71A8 LDR X19, [X19 + 0x898]
	0x01DD71AC CBNZ W8, 0x1DD71B4
	0x01DD71B0 BL 0x1C16DFC
	0x01DD71B4 LDR X0, [X19]
	0x01DD71B8 MOV X1, X20
	0x01DD71BC MOV X2, X31
	0x01DD71C0 BL 0x1DD3B5C
	0x01DD71C4 LDP X20, X19, [X31 + 0x50]
	0x01DD71C8 LDP X22, X21, [X31 + 0x40]
	0x01DD71CC LDP X24, X23, [X31 + 0x30]
	0x01DD71D0 LDP X30, X25, [X31 + 0x20]
	0x01DD71D4 ADD X31, X31, 0x60
	0x01DD71D8 RET
	0x01DD71DC BL 0x1C16F20
	0x01DD71E0 BL 0x1C16F28
	0x01DD71E4 BL 0x1C16F44
	0x01DD71E8 MOV X1, X31
	0x01DD71EC BL 0x1C16DEC
	0x01DD71F0 SUB X31, X31, 0x60
	0x01DD71F4 STP X30, X25, [X31 + 0x20]
	0x01DD71F8 STP X24, X23, [X31 + 0x30]
	0x01DD71FC STP X22, X21, [X31 + 0x40]
	0x01DD7200 STP X20, X19, [X31 + 0x50]
	0x01DD7204 ADRP X20, 0x2601000
	0x01DD7208 LDRB W8, [X20 + 0xC3F]
	0x01DD720C MOV W19, W0
	0x01DD7210 TBNZ X8, 0x0, 0x1DD7294
	0x01DD7214 ADRP X0, 0x231C000
	0x01DD7218 LDR X0, [X0 + 0xB50]
	0x01DD721C BL 0x1C16CF4
	0x01DD7220 ADRP X0, 0x231C000
	0x01DD7224 LDR X0, [X0 + 0x648]
	0x01DD7228 BL 0x1C16CF4
	0x01DD722C ADRP X0, 0x231C000
	0x01DD7230 LDR X0, [X0 + 0xAB0]
	0x01DD7234 BL 0x1C16CF4
	0x01DD7238 ADRP X0, 0x231C000
	0x01DD723C LDR X0, [X0 + 0x758]
	0x01DD7240 BL 0x1C16CF4
	0x01DD7244 ADRP X0, 0x2321000
	0x01DD7248 LDR X0, [X0 + 0x890]
	0x01DD724C BL 0x1C16CF4
	0x01DD7250 ADRP X0, 0x231E000
	0x01DD7254 LDR X0, [X0 + 0x410]
	0x01DD7258 BL 0x1C16CF4
	0x01DD725C ADRP X0, 0x2320000
	0x01DD7260 LDR X0, [X0 + 0x160]
	0x01DD7264 BL 0x1C16CF4
	0x01DD7268 ADRP X0, 0x2320000
	0x01DD726C LDR X0, [X0 + 0x168]
	0x01DD7270 BL 0x1C16CF4
	0x01DD7274 ADRP X0, 0x2321000
	0x01DD7278 LDR X0, [X0 + 0x8A0]
	0x01DD727C BL 0x1C16CF4
	0x01DD7280 ADRP X0, 0x2321000
	0x01DD7284 LDR X0, [X0 + 0x8A8]
	0x01DD7288 BL 0x1C16CF4
	0x01DD728C MOVZ W8, 0x1
	0x01DD7290 STRB W8, [X20 + 0xC3F]
	0x01DD7294 TBNZ X19, 0x1F, 0x1DD7428
	0x01DD7298 ADRP X8, 0x231C000
	0x01DD729C LDR X8, [X8 + 0xAB0]
	0x01DD72A0 ADRP X21, 0x231C000
	0x01DD72A4 MOVZ W1, 0x1
	0x01DD72A8 LDR X0, [X8]
	0x01DD72AC LDR X21, [X21 + 0x648]
	0x01DD72B0 BL 0x1C16D6C
	0x01DD72B4 LDR X8, [X21]
	0x01DD72B8 MOV X20, X0
	0x01DD72BC LDR W9, [X8 + 0xE0]
	0x01DD72C0 CBNZ W9, 0x1DD72CC
	0x01DD72C4 MOV X0, X8
	0x01DD72C8 BL 0x1C16DFC
	0x01DD72CC ADRP X22, 0x2601000
	0x01DD72D0 LDRB W8, [X22 + 0x787]
	0x01DD72D4 CBNZ W8, 0x1DD72EC
	0x01DD72D8 ADRP X0, 0x231C000
	0x01DD72DC LDR X0, [X0 + 0x648]
	0x01DD72E0 BL 0x1C16CF4
	0x01DD72E4 MOVZ W8, 0x1
	0x01DD72E8 STRB W8, [X22 + 0x787]
	0x01DD72EC LDR X0, [X21]
	0x01DD72F0 LDR W8, [X0 + 0xE0]
	0x01DD72F4 CBNZ W8, 0x1DD7300
	0x01DD72F8 BL 0x1C16DFC
	0x01DD72FC LDR X0, [X21]
	0x01DD7300 LDR X8, [X0 + 0xB8]
	0x01DD7304 LDR X8, [X8]
	0x01DD7308 CBZ X8, 0x1DD7440
	0x01DD730C LDR X8, [X8 + 0xB8]
	0x01DD7310 CBZ X8, 0x1DD7440
	0x01DD7314 LDR X8, [X8 + 0x80]
	0x01DD7318 CBZ X8, 0x1DD7440
	0x01DD731C ADRP X9, 0x231E000
	0x01DD7320 LDR X9, [X9 + 0x410]
	0x01DD7324 LDR X0, [X8 + 0x48]
	0x01DD7328 ADRP X21, 0x2321000
	0x01DD732C LDR X1, [X9]
	0x01DD7330 LDR X21, [X21 + 0x890]
	0x01DD7334 BL 0x26581F4
	0x01DD7338 LDR X8, [X21]
	0x01DD733C MOV W22, W0
	0x01DD7340 MOV X0, X8
	0x01DD7344 BL 0x1C16F10
	0x01DD7348 ADD W1, W22, W19
	0x01DD734C MOV X2, X31
	0x01DD7350 MOV X21, X0
	0x01DD7354 BL 0x1D4CEA0
	0x01DD7358 CBZ X20, 0x1DD7440
	0x01DD735C CBZ X21, 0x1DD7374
	0x01DD7360 LDR X8, [X20]
	0x01DD7364 MOV X0, X21
	0x01DD7368 LDR X1, [X8 + 0x40]
	0x01DD736C BL 0x1C16E00
	0x01DD7370 CBZ X0, 0x1DD7448
	0x01DD7374 LDR W8, [X20 + 0x18]
	0x01DD7378 CBZ W8, 0x1DD7444
	0x01DD737C ADRP X22, 0x2320000
	0x01DD7380 ADRP X23, 0x231C000
	0x01DD7384 ADRP X24, 0x2321000
	0x01DD7388 ADRP X25, 0x2320000
	0x01DD738C LDR X22, [X22 + 0x160]
	0x01DD7390 LDR X23, [X23 + 0x758]
	0x01DD7394 LDR X24, [X24 + 0x8A0]
	0x01DD7398 LDR X25, [X25 + 0x168]
	0x01DD739C MOV X0, X20
	0x01DD73A0 MOV X1, X31
	0x01DD73A4 STR X21, [X20 + 0x20]
	0x01DD73A8 BL 0x1D351C4
	0x01DD73AC LDR X0, [X22]
	0x01DD73B0 MOVZ W1, 0x1
	0x01DD73B4 BL 0x1C16D6C
	0x01DD73B8 MOV X20, X0
	0x01DD73BC LDR X0, [X23]
	0x01DD73C0 ADD X1, X31, 0x1C
	0x01DD73C4 STR W19, [X31 + 0x1C]
	0x01DD73C8 BL 0x1C16E04
	0x01DD73CC LDR X1, [X24]
	0x01DD73D0 LDR X3, [X25]
	0x01DD73D4 MOV X2, X0
	0x01DD73D8 ADD X0, X31, 0x0
	0x01DD73DC STP X31, X31, [X31]
	0x01DD73E0 BL 0x27ABC80
	0x01DD73E4 CBZ X20, 0x1DD7440
	0x01DD73E8 LDR W8, [X20 + 0x18]
	0x01DD73EC CBZ W8, 0x1DD7444
	0x01DD73F0 LDR V0, [X31]
	0x01DD73F4 ADRP X8, 0x231C000
	0x01DD73F8 LDR X8, [X8 + 0xB50]
	0x01DD73FC ADRP X19, 0x2321000
	0x01DD7400 STR V0, [X20 + 0x2]
	0x01DD7404 LDR X0, [X8]
	0x01DD7408 LDR W8, [X0 + 0xE0]
	0x01DD740C LDR X19, [X19 + 0x8A8]
	0x01DD7410 CBNZ W8, 0x1DD7418
	0x01DD7414 BL 0x1C16DFC
	0x01DD7418 LDR X0, [X19]
	0x01DD741C MOV X1, X20
	0x01DD7420 MOV X2, X31
	0x01DD7424 BL 0x1DD3B5C
	0x01DD7428 LDP X20, X19, [X31 + 0x50]
	0x01DD742C LDP X22, X21, [X31 + 0x40]
	0x01DD7430 LDP X24, X23, [X31 + 0x30]
	0x01DD7434 LDP X30, X25, [X31 + 0x20]
	0x01DD7438 ADD X31, X31, 0x60
	0x01DD743C RET
	0x01DD7440 BL 0x1C16F20
	0x01DD7444 BL 0x1C16F28
	0x01DD7448 BL 0x1C16F44
	0x01DD744C MOV X1, X31
	0x01DD7450 BL 0x1C16DEC
	0x01DD7454 MOV X1, X31
	0x01DD7458 B 0x3C36C30
	0x01DD745C SUB X31, X31, 0x30
	0x01DD7460 STP X30, X21, [X31 + 0x10]
	0x01DD7464 STP X20, X19, [X31 + 0x20]
	0x01DD7468 ADRP X21, 0x2601000
	0x01DD746C LDRB W8, [X21 + 0xC41]
	0x01DD7470 MOV X20, X1
	0x01DD7474 MOV X19, X0
	0x01DD7478 TBNZ X8, 0x0, 0x1DD7490
	0x01DD747C ADRP X0, 0x2321000
	0x01DD7480 LDR X0, [X0 + 0x8B0]
	0x01DD7484 BL 0x1C16CF4
	0x01DD7488 MOVZ W8, 0x1
	0x01DD748C STRB W8, [X21 + 0xC41]
	0x01DD7490 STR X31, [X31 + 0x8]
	0x01DD7494 CBZ X20, 0x1DD7514
	0x01DD7498 MOV X0, X20
	0x01DD749C MOV X1, X31
	0x01DD74A0 BL 0x3C32ECC
	0x01DD74A4 CBZ X0, 0x1DD7514
	0x01DD74A8 MOV X1, X31
	0x01DD74AC BL 0x3C35734
	0x01DD74B0 CMP W0, 0x6
	0x01DD74B4 B.NE 0x1DD7504
	0x01DD74B8 MOV X0, X20
	0x01DD74BC MOV X1, X31
	0x01DD74C0 BL 0x3C32ECC
	0x01DD74C4 CBZ X0, 0x1DD7514
	0x01DD74C8 ADRP X8, 0x2321000
	0x01DD74CC LDR X8, [X8 + 0x8B0]
	0x01DD74D0 ADD X1, X31, 0x8
	0x01DD74D4 LDR X2, [X8]
	0x01DD74D8 BL 0x21E6600
	0x01DD74DC TBZ X0, 0x0, 0x1DD7504
	0x01DD74E0 LDR X8, [X19 + 0x20]
	0x01DD74E4 CBZ X8, 0x1DD7504
	0x01DD74E8 LDR X9, [X31 + 0x8]
	0x01DD74EC CBZ X9, 0x1DD7514
	0x01DD74F0 LDR X1, [X9 + 0x20]
	0x01DD74F4 LDR X9, [X8 + 0x18]
	0x01DD74F8 LDR X0, [X8 + 0x40]
	0x01DD74FC LDR X2, [X8 + 0x28]
	0x01DD7500 BLR X9
	0x01DD7504 LDP X20, X19, [X31 + 0x20]
	0x01DD7508 LDP X30, X21, [X31 + 0x10]
	0x01DD750C ADD X31, X31, 0x30
	0x01DD7510 RET
	0x01DD7514 BL 0x1C16F20
	0x01DD7518 MOV X1, X31
	0x01DD751C B 0x3C36C30
	0x01DD7520 STP X30, X21, [X31 - 0x20]!
	0x01DD7524 STP X20, X19, [X31 + 0x10]
	0x01DD7528 ADRP X20, 0x2601000
	0x01DD752C ADRP X21, 0x2321000
	0x01DD7530 LDRB W8, [X20 + 0xC42]
	0x01DD7534 LDR X21, [X21 + 0x8B8]
	0x01DD7538 MOV X19, X0
	0x01DD753C TBNZ X8, 0x0, 0x1DD7554
	0x01DD7540 ADRP X0, 0x2321000
	0x01DD7544 LDR X0, [X0 + 0x8B8]
	0x01DD7548 BL 0x1C16CF4
	0x01DD754C MOVZ W8, 0x1
	0x01DD7550 STRB W8, [X20 + 0xC42]
	0x01DD7554 LDR X0, [X21]
	0x01DD7558 MOV X1, X31
	0x01DD755C BL 0x3C5CE34
	0x01DD7560 STR X0, [X19 + 0x20]!
	0x01DD7564 STR X1, [X19 + 0x8]
	0x01DD7568 MOV X0, X19
	0x01DD756C LDP X20, X19, [X31 + 0x10]
	0x01DD7570 MOV W1, W31
	0x01DD7574 MOV X2, X31
	0x01DD7578 LDP X30, X21, [X31], #0x20
	0x01DD757C B 0x3C140C0
	0x01DD7580 ADD X0, X0, 0x20
	0x01DD7584 MOVZ W1, 0x1
	0x01DD7588 MOV X2, X31
	0x01DD758C B 0x3C140C0
	0x01DD7590 MOV X1, X31
	0x01DD7594 B 0x3C36C30
	0x01DD7598 STP X30, X23, [X31 - 0x30]!
	0x01DD759C STP X22, X21, [X31 + 0x10]
	0x01DD75A0 STP X20, X19, [X31 + 0x20]
	0x01DD75A4 ADRP X20, 0x2601000
	0x01DD75A8 ADRP X21, 0x2321000
	0x01DD75AC LDRB W8, [X20 + 0xC43]
	0x01DD75B0 LDR X21, [X21 + 0x8C0]
	0x01DD75B4 MOV X19, X0
	0x01DD75B8 TBNZ X8, 0x0, 0x1DD75DC
	0x01DD75BC ADRP X0, 0x2321000
	0x01DD75C0 LDR X0, [X0 + 0x8C0]
	0x01DD75C4 BL 0x1C16CF4
	0x01DD75C8 ADRP X0, 0x231C000
	0x01DD75CC LDR X0, [X0 + 0x598]
	0x01DD75D0 BL 0x1C16CF4
	0x01DD75D4 MOVZ W8, 0x1
	0x01DD75D8 STRB W8, [X20 + 0xC43]
	0x01DD75DC LDR X1, [X21]
	0x01DD75E0 MOV X0, X19
	0x01DD75E4 BL 0x21A453C
	0x01DD75E8 CBZ X0, 0x1DD7678
	0x01DD75EC LDR X8, [X0 + 0x18]
	0x01DD75F0 MOV X19, X0
	0x01DD75F4 CMP W8, 0x1
	0x01DD75F8 B.LT 0x1DD7664
	0x01DD75FC ADRP X22, 0x231C000
	0x01DD7600 LDR X22, [X22 + 0x598]
	0x01DD7604 MOV X21, X31
	0x01DD7608 AND X8, X8, 0x0
	0x01DD760C ADD X23, X19, 0x20
	0x01DD7610 CMP X21, W8, UXTW
	0x01DD7614 B.CS 0x1DD7674
	0x01DD7618 LDR X0, [X22]
	0x01DD761C LDR X20, [X23, X21, LSL #3]
	0x01DD7620 LDR W8, [X0 + 0xE0]
	0x01DD7624 CBNZ W8, 0x1DD762C
	0x01DD7628 BL 0x1C16DFC
	0x01DD762C MOV X0, X20
	0x01DD7630 MOV X1, X31
	0x01DD7634 MOV X2, X31
	0x01DD7638 BL 0x3C354F8
	0x01DD763C TBZ X0, 0x0, 0x1DD7654
	0x01DD7640 CBZ X20, 0x1DD7678
	0x01DD7644 MOVZ W1, 0x1
	0x01DD7648 MOV X0, X20
	0x01DD764C MOV X2, X31
	0x01DD7650 BL 0x3C8FC7C
	0x01DD7654 LDR W8, [X19 + 0x18]
	0x01DD7658 ADD X21, X21, 0x1
	0x01DD765C CMP X21, W8, SXTW
	0x01DD7660 B.LT 0x1DD7610
	0x01DD7664 LDP X20, X19, [X31 + 0x20]
	0x01DD7668 LDP X22, X21, [X31 + 0x10]
	0x01DD766C LDP X30, X23, [X31], #0x30
	0x01DD7670 RET
	0x01DD7674 BL 0x1C16F28
	0x01DD7678 BL 0x1C16F20
	0x01DD767C MOV X1, X31
	0x01DD7680 B 0x3C36C30
	0x01DD7684 STR X30, [X31 - 0x30]!
	0x01DD7688 STP X22, X21, [X31 + 0x10]
	0x01DD768C STP X20, X19, [X31 + 0x20]
	0x01DD7690 MOV X19, X0
	0x01DD7694 BL 0x1DD7718
	0x01DD7698 CBZ X0, 0x1DD7710
	0x01DD769C LDR W8, [X0 + 0x18]
	0x01DD76A0 MOV X20, X0
	0x01DD76A4 CMP W8, 0x1
	0x01DD76A8 B.LT 0x1DD7700
	0x01DD76AC MOV W22, W31
	0x01DD76B0 CMP W22, W8
	0x01DD76B4 B.CS 0x1DD7714
	0x01DD76B8 ADD X8, X20, W22, 0x3, SXTW
	0x01DD76BC LDR X0, [X8 + 0x20]
	0x01DD76C0 CBZ X0, 0x1DD7710
	0x01DD76C4 MOV X1, X31
	0x01DD76C8 BL 0x3C32E90
	0x01DD76CC LDP S0, S1, [X19 + 0x24]
	0x01DD76D0 LDR V2, [X19 + 0x2C]
	0x01DD76D4 MOV X21, X0
	0x01DD76D8 MOV X0, X31
	0x01DD76DC BL 0x3C2A8C4
	0x01DD76E0 CBZ X21, 0x1DD7710
	0x01DD76E4 MOV X0, X21
	0x01DD76E8 MOV X1, X31
	0x01DD76EC BL 0x3C3F7AC
	0x01DD76F0 LDR W8, [X20 + 0x18]
	0x01DD76F4 ADD W22, W22, 0x1
	0x01DD76F8 CMP W22, W8
	0x01DD76FC B.LT 0x1DD76B0
	0x01DD7700 LDP X20, X19, [X31 + 0x20]
	0x01DD7704 LDP X22, X21, [X31 + 0x10]
	0x01DD7708 LDR X30, [X31], #0x30
	0x01DD770C RET
	0x01DD7710 BL 0x1C16F20
	0x01DD7714 BL 0x1C16F28
	0x01DD7718 STP X30, X21, [X31 - 0x20]!
	0x01DD771C STP X20, X19, [X31 + 0x10]
	0x01DD7720 ADRP X20, 0x2601000
	0x01DD7724 ADRP X21, 0x2321000
	0x01DD7728 LDRB W8, [X20 + 0xC45]
	0x01DD772C LDR X21, [X21 + 0x8C8]
	0x01DD7730 MOV X19, X0
	0x01DD7734 TBNZ X8, 0x0, 0x1DD774C
	0x01DD7738 ADRP X0, 0x2321000
	0x01DD773C LDR X0, [X0 + 0x8C8]
	0x01DD7740 BL 0x1C16CF4
	0x01DD7744 MOVZ W8, 0x1
	0x01DD7748 STRB W8, [X20 + 0xC45]
	0x01DD774C LDR X2, [X21]
	0x01DD7750 MOV X0, X19
	0x01DD7754 LDP X20, X19, [X31 + 0x10]
	0x01DD7758 MOVZ W1, 0x1
	0x01DD775C LDP X30, X21, [X31], #0x20
	0x01DD7760 B 0x21A45B8
	0x01DD7764 STR D10, [X31 - 0x50]!
	0x01DD7768 STP D9, D8, [X31 + 0x10]
	0x01DD776C STP X30, X23, [X31 + 0x20]
	0x01DD7770 STP X22, X21, [X31 + 0x30]
	0x01DD7774 STP X20, X19, [X31 + 0x40]
	0x01DD7778 MOV X19, X0
	0x01DD777C BL 0x1DD7718
	0x01DD7780 CBZ X0, 0x1DD7844
	0x01DD7784 LDR W8, [X0 + 0x18]
	0x01DD7788 MOV X20, X0
	0x01DD778C CMP W8, 0x1
	0x01DD7790 B.LT 0x1DD782C
	0x01DD7794 MOV W23, W31
	0x01DD7798 CMP W23, W8
	0x01DD779C B.CS 0x1DD7848
	0x01DD77A0 ADD X8, X20, W23, 0x3, SXTW
	0x01DD77A4 LDR X22, [X8 + 0x20]
	0x01DD77A8 CBZ X22, 0x1DD7844
	0x01DD77AC MOV X0, X22
	0x01DD77B0 MOV X1, X31
	0x01DD77B4 BL 0x3C32E90
	0x01DD77B8 LDP S0, S1, [X19 + 0x30]
	0x01DD77BC LDR V2, [X19 + 0x38]
	0x01DD77C0 MOV X21, X0
	0x01DD77C4 MOV X0, X31
	0x01DD77C8 BL 0x1DC0890
	0x01DD77CC MOV X0, X22
	0x01DD77D0 MOV X1, X31
	0x01DD77D4 MOV V8.16B, V0.16B
	0x01DD77D8 MOV V9.16B, V1.16B
	0x01DD77DC MOV V10.16B, V2.16B
	0x01DD77E0 BL 0x3C32E90
	0x01DD77E4 CBZ X0, 0x1DD7844
	0x01DD77E8 MOV X1, X31
	0x01DD77EC BL 0x3C3F58C
	0x01DD77F0 MOV X0, X31
	0x01DD77F4 BL 0x1DC0890
	0x01DD77F8 FSUB S0, S8, S0
	0x01DD77FC FSUB S1, S9, S1
	0x01DD7800 FSUB S2, S10, S2
	0x01DD7804 MOV X0, X31
	0x01DD7808 BL 0x3C2A8C4
	0x01DD780C CBZ X21, 0x1DD7844
	0x01DD7810 MOV X0, X21
	0x01DD7814 MOV X1, X31
	0x01DD7818 BL 0x3C3F7AC
	0x01DD781C LDR W8, [X20 + 0x18]
	0x01DD7820 ADD W23, W23, 0x1
	0x01DD7824 CMP W23, W8
	0x01DD7828 B.LT 0x1DD7798
	0x01DD782C LDP X20, X19, [X31 + 0x40]
	0x01DD7830 LDP X22, X21, [X31 + 0x30]
	0x01DD7834 LDP X30, X23, [X31 + 0x20]
	0x01DD7838 LDP D9, D8, [X31 + 0x10]
	0x01DD783C LDR V10, [X31], #0x50
	0x01DD7840 RET
	0x01DD7844 BL 0x1C16F20
	0x01DD7848 BL 0x1C16F28
	0x01DD784C STR X30, [X31 - 0x20]!
	0x01DD7850 STP X20, X19, [X31 + 0x10]
	0x01DD7854 BL 0x1DD7718
	0x01DD7858 CBZ X0, 0x1DD78B8
	0x01DD785C LDR W8, [X0 + 0x18]
	0x01DD7860 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X29
	011 Move [X31+120], X30
	012 Move [X31+128], X28
	013 Move [X31+136], X27
	014 Move [X31+144], X26
	015 Move [X31+152], X25
	016 Move [X31+160], X24
	017 Move [X31+168], X23
	018 Move [X31+176], X22
	019 Move [X31+184], X21
	020 Move [X31+192], X20
	021 Move [X31+200], X19
	022 Move X20, 0x2603000
	023 Move W8, [X20+3128]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {61}
	029 Move X0, 0x2320000
	030 Move X0, [X0+3056]
	031 Call 0x1C17CF4
	032 Move X0, 0x231D000
	033 Move X0, [X0+1488]
	034 Call 0x1C17CF4
	035 Move X0, 0x2322000
	036 Move X0, [X0+2104]
	037 Call 0x1C17CF4
	038 Move X0, 0x231D000
	039 Move X0, [X0+1504]
	040 Call 0x1C17CF4
	041 Move X0, 0x2322000
	042 Move X0, [X0+2112]
	043 Call 0x1C17CF4
	044 Move X0, 0x231D000
	045 Move X0, [X0+1512]
	046 Call 0x1C17CF4
	047 Move X0, 0x231D000
	048 Move X0, [X0+1520]
	049 Call 0x1C17CF4
	050 Move X0, 0x2322000
	051 Move X0, [X0+2120]
	052 Call 0x1C17CF4
	053 Move X0, 0x231D000
	054 Move X0, [X0+1432]
	055 Call 0x1C17CF4
	056 Move X0, 0x231D000
	057 Move X0, [X0+1528]
	058 Call 0x1C17CF4
	059 Move W8, 1
	060 Move [X20+3128], W8
	061 Move X0, X19
	062 Move X1, X31
	063 Move [X31+32], X31
	064 Move [X31+40], X31
	065 Call NetworkBehaviour.Spawned, X0
	066 Move X20, 0x2602000
	067 Move W8, [X20+2139]
	068 Move X21, [X19+200]
	069 Compare W8, 0
	070 JumpIfNotEqual {76}
	071 Move X0, 0x231D000
	072 Move X0, [X0+1440]
	073 Call 0x1C17CF4
	074 Move W8, 1
	075 Move [X20+2139], W8
	076 Compare X21, 0
	077 JumpIfEqual {628}
	078 Move X20, 0x231D000
	079 Move X20, [X20+1440]
	080 Move V0, [X19+144]
	081 Move X0, X21
	082 Move X1, X31
	083 Move X8, [X20]
	084 Move X8, [X8+184]
	085 Move S3, [X8+16]
	086 Move S1, [X8+20]
	087 Move V4, [X8+12]
	088 Multiply S2, S0, S1
	089 Multiply S1, S0, S3
	090 Multiply S0, S0, S4
	091 Call Transform.set_localScale, X0, X1
	092 Move X0, [X19+192]
	093 Compare X0, 0
	094 JumpIfEqual {628}
	095 Move X1, X31
	096 Call ParticleSystem.Play, X0
	097 Move X0, [X19+64]
	098 Compare X0, 0
	099 JumpIfEqual {594}
	100 Move W8, [X0+96]
	101 Move TEMP, X8
	102 And TEMP, TEMP, 2
	103 Compare TEMP, 2
	104 JumpIfEqual {594}
	105 Move X1, X31
	106 Call NetworkObject.get_HasStateAuthority, X0
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {594}
	111 Move W8, [X19+136]
	112 Compare W8, 0
	113 JumpIfEqual {147}
	114 Move X0, X19
	115 Call Explosion.get__capsulePoint0, X0
	116 Move X0, X19
	117 Move V8, V0
	118 Move V9, V1
	119 Move V10, V2
	120 Call Explosion.get__capsulePoint1, X0
	121 Move W0, [X19+164]
	122 Move V13, [X19+144]
	123 Move X1, X31
	124 Move V11, V0
	125 Move V12, V1
	126 Move V14, V2
	127 Call LayerMask.op_Implicit, X0
	128 Move X8, 0x231D000
	129 Move X8, [X8+1528]
	130 Move W21, W0
	131 Move X8, [X8]
	132 Move W9, [X8+224]
	133 Compare W9, 0
	134 JumpIfNotEqual {137}
	135 Move X0, X8
	136 Call 0x1C17DFC
	137 Move V0, V8
	138 Move V1, V9
	139 Move V2, V10
	140 Move V3, V11
	141 Move V4, V12
	142 Move V5, V14
	143 Move V6, V13
	144 Move W0, W21
	145 Move X1, X31
	146 Call Physics.OverlapCapsule, X0, X1, V0, X2
	147 Move X0, X19
	148 Move X1, X31
	149 Call Component.get_transform, X0
	150 Compare X0, 0
	151 JumpIfEqual {628}
	152 Move X1, X31
	153 Call Transform.get_position, X0
	154 Move S3, [X19+152]
	155 Move S4, [X19+156]
	156 Move V5, [X19+160]
	157 Move W0, [X19+164]
	158 Move V8, [X19+144]
	159 Move X1, X31
	160 Add S11, S0, S3
	161 Add S10, S1, S4
	162 Add S9, S2, S5
	163 Call LayerMask.op_Implicit, X0
	164 Move X8, 0x231D000
	165 Move X8, [X8+1528]
	166 Move W21, W0
	167 Move X8, [X8]
	168 Move W9, [X8+224]
	169 Compare W9, 0
	170 JumpIfNotEqual {173}
	171 Move X0, X8
	172 Call 0x1C17DFC
	173 Move V0, V11
	174 Move V1, V10
	175 Move V2, V9
	176 Move V3, V8
	177 Move W0, W21
	178 Move X1, X31
	179 Call Physics.OverlapSphere, X0, V0, X1
	180 Move X21, X0
	181 Compare X0, 0
	182 JumpIfEqual {628}
	183 Move X8, [X21+24]
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Move X9, -19841024
	186 Move V0, [X9+380]
	187 Move X27, 0x231D000
	188 Move X28, 0x2322000
	189 Move X10, -19841024
	190 Move X27, [X27+1520]
	191 Move X28, [X28+2120]
	192 Move [X31+8], S0
	193 Move V0, [X10+688]
	194 Move X29, X31
	195 And X8, X8, 0
	196 Move [X31+12], S0
	197 NotImplemented "Instruction CMP not yet implemented."
	198 Add X8, X21, X29
	199 Move W9, [X19+140]
	200 Move X23, [X8+32]
	201 Move TEMP, X9
	202 And TEMP, TEMP, 1
	203 Compare TEMP, 1
	204 JumpIfEqual {261}
	205 Move W8, [X19+140]
	206 Move TEMP, X8
	207 And TEMP, TEMP, 2
	208 Compare TEMP, 2
	209 JumpIfNotEqual {561}
	210 Move X8, [X19+224]
	211 Compare X8, 0
	212 JumpIfEqual {628}
	213 Move W2, [X8+24]
	214 Move W9, [X8+28]
	215 Add W9, W9, 1
	216 NotImplemented "Instruction CMP not yet implemented."
	217 Move [X8+24], W31
	218 Move [X8+28], W9
	219 Move X0, [X8+16]
	220 Move W1, W31
	221 Move X3, X31
	222 Call Array.Clear, X0, X1, X2
	223 Add X1, X31, 32
	224 Move X0, X23
	225 Move X2, X31
	226 Call TriggerUtilities.TryGetStunnableFromCollider, X0, X1
	227 Move TEMP, X0
	228 And TEMP, TEMP, 1
	229 Compare TEMP, 1
	230 JumpIfNotEqual {561}
	231 Move X0, [X19+224]
	232 Compare X0, 0
	233 JumpIfEqual {628}
	234 Move X1, [X31+32]
	235 Move X2, [X27]
	236 Call List`1<Object>.Contains, X0, X1
	237 Move TEMP, X0
	238 And TEMP, TEMP, 1
	239 Compare TEMP, 1
	240 JumpIfEqual {561}
	241 Move X0, [X19+224]
	242 Compare X0, 0
	243 JumpIfEqual {628}
	244 Move X9, 0x231D000
	245 Move X1, [X31+32]
	246 Move W10, [X0+28]
	247 Move X8, [X0+16]
	248 Move X9, [X9+1504]
	249 Add W10, W10, 1
	250 Move X9, [X9]
	251 Move [X0+28], W10
	252 Compare X8, 0
	253 JumpIfEqual {628}
	254 NotImplemented "Instruction LDRSW not yet implemented."
	255 Move W11, [X8+24]
	256 NotImplemented "Instruction CMP not yet implemented."
	257 Add W9, W10, 1
	258 Add X8, X8, X10
	259 Move [X0+24], W9
	260 Move [X8+32], X1
	261 Move X8, [X19+216]
	262 Compare X8, 0
	263 JumpIfEqual {628}
	264 Move W2, [X8+24]
	265 Move W9, [X8+28]
	266 Add W9, W9, 1
	267 NotImplemented "Instruction CMP not yet implemented."
	268 Move [X8+24], W31
	269 Move [X8+28], W9
	270 Move X0, [X8+16]
	271 Move W1, W31
	272 Move X3, X31
	273 Call Array.Clear, X0, X1, X2
	274 Add X1, X31, 40
	275 Move X0, X23
	276 Move X2, X31
	277 Call TriggerUtilities.TryGetDamageableFromCollider, X0, X1
	278 Move TEMP, X0
	279 And TEMP, TEMP, 1
	280 Compare TEMP, 1
	281 JumpIfNotEqual {312}
	282 Move X0, [X19+216]
	283 Compare X0, 0
	284 JumpIfEqual {628}
	285 Move X1, [X31+40]
	286 Move X2, [X28]
	287 Call List`1<Object>.Contains, X0, X1
	288 Move TEMP, X0
	289 And TEMP, TEMP, 1
	290 Compare TEMP, 1
	291 JumpIfEqual {205}
	292 Move X0, [X19+216]
	293 Compare X0, 0
	294 JumpIfEqual {628}
	295 Move X9, 0x2322000
	296 Move X1, [X31+40]
	297 Move W10, [X0+28]
	298 Move X8, [X0+16]
	299 Move X9, [X9+2104]
	300 Add W10, W10, 1
	301 Move X9, [X9]
	302 Move [X0+28], W10
	303 Compare X8, 0
	304 JumpIfEqual {628}
	305 NotImplemented "Instruction LDRSW not yet implemented."
	306 Move W11, [X8+24]
	307 NotImplemented "Instruction CMP not yet implemented."
	308 Add W9, W10, 1
	309 Add X8, X8, X10
	310 Move [X0+24], W9
	311 Move [X8+32], X1
	312 Compare X23, 0
	313 JumpIfEqual {628}
	314 Move X0, X23
	315 Move X1, X31
	316 Call Collider.get_attachedRigidbody, X0
	317 Move X8, 0x231D000
	318 Move X8, [X8+1432]
	319 Move X24, X0
	320 Move X8, [X8]
	321 Move W9, [X8+224]
	322 Compare W9, 0
	323 JumpIfNotEqual {326}
	324 Move X0, X8
	325 Call 0x1C17DFC
	326 Move X0, X24
	327 Move X1, X31
	328 Move X2, X31
	329 Call Object.op_Inequality, X0, X1
	330 Move TEMP, X0
	331 And TEMP, TEMP, 1
	332 Compare TEMP, 1
	333 JumpIfNotEqual {205}
	334 Move X0, X23
	335 Move X1, X31
	336 Call Collider.get_attachedRigidbody, X0
	337 Move X24, X0
	338 Move X0, X19
	339 Move X1, X31
	340 Call Component.get_transform, X0
	341 Compare X0, 0
	342 JumpIfEqual {628}
	343 Move X1, X31
	344 Call Transform.get_position, X0
	345 Compare X24, 0
	346 JumpIfEqual {628}
	347 Move V3, V0
	348 Move V4, [X19+144]
	349 Move V0, [X31+12]
	350 Move V7, V1
	351 Move V6, V2
	352 Move S5, 1
	353 Move X0, X24
	354 Move V1, V3
	355 Move V2, V7
	356 Move V3, V6
	357 Move X1, X31
	358 Call Rigidbody.AddExplosionForce, X0, V0, X1, V1, V2
	359 Move X8, [X9+32]
	360 Move X8, [X8+192]
	361 Move X2, [X8+112]
	362 Call List`1<Object>.AddWithResize, X0, X1
	363 Move X24, [X31+40]
	364 Move W25, [X19+168]
	365 Move X0, X19
	366 Move X1, X31
	367 Call Component.get_transform, X0
	368 Compare X0, 0
	369 JumpIfEqual {628}
	370 Move X1, X31
	371 Call Transform.get_position, X0
	372 Compare X23, 0
	373 JumpIfEqual {628}
	374 Move X26, [X19+184]
	375 Move X0, X23
	376 Move X1, X31
	377 Move V8, V0
	378 Move V9, V1
	379 Move V10, V2
	380 Call Component.get_gameObject, X0
	381 Compare X0, 0
	382 JumpIfEqual {628}
	383 Move X1, X31
	384 Call GameObject.get_transform, X0
	385 Compare X0, 0
	386 JumpIfEqual {628}
	387 Move X1, X31
	388 Call Transform.get_position, X0
	389 Move X0, X19
	390 Move X1, X31
	391 Move V12, V0
	392 Move V13, V1
	393 Move V14, V2
	394 Call Component.get_transform, X0
	395 Compare X0, 0
	396 JumpIfEqual {628}
	397 Move X1, X31
	398 Move [X31+16], S10
	399 Move [X31+24], S8
	400 Move [X31+28], S9
	401 Call Transform.get_position, X0
	402 Move X8, 0x2602000
	403 Move W8, [X8+1926]
	404 Move V15, V0
	405 Move V9, V2
	406 Move [X31+24], S1
	407 Compare W8, 0
	408 JumpIfNotEqual {414}
	409 Move X0, X20
	410 Call 0x1C17CF4
	411 Move X8, 0x2602000
	412 Move W9, 1
	413 Move [X8+1926], W9
	414 Move X8, [X20]
	415 Move X9, 0x2602000
	416 Move W9, [X9+1925]
	417 Move X8, [X8+184]
	418 Move S8, [X8+24]
	419 Move S11, [X8+28]
	420 Move V10, [X8+32]
	421 Compare W9, 0
	422 JumpIfNotEqual {429}
	423 Move X0, 0x231D000
	424 Move X0, [X0+1448]
	425 Call 0x1C17CF4
	426 Move W8, 1
	427 Move X9, 0x2602000
	428 Move [X9+1925], W8
	429 Move X8, 0x231D000
	430 Move X8, [X8+1448]
	431 Move X0, [X8]
	432 Move W8, [X0+224]
	433 Compare W8, 0
	434 JumpIfNotEqual {436}
	435 Call 0x1C17DFC
	436 Move V1, [X31+24]
	437 Subtract S0, S12, S15
	438 Subtract S2, S14, S9
	439 Add S0, S0, S8
	440 Subtract S1, S13, S1
	441 Add S1, S1, S11
	442 Add S2, S2, S10
	443 Multiply S3, S0, S0
	444 Multiply S4, S1, S1
	445 Add S3, S3, S4
	446 Multiply S4, S2, S2
	447 Add S3, S4, S3
	448 Move V4, [X31+8]
	449 NotImplemented "Instruction FSQRT not yet implemented."
	450 NotImplemented "Instruction FCMP not yet implemented."
	451 Move V10, [X31+28]
	452 NotImplemented "Instruction FDIV not yet implemented."
	453 NotImplemented "Instruction FDIV not yet implemented."
	454 NotImplemented "Instruction FDIV not yet implemented."
	455 Move X8, [X9+32]
	456 Move X8, [X8+192]
	457 Move X2, [X8+112]
	458 Call List`1<Object>.AddWithResize, X0, X1
	459 Move X23, [X31+32]
	460 Move X0, X19
	461 Move X1, X31
	462 Call Component.get_transform, X0
	463 Compare X0, 0
	464 JumpIfEqual {628}
	465 Move X1, X31
	466 Call Transform.get_position, X0
	467 Move X8, [X19+64]
	468 Move V9, V0
	469 Move V10, V1
	470 Move V11, V2
	471 Compare X8, 0
	472 JumpIfEqual {477}
	473 Move X8, [X8+32]
	474 Compare X8, 0
	475 JumpIfEqual {477}
	476 Move W24, [X8]
	477 Move X24, X31
	478 Compare X23, 0
	479 JumpIfEqual {628}
	480 Move X8, [X23]
	481 Move X10, 0x231D000
	482 Move V12, [X19+144]
	483 Move V13, [X19+180]
	484 Move X26, [X19+128]
	485 Move W22, [X19+104]
	486 Move W25, [X19+176]
	487 NotImplemented "Instruction LDRH not yet implemented."
	488 Move X10, [X10+1488]
	489 Move X1, [X10]
	490 Compare X9, 0
	491 JumpIfEqual {498}
	492 Move X10, [X8+176]
	493 Add X10, X10, 8
	494 NotImplemented "Instruction LDUR not yet implemented."
	495 NotImplemented "Instruction CMP not yet implemented."
	496 Subtract X9, X9, 1
	497 Add X10, X10, 16
	498 Move X0, X23
	499 Move W2, W31
	500 Call 0x1C5D788
	501 Move X8, 0x2602000
	502 Move W8, [X8+1923]
	503 Move V10, [X31+28]
	504 Compare W8, 0
	505 JumpIfNotEqual {511}
	506 Move X0, X20
	507 Call 0x1C17CF4
	508 Move W8, 1
	509 Move X9, 0x2602000
	510 Move [X9+1923], W8
	511 Move X8, [X20]
	512 Move X8, [X8+184]
	513 Move S12, [X8]
	514 Move S8, [X8+4]
	515 Move V9, [X8+8]
	516 Move V13, [X19+172]
	517 Move X8, [X19+64]
	518 Move X27, [X19+128]
	519 Compare X8, 0
	520 JumpIfEqual {525}
	521 Move X8, [X8+32]
	522 Compare X8, 0
	523 JumpIfEqual {525}
	524 Move W28, [X8]
	525 Move X28, X31
	526 Compare X24, 0
	527 JumpIfEqual {628}
	528 Move X8, [X24]
	529 Move X10, 0x2320000
	530 Move W22, [X19+104]
	531 NotImplemented "Instruction LDRH not yet implemented."
	532 Move X10, [X10+3056]
	533 Move X1, [X10]
	534 Compare X9, 0
	535 JumpIfEqual {542}
	536 Move X10, [X8+176]
	537 Add X10, X10, 8
	538 NotImplemented "Instruction LDUR not yet implemented."
	539 NotImplemented "Instruction CMP not yet implemented."
	540 Subtract X9, X9, 1
	541 Add X10, X10, 16
	542 Move X0, X24
	543 Move W2, W31
	544 Call 0x1C5D788
	545 NotImplemented "Instruction LDRSW not yet implemented."
	546 Add X8, X8, X9
	547 Add X0, X8, 312
	548 Move X8, [X0]
	549 Move X4, [X0+8]
	550 NotImplemented "Instruction BFM not yet implemented."
	551 Move X0, X23
	552 Move V0, V9
	553 Move V1, V10
	554 Move V2, V11
	555 Move V3, V12
	556 Move V4, V13
	557 Move X1, X26
	558 Move X2, X24
	559 Move W3, W25
	560 NotImplemented "Instruction BLR not yet implemented."
	561 Move W8, [X21+24]
	562 Add X29, X29, 1
	563 NotImplemented "Instruction CMP not yet implemented."
	564 NotImplemented "Instruction LDRSW not yet implemented."
	565 Add X8, X8, X9
	566 Add X0, X8, 312
	567 Move X8, [X0]
	568 Move X6, [X0+8]
	569 Move S2, [X31+16]
	570 Move S0, [X31+20]
	571 NotImplemented "Instruction BFM not yet implemented."
	572 Multiply S3, S12, S13
	573 Multiply S4, S8, S13
	574 Multiply S5, S9, S13
	575 Move X0, X24
	576 Move W1, W25
	577 Move V1, V10
	578 Move X2, X26
	579 Move X3, X26
	580 Move X4, X27
	581 Move X5, X28
	582 NotImplemented "Instruction BLR not yet implemented."
	583 Move X27, 0x231D000
	584 Move X28, 0x2322000
	585 Move X27, [X27+1520]
	586 Move X28, [X28+2120]
	587 Move X0, [X19+56]
	588 Move S0, 5
	589 Move X1, X31
	590 Call TickTimer.CreateFromSeconds, X0, V0
	591 And X1, X0, 0
	592 Move X0, X19
	593 Call Explosion.set_life, X0, X1
	594 Move X20, [X19+184]
	595 Move X0, X19
	596 Move X1, X31
	597 Call Component.get_transform, X0
	598 Compare X0, 0
	599 JumpIfEqual {628}
	600 Move X1, X31
	601 Call Transform.get_position, X0
	602 Move S3, 1
	603 Move X0, X20
	604 Move X1, X31
	605 Call SFXManager.PlaySFX, X0, X1, V0
	606 Move X20, [X31+192]
	607 Move X19, [X31+200]
	608 Move X22, [X31+176]
	609 Move X21, [X31+184]
	610 Move X24, [X31+160]
	611 Move X23, [X31+168]
	612 Move X26, [X31+144]
	613 Move X25, [X31+152]
	614 Move X28, [X31+128]
	615 Move X27, [X31+136]
	616 Move X29, [X31+112]
	617 Move X30, [X31+120]
	618 Move D9, [X31+96]
	619 Move D8, [X31+104]
	620 Move D11, [X31+80]
	621 Move D10, [X31+88]
	622 Move D13, [X31+64]
	623 Move D12, [X31+72]
	624 Move D15, [X31+48]
	625 Move D14, [X31+56]
	626 Add X31, X31, 208
	627 Return 
	628 Call 0x1C17F20
	629 Call 0x1C17F28

Method: System.Void Render()

Disassembly:
	0x01DD7864 CMP W8, 0x1
	0x01DD7868 B.LT 0x1DD78AC
	0x01DD786C MOV W20, W31
	0x01DD7870 CMP W20, W8
	0x01DD7874 B.CS 0x1DD78BC
	0x01DD7878 ADD X8, X19, W20, 0x3, SXTW
	0x01DD787C LDR X0, [X8 + 0x20]
	0x01DD7880 CBZ X0, 0x1DD78B8
	0x01DD7884 MOV X1, X31
	0x01DD7888 BL 0x3C32ECC
	0x01DD788C CBZ X0, 0x1DD78B8
	0x01DD7890 MOVZ W1, 0xF
	0x01DD7894 MOV X2, X31
	0x01DD7898 BL 0x3C35770
	0x01DD789C LDR W8, [X19 + 0x18]
	0x01DD78A0 ADD W20, W20, 0x1
	0x01DD78A4 CMP W20, W8
	0x01DD78A8 B.LT 0x1DD7870
	0x01DD78AC LDP X20, X19, [X31 + 0x10]
	0x01DD78B0 LDR X30, [X31], #0x20
	0x01DD78B4 RET
	0x01DD78B8 BL 0x1C16F20

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call SimulationBehaviour.Render, X0
	007 Move X0, X19
	008 Call Explosion.get_life, X0
	009 Move [X31+8], W0
	010 Move X1, [X19+56]
	011 Add X0, X31, 8
	012 Move X2, X31
	013 Call TickTimer.Expired, X0, X1
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {24}
	018 Move X0, [X19+56]
	019 Compare X0, 0
	020 JumpIfEqual {28}
	021 Move X1, [X19+64]
	022 Move X2, X31
	023 Call NetworkRunner.Despawn, X0, X1
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Add X31, X31, 32
	027 Return 
	028 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01DD78BC BL 0x1C16F28
	0x01DD78C0 SUB X31, X31, 0xE0
	0x01DD78C4 STP D15, D14, [X31 + 0x40]
	0x01DD78C8 STP D13, D12, [X31 + 0x50]
	0x01DD78CC STP D11, D10, [X31 + 0x60]
	0x01DD78D0 STP D9, D8, [X31 + 0x70]
	0x01DD78D4 STP X29, X30, [X31 + 0x80]
	0x01DD78D8 STP X28, X27, [X31 + 0x90]
	0x01DD78DC STP X26, X25, [X31 + 0xA0]
	0x01DD78E0 STP X24, X23, [X31 + 0xB0]
	0x01DD78E4 STP X22, X21, [X31 + 0xC0]
	0x01DD78E8 STP X20, X19, [X31 + 0xD0]
	0x01DD78EC ADRP X20, 0x2601000
	0x01DD78F0 LDRB W8, [X20 + 0xC44]
	0x01DD78F4 MOV X19, X0
	0x01DD78F8 TBNZ X8, 0x0, 0x1DD791C
	0x01DD78FC ADRP X0, 0x231C000
	0x01DD7900 LDR X0, [X0 + 0x5D8]
	0x01DD7904 BL 0x1C16CF4
	0x01DD7908 ADRP X0, 0x231C000
	0x01DD790C LDR X0, [X0 + 0x5F8]
	0x01DD7910 BL 0x1C16CF4
	0x01DD7914 MOVZ W8, 0x1
	0x01DD7918 STRB W8, [X20 + 0xC44]
	0x01DD791C MOVI V0.2D, 0x0
	0x01DD7920 MOV X0, X19
	0x01DD7924 STUR V0, [X31 + 0x2C]
	0x01DD7928 STP V0, V0, [X31 + 0x10]
	0x01DD792C BL 0x1DD7718
	0x01DD7930 CBZ X0, 0x1DD7B34
	0x01DD7934 LDR W8, [X0 + 0x18]
	0x01DD7938 MOV X19, X0
	0x01DD793C CMP W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move S0, 1
	006 Move S1, W31
	007 Move S2, W31
	008 Move S3, 1
	009 Move X0, X31
	010 Call Gizmos.set_color, X0
	011 Move W8, [X19+136]
	012 Compare W8, 0
	013 JumpIfEqual {23}
	014 Move X0, X19
	015 Call Explosion.get__capsulePoint0, X0
	016 Move X20, X19
	017 Add X20, X20, 144
	018 Move V3, [X20]
	019 Move X0, X31
	020 Call Gizmos.DrawWireSphere, X0, V0
	021 Move X0, X19
	022 Call Explosion.get__capsulePoint1, X0
	023 Move X0, X19
	024 Move X1, X31
	025 Call Component.get_transform, X0
	026 Compare X0, 0
	027 JumpIfEqual {38}
	028 Move X1, X31
	029 Call Transform.get_position, X0
	030 Add X20, X19, 144
	031 Move V3, [X20]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X0, X31
	035 Move X30, [X31+32]
	036 Call Gizmos.DrawWireSphere, X0, V0
	037 Return 
	038 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DD7940 B.LT 0x1DD7B04
	0x01DD7944 ADRP X24, 0x231C000
	0x01DD7948 ADRP X25, 0x231C000
	0x01DD794C ADRP X20, 0x231C000
	0x01DD7950 ADRP X9, 0xFFFFFFFFFED13000
	0x01DD7954 LDR X24, [X24 + 0x5D8]
	0x01DD7958 LDR X25, [X25 + 0x5F8]
	0x01DD795C LDR X20, [X20 + 0x5A0]
	0x01DD7960 LDR V0, [X9 + 0xBC]
	0x01DD7964 MOV W23, W31
	0x01DD7968 ADRP X26, 0x2601000
	0x01DD796C MOVZ W27, 0x1
	0x01DD7970 ADRP X28, 0x2601000
	0x01DD7974 MOVZ W29, 0x447A0000
	0x01DD7978 STR S0, [X31 + 0x8]
	0x01DD797C CMP W23, W8
	0x01DD7980 B.CS 0x1DD7B38
	0x01DD7984 ADD X8, X19, W23, 0x3, SXTW
	0x01DD7988 LDR X21, [X8 + 0x20]
	0x01DD798C CBZ X21, 0x1DD7B34
	0x01DD7990 MOV X0, X21
	0x01DD7994 MOV X1, X31
	0x01DD7998 BL 0x3C32E90
	0x01DD799C CBZ X0, 0x1DD7B34
	0x01DD79A0 MOV X1, X31
	0x01DD79A4 BL 0x3C3F58C
	0x01DD79A8 LDRB W8, [X26 + 0x786]
	0x01DD79AC MOV V9.16B, V1.16B
	0x01DD79B0 MOV V10.16B, V2.16B
	0x01DD79B4 STR S0, [X31 + 0xC]
	0x01DD79B8 CBNZ W8, 0x1DD79C8
	0x01DD79BC MOV X0, X20
	0x01DD79C0 BL 0x1C16CF4
	0x01DD79C4 STRB W27, [X26 + 0x786]
	0x01DD79C8 LDR X8, [X20]
	0x01DD79CC LDRB W9, [X28 + 0xABD]
	0x01DD79D0 LDR X8, [X8 + 0xB8]
	0x01DD79D4 LDP S8, S14, [X8 + 0x18]
	0x01DD79D8 LDR V15, [X8 + 0x20]
	0x01DD79DC CBNZ W9, 0x1DD79F4
	0x01DD79E0 MOV X0, X20
	0x01DD79E4 BL 0x1C16CF4
	0x01DD79E8 LDR X8, [X20]
	0x01DD79EC STRB W27, [X28 + 0xABD]
	0x01DD79F0 LDR X8, [X8 + 0xB8]
	0x01DD79F4 LDR X0, [X24]
	0x01DD79F8 LDP S12, S11, [X8 + 0x24]
	0x01DD79FC LDR V13, [X8 + 0x2C]
	0x01DD7A00 LDR W9, [X0 + 0xE0]
	0x01DD7A04 CBNZ W9, 0x1DD7A10
	0x01DD7A08 BL 0x1C16DFC
	0x01DD7A0C LDR X0, [X24]
	0x01DD7A10 LDR X8, [X0 + 0xB8]
	0x01DD7A14 MOV X1, X31
	0x01DD7A18 LDR W0, [X8]
	0x01DD7A1C BL 0x3C35CB8
	0x01DD7A20 LDR X8, [X25]
	0x01DD7A24 MOV W22, W0
	0x01DD7A28 LDR W9, [X8 + 0xE0]
	0x01DD7A2C CBNZ W9, 0x1DD7A38
	0x01DD7A30 MOV X0, X8
	0x01DD7A34 BL 0x1C16DFC
	0x01DD7A38 LDR V3, [X31 + 0xC]
	0x01DD7A3C FMOV S2, 0.5
	0x01DD7A40 FMUL S0, S8, S2
	0x01DD7A44 FMUL S1, S14, S2
	0x01DD7A48 FMUL S2, S15, S2
	0x01DD7A4C FADD S0, S3, S0
	0x01DD7A50 FADD S1, S9, S1
	0x01DD7A54 FADD S2, S10, S2
	0x01DD7A58 ADD X0, X31, 0x10
	0x01DD7A5C FMOV S6, W29
	0x01DD7A60 MOV V3.16B, V12.16B
	0x01DD7A64 MOV V4.16B, V11.16B
	0x01DD7A68 MOV V5.16B, V13.16B
	0x01DD7A6C MOV W1, W22
	0x01DD7A70 MOV X2, X31
	0x01DD7A74 BL 0x3C8B18C
	0x01DD7A78 TBZ X0, 0x0, 0x1DD7AF4
	0x01DD7A7C MOV X0, X21

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x2602000
	010 Move X20, 0x2322000
	011 Move W8, [X21+3129]
	012 Move X20, [X20+2128]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0x2322000
	019 Move X0, [X0+2136]
	020 Call 0x1C17CF4
	021 Move X0, 0x231D000
	022 Move X0, [X0+1552]
	023 Call 0x1C17CF4
	024 Move X0, 0x2322000
	025 Move X0, [X0+2144]
	026 Call 0x1C17CF4
	027 Move X0, 0x231D000
	028 Move X0, [X0+1544]
	029 Call 0x1C17CF4
	030 Move X0, 0x2322000
	031 Move X0, [X0+2128]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+3129], W8
	035 Move X8, [X20]
	036 Move W24, 1
	037 Move V0, 0
	038 Move [X19+140], W24
	039 Move [X19+144], D0
	040 Move [X19+128], X8
	041 Move X25, 0x2602000
	042 Move X23, 0x2322000
	043 Move X20, 0x2322000
	044 Move X22, 0x231D000
	045 Move X21, 0x231D000
	046 Move W8, [X25+1923]
	047 Move X23, [X23+2144]
	048 Move X20, [X20+2136]
	049 Move X22, [X22+1544]
	050 Move X21, [X21+1552]
	051 Compare W8, 0
	052 JumpIfNotEqual {57}
	053 Move X0, 0x231D000
	054 Move X0, [X0+1440]
	055 Call 0x1C17CF4
	056 Move [X25+1923], W24
	057 Move X8, 0x231D000
	058 Move X8, [X8+1440]
	059 Move X9, 100
	060 NotImplemented "Instruction MOVK not yet implemented."
	061 Move X8, [X8]
	062 Move X8, [X8+184]
	063 Move V0, [X8]
	064 Move V1, [X8+8]
	065 Move W8, 0x41000000
	066 Move [X19+168], X9
	067 Move [X19+152], D0
	068 Move [X19+160], S1
	069 Move [X19+180], W8
	070 Move X0, [X23]
	071 Call 0x1C17F10
	072 Move X1, [X20]
	073 Move X20, X0
	074 Call List`1<Object>..ctor, X0
	075 Move [X19+216], X20
	076 Move X0, [X22]
	077 Call 0x1C17F10
	078 Move X1, [X21]
	079 Move X20, X0
	080 Call List`1<Object>..ctor, X0
	081 Move [X19+224], X20
	082 Move X0, X19
	083 Move X20, [X31+48]
	084 Move X19, [X31+56]
	085 Move X22, [X31+32]
	086 Move X21, [X31+40]
	087 Move X24, [X31+16]
	088 Move X23, [X31+24]
	089 Move X1, X31
	090 Move X30, [X31+64]
	091 Move X25, [X31+72]
	092 Call NetworkBehaviour..ctor, X0
	093 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DD7A80 MOV X1, X31
	0x01DD7A84 BL 0x3C32E90

ISIL:
	001 Move W1, [X0+212]
	002 Call Explosion.set_life, X0, X1
	003 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DD7A88 MOV X21, X0
	0x01DD7A8C ADD X0, X31, 0x10
	0x01DD7A90 MOV X1, X31
	0x01DD7A94 BL 0x3C8E66C
	0x01DD7A98 LDRB W8, [X26 + 0x786]
	0x01DD7A9C MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Explosion.get_life, X0
	005 Move [X19+212], W0
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 

