Type: AnimalCompany.Explosion

Method: UnityEngine.Vector3 get__capsulePoint0()

Disassembly:
	0x01CD29D8 LDR W8, [X0 + 0xE0]
	0x01CD29DC CBNZ W8, 0x1CD29E8
	0x01CD29E0 BL 0x1B6E8F8
	0x01CD29E4 LDR X0, [X21]
	0x01CD29E8 LDR X8, [X0 + 0xB8]
	0x01CD29EC LDR X8, [X8]
	0x01CD29F0 CBZ X8, 0x1CD2B28
	0x01CD29F4 LDR X8, [X8 + 0xA8]
	0x01CD29F8 CBZ X8, 0x1CD2B28
	0x01CD29FC LDR X8, [X8 + 0x68]
	0x01CD2A00 CBZ X8, 0x1CD2B28
	0x01CD2A04 ADRP X9, 0x227D000
	0x01CD2A08 LDR X9, [X9 + 0xA68]
	0x01CD2A0C LDR X0, [X8 + 0x48]
	0x01CD2A10 ADRP X21, 0x227D000
	0x01CD2A14 LDR X1, [X9]
	0x01CD2A18 LDR X21, [X21 + 0xA70]
	0x01CD2A1C BL 0x24BBA34
	0x01CD2A20 LDR X8, [X21]
	0x01CD2A24 MOV W22, W0
	0x01CD2A28 MOV X0, X8
	0x01CD2A2C BL 0x1B6EA0C
	0x01CD2A30 SUB W1, W22, W19
	0x01CD2A34 MOV X2, X31
	0x01CD2A38 MOV X21, X0
	0x01CD2A3C BL 0x1C97474
	0x01CD2A40 CBZ X20, 0x1CD2B28
	0x01CD2A44 CBZ X21, 0x1CD2A5C
	0x01CD2A48 LDR X8, [X20]
	0x01CD2A4C MOV X0, X21
	0x01CD2A50 LDR X1, [X8 + 0x40]
	0x01CD2A54 BL 0x1B6E8FC
	0x01CD2A58 CBZ X0, 0x1CD2B30
	0x01CD2A5C LDR W8, [X20 + 0x18]
	0x01CD2A60 CBZ W8, 0x1CD2B2C
	0x01CD2A64 ADRP X22, 0x227C000
	0x01CD2A68 ADRP X23, 0x227B000
	0x01CD2A6C ADRP X24, 0x227D000
	0x01CD2A70 ADRP X25, 0x227C000
	0x01CD2A74 LDR X22, [X22 + 0x7C0]
	0x01CD2A78 LDR X23, [X23 + 0x5F8]
	0x01CD2A7C LDR X24, [X24 + 0xA80]
	0x01CD2A80 LDR X25, [X25 + 0x7C8]
	0x01CD2A84 MOV X0, X20
	0x01CD2A88 MOV X1, X31
	0x01CD2A8C STR X21, [X20 + 0x20]
	0x01CD2A90 BL 0x1C8BDB0
	0x01CD2A94 LDR X0, [X22]
	0x01CD2A98 MOVZ W1, 0x1
	0x01CD2A9C BL 0x1B6E868

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D10
	003 Move [X31+40], D9
	004 Move [X31+48], D8
	005 Move [X31+56], X30
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X1, X31
	009 Move X19, X0
	010 Call Component.get_transform, X0
	011 Compare X0, 0
	012 JumpIfEqual {58}
	013 Move X1, X31
	014 Call Transform.get_position, X0
	015 Move X20, 0x2552000
	016 Move V9, [X19+152]
	017 Move W8, [X20+1090]
	018 Move V10, [X19+160]
	019 Move V8, V2
	020 Compare W8, 0
	021 JumpIfNotEqual {31}
	022 Move X0, 0x227C000
	023 Move X0, [X0+1152]
	024 Move [X31], V1
	025 Move [X31+8], V0
	026 Call 0x1B6F7F0
	027 Move V1, [X31]
	028 Move V0, [X31+16]
	029 Move W8, 1
	030 Move [X20+1090], W8
	031 Move X8, 0x227C000
	032 Move X8, [X8+1152]
	033 Move V5, [X19+148]
	034 Move V0.S[1], V1.S[0]
	035 Add S6, S8, S10
	036 Move X8, [X8]
	037 Add V4, V0, V9
	038 Move X20, [X31+64]
	039 Move X19, [X31+72]
	040 Move X30, [X31+56]
	041 Move X8, [X8+184]
	042 Move D9, [X31+40]
	043 Move D8, [X31+48]
	044 Move V10, [X31+32]
	045 Move V2, [X8+24]
	046 Move V3, [X8+32]
	047 NotImplemented "Instruction INVALID not yet implemented."
	048 Multiply S0, S3, S5
	049 NotImplemented "Instruction MOVI not yet implemented."
	050 NotImplemented "Instruction INVALID not yet implemented."
	051 Move S3, 0.5
	052 Multiply S3, S0, S3
	053 Add V0, V4, V2
	054 Add S2, S6, S3
	055 Move S1, V0.S[1]
	056 Add X31, X31, 80
	057 Return X0
	058 Call 0x1B6FA1C

Method: UnityEngine.Vector3 get__capsulePoint1()

Disassembly:
	0x01CD2AA0 MOV X20, X0
	0x01CD2AA4 LDR X0, [X23]
	0x01CD2AA8 ADD X1, X31, 0x1C
	0x01CD2AAC STR W19, [X31 + 0x1C]
	0x01CD2AB0 BL 0x1B6E900
	0x01CD2AB4 LDR X1, [X24]
	0x01CD2AB8 LDR X3, [X25]
	0x01CD2ABC MOV X2, X0
	0x01CD2AC0 ADD X0, X31, 0x0
	0x01CD2AC4 STP X31, X31, [X31]
	0x01CD2AC8 BL 0x25FCCA4
	0x01CD2ACC CBZ X20, 0x1CD2B28
	0x01CD2AD0 LDR W8, [X20 + 0x18]
	0x01CD2AD4 CBZ W8, 0x1CD2B2C
	0x01CD2AD8 LDR V0, [X31]
	0x01CD2ADC ADRP X8, 0x227B000
	0x01CD2AE0 LDR X8, [X8 + 0x9A0]
	0x01CD2AE4 ADRP X19, 0x227D000
	0x01CD2AE8 STR V0, [X20 + 0x2]
	0x01CD2AEC LDR X0, [X8]
	0x01CD2AF0 LDR W8, [X0 + 0xE0]
	0x01CD2AF4 LDR X19, [X19 + 0xA78]
	0x01CD2AF8 CBNZ W8, 0x1CD2B00
	0x01CD2AFC BL 0x1B6E8F8
	0x01CD2B00 LDR X0, [X19]
	0x01CD2B04 MOV X1, X20
	0x01CD2B08 MOV X2, X31
	0x01CD2B0C BL 0x1CCF488
	0x01CD2B10 LDP X20, X19, [X31 + 0x50]
	0x01CD2B14 LDP X22, X21, [X31 + 0x40]
	0x01CD2B18 LDP X24, X23, [X31 + 0x30]
	0x01CD2B1C LDP X30, X25, [X31 + 0x20]
	0x01CD2B20 ADD X31, X31, 0x60
	0x01CD2B24 RET
	0x01CD2B28 BL 0x1B6EA1C
	0x01CD2B2C BL 0x1B6EA24
	0x01CD2B30 BL 0x1B6EA40
	0x01CD2B34 MOV X1, X31
	0x01CD2B38 BL 0x1B6E8E8
	0x01CD2B3C SUB X31, X31, 0x60
	0x01CD2B40 STP X30, X25, [X31 + 0x20]
	0x01CD2B44 STP X24, X23, [X31 + 0x30]
	0x01CD2B48 STP X22, X21, [X31 + 0x40]
	0x01CD2B4C STP X20, X19, [X31 + 0x50]
	0x01CD2B50 ADRP X20, 0x2551000
	0x01CD2B54 LDRB W8, [X20 + 0x5DD]
	0x01CD2B58 MOV W19, W0
	0x01CD2B5C TBNZ X8, 0x0, 0x1CD2BE0
	0x01CD2B60 ADRP X0, 0x227B000
	0x01CD2B64 LDR X0, [X0 + 0x9A0]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D10
	003 Move [X31+40], D9
	004 Move [X31+48], D8
	005 Move [X31+56], X30
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X1, X31
	009 Move X19, X0
	010 Call Component.get_transform, X0
	011 Compare X0, 0
	012 JumpIfEqual {58}
	013 Move X1, X31
	014 Call Transform.get_position, X0
	015 Move X20, 0x2552000
	016 Move V9, [X19+152]
	017 Move W8, [X20+1090]
	018 Move V10, [X19+160]
	019 Move V8, V2
	020 Compare W8, 0
	021 JumpIfNotEqual {31}
	022 Move X0, 0x227C000
	023 Move X0, [X0+1152]
	024 Move [X31], V1
	025 Move [X31+8], V0
	026 Call 0x1B6F7F0
	027 Move V1, [X31]
	028 Move V0, [X31+16]
	029 Move W8, 1
	030 Move [X20+1090], W8
	031 Move X8, 0x227C000
	032 Move X8, [X8+1152]
	033 Move V5, [X19+148]
	034 Move V0.S[1], V1.S[0]
	035 Add S6, S8, S10
	036 Move X8, [X8]
	037 Add V4, V0, V9
	038 Move X20, [X31+64]
	039 Move X19, [X31+72]
	040 Move X30, [X31+56]
	041 Move X8, [X8+184]
	042 Move D9, [X31+40]
	043 Move D8, [X31+48]
	044 Move V10, [X31+32]
	045 Move V2, [X8+24]
	046 Move V3, [X8+32]
	047 NotImplemented "Instruction INVALID not yet implemented."
	048 Multiply S0, S3, S5
	049 NotImplemented "Instruction MOVI not yet implemented."
	050 NotImplemented "Instruction INVALID not yet implemented."
	051 Move S3, -0.5
	052 Multiply S3, S0, S3
	053 Add V0, V4, V2
	054 Add S2, S6, S3
	055 Move S1, V0.S[1]
	056 Add X31, X31, 80
	057 Return X0
	058 Call 0x1B6FA1C

Method: Fusion.TickTimer get_life()

Disassembly:
	0x01CD2B68 BL 0x1B6E7F0
	0x01CD2B6C ADRP X0, 0x227B000
	0x01CD2B70 LDR X0, [X0 + 0x4E8]
	0x01CD2B74 BL 0x1B6E7F0
	0x01CD2B78 ADRP X0, 0x227B000
	0x01CD2B7C LDR X0, [X0 + 0x9A8]
	0x01CD2B80 BL 0x1B6E7F0
	0x01CD2B84 ADRP X0, 0x227B000
	0x01CD2B88 LDR X0, [X0 + 0x5F8]
	0x01CD2B8C BL 0x1B6E7F0
	0x01CD2B90 ADRP X0, 0x227D000
	0x01CD2B94 LDR X0, [X0 + 0xA70]
	0x01CD2B98 BL 0x1B6E7F0
	0x01CD2B9C ADRP X0, 0x227D000
	0x01CD2BA0 LDR X0, [X0 + 0xA68]
	0x01CD2BA4 BL 0x1B6E7F0
	0x01CD2BA8 ADRP X0, 0x227C000
	0x01CD2BAC LDR X0, [X0 + 0x7C0]
	0x01CD2BB0 BL 0x1B6E7F0
	0x01CD2BB4 ADRP X0, 0x227C000
	0x01CD2BB8 LDR X0, [X0 + 0x7C8]
	0x01CD2BBC BL 0x1B6E7F0
	0x01CD2BC0 ADRP X0, 0x227D000
	0x01CD2BC4 LDR X0, [X0 + 0xA80]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x227C000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x227E000
	016 Move X0, [X0+2600]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x227E000
	023 Move X0, [X0+2608]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_life(Fusion.TickTimer value)

Disassembly:
	0x01CD2BC8 BL 0x1B6E7F0
	0x01CD2BCC ADRP X0, 0x227D000
	0x01CD2BD0 LDR X0, [X0 + 0xA88]
	0x01CD2BD4 BL 0x1B6E7F0
	0x01CD2BD8 MOVZ W8, 0x1
	0x01CD2BDC STRB W8, [X20 + 0x5DD]
	0x01CD2BE0 TBNZ X19, 0x1F, 0x1CD2D74
	0x01CD2BE4 ADRP X8, 0x227B000
	0x01CD2BE8 LDR X8, [X8 + 0x9A8]
	0x01CD2BEC ADRP X21, 0x227B000
	0x01CD2BF0 MOVZ W1, 0x1
	0x01CD2BF4 LDR X0, [X8]
	0x01CD2BF8 LDR X21, [X21 + 0x4E8]
	0x01CD2BFC BL 0x1B6E868
	0x01CD2C00 LDR X8, [X21]
	0x01CD2C04 MOV X20, X0
	0x01CD2C08 LDR W9, [X8 + 0xE0]
	0x01CD2C0C CBNZ W9, 0x1CD2C18
	0x01CD2C10 MOV X0, X8
	0x01CD2C14 BL 0x1B6E8F8
	0x01CD2C18 ADRP X22, 0x2551000
	0x01CD2C1C LDRB W8, [X22 + 0x443]
	0x01CD2C20 CBNZ W8, 0x1CD2C38
	0x01CD2C24 ADRP X0, 0x227B000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x227C000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x227E000
	016 Move X0, [X0+2600]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x227E000
	023 Move X0, [X0+2616]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void Spawned()

Disassembly:
	0x01CD2C28 LDR X0, [X0 + 0x4E8]
	0x01CD2C2C BL 0x1B6E7F0
	0x01CD2C30 MOVZ W8, 0x1
	0x01CD2C34 STRB W8, [X22 + 0x443]
	0x01CD2C38 LDR X0, [X21]
	0x01CD2C3C LDR W8, [X0 + 0xE0]
	0x01CD2C40 CBNZ W8, 0x1CD2C4C
	0x01CD2C44 BL 0x1B6E8F8
	0x01CD2C48 LDR X0, [X21]
	0x01CD2C4C LDR X8, [X0 + 0xB8]
	0x01CD2C50 LDR X8, [X8]
	0x01CD2C54 CBZ X8, 0x1CD2D8C
	0x01CD2C58 LDR X8, [X8 + 0xA8]
	0x01CD2C5C CBZ X8, 0x1CD2D8C
	0x01CD2C60 LDR X8, [X8 + 0x68]
	0x01CD2C64 CBZ X8, 0x1CD2D8C
	0x01CD2C68 ADRP X9, 0x227D000
	0x01CD2C6C LDR X9, [X9 + 0xA68]
	0x01CD2C70 LDR X0, [X8 + 0x48]
	0x01CD2C74 ADRP X21, 0x227D000
	0x01CD2C78 LDR X1, [X9]
	0x01CD2C7C LDR X21, [X21 + 0xA70]
	0x01CD2C80 BL 0x24BBA34
	0x01CD2C84 LDR X8, [X21]
	0x01CD2C88 MOV W22, W0
	0x01CD2C8C MOV X0, X8
	0x01CD2C90 BL 0x1B6EA0C
	0x01CD2C94 ADD W1, W22, W19
	0x01CD2C98 MOV X2, X31
	0x01CD2C9C MOV X21, X0
	0x01CD2CA0 BL 0x1C97474
	0x01CD2CA4 CBZ X20, 0x1CD2D8C
	0x01CD2CA8 CBZ X21, 0x1CD2CC0
	0x01CD2CAC LDR X8, [X20]
	0x01CD2CB0 MOV X0, X21
	0x01CD2CB4 LDR X1, [X8 + 0x40]
	0x01CD2CB8 BL 0x1B6E8FC
	0x01CD2CBC CBZ X0, 0x1CD2D94
	0x01CD2CC0 LDR W8, [X20 + 0x18]
	0x01CD2CC4 CBZ W8, 0x1CD2D90
	0x01CD2CC8 ADRP X22, 0x227C000
	0x01CD2CCC ADRP X23, 0x227B000
	0x01CD2CD0 ADRP X24, 0x227D000
	0x01CD2CD4 ADRP X25, 0x227C000
	0x01CD2CD8 LDR X22, [X22 + 0x7C0]
	0x01CD2CDC LDR X23, [X23 + 0x5F8]
	0x01CD2CE0 LDR X24, [X24 + 0xA80]
	0x01CD2CE4 LDR X25, [X25 + 0x7C8]
	0x01CD2CE8 MOV X0, X20
	0x01CD2CEC MOV X1, X31
	0x01CD2CF0 STR X21, [X20 + 0x20]
	0x01CD2CF4 BL 0x1C8BDB0
	0x01CD2CF8 LDR X0, [X22]
	0x01CD2CFC MOVZ W1, 0x1
	0x01CD2D00 BL 0x1B6E868
	0x01CD2D04 MOV X20, X0
	0x01CD2D08 LDR X0, [X23]
	0x01CD2D0C ADD X1, X31, 0x1C
	0x01CD2D10 STR W19, [X31 + 0x1C]
	0x01CD2D14 BL 0x1B6E900
	0x01CD2D18 LDR X1, [X24]
	0x01CD2D1C LDR X3, [X25]
	0x01CD2D20 MOV X2, X0
	0x01CD2D24 ADD X0, X31, 0x0
	0x01CD2D28 STP X31, X31, [X31]
	0x01CD2D2C BL 0x25FCCA4
	0x01CD2D30 CBZ X20, 0x1CD2D8C
	0x01CD2D34 LDR W8, [X20 + 0x18]
	0x01CD2D38 CBZ W8, 0x1CD2D90
	0x01CD2D3C LDR V0, [X31]
	0x01CD2D40 ADRP X8, 0x227B000
	0x01CD2D44 LDR X8, [X8 + 0x9A0]
	0x01CD2D48 ADRP X19, 0x227D000
	0x01CD2D4C STR V0, [X20 + 0x2]
	0x01CD2D50 LDR X0, [X8]
	0x01CD2D54 LDR W8, [X0 + 0xE0]
	0x01CD2D58 LDR X19, [X19 + 0xA88]
	0x01CD2D5C CBNZ W8, 0x1CD2D64
	0x01CD2D60 BL 0x1B6E8F8
	0x01CD2D64 LDR X0, [X19]
	0x01CD2D68 MOV X1, X20
	0x01CD2D6C MOV X2, X31
	0x01CD2D70 BL 0x1CCF488
	0x01CD2D74 LDP X20, X19, [X31 + 0x50]
	0x01CD2D78 LDP X22, X21, [X31 + 0x40]
	0x01CD2D7C LDP X24, X23, [X31 + 0x30]
	0x01CD2D80 LDP X30, X25, [X31 + 0x20]
	0x01CD2D84 ADD X31, X31, 0x60
	0x01CD2D88 RET
	0x01CD2D8C BL 0x1B6EA1C
	0x01CD2D90 BL 0x1B6EA24
	0x01CD2D94 BL 0x1B6EA40
	0x01CD2D98 MOV X1, X31
	0x01CD2D9C BL 0x1B6E8E8
	0x01CD2DA0 MOV X1, X31
	0x01CD2DA4 B 0x3A9EEE4
	0x01CD2DA8 SUB X31, X31, 0x30
	0x01CD2DAC STP X30, X21, [X31 + 0x10]
	0x01CD2DB0 STP X20, X19, [X31 + 0x20]
	0x01CD2DB4 ADRP X21, 0x2551000
	0x01CD2DB8 LDRB W8, [X21 + 0x5DF]
	0x01CD2DBC MOV X20, X1
	0x01CD2DC0 MOV X19, X0
	0x01CD2DC4 TBNZ X8, 0x0, 0x1CD2DDC
	0x01CD2DC8 ADRP X0, 0x227D000
	0x01CD2DCC LDR X0, [X0 + 0xA90]
	0x01CD2DD0 BL 0x1B6E7F0
	0x01CD2DD4 MOVZ W8, 0x1
	0x01CD2DD8 STRB W8, [X21 + 0x5DF]
	0x01CD2DDC STR X31, [X31 + 0x8]
	0x01CD2DE0 CBZ X20, 0x1CD2E60
	0x01CD2DE4 MOV X0, X20
	0x01CD2DE8 MOV X1, X31
	0x01CD2DEC BL 0x3A9B0C0
	0x01CD2DF0 CBZ X0, 0x1CD2E60
	0x01CD2DF4 MOV X1, X31
	0x01CD2DF8 BL 0x3A9D928
	0x01CD2DFC CMP W0, 0x6
	0x01CD2E00 B.NE 0x1CD2E50
	0x01CD2E04 MOV X0, X20
	0x01CD2E08 MOV X1, X31
	0x01CD2E0C BL 0x3A9B0C0
	0x01CD2E10 CBZ X0, 0x1CD2E60
	0x01CD2E14 ADRP X8, 0x227D000
	0x01CD2E18 LDR X8, [X8 + 0xA90]
	0x01CD2E1C ADD X1, X31, 0x8
	0x01CD2E20 LDR X2, [X8]
	0x01CD2E24 BL 0x20D02D0
	0x01CD2E28 TBZ X0, 0x0, 0x1CD2E50
	0x01CD2E2C LDR X8, [X19 + 0x20]
	0x01CD2E30 CBZ X8, 0x1CD2E50
	0x01CD2E34 LDR X9, [X31 + 0x8]
	0x01CD2E38 CBZ X9, 0x1CD2E60
	0x01CD2E3C LDR X1, [X9 + 0x20]
	0x01CD2E40 LDR X9, [X8 + 0x18]
	0x01CD2E44 LDR X0, [X8 + 0x40]
	0x01CD2E48 LDR X2, [X8 + 0x28]
	0x01CD2E4C BLR X9
	0x01CD2E50 LDP X20, X19, [X31 + 0x20]
	0x01CD2E54 LDP X30, X21, [X31 + 0x10]
	0x01CD2E58 ADD X31, X31, 0x30
	0x01CD2E5C RET
	0x01CD2E60 BL 0x1B6EA1C
	0x01CD2E64 MOV X1, X31
	0x01CD2E68 B 0x3A9EEE4
	0x01CD2E6C STP X30, X21, [X31 - 0x20]!
	0x01CD2E70 STP X20, X19, [X31 + 0x10]
	0x01CD2E74 ADRP X20, 0x2551000
	0x01CD2E78 ADRP X21, 0x227D000
	0x01CD2E7C LDRB W8, [X20 + 0x5E0]
	0x01CD2E80 LDR X21, [X21 + 0xA98]
	0x01CD2E84 MOV X19, X0
	0x01CD2E88 TBNZ X8, 0x0, 0x1CD2EA0
	0x01CD2E8C ADRP X0, 0x227D000
	0x01CD2E90 LDR X0, [X0 + 0xA98]
	0x01CD2E94 BL 0x1B6E7F0
	0x01CD2E98 MOVZ W8, 0x1
	0x01CD2E9C STRB W8, [X20 + 0x5E0]
	0x01CD2EA0 LDR X0, [X21]
	0x01CD2EA4 MOV X1, X31
	0x01CD2EA8 BL 0x3AC4F00
	0x01CD2EAC STR X0, [X19 + 0x20]!
	0x01CD2EB0 STR X1, [X19 + 0x8]
	0x01CD2EB4 MOV X0, X19
	0x01CD2EB8 LDP X20, X19, [X31 + 0x10]
	0x01CD2EBC MOV W1, W31
	0x01CD2EC0 MOV X2, X31
	0x01CD2EC4 LDP X30, X21, [X31], #0x20
	0x01CD2EC8 B 0x3A7C96C
	0x01CD2ECC ADD X0, X0, 0x20
	0x01CD2ED0 MOVZ W1, 0x1
	0x01CD2ED4 MOV X2, X31
	0x01CD2ED8 B 0x3A7C96C
	0x01CD2EDC MOV X1, X31
	0x01CD2EE0 B 0x3A9EEE4
	0x01CD2EE4 STP X30, X23, [X31 - 0x30]!
	0x01CD2EE8 STP X22, X21, [X31 + 0x10]
	0x01CD2EEC STP X20, X19, [X31 + 0x20]
	0x01CD2EF0 ADRP X20, 0x2551000
	0x01CD2EF4 ADRP X21, 0x227D000
	0x01CD2EF8 LDRB W8, [X20 + 0x5E1]
	0x01CD2EFC LDR X21, [X21 + 0xAA0]
	0x01CD2F00 MOV X19, X0
	0x01CD2F04 TBNZ X8, 0x0, 0x1CD2F28
	0x01CD2F08 ADRP X0, 0x227D000
	0x01CD2F0C LDR X0, [X0 + 0xAA0]
	0x01CD2F10 BL 0x1B6E7F0
	0x01CD2F14 ADRP X0, 0x227B000
	0x01CD2F18 LDR X0, [X0 + 0x478]
	0x01CD2F1C BL 0x1B6E7F0
	0x01CD2F20 MOVZ W8, 0x1
	0x01CD2F24 STRB W8, [X20 + 0x5E1]
	0x01CD2F28 LDR X1, [X21]
	0x01CD2F2C MOV X0, X19
	0x01CD2F30 BL 0x2090A90
	0x01CD2F34 CBZ X0, 0x1CD2FC4
	0x01CD2F38 LDR X8, [X0 + 0x18]
	0x01CD2F3C MOV X19, X0
	0x01CD2F40 CMP W8, 0x1
	0x01CD2F44 B.LT 0x1CD2FB0
	0x01CD2F48 ADRP X22, 0x227B000
	0x01CD2F4C LDR X22, [X22 + 0x478]
	0x01CD2F50 MOV X21, X31
	0x01CD2F54 AND X8, X8, 0x0
	0x01CD2F58 ADD X23, X19, 0x20
	0x01CD2F5C CMP X21, W8, UXTW
	0x01CD2F60 B.CS 0x1CD2FC0
	0x01CD2F64 LDR X0, [X22]
	0x01CD2F68 LDR X20, [X23, X21, LSL #3]
	0x01CD2F6C LDR W8, [X0 + 0xE0]
	0x01CD2F70 CBNZ W8, 0x1CD2F78
	0x01CD2F74 BL 0x1B6E8F8
	0x01CD2F78 MOV X0, X20
	0x01CD2F7C MOV X1, X31
	0x01CD2F80 MOV X2, X31
	0x01CD2F84 BL 0x3A9D6EC
	0x01CD2F88 TBZ X0, 0x0, 0x1CD2FA0
	0x01CD2F8C CBZ X20, 0x1CD2FC4
	0x01CD2F90 MOVZ W1, 0x1
	0x01CD2F94 MOV X0, X20
	0x01CD2F98 MOV X2, X31
	0x01CD2F9C BL 0x3AF77E8
	0x01CD2FA0 LDR W8, [X19 + 0x18]
	0x01CD2FA4 ADD X21, X21, 0x1
	0x01CD2FA8 CMP X21, W8, SXTW
	0x01CD2FAC B.LT 0x1CD2F5C
	0x01CD2FB0 LDP X20, X19, [X31 + 0x20]
	0x01CD2FB4 LDP X22, X21, [X31 + 0x10]
	0x01CD2FB8 LDP X30, X23, [X31], #0x30
	0x01CD2FBC RET
	0x01CD2FC0 BL 0x1B6EA24
	0x01CD2FC4 BL 0x1B6EA1C
	0x01CD2FC8 MOV X1, X31
	0x01CD2FCC B 0x3A9EEE4
	0x01CD2FD0 STR X30, [X31 - 0x30]!
	0x01CD2FD4 STP X22, X21, [X31 + 0x10]
	0x01CD2FD8 STP X20, X19, [X31 + 0x20]
	0x01CD2FDC MOV X19, X0
	0x01CD2FE0 BL 0x1CD3064
	0x01CD2FE4 CBZ X0, 0x1CD305C
	0x01CD2FE8 LDR W8, [X0 + 0x18]
	0x01CD2FEC MOV X20, X0
	0x01CD2FF0 CMP W8, 0x1
	0x01CD2FF4 B.LT 0x1CD304C
	0x01CD2FF8 MOV W22, W31
	0x01CD2FFC CMP W22, W8
	0x01CD3000 B.CS 0x1CD3060
	0x01CD3004 ADD X8, X20, W22, 0x3, SXTW
	0x01CD3008 LDR X0, [X8 + 0x20]
	0x01CD300C CBZ X0, 0x1CD305C
	0x01CD3010 MOV X1, X31
	0x01CD3014 BL 0x3A9B084
	0x01CD3018 LDP S0, S1, [X19 + 0x24]
	0x01CD301C LDR V2, [X19 + 0x2C]
	0x01CD3020 MOV X21, X0
	0x01CD3024 MOV X0, X31
	0x01CD3028 BL 0x3A92C2C
	0x01CD302C CBZ X21, 0x1CD305C
	0x01CD3030 MOV X0, X21
	0x01CD3034 MOV X1, X31
	0x01CD3038 BL 0x3AA7878
	0x01CD303C LDR W8, [X20 + 0x18]
	0x01CD3040 ADD W22, W22, 0x1
	0x01CD3044 CMP W22, W8
	0x01CD3048 B.LT 0x1CD2FFC
	0x01CD304C LDP X20, X19, [X31 + 0x20]
	0x01CD3050 LDP X22, X21, [X31 + 0x10]
	0x01CD3054 LDR X30, [X31], #0x30
	0x01CD3058 RET
	0x01CD305C BL 0x1B6EA1C
	0x01CD3060 BL 0x1B6EA24
	0x01CD3064 STP X30, X21, [X31 - 0x20]!
	0x01CD3068 STP X20, X19, [X31 + 0x10]
	0x01CD306C ADRP X20, 0x2550000
	0x01CD3070 ADRP X21, 0x227C000
	0x01CD3074 LDRB W8, [X20 + 0x5E3]
	0x01CD3078 LDR X21, [X21 + 0xAA8]
	0x01CD307C MOV X19, X0
	0x01CD3080 TBNZ X8, 0x0, 0x1CD3098
	0x01CD3084 ADRP X0, 0x227C000
	0x01CD3088 LDR X0, [X0 + 0xAA8]
	0x01CD308C BL 0x1B6E7F0
	0x01CD3090 MOVZ W8, 0x1
	0x01CD3094 STRB W8, [X20 + 0x5E3]
	0x01CD3098 LDR X2, [X21]
	0x01CD309C MOV X0, X19
	0x01CD30A0 LDP X20, X19, [X31 + 0x10]
	0x01CD30A4 MOVZ W1, 0x1
	0x01CD30A8 LDP X30, X21, [X31], #0x20
	0x01CD30AC B 0x2090B0C
	0x01CD30B0 STR D10, [X31 - 0x50]!
	0x01CD30B4 STP D9, D8, [X31 + 0x10]
	0x01CD30B8 STP X30, X23, [X31 + 0x20]
	0x01CD30BC STP X22, X21, [X31 + 0x30]
	0x01CD30C0 STP X20, X19, [X31 + 0x40]
	0x01CD30C4 MOV X19, X0
	0x01CD30C8 BL 0x1CD3064
	0x01CD30CC CBZ X0, 0x1CD3190
	0x01CD30D0 LDR W8, [X0 + 0x18]
	0x01CD30D4 MOV X20, X0
	0x01CD30D8 CMP W8, 0x1
	0x01CD30DC B.LT 0x1CD3178
	0x01CD30E0 MOV W23, W31
	0x01CD30E4 CMP W23, W8
	0x01CD30E8 B.CS 0x1CD3194
	0x01CD30EC ADD X8, X20, W23, 0x3, SXTW
	0x01CD30F0 LDR X22, [X8 + 0x20]
	0x01CD30F4 CBZ X22, 0x1CD3190
	0x01CD30F8 MOV X0, X22
	0x01CD30FC MOV X1, X31
	0x01CD3100 BL 0x3A9B084
	0x01CD3104 LDP S0, S1, [X19 + 0x30]
	0x01CD3108 LDR V2, [X19 + 0x38]
	0x01CD310C MOV X21, X0
	0x01CD3110 MOV X0, X31
	0x01CD3114 BL 0x1CC086C
	0x01CD3118 MOV X0, X22
	0x01CD311C MOV X1, X31
	0x01CD3120 MOV V8.16B, V0.16B
	0x01CD3124 MOV V9.16B, V1.16B
	0x01CD3128 MOV V10.16B, V2.16B
	0x01CD312C BL 0x3A9B084
	0x01CD3130 CBZ X0, 0x1CD3190
	0x01CD3134 MOV X1, X31
	0x01CD3138 BL 0x3AA7658
	0x01CD313C MOV X0, X31
	0x01CD3140 BL 0x1CC086C
	0x01CD3144 FSUB S0, S8, S0
	0x01CD3148 FSUB S1, S9, S1
	0x01CD314C FSUB S2, S10, S2
	0x01CD3150 MOV X0, X31
	0x01CD3154 BL 0x3A92C2C
	0x01CD3158 CBZ X21, 0x1CD3190
	0x01CD315C MOV X0, X21
	0x01CD3160 MOV X1, X31
	0x01CD3164 BL 0x3AA7878
	0x01CD3168 LDR W8, [X20 + 0x18]
	0x01CD316C ADD W23, W23, 0x1
	0x01CD3170 CMP W23, W8
	0x01CD3174 B.LT 0x1CD30E4
	0x01CD3178 LDP X20, X19, [X31 + 0x40]
	0x01CD317C LDP X22, X21, [X31 + 0x30]
	0x01CD3180 LDP X30, X23, [X31 + 0x20]
	0x01CD3184 LDP D9, D8, [X31 + 0x10]
	0x01CD3188 LDR V10, [X31], #0x50
	0x01CD318C RET
	0x01CD3190 BL 0x1B6EA1C
	0x01CD3194 BL 0x1B6EA24
	0x01CD3198 STR X30, [X31 - 0x20]!
	0x01CD319C STP X20, X19, [X31 + 0x10]
	0x01CD31A0 BL 0x1CD3064
	0x01CD31A4 CBZ X0, 0x1CD3204
	0x01CD31A8 LDR W8, [X0 + 0x18]
	0x01CD31AC MOV X19, X0
	0x01CD31B0 CMP W8, 0x1
	0x01CD31B4 B.LT 0x1CD31F8
	0x01CD31B8 MOV W20, W31
	0x01CD31BC CMP W20, W8
	0x01CD31C0 B.CS 0x1CD3208
	0x01CD31C4 ADD X8, X19, W20, 0x3, SXTW
	0x01CD31C8 LDR X0, [X8 + 0x20]
	0x01CD31CC CBZ X0, 0x1CD3204
	0x01CD31D0 MOV X1, X31
	0x01CD31D4 BL 0x3A9B0C0
	0x01CD31D8 CBZ X0, 0x1CD3204
	0x01CD31DC MOVZ W1, 0xF
	0x01CD31E0 MOV X2, X31
	0x01CD31E4 BL 0x3A9D964
	0x01CD31E8 LDR W8, [X19 + 0x18]
	0x01CD31EC ADD W20, W20, 0x1
	0x01CD31F0 CMP W20, W8
	0x01CD31F4 B.LT 0x1CD31BC
	0x01CD31F8 LDP X20, X19, [X31 + 0x10]
	0x01CD31FC LDR X30, [X31], #0x20
	0x01CD3200 RET
	0x01CD3204 BL 0x1B6EA1C
	0x01CD3208 BL 0x1B6EA24
	0x01CD320C SUB X31, X31, 0xE0
	0x01CD3210 STP D15, D14, [X31 + 0x40]
	0x01CD3214 STP D13, D12, [X31 + 0x50]
	0x01CD3218 STP D11, D10, [X31 + 0x60]
	0x01CD321C STP D9, D8, [X31 + 0x70]
	0x01CD3220 STP X29, X30, [X31 + 0x80]
	0x01CD3224 STP X28, X27, [X31 + 0x90]
	0x01CD3228 STP X26, X25, [X31 + 0xA0]
	0x01CD322C STP X24, X23, [X31 + 0xB0]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X29
	011 Move [X31+104], X30
	012 Move [X31+112], X28
	013 Move [X31+120], X27
	014 Move [X31+128], X26
	015 Move [X31+136], X25
	016 Move [X31+144], X24
	017 Move [X31+152], X23
	018 Move [X31+160], X22
	019 Move [X31+168], X21
	020 Move [X31+176], X20
	021 Move [X31+184], X19
	022 Move X20, 0x2552000
	023 Move W8, [X20+1494]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {43}
	029 Move X0, 0x227D000
	030 Move X0, [X0+672]
	031 Call 0x1B6F7F0
	032 Move X0, 0x227C000
	033 Move X0, [X0+1208]
	034 Call 0x1B6F7F0
	035 Move X0, 0x227C000
	036 Move X0, [X0+1144]
	037 Call 0x1B6F7F0
	038 Move X0, 0x227C000
	039 Move X0, [X0+1216]
	040 Call 0x1B6F7F0
	041 Move W8, 1
	042 Move [X20+1494], W8
	043 Move X0, X19
	044 Move X1, X31
	045 Call NetworkBehaviour.Spawned, X0
	046 Move X20, 0x2552000
	047 Move W8, [X20+1110]
	048 Move X21, [X19+192]
	049 Compare W8, 0
	050 JumpIfNotEqual {56}
	051 Move X0, 0x227C000
	052 Move X0, [X0+1152]
	053 Call 0x1B6F7F0
	054 Move W8, 1
	055 Move [X20+1110], W8
	056 Compare X21, 0
	057 JumpIfEqual {444}
	058 Move X20, 0x227C000
	059 Move X20, [X20+1152]
	060 Move V0, [X19+144]
	061 Move X0, X21
	062 Move X1, X31
	063 Move X8, [X20]
	064 Move X8, [X8+184]
	065 Move S3, [X8+16]
	066 Move S1, [X8+20]
	067 Move V4, [X8+12]
	068 Multiply S2, S0, S1
	069 Multiply S1, S0, S3
	070 Multiply S0, S0, S4
	071 Call Transform.set_localScale, X0, X1
	072 Move X0, [X19+200]
	073 Compare X0, 0
	074 JumpIfEqual {444}
	075 Move X1, X31
	076 Call ParticleSystem.Play, X0
	077 Move X0, [X19+64]
	078 Compare X0, 0
	079 JumpIfEqual {410}
	080 Move W8, [X0+96]
	081 Move TEMP, X8
	082 And TEMP, TEMP, 2
	083 Compare TEMP, 2
	084 JumpIfEqual {410}
	085 Move X1, X31
	086 Call NetworkObject.get_HasStateAuthority, X0
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {410}
	091 Move W8, [X19+128]
	092 Compare W8, 0
	093 JumpIfEqual {127}
	094 Move X0, X19
	095 Call Explosion.get__capsulePoint0, X0
	096 Move X0, X19
	097 Move V8, V0
	098 Move V9, V1
	099 Move V10, V2
	100 Call Explosion.get__capsulePoint1, X0
	101 Move W0, [X19+184]
	102 Move V13, [X19+144]
	103 Move X1, X31
	104 Move V11, V0
	105 Move V12, V1
	106 Move V14, V2
	107 Call LayerMask.op_Implicit, X0
	108 Move X8, 0x227C000
	109 Move X8, [X8+1216]
	110 Move W21, W0
	111 Move X8, [X8]
	112 Move W9, [X8+224]
	113 Compare W9, 0
	114 JumpIfNotEqual {117}
	115 Move X0, X8
	116 Call 0x1B6F8F8
	117 Move V0, V8
	118 Move V1, V9
	119 Move V2, V10
	120 Move V3, V11
	121 Move V4, V12
	122 Move V5, V14
	123 Move V6, V13
	124 Move W0, W21
	125 Move X1, X31
	126 Call Physics.OverlapCapsule, X0, X1, V0, X2
	127 Move X0, X19
	128 Move X1, X31
	129 Call Component.get_transform, X0
	130 Compare X0, 0
	131 JumpIfEqual {444}
	132 Move X1, X31
	133 Call Transform.get_position, X0
	134 Move S3, [X19+152]
	135 Move S4, [X19+156]
	136 Move V5, [X19+160]
	137 Move W0, [X19+184]
	138 Move V8, [X19+144]
	139 Move X1, X31
	140 Add S11, S0, S3
	141 Add S10, S1, S4
	142 Add S9, S2, S5
	143 Call LayerMask.op_Implicit, X0
	144 Move X8, 0x227C000
	145 Move X8, [X8+1216]
	146 Move W21, W0
	147 Move X8, [X8]
	148 Move W9, [X8+224]
	149 Compare W9, 0
	150 JumpIfNotEqual {153}
	151 Move X0, X8
	152 Call 0x1B6F8F8
	153 Move V0, V11
	154 Move V1, V10
	155 Move V2, V9
	156 Move V3, V8
	157 Move W0, W21
	158 Move X1, X31
	159 Call Physics.OverlapSphere, X0, V0, X1
	160 Move X21, X0
	161 Compare X0, 0
	162 JumpIfEqual {444}
	163 Move W8, [X21+24]
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Move X9, -19038208
	166 Move V0, [X9+2916]
	167 Move X28, 0x227C000
	168 Move X29, 0x227D000
	169 Move X28, [X28+1144]
	170 Move X29, [X29+672]
	171 Move [X31+12], S0
	172 Move X22, 0x227C000
	173 Move X22, [X22+1160]
	174 Move W27, W31
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Add X8, X21, W27
	177 Move X26, [X8+32]
	178 Compare X26, 0
	179 JumpIfEqual {444}
	180 Move X0, X26
	181 Move X1, X31
	182 Call Component.get_gameObject, X0
	183 Move X23, X0
	184 Move X0, X26
	185 Move X1, X31
	186 Call Collider.get_attachedRigidbody, X0
	187 Move X8, [X28]
	188 Move X24, X0
	189 Move W9, [X8+224]
	190 Compare W9, 0
	191 JumpIfNotEqual {194}
	192 Move X0, X8
	193 Call 0x1B6F8F8
	194 Move X0, X24
	195 Move X1, X31
	196 Move X2, X31
	197 Call Object.op_Inequality, X0, X1
	198 Move TEMP, X0
	199 And TEMP, TEMP, 1
	200 Compare TEMP, 1
	201 JumpIfNotEqual {210}
	202 Move X0, X26
	203 Move X1, X31
	204 Call Collider.get_attachedRigidbody, X0
	205 Compare X0, 0
	206 JumpIfEqual {444}
	207 Move X1, X31
	208 Call Component.get_gameObject, X0
	209 Move X23, X0
	210 Compare X23, 0
	211 JumpIfEqual {444}
	212 Move X1, [X29]
	213 Move X0, X23
	214 Call 0x20D04D0, X0
	215 Compare X0, 0
	216 JumpIfEqual {305}
	217 Move W24, [X19+164]
	218 Move X23, X0
	219 Move X0, X19
	220 Move X1, X31
	221 Call Component.get_transform, X0
	222 Compare X0, 0
	223 JumpIfEqual {444}
	224 Move X1, X31
	225 Call Transform.get_position, X0
	226 Move X25, [X19+176]
	227 Move X0, X26
	228 Move X1, X31
	229 Move V8, V0
	230 Move V9, V1
	231 Move V10, V2
	232 Call Component.get_gameObject, X0
	233 Compare X0, 0
	234 JumpIfEqual {444}
	235 Move X1, X31
	236 Call GameObject.get_transform, X0
	237 Compare X0, 0
	238 JumpIfEqual {444}
	239 Move X1, X31
	240 Call Transform.get_position, X0
	241 Move X0, X19
	242 Move X1, X31
	243 Move V11, V0
	244 Move V12, V1
	245 Move V13, V2
	246 Call Component.get_transform, X0
	247 Compare X0, 0
	248 JumpIfEqual {444}
	249 Move X1, X31
	250 Move [X31+20], S10
	251 Move [X31+28], S9
	252 Move [X31+28], S8
	253 Call Transform.get_position, X0
	254 Move X8, 0x2552000
	255 Move W8, [X8+1090]
	256 Move V15, V1
	257 Move V8, V2
	258 Move [X31+16], S0
	259 Compare W8, 0
	260 JumpIfNotEqual {266}
	261 Move X0, X20
	262 Call 0x1B6F7F0
	263 Move X8, 0x2552000
	264 Move W9, 1
	265 Move [X8+1090], W9
	266 Move X8, [X20]
	267 Move X9, 0x2552000
	268 Move W9, [X9+1089]
	269 Move X8, [X8+184]
	270 Move S14, [X8+24]
	271 Move S10, [X8+28]
	272 Move V9, [X8+32]
	273 Compare W9, 0
	274 JumpIfNotEqual {280}
	275 Move X0, X22
	276 Call 0x1B6F7F0
	277 Move W8, 1
	278 Move X9, 0x2552000
	279 Move [X9+1089], W8
	280 Move X0, [X22]
	281 Move W8, [X0+224]
	282 Compare W8, 0
	283 JumpIfNotEqual {285}
	284 Call 0x1B6F8F8
	285 Move V0, [X31+16]
	286 Subtract S1, S12, S15
	287 Subtract S2, S13, S8
	288 Add S1, S1, S10
	289 Subtract S0, S11, S0
	290 Add S0, S0, S14
	291 Add S2, S2, S9
	292 Multiply S3, S0, S0
	293 Multiply S4, S1, S1
	294 Add S3, S3, S4
	295 Multiply S4, S2, S2
	296 Add S3, S4, S3
	297 Move V4, [X31+12]
	298 NotImplemented "Instruction FSQRT not yet implemented."
	299 NotImplemented "Instruction FCMP not yet implemented."
	300 Move V9, [X31+28]
	301 Move V10, [X31+20]
	302 NotImplemented "Instruction FDIV not yet implemented."
	303 NotImplemented "Instruction FDIV not yet implemented."
	304 NotImplemented "Instruction FDIV not yet implemented."
	305 Move X0, X26
	306 Move X1, X31
	307 Call Collider.get_attachedRigidbody, X0
	308 Move X8, [X28]
	309 Move X23, X0
	310 Move W9, [X8+224]
	311 Compare W9, 0
	312 JumpIfNotEqual {315}
	313 Move X0, X8
	314 Call 0x1B6F8F8
	315 Move X0, X23
	316 Move X1, X31
	317 Move X2, X31
	318 Call Object.op_Inequality, X0, X1
	319 Move TEMP, X0
	320 And TEMP, TEMP, 1
	321 Compare TEMP, 1
	322 JumpIfNotEqual {400}
	323 Move X0, X26
	324 Move X1, X31
	325 Call Collider.get_attachedRigidbody, X0
	326 Move X23, X0
	327 Move X0, X19
	328 Move X1, X31
	329 Call Component.get_transform, X0
	330 Compare X0, 0
	331 JumpIfEqual {444}
	332 Move X1, X31
	333 Call Transform.get_position, X0
	334 Compare X23, 0
	335 JumpIfEqual {444}
	336 Move V4, [X19+144]
	337 Move V3, V0
	338 Move V7, V1
	339 Move V6, V2
	340 Move W8, 0x447A0000
	341 Move S5, 1
	342 Move S0, W8
	343 Move X0, X23
	344 Move V1, V3
	345 Move V2, V7
	346 Move V3, V6
	347 Move X1, X31
	348 Call Rigidbody.AddExplosionForce, X0, V0, X1, V1, V2
	349 Move X8, 0x2551000
	350 Move W8, [X8+1087]
	351 Move V9, [X31+28]
	352 Move V10, [X31+20]
	353 Compare W8, 0
	354 JumpIfNotEqual {360}
	355 Move X0, X20
	356 Call 0x1B6F7F0
	357 Move W8, 1
	358 Move X9, 0x2551000
	359 Move [X9+1087], W8
	360 Move X8, [X20]
	361 Move X8, [X8+184]
	362 Move S8, [X8]
	363 Move S11, [X8+4]
	364 Move V12, [X8+8]
	365 Move X8, [X23]
	366 Move X10, 0x227B000
	367 Move V13, [X19+168]
	368 Move X26, [X19+136]
	369 NotImplemented "Instruction LDRH not yet implemented."
	370 Move X10, [X10+1208]
	371 Move X1, [X10]
	372 Compare X9, 0
	373 JumpIfEqual {380}
	374 Move X10, [X8+176]
	375 Add X10, X10, 8
	376 NotImplemented "Instruction LDUR not yet implemented."
	377 NotImplemented "Instruction CMP not yet implemented."
	378 Subtract X9, X9, 1
	379 Add X10, X10, 16
	380 Move X0, X23
	381 Move W2, W31
	382 Call 0x1BB5284
	383 NotImplemented "Instruction LDRSW not yet implemented."
	384 Add X8, X8, X9
	385 Add X0, X8, 312
	386 Move X8, [X0]
	387 Move X5, [X0+8]
	388 Move V1, [X31+24]
	389 Multiply S3, S8, S13
	390 Multiply S4, S11, S13
	391 Multiply S5, S12, S13
	392 Move X0, X23
	393 Move W1, W24
	394 Move V0, V9
	395 Move V2, V10
	396 Move X2, X25
	397 Move X3, X25
	398 Move X4, X26
	399 NotImplemented "Instruction BLR not yet implemented."
	400 Move W8, [X21+24]
	401 Add W27, W27, 1
	402 NotImplemented "Instruction CMP not yet implemented."
	403 Move X0, [X19+56]
	404 Move S0, 5
	405 Move X1, X31
	406 Call TickTimer.CreateFromSeconds, X0, V0
	407 And X1, X0, 0
	408 Move X0, X19
	409 Call Explosion.set_life, X0, X1
	410 Move X20, [X19+176]
	411 Move X0, X19
	412 Move X1, X31
	413 Call Component.get_transform, X0
	414 Compare X0, 0
	415 JumpIfEqual {444}
	416 Move X1, X31
	417 Call Transform.get_position, X0
	418 Move X0, X20
	419 Move X20, [X31+176]
	420 Move X19, [X31+184]
	421 Move X22, [X31+160]
	422 Move X21, [X31+168]
	423 Move X24, [X31+144]
	424 Move X23, [X31+152]
	425 Move X26, [X31+128]
	426 Move X25, [X31+136]
	427 Move X28, [X31+112]
	428 Move X27, [X31+120]
	429 Move X29, [X31+96]
	430 Move X30, [X31+104]
	431 Move D9, [X31+80]
	432 Move D8, [X31+88]
	433 Move D11, [X31+64]
	434 Move D10, [X31+72]
	435 Move D13, [X31+48]
	436 Move D12, [X31+56]
	437 Move D15, [X31+32]
	438 Move D14, [X31+40]
	439 Move S3, 1
	440 Move X1, X31
	441 Add X31, X31, 192
	442 Call SFXManager.PlaySFX, X0, X1, V0
	443 Return 
	444 Call 0x1B6FA1C
	445 Call 0x1B6FA24

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01CD3230 STP X22, X21, [X31 + 0xC0]
	0x01CD3234 STP X20, X19, [X31 + 0xD0]
	0x01CD3238 ADRP X20, 0x2550000
	0x01CD323C LDRB W8, [X20 + 0x5E2]
	0x01CD3240 MOV X19, X0
	0x01CD3244 TBNZ X8, 0x0, 0x1CD3268
	0x01CD3248 ADRP X0, 0x227B000
	0x01CD324C LDR X0, [X0 + 0x3D8]
	0x01CD3250 BL 0x1B6E7F0
	0x01CD3254 ADRP X0, 0x227A000
	0x01CD3258 LDR X0, [X0 + 0x4C0]
	0x01CD325C BL 0x1B6E7F0
	0x01CD3260 MOVZ W8, 0x1
	0x01CD3264 STRB W8, [X20 + 0x5E2]
	0x01CD3268 MOVI V0.2D, 0x0
	0x01CD326C MOV X0, X19
	0x01CD3270 STUR V0, [X31 + 0x2C]
	0x01CD3274 STP V0, V0, [X31 + 0x10]
	0x01CD3278 BL 0x1CD3064
	0x01CD327C CBZ X0, 0x1CD3480
	0x01CD3280 LDR W8, [X0 + 0x18]
	0x01CD3284 MOV X19, X0
	0x01CD3288 CMP W8, 0x1
	0x01CD328C B.LT 0x1CD3450
	0x01CD3290 ADRP X24, 0x227B000
	0x01CD3294 ADRP X25, 0x227A000
	0x01CD3298 ADRP X20, 0x227A000
	0x01CD329C ADRP X9, 0xFFFFFFFFFEDD6000
	0x01CD32A0 LDR X24, [X24 + 0x3D8]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call NetworkBehaviour.FixedUpdateNetwork, X0
	007 Move X0, [X19+64]
	008 Compare X0, 0
	009 JumpIfEqual {38}
	010 Move W8, [X0+96]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 2
	013 Compare TEMP, 2
	014 JumpIfEqual {38}
	015 Move X1, X31
	016 Call NetworkObject.get_HasStateAuthority, X0
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {38}
	021 Move X0, X19
	022 Call Explosion.get_life, X0
	023 Move [X31+8], W0
	024 Move X1, [X19+56]
	025 Add X0, X31, 8
	026 Move X2, X31
	027 Call TickTimer.Expired, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {38}
	032 Move X0, [X19+56]
	033 Compare X0, 0
	034 JumpIfEqual {42}
	035 Move X1, [X19+64]
	036 Move X2, X31
	037 Call NetworkRunner.Despawn, X0, X1
	038 Move X30, [X31+16]
	039 Move X19, [X31+24]
	040 Add X31, X31, 32
	041 Return 
	042 Call 0x1B6FA1C

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01CD32A4 LDR X25, [X25 + 0x4C0]
	0x01CD32A8 LDR X20, [X20 + 0x480]
	0x01CD32AC LDR V0, [X9 + 0xAB0]
	0x01CD32B0 MOV W23, W31
	0x01CD32B4 ADRP X26, 0x2550000
	0x01CD32B8 MOVZ W27, 0x1
	0x01CD32BC ADRP X28, 0x2550000
	0x01CD32C0 MOVZ W29, 0x447A0000
	0x01CD32C4 STR S0, [X31 + 0x8]
	0x01CD32C8 CMP W23, W8
	0x01CD32CC B.CS 0x1CD3484
	0x01CD32D0 ADD X8, X19, W23, 0x3, SXTW
	0x01CD32D4 LDR X21, [X8 + 0x20]
	0x01CD32D8 CBZ X21, 0x1CD3480
	0x01CD32DC MOV X0, X21
	0x01CD32E0 MOV X1, X31
	0x01CD32E4 BL 0x3A9B084
	0x01CD32E8 CBZ X0, 0x1CD3480
	0x01CD32EC MOV X1, X31
	0x01CD32F0 BL 0x3AA7658
	0x01CD32F4 LDRB W8, [X26 + 0x442]
	0x01CD32F8 MOV V9.16B, V1.16B
	0x01CD32FC MOV V10.16B, V2.16B
	0x01CD3300 STR S0, [X31 + 0xC]
	0x01CD3304 CBNZ W8, 0x1CD3314
	0x01CD3308 MOV X0, X20
	0x01CD330C BL 0x1B6E7F0
	0x01CD3310 STRB W27, [X26 + 0x442]
	0x01CD3314 LDR X8, [X20]
	0x01CD3318 LDRB W9, [X28 + 0x510]
	0x01CD331C LDR X8, [X8 + 0xB8]
	0x01CD3320 LDP S8, S14, [X8 + 0x18]
	0x01CD3324 LDR V15, [X8 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move S0, 1
	006 Move S1, W31
	007 Move S2, W31
	008 Move S3, 1
	009 Move X0, X31
	010 Call Gizmos.set_color, X0
	011 Move W8, [X19+128]
	012 Compare W8, 0
	013 JumpIfEqual {23}
	014 Move X0, X19
	015 Call Explosion.get__capsulePoint0, X0
	016 Move X20, X19
	017 Add X20, X20, 144
	018 Move V3, [X20]
	019 Move X0, X31
	020 Call Gizmos.DrawWireSphere, X0, V0
	021 Move X0, X19
	022 Call Explosion.get__capsulePoint1, X0
	023 Move X0, X19
	024 Move X1, X31
	025 Call Component.get_transform, X0
	026 Compare X0, 0
	027 JumpIfEqual {38}
	028 Move X1, X31
	029 Call Transform.get_position, X0
	030 Add X20, X19, 144
	031 Move V3, [X20]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X0, X31
	035 Move X30, [X31+32]
	036 Call Gizmos.DrawWireSphere, X0, V0
	037 Return 
	038 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CD3328 CBNZ W9, 0x1CD3340
	0x01CD332C MOV X0, X20
	0x01CD3330 BL 0x1B6E7F0
	0x01CD3334 LDR X8, [X20]
	0x01CD3338 STRB W27, [X28 + 0x510]
	0x01CD333C LDR X8, [X8 + 0xB8]
	0x01CD3340 LDR X0, [X24]
	0x01CD3344 LDP S12, S11, [X8 + 0x24]
	0x01CD3348 LDR V13, [X8 + 0x2C]
	0x01CD334C LDR W9, [X0 + 0xE0]
	0x01CD3350 CBNZ W9, 0x1CD335C
	0x01CD3354 BL 0x1B6E8F8
	0x01CD3358 LDR X0, [X24]
	0x01CD335C LDR X8, [X0 + 0xB8]
	0x01CD3360 MOV X1, X31
	0x01CD3364 LDR W0, [X8]
	0x01CD3368 BL 0x3A9DE68
	0x01CD336C LDR X8, [X25]
	0x01CD3370 MOV W22, W0
	0x01CD3374 LDR W9, [X8 + 0xE0]
	0x01CD3378 CBNZ W9, 0x1CD3384
	0x01CD337C MOV X0, X8
	0x01CD3380 BL 0x1B6E8F8
	0x01CD3384 LDR V3, [X31 + 0xC]
	0x01CD3388 FMOV S2, 0.5
	0x01CD338C FMUL S0, S8, S2
	0x01CD3390 FMUL S1, S14, S2
	0x01CD3394 FMUL S2, S15, S2
	0x01CD3398 FADD S0, S3, S0
	0x01CD339C FADD S1, S9, S1
	0x01CD33A0 FADD S2, S10, S2
	0x01CD33A4 ADD X0, X31, 0x10
	0x01CD33A8 FMOV S6, W29
	0x01CD33AC MOV V3.16B, V12.16B
	0x01CD33B0 MOV V4.16B, V11.16B
	0x01CD33B4 MOV V5.16B, V13.16B
	0x01CD33B8 MOV W1, W22
	0x01CD33BC MOV X2, X31
	0x01CD33C0 BL 0x3AF3258
	0x01CD33C4 TBZ X0, 0x0, 0x1CD3440
	0x01CD33C8 MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2551000
	006 Move X21, 0x227D000
	007 Move W8, [X20+1495]
	008 Move X21, [X21+2624]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x227D000
	015 Move X0, [X0+2624]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1495], W8
	019 Move X8, [X21]
	020 Move V0, 0
	021 Move [X19+144], D0
	022 Move X20, 0x2551000
	023 Move [X19+136], X8
	024 Move W8, [X20+1087]
	025 Compare W8, 0
	026 JumpIfNotEqual {32}
	027 Move X0, 0x227B000
	028 Move X0, [X0+1152]
	029 Call 0x1B6F7F0
	030 Move W8, 1
	031 Move [X20+1087], W8
	032 Move X8, 0x227B000
	033 Move X8, [X8+1152]
	034 Move X0, X19
	035 Move X1, X31
	036 Move X8, [X8]
	037 Move X8, [X8+184]
	038 Move V0, [X8]
	039 Move V1, [X8+8]
	040 Move X8, 100
	041 NotImplemented "Instruction MOVK not yet implemented."
	042 Move [X19+152], D0
	043 Move [X19+160], S1
	044 Move [X19+164], X8
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call NetworkBehaviour..ctor, X0
	050 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01CD33CC MOV X1, X31
	0x01CD33D0 BL 0x3A9B084

ISIL:
	001 Move W1, [X0+208]
	002 Call Explosion.set_life, X0, X1
	003 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01CD33D4 MOV X21, X0
	0x01CD33D8 ADD X0, X31, 0x10
	0x01CD33DC MOV X1, X31
	0x01CD33E0 BL 0x3AF6270
	0x01CD33E4 LDRB W8, [X26 + 0x442]
	0x01CD33E8 MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Explosion.get_life, X0
	005 Move [X19+208], W0
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return 

