Type: AnimalCompany.Crossbow

Method: System.Void Awake()

Disassembly:
	0x01D8D5F0 ADRP X22, 0x2366000
	0x01D8D5F4 LDRB W8, [X21 + 0x9DE]
	0x01D8D5F8 LDR X22, [X22 + 0x598]
	0x01D8D5FC MOV X20, X1
	0x01D8D600 MOV X19, X0
	0x01D8D604 TBNZ X8, 0x0, 0x1D8D628
	0x01D8D608 ADRP X0, 0x2369000
	0x01D8D60C LDR X0, [X0 + 0xBF8]
	0x01D8D610 BL 0x1C16CF4
	0x01D8D614 ADRP X0, 0x2366000
	0x01D8D618 LDR X0, [X0 + 0x598]
	0x01D8D61C BL 0x1C16CF4
	0x01D8D620 MOVZ W8, 0x1
	0x01D8D624 STRB W8, [X21 + 0x9DE]
	0x01D8D628 LDR X0, [X22]
	0x01D8D62C LDR X21, [X19 + 0x38]
	0x01D8D630 LDR W8, [X0 + 0xE0]
	0x01D8D634 CBNZ W8, 0x1D8D63C
	0x01D8D638 BL 0x1C16DFC
	0x01D8D63C MOV X0, X21
	0x01D8D640 MOV X1, X31
	0x01D8D644 MOV X2, X31
	0x01D8D648 BL 0x3C3883C
	0x01D8D64C TBNZ X0, 0x0, 0x1D8D840
	0x01D8D650 LDR X0, [X19 + 0x38]
	0x01D8D654 CBZ X0, 0x1D8D85C
	0x01D8D658 LDR X1, [X19 + 0x40]
	0x01D8D65C MOV X2, X31
	0x01D8D660 BL 0x1EA1A20
	0x01D8D664 TBZ X0, 0x0, 0x1D8D840
	0x01D8D668 LDR X0, [X19 + 0x40]
	0x01D8D66C CBZ X0, 0x1D8D840
	0x01D8D670 LDRB W8, [X0 + 0x60]
	0x01D8D674 TBNZ X8, 0x1, 0x1D8D840
	0x01D8D678 MOV X1, X31
	0x01D8D67C BL 0x1E93668
	0x01D8D680 TBZ X0, 0x0, 0x1D8D840
	0x01D8D684 MOV X0, X31
	0x01D8D688 BL 0x3C3C6C4
	0x01D8D68C LDR V1, [X19 + 0x98]
	0x01D8D690 FSUB S0, S0, S1
	0x01D8D694 FMOV S1, 0.5
	0x01D8D698 FCMP S0, S1
	0x01D8D69C B.MI 0x1D8D840
	0x01D8D6A0 CBZ X20, 0x1D8D85C
	0x01D8D6A4 ADRP X8, 0x2369000
	0x01D8D6A8 LDR X8, [X8 + 0xBF8]
	0x01D8D6AC MOV X0, X20
	0x01D8D6B0 LDR X1, [X8]
	0x01D8D6B4 BL 0x21A3894
	0x01D8D6B8 LDR X8, [X22]
	0x01D8D6BC MOV X20, X0
	0x01D8D6C0 LDR W9, [X8 + 0xE0]
	0x01D8D6C4 CBNZ W9, 0x1D8D6D0
	0x01D8D6C8 MOV X0, X8
	0x01D8D6CC BL 0x1C16DFC
	0x01D8D6D0 MOV X0, X20
	0x01D8D6D4 MOV X1, X31
	0x01D8D6D8 MOV X2, X31
	0x01D8D6DC BL 0x3C354F8
	0x01D8D6E0 TBZ X0, 0x0, 0x1D8D840
	0x01D8D6E4 CBZ X20, 0x1D8D85C
	0x01D8D6E8 MOV X0, X20
	0x01D8D6EC MOV X1, X31
	0x01D8D6F0 BL 0x1DAECCC
	0x01D8D6F4 TBNZ X0, 0x0, 0x1D8D840
	0x01D8D6F8 MOV X0, X19
	0x01D8D6FC MOV X1, X31
	0x01D8D700 BL 0x3C32E90
	0x01D8D704 CBZ X0, 0x1D8D85C
	0x01D8D708 MOV X1, X31
	0x01D8D70C BL 0x3C3F58C
	0x01D8D710 LDR X0, [X19 + 0x88]
	0x01D8D714 CBZ X0, 0x1D8D85C
	0x01D8D718 MOV X1, X31
	0x01D8D71C MOV V8.16B, V0.16B
	0x01D8D720 MOV V9.16B, V1.16B
	0x01D8D724 MOV V10.16B, V2.16B
	0x01D8D728 BL 0x3C8E868
	0x01D8D72C LDR X0, [X19 + 0x88]
	0x01D8D730 CBZ X0, 0x1D8D85C
	0x01D8D734 MOV X1, X31
	0x01D8D738 MOV V12.16B, V0.16B
	0x01D8D73C MOV V13.16B, V1.16B
	0x01D8D740 MOV V11.16B, V2.16B
	0x01D8D744 BL 0x3C8EBE8
	0x01D8D748 LDR X8, [X19 + 0x90]
	0x01D8D74C CBZ X8, 0x1D8D85C
	0x01D8D750 LDR X8, [X8 + 0x80]
	0x01D8D754 CBZ X8, 0x1D8D85C
	0x01D8D758 ADRP X9, 0xFFFFFFFFFED5D000
	0x01D8D75C LDR V5, [X9 + 0x330]
	0x01D8D760 LDR X9, [X19 + 0x40]
	0x01D8D764 LDR X4, [X8 + 0x18]
	0x01D8D768 FMUL S1, S12, S0
	0x01D8D76C FMUL S2, S13, S0
	0x01D8D770 FMUL S0, S11, S0
	0x01D8D774 FMUL S3, S1, S5
	0x01D8D778 FMUL S4, S2, S5
	0x01D8D77C FMUL S5, S0, S5
	0x01D8D780 CBZ X9, 0x1D8D794
	0x01D8D784 LDR X8, [X9 + 0x20]
	0x01D8D788 CBZ X8, 0x1D8D794
	0x01D8D78C LDR W5, [X8]
	0x01D8D790 B 0x1D8D798
	0x01D8D794 MOV X5, X31
	0x01D8D798 LDR W8, [X19 + 0x68]
	0x01D8D79C MOVZ W1, 0xF
	0x01D8D7A0 MOV X0, X20
	0x01D8D7A4 MOV V0.16B, V8.16B
	0x01D8D7A8 BFM X5, X8, 0x20, 0x1F
	0x01D8D7AC MOV V1.16B, V9.16B
	0x01D8D7B0 MOV V2.16B, V10.16B
	0x01D8D7B4 MOV X2, X31
	0x01D8D7B8 MOV X3, X31
	0x01D8D7BC MOV X6, X31
	0x01D8D7C0 BL 0x1DB7954
	0x01D8D7C4 LDR X0, [X19 + 0x88]
	0x01D8D7C8 CBZ X0, 0x1D8D85C
	0x01D8D7CC MOV X1, X31
	0x01D8D7D0 BL 0x3C8E868
	0x01D8D7D4 LDR X20, [X19 + 0x80]
	0x01D8D7D8 MOV X0, X19
	0x01D8D7DC MOV X1, X31
	0x01D8D7E0 MOV V8.16B, V0.16B
	0x01D8D7E4 MOV V9.16B, V1.16B
	0x01D8D7E8 MOV V10.16B, V2.16B
	0x01D8D7EC BL 0x3C32E90
	0x01D8D7F0 CBZ X0, 0x1D8D85C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x264C000
	008 Move X21, 0x236A000
	009 Move W8, [X20+2518]
	010 Move X21, [X21+3000]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0x236A000
	017 Move X0, [X0+3008]
	018 Call 0x1C17CF4
	019 Move X0, 0x2368000
	020 Move X0, [X0+3696]
	021 Call 0x1C17CF4
	022 Move X0, 0x236A000
	023 Move X0, [X0+3000]
	024 Call 0x1C17CF4
	025 Move X0, 0x236A000
	026 Move X0, [X0+3016]
	027 Call 0x1C17CF4
	028 Move X0, 0x236A000
	029 Move X0, [X0+3024]
	030 Call 0x1C17CF4
	031 Move X0, 0x236A000
	032 Move X0, [X0+3032]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+2518], W8
	036 Move X1, [X21]
	037 Move X0, X19
	038 Call 0x21A4894, X0
	039 Move [X19+160], X0
	040 Compare X0, 0
	041 JumpIfEqual {140}
	042 Move X23, 0x2368000
	043 Move X23, [X23+3696]
	044 Move X20, X0
	045 Move X21, [X0+472]
	046 Move X22, 0x236A000
	047 Move X0, [X23]
	048 Move X22, [X22+3024]
	049 Call 0x1C17F10
	050 Move X2, [X22]
	051 Move X1, X19
	052 Move X3, X31
	053 Move X22, X0
	054 Call Action..ctor, X0, X1, X2
	055 Move X0, X21
	056 Move X1, X22
	057 Move X2, X31
	058 Call Delegate.Combine, X0, X1
	059 Move X1, [X23]
	060 Compare X0, 0
	061 JumpIfEqual {67}
	062 Move X8, [X0]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move [X20+472], X0
	065 Move X8, [X0]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move [X20+472], X0
	068 Move X22, [X19+160]
	069 Compare X22, 0
	070 JumpIfEqual {140}
	071 Move X21, 0x236A000
	072 Move X20, [X22+464]
	073 Move X21, [X21+3032]
	074 Move X0, X1
	075 Call 0x1C17F10
	076 Move X2, [X21]
	077 Move X1, X19
	078 Move X3, X31
	079 Move X21, X0
	080 Call Action..ctor, X0, X1, X2
	081 Move X0, X20
	082 Move X1, X21
	083 Move X2, X31
	084 Call Delegate.Combine, X0, X1
	085 Compare X0, 0
	086 JumpIfEqual {94}
	087 Move X1, [X23]
	088 Move X8, [X0]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move [X22+464], X0
	091 Move X8, [X0]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Call 0x1C181E0
	094 Move [X22+464], X0
	095 Move X22, [X19+128]
	096 Compare X22, 0
	097 JumpIfEqual {140}
	098 Move X23, 0x236A000
	099 Move X23, [X23+3008]
	100 Move X21, 0x236A000
	101 Move X20, [X22+144]
	102 Move X0, [X23]
	103 Move X21, [X21+3016]
	104 Call 0x1C17F10
	105 Move X2, [X21]
	106 Move X1, X19
	107 Move X3, X31
	108 Move X21, X0
	109 Call Action`2<Int32Enum, Object>..ctor, X0, X1, X2
	110 Move X0, X20
	111 Move X1, X21
	112 Move X2, X31
	113 Call Delegate.Combine, X0, X1
	114 Compare X0, 0
	115 JumpIfEqual {132}
	116 Move X21, [X23]
	117 Move X20, X0
	118 Move X1, X21
	119 Call 0x1C17E00
	120 Compare X0, 0
	121 JumpIfEqual {129}
	122 Move [X22+144], X0
	123 Move X21, [X23]
	124 Move X0, X20
	125 Move X1, X21
	126 Call 0x1C17E00
	127 Compare X0, 0
	128 JumpIfNotEqual {133}
	129 Move X0, X20
	130 Move X1, X21
	131 Call 0x1C181E0
	132 Move [X22+144], X31
	133 Move X0, X19
	134 Move X20, [X31+32]
	135 Move X19, [X31+40]
	136 Move X22, [X31+16]
	137 Move X21, [X31+24]
	138 Move X30, [X31+48]
	139 Move X23, [X31+56]
	140 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x01D8D980 STRB W8, [X20 + 0x9DF]
	0x01D8D984 LDR X23, [X19 + 0x80]
	0x01D8D988 CBZ X23, 0x1D8DA74
	0x01D8D98C ADRP X22, 0x2367000
	0x01D8D990 LDR X22, [X22 + 0xE70]
	0x01D8D994 ADRP X21, 0x2369000
	0x01D8D998 LDR X20, [X23 + 0x1D8]
	0x01D8D99C LDR X0, [X22]
	0x01D8D9A0 LDR X21, [X21 + 0xC20]
	0x01D8D9A4 BL 0x1C16F10
	0x01D8D9A8 LDR X2, [X21]
	0x01D8D9AC MOV X1, X19
	0x01D8D9B0 MOV X3, X31
	0x01D8D9B4 MOV X21, X0
	0x01D8D9B8 BL 0x3314368
	0x01D8D9BC MOV X0, X20
	0x01D8D9C0 MOV X1, X21
	0x01D8D9C4 MOV X2, X31
	0x01D8D9C8 BL 0x33C0DE4
	0x01D8D9CC LDR X1, [X22]
	0x01D8D9D0 CBZ X0, 0x1D8D9F4
	0x01D8D9D4 LDR X8, [X0]
	0x01D8D9D8 CMP X8, X1
	0x01D8D9DC B.NE 0x1D8DA5C
	0x01D8D9E0 STR X0, [X23 + 0x1D8]
	0x01D8D9E4 LDR X8, [X0]
	0x01D8D9E8 CMP X8, X1
	0x01D8D9EC B.EQ 0x1D8D9F8
	0x01D8D9F0 B 0x1D8DA5C
	0x01D8D9F4 STR X0, [X23 + 0x1D8]
	0x01D8D9F8 LDR X23, [X19 + 0x80]
	0x01D8D9FC CBZ X23, 0x1D8DA74
	0x01D8DA00 ADRP X21, 0x2369000
	0x01D8DA04 LDR X20, [X23 + 0x1E0]
	0x01D8DA08 LDR X21, [X21 + 0xC18]
	0x01D8DA0C MOV X0, X1
	0x01D8DA10 BL 0x1C16F10
	0x01D8DA14 LDR X2, [X21]
	0x01D8DA18 MOV X1, X19
	0x01D8DA1C MOV X3, X31
	0x01D8DA20 MOV X21, X0
	0x01D8DA24 BL 0x3314368
	0x01D8DA28 MOV X0, X20
	0x01D8DA2C MOV X1, X21
	0x01D8DA30 MOV X2, X31
	0x01D8DA34 BL 0x33C0DE4
	0x01D8DA38 CBZ X0, 0x1D8DA60
	0x01D8DA3C LDR X1, [X22]
	0x01D8DA40 LDR X8, [X0]
	0x01D8DA44 CMP X8, X1
	0x01D8DA48 B.NE 0x1D8DA5C
	0x01D8DA4C STR X0, [X23 + 0x1E0]
	0x01D8DA50 LDR X8, [X0]
	0x01D8DA54 CMP X8, X1
	0x01D8DA58 B.EQ 0x1D8DA64
	0x01D8DA5C BL 0x1C171E0
	0x01D8DA60 STR X0, [X23 + 0x1E0]
	0x01D8DA64 LDP X20, X19, [X31 + 0x20]
	0x01D8DA68 LDP X22, X21, [X31 + 0x10]
	0x01D8DA6C LDP X30, X23, [X31], #0x30
	0x01D8DA70 RET
	0x01D8DA74 BL 0x1C16F20
	0x01D8DA78 STP X30, X23, [X31 - 0x30]!
	0x01D8DA7C STP X22, X21, [X31 + 0x10]
	0x01D8DA80 STP X20, X19, [X31 + 0x20]
	0x01D8DA84 ADRP X20, 0x264B000
	0x01D8DA88 ADRP X21, 0x2369000
	0x01D8DA8C LDRB W8, [X20 + 0x9E0]
	0x01D8DA90 LDR X21, [X21 + 0xA78]
	0x01D8DA94 MOV X19, X0
	0x01D8DA98 TBNZ X8, 0x0, 0x1D8DAD4
	0x01D8DA9C ADRP X0, 0x2367000
	0x01D8DAA0 LDR X0, [X0 + 0xE70]
	0x01D8DAA4 BL 0x1C16CF4
	0x01D8DAA8 ADRP X0, 0x2369000
	0x01D8DAAC LDR X0, [X0 + 0xC18]
	0x01D8DAB0 BL 0x1C16CF4
	0x01D8DAB4 ADRP X0, 0x2369000
	0x01D8DAB8 LDR X0, [X0 + 0xC20]
	0x01D8DABC BL 0x1C16CF4
	0x01D8DAC0 ADRP X0, 0x2369000
	0x01D8DAC4 LDR X0, [X0 + 0xA78]
	0x01D8DAC8 BL 0x1C16CF4
	0x01D8DACC MOVZ W8, 0x1
	0x01D8DAD0 STRB W8, [X20 + 0x9E0]
	0x01D8DAD4 LDR X0, [X21]
	0x01D8DAD8 LDR W8, [X0 + 0xE0]
	0x01D8DADC CBNZ W8, 0x1D8DAE4
	0x01D8DAE0 BL 0x1C16DFC
	0x01D8DAE4 CBZ X19, 0x1D8DBE4
	0x01D8DAE8 LDR W8, [X19 + 0x30]
	0x01D8DAEC LDR X23, [X19 + 0x80]
	0x01D8DAF0 ORR W8, W8, 0x8
	0x01D8DAF4 STR W8, [X19 + 0x30]
	0x01D8DAF8 CBZ X23, 0x1D8DBE4
	0x01D8DAFC ADRP X22, 0x2367000
	0x01D8DB00 LDR X22, [X22 + 0xE70]
	0x01D8DB04 ADRP X21, 0x2369000
	0x01D8DB08 LDR X20, [X23 + 0x1D8]
	0x01D8DB0C LDR X0, [X22]
	0x01D8DB10 LDR X21, [X21 + 0xC20]
	0x01D8DB14 BL 0x1C16F10
	0x01D8DB18 LDR X2, [X21]
	0x01D8DB1C MOV X1, X19
	0x01D8DB20 MOV X3, X31
	0x01D8DB24 MOV X21, X0
	0x01D8DB28 BL 0x3314368
	0x01D8DB2C MOV X0, X20
	0x01D8DB30 MOV X1, X21
	0x01D8DB34 MOV X2, X31
	0x01D8DB38 BL 0x33C0FDC
	0x01D8DB3C LDR X1, [X22]
	0x01D8DB40 CBZ X0, 0x1D8DB64
	0x01D8DB44 LDR X8, [X0]
	0x01D8DB48 CMP X8, X1
	0x01D8DB4C B.NE 0x1D8DBCC
	0x01D8DB50 STR X0, [X23 + 0x1D8]
	0x01D8DB54 LDR X8, [X0]
	0x01D8DB58 CMP X8, X1
	0x01D8DB5C B.EQ 0x1D8DB68
	0x01D8DB60 B 0x1D8DBCC
	0x01D8DB64 STR X0, [X23 + 0x1D8]
	0x01D8DB68 LDR X23, [X19 + 0x80]
	0x01D8DB6C CBZ X23, 0x1D8DBE4
	0x01D8DB70 ADRP X21, 0x2369000
	0x01D8DB74 LDR X20, [X23 + 0x1E0]
	0x01D8DB78 LDR X21, [X21 + 0xC18]
	0x01D8DB7C MOV X0, X1
	0x01D8DB80 BL 0x1C16F10
	0x01D8DB84 LDR X2, [X21]
	0x01D8DB88 MOV X1, X19
	0x01D8DB8C MOV X3, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x264C000
	008 Move X21, 0x236A000
	009 Move W8, [X20+2519]
	010 Move X21, [X21+2680]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0x236A000
	017 Move X0, [X0+3008]
	018 Call 0x1C17CF4
	019 Move X0, 0x2368000
	020 Move X0, [X0+3696]
	021 Call 0x1C17CF4
	022 Move X0, 0x236A000
	023 Move X0, [X0+3016]
	024 Call 0x1C17CF4
	025 Move X0, 0x236A000
	026 Move X0, [X0+3024]
	027 Call 0x1C17CF4
	028 Move X0, 0x236A000
	029 Move X0, [X0+3032]
	030 Call 0x1C17CF4
	031 Move X0, 0x236A000
	032 Move X0, [X0+2680]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+2519], W8
	036 Move X0, [X21]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Compare X19, 0
	042 JumpIfEqual {146}
	043 Move W8, [X19+48]
	044 Move X23, [X19+160]
	045 Or W8, W8, 8
	046 Move [X19+48], W8
	047 Compare X23, 0
	048 JumpIfEqual {146}
	049 Move X22, 0x2368000
	050 Move X22, [X22+3696]
	051 Move X21, 0x236A000
	052 Move X20, [X23+472]
	053 Move X0, [X22]
	054 Move X21, [X21+3024]
	055 Call 0x1C17F10
	056 Move X2, [X21]
	057 Move X1, X19
	058 Move X3, X31
	059 Move X21, X0
	060 Call Action..ctor, X0, X1, X2
	061 Move X0, X20
	062 Move X1, X21
	063 Move X2, X31
	064 Call Delegate.Remove, X0, X1
	065 Move X1, [X22]
	066 Compare X0, 0
	067 JumpIfEqual {73}
	068 Move X8, [X0]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move [X23+472], X0
	071 Move X8, [X0]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move [X23+472], X0
	074 Move X23, [X19+160]
	075 Compare X23, 0
	076 JumpIfEqual {146}
	077 Move X21, 0x236A000
	078 Move X20, [X23+464]
	079 Move X21, [X21+3032]
	080 Move X0, X1
	081 Call 0x1C17F10
	082 Move X2, [X21]
	083 Move X1, X19
	084 Move X3, X31
	085 Move X21, X0
	086 Call Action..ctor, X0, X1, X2
	087 Move X0, X20
	088 Move X1, X21
	089 Move X2, X31
	090 Call Delegate.Remove, X0, X1
	091 Compare X0, 0
	092 JumpIfEqual {100}
	093 Move X1, [X22]
	094 Move X8, [X0]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move [X23+464], X0
	097 Move X8, [X0]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Call 0x1C181E0
	100 Move [X23+464], X0
	101 Move X22, [X19+128]
	102 Compare X22, 0
	103 JumpIfEqual {146}
	104 Move X23, 0x236A000
	105 Move X23, [X23+3008]
	106 Move X21, 0x236A000
	107 Move X20, [X22+144]
	108 Move X0, [X23]
	109 Move X21, [X21+3016]
	110 Call 0x1C17F10
	111 Move X2, [X21]
	112 Move X1, X19
	113 Move X3, X31
	114 Move X21, X0
	115 Call Action`2<Int32Enum, Object>..ctor, X0, X1, X2
	116 Move X0, X20
	117 Move X1, X21
	118 Move X2, X31
	119 Call Delegate.Remove, X0, X1
	120 Compare X0, 0
	121 JumpIfEqual {138}
	122 Move X20, [X23]
	123 Move X19, X0
	124 Move X1, X20
	125 Call 0x1C17E00
	126 Compare X0, 0
	127 JumpIfEqual {135}
	128 Move [X22+144], X0
	129 Move X20, [X23]
	130 Move X0, X19
	131 Move X1, X20
	132 Call 0x1C17E00
	133 Compare X0, 0
	134 JumpIfNotEqual {139}
	135 Move X0, X19
	136 Move X1, X20
	137 Call 0x1C181E0
	138 Move [X22+144], X31
	139 Move X20, [X31+32]
	140 Move X19, [X31+40]
	141 Move X22, [X31+16]
	142 Move X21, [X31+24]
	143 Move X30, [X31+48]
	144 Move X23, [X31+56]
	145 Return 
	146 Call 0x1C17F20

Method: System.Void HandleTriggerUse()

Disassembly:
	0x01D8DB90 MOV X21, X0
	0x01D8DB94 BL 0x3314368
	0x01D8DB98 MOV X0, X20
	0x01D8DB9C MOV X1, X21
	0x01D8DBA0 MOV X2, X31
	0x01D8DBA4 BL 0x33C0FDC
	0x01D8DBA8 CBZ X0, 0x1D8DBD0
	0x01D8DBAC LDR X1, [X22]
	0x01D8DBB0 LDR X8, [X0]
	0x01D8DBB4 CMP X8, X1
	0x01D8DBB8 B.NE 0x1D8DBCC
	0x01D8DBBC STR X0, [X23 + 0x1E0]
	0x01D8DBC0 LDR X8, [X0]
	0x01D8DBC4 CMP X8, X1
	0x01D8DBC8 B.EQ 0x1D8DBD4
	0x01D8DBCC BL 0x1C171E0
	0x01D8DBD0 STR X0, [X23 + 0x1E0]
	0x01D8DBD4 LDP X20, X19, [X31 + 0x20]
	0x01D8DBD8 LDP X22, X21, [X31 + 0x10]
	0x01D8DBDC LDP X30, X23, [X31], #0x30
	0x01D8DBE0 RET
	0x01D8DBE4 BL 0x1C16F20
	0x01D8DBE8 STR X30, [X31 - 0x20]!
	0x01D8DBEC STP X20, X19, [X31 + 0x10]
	0x01D8DBF0 MOV X20, X0
	0x01D8DBF4 BL 0x1D8D870
	0x01D8DBF8 TBZ X0, 0x0, 0x1D8DC28
	0x01D8DBFC MOV X0, X20
	0x01D8DC00 BL 0x1D8DC60
	0x01D8DC04 MOV X1, X0
	0x01D8DC08 MOV X0, X20
	0x01D8DC0C MOV X2, X31
	0x01D8DC10 BL 0x3C366FC
	0x01D8DC14 MOV X0, X20
	0x01D8DC18 LDP X20, X19, [X31 + 0x10]
	0x01D8DC1C MOV W1, W31
	0x01D8DC20 LDR X30, [X31], #0x20
	0x01D8DC24 B 0x1D8D8D8
	0x01D8DC28 LDR X19, [X20 + 0x98]
	0x01D8DC2C MOV X0, X20
	0x01D8DC30 MOV X1, X31
	0x01D8DC34 BL 0x3C32E90
	0x01D8DC38 CBZ X0, 0x1D8DC5C
	0x01D8DC3C MOV X1, X31
	0x01D8DC40 BL 0x3C3F58C
	0x01D8DC44 MOV X0, X19
	0x01D8DC48 LDP X20, X19, [X31 + 0x10]
	0x01D8DC4C FMOV S3, 1
	0x01D8DC50 MOV X1, X31
	0x01D8DC54 LDR X30, [X31], #0x20
	0x01D8DC58 B 0x1DC15C4
	0x01D8DC5C BL 0x1C16F20
	0x01D8DC60 STP X30, X21, [X31 - 0x20]!
	0x01D8DC64 STP X20, X19, [X31 + 0x10]
	0x01D8DC68 ADRP X20, 0x264B000
	0x01D8DC6C ADRP X21, 0x2369000
	0x01D8DC70 LDRB W8, [X20 + 0x9E1]
	0x01D8DC74 LDR X21, [X21 + 0xC28]
	0x01D8DC78 MOV X19, X0
	0x01D8DC7C TBNZ X8, 0x0, 0x1D8DC94
	0x01D8DC80 ADRP X0, 0x2369000
	0x01D8DC84 LDR X0, [X0 + 0xC28]
	0x01D8DC88 BL 0x1C16CF4
	0x01D8DC8C MOVZ W8, 0x1
	0x01D8DC90 STRB W8, [X20 + 0x9E1]
	0x01D8DC94 LDR X0, [X21]
	0x01D8DC98 BL 0x1C16F10
	0x01D8DC9C MOV X1, X31
	0x01D8DCA0 MOV X20, X0
	0x01D8DCA4 BL 0x33BDD8C
	0x01D8DCA8 STR W31, [X20 + 0x10]
	0x01D8DCAC STR X19, [X20 + 0x20]
	0x01D8DCB0 MOV X0, X20
	0x01D8DCB4 LDP X20, X19, [X31 + 0x10]
	0x01D8DCB8 LDP X30, X21, [X31], #0x20
	0x01D8DCBC RET
	0x01D8DCC0 MOVZ W1, 0x1
	0x01D8DCC4 B 0x1D8D8D8
	0x01D8DCC8 STR X30, [X31 - 0x20]!
	0x01D8DCCC STP X20, X19, [X31 + 0x10]
	0x01D8DCD0 MOV W19, W1
	0x01D8DCD4 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D10
	003 Move [X31+24], D9
	004 Move [X31+32], D8
	005 Move [X31+40], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x264C000
	009 Move W8, [X20+2520]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2367000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2520], W8
	020 Move X0, X19
	021 Move X1, X31
	022 Call Component.get_transform, X0
	023 Compare X0, 0
	024 JumpIfEqual {104}
	025 Move X1, X31
	026 Call Transform.get_forward, X0
	027 Move W8, 0x420C0000
	028 Move S3, W8
	029 Multiply S8, S0, S3
	030 Multiply S9, S1, S3
	031 Multiply S10, S2, S3
	032 Move [X31], S8
	033 Move [X31+8], S9
	034 Move [X31+8], S10
	035 Move X8, [X19+128]
	036 Compare X8, 0
	037 JumpIfEqual {104}
	038 Move X9, 0x2367000
	039 Move X9, [X9+1432]
	040 Move X20, [X8+192]
	041 Move X0, [X9]
	042 Move W9, [X0+224]
	043 Compare W9, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X20
	047 Move X1, X31
	048 Move X2, X31
	049 Call Object.op_Inequality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {75}
	054 Move X8, [X19+128]
	055 Compare X8, 0
	056 JumpIfEqual {104}
	057 Move X8, [X8+192]
	058 Compare X8, 0
	059 JumpIfEqual {104}
	060 Move X0, [X8+360]
	061 Compare X0, 0
	062 JumpIfEqual {104}
	063 Move X1, X31
	064 Call Rigidbody.get_mass, X0
	065 Move W8, 0x420C0000
	066 Add X0, X31, 0
	067 Move S2, 8
	068 Move S3, 5
	069 Move S1, W8
	070 Move X1, X31
	071 Call Player.CalculateClampedVelocity, X0, V0, V1, V2, V3
	072 Move S8, [X31]
	073 Move S9, [X31+4]
	074 Move V10, [X31+8]
	075 Move X0, X19
	076 Move V0, V8
	077 Move V1, V9
	078 Move V2, V10
	079 Call Crossbow.ReleaseIfHeld, X0, X1
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {96}
	084 Move X20, [X19+152]
	085 Move X0, X19
	086 Move X1, X31
	087 Call Component.get_transform, X0
	088 Compare X0, 0
	089 JumpIfEqual {104}
	090 Move X1, X31
	091 Call Transform.get_position, X0
	092 Move S3, 1
	093 Move X0, X20
	094 Move X1, X31
	095 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	096 Move X20, [X31+48]
	097 Move X19, [X31+56]
	098 Move X30, [X31+40]
	099 Move D9, [X31+24]
	100 Move D8, [X31+32]
	101 Move V10, [X31+16]
	102 Add X31, X31, 64
	103 Return 
	104 Call 0x1C17F20

Method: System.Void HandleUse()

Disassembly:
	0x01D8DE40 MOV V9.16B, V1.16B
	0x01D8DE44 MOV V10.16B, V2.16B
	0x01D8DE48 BL 0x3C3DEB4
	0x01D8DE4C MOV V4.16B, V0.16B
	0x01D8DE50 MOV V5.16B, V1.16B
	0x01D8DE54 MOV V6.16B, V2.16B
	0x01D8DE58 MOV V7.16B, V3.16B
	0x01D8DE5C MOVZ W0, 0x1
	0x01D8DE60 MOV V0.16B, V8.16B
	0x01D8DE64 MOV V1.16B, V9.16B
	0x01D8DE68 MOV V2.16B, V10.16B
	0x01D8DE6C MOV V3.16B, V4.16B
	0x01D8DE70 MOV V4.16B, V5.16B
	0x01D8DE74 MOV V5.16B, V6.16B
	0x01D8DE78 MOV V6.16B, V7.16B
	0x01D8DE7C MOV X1, X31
	0x01D8DE80 BL 0x1E04F44
	0x01D8DE84 LDR X0, [X19 + 0x88]
	0x01D8DE88 CBZ X0, 0x1D8DF84
	0x01D8DE8C LDR X20, [X19 + 0x38]
	0x01D8DE90 LDR X21, [X19 + 0xA8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x264C000
	005 Move W8, [X20+1923]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, 0x2367000
	010 Move X0, [X0+1440]
	011 Call 0x1C17CF4
	012 Move W8, 1
	013 Move [X20+1923], W8
	014 Move X8, 0x2367000
	015 Move X8, [X8+1440]
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X8, [X8]
	020 Move X8, [X8+184]
	021 Move S0, [X8]
	022 Move S1, [X8+4]
	023 Move V2, [X8+8]
	024 Move X30, [X31+32]
	025 Call Crossbow.ReleaseIfHeld, X0, X1
	026 Return 

Method: System.Void HandleAttachedChanged(AnimalCompany.AttachedLocation location, AnimalCompany.GrabbableItem item)

Disassembly:
	0x01D8DE94 MOV X1, X31
	0x01D8DE98 BL 0x3C3F58C
	0x01D8DE9C ADRP X8, 0x2369000
	0x01D8DEA0 LDR X8, [X8 + 0xB58]
	0x01D8DEA4 ADD X0, X31, 0x40
	0x01D8DEA8 STP X31, X31, [X31 + 0x40]
	0x01D8DEAC LDR X1, [X8]
	0x01D8DEB0 BL 0x243BFEC
	0x01D8DEB4 LDR X0, [X19 + 0x88]
	0x01D8DEB8 CBZ X0, 0x1D8DF84
	0x01D8DEBC MOV X1, X31
	0x01D8DEC0 BL 0x3C3DEB4
	0x01D8DEC4 ADRP X8, 0x2369000
	0x01D8DEC8 LDR X8, [X8 + 0xB60]
	0x01D8DECC ADD X0, X31, 0x28
	0x01D8DED0 STP X31, X31, [X31 + 0x28]
	0x01D8DED4 STR W31, [X31 + 0x38]
	0x01D8DED8 LDR X1, [X8]
	0x01D8DEDC BL 0x2437C9C
	0x01D8DEE0 CBZ X20, 0x1D8DF84
	0x01D8DEE4 LDUR V0, [X31 + 0x28]
	0x01D8DEE8 LDR W8, [X31 + 0x38]
	0x01D8DEEC LDP X2, X3, [X31 + 0x40]
	0x01D8DEF0 ADD X4, X31, 0x10
	0x01D8DEF4 MOV X0, X20
	0x01D8DEF8 MOV X1, X21
	0x01D8DEFC MOV X5, X31
	0x01D8DF00 MOV X6, X31
	0x01D8DF04 MOV W7, W31
	0x01D8DF08 STR V0, [X31 + 0x1]
	0x01D8DF0C STR W8, [X31 + 0x20]
	0x01D8DF10 STR X31, [X31]
	0x01D8DF14 BL 0x1EAE6A8
	0x01D8DF18 CBZ X0, 0x1D8DF84
	0x01D8DF1C ADRP X8, 0x2369000
	0x01D8DF20 LDR X8, [X8 + 0xB98]
	0x01D8DF24 LDR X1, [X8]
	0x01D8DF28 BL 0x21A3894
	0x01D8DF2C LDR X8, [X19 + 0x88]
	0x01D8DF30 CBZ X8, 0x1D8DF84
	0x01D8DF34 MOV X20, X0
	0x01D8DF38 MOV X0, X8
	0x01D8DF3C MOV X1, X31
	0x01D8DF40 BL 0x3C3FA04
	0x01D8DF44 CBZ X20, 0x1D8DF84
	0x01D8DF48 LDR V3, [X19 + 0xA0]
	0x01D8DF4C MOVZ W1, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x264C000
	006 Move W8, [X21+2521]
	007 Move X20, X2
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2367000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2521], W8
	018 Move X0, [X19+64]
	019 Compare X0, 0
	020 JumpIfEqual {64}
	021 Move W8, [X0+96]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 2
	024 Compare TEMP, 2
	025 JumpIfEqual {64}
	026 Move X1, X31
	027 Call NetworkObject.get_HasStateAuthority, X0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {64}
	032 Move X8, 0x2367000
	033 Move X8, [X8+1432]
	034 Move X0, [X8]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Inequality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {64}
	047 Move X20, [X19+144]
	048 Move X0, X19
	049 Move X1, X31
	050 Call Component.get_transform, X0
	051 Compare X0, 0
	052 JumpIfEqual {69}
	053 Move X1, X31
	054 Call Transform.get_position, X0
	055 Move X0, X20
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move S3, 1
	059 Move X1, X31
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	063 Return 
	064 Move X20, [X31+16]
	065 Move X19, [X31+24]
	066 Move X30, [X31+32]
	067 Move X21, [X31+40]
	068 Return 
	069 Call 0x1C17F20

Method: System.Boolean ReleaseIfHeld(UnityEngine.Vector3 velocity)

Disassembly:
	0x01D8DCD8 MOV X20, X0
	0x01D8DCDC BL 0x33BDD8C
	0x01D8DCE0 STR W19, [X20 + 0x10]
	0x01D8DCE4 LDP X20, X19, [X31 + 0x10]
	0x01D8DCE8 LDR X30, [X31], #0x20
	0x01D8DCEC RET
	0x01D8DCF0 MOVZ W8, 0x41800000
	0x01D8DCF4 MOVZ W9, 0x1
	0x01D8DCF8 MOV X1, X31
	0x01D8DCFC STR W8, [X0 + 0xA0]
	0x01D8DD00 STRB W9, [X0 + 0xB0]
	0x01D8DD04 B 0x1E74F04
	0x01D8DD08 LDRB W1, [X0 + 0xB0]
	0x01D8DD0C B 0x1D8D8D8
	0x01D8DD10 STP X30, X19, [X31 - 0x10]!
	0x01D8DD14 MOV X19, X0
	0x01D8DD18 BL 0x1D8D870
	0x01D8DD1C AND W8, W0, 0x1
	0x01D8DD20 STRB W8, [X19 + 0xB0]
	0x01D8DD24 LDP X30, X19, [X31], #0x10
	0x01D8DD28 RET
	0x01D8DD2C RET
	0x01D8DD30 SUB X31, X31, 0x90
	0x01D8DD34 STR D10, [X31 + 0x50]
	0x01D8DD38 STP D9, D8, [X31 + 0x60]
	0x01D8DD3C STP X30, X21, [X31 + 0x70]
	0x01D8DD40 STP X20, X19, [X31 + 0x80]
	0x01D8DD44 ADRP X19, 0x264B000
	0x01D8DD48 LDRB W8, [X19 + 0x9E2]
	0x01D8DD4C MOV X20, X0
	0x01D8DD50 TBNZ X8, 0x0, 0x1D8DD8C
	0x01D8DD54 ADRP X0, 0x2369000
	0x01D8DD58 LDR X0, [X0 + 0xB98]
	0x01D8DD5C BL 0x1C16CF4
	0x01D8DD60 ADRP X0, 0x2369000
	0x01D8DD64 LDR X0, [X0 + 0xB58]
	0x01D8DD68 BL 0x1C16CF4
	0x01D8DD6C ADRP X0, 0x2369000
	0x01D8DD70 LDR X0, [X0 + 0xB60]
	0x01D8DD74 BL 0x1C16CF4
	0x01D8DD78 ADRP X0, 0x2369000
	0x01D8DD7C LDR X0, [X0 + 0xC30]
	0x01D8DD80 BL 0x1C16CF4
	0x01D8DD84 MOVZ W8, 0x1
	0x01D8DD88 STRB W8, [X19 + 0x9E2]
	0x01D8DD8C LDR W8, [X20 + 0x10]
	0x01D8DD90 LDR X19, [X20 + 0x20]
	0x01D8DD94 CMP W8, 0x1
	0x01D8DD98 B.EQ 0x1D8DE14
	0x01D8DD9C CBNZ W8, 0x1D8DF68
	0x01D8DDA0 MOVN W8, 0x0
	0x01D8DDA4 STR W8, [X20 + 0x10]
	0x01D8DDA8 CBZ X19, 0x1D8DF84
	0x01D8DDAC LDR X21, [X19 + 0x90]
	0x01D8DDB0 CBZ X21, 0x1D8DDE0
	0x01D8DDB4 MOV X0, X19
	0x01D8DDB8 MOV X1, X31
	0x01D8DDBC BL 0x3C32E90
	0x01D8DDC0 CBZ X0, 0x1D8DF84
	0x01D8DDC4 MOV X1, X31
	0x01D8DDC8 BL 0x3C3F58C
	0x01D8DDCC FMOV S3, 1
	0x01D8DDD0 MOVZ W1, 0x1
	0x01D8DDD4 MOV X0, X21
	0x01D8DDD8 MOV X2, X31
	0x01D8DDDC BL 0x1DD0FA8
	0x01D8DDE0 ADRP X8, 0x2369000
	0x01D8DDE4 LDR X8, [X8 + 0xC30]
	0x01D8DDE8 LDR X0, [X8]
	0x01D8DDEC BL 0x1C16F10
	0x01D8DDF0 ADRP X8, 0xFFFFFFFFFED5C000
	0x01D8DDF4 LDR V0, [X8 + 0xF24]
	0x01D8DDF8 MOV X1, X31
	0x01D8DDFC MOV X19, X0
	0x01D8DE00 BL 0x3C3A634
	0x01D8DE04 MOVZ W0, 0x1
	0x01D8DE08 STR X19, [X20 + 0x18]
	0x01D8DE0C STR W0, [X20 + 0x10]
	0x01D8DE10 B 0x1D8DF6C
	0x01D8DE14 MOVN W8, 0x0
	0x01D8DE18 STR W8, [X20 + 0x10]
	0x01D8DE1C CBZ X19, 0x1D8DF84
	0x01D8DE20 LDR X0, [X19 + 0x88]
	0x01D8DE24 CBZ X0, 0x1D8DF84
	0x01D8DE28 MOV X1, X31
	0x01D8DE2C BL 0x3C3F58C
	0x01D8DE30 LDR X0, [X19 + 0x88]
	0x01D8DE34 CBZ X0, 0x1D8DF84
	0x01D8DE38 MOV X1, X31
	0x01D8DE3C MOV V8.16B, V0.16B

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+120], X23
	012 Move [X31+128], X22
	013 Move [X31+136], X21
	014 Move [X31+144], X20
	015 Move [X31+152], X19
	016 Move X19, X0
	017 Move X0, [X0+128]
	018 Compare X0, 0
	019 JumpIfEqual {118}
	020 Move V11, V2
	021 Move V8, V1
	022 Move V12, V0
	023 Call AttachedItemAnchor.get_grabbedItem, X0
	024 Move [X31+40], X0
	025 Add X0, X31, 40
	026 Move X1, X31
	027 Call NetworkBehaviourId.get_IsValid, X0
	028 Move W20, W0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {101}
	033 Move X21, [X19+128]
	034 Compare X21, 0
	035 JumpIfEqual {118}
	036 Move X0, X21
	037 Call AttachedItemAnchor.get_grabbedItem, X0
	038 Move X8, [X19+128]
	039 Compare X8, 0
	040 JumpIfEqual {118}
	041 Move X22, X0
	042 Move X0, X8
	043 Move X1, X31
	044 Call Component.get_transform, X0
	045 Compare X0, 0
	046 JumpIfEqual {118}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X0, [X19+128]
	050 Compare X0, 0
	051 JumpIfEqual {118}
	052 Move X1, X31
	053 Move [X31+32], S2
	054 Move [X31+40], S1
	055 Move V13, V0
	056 Move V10, V8
	057 Call Component.get_transform, X0
	058 Compare X0, 0
	059 JumpIfEqual {118}
	060 Move X1, X31
	061 Call Transform.get_rotation, X0
	062 Move X23, 0x264C000
	063 Move W8, [X23+1923]
	064 Move V14, V0
	065 Move V15, V1
	066 Move V8, V2
	067 Move V9, V3
	068 Compare W8, 0
	069 JumpIfNotEqual {75}
	070 Move X0, 0x2367000
	071 Move X0, [X0+1440]
	072 Call 0x1C17CF4
	073 Move W8, 1
	074 Move [X23+1923], W8
	075 Move X8, 0x2367000
	076 Move X8, [X8+1440]
	077 Move S2, [X31+32]
	078 Move S1, [X31+36]
	079 Move X0, X21
	080 Move X1, X22
	081 Move X8, [X8]
	082 Move V3, V14
	083 Move V4, V15
	084 Move V5, V8
	085 Move X8, [X8+184]
	086 Move V6, V9
	087 Move W2, W31
	088 Move V0, [X8+8]
	089 Move X9, [X8]
	090 Move [X31+4], S10
	091 Move [X31+12], S11
	092 Move [X31], S12
	093 Move [X31+24], S0
	094 Move V0, V13
	095 Move [X31+16], X9
	096 Call AttachedItemAnchor.RPC_DropItem, X0, X1, X2, X3, X4, X5, X6, X7
	097 Move X0, [X19+128]
	098 Compare X0, 0
	099 JumpIfEqual {118}
	100 Call AttachedItemAnchor.RPC_UnattachItem, X0
	101 And W0, W20, 1
	102 Move X20, [X31+144]
	103 Move X19, [X31+152]
	104 Move X22, [X31+128]
	105 Move X21, [X31+136]
	106 Move X30, [X31+112]
	107 Move X23, [X31+120]
	108 Move D9, [X31+96]
	109 Move D8, [X31+104]
	110 Move D11, [X31+80]
	111 Move D10, [X31+88]
	112 Move D13, [X31+64]
	113 Move D12, [X31+72]
	114 Move D15, [X31+48]
	115 Move D14, [X31+56]
	116 Add X31, X31, 160
	117 Return X0
	118 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01D8DF50 MOV X0, X20

ISIL:
No ISIL was generated
Method: System.Void UpdatePull()

Disassembly:
	0x01D8DF54 MOV X2, X31
	0x01D8DF58 FMUL S2, S2, S3
	0x01D8DF5C FMUL S1, S1, S3
	0x01D8DF60 FMUL S0, S0, S3
	0x01D8DF64 BL 0x3C8F3C4
	0x01D8DF68 MOV W0, W31
	0x01D8DF6C LDP X20, X19, [X31 + 0x80]
	0x01D8DF70 LDP X30, X21, [X31 + 0x70]
	0x01D8DF74 LDP D9, D8, [X31 + 0x60]
	0x01D8DF78 LDR V10, [X31 + 0x50]
	0x01D8DF7C ADD X31, X31, 0x90
	0x01D8DF80 RET
	0x01D8DF84 BL 0x1C16F20
	0x01D8DF88 LDR X0, [X0 + 0x18]
	0x01D8DF8C RET
	0x01D8DF90 STP X30, X19, [X31 - 0x10]!
	0x01D8DF94 ADRP X0, 0x2366000
	0x01D8DF98 LDR X0, [X0 + 0xB40]
	0x01D8DF9C BL 0x1C16D08
	0x01D8DFA0 BL 0x1C16F10
	0x01D8DFA4 MOV X1, X31
	0x01D8DFA8 MOV X19, X0
	0x01D8DFAC BL 0x3380310
	0x01D8DFB0 ADRP X0, 0x2369000
	0x01D8DFB4 LDR X0, [X0 + 0xC38]
	0x01D8DFB8 BL 0x1C16D08
	0x01D8DFBC MOV X1, X0
	0x01D8DFC0 MOV X0, X19
	0x01D8DFC4 BL 0x1C16DEC
	0x01D8DFC8 LDR X0, [X0 + 0x18]
	0x01D8DFCC RET
	0x01D8DFD0 LDR X0, [X0 + 0x80]
	0x01D8DFD4 RET
	0x01D8DFD8 LDR X0, [X0 + 0x98]
	0x01D8DFDC RET
	0x01D8DFE0 STP X30, X19, [X31 - 0x10]!
	0x01D8DFE4 LDR X8, [X0 + 0x50]
	0x01D8DFE8 CBZ X8, 0x1D8E000
	0x01D8DFEC LDR W8, [X8]
	0x01D8DFF0 CMP W8, 0x0
	0x01D8DFF4 CSET W0, NE
	0x01D8DFF8 LDP X30, X19, [X31], #0x10
	0x01D8DFFC RET
	0x01D8E000 ADRP X0, 0x2365000
	0x01D8E004 LDR X0, [X0 + 0x5B0]
	0x01D8E008 BL 0x1C16D08
	0x01D8E00C BL 0x1C16F10
	0x01D8E010 MOV X19, X0
	0x01D8E014 ADRP X0, 0x2368000
	0x01D8E018 LDR X0, [X0 + 0xC40]
	0x01D8E01C BL 0x1C16D08
	0x01D8E020 MOV X1, X0
	0x01D8E024 MOV X0, X19
	0x01D8E028 MOV X2, X31
	0x01D8E02C BL 0x337DF1C
	0x01D8E030 ADRP X0, 0x2368000
	0x01D8E034 LDR X0, [X0 + 0xC48]
	0x01D8E038 BL 0x1C16D08
	0x01D8E03C MOV X1, X0
	0x01D8E040 MOV X0, X19
	0x01D8E044 BL 0x1C16DEC
	0x01D8E048 STP X30, X19, [X31 - 0x10]!
	0x01D8E04C LDR X8, [X0 + 0x50]
	0x01D8E050 CBZ X8, 0x1D8E064
	0x01D8E054 AND W9, W1, 0x1
	0x01D8E058 STR W9, [X8]
	0x01D8E05C LDP X30, X19, [X31], #0x10
	0x01D8E060 RET
	0x01D8E064 ADRP X0, 0x2365000
	0x01D8E068 LDR X0, [X0 + 0x5B0]
	0x01D8E06C BL 0x1C16D08
	0x01D8E070 BL 0x1C16F10
	0x01D8E074 MOV X19, X0
	0x01D8E078 ADRP X0, 0x2368000
	0x01D8E07C LDR X0, [X0 + 0xC40]
	0x01D8E080 BL 0x1C16D08
	0x01D8E084 MOV X1, X0
	0x01D8E088 MOV X0, X19
	0x01D8E08C MOV X2, X31
	0x01D8E090 BL 0x337DF1C
	0x01D8E094 ADRP X0, 0x2368000
	0x01D8E098 LDR X0, [X0 + 0xC50]
	0x01D8E09C BL 0x1C16D08
	0x01D8E0A0 MOV X1, X0
	0x01D8E0A4 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x264C000
	011 Move X20, 0x2367000
	012 Move W8, [X21+2522]
	013 Move X20, [X20+1432]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x2367000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+2522], W8
	024 Move X0, [X20]
	025 Move X20, [X19+64]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {99}
	038 Move X0, [X19+64]
	039 Compare X0, 0
	040 JumpIfEqual {109}
	041 Move X1, X31
	042 Call NetworkObject.get_IsValid, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {99}
	047 Move X0, [X19+160]
	048 Compare X0, 0
	049 JumpIfEqual {109}
	050 Call GrabbableItem.get_isAttached, X0
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {99}
	055 Move X0, [X19+128]
	056 Compare X0, 0
	057 JumpIfEqual {109}
	058 Call AttachedItemAnchor.get_grabbedItem, X0
	059 Move [X31+8], X0
	060 Add X0, X31, 8
	061 Move X1, X31
	062 Call NetworkBehaviourId.get_IsValid, X0
	063 Move X8, -19537920
	064 Move V8, [X8+96]
	065 Move S1, [X19+168]
	066 Move S9, [X19+172]
	067 And W31, W0, 1
	068 Move S0, W31
	069 Move W8, 0x43C80000
	070 NotImplemented "Instruction FCSEL not yet implemented."
	071 Move S2, -5
	072 Move S3, W8
	073 Subtract S0, S0, S1
	074 Multiply S0, S0, S3
	075 Multiply S1, S9, S2
	076 Move X0, X31
	077 Add S10, S0, S1
	078 Call Time.get_deltaTime
	079 Move V11, [X19+168]
	080 Multiply S0, S0, S10
	081 Add S9, S9, S0
	082 Move X0, X31
	083 Move [X19+172], S9
	084 Call Time.get_deltaTime
	085 Multiply S0, S9, S0
	086 Move V2, [X19+168]
	087 Move X8, -19542016
	088 Move S1, -2
	089 Add S0, S11, S0
	090 Move V3, [X8+1040]
	091 NotImplemented "Instruction FMIN not yet implemented."
	092 NotImplemented "Instruction FCMP not yet implemented."
	093 NotImplemented "Instruction FCSEL not yet implemented."
	094 NotImplemented "Instruction FABD not yet implemented."
	095 NotImplemented "Instruction FCMP not yet implemented."
	096 Move X0, X19
	097 Move [X19+168], S0
	098 Call Crossbow.UpdateStringView, X0
	099 Move X20, [X31+64]
	100 Move X19, [X31+72]
	101 Move X30, [X31+48]
	102 Move X21, [X31+56]
	103 Move D9, [X31+32]
	104 Move D8, [X31+40]
	105 Move D11, [X31+16]
	106 Move D10, [X31+24]
	107 Add X31, X31, 80
	108 Return 
	109 Call 0x1C17F20

Method: System.Void UpdateStringView()

Disassembly:
	0x01D8D7F4 FMUL S0, S8, S8
	0x01D8D7F8 FMUL S1, S9, S9
	0x01D8D7FC FMUL S2, S10, S10
	0x01D8D800 MOVZ W8, 0x42C80000
	0x01D8D804 FADD S0, S0, S1
	0x01D8D808 FMOV S1, W8
	0x01D8D80C FADD S0, S2, S0
	0x01D8D810 FDIV S0, S0, S1
	0x01D8D814 FMOV S1, 1
	0x01D8D818 MOV X1, X31
	0x01D8D81C FMIN S8, S0, S1
	0x01D8D820 BL 0x3C3F58C
	0x01D8D824 MOV X0, X20
	0x01D8D828 MOV V3.16B, V8.16B
	0x01D8D82C MOV X1, X31
	0x01D8D830 BL 0x1DC15C4
	0x01D8D834 MOV X0, X31
	0x01D8D838 BL 0x3C3C73C
	0x01D8D83C STR S0, [X19 + 0x98]
	0x01D8D840 LDP X20, X19, [X31 + 0x50]
	0x01D8D844 LDP X22, X21, [X31 + 0x40]
	0x01D8D848 LDR X30, [X31 + 0x30]
	0x01D8D84C LDP D9, D8, [X31 + 0x20]
	0x01D8D850 LDP D11, D10, [X31 + 0x10]
	0x01D8D854 LDP D13, D12, [X31], #0x60
	0x01D8D858 RET
	0x01D8D85C BL 0x1C16F20
	0x01D8D860 MOV X1, X31
	0x01D8D864 B 0x1E74F04
	0x01D8D868 RET
	0x01D8D86C RET
	0x01D8D870 STP X30, X19, [X31 - 0x10]!
	0x01D8D874 LDR X8, [X0 + 0x50]
	0x01D8D878 CBZ X8, 0x1D8D890
	0x01D8D87C LDR W8, [X8]
	0x01D8D880 CMP W8, 0x0
	0x01D8D884 CSET W0, NE
	0x01D8D888 LDP X30, X19, [X31], #0x10
	0x01D8D88C RET
	0x01D8D890 ADRP X0, 0x2366000
	0x01D8D894 LDR X0, [X0 + 0x5B0]
	0x01D8D898 BL 0x1C16D08
	0x01D8D89C BL 0x1C16F10
	0x01D8D8A0 MOV X19, X0
	0x01D8D8A4 ADRP X0, 0x2369000
	0x01D8D8A8 LDR X0, [X0 + 0xC00]
	0x01D8D8AC BL 0x1C16D08
	0x01D8D8B0 MOV X1, X0
	0x01D8D8B4 MOV X0, X19
	0x01D8D8B8 MOV X2, X31
	0x01D8D8BC BL 0x337DF1C
	0x01D8D8C0 ADRP X0, 0x2369000
	0x01D8D8C4 LDR X0, [X0 + 0xC08]
	0x01D8D8C8 BL 0x1C16D08
	0x01D8D8CC MOV X1, X0
	0x01D8D8D0 MOV X0, X19
	0x01D8D8D4 BL 0x1C16DEC
	0x01D8D8D8 STP X30, X19, [X31 - 0x10]!
	0x01D8D8DC LDR X8, [X0 + 0x50]
	0x01D8D8E0 CBZ X8, 0x1D8D8F4
	0x01D8D8E4 AND W9, W1, 0x1
	0x01D8D8E8 STR W9, [X8]
	0x01D8D8EC LDP X30, X19, [X31], #0x10
	0x01D8D8F0 RET
	0x01D8D8F4 ADRP X0, 0x2366000
	0x01D8D8F8 LDR X0, [X0 + 0x5B0]
	0x01D8D8FC BL 0x1C16D08
	0x01D8D900 BL 0x1C16F10
	0x01D8D904 MOV X19, X0
	0x01D8D908 ADRP X0, 0x2369000
	0x01D8D90C LDR X0, [X0 + 0xC00]
	0x01D8D910 BL 0x1C16D08
	0x01D8D914 MOV X1, X0
	0x01D8D918 MOV X0, X19
	0x01D8D91C MOV X2, X31
	0x01D8D920 BL 0x337DF1C
	0x01D8D924 ADRP X0, 0x2369000
	0x01D8D928 LDR X0, [X0 + 0xC10]
	0x01D8D92C BL 0x1C16D08
	0x01D8D930 MOV X1, X0
	0x01D8D934 MOV X0, X19
	0x01D8D938 BL 0x1C16DEC
	0x01D8D93C STP X30, X23, [X31 - 0x30]!
	0x01D8D940 STP X22, X21, [X31 + 0x10]
	0x01D8D944 STP X20, X19, [X31 + 0x20]
	0x01D8D948 ADRP X20, 0x264B000
	0x01D8D94C LDRB W8, [X20 + 0x9DF]
	0x01D8D950 MOV X19, X0
	0x01D8D954 TBNZ X8, 0x0, 0x1D8D984
	0x01D8D958 ADRP X0, 0x2367000
	0x01D8D95C LDR X0, [X0 + 0xE70]
	0x01D8D960 BL 0x1C16CF4
	0x01D8D964 ADRP X0, 0x2369000
	0x01D8D968 LDR X0, [X0 + 0xC18]
	0x01D8D96C BL 0x1C16CF4
	0x01D8D970 ADRP X0, 0x2369000
	0x01D8D974 LDR X0, [X0 + 0xC20]
	0x01D8D978 BL 0x1C16CF4
	0x01D8D97C MOVZ W8, 0x1

ISIL:
	001 Subtract X31, X31, 336
	002 Move [X31+208], D15
	003 Move [X31+216], D14
	004 Move [X31+224], D13
	005 Move [X31+232], D12
	006 Move [X31+240], D11
	007 Move [X31+248], D10
	008 Move [X31+256], D9
	009 Move [X31+264], D8
	010 Move [X31+272], X29
	011 Move [X31+288], X30
	012 Move [X31+296], X23
	013 Move [X31+304], X22
	014 Move [X31+312], X21
	015 Move [X31+320], X20
	016 Move [X31+328], X19
	017 Move X21, X0
	018 Move X0, [X0+136]
	019 Compare X0, 0
	020 JumpIfEqual {129}
	021 Move X1, X31
	022 Call Renderer.get_material, X0
	023 Move X22, 0x264C000
	024 Move W8, [X22+2591]
	025 Move W19, [X21+176]
	026 Move X20, X0
	027 Compare W8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, 0x2367000
	030 Move X0, [X0+1440]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+2591], W8
	034 Move X22, 0x2367000
	035 Move X22, [X22+1440]
	036 Move X23, 0x264C000
	037 Move W9, [X23+1939]
	038 Move V12, [X21+168]
	039 Move X8, [X22]
	040 Move X8, [X8+184]
	041 Move S13, [X8+72]
	042 Move S0, [X8+76]
	043 Move V15, [X8+80]
	044 Compare W9, 0
	045 JumpIfNotEqual {53}
	046 Move X0, 0x2368000
	047 Move X0, [X0+1448]
	048 Move V8, V0
	049 Call 0x1C17CF4
	050 Move V0, V8
	051 Move W8, 1
	052 Move [X23+1939], W8
	053 Move X8, 0x2368000
	054 Move X8, [X8+1448]
	055 Move X21, 0x264C000
	056 Move W9, [X21+2139]
	057 Multiply S14, S13, S12
	058 Move X8, [X8]
	059 Multiply S13, S0, S12
	060 Multiply S12, S15, S12
	061 Move X8, [X8+184]
	062 Move S11, [X8]
	063 Move S10, [X8+4]
	064 Move S9, [X8+8]
	065 Move S8, [X8+12]
	066 Compare W9, 0
	067 JumpIfNotEqual {73}
	068 Move X0, 0x2367000
	069 Move X0, [X0+1440]
	070 Call 0x1C17CF4
	071 Move W8, 1
	072 Move [X21+2139], W8
	073 Move X8, [X22]
	074 Move V1, V13
	075 Move V2, V12
	076 Move V3, V11
	077 Move X8, [X8+184]
	078 Move V4, V10
	079 Move V5, V9
	080 Move V6, V8
	081 Move V0, [X8+20]
	082 NotImplemented "Instruction LDUR not yet implemented."
	083 Add X8, X31, 80
	084 Move X0, X31
	085 Move [X31+8], S0
	086 Move V0, V14
	087 Move [X31], X9
	088 Call Matrix4x4.TRS, X0, X1, X2
	089 Move V0, [X31+80]
	090 Move V1, [X31+96]
	091 Move V2, [X31+112]
	092 Move V3, [X31+128]
	093 Move [X31+144], V0
	094 Move [X31+152], V1
	095 Move [X31+176], V2
	096 Move [X31+184], V3
	097 Compare X20, 0
	098 JumpIfEqual {129}
	099 Move V0, [X31+144]
	100 Move V1, [X31+160]
	101 Move V2, [X31+176]
	102 Move V3, [X31+192]
	103 Add X2, X31, 16
	104 Move X0, X20
	105 Move W1, W19
	106 Move X3, X31
	107 Move [X31+16], V0
	108 Move [X31+24], V1
	109 Move [X31+48], V2
	110 Move [X31+56], V3
	111 Call Material.SetMatrix, X0, X1, X2
	112 Move X20, [X31+320]
	113 Move X19, [X31+328]
	114 Move X22, [X31+304]
	115 Move X21, [X31+312]
	116 Move X30, [X31+288]
	117 Move X23, [X31+296]
	118 Move X29, [X31+272]
	119 Move D9, [X31+256]
	120 Move D8, [X31+264]
	121 Move D11, [X31+240]
	122 Move D10, [X31+248]
	123 Move D13, [X31+224]
	124 Move D12, [X31+232]
	125 Move D15, [X31+208]
	126 Move D14, [X31+216]
	127 Add X31, X31, 336
	128 Return 
	129 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D8E150 STR X0, [X23 + 0x1D0]
	0x01D8E154 LDR X8, [X0]
	0x01D8E158 CMP X8, X1
	0x01D8E15C B.EQ 0x1D8E168
	0x01D8E160 B 0x1D8E1CC
	0x01D8E164 STR X0, [X23 + 0x1D0]
	0x01D8E168 LDR X23, [X19 + 0x80]
	0x01D8E16C CBZ X23, 0x1D8E1E4
	0x01D8E170 ADRP X21, 0x2368000
	0x01D8E174 LDR X20, [X23 + 0x1E8]
	0x01D8E178 LDR X21, [X21 + 0xC58]
	0x01D8E17C MOV X0, X1
	0x01D8E180 BL 0x1C16F10
	0x01D8E184 LDR X2, [X21]
	0x01D8E188 MOV X1, X19
	0x01D8E18C MOV X3, X31
	0x01D8E190 MOV X21, X0
	0x01D8E194 BL 0x3314368
	0x01D8E198 MOV X0, X20
	0x01D8E19C MOV X1, X21
	0x01D8E1A0 MOV X2, X31
	0x01D8E1A4 BL 0x33C0DE4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x264B000
	006 Move X21, 0x2369000
	007 Move W8, [X20+2523]
	008 Move X21, [X21+3040]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2369000
	015 Move X0, [X0+3040]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2523], W8
	019 Move X0, [X21]
	020 Move X1, X31
	021 Call Shader.PropertyToID, X0
	022 Move [X19+176], W0
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X1, X31
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call NetworkBehaviour..ctor, X0
	030 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01D8E1A8 CBZ X0, 0x1D8E1D0

ISIL:
	001 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01D8E1AC LDR X1, [X22]

ISIL:
	001 Return 

