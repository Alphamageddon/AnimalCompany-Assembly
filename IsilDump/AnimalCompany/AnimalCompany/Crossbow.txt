Type: AnimalCompany.Crossbow

Method: System.Void Awake()

Disassembly:
	0x01C9D0C0 MOV X0, X31
	0x01C9D0C4 BL 0x3AA4844
	0x01C9D0C8 STR S0, [X19 + 0x98]
	0x01C9D0CC LDP X20, X19, [X31 + 0x40]
	0x01C9D0D0 LDP X30, X21, [X31 + 0x30]
	0x01C9D0D4 LDP D9, D8, [X31 + 0x20]
	0x01C9D0D8 LDP D11, D10, [X31 + 0x10]
	0x01C9D0DC LDP D13, D12, [X31], #0x50
	0x01C9D0E0 RET
	0x01C9D0E4 BL 0x1B6EA1C
	0x01C9D0E8 MOV X1, X31
	0x01C9D0EC B 0x1D661D8
	0x01C9D0F0 RET
	0x01C9D0F4 RET
	0x01C9D0F8 STP X30, X19, [X31 - 0x10]!
	0x01C9D0FC LDR X8, [X0 + 0x50]
	0x01C9D100 CBZ X8, 0x1C9D118
	0x01C9D104 LDR W8, [X8]
	0x01C9D108 CMP W8, 0x0
	0x01C9D10C CSET W0, NE
	0x01C9D110 LDP X30, X19, [X31], #0x10
	0x01C9D114 RET
	0x01C9D118 ADRP X0, 0x22B0000
	0x01C9D11C LDR X0, [X0 + 0x490]
	0x01C9D120 BL 0x1B6E804
	0x01C9D124 BL 0x1B6EA0C
	0x01C9D128 MOV X19, X0
	0x01C9D12C ADRP X0, 0x22B1000
	0x01C9D130 LDR X0, [X0 + 0x2B8]
	0x01C9D134 BL 0x1B6E804
	0x01C9D138 MOV X1, X0
	0x01C9D13C MOV X0, X19
	0x01C9D140 MOV X2, X31
	0x01C9D144 BL 0x31E7550
	0x01C9D148 ADRP X0, 0x22B1000
	0x01C9D14C LDR X0, [X0 + 0x2C0]
	0x01C9D150 BL 0x1B6E804
	0x01C9D154 MOV X1, X0
	0x01C9D158 MOV X0, X19
	0x01C9D15C BL 0x1B6E8E8
	0x01C9D160 STP X30, X19, [X31 - 0x10]!
	0x01C9D164 LDR X8, [X0 + 0x50]
	0x01C9D168 CBZ X8, 0x1C9D17C
	0x01C9D16C AND W9, W1, 0x1
	0x01C9D170 STR W9, [X8]
	0x01C9D174 LDP X30, X19, [X31], #0x10
	0x01C9D178 RET
	0x01C9D17C ADRP X0, 0x22B0000
	0x01C9D180 LDR X0, [X0 + 0x490]
	0x01C9D184 BL 0x1B6E804
	0x01C9D188 BL 0x1B6EA0C
	0x01C9D18C MOV X19, X0
	0x01C9D190 ADRP X0, 0x22B1000
	0x01C9D194 LDR X0, [X0 + 0x2B8]
	0x01C9D198 BL 0x1B6E804
	0x01C9D19C MOV X1, X0
	0x01C9D1A0 MOV X0, X19
	0x01C9D1A4 MOV X2, X31
	0x01C9D1A8 BL 0x31E7550
	0x01C9D1AC ADRP X0, 0x22B1000
	0x01C9D1B0 LDR X0, [X0 + 0x2C8]
	0x01C9D1B4 BL 0x1B6E804
	0x01C9D1B8 MOV X1, X0
	0x01C9D1BC MOV X0, X19
	0x01C9D1C0 BL 0x1B6E8E8
	0x01C9D1C4 STP X30, X23, [X31 - 0x30]!
	0x01C9D1C8 STP X22, X21, [X31 + 0x10]
	0x01C9D1CC STP X20, X19, [X31 + 0x20]
	0x01C9D1D0 ADRP X20, 0x2586000
	0x01C9D1D4 LDRB W8, [X20 + 0x404]
	0x01C9D1D8 MOV X19, X0
	0x01C9D1DC TBNZ X8, 0x0, 0x1C9D20C
	0x01C9D1E0 ADRP X0, 0x22B1000
	0x01C9D1E4 LDR X0, [X0 + 0x170]
	0x01C9D1E8 BL 0x1B6E7F0
	0x01C9D1EC ADRP X0, 0x22B1000
	0x01C9D1F0 LDR X0, [X0 + 0x2D0]
	0x01C9D1F4 BL 0x1B6E7F0
	0x01C9D1F8 ADRP X0, 0x22B1000
	0x01C9D1FC LDR X0, [X0 + 0x2D8]
	0x01C9D200 BL 0x1B6E7F0
	0x01C9D204 MOVZ W8, 0x1
	0x01C9D208 STRB W8, [X20 + 0x404]
	0x01C9D20C LDR X23, [X19 + 0x80]
	0x01C9D210 CBZ X23, 0x1C9D2FC
	0x01C9D214 ADRP X22, 0x22B1000
	0x01C9D218 LDR X22, [X22 + 0x170]
	0x01C9D21C ADRP X21, 0x22B1000
	0x01C9D220 LDR X20, [X23 + 0x198]
	0x01C9D224 LDR X0, [X22]
	0x01C9D228 LDR X21, [X21 + 0x2D8]
	0x01C9D22C BL 0x1B6EA0C
	0x01C9D230 LDR X2, [X21]
	0x01C9D234 MOV X1, X19
	0x01C9D238 MOV X3, X31
	0x01C9D23C MOV X21, X0
	0x01C9D240 BL 0x317DB24
	0x01C9D244 MOV X0, X20
	0x01C9D248 MOV X1, X21
	0x01C9D24C MOV X2, X31
	0x01C9D250 BL 0x322A750
	0x01C9D254 LDR X1, [X22]
	0x01C9D258 CBZ X0, 0x1C9D27C
	0x01C9D25C LDR X8, [X0]
	0x01C9D260 CMP X8, X1
	0x01C9D264 B.NE 0x1C9D2E4
	0x01C9D268 STR X0, [X23 + 0x198]
	0x01C9D26C LDR X8, [X0]
	0x01C9D270 CMP X8, X1
	0x01C9D274 B.EQ 0x1C9D280
	0x01C9D278 B 0x1C9D2E4
	0x01C9D27C STR X0, [X23 + 0x198]
	0x01C9D280 LDR X23, [X19 + 0x80]
	0x01C9D284 CBZ X23, 0x1C9D2FC
	0x01C9D288 ADRP X21, 0x22B1000
	0x01C9D28C LDR X20, [X23 + 0x1A0]
	0x01C9D290 LDR X21, [X21 + 0x2D0]
	0x01C9D294 MOV X0, X1
	0x01C9D298 BL 0x1B6EA0C
	0x01C9D29C LDR X2, [X21]
	0x01C9D2A0 MOV X1, X19
	0x01C9D2A4 MOV X3, X31
	0x01C9D2A8 MOV X21, X0
	0x01C9D2AC BL 0x317DB24
	0x01C9D2B0 MOV X0, X20
	0x01C9D2B4 MOV X1, X21
	0x01C9D2B8 MOV X2, X31
	0x01C9D2BC BL 0x322A750

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2587000
	008 Move X21, 0x22B2000
	009 Move W8, [X20+1019]
	010 Move X21, [X21+616]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0x22B2000
	017 Move X0, [X0+624]
	018 Call 0x1B6F7F0
	019 Move X0, 0x22B2000
	020 Move X0, [X0+368]
	021 Call 0x1B6F7F0
	022 Move X0, 0x22B2000
	023 Move X0, [X0+616]
	024 Call 0x1B6F7F0
	025 Move X0, 0x22B2000
	026 Move X0, [X0+632]
	027 Call 0x1B6F7F0
	028 Move X0, 0x22B2000
	029 Move X0, [X0+640]
	030 Call 0x1B6F7F0
	031 Move X0, 0x22B2000
	032 Move X0, [X0+648]
	033 Call 0x1B6F7F0
	034 Move W8, 1
	035 Move [X20+1019], W8
	036 Move X1, [X21]
	037 Move X0, X19
	038 Call 0x2090DE8, X0
	039 Move [X19+160], X0
	040 Compare X0, 0
	041 JumpIfEqual {140}
	042 Move X23, 0x22B2000
	043 Move X23, [X23+368]
	044 Move X20, X0
	045 Move X21, [X0+408]
	046 Move X22, 0x22B2000
	047 Move X0, [X23]
	048 Move X22, [X22+640]
	049 Call 0x1B6FA0C
	050 Move X2, [X22]
	051 Move X1, X19
	052 Move X3, X31
	053 Move X22, X0
	054 Call Action..ctor, X0, X1, X2
	055 Move X0, X21
	056 Move X1, X22
	057 Move X2, X31
	058 Call Delegate.Combine, X0, X1
	059 Move X1, [X23]
	060 Compare X0, 0
	061 JumpIfEqual {67}
	062 Move X8, [X0]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move [X20+408], X0
	065 Move X8, [X0]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move [X20+408], X0
	068 Move X22, [X19+160]
	069 Compare X22, 0
	070 JumpIfEqual {140}
	071 Move X21, 0x22B2000
	072 Move X20, [X22+400]
	073 Move X21, [X21+648]
	074 Move X0, X1
	075 Call 0x1B6FA0C
	076 Move X2, [X21]
	077 Move X1, X19
	078 Move X3, X31
	079 Move X21, X0
	080 Call Action..ctor, X0, X1, X2
	081 Move X0, X20
	082 Move X1, X21
	083 Move X2, X31
	084 Call Delegate.Combine, X0, X1
	085 Compare X0, 0
	086 JumpIfEqual {94}
	087 Move X1, [X23]
	088 Move X8, [X0]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move [X22+400], X0
	091 Move X8, [X0]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Call 0x1B6FCDC
	094 Move [X22+400], X0
	095 Move X22, [X19+128]
	096 Compare X22, 0
	097 JumpIfEqual {140}
	098 Move X23, 0x22B2000
	099 Move X23, [X23+624]
	100 Move X21, 0x22B2000
	101 Move X20, [X22+144]
	102 Move X0, [X23]
	103 Move X21, [X21+632]
	104 Call 0x1B6FA0C
	105 Move X2, [X21]
	106 Move X1, X19
	107 Move X3, X31
	108 Move X21, X0
	109 Call Action`2<Int32Enum, Object>..ctor, X0, X1, X2
	110 Move X0, X20
	111 Move X1, X21
	112 Move X2, X31
	113 Call Delegate.Combine, X0, X1
	114 Compare X0, 0
	115 JumpIfEqual {132}
	116 Move X20, [X23]
	117 Move X19, X0
	118 Move X1, X20
	119 Call 0x1B6F8FC
	120 Compare X0, 0
	121 JumpIfEqual {129}
	122 Move [X22+144], X0
	123 Move X20, [X23]
	124 Move X0, X19
	125 Move X1, X20
	126 Call 0x1B6F8FC
	127 Compare X0, 0
	128 JumpIfNotEqual {133}
	129 Move X0, X19
	130 Move X1, X20
	131 Call 0x1B6FCDC
	132 Move [X22+144], X31
	133 Move X20, [X31+32]
	134 Move X19, [X31+40]
	135 Move X22, [X31+16]
	136 Move X21, [X31+24]
	137 Move X30, [X31+48]
	138 Move X23, [X31+56]
	139 Return 
	140 Call 0x1B6FA1C

Method: System.Void OnDestroy()

Disassembly:
	0x01C9D2C0 CBZ X0, 0x1C9D2E8
	0x01C9D2C4 LDR X1, [X22]
	0x01C9D2C8 LDR X8, [X0]
	0x01C9D2CC CMP X8, X1
	0x01C9D2D0 B.NE 0x1C9D2E4
	0x01C9D2D4 STR X0, [X23 + 0x1A0]
	0x01C9D2D8 LDR X8, [X0]
	0x01C9D2DC CMP X8, X1
	0x01C9D2E0 B.EQ 0x1C9D2EC
	0x01C9D2E4 BL 0x1B6ECDC
	0x01C9D2E8 STR X0, [X23 + 0x1A0]
	0x01C9D2EC LDP X20, X19, [X31 + 0x20]
	0x01C9D2F0 LDP X22, X21, [X31 + 0x10]
	0x01C9D2F4 LDP X30, X23, [X31], #0x30
	0x01C9D2F8 RET
	0x01C9D2FC BL 0x1B6EA1C
	0x01C9D300 STP X30, X23, [X31 - 0x30]!
	0x01C9D304 STP X22, X21, [X31 + 0x10]
	0x01C9D308 STP X20, X19, [X31 + 0x20]
	0x01C9D30C ADRP X20, 0x2586000
	0x01C9D310 ADRP X21, 0x22B1000
	0x01C9D314 LDRB W8, [X20 + 0x405]
	0x01C9D318 LDR X21, [X21 + 0x1C0]
	0x01C9D31C MOV X19, X0
	0x01C9D320 TBNZ X8, 0x0, 0x1C9D35C
	0x01C9D324 ADRP X0, 0x22B1000
	0x01C9D328 LDR X0, [X0 + 0x170]
	0x01C9D32C BL 0x1B6E7F0
	0x01C9D330 ADRP X0, 0x22B1000
	0x01C9D334 LDR X0, [X0 + 0x2D0]
	0x01C9D338 BL 0x1B6E7F0
	0x01C9D33C ADRP X0, 0x22B1000
	0x01C9D340 LDR X0, [X0 + 0x2D8]
	0x01C9D344 BL 0x1B6E7F0
	0x01C9D348 ADRP X0, 0x22B1000
	0x01C9D34C LDR X0, [X0 + 0x1C0]
	0x01C9D350 BL 0x1B6E7F0
	0x01C9D354 MOVZ W8, 0x1
	0x01C9D358 STRB W8, [X20 + 0x405]
	0x01C9D35C LDR X0, [X21]
	0x01C9D360 LDR W8, [X0 + 0xE0]
	0x01C9D364 CBNZ W8, 0x1C9D36C
	0x01C9D368 BL 0x1B6E8F8
	0x01C9D36C CBZ X19, 0x1C9D46C
	0x01C9D370 LDR W8, [X19 + 0x30]
	0x01C9D374 LDR X23, [X19 + 0x80]
	0x01C9D378 ORR W8, W8, 0x8
	0x01C9D37C STR W8, [X19 + 0x30]
	0x01C9D380 CBZ X23, 0x1C9D46C
	0x01C9D384 ADRP X22, 0x22B1000
	0x01C9D388 LDR X22, [X22 + 0x170]
	0x01C9D38C ADRP X21, 0x22B1000
	0x01C9D390 LDR X20, [X23 + 0x198]
	0x01C9D394 LDR X0, [X22]
	0x01C9D398 LDR X21, [X21 + 0x2D8]
	0x01C9D39C BL 0x1B6EA0C
	0x01C9D3A0 LDR X2, [X21]
	0x01C9D3A4 MOV X1, X19
	0x01C9D3A8 MOV X3, X31
	0x01C9D3AC MOV X21, X0
	0x01C9D3B0 BL 0x317DB24
	0x01C9D3B4 MOV X0, X20
	0x01C9D3B8 MOV X1, X21
	0x01C9D3BC MOV X2, X31
	0x01C9D3C0 BL 0x322A948
	0x01C9D3C4 LDR X1, [X22]
	0x01C9D3C8 CBZ X0, 0x1C9D3EC
	0x01C9D3CC LDR X8, [X0]
	0x01C9D3D0 CMP X8, X1
	0x01C9D3D4 B.NE 0x1C9D454
	0x01C9D3D8 STR X0, [X23 + 0x198]
	0x01C9D3DC LDR X8, [X0]
	0x01C9D3E0 CMP X8, X1
	0x01C9D3E4 B.EQ 0x1C9D3F0
	0x01C9D3E8 B 0x1C9D454
	0x01C9D3EC STR X0, [X23 + 0x198]
	0x01C9D3F0 LDR X23, [X19 + 0x80]
	0x01C9D3F4 CBZ X23, 0x1C9D46C
	0x01C9D3F8 ADRP X21, 0x22B1000
	0x01C9D3FC LDR X20, [X23 + 0x1A0]
	0x01C9D400 LDR X21, [X21 + 0x2D0]
	0x01C9D404 MOV X0, X1
	0x01C9D408 BL 0x1B6EA0C
	0x01C9D40C LDR X2, [X21]
	0x01C9D410 MOV X1, X19
	0x01C9D414 MOV X3, X31
	0x01C9D418 MOV X21, X0
	0x01C9D41C BL 0x317DB24
	0x01C9D420 MOV X0, X20
	0x01C9D424 MOV X1, X21
	0x01C9D428 MOV X2, X31
	0x01C9D42C BL 0x322A948
	0x01C9D430 CBZ X0, 0x1C9D458
	0x01C9D434 LDR X1, [X22]
	0x01C9D438 LDR X8, [X0]
	0x01C9D43C CMP X8, X1
	0x01C9D440 B.NE 0x1C9D454
	0x01C9D444 STR X0, [X23 + 0x1A0]
	0x01C9D448 LDR X8, [X0]
	0x01C9D44C CMP X8, X1
	0x01C9D450 B.EQ 0x1C9D45C
	0x01C9D454 BL 0x1B6ECDC
	0x01C9D458 STR X0, [X23 + 0x1A0]
	0x01C9D45C LDP X20, X19, [X31 + 0x20]
	0x01C9D460 LDP X22, X21, [X31 + 0x10]
	0x01C9D464 LDP X30, X23, [X31], #0x30
	0x01C9D468 RET
	0x01C9D46C BL 0x1B6EA1C
	0x01C9D470 STR X30, [X31 - 0x20]!
	0x01C9D474 STP X20, X19, [X31 + 0x10]
	0x01C9D478 MOV X20, X0
	0x01C9D47C BL 0x1C9D0F8
	0x01C9D480 TBZ X0, 0x0, 0x1C9D4B0
	0x01C9D484 MOV X0, X20
	0x01C9D488 BL 0x1C9D4E8
	0x01C9D48C MOV X1, X0
	0x01C9D490 MOV X0, X20
	0x01C9D494 MOV X2, X31
	0x01C9D498 BL 0x3A9E9B0
	0x01C9D49C MOV X0, X20
	0x01C9D4A0 LDP X20, X19, [X31 + 0x10]
	0x01C9D4A4 MOV W1, W31
	0x01C9D4A8 LDR X30, [X31], #0x20
	0x01C9D4AC B 0x1C9D160
	0x01C9D4B0 LDR X19, [X20 + 0x98]
	0x01C9D4B4 MOV X0, X20
	0x01C9D4B8 MOV X1, X31
	0x01C9D4BC BL 0x3A9B084
	0x01C9D4C0 CBZ X0, 0x1C9D4E4
	0x01C9D4C4 MOV X1, X31
	0x01C9D4C8 BL 0x3AA7658
	0x01C9D4CC MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2587000
	008 Move X21, 0x22B2000
	009 Move W8, [X20+1020]
	010 Move X21, [X21+448]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0x22B2000
	017 Move X0, [X0+624]
	018 Call 0x1B6F7F0
	019 Move X0, 0x22B2000
	020 Move X0, [X0+368]
	021 Call 0x1B6F7F0
	022 Move X0, 0x22B2000
	023 Move X0, [X0+632]
	024 Call 0x1B6F7F0
	025 Move X0, 0x22B2000
	026 Move X0, [X0+640]
	027 Call 0x1B6F7F0
	028 Move X0, 0x22B2000
	029 Move X0, [X0+648]
	030 Call 0x1B6F7F0
	031 Move X0, 0x22B2000
	032 Move X0, [X0+448]
	033 Call 0x1B6F7F0
	034 Move W8, 1
	035 Move [X20+1020], W8
	036 Move X0, [X21]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1B6F8F8
	041 Compare X19, 0
	042 JumpIfEqual {146}
	043 Move W8, [X19+48]
	044 Move X23, [X19+160]
	045 Or W8, W8, 8
	046 Move [X19+48], W8
	047 Compare X23, 0
	048 JumpIfEqual {146}
	049 Move X22, 0x22B2000
	050 Move X22, [X22+368]
	051 Move X21, 0x22B2000
	052 Move X20, [X23+408]
	053 Move X0, [X22]
	054 Move X21, [X21+640]
	055 Call 0x1B6FA0C
	056 Move X2, [X21]
	057 Move X1, X19
	058 Move X3, X31
	059 Move X21, X0
	060 Call Action..ctor, X0, X1, X2
	061 Move X0, X20
	062 Move X1, X21
	063 Move X2, X31
	064 Call Delegate.Remove, X0, X1
	065 Move X1, [X22]
	066 Compare X0, 0
	067 JumpIfEqual {73}
	068 Move X8, [X0]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move [X23+408], X0
	071 Move X8, [X0]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move [X23+408], X0
	074 Move X23, [X19+160]
	075 Compare X23, 0
	076 JumpIfEqual {146}
	077 Move X21, 0x22B2000
	078 Move X20, [X23+400]
	079 Move X21, [X21+648]
	080 Move X0, X1
	081 Call 0x1B6FA0C
	082 Move X2, [X21]
	083 Move X1, X19
	084 Move X3, X31
	085 Move X21, X0
	086 Call Action..ctor, X0, X1, X2
	087 Move X0, X20
	088 Move X1, X21
	089 Move X2, X31
	090 Call Delegate.Remove, X0, X1
	091 Compare X0, 0
	092 JumpIfEqual {100}
	093 Move X1, [X22]
	094 Move X8, [X0]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move [X23+400], X0
	097 Move X8, [X0]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Call 0x1B6FCDC
	100 Move [X23+400], X0
	101 Move X22, [X19+128]
	102 Compare X22, 0
	103 JumpIfEqual {146}
	104 Move X23, 0x22B2000
	105 Move X23, [X23+624]
	106 Move X21, 0x22B2000
	107 Move X20, [X22+144]
	108 Move X0, [X23]
	109 Move X21, [X21+632]
	110 Call 0x1B6FA0C
	111 Move X2, [X21]
	112 Move X1, X19
	113 Move X3, X31
	114 Move X21, X0
	115 Call Action`2<Int32Enum, Object>..ctor, X0, X1, X2
	116 Move X0, X20
	117 Move X1, X21
	118 Move X2, X31
	119 Call Delegate.Remove, X0, X1
	120 Compare X0, 0
	121 JumpIfEqual {138}
	122 Move X20, [X23]
	123 Move X19, X0
	124 Move X1, X20
	125 Call 0x1B6F8FC
	126 Compare X0, 0
	127 JumpIfEqual {135}
	128 Move [X22+144], X0
	129 Move X20, [X23]
	130 Move X0, X19
	131 Move X1, X20
	132 Call 0x1B6F8FC
	133 Compare X0, 0
	134 JumpIfNotEqual {139}
	135 Move X0, X19
	136 Move X1, X20
	137 Call 0x1B6FCDC
	138 Move [X22+144], X31
	139 Move X20, [X31+32]
	140 Move X19, [X31+40]
	141 Move X22, [X31+16]
	142 Move X21, [X31+24]
	143 Move X30, [X31+48]
	144 Move X23, [X31+56]
	145 Return 
	146 Call 0x1B6FA1C

Method: System.Void HandleTriggerUse()

Disassembly:
	0x01C9D4D0 LDP X20, X19, [X31 + 0x10]
	0x01C9D4D4 FMOV S3, 1
	0x01C9D4D8 MOV X1, X31
	0x01C9D4DC LDR X30, [X31], #0x20
	0x01C9D4E0 B 0x1CC181C
	0x01C9D4E4 BL 0x1B6EA1C
	0x01C9D4E8 STP X30, X21, [X31 - 0x20]!
	0x01C9D4EC STP X20, X19, [X31 + 0x10]
	0x01C9D4F0 ADRP X20, 0x2586000
	0x01C9D4F4 ADRP X21, 0x22B1000
	0x01C9D4F8 LDRB W8, [X20 + 0x406]
	0x01C9D4FC LDR X21, [X21 + 0x2E0]
	0x01C9D500 MOV X19, X0
	0x01C9D504 TBNZ X8, 0x0, 0x1C9D51C
	0x01C9D508 ADRP X0, 0x22B1000
	0x01C9D50C LDR X0, [X0 + 0x2E0]
	0x01C9D510 BL 0x1B6E7F0
	0x01C9D514 MOVZ W8, 0x1
	0x01C9D518 STRB W8, [X20 + 0x406]
	0x01C9D51C LDR X0, [X21]
	0x01C9D520 BL 0x1B6EA0C
	0x01C9D524 MOV X1, X31
	0x01C9D528 MOV X20, X0
	0x01C9D52C BL 0x32276F8
	0x01C9D530 STR W31, [X20 + 0x10]
	0x01C9D534 STR X19, [X20 + 0x20]
	0x01C9D538 MOV X0, X20
	0x01C9D53C LDP X20, X19, [X31 + 0x10]
	0x01C9D540 LDP X30, X21, [X31], #0x20
	0x01C9D544 RET
	0x01C9D548 MOVZ W1, 0x1
	0x01C9D54C B 0x1C9D160
	0x01C9D550 STR X30, [X31 - 0x20]!
	0x01C9D554 STP X20, X19, [X31 + 0x10]
	0x01C9D558 MOV W19, W1
	0x01C9D55C MOV X1, X31
	0x01C9D560 MOV X20, X0
	0x01C9D564 BL 0x32276F8
	0x01C9D568 STR W19, [X20 + 0x10]
	0x01C9D56C LDP X20, X19, [X31 + 0x10]
	0x01C9D570 LDR X30, [X31], #0x20
	0x01C9D574 RET
	0x01C9D578 MOVZ W8, 0x41800000
	0x01C9D57C MOVZ W9, 0x1
	0x01C9D580 MOV X1, X31
	0x01C9D584 STR W8, [X0 + 0xA0]
	0x01C9D588 STRB W9, [X0 + 0xB0]
	0x01C9D58C B 0x1D661D8
	0x01C9D590 LDRB W1, [X0 + 0xB0]
	0x01C9D594 B 0x1C9D160
	0x01C9D598 STP X30, X19, [X31 - 0x10]!
	0x01C9D59C MOV X19, X0
	0x01C9D5A0 BL 0x1C9D0F8
	0x01C9D5A4 AND W8, W0, 0x1
	0x01C9D5A8 STRB W8, [X19 + 0xB0]
	0x01C9D5AC LDP X30, X19, [X31], #0x10
	0x01C9D5B0 RET
	0x01C9D5B4 RET
	0x01C9D5B8 SUB X31, X31, 0x90
	0x01C9D5BC STR D10, [X31 + 0x50]
	0x01C9D5C0 STP D9, D8, [X31 + 0x60]
	0x01C9D5C4 STP X30, X21, [X31 + 0x70]
	0x01C9D5C8 STP X20, X19, [X31 + 0x80]
	0x01C9D5CC ADRP X19, 0x2586000
	0x01C9D5D0 LDRB W8, [X19 + 0x407]
	0x01C9D5D4 MOV X20, X0
	0x01C9D5D8 TBNZ X8, 0x0, 0x1C9D614
	0x01C9D5DC ADRP X0, 0x22B1000
	0x01C9D5E0 LDR X0, [X0 + 0x298]
	0x01C9D5E4 BL 0x1B6E7F0
	0x01C9D5E8 ADRP X0, 0x22B1000
	0x01C9D5EC LDR X0, [X0 + 0x248]
	0x01C9D5F0 BL 0x1B6E7F0
	0x01C9D5F4 ADRP X0, 0x22B1000
	0x01C9D5F8 LDR X0, [X0 + 0x250]
	0x01C9D5FC BL 0x1B6E7F0
	0x01C9D600 ADRP X0, 0x22B1000
	0x01C9D604 LDR X0, [X0 + 0x2E8]
	0x01C9D608 BL 0x1B6E7F0
	0x01C9D60C MOVZ W8, 0x1
	0x01C9D610 STRB W8, [X19 + 0x407]
	0x01C9D614 LDR W8, [X20 + 0x10]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D10
	003 Move [X31+24], D9
	004 Move [X31+32], D8
	005 Move [X31+40], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x2587000
	009 Move W8, [X20+1021]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x22B1000
	016 Move X0, [X0+1144]
	017 Call 0x1B6F7F0
	018 Move W8, 1
	019 Move [X20+1021], W8
	020 Move X0, X19
	021 Move X1, X31
	022 Call Component.get_transform, X0
	023 Compare X0, 0
	024 JumpIfEqual {104}
	025 Move X1, X31
	026 Call Transform.get_forward, X0
	027 Move W8, 0x420C0000
	028 Move S3, W8
	029 Multiply S8, S0, S3
	030 Multiply S9, S1, S3
	031 Multiply S10, S2, S3
	032 Move [X31], S8
	033 Move [X31+8], S9
	034 Move [X31+8], S10
	035 Move X8, [X19+128]
	036 Compare X8, 0
	037 JumpIfEqual {104}
	038 Move X9, 0x22B1000
	039 Move X9, [X9+1144]
	040 Move X20, [X8+192]
	041 Move X0, [X9]
	042 Move W9, [X0+224]
	043 Compare W9, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1B6F8F8
	046 Move X0, X20
	047 Move X1, X31
	048 Move X2, X31
	049 Call Object.op_Inequality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {75}
	054 Move X8, [X19+128]
	055 Compare X8, 0
	056 JumpIfEqual {104}
	057 Move X8, [X8+192]
	058 Compare X8, 0
	059 JumpIfEqual {104}
	060 Move X0, [X8+304]
	061 Compare X0, 0
	062 JumpIfEqual {104}
	063 Move X1, X31
	064 Call Rigidbody.get_mass, X0
	065 Move W8, 0x420C0000
	066 Add X0, X31, 0
	067 Move S2, 8
	068 Move S3, 5
	069 Move S1, W8
	070 Move X1, X31
	071 Call Player.CalculateClampedVelocity, X0, V0, V1, V2, V3
	072 Move S8, [X31]
	073 Move S9, [X31+4]
	074 Move V10, [X31+8]
	075 Move X0, X19
	076 Move V0, V8
	077 Move V1, V9
	078 Move V2, V10
	079 Call Crossbow.ReleaseIfHeld, X0, X1
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {96}
	084 Move X20, [X19+152]
	085 Move X0, X19
	086 Move X1, X31
	087 Call Component.get_transform, X0
	088 Compare X0, 0
	089 JumpIfEqual {104}
	090 Move X1, X31
	091 Call Transform.get_position, X0
	092 Move S3, 1
	093 Move X0, X20
	094 Move X1, X31
	095 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	096 Move X20, [X31+48]
	097 Move X19, [X31+56]
	098 Move X30, [X31+40]
	099 Move D9, [X31+24]
	100 Move D8, [X31+32]
	101 Move V10, [X31+16]
	102 Add X31, X31, 64
	103 Return 
	104 Call 0x1B6FA1C

Method: System.Void HandleUse()

Disassembly:
	0x01C9D780 MOV X1, X21
	0x01C9D784 MOV X5, X31
	0x01C9D788 MOV X6, X31
	0x01C9D78C MOV W7, W31
	0x01C9D790 STR V0, [X31 + 0x1]
	0x01C9D794 STR W8, [X31 + 0x20]
	0x01C9D798 STR X31, [X31]
	0x01C9D79C BL 0x1D98EB8
	0x01C9D7A0 CBZ X0, 0x1C9D80C
	0x01C9D7A4 ADRP X8, 0x22B1000
	0x01C9D7A8 LDR X8, [X8 + 0x298]
	0x01C9D7AC LDR X1, [X8]
	0x01C9D7B0 BL 0x208FDE8
	0x01C9D7B4 LDR X8, [X19 + 0x88]
	0x01C9D7B8 CBZ X8, 0x1C9D80C
	0x01C9D7BC MOV X20, X0
	0x01C9D7C0 MOV X0, X8
	0x01C9D7C4 MOV X1, X31
	0x01C9D7C8 BL 0x3AA7AD0
	0x01C9D7CC CBZ X20, 0x1C9D80C
	0x01C9D7D0 LDR V3, [X19 + 0xA0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2587000
	005 Move W8, [X20+1087]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, 0x22B1000
	010 Move X0, [X0+1152]
	011 Call 0x1B6F7F0
	012 Move W8, 1
	013 Move [X20+1087], W8
	014 Move X8, 0x22B1000
	015 Move X8, [X8+1152]
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X8, [X8]
	020 Move X8, [X8+184]
	021 Move S0, [X8]
	022 Move S1, [X8+4]
	023 Move V2, [X8+8]
	024 Move X30, [X31+32]
	025 Call Crossbow.ReleaseIfHeld, X0, X1
	026 Return 

Method: System.Void HandleAttachedChanged(AnimalCompany.AttachedLocation location, AnimalCompany.GrabbableItem item)

Disassembly:
	0x01C9D7D4 MOVZ W1, 0x1
	0x01C9D7D8 MOV X0, X20
	0x01C9D7DC MOV X2, X31
	0x01C9D7E0 FMUL S2, S2, S3
	0x01C9D7E4 FMUL S1, S1, S3
	0x01C9D7E8 FMUL S0, S0, S3
	0x01C9D7EC BL 0x3AF6FC8
	0x01C9D7F0 MOV W0, W31
	0x01C9D7F4 LDP X20, X19, [X31 + 0x80]
	0x01C9D7F8 LDP X30, X21, [X31 + 0x70]
	0x01C9D7FC LDP D9, D8, [X31 + 0x60]
	0x01C9D800 LDR V10, [X31 + 0x50]
	0x01C9D804 ADD X31, X31, 0x90
	0x01C9D808 RET
	0x01C9D80C BL 0x1B6EA1C
	0x01C9D810 LDR X0, [X0 + 0x18]
	0x01C9D814 RET
	0x01C9D818 STP X30, X19, [X31 - 0x10]!
	0x01C9D81C ADRP X0, 0x22B0000
	0x01C9D820 LDR X0, [X0 + 0x990]
	0x01C9D824 BL 0x1B6E804
	0x01C9D828 BL 0x1B6EA0C
	0x01C9D82C MOV X1, X31
	0x01C9D830 MOV X19, X0
	0x01C9D834 BL 0x31E99B4
	0x01C9D838 ADRP X0, 0x22B1000
	0x01C9D83C LDR X0, [X0 + 0x2F0]
	0x01C9D840 BL 0x1B6E804
	0x01C9D844 MOV X1, X0
	0x01C9D848 MOV X0, X19
	0x01C9D84C BL 0x1B6E8E8
	0x01C9D850 LDR X0, [X0 + 0x18]
	0x01C9D854 RET
	0x01C9D858 LDR X0, [X0 + 0x80]
	0x01C9D85C RET
	0x01C9D860 LDR X0, [X0 + 0x98]
	0x01C9D864 RET
	0x01C9D868 STP X30, X19, [X31 - 0x10]!
	0x01C9D86C LDR X8, [X0 + 0x50]
	0x01C9D870 CBZ X8, 0x1C9D888
	0x01C9D874 LDR W8, [X8]
	0x01C9D878 CMP W8, 0x0
	0x01C9D87C CSET W0, NE
	0x01C9D880 LDP X30, X19, [X31], #0x10
	0x01C9D884 RET
	0x01C9D888 ADRP X0, 0x22B0000
	0x01C9D88C LDR X0, [X0 + 0x490]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2587000
	006 Move W8, [X21+1022]
	007 Move X20, X2
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22B1000
	014 Move X0, [X0+1144]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1022], W8
	018 Move X0, [X19+64]
	019 Compare X0, 0
	020 JumpIfEqual {64}
	021 Move W8, [X0+96]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 2
	024 Compare TEMP, 2
	025 JumpIfEqual {64}
	026 Move X1, X31
	027 Call NetworkObject.get_HasStateAuthority, X0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {64}
	032 Move X8, 0x22B1000
	033 Move X8, [X8+1144]
	034 Move X0, [X8]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1B6F8F8
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Inequality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {64}
	047 Move X20, [X19+144]
	048 Move X0, X19
	049 Move X1, X31
	050 Call Component.get_transform, X0
	051 Compare X0, 0
	052 JumpIfEqual {69}
	053 Move X1, X31
	054 Call Transform.get_position, X0
	055 Move X0, X20
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move S3, 1
	059 Move X1, X31
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	063 Return 
	064 Move X20, [X31+16]
	065 Move X19, [X31+24]
	066 Move X30, [X31+32]
	067 Move X21, [X31+40]
	068 Return 
	069 Call 0x1B6FA1C

Method: System.Boolean ReleaseIfHeld(UnityEngine.Vector3 velocity)

Disassembly:
	0x01C9D618 LDR X19, [X20 + 0x20]
	0x01C9D61C CMP W8, 0x1
	0x01C9D620 B.EQ 0x1C9D69C
	0x01C9D624 CBNZ W8, 0x1C9D7F0
	0x01C9D628 MOVN W8, 0x0
	0x01C9D62C STR W8, [X20 + 0x10]
	0x01C9D630 CBZ X19, 0x1C9D80C
	0x01C9D634 LDR X21, [X19 + 0x90]
	0x01C9D638 CBZ X21, 0x1C9D668
	0x01C9D63C MOV X0, X19
	0x01C9D640 MOV X1, X31
	0x01C9D644 BL 0x3A9B084
	0x01C9D648 CBZ X0, 0x1C9D80C
	0x01C9D64C MOV X1, X31
	0x01C9D650 BL 0x3AA7658
	0x01C9D654 FMOV S3, 1
	0x01C9D658 MOVZ W1, 0x1
	0x01C9D65C MOV X0, X21
	0x01C9D660 MOV X2, X31
	0x01C9D664 BL 0x1CC35DC
	0x01C9D668 ADRP X8, 0x22B1000
	0x01C9D66C LDR X8, [X8 + 0x2E8]
	0x01C9D670 LDR X0, [X8]
	0x01C9D674 BL 0x1B6EA0C
	0x01C9D678 ADRP X8, 0xFFFFFFFFFEE0C000
	0x01C9D67C LDR V0, [X8 + 0x930]
	0x01C9D680 MOV X1, X31
	0x01C9D684 MOV X19, X0
	0x01C9D688 BL 0x3AA273C
	0x01C9D68C MOVZ W0, 0x1
	0x01C9D690 STR X19, [X20 + 0x18]
	0x01C9D694 STR W0, [X20 + 0x10]
	0x01C9D698 B 0x1C9D7F4
	0x01C9D69C MOVN W8, 0x0
	0x01C9D6A0 STR W8, [X20 + 0x10]
	0x01C9D6A4 CBZ X19, 0x1C9D80C
	0x01C9D6A8 LDR X0, [X19 + 0x88]
	0x01C9D6AC CBZ X0, 0x1C9D80C
	0x01C9D6B0 MOV X1, X31
	0x01C9D6B4 BL 0x3AA7658
	0x01C9D6B8 LDR X0, [X19 + 0x88]
	0x01C9D6BC CBZ X0, 0x1C9D80C
	0x01C9D6C0 MOV X1, X31
	0x01C9D6C4 MOV V8.16B, V0.16B
	0x01C9D6C8 MOV V9.16B, V1.16B
	0x01C9D6CC MOV V10.16B, V2.16B
	0x01C9D6D0 BL 0x3AA5FBC
	0x01C9D6D4 MOV V4.16B, V0.16B
	0x01C9D6D8 MOV V5.16B, V1.16B
	0x01C9D6DC MOV V6.16B, V2.16B
	0x01C9D6E0 MOV V7.16B, V3.16B
	0x01C9D6E4 MOVZ W0, 0x1
	0x01C9D6E8 MOV V0.16B, V8.16B
	0x01C9D6EC MOV V1.16B, V9.16B
	0x01C9D6F0 MOV V2.16B, V10.16B
	0x01C9D6F4 MOV V3.16B, V4.16B
	0x01C9D6F8 MOV V4.16B, V5.16B
	0x01C9D6FC MOV V5.16B, V6.16B
	0x01C9D700 MOV V6.16B, V7.16B
	0x01C9D704 MOV X1, X31
	0x01C9D708 BL 0x1CF3540
	0x01C9D70C LDR X0, [X19 + 0x88]
	0x01C9D710 CBZ X0, 0x1C9D80C
	0x01C9D714 LDR X20, [X19 + 0x38]
	0x01C9D718 LDR X21, [X19 + 0xA8]
	0x01C9D71C MOV X1, X31
	0x01C9D720 BL 0x3AA7658
	0x01C9D724 ADRP X8, 0x22B1000
	0x01C9D728 LDR X8, [X8 + 0x248]
	0x01C9D72C ADD X0, X31, 0x40
	0x01C9D730 STP X31, X31, [X31 + 0x40]
	0x01C9D734 LDR X1, [X8]
	0x01C9D738 BL 0x22DC630
	0x01C9D73C LDR X0, [X19 + 0x88]
	0x01C9D740 CBZ X0, 0x1C9D80C
	0x01C9D744 MOV X1, X31
	0x01C9D748 BL 0x3AA5FBC
	0x01C9D74C ADRP X8, 0x22B1000
	0x01C9D750 LDR X8, [X8 + 0x250]
	0x01C9D754 ADD X0, X31, 0x28
	0x01C9D758 STP X31, X31, [X31 + 0x28]
	0x01C9D75C STR W31, [X31 + 0x38]
	0x01C9D760 LDR X1, [X8]
	0x01C9D764 BL 0x22D82D0
	0x01C9D768 CBZ X20, 0x1C9D80C
	0x01C9D76C LDUR V0, [X31 + 0x28]
	0x01C9D770 LDR W8, [X31 + 0x38]
	0x01C9D774 LDP X2, X3, [X31 + 0x40]
	0x01C9D778 ADD X4, X31, 0x10
	0x01C9D77C MOV X0, X20

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+120], X23
	012 Move [X31+128], X22
	013 Move [X31+136], X21
	014 Move [X31+144], X20
	015 Move [X31+152], X19
	016 Move X19, X0
	017 Move X0, [X0+128]
	018 Compare X0, 0
	019 JumpIfEqual {118}
	020 Move V11, V2
	021 Move V8, V1
	022 Move V12, V0
	023 Call AttachedItemAnchor.get_grabbedItem, X0
	024 Move [X31+40], X0
	025 Add X0, X31, 40
	026 Move X1, X31
	027 Call NetworkBehaviourId.get_IsValid, X0
	028 Move W20, W0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {101}
	033 Move X21, [X19+128]
	034 Compare X21, 0
	035 JumpIfEqual {118}
	036 Move X0, X21
	037 Call AttachedItemAnchor.get_grabbedItem, X0
	038 Move X8, [X19+128]
	039 Compare X8, 0
	040 JumpIfEqual {118}
	041 Move X22, X0
	042 Move X0, X8
	043 Move X1, X31
	044 Call Component.get_transform, X0
	045 Compare X0, 0
	046 JumpIfEqual {118}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X0, [X19+128]
	050 Compare X0, 0
	051 JumpIfEqual {118}
	052 Move X1, X31
	053 Move [X31+32], S2
	054 Move [X31+40], S1
	055 Move V13, V0
	056 Move V10, V8
	057 Call Component.get_transform, X0
	058 Compare X0, 0
	059 JumpIfEqual {118}
	060 Move X1, X31
	061 Call Transform.get_rotation, X0
	062 Move X23, 0x2587000
	063 Move W8, [X23+1087]
	064 Move V14, V0
	065 Move V15, V1
	066 Move V8, V2
	067 Move V9, V3
	068 Compare W8, 0
	069 JumpIfNotEqual {75}
	070 Move X0, 0x22B1000
	071 Move X0, [X0+1152]
	072 Call 0x1B6F7F0
	073 Move W8, 1
	074 Move [X23+1087], W8
	075 Move X8, 0x22B1000
	076 Move X8, [X8+1152]
	077 Move S2, [X31+32]
	078 Move S1, [X31+36]
	079 Move X0, X21
	080 Move X1, X22
	081 Move X8, [X8]
	082 Move V3, V14
	083 Move V4, V15
	084 Move V5, V8
	085 Move X8, [X8+184]
	086 Move V6, V9
	087 Move W2, W31
	088 Move V0, [X8+8]
	089 Move X9, [X8]
	090 Move [X31+4], S10
	091 Move [X31+12], S11
	092 Move [X31], S12
	093 Move [X31+24], S0
	094 Move V0, V13
	095 Move [X31+16], X9
	096 Call AttachedItemAnchor.RPC_DropItem, X0, X1, X2, X3, X4, X5, X6, X7
	097 Move X0, [X19+128]
	098 Compare X0, 0
	099 JumpIfEqual {118}
	100 Call AttachedItemAnchor.RPC_UnattachItem, X0
	101 And W0, W20, 1
	102 Move X20, [X31+144]
	103 Move X19, [X31+152]
	104 Move X22, [X31+128]
	105 Move X21, [X31+136]
	106 Move X30, [X31+112]
	107 Move X23, [X31+120]
	108 Move D9, [X31+96]
	109 Move D8, [X31+104]
	110 Move D11, [X31+80]
	111 Move D10, [X31+88]
	112 Move D13, [X31+64]
	113 Move D12, [X31+72]
	114 Move D15, [X31+48]
	115 Move D14, [X31+56]
	116 Add X31, X31, 160
	117 Return X0
	118 Call 0x1B6FA1C

Method: System.Void Update()

Disassembly:
	0x01C9D890 BL 0x1B6E804

ISIL:
No ISIL was generated
Method: System.Void UpdatePull()

Disassembly:
	0x01C9D894 BL 0x1B6EA0C
	0x01C9D898 MOV X19, X0
	0x01C9D89C ADRP X0, 0x22B1000
	0x01C9D8A0 LDR X0, [X0 + 0x2F8]
	0x01C9D8A4 BL 0x1B6E804
	0x01C9D8A8 MOV X1, X0
	0x01C9D8AC MOV X0, X19
	0x01C9D8B0 MOV X2, X31
	0x01C9D8B4 BL 0x31E7550
	0x01C9D8B8 ADRP X0, 0x22B1000
	0x01C9D8BC LDR X0, [X0 + 0x300]
	0x01C9D8C0 BL 0x1B6E804
	0x01C9D8C4 MOV X1, X0
	0x01C9D8C8 MOV X0, X19
	0x01C9D8CC BL 0x1B6E8E8
	0x01C9D8D0 STP X30, X19, [X31 - 0x10]!
	0x01C9D8D4 LDR X8, [X0 + 0x50]
	0x01C9D8D8 CBZ X8, 0x1C9D8EC
	0x01C9D8DC AND W9, W1, 0x1
	0x01C9D8E0 STR W9, [X8]
	0x01C9D8E4 LDP X30, X19, [X31], #0x10
	0x01C9D8E8 RET
	0x01C9D8EC ADRP X0, 0x22B0000
	0x01C9D8F0 LDR X0, [X0 + 0x490]
	0x01C9D8F4 BL 0x1B6E804
	0x01C9D8F8 BL 0x1B6EA0C
	0x01C9D8FC MOV X19, X0
	0x01C9D900 ADRP X0, 0x22B1000
	0x01C9D904 LDR X0, [X0 + 0x2F8]
	0x01C9D908 BL 0x1B6E804
	0x01C9D90C MOV X1, X0
	0x01C9D910 MOV X0, X19
	0x01C9D914 MOV X2, X31
	0x01C9D918 BL 0x31E7550
	0x01C9D91C ADRP X0, 0x22B1000
	0x01C9D920 LDR X0, [X0 + 0x308]
	0x01C9D924 BL 0x1B6E804
	0x01C9D928 MOV X1, X0
	0x01C9D92C MOV X0, X19
	0x01C9D930 BL 0x1B6E8E8
	0x01C9D934 STP X30, X23, [X31 - 0x30]!
	0x01C9D938 STP X22, X21, [X31 + 0x10]
	0x01C9D93C STP X20, X19, [X31 + 0x20]
	0x01C9D940 ADRP X20, 0x2586000
	0x01C9D944 LDRB W8, [X20 + 0x408]
	0x01C9D948 MOV X19, X0
	0x01C9D94C TBNZ X8, 0x0, 0x1C9D97C
	0x01C9D950 ADRP X0, 0x22B1000
	0x01C9D954 LDR X0, [X0 + 0x170]
	0x01C9D958 BL 0x1B6E7F0
	0x01C9D95C ADRP X0, 0x22B1000
	0x01C9D960 LDR X0, [X0 + 0x310]
	0x01C9D964 BL 0x1B6E7F0
	0x01C9D968 ADRP X0, 0x22B1000
	0x01C9D96C LDR X0, [X0 + 0x318]
	0x01C9D970 BL 0x1B6E7F0
	0x01C9D974 MOVZ W8, 0x1
	0x01C9D978 STRB W8, [X20 + 0x408]
	0x01C9D97C LDR X23, [X19 + 0x80]
	0x01C9D980 CBZ X23, 0x1C9DA6C
	0x01C9D984 ADRP X22, 0x22B1000
	0x01C9D988 LDR X22, [X22 + 0x170]
	0x01C9D98C ADRP X21, 0x22B1000
	0x01C9D990 LDR X20, [X23 + 0x190]
	0x01C9D994 LDR X0, [X22]
	0x01C9D998 LDR X21, [X21 + 0x318]
	0x01C9D99C BL 0x1B6EA0C
	0x01C9D9A0 LDR X2, [X21]
	0x01C9D9A4 MOV X1, X19
	0x01C9D9A8 MOV X3, X31
	0x01C9D9AC MOV X21, X0
	0x01C9D9B0 BL 0x317DB24
	0x01C9D9B4 MOV X0, X20
	0x01C9D9B8 MOV X1, X21
	0x01C9D9BC MOV X2, X31
	0x01C9D9C0 BL 0x322A750
	0x01C9D9C4 LDR X1, [X22]
	0x01C9D9C8 CBZ X0, 0x1C9D9EC
	0x01C9D9CC LDR X8, [X0]
	0x01C9D9D0 CMP X8, X1
	0x01C9D9D4 B.NE 0x1C9DA54
	0x01C9D9D8 STR X0, [X23 + 0x190]
	0x01C9D9DC LDR X8, [X0]
	0x01C9D9E0 CMP X8, X1
	0x01C9D9E4 B.EQ 0x1C9D9F0
	0x01C9D9E8 B 0x1C9DA54
	0x01C9D9EC STR X0, [X23 + 0x190]
	0x01C9D9F0 LDR X23, [X19 + 0x80]
	0x01C9D9F4 CBZ X23, 0x1C9DA6C
	0x01C9D9F8 ADRP X21, 0x22B1000
	0x01C9D9FC LDR X20, [X23 + 0x1A8]
	0x01C9DA00 LDR X21, [X21 + 0x310]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x2587000
	011 Move X20, 0x22B1000
	012 Move W8, [X21+1023]
	013 Move X20, [X20+1144]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x22B1000
	020 Move X0, [X0+1144]
	021 Call 0x1B6F7F0
	022 Move W8, 1
	023 Move [X21+1023], W8
	024 Move X0, [X20]
	025 Move X20, [X19+64]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1B6F8F8
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {108}
	038 Move X0, [X19+64]
	039 Compare X0, 0
	040 JumpIfEqual {118}
	041 Move X1, X31
	042 Call NetworkObject.get_IsValid, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {108}
	047 Move X0, [X19+160]
	048 Compare X0, 0
	049 JumpIfEqual {118}
	050 Call GrabbableItem.get_isAttached, X0
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {108}
	055 Move X0, [X19+128]
	056 Compare X0, 0
	057 JumpIfEqual {118}
	058 Call AttachedItemAnchor.get_grabbedItem, X0
	059 Move [X31+8], X0
	060 Add X0, X31, 8
	061 Move X1, X31
	062 Call NetworkBehaviourId.get_IsValid, X0
	063 Move X8, -18821120
	064 Move V8, [X8+2636]
	065 Move S1, [X19+168]
	066 Move S9, [X19+172]
	067 And W31, W0, 1
	068 Move S0, W31
	069 Move W8, 0x43C80000
	070 NotImplemented "Instruction FCSEL not yet implemented."
	071 Move S2, -5
	072 Move S3, W8
	073 Subtract S0, S0, S1
	074 Multiply S0, S0, S3
	075 Multiply S1, S9, S2
	076 Move X0, X31
	077 Add S10, S0, S1
	078 Call Time.get_deltaTime
	079 Move V11, [X19+168]
	080 Multiply S0, S0, S10
	081 Add S9, S9, S0
	082 Move X0, X31
	083 Move [X19+172], S9
	084 Call Time.get_deltaTime
	085 Multiply S0, S9, S0
	086 Move V2, [X19+168]
	087 Move X8, -18821120
	088 Move S1, -2
	089 Add S0, S11, S0
	090 Move V3, [X8+3556]
	091 NotImplemented "Instruction FMIN not yet implemented."
	092 NotImplemented "Instruction FCMP not yet implemented."
	093 NotImplemented "Instruction FCSEL not yet implemented."
	094 NotImplemented "Instruction FABD not yet implemented."
	095 NotImplemented "Instruction FCMP not yet implemented."
	096 Move X0, [X19+136]
	097 Move [X19+168], S0
	098 Compare X0, 0
	099 JumpIfEqual {118}
	100 Move X1, X31
	101 Call Renderer.get_material, X0
	102 Compare X0, 0
	103 JumpIfEqual {118}
	104 Move V0, [X19+168]
	105 Move W1, [X19+176]
	106 Move X2, X31
	107 Call Material.SetFloat, X0, X1, V0
	108 Move X20, [X31+64]
	109 Move X19, [X31+72]
	110 Move X30, [X31+48]
	111 Move X21, [X31+56]
	112 Move D9, [X31+32]
	113 Move D8, [X31+40]
	114 Move D11, [X31+16]
	115 Move D10, [X31+24]
	116 Add X31, X31, 80
	117 Return 
	118 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01C9DAAC ADRP X0, 0x22B1000
	0x01C9DAB0 LDR X0, [X0 + 0x318]
	0x01C9DAB4 BL 0x1B6E7F0
	0x01C9DAB8 ADRP X0, 0x22B1000
	0x01C9DABC LDR X0, [X0 + 0x1C0]
	0x01C9DAC0 BL 0x1B6E7F0
	0x01C9DAC4 MOVZ W8, 0x1
	0x01C9DAC8 STRB W8, [X20 + 0x409]
	0x01C9DACC LDR X0, [X21]
	0x01C9DAD0 LDR W8, [X0 + 0xE0]
	0x01C9DAD4 CBNZ W8, 0x1C9DADC
	0x01C9DAD8 BL 0x1B6E8F8
	0x01C9DADC CBZ X19, 0x1C9DBDC
	0x01C9DAE0 LDR W8, [X19 + 0x30]
	0x01C9DAE4 LDR X23, [X19 + 0x80]
	0x01C9DAE8 ORR W8, W8, 0x8
	0x01C9DAEC STR W8, [X19 + 0x30]
	0x01C9DAF0 CBZ X23, 0x1C9DBDC
	0x01C9DAF4 ADRP X22, 0x22B1000
	0x01C9DAF8 LDR X22, [X22 + 0x170]
	0x01C9DAFC ADRP X21, 0x22B1000
	0x01C9DB00 LDR X20, [X23 + 0x190]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2587000
	006 Move X21, 0x22B2000
	007 Move W8, [X20+1024]
	008 Move X21, [X21+656]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22B2000
	015 Move X0, [X0+656]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1024], W8
	019 Move X0, [X21]
	020 Move X1, X31
	021 Call Shader.PropertyToID, X0
	022 Move [X19+176], W0
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X1, X31
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call NetworkBehaviour..ctor, X0
	030 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01C9DB04 LDR X0, [X22]

ISIL:
	001 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01C9DB08 LDR X21, [X21 + 0x318]

ISIL:
	001 Return 

