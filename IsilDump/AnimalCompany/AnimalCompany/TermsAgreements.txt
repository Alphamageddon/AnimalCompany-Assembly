Type: AnimalCompany.TermsAgreements

Method: System.Void Awake()

Disassembly:
	0x01E04998 ADD X1, X1, 0xE58
	0x01E0499C MOV X2, X31
	0x01E049A0 BL 0x3EB1B00
	0x01E049A4 B 0x1E04A8C
	0x01E049A8 MOV X19, X0
	0x01E049AC BL 0x3EB1AE0
	0x01E049B0 B 0x1E04A94
	0x01E049B4 B 0x1E049C4
	0x01E049B8 B 0x1E049C4
	0x01E049BC B 0x1E049C4
	0x01E049C0 B 0x1E049C4
	0x01E049C4 MOV X19, X0
	0x01E049C8 CMP W1, 0x1
	0x01E049CC B.NE 0x1E04A94
	0x01E049D0 MOV X0, X19
	0x01E049D4 BL 0x3EB1AD0
	0x01E049D8 MOV X19, X0
	0x01E049DC ADRP X0, 0x22EF000
	0x01E049E0 LDR X0, [X0 + 0x7D0]
	0x01E049E4 BL 0x1C16D08
	0x01E049E8 LDR X8, [X19]
	0x01E049EC LDR X1, [X8]
	0x01E049F0 BL 0x1C17270
	0x01E049F4 TBZ X0, 0x0, 0x1E04A6C
	0x01E049F8 LDR X19, [X19]
	0x01E049FC BL 0x3EB1AE0
	0x01E04A00 ADRP X0, 0x22EF000
	0x01E04A04 LDR X0, [X0 + 0x788]
	0x01E04A08 BL 0x1C16D08
	0x01E04A0C LDR W8, [X0 + 0xE0]
	0x01E04A10 CBNZ W8, 0x1E04A18
	0x01E04A14 BL 0x1C16DFC
	0x01E04A18 ADRP X0, 0x22F5000
	0x01E04A1C LDR X0, [X0 + 0x8D0]
	0x01E04A20 BL 0x1C16D08
	0x01E04A24 MOV X20, X0
	0x01E04A28 ADRP X0, 0x22F5000
	0x01E04A2C LDR X0, [X0 + 0x8D8]
	0x01E04A30 BL 0x1C16D08
	0x01E04A34 MOV X21, X0
	0x01E04A38 ADRP X0, 0x22F5000
	0x01E04A3C LDR X0, [X0 + 0x8E0]
	0x01E04A40 BL 0x1C16D08
	0x01E04A44 MOV X4, X0
	0x01E04A48 MOVZ W5, 0xAA
	0x01E04A4C MOV X0, X20
	0x01E04A50 MOV X1, X19
	0x01E04A54 MOV X2, X31
	0x01E04A58 MOV X3, X21
	0x01E04A5C MOV X6, X31
	0x01E04A60 BL 0x35C23E0
	0x01E04A64 MOV W0, W31
	0x01E04A68 B 0x1E04824
	0x01E04A6C MOVZ W0, 0x8
	0x01E04A70 BL 0x3EB1AF0
	0x01E04A74 LDR X8, [X19]
	0x01E04A78 STR X8, [X0]
	0x01E04A7C ADRP X1, 0x20B0000
	0x01E04A80 ADD X1, X1, 0xE58
	0x01E04A84 MOV X2, X31
	0x01E04A88 BL 0x3EB1B00
	0x01E04A8C MOV X19, X0
	0x01E04A90 BL 0x3EB1AE0
	0x01E04A94 MOV X0, X19
	0x01E04A98 BL 0x1D2C690
	0x01E04A9C BL 0x1990590
	0x01E04AA0 LDR X0, [X0 + 0x18]
	0x01E04AA4 RET
	0x01E04AA8 STP X30, X19, [X31 - 0x10]!
	0x01E04AAC ADRP X0, 0x22EF000
	0x01E04AB0 LDR X0, [X0 + 0xB40]
	0x01E04AB4 BL 0x1C16D08
	0x01E04AB8 BL 0x1C16F10
	0x01E04ABC MOV X1, X31
	0x01E04AC0 MOV X19, X0
	0x01E04AC4 BL 0x3380310
	0x01E04AC8 ADRP X0, 0x22F5000
	0x01E04ACC LDR X0, [X0 + 0x8E8]
	0x01E04AD0 BL 0x1C16D08
	0x01E04AD4 MOV X1, X0
	0x01E04AD8 MOV X0, X19
	0x01E04ADC BL 0x1C16DEC
	0x01E04AE0 LDR X0, [X0 + 0x18]
	0x01E04AE4 RET
	0x01E04AE8 SUB X31, X31, 0x60
	0x01E04AEC STP D9, D8, [X31 + 0x20]
	0x01E04AF0 STR X30, [X31 + 0x30]
	0x01E04AF4 STP X22, X21, [X31 + 0x40]
	0x01E04AF8 STP X20, X19, [X31 + 0x50]
	0x01E04AFC ADRP X20, 0x25D4000
	0x01E04B00 LDRB W8, [X20 + 0xD8F]
	0x01E04B04 MOV X19, X0
	0x01E04B08 TBNZ X8, 0x0, 0x1E04B2C
	0x01E04B0C ADRP X0, 0x22F0000
	0x01E04B10 LDR X0, [X0 + 0xE38]
	0x01E04B14 BL 0x1C16CF4
	0x01E04B18 ADRP X0, 0x22EF000
	0x01E04B1C LDR X0, [X0 + 0x598]
	0x01E04B20 BL 0x1C16CF4
	0x01E04B24 MOVZ W8, 0x1

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X20, 0x25D5000
	007 Move W8, [X20+3464]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x22F6000
	014 Move X0, [X0+2104]
	015 Call 0x1C17CF4
	016 Move X0, 0x22F6000
	017 Move X0, [X0+2112]
	018 Call 0x1C17CF4
	019 Move X0, 0x22F6000
	020 Move X0, [X0+2120]
	021 Call 0x1C17CF4
	022 Move X0, 0x22F6000
	023 Move X0, [X0+2128]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3464], W8
	027 Move [X31+32], X31
	028 Move [X31+40], X31
	029 Move [X31+48], X31
	030 Move X0, [X19+32]
	031 Compare X0, 0
	032 JumpIfEqual {88}
	033 Move X8, 0x22F6000
	034 Move X8, [X8+2128]
	035 Move X20, 0x22F6000
	036 Move X21, 0x22F6000
	037 Move X1, [X8]
	038 Move X20, [X20+2112]
	039 Move X21, [X21+2104]
	040 Add X8, X31, 8
	041 Call List`1<Object>.GetEnumerator, X0
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 Move X8, [X31+24]
	044 Move [X31+2], V0
	045 Move [X31+48], X8
	046 Move X1, [X20]
	047 Add X0, X31, 32
	048 Call Enumerator<Object>.MoveNext, X0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {66}
	053 Move X8, [X31+48]
	054 Compare X8, 0
	055 JumpIfEqual {86}
	056 Move X0, [X8+32]
	057 Compare X0, 0
	058 JumpIfEqual {87}
	059 Move X1, X31
	060 Call Component.get_gameObject, X0
	061 Compare X0, 0
	062 JumpIfEqual {85}
	063 Move W1, W31
	064 Move X2, X31
	065 Call GameObject.SetActive, X0, X1
	066 Move X1, [X21]
	067 Add X0, X31, 32
	068 Call Enumerator<Object>.Dispose, X0
	069 Move X0, [X19+40]
	070 Compare X0, 0
	071 JumpIfEqual {88}
	072 Move X1, X31
	073 Call Component.get_gameObject, X0
	074 Compare X0, 0
	075 JumpIfEqual {88}
	076 Move W1, W31
	077 Move X2, X31
	078 Call GameObject.SetActive, X0, X1
	079 Move X20, [X31+80]
	080 Move X19, [X31+88]
	081 Move X30, [X31+64]
	082 Move X21, [X31+72]
	083 Add X31, X31, 96
	084 Return 
	085 Call 0x1C17F20
	086 Call 0x1C17F20
	087 Call 0x1C17F20
	088 Call 0x1C17F20
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Call 0x3EB2AD0
	091 Move X20, [X0]
	092 Call 0x3EB2AE0
	093 Move X1, [X21]
	094 Add X0, X31, 32
	095 Call Enumerator<Object>.Dispose, X0
	096 Compare X20, 0
	097 JumpIfEqual {69}
	098 Move X0, X20
	099 Call 0x1C17F18
	100 Move X19, X0
	101 Move X20, X31
	102 Move X19, X0
	103 Move X1, [X21]
	104 Add X0, X31, 32
	105 Call Enumerator<Object>.Dispose, X0
	106 Compare X20, 0
	107 JumpIfNotEqual {110}
	108 Move X0, X19
	109 Call 0x1D2D690
	110 Move X0, X20
	111 Call 0x1C17F18
	112 Call 0x1991590

Method: System.Void Update()

Disassembly:
	0x01E04B28 STRB W8, [X20 + 0xD8F]
	0x01E04B2C LDR X0, [X19 + 0x20]
	0x01E04B30 CBZ X0, 0x1E04C54
	0x01E04B34 ADRP X20, 0x22EF000
	0x01E04B38 ADRP X21, 0x22F0000
	0x01E04B3C LDR X20, [X20 + 0x598]
	0x01E04B40 LDR X21, [X21 + 0xE38]
	0x01E04B44 MOV X1, X31
	0x01E04B48 BL 0x3C16D04
	0x01E04B4C LDR X8, [X20]
	0x01E04B50 MOV X20, X0
	0x01E04B54 LDR W9, [X8 + 0xE0]
	0x01E04B58 CBNZ W9, 0x1E04B64
	0x01E04B5C MOV X0, X8
	0x01E04B60 BL 0x1C16DFC
	0x01E04B64 LDR X1, [X21]
	0x01E04B68 MOV X0, X20
	0x01E04B6C BL 0x222D35C
	0x01E04B70 ADRP X21, 0x25D4000
	0x01E04B74 LDRB W8, [X21 + 0x783]
	0x01E04B78 MOV X20, X0
	0x01E04B7C CBNZ W8, 0x1E04B94
	0x01E04B80 ADRP X0, 0x22EF000
	0x01E04B84 LDR X0, [X0 + 0x5A0]
	0x01E04B88 BL 0x1C16CF4
	0x01E04B8C MOVZ W8, 0x1
	0x01E04B90 STRB W8, [X21 + 0x783]
	0x01E04B94 ADRP X21, 0x22EF000
	0x01E04B98 LDR X21, [X21 + 0x5A0]
	0x01E04B9C ADRP X22, 0x25D4000
	0x01E04BA0 LDRB W9, [X22 + 0x85B]
	0x01E04BA4 LDR X8, [X21]
	0x01E04BA8 LDR X8, [X8 + 0xB8]
	0x01E04BAC LDR V9, [X8]
	0x01E04BB0 LDR V8, [X8 + 0x8]
	0x01E04BB4 CBNZ W9, 0x1E04BD0
	0x01E04BB8 MOV X0, X21
	0x01E04BBC BL 0x1C16CF4
	0x01E04BC0 LDR X8, [X21]
	0x01E04BC4 MOVZ W9, 0x1
	0x01E04BC8 STRB W9, [X22 + 0x85B]
	0x01E04BCC LDR X8, [X8 + 0xB8]
	0x01E04BD0 CBZ X20, 0x1E04C54
	0x01E04BD4 ADRP X9, 0xFFFFFFFFFECE6000
	0x01E04BD8 LDR V0, [X8 + 0x14]
	0x01E04BDC LDUR V2, [X8 + 0xC]
	0x01E04BE0 LDR V3, [X9 + 0x18C]
	0x01E04BE4 MOVZ W8, 0x4000
	0x01E04BE8 MOVK W8, 0x461C0000
	0x01E04BEC UNIMPLEMENTED
	0x01E04BF0 FMOV S1, 0.5
	0x00000000 INVALID
	0x01E04BF8 MOVI V4.2S, 0x3F, 0x18
	0x01E04BFC FMUL S0, S0, S3
	0x00000000 INVALID
	0x01E04C04 FMUL S0, S0, S1
	0x01E04C08 ADD X1, X31, 0x8
	0x01E04C0C MOV X0, X20
	0x01E04C10 MOV X2, X31
	0x01E04C14 STR D9, [X31 + 0x8]
	0x01E04C18 STR S8, [X31 + 0x10]
	0x01E04C1C STUR D2, [X31 + 0x14]
	0x01E04C20 STR S0, [X31 + 0x1C]
	0x01E04C24 BL 0x3C17814
	0x01E04C28 LDR X0, [X19 + 0x20]
	0x01E04C2C CBZ X0, 0x1E04C54
	0x01E04C30 MOV X1, X20
	0x01E04C34 MOV X2, X31
	0x01E04C38 BL 0x3C16D40
	0x01E04C3C LDP X20, X19, [X31 + 0x50]
	0x01E04C40 LDP X22, X21, [X31 + 0x40]
	0x01E04C44 LDR X30, [X31 + 0x30]
	0x01E04C48 LDP D9, D8, [X31 + 0x20]
	0x01E04C4C ADD X31, X31, 0x60
	0x01E04C50 RET
	0x01E04C54 BL 0x1C16F20
	0x01E04C58 MOV X1, X31
	0x01E04C5C B 0x3C36C30
	0x01E04C60 STP X30, X21, [X31 - 0x20]!
	0x01E04C64 STP X20, X19, [X31 + 0x10]
	0x01E04C68 ADRP X20, 0x25D4000
	0x01E04C6C ADRP X21, 0x22F5000
	0x01E04C70 LDRB W8, [X20 + 0xD90]
	0x01E04C74 LDR X21, [X21 + 0x8F0]
	0x01E04C78 MOV X19, X0
	0x01E04C7C TBNZ X8, 0x0, 0x1E04C94
	0x01E04C80 ADRP X0, 0x22F5000
	0x01E04C84 LDR X0, [X0 + 0x8F0]
	0x01E04C88 BL 0x1C16CF4
	0x01E04C8C MOVZ W8, 0x1
	0x01E04C90 STRB W8, [X20 + 0xD90]
	0x01E04C94 LDR X8, [X21]
	0x01E04C98 MOV X0, X19
	0x01E04C9C MOV X1, X31
	0x01E04CA0 STR X8, [X19 + 0x20]
	0x01E04CA4 LDP X20, X19, [X31 + 0x10]
	0x01E04CA8 LDP X30, X21, [X31], #0x20
	0x01E04CAC B 0x3C36C30
	0x01E04CB0 STP X30, X23, [X31 - 0x30]!
	0x01E04CB4 STP X22, X21, [X31 + 0x10]
	0x01E04CB8 STP X20, X19, [X31 + 0x20]
	0x01E04CBC ADRP X21, 0x25D4000
	0x01E04CC0 ADRP X20, 0x22F5000
	0x01E04CC4 LDRB W8, [X21 + 0xD91]
	0x01E04CC8 LDR X20, [X20 + 0x8F8]
	0x01E04CCC MOV X19, X0
	0x01E04CD0 TBNZ X8, 0x0, 0x1E04D0C
	0x01E04CD4 ADRP X0, 0x22F2000
	0x01E04CD8 LDR X0, [X0 + 0xA30]
	0x01E04CDC BL 0x1C16CF4
	0x01E04CE0 ADRP X0, 0x22F2000
	0x01E04CE4 LDR X0, [X0 + 0xD28]
	0x01E04CE8 BL 0x1C16CF4
	0x01E04CEC ADRP X0, 0x22F5000
	0x01E04CF0 LDR X0, [X0 + 0x900]
	0x01E04CF4 BL 0x1C16CF4
	0x01E04CF8 ADRP X0, 0x22F5000
	0x01E04CFC LDR X0, [X0 + 0x8F8]
	0x01E04D00 BL 0x1C16CF4
	0x01E04D04 MOVZ W8, 0x1
	0x01E04D08 STRB W8, [X21 + 0xD91]
	0x01E04D0C LDR X8, [X20]
	0x01E04D10 ADRP X20, 0x25D4000
	0x01E04D14 ADRP X22, 0x22F2000
	0x01E04D18 LDR X8, [X8 + 0xB8]
	0x01E04D1C STR X19, [X8]
	0x01E04D20 LDRB W8, [X20 + 0xABF]
	0x01E04D24 LDR X22, [X22 + 0xD28]
	0x01E04D28 CBNZ W8, 0x1E04D40
	0x01E04D2C ADRP X0, 0x22F2000
	0x01E04D30 LDR X0, [X0 + 0xD28]
	0x01E04D34 BL 0x1C16CF4
	0x01E04D38 MOVZ W8, 0x1
	0x01E04D3C STRB W8, [X20 + 0xABF]
	0x01E04D40 LDR X8, [X22]
	0x01E04D44 LDR X8, [X8 + 0xB8]
	0x01E04D48 LDR X0, [X8 + 0x38]
	0x01E04D4C CBZ X0, 0x1E04D58
	0x01E04D50 MOV X1, X31
	0x01E04D54 BL 0x1DBAC58
	0x01E04D58 CBZ X19, 0x1E04E08
	0x01E04D5C STR X0, [X19 + 0x48]
	0x01E04D60 LDR X8, [X22]
	0x01E04D64 ADRP X23, 0x22F2000
	0x01E04D68 ADRP X21, 0x22F5000
	0x01E04D6C LDR X8, [X8 + 0xB8]
	0x01E04D70 LDR X23, [X23 + 0xA30]
	0x01E04D74 LDR X20, [X8 + 0x10]
	0x01E04D78 LDR X0, [X23]
	0x01E04D7C LDR X21, [X21 + 0x900]
	0x01E04D80 BL 0x1C16F10
	0x01E04D84 LDR X2, [X21]
	0x01E04D88 MOV X1, X19
	0x01E04D8C MOV X3, X31
	0x01E04D90 MOV X21, X0
	0x01E04D94 BL 0x2A6B948
	0x01E04D98 MOV X0, X20
	0x01E04D9C MOV X1, X21
	0x01E04DA0 MOV X2, X31
	0x01E04DA4 BL 0x33C0DE4
	0x01E04DA8 CBZ X0, 0x1E04DEC
	0x01E04DAC LDR X20, [X23]
	0x01E04DB0 MOV X19, X0
	0x01E04DB4 MOV X1, X20
	0x01E04DB8 BL 0x1C16E00
	0x01E04DBC CBZ X0, 0x1E04DE0
	0x01E04DC0 LDR X8, [X22]
	0x01E04DC4 LDR X8, [X8 + 0xB8]
	0x01E04DC8 STR X0, [X8 + 0x10]
	0x01E04DCC LDR X20, [X23]
	0x01E04DD0 MOV X0, X19
	0x01E04DD4 MOV X1, X20
	0x01E04DD8 BL 0x1C16E00
	0x01E04DDC CBNZ X0, 0x1E04DF8
	0x01E04DE0 MOV X0, X19
	0x01E04DE4 MOV X1, X20
	0x01E04DE8 BL 0x1C171E0
	0x01E04DEC LDR X8, [X22]
	0x01E04DF0 LDR X8, [X8 + 0xB8]
	0x01E04DF4 STR X31, [X8 + 0x10]
	0x01E04DF8 LDP X20, X19, [X31 + 0x20]
	0x01E04DFC LDP X22, X21, [X31 + 0x10]
	0x01E04E00 LDP X30, X23, [X31], #0x30
	0x01E04E04 RET
	0x01E04E08 BL 0x1C16F20
	0x01E04E0C STP X30, X23, [X31 - 0x30]!
	0x01E04E10 STP X22, X21, [X31 + 0x10]
	0x01E04E14 STP X20, X19, [X31 + 0x20]
	0x01E04E18 ADRP X20, 0x25D4000
	0x01E04E1C ADRP X21, 0x22F2000
	0x01E04E20 LDRB W8, [X20 + 0xD92]
	0x01E04E24 LDR X21, [X21 + 0xA78]
	0x01E04E28 MOV X19, X0
	0x01E04E2C TBNZ X8, 0x0, 0x1E04E68
	0x01E04E30 ADRP X0, 0x22F2000
	0x01E04E34 LDR X0, [X0 + 0xA30]
	0x01E04E38 BL 0x1C16CF4
	0x01E04E3C ADRP X0, 0x22F2000
	0x01E04E40 LDR X0, [X0 + 0xA78]
	0x01E04E44 BL 0x1C16CF4
	0x01E04E48 ADRP X0, 0x22F2000
	0x01E04E4C LDR X0, [X0 + 0xD28]
	0x01E04E50 BL 0x1C16CF4
	0x01E04E54 ADRP X0, 0x22F5000
	0x01E04E58 LDR X0, [X0 + 0x900]
	0x01E04E5C BL 0x1C16CF4
	0x01E04E60 MOVZ W8, 0x1
	0x01E04E64 STRB W8, [X20 + 0xD92]
	0x01E04E68 LDR X0, [X21]
	0x01E04E6C LDR W8, [X0 + 0xE0]
	0x01E04E70 CBNZ W8, 0x1E04E78
	0x01E04E74 BL 0x1C16DFC
	0x01E04E78 CBZ X19, 0x1E04F38
	0x01E04E7C LDR W8, [X19 + 0x30]
	0x01E04E80 ADRP X22, 0x22F2000

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X19, X0
	017 Move X0, X31
	018 Call Camera.get_main
	019 Compare X0, 0
	020 JumpIfEqual {253}
	021 Move X1, X31
	022 Call Component.get_transform, X0
	023 Compare X0, 0
	024 JumpIfEqual {253}
	025 Move X1, X31
	026 Call Transform.get_forward, X0
	027 Move X0, X31
	028 Call Extensions.Flatten, X0
	029 Move X22, 0x25D5000
	030 Move W8, [X22+1925]
	031 Move V8, V0
	032 Move V9, V1
	033 Move V10, V2
	034 Compare W8, 0
	035 JumpIfNotEqual {41}
	036 Move X0, 0x22F0000
	037 Move X0, [X0+1448]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X22+1925], W8
	041 Move X20, 0x22F0000
	042 Move X20, [X20+1448]
	043 Move X0, [X20]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X8, -20025344
	049 Multiply S0, S8, S8
	050 Multiply S1, S9, S9
	051 Move V14, [X8+380]
	052 Move X21, 0x22F0000
	053 Add S0, S0, S1
	054 Multiply S1, S10, S10
	055 Move X21, [X21+1440]
	056 Add S0, S1, S0
	057 NotImplemented "Instruction FSQRT not yet implemented."
	058 NotImplemented "Instruction FCMP not yet implemented."
	059 NotImplemented "Instruction FDIV not yet implemented."
	060 NotImplemented "Instruction FDIV not yet implemented."
	061 NotImplemented "Instruction FDIV not yet implemented."
	062 Move X23, 0x25D5000
	063 Move W8, [X23+1923]
	064 Compare W8, 0
	065 JumpIfNotEqual {71}
	066 Move X0, 0x22F0000
	067 Move X0, [X0+1440]
	068 Call 0x1C17CF4
	069 Move W8, 1
	070 Move [X23+1923], W8
	071 Move X8, [X21]
	072 Move X8, [X8+184]
	073 Move S8, [X8]
	074 Move S9, [X8+4]
	075 Move V10, [X8+8]
	076 Move X0, X19
	077 Move X1, X31
	078 Call Component.get_transform, X0
	079 Compare X0, 0
	080 JumpIfEqual {253}
	081 Move X1, X31
	082 Call Transform.get_position, X0
	083 Move X0, X31
	084 Move V11, V0
	085 Move V12, V1
	086 Move V13, V2
	087 Call Camera.get_main
	088 Compare X0, 0
	089 JumpIfEqual {253}
	090 Move X1, X31
	091 Move [X31+8], S14
	092 Move [X31+16], S10
	093 Move V10, V9
	094 Move V9, V8
	095 Call Component.get_transform, X0
	096 Compare X0, 0
	097 JumpIfEqual {253}
	098 Move X1, X31
	099 Call Transform.get_position, X0
	100 Move W8, [X22+1925]
	101 Move V14, V0
	102 Move V15, V1
	103 Move V8, V2
	104 Compare W8, 0
	105 JumpIfNotEqual {111}
	106 Move X0, 0x22F0000
	107 Move X0, [X0+1448]
	108 Call 0x1C17CF4
	109 Move W8, 1
	110 Move [X22+1925], W8
	111 Move X0, [X20]
	112 Subtract S14, S11, S14
	113 Subtract S12, S12, S15
	114 Subtract S11, S13, S8
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {119}
	118 Call 0x1C17DFC
	119 Multiply S0, S14, S14
	120 Multiply S1, S12, S12
	121 Add S0, S0, S1
	122 Multiply S1, S11, S11
	123 Add S0, S1, S0
	124 NotImplemented "Instruction FSQRT not yet implemented."
	125 Move V0, [X31+8]
	126 NotImplemented "Instruction FCMP not yet implemented."
	127 NotImplemented "Instruction FDIV not yet implemented."
	128 NotImplemented "Instruction FDIV not yet implemented."
	129 NotImplemented "Instruction FDIV not yet implemented."
	130 Move X22, 0x25D5000
	131 Move W8, [X22+1923]
	132 Compare W8, 0
	133 JumpIfNotEqual {139}
	134 Move X0, 0x22F0000
	135 Move X0, [X0+1440]
	136 Call 0x1C17CF4
	137 Move W8, 1
	138 Move [X22+1923], W8
	139 Move X8, [X21]
	140 Move X8, [X8+184]
	141 Move S1, [X8]
	142 Move S2, [X8+4]
	143 Move V0, [X8+8]
	144 Move V11, V9
	145 Move V9, V10
	146 Move V10, [X31+12]
	147 Move X8, -20025344
	148 Move V3, [X8+860]
	149 Multiply S1, S11, S1
	150 Multiply S2, S9, S2
	151 Add S1, S1, S2
	152 Multiply S0, S10, S0
	153 Add S0, S0, S1
	154 NotImplemented "Instruction FCMP not yet implemented."
	155 Move X22, 0x25D5000
	156 Move W8, [X22+1924]
	157 Compare W8, 0
	158 JumpIfNotEqual {164}
	159 Move X0, 0x22F0000
	160 Move X0, [X0+1448]
	161 Call 0x1C17CF4
	162 Move W8, 1
	163 Move [X22+1924], W8
	164 Move X0, [X20]
	165 Move W8, [X0+224]
	166 Compare W8, 0
	167 JumpIfNotEqual {169}
	168 Call 0x1C17DFC
	169 Move S0, 2
	170 NotImplemented "Instruction FCMP not yet implemented."
	171 Move X0, X19
	172 Move X1, X31
	173 Call Component.get_transform, X0
	174 Move X20, X0
	175 Move X0, X31
	176 Call Camera.get_main
	177 Compare X0, 0
	178 JumpIfEqual {253}
	179 Move X1, X31
	180 Call Component.get_transform, X0
	181 Compare X0, 0
	182 JumpIfEqual {253}
	183 Move X1, X31
	184 Call Transform.get_position, X0
	185 Compare X20, 0
	186 JumpIfEqual {253}
	187 Add S2, S10, S2
	188 Add S1, S9, S1
	189 Add S0, S11, S0
	190 Move X0, X20
	191 Move X1, X31
	192 Call Transform.set_position, X0, X1
	193 Move X0, X19
	194 Move X1, X31
	195 Call Component.get_transform, X0
	196 Move X20, 0x25D5000
	197 Move W8, [X20+1926]
	198 Move X19, X0
	199 Compare W8, 0
	200 JumpIfNotEqual {206}
	201 Move X0, 0x22F0000
	202 Move X0, [X0+1440]
	203 Call 0x1C17CF4
	204 Move W8, 1
	205 Move [X20+1926], W8
	206 Move X8, [X21]
	207 Move V0, V11
	208 Move V1, V9
	209 Move V2, V10
	210 Move X8, [X8+184]
	211 Move X0, X31
	212 Move S3, [X8+24]
	213 Move S4, [X8+28]
	214 Move V5, [X8+32]
	215 Call Quaternion.LookRotation, X0, X1
	216 Compare X19, 0
	217 JumpIfEqual {253}
	218 Move X0, X19
	219 Move X20, [X31+112]
	220 Move X19, [X31+120]
	221 Move X22, [X31+96]
	222 Move X21, [X31+104]
	223 Move X30, [X31+80]
	224 Move X23, [X31+88]
	225 Move D9, [X31+64]
	226 Move D8, [X31+72]
	227 Move D11, [X31+48]
	228 Move D10, [X31+56]
	229 Move D13, [X31+32]
	230 Move D12, [X31+40]
	231 Move D15, [X31+16]
	232 Move D14, [X31+24]
	233 Move X1, X31
	234 Add X31, X31, 128
	235 Call Transform.set_rotation, X0, X1
	236 Return 
	237 Move X20, [X31+112]
	238 Move X19, [X31+120]
	239 Move X22, [X31+96]
	240 Move X21, [X31+104]
	241 Move X30, [X31+80]
	242 Move X23, [X31+88]
	243 Move D9, [X31+64]
	244 Move D8, [X31+72]
	245 Move D11, [X31+48]
	246 Move D10, [X31+56]
	247 Move D13, [X31+32]
	248 Move D12, [X31+40]
	249 Move D15, [X31+16]
	250 Move D14, [X31+24]
	251 Add X31, X31, 128
	252 Return 
	253 Call 0x1C17F20

Method: SpatialSys.CommandLib.Command AgreeToAllTerms(System.String[] termsAcceptanceNeeded)

Disassembly:
	0x01E04E84 LDR X22, [X22 + 0xD28]
	0x01E04E88 ADRP X23, 0x22F2000
	0x01E04E8C ORR W8, W8, 0x8
	0x01E04E90 STR W8, [X19 + 0x30]
	0x01E04E94 LDR X8, [X22]
	0x01E04E98 ADRP X21, 0x22F5000
	0x01E04E9C LDR X8, [X8 + 0xB8]
	0x01E04EA0 LDR X23, [X23 + 0xA30]
	0x01E04EA4 LDR X20, [X8 + 0x10]
	0x01E04EA8 LDR X0, [X23]
	0x01E04EAC LDR X21, [X21 + 0x900]
	0x01E04EB0 BL 0x1C16F10
	0x01E04EB4 LDR X2, [X21]
	0x01E04EB8 MOV X1, X19
	0x01E04EBC MOV X3, X31
	0x01E04EC0 MOV X21, X0
	0x01E04EC4 BL 0x2A6B948
	0x01E04EC8 MOV X0, X20
	0x01E04ECC MOV X1, X21
	0x01E04ED0 MOV X2, X31
	0x01E04ED4 BL 0x33C0FDC
	0x01E04ED8 CBZ X0, 0x1E04F1C
	0x01E04EDC LDR X20, [X23]
	0x01E04EE0 MOV X19, X0
	0x01E04EE4 MOV X1, X20
	0x01E04EE8 BL 0x1C16E00
	0x01E04EEC CBZ X0, 0x1E04F10
	0x01E04EF0 LDR X8, [X22]
	0x01E04EF4 LDR X8, [X8 + 0xB8]
	0x01E04EF8 STR X0, [X8 + 0x10]
	0x01E04EFC LDR X20, [X23]
	0x01E04F00 MOV X0, X19
	0x01E04F04 MOV X1, X20
	0x01E04F08 BL 0x1C16E00
	0x01E04F0C CBNZ X0, 0x1E04F28
	0x01E04F10 MOV X0, X19
	0x01E04F14 MOV X1, X20
	0x01E04F18 BL 0x1C171E0
	0x01E04F1C LDR X8, [X22]
	0x01E04F20 LDR X8, [X8 + 0xB8]
	0x01E04F24 STR X31, [X8 + 0x10]
	0x01E04F28 LDP X20, X19, [X31 + 0x20]
	0x01E04F2C LDP X22, X21, [X31 + 0x10]
	0x01E04F30 LDP X30, X23, [X31], #0x30
	0x01E04F34 RET
	0x01E04F38 BL 0x1C16F20
	0x01E04F3C STR X1, [X0 + 0x48]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25D5000
	007 Move X22, 0x22F6000
	008 Move W8, [X21+3465]
	009 Move X22, [X22+2136]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x22F0000
	017 Move X0, [X0+2392]
	018 Call 0x1C17CF4
	019 Move X0, 0x22F6000
	020 Move X0, [X0+2144]
	021 Call 0x1C17CF4
	022 Move X0, 0x22F6000
	023 Move X0, [X0+2136]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3465], W8
	027 Move X0, [X22]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X21, X0
	031 Call Object..ctor, X0
	032 Compare X21, 0
	033 JumpIfEqual {57}
	034 Move X8, 0x22F0000
	035 Move X8, [X8+2392]
	036 Move [X21+16], X20
	037 Move [X21+24], X19
	038 Move X19, 0x22F6000
	039 Move X0, [X8]
	040 Move X19, [X19+2144]
	041 Call 0x1C17F10
	042 Move X2, [X19]
	043 Move X1, X21
	044 Move X3, X31
	045 Move X19, X0
	046 Call CoroutineGenerator..ctor, X0, X1, X2
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move W1, W31
	053 Move X2, X31
	054 Move X30, [X31+48]
	055 Call Commands.Coroutine, X0, X1
	056 Return X0
	057 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerator`1<SpatialSys.CommandLib.Command> AgreeToAllTermsNeeded(System.String[] termsAcceptanceNeeded)

Disassembly:
	0x01E04F48 STP D13, D12, [X31 + 0x8]
	0x01E04F4C STP D11, D10, [X31 + 0x18]
	0x01E04F50 STP D9, D8, [X31 + 0x28]
	0x01E04F54 STR X30, [X31 + 0x38]
	0x01E04F58 STP X20, X19, [X31 + 0x40]
	0x01E04F5C ADRP X20, 0x25D4000
	0x01E04F60 LDRB W8, [X20 + 0xABF]
	0x01E04F64 MOV V8.16B, V6.16B
	0x01E04F68 MOV V9.16B, V5.16B
	0x01E04F6C MOV V10.16B, V4.16B
	0x01E04F70 MOV V11.16B, V3.16B
	0x01E04F74 MOV V12.16B, V2.16B
	0x01E04F78 MOV V13.16B, V1.16B
	0x01E04F7C MOV V14.16B, V0.16B
	0x01E04F80 MOV W19, W0
	0x01E04F84 CBNZ W8, 0x1E04F9C
	0x01E04F88 ADRP X0, 0x22F2000
	0x01E04F8C LDR X0, [X0 + 0xD28]
	0x01E04F90 BL 0x1C16CF4
	0x01E04F94 MOVZ W8, 0x1
	0x01E04F98 STRB W8, [X20 + 0xABF]
	0x01E04F9C ADRP X8, 0x22F2000
	0x01E04FA0 LDR X8, [X8 + 0xD28]
	0x01E04FA4 LDR X8, [X8]
	0x01E04FA8 LDR X8, [X8 + 0xB8]
	0x01E04FAC LDR X0, [X8 + 0x38]
	0x01E04FB0 CBZ X0, 0x1E04FF8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25D5000
	007 Move X22, 0x22F6000
	008 Move W8, [X21+3466]
	009 Move X22, [X22+2152]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x22F6000
	017 Move X0, [X0+2152]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3466], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X21, X0
	025 Call Object..ctor, X0
	026 Move [X21+16], W31
	027 Move [X21+32], X20
	028 Move [X21+40], X19
	029 Move X0, X21
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return X0

Method: System.Collections.Generic.IEnumerator`1<SpatialSys.CommandLib.Command> AgreeToTerms(AnimalCompany.TermsGroup termsGroup)

Disassembly:
	0x01E04FDC LDR X30, [X31 + 0x38]
	0x01E04FE0 LDP D9, D8, [X31 + 0x28]
	0x01E04FE4 LDP D11, D10, [X31 + 0x18]
	0x01E04FE8 LDP D13, D12, [X31 + 0x8]
	0x01E04FEC MOV V0.16B, V14.16B
	0x01E04FF0 LDR V14, [X31], #0x50
	0x01E04FF4 B 0x1E04FFC
	0x01E04FF8 BL 0x1C16F20
	0x01E04FFC STR D14, [X31 - 0x60]!
	0x01E05000 STP D13, D12, [X31 + 0x8]
	0x01E05004 STP D11, D10, [X31 + 0x18]
	0x01E05008 STP D9, D8, [X31 + 0x28]
	0x01E0500C STR X30, [X31 + 0x38]
	0x01E05010 STP X22, X21, [X31 + 0x40]
	0x01E05014 STP X20, X19, [X31 + 0x50]
	0x01E05018 ADRP X22, 0x25D3000
	0x01E0501C ADRP X21, 0x22F1000
	0x01E05020 LDRB W8, [X22 + 0xD93]
	0x01E05024 LDR X21, [X21 + 0xA78]
	0x01E05028 MOV V8.16B, V6.16B
	0x01E0502C MOV V9.16B, V5.16B
	0x01E05030 MOV V10.16B, V4.16B
	0x01E05034 MOV V11.16B, V3.16B
	0x01E05038 MOV V12.16B, V2.16B
	0x01E0503C MOV V13.16B, V1.16B
	0x01E05040 MOV V14.16B, V0.16B
	0x01E05044 MOV W19, W1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25D5000
	007 Move X22, 0x22F6000
	008 Move W8, [X21+3467]
	009 Move X22, [X22+2160]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x22F5000
	017 Move X0, [X0+2160]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3467], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X21, X0
	025 Call Object..ctor, X0
	026 Move [X21+16], W31
	027 Move [X21+32], X19
	028 Move [X21+40], X20
	029 Move X0, X21
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return X0

Method: System.Void .ctor()

Disassembly:
	0x01E05070 LDR X0, [X21]
	0x01E05074 LDR W8, [X0 + 0xE0]
	0x01E05078 CBNZ W8, 0x1E05084
	0x01E0507C BL 0x1C16DFC
	0x01E05080 LDR X0, [X21]
	0x01E05084 LDR X8, [X0 + 0xB8]
	0x01E05088 LDRB W9, [X8 + 0x20]
	0x01E0508C CBZ W9, 0x1E050E8
	0x01E05090 LDR W9, [X0 + 0xE0]
	0x01E05094 CBNZ W9, 0x1E050A4
	0x01E05098 BL 0x1C16DFC
	0x01E0509C LDR X8, [X21]
	0x01E050A0 LDR X8, [X8 + 0xB8]
	0x01E050A4 STRB W31, [X8 + 0x20]
	0x01E050A8 MOV W0, W19
	0x01E050AC MOV V1.16B, V13.16B
	0x01E050B0 MOV V2.16B, V12.16B
	0x01E050B4 MOV V3.16B, V11.16B
	0x01E050B8 MOV V4.16B, V10.16B
	0x01E050BC MOV V5.16B, V9.16B
	0x01E050C0 MOV V6.16B, V8.16B
	0x01E050C4 LDP X20, X19, [X31 + 0x50]
	0x01E050C8 LDP X22, X21, [X31 + 0x40]
	0x01E050CC LDR X30, [X31 + 0x38]
	0x01E050D0 LDP D9, D8, [X31 + 0x28]
	0x01E050D4 LDP D11, D10, [X31 + 0x18]
	0x01E050D8 LDP D13, D12, [X31 + 0x8]
	0x01E050DC MOV V0.16B, V14.16B
	0x01E050E0 LDR V14, [X31], #0x60
	0x01E050E4 B 0x1E05208
	0x01E050E8 CBZ X20, 0x1E051BC
	0x01E050EC MOV X0, X20
	0x01E050F0 MOV X1, X31
	0x01E050F4 BL 0x1E9E538
	0x01E050F8 CMP W0, 0x4
	0x01E050FC B.NE 0x1E05120
	0x01E05100 LDP X20, X19, [X31 + 0x50]
	0x01E05104 LDP X22, X21, [X31 + 0x40]
	0x01E05108 LDR X30, [X31 + 0x38]
	0x01E0510C LDP D9, D8, [X31 + 0x28]
	0x01E05110 LDP D11, D10, [X31 + 0x18]
	0x01E05114 LDP D13, D12, [X31 + 0x8]
	0x01E05118 LDR V14, [X31], #0x60
	0x01E0511C RET
	0x01E05120 LDR X0, [X20 + 0x50]
	0x01E05124 CBZ X0, 0x1E05204
	0x01E05128 MOV X1, X31
	0x01E0512C BL 0x1EC4D00
	0x01E05130 TBZ X0, 0x0, 0x1E050A8
	0x01E05134 LDR X0, [X20 + 0x50]
	0x01E05138 MOVZ W1, 0x28

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x25D4000
	009 Move X24, 0x22F5000
	010 Move X20, 0x22F5000
	011 Move X22, 0x22F5000
	012 Move X21, 0x22F5000
	013 Move W8, [X23+3468]
	014 Move X24, [X24+2168]
	015 Move X20, [X20+2176]
	016 Move X22, [X22+2184]
	017 Move X21, [X21+2192]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x22F5000
	024 Move X0, [X0+2184]
	025 Call 0x1C17CF4
	026 Move X0, 0x22F5000
	027 Move X0, [X0+2176]
	028 Call 0x1C17CF4
	029 Move X0, 0x22F5000
	030 Move X0, [X0+2168]
	031 Call 0x1C17CF4
	032 Move X0, 0x22F5000
	033 Move X0, [X0+2192]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X23+3468], W8
	037 Move X0, [X24]
	038 Call 0x1C17F10
	039 Move X1, [X20]
	040 Move X20, X0
	041 Call List`1<Object>..ctor, X0
	042 Move [X19+32], X20
	043 Move X0, [X22]
	044 Move W1, 3
	045 Call 0x1C17D6C
	046 Move X1, [X21]
	047 Move X2, X31
	048 Move X20, X0
	049 Call RuntimeHelpers.InitializeArray, X0, X1
	050 Move [X19+120], X20
	051 Move X0, X19
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X22, [X31+32]
	055 Move X21, [X31+40]
	056 Move X24, [X31+16]
	057 Move X23, [X31+24]
	058 Move X1, X31
	059 Move X30, [X31+64]
	060 Call MonoBehaviour..ctor, X0
	061 Return 

