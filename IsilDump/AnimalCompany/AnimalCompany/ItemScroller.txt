Type: AnimalCompany.ItemScroller

Method: System.Void Update()

Disassembly:
	0x01D7AF2C MOV X0, X19
	0x01D7AF30 BL 0x21A453C
	0x01D7AF34 CBZ X0, 0x1D7AF8C
	0x01D7AF38 LDR W8, [X0 + 0x18]
	0x01D7AF3C MOV X19, X0
	0x01D7AF40 CMP W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call ItemScroller.UpdateItemScale, X0
	005 Move X0, X19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Call ItemScroller.UpdateItemZAndRotation, X0
	009 Return 

Method: System.Void Awake()

Disassembly:
	0x01D7B4F4 CBNZ W8, 0x1D7B50C
	0x01D7B4F8 ADRP X0, 0x2378000
	0x01D7B4FC LDR X0, [X0 + 0x5A0]
	0x01D7B500 BL 0x1C16CF4
	0x01D7B504 MOVZ W8, 0x1
	0x01D7B508 STRB W8, [X20 + 0x783]
	0x01D7B50C ADRP X8, 0x2378000
	0x01D7B510 LDR X8, [X8 + 0x5A0]
	0x01D7B514 MOV X0, X19
	0x01D7B518 MOV X1, X31
	0x01D7B51C LDR X8, [X8]
	0x01D7B520 LDR X8, [X8 + 0xB8]
	0x01D7B524 LDR V0, [X8]
	0x01D7B528 LDR V1, [X8 + 0x8]
	0x01D7B52C STR D0, [X19 + 0x50]
	0x01D7B530 STR S1, [X19 + 0x58]
	0x01D7B534 LDP X20, X19, [X31 + 0x10]
	0x01D7B538 LDR X30, [X31], #0x20
	0x01D7B53C B 0x3C36C30
	0x01D7B540 STP X30, X23, [X31 - 0x30]!
	0x01D7B544 STP X22, X21, [X31 + 0x10]
	0x01D7B548 STP X20, X19, [X31 + 0x20]
	0x01D7B54C ADRP X20, 0x265D000
	0x01D7B550 LDRB W8, [X20 + 0x945]
	0x01D7B554 MOV X19, X0
	0x01D7B558 TBNZ X8, 0x0, 0x1D7B594
	0x01D7B55C ADRP X0, 0x237A000
	0x01D7B560 LDR X0, [X0 + 0x6D0]
	0x01D7B564 BL 0x1C16CF4
	0x01D7B568 ADRP X0, 0x237B000
	0x01D7B56C LDR X0, [X0 + 0x438]
	0x01D7B570 BL 0x1C16CF4
	0x01D7B574 ADRP X0, 0x237B000
	0x01D7B578 LDR X0, [X0 + 0x440]
	0x01D7B57C BL 0x1C16CF4
	0x01D7B580 ADRP X0, 0x237A000
	0x01D7B584 LDR X0, [X0 + 0x680]
	0x01D7B588 BL 0x1C16CF4
	0x01D7B58C MOVZ W8, 0x1
	0x01D7B590 STRB W8, [X20 + 0x945]
	0x01D7B594 LDR X23, [X19 + 0x28]
	0x01D7B598 CBZ X23, 0x1D7B6CC
	0x01D7B59C ADRP X22, 0x237A000
	0x01D7B5A0 LDR X22, [X22 + 0x6D0]
	0x01D7B5A4 ADRP X21, 0x237B000
	0x01D7B5A8 LDR X20, [X23 + 0x20]
	0x01D7B5AC LDR X0, [X22]
	0x01D7B5B0 LDR X21, [X21 + 0x438]
	0x01D7B5B4 BL 0x1C16F10
	0x01D7B5B8 LDR X2, [X21]
	0x01D7B5BC MOV X1, X19
	0x01D7B5C0 MOV X3, X31
	0x01D7B5C4 MOV X21, X0
	0x01D7B5C8 BL 0x2A6B948

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x265E000
	008 Move W8, [X20+2363]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x237B000
	015 Move X0, [X0+1184]
	016 Call 0x1C17CF4
	017 Move X0, 0x237C000
	018 Move X0, [X0+1016]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2363], W8
	022 Move X22, [X19+56]
	023 Compare X22, 0
	024 JumpIfEqual {67}
	025 Move X23, 0x237B000
	026 Move X23, [X23+1184]
	027 Move X21, 0x237C000
	028 Move X20, [X22+32]
	029 Move X0, [X23]
	030 Move X21, [X21+1016]
	031 Call 0x1C17F10
	032 Move X2, [X21]
	033 Move X1, X19
	034 Move X3, X31
	035 Move X21, X0
	036 Call Func`2<Single, Boolean>..ctor, X0, X1, X2
	037 Move X0, X20
	038 Move X1, X21
	039 Move X2, X31
	040 Call Delegate.Combine, X0, X1
	041 Compare X0, 0
	042 JumpIfEqual {59}
	043 Move X20, [X23]
	044 Move X19, X0
	045 Move X1, X20
	046 Call 0x1C17E00
	047 Compare X0, 0
	048 JumpIfEqual {56}
	049 Move [X22+32], X0
	050 Move X20, [X23]
	051 Move X0, X19
	052 Move X1, X20
	053 Call 0x1C17E00
	054 Compare X0, 0
	055 JumpIfNotEqual {60}
	056 Move X0, X19
	057 Move X1, X20
	058 Call 0x1C181E0
	059 Move [X22+32], X31
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X30, [X31+48]
	065 Move X23, [X31+56]
	066 Return 
	067 Call 0x1C17F20

Method: System.Void ResetScroll()

Disassembly:
	0x01D7B5CC MOV X0, X20
	0x01D7B5D0 MOV X1, X21
	0x01D7B5D4 MOV X2, X31
	0x01D7B5D8 BL 0x33C0DE4
	0x01D7B5DC CBZ X0, 0x1D7B610
	0x01D7B5E0 LDR X21, [X22]
	0x01D7B5E4 MOV X20, X0
	0x01D7B5E8 MOV X1, X21
	0x01D7B5EC BL 0x1C16E00
	0x01D7B5F0 CBZ X0, 0x1D7B684
	0x01D7B5F4 STR X0, [X23 + 0x20]
	0x01D7B5F8 LDR X21, [X22]
	0x01D7B5FC MOV X0, X20
	0x01D7B600 MOV X1, X21
	0x01D7B604 BL 0x1C16E00
	0x01D7B608 CBNZ X0, 0x1D7B614
	0x01D7B60C B 0x1D7B684

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+64]
	005 Compare X0, 0
	006 JumpIfEqual {22}
	007 Move X1, X31
	008 Call RectTransform.ForceUpdateRectTransforms, X0
	009 Move X19, [X19+64]
	010 Compare X19, 0
	011 JumpIfEqual {22}
	012 Move X0, X19
	013 Move X1, X31
	014 Call RectTransform.get_anchoredPosition, X0
	015 Move S0, -5
	016 Move X0, X19
	017 Move X1, X31
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Call RectTransform.set_anchoredPosition, X0, X1
	021 Return 
	022 Call 0x1C17F20

Method: System.Boolean OnTryScroll(System.Single dist)

Disassembly:
	0x01D7B610 STR X31, [X23 + 0x20]
	0x01D7B614 LDR X23, [X19 + 0x28]
	0x01D7B618 CBZ X23, 0x1D7B6CC
	0x01D7B61C LDR X0, [X22]
	0x01D7B620 ADRP X21, 0x237B000
	0x01D7B624 LDR X20, [X23 + 0x28]
	0x01D7B628 LDR X21, [X21 + 0x440]
	0x01D7B62C BL 0x1C16F10
	0x01D7B630 LDR X2, [X21]
	0x01D7B634 MOV X1, X19
	0x01D7B638 MOV X3, X31
	0x01D7B63C MOV X21, X0
	0x01D7B640 BL 0x2A6B948
	0x01D7B644 MOV X0, X20
	0x01D7B648 MOV X1, X21
	0x01D7B64C MOV X2, X31
	0x01D7B650 BL 0x33C0DE4
	0x01D7B654 CBZ X0, 0x1D7B690
	0x01D7B658 LDR X21, [X22]
	0x01D7B65C MOV X20, X0
	0x01D7B660 MOV X1, X21
	0x01D7B664 BL 0x1C16E00
	0x01D7B668 CBZ X0, 0x1D7B684
	0x01D7B66C STR X0, [X23 + 0x28]
	0x01D7B670 LDR X21, [X22]
	0x01D7B674 MOV X0, X20
	0x01D7B678 MOV X1, X21
	0x01D7B67C BL 0x1C16E00
	0x01D7B680 CBNZ X0, 0x1D7B694
	0x01D7B684 MOV X0, X20
	0x01D7B688 MOV X1, X21
	0x01D7B68C BL 0x1C171E0
	0x01D7B690 STR X31, [X23 + 0x28]
	0x01D7B694 LDR X0, [X19 + 0x30]
	0x01D7B698 CBZ X0, 0x1D7B6CC
	0x01D7B69C MOV X1, X31
	0x01D7B6A0 BL 0x3C1341C
	0x01D7B6A4 CBZ X0, 0x1D7B6CC
	0x01D7B6A8 ADRP X8, 0x237A000
	0x01D7B6AC LDR X8, [X8 + 0x680]
	0x01D7B6B0 LDP X20, X19, [X31 + 0x20]
	0x01D7B6B4 LDP X22, X21, [X31 + 0x10]
	0x01D7B6B8 FMOV S0, 0.5

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move X0, [X0+64]
	008 Compare X0, 0
	009 JumpIfEqual {50}
	010 Move X1, X31
	011 Move V8, V0
	012 Call RectTransform.get_anchoredPosition, X0
	013 Move X0, [X19+64]
	014 Compare X0, 0
	015 JumpIfEqual {50}
	016 Move X1, X31
	017 Move V9, V0
	018 Call RectTransform.get_rect, X0
	019 NotImplemented "Instruction FNEG not yet implemented."
	020 Move V2, [X19+72]
	021 Move S1, -5
	022 Move X19, [X19+64]
	023 NotImplemented "Instruction FMINNM not yet implemented."
	024 Multiply S0, S2, S8
	025 Move S3, W31
	026 Add S0, S9, S0
	027 NotImplemented "Instruction FMIN not yet implemented."
	028 NotImplemented "Instruction FCMP not yet implemented."
	029 NotImplemented "Instruction FCSEL not yet implemented."
	030 Compare X19, 0
	031 JumpIfEqual {50}
	032 Move X0, X19
	033 Move X1, X31
	034 Call RectTransform.get_anchoredPosition, X0
	035 Move X0, X19
	036 Move V0, V8
	037 Move X1, X31
	038 Call RectTransform.set_anchoredPosition, X0, X1
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 NotImplemented "Instruction CSET not yet implemented."
	041 NotImplemented "Instruction FCMP not yet implemented."
	042 Move X30, [X31+32]
	043 Move X19, [X31+40]
	044 Move D9, [X31+16]
	045 Move D8, [X31+24]
	046 NotImplemented "Instruction CSET not yet implemented."
	047 And W0, W8, W9
	048 Move V10, [X31+48]
	049 Return X0
	050 Call 0x1C17F20

Method: System.Void UpdateItemScale()

Disassembly:
	0x01D7AF44 B.LT 0x1D7AF7C
	0x01D7AF48 MOV W20, W31
	0x01D7AF4C CMP W20, W8
	0x01D7AF50 B.CS 0x1D7AF88
	0x01D7AF54 ADD X8, X19, W20, 0x3, SXTW
	0x01D7AF58 LDR X0, [X8 + 0x20]
	0x01D7AF5C CBZ X0, 0x1D7AF8C
	0x01D7AF60 MOVZ W1, 0x1
	0x01D7AF64 MOV X2, X31
	0x01D7AF68 BL 0x3C8F7C8
	0x01D7AF6C LDR W8, [X19 + 0x18]
	0x01D7AF70 ADD W20, W20, 0x1
	0x01D7AF74 CMP W20, W8
	0x01D7AF78 B.LT 0x1D7AF4C
	0x01D7AF7C LDP X20, X19, [X31 + 0x10]
	0x01D7AF80 LDR X30, [X31], #0x20
	0x01D7AF84 RET
	0x01D7AF88 BL 0x1C16F28
	0x01D7AF8C BL 0x1C16F20
	0x01D7AF90 FMOV S0, W31
	0x01D7AF94 STRB W31, [X0 + 0x70]
	0x01D7AF98 STR W31, [X0 + 0x6C]
	0x01D7AF9C B 0x1D7AFA0
	0x01D7AFA0 STP D11, D10, [X31 - 0x40]!
	0x01D7AFA4 STP D9, D8, [X31 + 0x10]
	0x01D7AFA8 STP X30, X21, [X31 + 0x20]
	0x01D7AFAC STP X20, X19, [X31 + 0x30]
	0x01D7AFB0 ADRP X20, 0x265E000
	0x01D7AFB4 ADRP X21, 0x2379000
	0x01D7AFB8 LDRB W8, [X20 + 0x943]
	0x01D7AFBC LDR X21, [X21 + 0x598]
	0x01D7AFC0 MOV V8.16B, V0.16B
	0x01D7AFC4 MOV X19, X0
	0x01D7AFC8 TBNZ X8, 0x0, 0x1D7AFE0
	0x01D7AFCC ADRP X0, 0x2379000
	0x01D7AFD0 LDR X0, [X0 + 0x598]
	0x01D7AFD4 BL 0x1C16CF4
	0x01D7AFD8 MOVZ W8, 0x1
	0x01D7AFDC STRB W8, [X20 + 0x943]
	0x01D7AFE0 LDR X0, [X21]
	0x01D7AFE4 LDR X20, [X19 + 0x40]
	0x01D7AFE8 LDR W8, [X0 + 0xE0]
	0x01D7AFEC CBNZ W8, 0x1D7AFF4
	0x01D7AFF0 BL 0x1C16DFC
	0x01D7AFF4 MOV X0, X20
	0x01D7AFF8 MOV X1, X31
	0x01D7AFFC MOV X2, X31
	0x01D7B000 BL 0x3C354F8
	0x01D7B004 TBZ X0, 0x0, 0x1D7B028
	0x01D7B008 LDR X0, [X19 + 0x40]
	0x01D7B00C CBZ X0, 0x1D7B11C
	0x01D7B010 ADRP X8, 0xFFFFFFFFFED6F000
	0x01D7B014 LDR V0, [X8 + 0x330]
	0x01D7B018 MOV X2, X31
	0x01D7B01C FCMP S8, S0
	0x01D7B020 CSET W1, GT
	0x01D7B024 BL 0x3C13034
	0x01D7B028 LDR X0, [X21]
	0x01D7B02C LDR X20, [X19 + 0x48]
	0x01D7B030 LDR W8, [X0 + 0xE0]
	0x01D7B034 CBNZ W8, 0x1D7B03C
	0x01D7B038 BL 0x1C16DFC
	0x01D7B03C MOV X0, X20
	0x01D7B040 MOV X1, X31
	0x01D7B044 MOV X2, X31
	0x01D7B048 BL 0x3C354F8
	0x01D7B04C TBZ X0, 0x0, 0x1D7B078
	0x01D7B050 LDR X0, [X19 + 0x48]
	0x01D7B054 CBZ X0, 0x1D7B11C
	0x01D7B058 ADRP X8, 0xFFFFFFFFFED6F000
	0x01D7B05C LDR V0, [X8 + 0x330]
	0x01D7B060 FMOV S1, W31
	0x01D7B064 MOV X1, X31
	0x01D7B068 FCMP S8, S0
	0x01D7B06C FMOV S0, 1
	0x01D7B070 FCSEL S0, S0, S1, GT
	0x01D7B074 BL 0x3E22B30
	0x01D7B078 ADRP X21, 0x265D000
	0x01D7B07C LDR X20, [X19 + 0x38]
	0x01D7B080 LDR V9, [X19 + 0x50]
	0x01D7B084 LDRB W8, [X21 + 0x85B]
	0x01D7B088 LDR V10, [X19 + 0x58]
	0x01D7B08C CBNZ W8, 0x1D7B0A4
	0x01D7B090 ADRP X0, 0x2378000
	0x01D7B094 LDR X0, [X0 + 0x5A0]
	0x01D7B098 BL 0x1C16CF4
	0x01D7B09C MOVZ W8, 0x1
	0x01D7B0A0 STRB W8, [X21 + 0x85B]
	0x01D7B0A4 ADRP X8, 0x2378000
	0x01D7B0A8 LDR X8, [X8 + 0x5A0]
	0x01D7B0AC FMOV S11, 1
	0x01D7B0B0 FSUB S0, S11, S8
	0x01D7B0B4 FMOV S1, 3
	0x01D7B0B8 LDR X8, [X8]
	0x01D7B0BC LDR X19, [X8 + 0xB8]
	0x01D7B0C0 BL 0x3EB1B50
	0x01D7B0C4 FSUB S0, S11, S0
	0x01D7B0C8 FMIN S1, S0, S11
	0x01D7B0CC FCMP S0, 0x0
	0x01D7B0D0 FMOV S0, W31
	0x01D7B0D4 FCSEL S0, S1, S0, PL
	0x01D7B0D8 CBZ X20, 0x1D7B11C
	0x01D7B0DC LDR V1, [X19 + 0x14]
	0x01D7B0E0 LDUR V2, [X19 + 0xC]
	0x01D7B0E4 MOV X0, X20
	0x01D7B0E8 LDP X20, X19, [X31 + 0x30]
	0x01D7B0EC FSUB S1, S1, S10
	0x01D7B0F0 FSUB V2.2S, V2.2S, V9.2S
	0x01D7B0F4 FMUL S1, S0, S1
	0x00000000 INVALID
	0x01D7B0FC FADD V0.2S, V9.2S, V0.2S
	0x01D7B100 LDP X30, X21, [X31 + 0x20]
	0x01D7B104 LDP D9, D8, [X31 + 0x10]
	0x01D7B108 FADD S2, S10, S1
	0x01D7B10C MOV S1, V0.S[1]
	0x01D7B110 MOV X1, X31
	0x01D7B114 LDP D11, D10, [X31], #0x40
	0x01D7B118 B 0x3C3FC4C
	0x01D7B11C BL 0x1C16F20
	0x01D7B120 FMOV S0, W31
	0x01D7B124 STR X31, [X0 + 0x60]
	0x01D7B128 STRB W31, [X0 + 0x70]
	0x01D7B12C STR W31, [X0 + 0x6C]
	0x01D7B130 B 0x1D7AFA0
	0x01D7B134 STP D9, D8, [X31 - 0x30]!
	0x01D7B138 STP X30, X21, [X31 + 0x10]
	0x01D7B13C STP X20, X19, [X31 + 0x20]
	0x01D7B140 ADRP X21, 0x265D000
	0x01D7B144 ADRP X20, 0x2378000
	0x01D7B148 LDRB W8, [X21 + 0x942]
	0x01D7B14C LDR X20, [X20 + 0x598]
	0x01D7B150 MOV X19, X0
	0x01D7B154 TBNZ X8, 0x0, 0x1D7B16C
	0x01D7B158 ADRP X0, 0x2378000
	0x01D7B15C LDR X0, [X0 + 0x598]
	0x01D7B160 BL 0x1C16CF4
	0x01D7B164 MOVZ W8, 0x1
	0x01D7B168 STRB W8, [X21 + 0x942]
	0x01D7B16C LDR X0, [X20]
	0x01D7B170 LDR X20, [X19 + 0x60]
	0x01D7B174 LDR W8, [X0 + 0xE0]
	0x01D7B178 CBNZ W8, 0x1D7B180
	0x01D7B17C BL 0x1C16DFC
	0x01D7B180 MOV X0, X20
	0x01D7B184 MOV X1, X31
	0x01D7B188 MOV X2, X31
	0x01D7B18C BL 0x3C354F8
	0x01D7B190 TBZ X0, 0x0, 0x1D7B26C
	0x01D7B194 LDRB W8, [X19 + 0x70]
	0x01D7B198 CBNZ W8, 0x1D7B26C
	0x01D7B19C LDR V8, [X19 + 0x6C]
	0x01D7B1A0 MOV X0, X31
	0x01D7B1A4 BL 0x3C3C714
	0x01D7B1A8 LDR V1, [X19 + 0x28]
	0x01D7B1AC FADD S0, S8, S0
	0x01D7B1B0 STR S0, [X19 + 0x6C]
	0x01D7B1B4 MOV X0, X19
	0x01D7B1B8 FDIV S0, S0, S1

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], D9
	003 Move [X31+72], D8
	004 Move [X31+80], X30
	005 Move [X31+96], X26
	006 Move [X31+104], X25
	007 Move [X31+112], X24
	008 Move [X31+120], X23
	009 Move [X31+128], X22
	010 Move [X31+136], X21
	011 Move [X31+144], X20
	012 Move [X31+152], X19
	013 Move X20, 0x265F000
	014 Move W8, [X20+2364]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move X0, 0x237C000
	021 Move X0, [X0+1776]
	022 Call 0x1C17CF4
	023 Move X0, 0x237C000
	024 Move X0, [X0+1784]
	025 Call 0x1C17CF4
	026 Move X0, 0x237C000
	027 Move X0, [X0+1792]
	028 Call 0x1C17CF4
	029 Move X0, 0x237C000
	030 Move X0, [X0+1800]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+2364], W8
	034 Move [X31+32], X31
	035 Move [X31+40], X31
	036 Move [X31+48], X31
	037 Move X0, [X19+80]
	038 Compare X0, 0
	039 JumpIfEqual {144}
	040 Move X8, 0x237C000
	041 Move X8, [X8+1800]
	042 Move X24, 0x237C000
	043 Move X23, 0x237C000
	044 Move X1, [X8]
	045 Move X24, [X24+1784]
	046 Move X23, [X23+1776]
	047 Add X8, X31, 8
	048 Call List`1<Object>.GetEnumerator, X0
	049 NotImplemented "Instruction LDUR not yet implemented."
	050 Move X8, [X31+24]
	051 Move X20, 0x237A000
	052 Move X20, [X20+1440]
	053 Move S9, 1
	054 Move X25, 0x265F000
	055 Move [X31+2], V0
	056 Move [X31+48], X8
	057 Move W26, 1
	058 Move X1, [X24]
	059 Add X0, X31, 32
	060 Call Enumerator<Object>.MoveNext, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {124}
	065 Move X21, [X31+48]
	066 Move X0, X19
	067 Move X1, X31
	068 Call Component.get_transform, X0
	069 Compare X21, 0
	070 JumpIfEqual {142}
	071 Move X22, X0
	072 Move X0, X21
	073 Move X1, X31
	074 Call Component.get_transform, X0
	075 Compare X0, 0
	076 JumpIfEqual {143}
	077 Move X1, X31
	078 Call Transform.get_position, X0
	079 Compare X22, 0
	080 JumpIfEqual {140}
	081 Move X0, X22
	082 Move X1, X31
	083 Call Transform.InverseTransformPoint, X0, X1
	084 Move S2, [X19+32]
	085 Move S1, [X19+36]
	086 Move S8, W31
	087 NotImplemented "Instruction FCMP not yet implemented."
	088 NotImplemented "Instruction FABS not yet implemented."
	089 Subtract S0, S0, S1
	090 Subtract S1, S2, S1
	091 NotImplemented "Instruction FDIV not yet implemented."
	092 NotImplemented "Instruction FCMP not yet implemented."
	093 NotImplemented "Instruction FMIN not yet implemented."
	094 Move X0, X21
	095 Move X1, X31
	096 Call Component.get_transform, X0
	097 Move W8, [X25+2139]
	098 Move X21, X0
	099 Compare W8, 0
	100 JumpIfNotEqual {104}
	101 Move X0, X20
	102 Call 0x1C17CF4
	103 Move [X25+2139], W26
	104 Move X8, [X20]
	105 Move S1, 3
	106 Move V0, V8
	107 Move X22, [X8+184]
	108 Call 0x3EB2B50
	109 NotImplemented "Instruction FMIN not yet implemented."
	110 Subtract S1, S9, S1
	111 NotImplemented "Instruction FCMP not yet implemented."
	112 NotImplemented "Instruction FCSEL not yet implemented."
	113 Compare X21, 0
	114 JumpIfEqual {141}
	115 Move S3, [X22+16]
	116 Move S1, [X22+20]
	117 Move V4, [X22+12]
	118 Multiply S2, S0, S1
	119 Multiply S1, S0, S3
	120 Multiply S0, S0, S4
	121 Move X0, X21
	122 Move X1, X31
	123 Call Transform.set_localScale, X0, X1
	124 Move X1, [X23]
	125 Add X0, X31, 32
	126 Call Enumerator<Object>.Dispose, X0
	127 Move X20, [X31+144]
	128 Move X19, [X31+152]
	129 Move X22, [X31+128]
	130 Move X21, [X31+136]
	131 Move X24, [X31+112]
	132 Move X23, [X31+120]
	133 Move X26, [X31+96]
	134 Move X25, [X31+104]
	135 Move X30, [X31+80]
	136 Move D9, [X31+64]
	137 Move D8, [X31+72]
	138 Add X31, X31, 160
	139 Return 
	140 Call 0x1C17F20
	141 Call 0x1C17F20
	142 Call 0x1C17F20
	143 Call 0x1C17F20
	144 Call 0x1C17F20
	145 Move X19, X0
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move X0, X19
	148 Call 0x3EB2AD0
	149 Move X20, [X0]
	150 Call 0x3EB2AE0
	151 Move X1, [X23]
	152 Add X0, X31, 32
	153 Call Enumerator<Object>.Dispose, X0
	154 Compare X20, 0
	155 JumpIfEqual {127}
	156 Move X0, X20
	157 Call 0x1C17F18
	158 Move X20, X31
	159 Move X19, X0
	160 Move X1, [X23]
	161 Add X0, X31, 32
	162 Call Enumerator<Object>.Dispose, X0
	163 Compare X20, 0
	164 JumpIfNotEqual {167}
	165 Move X0, X19
	166 Call 0x1D2D690
	167 Move X0, X20
	168 Call 0x1C17F18
	169 Call 0x1991590

Method: System.Void UpdateItemZAndRotation()

Disassembly:
	0x01D7B1BC BL 0x1D7AFA0
	0x01D7B1C0 LDR W20, [X19 + 0x68]
	0x01D7B1C4 LDR V8, [X19 + 0x6C]
	0x01D7B1C8 LDR V9, [X19 + 0x28]
	0x01D7B1CC MOV X0, X31
	0x01D7B1D0 BL 0x3C3C714
	0x01D7B1D4 MOV V1.16B, V0.16B
	0x01D7B1D8 FDIV S0, S8, S9
	0x01D7B1DC FMOV S2, 0.5
	0x01D7B1E0 FMUL S0, S0, S2
	0x01D7B1E4 MOV W0, W20
	0x01D7B1E8 MOV X1, X31
	0x01D7B1EC BL 0x1DC2324
	0x01D7B1F0 LDR V0, [X19 + 0x6C]
	0x01D7B1F4 LDR V1, [X19 + 0x28]
	0x01D7B1F8 FCMP S0, S1
	0x01D7B1FC B.LT 0x1D7B26C
	0x01D7B200 ADRP X8, 0xFFFFFFFFFED6F000
	0x01D7B204 LDR W0, [X19 + 0x68]
	0x01D7B208 LDR V1, [X8 + 0xBC]
	0x01D7B20C FMOV S0, 1
	0x01D7B210 MOV X1, X31
	0x01D7B214 BL 0x1DC2324
	0x01D7B218 LDR X20, [X19 + 0x30]
	0x01D7B21C MOV X0, X19
	0x01D7B220 MOV X1, X31
	0x01D7B224 BL 0x3C32E90
	0x01D7B228 CBZ X0, 0x1D7B27C
	0x01D7B22C MOV X1, X31
	0x01D7B230 BL 0x3C3F58C
	0x01D7B234 CBZ X20, 0x1D7B27C
	0x01D7B238 FMOV S3, 1
	0x01D7B23C MOV X0, X20
	0x01D7B240 MOV W1, W31
	0x01D7B244 MOV X2, X31
	0x01D7B248 BL 0x1DD0FA8
	0x01D7B24C LDR X8, [X19 + 0x20]
	0x01D7B250 CBZ X8, 0x1D7B264
	0x01D7B254 LDR X9, [X8 + 0x18]
	0x01D7B258 LDR X0, [X8 + 0x40]
	0x01D7B25C LDR X1, [X8 + 0x28]
	0x01D7B260 BLR X9
	0x01D7B264 MOVZ W8, 0x1
	0x01D7B268 STRB W8, [X19 + 0x70]
	0x01D7B26C LDP X20, X19, [X31 + 0x20]
	0x01D7B270 LDP X30, X21, [X31 + 0x10]
	0x01D7B274 LDP D9, D8, [X31], #0x30
	0x01D7B278 RET
	0x01D7B27C BL 0x1C16F20
	0x01D7B280 STR X30, [X31 - 0x20]!
	0x01D7B284 STP X20, X19, [X31 + 0x10]
	0x01D7B288 MOV X19, X1
	0x01D7B28C MOV X20, X0
	0x01D7B290 ADD X1, X31, 0xC
	0x01D7B294 MOV X0, X19
	0x01D7B298 STR W31, [X31 + 0xC]
	0x01D7B29C BL 0x1D7B2BC
	0x01D7B2A0 TBZ X0, 0x0, 0x1D7B2B0
	0x01D7B2A4 LDR W8, [X31 + 0xC]
	0x01D7B2A8 STR X19, [X20 + 0x60]
	0x01D7B2AC STR W8, [X20 + 0x68]
	0x01D7B2B0 LDP X20, X19, [X31 + 0x10]
	0x01D7B2B4 LDR X30, [X31], #0x20
	0x01D7B2B8 RET
	0x01D7B2BC STR X30, [X31 - 0x30]!
	0x01D7B2C0 STP X22, X21, [X31 + 0x10]
	0x01D7B2C4 STP X20, X19, [X31 + 0x20]
	0x01D7B2C8 ADRP X20, 0x265D000
	0x01D7B2CC LDRB W8, [X20 + 0x9B0]
	0x01D7B2D0 MOV X19, X1
	0x01D7B2D4 MOV X21, X0
	0x01D7B2D8 TBNZ X8, 0x0, 0x1D7B314
	0x01D7B2DC ADRP X0, 0x237B000
	0x01D7B2E0 LDR X0, [X0 + 0x420]
	0x01D7B2E4 BL 0x1C16CF4
	0x01D7B2E8 ADRP X0, 0x2378000
	0x01D7B2EC LDR X0, [X0 + 0x598]
	0x01D7B2F0 BL 0x1C16CF4
	0x01D7B2F4 ADRP X0, 0x237B000
	0x01D7B2F8 LDR X0, [X0 + 0x428]
	0x01D7B2FC BL 0x1C16CF4
	0x01D7B300 ADRP X0, 0x237B000
	0x01D7B304 LDR X0, [X0 + 0x430]
	0x01D7B308 BL 0x1C16CF4
	0x01D7B30C MOVZ W8, 0x1
	0x01D7B310 STRB W8, [X20 + 0x9B0]
	0x01D7B314 STR W31, [X19]
	0x01D7B318 CBZ X21, 0x1D7B420
	0x01D7B31C MOV X0, X21
	0x01D7B320 MOV X1, X31
	0x01D7B324 BL 0x3C32ECC
	0x01D7B328 CBZ X0, 0x1D7B420
	0x01D7B32C ADRP X20, 0x237B000
	0x01D7B330 LDR X20, [X20 + 0x428]
	0x01D7B334 MOV X1, X31
	0x01D7B338 BL 0x3C333E4
	0x01D7B33C LDR X1, [X20]
	0x01D7B340 MOV X2, X31
	0x01D7B344 BL 0x321BA08
	0x01D7B348 MOV W20, W0
	0x01D7B34C TBZ X0, 0x0, 0x1D7B40C
	0x01D7B350 MOV X0, X21
	0x01D7B354 MOV X1, X31
	0x01D7B358 BL 0x3C32ECC
	0x01D7B35C CBZ X0, 0x1D7B420
	0x01D7B360 ADRP X8, 0x237B000
	0x01D7B364 LDR X8, [X8 + 0x420]
	0x01D7B368 LDR X1, [X8]
	0x01D7B36C BL 0x21E58C4
	0x01D7B370 ADRP X8, 0x2378000
	0x01D7B374 LDR X8, [X8 + 0x598]
	0x01D7B378 MOV X22, X0
	0x01D7B37C LDR X8, [X8]
	0x01D7B380 LDR W9, [X8 + 0xE0]
	0x01D7B384 CBNZ W9, 0x1D7B390
	0x01D7B388 MOV X0, X8
	0x01D7B38C BL 0x1C16DFC
	0x01D7B390 MOV X0, X22
	0x01D7B394 MOV X1, X31
	0x01D7B398 MOV X2, X31
	0x01D7B39C BL 0x3C354F8
	0x01D7B3A0 TBZ X0, 0x0, 0x1D7B3B8
	0x01D7B3A4 CBZ X22, 0x1D7B420
	0x01D7B3A8 LDR W8, [X22 + 0xA4]
	0x01D7B3AC CMP W8, 0x4
	0x01D7B3B0 CSET W8, NE
	0x01D7B3B4 B 0x1D7B3EC
	0x01D7B3B8 MOV X0, X21
	0x01D7B3BC MOV X1, X31
	0x01D7B3C0 BL 0x3C32ECC
	0x01D7B3C4 CBZ X0, 0x1D7B420
	0x01D7B3C8 MOV X1, X31
	0x01D7B3CC BL 0x3C389D4
	0x01D7B3D0 CBZ X0, 0x1D7B420
	0x01D7B3D4 ADRP X8, 0x237B000
	0x01D7B3D8 LDR X8, [X8 + 0x430]
	0x01D7B3DC MOV X2, X31
	0x01D7B3E0 LDR X1, [X8]
	0x01D7B3E4 BL 0x3226588
	0x01D7B3E8 EOR W8, W0, 0x1
	0x01D7B3EC AND W0, W8, 0x1
	0x01D7B3F0 ADRP X8, 0xFFFFFFFFFED6F000
	0x01D7B3F4 ADRP X9, 0xFFFFFFFFFED6F000
	0x01D7B3F8 LDR V0, [X8 + 0x44C]
	0x01D7B3FC LDR V1, [X9 + 0xBC]
	0x01D7B400 MOV X1, X31
	0x01D7B404 STR W0, [X19]
	0x01D7B408 BL 0x1DC2324
	0x01D7B40C AND W0, W20, 0x1
	0x01D7B410 LDP X20, X19, [X31 + 0x20]
	0x01D7B414 LDP X22, X21, [X31 + 0x10]
	0x01D7B418 LDR X30, [X31], #0x30
	0x01D7B41C RET
	0x01D7B420 BL 0x1C16F20
	0x01D7B424 STR X30, [X31 - 0x30]!
	0x01D7B428 STP X22, X21, [X31 + 0x10]
	0x01D7B42C STP X20, X19, [X31 + 0x20]
	0x01D7B430 ADRP X22, 0x265D000
	0x01D7B434 ADRP X21, 0x2378000
	0x01D7B438 LDRB W8, [X22 + 0x944]
	0x01D7B43C LDR X21, [X21 + 0x598]
	0x01D7B440 MOV X20, X1
	0x01D7B444 MOV X19, X0
	0x01D7B448 TBNZ X8, 0x0, 0x1D7B460
	0x01D7B44C ADRP X0, 0x2378000
	0x01D7B450 LDR X0, [X0 + 0x598]
	0x01D7B454 BL 0x1C16CF4
	0x01D7B458 MOVZ W8, 0x1
	0x01D7B45C STRB W8, [X22 + 0x944]
	0x01D7B460 LDR X0, [X21]
	0x01D7B464 LDR X21, [X19 + 0x60]
	0x01D7B468 LDR W8, [X0 + 0xE0]
	0x01D7B46C CBNZ W8, 0x1D7B474
	0x01D7B470 BL 0x1C16DFC
	0x01D7B474 MOV X0, X20
	0x01D7B478 MOV X1, X21
	0x01D7B47C MOV X2, X31
	0x01D7B480 BL 0x3C3883C
	0x01D7B484 TBZ X0, 0x0, 0x1D7B4C4
	0x01D7B488 LDR X0, [X19 + 0x38]
	0x01D7B48C STR X31, [X19 + 0x60]
	0x01D7B490 STRB W31, [X19 + 0x70]
	0x01D7B494 STR W31, [X19 + 0x6C]
	0x01D7B498 CBZ X0, 0x1D7B4D4
	0x01D7B49C LDP S1, S2, [X19 + 0x54]
	0x01D7B4A0 LDR V0, [X19 + 0x50]
	0x01D7B4A4 MOV X1, X31
	0x01D7B4A8 BL 0x3C3FC4C
	0x01D7B4AC MOV X0, X19
	0x01D7B4B0 LDP X20, X19, [X31 + 0x20]
	0x01D7B4B4 LDP X22, X21, [X31 + 0x10]
	0x01D7B4B8 FMOV S0, W31
	0x01D7B4BC LDR X30, [X31], #0x30
	0x01D7B4C0 B 0x1D7AFA0
	0x01D7B4C4 LDP X20, X19, [X31 + 0x20]
	0x01D7B4C8 LDP X22, X21, [X31 + 0x10]
	0x01D7B4CC LDR X30, [X31], #0x30
	0x01D7B4D0 RET
	0x01D7B4D4 BL 0x1C16F20
	0x01D7B4D8 STR X30, [X31 - 0x20]!
	0x01D7B4DC STP X20, X19, [X31 + 0x10]
	0x01D7B4E0 MOVZ W8, 0x40000000
	0x01D7B4E4 STR W8, [X0 + 0x28]
	0x01D7B4E8 ADRP X20, 0x265D000
	0x01D7B4EC LDRB W8, [X20 + 0x783]
	0x01D7B4F0 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+64], D15
	003 Move [X31+72], D14
	004 Move [X31+80], D13
	005 Move [X31+88], D12
	006 Move [X31+96], D11
	007 Move [X31+104], D10
	008 Move [X31+112], D9
	009 Move [X31+120], D8
	010 Move [X31+128], X30
	011 Move [X31+136], X23
	012 Move [X31+144], X22
	013 Move [X31+152], X21
	014 Move [X31+160], X20
	015 Move [X31+168], X19
	016 Move X20, 0x265E000
	017 Move W8, [X20+2365]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x237B000
	024 Move X0, [X0+1776]
	025 Call 0x1C17CF4
	026 Move X0, 0x237B000
	027 Move X0, [X0+1784]
	028 Call 0x1C17CF4
	029 Move X0, 0x237B000
	030 Move X0, [X0+1792]
	031 Call 0x1C17CF4
	032 Move X0, 0x237B000
	033 Move X0, [X0+1800]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+2365], W8
	037 Move [X31+32], X31
	038 Move [X31+40], X31
	039 Move [X31+48], X31
	040 Move X0, [X19+80]
	041 Compare X0, 0
	042 JumpIfEqual {186}
	043 Move X8, 0x237B000
	044 Move X8, [X8+1800]
	045 Move X23, 0x237B000
	046 Move X22, 0x237B000
	047 Move X1, [X8]
	048 Move X23, [X23+1784]
	049 Move X22, [X22+1776]
	050 Add X8, X31, 8
	051 Call List`1<Object>.GetEnumerator, X0
	052 NotImplemented "Instruction LDUR not yet implemented."
	053 Move X8, [X31+24]
	054 Move X9, -19464192
	055 Move V12, [X9+260]
	056 Move S11, 1
	057 Move [X31+2], V0
	058 Move [X31+48], X8
	059 Move S13, W31
	060 Move X1, [X23]
	061 Add X0, X31, 32
	062 Call Enumerator<Object>.MoveNext, X0
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {160}
	067 Move X20, [X31+48]
	068 Move X0, X19
	069 Move X1, X31
	070 Call Component.get_transform, X0
	071 Compare X20, 0
	072 JumpIfEqual {182}
	073 Move X21, X0
	074 Move X0, X20
	075 Move X1, X31
	076 Call Component.get_transform, X0
	077 Compare X0, 0
	078 JumpIfEqual {183}
	079 Move X1, X31
	080 Call Transform.get_position, X0
	081 Compare X21, 0
	082 JumpIfEqual {180}
	083 Move X0, X21
	084 Move X1, X31
	085 Call Transform.InverseTransformPoint, X0, X1
	086 Move V1, [X19+32]
	087 Move S8, W31
	088 Move S14, W31
	089 NotImplemented "Instruction FNEG not yet implemented."
	090 NotImplemented "Instruction FCMP not yet implemented."
	091 Add S2, S0, S1
	092 Add S3, S1, S1
	093 NotImplemented "Instruction FDIV not yet implemented."
	094 NotImplemented "Instruction FCMP not yet implemented."
	095 Move S14, W31
	096 NotImplemented "Instruction FMIN not yet implemented."
	097 NotImplemented "Instruction FCMP not yet implemented."
	098 NotImplemented "Instruction FABS not yet implemented."
	099 NotImplemented "Instruction FDIV not yet implemented."
	100 NotImplemented "Instruction FCMP not yet implemented."
	101 NotImplemented "Instruction FMIN not yet implemented."
	102 Move X0, X20
	103 Move X1, X31
	104 Call Component.get_transform, X0
	105 Move X21, X0
	106 Move X0, X20
	107 Move X1, X31
	108 Call Component.get_transform, X0
	109 Compare X0, 0
	110 JumpIfEqual {181}
	111 Move X1, X31
	112 Call Transform.get_localPosition, X0
	113 Move V9, V0
	114 Move X0, X20
	115 Move X1, X31
	116 Call Component.get_transform, X0
	117 Compare X0, 0
	118 JumpIfEqual {179}
	119 Move X1, X31
	120 Call Transform.get_localPosition, X0
	121 Move V15, [X19+40]
	122 Move V10, V1
	123 Move S1, 3
	124 Move V0, V8
	125 Call 0x3EB2B50
	126 Compare X21, 0
	127 JumpIfEqual {184}
	128 Move V1, [X19+44]
	129 NotImplemented "Instruction FMIN not yet implemented."
	130 NotImplemented "Instruction FCMP not yet implemented."
	131 Subtract S0, S1, S15
	132 NotImplemented "Instruction FCSEL not yet implemented."
	133 Multiply S0, S1, S0
	134 Add S2, S15, S0
	135 Move X0, X21
	136 Move V0, V9
	137 Move V1, V10
	138 Move X1, X31
	139 Call Transform.set_localPosition, X0, X1
	140 Move X0, X20
	141 Move X1, X31
	142 Call Component.get_transform, X0
	143 Move S0, [X19+48]
	144 Move S1, [X19+52]
	145 NotImplemented "Instruction FMAX not yet implemented."
	146 Move X20, X0
	147 Subtract S1, S1, S0
	148 Multiply S1, S2, S1
	149 Add S0, S0, S1
	150 Multiply S1, S0, S12
	151 Move S0, W31
	152 Move S2, W31
	153 Move X0, X31
	154 Call Quaternion.Internal_FromEulerRad, X0
	155 Compare X20, 0
	156 JumpIfEqual {185}
	157 Move X0, X20
	158 Move X1, X31
	159 Call Transform.set_localRotation, X0, X1
	160 Move X1, [X22]
	161 Add X0, X31, 32
	162 Call Enumerator<Object>.Dispose, X0
	163 Move X20, [X31+160]
	164 Move X19, [X31+168]
	165 Move X22, [X31+144]
	166 Move X21, [X31+152]
	167 Move X30, [X31+128]
	168 Move X23, [X31+136]
	169 Move D9, [X31+112]
	170 Move D8, [X31+120]
	171 Move D11, [X31+96]
	172 Move D10, [X31+104]
	173 Move D13, [X31+80]
	174 Move D12, [X31+88]
	175 Move D15, [X31+64]
	176 Move D14, [X31+72]
	177 Add X31, X31, 176
	178 Return 
	179 Call 0x1C17F20
	180 Call 0x1C17F20
	181 Call 0x1C17F20
	182 Call 0x1C17F20
	183 Call 0x1C17F20
	184 Call 0x1C17F20
	185 Call 0x1C17F20
	186 Call 0x1C17F20
	187 Move X19, X0
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move X0, X19
	190 Call 0x3EB2AD0
	191 Move X20, [X0]
	192 Call 0x3EB2AE0
	193 Move X1, [X22]
	194 Add X0, X31, 32
	195 Call Enumerator<Object>.Dispose, X0
	196 Compare X20, 0
	197 JumpIfEqual {163}
	198 Move X0, X20
	199 Call 0x1C17F18
	200 Move X20, X31
	201 Move X19, X0
	202 Move X1, [X22]
	203 Add X0, X31, 32
	204 Call Enumerator<Object>.Dispose, X0
	205 Compare X20, 0
	206 JumpIfNotEqual {209}
	207 Move X0, X19
	208 Call 0x1D2D690
	209 Move X0, X20
	210 Call 0x1C17F18
	211 Call 0x1991590

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x01D7B6BC LDR X1, [X8]
	0x01D7B6C0 MOV X2, X31
	0x01D7B6C4 LDP X30, X23, [X31], #0x30
	0x01D7B6C8 B 0x3C15C58
	0x01D7B6CC BL 0x1C16F20
	0x01D7B6D0 STP D13, D12, [X31 - 0x50]!
	0x01D7B6D4 STP D11, D10, [X31 + 0x10]
	0x01D7B6D8 STP D9, D8, [X31 + 0x20]
	0x01D7B6DC STP X30, X21, [X31 + 0x30]
	0x01D7B6E0 STP X20, X19, [X31 + 0x40]
	0x01D7B6E4 ADRP X21, 0x265D000
	0x01D7B6E8 ADRP X20, 0x2378000
	0x01D7B6EC LDRB W8, [X21 + 0x946]
	0x01D7B6F0 LDR X20, [X20 + 0x598]
	0x01D7B6F4 MOV X19, X0
	0x01D7B6F8 TBNZ X8, 0x0, 0x1D7B710
	0x01D7B6FC ADRP X0, 0x2378000
	0x01D7B700 LDR X0, [X0 + 0x598]
	0x01D7B704 BL 0x1C16CF4
	0x01D7B708 MOVZ W8, 0x1
	0x01D7B70C STRB W8, [X21 + 0x946]
	0x01D7B710 LDR X0, [X20]
	0x01D7B714 LDR X20, [X19 + 0x40]
	0x01D7B718 LDR W8, [X0 + 0xE0]
	0x01D7B71C CBNZ W8, 0x1D7B724
	0x01D7B720 BL 0x1C16DFC
	0x01D7B724 MOV X0, X20
	0x01D7B728 MOV X1, X31
	0x01D7B72C MOV X2, X31
	0x01D7B730 BL 0x3C354F8
	0x01D7B734 TBZ X0, 0x0, 0x1D7B8FC
	0x01D7B738 MOV X0, X19
	0x01D7B73C MOV X1, X31
	0x01D7B740 BL 0x3C32E90
	0x01D7B744 CBZ X0, 0x1D7BB80
	0x01D7B748 LDP S1, S2, [X19 + 0x4C]
	0x01D7B74C LDR V0, [X19 + 0x48]
	0x01D7B750 MOV X1, X31
	0x01D7B754 BL 0x3C40B58
	0x01D7B758 MOV X0, X19
	0x01D7B75C MOV X1, X31
	0x01D7B760 MOV V8.16B, V1.16B
	0x01D7B764 MOV V9.16B, V2.16B
	0x01D7B768 BL 0x3C32E90
	0x01D7B76C LDR X8, [X19 + 0x40]
	0x01D7B770 CBZ X8, 0x1D7BB80
	0x01D7B774 MOV X20, X0
	0x01D7B778 MOV X0, X8
	0x01D7B77C MOV X1, X31
	0x01D7B780 BL 0x3C32E90
	0x01D7B784 CBZ X0, 0x1D7BB80
	0x01D7B788 MOV X1, X31
	0x01D7B78C BL 0x3C3F58C
	0x01D7B790 CBZ X20, 0x1D7BB80
	0x01D7B794 MOV X0, X20
	0x01D7B798 MOV X1, X31
	0x01D7B79C BL 0x3C40B58
	0x01D7B7A0 ADRP X20, 0x265D000
	0x01D7B7A4 LDRB W8, [X20 + 0xA1E]
	0x01D7B7A8 MOV V10.16B, V1.16B
	0x01D7B7AC MOV V11.16B, V2.16B
	0x01D7B7B0 CBNZ W8, 0x1D7B7C8
	0x01D7B7B4 ADRP X0, 0x2378000
	0x01D7B7B8 LDR X0, [X0 + 0x5A8]
	0x01D7B7BC BL 0x1C16CF4
	0x01D7B7C0 MOVZ W8, 0x1
	0x01D7B7C4 STRB W8, [X20 + 0xA1E]
	0x01D7B7C8 ADRP X20, 0x2378000
	0x01D7B7CC LDR X20, [X20 + 0x5A8]
	0x01D7B7D0 FMUL S0, S9, S9
	0x01D7B7D4 FMUL S1, S8, S8

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+128], X30
	003 Move [X31+136], X21
	004 Move [X31+144], X20
	005 Move [X31+152], X19
	006 Move X1, X31
	007 Move X19, X0
	008 Call Component.get_transform, X0
	009 Compare X0, 0
	010 JumpIfEqual {84}
	011 Add X8, X31, 64
	012 Move X1, X31
	013 Call Transform.get_localToWorldMatrix, X0
	014 Move V0, [X31+64]
	015 Move V1, [X31+80]
	016 Move V2, [X31+96]
	017 Move V3, [X31+112]
	018 Add X0, X31, 0
	019 Move X1, X31
	020 Move [X31], V0
	021 Move [X31+8], V1
	022 Move [X31+32], V2
	023 Move [X31+40], V3
	024 Call Gizmos.set_matrix, X0
	025 Move S0, 1
	026 Move S1, W31
	027 Move S2, W31
	028 Move S3, 1
	029 Move X0, X31
	030 Call Gizmos.set_color, X0
	031 Move X20, 0x265E000
	032 Move W8, [X20+1923]
	033 Compare W8, 0
	034 JumpIfNotEqual {40}
	035 Move X0, 0x2379000
	036 Move X0, [X0+1440]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X20+1923], W8
	040 Move X21, 0x2379000
	041 Move X21, [X21+1440]
	042 Move V3, [X19+32]
	043 Move S4, 1
	044 Move S5, 1
	045 Move X8, [X21]
	046 Add S3, S3, S3
	047 Move X0, X31
	048 Move X8, [X8+184]
	049 Move S0, [X8]
	050 Move S1, [X8+4]
	051 Move V2, [X8+8]
	052 Call Gizmos.DrawWireCube, X0, X1
	053 Move S0, W31
	054 Move S1, 1
	055 Move S2, W31
	056 Move S3, 1
	057 Move X0, X31
	058 Call Gizmos.set_color, X0
	059 Move W8, [X20+1923]
	060 Compare W8, 0
	061 JumpIfNotEqual {67}
	062 Move X0, 0x2379000
	063 Move X0, [X0+1440]
	064 Call 0x1C17CF4
	065 Move W8, 1
	066 Move [X20+1923], W8
	067 Move X8, [X21]
	068 Move V3, [X19+36]
	069 Move S4, 1
	070 Move S5, 1
	071 Move X8, [X8+184]
	072 Add S3, S3, S3
	073 Move X0, X31
	074 Move S0, [X8]
	075 Move S1, [X8+4]
	076 Move V2, [X8+8]
	077 Call Gizmos.DrawWireCube, X0, X1
	078 Move X20, [X31+144]
	079 Move X19, [X31+152]
	080 Move X30, [X31+128]
	081 Move X21, [X31+136]
	082 Add X31, X31, 160
	083 Return 
	084 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D7B7D8 FADD S12, S0, S1
	0x01D7B7DC LDR X0, [X20]
	0x01D7B7E0 FMUL S0, S11, S11
	0x01D7B7E4 FMUL S1, S10, S10
	0x01D7B7E8 FADD S13, S0, S1
	0x01D7B7EC LDR W8, [X0 + 0xE0]
	0x01D7B7F0 CBNZ W8, 0x1D7B7F8
	0x01D7B7F4 BL 0x1C16DFC
	0x01D7B7F8 ADRP X8, 0xFFFFFFFFFED6E000
	0x01D7B7FC LDR V0, [X8 + 0xFE8]
	0x01D7B800 FMUL S1, S12, S13
	0x01D7B804 FSQRT S1, S1
	0x01D7B808 FCMP S1, S0
	0x01D7B80C FMOV S0, W31
	0x01D7B810 B.MI 0x1D7B860
	0x01D7B814 LDR X0, [X20]
	0x01D7B818 FMUL S0, S9, S11
	0x01D7B81C FMUL S2, S8, S10
	0x01D7B820 FADD S0, S0, S2
	0x01D7B824 LDR W8, [X0 + 0xE0]
	0x01D7B828 FDIV S0, S0, S1
	0x01D7B82C FMOV S1, 1
	0x01D7B830 FMOV S2, -1
	0x01D7B834 FMIN S1, S0, S1
	0x01D7B838 FCMP S0, S2
	0x01D7B83C FCSEL S12, S1, S2, PL
	0x01D7B840 CBNZ W8, 0x1D7B848
	0x01D7B844 BL 0x1C16DFC
	0x01D7B848 FCVT S0, S12
	0x01D7B84C BL 0x3EB1B80
	0x01D7B850 ADRP X8, 0xFFFFFFFFFED6F000
	0x01D7B854 LDR V1, [X8 + 0x448]
	0x00000000 INVALID
	0x01D7B85C FMUL S0, S0, S1
	0x01D7B860 ADRP X21, 0x265D000
	0x01D7B864 FMUL S1, S9, S10
	0x01D7B868 FMUL S2, S8, S11
	0x01D7B86C LDRB W8, [X21 + 0xA1F]
	0x01D7B870 LDR X20, [X19 + 0x38]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x265E000
	007 Move X21, 0x237B000
	008 Move X20, 0x237B000
	009 Move W8, [X22+2366]
	010 Move X21, [X21+1976]
	011 Move X20, [X20+1984]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x237B000
	018 Move X0, [X0+1984]
	019 Call 0x1C17CF4
	020 Move X0, 0x237B000
	021 Move X0, [X0+1976]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2366], W8
	025 Move X8, -19451904
	026 Move X9, -19456000
	027 Move V0, [X8+1416]
	028 Move V1, [X9+215]
	029 Move W8, 0x3F800000
	030 Move [X19+72], W8
	031 Move [X19+32], D0
	032 Move [X19+40], V1
	033 Move X0, [X21]
	034 Call 0x1C17F10
	035 Move X1, [X20]
	036 Move X20, X0
	037 Call List`1<Object>..ctor, X0
	038 Move [X19+80], X20
	039 Move X0, X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X1, X31
	045 Move X30, [X31+48]
	046 Call MonoBehaviour..ctor, X0
	047 Return 

