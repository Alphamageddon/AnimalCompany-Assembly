Type: AnimalCompany.ChickenController

Method: AnimalCompany.ChickenController/Phase get_phase()

Disassembly:
	0x01CDFF88 BL 0x1B6EA1C
	0x01CDFF8C SUB X31, X31, 0x40
	0x01CDFF90 STR X30, [X31 + 0x20]
	0x01CDFF94 STP X20, X19, [X31 + 0x30]
	0x01CDFF98 ADRP X20, 0x2544000
	0x01CDFF9C LDRB W8, [X20 + 0x63A]
	0x01CDFFA0 MOV X19, X0
	0x01CDFFA4 TBNZ X8, 0x0, 0x1CDFFBC
	0x01CDFFA8 ADRP X0, 0x2270000
	0x01CDFFAC LDR X0, [X0 + 0xF00]
	0x01CDFFB0 BL 0x1B6E7F0
	0x01CDFFB4 MOVZ W8, 0x1
	0x01CDFFB8 STRB W8, [X20 + 0x63A]
	0x01CDFFBC MOV X0, X19
	0x01CDFFC0 MOV X1, X31
	0x01CDFFC4 BL 0x1CE58BC
	0x01CDFFC8 MOV X0, X19
	0x01CDFFCC MOV X1, X31
	0x01CDFFD0 BL 0x1CE4CE0
	0x01CDFFD4 TBZ X0, 0x0, 0x1CE00A8
	0x01CDFFD8 MOV X0, X19
	0x01CDFFDC BL 0x1CDEF88
	0x01CDFFE0 SUB W8, W0, 0x1
	0x01CDFFE4 CMP W8, 0x4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+60]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x226F000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2271000
	016 Move X0, [X0+3728]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2271000
	023 Move X0, [X0+3736]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_phase(AnimalCompany.ChickenController/Phase value)

Disassembly:
	0x01CDFFE8 B.HI 0x1CE0054
	0x01CDFFEC ADRP X9, 0xFFFFFFFFFEE0D000
	0x01CDFFF0 ADD X9, X9, 0x94E
	0x01CDFFF4 ADR X10, 0x10
	0x01CDFFF8 LDRB W11, [X9, X8, LSL]
	0x01CDFFFC ADD X10, X10, X11, 0x2, LSL
	0x01CE0000 BR X10
	0x01CE0004 MOV X0, X19
	0x01CE0008 BL 0x1CE00B8
	0x01CE000C B 0x1CE0054
	0x01CE0010 MOV X0, X19
	0x01CE0014 BL 0x1CE01D4
	0x01CE0018 B 0x1CE0054
	0x01CE001C LDR X8, [X19]
	0x01CE0020 MOV X0, X19
	0x01CE0024 LDR X9, [X8 + 0x348]
	0x01CE0028 LDR X1, [X8 + 0x350]
	0x01CE002C BLR X9
	0x01CE0030 B 0x1CE0054
	0x01CE0034 MOV X0, X19
	0x01CE0038 BL 0x1CE0370
	0x01CE003C B 0x1CE0054
	0x01CE0040 MOV X0, X19
	0x01CE0044 BL 0x1CE0468

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+60], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x226E000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2270000
	016 Move X0, [X0+3728]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2270000
	023 Move X0, [X0+3744]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: Fusion.NetworkId get_eggID()

Disassembly:
	0x01CE0048 MOV X0, X19
	0x01CE004C MOV W1, W31
	0x01CE0050 BL 0x1CDFAC4
	0x01CE0054 BL 0x1CD2434
	0x01CE0058 TBZ X0, 0x0, 0x1CE00A8
	0x01CE005C LDR X20, [X19 + 0x168]
	0x01CE0060 CBZ X20, 0x1CE00A8
	0x01CE0064 MOV X0, X19
	0x01CE0068 BL 0x1CDEF88
	0x01CE006C ADRP X8, 0x226F000
	0x01CE0070 LDR X8, [X8 + 0xF00]
	0x01CE0074 MOVN X9, 0x0
	0x01CE0078 STR W0, [X31 + 0x18]
	0x01CE007C ADD X0, X31, 0x8
	0x01CE0080 LDR X8, [X8]
	0x01CE0084 MOV X1, X31
	0x01CE0088 STP X8, X9, [X31 + 0x8]
	0x01CE008C BL 0x321AF98
	0x01CE0090 LDR X8, [X20 + 0x40]
	0x01CE0094 LDR X9, [X20 + 0x18]
	0x01CE0098 LDR X2, [X20 + 0x28]
	0x01CE009C MOV X1, X0
	0x01CE00A0 MOV X0, X8
	0x01CE00A4 BLR X9

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+64]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x226E000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2270000
	016 Move X0, [X0+3752]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2270000
	023 Move X0, [X0+3760]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_eggID(Fusion.NetworkId value)

Disassembly:
	0x01CE00A8 LDP X20, X19, [X31 + 0x30]
	0x01CE00AC LDR X30, [X31 + 0x20]
	0x01CE00B0 ADD X31, X31, 0x40
	0x01CE00B4 RET
	0x01CE00B8 SUB X31, X31, 0x30
	0x01CE00BC STP X30, X21, [X31 + 0x10]
	0x01CE00C0 STP X20, X19, [X31 + 0x20]
	0x01CE00C4 ADRP X20, 0x2543000
	0x01CE00C8 LDRB W8, [X20 + 0x63B]
	0x01CE00CC MOV X19, X0
	0x01CE00D0 TBNZ X8, 0x0, 0x1CE0118
	0x01CE00D4 ADRP X0, 0x226F000
	0x01CE00D8 LDR X0, [X0 + 0xF08]
	0x01CE00DC BL 0x1B6E7F0
	0x01CE00E0 ADRP X0, 0x226F000
	0x01CE00E4 LDR X0, [X0 + 0xF10]
	0x01CE00E8 BL 0x1B6E7F0
	0x01CE00EC ADRP X0, 0x226F000
	0x01CE00F0 LDR X0, [X0 + 0xF18]
	0x01CE00F4 BL 0x1B6E7F0
	0x01CE00F8 ADRP X0, 0x226F000
	0x01CE00FC LDR X0, [X0 + 0xE30]
	0x01CE0100 BL 0x1B6E7F0
	0x01CE0104 ADRP X0, 0x226F000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+64], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x226E000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2270000
	016 Move X0, [X0+3752]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2270000
	023 Move X0, [X0+3768]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: UnityEngine.Vector3 get_nestPosition()

Disassembly:
	0x01CE0108 LDR X0, [X0 + 0xDF0]
	0x01CE010C BL 0x1B6E7F0
	0x01CE0110 MOVZ W8, 0x1
	0x01CE0114 STRB W8, [X20 + 0x63B]
	0x01CE0118 MOV X0, X19
	0x01CE011C STR X31, [X31 + 0x8]
	0x01CE0120 BL 0x1CDF108
	0x01CE0124 FMOV S3, 12
	0x01CE0128 ADD X1, X31, 0x8
	0x01CE012C MOV X0, X19
	0x01CE0130 MOV X2, X31
	0x01CE0134 BL 0x1CE8C04
	0x01CE0138 TBZ X0, 0x0, 0x1CE01C0
	0x01CE013C LDR X20, [X31 + 0x8]
	0x01CE0140 CBZ X20, 0x1CE01D0
	0x01CE0144 LDR W8, [X20 + 0x18]
	0x01CE0148 CMP W8, 0x2
	0x01CE014C B.LT 0x1CE019C
	0x01CE0150 ADRP X8, 0x226F000
	0x01CE0154 LDR X8, [X8 + 0xF10]
	0x01CE0158 LDR X0, [X8]
	0x01CE015C BL 0x1B6EA0C
	0x01CE0160 ADRP X8, 0x226F000
	0x01CE0164 LDR X8, [X8 + 0xF08]
	0x01CE0168 MOV X1, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move S0, [X8+68]
	007 Move S1, [X8+72]
	008 Move V2, [X8+76]
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x226E000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x2270000
	018 Move X0, [X0+3776]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x2270000
	025 Move X0, [X0+3784]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set_nestPosition(UnityEngine.Vector3 value)

Disassembly:
	0x01CE016C MOV X3, X31
	0x01CE0170 MOV X21, X0
	0x01CE0174 LDR X2, [X8]
	0x01CE0178 BL 0x27B63FC
	0x01CE017C ADRP X8, 0x226F000
	0x01CE0180 LDR X8, [X8 + 0xF18]
	0x01CE0184 MOV X0, X20
	0x01CE0188 MOV X1, X21
	0x01CE018C LDR X2, [X8]
	0x01CE0190 BL 0x2E482B8
	0x01CE0194 LDR X20, [X31 + 0x8]
	0x01CE0198 CBZ X20, 0x1CE01D0
	0x01CE019C ADRP X8, 0x226F000
	0x01CE01A0 LDR X8, [X8 + 0xDF0]
	0x01CE01A4 MOV X0, X20
	0x01CE01A8 MOV W1, W31
	0x01CE01AC LDR X2, [X8]
	0x01CE01B0 BL 0x2E46254
	0x01CE01B4 MOV X1, X0
	0x01CE01B8 MOV X0, X19
	0x01CE01BC BL 0x1CE05EC
	0x01CE01C0 LDP X20, X19, [X31 + 0x20]
	0x01CE01C4 LDP X30, X21, [X31 + 0x10]
	0x01CE01C8 ADD X31, X31, 0x30
	0x01CE01CC RET

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move [X8+68], S0
	007 Move [X8+76], S1
	008 Move [X8+76], S2
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 
	012 Move X0, 0x226E000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x2270000
	018 Move X0, [X0+3776]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x2270000
	025 Move X0, [X0+3792]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: Fusion.TickTimer get__timerToSpawnEgg()

Disassembly:
	0x01CE01D0 BL 0x1B6EA1C
	0x01CE01D4 SUB X31, X31, 0x30
	0x01CE01D8 STP X30, X21, [X31 + 0x10]
	0x01CE01DC STP X20, X19, [X31 + 0x20]
	0x01CE01E0 ADRP X21, 0x2543000
	0x01CE01E4 ADRP X20, 0x226D000
	0x01CE01E8 LDRB W8, [X21 + 0x63C]
	0x01CE01EC LDR X20, [X20 + 0x478]
	0x01CE01F0 MOV X19, X0
	0x01CE01F4 TBNZ X8, 0x0, 0x1CE0230
	0x01CE01F8 ADRP X0, 0x226F000
	0x01CE01FC LDR X0, [X0 + 0xF20]
	0x01CE0200 BL 0x1B6E7F0
	0x01CE0204 ADRP X0, 0x226F000
	0x01CE0208 LDR X0, [X0 + 0xE30]
	0x01CE020C BL 0x1B6E7F0
	0x01CE0210 ADRP X0, 0x226F000
	0x01CE0214 LDR X0, [X0 + 0xDF0]
	0x01CE0218 BL 0x1B6E7F0
	0x01CE021C ADRP X0, 0x226D000
	0x01CE0220 LDR X0, [X0 + 0x478]
	0x01CE0224 BL 0x1B6E7F0
	0x01CE0228 MOVZ W8, 0x1
	0x01CE022C STRB W8, [X21 + 0x63C]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+80]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x226E000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2270000
	016 Move X0, [X0+3800]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2270000
	023 Move X0, [X0+3808]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set__timerToSpawnEgg(Fusion.TickTimer value)

Disassembly:
	0x01CE0230 LDR X0, [X20]
	0x01CE0234 STP X31, X31, [X31]
	0x01CE0238 LDR X20, [X19 + 0x140]
	0x01CE023C LDR W8, [X0 + 0xE0]
	0x01CE0240 CBNZ W8, 0x1CE0248
	0x01CE0244 BL 0x1B6E8F8
	0x01CE0248 MOV X0, X20
	0x01CE024C MOV X1, X31
	0x01CE0250 MOV X2, X31
	0x01CE0254 BL 0x3AA0AF0
	0x01CE0258 TBNZ X0, 0x0, 0x1CE0288
	0x01CE025C LDR X0, [X19 + 0x140]
	0x01CE0260 CBZ X0, 0x1CE036C
	0x01CE0264 MOV X1, X31
	0x01CE0268 BL 0x1CB47E0
	0x01CE026C TBZ X0, 0x0, 0x1CE02A0
	0x01CE0270 LDR X8, [X19]
	0x01CE0274 MOV X0, X19
	0x01CE0278 MOV X1, X31
	0x01CE027C LDR X9, [X8 + 0x338]
	0x01CE0280 LDR X2, [X8 + 0x340]
	0x01CE0284 BLR X9
	0x01CE0288 MOV X0, X19
	0x01CE028C BL 0x1CDFC10

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+80], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x226E000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2270000
	016 Move X0, [X0+3800]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2270000
	023 Move X0, [X0+3816]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: UnityEngine.Vector3 get__attackPosition()

Disassembly:
	0x01CE0290 LDP X20, X19, [X31 + 0x20]
	0x01CE0294 LDP X30, X21, [X31 + 0x10]
	0x01CE0298 ADD X31, X31, 0x30
	0x01CE029C RET
	0x01CE02A0 MOV X0, X19
	0x01CE02A4 BL 0x1CDF108
	0x01CE02A8 FMOV S3, 6
	0x01CE02AC ADD X1, X31, 0x8
	0x01CE02B0 MOV X0, X19
	0x01CE02B4 MOV X2, X31
	0x01CE02B8 BL 0x1CE8C04
	0x01CE02BC TBZ X0, 0x0, 0x1CE02E8
	0x01CE02C0 LDR X0, [X31 + 0x8]
	0x01CE02C4 CBZ X0, 0x1CE036C
	0x01CE02C8 ADRP X8, 0x226F000
	0x01CE02CC LDR X1, [X19 + 0x140]
	0x01CE02D0 LDR X8, [X8 + 0xF20]
	0x01CE02D4 LDR X2, [X8]
	0x01CE02D8 BL 0x2E468A0
	0x01CE02DC TBZ X0, 0x0, 0x1CE032C
	0x01CE02E0 LDR X1, [X19 + 0x140]
	0x01CE02E4 B 0x1CE0360
	0x01CE02E8 MOV X0, X19
	0x01CE02EC BL 0x1CDF108
	0x01CE02F0 FMOV S3, 12
	0x01CE02F4 ADD X1, X31, 0x0
	0x01CE02F8 MOV X0, X19
	0x01CE02FC MOV X2, X31
	0x01CE0300 BL 0x1CE8C04
	0x01CE0304 TBNZ X0, 0x0, 0x1CE0290
	0x01CE0308 MOV X0, X19
	0x01CE030C BL 0x1CDF458
	0x01CE0310 ADRP X8, 0xFFFFFFFFFEDC9000
	0x01CE0314 LDR V1, [X8 + 0xAB0]
	0x01CE0318 FCMP S0, S1
	0x01CE031C B.MI 0x1CE0288
	0x01CE0320 MOV X0, X19
	0x01CE0324 BL 0x1CDFCE0
	0x01CE0328 B 0x1CE0290
	0x01CE032C LDR X20, [X31 + 0x8]
	0x01CE0330 CBZ X20, 0x1CE036C
	0x01CE0334 LDR W1, [X20 + 0x18]
	0x01CE0338 MOV W0, W31
	0x01CE033C MOV X2, X31
	0x01CE0340 BL 0x3A98D10
	0x01CE0344 ADRP X8, 0x226F000
	0x01CE0348 LDR X8, [X8 + 0xDF0]
	0x01CE034C MOV W1, W0
	0x01CE0350 MOV X0, X20
	0x01CE0354 LDR X2, [X8]
	0x01CE0358 BL 0x2E46254
	0x01CE035C MOV X1, X0
	0x01CE0360 MOV X0, X19
	0x01CE0364 BL 0x1CE06AC
	0x01CE0368 B 0x1CE0290
	0x01CE036C BL 0x1B6EA1C
	0x01CE0370 STR X30, [X31 - 0x20]!
	0x01CE0374 STP X20, X19, [X31 + 0x10]
	0x01CE0378 ADRP X20, 0x2543000
	0x01CE037C LDRB W8, [X20 + 0x63E]
	0x01CE0380 MOV X19, X0

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X1, X31
	011 Move X19, X0
	012 Call Component.get_transform, X0
	013 Compare X0, 0
	014 JumpIfEqual {74}
	015 Move X1, X31
	016 Call Transform.get_position, X0
	017 Move X0, X19
	018 Move X1, X31
	019 Move V8, V0
	020 Move V9, V1
	021 Move V10, V2
	022 Call Component.get_transform, X0
	023 Compare X0, 0
	024 JumpIfEqual {74}
	025 Move X1, X31
	026 Call Transform.get_forward, X0
	027 Move X20, 0x2544000
	028 Move W8, [X20+1090]
	029 Move V11, V0
	030 Move V12, V1
	031 Move V13, V2
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0x226E000
	035 Move X0, [X0+1152]
	036 Call 0x1B6F7F0
	037 Move W8, 1
	038 Move [X20+1090], W8
	039 Move X8, [X19+184]
	040 Compare X8, 0
	041 JumpIfEqual {74}
	042 Move X9, 0x226E000
	043 Move X9, [X9+1152]
	044 Move V3, [X8+76]
	045 Move X8, -19095552
	046 Move V4, [X8+2644]
	047 Move X9, [X9]
	048 Move X20, [X31+64]
	049 Move X19, [X31+72]
	050 Move X30, [X31+48]
	051 Move X9, [X9+184]
	052 Move S1, [X9+28]
	053 Move S0, [X9+32]
	054 Move V2, [X9+24]
	055 Add S0, S13, S0
	056 Add S1, S12, S1
	057 Add S2, S11, S2
	058 Multiply S2, S2, S3
	059 Multiply S1, S1, S3
	060 Multiply S0, S0, S3
	061 Multiply S2, S2, S4
	062 Multiply S1, S1, S4
	063 Multiply S3, S0, S4
	064 Add S0, S8, S2
	065 Add S1, S9, S1
	066 Add S2, S10, S3
	067 Move D9, [X31+32]
	068 Move D8, [X31+40]
	069 Move D11, [X31+16]
	070 Move D10, [X31+24]
	071 Move D13, [X31+80]
	072 Move D12, [X31+88]
	073 Return X0
	074 Call 0x1B6FA1C

Method: System.Boolean GetIsEggStolen()

Disassembly:
	0x01CE0384 TBNZ X8, 0x0, 0x1CE03A8
	0x01CE0388 ADRP X0, 0x226F000
	0x01CE038C LDR X0, [X0 + 0xE30]
	0x01CE0390 BL 0x1B6E7F0
	0x01CE0394 ADRP X0, 0x226F000
	0x01CE0398 LDR X0, [X0 + 0xDF0]
	0x01CE039C BL 0x1B6E7F0
	0x01CE03A0 MOVZ W8, 0x1
	0x01CE03A4 STRB W8, [X20 + 0x63E]
	0x01CE03A8 MOV X0, X19
	0x01CE03AC STR X31, [X31 + 0x8]
	0x01CE03B0 BL 0x1CDF108
	0x01CE03B4 FMOV S3, 12
	0x01CE03B8 ADD X1, X31, 0x8
	0x01CE03BC MOV X0, X19
	0x01CE03C0 MOV X2, X31
	0x01CE03C4 BL 0x1CE8C04
	0x01CE03C8 TBZ X0, 0x0, 0x1CE040C
	0x01CE03CC LDR X20, [X31 + 0x8]
	0x01CE03D0 CBZ X20, 0x1CE0464
	0x01CE03D4 LDR W1, [X20 + 0x18]
	0x01CE03D8 MOV W0, W31
	0x01CE03DC MOV X2, X31
	0x01CE03E0 BL 0x3A98D10
	0x01CE03E4 ADRP X8, 0x226F000
	0x01CE03E8 LDR X8, [X8 + 0xDF0]
	0x01CE03EC MOV W1, W0
	0x01CE03F0 MOV X0, X20
	0x01CE03F4 LDR X2, [X8]
	0x01CE03F8 BL 0x2E46254
	0x01CE03FC MOV X1, X0
	0x01CE0400 MOV X0, X19
	0x01CE0404 BL 0x1CE06AC
	0x01CE0408 B 0x1CE0458
	0x01CE040C MOV X0, X19
	0x01CE0410 BL 0x1CDF458
	0x01CE0414 ADRP X8, 0xFFFFFFFFFEDC9000
	0x01CE0418 LDR V1, [X8 + 0xAB0]
	0x01CE041C FCMP S0, S1
	0x01CE0420 B.PL 0x1CE0430
	0x01CE0424 MOV X0, X19
	0x01CE0428 BL 0x1CDFC10
	0x01CE042C B 0x1CE0458
	0x01CE0430 MOV X0, X19
	0x01CE0434 BL 0x1CDF458
	0x01CE0438 FMOV S1, 12
	0x01CE043C FCMP S0, S1
	0x01CE0440 B.PL 0x1CE0458
	0x01CE0444 MOV X0, X19
	0x01CE0448 BL 0x1CDF384
	0x01CE044C TBZ X0, 0x0, 0x1CE0458
	0x01CE0450 MOV X0, X19
	0x01CE0454 BL 0x1CE0EB0

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x2544000
	009 Move X20, 0x226E000
	010 Move W8, [X21+1589]
	011 Move X20, [X20+1144]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x226E000
	018 Move X0, [X0+1144]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X21+1589], W8
	022 Move X0, [X20]
	023 Move X20, [X19+440]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1B6F8F8
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {37}
	036 Move W0, 1
	037 Move X0, X19
	038 Call ChickenController.get_nestPosition, X0
	039 Move X0, [X19+440]
	040 Compare X0, 0
	041 JumpIfEqual {66}
	042 Move X1, X31
	043 Move V8, V0
	044 Move V9, V1
	045 Move V10, V2
	046 Call Transform.get_position, X0
	047 Subtract S0, S8, S0
	048 Subtract S1, S9, S1
	049 Subtract S2, S10, S2
	050 Multiply S0, S0, S0
	051 Multiply S1, S1, S1
	052 Multiply S2, S2, S2
	053 Add S0, S0, S1
	054 Add S0, S2, S0
	055 Move S1, 1
	056 NotImplemented "Instruction FCMP not yet implemented."
	057 NotImplemented "Instruction CSET not yet implemented."
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Move D9, [X31+16]
	063 Move D8, [X31+24]
	064 Move V10, [X31+64]
	065 Return X0
	066 Call 0x1B6FA1C

Method: System.Single get_distanceToNest()

Disassembly:
	0x01CE0458 LDP X20, X19, [X31 + 0x10]
	0x01CE045C LDR X30, [X31], #0x20
	0x01CE0460 RET
	0x01CE0464 BL 0x1B6EA1C
	0x01CE0468 STP D13, D12, [X31 - 0x50]!
	0x01CE046C STP D11, D10, [X31 + 0x10]
	0x01CE0470 STP D9, D8, [X31 + 0x20]
	0x01CE0474 STR X30, [X31 + 0x30]
	0x01CE0478 STP X20, X19, [X31 + 0x40]
	0x01CE047C ADRP X20, 0x2543000
	0x01CE0480 LDRB W8, [X20 + 0x63F]
	0x01CE0484 MOV X19, X0
	0x01CE0488 TBNZ X8, 0x0, 0x1CE04AC
	0x01CE048C ADRP X0, 0x226F000
	0x01CE0490 LDR X0, [X0 + 0xE30]
	0x01CE0494 BL 0x1B6E7F0
	0x01CE0498 ADRP X0, 0x226F000
	0x01CE049C LDR X0, [X0 + 0xDF0]
	0x01CE04A0 BL 0x1B6E7F0
	0x01CE04A4 MOVZ W8, 0x1
	0x01CE04A8 STRB W8, [X20 + 0x63F]
	0x01CE04AC ADD X1, X31, 0x38
	0x01CE04B0 MOV X0, X19
	0x01CE04B4 MOV X2, X31
	0x01CE04B8 STR X31, [X31 + 0x38]
	0x01CE04BC BL 0x1CE85FC
	0x01CE04C0 TBZ X0, 0x0, 0x1CE0504
	0x01CE04C4 LDR X20, [X31 + 0x38]
	0x01CE04C8 CBZ X20, 0x1CE05E8
	0x01CE04CC LDR W1, [X20 + 0x18]
	0x01CE04D0 MOV W0, W31
	0x01CE04D4 MOV X2, X31
	0x01CE04D8 BL 0x3A98D10
	0x01CE04DC ADRP X8, 0x226F000
	0x01CE04E0 LDR X8, [X8 + 0xDF0]
	0x01CE04E4 MOV W1, W0
	0x01CE04E8 MOV X0, X20
	0x01CE04EC LDR X2, [X8]
	0x01CE04F0 BL 0x2E46254
	0x01CE04F4 MOV X1, X0
	0x01CE04F8 MOV X0, X19
	0x01CE04FC BL 0x1CE06AC
	0x01CE0500 B 0x1CE05D0
	0x01CE0504 MOV X0, X19
	0x01CE0508 MOV X1, X31
	0x01CE050C BL 0x3A9B084
	0x01CE0510 CBZ X0, 0x1CE05E8

ISIL:
	001 Move [X31-64], D13
	002 Move [X31-56], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X19
	009 Move X1, X31
	010 Move X19, X0
	011 Call Component.get_transform, X0
	012 Compare X0, 0
	013 JumpIfEqual {58}
	014 Move X1, X31
	015 Call Transform.get_position, X0
	016 Move X0, X19
	017 Move V8, V0
	018 Move V9, V1
	019 Move V10, V2
	020 Call ChickenController.get_nestPosition, X0
	021 Move X19, 0x2544000
	022 Move W8, [X19+1286]
	023 Move V11, V0
	024 Move V12, V1
	025 Move V13, V2
	026 Compare W8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, 0x226E000
	029 Move X0, [X0+1160]
	030 Call 0x1B6F7F0
	031 Move W8, 1
	032 Move [X19+1286], W8
	033 Move X8, 0x226E000
	034 Move X8, [X8+1160]
	035 Subtract S11, S8, S11
	036 Subtract S9, S9, S12
	037 Subtract S8, S10, S13
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1B6F8F8
	043 Multiply S0, S11, S11
	044 Multiply S1, S9, S9
	045 Add S0, S0, S1
	046 Multiply S1, S8, S8
	047 Move X30, [X31+48]
	048 Move X19, [X31+56]
	049 Move D9, [X31+32]
	050 Move D8, [X31+40]
	051 Move D11, [X31+16]
	052 Move D10, [X31+24]
	053 Add S0, S1, S0
	054 NotImplemented "Instruction FSQRT not yet implemented."
	055 Move D13, [X31+64]
	056 Move D12, [X31+72]
	057 Return V0
	058 Call 0x1B6FA1C

Method: UnityEngine.Vector3 get__eggSpawnPosition()

Disassembly:
	0x01CE0514 MOV X1, X31
	0x01CE0518 BL 0x3AA7658
	0x01CE051C MOV X0, X19
	0x01CE0520 MOV V8.16B, V0.16B
	0x01CE0524 MOV V9.16B, V1.16B
	0x01CE0528 MOV V10.16B, V2.16B
	0x01CE052C BL 0x1CDF108
	0x01CE0530 ADRP X20, 0x2543000
	0x01CE0534 LDRB W8, [X20 + 0x506]
	0x01CE0538 MOV V11.16B, V0.16B
	0x01CE053C MOV V12.16B, V1.16B
	0x01CE0540 MOV V13.16B, V2.16B
	0x01CE0544 CBNZ W8, 0x1CE055C
	0x01CE0548 ADRP X0, 0x226D000
	0x01CE054C LDR X0, [X0 + 0x488]
	0x01CE0550 BL 0x1B6E7F0
	0x01CE0554 MOVZ W8, 0x1
	0x01CE0558 STRB W8, [X20 + 0x506]
	0x01CE055C ADRP X8, 0x226D000
	0x01CE0560 LDR X8, [X8 + 0x488]
	0x01CE0564 FSUB S11, S8, S11
	0x01CE0568 FSUB S9, S9, S12
	0x01CE056C FSUB S8, S10, S13
	0x01CE0570 LDR X0, [X8]
	0x01CE0574 LDR W8, [X0 + 0xE0]
	0x01CE0578 CBNZ W8, 0x1CE0580
	0x01CE057C BL 0x1B6E8F8
	0x01CE0580 FMUL S0, S11, S11
	0x01CE0584 FMUL S1, S9, S9
	0x01CE0588 FMUL S2, S8, S8
	0x01CE058C FADD S0, S0, S1
	0x01CE0590 FADD S0, S2, S0
	0x01CE0594 FSQRT S0, S0

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Call ChickenController.get_nestPosition, X0
	007 Move X19, 0x2544000
	008 Move W8, [X19+1090]
	009 Move V8, V0
	010 Move V9, V1
	011 Move V10, V2
	012 Compare W8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, 0x226E000
	015 Move X0, [X0+1152]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X19+1090], W8
	019 Move X8, 0x226E000
	020 Move X8, [X8+1152]
	021 Move X9, -19095552
	022 Move V0, [X9+2492]
	023 Move X30, [X31+32]
	024 Move X19, [X31+40]
	025 Move X8, [X8]
	026 Move X8, [X8+184]
	027 Move S1, [X8+24]
	028 Move S2, [X8+28]
	029 Move V3, [X8+32]
	030 Multiply S1, S1, S0
	031 Multiply S2, S2, S0
	032 Multiply S3, S3, S0
	033 Add S0, S8, S1
	034 Add S1, S9, S2
	035 Move D9, [X31+16]
	036 Move D8, [X31+24]
	037 Add S2, S10, S3
	038 Move V10, [X31+48]
	039 Return X0

Method: UnityEngine.Quaternion get__eggSpawnRotation()

Disassembly:
	0x01CE0598 FMOV S1, 6
	0x01CE059C FCMP S0, S1
	0x01CE05A0 B.PL 0x1CE05B0
	0x01CE05A4 MOV X0, X19
	0x01CE05A8 BL 0x1CDF384
	0x01CE05AC TBZ X0, 0x0, 0x1CE05C8
	0x01CE05B0 LDR X8, [X19]
	0x01CE05B4 MOV X0, X19
	0x01CE05B8 LDR X9, [X8 + 0x328]
	0x01CE05BC LDR X1, [X8 + 0x330]
	0x01CE05C0 BLR X9
	0x01CE05C4 B 0x1CE05D0
	0x01CE05C8 MOV X0, X19
	0x01CE05CC BL 0x1CDFCE0
	0x01CE05D0 LDP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, 0x43B40000
	003 Move S0, W31
	004 Move S1, W8
	005 Move X0, X31
	006 Call Random.Range, V0, V1
	007 Move X8, -19095552
	008 Move V2, [X8+2804]
	009 Move V1, V0
	010 Move S0, W31
	011 Move X0, X31
	012 Multiply S1, S1, S2
	013 Move S2, W31
	014 Move X30, [X31+16]
	015 Call Quaternion.Internal_FromEulerRad, X0
	016 Return X0

Method: System.Void HandlePhaseChanged()

Disassembly:
	0x01CE05D4 LDR X30, [X31 + 0x30]
	0x01CE05D8 LDP D9, D8, [X31 + 0x20]
	0x01CE05DC LDP D11, D10, [X31 + 0x10]
	0x01CE05E0 LDP D13, D12, [X31], #0x50
	0x01CE05E4 RET
	0x01CE05E8 BL 0x1B6EA1C
	0x01CE05EC STR X30, [X31 - 0x20]!
	0x01CE05F0 STP X20, X19, [X31 + 0x10]
	0x01CE05F4 MOV X20, X1
	0x01CE05F8 MOVZ W1, 0x2
	0x01CE05FC MOV X19, X0
	0x01CE0600 BL 0x1CDEFE8
	0x01CE0604 LDR X8, [X19]
	0x01CE0608 MOV X0, X19
	0x01CE060C MOV X1, X20
	0x01CE0610 LDR X9, [X8 + 0x338]
	0x01CE0614 LDR X2, [X8 + 0x340]
	0x01CE0618 BLR X9
	0x01CE061C LDR X9, [X19 + 0xB8]
	0x01CE0620 CBZ X9, 0x1CE06A4
	0x01CE0624 LDR X8, [X9 + 0x58]
	0x01CE0628 CBZ X8, 0x1CE06A4
	0x01CE062C LDR W10, [X8 + 0x18]
	0x01CE0630 CBZ W10, 0x1CE06A8
	0x01CE0634 LDR X9, [X9 + 0x60]
	0x01CE0638 CBZ X9, 0x1CE06A4
	0x01CE063C LDR W10, [X9 + 0x18]
	0x01CE0640 CBZ W10, 0x1CE06A8
	0x01CE0644 LDR X10, [X19]
	0x01CE0648 LDR V1, [X8 + 0x20]
	0x01CE064C LDR V2, [X9 + 0x20]
	0x01CE0650 FMOV S0, W31
	0x01CE0654 LDR X8, [X10 + 0x2A8]
	0x01CE0658 LDR X2, [X10 + 0x2B0]
	0x01CE065C MOVZ W1, 0x1
	0x01CE0660 MOV X0, X19
	0x01CE0664 BLR X8
	0x01CE0668 LDR X8, [X19 + 0xB8]
	0x01CE066C CBZ X8, 0x1CE06A4
	0x01CE0670 LDR X20, [X8 + 0xA0]
	0x01CE0674 MOV X0, X19
	0x01CE0678 MOV X1, X31
	0x01CE067C BL 0x3A9B084
	0x01CE0680 CBZ X0, 0x1CE06A4
	0x01CE0684 MOV X1, X31
	0x01CE0688 BL 0x3AA7658
	0x01CE068C MOV X0, X20
	0x01CE0690 LDP X20, X19, [X31 + 0x10]
	0x01CE0694 FMOV S3, 1
	0x01CE0698 MOV X1, X31
	0x01CE069C LDR X30, [X31], #0x20
	0x01CE06A0 B 0x1CC181C
	0x01CE06A4 BL 0x1B6EA1C
	0x01CE06A8 BL 0x1B6EA24
	0x01CE06AC STR X30, [X31 - 0x20]!
	0x01CE06B0 STP X20, X19, [X31 + 0x10]
	0x01CE06B4 MOV X20, X1
	0x01CE06B8 MOVZ W1, 0x3
	0x01CE06BC MOV X19, X0
	0x01CE06C0 BL 0x1CDEFE8
	0x01CE06C4 LDR X8, [X19 + 0xB8]
	0x01CE06C8 CBZ X8, 0x1CE0780
	0x01CE06CC LDR V0, [X8 + 0x28]
	0x01CE06D0 MOV X0, X19
	0x01CE06D4 MOV X1, X31
	0x01CE06D8 BL 0x1CE48AC
	0x01CE06DC LDR X8, [X19]
	0x01CE06E0 MOV X0, X19
	0x01CE06E4 MOV X1, X20
	0x01CE06E8 LDR X9, [X8 + 0x338]
	0x01CE06EC LDR X2, [X8 + 0x340]
	0x01CE06F0 BLR X9
	0x01CE06F4 CBZ X20, 0x1CE0780
	0x01CE06F8 MOV X0, X20
	0x01CE06FC MOV X1, X31
	0x01CE0700 BL 0x3A9B084
	0x01CE0704 CBZ X0, 0x1CE0780
	0x01CE0708 MOV X1, X31
	0x01CE070C BL 0x3AA7658
	0x01CE0710 MOV X0, X19
	0x01CE0714 MOV X1, X31
	0x01CE0718 BL 0x1CE4C60

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Call ChickenController.get_phase, X0
	007 Subtract W8, W0, 1
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X9, -18821120
	010 Add X9, X9, 2377
	011 NotImplemented "Instruction ADR not yet implemented."
	012 Move W11, [X9]
	013 Add X10, X10, X11
	014 CallNoReturn X10
	015 Move X0, [X19+192]
	016 Compare X0, 0
	017 JumpIfEqual {90}
	018 Move X8, [X0]
	019 Move X9, [X8+440]
	020 Move X1, [X8+448]
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move X0, [X19+192]
	023 Compare X0, 0
	024 JumpIfEqual {90}
	025 Move X8, [X0]
	026 Move X9, [X8+472]
	027 Move X1, [X8+480]
	028 Move X0, [X19+192]
	029 Compare X0, 0
	030 JumpIfEqual {90}
	031 Move X8, [X0]
	032 Move X9, [X8+456]
	033 Move X1, [X8+464]
	034 Move S0, 1
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X0, X19
	037 Call ChickenController.get_phase, X0
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move W20, 1
	040 Move X0, X19
	041 Call ChickenController.get_phase, X0
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSET not yet implemented."
	044 Move X8, [X19+400]
	045 Compare X8, 0
	046 JumpIfEqual {90}
	047 Move X0, [X8+144]
	048 Compare X0, 0
	049 JumpIfEqual {90}
	050 Move W1, W20
	051 Move X2, X31
	052 Call Renderer.set_enabled, X0, X1
	053 Move X0, [X19+400]
	054 Compare X0, 0
	055 JumpIfEqual {90}
	056 Move X8, [X0]
	057 Move W1, W20
	058 Move X9, [X8+424]
	059 Move X2, [X8+432]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X20, [X19+400]
	062 Move X0, X19
	063 Call ChickenController.get_phase, X0
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, X19
	066 Call ChickenController.get_phase, X0
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W21, 1
	069 Move X0, X19
	070 Call ChickenController.get_phase, X0
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CSET not yet implemented."
	073 Move X0, X19
	074 Call ChickenController.get_phase, X0
	075 Compare X20, 0
	076 JumpIfEqual {90}
	077 Move X8, -19095552
	078 Move V0, [X8+2352]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X0, X20
	081 Move X20, [X31+16]
	082 Move X19, [X31+24]
	083 Move S1, 1
	084 NotImplemented "Instruction FCSEL not yet implemented."
	085 Move W1, W21
	086 Move X30, [X31+32]
	087 Move X21, [X31+40]
	088 Call ChickenView.PlayRunningSound, X0, X1, V0
	089 Return 
	090 Call 0x1B6FA1C

Method: System.Void HandleEggIDChanged()

Disassembly:
	0x01CE07B8 MOV X19, X0
	0x01CE07BC TBNZ X8, 0x0, 0x1CE07D4
	0x01CE07C0 ADRP X0, 0x226D000
	0x01CE07C4 LDR X0, [X0 + 0x478]
	0x01CE07C8 BL 0x1B6E7F0
	0x01CE07CC MOVZ W8, 0x1
	0x01CE07D0 STRB W8, [X20 + 0x63D]
	0x01CE07D4 LDR X0, [X21]
	0x01CE07D8 LDR X20, [X19 + 0x140]
	0x01CE07DC LDR W8, [X0 + 0xE0]
	0x01CE07E0 CBNZ W8, 0x1CE07E8
	0x01CE07E4 BL 0x1B6E8F8
	0x01CE07E8 MOV X0, X20
	0x01CE07EC MOV X1, X31
	0x01CE07F0 MOV X2, X31
	0x01CE07F4 BL 0x3A9D6EC
	0x01CE07F8 TBZ X0, 0x0, 0x1CE0878
	0x01CE07FC LDR X0, [X19 + 0x140]
	0x01CE0800 CBZ X0, 0x1CE0EAC
	0x01CE0804 MOV X1, X31
	0x01CE0808 BL 0x1CB47E0
	0x01CE080C TBZ X0, 0x0, 0x1CE082C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move [X31+8], X31
	005 Move X20, [X0+56]
	006 Move X19, X0
	007 Call ChickenController.get_eggID, X0
	008 Compare X20, 0
	009 JumpIfEqual {29}
	010 And X1, X0, 0
	011 Add X2, X31, 8
	012 Move X0, X20
	013 Move X3, X31
	014 Call NetworkRunner.TryFindObject, X0, X1, X2
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {25}
	019 Move X0, [X31+8]
	020 Compare X0, 0
	021 JumpIfEqual {29}
	022 Move X1, X31
	023 Call Component.get_transform, X0
	024 Move [X19+440], X0
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 
	029 Call 0x1B6FA1C

Method: System.Void OnDestroy()

Disassembly:
	0x01CE0810 LDR X8, [X19]
	0x01CE0814 MOV X0, X19
	0x01CE0818 MOV X1, X31
	0x01CE081C LDR X9, [X8 + 0x338]
	0x01CE0820 LDR X2, [X8 + 0x340]
	0x01CE0824 BLR X9
	0x01CE0828 B 0x1CE0850
	0x01CE082C MOV X0, X19
	0x01CE0830 BL 0x1CDF384
	0x01CE0834 TBNZ X0, 0x0, 0x1CE0878
	0x01CE0838 MOV X0, X19
	0x01CE083C BL 0x1CDF458
	0x01CE0840 MOVZ W8, 0x420C0000
	0x01CE0844 FMOV S1, W8
	0x01CE0848 FCMP S0, S1
	0x01CE084C B.LE 0x1CE0878
	0x01CE0850 MOV X0, X19
	0x01CE0854 LDP X20, X19, [X31 + 0x80]
	0x01CE0858 LDP X22, X21, [X31 + 0x70]
	0x01CE085C LDP X30, X23, [X31 + 0x60]
	0x01CE0860 LDP D9, D8, [X31 + 0x50]
	0x01CE0864 LDP D11, D10, [X31 + 0x40]
	0x01CE0868 LDP D13, D12, [X31 + 0x30]
	0x01CE086C LDP D15, D14, [X31 + 0x20]
	0x01CE0870 ADD X31, X31, 0x90
	0x01CE0874 B 0x1CDFCE0
	0x01CE0878 MOV X0, X19
	0x01CE087C MOV X1, X31
	0x01CE0880 BL 0x1CE6A44
	0x01CE0884 MOV X0, X19
	0x01CE0888 MOV X1, X31
	0x01CE088C BL 0x1CE484C
	0x01CE0890 MOV X0, X19
	0x01CE0894 MOV X1, X31
	0x01CE0898 MOV V8.16B, V0.16B
	0x01CE089C BL 0x1CE4CC4
	0x01CE08A0 FADD S0, S8, S0
	0x01CE08A4 MOV X0, X19
	0x01CE08A8 MOV X1, X31
	0x01CE08AC BL 0x1CE48AC
	0x01CE08B0 LDR X0, [X21]
	0x01CE08B4 LDR X20, [X19 + 0x140]
	0x01CE08B8 LDR W8, [X0 + 0xE0]
	0x01CE08BC CBNZ W8, 0x1CE08C4
	0x01CE08C0 BL 0x1B6E8F8
	0x01CE08C4 MOV X0, X20
	0x01CE08C8 MOV X1, X31
	0x01CE08CC MOV X2, X31
	0x01CE08D0 BL 0x3A9D6EC
	0x01CE08D4 TBZ X0, 0x0, 0x1CE0A10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2544000
	006 Move X21, 0x226F000
	007 Move W8, [X20+1590]
	008 Move X21, [X21+448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x226F000
	015 Move X0, [X0+448]
	016 Call 0x1B6F7F0
	017 Move X0, 0x226E000
	018 Move X0, [X0+1144]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X20+1590], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1B6F8F8
	027 Compare X19, 0
	028 JumpIfEqual {67}
	029 Move W8, [X19+48]
	030 Move X21, 0x226E000
	031 Move X21, [X21+1144]
	032 Move X20, [X19+424]
	033 Or W8, W8, 8
	034 Move [X19+48], W8
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1B6F8F8
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Inequality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {62}
	048 Move X0, [X21]
	049 Move X19, [X19+424]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1B6F8F8
	054 Move X0, X19
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X1, X31
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 Call Object.Destroy, X0
	061 Return 
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Return 
	067 Call 0x1B6FA1C

Method: System.Void Setup()

Disassembly:
	0x01CE08D8 MOV X0, X19
	0x01CE08DC BL 0x1CDF290
	0x01CE08E0 MOV X0, X31
	0x01CE08E4 BL 0x1CC086C
	0x01CE08E8 LDR X0, [X19 + 0x140]
	0x01CE08EC CBZ X0, 0x1CE0EAC
	0x01CE08F0 MOV X1, X31
	0x01CE08F4 MOV V8.16B, V0.16B
	0x01CE08F8 MOV V9.16B, V1.16B
	0x01CE08FC MOV V10.16B, V2.16B
	0x01CE0900 BL 0x3A9B084
	0x01CE0904 CBZ X0, 0x1CE0EAC
	0x01CE0908 MOV X1, X31
	0x01CE090C BL 0x3AA7658
	0x01CE0910 MOV X0, X31
	0x01CE0914 BL 0x1CC086C
	0x01CE0918 MOV X0, X19
	0x01CE091C MOV V12.16B, V0.16B
	0x01CE0920 MOV V13.16B, V1.16B
	0x01CE0924 MOV V14.16B, V2.16B
	0x01CE0928 BL 0x1CDF290
	0x01CE092C LDR X0, [X19 + 0x140]
	0x01CE0930 CBZ X0, 0x1CE0EAC
	0x01CE0934 MOV X1, X31
	0x01CE0938 MOV V11.16B, V1.16B
	0x01CE093C BL 0x3A9B084
	0x01CE0940 CBZ X0, 0x1CE0EAC
	0x01CE0944 MOV X1, X31
	0x01CE0948 BL 0x3AA7658
	0x01CE094C MOV X0, X19
	0x01CE0950 MOV X1, X31
	0x01CE0954 MOV V15.16B, V1.16B
	0x01CE0958 BL 0x1CE484C
	0x01CE095C LDR X0, [X19 + 0xB8]
	0x01CE0960 CBZ X0, 0x1CE0EAC
	0x01CE0964 LDR V1, [X0 + 0x28]
	0x01CE0968 FCMP S0, S1
	0x01CE096C B.LT 0x1CE0A64
	0x01CE0970 FSUB S0, S8, S12
	0x01CE0974 FSUB S1, S9, S13
	0x01CE0978 FSUB S2, S10, S14
	0x01CE097C FMUL S0, S0, S0
	0x01CE0980 FMUL S1, S1, S1
	0x01CE0984 FADD S0, S0, S1
	0x01CE0988 FMUL S1, S2, S2
	0x01CE098C MOV X1, X31
	0x01CE0990 FADD S8, S1, S0
	0x01CE0994 BL 0x1CE847C
	0x01CE0998 FCMP S8, S0
	0x01CE099C B.PL 0x1CE0A64
	0x01CE09A0 LDR X8, [X19 + 0xB8]
	0x01CE09A4 CBZ X8, 0x1CE0EAC
	0x01CE09A8 LDR V0, [X8 + 0x4C]
	0x01CE09AC FABD S1, S11, S11
	0x01CE09B0 FCMP S1, S0
	0x01CE09B4 B.PL 0x1CE0A64
	0x01CE09B8 FMOV S0, W31
	0x01CE09BC MOV X0, X19
	0x01CE09C0 MOV X1, X31
	0x01CE09C4 BL 0x1CE48AC
	0x01CE09C8 LDR X8, [X19 + 0xB8]
	0x01CE09CC CBZ X8, 0x1CE0EAC
	0x01CE09D0 LDR X20, [X19 + 0x140]
	0x01CE09D4 LDR W21, [X8 + 0x24]
	0x01CE09D8 MOV X0, X19
	0x01CE09DC MOV X1, X31
	0x01CE09E0 BL 0x3A9B084
	0x01CE09E4 LDR X8, [X19 + 0xB8]
	0x01CE09E8 CBZ X8, 0x1CE0EAC
	0x01CE09EC CBZ X20, 0x1CE0EAC
	0x01CE09F0 LDR X5, [X8 + 0x18]
	0x01CE09F4 LDP X4, X3, [X8 + 0xB8]
	0x01CE09F8 MOV X2, X0
	0x01CE09FC MOV X0, X20
	0x01CE0A00 MOV W1, W21
	0x01CE0A04 MOV X6, X31
	0x01CE0A08 BL 0x1CB92E8
	0x01CE0A0C B 0x1CE0A64
	0x01CE0A10 MOV X0, X19
	0x01CE0A14 MOV X1, X31
	0x01CE0A18 BL 0x1CE46CC
	0x01CE0A1C MOV X0, X19
	0x01CE0A20 MOV X1, X31
	0x01CE0A24 MOV V8.16B, V0.16B
	0x01CE0A28 BL 0x1CE4CC4
	0x01CE0A2C FADD S0, S8, S0
	0x01CE0A30 MOV X0, X19
	0x01CE0A34 MOV X1, X31
	0x01CE0A38 BL 0x1CE472C
	0x01CE0A3C MOV X0, X19
	0x01CE0A40 MOV X1, X31
	0x01CE0A44 BL 0x1CE46CC
	0x01CE0A48 LDR X8, [X19 + 0xB8]
	0x01CE0A4C CBZ X8, 0x1CE0EAC
	0x01CE0A50 LDR V1, [X8 + 0x68]
	0x01CE0A54 FCMP S0, S1
	0x01CE0A58 B.LT 0x1CE0A64
	0x01CE0A5C MOV X0, X19
	0x01CE0A60 BL 0x1CDFCE0
	0x01CE0A64 MOV X0, X19
	0x01CE0A68 BL 0x1CDEF88
	0x01CE0A6C CMP W0, 0x3
	0x01CE0A70 B.NE 0x1CE0B4C
	0x01CE0A74 LDR X0, [X19 + 0xC8]
	0x01CE0A78 CBZ X0, 0x1CE0EAC
	0x01CE0A7C MOV X1, X31
	0x01CE0A80 BL 0x3A4A9E4
	0x01CE0A84 TBZ X0, 0x0, 0x1CE0B70
	0x01CE0A88 MOV X0, X19
	0x01CE0A8C MOV X1, X31
	0x01CE0A90 BL 0x1CE4BFC
	0x01CE0A94 MOV X0, X19
	0x01CE0A98 MOV X1, X31
	0x01CE0A9C MOV V8.16B, V0.16B
	0x01CE0AA0 MOV V9.16B, V1.16B
	0x01CE0AA4 MOV V10.16B, V2.16B
	0x01CE0AA8 BL 0x3A9B084
	0x01CE0AAC CBZ X0, 0x1CE0EAC
	0x01CE0AB0 MOV X1, X31
	0x01CE0AB4 BL 0x3AA7658
	0x01CE0AB8 ADRP X21, 0x2543000
	0x01CE0ABC LDRB W8, [X21 + 0x441]
	0x01CE0AC0 MOV V11.16B, V0.16B

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X21, 0x2544000
	014 Move X20, 0x226F000
	015 Move W8, [X21+1591]
	016 Move X20, [X20+1072]
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0x226F000
	023 Move X0, [X0+1072]
	024 Call 0x1B6F7F0
	025 Move X0, 0x2270000
	026 Move X0, [X0+3824]
	027 Call 0x1B6F7F0
	028 Move X0, 0x226E000
	029 Move X0, [X0+1144]
	030 Call 0x1B6F7F0
	031 Move W8, 1
	032 Move [X21+1591], W8
	033 Move X0, X19
	034 Move X1, X31
	035 Call MobController.Setup, X0
	036 Move X1, [X20]
	037 Move X0, X19
	038 Call 0x2091A90, X0
	039 Move X8, [X19+64]
	040 Move [X19+448], X0
	041 Compare X8, 0
	042 JumpIfEqual {149}
	043 Move X0, X8
	044 Move X1, X31
	045 Call NetworkObject.get_HasStateAuthority, X0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {76}
	050 Move X8, [X19+184]
	051 Compare X8, 0
	052 JumpIfEqual {149}
	053 Move V0, [X8+40]
	054 Move X0, X19
	055 Move X1, X31
	056 Call MobController.set__timerAttackInterval, X0, V0
	057 Move X0, X31
	058 Call TickTimer.get_None
	059 And X1, X0, 0
	060 Move X0, X19
	061 Call ChickenController.set__timerToSpawnEgg, X0, X1
	062 Move X0, X19
	063 Move X1, X31
	064 Call Component.get_transform, X0
	065 Compare X0, 0
	066 JumpIfEqual {149}
	067 Move X1, X31
	068 Call Transform.get_position, X0
	069 Move X0, X19
	070 Call ChickenController.set_nestPosition, X0, X1
	071 Move W1, 1
	072 Move X0, X19
	073 Call ChickenController.SpawnEggIfNecessary, X0, X1
	074 Move X0, X19
	075 Call ChickenController.SetIncubating, X0
	076 Move X21, 0x226E000
	077 Move X20, [X19+416]
	078 Move X21, [X21+1144]
	079 Move X0, X19
	080 Call ChickenController.get_nestPosition, X0
	081 Move X22, 0x2544000
	082 Move W8, [X22+1108]
	083 Move V8, V0
	084 Move V9, V1
	085 Move V10, V2
	086 Compare W8, 0
	087 JumpIfNotEqual {93}
	088 Move X0, 0x226F000
	089 Move X0, [X0+504]
	090 Call 0x1B6F7F0
	091 Move W8, 1
	092 Move [X22+1108], W8
	093 Move X8, 0x226F000
	094 Move X8, [X8+504]
	095 Move X0, [X21]
	096 Move X21, 0x2270000
	097 Move X8, [X8]
	098 Move W9, [X0+224]
	099 Move X8, [X8+184]
	100 Move S14, [X8]
	101 Move S13, [X8+4]
	102 Move S12, [X8+8]
	103 Move S11, [X8+12]
	104 Move X21, [X21+3824]
	105 Compare W9, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1B6F8F8
	108 Move X1, [X21]
	109 Move X0, X20
	110 Move V0, V8
	111 Move V1, V9
	112 Move V2, V10
	113 Move V3, V14
	114 Move V4, V13
	115 Move V5, V12
	116 Move V6, V11
	117 Call 0x2115F80, X0, X1, X2
	118 Move X8, [X19+200]
	119 Move [X19+424], X0
	120 Compare X8, 0
	121 JumpIfEqual {149}
	122 Move W1, 1
	123 Move X0, X8
	124 Move X2, X31
	125 Call NavMeshAgent.set_updatePosition, X0, X1
	126 Move X0, [X19+200]
	127 Compare X0, 0
	128 JumpIfEqual {149}
	129 Move W1, 1
	130 Move X2, X31
	131 Call NavMeshAgent.set_updateRotation, X0, X1
	132 Move X0, X19
	133 Call ChickenController.HandlePhaseChanged, X0
	134 Move X0, X19
	135 Move X20, [X31+80]
	136 Move X19, [X31+88]
	137 Move X22, [X31+64]
	138 Move X21, [X31+72]
	139 Move X30, [X31+56]
	140 Move D9, [X31+40]
	141 Move D8, [X31+48]
	142 Move D11, [X31+24]
	143 Move D10, [X31+32]
	144 Move D13, [X31+8]
	145 Move D12, [X31+16]
	146 Move V14, [X31+96]
	147 Call ChickenController.HandleEggIDChanged, X0
	148 Return 
	149 Call 0x1B6FA1C

Method: System.Void HandleRevive()

Disassembly:
	0x01CE0C90 MOV X1, X31
	0x01CE0C94 STR S0, [X31 + 0x1C]
	0x01CE0C98 BL 0x3A9B084
	0x01CE0C9C CBZ X0, 0x1CE0EAC
	0x01CE0CA0 MOV X1, X31
	0x01CE0CA4 STR S10, [X31 + 0x10]
	0x01CE0CA8 BL 0x3AA7AD0
	0x01CE0CAC ADRP X21, 0x2543000
	0x01CE0CB0 LDRB W8, [X21 + 0x457]
	0x01CE0CB4 MOV V14.16B, V0.16B
	0x01CE0CB8 MOV V15.16B, V1.16B
	0x01CE0CBC MOV V8.16B, V2.16B
	0x01CE0CC0 CBNZ W8, 0x1CE0CD8
	0x01CE0CC4 ADRP X0, 0x226D000
	0x01CE0CC8 LDR X0, [X0 + 0x488]
	0x01CE0CCC BL 0x1B6E7F0
	0x01CE0CD0 MOVZ W8, 0x1
	0x01CE0CD4 STRB W8, [X21 + 0x457]
	0x01CE0CD8 LDR X0, [X20]
	0x01CE0CDC FMUL S0, S11, S11

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleRevive, X0
	006 Move X0, X19
	007 Call ChickenController.get_nestPosition, X0
	008 Move X0, X19
	009 Move X1, X31
	010 Call MobController.Respawn, X0, X1
	011 Move X0, [X19+64]
	012 Compare X0, 0
	013 JumpIfEqual {26}
	014 Move X1, X31
	015 Call NetworkObject.get_HasStateAuthority, X0
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfNotEqual {23}
	020 Move X0, X19
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Return 
	026 Call 0x1B6FA1C

Method: System.Void HandleDie()

Disassembly:
	0x01CE0DA4 MOV X1, X31
	0x01CE0DA8 FDIV S0, S0, S10
	0x01CE0DAC STR S0, [X31 + 0x1C]
	0x01CE0DB0 BL 0x3AA5FBC
	0x01CE0DB4 MOV V8.16B, V0.16B
	0x01CE0DB8 MOV V14.16B, V1.16B
	0x01CE0DBC MOV V15.16B, V2.16B
	0x01CE0DC0 MOV V0.16B, V11.16B
	0x01CE0DC4 MOV V1.16B, V12.16B
	0x01CE0DC8 MOV V2.16B, V13.16B
	0x01CE0DCC MOV X0, X31
	0x01CE0DD0 MOV V9.16B, V3.16B
	0x01CE0DD4 BL 0x3A92C2C
	0x01CE0DD8 MOV X0, X19
	0x01CE0DDC MOV X1, X31
	0x01CE0DE0 MOV V11.16B, V0.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleDie, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {24}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {21}
	015 Move W1, 6
	016 Move X0, X19
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Call ChickenController.set_phase, X0, X1
	020 Return 
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 
	024 Call 0x1B6FA1C

Method: System.Void SpawnEggIfNecessary(System.Boolean initialize = False)

Disassembly:
	0x01CE0AC4 MOV V12.16B, V1.16B
	0x01CE0AC8 MOV V13.16B, V2.16B
	0x01CE0ACC CBNZ W8, 0x1CE0AE4
	0x01CE0AD0 ADRP X0, 0x226D000
	0x01CE0AD4 LDR X0, [X0 + 0x488]
	0x01CE0AD8 BL 0x1B6E7F0
	0x01CE0ADC MOVZ W8, 0x1
	0x01CE0AE0 STRB W8, [X21 + 0x441]
	0x01CE0AE4 ADRP X20, 0x226D000
	0x01CE0AE8 LDR X20, [X20 + 0x488]
	0x01CE0AEC FSUB S14, S8, S11
	0x01CE0AF0 FSUB S11, S9, S12
	0x01CE0AF4 FSUB S8, S10, S13
	0x01CE0AF8 LDR X0, [X20]
	0x01CE0AFC LDR W8, [X0 + 0xE0]
	0x01CE0B00 CBNZ W8, 0x1CE0B08
	0x01CE0B04 BL 0x1B6E8F8
	0x01CE0B08 ADRP X8, 0xFFFFFFFFFEDC9000
	0x01CE0B0C FMUL S0, S14, S14
	0x01CE0B10 FMUL S1, S11, S11
	0x01CE0B14 LDR V9, [X8 + 0xB64]
	0x01CE0B18 ADRP X22, 0x226D000
	0x01CE0B1C FMUL S2, S8, S8
	0x01CE0B20 FADD S0, S0, S1
	0x01CE0B24 LDR X22, [X22 + 0x480]
	0x01CE0B28 FADD S0, S2, S0
	0x01CE0B2C FSQRT S0, S0
	0x01CE0B30 FCMP S0, S9
	0x01CE0B34 ADRP X23, 0x2543000
	0x01CE0B38 B.LE 0x1CE0BB0
	0x01CE0B3C FDIV S10, S14, S0
	0x01CE0B40 FDIV S1, S11, S0
	0x01CE0B44 FDIV S2, S8, S0
	0x01CE0B48 B 0x1CE0BDC
	0x01CE0B4C LDP X20, X19, [X31 + 0x80]
	0x01CE0B50 LDP X22, X21, [X31 + 0x70]
	0x01CE0B54 LDP X30, X23, [X31 + 0x60]
	0x01CE0B58 LDP D9, D8, [X31 + 0x50]
	0x01CE0B5C LDP D11, D10, [X31 + 0x40]
	0x01CE0B60 LDP D13, D12, [X31 + 0x30]
	0x01CE0B64 LDP D15, D14, [X31 + 0x20]
	0x01CE0B68 ADD X31, X31, 0x90
	0x01CE0B6C RET
	0x01CE0B70 LDR X20, [X19 + 0xC8]
	0x01CE0B74 MOV X0, X19
	0x01CE0B78 MOV X1, X31
	0x01CE0B7C BL 0x1CE4BFC
	0x01CE0B80 CBZ X20, 0x1CE0EAC
	0x01CE0B84 MOV X0, X20
	0x01CE0B88 LDP X20, X19, [X31 + 0x80]
	0x01CE0B8C LDP X22, X21, [X31 + 0x70]
	0x01CE0B90 LDP X30, X23, [X31 + 0x60]
	0x01CE0B94 LDP D9, D8, [X31 + 0x50]
	0x01CE0B98 LDP D11, D10, [X31 + 0x40]
	0x01CE0B9C LDP D13, D12, [X31 + 0x30]
	0x01CE0BA0 LDP D15, D14, [X31 + 0x20]
	0x01CE0BA4 MOV X1, X31
	0x01CE0BA8 ADD X31, X31, 0x90
	0x01CE0BAC B 0x3A4A810
	0x01CE0BB0 LDRB W8, [X23 + 0x43F]
	0x01CE0BB4 CBNZ W8, 0x1CE0BCC
	0x01CE0BB8 ADRP X0, 0x226D000
	0x01CE0BBC LDR X0, [X0 + 0x480]
	0x01CE0BC0 BL 0x1B6E7F0
	0x01CE0BC4 MOVZ W8, 0x1
	0x01CE0BC8 STRB W8, [X23 + 0x43F]
	0x01CE0BCC LDR X8, [X22]
	0x01CE0BD0 LDR X8, [X8 + 0xB8]
	0x01CE0BD4 LDP S10, S1, [X8]
	0x01CE0BD8 LDR V2, [X8 + 0x8]
	0x01CE0BDC MOV V0.16B, V10.16B
	0x01CE0BE0 MOV X0, X31
	0x01CE0BE4 STP S2, S1, [X31 + 0x14]
	0x01CE0BE8 BL 0x1CC086C
	0x01CE0BEC LDRB W8, [X21 + 0x441]
	0x01CE0BF0 MOV V8.16B, V0.16B
	0x01CE0BF4 MOV V12.16B, V1.16B
	0x01CE0BF8 MOV V13.16B, V2.16B
	0x01CE0BFC CBNZ W8, 0x1CE0C14
	0x01CE0C00 ADRP X0, 0x226D000
	0x01CE0C04 LDR X0, [X0 + 0x488]
	0x01CE0C08 BL 0x1B6E7F0
	0x01CE0C0C MOVZ W8, 0x1

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x2544000
	009 Move W8, [X21+1592]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x226E000
	017 Move X0, [X0+1144]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X21+1592], W8
	021 Move [X31+8], W31
	022 Move TEMP, X20
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {66}
	026 Move X0, X31
	027 Call TickTimer.get_None
	028 And X1, X0, 0
	029 Move X0, X19
	030 Call ChickenController.set__timerToSpawnEgg, X0, X1
	031 Move X0, X19
	032 Call ChickenController.get__eggSpawnPosition, X0
	033 Move W8, 0x43B40000
	034 Move V8, V0
	035 Move V9, V1
	036 Move S0, W31
	037 Move S1, W8
	038 Move X0, X31
	039 Move V10, V2
	040 Call Random.Range, V0, V1
	041 Move X8, -19095552
	042 Move V1, [X8+2804]
	043 Move S2, W31
	044 Move X0, X31
	045 Multiply S1, S0, S1
	046 Move S0, W31
	047 Call Quaternion.Internal_FromEulerRad, X0
	048 Move V4, V0
	049 Move V5, V1
	050 Move V6, V2
	051 Move V7, V3
	052 Move X0, X19
	053 Move V0, V8
	054 Move V1, V9
	055 Move V2, V10
	056 Move V3, V4
	057 Move V4, V5
	058 Move V5, V6
	059 Move V6, V7
	060 Call ChickenController.SpawnEgg, X0, X1, X2
	061 Move X0, X19
	062 Call ChickenController.get_phase, X0
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X0, X19
	065 Call ChickenController.SetBackToNest, X0
	066 Move X8, 0x226E000
	067 Move X8, [X8+1144]
	068 Move X20, [X19+440]
	069 Move X0, [X8]
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1B6F8F8
	074 Move X0, X20
	075 Move X1, X31
	076 Move X2, X31
	077 Call Object.op_Equality, X0, X1
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {93}
	082 Move X0, X19
	083 Call ChickenController.get__timerToSpawnEgg, X0
	084 Move [X31+8], W0
	085 Move X1, [X19+56]
	086 Add X0, X31, 8
	087 Move X2, X31
	088 Call TickTimer.Expired, X0, X1
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfEqual {26}
	093 Move X20, [X31+48]
	094 Move X19, [X31+56]
	095 Move X30, [X31+32]
	096 Move X21, [X31+40]
	097 Move D9, [X31+16]
	098 Move D8, [X31+24]
	099 Move V10, [X31+64]
	100 Return 

Method: System.Void SpawnEgg(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)

Disassembly:
	0x01CE0DE4 MOV V12.16B, V1.16B
	0x01CE0DE8 MOV V13.16B, V2.16B
	0x01CE0DEC MOV V10.16B, V3.16B
	0x01CE0DF0 BL 0x1CE4CC4
	0x01CE0DF4 LDR V1, [X31 + 0x1C]
	0x01CE0DF8 MOV V2.16B, V15.16B
	0x01CE0DFC MOV V3.16B, V9.16B
	0x01CE0E00 MOV V4.16B, V11.16B
	0x01CE0E04 FMUL S0, S1, S0
	0x01CE0E08 STR S0, [X31]
	0x01CE0E0C MOV V0.16B, V8.16B
	0x01CE0E10 MOV V1.16B, V14.16B
	0x01CE0E14 MOV V5.16B, V12.16B
	0x01CE0E18 MOV V6.16B, V13.16B
	0x01CE0E1C MOV V7.16B, V10.16B
	0x01CE0E20 MOV X0, X31
	0x01CE0E24 BL 0x3A92660
	0x01CE0E28 CBZ X20, 0x1CE0EAC
	0x01CE0E2C MOV X0, X20
	0x01CE0E30 MOV X1, X31
	0x01CE0E34 BL 0x3AA7878
	0x01CE0E38 LDR X20, [X19 + 0xC8]
	0x01CE0E3C LDR V8, [X31 + 0x10]
	0x01CE0E40 CBZ X20, 0x1CE0EAC
	0x01CE0E44 MOV X0, X20
	0x01CE0E48 MOV X1, X31
	0x01CE0E4C BL 0x3A4AC10
	0x01CE0E50 LDR V1, [X31 + 0x18]
	0x01CE0E54 MOV X0, X19
	0x01CE0E58 MOV X1, X31
	0x01CE0E5C FMUL S8, S8, S0
	0x01CE0E60 FMUL S9, S1, S0
	0x01CE0E64 LDR V1, [X31 + 0x14]
	0x01CE0E68 FMUL S10, S1, S0
	0x01CE0E6C BL 0x1CE4CC4
	0x01CE0E70 FMUL S3, S8, S0
	0x01CE0E74 FMUL S1, S9, S0
	0x01CE0E78 FMUL S2, S10, S0
	0x01CE0E7C MOV X0, X20
	0x01CE0E80 LDP X20, X19, [X31 + 0x80]
	0x01CE0E84 LDP X22, X21, [X31 + 0x70]
	0x01CE0E88 LDP X30, X23, [X31 + 0x60]
	0x01CE0E8C LDP D9, D8, [X31 + 0x50]
	0x01CE0E90 LDP D11, D10, [X31 + 0x40]
	0x01CE0E94 LDP D13, D12, [X31 + 0x30]
	0x01CE0E98 LDP D15, D14, [X31 + 0x20]
	0x01CE0E9C MOV V0.16B, V3.16B
	0x01CE0EA0 MOV X1, X31
	0x01CE0EA4 ADD X31, X31, 0x90
	0x01CE0EA8 B 0x3A4AABC
	0x01CE0EAC BL 0x1B6EA1C
	0x01CE0EB0 STR X30, [X31 - 0x20]!
	0x01CE0EB4 STP X20, X19, [X31 + 0x10]
	0x01CE0EB8 MOVZ W1, 0x5
	0x01CE0EBC MOV X19, X0
	0x01CE0EC0 BL 0x1CDEFE8
	0x01CE0EC4 LDR X0, [X19 + 0x38]
	0x01CE0EC8 MOVZ W8, 0x44160000
	0x01CE0ECC FMOV S0, W8
	0x01CE0ED0 MOV X1, X31
	0x01CE0ED4 BL 0x1D9CEB8
	0x01CE0ED8 AND X1, X0, 0x0
	0x01CE0EDC MOV X0, X19
	0x01CE0EE0 BL 0x1CDF230
	0x01CE0EE4 LDR X9, [X19 + 0xB8]
	0x01CE0EE8 CBZ X9, 0x1CE0F8C
	0x01CE0EEC LDR X8, [X9 + 0x38]
	0x01CE0EF0 CBZ X8, 0x1CE0F8C
	0x01CE0EF4 LDR W10, [X8 + 0x18]
	0x01CE0EF8 CBZ W10, 0x1CE0F90
	0x01CE0EFC LDR X10, [X9 + 0x58]
	0x01CE0F00 CBZ X10, 0x1CE0F8C
	0x01CE0F04 LDR W11, [X10 + 0x18]
	0x01CE0F08 CBZ W11, 0x1CE0F90
	0x01CE0F0C LDR X9, [X9 + 0x60]
	0x01CE0F10 CBZ X9, 0x1CE0F8C
	0x01CE0F14 LDR W11, [X9 + 0x18]
	0x01CE0F18 CBZ W11, 0x1CE0F90
	0x01CE0F1C LDR X11, [X19]
	0x01CE0F20 LDR V0, [X8 + 0x20]
	0x01CE0F24 LDR V1, [X10 + 0x20]
	0x01CE0F28 LDR V2, [X9 + 0x20]
	0x01CE0F2C LDR X8, [X11 + 0x2A8]
	0x01CE0F30 LDR X2, [X11 + 0x2B0]
	0x01CE0F34 MOV X0, X19
	0x01CE0F38 MOV W1, W31
	0x01CE0F3C BLR X8
	0x01CE0F40 LDR X8, [X19]
	0x01CE0F44 MOVZ W1, 0x1
	0x01CE0F48 MOV X0, X19
	0x01CE0F4C LDR X9, [X8 + 0x308]
	0x01CE0F50 LDR X2, [X8 + 0x310]
	0x01CE0F54 BLR X9
	0x01CE0F58 LDR X20, [X19 + 0x198]
	0x01CE0F5C MOV X0, X19
	0x01CE0F60 MOV X1, X31
	0x01CE0F64 BL 0x3A9B084
	0x01CE0F68 CBZ X0, 0x1CE0F8C
	0x01CE0F6C MOV X1, X31
	0x01CE0F70 BL 0x3AA7658
	0x01CE0F74 MOV X0, X20
	0x01CE0F78 LDP X20, X19, [X31 + 0x10]
	0x01CE0F7C FMOV S3, 1
	0x01CE0F80 MOV X1, X31
	0x01CE0F84 LDR X30, [X31], #0x20
	0x01CE0F88 B 0x1CC181C

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+96], D14
	003 Move [X31+104], D13
	004 Move [X31+112], D12
	005 Move [X31+120], D11
	006 Move [X31+128], D10
	007 Move [X31+136], D9
	008 Move [X31+144], D8
	009 Move [X31+152], X30
	010 Move [X31+160], X24
	011 Move [X31+168], X23
	012 Move [X31+176], X22
	013 Move [X31+184], X21
	014 Move [X31+192], X20
	015 Move [X31+200], X19
	016 Move X20, 0x2544000
	017 Move X23, 0x226F000
	018 Move X22, 0x226F000
	019 Move W8, [X20+1593]
	020 Move X23, [X23+584]
	021 Move X22, [X22+592]
	022 Move V8, V6
	023 Move V9, V5
	024 Move V10, V4
	025 Move V11, V3
	026 Move V12, V2
	027 Move V13, V1
	028 Move V14, V0
	029 Move X19, X0
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {51}
	034 Move X0, 0x2270000
	035 Move X0, [X0+3832]
	036 Call 0x1B6F7F0
	037 Move X0, 0x226F000
	038 Move X0, [X0+584]
	039 Call 0x1B6F7F0
	040 Move X0, 0x2270000
	041 Move X0, [X0+328]
	042 Call 0x1B6F7F0
	043 Move X0, 0x226F000
	044 Move X0, [X0+592]
	045 Call 0x1B6F7F0
	046 Move X0, 0x226F000
	047 Move X0, [X0+2952]
	048 Call 0x1B6F7F0
	049 Move W8, 1
	050 Move [X20+1593], W8
	051 Move X1, [X23]
	052 Move X20, [X19+56]
	053 Move X21, [X19+432]
	054 Add X0, X31, 80
	055 Move V0, V14
	056 Move V1, V13
	057 Move V2, V12
	058 Move [X31+80], X31
	059 Move [X31+88], X31
	060 Call Nullable`1<Vector3>..ctor, X0, X1
	061 Move X1, [X22]
	062 Add X0, X31, 56
	063 Move V0, V11
	064 Move V1, V10
	065 Move V2, V9
	066 Move V3, V8
	067 Move [X31+56], X31
	068 Move [X31+64], X31
	069 Move [X31+72], W31
	070 Call Nullable`1<Quaternion>..ctor, X0, X1
	071 Move X0, [X19+64]
	072 Compare X0, 0
	073 JumpIfEqual {126}
	074 Move X22, 0x2270000
	075 Move X23, 0x226F000
	076 Move X24, 0x2270000
	077 Move X22, [X22+328]
	078 Move X23, [X23+2952]
	079 Move X24, [X24+3832]
	080 Move X1, X31
	081 Call NetworkObject.get_InputAuthority, X0
	082 Move X2, [X22]
	083 And X1, X0, 0
	084 Add X0, X31, 48
	085 Move [X31+48], X31
	086 Call Nullable`1<PlayerRef>..ctor, X0, X1
	087 Move X0, [X23]
	088 Call 0x1B6FA0C
	089 Move X2, [X24]
	090 Move X1, X19
	091 Move X3, X31
	092 Move X22, X0
	093 Call OnBeforeSpawned..ctor, X0, X1, X2
	094 Compare X20, 0
	095 JumpIfEqual {126}
	096 Move X2, [X31+80]
	097 Move X3, [X31+88]
	098 NotImplemented "Instruction LDUR not yet implemented."
	099 Move W8, [X31+72]
	100 Move X5, [X31+48]
	101 Add X4, X31, 16
	102 Move X0, X20
	103 Move X1, X21
	104 Move X6, X22
	105 Move W7, W31
	106 Move [X31+1], V0
	107 Move [X31+32], W8
	108 Move [X31], X31
	109 Call NetworkRunner.Spawn, X0, X1, X2, X3, X4, X5, X6
	110 Move X20, [X31+192]
	111 Move X19, [X31+200]
	112 Move X22, [X31+176]
	113 Move X21, [X31+184]
	114 Move X24, [X31+160]
	115 Move X23, [X31+168]
	116 Move X30, [X31+152]
	117 Move D9, [X31+136]
	118 Move D8, [X31+144]
	119 Move D11, [X31+120]
	120 Move D10, [X31+128]
	121 Move D13, [X31+104]
	122 Move D12, [X31+112]
	123 Move V14, [X31+96]
	124 Add X31, X31, 208
	125 Return 
	126 Call 0x1B6FA1C

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01CE0F8C BL 0x1B6EA1C
	0x01CE0F90 BL 0x1B6EA24
	0x01CE0F94 STP X30, X21, [X31 - 0x20]!
	0x01CE0F98 STP X20, X19, [X31 + 0x10]
	0x01CE0F9C ADRP X21, 0x2543000
	0x01CE0FA0 ADRP X20, 0x226D000
	0x01CE0FA4 LDRB W8, [X21 + 0x640]
	0x01CE0FA8 LDR X20, [X20 + 0x800]
	0x01CE0FAC MOV X19, X0
	0x01CE0FB0 TBNZ X8, 0x0, 0x1CE0FD4
	0x01CE0FB4 ADRP X0, 0x226D000
	0x01CE0FB8 LDR X0, [X0 + 0x800]
	0x01CE0FBC BL 0x1B6E7F0
	0x01CE0FC0 ADRP X0, 0x226F000
	0x01CE0FC4 LDR X0, [X0 + 0xD48]
	0x01CE0FC8 BL 0x1B6E7F0
	0x01CE0FCC MOVZ W8, 0x1
	0x01CE0FD0 STRB W8, [X21 + 0x640]
	0x01CE0FD4 MOV X0, X19
	0x01CE0FD8 MOV X1, X31
	0x01CE0FDC BL 0x1CE76C0
	0x01CE0FE0 LDR X0, [X20]
	0x01CE0FE4 LDR W8, [X0 + 0xE0]
	0x01CE0FE8 CBNZ W8, 0x1CE0FF0
	0x01CE0FEC BL 0x1B6E8F8
	0x01CE0FF0 MOV X0, X31
	0x01CE0FF4 BL 0x3A6A5FC
	0x01CE0FF8 TBZ X0, 0x0, 0x1CE10A8
	0x01CE0FFC ADRP X20, 0x226F000
	0x01CE1000 LDR X20, [X20 + 0xD48]
	0x01CE1004 LDR X0, [X20]
	0x01CE1008 LDR W8, [X0 + 0xE0]
	0x01CE100C CBNZ W8, 0x1CE1018
	0x01CE1010 BL 0x1B6E8F8
	0x01CE1014 LDR X0, [X20]
	0x01CE1018 LDR X8, [X0 + 0xB8]
	0x01CE101C MOV X0, X31
	0x01CE1020 LDP S0, S1, [X8 + 0xB0]
	0x01CE1024 LDP S2, S3, [X8 + 0xB8]
	0x01CE1028 BL 0x3A75B14
	0x01CE102C MOV X0, X19
	0x01CE1030 BL 0x1CDF290
	0x01CE1034 LDR X8, [X19 + 0xB8]
	0x01CE1038 CBZ X8, 0x1CE10B4
	0x01CE103C LDR V3, [X8 + 0x4C]
	0x01CE1040 MOV X0, X31
	0x01CE1044 BL 0x3A7567C
	0x01CE1048 FMOV S0, 1
	0x01CE104C FMOV S1, 0.5
	0x01CE1050 FMOV S2, W31
	0x01CE1054 FMOV S3, 1
	0x01CE1058 MOV X0, X31
	0x01CE105C BL 0x3A75B14
	0x01CE1060 MOV X0, X19
	0x01CE1064 BL 0x1CDF108
	0x01CE1068 FMOV S3, 12
	0x01CE106C MOV X0, X31
	0x01CE1070 BL 0x3A7567C
	0x01CE1074 FMOV S0, 1
	0x01CE1078 FMOV S1, W31
	0x01CE107C FMOV S2, W31
	0x01CE1080 FMOV S3, 1
	0x01CE1084 MOV X0, X31
	0x01CE1088 BL 0x3A75B14
	0x01CE108C MOV X0, X19
	0x01CE1090 BL 0x1CDF108
	0x01CE1094 LDP X20, X19, [X31 + 0x10]
	0x01CE1098 FMOV S3, 6
	0x01CE109C MOV X0, X31
	0x01CE10A0 LDP X30, X21, [X31], #0x20
	0x01CE10A4 B 0x3A7567C
	0x01CE10A8 LDP X20, X19, [X31 + 0x10]
	0x01CE10AC LDP X30, X21, [X31], #0x20
	0x01CE10B0 RET
	0x01CE10B4 BL 0x1B6EA1C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x2544000
	006 Move W8, [X20+1594]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2270000
	013 Move X0, [X0+3840]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1594], W8
	017 Move X0, X19
	018 Move X1, X31
	019 Call MobController.FixedUpdateNetwork, X0
	020 Move X0, X19
	021 Move X1, X31
	022 Call MobController.get__updateValid, X0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {81}
	027 Move X0, X19
	028 Call ChickenController.get_phase, X0
	029 Subtract W8, W0, 1
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, -18821120
	032 Add X9, X9, 2382
	033 NotImplemented "Instruction ADR not yet implemented."
	034 Move W11, [X9]
	035 Add X10, X10, X11
	036 CallNoReturn X10
	037 Move X0, X19
	038 Call ChickenController.UpdateIncubating, X0
	039 Move X0, X19
	040 Call ChickenController.UpdateNoticed, X0
	041 Move X8, [X19]
	042 Move X0, X19
	043 Move X9, [X8+840]
	044 Move X1, [X8+848]
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move X0, X19
	047 Call ChickenController.UpdateBackToNest, X0
	048 Move X0, X19
	049 Call ChickenController.UpdateSearching, X0
	050 Move X0, X19
	051 Move W1, W31
	052 Call ChickenController.SpawnEggIfNecessary, X0, X1
	053 Call GameManager.get_isDebug
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {81}
	058 Move X20, [X19+360]
	059 Compare X20, 0
	060 JumpIfEqual {81}
	061 Move X0, X19
	062 Call ChickenController.get_phase, X0
	063 Move X8, 0x226F000
	064 Move X8, [X8+3840]
	065 Move TEMP, 0
	066 Not TEMP
	067 Move X9, TEMP
	068 Move [X31+24], W0
	069 Add X0, X31, 8
	070 Move X8, [X8]
	071 Move X1, X31
	072 Move [X31+8], X8
	073 Move [X31+16], X9
	074 Call Enum.ToString, X0
	075 Move X8, [X20+64]
	076 Move X9, [X20+24]
	077 Move X2, [X20+40]
	078 Move X1, X0
	079 Move X0, X8
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X30, [X31+32]
	084 Add X31, X31, 64
	085 Return 

Method: System.Void SetIncubating()

Disassembly:
	0x01CE0C10 STRB W8, [X21 + 0x441]
	0x01CE0C14 LDR X0, [X20]
	0x01CE0C18 LDR W8, [X0 + 0xE0]
	0x01CE0C1C CBNZ W8, 0x1CE0C24
	0x01CE0C20 BL 0x1B6E8F8
	0x01CE0C24 FMUL S0, S8, S8
	0x01CE0C28 FMUL S1, S12, S12
	0x01CE0C2C FADD S0, S0, S1
	0x01CE0C30 FMUL S1, S13, S13
	0x01CE0C34 FADD S0, S1, S0
	0x01CE0C38 FSQRT S0, S0
	0x01CE0C3C FCMP S0, S9
	0x01CE0C40 B.LE 0x1CE0C54
	0x01CE0C44 FDIV S11, S8, S0
	0x01CE0C48 FDIV S12, S12, S0
	0x01CE0C4C FDIV S13, S13, S0
	0x01CE0C50 B 0x1CE0C80
	0x01CE0C54 LDRB W8, [X23 + 0x43F]
	0x01CE0C58 CBNZ W8, 0x1CE0C70
	0x01CE0C5C ADRP X0, 0x226D000
	0x01CE0C60 LDR X0, [X0 + 0x480]
	0x01CE0C64 BL 0x1B6E7F0
	0x01CE0C68 MOVZ W8, 0x1
	0x01CE0C6C STRB W8, [X23 + 0x43F]
	0x01CE0C70 LDR X8, [X22]
	0x01CE0C74 LDR X8, [X8 + 0xB8]
	0x01CE0C78 LDP S11, S12, [X8]
	0x01CE0C7C LDR V13, [X8 + 0x8]
	0x01CE0C80 LDR X8, [X19 + 0xB8]
	0x01CE0C84 CBZ X8, 0x1CE0EAC
	0x01CE0C88 LDR V0, [X8 + 0x40]
	0x01CE0C8C MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 1
	004 Move X19, X0
	005 Call ChickenController.set_phase, X0, X1
	006 Move X8, [X19]
	007 Move X0, X19
	008 Move X1, X31
	009 Move X9, [X8+824]
	010 Move X2, [X8+832]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move X9, [X19+184]
	013 Compare X9, 0
	014 JumpIfEqual {38}
	015 Move X8, [X9+88]
	016 Compare X8, 0
	017 JumpIfEqual {38}
	018 Move W10, [X8+24]
	019 Compare W10, 0
	020 JumpIfEqual {39}
	021 Move X9, [X9+96]
	022 Compare X9, 0
	023 JumpIfEqual {38}
	024 Move W10, [X9+24]
	025 Compare W10, 0
	026 JumpIfEqual {39}
	027 Move X10, [X19]
	028 Move V1, [X8+32]
	029 Move V2, [X9+32]
	030 Move S0, W31
	031 Move X3, [X10+680]
	032 Move X2, [X10+688]
	033 Move W1, 1
	034 Move X0, X19
	035 Move X30, [X31+16]
	036 Move X19, [X31+24]
	037 CallNoReturn X3
	038 Call 0x1B6FA1C
	039 Call 0x1B6FA24

Method: System.Void UpdateIncubating()

Disassembly:
	0x01CE10B8 STP X30, X21, [X31 - 0x20]!
	0x01CE10BC STP X20, X19, [X31 + 0x10]
	0x01CE10C0 ADRP X20, 0x2542000
	0x01CE10C4 ADRP X21, 0x226D000
	0x01CE10C8 LDRB W8, [X20 + 0x641]
	0x01CE10CC LDR X21, [X21 + 0xD78]
	0x01CE10D0 MOV X19, X0
	0x01CE10D4 TBNZ X8, 0x0, 0x1CE10EC
	0x01CE10D8 ADRP X0, 0x226D000
	0x01CE10DC LDR X0, [X0 + 0xD78]
	0x01CE10E0 BL 0x1B6E7F0
	0x01CE10E4 MOVZ W8, 0x1
	0x01CE10E8 STRB W8, [X20 + 0x641]
	0x01CE10EC LDR X0, [X21]
	0x01CE10F0 LDR W8, [X0 + 0xE0]
	0x01CE10F4 CBNZ W8, 0x1CE10FC
	0x01CE10F8 BL 0x1B6E8F8
	0x01CE10FC MOV X0, X19
	0x01CE1100 LDP X20, X19, [X31 + 0x10]
	0x01CE1104 MOV X1, X31
	0x01CE1108 LDP X30, X21, [X31], #0x20
	0x01CE110C B 0x1CE8008
	0x01CE1110 STR X30, [X31 - 0x60]!
	0x01CE1114 STP X28, X27, [X31 + 0x10]
	0x01CE1118 STP X26, X25, [X31 + 0x20]
	0x01CE111C STP X24, X23, [X31 + 0x30]
	0x01CE1120 STP X22, X21, [X31 + 0x40]
	0x01CE1124 STP X20, X19, [X31 + 0x50]
	0x01CE1128 ADRP X21, 0x2542000
	0x01CE112C LDRB W8, [X21 + 0x642]
	0x01CE1130 MOV X20, X2
	0x01CE1134 MOV X19, X0
	0x01CE1138 TBNZ X8, 0x0, 0x1CE115C
	0x01CE113C ADRP X0, 0x226D000
	0x01CE1140 LDR X0, [X0 + 0x430]
	0x01CE1144 BL 0x1B6E7F0
	0x01CE1148 ADRP X0, 0x226C000
	0x01CE114C LDR X0, [X0 + 0x4C0]
	0x01CE1150 BL 0x1B6E7F0
	0x01CE1154 MOVZ W8, 0x1
	0x01CE1158 STRB W8, [X21 + 0x642]
	0x01CE115C CBZ X20, 0x1CE124C
	0x01CE1160 ADRP X8, 0x226D000
	0x01CE1164 LDR X8, [X8 + 0x430]
	0x01CE1168 MOV X0, X20
	0x01CE116C LDR X1, [X8]
	0x01CE1170 BL 0x2090A90
	0x01CE1174 CBZ X0, 0x1CE124C
	0x01CE1178 LDR X8, [X0 + 0x18]
	0x01CE117C MOV X21, X0
	0x01CE1180 CMP W8, 0x1
	0x01CE1184 B.LT 0x1CE1214
	0x01CE1188 ADRP X25, 0x226C000
	0x01CE118C LDR X25, [X25 + 0x4C0]
	0x01CE1190 MOV X24, X31
	0x01CE1194 AND X8, X8, 0x0
	0x01CE1198 CMP X24, W8, UXTW
	0x01CE119C B.CS 0x1CE1248
	0x01CE11A0 LDR X26, [X19 + 0x1C0]
	0x01CE11A4 CBZ X26, 0x1CE124C
	0x01CE11A8 LDR X8, [X26 + 0x18]
	0x01CE11AC CMP W8, 0x1
	0x01CE11B0 B.LT 0x1CE1204
	0x01CE11B4 ADD X9, X21, X24, 0x3, LSL
	0x01CE11B8 LDR X22, [X9 + 0x20]
	0x01CE11BC MOV X27, X31
	0x01CE11C0 AND X8, X8, 0x0
	0x01CE11C4 ADD X28, X26, 0x20
	0x01CE11C8 CMP X27, W8, UXTW
	0x01CE11CC B.CS 0x1CE1248
	0x01CE11D0 LDR X0, [X25]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2543000
	007 Move W8, [X20+1595]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {30}
	013 Move X0, 0x226F000
	014 Move X0, [X0+3848]
	015 Call 0x1B6F7F0
	016 Move X0, 0x226F000
	017 Move X0, [X0+3856]
	018 Call 0x1B6F7F0
	019 Move X0, 0x226F000
	020 Move X0, [X0+3864]
	021 Call 0x1B6F7F0
	022 Move X0, 0x226F000
	023 Move X0, [X0+3632]
	024 Call 0x1B6F7F0
	025 Move X0, 0x226F000
	026 Move X0, [X0+3568]
	027 Call 0x1B6F7F0
	028 Move W8, 1
	029 Move [X20+1595], W8
	030 Move X0, X19
	031 Move [X31+8], X31
	032 Call ChickenController.get_nestPosition, X0
	033 Move S3, 12
	034 Add X1, X31, 8
	035 Move X0, X19
	036 Move X2, X31
	037 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {76}
	042 Move X20, [X31+8]
	043 Compare X20, 0
	044 JumpIfEqual {82}
	045 Move W8, [X20+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X8, 0x226F000
	048 Move X8, [X8+3856]
	049 Move X0, [X8]
	050 Call 0x1B6FA0C
	051 Move X8, 0x226F000
	052 Move X8, [X8+3848]
	053 Move X1, X19
	054 Move X3, X31
	055 Move X21, X0
	056 Move X2, [X8]
	057 Call Comparison`1<Object>..ctor, X0, X1, X2
	058 Move X8, 0x226F000
	059 Move X8, [X8+3864]
	060 Move X0, X20
	061 Move X1, X21
	062 Move X2, [X8]
	063 Call List`1<Object>.Sort, X0, X1
	064 Move X20, [X31+8]
	065 Compare X20, 0
	066 JumpIfEqual {82}
	067 Move X8, 0x226F000
	068 Move X8, [X8+3568]
	069 Move X0, X20
	070 Move W1, W31
	071 Move X2, [X8]
	072 Call List`1<Object>.get_Item, X0, X1
	073 Move X1, X0
	074 Move X0, X19
	075 Call ChickenController.SetNoticed, X0, X1
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X30, [X31+16]
	079 Move X21, [X31+24]
	080 Add X31, X31, 48
	081 Return 
	082 Call 0x1B6FA1C

Method: System.Void SetNoticed(AnimalCompany.NetPlayer targetPlayer)

Disassembly:
	0x01CE15EC LDP X20, X19, [X31 + 0x10]
	0x01CE15F0 MOVZ W2, 0xA
	0x01CE15F4 LDP X30, X21, [X31], #0x20
	0x01CE15F8 B 0x22B1EF4
	0x01CE15FC ADRP X0, 0x226C000
	0x01CE1600 LDR X0, [X0 + 0x490]
	0x01CE1604 BL 0x1B6E804
	0x01CE1608 BL 0x1B6EA0C
	0x01CE160C MOV X19, X0
	0x01CE1610 ADRP X0, 0x226E000
	0x01CE1614 LDR X0, [X0 + 0xF30]
	0x01CE1618 BL 0x1B6E804
	0x01CE161C MOV X1, X0
	0x01CE1620 MOV X0, X19
	0x01CE1624 MOV X2, X31
	0x01CE1628 BL 0x31E7550
	0x01CE162C ADRP X0, 0x226E000
	0x01CE1630 LDR X0, [X0 + 0xF38]
	0x01CE1634 BL 0x1B6E804
	0x01CE1638 MOV X1, X0
	0x01CE163C MOV X0, X19
	0x01CE1640 BL 0x1B6E8E8
	0x01CE1644 STR X30, [X31 - 0x20]!
	0x01CE1648 STP X20, X19, [X31 + 0x10]
	0x01CE164C ADRP X20, 0x2542000
	0x01CE1650 LDRB W8, [X20 + 0x646]
	0x01CE1654 MOV X19, X0
	0x01CE1658 TBNZ X8, 0x0, 0x1CE167C
	0x01CE165C ADRP X0, 0x226D000
	0x01CE1660 LDR X0, [X0 + 0x2A8]
	0x01CE1664 BL 0x1B6E7F0
	0x01CE1668 ADRP X0, 0x226E000
	0x01CE166C LDR X0, [X0 + 0xF40]
	0x01CE1670 BL 0x1B6E7F0
	0x01CE1674 MOVZ W8, 0x1
	0x01CE1678 STRB W8, [X20 + 0x646]
	0x01CE167C LDR X8, [X19 + 0x50]
	0x01CE1680 CBZ X8, 0x1CE16FC
	0x01CE1684 STR X31, [X31 + 0x8]
	0x01CE1688 LDR X0, [X19 + 0x38]
	0x01CE168C ADRP X19, 0x226E000
	0x01CE1690 LDR X19, [X19 + 0xF40]
	0x01CE1694 ADD X1, X8, 0x78
	0x01CE1698 ADD X2, X31, 0x8
	0x01CE169C MOV X3, X31
	0x01CE16A0 BL 0x1D65E38
	0x01CE16A4 LDR X2, [X19]
	0x01CE16A8 MOVZ W1, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move W1, 2
	006 Move X19, X0
	007 Call ChickenController.set_phase, X0, X1
	008 Move X8, [X19]
	009 Move X0, X19
	010 Move X1, X20
	011 Move X9, [X8+824]
	012 Move X2, [X8+832]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move X9, [X19+184]
	015 Compare X9, 0
	016 JumpIfEqual {57}
	017 Move X8, [X9+88]
	018 Compare X8, 0
	019 JumpIfEqual {57}
	020 Move W10, [X8+24]
	021 Compare W10, 0
	022 JumpIfEqual {58}
	023 Move X9, [X9+96]
	024 Compare X9, 0
	025 JumpIfEqual {57}
	026 Move W10, [X9+24]
	027 Compare W10, 0
	028 JumpIfEqual {58}
	029 Move X10, [X19]
	030 Move V1, [X8+32]
	031 Move V2, [X9+32]
	032 Move S0, W31
	033 Move X8, [X10+680]
	034 Move X2, [X10+688]
	035 Move W1, 1
	036 Move X0, X19
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X8, [X19+184]
	039 Compare X8, 0
	040 JumpIfEqual {57}
	041 Move X20, [X8+160]
	042 Move X0, X19
	043 Move X1, X31
	044 Call Component.get_transform, X0
	045 Compare X0, 0
	046 JumpIfEqual {57}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X0, X20
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move S3, 1
	053 Move X1, X31
	054 Move X30, [X31+32]
	055 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	056 Return 
	057 Call 0x1B6FA1C
	058 Call 0x1B6FA24

Method: System.Void UpdateNoticed()

Disassembly:
	0x01CE11D4 LDR X23, [X28, X27, LSL #3]
	0x01CE11D8 LDR W8, [X0 + 0xE0]
	0x01CE11DC CBNZ W8, 0x1CE11E4
	0x01CE11E0 BL 0x1B6E8F8
	0x01CE11E4 MOV X0, X22
	0x01CE11E8 MOV X1, X23
	0x01CE11EC MOV X2, X31
	0x01CE11F0 BL 0x3AF29DC
	0x01CE11F4 LDR W8, [X26 + 0x18]
	0x01CE11F8 ADD X27, X27, 0x1
	0x01CE11FC CMP X27, W8, SXTW
	0x01CE1200 B.LT 0x1CE11C8
	0x01CE1204 LDR W8, [X21 + 0x18]
	0x01CE1208 ADD X24, X24, 0x1
	0x01CE120C CMP X24, W8, SXTW
	0x01CE1210 B.LT 0x1CE1198
	0x01CE1214 LDR X8, [X20 + 0x20]
	0x01CE1218 CBZ X8, 0x1CE1224
	0x01CE121C LDR W1, [X8]
	0x01CE1220 B 0x1CE1228
	0x01CE1224 MOV X1, X31
	0x01CE1228 MOV X0, X19
	0x01CE122C LDP X20, X19, [X31 + 0x50]
	0x01CE1230 LDP X22, X21, [X31 + 0x40]
	0x01CE1234 LDP X24, X23, [X31 + 0x30]
	0x01CE1238 LDP X26, X25, [X31 + 0x20]
	0x01CE123C LDP X28, X27, [X31 + 0x10]
	0x01CE1240 LDR X30, [X31], #0x60
	0x01CE1244 B 0x1CDF0A8
	0x01CE1248 BL 0x1B6EA24
	0x01CE124C BL 0x1B6EA1C
	0x01CE1250 STP D13, D12, [X31 - 0x60]!
	0x01CE1254 STP D11, D10, [X31 + 0x10]
	0x01CE1258 STP D9, D8, [X31 + 0x20]
	0x01CE125C STR X30, [X31 + 0x30]
	0x01CE1260 STP X22, X21, [X31 + 0x40]
	0x01CE1264 STP X20, X19, [X31 + 0x50]
	0x01CE1268 CBZ X1, 0x1CE13C0
	0x01CE126C MOV X19, X0
	0x01CE1270 MOV X0, X1
	0x01CE1274 MOV X1, X31
	0x01CE1278 MOV X20, X2
	0x01CE127C BL 0x3A9B084
	0x01CE1280 CBZ X0, 0x1CE13C0
	0x01CE1284 MOV X1, X31
	0x01CE1288 BL 0x3AA7658
	0x01CE128C MOV X0, X19
	0x01CE1290 MOV V8.16B, V0.16B
	0x01CE1294 MOV V9.16B, V1.16B
	0x01CE1298 MOV V10.16B, V2.16B
	0x01CE129C BL 0x1CDF108
	0x01CE12A0 ADRP X21, 0x2542000
	0x01CE12A4 LDRB W8, [X21 + 0x506]
	0x01CE12A8 MOV V11.16B, V0.16B
	0x01CE12AC MOV V12.16B, V1.16B
	0x01CE12B0 MOV V13.16B, V2.16B
	0x01CE12B4 CBNZ W8, 0x1CE12CC
	0x01CE12B8 ADRP X0, 0x226C000
	0x01CE12BC LDR X0, [X0 + 0x488]
	0x01CE12C0 BL 0x1B6E7F0
	0x01CE12C4 MOVZ W8, 0x1
	0x01CE12C8 STRB W8, [X21 + 0x506]
	0x01CE12CC ADRP X22, 0x226C000
	0x01CE12D0 LDR X22, [X22 + 0x488]
	0x01CE12D4 FSUB S11, S8, S11
	0x01CE12D8 FSUB S9, S9, S12
	0x01CE12DC FSUB S8, S10, S13
	0x01CE12E0 LDR X0, [X22]
	0x01CE12E4 LDR W8, [X0 + 0xE0]
	0x01CE12E8 CBNZ W8, 0x1CE12F0
	0x01CE12EC BL 0x1B6E8F8
	0x01CE12F0 FMUL S0, S11, S11
	0x01CE12F4 FMUL S1, S9, S9
	0x01CE12F8 FADD S0, S0, S1
	0x01CE12FC FMUL S1, S8, S8
	0x01CE1300 FADD S0, S1, S0
	0x01CE1304 FSQRT S0, S0
	0x01CE1308 STR S0, [X31 + 0x3C]
	0x01CE130C CBZ X20, 0x1CE13C0
	0x01CE1310 MOV X0, X20
	0x01CE1314 MOV X1, X31
	0x01CE1318 BL 0x3A9B084
	0x01CE131C CBZ X0, 0x1CE13C0
	0x01CE1320 MOV X1, X31
	0x01CE1324 BL 0x3AA7658
	0x01CE1328 MOV X0, X19
	0x01CE132C MOV V8.16B, V0.16B
	0x01CE1330 MOV V9.16B, V1.16B
	0x01CE1334 MOV V10.16B, V2.16B
	0x01CE1338 BL 0x1CDF108
	0x01CE133C LDRB W8, [X21 + 0x506]
	0x01CE1340 MOV V11.16B, V0.16B
	0x01CE1344 MOV V12.16B, V1.16B
	0x01CE1348 MOV V13.16B, V2.16B
	0x01CE134C CBNZ W8, 0x1CE1364
	0x01CE1350 ADRP X0, 0x226C000
	0x01CE1354 LDR X0, [X0 + 0x488]
	0x01CE1358 BL 0x1B6E7F0
	0x01CE135C MOVZ W8, 0x1
	0x01CE1360 STRB W8, [X21 + 0x506]
	0x01CE1364 LDR X0, [X22]
	0x01CE1368 FSUB S11, S8, S11
	0x01CE136C FSUB S9, S9, S12

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2543000
	007 Move X20, 0x226D000
	008 Move W8, [X21+1596]
	009 Move X20, [X20+1144]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x226F000
	016 Move X0, [X0+3872]
	017 Call 0x1B6F7F0
	018 Move X0, 0x226F000
	019 Move X0, [X0+3632]
	020 Call 0x1B6F7F0
	021 Move X0, 0x226F000
	022 Move X0, [X0+3568]
	023 Call 0x1B6F7F0
	024 Move X0, 0x226D000
	025 Move X0, [X0+1144]
	026 Call 0x1B6F7F0
	027 Move W8, 1
	028 Move [X21+1596], W8
	029 Move X0, [X20]
	030 Move [X31], X31
	031 Move [X31+8], X31
	032 Move X20, [X19+320]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1B6F8F8
	037 Move X0, X20
	038 Move X1, X31
	039 Move X2, X31
	040 Call Object.op_Equality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {60}
	045 Move X0, [X19+320]
	046 Compare X0, 0
	047 JumpIfEqual {126}
	048 Move X1, X31
	049 Call NetPlayer.get_isDie, X0
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {68}
	054 Move X8, [X19]
	055 Move X0, X19
	056 Move X1, X31
	057 Move X9, [X8+824]
	058 Move X2, [X8+832]
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X0, X19
	061 Call ChickenController.SetIncubating, X0
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X30, [X31+16]
	065 Move X21, [X31+24]
	066 Add X31, X31, 48
	067 Return 
	068 Move X0, X19
	069 Call ChickenController.get_nestPosition, X0
	070 Move S3, 6
	071 Add X1, X31, 8
	072 Move X0, X19
	073 Move X2, X31
	074 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {92}
	079 Move X0, [X31+8]
	080 Compare X0, 0
	081 JumpIfEqual {126}
	082 Move X8, 0x226F000
	083 Move X1, [X19+320]
	084 Move X8, [X8+3872]
	085 Move X2, [X8]
	086 Call List`1<Object>.Contains, X0, X1
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {110}
	091 Move X1, [X19+320]
	092 Move X0, X19
	093 Call ChickenController.get_nestPosition, X0
	094 Move S3, 12
	095 Add X1, X31, 0
	096 Move X0, X19
	097 Move X2, X31
	098 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	099 Move TEMP, X0
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfEqual {62}
	103 Move X0, X19
	104 Call ChickenController.get_distanceToNest, X0
	105 Move X8, -19099648
	106 Move V1, [X8+2736]
	107 NotImplemented "Instruction FCMP not yet implemented."
	108 Move X0, X19
	109 Call ChickenController.SetBackToNest, X0
	110 Move X20, [X31+8]
	111 Compare X20, 0
	112 JumpIfEqual {126}
	113 Move W1, [X20+24]
	114 Move W0, W31
	115 Move X2, X31
	116 Call Random.Range, X0, X1
	117 Move X8, 0x226F000
	118 Move X8, [X8+3568]
	119 Move W1, W0
	120 Move X0, X20
	121 Move X2, [X8]
	122 Call List`1<Object>.get_Item, X0, X1
	123 Move X1, X0
	124 Move X0, X19
	125 Call ChickenController.SetChasing, X0, X1
	126 Call 0x1B6FA1C

Method: System.Void SetChasing(AnimalCompany.NetPlayer targetPlayer)

Disassembly:
	0x01CE16AC BL 0x2124C78
	0x01CE16B0 LDR X0, [X31 + 0x8]
	0x01CE16B4 CBZ X0, 0x1CE16EC
	0x01CE16B8 ADRP X9, 0x226D000
	0x01CE16BC LDR X9, [X9 + 0x2A8]
	0x01CE16C0 LDR X8, [X0]
	0x01CE16C4 LDR X1, [X9]
	0x01CE16C8 LDRB W10, [X8 + 0x130]
	0x01CE16CC LDRB W9, [X1 + 0x130]
	0x01CE16D0 CMP W10, W9
	0x01CE16D4 B.CC 0x1CE16F8
	0x01CE16D8 LDR X8, [X8 + 0xC8]
	0x01CE16DC ADD X8, X8, X9, 0x3, LSL
	0x01CE16E0 LDUR X8, [X8 - 0x8]
	0x01CE16E4 CMP X8, X1
	0x01CE16E8 B.NE 0x1CE16F8
	0x01CE16EC LDP X20, X19, [X31 + 0x10]
	0x01CE16F0 LDR X30, [X31], #0x20
	0x01CE16F4 RET
	0x01CE16F8 BL 0x1B6ECDC
	0x01CE16FC ADRP X0, 0x226C000
	0x01CE1700 LDR X0, [X0 + 0x490]
	0x01CE1704 BL 0x1B6E804
	0x01CE1708 BL 0x1B6EA0C
	0x01CE170C MOV X19, X0
	0x01CE1710 ADRP X0, 0x226E000
	0x01CE1714 LDR X0, [X0 + 0xF48]
	0x01CE1718 BL 0x1B6E804
	0x01CE171C MOV X1, X0
	0x01CE1720 MOV X0, X19
	0x01CE1724 MOV X2, X31
	0x01CE1728 BL 0x31E7550
	0x01CE172C ADRP X0, 0x226E000
	0x01CE1730 LDR X0, [X0 + 0xF50]
	0x01CE1734 BL 0x1B6E804
	0x01CE1738 MOV X1, X0
	0x01CE173C MOV X0, X19
	0x01CE1740 BL 0x1B6E8E8
	0x01CE1744 STP X30, X21, [X31 - 0x20]!
	0x01CE1748 STP X20, X19, [X31 + 0x10]
	0x01CE174C ADRP X21, 0x2542000
	0x01CE1750 LDRB W8, [X21 + 0x647]
	0x01CE1754 MOV X19, X1
	0x01CE1758 MOV X20, X0
	0x01CE175C TBNZ X8, 0x0, 0x1CE1774
	0x01CE1760 ADRP X0, 0x226E000
	0x01CE1764 LDR X0, [X0 + 0xF58]
	0x01CE1768 BL 0x1B6E7F0
	0x01CE176C MOVZ W8, 0x1
	0x01CE1770 STRB W8, [X21 + 0x647]
	0x01CE1774 LDR X8, [X20 + 0x50]
	0x01CE1778 CBZ X8, 0x1CE17A8
	0x01CE177C ADRP X20, 0x226E000
	0x01CE1780 LDR X20, [X20 + 0xF58]
	0x01CE1784 ADD X1, X8, 0x78

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move W1, 3
	006 Move X19, X0
	007 Call ChickenController.set_phase, X0, X1
	008 Move X8, [X19+184]
	009 Compare X8, 0
	010 JumpIfEqual {66}
	011 Move V0, [X8+40]
	012 Move X0, X19
	013 Move X1, X31
	014 Call MobController.set__timerAttackInterval, X0, V0
	015 Move X8, [X19]
	016 Move X0, X19
	017 Move X1, X20
	018 Move X9, [X8+824]
	019 Move X2, [X8+832]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Compare X20, 0
	022 JumpIfEqual {66}
	023 Move X0, X20
	024 Move X1, X31
	025 Call Component.get_transform, X0
	026 Compare X0, 0
	027 JumpIfEqual {66}
	028 Move X1, X31
	029 Call Transform.get_position, X0
	030 Move X0, X19
	031 Move X1, X31
	032 Call MobController.set__positionThatPlayerStayed, X0, X1
	033 Move X9, [X19+184]
	034 Compare X9, 0
	035 JumpIfEqual {66}
	036 Move X8, [X9+56]
	037 Compare X8, 0
	038 JumpIfEqual {66}
	039 Move W10, [X8+24]
	040 Compare W10, 0
	041 JumpIfEqual {67}
	042 Move X10, [X9+88]
	043 Compare X10, 0
	044 JumpIfEqual {66}
	045 Move W11, [X10+24]
	046 Compare W11, 0
	047 JumpIfEqual {67}
	048 Move X9, [X9+96]
	049 Compare X9, 0
	050 JumpIfEqual {66}
	051 Move W11, [X9+24]
	052 Compare W11, 0
	053 JumpIfEqual {67}
	054 Move X11, [X19]
	055 Move V0, [X8+32]
	056 Move V1, [X10+32]
	057 Move V2, [X9+32]
	058 Move X3, [X11+680]
	059 Move X2, [X11+688]
	060 Move X0, X19
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move W1, W31
	064 Move X30, [X31+32]
	065 CallNoReturn X3
	066 Call 0x1B6FA1C
	067 Call 0x1B6FA24

Method: System.Void UpdateChasing()

Disassembly:
	0x01CE1788 MOV X0, X19
	0x01CE178C MOV X2, X31
	0x01CE1790 BL 0x1D65D90
	0x01CE1794 LDR X2, [X20]
	0x01CE1798 LDP X20, X19, [X31 + 0x10]
	0x01CE179C MOVZ W1, 0x8
	0x01CE17A0 LDP X30, X21, [X31], #0x20
	0x01CE17A4 B 0x2124EA8
	0x01CE17A8 ADRP X0, 0x226C000
	0x01CE17AC LDR X0, [X0 + 0x490]
	0x01CE17B0 BL 0x1B6E804
	0x01CE17B4 BL 0x1B6EA0C
	0x01CE17B8 MOV X19, X0
	0x01CE17BC ADRP X0, 0x226E000
	0x01CE17C0 LDR X0, [X0 + 0xF48]
	0x01CE17C4 BL 0x1B6E804
	0x01CE17C8 MOV X1, X0
	0x01CE17CC MOV X0, X19
	0x01CE17D0 MOV X2, X31
	0x01CE17D4 BL 0x31E7550
	0x01CE17D8 ADRP X0, 0x226E000
	0x01CE17DC LDR X0, [X0 + 0xF60]
	0x01CE17E0 BL 0x1B6E804
	0x01CE17E4 MOV X1, X0
	0x01CE17E8 MOV X0, X19
	0x01CE17EC BL 0x1B6E8E8
	0x01CE17F0 STP X30, X19, [X31 - 0x10]!
	0x01CE17F4 LDR X8, [X0 + 0x50]
	0x01CE17F8 CBZ X8, 0x1CE1810
	0x01CE17FC LDR W8, [X8 + 0x80]
	0x01CE1800 CMP W8, 0x0
	0x01CE1804 CSET W0, NE
	0x01CE1808 LDP X30, X19, [X31], #0x10
	0x01CE180C RET
	0x01CE1810 ADRP X0, 0x226C000
	0x01CE1814 LDR X0, [X0 + 0x490]
	0x01CE1818 BL 0x1B6E804
	0x01CE181C BL 0x1B6EA0C
	0x01CE1820 MOV X19, X0
	0x01CE1824 ADRP X0, 0x226E000
	0x01CE1828 LDR X0, [X0 + 0xF68]
	0x01CE182C BL 0x1B6E804
	0x01CE1830 MOV X1, X0
	0x01CE1834 MOV X0, X19
	0x01CE1838 MOV X2, X31
	0x01CE183C BL 0x31E7550
	0x01CE1840 ADRP X0, 0x226E000
	0x01CE1844 LDR X0, [X0 + 0xF70]
	0x01CE1848 BL 0x1B6E804
	0x01CE184C MOV X1, X0
	0x01CE1850 MOV X0, X19
	0x01CE1854 BL 0x1B6E8E8
	0x01CE1858 STP X30, X19, [X31 - 0x10]!
	0x01CE185C LDR X8, [X0 + 0x50]
	0x01CE1860 CBZ X8, 0x1CE1874
	0x01CE1864 AND W9, W1, 0x1
	0x01CE1868 STR W9, [X8 + 0x80]
	0x01CE186C LDP X30, X19, [X31], #0x10
	0x01CE1870 RET
	0x01CE1874 ADRP X0, 0x226C000
	0x01CE1878 LDR X0, [X0 + 0x490]
	0x01CE187C BL 0x1B6E804
	0x01CE1880 BL 0x1B6EA0C
	0x01CE1884 MOV X19, X0
	0x01CE1888 ADRP X0, 0x226E000
	0x01CE188C LDR X0, [X0 + 0xF68]
	0x01CE1890 BL 0x1B6E804
	0x01CE1894 MOV X1, X0
	0x01CE1898 MOV X0, X19
	0x01CE189C MOV X2, X31
	0x01CE18A0 BL 0x31E7550
	0x01CE18A4 ADRP X0, 0x226E000
	0x01CE18A8 LDR X0, [X0 + 0xF78]
	0x01CE18AC BL 0x1B6E804
	0x01CE18B0 MOV X1, X0
	0x01CE18B4 MOV X0, X19
	0x01CE18B8 BL 0x1B6E8E8
	0x01CE18BC STP X30, X19, [X31 - 0x10]!
	0x01CE18C0 LDR X8, [X0 + 0x50]
	0x01CE18C4 CBZ X8, 0x1CE18D8
	0x01CE18C8 LDP S0, S1, [X8 + 0x84]
	0x01CE18CC LDR V2, [X8 + 0x8C]
	0x01CE18D0 LDP X30, X19, [X31], #0x10
	0x01CE18D4 RET
	0x01CE18D8 ADRP X0, 0x226C000
	0x01CE18DC LDR X0, [X0 + 0x490]
	0x01CE18E0 BL 0x1B6E804
	0x01CE18E4 BL 0x1B6EA0C
	0x01CE18E8 MOV X19, X0
	0x01CE18EC ADRP X0, 0x226E000
	0x01CE18F0 LDR X0, [X0 + 0xF80]
	0x01CE18F4 BL 0x1B6E804
	0x01CE18F8 MOV X1, X0
	0x01CE18FC MOV X0, X19
	0x01CE1900 MOV X2, X31
	0x01CE1904 BL 0x31E7550
	0x01CE1908 ADRP X0, 0x226E000
	0x01CE190C LDR X0, [X0 + 0xF88]
	0x01CE1910 BL 0x1B6E804
	0x01CE1914 MOV X1, X0
	0x01CE1918 MOV X0, X19
	0x01CE191C BL 0x1B6E8E8
	0x01CE1920 STP X30, X19, [X31 - 0x10]!
	0x01CE1924 LDR X8, [X0 + 0x50]
	0x01CE1928 CBZ X8, 0x1CE193C
	0x01CE192C STP S0, S1, [X8 + 0x84]
	0x01CE1930 STR S2, [X8 + 0x8C]
	0x01CE1934 LDP X30, X19, [X31], #0x10
	0x01CE1938 RET
	0x01CE193C ADRP X0, 0x226C000
	0x01CE1940 LDR X0, [X0 + 0x490]
	0x01CE1944 BL 0x1B6E804
	0x01CE1948 BL 0x1B6EA0C
	0x01CE194C MOV X19, X0
	0x01CE1950 ADRP X0, 0x226E000
	0x01CE1954 LDR X0, [X0 + 0xF80]
	0x01CE1958 BL 0x1B6E804
	0x01CE195C MOV X1, X0
	0x01CE1960 MOV X0, X19
	0x01CE1964 MOV X2, X31
	0x01CE1968 BL 0x31E7550
	0x01CE196C ADRP X0, 0x226E000
	0x01CE1970 LDR X0, [X0 + 0xF90]
	0x01CE1974 BL 0x1B6E804
	0x01CE1978 MOV X1, X0
	0x01CE197C MOV X0, X19
	0x01CE1980 BL 0x1B6E8E8
	0x01CE1984 STP X30, X19, [X31 - 0x10]!
	0x01CE1988 LDR X8, [X0 + 0x50]
	0x01CE198C CBZ X8, 0x1CE199C
	0x01CE1990 LDR V0, [X8 + 0x90]
	0x01CE1994 LDP X30, X19, [X31], #0x10
	0x01CE1998 RET
	0x01CE199C ADRP X0, 0x226C000
	0x01CE19A0 LDR X0, [X0 + 0x490]
	0x01CE19A4 BL 0x1B6E804
	0x01CE19A8 BL 0x1B6EA0C
	0x01CE19AC MOV X19, X0
	0x01CE19B0 ADRP X0, 0x226E000
	0x01CE19B4 LDR X0, [X0 + 0xF98]
	0x01CE19B8 BL 0x1B6E804
	0x01CE19BC MOV X1, X0
	0x01CE19C0 MOV X0, X19
	0x01CE19C4 MOV X2, X31
	0x01CE19C8 BL 0x31E7550
	0x01CE19CC ADRP X0, 0x226E000
	0x01CE19D0 LDR X0, [X0 + 0xFA0]
	0x01CE19D4 BL 0x1B6E804
	0x01CE19D8 MOV X1, X0
	0x01CE19DC MOV X0, X19
	0x01CE19E0 BL 0x1B6E8E8
	0x01CE19E4 STP X30, X19, [X31 - 0x10]!
	0x01CE19E8 LDR X8, [X0 + 0x50]
	0x01CE19EC CBZ X8, 0x1CE19FC
	0x01CE19F0 STR S0, [X8 + 0x90]
	0x01CE19F4 LDP X30, X19, [X31], #0x10
	0x01CE19F8 RET
	0x01CE19FC ADRP X0, 0x226C000
	0x01CE1A00 LDR X0, [X0 + 0x490]
	0x01CE1A04 BL 0x1B6E804
	0x01CE1A08 BL 0x1B6EA0C
	0x01CE1A0C MOV X19, X0
	0x01CE1A10 ADRP X0, 0x226E000
	0x01CE1A14 LDR X0, [X0 + 0xF98]
	0x01CE1A18 BL 0x1B6E804
	0x01CE1A1C MOV X1, X0
	0x01CE1A20 MOV X0, X19
	0x01CE1A24 MOV X2, X31
	0x01CE1A28 BL 0x31E7550
	0x01CE1A2C ADRP X0, 0x226E000
	0x01CE1A30 LDR X0, [X0 + 0xFA8]
	0x01CE1A34 BL 0x1B6E804
	0x01CE1A38 MOV X1, X0
	0x01CE1A3C MOV X0, X19
	0x01CE1A40 BL 0x1B6E8E8
	0x01CE1A44 STP X30, X19, [X31 - 0x10]!
	0x01CE1A48 LDR X8, [X0 + 0x50]
	0x01CE1A4C CBZ X8, 0x1CE1A5C
	0x01CE1A50 LDR W0, [X8 + 0x94]
	0x01CE1A54 LDP X30, X19, [X31], #0x10
	0x01CE1A58 RET
	0x01CE1A5C ADRP X0, 0x226C000
	0x01CE1A60 LDR X0, [X0 + 0x490]
	0x01CE1A64 BL 0x1B6E804
	0x01CE1A68 BL 0x1B6EA0C
	0x01CE1A6C MOV X19, X0
	0x01CE1A70 ADRP X0, 0x226E000
	0x01CE1A74 LDR X0, [X0 + 0xFB0]
	0x01CE1A78 BL 0x1B6E804
	0x01CE1A7C MOV X1, X0
	0x01CE1A80 MOV X0, X19
	0x01CE1A84 MOV X2, X31
	0x01CE1A88 BL 0x31E7550
	0x01CE1A8C ADRP X0, 0x226E000
	0x01CE1A90 LDR X0, [X0 + 0xFB8]
	0x01CE1A94 BL 0x1B6E804
	0x01CE1A98 MOV X1, X0
	0x01CE1A9C MOV X0, X19
	0x01CE1AA0 BL 0x1B6E8E8
	0x01CE1AA4 STP X30, X19, [X31 - 0x10]!
	0x01CE1AA8 LDR X8, [X0 + 0x50]
	0x01CE1AAC CBZ X8, 0x1CE1ABC
	0x01CE1AB0 STR W1, [X8 + 0x94]
	0x01CE1AB4 LDP X30, X19, [X31], #0x10
	0x01CE1AB8 RET
	0x01CE1ABC ADRP X0, 0x226C000
	0x01CE1AC0 LDR X0, [X0 + 0x490]
	0x01CE1AC4 BL 0x1B6E804
	0x01CE1AC8 BL 0x1B6EA0C
	0x01CE1ACC MOV X19, X0
	0x01CE1AD0 ADRP X0, 0x226E000
	0x01CE1AD4 LDR X0, [X0 + 0xFB0]
	0x01CE1AD8 BL 0x1B6E804
	0x01CE1ADC MOV X1, X0
	0x01CE1AE0 MOV X0, X19
	0x01CE1AE4 MOV X2, X31
	0x01CE1AE8 BL 0x31E7550
	0x01CE1AEC ADRP X0, 0x226E000
	0x01CE1AF0 LDR X0, [X0 + 0xFC0]
	0x01CE1AF4 BL 0x1B6E804
	0x01CE1AF8 MOV X1, X0
	0x01CE1AFC MOV X0, X19
	0x01CE1B00 BL 0x1B6E8E8
	0x01CE1B04 STP X30, X19, [X31 - 0x10]!
	0x01CE1B08 LDR X8, [X0 + 0x50]
	0x01CE1B0C CBZ X8, 0x1CE1B24
	0x01CE1B10 LDR W8, [X8 + 0x98]
	0x01CE1B14 CMP W8, 0x0
	0x01CE1B18 CSET W0, NE
	0x01CE1B1C LDP X30, X19, [X31], #0x10
	0x01CE1B20 RET
	0x01CE1B24 ADRP X0, 0x226C000
	0x01CE1B28 LDR X0, [X0 + 0x490]
	0x01CE1B2C BL 0x1B6E804
	0x01CE1B30 BL 0x1B6EA0C
	0x01CE1B34 MOV X19, X0
	0x01CE1B38 ADRP X0, 0x226E000
	0x01CE1B3C LDR X0, [X0 + 0xFC8]
	0x01CE1B40 BL 0x1B6E804
	0x01CE1B44 MOV X1, X0
	0x01CE1B48 MOV X0, X19
	0x01CE1B4C MOV X2, X31
	0x01CE1B50 BL 0x31E7550
	0x01CE1B54 ADRP X0, 0x226E000
	0x01CE1B58 LDR X0, [X0 + 0xFD0]
	0x01CE1B5C BL 0x1B6E804
	0x01CE1B60 MOV X1, X0
	0x01CE1B64 MOV X0, X19
	0x01CE1B68 BL 0x1B6E8E8
	0x01CE1B6C STP X30, X19, [X31 - 0x10]!
	0x01CE1B70 LDR X8, [X0 + 0x50]
	0x01CE1B74 CBZ X8, 0x1CE1B88
	0x01CE1B78 AND W9, W1, 0x1
	0x01CE1B7C STR W9, [X8 + 0x98]
	0x01CE1B80 LDP X30, X19, [X31], #0x10
	0x01CE1B84 RET
	0x01CE1B88 ADRP X0, 0x226C000
	0x01CE1B8C LDR X0, [X0 + 0x490]
	0x01CE1B90 BL 0x1B6E804
	0x01CE1B94 BL 0x1B6EA0C
	0x01CE1B98 MOV X19, X0
	0x01CE1B9C ADRP X0, 0x226E000
	0x01CE1BA0 LDR X0, [X0 + 0xFC8]
	0x01CE1BA4 BL 0x1B6E804
	0x01CE1BA8 MOV X1, X0
	0x01CE1BAC MOV X0, X19
	0x01CE1BB0 MOV X2, X31
	0x01CE1BB4 BL 0x31E7550
	0x01CE1BB8 ADRP X0, 0x226E000
	0x01CE1BBC LDR X0, [X0 + 0xFD8]
	0x01CE1BC0 BL 0x1B6E804
	0x01CE1BC4 MOV X1, X0
	0x01CE1BC8 MOV X0, X19
	0x01CE1BCC BL 0x1B6E8E8
	0x01CE1BD0 STP X30, X19, [X31 - 0x10]!
	0x01CE1BD4 LDR X8, [X0 + 0x50]
	0x01CE1BD8 CBZ X8, 0x1CE1BE8
	0x01CE1BDC LDR W0, [X8 + 0x9C]
	0x01CE1BE0 LDP X30, X19, [X31], #0x10
	0x01CE1BE4 RET
	0x01CE1BE8 ADRP X0, 0x226C000
	0x01CE1BEC LDR X0, [X0 + 0x490]
	0x01CE1BF0 BL 0x1B6E804
	0x01CE1BF4 BL 0x1B6EA0C
	0x01CE1BF8 MOV X19, X0
	0x01CE1BFC ADRP X0, 0x226E000
	0x01CE1C00 LDR X0, [X0 + 0xFE0]
	0x01CE1C04 BL 0x1B6E804
	0x01CE1C08 MOV X1, X0
	0x01CE1C0C MOV X0, X19
	0x01CE1C10 MOV X2, X31
	0x01CE1C14 BL 0x31E7550
	0x01CE1C18 ADRP X0, 0x226E000
	0x01CE1C1C LDR X0, [X0 + 0xFE8]
	0x01CE1C20 BL 0x1B6E804
	0x01CE1C24 MOV X1, X0
	0x01CE1C28 MOV X0, X19
	0x01CE1C2C BL 0x1B6E8E8
	0x01CE1C30 STP X30, X19, [X31 - 0x10]!
	0x01CE1C34 LDR X8, [X0 + 0x50]
	0x01CE1C38 CBZ X8, 0x1CE1C48
	0x01CE1C3C STR W1, [X8 + 0x9C]
	0x01CE1C40 LDP X30, X19, [X31], #0x10
	0x01CE1C44 RET
	0x01CE1C48 ADRP X0, 0x226C000
	0x01CE1C4C LDR X0, [X0 + 0x490]
	0x01CE1C50 BL 0x1B6E804
	0x01CE1C54 BL 0x1B6EA0C
	0x01CE1C58 MOV X19, X0
	0x01CE1C5C ADRP X0, 0x226E000
	0x01CE1C60 LDR X0, [X0 + 0xFE0]
	0x01CE1C64 BL 0x1B6E804
	0x01CE1C68 MOV X1, X0
	0x01CE1C6C MOV X0, X19
	0x01CE1C70 MOV X2, X31
	0x01CE1C74 BL 0x31E7550
	0x01CE1C78 ADRP X0, 0x226E000
	0x01CE1C7C LDR X0, [X0 + 0xFF0]
	0x01CE1C80 BL 0x1B6E804
	0x01CE1C84 MOV X1, X0
	0x01CE1C88 MOV X0, X19
	0x01CE1C8C BL 0x1B6E8E8
	0x01CE1C90 SUB X31, X31, 0x80
	0x01CE1C94 STR X30, [X31 + 0x40]
	0x01CE1C98 STP X24, X23, [X31 + 0x50]
	0x01CE1C9C STP X22, X21, [X31 + 0x60]
	0x01CE1CA0 STP X20, X19, [X31 + 0x70]
	0x01CE1CA4 ADRP X20, 0x2542000
	0x01CE1CA8 LDRB W8, [X20 + 0x648]
	0x01CE1CAC MOV X19, X0
	0x01CE1CB0 TBNZ X8, 0x0, 0x1CE1CE0
	0x01CE1CB4 ADRP X0, 0x226E000
	0x01CE1CB8 LDR X0, [X0 + 0xFF8]
	0x01CE1CBC BL 0x1B6E7F0
	0x01CE1CC0 ADRP X0, 0x226F000
	0x01CE1CC4 LDR X0, [X0]
	0x01CE1CC8 BL 0x1B6E7F0
	0x01CE1CCC ADRP X0, 0x226F000
	0x01CE1CD0 LDR X0, [X0 + 0x8]
	0x01CE1CD4 BL 0x1B6E7F0
	0x01CE1CD8 MOVZ W8, 0x1
	0x01CE1CDC STRB W8, [X20 + 0x648]
	0x01CE1CE0 MOV X0, X19
	0x01CE1CE4 MOV X1, X31
	0x01CE1CE8 STP X31, X31, [X31 + 0x20]
	0x01CE1CEC STR X31, [X31 + 0x30]
	0x01CE1CF0 BL 0x1D65284
	0x01CE1CF4 LDR X0, [X19 + 0x40]
	0x01CE1CF8 CBZ X0, 0x1CE1E04
	0x01CE1CFC LDRB W8, [X0 + 0x60]
	0x01CE1D00 TBNZ X8, 0x1, 0x1CE1E04
	0x01CE1D04 MOV X1, X31
	0x01CE1D08 BL 0x1D9E780
	0x01CE1D0C TBZ X0, 0x0, 0x1CE1E04
	0x01CE1D10 MOVZ W1, 0x64
	0x01CE1D14 MOV X0, X19
	0x01CE1D18 BL 0x1CE1AA4
	0x01CE1D1C LDR X0, [X19 + 0x80]
	0x01CE1D20 CBZ X0, 0x1CE1DBC
	0x01CE1D24 MOVZ W1, 0x1
	0x01CE1D28 MOV X2, X31
	0x01CE1D2C MOVZ W22, 0x1
	0x01CE1D30 BL 0x3A9D9A8
	0x01CE1D34 LDR X0, [X19 + 0xD8]
	0x01CE1D38 CBZ X0, 0x1CE1DBC
	0x01CE1D3C ADRP X21, 0x226C000
	0x01CE1D40 ADRP X24, 0x226F000
	0x01CE1D44 LDR X21, [X21 + 0x480]
	0x01CE1D48 LDR X24, [X24 + 0x8]
	0x01CE1D4C MOV W20, W31
	0x01CE1D50 ADRP X23, 0x2542000
	0x01CE1D54 LDR W8, [X0 + 0x18]
	0x01CE1D58 CMP W20, W8
	0x01CE1D5C B.GE 0x1CE1DC0
	0x01CE1D60 ADD X8, X31, 0x8
	0x01CE1D64 MOV X0, X19
	0x01CE1D68 BL 0x1CE158C
	0x01CE1D6C LDUR V0, [X31 + 0x8]
	0x01CE1D70 LDR X8, [X31 + 0x18]
	0x01CE1D74 LDRB W9, [X23 + 0x43F]
	0x01CE1D78 STR V0, [X31 + 0x2]
	0x01CE1D7C STR X8, [X31 + 0x30]
	0x01CE1D80 CBNZ W9, 0x1CE1D90
	0x01CE1D84 MOV X0, X21
	0x01CE1D88 BL 0x1B6E7F0
	0x01CE1D8C STRB W22, [X23 + 0x43F]
	0x01CE1D90 LDR X8, [X21]
	0x01CE1D94 LDR X2, [X24]
	0x01CE1D98 ADD X0, X31, 0x20
	0x01CE1D9C MOV W1, W20
	0x01CE1DA0 LDR X8, [X8 + 0xB8]
	0x01CE1DA4 LDP S0, S1, [X8]
	0x01CE1DA8 LDR V2, [X8 + 0x8]
	0x01CE1DAC BL 0x22B1F94
	0x01CE1DB0 LDR X0, [X19 + 0xD8]
	0x01CE1DB4 ADD W20, W20, 0x1
	0x01CE1DB8 CBNZ X0, 0x1CE1D54
	0x01CE1DBC BL 0x1B6EA1C
	0x01CE1DC0 CMP W8, 0x1
	0x01CE1DC4 B.LT 0x1CE1E04
	0x01CE1DC8 ADRP X21, 0x226F000
	0x01CE1DCC LDR X21, [X21]
	0x01CE1DD0 MOV W20, W31
	0x01CE1DD4 LDR X2, [X21]
	0x01CE1DD8 MOV W1, W20
	0x01CE1DDC BL 0x2E46254
	0x01CE1DE0 MOV X1, X0
	0x01CE1DE4 MOV X0, X19
	0x01CE1DE8 BL 0x1CE1E1C
	0x01CE1DEC LDR X0, [X19 + 0xD8]
	0x01CE1DF0 CBZ X0, 0x1CE1DBC
	0x01CE1DF4 LDR W8, [X0 + 0x18]
	0x01CE1DF8 ADD W20, W20, 0x1
	0x01CE1DFC CMP W20, W8
	0x01CE1E00 B.LT 0x1CE1DD4
	0x01CE1E04 LDP X20, X19, [X31 + 0x70]
	0x01CE1E08 LDP X22, X21, [X31 + 0x60]
	0x01CE1E0C LDP X24, X23, [X31 + 0x50]
	0x01CE1E10 LDR X30, [X31 + 0x40]
	0x01CE1E14 ADD X31, X31, 0x80
	0x01CE1E18 RET
	0x01CE1E1C SUB X31, X31, 0xE0
	0x01CE1E20 STP D13, D12, [X31 + 0x80]
	0x01CE1E24 STP D11, D10, [X31 + 0x90]
	0x01CE1E28 STP D9, D8, [X31 + 0xA0]
	0x01CE1E2C STR X30, [X31 + 0xB0]
	0x01CE1E30 STP X22, X21, [X31 + 0xC0]
	0x01CE1E34 STP X20, X19, [X31 + 0xD0]
	0x01CE1E38 ADRP X21, 0x2542000
	0x01CE1E3C LDRB W8, [X21 + 0x64C]
	0x01CE1E40 MOV X20, X1
	0x01CE1E44 MOV X19, X0
	0x01CE1E48 TBNZ X8, 0x0, 0x1CE1E84
	0x01CE1E4C ADRP X0, 0x226D000
	0x01CE1E50 LDR X0, [X0 + 0x3D8]
	0x01CE1E54 BL 0x1B6E7F0
	0x01CE1E58 ADRP X0, 0x226F000
	0x01CE1E5C LDR X0, [X0 + 0x10]
	0x01CE1E60 BL 0x1B6E7F0
	0x01CE1E64 ADRP X0, 0x226F000
	0x01CE1E68 LDR X0, [X0 + 0x8]
	0x01CE1E6C BL 0x1B6E7F0
	0x01CE1E70 ADRP X0, 0x226C000
	0x01CE1E74 LDR X0, [X0 + 0x4C0]
	0x01CE1E78 BL 0x1B6E7F0
	0x01CE1E7C MOVZ W8, 0x1
	0x01CE1E80 STRB W8, [X21 + 0x64C]
	0x01CE1E84 MOVI V0.2D, 0x0
	0x01CE1E88 MOV X0, X31
	0x01CE1E8C STP X31, X31, [X31 + 0x30]
	0x01CE1E90 STUR V0, [X31 + 0x6C]
	0x01CE1E94 STP V0, V0, [X31 + 0x50]
	0x01CE1E98 STR X31, [X31 + 0x40]
	0x01CE1E9C BL 0x3A98E48
	0x01CE1EA0 MOV X0, X19
	0x01CE1EA4 MOV X1, X31
	0x01CE1EA8 MOV V11.16B, V0.16B
	0x01CE1EAC MOV V12.16B, V1.16B

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X23
	012 Move [X31+112], X22
	013 Move [X31+120], X21
	014 Move [X31+128], X20
	015 Move [X31+136], X19
	016 Move X20, 0x2543000
	017 Move X21, 0x226D000
	018 Move W8, [X20+1597]
	019 Move X21, [X21+1144]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x226D000
	026 Move X0, [X0+1144]
	027 Call 0x1B6F7F0
	028 Move W8, 1
	029 Move [X20+1597], W8
	030 Move X0, [X21]
	031 Move X20, [X19+320]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1B6F8F8
	036 Move X0, X20
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Inequality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {88}
	044 Move X0, [X19+320]
	045 Compare X0, 0
	046 JumpIfEqual {535}
	047 Move X1, X31
	048 Call NetPlayer.get_isDie, X0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {59}
	053 Move X8, [X19]
	054 Move X0, X19
	055 Move X1, X31
	056 Move X9, [X8+824]
	057 Move X2, [X8+832]
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move X0, X19
	060 Call ChickenController.GetIsEggStolen, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {88}
	065 Move X0, X19
	066 Call ChickenController.get_distanceToNest, X0
	067 Move W8, 0x420C0000
	068 Move S1, W8
	069 NotImplemented "Instruction FCMP not yet implemented."
	070 Move X0, X19
	071 Move X20, [X31+128]
	072 Move X19, [X31+136]
	073 Move X22, [X31+112]
	074 Move X21, [X31+120]
	075 Move X30, [X31+96]
	076 Move X23, [X31+104]
	077 Move D9, [X31+80]
	078 Move D8, [X31+88]
	079 Move D11, [X31+64]
	080 Move D10, [X31+72]
	081 Move D13, [X31+48]
	082 Move D12, [X31+56]
	083 Move D15, [X31+32]
	084 Move D14, [X31+40]
	085 Add X31, X31, 144
	086 Call ChickenController.SetBackToNest, X0
	087 Return 
	088 Move X0, X19
	089 Move X1, X31
	090 Call MobController.UpdateChasing, X0
	091 Move X0, X19
	092 Move X1, X31
	093 Call MobController.get__timerAttackInterval, X0
	094 Move X0, X19
	095 Move X1, X31
	096 Move V8, V0
	097 Call MobController.get_deltaTime, X0
	098 Add S0, S8, S0
	099 Move X0, X19
	100 Move X1, X31
	101 Call MobController.set__timerAttackInterval, X0, V0
	102 Move X0, [X21]
	103 Move X20, [X19+320]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1B6F8F8
	108 Move X0, X20
	109 Move X1, X31
	110 Move X2, X31
	111 Call Object.op_Inequality, X0, X1
	112 Move TEMP, X0
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {200}
	116 Move X0, X19
	117 Call ChickenController.get__attackPosition, X0
	118 Move X0, X31
	119 Call Extensions.Flatten, X0
	120 Move X0, [X19+320]
	121 Compare X0, 0
	122 JumpIfEqual {535}
	123 Move X1, X31
	124 Move V8, V0
	125 Move V9, V1
	126 Move V10, V2
	127 Call Component.get_transform, X0
	128 Compare X0, 0
	129 JumpIfEqual {535}
	130 Move X1, X31
	131 Call Transform.get_position, X0
	132 Move X0, X31
	133 Call Extensions.Flatten, X0
	134 Move X0, X19
	135 Move V12, V0
	136 Move V13, V1
	137 Move V14, V2
	138 Call ChickenController.get__attackPosition, X0
	139 Move X0, [X19+320]
	140 Compare X0, 0
	141 JumpIfEqual {535}
	142 Move X1, X31
	143 Move V11, V1
	144 Call Component.get_transform, X0
	145 Compare X0, 0
	146 JumpIfEqual {535}
	147 Move X1, X31
	148 Call Transform.get_position, X0
	149 Move X0, X19
	150 Move X1, X31
	151 Move V15, V1
	152 Call MobController.get__timerAttackInterval, X0
	153 Move X0, [X19+184]
	154 Compare X0, 0
	155 JumpIfEqual {535}
	156 Move V1, [X0+40]
	157 NotImplemented "Instruction FCMP not yet implemented."
	158 Subtract S0, S8, S12
	159 Subtract S1, S9, S13
	160 Subtract S2, S10, S14
	161 Multiply S0, S0, S0
	162 Multiply S1, S1, S1
	163 Add S0, S0, S1
	164 Multiply S1, S2, S2
	165 Move X1, X31
	166 Add S8, S1, S0
	167 Call MobData.get_attackRangeSqr, X0
	168 NotImplemented "Instruction FCMP not yet implemented."
	169 Move X8, [X19+184]
	170 Compare X8, 0
	171 JumpIfEqual {535}
	172 Move V0, [X8+76]
	173 NotImplemented "Instruction FABD not yet implemented."
	174 NotImplemented "Instruction FCMP not yet implemented."
	175 Move S0, W31
	176 Move X0, X19
	177 Move X1, X31
	178 Call MobController.set__timerAttackInterval, X0, V0
	179 Move X8, [X19+184]
	180 Compare X8, 0
	181 JumpIfEqual {535}
	182 Move X20, [X19+320]
	183 Move W21, [X8+36]
	184 Move X0, X19
	185 Move X1, X31
	186 Call Component.get_transform, X0
	187 Move X8, [X19+184]
	188 Compare X8, 0
	189 JumpIfEqual {535}
	190 Compare X20, 0
	191 JumpIfEqual {535}
	192 Move X5, [X8+24]
	193 Move X4, [X8+184]
	194 Move X3, [X8+192]
	195 Move X2, X0
	196 Move X0, X20
	197 Move W1, W21
	198 Move X6, X31
	199 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5
	200 Move X0, X19
	201 Move X1, X31
	202 Call MobController.get__timerToChasing, X0
	203 Move X0, X19
	204 Move X1, X31
	205 Move V8, V0
	206 Call MobController.get_deltaTime, X0
	207 Add S0, S8, S0
	208 Move X0, X19
	209 Move X1, X31
	210 Call MobController.set__timerToChasing, X0, V0
	211 Move X0, X19
	212 Move X1, X31
	213 Call MobController.get__timerToChasing, X0
	214 Move X8, [X19+184]
	215 Compare X8, 0
	216 JumpIfEqual {535}
	217 Move V1, [X8+104]
	218 NotImplemented "Instruction FCMP not yet implemented."
	219 Move X0, X19
	220 Call ChickenController.SetBackToNest, X0
	221 Move X0, X19
	222 Call ChickenController.get_phase, X0
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Move X0, [X19+200]
	225 Compare X0, 0
	226 JumpIfEqual {535}
	227 Move X1, X31
	228 Call NavMeshAgent.get_pathPending, X0
	229 Move TEMP, X0
	230 And TEMP, TEMP, 1
	231 Compare TEMP, 1
	232 JumpIfNotEqual {299}
	233 Move X0, X19
	234 Move X1, X31
	235 Call MobController.get__positionThatPlayerStayed, X0
	236 Move X0, X19
	237 Move X1, X31
	238 Move V8, V0
	239 Move V9, V1
	240 Move V10, V2
	241 Call Component.get_transform, X0
	242 Compare X0, 0
	243 JumpIfEqual {535}
	244 Move X1, X31
	245 Call Transform.get_position, X0
	246 Move X21, 0x2543000
	247 Move W8, [X21+1089]
	248 Move V11, V0
	249 Move V12, V1
	250 Move V13, V2
	251 Compare W8, 0
	252 JumpIfNotEqual {258}
	253 Move X0, 0x226D000
	254 Move X0, [X0+1160]
	255 Call 0x1B6F7F0
	256 Move W8, 1
	257 Move [X21+1089], W8
	258 Move X20, 0x226D000
	259 Move X20, [X20+1160]
	260 Subtract S14, S8, S11
	261 Subtract S11, S9, S12
	262 Subtract S8, S10, S13
	263 Move X0, [X20]
	264 Move W8, [X0+224]
	265 Compare W8, 0
	266 JumpIfNotEqual {268}
	267 Call 0x1B6F8F8
	268 Move X8, -19099648
	269 Multiply S0, S14, S14
	270 Multiply S1, S11, S11
	271 Move V9, [X8+2916]
	272 Move X22, 0x226D000
	273 Multiply S2, S8, S8
	274 Add S0, S0, S1
	275 Move X22, [X22+1152]
	276 Add S0, S2, S0
	277 NotImplemented "Instruction FSQRT not yet implemented."
	278 NotImplemented "Instruction FCMP not yet implemented."
	279 Move X23, 0x2543000
	280 NotImplemented "Instruction FDIV not yet implemented."
	281 NotImplemented "Instruction FDIV not yet implemented."
	282 NotImplemented "Instruction FDIV not yet implemented."
	283 Move X20, [X31+128]
	284 Move X19, [X31+136]
	285 Move X22, [X31+112]
	286 Move X21, [X31+120]
	287 Move X30, [X31+96]
	288 Move X23, [X31+104]
	289 Move D9, [X31+80]
	290 Move D8, [X31+88]
	291 Move D11, [X31+64]
	292 Move D10, [X31+72]
	293 Move D13, [X31+48]
	294 Move D12, [X31+56]
	295 Move D15, [X31+32]
	296 Move D14, [X31+40]
	297 Add X31, X31, 144
	298 Return 
	299 Move X20, [X19+200]
	300 Move X0, X19
	301 Move X1, X31
	302 Call MobController.get__positionThatPlayerStayed, X0
	303 Compare X20, 0
	304 JumpIfEqual {535}
	305 Move X0, X20
	306 Move X20, [X31+128]
	307 Move X19, [X31+136]
	308 Move X22, [X31+112]
	309 Move X21, [X31+120]
	310 Move X30, [X31+96]
	311 Move X23, [X31+104]
	312 Move D9, [X31+80]
	313 Move D8, [X31+88]
	314 Move D11, [X31+64]
	315 Move D10, [X31+72]
	316 Move D13, [X31+48]
	317 Move D12, [X31+56]
	318 Move D15, [X31+32]
	319 Move D14, [X31+40]
	320 Move X1, X31
	321 Add X31, X31, 144
	322 Call NavMeshAgent.SetDestination, X0, X1
	323 Return 
	324 Move W8, [X23+1087]
	325 Compare W8, 0
	326 JumpIfNotEqual {332}
	327 Move X0, 0x226D000
	328 Move X0, [X0+1152]
	329 Call 0x1B6F7F0
	330 Move W8, 1
	331 Move [X23+1087], W8
	332 Move X8, [X22]
	333 Move X8, [X8+184]
	334 Move S10, [X8]
	335 Move S1, [X8+4]
	336 Move V2, [X8+8]
	337 Move V0, V10
	338 Move X0, X31
	339 Move [X31+20], S2
	340 Move [X31+28], S1
	341 Call Extensions.Flatten, X0
	342 Move W8, [X21+1089]
	343 Move V8, V0
	344 Move V12, V1
	345 Move V13, V2
	346 Compare W8, 0
	347 JumpIfNotEqual {353}
	348 Move X0, 0x226D000
	349 Move X0, [X0+1160]
	350 Call 0x1B6F7F0
	351 Move W8, 1
	352 Move [X21+1089], W8
	353 Move X0, [X20]
	354 Move W8, [X0+224]
	355 Compare W8, 0
	356 JumpIfNotEqual {358}
	357 Call 0x1B6F8F8
	358 Multiply S0, S8, S8
	359 Multiply S1, S12, S12
	360 Add S0, S0, S1
	361 Multiply S1, S13, S13
	362 Add S0, S1, S0
	363 NotImplemented "Instruction FSQRT not yet implemented."
	364 NotImplemented "Instruction FCMP not yet implemented."
	365 NotImplemented "Instruction FDIV not yet implemented."
	366 NotImplemented "Instruction FDIV not yet implemented."
	367 NotImplemented "Instruction FDIV not yet implemented."
	368 Move W8, [X23+1087]
	369 Compare W8, 0
	370 JumpIfNotEqual {376}
	371 Move X0, 0x226D000
	372 Move X0, [X0+1152]
	373 Call 0x1B6F7F0
	374 Move W8, 1
	375 Move [X23+1087], W8
	376 Move X8, [X22]
	377 Move X8, [X8+184]
	378 Move S11, [X8]
	379 Move S12, [X8+4]
	380 Move V13, [X8+8]
	381 Move X8, [X19+184]
	382 Compare X8, 0
	383 JumpIfEqual {535}
	384 Move V0, [X8+64]
	385 Move X0, X19
	386 Move X1, X31
	387 Move [X31+28], S0
	388 Call Component.get_transform, X0
	389 Compare X0, 0
	390 JumpIfEqual {535}
	391 Move X1, X31
	392 Move [X31+16], S10
	393 Call Transform.get_forward, X0
	394 Move X21, 0x2543000
	395 Move W8, [X21+1111]
	396 Move V14, V0
	397 Move V15, V1
	398 Move V8, V2
	399 Compare W8, 0
	400 JumpIfNotEqual {406}
	401 Move X0, 0x226D000
	402 Move X0, [X0+1160]
	403 Call 0x1B6F7F0
	404 Move W8, 1
	405 Move [X21+1111], W8
	406 Move X0, [X20]
	407 Multiply S0, S11, S11
	408 Multiply S1, S12, S12
	409 Add S0, S0, S1
	410 Multiply S1, S13, S13
	411 Move W8, [X0+224]
	412 Add S10, S1, S0
	413 Multiply S0, S14, S14
	414 Multiply S1, S15, S15
	415 Add S0, S0, S1
	416 Multiply S1, S8, S8
	417 Add S9, S1, S0
	418 Compare W8, 0
	419 JumpIfNotEqual {421}
	420 Call 0x1B6F8F8
	421 Move X8, -19099648
	422 Move V1, [X8+2532]
	423 Multiply S0, S10, S9
	424 NotImplemented "Instruction FSQRT not yet implemented."
	425 Move S10, W31
	426 NotImplemented "Instruction FCMP not yet implemented."
	427 Move X0, [X20]
	428 Multiply S1, S11, S14
	429 Multiply S2, S12, S15
	430 Multiply S3, S13, S8
	431 Add S1, S1, S2
	432 Add S1, S3, S1
	433 Move W8, [X0+224]
	434 NotImplemented "Instruction FDIV not yet implemented."
	435 Move S1, 1
	436 Move S2, -1
	437 NotImplemented "Instruction FMIN not yet implemented."
	438 NotImplemented "Instruction FCMP not yet implemented."
	439 NotImplemented "Instruction FCSEL not yet implemented."
	440 Compare W8, 0
	441 JumpIfNotEqual {443}
	442 Call 0x1B6F8F8
	443 NotImplemented "Instruction FCVT not yet implemented."
	444 Call 0x3D1A890
	445 Move X8, -19099648
	446 Move V1, [X8+3612]
	447 NotImplemented "Instruction INVALID not yet implemented."
	448 Multiply S10, S0, S1
	449 Move X0, X19
	450 Move X1, X31
	451 Call Component.get_transform, X0
	452 Move X20, X0
	453 Move X0, X19
	454 Move X1, X31
	455 Call Component.get_transform, X0
	456 Compare X0, 0
	457 JumpIfEqual {535}
	458 Move V0, [X31+28]
	459 Move X1, X31
	460 NotImplemented "Instruction FDIV not yet implemented."
	461 Move [X31+28], S0
	462 Call Transform.get_rotation, X0
	463 Move V8, V0
	464 Move V14, V1
	465 Move V15, V2
	466 Move V0, V11
	467 Move V1, V12
	468 Move V2, V13
	469 Move X0, X31
	470 Move V9, V3
	471 Call Quaternion.LookRotation, X0
	472 Move X0, X19
	473 Move X1, X31
	474 Move V11, V0
	475 Move V12, V1
	476 Move V13, V2
	477 Move V10, V3
	478 Call MobController.get_deltaTime, X0
	479 Move V1, [X31+28]
	480 Move V2, V15
	481 Move V3, V9
	482 Move V4, V11
	483 Multiply S0, S1, S0
	484 Move [X31], S0
	485 Move V0, V8
	486 Move V1, V14
	487 Move V5, V12
	488 Move V6, V13
	489 Move V7, V10
	490 Move X0, X31
	491 Call Quaternion.Slerp, X0, X1, V0
	492 Compare X20, 0
	493 JumpIfEqual {535}
	494 Move X0, X20
	495 Move X1, X31
	496 Call Transform.set_rotation, X0, X1
	497 Move X20, [X19+200]
	498 Move V8, [X31+16]
	499 Compare X20, 0
	500 JumpIfEqual {535}
	501 Move X0, X20
	502 Move X1, X31
	503 Call NavMeshAgent.get_speed, X0
	504 Move V1, [X31+24]
	505 Move X0, X19
	506 Move X1, X31
	507 Multiply S8, S8, S0
	508 Multiply S9, S1, S0
	509 Move V1, [X31+20]
	510 Multiply S10, S1, S0
	511 Call MobController.get_deltaTime, X0
	512 Multiply S3, S8, S0
	513 Multiply S1, S9, S0
	514 Multiply S2, S10, S0
	515 Move X0, X20
	516 Move X20, [X31+128]
	517 Move X19, [X31+136]
	518 Move X22, [X31+112]
	519 Move X21, [X31+120]
	520 Move X30, [X31+96]
	521 Move X23, [X31+104]
	522 Move D9, [X31+80]
	523 Move D8, [X31+88]
	524 Move D11, [X31+64]
	525 Move D10, [X31+72]
	526 Move D13, [X31+48]
	527 Move D12, [X31+56]
	528 Move D15, [X31+32]
	529 Move D14, [X31+40]
	530 Move V0, V3
	531 Move X1, X31
	532 Add X31, X31, 144
	533 Call NavMeshAgent.Move, X0, X1
	534 Return 
	535 Call 0x1B6FA1C

Method: System.Void SetBackToNest()

Disassembly:
	0x01CE0CE0 FMUL S1, S12, S12
	0x01CE0CE4 FADD S0, S0, S1
	0x01CE0CE8 FMUL S1, S13, S13
	0x01CE0CEC LDR W8, [X0 + 0xE0]
	0x01CE0CF0 FADD S10, S1, S0
	0x01CE0CF4 FMUL S0, S14, S14
	0x01CE0CF8 FMUL S1, S15, S15
	0x01CE0CFC FADD S0, S0, S1
	0x01CE0D00 FMUL S1, S8, S8
	0x01CE0D04 FADD S9, S1, S0
	0x01CE0D08 CBNZ W8, 0x1CE0D10
	0x01CE0D0C BL 0x1B6E8F8
	0x01CE0D10 ADRP X8, 0xFFFFFFFFFEDC9000
	0x01CE0D14 LDR V1, [X8 + 0x9E4]
	0x01CE0D18 FMUL S0, S10, S9
	0x01CE0D1C FSQRT S0, S0
	0x01CE0D20 FMOV S10, W31
	0x01CE0D24 FCMP S0, S1
	0x01CE0D28 B.MI 0x1CE0D80
	0x01CE0D2C LDR X0, [X20]
	0x01CE0D30 FMUL S1, S11, S14
	0x01CE0D34 FMUL S2, S12, S15
	0x01CE0D38 FMUL S3, S13, S8
	0x01CE0D3C FADD S1, S1, S2
	0x01CE0D40 FADD S1, S3, S1
	0x01CE0D44 LDR W8, [X0 + 0xE0]
	0x01CE0D48 FDIV S0, S1, S0
	0x01CE0D4C FMOV S1, 1
	0x01CE0D50 FMOV S2, -1
	0x01CE0D54 FMIN S1, S0, S1
	0x01CE0D58 FCMP S0, S2
	0x01CE0D5C FCSEL S8, S1, S2, PL
	0x01CE0D60 CBNZ W8, 0x1CE0D68
	0x01CE0D64 BL 0x1B6E8F8
	0x01CE0D68 FCVT S0, S8
	0x01CE0D6C BL 0x3D19890
	0x01CE0D70 ADRP X8, 0xFFFFFFFFFEDC9000
	0x01CE0D74 LDR V1, [X8 + 0xE1C]
	0x00000000 INVALID
	0x01CE0D7C FMUL S10, S0, S1
	0x01CE0D80 MOV X0, X19
	0x01CE0D84 MOV X1, X31
	0x01CE0D88 BL 0x3A9B084
	0x01CE0D8C MOV X20, X0
	0x01CE0D90 MOV X0, X19
	0x01CE0D94 MOV X1, X31
	0x01CE0D98 BL 0x3A9B084
	0x01CE0D9C CBZ X0, 0x1CE0EAC
	0x01CE0DA0 LDR V0, [X31 + 0x1C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W1, 4
	005 Move X19, X0
	006 Call ChickenController.set_phase, X0, X1
	007 Move X8, [X19]
	008 Move X0, X19
	009 Move X1, X31
	010 Move X9, [X8+824]
	011 Move X2, [X8+832]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move S0, W31
	014 Move X0, X19
	015 Move X1, X31
	016 Call MobController.set__timerToChasing, X0, V0
	017 Move X9, [X19+184]
	018 Compare X9, 0
	019 JumpIfEqual {59}
	020 Move X8, [X9+48]
	021 Compare X8, 0
	022 JumpIfEqual {59}
	023 Move W10, [X8+24]
	024 Compare W10, 0
	025 JumpIfEqual {60}
	026 Move X10, [X9+88]
	027 Compare X10, 0
	028 JumpIfEqual {59}
	029 Move W11, [X10+24]
	030 Compare W11, 0
	031 JumpIfEqual {60}
	032 Move X9, [X9+96]
	033 Compare X9, 0
	034 JumpIfEqual {59}
	035 Move W11, [X9+24]
	036 Compare W11, 0
	037 JumpIfEqual {60}
	038 Move X11, [X19]
	039 Move V0, [X8+32]
	040 Move V1, [X10+32]
	041 Move V2, [X9+32]
	042 Move X8, [X11+680]
	043 Move X2, [X11+688]
	044 Move X0, X19
	045 Move W1, W31
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move X20, [X19+200]
	048 Move X0, X19
	049 Call ChickenController.get_nestPosition, X0
	050 Compare X20, 0
	051 JumpIfEqual {59}
	052 Move X0, X20
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X1, X31
	056 Move X30, [X31+32]
	057 Call NavMeshAgent.SetDestination, X0, X1
	058 Return 
	059 Call 0x1B6FA1C
	060 Call 0x1B6FA24

Method: System.Void UpdateBackToNest()

Disassembly:
	0x01CE1370 FSUB S8, S10, S13
	0x01CE1374 LDR W8, [X0 + 0xE0]
	0x01CE1378 CBNZ W8, 0x1CE1380
	0x01CE137C BL 0x1B6E8F8
	0x01CE1380 FMUL S0, S11, S11
	0x01CE1384 FMUL S1, S9, S9
	0x01CE1388 FADD S0, S0, S1
	0x01CE138C FMUL S1, S8, S8
	0x01CE1390 FADD S0, S1, S0
	0x01CE1394 FSQRT S0, S0
	0x01CE1398 ADD X0, X31, 0x3C
	0x01CE139C MOV X1, X31
	0x01CE13A0 BL 0x31F935C
	0x01CE13A4 LDP X20, X19, [X31 + 0x50]
	0x01CE13A8 LDP X22, X21, [X31 + 0x40]
	0x01CE13AC LDR X30, [X31 + 0x30]
	0x01CE13B0 LDP D9, D8, [X31 + 0x20]
	0x01CE13B4 LDP D11, D10, [X31 + 0x10]
	0x01CE13B8 LDP D13, D12, [X31], #0x60
	0x01CE13BC RET
	0x01CE13C0 BL 0x1B6EA1C
	0x01CE13C4 STP X30, X19, [X31 - 0x10]!
	0x01CE13C8 AND W1, W1, 0x1
	0x01CE13CC MOV X2, X31
	0x01CE13D0 MOV X19, X0
	0x01CE13D4 BL 0x1CE8140
	0x01CE13D8 LDR W1, [X19 + 0x174]
	0x01CE13DC MOV X0, X19
	0x01CE13E0 BL 0x1CDEFE8
	0x01CE13E4 LDR W1, [X19 + 0x178]
	0x01CE13E8 MOV X0, X19
	0x01CE13EC BL 0x1CDF0A8
	0x01CE13F0 LDR V0, [X19 + 0x17C]
	0x01CE13F4 LDR V1, [X19 + 0x180]
	0x01CE13F8 LDR V2, [X19 + 0x184]
	0x01CE13FC MOV X0, X19
	0x01CE1400 BL 0x1CDF16C
	0x01CE1404 LDR W1, [X19 + 0x188]
	0x01CE1408 MOV X0, X19
	0x01CE140C LDP X30, X19, [X31], #0x10
	0x01CE1410 B 0x1CDF230
	0x01CE1414 STP X30, X19, [X31 - 0x10]!
	0x01CE1418 MOV X1, X31
	0x01CE141C MOV X19, X0
	0x01CE1420 BL 0x1CE81EC
	0x01CE1424 MOV X0, X19
	0x01CE1428 BL 0x1CDEF88
	0x01CE142C STR W0, [X19 + 0x174]
	0x01CE1430 MOV X0, X19
	0x01CE1434 BL 0x1CDF048
	0x01CE1438 STR W0, [X19 + 0x178]
	0x01CE143C MOV X0, X19
	0x01CE1440 BL 0x1CDF108
	0x01CE1444 MOV X0, X19
	0x01CE1448 STR S0, [X19 + 0x17C]
	0x01CE144C STR S1, [X19 + 0x180]
	0x01CE1450 STR S2, [X19 + 0x184]
	0x01CE1454 BL 0x1CDF1D0
	0x01CE1458 STR W0, [X19 + 0x188]
	0x01CE145C LDP X30, X19, [X31], #0x10
	0x01CE1460 RET
	0x01CE1464 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2543000
	005 Move W8, [X20+1598]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x226F000
	012 Move X0, [X0+3632]
	013 Call 0x1B6F7F0
	014 Move X0, 0x226F000
	015 Move X0, [X0+3568]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1598], W8
	019 Move X0, X19
	020 Move [X31+8], X31
	021 Call ChickenController.get_nestPosition, X0
	022 Move S3, 12
	023 Add X1, X31, 8
	024 Move X0, X19
	025 Move X2, X31
	026 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {47}
	031 Move X20, [X31+8]
	032 Compare X20, 0
	033 JumpIfEqual {70}
	034 Move W1, [X20+24]
	035 Move W0, W31
	036 Move X2, X31
	037 Call Random.Range, X0, X1
	038 Move X8, 0x226F000
	039 Move X8, [X8+3568]
	040 Move W1, W0
	041 Move X0, X20
	042 Move X2, [X8]
	043 Call List`1<Object>.get_Item, X0, X1
	044 Move X1, X0
	045 Move X0, X19
	046 Call ChickenController.SetChasing, X0, X1
	047 Move X0, X19
	048 Call ChickenController.get_distanceToNest, X0
	049 Move X8, -19099648
	050 Move V1, [X8+2736]
	051 NotImplemented "Instruction FCMP not yet implemented."
	052 Move X0, X19
	053 Call ChickenController.SetIncubating, X0
	054 Move X0, X19
	055 Call ChickenController.get_distanceToNest, X0
	056 Move S1, 12
	057 NotImplemented "Instruction FCMP not yet implemented."
	058 Move X0, X19
	059 Call ChickenController.GetIsEggStolen, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {66}
	064 Move X0, X19
	065 Call ChickenController.SetSearching, X0
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move X30, [X31+32]
	069 Return 
	070 Call 0x1B6FA1C

Method: System.Void SetSearching()

Disassembly:
	0x01CE1EB0 MOV V13.16B, V2.16B
	0x01CE1EB4 BL 0x3A9B084
	0x01CE1EB8 CBZ X0, 0x1CE20DC
	0x01CE1EBC MOV X1, X31
	0x01CE1EC0 BL 0x3AA7658
	0x01CE1EC4 ADRP X21, 0x2542000
	0x01CE1EC8 LDRB W8, [X21 + 0x441]
	0x01CE1ECC MOV V8.16B, V0.16B
	0x01CE1ED0 MOV V9.16B, V1.16B
	0x01CE1ED4 MOV V10.16B, V2.16B
	0x01CE1ED8 CBNZ W8, 0x1CE1EF0
	0x01CE1EDC ADRP X0, 0x226C000
	0x01CE1EE0 LDR X0, [X0 + 0x488]
	0x01CE1EE4 BL 0x1B6E7F0
	0x01CE1EE8 MOVZ W8, 0x1
	0x01CE1EEC STRB W8, [X21 + 0x441]
	0x01CE1EF0 ADRP X8, 0x226C000
	0x01CE1EF4 LDR X8, [X8 + 0x488]
	0x01CE1EF8 LDR X0, [X8]
	0x01CE1EFC LDR W8, [X0 + 0xE0]
	0x01CE1F00 CBNZ W8, 0x1CE1F08
	0x01CE1F04 BL 0x1B6E8F8
	0x01CE1F08 FMUL S0, S11, S11
	0x01CE1F0C FMUL S1, S12, S12
	0x01CE1F10 ADRP X8, 0xFFFFFFFFFEDC8000
	0x01CE1F14 FADD S0, S0, S1
	0x01CE1F18 LDR V1, [X8 + 0xB64]
	0x01CE1F1C ADRP X21, 0x226D000
	0x01CE1F20 FMUL S2, S13, S13
	0x01CE1F24 LDR X21, [X21 + 0x3D8]
	0x01CE1F28 FADD S0, S2, S0
	0x01CE1F2C FSQRT S0, S0
	0x01CE1F30 FCMP S0, S1
	0x01CE1F34 B.LE 0x1CE1F48
	0x01CE1F38 FDIV S11, S11, S0
	0x01CE1F3C FDIV S12, S12, S0
	0x01CE1F40 FDIV S13, S13, S0
	0x01CE1F44 B 0x1CE1F80
	0x01CE1F48 ADRP X22, 0x2542000
	0x01CE1F4C LDRB W8, [X22 + 0x43F]
	0x01CE1F50 CBNZ W8, 0x1CE1F68
	0x01CE1F54 ADRP X0, 0x226C000
	0x01CE1F58 LDR X0, [X0 + 0x480]
	0x01CE1F5C BL 0x1B6E7F0
	0x01CE1F60 MOVZ W8, 0x1
	0x01CE1F64 STRB W8, [X22 + 0x43F]
	0x01CE1F68 ADRP X8, 0x226C000
	0x01CE1F6C LDR X8, [X8 + 0x480]
	0x01CE1F70 LDR X8, [X8]
	0x01CE1F74 LDR X8, [X8 + 0xB8]
	0x01CE1F78 LDP S11, S12, [X8]
	0x01CE1F7C LDR V13, [X8 + 0x8]
	0x01CE1F80 LDR X0, [X21]
	0x01CE1F84 ADRP X22, 0x226C000
	0x01CE1F88 LDR W8, [X0 + 0xE0]
	0x01CE1F8C LDR X22, [X22 + 0x4C0]
	0x01CE1F90 CBNZ W8, 0x1CE1F9C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W1, 5
	005 Move X19, X0
	006 Call ChickenController.set_phase, X0, X1
	007 Move X0, [X19+56]
	008 Move W8, 0x44160000
	009 Move S0, W8
	010 Move X1, X31
	011 Call TickTimer.CreateFromSeconds, X0, V0
	012 And X1, X0, 0
	013 Move X0, X19
	014 Call ChickenController.set__timerToSpawnEgg, X0, X1
	015 Move X9, [X19+184]
	016 Compare X9, 0
	017 JumpIfEqual {67}
	018 Move X8, [X9+56]
	019 Compare X8, 0
	020 JumpIfEqual {67}
	021 Move W10, [X8+24]
	022 Compare W10, 0
	023 JumpIfEqual {68}
	024 Move X10, [X9+88]
	025 Compare X10, 0
	026 JumpIfEqual {67}
	027 Move W11, [X10+24]
	028 Compare W11, 0
	029 JumpIfEqual {68}
	030 Move X9, [X9+96]
	031 Compare X9, 0
	032 JumpIfEqual {67}
	033 Move W11, [X9+24]
	034 Compare W11, 0
	035 JumpIfEqual {68}
	036 Move X11, [X19]
	037 Move V0, [X8+32]
	038 Move V1, [X10+32]
	039 Move V2, [X9+32]
	040 Move X8, [X11+680]
	041 Move X2, [X11+688]
	042 Move X0, X19
	043 Move W1, W31
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X8, [X19]
	046 Move W1, 1
	047 Move X0, X19
	048 Move X9, [X8+776]
	049 Move X2, [X8+784]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move X20, [X19+408]
	052 Move X0, X19
	053 Move X1, X31
	054 Call Component.get_transform, X0
	055 Compare X0, 0
	056 JumpIfEqual {67}
	057 Move X1, X31
	058 Call Transform.get_position, X0
	059 Move X0, X20
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move S3, 1
	063 Move X1, X31
	064 Move X30, [X31+32]
	065 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	066 Return 
	067 Call 0x1B6FA1C
	068 Call 0x1B6FA24

Method: System.Void UpdateSearching()

Disassembly:
	0x01CE1468 STP X20, X19, [X31 + 0x10]
	0x01CE146C ADRP X20, 0x2542000
	0x01CE1470 LDRB W8, [X20 + 0x643]
	0x01CE1474 MOV X19, X0
	0x01CE1478 TBNZ X8, 0x0, 0x1CE1490
	0x01CE147C ADRP X0, 0x226C000
	0x01CE1480 LDR X0, [X0 + 0x478]
	0x01CE1484 BL 0x1B6E7F0
	0x01CE1488 MOVZ W8, 0x1
	0x01CE148C STRB W8, [X20 + 0x643]
	0x01CE1490 MOV X0, X19
	0x01CE1494 MOV X1, X31
	0x01CE1498 BL 0x1CE9DB8
	0x01CE149C LDRB W8, [X19 + 0x84]
	0x01CE14A0 CBZ W8, 0x1CE1524
	0x01CE14A4 LDRB W8, [X19 + 0x4C]
	0x01CE14A8 CBZ W8, 0x1CE1524
	0x01CE14AC LDR X8, [X19 + 0x70]
	0x01CE14B0 CBZ X8, 0x1CE1530
	0x01CE14B4 ADRP X9, 0x226C000
	0x01CE14B8 LDR X9, [X9 + 0x478]
	0x01CE14BC LDR X20, [X8 + 0x140]
	0x01CE14C0 LDR X0, [X9]
	0x01CE14C4 LDR W9, [X0 + 0xE0]
	0x01CE14C8 CBNZ W9, 0x1CE14D0
	0x01CE14CC BL 0x1B6E8F8
	0x01CE14D0 MOV X0, X20
	0x01CE14D4 MOV X1, X31
	0x01CE14D8 MOV X2, X31
	0x01CE14DC BL 0x3A9D6EC
	0x01CE14E0 TBZ X0, 0x0, 0x1CE1524
	0x01CE14E4 LDR X8, [X19 + 0x70]
	0x01CE14E8 CBZ X8, 0x1CE1530
	0x01CE14EC LDR X0, [X8 + 0x140]
	0x01CE14F0 CBZ X0, 0x1CE1530
	0x01CE14F4 LDR X19, [X19 + 0x38]
	0x01CE14F8 MOV X1, X31
	0x01CE14FC BL 0x3A9B084
	0x01CE1500 CBZ X0, 0x1CE1530
	0x01CE1504 MOV X1, X31
	0x01CE1508 BL 0x3AA7658
	0x01CE150C CBZ X19, 0x1CE1530
	0x01CE1510 MOV X0, X19
	0x01CE1514 LDP X20, X19, [X31 + 0x10]
	0x01CE1518 MOV X1, X31
	0x01CE151C LDR X30, [X31], #0x20
	0x01CE1520 B 0x3AA76F8
	0x01CE1524 LDP X20, X19, [X31 + 0x10]
	0x01CE1528 LDR X30, [X31], #0x20
	0x01CE152C RET
	0x01CE1530 BL 0x1B6EA1C
	0x01CE1534 STP X30, X21, [X31 - 0x20]!
	0x01CE1538 STP X20, X19, [X31 + 0x10]
	0x01CE153C ADRP X20, 0x2542000
	0x01CE1540 ADRP X21, 0x226E000
	0x01CE1544 LDRB W8, [X20 + 0x644]
	0x01CE1548 LDR X21, [X21 + 0xE08]
	0x01CE154C MOV X19, X0
	0x01CE1550 TBNZ X8, 0x0, 0x1CE1568
	0x01CE1554 ADRP X0, 0x226E000
	0x01CE1558 LDR X0, [X0 + 0xE08]
	0x01CE155C BL 0x1B6E7F0
	0x01CE1560 MOVZ W8, 0x1
	0x01CE1564 STRB W8, [X20 + 0x644]
	0x01CE1568 LDR X0, [X21]
	0x01CE156C LDR W8, [X0 + 0xE0]
	0x01CE1570 CBNZ W8, 0x1CE1578
	0x01CE1574 BL 0x1B6E8F8
	0x01CE1578 MOV X0, X19
	0x01CE157C LDP X20, X19, [X31 + 0x10]
	0x01CE1580 MOV X1, X31
	0x01CE1584 LDP X30, X21, [X31], #0x20
	0x01CE1588 B 0x1CEA7F8
	0x01CE158C STP X30, X21, [X31 - 0x20]!
	0x01CE1590 STP X20, X19, [X31 + 0x10]
	0x01CE1594 ADRP X21, 0x2542000
	0x01CE1598 LDRB W9, [X21 + 0x645]
	0x01CE159C MOV X20, X0
	0x01CE15A0 MOV X19, X8
	0x01CE15A4 TBNZ X9, 0x0, 0x1CE15BC
	0x01CE15A8 ADRP X0, 0x226E000
	0x01CE15AC LDR X0, [X0 + 0xF28]
	0x01CE15B0 BL 0x1B6E7F0
	0x01CE15B4 MOVZ W8, 0x1
	0x01CE15B8 STRB W8, [X21 + 0x645]
	0x01CE15BC LDR X20, [X20 + 0x50]
	0x01CE15C0 CBZ X20, 0x1CE15FC
	0x01CE15C4 ADRP X21, 0x226E000
	0x01CE15C8 LDR X21, [X21 + 0xF28]
	0x01CE15CC MOV X0, X31
	0x01CE15D0 BL 0x1D15D98
	0x01CE15D4 MOV X3, X0
	0x01CE15D8 LDR X4, [X21]
	0x01CE15DC STP X31, X31, [X19 + 0x8]
	0x01CE15E0 STR X31, [X19]
	0x01CE15E4 MOV X0, X19
	0x01CE15E8 MOV X1, X20

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x2543000
	011 Move W8, [X20+1599]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x226F000
	018 Move X0, [X0+3632]
	019 Call 0x1B6F7F0
	020 Move X0, 0x226F000
	021 Move X0, [X0+3568]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X20+1599], W8
	025 Add X1, X31, 56
	026 Move X0, X19
	027 Move X2, X31
	028 Move [X31+56], X31
	029 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {50}
	034 Move X20, [X31+56]
	035 Compare X20, 0
	036 JumpIfEqual {115}
	037 Move W1, [X20+24]
	038 Move W0, W31
	039 Move X2, X31
	040 Call Random.Range, X0, X1
	041 Move X8, 0x226F000
	042 Move X8, [X8+3568]
	043 Move W1, W0
	044 Move X0, X20
	045 Move X2, [X8]
	046 Call List`1<Object>.get_Item, X0, X1
	047 Move X1, X0
	048 Move X0, X19
	049 Call ChickenController.SetChasing, X0, X1
	050 Move X0, X19
	051 Move X1, X31
	052 Call Component.get_transform, X0
	053 Compare X0, 0
	054 JumpIfEqual {115}
	055 Move X1, X31
	056 Call Transform.get_position, X0
	057 Move X0, X19
	058 Move V8, V0
	059 Move V9, V1
	060 Move V10, V2
	061 Call ChickenController.get_nestPosition, X0
	062 Move X20, 0x2543000
	063 Move W8, [X20+1286]
	064 Move V11, V0
	065 Move V12, V1
	066 Move V13, V2
	067 Compare W8, 0
	068 JumpIfNotEqual {74}
	069 Move X0, 0x226D000
	070 Move X0, [X0+1160]
	071 Call 0x1B6F7F0
	072 Move W8, 1
	073 Move [X20+1286], W8
	074 Move X8, 0x226D000
	075 Move X8, [X8+1160]
	076 Subtract S11, S8, S11
	077 Subtract S9, S9, S12
	078 Subtract S8, S10, S13
	079 Move X0, [X8]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {84}
	083 Call 0x1B6F8F8
	084 Multiply S0, S11, S11
	085 Multiply S1, S9, S9
	086 Multiply S2, S8, S8
	087 Add S0, S0, S1
	088 Add S0, S2, S0
	089 NotImplemented "Instruction FSQRT not yet implemented."
	090 Move S1, 6
	091 NotImplemented "Instruction FCMP not yet implemented."
	092 Move X0, X19
	093 Call ChickenController.GetIsEggStolen, X0
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfNotEqual {103}
	098 Move X8, [X19]
	099 Move X0, X19
	100 Move X9, [X8+808]
	101 Move X1, [X8+816]
	102 NotImplemented "Instruction BLR not yet implemented."
	103 Move X0, X19
	104 Call ChickenController.SetBackToNest, X0
	105 Move X20, [X31+64]
	106 Move X19, [X31+72]
	107 Move X30, [X31+48]
	108 Move D9, [X31+32]
	109 Move D8, [X31+40]
	110 Move D11, [X31+16]
	111 Move D10, [X31+24]
	112 Move D13, [X31+80]
	113 Move D12, [X31+88]
	114 Return 
	115 Call 0x1B6FA1C

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01CE1F94 BL 0x1B6E8F8
	0x01CE1F98 LDR X0, [X21]
	0x01CE1F9C LDR X8, [X0 + 0xB8]
	0x01CE1FA0 MOV X1, X31
	0x01CE1FA4 LDR W0, [X8]
	0x01CE1FA8 BL 0x3A9DE68
	0x01CE1FAC LDR X8, [X22]
	0x01CE1FB0 MOV W21, W0
	0x01CE1FB4 LDR W9, [X8 + 0xE0]
	0x01CE1FB8 CBNZ W9, 0x1CE1FC4
	0x01CE1FBC MOV X0, X8
	0x01CE1FC0 BL 0x1B6E8F8
	0x01CE1FC4 ADD X0, X31, 0x18
	0x01CE1FC8 ADD X1, X31, 0x50
	0x01CE1FCC FMOV S0, 15
	0x01CE1FD0 MOVZ W3, 0x1
	0x01CE1FD4 MOV W2, W21
	0x01CE1FD8 MOV X4, X31
	0x01CE1FDC STP S8, S9, [X31 + 0x18]
	0x01CE1FE0 STP S10, S11, [X31 + 0x20]
	0x01CE1FE4 STP S12, S13, [X31 + 0x28]
	0x01CE1FE8 BL 0x3AF3708
	0x01CE1FEC TBZ X0, 0x0, 0x1CE20BC
	0x01CE1FF0 MOV X0, X19
	0x01CE1FF4 MOV X1, X31
	0x01CE1FF8 BL 0x3A9B084
	0x01CE1FFC MOV X21, X0
	0x01CE2000 ADD X0, X31, 0x50
	0x01CE2004 MOV X1, X31
	0x01CE2008 BL 0x3AF6270
	0x01CE200C CBZ X21, 0x1CE20DC
	0x01CE2010 MOV X0, X21
	0x01CE2014 MOV X1, X31
	0x01CE2018 BL 0x3AA8C24
	0x01CE201C LDR X0, [X19 + 0xD8]
	0x01CE2020 CBZ X0, 0x1CE20DC
	0x01CE2024 ADRP X8, 0x226E000
	0x01CE2028 LDR X8, [X8 + 0x10]
	0x01CE202C MOV X1, X20
	0x01CE2030 MOV V8.16B, V0.16B
	0x01CE2034 MOV V9.16B, V1.16B
	0x01CE2038 LDR X2, [X8]
	0x01CE203C MOV V10.16B, V2.16B
	0x01CE2040 BL 0x2E47288
	0x01CE2044 MOV W20, W0
	0x01CE2048 ADD X8, X31, 0x0
	0x01CE204C MOV X0, X19
	0x01CE2050 BL 0x1CE158C
	0x01CE2054 ADRP X9, 0x226E000
	0x01CE2058 LDR V0, [X31]
	0x01CE205C LDR X8, [X31 + 0x10]
	0x01CE2060 LDR X9, [X9 + 0x8]
	0x01CE2064 ADD X0, X31, 0x30
	0x01CE2068 STR V0, [X31 + 0x3]
	0x01CE206C MOV W1, W20
	0x01CE2070 LDR X2, [X9]
	0x01CE2074 MOV V0.16B, V8.16B
	0x01CE2078 MOV V1.16B, V9.16B
	0x01CE207C MOV V2.16B, V10.16B
	0x01CE2080 STR X8, [X31 + 0x40]
	0x01CE2084 BL 0x22B1F94
	0x01CE2088 LDR X20, [X19 + 0xA0]
	0x01CE208C CBZ X20, 0x1CE20BC
	0x01CE2090 MOV X0, X19
	0x01CE2094 MOV X1, X31
	0x01CE2098 BL 0x3A9B084
	0x01CE209C CBZ X0, 0x1CE20DC
	0x01CE20A0 MOV X1, X31
	0x01CE20A4 BL 0x3AA7658
	0x01CE20A8 FMOV S3, 1
	0x01CE20AC MOVZ W1, 0x1
	0x01CE20B0 MOV X0, X20
	0x01CE20B4 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2543000
	006 Move X20, 0x226D000
	007 Move W8, [X21+1600]
	008 Move X20, [X20+2048]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x226D000
	015 Move X0, [X0+2048]
	016 Call 0x1B6F7F0
	017 Move X0, 0x226F000
	018 Move X0, [X0+3400]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X21+1600], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call MobController.OnDrawGizmos, X0
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1B6F8F8
	030 Move X0, X31
	031 Call Application.get_isPlaying
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {86}
	036 Move X20, 0x226F000
	037 Move X20, [X20+3400]
	038 Move X0, [X20]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {44}
	042 Call 0x1B6F8F8
	043 Move X0, [X20]
	044 Move X8, [X0+184]
	045 Move X0, X31
	046 Move S0, [X8+176]
	047 Move S1, [X8+180]
	048 Move S2, [X8+184]
	049 Move S3, [X8+188]
	050 Call Gizmos.set_color, X0
	051 Move X0, X19
	052 Call ChickenController.get__attackPosition, X0
	053 Move X8, [X19+184]
	054 Compare X8, 0
	055 JumpIfEqual {91}
	056 Move V3, [X8+76]
	057 Move X0, X31
	058 Call Gizmos.DrawWireSphere, X0, V0
	059 Move S0, 1
	060 Move S1, 0.5
	061 Move S2, W31
	062 Move S3, 1
	063 Move X0, X31
	064 Call Gizmos.set_color, X0
	065 Move X0, X19
	066 Call ChickenController.get_nestPosition, X0
	067 Move S3, 12
	068 Move X0, X31
	069 Call Gizmos.DrawWireSphere, X0, V0
	070 Move S0, 1
	071 Move S1, W31
	072 Move S2, W31
	073 Move S3, 1
	074 Move X0, X31
	075 Call Gizmos.set_color, X0
	076 Move X0, X19
	077 Call ChickenController.get_nestPosition, X0
	078 Move X20, [X31+16]
	079 Move X19, [X31+24]
	080 Move S3, 6
	081 Move X0, X31
	082 Move X30, [X31+32]
	083 Move X21, [X31+40]
	084 Call Gizmos.DrawWireSphere, X0, V0
	085 Return 
	086 Move X20, [X31+16]
	087 Move X19, [X31+24]
	088 Move X30, [X31+32]
	089 Move X21, [X31+40]
	090 Return 
	091 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CE20B8 BL 0x1CC35DC
	0x01CE20BC LDP X20, X19, [X31 + 0xD0]
	0x01CE20C0 LDP X22, X21, [X31 + 0xC0]
	0x01CE20C4 LDR X30, [X31 + 0xB0]
	0x01CE20C8 LDP D9, D8, [X31 + 0xA0]
	0x01CE20CC LDP D11, D10, [X31 + 0x90]
	0x01CE20D0 LDP D13, D12, [X31 + 0x80]
	0x01CE20D4 ADD X31, X31, 0xE0
	0x01CE20D8 RET
	0x01CE20DC BL 0x1B6EA1C
	0x01CE20E0 STR X30, [X31 - 0x30]!
	0x01CE20E4 STP X22, X21, [X31 + 0x10]
	0x01CE20E8 STP X20, X19, [X31 + 0x20]
	0x01CE20EC ADRP X22, 0x2541000
	0x01CE20F0 LDRB W8, [X22 + 0x649]
	0x01CE20F4 MOV X19, X2
	0x01CE20F8 MOV X21, X1
	0x01CE20FC MOV X20, X0
	0x01CE2100 TBNZ X8, 0x0, 0x1CE2118
	0x01CE2104 ADRP X0, 0x226E000
	0x01CE2108 LDR X0, [X0 + 0x10]
	0x01CE210C BL 0x1B6E7F0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2542000
	006 Move X21, 0x226D000
	007 Move W8, [X20+1601]
	008 Move X21, [X21+3448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x226D000
	015 Move X0, [X0+3448]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1601], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1B6F8F8
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call MobController..ctor, X0
	031 Return 

Method: System.Void <SpawnEgg>b__46_0(Fusion.NetworkRunner runner, Fusion.NetworkObject o)

Disassembly:
	0x01CE2110 MOVZ W8, 0x1
	0x01CE2114 STRB W8, [X22 + 0x649]
	0x01CE2118 LDR X0, [X20 + 0x40]
	0x01CE211C CBZ X0, 0x1CE2150
	0x01CE2120 LDRB W8, [X0 + 0x60]
	0x01CE2124 TBNZ X8, 0x1, 0x1CE2150
	0x01CE2128 MOV X1, X31
	0x01CE212C BL 0x1D9E780
	0x01CE2130 TBZ X0, 0x0, 0x1CE2150
	0x01CE2134 MOV X0, X20
	0x01CE2138 MOV X1, X21
	0x01CE213C MOV X2, X19
	0x01CE2140 LDP X20, X19, [X31 + 0x20]
	0x01CE2144 LDP X22, X21, [X31 + 0x10]
	0x01CE2148 LDR X30, [X31], #0x30
	0x01CE214C B 0x1CE21A0
	0x01CE2150 LDR X0, [X20 + 0xD8]
	0x01CE2154 CBZ X0, 0x1CE219C
	0x01CE2158 ADRP X8, 0x226E000
	0x01CE215C LDR X8, [X8 + 0x10]
	0x01CE2160 MOV X1, X21
	0x01CE2164 LDR X2, [X8]
	0x01CE2168 BL 0x2E47288
	0x01CE216C CBZ X19, 0x1CE219C
	0x01CE2170 MOV W21, W0
	0x01CE2174 MOV X0, X19
	0x01CE2178 MOV X1, X31
	0x01CE217C BL 0x1CB63F0
	0x01CE2180 MOV W2, W0
	0x01CE2184 MOV X0, X20
	0x01CE2188 MOV W1, W21
	0x01CE218C LDP X20, X19, [X31 + 0x20]
	0x01CE2190 LDP X22, X21, [X31 + 0x10]
	0x01CE2194 LDR X30, [X31], #0x30
	0x01CE2198 B 0x1CE2350
	0x01CE219C BL 0x1B6EA1C
	0x01CE21A0 SUB X31, X31, 0x70
	0x01CE21A4 STP X30, X23, [X31 + 0x40]
	0x01CE21A8 STP X22, X21, [X31 + 0x50]
	0x01CE21AC STP X20, X19, [X31 + 0x60]
	0x01CE21B0 ADRP X22, 0x2541000
	0x01CE21B4 LDRB W8, [X22 + 0x64B]
	0x01CE21B8 MOV X20, X2
	0x01CE21BC MOV X21, X1
	0x01CE21C0 MOV X19, X0
	0x01CE21C4 TBNZ X8, 0x0, 0x1CE21E8
	0x01CE21C8 ADRP X0, 0x226E000
	0x01CE21CC LDR X0, [X0 + 0x10]
	0x01CE21D0 BL 0x1B6E7F0
	0x01CE21D4 ADRP X0, 0x226E000
	0x01CE21D8 LDR X0, [X0 + 0x8]
	0x01CE21DC BL 0x1B6E7F0
	0x01CE21E0 MOVZ W8, 0x1
	0x01CE21E4 STRB W8, [X22 + 0x64B]
	0x01CE21E8 STP X31, X31, [X31 + 0x20]
	0x01CE21EC STR X31, [X31 + 0x30]
	0x01CE21F0 LDR X0, [X19 + 0xD8]
	0x01CE21F4 CBZ X0, 0x1CE234C
	0x01CE21F8 ADRP X8, 0x226E000
	0x01CE21FC LDR X8, [X8 + 0x10]
	0x01CE2200 ADRP X22, 0x226E000
	0x01CE2204 MOV X1, X21
	0x01CE2208 LDR X2, [X8]
	0x01CE220C LDR X22, [X22 + 0x8]
	0x01CE2210 BL 0x2E47288
	0x01CE2214 MOV W21, W0
	0x01CE2218 ADD X8, X31, 0x8
	0x01CE221C MOV X0, X19
	0x01CE2220 BL 0x1CE158C
	0x01CE2224 ADRP X23, 0x2541000
	0x01CE2228 LDUR V0, [X31 + 0x8]
	0x01CE222C LDR X8, [X31 + 0x18]
	0x01CE2230 LDRB W9, [X23 + 0x43F]
	0x01CE2234 STR V0, [X31 + 0x2]
	0x01CE2238 STR X8, [X31 + 0x30]
	0x01CE223C CBNZ W9, 0x1CE2254
	0x01CE2240 ADRP X0, 0x226B000
	0x01CE2244 LDR X0, [X0 + 0x480]
	0x01CE2248 BL 0x1B6E7F0
	0x01CE224C MOVZ W8, 0x1

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0x2542000
	013 Move W8, [X21+1602]
	014 Move X20, X2
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x226D000
	021 Move X0, [X0+1072]
	022 Call 0x1B6F7F0
	023 Move X0, 0x226C000
	024 Move X0, [X0+1216]
	025 Call 0x1B6F7F0
	026 Move W8, 1
	027 Move [X21+1602], W8
	028 Compare X20, 0
	029 JumpIfEqual {92}
	030 Move X8, 0x226D000
	031 Move X8, [X8+1072]
	032 Move X0, X20
	033 Move X1, [X8]
	034 Call 0x2091A90, X0
	035 Compare X0, 0
	036 JumpIfEqual {92}
	037 Move X8, [X0+24]
	038 Move X21, X0
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X25, 0x226C000
	041 Move X25, [X25+1216]
	042 Move X24, X31
	043 And X8, X8, 0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X26, [X19+448]
	046 Compare X26, 0
	047 JumpIfEqual {92}
	048 Move X8, [X26+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Add X9, X21, X24
	051 Move X22, [X9+32]
	052 Move X27, X31
	053 And X8, X8, 0
	054 Add X28, X26, 32
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X0, [X25]
	057 Move X23, [X28]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1B6F8F8
	062 Move X0, X22
	063 Move X1, X23
	064 Move X2, X31
	065 Call Physics.IgnoreCollision, X0, X1
	066 Move W8, [X26+24]
	067 Add X27, X27, 1
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W8, [X21+24]
	070 Add X24, X24, 1
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X8, [X20+32]
	073 Compare X8, 0
	074 JumpIfEqual {76}
	075 Move W1, [X8]
	076 Move X1, X31
	077 Move X0, X19
	078 Move X20, [X31+80]
	079 Move X19, [X31+88]
	080 Move X22, [X31+64]
	081 Move X21, [X31+72]
	082 Move X24, [X31+48]
	083 Move X23, [X31+56]
	084 Move X26, [X31+32]
	085 Move X25, [X31+40]
	086 Move X28, [X31+16]
	087 Move X27, [X31+24]
	088 Move X30, [X31+96]
	089 Call ChickenController.set_eggID, X0, X1
	090 Return 
	091 Call 0x1B6FA24
	092 Call 0x1B6FA1C

Method: System.Int32 <UpdateIncubating>b__49_0(AnimalCompany.NetPlayer a, AnimalCompany.NetPlayer b)

Disassembly:
	0x01CE2250 STRB W8, [X23 + 0x43F]
	0x01CE2254 ADRP X8, 0x226B000
	0x01CE2258 LDR X8, [X8 + 0x480]
	0x01CE225C LDR X2, [X22]
	0x01CE2260 ADD X0, X31, 0x20
	0x01CE2264 MOV W1, W21
	0x01CE2268 LDR X8, [X8]
	0x01CE226C LDR X8, [X8 + 0xB8]
	0x01CE2270 LDP S0, S1, [X8]
	0x01CE2274 LDR V2, [X8 + 0x8]
	0x01CE2278 BL 0x22B1F94
	0x01CE227C LDR X21, [X19 + 0xA8]
	0x01CE2280 CBZ X21, 0x1CE22B0
	0x01CE2284 MOV X0, X19
	0x01CE2288 MOV X1, X31
	0x01CE228C BL 0x3A9B084
	0x01CE2290 CBZ X0, 0x1CE234C
	0x01CE2294 MOV X1, X31
	0x01CE2298 BL 0x3AA7658
	0x01CE229C FMOV S3, 1
	0x01CE22A0 MOVZ W1, 0x1
	0x01CE22A4 MOV X0, X21
	0x01CE22A8 MOV X2, X31
	0x01CE22AC BL 0x1CC35DC
	0x01CE22B0 MOV X0, X19
	0x01CE22B4 BL 0x1CE1984
	0x01CE22B8 FMOV S1, 2
	0x01CE22BC FCMP S0, S1
	0x01CE22C0 B.PL 0x1CE2338
	0x01CE22C4 MOV X0, X31
	0x01CE22C8 BL 0x3AA47F4
	0x01CE22CC LDR V1, [X19 + 0xB8]
	0x01CE22D0 FSUB D0, D0, D1
	0x01CE22D4 FMOV D1, 1.0000000000582077
	0x01CE22D8 FCMP D0, D1
	0x01CE22DC B.LE 0x1CE2314
	0x01CE22E0 LDR X21, [X19 + 0xB0]
	0x01CE22E4 MOV X0, X19
	0x01CE22E8 MOV X1, X31
	0x01CE22EC BL 0x3A9B084
	0x01CE22F0 CBZ X0, 0x1CE234C
	0x01CE22F4 MOV X1, X31
	0x01CE22F8 BL 0x3AA7658
	0x01CE22FC CBZ X21, 0x1CE234C
	0x01CE2300 FMOV S3, 1
	0x01CE2304 MOVZ W1, 0x1
	0x01CE2308 MOV X0, X21
	0x01CE230C MOV X2, X31
	0x01CE2310 BL 0x1CC35DC
	0x01CE2314 MOV X0, X31
	0x01CE2318 BL 0x3AA47F4
	0x01CE231C MOV X0, X19
	0x01CE2320 MOV X1, X20
	0x01CE2324 STR D0, [X19 + 0xB8]
	0x01CE2328 BL 0x1CE1744
	0x01CE232C FMOV S0, W31
	0x01CE2330 MOV X0, X19
	0x01CE2334 BL 0x1CE19E4
	0x01CE2338 LDP X20, X19, [X31 + 0x60]
	0x01CE233C LDP X22, X21, [X31 + 0x50]
	0x01CE2340 LDP X30, X23, [X31 + 0x40]
	0x01CE2344 ADD X31, X31, 0x70
	0x01CE2348 RET
	0x01CE234C BL 0x1B6EA1C
	0x01CE2350 STR X30, [X31 - 0x30]!
	0x01CE2354 STP X22, X21, [X31 + 0x10]
	0x01CE2358 STP X20, X19, [X31 + 0x20]
	0x01CE235C ADRP X22, 0x2541000
	0x01CE2360 LDRB W8, [X22 + 0x64A]
	0x01CE2364 MOV W21, W2
	0x01CE2368 MOV W20, W1
	0x01CE236C MOV X19, X0
	0x01CE2370 TBNZ X8, 0x0, 0x1CE23AC
	0x01CE2374 ADRP X0, 0x226E000
	0x01CE2378 LDR X0, [X0]
	0x01CE237C BL 0x1B6E7F0
	0x01CE2380 ADRP X0, 0x226C000
	0x01CE2384 LDR X0, [X0 + 0x2A8]
	0x01CE2388 BL 0x1B6E7F0
	0x01CE238C ADRP X0, 0x226C000
	0x01CE2390 LDR X0, [X0 + 0x1C0]
	0x01CE2394 BL 0x1B6E7F0
	0x01CE2398 ADRP X0, 0x226E000
	0x01CE239C LDR X0, [X0 + 0x18]
	0x01CE23A0 BL 0x1B6E7F0
	0x01CE23A4 MOVZ W8, 0x1
	0x01CE23A8 STRB W8, [X22 + 0x64A]
	0x01CE23AC STR X31, [X31 + 0x8]
	0x01CE23B0 LDRB W8, [X19 + 0x58]
	0x01CE23B4 CBZ W8, 0x1CE2418
	0x01CE23B8 STRB W31, [X19 + 0x58]
	0x01CE23BC ADRP X8, 0x226C000
	0x01CE23C0 LDR X8, [X8 + 0x2A8]

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Compare X1, 0
	013 JumpIfEqual {111}
	014 Move X19, X0
	015 Move X0, X1
	016 Move X1, X31
	017 Move X20, X2
	018 Call Component.get_transform, X0
	019 Compare X0, 0
	020 JumpIfEqual {111}
	021 Move X1, X31
	022 Call Transform.get_position, X0
	023 Move X0, X19
	024 Move V8, V0
	025 Move V9, V1
	026 Move V10, V2
	027 Call ChickenController.get_nestPosition, X0
	028 Move X21, 0x2542000
	029 Move W8, [X21+1286]
	030 Move V11, V0
	031 Move V12, V1
	032 Move V13, V2
	033 Compare W8, 0
	034 JumpIfNotEqual {40}
	035 Move X0, 0x226C000
	036 Move X0, [X0+1160]
	037 Call 0x1B6F7F0
	038 Move W8, 1
	039 Move [X21+1286], W8
	040 Move X22, 0x226C000
	041 Move X22, [X22+1160]
	042 Subtract S11, S8, S11
	043 Subtract S9, S9, S12
	044 Subtract S8, S10, S13
	045 Move X0, [X22]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1B6F8F8
	050 Multiply S0, S11, S11
	051 Multiply S1, S9, S9
	052 Add S0, S0, S1
	053 Multiply S1, S8, S8
	054 Add S0, S1, S0
	055 NotImplemented "Instruction FSQRT not yet implemented."
	056 Move [X31+60], S0
	057 Compare X20, 0
	058 JumpIfEqual {111}
	059 Move X0, X20
	060 Move X1, X31
	061 Call Component.get_transform, X0
	062 Compare X0, 0
	063 JumpIfEqual {111}
	064 Move X1, X31
	065 Call Transform.get_position, X0
	066 Move X0, X19
	067 Move V8, V0
	068 Move V9, V1
	069 Move V10, V2
	070 Call ChickenController.get_nestPosition, X0
	071 Move W8, [X21+1286]
	072 Move V11, V0
	073 Move V12, V1
	074 Move V13, V2
	075 Compare W8, 0
	076 JumpIfNotEqual {82}
	077 Move X0, 0x226C000
	078 Move X0, [X0+1160]
	079 Call 0x1B6F7F0
	080 Move W8, 1
	081 Move [X21+1286], W8
	082 Move X0, [X22]
	083 Subtract S11, S8, S11
	084 Subtract S9, S9, S12
	085 Subtract S8, S10, S13
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1B6F8F8
	090 Multiply S0, S11, S11
	091 Multiply S1, S9, S9
	092 Add S0, S0, S1
	093 Multiply S1, S8, S8
	094 Add S0, S1, S0
	095 NotImplemented "Instruction FSQRT not yet implemented."
	096 Add X0, X31, 60
	097 Move X1, X31
	098 Call Single.CompareTo, X0, V0
	099 Move X20, [X31+80]
	100 Move X19, [X31+88]
	101 Move X22, [X31+64]
	102 Move X21, [X31+72]
	103 Move X30, [X31+48]
	104 Move D9, [X31+32]
	105 Move D8, [X31+40]
	106 Move D11, [X31+16]
	107 Move D10, [X31+24]
	108 Move D13, [X31+96]
	109 Move D12, [X31+104]
	110 Return X0
	111 Call 0x1B6FA1C

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01CE23C4 LDR X0, [X8]
	0x01CE23C8 LDR W8, [X0 + 0xE0]
	0x01CE23CC CBNZ W8, 0x1CE23D4
	0x01CE23D0 BL 0x1B6E8F8
	0x01CE23D4 ADD X1, X31, 0x8
	0x01CE23D8 MOV W0, W21
	0x01CE23DC MOV X2, X31
	0x01CE23E0 BL 0x1CB64B0
	0x01CE23E4 TBZ X0, 0x0, 0x1CE253C
	0x01CE23E8 LDR X0, [X19 + 0xD8]
	0x01CE23EC CBZ X0, 0x1CE254C
	0x01CE23F0 ADRP X8, 0x226E000
	0x01CE23F4 LDR X8, [X8]
	0x01CE23F8 MOV W1, W20
	0x01CE23FC LDR X2, [X8]
	0x01CE2400 BL 0x2E46254
	0x01CE2404 LDR X2, [X31 + 0x8]
	0x01CE2408 MOV X1, X0
	0x01CE240C MOV X0, X19
	0x01CE2410 BL 0x1CE21A0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 And W1, W1, 1
	004 Move X2, X31
	005 Move X19, X0
	006 Call MobController.CopyBackingFieldsToState, X0, X1
	007 Move W1, [X19+372]
	008 Move X0, X19
	009 Call ChickenController.set_phase, X0, X1
	010 Move W1, [X19+376]
	011 Move X0, X19
	012 Call ChickenController.set_eggID, X0, X1
	013 Move V0, [X19+380]
	014 Move V1, [X19+384]
	015 Move V2, [X19+388]
	016 Move X0, X19
	017 Call ChickenController.set_nestPosition, X0, X1
	018 Move W1, [X19+392]
	019 Move X0, X19
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Call ChickenController.set__timerToSpawnEgg, X0, X1
	023 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01CE2414 B 0x1CE253C
	0x01CE2418 ADRP X22, 0x226C000
	0x01CE241C LDR X22, [X22 + 0x1C0]
	0x01CE2420 LDR X0, [X22]
	0x01CE2424 LDR W8, [X0 + 0xE0]
	0x01CE2428 CBNZ W8, 0x1CE2430
	0x01CE242C BL 0x1B6E8F8
	0x01CE2430 MOV X0, X19
	0x01CE2434 MOV X1, X31
	0x01CE2438 BL 0x1D697C8
	0x01CE243C LDR X0, [X19 + 0x38]
	0x01CE2440 CBZ X0, 0x1CE254C
	0x01CE2444 MOV X1, X31
	0x01CE2448 BL 0x1D87040
	0x01CE244C CMP W0, 0x4
	0x01CE2450 B.EQ 0x1CE253C
	0x01CE2454 LDR X0, [X19 + 0x40]
	0x01CE2458 CBZ X0, 0x1CE254C
	0x01CE245C MOV X1, X31
	0x01CE2460 BL 0x1D9F538

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.CopyStateToBackingFields, X0
	006 Move X0, X19
	007 Call ChickenController.get_phase, X0
	008 Move [X19+372], W0
	009 Move X0, X19
	010 Call ChickenController.get_eggID, X0
	011 Move [X19+376], W0
	012 Move X0, X19
	013 Call ChickenController.get_nestPosition, X0
	014 Move X0, X19
	015 Move [X19+380], S0
	016 Move [X19+384], S1
	017 Move [X19+388], S2
	018 Call ChickenController.get__timerToSpawnEgg, X0
	019 Move [X19+392], W0
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 

