Type: AnimalCompany.ChickenController

Method: AnimalCompany.ChickenController/Phase get_phase()

Disassembly:
	0x01DE8A64 MOV X0, X19
	0x01DE8A68 BL 0x1DF6044
	0x01DE8A6C TBZ X0, 0x0, 0x1DE8A88
	0x01DE8A70 LDR X8, [X31 + 0x8]
	0x01DE8A74 CBZ X8, 0x1DE8AA4
	0x01DE8A78 LDP S0, S1, [X8 + 0x28]
	0x01DE8A7C LDR V2, [X8 + 0x30]
	0x01DE8A80 MOV X0, X19
	0x01DE8A84 BL 0x1DE8AA8
	0x01DE8A88 LDR X0, [X19 + 0xC8]
	0x01DE8A8C CBZ X0, 0x1DE8AA4
	0x01DE8A90 LDR X8, [X0]
	0x01DE8A94 LDP X30, X19, [X31 + 0x10]
	0x01DE8A98 LDP X2, X1, [X8 + 0x1C8]
	0x01DE8A9C ADD X31, X31, 0x20
	0x01DE8AA0 BR X2
	0x01DE8AA4 BL 0x1C16F20
	0x01DE8AA8 STR D10, [X31 - 0x30]!
	0x01DE8AAC STP D9, D8, [X31 + 0x10]
	0x01DE8AB0 STP X30, X19, [X31 + 0x20]
	0x01DE8AB4 MOV X1, X31
	0x01DE8AB8 MOV V8.16B, V2.16B
	0x01DE8ABC MOV V9.16B, V1.16B
	0x01DE8AC0 MOV V10.16B, V0.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+60]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x230C000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2311000
	016 Move X0, [X0+3552]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2311000
	023 Move X0, [X0+3560]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_phase(AnimalCompany.ChickenController/Phase value)

Disassembly:
	0x01DE8AC4 MOV X19, X0
	0x01DE8AC8 BL 0x3C32E90
	0x01DE8ACC CBZ X0, 0x1DE8AF8
	0x01DE8AD0 MOV V0.16B, V10.16B
	0x01DE8AD4 MOV V1.16B, V9.16B
	0x01DE8AD8 MOV V2.16B, V8.16B
	0x01DE8ADC MOV X1, X31
	0x01DE8AE0 BL 0x3C3F62C
	0x01DE8AE4 MOV X0, X19
	0x01DE8AE8 LDP X30, X19, [X31 + 0x20]
	0x01DE8AEC LDP D9, D8, [X31 + 0x10]
	0x01DE8AF0 LDR V10, [X31], #0x30
	0x01DE8AF4 B 0x1DF594C
	0x01DE8AF8 BL 0x1C16F20
	0x01DE8AFC STR X30, [X31 - 0x20]!
	0x01DE8B00 STP X20, X19, [X31 + 0x10]
	0x01DE8B04 MOVZ W1, 0x4
	0x01DE8B08 MOV X19, X0
	0x01DE8B0C BL 0x1DE7AC4
	0x01DE8B10 LDR X8, [X19]
	0x01DE8B14 MOV X0, X19
	0x01DE8B18 MOV X1, X31
	0x01DE8B1C LDR X9, [X8 + 0x3B8]
	0x01DE8B20 LDR X2, [X8 + 0x3C0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+60], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x230C000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2311000
	016 Move X0, [X0+3552]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2311000
	023 Move X0, [X0+3568]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: Fusion.NetworkId get_eggID()

Disassembly:
	0x01DE8B24 BLR X9
	0x01DE8B28 FMOV S0, W31
	0x01DE8B2C MOV X0, X19
	0x01DE8B30 BL 0x1DEA540
	0x01DE8B34 LDR X9, [X19 + 0xC0]
	0x01DE8B38 CBZ X9, 0x1DE8BB4
	0x01DE8B3C LDR X8, [X9 + 0x30]
	0x01DE8B40 CBZ X8, 0x1DE8BB4
	0x01DE8B44 LDR W10, [X8 + 0x18]
	0x01DE8B48 CBZ W10, 0x1DE8BB8
	0x01DE8B4C LDR X10, [X9 + 0x58]
	0x01DE8B50 CBZ X10, 0x1DE8BB4
	0x01DE8B54 LDR W11, [X10 + 0x18]
	0x01DE8B58 CBZ W11, 0x1DE8BB8
	0x01DE8B5C LDR X9, [X9 + 0x60]
	0x01DE8B60 CBZ X9, 0x1DE8BB4
	0x01DE8B64 LDR W11, [X9 + 0x18]
	0x01DE8B68 CBZ W11, 0x1DE8BB8
	0x01DE8B6C LDR X11, [X19]
	0x01DE8B70 LDR V0, [X8 + 0x20]
	0x01DE8B74 LDR V1, [X10 + 0x20]
	0x01DE8B78 LDR V2, [X9 + 0x20]
	0x01DE8B7C LDR X8, [X11 + 0x2C8]
	0x01DE8B80 LDR X2, [X11 + 0x2D0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+64]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x230C000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2311000
	016 Move X0, [X0+3576]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2311000
	023 Move X0, [X0+3584]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_eggID(Fusion.NetworkId value)

Disassembly:
	0x01DE8B84 MOV X0, X19
	0x01DE8B88 MOV W1, W31
	0x01DE8B8C BLR X8
	0x01DE8B90 LDR X20, [X19 + 0xE8]
	0x01DE8B94 MOV X0, X19
	0x01DE8B98 BL 0x1DE7BE4
	0x01DE8B9C CBZ X20, 0x1DE8BB4
	0x01DE8BA0 MOV X0, X20
	0x01DE8BA4 LDP X20, X19, [X31 + 0x10]
	0x01DE8BA8 MOV X1, X31
	0x01DE8BAC LDR X30, [X31], #0x20
	0x01DE8BB0 B 0x3BE13F8
	0x01DE8BB4 BL 0x1C16F20
	0x01DE8BB8 BL 0x1C16F28
	0x01DE8BBC STP X30, X19, [X31 - 0x10]!
	0x01DE8BC0 MOV X19, X0
	0x01DE8BC4 BL 0x1DE8BF8
	0x01DE8BC8 LDR X0, [X19 + 0x40]
	0x01DE8BCC CBZ X0, 0x1DE8BF4
	0x01DE8BD0 MOV X1, X31
	0x01DE8BD4 BL 0x1E93668
	0x01DE8BD8 TBZ X0, 0x0, 0x1DE8BEC
	0x01DE8BDC MOVZ W1, 0x6
	0x01DE8BE0 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+64], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x230C000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2311000
	016 Move X0, [X0+3576]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2311000
	023 Move X0, [X0+3592]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: UnityEngine.Vector3 get_nestPosition()

Disassembly:
	0x01DE8BE4 LDP X30, X19, [X31], #0x10
	0x01DE8BE8 B 0x1DE7AC4
	0x01DE8BEC LDP X30, X19, [X31], #0x10
	0x01DE8BF0 RET
	0x01DE8BF4 BL 0x1C16F20
	0x01DE8BF8 STP X30, X21, [X31 - 0x20]!
	0x01DE8BFC STP X20, X19, [X31 + 0x10]
	0x01DE8C00 ADRP X20, 0x25F0000
	0x01DE8C04 LDRB W8, [X20 + 0xCFF]
	0x01DE8C08 MOV X19, X0
	0x01DE8C0C TBNZ X8, 0x0, 0x1DE8C24
	0x01DE8C10 ADRP X0, 0x230F000
	0x01DE8C14 LDR X0, [X0 + 0x860]
	0x01DE8C18 BL 0x1C16CF4
	0x01DE8C1C MOVZ W8, 0x1
	0x01DE8C20 STRB W8, [X20 + 0xCFF]
	0x01DE8C24 LDR X0, [X19 + 0x40]
	0x01DE8C28 CBZ X0, 0x1DE8CE8
	0x01DE8C2C LDRB W8, [X0 + 0x60]
	0x01DE8C30 TBNZ X8, 0x1, 0x1DE8CE8
	0x01DE8C34 MOV X1, X31
	0x01DE8C38 BL 0x1E93668
	0x01DE8C3C TBZ X0, 0x0, 0x1DE8CE8
	0x01DE8C40 LDR X8, [X19 + 0xC0]
	0x01DE8C44 CBZ X8, 0x1DE8D60

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move S0, [X8+68]
	007 Move S1, [X8+72]
	008 Move V2, [X8+76]
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x230C000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x2311000
	018 Move X0, [X0+3600]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x2311000
	025 Move X0, [X0+3608]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_nestPosition(UnityEngine.Vector3 value)

Disassembly:
	0x01DE8C48 LDR X0, [X19 + 0x38]
	0x01DE8C4C LDR V0, [X8 + 0x90]
	0x01DE8C50 MOV X1, X31
	0x01DE8C54 BL 0x1E91E68
	0x01DE8C58 AND X1, X0, 0x0
	0x01DE8C5C MOV X0, X19
	0x01DE8C60 BL 0x1DF498C
	0x01DE8C64 LDR X0, [X19 + 0xE8]
	0x01DE8C68 CBZ X0, 0x1DE8D60
	0x01DE8C6C MOV X1, X31
	0x01DE8C70 BL 0x3BE1B08
	0x01DE8C74 TBNZ X0, 0x0, 0x1DE8C8C
	0x01DE8C78 LDR X0, [X19 + 0xE8]
	0x01DE8C7C CBZ X0, 0x1DE8D60
	0x01DE8C80 MOV X1, X31
	0x01DE8C84 BL 0x3BE15CC
	0x01DE8C88 TBZ X0, 0x0, 0x1DE8C9C
	0x01DE8C8C LDR X0, [X19 + 0xE8]
	0x01DE8C90 CBZ X0, 0x1DE8D60
	0x01DE8C94 MOV X1, X31
	0x01DE8C98 BL 0x3BE17F8
	0x01DE8C9C ADRP X21, 0x25F0000
	0x01DE8CA0 LDRB W8, [X21 + 0x783]
	0x01DE8CA4 LDR X20, [X19 + 0xE8]
	0x01DE8CA8 CBNZ W8, 0x1DE8CC0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move [X8+68], S0
	007 Move [X8+76], S1
	008 Move [X8+76], S2
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 
	012 Move X0, 0x230C000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x2311000
	018 Move X0, [X0+3600]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x2311000
	025 Move X0, [X0+3616]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: Fusion.TickTimer get__timerToSpawnEgg()

Disassembly:
	0x01DE8CAC ADRP X0, 0x230B000
	0x01DE8CB0 LDR X0, [X0 + 0x5A0]
	0x01DE8CB4 BL 0x1C16CF4
	0x01DE8CB8 MOVZ W8, 0x1
	0x01DE8CBC STRB W8, [X21 + 0x783]
	0x01DE8CC0 CBZ X20, 0x1DE8D60
	0x01DE8CC4 ADRP X8, 0x230B000
	0x01DE8CC8 LDR X8, [X8 + 0x5A0]
	0x01DE8CCC MOV X0, X20
	0x01DE8CD0 MOV X1, X31
	0x01DE8CD4 LDR X8, [X8]
	0x01DE8CD8 LDR X8, [X8 + 0xB8]
	0x01DE8CDC LDP S1, S2, [X8 + 0x4]
	0x01DE8CE0 LDR V0, [X8]
	0x01DE8CE4 BL 0x3BE1534
	0x01DE8CE8 ADRP X20, 0x230F000
	0x01DE8CEC LDR X20, [X20 + 0x860]
	0x01DE8CF0 LDR X0, [X20]
	0x01DE8CF4 LDR W8, [X0 + 0xE0]
	0x01DE8CF8 CBNZ W8, 0x1DE8D04
	0x01DE8CFC BL 0x1C16DFC
	0x01DE8D00 LDR X0, [X20]
	0x01DE8D04 LDR X8, [X0 + 0xB8]
	0x01DE8D08 LDR X20, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+80]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x230C000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2311000
	016 Move X0, [X0+3624]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2311000
	023 Move X0, [X0+3632]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set__timerToSpawnEgg(Fusion.TickTimer value)

Disassembly:
	0x01DE8D0C CBZ X20, 0x1DE8D2C
	0x01DE8D10 LDR X0, [X19 + 0x40]
	0x01DE8D14 CBZ X0, 0x1DE8D3C
	0x01DE8D18 LDRB W8, [X0 + 0x60]
	0x01DE8D1C TBNZ X8, 0x1, 0x1DE8D38
	0x01DE8D20 MOV X1, X31
	0x01DE8D24 BL 0x1E93668
	0x01DE8D28 B 0x1DE8D3C
	0x01DE8D2C LDP X20, X19, [X31 + 0x10]
	0x01DE8D30 LDP X30, X21, [X31], #0x20
	0x01DE8D34 RET
	0x01DE8D38 MOV W0, W31
	0x01DE8D3C LDR X8, [X20 + 0x40]
	0x01DE8D40 LDR X4, [X20 + 0x18]
	0x01DE8D44 LDR X3, [X20 + 0x28]
	0x01DE8D48 MOV X1, X19
	0x01DE8D4C LDP X20, X19, [X31 + 0x10]
	0x01DE8D50 AND W2, W0, 0x1
	0x01DE8D54 MOV X0, X8
	0x01DE8D58 LDP X30, X21, [X31], #0x20
	0x01DE8D5C BR X4
	0x01DE8D60 BL 0x1C16F20
	0x01DE8D64 SUB X31, X31, 0xD0
	0x01DE8D68 STR D14, [X31 + 0x60]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+80], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x230C000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2311000
	016 Move X0, [X0+3624]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2311000
	023 Move X0, [X0+3640]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: UnityEngine.Vector3 get__attackPosition()

Disassembly:
	0x01DE8D6C STP D13, D12, [X31 + 0x68]
	0x01DE8D70 STP D11, D10, [X31 + 0x78]
	0x01DE8D74 STP D9, D8, [X31 + 0x88]
	0x01DE8D78 STR X30, [X31 + 0x98]
	0x01DE8D7C STP X24, X23, [X31 + 0xA0]
	0x01DE8D80 STP X22, X21, [X31 + 0xB0]
	0x01DE8D84 STP X20, X19, [X31 + 0xC0]
	0x01DE8D88 ADRP X20, 0x25F0000
	0x01DE8D8C ADRP X23, 0x230E000
	0x01DE8D90 ADRP X22, 0x230E000
	0x01DE8D94 LDRB W8, [X20 + 0xCB6]
	0x01DE8D98 LDR X23, [X23 + 0xB58]
	0x01DE8D9C LDR X22, [X22 + 0xB60]
	0x01DE8DA0 MOV V8.16B, V6.16B
	0x01DE8DA4 MOV V9.16B, V5.16B
	0x01DE8DA8 MOV V10.16B, V4.16B
	0x01DE8DAC MOV V11.16B, V3.16B
	0x01DE8DB0 MOV V12.16B, V2.16B
	0x01DE8DB4 MOV V13.16B, V1.16B
	0x01DE8DB8 MOV V14.16B, V0.16B
	0x01DE8DBC MOV X19, X0
	0x01DE8DC0 TBNZ X8, 0x0, 0x1DE8E08
	0x01DE8DC4 ADRP X0, 0x2310000
	0x01DE8DC8 LDR X0, [X0 + 0xE70]
	0x01DE8DCC BL 0x1C16CF4
	0x01DE8DD0 ADRP X0, 0x230E000
	0x01DE8DD4 LDR X0, [X0 + 0xB58]
	0x01DE8DD8 BL 0x1C16CF4
	0x01DE8DDC ADRP X0, 0x230F000
	0x01DE8DE0 LDR X0, [X0 + 0xF48]
	0x01DE8DE4 BL 0x1C16CF4
	0x01DE8DE8 ADRP X0, 0x230E000
	0x01DE8DEC LDR X0, [X0 + 0xB60]
	0x01DE8DF0 BL 0x1C16CF4
	0x01DE8DF4 ADRP X0, 0x230F000
	0x01DE8DF8 LDR X0, [X0 + 0x140]
	0x01DE8DFC BL 0x1C16CF4
	0x01DE8E00 MOVZ W8, 0x1
	0x01DE8E04 STRB W8, [X20 + 0xCB6]
	0x01DE8E08 LDR X1, [X23]
	0x01DE8E0C LDR X20, [X19 + 0x38]
	0x01DE8E10 LDR X21, [X19 + 0x1E0]
	0x01DE8E14 ADD X0, X31, 0x50
	0x01DE8E18 MOV V0.16B, V14.16B
	0x01DE8E1C MOV V1.16B, V13.16B
	0x01DE8E20 MOV V2.16B, V12.16B
	0x01DE8E24 STP X31, X31, [X31 + 0x50]
	0x01DE8E28 BL 0x243BFEC
	0x01DE8E2C LDR X1, [X22]
	0x01DE8E30 ADD X0, X31, 0x38
	0x01DE8E34 MOV V0.16B, V11.16B
	0x01DE8E38 MOV V1.16B, V10.16B
	0x01DE8E3C MOV V2.16B, V9.16B
	0x01DE8E40 MOV V3.16B, V8.16B
	0x01DE8E44 STP X31, X31, [X31 + 0x38]
	0x01DE8E48 STR W31, [X31 + 0x48]
	0x01DE8E4C BL 0x2437C9C
	0x01DE8E50 LDR X0, [X19 + 0x40]
	0x01DE8E54 CBZ X0, 0x1DE8F08
	0x01DE8E58 ADRP X22, 0x230F000
	0x01DE8E5C ADRP X23, 0x230F000

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X1, X31
	011 Move X19, X0
	012 Call Component.get_transform, X0
	013 Compare X0, 0
	014 JumpIfEqual {74}
	015 Move X1, X31
	016 Call Transform.get_position, X0
	017 Move X0, X19
	018 Move X1, X31
	019 Move V8, V0
	020 Move V9, V1
	021 Move V10, V2
	022 Call Component.get_transform, X0
	023 Compare X0, 0
	024 JumpIfEqual {74}
	025 Move X1, X31
	026 Call Transform.get_forward, X0
	027 Move X20, 0x25F1000
	028 Move W8, [X20+1926]
	029 Move V11, V0
	030 Move V12, V1
	031 Move V13, V2
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0x230C000
	035 Move X0, [X0+1440]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+1926], W8
	039 Move X8, [X19+192]
	040 Compare X8, 0
	041 JumpIfEqual {74}
	042 Move X9, 0x230C000
	043 Move X9, [X9+1440]
	044 Move V3, [X8+76]
	045 Move X8, -19910656
	046 Move V4, [X8+92]
	047 Move X9, [X9]
	048 Move X20, [X31+64]
	049 Move X19, [X31+72]
	050 Move X30, [X31+48]
	051 Move X9, [X9+184]
	052 Move S1, [X9+28]
	053 Move S0, [X9+32]
	054 Move V2, [X9+24]
	055 Add S0, S13, S0
	056 Add S1, S12, S1
	057 Add S2, S11, S2
	058 Multiply S2, S2, S3
	059 Multiply S1, S1, S3
	060 Multiply S0, S0, S3
	061 Multiply S2, S2, S4
	062 Multiply S1, S1, S4
	063 Multiply S3, S0, S4
	064 Add S0, S8, S2
	065 Add S1, S9, S1
	066 Add S2, S10, S3
	067 Move D9, [X31+32]
	068 Move D8, [X31+40]
	069 Move D11, [X31+16]
	070 Move D10, [X31+24]
	071 Move D13, [X31+80]
	072 Move D12, [X31+88]
	073 Return X0
	074 Call 0x1C17F20

Method: System.Boolean GetIsEggStolen()

Disassembly:
	0x01DE8E60 ADRP X24, 0x2310000
	0x01DE8E64 LDR X22, [X22 + 0xF48]
	0x01DE8E68 LDR X23, [X23 + 0x140]
	0x01DE8E6C LDR X24, [X24 + 0xE70]
	0x01DE8E70 MOV X1, X31
	0x01DE8E74 BL 0x1E93994
	0x01DE8E78 LDR X2, [X22]
	0x01DE8E7C AND X1, X0, 0x0
	0x01DE8E80 ADD X0, X31, 0x30
	0x01DE8E84 STR X31, [X31 + 0x30]
	0x01DE8E88 BL 0x2437428
	0x01DE8E8C LDR X0, [X23]
	0x01DE8E90 BL 0x1C16F10
	0x01DE8E94 LDR X2, [X24]
	0x01DE8E98 MOV X1, X19
	0x01DE8E9C MOV X3, X31
	0x01DE8EA0 MOV X22, X0
	0x01DE8EA4 BL 0x1EB1E84
	0x01DE8EA8 CBZ X20, 0x1DE8F08
	0x01DE8EAC LDP X2, X3, [X31 + 0x50]
	0x01DE8EB0 LDUR V0, [X31 + 0x38]
	0x01DE8EB4 LDR W8, [X31 + 0x48]
	0x01DE8EB8 LDR X5, [X31 + 0x30]
	0x01DE8EBC ADD X4, X31, 0x10
	0x01DE8EC0 MOV X0, X20
	0x01DE8EC4 MOV X1, X21
	0x01DE8EC8 MOV X6, X22
	0x01DE8ECC MOV W7, W31
	0x01DE8ED0 STR V0, [X31 + 0x1]
	0x01DE8ED4 STR W8, [X31 + 0x20]
	0x01DE8ED8 STR X31, [X31]
	0x01DE8EDC BL 0x1EAE6A8
	0x01DE8EE0 LDP X20, X19, [X31 + 0xC0]
	0x01DE8EE4 LDP X22, X21, [X31 + 0xB0]
	0x01DE8EE8 LDP X24, X23, [X31 + 0xA0]
	0x01DE8EEC LDR X30, [X31 + 0x98]
	0x01DE8EF0 LDP D9, D8, [X31 + 0x88]
	0x01DE8EF4 LDP D11, D10, [X31 + 0x78]
	0x01DE8EF8 LDP D13, D12, [X31 + 0x68]
	0x01DE8EFC LDR V14, [X31 + 0x60]
	0x01DE8F00 ADD X31, X31, 0xD0
	0x01DE8F04 RET
	0x01DE8F08 BL 0x1C16F20
	0x01DE8F0C SUB X31, X31, 0x40
	0x01DE8F10 STR X30, [X31 + 0x20]
	0x01DE8F14 STP X20, X19, [X31 + 0x30]
	0x01DE8F18 ADRP X20, 0x25F0000
	0x01DE8F1C LDRB W8, [X20 + 0xCB7]
	0x01DE8F20 MOV X19, X0
	0x01DE8F24 TBNZ X8, 0x0, 0x1DE8F3C
	0x01DE8F28 ADRP X0, 0x2310000
	0x01DE8F2C LDR X0, [X0 + 0xE78]
	0x01DE8F30 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x25F1000
	009 Move X20, 0x230C000
	010 Move W8, [X21+3250]
	011 Move X20, [X20+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x230C000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3250], W8
	022 Move X0, [X20]
	023 Move X20, [X19+488]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {37}
	036 Move W0, 1
	037 Move X0, X19
	038 Call ChickenController.get_nestPosition, X0
	039 Move X0, [X19+488]
	040 Compare X0, 0
	041 JumpIfEqual {66}
	042 Move X1, X31
	043 Move V8, V0
	044 Move V9, V1
	045 Move V10, V2
	046 Call Transform.get_position, X0
	047 Subtract S0, S8, S0
	048 Subtract S1, S9, S1
	049 Subtract S2, S10, S2
	050 Multiply S0, S0, S0
	051 Multiply S1, S1, S1
	052 Multiply S2, S2, S2
	053 Add S0, S0, S1
	054 Add S0, S2, S0
	055 Move S1, 1
	056 NotImplemented "Instruction FCMP not yet implemented."
	057 NotImplemented "Instruction CSET not yet implemented."
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Move D9, [X31+16]
	063 Move D8, [X31+24]
	064 Move V10, [X31+64]
	065 Return X0
	066 Call 0x1C17F20

Method: System.Single get_distanceToNest()

Disassembly:
	0x01DE8F34 MOVZ W8, 0x1
	0x01DE8F38 STRB W8, [X20 + 0xCB7]
	0x01DE8F3C MOV X0, X31
	0x01DE8F40 BL 0x1DD6AE8
	0x01DE8F44 TBZ X0, 0x0, 0x1DE8F54
	0x01DE8F48 MOV X0, X31
	0x01DE8F4C BL 0x3C3A708
	0x01DE8F50 STR S0, [X19 + 0x190]
	0x01DE8F54 MOV X0, X19
	0x01DE8F58 BL 0x1DE7A64
	0x01DE8F5C SUB W8, W0, 0x1
	0x01DE8F60 CMP W8, 0x4
	0x01DE8F64 B.HI 0x1DE8FD0
	0x01DE8F68 ADRP X9, 0xFFFFFFFFFED45000
	0x01DE8F6C ADD X9, X9, 0x967
	0x01DE8F70 ADR X10, 0x10
	0x01DE8F74 LDRB W11, [X9, X8, LSL]
	0x01DE8F78 ADD X10, X10, X11, 0x2, LSL
	0x01DE8F7C BR X10
	0x01DE8F80 MOV X0, X19
	0x01DE8F84 BL 0x1DE9060
	0x01DE8F88 B 0x1DE8FD0
	0x01DE8F8C MOV X0, X19
	0x01DE8F90 BL 0x1DE91B4
	0x01DE8F94 B 0x1DE8FD0
	0x01DE8F98 LDR X8, [X19]
	0x01DE8F9C MOV X0, X19
	0x01DE8FA0 LDR X9, [X8 + 0x3C8]
	0x01DE8FA4 LDR X1, [X8 + 0x3D0]
	0x01DE8FA8 BLR X9
	0x01DE8FAC B 0x1DE8FD0
	0x01DE8FB0 MOV X0, X19
	0x01DE8FB4 BL 0x1DE93BC
	0x01DE8FB8 B 0x1DE8FD0
	0x01DE8FBC MOV X0, X19
	0x01DE8FC0 BL 0x1DE94FC
	0x01DE8FC4 MOV X0, X19
	0x01DE8FC8 MOV W1, W31
	0x01DE8FCC BL 0x1DE87E8
	0x01DE8FD0 MOV X0, X31
	0x01DE8FD4 BL 0x1DD6AE8
	0x01DE8FD8 TBZ X0, 0x0, 0x1DE9028
	0x01DE8FDC LDR X20, [X19 + 0x198]
	0x01DE8FE0 CBZ X20, 0x1DE9028
	0x01DE8FE4 MOV X0, X19
	0x01DE8FE8 BL 0x1DE7A64
	0x01DE8FEC ADRP X8, 0x2310000

ISIL:
	001 Move [X31-64], D13
	002 Move [X31-56], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X19
	009 Move X1, X31
	010 Move X19, X0
	011 Call Component.get_transform, X0
	012 Compare X0, 0
	013 JumpIfEqual {58}
	014 Move X1, X31
	015 Call Transform.get_position, X0
	016 Move X0, X19
	017 Move V8, V0
	018 Move V9, V1
	019 Move V10, V2
	020 Call ChickenController.get_nestPosition, X0
	021 Move X19, 0x25F1000
	022 Move W8, [X19+2140]
	023 Move V11, V0
	024 Move V12, V1
	025 Move V13, V2
	026 Compare W8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, 0x230C000
	029 Move X0, [X0+1448]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X19+2140], W8
	033 Move X8, 0x230C000
	034 Move X8, [X8+1448]
	035 Subtract S11, S8, S11
	036 Subtract S9, S9, S12
	037 Subtract S8, S10, S13
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Multiply S0, S11, S11
	044 Multiply S1, S9, S9
	045 Add S0, S0, S1
	046 Multiply S1, S8, S8
	047 Move X30, [X31+48]
	048 Move X19, [X31+56]
	049 Move D9, [X31+32]
	050 Move D8, [X31+40]
	051 Move D11, [X31+16]
	052 Move D10, [X31+24]
	053 Add S0, S1, S0
	054 NotImplemented "Instruction FSQRT not yet implemented."
	055 Move D13, [X31+64]
	056 Move D12, [X31+72]
	057 Return V0
	058 Call 0x1C17F20

Method: UnityEngine.Vector3 get__eggSpawnPosition()

Disassembly:
	0x01DE8FF0 LDR X8, [X8 + 0xE78]
	0x01DE8FF4 MOVN X9, 0x0
	0x01DE8FF8 STR W0, [X31 + 0x18]
	0x01DE8FFC ADD X0, X31, 0x8
	0x01DE9000 LDR X8, [X8]
	0x01DE9004 MOV X1, X31
	0x01DE9008 STP X8, X9, [X31 + 0x8]
	0x01DE900C BL 0x33B162C
	0x01DE9010 LDR X8, [X20 + 0x40]
	0x01DE9014 LDR X9, [X20 + 0x18]
	0x01DE9018 LDR X2, [X20 + 0x28]
	0x01DE901C MOV X1, X0
	0x01DE9020 MOV X0, X8
	0x01DE9024 BLR X9
	0x01DE9028 LDP X20, X19, [X31 + 0x30]
	0x01DE902C LDR X30, [X31 + 0x20]
	0x01DE9030 ADD X31, X31, 0x40
	0x01DE9034 RET
	0x01DE9038 STP X30, X19, [X31 - 0x10]!
	0x01DE903C MOV X19, X0
	0x01DE9040 MOV X0, X31
	0x01DE9044 BL 0x1DD6AE8
	0x01DE9048 TBZ X0, 0x0, 0x1DE9058
	0x01DE904C MOV X0, X31
	0x01DE9050 BL 0x3C3A708
	0x01DE9054 STR S0, [X19 + 0x190]
	0x01DE9058 LDP X30, X19, [X31], #0x10
	0x01DE905C RET
	0x01DE9060 STR D10, [X31 - 0x40]!
	0x01DE9064 STP D9, D8, [X31 + 0x10]
	0x01DE9068 STP X30, X21, [X31 + 0x20]
	0x01DE906C STP X20, X19, [X31 + 0x30]
	0x01DE9070 ADRP X21, 0x25EF000

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Call ChickenController.get_nestPosition, X0
	007 Move X19, 0x25F0000
	008 Move W8, [X19+1926]
	009 Move V8, V0
	010 Move V9, V1
	011 Move V10, V2
	012 Compare W8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, 0x230B000
	015 Move X0, [X0+1440]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+1926], W8
	019 Move X8, 0x230B000
	020 Move X8, [X8+1440]
	021 Move X9, -19918848
	022 Move V0, [X9+4024]
	023 Move X30, [X31+32]
	024 Move X19, [X31+40]
	025 Move X8, [X8]
	026 Move X8, [X8+184]
	027 Move S1, [X8+24]
	028 Move S2, [X8+28]
	029 Move V3, [X8+32]
	030 Multiply S1, S1, S0
	031 Multiply S2, S2, S0
	032 Multiply S3, S3, S0
	033 Add S0, S8, S1
	034 Add S1, S9, S2
	035 Move D9, [X31+16]
	036 Move D8, [X31+24]
	037 Add S2, S10, S3
	038 Move V10, [X31+48]
	039 Return X0

Method: UnityEngine.Quaternion get__eggSpawnRotation()

Disassembly:
	0x01DE9074 ADRP X20, 0x230F000
	0x01DE9078 LDRB W8, [X21 + 0xCB9]
	0x01DE907C LDR X20, [X20 + 0xC40]
	0x01DE9080 MOV X19, X0
	0x01DE9084 TBNZ X8, 0x0, 0x1DE90D8
	0x01DE9088 ADRP X0, 0x230F000
	0x01DE908C LDR X0, [X0 + 0xE80]
	0x01DE9090 BL 0x1C16CF4
	0x01DE9094 ADRP X0, 0x230F000
	0x01DE9098 LDR X0, [X0 + 0xE88]
	0x01DE909C BL 0x1C16CF4
	0x01DE90A0 ADRP X0, 0x230F000
	0x01DE90A4 LDR X0, [X0 + 0xE90]
	0x01DE90A8 BL 0x1C16CF4
	0x01DE90AC ADRP X0, 0x230F000

ISIL:
	001 Move [X31-16], X30
	002 Move W8, 0x43B40000
	003 Move S0, W31
	004 Move S1, W8
	005 Move X0, X31
	006 Call Random.Range, V0, V1
	007 Move X8, -19914752
	008 Move V2, [X8+260]
	009 Move V1, V0
	010 Move S0, W31
	011 Move X0, X31
	012 Multiply S1, S1, S2
	013 Move S2, W31
	014 Move X30, [X31+16]
	015 Call Quaternion.Internal_FromEulerRad, X0
	016 Return X0

Method: System.Void HandlePhaseChanged()

Disassembly:
	0x01DE90B0 LDR X0, [X0 + 0xCB0]
	0x01DE90B4 BL 0x1C16CF4
	0x01DE90B8 ADRP X0, 0x230F000
	0x01DE90BC LDR X0, [X0 + 0xC70]
	0x01DE90C0 BL 0x1C16CF4
	0x01DE90C4 ADRP X0, 0x230F000
	0x01DE90C8 LDR X0, [X0 + 0xC40]
	0x01DE90CC BL 0x1C16CF4
	0x01DE90D0 MOVZ W8, 0x1
	0x01DE90D4 STRB W8, [X21 + 0xCB9]
	0x01DE90D8 MOV X0, X19
	0x01DE90DC STR X31, [X31 + 0x8]
	0x01DE90E0 BL 0x1DE7BE4
	0x01DE90E4 LDR X0, [X20]
	0x01DE90E8 MOV V8.16B, V0.16B
	0x01DE90EC MOV V9.16B, V1.16B
	0x01DE90F0 MOV V10.16B, V2.16B
	0x01DE90F4 LDR W8, [X0 + 0xE0]
	0x01DE90F8 CBNZ W8, 0x1DE9100
	0x01DE90FC BL 0x1C16DFC
	0x01DE9100 FMOV S3, 12
	0x01DE9104 ADD X1, X31, 0x8
	0x01DE9108 MOV X0, X19
	0x01DE910C MOV V0.16B, V8.16B
	0x01DE9110 MOV V1.16B, V9.16B
	0x01DE9114 MOV V2.16B, V10.16B
	0x01DE9118 BL 0x1DE9804
	0x01DE911C TBZ X0, 0x0, 0x1DE919C
	0x01DE9120 LDR X20, [X31 + 0x8]
	0x01DE9124 CBZ X20, 0x1DE91B0
	0x01DE9128 LDR W8, [X20 + 0x18]
	0x01DE912C CMP W8, 0x1
	0x01DE9130 B.LE 0x1DE9178
	0x01DE9134 ADRP X8, 0x230F000
	0x01DE9138 LDR X8, [X8 + 0xE88]
	0x01DE913C LDR X0, [X8]
	0x01DE9140 BL 0x1C16F10
	0x01DE9144 ADRP X8, 0x230F000
	0x01DE9148 LDR X8, [X8 + 0xE80]
	0x01DE914C MOV X1, X19
	0x01DE9150 MOV X3, X31
	0x01DE9154 MOV X21, X0
	0x01DE9158 LDR X2, [X8]
	0x01DE915C BL 0x295A080
	0x01DE9160 ADRP X8, 0x230F000
	0x01DE9164 LDR X8, [X8 + 0xE90]
	0x01DE9168 MOV X0, X20
	0x01DE916C MOV X1, X21
	0x01DE9170 LDR X2, [X8]
	0x01DE9174 BL 0x301DD30
	0x01DE9178 ADRP X8, 0x230F000
	0x01DE917C LDR X8, [X8 + 0xC70]
	0x01DE9180 MOV X0, X20
	0x01DE9184 MOV W1, W31
	0x01DE9188 LDR X2, [X8]
	0x01DE918C BL 0x301BCCC
	0x01DE9190 MOV X1, X0
	0x01DE9194 MOV X0, X19
	0x01DE9198 BL 0x1DE98AC
	0x01DE919C LDP X20, X19, [X31 + 0x30]
	0x01DE91A0 LDP X30, X21, [X31 + 0x20]
	0x01DE91A4 LDP D9, D8, [X31 + 0x10]
	0x01DE91A8 LDR V10, [X31], #0x40
	0x01DE91AC RET
	0x01DE91B0 BL 0x1C16F20
	0x01DE91B4 SUB X31, X31, 0x50
	0x01DE91B8 STR D10, [X31 + 0x10]
	0x01DE91BC STP D9, D8, [X31 + 0x20]
	0x01DE91C0 STP X30, X21, [X31 + 0x30]
	0x01DE91C4 STP X20, X19, [X31 + 0x40]
	0x01DE91C8 ADRP X21, 0x25EF000
	0x01DE91CC ADRP X20, 0x230A000
	0x01DE91D0 LDRB W8, [X21 + 0xCBA]
	0x01DE91D4 LDR X20, [X20 + 0x598]
	0x01DE91D8 MOV X19, X0
	0x01DE91DC TBNZ X8, 0x0, 0x1DE9224
	0x01DE91E0 ADRP X0, 0x230F000
	0x01DE91E4 LDR X0, [X0 + 0xE98]
	0x01DE91E8 BL 0x1C16CF4
	0x01DE91EC ADRP X0, 0x230F000
	0x01DE91F0 LDR X0, [X0 + 0xCB0]
	0x01DE91F4 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Call ChickenController.get_phase, X0
	007 Subtract W8, W0, 1
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X9, -19640320
	010 Add X9, X9, 2402
	011 NotImplemented "Instruction ADR not yet implemented."
	012 Move W11, [X9]
	013 Add X10, X10, X11
	014 CallNoReturn X10
	015 Move X0, [X19+200]
	016 Compare X0, 0
	017 JumpIfEqual {90}
	018 Move X8, [X0]
	019 Move X9, [X8+472]
	020 Move X1, [X8+480]
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move X0, [X19+200]
	023 Compare X0, 0
	024 JumpIfEqual {90}
	025 Move X8, [X0]
	026 Move X9, [X8+504]
	027 Move X1, [X8+512]
	028 Move X0, [X19+200]
	029 Compare X0, 0
	030 JumpIfEqual {90}
	031 Move X8, [X0]
	032 Move X9, [X8+488]
	033 Move X1, [X8+496]
	034 Move S0, 1
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X0, X19
	037 Call ChickenController.get_phase, X0
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move W20, 1
	040 Move X0, X19
	041 Call ChickenController.get_phase, X0
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSET not yet implemented."
	044 Move X8, [X19+448]
	045 Compare X8, 0
	046 JumpIfEqual {90}
	047 Move X0, [X8+184]
	048 Compare X0, 0
	049 JumpIfEqual {90}
	050 Move W1, W20
	051 Move X2, X31
	052 Call Renderer.set_enabled, X0, X1
	053 Move X0, [X19+448]
	054 Compare X0, 0
	055 JumpIfEqual {90}
	056 Move X8, [X0]
	057 Move W1, W20
	058 Move X9, [X8+440]
	059 Move X2, [X8+448]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X20, [X19+448]
	062 Move X0, X19
	063 Call ChickenController.get_phase, X0
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, X19
	066 Call ChickenController.get_phase, X0
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W21, 1
	069 Move X0, X19
	070 Call ChickenController.get_phase, X0
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CSET not yet implemented."
	073 Move X0, X19
	074 Call ChickenController.get_phase, X0
	075 Compare X20, 0
	076 JumpIfEqual {90}
	077 Move X8, -19918848
	078 Move V0, [X8+3876]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X0, X20
	081 Move X20, [X31+16]
	082 Move X19, [X31+24]
	083 Move S1, 1
	084 NotImplemented "Instruction FCSEL not yet implemented."
	085 Move W1, W21
	086 Move X30, [X31+32]
	087 Move X21, [X31+40]
	088 Call ChickenView.PlayRunningSound, X0, X1, V0
	089 Return 
	090 Call 0x1C17F20

Method: System.Void HandleEggIDChanged()

Disassembly:
	0x01DE9294 LDR V10, [X31 + 0x10]
	0x01DE9298 ADD X31, X31, 0x50
	0x01DE929C RET
	0x01DE92A0 MOV X0, X19
	0x01DE92A4 BL 0x1DE7BE4
	0x01DE92A8 ADRP X20, 0x230F000
	0x01DE92AC LDR X20, [X20 + 0xC40]
	0x01DE92B0 MOV V8.16B, V0.16B
	0x01DE92B4 MOV V9.16B, V1.16B
	0x01DE92B8 MOV V10.16B, V2.16B
	0x01DE92BC LDR X0, [X20]
	0x01DE92C0 LDR W8, [X0 + 0xE0]
	0x01DE92C4 CBNZ W8, 0x1DE92CC
	0x01DE92C8 BL 0x1C16DFC
	0x01DE92CC FMOV S3, 6
	0x01DE92D0 ADD X1, X31, 0x18
	0x01DE92D4 MOV X0, X19
	0x01DE92D8 MOV V0.16B, V8.16B
	0x01DE92DC MOV V1.16B, V9.16B
	0x01DE92E0 MOV V2.16B, V10.16B
	0x01DE92E4 BL 0x1DE9804
	0x01DE92E8 TBZ X0, 0x0, 0x1DE9318

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move [X31+8], X31
	005 Move X20, [X0+56]
	006 Move X19, X0
	007 Call ChickenController.get_eggID, X0
	008 Compare X20, 0
	009 JumpIfEqual {29}
	010 And X1, X0, 0
	011 Add X2, X31, 8
	012 Move X0, X20
	013 Move X3, X31
	014 Call NetworkRunner.TryFindObject, X0, X1, X2
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {25}
	019 Move X0, [X31+8]
	020 Compare X0, 0
	021 JumpIfEqual {29}
	022 Move X1, X31
	023 Call Component.get_transform, X0
	024 Move [X19+488], X0
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 
	029 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x01DE92EC LDR X20, [X31 + 0x18]
	0x01DE92F0 CBZ X20, 0x1DE93B8
	0x01DE92F4 ADRP X8, 0x230F000
	0x01DE92F8 LDR X1, [X19 + 0x160]
	0x01DE92FC LDR X8, [X8 + 0xE98]
	0x01DE9300 MOV X0, X20
	0x01DE9304 LDR X2, [X8]
	0x01DE9308 BL 0x301C318
	0x01DE930C TBZ X0, 0x0, 0x1DE9380
	0x01DE9310 LDR X1, [X19 + 0x160]
	0x01DE9314 B 0x1DE93AC
	0x01DE9318 MOV X0, X19
	0x01DE931C BL 0x1DE7BE4
	0x01DE9320 LDR X0, [X20]
	0x01DE9324 MOV V8.16B, V0.16B
	0x01DE9328 MOV V9.16B, V1.16B
	0x01DE932C MOV V10.16B, V2.16B
	0x01DE9330 LDR W8, [X0 + 0xE0]
	0x01DE9334 CBNZ W8, 0x1DE933C
	0x01DE9338 BL 0x1C16DFC
	0x01DE933C FMOV S3, 12
	0x01DE9340 ADD X1, X31, 0x8
	0x01DE9344 MOV X0, X19
	0x01DE9348 MOV V0.16B, V8.16B
	0x01DE934C MOV V1.16B, V9.16B
	0x01DE9350 MOV V2.16B, V10.16B
	0x01DE9354 BL 0x1DE9804
	0x01DE9358 TBNZ X0, 0x0, 0x1DE9288
	0x01DE935C MOV X0, X19
	0x01DE9360 BL 0x1DE7F34
	0x01DE9364 ADRP X8, 0xFFFFFFFFFED01000
	0x01DE9368 LDR V1, [X8 + 0xBC]
	0x01DE936C FCMP S0, S1
	0x01DE9370 B.MI 0x1DE9280
	0x01DE9374 MOV X0, X19
	0x01DE9378 BL 0x1DE8AFC
	0x01DE937C B 0x1DE9288
	0x01DE9380 LDR W1, [X20 + 0x18]
	0x01DE9384 MOV W0, W31
	0x01DE9388 MOV X2, X31
	0x01DE938C BL 0x3C309A8
	0x01DE9390 ADRP X8, 0x230F000
	0x01DE9394 LDR X8, [X8 + 0xC70]
	0x01DE9398 MOV W1, W0
	0x01DE939C MOV X0, X20
	0x01DE93A0 LDR X2, [X8]
	0x01DE93A4 BL 0x301BCCC
	0x01DE93A8 MOV X1, X0
	0x01DE93AC MOV X0, X19
	0x01DE93B0 BL 0x1DE996C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25F0000
	006 Move X21, 0x230E000
	007 Move W8, [X20+3251]
	008 Move X21, [X21+2680]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x230E000
	015 Move X0, [X0+2680]
	016 Call 0x1C17CF4
	017 Move X0, 0x230B000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3251], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Compare X19, 0
	028 JumpIfEqual {67}
	029 Move W8, [X19+48]
	030 Move X21, 0x230B000
	031 Move X21, [X21+1432]
	032 Move X20, [X19+472]
	033 Or W8, W8, 8
	034 Move [X19+48], W8
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Inequality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {62}
	048 Move X0, [X21]
	049 Move X19, [X19+472]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X19
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X1, X31
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 Call Object.Destroy, X0
	061 Return 
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Return 
	067 Call 0x1C17F20

Method: System.Void Setup()

Disassembly:
	0x01DE93B4 B 0x1DE9288
	0x01DE93B8 BL 0x1C16F20
	0x01DE93BC STR D10, [X31 - 0x40]!
	0x01DE93C0 STP D9, D8, [X31 + 0x10]
	0x01DE93C4 STP X30, X21, [X31 + 0x20]
	0x01DE93C8 STP X20, X19, [X31 + 0x30]
	0x01DE93CC ADRP X21, 0x25EF000
	0x01DE93D0 ADRP X20, 0x230F000
	0x01DE93D4 LDRB W8, [X21 + 0xCBC]
	0x01DE93D8 LDR X20, [X20 + 0xC40]
	0x01DE93DC MOV X19, X0
	0x01DE93E0 TBNZ X8, 0x0, 0x1DE9410
	0x01DE93E4 ADRP X0, 0x230F000
	0x01DE93E8 LDR X0, [X0 + 0xCB0]
	0x01DE93EC BL 0x1C16CF4
	0x01DE93F0 ADRP X0, 0x230F000
	0x01DE93F4 LDR X0, [X0 + 0xC70]
	0x01DE93F8 BL 0x1C16CF4
	0x01DE93FC ADRP X0, 0x230F000
	0x01DE9400 LDR X0, [X0 + 0xC40]
	0x01DE9404 BL 0x1C16CF4
	0x01DE9408 MOVZ W8, 0x1
	0x01DE940C STRB W8, [X21 + 0xCBC]
	0x01DE9410 MOV X0, X19
	0x01DE9414 STR X31, [X31 + 0x8]
	0x01DE9418 BL 0x1DE7BE4
	0x01DE941C LDR X0, [X20]
	0x01DE9420 MOV V8.16B, V0.16B
	0x01DE9424 MOV V9.16B, V1.16B
	0x01DE9428 MOV V10.16B, V2.16B
	0x01DE942C LDR W8, [X0 + 0xE0]
	0x01DE9430 CBNZ W8, 0x1DE9438
	0x01DE9434 BL 0x1C16DFC
	0x01DE9438 FMOV S3, 12
	0x01DE943C ADD X1, X31, 0x8
	0x01DE9440 MOV X0, X19
	0x01DE9444 MOV V0.16B, V8.16B
	0x01DE9448 MOV V1.16B, V9.16B
	0x01DE944C MOV V2.16B, V10.16B
	0x01DE9450 BL 0x1DE9804
	0x01DE9454 TBZ X0, 0x0, 0x1DE9498
	0x01DE9458 LDR X20, [X31 + 0x8]
	0x01DE945C CBZ X20, 0x1DE94F8
	0x01DE9460 LDR W1, [X20 + 0x18]
	0x01DE9464 MOV W0, W31
	0x01DE9468 MOV X2, X31
	0x01DE946C BL 0x3C309A8
	0x01DE9470 ADRP X8, 0x230F000
	0x01DE9474 LDR X8, [X8 + 0xC70]
	0x01DE9478 MOV W1, W0
	0x01DE947C MOV X0, X20
	0x01DE9480 LDR X2, [X8]
	0x01DE9484 BL 0x301BCCC
	0x01DE9488 MOV X1, X0
	0x01DE948C MOV X0, X19
	0x01DE9490 BL 0x1DE996C
	0x01DE9494 B 0x1DE94E4
	0x01DE9498 MOV X0, X19
	0x01DE949C BL 0x1DE7F34
	0x01DE94A0 ADRP X8, 0xFFFFFFFFFED01000
	0x01DE94A4 LDR V1, [X8 + 0xBC]
	0x01DE94A8 FCMP S0, S1
	0x01DE94AC B.PL 0x1DE94BC
	0x01DE94B0 MOV X0, X19
	0x01DE94B4 BL 0x1DE8934
	0x01DE94B8 B 0x1DE94E4
	0x01DE94BC MOV X0, X19
	0x01DE94C0 BL 0x1DE7F34
	0x01DE94C4 FMOV S1, 12
	0x01DE94C8 FCMP S0, S1
	0x01DE94CC B.PL 0x1DE94E4
	0x01DE94D0 MOV X0, X19
	0x01DE94D4 BL 0x1DE7E60
	0x01DE94D8 TBZ X0, 0x0, 0x1DE94E4
	0x01DE94DC MOV X0, X19
	0x01DE94E0 BL 0x1DEA604
	0x01DE94E4 LDP X20, X19, [X31 + 0x30]
	0x01DE94E8 LDP X30, X21, [X31 + 0x20]
	0x01DE94EC LDP D9, D8, [X31 + 0x10]
	0x01DE94F0 LDR V10, [X31], #0x40
	0x01DE94F4 RET
	0x01DE94F8 BL 0x1C16F20
	0x01DE94FC STP D13, D12, [X31 - 0x50]!
	0x01DE9500 STP D11, D10, [X31 + 0x10]
	0x01DE9504 STP D9, D8, [X31 + 0x20]
	0x01DE9508 STP X30, X21, [X31 + 0x30]
	0x01DE950C STP X20, X19, [X31 + 0x40]
	0x01DE9510 ADRP X21, 0x25EF000
	0x01DE9514 ADRP X20, 0x230F000
	0x01DE9518 LDRB W8, [X21 + 0xCBD]
	0x01DE951C LDR X20, [X20 + 0xC40]
	0x01DE9520 MOV X19, X0
	0x01DE9524 TBNZ X8, 0x0, 0x1DE9554
	0x01DE9528 ADRP X0, 0x230F000
	0x01DE952C LDR X0, [X0 + 0xCB0]
	0x01DE9530 BL 0x1C16CF4
	0x01DE9534 ADRP X0, 0x230F000
	0x01DE9538 LDR X0, [X0 + 0xC70]
	0x01DE953C BL 0x1C16CF4
	0x01DE9540 ADRP X0, 0x230F000
	0x01DE9544 LDR X0, [X0 + 0xC40]
	0x01DE9548 BL 0x1C16CF4
	0x01DE954C MOVZ W8, 0x1
	0x01DE9550 STRB W8, [X21 + 0xCBD]
	0x01DE9554 LDR X0, [X20]
	0x01DE9558 ADD X20, X19, 0x178
	0x01DE955C LDR W8, [X0 + 0xE0]
	0x01DE9560 CBNZ W8, 0x1DE9568
	0x01DE9564 BL 0x1C16DFC
	0x01DE9568 MOV X0, X19
	0x01DE956C MOV X1, X20
	0x01DE9570 BL 0x1DEA6E8
	0x01DE9574 TBZ X0, 0x0, 0x1DE95C8
	0x01DE9578 LDR X20, [X20]
	0x01DE957C CBZ X20, 0x1DE96B8
	0x01DE9580 LDR W1, [X20 + 0x18]
	0x01DE9584 MOV W0, W31
	0x01DE9588 MOV X2, X31
	0x01DE958C BL 0x3C309A8
	0x01DE9590 ADRP X8, 0x230F000
	0x01DE9594 LDR X8, [X8 + 0xC70]

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X21, 0x25F0000
	014 Move X20, 0x230E000
	015 Move W8, [X21+3252]
	016 Move X20, [X20+1048]
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0x230E000
	023 Move X0, [X0+1048]
	024 Call 0x1C17CF4
	025 Move X0, 0x2310000
	026 Move X0, [X0+3648]
	027 Call 0x1C17CF4
	028 Move X0, 0x230B000
	029 Move X0, [X0+1432]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+3252], W8
	033 Move X0, X19
	034 Call MobController.Setup, X0
	035 Move X1, [X20]
	036 Move X0, X19
	037 Call 0x21A553C, X0
	038 Move X8, [X19+64]
	039 Move [X19+496], X0
	040 Compare X8, 0
	041 JumpIfEqual {147}
	042 Move X0, X8
	043 Move X1, X31
	044 Call NetworkObject.get_HasStateAuthority, X0
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {74}
	049 Move X8, [X19+192]
	050 Compare X8, 0
	051 JumpIfEqual {147}
	052 Move V0, [X8+40]
	053 Move X0, X19
	054 Call MobController.set__timerAttackInterval, X0, V0
	055 Move X0, X31
	056 Call TickTimer.get_None
	057 And X1, X0, 0
	058 Move X0, X19
	059 Call ChickenController.set__timerToSpawnEgg, X0, X1
	060 Move X0, X19
	061 Move X1, X31
	062 Call Component.get_transform, X0
	063 Compare X0, 0
	064 JumpIfEqual {147}
	065 Move X1, X31
	066 Call Transform.get_position, X0
	067 Move X0, X19
	068 Call ChickenController.set_nestPosition, X0, X1
	069 Move W1, 1
	070 Move X0, X19
	071 Call ChickenController.SpawnEggIfNecessary, X0, X1
	072 Move X0, X19
	073 Call ChickenController.SetIncubating, X0
	074 Move X21, 0x230B000
	075 Move X20, [X19+464]
	076 Move X21, [X21+1432]
	077 Move X0, X19
	078 Call ChickenController.get_nestPosition, X0
	079 Move X22, 0x25F0000
	080 Move W8, [X22+1939]
	081 Move V8, V0
	082 Move V9, V1
	083 Move V10, V2
	084 Compare W8, 0
	085 JumpIfNotEqual {91}
	086 Move X0, 0x230C000
	087 Move X0, [X0+1448]
	088 Call 0x1C17CF4
	089 Move W8, 1
	090 Move [X22+1939], W8
	091 Move X8, 0x230C000
	092 Move X8, [X8+1448]
	093 Move X0, [X21]
	094 Move X21, 0x2310000
	095 Move X8, [X8]
	096 Move W9, [X0+224]
	097 Move X8, [X8+184]
	098 Move S14, [X8]
	099 Move S13, [X8+4]
	100 Move S12, [X8+8]
	101 Move S11, [X8+12]
	102 Move X21, [X21+3648]
	103 Compare W9, 0
	104 JumpIfNotEqual {106}
	105 Call 0x1C17DFC
	106 Move X1, [X21]
	107 Move X0, X20
	108 Move V0, V8
	109 Move V1, V9
	110 Move V2, V10
	111 Move V3, V14
	112 Move V4, V13
	113 Move V5, V12
	114 Move V6, V11
	115 Call 0x222E5B8, X0, X1, X2
	116 Move X8, [X19+232]
	117 Move [X19+472], X0
	118 Compare X8, 0
	119 JumpIfEqual {147}
	120 Move W1, 1
	121 Move X0, X8
	122 Move X2, X31
	123 Call NavMeshAgent.set_updatePosition, X0, X1
	124 Move X0, [X19+232]
	125 Compare X0, 0
	126 JumpIfEqual {147}
	127 Move W1, 1
	128 Move X2, X31
	129 Call NavMeshAgent.set_updateRotation, X0, X1
	130 Move X0, X19
	131 Call ChickenController.HandlePhaseChanged, X0
	132 Move X0, X19
	133 Move X20, [X31+80]
	134 Move X19, [X31+88]
	135 Move X22, [X31+64]
	136 Move X21, [X31+72]
	137 Move X30, [X31+56]
	138 Move D9, [X31+40]
	139 Move D8, [X31+48]
	140 Move D11, [X31+24]
	141 Move D10, [X31+32]
	142 Move D13, [X31+8]
	143 Move D12, [X31+16]
	144 Move V14, [X31+96]
	145 Call ChickenController.HandleEggIDChanged, X0
	146 Return 
	147 Call 0x1C17F20

Method: System.Void HandleRevive()

Disassembly:
	0x01DE99B4 MOV X0, X20
	0x01DE99B8 MOV X1, X31
	0x01DE99BC BL 0x3C32E90
	0x01DE99C0 CBZ X0, 0x1DE9A38
	0x01DE99C4 MOV X1, X31
	0x01DE99C8 BL 0x3C3F58C
	0x01DE99CC MOV X0, X19
	0x01DE99D0 BL 0x1DE9A40
	0x01DE99D4 LDR X9, [X19 + 0xC0]
	0x01DE99D8 CBZ X9, 0x1DE9A38
	0x01DE99DC LDR X8, [X9 + 0x38]
	0x01DE99E0 CBZ X8, 0x1DE9A38
	0x01DE99E4 LDR W10, [X8 + 0x18]
	0x01DE99E8 CBZ W10, 0x1DE9A3C
	0x01DE99EC LDR X10, [X9 + 0x58]
	0x01DE99F0 CBZ X10, 0x1DE9A38
	0x01DE99F4 LDR W11, [X10 + 0x18]
	0x01DE99F8 CBZ W11, 0x1DE9A3C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobController.HandleRevive, X0
	005 Move X0, X19
	006 Call ChickenController.get_nestPosition, X0
	007 Move X0, X19
	008 Call MobController.Respawn, X0, X1
	009 Move X0, [X19+64]
	010 Compare X0, 0
	011 JumpIfEqual {26}
	012 Move X1, X31
	013 Call NetworkObject.get_HasStateAuthority, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {23}
	018 Move X0, X19
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Call ChickenController.SetBackToNest, X0
	022 Return 
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Return 
	026 Call 0x1C17F20

Method: System.Void HandleDie()

Disassembly:
	0x01DE9BBC MOV X0, X19
	0x01DE9BC0 BL 0x1DE8788
	0x01DE9BC4 LDR X0, [X21]
	0x01DE9BC8 LDR X20, [X19 + 0x160]
	0x01DE9BCC LDR W8, [X0 + 0xE0]
	0x01DE9BD0 CBNZ W8, 0x1DE9BD8
	0x01DE9BD4 BL 0x1C16DFC
	0x01DE9BD8 MOV X0, X20
	0x01DE9BDC MOV X1, X31
	0x01DE9BE0 MOV X2, X31
	0x01DE9BE4 BL 0x3C354F8
	0x01DE9BE8 TBZ X0, 0x0, 0x1DE9D08
	0x01DE9BEC MOV X0, X19
	0x01DE9BF0 BL 0x1DE7D6C
	0x01DE9BF4 MOV X0, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobController.HandleDie, X0
	005 Move X0, [X19+64]
	006 Compare X0, 0
	007 JumpIfEqual {23}
	008 Move X1, X31
	009 Call NetworkObject.get_HasStateAuthority, X0
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {20}
	014 Move W1, 6
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call ChickenController.set_phase, X0, X1
	019 Return 
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 
	023 Call 0x1C17F20

Method: System.Void SpawnEggIfNecessary(System.Boolean initialize = False)

Disassembly:
	0x01DE97E8 MOV W1, W31
	0x01DE97EC MOV X0, X19
	0x01DE97F0 LDP X20, X19, [X31 + 0x20]
	0x01DE97F4 LDP X22, X21, [X31 + 0x10]
	0x01DE97F8 LDR X30, [X31], #0x30
	0x01DE97FC B 0x1DF4D4C
	0x01DE9800 BL 0x1C16F20
	0x01DE9804 STP D11, D10, [X31 - 0x40]!
	0x01DE9808 STP D9, D8, [X31 + 0x10]
	0x01DE980C STP X30, X21, [X31 + 0x20]
	0x01DE9810 STP X20, X19, [X31 + 0x30]
	0x01DE9814 ADRP X21, 0x25EF000
	0x01DE9818 ADRP X20, 0x230F000
	0x01DE981C LDRB W8, [X21 + 0xD1D]
	0x01DE9820 LDR X20, [X20 + 0xC40]
	0x01DE9824 MOV X19, X1
	0x01DE9828 MOV V8.16B, V3.16B
	0x01DE982C MOV V9.16B, V2.16B
	0x01DE9830 MOV V10.16B, V1.16B
	0x01DE9834 MOV V11.16B, V0.16B
	0x01DE9838 TBNZ X8, 0x0, 0x1DE985C
	0x01DE983C ADRP X0, 0x230F000
	0x01DE9840 LDR X0, [X0 + 0xCB0]
	0x01DE9844 BL 0x1C16CF4
	0x01DE9848 ADRP X0, 0x230F000
	0x01DE984C LDR X0, [X0 + 0xC40]
	0x01DE9850 BL 0x1C16CF4
	0x01DE9854 MOVZ W8, 0x1
	0x01DE9858 STRB W8, [X21 + 0xD1D]
	0x01DE985C LDR X0, [X20]
	0x01DE9860 LDR W8, [X0 + 0xE0]
	0x01DE9864 CBNZ W8, 0x1DE986C
	0x01DE9868 BL 0x1C16DFC
	0x01DE986C MOV V0.16B, V11.16B
	0x01DE9870 MOV V1.16B, V10.16B
	0x01DE9874 MOV V2.16B, V9.16B
	0x01DE9878 MOV V3.16B, V8.16B
	0x01DE987C BL 0x1DEFBA0
	0x01DE9880 STR X0, [X19]
	0x01DE9884 CBZ X0, 0x1DE98A8
	0x01DE9888 LDR W8, [X0 + 0x18]
	0x01DE988C LDP X20, X19, [X31 + 0x30]
	0x01DE9890 LDP X30, X21, [X31 + 0x20]
	0x01DE9894 LDP D9, D8, [X31 + 0x10]
	0x01DE9898 CMP W8, 0x0
	0x01DE989C CSET W0, GT
	0x01DE98A0 LDP D11, D10, [X31], #0x40
	0x01DE98A4 RET
	0x01DE98A8 BL 0x1C16F20
	0x01DE98AC STR X30, [X31 - 0x20]!
	0x01DE98B0 STP X20, X19, [X31 + 0x10]
	0x01DE98B4 MOV X20, X1
	0x01DE98B8 MOVZ W1, 0x2
	0x01DE98BC MOV X19, X0
	0x01DE98C0 BL 0x1DE7AC4
	0x01DE98C4 LDR X8, [X19]
	0x01DE98C8 MOV X0, X19
	0x01DE98CC MOV X1, X20
	0x01DE98D0 LDR X9, [X8 + 0x3B8]
	0x01DE98D4 LDR X2, [X8 + 0x3C0]
	0x01DE98D8 BLR X9
	0x01DE98DC LDR X9, [X19 + 0xC0]
	0x01DE98E0 CBZ X9, 0x1DE9964
	0x01DE98E4 LDR X8, [X9 + 0x58]
	0x01DE98E8 CBZ X8, 0x1DE9964
	0x01DE98EC LDR W10, [X8 + 0x18]
	0x01DE98F0 CBZ W10, 0x1DE9968
	0x01DE98F4 LDR X9, [X9 + 0x60]
	0x01DE98F8 CBZ X9, 0x1DE9964
	0x01DE98FC LDR W10, [X9 + 0x18]
	0x01DE9900 CBZ W10, 0x1DE9968
	0x01DE9904 LDR X10, [X19]
	0x01DE9908 LDR V1, [X8 + 0x20]
	0x01DE990C LDR V2, [X9 + 0x20]
	0x01DE9910 FMOV S0, W31
	0x01DE9914 LDR X8, [X10 + 0x2C8]
	0x01DE9918 LDR X2, [X10 + 0x2D0]
	0x01DE991C MOVZ W1, 0x1
	0x01DE9920 MOV X0, X19
	0x01DE9924 BLR X8
	0x01DE9928 LDR X8, [X19 + 0xC0]
	0x01DE992C CBZ X8, 0x1DE9964
	0x01DE9930 LDR X20, [X8 + 0xA0]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x25F0000
	009 Move W8, [X21+3253]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x230B000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3253], W8
	021 Move [X31+8], W31
	022 Move TEMP, X20
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {66}
	026 Move X0, X31
	027 Call TickTimer.get_None
	028 And X1, X0, 0
	029 Move X0, X19
	030 Call ChickenController.set__timerToSpawnEgg, X0, X1
	031 Move X0, X19
	032 Call ChickenController.get__eggSpawnPosition, X0
	033 Move W8, 0x43B40000
	034 Move V8, V0
	035 Move V9, V1
	036 Move S0, W31
	037 Move S1, W8
	038 Move X0, X31
	039 Move V10, V2
	040 Call Random.Range, V0, V1
	041 Move X8, -19914752
	042 Move V1, [X8+260]
	043 Move S2, W31
	044 Move X0, X31
	045 Multiply S1, S0, S1
	046 Move S0, W31
	047 Call Quaternion.Internal_FromEulerRad, X0
	048 Move V4, V0
	049 Move V5, V1
	050 Move V6, V2
	051 Move V7, V3
	052 Move X0, X19
	053 Move V0, V8
	054 Move V1, V9
	055 Move V2, V10
	056 Move V3, V4
	057 Move V4, V5
	058 Move V5, V6
	059 Move V6, V7
	060 Call ChickenController.SpawnEgg, X0, X1, X2
	061 Move X0, X19
	062 Call ChickenController.get_phase, X0
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X0, X19
	065 Call ChickenController.SetBackToNest, X0
	066 Move X8, 0x230B000
	067 Move X8, [X8+1432]
	068 Move X20, [X19+488]
	069 Move X0, [X8]
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Move X0, X20
	075 Move X1, X31
	076 Move X2, X31
	077 Call Object.op_Equality, X0, X1
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {93}
	082 Move X0, X19
	083 Call ChickenController.get__timerToSpawnEgg, X0
	084 Move [X31+8], W0
	085 Move X1, [X19+56]
	086 Add X0, X31, 8
	087 Move X2, X31
	088 Call TickTimer.Expired, X0, X1
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfEqual {26}
	093 Move X20, [X31+48]
	094 Move X19, [X31+56]
	095 Move X30, [X31+32]
	096 Move X21, [X31+40]
	097 Move D9, [X31+16]
	098 Move D8, [X31+24]
	099 Move V10, [X31+64]
	100 Return 

Method: System.Void SpawnEgg(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)

Disassembly:
	0x01DE9D64 LDP X4, X3, [X8 + 0xB8]
	0x01DE9D68 LDR X5, [X8 + 0x18]
	0x01DE9D6C MOV X0, X20
	0x01DE9D70 BFM X6, X9, 0x20, 0x1F
	0x01DE9D74 MOV W1, W21
	0x01DE9D78 MOV X7, X31
	0x01DE9D7C BL 0x1DB7644
	0x01DE9D80 MOV X0, X19
	0x01DE9D84 BL 0x1DE7A64
	0x01DE9D88 CMP W0, 0x3
	0x01DE9D8C B.NE 0x1DE9E64
	0x01DE9D90 LDR X0, [X19 + 0xE8]
	0x01DE9D94 CBZ X0, 0x1DEA1BC
	0x01DE9D98 MOV X1, X31
	0x01DE9D9C BL 0x3BE1608
	0x01DE9DA0 TBZ X0, 0x0, 0x1DE9E88
	0x01DE9DA4 MOV X0, X19
	0x01DE9DA8 BL 0x1DEA5A0
	0x01DE9DAC MOV X0, X19
	0x01DE9DB0 MOV X1, X31
	0x01DE9DB4 MOV V8.16B, V0.16B
	0x01DE9DB8 MOV V9.16B, V1.16B
	0x01DE9DBC MOV V10.16B, V2.16B
	0x01DE9DC0 BL 0x3C32E90
	0x01DE9DC4 CBZ X0, 0x1DEA1BC
	0x01DE9DC8 MOV X1, X31
	0x01DE9DCC BL 0x3C3F58C
	0x01DE9DD0 ADRP X21, 0x25EF000
	0x01DE9DD4 LDRB W8, [X21 + 0x785]
	0x01DE9DD8 MOV V11.16B, V0.16B
	0x01DE9DDC MOV V12.16B, V1.16B
	0x01DE9DE0 MOV V13.16B, V2.16B
	0x01DE9DE4 CBNZ W8, 0x1DE9DFC
	0x01DE9DE8 ADRP X0, 0x230A000
	0x01DE9DEC LDR X0, [X0 + 0x5A8]
	0x01DE9DF0 BL 0x1C16CF4
	0x01DE9DF4 MOVZ W8, 0x1
	0x01DE9DF8 STRB W8, [X21 + 0x785]
	0x01DE9DFC ADRP X20, 0x230A000
	0x01DE9E00 LDR X20, [X20 + 0x5A8]
	0x01DE9E04 FSUB S11, S8, S11
	0x01DE9E08 FSUB S9, S9, S12
	0x01DE9E0C FSUB S8, S10, S13
	0x01DE9E10 LDR X0, [X20]
	0x01DE9E14 LDR W8, [X0 + 0xE0]
	0x01DE9E18 CBNZ W8, 0x1DE9E20
	0x01DE9E1C BL 0x1C16DFC
	0x01DE9E20 ADRP X8, 0xFFFFFFFFFED01000
	0x01DE9E24 FMUL S0, S11, S11
	0x01DE9E28 FMUL S1, S9, S9
	0x01DE9E2C LDR V10, [X8 + 0x17C]
	0x01DE9E30 ADRP X22, 0x230A000
	0x01DE9E34 FMUL S2, S8, S8
	0x01DE9E38 FADD S0, S0, S1
	0x01DE9E3C LDR X22, [X22 + 0x5A0]
	0x01DE9E40 FADD S0, S2, S0
	0x01DE9E44 FSQRT S2, S0
	0x01DE9E48 FCMP S2, S10
	0x01DE9E4C ADRP X23, 0x25EF000
	0x01DE9E50 B.LE 0x1DE9EC4
	0x01DE9E54 FDIV S0, S11, S2
	0x01DE9E58 FDIV S1, S9, S2
	0x01DE9E5C FDIV S2, S8, S2
	0x01DE9E60 B 0x1DE9EF0
	0x01DE9E64 LDP X20, X19, [X31 + 0x80]
	0x01DE9E68 LDP X22, X21, [X31 + 0x70]
	0x01DE9E6C LDP X30, X23, [X31 + 0x60]
	0x01DE9E70 LDP D9, D8, [X31 + 0x50]
	0x01DE9E74 LDP D11, D10, [X31 + 0x40]
	0x01DE9E78 LDP D13, D12, [X31 + 0x30]
	0x01DE9E7C LDP D15, D14, [X31 + 0x20]
	0x01DE9E80 ADD X31, X31, 0x90
	0x01DE9E84 RET
	0x01DE9E88 LDR X20, [X19 + 0xE8]
	0x01DE9E8C MOV X0, X19
	0x01DE9E90 BL 0x1DEA5A0
	0x01DE9E94 CBZ X20, 0x1DEA1BC
	0x01DE9E98 MOV X0, X20
	0x01DE9E9C LDP X20, X19, [X31 + 0x80]
	0x01DE9EA0 LDP X22, X21, [X31 + 0x70]
	0x01DE9EA4 LDP X30, X23, [X31 + 0x60]
	0x01DE9EA8 LDP D9, D8, [X31 + 0x50]
	0x01DE9EAC LDP D11, D10, [X31 + 0x40]
	0x01DE9EB0 LDP D13, D12, [X31 + 0x30]
	0x01DE9EB4 LDP D15, D14, [X31 + 0x20]
	0x01DE9EB8 MOV X1, X31
	0x01DE9EBC ADD X31, X31, 0x90
	0x01DE9EC0 B 0x3BE13F8
	0x01DE9EC4 LDRB W8, [X23 + 0x783]
	0x01DE9EC8 CBNZ W8, 0x1DE9EE0
	0x01DE9ECC ADRP X0, 0x230A000
	0x01DE9ED0 LDR X0, [X0 + 0x5A0]
	0x01DE9ED4 BL 0x1C16CF4
	0x01DE9ED8 MOVZ W8, 0x1
	0x01DE9EDC STRB W8, [X23 + 0x783]
	0x01DE9EE0 LDR X8, [X22]
	0x01DE9EE4 LDR X8, [X8 + 0xB8]
	0x01DE9EE8 LDP S0, S1, [X8]
	0x01DE9EEC LDR V2, [X8 + 0x8]
	0x01DE9EF0 MOV X0, X31
	0x01DE9EF4 STP S1, S0, [X31 + 0x14]
	0x01DE9EF8 STR S2, [X31 + 0x10]
	0x01DE9EFC BL 0x1DC0890
	0x01DE9F00 LDRB W8, [X21 + 0x785]
	0x01DE9F04 MOV V8.16B, V0.16B
	0x01DE9F08 MOV V9.16B, V1.16B

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+96], D14
	003 Move [X31+104], D13
	004 Move [X31+112], D12
	005 Move [X31+120], D11
	006 Move [X31+128], D10
	007 Move [X31+136], D9
	008 Move [X31+144], D8
	009 Move [X31+152], X30
	010 Move [X31+160], X24
	011 Move [X31+168], X23
	012 Move [X31+176], X22
	013 Move [X31+184], X21
	014 Move [X31+192], X20
	015 Move [X31+200], X19
	016 Move X20, 0x25F0000
	017 Move X23, 0x230E000
	018 Move X22, 0x230E000
	019 Move W8, [X20+3254]
	020 Move X23, [X23+2904]
	021 Move X22, [X22+2912]
	022 Move V8, V6
	023 Move V9, V5
	024 Move V10, V4
	025 Move V11, V3
	026 Move V12, V2
	027 Move V13, V1
	028 Move V14, V0
	029 Move X19, X0
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {51}
	034 Move X0, 0x2310000
	035 Move X0, [X0+3696]
	036 Call 0x1C17CF4
	037 Move X0, 0x230E000
	038 Move X0, [X0+2904]
	039 Call 0x1C17CF4
	040 Move X0, 0x230F000
	041 Move X0, [X0+3912]
	042 Call 0x1C17CF4
	043 Move X0, 0x230E000
	044 Move X0, [X0+2912]
	045 Call 0x1C17CF4
	046 Move X0, 0x230F000
	047 Move X0, [X0+320]
	048 Call 0x1C17CF4
	049 Move W8, 1
	050 Move [X20+3254], W8
	051 Move X1, [X23]
	052 Move X20, [X19+56]
	053 Move X21, [X19+480]
	054 Add X0, X31, 80
	055 Move V0, V14
	056 Move V1, V13
	057 Move V2, V12
	058 Move [X31+80], X31
	059 Move [X31+88], X31
	060 Call Nullable`1<Vector3>..ctor, X0, X1
	061 Move X1, [X22]
	062 Add X0, X31, 56
	063 Move V0, V11
	064 Move V1, V10
	065 Move V2, V9
	066 Move V3, V8
	067 Move [X31+56], X31
	068 Move [X31+64], X31
	069 Move [X31+72], W31
	070 Call Nullable`1<Quaternion>..ctor, X0, X1
	071 Move X0, [X19+64]
	072 Compare X0, 0
	073 JumpIfEqual {126}
	074 Move X22, 0x230F000
	075 Move X23, 0x230F000
	076 Move X24, 0x2310000
	077 Move X22, [X22+3912]
	078 Move X23, [X23+320]
	079 Move X24, [X24+3696]
	080 Move X1, X31
	081 Call NetworkObject.get_InputAuthority, X0
	082 Move X2, [X22]
	083 And X1, X0, 0
	084 Add X0, X31, 48
	085 Move [X31+48], X31
	086 Call Nullable`1<PlayerRef>..ctor, X0, X1
	087 Move X0, [X23]
	088 Call 0x1C17F10
	089 Move X2, [X24]
	090 Move X1, X19
	091 Move X3, X31
	092 Move X22, X0
	093 Call OnBeforeSpawned..ctor, X0, X1, X2
	094 Compare X20, 0
	095 JumpIfEqual {126}
	096 Move X2, [X31+80]
	097 Move X3, [X31+88]
	098 NotImplemented "Instruction LDUR not yet implemented."
	099 Move W8, [X31+72]
	100 Move X5, [X31+48]
	101 Add X4, X31, 16
	102 Move X0, X20
	103 Move X1, X21
	104 Move X6, X22
	105 Move W7, W31
	106 Move [X31+1], V0
	107 Move [X31+32], W8
	108 Move [X31], X31
	109 Call NetworkRunner.Spawn, X0, X1, X2, X3, X4, X5, X6
	110 Move X20, [X31+192]
	111 Move X19, [X31+200]
	112 Move X22, [X31+176]
	113 Move X21, [X31+184]
	114 Move X24, [X31+160]
	115 Move X23, [X31+168]
	116 Move X30, [X31+152]
	117 Move D9, [X31+136]
	118 Move D8, [X31+144]
	119 Move D11, [X31+120]
	120 Move D10, [X31+128]
	121 Move D13, [X31+104]
	122 Move D12, [X31+112]
	123 Move V14, [X31+96]
	124 Add X31, X31, 208
	125 Return 
	126 Call 0x1C17F20

Method: System.Void UpdateMonsterBehaviour()

Disassembly:
	0x01DE9F0C MOV V13.16B, V2.16B
	0x01DE9F10 CBNZ W8, 0x1DE9F28
	0x01DE9F14 ADRP X0, 0x230A000
	0x01DE9F18 LDR X0, [X0 + 0x5A8]
	0x01DE9F1C BL 0x1C16CF4
	0x01DE9F20 MOVZ W8, 0x1
	0x01DE9F24 STRB W8, [X21 + 0x785]
	0x01DE9F28 LDR X0, [X20]
	0x01DE9F2C LDR W8, [X0 + 0xE0]
	0x01DE9F30 CBNZ W8, 0x1DE9F38
	0x01DE9F34 BL 0x1C16DFC
	0x01DE9F38 FMUL S0, S8, S8
	0x01DE9F3C FMUL S1, S9, S9
	0x01DE9F40 FADD S0, S0, S1
	0x01DE9F44 FMUL S1, S13, S13
	0x01DE9F48 FADD S0, S1, S0
	0x01DE9F4C FSQRT S0, S0
	0x01DE9F50 FCMP S0, S10
	0x01DE9F54 B.LE 0x1DE9F68
	0x01DE9F58 FDIV S11, S8, S0
	0x01DE9F5C FDIV S12, S9, S0
	0x01DE9F60 FDIV S13, S13, S0
	0x01DE9F64 B 0x1DE9F94
	0x01DE9F68 LDRB W8, [X23 + 0x783]
	0x01DE9F6C CBNZ W8, 0x1DE9F84
	0x01DE9F70 ADRP X0, 0x230A000
	0x01DE9F74 LDR X0, [X0 + 0x5A0]
	0x01DE9F78 BL 0x1C16CF4
	0x01DE9F7C MOVZ W8, 0x1
	0x01DE9F80 STRB W8, [X23 + 0x783]
	0x01DE9F84 LDR X8, [X22]
	0x01DE9F88 LDR X8, [X8 + 0xB8]
	0x01DE9F8C LDP S11, S12, [X8]
	0x01DE9F90 LDR V13, [X8 + 0x8]
	0x01DE9F94 LDR X8, [X19 + 0xC0]
	0x01DE9F98 CBZ X8, 0x1DEA1BC
	0x01DE9F9C LDR V8, [X8 + 0x40]
	0x01DE9FA0 MOV X0, X19
	0x01DE9FA4 MOV X1, X31
	0x01DE9FA8 BL 0x3C32E90
	0x01DE9FAC CBZ X0, 0x1DEA1BC
	0x01DE9FB0 MOV X1, X31
	0x01DE9FB4 STR S8, [X31 + 0x1C]
	0x01DE9FB8 BL 0x3C3FA04
	0x01DE9FBC ADRP X21, 0x25EF000
	0x01DE9FC0 LDRB W8, [X21 + 0xA24]
	0x01DE9FC4 MOV V14.16B, V0.16B
	0x01DE9FC8 MOV V15.16B, V1.16B
	0x01DE9FCC MOV V8.16B, V2.16B
	0x01DE9FD0 CBNZ W8, 0x1DE9FE8
	0x01DE9FD4 ADRP X0, 0x230A000
	0x01DE9FD8 LDR X0, [X0 + 0x5A8]
	0x01DE9FDC BL 0x1C16CF4
	0x01DE9FE0 MOVZ W8, 0x1
	0x01DE9FE4 STRB W8, [X21 + 0xA24]
	0x01DE9FE8 LDR X0, [X20]
	0x01DE9FEC FMUL S0, S11, S11
	0x01DE9FF0 FMUL S1, S12, S12
	0x01DE9FF4 FADD S0, S0, S1
	0x01DE9FF8 FMUL S1, S13, S13
	0x01DE9FFC LDR W8, [X0 + 0xE0]
	0x01DEA000 FADD S9, S1, S0
	0x01DEA004 FMUL S0, S14, S14
	0x01DEA008 FMUL S1, S15, S15
	0x01DEA00C FADD S0, S0, S1
	0x01DEA010 FMUL S1, S8, S8
	0x01DEA014 FADD S10, S1, S0
	0x01DEA018 CBNZ W8, 0x1DEA020
	0x01DEA01C BL 0x1C16DFC
	0x01DEA020 ADRP X8, 0xFFFFFFFFFECFF000
	0x01DEA024 LDR V1, [X8 + 0xFE8]
	0x01DEA028 FMUL S0, S9, S10
	0x01DEA02C FSQRT S0, S0
	0x01DEA030 FMOV S9, W31
	0x01DEA034 FCMP S0, S1

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x25F0000
	006 Move W8, [X20+3255]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2310000
	013 Move X0, [X0+3704]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3255], W8
	017 Move X0, X31
	018 Call GameManager.get_isDebug
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {26}
	023 Move X0, X31
	024 Call Time.get_realtimeSinceStartup
	025 Move [X19+400], S0
	026 Move X0, X19
	027 Call ChickenController.get_phase, X0
	028 Subtract W8, W0, 1
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X9, -19640320
	031 Add X9, X9, 2407
	032 NotImplemented "Instruction ADR not yet implemented."
	033 Move W11, [X9]
	034 Add X10, X10, X11
	035 CallNoReturn X10
	036 Move X0, X19
	037 Call ChickenController.UpdateIncubating, X0
	038 Move X0, X19
	039 Call ChickenController.UpdateNoticed, X0
	040 Move X8, [X19]
	041 Move X0, X19
	042 Move X9, [X8+968]
	043 Move X1, [X8+976]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X0, X19
	046 Call ChickenController.UpdateBackToNest, X0
	047 Move X0, X19
	048 Call ChickenController.UpdateSearching, X0
	049 Move X0, X19
	050 Move W1, W31
	051 Call ChickenController.SpawnEggIfNecessary, X0, X1
	052 Move X0, X31
	053 Call GameManager.get_isDebug
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {81}
	058 Move X20, [X19+408]
	059 Compare X20, 0
	060 JumpIfEqual {81}
	061 Move X0, X19
	062 Call ChickenController.get_phase, X0
	063 Move X8, 0x2310000
	064 Move X8, [X8+3704]
	065 Move TEMP, 0
	066 Not TEMP
	067 Move X9, TEMP
	068 Move [X31+24], W0
	069 Add X0, X31, 8
	070 Move X8, [X8]
	071 Move X1, X31
	072 Move [X31+8], X8
	073 Move [X31+16], X9
	074 Call Enum.ToString, X0
	075 Move X8, [X20+64]
	076 Move X9, [X20+24]
	077 Move X2, [X20+40]
	078 Move X1, X0
	079 Move X0, X8
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X30, [X31+32]
	084 Add X31, X31, 64
	085 Return 

Method: System.Void SetTargetPlayer(AnimalCompany.NetPlayer netPlayer)

Disassembly:
	0x01DEA6BC CBZ X0, 0x1DEA6E0
	0x01DEA6C0 MOV X1, X31
	0x01DEA6C4 BL 0x3C3F58C
	0x01DEA6C8 MOV X0, X20
	0x01DEA6CC LDP X20, X19, [X31 + 0x10]
	0x01DEA6D0 FMOV S3, 1
	0x01DEA6D4 MOV X1, X31
	0x01DEA6D8 LDR X30, [X31], #0x20
	0x01DEA6DC B 0x1DC15C4
	0x01DEA6E0 BL 0x1C16F20
	0x01DEA6E4 BL 0x1C16F28
	0x01DEA6E8 STR X30, [X31 - 0x30]!
	0x01DEA6EC STP X22, X21, [X31 + 0x10]
	0x01DEA6F0 STP X20, X19, [X31 + 0x20]
	0x01DEA6F4 ADRP X21, 0x25EE000
	0x01DEA6F8 ADRP X22, 0x230E000
	0x01DEA6FC LDRB W8, [X21 + 0xD18]
	0x01DEA700 LDR X22, [X22 + 0xC40]
	0x01DEA704 MOV X19, X1
	0x01DEA708 MOV X20, X0
	0x01DEA70C TBNZ X8, 0x0, 0x1DEA730
	0x01DEA710 ADRP X0, 0x230E000
	0x01DEA714 LDR X0, [X0 + 0xCB0]
	0x01DEA718 BL 0x1C16CF4
	0x01DEA71C ADRP X0, 0x230E000
	0x01DEA720 LDR X0, [X0 + 0xC40]
	0x01DEA724 BL 0x1C16CF4
	0x01DEA728 MOVZ W8, 0x1
	0x01DEA72C STRB W8, [X21 + 0xD18]
	0x01DEA730 LDR X0, [X22]
	0x01DEA734 LDR W8, [X0 + 0xE0]
	0x01DEA738 CBNZ W8, 0x1DEA740
	0x01DEA73C BL 0x1C16DFC
	0x01DEA740 MOV X0, X20
	0x01DEA744 MOV X1, X19
	0x01DEA748 BL 0x1DF6C74
	0x01DEA74C LDR X8, [X19]
	0x01DEA750 CBZ X8, 0x1DEA770
	0x01DEA754 LDR W8, [X8 + 0x18]
	0x01DEA758 LDP X20, X19, [X31 + 0x20]
	0x01DEA75C LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x25EF000
	007 Move X21, 0x230A000
	008 Move W8, [X22+3256]
	009 Move X21, [X21+1432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x230A000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3256], W8
	021 Move X0, X20
	022 Move X1, X19
	023 Call MobController.SetTargetPlayer, X0, X1
	024 Move X0, [X21]
	025 Move X20, [X20+448]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Inequality, X0, X1
	034 Move W8, W0
	035 Move X0, X31
	036 Move TEMP, X8
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {45}
	040 Compare X19, 0
	041 JumpIfEqual {54}
	042 Move X0, X19
	043 Move X1, X31
	044 Call Component.get_transform, X0
	045 Compare X20, 0
	046 JumpIfEqual {54}
	047 Move [X20+192], X0
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Return 
	054 Call 0x1C17F20

Method: System.Void SetIncubating()

Disassembly:
	0x01DE9934 MOV X0, X19
	0x01DE9938 MOV X1, X31
	0x01DE993C BL 0x3C32E90
	0x01DE9940 CBZ X0, 0x1DE9964
	0x01DE9944 MOV X1, X31
	0x01DE9948 BL 0x3C3F58C
	0x01DE994C MOV X0, X20
	0x01DE9950 LDP X20, X19, [X31 + 0x10]
	0x01DE9954 FMOV S3, 1
	0x01DE9958 MOV X1, X31
	0x01DE995C LDR X30, [X31], #0x20
	0x01DE9960 B 0x1DC15C4
	0x01DE9964 BL 0x1C16F20
	0x01DE9968 BL 0x1C16F28
	0x01DE996C STR X30, [X31 - 0x20]!
	0x01DE9970 STP X20, X19, [X31 + 0x10]
	0x01DE9974 MOV X20, X1
	0x01DE9978 MOVZ W1, 0x3
	0x01DE997C MOV X19, X0
	0x01DE9980 BL 0x1DE7AC4
	0x01DE9984 LDR X8, [X19 + 0xC0]
	0x01DE9988 CBZ X8, 0x1DE9A38
	0x01DE998C LDR V0, [X8 + 0x28]
	0x01DE9990 MOV X0, X19
	0x01DE9994 BL 0x1DE8788
	0x01DE9998 LDR X8, [X19]
	0x01DE999C MOV X0, X19
	0x01DE99A0 MOV X1, X20
	0x01DE99A4 LDR X9, [X8 + 0x3B8]
	0x01DE99A8 LDR X2, [X8 + 0x3C0]
	0x01DE99AC BLR X9
	0x01DE99B0 CBZ X20, 0x1DE9A38

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 1
	004 Move X19, X0
	005 Call ChickenController.set_phase, X0, X1
	006 Move X8, [X19]
	007 Move X0, X19
	008 Move X1, X31
	009 Move X9, [X8+952]
	010 Move X2, [X8+960]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move X9, [X19+192]
	013 Compare X9, 0
	014 JumpIfEqual {38}
	015 Move X8, [X9+88]
	016 Compare X8, 0
	017 JumpIfEqual {38}
	018 Move W10, [X8+24]
	019 Compare W10, 0
	020 JumpIfEqual {39}
	021 Move X9, [X9+96]
	022 Compare X9, 0
	023 JumpIfEqual {38}
	024 Move W10, [X9+24]
	025 Compare W10, 0
	026 JumpIfEqual {39}
	027 Move X10, [X19]
	028 Move V1, [X8+32]
	029 Move V2, [X9+32]
	030 Move S0, W31
	031 Move X3, [X10+712]
	032 Move X2, [X10+720]
	033 Move W1, 1
	034 Move X0, X19
	035 Move X30, [X31+16]
	036 Move X19, [X31+24]
	037 CallNoReturn X3
	038 Call 0x1C17F20
	039 Call 0x1C17F28

Method: System.Void UpdateIncubating()

Disassembly:
	0x01DEA060 FMOV S2, -1
	0x01DEA064 FMIN S1, S0, S1
	0x01DEA068 FCMP S0, S2
	0x01DEA06C FCSEL S8, S1, S2, PL
	0x01DEA070 CBNZ W8, 0x1DEA078
	0x01DEA074 BL 0x1C16DFC
	0x01DEA078 FCVT S0, S8
	0x01DEA07C BL 0x3EB1B80
	0x01DEA080 ADRP X8, 0xFFFFFFFFFED00000
	0x01DEA084 LDR V1, [X8 + 0x448]
	0x00000000 INVALID
	0x01DEA08C FMUL S9, S0, S1
	0x01DEA090 MOV X0, X19
	0x01DEA094 MOV X1, X31
	0x01DEA098 BL 0x3C32E90
	0x01DEA09C MOV X20, X0
	0x01DEA0A0 MOV X0, X19
	0x01DEA0A4 MOV X1, X31
	0x01DEA0A8 BL 0x3C32E90
	0x01DEA0AC CBZ X0, 0x1DEA1BC
	0x01DEA0B0 MOV X1, X31
	0x01DEA0B4 BL 0x3C3DEB4
	0x01DEA0B8 MOV V8.16B, V0.16B
	0x01DEA0BC MOV V14.16B, V1.16B
	0x01DEA0C0 MOV V15.16B, V2.16B
	0x01DEA0C4 MOV V0.16B, V11.16B
	0x01DEA0C8 MOV V1.16B, V12.16B
	0x01DEA0CC MOV V2.16B, V13.16B
	0x01DEA0D0 MOV X0, X31
	0x01DEA0D4 STR S3, [X31 + 0xC]
	0x01DEA0D8 BL 0x3C2A8C4
	0x01DEA0DC LDR X0, [X19 + 0x38]
	0x01DEA0E0 CBZ X0, 0x1DEA1BC
	0x01DEA0E4 MOV V11.16B, V0.16B
	0x01DEA0E8 LDR V0, [X31 + 0x1C]
	0x01DEA0EC MOV X1, X31
	0x01DEA0F0 MOV V12.16B, V1.16B
	0x01DEA0F4 MOV V13.16B, V2.16B
	0x01DEA0F8 MOV V10.16B, V3.16B
	0x01DEA0FC FDIV S9, S0, S9
	0x01DEA100 BL 0x1E9E550
	0x01DEA104 LDR V3, [X31 + 0xC]
	0x01DEA108 FMUL S0, S9, S0
	0x01DEA10C STR S0, [X31]
	0x01DEA110 MOV V0.16B, V8.16B
	0x01DEA114 MOV V1.16B, V14.16B
	0x01DEA118 MOV V2.16B, V15.16B
	0x01DEA11C MOV V4.16B, V11.16B
	0x01DEA120 MOV V5.16B, V12.16B
	0x01DEA124 MOV V6.16B, V13.16B
	0x01DEA128 MOV V7.16B, V10.16B
	0x01DEA12C MOV X0, X31
	0x01DEA130 BL 0x3C2A2F8
	0x01DEA134 CBZ X20, 0x1DEA1BC
	0x01DEA138 MOV X0, X20
	0x01DEA13C MOV X1, X31
	0x01DEA140 BL 0x3C3F7AC
	0x01DEA144 LDR X20, [X19 + 0xE8]
	0x01DEA148 CBZ X20, 0x1DEA1BC
	0x01DEA14C MOV X0, X20
	0x01DEA150 MOV X1, X31
	0x01DEA154 BL 0x3BE19AC
	0x01DEA158 LDR X0, [X19 + 0x38]
	0x01DEA15C CBZ X0, 0x1DEA1BC
	0x01DEA160 LDR V1, [X31 + 0x10]
	0x01DEA164 MOV X1, X31
	0x01DEA168 FMUL S8, S1, S0
	0x01DEA16C LDR V1, [X31 + 0x14]
	0x01DEA170 FMUL S9, S1, S0
	0x01DEA174 LDR V1, [X31 + 0x18]
	0x01DEA178 FMUL S10, S1, S0
	0x01DEA17C BL 0x1E9E550
	0x01DEA180 FMUL S3, S10, S0
	0x01DEA184 FMUL S1, S9, S0
	0x01DEA188 FMUL S2, S8, S0
	0x01DEA18C MOV X0, X20
	0x01DEA190 LDP X20, X19, [X31 + 0x80]
	0x01DEA194 LDP X22, X21, [X31 + 0x70]
	0x01DEA198 LDP X30, X23, [X31 + 0x60]
	0x01DEA19C LDP D9, D8, [X31 + 0x50]
	0x01DEA1A0 LDP D11, D10, [X31 + 0x40]
	0x01DEA1A4 LDP D13, D12, [X31 + 0x30]
	0x01DEA1A8 LDP D15, D14, [X31 + 0x20]
	0x01DEA1AC MOV V0.16B, V3.16B
	0x01DEA1B0 MOV X1, X31

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x25EF000
	009 Move X20, 0x230F000
	010 Move W8, [X21+3257]
	011 Move X20, [X20+3136]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {37}
	017 Move X0, 0x230F000
	018 Move X0, [X0+3712]
	019 Call 0x1C17CF4
	020 Move X0, 0x230F000
	021 Move X0, [X0+3720]
	022 Call 0x1C17CF4
	023 Move X0, 0x230F000
	024 Move X0, [X0+3728]
	025 Call 0x1C17CF4
	026 Move X0, 0x230F000
	027 Move X0, [X0+3248]
	028 Call 0x1C17CF4
	029 Move X0, 0x230F000
	030 Move X0, [X0+3184]
	031 Call 0x1C17CF4
	032 Move X0, 0x230F000
	033 Move X0, [X0+3136]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X21+3257], W8
	037 Move X0, X19
	038 Move [X31+8], X31
	039 Call ChickenController.get_nestPosition, X0
	040 Move X0, [X20]
	041 Move V8, V0
	042 Move V9, V1
	043 Move V10, V2
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move S3, 12
	049 Add X1, X31, 8
	050 Move X0, X19
	051 Move V0, V8
	052 Move V1, V9
	053 Move V2, V10
	054 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {90}
	059 Move X20, [X31+8]
	060 Compare X20, 0
	061 JumpIfEqual {98}
	062 Move W8, [X20+24]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X8, 0x230F000
	065 Move X8, [X8+3720]
	066 Move X0, [X8]
	067 Call 0x1C17F10
	068 Move X8, 0x230F000
	069 Move X8, [X8+3712]
	070 Move X1, X19
	071 Move X3, X31
	072 Move X21, X0
	073 Move X2, [X8]
	074 Call Comparison`1<Object>..ctor, X0, X1, X2
	075 Move X8, 0x230F000
	076 Move X8, [X8+3728]
	077 Move X0, X20
	078 Move X1, X21
	079 Move X2, [X8]
	080 Call List`1<Object>.Sort, X0, X1
	081 Move X8, 0x230F000
	082 Move X8, [X8+3184]
	083 Move X0, X20
	084 Move W1, W31
	085 Move X2, [X8]
	086 Call List`1<Object>.get_Item, X0, X1
	087 Move X1, X0
	088 Move X0, X19
	089 Call ChickenController.SetNoticed, X0, X1
	090 Move X20, [X31+48]
	091 Move X19, [X31+56]
	092 Move X30, [X31+32]
	093 Move X21, [X31+40]
	094 Move D9, [X31+16]
	095 Move D8, [X31+24]
	096 Move V10, [X31+64]
	097 Return 
	098 Call 0x1C17F20

Method: System.Void SetNoticed(AnimalCompany.NetPlayer targetPlayer)

Disassembly:
	0x01DEA8AC STP X20, X19, [X31 + 0x60]
	0x01DEA8B0 ADRP X20, 0x25EE000
	0x01DEA8B4 ADRP X21, 0x230E000
	0x01DEA8B8 LDRB W8, [X20 + 0xD0E]
	0x01DEA8BC LDR X21, [X21 + 0xBC0]
	0x01DEA8C0 MOV X19, X0
	0x01DEA8C4 TBNZ X8, 0x0, 0x1DEA8F4
	0x01DEA8C8 ADRP X0, 0x2309000
	0x01DEA8CC LDR X0, [X0 + 0x970]
	0x01DEA8D0 BL 0x1C16CF4
	0x01DEA8D4 ADRP X0, 0x230E000
	0x01DEA8D8 LDR X0, [X0 + 0xBC0]
	0x01DEA8DC BL 0x1C16CF4
	0x01DEA8E0 ADRP X0, 0x2309000
	0x01DEA8E4 LDR X0, [X0 + 0x598]
	0x01DEA8E8 BL 0x1C16CF4
	0x01DEA8EC MOVZ W8, 0x1
	0x01DEA8F0 STRB W8, [X20 + 0xD0E]
	0x01DEA8F4 LDR X0, [X21]
	0x01DEA8F8 LDR W8, [X0 + 0xE0]
	0x01DEA8FC CBNZ W8, 0x1DEA908
	0x01DEA900 BL 0x1C16DFC
	0x01DEA904 LDR X0, [X21]
	0x01DEA908 LDR X8, [X0 + 0xB8]
	0x01DEA90C MOV X0, X31
	0x01DEA910 LDP S0, S1, [X8 + 0x20]
	0x01DEA914 LDP S2, S3, [X8 + 0x28]
	0x01DEA918 BL 0x3C0D030
	0x01DEA91C LDR X0, [X19 + 0xD8]
	0x01DEA920 CBZ X0, 0x1DEAE44
	0x01DEA924 MOV X1, X31
	0x01DEA928 BL 0x3C3F58C
	0x01DEA92C LDR X8, [X19 + 0xC0]
	0x01DEA930 CBZ X8, 0x1DEAE44
	0x01DEA934 LDR V3, [X8 + 0x80]
	0x01DEA938 MOV X0, X31
	0x01DEA93C BL 0x3C0CB98
	0x01DEA940 LDR X8, [X21]
	0x01DEA944 MOV X0, X31
	0x01DEA948 LDR X8, [X8 + 0xB8]
	0x01DEA94C LDP S0, S1, [X8]
	0x01DEA950 LDP S2, S3, [X8 + 0x8]
	0x01DEA954 BL 0x3C0D030
	0x01DEA958 LDR X0, [X19 + 0xD0]
	0x01DEA95C CBZ X0, 0x1DEAE44
	0x01DEA960 MOV X1, X31
	0x01DEA964 BL 0x3C3F58C
	0x01DEA968 LDR X0, [X19 + 0xD0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move W1, 2
	006 Move X19, X0
	007 Call ChickenController.set_phase, X0, X1
	008 Move X8, [X19]
	009 Move X0, X19
	010 Move X1, X20
	011 Move X9, [X8+952]
	012 Move X2, [X8+960]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move X9, [X19+192]
	015 Compare X9, 0
	016 JumpIfEqual {57}
	017 Move X8, [X9+88]
	018 Compare X8, 0
	019 JumpIfEqual {57}
	020 Move W10, [X8+24]
	021 Compare W10, 0
	022 JumpIfEqual {58}
	023 Move X9, [X9+96]
	024 Compare X9, 0
	025 JumpIfEqual {57}
	026 Move W10, [X9+24]
	027 Compare W10, 0
	028 JumpIfEqual {58}
	029 Move X10, [X19]
	030 Move V1, [X8+32]
	031 Move V2, [X9+32]
	032 Move S0, W31
	033 Move X8, [X10+712]
	034 Move X2, [X10+720]
	035 Move W1, 1
	036 Move X0, X19
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X8, [X19+192]
	039 Compare X8, 0
	040 JumpIfEqual {57}
	041 Move X20, [X8+160]
	042 Move X0, X19
	043 Move X1, X31
	044 Call Component.get_transform, X0
	045 Compare X0, 0
	046 JumpIfEqual {57}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X0, X20
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move S3, 1
	053 Move X1, X31
	054 Move X30, [X31+32]
	055 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	056 Return 
	057 Call 0x1C17F20
	058 Call 0x1C17F28

Method: System.Void UpdateNoticed()

Disassembly:
	0x01DEA1B4 ADD X31, X31, 0x90
	0x01DEA1B8 B 0x3BE16E0
	0x01DEA1BC BL 0x1C16F20
	0x01DEA1C0 STP X30, X23, [X31 - 0x30]!
	0x01DEA1C4 STP X22, X21, [X31 + 0x10]
	0x01DEA1C8 STP X20, X19, [X31 + 0x20]
	0x01DEA1CC ADRP X20, 0x25EE000
	0x01DEA1D0 ADRP X23, 0x2309000
	0x01DEA1D4 LDRB W8, [X20 + 0xD09]
	0x01DEA1D8 LDR X23, [X23 + 0x598]
	0x01DEA1DC MOV X19, X0
	0x01DEA1E0 TBNZ X8, 0x0, 0x1DEA234
	0x01DEA1E4 ADRP X0, 0x230E000
	0x01DEA1E8 LDR X0, [X0 + 0xE98]
	0x01DEA1EC BL 0x1C16CF4
	0x01DEA1F0 ADRP X0, 0x230E000
	0x01DEA1F4 LDR X0, [X0 + 0xCB0]
	0x01DEA1F8 BL 0x1C16CF4
	0x01DEA1FC ADRP X0, 0x230E000
	0x01DEA200 LDR X0, [X0 + 0xC70]
	0x01DEA204 BL 0x1C16CF4
	0x01DEA208 ADRP X0, 0x230E000
	0x01DEA20C LDR X0, [X0 + 0xC40]
	0x01DEA210 BL 0x1C16CF4
	0x01DEA214 ADRP X0, 0x230B000
	0x01DEA218 LDR X0, [X0 + 0x9A0]
	0x01DEA21C BL 0x1C16CF4
	0x01DEA220 ADRP X0, 0x2309000
	0x01DEA224 LDR X0, [X0 + 0x598]
	0x01DEA228 BL 0x1C16CF4
	0x01DEA22C MOVZ W8, 0x1
	0x01DEA230 STRB W8, [X20 + 0xD09]
	0x01DEA234 LDR X0, [X23]
	0x01DEA238 LDR X21, [X19 + 0x160]
	0x01DEA23C LDR W8, [X0 + 0xE0]
	0x01DEA240 CBNZ W8, 0x1DEA248
	0x01DEA244 BL 0x1C16DFC
	0x01DEA248 MOV X0, X21
	0x01DEA24C MOV X1, X31
	0x01DEA250 MOV X2, X31
	0x01DEA254 ADD X20, X19, 0x160
	0x01DEA258 BL 0x3C354F8
	0x01DEA25C TBZ X0, 0x0, 0x1DEA28C
	0x01DEA260 LDR X0, [X20]
	0x01DEA264 CBZ X0, 0x1DEA454
	0x01DEA268 MOV X1, X31
	0x01DEA26C BL 0x1DAEC64
	0x01DEA270 TBZ X0, 0x0, 0x1DEA28C
	0x01DEA274 LDR X8, [X19]
	0x01DEA278 MOV X0, X19
	0x01DEA27C MOV X1, X31
	0x01DEA280 LDR X9, [X8 + 0x3B8]
	0x01DEA284 LDR X2, [X8 + 0x3C0]
	0x01DEA288 BLR X9
	0x01DEA28C LDR X0, [X23]
	0x01DEA290 LDR X21, [X20]
	0x01DEA294 LDR W8, [X0 + 0xE0]
	0x01DEA298 CBNZ W8, 0x1DEA2A0
	0x01DEA29C BL 0x1C16DFC
	0x01DEA2A0 ADRP X22, 0x230E000
	0x01DEA2A4 LDR X22, [X22 + 0xC40]
	0x01DEA2A8 MOV X0, X21
	0x01DEA2AC MOV X1, X31
	0x01DEA2B0 MOV X2, X31
	0x01DEA2B4 BL 0x3C3883C
	0x01DEA2B8 TBZ X0, 0x0, 0x1DEA314
	0x01DEA2BC MOV X0, X19
	0x01DEA2C0 BL 0x1DF4CEC
	0x01DEA2C4 CMP W0, 0x1
	0x01DEA2C8 B.LT 0x1DEA314
	0x01DEA2CC MOV X0, X19
	0x01DEA2D0 BL 0x1DF4CEC
	0x01DEA2D4 ADRP X8, 0x230B000
	0x01DEA2D8 LDR X8, [X8 + 0x9A0]
	0x01DEA2DC MOV W21, W0
	0x01DEA2E0 LDR X8, [X8]
	0x01DEA2E4 LDR W9, [X8 + 0xE0]
	0x01DEA2E8 CBNZ W9, 0x1DEA2F4
	0x01DEA2EC MOV X0, X8
	0x01DEA2F0 BL 0x1C16DFC
	0x01DEA2F4 MOV W0, W21
	0x01DEA2F8 MOV X1, X20
	0x01DEA2FC MOV X2, X31
	0x01DEA300 BL 0x1DB2598
	0x01DEA304 TBNZ X0, 0x0, 0x1DEA314
	0x01DEA308 MOVN W1, 0x0
	0x01DEA30C MOV X0, X19
	0x01DEA310 BL 0x1DF4D4C
	0x01DEA314 LDR X0, [X22]
	0x01DEA318 ADD X21, X19, 0x178
	0x01DEA31C LDR W8, [X0 + 0xE0]
	0x01DEA320 CBNZ W8, 0x1DEA328
	0x01DEA324 BL 0x1C16DFC
	0x01DEA328 MOV X0, X19
	0x01DEA32C MOV X1, X21
	0x01DEA330 BL 0x1DF6C74
	0x01DEA334 LDR X0, [X23]
	0x01DEA338 LDR X22, [X19 + 0x160]
	0x01DEA33C LDR W8, [X0 + 0xE0]
	0x01DEA340 CBNZ W8, 0x1DEA348
	0x01DEA344 BL 0x1C16DFC
	0x01DEA348 MOV X0, X22
	0x01DEA34C MOV X1, X31
	0x01DEA350 MOV X2, X31
	0x01DEA354 BL 0x3C354F8
	0x01DEA358 TBZ X0, 0x0, 0x1DEA38C
	0x01DEA35C LDR X0, [X21]
	0x01DEA360 CBZ X0, 0x1DEA454
	0x01DEA364 ADRP X8, 0x230E000
	0x01DEA368 LDR X1, [X20]
	0x01DEA36C LDR X8, [X8 + 0xE98]
	0x01DEA370 LDR X2, [X8]
	0x01DEA374 BL 0x301C318
	0x01DEA378 TBZ X0, 0x0, 0x1DEA38C
	0x01DEA37C FMOV S0, W31
	0x01DEA380 MOV X0, X19
	0x01DEA384 BL 0x1DEA540
	0x01DEA388 B 0x1DEA3EC
	0x01DEA38C LDRB W8, [X19 + 0xF1]
	0x01DEA390 CBZ W8, 0x1DEA3EC
	0x01DEA394 LDR X21, [X21]
	0x01DEA398 CBZ X21, 0x1DEA454
	0x01DEA39C LDR W1, [X21 + 0x18]
	0x01DEA3A0 CMP W1, 0x1
	0x01DEA3A4 B.LT 0x1DEA3D4
	0x01DEA3A8 MOV W0, W31
	0x01DEA3AC MOV X2, X31
	0x01DEA3B0 BL 0x3C309A8
	0x01DEA3B4 ADRP X8, 0x230E000
	0x01DEA3B8 LDR X8, [X8 + 0xC70]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D10
	003 Move [X31+32], D9
	004 Move [X31+40], D8
	005 Move [X31+48], X30
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X21, 0x25EF000
	010 Move X20, 0x230A000
	011 Move W8, [X21+3258]
	012 Move X20, [X20+1432]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0x230F000
	019 Move X0, [X0+3736]
	020 Call 0x1C17CF4
	021 Move X0, 0x230F000
	022 Move X0, [X0+3248]
	023 Call 0x1C17CF4
	024 Move X0, 0x230F000
	025 Move X0, [X0+3184]
	026 Call 0x1C17CF4
	027 Move X0, 0x230F000
	028 Move X0, [X0+3136]
	029 Call 0x1C17CF4
	030 Move X0, 0x230A000
	031 Move X0, [X0+1432]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+3258], W8
	035 Move X0, [X20]
	036 Move [X31+24], X31
	037 Move [X31+8], X31
	038 Move X20, [X19+352]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Equality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {66}
	051 Move X0, [X19+352]
	052 Compare X0, 0
	053 JumpIfEqual {155}
	054 Move X1, X31
	055 Call NetPlayer.get_isDie, X0
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {77}
	060 Move X8, [X19]
	061 Move X0, X19
	062 Move X1, X31
	063 Move X9, [X8+952]
	064 Move X2, [X8+960]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move X0, X19
	067 Call ChickenController.SetIncubating, X0
	068 Move X20, [X31+64]
	069 Move X19, [X31+72]
	070 Move X30, [X31+48]
	071 Move X21, [X31+56]
	072 Move D9, [X31+32]
	073 Move D8, [X31+40]
	074 Move V10, [X31+16]
	075 Add X31, X31, 80
	076 Return 
	077 Move X0, X19
	078 Call ChickenController.get_nestPosition, X0
	079 Move X20, 0x230F000
	080 Move X20, [X20+3136]
	081 Move V8, V0
	082 Move V9, V1
	083 Move V10, V2
	084 Move X0, [X20]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move S3, 6
	090 Add X1, X31, 24
	091 Move X0, X19
	092 Move V0, V8
	093 Move V1, V9
	094 Move V2, V10
	095 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {114}
	100 Move X20, [X31+24]
	101 Compare X20, 0
	102 JumpIfEqual {155}
	103 Move X8, 0x230F000
	104 Move X1, [X19+352]
	105 Move X8, [X8+3736]
	106 Move X0, X20
	107 Move X2, [X8]
	108 Call List`1<Object>.Contains, X0, X1
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {142}
	113 Move X1, [X19+352]
	114 Move X0, X19
	115 Call ChickenController.get_nestPosition, X0
	116 Move X0, [X20]
	117 Move V8, V0
	118 Move V9, V1
	119 Move V10, V2
	120 Move W8, [X0+224]
	121 Compare W8, 0
	122 JumpIfNotEqual {124}
	123 Call 0x1C17DFC
	124 Move S3, 12
	125 Add X1, X31, 8
	126 Move X0, X19
	127 Move V0, V8
	128 Move V1, V9
	129 Move V2, V10
	130 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	131 Move TEMP, X0
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfEqual {68}
	135 Move X0, X19
	136 Call ChickenController.get_distanceToNest, X0
	137 Move X8, -19918848
	138 Move V1, [X8+188]
	139 NotImplemented "Instruction FCMP not yet implemented."
	140 Move X0, X19
	141 Call ChickenController.SetBackToNest, X0
	142 Move W1, [X20+24]
	143 Move W0, W31
	144 Move X2, X31
	145 Call Random.Range, X0, X1
	146 Move X8, 0x230F000
	147 Move X8, [X8+3184]
	148 Move W1, W0
	149 Move X0, X20
	150 Move X2, [X8]
	151 Call List`1<Object>.get_Item, X0, X1
	152 Move X1, X0
	153 Move X0, X19
	154 Call ChickenController.SetChasing, X0, X1
	155 Call 0x1C17F20

Method: System.Void SetChasing(AnimalCompany.NetPlayer targetPlayer)

Disassembly:
	0x01DEA96C CBZ X0, 0x1DEAE44
	0x01DEA970 MOV X1, X31
	0x01DEA974 MOV V8.16B, V0.16B
	0x01DEA978 MOV V9.16B, V1.16B
	0x01DEA97C MOV V10.16B, V2.16B
	0x01DEA980 BL 0x3C3F58C
	0x01DEA984 LDR X0, [X19 + 0xD0]
	0x01DEA988 CBZ X0, 0x1DEAE44
	0x01DEA98C MOV X1, X31
	0x01DEA990 MOV V11.16B, V0.16B
	0x01DEA994 MOV V12.16B, V1.16B
	0x01DEA998 MOV V13.16B, V2.16B
	0x01DEA99C BL 0x3C3FA04
	0x01DEA9A0 LDR X8, [X19 + 0xC0]
	0x01DEA9A4 CBZ X8, 0x1DEAE44
	0x01DEA9A8 LDR X8, [X8 + 0x78]
	0x01DEA9AC CBZ X8, 0x1DEAE44
	0x01DEA9B0 LDR W9, [X8 + 0x18]
	0x01DEA9B4 CBZ W9, 0x1DEAE48
	0x01DEA9B8 LDR V3, [X8 + 0x20]
	0x01DEA9BC MOV X0, X31
	0x01DEA9C0 FMUL S0, S0, S3
	0x01DEA9C4 FMUL S1, S1, S3
	0x01DEA9C8 FMUL S2, S2, S3
	0x01DEA9CC FADD S3, S11, S0
	0x01DEA9D0 FADD S4, S12, S1
	0x01DEA9D4 FADD S5, S13, S2
	0x01DEA9D8 MOV V0.16B, V8.16B
	0x01DEA9DC MOV V1.16B, V9.16B
	0x01DEA9E0 MOV V2.16B, V10.16B
	0x01DEA9E4 BL 0x3C0CB04
	0x01DEA9E8 LDR X8, [X19 + 0xC0]
	0x01DEA9EC CBZ X8, 0x1DEAE44
	0x01DEA9F0 LDR V0, [X8 + 0x70]
	0x01DEA9F4 ADRP X20, 0x25EE000
	0x01DEA9F8 LDRB W8, [X20 + 0x786]
	0x01DEA9FC FMOV S1, 0.5
	0x01DEAA00 FMUL S8, S0, S1
	0x01DEAA04 CBNZ W8, 0x1DEAA1C
	0x01DEAA08 ADRP X0, 0x2309000
	0x01DEAA0C LDR X0, [X0 + 0x5A0]
	0x01DEAA10 BL 0x1C16CF4
	0x01DEAA14 MOVZ W8, 0x1
	0x01DEAA18 STRB W8, [X20 + 0x786]
	0x01DEAA1C ADRP X22, 0x2309000
	0x01DEAA20 LDR X22, [X22 + 0x5A0]
	0x01DEAA24 FNEG S0, S8
	0x01DEAA28 MOV X0, X31
	0x01DEAA2C LDR X8, [X22]
	0x01DEAA30 LDR X8, [X8 + 0xB8]
	0x01DEAA34 LDP S1, S2, [X8 + 0x18]
	0x01DEAA38 LDR V3, [X8 + 0x20]
	0x01DEAA3C BL 0x3C2A758

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move W1, 3
	006 Move X19, X0
	007 Call ChickenController.set_phase, X0, X1
	008 Move X8, [X19+192]
	009 Compare X8, 0
	010 JumpIfEqual {64}
	011 Move V0, [X8+40]
	012 Move X0, X19
	013 Call MobController.set__timerAttackInterval, X0, V0
	014 Move X8, [X19]
	015 Move X0, X19
	016 Move X1, X20
	017 Move X9, [X8+952]
	018 Move X2, [X8+960]
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Compare X20, 0
	021 JumpIfEqual {64}
	022 Move X0, X20
	023 Move X1, X31
	024 Call Component.get_transform, X0
	025 Compare X0, 0
	026 JumpIfEqual {64}
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X0, X19
	030 Call MobController.set__targetPosition, X0, X1
	031 Move X9, [X19+192]
	032 Compare X9, 0
	033 JumpIfEqual {64}
	034 Move X8, [X9+56]
	035 Compare X8, 0
	036 JumpIfEqual {64}
	037 Move W10, [X8+24]
	038 Compare W10, 0
	039 JumpIfEqual {65}
	040 Move X10, [X9+88]
	041 Compare X10, 0
	042 JumpIfEqual {64}
	043 Move W11, [X10+24]
	044 Compare W11, 0
	045 JumpIfEqual {65}
	046 Move X9, [X9+96]
	047 Compare X9, 0
	048 JumpIfEqual {64}
	049 Move W11, [X9+24]
	050 Compare W11, 0
	051 JumpIfEqual {65}
	052 Move X11, [X19]
	053 Move V0, [X8+32]
	054 Move V1, [X10+32]
	055 Move V2, [X9+32]
	056 Move X3, [X11+712]
	057 Move X2, [X11+720]
	058 Move X0, X19
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move W1, W31
	062 Move X30, [X31+32]
	063 CallNoReturn X3
	064 Call 0x1C17F20
	065 Call 0x1C17F28

Method: System.Void UpdateChasing()

Disassembly:
	0x01DEAAA4 MOVZ W8, 0x1
	0x01DEAAA8 STRB W8, [X20 + 0x786]
	0x01DEAAAC LDR X8, [X22]
	0x01DEAAB0 MOV V0.16B, V8.16B
	0x01DEAAB4 MOV X0, X31
	0x01DEAAB8 LDR X8, [X8 + 0xB8]
	0x01DEAABC LDP S1, S2, [X8 + 0x18]
	0x01DEAAC0 LDR V3, [X8 + 0x20]
	0x01DEAAC4 BL 0x3C2A758
	0x01DEAAC8 LDR X0, [X19 + 0xD0]
	0x01DEAACC CBZ X0, 0x1DEAE44
	0x01DEAAD0 MOV X1, X31
	0x01DEAAD4 MOV V8.16B, V0.16B
	0x01DEAAD8 MOV V9.16B, V1.16B
	0x01DEAADC MOV V12.16B, V2.16B
	0x01DEAAE0 MOV V14.16B, V3.16B
	0x01DEAAE4 BL 0x3C3FA04
	0x01DEAAE8 MOV V4.16B, V0.16B
	0x01DEAAEC MOV V5.16B, V1.16B
	0x01DEAAF0 MOV V6.16B, V2.16B
	0x01DEAAF4 MOV V0.16B, V8.16B
	0x01DEAAF8 MOV V1.16B, V9.16B
	0x01DEAAFC MOV V2.16B, V12.16B
	0x01DEAB00 MOV V3.16B, V14.16B
	0x01DEAB04 MOV X0, X31
	0x01DEAB08 BL 0x3C2A9FC
	0x01DEAB0C LDR X0, [X19 + 0xD0]
	0x01DEAB10 STR S0, [X31 + 0x4C]
	0x01DEAB14 CBZ X0, 0x1DEAE44
	0x01DEAB18 MOV X1, X31
	0x01DEAB1C MOV V9.16B, V1.16B
	0x01DEAB20 MOV V12.16B, V2.16B
	0x01DEAB24 BL 0x3C3F58C
	0x01DEAB28 LDR X0, [X19 + 0xD0]
	0x01DEAB2C CBZ X0, 0x1DEAE44
	0x01DEAB30 MOV X1, X31
	0x01DEAB34 MOV V14.16B, V0.16B
	0x01DEAB38 MOV V15.16B, V1.16B
	0x01DEAB3C MOV V8.16B, V2.16B
	0x01DEAB40 BL 0x3C3F58C
	0x01DEAB44 LDR X8, [X19 + 0xC0]
	0x01DEAB48 CBZ X8, 0x1DEAE44
	0x01DEAB4C LDR X8, [X8 + 0x78]
	0x01DEAB50 CBZ X8, 0x1DEAE44
	0x01DEAB54 LDR W9, [X8 + 0x18]
	0x01DEAB58 CBZ W9, 0x1DEAE48
	0x01DEAB5C LDR V3, [X8 + 0x20]
	0x01DEAB60 MOV X0, X31
	0x01DEAB64 FMUL S4, S10, S3
	0x01DEAB68 FMUL S5, S11, S3
	0x01DEAB6C FMUL S6, S13, S3
	0x01DEAB70 FADD S3, S0, S4
	0x01DEAB74 FADD S4, S1, S5
	0x01DEAB78 FADD S5, S2, S6
	0x01DEAB7C MOV V0.16B, V14.16B
	0x01DEAB80 MOV V1.16B, V15.16B
	0x01DEAB84 MOV V2.16B, V8.16B
	0x01DEAB88 BL 0x3C0CB04
	0x01DEAB8C LDR X0, [X19 + 0xD0]
	0x01DEAB90 CBZ X0, 0x1DEAE44
	0x01DEAB94 MOV X1, X31
	0x01DEAB98 BL 0x3C3F58C
	0x01DEAB9C LDR X0, [X19 + 0xD0]
	0x01DEABA0 CBZ X0, 0x1DEAE44
	0x01DEABA4 MOV X1, X31
	0x01DEABA8 MOV V10.16B, V0.16B
	0x01DEABAC MOV V11.16B, V1.16B
	0x01DEABB0 MOV V8.16B, V2.16B
	0x01DEABB4 BL 0x3C3F58C
	0x01DEABB8 LDR X8, [X19 + 0xC0]
	0x01DEABBC CBZ X8, 0x1DEAE44
	0x01DEABC0 LDR X8, [X8 + 0x78]
	0x01DEABC4 CBZ X8, 0x1DEAE44
	0x01DEABC8 LDR W9, [X8 + 0x18]
	0x01DEABCC CBZ W9, 0x1DEAE48
	0x01DEABD0 LDR V3, [X8 + 0x20]
	0x01DEABD4 LDR V4, [X31 + 0x4C]
	0x01DEABD8 MOV X0, X31
	0x01DEABDC FMUL S5, S9, S3
	0x01DEABE0 FMUL S4, S4, S3
	0x01DEABE4 FMUL S6, S12, S3
	0x01DEABE8 FADD S3, S0, S4
	0x01DEABEC FADD S4, S1, S5
	0x01DEABF0 FADD S5, S2, S6
	0x01DEABF4 MOV V0.16B, V10.16B
	0x01DEABF8 MOV V1.16B, V11.16B
	0x01DEABFC MOV V2.16B, V8.16B
	0x01DEAC00 BL 0x3C0CB04
	0x01DEAC04 LDR X8, [X21]
	0x01DEAC08 MOV X0, X31
	0x01DEAC0C LDR X8, [X8 + 0xB8]
	0x01DEAC10 LDP S0, S1, [X8 + 0x10]
	0x01DEAC14 LDP S2, S3, [X8 + 0x18]
	0x01DEAC18 BL 0x3C0D030
	0x01DEAC1C LDR X0, [X19 + 0xD0]
	0x01DEAC20 CBZ X0, 0x1DEAE44
	0x01DEAC24 MOV X1, X31
	0x01DEAC28 BL 0x3C3F58C
	0x01DEAC2C ADRP X8, 0xFFFFFFFFFECFF000
	0x01DEAC30 LDR V3, [X8 + 0xF24]
	0x01DEAC34 MOV X0, X31
	0x01DEAC38 BL 0x3C0CC38
	0x01DEAC3C LDR X8, [X21]
	0x01DEAC40 MOV X0, X31
	0x01DEAC44 LDR X8, [X8 + 0xB8]
	0x01DEAC48 LDP S0, S1, [X8 + 0x90]
	0x01DEAC4C LDP S2, S3, [X8 + 0x98]
	0x01DEAC50 BL 0x3C0D030
	0x01DEAC54 LDR X0, [X19 + 0xE8]
	0x01DEAC58 CBZ X0, 0x1DEAE44
	0x01DEAC5C ADRP X20, 0x2309000
	0x01DEAC60 LDR X20, [X20 + 0x970]
	0x01DEAC64 MOV X1, X31
	0x01DEAC68 BL 0x3BE1494
	0x01DEAC6C FMOV S3, 0.25
	0x01DEAC70 MOV X0, X31
	0x01DEAC74 BL 0x3C0CC38
	0x01DEAC78 LDR X0, [X20]
	0x01DEAC7C LDR W8, [X0 + 0xE0]
	0x01DEAC80 CBNZ W8, 0x1DEAC88
	0x01DEAC84 BL 0x1C16DFC
	0x01DEAC88 MOV X0, X31
	0x01DEAC8C BL 0x3C018E4
	0x01DEAC90 TBZ X0, 0x0, 0x1DEAE24
	0x01DEAC94 ADRP X22, 0x2309000
	0x01DEAC98 LDR X22, [X22 + 0x598]
	0x01DEAC9C LDR X20, [X19 + 0x150]
	0x01DEACA0 LDR X0, [X22]
	0x01DEACA4 LDR W8, [X0 + 0xE0]
	0x01DEACA8 CBNZ W8, 0x1DEACB0
	0x01DEACAC BL 0x1C16DFC
	0x01DEACB0 MOV X0, X20
	0x01DEACB4 MOV X1, X31
	0x01DEACB8 MOV X2, X31
	0x01DEACBC BL 0x3C354F8
	0x01DEACC0 TBZ X0, 0x0, 0x1DEADCC
	0x01DEACC4 LDR X0, [X21]
	0x01DEACC8 LDR W8, [X0 + 0xE0]
	0x01DEACCC CBNZ W8, 0x1DEACD8
	0x01DEACD0 BL 0x1C16DFC
	0x01DEACD4 LDR X0, [X21]
	0x01DEACD8 LDR X8, [X0 + 0xB8]
	0x01DEACDC MOV X0, X31
	0x01DEACE0 LDP S0, S1, [X8 + 0x50]
	0x01DEACE4 LDP S2, S3, [X8 + 0x58]
	0x01DEACE8 BL 0x3C0D030
	0x01DEACEC LDR X0, [X19 + 0xD0]
	0x01DEACF0 CBZ X0, 0x1DEAE44
	0x01DEACF4 MOV X1, X31
	0x01DEACF8 BL 0x3C3F58C
	0x01DEACFC LDR X8, [X19 + 0x150]
	0x01DEAD00 CBZ X8, 0x1DEAE44
	0x01DEAD04 LDP S3, S4, [X8 + 0x28]
	0x01DEAD08 LDR V5, [X8 + 0x30]
	0x01DEAD0C MOV X0, X31
	0x01DEAD10 BL 0x3C0CB04
	0x01DEAD14 LDR X8, [X19 + 0x150]
	0x01DEAD18 CBZ X8, 0x1DEAE44
	0x01DEAD1C LDP S0, S1, [X8 + 0x28]
	0x01DEAD20 LDR V2, [X8 + 0x30]
	0x01DEAD24 ADRP X8, 0xFFFFFFFFFED00000
	0x01DEAD28 LDR V8, [X8 + 0x35C]
	0x01DEAD2C MOV X0, X31
	0x01DEAD30 MOV V3.16B, V8.16B
	0x01DEAD34 BL 0x3C0CC38
	0x01DEAD38 LDR X0, [X22]
	0x01DEAD3C LDR X20, [X19 + 0x158]
	0x01DEAD40 LDR W8, [X0 + 0xE0]
	0x01DEAD44 CBNZ W8, 0x1DEAD4C
	0x01DEAD48 BL 0x1C16DFC
	0x01DEAD4C MOV X0, X20
	0x01DEAD50 MOV X1, X31
	0x01DEAD54 MOV X2, X31
	0x01DEAD58 BL 0x3C354F8
	0x01DEAD5C TBZ X0, 0x0, 0x1DEADCC
	0x01DEAD60 LDR X0, [X21]
	0x01DEAD64 LDR W8, [X0 + 0xE0]
	0x01DEAD68 CBNZ W8, 0x1DEAD74
	0x01DEAD6C BL 0x1C16DFC
	0x01DEAD70 LDR X0, [X21]
	0x01DEAD74 LDR X8, [X0 + 0xB8]
	0x01DEAD78 MOV X0, X31
	0x01DEAD7C LDP S0, S1, [X8 + 0x60]
	0x01DEAD80 LDP S2, S3, [X8 + 0x68]
	0x01DEAD84 BL 0x3C0D030
	0x01DEAD88 LDR X8, [X19 + 0x150]
	0x01DEAD8C CBZ X8, 0x1DEAE44
	0x01DEAD90 LDR X9, [X19 + 0x158]
	0x01DEAD94 CBZ X9, 0x1DEAE44
	0x01DEAD98 LDP S1, S2, [X8 + 0x2C]
	0x01DEAD9C LDR V0, [X8 + 0x28]
	0x01DEADA0 LDP S3, S4, [X9 + 0x28]
	0x01DEADA4 LDR V5, [X9 + 0x30]
	0x01DEADA8 MOV X0, X31
	0x01DEADAC BL 0x3C0CB04
	0x01DEADB0 LDR X8, [X19 + 0x158]
	0x01DEADB4 CBZ X8, 0x1DEAE44
	0x01DEADB8 LDP S0, S1, [X8 + 0x28]
	0x01DEADBC LDR V2, [X8 + 0x30]
	0x01DEADC0 MOV V3.16B, V8.16B
	0x01DEADC4 MOV X0, X31
	0x01DEADC8 BL 0x3C0CC38
	0x01DEADCC LDR X0, [X21]
	0x01DEADD0 LDR W8, [X0 + 0xE0]
	0x01DEADD4 CBNZ W8, 0x1DEADE0
	0x01DEADD8 BL 0x1C16DFC
	0x01DEADDC LDR X0, [X21]
	0x01DEADE0 LDR X8, [X0 + 0xB8]
	0x01DEADE4 MOV X0, X31
	0x01DEADE8 LDP S0, S1, [X8 + 0xC0]
	0x01DEADEC LDP S2, S3, [X8 + 0xC8]
	0x01DEADF0 BL 0x3C0D030
	0x01DEADF4 MOV X0, X19
	0x01DEADF8 BL 0x1DEA5A0
	0x01DEADFC LDP X20, X19, [X31 + 0x60]
	0x01DEAE00 LDP X22, X21, [X31 + 0x50]
	0x01DEAE04 LDR X30, [X31 + 0x40]
	0x01DEAE08 LDP D9, D8, [X31 + 0x30]
	0x01DEAE0C LDP D11, D10, [X31 + 0x20]
	0x01DEAE10 LDP D13, D12, [X31 + 0x10]
	0x01DEAE14 FMOV S3, 0.5
	0x01DEAE18 MOV X0, X31
	0x01DEAE1C LDP D15, D14, [X31], #0x70
	0x01DEAE20 B 0x3C0CB98
	0x01DEAE24 LDP X20, X19, [X31 + 0x60]
	0x01DEAE28 LDP X22, X21, [X31 + 0x50]
	0x01DEAE2C LDR X30, [X31 + 0x40]
	0x01DEAE30 LDP D9, D8, [X31 + 0x30]
	0x01DEAE34 LDP D11, D10, [X31 + 0x20]
	0x01DEAE38 LDP D13, D12, [X31 + 0x10]
	0x01DEAE3C LDP D15, D14, [X31], #0x70
	0x01DEAE40 RET
	0x01DEAE44 BL 0x1C16F20
	0x01DEAE48 BL 0x1C16F28
	0x01DEAE4C STP X30, X21, [X31 - 0x20]!
	0x01DEAE50 STP X20, X19, [X31 + 0x10]
	0x01DEAE54 ADRP X20, 0x25EE000
	0x01DEAE58 ADRP X21, 0x230D000
	0x01DEAE5C LDRB W8, [X20 + 0xCBF]
	0x01DEAE60 LDR X21, [X21 + 0x860]
	0x01DEAE64 MOV X19, X0
	0x01DEAE68 TBNZ X8, 0x0, 0x1DEAE80
	0x01DEAE6C ADRP X0, 0x230D000
	0x01DEAE70 LDR X0, [X0 + 0x860]
	0x01DEAE74 BL 0x1C16CF4
	0x01DEAE78 MOVZ W8, 0x1
	0x01DEAE7C STRB W8, [X20 + 0xCBF]
	0x01DEAE80 LDR X0, [X21]
	0x01DEAE84 LDR W8, [X0 + 0xE0]
	0x01DEAE88 CBNZ W8, 0x1DEAE90
	0x01DEAE8C BL 0x1C16DFC
	0x01DEAE90 MOV X0, X19
	0x01DEAE94 LDP X20, X19, [X31 + 0x10]
	0x01DEAE98 LDP X30, X21, [X31], #0x20
	0x01DEAE9C B 0x1DEAEA0
	0x01DEAEA0 STP X30, X25, [X31 - 0x40]!
	0x01DEAEA4 STP X24, X23, [X31 + 0x10]
	0x01DEAEA8 STP X22, X21, [X31 + 0x20]
	0x01DEAEAC STP X20, X19, [X31 + 0x30]
	0x01DEAEB0 ADRP X20, 0x25EE000
	0x01DEAEB4 ADRP X22, 0x230E000
	0x01DEAEB8 ADRP X21, 0x230E000
	0x01DEAEBC ADRP X24, 0x230E000
	0x01DEAEC0 ADRP X23, 0x230E000
	0x01DEAEC4 LDRB W8, [X20 + 0xD10]
	0x01DEAEC8 LDR X22, [X22 + 0xED8]
	0x01DEAECC LDR X21, [X21 + 0xEE0]
	0x01DEAED0 LDR X24, [X24 + 0xEE8]
	0x01DEAED4 LDR X23, [X23 + 0xEF0]
	0x01DEAED8 MOV X19, X0
	0x01DEAEDC TBNZ X8, 0x0, 0x1DEAF18
	0x01DEAEE0 ADRP X0, 0x230E000
	0x01DEAEE4 LDR X0, [X0 + 0xEE0]
	0x01DEAEE8 BL 0x1C16CF4
	0x01DEAEEC ADRP X0, 0x230E000
	0x01DEAEF0 LDR X0, [X0 + 0xEF0]
	0x01DEAEF4 BL 0x1C16CF4
	0x01DEAEF8 ADRP X0, 0x230E000
	0x01DEAEFC LDR X0, [X0 + 0xEE8]
	0x01DEAF00 BL 0x1C16CF4
	0x01DEAF04 ADRP X0, 0x230E000
	0x01DEAF08 LDR X0, [X0 + 0xED8]
	0x01DEAF0C BL 0x1C16CF4
	0x01DEAF10 MOVZ W8, 0x1
	0x01DEAF14 STRB W8, [X20 + 0xD10]
	0x01DEAF18 MOVZ W25, 0x1
	0x01DEAF1C STRB W25, [X19 + 0xF1]
	0x01DEAF20 LDR X0, [X22]
	0x01DEAF24 BL 0x1C16F10
	0x01DEAF28 LDR X1, [X21]
	0x01DEAF2C MOV X20, X0
	0x01DEAF30 BL 0x301B7C4
	0x01DEAF34 STR X20, [X19 + 0x140]
	0x01DEAF38 LDR X0, [X22]
	0x01DEAF3C BL 0x1C16F10
	0x01DEAF40 LDR X1, [X21]
	0x01DEAF44 MOV X20, X0
	0x01DEAF48 BL 0x301B7C4
	0x01DEAF4C STR X20, [X19 + 0x148]
	0x01DEAF50 LDR X0, [X24]
	0x01DEAF54 BL 0x1C16F10
	0x01DEAF58 LDR X2, [X23]
	0x01DEAF5C MOVZ W1, 0x8
	0x01DEAF60 MOV X20, X0
	0x01DEAF64 BL 0x301B830
	0x01DEAF68 STR X20, [X19 + 0x178]
	0x01DEAF6C STRB W25, [X19 + 0x180]
	0x01DEAF70 LDR X0, [X22]
	0x01DEAF74 BL 0x1C16F10
	0x01DEAF78 LDR X1, [X21]
	0x01DEAF7C MOV X20, X0
	0x01DEAF80 BL 0x301B7C4
	0x01DEAF84 STR X20, [X19 + 0x188]
	0x01DEAF88 MOV X0, X19
	0x01DEAF8C LDP X20, X19, [X31 + 0x30]
	0x01DEAF90 LDP X22, X21, [X31 + 0x20]
	0x01DEAF94 LDP X24, X23, [X31 + 0x10]
	0x01DEAF98 MOV X1, X31
	0x01DEAF9C LDP X30, X25, [X31], #0x40
	0x01DEAFA0 B 0x1E74F04
	0x01DEAFA4 STR X30, [X31 - 0x60]!
	0x01DEAFA8 STP X28, X27, [X31 + 0x10]
	0x01DEAFAC STP X26, X25, [X31 + 0x20]
	0x01DEAFB0 STP X24, X23, [X31 + 0x30]
	0x01DEAFB4 STP X22, X21, [X31 + 0x40]
	0x01DEAFB8 STP X20, X19, [X31 + 0x50]
	0x01DEAFBC ADRP X21, 0x25EE000
	0x01DEAFC0 LDRB W8, [X21 + 0xCC0]
	0x01DEAFC4 MOV X20, X2
	0x01DEAFC8 MOV X19, X0
	0x01DEAFCC TBNZ X8, 0x0, 0x1DEAFF0
	0x01DEAFD0 ADRP X0, 0x230C000
	0x01DEAFD4 LDR X0, [X0 + 0x418]
	0x01DEAFD8 BL 0x1C16CF4
	0x01DEAFDC ADRP X0, 0x2309000
	0x01DEAFE0 LDR X0, [X0 + 0x5F8]
	0x01DEAFE4 BL 0x1C16CF4
	0x01DEAFE8 MOVZ W8, 0x1
	0x01DEAFEC STRB W8, [X21 + 0xCC0]
	0x01DEAFF0 CBZ X20, 0x1DEB0E0
	0x01DEAFF4 ADRP X8, 0x230C000
	0x01DEAFF8 LDR X8, [X8 + 0x418]
	0x01DEAFFC MOV X0, X20
	0x01DEB000 LDR X1, [X8]
	0x01DEB004 BL 0x21A453C
	0x01DEB008 CBZ X0, 0x1DEB0E0
	0x01DEB00C LDR X8, [X0 + 0x18]
	0x01DEB010 MOV X21, X0
	0x01DEB014 CMP W8, 0x1
	0x01DEB018 B.LT 0x1DEB0A8
	0x01DEB01C ADRP X25, 0x2308000
	0x01DEB020 LDR X25, [X25 + 0x5F8]
	0x01DEB024 MOV X24, X31
	0x01DEB028 AND X8, X8, 0x0
	0x01DEB02C CMP X24, W8, UXTW
	0x01DEB030 B.CS 0x1DEB0DC
	0x01DEB034 LDR X26, [X19 + 0x1F0]
	0x01DEB038 CBZ X26, 0x1DEB0E0
	0x01DEB03C LDR X8, [X26 + 0x18]
	0x01DEB040 CMP W8, 0x1
	0x01DEB044 B.LT 0x1DEB098
	0x01DEB048 ADD X9, X21, X24, 0x3, LSL
	0x01DEB04C LDR X22, [X9 + 0x20]
	0x01DEB050 MOV X27, X31
	0x01DEB054 AND X8, X8, 0x0
	0x01DEB058 ADD X28, X26, 0x20
	0x01DEB05C CMP X27, W8, UXTW
	0x01DEB060 B.CS 0x1DEB0DC
	0x01DEB064 LDR X0, [X25]
	0x01DEB068 LDR X23, [X28, X27, LSL #3]
	0x01DEB06C LDR W8, [X0 + 0xE0]
	0x01DEB070 CBNZ W8, 0x1DEB078
	0x01DEB074 BL 0x1C16DFC
	0x01DEB078 MOV X0, X22
	0x01DEB07C MOV X1, X23
	0x01DEB080 MOV X2, X31
	0x01DEB084 BL 0x3C8A910
	0x01DEB088 LDR W8, [X26 + 0x18]
	0x01DEB08C ADD X27, X27, 0x1
	0x01DEB090 CMP X27, W8, SXTW
	0x01DEB094 B.LT 0x1DEB05C
	0x01DEB098 LDR W8, [X21 + 0x18]
	0x01DEB09C ADD X24, X24, 0x1
	0x01DEB0A0 CMP X24, W8, SXTW
	0x01DEB0A4 B.LT 0x1DEB02C
	0x01DEB0A8 LDR X8, [X20 + 0x20]
	0x01DEB0AC CBZ X8, 0x1DEB0B8
	0x01DEB0B0 LDR W1, [X8]
	0x01DEB0B4 B 0x1DEB0BC
	0x01DEB0B8 MOV X1, X31
	0x01DEB0BC MOV X0, X19
	0x01DEB0C0 LDP X20, X19, [X31 + 0x50]
	0x01DEB0C4 LDP X22, X21, [X31 + 0x40]
	0x01DEB0C8 LDP X24, X23, [X31 + 0x30]
	0x01DEB0CC LDP X26, X25, [X31 + 0x20]
	0x01DEB0D0 LDP X28, X27, [X31 + 0x10]
	0x01DEB0D4 LDR X30, [X31], #0x60
	0x01DEB0D8 B 0x1DE7B84
	0x01DEB0DC BL 0x1C16F28
	0x01DEB0E0 BL 0x1C16F20
	0x01DEB0E4 STP D13, D12, [X31 - 0x60]!
	0x01DEB0E8 STP D11, D10, [X31 + 0x10]
	0x01DEB0EC STP D9, D8, [X31 + 0x20]
	0x01DEB0F0 STR X30, [X31 + 0x30]
	0x01DEB0F4 STP X22, X21, [X31 + 0x40]
	0x01DEB0F8 STP X20, X19, [X31 + 0x50]
	0x01DEB0FC CBZ X1, 0x1DEB254
	0x01DEB100 MOV X19, X0
	0x01DEB104 MOV X0, X1
	0x01DEB108 MOV X1, X31
	0x01DEB10C MOV X20, X2
	0x01DEB110 BL 0x3C32E90
	0x01DEB114 CBZ X0, 0x1DEB254
	0x01DEB118 MOV X1, X31
	0x01DEB11C BL 0x3C3F58C
	0x01DEB120 MOV X0, X19
	0x01DEB124 MOV V8.16B, V0.16B
	0x01DEB128 MOV V9.16B, V1.16B
	0x01DEB12C MOV V10.16B, V2.16B
	0x01DEB130 BL 0x1DE7BE4
	0x01DEB134 ADRP X21, 0x25ED000
	0x01DEB138 LDRB W8, [X21 + 0x85C]
	0x01DEB13C MOV V11.16B, V0.16B
	0x01DEB140 MOV V12.16B, V1.16B
	0x01DEB144 MOV V13.16B, V2.16B
	0x01DEB148 CBNZ W8, 0x1DEB160
	0x01DEB14C ADRP X0, 0x2308000
	0x01DEB150 LDR X0, [X0 + 0x5A8]
	0x01DEB154 BL 0x1C16CF4
	0x01DEB158 MOVZ W8, 0x1
	0x01DEB15C STRB W8, [X21 + 0x85C]
	0x01DEB160 ADRP X22, 0x2308000
	0x01DEB164 LDR X22, [X22 + 0x5A8]
	0x01DEB168 FSUB S11, S8, S11
	0x01DEB16C FSUB S9, S9, S12
	0x01DEB170 FSUB S8, S10, S13
	0x01DEB174 LDR X0, [X22]
	0x01DEB178 LDR W8, [X0 + 0xE0]
	0x01DEB17C CBNZ W8, 0x1DEB184
	0x01DEB180 BL 0x1C16DFC
	0x01DEB184 FMUL S0, S11, S11
	0x01DEB188 FMUL S1, S9, S9
	0x01DEB18C FADD S0, S0, S1
	0x01DEB190 FMUL S1, S8, S8
	0x01DEB194 FADD S0, S1, S0
	0x01DEB198 FSQRT S0, S0
	0x01DEB19C STR S0, [X31 + 0x3C]
	0x01DEB1A0 CBZ X20, 0x1DEB254
	0x01DEB1A4 MOV X0, X20
	0x01DEB1A8 MOV X1, X31
	0x01DEB1AC BL 0x3C32E90
	0x01DEB1B0 CBZ X0, 0x1DEB254
	0x01DEB1B4 MOV X1, X31
	0x01DEB1B8 BL 0x3C3F58C
	0x01DEB1BC MOV X0, X19

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X23
	012 Move [X31+112], X22
	013 Move [X31+120], X21
	014 Move [X31+128], X20
	015 Move [X31+136], X19
	016 Move X20, 0x25EF000
	017 Move X21, 0x230A000
	018 Move W8, [X20+3259]
	019 Move X21, [X21+1432]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x230A000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+3259], W8
	030 Move X0, [X21]
	031 Move X20, [X19+352]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X20
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Inequality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {88}
	044 Move X0, [X19+352]
	045 Compare X0, 0
	046 JumpIfEqual {536}
	047 Move X1, X31
	048 Call NetPlayer.get_isDie, X0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {59}
	053 Move X8, [X19]
	054 Move X0, X19
	055 Move X1, X31
	056 Move X9, [X8+952]
	057 Move X2, [X8+960]
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move X0, X19
	060 Call ChickenController.GetIsEggStolen, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {88}
	065 Move X0, X19
	066 Call ChickenController.get_distanceToNest, X0
	067 Move W8, 0x420C0000
	068 Move S1, W8
	069 NotImplemented "Instruction FCMP not yet implemented."
	070 Move X0, X19
	071 Move X20, [X31+128]
	072 Move X19, [X31+136]
	073 Move X22, [X31+112]
	074 Move X21, [X31+120]
	075 Move X30, [X31+96]
	076 Move X23, [X31+104]
	077 Move D9, [X31+80]
	078 Move D8, [X31+88]
	079 Move D11, [X31+64]
	080 Move D10, [X31+72]
	081 Move D13, [X31+48]
	082 Move D12, [X31+56]
	083 Move D15, [X31+32]
	084 Move D14, [X31+40]
	085 Add X31, X31, 144
	086 Call ChickenController.SetBackToNest, X0
	087 Return 
	088 Move X0, X19
	089 Call MobController.UpdateChasing, X0
	090 Move X0, X19
	091 Call MobController.get__timerAttackInterval, X0
	092 Move X0, [X19+56]
	093 Compare X0, 0
	094 JumpIfEqual {536}
	095 Move X1, X31
	096 Move V8, V0
	097 Call NetworkRunner.get_DeltaTime, X0
	098 Add S0, S8, S0
	099 Move X0, X19
	100 Call MobController.set__timerAttackInterval, X0, V0
	101 Move X0, [X21]
	102 Move X20, [X19+352]
	103 Move W8, [X0+224]
	104 Compare W8, 0
	105 JumpIfNotEqual {107}
	106 Call 0x1C17DFC
	107 Move X0, X20
	108 Move X1, X31
	109 Move X2, X31
	110 Call Object.op_Inequality, X0, X1
	111 Move TEMP, X0
	112 And TEMP, TEMP, 1
	113 Compare TEMP, 1
	114 JumpIfNotEqual {191}
	115 Move X0, X19
	116 Call ChickenController.get__attackPosition, X0
	117 Move X0, X31
	118 Call Extensions.Flatten, X0
	119 Move X0, [X19+352]
	120 Compare X0, 0
	121 JumpIfEqual {536}
	122 Move X1, X31
	123 Move V8, V0
	124 Move V9, V1
	125 Move V10, V2
	126 Call Component.get_transform, X0
	127 Compare X0, 0
	128 JumpIfEqual {536}
	129 Move X1, X31
	130 Call Transform.get_position, X0
	131 Move X0, X31
	132 Call Extensions.Flatten, X0
	133 Move X0, X19
	134 Move V11, V0
	135 Move V12, V1
	136 Move V13, V2
	137 Call ChickenController.get__attackPosition, X0
	138 Move X0, [X19+352]
	139 Compare X0, 0
	140 JumpIfEqual {536}
	141 Move X1, X31
	142 Move V14, V1
	143 Call Component.get_transform, X0
	144 Compare X0, 0
	145 JumpIfEqual {536}
	146 Move X1, X31
	147 Call Transform.get_position, X0
	148 Move X0, X19
	149 Move V15, V1
	150 Call MobController.get__timerAttackInterval, X0
	151 Move X8, [X19+192]
	152 Compare X8, 0
	153 JumpIfEqual {536}
	154 Move V1, [X8+40]
	155 NotImplemented "Instruction FCMP not yet implemented."
	156 Move V0, [X8+76]
	157 NotImplemented "Instruction FABD not yet implemented."
	158 NotImplemented "Instruction FCMP not yet implemented."
	159 Subtract S1, S8, S11
	160 Subtract S2, S9, S12
	161 Subtract S3, S10, S13
	162 Multiply S1, S1, S1
	163 Multiply S2, S2, S2
	164 Multiply S3, S3, S3
	165 Add S1, S1, S2
	166 Add S1, S3, S1
	167 Multiply S0, S0, S0
	168 NotImplemented "Instruction FCMP not yet implemented."
	169 Move S0, W31
	170 Move X0, X19
	171 Call MobController.set__timerAttackInterval, X0, V0
	172 Move X8, [X19+192]
	173 Compare X8, 0
	174 JumpIfEqual {536}
	175 Move X20, [X19+352]
	176 Move W21, [X8+36]
	177 Move X0, X19
	178 Move X1, X31
	179 Call Component.get_transform, X0
	180 Move X8, [X19+192]
	181 Compare X8, 0
	182 JumpIfEqual {536}
	183 Move X9, [X19+64]
	184 Move X2, X0
	185 Compare X9, 0
	186 JumpIfEqual {211}
	187 Move X9, [X9+32]
	188 Compare X9, 0
	189 JumpIfEqual {211}
	190 Move W6, [X9]
	191 Move X0, X19
	192 Call MobController.get__timerToChasing, X0
	193 Move X0, [X19+56]
	194 Compare X0, 0
	195 JumpIfEqual {536}
	196 Move X1, X31
	197 Move V8, V0
	198 Call NetworkRunner.get_DeltaTime, X0
	199 Add S0, S8, S0
	200 Move X0, X19
	201 Call MobController.set__timerToChasing, X0, V0
	202 Move X0, X19
	203 Call MobController.get__timerToChasing, X0
	204 Move X8, [X19+192]
	205 Compare X8, 0
	206 JumpIfEqual {536}
	207 Move V1, [X8+104]
	208 NotImplemented "Instruction FCMP not yet implemented."
	209 Move X0, X19
	210 Call ChickenController.SetBackToNest, X0
	211 Move X6, X31
	212 Compare X20, 0
	213 JumpIfEqual {536}
	214 Move W9, [X19+104]
	215 Move X4, [X8+184]
	216 Move X3, [X8+192]
	217 Move X5, [X8+24]
	218 Move X0, X20
	219 NotImplemented "Instruction BFM not yet implemented."
	220 Move W1, W21
	221 Move X7, X31
	222 Call NetPlayer.PlayerHit, X0, X1, X2, X3, X4, X5, X6
	223 Move X0, X19
	224 Call ChickenController.get_phase, X0
	225 NotImplemented "Instruction CMP not yet implemented."
	226 Move X0, [X19+232]
	227 Compare X0, 0
	228 JumpIfEqual {536}
	229 Move X1, X31
	230 Call NavMeshAgent.get_pathPending, X0
	231 Move TEMP, X0
	232 And TEMP, TEMP, 1
	233 Compare TEMP, 1
	234 JumpIfNotEqual {300}
	235 Move X0, X19
	236 Call MobController.get__targetPosition, X0
	237 Move X0, X19
	238 Move X1, X31
	239 Move V8, V0
	240 Move V9, V1
	241 Move V10, V2
	242 Call Component.get_transform, X0
	243 Compare X0, 0
	244 JumpIfEqual {536}
	245 Move X1, X31
	246 Call Transform.get_position, X0
	247 Move X21, 0x25EF000
	248 Move W8, [X21+1925]
	249 Move V11, V0
	250 Move V12, V1
	251 Move V13, V2
	252 Compare W8, 0
	253 JumpIfNotEqual {259}
	254 Move X0, 0x230A000
	255 Move X0, [X0+1448]
	256 Call 0x1C17CF4
	257 Move W8, 1
	258 Move [X21+1925], W8
	259 Move X20, 0x230A000
	260 Move X20, [X20+1448]
	261 Subtract S11, S8, S11
	262 Subtract S9, S9, S12
	263 Subtract S8, S10, S13
	264 Move X0, [X20]
	265 Move W8, [X0+224]
	266 Compare W8, 0
	267 JumpIfNotEqual {269}
	268 Call 0x1C17DFC
	269 Move X8, -19918848
	270 Multiply S0, S11, S11
	271 Multiply S1, S9, S9
	272 Move V10, [X8+380]
	273 Move X22, 0x230A000
	274 Multiply S2, S8, S8
	275 Add S0, S0, S1
	276 Move X22, [X22+1440]
	277 Add S0, S2, S0
	278 NotImplemented "Instruction FSQRT not yet implemented."
	279 NotImplemented "Instruction FCMP not yet implemented."
	280 Move X23, 0x25EF000
	281 NotImplemented "Instruction FDIV not yet implemented."
	282 NotImplemented "Instruction FDIV not yet implemented."
	283 NotImplemented "Instruction FDIV not yet implemented."
	284 Move X20, [X31+128]
	285 Move X19, [X31+136]
	286 Move X22, [X31+112]
	287 Move X21, [X31+120]
	288 Move X30, [X31+96]
	289 Move X23, [X31+104]
	290 Move D9, [X31+80]
	291 Move D8, [X31+88]
	292 Move D11, [X31+64]
	293 Move D10, [X31+72]
	294 Move D13, [X31+48]
	295 Move D12, [X31+56]
	296 Move D15, [X31+32]
	297 Move D14, [X31+40]
	298 Add X31, X31, 144
	299 Return 
	300 Move X20, [X19+232]
	301 Move X0, X19
	302 Call MobController.get__targetPosition, X0
	303 Compare X20, 0
	304 JumpIfEqual {536}
	305 Move X0, X20
	306 Move X20, [X31+128]
	307 Move X19, [X31+136]
	308 Move X22, [X31+112]
	309 Move X21, [X31+120]
	310 Move X30, [X31+96]
	311 Move X23, [X31+104]
	312 Move D9, [X31+80]
	313 Move D8, [X31+88]
	314 Move D11, [X31+64]
	315 Move D10, [X31+72]
	316 Move D13, [X31+48]
	317 Move D12, [X31+56]
	318 Move D15, [X31+32]
	319 Move D14, [X31+40]
	320 Move X1, X31
	321 Add X31, X31, 144
	322 Call NavMeshAgent.SetDestination, X0, X1
	323 Return 
	324 Move W8, [X23+1923]
	325 Compare W8, 0
	326 JumpIfNotEqual {332}
	327 Move X0, 0x230A000
	328 Move X0, [X0+1440]
	329 Call 0x1C17CF4
	330 Move W8, 1
	331 Move [X23+1923], W8
	332 Move X8, [X22]
	333 Move X8, [X8+184]
	334 Move S0, [X8]
	335 Move S1, [X8+4]
	336 Move V2, [X8+8]
	337 Move X0, X31
	338 Move [X31+20], S1
	339 Move [X31+28], S0
	340 Move [X31+16], S2
	341 Call Extensions.Flatten, X0
	342 Move W8, [X21+1925]
	343 Move V8, V0
	344 Move V9, V1
	345 Move V13, V2
	346 Compare W8, 0
	347 JumpIfNotEqual {353}
	348 Move X0, 0x230A000
	349 Move X0, [X0+1448]
	350 Call 0x1C17CF4
	351 Move W8, 1
	352 Move [X21+1925], W8
	353 Move X0, [X20]
	354 Move W8, [X0+224]
	355 Compare W8, 0
	356 JumpIfNotEqual {358}
	357 Call 0x1C17DFC
	358 Multiply S0, S8, S8
	359 Multiply S1, S9, S9
	360 Add S0, S0, S1
	361 Multiply S1, S13, S13
	362 Add S0, S1, S0
	363 NotImplemented "Instruction FSQRT not yet implemented."
	364 NotImplemented "Instruction FCMP not yet implemented."
	365 NotImplemented "Instruction FDIV not yet implemented."
	366 NotImplemented "Instruction FDIV not yet implemented."
	367 NotImplemented "Instruction FDIV not yet implemented."
	368 Move W8, [X23+1923]
	369 Compare W8, 0
	370 JumpIfNotEqual {376}
	371 Move X0, 0x230A000
	372 Move X0, [X0+1440]
	373 Call 0x1C17CF4
	374 Move W8, 1
	375 Move [X23+1923], W8
	376 Move X8, [X22]
	377 Move X8, [X8+184]
	378 Move S11, [X8]
	379 Move S12, [X8+4]
	380 Move V13, [X8+8]
	381 Move X8, [X19+192]
	382 Compare X8, 0
	383 JumpIfEqual {536}
	384 Move V8, [X8+64]
	385 Move X0, X19
	386 Move X1, X31
	387 Call Component.get_transform, X0
	388 Compare X0, 0
	389 JumpIfEqual {536}
	390 Move X1, X31
	391 Move [X31+28], S8
	392 Call Transform.get_forward, X0
	393 Move X21, 0x25EF000
	394 Move W8, [X21+2596]
	395 Move V14, V0
	396 Move V15, V1
	397 Move V8, V2
	398 Compare W8, 0
	399 JumpIfNotEqual {405}
	400 Move X0, 0x230A000
	401 Move X0, [X0+1448]
	402 Call 0x1C17CF4
	403 Move W8, 1
	404 Move [X21+2596], W8
	405 Move X0, [X20]
	406 Multiply S0, S11, S11
	407 Multiply S1, S12, S12
	408 Add S0, S0, S1
	409 Multiply S1, S13, S13
	410 Move W8, [X0+224]
	411 Add S9, S1, S0
	412 Multiply S0, S14, S14
	413 Multiply S1, S15, S15
	414 Add S0, S0, S1
	415 Multiply S1, S8, S8
	416 Add S10, S1, S0
	417 Compare W8, 0
	418 JumpIfNotEqual {420}
	419 Call 0x1C17DFC
	420 Move X8, -19927040
	421 Move V1, [X8+4072]
	422 Multiply S0, S9, S10
	423 NotImplemented "Instruction FSQRT not yet implemented."
	424 Move S9, W31
	425 NotImplemented "Instruction FCMP not yet implemented."
	426 Move X0, [X20]
	427 Multiply S1, S11, S14
	428 Multiply S2, S12, S15
	429 Multiply S3, S13, S8
	430 Add S1, S1, S2
	431 Add S1, S3, S1
	432 Move W8, [X0+224]
	433 NotImplemented "Instruction FDIV not yet implemented."
	434 Move S1, 1
	435 Move S2, -1
	436 NotImplemented "Instruction FMIN not yet implemented."
	437 NotImplemented "Instruction FCMP not yet implemented."
	438 NotImplemented "Instruction FCSEL not yet implemented."
	439 Compare W8, 0
	440 JumpIfNotEqual {442}
	441 Call 0x1C17DFC
	442 NotImplemented "Instruction FCVT not yet implemented."
	443 Call 0x3EB2B80
	444 Move X8, -19922944
	445 Move V1, [X8+1096]
	446 NotImplemented "Instruction INVALID not yet implemented."
	447 Multiply S9, S0, S1
	448 Move X0, X19
	449 Move X1, X31
	450 Call Component.get_transform, X0
	451 Move X20, X0
	452 Move X0, X19
	453 Move X1, X31
	454 Call Component.get_transform, X0
	455 Compare X0, 0
	456 JumpIfEqual {536}
	457 Move X1, X31
	458 Call Transform.get_rotation, X0
	459 Move V8, V0
	460 Move V14, V1
	461 Move V15, V2
	462 Move V0, V11
	463 Move V1, V12
	464 Move V2, V13
	465 Move X0, X31
	466 Move [X31+12], S3
	467 Call Quaternion.LookRotation, X0
	468 Move X0, [X19+56]
	469 Compare X0, 0
	470 JumpIfEqual {536}
	471 Move V11, V0
	472 Move V0, [X31+28]
	473 Move X1, X31
	474 Move V12, V1
	475 Move V13, V2
	476 Move V10, V3
	477 NotImplemented "Instruction FDIV not yet implemented."
	478 Call NetworkRunner.get_DeltaTime, X0
	479 Move V3, [X31+12]
	480 Multiply S0, S9, S0
	481 Move [X31], S0
	482 Move V0, V8
	483 Move V1, V14
	484 Move V2, V15
	485 Move V4, V11
	486 Move V5, V12
	487 Move V6, V13
	488 Move V7, V10
	489 Move X0, X31
	490 Call Quaternion.Slerp, X0, X1, V0
	491 Compare X20, 0
	492 JumpIfEqual {536}
	493 Move X0, X20
	494 Move X1, X31
	495 Call Transform.set_rotation, X0, X1
	496 Move X20, [X19+232]
	497 Compare X20, 0
	498 JumpIfEqual {536}
	499 Move X0, X20
	500 Move X1, X31
	501 Call NavMeshAgent.get_speed, X0
	502 Move X0, [X19+56]
	503 Compare X0, 0
	504 JumpIfEqual {536}
	505 Move V1, [X31+16]
	506 Move X1, X31
	507 Multiply S8, S1, S0
	508 Move V1, [X31+20]
	509 Multiply S9, S1, S0
	510 Move V1, [X31+24]
	511 Multiply S10, S1, S0
	512 Call NetworkRunner.get_DeltaTime, X0
	513 Multiply S3, S10, S0
	514 Multiply S1, S9, S0
	515 Multiply S2, S8, S0
	516 Move X0, X20
	517 Move X20, [X31+128]
	518 Move X19, [X31+136]
	519 Move X22, [X31+112]
	520 Move X21, [X31+120]
	521 Move X30, [X31+96]
	522 Move X23, [X31+104]
	523 Move D9, [X31+80]
	524 Move D8, [X31+88]
	525 Move D11, [X31+64]
	526 Move D10, [X31+72]
	527 Move D13, [X31+48]
	528 Move D12, [X31+56]
	529 Move D15, [X31+32]
	530 Move D14, [X31+40]
	531 Move V0, V3
	532 Move X1, X31
	533 Add X31, X31, 144
	534 Call NavMeshAgent.Move, X0, X1
	535 Return 
	536 Call 0x1C17F20

Method: System.Void SetBackToNest()

Disassembly:
	0x01DE9AFC CBNZ W8, 0x1DE9B04
	0x01DE9B00 BL 0x1C16DFC
	0x01DE9B04 MOV X0, X20
	0x01DE9B08 MOV X1, X31
	0x01DE9B0C MOV X2, X31
	0x01DE9B10 BL 0x3C354F8
	0x01DE9B14 TBZ X0, 0x0, 0x1DE9B94
	0x01DE9B18 LDR X0, [X19 + 0x160]
	0x01DE9B1C CBZ X0, 0x1DEA1BC
	0x01DE9B20 MOV X1, X31
	0x01DE9B24 BL 0x1DAEC64
	0x01DE9B28 TBZ X0, 0x0, 0x1DE9B48
	0x01DE9B2C LDR X8, [X19]
	0x01DE9B30 MOV X0, X19
	0x01DE9B34 MOV X1, X31
	0x01DE9B38 LDR X9, [X8 + 0x3B8]
	0x01DE9B3C LDR X2, [X8 + 0x3C0]
	0x01DE9B40 BLR X9
	0x01DE9B44 B 0x1DE9B6C
	0x01DE9B48 MOV X0, X19
	0x01DE9B4C BL 0x1DE7E60
	0x01DE9B50 TBNZ X0, 0x0, 0x1DE9B94
	0x01DE9B54 MOV X0, X19
	0x01DE9B58 BL 0x1DE7F34
	0x01DE9B5C MOVZ W8, 0x420C0000
	0x01DE9B60 FMOV S1, W8
	0x01DE9B64 FCMP S0, S1
	0x01DE9B68 B.LE 0x1DE9B94
	0x01DE9B6C MOV X0, X19
	0x01DE9B70 LDP X20, X19, [X31 + 0x80]
	0x01DE9B74 LDP X22, X21, [X31 + 0x70]
	0x01DE9B78 LDP X30, X23, [X31 + 0x60]
	0x01DE9B7C LDP D9, D8, [X31 + 0x50]
	0x01DE9B80 LDP D11, D10, [X31 + 0x40]
	0x01DE9B84 LDP D13, D12, [X31 + 0x30]
	0x01DE9B88 LDP D15, D14, [X31 + 0x20]
	0x01DE9B8C ADD X31, X31, 0x90
	0x01DE9B90 B 0x1DE8AFC
	0x01DE9B94 MOV X0, X19
	0x01DE9B98 BL 0x1DEA1C0
	0x01DE9B9C MOV X0, X19
	0x01DE9BA0 BL 0x1DEA458
	0x01DE9BA4 LDR X0, [X19 + 0x38]
	0x01DE9BA8 CBZ X0, 0x1DEA1BC
	0x01DE9BAC MOV X1, X31
	0x01DE9BB0 MOV V8.16B, V0.16B
	0x01DE9BB4 BL 0x1E9E550
	0x01DE9BB8 FADD S0, S8, S0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W1, 4
	005 Move X19, X0
	006 Call ChickenController.set_phase, X0, X1
	007 Move X8, [X19]
	008 Move X0, X19
	009 Move X1, X31
	010 Move X9, [X8+952]
	011 Move X2, [X8+960]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move S0, W31
	014 Move X0, X19
	015 Call MobController.set__timerToChasing, X0, V0
	016 Move X9, [X19+192]
	017 Compare X9, 0
	018 JumpIfEqual {58}
	019 Move X8, [X9+48]
	020 Compare X8, 0
	021 JumpIfEqual {58}
	022 Move W10, [X8+24]
	023 Compare W10, 0
	024 JumpIfEqual {59}
	025 Move X10, [X9+88]
	026 Compare X10, 0
	027 JumpIfEqual {58}
	028 Move W11, [X10+24]
	029 Compare W11, 0
	030 JumpIfEqual {59}
	031 Move X9, [X9+96]
	032 Compare X9, 0
	033 JumpIfEqual {58}
	034 Move W11, [X9+24]
	035 Compare W11, 0
	036 JumpIfEqual {59}
	037 Move X11, [X19]
	038 Move V0, [X8+32]
	039 Move V1, [X10+32]
	040 Move V2, [X9+32]
	041 Move X8, [X11+712]
	042 Move X2, [X11+720]
	043 Move X0, X19
	044 Move W1, W31
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move X20, [X19+232]
	047 Move X0, X19
	048 Call ChickenController.get_nestPosition, X0
	049 Compare X20, 0
	050 JumpIfEqual {58}
	051 Move X0, X20
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X1, X31
	055 Move X30, [X31+32]
	056 Call NavMeshAgent.SetDestination, X0, X1
	057 Return 
	058 Call 0x1C17F20
	059 Call 0x1C17F28

Method: System.Void UpdateBackToNest()

Disassembly:
	0x01DEA3BC MOV W1, W0
	0x01DEA3C0 MOV X0, X21
	0x01DEA3C4 LDR X2, [X8]
	0x01DEA3C8 BL 0x301BCCC
	0x01DEA3CC MOV X1, X0
	0x01DEA3D0 B 0x1DEA3D8
	0x01DEA3D4 MOV X1, X31
	0x01DEA3D8 LDR X8, [X19]
	0x01DEA3DC MOV X0, X19
	0x01DEA3E0 LDR X9, [X8 + 0x3B8]
	0x01DEA3E4 LDR X2, [X8 + 0x3C0]
	0x01DEA3E8 BLR X9
	0x01DEA3EC LDR X0, [X23]
	0x01DEA3F0 LDR X21, [X20]
	0x01DEA3F4 LDR W8, [X0 + 0xE0]
	0x01DEA3F8 CBNZ W8, 0x1DEA400
	0x01DEA3FC BL 0x1C16DFC
	0x01DEA400 MOV X0, X21
	0x01DEA404 MOV X1, X31
	0x01DEA408 MOV X2, X31
	0x01DEA40C BL 0x3C354F8
	0x01DEA410 TBZ X0, 0x0, 0x1DEA444
	0x01DEA414 LDR X0, [X20]
	0x01DEA418 CBZ X0, 0x1DEA454
	0x01DEA41C MOV X1, X31
	0x01DEA420 BL 0x3C32E90
	0x01DEA424 CBZ X0, 0x1DEA454
	0x01DEA428 MOV X1, X31
	0x01DEA42C BL 0x3C3F58C
	0x01DEA430 MOV X0, X19
	0x01DEA434 LDP X20, X19, [X31 + 0x20]
	0x01DEA438 LDP X22, X21, [X31 + 0x10]
	0x01DEA43C LDP X30, X23, [X31], #0x30
	0x01DEA440 B 0x1DE9A40
	0x01DEA444 LDP X20, X19, [X31 + 0x20]
	0x01DEA448 LDP X22, X21, [X31 + 0x10]
	0x01DEA44C LDP X30, X23, [X31], #0x30
	0x01DEA450 RET
	0x01DEA454 BL 0x1C16F20
	0x01DEA458 STP X30, X19, [X31 - 0x10]!
	0x01DEA45C LDR X8, [X0 + 0x50]
	0x01DEA460 CBZ X8, 0x1DEA470
	0x01DEA464 LDR V0, [X8 + 0x2C]
	0x01DEA468 LDP X30, X19, [X31], #0x10
	0x01DEA46C RET
	0x01DEA470 ADRP X0, 0x2309000
	0x01DEA474 LDR X0, [X0 + 0x5B0]
	0x01DEA478 BL 0x1C16D08
	0x01DEA47C BL 0x1C16F10
	0x01DEA480 MOV X19, X0
	0x01DEA484 ADRP X0, 0x230E000
	0x01DEA488 LDR X0, [X0 + 0xE60]
	0x01DEA48C BL 0x1C16D08
	0x01DEA490 MOV X1, X0
	0x01DEA494 MOV X0, X19
	0x01DEA498 MOV X2, X31
	0x01DEA49C BL 0x337DF1C
	0x01DEA4A0 ADRP X0, 0x230E000
	0x01DEA4A4 LDR X0, [X0 + 0xEB0]
	0x01DEA4A8 BL 0x1C16D08
	0x01DEA4AC MOV X1, X0
	0x01DEA4B0 MOV X0, X19
	0x01DEA4B4 BL 0x1C16DEC
	0x01DEA4B8 STR X30, [X31 - 0x10]!
	0x01DEA4BC LDR X0, [X0 + 0x38]
	0x01DEA4C0 CBZ X0, 0x1DEA4D0
	0x01DEA4C4 MOV X1, X31
	0x01DEA4C8 LDR X30, [X31], #0x10
	0x01DEA4CC B 0x1E9E550
	0x01DEA4D0 BL 0x1C16F20
	0x01DEA4D4 LDR V0, [X0 + 0x4C]
	0x01DEA4D8 FMUL S0, S0, S0
	0x01DEA4DC RET
	0x01DEA4E0 STP X30, X19, [X31 - 0x10]!
	0x01DEA4E4 LDR X8, [X0 + 0x50]
	0x01DEA4E8 CBZ X8, 0x1DEA4F8
	0x01DEA4EC LDR V0, [X8 + 0x24]
	0x01DEA4F0 LDP X30, X19, [X31], #0x10
	0x01DEA4F4 RET
	0x01DEA4F8 ADRP X0, 0x2309000

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x25EF000
	009 Move X20, 0x230F000
	010 Move W8, [X21+3260]
	011 Move X20, [X20+3136]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x230F000
	018 Move X0, [X0+3248]
	019 Call 0x1C17CF4
	020 Move X0, 0x230F000
	021 Move X0, [X0+3184]
	022 Call 0x1C17CF4
	023 Move X0, 0x230F000
	024 Move X0, [X0+3136]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3260], W8
	028 Move X0, X19
	029 Move [X31+8], X31
	030 Call ChickenController.get_nestPosition, X0
	031 Move X0, [X20]
	032 Move V8, V0
	033 Move V9, V1
	034 Move V10, V2
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move S3, 12
	040 Add X1, X31, 8
	041 Move X0, X19
	042 Move V0, V8
	043 Move V1, V9
	044 Move V2, V10
	045 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {66}
	050 Move X20, [X31+8]
	051 Compare X20, 0
	052 JumpIfEqual {93}
	053 Move W1, [X20+24]
	054 Move W0, W31
	055 Move X2, X31
	056 Call Random.Range, X0, X1
	057 Move X8, 0x230F000
	058 Move X8, [X8+3184]
	059 Move W1, W0
	060 Move X0, X20
	061 Move X2, [X8]
	062 Call List`1<Object>.get_Item, X0, X1
	063 Move X1, X0
	064 Move X0, X19
	065 Call ChickenController.SetChasing, X0, X1
	066 Move X0, X19
	067 Call ChickenController.get_distanceToNest, X0
	068 Move X8, -19918848
	069 Move V1, [X8+188]
	070 NotImplemented "Instruction FCMP not yet implemented."
	071 Move X0, X19
	072 Call ChickenController.SetIncubating, X0
	073 Move X0, X19
	074 Call ChickenController.get_distanceToNest, X0
	075 Move S1, 12
	076 NotImplemented "Instruction FCMP not yet implemented."
	077 Move X0, X19
	078 Call ChickenController.GetIsEggStolen, X0
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {85}
	083 Move X0, X19
	084 Call ChickenController.SetSearching, X0
	085 Move X20, [X31+48]
	086 Move X19, [X31+56]
	087 Move X30, [X31+32]
	088 Move X21, [X31+40]
	089 Move D9, [X31+16]
	090 Move D8, [X31+24]
	091 Move V10, [X31+64]
	092 Return 
	093 Call 0x1C17F20

Method: System.Void SetSearching()

Disassembly:
	0x01DEB604 BL 0x1C16D08
	0x01DEB608 MOV X1, X0
	0x01DEB60C MOV X0, X19
	0x01DEB610 MOV X2, X31
	0x01DEB614 BL 0x337DF1C
	0x01DEB618 ADRP X0, 0x230D000
	0x01DEB61C LDR X0, [X0 + 0xF08]
	0x01DEB620 BL 0x1C16D08
	0x01DEB624 MOV X1, X0
	0x01DEB628 MOV X0, X19
	0x01DEB62C BL 0x1C16DEC
	0x01DEB630 STR X30, [X31 - 0x20]!
	0x01DEB634 STP X20, X19, [X31 + 0x10]
	0x01DEB638 ADRP X20, 0x25ED000
	0x01DEB63C LDRB W8, [X20 + 0xCC4]
	0x01DEB640 MOV X19, X0
	0x01DEB644 TBNZ X8, 0x0, 0x1DEB668
	0x01DEB648 ADRP X0, 0x230A000
	0x01DEB64C LDR X0, [X0 + 0x9A0]
	0x01DEB650 BL 0x1C16CF4
	0x01DEB654 ADRP X0, 0x230D000
	0x01DEB658 LDR X0, [X0 + 0xF10]
	0x01DEB65C BL 0x1C16CF4
	0x01DEB660 MOVZ W8, 0x1
	0x01DEB664 STRB W8, [X20 + 0xCC4]
	0x01DEB668 LDR X8, [X19 + 0x50]
	0x01DEB66C CBZ X8, 0x1DEB6E8
	0x01DEB670 STR X31, [X31 + 0x8]
	0x01DEB674 LDR X0, [X19 + 0x38]
	0x01DEB678 ADRP X19, 0x230D000
	0x01DEB67C LDR X19, [X19 + 0xF10]
	0x01DEB680 ADD X1, X8, 0x78
	0x01DEB684 ADD X2, X31, 0x8
	0x01DEB688 MOV X3, X31
	0x01DEB68C BL 0x1E74B10
	0x01DEB690 LDR X2, [X19]
	0x01DEB694 MOVZ W1, 0x8
	0x01DEB698 BL 0x223D890
	0x01DEB69C LDR X0, [X31 + 0x8]
	0x01DEB6A0 CBZ X0, 0x1DEB6D8
	0x01DEB6A4 ADRP X9, 0x230A000
	0x01DEB6A8 LDR X9, [X9 + 0x9A0]
	0x01DEB6AC LDR X8, [X0]
	0x01DEB6B0 LDR X1, [X9]
	0x01DEB6B4 LDRB W10, [X8 + 0x130]
	0x01DEB6B8 LDRB W9, [X1 + 0x130]
	0x01DEB6BC CMP W10, W9
	0x01DEB6C0 B.CC 0x1DEB6E4
	0x01DEB6C4 LDR X8, [X8 + 0xC8]
	0x01DEB6C8 ADD X8, X8, X9, 0x3, LSL
	0x01DEB6CC LDUR X8, [X8 - 0x8]
	0x01DEB6D0 CMP X8, X1
	0x01DEB6D4 B.NE 0x1DEB6E4
	0x01DEB6D8 LDP X20, X19, [X31 + 0x10]
	0x01DEB6DC LDR X30, [X31], #0x20
	0x01DEB6E0 RET
	0x01DEB6E4 BL 0x1C171E0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W1, 5
	005 Move X19, X0
	006 Call ChickenController.set_phase, X0, X1
	007 Move X0, [X19+56]
	008 Move W8, 0x44160000
	009 Move S0, W8
	010 Move X1, X31
	011 Call TickTimer.CreateFromSeconds, X0, V0
	012 And X1, X0, 0
	013 Move X0, X19
	014 Call ChickenController.set__timerToSpawnEgg, X0, X1
	015 Move X9, [X19+192]
	016 Compare X9, 0
	017 JumpIfEqual {67}
	018 Move X8, [X9+56]
	019 Compare X8, 0
	020 JumpIfEqual {67}
	021 Move W10, [X8+24]
	022 Compare W10, 0
	023 JumpIfEqual {68}
	024 Move X10, [X9+88]
	025 Compare X10, 0
	026 JumpIfEqual {67}
	027 Move W11, [X10+24]
	028 Compare W11, 0
	029 JumpIfEqual {68}
	030 Move X9, [X9+96]
	031 Compare X9, 0
	032 JumpIfEqual {67}
	033 Move W11, [X9+24]
	034 Compare W11, 0
	035 JumpIfEqual {68}
	036 Move X11, [X19]
	037 Move V0, [X8+32]
	038 Move V1, [X10+32]
	039 Move V2, [X9+32]
	040 Move X8, [X11+712]
	041 Move X2, [X11+720]
	042 Move X0, X19
	043 Move W1, W31
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X8, [X19]
	046 Move W1, 1
	047 Move X0, X19
	048 Move X9, [X8+872]
	049 Move X2, [X8+880]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move X20, [X19+456]
	052 Move X0, X19
	053 Move X1, X31
	054 Call Component.get_transform, X0
	055 Compare X0, 0
	056 JumpIfEqual {67}
	057 Move X1, X31
	058 Call Transform.get_position, X0
	059 Move X0, X20
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move S3, 1
	063 Move X1, X31
	064 Move X30, [X31+32]
	065 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	066 Return 
	067 Call 0x1C17F20
	068 Call 0x1C17F28

Method: System.Void UpdateSearching()

Disassembly:
	0x01DEA4FC LDR X0, [X0 + 0x5B0]
	0x01DEA500 BL 0x1C16D08
	0x01DEA504 BL 0x1C16F10
	0x01DEA508 MOV X19, X0
	0x01DEA50C ADRP X0, 0x230E000
	0x01DEA510 LDR X0, [X0 + 0xEB8]
	0x01DEA514 BL 0x1C16D08
	0x01DEA518 MOV X1, X0
	0x01DEA51C MOV X0, X19
	0x01DEA520 MOV X2, X31
	0x01DEA524 BL 0x337DF1C
	0x01DEA528 ADRP X0, 0x230E000
	0x01DEA52C LDR X0, [X0 + 0xEC0]
	0x01DEA530 BL 0x1C16D08
	0x01DEA534 MOV X1, X0
	0x01DEA538 MOV X0, X19
	0x01DEA53C BL 0x1C16DEC
	0x01DEA540 STP X30, X19, [X31 - 0x10]!
	0x01DEA544 LDR X8, [X0 + 0x50]
	0x01DEA548 CBZ X8, 0x1DEA558
	0x01DEA54C STR S0, [X8 + 0x24]
	0x01DEA550 LDP X30, X19, [X31], #0x10
	0x01DEA554 RET
	0x01DEA558 ADRP X0, 0x2309000
	0x01DEA55C LDR X0, [X0 + 0x5B0]
	0x01DEA560 BL 0x1C16D08
	0x01DEA564 BL 0x1C16F10
	0x01DEA568 MOV X19, X0
	0x01DEA56C ADRP X0, 0x230E000
	0x01DEA570 LDR X0, [X0 + 0xEB8]
	0x01DEA574 BL 0x1C16D08
	0x01DEA578 MOV X1, X0
	0x01DEA57C MOV X0, X19
	0x01DEA580 MOV X2, X31
	0x01DEA584 BL 0x337DF1C
	0x01DEA588 ADRP X0, 0x230E000
	0x01DEA58C LDR X0, [X0 + 0xEC8]
	0x01DEA590 BL 0x1C16D08
	0x01DEA594 MOV X1, X0
	0x01DEA598 MOV X0, X19
	0x01DEA59C BL 0x1C16DEC
	0x01DEA5A0 STP X30, X19, [X31 - 0x10]!
	0x01DEA5A4 LDR X8, [X0 + 0x50]
	0x01DEA5A8 CBZ X8, 0x1DEA5BC
	0x01DEA5AC LDP S0, S1, [X8 + 0x30]
	0x01DEA5B0 LDR V2, [X8 + 0x38]
	0x01DEA5B4 LDP X30, X19, [X31], #0x10
	0x01DEA5B8 RET
	0x01DEA5BC ADRP X0, 0x2309000
	0x01DEA5C0 LDR X0, [X0 + 0x5B0]
	0x01DEA5C4 BL 0x1C16D08
	0x01DEA5C8 BL 0x1C16F10
	0x01DEA5CC MOV X19, X0
	0x01DEA5D0 ADRP X0, 0x230E000
	0x01DEA5D4 LDR X0, [X0 + 0xEA0]
	0x01DEA5D8 BL 0x1C16D08
	0x01DEA5DC MOV X1, X0
	0x01DEA5E0 MOV X0, X19
	0x01DEA5E4 MOV X2, X31
	0x01DEA5E8 BL 0x337DF1C
	0x01DEA5EC ADRP X0, 0x230E000
	0x01DEA5F0 LDR X0, [X0 + 0xED0]
	0x01DEA5F4 BL 0x1C16D08
	0x01DEA5F8 MOV X1, X0
	0x01DEA5FC MOV X0, X19
	0x01DEA600 BL 0x1C16DEC
	0x01DEA604 STR X30, [X31 - 0x20]!
	0x01DEA608 STP X20, X19, [X31 + 0x10]
	0x01DEA60C MOVZ W1, 0x5
	0x01DEA610 MOV X19, X0
	0x01DEA614 BL 0x1DE7AC4
	0x01DEA618 LDR X0, [X19 + 0x38]
	0x01DEA61C MOVZ W8, 0x44160000
	0x01DEA620 FMOV S0, W8
	0x01DEA624 MOV X1, X31
	0x01DEA628 BL 0x1E91E68
	0x01DEA62C AND X1, X0, 0x0
	0x01DEA630 MOV X0, X19
	0x01DEA634 BL 0x1DE7D0C
	0x01DEA638 LDR X9, [X19 + 0xC0]
	0x01DEA63C CBZ X9, 0x1DEA6E0
	0x01DEA640 LDR X8, [X9 + 0x38]
	0x01DEA644 CBZ X8, 0x1DEA6E0
	0x01DEA648 LDR W10, [X8 + 0x18]
	0x01DEA64C CBZ W10, 0x1DEA6E4
	0x01DEA650 LDR X10, [X9 + 0x58]
	0x01DEA654 CBZ X10, 0x1DEA6E0
	0x01DEA658 LDR W11, [X10 + 0x18]
	0x01DEA65C CBZ W11, 0x1DEA6E4
	0x01DEA660 LDR X9, [X9 + 0x60]
	0x01DEA664 CBZ X9, 0x1DEA6E0
	0x01DEA668 LDR W11, [X9 + 0x18]
	0x01DEA66C CBZ W11, 0x1DEA6E4
	0x01DEA670 LDR X11, [X19]
	0x01DEA674 LDR V0, [X8 + 0x20]
	0x01DEA678 LDR V1, [X10 + 0x20]
	0x01DEA67C LDR V2, [X9 + 0x20]
	0x01DEA680 LDR X8, [X11 + 0x2C8]
	0x01DEA684 LDR X2, [X11 + 0x2D0]
	0x01DEA688 MOV X0, X19
	0x01DEA68C MOV W1, W31
	0x01DEA690 BLR X8
	0x01DEA694 LDR X8, [X19]
	0x01DEA698 MOVZ W1, 0x1
	0x01DEA69C MOV X0, X19
	0x01DEA6A0 LDR X9, [X8 + 0x368]
	0x01DEA6A4 LDR X2, [X8 + 0x370]
	0x01DEA6A8 BLR X9
	0x01DEA6AC LDR X20, [X19 + 0x1C8]
	0x01DEA6B0 MOV X0, X19
	0x01DEA6B4 MOV X1, X31
	0x01DEA6B8 BL 0x3C32E90

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x25EF000
	012 Move X20, 0x230F000
	013 Move W8, [X21+3261]
	014 Move X20, [X20+3136]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x230F000
	021 Move X0, [X0+3248]
	022 Call 0x1C17CF4
	023 Move X0, 0x230F000
	024 Move X0, [X0+3184]
	025 Call 0x1C17CF4
	026 Move X0, 0x230F000
	027 Move X0, [X0+3136]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+3261], W8
	031 Move X0, [X20]
	032 Add X20, X19, 376
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X19
	038 Move X1, X20
	039 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {71}
	044 Move X20, [X20]
	045 Compare X20, 0
	046 JumpIfEqual {147}
	047 Move W1, [X20+24]
	048 Move W0, W31
	049 Move X2, X31
	050 Call Random.Range, X0, X1
	051 Move X8, 0x230F000
	052 Move X8, [X8+3184]
	053 Move W1, W0
	054 Move X0, X20
	055 Move X2, [X8]
	056 Call List`1<Object>.get_Item, X0, X1
	057 Move X1, X0
	058 Move X0, X19
	059 Move X20, [X31+64]
	060 Move X19, [X31+72]
	061 Move X30, [X31+48]
	062 Move X21, [X31+56]
	063 Move D9, [X31+32]
	064 Move D8, [X31+40]
	065 Move D11, [X31+16]
	066 Move D10, [X31+24]
	067 Move D13, [X31+80]
	068 Move D12, [X31+88]
	069 Call ChickenController.SetChasing, X0, X1
	070 Return 
	071 Move X0, X19
	072 Move X1, X31
	073 Call Component.get_transform, X0
	074 Compare X0, 0
	075 JumpIfEqual {147}
	076 Move X1, X31
	077 Call Transform.get_position, X0
	078 Move X0, X19
	079 Move V8, V0
	080 Move V9, V1
	081 Move V10, V2
	082 Call ChickenController.get_nestPosition, X0
	083 Move X20, 0x25EF000
	084 Move W8, [X20+2140]
	085 Move V11, V0
	086 Move V12, V1
	087 Move V13, V2
	088 Compare W8, 0
	089 JumpIfNotEqual {95}
	090 Move X0, 0x230A000
	091 Move X0, [X0+1448]
	092 Call 0x1C17CF4
	093 Move W8, 1
	094 Move [X20+2140], W8
	095 Move X8, 0x230A000
	096 Move X8, [X8+1448]
	097 Subtract S11, S8, S11
	098 Subtract S9, S9, S12
	099 Subtract S8, S10, S13
	100 Move X0, [X8]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {105}
	104 Call 0x1C17DFC
	105 Multiply S0, S11, S11
	106 Multiply S1, S9, S9
	107 Multiply S2, S8, S8
	108 Add S0, S0, S1
	109 Add S0, S2, S0
	110 NotImplemented "Instruction FSQRT not yet implemented."
	111 Move S1, 6
	112 NotImplemented "Instruction FCMP not yet implemented."
	113 Move X0, X19
	114 Call ChickenController.GetIsEggStolen, X0
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {134}
	119 Move X8, [X19]
	120 Move X0, X19
	121 Move X20, [X31+64]
	122 Move X19, [X31+72]
	123 Move X30, [X31+48]
	124 Move X21, [X31+56]
	125 Move X2, [X8+904]
	126 Move X1, [X8+912]
	127 Move D9, [X31+32]
	128 Move D8, [X31+40]
	129 Move D11, [X31+16]
	130 Move D10, [X31+24]
	131 Move D13, [X31+80]
	132 Move D12, [X31+88]
	133 CallNoReturn X2
	134 Move X0, X19
	135 Move X20, [X31+64]
	136 Move X19, [X31+72]
	137 Move X30, [X31+48]
	138 Move X21, [X31+56]
	139 Move D9, [X31+32]
	140 Move D8, [X31+40]
	141 Move D11, [X31+16]
	142 Move D10, [X31+24]
	143 Move D13, [X31+80]
	144 Move D12, [X31+88]
	145 Call ChickenController.SetBackToNest, X0
	146 Return 
	147 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01DEB774 MOV X0, X19
	0x01DEB778 MOV X2, X31
	0x01DEB77C BL 0x1E74A68
	0x01DEB780 LDR X2, [X20]
	0x01DEB784 LDP X20, X19, [X31 + 0x10]
	0x01DEB788 MOVZ W1, 0x8
	0x01DEB78C LDP X30, X21, [X31], #0x20
	0x01DEB790 B 0x223DAC0
	0x01DEB794 ADRP X0, 0x2308000
	0x01DEB798 LDR X0, [X0 + 0x5B0]
	0x01DEB79C BL 0x1C16D08
	0x01DEB7A0 BL 0x1C16F10
	0x01DEB7A4 MOV X19, X0
	0x01DEB7A8 ADRP X0, 0x230D000
	0x01DEB7AC LDR X0, [X0 + 0xF18]
	0x01DEB7B0 BL 0x1C16D08
	0x01DEB7B4 MOV X1, X0
	0x01DEB7B8 MOV X0, X19
	0x01DEB7BC MOV X2, X31
	0x01DEB7C0 BL 0x337DF1C
	0x01DEB7C4 ADRP X0, 0x230D000
	0x01DEB7C8 LDR X0, [X0 + 0xF30]
	0x01DEB7CC BL 0x1C16D08
	0x01DEB7D0 MOV X1, X0
	0x01DEB7D4 MOV X0, X19
	0x01DEB7D8 BL 0x1C16DEC
	0x01DEB7DC STP X30, X19, [X31 - 0x10]!
	0x01DEB7E0 LDR X8, [X0 + 0x50]
	0x01DEB7E4 CBZ X8, 0x1DEB7FC
	0x01DEB7E8 LDR W8, [X8 + 0x80]
	0x01DEB7EC CMP W8, 0x0
	0x01DEB7F0 CSET W0, NE
	0x01DEB7F4 LDP X30, X19, [X31], #0x10
	0x01DEB7F8 RET
	0x01DEB7FC ADRP X0, 0x2308000
	0x01DEB800 LDR X0, [X0 + 0x5B0]
	0x01DEB804 BL 0x1C16D08
	0x01DEB808 BL 0x1C16F10
	0x01DEB80C MOV X19, X0
	0x01DEB810 ADRP X0, 0x230D000
	0x01DEB814 LDR X0, [X0 + 0xF38]
	0x01DEB818 BL 0x1C16D08
	0x01DEB81C MOV X1, X0
	0x01DEB820 MOV X0, X19
	0x01DEB824 MOV X2, X31
	0x01DEB828 BL 0x337DF1C
	0x01DEB82C ADRP X0, 0x230D000
	0x01DEB830 LDR X0, [X0 + 0xF40]
	0x01DEB834 BL 0x1C16D08
	0x01DEB838 MOV X1, X0
	0x01DEB83C MOV X0, X19
	0x01DEB840 BL 0x1C16DEC
	0x01DEB844 STP X30, X19, [X31 - 0x10]!
	0x01DEB848 LDR X8, [X0 + 0x50]
	0x01DEB84C CBZ X8, 0x1DEB860
	0x01DEB850 AND W9, W1, 0x1
	0x01DEB854 STR W9, [X8 + 0x80]
	0x01DEB858 LDP X30, X19, [X31], #0x10
	0x01DEB85C RET
	0x01DEB860 ADRP X0, 0x2308000
	0x01DEB864 LDR X0, [X0 + 0x5B0]
	0x01DEB868 BL 0x1C16D08
	0x01DEB86C BL 0x1C16F10
	0x01DEB870 MOV X19, X0
	0x01DEB874 ADRP X0, 0x230D000
	0x01DEB878 LDR X0, [X0 + 0xF38]
	0x01DEB87C BL 0x1C16D08
	0x01DEB880 MOV X1, X0
	0x01DEB884 MOV X0, X19
	0x01DEB888 MOV X2, X31
	0x01DEB88C BL 0x337DF1C
	0x01DEB890 ADRP X0, 0x230D000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25EE000
	006 Move X20, 0x2309000
	007 Move W8, [X21+3262]
	008 Move X20, [X20+2416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2309000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move X0, 0x230E000
	018 Move X0, [X0+3008]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3262], W8
	022 Move X0, X19
	023 Call MobController.OnDrawGizmos, X0
	024 Move X0, [X20]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X31
	030 Call Application.get_isPlaying
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {85}
	035 Move X20, 0x230E000
	036 Move X20, [X20+3008]
	037 Move X0, [X20]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move X0, [X20]
	043 Move X8, [X0+184]
	044 Move X0, X31
	045 Move S0, [X8+176]
	046 Move S1, [X8+180]
	047 Move S2, [X8+184]
	048 Move S3, [X8+188]
	049 Call Gizmos.set_color, X0
	050 Move X0, X19
	051 Call ChickenController.get__attackPosition, X0
	052 Move X8, [X19+192]
	053 Compare X8, 0
	054 JumpIfEqual {90}
	055 Move V3, [X8+76]
	056 Move X0, X31
	057 Call Gizmos.DrawWireSphere, X0, V0
	058 Move S0, 1
	059 Move S1, 0.5
	060 Move S2, W31
	061 Move S3, 1
	062 Move X0, X31
	063 Call Gizmos.set_color, X0
	064 Move X0, X19
	065 Call ChickenController.get_nestPosition, X0
	066 Move S3, 12
	067 Move X0, X31
	068 Call Gizmos.DrawWireSphere, X0, V0
	069 Move S0, 1
	070 Move S1, W31
	071 Move S2, W31
	072 Move S3, 1
	073 Move X0, X31
	074 Call Gizmos.set_color, X0
	075 Move X0, X19
	076 Call ChickenController.get_nestPosition, X0
	077 Move X20, [X31+16]
	078 Move X19, [X31+24]
	079 Move S3, 6
	080 Move X0, X31
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Call Gizmos.DrawWireSphere, X0, V0
	084 Return 
	085 Move X20, [X31+16]
	086 Move X19, [X31+24]
	087 Move X30, [X31+32]
	088 Move X21, [X31+40]
	089 Return 
	090 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DEBE4C ADRP X0, 0x230D000
	0x01DEBE50 LDR X0, [X0 + 0xFE0]
	0x01DEBE54 BL 0x1C16CF4
	0x01DEBE58 ADRP X0, 0x230D000
	0x01DEBE5C LDR X0, [X0 + 0xFD8]
	0x01DEBE60 BL 0x1C16CF4
	0x01DEBE64 ADRP X0, 0x2308000
	0x01DEBE68 LDR X0, [X0 + 0x5F8]
	0x01DEBE6C BL 0x1C16CF4
	0x01DEBE70 MOVZ W8, 0x1
	0x01DEBE74 STRB W8, [X22 + 0xCCA]
	0x01DEBE78 MOVI V0.2D, 0x0
	0x01DEBE7C MOV X0, X31
	0x01DEBE80 STP X31, X31, [X31 + 0x30]
	0x01DEBE84 STUR V0, [X31 + 0x6C]
	0x01DEBE88 STP V0, V0, [X31 + 0x50]
	0x01DEBE8C STR X31, [X31 + 0x40]
	0x01DEBE90 BL 0x3C30AE0
	0x01DEBE94 MOV X0, X19
	0x01DEBE98 MOV X1, X31
	0x01DEBE9C MOV V11.16B, V0.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25EE000
	006 Move X21, 0x230D000
	007 Move W8, [X20+3263]
	008 Move X21, [X21+2144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x230D000
	015 Move X0, [X0+2144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3263], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]

Method: System.Void <SpawnEgg>b__46_0(Fusion.NetworkRunner runner, Fusion.NetworkObject o)

Disassembly:
	0x01DEBFA4 MOV W22, W0
	0x01DEBFA8 LDR W9, [X8 + 0xE0]
	0x01DEBFAC CBNZ W9, 0x1DEBFB8
	0x01DEBFB0 MOV X0, X8
	0x01DEBFB4 BL 0x1C16DFC
	0x01DEBFB8 ADD X0, X31, 0x18
	0x01DEBFBC ADD X1, X31, 0x50
	0x01DEBFC0 FMOV S0, 15
	0x01DEBFC4 MOVZ W3, 0x1
	0x01DEBFC8 MOV W2, W22
	0x01DEBFCC MOV X4, X31
	0x01DEBFD0 STP S8, S9, [X31 + 0x18]
	0x01DEBFD4 STP S10, S11, [X31 + 0x20]
	0x01DEBFD8 STP S12, S13, [X31 + 0x28]
	0x01DEBFDC BL 0x3C8B63C
	0x01DEBFE0 TBZ X0, 0x0, 0x1DEC0B4
	0x01DEBFE4 MOV X0, X19
	0x01DEBFE8 MOV X1, X31
	0x01DEBFEC BL 0x3C32E90
	0x01DEBFF0 MOV X22, X0
	0x01DEBFF4 ADD X0, X31, 0x50
	0x01DEBFF8 MOV X1, X31
	0x01DEBFFC BL 0x3C8E66C
	0x01DEC000 CBZ X22, 0x1DEC0D4
	0x01DEC004 MOV X0, X22
	0x01DEC008 MOV X1, X31
	0x01DEC00C BL 0x3C40B58
	0x01DEC010 LDR X0, [X19 + 0xD8]
	0x01DEC014 CBZ X0, 0x1DEC0D4
	0x01DEC018 ADRP X8, 0x230C000
	0x01DEC01C LDR X8, [X8 + 0xFE0]
	0x01DEC020 MOV X1, X21
	0x01DEC024 MOV V8.16B, V0.16B
	0x01DEC028 MOV V9.16B, V1.16B
	0x01DEC02C LDR X2, [X8]
	0x01DEC030 MOV V10.16B, V2.16B
	0x01DEC034 BL 0x301CD00
	0x01DEC038 MOV W21, W0
	0x01DEC03C ADD X8, X31, 0x0
	0x01DEC040 MOV X0, X19
	0x01DEC044 BL 0x1DEB578
	0x01DEC048 ADRP X9, 0x230C000
	0x01DEC04C LDR V0, [X31]
	0x01DEC050 LDR X8, [X31 + 0x10]
	0x01DEC054 LDR X9, [X9 + 0xFD8]
	0x01DEC058 ADD X0, X31, 0x30
	0x01DEC05C STR V0, [X31 + 0x3]
	0x01DEC060 MOV W1, W21
	0x01DEC064 LDR X2, [X9]
	0x01DEC068 MOV V0.16B, V8.16B
	0x01DEC06C MOV V1.16B, V9.16B
	0x01DEC070 MOV V2.16B, V10.16B
	0x01DEC074 STR X8, [X31 + 0x40]
	0x01DEC078 BL 0x2410098
	0x01DEC07C TBNZ X20, 0x0, 0x1DEC0B4
	0x01DEC080 LDR X20, [X19 + 0xA0]
	0x01DEC084 CBZ X20, 0x1DEC0B4
	0x01DEC088 MOV X0, X19
	0x01DEC08C MOV X1, X31
	0x01DEC090 BL 0x3C32E90
	0x01DEC094 CBZ X0, 0x1DEC0D4
	0x01DEC098 MOV X1, X31
	0x01DEC09C BL 0x3C3F58C
	0x01DEC0A0 FMOV S3, 1
	0x01DEC0A4 MOVZ W1, 0x1
	0x01DEC0A8 MOV X0, X20
	0x01DEC0AC MOV X2, X31
	0x01DEC0B0 BL 0x1DD0FA8
	0x01DEC0B4 LDP X20, X19, [X31 + 0xD0]
	0x01DEC0B8 LDP X22, X21, [X31 + 0xC0]
	0x01DEC0BC LDP X30, X23, [X31 + 0xB0]
	0x01DEC0C0 LDP D9, D8, [X31 + 0xA0]
	0x01DEC0C4 LDP D11, D10, [X31 + 0x90]
	0x01DEC0C8 LDP D13, D12, [X31 + 0x80]
	0x01DEC0CC ADD X31, X31, 0xE0
	0x01DEC0D0 RET
	0x01DEC0D4 BL 0x1C16F20
	0x01DEC0D8 STR X30, [X31 - 0x30]!
	0x01DEC0DC STP X22, X21, [X31 + 0x10]
	0x01DEC0E0 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0x25EE000
	013 Move W8, [X21+3264]
	014 Move X20, X2
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x230C000
	021 Move X0, [X0+1048]
	022 Call 0x1C17CF4
	023 Move X0, 0x2309000
	024 Move X0, [X0+1528]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3264], W8
	028 Compare X20, 0
	029 JumpIfEqual {92}
	030 Move X8, 0x230C000
	031 Move X8, [X8+1048]
	032 Move X0, X20
	033 Move X1, [X8]
	034 Call 0x21A553C, X0
	035 Compare X0, 0
	036 JumpIfEqual {92}
	037 Move X8, [X0+24]
	038 Move X21, X0
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X25, 0x2308000
	041 Move X25, [X25+1528]
	042 Move X24, X31
	043 And X8, X8, 0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X26, [X19+496]
	046 Compare X26, 0
	047 JumpIfEqual {92}
	048 Move X8, [X26+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Add X9, X21, X24
	051 Move X22, [X9+32]
	052 Move X27, X31
	053 And X8, X8, 0
	054 Add X28, X26, 32
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X0, [X25]
	057 Move X23, [X28]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X22
	063 Move X1, X23
	064 Move X2, X31
	065 Call Physics.IgnoreCollision, X0, X1
	066 Move W8, [X26+24]
	067 Add X27, X27, 1
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W8, [X21+24]
	070 Add X24, X24, 1
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X8, [X20+32]
	073 Compare X8, 0
	074 JumpIfEqual {76}
	075 Move W1, [X8]
	076 Move X1, X31
	077 Move X0, X19
	078 Move X20, [X31+80]
	079 Move X19, [X31+88]
	080 Move X22, [X31+64]
	081 Move X21, [X31+72]
	082 Move X24, [X31+48]
	083 Move X23, [X31+56]
	084 Move X26, [X31+32]
	085 Move X25, [X31+40]
	086 Move X28, [X31+16]
	087 Move X27, [X31+24]
	088 Move X30, [X31+96]
	089 Call ChickenController.set_eggID, X0, X1
	090 Return 
	091 Call 0x1C17F28
	092 Call 0x1C17F20

Method: System.Int32 <UpdateIncubating>b__50_0(AnimalCompany.NetPlayer a, AnimalCompany.NetPlayer b)

Disassembly:
	0x01DEC0E4 ADRP X22, 0x25EC000
	0x01DEC0E8 LDRB W8, [X22 + 0xCC7]
	0x01DEC0EC MOV X19, X2
	0x01DEC0F0 MOV X21, X1
	0x01DEC0F4 MOV X20, X0
	0x01DEC0F8 TBNZ X8, 0x0, 0x1DEC110
	0x01DEC0FC ADRP X0, 0x230C000
	0x01DEC100 LDR X0, [X0 + 0xFE0]
	0x01DEC104 BL 0x1C16CF4
	0x01DEC108 MOVZ W8, 0x1
	0x01DEC10C STRB W8, [X22 + 0xCC7]
	0x01DEC110 LDR X0, [X20 + 0x40]
	0x01DEC114 CBZ X0, 0x1DEC148
	0x01DEC118 LDRB W8, [X0 + 0x60]
	0x01DEC11C TBNZ X8, 0x1, 0x1DEC148
	0x01DEC120 MOV X1, X31
	0x01DEC124 BL 0x1E93668
	0x01DEC128 TBZ X0, 0x0, 0x1DEC148
	0x01DEC12C MOV X0, X20
	0x01DEC130 MOV X1, X21
	0x01DEC134 MOV X2, X19
	0x01DEC138 LDP X20, X19, [X31 + 0x20]
	0x01DEC13C LDP X22, X21, [X31 + 0x10]
	0x01DEC140 LDR X30, [X31], #0x30
	0x01DEC144 B 0x1DEC198
	0x01DEC148 LDR X0, [X20 + 0xD8]
	0x01DEC14C CBZ X0, 0x1DEC194
	0x01DEC150 ADRP X8, 0x230C000
	0x01DEC154 LDR X8, [X8 + 0xFE0]
	0x01DEC158 MOV X1, X21
	0x01DEC15C LDR X2, [X8]
	0x01DEC160 BL 0x301CD00
	0x01DEC164 CBZ X19, 0x1DEC194
	0x01DEC168 MOV W21, W0
	0x01DEC16C MOV X0, X19
	0x01DEC170 MOV X1, X31
	0x01DEC174 BL 0x1DB20B8
	0x01DEC178 MOV W2, W0
	0x01DEC17C MOV X0, X20
	0x01DEC180 MOV W1, W21
	0x01DEC184 LDP X20, X19, [X31 + 0x20]
	0x01DEC188 LDP X22, X21, [X31 + 0x10]
	0x01DEC18C LDR X30, [X31], #0x30
	0x01DEC190 B 0x1DEC348
	0x01DEC194 BL 0x1C16F20
	0x01DEC198 SUB X31, X31, 0x70
	0x01DEC19C STP X30, X23, [X31 + 0x40]
	0x01DEC1A0 STP X22, X21, [X31 + 0x50]
	0x01DEC1A4 STP X20, X19, [X31 + 0x60]
	0x01DEC1A8 ADRP X22, 0x25EC000
	0x01DEC1AC LDRB W8, [X22 + 0xCC9]
	0x01DEC1B0 MOV X20, X2
	0x01DEC1B4 MOV X21, X1
	0x01DEC1B8 MOV X19, X0
	0x01DEC1BC TBNZ X8, 0x0, 0x1DEC1E0
	0x01DEC1C0 ADRP X0, 0x230C000
	0x01DEC1C4 LDR X0, [X0 + 0xFE0]
	0x01DEC1C8 BL 0x1C16CF4
	0x01DEC1CC ADRP X0, 0x230C000
	0x01DEC1D0 LDR X0, [X0 + 0xFD8]
	0x01DEC1D4 BL 0x1C16CF4
	0x01DEC1D8 MOVZ W8, 0x1
	0x01DEC1DC STRB W8, [X22 + 0xCC9]
	0x01DEC1E0 STP X31, X31, [X31 + 0x20]
	0x01DEC1E4 STR X31, [X31 + 0x30]
	0x01DEC1E8 LDR X0, [X19 + 0xD8]
	0x01DEC1EC CBZ X0, 0x1DEC344
	0x01DEC1F0 ADRP X8, 0x230C000
	0x01DEC1F4 LDR X8, [X8 + 0xFE0]
	0x01DEC1F8 ADRP X22, 0x230C000
	0x01DEC1FC MOV X1, X21
	0x01DEC200 LDR X2, [X8]
	0x01DEC204 LDR X22, [X22 + 0xFD8]
	0x01DEC208 BL 0x301CD00
	0x01DEC20C MOV W21, W0
	0x01DEC210 ADD X8, X31, 0x8
	0x01DEC214 MOV X0, X19
	0x01DEC218 BL 0x1DEB578
	0x01DEC21C ADRP X23, 0x25EC000
	0x01DEC220 LDUR V0, [X31 + 0x8]
	0x01DEC224 LDR X8, [X31 + 0x18]
	0x01DEC228 LDRB W9, [X23 + 0x783]
	0x01DEC22C STR V0, [X31 + 0x2]
	0x01DEC230 STR X8, [X31 + 0x30]
	0x01DEC234 CBNZ W9, 0x1DEC24C
	0x01DEC238 ADRP X0, 0x2307000
	0x01DEC23C LDR X0, [X0 + 0x5A0]
	0x01DEC240 BL 0x1C16CF4
	0x01DEC244 MOVZ W8, 0x1
	0x01DEC248 STRB W8, [X23 + 0x783]
	0x01DEC24C ADRP X8, 0x2307000
	0x01DEC250 LDR X8, [X8 + 0x5A0]
	0x01DEC254 LDR X2, [X22]

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Compare X1, 0
	013 JumpIfEqual {111}
	014 Move X19, X0
	015 Move X0, X1
	016 Move X1, X31
	017 Move X20, X2
	018 Call Component.get_transform, X0
	019 Compare X0, 0
	020 JumpIfEqual {111}
	021 Move X1, X31
	022 Call Transform.get_position, X0
	023 Move X0, X19
	024 Move V8, V0
	025 Move V9, V1
	026 Move V10, V2
	027 Call ChickenController.get_nestPosition, X0
	028 Move X21, 0x25ED000
	029 Move W8, [X21+2140]
	030 Move V11, V0
	031 Move V12, V1
	032 Move V13, V2
	033 Compare W8, 0
	034 JumpIfNotEqual {40}
	035 Move X0, 0x2308000
	036 Move X0, [X0+1448]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X21+2140], W8
	040 Move X22, 0x2308000
	041 Move X22, [X22+1448]
	042 Subtract S11, S8, S11
	043 Subtract S9, S9, S12
	044 Subtract S8, S10, S13
	045 Move X0, [X22]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Multiply S0, S11, S11
	051 Multiply S1, S9, S9
	052 Add S0, S0, S1
	053 Multiply S1, S8, S8
	054 Add S0, S1, S0
	055 NotImplemented "Instruction FSQRT not yet implemented."
	056 Move [X31+60], S0
	057 Compare X20, 0
	058 JumpIfEqual {111}
	059 Move X0, X20
	060 Move X1, X31
	061 Call Component.get_transform, X0
	062 Compare X0, 0
	063 JumpIfEqual {111}
	064 Move X1, X31
	065 Call Transform.get_position, X0
	066 Move X0, X19
	067 Move V8, V0
	068 Move V9, V1
	069 Move V10, V2
	070 Call ChickenController.get_nestPosition, X0
	071 Move W8, [X21+2140]
	072 Move V11, V0
	073 Move V12, V1
	074 Move V13, V2
	075 Compare W8, 0
	076 JumpIfNotEqual {82}
	077 Move X0, 0x2308000
	078 Move X0, [X0+1448]
	079 Call 0x1C17CF4
	080 Move W8, 1
	081 Move [X21+2140], W8
	082 Move X0, [X22]
	083 Subtract S11, S8, S11
	084 Subtract S9, S9, S12
	085 Subtract S8, S10, S13
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Multiply S0, S11, S11
	091 Multiply S1, S9, S9
	092 Add S0, S0, S1
	093 Multiply S1, S8, S8
	094 Add S0, S1, S0
	095 NotImplemented "Instruction FSQRT not yet implemented."
	096 Add X0, X31, 60
	097 Move X1, X31
	098 Call Single.CompareTo, X0, V0
	099 Move X20, [X31+80]
	100 Move X19, [X31+88]
	101 Move X22, [X31+64]
	102 Move X21, [X31+72]
	103 Move X30, [X31+48]
	104 Move D9, [X31+32]
	105 Move D8, [X31+40]
	106 Move D11, [X31+16]
	107 Move D10, [X31+24]
	108 Move D13, [X31+96]
	109 Move D12, [X31+104]
	110 Return X0
	111 Call 0x1C17F20

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DEC258 ADD X0, X31, 0x20
	0x01DEC25C MOV W1, W21
	0x01DEC260 LDR X8, [X8]
	0x01DEC264 LDR X8, [X8 + 0xB8]
	0x01DEC268 LDP S0, S1, [X8]
	0x01DEC26C LDR V2, [X8 + 0x8]
	0x01DEC270 BL 0x2410098
	0x01DEC274 LDR X21, [X19 + 0xA8]
	0x01DEC278 CBZ X21, 0x1DEC2A8
	0x01DEC27C MOV X0, X19
	0x01DEC280 MOV X1, X31
	0x01DEC284 BL 0x3C32E90
	0x01DEC288 CBZ X0, 0x1DEC344
	0x01DEC28C MOV X1, X31
	0x01DEC290 BL 0x3C3F58C
	0x01DEC294 FMOV S3, 1
	0x01DEC298 MOVZ W1, 0x1
	0x01DEC29C MOV X0, X21
	0x01DEC2A0 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, W31
	004 Move X19, X0
	005 Call MobController.CopyBackingFieldsToState, X0, X1
	006 Move W1, [X19+420]
	007 Move X0, X19
	008 Call ChickenController.set_phase, X0, X1
	009 Move W1, [X19+424]
	010 Move X0, X19
	011 Call ChickenController.set_eggID, X0, X1
	012 Move V0, [X19+428]
	013 Move V1, [X19+432]
	014 Move V2, [X19+436]
	015 Move X0, X19
	016 Call ChickenController.set_nestPosition, X0, X1
	017 Move W1, [X19+440]
	018 Move X0, X19
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Call ChickenController.set__timerToSpawnEgg, X0, X1
	022 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DEC350 STP X20, X19, [X31 + 0x20]
	0x01DEC354 ADRP X22, 0x25EC000
	0x01DEC358 LDRB W8, [X22 + 0xCC8]
	0x01DEC35C MOV W21, W2
	0x01DEC360 MOV W20, W1
	0x01DEC364 MOV X19, X0
	0x01DEC368 TBNZ X8, 0x0, 0x1DEC3A4
	0x01DEC36C ADRP X0, 0x230C000
	0x01DEC370 LDR X0, [X0 + 0xFD0]
	0x01DEC374 BL 0x1C16CF4
	0x01DEC378 ADRP X0, 0x2309000
	0x01DEC37C LDR X0, [X0 + 0x9A0]
	0x01DEC380 BL 0x1C16CF4
	0x01DEC384 ADRP X0, 0x230A000
	0x01DEC388 LDR X0, [X0 + 0xA78]
	0x01DEC38C BL 0x1C16CF4
	0x01DEC390 ADRP X0, 0x230C000
	0x01DEC394 LDR X0, [X0 + 0xFE8]
	0x01DEC398 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobController.CopyStateToBackingFields, X0
	005 Move X0, X19
	006 Call ChickenController.get_phase, X0
	007 Move [X19+420], W0
	008 Move X0, X19
	009 Call ChickenController.get_eggID, X0
	010 Move [X19+424], W0
	011 Move X0, X19
	012 Call ChickenController.get_nestPosition, X0
	013 Move X0, X19
	014 Move [X19+428], S0
	015 Move [X19+432], S1
	016 Move [X19+436], S2
	017 Call ChickenController.get__timerToSpawnEgg, X0
	018 Move [X19+440], W0
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Return 

