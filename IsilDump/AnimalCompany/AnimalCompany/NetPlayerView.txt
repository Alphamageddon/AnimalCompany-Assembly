Type: AnimalCompany.NetPlayerView

Method: System.Void Setup()

Disassembly:
	0x01CBB6B0 CBZ X0, 0x1CBB6E0
	0x01CBB6B4 LDR X1, [X23]
	0x01CBB6B8 LDR X8, [X0]
	0x01CBB6BC CMP X8, X1
	0x01CBB6C0 B.NE 0x1CBB6DC
	0x01CBB6C4 LDR X8, [X22]
	0x01CBB6C8 LDR X8, [X8 + 0xB8]
	0x01CBB6CC STR X0, [X8 + 0x8]
	0x01CBB6D0 LDR X8, [X0]
	0x01CBB6D4 CMP X8, X1
	0x01CBB6D8 B.EQ 0x1CBB6EC
	0x01CBB6DC BL 0x1B6ECDC
	0x01CBB6E0 LDR X8, [X22]
	0x01CBB6E4 LDR X8, [X8 + 0xB8]
	0x01CBB6E8 STR X0, [X8 + 0x8]
	0x01CBB6EC ADRP X8, 0x2292000
	0x01CBB6F0 LDR X8, [X8 + 0xB90]
	0x01CBB6F4 ADRP X20, 0x2294000
	0x01CBB6F8 ADRP X21, 0x2292000
	0x01CBB6FC LDR X0, [X8]
	0x01CBB700 LDR X20, [X20 + 0x48]
	0x01CBB704 LDR X21, [X21 + 0x4E8]
	0x01CBB708 BL 0x1B6EA0C
	0x01CBB70C LDR X2, [X20]
	0x01CBB710 MOV X1, X19
	0x01CBB714 MOV X3, X31
	0x01CBB718 MOV X20, X0
	0x01CBB71C BL 0x342E500
	0x01CBB720 LDR X0, [X21]
	0x01CBB724 LDR W8, [X0 + 0xE0]
	0x01CBB728 CBNZ W8, 0x1CBB730
	0x01CBB72C BL 0x1B6E8F8
	0x01CBB730 MOV X0, X20
	0x01CBB734 LDP X20, X19, [X31 + 0x20]
	0x01CBB738 LDP X22, X21, [X31 + 0x10]
	0x01CBB73C MOV X1, X31
	0x01CBB740 LDP X30, X23, [X31], #0x30
	0x01CBB744 B 0x1C8D564
	0x01CBB748 BL 0x1B6EA1C
	0x01CBB74C STP X30, X21, [X31 - 0x20]!
	0x01CBB750 STP X20, X19, [X31 + 0x10]
	0x01CBB754 ADRP X21, 0x2568000
	0x01CBB758 ADRP X20, 0x2292000
	0x01CBB75C LDRB W8, [X21 + 0x524]
	0x01CBB760 LDR X20, [X20 + 0x4E8]
	0x01CBB764 MOV X19, X0
	0x01CBB768 TBNZ X8, 0x0, 0x1CBB78C
	0x01CBB76C ADRP X0, 0x2292000
	0x01CBB770 LDR X0, [X0 + 0x4E8]
	0x01CBB774 BL 0x1B6E7F0
	0x01CBB778 ADRP X0, 0x2292000
	0x01CBB77C LDR X0, [X0 + 0xD00]
	0x01CBB780 BL 0x1B6E7F0
	0x01CBB784 MOVZ W8, 0x1
	0x01CBB788 STRB W8, [X21 + 0x524]
	0x01CBB78C LDR X0, [X20]
	0x01CBB790 LDR W8, [X0 + 0xE0]
	0x01CBB794 CBNZ W8, 0x1CBB79C
	0x01CBB798 BL 0x1B6E8F8
	0x01CBB79C ADRP X21, 0x2568000
	0x01CBB7A0 LDRB W8, [X21 + 0x443]
	0x01CBB7A4 CBNZ W8, 0x1CBB7BC
	0x01CBB7A8 ADRP X0, 0x2292000
	0x01CBB7AC LDR X0, [X0 + 0x4E8]
	0x01CBB7B0 BL 0x1B6E7F0
	0x01CBB7B4 MOVZ W8, 0x1
	0x01CBB7B8 STRB W8, [X21 + 0x443]
	0x01CBB7BC LDR X0, [X20]
	0x01CBB7C0 LDR W8, [X0 + 0xE0]
	0x01CBB7C4 CBNZ W8, 0x1CBB7D0
	0x01CBB7C8 BL 0x1B6E8F8
	0x01CBB7CC LDR X0, [X20]
	0x01CBB7D0 LDR X8, [X0 + 0xB8]
	0x01CBB7D4 LDR X8, [X8]
	0x01CBB7D8 CBZ X8, 0x1CBB810
	0x01CBB7DC ADRP X9, 0x2292000
	0x01CBB7E0 LDR X9, [X9 + 0xD00]
	0x01CBB7E4 LDR X0, [X8 + 0x60]
	0x01CBB7E8 LDR X1, [X9]
	0x01CBB7EC BL 0x24B9848
	0x01CBB7F0 TBZ X0, 0x0, 0x1CBB804
	0x01CBB7F4 MOV X0, X19
	0x01CBB7F8 LDP X20, X19, [X31 + 0x10]
	0x01CBB7FC LDP X30, X21, [X31], #0x20
	0x01CBB800 B 0x1CBB814

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x2569000
	013 Move W8, [X20+1304]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0x2294000
	020 Move X0, [X0+4064]
	021 Call 0x1B6F7F0
	022 Move X0, 0x2294000
	023 Move X0, [X0+4072]
	024 Call 0x1B6F7F0
	025 Move X0, 0x2294000
	026 Move X0, [X0+4080]
	027 Call 0x1B6F7F0
	028 Move W8, 1
	029 Move [X20+1304], W8
	030 Move [X31+8], X31
	031 Move X23, [X19+32]
	032 Compare X23, 0
	033 JumpIfEqual {101}
	034 Move W8, [X23+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X25, 0x2294000
	037 Move X26, 0x2294000
	038 Move X27, 0x2294000
	039 Move X25, [X25+4072]
	040 Move X26, [X26+4080]
	041 Move X27, [X27+4064]
	042 Move W24, W31
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add X8, X23, W24
	045 Move X20, [X8+32]
	046 Compare X20, 0
	047 JumpIfEqual {101}
	048 Move X21, [X19+120]
	049 Move X0, X20
	050 Move X1, X31
	051 Call Renderer.get_sharedMaterial, X0
	052 Compare X21, 0
	053 JumpIfEqual {101}
	054 Move X3, [X25]
	055 Move X1, X0
	056 Add X2, X31, 8
	057 Move X0, X21
	058 Call Dictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {82}
	063 Move X0, X20
	064 Move X1, X31
	065 Call Renderer.get_sharedMaterial, X0
	066 Move X8, [X26]
	067 Move X21, X0
	068 Move X0, X8
	069 Call 0x1B6FA0C
	070 Move X1, X21
	071 Move X2, X31
	072 Move X22, X0
	073 Call Material..ctor, X0, X1
	074 Move [X31+8], X22
	075 Move X0, [X19+120]
	076 Compare X0, 0
	077 JumpIfEqual {101}
	078 Move X3, [X27]
	079 Move X1, X21
	080 Move X2, X22
	081 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	082 Move X1, [X31+8]
	083 Move X0, X20
	084 Move X2, X31
	085 Call Renderer.set_sharedMaterial, X0, X1
	086 Move W8, [X23+24]
	087 Add W24, W24, 1
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X20, [X31+80]
	090 Move X19, [X31+88]
	091 Move X22, [X31+64]
	092 Move X21, [X31+72]
	093 Move X24, [X31+48]
	094 Move X23, [X31+56]
	095 Move X26, [X31+32]
	096 Move X25, [X31+40]
	097 Move X30, [X31+16]
	098 Move X27, [X31+24]
	099 Add X31, X31, 96
	100 Return 
	101 Call 0x1B6FA1C
	102 Call 0x1B6FA24

Method: System.Void UpdateBodyView()

Disassembly:
	0x01CBB804 LDP X20, X19, [X31 + 0x10]
	0x01CBB808 LDP X30, X21, [X31], #0x20
	0x01CBB80C RET
	0x01CBB810 BL 0x1B6EA1C
	0x01CBB814 STP X30, X19, [X31 - 0x10]!
	0x01CBB818 MOV X19, X0
	0x01CBB81C BL 0x1CBBE14
	0x01CBB820 CBZ X19, 0x1CBB874
	0x01CBB824 LDRB W8, [X19 + 0x48]
	0x01CBB828 MOV X0, X19
	0x01CBB82C MOV X2, X31
	0x01CBB830 CMP W8, 0x0
	0x01CBB834 MOVZ W8, 0x1
	0x01CBB838 CINC W1, W8, EQ
	0x01CBB83C BL 0x1CBC0B8
	0x01CBB840 MOV X1, X0
	0x01CBB844 MOV X0, X19
	0x01CBB848 MOV X2, X31
	0x01CBB84C BL 0x3A9E9B0
	0x01CBB850 LDR V0, [X19 + 0xC0]
	0x01CBB854 FMOV S1, 2
	0x01CBB858 FADD S0, S0, S0
	0x01CBB85C FMAX S0, S0, S1
	0x01CBB860 FMOV S1, 30
	0x01CBB864 FMIN S0, S0, S1
	0x01CBB868 STR S0, [X19 + 0xC0]
	0x01CBB86C LDP X30, X19, [X31], #0x10
	0x01CBB870 RET
	0x01CBB874 BL 0x1B6EA1C
	0x01CBB878 LDR X1, [X0 + 0x50]
	0x01CBB87C B 0x1CBB880
	0x01CBB880 STR X30, [X31 - 0x20]!
	0x01CBB884 STP X20, X19, [X31 + 0x10]
	0x01CBB888 MOV X19, X0
	0x01CBB88C LDR X0, [X0 + 0x98]
	0x01CBB890 CBZ X0, 0x1CBB900
	0x01CBB894 MOV X20, X1
	0x01CBB898 MOV X1, X31
	0x01CBB89C BL 0x1D874EC
	0x01CBB8A0 CMP W0, 0x3
	0x01CBB8A4 B.EQ 0x1CBB8D8
	0x01CBB8A8 CMP W0, 0x2
	0x01CBB8AC B.NE 0x1CBB8EC
	0x01CBB8B0 LDR X0, [X19 + 0x98]
	0x01CBB8B4 STR X20, [X19 + 0x50]
	0x01CBB8B8 CBZ X0, 0x1CBB900
	0x01CBB8BC MOVZ W1, 0x1
	0x01CBB8C0 MOV W2, W31
	0x01CBB8C4 MOV W3, W31
	0x01CBB8C8 MOV X4, X31
	0x01CBB8CC MOVZ W19, 0x1
	0x01CBB8D0 BL 0x1D87A24
	0x01CBB8D4 B 0x1CBB8F0
	0x01CBB8D8 MOV X0, X19
	0x01CBB8DC STR X20, [X19 + 0x50]
	0x01CBB8E0 BL 0x1CBB814
	0x01CBB8E4 MOVZ W19, 0x1
	0x01CBB8E8 B 0x1CBB8F0
	0x01CBB8EC MOV W19, W31
	0x01CBB8F0 MOV W0, W19
	0x01CBB8F4 LDP X20, X19, [X31 + 0x10]
	0x01CBB8F8 LDR X30, [X31], #0x20
	0x01CBB8FC RET
	0x01CBB900 BL 0x1B6EA1C
	0x01CBB904 SUB X31, X31, 0x80
	0x01CBB908 STP X30, X25, [X31 + 0x40]
	0x01CBB90C STP X24, X23, [X31 + 0x50]
	0x01CBB910 STP X22, X21, [X31 + 0x60]
	0x01CBB914 STP X20, X19, [X31 + 0x70]
	0x01CBB918 ADRP X20, 0x2568000
	0x01CBB91C ADRP X24, 0x2292000
	0x01CBB920 LDRB W8, [X20 + 0x525]
	0x01CBB924 LDR X24, [X24 + 0x478]
	0x01CBB928 MOV X19, X0
	0x01CBB92C TBNZ X8, 0x0, 0x1CBB9A4
	0x01CBB930 ADRP X0, 0x2294000
	0x01CBB934 LDR X0, [X0 + 0x60]
	0x01CBB938 BL 0x1B6E7F0
	0x01CBB93C ADRP X0, 0x2294000
	0x01CBB940 LDR X0, [X0 + 0x68]
	0x01CBB944 BL 0x1B6E7F0
	0x01CBB948 ADRP X0, 0x2294000
	0x01CBB94C LDR X0, [X0 + 0x70]
	0x01CBB950 BL 0x1B6E7F0
	0x01CBB954 ADRP X0, 0x2294000
	0x01CBB958 LDR X0, [X0 + 0x78]
	0x01CBB95C BL 0x1B6E7F0
	0x01CBB960 ADRP X0, 0x2294000
	0x01CBB964 LDR X0, [X0 + 0x80]
	0x01CBB968 BL 0x1B6E7F0
	0x01CBB96C ADRP X0, 0x2294000
	0x01CBB970 LDR X0, [X0 + 0x88]
	0x01CBB974 BL 0x1B6E7F0
	0x01CBB978 ADRP X0, 0x2294000
	0x01CBB97C LDR X0, [X0 + 0x90]
	0x01CBB980 BL 0x1B6E7F0
	0x01CBB984 ADRP X0, 0x2292000
	0x01CBB988 LDR X0, [X0 + 0x478]
	0x01CBB98C BL 0x1B6E7F0
	0x01CBB990 ADRP X0, 0x2293000
	0x01CBB994 LDR X0, [X0 + 0x4A8]
	0x01CBB998 BL 0x1B6E7F0
	0x01CBB99C MOVZ W8, 0x1
	0x01CBB9A0 STRB W8, [X20 + 0x525]
	0x01CBB9A4 LDR X0, [X24]
	0x01CBB9A8 STRB W31, [X31 + 0x3C]
	0x01CBB9AC STP X31, X31, [X31 + 0x20]
	0x01CBB9B0 STR X31, [X31 + 0x30]
	0x01CBB9B4 STR X31, [X31 + 0x18]
	0x01CBB9B8 LDR W8, [X0 + 0xE0]
	0x01CBB9BC LDR X20, [X19 + 0x98]
	0x01CBB9C0 CBNZ W8, 0x1CBB9C8
	0x01CBB9C4 BL 0x1B6E8F8
	0x01CBB9C8 MOV X0, X20
	0x01CBB9CC MOV X1, X31
	0x01CBB9D0 MOV X2, X31
	0x01CBB9D4 BL 0x3AA0AF0
	0x01CBB9D8 TBNZ X0, 0x0, 0x1CBBC14
	0x01CBB9DC LDR X0, [X19 + 0x98]
	0x01CBB9E0 CBZ X0, 0x1CBBC30
	0x01CBB9E4 MOV X1, X31
	0x01CBB9E8 BL 0x1D869B8
	0x01CBB9EC TBZ X0, 0x0, 0x1CBBB58
	0x01CBB9F0 LDR X0, [X19 + 0xA8]
	0x01CBB9F4 CBZ X0, 0x1CBBC30
	0x01CBB9F8 LDRB W8, [X0 + 0x20]
	0x01CBB9FC CBZ W8, 0x1CBBB58
	0x01CBBA00 MOV X1, X31
	0x01CBBA04 BL 0x34B53AC
	0x01CBBA08 MOVZ W8, 0x2711
	0x01CBBA0C CMP X0, X8
	0x01CBBA10 B.LT 0x1CBBB58
	0x01CBBA14 LDR X0, [X19 + 0xA8]
	0x01CBBA18 CBZ X0, 0x1CBBC30
	0x01CBBA1C MOV X1, X31
	0x01CBBA20 BL 0x34B5504
	0x01CBBA24 LDR X0, [X19 + 0xA8]
	0x01CBBA28 CBZ X0, 0x1CBBC30
	0x01CBBA2C MOV X1, X31
	0x01CBBA30 BL 0x34B54F8
	0x01CBBA34 LDR X20, [X19 + 0x88]
	0x01CBBA38 STRB W31, [X31 + 0x3C]
	0x01CBBA3C ADD X1, X31, 0x3C
	0x01CBBA40 MOV X0, X20
	0x01CBBA44 MOV X2, X31
	0x01CBBA48 BL 0x3247FB8
	0x01CBBA4C LDR X0, [X19 + 0x88]
	0x01CBBA50 CBZ X0, 0x1CBBC40
	0x01CBBA54 ADRP X8, 0x2294000
	0x01CBBA58 LDR X8, [X8 + 0x90]
	0x01CBBA5C LDR X1, [X8]
	0x01CBBA60 ADD X8, X31, 0x0
	0x01CBBA64 BL 0x2DDDB08
	0x01CBBA68 LDR V0, [X31]
	0x01CBBA6C LDR X8, [X31 + 0x10]
	0x01CBBA70 ADRP X22, 0x2294000
	0x01CBBA74 ADRP X23, 0x2294000
	0x01CBBA78 LDR X22, [X22 + 0x78]
	0x01CBBA7C LDR X23, [X23 + 0x68]
	0x01CBBA80 STR V0, [X31 + 0x2]
	0x01CBBA84 STR X8, [X31 + 0x30]
	0x01CBBA88 ADRP X25, 0x2294000
	0x01CBBA8C LDR X25, [X25 + 0x60]
	0x01CBBA90 LDR X1, [X22]
	0x01CBBA94 ADD X0, X31, 0x20
	0x01CBBA98 BL 0x2A0E7AC
	0x01CBBA9C TBZ X0, 0x0, 0x1CBBAE4
	0x01CBBAA0 LDR X0, [X19 + 0x80]
	0x01CBBAA4 CBZ X0, 0x1CBBC2C
	0x01CBBAA8 LDR W21, [X31 + 0x30]
	0x01CBBAAC LDR X3, [X23]
	0x01CBBAB0 ADD X2, X31, 0x18
	0x01CBBAB4 MOV W1, W21
	0x01CBBAB8 BL 0x286A69C
	0x01CBBABC TBZ X0, 0x0, 0x1CBBA90
	0x01CBBAC0 LDR X1, [X19 + 0x98]
	0x01CBBAC4 LDR X2, [X31 + 0x18]
	0x01CBBAC8 BL 0x1CBBD30
	0x01CBBACC LDR X0, [X19 + 0x80]
	0x01CBBAD0 CBZ X0, 0x1CBBC34
	0x01CBBAD4 LDR X2, [X25]
	0x01CBBAD8 MOV W1, W21
	0x01CBBADC BL 0x286A078
	0x01CBBAE0 B 0x1CBBA90
	0x01CBBAE4 MOV X21, X31
	0x01CBBAE8 MOVZ W23, 0x6
	0x01CBBAEC ADRP X8, 0x2294000
	0x01CBBAF0 LDR X8, [X8 + 0x70]
	0x01CBBAF4 LDR X1, [X8]
	0x01CBBAF8 ADD X0, X31, 0x20
	0x01CBBAFC BL 0x2A0E7A8
	0x01CBBB00 CBNZ X21, 0x1CBBC44
	0x01CBBB04 CMP W23, 0x6
	0x01CBBB08 B.EQ 0x1CBBB10
	0x01CBBB0C CBNZ W23, 0x1CBBB30
	0x01CBBB10 LDR X8, [X19 + 0x88]
	0x01CBBB14 CBZ X8, 0x1CBBC4C
	0x01CBBB18 LDR W9, [X8 + 0x1C]
	0x01CBBB1C MOV X22, X31
	0x01CBBB20 MOVZ W23, 0x3
	0x01CBBB24 ADD W9, W9, 0x1
	0x01CBBB28 STP W31, W9, [X8 + 0x18]
	0x01CBBB2C B 0x1CBBB34
	0x01CBBB30 MOV X22, X31
	0x01CBBB34 LDRB W8, [X31 + 0x3C]
	0x01CBBB38 CBZ W8, 0x1CBBB48
	0x01CBBB3C MOV X0, X20
	0x01CBBB40 MOV X1, X31
	0x01CBBB44 BL 0x324AE50
	0x01CBBB48 CBNZ X22, 0x1CBBC38
	0x01CBBB4C CMP W23, 0x3
	0x01CBBB50 B.EQ 0x1CBBB58
	0x01CBBB54 CBNZ W23, 0x1CBBC14
	0x01CBBB58 LDR X0, [X19 + 0x38]
	0x01CBBB5C CBZ X0, 0x1CBBC30
	0x01CBBB60 MOV X1, X31
	0x01CBBB64 BL 0x1D87528
	0x01CBBB68 ADRP X21, 0x2293000
	0x01CBBB6C LDR X21, [X21 + 0x4A8]
	0x01CBBB70 MOV X20, X0
	0x01CBBB74 LDR X8, [X21]
	0x01CBBB78 LDR W9, [X8 + 0xE0]
	0x01CBBB7C CBZ W9, 0x1CBBB88
	0x01CBBB80 CBNZ W20, 0x1CBBB94
	0x01CBBB84 B 0x1CBBC14
	0x01CBBB88 MOV X0, X8
	0x01CBBB8C BL 0x1B6E8F8
	0x01CBBB90 CBZ W20, 0x1CBBC14
	0x01CBBB94 LDR X0, [X19 + 0x38]
	0x01CBBB98 CBZ X0, 0x1CBBC30
	0x01CBBB9C MOV X1, X31
	0x01CBBBA0 BL 0x1D87528
	0x01CBBBA4 LDR X8, [X21]
	0x01CBBBA8 MOV X20, X0
	0x01CBBBAC LDR W9, [X8 + 0xE0]
	0x01CBBBB0 CBNZ W9, 0x1CBBBBC
	0x01CBBBB4 MOV X0, X8
	0x01CBBBB8 BL 0x1B6E8F8
	0x01CBBBBC CMP W20, 0x1
	0x01CBBBC0 B.LT 0x1CBBC14
	0x01CBBBC4 LDR X0, [X24]
	0x01CBBBC8 LDR X20, [X19 + 0xA0]
	0x01CBBBCC LDR W8, [X0 + 0xE0]
	0x01CBBBD0 CBNZ W8, 0x1CBBBD8
	0x01CBBBD4 BL 0x1B6E8F8
	0x01CBBBD8 MOV X0, X20
	0x01CBBBDC MOV X1, X31
	0x01CBBBE0 MOV X2, X31
	0x01CBBBE4 BL 0x3A9D6EC
	0x01CBBBE8 TBZ X0, 0x0, 0x1CBBC14
	0x01CBBBEC LDR X0, [X19 + 0xA0]
	0x01CBBBF0 CBZ X0, 0x1CBBC30
	0x01CBBBF4 MOV X1, X31
	0x01CBBBF8 BL 0x33DC828
	0x01CBBBFC CMP W0, 0xE
	0x01CBBC00 B.NE 0x1CBBC14
	0x01CBBC04 LDR X0, [X19 + 0xA0]
	0x01CBBC08 CBZ X0, 0x1CBBC30
	0x01CBBC0C MOV X1, X31
	0x01CBBC10 BL 0x33DAC80
	0x01CBBC14 LDP X20, X19, [X31 + 0x70]
	0x01CBBC18 LDP X22, X21, [X31 + 0x60]
	0x01CBBC1C LDP X24, X23, [X31 + 0x50]
	0x01CBBC20 LDP X30, X25, [X31 + 0x40]
	0x01CBBC24 ADD X31, X31, 0x80
	0x01CBBC28 RET
	0x01CBBC2C BL 0x1B6EA1C
	0x01CBBC30 BL 0x1B6EA1C
	0x01CBBC34 BL 0x1B6EA1C
	0x01CBBC38 MOV X0, X22
	0x01CBBC3C BL 0x1B6EA14
	0x01CBBC40 BL 0x1B6EA1C
	0x01CBBC44 MOV X0, X21
	0x01CBBC48 BL 0x1B6EA14
	0x01CBBC4C BL 0x1B6EA1C
	0x01CBBC50 B 0x1CBBC60
	0x01CBBC54 B 0x1CBBC60
	0x01CBBC58 B 0x1CBBC60
	0x01CBBC5C B 0x1CBBC60
	0x01CBBC60 MOV X22, X1
	0x01CBBC64 MOV X23, X0
	0x01CBBC68 B 0x1CBBCC4

ISIL:
	001 Move [X31-112], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X24
	010 Move [X31+72], X23
	011 Move [X31+80], X22
	012 Move [X31+88], X21
	013 Move [X31+96], X20
	014 Move [X31+104], X19
	015 Move X19, X0
	016 Move X0, [X0+40]
	017 Compare X0, 0
	018 JumpIfEqual {322}
	019 Move X20, [X19+64]
	020 Move X1, X31
	021 Call Transform.get_position, X0
	022 Move X0, [X19+40]
	023 Compare X0, 0
	024 JumpIfEqual {322}
	025 Move X1, X31
	026 Move V8, V0
	027 Move V9, V1
	028 Move V10, V2
	029 Call Transform.get_up, X0
	030 Compare X20, 0
	031 JumpIfEqual {322}
	032 Move X8, -18944000
	033 Move V3, [X8+2352]
	034 Move X0, X20
	035 Move X1, X31
	036 Multiply S2, S2, S3
	037 Multiply S1, S1, S3
	038 Multiply S0, S0, S3
	039 Subtract S2, S10, S2
	040 Subtract S1, S9, S1
	041 Subtract S0, S8, S0
	042 Call Transform.set_position, X0, X1
	043 Move X0, [X19+40]
	044 Compare X0, 0
	045 JumpIfEqual {322}
	046 Move X1, X31
	047 Call Transform.get_forward, X0
	048 Move X22, 0x2569000
	049 Move W8, [X22+1089]
	050 Move V8, V0
	051 Move V9, V2
	052 Compare W8, 0
	053 JumpIfNotEqual {59}
	054 Move X0, 0x2293000
	055 Move X0, [X0+1160]
	056 Call 0x1B6F7F0
	057 Move W8, 1
	058 Move [X22+1089], W8
	059 Move X23, 0x2293000
	060 Move X23, [X23+1160]
	061 Move X0, [X23]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1B6F8F8
	066 Move X8, -18944000
	067 Multiply S1, S8, S8
	068 Move S0, W31
	069 Move V11, [X8+2916]
	070 Move X21, 0x2293000
	071 Add S1, S1, S0
	072 Multiply S2, S9, S9
	073 Move X21, [X21+1152]
	074 Add S1, S2, S1
	075 NotImplemented "Instruction FSQRT not yet implemented."
	076 NotImplemented "Instruction FCMP not yet implemented."
	077 NotImplemented "Instruction FDIV not yet implemented."
	078 NotImplemented "Instruction FDIV not yet implemented."
	079 NotImplemented "Instruction FDIV not yet implemented."
	080 Move X20, 0x2569000
	081 Move W8, [X20+1087]
	082 Compare W8, 0
	083 JumpIfNotEqual {89}
	084 Move X0, 0x2293000
	085 Move X0, [X0+1152]
	086 Call 0x1B6F7F0
	087 Move W8, 1
	088 Move [X20+1087], W8
	089 Move X8, [X21]
	090 Move X8, [X8+184]
	091 Move S8, [X8]
	092 Move S10, [X8+4]
	093 Move V9, [X8+8]
	094 Move X24, 0x2569000
	095 Move W8, [X24+1090]
	096 Move X20, [X19+64]
	097 Compare W8, 0
	098 JumpIfNotEqual {104}
	099 Move X0, 0x2293000
	100 Move X0, [X0+1152]
	101 Call 0x1B6F7F0
	102 Move W8, 1
	103 Move [X24+1090], W8
	104 Move X8, [X21]
	105 Move V0, V8
	106 Move V1, V10
	107 Move V2, V9
	108 Move X8, [X8+184]
	109 Move X0, X31
	110 Move S3, [X8+24]
	111 Move S4, [X8+28]
	112 Move V5, [X8+32]
	113 Call Quaternion.LookRotation, X0, X1
	114 Compare X20, 0
	115 JumpIfEqual {322}
	116 Move X0, X20
	117 Move X1, X31
	118 Call Transform.set_rotation, X0, X1
	119 Move X0, [X19+48]
	120 Compare X0, 0
	121 JumpIfEqual {322}
	122 Move X20, [X19+72]
	123 Move X1, X31
	124 Call Transform.get_position, X0
	125 Compare X20, 0
	126 JumpIfEqual {322}
	127 Move X0, X20
	128 Move X1, X31
	129 Call Transform.set_position, X0, X1
	130 Move X0, [X19+72]
	131 Compare X0, 0
	132 JumpIfEqual {322}
	133 Move X1, X31
	134 Call Transform.get_position, X0
	135 Move X0, [X19+88]
	136 Compare X0, 0
	137 JumpIfEqual {322}
	138 Move X1, X31
	139 Move V8, V0
	140 Move V9, V1
	141 Move V10, V2
	142 Call Transform.get_position, X0
	143 Move X0, [X19+48]
	144 Compare X0, 0
	145 JumpIfEqual {322}
	146 Move X1, X31
	147 Subtract S12, S10, S2
	148 Subtract S13, S9, S1
	149 Subtract S14, S8, S0
	150 Call Transform.get_forward, X0
	151 Move W8, [X22+1089]
	152 Move V8, V0
	153 Move V9, V1
	154 Move V10, V2
	155 Compare W8, 0
	156 JumpIfNotEqual {162}
	157 Move X0, 0x2293000
	158 Move X0, [X0+1160]
	159 Call 0x1B6F7F0
	160 Move W8, 1
	161 Move [X22+1089], W8
	162 Move X0, [X23]
	163 Add S8, S14, S8
	164 Add S9, S13, S9
	165 Add S10, S12, S10
	166 Move W8, [X0+224]
	167 Compare W8, 0
	168 JumpIfNotEqual {170}
	169 Call 0x1B6F8F8
	170 Multiply S0, S8, S8
	171 Multiply S1, S9, S9
	172 Add S0, S0, S1
	173 Multiply S1, S10, S10
	174 Add S0, S1, S0
	175 NotImplemented "Instruction FSQRT not yet implemented."
	176 NotImplemented "Instruction FCMP not yet implemented."
	177 NotImplemented "Instruction FDIV not yet implemented."
	178 NotImplemented "Instruction FDIV not yet implemented."
	179 NotImplemented "Instruction FDIV not yet implemented."
	180 Move X20, 0x2569000
	181 Move W8, [X20+1087]
	182 Compare W8, 0
	183 JumpIfNotEqual {189}
	184 Move X0, 0x2293000
	185 Move X0, [X0+1152]
	186 Call 0x1B6F7F0
	187 Move W8, 1
	188 Move [X20+1087], W8
	189 Move X8, [X21]
	190 Move X8, [X8+184]
	191 Move S8, [X8]
	192 Move S9, [X8+4]
	193 Move V10, [X8+8]
	194 Move X0, [X19+48]
	195 Compare X0, 0
	196 JumpIfEqual {322}
	197 Move X20, [X19+72]
	198 Move X1, X31
	199 Call Transform.get_right, X0
	200 NotImplemented "Instruction FNEG not yet implemented."
	201 NotImplemented "Instruction FNEG not yet implemented."
	202 NotImplemented "Instruction FNEG not yet implemented."
	203 Move V0, V8
	204 Move V1, V9
	205 Move V2, V10
	206 Move X0, X31
	207 Call Quaternion.LookRotation, X0, X1
	208 Compare X20, 0
	209 JumpIfEqual {322}
	210 Move X0, X20
	211 Move X1, X31
	212 Call Transform.set_rotation, X0, X1
	213 Move X0, [X19+56]
	214 Compare X0, 0
	215 JumpIfEqual {322}
	216 Move X20, [X19+80]
	217 Move X1, X31
	218 Call Transform.get_position, X0
	219 Compare X20, 0
	220 JumpIfEqual {322}
	221 Move X0, X20
	222 Move X1, X31
	223 Call Transform.set_position, X0, X1
	224 Move X0, [X19+80]
	225 Compare X0, 0
	226 JumpIfEqual {322}
	227 Move X1, X31
	228 Call Transform.get_position, X0
	229 Move X0, [X19+96]
	230 Compare X0, 0
	231 JumpIfEqual {322}
	232 Move X1, X31
	233 Move V8, V0
	234 Move V9, V1
	235 Move V10, V2
	236 Call Transform.get_position, X0
	237 Move X0, [X19+56]
	238 Compare X0, 0
	239 JumpIfEqual {322}
	240 Move X1, X31
	241 Subtract S12, S10, S2
	242 Subtract S13, S9, S1
	243 Subtract S14, S8, S0
	244 Call Transform.get_forward, X0
	245 Move W8, [X22+1089]
	246 Move V8, V0
	247 Move V9, V1
	248 Move V10, V2
	249 Compare W8, 0
	250 JumpIfNotEqual {256}
	251 Move X0, 0x2293000
	252 Move X0, [X0+1160]
	253 Call 0x1B6F7F0
	254 Move W8, 1
	255 Move [X22+1089], W8
	256 Move X0, [X23]
	257 Add S8, S14, S8
	258 Add S9, S13, S9
	259 Add S10, S12, S10
	260 Move W8, [X0+224]
	261 Compare W8, 0
	262 JumpIfNotEqual {264}
	263 Call 0x1B6F8F8
	264 Multiply S0, S8, S8
	265 Multiply S1, S9, S9
	266 Add S0, S0, S1
	267 Multiply S1, S10, S10
	268 Add S0, S1, S0
	269 NotImplemented "Instruction FSQRT not yet implemented."
	270 NotImplemented "Instruction FCMP not yet implemented."
	271 NotImplemented "Instruction FDIV not yet implemented."
	272 NotImplemented "Instruction FDIV not yet implemented."
	273 NotImplemented "Instruction FDIV not yet implemented."
	274 Move X20, 0x2569000
	275 Move W8, [X20+1087]
	276 Compare W8, 0
	277 JumpIfNotEqual {283}
	278 Move X0, 0x2293000
	279 Move X0, [X0+1152]
	280 Call 0x1B6F7F0
	281 Move W8, 1
	282 Move [X20+1087], W8
	283 Move X8, [X21]
	284 Move X8, [X8+184]
	285 Move S8, [X8]
	286 Move S9, [X8+4]
	287 Move V10, [X8+8]
	288 Move X0, [X19+56]
	289 Compare X0, 0
	290 JumpIfEqual {322}
	291 Move X19, [X19+80]
	292 Move X1, X31
	293 Call Transform.get_right, X0
	294 NotImplemented "Instruction FNEG not yet implemented."
	295 NotImplemented "Instruction FNEG not yet implemented."
	296 NotImplemented "Instruction FNEG not yet implemented."
	297 Move V0, V8
	298 Move V1, V9
	299 Move V2, V10
	300 Move X0, X31
	301 Call Quaternion.LookRotation, X0, X1
	302 Compare X19, 0
	303 JumpIfEqual {322}
	304 Move X0, X19
	305 Move X20, [X31+96]
	306 Move X19, [X31+104]
	307 Move X22, [X31+80]
	308 Move X21, [X31+88]
	309 Move X24, [X31+64]
	310 Move X23, [X31+72]
	311 Move X30, [X31+56]
	312 Move D9, [X31+40]
	313 Move D8, [X31+48]
	314 Move D11, [X31+24]
	315 Move D10, [X31+32]
	316 Move D13, [X31+8]
	317 Move D12, [X31+16]
	318 Move X1, X31
	319 Move V14, [X31+112]
	320 Call Transform.set_rotation, X0, X1
	321 Return 
	322 Call 0x1B6FA1C

Method: System.Void SetColor(UnityEngine.Color color)

Disassembly:
	0x01CBBC6C B 0x1CBBC80
	0x01CBBC70 B 0x1CBBC80
	0x01CBBC74 B 0x1CBBC80
	0x01CBBC78 B 0x1CBBC80
	0x01CBBC7C B 0x1CBBC80
	0x01CBBC80 MOV X22, X1
	0x01CBBC84 MOV X23, X0
	0x01CBBC88 CMP W22, 0x1
	0x01CBBC8C B.NE 0x1CBBCA8
	0x01CBBC90 MOV X0, X23
	0x01CBBC94 BL 0x3D19840
	0x01CBBC98 LDR X21, [X0]
	0x01CBBC9C BL 0x3D19850
	0x01CBBCA0 MOV W23, W31
	0x01CBBCA4 B 0x1CBBAEC
	0x01CBBCA8 MOV X21, X31
	0x01CBBCAC ADRP X8, 0x2294000
	0x01CBBCB0 LDR X8, [X8 + 0x70]
	0x01CBBCB4 LDR X1, [X8]
	0x01CBBCB8 ADD X0, X31, 0x20
	0x01CBBCBC BL 0x2A0E7A8
	0x01CBBCC0 CBNZ X21, 0x1CBBCEC
	0x01CBBCC4 CMP W22, 0x1
	0x01CBBCC8 B.NE 0x1CBBCE4
	0x01CBBCCC MOV X0, X23
	0x01CBBCD0 BL 0x3D19840
	0x01CBBCD4 LDR X22, [X0]
	0x01CBBCD8 BL 0x3D19850
	0x01CBBCDC MOV W23, W31
	0x01CBBCE0 B 0x1CBBB34
	0x01CBBCE4 MOV X22, X31
	0x01CBBCE8 B 0x1CBBD04
	0x01CBBCEC MOV X0, X21
	0x01CBBCF0 BL 0x1B6EA14
	0x01CBBCF4 MOV X22, X1
	0x01CBBCF8 MOV X23, X0
	0x01CBBCFC B 0x1CBBCAC
	0x01CBBD00 MOV X23, X0
	0x01CBBD04 LDRB W8, [X31 + 0x3C]
	0x01CBBD08 CBZ W8, 0x1CBBD18
	0x01CBBD0C MOV X0, X20
	0x01CBBD10 MOV X1, X31
	0x01CBBD14 BL 0x324AE50
	0x01CBBD18 CBNZ X22, 0x1CBBD24
	0x01CBBD1C MOV X0, X23
	0x01CBBD20 BL 0x1C8418C
	0x01CBBD24 MOV X0, X22
	0x01CBBD28 BL 0x1B6EA14
	0x01CBBD2C BL 0x18F46A8
	0x01CBBD30 STP X30, X23, [X31 - 0x30]!
	0x01CBBD34 STP X22, X21, [X31 + 0x10]
	0x01CBBD38 STP X20, X19, [X31 + 0x20]
	0x01CBBD3C ADRP X21, 0x2568000
	0x01CBBD40 LDRB W8, [X21 + 0x529]
	0x01CBBD44 MOV X19, X2
	0x01CBBD48 MOV X20, X1
	0x01CBBD4C TBNZ X8, 0x0, 0x1CBBD64
	0x01CBBD50 ADRP X0, 0x2294000
	0x01CBBD54 LDR X0, [X0 + 0x98]
	0x01CBBD58 BL 0x1B6E7F0
	0x01CBBD5C MOVZ W8, 0x1
	0x01CBBD60 STRB W8, [X21 + 0x529]
	0x01CBBD64 CBZ X19, 0x1CBBE0C
	0x01CBBD68 ADRP X8, 0x2294000
	0x01CBBD6C LDR X8, [X8 + 0x98]
	0x01CBBD70 MOV X0, X19
	0x01CBBD74 LDR X1, [X8]
	0x01CBBD78 BL 0x2090A90
	0x01CBBD7C CBZ X0, 0x1CBBE0C
	0x01CBBD80 LDR W8, [X0 + 0x18]
	0x01CBBD84 MOV X21, X0
	0x01CBBD88 CMP W8, 0x1
	0x01CBBD8C B.LT 0x1CBBDEC
	0x01CBBD90 MOV W23, W31
	0x01CBBD94 CMP W23, W8
	0x01CBBD98 B.CS 0x1CBBE10
	0x01CBBD9C ADD X8, X21, W23, 0x3, SXTW
	0x01CBBDA0 LDR X22, [X8 + 0x20]
	0x01CBBDA4 MOV X0, X31
	0x01CBBDA8 BL 0x1D6815C
	0x01CBBDAC CBZ X22, 0x1CBBE0C
	0x01CBBDB0 MOV X1, X0
	0x01CBBDB4 MOV X0, X22
	0x01CBBDB8 MOV X2, X31
	0x01CBBDBC BL 0x1C9E17C
	0x01CBBDC0 MOV X0, X22
	0x01CBBDC4 MOV X1, X31
	0x01CBBDC8 BL 0x3A9B084
	0x01CBBDCC CBZ X0, 0x1CBBE0C
	0x01CBBDD0 MOV X1, X31
	0x01CBBDD4 MOV X2, X31
	0x01CBBDD8 BL 0x3AA7DEC
	0x01CBBDDC LDR W8, [X21 + 0x18]
	0x01CBBDE0 ADD W23, W23, 0x1
	0x01CBBDE4 CMP W23, W8
	0x01CBBDE8 B.LT 0x1CBBD94
	0x01CBBDEC CBZ X20, 0x1CBBE0C
	0x01CBBDF0 MOV X0, X20
	0x01CBBDF4 MOV X1, X19
	0x01CBBDF8 LDP X20, X19, [X31 + 0x20]
	0x01CBBDFC LDP X22, X21, [X31 + 0x10]
	0x01CBBE00 MOV X2, X31
	0x01CBBE04 LDP X30, X23, [X31], #0x30
	0x01CBBE08 B 0x1D8C548
	0x01CBBE0C BL 0x1B6EA1C

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], D11
	003 Move [X31+40], D10
	004 Move [X31+48], D9
	005 Move [X31+56], D8
	006 Move [X31+64], X30
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X20, 0x2569000
	010 Move W8, [X20+1305]
	011 Move V8, V3
	012 Move V9, V2
	013 Move V10, V1
	014 Move V11, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {37}
	020 Move X0, 0x2294000
	021 Move X0, [X0+4088]
	022 Call 0x1B6F7F0
	023 Move X0, 0x2295000
	024 Move X0, [X0]
	025 Call 0x1B6F7F0
	026 Move X0, 0x2295000
	027 Move X0, [X0+8]
	028 Call 0x1B6F7F0
	029 Move X0, 0x2295000
	030 Move X0, [X0+16]
	031 Call 0x1B6F7F0
	032 Move X0, 0x2295000
	033 Move X0, [X0+24]
	034 Call 0x1B6F7F0
	035 Move W8, 1
	036 Move [X20+1305], W8
	037 Move [X31+8], X31
	038 Move [X31+16], X31
	039 Move [X31+24], X31
	040 Move X0, [X19+120]
	041 Move [X19+104], S11
	042 Move [X19+112], S10
	043 Move [X19+112], S9
	044 Move [X19+120], S8
	045 Compare X0, 0
	046 JumpIfEqual {91}
	047 Move X8, 0x2294000
	048 Move X8, [X8+4088]
	049 Move X1, [X8]
	050 Call Dictionary`2<Object, Object>.get_Values, X0
	051 Compare X0, 0
	052 JumpIfEqual {91}
	053 Move X8, 0x2295000
	054 Move X8, [X8+24]
	055 Move X20, 0x2295000
	056 Move X19, 0x2295000
	057 Move X1, [X8]
	058 Move X20, [X20+8]
	059 Move X19, [X19]
	060 Add X8, X31, 8
	061 Call ValueCollection<Object, Object>.GetEnumerator, X0
	062 Move X1, [X20]
	063 Add X0, X31, 8
	064 Call Enumerator<Object, Object>.MoveNext, X0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {78}
	069 Move X0, [X31+24]
	070 Compare X0, 0
	071 JumpIfEqual {90}
	072 Move V0, V11
	073 Move V1, V10
	074 Move V2, V9
	075 Move V3, V8
	076 Move X1, X31
	077 Call Material.set_color, X0, X1
	078 Move X1, [X19]
	079 Add X0, X31, 8
	080 Call Enumerator<Object, Object>.Dispose, X0
	081 Move X20, [X31+80]
	082 Move X19, [X31+88]
	083 Move X30, [X31+64]
	084 Move D9, [X31+48]
	085 Move D8, [X31+56]
	086 Move D11, [X31+32]
	087 Move D10, [X31+40]
	088 Add X31, X31, 96
	089 Return 
	090 Call 0x1B6FA1C
	091 Call 0x1B6FA1C
	092 Move X19, X0
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X0, X19
	095 Call 0x3D1A840
	096 Move X20, [X0]
	097 Call 0x3D1A850
	098 Move X8, 0x2295000
	099 Move X8, [X8]
	100 Add X0, X31, 8
	101 Move X1, [X8]
	102 Call Enumerator<Object, Object>.Dispose, X0
	103 Compare X20, 0
	104 JumpIfEqual {81}
	105 Move X0, X20
	106 Call 0x1B6FA14
	107 Move X20, X31
	108 Move X19, X0
	109 Move X8, 0x2295000
	110 Move X8, [X8]
	111 Move X1, [X8]
	112 Add X0, X31, 8
	113 Call Enumerator<Object, Object>.Dispose, X0
	114 Compare X20, 0
	115 JumpIfNotEqual {118}
	116 Move X0, X19
	117 Call 0x1C8518C
	118 Move X0, X20
	119 Call 0x1B6FA14
	120 Call 0x18F56A8

Method: System.Void .ctor()

Disassembly:
	0x01CBBE10 BL 0x1B6EA24
	0x01CBBE14 STP X30, X23, [X31 - 0x30]!
	0x01CBBE18 STP X22, X21, [X31 + 0x10]
	0x01CBBE1C STP X20, X19, [X31 + 0x20]
	0x01CBBE20 ADRP X20, 0x2568000
	0x01CBBE24 ADRP X22, 0x2292000
	0x01CBBE28 LDRB W8, [X20 + 0x52A]
	0x01CBBE2C LDR X22, [X22 + 0x478]
	0x01CBBE30 MOV X19, X0
	0x01CBBE34 TBNZ X8, 0x0, 0x1CBBE88
	0x01CBBE38 ADRP X0, 0x2294000
	0x01CBBE3C LDR X0, [X0 + 0xA0]
	0x01CBBE40 BL 0x1B6E7F0
	0x01CBBE44 ADRP X0, 0x2294000
	0x01CBBE48 LDR X0, [X0 + 0xA8]
	0x01CBBE4C BL 0x1B6E7F0
	0x01CBBE50 ADRP X0, 0x2294000
	0x01CBBE54 LDR X0, [X0 + 0xB0]
	0x01CBBE58 BL 0x1B6E7F0
	0x01CBBE5C ADRP X0, 0x2292000
	0x01CBBE60 LDR X0, [X0 + 0xF78]
	0x01CBBE64 BL 0x1B6E7F0
	0x01CBBE68 ADRP X0, 0x2294000
	0x01CBBE6C LDR X0, [X0 + 0xB8]
	0x01CBBE70 BL 0x1B6E7F0
	0x01CBBE74 ADRP X0, 0x2292000
	0x01CBBE78 LDR X0, [X0 + 0x478]
	0x01CBBE7C BL 0x1B6E7F0
	0x01CBBE80 MOVZ W8, 0x1
	0x01CBBE84 STRB W8, [X20 + 0x52A]
	0x01CBBE88 LDR X0, [X22]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2569000
	007 Move X22, 0x2295000
	008 Move X20, 0x2295000
	009 Move W8, [X21+1306]
	010 Move X22, [X22+32]
	011 Move X20, [X20+40]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2295000
	018 Move X0, [X0+40]
	019 Call 0x1B6F7F0
	020 Move X0, 0x2295000
	021 Move X0, [X0+32]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X21+1306], W8
	025 Move X0, [X22]
	026 Call 0x1B6FA0C
	027 Move X1, [X20]
	028 Move X20, X0
	029 Call Dictionary`2<Object, Object>..ctor, X0
	030 Move [X19+120], X20
	031 Move X0, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X1, X31
	037 Move X30, [X31+48]
	038 Call MonoBehaviour..ctor, X0
	039 Return 

