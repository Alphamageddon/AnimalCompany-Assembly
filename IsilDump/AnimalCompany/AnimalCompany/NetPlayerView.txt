Type: AnimalCompany.NetPlayerView

Method: System.Void Setup()

Disassembly:
	0x01DBA490 ADD X2, X31, 0x8
	0x01DBA494 LDR X3, [X8]
	0x01DBA498 BL 0x260732C
	0x01DBA49C TBZ X0, 0x0, 0x1DBA4C4
	0x01DBA4A0 LDR X8, [X31 + 0x8]
	0x01DBA4A4 CBZ X8, 0x1DBA4D4
	0x01DBA4A8 LDR X0, [X8 + 0x58]
	0x01DBA4AC CBZ X0, 0x1DBA4D4
	0x01DBA4B0 ADRP X8, 0x233D000
	0x01DBA4B4 LDR V0, [X19 + 0x18]
	0x01DBA4B8 LDR X8, [X8 + 0xD68]
	0x01DBA4BC LDR X1, [X8]
	0x01DBA4C0 BL 0x265E578
	0x01DBA4C4 LDP X20, X19, [X31 + 0x20]
	0x01DBA4C8 LDP X30, X21, [X31 + 0x10]
	0x01DBA4CC ADD X31, X31, 0x30
	0x01DBA4D0 RET
	0x01DBA4D4 BL 0x1C16F20
	0x01DBA4D8 SUB X31, X31, 0x30
	0x01DBA4DC STP X30, X21, [X31 + 0x10]
	0x01DBA4E0 STP X20, X19, [X31 + 0x20]
	0x01DBA4E4 ADRP X21, 0x261E000
	0x01DBA4E8 LDRB W8, [X21 + 0xB36]
	0x01DBA4EC MOV X20, X1
	0x01DBA4F0 MOV X19, X0
	0x01DBA4F4 TBNZ X8, 0x0, 0x1DBA518
	0x01DBA4F8 ADRP X0, 0x233D000
	0x01DBA4FC LDR X0, [X0 + 0xD58]
	0x01DBA500 BL 0x1C16CF4
	0x01DBA504 ADRP X0, 0x2339000
	0x01DBA508 LDR X0, [X0 + 0xE30]
	0x01DBA50C BL 0x1C16CF4
	0x01DBA510 MOVZ W8, 0x1
	0x01DBA514 STRB W8, [X21 + 0xB36]
	0x01DBA518 STR X31, [X31 + 0x8]
	0x01DBA51C CBZ X20, 0x1DBA580
	0x01DBA520 LDR X8, [X20 + 0xE0]
	0x01DBA524 CBZ X8, 0x1DBA580
	0x01DBA528 LDR X0, [X8 + 0x80]
	0x01DBA52C CBZ X0, 0x1DBA580
	0x01DBA530 ADRP X8, 0x233D000
	0x01DBA534 LDR X8, [X8 + 0xD58]
	0x01DBA538 LDR W1, [X19 + 0x14]
	0x01DBA53C ADD X2, X31, 0x8
	0x01DBA540 LDR X3, [X8]
	0x01DBA544 BL 0x260732C
	0x01DBA548 TBZ X0, 0x0, 0x1DBA570
	0x01DBA54C LDR X8, [X31 + 0x8]
	0x01DBA550 CBZ X8, 0x1DBA580
	0x01DBA554 LDR X0, [X8 + 0x60]
	0x01DBA558 CBZ X0, 0x1DBA580
	0x01DBA55C ADRP X8, 0x2339000
	0x01DBA560 LDRB W1, [X19 + 0x18]
	0x01DBA564 LDR X8, [X8 + 0xE30]
	0x01DBA568 LDR X2, [X8]
	0x01DBA56C BL 0x26518D0
	0x01DBA570 LDP X20, X19, [X31 + 0x20]
	0x01DBA574 LDP X30, X21, [X31 + 0x10]
	0x01DBA578 ADD X31, X31, 0x30
	0x01DBA57C RET
	0x01DBA580 BL 0x1C16F20
	0x01DBA584 STR X30, [X31 - 0x40]!
	0x01DBA588 STP X24, X23, [X31 + 0x10]
	0x01DBA58C STP X22, X21, [X31 + 0x20]
	0x01DBA590 STP X20, X19, [X31 + 0x30]
	0x01DBA594 ADRP X21, 0x261E000
	0x01DBA598 ADRP X23, 0x233D000
	0x01DBA59C LDRB W8, [X21 + 0xB37]
	0x01DBA5A0 LDR X23, [X23 + 0xD70]
	0x01DBA5A4 MOV W19, W1
	0x01DBA5A8 MOV X20, X0
	0x01DBA5AC TBNZ X8, 0x0, 0x1DBA5E8
	0x01DBA5B0 ADRP X0, 0x233D000
	0x01DBA5B4 LDR X0, [X0 + 0xD28]
	0x01DBA5B8 BL 0x1C16CF4
	0x01DBA5BC ADRP X0, 0x233D000
	0x01DBA5C0 LDR X0, [X0 + 0xD30]
	0x01DBA5C4 BL 0x1C16CF4
	0x01DBA5C8 ADRP X0, 0x233D000
	0x01DBA5CC LDR X0, [X0 + 0xD78]
	0x01DBA5D0 BL 0x1C16CF4
	0x01DBA5D4 ADRP X0, 0x233D000
	0x01DBA5D8 LDR X0, [X0 + 0xD70]
	0x01DBA5DC BL 0x1C16CF4
	0x01DBA5E0 MOVZ W8, 0x1

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x261F000
	013 Move W8, [X20+2858]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0x233E000
	020 Move X0, [X0+3216]
	021 Call 0x1C17CF4
	022 Move X0, 0x233E000
	023 Move X0, [X0+3224]
	024 Call 0x1C17CF4
	025 Move X0, 0x233E000
	026 Move X0, [X0+3232]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2858], W8
	030 Move [X31+8], X31
	031 Move X23, [X19+32]
	032 Compare X23, 0
	033 JumpIfEqual {101}
	034 Move W8, [X23+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X25, 0x233E000
	037 Move X26, 0x233E000
	038 Move X27, 0x233E000
	039 Move X25, [X25+3224]
	040 Move X26, [X26+3232]
	041 Move X27, [X27+3216]
	042 Move W24, W31
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add X8, X23, W24
	045 Move X20, [X8+32]
	046 Compare X20, 0
	047 JumpIfEqual {101}
	048 Move X21, [X19+120]
	049 Move X0, X20
	050 Move X1, X31
	051 Call Renderer.get_sharedMaterial, X0
	052 Compare X21, 0
	053 JumpIfEqual {101}
	054 Move X3, [X25]
	055 Move X1, X0
	056 Add X2, X31, 8
	057 Move X0, X21
	058 Call Dictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {82}
	063 Move X0, X20
	064 Move X1, X31
	065 Call Renderer.get_sharedMaterial, X0
	066 Move X8, [X26]
	067 Move X21, X0
	068 Move X0, X8
	069 Call 0x1C17F10
	070 Move X1, X21
	071 Move X2, X31
	072 Move X22, X0
	073 Call Material..ctor, X0, X1
	074 Move [X31+8], X22
	075 Move X0, [X19+120]
	076 Compare X0, 0
	077 JumpIfEqual {101}
	078 Move X3, [X27]
	079 Move X1, X21
	080 Move X2, X22
	081 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	082 Move X1, [X31+8]
	083 Move X0, X20
	084 Move X2, X31
	085 Call Renderer.set_sharedMaterial, X0, X1
	086 Move W8, [X23+24]
	087 Add W24, W24, 1
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X20, [X31+80]
	090 Move X19, [X31+88]
	091 Move X22, [X31+64]
	092 Move X21, [X31+72]
	093 Move X24, [X31+48]
	094 Move X23, [X31+56]
	095 Move X26, [X31+32]
	096 Move X25, [X31+40]
	097 Move X30, [X31+16]
	098 Move X27, [X31+24]
	099 Add X31, X31, 96
	100 Return 
	101 Call 0x1C17F20
	102 Call 0x1C17F28

Method: System.Void UpdateBodyView()

Disassembly:
	0x01DBA5E4 STRB W8, [X21 + 0xB37]
	0x01DBA5E8 LDR X0, [X23]
	0x01DBA5EC LDR W8, [X0 + 0xE0]
	0x01DBA5F0 CBNZ W8, 0x1DBA5FC
	0x01DBA5F4 BL 0x1C16DFC
	0x01DBA5F8 LDR X0, [X23]
	0x01DBA5FC LDR X8, [X0 + 0xB8]
	0x01DBA600 ADRP X24, 0x233D000
	0x01DBA604 LDR X21, [X8 + 0x8]
	0x01DBA608 LDR X24, [X24 + 0xD28]
	0x01DBA60C CBNZ X21, 0x1DBA660
	0x01DBA610 LDR W8, [X0 + 0xE0]
	0x01DBA614 CBNZ W8, 0x1DBA620
	0x01DBA618 BL 0x1C16DFC
	0x01DBA61C LDR X0, [X23]
	0x01DBA620 ADRP X9, 0x233D000
	0x01DBA624 LDR X8, [X0 + 0xB8]
	0x01DBA628 LDR X9, [X9 + 0xD30]
	0x01DBA62C LDR X22, [X8]
	0x01DBA630 LDR X0, [X9]
	0x01DBA634 BL 0x1C16F10
	0x01DBA638 ADRP X8, 0x233D000
	0x01DBA63C LDR X8, [X8 + 0xD78]
	0x01DBA640 MOV X1, X22
	0x01DBA644 MOV X3, X31
	0x01DBA648 MOV X21, X0
	0x01DBA64C LDR X2, [X8]
	0x01DBA650 BL 0x2D30578
	0x01DBA654 LDR X8, [X23]
	0x01DBA658 LDR X8, [X8 + 0xB8]
	0x01DBA65C STR X21, [X8 + 0x8]
	0x01DBA660 LDR X3, [X24]
	0x01DBA664 MOV X0, X20
	0x01DBA668 MOV X1, X21
	0x01DBA66C MOV W2, W19
	0x01DBA670 LDP X20, X19, [X31 + 0x30]
	0x01DBA674 LDP X22, X21, [X31 + 0x20]
	0x01DBA678 LDP X24, X23, [X31 + 0x10]
	0x01DBA67C LDR X30, [X31], #0x40
	0x01DBA680 B 0x28BB1D0
	0x01DBA684 STR X30, [X31 - 0x20]!
	0x01DBA688 STP X20, X19, [X31 + 0x10]
	0x01DBA68C ADRP X19, 0x261E000
	0x01DBA690 ADRP X20, 0x233D000
	0x01DBA694 LDRB W8, [X19 + 0xB38]
	0x01DBA698 LDR X20, [X20 + 0xD70]
	0x01DBA69C TBNZ X8, 0x0, 0x1DBA6B4
	0x01DBA6A0 ADRP X0, 0x233D000
	0x01DBA6A4 LDR X0, [X0 + 0xD70]
	0x01DBA6A8 BL 0x1C16CF4
	0x01DBA6AC MOVZ W8, 0x1
	0x01DBA6B0 STRB W8, [X19 + 0xB38]
	0x01DBA6B4 LDR X0, [X20]
	0x01DBA6B8 BL 0x1C16F10
	0x01DBA6BC MOV X1, X31
	0x01DBA6C0 MOV X19, X0
	0x01DBA6C4 BL 0x33BDD8C
	0x01DBA6C8 LDR X8, [X20]
	0x01DBA6CC LDR X8, [X8 + 0xB8]
	0x01DBA6D0 STR X19, [X8]
	0x01DBA6D4 LDP X20, X19, [X31 + 0x10]
	0x01DBA6D8 LDR X30, [X31], #0x20
	0x01DBA6DC RET
	0x01DBA6E0 MOV X1, X31
	0x01DBA6E4 B 0x33BDD8C
	0x01DBA6E8 STR X30, [X31 - 0x10]!
	0x01DBA6EC CBZ X1, 0x1DBA704
	0x01DBA6F0 LDR X8, [X1 + 0xE0]
	0x01DBA6F4 CBZ X8, 0x1DBA704
	0x01DBA6F8 LDR X0, [X8 + 0x58]
	0x01DBA6FC LDR X30, [X31], #0x10
	0x01DBA700 RET
	0x01DBA704 BL 0x1C16F20
	0x01DBA708 STP X30, X21, [X31 - 0x20]!
	0x01DBA70C STP X20, X19, [X31 + 0x10]
	0x01DBA710 MOV X20, X1
	0x01DBA714 MOV X1, X31
	0x01DBA718 MOV X19, X2
	0x01DBA71C MOV X21, X0
	0x01DBA720 BL 0x1D36B98
	0x01DBA724 STP X20, X19, [X21 + 0x18]
	0x01DBA728 LDP X20, X19, [X31 + 0x10]
	0x01DBA72C LDP X30, X21, [X31], #0x20
	0x01DBA730 RET
	0x01DBA734 STP X30, X21, [X31 - 0x20]!
	0x01DBA738 STP X20, X19, [X31 + 0x10]
	0x01DBA73C ADRP X21, 0x261E000
	0x01DBA740 LDRB W8, [X21 + 0xB39]
	0x01DBA744 MOV X20, X1
	0x01DBA748 MOV X19, X0
	0x01DBA74C TBNZ X8, 0x0, 0x1DBA764
	0x01DBA750 ADRP X0, 0x2339000
	0x01DBA754 LDR X0, [X0 + 0x900]
	0x01DBA758 BL 0x1C16CF4
	0x01DBA75C MOVZ W8, 0x1
	0x01DBA760 STRB W8, [X21 + 0xB39]
	0x01DBA764 CBZ X20, 0x1DBA7AC
	0x01DBA768 LDR X8, [X20 + 0xF0]
	0x01DBA76C CBZ X8, 0x1DBA7AC
	0x01DBA770 LDR X0, [X8 + 0x48]
	0x01DBA774 CBZ X0, 0x1DBA7AC
	0x01DBA778 ADRP X8, 0x2339000
	0x01DBA77C LDR X8, [X8 + 0x900]
	0x01DBA780 LDR X1, [X19 + 0x18]
	0x01DBA784 LDR X2, [X8]
	0x01DBA788 BL 0x265C3F4
	0x01DBA78C LDR X8, [X20 + 0xF0]
	0x01DBA790 CBZ X8, 0x1DBA7AC
	0x01DBA794 LDR X0, [X8 + 0x50]
	0x01DBA798 CBZ X0, 0x1DBA7AC
	0x01DBA79C LDR X1, [X19 + 0x20]
	0x01DBA7A0 LDP X20, X19, [X31 + 0x10]
	0x01DBA7A4 LDP X30, X21, [X31], #0x20
	0x01DBA7A8 B 0x1DBA7B0
	0x01DBA7AC BL 0x1C16F20
	0x01DBA7B0 STP X30, X21, [X31 - 0x20]!
	0x01DBA7B4 STP X20, X19, [X31 + 0x10]
	0x01DBA7B8 ADRP X21, 0x261E000
	0x01DBA7BC LDRB W8, [X21 + 0xB3C]
	0x01DBA7C0 MOV X19, X1
	0x01DBA7C4 MOV X20, X0
	0x01DBA7C8 TBNZ X8, 0x0, 0x1DBA7E0
	0x01DBA7CC ADRP X0, 0x2339000
	0x01DBA7D0 LDR X0, [X0 + 0xE30]
	0x01DBA7D4 BL 0x1C16CF4
	0x01DBA7D8 MOVZ W8, 0x1
	0x01DBA7DC STRB W8, [X21 + 0xB3C]
	0x01DBA7E0 CBZ X19, 0x1DBA808
	0x01DBA7E4 LDR X0, [X20 + 0x48]
	0x01DBA7E8 CBZ X0, 0x1DBA808
	0x01DBA7EC ADRP X8, 0x2339000
	0x01DBA7F0 LDR X8, [X8 + 0xE30]
	0x01DBA7F4 LDRB W1, [X19 + 0x10]
	0x01DBA7F8 LDP X20, X19, [X31 + 0x10]
	0x01DBA7FC LDR X2, [X8]
	0x01DBA800 LDP X30, X21, [X31], #0x20
	0x01DBA804 B 0x26518D0
	0x01DBA808 BL 0x1C16F20
	0x01DBA80C STR X30, [X31 - 0x20]!
	0x01DBA810 STP X20, X19, [X31 + 0x10]
	0x01DBA814 MOV X19, X1
	0x01DBA818 MOV X1, X31
	0x01DBA81C MOV X20, X0
	0x01DBA820 BL 0x1D36B98
	0x01DBA824 STR X19, [X20 + 0x18]
	0x01DBA828 LDP X20, X19, [X31 + 0x10]
	0x01DBA82C LDR X30, [X31], #0x20
	0x01DBA830 RET
	0x01DBA834 STR X30, [X31 - 0x10]!
	0x01DBA838 CBZ X1, 0x1DBA85C
	0x01DBA83C LDR X8, [X1 + 0xE0]
	0x01DBA840 CBZ X8, 0x1DBA85C
	0x01DBA844 LDR X8, [X8 + 0x68]
	0x01DBA848 CBZ X8, 0x1DBA85C
	0x01DBA84C LDR X1, [X0 + 0x18]
	0x01DBA850 MOV X0, X8
	0x01DBA854 LDR X30, [X31], #0x10
	0x01DBA858 B 0x1DBA7B0
	0x01DBA85C BL 0x1C16F20
	0x01DBA860 STR X30, [X31 - 0x20]!
	0x01DBA864 STP X20, X19, [X31 + 0x10]
	0x01DBA868 MOV X19, X1
	0x01DBA86C MOV X1, X31
	0x01DBA870 MOV X20, X0
	0x01DBA874 BL 0x1D36B98
	0x01DBA878 STR X19, [X20 + 0x18]
	0x01DBA87C LDP X20, X19, [X31 + 0x10]
	0x01DBA880 LDR X30, [X31], #0x20
	0x01DBA884 RET
	0x01DBA888 STP X30, X21, [X31 - 0x20]!
	0x01DBA88C STP X20, X19, [X31 + 0x10]
	0x01DBA890 ADRP X21, 0x261E000
	0x01DBA894 LDRB W8, [X21 + 0xB3A]
	0x01DBA898 MOV X20, X1
	0x01DBA89C MOV X19, X0
	0x01DBA8A0 TBNZ X8, 0x0, 0x1DBA8B8
	0x01DBA8A4 ADRP X0, 0x233D000
	0x01DBA8A8 LDR X0, [X0 + 0xD48]
	0x01DBA8AC BL 0x1C16CF4
	0x01DBA8B0 MOVZ W8, 0x1
	0x01DBA8B4 STRB W8, [X21 + 0xB3A]
	0x01DBA8B8 LDR X0, [X19 + 0x18]
	0x01DBA8BC MOV X1, X31
	0x01DBA8C0 BL 0x32277A8
	0x01DBA8C4 TBZ X0, 0x0, 0x1DBA8D4
	0x01DBA8C8 LDP X20, X19, [X31 + 0x10]
	0x01DBA8CC LDP X30, X21, [X31], #0x20
	0x01DBA8D0 RET
	0x01DBA8D4 CBZ X20, 0x1DBA904
	0x01DBA8D8 LDR X8, [X20 + 0xE0]
	0x01DBA8DC CBZ X8, 0x1DBA904
	0x01DBA8E0 LDR X0, [X8 + 0x78]
	0x01DBA8E4 CBZ X0, 0x1DBA904
	0x01DBA8E8 ADRP X8, 0x233D000
	0x01DBA8EC LDR X1, [X19 + 0x18]
	0x01DBA8F0 LDR X8, [X8 + 0xD48]
	0x01DBA8F4 LDP X20, X19, [X31 + 0x10]
	0x01DBA8F8 LDR X2, [X8]
	0x01DBA8FC LDP X30, X21, [X31], #0x20
	0x01DBA900 B 0x262D298
	0x01DBA904 BL 0x1C16F20
	0x01DBA908 STR X30, [X31 - 0x20]!
	0x01DBA90C STP X20, X19, [X31 + 0x10]
	0x01DBA910 MOV X19, X1
	0x01DBA914 MOV X1, X31
	0x01DBA918 MOV X20, X0
	0x01DBA91C BL 0x1D36B98
	0x01DBA920 STR X19, [X20 + 0x18]
	0x01DBA924 LDP X20, X19, [X31 + 0x10]
	0x01DBA928 LDR X30, [X31], #0x20
	0x01DBA92C RET
	0x01DBA930 STP X30, X21, [X31 - 0x20]!
	0x01DBA934 STP X20, X19, [X31 + 0x10]
	0x01DBA938 ADRP X21, 0x261E000
	0x01DBA93C LDRB W8, [X21 + 0xB3B]
	0x01DBA940 MOV X20, X1
	0x01DBA944 MOV X19, X0
	0x01DBA948 TBNZ X8, 0x0, 0x1DBA960
	0x01DBA94C ADRP X0, 0x233D000
	0x01DBA950 LDR X0, [X0 + 0xD60]
	0x01DBA954 BL 0x1C16CF4
	0x01DBA958 MOVZ W8, 0x1
	0x01DBA95C STRB W8, [X21 + 0xB3B]
	0x01DBA960 CBZ X20, 0x1DBA990
	0x01DBA964 LDR X8, [X20 + 0xE0]
	0x01DBA968 CBZ X8, 0x1DBA990
	0x01DBA96C LDR X0, [X8 + 0x78]
	0x01DBA970 CBZ X0, 0x1DBA990
	0x01DBA974 ADRP X8, 0x233D000
	0x01DBA978 LDR X8, [X8 + 0xD60]
	0x01DBA97C LDR X1, [X19 + 0x18]
	0x01DBA980 LDP X20, X19, [X31 + 0x10]
	0x01DBA984 LDR X2, [X8]
	0x01DBA988 LDP X30, X21, [X31], #0x20
	0x01DBA98C B 0x262DC78
	0x01DBA990 BL 0x1C16F20
	0x01DBA994 LDR X0, [X0 + 0x48]
	0x01DBA998 RET
	0x01DBA99C STR X1, [X0 + 0x48]
	0x01DBA9A0 RET
	0x01DBA9A4 LDR X0, [X0 + 0x50]
	0x01DBA9A8 RET
	0x01DBA9AC STR X1, [X0 + 0x50]
	0x01DBA9B0 RET
	0x01DBA9B4 MOV X1, X31
	0x01DBA9B8 B 0x35CD9D4
	0x01DBA9BC LDR X0, [X0 + 0x48]
	0x01DBA9C0 RET
	0x01DBA9C4 STR X1, [X0 + 0x48]
	0x01DBA9C8 RET
	0x01DBA9CC MOV X1, X31
	0x01DBA9D0 B 0x35CD9D4
	0x01DBA9D4 LDR X0, [X0 + 0x48]
	0x01DBA9D8 RET
	0x01DBA9DC STR X1, [X0 + 0x48]
	0x01DBA9E0 RET
	0x01DBA9E4 LDR X0, [X0 + 0x50]
	0x01DBA9E8 RET
	0x01DBA9EC STR X1, [X0 + 0x50]
	0x01DBA9F0 RET
	0x01DBA9F4 MOV X1, X31
	0x01DBA9F8 B 0x35CD9D4
	0x01DBA9FC LDR X0, [X0 + 0x48]
	0x01DBAA00 RET
	0x01DBAA04 STR X1, [X0 + 0x48]
	0x01DBAA08 RET
	0x01DBAA0C LDR X0, [X0 + 0x50]
	0x01DBAA10 RET
	0x01DBAA14 STR X1, [X0 + 0x50]
	0x01DBAA18 RET
	0x01DBAA1C LDR X0, [X0 + 0x58]
	0x01DBAA20 RET
	0x01DBAA24 STR X1, [X0 + 0x58]
	0x01DBAA28 RET
	0x01DBAA2C LDR X0, [X0 + 0x60]
	0x01DBAA30 RET
	0x01DBAA34 STR X1, [X0 + 0x60]
	0x01DBAA38 RET
	0x01DBAA3C LDR X0, [X0 + 0x68]
	0x01DBAA40 RET
	0x01DBAA44 STR X1, [X0 + 0x68]
	0x01DBAA48 RET

ISIL:
	001 Move [X31-112], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X24
	010 Move [X31+72], X23
	011 Move [X31+80], X22
	012 Move [X31+88], X21
	013 Move [X31+96], X20
	014 Move [X31+104], X19
	015 Move X19, X0
	016 Move X0, [X0+40]
	017 Compare X0, 0
	018 JumpIfEqual {322}
	019 Move X20, [X19+64]
	020 Move X1, X31
	021 Call Transform.get_position, X0
	022 Move X0, [X19+40]
	023 Compare X0, 0
	024 JumpIfEqual {322}
	025 Move X1, X31
	026 Move V8, V0
	027 Move V9, V1
	028 Move V10, V2
	029 Call Transform.get_up, X0
	030 Compare X20, 0
	031 JumpIfEqual {322}
	032 Move X8, -19726336
	033 Move V3, [X8+3876]
	034 Move X0, X20
	035 Move X1, X31
	036 Multiply S2, S2, S3
	037 Multiply S1, S1, S3
	038 Multiply S0, S0, S3
	039 Subtract S2, S10, S2
	040 Subtract S1, S9, S1
	041 Subtract S0, S8, S0
	042 Call Transform.set_position, X0, X1
	043 Move X0, [X19+40]
	044 Compare X0, 0
	045 JumpIfEqual {322}
	046 Move X1, X31
	047 Call Transform.get_forward, X0
	048 Move X22, 0x261F000
	049 Move W8, [X22+1925]
	050 Move V8, V0
	051 Move V9, V2
	052 Compare W8, 0
	053 JumpIfNotEqual {59}
	054 Move X0, 0x233A000
	055 Move X0, [X0+1448]
	056 Call 0x1C17CF4
	057 Move W8, 1
	058 Move [X22+1925], W8
	059 Move X23, 0x233A000
	060 Move X23, [X23+1448]
	061 Move X0, [X23]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X8, -19722240
	067 Multiply S1, S8, S8
	068 Move S0, W31
	069 Move V11, [X8+380]
	070 Move X21, 0x233A000
	071 Add S1, S1, S0
	072 Multiply S2, S9, S9
	073 Move X21, [X21+1440]
	074 Add S1, S2, S1
	075 NotImplemented "Instruction FSQRT not yet implemented."
	076 NotImplemented "Instruction FCMP not yet implemented."
	077 NotImplemented "Instruction FDIV not yet implemented."
	078 NotImplemented "Instruction FDIV not yet implemented."
	079 NotImplemented "Instruction FDIV not yet implemented."
	080 Move X20, 0x261F000
	081 Move W8, [X20+1923]
	082 Compare W8, 0
	083 JumpIfNotEqual {89}
	084 Move X0, 0x233A000
	085 Move X0, [X0+1440]
	086 Call 0x1C17CF4
	087 Move W8, 1
	088 Move [X20+1923], W8
	089 Move X8, [X21]
	090 Move X8, [X8+184]
	091 Move S8, [X8]
	092 Move S10, [X8+4]
	093 Move V9, [X8+8]
	094 Move X24, 0x261F000
	095 Move W8, [X24+1926]
	096 Move X20, [X19+64]
	097 Compare W8, 0
	098 JumpIfNotEqual {104}
	099 Move X0, 0x233A000
	100 Move X0, [X0+1440]
	101 Call 0x1C17CF4
	102 Move W8, 1
	103 Move [X24+1926], W8
	104 Move X8, [X21]
	105 Move V0, V8
	106 Move V1, V10
	107 Move V2, V9
	108 Move X8, [X8+184]
	109 Move X0, X31
	110 Move S3, [X8+24]
	111 Move S4, [X8+28]
	112 Move V5, [X8+32]
	113 Call Quaternion.LookRotation, X0, X1
	114 Compare X20, 0
	115 JumpIfEqual {322}
	116 Move X0, X20
	117 Move X1, X31
	118 Call Transform.set_rotation, X0, X1
	119 Move X0, [X19+48]
	120 Compare X0, 0
	121 JumpIfEqual {322}
	122 Move X20, [X19+72]
	123 Move X1, X31
	124 Call Transform.get_position, X0
	125 Compare X20, 0
	126 JumpIfEqual {322}
	127 Move X0, X20
	128 Move X1, X31
	129 Call Transform.set_position, X0, X1
	130 Move X0, [X19+72]
	131 Compare X0, 0
	132 JumpIfEqual {322}
	133 Move X1, X31
	134 Call Transform.get_position, X0
	135 Move X0, [X19+88]
	136 Compare X0, 0
	137 JumpIfEqual {322}
	138 Move X1, X31
	139 Move V8, V0
	140 Move V9, V1
	141 Move V10, V2
	142 Call Transform.get_position, X0
	143 Move X0, [X19+48]
	144 Compare X0, 0
	145 JumpIfEqual {322}
	146 Move X1, X31
	147 Subtract S12, S10, S2
	148 Subtract S13, S9, S1
	149 Subtract S14, S8, S0
	150 Call Transform.get_forward, X0
	151 Move W8, [X22+1925]
	152 Move V8, V0
	153 Move V9, V1
	154 Move V10, V2
	155 Compare W8, 0
	156 JumpIfNotEqual {162}
	157 Move X0, 0x233A000
	158 Move X0, [X0+1448]
	159 Call 0x1C17CF4
	160 Move W8, 1
	161 Move [X22+1925], W8
	162 Move X0, [X23]
	163 Add S8, S14, S8
	164 Add S9, S13, S9
	165 Add S10, S12, S10
	166 Move W8, [X0+224]
	167 Compare W8, 0
	168 JumpIfNotEqual {170}
	169 Call 0x1C17DFC
	170 Multiply S0, S8, S8
	171 Multiply S1, S9, S9
	172 Add S0, S0, S1
	173 Multiply S1, S10, S10
	174 Add S0, S1, S0
	175 NotImplemented "Instruction FSQRT not yet implemented."
	176 NotImplemented "Instruction FCMP not yet implemented."
	177 NotImplemented "Instruction FDIV not yet implemented."
	178 NotImplemented "Instruction FDIV not yet implemented."
	179 NotImplemented "Instruction FDIV not yet implemented."
	180 Move X20, 0x261F000
	181 Move W8, [X20+1923]
	182 Compare W8, 0
	183 JumpIfNotEqual {189}
	184 Move X0, 0x233A000
	185 Move X0, [X0+1440]
	186 Call 0x1C17CF4
	187 Move W8, 1
	188 Move [X20+1923], W8
	189 Move X8, [X21]
	190 Move X8, [X8+184]
	191 Move S8, [X8]
	192 Move S9, [X8+4]
	193 Move V10, [X8+8]
	194 Move X0, [X19+48]
	195 Compare X0, 0
	196 JumpIfEqual {322}
	197 Move X20, [X19+72]
	198 Move X1, X31
	199 Call Transform.get_right, X0
	200 NotImplemented "Instruction FNEG not yet implemented."
	201 NotImplemented "Instruction FNEG not yet implemented."
	202 NotImplemented "Instruction FNEG not yet implemented."
	203 Move V0, V8
	204 Move V1, V9
	205 Move V2, V10
	206 Move X0, X31
	207 Call Quaternion.LookRotation, X0, X1
	208 Compare X20, 0
	209 JumpIfEqual {322}
	210 Move X0, X20
	211 Move X1, X31
	212 Call Transform.set_rotation, X0, X1
	213 Move X0, [X19+56]
	214 Compare X0, 0
	215 JumpIfEqual {322}
	216 Move X20, [X19+80]
	217 Move X1, X31
	218 Call Transform.get_position, X0
	219 Compare X20, 0
	220 JumpIfEqual {322}
	221 Move X0, X20
	222 Move X1, X31
	223 Call Transform.set_position, X0, X1
	224 Move X0, [X19+80]
	225 Compare X0, 0
	226 JumpIfEqual {322}
	227 Move X1, X31
	228 Call Transform.get_position, X0
	229 Move X0, [X19+96]
	230 Compare X0, 0
	231 JumpIfEqual {322}
	232 Move X1, X31
	233 Move V8, V0
	234 Move V9, V1
	235 Move V10, V2
	236 Call Transform.get_position, X0
	237 Move X0, [X19+56]
	238 Compare X0, 0
	239 JumpIfEqual {322}
	240 Move X1, X31
	241 Subtract S12, S10, S2
	242 Subtract S13, S9, S1
	243 Subtract S14, S8, S0
	244 Call Transform.get_forward, X0
	245 Move W8, [X22+1925]
	246 Move V8, V0
	247 Move V9, V1
	248 Move V10, V2
	249 Compare W8, 0
	250 JumpIfNotEqual {256}
	251 Move X0, 0x233A000
	252 Move X0, [X0+1448]
	253 Call 0x1C17CF4
	254 Move W8, 1
	255 Move [X22+1925], W8
	256 Move X0, [X23]
	257 Add S8, S14, S8
	258 Add S9, S13, S9
	259 Add S10, S12, S10
	260 Move W8, [X0+224]
	261 Compare W8, 0
	262 JumpIfNotEqual {264}
	263 Call 0x1C17DFC
	264 Multiply S0, S8, S8
	265 Multiply S1, S9, S9
	266 Add S0, S0, S1
	267 Multiply S1, S10, S10
	268 Add S0, S1, S0
	269 NotImplemented "Instruction FSQRT not yet implemented."
	270 NotImplemented "Instruction FCMP not yet implemented."
	271 NotImplemented "Instruction FDIV not yet implemented."
	272 NotImplemented "Instruction FDIV not yet implemented."
	273 NotImplemented "Instruction FDIV not yet implemented."
	274 Move X20, 0x261F000
	275 Move W8, [X20+1923]
	276 Compare W8, 0
	277 JumpIfNotEqual {283}
	278 Move X0, 0x233A000
	279 Move X0, [X0+1440]
	280 Call 0x1C17CF4
	281 Move W8, 1
	282 Move [X20+1923], W8
	283 Move X8, [X21]
	284 Move X8, [X8+184]
	285 Move S8, [X8]
	286 Move S9, [X8+4]
	287 Move V10, [X8+8]
	288 Move X0, [X19+56]
	289 Compare X0, 0
	290 JumpIfEqual {322}
	291 Move X19, [X19+80]
	292 Move X1, X31
	293 Call Transform.get_right, X0
	294 NotImplemented "Instruction FNEG not yet implemented."
	295 NotImplemented "Instruction FNEG not yet implemented."
	296 NotImplemented "Instruction FNEG not yet implemented."
	297 Move V0, V8
	298 Move V1, V9
	299 Move V2, V10
	300 Move X0, X31
	301 Call Quaternion.LookRotation, X0, X1
	302 Compare X19, 0
	303 JumpIfEqual {322}
	304 Move X0, X19
	305 Move X20, [X31+96]
	306 Move X19, [X31+104]
	307 Move X22, [X31+80]
	308 Move X21, [X31+88]
	309 Move X24, [X31+64]
	310 Move X23, [X31+72]
	311 Move X30, [X31+56]
	312 Move D9, [X31+40]
	313 Move D8, [X31+48]
	314 Move D11, [X31+24]
	315 Move D10, [X31+32]
	316 Move D13, [X31+8]
	317 Move D12, [X31+16]
	318 Move X1, X31
	319 Move V14, [X31+112]
	320 Call Transform.set_rotation, X0, X1
	321 Return 
	322 Call 0x1C17F20

Method: System.Void SetColor(UnityEngine.Color color)

Disassembly:
	0x01DBAA4C LDR X0, [X0 + 0x70]
	0x01DBAA50 RET
	0x01DBAA54 STR X1, [X0 + 0x70]
	0x01DBAA58 RET
	0x01DBAA5C LDR X0, [X0 + 0x78]
	0x01DBAA60 RET
	0x01DBAA64 STR X1, [X0 + 0x78]
	0x01DBAA68 RET
	0x01DBAA6C LDR X0, [X0 + 0x80]
	0x01DBAA70 RET
	0x01DBAA74 STR X1, [X0 + 0x80]
	0x01DBAA78 RET
	0x01DBAA7C STP X30, X23, [X31 - 0x30]!
	0x01DBAA80 STP X22, X21, [X31 + 0x10]
	0x01DBAA84 STP X20, X19, [X31 + 0x20]
	0x01DBAA88 ADRP X20, 0x261E000
	0x01DBAA8C ADRP X23, 0x2339000
	0x01DBAA90 ADRP X21, 0x233D000
	0x01DBAA94 ADRP X22, 0x2339000
	0x01DBAA98 LDRB W8, [X20 + 0xB3D]
	0x01DBAA9C LDR X23, [X23 + 0xDA0]
	0x01DBAAA0 LDR X21, [X21 + 0xD80]
	0x01DBAAA4 LDR X22, [X22 + 0xDB0]
	0x01DBAAA8 MOV X19, X0
	0x01DBAAAC TBNZ X8, 0x0, 0x1DBAAE8
	0x01DBAAB0 ADRP X0, 0x2339000
	0x01DBAAB4 LDR X0, [X0 + 0xDB0]
	0x01DBAAB8 BL 0x1C16CF4
	0x01DBAABC ADRP X0, 0x233D000
	0x01DBAAC0 LDR X0, [X0 + 0xD80]
	0x01DBAAC4 BL 0x1C16CF4
	0x01DBAAC8 ADRP X0, 0x2339000
	0x01DBAACC LDR X0, [X0 + 0xDA0]
	0x01DBAAD0 BL 0x1C16CF4
	0x01DBAAD4 ADRP X0, 0x233D000
	0x01DBAAD8 LDR X0, [X0 + 0xD88]
	0x01DBAADC BL 0x1C16CF4
	0x01DBAAE0 MOVZ W8, 0x1
	0x01DBAAE4 STRB W8, [X20 + 0xB3D]
	0x01DBAAE8 LDR X0, [X23]
	0x01DBAAEC LDR X20, [X19 + 0x48]
	0x01DBAAF0 BL 0x1C16F10
	0x01DBAAF4 LDR X2, [X21]
	0x01DBAAF8 MOV X1, X19
	0x01DBAAFC MOV X3, X31
	0x01DBAB00 MOV X21, X0
	0x01DBAB04 BL 0x35C52F0
	0x01DBAB08 LDR X0, [X22]
	0x01DBAB0C MOVZ W1, 0x1
	0x01DBAB10 BL 0x1C16D6C
	0x01DBAB14 CBZ X0, 0x1DBAB70
	0x01DBAB18 LDR X19, [X19 + 0x50]
	0x01DBAB1C MOV X22, X0
	0x01DBAB20 CBZ X19, 0x1DBAB38
	0x01DBAB24 LDR X8, [X22]
	0x01DBAB28 MOV X0, X19
	0x01DBAB2C LDR X1, [X8 + 0x40]
	0x01DBAB30 BL 0x1C16E00
	0x01DBAB34 CBZ X0, 0x1DBAB78
	0x01DBAB38 LDR W8, [X22 + 0x18]
	0x01DBAB3C CBZ W8, 0x1DBAB74
	0x01DBAB40 STR X19, [X22 + 0x20]
	0x01DBAB44 CBZ X20, 0x1DBAB70
	0x01DBAB48 ADRP X8, 0x233D000
	0x01DBAB4C LDR X8, [X8 + 0xD88]
	0x01DBAB50 MOV X0, X20
	0x01DBAB54 MOV X1, X21
	0x01DBAB58 MOV X2, X22
	0x01DBAB5C LDR X3, [X8]
	0x01DBAB60 LDP X20, X19, [X31 + 0x20]
	0x01DBAB64 LDP X22, X21, [X31 + 0x10]
	0x01DBAB68 LDP X30, X23, [X31], #0x30
	0x01DBAB6C B 0x26539C0
	0x01DBAB70 BL 0x1C16F20
	0x01DBAB74 BL 0x1C16F28
	0x01DBAB78 BL 0x1C16F44
	0x01DBAB7C MOV X1, X31
	0x01DBAB80 BL 0x1C16DEC
	0x01DBAB84 MOV X1, X31
	0x01DBAB88 B 0x35CD9D4
	0x01DBAB8C STR X30, [X31 - 0x20]!
	0x01DBAB90 STP X20, X19, [X31 + 0x10]
	0x01DBAB94 ADRP X20, 0x261E000
	0x01DBAB98 LDRB W8, [X20 + 0xB3E]
	0x01DBAB9C MOV X19, X0
	0x01DBABA0 TBNZ X8, 0x0, 0x1DBABC4
	0x01DBABA4 ADRP X0, 0x2339000
	0x01DBABA8 LDR X0, [X0 + 0xDC8]
	0x01DBABAC BL 0x1C16CF4
	0x01DBABB0 ADRP X0, 0x2339000
	0x01DBABB4 LDR X0, [X0 + 0xE30]
	0x01DBABB8 BL 0x1C16CF4
	0x01DBABBC MOVZ W8, 0x1
	0x01DBABC0 STRB W8, [X20 + 0xB3E]
	0x01DBABC4 LDR X8, [X19 + 0x50]
	0x01DBABC8 CBZ X8, 0x1DBAC04
	0x01DBABCC LDR X0, [X8 + 0x50]
	0x01DBABD0 LDR X19, [X19 + 0x48]
	0x01DBABD4 MOV X1, X31
	0x01DBABD8 BL 0x32277A8
	0x01DBABDC CBZ X19, 0x1DBAC04
	0x01DBABE0 ADRP X8, 0x2339000
	0x01DBABE4 LDR X8, [X8 + 0xE30]
	0x01DBABE8 LDR X2, [X8]
	0x01DBABEC ORN W8, W31, W0, 0x0

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], D11
	003 Move [X31+40], D10
	004 Move [X31+48], D9
	005 Move [X31+56], D8
	006 Move [X31+64], X30
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X20, 0x261F000
	010 Move W8, [X20+2859]
	011 Move V8, V3
	012 Move V9, V2
	013 Move V10, V1
	014 Move V11, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {37}
	020 Move X0, 0x233E000
	021 Move X0, [X0+3240]
	022 Call 0x1C17CF4
	023 Move X0, 0x233E000
	024 Move X0, [X0+3248]
	025 Call 0x1C17CF4
	026 Move X0, 0x233E000
	027 Move X0, [X0+3256]
	028 Call 0x1C17CF4
	029 Move X0, 0x233E000
	030 Move X0, [X0+3264]
	031 Call 0x1C17CF4
	032 Move X0, 0x233E000
	033 Move X0, [X0+3272]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+2859], W8
	037 Move [X31+8], X31
	038 Move [X31+16], X31
	039 Move [X31+24], X31
	040 Move X0, [X19+120]
	041 Move [X19+104], S11
	042 Move [X19+112], S10
	043 Move [X19+112], S9
	044 Move [X19+120], S8
	045 Compare X0, 0
	046 JumpIfEqual {91}
	047 Move X8, 0x233E000
	048 Move X8, [X8+3240]
	049 Move X1, [X8]
	050 Call Dictionary`2<Object, Object>.get_Values, X0
	051 Compare X0, 0
	052 JumpIfEqual {91}
	053 Move X8, 0x233E000
	054 Move X8, [X8+3272]
	055 Move X20, 0x233E000
	056 Move X19, 0x233E000
	057 Move X1, [X8]
	058 Move X20, [X20+3256]
	059 Move X19, [X19+3248]
	060 Add X8, X31, 8
	061 Call ValueCollection<Object, Object>.GetEnumerator, X0
	062 Move X1, [X20]
	063 Add X0, X31, 8
	064 Call Enumerator<Object, Object>.MoveNext, X0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {78}
	069 Move X0, [X31+24]
	070 Compare X0, 0
	071 JumpIfEqual {90}
	072 Move V0, V11
	073 Move V1, V10
	074 Move V2, V9
	075 Move V3, V8
	076 Move X1, X31
	077 Call Material.set_color, X0, X1
	078 Move X1, [X19]
	079 Add X0, X31, 8
	080 Call Enumerator<Object, Object>.Dispose, X0
	081 Move X20, [X31+80]
	082 Move X19, [X31+88]
	083 Move X30, [X31+64]
	084 Move D9, [X31+48]
	085 Move D8, [X31+56]
	086 Move D11, [X31+32]
	087 Move D10, [X31+40]
	088 Add X31, X31, 96
	089 Return 
	090 Call 0x1C17F20
	091 Call 0x1C17F20
	092 Move X19, X0
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X0, X19
	095 Call 0x3EB2AD0
	096 Move X20, [X0]
	097 Call 0x3EB2AE0
	098 Move X8, 0x233E000
	099 Move X8, [X8+3248]
	100 Add X0, X31, 8
	101 Move X1, [X8]
	102 Call Enumerator<Object, Object>.Dispose, X0
	103 Compare X20, 0
	104 JumpIfEqual {81}
	105 Move X0, X20
	106 Call 0x1C17F18
	107 Move X20, X31
	108 Move X19, X0
	109 Move X8, 0x233E000
	110 Move X8, [X8+3248]
	111 Move X1, [X8]
	112 Add X0, X31, 8
	113 Call Enumerator<Object, Object>.Dispose, X0
	114 Compare X20, 0
	115 JumpIfNotEqual {118}
	116 Move X0, X19
	117 Call 0x1D2D690
	118 Move X0, X20
	119 Call 0x1C17F18
	120 Call 0x1991590

Method: System.Void .ctor()

Disassembly:
	0x01DBABF0 MOV X0, X19
	0x01DBABF4 LDP X20, X19, [X31 + 0x10]
	0x01DBABF8 AND W1, W8, 0x1
	0x01DBABFC LDR X30, [X31], #0x20
	0x01DBAC00 B 0x26518D0
	0x01DBAC04 BL 0x1C16F20
	0x01DBAC08 LDR W0, [X0 + 0x48]
	0x01DBAC0C RET
	0x01DBAC10 STR W1, [X0 + 0x48]
	0x01DBAC14 RET
	0x01DBAC18 LDR X0, [X0 + 0x50]
	0x01DBAC1C RET
	0x01DBAC20 STR X1, [X0 + 0x50]
	0x01DBAC24 RET
	0x01DBAC28 LDR X0, [X0 + 0x58]
	0x01DBAC2C RET
	0x01DBAC30 STR X1, [X0 + 0x58]
	0x01DBAC34 RET
	0x01DBAC38 LDR X0, [X0 + 0x60]
	0x01DBAC3C RET
	0x01DBAC40 STR X1, [X0 + 0x60]
	0x01DBAC44 RET
	0x01DBAC48 STR W1, [X0 + 0x48]
	0x01DBAC4C RET
	0x01DBAC50 MOV X1, X31
	0x01DBAC54 B 0x35CD9D4
	0x01DBAC58 STP X30, X21, [X31 - 0x20]!
	0x01DBAC5C STP X20, X19, [X31 + 0x10]
	0x01DBAC60 ADRP X21, 0x261E000
	0x01DBAC64 ADRP X20, 0x2339000
	0x01DBAC68 LDRB W8, [X21 + 0xB3F]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x261F000
	007 Move X22, 0x233E000
	008 Move X20, 0x233E000
	009 Move W8, [X21+2860]
	010 Move X22, [X22+3280]
	011 Move X20, [X20+3288]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x233E000
	018 Move X0, [X0+3288]
	019 Call 0x1C17CF4
	020 Move X0, 0x233E000
	021 Move X0, [X0+3280]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2860], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, [X20]
	028 Move X20, X0
	029 Call Dictionary`2<Object, Object>..ctor, X0
	030 Move [X19+120], X20
	031 Move X0, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X1, X31
	037 Move X30, [X31+48]
	038 Call MonoBehaviour..ctor, X0
	039 Return 

