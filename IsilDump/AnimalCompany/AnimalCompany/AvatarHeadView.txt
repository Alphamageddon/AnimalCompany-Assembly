Type: AnimalCompany.AvatarHeadView

Method: System.Void Setup(AnimalCompany.UserAvatarState avatarState)

Disassembly:
	0x01D7DBE8 MOV X1, X31
	0x01D7DBEC BL 0x1D36978
	0x01D7DBF0 LDR X0, [X21]
	0x01D7DBF4 BL 0x1C16F10
	0x01D7DBF8 LDR X2, [X27]
	0x01D7DBFC MOV X1, X19
	0x01D7DC00 MOV X3, X31
	0x01D7DC04 MOV X20, X0
	0x01D7DC08 BL 0x35C52F0
	0x01D7DC0C MOV X0, X20
	0x01D7DC10 MOV X1, X31
	0x01D7DC14 BL 0x1D36978
	0x01D7DC18 LDR X0, [X21]
	0x01D7DC1C BL 0x1C16F10
	0x01D7DC20 LDR X2, [X26]
	0x01D7DC24 MOV X1, X19
	0x01D7DC28 MOV X3, X31
	0x01D7DC2C MOV X20, X0
	0x01D7DC30 BL 0x35C52F0
	0x01D7DC34 MOV X0, X20
	0x01D7DC38 MOV X1, X31
	0x01D7DC3C BL 0x1D36978
	0x01D7DC40 LDR X0, [X21]
	0x01D7DC44 BL 0x1C16F10
	0x01D7DC48 LDR X2, [X24]
	0x01D7DC4C MOV X1, X19
	0x01D7DC50 MOV X3, X31
	0x01D7DC54 MOV X20, X0
	0x01D7DC58 BL 0x35C52F0
	0x01D7DC5C MOV X0, X20
	0x01D7DC60 MOV X1, X31
	0x01D7DC64 BL 0x1D36978
	0x01D7DC68 LDR X0, [X21]
	0x01D7DC6C BL 0x1C16F10
	0x01D7DC70 LDR X2, [X23]
	0x01D7DC74 MOV X1, X19
	0x01D7DC78 MOV X3, X31
	0x01D7DC7C MOV X20, X0
	0x01D7DC80 BL 0x35C52F0
	0x01D7DC84 MOV X0, X20
	0x01D7DC88 MOV X1, X31
	0x01D7DC8C BL 0x1D36978
	0x01D7DC90 LDR X0, [X21]
	0x01D7DC94 BL 0x1C16F10
	0x01D7DC98 LDR X2, [X22]
	0x01D7DC9C MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x265C000
	006 Move W8, [X21+2381]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2378000
	014 Move X0, [X0+2840]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2381], W8
	018 Move X0, [X19+32]
	019 Compare X0, 0
	020 JumpIfEqual {65}
	021 Move X1, X31
	022 Call Component.get_gameObject, X0
	023 Compare X0, 0
	024 JumpIfEqual {65}
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSET not yet implemented."
	027 Move X2, X31
	028 Call GameObject.SetActive, X0, X1
	029 Compare X20, 0
	030 JumpIfEqual {60}
	031 Move X0, [X19+32]
	032 Compare X0, 0
	033 JumpIfEqual {65}
	034 Move X1, X20
	035 Move X2, X31
	036 Call AvatarView.UpdateAvatar, X0, X1
	037 Move X8, [X20+80]
	038 Compare X8, 0
	039 JumpIfEqual {65}
	040 Move X0, [X19+32]
	041 Compare X0, 0
	042 JumpIfEqual {65}
	043 Move S2, [X8+84]
	044 Move S3, [X8+88]
	045 Move S0, [X8+76]
	046 Move S1, [X8+80]
	047 Move X1, X31
	048 Call AvatarView.SetColor, X0, X1
	049 Move X0, [X19+32]
	050 Compare X0, 0
	051 JumpIfEqual {65}
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move W1, 1
	055 Move X2, X31
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Call AvatarView.SetIsHeadOnly, X0, X1
	059 Return 
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Return 
	065 Call 0x1C17F20

Method: System.Void UpdateVoice(System.Single volume)

Disassembly:
	0x01D7DCA0 MOV X3, X31
	0x01D7DCA4 MOV X20, X0
	0x01D7DCA8 BL 0x35C52F0
	0x01D7DCAC MOV X0, X20
	0x01D7DCB0 MOV X1, X31
	0x01D7DCB4 BL 0x1D36978
	0x01D7DCB8 LDR X22, [X19 + 0x20]

ISIL:
	001 Move S1, 1
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction FMIN not yet implemented."
	004 Move S1, W31
	005 NotImplemented "Instruction FCSEL not yet implemented."
	006 Move [X0+64], S0
	007 Return 

Method: System.Void Update()

Disassembly:
	0x01D7DCBC CBZ X22, 0x1D7DDD8
	0x01D7DCC0 ADRP X23, 0x2379000
	0x01D7DCC4 LDR X23, [X23 + 0x478]
	0x01D7DCC8 ADRP X21, 0x2379000
	0x01D7DCCC LDR X20, [X22 + 0x20]
	0x01D7DCD0 LDR X0, [X23]
	0x01D7DCD4 LDR X21, [X21 + 0x498]
	0x01D7DCD8 BL 0x1C16F10
	0x01D7DCDC LDR X2, [X21]
	0x01D7DCE0 MOV X1, X19
	0x01D7DCE4 MOV X3, X31
	0x01D7DCE8 MOV X21, X0
	0x01D7DCEC BL 0x2A76254
	0x01D7DCF0 MOV X0, X20
	0x01D7DCF4 MOV X1, X21
	0x01D7DCF8 MOV X2, X31
	0x01D7DCFC BL 0x33C0FDC
	0x01D7DD00 CBZ X0, 0x1D7DD3C
	0x01D7DD04 LDR X21, [X23]
	0x01D7DD08 MOV X20, X0
	0x01D7DD0C MOV X1, X21
	0x01D7DD10 BL 0x1C16E00
	0x01D7DD14 CBZ X0, 0x1D7DD30
	0x01D7DD18 STR X0, [X22 + 0x20]
	0x01D7DD1C LDR X21, [X23]
	0x01D7DD20 MOV X0, X20
	0x01D7DD24 MOV X1, X21
	0x01D7DD28 BL 0x1C16E00
	0x01D7DD2C CBNZ X0, 0x1D7DD40
	0x01D7DD30 MOV X0, X20
	0x01D7DD34 MOV X1, X21
	0x01D7DD38 B 0x1D7DDB4
	0x01D7DD3C STR X31, [X22 + 0x20]
	0x01D7DD40 LDR X8, [X19 + 0x28]
	0x01D7DD44 CBZ X8, 0x1D7DDD8
	0x01D7DD48 LDR X22, [X8 + 0xB0]
	0x01D7DD4C CBZ X22, 0x1D7DDD8
	0x01D7DD50 ADRP X23, 0x2377000
	0x01D7DD54 LDR X23, [X23 + 0xE70]
	0x01D7DD58 ADRP X21, 0x2379000
	0x01D7DD5C LDR X20, [X22 + 0x20]
	0x01D7DD60 LDR X0, [X23]
	0x01D7DD64 LDR X21, [X21 + 0x480]
	0x01D7DD68 BL 0x1C16F10
	0x01D7DD6C LDR X2, [X21]
	0x01D7DD70 MOV X1, X19
	0x01D7DD74 MOV X3, X31
	0x01D7DD78 MOV X21, X0
	0x01D7DD7C BL 0x3314368
	0x01D7DD80 MOV X0, X20
	0x01D7DD84 MOV X1, X21
	0x01D7DD88 MOV X2, X31
	0x01D7DD8C BL 0x33C0FDC
	0x01D7DD90 CBZ X0, 0x1D7DDB8
	0x01D7DD94 LDR X1, [X23]
	0x01D7DD98 LDR X8, [X0]
	0x01D7DD9C CMP X8, X1
	0x01D7DDA0 B.NE 0x1D7DDB4
	0x01D7DDA4 STR X0, [X22 + 0x20]
	0x01D7DDA8 LDR X8, [X0]
	0x01D7DDAC CMP X8, X1
	0x01D7DDB0 B.EQ 0x1D7DDBC
	0x01D7DDB4 BL 0x1C171E0
	0x01D7DDB8 STR X0, [X22 + 0x20]
	0x01D7DDBC LDP X20, X19, [X31 + 0x50]
	0x01D7DDC0 LDP X22, X21, [X31 + 0x40]
	0x01D7DDC4 LDP X24, X23, [X31 + 0x30]
	0x01D7DDC8 LDP X26, X25, [X31 + 0x20]
	0x01D7DDCC LDP X28, X27, [X31 + 0x10]
	0x01D7DDD0 LDR X30, [X31], #0x60
	0x01D7DDD4 RET
	0x01D7DDD8 BL 0x1C16F20
	0x01D7DDDC SUB X31, X31, 0x90
	0x01D7DDE0 STP X29, X30, [X31 + 0x30]
	0x01D7DDE4 STP X28, X27, [X31 + 0x40]
	0x01D7DDE8 STP X26, X25, [X31 + 0x50]
	0x01D7DDEC STP X24, X23, [X31 + 0x60]
	0x01D7DDF0 STP X22, X21, [X31 + 0x70]
	0x01D7DDF4 STP X20, X19, [X31 + 0x80]
	0x01D7DDF8 ADRP X20, 0x265B000
	0x01D7DDFC LDRB W8, [X20 + 0x952]
	0x01D7DE00 MOV X19, X0
	0x01D7DE04 TBNZ X8, 0x0, 0x1D7DF3C
	0x01D7DE08 ADRP X0, 0x2377000
	0x01D7DE0C LDR X0, [X0 + 0xE68]
	0x01D7DE10 BL 0x1C16CF4
	0x01D7DE14 ADRP X0, 0x2376000
	0x01D7DE18 LDR X0, [X0 + 0x648]
	0x01D7DE1C BL 0x1C16CF4
	0x01D7DE20 ADRP X0, 0x2377000
	0x01D7DE24 LDR X0, [X0 + 0x9F0]
	0x01D7DE28 BL 0x1C16CF4
	0x01D7DE2C ADRP X0, 0x2379000
	0x01D7DE30 LDR X0, [X0 + 0x4C8]
	0x01D7DE34 BL 0x1C16CF4
	0x01D7DE38 ADRP X0, 0x2379000
	0x01D7DE3C LDR X0, [X0 + 0x4D0]
	0x01D7DE40 BL 0x1C16CF4
	0x01D7DE44 ADRP X0, 0x2379000
	0x01D7DE48 LDR X0, [X0 + 0x4D8]
	0x01D7DE4C BL 0x1C16CF4
	0x01D7DE50 ADRP X0, 0x2379000
	0x01D7DE54 LDR X0, [X0 + 0x4E0]
	0x01D7DE58 BL 0x1C16CF4
	0x01D7DE5C ADRP X0, 0x2379000
	0x01D7DE60 LDR X0, [X0 + 0x4E8]
	0x01D7DE64 BL 0x1C16CF4
	0x01D7DE68 ADRP X0, 0x2379000
	0x01D7DE6C LDR X0, [X0 + 0x4F0]
	0x01D7DE70 BL 0x1C16CF4
	0x01D7DE74 ADRP X0, 0x2379000
	0x01D7DE78 LDR X0, [X0 + 0x4F8]
	0x01D7DE7C BL 0x1C16CF4
	0x01D7DE80 ADRP X0, 0x2379000
	0x01D7DE84 LDR X0, [X0 + 0x500]
	0x01D7DE88 BL 0x1C16CF4
	0x01D7DE8C ADRP X0, 0x2379000
	0x01D7DE90 LDR X0, [X0 + 0x508]
	0x01D7DE94 BL 0x1C16CF4
	0x01D7DE98 ADRP X0, 0x2379000
	0x01D7DE9C LDR X0, [X0 + 0x510]
	0x01D7DEA0 BL 0x1C16CF4
	0x01D7DEA4 ADRP X0, 0x2379000
	0x01D7DEA8 LDR X0, [X0 + 0x518]
	0x01D7DEAC BL 0x1C16CF4
	0x01D7DEB0 ADRP X0, 0x2379000
	0x01D7DEB4 LDR X0, [X0 + 0x520]
	0x01D7DEB8 BL 0x1C16CF4
	0x01D7DEBC ADRP X0, 0x2379000
	0x01D7DEC0 LDR X0, [X0 + 0x528]
	0x01D7DEC4 BL 0x1C16CF4
	0x01D7DEC8 ADRP X0, 0x2376000
	0x01D7DECC LDR X0, [X0 + 0x758]
	0x01D7DED0 BL 0x1C16CF4
	0x01D7DED4 ADRP X0, 0x2379000
	0x01D7DED8 LDR X0, [X0 + 0x530]
	0x01D7DEDC BL 0x1C16CF4
	0x01D7DEE0 ADRP X0, 0x2379000
	0x01D7DEE4 LDR X0, [X0 + 0x538]
	0x01D7DEE8 BL 0x1C16CF4
	0x01D7DEEC ADRP X0, 0x2379000
	0x01D7DEF0 LDR X0, [X0 + 0x540]
	0x01D7DEF4 BL 0x1C16CF4
	0x01D7DEF8 ADRP X0, 0x2379000
	0x01D7DEFC LDR X0, [X0 + 0x548]
	0x01D7DF00 BL 0x1C16CF4
	0x01D7DF04 ADRP X0, 0x2379000
	0x01D7DF08 LDR X0, [X0 + 0x550]
	0x01D7DF0C BL 0x1C16CF4
	0x01D7DF10 ADRP X0, 0x2378000
	0x01D7DF14 LDR X0, [X0 + 0xC10]
	0x01D7DF18 BL 0x1C16CF4
	0x01D7DF1C ADRP X0, 0x2379000
	0x01D7DF20 LDR X0, [X0 + 0x558]
	0x01D7DF24 BL 0x1C16CF4
	0x01D7DF28 ADRP X0, 0x2377000
	0x01D7DF2C LDR X0, [X0 + 0xA20]
	0x01D7DF30 BL 0x1C16CF4
	0x01D7DF34 MOVZ W8, 0x1
	0x01D7DF38 STRB W8, [X20 + 0x952]
	0x01D7DF3C ADRP X27, 0x2377000
	0x01D7DF40 ADRP X26, 0x2377000
	0x01D7DF44 ADRP X28, 0x2379000
	0x01D7DF48 ADRP X25, 0x2379000
	0x01D7DF4C ADRP X29, 0x2379000
	0x01D7DF50 ADRP X20, 0x2376000
	0x01D7DF54 LDR X27, [X27 + 0xA20]
	0x01D7DF58 LDR X26, [X26 + 0xE68]
	0x01D7DF5C LDR X28, [X28 + 0x508]
	0x01D7DF60 LDR X25, [X25 + 0x4C8]
	0x01D7DF64 LDR X29, [X29 + 0x548]
	0x01D7DF68 LDR X20, [X20 + 0x648]
	0x01D7DF6C STP X31, X31, [X31 + 0x20]
	0x01D7DF70 STR W31, [X31 + 0x1C]
	0x01D7DF74 STR X31, [X31 + 0x10]
	0x01D7DF78 ADD X0, X31, 0x2C
	0x01D7DF7C MOV X1, X31
	0x01D7DF80 BL 0x337B6E0
	0x01D7DF84 LDR X8, [X27]
	0x01D7DF88 MOV X1, X0
	0x01D7DF8C MOV X2, X31

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x265C000
	012 Move W8, [X20+2382]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x237A000
	019 Move X0, [X0+1128]
	020 Call 0x1C17CF4
	021 Move X0, 0x2377000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2382], W8
	026 Move X0, [X19+32]
	027 Compare X0, 0
	028 JumpIfEqual {226}
	029 Move X1, X31
	030 Call Component.get_gameObject, X0
	031 Compare X0, 0
	032 JumpIfEqual {226}
	033 Move X1, X31
	034 Call GameObject.get_activeSelf, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {215}
	039 Move S3, [X19+60]
	040 Move S0, [X19+64]
	041 Move S1, -0.5
	042 Move S4, [X19+40]
	043 Move S2, [X19+44]
	044 Move S8, 1
	045 Add S1, S0, S1
	046 Move V10, [X19+56]
	047 Add S1, S1, S1
	048 Move S9, W31
	049 NotImplemented "Instruction FCMP not yet implemented."
	050 NotImplemented "Instruction FMIN not yet implemented."
	051 NotImplemented "Instruction FMIN not yet implemented."
	052 NotImplemented "Instruction FCSEL not yet implemented."
	053 NotImplemented "Instruction FCMP not yet implemented."
	054 Subtract S1, S9, S3
	055 NotImplemented "Instruction FCSEL not yet implemented."
	056 Multiply S1, S1, S2
	057 Subtract S0, S0, S10
	058 Add S1, S3, S1
	059 Multiply S0, S0, S4
	060 Add S12, S0, S1
	061 Move X0, X31
	062 Move [X19+60], S12
	063 Call Time.get_deltaTime
	064 Multiply S0, S0, S12
	065 Add S0, S10, S0
	066 Move [X19+56], S0
	067 Multiply S0, S0, S0
	068 Multiply S1, S0, S0
	069 Add S0, S0, S0
	070 Move S2, 3
	071 Subtract S0, S2, S0
	072 Move X0, X31
	073 Multiply S10, S1, S0
	074 Call Time.get_time
	075 Move V1, [X19+48]
	076 Multiply S0, S0, S1
	077 Call 0x3EB2B70
	078 Move V1, [X19+52]
	079 Multiply S0, S11, S0
	080 Move X0, [X19+32]
	081 Subtract S2, S8, S1
	082 Multiply S0, S1, S0
	083 Multiply S1, S2, S10
	084 Add S0, S0, S1
	085 NotImplemented "Instruction FMIN not yet implemented."
	086 NotImplemented "Instruction FCMP not yet implemented."
	087 NotImplemented "Instruction FCSEL not yet implemented."
	088 Compare X0, 0
	089 JumpIfEqual {226}
	090 Move X1, X31
	091 Call AvatarView.get_headRenderer, X0
	092 Move X21, 0x2377000
	093 Move X21, [X21+1432]
	094 Move X20, X0
	095 Move X8, [X21]
	096 Move W9, [X8+224]
	097 Compare W9, 0
	098 JumpIfNotEqual {101}
	099 Move X0, X8
	100 Call 0x1C17DFC
	101 Move X0, X20
	102 Move X1, X31
	103 Move X2, X31
	104 Call Object.op_Inequality, X0, X1
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {118}
	109 Compare X20, 0
	110 JumpIfEqual {226}
	111 Move W8, 0x42C80000
	112 Move S0, W8
	113 Multiply S0, S8, S0
	114 Move X0, X20
	115 Move W1, W31
	116 Move X2, X31
	117 Call SkinnedMeshRenderer.SetBlendShapeWeight, X0, X1, V0
	118 Move X0, [X19+32]
	119 Compare X0, 0
	120 JumpIfEqual {226}
	121 Move X1, X31
	122 Call AvatarView.get_eyeLeftMaterial, X0
	123 Move X8, [X21]
	124 Move X20, X0
	125 Move W9, [X8+224]
	126 Compare W9, 0
	127 JumpIfNotEqual {130}
	128 Move X0, X8
	129 Call 0x1C17DFC
	130 Move X0, X20
	131 Move X1, X31
	132 Move X2, X31
	133 Call Object.op_Inequality, X0, X1
	134 Move TEMP, X0
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfNotEqual {161}
	138 Move X0, [X19+32]
	139 Compare X0, 0
	140 JumpIfEqual {226}
	141 Move X1, X31
	142 Call AvatarView.get_eyeLeftMaterial, X0
	143 Move X22, 0x237A000
	144 Move X22, [X22+1128]
	145 Move X20, X0
	146 Move X8, [X22]
	147 Move W9, [X8+224]
	148 Compare W9, 0
	149 JumpIfNotEqual {152}
	150 Move X0, X8
	151 Call 0x1C17DFC
	152 Compare X20, 0
	153 JumpIfEqual {226}
	154 Move X8, [X22]
	155 Move X0, X20
	156 Move V0, V8
	157 Move X2, X31
	158 Move X8, [X8+184]
	159 Move W1, [X8]
	160 Call Material.SetFloat, X0, X1, V0
	161 Move X0, [X19+32]
	162 Compare X0, 0
	163 JumpIfEqual {226}
	164 Move X1, X31
	165 Call AvatarView.get_eyeRightMaterial, X0
	166 Move X8, [X21]
	167 Move X20, X0
	168 Move W9, [X8+224]
	169 Compare W9, 0
	170 JumpIfNotEqual {173}
	171 Move X0, X8
	172 Call 0x1C17DFC
	173 Move X0, X20
	174 Move X1, X31
	175 Move X2, X31
	176 Call Object.op_Inequality, X0, X1
	177 Move TEMP, X0
	178 And TEMP, TEMP, 1
	179 Compare TEMP, 1
	180 JumpIfNotEqual {215}
	181 Move X0, [X19+32]
	182 Compare X0, 0
	183 JumpIfEqual {226}
	184 Move X1, X31
	185 Call AvatarView.get_eyeRightMaterial, X0
	186 Move X20, 0x237A000
	187 Move X20, [X20+1128]
	188 Move X19, X0
	189 Move X8, [X20]
	190 Move W9, [X8+224]
	191 Compare W9, 0
	192 JumpIfNotEqual {195}
	193 Move X0, X8
	194 Call 0x1C17DFC
	195 Compare X19, 0
	196 JumpIfEqual {226}
	197 Move X8, [X20]
	198 Move X0, X19
	199 Move V0, V8
	200 Move X20, [X31+64]
	201 Move X19, [X31+72]
	202 Move X8, [X8+184]
	203 Move X22, [X31+48]
	204 Move X21, [X31+56]
	205 Move X30, [X31+40]
	206 Move D9, [X31+24]
	207 Move D8, [X31+32]
	208 Move W1, [X8]
	209 Move D11, [X31+8]
	210 Move D10, [X31+16]
	211 Move X2, X31
	212 Move V12, [X31+80]
	213 Call Material.SetFloat, X0, X1, V0
	214 Return 
	215 Move X20, [X31+64]
	216 Move X19, [X31+72]
	217 Move X22, [X31+48]
	218 Move X21, [X31+56]
	219 Move X30, [X31+40]
	220 Move D9, [X31+24]
	221 Move D8, [X31+32]
	222 Move D11, [X31+8]
	223 Move D10, [X31+16]
	224 Move V12, [X31+80]
	225 Return 
	226 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D7DF90 MOV X0, X8
	0x01D7DF94 BL 0x321B938
	0x01D7DF98 LDR X8, [X19 + 0x28]
	0x01D7DF9C CBZ X8, 0x1D7E6A8
	0x01D7DFA0 MOV X21, X0

ISIL:
	001 Move X8, -19472384
	002 Move V0, [X8+235]
	003 Move X1, X31
	004 Move [X0+40], V0
	005 Call MonoBehaviour..ctor, X0
	006 Return 

Method: System.Void .cctor()

Disassembly:
	0x01D7DFA4 MOV X0, X8
	0x01D7DFA8 BL 0x1D7E6AC
	0x01D7DFAC LDR X8, [X26]
	0x01D7DFB0 MOV X22, X0
	0x01D7DFB4 MOV X0, X8
	0x01D7DFB8 BL 0x1C16F10
	0x01D7DFBC ADRP X8, 0x2379000
	0x01D7DFC0 LDR X8, [X8 + 0x4E8]
	0x01D7DFC4 MOV X1, X19
	0x01D7DFC8 MOV X3, X31
	0x01D7DFCC MOV X23, X0
	0x01D7DFD0 LDR X2, [X8]
	0x01D7DFD4 BL 0x2A6B948
	0x01D7DFD8 CBZ X22, 0x1D7E6A8
	0x01D7DFDC MOV X0, X22
	0x01D7DFE0 MOV X1, X23
	0x01D7DFE4 BL 0x1D7E724
	0x01D7DFE8 LDR X0, [X26]
	0x01D7DFEC BL 0x1C16F10
	0x01D7DFF0 ADRP X8, 0x2379000
	0x01D7DFF4 LDR X8, [X8 + 0x520]
	0x01D7DFF8 MOV X1, X19
	0x01D7DFFC MOV X3, X31
	0x01D7E000 MOV X23, X0
	0x01D7E004 LDR X2, [X8]
	0x01D7E008 BL 0x2A6B948

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x265C000
	006 Move X21, 0x237A000
	007 Move X19, 0x237A000
	008 Move W8, [X20+2383]
	009 Move X21, [X21+1136]
	010 Move X19, [X19+1128]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x237A000
	016 Move X0, [X0+1128]
	017 Call 0x1C17CF4
	018 Move X0, 0x237A000
	019 Move X0, [X0+1136]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2383], W8
	023 Move X0, [X21]
	024 Move X1, X31
	025 Call Shader.PropertyToID, X0
	026 Move X8, [X19]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, [X8+184]
	030 Move [X8], W0
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

