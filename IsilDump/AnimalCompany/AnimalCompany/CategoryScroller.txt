Type: AnimalCompany.CategoryScroller

Method: System.Void Awake()

Disassembly:
	0x01D60C28 MOV X19, X0
	0x01D60C2C BL 0x35C52F0
	0x01D60C30 LDR X0, [X22]
	0x01D60C34 MOVZ W1, 0x1
	0x01D60C38 BL 0x1C16D6C
	0x01D60C3C LDR X8, [X21]
	0x01D60C40 MOV X20, X0
	0x01D60C44 LDR W9, [X8 + 0xE0]
	0x01D60C48 CBNZ W9, 0x1D60C54
	0x01D60C4C MOV X0, X8
	0x01D60C50 BL 0x1C16DFC
	0x01D60C54 ADRP X22, 0x2678000
	0x01D60C58 LDRB W8, [X22 + 0x787]
	0x01D60C5C CBNZ W8, 0x1D60C74
	0x01D60C60 ADRP X0, 0x2393000
	0x01D60C64 LDR X0, [X0 + 0x648]
	0x01D60C68 BL 0x1C16CF4
	0x01D60C6C MOVZ W8, 0x1
	0x01D60C70 STRB W8, [X22 + 0x787]
	0x01D60C74 LDR X0, [X21]
	0x01D60C78 LDR W8, [X0 + 0xE0]
	0x01D60C7C CBNZ W8, 0x1D60C88
	0x01D60C80 BL 0x1C16DFC
	0x01D60C84 LDR X0, [X21]
	0x01D60C88 LDR X8, [X0 + 0xB8]
	0x01D60C8C LDR X8, [X8]
	0x01D60C90 CBZ X8, 0x1D60CE8
	0x01D60C94 LDR X8, [X8 + 0xC8]
	0x01D60C98 CBZ X8, 0x1D60CE8
	0x01D60C9C CBZ X20, 0x1D60CE8
	0x01D60CA0 LDR X21, [X8 + 0x48]
	0x01D60CA4 CBZ X21, 0x1D60CBC
	0x01D60CA8 LDR X8, [X20]
	0x01D60CAC MOV X0, X21
	0x01D60CB0 LDR X1, [X8 + 0x40]
	0x01D60CB4 BL 0x1C16E00
	0x01D60CB8 CBZ X0, 0x1D60CF0
	0x01D60CBC LDR W8, [X20 + 0x18]
	0x01D60CC0 CBZ W8, 0x1D60CEC
	0x01D60CC4 STR X21, [X20 + 0x20]
	0x01D60CC8 MOV X0, X19
	0x01D60CCC MOV X1, X20
	0x01D60CD0 LDP X20, X19, [X31 + 0x30]
	0x01D60CD4 LDP X22, X21, [X31 + 0x20]
	0x01D60CD8 LDP X24, X23, [X31 + 0x10]
	0x01D60CDC MOV X2, X31
	0x01D60CE0 LDR X30, [X31], #0x40
	0x01D60CE4 B 0x1D363F0
	0x01D60CE8 BL 0x1C16F20
	0x01D60CEC BL 0x1C16F28
	0x01D60CF0 BL 0x1C16F44
	0x01D60CF4 MOV X1, X31
	0x01D60CF8 BL 0x1C16DEC
	0x01D60CFC STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2679000
	008 Move W8, [X20+2102]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2396000
	015 Move X0, [X0+1712]
	016 Call 0x1C17CF4
	017 Move X0, 0x2396000
	018 Move X0, [X0+1184]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2102], W8
	022 Move X22, [X19+48]
	023 Compare X22, 0
	024 JumpIfEqual {67}
	025 Move X23, 0x2396000
	026 Move X23, [X23+1184]
	027 Move X21, 0x2396000
	028 Move X20, [X22+32]
	029 Move X0, [X23]
	030 Move X21, [X21+1712]
	031 Call 0x1C17F10
	032 Move X2, [X21]
	033 Move X1, X19
	034 Move X3, X31
	035 Move X21, X0
	036 Call Func`2<Single, Boolean>..ctor, X0, X1, X2
	037 Move X0, X20
	038 Move X1, X21
	039 Move X2, X31
	040 Call Delegate.Combine, X0, X1
	041 Compare X0, 0
	042 JumpIfEqual {59}
	043 Move X20, [X23]
	044 Move X19, X0
	045 Move X1, X20
	046 Call 0x1C17E00
	047 Compare X0, 0
	048 JumpIfEqual {56}
	049 Move [X22+32], X0
	050 Move X20, [X23]
	051 Move X0, X19
	052 Move X1, X20
	053 Call 0x1C17E00
	054 Compare X0, 0
	055 JumpIfNotEqual {60}
	056 Move X0, X19
	057 Move X1, X20
	058 Call 0x1C181E0
	059 Move [X22+32], X31
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X30, [X31+48]
	065 Move X23, [X31+56]
	066 Return 
	067 Call 0x1C17F20

Method: System.Boolean OnTryScroll(System.Single dist)

Disassembly:
	0x01D60D00 STP X22, X21, [X31 + 0x10]
	0x01D60D04 STP X20, X19, [X31 + 0x20]
	0x01D60D08 ADRP X23, 0x2678000
	0x01D60D0C ADRP X21, 0x2393000
	0x01D60D10 ADRP X20, 0x2395000
	0x01D60D14 ADRP X22, 0x2393000
	0x01D60D18 LDRB W8, [X23 + 0x83C]
	0x01D60D1C LDR X21, [X21 + 0xDA0]
	0x01D60D20 LDR X20, [X20 + 0x750]
	0x01D60D24 LDR X22, [X22 + 0x648]
	0x01D60D28 MOV X19, X0
	0x01D60D2C TBNZ X8, 0x0, 0x1D60D68
	0x01D60D30 ADRP X0, 0x2393000
	0x01D60D34 LDR X0, [X0 + 0x648]
	0x01D60D38 BL 0x1C16CF4
	0x01D60D3C ADRP X0, 0x2395000
	0x01D60D40 LDR X0, [X0 + 0x750]
	0x01D60D44 BL 0x1C16CF4
	0x01D60D48 ADRP X0, 0x2395000
	0x01D60D4C LDR X0, [X0 + 0x758]
	0x01D60D50 BL 0x1C16CF4
	0x01D60D54 ADRP X0, 0x2393000
	0x01D60D58 LDR X0, [X0 + 0xDA0]
	0x01D60D5C BL 0x1C16CF4
	0x01D60D60 MOVZ W8, 0x1
	0x01D60D64 STRB W8, [X23 + 0x83C]
	0x01D60D68 LDR X0, [X21]
	0x01D60D6C ADRP X23, 0x2395000
	0x01D60D70 LDR X23, [X23 + 0x758]
	0x01D60D74 BL 0x1C16F10
	0x01D60D78 LDR X2, [X20]
	0x01D60D7C MOV X1, X19
	0x01D60D80 MOV X3, X31
	0x01D60D84 MOV X20, X0
	0x01D60D88 BL 0x35C52F0
	0x01D60D8C LDR X0, [X22]
	0x01D60D90 LDR W8, [X0 + 0xE0]
	0x01D60D94 CBNZ W8, 0x1D60D9C
	0x01D60D98 BL 0x1C16DFC
	0x01D60D9C MOV X0, X20
	0x01D60DA0 MOV X1, X31
	0x01D60DA4 BL 0x1D36978
	0x01D60DA8 LDR X0, [X21]
	0x01D60DAC BL 0x1C16F10
	0x01D60DB0 LDR X2, [X23]
	0x01D60DB4 MOV X1, X19
	0x01D60DB8 MOV X3, X31
	0x01D60DBC MOV X20, X0
	0x01D60DC0 BL 0x35C52F0

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Move X0, [X0+56]
	009 Compare X0, 0
	010 JumpIfEqual {59}
	011 Move X1, X31
	012 Move V8, V0
	013 Call RectTransform.get_anchoredPosition, X0
	014 Move X0, [X19+56]
	015 Compare X0, 0
	016 JumpIfEqual {59}
	017 Move X1, X31
	018 Move V9, V1
	019 Call RectTransform.get_rect, X0
	020 Move X0, [X19+56]
	021 Compare X0, 0
	022 JumpIfEqual {59}
	023 Move X1, X31
	024 Move V10, V3
	025 Call RectTransform.get_rect, X0
	026 Move V2, [X19+64]
	027 Move S0, -0.5
	028 Move S1, 0.5
	029 Multiply S11, S10, S0
	030 Multiply S0, S2, S8
	031 Move X19, [X19+56]
	032 Multiply S10, S3, S1
	033 Add S0, S9, S0
	034 NotImplemented "Instruction FCMP not yet implemented."
	035 NotImplemented "Instruction FCSEL not yet implemented."
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 NotImplemented "Instruction FCSEL not yet implemented."
	038 Compare X19, 0
	039 JumpIfEqual {59}
	040 Move X0, X19
	041 Move X1, X31
	042 Call RectTransform.get_anchoredPosition, X0
	043 Move X0, X19
	044 Move V1, V8
	045 Move X1, X31
	046 Call RectTransform.set_anchoredPosition, X0, X1
	047 NotImplemented "Instruction FCMP not yet implemented."
	048 NotImplemented "Instruction CSET not yet implemented."
	049 NotImplemented "Instruction FCMP not yet implemented."
	050 Move X30, [X31+32]
	051 Move X19, [X31+40]
	052 Move D9, [X31+16]
	053 Move D8, [X31+24]
	054 NotImplemented "Instruction CSET not yet implemented."
	055 And W0, W8, W9
	056 Move D11, [X31+48]
	057 Move D10, [X31+56]
	058 Return X0
	059 Call 0x1C17F20

Method: System.Void LateUpdate()

Disassembly:
	0x01D60DC4 MOV X0, X20

ISIL:
No ISIL was generated
Method: System.Void UpdateCategoryZ()

Disassembly:
	0x01D60DC8 LDP X20, X19, [X31 + 0x20]
	0x01D60DCC LDP X22, X21, [X31 + 0x10]
	0x01D60DD0 MOV X1, X31
	0x01D60DD4 LDP X30, X23, [X31], #0x30
	0x01D60DD8 B 0x1D36978
	0x01D60DDC STR X30, [X31 - 0x40]!
	0x01D60DE0 STP X24, X23, [X31 + 0x10]
	0x01D60DE4 STP X22, X21, [X31 + 0x20]
	0x01D60DE8 STP X20, X19, [X31 + 0x30]
	0x01D60DEC ADRP X20, 0x2678000
	0x01D60DF0 ADRP X23, 0x2393000
	0x01D60DF4 ADRP X22, 0x2395000
	0x01D60DF8 ADRP X21, 0x2393000
	0x01D60DFC LDRB W8, [X20 + 0x83D]
	0x01D60E00 LDR X23, [X23 + 0xDA0]
	0x01D60E04 LDR X22, [X22 + 0x758]
	0x01D60E08 LDR X21, [X21 + 0x648]
	0x01D60E0C MOV X19, X0
	0x01D60E10 TBNZ X8, 0x0, 0x1D60E58
	0x01D60E14 ADRP X0, 0x2393000
	0x01D60E18 LDR X0, [X0 + 0x648]
	0x01D60E1C BL 0x1C16CF4
	0x01D60E20 ADRP X0, 0x2395000
	0x01D60E24 LDR X0, [X0 + 0x758]
	0x01D60E28 BL 0x1C16CF4
	0x01D60E2C ADRP X0, 0x2393000
	0x01D60E30 LDR X0, [X0 + 0xDB0]
	0x01D60E34 BL 0x1C16CF4
	0x01D60E38 ADRP X0, 0x2393000
	0x01D60E3C LDR X0, [X0 + 0xDA0]
	0x01D60E40 BL 0x1C16CF4
	0x01D60E44 ADRP X0, 0x2394000
	0x01D60E48 LDR X0, [X0 + 0xEB8]
	0x01D60E4C BL 0x1C16CF4
	0x01D60E50 MOVZ W8, 0x1
	0x01D60E54 STRB W8, [X20 + 0x83D]
	0x01D60E58 LDR X0, [X23]
	0x01D60E5C BL 0x1C16F10
	0x01D60E60 LDR X2, [X22]
	0x01D60E64 MOV X1, X19
	0x01D60E68 MOV X3, X31
	0x01D60E6C MOV X20, X0
	0x01D60E70 BL 0x35C52F0
	0x01D60E74 LDR X0, [X21]
	0x01D60E78 LDR W8, [X0 + 0xE0]
	0x01D60E7C CBNZ W8, 0x1D60E84
	0x01D60E80 BL 0x1C16DFC
	0x01D60E84 MOV X0, X20
	0x01D60E88 MOV X1, X31
	0x01D60E8C BL 0x1D36978
	0x01D60E90 ADRP X24, 0x2678000
	0x01D60E94 LDRB W8, [X24 + 0x787]
	0x01D60E98 CBNZ W8, 0x1D60EB0
	0x01D60E9C ADRP X0, 0x2393000
	0x01D60EA0 LDR X0, [X0 + 0x648]
	0x01D60EA4 BL 0x1C16CF4
	0x01D60EA8 MOVZ W8, 0x1
	0x01D60EAC STRB W8, [X24 + 0x787]
	0x01D60EB0 LDR X0, [X21]
	0x01D60EB4 LDR W8, [X0 + 0xE0]
	0x01D60EB8 CBNZ W8, 0x1D60EC4
	0x01D60EBC BL 0x1C16DFC
	0x01D60EC0 LDR X0, [X21]
	0x01D60EC4 LDR X8, [X0 + 0xB8]
	0x01D60EC8 LDR X8, [X8]
	0x01D60ECC CBZ X8, 0x1D60FD4
	0x01D60ED0 LDR X8, [X8 + 0xC8]
	0x01D60ED4 CBZ X8, 0x1D60FD4
	0x01D60ED8 LDR X8, [X8 + 0x48]
	0x01D60EDC CBZ X8, 0x1D60FD4
	0x01D60EE0 LDRB W8, [X8 + 0x4C]
	0x01D60EE4 CBZ W8, 0x1D60FC0
	0x01D60EE8 LDR X0, [X23]
	0x01D60EEC ADRP X23, 0x2393000
	0x01D60EF0 LDR X23, [X23 + 0xDB0]
	0x01D60EF4 BL 0x1C16F10
	0x01D60EF8 LDR X2, [X22]
	0x01D60EFC MOV X1, X19
	0x01D60F00 MOV X3, X31
	0x01D60F04 MOV X20, X0
	0x01D60F08 BL 0x35C52F0
	0x01D60F0C LDR X0, [X23]
	0x01D60F10 MOVZ W1, 0x1
	0x01D60F14 BL 0x1C16D6C
	0x01D60F18 LDR X8, [X21]
	0x01D60F1C MOV X19, X0
	0x01D60F20 LDR W9, [X8 + 0xE0]
	0x01D60F24 CBNZ W9, 0x1D60F30
	0x01D60F28 MOV X0, X8
	0x01D60F2C BL 0x1C16DFC
	0x01D60F30 LDRB W8, [X24 + 0x787]
	0x01D60F34 CBNZ W8, 0x1D60F4C
	0x01D60F38 ADRP X0, 0x2393000
	0x01D60F3C LDR X0, [X0 + 0x648]
	0x01D60F40 BL 0x1C16CF4
	0x01D60F44 MOVZ W8, 0x1
	0x01D60F48 STRB W8, [X24 + 0x787]
	0x01D60F4C LDR X0, [X21]
	0x01D60F50 LDR W8, [X0 + 0xE0]
	0x01D60F54 CBNZ W8, 0x1D60F60
	0x01D60F58 BL 0x1C16DFC
	0x01D60F5C LDR X0, [X21]
	0x01D60F60 LDR X8, [X0 + 0xB8]
	0x01D60F64 LDR X8, [X8]
	0x01D60F68 CBZ X8, 0x1D60FD4
	0x01D60F6C LDR X8, [X8 + 0xB8]
	0x01D60F70 CBZ X8, 0x1D60FD4
	0x01D60F74 CBZ X19, 0x1D60FD4
	0x01D60F78 LDR X21, [X8 + 0x78]
	0x01D60F7C CBZ X21, 0x1D60F94
	0x01D60F80 LDR X8, [X19]
	0x01D60F84 MOV X0, X21
	0x01D60F88 LDR X1, [X8 + 0x40]
	0x01D60F8C BL 0x1C16E00
	0x01D60F90 CBZ X0, 0x1D60FDC
	0x01D60F94 LDR W8, [X19 + 0x18]
	0x01D60F98 CBZ W8, 0x1D60FD8
	0x01D60F9C STR X21, [X19 + 0x20]
	0x01D60FA0 MOV X0, X20
	0x01D60FA4 MOV X1, X19
	0x01D60FA8 LDP X20, X19, [X31 + 0x30]
	0x01D60FAC LDP X22, X21, [X31 + 0x20]
	0x01D60FB0 LDP X24, X23, [X31 + 0x10]
	0x01D60FB4 MOV X2, X31
	0x01D60FB8 LDR X30, [X31], #0x40
	0x01D60FBC B 0x1D363F0
	0x01D60FC0 LDP X20, X19, [X31 + 0x30]
	0x01D60FC4 LDP X22, X21, [X31 + 0x20]
	0x01D60FC8 LDP X24, X23, [X31 + 0x10]
	0x01D60FCC LDR X30, [X31], #0x40
	0x01D60FD0 RET
	0x01D60FD4 BL 0x1C16F20
	0x01D60FD8 BL 0x1C16F28
	0x01D60FDC BL 0x1C16F44
	0x01D60FE0 MOV X1, X31
	0x01D60FE4 BL 0x1C16DEC
	0x01D60FE8 SUB X31, X31, 0x70
	0x01D60FEC STR X30, [X31 + 0x40]
	0x01D60FF0 STP X22, X21, [X31 + 0x50]
	0x01D60FF4 STP X20, X19, [X31 + 0x60]
	0x01D60FF8 ADRP X20, 0x2678000
	0x01D60FFC LDRB W8, [X20 + 0x83E]
	0x01D61000 MOV X19, X0
	0x01D61004 TBNZ X8, 0x0, 0x1D61040
	0x01D61008 ADRP X0, 0x2394000
	0x01D6100C LDR X0, [X0 + 0x6F0]
	0x01D61010 BL 0x1C16CF4
	0x01D61014 ADRP X0, 0x2394000
	0x01D61018 LDR X0, [X0 + 0x6F8]
	0x01D6101C BL 0x1C16CF4
	0x01D61020 ADRP X0, 0x2394000
	0x01D61024 LDR X0, [X0 + 0x700]
	0x01D61028 BL 0x1C16CF4
	0x01D6102C ADRP X0, 0x2394000
	0x01D61030 LDR X0, [X0 + 0x708]
	0x01D61034 BL 0x1C16CF4
	0x01D61038 MOVZ W8, 0x1
	0x01D6103C STRB W8, [X20 + 0x83E]
	0x01D61040 STP X31, X31, [X31 + 0x20]
	0x01D61044 STR X31, [X31 + 0x30]
	0x01D61048 LDR X0, [X19 + 0xB0]
	0x01D6104C CBZ X0, 0x1D61104
	0x01D61050 ADRP X8, 0x2394000
	0x01D61054 LDR X8, [X8 + 0x708]
	0x01D61058 ADRP X22, 0x2394000
	0x01D6105C ADRP X21, 0x2394000
	0x01D61060 LDR X1, [X8]
	0x01D61064 LDR X22, [X22 + 0x6F8]
	0x01D61068 LDR X21, [X21 + 0x6F0]
	0x01D6106C ADD X8, X31, 0x8
	0x01D61070 BL 0x301CB58
	0x01D61074 LDUR V0, [X31 + 0x8]
	0x01D61078 LDR X8, [X31 + 0x18]
	0x01D6107C STR V0, [X31 + 0x2]
	0x01D61080 STR X8, [X31 + 0x30]
	0x01D61084 LDR X1, [X22]
	0x01D61088 ADD X0, X31, 0x20
	0x01D6108C BL 0x2BC4350
	0x01D61090 TBZ X0, 0x0, 0x1D610C4
	0x01D61094 LDR X20, [X31 + 0x30]
	0x01D61098 CBZ X20, 0x1D610FC
	0x01D6109C MOV X0, X20
	0x01D610A0 MOV X1, X31
	0x01D610A4 BL 0x3C32ECC
	0x01D610A8 CBZ X0, 0x1D61100
	0x01D610AC MOV X1, X31
	0x01D610B0 BL 0x3C357F8
	0x01D610B4 TBZ X0, 0x0, 0x1D61084
	0x01D610B8 MOV X0, X20
	0x01D610BC BL 0x1D6117C
	0x01D610C0 B 0x1D61084
	0x01D610C4 LDR X1, [X21]
	0x01D610C8 ADD X0, X31, 0x20
	0x01D610CC BL 0x2BC434C
	0x01D610D0 LDR X19, [X19 + 0x40]
	0x01D610D4 CBZ X19, 0x1D610E8
	0x01D610D8 BL 0x1D59FC0
	0x01D610DC STR X0, [X19 + 0x80]
	0x01D610E0 MOV X0, X19
	0x01D610E4 BL 0x1D5AB18
	0x01D610E8 LDP X20, X19, [X31 + 0x60]
	0x01D610EC LDP X22, X21, [X31 + 0x50]
	0x01D610F0 LDR X30, [X31 + 0x40]
	0x01D610F4 ADD X31, X31, 0x70
	0x01D610F8 RET
	0x01D610FC BL 0x1C16F20
	0x01D61100 BL 0x1C16F20
	0x01D61104 BL 0x1C16F20
	0x01D61108 B 0x1D6111C
	0x01D6110C B 0x1D6111C
	0x01D61110 B 0x1D6111C
	0x01D61114 B 0x1D6111C
	0x01D61118 B 0x1D6111C
	0x01D6111C CMP W1, 0x1
	0x01D61120 B.NE 0x1D61148
	0x01D61124 BL 0x3EB1AD0
	0x01D61128 LDR X20, [X0]
	0x01D6112C BL 0x3EB1AE0
	0x01D61130 LDR X1, [X21]
	0x01D61134 ADD X0, X31, 0x20
	0x01D61138 BL 0x2BC434C
	0x01D6113C CBZ X20, 0x1D610D0
	0x01D61140 MOV X0, X20
	0x01D61144 BL 0x1C16F18
	0x01D61148 MOV X19, X0
	0x01D6114C MOV X20, X31
	0x01D61150 B 0x1D61158
	0x01D61154 MOV X19, X0
	0x01D61158 LDR X1, [X21]
	0x01D6115C ADD X0, X31, 0x20
	0x01D61160 BL 0x2BC434C
	0x01D61164 CBNZ X20, 0x1D61170
	0x01D61168 MOV X0, X19
	0x01D6116C BL 0x1D2C690
	0x01D61170 MOV X0, X20
	0x01D61174 BL 0x1C16F18
	0x01D61178 BL 0x1990590
	0x01D6117C SUB X31, X31, 0x70
	0x01D61180 STP X29, X30, [X31 + 0x10]
	0x01D61184 STP X28, X27, [X31 + 0x20]
	0x01D61188 STP X26, X25, [X31 + 0x30]
	0x01D6118C STP X24, X23, [X31 + 0x40]
	0x01D61190 STP X22, X21, [X31 + 0x50]
	0x01D61194 STP X20, X19, [X31 + 0x60]
	0x01D61198 ADRP X20, 0x2677000
	0x01D6119C LDRB W8, [X20 + 0x856]
	0x01D611A0 MOV X19, X0
	0x01D611A4 TBNZ X8, 0x0, 0x1D61240
	0x01D611A8 ADRP X0, 0x2392000
	0x01D611AC LDR X0, [X0 + 0x648]
	0x01D611B0 BL 0x1C16CF4
	0x01D611B4 ADRP X0, 0x2392000
	0x01D611B8 LDR X0, [X0 + 0xE00]
	0x01D611BC BL 0x1C16CF4
	0x01D611C0 ADRP X0, 0x2392000
	0x01D611C4 LDR X0, [X0 + 0xF70]
	0x01D611C8 BL 0x1C16CF4
	0x01D611CC ADRP X0, 0x2393000
	0x01D611D0 LDR X0, [X0 + 0xAB0]
	0x01D611D4 BL 0x1C16CF4
	0x01D611D8 ADRP X0, 0x2392000
	0x01D611DC LDR X0, [X0 + 0xF78]
	0x01D611E0 BL 0x1C16CF4
	0x01D611E4 ADRP X0, 0x2393000
	0x01D611E8 LDR X0, [X0 + 0xAB8]
	0x01D611EC BL 0x1C16CF4
	0x01D611F0 ADRP X0, 0x2392000
	0x01D611F4 LDR X0, [X0 + 0xE18]
	0x01D611F8 BL 0x1C16CF4
	0x01D611FC ADRP X0, 0x2393000
	0x01D61200 LDR X0, [X0 + 0xAC0]
	0x01D61204 BL 0x1C16CF4
	0x01D61208 ADRP X0, 0x2393000
	0x01D6120C LDR X0, [X0 + 0xAD8]
	0x01D61210 BL 0x1C16CF4
	0x01D61214 ADRP X0, 0x2392000
	0x01D61218 LDR X0, [X0 + 0xDC8]
	0x01D6121C BL 0x1C16CF4
	0x01D61220 ADRP X0, 0x2393000
	0x01D61224 LDR X0, [X0 + 0x1F8]
	0x01D61228 BL 0x1C16CF4
	0x01D6122C ADRP X0, 0x2394000
	0x01D61230 LDR X0, [X0 + 0x760]
	0x01D61234 BL 0x1C16CF4
	0x01D61238 MOVZ W8, 0x1
	0x01D6123C STRB W8, [X20 + 0x856]
	0x01D61240 STP X31, X31, [X31]

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+64], D15
	003 Move [X31+72], D14
	004 Move [X31+80], D13
	005 Move [X31+88], D12
	006 Move [X31+96], D11
	007 Move [X31+104], D10
	008 Move [X31+112], D9
	009 Move [X31+120], D8
	010 Move [X31+128], X29
	011 Move [X31+136], X30
	012 Move [X31+144], X28
	013 Move [X31+152], X27
	014 Move [X31+160], X26
	015 Move [X31+168], X25
	016 Move [X31+176], X24
	017 Move [X31+184], X23
	018 Move [X31+192], X22
	019 Move [X31+200], X21
	020 Move [X31+208], X20
	021 Move [X31+216], X19
	022 Move X20, 0x2679000
	023 Move W8, [X20+2103]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {46}
	029 Move X0, 0x2394000
	030 Move X0, [X0+2416]
	031 Call 0x1C17CF4
	032 Move X0, 0x2396000
	033 Move X0, [X0+1672]
	034 Call 0x1C17CF4
	035 Move X0, 0x2396000
	036 Move X0, [X0+1680]
	037 Call 0x1C17CF4
	038 Move X0, 0x2396000
	039 Move X0, [X0+1688]
	040 Call 0x1C17CF4
	041 Move X0, 0x2396000
	042 Move X0, [X0+1696]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X20+2103], W8
	046 Move [X31+32], X31
	047 Move [X31+40], X31
	048 Move [X31+48], X31
	049 Move X0, [X19+72]
	050 Compare X0, 0
	051 JumpIfEqual {272}
	052 Move X8, 0x2396000
	053 Move X8, [X8+1696]
	054 Move X23, 0x2396000
	055 Move X24, 0x2394000
	056 Move X22, 0x2396000
	057 Move X1, [X8]
	058 Move X23, [X23+1680]
	059 Move X24, [X24+2416]
	060 Move X22, [X22+1672]
	061 Add X8, X31, 8
	062 Call List`1<Object>.GetEnumerator, X0
	063 NotImplemented "Instruction LDUR not yet implemented."
	064 Move X9, -19353600
	065 Move X10, -19353600
	066 Move V14, [X9+1096]
	067 Move X9, -19357696
	068 Move X8, [X31+24]
	069 Move V1, [X10+260]
	070 Move [X31+2], V0
	071 Move V0, [X9+3980]
	072 Move W25, 0xC28C0000
	073 Move W26, 0x7F800000
	074 Move W27, 0x80000000
	075 Move W28, 0x42200000
	076 Move W29, 0xC2200000
	077 Move [X31+4], S1
	078 Move [X31], S0
	079 Move [X31+48], X8
	080 Move X1, [X23]
	081 Add X0, X31, 32
	082 Call Enumerator<Object>.MoveNext, X0
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfNotEqual {239}
	087 Move X20, [X31+48]
	088 Move X0, X19
	089 Move X1, X31
	090 Call Component.get_transform, X0
	091 Compare X20, 0
	092 JumpIfEqual {267}
	093 Move X21, X0
	094 Move X0, X20
	095 Move X1, X31
	096 Call Component.get_transform, X0
	097 Compare X0, 0
	098 JumpIfEqual {268}
	099 Move X1, X31
	100 Call Transform.get_position, X0
	101 Compare X21, 0
	102 JumpIfEqual {265}
	103 Move X0, X21
	104 Move X1, X31
	105 Call Transform.InverseTransformPoint, X0, X1
	106 Move V15, [X20+156]
	107 Move V8, V0
	108 Move V9, V1
	109 Move V11, V2
	110 Move X0, X31
	111 Call Time.get_deltaTime
	112 Move [X20+152], S8
	113 Move [X20+160], S9
	114 Move [X20+160], S11
	115 Move V10, V0
	116 Move V0, [X19+32]
	117 Move S8, W31
	118 NotImplemented "Instruction FCMP not yet implemented."
	119 NotImplemented "Instruction FABS not yet implemented."
	120 NotImplemented "Instruction FDIV not yet implemented."
	121 NotImplemented "Instruction FCMP not yet implemented."
	122 Move S1, 1
	123 NotImplemented "Instruction FMIN not yet implemented."
	124 Move X0, X20
	125 Move X1, X31
	126 Call Component.get_transform, X0
	127 Move X21, X0
	128 Move X0, X20
	129 Move X1, X31
	130 Call Component.get_transform, X0
	131 Compare X0, 0
	132 JumpIfEqual {266}
	133 Move X1, X31
	134 Call Transform.get_localPosition, X0
	135 Move V11, V0
	136 Move X0, X20
	137 Move X1, X31
	138 Call Component.get_transform, X0
	139 Compare X0, 0
	140 JumpIfEqual {264}
	141 Move X1, X31
	142 Call Transform.get_localPosition, X0
	143 Move V13, [X19+36]
	144 Move V12, V1
	145 Move S1, 3
	146 Move V0, V8
	147 Call 0x3EB2B50
	148 Compare X21, 0
	149 JumpIfEqual {269}
	150 Move V1, [X19+40]
	151 Move S2, 1
	152 NotImplemented "Instruction FMIN not yet implemented."
	153 NotImplemented "Instruction FCMP not yet implemented."
	154 Subtract S0, S1, S13
	155 Move S1, W31
	156 NotImplemented "Instruction FCSEL not yet implemented."
	157 Multiply S0, S1, S0
	158 Add S2, S13, S0
	159 Move X0, X21
	160 Move V0, V11
	161 Move V1, V12
	162 Move X1, X31
	163 Call Transform.set_localPosition, X0, X1
	164 Move X0, X20
	165 Move X1, X31
	166 Call Component.get_transform, X0
	167 Move X21, X0
	168 Move X0, X20
	169 Move X1, X31
	170 Call Component.get_transform, X0
	171 Compare X0, 0
	172 JumpIfEqual {270}
	173 Move X1, X31
	174 Call Transform.get_localRotation, X0
	175 Move X0, X31
	176 Call Quaternion.Internal_ToEulerRad, X0
	177 Multiply S2, S2, S14
	178 Multiply S0, S0, S14
	179 Multiply S1, S1, S14
	180 Move X0, X31
	181 Call Quaternion.Internal_MakePositive, X0
	182 Subtract S0, S9, S15
	183 NotImplemented "Instruction FDIV not yet implemented."
	184 Move W8, S0
	185 Move S1, W25
	186 And W8, W8, 0x7FFFFFFF
	187 Multiply S1, S0, S1
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move S0, W27
	190 Move V11, V2
	191 NotImplemented "Instruction FCSEL not yet implemented."
	192 Move X0, X31
	193 Call Time.get_deltaTime
	194 Move S1, W28
	195 Move S3, W29
	196 Move S4, 3
	197 NotImplemented "Instruction FMIN not yet implemented."
	198 NotImplemented "Instruction FCMP not yet implemented."
	199 Multiply S0, S0, S4
	200 Move S4, 1
	201 NotImplemented "Instruction FCSEL not yet implemented."
	202 NotImplemented "Instruction FMIN not yet implemented."
	203 NotImplemented "Instruction FCMP not yet implemented."
	204 Move S0, W31
	205 NotImplemented "Instruction FCSEL not yet implemented."
	206 Subtract S2, S2, S11
	207 Multiply S0, S2, S0
	208 Add S0, S11, S0
	209 Move V2, [X31+4]
	210 NotImplemented "Instruction FMIN not yet implemented."
	211 NotImplemented "Instruction FCMP not yet implemented."
	212 Move V0, [X31]
	213 Multiply S1, S1, S2
	214 NotImplemented "Instruction FCSEL not yet implemented."
	215 Move S1, W31
	216 Move S2, W31
	217 Move X0, X31
	218 Call Quaternion.Internal_FromEulerRad, X0
	219 Compare X21, 0
	220 JumpIfEqual {271}
	221 Move X0, X21
	222 Move X1, X31
	223 Call Transform.set_localRotation, X0, X1
	224 Move X0, [X24]
	225 Move W8, [X0+224]
	226 Compare W8, 0
	227 JumpIfNotEqual {229}
	228 Call 0x1C17DFC
	229 Move X0, X31
	230 Call Application.get_isPlaying
	231 Move TEMP, X0
	232 And TEMP, TEMP, 1
	233 Compare TEMP, 1
	234 JumpIfNotEqual {80}
	235 Move S0, 1
	236 Subtract S0, S0, S8
	237 Move X0, X20
	238 Call CategoryController.SetAlpha, X0, V0
	239 Move X1, [X22]
	240 Add X0, X31, 32
	241 Call Enumerator<Object>.Dispose, X0
	242 Move X20, [X31+208]
	243 Move X19, [X31+216]
	244 Move X22, [X31+192]
	245 Move X21, [X31+200]
	246 Move X24, [X31+176]
	247 Move X23, [X31+184]
	248 Move X26, [X31+160]
	249 Move X25, [X31+168]
	250 Move X28, [X31+144]
	251 Move X27, [X31+152]
	252 Move X29, [X31+128]
	253 Move X30, [X31+136]
	254 Move D9, [X31+112]
	255 Move D8, [X31+120]
	256 Move D11, [X31+96]
	257 Move D10, [X31+104]
	258 Move D13, [X31+80]
	259 Move D12, [X31+88]
	260 Move D15, [X31+64]
	261 Move D14, [X31+72]
	262 Add X31, X31, 224
	263 Return 
	264 Call 0x1C17F20
	265 Call 0x1C17F20
	266 Call 0x1C17F20
	267 Call 0x1C17F20
	268 Call 0x1C17F20
	269 Call 0x1C17F20
	270 Call 0x1C17F20
	271 Call 0x1C17F20
	272 Call 0x1C17F20
	273 Move X19, X0
	274 NotImplemented "Instruction CMP not yet implemented."
	275 Move X0, X19
	276 Call 0x3EB2AD0
	277 Move X20, [X0]
	278 Call 0x3EB2AE0
	279 Move X1, [X22]
	280 Add X0, X31, 32
	281 Call Enumerator<Object>.Dispose, X0
	282 Compare X20, 0
	283 JumpIfEqual {242}
	284 Move X0, X20
	285 Call 0x1C17F18
	286 Move X20, X31
	287 Move X19, X0
	288 Move X1, [X22]
	289 Add X0, X31, 32
	290 Call Enumerator<Object>.Dispose, X0
	291 Compare X20, 0
	292 JumpIfNotEqual {295}
	293 Move X0, X19
	294 Call 0x1D2D690
	295 Move X0, X20
	296 Call 0x1C17F18
	297 Call 0x1991590

Method: System.Void FocusOnCategory(AnimalCompany.CategoryController category)

Disassembly:
	0x01D61244 ADRP X20, 0x2392000
	0x01D61248 ADRP X22, 0x2393000
	0x01D6124C LDRB W8, [X19 + 0x88]
	0x01D61250 LDR X20, [X20 + 0x648]
	0x01D61254 LDR X22, [X22 + 0xAB0]
	0x01D61258 CBZ W8, 0x1D61304
	0x01D6125C LDR X0, [X20]
	0x01D61260 LDR W8, [X0 + 0xE0]
	0x01D61264 CBNZ W8, 0x1D6126C
	0x01D61268 BL 0x1C16DFC
	0x01D6126C ADRP X24, 0x2677000
	0x01D61270 LDRB W8, [X24 + 0x787]
	0x01D61274 CBNZ W8, 0x1D6128C
	0x01D61278 ADRP X0, 0x2392000
	0x01D6127C LDR X0, [X0 + 0x648]
	0x01D61280 BL 0x1C16CF4
	0x01D61284 MOVZ W8, 0x1
	0x01D61288 STRB W8, [X24 + 0x787]
	0x01D6128C LDR X0, [X20]
	0x01D61290 LDR W8, [X0 + 0xE0]
	0x01D61294 CBNZ W8, 0x1D612A0
	0x01D61298 BL 0x1C16DFC
	0x01D6129C LDR X0, [X20]
	0x01D612A0 LDR X8, [X0 + 0xB8]
	0x01D612A4 LDR X8, [X8]
	0x01D612A8 CBZ X8, 0x1D61B78
	0x01D612AC LDR X8, [X8 + 0xB8]
	0x01D612B0 CBZ X8, 0x1D61B78
	0x01D612B4 LDR X8, [X8 + 0x78]
	0x01D612B8 CBZ X8, 0x1D61B78
	0x01D612BC LDR X21, [X8 + 0x98]
	0x01D612C0 CBZ X21, 0x1D61B78
	0x01D612C4 LDR X8, [X21]
	0x01D612C8 LDR X1, [X22]
	0x01D612CC LDRH W9, [X8 + 0x12E]
	0x01D612D0 CBZ X9, 0x1D612F4
	0x01D612D4 LDR X10, [X8 + 0xB0]
	0x01D612D8 ADD X10, X10, 0x8
	0x01D612DC LDUR X11, [X10 - 0x8]
	0x01D612E0 CMP X11, X1
	0x01D612E4 B.EQ 0x1D613F4
	0x01D612E8 SUBS X9, X9, 0x1
	0x01D612EC ADD X10, X10, 0x10
	0x01D612F0 B.NE 0x1D612DC
	0x01D612F4 MOV X0, X21
	0x01D612F8 MOV W2, W31

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x2678000
	008 Move W8, [X21+2104]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2395000
	016 Move X0, [X0+1720]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+2104], W8
	020 Compare X19, 0
	021 JumpIfEqual {60}
	022 Move X8, 0x2395000
	023 Move X8, [X8+1720]
	024 Move X0, X19
	025 Move X1, [X8]
	026 Call 0x21A4894, X0
	027 Move X19, [X20+56]
	028 Compare X19, 0
	029 JumpIfEqual {60}
	030 Move X21, X0
	031 Move X0, X19
	032 Move X1, X31
	033 Call RectTransform.get_anchoredPosition, X0
	034 Move X0, [X20+56]
	035 Compare X0, 0
	036 JumpIfEqual {60}
	037 Move X1, X31
	038 Move V8, V0
	039 Call RectTransform.get_rect, X0
	040 Compare X21, 0
	041 JumpIfEqual {60}
	042 Move X0, X21
	043 Move X1, X31
	044 Move V9, V3
	045 Call RectTransform.get_anchoredPosition, X0
	046 Move X0, X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 Move X21, [X31+24]
	051 Move S0, -0.5
	052 Multiply S0, S9, S0
	053 Subtract S1, S0, S1
	054 Move V0, V8
	055 Move X1, X31
	056 Move D9, [X31+48]
	057 Move D8, [X31+56]
	058 Call RectTransform.set_anchoredPosition, X0, X1
	059 Return 
	060 Call 0x1C17F20

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x01D612FC BL 0x1C5C788
	0x01D61300 B 0x1D61400
	0x01D61304 LDR X8, [X19 + 0x80]
	0x01D61308 CBZ X8, 0x1D615D8
	0x01D6130C LDR X8, [X8 + 0x58]
	0x01D61310 CBZ X8, 0x1D61B78
	0x01D61314 LDR W0, [X8 + 0x4C]
	0x01D61318 MOV X1, X31
	0x01D6131C BL 0x1D75978
	0x01D61320 LDR X8, [X19 + 0x80]
	0x01D61324 CBZ X8, 0x1D61B78
	0x01D61328 TBZ X0, 0x0, 0x1D61644
	0x01D6132C LDR X8, [X8 + 0x58]
	0x01D61330 CBZ X8, 0x1D61B78
	0x01D61334 LDR W0, [X8 + 0x4C]
	0x01D61338 MOV X1, X31
	0x01D6133C BL 0x1D75984
	0x01D61340 LDR X8, [X20]
	0x01D61344 MOV W21, W0
	0x01D61348 LDR W9, [X8 + 0xE0]
	0x01D6134C CBNZ W9, 0x1D61358
	0x01D61350 MOV X0, X8
	0x01D61354 BL 0x1C16DFC
	0x01D61358 ADRP X23, 0x2677000
	0x01D6135C LDRB W8, [X23 + 0x787]
	0x01D61360 CBNZ W8, 0x1D61378
	0x01D61364 ADRP X0, 0x2392000
	0x01D61368 LDR X0, [X0 + 0x648]
	0x01D6136C BL 0x1C16CF4
	0x01D61370 MOVZ W8, 0x1
	0x01D61374 STRB W8, [X23 + 0x787]
	0x01D61378 LDR X0, [X20]
	0x01D6137C LDR W8, [X0 + 0xE0]
	0x01D61380 CBNZ W8, 0x1D6138C
	0x01D61384 BL 0x1C16DFC
	0x01D61388 LDR X0, [X20]
	0x01D6138C LDR X8, [X0 + 0xB8]
	0x01D61390 LDR X8, [X8]
	0x01D61394 CBZ X8, 0x1D61B78
	0x01D61398 LDR X8, [X8 + 0xB8]
	0x01D6139C CBZ X8, 0x1D61B78
	0x01D613A0 LDR X0, [X8 + 0x78]
	0x01D613A4 TBZ X21, 0x0, 0x1D61694
	0x01D613A8 CBZ X0, 0x1D61B78
	0x01D613AC LDR X20, [X0 + 0x98]
	0x01D613B0 CBZ X20, 0x1D61B78
	0x01D613B4 LDR X8, [X20]
	0x01D613B8 LDR X1, [X22]
	0x01D613BC LDRH W9, [X8 + 0x12E]
	0x01D613C0 CBZ X9, 0x1D613E4

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+128], X30
	003 Move [X31+144], X20
	004 Move [X31+152], X19
	005 Move X1, X31
	006 Move X19, X0
	007 Call Component.get_transform, X0
	008 Compare X0, 0
	009 JumpIfEqual {59}
	010 Add X8, X31, 64
	011 Move X1, X31
	012 Call Transform.get_localToWorldMatrix, X0
	013 Move V0, [X31+64]
	014 Move V1, [X31+80]
	015 Move V2, [X31+96]
	016 Move V3, [X31+112]
	017 Add X0, X31, 0
	018 Move X1, X31
	019 Move [X31], V0
	020 Move [X31+8], V1
	021 Move [X31+32], V2
	022 Move [X31+40], V3
	023 Call Gizmos.set_matrix, X0
	024 Move X8, -19361792
	025 Move X9, -19357696
	026 Move V1, [X8+3984]
	027 Move V2, [X9+48]
	028 Move S0, 1
	029 Move S3, 1
	030 Move X0, X31
	031 Call Gizmos.set_color, X0
	032 Move X20, 0x2678000
	033 Move W8, [X20+1923]
	034 Compare W8, 0
	035 JumpIfNotEqual {41}
	036 Move X0, 0x2393000
	037 Move X0, [X0+1440]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X20+1923], W8
	041 Move X8, 0x2393000
	042 Move X8, [X8+1440]
	043 Move V3, [X19+32]
	044 Move S5, 1
	045 Move X0, X31
	046 Move X8, [X8]
	047 Add S4, S3, S3
	048 Move S3, 1
	049 Move X8, [X8+184]
	050 Move S0, [X8]
	051 Move S1, [X8+4]
	052 Move V2, [X8+8]
	053 Call Gizmos.DrawWireCube, X0, X1
	054 Move X20, [X31+144]
	055 Move X19, [X31+152]
	056 Move X30, [X31+128]
	057 Add X31, X31, 160
	058 Return 
	059 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D613C4 LDR X10, [X8 + 0xB0]
	0x01D613C8 ADD X10, X10, 0x8
	0x01D613CC LDUR X11, [X10 - 0x8]
	0x01D613D0 CMP X11, X1
	0x01D613D4 B.EQ 0x1D619BC
	0x01D613D8 SUBS X9, X9, 0x1
	0x01D613DC ADD X10, X10, 0x10
	0x01D613E0 B.NE 0x1D613CC
	0x01D613E4 MOV X0, X20
	0x01D613E8 MOV W2, W31
	0x01D613EC BL 0x1C5C788
	0x01D613F0 B 0x1D619C8
	0x01D613F4 LDRSW X9, [X10]
	0x01D613F8 ADD X8, X8, X9, 0x4, LSL
	0x01D613FC ADD X0, X8, 0x138
	0x01D61400 LDP X8, X1, [X0]
	0x01D61404 MOV X0, X21
	0x01D61408 BLR X8
	0x01D6140C MOV X21, X0
	0x01D61410 CBZ X0, 0x1D61BA0
	0x01D61414 ADRP X25, 0x2392000
	0x01D61418 ADRP X26, 0x2393000
	0x01D6141C ADRP X28, 0x2393000
	0x01D61420 ADRP X29, 0x2394000
	0x01D61424 LDR X25, [X25 + 0xE18]
	0x01D61428 LDR X26, [X26 + 0xAB8]
	0x01D6142C LDR X28, [X28 + 0xAC0]
	0x01D61430 LDR X29, [X29 + 0x760]
	0x01D61434 MOVZ W27, 0x1
	0x01D61438 LDR X8, [X21]
	0x01D6143C LDR X1, [X25]
	0x01D61440 LDRH W9, [X8 + 0x12E]
	0x01D61444 CBZ X9, 0x1D61468
	0x01D61448 LDR X10, [X8 + 0xB0]
	0x01D6144C ADD X10, X10, 0x8
	0x01D61450 LDUR X11, [X10 - 0x8]
	0x01D61454 CMP X11, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2678000
	007 Move X21, 0x2395000
	008 Move X20, 0x2395000
	009 Move W8, [X22+2105]
	010 Move X21, [X21+1728]
	011 Move X20, [X20+1736]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2395000
	018 Move X0, [X0+1736]
	019 Call 0x1C17CF4
	020 Move X0, 0x2395000
	021 Move X0, [X0+1728]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2105], W8
	025 Move X8, -19345408
	026 Move V0, [X8+2880]
	027 Move W8, 0x3F800000
	028 Move [X19+32], W8
	029 Move [X19+64], W8
	030 Move [X19+36], D0
	031 Move X0, [X21]
	032 Call 0x1C17F10
	033 Move X1, [X20]
	034 Move X20, X0
	035 Call List`1<Object>..ctor, X0
	036 Move [X19+72], X20
	037 Move X0, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X1, X31
	043 Move X30, [X31+48]
	044 Call MonoBehaviour..ctor, X0
	045 Return 

