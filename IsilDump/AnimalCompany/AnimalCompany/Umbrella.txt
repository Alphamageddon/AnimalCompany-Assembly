Type: AnimalCompany.Umbrella

Method: System.Boolean get_isOpen()

Disassembly:
	0x01DAA28C LDP D9, D8, [X31 + 0x20]
	0x01DAA290 LDR V10, [X31 + 0x10]
	0x01DAA294 ADD X31, X31, 0x50
	0x01DAA298 RET
	0x01DAA29C LDR X8, [X19 + 0x10]
	0x01DAA2A0 CBZ X8, 0x1DAA3A0
	0x01DAA2A4 LDR X0, [X8 + 0x88]
	0x01DAA2A8 FMOV S0, 1
	0x01DAA2AC FMIN S0, S8, S0
	0x01DAA2B0 FCMP S8, 0x0
	0x01DAA2B4 FMOV S1, W31
	0x01DAA2B8 FCSEL S4, S0, S1, PL
	0x01DAA2BC CBZ X0, 0x1DAA3A0
	0x01DAA2C0 LDUR V0, [X8 + 0xEC]
	0x01DAA2C4 LDR V3, [X8 + 0xE0]
	0x01DAA2C8 LDR V1, [X8 + 0xF4]
	0x01DAA2CC LDR V2, [X8 + 0xE8]
	0x01DAA2D0 MOV X1, X31
	0x01DAA2D4 FSUB V3.2S, V3.2S, V0.2S
	0x00000000 INVALID
	0x01DAA2DC FSUB S2, S2, S1
	0x01DAA2E0 FMUL S2, S4, S2
	0x01DAA2E4 FADD V0.2S, V0.2S, V3.2S
	0x01DAA2E8 FADD S2, S1, S2
	0x01DAA2EC MOV S1, V0.S[1]
	0x01DAA2F0 STR V4, [X31]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x234A000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x234E000
	018 Move X0, [X0+1464]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x234E000
	025 Move X0, [X0+1472]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_isOpen(System.Boolean value)

Disassembly:
	0x01DAA2F4 BL 0x3C3EC04
	0x01DAA2F8 LDR X8, [X19 + 0x10]
	0x01DAA2FC CBZ X8, 0x1DAA3A0
	0x01DAA300 ADRP X21, 0x262E000
	0x01DAA304 LDR X20, [X8 + 0x88]
	0x01DAA308 LDR V9, [X8 + 0xF8]
	0x01DAA30C LDRB W9, [X21 + 0x85B]
	0x01DAA310 LDR V10, [X8 + 0x100]
	0x01DAA314 CBNZ W9, 0x1DAA32C
	0x01DAA318 ADRP X0, 0x2349000
	0x01DAA31C LDR X0, [X0 + 0x5A0]
	0x01DAA320 BL 0x1C16CF4
	0x01DAA324 MOVZ W8, 0x1
	0x01DAA328 STRB W8, [X21 + 0x85B]
	0x01DAA32C CBZ X20, 0x1DAA3A0
	0x01DAA330 ADRP X8, 0x2349000
	0x01DAA334 LDR X8, [X8 + 0x5A0]
	0x01DAA338 LDR V3, [X31]
	0x01DAA33C MOV X0, X20
	0x01DAA340 MOV X1, X31
	0x01DAA344 LDR X8, [X8]
	0x01DAA348 UNIMPLEMENTED
	0x01DAA34C LDR X8, [X8 + 0xB8]
	0x01DAA350 LDR V0, [X8 + 0x14]
	0x01DAA354 LDUR V1, [X8 + 0xC]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x234A000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x234E000
	017 Move X0, [X0+1464]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x234E000
	024 Move X0, [X0+1480]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: System.Void Awake()

Disassembly:
	0x01DAA358 FSUB S0, S0, S10
	0x01DAA35C FSUB V1.2S, V1.2S, V9.2S
	0x01DAA360 FMUL S0, S3, S0
	0x00000000 INVALID
	0x01DAA368 FADD S2, S10, S0
	0x01DAA36C FADD V0.2S, V9.2S, V1.2S
	0x01DAA370 MOV S1, V0.S[1]
	0x01DAA374 BL 0x3C3FC4C
	0x01DAA378 LDR X0, [X19 + 0x10]
	0x01DAA37C CBZ X0, 0x1DAA3A0
	0x01DAA380 STR S8, [X0 + 0xDC]
	0x01DAA384 LDP X20, X19, [X31 + 0x40]
	0x01DAA388 LDP X30, X21, [X31 + 0x30]
	0x01DAA38C LDP D9, D8, [X31 + 0x20]
	0x01DAA390 LDR V10, [X31 + 0x10]
	0x01DAA394 MOV X1, X31
	0x01DAA398 ADD X31, X31, 0x50
	0x01DAA39C B 0x1DA9704
	0x01DAA3A0 BL 0x1C16F20
	0x01DAA3A4 STP D9, D8, [X31 - 0x30]!
	0x01DAA3A8 STP X30, X21, [X31 + 0x10]
	0x01DAA3AC STP X20, X19, [X31 + 0x20]
	0x01DAA3B0 ADRP X20, 0x262E000
	0x01DAA3B4 LDRB W8, [X20 + 0xAC2]
	0x01DAA3B8 MOV X19, X0
	0x01DAA3BC TBNZ X8, 0x0, 0x1DAA3D4
	0x01DAA3C0 ADRP X0, 0x2349000
	0x01DAA3C4 LDR X0, [X0 + 0x598]
	0x01DAA3C8 BL 0x1C16CF4
	0x01DAA3CC MOVZ W8, 0x1
	0x01DAA3D0 STRB W8, [X20 + 0xAC2]
	0x01DAA3D4 LDR X8, [X19 + 0x10]
	0x01DAA3D8 CBZ X8, 0x1DAA52C
	0x01DAA3DC ADRP X9, 0x2349000
	0x01DAA3E0 LDR X9, [X9 + 0x598]
	0x01DAA3E4 LDR X20, [X8 + 0x88]
	0x01DAA3E8 LDR X0, [X9]
	0x01DAA3EC LDR W9, [X0 + 0xE0]
	0x01DAA3F0 CBNZ W9, 0x1DAA3F8
	0x01DAA3F4 BL 0x1C16DFC
	0x01DAA3F8 MOV X0, X20
	0x01DAA3FC MOV X1, X31
	0x01DAA400 MOV X2, X31
	0x01DAA404 BL 0x3C3883C
	0x01DAA408 TBZ X0, 0x0, 0x1DAA41C
	0x01DAA40C LDP X20, X19, [X31 + 0x20]
	0x01DAA410 LDP X30, X21, [X31 + 0x10]
	0x01DAA414 LDP D9, D8, [X31], #0x30
	0x01DAA418 RET
	0x01DAA41C LDR X8, [X19 + 0x10]
	0x01DAA420 CBZ X8, 0x1DAA52C
	0x01DAA424 LDR V0, [X19 + 0x18]
	0x01DAA428 LDR X0, [X8 + 0x88]
	0x01DAA42C FMOV S1, 1
	0x01DAA430 FMIN S1, S0, S1
	0x01DAA434 FCMP S0, 0x0
	0x01DAA438 FMOV S0, W31
	0x01DAA43C FCSEL S0, S1, S0, PL
	0x01DAA440 CBZ X0, 0x1DAA52C
	0x01DAA444 LDUR V1, [X8 + 0xEC]
	0x01DAA448 LDR V2, [X8 + 0xF4]
	0x01DAA44C LDR V3, [X8 + 0xE8]
	0x01DAA450 LDR V4, [X8 + 0xE0]
	0x01DAA454 MOV X1, X31
	0x01DAA458 FSUB S3, S3, S2
	0x01DAA45C FSUB V4.2S, V4.2S, V1.2S
	0x01DAA460 FMUL S3, S0, S3
	0x00000000 INVALID
	0x01DAA468 FADD V0.2S, V1.2S, V0.2S
	0x01DAA46C FADD S2, S2, S3
	0x01DAA470 MOV S1, V0.S[1]
	0x01DAA474 BL 0x3C3EC04
	0x01DAA478 LDR X8, [X19 + 0x10]
	0x01DAA47C CBZ X8, 0x1DAA52C
	0x01DAA480 ADRP X21, 0x262E000
	0x01DAA484 LDR X20, [X8 + 0x88]
	0x01DAA488 LDR V8, [X8 + 0xF8]
	0x01DAA48C LDRB W9, [X21 + 0x85B]
	0x01DAA490 LDR V9, [X8 + 0x100]
	0x01DAA494 CBNZ W9, 0x1DAA4AC
	0x01DAA498 ADRP X0, 0x2349000
	0x01DAA49C LDR X0, [X0 + 0x5A0]
	0x01DAA4A0 BL 0x1C16CF4
	0x01DAA4A4 MOVZ W8, 0x1
	0x01DAA4A8 STRB W8, [X21 + 0x85B]
	0x01DAA4AC LDR V0, [X19 + 0x18]
	0x01DAA4B0 FMOV S1, 1
	0x01DAA4B4 FMIN S1, S0, S1
	0x01DAA4B8 FCMP S0, 0x0
	0x01DAA4BC FMOV S0, W31
	0x01DAA4C0 FCSEL S0, S1, S0, PL
	0x01DAA4C4 CBZ X20, 0x1DAA52C
	0x01DAA4C8 ADRP X8, 0x2349000
	0x01DAA4CC LDR X8, [X8 + 0x5A0]
	0x01DAA4D0 MOV X0, X20
	0x01DAA4D4 MOV X1, X31
	0x01DAA4D8 LDR X8, [X8]
	0x01DAA4DC LDR X8, [X8 + 0xB8]
	0x01DAA4E0 LDR V1, [X8 + 0x14]
	0x01DAA4E4 LDUR V2, [X8 + 0xC]
	0x01DAA4E8 FSUB S1, S1, S9
	0x01DAA4EC FSUB V2.2S, V2.2S, V8.2S
	0x01DAA4F0 FMUL S1, S0, S1
	0x00000000 INVALID
	0x01DAA4F8 FADD V0.2S, V8.2S, V0.2S
	0x01DAA4FC FADD S2, S9, S1
	0x01DAA500 MOV S1, V0.S[1]
	0x01DAA504 BL 0x3C3FC4C
	0x01DAA508 LDR X0, [X19 + 0x10]
	0x01DAA50C CBZ X0, 0x1DAA52C
	0x01DAA510 LDR V0, [X19 + 0x18]
	0x01DAA514 LDP X20, X19, [X31 + 0x20]
	0x01DAA518 LDP X30, X21, [X31 + 0x10]
	0x01DAA51C MOV X1, X31
	0x01DAA520 STR S0, [X0 + 0xDC]
	0x01DAA524 LDP D9, D8, [X31], #0x30
	0x01DAA528 B 0x1DA9704
	0x01DAA52C BL 0x1C16F20
	0x01DAA530 STR X30, [X31 - 0x30]!
	0x01DAA534 STP X22, X21, [X31 + 0x10]
	0x01DAA538 STP X20, X19, [X31 + 0x20]
	0x01DAA53C ADRP X20, 0x262E000

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+128], X30
	003 Move [X31+136], X23
	004 Move [X31+144], X22
	005 Move [X31+152], X21
	006 Move [X31+160], X20
	007 Move [X31+168], X19
	008 Move X20, 0x262F000
	009 Move X21, 0x234D000
	010 Move W8, [X20+2743]
	011 Move X21, [X21+3000]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0x234B000
	018 Move X0, [X0+3696]
	019 Call 0x1C17CF4
	020 Move X0, 0x234D000
	021 Move X0, [X0+3000]
	022 Call 0x1C17CF4
	023 Move X0, 0x234E000
	024 Move X0, [X0+1488]
	025 Call 0x1C17CF4
	026 Move X0, 0x234E000
	027 Move X0, [X0+1496]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+2743], W8
	031 Move X1, [X21]
	032 Move X0, X19
	033 Call 0x21A4894, X0
	034 Move [X19+208], X0
	035 Compare X0, 0
	036 JumpIfEqual {141}
	037 Move X23, 0x234B000
	038 Move X23, [X23+3696]
	039 Move X20, X0
	040 Move X21, [X0+464]
	041 Move X22, 0x234E000
	042 Move X0, [X23]
	043 Move X22, [X22+1496]
	044 Call 0x1C17F10
	045 Move X2, [X22]
	046 Move X1, X19
	047 Move X3, X31
	048 Move X22, X0
	049 Call Action..ctor, X0, X1, X2
	050 Move X0, X21
	051 Move X1, X22
	052 Move X2, X31
	053 Call Delegate.Combine, X0, X1
	054 Move X1, [X23]
	055 Compare X0, 0
	056 JumpIfEqual {62}
	057 Move X8, [X0]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move [X20+464], X0
	060 Move X8, [X0]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move [X20+464], X0
	063 Move X22, [X19+208]
	064 Compare X22, 0
	065 JumpIfEqual {141}
	066 Move X21, 0x234E000
	067 Move X20, [X22+448]
	068 Move X21, [X21+1488]
	069 Move X0, X1
	070 Call 0x1C17F10
	071 Move X2, [X21]
	072 Move X1, X19
	073 Move X3, X31
	074 Move X21, X0
	075 Call Action..ctor, X0, X1, X2
	076 Move X0, X20
	077 Move X1, X21
	078 Move X2, X31
	079 Call Delegate.Combine, X0, X1
	080 Compare X0, 0
	081 JumpIfEqual {89}
	082 Move X1, [X23]
	083 Move X8, [X0]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move [X22+448], X0
	086 Move X8, [X0]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Call 0x1C181E0
	089 Move [X22+448], X0
	090 Move X0, [X19+128]
	091 Compare X0, 0
	092 JumpIfEqual {141}
	093 Move X1, X31
	094 Call Renderer.get_material, X0
	095 Move X21, 0x262F000
	096 Move W8, [X21+2752]
	097 Move W19, [X19+260]
	098 Move X20, X0
	099 Compare W8, 0
	100 JumpIfNotEqual {106}
	101 Move X0, 0x234E000
	102 Move X0, [X0+624]
	103 Call 0x1C17CF4
	104 Move W8, 1
	105 Move [X21+2752], W8
	106 Move X8, 0x234E000
	107 Move X8, [X8+624]
	108 Move X8, [X8]
	109 Move X8, [X8+184]
	110 Move V1, [X8+96]
	111 Move V0, [X8+112]
	112 Move V2, [X8+64]
	113 Move V3, [X8+80]
	114 Move [X31+96], V1
	115 Move [X31+104], V0
	116 Move [X31+64], V2
	117 Move [X31+72], V3
	118 Compare X20, 0
	119 JumpIfEqual {141}
	120 Move V0, [X31+64]
	121 Move V1, [X31+80]
	122 Move V2, [X31+96]
	123 Move V3, [X31+112]
	124 Add X2, X31, 0
	125 Move X0, X20
	126 Move W1, W19
	127 Move X3, X31
	128 Move [X31], V0
	129 Move [X31+8], V1
	130 Move [X31+32], V2
	131 Move [X31+40], V3
	132 Call Material.SetMatrix, X0, X1, X2
	133 Move X20, [X31+160]
	134 Move X19, [X31+168]
	135 Move X22, [X31+144]
	136 Move X21, [X31+152]
	137 Move X30, [X31+128]
	138 Move X23, [X31+136]
	139 Add X31, X31, 176
	140 Return 
	141 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x01DAA540 ADRP X22, 0x234D000
	0x01DAA544 ADRP X21, 0x2349000
	0x01DAA548 LDRB W8, [X20 + 0xAC3]
	0x01DAA54C LDR X22, [X22 + 0x5F8]
	0x01DAA550 LDR X21, [X21 + 0x598]
	0x01DAA554 MOV X19, X0
	0x01DAA558 TBNZ X8, 0x0, 0x1DAA594
	0x01DAA55C ADRP X0, 0x2349000
	0x01DAA560 LDR X0, [X0 + 0x970]
	0x01DAA564 BL 0x1C16CF4
	0x01DAA568 ADRP X0, 0x234D000
	0x01DAA56C LDR X0, [X0 + 0x5F8]
	0x01DAA570 BL 0x1C16CF4
	0x01DAA574 ADRP X0, 0x2349000
	0x01DAA578 LDR X0, [X0 + 0x598]
	0x01DAA57C BL 0x1C16CF4
	0x01DAA580 ADRP X0, 0x234D000
	0x01DAA584 LDR X0, [X0 + 0x600]
	0x01DAA588 BL 0x1C16CF4
	0x01DAA58C MOVZ W8, 0x1
	0x01DAA590 STRB W8, [X20 + 0xAC3]
	0x01DAA594 LDR X8, [X22]
	0x01DAA598 LDR X0, [X21]
	0x01DAA59C LDR X8, [X8 + 0xB8]
	0x01DAA5A0 LDR W9, [X0 + 0xE0]
	0x01DAA5A4 LDR X20, [X8]
	0x01DAA5A8 CBNZ W9, 0x1DAA5B0
	0x01DAA5AC BL 0x1C16DFC
	0x01DAA5B0 MOV X0, X20
	0x01DAA5B4 MOV X1, X31
	0x01DAA5B8 MOV X2, X31
	0x01DAA5BC BL 0x3C354F8
	0x01DAA5C0 TBZ X0, 0x0, 0x1DAA600
	0x01DAA5C4 MOV X0, X19
	0x01DAA5C8 MOV X1, X31
	0x01DAA5CC BL 0x3C32ECC
	0x01DAA5D0 LDR X8, [X21]
	0x01DAA5D4 MOV X19, X0
	0x01DAA5D8 LDR W9, [X8 + 0xE0]
	0x01DAA5DC CBNZ W9, 0x1DAA5E8
	0x01DAA5E0 MOV X0, X8
	0x01DAA5E4 BL 0x1C16DFC
	0x01DAA5E8 MOV X0, X19
	0x01DAA5EC LDP X20, X19, [X31 + 0x20]
	0x01DAA5F0 LDP X22, X21, [X31 + 0x10]
	0x01DAA5F4 MOV X1, X31
	0x01DAA5F8 LDR X30, [X31], #0x30
	0x01DAA5FC B 0x3C394A8
	0x01DAA600 LDR X8, [X22]
	0x01DAA604 ADRP X9, 0x2349000
	0x01DAA608 ADRP X21, 0x234D000
	0x01DAA60C LDR X8, [X8 + 0xB8]
	0x01DAA610 LDR X9, [X9 + 0x970]
	0x01DAA614 STR X19, [X8]
	0x01DAA618 LDR X0, [X9]
	0x01DAA61C LDR X20, [X19 + 0x28]
	0x01DAA620 LDR W8, [X0 + 0xE0]
	0x01DAA624 LDR X21, [X21 + 0x600]
	0x01DAA628 CBNZ W8, 0x1DAA630
	0x01DAA62C BL 0x1C16DFC
	0x01DAA630 MOV X0, X31
	0x01DAA634 BL 0x3C01A10
	0x01DAA638 LDR X8, [X21]
	0x01DAA63C MOV X1, X0
	0x01DAA640 MOV X2, X31
	0x01DAA644 MOV X0, X8
	0x01DAA648 BL 0x321B938
	0x01DAA64C CBZ X20, 0x1DAA694
	0x01DAA650 LDR X8, [X20]
	0x01DAA654 MOV X1, X0
	0x01DAA658 MOV X0, X20
	0x01DAA65C LDR X9, [X8 + 0x558]
	0x01DAA660 LDR X2, [X8 + 0x560]
	0x01DAA664 BLR X9
	0x01DAA668 LDR X0, [X19 + 0x30]
	0x01DAA66C CBZ X0, 0x1DAA694
	0x01DAA670 MOV X1, X31
	0x01DAA674 BL 0x3C32ECC
	0x01DAA678 CBZ X0, 0x1DAA694
	0x01DAA67C LDP X20, X19, [X31 + 0x20]
	0x01DAA680 LDP X22, X21, [X31 + 0x10]
	0x01DAA684 MOV W1, W31
	0x01DAA688 MOV X2, X31
	0x01DAA68C LDR X30, [X31], #0x30
	0x01DAA690 B 0x3C357B4
	0x01DAA694 BL 0x1C16F20
	0x01DAA698 STR X30, [X31 - 0x30]!
	0x01DAA69C STP X22, X21, [X31 + 0x10]
	0x01DAA6A0 STP X20, X19, [X31 + 0x20]
	0x01DAA6A4 ADRP X22, 0x262E000
	0x01DAA6A8 ADRP X21, 0x234D000
	0x01DAA6AC ADRP X20, 0x2349000
	0x01DAA6B0 LDRB W8, [X22 + 0xAC4]
	0x01DAA6B4 LDR X21, [X21 + 0x5F8]
	0x01DAA6B8 LDR X20, [X20 + 0x598]
	0x01DAA6BC MOV X19, X0
	0x01DAA6C0 TBNZ X8, 0x0, 0x1DAA6E4
	0x01DAA6C4 ADRP X0, 0x234D000
	0x01DAA6C8 LDR X0, [X0 + 0x5F8]
	0x01DAA6CC BL 0x1C16CF4
	0x01DAA6D0 ADRP X0, 0x2349000
	0x01DAA6D4 LDR X0, [X0 + 0x598]
	0x01DAA6D8 BL 0x1C16CF4
	0x01DAA6DC MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x262F000
	008 Move X21, 0x234D000
	009 Move W8, [X20+2744]
	010 Move X21, [X21+2680]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x234B000
	017 Move X0, [X0+3696]
	018 Call 0x1C17CF4
	019 Move X0, 0x234C000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move X0, 0x234D000
	023 Move X0, [X0+2680]
	024 Call 0x1C17CF4
	025 Move X0, 0x234E000
	026 Move X0, [X0+1488]
	027 Call 0x1C17CF4
	028 Move X0, 0x234E000
	029 Move X0, [X0+1496]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+2744], W8
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Compare X19, 0
	039 JumpIfEqual {116}
	040 Move W8, [X19+48]
	041 Move X23, [X19+208]
	042 Or W8, W8, 8
	043 Move [X19+48], W8
	044 Compare X23, 0
	045 JumpIfEqual {116}
	046 Move X22, 0x234B000
	047 Move X22, [X22+3696]
	048 Move X21, 0x234E000
	049 Move X20, [X23+464]
	050 Move X0, [X22]
	051 Move X21, [X21+1496]
	052 Call 0x1C17F10
	053 Move X2, [X21]
	054 Move X1, X19
	055 Move X3, X31
	056 Move X21, X0
	057 Call Action..ctor, X0, X1, X2
	058 Move X0, X20
	059 Move X1, X21
	060 Move X2, X31
	061 Call Delegate.Remove, X0, X1
	062 Move X1, [X22]
	063 Compare X0, 0
	064 JumpIfEqual {70}
	065 Move X8, [X0]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move [X23+464], X0
	068 Move X8, [X0]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move [X23+464], X0
	071 Move X23, [X19+208]
	072 Compare X23, 0
	073 JumpIfEqual {116}
	074 Move X21, 0x234E000
	075 Move X20, [X23+448]
	076 Move X21, [X21+1488]
	077 Move X0, X1
	078 Call 0x1C17F10
	079 Move X2, [X21]
	080 Move X1, X19
	081 Move X3, X31
	082 Move X21, X0
	083 Call Action..ctor, X0, X1, X2
	084 Move X0, X20
	085 Move X1, X21
	086 Move X2, X31
	087 Call Delegate.Remove, X0, X1
	088 Compare X0, 0
	089 JumpIfEqual {97}
	090 Move X1, [X22]
	091 Move X8, [X0]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move [X23+448], X0
	094 Move X8, [X0]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Call 0x1C181E0
	097 Move [X23+448], X0
	098 Move X8, 0x234C000
	099 Move X8, [X8+1448]
	100 Move W19, [X19+216]
	101 Move X0, [X8]
	102 Move W8, [X0+224]
	103 Compare W8, 0
	104 JumpIfNotEqual {106}
	105 Call 0x1C17DFC
	106 Move W0, W19
	107 Move X20, [X31+32]
	108 Move X19, [X31+40]
	109 Move X22, [X31+16]
	110 Move X21, [X31+24]
	111 Move X1, X31
	112 Move X30, [X31+48]
	113 Move X23, [X31+56]
	114 Call LeanTween.cancel, X0
	115 Return 
	116 Call 0x1C17F20

Method: System.Void Spawned()

Disassembly:
	0x01DAA6E0 STRB W8, [X22 + 0xAC4]
	0x01DAA6E4 LDR X8, [X21]
	0x01DAA6E8 LDR X0, [X20]
	0x01DAA6EC LDR X8, [X8 + 0xB8]
	0x01DAA6F0 LDR W9, [X0 + 0xE0]
	0x01DAA6F4 LDR X20, [X8]
	0x01DAA6F8 CBNZ W9, 0x1DAA700
	0x01DAA6FC BL 0x1C16DFC
	0x01DAA700 MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call NetworkBehaviour.Spawned, X0
	006 Move X0, X19
	007 Call Umbrella.UpdateOpenedAmount, X0
	008 Move X0, X19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Call Umbrella.HandleIsOpenChanged, X0
	012 Return 

Method: System.Void UpdateOpenedAmount()

Disassembly:
	0x01DAA704 MOV X1, X19
	0x01DAA708 MOV X2, X31
	0x01DAA70C BL 0x3C3883C
	0x01DAA710 TBZ X0, 0x0, 0x1DAA720
	0x01DAA714 LDR X8, [X21]
	0x01DAA718 LDR X8, [X8 + 0xB8]
	0x01DAA71C STR X31, [X8]
	0x01DAA720 LDP X20, X19, [X31 + 0x20]
	0x01DAA724 LDP X22, X21, [X31 + 0x10]
	0x01DAA728 LDR X30, [X31], #0x30
	0x01DAA72C RET
	0x01DAA730 STR X30, [X31 - 0x30]!
	0x01DAA734 STP X22, X21, [X31 + 0x10]
	0x01DAA738 STP X20, X19, [X31 + 0x20]
	0x01DAA73C ADRP X22, 0x262E000
	0x01DAA740 ADRP X21, 0x234D000
	0x01DAA744 LDRB W8, [X22 + 0xAC5]
	0x01DAA748 LDR X21, [X21 + 0x5F8]
	0x01DAA74C MOV W20, W1
	0x01DAA750 MOV X19, X0
	0x01DAA754 TBNZ X8, 0x0, 0x1DAA76C
	0x01DAA758 ADRP X0, 0x234D000
	0x01DAA75C LDR X0, [X0 + 0x5F8]
	0x01DAA760 BL 0x1C16CF4
	0x01DAA764 MOVZ W8, 0x1
	0x01DAA768 STRB W8, [X22 + 0xAC5]
	0x01DAA76C LDR X8, [X21]
	0x01DAA770 LDR X8, [X8 + 0xB8]
	0x01DAA774 LDR X8, [X8]
	0x01DAA778 CBZ X8, 0x1DAA820
	0x01DAA77C LDR X0, [X8 + 0x20]
	0x01DAA780 CBZ X0, 0x1DAA820
	0x01DAA784 AND W1, W20, 0x1
	0x01DAA788 MOV X2, X31
	0x01DAA78C BL 0x3C357B4
	0x01DAA790 MOV X0, X19
	0x01DAA794 MOV X1, X31
	0x01DAA798 BL 0x32277A8
	0x01DAA79C LDR X8, [X21]
	0x01DAA7A0 LDR X8, [X8 + 0xB8]
	0x01DAA7A4 LDR X8, [X8]
	0x01DAA7A8 CBZ X8, 0x1DAA820
	0x01DAA7AC MOV W20, W0
	0x01DAA7B0 LDR X0, [X8 + 0x30]
	0x01DAA7B4 CBZ X0, 0x1DAA820
	0x01DAA7B8 MOV X1, X31
	0x01DAA7BC BL 0x3C32ECC
	0x01DAA7C0 CBZ X0, 0x1DAA820
	0x01DAA7C4 EOR W8, W20, 0x1
	0x01DAA7C8 AND W1, W8, 0x1
	0x01DAA7CC MOV X2, X31
	0x01DAA7D0 BL 0x3C357B4
	0x01DAA7D4 TBZ X20, 0x0, 0x1DAA7E8
	0x01DAA7D8 LDP X20, X19, [X31 + 0x20]
	0x01DAA7DC LDP X22, X21, [X31 + 0x10]
	0x01DAA7E0 LDR X30, [X31], #0x30
	0x01DAA7E4 RET
	0x01DAA7E8 LDR X8, [X21]
	0x01DAA7EC LDR X8, [X8 + 0xB8]
	0x01DAA7F0 LDR X8, [X8]
	0x01DAA7F4 CBZ X8, 0x1DAA820
	0x01DAA7F8 LDR X0, [X8 + 0x30]
	0x01DAA7FC CBZ X0, 0x1DAA820
	0x01DAA800 LDR X8, [X0]
	0x01DAA804 MOV X1, X19
	0x01DAA808 LDP X20, X19, [X31 + 0x20]
	0x01DAA80C LDP X22, X21, [X31 + 0x10]
	0x01DAA810 LDR X3, [X8 + 0x558]
	0x01DAA814 LDR X2, [X8 + 0x560]
	0x01DAA818 LDR X30, [X31], #0x30
	0x01DAA81C BR X3
	0x01DAA820 BL 0x1C16F20
	0x01DAA824 MOV X1, X31
	0x01DAA828 B 0x3C36C30
	0x01DAA82C STP X30, X21, [X31 - 0x20]!
	0x01DAA830 STP X20, X19, [X31 + 0x10]
	0x01DAA834 ADRP X21, 0x262E000
	0x01DAA838 ADRP X20, 0x2349000
	0x01DAA83C LDRB W8, [X21 + 0xAC6]
	0x01DAA840 LDR X20, [X20 + 0x598]
	0x01DAA844 MOV X19, X0
	0x01DAA848 TBNZ X8, 0x0, 0x1DAA860

ISIL:
	001 Subtract X31, X31, 432
	002 Move [X31+384], X29
	003 Move [X31+400], X30
	004 Move [X31+408], X21
	005 Move [X31+416], X20
	006 Move [X31+424], X19
	007 Move X21, 0x262F000
	008 Move X20, 0x234A000
	009 Move W8, [X21+2745]
	010 Move X20, [X20+1432]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x234A000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2745], W8
	021 Move X0, [X20]
	022 Move X20, [X19+136]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {115}
	035 Move X0, [X19+128]
	036 Compare X0, 0
	037 JumpIfEqual {122}
	038 Move X1, X31
	039 Call Component.get_transform, X0
	040 Compare X0, 0
	041 JumpIfEqual {122}
	042 Add X8, X31, 320
	043 Move X1, X31
	044 Call Transform.get_worldToLocalMatrix, X0
	045 Move V0, [X31+320]
	046 Move V1, [X31+336]
	047 Move V2, [X31+352]
	048 Move V3, [X31+368]
	049 Move [X31+256], V0
	050 Move [X31+264], V1
	051 Move [X31+288], V2
	052 Move [X31+296], V3
	053 Move X0, [X19+136]
	054 Compare X0, 0
	055 JumpIfEqual {122}
	056 Add X8, X31, 320
	057 Move X1, X31
	058 Call Transform.get_localToWorldMatrix, X0
	059 Move V0, [X31+320]
	060 Move V1, [X31+336]
	061 Move V2, [X31+352]
	062 Move V3, [X31+368]
	063 Add X8, X31, 192
	064 Add X0, X31, 128
	065 Move [X31+64], V0
	066 Move [X31+72], V1
	067 Move V0, [X31+256]
	068 Move V1, [X31+272]
	069 Move [X31+96], V2
	070 Move [X31+104], V3
	071 Move V2, [X31+288]
	072 Move V3, [X31+304]
	073 Add X1, X31, 64
	074 Move X2, X31
	075 Move [X31+128], V0
	076 Move [X31+136], V1
	077 Move [X31+160], V2
	078 Move [X31+168], V3
	079 Call Matrix4x4.op_Multiply, X0, X1
	080 Move V0, [X31+192]
	081 Move V1, [X31+208]
	082 Move V2, [X31+224]
	083 Move V3, [X31+240]
	084 Move [X31+320], V0
	085 Move [X31+328], V1
	086 Move [X31+352], V2
	087 Move [X31+360], V3
	088 Move X0, [X19+128]
	089 Compare X0, 0
	090 JumpIfEqual {122}
	091 Move X1, X31
	092 Call Renderer.get_material, X0
	093 Move W1, [X19+260]
	094 Move V0, [X31+320]
	095 Move V1, [X31+336]
	096 Move V2, [X31+352]
	097 Move V3, [X31+368]
	098 Move [X31+192], V0
	099 Move [X31+200], V1
	100 Move [X31+224], V2
	101 Move [X31+232], V3
	102 Compare X0, 0
	103 JumpIfEqual {122}
	104 Move V0, [X31+192]
	105 Move V1, [X31+208]
	106 Move V2, [X31+224]
	107 Move V3, [X31+240]
	108 Add X2, X31, 0
	109 Move X3, X31
	110 Move [X31], V0
	111 Move [X31+8], V1
	112 Move [X31+32], V2
	113 Move [X31+40], V3
	114 Call Material.SetMatrix, X0, X1, X2
	115 Move X20, [X31+416]
	116 Move X19, [X31+424]
	117 Move X30, [X31+400]
	118 Move X21, [X31+408]
	119 Move X29, [X31+384]
	120 Add X31, X31, 432
	121 Return 
	122 Call 0x1C17F20

Method: System.Void HandleIsOpenChanged()

Disassembly:
	0x01DAA84C ADRP X0, 0x2349000
	0x01DAA850 LDR X0, [X0 + 0x598]
	0x01DAA854 BL 0x1C16CF4
	0x01DAA858 MOVZ W8, 0x1
	0x01DAA85C STRB W8, [X21 + 0xAC6]
	0x01DAA860 MOV X0, X31
	0x01DAA864 BL 0x3C04820
	0x01DAA868 LDR X8, [X20]
	0x01DAA86C MOV X20, X0
	0x01DAA870 LDR W9, [X8 + 0xE0]
	0x01DAA874 CBNZ W9, 0x1DAA880
	0x01DAA878 MOV X0, X8
	0x01DAA87C BL 0x1C16DFC
	0x01DAA880 MOV X0, X20
	0x01DAA884 MOV X1, X31
	0x01DAA888 BL 0x3C38948
	0x01DAA88C TBZ X0, 0x0, 0x1DAA8D8
	0x01DAA890 MOV X0, X19
	0x01DAA894 MOV X1, X31
	0x01DAA898 BL 0x3C32E90
	0x01DAA89C MOV X19, X0
	0x01DAA8A0 MOV X0, X31
	0x01DAA8A4 BL 0x3C04820
	0x01DAA8A8 CBZ X0, 0x1DAA8E4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, [X0+152]
	005 Move X19, X0
	006 Call Umbrella.get_isOpen, X0
	007 Compare X20, 0
	008 JumpIfEqual {27}
	009 And W1, W0, 1
	010 Move X0, X20
	011 Move X2, X31
	012 Call Collider.set_enabled, X0, X1
	013 Move X20, [X19+160]
	014 Move X0, X19
	015 Call Umbrella.get_isOpen, X0
	016 Compare X20, 0
	017 JumpIfEqual {27}
	018 NotImplemented "Instruction ORN not yet implemented."
	019 And W1, W8, 1
	020 Move X0, X20
	021 Move X2, X31
	022 Call Collider.set_enabled, X0, X1
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Call 0x1C17F20

Method: System.Void HandleUse()

Disassembly:
	0x01DAAAE4 LDR X9, [X9 + 0x648]
	0x01DAAAE8 MOV X2, X0
	0x01DAAAEC LDR X8, [X8]
	0x01DAAAF0 MOV X3, X31
	0x01DAAAF4 LDR X1, [X9]
	0x01DAAAF8 MOV X0, X8
	0x01DAAAFC BL 0x3227BD4
	0x01DAAB00 ADRP X8, 0x2349000
	0x01DAAB04 LDR X8, [X8 + 0x788]
	0x01DAAB08 MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Umbrella.get_isOpen, X0
	005 NotImplemented "Instruction ORN not yet implemented."
	006 And W1, W8, 1
	007 Move X0, X19
	008 Call Umbrella.set_isOpen, X0, X1
	009 Move X0, X19
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Call Umbrella.HandleIsOpenChanged, X0
	013 Return 

Method: System.Void HandlePreGrabbed()

Disassembly:
	0x01DAAB0C LDR X8, [X8]
	0x01DAAB10 LDR W9, [X8 + 0xE0]
	0x01DAAB14 CBNZ W9, 0x1DAAB20
	0x01DAAB18 MOV X0, X8
	0x01DAAB1C BL 0x1C16DFC
	0x01DAAB20 ADRP X8, 0x234D000
	0x01DAAB24 ADRP X9, 0x234D000
	0x01DAAB28 LDR X8, [X8 + 0x630]
	0x01DAAB2C LDR X9, [X9 + 0x638]
	0x01DAAB30 MOVZ W4, 0x1B
	0x01DAAB34 MOV X0, X20
	0x01DAAB38 LDR X2, [X8]
	0x01DAAB3C LDR X3, [X9]
	0x01DAAB40 MOV X1, X31
	0x01DAAB44 MOV X5, X31
	0x01DAAB48 BL 0x35C2344

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, [X0+208]
	005 Move X19, X0
	006 Call Umbrella.get_isOpen, X0
	007 Compare X20, 0
	008 JumpIfEqual {19}
	009 And W31, W0, 1
	010 Move W8, 192
	011 Move W9, 184
	012 NotImplemented "Instruction CSEL not yet implemented."
	013 Move X8, [X19]
	014 Move [X20+152], X8
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Return 
	019 Call 0x1C17F20

Method: System.Boolean TryCalculateApplyVelocity(System.Single verticalVelocity, out UnityEngine.Vector3 counterVelocity)

Disassembly:
	0x01DAAB4C LDR X0, [X21]
	0x01DAAB50 LDR W8, [X0 + 0xE0]
	0x01DAAB54 CBNZ W8, 0x1DAAB60
	0x01DAAB58 BL 0x1C16DFC
	0x01DAAB5C LDR X0, [X21]
	0x01DAAB60 LDR X8, [X0 + 0xB8]
	0x01DAAB64 LDR X0, [X8]
	0x01DAAB68 CBZ X0, 0x1DAAB94
	0x01DAAB6C ADRP X8, 0x234D000
	0x01DAAB70 LDR X8, [X8 + 0x620]
	0x01DAAB74 LDRH W1, [X19 + 0x44]
	0x01DAAB78 MOV X2, X19
	0x01DAAB7C LDR X3, [X8]
	0x01DAAB80 BL 0x29EE83C
	0x01DAAB84 LDP X20, X19, [X31 + 0x20]
	0x01DAAB88 LDP X30, X21, [X31 + 0x10]
	0x01DAAB8C ADD X31, X31, 0x30
	0x01DAAB90 RET
	0x01DAAB94 BL 0x1C16F20
	0x01DAAB98 SUB X31, X31, 0x60
	0x01DAAB9C STR X30, [X31 + 0x10]
	0x01DAABA0 STP X26, X25, [X31 + 0x20]
	0x01DAABA4 STP X24, X23, [X31 + 0x30]
	0x01DAABA8 STP X22, X21, [X31 + 0x40]
	0x01DAABAC STP X20, X19, [X31 + 0x50]
	0x01DAABB0 ADRP X21, 0x262E000
	0x01DAABB4 ADRP X20, 0x2349000
	0x01DAABB8 LDRB W8, [X21 + 0xAC9]
	0x01DAABBC LDR X20, [X20 + 0x970]
	0x01DAABC0 MOV X19, X0
	0x01DAABC4 TBNZ X8, 0x0, 0x1DAAC24
	0x01DAABC8 ADRP X0, 0x2349000
	0x01DAABCC LDR X0, [X0 + 0x970]
	0x01DAABD0 BL 0x1C16CF4
	0x01DAABD4 ADRP X0, 0x234D000
	0x01DAABD8 LDR X0, [X0 + 0x650]
	0x01DAABDC BL 0x1C16CF4
	0x01DAABE0 ADRP X0, 0x234D000
	0x01DAABE4 LDR X0, [X0 + 0x658]
	0x01DAABE8 BL 0x1C16CF4
	0x01DAABEC ADRP X0, 0x234D000
	0x01DAABF0 LDR X0, [X0 + 0x660]
	0x01DAABF4 BL 0x1C16CF4
	0x01DAABF8 ADRP X0, 0x234D000
	0x01DAABFC LDR X0, [X0 + 0x668]
	0x01DAAC00 BL 0x1C16CF4
	0x01DAAC04 ADRP X0, 0x234D000
	0x01DAAC08 LDR X0, [X0 + 0x670]
	0x01DAAC0C BL 0x1C16CF4
	0x01DAAC10 ADRP X0, 0x2349000
	0x01DAAC14 LDR X0, [X0 + 0x598]
	0x01DAAC18 BL 0x1C16CF4
	0x01DAAC1C MOVZ W8, 0x1
	0x01DAAC20 STRB W8, [X21 + 0xAC9]
	0x01DAAC24 LDR X0, [X20]
	0x01DAAC28 STP X31, X31, [X31]
	0x01DAAC2C LDR W8, [X0 + 0xE0]
	0x01DAAC30 CBNZ W8, 0x1DAAC38
	0x01DAAC34 BL 0x1C16DFC
	0x01DAAC38 MOV X0, X31
	0x01DAAC3C BL 0x3C018E4
	0x01DAAC40 TBNZ X0, 0x0, 0x1DAAD68
	0x01DAAC44 ADRP X23, 0x2349000
	0x01DAAC48 LDR X23, [X23 + 0x598]
	0x01DAAC4C LDR X0, [X23]
	0x01DAAC50 LDR W8, [X0 + 0xE0]
	0x01DAAC54 CBNZ W8, 0x1DAAC5C
	0x01DAAC58 BL 0x1C16DFC
	0x01DAAC5C ADRP X8, 0x234D000
	0x01DAAC60 LDR X8, [X8 + 0x670]
	0x01DAAC64 MOVZ W0, 0x1
	0x01DAAC68 LDR X1, [X8]
	0x01DAAC6C BL 0x222D2AC
	0x01DAAC70 ADRP X8, 0x234D000
	0x01DAAC74 LDR X8, [X8 + 0x668]
	0x01DAAC78 MOV X21, X0
	0x01DAAC7C LDR X8, [X8]
	0x01DAAC80 MOV X0, X8
	0x01DAAC84 BL 0x1C16F10
	0x01DAAC88 ADRP X8, 0x234D000
	0x01DAAC8C LDR X8, [X8 + 0x660]
	0x01DAAC90 MOV X20, X0
	0x01DAAC94 LDR X1, [X8]
	0x01DAAC98 BL 0x2DA4FB0
	0x01DAAC9C CBZ X21, 0x1DAAD84
	0x01DAACA0 LDR X8, [X21 + 0x18]
	0x01DAACA4 CMP W8, 0x1
	0x01DAACA8 B.LT 0x1DAAD18
	0x01DAACAC ADRP X26, 0x234D000
	0x01DAACB0 LDR X26, [X26 + 0x650]
	0x01DAACB4 MOV X24, X31
	0x01DAACB8 AND X8, X8, 0x0
	0x01DAACBC ADD X25, X21, 0x20
	0x01DAACC0 CMP X24, W8, UXTW
	0x01DAACC4 B.CS 0x1DAAD88
	0x01DAACC8 LDR X0, [X23]
	0x01DAACCC LDR X22, [X25, X24, LSL #3]
	0x01DAACD0 LDR W8, [X0 + 0xE0]
	0x01DAACD4 CBNZ W8, 0x1DAACDC
	0x01DAACD8 BL 0x1C16DFC
	0x01DAACDC MOV X0, X22
	0x01DAACE0 MOV X1, X19
	0x01DAACE4 MOV X2, X31
	0x01DAACE8 BL 0x3C3883C
	0x01DAACEC TBNZ X0, 0x0, 0x1DAAD08
	0x01DAACF0 CBZ X22, 0x1DAAD84
	0x01DAACF4 CBZ X20, 0x1DAAD84
	0x01DAACF8 LDR X2, [X26]
	0x01DAACFC LDRH W1, [X22 + 0x44]
	0x01DAAD00 MOV X0, X20
	0x01DAAD04 BL 0x2DA60F8
	0x01DAAD08 LDR W8, [X21 + 0x18]
	0x01DAAD0C ADD X24, X24, 0x1
	0x01DAAD10 CMP X24, W8, SXTW
	0x01DAAD14 B.LT 0x1DAACC0
	0x01DAAD18 ADRP X22, 0x234D000
	0x01DAAD1C LDRH W21, [X19 + 0x44]
	0x01DAAD20 LDR X22, [X22 + 0x658]
	0x01DAAD24 ANDS W31, W21, 0xFFFF
	0x01DAAD28 B.EQ 0x1DAAD44
	0x01DAAD2C CBZ X20, 0x1DAAD84
	0x01DAAD30 LDR X2, [X22]
	0x01DAAD34 MOV X0, X20
	0x01DAAD38 MOV W1, W21
	0x01DAAD3C BL 0x2DA5658
	0x01DAAD40 TBZ X0, 0x0, 0x1DAAD64
	0x01DAAD44 MOV X0, X31
	0x01DAAD48 BL 0x337684C
	0x01DAAD4C STP X0, X1, [X31]
	0x01DAAD50 ADD X0, X31, 0x0
	0x01DAAD54 MOV X1, X31
	0x01DAAD58 BL 0x33788AC
	0x01DAAD5C MOV W21, W0
	0x01DAAD60 B 0x1DAAD24
	0x01DAAD64 STRH W21, [X19 + 0x44]
	0x01DAAD68 LDP X20, X19, [X31 + 0x50]
	0x01DAAD6C LDP X22, X21, [X31 + 0x40]
	0x01DAAD70 LDP X24, X23, [X31 + 0x30]
	0x01DAAD74 LDP X26, X25, [X31 + 0x20]
	0x01DAAD78 LDR X30, [X31 + 0x10]
	0x01DAAD7C ADD X31, X31, 0x60
	0x01DAAD80 RET

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D14
	003 Move [X31+40], D13
	004 Move [X31+48], D12
	005 Move [X31+56], D11
	006 Move [X31+64], D10
	007 Move [X31+72], D9
	008 Move [X31+80], D8
	009 Move [X31+88], X30
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X21, 0x234A000
	015 Move X21, [X21+1440]
	016 Move X19, X1
	017 NotImplemented "Instruction FCMP not yet implemented."
	018 Move X20, X0
	019 Move X0, [X0+144]
	020 Compare X0, 0
	021 JumpIfEqual {158}
	022 Move X1, X31
	023 Move V8, V0
	024 Call Transform.get_forward, X0
	025 Move X22, 0x262F000
	026 Move W8, [X22+1926]
	027 Move V9, V0
	028 Move V10, V1
	029 Move V11, V2
	030 Compare W8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, 0x234A000
	033 Move X0, [X0+1440]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X22+1926], W8
	037 Move X8, [X21]
	038 Move X8, [X8+184]
	039 Move S0, [X8+24]
	040 Move S1, [X8+28]
	041 Move V2, [X8+32]
	042 Multiply S0, S9, S0
	043 Multiply S1, S10, S1
	044 Add S0, S0, S1
	045 Multiply S1, S11, S2
	046 Add S10, S1, S0
	047 NotImplemented "Instruction FCMP not yet implemented."
	048 Move X0, [X20+144]
	049 Compare X0, 0
	050 JumpIfEqual {158}
	051 Move X1, X31
	052 Call Transform.get_forward, X0
	053 Move W8, [X22+1926]
	054 Move V9, V2
	055 Compare W8, 0
	056 JumpIfNotEqual {66}
	057 Move X0, 0x234A000
	058 Move X0, [X0+1440]
	059 Move [X31], V1
	060 Move [X31+8], V0
	061 Call 0x1C17CF4
	062 Move V1, [X31]
	063 Move V0, [X31+16]
	064 Move W8, 1
	065 Move [X22+1926], W8
	066 Move X8, [X21]
	067 Move X20, 0x262F000
	068 Move V4, 0
	069 Move S3, 3
	070 Move X8, [X8+184]
	071 Move S11, -0.25
	072 Move V0.S[1], V1.S[0]
	073 Move V5, [X8+24]
	074 Move V2, [X8+32]
	075 Move W8, [X20+1925]
	076 NotImplemented "Instruction INVALID not yet implemented."
	077 Multiply S14, S2, S3
	078 Compare W8, 0
	079 JumpIfNotEqual {87}
	080 Move X0, 0x234A000
	081 Move X0, [X0+1448]
	082 Move [X31+1], V0
	083 Call 0x1C17CF4
	084 Move V0, [X31+1]
	085 Move W8, 1
	086 Move [X20+1925], W8
	087 Move X8, 0x234A000
	088 Move X8, [X8+1448]
	089 Multiply S12, S10, S10
	090 Multiply S11, S8, S11
	091 Add V10, V0, V13
	092 Move X0, [X8]
	093 Add S8, S9, S14
	094 Move W8, [X0+224]
	095 Compare W8, 0
	096 JumpIfNotEqual {98}
	097 Call 0x1C17DFC
	098 Move X8, -19656704
	099 NotImplemented "Instruction INVALID not yet implemented."
	100 Move V2, [X8+380]
	101 NotImplemented "Instruction FADDP not yet implemented."
	102 Multiply S1, S8, S8
	103 Add S0, S1, S0
	104 NotImplemented "Instruction FSQRT not yet implemented."
	105 NotImplemented "Instruction FCMP not yet implemented."
	106 Multiply S2, S11, S12
	107 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	108 NotImplemented "Instruction INVALID not yet implemented."
	109 NotImplemented "Instruction FDIV not yet implemented."
	110 Move X20, 0x262F000
	111 Move W8, [X20+1923]
	112 Compare W8, 0
	113 JumpIfNotEqual {119}
	114 Move X0, 0x234A000
	115 Move X0, [X0+1440]
	116 Call 0x1C17CF4
	117 Move W8, 1
	118 Move [X20+1923], W8
	119 Move X8, [X21]
	120 Move W0, W31
	121 Move X8, [X8+184]
	122 Move V0, [X8]
	123 Move V1, [X8+8]
	124 Move X20, 0x262F000
	125 Move W8, [X20+1923]
	126 Compare W8, 0
	127 JumpIfNotEqual {135}
	128 Move X0, 0x234A000
	129 Move X0, [X0+1440]
	130 Move [X31+1], V2
	131 Call 0x1C17CF4
	132 Move V2, [X31+1]
	133 Move W8, 1
	134 Move [X20+1923], W8
	135 Move X8, [X21]
	136 Move X8, [X8+184]
	137 Move V0, [X8]
	138 Move V1, [X8+8]
	139 NotImplemented "Instruction INVALID not yet implemented."
	140 Multiply S1, S2, S1
	141 Move W0, 1
	142 Move [X19], D0
	143 Move [X19+8], S1
	144 Move X20, [X31+112]
	145 Move X19, [X31+120]
	146 Move X22, [X31+96]
	147 Move X21, [X31+104]
	148 Move X30, [X31+88]
	149 Move D9, [X31+72]
	150 Move D8, [X31+80]
	151 Move D11, [X31+56]
	152 Move D10, [X31+64]
	153 Move D13, [X31+40]
	154 Move D12, [X31+48]
	155 Move V14, [X31+32]
	156 Add X31, X31, 128
	157 Return X0
	158 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01DAAD84 BL 0x1C16F20
	0x01DAAD88 BL 0x1C16F28
	0x01DAAD8C STR X30, [X31 - 0x30]!
	0x01DAAD90 STP X22, X21, [X31 + 0x10]
	0x01DAAD94 STP X20, X19, [X31 + 0x20]
	0x01DAAD98 ADRP X22, 0x262E000
	0x01DAAD9C ADRP X21, 0x234D000
	0x01DAADA0 LDRB W8, [X22 + 0xACA]
	0x01DAADA4 LDR X21, [X21 + 0x610]
	0x01DAADA8 MOV X19, X1
	0x01DAADAC MOV W20, W0
	0x01DAADB0 TBNZ X8, 0x0, 0x1DAADD4
	0x01DAADB4 ADRP X0, 0x234D000
	0x01DAADB8 LDR X0, [X0 + 0x618]
	0x01DAADBC BL 0x1C16CF4
	0x01DAADC0 ADRP X0, 0x234D000
	0x01DAADC4 LDR X0, [X0 + 0x610]
	0x01DAADC8 BL 0x1C16CF4
	0x01DAADCC MOVZ W8, 0x1
	0x01DAADD0 STRB W8, [X22 + 0xACA]
	0x01DAADD4 LDR X0, [X21]
	0x01DAADD8 LDR W8, [X0 + 0xE0]
	0x01DAADDC CBNZ W8, 0x1DAADE8
	0x01DAADE0 BL 0x1C16DFC
	0x01DAADE4 LDR X0, [X21]
	0x01DAADE8 LDR X8, [X0 + 0xB8]
	0x01DAADEC LDR X0, [X8]
	0x01DAADF0 CBZ X0, 0x1DAAE18
	0x01DAADF4 ADRP X8, 0x234D000
	0x01DAADF8 LDR X8, [X8 + 0x618]
	0x01DAADFC MOV W1, W20
	0x01DAAE00 MOV X2, X19
	0x01DAAE04 LDP X20, X19, [X31 + 0x20]
	0x01DAAE08 LDR X3, [X8]
	0x01DAAE0C LDP X22, X21, [X31 + 0x10]
	0x01DAAE10 LDR X30, [X31], #0x30
	0x01DAAE14 B 0x29F0274
	0x01DAAE18 BL 0x1C16F20
	0x01DAAE1C LDR X8, [X0 + 0x38]
	0x01DAAE20 LDR V0, [X0 + 0x40]
	0x01DAAE24 MOV X0, X8
	0x01DAAE28 B 0x1DAAE2C
	0x01DAAE2C SUB X31, X31, 0x70
	0x01DAAE30 STR D8, [X31 + 0x40]
	0x01DAAE34 STR X30, [X31 + 0x48]
	0x01DAAE38 STP X22, X21, [X31 + 0x50]
	0x01DAAE3C STP X20, X19, [X31 + 0x60]
	0x01DAAE40 ADRP X20, 0x262E000
	0x01DAAE44 LDRB W8, [X20 + 0xACC]
	0x01DAAE48 MOV V8.16B, V0.16B
	0x01DAAE4C MOV X19, X0
	0x01DAAE50 TBNZ X8, 0x0, 0x1DAAE98
	0x01DAAE54 ADRP X0, 0x234C000
	0x01DAAE58 LDR X0, [X0 + 0xB10]
	0x01DAAE5C BL 0x1C16CF4
	0x01DAAE60 ADRP X0, 0x234C000
	0x01DAAE64 LDR X0, [X0 + 0xB18]
	0x01DAAE68 BL 0x1C16CF4
	0x01DAAE6C ADRP X0, 0x234C000
	0x01DAAE70 LDR X0, [X0 + 0xB20]
	0x01DAAE74 BL 0x1C16CF4
	0x01DAAE78 ADRP X0, 0x234C000
	0x01DAAE7C LDR X0, [X0 + 0xB28]
	0x01DAAE80 BL 0x1C16CF4
	0x01DAAE84 ADRP X0, 0x234D000
	0x01DAAE88 LDR X0, [X0 + 0x678]
	0x01DAAE8C BL 0x1C16CF4
	0x01DAAE90 MOVZ W8, 0x1
	0x01DAAE94 STRB W8, [X20 + 0xACC]
	0x01DAAE98 MOVI V0.2D, 0x0
	0x01DAAE9C STP V0, V0, [X31 + 0x20]
	0x01DAAEA0 FMOV S0, W31
	0x01DAAEA4 MOV V1.16B, V8.16B
	0x01DAAEA8 MOV X0, X31
	0x01DAAEAC BL 0x3C30968
	0x01DAAEB0 CBZ X19, 0x1DAAF60
	0x01DAAEB4 ADRP X8, 0x234C000
	0x01DAAEB8 LDR X8, [X8 + 0xB28]
	0x01DAAEBC ADRP X21, 0x234C000
	0x01DAAEC0 ADRP X22, 0x234D000
	0x01DAAEC4 ADRP X20, 0x234C000
	0x01DAAEC8 LDR X1, [X8]
	0x01DAAECC LDR X21, [X21 + 0xB18]
	0x01DAAED0 LDR X22, [X22 + 0x678]
	0x01DAAED4 LDR X20, [X20 + 0xB10]
	0x01DAAED8 ADD X8, X31, 0x0
	0x01DAAEDC MOV X0, X19
	0x01DAAEE0 MOV V8.16B, V0.16B
	0x01DAAEE4 BL 0x30D2660
	0x01DAAEE8 LDP V0, V1, [X31]
	0x01DAAEEC STP V0, V1, [X31 + 0x20]
	0x01DAAEF0 LDR X1, [X21]
	0x01DAAEF4 ADD X0, X31, 0x20
	0x01DAAEF8 BL 0x2BD1D7C
	0x01DAAEFC TBZ X0, 0x0, 0x1DAAF24
	0x01DAAF00 LDR V0, [X31 + 0x38]
	0x01DAAF04 FSUB S8, S8, S0
	0x01DAAF08 FCMP S8, 0x0
	0x01DAAF0C B.HI 0x1DAAEF0
	0x01DAAF10 LDR X1, [X20]
	0x01DAAF14 LDR X19, [X31 + 0x30]
	0x01DAAF18 ADD X0, X31, 0x20
	0x01DAAF1C BL 0x2BD1D78
	0x01DAAF20 B 0x1DAAF44
	0x01DAAF24 LDR X1, [X20]
	0x01DAAF28 ADD X0, X31, 0x20
	0x01DAAF2C BL 0x2BD1D78
	0x01DAAF30 LDR X2, [X22]
	0x01DAAF34 MOV X0, X19
	0x01DAAF38 MOV W1, W31
	0x01DAAF3C BL 0x30D1744
	0x01DAAF40 MOV X19, X0
	0x01DAAF44 MOV X0, X19
	0x01DAAF48 LDP X20, X19, [X31 + 0x60]
	0x01DAAF4C LDP X22, X21, [X31 + 0x50]
	0x01DAAF50 LDR X30, [X31 + 0x48]
	0x01DAAF54 LDR V8, [X31 + 0x40]
	0x01DAAF58 ADD X31, X31, 0x70
	0x01DAAF5C RET
	0x01DAAF60 BL 0x1C16F20
	0x01DAAF64 CMP W1, 0x1
	0x01DAAF68 MOV X21, X0
	0x01DAAF6C B.NE 0x1DAAFA0
	0x01DAAF70 MOV X0, X21
	0x01DAAF74 BL 0x3EB1AD0
	0x01DAAF78 LDR X20, [X0]
	0x01DAAF7C BL 0x3EB1AE0
	0x01DAAF80 ADRP X8, 0x234C000
	0x01DAAF84 LDR X8, [X8 + 0xB10]
	0x01DAAF88 ADD X0, X31, 0x20
	0x01DAAF8C LDR X1, [X8]
	0x01DAAF90 BL 0x2BD1D78
	0x01DAAF94 CBZ X20, 0x1DAAF30
	0x01DAAF98 MOV X0, X20
	0x01DAAF9C BL 0x1C16F18
	0x01DAAFA0 MOV X20, X31
	0x01DAAFA4 B 0x1DAAFAC
	0x01DAAFA8 MOV X21, X0
	0x01DAAFAC ADRP X8, 0x234C000
	0x01DAAFB0 LDR X8, [X8 + 0xB10]
	0x01DAAFB4 LDR X1, [X8]
	0x01DAAFB8 ADD X0, X31, 0x20
	0x01DAAFBC BL 0x2BD1D78
	0x01DAAFC0 CBNZ X20, 0x1DAAFCC
	0x01DAAFC4 MOV X0, X21
	0x01DAAFC8 BL 0x1D2C690
	0x01DAAFCC MOV X0, X20
	0x01DAAFD0 BL 0x1C16F18
	0x01DAAFD4 BL 0x1990590
	0x01DAAFD8 MOV X1, X31
	0x01DAAFDC B 0x3C36C30
	0x01DAAFE0 STR X30, [X31 - 0x30]!
	0x01DAAFE4 STP X22, X21, [X31 + 0x10]
	0x01DAAFE8 STP X20, X19, [X31 + 0x20]
	0x01DAAFEC ADRP X21, 0x262E000
	0x01DAAFF0 ADRP X22, 0x234D000
	0x01DAAFF4 ADRP X19, 0x234D000
	0x01DAAFF8 ADRP X20, 0x234D000
	0x01DAAFFC LDRB W8, [X21 + 0xACB]
	0x01DAB000 LDR X22, [X22 + 0x680]
	0x01DAB004 LDR X19, [X19 + 0x688]
	0x01DAB008 LDR X20, [X20 + 0x610]
	0x01DAB00C TBNZ X8, 0x0, 0x1DAB03C
	0x01DAB010 ADRP X0, 0x234C000
	0x01DAB014 LDR X0, [X0 + 0x688]
	0x01DAB018 BL 0x1C16CF4
	0x01DAB01C ADRP X0, 0x234C000
	0x01DAB020 LDR X0, [X0 + 0x680]
	0x01DAB024 BL 0x1C16CF4
	0x01DAB028 ADRP X0, 0x234C000
	0x01DAB02C LDR X0, [X0 + 0x610]
	0x01DAB030 BL 0x1C16CF4
	0x01DAB034 MOVZ W8, 0x1
	0x01DAB038 STRB W8, [X21 + 0xACB]
	0x01DAB03C LDR X0, [X22]
	0x01DAB040 BL 0x1C16F10
	0x01DAB044 LDR X1, [X19]
	0x01DAB048 MOV X19, X0
	0x01DAB04C BL 0x29EDF98
	0x01DAB050 LDR X8, [X20]
	0x01DAB054 LDP X22, X21, [X31 + 0x10]
	0x01DAB058 LDR X8, [X8 + 0xB8]
	0x01DAB05C STR X19, [X8]
	0x01DAB060 LDP X20, X19, [X31 + 0x20]
	0x01DAB064 LDR X30, [X31], #0x30
	0x01DAB068 RET
	0x01DAB06C STP X30, X21, [X31 - 0x20]!
	0x01DAB070 STP X20, X19, [X31 + 0x10]
	0x01DAB074 ADRP X21, 0x262D000
	0x01DAB078 ADRP X20, 0x2348000
	0x01DAB07C LDRB W8, [X21 + 0xACD]
	0x01DAB080 LDR X20, [X20 + 0x598]
	0x01DAB084 MOV X19, X0
	0x01DAB088 TBNZ X8, 0x0, 0x1DAB0AC
	0x01DAB08C ADRP X0, 0x234C000
	0x01DAB090 LDR X0, [X0 + 0x690]
	0x01DAB094 BL 0x1C16CF4
	0x01DAB098 ADRP X0, 0x2348000
	0x01DAB09C LDR X0, [X0 + 0x598]
	0x01DAB0A0 BL 0x1C16CF4
	0x01DAB0A4 MOVZ W8, 0x1
	0x01DAB0A8 STRB W8, [X21 + 0xACD]
	0x01DAB0AC LDR X0, [X20]
	0x01DAB0B0 ADRP X20, 0x234C000
	0x01DAB0B4 LDR W8, [X0 + 0xE0]
	0x01DAB0B8 LDR X20, [X20 + 0x690]
	0x01DAB0BC CBNZ W8, 0x1DAB0C4
	0x01DAB0C0 BL 0x1C16DFC
	0x01DAB0C4 LDR X0, [X20]
	0x01DAB0C8 BL 0x222D200
	0x01DAB0CC STR X0, [X19 + 0x88]
	0x01DAB0D0 LDP X20, X19, [X31 + 0x10]
	0x01DAB0D4 LDP X30, X21, [X31], #0x20
	0x01DAB0D8 RET
	0x01DAB0DC SUB X31, X31, 0xB0
	0x01DAB0E0 STP X29, X30, [X31 + 0x50]
	0x01DAB0E4 STP X28, X27, [X31 + 0x60]
	0x01DAB0E8 STP X26, X25, [X31 + 0x70]
	0x01DAB0EC STP X24, X23, [X31 + 0x80]
	0x01DAB0F0 STP X22, X21, [X31 + 0x90]
	0x01DAB0F4 STP X20, X19, [X31 + 0xA0]
	0x01DAB0F8 ADRP X20, 0x262D000
	0x01DAB0FC LDRB W8, [X20 + 0xACE]
	0x01DAB100 MOV X19, X0
	0x01DAB104 TBNZ X8, 0x0, 0x1DAB14C
	0x01DAB108 ADRP X0, 0x234B000
	0x01DAB10C LDR X0, [X0 + 0xB58]
	0x01DAB110 BL 0x1C16CF4
	0x01DAB114 ADRP X0, 0x234B000
	0x01DAB118 LDR X0, [X0 + 0xB60]
	0x01DAB11C BL 0x1C16CF4
	0x01DAB120 ADRP X0, 0x234C000
	0x01DAB124 LDR X0, [X0 + 0x140]
	0x01DAB128 BL 0x1C16CF4
	0x01DAB12C ADRP X0, 0x234C000
	0x01DAB130 LDR X0, [X0 + 0x698]
	0x01DAB134 BL 0x1C16CF4
	0x01DAB138 ADRP X0, 0x234C000
	0x01DAB13C LDR X0, [X0 + 0x6A0]
	0x01DAB140 BL 0x1C16CF4
	0x01DAB144 MOVZ W8, 0x1
	0x01DAB148 STRB W8, [X20 + 0xACE]
	0x01DAB14C MOV X0, X19
	0x01DAB150 MOV X1, X31
	0x01DAB154 BL 0x1E73F88
	0x01DAB158 LDR X0, [X19 + 0x40]
	0x01DAB15C CBZ X0, 0x1DAB2C0
	0x01DAB160 LDRB W8, [X0 + 0x60]
	0x01DAB164 TBNZ X8, 0x1, 0x1DAB2C0
	0x01DAB168 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+48], X24
	004 Move [X31+56], X23
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X20, 0x262F000
	010 Move W8, [X20+2746]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x234A000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move X0, 0x234C000
	020 Move X0, [X0+1992]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+2746], W8
	024 Move [X31+24], W31
	025 Move [X31+16], X31
	026 Move [X31+8], W31
	027 Move [X31], X31
	028 Move X0, [X19+208]
	029 Compare X0, 0
	030 JumpIfEqual {342}
	031 Move X1, X31
	032 Call GrabbableItem.get_netObjectExists, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {333}
	037 Move X0, X19
	038 Call Umbrella.get_isOpen, X0
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {333}
	043 Move X0, [X19+208]
	044 Compare X0, 0
	045 JumpIfEqual {342}
	046 Move X1, X31
	047 Call GrabbableItem.get_isVisible, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {333}
	052 Move X20, [X19+208]
	053 Compare X20, 0
	054 JumpIfEqual {342}
	055 Move X22, 0x234A000
	056 Move X22, [X22+1432]
	057 Move X21, [X20+336]
	058 Move X0, [X22]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X21
	064 Move X1, X31
	065 Move X2, X31
	066 Call Object.op_Inequality, X0, X1
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {291}
	071 Move X8, [X19+208]
	072 Compare X8, 0
	073 JumpIfEqual {342}
	074 Move X8, [X8+336]
	075 Compare X8, 0
	076 JumpIfEqual {342}
	077 Move W9, [X8+128]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X0, [X22]
	080 Move X21, [X8+200]
	081 Move W9, [X0+224]
	082 Compare W9, 0
	083 JumpIfNotEqual {85}
	084 Call 0x1C17DFC
	085 Move X0, X21
	086 Move X1, X31
	087 Move X2, X31
	088 Call Object.op_Inequality, X0, X1
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {291}
	093 Move X8, [X19+208]
	094 Compare X8, 0
	095 JumpIfEqual {342}
	096 Move X8, [X8+336]
	097 Compare X8, 0
	098 JumpIfEqual {342}
	099 Move X8, [X8+200]
	100 Compare X8, 0
	101 JumpIfEqual {342}
	102 Move X0, [X22]
	103 Move X21, [X8+336]
	104 Move W9, [X0+224]
	105 Compare W9, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1C17DFC
	108 Move X0, X21
	109 Move X1, X31
	110 Move X2, X31
	111 Call Object.op_Inequality, X0, X1
	112 Move TEMP, X0
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {291}
	116 Move X8, [X19+208]
	117 Compare X8, 0
	118 JumpIfEqual {342}
	119 Move X8, [X8+336]
	120 Compare X8, 0
	121 JumpIfEqual {342}
	122 Move X20, [X8+200]
	123 Compare X20, 0
	124 JumpIfEqual {342}
	125 Move X8, [X20+336]
	126 Compare X8, 0
	127 JumpIfEqual {342}
	128 Move X0, [X8+64]
	129 Compare X0, 0
	130 JumpIfEqual {333}
	131 Move W8, [X0+96]
	132 Move TEMP, X8
	133 And TEMP, TEMP, 2
	134 Compare TEMP, 2
	135 JumpIfEqual {333}
	136 Move X1, X31
	137 Call NetworkObject.get_HasStateAuthority, X0
	138 Move TEMP, X0
	139 And TEMP, TEMP, 1
	140 Compare TEMP, 1
	141 JumpIfNotEqual {333}
	142 Move X23, 0x234C000
	143 Move X23, [X23+1992]
	144 Move X0, [X23]
	145 Move W8, [X0+224]
	146 Compare W8, 0
	147 JumpIfNotEqual {149}
	148 Call 0x1C17DFC
	149 Move X24, 0x262F000
	150 Move W8, [X24+2141]
	151 Compare W8, 0
	152 JumpIfNotEqual {158}
	153 Move X0, 0x234C000
	154 Move X0, [X0+1992]
	155 Call 0x1C17CF4
	156 Move W8, 1
	157 Move [X24+2141], W8
	158 Move X0, [X23]
	159 Move W8, [X0+224]
	160 Compare W8, 0
	161 JumpIfNotEqual {164}
	162 Call 0x1C17DFC
	163 Move X0, [X23]
	164 Move X8, [X22]
	165 Move X9, [X0+184]
	166 Move W10, [X8+224]
	167 Move X21, [X9]
	168 Compare W10, 0
	169 JumpIfNotEqual {172}
	170 Move X0, X8
	171 Call 0x1C17DFC
	172 Move X0, X21
	173 Move X1, X31
	174 Move X2, X31
	175 Call Object.op_Inequality, X0, X1
	176 Move TEMP, X0
	177 And TEMP, TEMP, 1
	178 Compare TEMP, 1
	179 JumpIfNotEqual {333}
	180 Move X0, [X23]
	181 Move W8, [X0+224]
	182 Compare W8, 0
	183 JumpIfNotEqual {185}
	184 Call 0x1C17DFC
	185 Move W8, [X24+2141]
	186 Compare W8, 0
	187 JumpIfNotEqual {193}
	188 Move X0, 0x234C000
	189 Move X0, [X0+1992]
	190 Call 0x1C17CF4
	191 Move W8, 1
	192 Move [X24+2141], W8
	193 Move X0, [X23]
	194 Move W8, [X0+224]
	195 Compare W8, 0
	196 JumpIfNotEqual {199}
	197 Call 0x1C17DFC
	198 Move X0, [X23]
	199 Move X8, [X0+184]
	200 Move X8, [X8]
	201 Compare X8, 0
	202 JumpIfEqual {342}
	203 Move X0, [X22]
	204 Move X21, [X8+48]
	205 Move W9, [X0+224]
	206 Compare W9, 0
	207 JumpIfNotEqual {209}
	208 Call 0x1C17DFC
	209 Move X0, X21
	210 Move X1, X31
	211 Move X2, X31
	212 Call Object.op_Inequality, X0, X1
	213 Move TEMP, X0
	214 And TEMP, TEMP, 1
	215 Compare TEMP, 1
	216 JumpIfNotEqual {333}
	217 Move X0, [X23]
	218 Move W8, [X0+224]
	219 Compare W8, 0
	220 JumpIfNotEqual {222}
	221 Call 0x1C17DFC
	222 Move W8, [X24+2141]
	223 Compare W8, 0
	224 JumpIfNotEqual {230}
	225 Move X0, 0x234B000
	226 Move X0, [X0+1992]
	227 Call 0x1C17CF4
	228 Move W8, 1
	229 Move [X24+2141], W8
	230 Move X0, [X23]
	231 Move W8, [X0+224]
	232 Compare W8, 0
	233 JumpIfNotEqual {236}
	234 Call 0x1C17DFC
	235 Move X0, [X23]
	236 Move X8, [X0+184]
	237 Move X8, [X8]
	238 Compare X8, 0
	239 JumpIfEqual {342}
	240 Move X0, [X8+48]
	241 Compare X0, 0
	242 JumpIfEqual {342}
	243 Move X1, X31
	244 Call Rigidbody.get_useGravity, X0
	245 Move TEMP, X0
	246 And TEMP, TEMP, 1
	247 Compare TEMP, 1
	248 JumpIfNotEqual {333}
	249 Move X0, [X23]
	250 Move W8, [X0+224]
	251 Compare W8, 0
	252 JumpIfNotEqual {254}
	253 Call 0x1C17DFC
	254 Move W8, [X24+2141]
	255 Compare W8, 0
	256 JumpIfNotEqual {262}
	257 Move X0, 0x234B000
	258 Move X0, [X0+1992]
	259 Call 0x1C17CF4
	260 Move W8, 1
	261 Move [X24+2141], W8
	262 Move X0, [X23]
	263 Move W8, [X0+224]
	264 Compare W8, 0
	265 JumpIfNotEqual {268}
	266 Call 0x1C17DFC
	267 Move X0, [X23]
	268 Move X8, [X0+184]
	269 Move X8, [X8]
	270 Compare X8, 0
	271 JumpIfEqual {342}
	272 Move X0, [X8+48]
	273 Compare X0, 0
	274 JumpIfEqual {342}
	275 Move X1, X31
	276 Call Rigidbody.get_velocity, X0
	277 Move V0, V1
	278 Add X1, X31, 16
	279 Move X0, X19
	280 Call Umbrella.TryCalculateApplyVelocity, X0, V0, X1
	281 Move TEMP, X0
	282 And TEMP, TEMP, 1
	283 Compare TEMP, 1
	284 JumpIfNotEqual {333}
	285 Move S0, [X31+16]
	286 Move S1, [X31+20]
	287 Move V2, [X31+24]
	288 Move X0, X20
	289 Move X1, X31
	290 Call GrabbableItem.AddExternalForce, X0, X1
	291 Move X0, [X20+64]
	292 Compare X0, 0
	293 JumpIfEqual {333}
	294 Move W8, [X0+96]
	295 Move TEMP, X8
	296 And TEMP, TEMP, 2
	297 Compare TEMP, 2
	298 JumpIfEqual {333}
	299 Move X1, X31
	300 Call NetworkObject.get_HasStateAuthority, X0
	301 Move TEMP, X0
	302 And TEMP, TEMP, 1
	303 Compare TEMP, 1
	304 JumpIfNotEqual {333}
	305 Move X0, [X20+360]
	306 Compare X0, 0
	307 JumpIfEqual {342}
	308 Move X1, X31
	309 Call Rigidbody.get_velocity, X0
	310 Move V0, V1
	311 Add X1, X31, 0
	312 Move X0, X19
	313 Call Umbrella.TryCalculateApplyVelocity, X0, V0, X1
	314 Move TEMP, X0
	315 And TEMP, TEMP, 1
	316 Compare TEMP, 1
	317 JumpIfNotEqual {333}
	318 Move X19, [X20+360]
	319 Compare X19, 0
	320 JumpIfEqual {342}
	321 Move X0, X19
	322 Move X1, X31
	323 Call Rigidbody.get_velocity, X0
	324 Move S3, [X31]
	325 Move S4, [X31+4]
	326 Move V5, [X31+8]
	327 Move X0, X19
	328 Move X1, X31
	329 Add S0, S0, S3
	330 Add S1, S1, S4
	331 Add S2, S2, S5
	332 Call Rigidbody.set_velocity, X0, X1
	333 Move X20, [X31+80]
	334 Move X19, [X31+88]
	335 Move X22, [X31+64]
	336 Move X21, [X31+72]
	337 Move X24, [X31+48]
	338 Move X23, [X31+56]
	339 Move X30, [X31+32]
	340 Add X31, X31, 96
	341 Return 
	342 Call 0x1C17F20

Method: System.Void AnimateOpenClose()

Disassembly:
	0x01DAA8AC MOV X1, X31
	0x01DAA8B0 BL 0x3C32E90
	0x01DAA8B4 CBZ X0, 0x1DAA8E4
	0x01DAA8B8 MOV X1, X31
	0x01DAA8BC BL 0x3C3F58C
	0x01DAA8C0 CBZ X19, 0x1DAA8E4
	0x01DAA8C4 MOV X0, X19
	0x01DAA8C8 LDP X20, X19, [X31 + 0x10]
	0x01DAA8CC MOV X1, X31
	0x01DAA8D0 LDP X30, X21, [X31], #0x20
	0x01DAA8D4 B 0x3C3F62C
	0x01DAA8D8 LDP X20, X19, [X31 + 0x10]
	0x01DAA8DC LDP X30, X21, [X31], #0x20
	0x01DAA8E0 RET
	0x01DAA8E4 BL 0x1C16F20
	0x01DAA8E8 MOV X1, X31
	0x01DAA8EC B 0x3C36C30
	0x01DAA8F0 STR X30, [X31 - 0x20]!
	0x01DAA8F4 STP X20, X19, [X31 + 0x10]
	0x01DAA8F8 ADRP X20, 0x262E000
	0x01DAA8FC LDRB W8, [X20 + 0xAC7]
	0x01DAA900 MOV X19, X1
	0x01DAA904 TBNZ X8, 0x0, 0x1DAA934
	0x01DAA908 ADRP X0, 0x2349000
	0x01DAA90C LDR X0, [X0 + 0x970]
	0x01DAA910 BL 0x1C16CF4
	0x01DAA914 ADRP X0, 0x234C000
	0x01DAA918 LDR X0, [X0 + 0x428]
	0x01DAA91C BL 0x1C16CF4
	0x01DAA920 ADRP X0, 0x234D000
	0x01DAA924 LDR X0, [X0 + 0x608]
	0x01DAA928 BL 0x1C16CF4
	0x01DAA92C MOVZ W8, 0x1
	0x01DAA930 STRB W8, [X20 + 0xAC7]
	0x01DAA934 CBZ X19, 0x1DAA994
	0x01DAA938 ADRP X8, 0x234C000
	0x01DAA93C LDR X8, [X8 + 0x428]
	0x01DAA940 MOV X0, X19
	0x01DAA944 MOV X2, X31
	0x01DAA948 LDR X1, [X8]
	0x01DAA94C BL 0x3C33420
	0x01DAA950 TBZ X0, 0x0, 0x1DAA988
	0x01DAA954 ADRP X8, 0x2349000
	0x01DAA958 LDR X8, [X8 + 0x970]
	0x01DAA95C LDR X0, [X8]
	0x01DAA960 LDR W8, [X0 + 0xE0]
	0x01DAA964 CBNZ W8, 0x1DAA96C
	0x01DAA968 BL 0x1C16DFC
	0x01DAA96C ADRP X8, 0x234D000
	0x01DAA970 LDR X8, [X8 + 0x608]
	0x01DAA974 LDP X20, X19, [X31 + 0x10]
	0x01DAA978 MOV X1, X31
	0x01DAA97C LDR X0, [X8]
	0x01DAA980 LDR X30, [X31], #0x20
	0x01DAA984 B 0x3C01A38
	0x01DAA988 LDP X20, X19, [X31 + 0x10]
	0x01DAA98C LDR X30, [X31], #0x20
	0x01DAA990 RET
	0x01DAA994 BL 0x1C16F20
	0x01DAA998 MOV X1, X31
	0x01DAA99C B 0x3C36C30
	0x01DAA9A0 LDRH W0, [X0 + 0x44]
	0x01DAA9A4 RET
	0x01DAA9A8 SUB X31, X31, 0x30
	0x01DAA9AC STP X30, X21, [X31 + 0x10]
	0x01DAA9B0 STP X20, X19, [X31 + 0x20]
	0x01DAA9B4 ADRP X20, 0x262E000
	0x01DAA9B8 ADRP X21, 0x234D000
	0x01DAA9BC LDRB W8, [X20 + 0xAC8]
	0x01DAA9C0 LDR X21, [X21 + 0x610]
	0x01DAA9C4 MOV X19, X0
	0x01DAA9C8 TBNZ X8, 0x0, 0x1DAAA4C
	0x01DAA9CC ADRP X0, 0x234D000
	0x01DAA9D0 LDR X0, [X0 + 0x618]
	0x01DAA9D4 BL 0x1C16CF4
	0x01DAA9D8 ADRP X0, 0x234D000
	0x01DAA9DC LDR X0, [X0 + 0x620]
	0x01DAA9E0 BL 0x1C16CF4
	0x01DAA9E4 ADRP X0, 0x234D000
	0x01DAA9E8 LDR X0, [X0 + 0x628]
	0x01DAA9EC BL 0x1C16CF4
	0x01DAA9F0 ADRP X0, 0x2349000
	0x01DAA9F4 LDR X0, [X0 + 0x788]
	0x01DAA9F8 BL 0x1C16CF4
	0x01DAA9FC ADRP X0, 0x234D000
	0x01DAAA00 LDR X0, [X0 + 0x610]
	0x01DAAA04 BL 0x1C16CF4
	0x01DAAA08 ADRP X0, 0x2349000
	0x01DAAA0C LDR X0, [X0 + 0x598]
	0x01DAAA10 BL 0x1C16CF4
	0x01DAAA14 ADRP X0, 0x234D000
	0x01DAAA18 LDR X0, [X0 + 0x630]
	0x01DAAA1C BL 0x1C16CF4
	0x01DAAA20 ADRP X0, 0x234D000
	0x01DAAA24 LDR X0, [X0 + 0x638]
	0x01DAAA28 BL 0x1C16CF4
	0x01DAAA2C ADRP X0, 0x234D000
	0x01DAAA30 LDR X0, [X0 + 0x640]
	0x01DAAA34 BL 0x1C16CF4
	0x01DAAA38 ADRP X0, 0x234D000
	0x01DAAA3C LDR X0, [X0 + 0x648]
	0x01DAAA40 BL 0x1C16CF4
	0x01DAAA44 MOVZ W8, 0x1
	0x01DAAA48 STRB W8, [X20 + 0xAC8]
	0x01DAAA4C LDR X0, [X21]
	0x01DAAA50 STR X31, [X31 + 0x8]
	0x01DAAA54 LDR W8, [X0 + 0xE0]
	0x01DAAA58 CBNZ W8, 0x1DAAA64
	0x01DAAA5C BL 0x1C16DFC
	0x01DAAA60 LDR X0, [X21]
	0x01DAAA64 LDR X8, [X0 + 0xB8]
	0x01DAAA68 LDR X0, [X8]
	0x01DAAA6C CBZ X0, 0x1DAAB94
	0x01DAAA70 ADRP X8, 0x234D000
	0x01DAAA74 LDR X8, [X8 + 0x618]
	0x01DAAA78 LDRH W1, [X19 + 0x44]
	0x01DAAA7C ADD X2, X31, 0x8
	0x01DAAA80 LDR X3, [X8]
	0x01DAAA84 BL 0x29F0274
	0x01DAAA88 TBZ X0, 0x0, 0x1DAAB4C
	0x01DAAA8C ADRP X8, 0x2349000
	0x01DAAA90 LDR X8, [X8 + 0x598]
	0x01DAAA94 LDR X20, [X31 + 0x8]
	0x01DAAA98 LDR X0, [X8]
	0x01DAAA9C LDR W8, [X0 + 0xE0]
	0x01DAAAA0 CBNZ W8, 0x1DAAAA8
	0x01DAAAA4 BL 0x1C16DFC
	0x01DAAAA8 MOV X0, X20
	0x01DAAAAC MOV X1, X31
	0x01DAAAB0 MOV X2, X31
	0x01DAAAB4 BL 0x3C354F8
	0x01DAAAB8 TBZ X0, 0x0, 0x1DAAB4C
	0x01DAAABC ADRP X9, 0x234D000
	0x01DAAAC0 LDRH W8, [X19 + 0x44]
	0x01DAAAC4 LDR X9, [X9 + 0x628]
	0x01DAAAC8 ADD X1, X31, 0x4
	0x01DAAACC STRH W8, [X31 + 0x4]
	0x01DAAAD0 LDR X0, [X9]
	0x01DAAAD4 BL 0x1C16E04
	0x01DAAAD8 ADRP X8, 0x234D000
	0x01DAAADC LDR X8, [X8 + 0x640]
	0x01DAAAE0 ADRP X9, 0x234D000

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x262F000
	012 Move X21, 0x234E000
	013 Move W8, [X20+2747]
	014 Move X21, [X21+1504]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {40}
	020 Move X0, 0x234C000
	021 Move X0, [X0+1456]
	022 Call 0x1C17CF4
	023 Move X0, 0x234B000
	024 Move X0, [X0+3696]
	025 Call 0x1C17CF4
	026 Move X0, 0x234C000
	027 Move X0, [X0+1448]
	028 Call 0x1C17CF4
	029 Move X0, 0x234E000
	030 Move X0, [X0+1512]
	031 Call 0x1C17CF4
	032 Move X0, 0x234E000
	033 Move X0, [X0+1520]
	034 Call 0x1C17CF4
	035 Move X0, 0x234E000
	036 Move X0, [X0+1504]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X20+2747], W8
	040 Move X0, [X21]
	041 Call 0x1C17F10
	042 Move X1, X31
	043 Move X20, X0
	044 Call <>c__DisplayClass29_0..ctor, X0
	045 Compare X20, 0
	046 JumpIfEqual {161}
	047 Move X22, 0x234C000
	048 Move X22, [X22+1448]
	049 Move [X20+16], X19
	050 Move W21, [X19+216]
	051 Move X0, [X22]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move W0, W21
	057 Move X1, X31
	058 Call LeanTween.cancel, X0
	059 Move V8, [X19+220]
	060 Move X0, X19
	061 Call Umbrella.get_isOpen, X0
	062 And W31, W0, 1
	063 Move S0, W31
	064 Move S1, 1
	065 NotImplemented "Instruction FCSEL not yet implemented."
	066 Move X0, X19
	067 Move [X20+24], S0
	068 Call Umbrella.get_isOpen, X0
	069 Move X8, [X19+144]
	070 Compare X8, 0
	071 JumpIfEqual {161}
	072 And W31, W0, 1
	073 Move W9, 176
	074 Move W10, 168
	075 NotImplemented "Instruction CSEL not yet implemented."
	076 Move X21, [X19]
	077 Move X0, X8
	078 Move X1, X31
	079 Call Transform.get_position, X0
	080 Move S3, 1
	081 Move X0, X21
	082 Move X1, X31
	083 Call SFXManager.PlaySFX, X0, X1, V0
	084 Move X0, X19
	085 Call Umbrella.get_isOpen, X0
	086 Move W8, W0
	087 Move X0, [X22]
	088 Move X9, -19660800
	089 Move V0, [X9+4024]
	090 Move V9, [X20+24]
	091 Move W9, [X0+224]
	092 And W31, W8, 1
	093 Move S1, 0.75
	094 NotImplemented "Instruction FCSEL not yet implemented."
	095 Compare W9, 0
	096 JumpIfNotEqual {98}
	097 Call 0x1C17DFC
	098 Move V0, V8
	099 Move V1, V9
	100 Move V2, V10
	101 Move X0, X31
	102 Call LeanTween.value, V0, V1, V2
	103 Compare X0, 0
	104 JumpIfEqual {161}
	105 Move X21, 0x234C000
	106 Move X22, 0x234E000
	107 Move X21, [X21+1456]
	108 Move X22, [X22+1512]
	109 Move X1, X31
	110 Call LTDescr.setEaseOutCirc, X0
	111 Move X8, [X21]
	112 Move X21, X0
	113 Move X0, X8
	114 Call 0x1C17F10
	115 Move X2, [X22]
	116 Move X1, X20
	117 Move X3, X31
	118 Move X22, X0
	119 Call Action`1<Single>..ctor, X0, X1, X2
	120 Compare X21, 0
	121 JumpIfEqual {161}
	122 Move X23, 0x234B000
	123 Move X24, 0x234E000
	124 Move X23, [X23+3696]
	125 Move X24, [X24+1520]
	126 Move X0, X21
	127 Move X1, X22
	128 Move X2, X31
	129 Call LTDescr.setOnUpdate, X0, X1
	130 Move X8, [X23]
	131 Move X21, X0
	132 Move X0, X8
	133 Call 0x1C17F10
	134 Move X2, [X24]
	135 Move X1, X20
	136 Move X3, X31
	137 Move X22, X0
	138 Call Action..ctor, X0, X1, X2
	139 Compare X21, 0
	140 JumpIfEqual {161}
	141 Move X0, X21
	142 Move X1, X22
	143 Move X2, X31
	144 Call LTDescr.setOnComplete, X0, X1
	145 Compare X0, 0
	146 JumpIfEqual {161}
	147 Move X1, X31
	148 Call LTDescr.get_id, X0
	149 Move [X19+216], W0
	150 Move X20, [X31+64]
	151 Move X19, [X31+72]
	152 Move X22, [X31+48]
	153 Move X21, [X31+56]
	154 Move X24, [X31+32]
	155 Move X23, [X31+40]
	156 Move X30, [X31+24]
	157 Move D9, [X31+8]
	158 Move D8, [X31+16]
	159 Move V10, [X31+80]
	160 Return 
	161 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DAB16C BL 0x1E93668
	0x01DAB170 TBZ X0, 0x0, 0x1DAB2C0
	0x01DAB174 LDR X24, [X19 + 0x88]
	0x01DAB178 CBZ X24, 0x1DAB2E0
	0x01DAB17C LDR W8, [X24 + 0x18]
	0x01DAB180 CMP W8, 0x1
	0x01DAB184 B.LT 0x1DAB2C0
	0x01DAB188 ADRP X29, 0x234B000
	0x01DAB18C ADRP X27, 0x234C000
	0x01DAB190 ADRP X28, 0x234C000
	0x01DAB194 LDR X29, [X29 + 0xB60]
	0x01DAB198 LDR X27, [X27 + 0x140]
	0x01DAB19C LDR X28, [X28 + 0x698]
	0x01DAB1A0 MOV X25, X31
	0x01DAB1A4 ADD X26, X24, 0x20
	0x01DAB1A8 ADRP X8, 0x234C000
	0x01DAB1AC LDR X8, [X8 + 0x6A0]
	0x01DAB1B0 LDR X0, [X8]
	0x01DAB1B4 BL 0x1C16F10
	0x01DAB1B8 MOV X1, X31
	0x01DAB1BC MOV X21, X0
	0x01DAB1C0 BL 0x33BDD8C
	0x01DAB1C4 LDR W8, [X24 + 0x18]
	0x01DAB1C8 CMP X25, X8
	0x01DAB1CC B.CS 0x1DAB2E4
	0x01DAB1D0 CBZ X21, 0x1DAB2E0
	0x01DAB1D4 LDR X8, [X26, X25, LSL #3]
	0x01DAB1D8 STR X8, [X21 + 0x10]
	0x01DAB1DC LDR X0, [X19 + 0x80]
	0x01DAB1E0 CBZ X0, 0x1DAB2E0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x262E000
	006 Move X20, 0x234C000
	007 Move W8, [X21+2748]
	008 Move X20, [X20+3040]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x234C000
	015 Move X0, [X0+3040]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2748], W8
	019 Move X8, -19652608
	020 Move X9, -19652608
	021 Move V0, [X8+95]
	022 Move V1, [X9+242]
	023 Move W8, 0xCCCD
	024 NotImplemented "Instruction MOVK not yet implemented."
	025 Move [X19+256], W8
	026 Move [X19+224], V0
	027 Move [X19+232], V1
	028 Move X0, [X20]
	029 Move X1, X31
	030 Call Shader.PropertyToID, X0
	031 Move [X19+260], W0
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X1, X31
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Call NetworkBehaviour..ctor, X0
	039 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DAB1E4 LDR X20, [X19 + 0x38]
	0x01DAB1E8 MOV X1, X31

ISIL:
	001 Move W1, [X0+200]
	002 Call Umbrella.set_isOpen, X0, X1
	003 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DAB1EC BL 0x3C32ECC
	0x01DAB1F0 LDR X8, [X21 + 0x10]
	0x01DAB1F4 CBZ X8, 0x1DAB2E0
	0x01DAB1F8 MOV X22, X0
	0x01DAB1FC MOV X0, X8
	0x01DAB200 MOV X1, X31
	0x01DAB204 BL 0x3C32E90

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Umbrella.get_isOpen, X0
	005 And W8, W0, 1
	006 Move [X19+200], W8
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 

