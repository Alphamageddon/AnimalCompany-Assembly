Type: AnimalCompany.BomberController

Method: AnimalCompany.BomberController/Phase get_phase()

Disassembly:
	0x01DE74E0 AND W21, W1, 0x1
	0x01DE74E4 TBNZ X8, 0x0, 0x1DE74FC
	0x01DE74E8 ADRP X0, 0x2311000
	0x01DE74EC LDR X0, [X0 + 0xDD0]
	0x01DE74F0 BL 0x1C16CF4
	0x01DE74F4 MOVZ W8, 0x1
	0x01DE74F8 STRB W8, [X22 + 0xCAE]
	0x01DE74FC LDRB W8, [X19 + 0xB8]
	0x01DE7500 CMP W8, W21
	0x01DE7504 B.NE 0x1DE7518
	0x01DE7508 LDP X20, X19, [X31 + 0x20]
	0x01DE750C LDP X22, X21, [X31 + 0x10]
	0x01DE7510 LDR X30, [X31], #0x30
	0x01DE7514 RET
	0x01DE7518 LDR X0, [X19 + 0xB0]
	0x01DE751C STRB W21, [X19 + 0xB8]
	0x01DE7520 CBZ X0, 0x1DE75B0
	0x01DE7524 MOV X1, X31
	0x01DE7528 BL 0x3C1341C
	0x01DE752C ADRP X22, 0x2311000
	0x01DE7530 LDR X22, [X22 + 0xDD0]
	0x01DE7534 MOV X19, X0
	0x01DE7538 LDR X8, [X22]
	0x01DE753C LDR W9, [X8 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+60]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x230D000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2312000
	016 Move X0, [X0+3480]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2312000
	023 Move X0, [X0+3488]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_phase(AnimalCompany.BomberController/Phase value)

Disassembly:
	0x01DE7540 CBNZ W9, 0x1DE7550
	0x01DE7544 MOV X0, X8
	0x01DE7548 BL 0x1C16DFC
	0x01DE754C LDR X8, [X22]
	0x01DE7550 LDR X9, [X8 + 0xB8]
	0x01DE7554 LDR W21, [X9]
	0x01DE7558 TBZ X20, 0x0, 0x1DE7580
	0x01DE755C LDR W10, [X8 + 0xE0]
	0x01DE7560 CBNZ W10, 0x1DE7574
	0x01DE7564 MOV X0, X8
	0x01DE7568 BL 0x1C16DFC
	0x01DE756C LDR X8, [X22]
	0x01DE7570 LDR X9, [X8 + 0xB8]
	0x01DE7574 LDP S0, S1, [X9 + 0x8]
	0x01DE7578 LDP S2, S3, [X9 + 0x10]
	0x01DE757C B 0x1DE7590
	0x01DE7580 FMOV S2, W31
	0x01DE7584 FMOV S3, 1
	0x01DE7588 FMOV S1, W31
	0x01DE758C FMOV S0, W31
	0x01DE7590 CBZ X19, 0x1DE75B0
	0x01DE7594 MOV X0, X19
	0x01DE7598 MOV W1, W21
	0x01DE759C LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+60], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x230D000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2312000
	016 Move X0, [X0+3480]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2312000
	023 Move X0, [X0+3496]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get_timerAnticipating()

Disassembly:
	0x01DE75A0 LDP X22, X21, [X31 + 0x10]
	0x01DE75A4 MOV X2, X31
	0x01DE75A8 LDR X30, [X31], #0x30
	0x01DE75AC B 0x3C14988
	0x01DE75B0 BL 0x1C16F20
	0x01DE75B4 STR X30, [X31 - 0x20]!
	0x01DE75B8 STP X20, X19, [X31 + 0x10]
	0x01DE75BC ADRP X20, 0x25F1000
	0x01DE75C0 LDRB W8, [X20 + 0xCAF]
	0x01DE75C4 MOV X19, X0
	0x01DE75C8 TBNZ X8, 0x0, 0x1DE75E0
	0x01DE75CC ADRP X0, 0x2311000
	0x01DE75D0 LDR X0, [X0 + 0xDD0]
	0x01DE75D4 BL 0x1C16CF4
	0x01DE75D8 MOVZ W8, 0x1
	0x01DE75DC STRB W8, [X20 + 0xCAF]
	0x01DE75E0 MOV X0, X19
	0x01DE75E4 BL 0x1DE76B0
	0x01DE75E8 LDRB W8, [X19 + 0xB8]
	0x01DE75EC CBZ W8, 0x1DE769C
	0x01DE75F0 LDR X0, [X19 + 0xB0]
	0x01DE75F4 CBZ X0, 0x1DE76A8
	0x01DE75F8 MOV X1, X31
	0x01DE75FC BL 0x3C133DC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+64]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x230D000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2312000
	016 Move X0, [X0+3504]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2312000
	023 Move X0, [X0+3512]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_timerAnticipating(System.Single value)

Disassembly:
	0x01DE7600 CBZ X0, 0x1DE76A8
	0x01DE7604 LDR W9, [X0 + 0x18]
	0x01DE7608 MOV X8, X0
	0x01DE760C CBZ W9, 0x1DE76AC
	0x01DE7610 ADRP X20, 0x2311000
	0x01DE7614 LDR X20, [X20 + 0xDD0]
	0x01DE7618 LDR X19, [X8 + 0x20]
	0x01DE761C LDR X0, [X20]
	0x01DE7620 LDR W9, [X0 + 0xE0]
	0x01DE7624 CBNZ W9, 0x1DE7630
	0x01DE7628 BL 0x1C16DFC
	0x01DE762C LDR X0, [X20]
	0x01DE7630 LDR X8, [X0 + 0xB8]
	0x01DE7634 MOV X0, X31
	0x01DE7638 LDR W20, [X8 + 0x4]
	0x01DE763C BL 0x3C3C6C4
	0x01DE7640 CBZ X19, 0x1DE76A8
	0x01DE7644 FMOV S1, 8
	0x01DE7648 FMOV S2, 0.5
	0x01DE764C FMUL S0, S0, S1
	0x01DE7650 FMUL S2, S0, S2
	0x01DE7654 FRINTM S2, S2
	0x01DE7658 FADD S2, S2, S2
	0x01DE765C FMOV S1, 2

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+64], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x230D000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2312000
	016 Move X0, [X0+3504]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2312000
	023 Move X0, [X0+3520]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get_EXPLOSION_DELAY()

Disassembly:
	0x01DE7660 FSUB S0, S0, S2
	0x01DE7664 FMOV S2, -1
	0x01DE7668 FMIN S1, S0, S1
	0x01DE766C FCMP S0, 0x0
	0x01DE7670 FADD S0, S1, S2
	0x01DE7674 MOV X0, X19
	0x01DE7678 MOV W1, W20

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+192]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move V0, [X8+40]
	006 Move X30, [X31+16]
	007 Return V0
	008 Call 0x1C17F20

Method: System.Void HandlePhaseChanged()

Disassembly:
	0x01DE767C LDP X20, X19, [X31 + 0x10]
	0x01DE7680 FCSEL S0, S0, S2, PL
	0x01DE7684 FABS S0, S0
	0x01DE7688 FMOV S1, 1
	0x01DE768C FSUB S0, S1, S0
	0x01DE7690 MOV X2, X31
	0x01DE7694 LDR X30, [X31], #0x20
	0x01DE7698 B 0x3C15CD8
	0x01DE769C LDP X20, X19, [X31 + 0x10]
	0x01DE76A0 LDR X30, [X31], #0x20
	0x01DE76A4 RET
	0x01DE76A8 BL 0x1C16F20
	0x01DE76AC BL 0x1C16F28
	0x01DE76B0 SUB X31, X31, 0x70
	0x01DE76B4 STP D15, D14, [X31 + 0x10]
	0x01DE76B8 STP D13, D12, [X31 + 0x20]
	0x01DE76BC STP D11, D10, [X31 + 0x30]
	0x01DE76C0 STP D9, D8, [X31 + 0x40]
	0x01DE76C4 STR X30, [X31 + 0x50]
	0x01DE76C8 STP X20, X19, [X31 + 0x60]
	0x01DE76CC LDRB W8, [X0 + 0x54]
	0x01DE76D0 CBZ W8, 0x1DE778C
	0x01DE76D4 MOV X19, X0
	0x01DE76D8 LDR X0, [X0 + 0x40]
	0x01DE76DC CBZ X0, 0x1DE7918
	0x01DE76E0 MOV X1, X31
	0x01DE76E4 BL 0x3C3F58C
	0x01DE76E8 LDR X0, [X19 + 0x38]
	0x01DE76EC CBZ X0, 0x1DE7918
	0x01DE76F0 MOV X1, X31
	0x01DE76F4 MOV V8.16B, V0.16B
	0x01DE76F8 MOV V9.16B, V1.16B
	0x01DE76FC MOV V10.16B, V2.16B
	0x01DE7700 BL 0x3C3F58C
	0x01DE7704 ADRP X20, 0x25F1000
	0x01DE7708 LDRB W8, [X20 + 0x785]
	0x01DE770C MOV V11.16B, V0.16B
	0x01DE7710 MOV V12.16B, V1.16B
	0x01DE7714 MOV V13.16B, V2.16B
	0x01DE7718 CBNZ W8, 0x1DE7730
	0x01DE771C ADRP X0, 0x230C000
	0x01DE7720 LDR X0, [X0 + 0x5A8]
	0x01DE7724 BL 0x1C16CF4
	0x01DE7728 MOVZ W8, 0x1
	0x01DE772C STRB W8, [X20 + 0x785]
	0x01DE7730 ADRP X8, 0x230C000
	0x01DE7734 LDR X8, [X8 + 0x5A8]
	0x01DE7738 FSUB S11, S8, S11
	0x01DE773C FSUB S9, S9, S12
	0x01DE7740 FSUB S8, S10, S13
	0x01DE7744 LDR X0, [X8]
	0x01DE7748 LDR W8, [X0 + 0xE0]
	0x01DE774C CBNZ W8, 0x1DE7754
	0x01DE7750 BL 0x1C16DFC
	0x01DE7754 FMUL S0, S11, S11
	0x01DE7758 FMUL S1, S9, S9
	0x01DE775C ADRP X8, 0xFFFFFFFFFED03000
	0x01DE7760 FADD S0, S0, S1
	0x01DE7764 LDR V1, [X8 + 0x17C]
	0x01DE7768 FMUL S2, S8, S8
	0x01DE776C FADD S0, S2, S0
	0x01DE7770 FSQRT S2, S0
	0x01DE7774 FCMP S2, S1
	0x01DE7778 B.LE 0x1DE77AC
	0x01DE777C FDIV S0, S11, S2
	0x01DE7780 FDIV S1, S9, S2
	0x01DE7784 FDIV S2, S8, S2
	0x01DE7788 B 0x1DE77E4
	0x01DE778C LDP X20, X19, [X31 + 0x60]
	0x01DE7790 LDR X30, [X31 + 0x50]
	0x01DE7794 LDP D9, D8, [X31 + 0x40]
	0x01DE7798 LDP D11, D10, [X31 + 0x30]
	0x01DE779C LDP D13, D12, [X31 + 0x20]
	0x01DE77A0 LDP D15, D14, [X31 + 0x10]
	0x01DE77A4 ADD X31, X31, 0x70
	0x01DE77A8 RET
	0x01DE77AC ADRP X20, 0x25F1000
	0x01DE77B0 LDRB W8, [X20 + 0x783]
	0x01DE77B4 CBNZ W8, 0x1DE77CC
	0x01DE77B8 ADRP X0, 0x230C000
	0x01DE77BC LDR X0, [X0 + 0x5A0]
	0x01DE77C0 BL 0x1C16CF4
	0x01DE77C4 MOVZ W8, 0x1
	0x01DE77C8 STRB W8, [X20 + 0x783]
	0x01DE77CC ADRP X8, 0x230C000
	0x01DE77D0 LDR X8, [X8 + 0x5A0]
	0x01DE77D4 LDR X8, [X8]
	0x01DE77D8 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call BomberController.get_phase, X0
	006 Subtract W8, W0, 1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X9, -19632128
	009 Add X9, X9, 2393
	010 NotImplemented "Instruction ADR not yet implemented."
	011 Move W11, [X9]
	012 Add X10, X10, X11
	013 CallNoReturn X10
	014 Move X9, [X19+192]
	015 Compare X9, 0
	016 JumpIfEqual {105}
	017 Move X8, [X9+56]
	018 Compare X8, 0
	019 JumpIfEqual {105}
	020 Move W10, [X8+24]
	021 Compare W10, 0
	022 JumpIfEqual {106}
	023 Move X9, [X9+48]
	024 Compare X9, 0
	025 JumpIfEqual {105}
	026 Move W10, [X9+24]
	027 Compare W10, 0
	028 JumpIfEqual {106}
	029 Move X0, [X19+200]
	030 Compare X0, 0
	031 JumpIfEqual {105}
	032 Move X10, [X0]
	033 Move V0, [X8+32]
	034 Move V2, [X9+32]
	035 Move V1, [X19+452]
	036 Move X8, [X10+504]
	037 Move X1, [X10+512]
	038 NotImplemented "Instruction FDIV not yet implemented."
	039 Multiply S0, S1, S0
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X8, [X19+432]
	042 Compare X8, 0
	043 JumpIfEqual {105}
	044 Move W9, 0x3F800000
	045 Move X8, [X19+192]
	046 Compare X8, 0
	047 JumpIfEqual {105}
	048 Move X8, [X8+48]
	049 Compare X8, 0
	050 JumpIfEqual {105}
	051 Move W9, [X8+24]
	052 Compare W9, 0
	053 JumpIfEqual {106}
	054 Move X0, [X19+200]
	055 Compare X0, 0
	056 JumpIfEqual {105}
	057 Move X9, [X0]
	058 Move V0, [X19+448]
	059 Move V1, [X8+32]
	060 Move X8, [X9+488]
	061 Move X1, [X9+496]
	062 Multiply S0, S0, S1
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move X8, [X19+432]
	065 Compare X8, 0
	066 JumpIfEqual {105}
	067 Move W9, 0x3F000000
	068 Move [X8+128], W9
	069 Move X0, [X19+200]
	070 Compare X0, 0
	071 JumpIfEqual {105}
	072 Move X8, [X0]
	073 Move X9, [X8+520]
	074 Move X1, [X8+528]
	075 NotImplemented "Instruction BLR not yet implemented."
	076 Move X8, [X19+192]
	077 Compare X8, 0
	078 JumpIfEqual {105}
	079 Move X20, [X8+192]
	080 Move X0, X19
	081 Move X1, X31
	082 Call Component.get_transform, X0
	083 Compare X0, 0
	084 JumpIfEqual {105}
	085 Move X1, X31
	086 Call Transform.get_position, X0
	087 Move S3, 1
	088 Move X0, X20
	089 Move X1, X31
	090 Call SFXManager.PlaySFX, X0, X1, V0
	091 Move X20, [X19+432]
	092 Move X0, X19
	093 Call BomberController.get_phase, X0
	094 Compare X20, 0
	095 JumpIfEqual {105}
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move X0, X20
	098 Move X20, [X31+16]
	099 Move X19, [X31+24]
	100 NotImplemented "Instruction CSET not yet implemented."
	101 Move X2, X31
	102 Move X30, [X31+32]
	103 Call BomberView.SetEmission, X0, X1
	104 Return 
	105 Call 0x1C17F20
	106 Call 0x1C17F28

Method: System.Void Setup()

Disassembly:
	0x01DE77DC LDP S0, S1, [X8]
	0x01DE77E0 LDR V2, [X8 + 0x8]
	0x01DE77E4 MOV X0, X31
	0x01DE77E8 BL 0x3C2A8C4
	0x01DE77EC ADRP X8, 0xFFFFFFFFFED03000
	0x01DE77F0 MOV V9.16B, V0.16B
	0x01DE77F4 MOV V11.16B, V1.16B
	0x01DE77F8 MOV V8.16B, V2.16B
	0x01DE77FC MOV V10.16B, V3.16B
	0x01DE7800 LDR V2, [X8 + 0x104]
	0x01DE7804 LDP S0, S1, [X19 + 0x48]
	0x01DE7808 LDR V3, [X19 + 0x50]
	0x01DE780C MOV X0, X31
	0x01DE7810 FMUL S0, S0, S2
	0x01DE7814 FMUL S1, S1, S2
	0x01DE7818 FMUL S2, S3, S2
	0x01DE781C BL 0x3C2A574
	0x01DE7820 LDR X19, [X19 + 0x38]
	0x01DE7824 CBZ X19, 0x1DE7918
	0x01DE7828 FMUL S4, S10, S3
	0x01DE782C FMUL S5, S9, S0
	0x01DE7830 FMUL S17, S10, S2
	0x01DE7834 FMUL S18, S8, S3
	0x01DE7838 FMUL S19, S11, S0
	0x01DE783C FMUL S20, S11, S3
	0x01DE7840 FMUL S3, S9, S3
	0x01DE7844 FMUL S22, S8, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.Setup, X0
	006 Move X0, [X19+232]
	007 Compare X0, 0
	008 JumpIfEqual {36}
	009 Move W1, 1
	010 Move X2, X31
	011 Call NavMeshAgent.set_updatePosition, X0, X1
	012 Move X0, [X19+232]
	013 Compare X0, 0
	014 JumpIfEqual {36}
	015 Move W1, 1
	016 Move X2, X31
	017 Call NavMeshAgent.set_updateRotation, X0, X1
	018 Move X0, [X19+64]
	019 Compare X0, 0
	020 JumpIfEqual {36}
	021 Move X1, X31
	022 Call NetworkObject.get_HasStateAuthority, X0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {31}
	027 Move X0, X19
	028 Call BomberController.Initialize, X0
	029 Move X0, X19
	030 Call BomberController.SetRoaming, X0
	031 Move X0, X19
	032 Move X30, [X31+16]
	033 Move X19, [X31+24]
	034 Call BomberController.HandlePhaseChanged, X0
	035 Return 
	036 Call 0x1C17F20

Method: System.Void HandleRevive()

Disassembly:
	0x01DE7918 BL 0x1C16F20
	0x01DE791C STP X30, X21, [X31 - 0x20]!
	0x01DE7920 STP X20, X19, [X31 + 0x10]
	0x01DE7924 ADRP X20, 0x25F1000
	0x01DE7928 ADRP X21, 0x2311000
	0x01DE792C LDRB W8, [X20 + 0xCB0]
	0x01DE7930 LDR X21, [X21 + 0xC88]
	0x01DE7934 MOV X19, X0
	0x01DE7938 TBNZ X8, 0x0, 0x1DE7950
	0x01DE793C ADRP X0, 0x2311000
	0x01DE7940 LDR X0, [X0 + 0xC88]
	0x01DE7944 BL 0x1C16CF4
	0x01DE7948 MOVZ W8, 0x1
	0x01DE794C STRB W8, [X20 + 0xCB0]
	0x01DE7950 LDR X0, [X21]
	0x01DE7954 LDR W8, [X0 + 0xE0]
	0x01DE7958 CBNZ W8, 0x1DE7960

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleRevive, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {25}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {22}
	015 Move X0, X19
	016 Call BomberController.Initialize, X0
	017 Move X0, X19
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Call BomberController.SetRoaming, X0
	021 Return 
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return 
	025 Call 0x1C17F20

Method: System.Void Initialize()

Disassembly:
	0x01DE7848 FMUL S0, S10, S0
	0x01DE784C FMUL S23, S10, S1
	0x01DE7850 FMUL S6, S11, S1
	0x01DE7854 FMUL S16, S9, S1
	0x01DE7858 FMUL S21, S11, S2
	0x01DE785C FSUB S4, S4, S5
	0x01DE7860 FADD S5, S17, S18
	0x01DE7864 FADD S17, S23, S20
	0x01DE7868 FADD S0, S0, S3
	0x01DE786C FMUL S7, S8, S2
	0x01DE7870 FMUL S2, S9, S2
	0x01DE7874 FMUL S1, S8, S1
	0x01DE7878 FSUB S3, S4, S6
	0x01DE787C FADD S4, S16, S5
	0x01DE7880 FADD S5, S22, S17
	0x01DE7884 FADD S0, S21, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X1, X31
	005 Move X19, X0
	006 Move X9, [X8+952]
	007 Move X2, [X8+960]
	008 NotImplemented "Instruction BLR not yet implemented."
	009 Move S0, W31
	010 Move X0, X19
	011 Move X1, X31
	012 Call MobController.set__timerToChasing, X0, V0
	013 Move S0, W31
	014 Move X0, X19
	015 Move X1, X31
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call MobController.set__timerToSearching, X0, V0
	019 Return 

Method: System.Void UpdateMonsterBehaviour()

Disassembly:
	0x01DE795C BL 0x1C16DFC
	0x01DE7960 ADRP X8, 0xFFFFFFFFFED07000
	0x01DE7964 LDR V0, [X8 + 0x268]
	0x01DE7968 MOVZ W8, 0x1
	0x01DE796C MOVZ W9, 0x3F800000
	0x01DE7970 STR W31, [X19 + 0x50]
	0x01DE7974 STRB W8, [X19 + 0x54]
	0x01DE7978 STR D0, [X19 + 0x48]
	0x01DE797C STR W9, [X19 + 0x80]
	0x01DE7980 MOV X0, X19
	0x01DE7984 LDP X20, X19, [X31 + 0x10]
	0x01DE7988 MOV X1, X31
	0x01DE798C LDP X30, X21, [X31], #0x20
	0x01DE7990 B 0x3C36C30
	0x01DE7994 ADRP X8, 0xFFFFFFFFFED07000
	0x01DE7998 LDR V0, [X8 + 0x268]
	0x01DE799C MOVZ W8, 0x1
	0x01DE79A0 MOVZ W9, 0x3F800000
	0x01DE79A4 MOV X1, X31
	0x01DE79A8 STR W31, [X0 + 0x50]
	0x01DE79AC STRB W8, [X0 + 0x54]
	0x01DE79B0 STR D0, [X0 + 0x48]
	0x01DE79B4 STR W9, [X0 + 0x80]
	0x01DE79B8 B 0x3C36C30
	0x01DE79BC STR X30, [X31 - 0x30]!
	0x01DE79C0 STP X22, X21, [X31 + 0x10]
	0x01DE79C4 STP X20, X19, [X31 + 0x20]
	0x01DE79C8 ADRP X21, 0x25F1000
	0x01DE79CC ADRP X22, 0x230F000
	0x01DE79D0 ADRP X19, 0x2311000
	0x01DE79D4 ADRP X20, 0x2311000
	0x01DE79D8 LDRB W8, [X21 + 0xCB1]
	0x01DE79DC LDR X22, [X22 + 0xC88]
	0x01DE79E0 LDR X19, [X19 + 0xDD0]
	0x01DE79E4 LDR X20, [X20 + 0xDD8]
	0x01DE79E8 TBNZ X8, 0x0, 0x1DE7A18
	0x01DE79EC ADRP X0, 0x2311000
	0x01DE79F0 LDR X0, [X0 + 0xDD0]
	0x01DE79F4 BL 0x1C16CF4
	0x01DE79F8 ADRP X0, 0x2311000
	0x01DE79FC LDR X0, [X0 + 0xDD8]
	0x01DE7A00 BL 0x1C16CF4
	0x01DE7A04 ADRP X0, 0x230F000
	0x01DE7A08 LDR X0, [X0 + 0xC88]
	0x01DE7A0C BL 0x1C16CF4
	0x01DE7A10 MOVZ W8, 0x1
	0x01DE7A14 STRB W8, [X21 + 0xCB1]
	0x01DE7A18 LDR X0, [X22]
	0x01DE7A1C MOV X1, X31
	0x01DE7A20 BL 0x3C124EC
	0x01DE7A24 LDR X8, [X19]
	0x01DE7A28 MOV X1, X31
	0x01DE7A2C LDR X8, [X8 + 0xB8]
	0x01DE7A30 STR W0, [X8]
	0x01DE7A34 LDR X0, [X20]
	0x01DE7A38 BL 0x3C124EC
	0x01DE7A3C LDR X8, [X19]
	0x01DE7A40 ADRP X9, 0xFFFFFFFFFED04000
	0x01DE7A44 LDR V0, [X9 + 0xBE]
	0x01DE7A48 LDP X20, X19, [X31 + 0x20]
	0x01DE7A4C LDR X8, [X8 + 0xB8]
	0x01DE7A50 LDP X22, X21, [X31 + 0x10]
	0x01DE7A54 STR W0, [X8 + 0x4]
	0x01DE7A58 STUR V0, [X8 + 0x8]
	0x01DE7A5C LDR X30, [X31], #0x30
	0x01DE7A60 RET

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x25F2000
	006 Move W8, [X20+3239]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2312000
	013 Move X0, [X0+3528]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3239], W8
	017 Move X0, X19
	018 Move X1, X31
	019 Call MobController.UpdateMonsterBehaviour, X0
	020 Move X0, X19
	021 Call BomberController.get_phase, X0
	022 Subtract W8, W0, 1
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X9, -19632128
	025 Add X9, X9, 2398
	026 NotImplemented "Instruction ADR not yet implemented."
	027 Move W11, [X9]
	028 Add X10, X10, X11
	029 CallNoReturn X10
	030 Move X8, [X19]
	031 Move X9, [X8+904]
	032 Move X1, [X8+912]
	033 Move X8, [X19]
	034 Move X9, [X8+968]
	035 Move X1, [X8+976]
	036 Move X0, X19
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X0, X19
	039 Call BomberController.UpdateAnticipating, X0
	040 Move X0, X19
	041 Call BomberController.UpdateSearching, X0
	042 Call GameManager.get_isDebug
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {70}
	047 Move X20, [X19+408]
	048 Compare X20, 0
	049 JumpIfEqual {70}
	050 Move X0, X19
	051 Call BomberController.get_phase, X0
	052 Move X8, 0x2312000
	053 Move X8, [X8+3528]
	054 Move TEMP, 0
	055 Not TEMP
	056 Move X9, TEMP
	057 Move [X31+24], W0
	058 Add X0, X31, 8
	059 Move X8, [X8]
	060 Move X1, X31
	061 Move [X31+8], X8
	062 Move [X31+16], X9
	063 Call Enum.ToString, X0
	064 Move X8, [X20+64]
	065 Move X9, [X20+24]
	066 Move X2, [X20+40]
	067 Move X1, X0
	068 Move X0, X8
	069 NotImplemented "Instruction BLR not yet implemented."
	070 Move X20, [X31+48]
	071 Move X19, [X31+56]
	072 Move X30, [X31+32]
	073 Add X31, X31, 64
	074 Return 

Method: System.Void SetRoaming()

Disassembly:
	0x01DE7888 MOV X0, X19
	0x01DE788C MOV X1, X31
	0x01DE7890 FSUB S8, S3, S7
	0x01DE7894 FSUB S9, S4, S19
	0x01DE7898 FSUB S10, S5, S2
	0x01DE789C FSUB S11, S0, S1
	0x01DE78A0 BL 0x3C3DEB4
	0x01DE78A4 MOV X0, X31
	0x01DE78A8 MOV V12.16B, V0.16B
	0x01DE78AC MOV V13.16B, V1.16B
	0x01DE78B0 MOV V14.16B, V2.16B
	0x01DE78B4 MOV V15.16B, V3.16B
	0x01DE78B8 BL 0x3C3C714
	0x01DE78BC FMOV S1, 10
	0x01DE78C0 FMUL S0, S0, S1
	0x01DE78C4 STR S0, [X31]
	0x01DE78C8 MOV V0.16B, V12.16B
	0x01DE78CC MOV V1.16B, V13.16B
	0x01DE78D0 MOV V2.16B, V14.16B
	0x01DE78D4 MOV V3.16B, V15.16B
	0x01DE78D8 MOV V4.16B, V11.16B
	0x01DE78DC MOV V5.16B, V10.16B
	0x01DE78E0 MOV V6.16B, V9.16B
	0x01DE78E4 MOV V7.16B, V8.16B
	0x01DE78E8 MOV X0, X31
	0x01DE78EC BL 0x3C2A2F8
	0x01DE78F0 MOV X0, X19
	0x01DE78F4 LDP X20, X19, [X31 + 0x60]
	0x01DE78F8 LDR X30, [X31 + 0x50]
	0x01DE78FC LDP D9, D8, [X31 + 0x40]
	0x01DE7900 LDP D11, D10, [X31 + 0x30]
	0x01DE7904 LDP D13, D12, [X31 + 0x20]
	0x01DE7908 LDP D15, D14, [X31 + 0x10]
	0x01DE790C MOV X1, X31
	0x01DE7910 ADD X31, X31, 0x70
	0x01DE7914 B 0x3C3F7AC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 1
	004 Move X19, X0
	005 Call BomberController.set_phase, X0, X1
	006 Move X9, [X19+192]
	007 Compare X9, 0
	008 JumpIfEqual {44}
	009 Move X8, [X9+48]
	010 Compare X8, 0
	011 JumpIfEqual {44}
	012 Move W10, [X8+24]
	013 Compare W10, 0
	014 JumpIfEqual {45}
	015 Move X10, [X9+88]
	016 Compare X10, 0
	017 JumpIfEqual {44}
	018 Move W11, [X10+24]
	019 Compare W11, 0
	020 JumpIfEqual {45}
	021 Move X9, [X9+96]
	022 Compare X9, 0
	023 JumpIfEqual {44}
	024 Move W11, [X9+24]
	025 Compare W11, 0
	026 JumpIfEqual {45}
	027 Move X11, [X19]
	028 Move V0, [X8+32]
	029 Move V1, [X10+32]
	030 Move V2, [X9+32]
	031 Move X8, [X11+712]
	032 Move X2, [X11+720]
	033 Move X0, X19
	034 Move W1, W31
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X8, [X19]
	037 Move W1, 1
	038 Move X0, X19
	039 Move X3, [X8+872]
	040 Move X2, [X8+880]
	041 Move X30, [X31+16]
	042 Move X19, [X31+24]
	043 CallNoReturn X3
	044 Call 0x1C17F20
	045 Call 0x1C17F28

Method: System.Void UpdateRoaming()

Disassembly:
	0x01DE7C58 STR S2, [X8 + 0x4C]
	0x01DE7C5C LDP X30, X19, [X31], #0x10
	0x01DE7C60 RET
	0x01DE7C64 ADRP X0, 0x230C000
	0x01DE7C68 LDR X0, [X0 + 0x5B0]
	0x01DE7C6C BL 0x1C16D08
	0x01DE7C70 BL 0x1C16F10
	0x01DE7C74 MOV X19, X0
	0x01DE7C78 ADRP X0, 0x2311000
	0x01DE7C7C LDR X0, [X0 + 0xE10]
	0x01DE7C80 BL 0x1C16D08
	0x01DE7C84 MOV X1, X0
	0x01DE7C88 MOV X0, X19
	0x01DE7C8C MOV X2, X31
	0x01DE7C90 BL 0x337DF1C
	0x01DE7C94 ADRP X0, 0x2311000
	0x01DE7C98 LDR X0, [X0 + 0xE20]
	0x01DE7C9C BL 0x1C16D08
	0x01DE7CA0 MOV X1, X0
	0x01DE7CA4 MOV X0, X19
	0x01DE7CA8 BL 0x1C16DEC
	0x01DE7CAC STP X30, X19, [X31 - 0x10]!
	0x01DE7CB0 LDR X8, [X0 + 0x50]
	0x01DE7CB4 CBZ X8, 0x1DE7CC4
	0x01DE7CB8 LDR W0, [X8 + 0x50]
	0x01DE7CBC LDP X30, X19, [X31], #0x10
	0x01DE7CC0 RET
	0x01DE7CC4 ADRP X0, 0x230C000
	0x01DE7CC8 LDR X0, [X0 + 0x5B0]
	0x01DE7CCC BL 0x1C16D08
	0x01DE7CD0 BL 0x1C16F10
	0x01DE7CD4 MOV X19, X0
	0x01DE7CD8 ADRP X0, 0x2311000
	0x01DE7CDC LDR X0, [X0 + 0xE28]
	0x01DE7CE0 BL 0x1C16D08
	0x01DE7CE4 MOV X1, X0
	0x01DE7CE8 MOV X0, X19
	0x01DE7CEC MOV X2, X31
	0x01DE7CF0 BL 0x337DF1C
	0x01DE7CF4 ADRP X0, 0x2311000
	0x01DE7CF8 LDR X0, [X0 + 0xE30]
	0x01DE7CFC BL 0x1C16D08
	0x01DE7D00 MOV X1, X0
	0x01DE7D04 MOV X0, X19
	0x01DE7D08 BL 0x1C16DEC
	0x01DE7D0C STP X30, X19, [X31 - 0x10]!
	0x01DE7D10 LDR X8, [X0 + 0x50]
	0x01DE7D14 CBZ X8, 0x1DE7D24
	0x01DE7D18 STR W1, [X8 + 0x50]
	0x01DE7D1C LDP X30, X19, [X31], #0x10
	0x01DE7D20 RET
	0x01DE7D24 ADRP X0, 0x230C000
	0x01DE7D28 LDR X0, [X0 + 0x5B0]
	0x01DE7D2C BL 0x1C16D08
	0x01DE7D30 BL 0x1C16F10
	0x01DE7D34 MOV X19, X0
	0x01DE7D38 ADRP X0, 0x2311000
	0x01DE7D3C LDR X0, [X0 + 0xE28]
	0x01DE7D40 BL 0x1C16D08
	0x01DE7D44 MOV X1, X0
	0x01DE7D48 MOV X0, X19
	0x01DE7D4C MOV X2, X31
	0x01DE7D50 BL 0x337DF1C
	0x01DE7D54 ADRP X0, 0x2311000
	0x01DE7D58 LDR X0, [X0 + 0xE38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25F2000
	006 Move X20, 0x2312000
	007 Move W8, [X21+3240]
	008 Move X20, [X20+3136]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x2312000
	015 Move X0, [X0+3248]
	016 Call 0x1C17CF4
	017 Move X0, 0x2312000
	018 Move X0, [X0+3184]
	019 Call 0x1C17CF4
	020 Move X0, 0x2312000
	021 Move X0, [X0+3136]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3240], W8
	025 Move X0, X19
	026 Move X1, X31
	027 Call MobController.UpdateRoaming, X0
	028 Move X0, [X20]
	029 Add X20, X19, 376
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X20
	036 Move X2, X31
	037 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {75}
	042 Move X20, [X20]
	043 Compare X20, 0
	044 JumpIfEqual {80}
	045 Move W1, [X20+24]
	046 Move W0, W31
	047 Move X2, X31
	048 Call Random.Range, X0, X1
	049 Move X8, 0x2312000
	050 Move X8, [X8+3184]
	051 Move W1, W0
	052 Move X0, X20
	053 Move X2, [X8]
	054 Call List`1<Object>.get_Item, X0, X1
	055 Move X8, [X19]
	056 Move X1, X0
	057 Move X0, X19
	058 Move X9, [X8+952]
	059 Move X2, [X8+960]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X0, [X19+352]
	062 Compare X0, 0
	063 JumpIfEqual {80}
	064 Move X1, X31
	065 Call Component.get_transform, X0
	066 Compare X0, 0
	067 JumpIfEqual {80}
	068 Move X1, X31
	069 Call Transform.get_position, X0
	070 Move X0, X19
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move X30, [X31+32]
	074 Move X21, [X31+40]
	075 Move X20, [X31+16]
	076 Move X19, [X31+24]
	077 Move X30, [X31+32]
	078 Move X21, [X31+40]
	079 Return 
	080 Call 0x1C17F20

Method: System.Void SetChasing(UnityEngine.Vector3 targetPosition)

Disassembly:
	0x01DE7D5C BL 0x1C16D08
	0x01DE7D60 MOV X1, X0
	0x01DE7D64 MOV X0, X19
	0x01DE7D68 BL 0x1C16DEC
	0x01DE7D6C STP D13, D12, [X31 - 0x50]!
	0x01DE7D70 STP D11, D10, [X31 + 0x10]
	0x01DE7D74 STP D9, D8, [X31 + 0x20]
	0x01DE7D78 STR X30, [X31 + 0x30]
	0x01DE7D7C STP X20, X19, [X31 + 0x40]
	0x01DE7D80 MOV X1, X31
	0x01DE7D84 MOV X19, X0
	0x01DE7D88 BL 0x3C32E90
	0x01DE7D8C CBZ X0, 0x1DE7E5C
	0x01DE7D90 MOV X1, X31
	0x01DE7D94 BL 0x3C3F58C
	0x01DE7D98 MOV X0, X19
	0x01DE7D9C MOV X1, X31
	0x01DE7DA0 MOV V8.16B, V0.16B
	0x01DE7DA4 MOV V9.16B, V1.16B
	0x01DE7DA8 MOV V10.16B, V2.16B
	0x01DE7DAC BL 0x3C32E90
	0x01DE7DB0 CBZ X0, 0x1DE7E5C
	0x01DE7DB4 MOV X1, X31
	0x01DE7DB8 BL 0x3C3FA04
	0x01DE7DBC ADRP X20, 0x25F1000
	0x01DE7DC0 LDRB W8, [X20 + 0x786]
	0x01DE7DC4 MOV V11.16B, V0.16B
	0x01DE7DC8 MOV V12.16B, V1.16B
	0x01DE7DCC MOV V13.16B, V2.16B
	0x01DE7DD0 CBNZ W8, 0x1DE7DE8
	0x01DE7DD4 ADRP X0, 0x230C000
	0x01DE7DD8 LDR X0, [X0 + 0x5A0]
	0x01DE7DDC BL 0x1C16CF4
	0x01DE7DE0 MOVZ W8, 0x1
	0x01DE7DE4 STRB W8, [X20 + 0x786]
	0x01DE7DE8 LDR X8, [X19 + 0xC0]
	0x01DE7DEC CBZ X8, 0x1DE7E5C
	0x01DE7DF0 ADRP X9, 0x230C000
	0x01DE7DF4 LDR X9, [X9 + 0x5A0]
	0x01DE7DF8 LDR V3, [X8 + 0x4C]
	0x01DE7DFC ADRP X8, 0xFFFFFFFFFED03000
	0x01DE7E00 LDR V4, [X8 + 0x5C]
	0x01DE7E04 LDR X9, [X9]
	0x01DE7E08 LDP X20, X19, [X31 + 0x40]
	0x01DE7E0C LDR X30, [X31 + 0x30]
	0x01DE7E10 LDR X9, [X9 + 0xB8]
	0x01DE7E14 LDP S1, S0, [X9 + 0x1C]
	0x01DE7E18 LDR V2, [X9 + 0x18]
	0x01DE7E1C FADD S0, S13, S0
	0x01DE7E20 FADD S1, S12, S1
	0x01DE7E24 FADD S2, S11, S2
	0x01DE7E28 FMUL S2, S2, S3
	0x01DE7E2C FMUL S1, S1, S3
	0x01DE7E30 FMUL S0, S0, S3
	0x01DE7E34 FMUL S2, S2, S4
	0x01DE7E38 FMUL S1, S1, S4
	0x01DE7E3C FMUL S3, S0, S4
	0x01DE7E40 FADD S0, S8, S2
	0x01DE7E44 FADD S1, S9, S1
	0x01DE7E48 FADD S2, S10, S3
	0x01DE7E4C LDP D9, D8, [X31 + 0x20]
	0x01DE7E50 LDP D11, D10, [X31 + 0x10]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W1, 2
	008 Move V8, V2
	009 Move V9, V1
	010 Move V10, V0
	011 Move X19, X0
	012 Call BomberController.set_phase, X0, X1
	013 Move S0, W31
	014 Move X0, X19
	015 Move X1, X31
	016 Call MobController.set__timerToChasing, X0, V0
	017 Move X0, X19
	018 Move V0, V10
	019 Move V1, V9
	020 Move V2, V8
	021 Move X1, X31
	022 Call MobController.set__targetPosition, X0, X1
	023 Move X9, [X19+192]
	024 Compare X9, 0
	025 JumpIfEqual {75}
	026 Move X8, [X9+56]
	027 Compare X8, 0
	028 JumpIfEqual {75}
	029 Move W10, [X8+24]
	030 Compare W10, 0
	031 JumpIfEqual {76}
	032 Move X10, [X9+88]
	033 Compare X10, 0
	034 JumpIfEqual {75}
	035 Move W11, [X10+24]
	036 Compare W11, 0
	037 JumpIfEqual {76}
	038 Move X9, [X9+96]
	039 Compare X9, 0
	040 JumpIfEqual {75}
	041 Move W11, [X9+24]
	042 Compare W11, 0
	043 JumpIfEqual {76}
	044 Move X11, [X19]
	045 Move V0, [X8+32]
	046 Move V1, [X10+32]
	047 Move V2, [X9+32]
	048 Move X8, [X11+712]
	049 Move X2, [X11+720]
	050 Move X0, X19
	051 Move W1, W31
	052 NotImplemented "Instruction BLR not yet implemented."
	053 Move X8, [X19+192]
	054 Compare X8, 0
	055 JumpIfEqual {75}
	056 Move X20, [X8+160]
	057 Move X0, X19
	058 Move X1, X31
	059 Call Component.get_transform, X0
	060 Compare X0, 0
	061 JumpIfEqual {75}
	062 Move X1, X31
	063 Call Transform.get_position, X0
	064 Move X0, X20
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X30, [X31+24]
	068 Move D9, [X31+8]
	069 Move D8, [X31+16]
	070 Move S3, 1
	071 Move X1, X31
	072 Move V10, [X31+48]
	073 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	074 Return 
	075 Call 0x1C17F20
	076 Call 0x1C17F28

Method: System.Void UpdateChasing()

Disassembly:
	0x01DE7E54 LDP D13, D12, [X31], #0x50
	0x01DE7E58 RET
	0x01DE7E5C BL 0x1C16F20
	0x01DE7E60 STR D10, [X31 - 0x40]!
	0x01DE7E64 STP D9, D8, [X31 + 0x10]
	0x01DE7E68 STP X30, X21, [X31 + 0x20]
	0x01DE7E6C STP X20, X19, [X31 + 0x30]
	0x01DE7E70 ADRP X21, 0x25F1000
	0x01DE7E74 ADRP X20, 0x230C000
	0x01DE7E78 LDRB W8, [X21 + 0xCB2]
	0x01DE7E7C LDR X20, [X20 + 0x598]
	0x01DE7E80 MOV X19, X0
	0x01DE7E84 TBNZ X8, 0x0, 0x1DE7E9C
	0x01DE7E88 ADRP X0, 0x230C000
	0x01DE7E8C LDR X0, [X0 + 0x598]
	0x01DE7E90 BL 0x1C16CF4
	0x01DE7E94 MOVZ W8, 0x1
	0x01DE7E98 STRB W8, [X21 + 0xCB2]
	0x01DE7E9C LDR X0, [X20]
	0x01DE7EA0 LDR X20, [X19 + 0x1E8]
	0x01DE7EA4 LDR W8, [X0 + 0xE0]
	0x01DE7EA8 CBNZ W8, 0x1DE7EB0
	0x01DE7EAC BL 0x1C16DFC
	0x01DE7EB0 MOV X0, X20
	0x01DE7EB4 MOV X1, X31
	0x01DE7EB8 MOV X2, X31
	0x01DE7EBC BL 0x3C3883C
	0x01DE7EC0 TBZ X0, 0x0, 0x1DE7ECC
	0x01DE7EC4 MOVZ W0, 0x1
	0x01DE7EC8 B 0x1DE7F1C
	0x01DE7ECC MOV X0, X19
	0x01DE7ED0 BL 0x1DE7BE4
	0x01DE7ED4 LDR X0, [X19 + 0x1E8]
	0x01DE7ED8 CBZ X0, 0x1DE7F30
	0x01DE7EDC MOV X1, X31
	0x01DE7EE0 MOV V8.16B, V0.16B
	0x01DE7EE4 MOV V9.16B, V1.16B
	0x01DE7EE8 MOV V10.16B, V2.16B
	0x01DE7EEC BL 0x3C3F58C
	0x01DE7EF0 FSUB S0, S8, S0
	0x01DE7EF4 FSUB S1, S9, S1
	0x01DE7EF8 FSUB S2, S10, S2
	0x01DE7EFC FMUL S0, S0, S0
	0x01DE7F00 FMUL S1, S1, S1
	0x01DE7F04 FMUL S2, S2, S2
	0x01DE7F08 FADD S0, S0, S1
	0x01DE7F0C FADD S0, S2, S0
	0x01DE7F10 FMOV S1, 1
	0x01DE7F14 FCMP S0, S1
	0x01DE7F18 CSET W0, GT
	0x01DE7F1C LDP X20, X19, [X31 + 0x30]
	0x01DE7F20 LDP X30, X21, [X31 + 0x20]
	0x01DE7F24 LDP D9, D8, [X31 + 0x10]
	0x01DE7F28 LDR V10, [X31], #0x40
	0x01DE7F2C RET
	0x01DE7F30 BL 0x1C16F20
	0x01DE7F34 STP D13, D12, [X31 - 0x40]!
	0x01DE7F38 STP D11, D10, [X31 + 0x10]
	0x01DE7F3C STP D9, D8, [X31 + 0x20]
	0x01DE7F40 STP X30, X19, [X31 + 0x30]
	0x01DE7F44 MOV X1, X31
	0x01DE7F48 MOV X19, X0
	0x01DE7F4C BL 0x3C32E90
	0x01DE7F50 CBZ X0, 0x1DE7FEC
	0x01DE7F54 MOV X1, X31
	0x01DE7F58 BL 0x3C3F58C
	0x01DE7F5C MOV X0, X19
	0x01DE7F60 MOV V8.16B, V0.16B
	0x01DE7F64 MOV V9.16B, V1.16B
	0x01DE7F68 MOV V10.16B, V2.16B
	0x01DE7F6C BL 0x1DE7BE4
	0x01DE7F70 ADRP X19, 0x25F1000
	0x01DE7F74 LDRB W8, [X19 + 0x85C]
	0x01DE7F78 MOV V11.16B, V0.16B
	0x01DE7F7C MOV V12.16B, V1.16B
	0x01DE7F80 MOV V13.16B, V2.16B
	0x01DE7F84 CBNZ W8, 0x1DE7F9C
	0x01DE7F88 ADRP X0, 0x230C000
	0x01DE7F8C LDR X0, [X0 + 0x5A8]
	0x01DE7F90 BL 0x1C16CF4
	0x01DE7F94 MOVZ W8, 0x1
	0x01DE7F98 STRB W8, [X19 + 0x85C]
	0x01DE7F9C ADRP X8, 0x230C000
	0x01DE7FA0 LDR X8, [X8 + 0x5A8]
	0x01DE7FA4 FSUB S11, S8, S11
	0x01DE7FA8 FSUB S9, S9, S12
	0x01DE7FAC FSUB S8, S10, S13
	0x01DE7FB0 LDR X0, [X8]
	0x01DE7FB4 LDR W8, [X0 + 0xE0]
	0x01DE7FB8 CBNZ W8, 0x1DE7FC0
	0x01DE7FBC BL 0x1C16DFC
	0x01DE7FC0 FMUL S0, S11, S11
	0x01DE7FC4 FMUL S1, S9, S9
	0x01DE7FC8 FADD S0, S0, S1
	0x01DE7FCC FMUL S1, S8, S8
	0x01DE7FD0 LDP X30, X19, [X31 + 0x30]
	0x01DE7FD4 LDP D9, D8, [X31 + 0x20]
	0x01DE7FD8 LDP D11, D10, [X31 + 0x10]
	0x01DE7FDC FADD S0, S1, S0
	0x01DE7FE0 FSQRT S0, S0
	0x01DE7FE4 LDP D13, D12, [X31], #0x40
	0x01DE7FE8 RET
	0x01DE7FEC BL 0x1C16F20
	0x01DE7FF0 STR D10, [X31 - 0x30]!
	0x01DE7FF4 STP D9, D8, [X31 + 0x10]
	0x01DE7FF8 STP X30, X19, [X31 + 0x20]
	0x01DE7FFC BL 0x1DE7BE4
	0x01DE8000 ADRP X19, 0x25F0000
	0x01DE8004 LDRB W8, [X19 + 0x786]
	0x01DE8008 MOV V8.16B, V0.16B
	0x01DE800C MOV V9.16B, V1.16B
	0x01DE8010 MOV V10.16B, V2.16B
	0x01DE8014 CBNZ W8, 0x1DE802C
	0x01DE8018 ADRP X0, 0x230B000
	0x01DE801C LDR X0, [X0 + 0x5A0]
	0x01DE8020 BL 0x1C16CF4
	0x01DE8024 MOVZ W8, 0x1
	0x01DE8028 STRB W8, [X19 + 0x786]
	0x01DE802C ADRP X8, 0x230B000
	0x01DE8030 LDR X8, [X8 + 0x5A0]
	0x01DE8034 ADRP X9, 0xFFFFFFFFFED01000
	0x01DE8038 LDR V0, [X9 + 0xFB8]
	0x01DE803C LDP X30, X19, [X31 + 0x20]
	0x01DE8040 LDR X8, [X8]
	0x01DE8044 LDR X8, [X8 + 0xB8]
	0x01DE8048 LDP S1, S2, [X8 + 0x18]
	0x01DE804C LDR V3, [X8 + 0x20]
	0x01DE8050 FMUL S1, S1, S0
	0x01DE8054 FMUL S2, S2, S0
	0x01DE8058 FMUL S3, S3, S0
	0x01DE805C FADD S0, S8, S1
	0x01DE8060 FADD S1, S9, S2

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D14
	003 Move [X31+24], D13
	004 Move [X31+32], D12
	005 Move [X31+40], D11
	006 Move [X31+48], D10
	007 Move [X31+56], D9
	008 Move [X31+64], D8
	009 Move [X31+72], X30
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x25F2000
	013 Move W8, [X20+3241]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x2312000
	020 Move X0, [X0+3136]
	021 Call 0x1C17CF4
	022 Move X0, 0x230D000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3241], W8
	027 Move X0, X19
	028 Move X1, X31
	029 Move [X31+8], X31
	030 Call MobController.UpdateChasing, X0
	031 Move X0, [X19+208]
	032 Compare X0, 0
	033 JumpIfEqual {152}
	034 Move X1, X31
	035 Call Transform.get_position, X0
	036 Move X8, [X19+192]
	037 Compare X8, 0
	038 JumpIfEqual {152}
	039 Move X9, 0x2312000
	040 Move X9, [X9+3136]
	041 Move V11, [X8+76]
	042 Move V8, V0
	043 Move V9, V1
	044 Move X0, [X9]
	045 Move V10, V2
	046 Move W9, [X0+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X20, 0x230D000
	051 Move X20, [X20+1432]
	052 Add X1, X31, 8
	053 Move X0, X19
	054 Move V0, V8
	055 Move V1, V9
	056 Move V2, V10
	057 Move V3, V11
	058 Move X2, X31
	059 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {66}
	064 Move X0, X19
	065 Call BomberController.SetAnticipating, X0
	066 Move X0, [X20]
	067 Move X20, [X19+352]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X0, X20
	073 Move X1, X31
	074 Move X2, X31
	075 Call Object.op_Equality, X0, X1
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {128}
	080 Move X0, [X19+208]
	081 Compare X0, 0
	082 JumpIfEqual {152}
	083 Move X1, X31
	084 Call Transform.get_position, X0
	085 Move X0, X19
	086 Move X1, X31
	087 Move V8, V0
	088 Move V9, V1
	089 Move V10, V2
	090 Call MobController.get__targetPosition, X0
	091 Move X0, X19
	092 Move X1, X31
	093 Move V11, V0
	094 Move V12, V1
	095 Move V13, V2
	096 Call MobController.get__timerToChasing, X0
	097 Move X0, X19
	098 Move X1, X31
	099 Move V14, V0
	100 Call MobController.get_deltaTime, X0
	101 Add S0, S14, S0
	102 Move X0, X19
	103 Move X1, X31
	104 Call MobController.set__timerToChasing, X0, V0
	105 Move X0, X19
	106 Move X1, X31
	107 Call MobController.get__timerToChasing, X0
	108 Move X0, [X19+192]
	109 Compare X0, 0
	110 JumpIfEqual {152}
	111 Move V1, [X0+104]
	112 NotImplemented "Instruction FCMP not yet implemented."
	113 Subtract S0, S8, S11
	114 Subtract S1, S9, S12
	115 Subtract S2, S10, S13
	116 Multiply S0, S0, S0
	117 Multiply S1, S1, S1
	118 Add S0, S0, S1
	119 Multiply S1, S2, S2
	120 Move X1, X31
	121 Add S8, S1, S0
	122 Call MobData.get_attackRangeSqr, X0
	123 NotImplemented "Instruction FCMP not yet implemented."
	124 Move X0, X19
	125 Call BomberController.SetSearching, X0
	126 Move X0, X19
	127 Call BomberController.SetRoaming, X0
	128 Move X0, X19
	129 Call BomberController.get_phase, X0
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move X20, [X19+232]
	132 Move X0, X19
	133 Move X1, X31
	134 Call MobController.get__targetPosition, X0
	135 Compare X20, 0
	136 JumpIfEqual {152}
	137 Move X0, X20
	138 Move X1, X31
	139 Call NavMeshAgent.SetDestination, X0, X1
	140 Move X20, [X31+80]
	141 Move X19, [X31+88]
	142 Move X30, [X31+72]
	143 Move D9, [X31+56]
	144 Move D8, [X31+64]
	145 Move D11, [X31+40]
	146 Move D10, [X31+48]
	147 Move D13, [X31+24]
	148 Move D12, [X31+32]
	149 Move V14, [X31+16]
	150 Add X31, X31, 96
	151 Return 
	152 Call 0x1C17F20

Method: System.Void SetAnticipating()

Disassembly:
	0x01DE8064 LDP D9, D8, [X31 + 0x10]
	0x01DE8068 FADD S2, S10, S3
	0x01DE806C LDR V10, [X31], #0x30
	0x01DE8070 RET
	0x01DE8074 STR X30, [X31 - 0x10]!
	0x01DE8078 MOVZ W8, 0x43B40000
	0x01DE807C FMOV S0, W31
	0x01DE8080 FMOV S1, W8
	0x01DE8084 MOV X0, X31
	0x01DE8088 BL 0x3C30968
	0x01DE808C ADRP X8, 0xFFFFFFFFFED02000
	0x01DE8090 LDR V2, [X8 + 0x104]
	0x01DE8094 MOV V1.16B, V0.16B
	0x01DE8098 FMOV S0, W31
	0x01DE809C MOV X0, X31
	0x01DE80A0 FMUL S1, S1, S2
	0x01DE80A4 FMOV S2, W31
	0x01DE80A8 LDR X30, [X31], #0x10
	0x01DE80AC B 0x3C2A574
	0x01DE80B0 STP X30, X21, [X31 - 0x20]!
	0x01DE80B4 STP X20, X19, [X31 + 0x10]
	0x01DE80B8 MOV X19, X0
	0x01DE80BC BL 0x1DE7A64
	0x01DE80C0 SUB W8, W0, 0x1
	0x01DE80C4 CMP W8, 0x4
	0x01DE80C8 B.HI 0x1DE8128
	0x01DE80CC ADRP X9, 0xFFFFFFFFFED45000
	0x01DE80D0 ADD X9, X9, 0x962
	0x01DE80D4 ADR X10, 0x10
	0x01DE80D8 LDRB W11, [X9, X8, LSL]
	0x01DE80DC ADD X10, X10, X11, 0x2, LSL
	0x01DE80E0 BR X10
	0x01DE80E4 LDR X0, [X19 + 0xC8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 3
	004 Move X19, X0
	005 Call BomberController.set_phase, X0, X1
	006 Move S0, W31
	007 Move X0, X19
	008 Call BomberController.set_timerAnticipating, X0, V0
	009 Move X9, [X19+192]
	010 Compare X9, 0
	011 JumpIfEqual {41}
	012 Move X8, [X9+56]
	013 Compare X8, 0
	014 JumpIfEqual {41}
	015 Move W10, [X8+24]
	016 Compare W10, 0
	017 JumpIfEqual {42}
	018 Move X10, [X9+88]
	019 Compare X10, 0
	020 JumpIfEqual {41}
	021 Move W11, [X10+24]
	022 Compare W11, 0
	023 JumpIfEqual {42}
	024 Move X9, [X9+96]
	025 Compare X9, 0
	026 JumpIfEqual {41}
	027 Move W11, [X9+24]
	028 Compare W11, 0
	029 JumpIfEqual {42}
	030 Move X11, [X19]
	031 Move V0, [X8+32]
	032 Move V1, [X10+32]
	033 Move V2, [X9+32]
	034 Move X3, [X11+712]
	035 Move X2, [X11+720]
	036 Move W1, 1
	037 Move X0, X19
	038 Move X30, [X31+16]
	039 Move X19, [X31+24]
	040 CallNoReturn X3
	041 Call 0x1C17F20
	042 Call 0x1C17F28

Method: System.Void UpdateAnticipating()

Disassembly:
	0x01DE7A64 STP X30, X19, [X31 - 0x10]!
	0x01DE7A68 LDR X8, [X0 + 0x50]
	0x01DE7A6C CBZ X8, 0x1DE7A7C
	0x01DE7A70 LDR W0, [X8 + 0x3C]
	0x01DE7A74 LDP X30, X19, [X31], #0x10
	0x01DE7A78 RET
	0x01DE7A7C ADRP X0, 0x230C000
	0x01DE7A80 LDR X0, [X0 + 0x5B0]
	0x01DE7A84 BL 0x1C16D08
	0x01DE7A88 BL 0x1C16F10
	0x01DE7A8C MOV X19, X0
	0x01DE7A90 ADRP X0, 0x2311000
	0x01DE7A94 LDR X0, [X0 + 0xDE0]
	0x01DE7A98 BL 0x1C16D08
	0x01DE7A9C MOV X1, X0
	0x01DE7AA0 MOV X0, X19
	0x01DE7AA4 MOV X2, X31
	0x01DE7AA8 BL 0x337DF1C
	0x01DE7AAC ADRP X0, 0x2311000
	0x01DE7AB0 LDR X0, [X0 + 0xDE8]
	0x01DE7AB4 BL 0x1C16D08
	0x01DE7AB8 MOV X1, X0
	0x01DE7ABC MOV X0, X19
	0x01DE7AC0 BL 0x1C16DEC
	0x01DE7AC4 STP X30, X19, [X31 - 0x10]!
	0x01DE7AC8 LDR X8, [X0 + 0x50]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call BomberController.get_timerAnticipating, X0
	006 Move X0, X19
	007 Move X1, X31
	008 Move V8, V0
	009 Call MobController.get_deltaTime, X0
	010 Add S0, S8, S0
	011 Move X0, X19
	012 Call BomberController.set_timerAnticipating, X0, V0
	013 Move X0, X19
	014 Call BomberController.get_timerAnticipating, X0
	015 Move X8, [X19+192]
	016 Compare X8, 0
	017 JumpIfEqual {30}
	018 Move V1, [X8+40]
	019 NotImplemented "Instruction FCMP not yet implemented."
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Move V8, [X31+32]
	023 Return 
	024 Move X0, X19
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Move V8, [X31+32]
	028 Call BomberController.Explode, X0
	029 Return 
	030 Call 0x1C17F20

Method: System.Void SetSearching()

Disassembly:
	0x01DE80E8 CBZ X0, 0x1DE81F4
	0x01DE80EC LDR X8, [X0]
	0x01DE80F0 LDP X9, X1, [X8 + 0x1D8]
	0x01DE80F4 BLR X9
	0x01DE80F8 B 0x1DE8128
	0x01DE80FC LDR X0, [X19 + 0xC8]
	0x01DE8100 CBZ X0, 0x1DE81F4
	0x01DE8104 LDR X8, [X0]
	0x01DE8108 LDP X9, X1, [X8 + 0x1F8]
	0x01DE810C B 0x1DE8120
	0x01DE8110 LDR X0, [X19 + 0xC8]
	0x01DE8114 CBZ X0, 0x1DE81F4
	0x01DE8118 LDR X8, [X0]
	0x01DE811C LDP X9, X1, [X8 + 0x1E8]
	0x01DE8120 FMOV S0, 1
	0x01DE8124 BLR X9
	0x01DE8128 MOV X0, X19
	0x01DE812C BL 0x1DE7A64
	0x01DE8130 CMP W0, 0x2
	0x01DE8134 B.NE 0x1DE8140
	0x01DE8138 MOVZ W20, 0x1
	0x01DE813C B 0x1DE8150
	0x01DE8140 MOV X0, X19
	0x01DE8144 BL 0x1DE7A64
	0x01DE8148 CMP W0, 0x3
	0x01DE814C CSET W20, EQ
	0x01DE8150 LDR X8, [X19 + 0x1C0]
	0x01DE8154 CBZ X8, 0x1DE81F4
	0x01DE8158 LDR X0, [X8 + 0xB8]
	0x01DE815C CBZ X0, 0x1DE81F4
	0x01DE8160 MOV W1, W20
	0x01DE8164 MOV X2, X31
	0x01DE8168 BL 0x3C13034
	0x01DE816C LDR X0, [X19 + 0x1C0]
	0x01DE8170 CBZ X0, 0x1DE81F4
	0x01DE8174 LDR X8, [X0]
	0x01DE8178 MOV W1, W20
	0x01DE817C LDP X9, X2, [X8 + 0x1B8]
	0x01DE8180 BLR X9
	0x01DE8184 LDR X20, [X19 + 0x1C0]
	0x01DE8188 MOV X0, X19
	0x01DE818C BL 0x1DE7A64
	0x01DE8190 CMP W0, 0x3
	0x01DE8194 B.EQ 0x1DE81A8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 4
	004 Move X19, X0
	005 Call BomberController.set_phase, X0, X1
	006 Move S0, W31
	007 Move X0, X19
	008 Move X1, X31
	009 Call MobController.set__timerToSearching, X0, V0
	010 Move X9, [X19+192]
	011 Compare X9, 0
	012 JumpIfEqual {48}
	013 Move X8, [X9+56]
	014 Compare X8, 0
	015 JumpIfEqual {48}
	016 Move W10, [X8+24]
	017 Compare W10, 0
	018 JumpIfEqual {49}
	019 Move X10, [X9+88]
	020 Compare X10, 0
	021 JumpIfEqual {48}
	022 Move W11, [X10+24]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X9, [X9+96]
	025 Compare X9, 0
	026 JumpIfEqual {48}
	027 Move W11, [X9+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X11, [X19]
	030 Move V0, [X8+32]
	031 Move V1, [X10+36]
	032 Move V2, [X9+36]
	033 Move X8, [X11+712]
	034 Move X2, [X11+720]
	035 Move X0, X19
	036 Move W1, W31
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X0, X19
	039 Move X1, X31
	040 Call MobController.get__targetPosition, X0
	041 Move X8, [X19]
	042 Move X0, X19
	043 Move X2, [X8+888]
	044 Move X1, [X8+896]
	045 Move X30, [X31+16]
	046 Move X19, [X31+24]
	047 CallNoReturn X2
	048 Call 0x1C17F20
	049 Call 0x1C17F28

Method: System.Void UpdateSearching()

Disassembly:
	0x01DE7ACC CBZ X8, 0x1DE7ADC
	0x01DE7AD0 STR W1, [X8 + 0x3C]
	0x01DE7AD4 LDP X30, X19, [X31], #0x10
	0x01DE7AD8 RET
	0x01DE7ADC ADRP X0, 0x230C000
	0x01DE7AE0 LDR X0, [X0 + 0x5B0]
	0x01DE7AE4 BL 0x1C16D08
	0x01DE7AE8 BL 0x1C16F10
	0x01DE7AEC MOV X19, X0
	0x01DE7AF0 ADRP X0, 0x2311000
	0x01DE7AF4 LDR X0, [X0 + 0xDE0]
	0x01DE7AF8 BL 0x1C16D08
	0x01DE7AFC MOV X1, X0
	0x01DE7B00 MOV X0, X19
	0x01DE7B04 MOV X2, X31
	0x01DE7B08 BL 0x337DF1C
	0x01DE7B0C ADRP X0, 0x2311000
	0x01DE7B10 LDR X0, [X0 + 0xDF0]
	0x01DE7B14 BL 0x1C16D08
	0x01DE7B18 MOV X1, X0
	0x01DE7B1C MOV X0, X19
	0x01DE7B20 BL 0x1C16DEC
	0x01DE7B24 STP X30, X19, [X31 - 0x10]!
	0x01DE7B28 LDR X8, [X0 + 0x50]
	0x01DE7B2C CBZ X8, 0x1DE7B3C
	0x01DE7B30 LDR W0, [X8 + 0x40]
	0x01DE7B34 LDP X30, X19, [X31], #0x10
	0x01DE7B38 RET
	0x01DE7B3C ADRP X0, 0x230C000
	0x01DE7B40 LDR X0, [X0 + 0x5B0]
	0x01DE7B44 BL 0x1C16D08
	0x01DE7B48 BL 0x1C16F10
	0x01DE7B4C MOV X19, X0
	0x01DE7B50 ADRP X0, 0x2311000
	0x01DE7B54 LDR X0, [X0 + 0xDF8]
	0x01DE7B58 BL 0x1C16D08
	0x01DE7B5C MOV X1, X0
	0x01DE7B60 MOV X0, X19
	0x01DE7B64 MOV X2, X31
	0x01DE7B68 BL 0x337DF1C
	0x01DE7B6C ADRP X0, 0x2311000
	0x01DE7B70 LDR X0, [X0 + 0xE00]
	0x01DE7B74 BL 0x1C16D08
	0x01DE7B78 MOV X1, X0
	0x01DE7B7C MOV X0, X19
	0x01DE7B80 BL 0x1C16DEC
	0x01DE7B84 STP X30, X19, [X31 - 0x10]!
	0x01DE7B88 LDR X8, [X0 + 0x50]
	0x01DE7B8C CBZ X8, 0x1DE7B9C
	0x01DE7B90 STR W1, [X8 + 0x40]
	0x01DE7B94 LDP X30, X19, [X31], #0x10
	0x01DE7B98 RET
	0x01DE7B9C ADRP X0, 0x230C000
	0x01DE7BA0 LDR X0, [X0 + 0x5B0]
	0x01DE7BA4 BL 0x1C16D08
	0x01DE7BA8 BL 0x1C16F10
	0x01DE7BAC MOV X19, X0
	0x01DE7BB0 ADRP X0, 0x2311000
	0x01DE7BB4 LDR X0, [X0 + 0xDF8]
	0x01DE7BB8 BL 0x1C16D08
	0x01DE7BBC MOV X1, X0
	0x01DE7BC0 MOV X0, X19
	0x01DE7BC4 MOV X2, X31
	0x01DE7BC8 BL 0x337DF1C
	0x01DE7BCC ADRP X0, 0x2311000
	0x01DE7BD0 LDR X0, [X0 + 0xE08]
	0x01DE7BD4 BL 0x1C16D08
	0x01DE7BD8 MOV X1, X0
	0x01DE7BDC MOV X0, X19
	0x01DE7BE0 BL 0x1C16DEC
	0x01DE7BE4 STP X30, X19, [X31 - 0x10]!
	0x01DE7BE8 LDR X8, [X0 + 0x50]
	0x01DE7BEC CBZ X8, 0x1DE7C00
	0x01DE7BF0 LDP S0, S1, [X8 + 0x44]
	0x01DE7BF4 LDR V2, [X8 + 0x4C]
	0x01DE7BF8 LDP X30, X19, [X31], #0x10
	0x01DE7BFC RET
	0x01DE7C00 ADRP X0, 0x230C000
	0x01DE7C04 LDR X0, [X0 + 0x5B0]
	0x01DE7C08 BL 0x1C16D08
	0x01DE7C0C BL 0x1C16F10
	0x01DE7C10 MOV X19, X0
	0x01DE7C14 ADRP X0, 0x2311000
	0x01DE7C18 LDR X0, [X0 + 0xE10]
	0x01DE7C1C BL 0x1C16D08
	0x01DE7C20 MOV X1, X0
	0x01DE7C24 MOV X0, X19
	0x01DE7C28 MOV X2, X31
	0x01DE7C2C BL 0x337DF1C
	0x01DE7C30 ADRP X0, 0x2311000
	0x01DE7C34 LDR X0, [X0 + 0xE18]
	0x01DE7C38 BL 0x1C16D08
	0x01DE7C3C MOV X1, X0
	0x01DE7C40 MOV X0, X19
	0x01DE7C44 BL 0x1C16DEC
	0x01DE7C48 STP X30, X19, [X31 - 0x10]!
	0x01DE7C4C LDR X8, [X0 + 0x50]
	0x01DE7C50 CBZ X8, 0x1DE7C64
	0x01DE7C54 STP S0, S1, [X8 + 0x44]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25F2000
	006 Move W8, [X20+3242]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x2312000
	013 Move X0, [X0+3248]
	014 Call 0x1C17CF4
	015 Move X0, 0x2312000
	016 Move X0, [X0+3184]
	017 Call 0x1C17CF4
	018 Move X0, 0x2312000
	019 Move X0, [X0+3136]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3242], W8
	023 Move X0, X19
	024 Move X1, X31
	025 Call MobController.get__timerToSearching, X0
	026 Move X0, X19
	027 Move X1, X31
	028 Move V8, V0
	029 Call MobController.get_deltaTime, X0
	030 Add S0, S8, S0
	031 Move X0, X19
	032 Move X1, X31
	033 Call MobController.set__timerToSearching, X0, V0
	034 Move X0, X19
	035 Move X1, X31
	036 Call MobController.get__timerToSearching, X0
	037 Move X8, [X19+192]
	038 Compare X8, 0
	039 JumpIfEqual {115}
	040 Move V1, [X8+108]
	041 NotImplemented "Instruction FCMP not yet implemented."
	042 Move X8, 0x2312000
	043 Move X8, [X8+3136]
	044 Add X20, X19, 376
	045 Move X0, [X8]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X19
	051 Move X1, X20
	052 Move X2, X31
	053 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {106}
	058 Move X20, [X20]
	059 Compare X20, 0
	060 JumpIfEqual {115}
	061 Move W1, [X20+24]
	062 Move W0, W31
	063 Move X2, X31
	064 Call Random.Range, X0, X1
	065 Move X8, 0x2312000
	066 Move X8, [X8+3184]
	067 Move W1, W0
	068 Move X0, X20
	069 Move X2, [X8]
	070 Call List`1<Object>.get_Item, X0, X1
	071 Move X8, [X19]
	072 Move X1, X0
	073 Move X0, X19
	074 Move X9, [X8+952]
	075 Move X2, [X8+960]
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Move X0, [X19+352]
	078 Compare X0, 0
	079 JumpIfEqual {115}
	080 Move X1, X31
	081 Call Component.get_transform, X0
	082 Compare X0, 0
	083 JumpIfEqual {115}
	084 Move X1, X31
	085 Call Transform.get_position, X0
	086 Move X0, X19
	087 Move X1, X31
	088 Call MobController.set__targetPosition, X0, X1
	089 Move X0, X19
	090 Move X1, X31
	091 Call MobController.get__targetPosition, X0
	092 Move X0, X19
	093 Move X20, [X31+16]
	094 Move X19, [X31+24]
	095 Move X30, [X31+8]
	096 Move V8, [X31+32]
	097 Call BomberController.SetChasing, X0, X1
	098 Return 
	099 Move X0, X19
	100 Move X20, [X31+16]
	101 Move X19, [X31+24]
	102 Move X30, [X31+8]
	103 Move V8, [X31+32]
	104 Call BomberController.SetRoaming, X0
	105 Return 
	106 Move X8, [X19]
	107 Move X0, X19
	108 Move X20, [X31+16]
	109 Move X19, [X31+24]
	110 Move X30, [X31+8]
	111 Move X2, [X8+904]
	112 Move X1, [X8+912]
	113 Move V8, [X31+32]
	114 CallNoReturn X2
	115 Call 0x1C17F20

Method: System.Void Explode()

Disassembly:
	0x01DE8198 MOV X0, X19
	0x01DE819C BL 0x1DE7A64
	0x01DE81A0 CMP W0, 0x5
	0x01DE81A4 B.NE 0x1DE81B0
	0x01DE81A8 MOVZ W21, 0x1
	0x01DE81AC B 0x1DE81C0
	0x01DE81B0 MOV X0, X19
	0x01DE81B4 BL 0x1DE7A64
	0x01DE81B8 CMP W0, 0x4
	0x01DE81BC CSET W21, EQ
	0x01DE81C0 MOV X0, X19
	0x01DE81C4 BL 0x1DE7A64
	0x01DE81C8 CBZ X20, 0x1DE81F4
	0x01DE81CC ADRP X8, 0xFFFFFFFFFED01000
	0x01DE81D0 LDR V0, [X8 + 0xF24]
	0x01DE81D4 CMP W0, 0x3
	0x01DE81D8 MOV X0, X20
	0x01DE81DC LDP X20, X19, [X31 + 0x10]
	0x01DE81E0 FMOV S1, 1
	0x01DE81E4 FCSEL S0, S1, S0, EQ
	0x01DE81E8 MOV W1, W21
	0x01DE81EC LDP X30, X21, [X31], #0x20
	0x01DE81F0 B 0x1DE8218
	0x01DE81F4 BL 0x1C16F20
	0x01DE81F8 STR X30, [X31 - 0x10]!
	0x01DE81FC LDR X0, [X0 + 0xB8]
	0x01DE8200 CBZ X0, 0x1DE8214
	0x01DE8204 AND W1, W1, 0x1
	0x01DE8208 MOV X2, X31
	0x01DE820C LDR X30, [X31], #0x10
	0x01DE8210 B 0x3C13034
	0x01DE8214 BL 0x1C16F20
	0x01DE8218 STR D8, [X31 - 0x20]!
	0x01DE821C STR X30, [X31 + 0x8]
	0x01DE8220 STP X20, X19, [X31 + 0x10]
	0x01DE8224 MOV X19, X0
	0x01DE8228 LDR X0, [X0 + 0xB0]
	0x01DE822C CBZ X0, 0x1DE8290
	0x01DE8230 MOV W20, W1
	0x01DE8234 MOV X1, X31
	0x01DE8238 MOV V8.16B, V0.16B
	0x01DE823C BL 0x3BFCC80
	0x01DE8240 TBZ X20, 0x0, 0x1DE825C
	0x01DE8244 TBNZ X0, 0x0, 0x1DE8270
	0x01DE8248 LDR X0, [X19 + 0xB0]
	0x01DE824C CBZ X0, 0x1DE8290
	0x01DE8250 MOV X1, X31
	0x01DE8254 BL 0x3BFCAC0
	0x01DE8258 B 0x1DE8270
	0x01DE825C TBZ X0, 0x0, 0x1DE8270
	0x01DE8260 LDR X0, [X19 + 0xB0]
	0x01DE8264 CBZ X0, 0x1DE8290
	0x01DE8268 MOV X1, X31
	0x01DE826C BL 0x3BFCC04
	0x01DE8270 LDR X0, [X19 + 0xB0]
	0x01DE8274 CBZ X0, 0x1DE8290
	0x01DE8278 LDP X20, X19, [X31 + 0x10]
	0x01DE827C LDR X30, [X31 + 0x8]
	0x01DE8280 MOV V0.16B, V8.16B
	0x01DE8284 MOV X1, X31
	0x01DE8288 LDR V8, [X31], #0x20
	0x01DE828C B 0x3BFC8DC
	0x01DE8290 BL 0x1C16F20
	0x01DE8294 STR X30, [X31 - 0x20]!
	0x01DE8298 STP X20, X19, [X31 + 0x10]
	0x01DE829C STR X31, [X31 + 0x8]
	0x01DE82A0 LDR X20, [X0 + 0x38]
	0x01DE82A4 MOV X19, X0
	0x01DE82A8 BL 0x1DE7B24
	0x01DE82AC CBZ X20, 0x1DE82E8
	0x01DE82B0 AND X1, X0, 0x0
	0x01DE82B4 ADD X2, X31, 0x8
	0x01DE82B8 MOV X0, X20
	0x01DE82BC MOV X3, X31
	0x01DE82C0 BL 0x1EA323C
	0x01DE82C4 TBZ X0, 0x0, 0x1DE82DC
	0x01DE82C8 LDR X0, [X31 + 0x8]
	0x01DE82CC CBZ X0, 0x1DE82E8
	0x01DE82D0 MOV X1, X31
	0x01DE82D4 BL 0x3C32E90
	0x01DE82D8 STR X0, [X19 + 0x1E8]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+80], X30
	003 Move [X31+88], X23
	004 Move [X31+96], X22
	005 Move [X31+104], X21
	006 Move [X31+112], X20
	007 Move [X31+120], X19
	008 Move X20, 0x25F1000
	009 Move W8, [X20+3243]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x230F000
	016 Move X0, [X0+3848]
	017 Call 0x1C17CF4
	018 Move X0, 0x230F000
	019 Move X0, [X0+2904]
	020 Call 0x1C17CF4
	021 Move X0, 0x230F000
	022 Move X0, [X0+2912]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3243], W8
	026 Move X0, [X19+208]
	027 Compare X0, 0
	028 JumpIfEqual {98}
	029 Move X23, 0x230F000
	030 Move X22, 0x230F000
	031 Move X20, [X19+56]
	032 Move X21, [X19+440]
	033 Move X23, [X23+2904]
	034 Move X22, [X22+2912]
	035 Move X1, X31
	036 Call Transform.get_position, X0
	037 Move X1, [X23]
	038 Add X0, X31, 32
	039 Move [X31+32], X31
	040 Move [X31+40], X31
	041 Call Nullable`1<Vector3>..ctor, X0, X1
	042 Move X23, 0x25F1000
	043 Move W8, [X23+1939]
	044 Compare W8, 0
	045 JumpIfNotEqual {51}
	046 Move X0, 0x230D000
	047 Move X0, [X0+1448]
	048 Call 0x1C17CF4
	049 Move W8, 1
	050 Move [X23+1939], W8
	051 Move X8, 0x230D000
	052 Move X8, [X8+1448]
	053 Move X1, [X22]
	054 Add X0, X31, 8
	055 Move X8, [X8]
	056 Move X8, [X8+184]
	057 Move S0, [X8]
	058 Move S1, [X8+4]
	059 Move S2, [X8+8]
	060 Move S3, [X8+12]
	061 Move [X31+8], X31
	062 Move [X31+16], X31
	063 Move [X31+24], W31
	064 Call Nullable`1<Quaternion>..ctor, X0, X1
	065 Compare X20, 0
	066 JumpIfEqual {98}
	067 Move X8, 0x230F000
	068 Move X8, [X8+3848]
	069 Move X2, [X31+32]
	070 Move X3, [X31+40]
	071 NotImplemented "Instruction LDUR not yet implemented."
	072 Move W9, [X31+24]
	073 Move X8, [X8]
	074 Add X4, X31, 48
	075 Move X0, X20
	076 Move X1, X21
	077 Move X5, X31
	078 Move X6, X31
	079 Move W7, W31
	080 Move [X31+3], V0
	081 Move [X31+64], W9
	082 Move [X31], X8
	083 Call 0x222C8DC, X0, X1, X2, X3, X4, X5, X6
	084 Move X8, [X19]
	085 Move W1, 1
	086 Move X0, X19
	087 Move X9, [X8+792]
	088 Move X2, [X8+800]
	089 NotImplemented "Instruction BLR not yet implemented."
	090 Move X20, [X31+112]
	091 Move X19, [X31+120]
	092 Move X22, [X31+96]
	093 Move X21, [X31+104]
	094 Move X30, [X31+80]
	095 Move X23, [X31+88]
	096 Add X31, X31, 128
	097 Return 
	098 Call 0x1C17F20

Method: System.Void HandleDie()

Disassembly:
	0x01DE82DC LDP X20, X19, [X31 + 0x10]
	0x01DE82E0 LDR X30, [X31], #0x20
	0x01DE82E4 RET
	0x01DE82E8 BL 0x1C16F20
	0x01DE82EC STP X30, X21, [X31 - 0x20]!
	0x01DE82F0 STP X20, X19, [X31 + 0x10]
	0x01DE82F4 ADRP X20, 0x25F0000
	0x01DE82F8 ADRP X21, 0x230E000
	0x01DE82FC LDRB W8, [X20 + 0xCB3]
	0x01DE8300 LDR X21, [X21 + 0xA78]
	0x01DE8304 MOV X19, X0
	0x01DE8308 TBNZ X8, 0x0, 0x1DE832C
	0x01DE830C ADRP X0, 0x230E000
	0x01DE8310 LDR X0, [X0 + 0xA78]
	0x01DE8314 BL 0x1C16CF4
	0x01DE8318 ADRP X0, 0x230B000
	0x01DE831C LDR X0, [X0 + 0x598]
	0x01DE8320 BL 0x1C16CF4
	0x01DE8324 MOVZ W8, 0x1
	0x01DE8328 STRB W8, [X20 + 0xCB3]
	0x01DE832C LDR X0, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleDie, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {30}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {27}
	015 Move W1, 5
	016 Move X0, X19
	017 Call BomberController.set_phase, X0, X1
	018 Move X0, [X19+232]
	019 Compare X0, 0
	020 JumpIfEqual {30}
	021 Move W1, 1
	022 Move X2, X31
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Call NavMeshAgent.set_isStopped, X0, X1
	026 Return 
	027 Move X30, [X31+16]
	028 Move X19, [X31+24]
	029 Return 
	030 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01DE8330 LDR W8, [X0 + 0xE0]
	0x01DE8334 CBNZ W8, 0x1DE833C
	0x01DE8338 BL 0x1C16DFC
	0x01DE833C CBZ X19, 0x1DE83B0
	0x01DE8340 LDR W8, [X19 + 0x30]
	0x01DE8344 ADRP X21, 0x230B000
	0x01DE8348 LDR X21, [X21 + 0x598]
	0x01DE834C LDR X20, [X19 + 0x1D8]
	0x01DE8350 ORR W8, W8, 0x8
	0x01DE8354 STR W8, [X19 + 0x30]
	0x01DE8358 LDR X0, [X21]
	0x01DE835C LDR W8, [X0 + 0xE0]
	0x01DE8360 CBNZ W8, 0x1DE8368
	0x01DE8364 BL 0x1C16DFC
	0x01DE8368 MOV X0, X20
	0x01DE836C MOV X1, X31
	0x01DE8370 MOV X2, X31
	0x01DE8374 BL 0x3C354F8
	0x01DE8378 TBZ X0, 0x0, 0x1DE83A4
	0x01DE837C LDR X0, [X21]
	0x01DE8380 LDR X19, [X19 + 0x1D8]
	0x01DE8384 LDR W8, [X0 + 0xE0]
	0x01DE8388 CBNZ W8, 0x1DE8390
	0x01DE838C BL 0x1C16DFC
	0x01DE8390 MOV X0, X19
	0x01DE8394 LDP X20, X19, [X31 + 0x10]
	0x01DE8398 MOV X1, X31
	0x01DE839C LDP X30, X21, [X31], #0x20
	0x01DE83A0 B 0x3C394A8
	0x01DE83A4 LDP X20, X19, [X31 + 0x10]
	0x01DE83A8 LDP X30, X21, [X31], #0x20
	0x01DE83AC RET
	0x01DE83B0 BL 0x1C16F20
	0x01DE83B4 STR D14, [X31 - 0x60]!
	0x01DE83B8 STP D13, D12, [X31 + 0x8]
	0x01DE83BC STP D11, D10, [X31 + 0x18]
	0x01DE83C0 STP D9, D8, [X31 + 0x28]
	0x01DE83C4 STR X30, [X31 + 0x38]
	0x01DE83C8 STP X22, X21, [X31 + 0x40]
	0x01DE83CC STP X20, X19, [X31 + 0x50]
	0x01DE83D0 ADRP X21, 0x25F0000
	0x01DE83D4 ADRP X20, 0x230E000
	0x01DE83D8 LDRB W8, [X21 + 0xCB4]
	0x01DE83DC LDR X20, [X20 + 0x418]
	0x01DE83E0 MOV X19, X0
	0x01DE83E4 TBNZ X8, 0x0, 0x1DE8414
	0x01DE83E8 ADRP X0, 0x230E000
	0x01DE83EC LDR X0, [X0 + 0x418]
	0x01DE83F0 BL 0x1C16CF4
	0x01DE83F4 ADRP X0, 0x2310000
	0x01DE83F8 LDR X0, [X0 + 0xE40]
	0x01DE83FC BL 0x1C16CF4
	0x01DE8400 ADRP X0, 0x230B000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25F1000
	006 Move X20, 0x2311000
	007 Move W8, [X21+3244]
	008 Move X20, [X20+3008]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2311000
	015 Move X0, [X0+3008]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3244], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call MobController.OnDrawGizmos, X0
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move X0, X31
	030 Move S0, [X8+160]
	031 Move S1, [X8+164]
	032 Move S2, [X8+168]
	033 Move S3, [X8+172]
	034 Call Gizmos.set_color, X0
	035 Move X0, [X19+208]
	036 Compare X0, 0
	037 JumpIfEqual {70}
	038 Move X1, X31
	039 Call Transform.get_position, X0
	040 Move X8, [X19+192]
	041 Compare X8, 0
	042 JumpIfEqual {70}
	043 Move V3, [X8+72]
	044 Move X0, X31
	045 Call Gizmos.DrawWireSphere, X0, V0
	046 Move X8, [X20]
	047 Move X0, X31
	048 Move X8, [X8+184]
	049 Move S0, [X8+176]
	050 Move S1, [X8+180]
	051 Move S2, [X8+184]
	052 Move S3, [X8+188]
	053 Call Gizmos.set_color, X0
	054 Move X0, [X19+208]
	055 Compare X0, 0
	056 JumpIfEqual {70}
	057 Move X1, X31
	058 Call Transform.get_position, X0
	059 Move X8, [X19+192]
	060 Compare X8, 0
	061 JumpIfEqual {70}
	062 Move V3, [X8+76]
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X0, X31
	066 Move X30, [X31+32]
	067 Move X21, [X31+40]
	068 Call Gizmos.DrawWireSphere, X0, V0
	069 Return 
	070 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DE8404 LDR X0, [X0 + 0x598]
	0x01DE8408 BL 0x1C16CF4
	0x01DE840C MOVZ W8, 0x1
	0x01DE8410 STRB W8, [X21 + 0xCB4]
	0x01DE8414 MOV X0, X19
	0x01DE8418 BL 0x1DE8598
	0x01DE841C LDR X1, [X20]
	0x01DE8420 MOV X0, X19
	0x01DE8424 BL 0x21A453C
	0x01DE8428 LDR X8, [X19 + 0x40]
	0x01DE842C STR X0, [X19 + 0x1F0]
	0x01DE8430 CBZ X8, 0x1DE8594
	0x01DE8434 MOV X0, X8
	0x01DE8438 MOV X1, X31
	0x01DE843C BL 0x1E93668
	0x01DE8440 TBZ X0, 0x0, 0x1DE84A0
	0x01DE8444 LDR X8, [X19 + 0xC0]
	0x01DE8448 CBZ X8, 0x1DE8594
	0x01DE844C LDR V0, [X8 + 0x28]
	0x01DE8450 MOV X0, X19
	0x01DE8454 BL 0x1DE8788
	0x01DE8458 MOV X0, X31
	0x01DE845C BL 0x1E91B08
	0x01DE8460 AND X1, X0, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25F1000
	006 Move X20, 0x2310000
	007 Move W8, [X21+3245]
	008 Move X20, [X20+2144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2310000
	015 Move X0, [X0+2144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3245], W8
	019 Move V0, 0
	020 Move [X19+448], D0
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X1, X31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call MobController..ctor, X0
	033 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DE8464 MOV X0, X19
	0x01DE8468 BL 0x1DE7D0C
	0x01DE846C MOV X0, X19
	0x01DE8470 MOV X1, X31
	0x01DE8474 BL 0x3C32E90
	0x01DE8478 CBZ X0, 0x1DE8594
	0x01DE847C MOV X1, X31
	0x01DE8480 BL 0x3C3F58C
	0x01DE8484 MOV X0, X19
	0x01DE8488 BL 0x1DE7C48
	0x01DE848C MOVZ W1, 0x1
	0x01DE8490 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 And W1, W1, 1
	004 Move X2, X31
	005 Move X19, X0
	006 Call MobController.CopyBackingFieldsToState, X0, X1
	007 Move W1, [X19+420]
	008 Move X0, X19
	009 Call BomberController.set_phase, X0, X1
	010 Move V0, [X19+424]
	011 Move X0, X19
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call BomberController.set_timerAnticipating, X0, V0
	015 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DE8494 BL 0x1DE87E8
	0x01DE8498 MOV X0, X19
	0x01DE849C BL 0x1DE8934
	0x01DE84A0 ADRP X21, 0x230B000
	0x01DE84A4 LDR X20, [X19 + 0x1D0]
	0x01DE84A8 LDR X21, [X21 + 0x598]
	0x01DE84AC MOV X0, X19
	0x01DE84B0 BL 0x1DE7BE4
	0x01DE84B4 ADRP X22, 0x25F0000
	0x01DE84B8 LDRB W8, [X22 + 0x793]
	0x01DE84BC MOV V8.16B, V0.16B
	0x01DE84C0 MOV V9.16B, V1.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.CopyStateToBackingFields, X0
	006 Move X0, X19
	007 Call BomberController.get_phase, X0
	008 Move [X19+420], W0
	009 Move X0, X19
	010 Call BomberController.get_timerAnticipating, X0
	011 Move [X19+424], S0
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 

