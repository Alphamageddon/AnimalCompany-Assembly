Type: AnimalCompany.BomberController

Method: AnimalCompany.BomberController/Phase get_phase()

Disassembly:
	0x01CDED78 BL 0x1CDDE54
	0x01CDED7C STR S0, [X19 + 0x188]
	0x01CDED80 LDP X30, X19, [X31], #0x10
	0x01CDED84 RET
	0x01CDED88 STR X30, [X31 - 0x20]!
	0x01CDED8C STP X20, X19, [X31 + 0x10]
	0x01CDED90 ADRP X20, 0x2545000
	0x01CDED94 LDRB W8, [X20 + 0x632]
	0x01CDED98 MOV X19, X0
	0x01CDED9C TBNZ X8, 0x0, 0x1CDEDB4
	0x01CDEDA0 ADRP X0, 0x2271000
	0x01CDEDA4 LDR X0, [X0 + 0xE78]
	0x01CDEDA8 BL 0x1B6E7F0
	0x01CDEDAC MOVZ W8, 0x1
	0x01CDEDB0 STRB W8, [X20 + 0x632]
	0x01CDEDB4 MOV X0, X19
	0x01CDEDB8 MOV X1, X31
	0x01CDEDBC BL 0x1CE9DB8
	0x01CDEDC0 LDRB W8, [X19 + 0x90]
	0x01CDEDC4 CBZ W8, 0x1CDEE74
	0x01CDEDC8 LDR X0, [X19 + 0x88]
	0x01CDEDCC CBZ X0, 0x1CDEE80
	0x01CDEDD0 MOV X1, X31
	0x01CDEDD4 BL 0x3A7BC88

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+60]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2270000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2272000
	016 Move X0, [X0+3656]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2272000
	023 Move X0, [X0+3664]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_phase(AnimalCompany.BomberController/Phase value)

Disassembly:
	0x01CDEDD8 CBZ X0, 0x1CDEE80
	0x01CDEDDC LDR W9, [X0 + 0x18]
	0x01CDEDE0 MOV X8, X0
	0x01CDEDE4 CBZ W9, 0x1CDEE84
	0x01CDEDE8 ADRP X20, 0x2271000
	0x01CDEDEC LDR X20, [X20 + 0xE78]
	0x01CDEDF0 LDR X19, [X8 + 0x20]
	0x01CDEDF4 LDR X0, [X20]
	0x01CDEDF8 LDR W9, [X0 + 0xE0]
	0x01CDEDFC CBNZ W9, 0x1CDEE08
	0x01CDEE00 BL 0x1B6E8F8
	0x01CDEE04 LDR X0, [X20]
	0x01CDEE08 LDR X8, [X0 + 0xB8]
	0x01CDEE0C MOV X0, X31
	0x01CDEE10 LDR W20, [X8 + 0x4]
	0x01CDEE14 BL 0x3AA47CC
	0x01CDEE18 CBZ X19, 0x1CDEE80
	0x01CDEE1C FMOV S1, 8
	0x01CDEE20 FMOV S2, 0.5
	0x01CDEE24 FMUL S0, S0, S1
	0x01CDEE28 FMUL S2, S0, S2
	0x01CDEE2C FRINTM S2, S2
	0x01CDEE30 FADD S2, S2, S2
	0x01CDEE34 FMOV S1, 2

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+60], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2270000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2272000
	016 Move X0, [X0+3656]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2272000
	023 Move X0, [X0+3672]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Single get_EXPLOSION_DELAY()

Disassembly:
	0x01CDEE38 FSUB S0, S0, S2
	0x01CDEE3C FMOV S2, -1
	0x01CDEE40 FMIN S1, S0, S1
	0x01CDEE44 FCMP S0, 0x0
	0x01CDEE48 FADD S0, S1, S2
	0x01CDEE4C MOV X0, X19
	0x01CDEE50 MOV W1, W20

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+184]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move V0, [X8+40]
	006 Move X30, [X31+16]
	007 Return V0
	008 Call 0x1B6FA1C

Method: System.Single get_timerAnticipating()

Disassembly:
	0x01CDEE54 LDP X20, X19, [X31 + 0x10]
	0x01CDEE58 FCSEL S0, S0, S2, PL
	0x01CDEE5C FABS S0, S0
	0x01CDEE60 FMOV S1, 1
	0x01CDEE64 FSUB S0, S1, S0
	0x01CDEE68 MOV X2, X31
	0x01CDEE6C LDR X30, [X31], #0x20
	0x01CDEE70 B 0x3A7E584
	0x01CDEE74 LDP X20, X19, [X31 + 0x10]
	0x01CDEE78 LDR X30, [X31], #0x20
	0x01CDEE7C RET
	0x01CDEE80 BL 0x1B6EA1C
	0x01CDEE84 BL 0x1B6EA24
	0x01CDEE88 STP X30, X21, [X31 - 0x20]!
	0x01CDEE8C STP X20, X19, [X31 + 0x10]
	0x01CDEE90 ADRP X20, 0x2545000
	0x01CDEE94 ADRP X21, 0x2271000
	0x01CDEE98 LDRB W8, [X20 + 0x633]
	0x01CDEE9C LDR X21, [X21 + 0xE08]
	0x01CDEEA0 MOV X19, X0
	0x01CDEEA4 TBNZ X8, 0x0, 0x1CDEEBC
	0x01CDEEA8 ADRP X0, 0x2271000
	0x01CDEEAC LDR X0, [X0 + 0xE08]
	0x01CDEEB0 BL 0x1B6E7F0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+64]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2270000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2272000
	016 Move X0, [X0+3680]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2272000
	023 Move X0, [X0+3688]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_timerAnticipating(System.Single value)

Disassembly:
	0x01CDEEB4 MOVZ W8, 0x1
	0x01CDEEB8 STRB W8, [X20 + 0x633]
	0x01CDEEBC LDR X0, [X21]
	0x01CDEEC0 LDR W8, [X0 + 0xE0]
	0x01CDEEC4 CBNZ W8, 0x1CDEECC
	0x01CDEEC8 BL 0x1B6E8F8
	0x01CDEECC MOV X0, X19
	0x01CDEED0 LDP X20, X19, [X31 + 0x10]
	0x01CDEED4 MOV X1, X31
	0x01CDEED8 LDP X30, X21, [X31], #0x20
	0x01CDEEDC B 0x1CEA7F8
	0x01CDEEE0 STR X30, [X31 - 0x30]!
	0x01CDEEE4 STP X22, X21, [X31 + 0x10]
	0x01CDEEE8 STP X20, X19, [X31 + 0x20]
	0x01CDEEEC ADRP X21, 0x2545000
	0x01CDEEF0 ADRP X22, 0x2270000
	0x01CDEEF4 ADRP X19, 0x2271000
	0x01CDEEF8 ADRP X20, 0x2271000
	0x01CDEEFC LDRB W8, [X21 + 0x634]
	0x01CDEF00 LDR X22, [X22 + 0x340]
	0x01CDEF04 LDR X19, [X19 + 0xE78]
	0x01CDEF08 LDR X20, [X20 + 0xE88]
	0x01CDEF0C TBNZ X8, 0x0, 0x1CDEF3C
	0x01CDEF10 ADRP X0, 0x2271000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+64], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2270000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x2272000
	016 Move X0, [X0+3680]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2272000
	023 Move X0, [X0+3696]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void HandlePhaseChanged()

Disassembly:
	0x01CDEF14 LDR X0, [X0 + 0xE78]
	0x01CDEF18 BL 0x1B6E7F0
	0x01CDEF1C ADRP X0, 0x2271000
	0x01CDEF20 LDR X0, [X0 + 0xE88]
	0x01CDEF24 BL 0x1B6E7F0
	0x01CDEF28 ADRP X0, 0x2270000
	0x01CDEF2C LDR X0, [X0 + 0x340]
	0x01CDEF30 BL 0x1B6E7F0
	0x01CDEF34 MOVZ W8, 0x1
	0x01CDEF38 STRB W8, [X21 + 0x634]
	0x01CDEF3C LDR X0, [X22]
	0x01CDEF40 MOV X1, X31
	0x01CDEF44 BL 0x3A7AE20
	0x01CDEF48 LDR X8, [X19]
	0x01CDEF4C MOV X1, X31
	0x01CDEF50 LDR X8, [X8 + 0xB8]
	0x01CDEF54 STR W0, [X8]
	0x01CDEF58 LDR X0, [X20]
	0x01CDEF5C BL 0x3A7AE20
	0x01CDEF60 LDR X8, [X19]
	0x01CDEF64 ADRP X9, 0xFFFFFFFFFEDCD000
	0x01CDEF68 LDR V0, [X9 + 0x54]
	0x01CDEF6C LDP X20, X19, [X31 + 0x20]
	0x01CDEF70 LDR X8, [X8 + 0xB8]
	0x01CDEF74 LDP X22, X21, [X31 + 0x10]
	0x01CDEF78 STR W0, [X8 + 0x4]
	0x01CDEF7C STUR V0, [X8 + 0x8]
	0x01CDEF80 LDR X30, [X31], #0x30
	0x01CDEF84 RET
	0x01CDEF88 STP X30, X19, [X31 - 0x10]!
	0x01CDEF8C LDR X8, [X0 + 0x50]
	0x01CDEF90 CBZ X8, 0x1CDEFA0
	0x01CDEF94 LDR W0, [X8 + 0x3C]
	0x01CDEF98 LDP X30, X19, [X31], #0x10
	0x01CDEF9C RET
	0x01CDEFA0 ADRP X0, 0x226F000
	0x01CDEFA4 LDR X0, [X0 + 0x490]
	0x01CDEFA8 BL 0x1B6E804
	0x01CDEFAC BL 0x1B6EA0C
	0x01CDEFB0 MOV X19, X0
	0x01CDEFB4 ADRP X0, 0x2271000
	0x01CDEFB8 LDR X0, [X0 + 0xE90]
	0x01CDEFBC BL 0x1B6E804
	0x01CDEFC0 MOV X1, X0
	0x01CDEFC4 MOV X0, X19
	0x01CDEFC8 MOV X2, X31
	0x01CDEFCC BL 0x31E7550
	0x01CDEFD0 ADRP X0, 0x2271000
	0x01CDEFD4 LDR X0, [X0 + 0xE98]
	0x01CDEFD8 BL 0x1B6E804
	0x01CDEFDC MOV X1, X0
	0x01CDEFE0 MOV X0, X19
	0x01CDEFE4 BL 0x1B6E8E8
	0x01CDEFE8 STP X30, X19, [X31 - 0x10]!
	0x01CDEFEC LDR X8, [X0 + 0x50]
	0x01CDEFF0 CBZ X8, 0x1CDF000
	0x01CDEFF4 STR W1, [X8 + 0x3C]
	0x01CDEFF8 LDP X30, X19, [X31], #0x10
	0x01CDEFFC RET
	0x01CDF000 ADRP X0, 0x226E000
	0x01CDF004 LDR X0, [X0 + 0x490]
	0x01CDF008 BL 0x1B6E804
	0x01CDF00C BL 0x1B6EA0C
	0x01CDF010 MOV X19, X0
	0x01CDF014 ADRP X0, 0x2270000
	0x01CDF018 LDR X0, [X0 + 0xE90]
	0x01CDF01C BL 0x1B6E804
	0x01CDF020 MOV X1, X0
	0x01CDF024 MOV X0, X19
	0x01CDF028 MOV X2, X31
	0x01CDF02C BL 0x31E7550
	0x01CDF030 ADRP X0, 0x2270000
	0x01CDF034 LDR X0, [X0 + 0xEA0]
	0x01CDF038 BL 0x1B6E804
	0x01CDF03C MOV X1, X0
	0x01CDF040 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call BomberController.get_phase, X0
	006 Subtract W8, W0, 1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X9, -18812928
	009 Add X9, X9, 2368
	010 NotImplemented "Instruction ADR not yet implemented."
	011 Move W11, [X9]
	012 Add X10, X10, X11
	013 CallNoReturn X10
	014 Move X9, [X19+184]
	015 Compare X9, 0
	016 JumpIfEqual {89}
	017 Move X8, [X9+56]
	018 Compare X8, 0
	019 JumpIfEqual {89}
	020 Move W10, [X8+24]
	021 Compare W10, 0
	022 JumpIfEqual {90}
	023 Move X9, [X9+48]
	024 Compare X9, 0
	025 JumpIfEqual {89}
	026 Move W10, [X9+24]
	027 Compare W10, 0
	028 JumpIfEqual {90}
	029 Move X0, [X19+192]
	030 Compare X0, 0
	031 JumpIfEqual {89}
	032 Move X10, [X0]
	033 Move V0, [X8+32]
	034 Move V1, [X9+32]
	035 Move X8, [X10+472]
	036 Move X1, [X10+480]
	037 NotImplemented "Instruction FDIV not yet implemented."
	038 NotImplemented "Instruction BLR not yet implemented."
	039 Move X8, [X19+376]
	040 Compare X8, 0
	041 JumpIfEqual {89}
	042 Move W9, 0x3F800000
	043 Move X0, [X19+192]
	044 Compare X0, 0
	045 JumpIfEqual {89}
	046 Move X8, [X0]
	047 Move S0, 1
	048 Move X9, [X8+456]
	049 Move X1, [X8+464]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move X8, [X19+376]
	052 Compare X8, 0
	053 JumpIfEqual {89}
	054 Move W9, 0x3F000000
	055 Move [X8+128], W9
	056 Move X0, [X19+192]
	057 Compare X0, 0
	058 JumpIfEqual {89}
	059 Move X8, [X0]
	060 Move X9, [X8+488]
	061 Move X1, [X8+496]
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Move X8, [X19+184]
	064 Compare X8, 0
	065 JumpIfEqual {89}
	066 Move X20, [X8+192]
	067 Move X0, X19
	068 Move X1, X31
	069 Call Component.get_transform, X0
	070 Compare X0, 0
	071 JumpIfEqual {89}
	072 Move X1, X31
	073 Call Transform.get_position, X0
	074 Move S3, 1
	075 Move X0, X20
	076 Move X1, X31
	077 Call SFXManager.PlaySFX, X0, X1, V0
	078 Move X20, [X19+376]
	079 Move X0, X19
	080 Call BomberController.get_phase, X0
	081 Compare X20, 0
	082 JumpIfEqual {89}
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X0, X20
	085 Move X20, [X31+16]
	086 Move X19, [X31+24]
	087 NotImplemented "Instruction CSET not yet implemented."
	088 Move X30, [X31+32]
	089 Call 0x1B6FA1C
	090 Call 0x1B6FA24

Method: System.Void Setup()

Disassembly:
	0x01CDF134 MOV X19, X0
	0x01CDF138 ADRP X0, 0x2270000
	0x01CDF13C LDR X0, [X0 + 0xEC0]
	0x01CDF140 BL 0x1B6E804
	0x01CDF144 MOV X1, X0
	0x01CDF148 MOV X0, X19
	0x01CDF14C MOV X2, X31
	0x01CDF150 BL 0x31E7550
	0x01CDF154 ADRP X0, 0x2270000
	0x01CDF158 LDR X0, [X0 + 0xEC8]
	0x01CDF15C BL 0x1B6E804
	0x01CDF160 MOV X1, X0
	0x01CDF164 MOV X0, X19
	0x01CDF168 BL 0x1B6E8E8
	0x01CDF16C STP X30, X19, [X31 - 0x10]!
	0x01CDF170 LDR X8, [X0 + 0x50]
	0x01CDF174 CBZ X8, 0x1CDF188
	0x01CDF178 STP S0, S1, [X8 + 0x44]
	0x01CDF17C STR S2, [X8 + 0x4C]
	0x01CDF180 LDP X30, X19, [X31], #0x10
	0x01CDF184 RET
	0x01CDF188 ADRP X0, 0x226E000
	0x01CDF18C LDR X0, [X0 + 0x490]
	0x01CDF190 BL 0x1B6E804
	0x01CDF194 BL 0x1B6EA0C
	0x01CDF198 MOV X19, X0
	0x01CDF19C ADRP X0, 0x2270000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.Setup, X0
	006 Move X0, [X19+200]
	007 Compare X0, 0
	008 JumpIfEqual {36}
	009 Move W1, 1
	010 Move X2, X31
	011 Call NavMeshAgent.set_updatePosition, X0, X1
	012 Move X0, [X19+200]
	013 Compare X0, 0
	014 JumpIfEqual {36}
	015 Move W1, 1
	016 Move X2, X31
	017 Call NavMeshAgent.set_updateRotation, X0, X1
	018 Move X0, [X19+64]
	019 Compare X0, 0
	020 JumpIfEqual {36}
	021 Move X1, X31
	022 Call NetworkObject.get_HasStateAuthority, X0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {31}
	027 Move X0, X19
	028 Call BomberController.Initialize, X0
	029 Move X0, X19
	030 Call BomberController.SetRoaming, X0
	031 Move X0, X19
	032 Move X30, [X31+16]
	033 Move X19, [X31+24]
	034 Call BomberController.HandlePhaseChanged, X0
	035 Return 
	036 Call 0x1B6FA1C

Method: System.Void HandleRevive()

Disassembly:
	0x01CDF270 MOV X2, X31
	0x01CDF274 BL 0x31E7550
	0x01CDF278 ADRP X0, 0x2270000
	0x01CDF27C LDR X0, [X0 + 0xEE8]
	0x01CDF280 BL 0x1B6E804
	0x01CDF284 MOV X1, X0
	0x01CDF288 MOV X0, X19
	0x01CDF28C BL 0x1B6E8E8
	0x01CDF290 STP D13, D12, [X31 - 0x50]!
	0x01CDF294 STP D11, D10, [X31 + 0x10]
	0x01CDF298 STP D9, D8, [X31 + 0x20]
	0x01CDF29C STR X30, [X31 + 0x30]
	0x01CDF2A0 STP X20, X19, [X31 + 0x40]
	0x01CDF2A4 MOV X1, X31
	0x01CDF2A8 MOV X19, X0
	0x01CDF2AC BL 0x3A9B084
	0x01CDF2B0 CBZ X0, 0x1CDF380

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleRevive, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {25}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {22}
	015 Move X0, X19
	016 Call BomberController.Initialize, X0
	017 Move X0, X19
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Call BomberController.SetRoaming, X0
	021 Return 
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return 
	025 Call 0x1B6FA1C

Method: System.Void Initialize()

Disassembly:
	0x01CDF1A0 LDR X0, [X0 + 0xEC0]
	0x01CDF1A4 BL 0x1B6E804
	0x01CDF1A8 MOV X1, X0
	0x01CDF1AC MOV X0, X19
	0x01CDF1B0 MOV X2, X31
	0x01CDF1B4 BL 0x31E7550
	0x01CDF1B8 ADRP X0, 0x2270000
	0x01CDF1BC LDR X0, [X0 + 0xED0]
	0x01CDF1C0 BL 0x1B6E804
	0x01CDF1C4 MOV X1, X0
	0x01CDF1C8 MOV X0, X19
	0x01CDF1CC BL 0x1B6E8E8
	0x01CDF1D0 STP X30, X19, [X31 - 0x10]!
	0x01CDF1D4 LDR X8, [X0 + 0x50]
	0x01CDF1D8 CBZ X8, 0x1CDF1E8
	0x01CDF1DC LDR W0, [X8 + 0x50]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X1, X31
	005 Move X19, X0
	006 Move X9, [X8+824]
	007 Move X2, [X8+832]
	008 NotImplemented "Instruction BLR not yet implemented."
	009 Move S0, W31
	010 Move X0, X19
	011 Move X1, X31
	012 Call MobController.set__timerToChasing, X0, V0
	013 Move S0, W31
	014 Move X0, X19
	015 Move X1, X31
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call MobController.set__timerToSearching, X0, V0
	019 Return 

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01CDF2B4 MOV X1, X31
	0x01CDF2B8 BL 0x3AA7658
	0x01CDF2BC MOV X0, X19
	0x01CDF2C0 MOV X1, X31
	0x01CDF2C4 MOV V8.16B, V0.16B
	0x01CDF2C8 MOV V9.16B, V1.16B
	0x01CDF2CC MOV V10.16B, V2.16B
	0x01CDF2D0 BL 0x3A9B084
	0x01CDF2D4 CBZ X0, 0x1CDF380
	0x01CDF2D8 MOV X1, X31
	0x01CDF2DC BL 0x3AA7AD0
	0x01CDF2E0 ADRP X20, 0x2544000
	0x01CDF2E4 LDRB W8, [X20 + 0x442]
	0x01CDF2E8 MOV V11.16B, V0.16B
	0x01CDF2EC MOV V12.16B, V1.16B
	0x01CDF2F0 MOV V13.16B, V2.16B
	0x01CDF2F4 CBNZ W8, 0x1CDF30C
	0x01CDF2F8 ADRP X0, 0x226E000
	0x01CDF2FC LDR X0, [X0 + 0x480]
	0x01CDF300 BL 0x1B6E7F0
	0x01CDF304 MOVZ W8, 0x1
	0x01CDF308 STRB W8, [X20 + 0x442]
	0x01CDF30C LDR X8, [X19 + 0xB8]
	0x01CDF310 CBZ X8, 0x1CDF380
	0x01CDF314 ADRP X9, 0x226E000
	0x01CDF318 LDR X9, [X9 + 0x480]
	0x01CDF31C LDR V3, [X8 + 0x4C]
	0x01CDF320 ADRP X8, 0xFFFFFFFFFEDCA000
	0x01CDF324 LDR V4, [X8 + 0xA54]
	0x01CDF328 LDR X9, [X9]
	0x01CDF32C LDP X20, X19, [X31 + 0x40]
	0x01CDF330 LDR X30, [X31 + 0x30]
	0x01CDF334 LDR X9, [X9 + 0xB8]
	0x01CDF338 LDP S1, S0, [X9 + 0x1C]
	0x01CDF33C LDR V2, [X9 + 0x18]
	0x01CDF340 FADD S0, S13, S0
	0x01CDF344 FADD S1, S12, S1
	0x01CDF348 FADD S2, S11, S2
	0x01CDF34C FMUL S2, S2, S3
	0x01CDF350 FMUL S1, S1, S3
	0x01CDF354 FMUL S0, S0, S3
	0x01CDF358 FMUL S2, S2, S4
	0x01CDF35C FMUL S1, S1, S4
	0x01CDF360 FMUL S3, S0, S4
	0x01CDF364 FADD S0, S8, S2
	0x01CDF368 FADD S1, S9, S1
	0x01CDF36C FADD S2, S10, S3
	0x01CDF370 LDP D9, D8, [X31 + 0x20]
	0x01CDF374 LDP D11, D10, [X31 + 0x10]
	0x01CDF378 LDP D13, D12, [X31], #0x50
	0x01CDF37C RET
	0x01CDF380 BL 0x1B6EA1C
	0x01CDF384 STR D10, [X31 - 0x40]!
	0x01CDF388 STP D9, D8, [X31 + 0x10]
	0x01CDF38C STP X30, X21, [X31 + 0x20]
	0x01CDF390 STP X20, X19, [X31 + 0x30]
	0x01CDF394 ADRP X21, 0x2544000
	0x01CDF398 ADRP X20, 0x226E000
	0x01CDF39C LDRB W8, [X21 + 0x635]
	0x01CDF3A0 LDR X20, [X20 + 0x478]
	0x01CDF3A4 MOV X19, X0
	0x01CDF3A8 TBNZ X8, 0x0, 0x1CDF3C0
	0x01CDF3AC ADRP X0, 0x226E000
	0x01CDF3B0 LDR X0, [X0 + 0x478]
	0x01CDF3B4 BL 0x1B6E7F0
	0x01CDF3B8 MOVZ W8, 0x1
	0x01CDF3BC STRB W8, [X21 + 0x635]
	0x01CDF3C0 LDR X0, [X20]
	0x01CDF3C4 LDR X20, [X19 + 0x1B8]
	0x01CDF3C8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x2545000
	006 Move W8, [X20+1578]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2271000
	013 Move X0, [X0+3712]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1578], W8
	017 Move X0, X19
	018 Move X1, X31
	019 Call MobController.FixedUpdateNetwork, X0
	020 Move X0, X19
	021 Move X1, X31
	022 Call MobController.get__updateValid, X0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {77}
	027 Move X0, X19
	028 Call BomberController.get_phase, X0
	029 Subtract W8, W0, 1
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, -18817024
	032 Add X9, X9, 2373
	033 NotImplemented "Instruction ADR not yet implemented."
	034 Move W11, [X9]
	035 Add X10, X10, X11
	036 CallNoReturn X10
	037 Move X8, [X19]
	038 Move X9, [X8+808]
	039 Move X1, [X8+816]
	040 Move X8, [X19]
	041 Move X9, [X8+840]
	042 Move X1, [X8+848]
	043 Move X0, X19
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X0, X19
	046 Call BomberController.UpdateAnticipating, X0
	047 Move X0, X19
	048 Call BomberController.UpdateSearching, X0
	049 Call GameManager.get_isDebug
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {77}
	054 Move X20, [X19+360]
	055 Compare X20, 0
	056 JumpIfEqual {77}
	057 Move X0, X19
	058 Call BomberController.get_phase, X0
	059 Move X8, 0x2271000
	060 Move X8, [X8+3712]
	061 Move TEMP, 0
	062 Not TEMP
	063 Move X9, TEMP
	064 Move [X31+24], W0
	065 Add X0, X31, 8
	066 Move X8, [X8]
	067 Move X1, X31
	068 Move [X31+8], X8
	069 Move [X31+16], X9
	070 Call Enum.ToString, X0
	071 Move X8, [X20+64]
	072 Move X9, [X20+24]
	073 Move X2, [X20+40]
	074 Move X1, X0
	075 Move X0, X8
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Move X20, [X31+48]
	078 Move X19, [X31+56]
	079 Move X30, [X31+32]
	080 Add X31, X31, 64
	081 Return 

Method: System.Void SetRoaming()

Disassembly:
	0x01CDF1E0 LDP X30, X19, [X31], #0x10
	0x01CDF1E4 RET
	0x01CDF1E8 ADRP X0, 0x226E000
	0x01CDF1EC LDR X0, [X0 + 0x490]
	0x01CDF1F0 BL 0x1B6E804
	0x01CDF1F4 BL 0x1B6EA0C
	0x01CDF1F8 MOV X19, X0
	0x01CDF1FC ADRP X0, 0x2270000
	0x01CDF200 LDR X0, [X0 + 0xED8]
	0x01CDF204 BL 0x1B6E804
	0x01CDF208 MOV X1, X0
	0x01CDF20C MOV X0, X19
	0x01CDF210 MOV X2, X31
	0x01CDF214 BL 0x31E7550
	0x01CDF218 ADRP X0, 0x2270000
	0x01CDF21C LDR X0, [X0 + 0xEE0]
	0x01CDF220 BL 0x1B6E804
	0x01CDF224 MOV X1, X0
	0x01CDF228 MOV X0, X19
	0x01CDF22C BL 0x1B6E8E8
	0x01CDF230 STP X30, X19, [X31 - 0x10]!
	0x01CDF234 LDR X8, [X0 + 0x50]
	0x01CDF238 CBZ X8, 0x1CDF248
	0x01CDF23C STR W1, [X8 + 0x50]
	0x01CDF240 LDP X30, X19, [X31], #0x10
	0x01CDF244 RET
	0x01CDF248 ADRP X0, 0x226E000
	0x01CDF24C LDR X0, [X0 + 0x490]
	0x01CDF250 BL 0x1B6E804
	0x01CDF254 BL 0x1B6EA0C
	0x01CDF258 MOV X19, X0
	0x01CDF25C ADRP X0, 0x2270000
	0x01CDF260 LDR X0, [X0 + 0xED8]
	0x01CDF264 BL 0x1B6E804
	0x01CDF268 MOV X1, X0
	0x01CDF26C MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 1
	004 Move X19, X0
	005 Call BomberController.set_phase, X0, X1
	006 Move X9, [X19+184]
	007 Compare X9, 0
	008 JumpIfEqual {44}
	009 Move X8, [X9+48]
	010 Compare X8, 0
	011 JumpIfEqual {44}
	012 Move W10, [X8+24]
	013 Compare W10, 0
	014 JumpIfEqual {45}
	015 Move X10, [X9+88]
	016 Compare X10, 0
	017 JumpIfEqual {44}
	018 Move W11, [X10+24]
	019 Compare W11, 0
	020 JumpIfEqual {45}
	021 Move X9, [X9+96]
	022 Compare X9, 0
	023 JumpIfEqual {44}
	024 Move W11, [X9+24]
	025 Compare W11, 0
	026 JumpIfEqual {45}
	027 Move X11, [X19]
	028 Move V0, [X8+32]
	029 Move V1, [X10+32]
	030 Move V2, [X9+32]
	031 Move X8, [X11+680]
	032 Move X2, [X11+688]
	033 Move X0, X19
	034 Move W1, W31
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X8, [X19]
	037 Move W1, 1
	038 Move X0, X19
	039 Move X3, [X8+776]
	040 Move X2, [X8+784]
	041 Move X30, [X31+16]
	042 Move X19, [X31+24]
	043 CallNoReturn X3
	044 Call 0x1B6FA1C
	045 Call 0x1B6FA24

Method: System.Void UpdateRoaming()

Disassembly:
	0x01CDF598 STR X30, [X31 - 0x10]!
	0x01CDF59C MOVZ W8, 0x43B40000
	0x01CDF5A0 FMOV S0, W31
	0x01CDF5A4 FMOV S1, W8
	0x01CDF5A8 MOV X0, X31
	0x01CDF5AC BL 0x3A98CD0
	0x01CDF5B0 ADRP X8, 0xFFFFFFFFFEDCA000
	0x01CDF5B4 LDR V2, [X8 + 0xAF4]
	0x01CDF5B8 MOV V1.16B, V0.16B
	0x01CDF5BC FMOV S0, W31
	0x01CDF5C0 MOV X0, X31
	0x01CDF5C4 FMUL S1, S1, S2
	0x01CDF5C8 FMOV S2, W31
	0x01CDF5CC LDR X30, [X31], #0x10
	0x01CDF5D0 B 0x3A928DC
	0x01CDF5D4 STP X30, X21, [X31 - 0x20]!
	0x01CDF5D8 STP X20, X19, [X31 + 0x10]
	0x01CDF5DC MOV X19, X0
	0x01CDF5E0 BL 0x1CDEF88
	0x01CDF5E4 SUB W8, W0, 0x1
	0x01CDF5E8 CMP W8, 0x4
	0x01CDF5EC B.HI 0x1CDF64C
	0x01CDF5F0 ADRP X9, 0xFFFFFFFFFEE0D000
	0x01CDF5F4 ADD X9, X9, 0x949
	0x01CDF5F8 ADR X10, 0x10
	0x01CDF5FC LDRB W11, [X9, X8, LSL]
	0x01CDF600 ADD X10, X10, X11, 0x2, LSL
	0x01CDF604 BR X10
	0x01CDF608 LDR X0, [X19 + 0xC0]
	0x01CDF60C CBZ X0, 0x1CDF718
	0x01CDF610 LDR X8, [X0]
	0x01CDF614 LDP X9, X1, [X8 + 0x1B8]
	0x01CDF618 BLR X9
	0x01CDF61C B 0x1CDF64C
	0x01CDF620 LDR X0, [X19 + 0xC0]
	0x01CDF624 CBZ X0, 0x1CDF718
	0x01CDF628 LDR X8, [X0]
	0x01CDF62C LDP X9, X1, [X8 + 0x1D8]
	0x01CDF630 B 0x1CDF644
	0x01CDF634 LDR X0, [X19 + 0xC0]
	0x01CDF638 CBZ X0, 0x1CDF718
	0x01CDF63C LDR X8, [X0]
	0x01CDF640 LDP X9, X1, [X8 + 0x1C8]
	0x01CDF644 FMOV S0, 1
	0x01CDF648 BLR X9
	0x01CDF64C MOV X0, X19
	0x01CDF650 BL 0x1CDEF88
	0x01CDF654 CMP W0, 0x2
	0x01CDF658 B.NE 0x1CDF664
	0x01CDF65C MOVZ W20, 0x1
	0x01CDF660 B 0x1CDF674
	0x01CDF664 MOV X0, X19
	0x01CDF668 BL 0x1CDEF88
	0x01CDF66C CMP W0, 0x3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2545000
	005 Move W8, [X20+1579]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x2271000
	012 Move X0, [X0+3632]
	013 Call 0x1B6F7F0
	014 Move X0, 0x2271000
	015 Move X0, [X0+3568]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1579], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Move [X31+8], X31
	022 Call MobController.UpdateRoaming, X0
	023 Add X1, X31, 8
	024 Move X0, X19
	025 Move X2, X31
	026 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {61}
	031 Move X20, [X31+8]
	032 Compare X20, 0
	033 JumpIfEqual {65}
	034 Move W1, [X20+24]
	035 Move W0, W31
	036 Move X2, X31
	037 Call Random.Range, X0, X1
	038 Move X8, 0x2271000
	039 Move X8, [X8+3568]
	040 Move W1, W0
	041 Move X0, X20
	042 Move X2, [X8]
	043 Call List`1<Object>.get_Item, X0, X1
	044 Move X8, [X19]
	045 Move X1, X0
	046 Move X0, X19
	047 Move X9, [X8+824]
	048 Move X2, [X8+832]
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Move X0, [X19+320]
	051 Compare X0, 0
	052 JumpIfEqual {65}
	053 Move X1, X31
	054 Call Component.get_transform, X0
	055 Compare X0, 0
	056 JumpIfEqual {65}
	057 Move X1, X31
	058 Call Transform.get_position, X0
	059 Move X0, X19
	060 Call BomberController.SetChasing, X0, X1
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X30, [X31+32]
	064 Return 
	065 Call 0x1B6FA1C

Method: System.Void SetChasing(UnityEngine.Vector3 targetPosition)

Disassembly:
	0x01CDF670 CSET W20, EQ
	0x01CDF674 LDR X8, [X19 + 0x190]
	0x01CDF678 CBZ X8, 0x1CDF718
	0x01CDF67C LDR X0, [X8 + 0x90]
	0x01CDF680 CBZ X0, 0x1CDF718
	0x01CDF684 MOV W1, W20
	0x01CDF688 MOV X2, X31
	0x01CDF68C BL 0x3A7B8E0
	0x01CDF690 LDR X0, [X19 + 0x190]
	0x01CDF694 CBZ X0, 0x1CDF718
	0x01CDF698 LDR X8, [X0]
	0x01CDF69C MOV W1, W20
	0x01CDF6A0 LDP X9, X2, [X8 + 0x1A8]
	0x01CDF6A4 BLR X9
	0x01CDF6A8 LDR X20, [X19 + 0x190]
	0x01CDF6AC MOV X0, X19
	0x01CDF6B0 BL 0x1CDEF88
	0x01CDF6B4 CMP W0, 0x3
	0x01CDF6B8 B.EQ 0x1CDF6CC
	0x01CDF6BC MOV X0, X19
	0x01CDF6C0 BL 0x1CDEF88
	0x01CDF6C4 CMP W0, 0x5
	0x01CDF6C8 B.NE 0x1CDF6D4
	0x01CDF6CC MOVZ W21, 0x1
	0x01CDF6D0 B 0x1CDF6E4
	0x01CDF6D4 MOV X0, X19
	0x01CDF6D8 BL 0x1CDEF88
	0x01CDF6DC CMP W0, 0x4
	0x01CDF6E0 CSET W21, EQ
	0x01CDF6E4 MOV X0, X19
	0x01CDF6E8 BL 0x1CDEF88
	0x01CDF6EC CBZ X20, 0x1CDF718
	0x01CDF6F0 ADRP X8, 0xFFFFFFFFFEDCA000
	0x01CDF6F4 LDR V0, [X8 + 0x930]
	0x01CDF6F8 CMP W0, 0x3
	0x01CDF6FC MOV X0, X20
	0x01CDF700 LDP X20, X19, [X31 + 0x10]
	0x01CDF704 FMOV S1, 1
	0x01CDF708 FCSEL S0, S1, S0, EQ
	0x01CDF70C MOV W1, W21
	0x01CDF710 LDP X30, X21, [X31], #0x20
	0x01CDF714 B 0x1CDF73C
	0x01CDF718 BL 0x1B6EA1C
	0x01CDF71C STR X30, [X31 - 0x10]!
	0x01CDF720 LDR X0, [X0 + 0x90]
	0x01CDF724 CBZ X0, 0x1CDF738
	0x01CDF728 AND W1, W1, 0x1
	0x01CDF72C MOV X2, X31
	0x01CDF730 LDR X30, [X31], #0x10
	0x01CDF734 B 0x3A7B8E0
	0x01CDF738 BL 0x1B6EA1C
	0x01CDF73C STR D8, [X31 - 0x20]!
	0x01CDF740 STR X30, [X31 + 0x8]
	0x01CDF744 STP X20, X19, [X31 + 0x10]
	0x01CDF748 MOV X19, X0
	0x01CDF74C LDR X0, [X0 + 0x88]
	0x01CDF750 CBZ X0, 0x1CDF7B4
	0x01CDF754 MOV W20, W1
	0x01CDF758 MOV X1, X31
	0x01CDF75C MOV V8.16B, V0.16B
	0x01CDF760 BL 0x3A65B14
	0x01CDF764 TBZ X20, 0x0, 0x1CDF780

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W1, 2
	008 Move V8, V2
	009 Move V9, V1
	010 Move V10, V0
	011 Move X19, X0
	012 Call BomberController.set_phase, X0, X1
	013 Move S0, W31
	014 Move X0, X19
	015 Move X1, X31
	016 Call MobController.set__timerToChasing, X0, V0
	017 Move X0, X19
	018 Move V0, V10
	019 Move V1, V9
	020 Move V2, V8
	021 Move X1, X31
	022 Call MobController.set__positionThatPlayerStayed, X0, X1
	023 Move X9, [X19+184]
	024 Compare X9, 0
	025 JumpIfEqual {75}
	026 Move X8, [X9+56]
	027 Compare X8, 0
	028 JumpIfEqual {75}
	029 Move W10, [X8+24]
	030 Compare W10, 0
	031 JumpIfEqual {76}
	032 Move X10, [X9+88]
	033 Compare X10, 0
	034 JumpIfEqual {75}
	035 Move W11, [X10+24]
	036 Compare W11, 0
	037 JumpIfEqual {76}
	038 Move X9, [X9+96]
	039 Compare X9, 0
	040 JumpIfEqual {75}
	041 Move W11, [X9+24]
	042 Compare W11, 0
	043 JumpIfEqual {76}
	044 Move X11, [X19]
	045 Move V0, [X8+32]
	046 Move V1, [X10+32]
	047 Move V2, [X9+32]
	048 Move X8, [X11+680]
	049 Move X2, [X11+688]
	050 Move X0, X19
	051 Move W1, W31
	052 NotImplemented "Instruction BLR not yet implemented."
	053 Move X8, [X19+184]
	054 Compare X8, 0
	055 JumpIfEqual {75}
	056 Move X20, [X8+160]
	057 Move X0, X19
	058 Move X1, X31
	059 Call Component.get_transform, X0
	060 Compare X0, 0
	061 JumpIfEqual {75}
	062 Move X1, X31
	063 Call Transform.get_position, X0
	064 Move X0, X20
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X30, [X31+24]
	068 Move D9, [X31+8]
	069 Move D8, [X31+16]
	070 Move S3, 1
	071 Move X1, X31
	072 Move V10, [X31+48]
	073 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	074 Return 
	075 Call 0x1B6FA1C
	076 Call 0x1B6FA24

Method: System.Void UpdateChasing()

Disassembly:
	0x01CDF768 TBNZ X0, 0x0, 0x1CDF794
	0x01CDF76C LDR X0, [X19 + 0x88]
	0x01CDF770 CBZ X0, 0x1CDF7B4
	0x01CDF774 MOV X1, X31
	0x01CDF778 BL 0x3A65954
	0x01CDF77C B 0x1CDF794
	0x01CDF780 TBZ X0, 0x0, 0x1CDF794
	0x01CDF784 LDR X0, [X19 + 0x88]
	0x01CDF788 CBZ X0, 0x1CDF7B4
	0x01CDF78C MOV X1, X31
	0x01CDF790 BL 0x3A65A98
	0x01CDF794 LDR X0, [X19 + 0x88]
	0x01CDF798 CBZ X0, 0x1CDF7B4
	0x01CDF79C LDP X20, X19, [X31 + 0x10]
	0x01CDF7A0 LDR X30, [X31 + 0x8]
	0x01CDF7A4 MOV V0.16B, V8.16B
	0x01CDF7A8 MOV X1, X31
	0x01CDF7AC LDR V8, [X31], #0x20
	0x01CDF7B0 B 0x3A657B4
	0x01CDF7B4 BL 0x1B6EA1C
	0x01CDF7B8 STR X30, [X31 - 0x20]!
	0x01CDF7BC STP X20, X19, [X31 + 0x10]
	0x01CDF7C0 STR X31, [X31 + 0x8]
	0x01CDF7C4 LDR X20, [X0 + 0x38]
	0x01CDF7C8 MOV X19, X0
	0x01CDF7CC BL 0x1CDF048
	0x01CDF7D0 CBZ X20, 0x1CDF80C
	0x01CDF7D4 AND X1, X0, 0x0
	0x01CDF7D8 ADD X2, X31, 0x8
	0x01CDF7DC MOV X0, X20
	0x01CDF7E0 MOV X3, X31
	0x01CDF7E4 BL 0x1D8BED4
	0x01CDF7E8 TBZ X0, 0x0, 0x1CDF800
	0x01CDF7EC LDR X0, [X31 + 0x8]
	0x01CDF7F0 CBZ X0, 0x1CDF80C
	0x01CDF7F4 MOV X1, X31
	0x01CDF7F8 BL 0x3A9B084
	0x01CDF7FC STR X0, [X19 + 0x1B8]
	0x01CDF800 LDP X20, X19, [X31 + 0x10]
	0x01CDF804 LDR X30, [X31], #0x20
	0x01CDF808 RET
	0x01CDF80C BL 0x1B6EA1C
	0x01CDF810 STP X30, X21, [X31 - 0x20]!
	0x01CDF814 STP X20, X19, [X31 + 0x10]
	0x01CDF818 ADRP X20, 0x2544000
	0x01CDF81C ADRP X21, 0x226F000
	0x01CDF820 LDRB W8, [X20 + 0x636]
	0x01CDF824 LDR X21, [X21 + 0x1C0]
	0x01CDF828 MOV X19, X0
	0x01CDF82C TBNZ X8, 0x0, 0x1CDF850
	0x01CDF830 ADRP X0, 0x226F000
	0x01CDF834 LDR X0, [X0 + 0x1C0]
	0x01CDF838 BL 0x1B6E7F0
	0x01CDF83C ADRP X0, 0x226E000
	0x01CDF840 LDR X0, [X0 + 0x478]
	0x01CDF844 BL 0x1B6E7F0
	0x01CDF848 MOVZ W8, 0x1
	0x01CDF84C STRB W8, [X20 + 0x636]
	0x01CDF850 LDR X0, [X21]
	0x01CDF854 LDR W8, [X0 + 0xE0]
	0x01CDF858 CBNZ W8, 0x1CDF860
	0x01CDF85C BL 0x1B6E8F8
	0x01CDF860 CBZ X19, 0x1CDF8D4
	0x01CDF864 LDR W8, [X19 + 0x30]
	0x01CDF868 ADRP X21, 0x226E000
	0x01CDF86C LDR X21, [X21 + 0x478]
	0x01CDF870 LDR X20, [X19 + 0x1A8]
	0x01CDF874 ORR W8, W8, 0x8
	0x01CDF878 STR W8, [X19 + 0x30]
	0x01CDF87C LDR X0, [X21]
	0x01CDF880 LDR W8, [X0 + 0xE0]
	0x01CDF884 CBNZ W8, 0x1CDF88C
	0x01CDF888 BL 0x1B6E8F8
	0x01CDF88C MOV X0, X20
	0x01CDF890 MOV X1, X31
	0x01CDF894 MOV X2, X31
	0x01CDF898 BL 0x3A9D6EC
	0x01CDF89C TBZ X0, 0x0, 0x1CDF8C8
	0x01CDF8A0 LDR X0, [X21]
	0x01CDF8A4 LDR X19, [X19 + 0x1A8]
	0x01CDF8A8 LDR W8, [X0 + 0xE0]
	0x01CDF8AC CBNZ W8, 0x1CDF8B4
	0x01CDF8B0 BL 0x1B6E8F8
	0x01CDF8B4 MOV X0, X19
	0x01CDF8B8 LDP X20, X19, [X31 + 0x10]
	0x01CDF8BC MOV X1, X31
	0x01CDF8C0 LDP X30, X21, [X31], #0x20
	0x01CDF8C4 B 0x3AA15F4
	0x01CDF8C8 LDP X20, X19, [X31 + 0x10]
	0x01CDF8CC LDP X30, X21, [X31], #0x20
	0x01CDF8D0 RET
	0x01CDF8D4 BL 0x1B6EA1C
	0x01CDF8D8 STR D14, [X31 - 0x60]!
	0x01CDF8DC STP D13, D12, [X31 + 0x8]
	0x01CDF8E0 STP D11, D10, [X31 + 0x18]
	0x01CDF8E4 STP D9, D8, [X31 + 0x28]
	0x01CDF8E8 STR X30, [X31 + 0x38]
	0x01CDF8EC STP X22, X21, [X31 + 0x40]
	0x01CDF8F0 STP X20, X19, [X31 + 0x50]
	0x01CDF8F4 ADRP X21, 0x2544000
	0x01CDF8F8 ADRP X20, 0x226F000
	0x01CDF8FC LDRB W8, [X21 + 0x637]
	0x01CDF900 LDR X20, [X20 + 0x430]
	0x01CDF904 MOV X19, X0
	0x01CDF908 TBNZ X8, 0x0, 0x1CDF938
	0x01CDF90C ADRP X0, 0x226F000
	0x01CDF910 LDR X0, [X0 + 0x430]
	0x01CDF914 BL 0x1B6E7F0
	0x01CDF918 ADRP X0, 0x2270000
	0x01CDF91C LDR X0, [X0 + 0xEF0]
	0x01CDF920 BL 0x1B6E7F0
	0x01CDF924 ADRP X0, 0x226E000
	0x01CDF928 LDR X0, [X0 + 0x478]
	0x01CDF92C BL 0x1B6E7F0
	0x01CDF930 MOVZ W8, 0x1
	0x01CDF934 STRB W8, [X21 + 0x637]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D14
	003 Move [X31+24], D13
	004 Move [X31+32], D12
	005 Move [X31+40], D11
	006 Move [X31+48], D10
	007 Move [X31+56], D9
	008 Move [X31+64], D8
	009 Move [X31+72], X30
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x2545000
	013 Move W8, [X20+1580]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x226F000
	020 Move X0, [X0+1144]
	021 Call 0x1B6F7F0
	022 Move W8, 1
	023 Move [X20+1580], W8
	024 Move X0, X19
	025 Move X1, X31
	026 Move [X31+8], X31
	027 Call MobController.UpdateChasing, X0
	028 Move X0, [X19+208]
	029 Compare X0, 0
	030 JumpIfEqual {135}
	031 Move X1, X31
	032 Call Transform.get_position, X0
	033 Move X8, [X19+184]
	034 Compare X8, 0
	035 JumpIfEqual {135}
	036 Move V3, [X8+76]
	037 Move X20, 0x226F000
	038 Move X20, [X20+1144]
	039 Add X1, X31, 8
	040 Move X0, X19
	041 Move X2, X31
	042 Call MobDetectionUtil.TryGetPlayersInRange, X0, X1, V0, X2
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {49}
	047 Move X0, X19
	048 Call BomberController.SetAnticipating, X0
	049 Move X0, [X20]
	050 Move X20, [X19+320]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1B6F8F8
	055 Move X0, X20
	056 Move X1, X31
	057 Move X2, X31
	058 Call Object.op_Equality, X0, X1
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {111}
	063 Move X0, [X19+208]
	064 Compare X0, 0
	065 JumpIfEqual {135}
	066 Move X1, X31
	067 Call Transform.get_position, X0
	068 Move X0, X19
	069 Move X1, X31
	070 Move V8, V0
	071 Move V9, V1
	072 Move V10, V2
	073 Call MobController.get__positionThatPlayerStayed, X0
	074 Move X0, X19
	075 Move X1, X31
	076 Move V11, V0
	077 Move V12, V1
	078 Move V13, V2
	079 Call MobController.get__timerToChasing, X0
	080 Move X0, X19
	081 Move X1, X31
	082 Move V14, V0
	083 Call MobController.get_deltaTime, X0
	084 Add S0, S14, S0
	085 Move X0, X19
	086 Move X1, X31
	087 Call MobController.set__timerToChasing, X0, V0
	088 Move X0, X19
	089 Move X1, X31
	090 Call MobController.get__timerToChasing, X0
	091 Move X0, [X19+184]
	092 Compare X0, 0
	093 JumpIfEqual {135}
	094 Move V1, [X0+104]
	095 NotImplemented "Instruction FCMP not yet implemented."
	096 Subtract S0, S8, S11
	097 Subtract S1, S9, S12
	098 Subtract S2, S10, S13
	099 Multiply S0, S0, S0
	100 Multiply S1, S1, S1
	101 Add S0, S0, S1
	102 Multiply S1, S2, S2
	103 Move X1, X31
	104 Add S8, S1, S0
	105 Call MobData.get_attackRangeSqr, X0
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 Move X0, X19
	108 Call BomberController.SetSearching, X0
	109 Move X0, X19
	110 Call BomberController.SetRoaming, X0
	111 Move X0, X19
	112 Call BomberController.get_phase, X0
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X20, [X19+200]
	115 Move X0, X19
	116 Move X1, X31
	117 Call MobController.get__positionThatPlayerStayed, X0
	118 Compare X20, 0
	119 JumpIfEqual {135}
	120 Move X0, X20
	121 Move X1, X31
	122 Call NavMeshAgent.SetDestination, X0, X1
	123 Move X20, [X31+80]
	124 Move X19, [X31+88]
	125 Move X30, [X31+72]
	126 Move D9, [X31+56]
	127 Move D8, [X31+64]
	128 Move D11, [X31+40]
	129 Move D10, [X31+48]
	130 Move D13, [X31+24]
	131 Move D12, [X31+32]
	132 Move V14, [X31+16]
	133 Add X31, X31, 96
	134 Return 
	135 Call 0x1B6FA1C

Method: System.Void SetAnticipating()

Disassembly:
	0x01CDF938 MOV X0, X19
	0x01CDF93C MOV X1, X31
	0x01CDF940 BL 0x1CE54EC
	0x01CDF944 LDR X1, [X20]
	0x01CDF948 MOV X0, X19
	0x01CDF94C BL 0x2090A90
	0x01CDF950 LDR X8, [X19 + 0x40]
	0x01CDF954 STR X0, [X19 + 0x1C0]
	0x01CDF958 CBZ X8, 0x1CDFAC0
	0x01CDF95C MOV X0, X8
	0x01CDF960 MOV X1, X31
	0x01CDF964 BL 0x1D9E780
	0x01CDF968 TBZ X0, 0x0, 0x1CDF9CC
	0x01CDF96C LDR X8, [X19 + 0xB8]
	0x01CDF970 CBZ X8, 0x1CDFAC0
	0x01CDF974 LDR V0, [X8 + 0x28]
	0x01CDF978 MOV X0, X19
	0x01CDF97C MOV X1, X31
	0x01CDF980 BL 0x1CE48AC
	0x01CDF984 MOV X0, X31
	0x01CDF988 BL 0x1D9CB50
	0x01CDF98C AND X1, X0, 0x0
	0x01CDF990 MOV X0, X19
	0x01CDF994 BL 0x1CDF230
	0x01CDF998 MOV X0, X19
	0x01CDF99C MOV X1, X31
	0x01CDF9A0 BL 0x3A9B084
	0x01CDF9A4 CBZ X0, 0x1CDFAC0
	0x01CDF9A8 MOV X1, X31
	0x01CDF9AC BL 0x3AA7658
	0x01CDF9B0 MOV X0, X19
	0x01CDF9B4 BL 0x1CDF16C
	0x01CDF9B8 MOVZ W1, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 3
	004 Move X19, X0
	005 Call BomberController.set_phase, X0, X1
	006 Move S0, W31
	007 Move X0, X19
	008 Call BomberController.set_timerAnticipating, X0, V0
	009 Move X9, [X19+184]
	010 Compare X9, 0
	011 JumpIfEqual {41}
	012 Move X8, [X9+56]
	013 Compare X8, 0
	014 JumpIfEqual {41}
	015 Move W10, [X8+24]
	016 Compare W10, 0
	017 JumpIfEqual {42}
	018 Move X10, [X9+88]
	019 Compare X10, 0
	020 JumpIfEqual {41}
	021 Move W11, [X10+24]
	022 Compare W11, 0
	023 JumpIfEqual {42}
	024 Move X9, [X9+96]
	025 Compare X9, 0
	026 JumpIfEqual {41}
	027 Move W11, [X9+24]
	028 Compare W11, 0
	029 JumpIfEqual {42}
	030 Move X11, [X19]
	031 Move V0, [X8+32]
	032 Move V1, [X10+32]
	033 Move V2, [X9+32]
	034 Move X3, [X11+680]
	035 Move X2, [X11+688]
	036 Move W1, 1
	037 Move X0, X19
	038 Move X30, [X31+16]
	039 Move X19, [X31+24]
	040 CallNoReturn X3
	041 Call 0x1B6FA1C
	042 Call 0x1B6FA24

Method: System.Void UpdateAnticipating()

Disassembly:
	0x01CDF3CC CBNZ W8, 0x1CDF3D4
	0x01CDF3D0 BL 0x1B6E8F8
	0x01CDF3D4 MOV X0, X20
	0x01CDF3D8 MOV X1, X31
	0x01CDF3DC MOV X2, X31
	0x01CDF3E0 BL 0x3AA0AF0
	0x01CDF3E4 TBZ X0, 0x0, 0x1CDF3F0
	0x01CDF3E8 MOVZ W0, 0x1
	0x01CDF3EC B 0x1CDF440
	0x01CDF3F0 MOV X0, X19
	0x01CDF3F4 BL 0x1CDF108
	0x01CDF3F8 LDR X0, [X19 + 0x1B8]
	0x01CDF3FC CBZ X0, 0x1CDF454
	0x01CDF400 MOV X1, X31
	0x01CDF404 MOV V8.16B, V0.16B
	0x01CDF408 MOV V9.16B, V1.16B
	0x01CDF40C MOV V10.16B, V2.16B
	0x01CDF410 BL 0x3AA7658
	0x01CDF414 FSUB S0, S8, S0
	0x01CDF418 FSUB S1, S9, S1
	0x01CDF41C FSUB S2, S10, S2
	0x01CDF420 FMUL S0, S0, S0
	0x01CDF424 FMUL S1, S1, S1
	0x01CDF428 FMUL S2, S2, S2
	0x01CDF42C FADD S0, S0, S1
	0x01CDF430 FADD S0, S2, S0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call BomberController.get_timerAnticipating, X0
	006 Move X0, X19
	007 Move X1, X31
	008 Move V8, V0
	009 Call MobController.get_deltaTime, X0
	010 Add S0, S8, S0
	011 Move X0, X19
	012 Call BomberController.set_timerAnticipating, X0, V0
	013 Move X0, X19
	014 Call BomberController.get_timerAnticipating, X0
	015 Move X8, [X19+184]
	016 Compare X8, 0
	017 JumpIfEqual {30}
	018 Move V1, [X8+40]
	019 NotImplemented "Instruction FCMP not yet implemented."
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Move V8, [X31+32]
	023 Return 
	024 Move X0, X19
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Move V8, [X31+32]
	028 Call BomberController.Explode, X0
	029 Return 
	030 Call 0x1B6FA1C

Method: System.Void SetSearching()

Disassembly:
	0x01CDF9BC MOV X0, X19
	0x01CDF9C0 BL 0x1CDFAC4
	0x01CDF9C4 MOV X0, X19
	0x01CDF9C8 BL 0x1CDFC10
	0x01CDF9CC ADRP X21, 0x226E000
	0x01CDF9D0 LDR X20, [X19 + 0x1A0]
	0x01CDF9D4 LDR X21, [X21 + 0x478]
	0x01CDF9D8 MOV X0, X19
	0x01CDF9DC BL 0x1CDF108
	0x01CDF9E0 ADRP X22, 0x2544000
	0x01CDF9E4 LDRB W8, [X22 + 0x454]
	0x01CDF9E8 MOV V8.16B, V0.16B
	0x01CDF9EC MOV V9.16B, V1.16B
	0x01CDF9F0 MOV V10.16B, V2.16B
	0x01CDF9F4 CBNZ W8, 0x1CDFA0C
	0x01CDF9F8 ADRP X0, 0x226F000
	0x01CDF9FC LDR X0, [X0 + 0x1F8]
	0x01CDFA00 BL 0x1B6E7F0
	0x01CDFA04 MOVZ W8, 0x1
	0x01CDFA08 STRB W8, [X22 + 0x454]
	0x01CDFA0C ADRP X8, 0x226F000
	0x01CDFA10 LDR X8, [X8 + 0x1F8]
	0x01CDFA14 LDR X0, [X21]
	0x01CDFA18 ADRP X21, 0x2270000
	0x01CDFA1C LDR X8, [X8]
	0x01CDFA20 LDR W9, [X0 + 0xE0]
	0x01CDFA24 LDR X8, [X8 + 0xB8]
	0x01CDFA28 LDP S14, S13, [X8]
	0x01CDFA2C LDP S12, S11, [X8 + 0x8]
	0x01CDFA30 LDR X21, [X21 + 0xEF0]
	0x01CDFA34 CBNZ W9, 0x1CDFA3C
	0x01CDFA38 BL 0x1B6E8F8
	0x01CDFA3C LDR X1, [X21]
	0x01CDFA40 MOV X0, X20
	0x01CDFA44 MOV V0.16B, V8.16B
	0x01CDFA48 MOV V1.16B, V9.16B
	0x01CDFA4C MOV V2.16B, V10.16B
	0x01CDFA50 MOV V3.16B, V14.16B
	0x01CDFA54 MOV V4.16B, V13.16B
	0x01CDFA58 MOV V5.16B, V12.16B
	0x01CDFA5C MOV V6.16B, V11.16B
	0x01CDFA60 BL 0x2114F80
	0x01CDFA64 LDR X8, [X19 + 0xC8]
	0x01CDFA68 STR X0, [X19 + 0x1A8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, 4
	004 Move X19, X0
	005 Call BomberController.set_phase, X0, X1
	006 Move S0, W31
	007 Move X0, X19
	008 Move X1, X31
	009 Call MobController.set__timerToSearching, X0, V0
	010 Move X9, [X19+184]
	011 Compare X9, 0
	012 JumpIfEqual {48}
	013 Move X8, [X9+56]
	014 Compare X8, 0
	015 JumpIfEqual {48}
	016 Move W10, [X8+24]
	017 Compare W10, 0
	018 JumpIfEqual {49}
	019 Move X10, [X9+88]
	020 Compare X10, 0
	021 JumpIfEqual {48}
	022 Move W11, [X10+24]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X9, [X9+96]
	025 Compare X9, 0
	026 JumpIfEqual {48}
	027 Move W11, [X9+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X11, [X19]
	030 Move V0, [X8+32]
	031 Move V1, [X10+36]
	032 Move V2, [X9+36]
	033 Move X8, [X11+680]
	034 Move X2, [X11+688]
	035 Move X0, X19
	036 Move W1, W31
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X0, X19
	039 Move X1, X31
	040 Call MobController.get__positionThatPlayerStayed, X0
	041 Move X8, [X19]
	042 Move X0, X19
	043 Move X2, [X8+792]
	044 Move X1, [X8+800]
	045 Move X30, [X31+16]
	046 Move X19, [X31+24]
	047 CallNoReturn X2
	048 Call 0x1B6FA1C
	049 Call 0x1B6FA24

Method: System.Void UpdateSearching()

Disassembly:
	0x01CDF434 FMOV S1, 1
	0x01CDF438 FCMP S0, S1
	0x01CDF43C CSET W0, GT
	0x01CDF440 LDP X20, X19, [X31 + 0x30]
	0x01CDF444 LDP X30, X21, [X31 + 0x20]
	0x01CDF448 LDP D9, D8, [X31 + 0x10]
	0x01CDF44C LDR V10, [X31], #0x40
	0x01CDF450 RET
	0x01CDF454 BL 0x1B6EA1C
	0x01CDF458 STP D13, D12, [X31 - 0x40]!
	0x01CDF45C STP D11, D10, [X31 + 0x10]
	0x01CDF460 STP D9, D8, [X31 + 0x20]
	0x01CDF464 STP X30, X19, [X31 + 0x30]
	0x01CDF468 MOV X1, X31
	0x01CDF46C MOV X19, X0
	0x01CDF470 BL 0x3A9B084
	0x01CDF474 CBZ X0, 0x1CDF510
	0x01CDF478 MOV X1, X31
	0x01CDF47C BL 0x3AA7658
	0x01CDF480 MOV X0, X19
	0x01CDF484 MOV V8.16B, V0.16B
	0x01CDF488 MOV V9.16B, V1.16B
	0x01CDF48C MOV V10.16B, V2.16B
	0x01CDF490 BL 0x1CDF108
	0x01CDF494 ADRP X19, 0x2544000
	0x01CDF498 LDRB W8, [X19 + 0x506]
	0x01CDF49C MOV V11.16B, V0.16B
	0x01CDF4A0 MOV V12.16B, V1.16B
	0x01CDF4A4 MOV V13.16B, V2.16B
	0x01CDF4A8 CBNZ W8, 0x1CDF4C0
	0x01CDF4AC ADRP X0, 0x226E000
	0x01CDF4B0 LDR X0, [X0 + 0x488]
	0x01CDF4B4 BL 0x1B6E7F0
	0x01CDF4B8 MOVZ W8, 0x1
	0x01CDF4BC STRB W8, [X19 + 0x506]
	0x01CDF4C0 ADRP X8, 0x226E000
	0x01CDF4C4 LDR X8, [X8 + 0x488]
	0x01CDF4C8 FSUB S11, S8, S11
	0x01CDF4CC FSUB S9, S9, S12
	0x01CDF4D0 FSUB S8, S10, S13
	0x01CDF4D4 LDR X0, [X8]
	0x01CDF4D8 LDR W8, [X0 + 0xE0]
	0x01CDF4DC CBNZ W8, 0x1CDF4E4
	0x01CDF4E0 BL 0x1B6E8F8
	0x01CDF4E4 FMUL S0, S11, S11
	0x01CDF4E8 FMUL S1, S9, S9
	0x01CDF4EC FADD S0, S0, S1
	0x01CDF4F0 FMUL S1, S8, S8
	0x01CDF4F4 LDP X30, X19, [X31 + 0x30]
	0x01CDF4F8 LDP D9, D8, [X31 + 0x20]
	0x01CDF4FC LDP D11, D10, [X31 + 0x10]
	0x01CDF500 FADD S0, S1, S0
	0x01CDF504 FSQRT S0, S0
	0x01CDF508 LDP D13, D12, [X31], #0x40
	0x01CDF50C RET
	0x01CDF510 BL 0x1B6EA1C
	0x01CDF514 STR D10, [X31 - 0x30]!
	0x01CDF518 STP D9, D8, [X31 + 0x10]
	0x01CDF51C STP X30, X19, [X31 + 0x20]
	0x01CDF520 BL 0x1CDF108
	0x01CDF524 ADRP X19, 0x2544000
	0x01CDF528 LDRB W8, [X19 + 0x442]
	0x01CDF52C MOV V8.16B, V0.16B
	0x01CDF530 MOV V9.16B, V1.16B
	0x01CDF534 MOV V10.16B, V2.16B
	0x01CDF538 CBNZ W8, 0x1CDF550
	0x01CDF53C ADRP X0, 0x226E000
	0x01CDF540 LDR X0, [X0 + 0x480]
	0x01CDF544 BL 0x1B6E7F0
	0x01CDF548 MOVZ W8, 0x1
	0x01CDF54C STRB W8, [X19 + 0x442]
	0x01CDF550 ADRP X8, 0x226E000
	0x01CDF554 LDR X8, [X8 + 0x480]
	0x01CDF558 ADRP X9, 0xFFFFFFFFFEDCA000
	0x01CDF55C LDR V0, [X9 + 0x9BC]
	0x01CDF560 LDP X30, X19, [X31 + 0x20]
	0x01CDF564 LDR X8, [X8]
	0x01CDF568 LDR X8, [X8 + 0xB8]
	0x01CDF56C LDP S1, S2, [X8 + 0x18]
	0x01CDF570 LDR V3, [X8 + 0x20]
	0x01CDF574 FMUL S1, S1, S0
	0x01CDF578 FMUL S2, S2, S0
	0x01CDF57C FMUL S3, S3, S0
	0x01CDF580 FADD S0, S8, S1
	0x01CDF584 FADD S1, S9, S2
	0x01CDF588 LDP D9, D8, [X31 + 0x10]
	0x01CDF58C FADD S2, S10, S3
	0x01CDF590 LDR V10, [X31], #0x30
	0x01CDF594 RET

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], D8
	003 Move [X31+24], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2545000
	007 Move W8, [X20+1581]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x2271000
	014 Move X0, [X0+3632]
	015 Call 0x1B6F7F0
	016 Move X0, 0x2271000
	017 Move X0, [X0+3568]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X20+1581], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Move [X31+8], X31
	024 Call MobController.get__timerToSearching, X0
	025 Move X0, X19
	026 Move X1, X31
	027 Move V8, V0
	028 Call MobController.get_deltaTime, X0
	029 Add S0, S8, S0
	030 Move X0, X19
	031 Move X1, X31
	032 Call MobController.set__timerToSearching, X0, V0
	033 Move X0, X19
	034 Move X1, X31
	035 Call MobController.get__timerToSearching, X0
	036 Move X8, [X19+184]
	037 Compare X8, 0
	038 JumpIfEqual {98}
	039 Move V1, [X8+108]
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 Add X1, X31, 8
	042 Move X0, X19
	043 Move X2, X31
	044 Call MobDetectionUtil.TryGetPlayersBySight, X0, X1
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {87}
	049 Move X20, [X31+8]
	050 Compare X20, 0
	051 JumpIfEqual {98}
	052 Move W1, [X20+24]
	053 Move W0, W31
	054 Move X2, X31
	055 Call Random.Range, X0, X1
	056 Move X8, 0x2271000
	057 Move X8, [X8+3568]
	058 Move W1, W0
	059 Move X0, X20
	060 Move X2, [X8]
	061 Call List`1<Object>.get_Item, X0, X1
	062 Move X8, [X19]
	063 Move X1, X0
	064 Move X0, X19
	065 Move X9, [X8+824]
	066 Move X2, [X8+832]
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Move X0, [X19+320]
	069 Compare X0, 0
	070 JumpIfEqual {98}
	071 Move X1, X31
	072 Call Component.get_transform, X0
	073 Compare X0, 0
	074 JumpIfEqual {98}
	075 Move X1, X31
	076 Call Transform.get_position, X0
	077 Move X0, X19
	078 Move X1, X31
	079 Call MobController.set__positionThatPlayerStayed, X0, X1
	080 Move X0, X19
	081 Move X1, X31
	082 Call MobController.get__positionThatPlayerStayed, X0
	083 Move X0, X19
	084 Call BomberController.SetChasing, X0, X1
	085 Move X0, X19
	086 Call BomberController.SetRoaming, X0
	087 Move X8, [X19]
	088 Move X0, X19
	089 Move X9, [X8+808]
	090 Move X1, [X8+816]
	091 NotImplemented "Instruction BLR not yet implemented."
	092 Move X20, [X31+32]
	093 Move X19, [X31+40]
	094 Move X30, [X31+24]
	095 Move V8, [X31+16]
	096 Add X31, X31, 48
	097 Return 
	098 Call 0x1B6FA1C

Method: System.Void Explode()

Disassembly:
	0x01CDFA6C CBZ X8, 0x1CDFAC0
	0x01CDFA70 MOVZ W1, 0x1
	0x01CDFA74 MOV X0, X8
	0x01CDFA78 MOV X2, X31
	0x01CDFA7C BL 0x3A4ACE4
	0x01CDFA80 LDR X0, [X19 + 0xC8]
	0x01CDFA84 CBZ X0, 0x1CDFAC0
	0x01CDFA88 MOVZ W1, 0x1
	0x01CDFA8C MOV X2, X31
	0x01CDFA90 BL 0x3A4AD28
	0x01CDFA94 MOV X0, X19
	0x01CDFA98 BL 0x1CDF5D4
	0x01CDFA9C MOV X0, X19
	0x01CDFAA0 LDP X20, X19, [X31 + 0x50]
	0x01CDFAA4 LDP X22, X21, [X31 + 0x40]
	0x01CDFAA8 LDR X30, [X31 + 0x38]
	0x01CDFAAC LDP D9, D8, [X31 + 0x28]
	0x01CDFAB0 LDP D11, D10, [X31 + 0x18]
	0x01CDFAB4 LDP D13, D12, [X31 + 0x8]
	0x01CDFAB8 LDR V14, [X31], #0x60
	0x01CDFABC B 0x1CDF7B8
	0x01CDFAC0 BL 0x1B6EA1C
	0x01CDFAC4 STR D10, [X31 - 0x40]!
	0x01CDFAC8 STP D9, D8, [X31 + 0x10]
	0x01CDFACC STP X30, X21, [X31 + 0x20]
	0x01CDFAD0 STP X20, X19, [X31 + 0x30]
	0x01CDFAD4 ADRP X21, 0x2544000
	0x01CDFAD8 LDRB W8, [X21 + 0x638]
	0x01CDFADC MOV W20, W1
	0x01CDFAE0 MOV X19, X0
	0x01CDFAE4 TBNZ X8, 0x0, 0x1CDFAFC
	0x01CDFAE8 ADRP X0, 0x226E000
	0x01CDFAEC LDR X0, [X0 + 0x478]
	0x01CDFAF0 BL 0x1B6E7F0
	0x01CDFAF4 MOVZ W8, 0x1
	0x01CDFAF8 STRB W8, [X21 + 0x638]
	0x01CDFAFC STR W31, [X31 + 0x8]
	0x01CDFB00 TBZ X20, 0x0, 0x1CDFBAC
	0x01CDFB04 MOV X0, X31
	0x01CDFB08 BL 0x1D9CB50
	0x01CDFB0C AND X1, X0, 0x0
	0x01CDFB10 MOV X0, X19
	0x01CDFB14 BL 0x1CDF230
	0x01CDFB18 MOV X0, X19
	0x01CDFB1C BL 0x1CDF514
	0x01CDFB20 MOVZ W8, 0x43B40000
	0x01CDFB24 MOV V8.16B, V0.16B
	0x01CDFB28 MOV V9.16B, V1.16B
	0x01CDFB2C FMOV S0, W31
	0x01CDFB30 FMOV S1, W8
	0x01CDFB34 MOV X0, X31
	0x01CDFB38 MOV V10.16B, V2.16B
	0x01CDFB3C BL 0x3A98CD0
	0x01CDFB40 ADRP X8, 0xFFFFFFFFFEDCA000
	0x01CDFB44 LDR V1, [X8 + 0xAF4]
	0x01CDFB48 FMOV S2, W31
	0x01CDFB4C MOV X0, X31
	0x01CDFB50 FMUL S1, S0, S1
	0x01CDFB54 FMOV S0, W31
	0x01CDFB58 BL 0x3A928DC
	0x01CDFB5C MOV V4.16B, V0.16B
	0x01CDFB60 MOV V5.16B, V1.16B
	0x01CDFB64 MOV V6.16B, V2.16B
	0x01CDFB68 MOV V7.16B, V3.16B
	0x01CDFB6C MOV X0, X19
	0x01CDFB70 MOV V0.16B, V8.16B
	0x01CDFB74 MOV V1.16B, V9.16B
	0x01CDFB78 MOV V2.16B, V10.16B
	0x01CDFB7C MOV V3.16B, V4.16B
	0x01CDFB80 MOV V4.16B, V5.16B
	0x01CDFB84 MOV V5.16B, V6.16B
	0x01CDFB88 MOV V6.16B, V7.16B
	0x01CDFB8C BL 0x1CDFDE4
	0x01CDFB90 MOV X0, X19
	0x01CDFB94 BL 0x1CDEF88
	0x01CDFB98 CMP W0, 0x5
	0x01CDFB9C B.NE 0x1CDFBFC
	0x01CDFBA0 MOV X0, X19
	0x01CDFBA4 BL 0x1CDFCE0

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+80], X30
	003 Move [X31+88], X23
	004 Move [X31+96], X22
	005 Move [X31+104], X21
	006 Move [X31+112], X20
	007 Move [X31+120], X19
	008 Move X20, 0x2545000
	009 Move W8, [X20+1582]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x2270000
	016 Move X0, [X0+1496]
	017 Call 0x1B6F7F0
	018 Move X0, 0x2270000
	019 Move X0, [X0+584]
	020 Call 0x1B6F7F0
	021 Move X0, 0x2270000
	022 Move X0, [X0+592]
	023 Call 0x1B6F7F0
	024 Move W8, 1
	025 Move [X20+1582], W8
	026 Move X0, [X19+208]
	027 Compare X0, 0
	028 JumpIfEqual {96}
	029 Move X23, 0x2270000
	030 Move X22, 0x2270000
	031 Move X20, [X19+56]
	032 Move X21, [X19+384]
	033 Move X23, [X23+584]
	034 Move X22, [X22+592]
	035 Move X1, X31
	036 Call Transform.get_position, X0
	037 Move X1, [X23]
	038 Add X0, X31, 32
	039 Move [X31+32], X31
	040 Move [X31+40], X31
	041 Call Nullable`1<Vector3>..ctor, X0, X1
	042 Move X23, 0x2545000
	043 Move W8, [X23+1108]
	044 Compare W8, 0
	045 JumpIfNotEqual {51}
	046 Move X0, 0x2270000
	047 Move X0, [X0+504]
	048 Call 0x1B6F7F0
	049 Move W8, 1
	050 Move [X23+1108], W8
	051 Move X8, 0x2270000
	052 Move X8, [X8+504]
	053 Move X1, [X22]
	054 Add X0, X31, 8
	055 Move X8, [X8]
	056 Move X8, [X8+184]
	057 Move S0, [X8]
	058 Move S1, [X8+4]
	059 Move S2, [X8+8]
	060 Move S3, [X8+12]
	061 Move [X31+8], X31
	062 Move [X31+16], X31
	063 Move [X31+24], W31
	064 Call Nullable`1<Quaternion>..ctor, X0, X1
	065 Compare X20, 0
	066 JumpIfEqual {96}
	067 Move X8, 0x2270000
	068 Move X8, [X8+1496]
	069 Move X2, [X31+32]
	070 Move X3, [X31+40]
	071 NotImplemented "Instruction LDUR not yet implemented."
	072 Move W9, [X31+24]
	073 Move X8, [X8]
	074 Add X4, X31, 48
	075 Move X0, X20
	076 Move X1, X21
	077 Move X5, X31
	078 Move X6, X31
	079 Move W7, W31
	080 Move [X31+3], V0
	081 Move [X31+64], W9
	082 Move [X31], X8
	083 Call 0x2113E18, X0, X1, X2, X3, X4, X5, X6
	084 Move W1, 1
	085 Move X0, X19
	086 Move X2, X31
	087 Call MobController.SetDie, X0, X1
	088 Move X20, [X31+112]
	089 Move X19, [X31+120]
	090 Move X22, [X31+96]
	091 Move X21, [X31+104]
	092 Move X30, [X31+80]
	093 Move X23, [X31+88]
	094 Add X31, X31, 128
	095 Return 
	096 Call 0x1B6FA1C

Method: System.Void HandleDie()

Disassembly:
	0x01CDFBA8 B 0x1CDFBFC
	0x01CDFBAC ADRP X8, 0x226E000
	0x01CDFBB0 LDR X8, [X8 + 0x478]
	0x01CDFBB4 LDR X20, [X19 + 0x1B8]
	0x01CDFBB8 LDR X0, [X8]
	0x01CDFBBC LDR W8, [X0 + 0xE0]
	0x01CDFBC0 CBNZ W8, 0x1CDFBC8
	0x01CDFBC4 BL 0x1B6E8F8
	0x01CDFBC8 MOV X0, X20
	0x01CDFBCC MOV X1, X31
	0x01CDFBD0 MOV X2, X31
	0x01CDFBD4 BL 0x3AA0AF0
	0x01CDFBD8 TBZ X0, 0x0, 0x1CDFBFC
	0x01CDFBDC MOV X0, X19
	0x01CDFBE0 BL 0x1CDF1D0
	0x01CDFBE4 STR W0, [X31 + 0x8]
	0x01CDFBE8 LDR X1, [X19 + 0x38]
	0x01CDFBEC ADD X0, X31, 0x8
	0x01CDFBF0 MOV X2, X31
	0x01CDFBF4 BL 0x1D9CBCC
	0x01CDFBF8 TBNZ X0, 0x0, 0x1CDFB04

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.HandleDie, X0
	006 Move X0, [X19+64]
	007 Compare X0, 0
	008 JumpIfEqual {30}
	009 Move X1, X31
	010 Call NetworkObject.get_HasStateAuthority, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {27}
	015 Move W1, 5
	016 Move X0, X19
	017 Call BomberController.set_phase, X0, X1
	018 Move X0, [X19+200]
	019 Compare X0, 0
	020 JumpIfEqual {30}
	021 Move W1, 1
	022 Move X2, X31
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Call NavMeshAgent.set_isStopped, X0, X1
	026 Return 
	027 Move X30, [X31+16]
	028 Move X19, [X31+24]
	029 Return 
	030 Call 0x1B6FA1C

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01CDFBFC LDP X20, X19, [X31 + 0x30]
	0x01CDFC00 LDP X30, X21, [X31 + 0x20]
	0x01CDFC04 LDP D9, D8, [X31 + 0x10]
	0x01CDFC08 LDR V10, [X31], #0x40
	0x01CDFC0C RET
	0x01CDFC10 STP X30, X19, [X31 - 0x10]!
	0x01CDFC14 MOVZ W1, 0x1
	0x01CDFC18 MOV X19, X0
	0x01CDFC1C BL 0x1CDEFE8
	0x01CDFC20 LDR X8, [X19]
	0x01CDFC24 MOV X0, X19
	0x01CDFC28 MOV X1, X31
	0x01CDFC2C LDR X9, [X8 + 0x338]
	0x01CDFC30 LDR X2, [X8 + 0x340]
	0x01CDFC34 BLR X9
	0x01CDFC38 LDR X9, [X19 + 0xB8]
	0x01CDFC3C CBZ X9, 0x1CDFC88
	0x01CDFC40 LDR X8, [X9 + 0x58]
	0x01CDFC44 CBZ X8, 0x1CDFC88
	0x01CDFC48 LDR W10, [X8 + 0x18]
	0x01CDFC4C CBZ W10, 0x1CDFC8C
	0x01CDFC50 LDR X9, [X9 + 0x60]
	0x01CDFC54 CBZ X9, 0x1CDFC88
	0x01CDFC58 LDR W10, [X9 + 0x18]
	0x01CDFC5C CBZ W10, 0x1CDFC8C
	0x01CDFC60 LDR X10, [X19]
	0x01CDFC64 LDR V1, [X8 + 0x20]
	0x01CDFC68 LDR V2, [X9 + 0x20]
	0x01CDFC6C FMOV S0, W31
	0x01CDFC70 LDR X3, [X10 + 0x2A8]
	0x01CDFC74 LDR X2, [X10 + 0x2B0]
	0x01CDFC78 MOVZ W1, 0x1
	0x01CDFC7C MOV X0, X19
	0x01CDFC80 LDP X30, X19, [X31], #0x10
	0x01CDFC84 BR X3
	0x01CDFC88 BL 0x1B6EA1C
	0x01CDFC8C BL 0x1B6EA24
	0x01CDFC90 STP X30, X19, [X31 - 0x10]!
	0x01CDFC94 MOV X1, X31
	0x01CDFC98 MOV X19, X0
	0x01CDFC9C BL 0x1CE5C84
	0x01CDFCA0 MOV X0, X19
	0x01CDFCA4 BL 0x1CDF108
	0x01CDFCA8 MOV X0, X19
	0x01CDFCAC MOV X1, X31
	0x01CDFCB0 BL 0x1CE5868
	0x01CDFCB4 LDR X0, [X19 + 0x40]
	0x01CDFCB8 CBZ X0, 0x1CDFCDC
	0x01CDFCBC MOV X1, X31
	0x01CDFCC0 BL 0x1D9E780
	0x01CDFCC4 TBZ X0, 0x0, 0x1CDFCD4
	0x01CDFCC8 MOV X0, X19
	0x01CDFCCC LDP X30, X19, [X31], #0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2545000
	006 Move X20, 0x2271000
	007 Move W8, [X21+1583]
	008 Move X20, [X20+3400]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2271000
	015 Move X0, [X0+3400]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1583], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call MobController.OnDrawGizmos, X0
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1B6F8F8
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move X0, X31
	030 Move S0, [X8+160]
	031 Move S1, [X8+164]
	032 Move S2, [X8+168]
	033 Move S3, [X8+172]
	034 Call Gizmos.set_color, X0
	035 Move X0, [X19+208]
	036 Compare X0, 0
	037 JumpIfEqual {70}
	038 Move X1, X31
	039 Call Transform.get_position, X0
	040 Move X8, [X19+184]
	041 Compare X8, 0
	042 JumpIfEqual {70}
	043 Move V3, [X8+72]
	044 Move X0, X31
	045 Call Gizmos.DrawWireSphere, X0, V0
	046 Move X8, [X20]
	047 Move X0, X31
	048 Move X8, [X8+184]
	049 Move S0, [X8+176]
	050 Move S1, [X8+180]
	051 Move S2, [X8+184]
	052 Move S3, [X8+188]
	053 Call Gizmos.set_color, X0
	054 Move X0, [X19+208]
	055 Compare X0, 0
	056 JumpIfEqual {70}
	057 Move X1, X31
	058 Call Transform.get_position, X0
	059 Move X8, [X19+184]
	060 Compare X8, 0
	061 JumpIfEqual {70}
	062 Move V3, [X8+76]
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X0, X31
	066 Move X30, [X31+32]
	067 Move X21, [X31+40]
	068 Call Gizmos.DrawWireSphere, X0, V0
	069 Return 
	070 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CDFCD0 B 0x1CDFCE0
	0x01CDFCD4 LDP X30, X19, [X31], #0x10
	0x01CDFCD8 RET
	0x01CDFCDC BL 0x1B6EA1C
	0x01CDFCE0 STR X30, [X31 - 0x20]!
	0x01CDFCE4 STP X20, X19, [X31 + 0x10]
	0x01CDFCE8 MOVZ W1, 0x4
	0x01CDFCEC MOV X19, X0
	0x01CDFCF0 BL 0x1CDEFE8
	0x01CDFCF4 LDR X8, [X19]
	0x01CDFCF8 MOV X0, X19
	0x01CDFCFC MOV X1, X31
	0x01CDFD00 LDR X9, [X8 + 0x338]
	0x01CDFD04 LDR X2, [X8 + 0x340]
	0x01CDFD08 BLR X9
	0x01CDFD0C FMOV S0, W31
	0x01CDFD10 MOV X0, X19
	0x01CDFD14 MOV X1, X31
	0x01CDFD18 BL 0x1CE472C
	0x01CDFD1C LDR X9, [X19 + 0xB8]
	0x01CDFD20 CBZ X9, 0x1CDFD9C
	0x01CDFD24 LDR X8, [X9 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2545000
	006 Move X21, 0x2270000
	007 Move W8, [X20+1584]
	008 Move X21, [X21+3448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2270000
	015 Move X0, [X0+3448]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1584], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1B6F8F8
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call MobController..ctor, X0
	031 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01CDFD28 CBZ X8, 0x1CDFD9C
	0x01CDFD2C LDR W10, [X8 + 0x18]
	0x01CDFD30 CBZ W10, 0x1CDFDA0
	0x01CDFD34 LDR X10, [X9 + 0x58]
	0x01CDFD38 CBZ X10, 0x1CDFD9C
	0x01CDFD3C LDR W11, [X10 + 0x18]
	0x01CDFD40 CBZ W11, 0x1CDFDA0
	0x01CDFD44 LDR X9, [X9 + 0x60]
	0x01CDFD48 CBZ X9, 0x1CDFD9C
	0x01CDFD4C LDR W11, [X9 + 0x18]
	0x01CDFD50 CBZ W11, 0x1CDFDA0
	0x01CDFD54 LDR X11, [X19]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 And W1, W1, 1
	004 Move X2, X31
	005 Move X19, X0
	006 Call MobController.CopyBackingFieldsToState, X0, X1
	007 Move W1, [X19+372]
	008 Move X0, X19
	009 Call BomberController.set_phase, X0, X1
	010 Move V0, [X19+392]
	011 Move X0, X19
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call BomberController.set_timerAnticipating, X0, V0
	015 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01CDFD58 LDR V0, [X8 + 0x20]
	0x01CDFD5C LDR V1, [X10 + 0x20]
	0x01CDFD60 LDR V2, [X9 + 0x20]
	0x01CDFD64 LDR X8, [X11 + 0x2A8]
	0x01CDFD68 LDR X2, [X11 + 0x2B0]
	0x01CDFD6C MOV X0, X19
	0x01CDFD70 MOV W1, W31
	0x01CDFD74 BLR X8
	0x01CDFD78 LDR X20, [X19 + 0xC8]
	0x01CDFD7C MOV X0, X19
	0x01CDFD80 BL 0x1CDF108
	0x01CDFD84 CBZ X20, 0x1CDFD9C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MobController.CopyStateToBackingFields, X0
	006 Move X0, X19
	007 Call BomberController.get_phase, X0
	008 Move [X19+372], W0
	009 Move X0, X19
	010 Call BomberController.get_timerAnticipating, X0
	011 Move [X19+392], S0
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 

