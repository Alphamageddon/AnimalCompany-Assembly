Type: AnimalCompany.ProximityActivator

Method: System.Void Awake()

Disassembly:
	0x01D87C54 STR X0, [X23 + 0x20]
	0x01D87C58 LDR X23, [X19 + 0x60]
	0x01D87C5C CBZ X23, 0x1D87CD4
	0x01D87C60 ADRP X21, 0x236F000
	0x01D87C64 LDR X20, [X23 + 0x20]
	0x01D87C68 LDR X21, [X21 + 0x9F8]
	0x01D87C6C MOV X0, X1
	0x01D87C70 BL 0x1C16F10
	0x01D87C74 LDR X2, [X21]
	0x01D87C78 MOV X1, X19
	0x01D87C7C MOV X3, X31
	0x01D87C80 MOV X21, X0
	0x01D87C84 BL 0x3314368
	0x01D87C88 MOV X0, X20
	0x01D87C8C MOV X1, X21
	0x01D87C90 MOV X2, X31
	0x01D87C94 BL 0x33C0DE4
	0x01D87C98 CBZ X0, 0x1D87CC0
	0x01D87C9C LDR X1, [X22]
	0x01D87CA0 LDR X8, [X0]
	0x01D87CA4 CMP X8, X1
	0x01D87CA8 B.NE 0x1D87CBC
	0x01D87CAC STR X0, [X23 + 0x20]
	0x01D87CB0 LDR X8, [X0]
	0x01D87CB4 CMP X8, X1
	0x01D87CB8 B.EQ 0x1D87CC4
	0x01D87CBC BL 0x1C171E0
	0x01D87CC0 STR X0, [X23 + 0x20]
	0x01D87CC4 LDP X20, X19, [X31 + 0x20]
	0x01D87CC8 LDP X22, X21, [X31 + 0x10]
	0x01D87CCC LDP X30, X23, [X31], #0x30
	0x01D87CD0 RET
	0x01D87CD4 BL 0x1C16F20
	0x01D87CD8 STP X30, X23, [X31 - 0x30]!
	0x01D87CDC STP X22, X21, [X31 + 0x10]
	0x01D87CE0 STP X20, X19, [X31 + 0x20]
	0x01D87CE4 ADRP X20, 0x2651000
	0x01D87CE8 LDRB W8, [X20 + 0x9AF]
	0x01D87CEC MOV X19, X0
	0x01D87CF0 TBNZ X8, 0x0, 0x1D87D50
	0x01D87CF4 ADRP X0, 0x236D000
	0x01D87CF8 LDR X0, [X0 + 0xE70]
	0x01D87CFC BL 0x1C16CF4
	0x01D87D00 ADRP X0, 0x236F000
	0x01D87D04 LDR X0, [X0 + 0x9E8]
	0x01D87D08 BL 0x1C16CF4
	0x01D87D0C ADRP X0, 0x236F000
	0x01D87D10 LDR X0, [X0 + 0x9F0]
	0x01D87D14 BL 0x1C16CF4
	0x01D87D18 ADRP X0, 0x236F000
	0x01D87D1C LDR X0, [X0 + 0x9F8]
	0x01D87D20 BL 0x1C16CF4
	0x01D87D24 ADRP X0, 0x236F000
	0x01D87D28 LDR X0, [X0 + 0xA00]
	0x01D87D2C BL 0x1C16CF4
	0x01D87D30 ADRP X0, 0x236F000
	0x01D87D34 LDR X0, [X0 + 0xA08]
	0x01D87D38 BL 0x1C16CF4
	0x01D87D3C ADRP X0, 0x236F000
	0x01D87D40 LDR X0, [X0 + 0xA10]
	0x01D87D44 BL 0x1C16CF4
	0x01D87D48 MOVZ W8, 0x1
	0x01D87D4C STRB W8, [X20 + 0x9AF]
	0x01D87D50 LDR X23, [X19 + 0x38]
	0x01D87D54 CBZ X23, 0x1D87FF0
	0x01D87D58 ADRP X22, 0x236D000
	0x01D87D5C LDR X22, [X22 + 0xE70]
	0x01D87D60 ADRP X21, 0x236F000
	0x01D87D64 LDR X20, [X23 + 0x20]
	0x01D87D68 LDR X0, [X22]
	0x01D87D6C LDR X21, [X21 + 0xA00]
	0x01D87D70 BL 0x1C16F10
	0x01D87D74 LDR X2, [X21]
	0x01D87D78 MOV X1, X19
	0x01D87D7C MOV X3, X31
	0x01D87D80 MOV X21, X0
	0x01D87D84 BL 0x3314368
	0x01D87D88 MOV X0, X20
	0x01D87D8C MOV X1, X21
	0x01D87D90 MOV X2, X31
	0x01D87D94 BL 0x33C0FDC
	0x01D87D98 LDR X1, [X22]
	0x01D87D9C CBZ X0, 0x1D87DC0
	0x01D87DA0 LDR X8, [X0]
	0x01D87DA4 CMP X8, X1
	0x01D87DA8 B.NE 0x1D87FD8
	0x01D87DAC STR X0, [X23 + 0x20]
	0x01D87DB0 LDR X8, [X0]
	0x01D87DB4 CMP X8, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2652000
	008 Move W8, [X20+2460]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x236F000
	015 Move X0, [X0+1744]
	016 Call 0x1C17CF4
	017 Move X0, 0x2370000
	018 Move X0, [X0+2496]
	019 Call 0x1C17CF4
	020 Move X0, 0x2370000
	021 Move X0, [X0+2504]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2460], W8
	025 Move X23, [X19+32]
	026 Compare X23, 0
	027 JumpIfEqual {104}
	028 Move X22, 0x236F000
	029 Move X22, [X22+1744]
	030 Move X21, 0x2370000
	031 Move X20, [X23+32]
	032 Move X0, [X22]
	033 Move X21, [X21+2496]
	034 Call 0x1C17F10
	035 Move X2, [X21]
	036 Move X1, X19
	037 Move X3, X31
	038 Move X21, X0
	039 Call Action`1<Object>..ctor, X0, X1, X2
	040 Move X0, X20
	041 Move X1, X21
	042 Move X2, X31
	043 Call Delegate.Combine, X0, X1
	044 Compare X0, 0
	045 JumpIfEqual {59}
	046 Move X21, [X22]
	047 Move X20, X0
	048 Move X1, X21
	049 Call 0x1C17E00
	050 Compare X0, 0
	051 JumpIfEqual {92}
	052 Move [X23+32], X0
	053 Move X21, [X22]
	054 Move X0, X20
	055 Move X1, X21
	056 Call 0x1C17E00
	057 Compare X0, 0
	058 JumpIfNotEqual {60}
	059 Move [X23+32], X31
	060 Move X23, [X19+32]
	061 Compare X23, 0
	062 JumpIfEqual {104}
	063 Move X0, [X22]
	064 Move X21, 0x2370000
	065 Move X20, [X23+40]
	066 Move X21, [X21+2504]
	067 Call 0x1C17F10
	068 Move X2, [X21]
	069 Move X1, X19
	070 Move X3, X31
	071 Move X21, X0
	072 Call Action`1<Object>..ctor, X0, X1, X2
	073 Move X0, X20
	074 Move X1, X21
	075 Move X2, X31
	076 Call Delegate.Combine, X0, X1
	077 Compare X0, 0
	078 JumpIfEqual {95}
	079 Move X21, [X22]
	080 Move X20, X0
	081 Move X1, X21
	082 Call 0x1C17E00
	083 Compare X0, 0
	084 JumpIfEqual {92}
	085 Move [X23+40], X0
	086 Move X21, [X22]
	087 Move X0, X20
	088 Move X1, X21
	089 Call 0x1C17E00
	090 Compare X0, 0
	091 JumpIfNotEqual {96}
	092 Move X0, X20
	093 Move X1, X21
	094 Call 0x1C181E0
	095 Move [X23+40], X31
	096 Move X0, X19
	097 Move X20, [X31+32]
	098 Move X19, [X31+40]
	099 Move X22, [X31+16]
	100 Move X21, [X31+24]
	101 Move W1, W31
	102 Move X30, [X31+48]
	103 Move X23, [X31+56]
	104 Call 0x1C17F20

Method: System.Void TriggerEnter(UnityEngine.Collider other)

Disassembly:
	0x01D88004 LDR X0, [X8 + 0x40]
	0x01D88008 LDR X2, [X8 + 0x28]
	0x01D8800C BR X3
	0x01D88010 RET
	0x01D88014 LDR X8, [X0 + 0x78]
	0x01D88018 CBZ X8, 0x1D88030
	0x01D8801C LDR X1, [X0 + 0x68]
	0x01D88020 LDR X3, [X8 + 0x18]
	0x01D88024 LDR X0, [X8 + 0x40]
	0x01D88028 LDR X2, [X8 + 0x28]
	0x01D8802C BR X3
	0x01D88030 RET
	0x01D88034 LDR X8, [X0 + 0x80]
	0x01D88038 CBZ X8, 0x1D88050
	0x01D8803C LDR X1, [X0 + 0x68]
	0x01D88040 LDR X3, [X8 + 0x18]
	0x01D88044 LDR X0, [X8 + 0x40]
	0x01D88048 LDR X2, [X8 + 0x28]
	0x01D8804C BR X3
	0x01D88050 RET
	0x01D88054 LDR X8, [X0 + 0x88]
	0x01D88058 CBZ X8, 0x1D88070
	0x01D8805C LDR X1, [X0 + 0x68]
	0x01D88060 LDR X3, [X8 + 0x18]
	0x01D88064 LDR X0, [X8 + 0x40]
	0x01D88068 LDR X2, [X8 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2651000
	006 Move W8, [X21+2461]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x236E000
	014 Move X0, [X0+1896]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2461], W8
	018 Compare X20, 0
	019 JumpIfEqual {37}
	020 Move X8, 0x236E000
	021 Move X8, [X8+1896]
	022 Move X0, X20
	023 Move X2, X31
	024 Move X1, [X8]
	025 Call Component.CompareTag, X0, X1
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {32}
	030 Move W8, 1
	031 Move [X19+96], W8
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return 
	037 Call 0x1C17F20

Method: System.Void TriggerExit(UnityEngine.Collider other)

Disassembly:
	0x01D8806C BR X3
	0x01D88070 RET
	0x01D88074 LDR X8, [X0 + 0x90]
	0x01D88078 CBZ X8, 0x1D88090
	0x01D8807C LDR X1, [X0 + 0x68]
	0x01D88080 LDR X3, [X8 + 0x18]
	0x01D88084 LDR X0, [X8 + 0x40]
	0x01D88088 LDR X2, [X8 + 0x28]
	0x01D8808C BR X3
	0x01D88090 RET
	0x01D88094 LDR X8, [X0 + 0x98]
	0x01D88098 CBZ X8, 0x1D880B0
	0x01D8809C LDR X1, [X0 + 0x68]
	0x01D880A0 LDR X3, [X8 + 0x18]
	0x01D880A4 LDR X0, [X8 + 0x40]
	0x01D880A8 LDR X2, [X8 + 0x28]
	0x01D880AC BR X3
	0x01D880B0 RET
	0x01D880B4 MOV X1, X31
	0x01D880B8 B 0x3C36C30
	0x01D880BC MOV X1, X31
	0x01D880C0 B 0x3C36C30
	0x01D880C4 STP X30, X19, [X31 - 0x10]!
	0x01D880C8 LDR X8, [X0 + 0x50]
	0x01D880CC CBZ X8, 0x1D880DC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2651000
	006 Move W8, [X21+2462]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x236E000
	014 Move X0, [X0+1896]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2462], W8
	018 Compare X20, 0
	019 JumpIfEqual {36}
	020 Move X8, 0x236E000
	021 Move X8, [X8+1896]
	022 Move X0, X20
	023 Move X2, X31
	024 Move X1, [X8]
	025 Call Component.CompareTag, X0, X1
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {31}
	030 Move [X19+96], W31
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return 
	036 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01D880D0 LDR X0, [X8]
	0x01D880D4 LDP X30, X19, [X31], #0x10
	0x01D880D8 RET
	0x01D880DC ADRP X0, 0x236B000
	0x01D880E0 LDR X0, [X0 + 0x5B0]
	0x01D880E4 BL 0x1C16D08
	0x01D880E8 BL 0x1C16F10
	0x01D880EC MOV X19, X0
	0x01D880F0 ADRP X0, 0x236E000
	0x01D880F4 LDR X0, [X0 + 0xA18]
	0x01D880F8 BL 0x1C16D08
	0x01D880FC MOV X1, X0
	0x01D88100 MOV X0, X19
	0x01D88104 MOV X2, X31
	0x01D88108 BL 0x337DF1C
	0x01D8810C ADRP X0, 0x236E000
	0x01D88110 LDR X0, [X0 + 0xA20]
	0x01D88114 BL 0x1C16D08
	0x01D88118 MOV X1, X0
	0x01D8811C MOV X0, X19
	0x01D88120 BL 0x1C16DEC
	0x01D88124 STP X30, X19, [X31 - 0x10]!
	0x01D88128 LDR X8, [X0 + 0x50]
	0x01D8812C CBZ X8, 0x1D8813C
	0x01D88130 STR X1, [X8]
	0x01D88134 LDP X30, X19, [X31], #0x10
	0x01D88138 RET
	0x01D8813C ADRP X0, 0x236B000
	0x01D88140 LDR X0, [X0 + 0x5B0]
	0x01D88144 BL 0x1C16D08
	0x01D88148 BL 0x1C16F10
	0x01D8814C MOV X19, X0
	0x01D88150 ADRP X0, 0x236E000
	0x01D88154 LDR X0, [X0 + 0xA18]
	0x01D88158 BL 0x1C16D08

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move W9, [X0+96]
	005 Move W8, [X0+97]
	006 Move X19, X0
	007 Compare W9, 0
	008 JumpIfEqual {22}
	009 Compare W8, 0
	010 JumpIfNotEqual {30}
	011 Move V8, [X19+100]
	012 Move X0, X31
	013 Call Time.get_deltaTime
	014 Add S0, S8, S0
	015 Move S1, 0.25
	016 NotImplemented "Instruction FCMP not yet implemented."
	017 Move [X19+100], S0
	018 Move X0, X19
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Move V8, [X31+32]
	022 Compare W8, 0
	023 JumpIfEqual {30}
	024 Move V8, [X19+100]
	025 Move X0, X31
	026 Call Time.get_deltaTime
	027 Subtract S0, S8, S0
	028 NotImplemented "Instruction FCMP not yet implemented."
	029 Move [X19+100], S0
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Move V8, [X31+32]
	033 Return 
	034 Move X0, X19
	035 Move X30, [X31+16]
	036 Move X19, [X31+24]
	037 Move W1, 1
	038 Move V8, [X31+32]
	039 Call ProximityActivator.TurnOff, X0, X1
	040 Return 

Method: System.Void TurnOn()

Disassembly:
	0x01D8815C MOV X1, X0
	0x01D88160 MOV X0, X19
	0x01D88164 MOV X2, X31
	0x01D88168 BL 0x337DF1C
	0x01D8816C ADRP X0, 0x236E000
	0x01D88170 LDR X0, [X0 + 0xA28]
	0x01D88174 BL 0x1C16D08
	0x01D88178 MOV X1, X0
	0x01D8817C MOV X0, X19
	0x01D88180 BL 0x1C16DEC
	0x01D88184 LDP S0, S1, [X0 + 0xA8]
	0x01D88188 LDR V2, [X0 + 0xB0]
	0x01D8818C RET
	0x01D88190 LDR X0, [X0 + 0xC0]
	0x01D88194 RET
	0x01D88198 LDRB W0, [X0 + 0x84]
	0x01D8819C RET
	0x01D881A0 LDR W8, [X0 + 0x80]
	0x01D881A4 CMP W8, 0x2
	0x01D881A8 CSET W0, CC
	0x01D881AC RET
	0x01D881B0 LDR X0, [X0 + 0xC8]
	0x01D881B4 RET
	0x01D881B8 STP X30, X19, [X31 - 0x10]!
	0x01D881BC MOV X1, X31
	0x01D881C0 MOV X19, X0
	0x01D881C4 BL 0x1E73F88
	0x01D881C8 MOV X0, X19
	0x01D881CC LDP X30, X19, [X31], #0x10
	0x01D881D0 B 0x1D881D4
	0x01D881D4 SUB X31, X31, 0x50
	0x01D881D8 STR D8, [X31 + 0x10]
	0x01D881DC STR X30, [X31 + 0x18]
	0x01D881E0 STP X24, X23, [X31 + 0x20]
	0x01D881E4 STP X22, X21, [X31 + 0x30]
	0x01D881E8 STP X20, X19, [X31 + 0x40]
	0x01D881EC ADRP X20, 0x2650000
	0x01D881F0 LDRB W8, [X20 + 0x9BB]
	0x01D881F4 MOV X19, X0
	0x01D881F8 TBNZ X8, 0x0, 0x1D88264
	0x01D881FC ADRP X0, 0x236E000
	0x01D88200 LDR X0, [X0 + 0xA30]
	0x01D88204 BL 0x1C16CF4
	0x01D88208 ADRP X0, 0x236C000
	0x01D8820C LDR X0, [X0 + 0xE70]
	0x01D88210 BL 0x1C16CF4
	0x01D88214 ADRP X0, 0x236E000
	0x01D88218 LDR X0, [X0 + 0xA38]
	0x01D8821C BL 0x1C16CF4
	0x01D88220 ADRP X0, 0x236E000
	0x01D88224 LDR X0, [X0 + 0xA40]
	0x01D88228 BL 0x1C16CF4
	0x01D8822C ADRP X0, 0x236E000
	0x01D88230 LDR X0, [X0 + 0xA48]
	0x01D88234 BL 0x1C16CF4
	0x01D88238 ADRP X0, 0x236E000
	0x01D8823C LDR X0, [X0 + 0xA50]
	0x01D88240 BL 0x1C16CF4
	0x01D88244 ADRP X0, 0x236B000
	0x01D88248 LDR X0, [X0 + 0x598]
	0x01D8824C BL 0x1C16CF4
	0x01D88250 ADRP X0, 0x236D000
	0x01D88254 LDR X0, [X0 + 0x7C8]
	0x01D88258 BL 0x1C16CF4
	0x01D8825C MOVZ W8, 0x1
	0x01D88260 STRB W8, [X20 + 0x9BB]
	0x01D88264 MOV X0, X19
	0x01D88268 BL 0x1D886B4
	0x01D8826C MOV X0, X19
	0x01D88270 BL 0x1D880C4
	0x01D88274 STR X0, [X31 + 0x8]
	0x01D88278 ADD X0, X31, 0x8
	0x01D8827C MOV X1, X31
	0x01D88280 BL 0x1E74DE4
	0x01D88284 TBZ X0, 0x0, 0x1D882B4
	0x01D88288 LDR X20, [X19 + 0x38]
	0x01D8828C MOV X0, X19
	0x01D88290 BL 0x1D880C4
	0x01D88294 CBZ X20, 0x1D885F4
	0x01D88298 ADRP X8, 0x236E000
	0x01D8829C LDR X8, [X8 + 0xA50]
	0x01D882A0 MOV X1, X0
	0x01D882A4 ADD X2, X19, 0xC0
	0x01D882A8 MOV X0, X20
	0x01D882AC LDR X3, [X8]
	0x01D882B0 BL 0x222BD98
	0x01D882B4 LDR X8, [X19 + 0x90]
	0x01D882B8 CBZ X8, 0x1D882D4
	0x01D882BC LDR W1, [X19 + 0x80]
	0x01D882C0 LDR X2, [X19 + 0xC0]
	0x01D882C4 LDR X9, [X8 + 0x18]
	0x01D882C8 LDR X0, [X8 + 0x40]
	0x01D882CC LDR X3, [X8 + 0x28]
	0x01D882D0 BLR X9
	0x01D882D4 LDR X0, [X19 + 0x40]
	0x01D882D8 CBZ X0, 0x1D885D8
	0x01D882DC LDRB W8, [X0 + 0x60]
	0x01D882E0 TBNZ X8, 0x1, 0x1D885D8
	0x01D882E4 MOV X1, X31
	0x01D882E8 BL 0x1E93668
	0x01D882EC TBZ X0, 0x0, 0x1D885D8
	0x01D882F0 ADRP X22, 0x236B000
	0x01D882F4 LDR X22, [X22 + 0x598]
	0x01D882F8 LDR X20, [X19 + 0xC0]
	0x01D882FC LDR X0, [X22]
	0x01D88300 LDR W8, [X0 + 0xE0]
	0x01D88304 CBNZ W8, 0x1D8830C
	0x01D88308 BL 0x1C16DFC
	0x01D8830C MOV X0, X20
	0x01D88310 MOV X1, X31
	0x01D88314 MOV X2, X31
	0x01D88318 BL 0x3C354F8
	0x01D8831C TBZ X0, 0x0, 0x1D8841C
	0x01D88320 LDR X23, [X19 + 0xC0]
	0x01D88324 CBZ X23, 0x1D885F4
	0x01D88328 ADRP X24, 0x236C000
	0x01D8832C LDR X20, [X23 + 0x1C8]
	0x01D88330 LDR X24, [X24 + 0xE70]
	0x01D88334 LDR X0, [X24]
	0x01D88338 BL 0x1C16F10
	0x01D8833C ADRP X8, 0x236E000
	0x01D88340 LDR X8, [X8 + 0xA40]
	0x01D88344 MOV X1, X19
	0x01D88348 MOV X3, X31
	0x01D8834C MOV X21, X0
	0x01D88350 LDR X2, [X8]
	0x01D88354 BL 0x3314368
	0x01D88358 MOV X0, X20
	0x01D8835C MOV X1, X21
	0x01D88360 MOV X2, X31
	0x01D88364 BL 0x33C0DE4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2651000
	007 Move W8, [X20+2463]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x236E000
	014 Move X0, [X0+1456]
	015 Call 0x1C17CF4
	016 Move X0, 0x236E000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move X0, 0x236F000
	020 Move X0, [X0+2512]
	021 Call 0x1C17CF4
	022 Move X0, 0x236F000
	023 Move X0, [X0+2528]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+2463], W8
	027 Move X0, [X19+72]
	028 Move W8, 1
	029 Move [X19+97], W8
	030 Compare X0, 0
	031 JumpIfEqual {146}
	032 Move X20, 0x236E000
	033 Move X20, [X20+1448]
	034 Move X1, X31
	035 Call AudioSource.Play, X0
	036 Move X0, [X20]
	037 Move W20, [X19+48]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move W0, W20
	043 Move X1, X31
	044 Call LeanTween.cancel, X0
	045 Move W0, [X19+64]
	046 Move X1, X31
	047 Call LeanTween.cancel, X0
	048 Move X0, [X19+40]
	049 Compare X0, 0
	050 JumpIfEqual {146}
	051 Move X1, X31
	052 Call Component.get_gameObject, X0
	053 Compare X0, 0
	054 JumpIfEqual {146}
	055 Move W1, 1
	056 Move X2, X31
	057 Call GameObject.SetActive, X0, X1
	058 Move X8, -19517440
	059 Move V2, [X8+780]
	060 Move S0, W31
	061 Move S1, 1
	062 Move X0, X31
	063 Call LeanTween.value, V0, V1, V2
	064 Compare X0, 0
	065 JumpIfEqual {146}
	066 Move X22, 0x236E000
	067 Move X21, 0x236F000
	068 Move X22, [X22+1456]
	069 Move X21, [X21+2512]
	070 Move X1, X31
	071 Call LTDescr.setEaseInCubic, X0
	072 Move X8, [X22]
	073 Move X20, X0
	074 Move X0, X8
	075 Call 0x1C17F10
	076 Move X2, [X21]
	077 Move X1, X19
	078 Move X3, X31
	079 Move X21, X0
	080 Call Action`1<Single>..ctor, X0, X1, X2
	081 Compare X20, 0
	082 JumpIfEqual {146}
	083 Move X0, X20
	084 Move X1, X21
	085 Move X2, X31
	086 Call LTDescr.setOnUpdate, X0, X1
	087 Compare X0, 0
	088 JumpIfEqual {146}
	089 Move X1, X31
	090 Call LTDescr.get_id, X0
	091 Move [X19+64], W0
	092 Move S0, W31
	093 Move S1, 1
	094 Move S2, 0.75
	095 Move X0, X31
	096 Call LeanTween.value, V0, V1, V2
	097 Compare X0, 0
	098 JumpIfEqual {146}
	099 Move X21, 0x236F000
	100 Move X21, [X21+2528]
	101 Move X1, X31
	102 Call LTDescr.setEaseInOutCirc, X0
	103 Move X8, [X22]
	104 Move X20, X0
	105 Move X0, X8
	106 Call 0x1C17F10
	107 Move X2, [X21]
	108 Move X1, X19
	109 Move X3, X31
	110 Move X21, X0
	111 Call Action`1<Single>..ctor, X0, X1, X2
	112 Compare X20, 0
	113 JumpIfEqual {146}
	114 Move X0, X20
	115 Move X1, X21
	116 Move X2, X31
	117 Call LTDescr.setOnUpdate, X0, X1
	118 Compare X0, 0
	119 JumpIfEqual {146}
	120 Move X1, X31
	121 Call LTDescr.get_id, X0
	122 Move X20, [X19+88]
	123 Move [X19+48], W0
	124 Compare X20, 0
	125 JumpIfEqual {146}
	126 Move W8, [X20+24]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move W19, W31
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Add X8, X20, W19
	131 Move X0, [X8+32]
	132 Compare X0, 0
	133 JumpIfEqual {146}
	134 Move W1, 1
	135 Move X2, X31
	136 Call GameObject.SetActive, X0, X1
	137 Move W8, [X20+24]
	138 Add W19, W19, 1
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move X20, [X31+32]
	141 Move X19, [X31+40]
	142 Move X22, [X31+16]
	143 Move X21, [X31+24]
	144 Move X30, [X31+48]
	145 Return 
	146 Call 0x1C17F20
	147 Call 0x1C17F28

Method: System.Void TurnOff(System.Boolean playSound = True)

Disassembly:
	0x01D87DB8 B.EQ 0x1D87DC4
	0x01D87DBC B 0x1D87FD8
	0x01D87DC0 STR X0, [X23 + 0x20]
	0x01D87DC4 LDR X23, [X19 + 0x40]
	0x01D87DC8 CBZ X23, 0x1D87FF0
	0x01D87DCC ADRP X21, 0x236F000
	0x01D87DD0 LDR X20, [X23 + 0x20]
	0x01D87DD4 LDR X21, [X21 + 0xA10]
	0x01D87DD8 MOV X0, X1
	0x01D87DDC BL 0x1C16F10
	0x01D87DE0 LDR X2, [X21]
	0x01D87DE4 MOV X1, X19
	0x01D87DE8 MOV X3, X31
	0x01D87DEC MOV X21, X0
	0x01D87DF0 BL 0x3314368
	0x01D87DF4 MOV X0, X20
	0x01D87DF8 MOV X1, X21
	0x01D87DFC MOV X2, X31
	0x01D87E00 BL 0x33C0FDC
	0x01D87E04 LDR X1, [X22]
	0x01D87E08 CBZ X0, 0x1D87E2C
	0x01D87E0C LDR X8, [X0]
	0x01D87E10 CMP X8, X1
	0x01D87E14 B.NE 0x1D87FD8
	0x01D87E18 STR X0, [X23 + 0x20]
	0x01D87E1C LDR X8, [X0]
	0x01D87E20 CMP X8, X1
	0x01D87E24 B.EQ 0x1D87E30
	0x01D87E28 B 0x1D87FD8
	0x01D87E2C STR X0, [X23 + 0x20]
	0x01D87E30 LDR X23, [X19 + 0x48]
	0x01D87E34 CBZ X23, 0x1D87FF0
	0x01D87E38 ADRP X21, 0x236F000
	0x01D87E3C LDR X20, [X23 + 0x20]
	0x01D87E40 LDR X21, [X21 + 0x9E8]
	0x01D87E44 MOV X0, X1
	0x01D87E48 BL 0x1C16F10
	0x01D87E4C LDR X2, [X21]
	0x01D87E50 MOV X1, X19
	0x01D87E54 MOV X3, X31
	0x01D87E58 MOV X21, X0
	0x01D87E5C BL 0x3314368
	0x01D87E60 MOV X0, X20
	0x01D87E64 MOV X1, X21
	0x01D87E68 MOV X2, X31
	0x01D87E6C BL 0x33C0FDC
	0x01D87E70 LDR X1, [X22]
	0x01D87E74 CBZ X0, 0x1D87E98
	0x01D87E78 LDR X8, [X0]
	0x01D87E7C CMP X8, X1
	0x01D87E80 B.NE 0x1D87FD8
	0x01D87E84 STR X0, [X23 + 0x20]
	0x01D87E88 LDR X8, [X0]
	0x01D87E8C CMP X8, X1
	0x01D87E90 B.EQ 0x1D87E9C
	0x01D87E94 B 0x1D87FD8
	0x01D87E98 STR X0, [X23 + 0x20]
	0x01D87E9C LDR X23, [X19 + 0x50]
	0x01D87EA0 CBZ X23, 0x1D87FF0
	0x01D87EA4 ADRP X21, 0x236F000
	0x01D87EA8 LDR X20, [X23 + 0x20]
	0x01D87EAC LDR X21, [X21 + 0x9F0]
	0x01D87EB0 MOV X0, X1
	0x01D87EB4 BL 0x1C16F10
	0x01D87EB8 LDR X2, [X21]
	0x01D87EBC MOV X1, X19
	0x01D87EC0 MOV X3, X31
	0x01D87EC4 MOV X21, X0
	0x01D87EC8 BL 0x3314368
	0x01D87ECC MOV X0, X20
	0x01D87ED0 MOV X1, X21
	0x01D87ED4 MOV X2, X31
	0x01D87ED8 BL 0x33C0FDC
	0x01D87EDC LDR X1, [X22]
	0x01D87EE0 CBZ X0, 0x1D87F04
	0x01D87EE4 LDR X8, [X0]
	0x01D87EE8 CMP X8, X1
	0x01D87EEC B.NE 0x1D87FD8
	0x01D87EF0 STR X0, [X23 + 0x20]
	0x01D87EF4 LDR X8, [X0]
	0x01D87EF8 CMP X8, X1
	0x01D87EFC B.EQ 0x1D87F08
	0x01D87F00 B 0x1D87FD8
	0x01D87F04 STR X0, [X23 + 0x20]
	0x01D87F08 LDR X23, [X19 + 0x58]
	0x01D87F0C CBZ X23, 0x1D87FF0
	0x01D87F10 ADRP X21, 0x236F000
	0x01D87F14 LDR X20, [X23 + 0x20]
	0x01D87F18 LDR X21, [X21 + 0xA08]
	0x01D87F1C MOV X0, X1
	0x01D87F20 BL 0x1C16F10
	0x01D87F24 LDR X2, [X21]
	0x01D87F28 MOV X1, X19
	0x01D87F2C MOV X3, X31
	0x01D87F30 MOV X21, X0
	0x01D87F34 BL 0x3314368
	0x01D87F38 MOV X0, X20
	0x01D87F3C MOV X1, X21
	0x01D87F40 MOV X2, X31
	0x01D87F44 BL 0x33C0FDC
	0x01D87F48 LDR X1, [X22]
	0x01D87F4C CBZ X0, 0x1D87F70
	0x01D87F50 LDR X8, [X0]
	0x01D87F54 CMP X8, X1
	0x01D87F58 B.NE 0x1D87FD8
	0x01D87F5C STR X0, [X23 + 0x20]
	0x01D87F60 LDR X8, [X0]
	0x01D87F64 CMP X8, X1
	0x01D87F68 B.EQ 0x1D87F74
	0x01D87F6C B 0x1D87FD8
	0x01D87F70 STR X0, [X23 + 0x20]
	0x01D87F74 LDR X23, [X19 + 0x60]
	0x01D87F78 CBZ X23, 0x1D87FF0
	0x01D87F7C ADRP X21, 0x236F000
	0x01D87F80 LDR X20, [X23 + 0x20]
	0x01D87F84 LDR X21, [X21 + 0x9F8]
	0x01D87F88 MOV X0, X1
	0x01D87F8C BL 0x1C16F10
	0x01D87F90 LDR X2, [X21]
	0x01D87F94 MOV X1, X19
	0x01D87F98 MOV X3, X31
	0x01D87F9C MOV X21, X0
	0x01D87FA0 BL 0x3314368
	0x01D87FA4 MOV X0, X20
	0x01D87FA8 MOV X1, X21
	0x01D87FAC MOV X2, X31
	0x01D87FB0 BL 0x33C0FDC
	0x01D87FB4 CBZ X0, 0x1D87FDC
	0x01D87FB8 LDR X1, [X22]
	0x01D87FBC LDR X8, [X0]
	0x01D87FC0 CMP X8, X1
	0x01D87FC4 B.NE 0x1D87FD8
	0x01D87FC8 STR X0, [X23 + 0x20]
	0x01D87FCC LDR X8, [X0]
	0x01D87FD0 CMP X8, X1
	0x01D87FD4 B.EQ 0x1D87FE0
	0x01D87FD8 BL 0x1C171E0
	0x01D87FDC STR X0, [X23 + 0x20]
	0x01D87FE0 LDP X20, X19, [X31 + 0x20]
	0x01D87FE4 LDP X22, X21, [X31 + 0x10]
	0x01D87FE8 LDP X30, X23, [X31], #0x30
	0x01D87FEC RET
	0x01D87FF0 BL 0x1C16F20
	0x01D87FF4 LDR X8, [X0 + 0x70]
	0x01D87FF8 CBZ X8, 0x1D88010
	0x01D87FFC LDR X1, [X0 + 0x68]
	0x01D88000 LDR X3, [X8 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x2652000
	008 Move W8, [X21+2464]
	009 Move W20, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0x236F000
	016 Move X0, [X0+1456]
	017 Call 0x1C17CF4
	018 Move X0, 0x236E000
	019 Move X0, [X0+3696]
	020 Call 0x1C17CF4
	021 Move X0, 0x236F000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move X0, 0x2370000
	025 Move X0, [X0+2512]
	026 Call 0x1C17CF4
	027 Move X0, 0x2370000
	028 Move X0, [X0+2520]
	029 Call 0x1C17CF4
	030 Move X0, 0x2370000
	031 Move X0, [X0+2528]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+2464], W8
	035 Move [X19+97], W31
	036 Move TEMP, X20
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {45}
	040 Move X0, [X19+80]
	041 Compare X0, 0
	042 JumpIfEqual {166}
	043 Move X1, X31
	044 Call AudioSource.Play, X0
	045 Move X8, 0x236F000
	046 Move X8, [X8+1448]
	047 Move W20, [X19+48]
	048 Move X0, [X8]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move W0, W20
	054 Move X1, X31
	055 Call LeanTween.cancel, X0
	056 Move W0, [X19+64]
	057 Move X1, X31
	058 Call LeanTween.cancel, X0
	059 Move S0, 1
	060 Move S1, W31
	061 Move S2, 0.75
	062 Move X0, X31
	063 Call LeanTween.value, V0, V1, V2
	064 Compare X0, 0
	065 JumpIfEqual {166}
	066 Move X22, 0x236F000
	067 Move X21, 0x2370000
	068 Move X22, [X22+1456]
	069 Move X21, [X21+2512]
	070 Move X1, X31
	071 Call LTDescr.setEaseInOutCubic, X0
	072 Move X8, [X22]
	073 Move X20, X0
	074 Move X0, X8
	075 Call 0x1C17F10
	076 Move X2, [X21]
	077 Move X1, X19
	078 Move X3, X31
	079 Move X21, X0
	080 Call Action`1<Single>..ctor, X0, X1, X2
	081 Compare X20, 0
	082 JumpIfEqual {166}
	083 Move X0, X20
	084 Move X1, X21
	085 Move X2, X31
	086 Call LTDescr.setOnUpdate, X0, X1
	087 Compare X0, 0
	088 JumpIfEqual {166}
	089 Move X1, X31
	090 Call LTDescr.get_id, X0
	091 Move [X19+64], W0
	092 Move S0, 1
	093 Move S1, W31
	094 Move S2, 0.5
	095 Move X0, X31
	096 Call LeanTween.value, V0, V1, V2
	097 Compare X0, 0
	098 JumpIfEqual {166}
	099 Move X21, 0x2370000
	100 Move X21, [X21+2528]
	101 Move X1, X31
	102 Call LTDescr.setEaseInCubic, X0
	103 Move X8, [X22]
	104 Move X20, X0
	105 Move X0, X8
	106 Call 0x1C17F10
	107 Move X2, [X21]
	108 Move X1, X19
	109 Move X3, X31
	110 Move X21, X0
	111 Call Action`1<Single>..ctor, X0, X1, X2
	112 Compare X20, 0
	113 JumpIfEqual {166}
	114 Move X22, 0x236E000
	115 Move X23, 0x2370000
	116 Move X22, [X22+3696]
	117 Move X23, [X23+2520]
	118 Move X0, X20
	119 Move X1, X21
	120 Move X2, X31
	121 Call LTDescr.setOnUpdate, X0, X1
	122 Move X8, [X22]
	123 Move X20, X0
	124 Move X0, X8
	125 Call 0x1C17F10
	126 Move X2, [X23]
	127 Move X1, X19
	128 Move X3, X31
	129 Move X21, X0
	130 Call Action..ctor, X0, X1, X2
	131 Compare X20, 0
	132 JumpIfEqual {166}
	133 Move X0, X20
	134 Move X1, X21
	135 Move X2, X31
	136 Call LTDescr.setOnComplete, X0, X1
	137 Compare X0, 0
	138 JumpIfEqual {166}
	139 Move X1, X31
	140 Call LTDescr.get_id, X0
	141 Move X20, [X19+88]
	142 Move [X19+48], W0
	143 Compare X20, 0
	144 JumpIfEqual {166}
	145 Move W8, [X20+24]
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move W19, W31
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Add X8, X20, W19
	150 Move X0, [X8+32]
	151 Compare X0, 0
	152 JumpIfEqual {166}
	153 Move W1, W31
	154 Move X2, X31
	155 Call GameObject.SetActive, X0, X1
	156 Move W8, [X20+24]
	157 Add W19, W19, 1
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move X20, [X31+32]
	160 Move X19, [X31+40]
	161 Move X22, [X31+16]
	162 Move X21, [X31+24]
	163 Move X30, [X31+48]
	164 Move X23, [X31+56]
	165 Return 
	166 Call 0x1C17F20
	167 Call 0x1C17F28

Method: System.Void PlaceholderTween(System.Single f)

Disassembly:
	0x01D88368 CBZ X0, 0x1D88390
	0x01D8836C LDR X1, [X24]
	0x01D88370 LDR X8, [X0]
	0x01D88374 CMP X8, X1
	0x01D88378 B.NE 0x1D8838C
	0x01D8837C STR X0, [X23 + 0x1C8]
	0x01D88380 LDR X8, [X0]
	0x01D88384 CMP X8, X1
	0x01D88388 B.EQ 0x1D88394
	0x01D8838C BL 0x1C171E0
	0x01D88390 STR X0, [X23 + 0x1C8]
	0x01D88394 LDR X23, [X19 + 0xC0]
	0x01D88398 CBZ X23, 0x1D885F4
	0x01D8839C ADRP X24, 0x236E000
	0x01D883A0 LDR X20, [X23 + 0x1F0]
	0x01D883A4 LDR X24, [X24 + 0xA30]
	0x01D883A8 LDR X0, [X24]
	0x01D883AC BL 0x1C16F10
	0x01D883B0 ADRP X8, 0x236E000
	0x01D883B4 LDR X8, [X8 + 0xA38]
	0x01D883B8 MOV X1, X19
	0x01D883BC MOV X3, X31
	0x01D883C0 MOV X21, X0
	0x01D883C4 LDR X2, [X8]
	0x01D883C8 BL 0x2A6B948
	0x01D883CC MOV X0, X20
	0x01D883D0 MOV X1, X21
	0x01D883D4 MOV X2, X31
	0x01D883D8 BL 0x33C0DE4
	0x01D883DC CBZ X0, 0x1D88418
	0x01D883E0 LDR X21, [X24]
	0x01D883E4 MOV X20, X0
	0x01D883E8 MOV X1, X21
	0x01D883EC BL 0x1C16E00
	0x01D883F0 CBZ X0, 0x1D8840C
	0x01D883F4 STR X0, [X23 + 0x1F0]
	0x01D883F8 LDR X21, [X24]
	0x01D883FC MOV X0, X20
	0x01D88400 MOV X1, X21
	0x01D88404 BL 0x1C16E00
	0x01D88408 CBNZ X0, 0x1D8841C
	0x01D8840C MOV X0, X20
	0x01D88410 MOV X1, X21
	0x01D88414 BL 0x1C171E0
	0x01D88418 STR X31, [X23 + 0x1F0]
	0x01D8841C LDR W8, [X19 + 0x80]
	0x01D88420 CMP W8, 0x2
	0x01D88424 B.NE 0x1D884B4
	0x01D88428 LDR X0, [X22]
	0x01D8842C LDR X20, [X19 + 0xC0]
	0x01D88430 LDR W8, [X0 + 0xE0]
	0x01D88434 CBNZ W8, 0x1D8843C
	0x01D88438 BL 0x1C16DFC
	0x01D8843C MOV X0, X20
	0x01D88440 MOV X1, X31
	0x01D88444 MOV X2, X31
	0x01D88448 BL 0x3C354F8
	0x01D8844C FMOV S8, W31
	0x01D88450 TBZ X0, 0x0, 0x1D884F4
	0x01D88454 LDR X0, [X19 + 0xC0]
	0x01D88458 CBZ X0, 0x1D885F4
	0x01D8845C ADRP X8, 0x236E000
	0x01D88460 LDR X8, [X8 + 0xA48]
	0x01D88464 LDR X1, [X8]
	0x01D88468 BL 0x21A3894
	0x01D8846C LDR X8, [X22]
	0x01D88470 MOV X19, X0
	0x01D88474 LDR W9, [X8 + 0xE0]
	0x01D88478 CBNZ W9, 0x1D88484
	0x01D8847C MOV X0, X8
	0x01D88480 BL 0x1C16DFC
	0x01D88484 MOV X0, X19
	0x01D88488 MOV X1, X31
	0x01D8848C MOV X2, X31
	0x01D88490 BL 0x3C354F8
	0x01D88494 TBZ X0, 0x0, 0x1D884F4
	0x01D88498 CBZ X19, 0x1D885F4
	0x01D8849C MOV X0, X19
	0x01D884A0 MOV X1, X31
	0x01D884A4 BL 0x1D9BAA0
	0x01D884A8 MOV V8.16B, V0.16B
	0x01D884AC MOVZ W19, 0x1
	0x01D884B0 B 0x1D884F8
	0x01D884B4 CMP W8, 0x1
	0x01D884B8 B.HI 0x1D885D8
	0x01D884BC LDR X0, [X22]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D8
	003 Move [X31+32], X30
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X19, X0
	008 Move X0, [X0+56]
	009 Compare X0, 0
	010 JumpIfEqual {101}
	011 Move V8, V0
	012 Move S0, 1
	013 Subtract S0, S0, S8
	014 Move X1, X31
	015 Call CanvasGroup.set_alpha, X0, V0
	016 Move X0, [X19+56]
	017 Compare X0, 0
	018 JumpIfEqual {101}
	019 Move X1, X31
	020 Call Component.get_transform, X0
	021 Move X21, 0x2651000
	022 Move W8, [X21+2139]
	023 Move X20, X0
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0x236C000
	027 Move X0, [X0+1440]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+2139], W8
	031 Move S0, 1
	032 NotImplemented "Instruction FCMP not yet implemented."
	033 NotImplemented "Instruction FMIN not yet implemented."
	034 Move S1, W31
	035 NotImplemented "Instruction FCSEL not yet implemented."
	036 Compare X20, 0
	037 JumpIfEqual {101}
	038 Move X8, 0x236C000
	039 Move X8, [X8+1440]
	040 Move S2, 1.5
	041 Move V3, 0
	042 Move X0, X20
	043 Move X8, [X8]
	044 Move X1, X31
	045 Move [X31], V4
	046 Move X8, [X8+184]
	047 Move V0, [X8+20]
	048 NotImplemented "Instruction LDUR not yet implemented."
	049 Subtract S2, S2, S0
	050 Subtract V3, V3, V1
	051 Multiply S2, S4, S2
	052 NotImplemented "Instruction INVALID not yet implemented."
	053 Add S2, S0, S2
	054 Add V0, V1, V3
	055 Move S1, V0.S[1]
	056 Call Transform.set_localScale, X0, X1
	057 Move X0, [X19+56]
	058 Compare X0, 0
	059 JumpIfEqual {101}
	060 Move X1, X31
	061 Call Component.get_transform, X0
	062 Move X8, [X19+56]
	063 Compare X8, 0
	064 JumpIfEqual {101}
	065 Move X20, X0
	066 Move X0, X8
	067 Move X1, X31
	068 Call Component.get_transform, X0
	069 Compare X0, 0
	070 JumpIfEqual {101}
	071 Move X1, X31
	072 Call Transform.get_localPosition, X0
	073 Move X0, [X19+56]
	074 Compare X0, 0
	075 JumpIfEqual {101}
	076 Move X1, X31
	077 Move V8, V0
	078 Call Component.get_transform, X0
	079 Compare X0, 0
	080 JumpIfEqual {101}
	081 Move X1, X31
	082 Call Transform.get_localPosition, X0
	083 Compare X20, 0
	084 JumpIfEqual {101}
	085 Move V2, [X31]
	086 Move S0, 1.5
	087 Move X0, X20
	088 Move X20, [X31+48]
	089 Move X19, [X31+56]
	090 Multiply S0, S2, S0
	091 Move S2, W31
	092 Add S2, S0, S2
	093 Move V0, V8
	094 Move X30, [X31+32]
	095 Move X21, [X31+40]
	096 Move V8, [X31+16]
	097 Move X1, X31
	098 Add X31, X31, 64
	099 Call Transform.set_localPosition, X0, X1
	100 Return 
	101 Call 0x1C17F20

Method: System.Void UITween(System.Single f)

Disassembly:
	0x01D884C0 LDR X20, [X19 + 0xC0]
	0x01D884C4 LDR W8, [X0 + 0xE0]
	0x01D884C8 CBNZ W8, 0x1D884D0
	0x01D884CC BL 0x1C16DFC
	0x01D884D0 MOV X0, X20
	0x01D884D4 MOV X1, X31
	0x01D884D8 MOV X2, X31
	0x01D884DC BL 0x3C354F8
	0x01D884E0 TBZ X0, 0x0, 0x1D88564
	0x01D884E4 LDR X8, [X19 + 0xC0]
	0x01D884E8 CBZ X8, 0x1D885F4
	0x01D884EC LDR W20, [X8 + 0xBC]
	0x01D884F0 B 0x1D88568
	0x01D884F4 MOV W19, W31
	0x01D884F8 ADRP X20, 0x236D000
	0x01D884FC LDR X20, [X20 + 0x7C8]
	0x01D88500 LDR X0, [X20]
	0x01D88504 LDR W8, [X0 + 0xE0]
	0x01D88508 CBNZ W8, 0x1D88510
	0x01D8850C BL 0x1C16DFC

ISIL:
	001 Move [X31-16], D8
	002 Move [X31+8], X30
	003 Move X0, [X0+40]
	004 Compare X0, 0
	005 JumpIfEqual {23}
	006 Move X1, X31
	007 Move V8, V0
	008 Call Component.get_transform, X0
	009 Compare X0, 0
	010 JumpIfEqual {23}
	011 Move S1, 1
	012 Move X30, [X31+8]
	013 NotImplemented "Instruction FMIN not yet implemented."
	014 NotImplemented "Instruction FCMP not yet implemented."
	015 Subtract S2, S1, S2
	016 Move S0, W31
	017 NotImplemented "Instruction FCSEL not yet implemented."
	018 Move S1, W31
	019 Move X1, X31
	020 Move V8, [X31+16]
	021 Call Transform.set_localPosition, X0, X1
	022 Return 
	023 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D88510 ADRP X21, 0x2650000
	0x01D88514 LDRB W8, [X21 + 0x85D]
	0x01D88518 CBNZ W8, 0x1D88530
	0x01D8851C ADRP X0, 0x236D000
	0x01D88520 LDR X0, [X0 + 0x7C8]
	0x01D88524 BL 0x1C16CF4
	0x01D88528 MOVZ W8, 0x1
	0x01D8852C STRB W8, [X21 + 0x85D]
	0x01D88530 LDR X0, [X20]
	0x01D88534 LDR W8, [X0 + 0xE0]
	0x01D88538 CBNZ W8, 0x1D88544
	0x01D8853C BL 0x1C16DFC
	0x01D88540 LDR X0, [X20]
	0x01D88544 LDR X8, [X0 + 0xB8]
	0x01D88548 LDR X0, [X8]
	0x01D8854C CBZ X0, 0x1D885F4
	0x01D88550 MOV W1, W19
	0x01D88554 MOV V0.16B, V8.16B
	0x01D88558 MOV X2, X31
	0x01D8855C BL 0x1DC2C54
	0x01D88560 B 0x1D885D8
	0x01D88564 MOV W20, W31
	0x01D88568 ADRP X21, 0x236D000
	0x01D8856C LDR X21, [X21 + 0x7C8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2651000
	006 Move X21, 0x236E000
	007 Move W8, [X20+2465]
	008 Move X21, [X21+1968]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x236E000
	015 Move X0, [X0+1968]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2465], W8
	019 Move X0, [X21]
	020 Move W1, W31
	021 Call 0x1C17D6C
	022 Move W8, 0x3F800000
	023 Move [X19+88], X0
	024 Move [X19+108], W8
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call MonoBehaviour..ctor, X0
	032 Return 

Method: System.Void <TurnOff>b__19_0()

Disassembly:
	0x01D88570 LDR X0, [X21]
	0x01D88574 LDR W8, [X0 + 0xE0]
	0x01D88578 CBNZ W8, 0x1D88580
	0x01D8857C BL 0x1C16DFC
	0x01D88580 ADRP X22, 0x2650000
	0x01D88584 LDRB W8, [X22 + 0x85D]
	0x01D88588 CBNZ W8, 0x1D885A0
	0x01D8858C ADRP X0, 0x236D000
	0x01D88590 LDR X0, [X0 + 0x7C8]
	0x01D88594 BL 0x1C16CF4
	0x01D88598 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+40]
	003 Compare X0, 0
	004 JumpIfEqual {14}
	005 Move X1, X31
	006 Call Component.get_gameObject, X0
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W1, W31
	010 Move X2, X31
	011 Move X30, [X31+16]
	012 Call GameObject.SetActive, X0, X1
	013 Return 
	014 Call 0x1C17F20

