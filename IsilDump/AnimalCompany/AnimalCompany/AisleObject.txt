Type: AnimalCompany.AisleObject

Method: UnityEngine.Vector3 get_center()

Disassembly:
	0x01DD62E8 CBZ X0, 0x1DD685C
	0x01DD62EC ADRP X9, 0x231D000
	0x01DD62F0 LDR X1, [X31 + 0x20]
	0x01DD62F4 LDR W10, [X0 + 0x1C]
	0x01DD62F8 LDR X8, [X0 + 0x10]
	0x01DD62FC LDR X9, [X9 + 0x5E0]
	0x01DD6300 ADD W10, W10, 0x1
	0x01DD6304 LDR X9, [X9]
	0x01DD6308 STR W10, [X0 + 0x1C]
	0x01DD630C CBZ X8, 0x1DD685C
	0x01DD6310 LDRSW X10, [X0 + 0x18]
	0x01DD6314 LDR W11, [X8 + 0x18]
	0x01DD6318 CMP W10, W11
	0x01DD631C B.CS 0x1DD65E0
	0x01DD6320 ADD W9, W10, 0x1
	0x01DD6324 ADD X8, X8, X10, 0x3, LSL
	0x01DD6328 STR W9, [X0 + 0x18]
	0x01DD632C STR X1, [X8 + 0x20]
	0x01DD6330 B 0x1DD65F0
	0x01DD6334 LDR X8, [X19 + 0xD8]
	0x01DD6338 CBZ X8, 0x1DD685C
	0x01DD633C LDP W2, W9, [X8 + 0x18]
	0x01DD6340 ADD W9, W9, 0x1
	0x01DD6344 CMP W2, 0x1
	0x01DD6348 STP W31, W9, [X8 + 0x18]
	0x01DD634C B.LT 0x1DD6360
	0x01DD6350 LDR X0, [X8 + 0x10]
	0x01DD6354 MOV W1, W31
	0x01DD6358 MOV X3, X31
	0x01DD635C BL 0x339FA34

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X1, X31
	007 Move X19, X0
	008 Call Component.get_transform, X0
	009 Compare X0, 0
	010 JumpIfEqual {37}
	011 Move X1, X31
	012 Call Transform.get_position, X0
	013 Move X0, X19
	014 Move X1, X31
	015 Move V8, V0
	016 Move V9, V1
	017 Move V10, V2
	018 Call Component.get_transform, X0
	019 Compare X0, 0
	020 JumpIfEqual {37}
	021 Move X1, X31
	022 Call Transform.get_rotation, X0
	023 Move S4, [X19+36]
	024 Move S5, [X19+40]
	025 Move V6, [X19+44]
	026 Move X0, X31
	027 Call Quaternion.op_Multiply, X0, X1
	028 Add S0, S8, S0
	029 Add S1, S9, S1
	030 Move X30, [X31+32]
	031 Move X19, [X31+40]
	032 Move D9, [X31+16]
	033 Move D8, [X31+24]
	034 Add S2, S10, S2
	035 Move V10, [X31+48]
	036 Return X0
	037 Call 0x1C17F20

Method: UnityEngine.Vector3 get_direction()

Disassembly:
	0x01DD6360 ADD X1, X31, 0x28
	0x01DD6364 MOV X0, X23
	0x01DD6368 MOV X2, X31
	0x01DD636C BL 0x1E02DA8
	0x01DD6370 TBZ X0, 0x0, 0x1DD63DC
	0x01DD6374 LDR X0, [X19 + 0xD8]
	0x01DD6378 CBZ X0, 0x1DD685C
	0x01DD637C LDR X1, [X31 + 0x28]
	0x01DD6380 LDR X2, [X28]
	0x01DD6384 BL 0x301C318
	0x01DD6388 TBNZ X0, 0x0, 0x1DD6284
	0x01DD638C LDR X0, [X19 + 0xD8]
	0x01DD6390 CBZ X0, 0x1DD685C
	0x01DD6394 ADRP X9, 0x2322000
	0x01DD6398 LDR X1, [X31 + 0x28]
	0x01DD639C LDR W10, [X0 + 0x1C]
	0x01DD63A0 LDR X8, [X0 + 0x10]
	0x01DD63A4 LDR X9, [X9 + 0x838]
	0x01DD63A8 ADD W10, W10, 0x1
	0x01DD63AC LDR X9, [X9]
	0x01DD63B0 STR W10, [X0 + 0x1C]
	0x01DD63B4 CBZ X8, 0x1DD685C
	0x01DD63B8 LDRSW X10, [X0 + 0x18]
	0x01DD63BC LDR W11, [X8 + 0x18]
	0x01DD63C0 CMP W10, W11
	0x01DD63C4 B.CS 0x1DD6480
	0x01DD63C8 ADD W9, W10, 0x1
	0x01DD63CC ADD X8, X8, X10, 0x3, LSL
	0x01DD63D0 STR W9, [X0 + 0x18]
	0x01DD63D4 STR X1, [X8 + 0x20]
	0x01DD63D8 B 0x1DD6490
	0x01DD63DC CBZ X23, 0x1DD685C
	0x01DD63E0 MOV X0, X23
	0x01DD63E4 MOV X1, X31
	0x01DD63E8 BL 0x3C8E82C
	0x01DD63EC ADRP X8, 0x231D000
	0x01DD63F0 LDR X8, [X8 + 0x598]
	0x01DD63F4 MOV X24, X0
	0x01DD63F8 LDR X8, [X8]
	0x01DD63FC LDR W9, [X8 + 0xE0]
	0x01DD6400 CBNZ W9, 0x1DD640C
	0x01DD6404 MOV X0, X8
	0x01DD6408 BL 0x1C16DFC
	0x01DD640C MOV X0, X24
	0x01DD6410 MOV X1, X31
	0x01DD6414 MOV X2, X31
	0x01DD6418 BL 0x3C354F8
	0x01DD641C TBZ X0, 0x0, 0x1DD6284
	0x01DD6420 MOV X0, X23
	0x01DD6424 MOV X1, X31
	0x01DD6428 BL 0x3C8E82C
	0x01DD642C MOV X24, X0
	0x01DD6430 MOV X0, X19
	0x01DD6434 MOV X1, X31
	0x01DD6438 BL 0x3C32E90
	0x01DD643C CBZ X0, 0x1DD685C
	0x01DD6440 MOV X1, X31
	0x01DD6444 BL 0x3C3F58C
	0x01DD6448 CBZ X24, 0x1DD685C
	0x01DD644C MOV V3.16B, V0.16B
	0x01DD6450 LDR V4, [X19 + 0x90]
	0x01DD6454 LDR V0, [X31 + 0xC]
	0x01DD6458 MOV V7.16B, V1.16B
	0x01DD645C MOV V6.16B, V2.16B
	0x01DD6460 FMOV S5, 1
	0x01DD6464 MOV X0, X24
	0x01DD6468 MOV V1.16B, V3.16B
	0x01DD646C MOV V2.16B, V7.16B
	0x01DD6470 MOV V3.16B, V6.16B
	0x01DD6474 MOV X1, X31
	0x01DD6478 BL 0x3C8F6F0
	0x01DD647C B 0x1DD6284
	0x01DD6480 LDR X8, [X9 + 0x20]
	0x01DD6484 LDR X8, [X8 + 0xC0]
	0x01DD6488 LDR X2, [X8 + 0x70]
	0x01DD648C BL 0x301BF90
	0x01DD6490 LDR X24, [X31 + 0x28]
	0x01DD6494 LDR W25, [X19 + 0xA8]
	0x01DD6498 MOV X0, X19
	0x01DD649C MOV X1, X31
	0x01DD64A0 BL 0x3C32E90
	0x01DD64A4 CBZ X0, 0x1DD685C
	0x01DD64A8 MOV X1, X31
	0x01DD64AC BL 0x3C3F58C
	0x01DD64B0 CBZ X23, 0x1DD685C
	0x01DD64B4 LDR X26, [X19 + 0xB8]
	0x01DD64B8 MOV X0, X23
	0x01DD64BC MOV X1, X31
	0x01DD64C0 MOV V8.16B, V0.16B
	0x01DD64C4 MOV V9.16B, V1.16B
	0x01DD64C8 MOV V10.16B, V2.16B
	0x01DD64CC BL 0x3C32ECC
	0x01DD64D0 CBZ X0, 0x1DD685C
	0x01DD64D4 MOV X1, X31
	0x01DD64D8 BL 0x3C356F8
	0x01DD64DC CBZ X0, 0x1DD685C
	0x01DD64E0 MOV X1, X31
	0x01DD64E4 BL 0x3C3F58C
	0x01DD64E8 MOV X0, X19
	0x01DD64EC MOV X1, X31
	0x01DD64F0 MOV V12.16B, V0.16B
	0x01DD64F4 MOV V13.16B, V1.16B
	0x01DD64F8 MOV V14.16B, V2.16B
	0x01DD64FC BL 0x3C32E90
	0x01DD6500 CBZ X0, 0x1DD685C
	0x01DD6504 MOV X1, X31
	0x01DD6508 STP S10, S8, [X31 + 0x10]
	0x01DD650C STR S9, [X31 + 0x1C]

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move W8, [X0+32]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Compare W8, 0
	011 JumpIfNotEqual {103}
	012 Move X1, X31
	013 Call Component.get_transform, X0
	014 Compare X0, 0
	015 JumpIfEqual {126}
	016 Move X1, X31
	017 Call Transform.get_rotation, X0
	018 Move X19, 0x2603000
	019 Move W8, [X19+2591]
	020 Move V8, V0
	021 Move V9, V1
	022 Move V10, V2
	023 Move V11, V3
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0x231E000
	027 Move X0, [X0+1440]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X19+2591], W8
	031 Move X8, 0x231E000
	032 Move X8, [X8+1440]
	033 Move X8, [X8]
	034 Move X8, [X8+184]
	035 Move S4, [X8+72]
	036 Move S5, [X8+76]
	037 Move V6, [X8+80]
	038 Move X1, X31
	039 Call Component.get_transform, X0
	040 Compare X0, 0
	041 JumpIfEqual {126}
	042 Move X1, X31
	043 Call Transform.get_rotation, X0
	044 Move X19, 0x2603000
	045 Move W8, [X19+1926]
	046 Move V8, V0
	047 Move V9, V1
	048 Move V10, V2
	049 Move V11, V3
	050 Compare W8, 0
	051 JumpIfNotEqual {57}
	052 Move X0, 0x231E000
	053 Move X0, [X0+1440]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X19+1926], W8
	057 Move X8, 0x231E000
	058 Move X8, [X8+1440]
	059 Move X8, [X8]
	060 Move X8, [X8+184]
	061 Move S4, [X8+24]
	062 Move S5, [X8+28]
	063 Move V6, [X8+32]
	064 Move X1, X31
	065 Call Component.get_transform, X0
	066 Compare X0, 0
	067 JumpIfEqual {126}
	068 Move X1, X31
	069 Call Transform.get_rotation, X0
	070 Move X19, 0x2603000
	071 Move W8, [X19+2928]
	072 Move V8, V0
	073 Move V9, V1
	074 Move V10, V2
	075 Move V11, V3
	076 Compare W8, 0
	077 JumpIfNotEqual {83}
	078 Move X0, 0x231E000
	079 Move X0, [X0+1440]
	080 Call 0x1C17CF4
	081 Move W8, 1
	082 Move [X19+2928], W8
	083 Move X8, 0x231E000
	084 Move X8, [X8+1440]
	085 Move X8, [X8]
	086 Move X8, [X8+184]
	087 Move S4, [X8+60]
	088 Move S5, [X8+64]
	089 Move V6, [X8+68]
	090 Move V0, V8
	091 Move V1, V9
	092 Move X30, [X31+32]
	093 Move X19, [X31+40]
	094 Move D9, [X31+16]
	095 Move D8, [X31+24]
	096 Move V2, V10
	097 Move V3, V11
	098 Move X0, X31
	099 Move D11, [X31+48]
	100 Move D10, [X31+56]
	101 Call Quaternion.op_Multiply, X0, X1
	102 Return X0
	103 Move X19, 0x2603000
	104 Move W8, [X19+2591]
	105 Compare W8, 0
	106 JumpIfNotEqual {112}
	107 Move X0, 0x231E000
	108 Move X0, [X0+1440]
	109 Call 0x1C17CF4
	110 Move W8, 1
	111 Move [X19+2591], W8
	112 Move X8, 0x231E000
	113 Move X8, [X8+1440]
	114 Move X30, [X31+32]
	115 Move X19, [X31+40]
	116 Move D9, [X31+16]
	117 Move D8, [X31+24]
	118 Move X8, [X8]
	119 Move X8, [X8+184]
	120 Move S0, [X8+72]
	121 Move S1, [X8+76]
	122 Move V2, [X8+80]
	123 Move D11, [X31+48]
	124 Move D10, [X31+56]
	125 Return X0
	126 Call 0x1C17F20

Method: UnityEngine.Vector3[] get_endPoints()

Disassembly:
	0x01DD6510 BL 0x3C3F58C
	0x01DD6514 ADRP X8, 0x2602000
	0x01DD6518 LDRB W8, [X8 + 0x786]
	0x01DD651C MOV V15.16B, V0.16B
	0x01DD6520 MOV V9.16B, V2.16B
	0x01DD6524 STR S1, [X31 + 0x18]
	0x01DD6528 CBNZ W8, 0x1DD6540
	0x01DD652C MOV X0, X20
	0x01DD6530 BL 0x1C16CF4
	0x01DD6534 ADRP X8, 0x2602000
	0x01DD6538 MOVZ W9, 0x1
	0x01DD653C STRB W9, [X8 + 0x786]
	0x01DD6540 LDR X8, [X20]
	0x01DD6544 ADRP X9, 0x2602000
	0x01DD6548 LDRB W9, [X9 + 0x785]
	0x01DD654C LDR X8, [X8 + 0xB8]
	0x01DD6550 LDP S8, S11, [X8 + 0x18]
	0x01DD6554 LDR V10, [X8 + 0x20]
	0x01DD6558 CBNZ W9, 0x1DD6574
	0x01DD655C ADRP X0, 0x231D000
	0x01DD6560 LDR X0, [X0 + 0x5A8]
	0x01DD6564 BL 0x1C16CF4
	0x01DD6568 MOVZ W8, 0x1
	0x01DD656C ADRP X9, 0x2602000
	0x01DD6570 STRB W8, [X9 + 0x785]
	0x01DD6574 ADRP X8, 0x231D000
	0x01DD6578 LDR X8, [X8 + 0x5A8]
	0x01DD657C LDR X0, [X8]
	0x01DD6580 LDR W8, [X0 + 0xE0]
	0x01DD6584 CBNZ W8, 0x1DD658C
	0x01DD6588 BL 0x1C16DFC
	0x01DD658C LDR V1, [X31 + 0x18]
	0x01DD6590 FSUB S0, S12, S15
	0x01DD6594 FSUB S2, S14, S9
	0x01DD6598 FADD S0, S0, S8
	0x01DD659C FSUB S1, S13, S1
	0x01DD65A0 FADD S1, S1, S11
	0x01DD65A4 FADD S2, S2, S10
	0x01DD65A8 FMUL S3, S0, S0
	0x01DD65AC FMUL S4, S1, S1
	0x01DD65B0 FADD S3, S3, S4
	0x01DD65B4 FMUL S4, S2, S2
	0x01DD65B8 FADD S3, S4, S3
	0x01DD65BC LDR V4, [X31 + 0x8]
	0x01DD65C0 FSQRT S3, S3
	0x01DD65C4 FCMP S3, S4
	0x01DD65C8 B.LE 0x1DD6694
	0x01DD65CC LDR V10, [X31 + 0x1C]
	0x01DD65D0 FDIV S12, S0, S3
	0x01DD65D4 FDIV S8, S1, S3
	0x01DD65D8 FDIV S9, S2, S3
	0x01DD65DC B 0x1DD66C8
	0x01DD65E0 LDR X8, [X9 + 0x20]
	0x01DD65E4 LDR X8, [X8 + 0xC0]
	0x01DD65E8 LDR X2, [X8 + 0x70]
	0x01DD65EC BL 0x301BF90
	0x01DD65F0 LDR X23, [X31 + 0x20]
	0x01DD65F4 MOV X0, X19
	0x01DD65F8 MOV X1, X31
	0x01DD65FC BL 0x3C32E90
	0x01DD6600 CBZ X0, 0x1DD685C
	0x01DD6604 MOV X1, X31
	0x01DD6608 BL 0x3C3F58C
	0x01DD660C LDR X8, [X19 + 0x40]
	0x01DD6610 MOV V9.16B, V0.16B
	0x01DD6614 MOV V10.16B, V1.16B
	0x01DD6618 MOV V11.16B, V2.16B
	0x01DD661C CBZ X8, 0x1DD6630
	0x01DD6620 LDR X8, [X8 + 0x20]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x2603000
	009 Move X21, 0x2320000
	010 Move W8, [X20+3121]
	011 Move X21, [X21+2480]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x2320000
	018 Move X0, [X0+2480]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3121], W8
	022 Move X0, [X21]
	023 Move W1, 2
	024 Call 0x1C17D6C
	025 Move X20, X0
	026 Move X0, X19
	027 Call AisleObject.get_center, X0
	028 Move X0, X19
	029 Move V8, V0
	030 Move V9, V1
	031 Move V10, V2
	032 Call AisleObject.get_direction, X0
	033 Compare X20, 0
	034 JumpIfEqual {81}
	035 Move W8, [X20+24]
	036 Compare W8, 0
	037 JumpIfEqual {80}
	038 Move V3, [X19+48]
	039 Move S4, 0.5
	040 Move X0, X19
	041 Multiply S3, S3, S4
	042 Multiply S0, S0, S3
	043 Multiply S1, S1, S3
	044 Multiply S2, S2, S3
	045 Add S0, S8, S0
	046 Add S1, S9, S1
	047 Add S2, S10, S2
	048 Move [X20+32], S0
	049 Move [X20+40], S1
	050 Move [X20+40], S2
	051 Call AisleObject.get_center, X0
	052 Move X0, X19
	053 Move V8, V0
	054 Move V9, V1
	055 Move V10, V2
	056 Call AisleObject.get_direction, X0
	057 Move W8, [X20+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move V3, [X19+48]
	060 Move S4, 0.5
	061 Move X0, X20
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Multiply S3, S3, S4
	065 Multiply S2, S2, S3
	066 Multiply S1, S1, S3
	067 Multiply S0, S0, S3
	068 Subtract S2, S10, S2
	069 Subtract S1, S9, S1
	070 Subtract S0, S8, S0
	071 Move [X20+44], S0
	072 Move [X20+52], S1
	073 Move [X20+52], S2
	074 Move X20, [X31+48]
	075 Move X19, [X31+56]
	076 Move D9, [X31+16]
	077 Move D8, [X31+24]
	078 Move V10, [X31+64]
	079 Return X0
	080 Call 0x1C17F28
	081 Call 0x1C17F20

Method: AnimalCompany.AisleData GetAisleData(System.Single stayOffset)

Disassembly:
	0x01DD6624 CBZ X8, 0x1DD6630
	0x01DD6628 LDR W24, [X8]
	0x01DD662C B 0x1DD6634
	0x01DD6630 MOV X24, X31
	0x01DD6634 CBZ X23, 0x1DD685C
	0x01DD6638 LDR X8, [X23]
	0x01DD663C ADRP X10, 0x231D000
	0x01DD6640 LDR V12, [X19 + 0x90]
	0x01DD6644 LDR V13, [X19 + 0xB4]
	0x01DD6648 LDR X26, [X19 + 0x80]
	0x01DD664C LDR W22, [X19 + 0x68]
	0x01DD6650 LDR W25, [X19 + 0xB0]
	0x01DD6654 LDRH W9, [X8 + 0x12E]
	0x01DD6658 LDR X10, [X10 + 0x5D0]
	0x01DD665C LDR X1, [X10]
	0x01DD6660 CBZ X9, 0x1DD6684
	0x01DD6664 LDR X10, [X8 + 0xB0]
	0x01DD6668 ADD X10, X10, 0x8
	0x01DD666C LDUR X11, [X10 - 0x8]
	0x01DD6670 CMP X11, X1
	0x01DD6674 B.EQ 0x1DD673C
	0x01DD6678 SUBS X9, X9, 0x1
	0x01DD667C ADD X10, X10, 0x10
	0x01DD6680 B.NE 0x1DD666C
	0x01DD6684 MOV X0, X23
	0x01DD6688 MOV W2, W31
	0x01DD668C BL 0x1C5C788
	0x01DD6690 B 0x1DD6748
	0x01DD6694 ADRP X8, 0x2602000
	0x01DD6698 LDRB W8, [X8 + 0x783]
	0x01DD669C LDR V10, [X31 + 0x1C]
	0x01DD66A0 CBNZ W8, 0x1DD66B8
	0x01DD66A4 MOV X0, X20
	0x01DD66A8 BL 0x1C16CF4
	0x01DD66AC MOVZ W8, 0x1
	0x01DD66B0 ADRP X9, 0x2602000
	0x01DD66B4 STRB W8, [X9 + 0x783]
	0x01DD66B8 LDR X8, [X20]
	0x01DD66BC LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-80], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move V8, V0
	012 Move X19, X0
	013 Move X20, X8
	014 Call AisleObject.get_center, X0
	015 Move X0, X19
	016 Move V9, V0
	017 Move V10, V1
	018 Move V11, V2
	019 Call AisleObject.get_direction, X0
	020 Move X0, X19
	021 Move V12, V0
	022 Move V13, V1
	023 Move V14, V2
	024 Call AisleObject.get_endPoints, X0
	025 NotImplemented "Instruction MOVI not yet implemented."
	026 Move X1, X0
	027 Move [X20], V0
	028 Move [X20+8], V0
	029 Move [X20+32], X31
	030 Move X0, X20
	031 Move V0, V9
	032 Move V1, V10
	033 Move V2, V11
	034 Move V3, V12
	035 Move V4, V13
	036 Move V6, V8
	037 Move X20, [X31+64]
	038 Move X19, [X31+72]
	039 Move X30, [X31+56]
	040 Move D9, [X31+40]
	041 Move D8, [X31+48]
	042 Move D11, [X31+24]
	043 Move D10, [X31+32]
	044 Move D13, [X31+8]
	045 Move D12, [X31+16]
	046 Move V5, V14
	047 Move V14, [X31+80]
	048 Call AisleData..ctor, X0, X1, X2, X3, V0
	049 Return X0

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x01DD66C0 LDP S12, S8, [X8]
	0x01DD66C4 LDR V9, [X8 + 0x8]
	0x01DD66C8 LDR V13, [X19 + 0xAC]
	0x01DD66CC LDR X8, [X19 + 0x40]
	0x01DD66D0 LDR X27, [X19 + 0x80]
	0x01DD66D4 CBZ X8, 0x1DD66E8
	0x01DD66D8 LDR X8, [X8 + 0x20]
	0x01DD66DC CBZ X8, 0x1DD66E8
	0x01DD66E0 LDR W28, [X8]
	0x01DD66E4 B 0x1DD66EC
	0x01DD66E8 MOV X28, X31
	0x01DD66EC CBZ X24, 0x1DD685C
	0x01DD66F0 LDR X8, [X24]
	0x01DD66F4 ADRP X10, 0x2320000
	0x01DD66F8 LDR W22, [X19 + 0x68]
	0x01DD66FC LDRH W9, [X8 + 0x12E]
	0x01DD6700 LDR X10, [X10 + 0xBF0]
	0x01DD6704 LDR X1, [X10]
	0x01DD6708 CBZ X9, 0x1DD672C
	0x01DD670C LDR X10, [X8 + 0xB0]
	0x01DD6710 ADD X10, X10, 0x8
	0x01DD6714 LDUR X11, [X10 - 0x8]
	0x01DD6718 CMP X11, X1
	0x01DD671C B.EQ 0x1DD678C
	0x01DD6720 SUBS X9, X9, 0x1
	0x01DD6724 ADD X10, X10, 0x10
	0x01DD6728 B.NE 0x1DD6714
	0x01DD672C MOV X0, X24
	0x01DD6730 MOV W2, W31
	0x01DD6734 BL 0x1C5C788
	0x01DD6738 B 0x1DD6798
	0x01DD673C LDRSW X9, [X10]
	0x01DD6740 ADD X8, X8, X9, 0x4, LSL
	0x01DD6744 ADD X0, X8, 0x138
	0x01DD6748 LDP X8, X4, [X0]
	0x01DD674C BFM X24, X22, 0x20, 0x1F
	0x01DD6750 MOV X0, X23
	0x01DD6754 MOV V0.16B, V9.16B
	0x01DD6758 MOV V1.16B, V10.16B
	0x01DD675C MOV V2.16B, V11.16B
	0x01DD6760 MOV V3.16B, V12.16B
	0x01DD6764 MOV V4.16B, V13.16B
	0x01DD6768 MOV X1, X26
	0x01DD676C MOV X2, X24
	0x01DD6770 MOV W3, W25
	0x01DD6774 BLR X8
	0x01DD6778 LDR W8, [X21 + 0x18]
	0x01DD677C ADD X29, X29, 0x1
	0x01DD6780 CMP X29, W8, SXTW
	0x01DD6784 B.LT 0x1DD626C
	0x01DD6788 B 0x1DD67E4
	0x01DD678C LDRSW X9, [X10]
	0x01DD6790 ADD X8, X8, X9, 0x4, LSL
	0x01DD6794 ADD X0, X8, 0x138
	0x01DD6798 LDP X8, X6, [X0]
	0x01DD679C LDP S2, S0, [X31 + 0x10]
	0x01DD67A0 BFM X28, X22, 0x20, 0x1F
	0x01DD67A4 FMUL S3, S12, S13
	0x01DD67A8 FMUL S4, S8, S13
	0x01DD67AC FMUL S5, S9, S13
	0x01DD67B0 MOV X0, X24
	0x01DD67B4 MOV W1, W25
	0x01DD67B8 MOV V1.16B, V10.16B
	0x01DD67BC MOV X2, X26
	0x01DD67C0 MOV X3, X26
	0x01DD67C4 MOV X4, X27
	0x01DD67C8 MOV X5, X28
	0x01DD67CC BLR X8
	0x01DD67D0 ADRP X27, 0x231D000
	0x01DD67D4 ADRP X28, 0x2322000
	0x01DD67D8 LDR X27, [X27 + 0x5F0]
	0x01DD67DC LDR X28, [X28 + 0x848]
	0x01DD67E0 B 0x1DD6284
	0x01DD67E4 LDR X0, [X19 + 0x38]
	0x01DD67E8 FMOV S0, 5
	0x01DD67EC MOV X1, X31
	0x01DD67F0 BL 0x1E91E68
	0x01DD67F4 AND X1, X0, 0x0
	0x01DD67F8 MOV X0, X19
	0x01DD67FC BL 0x1DD5F70
	0x01DD6800 LDR X20, [X19 + 0xB8]
	0x01DD6804 MOV X0, X19
	0x01DD6808 MOV X1, X31
	0x01DD680C BL 0x3C32E90
	0x01DD6810 CBZ X0, 0x1DD685C
	0x01DD6814 MOV X1, X31
	0x01DD6818 BL 0x3C3F58C
	0x01DD681C FMOV S3, 1
	0x01DD6820 MOV X0, X20
	0x01DD6824 MOV X1, X31
	0x01DD6828 BL 0x1DD1B94
	0x01DD682C LDP X20, X19, [X31 + 0xC0]
	0x01DD6830 LDP X22, X21, [X31 + 0xB0]
	0x01DD6834 LDP X24, X23, [X31 + 0xA0]
	0x01DD6838 LDP X26, X25, [X31 + 0x90]
	0x01DD683C LDP X28, X27, [X31 + 0x80]
	0x01DD6840 LDP X29, X30, [X31 + 0x70]
	0x01DD6844 LDP D9, D8, [X31 + 0x60]
	0x01DD6848 LDP D11, D10, [X31 + 0x50]
	0x01DD684C LDP D13, D12, [X31 + 0x40]
	0x01DD6850 LDP D15, D14, [X31 + 0x30]
	0x01DD6854 ADD X31, X31, 0xD0
	0x01DD6858 RET
	0x01DD685C BL 0x1C16F20
	0x01DD6860 BL 0x1C16F28
	0x01DD6864 SUB X31, X31, 0x20
	0x01DD6868 STP X30, X19, [X31 + 0x10]
	0x01DD686C MOV X1, X31
	0x01DD6870 MOV X19, X0
	0x01DD6874 BL 0x1E79788
	0x01DD6878 MOV X0, X19
	0x01DD687C BL 0x1DD5F10
	0x01DD6880 STR W0, [X31 + 0x8]
	0x01DD6884 LDR X1, [X19 + 0x38]
	0x01DD6888 ADD X0, X31, 0x8
	0x01DD688C MOV X2, X31
	0x01DD6890 BL 0x1E91B84
	0x01DD6894 TBZ X0, 0x0, 0x1DD68AC
	0x01DD6898 LDR X0, [X19 + 0x38]
	0x01DD689C CBZ X0, 0x1DD68B8
	0x01DD68A0 LDR X1, [X19 + 0x40]
	0x01DD68A4 MOV X2, X31
	0x01DD68A8 BL 0x1EA3884
	0x01DD68AC LDP X30, X19, [X31 + 0x10]
	0x01DD68B0 ADD X31, X31, 0x20
	0x01DD68B4 RET
	0x01DD68B8 BL 0x1C16F20
	0x01DD68BC STR X30, [X31 - 0x20]!
	0x01DD68C0 STP X20, X19, [X31 + 0x10]
	0x01DD68C4 MOV X19, X0
	0x01DD68C8 FMOV S0, 1
	0x01DD68CC FMOV S1, W31
	0x01DD68D0 FMOV S2, W31
	0x01DD68D4 FMOV S3, 1
	0x01DD68D8 MOV X0, X31
	0x01DD68DC BL 0x3C0D030
	0x01DD68E0 LDR W8, [X19 + 0x88]
	0x01DD68E4 CBZ W8, 0x1DD690C
	0x01DD68E8 MOV X0, X19
	0x01DD68EC BL 0x1DD5D78
	0x01DD68F0 MOV X20, X19
	0x01DD68F4 LDR V3, [X20 + 0x90]!
	0x01DD68F8 MOV X0, X31
	0x01DD68FC BL 0x3C0CB98
	0x01DD6900 MOV X0, X19
	0x01DD6904 BL 0x1DD5E40
	0x01DD6908 B 0x1DD6928
	0x01DD690C MOV X0, X19
	0x01DD6910 MOV X1, X31
	0x01DD6914 BL 0x3C32E90
	0x01DD6918 CBZ X0, 0x1DD693C
	0x01DD691C MOV X1, X31
	0x01DD6920 BL 0x3C3F58C
	0x01DD6924 ADD X20, X19, 0x90
	0x01DD6928 LDR V3, [X20]
	0x01DD692C LDP X20, X19, [X31 + 0x10]
	0x01DD6930 MOV X0, X31
	0x01DD6934 LDR X30, [X31], #0x20
	0x01DD6938 B 0x3C0CB98

ISIL:
	001 Subtract X31, X31, 368
	002 Move [X31+272], D14
	003 Move [X31+280], D13
	004 Move [X31+288], D12
	005 Move [X31+296], D11
	006 Move [X31+304], D10
	007 Move [X31+312], D9
	008 Move [X31+320], D8
	009 Move [X31+328], X29
	010 Move [X31+336], X30
	011 Move [X31+344], X21
	012 Move [X31+352], X20
	013 Move [X31+360], X19
	014 Move X19, X0
	015 Add X8, X31, 144
	016 Move X0, X31
	017 Call Gizmos.get_matrix
	018 Move V0, [X31+144]
	019 Move V1, [X31+160]
	020 Move V2, [X31+176]
	021 Move V3, [X31+192]
	022 Move X0, X19
	023 Move X1, X31
	024 Move [X31+208], V0
	025 Move [X31+216], V1
	026 Move [X31+240], V2
	027 Move [X31+248], V3
	028 Call Component.get_transform, X0
	029 Compare X0, 0
	030 JumpIfEqual {183}
	031 Move X1, X31
	032 Call Transform.get_position, X0
	033 Move X0, X19
	034 Move X1, X31
	035 Move V8, V0
	036 Move V9, V1
	037 Move V10, V2
	038 Call Component.get_transform, X0
	039 Compare X0, 0
	040 JumpIfEqual {183}
	041 Move X1, X31
	042 Call Transform.get_rotation, X0
	043 Move X20, 0x2603000
	044 Move W8, [X20+2139]
	045 Move V11, V0
	046 Move V12, V1
	047 Move V13, V2
	048 Move V14, V3
	049 Compare W8, 0
	050 JumpIfNotEqual {56}
	051 Move X0, 0x231E000
	052 Move X0, [X0+1440]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X20+2139], W8
	056 Move X20, 0x231E000
	057 Move X20, [X20+1440]
	058 Move V1, V9
	059 Move V2, V10
	060 Move V3, V11
	061 Move X8, [X20]
	062 Move V4, V12
	063 Move V5, V13
	064 Move V6, V14
	065 Move X8, [X8+184]
	066 Move X0, X31
	067 Move V0, [X8+20]
	068 NotImplemented "Instruction LDUR not yet implemented."
	069 Add X8, X31, 144
	070 Move [X31+8], S0
	071 Move V0, V8
	072 Move [X31], X9
	073 Call Matrix4x4.TRS, X0, X1, X2
	074 Move V0, [X31+144]
	075 Move V1, [X31+160]
	076 Move V2, [X31+176]
	077 Move V3, [X31+192]
	078 Add X0, X31, 80
	079 Move X1, X31
	080 Move [X31+80], V0
	081 Move [X31+88], V1
	082 Move [X31+112], V2
	083 Move [X31+120], V3
	084 Call Gizmos.set_matrix, X0
	085 Move X8, -19836928
	086 Move V3, [X8+1100]
	087 Move S0, 1
	088 Move S1, W31
	089 Move S2, W31
	090 Move X0, X31
	091 Move S8, 1
	092 Call Gizmos.set_color, X0
	093 Move W8, [X19+32]
	094 NotImplemented "Instruction CMP not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Compare W8, 0
	097 JumpIfNotEqual {111}
	098 Move V5, [X19+48]
	099 Move S8, 1
	100 Move S4, 1
	101 Move V8, [X19+48]
	102 Move S4, 1
	103 Move V4, [X19+48]
	104 Move S5, 1
	105 Move S1, [X19+40]
	106 Move S2, [X19+44]
	107 Move V0, [X19+36]
	108 Move V3, V8
	109 Move X0, X31
	110 Call Gizmos.DrawCube, X0, X1
	111 Move X8, -19836928
	112 Move V3, [X8+268]
	113 Move S0, 1
	114 Move S1, W31
	115 Move S2, W31
	116 Move X0, X31
	117 Call Gizmos.set_color, X0
	118 Move X21, 0x2603000
	119 Move W8, [X21+1923]
	120 Compare W8, 0
	121 JumpIfNotEqual {127}
	122 Move X0, 0x231E000
	123 Move X0, [X0+1440]
	124 Call 0x1C17CF4
	125 Move W8, 1
	126 Move [X21+1923], W8
	127 Move X8, [X20]
	128 Move X0, X31
	129 Move X8, [X8+184]
	130 Move S0, [X8]
	131 Move S1, [X8+4]
	132 Move V2, [X8+8]
	133 Move X8, -19836928
	134 Move V8, [X8+860]
	135 Move V3, V8
	136 Call Gizmos.DrawSphere, X0, V0
	137 Move V0, [X31+208]
	138 Move V1, [X31+224]
	139 Move V2, [X31+240]
	140 Move V3, [X31+256]
	141 Add X0, X31, 16
	142 Move X1, X31
	143 Move [X31+16], V0
	144 Move [X31+24], V1
	145 Move [X31+48], V2
	146 Move [X31+56], V3
	147 Call Gizmos.set_matrix, X0
	148 Move X0, X19
	149 Call AisleObject.get_endPoints, X0
	150 Compare X0, 0
	151 JumpIfEqual {183}
	152 Move X8, [X0+24]
	153 Move X19, X0
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Move X20, X31
	156 And X8, X8, 0
	157 Add X21, X19, 40
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move S0, [X21-8]
	160 Move S1, [X21-4]
	161 Move V2, [X21+12]
	162 Move V3, V8
	163 Move X0, X31
	164 Call Gizmos.DrawSphere, X0, V0
	165 Move W8, [X19+24]
	166 Add X20, X20, 1
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move X20, [X31+352]
	169 Move X19, [X31+360]
	170 Move X30, [X31+336]
	171 Move X21, [X31+344]
	172 Move X29, [X31+328]
	173 Move D9, [X31+312]
	174 Move D8, [X31+320]
	175 Move D11, [X31+296]
	176 Move D10, [X31+304]
	177 Move D13, [X31+280]
	178 Move D12, [X31+288]
	179 Move V14, [X31+272]
	180 Add X31, X31, 368
	181 Return 
	182 Call 0x1C17F28
	183 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DD693C BL 0x1C16F20
	0x01DD6940 STP X30, X25, [X31 - 0x40]!
	0x01DD6944 STP X24, X23, [X31 + 0x10]
	0x01DD6948 STP X22, X21, [X31 + 0x20]
	0x01DD694C STP X20, X19, [X31 + 0x30]
	0x01DD6950 ADRP X21, 0x2602000
	0x01DD6954 ADRP X20, 0x2322000
	0x01DD6958 LDRB W8, [X21 + 0xC39]
	0x01DD695C LDR X20, [X20 + 0x850]
	0x01DD6960 MOV X19, X0
	0x01DD6964 TBNZ X8, 0x0, 0x1DD69AC
	0x01DD6968 ADRP X0, 0x2322000
	0x01DD696C LDR X0, [X0 + 0x858]
	0x01DD6970 BL 0x1C16CF4
	0x01DD6974 ADRP X0, 0x231D000
	0x01DD6978 LDR X0, [X0 + 0x610]
	0x01DD697C BL 0x1C16CF4
	0x01DD6980 ADRP X0, 0x2322000
	0x01DD6984 LDR X0, [X0 + 0x860]
	0x01DD6988 BL 0x1C16CF4
	0x01DD698C ADRP X0, 0x231D000
	0x01DD6990 LDR X0, [X0 + 0x608]
	0x01DD6994 BL 0x1C16CF4
	0x01DD6998 ADRP X0, 0x2322000
	0x01DD699C LDR X0, [X0 + 0x850]
	0x01DD69A0 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2603000
	005 Move W8, [X20+1923]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, 0x231E000
	010 Move X0, [X0+1440]
	011 Call 0x1C17CF4
	012 Move W8, 1
	013 Move [X20+1923], W8
	014 Move X8, 0x231E000
	015 Move X8, [X8+1440]
	016 Move X0, X19
	017 Move X1, X31
	018 Move X8, [X8]
	019 Move X8, [X8+184]
	020 Move V0, [X8]
	021 Move V1, [X8+8]
	022 Move W8, 0x41200000
	023 Move [X19+48], W8
	024 Move [X19+36], D0
	025 Move [X19+44], S1
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Call MonoBehaviour..ctor, X0
	030 Return 

