Type: AnimalCompany.AisleObject

Method: UnityEngine.Vector3 get_center()

Disassembly:
	0x01CD1F48 MOV X1, X31
	0x01CD1F4C BL 0x3AA7658
	0x01CD1F50 MOV X0, X19
	0x01CD1F54 MOV X1, X31
	0x01CD1F58 MOV V11.16B, V0.16B
	0x01CD1F5C MOV V12.16B, V1.16B
	0x01CD1F60 MOV V13.16B, V2.16B
	0x01CD1F64 BL 0x3A9B084
	0x01CD1F68 CBZ X0, 0x1CD2228
	0x01CD1F6C MOV X1, X31
	0x01CD1F70 STP S10, S9, [X31 + 0x14]
	0x01CD1F74 STR S8, [X31 + 0x1C]
	0x01CD1F78 BL 0x3AA7658
	0x01CD1F7C ADRP X8, 0x2552000
	0x01CD1F80 LDRB W8, [X8 + 0x442]
	0x01CD1F84 MOV V15.16B, V1.16B
	0x01CD1F88 MOV V8.16B, V2.16B
	0x01CD1F8C STR S0, [X31 + 0x10]
	0x01CD1F90 CBNZ W8, 0x1CD1FA8
	0x01CD1F94 MOV X0, X20
	0x01CD1F98 BL 0x1B6E7F0
	0x01CD1F9C ADRP X8, 0x2552000
	0x01CD1FA0 MOVZ W9, 0x1
	0x01CD1FA4 STRB W9, [X8 + 0x442]
	0x01CD1FA8 LDR X8, [X20]
	0x01CD1FAC ADRP X9, 0x2552000
	0x01CD1FB0 LDRB W9, [X9 + 0x441]
	0x01CD1FB4 LDR X8, [X8 + 0xB8]
	0x01CD1FB8 LDP S14, S10, [X8 + 0x18]
	0x01CD1FBC LDR V9, [X8 + 0x20]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X1, X31
	007 Move X19, X0
	008 Call Component.get_transform, X0
	009 Compare X0, 0
	010 JumpIfEqual {37}
	011 Move X1, X31
	012 Call Transform.get_position, X0
	013 Move X0, X19
	014 Move X1, X31
	015 Move V8, V0
	016 Move V9, V1
	017 Move V10, V2
	018 Call Component.get_transform, X0
	019 Compare X0, 0
	020 JumpIfEqual {37}
	021 Move X1, X31
	022 Call Transform.get_rotation, X0
	023 Move S4, [X19+36]
	024 Move S5, [X19+40]
	025 Move V6, [X19+44]
	026 Move X0, X31
	027 Call Quaternion.op_Multiply, X0, X1
	028 Add S0, S8, S0
	029 Add S1, S9, S1
	030 Move X30, [X31+32]
	031 Move X19, [X31+40]
	032 Move D9, [X31+16]
	033 Move D8, [X31+24]
	034 Add S2, S10, S2
	035 Move V10, [X31+48]
	036 Return X0
	037 Call 0x1B6FA1C

Method: UnityEngine.Vector3 get_direction()

Disassembly:
	0x01CD1FC0 CBNZ W9, 0x1CD1FD8
	0x01CD1FC4 MOV X0, X22
	0x01CD1FC8 BL 0x1B6E7F0
	0x01CD1FCC MOVZ W8, 0x1
	0x01CD1FD0 ADRP X9, 0x2552000
	0x01CD1FD4 STRB W8, [X9 + 0x441]
	0x01CD1FD8 LDR X0, [X22]
	0x01CD1FDC LDR W8, [X0 + 0xE0]
	0x01CD1FE0 CBNZ W8, 0x1CD1FE8
	0x01CD1FE4 BL 0x1B6E8F8
	0x01CD1FE8 LDR V0, [X31 + 0x10]
	0x01CD1FEC FSUB S1, S12, S15
	0x01CD1FF0 FSUB S2, S13, S8
	0x01CD1FF4 FADD S1, S1, S10
	0x01CD1FF8 FSUB S0, S11, S0
	0x01CD1FFC FADD S0, S0, S14
	0x01CD2000 FADD S2, S2, S9
	0x01CD2004 FMUL S3, S0, S0
	0x01CD2008 FMUL S4, S1, S1
	0x01CD200C FADD S3, S3, S4
	0x01CD2010 FMUL S4, S2, S2
	0x01CD2014 FADD S3, S4, S3
	0x01CD2018 LDR V4, [X31 + 0xC]
	0x01CD201C FSQRT S3, S3
	0x01CD2020 FCMP S3, S4
	0x01CD2024 B.LE 0x1CD20DC
	0x01CD2028 LDR V9, [X31 + 0x1C]
	0x01CD202C LDR V10, [X31 + 0x14]
	0x01CD2030 FDIV S8, S0, S3
	0x01CD2034 FDIV S11, S1, S3
	0x01CD2038 FDIV S12, S2, S3
	0x01CD203C B 0x1CD2114
	0x01CD2040 MOV X0, X26
	0x01CD2044 MOV X1, X31
	0x01CD2048 BL 0x3AF6430
	0x01CD204C LDR X8, [X28]
	0x01CD2050 MOV X23, X0
	0x01CD2054 LDR W9, [X8 + 0xE0]
	0x01CD2058 CBNZ W9, 0x1CD2064
	0x01CD205C MOV X0, X8
	0x01CD2060 BL 0x1B6E8F8
	0x01CD2064 MOV X0, X23
	0x01CD2068 MOV X1, X31
	0x01CD206C MOV X2, X31
	0x01CD2070 BL 0x3A9D6EC
	0x01CD2074 TBZ X0, 0x0, 0x1CD21A4
	0x01CD2078 MOV X0, X26
	0x01CD207C MOV X1, X31
	0x01CD2080 BL 0x3AF6430
	0x01CD2084 MOV X23, X0
	0x01CD2088 MOV X0, X19
	0x01CD208C MOV X1, X31
	0x01CD2090 BL 0x3A9B084
	0x01CD2094 CBZ X0, 0x1CD2228
	0x01CD2098 MOV X1, X31
	0x01CD209C BL 0x3AA7658
	0x01CD20A0 CBZ X23, 0x1CD2228
	0x01CD20A4 LDR V4, [X19 + 0x90]
	0x01CD20A8 MOV V3.16B, V0.16B
	0x01CD20AC MOV V7.16B, V1.16B
	0x01CD20B0 MOV V6.16B, V2.16B
	0x01CD20B4 MOVZ W8, 0x447A0000
	0x01CD20B8 FMOV S5, 1
	0x01CD20BC FMOV S0, W8
	0x01CD20C0 MOV X0, X23
	0x01CD20C4 MOV V1.16B, V3.16B
	0x01CD20C8 MOV V2.16B, V7.16B
	0x01CD20CC MOV V3.16B, V6.16B
	0x01CD20D0 MOV X1, X31
	0x01CD20D4 BL 0x3AF72F4
	0x01CD20D8 B 0x1CD21A4
	0x01CD20DC ADRP X8, 0x2551000
	0x01CD20E0 LDRB W8, [X8 + 0x43F]
	0x01CD20E4 LDR V9, [X31 + 0x1C]
	0x01CD20E8 LDR V10, [X31 + 0x14]
	0x01CD20EC CBNZ W8, 0x1CD2104
	0x01CD20F0 MOV X0, X20
	0x01CD20F4 BL 0x1B6E7F0
	0x01CD20F8 MOVZ W8, 0x1
	0x01CD20FC ADRP X9, 0x2551000
	0x01CD2100 STRB W8, [X9 + 0x43F]
	0x01CD2104 LDR X8, [X20]
	0x01CD2108 LDR X8, [X8 + 0xB8]
	0x01CD210C LDP S8, S11, [X8]
	0x01CD2110 LDR V12, [X8 + 0x8]
	0x01CD2114 LDR X8, [X23]
	0x01CD2118 ADRP X10, 0x227B000
	0x01CD211C LDR V13, [X19 + 0xA8]
	0x01CD2120 LDR X26, [X19 + 0x88]
	0x01CD2124 LDRH W9, [X8 + 0x12E]
	0x01CD2128 LDR X10, [X10 + 0x4B8]
	0x01CD212C LDR X1, [X10]
	0x01CD2130 CBZ X9, 0x1CD2154
	0x01CD2134 LDR X10, [X8 + 0xB0]
	0x01CD2138 ADD X10, X10, 0x8
	0x01CD213C LDUR X11, [X10 - 0x8]
	0x01CD2140 CMP X11, X1
	0x01CD2144 B.EQ 0x1CD2164
	0x01CD2148 SUBS X9, X9, 0x1
	0x01CD214C ADD X10, X10, 0x10
	0x01CD2150 B.NE 0x1CD213C
	0x01CD2154 MOV X0, X23
	0x01CD2158 MOV W2, W31
	0x01CD215C BL 0x1BB4284
	0x01CD2160 B 0x1CD2170
	0x01CD2164 LDRSW X9, [X10]
	0x01CD2168 ADD X8, X8, X9, 0x4, LSL
	0x01CD216C ADD X0, X8, 0x138

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move W8, [X0+32]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Compare W8, 0
	011 JumpIfNotEqual {103}
	012 Move X1, X31
	013 Call Component.get_transform, X0
	014 Compare X0, 0
	015 JumpIfEqual {126}
	016 Move X1, X31
	017 Call Transform.get_rotation, X0
	018 Move X19, 0x2553000
	019 Move W8, [X19+1295]
	020 Move V8, V0
	021 Move V9, V1
	022 Move V10, V2
	023 Move V11, V3
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0x227C000
	027 Move X0, [X0+1152]
	028 Call 0x1B6F7F0
	029 Move W8, 1
	030 Move [X19+1295], W8
	031 Move X8, 0x227C000
	032 Move X8, [X8+1152]
	033 Move X8, [X8]
	034 Move X8, [X8+184]
	035 Move S4, [X8+72]
	036 Move S5, [X8+76]
	037 Move V6, [X8+80]
	038 Move X1, X31
	039 Call Component.get_transform, X0
	040 Compare X0, 0
	041 JumpIfEqual {126}
	042 Move X1, X31
	043 Call Transform.get_rotation, X0
	044 Move X19, 0x2552000
	045 Move W8, [X19+1090]
	046 Move V8, V0
	047 Move V9, V1
	048 Move V10, V2
	049 Move V11, V3
	050 Compare W8, 0
	051 JumpIfNotEqual {57}
	052 Move X0, 0x227C000
	053 Move X0, [X0+1152]
	054 Call 0x1B6F7F0
	055 Move W8, 1
	056 Move [X19+1090], W8
	057 Move X8, 0x227C000
	058 Move X8, [X8+1152]
	059 Move X8, [X8]
	060 Move X8, [X8+184]
	061 Move S4, [X8+24]
	062 Move S5, [X8+28]
	063 Move V6, [X8+32]
	064 Move X1, X31
	065 Call Component.get_transform, X0
	066 Compare X0, 0
	067 JumpIfEqual {126}
	068 Move X1, X31
	069 Call Transform.get_rotation, X0
	070 Move X19, 0x2552000
	071 Move W8, [X19+1297]
	072 Move V8, V0
	073 Move V9, V1
	074 Move V10, V2
	075 Move V11, V3
	076 Compare W8, 0
	077 JumpIfNotEqual {83}
	078 Move X0, 0x227C000
	079 Move X0, [X0+1152]
	080 Call 0x1B6F7F0
	081 Move W8, 1
	082 Move [X19+1297], W8
	083 Move X8, 0x227C000
	084 Move X8, [X8+1152]
	085 Move X8, [X8]
	086 Move X8, [X8+184]
	087 Move S4, [X8+60]
	088 Move S5, [X8+64]
	089 Move V6, [X8+68]
	090 Move V0, V8
	091 Move V1, V9
	092 Move X30, [X31+32]
	093 Move X19, [X31+40]
	094 Move D9, [X31+16]
	095 Move D8, [X31+24]
	096 Move V2, V10
	097 Move V3, V11
	098 Move X0, X31
	099 Move D11, [X31+48]
	100 Move D10, [X31+56]
	101 Call Quaternion.op_Multiply, X0, X1
	102 Return X0
	103 Move X19, 0x2552000
	104 Move W8, [X19+1295]
	105 Compare W8, 0
	106 JumpIfNotEqual {112}
	107 Move X0, 0x227C000
	108 Move X0, [X0+1152]
	109 Call 0x1B6F7F0
	110 Move W8, 1
	111 Move [X19+1295], W8
	112 Move X8, 0x227C000
	113 Move X8, [X8+1152]
	114 Move X30, [X31+32]
	115 Move X19, [X31+40]
	116 Move D9, [X31+16]
	117 Move D8, [X31+24]
	118 Move X8, [X8]
	119 Move X8, [X8+184]
	120 Move S0, [X8+72]
	121 Move S1, [X8+76]
	122 Move V2, [X8+80]
	123 Move D11, [X31+48]
	124 Move D10, [X31+56]
	125 Return X0
	126 Call 0x1B6FA1C

Method: UnityEngine.Vector3[] get_endPoints()

Disassembly:
	0x01CD2170 LDP X8, X5, [X0]
	0x01CD2174 LDR V1, [X31 + 0x18]
	0x01CD2178 FMUL S3, S8, S13
	0x01CD217C FMUL S4, S11, S13
	0x01CD2180 FMUL S5, S12, S13
	0x01CD2184 MOV X0, X23
	0x01CD2188 MOV W1, W24
	0x01CD218C MOV V0.16B, V9.16B
	0x01CD2190 MOV V2.16B, V10.16B
	0x01CD2194 MOV X2, X25
	0x01CD2198 MOV X3, X25
	0x01CD219C MOV X4, X26
	0x01CD21A0 BLR X8
	0x01CD21A4 LDR W8, [X21 + 0x18]
	0x01CD21A8 ADD W27, W27, 0x1
	0x01CD21AC CMP W27, W8
	0x01CD21B0 B.LT 0x1CD1E70
	0x01CD21B4 LDR X0, [X19 + 0x38]
	0x01CD21B8 FMOV S0, 5
	0x01CD21BC MOV X1, X31
	0x01CD21C0 BL 0x1D9CEB8
	0x01CD21C4 AND X1, X0, 0x0
	0x01CD21C8 MOV X0, X19
	0x01CD21CC BL 0x1CD1BC8
	0x01CD21D0 LDR X20, [X19 + 0xB0]
	0x01CD21D4 MOV X0, X19
	0x01CD21D8 MOV X1, X31
	0x01CD21DC BL 0x3A9B084
	0x01CD21E0 CBZ X0, 0x1CD2228
	0x01CD21E4 MOV X1, X31
	0x01CD21E8 BL 0x3AA7658
	0x01CD21EC MOV X0, X20
	0x01CD21F0 LDP X20, X19, [X31 + 0xB0]
	0x01CD21F4 LDP X22, X21, [X31 + 0xA0]
	0x01CD21F8 LDP X24, X23, [X31 + 0x90]
	0x01CD21FC LDP X26, X25, [X31 + 0x80]
	0x01CD2200 LDP X28, X27, [X31 + 0x70]
	0x01CD2204 LDP X29, X30, [X31 + 0x60]
	0x01CD2208 LDP D9, D8, [X31 + 0x50]
	0x01CD220C LDP D11, D10, [X31 + 0x40]
	0x01CD2210 LDP D13, D12, [X31 + 0x30]
	0x01CD2214 LDP D15, D14, [X31 + 0x20]
	0x01CD2218 FMOV S3, 1
	0x01CD221C MOV X1, X31
	0x01CD2220 ADD X31, X31, 0xC0
	0x01CD2224 B 0x1CCD9CC
	0x01CD2228 BL 0x1B6EA1C
	0x01CD222C BL 0x1B6EA24
	0x01CD2230 SUB X31, X31, 0x20
	0x01CD2234 STP X30, X19, [X31 + 0x10]
	0x01CD2238 MOV X1, X31
	0x01CD223C MOV X19, X0
	0x01CD2240 BL 0x1D65000
	0x01CD2244 LDR X0, [X19 + 0x40]
	0x01CD2248 CBZ X0, 0x1CD2294
	0x01CD224C LDRB W8, [X0 + 0x60]
	0x01CD2250 TBNZ X8, 0x1, 0x1CD2294
	0x01CD2254 MOV X1, X31
	0x01CD2258 BL 0x1D9E780
	0x01CD225C TBZ X0, 0x0, 0x1CD2294
	0x01CD2260 MOV X0, X19
	0x01CD2264 BL 0x1CD1B68
	0x01CD2268 STR W0, [X31 + 0x8]
	0x01CD226C LDR X1, [X19 + 0x38]
	0x01CD2270 ADD X0, X31, 0x8
	0x01CD2274 MOV X2, X31
	0x01CD2278 BL 0x1D9CBCC
	0x01CD227C TBZ X0, 0x0, 0x1CD2294
	0x01CD2280 LDR X0, [X19 + 0x38]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x2552000
	009 Move X21, 0x227E000
	010 Move W8, [X20+1487]
	011 Move X21, [X21+720]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x227E000
	018 Move X0, [X0+720]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X20+1487], W8
	022 Move X0, [X21]
	023 Move W1, 2
	024 Call 0x1B6F868
	025 Move X20, X0
	026 Move X0, X19
	027 Call AisleObject.get_center, X0
	028 Move X0, X19
	029 Move V8, V0
	030 Move V9, V1
	031 Move V10, V2
	032 Call AisleObject.get_direction, X0
	033 Compare X20, 0
	034 JumpIfEqual {81}
	035 Move W8, [X20+24]
	036 Compare W8, 0
	037 JumpIfEqual {80}
	038 Move V3, [X19+48]
	039 Move S4, 0.5
	040 Move X0, X19
	041 Multiply S3, S3, S4
	042 Multiply S0, S0, S3
	043 Multiply S1, S1, S3
	044 Multiply S2, S2, S3
	045 Add S0, S8, S0
	046 Add S1, S9, S1
	047 Add S2, S10, S2
	048 Move [X20+32], S0
	049 Move [X20+40], S1
	050 Move [X20+40], S2
	051 Call AisleObject.get_center, X0
	052 Move X0, X19
	053 Move V8, V0
	054 Move V9, V1
	055 Move V10, V2
	056 Call AisleObject.get_direction, X0
	057 Move W8, [X20+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move V3, [X19+48]
	060 Move S4, 0.5
	061 Move X0, X20
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Multiply S3, S3, S4
	065 Multiply S2, S2, S3
	066 Multiply S1, S1, S3
	067 Multiply S0, S0, S3
	068 Subtract S2, S10, S2
	069 Subtract S1, S9, S1
	070 Subtract S0, S8, S0
	071 Move [X20+44], S0
	072 Move [X20+52], S1
	073 Move [X20+52], S2
	074 Move X20, [X31+48]
	075 Move X19, [X31+56]
	076 Move D9, [X31+16]
	077 Move D8, [X31+24]
	078 Move V10, [X31+64]
	079 Return X0
	080 Call 0x1B6FA24
	081 Call 0x1B6FA1C

Method: AnimalCompany.AisleData GetAisleData(System.Single stayOffset)

Disassembly:
	0x01CD2284 CBZ X0, 0x1CD22A0
	0x01CD2288 LDR X1, [X19 + 0x40]
	0x01CD228C MOV X2, X31
	0x01CD2290 BL 0x1D8C548
	0x01CD2294 LDP X30, X19, [X31 + 0x10]
	0x01CD2298 ADD X31, X31, 0x20
	0x01CD229C RET
	0x01CD22A0 BL 0x1B6EA1C
	0x01CD22A4 STR X30, [X31 - 0x20]!
	0x01CD22A8 STP X20, X19, [X31 + 0x10]
	0x01CD22AC MOV X19, X0
	0x01CD22B0 FMOV S0, 1
	0x01CD22B4 FMOV S1, W31
	0x01CD22B8 FMOV S2, W31
	0x01CD22BC FMOV S3, 1
	0x01CD22C0 MOV X0, X31
	0x01CD22C4 BL 0x3A75B14
	0x01CD22C8 LDR W8, [X19 + 0x80]
	0x01CD22CC CBZ W8, 0x1CD22F4
	0x01CD22D0 MOV X0, X19
	0x01CD22D4 BL 0x1CD19D8
	0x01CD22D8 MOV X20, X19
	0x01CD22DC LDR V3, [X20 + 0x90]!
	0x01CD22E0 MOV X0, X31
	0x01CD22E4 BL 0x3A7567C
	0x01CD22E8 MOV X0, X19
	0x01CD22EC BL 0x1CD1AA0
	0x01CD22F0 B 0x1CD2310
	0x01CD22F4 MOV X0, X19
	0x01CD22F8 MOV X1, X31
	0x01CD22FC BL 0x3A9B084
	0x01CD2300 CBZ X0, 0x1CD2324
	0x01CD2304 MOV X1, X31
	0x01CD2308 BL 0x3AA7658
	0x01CD230C ADD X20, X19, 0x90
	0x01CD2310 LDR V3, [X20]
	0x01CD2314 LDP X20, X19, [X31 + 0x10]
	0x01CD2318 MOV X0, X31
	0x01CD231C LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-80], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move V8, V0
	012 Move X19, X0
	013 Move X20, X8
	014 Call AisleObject.get_center, X0
	015 Move X0, X19
	016 Move V9, V0
	017 Move V10, V1
	018 Move V11, V2
	019 Call AisleObject.get_direction, X0
	020 Move X0, X19
	021 Move V12, V0
	022 Move V13, V1
	023 Move V14, V2
	024 Call AisleObject.get_endPoints, X0
	025 NotImplemented "Instruction MOVI not yet implemented."
	026 Move X1, X0
	027 Move [X20], V0
	028 Move [X20+8], V0
	029 Move [X20+32], X31
	030 Move X0, X20
	031 Move V0, V9
	032 Move V1, V10
	033 Move V2, V11
	034 Move V3, V12
	035 Move V4, V13
	036 Move V6, V8
	037 Move X20, [X31+64]
	038 Move X19, [X31+72]
	039 Move X30, [X31+56]
	040 Move D9, [X31+40]
	041 Move D8, [X31+48]
	042 Move D11, [X31+24]
	043 Move D10, [X31+32]
	044 Move D13, [X31+8]
	045 Move D12, [X31+16]
	046 Move V5, V14
	047 Move V14, [X31+80]
	048 Call AisleData..ctor, X0, X1, X2, X3, V0
	049 Return X0

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x01CD2320 B 0x3A7567C
	0x01CD2324 BL 0x1B6EA1C
	0x01CD2328 STP X30, X21, [X31 - 0x20]!
	0x01CD232C STP X20, X19, [X31 + 0x10]
	0x01CD2330 ADRP X20, 0x2551000
	0x01CD2334 ADRP X21, 0x227D000
	0x01CD2338 LDRB W8, [X20 + 0x5D7]
	0x01CD233C LDR X21, [X21 + 0xA40]
	0x01CD2340 MOV X19, X0
	0x01CD2344 TBNZ X8, 0x0, 0x1CD235C
	0x01CD2348 ADRP X0, 0x227D000
	0x01CD234C LDR X0, [X0 + 0xA40]
	0x01CD2350 BL 0x1B6E7F0
	0x01CD2354 MOVZ W8, 0x1
	0x01CD2358 STRB W8, [X20 + 0x5D7]
	0x01CD235C LDR X8, [X21]
	0x01CD2360 FMOV V0.2S, 0x0
	0x01CD2364 STR D0, [X19 + 0x90]
	0x01CD2368 ADRP X20, 0x2551000
	0x01CD236C STR X8, [X19 + 0x88]
	0x01CD2370 LDRB W8, [X20 + 0x43F]
	0x01CD2374 CBNZ W8, 0x1CD238C
	0x01CD2378 ADRP X0, 0x227B000
	0x01CD237C LDR X0, [X0 + 0x480]
	0x01CD2380 BL 0x1B6E7F0
	0x01CD2384 MOVZ W8, 0x1
	0x01CD2388 STRB W8, [X20 + 0x43F]
	0x01CD238C ADRP X8, 0x227B000
	0x01CD2390 LDR X8, [X8 + 0x480]
	0x01CD2394 MOV X0, X19
	0x01CD2398 MOV X1, X31
	0x01CD239C LDR X8, [X8]
	0x01CD23A0 LDR X8, [X8 + 0xB8]
	0x01CD23A4 LDR V0, [X8]
	0x01CD23A8 LDR V1, [X8 + 0x8]
	0x01CD23AC MOVZ X8, 0x64
	0x01CD23B0 MOVK X8, 0x41200000
	0x01CD23B4 STR D0, [X19 + 0x98]
	0x01CD23B8 STR S1, [X19 + 0xA0]
	0x01CD23BC STUR X8, [X19 + 0xA4]
	0x01CD23C0 LDP X20, X19, [X31 + 0x10]
	0x01CD23C4 LDP X30, X21, [X31], #0x20
	0x01CD23C8 B 0x1D661D8
	0x01CD23CC LDR W1, [X0 + 0xD0]
	0x01CD23D0 B 0x1CD1BC8
	0x01CD23D4 STP X30, X19, [X31 - 0x10]!
	0x01CD23D8 MOV X19, X0
	0x01CD23DC BL 0x1CD1B68
	0x01CD23E0 STR W0, [X19 + 0xD0]
	0x01CD23E4 LDP X30, X19, [X31], #0x10
	0x01CD23E8 RET
	0x01CD23EC STR X30, [X31 - 0x20]!
	0x01CD23F0 STP X20, X19, [X31 + 0x10]
	0x01CD23F4 ADRP X19, 0x2551000
	0x01CD23F8 ADRP X20, 0x227C000
	0x01CD23FC LDRB W8, [X19 + 0x5D8]
	0x01CD2400 LDR X20, [X20 + 0xF90]
	0x01CD2404 TBNZ X8, 0x0, 0x1CD241C
	0x01CD2408 ADRP X0, 0x227C000
	0x01CD240C LDR X0, [X0 + 0xF90]
	0x01CD2410 BL 0x1B6E7F0
	0x01CD2414 MOVZ W8, 0x1
	0x01CD2418 STRB W8, [X19 + 0x5D8]
	0x01CD241C LDR X8, [X20]
	0x01CD2420 LDP X20, X19, [X31 + 0x10]
	0x01CD2424 LDR X8, [X8 + 0xB8]
	0x01CD2428 LDR X0, [X8]
	0x01CD242C LDR X30, [X31], #0x20
	0x01CD2430 RET
	0x01CD2434 STP X30, X21, [X31 - 0x20]!
	0x01CD2438 STP X20, X19, [X31 + 0x10]
	0x01CD243C ADRP X21, 0x2551000
	0x01CD2440 ADRP X20, 0x227C000
	0x01CD2444 ADRP X19, 0x227B000
	0x01CD2448 LDRB W8, [X21 + 0x5D9]
	0x01CD244C LDR X20, [X20 + 0xF90]
	0x01CD2450 LDR X19, [X19 + 0x478]
	0x01CD2454 TBNZ X8, 0x0, 0x1CD2478
	0x01CD2458 ADRP X0, 0x227C000
	0x01CD245C LDR X0, [X0 + 0xF90]
	0x01CD2460 BL 0x1B6E7F0
	0x01CD2464 ADRP X0, 0x227B000
	0x01CD2468 LDR X0, [X0 + 0x478]
	0x01CD246C BL 0x1B6E7F0
	0x01CD2470 MOVZ W8, 0x1
	0x01CD2474 STRB W8, [X21 + 0x5D9]
	0x01CD2478 LDR X8, [X20]
	0x01CD247C LDR X0, [X19]
	0x01CD2480 LDR X8, [X8 + 0xB8]
	0x01CD2484 LDR W9, [X0 + 0xE0]
	0x01CD2488 LDR X19, [X8]
	0x01CD248C CBNZ W9, 0x1CD2494
	0x01CD2490 BL 0x1B6E8F8
	0x01CD2494 MOV X0, X19
	0x01CD2498 MOV X1, X31
	0x01CD249C MOV X2, X31
	0x01CD24A0 BL 0x3AA0AF0
	0x01CD24A4 TBZ X0, 0x0, 0x1CD24B0
	0x01CD24A8 MOV W0, W31
	0x01CD24AC B 0x1CD24CC
	0x01CD24B0 LDR X8, [X20]
	0x01CD24B4 LDR X8, [X8 + 0xB8]
	0x01CD24B8 LDR X8, [X8]
	0x01CD24BC CBZ X8, 0x1CD24D8
	0x01CD24C0 LDRB W8, [X8 + 0x38]
	0x01CD24C4 CMP W8, 0x0
	0x01CD24C8 CSET W0, NE
	0x01CD24CC LDP X20, X19, [X31 + 0x10]
	0x01CD24D0 LDP X30, X21, [X31], #0x20
	0x01CD24D4 RET
	0x01CD24D8 BL 0x1B6EA1C
	0x01CD24DC LDR X0, [X0 + 0x20]
	0x01CD24E0 RET
	0x01CD24E4 STR X30, [X31 - 0x40]!
	0x01CD24E8 STP X24, X23, [X31 + 0x10]
	0x01CD24EC STP X22, X21, [X31 + 0x20]
	0x01CD24F0 STP X20, X19, [X31 + 0x30]
	0x01CD24F4 ADRP X21, 0x2551000
	0x01CD24F8 ADRP X20, 0x227B000
	0x01CD24FC LDRB W8, [X21 + 0x5DA]
	0x01CD2500 LDR X20, [X20 + 0x628]
	0x01CD2504 MOV X19, X0
	0x01CD2508 TBNZ X8, 0x0, 0x1CD2574
	0x01CD250C ADRP X0, 0x227D000
	0x01CD2510 LDR X0, [X0 + 0xA48]
	0x01CD2514 BL 0x1B6E7F0
	0x01CD2518 ADRP X0, 0x227D000
	0x01CD251C LDR X0, [X0 + 0xA50]
	0x01CD2520 BL 0x1B6E7F0
	0x01CD2524 ADRP X0, 0x227C000
	0x01CD2528 LDR X0, [X0 + 0xF90]
	0x01CD252C BL 0x1B6E7F0
	0x01CD2530 ADRP X0, 0x227B000
	0x01CD2534 LDR X0, [X0 + 0x628]
	0x01CD2538 BL 0x1B6E7F0
	0x01CD253C ADRP X0, 0x227B000
	0x01CD2540 LDR X0, [X0 + 0x478]
	0x01CD2544 BL 0x1B6E7F0
	0x01CD2548 ADRP X0, 0x227D000
	0x01CD254C LDR X0, [X0 + 0xA58]
	0x01CD2550 BL 0x1B6E7F0
	0x01CD2554 ADRP X0, 0x227D000
	0x01CD2558 LDR X0, [X0 + 0xA60]
	0x01CD255C BL 0x1B6E7F0
	0x01CD2560 ADRP X0, 0x227C000
	0x01CD2564 LDR X0, [X0 + 0xB30]
	0x01CD2568 BL 0x1B6E7F0
	0x01CD256C MOVZ W8, 0x1
	0x01CD2570 STRB W8, [X21 + 0x5DA]
	0x01CD2574 LDR X0, [X20]
	0x01CD2578 ADRP X24, 0x227D000
	0x01CD257C ADRP X23, 0x227D000
	0x01CD2580 ADRP X20, 0x227C000
	0x01CD2584 ADRP X22, 0x227C000
	0x01CD2588 ADRP X21, 0x227B000
	0x01CD258C LDR X24, [X24 + 0xA60]
	0x01CD2590 LDR W8, [X0 + 0xE0]
	0x01CD2594 LDR X23, [X23 + 0xA58]
	0x01CD2598 LDR X20, [X20 + 0xB30]

ISIL:
	001 Subtract X31, X31, 368
	002 Move [X31+272], D14
	003 Move [X31+280], D13
	004 Move [X31+288], D12
	005 Move [X31+296], D11
	006 Move [X31+304], D10
	007 Move [X31+312], D9
	008 Move [X31+320], D8
	009 Move [X31+328], X29
	010 Move [X31+336], X30
	011 Move [X31+344], X21
	012 Move [X31+352], X20
	013 Move [X31+360], X19
	014 Move X19, X0
	015 Add X8, X31, 144
	016 Move X0, X31
	017 Call Gizmos.get_matrix
	018 Move V0, [X31+144]
	019 Move V1, [X31+160]
	020 Move V2, [X31+176]
	021 Move V3, [X31+192]
	022 Move X0, X19
	023 Move X1, X31
	024 Move [X31+208], V0
	025 Move [X31+216], V1
	026 Move [X31+240], V2
	027 Move [X31+248], V3
	028 Call Component.get_transform, X0
	029 Compare X0, 0
	030 JumpIfEqual {183}
	031 Move X1, X31
	032 Call Transform.get_position, X0
	033 Move X0, X19
	034 Move X1, X31
	035 Move V8, V0
	036 Move V9, V1
	037 Move V10, V2
	038 Call Component.get_transform, X0
	039 Compare X0, 0
	040 JumpIfEqual {183}
	041 Move X1, X31
	042 Call Transform.get_rotation, X0
	043 Move X20, 0x2552000
	044 Move W8, [X20+1110]
	045 Move V11, V0
	046 Move V12, V1
	047 Move V13, V2
	048 Move V14, V3
	049 Compare W8, 0
	050 JumpIfNotEqual {56}
	051 Move X0, 0x227C000
	052 Move X0, [X0+1152]
	053 Call 0x1B6F7F0
	054 Move W8, 1
	055 Move [X20+1110], W8
	056 Move X20, 0x227C000
	057 Move X20, [X20+1152]
	058 Move V1, V9
	059 Move V2, V10
	060 Move V3, V11
	061 Move X8, [X20]
	062 Move V4, V12
	063 Move V5, V13
	064 Move V6, V14
	065 Move X8, [X8+184]
	066 Move X0, X31
	067 Move V0, [X8+20]
	068 NotImplemented "Instruction LDUR not yet implemented."
	069 Add X8, X31, 144
	070 Move [X31+8], S0
	071 Move V0, V8
	072 Move [X31], X9
	073 Call Matrix4x4.TRS, X0, X1, X2
	074 Move V0, [X31+144]
	075 Move V1, [X31+160]
	076 Move V2, [X31+176]
	077 Move V3, [X31+192]
	078 Add X0, X31, 80
	079 Move X1, X31
	080 Move [X31+80], V0
	081 Move [X31+88], V1
	082 Move [X31+112], V2
	083 Move [X31+120], V3
	084 Call Gizmos.set_matrix, X0
	085 Move X8, -19038208
	086 Move V3, [X8+3616]
	087 Move S0, 1
	088 Move S1, W31
	089 Move S2, W31
	090 Move X0, X31
	091 Move S8, 1
	092 Call Gizmos.set_color, X0
	093 Move W8, [X19+32]
	094 NotImplemented "Instruction CMP not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Compare W8, 0
	097 JumpIfNotEqual {111}
	098 Move V5, [X19+48]
	099 Move S8, 1
	100 Move S4, 1
	101 Move V8, [X19+48]
	102 Move S4, 1
	103 Move V4, [X19+48]
	104 Move S5, 1
	105 Move S1, [X19+40]
	106 Move S2, [X19+44]
	107 Move V0, [X19+36]
	108 Move V3, V8
	109 Move X0, X31
	110 Call Gizmos.DrawCube, X0, X1
	111 Move X8, -19038208
	112 Move V3, [X8+2808]
	113 Move S0, 1
	114 Move S1, W31
	115 Move S2, W31
	116 Move X0, X31
	117 Call Gizmos.set_color, X0
	118 Move X21, 0x2552000
	119 Move W8, [X21+1087]
	120 Compare W8, 0
	121 JumpIfNotEqual {127}
	122 Move X0, 0x227C000
	123 Move X0, [X0+1152]
	124 Call 0x1B6F7F0
	125 Move W8, 1
	126 Move [X21+1087], W8
	127 Move X8, [X20]
	128 Move X0, X31
	129 Move X8, [X8+184]
	130 Move S0, [X8]
	131 Move S1, [X8+4]
	132 Move V2, [X8+8]
	133 Move X8, -19038208
	134 Move V8, [X8+3376]
	135 Move V3, V8
	136 Call Gizmos.DrawSphere, X0, V0
	137 Move V0, [X31+208]
	138 Move V1, [X31+224]
	139 Move V2, [X31+240]
	140 Move V3, [X31+256]
	141 Add X0, X31, 16
	142 Move X1, X31
	143 Move [X31+16], V0
	144 Move [X31+24], V1
	145 Move [X31+48], V2
	146 Move [X31+56], V3
	147 Call Gizmos.set_matrix, X0
	148 Move X0, X19
	149 Call AisleObject.get_endPoints, X0
	150 Compare X0, 0
	151 JumpIfEqual {183}
	152 Move X8, [X0+24]
	153 Move X19, X0
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Move X20, X31
	156 And X8, X8, 0
	157 Add X21, X19, 40
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move S0, [X21-8]
	160 Move S1, [X21-4]
	161 Move V2, [X21+12]
	162 Move V3, V8
	163 Move X0, X31
	164 Call Gizmos.DrawSphere, X0, V0
	165 Move W8, [X19+24]
	166 Add X20, X20, 1
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move X20, [X31+352]
	169 Move X19, [X31+360]
	170 Move X30, [X31+336]
	171 Move X21, [X31+344]
	172 Move X29, [X31+328]
	173 Move D9, [X31+312]
	174 Move D8, [X31+320]
	175 Move D11, [X31+296]
	176 Move D10, [X31+304]
	177 Move D13, [X31+280]
	178 Move D12, [X31+288]
	179 Move V14, [X31+272]
	180 Add X31, X31, 368
	181 Return 
	182 Call 0x1B6FA24
	183 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CD259C LDR X22, [X22 + 0xF90]
	0x01CD25A0 LDR X21, [X21 + 0x478]
	0x01CD25A4 CBNZ W8, 0x1CD25AC
	0x01CD25A8 BL 0x1B6E8F8
	0x01CD25AC LDR X0, [X24]
	0x01CD25B0 LDR X2, [X23]
	0x01CD25B4 LDR X3, [X20]
	0x01CD25B8 MOVZ W4, 0x1E
	0x01CD25BC MOV X1, X31
	0x01CD25C0 MOV X5, X31
	0x01CD25C4 BL 0x342B2CC
	0x01CD25C8 LDR X8, [X22]
	0x01CD25CC LDR X0, [X21]
	0x01CD25D0 LDR X8, [X8 + 0xB8]
	0x01CD25D4 LDR W9, [X0 + 0xE0]
	0x01CD25D8 LDR X20, [X8]
	0x01CD25DC CBNZ W9, 0x1CD25E4
	0x01CD25E0 BL 0x1B6E8F8
	0x01CD25E4 MOV X0, X20
	0x01CD25E8 MOV X1, X31
	0x01CD25EC MOV X2, X31
	0x01CD25F0 BL 0x3AA0AF0
	0x01CD25F4 TBZ X0, 0x0, 0x1CD2608
	0x01CD25F8 LDR X8, [X22]
	0x01CD25FC LDR X8, [X8 + 0xB8]
	0x01CD2600 STR X19, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2552000
	005 Move W8, [X20+1087]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, 0x227C000
	010 Move X0, [X0+1152]
	011 Call 0x1B6F7F0
	012 Move W8, 1
	013 Move [X20+1087], W8
	014 Move X8, 0x227C000
	015 Move X8, [X8+1152]
	016 Move X0, X19
	017 Move X1, X31
	018 Move X8, [X8]
	019 Move X8, [X8+184]
	020 Move V0, [X8]
	021 Move V1, [X8+8]
	022 Move W8, 0x41200000
	023 Move [X19+48], W8
	024 Move [X19+36], D0
	025 Move [X19+44], S1
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Call MonoBehaviour..ctor, X0
	030 Return 

