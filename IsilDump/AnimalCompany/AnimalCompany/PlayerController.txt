Type: AnimalCompany.PlayerController

Method: AnimalCompany.PlayerController get_instance()

Disassembly:
	0x01DC0CDC MOV X1, X31
	0x01DC0CE0 BL 0x3C32E90
	0x01DC0CE4 CBZ X0, 0x1DC0D54
	0x01DC0CE8 MOV X1, X31
	0x01DC0CEC BL 0x3C3F58C
	0x01DC0CF0 CBZ X20, 0x1DC0D54
	0x01DC0CF4 FADD S2, S8, S2
	0x01DC0CF8 FADD S1, S9, S1
	0x01DC0CFC FADD S0, S10, S0
	0x01DC0D00 MOV X0, X20
	0x01DC0D04 MOV X1, X31
	0x01DC0D08 BL 0x3C8F1E0
	0x01DC0D0C LDR X0, [X19 + 0x20]
	0x01DC0D10 CBZ X0, 0x1DC0D54
	0x01DC0D14 MOV X1, X31
	0x01DC0D18 BL 0x3C32E90
	0x01DC0D1C LDR X8, [X19 + 0x30]
	0x01DC0D20 CBZ X8, 0x1DC0D54
	0x01DC0D24 MOV X19, X0
	0x01DC0D28 MOV X0, X8
	0x01DC0D2C MOV X1, X31
	0x01DC0D30 BL 0x3C8EF74

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2619000
	005 Move X19, 0x2336000
	006 Move W8, [X20+2934]
	007 Move X19, [X19+1992]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2336000
	013 Move X0, [X0+1992]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2934], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: UnityEngine.Color get_playerColor()

Disassembly:
	0x01DC0D34 CBZ X19, 0x1DC0D54
	0x01DC0D38 MOV X0, X19
	0x01DC0D3C LDP X20, X19, [X31 + 0x30]
	0x01DC0D40 LDP X30, X21, [X31 + 0x20]
	0x01DC0D44 LDP D9, D8, [X31 + 0x10]
	0x01DC0D48 MOV X1, X31
	0x01DC0D4C LDR V10, [X31], #0x40
	0x01DC0D50 B 0x3C3F62C
	0x01DC0D54 BL 0x1C16F20
	0x01DC0D58 STP X30, X19, [X31 - 0x10]!
	0x01DC0D5C MOV X19, X0
	0x01DC0D60 LDR X0, [X0 + 0x30]
	0x01DC0D64 CBZ X0, 0x1DC0DAC
	0x01DC0D68 MOV X1, X31
	0x01DC0D6C BL 0x3C8F1E0
	0x01DC0D70 LDR X0, [X19 + 0x20]
	0x01DC0D74 CBZ X0, 0x1DC0DAC
	0x01DC0D78 MOV X1, X31
	0x01DC0D7C BL 0x3C32E90
	0x01DC0D80 LDR X8, [X19 + 0x30]
	0x01DC0D84 CBZ X8, 0x1DC0DAC
	0x01DC0D88 MOV X19, X0
	0x01DC0D8C MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2619000
	005 Move X19, 0x2336000
	006 Move W8, [X20+2935]
	007 Move X19, [X19+1992]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2336000
	013 Move X0, [X0+1992]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2935], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move S0, [X8+8]
	027 Move S1, [X8+12]
	028 Move S2, [X8+16]
	029 Move S3, [X8+20]
	030 Move X30, [X31+32]
	031 Return X0

Method: System.Void set_playerColor(UnityEngine.Color value)

Disassembly:
	0x01DC0D90 MOV X1, X31
	0x01DC0D94 BL 0x3C8EF74
	0x01DC0D98 CBZ X19, 0x1DC0DAC
	0x01DC0D9C MOV X0, X19
	0x01DC0DA0 MOV X1, X31
	0x01DC0DA4 LDP X30, X19, [X31], #0x10
	0x01DC0DA8 B 0x3C3F62C
	0x01DC0DAC BL 0x1C16F20
	0x01DC0DB0 LDRB W8, [X0 + 0x134]
	0x01DC0DB4 EOR W8, W8, 0x1
	0x01DC0DB8 STRB W8, [X0 + 0x134]
	0x01DC0DBC RET
	0x01DC0DC0 STR X30, [X31 - 0x30]!
	0x01DC0DC4 STP X22, X21, [X31 + 0x10]
	0x01DC0DC8 STP X20, X19, [X31 + 0x20]
	0x01DC0DCC ADRP X20, 0x2618000
	0x01DC0DD0 ADRP X21, 0x2338000
	0x01DC0DD4 LDRB W8, [X20 + 0xB7E]
	0x01DC0DD8 LDR X21, [X21 + 0x38]
	0x01DC0DDC MOV X19, X0
	0x01DC0DE0 TBNZ X8, 0x0, 0x1DC0E04
	0x01DC0DE4 ADRP X0, 0x2338000
	0x01DC0DE8 LDR X0, [X0 + 0x38]
	0x01DC0DEC BL 0x1C16CF4
	0x01DC0DF0 ADRP X0, 0x2333000
	0x01DC0DF4 LDR X0, [X0 + 0x598]
	0x01DC0DF8 BL 0x1C16CF4
	0x01DC0DFC MOVZ W8, 0x1
	0x01DC0E00 STRB W8, [X20 + 0xB7E]
	0x01DC0E04 LDR X0, [X21]
	0x01DC0E08 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x2619000
	009 Move X19, 0x2336000
	010 Move W8, [X20+2936]
	011 Move X19, [X19+1992]
	012 Move V8, V3
	013 Move V9, V2
	014 Move V10, V1
	015 Move V11, V0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x2336000
	021 Move X0, [X0+1992]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2936], W8
	025 Move X0, [X19]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X19]
	031 Move X8, [X0+184]
	032 Move X20, [X31+48]
	033 Move X19, [X31+56]
	034 Move X30, [X31+32]
	035 Move [X8+16], S9
	036 Move [X8+24], S8
	037 Move D9, [X31+16]
	038 Move D8, [X31+24]
	039 Move [X8+8], S11
	040 Move [X8+16], S10
	041 Move D11, [X31+64]
	042 Move D10, [X31+72]
	043 Return 

Method: AnimalCompany.GorillaLocomotion.Player get_gorillaPlayer()

Disassembly:
	0x01DC0E0C CBNZ W8, 0x1DC0E18
	0x01DC0E10 BL 0x1C16DFC

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: AnimalCompany.PlayerView get_playerView()

Disassembly:
	0x01DC0E14 LDR X0, [X21]
	0x01DC0E18 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: UnityEngine.Transform get_body()

Disassembly:
	0x01DC0E1C ADRP X22, 0x2333000
	0x01DC0E20 LDR X8, [X8 + 0x8]

ISIL:
	001 Move X0, [X0+80]
	002 Return X0

Method: UnityEngine.Transform get_head()

Disassembly:
	0x01DC0E24 LDR X22, [X22 + 0x598]
	0x01DC0E28 CBZ X8, 0x1DC0E34

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: UnityEngine.Transform get_handLeft()

Disassembly:
	0x01DC0E2C LDR X20, [X8 + 0x20]
	0x01DC0E30 B 0x1DC0E38

ISIL:
	001 Move X0, [X0+96]
	002 Return X0

Method: UnityEngine.Transform get_handRight()

Disassembly:
	0x01DC0E34 MOV X20, X31
	0x01DC0E38 LDR X0, [X22]

ISIL:
	001 Move X0, [X0+104]
	002 Return X0

Method: UnityEngine.Transform get_controllerLeft()

Disassembly:
	0x01DC0E3C LDR W8, [X0 + 0xE0]
	0x01DC0E40 CBNZ W8, 0x1DC0E48

ISIL:
	001 Move X0, [X0+112]
	002 Return X0

Method: UnityEngine.Transform get_controllerRight()

Disassembly:
	0x01DC0E44 BL 0x1C16DFC
	0x01DC0E48 MOV X0, X20

ISIL:
	001 Move X0, [X0+120]
	002 Return X0

Method: UnityEngine.Transform get_backAttachAnchor()

Disassembly:
	0x01DC0E4C MOV X1, X31
	0x01DC0E50 MOV X2, X31
	0x01DC0E54 BL 0x3C354F8
	0x01DC0E58 TBZ X0, 0x0, 0x1DC0F08
	0x01DC0E5C LDR X0, [X21]
	0x01DC0E60 LDR W8, [X0 + 0xE0]
	0x01DC0E64 CBNZ W8, 0x1DC0E70

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+56]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move X0, [X8+128]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Single get_heldItemWeight()

Disassembly:
	0x01DC0E68 BL 0x1C16DFC
	0x01DC0E6C LDR X0, [X21]

ISIL:
	001 Move V0, [X0+216]
	002 Return V0

Method: System.Int32 get_playerChannel()

Disassembly:
	0x01DC0E70 LDR X8, [X0 + 0xB8]
	0x01DC0E74 LDR X8, [X8 + 0x8]

ISIL:
	001 Move W0, [X0+304]
	002 Return X0

Method: System.Void set_playerChannel(System.Int32 value)

Disassembly:
	0x01DC0E78 CBZ X8, 0x1DC0F18
	0x01DC0E7C LDR X8, [X8 + 0x20]

ISIL:
	001 Move [X0+304], W1
	002 Return 

Method: System.Boolean get_snapTurnEnabled()

Disassembly:
	0x01DC0E80 CBZ X8, 0x1DC0F18
	0x01DC0E84 LDRB W8, [X8 + 0x78]

ISIL:
	001 Move W0, [X0+308]
	002 Return X0

Method: System.Void set_snapTurnEnabled(System.Boolean value)

Disassembly:
	0x01DC0E88 CBZ W8, 0x1DC0F08
	0x01DC0E8C LDR X0, [X22]
	0x01DC0E90 LDR X20, [X19 + 0x30]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+308], W8
	003 Return 

Method: AnimalCompany.HandController get_leftHandController()

Disassembly:
	0x01DC0E94 LDR W8, [X0 + 0xE0]
	0x01DC0E98 CBNZ W8, 0x1DC0EA0

ISIL:
	001 Move X0, [X0+328]
	002 Return X0

Method: System.Void set_leftHandController(AnimalCompany.HandController value)

Disassembly:
	0x01DC0E9C BL 0x1C16DFC
	0x01DC0EA0 MOV X0, X20

ISIL:
	001 Move [X0+328], X1
	002 Return 

Method: AnimalCompany.HandController get_rightHandController()

Disassembly:
	0x01DC0EA4 MOV X1, X31
	0x01DC0EA8 MOV X2, X31

ISIL:
	001 Move X0, [X0+336]
	002 Return X0

Method: System.Void set_rightHandController(AnimalCompany.HandController value)

Disassembly:
	0x01DC0EAC BL 0x3C354F8
	0x01DC0EB0 TBZ X0, 0x0, 0x1DC0F08

ISIL:
	001 Move [X0+336], X1
	002 Return 

Method: UnityEngine.Rigidbody get_playerRigidbody()

Disassembly:
	0x01DC0EB4 LDR X0, [X21]
	0x01DC0EB8 LDR X19, [X19 + 0x30]

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: UnityEngine.Vector3 get_playerGravity()

Disassembly:
	0x01DC0EBC LDR W8, [X0 + 0xE0]
	0x01DC0EC0 CBNZ W8, 0x1DC0ECC
	0x01DC0EC4 BL 0x1C16DFC
	0x01DC0EC8 LDR X0, [X21]
	0x01DC0ECC LDR X8, [X0 + 0xB8]
	0x01DC0ED0 LDR X8, [X8 + 0x8]
	0x01DC0ED4 CBZ X8, 0x1DC0F18
	0x01DC0ED8 LDR X8, [X8 + 0x20]
	0x01DC0EDC CBZ X8, 0x1DC0F18
	0x01DC0EE0 CBZ X19, 0x1DC0F18
	0x01DC0EE4 LDP S1, S2, [X8 + 0x80]
	0x01DC0EE8 LDR V0, [X8 + 0x7C]
	0x01DC0EEC MOV X0, X19
	0x01DC0EF0 LDP X20, X19, [X31 + 0x20]
	0x01DC0EF4 LDP X22, X21, [X31 + 0x10]
	0x01DC0EF8 MOVZ W1, 0x5
	0x01DC0EFC MOV X2, X31
	0x01DC0F00 LDR X30, [X31], #0x30
	0x01DC0F04 B 0x3C8F3C4
	0x01DC0F08 LDP X20, X19, [X31 + 0x20]
	0x01DC0F0C LDP X22, X21, [X31 + 0x10]
	0x01DC0F10 LDR X30, [X31], #0x30
	0x01DC0F14 RET
	0x01DC0F18 BL 0x1C16F20
	0x01DC0F1C SUB X31, X31, 0x50
	0x01DC0F20 STR D10, [X31 + 0x10]
	0x01DC0F24 STP D9, D8, [X31 + 0x18]
	0x01DC0F28 STR X30, [X31 + 0x28]
	0x01DC0F2C STP X22, X21, [X31 + 0x30]
	0x01DC0F30 STP X20, X19, [X31 + 0x40]
	0x01DC0F34 ADRP X20, 0x2618000
	0x01DC0F38 LDRB W8, [X20 + 0xB7F]
	0x01DC0F3C MOV X19, X0
	0x01DC0F40 TBNZ X8, 0x0, 0x1DC0F94
	0x01DC0F44 ADRP X0, 0x2338000
	0x01DC0F48 LDR X0, [X0 + 0x38]
	0x01DC0F4C BL 0x1C16CF4
	0x01DC0F50 ADRP X0, 0x2333000
	0x01DC0F54 LDR X0, [X0 + 0x598]
	0x01DC0F58 BL 0x1C16CF4
	0x01DC0F5C ADRP X0, 0x2338000
	0x01DC0F60 LDR X0, [X0 + 0x90]
	0x01DC0F64 BL 0x1C16CF4
	0x01DC0F68 ADRP X0, 0x2338000
	0x01DC0F6C LDR X0, [X0 + 0x98]
	0x01DC0F70 BL 0x1C16CF4
	0x01DC0F74 ADRP X0, 0x2338000
	0x01DC0F78 LDR X0, [X0 + 0xA0]
	0x01DC0F7C BL 0x1C16CF4
	0x01DC0F80 ADRP X0, 0x2338000
	0x01DC0F84 LDR X0, [X0 + 0xA8]
	0x01DC0F88 BL 0x1C16CF4
	0x01DC0F8C MOVZ W8, 0x1
	0x01DC0F90 STRB W8, [X20 + 0xB7F]
	0x01DC0F94 STR X31, [X31 + 0x8]
	0x01DC0F98 LDP S10, S9, [X19 + 0xA0]
	0x01DC0F9C LDR V8, [X19 + 0xA8]
	0x01DC0FA0 ADRP X8, 0xFFFFFFFFFED2A000
	0x01DC0FA4 LDR V0, [X8 + 0x330]
	0x01DC0FA8 ADRP X21, 0x2333000
	0x01DC0FAC FMUL S1, S10, S10
	0x01DC0FB0 FMUL S2, S9, S9
	0x01DC0FB4 LDR X21, [X21 + 0x598]
	0x01DC0FB8 FADD S1, S1, S2
	0x01DC0FBC FMUL S2, S8, S8
	0x01DC0FC0 FADD S1, S1, S2
	0x01DC0FC4 FCMP S1, S0
	0x01DC0FC8 B.LE 0x1DC1064
	0x01DC0FCC MOV X0, X31
	0x01DC0FD0 BL 0x3C3C714
	0x01DC0FD4 FMUL S3, S10, S0
	0x01DC0FD8 FMUL S1, S9, S0
	0x01DC0FDC FMUL S2, S8, S0
	0x01DC0FE0 MOV X0, X19
	0x01DC0FE4 MOV V0.16B, V3.16B
	0x01DC0FE8 BL 0x1DC0C54

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2619000
	005 Move X20, 0x2339000
	006 Move W8, [X19+2937]
	007 Move X20, [X20+56]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x2339000
	013 Move X0, [X0+56]
	014 Call 0x1C17CF4
	015 Move X0, 0x2334000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move X0, 0x2334000
	019 Move X0, [X0+1528]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+2937], W8
	023 Move X0, [X20]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X20]
	029 Move X8, [X0+184]
	030 Move X9, [X8+8]
	031 Move X8, 0x2334000
	032 Move X8, [X8+1432]
	033 Compare X9, 0
	034 JumpIfEqual {36}
	035 Move X19, [X9+32]
	036 Move X19, X31
	037 Move X0, [X8]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Inequality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {81}
	050 Move X0, [X20]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X20]
	056 Move X8, [X0+184]
	057 Move X8, [X8+8]
	058 Compare X8, 0
	059 JumpIfEqual {94}
	060 Move X9, [X8+32]
	061 Compare X9, 0
	062 JumpIfEqual {94}
	063 Move W9, [X9+120]
	064 Compare W9, 0
	065 JumpIfEqual {81}
	066 Move W9, [X0+224]
	067 Compare W9, 0
	068 JumpIfNotEqual {75}
	069 Call 0x1C17DFC
	070 Move X8, [X20]
	071 Move X8, [X8+184]
	072 Move X8, [X8+8]
	073 Compare X8, 0
	074 JumpIfEqual {94}
	075 Move X8, [X8+32]
	076 Compare X8, 0
	077 JumpIfEqual {94}
	078 Move S0, [X8+124]
	079 Move S1, [X8+128]
	080 Move V2, [X8+132]
	081 Move X8, 0x2334000
	082 Move X8, [X8+1528]
	083 Move X0, [X8]
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 Move X0, X31
	089 Call Physics.get_gravity
	090 Move X20, [X31+16]
	091 Move X19, [X31+24]
	092 Move X30, [X31+32]
	093 Return X0
	094 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x01DC0FEC ADRP X20, 0x2618000
	0x01DC0FF0 LDR V8, [X19 + 0xA0]
	0x01DC0FF4 LDRB W8, [X20 + 0x783]
	0x01DC0FF8 LDR V9, [X19 + 0xA8]
	0x01DC0FFC CBNZ W8, 0x1DC1014
	0x01DC1000 ADRP X0, 0x2332000
	0x01DC1004 LDR X0, [X0 + 0x5A0]
	0x01DC1008 BL 0x1C16CF4
	0x01DC100C MOVZ W8, 0x1
	0x01DC1010 STRB W8, [X20 + 0x783]
	0x01DC1014 ADRP X8, 0x2332000
	0x01DC1018 LDR X8, [X8 + 0x5A0]
	0x01DC101C LDR V0, [X19 + 0xAC]
	0x01DC1020 FMOV S1, 1
	0x01DC1024 FMOV S3, W31
	0x01DC1028 LDR X8, [X8]
	0x01DC102C FMIN S1, S0, S1
	0x01DC1030 FCMP S0, 0x0
	0x01DC1034 FCSEL S1, S1, S3, PL
	0x01DC1038 LDR X8, [X8 + 0xB8]
	0x01DC103C LDR V0, [X8]
	0x01DC1040 LDR V2, [X8 + 0x8]
	0x01DC1044 FSUB V0.2S, V0.2S, V8.2S
	0x01DC1048 FSUB S2, S2, S9
	0x00000000 INVALID
	0x01DC1050 FMUL S1, S2, S1
	0x01DC1054 FADD V0.2S, V8.2S, V0.2S
	0x01DC1058 FADD S1, S9, S1
	0x01DC105C STR D0, [X19 + 0xA0]
	0x01DC1060 STR S1, [X19 + 0xA8]
	0x01DC1064 LDR X0, [X21]
	0x01DC1068 LDR X20, [X19 + 0xB0]
	0x01DC106C LDR W8, [X0 + 0xE0]
	0x01DC1070 CBNZ W8, 0x1DC1078
	0x01DC1074 BL 0x1C16DFC
	0x01DC1078 MOV X0, X20
	0x01DC107C MOV X1, X31
	0x01DC1080 MOV X2, X31
	0x01DC1084 BL 0x3C354F8
	0x01DC1088 TBZ X0, 0x0, 0x1DC10B8
	0x01DC108C LDR X0, [X19 + 0xB0]
	0x01DC1090 CBZ X0, 0x1DC1364
	0x01DC1094 MOV X1, X31
	0x01DC1098 BL 0x3C3F58C
	0x01DC109C LDP S3, S4, [X19 + 0xB8]
	0x01DC10A0 LDR V5, [X19 + 0xC0]
	0x01DC10A4 MOV X0, X19
	0x01DC10A8 FADD S0, S0, S3
	0x01DC10AC FADD S1, S1, S4
	0x01DC10B0 FADD S2, S2, S5
	0x01DC10B4 BL 0x1DC0D58
	0x01DC10B8 ADRP X22, 0x2337000
	0x01DC10BC LDR X22, [X22 + 0x38]
	0x01DC10C0 MOV X0, X31
	0x01DC10C4 BL 0x1DD6AE8
	0x01DC10C8 TBZ X0, 0x0, 0x1DC11C4
	0x01DC10CC MOV X0, X31
	0x01DC10D0 BL 0x3C3C6C4
	0x01DC10D4 LDR V1, [X19 + 0x104]
	0x01DC10D8 LDR V2, [X19 + 0x100]
	0x01DC10DC LDR W20, [X19 + 0x108]
	0x01DC10E0 FSUB S0, S0, S1
	0x01DC10E4 FCMP S0, S2
	0x01DC10E8 B.LE 0x1DC11BC
	0x01DC10EC MOV X0, X31
	0x01DC10F0 BL 0x3C3C6C4
	0x01DC10F4 LDR V1, [X19 + 0x104]
	0x01DC10F8 MOVZ W8, 0x7F800000
	0x01DC10FC SCVTF S2, W20
	0x01DC1100 MOV X0, X31
	0x01DC1104 FSUB S0, S0, S1
	0x01DC1108 FMOV S1, W8
	0x01DC110C MOVZ W8, 0xCF000000
	0x01DC1110 FDIV S0, S2, S0
	0x01DC1114 FMOV S2, W8
	0x01DC1118 MOVZ W8, 0x447A0000
	0x01DC111C FCMP S0, S1
	0x01DC1120 FMOV S1, W8
	0x01DC1124 FCVTZS W8, S0
	0x01DC1128 SCVTF S0, W8
	0x01DC112C FCSEL S0, S2, S0, EQ
	0x01DC1130 STR S0, [X31 + 0xC]
	0x01DC1134 FDIV S0, S1, S0
	0x01DC1138 STR S0, [X31 + 0x8]
	0x01DC113C STR W31, [X19 + 0x108]
	0x01DC1140 BL 0x3C3C6C4
	0x01DC1144 STR S0, [X19 + 0x104]
	0x01DC1148 ADRP X20, 0x2337000
	0x01DC114C LDR X20, [X20 + 0x98]
	0x01DC1150 ADD X0, X31, 0xC
	0x01DC1154 MOV X2, X31
	0x01DC1158 LDR X1, [X20]
	0x01DC115C BL 0x338FF2C
	0x01DC1160 LDR X1, [X20]
	0x01DC1164 MOV X20, X0
	0x01DC1168 ADD X0, X31, 0x8
	0x01DC116C MOV X2, X31
	0x01DC1170 BL 0x338FF2C
	0x01DC1174 ADRP X8, 0x2337000
	0x01DC1178 LDR X8, [X8 + 0xA8]
	0x01DC117C ADRP X9, 0x2337000
	0x01DC1180 LDR X9, [X9 + 0xA0]
	0x01DC1184 MOV X3, X0
	0x01DC1188 LDR X8, [X8]
	0x01DC118C MOV X1, X20
	0x01DC1190 LDR X2, [X9]
	0x01DC1194 MOV X4, X31
	0x01DC1198 MOV X0, X8
	0x01DC119C BL 0x32277C4
	0x01DC11A0 ADRP X8, 0x2337000
	0x01DC11A4 LDR X8, [X8 + 0x90]
	0x01DC11A8 MOV X1, X0
	0x01DC11AC LDR X8, [X8]
	0x01DC11B0 MOV X0, X8
	0x01DC11B4 BL 0x1DC1368
	0x01DC11B8 B 0x1DC11C4
	0x01DC11BC ADD W8, W20, 0x1
	0x01DC11C0 STR W8, [X19 + 0x108]
	0x01DC11C4 LDR X0, [X22]
	0x01DC11C8 LDR W8, [X0 + 0xE0]
	0x01DC11CC CBNZ W8, 0x1DC11D8
	0x01DC11D0 BL 0x1C16DFC
	0x01DC11D4 LDR X0, [X22]
	0x01DC11D8 LDR X8, [X0 + 0xB8]
	0x01DC11DC LDR X8, [X8 + 0x8]
	0x01DC11E0 CBZ X8, 0x1DC11EC
	0x01DC11E4 LDR X20, [X8 + 0x20]
	0x01DC11E8 B 0x1DC11F0
	0x01DC11EC MOV X20, X31
	0x01DC11F0 LDR X0, [X21]
	0x01DC11F4 LDR W8, [X0 + 0xE0]
	0x01DC11F8 CBNZ W8, 0x1DC1200
	0x01DC11FC BL 0x1C16DFC
	0x01DC1200 MOV X0, X20
	0x01DC1204 MOV X1, X31
	0x01DC1208 MOV X2, X31
	0x01DC120C BL 0x3C354F8
	0x01DC1210 LDR X20, [X19 + 0x48]
	0x01DC1214 TBZ X0, 0x0, 0x1DC12C0
	0x01DC1218 LDR X0, [X22]
	0x01DC121C LDR W8, [X0 + 0xE0]
	0x01DC1220 CBNZ W8, 0x1DC122C
	0x01DC1224 BL 0x1C16DFC
	0x01DC1228 LDR X0, [X22]
	0x01DC122C LDR X8, [X0 + 0xB8]
	0x01DC1230 LDR X8, [X8 + 0x8]
	0x01DC1234 CBZ X8, 0x1DC1364
	0x01DC1238 LDR X8, [X8 + 0x20]
	0x01DC123C CBZ X8, 0x1DC1364
	0x01DC1240 CBZ X20, 0x1DC1364
	0x01DC1244 LDR W1, [X8 + 0x74]
	0x01DC1248 MOV X0, X20
	0x01DC124C MOV X2, X31
	0x01DC1250 BL 0x3BFD17C
	0x01DC1254 LDR X0, [X21]
	0x01DC1258 LDR X20, [X19 + 0x30]
	0x01DC125C LDR W8, [X0 + 0xE0]
	0x01DC1260 CBNZ W8, 0x1DC1268
	0x01DC1264 BL 0x1C16DFC
	0x01DC1268 MOV X0, X20
	0x01DC126C MOV X1, X31
	0x01DC1270 MOV X2, X31
	0x01DC1274 BL 0x3C354F8
	0x01DC1278 TBZ X0, 0x0, 0x1DC1310
	0x01DC127C LDR X0, [X22]
	0x01DC1280 LDR X20, [X19 + 0x30]
	0x01DC1284 LDR W8, [X0 + 0xE0]
	0x01DC1288 CBNZ W8, 0x1DC1294
	0x01DC128C BL 0x1C16DFC
	0x01DC1290 LDR X0, [X22]
	0x01DC1294 LDR X8, [X0 + 0xB8]
	0x01DC1298 LDR X8, [X8 + 0x8]
	0x01DC129C CBZ X8, 0x1DC1364
	0x01DC12A0 LDR X8, [X8 + 0x20]
	0x01DC12A4 CBZ X8, 0x1DC1364
	0x01DC12A8 CBZ X20, 0x1DC1364
	0x01DC12AC LDRB W8, [X8 + 0x78]
	0x01DC12B0 MOV X0, X20
	0x01DC12B4 CMP W8, 0x0
	0x01DC12B8 CSET W1, EQ
	0x01DC12BC B 0x1DC1308
	0x01DC12C0 CBZ X20, 0x1DC1364
	0x01DC12C4 MOV X0, X20
	0x01DC12C8 MOV W1, W31
	0x01DC12CC MOV X2, X31
	0x01DC12D0 BL 0x3BFD17C
	0x01DC12D4 LDR X0, [X21]
	0x01DC12D8 LDR X20, [X19 + 0x30]
	0x01DC12DC LDR W8, [X0 + 0xE0]
	0x01DC12E0 CBNZ W8, 0x1DC12E8
	0x01DC12E4 BL 0x1C16DFC
	0x01DC12E8 MOV X0, X20
	0x01DC12EC MOV X1, X31
	0x01DC12F0 MOV X2, X31
	0x01DC12F4 BL 0x3C354F8
	0x01DC12F8 TBZ X0, 0x0, 0x1DC1310
	0x01DC12FC LDR X0, [X19 + 0x30]
	0x01DC1300 CBZ X0, 0x1DC1364
	0x01DC1304 MOVZ W1, 0x1
	0x01DC1308 MOV X2, X31
	0x01DC130C BL 0x3C8ECAC
	0x01DC1310 LDRB W8, [X19 + 0x134]
	0x01DC1314 CBZ W8, 0x1DC1320
	0x01DC1318 MOV X0, X19
	0x01DC131C BL 0x1DC1474
	0x01DC1320 LDR X0, [X19 + 0x148]
	0x01DC1324 CBZ X0, 0x1DC1364
	0x01DC1328 LDR X1, [X19 + 0x58]
	0x01DC132C MOV X2, X31
	0x01DC1330 BL 0x1DBEFAC
	0x01DC1334 LDR X0, [X19 + 0x150]
	0x01DC1338 CBZ X0, 0x1DC1364
	0x01DC133C LDR X1, [X19 + 0x58]
	0x01DC1340 MOV X2, X31
	0x01DC1344 BL 0x1DBEFAC
	0x01DC1348 LDP X20, X19, [X31 + 0x40]
	0x01DC134C LDP X22, X21, [X31 + 0x30]
	0x01DC1350 LDR X30, [X31 + 0x28]
	0x01DC1354 LDP D9, D8, [X31 + 0x18]
	0x01DC1358 LDR V10, [X31 + 0x10]
	0x01DC135C ADD X31, X31, 0x50
	0x01DC1360 RET
	0x01DC1364 BL 0x1C16F20
	0x01DC1368 STR X30, [X31 - 0x30]!
	0x01DC136C STP X22, X21, [X31 + 0x10]
	0x01DC1370 STP X20, X19, [X31 + 0x20]
	0x01DC1374 ADRP X22, 0x2617000
	0x01DC1378 ADRP X21, 0x2337000
	0x01DC137C LDRB W8, [X22 + 0xBE8]
	0x01DC1380 LDR X21, [X21 + 0xB0]
	0x01DC1384 MOV X19, X1
	0x01DC1388 MOV X20, X0
	0x01DC138C TBNZ X8, 0x0, 0x1DC13C8
	0x01DC1390 ADRP X0, 0x2337000
	0x01DC1394 LDR X0, [X0 + 0xB0]
	0x01DC1398 BL 0x1C16CF4
	0x01DC139C ADRP X0, 0x2333000
	0x01DC13A0 LDR X0, [X0 + 0x810]
	0x01DC13A4 BL 0x1C16CF4
	0x01DC13A8 ADRP X0, 0x2337000
	0x01DC13AC LDR X0, [X0 + 0xB8]
	0x01DC13B0 BL 0x1C16CF4
	0x01DC13B4 ADRP X0, 0x2333000
	0x01DC13B8 LDR X0, [X0 + 0x6C8]
	0x01DC13BC BL 0x1C16CF4
	0x01DC13C0 MOVZ W8, 0x1
	0x01DC13C4 STRB W8, [X22 + 0xBE8]
	0x01DC13C8 LDR X8, [X21]
	0x01DC13CC LDR X8, [X8 + 0xB8]
	0x01DC13D0 LDR X8, [X8]
	0x01DC13D4 CBZ X8, 0x1DC1470
	0x01DC13D8 LDR X0, [X8 + 0x30]
	0x01DC13DC CBZ X0, 0x1DC1470
	0x01DC13E0 ADRP X8, 0x2337000
	0x01DC13E4 LDR X8, [X8 + 0xB8]
	0x01DC13E8 MOV X1, X20
	0x01DC13EC LDR X2, [X8]
	0x01DC13F0 BL 0x2AA528C
	0x01DC13F4 LDR X8, [X21]
	0x01DC13F8 LDR X8, [X8 + 0xB8]
	0x01DC13FC LDR X9, [X8]
	0x01DC1400 CBZ X9, 0x1DC1470
	0x01DC1404 MOV W8, W0
	0x01DC1408 LDR X0, [X9 + 0x30]
	0x01DC140C CBZ X0, 0x1DC1470
	0x01DC1410 TBZ X8, 0x0, 0x1DC1430
	0x01DC1414 ADRP X8, 0x2333000
	0x01DC1418 LDR X8, [X8 + 0x6C8]
	0x01DC141C MOV X1, X20
	0x01DC1420 MOV X2, X19
	0x01DC1424 LDR X3, [X8]
	0x01DC1428 BL 0x2AA5084
	0x01DC142C B 0x1DC1448
	0x01DC1430 ADRP X8, 0x2333000
	0x01DC1434 LDR X8, [X8 + 0x810]
	0x01DC1438 MOV X1, X20
	0x01DC143C MOV X2, X19
	0x01DC1440 LDR X3, [X8]
	0x01DC1444 BL 0x2AA5098
	0x01DC1448 LDR X8, [X21]
	0x01DC144C LDR X8, [X8 + 0xB8]
	0x01DC1450 LDR X8, [X8]
	0x01DC1454 CBZ X8, 0x1DC1470
	0x01DC1458 LDP X20, X19, [X31 + 0x20]
	0x01DC145C LDP X22, X21, [X31 + 0x10]
	0x01DC1460 MOVZ W9, 0x1
	0x01DC1464 STRB W9, [X8 + 0x38]
	0x01DC1468 LDR X30, [X31], #0x30
	0x01DC146C RET
	0x01DC1470 BL 0x1C16F20
	0x01DC1474 STR D8, [X31 - 0x30]!
	0x01DC1478 STP X30, X21, [X31 + 0x10]
	0x01DC147C STP X20, X19, [X31 + 0x20]
	0x01DC1480 ADRP X21, 0x2617000
	0x01DC1484 ADRP X20, 0x2334000
	0x01DC1488 LDRB W8, [X21 + 0xB8D]
	0x01DC148C LDR X20, [X20 + 0x7C8]
	0x01DC1490 MOV X19, X0
	0x01DC1494 TBNZ X8, 0x0, 0x1DC14AC
	0x01DC1498 ADRP X0, 0x2334000
	0x01DC149C LDR X0, [X0 + 0x7C8]
	0x01DC14A0 BL 0x1C16CF4
	0x01DC14A4 MOVZ W8, 0x1
	0x01DC14A8 STRB W8, [X21 + 0xB8D]
	0x01DC14AC LDR X0, [X20]
	0x01DC14B0 ADD X20, X19, 0x138
	0x01DC14B4 LDR W8, [X0 + 0xE0]
	0x01DC14B8 CBNZ W8, 0x1DC14C0
	0x01DC14BC BL 0x1C16DFC
	0x01DC14C0 MOV W0, W31
	0x01DC14C4 MOV X1, X20
	0x01DC14C8 BL 0x1DC3830
	0x01DC14CC FMOV S1, W31
	0x01DC14D0 ADD X1, X19, 0x140
	0x01DC14D4 MOVZ W0, 0x1
	0x01DC14D8 FADD S8, S0, S1
	0x01DC14DC BL 0x1DC3830
	0x01DC14E0 FADD S0, S8, S0
	0x01DC14E4 FCMP S0, 0x0
	0x01DC14E8 B.EQ 0x1DC1514
	0x01DC14EC LDR X0, [X19 + 0x20]
	0x01DC14F0 CBZ X0, 0x1DC1524
	0x01DC14F4 LDP X20, X19, [X31 + 0x20]
	0x01DC14F8 LDP X30, X21, [X31 + 0x10]
	0x01DC14FC MOVZ W8, 0x42B40000
	0x01DC1500 FMOV S1, W8
	0x01DC1504 FMUL S0, S0, S1
	0x01DC1508 MOV X1, X31
	0x01DC150C LDR V8, [X31], #0x30
	0x01DC1510 B 0x1E1D3E8
	0x01DC1514 LDP X20, X19, [X31 + 0x20]
	0x01DC1518 LDP X30, X21, [X31 + 0x10]
	0x01DC151C LDR V8, [X31], #0x30
	0x01DC1520 RET
	0x01DC1524 BL 0x1C16F20
	0x01DC1528 STP X30, X21, [X31 - 0x20]!
	0x01DC152C STP X20, X19, [X31 + 0x10]
	0x01DC1530 LDRB W8, [X0 + 0x8C]
	0x01DC1534 CBZ W8, 0x1DC1544
	0x01DC1538 LDP X20, X19, [X31 + 0x10]
	0x01DC153C LDP X30, X21, [X31], #0x20
	0x01DC1540 RET
	0x01DC1544 MOV X19, X0
	0x01DC1548 LDR X0, [X0 + 0x20]
	0x01DC154C CBZ X0, 0x1DC15C0
	0x01DC1550 MOV X21, X1
	0x01DC1554 MOV X1, X31
	0x01DC1558 MOV X20, X2
	0x01DC155C BL 0x3C32E90
	0x01DC1560 CBZ X0, 0x1DC15C0
	0x01DC1564 MOV X1, X31
	0x01DC1568 BL 0x3C3F58C
	0x01DC156C FMOV S3, 1
	0x01DC1570 MOV X0, X21
	0x01DC1574 BL 0x1DC15C4
	0x01DC1578 LDR X1, [X19 + 0xC8]
	0x01DC157C CBZ X1, 0x1DC158C
	0x01DC1580 MOV X0, X19
	0x01DC1584 MOV X2, X31
	0x01DC1588 BL 0x3C36834
	0x01DC158C FMOV S0, W31
	0x01DC1590 FMOV S1, W31
	0x01DC1594 FMOV S2, W31
	0x01DC1598 MOV X0, X19
	0x01DC159C MOV X1, X20
	0x01DC15A0 BL 0x1DC1734
	0x01DC15A4 MOV X1, X0
	0x01DC15A8 STR X0, [X19 + 0xC8]
	0x01DC15AC MOV X0, X19
	0x01DC15B0 LDP X20, X19, [X31 + 0x10]
	0x01DC15B4 MOV X2, X31
	0x01DC15B8 LDP X30, X21, [X31], #0x20
	0x01DC15BC B 0x3C366FC
	0x01DC15C0 BL 0x1C16F20
	0x01DC15C4 SUB X31, X31, 0x50
	0x01DC15C8 STP D11, D10, [X31 + 0x10]
	0x01DC15CC STP D9, D8, [X31 + 0x20]
	0x01DC15D0 STP X30, X21, [X31 + 0x30]
	0x01DC15D4 STP X20, X19, [X31 + 0x40]
	0x01DC15D8 ADRP X20, 0x2617000
	0x01DC15DC ADRP X21, 0x2337000
	0x01DC15E0 LDRB W8, [X20 + 0xC05]
	0x01DC15E4 LDR X21, [X21 + 0xC0]
	0x01DC15E8 MOV V8.16B, V3.16B
	0x01DC15EC MOV V9.16B, V2.16B
	0x01DC15F0 MOV V10.16B, V1.16B
	0x01DC15F4 MOV V11.16B, V0.16B
	0x01DC15F8 MOV X19, X0
	0x01DC15FC TBNZ X8, 0x0, 0x1DC1620
	0x01DC1600 ADRP X0, 0x2332000
	0x01DC1604 LDR X0, [X0 + 0x598]
	0x01DC1608 BL 0x1C16CF4
	0x01DC160C ADRP X0, 0x2337000
	0x01DC1610 LDR X0, [X0 + 0xC0]
	0x01DC1614 BL 0x1C16CF4
	0x01DC1618 MOVZ W8, 0x1
	0x01DC161C STRB W8, [X20 + 0xC05]
	0x01DC1620 LDR X8, [X21]
	0x01DC1624 STRH W31, [X31 + 0xC]
	0x01DC1628 LDR X8, [X8 + 0xB8]
	0x01DC162C LDR X8, [X8]
	0x01DC1630 CBZ X8, 0x1DC1730
	0x01DC1634 ADRP X9, 0x2332000
	0x01DC1638 LDR X9, [X9 + 0x598]
	0x01DC163C LDR X20, [X8 + 0x50]
	0x01DC1640 LDR X0, [X9]
	0x01DC1644 LDR W9, [X0 + 0xE0]
	0x01DC1648 CBNZ W9, 0x1DC1650
	0x01DC164C BL 0x1C16DFC
	0x01DC1650 MOV X0, X20
	0x01DC1654 MOV X1, X31
	0x01DC1658 MOV X2, X31
	0x01DC165C BL 0x3C3883C
	0x01DC1660 TBNZ X0, 0x0, 0x1DC16D0
	0x01DC1664 LDR X8, [X21]
	0x01DC1668 LDR X8, [X8 + 0xB8]
	0x01DC166C LDR X8, [X8]
	0x01DC1670 CBZ X8, 0x1DC1730
	0x01DC1674 LDR X0, [X8 + 0x50]
	0x01DC1678 CBZ X0, 0x1DC1730
	0x01DC167C MOV X1, X31
	0x01DC1680 BL 0x1E9E9E4
	0x01DC1684 CMP W0, 0x2
	0x01DC1688 B.NE 0x1DC16D0
	0x01DC168C ADD X1, X31, 0xC
	0x01DC1690 MOV X0, X19
	0x01DC1694 BL 0x1DD21D0
	0x01DC1698 LDR X8, [X21]
	0x01DC169C LDR X8, [X8 + 0xB8]
	0x01DC16A0 LDR X8, [X8]
	0x01DC16A4 CBZ X8, 0x1DC1730
	0x01DC16A8 LDR X20, [X8 + 0x50]
	0x01DC16AC TBZ X0, 0x0, 0x1DC1700
	0x01DC16B0 LDRH W1, [X31 + 0xC]
	0x01DC16B4 MOV X0, X20
	0x01DC16B8 MOV V0.16B, V11.16B
	0x01DC16BC MOV V1.16B, V10.16B
	0x01DC16C0 MOV V2.16B, V9.16B
	0x01DC16C4 MOV V3.16B, V8.16B
	0x01DC16C8 BL 0x1DD26C8
	0x01DC16CC B 0x1DC16E8
	0x01DC16D0 MOV X0, X19
	0x01DC16D4 MOV V0.16B, V11.16B
	0x01DC16D8 MOV V1.16B, V10.16B
	0x01DC16DC MOV V2.16B, V9.16B
	0x01DC16E0 MOV V3.16B, V8.16B
	0x01DC16E4 BL 0x1DD1B94
	0x01DC16E8 LDP X20, X19, [X31 + 0x40]
	0x01DC16EC LDP X30, X21, [X31 + 0x30]
	0x01DC16F0 LDP D9, D8, [X31 + 0x20]
	0x01DC16F4 LDP D11, D10, [X31 + 0x10]
	0x01DC16F8 ADD X31, X31, 0x50
	0x01DC16FC RET
	0x01DC1700 CBZ X19, 0x1DC1730
	0x01DC1704 MOV X0, X19
	0x01DC1708 MOV X1, X31
	0x01DC170C BL 0x3C389D4
	0x01DC1710 MOV X1, X0
	0x01DC1714 MOV X0, X20
	0x01DC1718 MOV V0.16B, V11.16B
	0x01DC171C MOV V1.16B, V10.16B
	0x01DC1720 MOV V2.16B, V9.16B
	0x01DC1724 MOV V3.16B, V8.16B
	0x01DC1728 BL 0x1DD289C
	0x01DC172C B 0x1DC16E8
	0x01DC1730 BL 0x1C16F20
	0x01DC1734 STR D10, [X31 - 0x40]!
	0x01DC1738 STP D9, D8, [X31 + 0x8]
	0x01DC173C STR X30, [X31 + 0x18]
	0x01DC1740 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+48], X26
	006 Move [X31+56], X25
	007 Move [X31+64], X24
	008 Move [X31+72], X23
	009 Move [X31+80], X22
	010 Move [X31+88], X21
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X21, 0x2618000
	014 Move X20, 0x2335000
	015 Move W8, [X21+2938]
	016 Move X20, [X20+1992]
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {84}
	022 Move X0, 0x2337000
	023 Move X0, [X0+2808]
	024 Call 0x1C17CF4
	025 Move X0, 0x2338000
	026 Move X0, [X0+64]
	027 Call 0x1C17CF4
	028 Move X0, 0x2338000
	029 Move X0, [X0+72]
	030 Call 0x1C17CF4
	031 Move X0, 0x2334000
	032 Move X0, [X0+3696]
	033 Call 0x1C17CF4
	034 Move X0, 0x2333000
	035 Move X0, [X0+1608]
	036 Call 0x1C17CF4
	037 Move X0, 0x2338000
	038 Move X0, [X0+80]
	039 Call 0x1C17CF4
	040 Move X0, 0x2333000
	041 Move X0, [X0+3504]
	042 Call 0x1C17CF4
	043 Move X0, 0x2333000
	044 Move X0, [X0+1496]
	045 Call 0x1C17CF4
	046 Move X0, 0x2336000
	047 Move X0, [X0+3368]
	048 Call 0x1C17CF4
	049 Move X0, 0x2333000
	050 Move X0, [X0+3488]
	051 Call 0x1C17CF4
	052 Move X0, 0x2338000
	053 Move X0, [X0+88]
	054 Call 0x1C17CF4
	055 Move X0, 0x2338000
	056 Move X0, [X0+96]
	057 Call 0x1C17CF4
	058 Move X0, 0x2338000
	059 Move X0, [X0+104]
	060 Call 0x1C17CF4
	061 Move X0, 0x2338000
	062 Move X0, [X0+112]
	063 Call 0x1C17CF4
	064 Move X0, 0x2338000
	065 Move X0, [X0+120]
	066 Call 0x1C17CF4
	067 Move X0, 0x2338000
	068 Move X0, [X0+128]
	069 Call 0x1C17CF4
	070 Move X0, 0x2335000
	071 Move X0, [X0+1992]
	072 Call 0x1C17CF4
	073 Move X0, 0x2333000
	074 Move X0, [X0+1592]
	075 Call 0x1C17CF4
	076 Move X0, 0x2335000
	077 Move X0, [X0+784]
	078 Call 0x1C17CF4
	079 Move X0, 0x2336000
	080 Move X0, [X0+3480]
	081 Call 0x1C17CF4
	082 Move W8, 1
	083 Move [X21+2938], W8
	084 Move X0, [X20]
	085 Move [X31+40], X31
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {91}
	089 Call 0x1C17DFC
	090 Move X0, [X20]
	091 Move X8, [X0+184]
	092 Move W1, 100
	093 Move X0, X19
	094 Move [X8], X19
	095 Call PlayerController.SetCurrentHealth, X0, X1
	096 Move X0, [X19+40]
	097 Move [X19+140], W31
	098 Compare X0, 0
	099 JumpIfEqual {521}
	100 Move X1, [X19+32]
	101 Move X20, 0x2333000
	102 Move X20, [X20+1496]
	103 Call PlayerControlAsset.Setup, X0, X1
	104 Move X0, [X20]
	105 Move X21, [X19+32]
	106 Move W8, [X0+224]
	107 Compare W8, 0
	108 JumpIfNotEqual {110}
	109 Call 0x1C17DFC
	110 Compare X21, 0
	111 JumpIfEqual {521}
	112 Move X8, [X20]
	113 Move X22, 0x2333000
	114 Move X8, [X8+184]
	115 Move W8, [X8+64]
	116 Move X22, [X22+1608]
	117 Move [X21+268], W8
	118 Move X0, [X22]
	119 Move X20, [X19+56]
	120 Move W8, [X0+224]
	121 Compare W8, 0
	122 JumpIfNotEqual {124}
	123 Call 0x1C17DFC
	124 Move X23, 0x2618000
	125 Move W8, [X23+1927]
	126 Compare W8, 0
	127 JumpIfNotEqual {133}
	128 Move X0, 0x2333000
	129 Move X0, [X0+1608]
	130 Call 0x1C17CF4
	131 Move W8, 1
	132 Move [X23+1927], W8
	133 Move X0, [X22]
	134 Move W8, [X0+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {139}
	137 Call 0x1C17DFC
	138 Move X0, [X22]
	139 Move X8, [X0+184]
	140 Move X8, [X8]
	141 Compare X8, 0
	142 JumpIfEqual {521}
	143 Move X8, [X8+184]
	144 Compare X8, 0
	145 JumpIfEqual {521}
	146 Compare X20, 0
	147 JumpIfEqual {521}
	148 Move X5, [X19+112]
	149 Move X6, [X19+120]
	150 Move X3, [X19+96]
	151 Move X4, [X19+104]
	152 Move X2, [X19+88]
	153 Move X1, [X8+112]
	154 Move W7, 1
	155 Move X0, X20
	156 Call PlayerView.Setup, X0, X1, X2, X3, X4, X5, X6, X7
	157 Move X25, [X19+32]
	158 Compare X25, 0
	159 JumpIfEqual {521}
	160 Move X24, 0x2338000
	161 Move X24, [X24+72]
	162 Move X21, 0x2338000
	163 Move X20, [X25+448]
	164 Move X0, [X24]
	165 Move X21, [X21+112]
	166 Call 0x1C17F10
	167 Move X2, [X21]
	168 Move X1, X19
	169 Move X3, X31
	170 Move X21, X0
	171 Call Action`2<RaycastHit, Vector3>..ctor, X0, X1, X2
	172 Move X0, X20
	173 Move X1, X21
	174 Move X2, X31
	175 Call Delegate.Combine, X0, X1
	176 Compare X0, 0
	177 JumpIfEqual {191}
	178 Move X21, [X24]
	179 Move X20, X0
	180 Move X1, X21
	181 Call 0x1C17E00
	182 Compare X0, 0
	183 JumpIfEqual {297}
	184 Move [X25+448], X0
	185 Move X21, [X24]
	186 Move X0, X20
	187 Move X1, X21
	188 Call 0x1C17E00
	189 Compare X0, 0
	190 JumpIfNotEqual {192}
	191 Move [X25+448], X31
	192 Move X25, [X19+32]
	193 Compare X25, 0
	194 JumpIfEqual {521}
	195 Move X0, [X24]
	196 Move X21, 0x2338000
	197 Move X20, [X25+456]
	198 Move X21, [X21+120]
	199 Call 0x1C17F10
	200 Move X2, [X21]
	201 Move X1, X19
	202 Move X3, X31
	203 Move X21, X0
	204 Call Action`2<RaycastHit, Vector3>..ctor, X0, X1, X2
	205 Move X0, X20
	206 Move X1, X21
	207 Move X2, X31
	208 Call Delegate.Combine, X0, X1
	209 Compare X0, 0
	210 JumpIfEqual {224}
	211 Move X21, [X24]
	212 Move X20, X0
	213 Move X1, X21
	214 Call 0x1C17E00
	215 Compare X0, 0
	216 JumpIfEqual {297}
	217 Move [X25+456], X0
	218 Move X21, [X24]
	219 Move X0, X20
	220 Move X1, X21
	221 Call 0x1C17E00
	222 Compare X0, 0
	223 JumpIfNotEqual {225}
	224 Move [X25+456], X31
	225 Move X24, [X19+128]
	226 Compare X24, 0
	227 JumpIfEqual {521}
	228 Move X25, 0x2337000
	229 Move X25, [X25+2808]
	230 Move X21, 0x2338000
	231 Move X20, [X24+40]
	232 Move X0, [X25]
	233 Move X21, [X21+88]
	234 Call 0x1C17F10
	235 Move X2, [X21]
	236 Move X1, X19
	237 Move X3, X31
	238 Move X21, X0
	239 Call Action`1<Object>..ctor, X0, X1, X2
	240 Move X0, X20
	241 Move X1, X21
	242 Move X2, X31
	243 Call Delegate.Combine, X0, X1
	244 Compare X0, 0
	245 JumpIfEqual {259}
	246 Move X21, [X25]
	247 Move X20, X0
	248 Move X1, X21
	249 Call 0x1C17E00
	250 Compare X0, 0
	251 JumpIfEqual {297}
	252 Move [X24+40], X0
	253 Move X21, [X25]
	254 Move X0, X20
	255 Move X1, X21
	256 Call 0x1C17E00
	257 Compare X0, 0
	258 JumpIfNotEqual {260}
	259 Move [X24+40], X31
	260 Move X24, 0x2336000
	261 Move X24, [X24+3368]
	262 Move X25, 0x2338000
	263 Move X21, 0x2338000
	264 Move X8, [X24]
	265 Move X8, [X8+184]
	266 Move X25, [X25+64]
	267 Move X20, [X8+24]
	268 Move X0, [X25]
	269 Move X21, [X21+128]
	270 Call 0x1C17F10
	271 Move X2, [X21]
	272 Move X1, X19
	273 Move X3, X31
	274 Move X21, X0
	275 Call Action`1<NetworkInput>..ctor, X0, X1, X2
	276 Move X0, X20
	277 Move X1, X21
	278 Move X2, X31
	279 Call Delegate.Combine, X0, X1
	280 Compare X0, 0
	281 JumpIfEqual {300}
	282 Move X21, [X25]
	283 Move X20, X0
	284 Move X1, X21
	285 Call 0x1C17E00
	286 Compare X0, 0
	287 JumpIfEqual {297}
	288 Move X8, [X24]
	289 Move X8, [X8+184]
	290 Move [X8+24], X0
	291 Move X21, [X25]
	292 Move X0, X20
	293 Move X1, X21
	294 Call 0x1C17E00
	295 Compare X0, 0
	296 JumpIfNotEqual {303}
	297 Move X0, X20
	298 Move X1, X21
	299 Call 0x1C181E0
	300 Move X8, [X24]
	301 Move X8, [X8+184]
	302 Move [X8+24], X31
	303 Move X8, 0x2335000
	304 Move X8, [X8+784]
	305 Move X0, [X8]
	306 Move W8, [X0+224]
	307 Compare W8, 0
	308 JumpIfNotEqual {310}
	309 Call 0x1C17DFC
	310 Add X1, X31, 40
	311 Move W0, W31
	312 Move X2, X31
	313 Call TeleportTarget.TryGetTeleportTarget, X0, X1
	314 Move TEMP, X0
	315 And TEMP, TEMP, 1
	316 Compare TEMP, 1
	317 JumpIfNotEqual {329}
	318 Move X0, [X31+40]
	319 Compare X0, 0
	320 JumpIfEqual {521}
	321 Move X1, X31
	322 Call Transform.get_position, X0
	323 Move [X19+268], S0
	324 Move [X19+272], S1
	325 Move [X19+276], S2
	326 Move X0, [X31+40]
	327 Compare X0, 0
	328 JumpIfNotEqual {340}
	329 Move X0, [X19+88]
	330 Compare X0, 0
	331 JumpIfEqual {521}
	332 Move X1, X31
	333 Call Transform.get_position, X0
	334 Move X0, [X19+88]
	335 Move [X19+268], S0
	336 Move [X19+272], S1
	337 Move [X19+276], S2
	338 Compare X0, 0
	339 JumpIfEqual {521}
	340 Move X1, X31
	341 Call Transform.get_forward, X0
	342 Move X20, 0x2618000
	343 Move W8, [X20+1925]
	344 Move V8, V0
	345 Move V9, V2
	346 Compare W8, 0
	347 JumpIfNotEqual {353}
	348 Move X0, 0x2333000
	349 Move X0, [X0+1448]
	350 Call 0x1C17CF4
	351 Move W8, 1
	352 Move [X20+1925], W8
	353 Move X8, 0x2333000
	354 Move X8, [X8+1448]
	355 Move X0, [X8]
	356 Move W8, [X0+224]
	357 Compare W8, 0
	358 JumpIfNotEqual {360}
	359 Call 0x1C17DFC
	360 Move X8, -19750912
	361 Multiply S0, S8, S8
	362 Move S1, W31
	363 Move V3, [X8+380]
	364 Add S0, S0, S1
	365 Multiply S2, S9, S9
	366 Add S0, S2, S0
	367 NotImplemented "Instruction FSQRT not yet implemented."
	368 NotImplemented "Instruction FCMP not yet implemented."
	369 NotImplemented "Instruction FDIV not yet implemented."
	370 NotImplemented "Instruction FDIV not yet implemented."
	371 NotImplemented "Instruction FDIV not yet implemented."
	372 Move X20, 0x2618000
	373 Move W8, [X20+1923]
	374 Compare W8, 0
	375 JumpIfNotEqual {381}
	376 Move X0, 0x2333000
	377 Move X0, [X0+1440]
	378 Call 0x1C17CF4
	379 Move W8, 1
	380 Move [X20+1923], W8
	381 Move X8, 0x2333000
	382 Move X8, [X8+1440]
	383 Move X8, [X8]
	384 Move X8, [X8+184]
	385 Move S0, [X8]
	386 Move S1, [X8+4]
	387 Move V2, [X8+8]
	388 Move X0, [X19+112]
	389 Move [X19+280], S0
	390 Move [X19+284], S1
	391 Move [X19+288], S2
	392 Compare X0, 0
	393 JumpIfEqual {521}
	394 Move X20, 0x2338000
	395 Move X20, [X20+80]
	396 Move X1, [X20]
	397 Call 0x21A4894, X0
	398 Move X8, [X19+120]
	399 Move [X19+328], X0
	400 Compare X8, 0
	401 JumpIfEqual {521}
	402 Move X21, 0x2333000
	403 Move X21, [X21+1592]
	404 Move X1, [X20]
	405 Move X24, 0x2336000
	406 Move X25, 0x2334000
	407 Move X26, 0x2338000
	408 Move X24, [X24+3480]
	409 Move X25, [X25+3696]
	410 Move X26, [X26+104]
	411 Move X0, X8
	412 Call 0x21A4894, X0
	413 Move [X19+336], X0
	414 Move X0, [X21]
	415 Move W1, 6
	416 Call 0x1C17D6C
	417 Move [X19+232], X0
	418 Move X8, [X24]
	419 Move X0, [X25]
	420 Move X8, [X8+184]
	421 Move X20, [X8+328]
	422 Call 0x1C17F10
	423 Move X2, [X26]
	424 Move X1, X19
	425 Move X3, X31
	426 Move X21, X0
	427 Call Action..ctor, X0, X1, X2
	428 Move X0, X20
	429 Move X1, X21
	430 Move X2, X31
	431 Call Delegate.Combine, X0, X1
	432 Compare X0, 0
	433 JumpIfEqual {442}
	434 Move X1, [X25]
	435 Move X8, [X0]
	436 NotImplemented "Instruction CMP not yet implemented."
	437 Move X8, [X24]
	438 Move X8, [X8+184]
	439 Move [X8+328], X0
	440 Move X8, [X0]
	441 NotImplemented "Instruction CMP not yet implemented."
	442 Move X8, [X24]
	443 Move X8, [X8+184]
	444 Move [X8+328], X0
	445 Move X8, 0x2333000
	446 Move X8, [X8+3488]
	447 Move X20, 0x2338000
	448 Move X21, 0x2333000
	449 Move X0, [X8]
	450 Move X20, [X20+96]
	451 Move X21, [X21+3504]
	452 Call 0x1C17F10
	453 Move X2, [X20]
	454 Move X1, X19
	455 Move X3, X31
	456 Move X20, X0
	457 Call ObserverDelegate..ctor, X0, X1, X2
	458 Move X0, [X21]
	459 Move W1, 1
	460 Call 0x1C17D6C
	461 Move X8, [X22]
	462 Move X19, X0
	463 Move W9, [X8+224]
	464 Compare W9, 0
	465 JumpIfNotEqual {468}
	466 Move X0, X8
	467 Call 0x1C17DFC
	468 Move W8, [X23+1927]
	469 Compare W8, 0
	470 JumpIfNotEqual {476}
	471 Move X0, 0x2333000
	472 Move X0, [X0+1608]
	473 Call 0x1C17CF4
	474 Move W8, 1
	475 Move [X23+1927], W8
	476 Move X0, [X22]
	477 Move W8, [X0+224]
	478 Compare W8, 0
	479 JumpIfNotEqual {482}
	480 Call 0x1C17DFC
	481 Move X0, [X22]
	482 Move X8, [X0+184]
	483 Move X8, [X8]
	484 Compare X8, 0
	485 JumpIfEqual {521}
	486 Move X8, [X8+184]
	487 Compare X8, 0
	488 JumpIfEqual {521}
	489 Compare X19, 0
	490 JumpIfEqual {521}
	491 Move X21, [X8+112]
	492 Compare X21, 0
	493 JumpIfEqual {500}
	494 Move X8, [X19]
	495 Move X0, X21
	496 Move X1, [X8+64]
	497 Call 0x1C17E00
	498 Compare X0, 0
	499 JumpIfEqual {523}
	500 Move W8, [X19+24]
	501 Compare W8, 0
	502 JumpIfEqual {522}
	503 Move X0, X20
	504 Move X1, X19
	505 Move X2, X31
	506 Move [X19+32], X21
	507 Call App.RegisterObserver, X0, X1
	508 Move X20, [X31+96]
	509 Move X19, [X31+104]
	510 Move X22, [X31+80]
	511 Move X21, [X31+88]
	512 Move X24, [X31+64]
	513 Move X23, [X31+72]
	514 Move X26, [X31+48]
	515 Move X25, [X31+56]
	516 Move X30, [X31+32]
	517 Move D9, [X31+16]
	518 Move D8, [X31+24]
	519 Add X31, X31, 112
	520 Return 
	521 Call 0x1C17F20
	522 Call 0x1C17F28
	523 Call 0x1C17F44
	524 Move X1, X31
	525 Call 0x1C17DEC

Method: System.Void OnDestroy()

Disassembly:
	0x01DC1898 LDR W8, [X0 + 0xE0]
	0x01DC189C MOV V14.16B, V3.16B
	0x01DC18A0 CBNZ W8, 0x1DC18A8
	0x01DC18A4 BL 0x1C16DFC
	0x01DC18A8 MOV W0, W19
	0x01DC18AC MOV V0.16B, V8.16B
	0x01DC18B0 MOV V1.16B, V9.16B
	0x01DC18B4 MOV V2.16B, V10.16B
	0x01DC18B8 MOV V3.16B, V11.16B
	0x01DC18BC MOV V4.16B, V12.16B
	0x01DC18C0 MOV V5.16B, V13.16B
	0x01DC18C4 LDP X20, X19, [X31 + 0x70]
	0x01DC18C8 LDP X22, X21, [X31 + 0x60]
	0x01DC18CC LDP X24, X23, [X31 + 0x50]
	0x01DC18D0 LDP X30, X25, [X31 + 0x40]
	0x01DC18D4 LDP D9, D8, [X31 + 0x30]
	0x01DC18D8 LDP D11, D10, [X31 + 0x20]
	0x01DC18DC LDP D13, D12, [X31 + 0x10]
	0x01DC18E0 MOV V6.16B, V14.16B
	0x01DC18E4 MOV W1, W31
	0x01DC18E8 LDR V14, [X31], #0x80
	0x01DC18EC B 0x1DC1C58
	0x01DC18F0 LDP X20, X19, [X31 + 0x70]
	0x01DC18F4 LDP X22, X21, [X31 + 0x60]
	0x01DC18F8 LDP X24, X23, [X31 + 0x50]
	0x01DC18FC LDP X30, X25, [X31 + 0x40]
	0x01DC1900 LDP D9, D8, [X31 + 0x30]
	0x01DC1904 LDP D11, D10, [X31 + 0x20]
	0x01DC1908 LDP D13, D12, [X31 + 0x10]
	0x01DC190C LDR V14, [X31], #0x80
	0x01DC1910 RET
	0x01DC1914 BL 0x1C16F20
	0x01DC1918 STR D14, [X31 - 0x80]!
	0x01DC191C STP D13, D12, [X31 + 0x8]
	0x01DC1920 STP D11, D10, [X31 + 0x18]
	0x01DC1924 STP D9, D8, [X31 + 0x28]
	0x01DC1928 STR X30, [X31 + 0x38]
	0x01DC192C STP X26, X25, [X31 + 0x40]
	0x01DC1930 STP X24, X23, [X31 + 0x50]
	0x01DC1934 STP X22, X21, [X31 + 0x60]
	0x01DC1938 STP X20, X19, [X31 + 0x70]
	0x01DC193C ADRP X24, 0x2617000
	0x01DC1940 LDRB W8, [X24 + 0xB83]
	0x01DC1944 MOV X21, X4
	0x01DC1948 MOV X20, X3
	0x01DC194C MOV X22, X2
	0x01DC1950 MOV V8.16B, V2.16B
	0x01DC1954 MOV V9.16B, V1.16B
	0x01DC1958 MOV V10.16B, V0.16B
	0x01DC195C MOV W23, W1
	0x01DC1960 MOV X19, X0
	0x01DC1964 TBNZ X8, 0x0, 0x1DC19A0
	0x01DC1968 ADRP X0, 0x2332000
	0x01DC196C LDR X0, [X0 + 0x5D8]
	0x01DC1970 BL 0x1C16CF4
	0x01DC1974 ADRP X0, 0x2332000
	0x01DC1978 LDR X0, [X0 + 0x5F8]
	0x01DC197C BL 0x1C16CF4
	0x01DC1980 ADRP X0, 0x2337000
	0x01DC1984 LDR X0, [X0 + 0xD0]
	0x01DC1988 BL 0x1C16CF4
	0x01DC198C ADRP X0, 0x2337000
	0x01DC1990 LDR X0, [X0 + 0xD8]
	0x01DC1994 BL 0x1C16CF4
	0x01DC1998 MOVZ W8, 0x1
	0x01DC199C STRB W8, [X24 + 0xB83]
	0x01DC19A0 LDR X0, [X19 + 0x58]
	0x01DC19A4 CBZ X0, 0x1DC1C54
	0x01DC19A8 ADRP X26, 0x2332000
	0x01DC19AC ADRP X25, 0x2332000
	0x01DC19B0 LDR X26, [X26 + 0x5D8]
	0x01DC19B4 LDR X25, [X25 + 0x5F8]
	0x01DC19B8 MOV X1, X31
	0x01DC19BC BL 0x3C3F58C
	0x01DC19C0 LDR X0, [X26]
	0x01DC19C4 LDR X24, [X19 + 0xF8]
	0x01DC19C8 MOV V11.16B, V0.16B
	0x01DC19CC MOV V12.16B, V1.16B
	0x01DC19D0 LDR W8, [X0 + 0xE0]
	0x01DC19D4 MOV V13.16B, V2.16B
	0x01DC19D8 CBNZ W8, 0x1DC19E4
	0x01DC19DC BL 0x1C16DFC
	0x01DC19E0 LDR X0, [X26]
	0x01DC19E4 LDR X8, [X0 + 0xB8]
	0x01DC19E8 MOV X1, X31
	0x01DC19EC LDR W0, [X8 + 0x24]
	0x01DC19F0 BL 0x3C35CB8
	0x01DC19F4 LDR X8, [X25]
	0x01DC19F8 MOV W25, W0
	0x01DC19FC LDR W9, [X8 + 0xE0]
	0x01DC1A00 CBNZ W9, 0x1DC1A0C
	0x01DC1A04 MOV X0, X8
	0x01DC1A08 BL 0x1C16DFC
	0x01DC1A0C ADRP X8, 0xFFFFFFFFFED29000
	0x01DC1A10 LDR V14, [X8 + 0xBC]
	0x01DC1A14 MOV V0.16B, V11.16B
	0x01DC1A18 MOV V1.16B, V12.16B
	0x01DC1A1C MOV V2.16B, V13.16B
	0x01DC1A20 MOV V3.16B, V14.16B
	0x01DC1A24 MOV X0, X24
	0x01DC1A28 MOV W1, W25
	0x01DC1A2C MOV X2, X31
	0x01DC1A30 BL 0x3C8D760
	0x01DC1A34 CMP W0, 0x0
	0x01DC1A38 B.GT 0x1DC1A44
	0x01DC1A3C LDRB W8, [X19 + 0x8C]
	0x01DC1A40 CBZ W8, 0x1DC1A6C
	0x01DC1A44 LDP X20, X19, [X31 + 0x70]
	0x01DC1A48 LDP X22, X21, [X31 + 0x60]
	0x01DC1A4C LDP X24, X23, [X31 + 0x50]
	0x01DC1A50 LDP X26, X25, [X31 + 0x40]
	0x01DC1A54 LDR X30, [X31 + 0x38]
	0x01DC1A58 LDP D9, D8, [X31 + 0x28]
	0x01DC1A5C LDP D11, D10, [X31 + 0x18]
	0x01DC1A60 LDP D13, D12, [X31 + 0x8]
	0x01DC1A64 LDR V14, [X31], #0x80
	0x01DC1A68 RET
	0x01DC1A6C FMOV S0, 0.5
	0x01DC1A70 MOV W0, W31
	0x01DC1A74 MOV V1.16B, V14.16B
	0x01DC1A78 BL 0x1DC2324
	0x01DC1A7C FMOV S0, 0.5
	0x01DC1A80 MOVZ W0, 0x1
	0x01DC1A84 MOV V1.16B, V14.16B
	0x01DC1A88 BL 0x1DC2324
	0x01DC1A8C LDR W8, [X19 + 0x88]
	0x01DC1A90 MOV X0, X19
	0x01DC1A94 SUB W1, W8, W23
	0x01DC1A98 BL 0x1DC0744
	0x01DC1A9C LDR X0, [X19 + 0x38]
	0x01DC1AA0 CBZ X0, 0x1DC1C54
	0x01DC1AA4 BL 0x1DC2360
	0x01DC1AA8 ADRP X8, 0x2337000
	0x01DC1AAC LDR X8, [X8 + 0xD8]
	0x01DC1AB0 LDR X0, [X8]
	0x01DC1AB4 LDR W8, [X0 + 0xE0]
	0x01DC1AB8 CBNZ W8, 0x1DC1AC0
	0x01DC1ABC BL 0x1C16DFC
	0x01DC1AC0 MOV X0, X31
	0x01DC1AC4 BL 0x1E00694
	0x01DC1AC8 LDR W8, [X19 + 0x88]
	0x01DC1ACC CMP W8, 0x1
	0x01DC1AD0 CSET W9, LT
	0x01DC1AD4 CMP W8, 0x0
	0x01DC1AD8 STRB W9, [X19 + 0x8C]
	0x01DC1ADC B.LE 0x1DC1B30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x2618000
	008 Move X20, 0x2335000
	009 Move W8, [X21+2939]
	010 Move X20, [X20+1992]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {48}
	016 Move X0, 0x2338000
	017 Move X0, [X0+64]
	018 Call 0x1C17CF4
	019 Move X0, 0x2334000
	020 Move X0, [X0+3696]
	021 Call 0x1C17CF4
	022 Move X0, 0x2333000
	023 Move X0, [X0+1608]
	024 Call 0x1C17CF4
	025 Move X0, 0x2336000
	026 Move X0, [X0+3368]
	027 Call 0x1C17CF4
	028 Move X0, 0x2333000
	029 Move X0, [X0+3488]
	030 Call 0x1C17CF4
	031 Move X0, 0x2338000
	032 Move X0, [X0+96]
	033 Call 0x1C17CF4
	034 Move X0, 0x2338000
	035 Move X0, [X0+104]
	036 Call 0x1C17CF4
	037 Move X0, 0x2338000
	038 Move X0, [X0+128]
	039 Call 0x1C17CF4
	040 Move X0, 0x2335000
	041 Move X0, [X0+1992]
	042 Call 0x1C17CF4
	043 Move X0, 0x2336000
	044 Move X0, [X0+3480]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X21+2939], W8
	048 Move X0, [X20]
	049 Move X23, 0x2336000
	050 Move X22, 0x2338000
	051 Move X21, 0x2338000
	052 Move W8, [X0+224]
	053 Move X23, [X23+3368]
	054 Move X22, [X22+64]
	055 Move X21, [X21+128]
	056 Compare W8, 0
	057 JumpIfNotEqual {60}
	058 Call 0x1C17DFC
	059 Move X0, [X20]
	060 Move X8, [X0+184]
	061 Move [X8], X31
	062 Move X8, [X23]
	063 Move X0, [X22]
	064 Move X8, [X8+184]
	065 Move X20, [X8+24]
	066 Call 0x1C17F10
	067 Move X2, [X21]
	068 Move X1, X19
	069 Move X3, X31
	070 Move X21, X0
	071 Call Action`1<NetworkInput>..ctor, X0, X1, X2
	072 Move X0, X20
	073 Move X1, X21
	074 Move X2, X31
	075 Call Delegate.Remove, X0, X1
	076 Compare X0, 0
	077 JumpIfEqual {95}
	078 Move X21, [X22]
	079 Move X20, X0
	080 Move X1, X21
	081 Call 0x1C17E00
	082 Compare X0, 0
	083 JumpIfEqual {93}
	084 Move X8, [X23]
	085 Move X8, [X8+184]
	086 Move [X8+24], X0
	087 Move X21, [X22]
	088 Move X0, X20
	089 Move X1, X21
	090 Call 0x1C17E00
	091 Compare X0, 0
	092 JumpIfNotEqual {98}
	093 Move X0, X20
	094 Move X1, X21
	095 Move X8, [X23]
	096 Move X8, [X8+184]
	097 Move [X8+24], X31
	098 Move X22, 0x2336000
	099 Move X22, [X22+3480]
	100 Move X23, 0x2334000
	101 Move X21, 0x2338000
	102 Move X8, [X22]
	103 Move X8, [X8+184]
	104 Move X23, [X23+3696]
	105 Move X20, [X8+328]
	106 Move X0, [X23]
	107 Move X21, [X21+104]
	108 Call 0x1C17F10
	109 Move X2, [X21]
	110 Move X1, X19
	111 Move X3, X31
	112 Move X21, X0
	113 Call Action..ctor, X0, X1, X2
	114 Move X0, X20
	115 Move X1, X21
	116 Move X2, X31
	117 Call Delegate.Remove, X0, X1
	118 Compare X0, 0
	119 JumpIfEqual {129}
	120 Move X1, [X23]
	121 Move X8, [X0]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move X8, [X22]
	124 Move X8, [X8+184]
	125 Move [X8+328], X0
	126 Move X8, [X0]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Call 0x1C181E0
	129 Move X8, [X22]
	130 Move X8, [X8+184]
	131 Move [X8+328], X0
	132 Move X8, 0x2333000
	133 Move X8, [X8+3488]
	134 Move X20, 0x2338000
	135 Move X21, 0x2333000
	136 Move X0, [X8]
	137 Move X20, [X20+96]
	138 Move X21, [X21+1608]
	139 Call 0x1C17F10
	140 Move X2, [X20]
	141 Move X1, X19
	142 Move X3, X31
	143 Move X20, X0
	144 Call ObserverDelegate..ctor, X0, X1, X2
	145 Move X0, [X21]
	146 Move W8, [X0+224]
	147 Compare W8, 0
	148 JumpIfNotEqual {150}
	149 Call 0x1C17DFC
	150 Move X0, X20
	151 Move X20, [X31+32]
	152 Move X19, [X31+40]
	153 Move X22, [X31+16]
	154 Move X21, [X31+24]
	155 Move X1, X31
	156 Move X30, [X31+48]
	157 Move X23, [X31+56]
	158 Call App.DeregisterObserver, X0
	159 Return 

Method: System.Void HandleLocalUserAvatarChanged(SpatialSys.ObservableState.StateChangedEventArgs args)

Disassembly:
	0x01DC1AE0 MOV X0, X22
	0x01DC1AE4 MOV X1, X31
	0x01DC1AE8 BL 0x32277A8
	0x01DC1AEC TBNZ X0, 0x0, 0x1DC1B08
	0x01DC1AF0 FMOV S3, 1
	0x01DC1AF4 MOV X0, X22
	0x01DC1AF8 MOV V0.16B, V10.16B
	0x01DC1AFC MOV V1.16B, V9.16B
	0x01DC1B00 MOV V2.16B, V8.16B
	0x01DC1B04 BL 0x1DC239C
	0x01DC1B08 LDR X8, [X19 + 0x98]
	0x01DC1B0C CBNZ X8, 0x1DC1B94
	0x01DC1B10 MOV X0, X19
	0x01DC1B14 BL 0x1DC2428
	0x01DC1B18 MOV X1, X0
	0x01DC1B1C STR X0, [X19 + 0x98]
	0x01DC1B20 MOV X0, X19
	0x01DC1B24 MOV X2, X31
	0x01DC1B28 BL 0x3C366FC
	0x01DC1B2C B 0x1DC1B94
	0x01DC1B30 LDR X1, [X19 + 0xC8]
	0x01DC1B34 CBZ X1, 0x1DC1B44
	0x01DC1B38 MOV X0, X19
	0x01DC1B3C MOV X2, X31
	0x01DC1B40 BL 0x3C36834
	0x01DC1B44 LDP S0, S1, [X19 + 0xA0]
	0x01DC1B48 LDR V2, [X19 + 0xA8]
	0x01DC1B4C MOV X0, X19
	0x01DC1B50 MOV X1, X21
	0x01DC1B54 BL 0x1DC1734
	0x01DC1B58 MOV X1, X0
	0x01DC1B5C STR X0, [X19 + 0xC8]
	0x01DC1B60 MOV X0, X19
	0x01DC1B64 MOV X2, X31
	0x01DC1B68 BL 0x3C366FC
	0x01DC1B6C MOV X0, X20
	0x01DC1B70 MOV X1, X31
	0x01DC1B74 BL 0x32277A8
	0x01DC1B78 TBNZ X0, 0x0, 0x1DC1B94
	0x01DC1B7C FMOV S3, 1
	0x01DC1B80 MOV X0, X20
	0x01DC1B84 MOV V0.16B, V10.16B
	0x01DC1B88 MOV V1.16B, V9.16B
	0x01DC1B8C MOV V2.16B, V8.16B
	0x01DC1B90 BL 0x1DC239C
	0x01DC1B94 LDR X0, [X19 + 0x50]
	0x01DC1B98 CBZ X0, 0x1DC1C54
	0x01DC1B9C MOV X1, X31
	0x01DC1BA0 BL 0x3C3F58C
	0x01DC1BA4 MOVZ W8, 0x43B40000
	0x01DC1BA8 MOV V8.16B, V0.16B
	0x01DC1BAC MOV V9.16B, V1.16B
	0x01DC1BB0 FMOV S0, W31
	0x01DC1BB4 FMOV S1, W8
	0x01DC1BB8 MOV X0, X31
	0x01DC1BBC MOV V10.16B, V2.16B
	0x01DC1BC0 BL 0x3C30968
	0x01DC1BC4 ADRP X8, 0xFFFFFFFFFED29000
	0x01DC1BC8 LDR V1, [X8 + 0x104]
	0x01DC1BCC FMOV S2, W31
	0x01DC1BD0 MOV X0, X31
	0x01DC1BD4 FMUL S1, S0, S1
	0x01DC1BD8 FMOV S0, W31
	0x01DC1BDC BL 0x3C2A574
	0x01DC1BE0 ADRP X8, 0x2337000
	0x01DC1BE4 LDR X8, [X8 + 0xD0]
	0x01DC1BE8 MOV V11.16B, V0.16B
	0x01DC1BEC MOV V12.16B, V1.16B
	0x01DC1BF0 MOV V13.16B, V2.16B
	0x01DC1BF4 LDR X0, [X8]
	0x01DC1BF8 MOV V14.16B, V3.16B
	0x01DC1BFC LDR W8, [X0 + 0xE0]
	0x01DC1C00 CBNZ W8, 0x1DC1C08
	0x01DC1C04 BL 0x1C16DFC
	0x01DC1C08 MOV V0.16B, V8.16B
	0x01DC1C0C MOV V1.16B, V9.16B
	0x01DC1C10 MOV V2.16B, V10.16B
	0x01DC1C14 MOV V3.16B, V11.16B
	0x01DC1C18 MOV V4.16B, V12.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2618000
	007 Move X20, 0x2333000
	008 Move W8, [X21+2940]
	009 Move X20, [X20+1608]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x2333000
	016 Move X0, [X0+1608]
	017 Call 0x1C17CF4
	018 Move X0, 0x2334000
	019 Move X0, [X0+2840]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+2940], W8
	023 Move X0, [X20]
	024 Move X22, [X19+56]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X21, 0x2618000
	030 Move W8, [X21+1927]
	031 Compare W8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, 0x2333000
	034 Move X0, [X0+1608]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+1927], W8
	038 Move X0, [X20]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {44}
	042 Call 0x1C17DFC
	043 Move X0, [X20]
	044 Move X8, [X0+184]
	045 Move X8, [X8]
	046 Compare X8, 0
	047 JumpIfEqual {104}
	048 Move X8, [X8+184]
	049 Compare X8, 0
	050 JumpIfEqual {104}
	051 Compare X22, 0
	052 JumpIfEqual {104}
	053 Move X0, [X22+168]
	054 Compare X0, 0
	055 JumpIfEqual {104}
	056 Move X1, [X8+112]
	057 Move X2, X31
	058 Call AvatarView.UpdateAvatar, X0, X1
	059 Move W8, [X21+1927]
	060 Move X19, [X19+56]
	061 Compare W8, 0
	062 JumpIfNotEqual {68}
	063 Move X0, 0x2333000
	064 Move X0, [X0+1608]
	065 Call 0x1C17CF4
	066 Move W8, 1
	067 Move [X21+1927], W8
	068 Move X0, [X20]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {74}
	072 Call 0x1C17DFC
	073 Move X0, [X20]
	074 Move X8, [X0+184]
	075 Move X8, [X8]
	076 Compare X8, 0
	077 JumpIfEqual {104}
	078 Move X8, [X8+184]
	079 Compare X8, 0
	080 JumpIfEqual {104}
	081 Move X8, [X8+112]
	082 Compare X8, 0
	083 JumpIfEqual {104}
	084 Move X8, [X8+80]
	085 Compare X8, 0
	086 JumpIfEqual {104}
	087 Compare X19, 0
	088 JumpIfEqual {104}
	089 Move X0, [X19+168]
	090 Compare X0, 0
	091 JumpIfEqual {104}
	092 Move S0, [X8+76]
	093 Move S1, [X8+80]
	094 Move S2, [X8+84]
	095 Move S3, [X8+88]
	096 Move X20, [X31+32]
	097 Move X19, [X31+40]
	098 Move X22, [X31+16]
	099 Move X21, [X31+24]
	100 Move X1, X31
	101 Move X30, [X31+48]
	102 Call AvatarView.SetColor, X0, X1
	103 Return 
	104 Call 0x1C17F20

Method: System.Void MovePlayerDelta(UnityEngine.Vector3 moveDelta)

Disassembly:
	0x01DC1C54 BL 0x1C16F20
	0x01DC1C58 SUB X31, X31, 0xD0
	0x01DC1C5C STP D15, D14, [X31 + 0x50]
	0x01DC1C60 STP D13, D12, [X31 + 0x60]
	0x01DC1C64 STP D11, D10, [X31 + 0x70]
	0x01DC1C68 STP D9, D8, [X31 + 0x80]
	0x01DC1C6C STP X30, X25, [X31 + 0x90]
	0x01DC1C70 STP X24, X23, [X31 + 0xA0]
	0x01DC1C74 STP X22, X21, [X31 + 0xB0]
	0x01DC1C78 STP X20, X19, [X31 + 0xC0]
	0x01DC1C7C ADRP X21, 0x2617000
	0x01DC1C80 ADRP X22, 0x2337000
	0x01DC1C84 LDRB W8, [X21 + 0xBEE]
	0x01DC1C88 LDR X22, [X22 + 0xD0]
	0x01DC1C8C MOV W20, W1
	0x01DC1C90 MOV V15.16B, V6.16B
	0x01DC1C94 MOV V8.16B, V5.16B
	0x01DC1C98 MOV V10.16B, V4.16B
	0x01DC1C9C MOV V11.16B, V3.16B
	0x01DC1CA0 MOV V14.16B, V2.16B
	0x01DC1CA4 MOV V13.16B, V1.16B
	0x01DC1CA8 MOV V12.16B, V0.16B
	0x01DC1CAC MOV W19, W0
	0x01DC1CB0 TBNZ X8, 0x0, 0x1DC1CE0
	0x01DC1CB4 ADRP X0, 0x2332000
	0x01DC1CB8 LDR X0, [X0 + 0x598]
	0x01DC1CBC BL 0x1C16CF4
	0x01DC1CC0 ADRP X0, 0x2332000
	0x01DC1CC4 LDR X0, [X0 + 0x5F8]
	0x01DC1CC8 BL 0x1C16CF4
	0x01DC1CCC ADRP X0, 0x2337000
	0x01DC1CD0 LDR X0, [X0 + 0xD0]
	0x01DC1CD4 BL 0x1C16CF4
	0x01DC1CD8 MOVZ W8, 0x1
	0x01DC1CDC STRB W8, [X21 + 0xBEE]
	0x01DC1CE0 LDR X0, [X22]
	0x01DC1CE4 MOVI V0.2D, 0x0
	0x01DC1CE8 STUR V0, [X31 + 0x3C]
	0x01DC1CEC STP V0, V0, [X31 + 0x20]
	0x01DC1CF0 ADRP X23, 0x2332000
	0x01DC1CF4 LDR W8, [X0 + 0xE0]
	0x01DC1CF8 LDR X23, [X23 + 0x598]
	0x01DC1CFC CBNZ W8, 0x1DC1D08
	0x01DC1D00 BL 0x1C16DFC
	0x01DC1D04 LDR X0, [X22]
	0x01DC1D08 LDR X8, [X23]
	0x01DC1D0C LDR X9, [X0 + 0xB8]
	0x01DC1D10 LDR W10, [X8 + 0xE0]
	0x01DC1D14 LDR X21, [X9 + 0x8]
	0x01DC1D18 CBNZ W10, 0x1DC1D24
	0x01DC1D1C MOV X0, X8
	0x01DC1D20 BL 0x1C16DFC
	0x01DC1D24 MOV X0, X21
	0x01DC1D28 MOV X1, X31
	0x01DC1D2C MOV X2, X31
	0x01DC1D30 BL 0x3C3883C
	0x01DC1D34 TBNZ X0, 0x0, 0x1DC2028
	0x01DC1D38 LDR X0, [X22]
	0x01DC1D3C LDR W8, [X0 + 0xE0]
	0x01DC1D40 CBNZ W8, 0x1DC1D4C
	0x01DC1D44 BL 0x1C16DFC
	0x01DC1D48 LDR X0, [X22]
	0x01DC1D4C LDR X8, [X0 + 0xB8]
	0x01DC1D50 LDR X8, [X8 + 0x8]
	0x01DC1D54 CBZ X8, 0x1DC2050

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x2618000
	009 Move X21, 0x2338000
	010 Move W8, [X20+2941]
	011 Move X21, [X21+136]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x2338000
	021 Move X0, [X0+136]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2941], W8
	025 Move X8, [X21]
	026 Move X8, [X8+184]
	027 Move W9, [X8]
	028 Compare W9, 0
	029 JumpIfEqual {39}
	030 Move X19, [X8+8]
	031 Compare X19, 0
	032 JumpIfEqual {82}
	033 Move X0, X19
	034 Move X1, X31
	035 Call Transform.get_position, X0
	036 Add S0, S10, S0
	037 Add S1, S9, S1
	038 Add S2, S8, S2
	039 Move X0, [X19+32]
	040 Compare X0, 0
	041 JumpIfEqual {82}
	042 Move X20, [X19+48]
	043 Move X1, X31
	044 Call Component.get_transform, X0
	045 Compare X0, 0
	046 JumpIfEqual {82}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Compare X20, 0
	050 JumpIfEqual {82}
	051 Add S2, S8, S2
	052 Add S1, S9, S1
	053 Add S0, S10, S0
	054 Move X0, X20
	055 Move X1, X31
	056 Call Rigidbody.MovePosition, X0, X1
	057 Move X0, [X19+32]
	058 Compare X0, 0
	059 JumpIfEqual {82}
	060 Move X1, X31
	061 Call Component.get_transform, X0
	062 Move X8, [X19+48]
	063 Compare X8, 0
	064 JumpIfEqual {82}
	065 Move X19, X0
	066 Move X0, X8
	067 Move X1, X31
	068 Call Rigidbody.get_position, X0
	069 Compare X19, 0
	070 JumpIfEqual {82}
	071 Move X0, X19
	072 Move X20, [X31+48]
	073 Move X19, [X31+56]
	074 Move X30, [X31+32]
	075 Move X21, [X31+40]
	076 Move D9, [X31+16]
	077 Move D8, [X31+24]
	078 Move X1, X31
	079 Move V10, [X31+64]
	080 Call Transform.set_position, X0, X1
	081 Return 
	082 Call 0x1C17F20

Method: System.Void MovePlayerTo(UnityEngine.Vector3 position)

Disassembly:
	0x01DC1D58 BL 0x1DD00B4
	0x01DC1D5C LDR X8, [X23]
	0x01DC1D60 MOV X21, X0
	0x01DC1D64 LDR W9, [X8 + 0xE0]
	0x01DC1D68 CBNZ W9, 0x1DC1D74
	0x01DC1D6C MOV X0, X8
	0x01DC1D70 BL 0x1C16DFC
	0x01DC1D74 MOV X0, X21
	0x01DC1D78 MOV X1, X31
	0x01DC1D7C MOV X2, X31
	0x01DC1D80 BL 0x3C3883C
	0x01DC1D84 TBNZ X0, 0x0, 0x1DC2028
	0x01DC1D88 TBZ X20, 0x0, 0x1DC1FE0
	0x01DC1D8C ADRP X24, 0x2617000
	0x01DC1D90 LDRB W8, [X24 + 0xABD]
	0x01DC1D94 STP S15, S8, [X31 + 0x18]
	0x01DC1D98 CBNZ W8, 0x1DC1DB0
	0x01DC1D9C ADRP X0, 0x2332000
	0x01DC1DA0 LDR X0, [X0 + 0x5A0]
	0x01DC1DA4 BL 0x1C16CF4
	0x01DC1DA8 MOVZ W8, 0x1
	0x01DC1DAC STRB W8, [X24 + 0xABD]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+48]
	005 Compare X0, 0
	006 JumpIfEqual {29}
	007 Move X1, X31
	008 Call Rigidbody.MovePosition, X0, X1
	009 Move X0, [X19+32]
	010 Compare X0, 0
	011 JumpIfEqual {29}
	012 Move X1, X31
	013 Call Component.get_transform, X0
	014 Move X8, [X19+48]
	015 Compare X8, 0
	016 JumpIfEqual {29}
	017 Move X19, X0
	018 Move X0, X8
	019 Move X1, X31
	020 Call Rigidbody.get_position, X0
	021 Compare X19, 0
	022 JumpIfEqual {29}
	023 Move X0, X19
	024 Move X1, X31
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Call Transform.set_position, X0, X1
	028 Return 
	029 Call 0x1C17F20

Method: System.Void HandleMenuButtonPressed()

Disassembly:
	0x01DC1DB0 ADRP X20, 0x2332000
	0x01DC1DB4 LDR X20, [X20 + 0x5A0]
	0x01DC1DB8 LDR X0, [X22]
	0x01DC1DBC LDR X8, [X20]

ISIL:
	001 Move W8, [X0+308]
	002 Xor W8, W8, 1
	003 Move [X0+308], W8
	004 Return 

Method: System.Void FixedUpdate()

Disassembly:
	0x01DC1DC0 LDR W9, [X0 + 0xE0]
	0x01DC1DC4 LDR X8, [X8 + 0xB8]
	0x01DC1DC8 LDP S15, S8, [X8 + 0x24]
	0x01DC1DCC LDR V9, [X8 + 0x2C]
	0x01DC1DD0 CBNZ W9, 0x1DC1DDC
	0x01DC1DD4 BL 0x1C16DFC
	0x01DC1DD8 LDR X0, [X22]
	0x01DC1DDC LDR X8, [X0 + 0xB8]
	0x01DC1DE0 LDR X8, [X8 + 0x8]
	0x01DC1DE4 CBZ X8, 0x1DC2050
	0x01DC1DE8 LDR W0, [X8 + 0x50]
	0x01DC1DEC MOV X1, X31
	0x01DC1DF0 BL 0x3C35CB8
	0x01DC1DF4 ADRP X25, 0x2332000
	0x01DC1DF8 LDR X25, [X25 + 0x5F8]
	0x01DC1DFC MOV W21, W0
	0x01DC1E00 LDR X8, [X25]
	0x01DC1E04 LDR W9, [X8 + 0xE0]
	0x01DC1E08 CBNZ W9, 0x1DC1E14
	0x01DC1E0C MOV X0, X8
	0x01DC1E10 BL 0x1C16DFC
	0x01DC1E14 ADD X0, X31, 0x20
	0x01DC1E18 FMOV S6, 10
	0x01DC1E1C MOV V0.16B, V12.16B
	0x01DC1E20 MOV V1.16B, V13.16B
	0x01DC1E24 MOV V2.16B, V14.16B
	0x01DC1E28 MOV V3.16B, V15.16B
	0x01DC1E2C MOV V4.16B, V8.16B
	0x01DC1E30 MOV V5.16B, V9.16B
	0x01DC1E34 MOV W1, W21
	0x01DC1E38 MOV X2, X31
	0x01DC1E3C BL 0x3C8B18C
	0x01DC1E40 TBZ X0, 0x0, 0x1DC1E84
	0x01DC1E44 ADD X0, X31, 0x20
	0x01DC1E48 MOV X1, X31
	0x01DC1E4C BL 0x3C8E66C
	0x01DC1E50 ADRP X21, 0x2617000
	0x01DC1E54 LDRB W8, [X21 + 0x786]
	0x01DC1E58 LDR V15, [X31 + 0x18]
	0x01DC1E5C MOV V8.16B, V0.16B
	0x01DC1E60 MOV V9.16B, V1.16B
	0x01DC1E64 MOV V14.16B, V2.16B
	0x01DC1E68 CBNZ W8, 0x1DC1FAC
	0x01DC1E6C ADRP X0, 0x2332000
	0x01DC1E70 LDR X0, [X0 + 0x5A0]
	0x01DC1E74 BL 0x1C16CF4
	0x01DC1E78 MOVZ W8, 0x1
	0x01DC1E7C STRB W8, [X21 + 0x786]
	0x01DC1E80 B 0x1DC1FAC
	0x01DC1E84 ADRP X23, 0x2617000
	0x01DC1E88 LDRB W8, [X23 + 0x786]
	0x01DC1E8C CBNZ W8, 0x1DC1EA4
	0x01DC1E90 ADRP X0, 0x2332000
	0x01DC1E94 LDR X0, [X0 + 0x5A0]
	0x01DC1E98 BL 0x1C16CF4
	0x01DC1E9C MOVZ W8, 0x1
	0x01DC1EA0 STRB W8, [X23 + 0x786]
	0x01DC1EA4 LDR X8, [X20]
	0x01DC1EA8 LDRB W9, [X24 + 0xABD]
	0x01DC1EAC LDR X8, [X8 + 0xB8]
	0x01DC1EB0 LDP S8, S15, [X8 + 0x18]
	0x01DC1EB4 LDR V1, [X8 + 0x20]
	0x01DC1EB8 CBNZ W9, 0x1DC1EDC
	0x01DC1EBC MOV X0, X20
	0x01DC1EC0 MOV V9.16B, V1.16B
	0x01DC1EC4 BL 0x1C16CF4
	0x01DC1EC8 LDR X8, [X20]
	0x01DC1ECC MOVZ W9, 0x1
	0x01DC1ED0 STRB W9, [X24 + 0xABD]
	0x01DC1ED4 MOV V1.16B, V9.16B
	0x01DC1ED8 LDR X8, [X8 + 0xB8]
	0x01DC1EDC LDR X0, [X22]
	0x01DC1EE0 LDR V2, [X8 + 0x24]
	0x01DC1EE4 LDR V0, [X8 + 0x28]
	0x01DC1EE8 LDR W9, [X0 + 0xE0]
	0x01DC1EEC STP S2, S0, [X31 + 0x10]
	0x01DC1EF0 LDR V0, [X8 + 0x2C]
	0x01DC1EF4 STR S0, [X31 + 0xC]
	0x01DC1EF8 CBNZ W9, 0x1DC1F0C
	0x01DC1EFC MOV V9.16B, V1.16B
	0x01DC1F00 BL 0x1C16DFC
	0x01DC1F04 LDR X0, [X22]
	0x01DC1F08 MOV V1.16B, V9.16B
	0x01DC1F0C LDR X8, [X0 + 0xB8]
	0x01DC1F10 LDR X8, [X8 + 0x8]
	0x01DC1F14 CBZ X8, 0x1DC2050
	0x01DC1F18 LDR W0, [X8 + 0x50]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2618000
	007 Move X21, 0x2338000
	008 Move W8, [X20+2942]
	009 Move X21, [X21+56]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x2338000
	016 Move X0, [X0+56]
	017 Call 0x1C17CF4
	018 Move X0, 0x2333000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2942], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X21]
	029 Move X8, [X0+184]
	030 Move X22, 0x2333000
	031 Move X8, [X8+8]
	032 Move X22, [X22+1432]
	033 Compare X8, 0
	034 JumpIfEqual {36}
	035 Move X20, [X8+32]
	036 Move X20, X31
	037 Move X0, [X22]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Inequality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {109}
	050 Move X0, [X21]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X21]
	056 Move X8, [X0+184]
	057 Move X8, [X8+8]
	058 Compare X8, 0
	059 JumpIfEqual {115}
	060 Move X8, [X8+32]
	061 Compare X8, 0
	062 JumpIfEqual {115}
	063 Move W8, [X8+120]
	064 Compare W8, 0
	065 JumpIfEqual {109}
	066 Move X0, [X22]
	067 Move X20, [X19+48]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X0, X20
	073 Move X1, X31
	074 Move X2, X31
	075 Call Object.op_Inequality, X0, X1
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {109}
	080 Move X0, [X21]
	081 Move X19, [X19+48]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {87}
	085 Call 0x1C17DFC
	086 Move X0, [X21]
	087 Move X8, [X0+184]
	088 Move X8, [X8+8]
	089 Compare X8, 0
	090 JumpIfEqual {115}
	091 Move X8, [X8+32]
	092 Compare X8, 0
	093 JumpIfEqual {115}
	094 Compare X19, 0
	095 JumpIfEqual {115}
	096 Move S1, [X8+128]
	097 Move S2, [X8+132]
	098 Move V0, [X8+124]
	099 Move X0, X19
	100 Move X20, [X31+32]
	101 Move X19, [X31+40]
	102 Move X22, [X31+16]
	103 Move X21, [X31+24]
	104 Move W1, 5
	105 Move X2, X31
	106 Move X30, [X31+48]
	107 Call Rigidbody.AddForce, X0, X1, X2
	108 Return 
	109 Move X20, [X31+32]
	110 Move X19, [X31+40]
	111 Move X22, [X31+16]
	112 Move X21, [X31+24]
	113 Move X30, [X31+48]
	114 Return 
	115 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01DC1F1C MOV X1, X31
	0x01DC1F20 FADD S9, S12, S8
	0x01DC1F24 FADD S15, S13, S15
	0x01DC1F28 FADD S8, S14, S1
	0x01DC1F2C BL 0x3C35CB8
	0x01DC1F30 LDR X8, [X25]
	0x01DC1F34 MOV W21, W0
	0x01DC1F38 LDR W9, [X8 + 0xE0]
	0x01DC1F3C CBNZ W9, 0x1DC1F48
	0x01DC1F40 MOV X0, X8
	0x01DC1F44 BL 0x1C16DFC
	0x01DC1F48 LDP S3, S4, [X31 + 0x10]
	0x01DC1F4C LDR V5, [X31 + 0xC]
	0x01DC1F50 ADD X0, X31, 0x20
	0x01DC1F54 FMOV S6, 10
	0x01DC1F58 MOV V0.16B, V9.16B
	0x01DC1F5C MOV V1.16B, V15.16B
	0x01DC1F60 MOV V2.16B, V8.16B
	0x01DC1F64 MOV W1, W21
	0x01DC1F68 MOV X2, X31
	0x01DC1F6C BL 0x3C8B18C
	0x01DC1F70 LDP S15, S8, [X31 + 0x18]
	0x01DC1F74 TBZ X0, 0x0, 0x1DC1FE0
	0x01DC1F78 ADD X0, X31, 0x20
	0x01DC1F7C MOV X1, X31
	0x01DC1F80 BL 0x3C8E66C
	0x01DC1F84 LDRB W8, [X23 + 0x786]
	0x01DC1F88 MOV V8.16B, V0.16B
	0x01DC1F8C MOV V9.16B, V1.16B
	0x01DC1F90 MOV V14.16B, V2.16B
	0x01DC1F94 CBNZ W8, 0x1DC1FAC
	0x01DC1F98 ADRP X0, 0x2332000
	0x01DC1F9C LDR X0, [X0 + 0x5A0]
	0x01DC1FA0 BL 0x1C16CF4
	0x01DC1FA4 MOVZ W8, 0x1
	0x01DC1FA8 STRB W8, [X23 + 0x786]
	0x01DC1FAC LDR X8, [X20]
	0x01DC1FB0 ADRP X9, 0xFFFFFFFFFED29000
	0x01DC1FB4 LDR V0, [X9 + 0x200]
	0x01DC1FB8 LDR X8, [X8 + 0xB8]
	0x01DC1FBC LDP S1, S2, [X8 + 0x18]
	0x01DC1FC0 LDR V3, [X8 + 0x20]
	0x01DC1FC4 FMUL S1, S1, S0
	0x01DC1FC8 FADD S12, S8, S1
	0x01DC1FCC LDR V8, [X31 + 0x1C]
	0x01DC1FD0 FMUL S2, S2, S0
	0x01DC1FD4 FMUL S0, S3, S0
	0x01DC1FD8 FADD S13, S9, S2
	0x01DC1FDC FADD S14, S14, S0
	0x01DC1FE0 LDR X0, [X22]
	0x01DC1FE4 LDR W8, [X0 + 0xE0]
	0x01DC1FE8 CBNZ W8, 0x1DC1FF4
	0x01DC1FEC BL 0x1C16DFC
	0x01DC1FF0 LDR X0, [X22]
	0x01DC1FF4 LDR X8, [X0 + 0xB8]
	0x01DC1FF8 LDR X8, [X8 + 0x8]
	0x01DC1FFC CBZ X8, 0x1DC2050
	0x01DC2000 BL 0x1DD00B4
	0x01DC2004 MOV W1, W19
	0x01DC2008 MOV V0.16B, V12.16B
	0x01DC200C MOV V1.16B, V13.16B
	0x01DC2010 MOV V2.16B, V14.16B
	0x01DC2014 MOV V3.16B, V11.16B
	0x01DC2018 MOV V4.16B, V10.16B
	0x01DC201C MOV V5.16B, V8.16B
	0x01DC2020 MOV V6.16B, V15.16B
	0x01DC2024 BL 0x1DD02CC
	0x01DC2028 LDP X20, X19, [X31 + 0xC0]
	0x01DC202C LDP X22, X21, [X31 + 0xB0]
	0x01DC2030 LDP X24, X23, [X31 + 0xA0]
	0x01DC2034 LDP X30, X25, [X31 + 0x90]
	0x01DC2038 LDP D9, D8, [X31 + 0x80]
	0x01DC203C LDP D11, D10, [X31 + 0x70]
	0x01DC2040 LDP D13, D12, [X31 + 0x60]
	0x01DC2044 LDP D15, D14, [X31 + 0x50]
	0x01DC2048 ADD X31, X31, 0xD0
	0x01DC204C RET
	0x01DC2050 BL 0x1C16F20
	0x01DC2054 LDR V4, [X31]
	0x01DC2058 ADD X8, X31, 0x4
	0x01DC205C LDR V3, [X31 + 0x8]
	0x01DC2060 LDR V5, [X0 + 0xA0]
	0x01DC2064 LDR V6, [X0 + 0xA8]
	0x01DC2068 UNIMPLEMENTED
	0x01DC206C FADD S3, S3, S6
	0x01DC2070 FADD V4.2S, V4.2S, V5.2S
	0x01DC2074 STR D4, [X0 + 0xA0]
	0x01DC2078 STR S3, [X0 + 0xA8]
	0x01DC207C B 0x1DC1918
	0x01DC2080 B 0x1DC1918
	0x01DC2084 SUB X31, X31, 0x80
	0x01DC2088 STP D15, D14, [X31 + 0x10]
	0x01DC208C STP D13, D12, [X31 + 0x20]
	0x01DC2090 STP D11, D10, [X31 + 0x30]
	0x01DC2094 STP D9, D8, [X31 + 0x40]
	0x01DC2098 STP X30, X23, [X31 + 0x50]
	0x01DC209C STP X22, X21, [X31 + 0x60]
	0x01DC20A0 STP X20, X19, [X31 + 0x70]
	0x01DC20A4 ADRP X21, 0x2616000
	0x01DC20A8 LDRB W8, [X21 + 0xB81]
	0x01DC20AC MOV W20, W1
	0x01DC20B0 MOV V8.16B, V4.16B
	0x01DC20B4 MOV V9.16B, V3.16B
	0x01DC20B8 MOV V10.16B, V2.16B
	0x01DC20BC MOV V11.16B, V1.16B
	0x01DC20C0 MOV V12.16B, V0.16B
	0x01DC20C4 MOV X19, X0
	0x01DC20C8 TBNZ X8, 0x0, 0x1DC20F8
	0x01DC20CC ADRP X0, 0x2331000
	0x01DC20D0 LDR X0, [X0 + 0x5D8]
	0x01DC20D4 BL 0x1C16CF4
	0x01DC20D8 ADRP X0, 0x2331000
	0x01DC20DC LDR X0, [X0 + 0x5F8]
	0x01DC20E0 BL 0x1C16CF4
	0x01DC20E4 ADRP X0, 0x2336000
	0x01DC20E8 LDR X0, [X0 + 0xD8]
	0x01DC20EC BL 0x1C16CF4
	0x01DC20F0 MOVZ W8, 0x1
	0x01DC20F4 STRB W8, [X21 + 0xB81]
	0x01DC20F8 LDR X0, [X19 + 0x58]
	0x01DC20FC CBZ X0, 0x1DC2280
	0x01DC2100 ADRP X23, 0x2331000
	0x01DC2104 ADRP X22, 0x2331000
	0x01DC2108 LDR X23, [X23 + 0x5D8]
	0x01DC210C LDR X22, [X22 + 0x5F8]
	0x01DC2110 MOV X1, X31
	0x01DC2114 BL 0x3C3F58C
	0x01DC2118 LDR X0, [X23]
	0x01DC211C LDR X21, [X19 + 0xF8]
	0x01DC2120 MOV V13.16B, V0.16B
	0x01DC2124 MOV V14.16B, V1.16B
	0x01DC2128 LDR W8, [X0 + 0xE0]
	0x01DC212C MOV V15.16B, V2.16B
	0x01DC2130 CBNZ W8, 0x1DC213C
	0x01DC2134 BL 0x1C16DFC
	0x01DC2138 LDR X0, [X23]
	0x01DC213C LDR X8, [X0 + 0xB8]
	0x01DC2140 MOV X1, X31
	0x01DC2144 LDR W0, [X8 + 0x24]
	0x01DC2148 BL 0x3C35CB8
	0x01DC214C LDR X8, [X22]
	0x01DC2150 MOV W22, W0
	0x01DC2154 LDR W9, [X8 + 0xE0]
	0x01DC2158 CBNZ W9, 0x1DC2164
	0x01DC215C MOV X0, X8
	0x01DC2160 BL 0x1C16DFC
	0x01DC2164 ADRP X8, 0xFFFFFFFFFED28000
	0x01DC2168 LDR V3, [X8 + 0xBC]
	0x01DC216C MOV V0.16B, V13.16B
	0x01DC2170 MOV V1.16B, V14.16B
	0x01DC2174 MOV V2.16B, V15.16B
	0x01DC2178 MOV X0, X21
	0x01DC217C MOV W1, W22
	0x01DC2180 MOV X2, X31
	0x01DC2184 BL 0x3C8D760
	0x01DC2188 CMP W0, 0x0
	0x01DC218C B.GT 0x1DC225C
	0x01DC2190 LDRB W8, [X19 + 0x8C]
	0x01DC2194 CBNZ W8, 0x1DC225C
	0x01DC2198 LDR X0, [X19 + 0x58]
	0x01DC219C CBZ X0, 0x1DC2280
	0x01DC21A0 MOV X1, X31
	0x01DC21A4 BL 0x3C3F58C
	0x01DC21A8 LDR X0, [X19 + 0x58]
	0x01DC21AC CBZ X0, 0x1DC2280
	0x01DC21B0 MOV X1, X31
	0x01DC21B4 MOV V13.16B, V0.16B
	0x01DC21B8 MOV V14.16B, V1.16B
	0x01DC21BC MOV V15.16B, V2.16B
	0x01DC21C0 BL 0x3C3FA04
	0x01DC21C4 STP S1, S2, [X31 + 0x4]
	0x01DC21C8 STR S0, [X31]
	0x01DC21CC MOV W0, W20
	0x01DC21D0 MOV V0.16B, V12.16B
	0x01DC21D4 MOV V1.16B, V11.16B
	0x01DC21D8 MOV V2.16B, V10.16B
	0x01DC21DC MOV V3.16B, V9.16B
	0x01DC21E0 MOV V4.16B, V13.16B
	0x01DC21E4 MOV V5.16B, V14.16B
	0x01DC21E8 MOV V6.16B, V15.16B
	0x01DC21EC MOV X1, X31
	0x01DC21F0 BL 0x1DD7BD0
	0x01DC21F4 FMUL S8, S0, S8
	0x01DC21F8 FCMP S8, 0x0
	0x01DC21FC B.LE 0x1DC225C
	0x01DC2200 ADRP X8, 0x2336000
	0x01DC2204 LDR X8, [X8 + 0xD8]
	0x01DC2208 LDR X0, [X8]
	0x01DC220C LDR W8, [X0 + 0xE0]
	0x01DC2210 CBNZ W8, 0x1DC2218
	0x01DC2214 BL 0x1C16DFC
	0x01DC2218 MOV V0.16B, V8.16B
	0x01DC221C MOV X0, X31
	0x01DC2220 BL 0x1E00710
	0x01DC2224 MOV V0.16B, V8.16B
	0x01DC2228 BL 0x1DC2284
	0x01DC222C LDR X0, [X19 + 0xE0]
	0x01DC2230 CBZ X0, 0x1DC2280
	0x01DC2234 LDP X20, X19, [X31 + 0x70]
	0x01DC2238 LDP X22, X21, [X31 + 0x60]
	0x01DC223C LDP X30, X23, [X31 + 0x50]
	0x01DC2240 LDP D9, D8, [X31 + 0x40]
	0x01DC2244 LDP D11, D10, [X31 + 0x30]
	0x01DC2248 LDP D13, D12, [X31 + 0x20]
	0x01DC224C LDP D15, D14, [X31 + 0x10]
	0x01DC2250 MOV X1, X31
	0x01DC2254 ADD X31, X31, 0x80
	0x01DC2258 B 0x3BFCAC0
	0x01DC225C LDP X20, X19, [X31 + 0x70]
	0x01DC2260 LDP X22, X21, [X31 + 0x60]
	0x01DC2264 LDP X30, X23, [X31 + 0x50]
	0x01DC2268 LDP D9, D8, [X31 + 0x40]
	0x01DC226C LDP D11, D10, [X31 + 0x30]
	0x01DC2270 LDP D13, D12, [X31 + 0x20]
	0x01DC2274 LDP D15, D14, [X31 + 0x10]
	0x01DC2278 ADD X31, X31, 0x80
	0x01DC227C RET
	0x01DC2280 BL 0x1C16F20
	0x01DC2284 STR D8, [X31 - 0x20]!
	0x01DC2288 STR X30, [X31 + 0x8]
	0x01DC228C STP X20, X19, [X31 + 0x10]
	0x01DC2290 ADRP X20, 0x2616000
	0x01DC2294 ADRP X19, 0x2336000
	0x01DC2298 LDRB W8, [X20 + 0xC2A]
	0x01DC229C LDR X19, [X19 + 0xE0]
	0x01DC22A0 MOV V8.16B, V0.16B
	0x01DC22A4 TBNZ X8, 0x0, 0x1DC22BC
	0x01DC22A8 ADRP X0, 0x2336000
	0x01DC22AC LDR X0, [X0 + 0xE0]
	0x01DC22B0 BL 0x1C16CF4
	0x01DC22B4 MOVZ W8, 0x1
	0x01DC22B8 STRB W8, [X20 + 0xC2A]
	0x01DC22BC LDR X8, [X19]
	0x01DC22C0 LDR X8, [X8 + 0xB8]
	0x01DC22C4 LDR V0, [X8 + 0x28]
	0x01DC22C8 LDR X9, [X8 + 0x30]
	0x01DC22CC FCMP S0, S8
	0x01DC22D0 FCSEL S0, S0, S8, GT
	0x01DC22D4 STR S0, [X8 + 0x28]
	0x01DC22D8 CBZ X9, 0x1DC22EC
	0x01DC22DC LDP X20, X19, [X31 + 0x10]
	0x01DC22E0 LDR X30, [X31 + 0x8]
	0x01DC22E4 LDR V8, [X31], #0x20
	0x01DC22E8 RET
	0x01DC22EC BL 0x1DD4D10
	0x01DC22F0 LDR X8, [X19]
	0x01DC22F4 LDR X9, [X8 + 0xB8]
	0x01DC22F8 LDR X8, [X9 + 0x20]
	0x01DC22FC STR X0, [X9 + 0x30]
	0x01DC2300 CBZ X8, 0x1DC2320
	0x01DC2304 LDP X20, X19, [X31 + 0x10]
	0x01DC2308 LDR X30, [X31 + 0x8]
	0x01DC230C MOV X1, X0
	0x01DC2310 MOV X0, X8
	0x01DC2314 MOV X2, X31
	0x01DC2318 LDR V8, [X31], #0x20
	0x01DC231C B 0x3C366FC
	0x01DC2320 BL 0x1C16F20
	0x01DC2324 STP D9, D8, [X31 - 0x20]!
	0x01DC2328 STR X30, [X31 + 0x10]
	0x01DC232C MOV V8.16B, V1.16B
	0x01DC2330 MOV V9.16B, V0.16B
	0x01DC2334 BL 0x1DCF310
	0x01DC2338 CBZ X0, 0x1DC235C
	0x01DC233C LDR X8, [X0]
	0x01DC2340 LDR X30, [X31 + 0x10]
	0x01DC2344 MOV V0.16B, V9.16B
	0x01DC2348 MOV V1.16B, V8.16B
	0x01DC234C LDR X2, [X8 + 0x228]
	0x01DC2350 LDR X1, [X8 + 0x230]
	0x01DC2354 LDP D9, D8, [X31], #0x20
	0x01DC2358 BR X2
	0x01DC235C BL 0x1C16F20
	0x01DC2360 STP X30, X19, [X31 - 0x10]!
	0x01DC2364 LDR X1, [X0 + 0x1D0]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D10
	003 Move [X31+24], D9
	004 Move [X31+32], D8
	005 Move [X31+40], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x2618000
	011 Move W8, [X20+2943]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {37}
	017 Move X0, 0x2338000
	018 Move X0, [X0+56]
	019 Call 0x1C17CF4
	020 Move X0, 0x2333000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move X0, 0x2338000
	024 Move X0, [X0+144]
	025 Call 0x1C17CF4
	026 Move X0, 0x2338000
	027 Move X0, [X0+152]
	028 Call 0x1C17CF4
	029 Move X0, 0x2338000
	030 Move X0, [X0+160]
	031 Call 0x1C17CF4
	032 Move X0, 0x2338000
	033 Move X0, [X0+168]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+2943], W8
	037 Move [X31+8], X31
	038 Move S10, [X19+160]
	039 Move S9, [X19+164]
	040 Move V8, [X19+168]
	041 Move X8, -19750912
	042 Move V0, [X8+816]
	043 Move X21, 0x2333000
	044 Multiply S1, S10, S10
	045 Multiply S2, S9, S9
	046 Move X21, [X21+1432]
	047 Add S1, S1, S2
	048 Multiply S2, S8, S8
	049 Add S1, S1, S2
	050 NotImplemented "Instruction FCMP not yet implemented."
	051 Move X0, X31
	052 Call Time.get_deltaTime
	053 Multiply S3, S10, S0
	054 Multiply S1, S9, S0
	055 Multiply S2, S8, S0
	056 Move X0, X19
	057 Move V0, V3
	058 Call PlayerController.MovePlayerDelta, X0, X1
	059 Move X20, 0x2618000
	060 Move V8, [X19+160]
	061 Move W8, [X20+1923]
	062 Move V9, [X19+168]
	063 Compare W8, 0
	064 JumpIfNotEqual {70}
	065 Move X0, 0x2332000
	066 Move X0, [X0+1440]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X20+1923], W8
	070 Move X8, 0x2332000
	071 Move X8, [X8+1440]
	072 Move V0, [X19+172]
	073 Move S1, 1
	074 Move S3, W31
	075 Move X8, [X8]
	076 NotImplemented "Instruction FMIN not yet implemented."
	077 NotImplemented "Instruction FCMP not yet implemented."
	078 NotImplemented "Instruction FCSEL not yet implemented."
	079 Move X8, [X8+184]
	080 Move V0, [X8]
	081 Move V2, [X8+8]
	082 Subtract V0, V0, V8
	083 Subtract S2, S2, S9
	084 NotImplemented "Instruction INVALID not yet implemented."
	085 Multiply S1, S2, S1
	086 Add V0, V8, V0
	087 Add S1, S9, S1
	088 Move [X19+160], D0
	089 Move [X19+168], S1
	090 Move X0, [X21]
	091 Move X20, [X19+176]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X0, X20
	097 Move X1, X31
	098 Move X2, X31
	099 Call Object.op_Inequality, X0, X1
	100 Move TEMP, X0
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfNotEqual {117}
	104 Move X0, [X19+176]
	105 Compare X0, 0
	106 JumpIfEqual {317}
	107 Move X1, X31
	108 Call Transform.get_position, X0
	109 Move S3, [X19+184]
	110 Move S4, [X19+188]
	111 Move V5, [X19+192]
	112 Move X0, X19
	113 Add S0, S0, S3
	114 Add S1, S1, S4
	115 Add S2, S2, S5
	116 Call PlayerController.MovePlayerTo, X0, X1
	117 Move X22, 0x2337000
	118 Move X22, [X22+56]
	119 Move X0, X31
	120 Call GameManager.get_isDebug
	121 Move TEMP, X0
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfNotEqual {185}
	125 Move X0, X31
	126 Call Time.get_time
	127 Move V1, [X19+260]
	128 Move V2, [X19+256]
	129 Move W20, [X19+264]
	130 Subtract S0, S0, S1
	131 NotImplemented "Instruction FCMP not yet implemented."
	132 Move X0, X31
	133 Call Time.get_time
	134 Move V1, [X19+260]
	135 Move W8, 0x7F800000
	136 NotImplemented "Instruction SCVTF not yet implemented."
	137 Move X0, X31
	138 Subtract S0, S0, S1
	139 Move S1, W8
	140 Move W8, 0xCF000000
	141 NotImplemented "Instruction FDIV not yet implemented."
	142 Move S2, W8
	143 Move W8, 0x447A0000
	144 NotImplemented "Instruction FCMP not yet implemented."
	145 Move S1, W8
	146 NotImplemented "Instruction FCVTZS not yet implemented."
	147 NotImplemented "Instruction SCVTF not yet implemented."
	148 NotImplemented "Instruction FCSEL not yet implemented."
	149 Move [X31+12], S0
	150 NotImplemented "Instruction FDIV not yet implemented."
	151 Move [X31+8], S0
	152 Move [X19+264], W31
	153 Call Time.get_time
	154 Move [X19+260], S0
	155 Move X20, 0x2337000
	156 Move X20, [X20+152]
	157 Add X0, X31, 12
	158 Move X2, X31
	159 Move X1, [X20]
	160 Call Single.ToString, X0, X1
	161 Move X1, [X20]
	162 Move X20, X0
	163 Add X0, X31, 8
	164 Move X2, X31
	165 Call Single.ToString, X0, X1
	166 Move X8, 0x2337000
	167 Move X8, [X8+168]
	168 Move X9, 0x2337000
	169 Move X9, [X9+160]
	170 Move X3, X0
	171 Move X8, [X8]
	172 Move X1, X20
	173 Move X2, [X9]
	174 Move X4, X31
	175 Move X0, X8
	176 Call String.Concat, X0, X1, X2, X3
	177 Move X8, 0x2337000
	178 Move X8, [X8+144]
	179 Move X1, X0
	180 Move X8, [X8]
	181 Move X0, X8
	182 Call DebugView.AddText, X0, X1
	183 Add W8, W20, 1
	184 Move [X19+264], W8
	185 Move X0, [X22]
	186 Move W8, [X0+224]
	187 Compare W8, 0
	188 JumpIfNotEqual {191}
	189 Call 0x1C17DFC
	190 Move X0, [X22]
	191 Move X8, [X0+184]
	192 Move X8, [X8+8]
	193 Compare X8, 0
	194 JumpIfEqual {196}
	195 Move X20, [X8+32]
	196 Move X20, X31
	197 Move X0, [X21]
	198 Move W8, [X0+224]
	199 Compare W8, 0
	200 JumpIfNotEqual {202}
	201 Call 0x1C17DFC
	202 Move X0, X20
	203 Move X1, X31
	204 Move X2, X31
	205 Call Object.op_Inequality, X0, X1
	206 Move X20, [X19+72]
	207 Move TEMP, X0
	208 And TEMP, TEMP, 1
	209 Compare TEMP, 1
	210 JumpIfNotEqual {264}
	211 Move X0, [X22]
	212 Move W8, [X0+224]
	213 Compare W8, 0
	214 JumpIfNotEqual {217}
	215 Call 0x1C17DFC
	216 Move X0, [X22]
	217 Move X8, [X0+184]
	218 Move X8, [X8+8]
	219 Compare X8, 0
	220 JumpIfEqual {317}
	221 Move X8, [X8+32]
	222 Compare X8, 0
	223 JumpIfEqual {317}
	224 Compare X20, 0
	225 JumpIfEqual {317}
	226 Move W1, [X8+116]
	227 Move X0, X20
	228 Move X2, X31
	229 Call AudioReverbZone.set_reverbPreset, X0, X1
	230 Move X0, [X21]
	231 Move X20, [X19+48]
	232 Move W8, [X0+224]
	233 Compare W8, 0
	234 JumpIfNotEqual {236}
	235 Call 0x1C17DFC
	236 Move X0, X20
	237 Move X1, X31
	238 Move X2, X31
	239 Call Object.op_Inequality, X0, X1
	240 Move TEMP, X0
	241 And TEMP, TEMP, 1
	242 Compare TEMP, 1
	243 JumpIfNotEqual {290}
	244 Move X0, [X22]
	245 Move X20, [X19+48]
	246 Move W8, [X0+224]
	247 Compare W8, 0
	248 JumpIfNotEqual {251}
	249 Call 0x1C17DFC
	250 Move X0, [X22]
	251 Move X8, [X0+184]
	252 Move X8, [X8+8]
	253 Compare X8, 0
	254 JumpIfEqual {317}
	255 Move X8, [X8+32]
	256 Compare X8, 0
	257 JumpIfEqual {317}
	258 Compare X20, 0
	259 JumpIfEqual {317}
	260 Move W8, [X8+120]
	261 Move X0, X20
	262 NotImplemented "Instruction CMP not yet implemented."
	263 NotImplemented "Instruction CSET not yet implemented."
	264 Compare X20, 0
	265 JumpIfEqual {317}
	266 Move X0, X20
	267 Move W1, W31
	268 Move X2, X31
	269 Call AudioReverbZone.set_reverbPreset, X0, X1
	270 Move X0, [X21]
	271 Move X20, [X19+48]
	272 Move W8, [X0+224]
	273 Compare W8, 0
	274 JumpIfNotEqual {276}
	275 Call 0x1C17DFC
	276 Move X0, X20
	277 Move X1, X31
	278 Move X2, X31
	279 Call Object.op_Inequality, X0, X1
	280 Move TEMP, X0
	281 And TEMP, TEMP, 1
	282 Compare TEMP, 1
	283 JumpIfNotEqual {290}
	284 Move X0, [X19+48]
	285 Compare X0, 0
	286 JumpIfEqual {317}
	287 Move W1, 1
	288 Move X2, X31
	289 Call Rigidbody.set_useGravity, X0, X1
	290 Move W8, [X19+308]
	291 Compare W8, 0
	292 JumpIfEqual {295}
	293 Move X0, X19
	294 Call PlayerController.UpdateSnapTurn, X0
	295 Move X0, [X19+328]
	296 Compare X0, 0
	297 JumpIfEqual {317}
	298 Move X1, [X19+88]
	299 Move X2, X31
	300 Call HandController.UpdateIsTracking, X0, X1
	301 Move X0, [X19+336]
	302 Compare X0, 0
	303 JumpIfEqual {317}
	304 Move X1, [X19+88]
	305 Move X2, X31
	306 Call HandController.UpdateIsTracking, X0, X1
	307 Move X20, [X31+64]
	308 Move X19, [X31+72]
	309 Move X22, [X31+48]
	310 Move X21, [X31+56]
	311 Move X30, [X31+40]
	312 Move D9, [X31+24]
	313 Move D8, [X31+32]
	314 Move V10, [X31+16]
	315 Add X31, X31, 80
	316 Return 
	317 Call 0x1C17F20

Method: System.Void PlayerDie(AnimalCompany.RandomSFX killSound, System.String hitName)

Disassembly:
	0x01DC2528 MOV X0, X20
	0x01DC252C MOV V0.16B, V8.16B
	0x01DC2530 MOV V1.16B, V9.16B
	0x01DC2534 LDP X20, X19, [X31 + 0x30]
	0x01DC2538 LDP X30, X21, [X31 + 0x20]
	0x01DC253C LDP D9, D8, [X31 + 0x10]
	0x01DC2540 MOV V5.16B, V2.16B
	0x01DC2544 MOV V2.16B, V10.16B
	0x01DC2548 LDR V10, [X31], #0x40
	0x01DC254C B 0x1DC2554
	0x01DC2550 BL 0x1C16F20
	0x01DC2554 STP D13, D12, [X31 - 0x60]!
	0x01DC2558 STP D11, D10, [X31 + 0x10]
	0x01DC255C STP D9, D8, [X31 + 0x20]
	0x01DC2560 STR X30, [X31 + 0x30]
	0x01DC2564 STP X22, X21, [X31 + 0x40]
	0x01DC2568 STP X20, X19, [X31 + 0x50]
	0x01DC256C ADRP X22, 0x2616000
	0x01DC2570 ADRP X20, 0x2333000
	0x01DC2574 LDRB W8, [X22 + 0xB87]
	0x01DC2578 LDR X20, [X20 + 0x9A0]
	0x01DC257C MOV W19, W1
	0x01DC2580 MOV V8.16B, V5.16B
	0x01DC2584 MOV V9.16B, V4.16B
	0x01DC2588 MOV V10.16B, V3.16B
	0x01DC258C MOV V11.16B, V2.16B
	0x01DC2590 MOV V12.16B, V1.16B
	0x01DC2594 MOV V13.16B, V0.16B
	0x01DC2598 MOV X21, X0
	0x01DC259C TBNZ X8, 0x0, 0x1DC25C0
	0x01DC25A0 ADRP X0, 0x2333000
	0x01DC25A4 LDR X0, [X0 + 0x9A0]
	0x01DC25A8 BL 0x1C16CF4
	0x01DC25AC ADRP X0, 0x2331000
	0x01DC25B0 LDR X0, [X0 + 0x598]
	0x01DC25B4 BL 0x1C16CF4
	0x01DC25B8 MOVZ W8, 0x1
	0x01DC25BC STRB W8, [X22 + 0xB87]
	0x01DC25C0 LDR X0, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+140]
	006 Compare W8, 0
	007 JumpIfEqual {13}
	008 Move X20, [X31+16]
	009 Move X19, [X31+24]
	010 Move X30, [X31+32]
	011 Move X21, [X31+40]
	012 Return 
	013 Move X19, X0
	014 Move X0, [X0+32]
	015 Compare X0, 0
	016 JumpIfEqual {50}
	017 Move X21, X1
	018 Move X1, X31
	019 Move X20, X2
	020 Call Component.get_transform, X0
	021 Compare X0, 0
	022 JumpIfEqual {50}
	023 Move X1, X31
	024 Call Transform.get_position, X0
	025 Move S3, 1
	026 Move X0, X21
	027 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	028 Move X1, [X19+200]
	029 Compare X1, 0
	030 JumpIfEqual {34}
	031 Move X0, X19
	032 Move X2, X31
	033 Call MonoBehaviour.StopCoroutine, X0, X1
	034 Move S0, W31
	035 Move S1, W31
	036 Move S2, W31
	037 Move X0, X19
	038 Move X1, X20
	039 Call PlayerController.SetDeathCoroutine, X0, X1, X2
	040 Move X1, X0
	041 Move [X19+200], X0
	042 Move X0, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X2, X31
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Call MonoBehaviour.StartCoroutine, X0, X1
	049 Return 
	050 Call 0x1C17F20

Method: System.Void PlayerHit(System.Int32 damage, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.String hitSound, System.String killSound, AnimalCompany.PrefabGenerator/PrefabType prefabType, System.String hitName)

Disassembly:
	0x01DC27C4 TBZ X0, 0x0, 0x1DC27EC
	0x01DC27C8 CBZ X20, 0x1DC2804
	0x01DC27CC MOV X0, X20
	0x01DC27D0 LDP X20, X19, [X31 + 0x30]
	0x01DC27D4 LDP X22, X21, [X31 + 0x20]
	0x01DC27D8 LDR X30, [X31 + 0x18]
	0x01DC27DC LDP D9, D8, [X31 + 0x8]
	0x01DC27E0 MOV X1, X31
	0x01DC27E4 LDR V10, [X31], #0x40
	0x01DC27E8 B 0x1DB4EBC
	0x01DC27EC LDP X20, X19, [X31 + 0x30]
	0x01DC27F0 LDP X22, X21, [X31 + 0x20]
	0x01DC27F4 LDR X30, [X31 + 0x18]
	0x01DC27F8 LDP D9, D8, [X31 + 0x8]
	0x01DC27FC LDR V10, [X31], #0x40
	0x01DC2800 RET
	0x01DC2804 BL 0x1C16F20
	0x01DC2808 SUB X31, X31, 0xB0
	0x01DC280C STP D15, D14, [X31 + 0x50]
	0x01DC2810 STP D13, D12, [X31 + 0x60]
	0x01DC2814 STP D11, D10, [X31 + 0x70]
	0x01DC2818 STP D9, D8, [X31 + 0x80]
	0x01DC281C STP X30, X21, [X31 + 0x90]
	0x01DC2820 STP X20, X19, [X31 + 0xA0]
	0x01DC2824 ADRP X21, 0x2616000
	0x01DC2828 ADRP X20, 0x2331000
	0x01DC282C LDRB W8, [X21 + 0xBA8]
	0x01DC2830 LDR X20, [X20 + 0x598]
	0x01DC2834 MOV X19, X0
	0x01DC2838 TBNZ X8, 0x0, 0x1DC2850
	0x01DC283C ADRP X0, 0x2331000
	0x01DC2840 LDR X0, [X0 + 0x598]
	0x01DC2844 BL 0x1C16CF4
	0x01DC2848 MOVZ W8, 0x1
	0x01DC284C STRB W8, [X21 + 0xBA8]
	0x01DC2850 LDR X0, [X20]
	0x01DC2854 LDR X20, [X19 + 0x58]
	0x01DC2858 LDR W8, [X0 + 0xE0]
	0x01DC285C CBNZ W8, 0x1DC2864
	0x01DC2860 BL 0x1C16DFC
	0x01DC2864 MOV X0, X20
	0x01DC2868 MOV X1, X31
	0x01DC286C MOV X2, X31
	0x01DC2870 BL 0x3C3883C
	0x01DC2874 TBZ X0, 0x0, 0x1DC2898
	0x01DC2878 LDP X20, X19, [X31 + 0xA0]
	0x01DC287C LDP X30, X21, [X31 + 0x90]
	0x01DC2880 LDP D9, D8, [X31 + 0x80]
	0x01DC2884 LDP D11, D10, [X31 + 0x70]
	0x01DC2888 LDP D13, D12, [X31 + 0x60]
	0x01DC288C LDP D15, D14, [X31 + 0x50]
	0x01DC2890 ADD X31, X31, 0xB0
	0x01DC2894 RET
	0x01DC2898 MOV X0, X19
	0x01DC289C MOV X1, X31
	0x01DC28A0 BL 0x3C32E90
	0x01DC28A4 LDR X8, [X19 + 0x58]
	0x01DC28A8 CBZ X8, 0x1DC2B90
	0x01DC28AC MOV X20, X0
	0x01DC28B0 MOV X0, X8
	0x01DC28B4 MOV X1, X31
	0x01DC28B8 BL 0x3C3F58C
	0x01DC28BC CBZ X20, 0x1DC2B90
	0x01DC28C0 MOV X0, X20
	0x01DC28C4 MOV X1, X31
	0x01DC28C8 BL 0x3C3F62C
	0x01DC28CC LDR X0, [X19 + 0x58]
	0x01DC28D0 CBZ X0, 0x1DC2B90
	0x01DC28D4 MOV X1, X31
	0x01DC28D8 BL 0x3C3F58C
	0x01DC28DC LDR X0, [X19 + 0x58]
	0x01DC28E0 CBZ X0, 0x1DC2B90
	0x01DC28E4 LDR X20, [X19 + 0xB0]
	0x01DC28E8 MOV X1, X31
	0x01DC28EC MOV V8.16B, V0.16B
	0x01DC28F0 MOV V9.16B, V1.16B
	0x01DC28F4 MOV V10.16B, V2.16B
	0x01DC28F8 BL 0x3C3DEB4
	0x01DC28FC CBZ X20, 0x1DC2B90
	0x01DC2900 MOV V4.16B, V0.16B
	0x01DC2904 MOV V5.16B, V1.16B
	0x01DC2908 MOV V6.16B, V2.16B
	0x01DC290C MOV V7.16B, V3.16B
	0x01DC2910 MOV X0, X20
	0x01DC2914 MOV V0.16B, V8.16B

ISIL:
	001 Move [X31-128], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X25, 0x2617000
	017 Move W8, [X25+2944]
	018 Move X21, X5
	019 Move W19, W4
	020 Move X22, X3
	021 Move X23, X2
	022 Move V8, V2
	023 Move V9, V1
	024 Move V10, V0
	025 Move W24, W1
	026 Move X20, X0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {36}
	031 Move X0, 0x2337000
	032 Move X0, [X0+208]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X25+2944], W8
	036 Move X0, X20
	037 Move W1, W24
	038 Move V0, V10
	039 Move V1, V9
	040 Move V2, V8
	041 Move X2, X23
	042 Move X3, X22
	043 Move X4, X21
	044 Call PlayerController.PlayerHitInternal, X0, X1, X2, X3, X4, X5, X6
	045 Move W8, [X20+140]
	046 Compare W8, 0
	047 JumpIfEqual {98}
	048 Move X0, [X20+80]
	049 Compare X0, 0
	050 JumpIfEqual {114}
	051 Move X1, X31
	052 Call Transform.get_position, X0
	053 Move X0, [X20+80]
	054 Compare X0, 0
	055 JumpIfEqual {114}
	056 Move X20, 0x2337000
	057 Move X20, [X20+208]
	058 Move X1, X31
	059 Move V8, V0
	060 Move V9, V1
	061 Move V10, V2
	062 Call Transform.get_rotation, X0
	063 Move X0, [X20]
	064 Move V11, V0
	065 Move V12, V1
	066 Move V13, V2
	067 Move W8, [X0+224]
	068 Move V14, V3
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move W0, W19
	073 Move V0, V8
	074 Move V1, V9
	075 Move V2, V10
	076 Move V3, V11
	077 Move V4, V12
	078 Move V5, V13
	079 Move X20, [X31+112]
	080 Move X19, [X31+120]
	081 Move X22, [X31+96]
	082 Move X21, [X31+104]
	083 Move X24, [X31+80]
	084 Move X23, [X31+88]
	085 Move X30, [X31+64]
	086 Move X25, [X31+72]
	087 Move D9, [X31+48]
	088 Move D8, [X31+56]
	089 Move D11, [X31+32]
	090 Move D10, [X31+40]
	091 Move D13, [X31+16]
	092 Move D12, [X31+24]
	093 Move V6, V14
	094 Move W1, W31
	095 Move V14, [X31+128]
	096 Call PrefabGenerator.GeneratePrefab, X0, X1, X2, X3
	097 Return 
	098 Move X20, [X31+112]
	099 Move X19, [X31+120]
	100 Move X22, [X31+96]
	101 Move X21, [X31+104]
	102 Move X24, [X31+80]
	103 Move X23, [X31+88]
	104 Move X30, [X31+64]
	105 Move X25, [X31+72]
	106 Move D9, [X31+48]
	107 Move D8, [X31+56]
	108 Move D11, [X31+32]
	109 Move D10, [X31+40]
	110 Move D13, [X31+16]
	111 Move D12, [X31+24]
	112 Move V14, [X31+128]
	113 Return 
	114 Call 0x1C17F20

Method: System.Void PlayerHit(System.Int32 damage, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.String hitSound, System.String killSound, UnityEngine.Vector3 force, System.String hitName)

Disassembly:
	0x01DC3054 CBZ W8, 0x1DC31A0
	0x01DC3058 CMP W8, 0x1
	0x01DC305C B.EQ 0x1DC31A0
	0x01DC3060 CMP W8, 0x2
	0x01DC3064 B.LS 0x1DC31A0
	0x01DC3068 LDR X0, [X20 + 0x38]
	0x01DC306C CBZ X0, 0x1DC31A4
	0x01DC3070 LDP S0, S1, [X19 + 0x20]
	0x01DC3074 LDR V2, [X19 + 0x28]
	0x01DC3078 MOV W1, W31
	0x01DC307C BL 0x1DC3744

ISIL:
	001 Move V4, [X31]
	002 Add X8, X31, 4
	003 Move V3, [X31+8]
	004 Move V5, [X0+160]
	005 Move V6, [X0+168]
	006 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	007 Add S3, S3, S6
	008 Add V4, V4, V5
	009 Move [X0+160], D4
	010 Move [X0+168], S3
	011 Call PlayerController.PlayerHitInternal, X0, X1, X2, X3, X4, X5, X6
	012 Return 

Method: System.Void PlayerHit(System.Int32 damage, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.String hitSound, System.String killSound, System.String hitName)

Disassembly:
	0x01DC3080 LDR W8, [X19 + 0x18]

ISIL:
	001 Call PlayerController.PlayerHitInternal, X0, X1, X2, X3, X4, X5, X6
	002 Return 

Method: System.Void PlayerStun(UnityEngine.Vector3 position, System.Single stunRange, System.Single duration, AnimalCompany.IStunnable/AttenuationType attenType)

Disassembly:
	0x01DC3084 CMP W8, 0x3
	0x01DC3088 B.LS 0x1DC31A0
	0x01DC308C CMP W8, 0x4
	0x01DC3090 B.EQ 0x1DC31A0
	0x01DC3094 CMP W8, 0x5
	0x01DC3098 B.LS 0x1DC31A0
	0x01DC309C LDR X0, [X20 + 0x38]
	0x01DC30A0 CBZ X0, 0x1DC31A4
	0x01DC30A4 LDP S0, S1, [X19 + 0x2C]
	0x01DC30A8 LDR V2, [X19 + 0x34]
	0x01DC30AC MOVZ W1, 0x1
	0x01DC30B0 BL 0x1DC3744
	0x01DC30B4 LDR W8, [X19 + 0x18]
	0x01DC30B8 CBZ W8, 0x1DC31A0
	0x01DC30BC CMP W8, 0x1
	0x01DC30C0 B.EQ 0x1DC31A0
	0x01DC30C4 CMP W8, 0x2
	0x01DC30C8 B.LS 0x1DC31A0
	0x01DC30CC LDR X0, [X20 + 0x148]
	0x01DC30D0 CBZ X0, 0x1DC31A4
	0x01DC30D4 LDP S0, S1, [X19 + 0x20]
	0x01DC30D8 LDR V2, [X19 + 0x28]
	0x01DC30DC FMOV S3, 0.5
	0x01DC30E0 MOV X4, X31
	0x01DC30E4 FCMP S0, S3
	0x01DC30E8 CSET W1, MI
	0x01DC30EC FCMP S1, S3
	0x01DC30F0 CSET W2, MI
	0x01DC30F4 FCMP S2, S3
	0x01DC30F8 CSET W3, MI
	0x01DC30FC BL 0x1DBEF4C
	0x01DC3100 LDR W8, [X19 + 0x18]
	0x01DC3104 CMP W8, 0x3
	0x01DC3108 B.LS 0x1DC31A0
	0x01DC310C CMP W8, 0x4
	0x01DC3110 B.EQ 0x1DC31A0
	0x01DC3114 CMP W8, 0x5
	0x01DC3118 B.LS 0x1DC31A0
	0x01DC311C LDR X0, [X20 + 0x150]
	0x01DC3120 CBZ X0, 0x1DC31A4
	0x01DC3124 ADRP X20, 0x2332000
	0x01DC3128 LDR X20, [X20 + 0x7C8]
	0x01DC312C LDP S0, S1, [X19 + 0x2C]
	0x01DC3130 LDR V2, [X19 + 0x34]
	0x01DC3134 FMOV S3, 0.5
	0x01DC3138 MOV X4, X31
	0x01DC313C FCMP S0, S3
	0x01DC3140 CSET W1, MI
	0x01DC3144 FCMP S1, S3
	0x01DC3148 CSET W2, MI
	0x01DC314C FCMP S2, S3
	0x01DC3150 CSET W3, MI
	0x01DC3154 BL 0x1DBEF4C
	0x01DC3158 LDR X0, [X20]
	0x01DC315C LDR W8, [X0 + 0xE0]
	0x01DC3160 CBNZ W8, 0x1DC316C
	0x01DC3164 BL 0x1C16DFC
	0x01DC3168 LDR X0, [X20]
	0x01DC316C LDR X8, [X0 + 0xB8]
	0x01DC3170 LDR X8, [X8 + 0x48]
	0x01DC3174 CBZ X8, 0x1DC3194
	0x01DC3178 LDR X3, [X8 + 0x18]
	0x01DC317C LDR X0, [X8 + 0x40]
	0x01DC3180 LDR X2, [X8 + 0x28]
	0x01DC3184 MOV X1, X19
	0x01DC3188 LDP X20, X19, [X31 + 0x10]
	0x01DC318C LDP X30, X21, [X31], #0x20
	0x01DC3190 BR X3
	0x01DC3194 LDP X20, X19, [X31 + 0x10]
	0x01DC3198 LDP X30, X21, [X31], #0x20
	0x01DC319C RET
	0x01DC31A0 BL 0x1C16F28
	0x01DC31A4 BL 0x1C16F20
	0x01DC31A8 SUB X31, X31, 0x40
	0x01DC31AC STR X30, [X31 + 0x30]
	0x01DC31B0 LDUR V3, [X1 + 0x1C]
	0x01DC31B4 LDP V5, V4, [X1]
	0x01DC31B8 ADD X1, X31, 0x0
	0x01DC31BC MOV W2, W31
	0x01DC31C0 STUR V3, [X31 + 0x1C]
	0x01DC31C4 STP V5, V4, [X31]
	0x01DC31C8 BL 0x1DC31D8
	0x01DC31CC LDR X30, [X31 + 0x30]
	0x01DC31D0 ADD X31, X31, 0x40
	0x01DC31D4 RET
	0x01DC31D8 STR D10, [X31 - 0x40]!
	0x01DC31DC STP D9, D8, [X31 + 0x8]
	0x01DC31E0 STR X30, [X31 + 0x18]
	0x01DC31E4 STP X22, X21, [X31 + 0x20]
	0x01DC31E8 STP X20, X19, [X31 + 0x30]
	0x01DC31EC MOV X20, X1
	0x01DC31F0 MOV X21, X0
	0x01DC31F4 MOV X0, X1
	0x01DC31F8 MOV X1, X31
	0x01DC31FC MOV W19, W2
	0x01DC3200 MOV V8.16B, V2.16B
	0x01DC3204 MOV V9.16B, V1.16B
	0x01DC3208 MOV V10.16B, V0.16B
	0x01DC320C BL 0x3C8E5C0
	0x01DC3210 MOV X22, X0
	0x01DC3214 MOV X0, X20
	0x01DC3218 MOV X1, X31
	0x01DC321C BL 0x3C8E66C
	0x01DC3220 MOV X0, X21
	0x01DC3224 MOV X1, X22
	0x01DC3228 MOV V4.16B, V9.16B
	0x01DC322C MOV V5.16B, V8.16B
	0x01DC3230 MOV W2, W19
	0x01DC3234 LDP X20, X19, [X31 + 0x30]
	0x01DC3238 LDP X22, X21, [X31 + 0x20]
	0x01DC323C LDR X30, [X31 + 0x18]
	0x01DC3240 LDP D9, D8, [X31 + 0x8]
	0x01DC3244 MOV V3.16B, V10.16B
	0x01DC3248 LDR V10, [X31], #0x40
	0x01DC324C B 0x1DC3280
	0x01DC3250 SUB X31, X31, 0x40
	0x01DC3254 STR X30, [X31 + 0x30]
	0x01DC3258 LDUR V3, [X1 + 0x1C]
	0x01DC325C LDP V5, V4, [X1]
	0x01DC3260 ADD X1, X31, 0x0
	0x01DC3264 MOVZ W2, 0x1
	0x01DC3268 STUR V3, [X31 + 0x1C]
	0x01DC326C STP V5, V4, [X31]
	0x01DC3270 BL 0x1DC31D8
	0x01DC3274 LDR X30, [X31 + 0x30]
	0x01DC3278 ADD X31, X31, 0x40
	0x01DC327C RET
	0x01DC3280 SUB X31, X31, 0x90

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X21, 0x2616000
	017 Move W8, [X21+2945]
	018 Move W20, W1
	019 Move V8, V4
	020 Move V9, V3
	021 Move V10, V2
	022 Move V11, V1
	023 Move V12, V0
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {40}
	029 Move X0, 0x2331000
	030 Move X0, [X0+1496]
	031 Call 0x1C17CF4
	032 Move X0, 0x2331000
	033 Move X0, [X0+1528]
	034 Call 0x1C17CF4
	035 Move X0, 0x2336000
	036 Move X0, [X0+216]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X21+2945], W8
	040 Move X0, [X19+88]
	041 Compare X0, 0
	042 JumpIfEqual {160}
	043 Move X23, 0x2331000
	044 Move X22, 0x2331000
	045 Move X23, [X23+1496]
	046 Move X22, [X22+1528]
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X0, [X23]
	050 Move X21, [X19+248]
	051 Move V13, V0
	052 Move V14, V1
	053 Move W8, [X0+224]
	054 Move V15, V2
	055 Compare W8, 0
	056 JumpIfNotEqual {59}
	057 Call 0x1C17DFC
	058 Move X0, [X23]
	059 Move X8, [X0+184]
	060 Move X1, X31
	061 Move W0, [X8+36]
	062 Call LayerMask.op_Implicit, X0
	063 Move X8, [X22]
	064 Move W22, W0
	065 Move W9, [X8+224]
	066 Compare W9, 0
	067 JumpIfNotEqual {70}
	068 Move X0, X8
	069 Call 0x1C17DFC
	070 Move X8, -19759104
	071 Move V3, [X8+188]
	072 Move V0, V13
	073 Move V1, V14
	074 Move V2, V15
	075 Move X0, X21
	076 Move W1, W22
	077 Move X2, X31
	078 Call Physics.OverlapSphereNonAlloc, X0, V0, X1, X2
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move W8, [X19+140]
	081 Compare W8, 0
	082 JumpIfNotEqual {144}
	083 Move X0, [X19+88]
	084 Compare X0, 0
	085 JumpIfEqual {160}
	086 Move X1, X31
	087 Call Transform.get_position, X0
	088 Move X0, [X19+88]
	089 Compare X0, 0
	090 JumpIfEqual {160}
	091 Move X1, X31
	092 Move V13, V0
	093 Move V14, V1
	094 Move V15, V2
	095 Call Transform.get_forward, X0
	096 Move [X31+4], S1
	097 Move [X31+12], S2
	098 Move [X31], S0
	099 Move W0, W20
	100 Move V0, V12
	101 Move V1, V11
	102 Move V2, V10
	103 Move V3, V9
	104 Move V4, V13
	105 Move V5, V14
	106 Move V6, V15
	107 Move X1, X31
	108 Call IStunnable.GetAttenuation, X0, X1, V0, X2, X3
	109 Multiply S8, S0, S8
	110 NotImplemented "Instruction FCMP not yet implemented."
	111 Move X8, 0x2336000
	112 Move X8, [X8+216]
	113 Move X0, [X8]
	114 Move W8, [X0+224]
	115 Compare W8, 0
	116 JumpIfNotEqual {118}
	117 Call 0x1C17DFC
	118 Move V0, V8
	119 Move X0, X31
	120 Call ScreenEffectManager.PlayerStun, V0
	121 Move V0, V8
	122 Call AudioMixerManager.PlayerStun, V0
	123 Move X0, [X19+224]
	124 Compare X0, 0
	125 JumpIfEqual {160}
	126 Move X20, [X31+112]
	127 Move X19, [X31+120]
	128 Move X22, [X31+96]
	129 Move X21, [X31+104]
	130 Move X30, [X31+80]
	131 Move X23, [X31+88]
	132 Move D9, [X31+64]
	133 Move D8, [X31+72]
	134 Move D11, [X31+48]
	135 Move D10, [X31+56]
	136 Move D13, [X31+32]
	137 Move D12, [X31+40]
	138 Move D15, [X31+16]
	139 Move D14, [X31+24]
	140 Move X1, X31
	141 Add X31, X31, 128
	142 Call AudioSource.Play, X0
	143 Return 
	144 Move X20, [X31+112]
	145 Move X19, [X31+120]
	146 Move X22, [X31+96]
	147 Move X21, [X31+104]
	148 Move X30, [X31+80]
	149 Move X23, [X31+88]
	150 Move D9, [X31+64]
	151 Move D8, [X31+72]
	152 Move D11, [X31+48]
	153 Move D10, [X31+56]
	154 Move D13, [X31+32]
	155 Move D12, [X31+40]
	156 Move D15, [X31+16]
	157 Move D14, [X31+24]
	158 Add X31, X31, 128
	159 Return 
	160 Call 0x1C17F20

Method: System.Void SetCurrentHealth(System.Int32 health)

Disassembly:
	0x01DC1744 STP X20, X19, [X31 + 0x30]
	0x01DC1748 ADRP X21, 0x2617000
	0x01DC174C ADRP X22, 0x2337000
	0x01DC1750 LDRB W8, [X21 + 0xB85]
	0x01DC1754 LDR X22, [X22 + 0xC8]
	0x01DC1758 MOV V8.16B, V2.16B
	0x01DC175C MOV V9.16B, V1.16B
	0x01DC1760 MOV V10.16B, V0.16B
	0x01DC1764 MOV X19, X1
	0x01DC1768 MOV X20, X0
	0x01DC176C TBNZ X8, 0x0, 0x1DC1784
	0x01DC1770 ADRP X0, 0x2337000
	0x01DC1774 LDR X0, [X0 + 0xC8]
	0x01DC1778 BL 0x1C16CF4
	0x01DC177C MOVZ W8, 0x1
	0x01DC1780 STRB W8, [X21 + 0xB85]
	0x01DC1784 LDR X0, [X22]
	0x01DC1788 BL 0x1C16F10
	0x01DC178C MOV X1, X31
	0x01DC1790 MOV X21, X0
	0x01DC1794 BL 0x33BDD8C
	0x01DC1798 STR W31, [X21 + 0x10]
	0x01DC179C STP X20, X19, [X21 + 0x20]
	0x01DC17A0 STP S10, S9, [X21 + 0x30]
	0x01DC17A4 STR S8, [X21 + 0x38]
	0x01DC17A8 MOV X0, X21
	0x01DC17AC LDP X20, X19, [X31 + 0x30]
	0x01DC17B0 LDP X22, X21, [X31 + 0x20]
	0x01DC17B4 LDR X30, [X31 + 0x18]
	0x01DC17B8 LDP D9, D8, [X31 + 0x8]
	0x01DC17BC LDR V10, [X31], #0x40
	0x01DC17C0 RET
	0x01DC17C4 STR D14, [X31 - 0x80]!
	0x01DC17C8 STP D13, D12, [X31 + 0x10]
	0x01DC17CC STP D11, D10, [X31 + 0x20]
	0x01DC17D0 STP D9, D8, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2618000
	007 Move X21, 0x2335000
	008 Move W8, [X22+2946]
	009 Move X21, [X21+1992]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2335000
	017 Move X0, [X0+1992]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2946], W8
	021 Move [X19+136], W20
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X8, [X8+40]
	030 Compare X8, 0
	031 JumpIfEqual {42}
	032 Move W1, [X19+136]
	033 Move X3, [X8+24]
	034 Move X0, [X8+64]
	035 Move X2, [X8+40]
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 CallNoReturn X3
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Return 

Method: System.Void PlayerHitInternal(System.Int32 damage, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.String hitSound, System.String killSound, System.String hitName)

Disassembly:
	0x01DC2918 MOV V1.16B, V9.16B
	0x01DC291C MOV V2.16B, V10.16B
	0x01DC2920 MOV V3.16B, V4.16B
	0x01DC2924 MOV V4.16B, V5.16B
	0x01DC2928 MOV V5.16B, V6.16B
	0x01DC292C MOV V6.16B, V7.16B
	0x01DC2930 MOV X1, X31
	0x01DC2934 BL 0x3C40000
	0x01DC2938 LDR X0, [X19 + 0x60]
	0x01DC293C CBZ X0, 0x1DC2B90
	0x01DC2940 MOV X1, X31
	0x01DC2944 BL 0x3C3F58C
	0x01DC2948 LDR X0, [X19 + 0x68]
	0x01DC294C CBZ X0, 0x1DC2B90
	0x01DC2950 MOV X1, X31
	0x01DC2954 MOV V9.16B, V0.16B
	0x01DC2958 MOV V10.16B, V1.16B
	0x01DC295C MOV V8.16B, V2.16B
	0x01DC2960 BL 0x3C3F58C
	0x01DC2964 LDR X0, [X19 + 0x70]
	0x01DC2968 CBZ X0, 0x1DC2B90
	0x01DC296C MOV X1, X31
	0x01DC2970 STP S10, S9, [X31 + 0x44]
	0x01DC2974 STR S8, [X31 + 0x4C]
	0x01DC2978 STP S1, S0, [X31 + 0x38]
	0x01DC297C STR S2, [X31 + 0x40]
	0x01DC2980 BL 0x3C3DEB4
	0x01DC2984 LDR X0, [X19 + 0x78]
	0x01DC2988 CBZ X0, 0x1DC2B90
	0x01DC298C LDP S8, S15, [X19 + 0x20]
	0x01DC2990 LDP S14, S9, [X19 + 0x28]
	0x01DC2994 MOV X1, X31
	0x01DC2998 MOV V12.16B, V0.16B
	0x01DC299C MOV V11.16B, V1.16B
	0x01DC29A0 MOV V10.16B, V2.16B
	0x01DC29A4 MOV V13.16B, V3.16B
	0x01DC29A8 BL 0x3C3DEB4
	0x01DC29AC LDR X0, [X19 + 0x70]
	0x01DC29B0 STP S0, S1, [X31 + 0x2C]
	0x01DC29B4 STR S2, [X31 + 0x34]
	0x01DC29B8 STR S3, [X31 + 0x28]
	0x01DC29BC CBZ X0, 0x1DC2B90
	0x01DC29C0 LDR V1, [X19 + 0x30]
	0x01DC29C4 LDR V0, [X19 + 0x34]
	0x01DC29C8 MOV X1, X31
	0x01DC29CC STP S1, S0, [X31 + 0x10]
	0x01DC29D0 LDR V0, [X19 + 0x38]
	0x01DC29D4 STR S0, [X31 + 0x18]
	0x01DC29D8 LDR V0, [X19 + 0x3C]
	0x01DC29DC STR S0, [X31 + 0xC]
	0x01DC29E0 BL 0x3C3DEB4
	0x01DC29E4 LDP S4, S5, [X19 + 0x40]
	0x01DC29E8 LDR V6, [X19 + 0x48]
	0x01DC29EC MOV X0, X31
	0x01DC29F0 BL 0x3C2A9FC
	0x01DC29F4 LDR X0, [X19 + 0x78]
	0x01DC29F8 STP S1, S0, [X31 + 0x1C]
	0x01DC29FC STR S2, [X31 + 0x24]
	0x01DC2A00 CBZ X0, 0x1DC2B90
	0x01DC2A04 MOV X1, X31
	0x01DC2A08 BL 0x3C3DEB4
	0x01DC2A0C LDP S4, S5, [X19 + 0x4C]
	0x01DC2A10 LDR V6, [X19 + 0x54]
	0x01DC2A14 MOV X0, X31
	0x01DC2A18 BL 0x3C2A9FC
	0x01DC2A1C LDR X0, [X19 + 0xB8]
	0x01DC2A20 STP S1, S0, [X31]
	0x01DC2A24 STR S2, [X31 + 0x8]
	0x01DC2A28 CBZ X0, 0x1DC2B90
	0x01DC2A2C LDR V0, [X31 + 0x48]
	0x01DC2A30 LDP S26, S1, [X31 + 0x1C]
	0x01DC2A34 FMUL S2, S13, S8
	0x01DC2A38 FMUL S3, S12, S9
	0x01DC2A3C FMUL S6, S13, S15
	0x01DC2A40 FMUL S7, S11, S9
	0x01DC2A44 FMUL S19, S12, S8
	0x01DC2A48 FMUL S22, S13, S14
	0x01DC2A4C FMUL S23, S13, S9
	0x01DC2A50 FMUL S24, S10, S9
	0x01DC2A54 FMUL S4, S11, S14
	0x01DC2A58 FMUL S18, S12, S15
	0x01DC2A5C FMUL S21, S11, S15
	0x01DC2A60 FADD S2, S2, S3
	0x01DC2A64 FADD S3, S6, S7
	0x01DC2A68 FADD S6, S22, S24
	0x01DC2A6C FSUB S7, S23, S19
	0x01DC2A70 FMUL S5, S10, S15
	0x01DC2A74 FMUL S16, S10, S8
	0x01DC2A78 FMUL S20, S11, S8
	0x01DC2A7C FMUL S25, S10, S14
	0x01DC2A80 FADD S2, S4, S2
	0x01DC2A84 FADD S6, S18, S6
	0x01DC2A88 FSUB S7, S7, S21
	0x01DC2A8C FADD S0, S0, S1
	0x01DC2A90 LDR V1, [X31 + 0x44]
	0x01DC2A94 FADD S4, S16, S3
	0x01DC2A98 FSUB S3, S2, S5
	0x01DC2A9C FSUB S5, S6, S20
	0x01DC2AA0 FSUB S6, S7, S25
	0x01DC2AA4 LDR V2, [X31 + 0x4C]
	0x01DC2AA8 LDR V7, [X31 + 0x24]
	0x01DC2AAC FMUL S17, S12, S14
	0x01DC2AB0 FADD S1, S1, S26
	0x01DC2AB4 FSUB S4, S4, S17
	0x01DC2AB8 FADD S2, S2, S7
	0x01DC2ABC MOV X1, X31
	0x01DC2AC0 BL 0x3C40000
	0x01DC2AC4 LDR X0, [X19 + 0xC0]
	0x01DC2AC8 CBZ X0, 0x1DC2B90
	0x01DC2ACC LDP S23, S19, [X31 + 0x28]
	0x01DC2AD0 LDP S24, S20, [X31 + 0xC]
	0x01DC2AD4 LDP S1, S0, [X31 + 0x30]
	0x01DC2AD8 LDP S21, S25, [X31 + 0x14]
	0x01DC2ADC LDP X20, X19, [X31 + 0xA0]
	0x01DC2AE0 FMUL S2, S23, S20
	0x01DC2AE4 FMUL S3, S19, S24
	0x01DC2AE8 FMUL S4, S1, S25
	0x01DC2AEC FMUL S5, S0, S21
	0x01DC2AF0 FMUL S6, S23, S21
	0x01DC2AF4 FMUL S7, S1, S24
	0x01DC2AF8 FMUL S16, S0, S20
	0x01DC2AFC FMUL S17, S19, S25
	0x01DC2B00 FMUL S18, S19, S21
	0x01DC2B04 FMUL S19, S19, S20
	0x01DC2B08 FMUL S20, S1, S20
	0x01DC2B0C FMUL S21, S1, S21
	0x01DC2B10 FMUL S22, S23, S25
	0x01DC2B14 FMUL S23, S23, S24
	0x01DC2B18 FMUL S24, S0, S24
	0x01DC2B1C FMUL S25, S0, S25
	0x01DC2B20 LDR V0, [X31 + 0x3C]
	0x01DC2B24 LDP S26, S1, [X31]
	0x01DC2B28 FADD S2, S2, S3
	0x01DC2B2C FADD S3, S6, S7
	0x01DC2B30 FADD S6, S22, S24
	0x01DC2B34 FSUB S7, S23, S19
	0x01DC2B38 FADD S2, S4, S2
	0x01DC2B3C FADD S6, S18, S6
	0x01DC2B40 FSUB S7, S7, S21
	0x01DC2B44 FADD S0, S0, S1
	0x01DC2B48 LDR V1, [X31 + 0x38]
	0x01DC2B4C FADD S4, S16, S3
	0x01DC2B50 FSUB S3, S2, S5
	0x01DC2B54 FSUB S5, S6, S20
	0x01DC2B58 FSUB S6, S7, S25
	0x01DC2B5C LDR V2, [X31 + 0x40]
	0x01DC2B60 LDR V7, [X31 + 0x8]
	0x01DC2B64 LDP X30, X21, [X31 + 0x90]
	0x01DC2B68 LDP D9, D8, [X31 + 0x80]
	0x01DC2B6C LDP D11, D10, [X31 + 0x70]
	0x01DC2B70 LDP D13, D12, [X31 + 0x60]
	0x01DC2B74 LDP D15, D14, [X31 + 0x50]
	0x01DC2B78 FADD S1, S1, S26
	0x01DC2B7C FSUB S4, S4, S17
	0x01DC2B80 FADD S2, S2, S7
	0x01DC2B84 MOV X1, X31
	0x01DC2B88 ADD X31, X31, 0xB0
	0x01DC2B8C B 0x3C40000
	0x01DC2B90 BL 0x1C16F20
	0x01DC2B94 STP D11, D10, [X31 - 0x50]!
	0x01DC2B98 STP D9, D8, [X31 + 0x10]
	0x01DC2B9C STR X30, [X31 + 0x20]
	0x01DC2BA0 STP X22, X21, [X31 + 0x30]
	0x01DC2BA4 STP X20, X19, [X31 + 0x40]
	0x01DC2BA8 MOV X19, X0
	0x01DC2BAC LDR X0, [X0 + 0x20]
	0x01DC2BB0 CBZ X0, 0x1DC2C50
	0x01DC2BB4 ORN W8, W31, W1, 0x0
	0x01DC2BB8 MOV X21, X2
	0x01DC2BBC MOV W22, W1
	0x01DC2BC0 AND W1, W8, 0x1
	0x01DC2BC4 MOV X2, X31
	0x01DC2BC8 MOV V8.16B, V2.16B
	0x01DC2BCC MOV V9.16B, V1.16B
	0x01DC2BD0 MOV V10.16B, V0.16B
	0x01DC2BD4 MOV W20, W3
	0x01DC2BD8 BL 0x1E1CE20
	0x01DC2BDC ANDS W31, W22, 0x1
	0x01DC2BE0 CSEL X8, X21, X31, NE
	0x01DC2BE4 STR X8, [X19 + 0xB0]
	0x01DC2BE8 TBNZ X20, 0x0, 0x1DC2C30
	0x01DC2BEC LDR X0, [X19 + 0x20]
	0x01DC2BF0 CBZ X0, 0x1DC2C50
	0x01DC2BF4 MOV X1, X31
	0x01DC2BF8 BL 0x3C32E90
	0x01DC2BFC CBZ X0, 0x1DC2C50
	0x01DC2C00 MOV X1, X31
	0x01DC2C04 BL 0x3C3F58C
	0x01DC2C08 LDR X0, [X19 + 0xB0]
	0x01DC2C0C CBZ X0, 0x1DC2C50
	0x01DC2C10 MOV X1, X31
	0x01DC2C14 MOV V8.16B, V0.16B
	0x01DC2C18 MOV V9.16B, V1.16B
	0x01DC2C1C MOV V11.16B, V2.16B
	0x01DC2C20 BL 0x3C3F58C
	0x01DC2C24 FSUB S10, S8, S0
	0x01DC2C28 FSUB S9, S9, S1
	0x01DC2C2C FSUB S8, S11, S2
	0x01DC2C30 STP S10, S9, [X19 + 0xB8]
	0x01DC2C34 STR S8, [X19 + 0xC0]
	0x01DC2C38 LDP X20, X19, [X31 + 0x40]
	0x01DC2C3C LDP X22, X21, [X31 + 0x30]
	0x01DC2C40 LDR X30, [X31 + 0x20]
	0x01DC2C44 LDP D9, D8, [X31 + 0x10]
	0x01DC2C48 LDP D11, D10, [X31], #0x50
	0x01DC2C4C RET
	0x01DC2C50 BL 0x1C16F20
	0x01DC2C54 STR D8, [X31 - 0x30]!

ISIL:
	001 Move [X31-128], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X26
	010 Move [X31+72], X25
	011 Move [X31+80], X24
	012 Move [X31+88], X23
	013 Move [X31+96], X22
	014 Move [X31+104], X21
	015 Move [X31+112], X20
	016 Move [X31+120], X19
	017 Move X24, 0x2617000
	018 Move W8, [X24+2947]
	019 Move X21, X4
	020 Move X20, X3
	021 Move X22, X2
	022 Move V8, V2
	023 Move V9, V1
	024 Move V10, V0
	025 Move W23, W1
	026 Move X19, X0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {45}
	031 Move X0, 0x2332000
	032 Move X0, [X0+1496]
	033 Call 0x1C17CF4
	034 Move X0, 0x2332000
	035 Move X0, [X0+1528]
	036 Call 0x1C17CF4
	037 Move X0, 0x2337000
	038 Move X0, [X0+208]
	039 Call 0x1C17CF4
	040 Move X0, 0x2337000
	041 Move X0, [X0+216]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X24+2947], W8
	045 Move X0, [X19+88]
	046 Compare X0, 0
	047 JumpIfEqual {245}
	048 Move X26, 0x2332000
	049 Move X25, 0x2332000
	050 Move X26, [X26+1496]
	051 Move X25, [X25+1528]
	052 Move X1, X31
	053 Call Transform.get_position, X0
	054 Move X0, [X26]
	055 Move X24, [X19+248]
	056 Move V11, V0
	057 Move V12, V1
	058 Move W8, [X0+224]
	059 Move V13, V2
	060 Compare W8, 0
	061 JumpIfNotEqual {64}
	062 Call 0x1C17DFC
	063 Move X0, [X26]
	064 Move X8, [X0+184]
	065 Move X1, X31
	066 Move W0, [X8+36]
	067 Call LayerMask.op_Implicit, X0
	068 Move X8, [X25]
	069 Move W25, W0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {75}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X8, -19755008
	076 Move V14, [X8+188]
	077 Move V0, V11
	078 Move V1, V12
	079 Move V2, V13
	080 Move V3, V14
	081 Move X0, X24
	082 Move W1, W25
	083 Move X2, X31
	084 Call Physics.OverlapSphereNonAlloc, X0, V0, X1, X2
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move W8, [X19+140]
	087 Compare W8, 0
	088 JumpIfEqual {106}
	089 Move X20, [X31+112]
	090 Move X19, [X31+120]
	091 Move X22, [X31+96]
	092 Move X21, [X31+104]
	093 Move X24, [X31+80]
	094 Move X23, [X31+88]
	095 Move X26, [X31+64]
	096 Move X25, [X31+72]
	097 Move X30, [X31+56]
	098 Move D9, [X31+40]
	099 Move D8, [X31+48]
	100 Move D11, [X31+24]
	101 Move D10, [X31+32]
	102 Move D13, [X31+8]
	103 Move D12, [X31+16]
	104 Move V14, [X31+128]
	105 Return 
	106 Move S0, 0.5
	107 Move W0, W31
	108 Move V1, V14
	109 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	110 Move S0, 0.5
	111 Move W0, 1
	112 Move V1, V14
	113 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	114 Move W8, [X19+136]
	115 Move X0, X19
	116 Subtract W1, W8, W23
	117 Call PlayerController.SetCurrentHealth, X0, X1
	118 Move X0, [X19+56]
	119 Compare X0, 0
	120 JumpIfEqual {245}
	121 Call PlayerView.PlayerHit, X0
	122 Move X8, 0x2337000
	123 Move X8, [X8+216]
	124 Move X0, [X8]
	125 Move W8, [X0+224]
	126 Compare W8, 0
	127 JumpIfNotEqual {129}
	128 Call 0x1C17DFC
	129 Move X0, X31
	130 Call ScreenEffectManager.PlayerHit
	131 Move W8, [X19+136]
	132 NotImplemented "Instruction CMP not yet implemented."
	133 NotImplemented "Instruction CSET not yet implemented."
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move [X19+140], W9
	136 Move X0, X22
	137 Move X1, X31
	138 Call String.IsNullOrEmpty, X0
	139 Move TEMP, X0
	140 And TEMP, TEMP, 1
	141 Compare TEMP, 1
	142 JumpIfEqual {149}
	143 Move S3, 1
	144 Move X0, X22
	145 Move V0, V10
	146 Move V1, V9
	147 Move V2, V8
	148 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	149 Move X8, [X19+152]
	150 Compare X8, 0
	151 JumpIfNotEqual {189}
	152 Move X0, X19
	153 Call PlayerController.RegenerationCoroutine, X0
	154 Move X1, X0
	155 Move [X19+152], X0
	156 Move X0, X19
	157 Move X2, X31
	158 Call MonoBehaviour.StartCoroutine, X0, X1
	159 Move X1, [X19+200]
	160 Compare X1, 0
	161 JumpIfEqual {165}
	162 Move X0, X19
	163 Move X2, X31
	164 Call MonoBehaviour.StopCoroutine, X0, X1
	165 Move S0, [X19+160]
	166 Move S1, [X19+164]
	167 Move V2, [X19+168]
	168 Move X0, X19
	169 Move X1, X21
	170 Call PlayerController.SetDeathCoroutine, X0, X1, X2
	171 Move X1, X0
	172 Move [X19+200], X0
	173 Move X0, X19
	174 Move X2, X31
	175 Call MonoBehaviour.StartCoroutine, X0, X1
	176 Move X0, X20
	177 Move X1, X31
	178 Call String.IsNullOrEmpty, X0
	179 Move TEMP, X0
	180 And TEMP, TEMP, 1
	181 Compare TEMP, 1
	182 JumpIfEqual {189}
	183 Move S3, 1
	184 Move X0, X20
	185 Move V0, V10
	186 Move V1, V9
	187 Move V2, V8
	188 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	189 Move X0, [X19+80]
	190 Compare X0, 0
	191 JumpIfEqual {245}
	192 Move X1, X31
	193 Call Transform.get_position, X0
	194 Move W8, 0x43B40000
	195 Move V8, V0
	196 Move V9, V1
	197 Move S0, W31
	198 Move S1, W8
	199 Move X0, X31
	200 Move V10, V2
	201 Call Random.Range, V0, V1
	202 Move X8, -19755008
	203 Move V1, [X8+260]
	204 Move S2, W31
	205 Move X0, X31
	206 Multiply S1, S0, S1
	207 Move S0, W31
	208 Call Quaternion.Internal_FromEulerRad, X0
	209 Move X8, 0x2337000
	210 Move X8, [X8+208]
	211 Move V11, V0
	212 Move V12, V1
	213 Move V13, V2
	214 Move X0, [X8]
	215 Move V14, V3
	216 Move W8, [X0+224]
	217 Compare W8, 0
	218 JumpIfNotEqual {220}
	219 Call 0x1C17DFC
	220 Move V0, V8
	221 Move V1, V9
	222 Move V2, V10
	223 Move V3, V11
	224 Move V4, V12
	225 Move V5, V13
	226 Move X20, [X31+112]
	227 Move X19, [X31+120]
	228 Move X22, [X31+96]
	229 Move X21, [X31+104]
	230 Move X24, [X31+80]
	231 Move X23, [X31+88]
	232 Move X26, [X31+64]
	233 Move X25, [X31+72]
	234 Move X30, [X31+56]
	235 Move D9, [X31+40]
	236 Move D8, [X31+48]
	237 Move D11, [X31+24]
	238 Move D10, [X31+32]
	239 Move D13, [X31+8]
	240 Move D12, [X31+16]
	241 Move W0, 1
	242 Move W1, 1
	243 Move V6, V14
	244 Move V14, [X31+128]
	245 Call 0x1C17F20

Method: System.Collections.IEnumerator RegenerationCoroutine()

Disassembly:
	0x01DC3428 LDR X2, [X8]
	0x01DC342C BL 0x21A4990
	0x01DC3430 TBZ X0, 0x0, 0x1DC35AC
	0x01DC3434 LDR X8, [X31 + 0x58]
	0x01DC3438 CBZ X8, 0x1DC3610
	0x01DC343C LDR X0, [X24]
	0x01DC3440 LDR X22, [X8 + 0x20]
	0x01DC3444 LDR W9, [X0 + 0xE0]
	0x01DC3448 CBNZ W9, 0x1DC3450
	0x01DC344C BL 0x1C16DFC
	0x01DC3450 MOV X0, X22
	0x01DC3454 MOV X1, X31
	0x01DC3458 MOV X2, X31
	0x01DC345C BL 0x3C354F8
	0x01DC3460 TBZ X0, 0x0, 0x1DC35AC
	0x01DC3464 LDR X8, [X31 + 0x58]
	0x01DC3468 CBZ X8, 0x1DC3610
	0x01DC346C LDR X8, [X8 + 0x20]
	0x01DC3470 CBZ X8, 0x1DC3610
	0x01DC3474 LDR X0, [X24]
	0x01DC3478 LDR X22, [X8 + 0x20]
	0x01DC347C LDR W9, [X0 + 0xE0]
	0x01DC3480 CBNZ W9, 0x1DC3488
	0x01DC3484 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2616000
	006 Move X21, 0x2336000
	007 Move W8, [X20+2948]
	008 Move X21, [X21+232]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2336000
	015 Move X0, [X0+232]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2948], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move [X20+16], W31
	025 Move [X20+32], X19
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Collections.IEnumerator SetDeathCoroutine(System.String hitName, UnityEngine.Vector3 force = null)

Disassembly:
	0x01DC2734 MOV X0, X31
	0x01DC2738 BL 0x1DB1DCC
	0x01DC273C MOV X20, X0
	0x01DC2740 TBZ X19, 0x0, 0x1DC2778
	0x01DC2744 LDR X0, [X22]
	0x01DC2748 LDR W8, [X0 + 0xE0]
	0x01DC274C CBNZ W8, 0x1DC2754
	0x01DC2750 BL 0x1C16DFC
	0x01DC2754 MOV X0, X20
	0x01DC2758 MOV X1, X31
	0x01DC275C MOV X2, X31
	0x01DC2760 BL 0x3C354F8
	0x01DC2764 TBZ X0, 0x0, 0x1DC2778
	0x01DC2768 CBZ X20, 0x1DC2804
	0x01DC276C MOV X0, X20
	0x01DC2770 MOV X1, X31
	0x01DC2774 BL 0x1DB4D50
	0x01DC2778 LDR X0, [X21 + 0x20]
	0x01DC277C CBZ X0, 0x1DC2804
	0x01DC2780 MOV V0.16B, V10.16B
	0x01DC2784 MOV V1.16B, V9.16B
	0x01DC2788 MOV V2.16B, V8.16B
	0x01DC278C MOV X1, X31
	0x01DC2790 BL 0x1E1D5B0
	0x01DC2794 LDR X0, [X21 + 0x38]
	0x01DC2798 CBZ X0, 0x1DC2804
	0x01DC279C BL 0x1DC2808
	0x01DC27A0 TBNZ X19, 0x0, 0x1DC27EC
	0x01DC27A4 LDR X0, [X22]
	0x01DC27A8 LDR W8, [X0 + 0xE0]
	0x01DC27AC CBNZ W8, 0x1DC27B4
	0x01DC27B0 BL 0x1C16DFC
	0x01DC27B4 MOV X0, X20
	0x01DC27B8 MOV X1, X31
	0x01DC27BC MOV X2, X31
	0x01DC27C0 BL 0x3C354F8

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x2617000
	010 Move X22, 0x2337000
	011 Move W8, [X21+2949]
	012 Move X22, [X22+200]
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x2337000
	023 Move X0, [X0+200]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+2949], W8
	027 Move X0, [X22]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X21, X0
	031 Call Object..ctor, X0
	032 Move [X21+16], W31
	033 Move [X21+32], X20
	034 Move [X21+40], X19
	035 Move [X21+48], S10
	036 Move [X21+56], S9
	037 Move [X21+56], S8
	038 Move X0, X21
	039 Move X20, [X31+48]
	040 Move X19, [X31+56]
	041 Move X22, [X31+32]
	042 Move X21, [X31+40]
	043 Move X30, [X31+24]
	044 Move D9, [X31+8]
	045 Move D8, [X31+16]
	046 Move V10, [X31+64]
	047 Return X0

Method: System.Void Respawn(UnityEngine.Transform targetTransform, System.Boolean dropItems = False)

Disassembly:
	0x01DC34D8 ADRP X0, 0x2331000
	0x01DC34DC LDR X0, [X0 + 0x5A8]
	0x01DC34E0 BL 0x1C16CF4
	0x01DC34E4 LDR X8, [X31 + 0x58]
	0x01DC34E8 MOVZ W9, 0x1
	0x01DC34EC STRB W9, [X24 + 0x793]
	0x01DC34F0 CBZ X8, 0x1DC3610
	0x01DC34F4 LDR X0, [X8 + 0x20]
	0x01DC34F8 CBZ X0, 0x1DC3610
	0x01DC34FC MOV X1, X31
	0x01DC3500 BL 0x3C389D4
	0x01DC3504 ADRP X8, 0x2335000
	0x01DC3508 LDR X8, [X8 + 0x128]
	0x01DC350C MOV X1, X0
	0x01DC3510 MOV X2, X31
	0x01DC3514 LDR X8, [X8]
	0x01DC3518 MOV X0, X8
	0x01DC351C BL 0x321B938
	0x01DC3520 LDR V2, [X31 + 0xC]
	0x01DC3524 MOV X4, X0
	0x01DC3528 MOV X0, X20
	0x01DC352C MOV W1, W22
	0x01DC3530 MOV V0.16B, V10.16B
	0x01DC3534 MOV V1.16B, V9.16B
	0x01DC3538 MOV X2, X31
	0x01DC353C MOV X3, X31
	0x01DC3540 BL 0x1DC1918
	0x01DC3544 LDR X8, [X31 + 0x58]
	0x01DC3548 CBZ X8, 0x1DC3610
	0x01DC354C LDR X8, [X8 + 0x20]
	0x01DC3550 CBZ X8, 0x1DC3610

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Compare X1, 0
	009 JumpIfEqual {37}
	010 Move X21, X1
	011 Move X20, X0
	012 Move X0, X1
	013 Move X1, X31
	014 Move W19, W2
	015 Call Transform.get_position, X0
	016 Move X0, X21
	017 Move X1, X31
	018 Move V8, V0
	019 Move V9, V1
	020 Move V10, V2
	021 Call Transform.get_forward, X0
	022 Move V3, V0
	023 Move V4, V1
	024 And W1, W19, 1
	025 Move X0, X20
	026 Move V0, V8
	027 Move V1, V9
	028 Move X20, [X31+48]
	029 Move X19, [X31+56]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Move D9, [X31+16]
	033 Move D8, [X31+24]
	034 Move V5, V2
	035 Move V2, V10
	036 Move V10, [X31+64]
	037 Call 0x1C17F20

Method: System.Void Respawn(UnityEngine.Vector3 targetPosition, System.Boolean dropItems = False)

Disassembly:
	0x01DC36C0 BL 0x1C16F20
	0x01DC36C4 BL 0x1C16F28
	0x01DC36C8 STR X30, [X31 - 0x10]!
	0x01DC36CC TBZ X3, 0x0, 0x1DC36EC
	0x01DC36D0 CBZ X1, 0x1DC373C
	0x01DC36D4 LDR W8, [X1 + 0x18]
	0x01DC36D8 CMP W8, W2
	0x01DC36DC B.LS 0x1DC3740
	0x01DC36E0 ADD X8, X1, W2, 0x2, SXTW
	0x01DC36E4 MOVZ W9, 0x3F800000
	0x01DC36E8 STR W9, [X8 + 0x20]
	0x01DC36EC TBZ X3, 0x1, 0x1DC3710
	0x01DC36F0 CBZ X1, 0x1DC373C
	0x01DC36F4 LDR W9, [X1 + 0x18]
	0x01DC36F8 ADD W8, W2, 0x1
	0x01DC36FC CMP W8, W9
	0x01DC3700 B.CS 0x1DC3740
	0x01DC3704 ADD X8, X1, W8, 0x2, SXTW
	0x01DC3708 MOVZ W9, 0x3F800000
	0x01DC370C STR W9, [X8 + 0x20]
	0x01DC3710 TBZ X3, 0x2, 0x1DC3734
	0x01DC3714 CBZ X1, 0x1DC373C
	0x01DC3718 LDR W9, [X1 + 0x18]
	0x01DC371C ADD W8, W2, 0x2
	0x01DC3720 CMP W8, W9
	0x01DC3724 B.CS 0x1DC3740
	0x01DC3728 ADD X8, X1, W8, 0x2, SXTW
	0x01DC372C MOVZ W9, 0x3F800000
	0x01DC3730 STR W9, [X8 + 0x20]
	0x01DC3734 LDR X30, [X31], #0x10
	0x01DC3738 RET
	0x01DC373C BL 0x1C16F20
	0x01DC3740 BL 0x1C16F28
	0x01DC3744 STP D9, D8, [X31 - 0x30]!
	0x01DC3748 STP X30, X21, [X31 + 0x10]
	0x01DC374C STP X20, X19, [X31 + 0x20]
	0x01DC3750 LDR X8, [X0 + 0xD8]
	0x01DC3754 CMP W1, 0x0
	0x01DC3758 CSET W20, NE
	0x01DC375C CBZ X8, 0x1DC3828
	0x01DC3760 LDR W9, [X8 + 0x18]
	0x01DC3764 CMP W1, 0x0
	0x01DC3768 CSET W21, NE
	0x01DC376C CMP W21, W9
	0x01DC3770 B.CS 0x1DC382C
	0x01DC3774 ADD X8, X8, X20, 0x3, LSL
	0x01DC3778 MOV X19, X0
	0x01DC377C LDR X0, [X8 + 0x20]
	0x01DC3780 CBZ X0, 0x1DC3828
	0x01DC3784 MOV V8.16B, V2.16B
	0x01DC3788 MOV V9.16B, V1.16B
	0x01DC378C BL 0x1DC7C88
	0x01DC3790 LDR X8, [X19 + 0xD8]
	0x01DC3794 CBZ X8, 0x1DC3828
	0x01DC3798 LDR W9, [X8 + 0x18]
	0x01DC379C CMP W21, W9
	0x01DC37A0 B.CS 0x1DC382C
	0x01DC37A4 ADD X9, X8, X20, 0x3, LSL
	0x01DC37A8 LDR X0, [X9 + 0x20]
	0x01DC37AC CBZ X0, 0x1DC3828
	0x01DC37B0 LDRB W9, [X0 + 0x20]
	0x01DC37B4 CBZ W9, 0x1DC37C8
	0x01DC37B8 MOVZ W9, 0x1
	0x01DC37BC STRB W9, [X0 + 0x3D]
	0x01DC37C0 STR S9, [X0 + 0x28]
	0x01DC37C4 B 0x1DC37D8
	0x01DC37C8 MOV V0.16B, V9.16B
	0x01DC37CC BL 0x1DC76D4
	0x01DC37D0 LDR X8, [X19 + 0xD8]
	0x01DC37D4 CBZ X8, 0x1DC3828
	0x01DC37D8 LDR W9, [X8 + 0x18]
	0x01DC37DC CMP W21, W9
	0x01DC37E0 B.CS 0x1DC382C
	0x01DC37E4 ADD X8, X8, X20, 0x3, LSL
	0x01DC37E8 LDR X0, [X8 + 0x20]
	0x01DC37EC CBZ X0, 0x1DC3828
	0x01DC37F0 LDRB W8, [X0 + 0x20]
	0x01DC37F4 CBZ W8, 0x1DC3814
	0x01DC37F8 LDP X20, X19, [X31 + 0x20]
	0x01DC37FC LDP X30, X21, [X31 + 0x10]
	0x01DC3800 MOVZ W8, 0x1
	0x01DC3804 STRB W8, [X0 + 0x3E]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x2616000
	010 Move X20, 0x2333000
	011 Move W8, [X22+2950]
	012 Move X20, [X20+2464]
	013 Move W19, W1
	014 Move V8, V2
	015 Move V9, V1
	016 Move V10, V0
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0x2333000
	023 Move X0, [X0+2464]
	024 Call 0x1C17CF4
	025 Move X0, 0x2331000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+2950], W8
	030 Move X0, [X20]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X22, 0x2331000
	036 Move X22, [X22+1432]
	037 Move X0, X31
	038 Call NetPlayer.get_localPlayer
	039 Move X20, X0
	040 Move TEMP, X19
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {62}
	044 Move X0, [X22]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Inequality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {62}
	057 Compare X20, 0
	058 JumpIfEqual {114}
	059 Move X0, X20
	060 Move X1, X31
	061 Call NetPlayer.DropItemsIfHolding, X0
	062 Move X0, [X21+32]
	063 Compare X0, 0
	064 JumpIfEqual {114}
	065 Move V0, V10
	066 Move V1, V9
	067 Move V2, V8
	068 Move X1, X31
	069 Call Player.Reposition, X0, X1
	070 Move X0, [X21+56]
	071 Compare X0, 0
	072 JumpIfEqual {114}
	073 Call PlayerView.UpdateTransforms, X0
	074 Move TEMP, X19
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfEqual {105}
	078 Move X0, [X22]
	079 Move W8, [X0+224]
	080 Compare W8, 0
	081 JumpIfNotEqual {83}
	082 Call 0x1C17DFC
	083 Move X0, X20
	084 Move X1, X31
	085 Move X2, X31
	086 Call Object.op_Inequality, X0, X1
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {105}
	091 Compare X20, 0
	092 JumpIfEqual {114}
	093 Move X0, X20
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X30, [X31+24]
	099 Move D9, [X31+8]
	100 Move D8, [X31+16]
	101 Move X1, X31
	102 Move V10, [X31+64]
	103 Call NetPlayer.RepositionItemsIfHolding, X0
	104 Return 
	105 Move X20, [X31+48]
	106 Move X19, [X31+56]
	107 Move X22, [X31+32]
	108 Move X21, [X31+40]
	109 Move X30, [X31+24]
	110 Move D9, [X31+8]
	111 Move D8, [X31+16]
	112 Move V10, [X31+64]
	113 Return 
	114 Call 0x1C17F20

Method: System.Void Respawn(UnityEngine.Vector3 targetPosition, UnityEngine.Vector3 targetDirection, System.Boolean dropItems = False)

Disassembly:
	0x01DC3554 LDRB W9, [X8 + 0x2C]
	0x01DC3558 CBZ W9, 0x1DC35AC
	0x01DC355C LDRB W9, [X24 + 0x793]
	0x01DC3560 LDRB W20, [X8 + 0x2D]
	0x01DC3564 CBNZ W9, 0x1DC357C
	0x01DC3568 ADRP X0, 0x2331000
	0x01DC356C LDR X0, [X0 + 0x5A8]
	0x01DC3570 BL 0x1C16CF4
	0x01DC3574 MOVZ W8, 0x1
	0x01DC3578 STRB W8, [X24 + 0x793]
	0x01DC357C ADRP X8, 0x2331000
	0x01DC3580 LDR X8, [X8 + 0x5A8]
	0x01DC3584 LDR V2, [X31 + 0xC]
	0x01DC3588 MOV W0, W20
	0x01DC358C MOV V0.16B, V10.16B
	0x01DC3590 LDR X8, [X8]
	0x01DC3594 MOV V1.16B, V9.16B
	0x01DC3598 MOV X1, X31
	0x01DC359C LDR X8, [X8 + 0xB8]
	0x01DC35A0 LDP S3, S4, [X8]
	0x01DC35A4 LDP S5, S6, [X8 + 0x8]
	0x01DC35A8 BL 0x1E04F44
	0x01DC35AC LDR X0, [X23]
	0x01DC35B0 LDR W8, [X0 + 0xE0]
	0x01DC35B4 CBNZ W8, 0x1DC35C0
	0x01DC35B8 BL 0x1C16DFC
	0x01DC35BC LDR X0, [X23]
	0x01DC35C0 LDR X8, [X0 + 0xB8]
	0x01DC35C4 LDR X8, [X8 + 0x18]
	0x01DC35C8 CBZ X8, 0x1DC35E8
	0x01DC35CC LDR X9, [X8 + 0x18]
	0x01DC35D0 LDR X0, [X8 + 0x40]
	0x01DC35D4 LDR X3, [X8 + 0x28]
	0x01DC35D8 MOV W1, W19
	0x01DC35DC MOV X2, X21
	0x01DC35E0 MOV V0.16B, V11.16B
	0x01DC35E4 BLR X9
	0x01DC35E8 LDP X20, X19, [X31 + 0x80]
	0x01DC35EC LDP X22, X21, [X31 + 0x70]
	0x01DC35F0 LDP X24, X23, [X31 + 0x60]
	0x01DC35F4 LDR X30, [X31 + 0x50]
	0x01DC35F8 LDP D9, D8, [X31 + 0x40]
	0x01DC35FC LDP D11, D10, [X31 + 0x30]
	0x01DC3600 LDP D13, D12, [X31 + 0x20]
	0x01DC3604 LDP D15, D14, [X31 + 0x10]
	0x01DC3608 ADD X31, X31, 0x90
	0x01DC360C RET
	0x01DC3610 BL 0x1C16F20
	0x01DC3614 STP D11, D10, [X31 - 0x50]!
	0x01DC3618 STP D9, D8, [X31 + 0x10]
	0x01DC361C STR X30, [X31 + 0x20]
	0x01DC3620 STP X22, X21, [X31 + 0x30]
	0x01DC3624 STP X20, X19, [X31 + 0x40]
	0x01DC3628 MOV X20, X0
	0x01DC362C MOV X0, X31
	0x01DC3630 MOV W19, W2
	0x01DC3634 MOV V10.16B, V2.16B
	0x01DC3638 MOV V9.16B, V1.16B
	0x01DC363C MOV V8.16B, V0.16B
	0x01DC3640 MOV X22, X1
	0x01DC3644 BL 0x3C3C714
	0x01DC3648 CBZ X22, 0x1DC36C0
	0x01DC364C MOV X0, X22
	0x01DC3650 MOV X1, X31
	0x01DC3654 MOV V11.16B, V0.16B
	0x01DC3658 BL 0x3C8A170
	0x01DC365C MOV X21, X0
	0x01DC3660 MOV X0, X22
	0x01DC3664 MOV X1, X31
	0x01DC3668 BL 0x3C8A344
	0x01DC366C CBZ X0, 0x1DC36C0
	0x01DC3670 LDR W8, [X0 + 0x18]
	0x01DC3674 CBZ W8, 0x1DC36C4
	0x01DC3678 ADD X0, X0, 0x20
	0x01DC367C MOV X1, X31
	0x01DC3680 FMUL S10, S10, S11
	0x01DC3684 FMUL S9, S9, S11
	0x01DC3688 FMUL S8, S8, S11
	0x01DC368C BL 0x3C901AC
	0x01DC3690 MOV X0, X20
	0x01DC3694 MOV X1, X21
	0x01DC3698 MOV V3.16B, V8.16B
	0x01DC369C MOV V4.16B, V9.16B
	0x01DC36A0 MOV W2, W19
	0x01DC36A4 LDP X20, X19, [X31 + 0x40]
	0x01DC36A8 LDP X22, X21, [X31 + 0x30]
	0x01DC36AC LDR X30, [X31 + 0x20]
	0x01DC36B0 LDP D9, D8, [X31 + 0x10]
	0x01DC36B4 MOV V5.16B, V10.16B
	0x01DC36B8 LDP D11, D10, [X31], #0x50
	0x01DC36BC B 0x1DC3280

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x2616000
	013 Move X20, 0x2333000
	014 Move W8, [X22+2951]
	015 Move X20, [X20+2464]
	016 Move W19, W1
	017 Move V8, V5
	018 Move V9, V4
	019 Move V10, V3
	020 Move V11, V2
	021 Move V12, V1
	022 Move V13, V0
	023 Move X21, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {36}
	028 Move X0, 0x2333000
	029 Move X0, [X0+2464]
	030 Call 0x1C17CF4
	031 Move X0, 0x2331000
	032 Move X0, [X0+1432]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X22+2951], W8
	036 Move X0, [X20]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X22, 0x2331000
	042 Move X22, [X22+1432]
	043 Move X0, X31
	044 Call NetPlayer.get_localPlayer
	045 Move X20, X0
	046 Move TEMP, X19
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {68}
	050 Move X0, [X22]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, X20
	056 Move X1, X31
	057 Move X2, X31
	058 Call Object.op_Inequality, X0, X1
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {68}
	063 Compare X20, 0
	064 JumpIfEqual {129}
	065 Move X0, X20
	066 Move X1, X31
	067 Call NetPlayer.DropItemsIfHolding, X0
	068 Move X0, [X21+32]
	069 Compare X0, 0
	070 JumpIfEqual {129}
	071 Move V0, V13
	072 Move V1, V12
	073 Move V2, V11
	074 Move V3, V10
	075 Move V4, V9
	076 Move V5, V8
	077 Move X1, X31
	078 Call Player.Reposition, X0, X1, X2
	079 Move X0, [X21+56]
	080 Compare X0, 0
	081 JumpIfEqual {129}
	082 Call PlayerView.UpdateTransforms, X0
	083 Move TEMP, X19
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfEqual {117}
	087 Move X0, [X22]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move X0, X20
	093 Move X1, X31
	094 Move X2, X31
	095 Call Object.op_Inequality, X0, X1
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {117}
	100 Compare X20, 0
	101 JumpIfEqual {129}
	102 Move X0, X20
	103 Move X20, [X31+80]
	104 Move X19, [X31+88]
	105 Move X22, [X31+64]
	106 Move X21, [X31+72]
	107 Move X30, [X31+48]
	108 Move D9, [X31+32]
	109 Move D8, [X31+40]
	110 Move D11, [X31+16]
	111 Move D10, [X31+24]
	112 Move X1, X31
	113 Move D13, [X31+96]
	114 Move D12, [X31+104]
	115 Call NetPlayer.RepositionItemsIfHolding, X0
	116 Return 
	117 Move X20, [X31+80]
	118 Move X19, [X31+88]
	119 Move X22, [X31+64]
	120 Move X21, [X31+72]
	121 Move X30, [X31+48]
	122 Move D9, [X31+32]
	123 Move D8, [X31+40]
	124 Move D11, [X31+16]
	125 Move D10, [X31+24]
	126 Move D13, [X31+96]
	127 Move D12, [X31+104]
	128 Return 
	129 Call 0x1C17F20

Method: System.Void AttachToTransform(System.Boolean attach, UnityEngine.Transform transform, System.Boolean moveToTransformImmediately = False, UnityEngine.Vector3 offset = null)

Disassembly:
	0x01DC3B94 CBZ X0, 0x1DC3EB4
	0x01DC3B98 MOV X1, X31
	0x01DC3B9C BL 0x3C3F58C
	0x01DC3BA0 LDR X0, [X19 + 0x38]
	0x01DC3BA4 STP S2, S0, [X31 + 0x40]
	0x01DC3BA8 STR S1, [X31 + 0x4C]
	0x01DC3BAC CBZ X0, 0x1DC3EB4
	0x01DC3BB0 BL 0x1DC3EEC
	0x01DC3BB4 CBZ X0, 0x1DC3EB4
	0x01DC3BB8 MOV X1, X31
	0x01DC3BBC BL 0x3C3DEB4
	0x01DC3BC0 LDR X0, [X19 + 0x38]
	0x01DC3BC4 STP S1, S0, [X31 + 0x28]
	0x01DC3BC8 STP S3, S2, [X31 + 0x20]
	0x01DC3BCC CBZ X0, 0x1DC3EB4
	0x01DC3BD0 STR S13, [X31 + 0x48]
	0x01DC3BD4 STR S12, [X31 + 0x30]
	0x01DC3BD8 STP S8, S11, [X31 + 0x38]
	0x01DC3BDC BL 0x1DC3F20
	0x01DC3BE0 CBZ X0, 0x1DC3EB4
	0x01DC3BE4 MOV X1, X31
	0x01DC3BE8 BL 0x3C3F58C
	0x01DC3BEC LDR X0, [X19 + 0x38]
	0x01DC3BF0 CBZ X0, 0x1DC3EB4
	0x01DC3BF4 STP S2, S1, [X31 + 0x8]
	0x01DC3BF8 STP S0, S10, [X31 + 0x10]
	0x01DC3BFC STR S9, [X31 + 0x34]
	0x01DC3C00 STP S15, S14, [X31 + 0x18]
	0x01DC3C04 BL 0x1DC3F20
	0x01DC3C08 CBNZ X0, 0x1DC3D60
	0x01DC3C0C B 0x1DC3EB4
	0x01DC3C10 ADRP X21, 0x2615000
	0x01DC3C14 LDRB W8, [X21 + 0x783]
	0x01DC3C18 CBNZ W8, 0x1DC3C30
	0x01DC3C1C ADRP X0, 0x2330000
	0x01DC3C20 LDR X0, [X0 + 0x5A0]
	0x01DC3C24 BL 0x1C16CF4
	0x01DC3C28 MOVZ W8, 0x1
	0x01DC3C2C STRB W8, [X21 + 0x783]
	0x01DC3C30 ADRP X8, 0x2330000
	0x01DC3C34 LDR X8, [X8 + 0x5A0]
	0x01DC3C38 LDR X8, [X8]
	0x01DC3C3C LDR X8, [X8 + 0xB8]
	0x01DC3C40 LDP S0, S1, [X8]
	0x01DC3C44 LDR V2, [X8 + 0x8]
	0x01DC3C48 MOV X0, X31
	0x01DC3C4C BL 0x3C2A8C4
	0x01DC3C50 LDR X0, [X19 + 0x58]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, X0
	011 Move X0, [X0+32]
	012 Compare X0, 0
	013 JumpIfEqual {64}
	014 NotImplemented "Instruction ORN not yet implemented."
	015 Move X21, X2
	016 Move W22, W1
	017 And W1, W8, 1
	018 Move X2, X31
	019 Move V8, V2
	020 Move V9, V1
	021 Move V10, V0
	022 Move W20, W3
	023 Call Player.SetActiveHandCollisions, X0, X1
	024 And W31, W22, 1
	025 NotImplemented "Instruction CSEL not yet implemented."
	026 Move [X19+176], X8
	027 Move TEMP, X20
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {51}
	031 Move X0, [X19+32]
	032 Compare X0, 0
	033 JumpIfEqual {64}
	034 Move X1, X31
	035 Call Component.get_transform, X0
	036 Compare X0, 0
	037 JumpIfEqual {64}
	038 Move X1, X31
	039 Call Transform.get_position, X0
	040 Move X0, [X19+176]
	041 Compare X0, 0
	042 JumpIfEqual {64}
	043 Move X1, X31
	044 Move V8, V0
	045 Move V9, V1
	046 Move V11, V2
	047 Call Transform.get_position, X0
	048 Subtract S10, S8, S0
	049 Subtract S9, S9, S1
	050 Subtract S8, S11, S2
	051 Move [X19+184], S10
	052 Move [X19+192], S9
	053 Move [X19+192], S8
	054 Move X20, [X31+64]
	055 Move X19, [X31+72]
	056 Move X22, [X31+48]
	057 Move X21, [X31+56]
	058 Move X30, [X31+32]
	059 Move D9, [X31+16]
	060 Move D8, [X31+24]
	061 Move D11, [X31+80]
	062 Move D10, [X31+88]
	063 Return 
	064 Call 0x1C17F20

Method: System.Void UpdateBackpack(System.Boolean equipped, System.Single fillAmount)

Disassembly:
	0x01DC3C54 STP S1, S0, [X31 + 0x74]
	0x01DC3C58 STP S3, S2, [X31 + 0x6C]
	0x01DC3C5C CBZ X0, 0x1DC3EB4
	0x01DC3C60 MOV X1, X31
	0x01DC3C64 BL 0x3C3F58C
	0x01DC3C68 LDR X0, [X19 + 0x58]
	0x01DC3C6C STP S1, S0, [X31 + 0x64]
	0x01DC3C70 STR S2, [X31 + 0x60]
	0x01DC3C74 CBZ X0, 0x1DC3EB4
	0x01DC3C78 MOV X1, X31
	0x01DC3C7C BL 0x3C3DEB4
	0x01DC3C80 LDR X0, [X19 + 0x78]
	0x01DC3C84 STP S1, S0, [X31 + 0xA8]
	0x01DC3C88 STP S3, S2, [X31 + 0xA0]
	0x01DC3C8C CBZ X0, 0x1DC3EB4
	0x01DC3C90 MOV X1, X31
	0x01DC3C94 BL 0x3C3F58C
	0x01DC3C98 LDR X0, [X19 + 0x78]
	0x01DC3C9C STP S1, S0, [X31 + 0x98]
	0x01DC3CA0 STR S2, [X31 + 0x5C]
	0x01DC3CA4 CBZ X0, 0x1DC3EB4
	0x01DC3CA8 MOV X1, X31
	0x01DC3CAC BL 0x3C3DEB4
	0x01DC3CB0 LDR X0, [X19 + 0x70]
	0x01DC3CB4 STP S1, S0, [X31 + 0x54]
	0x01DC3CB8 STR S2, [X31 + 0x50]
	0x01DC3CBC CBZ X0, 0x1DC3EB4
	0x01DC3CC0 MOV X1, X31
	0x01DC3CC4 MOV V8.16B, V3.16B
	0x01DC3CC8 BL 0x3C3F58C
	0x01DC3CCC LDR X0, [X19 + 0x70]
	0x01DC3CD0 CBZ X0, 0x1DC3EB4
	0x01DC3CD4 MOV X1, X31
	0x01DC3CD8 MOV V11.16B, V0.16B
	0x01DC3CDC MOV V12.16B, V1.16B
	0x01DC3CE0 MOV V9.16B, V2.16B

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2616000
	007 Move X20, 0x2333000
	008 Move W8, [X21+2952]
	009 Move X20, [X20+1992]
	010 Move V8, V0
	011 Move W19, W1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2333000
	017 Move X0, [X0+1992]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2952], W8
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X20]
	027 Move X8, [X0+184]
	028 Move X8, [X8+48]
	029 Compare X8, 0
	030 JumpIfEqual {42}
	031 Move X3, [X8+24]
	032 Move X0, [X8+64]
	033 Move X2, [X8+40]
	034 And W1, W19, 1
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move V0, V8
	040 Move V8, [X31+48]
	041 CallNoReturn X3
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+16]
	045 Move X21, [X31+24]
	046 Move V8, [X31+48]
	047 Return 

Method: System.Void SetChannel(System.Int32 channel)

Disassembly:
	0x01DC3CE4 BL 0x3C3DEB4
	0x01DC3CE8 LDR X0, [X19 + 0x68]
	0x01DC3CEC STR S0, [X31 + 0x34]
	0x01DC3CF0 STR S3, [X31 + 0x48]
	0x01DC3CF4 CBZ X0, 0x1DC3EB4
	0x01DC3CF8 MOV X1, X31
	0x01DC3CFC MOV V10.16B, V1.16B
	0x01DC3D00 MOV V13.16B, V2.16B
	0x01DC3D04 BL 0x3C3F58C
	0x01DC3D08 LDR X0, [X19 + 0x78]
	0x01DC3D0C STR S1, [X31 + 0x4C]
	0x01DC3D10 CBZ X0, 0x1DC3EB4
	0x01DC3D14 MOV X1, X31
	0x01DC3D18 MOV V14.16B, V0.16B
	0x01DC3D1C MOV V15.16B, V2.16B
	0x01DC3D20 STR S13, [X31 + 0x30]
	0x01DC3D24 STP S9, S8, [X31 + 0x38]
	0x01DC3D28 BL 0x3C3DEB4
	0x01DC3D2C LDR X0, [X19 + 0x60]
	0x01DC3D30 CBZ X0, 0x1DC3EB4
	0x01DC3D34 MOV X1, X31
	0x01DC3D38 STP S3, S2, [X31 + 0x20]
	0x01DC3D3C STP S1, S0, [X31 + 0x28]
	0x01DC3D40 STP S15, S14, [X31 + 0x40]
	0x01DC3D44 STP S10, S12, [X31 + 0x14]
	0x01DC3D48 STR S11, [X31 + 0x1C]
	0x01DC3D4C BL 0x3C3F58C
	0x01DC3D50 LDR X0, [X19 + 0x70]
	0x01DC3D54 STP S1, S0, [X31 + 0xC]
	0x01DC3D58 STR S2, [X31 + 0x8]
	0x01DC3D5C CBZ X0, 0x1DC3EB4
	0x01DC3D60 MOV X1, X31
	0x01DC3D64 BL 0x3C3DEB4
	0x01DC3D68 STP S1, S0, [X31 + 0x90]
	0x01DC3D6C STP S3, S2, [X31 + 0x88]
	0x01DC3D70 LDP S5, S4, [X31 + 0x80]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2616000
	007 Move X21, 0x2333000
	008 Move W8, [X22+2953]
	009 Move X21, [X21+1992]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2333000
	017 Move X0, [X0+1992]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2953], W8
	021 Move [X20+304], W19
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X8, [X8+64]
	030 Compare X8, 0
	031 JumpIfEqual {42}
	032 Move X3, [X8+24]
	033 Move X0, [X8+64]
	034 Move X2, [X8+40]
	035 Move W1, W19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 CallNoReturn X3
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Return 

Method: System.Void AddItemContactPoint(UnityEngine.Vector3 position, UnityEngine.Vector3 prevPosition)

Disassembly:
	0x01DC3D74 LDP S7, S6, [X31 + 0x78]
	0x01DC3D78 LDP S17, S16, [X31 + 0x70]
	0x01DC3D7C LDP S23, S18, [X31 + 0x68]
	0x01DC3D80 LDP S25, S24, [X31 + 0x60]
	0x01DC3D84 LDP S29, S28, [X31 + 0x58]
	0x01DC3D88 LDP S31, S30, [X31 + 0x50]
	0x01DC3D8C LDP S9, S14, [X31 + 0x38]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Player.AddItemContactPoint, X0, X1, X2
	008 Return 
	009 Call 0x1C17F20

Method: System.Void AddExternalForce(UnityEngine.Vector3 velocity)

Disassembly:
	0x01DC3D90 LDP S8, S15, [X31 + 0x18]
	0x01DC3D94 LDP S12, S10, [X31 + 0x30]
	0x01DC3D98 LDP S22, S11, [X31 + 0x10]
	0x01DC3D9C LDP S19, S13, [X31 + 0x44]
	0x01DC3DA0 LDR V0, [X31 + 0x40]
	0x01DC3DA4 LDR V1, [X31 + 0x4C]
	0x01DC3DA8 LDP S3, S2, [X31 + 0x28]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Player.AddExternalForceVelocity, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: System.Void AddGrabOffset(UnityEngine.Vector3 offset)

Disassembly:
	0x01DC3DAC LDP S21, S20, [X31 + 0x20]
	0x01DC3DB0 LDP S27, S26, [X31 + 0x8]
	0x01DC3DB4 STP S4, S5, [X31 + 0xC0]
	0x01DC3DB8 STP S6, S7, [X31 + 0xC8]
	0x01DC3DBC STP S16, S17, [X31 + 0xD0]
	0x01DC3DC0 STP S18, S23, [X31 + 0xD8]
	0x01DC3DC4 STP S24, S25, [X31 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Player.AddGrabPositionOffset, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: System.Void SetItemWeight(AnimalCompany.AttachedLocation slot, System.Single weight)

Disassembly:
	0x01DC3DC8 ADRP X8, 0x2335000
	0x01DC3DCC LDR X8, [X8 + 0x130]
	0x01DC3DD0 STP S1, S0, [X31 + 0xFC]
	0x01DC3DD4 LDR V0, [X31 + 0x94]
	0x01DC3DD8 LDR V4, [X31 + 0xAC]
	0x01DC3DDC LDR X2, [X8]
	0x01DC3DE0 ADD X0, X31, 0xB0
	0x01DC3DE4 STR S0, [X31 + 0x120]
	0x01DC3DE8 LDR V0, [X31 + 0x90]
	0x01DC3DEC STR S4, [X31 + 0xE8]
	0x01DC3DF0 LDR V4, [X31 + 0xA8]
	0x01DC3DF4 ADD X1, X31, 0xC0
	0x01DC3DF8 STR S0, [X31 + 0x124]
	0x01DC3DFC LDR V0, [X31 + 0x8C]
	0x01DC3E00 STR S4, [X31 + 0xEC]
	0x01DC3E04 LDR V4, [X31 + 0xA4]
	0x01DC3E08 STR S2, [X31 + 0x104]
	0x01DC3E0C STR S0, [X31 + 0x128]
	0x01DC3E10 LDR V0, [X31 + 0x88]
	0x01DC3E14 STR S4, [X31 + 0xF0]
	0x01DC3E18 LDR V4, [X31 + 0xA0]
	0x01DC3E1C STR S3, [X31 + 0x108]
	0x01DC3E20 STR S0, [X31 + 0x12C]
	0x01DC3E24 LDR V0, [X31 + 0x9C]
	0x01DC3E28 STP S4, S19, [X31 + 0xF4]
	0x01DC3E2C STR S20, [X31 + 0x10C]
	0x01DC3E30 STR S21, [X31 + 0x110]
	0x01DC3E34 STR S0, [X31 + 0x14C]
	0x01DC3E38 LDR V0, [X31 + 0x98]
	0x01DC3E3C STR S22, [X31 + 0x114]
	0x01DC3E40 STR S26, [X31 + 0x118]
	0x01DC3E44 STR S27, [X31 + 0x11C]
	0x01DC3E48 STR S15, [X31 + 0x130]
	0x01DC3E4C STR S8, [X31 + 0x134]
	0x01DC3E50 STR S9, [X31 + 0x138]
	0x01DC3E54 STR S10, [X31 + 0x13C]
	0x01DC3E58 STR S11, [X31 + 0x140]
	0x01DC3E5C STR S12, [X31 + 0x144]
	0x01DC3E60 STR S13, [X31 + 0x148]
	0x01DC3E64 STR S0, [X31 + 0x150]
	0x01DC3E68 STR S28, [X31 + 0x154]
	0x01DC3E6C STR S29, [X31 + 0x158]
	0x01DC3E70 STR S30, [X31 + 0x15C]
	0x01DC3E74 STR S31, [X31 + 0x160]
	0x01DC3E78 STR S14, [X31 + 0x164]
	0x01DC3E7C BL 0x222A4A4
	0x01DC3E80 LDR X8, [X20 + 0x28]
	0x01DC3E84 LDR X9, [X31 + 0x168]
	0x01DC3E88 CMP X8, X9
	0x01DC3E8C B.NE 0x1DC3EB8
	0x01DC3E90 LDP X20, X19, [X31 + 0x1D0]
	0x01DC3E94 LDP X30, X21, [X31 + 0x1C0]
	0x01DC3E98 LDR X29, [X31 + 0x1B0]
	0x01DC3E9C LDP D9, D8, [X31 + 0x1A0]
	0x01DC3EA0 LDP D11, D10, [X31 + 0x190]
	0x01DC3EA4 LDP D13, D12, [X31 + 0x180]
	0x01DC3EA8 LDP D15, D14, [X31 + 0x170]
	0x01DC3EAC ADD X31, X31, 0x1E0
	0x01DC3EB0 RET
	0x01DC3EB4 BL 0x1C16F20
	0x01DC3EB8 BL 0x3EB1B20
	0x01DC3EBC STR X30, [X31 - 0x10]!
	0x01DC3EC0 LDR X8, [X0 + 0xE8]
	0x01DC3EC4 CBZ X8, 0x1DC3EE4
	0x01DC3EC8 LDR W9, [X8 + 0x18]
	0x01DC3ECC CBZ W9, 0x1DC3EE8
	0x01DC3ED0 LDR X0, [X8 + 0x20]
	0x01DC3ED4 CBZ X0, 0x1DC3EE4
	0x01DC3ED8 MOV X1, X31
	0x01DC3EDC LDR X30, [X31], #0x10
	0x01DC3EE0 B 0x3C356F8
	0x01DC3EE4 BL 0x1C16F20
	0x01DC3EE8 BL 0x1C16F28
	0x01DC3EEC STR X30, [X31 - 0x10]!
	0x01DC3EF0 LDR X8, [X0 + 0xE8]
	0x01DC3EF4 CBZ X8, 0x1DC3F18
	0x01DC3EF8 LDR W9, [X8 + 0x18]
	0x01DC3EFC CMP W9, 0x2
	0x01DC3F00 B.LS 0x1DC3F1C
	0x01DC3F04 LDR X0, [X8 + 0x30]
	0x01DC3F08 CBZ X0, 0x1DC3F18
	0x01DC3F0C MOV X1, X31
	0x01DC3F10 LDR X30, [X31], #0x10
	0x01DC3F14 B 0x3C356F8
	0x01DC3F18 BL 0x1C16F20
	0x01DC3F1C BL 0x1C16F28
	0x01DC3F20 STR X30, [X31 - 0x10]!
	0x01DC3F24 LDR X8, [X0 + 0xE8]
	0x01DC3F28 CBZ X8, 0x1DC3F4C
	0x01DC3F2C LDR W9, [X8 + 0x18]
	0x01DC3F30 CMP W9, 0x1
	0x01DC3F34 B.LS 0x1DC3F50
	0x01DC3F38 LDR X0, [X8 + 0x28]
	0x01DC3F3C CBZ X0, 0x1DC3F4C
	0x01DC3F40 MOV X1, X31
	0x01DC3F44 LDR X30, [X31], #0x10
	0x01DC3F48 B 0x3C356F8
	0x01DC3F4C BL 0x1C16F20
	0x01DC3F50 BL 0x1C16F28
	0x01DC3F54 STP X30, X25, [X31 - 0x40]!
	0x01DC3F58 STP X24, X23, [X31 + 0x10]
	0x01DC3F5C STP X22, X21, [X31 + 0x20]
	0x01DC3F60 STP X20, X19, [X31 + 0x30]
	0x01DC3F64 ADRP X21, 0x2615000
	0x01DC3F68 ADRP X20, 0x2333000
	0x01DC3F6C LDRB W8, [X21 + 0xB8F]
	0x01DC3F70 LDR X20, [X20 + 0xC30]
	0x01DC3F74 MOV X19, X0
	0x01DC3F78 TBNZ X8, 0x0, 0x1DC3FC0
	0x01DC3F7C ADRP X0, 0x2335000
	0x01DC3F80 LDR X0, [X0 + 0x138]
	0x01DC3F84 BL 0x1C16CF4
	0x01DC3F88 ADRP X0, 0x2335000
	0x01DC3F8C LDR X0, [X0 + 0x140]
	0x01DC3F90 BL 0x1C16CF4
	0x01DC3F94 ADRP X0, 0x2335000
	0x01DC3F98 LDR X0, [X0 + 0x148]
	0x01DC3F9C BL 0x1C16CF4
	0x01DC3FA0 ADRP X0, 0x2335000
	0x01DC3FA4 LDR X0, [X0 + 0x150]
	0x01DC3FA8 BL 0x1C16CF4
	0x01DC3FAC ADRP X0, 0x2333000
	0x01DC3FB0 LDR X0, [X0 + 0xC30]
	0x01DC3FB4 BL 0x1C16CF4
	0x01DC3FB8 MOVZ W8, 0x1
	0x01DC3FBC STRB W8, [X21 + 0xB8F]
	0x01DC3FC0 ADRP X24, 0x2335000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D8
	003 Move [X31+48], X30
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X21, 0x2616000
	008 Move W8, [X21+2954]
	009 Move V8, V0
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {39}
	016 Move X0, 0x2336000
	017 Move X0, [X0+240]
	018 Call 0x1C17CF4
	019 Move X0, 0x2336000
	020 Move X0, [X0+248]
	021 Call 0x1C17CF4
	022 Move X0, 0x2336000
	023 Move X0, [X0+256]
	024 Call 0x1C17CF4
	025 Move X0, 0x2336000
	026 Move X0, [X0+264]
	027 Call 0x1C17CF4
	028 Move X0, 0x2336000
	029 Move X0, [X0+272]
	030 Call 0x1C17CF4
	031 Move X0, 0x2333000
	032 Move X0, [X0+1992]
	033 Call 0x1C17CF4
	034 Move X0, 0x2336000
	035 Move X0, [X0+280]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X21+2954], W8
	039 Move [X31+8], X31
	040 Move [X31+16], X31
	041 Move [X31+24], X31
	042 Move X0, [X19+208]
	043 Compare X0, 0
	044 JumpIfEqual {113}
	045 Move X8, 0x2336000
	046 Move X8, [X8+248]
	047 Move W1, W20
	048 Move V0, V8
	049 Move X2, [X8]
	050 Call Dictionary`2<Int32Enum, Single>.set_Item, X0, X1, V0
	051 Move X0, [X19+208]
	052 Compare X0, 0
	053 JumpIfEqual {113}
	054 Move X8, 0x2336000
	055 Move X8, [X8+240]
	056 Move X1, [X8]
	057 Call Dictionary`2<Int32Enum, Single>.get_Values, X0
	058 Compare X0, 0
	059 JumpIfEqual {113}
	060 Move X8, 0x2336000
	061 Move X8, [X8+280]
	062 Move X21, 0x2336000
	063 Move X20, 0x2336000
	064 Move X1, [X8]
	065 Move X21, [X21+264]
	066 Move X20, [X20+256]
	067 Add X8, X31, 8
	068 Call ValueCollection<Int32Enum, Single>.GetEnumerator, X0
	069 Move S8, W31
	070 Move X1, [X21]
	071 Add X0, X31, 8
	072 Call Enumerator<Int32Enum, Single>.MoveNext, X0
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {79}
	077 Move V0, [X31+24]
	078 Add S8, S8, S0
	079 Move X1, [X20]
	080 Add X0, X31, 8
	081 Call Enumerator<Int32Enum, Single>.Dispose, X0
	082 Move V0, [X19+216]
	083 NotImplemented "Instruction FCMP not yet implemented."
	084 Move [X19+216], S8
	085 Move X20, 0x2333000
	086 Move X20, [X20+1992]
	087 Move X0, [X20]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {93}
	091 Call 0x1C17DFC
	092 Move X0, [X20]
	093 Move X8, [X0+184]
	094 Move X8, [X8+56]
	095 Compare X8, 0
	096 JumpIfEqual {102}
	097 Move X9, [X8+24]
	098 Move X0, [X8+64]
	099 Move X1, [X8+40]
	100 Move V0, V8
	101 NotImplemented "Instruction BLR not yet implemented."
	102 Move X8, [X19+32]
	103 Compare X8, 0
	104 JumpIfEqual {113}
	105 Move [X8+488], S8
	106 Move X20, [X31+64]
	107 Move X19, [X31+72]
	108 Move X30, [X31+48]
	109 Move X21, [X31+56]
	110 Move V8, [X31+32]
	111 Add X31, X31, 80
	112 Return 
	113 Call 0x1C17F20
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move X21, X0
	116 Move X0, X21
	117 Call 0x3EB2AD0
	118 Move X20, [X0]
	119 Call 0x3EB2AE0
	120 Move X8, 0x2336000
	121 Move X8, [X8+256]
	122 Add X0, X31, 8
	123 Move X1, [X8]
	124 Call Enumerator<Int32Enum, Single>.Dispose, X0
	125 Compare X20, 0
	126 JumpIfEqual {82}
	127 Move X0, X20
	128 Call 0x1C17F18
	129 Move X20, X31
	130 Move X21, X0
	131 Move X8, 0x2336000
	132 Move X8, [X8+256]
	133 Move X1, [X8]
	134 Add X0, X31, 8
	135 Call Enumerator<Int32Enum, Single>.Dispose, X0
	136 Compare X20, 0
	137 JumpIfNotEqual {140}
	138 Move X0, X21
	139 Call 0x1D2D690
	140 Move X0, X20
	141 Call 0x1C17F18
	142 Call 0x1991590

Method: System.Void SetFingerUsage(AnimalCompany.HandSide side, AnimalCompany.FingerUsage fingerUsage)

Disassembly:
	0x01DC3FC4 MOVZ W8, 0x64
	0x01DC3FC8 LDR X24, [X24 + 0x150]
	0x01DC3FCC STR W8, [X19 + 0x88]
	0x01DC3FD0 LDR X0, [X20]
	0x01DC3FD4 ADRP X25, 0x2335000
	0x01DC3FD8 ADRP X23, 0x2335000

ISIL:
	001 Compare W1, 0
	002 JumpIfEqual {4}
	003 Move [X0+244], W2
	004 Move [X0+240], W2
	005 Move X1, [X0+232]

Method: System.Void OnHandCollidingLeft(UnityEngine.RaycastHit hit, UnityEngine.Vector3 moveDelta)

Disassembly:
	0x01DC41A8 STR X0, [X19 + 0x128]
	0x01DC41AC MOV X0, X19
	0x01DC41B0 LDP X20, X19, [X31 + 0x30]
	0x01DC41B4 LDP X30, X25, [X31], #0x40
	0x01DC41B8 B 0x3C36C30
	0x01DC41BC BL 0x1C16F28
	0x01DC41C0 BL 0x1C16F20
	0x01DC41C4 STR X30, [X31 - 0x20]!
	0x01DC41C8 STP X20, X19, [X31 + 0x10]
	0x01DC41CC ADRP X19, 0x2614000
	0x01DC41D0 ADRP X20, 0x2331000
	0x01DC41D4 LDRB W8, [X19 + 0xB90]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+48], X30
	003 NotImplemented "Instruction LDUR not yet implemented."
	004 Move V5, [X1]
	005 Move V4, [X1+16]
	006 Add X1, X31, 0
	007 Move W2, W31
	008 Move [X31+28], V3
	009 Move [X31], V5
	010 Move [X31+8], V4
	011 Call PlayerController.OnHandColliding, X0, X1, X2, X3
	012 Move X30, [X31+48]
	013 Add X31, X31, 64
	014 Return 

Method: System.Void OnHandCollidingRight(UnityEngine.RaycastHit hit, UnityEngine.Vector3 moveDelta)

Disassembly:
	0x01DC4250 LDR X0, [X0 + 0x158]
	0x01DC4254 BL 0x1C16CF4
	0x01DC4258 MOVZ W8, 0x1
	0x01DC425C STRB W8, [X22 + 0xBE5]
	0x01DC4260 LDR X0, [X21]
	0x01DC4264 LDR W8, [X0 + 0xE0]
	0x01DC4268 CBNZ W8, 0x1DC4274
	0x01DC426C BL 0x1C16DFC
	0x01DC4270 LDR X0, [X21]
	0x01DC4274 LDR X8, [X0 + 0xB8]
	0x01DC4278 MOV W0, W20
	0x01DC427C MOV X2, X19

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+48], X30
	003 NotImplemented "Instruction LDUR not yet implemented."
	004 Move V5, [X1]
	005 Move V4, [X1+16]
	006 Add X1, X31, 0
	007 Move W2, 1
	008 Move [X31+28], V3
	009 Move [X31], V5
	010 Move [X31+8], V4
	011 Call PlayerController.OnHandColliding, X0, X1, X2, X3
	012 Move X30, [X31+48]
	013 Add X31, X31, 64
	014 Return 

Method: System.Void OnHandColliding(UnityEngine.RaycastHit hit, UnityEngine.Vector3 moveDelta, AnimalCompany.HandSide handSide)

Disassembly:
	0x01DC41D8 LDR X20, [X20 + 0x7C8]
	0x01DC41DC TBNZ X8, 0x0, 0x1DC41F4
	0x01DC41E0 ADRP X0, 0x2331000
	0x01DC41E4 LDR X0, [X0 + 0x7C8]
	0x01DC41E8 BL 0x1C16CF4
	0x01DC41EC MOVZ W8, 0x1
	0x01DC41F0 STRB W8, [X19 + 0xB90]
	0x01DC41F4 LDR X8, [X20]
	0x01DC41F8 ADRP X9, 0xFFFFFFFFFED29000
	0x01DC41FC LDR V0, [X9 + 0xFF8]
	0x01DC4200 ADRP X10, 0xFFFFFFFFFED29000
	0x01DC4204 LDR X9, [X8 + 0xB8]
	0x01DC4208 LDP X20, X19, [X31 + 0x10]
	0x01DC420C STR D0, [X9 + 0x50]
	0x01DC4210 LDR X8, [X8 + 0xB8]
	0x01DC4214 LDR V0, [X10 + 0x4A8]
	0x01DC4218 STR D0, [X8 + 0x58]
	0x01DC421C LDR X30, [X31], #0x20
	0x01DC4220 RET
	0x01DC4224 STR X30, [X31 - 0x30]!
	0x01DC4228 STP X22, X21, [X31 + 0x10]
	0x01DC422C STP X20, X19, [X31 + 0x20]
	0x01DC4230 ADRP X22, 0x2614000
	0x01DC4234 ADRP X21, 0x2334000
	0x01DC4238 LDRB W8, [X22 + 0xBE5]
	0x01DC423C LDR X21, [X21 + 0x158]
	0x01DC4240 MOV X19, X1
	0x01DC4244 MOV W20, W0
	0x01DC4248 TBNZ X8, 0x0, 0x1DC4260
	0x01DC424C ADRP X0, 0x2334000

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, X1
	010 Move X21, X0
	011 Move X0, X1
	012 Move X1, X31
	013 Move W19, W2
	014 Move V8, V2
	015 Move V9, V1
	016 Move V10, V0
	017 Call RaycastHit.get_collider, X0
	018 Move X22, X0
	019 Move X0, X20
	020 Move X1, X31
	021 Call RaycastHit.get_point, X0
	022 Move X0, X21
	023 Move X1, X22
	024 Move V4, V9
	025 Move V5, V8
	026 Move W2, W19
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X22, [X31+32]
	030 Move X21, [X31+40]
	031 Move X30, [X31+24]
	032 Move D9, [X31+8]
	033 Move D8, [X31+16]
	034 Move V3, V10
	035 Move V10, [X31+64]
	036 Call PlayerController.HandleHandCollision, X0, X1, X2, X3, X4
	037 Return 

Method: System.Void OnItemCollision(UnityEngine.Collision collision, UnityEngine.Vector3 velocity, AnimalCompany.HandSide handSide)

Disassembly:
	0x01DC4614 LDR X0, [X8]
	0x01DC4618 LDR W8, [X0 + 0xE0]
	0x01DC461C CBNZ W8, 0x1DC4624
	0x01DC4620 BL 0x1C16DFC
	0x01DC4624 MOV W0, W31
	0x01DC4628 MOV X1, X31
	0x01DC462C BL 0x1E01A6C
	0x01DC4630 ADRP X8, 0x2334000
	0x01DC4634 LDR X8, [X8 + 0xD8]
	0x01DC4638 LDR X0, [X8]
	0x01DC463C LDR W8, [X0 + 0xE0]
	0x01DC4640 CBNZ W8, 0x1DC4648
	0x01DC4644 BL 0x1C16DFC
	0x01DC4648 FMOV S0, 1
	0x01DC464C FMOV S1, 0.5
	0x01DC4650 FMOV S2, 1
	0x01DC4654 MOVZ W3, 0x1
	0x01DC4658 MOV X0, X31
	0x01DC465C MOV X1, X31
	0x01DC4660 MOV X2, X31
	0x01DC4664 MOV X4, X31
	0x01DC4668 BL 0x1E007A4
	0x01DC466C ADRP X8, 0x2332000
	0x01DC4670 LDR X8, [X8 + 0xC30]
	0x01DC4674 LDR X0, [X8]
	0x01DC4678 BL 0x1C16F10
	0x01DC467C ADRP X8, 0xFFFFFFFFFED26000
	0x01DC4680 LDR V0, [X8 + 0x34]
	0x01DC4684 MOV X1, X31
	0x01DC4688 MOV X20, X0
	0x01DC468C BL 0x3C3A634
	0x01DC4690 STR X20, [X19 + 0x18]
	0x01DC4694 MOVZ W8, 0x4
	0x01DC4698 B 0x1DC49C8
	0x01DC469C MOVN W8, 0x0
	0x01DC46A0 STR W8, [X19 + 0x10]
	0x01DC46A4 ADRP X21, 0x2331000
	0x01DC46A8 LDR X21, [X21 + 0x7C8]
	0x01DC46AC LDR X0, [X21]
	0x01DC46B0 LDR W8, [X0 + 0xE0]
	0x01DC46B4 CBNZ W8, 0x1DC46C0
	0x01DC46B8 BL 0x1C16DFC
	0x01DC46BC LDR X0, [X21]
	0x01DC46C0 LDR X8, [X0 + 0xB8]
	0x01DC46C4 LDR X8, [X8 + 0x20]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, X0
	011 Move X0, X31
	012 Move W19, W2
	013 Move V10, V2
	014 Move V9, V1
	015 Move V8, V0
	016 Move X22, X1
	017 Call Time.get_deltaTime
	018 Compare X22, 0
	019 JumpIfEqual {56}
	020 Move X0, X22
	021 Move X1, X31
	022 Move V11, V0
	023 Call Collision.get_collider, X0
	024 Move X21, X0
	025 Move X0, X22
	026 Move X1, X31
	027 Call Collision.get_contacts, X0
	028 Compare X0, 0
	029 JumpIfEqual {56}
	030 Move W8, [X0+24]
	031 Compare W8, 0
	032 JumpIfEqual {57}
	033 Add X0, X0, 32
	034 Move X1, X31
	035 Multiply S10, S10, S11
	036 Multiply S9, S9, S11
	037 Multiply S8, S8, S11
	038 Call ContactPoint.get_point, X0
	039 Move X0, X20
	040 Move X1, X21
	041 Move V3, V8
	042 Move V4, V9
	043 Move W2, W19
	044 Move X20, [X31+64]
	045 Move X19, [X31+72]
	046 Move X22, [X31+48]
	047 Move X21, [X31+56]
	048 Move X30, [X31+32]
	049 Move D9, [X31+16]
	050 Move D8, [X31+24]
	051 Move V5, V10
	052 Move D11, [X31+80]
	053 Move D10, [X31+88]
	054 Call PlayerController.HandleHandCollision, X0, X1, X2, X3, X4
	055 Return 
	056 Call 0x1C17F20
	057 Call 0x1C17F28

Method: System.Void HandleHandCollision(UnityEngine.Collider collider, UnityEngine.Vector3 point, UnityEngine.Vector3 moveDelta, AnimalCompany.HandSide handSide)

Disassembly:
	0x01DC4280 LDP X20, X19, [X31 + 0x20]
	0x01DC4284 LDR X1, [X8 + 0x88]
	0x01DC4288 LDP X22, X21, [X31 + 0x10]
	0x01DC428C LDR X30, [X31], #0x30
	0x01DC4290 B 0x1DCFB4C
	0x01DC4294 RET
	0x01DC4298 STR X30, [X31 - 0x20]!
	0x01DC429C STP X20, X19, [X31 + 0x10]
	0x01DC42A0 LDR W8, [X0 + 0x10]
	0x01DC42A4 LDR X20, [X0 + 0x20]
	0x01DC42A8 MOV X19, X0
	0x01DC42AC CBZ W8, 0x1DC42D8
	0x01DC42B0 CMP W8, 0x1
	0x01DC42B4 B.NE 0x1DC4320
	0x01DC42B8 MOVN W8, 0x0
	0x01DC42BC STR W8, [X19 + 0x10]
	0x01DC42C0 CBZ X20, 0x1DC4330
	0x01DC42C4 LDR W8, [X20 + 0x88]
	0x01DC42C8 MOV X0, X20
	0x01DC42CC ADD W1, W8, 0x1
	0x01DC42D0 BL 0x1DC0744
	0x01DC42D4 B 0x1DC42E4
	0x01DC42D8 MOVN W8, 0x0
	0x01DC42DC STR W8, [X19 + 0x10]
	0x01DC42E0 CBZ X20, 0x1DC4330
	0x01DC42E4 LDRB W8, [X20 + 0x8C]
	0x01DC42E8 CBNZ W8, 0x1DC430C
	0x01DC42EC LDR W8, [X20 + 0x88]
	0x01DC42F0 CMP W8, 0x64
	0x01DC42F4 B.GE 0x1DC430C
	0x01DC42F8 LDR X8, [X20 + 0x90]
	0x01DC42FC MOVZ W0, 0x1
	0x01DC4300 STR W0, [X19 + 0x10]
	0x01DC4304 STR X8, [X19 + 0x18]
	0x01DC4308 B 0x1DC4324
	0x01DC430C MOV W0, W31
	0x01DC4310 MOVZ W8, 0x64
	0x01DC4314 STR W8, [X20 + 0x88]
	0x01DC4318 STR X31, [X20 + 0x98]
	0x01DC431C B 0x1DC4324
	0x01DC4320 MOV W0, W31
	0x01DC4324 LDP X20, X19, [X31 + 0x10]
	0x01DC4328 LDR X30, [X31], #0x20
	0x01DC432C RET
	0x01DC4330 BL 0x1C16F20
	0x01DC4334 LDR X0, [X0 + 0x18]
	0x01DC4338 RET
	0x01DC433C STP X30, X19, [X31 - 0x10]!
	0x01DC4340 ADRP X0, 0x232F000
	0x01DC4344 LDR X0, [X0 + 0xB40]
	0x01DC4348 BL 0x1C16D08
	0x01DC434C BL 0x1C16F10
	0x01DC4350 MOV X1, X31
	0x01DC4354 MOV X19, X0
	0x01DC4358 BL 0x3380310
	0x01DC435C ADRP X0, 0x2334000
	0x01DC4360 LDR X0, [X0 + 0x160]
	0x01DC4364 BL 0x1C16D08
	0x01DC4368 MOV X1, X0
	0x01DC436C MOV X0, X19
	0x01DC4370 BL 0x1C16DEC
	0x01DC4374 LDR X0, [X0 + 0x18]
	0x01DC4378 RET
	0x01DC437C RET
	0x01DC4380 SUB X31, X31, 0x60
	0x01DC4384 STR D10, [X31 + 0x20]
	0x01DC4388 STP D9, D8, [X31 + 0x28]
	0x01DC438C STR X30, [X31 + 0x38]
	0x01DC4390 STP X22, X21, [X31 + 0x40]
	0x01DC4394 STP X20, X19, [X31 + 0x50]
	0x01DC4398 ADRP X20, 0x2614000
	0x01DC439C LDRB W8, [X20 + 0xB91]
	0x01DC43A0 MOV X19, X0
	0x01DC43A4 TBNZ X8, 0x0, 0x1DC4458
	0x01DC43A8 ADRP X0, 0x232F000
	0x01DC43AC LDR X0, [X0 + 0xB50]
	0x01DC43B0 BL 0x1C16CF4
	0x01DC43B4 ADRP X0, 0x232F000
	0x01DC43B8 LDR X0, [X0 + 0x710]
	0x01DC43BC BL 0x1C16CF4
	0x01DC43C0 ADRP X0, 0x232F000
	0x01DC43C4 LDR X0, [X0 + 0x718]
	0x01DC43C8 BL 0x1C16CF4
	0x01DC43CC ADRP X0, 0x232F000
	0x01DC43D0 LDR X0, [X0 + 0x720]
	0x01DC43D4 BL 0x1C16CF4
	0x01DC43D8 ADRP X0, 0x2331000
	0x01DC43DC LDR X0, [X0 + 0x7C8]
	0x01DC43E0 BL 0x1C16CF4
	0x01DC43E4 ADRP X0, 0x2334000
	0x01DC43E8 LDR X0, [X0 + 0x88]
	0x01DC43EC BL 0x1C16CF4
	0x01DC43F0 ADRP X0, 0x2334000
	0x01DC43F4 LDR X0, [X0 + 0xD8]
	0x01DC43F8 BL 0x1C16CF4
	0x01DC43FC ADRP X0, 0x2334000
	0x01DC4400 LDR X0, [X0 + 0x168]
	0x01DC4404 BL 0x1C16CF4
	0x01DC4408 ADRP X0, 0x2331000
	0x01DC440C LDR X0, [X0 + 0x310]
	0x01DC4410 BL 0x1C16CF4
	0x01DC4414 ADRP X0, 0x232F000
	0x01DC4418 LDR X0, [X0 + 0x5A0]
	0x01DC441C BL 0x1C16CF4
	0x01DC4420 ADRP X0, 0x2332000
	0x01DC4424 LDR X0, [X0 + 0xC30]
	0x01DC4428 BL 0x1C16CF4
	0x01DC442C ADRP X0, 0x2333000
	0x01DC4430 LDR X0, [X0 + 0x468]
	0x01DC4434 BL 0x1C16CF4
	0x01DC4438 ADRP X0, 0x2334000
	0x01DC443C LDR X0, [X0 + 0x170]
	0x01DC4440 BL 0x1C16CF4
	0x01DC4444 ADRP X0, 0x2334000
	0x01DC4448 LDR X0, [X0 + 0x178]
	0x01DC444C BL 0x1C16CF4
	0x01DC4450 MOVZ W8, 0x1
	0x01DC4454 STRB W8, [X20 + 0xB91]
	0x01DC4458 STP X31, X31, [X31 + 0x10]
	0x01DC445C LDR W8, [X19 + 0x10]
	0x01DC4460 CMP W8, 0x4
	0x01DC4464 B.HI 0x1DC48FC
	0x01DC4468 LDR X20, [X19 + 0x20]
	0x01DC446C ADRP X9, 0xFFFFFFFFFED69000
	0x01DC4470 ADD X9, X9, 0x92D
	0x01DC4474 ADR X10, 0x10
	0x01DC4478 LDRB W11, [X9, X8, LSL]
	0x01DC447C ADD X10, X10, X11, 0x2, LSL
	0x01DC4480 BR X10
	0x01DC4484 MOVN W8, 0x0
	0x01DC4488 STR W8, [X19 + 0x10]
	0x01DC448C CBZ X20, 0x1DC4A24
	0x01DC4490 MOVZ W21, 0x1
	0x01DC4494 STRB W21, [X20 + 0x8C]
	0x01DC4498 STR X31, [X19 + 0x18]
	0x01DC449C STR W21, [X19 + 0x10]
	0x01DC44A0 B 0x1DC49FC
	0x01DC44A4 MOVN W8, 0x0
	0x01DC44A8 STR W8, [X19 + 0x10]
	0x01DC44AC B 0x1DC44DC
	0x01DC44B0 MOVN W8, 0x0
	0x01DC44B4 STR W8, [X19 + 0x10]
	0x01DC44B8 ADRP X8, 0x2334000
	0x01DC44BC LDR X8, [X8 + 0x168]
	0x01DC44C0 LDR X0, [X8]
	0x01DC44C4 LDR W8, [X0 + 0xE0]
	0x01DC44C8 CBNZ W8, 0x1DC44D0
	0x01DC44CC BL 0x1C16DFC
	0x01DC44D0 MOV W0, W31
	0x01DC44D4 MOV X1, X31
	0x01DC44D8 BL 0x1E01A6C
	0x01DC44DC CBZ X20, 0x1DC4A1C
	0x01DC44E0 MOVZ W1, 0x64
	0x01DC44E4 MOV X0, X20
	0x01DC44E8 BL 0x1DC0744
	0x01DC44EC STRB W31, [X20 + 0x8C]
	0x01DC44F0 ADRP X19, 0x2331000
	0x01DC44F4 LDR X19, [X19 + 0x7C8]
	0x01DC44F8 LDR X0, [X19]
	0x01DC44FC LDR W8, [X0 + 0xE0]
	0x01DC4500 CBNZ W8, 0x1DC450C
	0x01DC4504 BL 0x1C16DFC
	0x01DC4508 LDR X0, [X19]
	0x01DC450C LDR X8, [X0 + 0xB8]
	0x01DC4510 LDR X8, [X8 + 0x20]
	0x01DC4514 CBZ X8, 0x1DC452C
	0x01DC4518 LDR X0, [X8 + 0x40]
	0x01DC451C LDR X9, [X8 + 0x18]
	0x01DC4520 LDR X2, [X8 + 0x28]
	0x01DC4524 MOV W1, W31
	0x01DC4528 BLR X9
	0x01DC452C LDR X0, [X20 + 0x38]
	0x01DC4530 CBZ X0, 0x1DC4A20
	0x01DC4534 FMOV S0, W31
	0x01DC4538 FMOV S1, W31
	0x01DC453C FMOV S2, W31
	0x01DC4540 MOV W1, W31
	0x01DC4544 BL 0x1DC4E6C
	0x01DC4548 ADRP X19, 0x2334000
	0x01DC454C LDR X19, [X19 + 0x88]
	0x01DC4550 LDR X8, [X19]
	0x01DC4554 LDR X8, [X8 + 0xB8]
	0x01DC4558 LDRB W8, [X8]
	0x01DC455C CBZ W8, 0x1DC4834
	0x01DC4560 ADRP X8, 0x2331000
	0x01DC4564 LDR X8, [X8 + 0x310]
	0x01DC4568 LDR X0, [X8]
	0x01DC456C LDR W8, [X0 + 0xE0]
	0x01DC4570 CBNZ W8, 0x1DC4578
	0x01DC4574 BL 0x1C16DFC
	0x01DC4578 ADD X1, X31, 0x18
	0x01DC457C MOV W0, W31
	0x01DC4580 MOV X2, X31
	0x01DC4584 BL 0x1DA6E5C
	0x01DC4588 LDR X8, [X19]
	0x01DC458C LDR X8, [X8 + 0xB8]
	0x01DC4590 LDR X19, [X8 + 0x8]
	0x01DC4594 TBZ X0, 0x0, 0x1DC48A0
	0x01DC4598 LDR X0, [X31 + 0x18]
	0x01DC459C CBZ X0, 0x1DC4A40
	0x01DC45A0 MOV X1, X31
	0x01DC45A4 BL 0x3C3F58C
	0x01DC45A8 LDR X0, [X31 + 0x18]
	0x01DC45AC CBZ X0, 0x1DC4A48
	0x01DC45B0 MOV V8.16B, V0.16B
	0x01DC45B4 MOV V9.16B, V1.16B
	0x01DC45B8 MOV V10.16B, V2.16B
	0x01DC45BC MOV X1, X31
	0x01DC45C0 BL 0x3C3DEB4
	0x01DC45C4 CBZ X19, 0x1DC4A4C
	0x01DC45C8 MOV V4.16B, V0.16B
	0x01DC45CC MOV V5.16B, V1.16B
	0x01DC45D0 MOV V6.16B, V2.16B
	0x01DC45D4 MOV V7.16B, V3.16B
	0x01DC45D8 MOV X0, X19
	0x01DC45DC MOV V0.16B, V8.16B
	0x01DC45E0 MOV V1.16B, V9.16B
	0x01DC45E4 MOV V2.16B, V10.16B
	0x01DC45E8 MOV V3.16B, V4.16B
	0x01DC45EC MOV V4.16B, V5.16B
	0x01DC45F0 MOV V5.16B, V6.16B
	0x01DC45F4 MOV V6.16B, V7.16B
	0x01DC45F8 MOV X1, X31
	0x01DC45FC BL 0x3C40000
	0x01DC4600 B 0x1DC48FC
	0x01DC4604 MOVN W8, 0x0
	0x01DC4608 STR W8, [X19 + 0x10]
	0x01DC460C ADRP X8, 0x2334000
	0x01DC4610 LDR X8, [X8 + 0x168]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X24
	012 Move [X31+104], X23
	013 Move [X31+112], X22
	014 Move [X31+120], X21
	015 Move [X31+128], X20
	016 Move [X31+136], X19
	017 Move X21, 0x2615000
	018 Move X24, 0x2330000
	019 Move W8, [X21+2955]
	020 Move X24, [X24+1432]
	021 Move W19, W2
	022 Move V12, V5
	023 Move V13, V4
	024 Move V14, V3
	025 Move V11, V2
	026 Move V9, V1
	027 Move V10, V0
	028 Move X22, X1
	029 Move X20, X0
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {48}
	034 Move X0, 0x2335000
	035 Move X0, [X0+288]
	036 Call 0x1C17CF4
	037 Move X0, 0x2330000
	038 Move X0, [X0+1432]
	039 Call 0x1C17CF4
	040 Move X0, 0x2332000
	041 Move X0, [X0+1992]
	042 Call 0x1C17CF4
	043 Move X0, 0x2335000
	044 Move X0, [X0+296]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X21+2955], W8
	048 Move X0, [X24]
	049 Move [X31+88], X31
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X22
	055 Move X1, X31
	056 Move X2, X31
	057 Call Object.op_Equality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {264}
	062 Move X23, 0x2332000
	063 Move X23, [X23+1992]
	064 Move X0, [X23]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {70}
	068 Call 0x1C17DFC
	069 Move X0, [X23]
	070 Move X8, [X0+184]
	071 Move X21, 0x2615000
	072 Move W9, [X21+1924]
	073 Move S15, [X8+80]
	074 Move S8, [X8+84]
	075 Compare W9, 0
	076 JumpIfNotEqual {82}
	077 Move X0, 0x2330000
	078 Move X0, [X0+1448]
	079 Call 0x1C17CF4
	080 Move W8, 1
	081 Move [X21+1924], W8
	082 Move [X31+12], S11
	083 Move X8, 0x2330000
	084 Move X8, [X8+1448]
	085 Move X0, [X8]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move S0, W31
	091 NotImplemented "Instruction FCMP not yet implemented."
	092 Move S11, W31
	093 Multiply S1, S14, S14
	094 Multiply S2, S13, S13
	095 Multiply S3, S12, S12
	096 Add S1, S1, S2
	097 Add S1, S3, S1
	098 NotImplemented "Instruction FSQRT not yet implemented."
	099 Subtract S1, S1, S15
	100 Subtract S2, S8, S15
	101 NotImplemented "Instruction FDIV not yet implemented."
	102 NotImplemented "Instruction FCMP not yet implemented."
	103 Move S11, W31
	104 Move S2, 1
	105 NotImplemented "Instruction FMIN not yet implemented."
	106 Move X8, [X23]
	107 NotImplemented "Instruction FMAX not yet implemented."
	108 Move W0, W19
	109 Move X8, [X8+184]
	110 Move S1, [X8+88]
	111 Move S2, [X8+92]
	112 Move X8, -19763200
	113 Subtract S2, S2, S1
	114 Multiply S0, S0, S2
	115 Add S0, S1, S0
	116 Move V1, [X8+188]
	117 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	118 Compare X22, 0
	119 JumpIfEqual {281}
	120 Move X8, 0x2335000
	121 Move X21, [X20+64]
	122 Move X8, [X8+288]
	123 Add X1, X31, 88
	124 Move X0, X22
	125 Move X2, [X8]
	126 Call 0x21A5990, X0, X1
	127 Move TEMP, X0
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfNotEqual {247}
	131 Move X8, [X31+88]
	132 Compare X8, 0
	133 JumpIfEqual {281}
	134 Move X0, [X24]
	135 Move X22, [X8+32]
	136 Move W9, [X0+224]
	137 Compare W9, 0
	138 JumpIfNotEqual {140}
	139 Call 0x1C17DFC
	140 Move X0, X22
	141 Move X1, X31
	142 Move X2, X31
	143 Call Object.op_Inequality, X0, X1
	144 Move TEMP, X0
	145 And TEMP, TEMP, 1
	146 Compare TEMP, 1
	147 JumpIfNotEqual {247}
	148 Move X8, [X31+88]
	149 Compare X8, 0
	150 JumpIfEqual {281}
	151 Move X8, [X8+32]
	152 Compare X8, 0
	153 JumpIfEqual {281}
	154 Move X0, [X24]
	155 Move X22, [X8+32]
	156 Move W9, [X0+224]
	157 Compare W9, 0
	158 JumpIfNotEqual {160}
	159 Call 0x1C17DFC
	160 Move X0, X22
	161 Move X1, X31
	162 Move X2, X31
	163 Call Object.op_Inequality, X0, X1
	164 Move X8, [X31+88]
	165 Move TEMP, X0
	166 And TEMP, TEMP, 1
	167 Compare TEMP, 1
	168 JumpIfNotEqual {175}
	169 Compare X8, 0
	170 JumpIfEqual {281}
	171 Move X9, [X8+32]
	172 Compare X9, 0
	173 JumpIfEqual {281}
	174 Move X21, [X9+32]
	175 Compare X8, 0
	176 JumpIfEqual {281}
	177 Move X9, [X8+32]
	178 Compare X9, 0
	179 JumpIfEqual {281}
	180 Move W22, [X9+40]
	181 Move X24, 0x2615000
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Move W9, [X24+1939]
	184 Compare W9, 0
	185 JumpIfNotEqual {194}
	186 Move X0, 0x2331000
	187 Move X0, [X0+1448]
	188 Call 0x1C17CF4
	189 Move X8, [X31+88]
	190 Move W9, 1
	191 Move [X24+1939], W9
	192 Compare X8, 0
	193 JumpIfEqual {281}
	194 Move X0, [X8+32]
	195 Compare X0, 0
	196 JumpIfEqual {281}
	197 Move X1, X31
	198 Call Object.get_name, X0
	199 Move X8, 0x2335000
	200 Move X8, [X8+296]
	201 Move X1, X0
	202 Move X2, X31
	203 Move X8, [X8]
	204 Move X0, X8
	205 Call String.Concat, X0, X1
	206 Move V2, [X31+12]
	207 Move X4, X0
	208 Move X0, X20
	209 Move W1, W22
	210 Move V0, V10
	211 Move V1, V9
	212 Move X2, X31
	213 Move X3, X31
	214 Call PlayerController.PlayerHitInternal, X0, X1, X2, X3, X4, X5, X6
	215 Move X8, [X31+88]
	216 Compare X8, 0
	217 JumpIfEqual {281}
	218 Move X8, [X8+32]
	219 Compare X8, 0
	220 JumpIfEqual {281}
	221 Move W9, [X8+44]
	222 Compare W9, 0
	223 JumpIfEqual {247}
	224 Move W9, [X24+1939]
	225 Move W20, [X8+45]
	226 Compare W9, 0
	227 JumpIfNotEqual {233}
	228 Move X0, 0x2331000
	229 Move X0, [X0+1448]
	230 Call 0x1C17CF4
	231 Move W8, 1
	232 Move [X24+1939], W8
	233 Move X8, 0x2331000
	234 Move X8, [X8+1448]
	235 Move V2, [X31+12]
	236 Move W0, W20
	237 Move V0, V10
	238 Move X8, [X8]
	239 Move V1, V9
	240 Move X1, X31
	241 Move X8, [X8+184]
	242 Move S3, [X8]
	243 Move S4, [X8+4]
	244 Move S5, [X8+8]
	245 Move S6, [X8+12]
	246 Call NetworkVFX.PlayVFX, X0, X1, X2
	247 Move X0, [X23]
	248 Move W8, [X0+224]
	249 Compare W8, 0
	250 JumpIfNotEqual {253}
	251 Call 0x1C17DFC
	252 Move X0, [X23]
	253 Move X8, [X0+184]
	254 Move X8, [X8+24]
	255 Compare X8, 0
	256 JumpIfEqual {264}
	257 Move X9, [X8+24]
	258 Move X0, [X8+64]
	259 Move X3, [X8+40]
	260 Move W1, W19
	261 Move X2, X21
	262 Move V0, V11
	263 NotImplemented "Instruction BLR not yet implemented."
	264 Move X20, [X31+128]
	265 Move X19, [X31+136]
	266 Move X22, [X31+112]
	267 Move X21, [X31+120]
	268 Move X24, [X31+96]
	269 Move X23, [X31+104]
	270 Move X30, [X31+80]
	271 Move D9, [X31+64]
	272 Move D8, [X31+72]
	273 Move D11, [X31+48]
	274 Move D10, [X31+56]
	275 Move D13, [X31+32]
	276 Move D12, [X31+40]
	277 Move D15, [X31+16]
	278 Move D14, [X31+24]
	279 Add X31, X31, 144
	280 Return 
	281 Call 0x1C17F20

Method: System.Void SanitizeFingerValues(System.Single[] fingerValues, System.Int32 startIndex, AnimalCompany.FingerUsage fingerUsage)

Disassembly:
	0x01DC46C8 CBZ X8, 0x1DC46E0
	0x01DC46CC LDR X0, [X8 + 0x40]
	0x01DC46D0 LDR X9, [X8 + 0x18]
	0x01DC46D4 LDR X2, [X8 + 0x28]
	0x01DC46D8 MOVZ W1, 0x1
	0x01DC46DC BLR X9
	0x01DC46E0 ADRP X8, 0x232F000
	0x01DC46E4 LDR X8, [X8 + 0x720]
	0x01DC46E8 LDR X0, [X8]
	0x01DC46EC BL 0x1C16F10
	0x01DC46F0 ADRP X8, 0x232F000
	0x01DC46F4 LDR X8, [X8 + 0x718]
	0x01DC46F8 MOV X21, X0
	0x01DC46FC LDR X1, [X8]
	0x01DC4700 BL 0x2AA4804
	0x01DC4704 CBZ X20, 0x1DC4A28
	0x01DC4708 MOV X0, X20
	0x01DC470C MOV X1, X31
	0x01DC4710 BL 0x3C32E90
	0x01DC4714 CBZ X0, 0x1DC4A2C
	0x01DC4718 MOV X1, X31
	0x01DC471C BL 0x3C3F58C
	0x01DC4720 ADRP X8, 0x232F000
	0x01DC4724 LDR X8, [X8 + 0x5A0]
	0x01DC4728 STP S0, S1, [X31]
	0x01DC472C STR S2, [X31 + 0x8]
	0x01DC4730 LDR X0, [X8]
	0x01DC4734 ADD X1, X31, 0x0
	0x01DC4738 BL 0x1C16E04
	0x01DC473C CBZ X21, 0x1DC4A30
	0x01DC4740 ADRP X8, 0x2333000

ISIL:
	001 Move [X31-16], X30
	002 Move TEMP, X3
	003 And TEMP, TEMP, 1
	004 Compare TEMP, 1
	005 JumpIfNotEqual {13}
	006 Compare X1, 0
	007 JumpIfEqual {39}
	008 Move W8, [X1+24]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Add X8, X1, W2
	011 Move W9, 0x3F800000
	012 Move [X8+32], W9
	013 Move TEMP, X3
	014 And TEMP, TEMP, 2
	015 Compare TEMP, 2
	016 JumpIfNotEqual {25}
	017 Compare X1, 0
	018 JumpIfEqual {39}
	019 Move W9, [X1+24]
	020 Add W8, W2, 1
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Add X8, X1, W8
	023 Move W9, 0x3F800000
	024 Move [X8+32], W9
	025 Move TEMP, X3
	026 And TEMP, TEMP, 4
	027 Compare TEMP, 4
	028 JumpIfNotEqual {37}
	029 Compare X1, 0
	030 JumpIfEqual {39}
	031 Move W9, [X1+24]
	032 Add W8, W2, 2
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Add X8, X1, W8
	035 Move W9, 0x3F800000
	036 Move [X8+32], W9
	037 Move X30, [X31+16]
	038 Return 
	039 Call 0x1C17F20
	040 Call 0x1C17F28

Method: System.Void HandleFingerValuesChanged(System.Single[] fingerValues)

Disassembly:
	0x01DC3FDC ADRP X22, 0x2335000
	0x01DC3FE0 LDR X25, [X25 + 0x148]
	0x01DC3FE4 LDR X23, [X23 + 0x138]
	0x01DC3FE8 LDR X22, [X22 + 0x140]
	0x01DC3FEC ADD X21, X19, 0x10C
	0x01DC3FF0 BL 0x1C16F10
	0x01DC3FF4 FMOV S0, 3
	0x01DC3FF8 MOV X1, X31
	0x01DC3FFC MOV X20, X0
	0x01DC4000 BL 0x3C3A634
	0x01DC4004 STR X20, [X19 + 0x90]
	0x01DC4008 ADRP X20, 0x2614000
	0x01DC400C LDRB W8, [X20 + 0x783]
	0x01DC4010 CBNZ W8, 0x1DC4028
	0x01DC4014 ADRP X0, 0x232F000
	0x01DC4018 LDR X0, [X0 + 0x5A0]
	0x01DC401C BL 0x1C16CF4
	0x01DC4020 MOVZ W8, 0x1
	0x01DC4024 STRB W8, [X20 + 0x783]
	0x01DC4028 ADRP X8, 0x232F000
	0x01DC402C LDR X8, [X8 + 0x5A0]
	0x01DC4030 LDR X8, [X8]
	0x01DC4034 LDR X8, [X8 + 0xB8]
	0x01DC4038 LDR V0, [X8]
	0x01DC403C LDR V1, [X8 + 0x8]
	0x01DC4040 MOVZ W8, 0xCCCD
	0x01DC4044 MOVK W8, 0x3DCC0000
	0x01DC4048 STR D0, [X19 + 0xA0]
	0x01DC404C STR S1, [X19 + 0xA8]
	0x01DC4050 STR W8, [X19 + 0xAC]
	0x01DC4054 LDR X0, [X24]
	0x01DC4058 BL 0x1C16F10
	0x01DC405C LDR X1, [X25]
	0x01DC4060 MOV X20, X0
	0x01DC4064 BL 0x2A47580
	0x01DC4068 STR X20, [X19 + 0xD0]
	0x01DC406C LDR X0, [X23]
	0x01DC4070 MOVZ W1, 0x1
	0x01DC4074 BL 0x1C16D6C
	0x01DC4078 ADRP X8, 0xFFFFFFFFFED29000
	0x01DC407C ADRP X9, 0xFFFFFFFFFED29000
	0x01DC4080 LDR V0, [X8 + 0x7]
	0x01DC4084 LDR V1, [X9 + 0xFF0]
	0x01DC4088 MOVZ W8, 0x3F000000
	0x01DC408C STR X0, [X19 + 0xF8]
	0x01DC4090 STR W8, [X19 + 0x100]
	0x01DC4094 STR V0, [X21]
	0x01DC4098 STR D1, [X21 + 0x10]
	0x01DC409C LDR X0, [X22]
	0x01DC40A0 MOVZ W1, 0xC
	0x01DC40A4 BL 0x1C16D6C
	0x01DC40A8 CBZ X0, 0x1DC41C0
	0x01DC40AC LDR W8, [X0 + 0x18]
	0x01DC40B0 CBZ W8, 0x1DC41BC
	0x01DC40B4 ADRP X9, 0xFFFFFFFFFED29000
	0x01DC40B8 LDR V0, [X9 + 0x8]
	0x01DC40BC CMP W8, 0x1
	0x01DC40C0 STR V0, [X0 + 0x2]
	0x01DC40C4 B.EQ 0x1DC41BC
	0x01DC40C8 ADRP X9, 0xFFFFFFFFFED28000
	0x01DC40CC LDR V0, [X9 + 0xF3]
	0x01DC40D0 CMP W8, 0x2
	0x01DC40D4 STR V0, [X0 + 0x3]
	0x01DC40D8 B.LS 0x1DC41BC
	0x01DC40DC ADRP X9, 0xFFFFFFFFFED26000
	0x01DC40E0 LDR V0, [X9 + 0xBC]
	0x01DC40E4 CMP W8, 0x3
	0x01DC40E8 STR V0, [X0 + 0x4]
	0x01DC40EC B.EQ 0x1DC41BC
	0x01DC40F0 ADRP X9, 0xFFFFFFFFFED27000
	0x01DC40F4 LDR V0, [X9 + 0xD5]
	0x01DC40F8 CMP W8, 0x4
	0x01DC40FC STR V0, [X0 + 0x5]
	0x01DC4100 B.LS 0x1DC41BC
	0x01DC4104 ADRP X9, 0xFFFFFFFFFED26000
	0x01DC4108 LDR V0, [X9 + 0x60]
	0x01DC410C CMP W8, 0x5
	0x01DC4110 STR V0, [X0 + 0x6]
	0x01DC4114 B.EQ 0x1DC41BC
	0x01DC4118 ADRP X9, 0xFFFFFFFFFED26000
	0x01DC411C LDR V0, [X9 + 0xBD]
	0x01DC4120 CMP W8, 0x6
	0x01DC4124 STR V0, [X0 + 0x7]
	0x01DC4128 B.LS 0x1DC41BC
	0x01DC412C ADRP X9, 0xFFFFFFFFFED26000
	0x01DC4130 LDR V0, [X9 + 0x61]
	0x01DC4134 CMP W8, 0x7
	0x01DC4138 STR V0, [X0 + 0x8]
	0x01DC413C B.EQ 0x1DC41BC
	0x01DC4140 ADRP X9, 0xFFFFFFFFFED28000
	0x01DC4144 LDR V0, [X9 + 0x78]
	0x01DC4148 CMP W8, 0x8
	0x01DC414C STR V0, [X0 + 0x9]
	0x01DC4150 B.LS 0x1DC41BC
	0x01DC4154 ADRP X9, 0xFFFFFFFFFED28000
	0x01DC4158 LDR V0, [X9 + 0xBC]
	0x01DC415C CMP W8, 0x9
	0x01DC4160 STR V0, [X0 + 0xA]
	0x01DC4164 B.EQ 0x1DC41BC
	0x01DC4168 ADRP X9, 0xFFFFFFFFFED28000
	0x01DC416C LDR V0, [X9 + 0x39]
	0x01DC4170 CMP W8, 0xA
	0x01DC4174 STR V0, [X0 + 0xB]
	0x01DC4178 B.LS 0x1DC41BC
	0x01DC417C ADRP X9, 0xFFFFFFFFFED29000
	0x01DC4180 LDR V0, [X9 + 0x23]
	0x01DC4184 CMP W8, 0xB
	0x01DC4188 STR V0, [X0 + 0xC]
	0x01DC418C B.EQ 0x1DC41BC
	0x01DC4190 ADRP X8, 0xFFFFFFFFFED27000
	0x01DC4194 LDR V0, [X8 + 0x5C]
	0x01DC4198 LDP X22, X21, [X31 + 0x20]
	0x01DC419C LDP X24, X23, [X31 + 0x10]
	0x01DC41A0 MOV X1, X31
	0x01DC41A4 STR V0, [X0 + 0xD]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2616000
	006 Move W8, [X21+2956]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2333000
	014 Move X0, [X0+1992]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2956], W8
	018 Move X1, [X20+232]
	019 Compare X1, 0
	020 JumpIfEqual {130}
	021 Move W2, [X1+24]
	022 Move X0, X19
	023 Move X3, X31
	024 Call Array.Copy, X0, X1, X2
	025 Move W3, [X20+240]
	026 Compare W3, 0
	027 JumpIfEqual {31}
	028 Move X1, X19
	029 Move W2, W31
	030 Call PlayerController.SanitizeFingerValues, X0, X1, X2, X3
	031 Move W3, [X20+244]
	032 Compare W3, 0
	033 JumpIfEqual {37}
	034 Move W2, 3
	035 Move X1, X19
	036 Call PlayerController.SanitizeFingerValues, X0, X1, X2, X3
	037 Compare X19, 0
	038 JumpIfEqual {130}
	039 Move W8, [X19+24]
	040 Compare W8, 0
	041 JumpIfEqual {129}
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, [X20+56]
	045 Compare X0, 0
	046 JumpIfEqual {130}
	047 Move S0, [X19+32]
	048 Move S1, [X19+36]
	049 Move V2, [X19+40]
	050 Move W1, W31
	051 Call PlayerView.SetFingerValues, X0, X1, V0, V1, V2
	052 Move W8, [X19+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X0, [X20+56]
	057 Compare X0, 0
	058 JumpIfEqual {130}
	059 Move S0, [X19+44]
	060 Move S1, [X19+48]
	061 Move V2, [X19+52]
	062 Move W1, 1
	063 Call PlayerView.SetFingerValues, X0, X1, V0, V1, V2
	064 Move W8, [X19+24]
	065 Compare W8, 0
	066 JumpIfEqual {129}
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X0, [X20+328]
	070 Compare X0, 0
	071 JumpIfEqual {130}
	072 Move S0, [X19+32]
	073 Move S1, [X19+36]
	074 Move V2, [X19+40]
	075 Move S3, 0.5
	076 Move X4, X31
	077 NotImplemented "Instruction FCMP not yet implemented."
	078 NotImplemented "Instruction CSET not yet implemented."
	079 NotImplemented "Instruction FCMP not yet implemented."
	080 NotImplemented "Instruction CSET not yet implemented."
	081 NotImplemented "Instruction FCMP not yet implemented."
	082 NotImplemented "Instruction CSET not yet implemented."
	083 Call HandController.SetFingersExtended, X0, X1, X2, X3
	084 Move W8, [X19+24]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X0, [X20+336]
	089 Compare X0, 0
	090 JumpIfEqual {130}
	091 Move X20, 0x2332000
	092 Move X20, [X20+1992]
	093 Move S0, [X19+44]
	094 Move S1, [X19+48]
	095 Move V2, [X19+52]
	096 Move S3, 0.5
	097 Move X4, X31
	098 NotImplemented "Instruction FCMP not yet implemented."
	099 NotImplemented "Instruction CSET not yet implemented."
	100 NotImplemented "Instruction FCMP not yet implemented."
	101 NotImplemented "Instruction CSET not yet implemented."
	102 NotImplemented "Instruction FCMP not yet implemented."
	103 NotImplemented "Instruction CSET not yet implemented."
	104 Call HandController.SetFingersExtended, X0, X1, X2, X3
	105 Move X0, [X20]
	106 Move W8, [X0+224]
	107 Compare W8, 0
	108 JumpIfNotEqual {111}
	109 Call 0x1C17DFC
	110 Move X0, [X20]
	111 Move X8, [X0+184]
	112 Move X8, [X8+72]
	113 Compare X8, 0
	114 JumpIfEqual {124}
	115 Move X3, [X8+24]
	116 Move X0, [X8+64]
	117 Move X2, [X8+40]
	118 Move X1, X19
	119 Move X20, [X31+16]
	120 Move X19, [X31+24]
	121 Move X30, [X31+32]
	122 Move X21, [X31+40]
	123 CallNoReturn X3
	124 Move X20, [X31+16]
	125 Move X19, [X31+24]
	126 Move X30, [X31+32]
	127 Move X21, [X31+40]
	128 Return 
	129 Call 0x1C17F28
	130 Call 0x1C17F20

Method: System.Void UpdateSnapTurn()

Disassembly:
	0x01DC2474 STR X19, [X20 + 0x20]
	0x01DC2478 MOV X0, X20
	0x01DC247C LDP X20, X19, [X31 + 0x10]
	0x01DC2480 LDP X30, X21, [X31], #0x20
	0x01DC2484 RET
	0x01DC2488 STR X30, [X31 - 0x20]!
	0x01DC248C STP X20, X19, [X31 + 0x10]
	0x01DC2490 MOV W19, W1
	0x01DC2494 MOV X1, X31
	0x01DC2498 MOV X20, X0
	0x01DC249C BL 0x33BDD8C
	0x01DC24A0 STR W19, [X20 + 0x10]
	0x01DC24A4 LDP X20, X19, [X31 + 0x10]
	0x01DC24A8 LDR X30, [X31], #0x20
	0x01DC24AC RET
	0x01DC24B0 STR X30, [X31 - 0x20]!
	0x01DC24B4 STP X20, X19, [X31 + 0x10]
	0x01DC24B8 MOV W19, W1
	0x01DC24BC MOV X1, X31
	0x01DC24C0 MOV X20, X0
	0x01DC24C4 BL 0x33BDD8C
	0x01DC24C8 STR W19, [X20 + 0x10]
	0x01DC24CC LDP X20, X19, [X31 + 0x10]
	0x01DC24D0 LDR X30, [X31], #0x20
	0x01DC24D4 RET
	0x01DC24D8 STR D10, [X31 - 0x40]!
	0x01DC24DC STP D9, D8, [X31 + 0x10]
	0x01DC24E0 STP X30, X21, [X31 + 0x20]
	0x01DC24E4 STP X20, X19, [X31 + 0x30]
	0x01DC24E8 CBZ X1, 0x1DC2550
	0x01DC24EC MOV X21, X1
	0x01DC24F0 MOV X20, X0
	0x01DC24F4 MOV X0, X1
	0x01DC24F8 MOV X1, X31
	0x01DC24FC MOV W19, W2
	0x01DC2500 BL 0x3C3F58C
	0x01DC2504 MOV X0, X21
	0x01DC2508 MOV X1, X31
	0x01DC250C MOV V8.16B, V0.16B
	0x01DC2510 MOV V9.16B, V1.16B
	0x01DC2514 MOV V10.16B, V2.16B
	0x01DC2518 BL 0x3C3FA04
	0x01DC251C MOV V3.16B, V0.16B
	0x01DC2520 MOV V4.16B, V1.16B
	0x01DC2524 AND W1, W19, 0x1

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2617000
	007 Move X20, 0x2334000
	008 Move W8, [X21+2957]
	009 Move X20, [X20+1992]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2334000
	016 Move X0, [X0+1992]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+2957], W8
	020 Move X0, [X20]
	021 Add X20, X19, 312
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move W0, W31
	027 Move X1, X20
	028 Call PlayerController.<UpdateSnapTurn>g__CheckToTurn|133_0, X0, X1
	029 Move S1, W31
	030 Add X1, X19, 320
	031 Move W0, 1
	032 Add S8, S0, S1
	033 Call PlayerController.<UpdateSnapTurn>g__CheckToTurn|133_0, X0, X1
	034 Add S0, S8, S0
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 Move X0, [X19+32]
	037 Compare X0, 0
	038 JumpIfEqual {56}
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+16]
	042 Move X21, [X31+24]
	043 Move W8, 0x42B40000
	044 Move S1, W8
	045 Multiply S0, S0, S1
	046 Move X1, X31
	047 Move V8, [X31+48]
	048 Call Player.Turn, X0, V0
	049 Return 
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X30, [X31+16]
	053 Move X21, [X31+24]
	054 Move V8, [X31+48]
	055 Return 
	056 Call 0x1C17F20

Method: System.Void OnNetworkInput(Fusion.NetworkInput input)

Disassembly:
	0x01DC48A4 LDR V9, [X20 + 0x110]
	0x01DC48A8 LDR V10, [X20 + 0x114]
	0x01DC48AC LDR V0, [X20 + 0x118]
	0x01DC48B0 LDR V1, [X20 + 0x11C]
	0x01DC48B4 LDR V2, [X20 + 0x120]
	0x01DC48B8 MOV X0, X31
	0x01DC48BC BL 0x3C2A8C4
	0x01DC48C0 CBZ X19, 0x1DC4A44
	0x01DC48C4 MOV V4.16B, V0.16B
	0x01DC48C8 MOV V5.16B, V1.16B
	0x01DC48CC MOV V6.16B, V2.16B
	0x01DC48D0 MOV V7.16B, V3.16B
	0x01DC48D4 MOV X0, X19
	0x01DC48D8 MOV V0.16B, V8.16B
	0x01DC48DC MOV V1.16B, V9.16B
	0x01DC48E0 MOV V2.16B, V10.16B
	0x01DC48E4 MOV V3.16B, V4.16B
	0x01DC48E8 MOV V4.16B, V5.16B
	0x01DC48EC MOV V5.16B, V6.16B
	0x01DC48F0 MOV V6.16B, V7.16B
	0x01DC48F4 MOV X1, X31
	0x01DC48F8 BL 0x3C40000
	0x01DC48FC MOV W21, W31
	0x01DC4900 B 0x1DC49FC
	0x01DC4904 CBZ X20, 0x1DC4A50
	0x01DC4908 LDR X0, [X20 + 0x20]
	0x01DC490C CBZ X0, 0x1DC4A54
	0x01DC4910 MOV W1, W31
	0x01DC4914 MOV X2, X31
	0x01DC4918 BL 0x3C32410
	0x01DC491C ADRP X22, 0x2614000
	0x01DC4920 LDRB W8, [X22 + 0x783]
	0x01DC4924 LDR X21, [X20 + 0x30]
	0x01DC4928 CBNZ W8, 0x1DC4940
	0x01DC492C ADRP X0, 0x232F000
	0x01DC4930 LDR X0, [X0 + 0x5A0]
	0x01DC4934 BL 0x1C16CF4
	0x01DC4938 MOVZ W8, 0x1
	0x01DC493C STRB W8, [X22 + 0x783]
	0x01DC4940 CBZ X21, 0x1DC4A58
	0x01DC4944 ADRP X8, 0x232F000
	0x01DC4948 LDR X8, [X8 + 0x5A0]
	0x01DC494C LDR X8, [X8]
	0x01DC4950 LDR X8, [X8 + 0xB8]
	0x01DC4954 LDP S1, S2, [X8 + 0x4]
	0x01DC4958 LDR V0, [X8]
	0x01DC495C MOV X0, X21
	0x01DC4960 MOV X1, X31
	0x01DC4964 BL 0x3C8E908
	0x01DC4968 LDR X0, [X20 + 0x30]
	0x01DC496C CBZ X0, 0x1DC4A5C
	0x01DC4970 MOV W1, W31
	0x01DC4974 MOV X2, X31
	0x01DC4978 BL 0x3C8ECAC
	0x01DC497C ADRP X8, 0x2334000
	0x01DC4980 LDR X8, [X8 + 0x168]
	0x01DC4984 LDR X0, [X8]
	0x01DC4988 LDR W8, [X0 + 0xE0]
	0x01DC498C CBNZ W8, 0x1DC4994
	0x01DC4990 BL 0x1C16DFC
	0x01DC4994 MOVZ W0, 0x1
	0x01DC4998 MOV X1, X31
	0x01DC499C BL 0x1E01A6C
	0x01DC49A0 ADRP X8, 0x2332000
	0x01DC49A4 LDR X8, [X8 + 0xC30]
	0x01DC49A8 LDR X0, [X8]
	0x01DC49AC BL 0x1C16F10
	0x01DC49B0 FMOV S0, 8
	0x01DC49B4 MOV X1, X31
	0x01DC49B8 MOV X20, X0
	0x01DC49BC BL 0x3C3A634
	0x01DC49C0 MOVZ W8, 0x3
	0x01DC49C4 STR X20, [X19 + 0x18]
	0x01DC49C8 STR W8, [X19 + 0x10]
	0x01DC49CC MOVZ W21, 0x1
	0x01DC49D0 B 0x1DC49FC
	0x01DC49D4 LDR V0, [X20 + 0x10C]
	0x01DC49D8 LDR V1, [X20 + 0x110]
	0x01DC49DC LDR V2, [X20 + 0x114]
	0x01DC49E0 LDR V3, [X20 + 0x118]
	0x01DC49E4 LDR V4, [X20 + 0x11C]
	0x01DC49E8 LDR V5, [X20 + 0x120]
	0x01DC49EC MOV X0, X20
	0x01DC49F0 MOV W1, W31
	0x01DC49F4 BL 0x1DC2554
	0x01DC49F8 MOV W21, W31
	0x01DC49FC MOV W0, W21
	0x01DC4A00 LDP X20, X19, [X31 + 0x50]
	0x01DC4A04 LDP X22, X21, [X31 + 0x40]
	0x01DC4A08 LDR X30, [X31 + 0x38]
	0x01DC4A0C LDP D9, D8, [X31 + 0x28]
	0x01DC4A10 LDR V10, [X31 + 0x20]
	0x01DC4A14 ADD X31, X31, 0x60
	0x01DC4A18 RET
	0x01DC4A1C BL 0x1C16F20
	0x01DC4A20 BL 0x1C16F20
	0x01DC4A24 BL 0x1C16F20
	0x01DC4A28 BL 0x1C16F20
	0x01DC4A2C BL 0x1C16F20
	0x01DC4A30 BL 0x1C16F20
	0x01DC4A34 BL 0x1C16F20
	0x01DC4A38 BL 0x1C16F20
	0x01DC4A3C BL 0x1C16F20
	0x01DC4A40 BL 0x1C16F20
	0x01DC4A44 BL 0x1C16F20
	0x01DC4A48 BL 0x1C16F20
	0x01DC4A4C BL 0x1C16F20
	0x01DC4A50 BL 0x1C16F20
	0x01DC4A54 BL 0x1C16F20
	0x01DC4A58 BL 0x1C16F20
	0x01DC4A5C BL 0x1C16F20
	0x01DC4A60 B 0x1DC4AAC
	0x01DC4A64 B 0x1DC4D0C
	0x01DC4A68 B 0x1DC4D0C
	0x01DC4A6C B 0x1DC4AAC
	0x01DC4A70 B 0x1DC4D0C
	0x01DC4A74 B 0x1DC4D0C
	0x01DC4A78 B 0x1DC4D0C
	0x01DC4A7C B 0x1DC4D0C
	0x01DC4A80 B 0x1DC4D0C
	0x01DC4A84 B 0x1DC4D0C
	0x01DC4A88 B 0x1DC4AAC
	0x01DC4A8C B 0x1DC4D0C
	0x01DC4A90 B 0x1DC4AAC
	0x01DC4A94 B 0x1DC4C48
	0x01DC4A98 B 0x1DC4C48
	0x01DC4A9C B 0x1DC4C48
	0x01DC4AA0 B 0x1DC4D0C
	0x01DC4AA4 B 0x1DC4D0C
	0x01DC4AA8 B 0x1DC4D0C
	0x01DC4AAC MOV X21, X0
	0x01DC4AB0 CMP W1, 0x1
	0x01DC4AB4 B.NE 0x1DC4DC4
	0x01DC4AB8 MOV X0, X21
	0x01DC4ABC BL 0x3EB1AD0
	0x01DC4AC0 MOV X20, X0
	0x01DC4AC4 ADRP X0, 0x232F000
	0x01DC4AC8 LDR X0, [X0 + 0x7D0]
	0x01DC4ACC BL 0x1C16D08
	0x01DC4AD0 LDR X8, [X20]
	0x01DC4AD4 LDR X1, [X8]
	0x01DC4AD8 BL 0x1C17270
	0x01DC4ADC TBZ X0, 0x0, 0x1DC4B3C
	0x01DC4AE0 LDR X20, [X20]
	0x01DC4AE4 BL 0x3EB1AE0
	0x01DC4AE8 ADRP X0, 0x232F000
	0x01DC4AEC LDR X0, [X0 + 0x788]
	0x01DC4AF0 BL 0x1C16D08
	0x01DC4AF4 LDR W8, [X0 + 0xE0]
	0x01DC4AF8 CBNZ W8, 0x1DC4B00
	0x01DC4AFC BL 0x1C16DFC
	0x01DC4B00 ADRP X0, 0x2334000
	0x01DC4B04 LDR X0, [X0 + 0x180]
	0x01DC4B08 BL 0x1C16D08
	0x01DC4B0C MOV X21, X0
	0x01DC4B10 ADRP X0, 0x2334000
	0x01DC4B14 LDR X0, [X0 + 0x188]
	0x01DC4B18 BL 0x1C16D08
	0x01DC4B1C MOV X3, X0
	0x01DC4B20 MOVZ W4, 0x1C0
	0x01DC4B24 MOV X0, X20
	0x01DC4B28 MOV X1, X31
	0x01DC4B2C MOV X2, X21
	0x01DC4B30 MOV X5, X31
	0x01DC4B34 BL 0x35C2488
	0x01DC4B38 B 0x1DC49A0
	0x01DC4B3C MOVZ W0, 0x8
	0x01DC4B40 BL 0x3EB1AF0
	0x01DC4B44 LDR X8, [X20]
	0x01DC4B48 STR X8, [X0]
	0x01DC4B4C ADRP X1, 0x20F0000
	0x01DC4B50 ADD X1, X1, 0xE58
	0x01DC4B54 MOV X2, X31
	0x01DC4B58 BL 0x3EB1B00
	0x01DC4B5C B 0x1DC4DBC
	0x01DC4B60 MOV X21, X0
	0x01DC4B64 BL 0x3EB1AE0
	0x01DC4B68 B 0x1DC4DC4
	0x01DC4B6C B 0x1DC4D0C
	0x01DC4B70 B 0x1DC4D0C
	0x01DC4B74 B 0x1DC4D0C
	0x01DC4B78 B 0x1DC4C48
	0x01DC4B7C B 0x1DC4C48
	0x01DC4B80 B 0x1DC4C48
	0x01DC4B84 B 0x1DC4C48
	0x01DC4B88 CMP W1, 0x1
	0x01DC4B8C MOV X21, X0
	0x01DC4B90 B.NE 0x1DC4DC4
	0x01DC4B94 MOV X0, X21
	0x01DC4B98 BL 0x3EB1AD0
	0x01DC4B9C MOV X20, X0
	0x01DC4BA0 ADRP X0, 0x232F000
	0x01DC4BA4 LDR X0, [X0 + 0x7D0]
	0x01DC4BA8 BL 0x1C16D08
	0x01DC4BAC LDR X8, [X20]
	0x01DC4BB0 LDR X1, [X8]
	0x01DC4BB4 BL 0x1C17270
	0x01DC4BB8 TBZ X0, 0x0, 0x1DC4C18
	0x01DC4BBC LDR X20, [X20]
	0x01DC4BC0 BL 0x3EB1AE0
	0x01DC4BC4 ADRP X0, 0x232F000
	0x01DC4BC8 LDR X0, [X0 + 0x788]
	0x01DC4BCC BL 0x1C16D08
	0x01DC4BD0 LDR W8, [X0 + 0xE0]
	0x01DC4BD4 CBNZ W8, 0x1DC4BDC
	0x01DC4BD8 BL 0x1C16DFC
	0x01DC4BDC ADRP X0, 0x2334000
	0x01DC4BE0 LDR X0, [X0 + 0x180]
	0x01DC4BE4 BL 0x1C16D08
	0x01DC4BE8 MOV X21, X0
	0x01DC4BEC ADRP X0, 0x2334000
	0x01DC4BF0 LDR X0, [X0 + 0x188]
	0x01DC4BF4 BL 0x1C16D08
	0x01DC4BF8 MOV X3, X0
	0x01DC4BFC MOVZ W4, 0x1CB
	0x01DC4C00 MOV X0, X20
	0x01DC4C04 MOV X1, X31
	0x01DC4C08 MOV X2, X21
	0x01DC4C0C MOV X5, X31
	0x01DC4C10 BL 0x35C2488
	0x01DC4C14 B 0x1DC466C
	0x01DC4C18 MOVZ W0, 0x8
	0x01DC4C1C BL 0x3EB1AF0
	0x01DC4C20 LDR X8, [X20]
	0x01DC4C24 STR X8, [X0]
	0x01DC4C28 ADRP X1, 0x20F0000
	0x01DC4C2C ADD X1, X1, 0xE58
	0x01DC4C30 MOV X2, X31
	0x01DC4C34 BL 0x3EB1B00
	0x01DC4C38 B 0x1DC4DBC
	0x01DC4C3C MOV X21, X0
	0x01DC4C40 BL 0x3EB1AE0
	0x01DC4C44 B 0x1DC4DC4
	0x01DC4C48 MOV X21, X0
	0x01DC4C4C CMP W1, 0x1
	0x01DC4C50 B.NE 0x1DC4DC4
	0x01DC4C54 MOV X0, X21
	0x01DC4C58 BL 0x3EB1AD0
	0x01DC4C5C MOV X21, X0
	0x01DC4C60 ADRP X0, 0x232F000
	0x01DC4C64 LDR X0, [X0 + 0x7D0]
	0x01DC4C68 BL 0x1C16D08
	0x01DC4C6C LDR X8, [X21]
	0x01DC4C70 LDR X1, [X8]
	0x01DC4C74 BL 0x1C17270
	0x01DC4C78 TBZ X0, 0x0, 0x1DC4CD8
	0x01DC4C7C LDR X21, [X21]
	0x01DC4C80 BL 0x3EB1AE0
	0x01DC4C84 ADRP X0, 0x232F000
	0x01DC4C88 LDR X0, [X0 + 0x788]
	0x01DC4C8C BL 0x1C16D08
	0x01DC4C90 LDR W8, [X0 + 0xE0]
	0x01DC4C94 CBNZ W8, 0x1DC4C9C
	0x01DC4C98 BL 0x1C16DFC
	0x01DC4C9C ADRP X0, 0x2334000
	0x01DC4CA0 LDR X0, [X0 + 0x180]
	0x01DC4CA4 BL 0x1C16D08
	0x01DC4CA8 MOV X22, X0
	0x01DC4CAC ADRP X0, 0x2334000
	0x01DC4CB0 LDR X0, [X0 + 0x188]
	0x01DC4CB4 BL 0x1C16D08
	0x01DC4CB8 MOV X3, X0
	0x01DC4CBC MOVZ W4, 0x1AA
	0x01DC4CC0 MOV X0, X21
	0x01DC4CC4 MOV X1, X31
	0x01DC4CC8 MOV X2, X22
	0x01DC4CCC MOV X5, X31
	0x01DC4CD0 BL 0x35C2488
	0x01DC4CD4 B 0x1DC47C4
	0x01DC4CD8 MOVZ W0, 0x8
	0x01DC4CDC BL 0x3EB1AF0
	0x01DC4CE0 LDR X8, [X21]
	0x01DC4CE4 STR X8, [X0]
	0x01DC4CE8 ADRP X1, 0x20F0000
	0x01DC4CEC ADD X1, X1, 0xE58
	0x01DC4CF0 MOV X2, X31
	0x01DC4CF4 BL 0x3EB1B00
	0x01DC4CF8 B 0x1DC4DBC
	0x01DC4CFC MOV X21, X0
	0x01DC4D00 BL 0x3EB1AE0
	0x01DC4D04 B 0x1DC4DC4
	0x01DC4D08 B 0x1DC4D0C
	0x01DC4D0C MOV X21, X0
	0x01DC4D10 CMP W1, 0x1
	0x01DC4D14 B.NE 0x1DC4DC4
	0x01DC4D18 MOV X0, X21
	0x01DC4D1C BL 0x3EB1AD0
	0x01DC4D20 MOV X19, X0
	0x01DC4D24 ADRP X0, 0x232F000
	0x01DC4D28 LDR X0, [X0 + 0x7D0]
	0x01DC4D2C BL 0x1C16D08
	0x01DC4D30 LDR X8, [X19]
	0x01DC4D34 LDR X1, [X8]
	0x01DC4D38 BL 0x1C17270
	0x01DC4D3C TBZ X0, 0x0, 0x1DC4D9C
	0x01DC4D40 LDR X19, [X19]
	0x01DC4D44 BL 0x3EB1AE0
	0x01DC4D48 ADRP X0, 0x232F000
	0x01DC4D4C LDR X0, [X0 + 0x788]
	0x01DC4D50 BL 0x1C16D08
	0x01DC4D54 LDR W8, [X0 + 0xE0]
	0x01DC4D58 CBNZ W8, 0x1DC4D60
	0x01DC4D5C BL 0x1C16DFC
	0x01DC4D60 ADRP X0, 0x2334000
	0x01DC4D64 LDR X0, [X0 + 0x180]
	0x01DC4D68 BL 0x1C16D08
	0x01DC4D6C MOV X20, X0
	0x01DC4D70 ADRP X0, 0x2334000
	0x01DC4D74 LDR X0, [X0 + 0x188]
	0x01DC4D78 BL 0x1C16D08
	0x01DC4D7C MOV X3, X0
	0x01DC4D80 MOVZ W4, 0x1F6
	0x01DC4D84 MOV X0, X19
	0x01DC4D88 MOV X1, X31
	0x01DC4D8C MOV X2, X20
	0x01DC4D90 MOV X5, X31
	0x01DC4D94 BL 0x35C2488
	0x01DC4D98 B 0x1DC48FC
	0x01DC4D9C MOVZ W0, 0x8
	0x01DC4DA0 BL 0x3EB1AF0
	0x01DC4DA4 LDR X8, [X19]
	0x01DC4DA8 STR X8, [X0]
	0x01DC4DAC ADRP X1, 0x20F0000
	0x01DC4DB0 ADD X1, X1, 0xE58
	0x01DC4DB4 MOV X2, X31
	0x01DC4DB8 BL 0x3EB1B00
	0x01DC4DBC MOV X21, X0
	0x01DC4DC0 BL 0x3EB1AE0
	0x01DC4DC4 MOV X0, X21
	0x01DC4DC8 BL 0x1D2C690
	0x01DC4DCC BL 0x1990590
	0x01DC4DD0 STR X30, [X31 - 0x30]!
	0x01DC4DD4 STP X22, X21, [X31 + 0x10]
	0x01DC4DD8 STP X20, X19, [X31 + 0x20]
	0x01DC4DDC ADRP X22, 0x2614000
	0x01DC4DE0 ADRP X21, 0x232F000
	0x01DC4DE4 LDRB W8, [X22 + 0xC14]
	0x01DC4DE8 LDR X21, [X21 + 0xB50]
	0x01DC4DEC MOV X20, X1
	0x01DC4DF0 MOV X19, X0
	0x01DC4DF4 TBNZ X8, 0x0, 0x1DC4E0C
	0x01DC4DF8 ADRP X0, 0x232F000
	0x01DC4DFC LDR X0, [X0 + 0xB50]
	0x01DC4E00 BL 0x1C16CF4
	0x01DC4E04 MOVZ W8, 0x1
	0x01DC4E08 STRB W8, [X22 + 0xC14]
	0x01DC4E0C LDR X0, [X21]
	0x01DC4E10 LDR W8, [X0 + 0xE0]
	0x01DC4E14 CBNZ W8, 0x1DC4E20
	0x01DC4E18 BL 0x1C16DFC
	0x01DC4E1C LDR X0, [X21]
	0x01DC4E20 LDR X8, [X0 + 0xB8]
	0x01DC4E24 LDRB W8, [X8]
	0x01DC4E28 CBZ W8, 0x1DC4E5C
	0x01DC4E2C LDR W8, [X0 + 0xE0]
	0x01DC4E30 CBNZ W8, 0x1DC4E38
	0x01DC4E34 BL 0x1C16DFC
	0x01DC4E38 MOV X0, X20
	0x01DC4E3C BL 0x1DD3990
	0x01DC4E40 MOV X1, X0
	0x01DC4E44 MOV X0, X19
	0x01DC4E48 LDP X20, X19, [X31 + 0x20]
	0x01DC4E4C LDP X22, X21, [X31 + 0x10]
	0x01DC4E50 MOV X2, X31
	0x01DC4E54 LDR X30, [X31], #0x30
	0x01DC4E58 B 0x31D79B4
	0x01DC4E5C LDP X20, X19, [X31 + 0x20]
	0x01DC4E60 LDP X22, X21, [X31 + 0x10]
	0x01DC4E64 LDR X30, [X31], #0x30
	0x01DC4E68 RET
	0x01DC4E6C STP D13, D12, [X31 - 0x70]!
	0x01DC4E70 STP D11, D10, [X31 + 0x10]
	0x01DC4E74 STP D9, D8, [X31 + 0x20]
	0x01DC4E78 STR X30, [X31 + 0x30]
	0x01DC4E7C STP X24, X23, [X31 + 0x40]
	0x01DC4E80 STP X22, X21, [X31 + 0x50]
	0x01DC4E84 STP X20, X19, [X31 + 0x60]
	0x01DC4E88 CBZ X0, 0x1DC50D4
	0x01DC4E8C AND W8, W1, 0x1
	0x01DC4E90 STR W8, [X0 + 0xE0]
	0x01DC4E94 ADRP X22, 0x232F000
	0x01DC4E98 LDR X22, [X22 + 0x5A0]
	0x01DC4E9C MOV V10.16B, V2.16B
	0x01DC4EA0 MOV V9.16B, V1.16B
	0x01DC4EA4 MOV V8.16B, V0.16B
	0x01DC4EA8 MOV W20, W1
	0x01DC4EAC MOV X19, X0
	0x01DC4EB0 ADRP X23, 0x2614000
	0x01DC4EB4 TBZ X1, 0x0, 0x1DC4F3C
	0x01DC4EB8 LDRB W8, [X23 + 0x783]

ISIL:
	001 Subtract X31, X31, 480
	002 Move [X31+368], D15
	003 Move [X31+376], D14
	004 Move [X31+384], D13
	005 Move [X31+392], D12
	006 Move [X31+400], D11
	007 Move [X31+408], D10
	008 Move [X31+416], D9
	009 Move [X31+424], D8
	010 Move [X31+432], X29
	011 Move [X31+448], X30
	012 Move [X31+456], X21
	013 Move [X31+464], X20
	014 Move [X31+472], X19
	015 NotImplemented "Instruction MRS not yet implemented."
	016 Move X8, [X20+40]
	017 Move X21, 0x2615000
	018 Move X19, X0
	019 Move [X31+360], X8
	020 Move W8, [X21+2958]
	021 Move [X31+176], X1
	022 Move [X31+184], X2
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {32}
	027 Move X0, 0x2335000
	028 Move X0, [X0+304]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+2958], W8
	032 Move X0, [X19+56]
	033 Compare X0, 0
	034 JumpIfEqual {494}
	035 Move W8, [X0+224]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move S28, W31
	038 Move [X31+148], S28
	039 Move S28, W31
	040 Move S0, W31
	041 Move [X31+144], S28
	042 Move S28, W31
	043 Move [X31+172], S0
	044 Move S0, W31
	045 Move [X31+140], S28
	046 Move S28, W31
	047 Move [X31+168], S0
	048 Move S0, W31
	049 Move [X31+136], S28
	050 Move S28, W31
	051 Move [X31+164], S0
	052 Move S0, W31
	053 Move [X31+156], S28
	054 Move S28, W31
	055 Move S4, W31
	056 Move S5, W31
	057 Move S6, W31
	058 Move S7, W31
	059 Move S16, W31
	060 Move S17, W31
	061 Move S18, W31
	062 Move S23, W31
	063 Move S24, W31
	064 Move S25, W31
	065 Move [X31+160], S0
	066 Move S19, W31
	067 Move S1, W31
	068 Move S0, W31
	069 Move S2, W31
	070 Move S3, W31
	071 Move S20, W31
	072 Move S21, W31
	073 Move S22, W31
	074 Move S26, W31
	075 Move S27, W31
	076 Move S15, W31
	077 Move S8, W31
	078 Move S9, W31
	079 Move S10, W31
	080 Move S11, W31
	081 Move S12, W31
	082 Move S13, W31
	083 Move [X31+152], S28
	084 Move S28, W31
	085 Move S29, W31
	086 Move S30, W31
	087 Move S31, W31
	088 Move S14, W31
	089 Compare W8, 0
	090 JumpIfNotEqual {418}
	091 Move X0, [X19+80]
	092 Compare X0, 0
	093 JumpIfEqual {494}
	094 Move X1, X31
	095 Call Transform.get_position, X0
	096 Move X0, [X19+80]
	097 Move [X31+128], S1
	098 Move [X31+136], S0
	099 Move [X31+124], S2
	100 Compare X0, 0
	101 JumpIfEqual {494}
	102 Move X1, X31
	103 Call Transform.get_forward, X0
	104 Move X21, 0x2615000
	105 Move W8, [X21+1925]
	106 Move V8, V0
	107 Move V9, V2
	108 Compare W8, 0
	109 JumpIfNotEqual {115}
	110 Move X0, 0x2330000
	111 Move X0, [X0+1448]
	112 Call 0x1C17CF4
	113 Move W8, 1
	114 Move [X21+1925], W8
	115 Move X8, 0x2330000
	116 Move X8, [X8+1448]
	117 Move X0, [X8]
	118 Move W8, [X0+224]
	119 Compare W8, 0
	120 JumpIfNotEqual {122}
	121 Call 0x1C17DFC
	122 Move X8, -19763200
	123 Multiply S0, S8, S8
	124 Move S1, W31
	125 Move V3, [X8+380]
	126 Add S0, S0, S1
	127 Multiply S2, S9, S9
	128 Add S0, S2, S0
	129 NotImplemented "Instruction FSQRT not yet implemented."
	130 NotImplemented "Instruction FCMP not yet implemented."
	131 NotImplemented "Instruction FDIV not yet implemented."
	132 NotImplemented "Instruction FDIV not yet implemented."
	133 NotImplemented "Instruction FDIV not yet implemented."
	134 Call PlayerView.get_ragdollHead, X0
	135 Compare X0, 0
	136 JumpIfEqual {494}
	137 Move X1, X31
	138 Call Transform.get_position, X0
	139 Move X0, [X19+56]
	140 Move [X31+128], S1
	141 Move [X31+136], S0
	142 Move [X31+124], S2
	143 Compare X0, 0
	144 JumpIfEqual {494}
	145 Call PlayerView.get_ragdollHead, X0
	146 Compare X0, 0
	147 JumpIfEqual {494}
	148 Move X1, X31
	149 Call Transform.get_rotation, X0
	150 Move X0, [X19+56]
	151 Move [X31+116], S1
	152 Move [X31+124], S0
	153 Move [X31+108], S3
	154 Move [X31+116], S2
	155 Compare X0, 0
	156 JumpIfEqual {494}
	157 Call PlayerView.get_ragdollHead, X0
	158 Compare X0, 0
	159 JumpIfEqual {494}
	160 Move X1, X31
	161 Call Transform.get_position, X0
	162 Move X0, [X19+56]
	163 Move [X31+100], S1
	164 Move [X31+108], S0
	165 Move [X31+96], S2
	166 Compare X0, 0
	167 JumpIfEqual {494}
	168 Call PlayerView.get_ragdollHead, X0
	169 Compare X0, 0
	170 JumpIfEqual {494}
	171 Move X1, X31
	172 Call Transform.get_rotation, X0
	173 Move X0, [X19+56]
	174 Move [X31+168], S1
	175 Move [X31+176], S0
	176 Move [X31+160], S3
	177 Move [X31+168], S2
	178 Compare X0, 0
	179 JumpIfEqual {494}
	180 Call PlayerView.get_ragdollHandRight, X0
	181 Compare X0, 0
	182 JumpIfEqual {494}
	183 Move X1, X31
	184 Call Transform.get_position, X0
	185 Move X0, [X19+56]
	186 Move [X31+152], S1
	187 Move [X31+160], S0
	188 Move [X31+92], S2
	189 Compare X0, 0
	190 JumpIfEqual {494}
	191 Call PlayerView.get_ragdollHandRight, X0
	192 Compare X0, 0
	193 JumpIfEqual {494}
	194 Move X1, X31
	195 Call Transform.get_rotation, X0
	196 Move X0, [X19+56]
	197 Move [X31+84], S1
	198 Move [X31+92], S0
	199 Move [X31+80], S2
	200 Compare X0, 0
	201 JumpIfEqual {494}
	202 Move V11, V3
	203 Call PlayerView.get_ragdollHandLeft, X0
	204 Compare X0, 0
	205 JumpIfEqual {494}
	206 Move X1, X31
	207 Call Transform.get_position, X0
	208 Move X0, [X19+56]
	209 Compare X0, 0
	210 JumpIfEqual {494}
	211 Move V14, V0
	212 Move V15, V1
	213 Move V8, V2
	214 Call PlayerView.get_ragdollHandLeft, X0
	215 Compare X0, 0
	216 JumpIfEqual {494}
	217 Move X1, X31
	218 Call Transform.get_rotation, X0
	219 Move X0, [X19+56]
	220 Compare X0, 0
	221 JumpIfEqual {494}
	222 Move V9, V0
	223 Move V10, V1
	224 Move V12, V2
	225 Move V13, V3
	226 Call PlayerView.get_ragdollHandRight, X0
	227 Compare X0, 0
	228 JumpIfEqual {494}
	229 Move X1, X31
	230 Call Transform.get_position, X0
	231 Move X0, [X19+56]
	232 Move [X31+64], S2
	233 Move [X31+72], S0
	234 Move [X31+76], S1
	235 Compare X0, 0
	236 JumpIfEqual {494}
	237 Call PlayerView.get_ragdollHandRight, X0
	238 Compare X0, 0
	239 JumpIfEqual {494}
	240 Move X1, X31
	241 Call Transform.get_rotation, X0
	242 Move X0, [X19+56]
	243 Move [X31+40], S1
	244 Move [X31+48], S0
	245 Move [X31+32], S3
	246 Move [X31+40], S2
	247 Compare X0, 0
	248 JumpIfEqual {494}
	249 Move [X31+72], S13
	250 Move [X31+48], S12
	251 Move [X31+56], S8
	252 Move [X31+64], S11
	253 Call PlayerView.get_ragdollHandLeft, X0
	254 Compare X0, 0
	255 JumpIfEqual {494}
	256 Move X1, X31
	257 Call Transform.get_position, X0
	258 Move X0, [X19+56]
	259 Compare X0, 0
	260 JumpIfEqual {494}
	261 Move [X31+8], S2
	262 Move [X31+16], S1
	263 Move [X31+16], S0
	264 Move [X31+24], S10
	265 Move [X31+52], S9
	266 Move [X31+24], S15
	267 Move [X31+32], S14
	268 Call PlayerView.get_ragdollHandLeft, X0
	269 Compare X0, 0
	270 JumpIfNotEqual {380}
	271 Move X21, 0x2615000
	272 Move W8, [X21+1923]
	273 Compare W8, 0
	274 JumpIfNotEqual {280}
	275 Move X0, 0x2330000
	276 Move X0, [X0+1440]
	277 Call 0x1C17CF4
	278 Move W8, 1
	279 Move [X21+1923], W8
	280 Move X8, 0x2330000
	281 Move X8, [X8+1440]
	282 Move X8, [X8]
	283 Move X8, [X8+184]
	284 Move S0, [X8]
	285 Move S1, [X8+4]
	286 Move V2, [X8+8]
	287 Move X0, X31
	288 Call Quaternion.LookRotation, X0
	289 Move X0, [X19+88]
	290 Move [X31+116], S1
	291 Move [X31+124], S0
	292 Move [X31+108], S3
	293 Move [X31+116], S2
	294 Compare X0, 0
	295 JumpIfEqual {494}
	296 Move X1, X31
	297 Call Transform.get_position, X0
	298 Move X0, [X19+88]
	299 Move [X31+100], S1
	300 Move [X31+108], S0
	301 Move [X31+96], S2
	302 Compare X0, 0
	303 JumpIfEqual {494}
	304 Move X1, X31
	305 Call Transform.get_rotation, X0
	306 Move X0, [X19+120]
	307 Move [X31+168], S1
	308 Move [X31+176], S0
	309 Move [X31+160], S3
	310 Move [X31+168], S2
	311 Compare X0, 0
	312 JumpIfEqual {494}
	313 Move X1, X31
	314 Call Transform.get_position, X0
	315 Move X0, [X19+120]
	316 Move [X31+152], S1
	317 Move [X31+160], S0
	318 Move [X31+92], S2
	319 Compare X0, 0
	320 JumpIfEqual {494}
	321 Move X1, X31
	322 Call Transform.get_rotation, X0
	323 Move X0, [X19+112]
	324 Move [X31+84], S1
	325 Move [X31+92], S0
	326 Move [X31+80], S2
	327 Compare X0, 0
	328 JumpIfEqual {494}
	329 Move X1, X31
	330 Move V8, V3
	331 Call Transform.get_position, X0
	332 Move X0, [X19+112]
	333 Compare X0, 0
	334 JumpIfEqual {494}
	335 Move X1, X31
	336 Move V11, V0
	337 Move V12, V1
	338 Move V9, V2
	339 Call Transform.get_rotation, X0
	340 Move X0, [X19+104]
	341 Move [X31+52], S0
	342 Move [X31+72], S3
	343 Compare X0, 0
	344 JumpIfEqual {494}
	345 Move X1, X31
	346 Move V10, V1
	347 Move V13, V2
	348 Call Transform.get_position, X0
	349 Move X0, [X19+120]
	350 Move [X31+76], S1
	351 Compare X0, 0
	352 JumpIfEqual {494}
	353 Move X1, X31
	354 Move V14, V0
	355 Move V15, V2
	356 Move [X31+48], S13
	357 Move [X31+56], S9
	358 Move [X31+64], S8
	359 Call Transform.get_rotation, X0
	360 Move X0, [X19+96]
	361 Compare X0, 0
	362 JumpIfEqual {494}
	363 Move X1, X31
	364 Move [X31+32], S3
	365 Move [X31+40], S2
	366 Move [X31+40], S1
	367 Move [X31+48], S0
	368 Move [X31+64], S15
	369 Move [X31+72], S14
	370 Move [X31+20], S10
	371 Move [X31+28], S12
	372 Move [X31+28], S11
	373 Call Transform.get_position, X0
	374 Move X0, [X19+112]
	375 Move [X31+12], S1
	376 Move [X31+20], S0
	377 Move [X31+8], S2
	378 Compare X0, 0
	379 JumpIfEqual {494}
	380 Move X1, X31
	381 Call Transform.get_rotation, X0
	382 Move [X31+144], S1
	383 Move [X31+152], S0
	384 Move [X31+136], S3
	385 Move [X31+144], S2
	386 Move S5, [X31+128]
	387 Move S4, [X31+132]
	388 Move S7, [X31+120]
	389 Move S6, [X31+124]
	390 Move S17, [X31+112]
	391 Move S16, [X31+116]
	392 Move S23, [X31+104]
	393 Move S18, [X31+108]
	394 Move S25, [X31+96]
	395 Move S24, [X31+100]
	396 Move S29, [X31+88]
	397 Move S28, [X31+92]
	398 Move S31, [X31+80]
	399 Move S30, [X31+84]
	400 Move S9, [X31+56]
	401 Move S14, [X31+60]
	402 Move S8, [X31+24]
	403 Move S15, [X31+28]
	404 Move S12, [X31+48]
	405 Move S10, [X31+52]
	406 Move S22, [X31+16]
	407 Move S11, [X31+20]
	408 Move S19, [X31+68]
	409 Move S13, [X31+72]
	410 Move V0, [X31+64]
	411 Move V1, [X31+76]
	412 Move S3, [X31+40]
	413 Move S2, [X31+44]
	414 Move S21, [X31+32]
	415 Move S20, [X31+36]
	416 Move S27, [X31+8]
	417 Move S26, [X31+12]
	418 Move [X31+192], S4
	419 Move [X31+200], S5
	420 Move [X31+200], S6
	421 Move [X31+208], S7
	422 Move [X31+208], S16
	423 Move [X31+216], S17
	424 Move [X31+216], S18
	425 Move [X31+224], S23
	426 Move [X31+224], S24
	427 Move [X31+232], S25
	428 Move X8, 0x2335000
	429 Move X8, [X8+304]
	430 Move [X31+252], S1
	431 Move [X31+260], S0
	432 Move V0, [X31+148]
	433 Move V4, [X31+172]
	434 Move X2, [X8]
	435 Add X0, X31, 176
	436 Move [X31+288], S0
	437 Move V0, [X31+144]
	438 Move [X31+232], S4
	439 Move V4, [X31+168]
	440 Add X1, X31, 192
	441 Move [X31+292], S0
	442 Move V0, [X31+140]
	443 Move [X31+236], S4
	444 Move V4, [X31+164]
	445 Move [X31+260], S2
	446 Move [X31+296], S0
	447 Move V0, [X31+136]
	448 Move [X31+240], S4
	449 Move V4, [X31+160]
	450 Move [X31+264], S3
	451 Move [X31+300], S0
	452 Move V0, [X31+156]
	453 Move [X31+244], S4
	454 Move [X31+252], S19
	455 Move [X31+268], S20
	456 Move [X31+272], S21
	457 Move [X31+332], S0
	458 Move V0, [X31+152]
	459 Move [X31+276], S22
	460 Move [X31+280], S26
	461 Move [X31+284], S27
	462 Move [X31+304], S15
	463 Move [X31+308], S8
	464 Move [X31+312], S9
	465 Move [X31+316], S10
	466 Move [X31+320], S11
	467 Move [X31+324], S12
	468 Move [X31+328], S13
	469 Move [X31+336], S0
	470 Move [X31+340], S28
	471 Move [X31+344], S29
	472 Move [X31+348], S30
	473 Move [X31+352], S31
	474 Move [X31+356], S14
	475 Call 0x222B4A4, X0, X1
	476 Move X8, [X20+40]
	477 Move X9, [X31+360]
	478 NotImplemented "Instruction CMP not yet implemented."
	479 Move X20, [X31+464]
	480 Move X19, [X31+472]
	481 Move X30, [X31+448]
	482 Move X21, [X31+456]
	483 Move X29, [X31+432]
	484 Move D9, [X31+416]
	485 Move D8, [X31+424]
	486 Move D11, [X31+400]
	487 Move D10, [X31+408]
	488 Move D13, [X31+384]
	489 Move D12, [X31+392]
	490 Move D15, [X31+368]
	491 Move D14, [X31+376]
	492 Add X31, X31, 480
	493 Return 
	494 Call 0x1C17F20
	495 Call 0x3EB2B20

Method: System.Void .ctor()

Disassembly:
	0x01DC4F54 STR S1, [X19 + 0x114]
	0x01DC4F58 STR S2, [X19 + 0x118]
	0x01DC4F5C CBZ X0, 0x1DC50D4
	0x01DC4F60 MOV X1, X31
	0x01DC4F64 BL 0x3C3F58C
	0x01DC4F68 STR S0, [X19 + 0x11C]
	0x01DC4F6C STR S1, [X19 + 0x120]
	0x01DC4F70 STR S2, [X19 + 0x124]
	0x01DC4F74 LDRB W8, [X23 + 0x783]
	0x01DC4F78 CBNZ W8, 0x1DC4F90
	0x01DC4F7C ADRP X0, 0x232F000
	0x01DC4F80 LDR X0, [X0 + 0x5A0]
	0x01DC4F84 BL 0x1C16CF4
	0x01DC4F88 MOVZ W8, 0x1
	0x01DC4F8C STRB W8, [X23 + 0x783]
	0x01DC4F90 LDR X8, [X22]
	0x01DC4F94 LDR X9, [X8 + 0xB8]
	0x01DC4F98 LDR V0, [X9]
	0x01DC4F9C LDR V1, [X9 + 0x8]
	0x01DC4FA0 STR D0, [X19 + 0xF8]
	0x01DC4FA4 STR S1, [X19 + 0x100]
	0x01DC4FA8 LDR X8, [X8 + 0xB8]
	0x01DC4FAC LDR V0, [X8]
	0x01DC4FB0 LDR V1, [X8 + 0x8]
	0x01DC4FB4 ADD X8, X19, 0x104
	0x01DC4FB8 STR D0, [X8]
	0x01DC4FBC STR S1, [X8 + 0x8]
	0x01DC4FC0 LDR X8, [X19 + 0xF0]
	0x01DC4FC4 CBZ X8, 0x1DC50D4
	0x01DC4FC8 LDR W9, [X8 + 0x18]
	0x01DC4FCC CBZ W9, 0x1DC50D8
	0x01DC4FD0 LDR X0, [X8 + 0x20]
	0x01DC4FD4 CBZ X0, 0x1DC50D4
	0x01DC4FD8 ORN W8, W31, W20, 0x0
	0x01DC4FDC AND W1, W8, 0x1
	0x01DC4FE0 MOV X2, X31
	0x01DC4FE4 BL 0x3C8ED2C
	0x01DC4FE8 LDR X21, [X19 + 0xE8]
	0x01DC4FEC CBZ X21, 0x1DC50D4
	0x01DC4FF0 LDR W8, [X21 + 0x18]
	0x01DC4FF4 CMP W8, 0x1
	0x01DC4FF8 B.LT 0x1DC5030
	0x01DC4FFC MOV W22, W31
	0x01DC5000 CMP W22, W8
	0x01DC5004 B.CS 0x1DC50D8
	0x01DC5008 ADD X8, X21, W22, 0x3, SXTW
	0x01DC500C LDR X0, [X8 + 0x20]
	0x01DC5010 CBZ X0, 0x1DC50D4
	0x01DC5014 AND W1, W20, 0x1
	0x01DC5018 MOV X2, X31
	0x01DC501C BL 0x3C357B4
	0x01DC5020 LDR W8, [X21 + 0x18]
	0x01DC5024 ADD W22, W22, 0x1
	0x01DC5028 CMP W22, W8
	0x01DC502C B.LT 0x1DC5000
	0x01DC5030 TBZ X20, 0x0, 0x1DC50B4
	0x01DC5034 LDR X8, [X19 + 0xF0]
	0x01DC5038 CBZ X8, 0x1DC50D4
	0x01DC503C LDR W9, [X8 + 0x18]
	0x01DC5040 CBZ W9, 0x1DC50D8
	0x01DC5044 LDR X0, [X8 + 0x20]
	0x01DC5048 CBZ X0, 0x1DC50D4
	0x01DC504C MOVZ W1, 0x2
	0x01DC5050 MOV V0.16B, V8.16B
	0x01DC5054 MOV V1.16B, V9.16B
	0x01DC5058 MOV V2.16B, V10.16B
	0x01DC505C MOV X2, X31
	0x01DC5060 BL 0x3C8F3C4
	0x01DC5064 LDR X8, [X19 + 0xF0]
	0x01DC5068 CBZ X8, 0x1DC50D4
	0x01DC506C LDR W9, [X8 + 0x18]
	0x01DC5070 CBZ W9, 0x1DC50D8
	0x01DC5074 LDR X0, [X8 + 0x20]
	0x01DC5078 CBZ X0, 0x1DC50D4
	0x01DC507C FMOV S0, 3
	0x01DC5080 FMUL S2, S10, S0
	0x01DC5084 FMUL S1, S9, S0
	0x01DC5088 FMUL S0, S8, S0
	0x01DC508C LDP X20, X19, [X31 + 0x60]
	0x01DC5090 LDP X22, X21, [X31 + 0x50]
	0x01DC5094 LDP X24, X23, [X31 + 0x40]
	0x01DC5098 LDR X30, [X31 + 0x30]
	0x01DC509C LDP D9, D8, [X31 + 0x20]
	0x01DC50A0 LDP D11, D10, [X31 + 0x10]
	0x01DC50A4 MOVZ W1, 0x2
	0x01DC50A8 MOV X2, X31
	0x01DC50AC LDP D13, D12, [X31], #0x70
	0x01DC50B0 B 0x3C8F474
	0x01DC50B4 LDP X20, X19, [X31 + 0x60]
	0x01DC50B8 LDP X22, X21, [X31 + 0x50]
	0x01DC50BC LDP X24, X23, [X31 + 0x40]
	0x01DC50C0 LDR X30, [X31 + 0x30]
	0x01DC50C4 LDP D9, D8, [X31 + 0x20]
	0x01DC50C8 LDP D11, D10, [X31 + 0x10]
	0x01DC50CC LDP D13, D12, [X31], #0x70
	0x01DC50D0 RET
	0x01DC50D4 BL 0x1C16F20
	0x01DC50D8 BL 0x1C16F28
	0x01DC50DC LDR X0, [X0 + 0x18]
	0x01DC50E0 RET
	0x01DC50E4 STP X30, X19, [X31 - 0x10]!
	0x01DC50E8 ADRP X0, 0x232E000
	0x01DC50EC LDR X0, [X0 + 0xB40]
	0x01DC50F0 BL 0x1C16D08
	0x01DC50F4 BL 0x1C16F10
	0x01DC50F8 MOV X1, X31
	0x01DC50FC MOV X19, X0
	0x01DC5100 BL 0x3380310
	0x01DC5104 ADRP X0, 0x2333000
	0x01DC5108 LDR X0, [X0 + 0x190]
	0x01DC510C BL 0x1C16D08
	0x01DC5110 MOV X1, X0
	0x01DC5114 MOV X0, X19
	0x01DC5118 BL 0x1C16DEC
	0x01DC511C LDR X0, [X0 + 0x18]
	0x01DC5120 RET
	0x01DC5124 STR X30, [X31 - 0x20]!
	0x01DC5128 STP X20, X19, [X31 + 0x10]
	0x01DC512C ADRP X19, 0x2613000
	0x01DC5130 ADRP X20, 0x2333000
	0x01DC5134 LDRB W8, [X19 + 0xB92]
	0x01DC5138 LDR X20, [X20 + 0x88]
	0x01DC513C TBNZ X8, 0x0, 0x1DC5154
	0x01DC5140 ADRP X0, 0x2333000
	0x01DC5144 LDR X0, [X0 + 0x88]
	0x01DC5148 BL 0x1C16CF4
	0x01DC514C MOVZ W8, 0x1
	0x01DC5150 STRB W8, [X19 + 0xB92]
	0x01DC5154 LDR X8, [X20]
	0x01DC5158 LDP X20, X19, [X31 + 0x10]
	0x01DC515C LDR X8, [X8 + 0xB8]
	0x01DC5160 STRB W31, [X8]
	0x01DC5164 LDR X30, [X31], #0x20
	0x01DC5168 RET
	0x01DC516C ADRP X10, 0xFFFFFFFFFED29000
	0x01DC5170 ADRP X11, 0xFFFFFFFFFED25000
	0x01DC5174 LDR V0, [X10 + 0x508]
	0x01DC5178 LDR V1, [X11 + 0x90]
	0x01DC517C MOVZ W9, 0x6666
	0x01DC5180 MOVZ W8, 0x1
	0x01DC5184 MOVK W9, 0x3F260000
	0x01DC5188 MOVZ W12, 0x42480000
	0x01DC518C MOV X1, X31
	0x01DC5190 STRB W8, [X0 + 0x20]
	0x01DC5194 STR W9, [X0 + 0x30]
	0x01DC5198 STR D0, [X0 + 0xB8]
	0x01DC519C STUR V1, [X0 + 0xC8]
	0x01DC51A0 STR W12, [X0 + 0xD8]
	0x01DC51A4 B 0x3C36C30
	0x01DC51A8 STR X30, [X31 - 0x40]!
	0x01DC51AC STP X24, X23, [X31 + 0x10]
	0x01DC51B0 STP X22, X21, [X31 + 0x20]
	0x01DC51B4 STP X20, X19, [X31 + 0x30]
	0x01DC51B8 ADRP X20, 0x2613000
	0x01DC51BC ADRP X22, 0x2333000
	0x01DC51C0 LDRB W8, [X20 + 0xB93]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x2615000
	010 Move X20, 0x2333000
	011 Move W8, [X21+2959]
	012 Move X20, [X20+3120]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0x2335000
	019 Move X0, [X0+312]
	020 Call 0x1C17CF4
	021 Move X0, 0x2335000
	022 Move X0, [X0+320]
	023 Call 0x1C17CF4
	024 Move X0, 0x2335000
	025 Move X0, [X0+328]
	026 Call 0x1C17CF4
	027 Move X0, 0x2335000
	028 Move X0, [X0+336]
	029 Call 0x1C17CF4
	030 Move X0, 0x2333000
	031 Move X0, [X0+3120]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+2959], W8
	035 Move X24, 0x2335000
	036 Move W8, 100
	037 Move X24, [X24+336]
	038 Move [X19+136], W8
	039 Move X0, [X20]
	040 Move X25, 0x2335000
	041 Move X23, 0x2335000
	042 Move X22, 0x2335000
	043 Move X25, [X25+328]
	044 Move X23, [X23+312]
	045 Move X22, [X22+320]
	046 Add X21, X19, 268
	047 Call 0x1C17F10
	048 Move S0, 3
	049 Move X1, X31
	050 Move X20, X0
	051 Call WaitForSeconds..ctor, X0, V0
	052 Move [X19+144], X20
	053 Move X20, 0x2614000
	054 Move W8, [X20+1923]
	055 Compare W8, 0
	056 JumpIfNotEqual {62}
	057 Move X0, 0x232F000
	058 Move X0, [X0+1440]
	059 Call 0x1C17CF4
	060 Move W8, 1
	061 Move [X20+1923], W8
	062 Move X8, 0x232F000
	063 Move X8, [X8+1440]
	064 Move X8, [X8]
	065 Move X8, [X8+184]
	066 Move V0, [X8]
	067 Move V1, [X8+8]
	068 Move W8, 0xCCCD
	069 NotImplemented "Instruction MOVK not yet implemented."
	070 Move [X19+160], D0
	071 Move [X19+168], S1
	072 Move [X19+172], W8
	073 Move X0, [X24]
	074 Call 0x1C17F10
	075 Move X1, [X25]
	076 Move X20, X0
	077 Call Dictionary`2<Int32Enum, Single>..ctor, X0
	078 Move [X19+208], X20
	079 Move X0, [X23]
	080 Move W1, 1
	081 Call 0x1C17D6C
	082 Move X8, -19755008
	083 Move X9, -19755008
	084 Move V0, [X8+7]
	085 Move V1, [X9+4080]
	086 Move W8, 0x3F000000
	087 Move [X19+248], X0
	088 Move [X19+256], W8
	089 Move [X21], V0
	090 Move [X21+16], D1
	091 Move X0, [X22]
	092 Move W1, 12
	093 Call 0x1C17D6C
	094 Compare X0, 0
	095 JumpIfEqual {160}
	096 Move W8, [X0+24]
	097 Compare W8, 0
	098 JumpIfEqual {159}
	099 Move X9, -19755008
	100 Move V0, [X9+8]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move [X0+2], V0
	103 Move X9, -19759104
	104 Move V0, [X9+243]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move [X0+3], V0
	107 Move X9, -19767296
	108 Move V0, [X9+188]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move [X0+4], V0
	111 Move X9, -19763200
	112 Move V0, [X9+213]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move [X0+5], V0
	115 Move X9, -19767296
	116 Move V0, [X9+96]
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move [X0+6], V0
	119 Move X9, -19767296
	120 Move V0, [X9+189]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move [X0+7], V0
	123 Move X9, -19767296
	124 Move V0, [X9+97]
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move [X0+8], V0
	127 Move X9, -19759104
	128 Move V0, [X9+120]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move [X0+9], V0
	131 Move X9, -19759104
	132 Move V0, [X9+188]
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move [X0+10], V0
	135 Move X9, -19759104
	136 Move V0, [X9+57]
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move [X0+11], V0
	139 Move X9, -19755008
	140 Move V0, [X9+35]
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move [X0+12], V0
	143 Move X8, -19763200
	144 Move V0, [X8+92]
	145 Move X22, [X31+32]
	146 Move X21, [X31+40]
	147 Move X24, [X31+16]
	148 Move X23, [X31+24]
	149 Move X1, X31
	150 Move [X0+13], V0
	151 Move [X19+296], X0
	152 Move X0, X19
	153 Move X20, [X31+48]
	154 Move X19, [X31+56]
	155 Move X30, [X31+64]
	156 Move X25, [X31+72]
	157 Call MonoBehaviour..ctor, X0
	158 Return 
	159 Call 0x1C17F28
	160 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x01DC51C4 LDR X22, [X22 + 0x198]
	0x01DC51C8 MOV X19, X0
	0x01DC51CC TBNZ X8, 0x0, 0x1DC52A4
	0x01DC51D0 ADRP X0, 0x2330000
	0x01DC51D4 LDR X0, [X0 + 0x5B0]
	0x01DC51D8 BL 0x1C16CF4
	0x01DC51DC ADRP X0, 0x232F000
	0x01DC51E0 LDR X0, [X0 + 0xE70]
	0x01DC51E4 BL 0x1C16CF4
	0x01DC51E8 ADRP X0, 0x2333000
	0x01DC51EC LDR X0, [X0 + 0x1A0]
	0x01DC51F0 BL 0x1C16CF4
	0x01DC51F4 ADRP X0, 0x2333000
	0x01DC51F8 LDR X0, [X0 + 0x198]
	0x01DC51FC BL 0x1C16CF4
	0x01DC5200 ADRP X0, 0x2333000
	0x01DC5204 LDR X0, [X0 + 0x1A8]
	0x01DC5208 BL 0x1C16CF4
	0x01DC520C ADRP X0, 0x2333000
	0x01DC5210 LDR X0, [X0 + 0x1B0]
	0x01DC5214 BL 0x1C16CF4
	0x01DC5218 ADRP X0, 0x2333000
	0x01DC521C LDR X0, [X0 + 0x1B8]
	0x01DC5220 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2614000
	005 Move X20, 0x2331000
	006 Move W8, [X19+2960]
	007 Move X20, [X20+1992]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2331000
	013 Move X0, [X0+1992]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2960], W8
	017 Move X8, [X20]
	018 Move X9, -19755008
	019 Move V0, [X9+4088]
	020 Move X10, -19755008
	021 Move X9, [X8+184]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move [X9+80], D0
	025 Move X8, [X8+184]
	026 Move V0, [X10+1192]
	027 Move [X8+88], D0
	028 Move X30, [X31+32]
	029 Return 

Method: System.Single <UpdateSnapTurn>g__CheckToTurn|133_0(AnimalCompany.HandSide handSide, ref UnityEngine.Vector2 prevValue)

Disassembly:
	0x01DC4830 B 0x1DC49FC
	0x01DC4834 LDR X0, [X20 + 0x20]
	0x01DC4838 CBZ X0, 0x1DC4A38
	0x01DC483C MOVZ W1, 0x1
	0x01DC4840 MOV X2, X31
	0x01DC4844 BL 0x3C32410
	0x01DC4848 LDR X0, [X20 + 0x30]
	0x01DC484C CBZ X0, 0x1DC4A3C
	0x01DC4850 MOVZ W1, 0x1
	0x01DC4854 MOV X2, X31
	0x01DC4858 BL 0x3C8ECAC
	0x01DC485C ADRP X8, 0x2331000
	0x01DC4860 LDR X8, [X8 + 0x310]
	0x01DC4864 LDR X0, [X8]
	0x01DC4868 LDR W8, [X0 + 0xE0]
	0x01DC486C CBNZ W8, 0x1DC4874
	0x01DC4870 BL 0x1C16DFC
	0x01DC4874 ADD X1, X31, 0x10
	0x01DC4878 MOV W0, W31
	0x01DC487C MOV X2, X31
	0x01DC4880 BL 0x1DA6E5C
	0x01DC4884 TBZ X0, 0x0, 0x1DC49D4
	0x01DC4888 LDR X1, [X31 + 0x10]
	0x01DC488C MOV X0, X20
	0x01DC4890 MOV W2, W31
	0x01DC4894 BL 0x1DC24D8
	0x01DC4898 MOV W21, W31
	0x01DC489C B 0x1DC49FC
	0x01DC48A0 LDR V8, [X20 + 0x10C]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Add X1, X31, 8
	006 Move [X31+8], X31
	007 Call XRInputManager.GetJoystickValue, X0, X1
	008 Move X8, -19763200
	009 Move V1, [X31+8]
	010 Move V0, [X8+572]
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 Move V2, [X19]
	013 NotImplemented "Instruction FCMP not yet implemented."
	014 Move S0, -1
	015 Move X8, -19763200
	016 Move V2, [X8+268]
	017 Move S0, W31
	018 NotImplemented "Instruction FCMP not yet implemented."
	019 Move V1, [X19]
	020 NotImplemented "Instruction FCMP not yet implemented."
	021 Move S0, 1
	022 Move X8, [X31+8]
	023 Move [X19], X8
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Add X31, X31, 32
	027 Return V0

