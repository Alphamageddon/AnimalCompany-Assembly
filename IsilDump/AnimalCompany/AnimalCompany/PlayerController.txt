Type: AnimalCompany.PlayerController

Method: AnimalCompany.PlayerController get_instance()

Disassembly:
	0x01CC0F30 FMOV S3, W31
	0x01CC0F34 LDR X8, [X8]
	0x01CC0F38 FMIN S1, S0, S1
	0x01CC0F3C FCMP S0, 0x0
	0x01CC0F40 FCSEL S1, S1, S3, PL
	0x01CC0F44 LDR X8, [X8 + 0xB8]
	0x01CC0F48 LDR V0, [X8]
	0x01CC0F4C LDR V2, [X8 + 0x8]
	0x01CC0F50 FSUB V0.2S, V0.2S, V8.2S
	0x01CC0F54 FSUB S2, S2, S9
	0x00000000 INVALID
	0x01CC0F5C FMUL S1, S2, S1
	0x01CC0F60 FADD V0.2S, V8.2S, V0.2S
	0x01CC0F64 FADD S1, S9, S1
	0x01CC0F68 STR D0, [X19 + 0x98]
	0x01CC0F6C STR S1, [X19 + 0xA0]
	0x01CC0F70 LDR X0, [X21]
	0x01CC0F74 LDR X20, [X19 + 0xA8]
	0x01CC0F78 LDR W8, [X0 + 0xE0]
	0x01CC0F7C CBNZ W8, 0x1CC0F84
	0x01CC0F80 BL 0x1B6E8F8
	0x01CC0F84 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2564000
	005 Move X19, 0x228F000
	006 Move W8, [X20+1341]
	007 Move X19, [X19+408]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x228F000
	013 Move X0, [X0+408]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1341], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1B6F8F8
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: UnityEngine.Color get_playerColor()

Disassembly:
	0x01CC0F88 MOV X1, X31
	0x01CC0F8C MOV X2, X31
	0x01CC0F90 BL 0x3A9D6EC
	0x01CC0F94 TBZ X0, 0x0, 0x1CC0FC4
	0x01CC0F98 LDR X0, [X19 + 0xA8]
	0x01CC0F9C CBZ X0, 0x1CC15BC
	0x01CC0FA0 MOV X1, X31
	0x01CC0FA4 BL 0x3AA7658
	0x01CC0FA8 LDP S3, S4, [X19 + 0xB0]
	0x01CC0FAC LDR V5, [X19 + 0xB8]
	0x01CC0FB0 MOV X0, X19
	0x01CC0FB4 FADD S0, S0, S3
	0x01CC0FB8 FADD S1, S1, S4
	0x01CC0FBC FADD S2, S2, S5
	0x01CC0FC0 BL 0x1CC0C4C
	0x01CC0FC4 ADRP X22, 0x228F000
	0x01CC0FC8 LDR X22, [X22 + 0x320]
	0x01CC0FCC MOV X0, X31
	0x01CC0FD0 BL 0x1CD2434
	0x01CC0FD4 TBZ X0, 0x0, 0x1CC10CC
	0x01CC0FD8 MOV X0, X31
	0x01CC0FDC BL 0x3AA47CC
	0x01CC0FE0 LDP S2, S1, [X19 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2564000
	005 Move X19, 0x228F000
	006 Move W8, [X20+1342]
	007 Move X19, [X19+408]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x228F000
	013 Move X0, [X0+408]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1342], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1B6F8F8
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move S0, [X8+8]
	027 Move S1, [X8+12]
	028 Move S2, [X8+16]
	029 Move S3, [X8+20]
	030 Move X30, [X31+32]
	031 Return X0

Method: System.Void set_playerColor(UnityEngine.Color value)

Disassembly:
	0x01CC0FE4 LDR W20, [X19 + 0xE8]
	0x01CC0FE8 FSUB S0, S0, S1
	0x01CC0FEC FCMP S0, S2
	0x01CC0FF0 B.LE 0x1CC10C4
	0x01CC0FF4 MOV X0, X31
	0x01CC0FF8 BL 0x3AA47CC
	0x01CC0FFC LDR V1, [X19 + 0xE4]
	0x01CC1000 MOVZ W8, 0x7F800000
	0x01CC1004 SCVTF S2, W20
	0x01CC1008 MOV X0, X31
	0x01CC100C FSUB S0, S0, S1
	0x01CC1010 FMOV S1, W8
	0x01CC1014 MOVZ W8, 0xCF000000
	0x01CC1018 FDIV S0, S2, S0
	0x01CC101C FMOV S2, W8
	0x01CC1020 MOVZ W8, 0x447A0000
	0x01CC1024 FCMP S0, S1
	0x01CC1028 FMOV S1, W8
	0x01CC102C FCVTZS W8, S0
	0x01CC1030 SCVTF S0, W8
	0x01CC1034 FCSEL S0, S2, S0, EQ
	0x01CC1038 STR S0, [X31 + 0xC]
	0x01CC103C FDIV S0, S1, S0
	0x01CC1040 STR S0, [X31 + 0x8]
	0x01CC1044 STR W31, [X19 + 0xE8]
	0x01CC1048 BL 0x3AA47CC
	0x01CC104C STR S0, [X19 + 0xE4]
	0x01CC1050 ADRP X20, 0x228E000
	0x01CC1054 LDR X20, [X20 + 0x330]
	0x01CC1058 ADD X0, X31, 0xC
	0x01CC105C MOV X2, X31

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x2564000
	009 Move X19, 0x228F000
	010 Move W8, [X20+1343]
	011 Call 0x3D1A4D0
	012 Return 
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x228E000
	022 Move X0, [X0+408]
	023 Call 0x1B6F7F0
	024 Move W8, 1
	025 Move [X20+1343], W8
	026 Move X0, [X19]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1B6F8F8
	031 Move X0, [X19]
	032 Move X8, [X0+184]
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X30, [X31+32]
	036 Move [X8+16], S9
	037 Move [X8+24], S8
	038 Move D9, [X31+16]
	039 Move D8, [X31+24]
	040 Move [X8+8], S11
	041 Move [X8+16], S10
	042 Move D11, [X31+64]
	043 Move D10, [X31+72]
	044 Return 

Method: AnimalCompany.GorillaLocomotion.Player get_gorillaPlayer()

Disassembly:
	0x01CC1060 LDR X1, [X20]
	0x01CC1064 BL 0x31F95D0

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: UnityEngine.Transform get_body()

Disassembly:
	0x01CC1068 LDR X1, [X20]
	0x01CC106C MOV X20, X0

ISIL:
	001 Move X0, [X0+80]
	002 Return X0

Method: UnityEngine.Transform get_head()

Disassembly:
	0x01CC1070 ADD X0, X31, 0x8
	0x01CC1074 MOV X2, X31

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: UnityEngine.Transform get_handLeft()

Disassembly:
	0x01CC1078 BL 0x31F95D0
	0x01CC107C ADRP X8, 0x228E000

ISIL:
	001 Move X0, [X0+96]
	002 Return X0

Method: UnityEngine.Transform get_handRight()

Disassembly:
	0x01CC1080 LDR X8, [X8 + 0x340]
	0x01CC1084 ADRP X9, 0x228E000

ISIL:
	001 Move X0, [X0+104]
	002 Return X0

Method: UnityEngine.Transform get_controllerLeft()

Disassembly:
	0x01CC1088 LDR X9, [X9 + 0x338]
	0x01CC108C MOV X3, X0

ISIL:
	001 Move X0, [X0+112]
	002 Return X0

Method: UnityEngine.Transform get_controllerRight()

Disassembly:
	0x01CC1090 LDR X8, [X8]
	0x01CC1094 MOV X1, X20

ISIL:
	001 Move X0, [X0+120]
	002 Return X0

Method: UnityEngine.Transform get_backAttachAnchor()

Disassembly:
	0x01CC1098 LDR X2, [X9]
	0x01CC109C MOV X4, X31
	0x01CC10A0 MOV X0, X8
	0x01CC10A4 BL 0x309060C
	0x01CC10A8 ADRP X8, 0x228E000
	0x01CC10AC LDR X8, [X8 + 0x328]
	0x01CC10B0 MOV X1, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+56]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move X0, [X8+72]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1B6FA1C

Method: System.Int32 get_playerChannel()

Disassembly:
	0x01CC10B4 LDR X8, [X8]
	0x01CC10B8 MOV X0, X8

ISIL:
	001 Move W0, [X0+272]
	002 Return X0

Method: System.Void set_playerChannel(System.Int32 value)

Disassembly:
	0x01CC10BC BL 0x1CC15C0
	0x01CC10C0 B 0x1CC10CC

ISIL:
	001 Move [X0+272], W1
	002 Return 

Method: System.Boolean get_snapTurnEnabled()

Disassembly:
	0x01CC10C4 ADD W8, W20, 0x1
	0x01CC10C8 STR W8, [X19 + 0xE8]

ISIL:
	001 Move W0, [X0+276]
	002 Return X0

Method: System.Void set_snapTurnEnabled(System.Boolean value)

Disassembly:
	0x01CC10CC LDR X0, [X22]
	0x01CC10D0 LDR W8, [X0 + 0xE0]
	0x01CC10D4 CBNZ W8, 0x1CC10E0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+276], W8
	003 Return 

Method: System.Void Awake()

Disassembly:
	0x01CC10D8 BL 0x1B6E8F8
	0x01CC10DC LDR X0, [X22]
	0x01CC10E0 LDR X8, [X0 + 0xB8]
	0x01CC10E4 LDR X8, [X8 + 0x8]
	0x01CC10E8 CBZ X8, 0x1CC10F4
	0x01CC10EC LDR X20, [X8 + 0x20]
	0x01CC10F0 B 0x1CC10F8
	0x01CC10F4 MOV X20, X31
	0x01CC10F8 LDR X0, [X21]
	0x01CC10FC LDR W8, [X0 + 0xE0]
	0x01CC1100 CBNZ W8, 0x1CC1108
	0x01CC1104 BL 0x1B6E8F8
	0x01CC1108 MOV X0, X20
	0x01CC110C MOV X1, X31
	0x01CC1110 MOV X2, X31
	0x01CC1114 BL 0x3A9D6EC
	0x01CC1118 LDR X20, [X19 + 0x48]
	0x01CC111C TBZ X0, 0x0, 0x1CC11C8
	0x01CC1120 LDR X0, [X22]
	0x01CC1124 LDR W8, [X0 + 0xE0]
	0x01CC1128 CBNZ W8, 0x1CC1134
	0x01CC112C BL 0x1B6E8F8
	0x01CC1130 LDR X0, [X22]
	0x01CC1134 LDR X8, [X0 + 0xB8]
	0x01CC1138 LDR X8, [X8 + 0x8]
	0x01CC113C CBZ X8, 0x1CC15BC
	0x01CC1140 LDR X8, [X8 + 0x20]
	0x01CC1144 CBZ X8, 0x1CC15BC
	0x01CC1148 CBZ X20, 0x1CC15BC
	0x01CC114C LDR W1, [X8 + 0x74]
	0x01CC1150 MOV X0, X20
	0x01CC1154 MOV X2, X31
	0x01CC1158 BL 0x3A66010
	0x01CC115C LDR X0, [X21]
	0x01CC1160 LDR X20, [X19 + 0x30]
	0x01CC1164 LDR W8, [X0 + 0xE0]
	0x01CC1168 CBNZ W8, 0x1CC1170
	0x01CC116C BL 0x1B6E8F8
	0x01CC1170 MOV X0, X20
	0x01CC1174 MOV X1, X31
	0x01CC1178 MOV X2, X31
	0x01CC117C BL 0x3A9D6EC
	0x01CC1180 TBZ X0, 0x0, 0x1CC1218
	0x01CC1184 LDR X0, [X22]
	0x01CC1188 LDR X20, [X19 + 0x30]
	0x01CC118C LDR W8, [X0 + 0xE0]
	0x01CC1190 CBNZ W8, 0x1CC119C
	0x01CC1194 BL 0x1B6E8F8
	0x01CC1198 LDR X0, [X22]
	0x01CC119C LDR X8, [X0 + 0xB8]
	0x01CC11A0 LDR X8, [X8 + 0x8]
	0x01CC11A4 CBZ X8, 0x1CC15BC
	0x01CC11A8 LDR X8, [X8 + 0x20]
	0x01CC11AC CBZ X8, 0x1CC15BC
	0x01CC11B0 CBZ X20, 0x1CC15BC
	0x01CC11B4 LDRB W8, [X8 + 0x78]
	0x01CC11B8 MOV X0, X20
	0x01CC11BC CMP W8, 0x0
	0x01CC11C0 CSET W1, EQ
	0x01CC11C4 B 0x1CC1210
	0x01CC11C8 CBZ X20, 0x1CC15BC
	0x01CC11CC MOV X0, X20
	0x01CC11D0 MOV W1, W31
	0x01CC11D4 MOV X2, X31
	0x01CC11D8 BL 0x3A66010
	0x01CC11DC LDR X0, [X21]
	0x01CC11E0 LDR X20, [X19 + 0x30]
	0x01CC11E4 LDR W8, [X0 + 0xE0]
	0x01CC11E8 CBNZ W8, 0x1CC11F0
	0x01CC11EC BL 0x1B6E8F8
	0x01CC11F0 MOV X0, X20
	0x01CC11F4 MOV X1, X31
	0x01CC11F8 MOV X2, X31
	0x01CC11FC BL 0x3A9D6EC
	0x01CC1200 TBZ X0, 0x0, 0x1CC1218
	0x01CC1204 LDR X0, [X19 + 0x30]
	0x01CC1208 CBZ X0, 0x1CC15BC
	0x01CC120C MOVZ W1, 0x1
	0x01CC1210 MOV X2, X31
	0x01CC1214 BL 0x3AF68B0
	0x01CC1218 ADRP X20, 0x228C000
	0x01CC121C LDRB W8, [X19 + 0x114]
	0x01CC1220 LDR X20, [X20 + 0x800]
	0x01CC1224 CBZ W8, 0x1CC1230
	0x01CC1228 MOV X0, X19
	0x01CC122C BL 0x1CC16CC
	0x01CC1230 LDR X0, [X20]
	0x01CC1234 LDR W8, [X0 + 0xE0]
	0x01CC1238 CBNZ W8, 0x1CC1240
	0x01CC123C BL 0x1B6E8F8
	0x01CC1240 MOV X0, X31
	0x01CC1244 BL 0x3A6BF90
	0x01CC1248 TBNZ X0, 0x0, 0x1CC1594
	0x01CC124C LDRB W8, [X19 + 0x138]
	0x01CC1250 CBZ W8, 0x1CC1268
	0x01CC1254 LDRB W8, [X19 + 0x139]
	0x01CC1258 CBNZ W8, 0x1CC1594
	0x01CC125C MOVZ W21, 0x1
	0x01CC1260 MOVZ W20, 0x1
	0x01CC1264 B 0x1CC129C
	0x01CC1268 LDR X0, [X19 + 0x128]
	0x01CC126C CBZ X0, 0x1CC15BC
	0x01CC1270 MOV X1, X31
	0x01CC1274 BL 0x399D69C
	0x01CC1278 CBZ X0, 0x1CC15BC
	0x01CC127C LDRB W21, [X0 + 0x1C]
	0x01CC1280 LDRB W8, [X19 + 0x139]
	0x01CC1284 CMP W21, 0x0
	0x01CC1288 CSET W20, NE
	0x01CC128C CBZ W8, 0x1CC129C
	0x01CC1290 MOVZ W22, 0x1
	0x01CC1294 CBNZ W20, 0x1CC12C0
	0x01CC1298 B 0x1CC12C4
	0x01CC129C LDR X0, [X19 + 0x130]
	0x01CC12A0 CBZ X0, 0x1CC15BC
	0x01CC12A4 MOV X1, X31
	0x01CC12A8 BL 0x399D69C
	0x01CC12AC CBZ X0, 0x1CC15BC
	0x01CC12B0 LDRB W8, [X0 + 0x1C]
	0x01CC12B4 CMP W8, 0x0
	0x01CC12B8 CSET W22, NE
	0x01CC12BC CBZ W20, 0x1CC12C4
	0x01CC12C0 TBNZ X22, 0x0, 0x1CC158C
	0x01CC12C4 LDR X0, [X19 + 0x58]
	0x01CC12C8 CBZ X0, 0x1CC15BC
	0x01CC12CC MOV X1, X31
	0x01CC12D0 BL 0x3AA7AD0
	0x01CC12D4 ADRP X23, 0x2562000
	0x01CC12D8 LDRB W8, [X23 + 0x441]
	0x01CC12DC MOV V8.16B, V0.16B
	0x01CC12E0 MOV V9.16B, V2.16B
	0x01CC12E4 CBNZ W8, 0x1CC12FC
	0x01CC12E8 ADRP X0, 0x228C000
	0x01CC12EC LDR X0, [X0 + 0x488]
	0x01CC12F0 BL 0x1B6E7F0
	0x01CC12F4 MOVZ W8, 0x1
	0x01CC12F8 STRB W8, [X23 + 0x441]
	0x01CC12FC ADRP X8, 0x228C000
	0x01CC1300 LDR X8, [X8 + 0x488]
	0x01CC1304 LDR X0, [X8]
	0x01CC1308 LDR W8, [X0 + 0xE0]
	0x01CC130C CBNZ W8, 0x1CC1314
	0x01CC1310 BL 0x1B6E8F8
	0x01CC1314 ADRP X8, 0xFFFFFFFFFEDE8000
	0x01CC1318 FMUL S1, S8, S8
	0x01CC131C FMOV S0, W31
	0x01CC1320 LDR V2, [X8 + 0xB64]
	0x01CC1324 ADRP X23, 0x228C000
	0x01CC1328 FADD S1, S1, S0
	0x01CC132C FMUL S3, S9, S9
	0x01CC1330 LDR X23, [X23 + 0x480]
	0x01CC1334 FADD S1, S3, S1
	0x01CC1338 FSQRT S1, S1
	0x01CC133C FCMP S1, S2
	0x01CC1340 B.LE 0x1CC1354
	0x01CC1344 FDIV S11, S8, S1
	0x01CC1348 FDIV S12, S0, S1
	0x01CC134C FDIV S13, S9, S1
	0x01CC1350 B 0x1CC1384
	0x01CC1354 ADRP X24, 0x2562000
	0x01CC1358 LDRB W8, [X24 + 0x43F]
	0x01CC135C CBNZ W8, 0x1CC1374
	0x01CC1360 ADRP X0, 0x228C000
	0x01CC1364 LDR X0, [X0 + 0x480]
	0x01CC1368 BL 0x1B6E7F0
	0x01CC136C MOVZ W8, 0x1
	0x01CC1370 STRB W8, [X24 + 0x43F]
	0x01CC1374 LDR X8, [X23]
	0x01CC1378 LDR X8, [X8 + 0xB8]
	0x01CC137C LDP S11, S12, [X8]
	0x01CC1380 LDR V13, [X8 + 0x8]
	0x01CC1384 LDR X0, [X19 + 0x58]
	0x01CC1388 CBZ X0, 0x1CC15BC
	0x01CC138C MOV X1, X31
	0x01CC1390 BL 0x3A9B084
	0x01CC1394 CBZ X0, 0x1CC15BC
	0x01CC1398 MOV X1, X31
	0x01CC139C BL 0x3AA7658
	0x01CC13A0 ADRP X24, 0x2562000
	0x01CC13A4 LDRB W8, [X24 + 0x442]
	0x01CC13A8 MOV V8.16B, V0.16B
	0x01CC13AC MOV V9.16B, V1.16B
	0x01CC13B0 MOV V10.16B, V2.16B
	0x01CC13B4 CBNZ W8, 0x1CC13CC
	0x01CC13B8 ADRP X0, 0x228C000
	0x01CC13BC LDR X0, [X0 + 0x480]
	0x01CC13C0 BL 0x1B6E7F0
	0x01CC13C4 MOVZ W8, 0x1
	0x01CC13C8 STRB W8, [X24 + 0x442]
	0x01CC13CC LDR X8, [X23]
	0x01CC13D0 ADRP X9, 0xFFFFFFFFFEDE8000
	0x01CC13D4 LDR V0, [X9 + 0x9BC]
	0x01CC13D8 LDR X8, [X8 + 0xB8]
	0x01CC13DC LDP S1, S2, [X8 + 0x18]
	0x01CC13E0 LDR V3, [X8 + 0x20]
	0x01CC13E4 ADRP X8, 0xFFFFFFFFFEDE8000
	0x01CC13E8 LDR V14, [X8 + 0xAB0]
	0x01CC13EC FMUL S1, S1, S0
	0x01CC13F0 FMUL S2, S2, S0
	0x01CC13F4 FMUL S0, S3, S0
	0x01CC13F8 FSUB S1, S8, S1
	0x01CC13FC FMUL S3, S11, S14
	0x01CC1400 FSUB S2, S9, S2
	0x01CC1404 FMUL S4, S12, S14
	0x01CC1408 FSUB S0, S10, S0
	0x01CC140C FMUL S5, S13, S14
	0x01CC1410 FADD S8, S3, S1
	0x01CC1414 FADD S9, S4, S2
	0x01CC1418 FADD S10, S5, S0
	0x01CC141C TBNZ X20, 0x0, 0x1CC14D4
	0x01CC1420 LDR X0, [X19 + 0x128]
	0x01CC1424 CBZ X0, 0x1CC15BC
	0x01CC1428 MOV X1, X31
	0x01CC142C BL 0x3A9B084
	0x01CC1430 LDR X8, [X19 + 0x58]
	0x01CC1434 CBZ X8, 0x1CC15BC
	0x01CC1438 MOV X20, X0
	0x01CC143C MOV X0, X8
	0x01CC1440 MOV X1, X31
	0x01CC1444 BL 0x3AA79D8
	0x01CC1448 CBZ X20, 0x1CC15BC
	0x01CC144C FMUL S2, S2, S14
	0x01CC1450 FMUL S1, S1, S14
	0x01CC1454 FMUL S0, S0, S14
	0x01CC1458 FSUB S2, S10, S2
	0x01CC145C FSUB S1, S9, S1
	0x01CC1460 FSUB S0, S8, S0
	0x01CC1464 MOV X0, X20
	0x01CC1468 MOV X1, X31
	0x01CC146C BL 0x3AA76F8
	0x01CC1470 LDR X0, [X19 + 0x128]
	0x01CC1474 CBZ X0, 0x1CC15BC
	0x01CC1478 MOV X1, X31
	0x01CC147C BL 0x3A9B084
	0x01CC1480 LDRB W8, [X24 + 0x442]
	0x01CC1484 MOV X20, X0
	0x01CC1488 CBNZ W8, 0x1CC14A0
	0x01CC148C ADRP X0, 0x228C000
	0x01CC1490 LDR X0, [X0 + 0x480]
	0x01CC1494 BL 0x1B6E7F0
	0x01CC1498 MOVZ W8, 0x1
	0x01CC149C STRB W8, [X24 + 0x442]
	0x01CC14A0 LDR X8, [X23]
	0x01CC14A4 FNEG S3, S11
	0x01CC14A8 FNEG S4, S12
	0x01CC14AC FNEG S5, S13
	0x01CC14B0 LDR X8, [X8 + 0xB8]
	0x01CC14B4 MOV X0, X31
	0x01CC14B8 LDP S0, S1, [X8 + 0x18]
	0x01CC14BC LDR V2, [X8 + 0x20]
	0x01CC14C0 BL 0x3A92B78
	0x01CC14C4 CBZ X20, 0x1CC15BC
	0x01CC14C8 MOV X0, X20
	0x01CC14CC MOV X1, X31
	0x01CC14D0 BL 0x3AA7878
	0x01CC14D4 TBNZ X22, 0x0, 0x1CC158C
	0x01CC14D8 LDR X0, [X19 + 0x130]
	0x01CC14DC CBZ X0, 0x1CC15BC
	0x01CC14E0 MOV X1, X31
	0x01CC14E4 BL 0x3A9B084
	0x01CC14E8 LDR X8, [X19 + 0x58]
	0x01CC14EC CBZ X8, 0x1CC15BC
	0x01CC14F0 MOV X20, X0
	0x01CC14F4 MOV X0, X8
	0x01CC14F8 MOV X1, X31
	0x01CC14FC BL 0x3AA79D8
	0x01CC1500 CBZ X20, 0x1CC15BC
	0x01CC1504 FMUL S2, S2, S14
	0x01CC1508 FMUL S1, S1, S14
	0x01CC150C FMUL S0, S0, S14
	0x01CC1510 FADD S2, S10, S2
	0x01CC1514 FADD S1, S9, S1
	0x01CC1518 FADD S0, S8, S0
	0x01CC151C MOV X0, X20
	0x01CC1520 MOV X1, X31
	0x01CC1524 BL 0x3AA76F8
	0x01CC1528 LDR X0, [X19 + 0x130]
	0x01CC152C CBZ X0, 0x1CC15BC
	0x01CC1530 MOV X1, X31
	0x01CC1534 BL 0x3A9B084
	0x01CC1538 LDRB W8, [X24 + 0x442]
	0x01CC153C MOV X20, X0
	0x01CC1540 CBNZ W8, 0x1CC1558
	0x01CC1544 ADRP X0, 0x228C000
	0x01CC1548 LDR X0, [X0 + 0x480]
	0x01CC154C BL 0x1B6E7F0
	0x01CC1550 MOVZ W8, 0x1
	0x01CC1554 STRB W8, [X24 + 0x442]
	0x01CC1558 LDR X8, [X23]
	0x01CC155C FNEG S3, S11
	0x01CC1560 FNEG S4, S12
	0x01CC1564 FNEG S5, S13
	0x01CC1568 LDR X8, [X8 + 0xB8]
	0x01CC156C MOV X0, X31
	0x01CC1570 LDP S0, S1, [X8 + 0x18]
	0x01CC1574 LDR V2, [X8 + 0x20]
	0x01CC1578 BL 0x3A92B78
	0x01CC157C CBZ X20, 0x1CC15BC
	0x01CC1580 MOV X0, X20
	0x01CC1584 MOV X1, X31
	0x01CC1588 BL 0x3AA7878
	0x01CC158C STRB W21, [X19 + 0x138]
	0x01CC1590 STRB W22, [X19 + 0x139]
	0x01CC1594 LDP X20, X19, [X31 + 0x70]
	0x01CC1598 LDP X22, X21, [X31 + 0x60]
	0x01CC159C LDP X24, X23, [X31 + 0x50]
	0x01CC15A0 LDR X30, [X31 + 0x48]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x2563000
	011 Move X20, 0x228E000
	012 Move W8, [X21+1344]
	013 Move X20, [X20+408]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {57}
	019 Move X0, 0x228F000
	020 Move X0, [X0+736]
	021 Call 0x1B6F7F0
	022 Move X0, 0x228F000
	023 Move X0, [X0+744]
	024 Call 0x1B6F7F0
	025 Move X0, 0x228E000
	026 Move X0, [X0+368]
	027 Call 0x1B6F7F0
	028 Move X0, 0x228F000
	029 Move X0, [X0+752]
	030 Call 0x1B6F7F0
	031 Move X0, 0x228D000
	032 Move X0, [X0+3960]
	033 Call 0x1B6F7F0
	034 Move X0, 0x228F000
	035 Move X0, [X0+760]
	036 Call 0x1B6F7F0
	037 Move X0, 0x228F000
	038 Move X0, [X0+768]
	039 Call 0x1B6F7F0
	040 Move X0, 0x228F000
	041 Move X0, [X0+776]
	042 Call 0x1B6F7F0
	043 Move X0, 0x228F000
	044 Move X0, [X0+784]
	045 Call 0x1B6F7F0
	046 Move X0, 0x228E000
	047 Move X0, [X0+408]
	048 Call 0x1B6F7F0
	049 Move X0, 0x228E000
	050 Move X0, [X0+2616]
	051 Call 0x1B6F7F0
	052 Move X0, 0x228E000
	053 Move X0, [X0+1104]
	054 Call 0x1B6F7F0
	055 Move W8, 1
	056 Move [X21+1344], W8
	057 Move X0, [X20]
	058 Move [X31+8], X31
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {64}
	062 Call 0x1B6F8F8
	063 Move X0, [X20]
	064 Move X8, [X0+184]
	065 Move W1, 100
	066 Move X0, X19
	067 Move [X8], X19
	068 Call PlayerController.SetCurrentHealth, X0, X1
	069 Move X0, [X19+40]
	070 Move [X19+132], W31
	071 Compare X0, 0
	072 JumpIfEqual {344}
	073 Move X1, [X19+32]
	074 Call PlayerControlAsset.Setup, X0, X1
	075 Move X0, [X19+56]
	076 Compare X0, 0
	077 JumpIfEqual {344}
	078 Move X4, [X19+112]
	079 Move X5, [X19+120]
	080 Move X2, [X19+96]
	081 Move X3, [X19+104]
	082 Move X1, [X19+88]
	083 Move W6, W31
	084 Call PlayerView.Setup, X0, X1, X2, X3, X4, X5, X6
	085 Move X23, [X19+32]
	086 Compare X23, 0
	087 JumpIfEqual {344}
	088 Move X22, 0x228F000
	089 Move X22, [X22+744]
	090 Move X21, 0x228F000
	091 Move X20, [X23+432]
	092 Move X0, [X22]
	093 Move X21, [X21+768]
	094 Call 0x1B6FA0C
	095 Move X2, [X21]
	096 Move X1, X19
	097 Move X3, X31
	098 Move X21, X0
	099 Call Action`2<RaycastHit, Vector3>..ctor, X0, X1, X2
	100 Move X0, X20
	101 Move X1, X21
	102 Move X2, X31
	103 Call Delegate.Combine, X0, X1
	104 Compare X0, 0
	105 JumpIfEqual {119}
	106 Move X21, [X22]
	107 Move X20, X0
	108 Move X1, X21
	109 Call 0x1B6F8FC
	110 Compare X0, 0
	111 JumpIfEqual {190}
	112 Move [X23+432], X0
	113 Move X21, [X22]
	114 Move X0, X20
	115 Move X1, X21
	116 Call 0x1B6F8FC
	117 Compare X0, 0
	118 JumpIfNotEqual {120}
	119 Move [X23+432], X31
	120 Move X23, [X19+32]
	121 Compare X23, 0
	122 JumpIfEqual {344}
	123 Move X0, [X22]
	124 Move X21, 0x228F000
	125 Move X20, [X23+440]
	126 Move X21, [X21+776]
	127 Call 0x1B6FA0C
	128 Move X2, [X21]
	129 Move X1, X19
	130 Move X3, X31
	131 Move X21, X0
	132 Call Action`2<RaycastHit, Vector3>..ctor, X0, X1, X2
	133 Move X0, X20
	134 Move X1, X21
	135 Move X2, X31
	136 Call Delegate.Combine, X0, X1
	137 Compare X0, 0
	138 JumpIfEqual {152}
	139 Move X21, [X22]
	140 Move X20, X0
	141 Move X1, X21
	142 Call 0x1B6F8FC
	143 Compare X0, 0
	144 JumpIfEqual {190}
	145 Move [X23+440], X0
	146 Move X21, [X22]
	147 Move X0, X20
	148 Move X1, X21
	149 Call 0x1B6F8FC
	150 Compare X0, 0
	151 JumpIfNotEqual {153}
	152 Move [X23+440], X31
	153 Move X22, 0x228D000
	154 Move X22, [X22+3960]
	155 Move X23, 0x228F000
	156 Move X21, 0x228F000
	157 Move X8, [X22]
	158 Move X8, [X8+184]
	159 Move X23, [X23+736]
	160 Move X20, [X8+32]
	161 Move X0, [X23]
	162 Move X21, [X21+784]
	163 Call 0x1B6FA0C
	164 Move X2, [X21]
	165 Move X1, X19
	166 Move X3, X31
	167 Move X21, X0
	168 Call Action`1<NetworkInput>..ctor, X0, X1, X2
	169 Move X0, X20
	170 Move X1, X21
	171 Move X2, X31
	172 Call Delegate.Combine, X0, X1
	173 Compare X0, 0
	174 JumpIfEqual {193}
	175 Move X21, [X23]
	176 Move X20, X0
	177 Move X1, X21
	178 Call 0x1B6F8FC
	179 Compare X0, 0
	180 JumpIfEqual {190}
	181 Move X8, [X22]
	182 Move X8, [X8+184]
	183 Move [X8+32], X0
	184 Move X21, [X23]
	185 Move X0, X20
	186 Move X1, X21
	187 Call 0x1B6F8FC
	188 Compare X0, 0
	189 JumpIfNotEqual {196}
	190 Move X0, X20
	191 Move X1, X21
	192 Call 0x1B6FCDC
	193 Move X8, [X22]
	194 Move X8, [X8+184]
	195 Move [X8+32], X31
	196 Move X20, 0x228E000
	197 Move X20, [X20+2616]
	198 Move X0, X19
	199 Call PlayerController.SetRandomColor, X0
	200 Move X0, [X20]
	201 Move W8, [X0+224]
	202 Compare W8, 0
	203 JumpIfNotEqual {205}
	204 Call 0x1B6F8F8
	205 Add X1, X31, 8
	206 Move W0, W31
	207 Move X2, X31
	208 Call TeleportTarget.TryGetTeleportTarget, X0, X1
	209 Move TEMP, X0
	210 And TEMP, TEMP, 1
	211 Compare TEMP, 1
	212 JumpIfNotEqual {224}
	213 Move X0, [X31+8]
	214 Compare X0, 0
	215 JumpIfEqual {344}
	216 Move X1, X31
	217 Call Transform.get_position, X0
	218 Move [X19+236], S0
	219 Move [X19+244], S1
	220 Move [X19+244], S2
	221 Move X0, [X31+8]
	222 Compare X0, 0
	223 JumpIfNotEqual {235}
	224 Move X0, [X19+88]
	225 Compare X0, 0
	226 JumpIfEqual {344}
	227 Move X1, X31
	228 Call Transform.get_position, X0
	229 Move X0, [X19+88]
	230 Move [X19+236], S0
	231 Move [X19+244], S1
	232 Move [X19+244], S2
	233 Compare X0, 0
	234 JumpIfEqual {344}
	235 Move X1, X31
	236 Call Transform.get_forward, X0
	237 Move X20, 0x2563000
	238 Move W8, [X20+1089]
	239 Move V8, V0
	240 Move V9, V2
	241 Compare W8, 0
	242 JumpIfNotEqual {248}
	243 Move X0, 0x228D000
	244 Move X0, [X0+1160]
	245 Call 0x1B6F7F0
	246 Move W8, 1
	247 Move [X20+1089], W8
	248 Move X8, 0x228D000
	249 Move X8, [X8+1160]
	250 Move X0, [X8]
	251 Move W8, [X0+224]
	252 Compare W8, 0
	253 JumpIfNotEqual {255}
	254 Call 0x1B6F8F8
	255 Move X8, -18968576
	256 Multiply S0, S8, S8
	257 Move S1, W31
	258 Move V3, [X8+2916]
	259 Add S0, S0, S1
	260 Multiply S2, S9, S9
	261 Add S0, S2, S0
	262 NotImplemented "Instruction FSQRT not yet implemented."
	263 NotImplemented "Instruction FCMP not yet implemented."
	264 NotImplemented "Instruction FDIV not yet implemented."
	265 NotImplemented "Instruction FDIV not yet implemented."
	266 NotImplemented "Instruction FDIV not yet implemented."
	267 Move X20, 0x2563000
	268 Move W8, [X20+1087]
	269 Compare W8, 0
	270 JumpIfNotEqual {276}
	271 Move X0, 0x228D000
	272 Move X0, [X0+1152]
	273 Call 0x1B6F7F0
	274 Move W8, 1
	275 Move [X20+1087], W8
	276 Move X8, 0x228D000
	277 Move X8, [X8+1152]
	278 Move X8, [X8]
	279 Move X8, [X8+184]
	280 Move S0, [X8]
	281 Move S1, [X8+4]
	282 Move V2, [X8+8]
	283 Move X0, [X19+112]
	284 Move [X19+248], S0
	285 Move [X19+256], S1
	286 Move [X19+256], S2
	287 Compare X0, 0
	288 JumpIfEqual {344}
	289 Move X20, 0x228F000
	290 Move X20, [X20+752]
	291 Move X1, [X20]
	292 Call 0x2090DE8, X0
	293 Move X8, [X19+120]
	294 Move [X19+296], X0
	295 Compare X8, 0
	296 JumpIfEqual {344}
	297 Move X1, [X20]
	298 Move X22, 0x228E000
	299 Move X23, 0x228E000
	300 Move X21, 0x228F000
	301 Move X22, [X22+1104]
	302 Move X23, [X23+368]
	303 Move X21, [X21+760]
	304 Move X0, X8
	305 Call 0x2090DE8, X0
	306 Move [X19+304], X0
	307 Move X8, [X22]
	308 Move X0, [X23]
	309 Move X8, [X8+184]
	310 Move X20, [X8+168]
	311 Call 0x1B6FA0C
	312 Move X2, [X21]
	313 Move X1, X19
	314 Move X3, X31
	315 Move X21, X0
	316 Call Action..ctor, X0, X1, X2
	317 Move X0, X20
	318 Move X1, X21
	319 Move X2, X31
	320 Call Delegate.Combine, X0, X1
	321 Compare X0, 0
	322 JumpIfEqual {331}
	323 Move X1, [X23]
	324 Move X8, [X0]
	325 NotImplemented "Instruction CMP not yet implemented."
	326 Move X8, [X22]
	327 Move X8, [X8+184]
	328 Move [X8+168], X0
	329 Move X8, [X0]
	330 NotImplemented "Instruction CMP not yet implemented."
	331 Move X8, [X22]
	332 Move X8, [X8+184]
	333 Move [X8+168], X0
	334 Move X20, [X31+64]
	335 Move X19, [X31+72]
	336 Move X22, [X31+48]
	337 Move X21, [X31+56]
	338 Move X30, [X31+32]
	339 Move X23, [X31+40]
	340 Move D9, [X31+16]
	341 Move D8, [X31+24]
	342 Add X31, X31, 80
	343 Return 
	344 Call 0x1B6FA1C

Method: System.Void OnDestroy()

Disassembly:
	0x01CC1874 LDR X8, [X21]
	0x01CC1878 LDR X8, [X8 + 0xB8]
	0x01CC187C LDR X8, [X8]
	0x01CC1880 CBZ X8, 0x1CC1954
	0x01CC1884 ADRP X9, 0x228C000
	0x01CC1888 LDR X9, [X9 + 0x478]
	0x01CC188C LDR X20, [X8 + 0x48]
	0x01CC1890 LDR X0, [X9]
	0x01CC1894 LDR W9, [X0 + 0xE0]
	0x01CC1898 CBNZ W9, 0x1CC18A0
	0x01CC189C BL 0x1B6E8F8
	0x01CC18A0 MOV X0, X20
	0x01CC18A4 MOV X1, X31
	0x01CC18A8 MOV X2, X31
	0x01CC18AC BL 0x3AA0AF0
	0x01CC18B0 TBNZ X0, 0x0, 0x1CC192C
	0x01CC18B4 LDR X8, [X21]
	0x01CC18B8 LDR X8, [X8 + 0xB8]
	0x01CC18BC LDR X8, [X8]
	0x01CC18C0 CBZ X8, 0x1CC1954
	0x01CC18C4 LDR X0, [X8 + 0x48]
	0x01CC18C8 CBZ X0, 0x1CC1954
	0x01CC18CC MOV X1, X31
	0x01CC18D0 BL 0x1D874EC
	0x01CC18D4 CMP W0, 0x2
	0x01CC18D8 B.NE 0x1CC192C
	0x01CC18DC LDR X8, [X21]
	0x01CC18E0 LDR X8, [X8 + 0xB8]
	0x01CC18E4 LDR X8, [X8]
	0x01CC18E8 CBZ X8, 0x1CC1954
	0x01CC18EC CBZ X19, 0x1CC1954
	0x01CC18F0 LDR X20, [X8 + 0x48]
	0x01CC18F4 MOV X0, X19
	0x01CC18F8 MOV X1, X31
	0x01CC18FC BL 0x3AA0C88
	0x01CC1900 MOV X1, X0
	0x01CC1904 MOV X0, X20
	0x01CC1908 MOV V2.16B, V9.16B
	0x01CC190C MOV V3.16B, V8.16B
	0x01CC1910 LDP X20, X19, [X31 + 0x30]
	0x01CC1914 LDP X30, X21, [X31 + 0x20]
	0x01CC1918 LDP D9, D8, [X31 + 0x10]
	0x01CC191C MOV V0.16B, V11.16B
	0x01CC1920 MOV V1.16B, V10.16B
	0x01CC1924 LDP D11, D10, [X31], #0x40
	0x01CC1928 B 0x1CCE25C
	0x01CC192C MOV X0, X19
	0x01CC1930 MOV V2.16B, V9.16B
	0x01CC1934 MOV V3.16B, V8.16B
	0x01CC1938 LDP X20, X19, [X31 + 0x30]
	0x01CC193C LDP X30, X21, [X31 + 0x20]
	0x01CC1940 LDP D9, D8, [X31 + 0x10]
	0x01CC1944 MOV V0.16B, V11.16B
	0x01CC1948 MOV V1.16B, V10.16B
	0x01CC194C LDP D11, D10, [X31], #0x40
	0x01CC1950 B 0x1CCD9CC
	0x01CC1954 BL 0x1B6EA1C
	0x01CC1958 STR D10, [X31 - 0x40]!
	0x01CC195C STP D9, D8, [X31 + 0x8]
	0x01CC1960 STR X30, [X31 + 0x18]
	0x01CC1964 STP X22, X21, [X31 + 0x20]
	0x01CC1968 STP X20, X19, [X31 + 0x30]
	0x01CC196C ADRP X21, 0x2562000
	0x01CC1970 ADRP X22, 0x228E000
	0x01CC1974 LDRB W8, [X21 + 0x54A]
	0x01CC1978 LDR X22, [X22 + 0x360]
	0x01CC197C MOV V8.16B, V2.16B
	0x01CC1980 MOV V9.16B, V1.16B
	0x01CC1984 MOV V10.16B, V0.16B
	0x01CC1988 MOV X19, X1
	0x01CC198C MOV X20, X0
	0x01CC1990 TBNZ X8, 0x0, 0x1CC19A8
	0x01CC1994 ADRP X0, 0x228E000
	0x01CC1998 LDR X0, [X0 + 0x360]
	0x01CC199C BL 0x1B6E7F0
	0x01CC19A0 MOVZ W8, 0x1
	0x01CC19A4 STRB W8, [X21 + 0x54A]
	0x01CC19A8 LDR X0, [X22]
	0x01CC19AC BL 0x1B6EA0C
	0x01CC19B0 MOV X1, X31
	0x01CC19B4 MOV X21, X0
	0x01CC19B8 BL 0x32276F8
	0x01CC19BC STR W31, [X21 + 0x10]
	0x01CC19C0 STP X20, X19, [X21 + 0x20]
	0x01CC19C4 STP S10, S9, [X21 + 0x30]
	0x01CC19C8 STR S8, [X21 + 0x38]
	0x01CC19CC MOV X0, X21
	0x01CC19D0 LDP X20, X19, [X31 + 0x30]
	0x01CC19D4 LDP X22, X21, [X31 + 0x20]
	0x01CC19D8 LDR X30, [X31 + 0x18]
	0x01CC19DC LDP D9, D8, [X31 + 0x8]
	0x01CC19E0 LDR V10, [X31], #0x40
	0x01CC19E4 RET
	0x01CC19E8 STR D14, [X31 - 0x80]!
	0x01CC19EC STP D13, D12, [X31 + 0x10]
	0x01CC19F0 STP D11, D10, [X31 + 0x20]
	0x01CC19F4 STP D9, D8, [X31 + 0x30]
	0x01CC19F8 STP X30, X25, [X31 + 0x40]
	0x01CC19FC STP X24, X23, [X31 + 0x50]
	0x01CC1A00 STP X22, X21, [X31 + 0x60]
	0x01CC1A04 STP X20, X19, [X31 + 0x70]
	0x01CC1A08 ADRP X25, 0x2562000
	0x01CC1A0C LDRB W8, [X25 + 0x546]
	0x01CC1A10 MOV X21, X5
	0x01CC1A14 MOV W19, W4
	0x01CC1A18 MOV X22, X3
	0x01CC1A1C MOV X23, X2
	0x01CC1A20 MOV V8.16B, V2.16B
	0x01CC1A24 MOV V9.16B, V1.16B
	0x01CC1A28 MOV V10.16B, V0.16B
	0x01CC1A2C MOV W24, W1
	0x01CC1A30 MOV X20, X0
	0x01CC1A34 TBNZ X8, 0x0, 0x1CC1A4C
	0x01CC1A38 ADRP X0, 0x228E000
	0x01CC1A3C LDR X0, [X0 + 0x368]
	0x01CC1A40 BL 0x1B6E7F0
	0x01CC1A44 MOVZ W8, 0x1
	0x01CC1A48 STRB W8, [X25 + 0x546]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x2563000
	008 Move X20, 0x228E000
	009 Move W8, [X21+1345]
	010 Move X20, [X20+408]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {39}
	016 Move X0, 0x228F000
	017 Move X0, [X0+736]
	018 Call 0x1B6F7F0
	019 Move X0, 0x228E000
	020 Move X0, [X0+368]
	021 Call 0x1B6F7F0
	022 Move X0, 0x228D000
	023 Move X0, [X0+3960]
	024 Call 0x1B6F7F0
	025 Move X0, 0x228F000
	026 Move X0, [X0+760]
	027 Call 0x1B6F7F0
	028 Move X0, 0x228F000
	029 Move X0, [X0+784]
	030 Call 0x1B6F7F0
	031 Move X0, 0x228E000
	032 Move X0, [X0+408]
	033 Call 0x1B6F7F0
	034 Move X0, 0x228E000
	035 Move X0, [X0+1104]
	036 Call 0x1B6F7F0
	037 Move W8, 1
	038 Move [X21+1345], W8
	039 Move X0, [X20]
	040 Move X23, 0x228D000
	041 Move X22, 0x228F000
	042 Move X21, 0x228F000
	043 Move W8, [X0+224]
	044 Move X23, [X23+3960]
	045 Move X22, [X22+736]
	046 Move X21, [X21+784]
	047 Compare W8, 0
	048 JumpIfNotEqual {51}
	049 Call 0x1B6F8F8
	050 Move X0, [X20]
	051 Move X8, [X0+184]
	052 Move [X8], X31
	053 Move X8, [X23]
	054 Move X0, [X22]
	055 Move X8, [X8+184]
	056 Move X20, [X8+32]
	057 Call 0x1B6FA0C
	058 Move X2, [X21]
	059 Move X1, X19
	060 Move X3, X31
	061 Move X21, X0
	062 Call Action`1<NetworkInput>..ctor, X0, X1, X2
	063 Move X0, X20
	064 Move X1, X21
	065 Move X2, X31
	066 Call Delegate.Remove, X0, X1
	067 Compare X0, 0
	068 JumpIfEqual {86}
	069 Move X21, [X22]
	070 Move X20, X0
	071 Move X1, X21
	072 Call 0x1B6F8FC
	073 Compare X0, 0
	074 JumpIfEqual {84}
	075 Move X8, [X23]
	076 Move X8, [X8+184]
	077 Move [X8+32], X0
	078 Move X21, [X22]
	079 Move X0, X20
	080 Move X1, X21
	081 Call 0x1B6F8FC
	082 Compare X0, 0
	083 JumpIfNotEqual {89}
	084 Move X0, X20
	085 Move X1, X21
	086 Move X8, [X23]
	087 Move X8, [X8+184]
	088 Move [X8+32], X31
	089 Move X22, 0x228E000
	090 Move X22, [X22+1104]
	091 Move X23, 0x228E000
	092 Move X21, 0x228F000
	093 Move X8, [X22]
	094 Move X8, [X8+184]
	095 Move X23, [X23+368]
	096 Move X20, [X8+168]
	097 Move X0, [X23]
	098 Move X21, [X21+760]
	099 Call 0x1B6FA0C
	100 Move X2, [X21]
	101 Move X1, X19
	102 Move X3, X31
	103 Move X21, X0
	104 Call Action..ctor, X0, X1, X2
	105 Move X0, X20
	106 Move X1, X21
	107 Move X2, X31
	108 Call Delegate.Remove, X0, X1
	109 Compare X0, 0
	110 JumpIfEqual {120}
	111 Move X1, [X23]
	112 Move X8, [X0]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X8, [X22]
	115 Move X8, [X8+184]
	116 Move [X8+168], X0
	117 Move X8, [X0]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Call 0x1B6FCDC
	120 Move X8, [X22]
	121 Move X8, [X8+184]
	122 Move [X8+168], X0
	123 Move X20, [X31+32]
	124 Move X19, [X31+40]
	125 Move X22, [X31+16]
	126 Move X21, [X31+24]
	127 Move X30, [X31+48]
	128 Move X23, [X31+56]
	129 Return 

Method: System.Void SetRandomColor()

Disassembly:
	0x01CC1718 MOV W0, W31
	0x01CC171C MOV X1, X20
	0x01CC1720 BL 0x1CC35F4
	0x01CC1724 FMOV S1, W31
	0x01CC1728 ADD X1, X19, 0x120
	0x01CC172C MOVZ W0, 0x1
	0x01CC1730 FADD S8, S0, S1
	0x01CC1734 BL 0x1CC35F4
	0x01CC1738 FADD S0, S8, S0
	0x01CC173C FCMP S0, 0x0
	0x01CC1740 B.EQ 0x1CC176C
	0x01CC1744 LDR X0, [X19 + 0x20]
	0x01CC1748 CBZ X0, 0x1CC177C
	0x01CC174C LDP X20, X19, [X31 + 0x20]
	0x01CC1750 LDP X30, X21, [X31 + 0x10]
	0x01CC1754 MOVZ W8, 0x42B40000
	0x01CC1758 FMOV S1, W8
	0x01CC175C FMUL S0, S0, S1
	0x01CC1760 MOV X1, X31
	0x01CC1764 LDR V8, [X31], #0x30
	0x01CC1768 B 0x1D09668
	0x01CC176C LDP X20, X19, [X31 + 0x20]
	0x01CC1770 LDP X30, X21, [X31 + 0x10]
	0x01CC1774 LDR V8, [X31], #0x30
	0x01CC1778 RET
	0x01CC177C BL 0x1B6EA1C
	0x01CC1780 STP X30, X21, [X31 - 0x20]!
	0x01CC1784 STP X20, X19, [X31 + 0x10]
	0x01CC1788 LDRB W8, [X0 + 0x84]
	0x01CC178C CBZ W8, 0x1CC179C
	0x01CC1790 LDP X20, X19, [X31 + 0x10]
	0x01CC1794 LDP X30, X21, [X31], #0x20
	0x01CC1798 RET
	0x01CC179C MOV X19, X0
	0x01CC17A0 LDR X0, [X0 + 0x20]
	0x01CC17A4 CBZ X0, 0x1CC1818
	0x01CC17A8 MOV X21, X1
	0x01CC17AC MOV X1, X31
	0x01CC17B0 MOV X20, X2
	0x01CC17B4 BL 0x3A9B084
	0x01CC17B8 CBZ X0, 0x1CC1818
	0x01CC17BC MOV X1, X31
	0x01CC17C0 BL 0x3AA7658
	0x01CC17C4 FMOV S3, 1
	0x01CC17C8 MOV X0, X21
	0x01CC17CC BL 0x1CC181C
	0x01CC17D0 LDR X1, [X19 + 0xC0]
	0x01CC17D4 CBZ X1, 0x1CC17E4
	0x01CC17D8 MOV X0, X19
	0x01CC17DC MOV X2, X31
	0x01CC17E0 BL 0x3A9EAE8
	0x01CC17E4 FMOV S0, W31
	0x01CC17E8 FMOV S1, W31
	0x01CC17EC FMOV S2, W31
	0x01CC17F0 MOV X0, X19
	0x01CC17F4 MOV X1, X20
	0x01CC17F8 BL 0x1CC1958
	0x01CC17FC MOV X1, X0
	0x01CC1800 STR X0, [X19 + 0xC0]
	0x01CC1804 MOV X0, X19
	0x01CC1808 LDP X20, X19, [X31 + 0x10]
	0x01CC180C MOV X2, X31
	0x01CC1810 LDP X30, X21, [X31], #0x20
	0x01CC1814 B 0x3A9E9B0
	0x01CC1818 BL 0x1B6EA1C
	0x01CC181C STP D11, D10, [X31 - 0x40]!
	0x01CC1820 STP D9, D8, [X31 + 0x10]
	0x01CC1824 STP X30, X21, [X31 + 0x20]
	0x01CC1828 STP X20, X19, [X31 + 0x30]
	0x01CC182C ADRP X20, 0x2562000
	0x01CC1830 ADRP X21, 0x228E000
	0x01CC1834 LDRB W8, [X20 + 0x5AD]
	0x01CC1838 LDR X21, [X21 + 0x358]
	0x01CC183C MOV V8.16B, V3.16B
	0x01CC1840 MOV V9.16B, V2.16B
	0x01CC1844 MOV V10.16B, V1.16B
	0x01CC1848 MOV V11.16B, V0.16B
	0x01CC184C MOV X19, X0
	0x01CC1850 TBNZ X8, 0x0, 0x1CC1874
	0x01CC1854 ADRP X0, 0x228C000
	0x01CC1858 LDR X0, [X0 + 0x478]
	0x01CC185C BL 0x1B6E7F0
	0x01CC1860 ADRP X0, 0x228E000
	0x01CC1864 LDR X0, [X0 + 0x358]
	0x01CC1868 BL 0x1B6E7F0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x2563000
	007 Move W8, [X19+1346]
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x228E000
	014 Move X0, [X0+408]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X19+1346], W8
	018 Move X8, [X20+264]
	019 Compare X8, 0
	020 JumpIfEqual {103}
	021 Move W1, [X8+24]
	022 Move W0, W31
	023 Move X2, X31
	024 Call Random.Range, X0, X1
	025 Move X9, [X20+264]
	026 Compare X9, 0
	027 JumpIfEqual {103}
	028 Move W8, [X9+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X19, 0x228E000
	031 Move X19, [X19+408]
	032 Add X9, X9, W0
	033 Move V0, [X9+2]
	034 Move X8, [X19]
	035 Move [X31], V0
	036 Move W10, [X8+224]
	037 Compare W10, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1B6F8F8
	041 Move X21, 0x2563000
	042 Move W8, [X21+1473]
	043 Compare W8, 0
	044 JumpIfNotEqual {50}
	045 Move X0, 0x228E000
	046 Move X0, [X0+408]
	047 Call 0x1B6F7F0
	048 Move W8, 1
	049 Move [X21+1473], W8
	050 Move X0, [X19]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1B6F8F8
	055 Move X0, [X19]
	056 Move X8, [X0+184]
	057 Move V0, [X31]
	058 Move X21, 0x2563000
	059 Move [X8+8], V0
	060 Move W8, [X21+1298]
	061 Move X20, [X20+56]
	062 Compare W8, 0
	063 JumpIfNotEqual {69}
	064 Move X0, X19
	065 Call 0x1B6F7F0
	066 Move X0, [X19]
	067 Move W8, 1
	068 Move [X21+1298], W8
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {74}
	072 Call 0x1B6F8F8
	073 Move X0, [X19]
	074 Compare X20, 0
	075 JumpIfEqual {103}
	076 Move X8, [X0+184]
	077 Move X0, X20
	078 Move S2, [X8+16]
	079 Move S3, [X8+20]
	080 Move S0, [X8+8]
	081 Move S1, [X8+12]
	082 Call PlayerView.SetColor, X0, X1
	083 Move X8, [X19]
	084 Move X8, [X8+184]
	085 Move X8, [X8+40]
	086 Compare X8, 0
	087 JumpIfEqual {97}
	088 Move X2, [X8+24]
	089 Move X0, [X8+64]
	090 Move X1, [X8+40]
	091 Move X20, [X31+32]
	092 Move X19, [X31+40]
	093 Move X30, [X31+16]
	094 Move X21, [X31+24]
	095 Add X31, X31, 48
	096 CallNoReturn X2
	097 Move X20, [X31+32]
	098 Move X19, [X31+40]
	099 Move X30, [X31+16]
	100 Move X21, [X31+24]
	101 Add X31, X31, 48
	102 Return 
	103 Call 0x1B6FA1C
	104 Call 0x1B6FA24

Method: System.Void MovePlayerDelta(UnityEngine.Vector3 moveDelta)

Disassembly:
	0x01CC1B48 STP D9, D8, [X31 + 0x30]
	0x01CC1B4C STP X30, X25, [X31 + 0x40]
	0x01CC1B50 STP X24, X23, [X31 + 0x50]
	0x01CC1B54 STP X22, X21, [X31 + 0x60]
	0x01CC1B58 STP X20, X19, [X31 + 0x70]
	0x01CC1B5C ADRP X24, 0x2562000
	0x01CC1B60 LDRB W8, [X24 + 0x548]
	0x01CC1B64 MOV X21, X4
	0x01CC1B68 MOV X20, X3
	0x01CC1B6C MOV X22, X2
	0x01CC1B70 MOV V8.16B, V2.16B
	0x01CC1B74 MOV V9.16B, V1.16B
	0x01CC1B78 MOV V10.16B, V0.16B
	0x01CC1B7C MOV W23, W1
	0x01CC1B80 MOV X19, X0
	0x01CC1B84 TBNZ X8, 0x0, 0x1CC1BCC
	0x01CC1B88 ADRP X0, 0x228C000
	0x01CC1B8C LDR X0, [X0 + 0x4C0]
	0x01CC1B90 BL 0x1B6E7F0
	0x01CC1B94 ADRP X0, 0x228E000
	0x01CC1B98 LDR X0, [X0 + 0x368]
	0x01CC1B9C BL 0x1B6E7F0
	0x01CC1BA0 ADRP X0, 0x228E000
	0x01CC1BA4 LDR X0, [X0 + 0x370]
	0x01CC1BA8 BL 0x1B6E7F0
	0x01CC1BAC ADRP X0, 0x228C000
	0x01CC1BB0 LDR X0, [X0 + 0xBC8]
	0x01CC1BB4 BL 0x1B6E7F0
	0x01CC1BB8 ADRP X0, 0x228E000
	0x01CC1BBC LDR X0, [X0 + 0x378]
	0x01CC1BC0 BL 0x1B6E7F0
	0x01CC1BC4 MOVZ W8, 0x1
	0x01CC1BC8 STRB W8, [X24 + 0x548]
	0x01CC1BCC LDR X0, [X19 + 0x58]
	0x01CC1BD0 CBZ X0, 0x1CC1E84
	0x01CC1BD4 ADRP X25, 0x228C000
	0x01CC1BD8 LDR X25, [X25 + 0xBC8]
	0x01CC1BDC MOV X1, X31
	0x01CC1BE0 BL 0x3AA7658
	0x01CC1BE4 LDR X0, [X25]
	0x01CC1BE8 LDR X24, [X19 + 0xD8]
	0x01CC1BEC MOVZ W1, 0x1
	0x01CC1BF0 MOV V11.16B, V0.16B
	0x01CC1BF4 MOV V12.16B, V1.16B
	0x01CC1BF8 MOV V13.16B, V2.16B
	0x01CC1BFC BL 0x1B6E868
	0x01CC1C00 CBZ X0, 0x1CC1E84
	0x01CC1C04 LDR W8, [X0 + 0x18]
	0x01CC1C08 CBZ W8, 0x1CC1E88
	0x01CC1C0C ADRP X8, 0x228E000
	0x01CC1C10 LDR X8, [X8 + 0x378]
	0x01CC1C14 ADRP X25, 0x228C000
	0x01CC1C18 MOV X1, X31
	0x01CC1C1C LDR X8, [X8]
	0x01CC1C20 LDR X25, [X25 + 0x4C0]
	0x01CC1C24 STR X8, [X0 + 0x20]
	0x01CC1C28 BL 0x3A9DEB8
	0x01CC1C2C LDR X8, [X25]
	0x01CC1C30 MOV W25, W0
	0x01CC1C34 LDR W9, [X8 + 0xE0]
	0x01CC1C38 CBNZ W9, 0x1CC1C44
	0x01CC1C3C MOV X0, X8
	0x01CC1C40 BL 0x1B6E8F8
	0x01CC1C44 ADRP X8, 0xFFFFFFFFFEDE8000
	0x01CC1C48 LDR V14, [X8 + 0xAB0]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x2563000
	009 Move X21, 0x228F000
	010 Move W8, [X20+1347]
	011 Move X21, [X21+792]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x228F000
	021 Move X0, [X0+792]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X20+1347], W8
	025 Move X8, [X21]
	026 Move X8, [X8+184]
	027 Move W9, [X8]
	028 Compare W9, 0
	029 JumpIfEqual {39}
	030 Move X19, [X8+8]
	031 Compare X19, 0
	032 JumpIfEqual {82}
	033 Move X0, X19
	034 Move X1, X31
	035 Call Transform.get_position, X0
	036 Add S0, S10, S0
	037 Add S1, S9, S1
	038 Add S2, S8, S2
	039 Move X0, [X19+32]
	040 Compare X0, 0
	041 JumpIfEqual {82}
	042 Move X20, [X19+48]
	043 Move X1, X31
	044 Call Component.get_transform, X0
	045 Compare X0, 0
	046 JumpIfEqual {82}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Compare X20, 0
	050 JumpIfEqual {82}
	051 Add S2, S8, S2
	052 Add S1, S9, S1
	053 Add S0, S10, S0
	054 Move X0, X20
	055 Move X1, X31
	056 Call Rigidbody.MovePosition, X0, X1
	057 Move X0, [X19+32]
	058 Compare X0, 0
	059 JumpIfEqual {82}
	060 Move X1, X31
	061 Call Component.get_transform, X0
	062 Move X8, [X19+48]
	063 Compare X8, 0
	064 JumpIfEqual {82}
	065 Move X19, X0
	066 Move X0, X8
	067 Move X1, X31
	068 Call Rigidbody.get_position, X0
	069 Compare X19, 0
	070 JumpIfEqual {82}
	071 Move X0, X19
	072 Move X20, [X31+48]
	073 Move X19, [X31+56]
	074 Move X30, [X31+32]
	075 Move X21, [X31+40]
	076 Move D9, [X31+16]
	077 Move D8, [X31+24]
	078 Move X1, X31
	079 Move V10, [X31+64]
	080 Call Transform.set_position, X0, X1
	081 Return 
	082 Call 0x1B6FA1C

Method: System.Void MovePlayerTo(UnityEngine.Vector3 position)

Disassembly:
	0x01CC1C4C MOV V0.16B, V11.16B
	0x01CC1C50 MOV V1.16B, V12.16B
	0x01CC1C54 MOV V2.16B, V13.16B
	0x01CC1C58 MOV V3.16B, V14.16B
	0x01CC1C5C MOV X0, X24
	0x01CC1C60 MOV W1, W25
	0x01CC1C64 MOV X2, X31
	0x01CC1C68 BL 0x3AF5724
	0x01CC1C6C CMP W0, 0x0
	0x01CC1C70 B.GT 0x1CC1C7C
	0x01CC1C74 LDRB W8, [X19 + 0x84]
	0x01CC1C78 CBZ W8, 0x1CC1CA0
	0x01CC1C7C LDP X20, X19, [X31 + 0x70]
	0x01CC1C80 LDP X22, X21, [X31 + 0x60]
	0x01CC1C84 LDP X24, X23, [X31 + 0x50]
	0x01CC1C88 LDP X30, X25, [X31 + 0x40]
	0x01CC1C8C LDP D9, D8, [X31 + 0x30]
	0x01CC1C90 LDP D11, D10, [X31 + 0x20]
	0x01CC1C94 LDP D13, D12, [X31 + 0x10]
	0x01CC1C98 LDR V14, [X31], #0x80
	0x01CC1C9C RET
	0x01CC1CA0 FMOV S0, 0.5

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+48]
	005 Compare X0, 0
	006 JumpIfEqual {29}
	007 Move X1, X31
	008 Call Rigidbody.MovePosition, X0, X1
	009 Move X0, [X19+32]
	010 Compare X0, 0
	011 JumpIfEqual {29}
	012 Move X1, X31
	013 Call Component.get_transform, X0
	014 Move X8, [X19+48]
	015 Compare X8, 0
	016 JumpIfEqual {29}
	017 Move X19, X0
	018 Move X0, X8
	019 Move X1, X31
	020 Call Rigidbody.get_position, X0
	021 Compare X19, 0
	022 JumpIfEqual {29}
	023 Move X0, X19
	024 Move X1, X31
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Call Transform.set_position, X0, X1
	028 Return 
	029 Call 0x1B6FA1C

Method: System.Void HandleMenuButtonPressed()

Disassembly:
	0x01CC1CA4 MOV W0, W31
	0x01CC1CA8 MOV V1.16B, V14.16B
	0x01CC1CAC BL 0x1CC220C
	0x01CC1CB0 FMOV S0, 0.5

ISIL:
	001 Move W8, [X0+276]
	002 Xor W8, W8, 1
	003 Move [X0+276], W8
	004 Return 

Method: System.Void FixedUpdate()

Disassembly:
	0x01CC1CB4 MOVZ W0, 0x1
	0x01CC1CB8 MOV V1.16B, V14.16B
	0x01CC1CBC BL 0x1CC220C
	0x01CC1CC0 LDR W8, [X19 + 0x80]
	0x01CC1CC4 MOV X0, X19
	0x01CC1CC8 SUB W1, W8, W23
	0x01CC1CCC BL 0x1CC05A4
	0x01CC1CD0 LDR X0, [X19 + 0x38]
	0x01CC1CD4 CBZ X0, 0x1CC1E84
	0x01CC1CD8 BL 0x1CC2248
	0x01CC1CDC ADRP X8, 0x228E000
	0x01CC1CE0 LDR X8, [X8 + 0x370]
	0x01CC1CE4 LDR X0, [X8]
	0x01CC1CE8 LDR W8, [X0 + 0xE0]
	0x01CC1CEC CBNZ W8, 0x1CC1CF4
	0x01CC1CF0 BL 0x1B6E8F8
	0x01CC1CF4 MOV X0, X31
	0x01CC1CF8 BL 0x1CF0314
	0x01CC1CFC LDR W8, [X19 + 0x80]
	0x01CC1D00 CMP W8, 0x1
	0x01CC1D04 CSET W9, LT
	0x01CC1D08 CMP W8, 0x0
	0x01CC1D0C STRB W9, [X19 + 0x84]
	0x01CC1D10 B.LE 0x1CC1D64
	0x01CC1D14 MOV X0, X22
	0x01CC1D18 MOV X1, X31
	0x01CC1D1C BL 0x30905F0
	0x01CC1D20 TBNZ X0, 0x0, 0x1CC1D3C
	0x01CC1D24 FMOV S3, 1
	0x01CC1D28 MOV X0, X22
	0x01CC1D2C MOV V0.16B, V10.16B
	0x01CC1D30 MOV V1.16B, V9.16B
	0x01CC1D34 MOV V2.16B, V8.16B
	0x01CC1D38 BL 0x1CC2284
	0x01CC1D3C LDR X8, [X19 + 0x90]
	0x01CC1D40 CBNZ X8, 0x1CC1DC8
	0x01CC1D44 MOV X0, X19
	0x01CC1D48 BL 0x1CC2310
	0x01CC1D4C MOV X1, X0
	0x01CC1D50 STR X0, [X19 + 0x90]
	0x01CC1D54 MOV X0, X19
	0x01CC1D58 MOV X2, X31
	0x01CC1D5C BL 0x3A9E9B0
	0x01CC1D60 B 0x1CC1DC8
	0x01CC1D64 LDR X1, [X19 + 0xC0]
	0x01CC1D68 CBZ X1, 0x1CC1D78
	0x01CC1D6C MOV X0, X19
	0x01CC1D70 MOV X2, X31
	0x01CC1D74 BL 0x3A9EAE8
	0x01CC1D78 LDP S0, S1, [X19 + 0x98]
	0x01CC1D7C LDR V2, [X19 + 0xA0]
	0x01CC1D80 MOV X0, X19
	0x01CC1D84 MOV X1, X21
	0x01CC1D88 BL 0x1CC1958
	0x01CC1D8C MOV X1, X0
	0x01CC1D90 STR X0, [X19 + 0xC0]
	0x01CC1D94 MOV X0, X19
	0x01CC1D98 MOV X2, X31
	0x01CC1D9C BL 0x3A9E9B0
	0x01CC1DA0 MOV X0, X20
	0x01CC1DA4 MOV X1, X31
	0x01CC1DA8 BL 0x30905F0
	0x01CC1DAC TBNZ X0, 0x0, 0x1CC1DC8
	0x01CC1DB0 FMOV S3, 1
	0x01CC1DB4 MOV X0, X20
	0x01CC1DB8 MOV V0.16B, V10.16B
	0x01CC1DBC MOV V1.16B, V9.16B
	0x01CC1DC0 MOV V2.16B, V8.16B
	0x01CC1DC4 BL 0x1CC2284
	0x01CC1DC8 LDR X0, [X19 + 0x50]
	0x01CC1DCC CBZ X0, 0x1CC1E84
	0x01CC1DD0 MOV X1, X31
	0x01CC1DD4 BL 0x3AA7658
	0x01CC1DD8 MOVZ W8, 0x43B40000
	0x01CC1DDC MOV V8.16B, V0.16B
	0x01CC1DE0 MOV V9.16B, V1.16B
	0x01CC1DE4 FMOV S0, W31
	0x01CC1DE8 FMOV S1, W8
	0x01CC1DEC MOV X0, X31
	0x01CC1DF0 MOV V10.16B, V2.16B
	0x01CC1DF4 BL 0x3A98CD0
	0x01CC1DF8 ADRP X8, 0xFFFFFFFFFEDE8000
	0x01CC1DFC LDR V1, [X8 + 0xAF4]
	0x01CC1E00 FMOV S2, W31
	0x01CC1E04 MOV X0, X31
	0x01CC1E08 FMUL S1, S0, S1
	0x01CC1E0C FMOV S0, W31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2563000
	007 Move X21, 0x228F000
	008 Move W8, [X20+1348]
	009 Move X21, [X21+800]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x228F000
	016 Move X0, [X0+800]
	017 Call 0x1B6F7F0
	018 Move X0, 0x228D000
	019 Move X0, [X0+1144]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X20+1348], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1B6F8F8
	028 Move X0, [X21]
	029 Move X8, [X0+184]
	030 Move X22, 0x228D000
	031 Move X8, [X8+8]
	032 Move X22, [X22+1144]
	033 Compare X8, 0
	034 JumpIfEqual {36}
	035 Move X20, [X8+32]
	036 Move X20, X31
	037 Move X0, [X22]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1B6F8F8
	042 Move X0, X20
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Inequality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {109}
	050 Move X0, [X21]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1B6F8F8
	055 Move X0, [X21]
	056 Move X8, [X0+184]
	057 Move X8, [X8+8]
	058 Compare X8, 0
	059 JumpIfEqual {115}
	060 Move X8, [X8+32]
	061 Compare X8, 0
	062 JumpIfEqual {115}
	063 Move W8, [X8+120]
	064 Compare W8, 0
	065 JumpIfEqual {109}
	066 Move X0, [X22]
	067 Move X20, [X19+48]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1B6F8F8
	072 Move X0, X20
	073 Move X1, X31
	074 Move X2, X31
	075 Call Object.op_Inequality, X0, X1
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {109}
	080 Move X0, [X21]
	081 Move X19, [X19+48]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {87}
	085 Call 0x1B6F8F8
	086 Move X0, [X21]
	087 Move X8, [X0+184]
	088 Move X8, [X8+8]
	089 Compare X8, 0
	090 JumpIfEqual {115}
	091 Move X8, [X8+32]
	092 Compare X8, 0
	093 JumpIfEqual {115}
	094 Compare X19, 0
	095 JumpIfEqual {115}
	096 Move S1, [X8+128]
	097 Move S2, [X8+132]
	098 Move V0, [X8+124]
	099 Move X0, X19
	100 Move X20, [X31+32]
	101 Move X19, [X31+40]
	102 Move X22, [X31+16]
	103 Move X21, [X31+24]
	104 Move W1, 5
	105 Move X2, X31
	106 Move X30, [X31+48]
	107 Call Rigidbody.AddForce, X0, X1, X2
	108 Return 
	109 Move X20, [X31+32]
	110 Move X19, [X31+40]
	111 Move X22, [X31+16]
	112 Move X21, [X31+24]
	113 Move X30, [X31+48]
	114 Return 
	115 Call 0x1B6FA1C

Method: System.Void Update()

Disassembly:
	0x01CC1E10 BL 0x3A928DC
	0x01CC1E14 ADRP X8, 0x228E000
	0x01CC1E18 LDR X8, [X8 + 0x368]
	0x01CC1E1C MOV V11.16B, V0.16B
	0x01CC1E20 MOV V12.16B, V1.16B
	0x01CC1E24 MOV V13.16B, V2.16B
	0x01CC1E28 LDR X0, [X8]
	0x01CC1E2C MOV V14.16B, V3.16B
	0x01CC1E30 LDR W8, [X0 + 0xE0]
	0x01CC1E34 CBNZ W8, 0x1CC1E3C
	0x01CC1E38 BL 0x1B6E8F8
	0x01CC1E3C MOV V0.16B, V8.16B
	0x01CC1E40 MOV V1.16B, V9.16B
	0x01CC1E44 MOV V2.16B, V10.16B
	0x01CC1E48 MOV V3.16B, V11.16B
	0x01CC1E4C MOV V4.16B, V12.16B
	0x01CC1E50 MOV V5.16B, V13.16B
	0x01CC1E54 LDP X20, X19, [X31 + 0x70]
	0x01CC1E58 LDP X22, X21, [X31 + 0x60]
	0x01CC1E5C LDP X24, X23, [X31 + 0x50]
	0x01CC1E60 LDP X30, X25, [X31 + 0x40]
	0x01CC1E64 LDP D9, D8, [X31 + 0x30]
	0x01CC1E68 LDP D11, D10, [X31 + 0x20]
	0x01CC1E6C LDP D13, D12, [X31 + 0x10]
	0x01CC1E70 MOVZ W0, 0x1
	0x01CC1E74 MOVZ W1, 0x1
	0x01CC1E78 MOV V6.16B, V14.16B
	0x01CC1E7C LDR V14, [X31], #0x80
	0x01CC1E80 B 0x1CC1E8C
	0x01CC1E84 BL 0x1B6EA1C
	0x01CC1E88 BL 0x1B6EA24
	0x01CC1E8C SUB X31, X31, 0xD0
	0x01CC1E90 STP D15, D14, [X31 + 0x50]
	0x01CC1E94 STP D13, D12, [X31 + 0x60]
	0x01CC1E98 STP D11, D10, [X31 + 0x70]
	0x01CC1E9C STP D9, D8, [X31 + 0x80]
	0x01CC1EA0 STP X30, X25, [X31 + 0x90]
	0x01CC1EA4 STP X24, X23, [X31 + 0xA0]
	0x01CC1EA8 STP X22, X21, [X31 + 0xB0]
	0x01CC1EAC STP X20, X19, [X31 + 0xC0]
	0x01CC1EB0 ADRP X21, 0x2562000
	0x01CC1EB4 LDRB W8, [X21 + 0x599]
	0x01CC1EB8 MOV W20, W1
	0x01CC1EBC MOV V11.16B, V6.16B
	0x01CC1EC0 MOV V15.16B, V5.16B
	0x01CC1EC4 MOV V10.16B, V4.16B
	0x01CC1EC8 MOV V8.16B, V3.16B
	0x01CC1ECC MOV V14.16B, V2.16B
	0x01CC1ED0 MOV V13.16B, V1.16B
	0x01CC1ED4 MOV V12.16B, V0.16B
	0x01CC1ED8 MOV W19, W0
	0x01CC1EDC TBNZ X8, 0x0, 0x1CC1F00
	0x01CC1EE0 ADRP X0, 0x228C000
	0x01CC1EE4 LDR X0, [X0 + 0x4C0]
	0x01CC1EE8 BL 0x1B6E7F0
	0x01CC1EEC ADRP X0, 0x228E000
	0x01CC1EF0 LDR X0, [X0 + 0x368]
	0x01CC1EF4 BL 0x1B6E7F0
	0x01CC1EF8 MOVZ W8, 0x1
	0x01CC1EFC STRB W8, [X21 + 0x599]
	0x01CC1F00 ADRP X22, 0x228E000
	0x01CC1F04 LDR X22, [X22 + 0x368]
	0x01CC1F08 MOVI V0.2D, 0x0
	0x01CC1F0C STUR V0, [X31 + 0x3C]
	0x01CC1F10 STP V0, V0, [X31 + 0x20]
	0x01CC1F14 TBZ X20, 0x0, 0x1CC2168
	0x01CC1F18 ADRP X24, 0x2562000
	0x01CC1F1C LDRB W8, [X24 + 0x510]
	0x01CC1F20 STR S8, [X31 + 0x1C]
	0x01CC1F24 STR S15, [X31 + 0x14]
	0x01CC1F28 CBNZ W8, 0x1CC1F40
	0x01CC1F2C ADRP X0, 0x228C000
	0x01CC1F30 LDR X0, [X0 + 0x480]
	0x01CC1F34 BL 0x1B6E7F0
	0x01CC1F38 MOVZ W8, 0x1
	0x01CC1F3C STRB W8, [X24 + 0x510]
	0x01CC1F40 ADRP X20, 0x228C000
	0x01CC1F44 LDR X20, [X20 + 0x480]
	0x01CC1F48 LDR X0, [X22]
	0x01CC1F4C LDR X8, [X20]
	0x01CC1F50 LDR W9, [X0 + 0xE0]
	0x01CC1F54 LDR X8, [X8 + 0xB8]
	0x01CC1F58 LDP S8, S15, [X8 + 0x24]
	0x01CC1F5C LDR V9, [X8 + 0x2C]
	0x01CC1F60 CBNZ W9, 0x1CC1F6C
	0x01CC1F64 BL 0x1B6E8F8
	0x01CC1F68 LDR X0, [X22]
	0x01CC1F6C LDR X8, [X0 + 0xB8]
	0x01CC1F70 LDR X8, [X8 + 0x8]
	0x01CC1F74 CBZ X8, 0x1CC21D8
	0x01CC1F78 LDR W0, [X8 + 0x58]
	0x01CC1F7C MOV X1, X31
	0x01CC1F80 BL 0x3A9DE68
	0x01CC1F84 ADRP X25, 0x228C000
	0x01CC1F88 LDR X25, [X25 + 0x4C0]
	0x01CC1F8C MOV W21, W0
	0x01CC1F90 LDR X8, [X25]
	0x01CC1F94 LDR W9, [X8 + 0xE0]
	0x01CC1F98 CBNZ W9, 0x1CC1FA4
	0x01CC1F9C MOV X0, X8
	0x01CC1FA0 BL 0x1B6E8F8
	0x01CC1FA4 ADD X0, X31, 0x20
	0x01CC1FA8 FMOV S6, 10
	0x01CC1FAC MOV V0.16B, V12.16B
	0x01CC1FB0 MOV V1.16B, V13.16B
	0x01CC1FB4 MOV V2.16B, V14.16B
	0x01CC1FB8 MOV V3.16B, V8.16B
	0x01CC1FBC MOV V4.16B, V15.16B
	0x01CC1FC0 MOV V5.16B, V9.16B
	0x01CC1FC4 MOV W1, W21
	0x01CC1FC8 MOV X2, X31
	0x01CC1FCC BL 0x3AF3258
	0x01CC1FD0 STR S10, [X31 + 0x18]
	0x01CC1FD4 TBZ X0, 0x0, 0x1CC2018
	0x01CC1FD8 ADD X0, X31, 0x20
	0x01CC1FDC MOV X1, X31
	0x01CC1FE0 BL 0x3AF6270
	0x01CC1FE4 ADRP X21, 0x2562000
	0x01CC1FE8 LDRB W8, [X21 + 0x442]
	0x01CC1FEC LDR V15, [X31 + 0x14]
	0x01CC1FF0 MOV V8.16B, V0.16B
	0x01CC1FF4 MOV V9.16B, V1.16B
	0x01CC1FF8 MOV V10.16B, V2.16B
	0x01CC1FFC CBNZ W8, 0x1CC2134
	0x01CC2000 ADRP X0, 0x228B000
	0x01CC2004 LDR X0, [X0 + 0x480]
	0x01CC2008 BL 0x1B6E7F0
	0x01CC200C MOVZ W8, 0x1
	0x01CC2010 STRB W8, [X21 + 0x442]
	0x01CC2014 B 0x1CC2134
	0x01CC2018 ADRP X23, 0x2561000
	0x01CC201C LDRB W8, [X23 + 0x442]
	0x01CC2020 STR S11, [X31 + 0x10]
	0x01CC2024 CBNZ W8, 0x1CC203C
	0x01CC2028 ADRP X0, 0x228B000
	0x01CC202C LDR X0, [X0 + 0x480]
	0x01CC2030 BL 0x1B6E7F0
	0x01CC2034 MOVZ W8, 0x1
	0x01CC2038 STRB W8, [X23 + 0x442]
	0x01CC203C LDR X8, [X20]
	0x01CC2040 LDRB W9, [X24 + 0x510]
	0x01CC2044 LDR X8, [X8 + 0xB8]
	0x01CC2048 LDP S10, S11, [X8 + 0x18]
	0x01CC204C LDR V15, [X8 + 0x20]
	0x01CC2050 CBNZ W9, 0x1CC206C
	0x01CC2054 MOV X0, X20
	0x01CC2058 BL 0x1B6E7F0
	0x01CC205C LDR X8, [X20]
	0x01CC2060 MOVZ W9, 0x1
	0x01CC2064 STRB W9, [X24 + 0x510]
	0x01CC2068 LDR X8, [X8 + 0xB8]
	0x01CC206C LDR X0, [X22]
	0x01CC2070 LDP S8, S0, [X8 + 0x24]
	0x01CC2074 LDR V9, [X8 + 0x2C]
	0x01CC2078 LDR W9, [X0 + 0xE0]
	0x01CC207C STR S0, [X31 + 0xC]
	0x01CC2080 CBNZ W9, 0x1CC208C
	0x01CC2084 BL 0x1B6E8F8
	0x01CC2088 LDR X0, [X22]
	0x01CC208C LDR X8, [X0 + 0xB8]
	0x01CC2090 LDR X8, [X8 + 0x8]
	0x01CC2094 CBZ X8, 0x1CC21D8
	0x01CC2098 LDR W0, [X8 + 0x58]
	0x01CC209C MOV X1, X31
	0x01CC20A0 FADD S10, S12, S10
	0x01CC20A4 FADD S11, S13, S11
	0x01CC20A8 FADD S15, S14, S15
	0x01CC20AC BL 0x3A9DE68
	0x01CC20B0 LDR X8, [X25]
	0x01CC20B4 MOV W21, W0
	0x01CC20B8 LDR W9, [X8 + 0xE0]
	0x01CC20BC CBNZ W9, 0x1CC20C8
	0x01CC20C0 MOV X0, X8
	0x01CC20C4 BL 0x1B6E8F8
	0x01CC20C8 LDR V4, [X31 + 0xC]
	0x01CC20CC ADD X0, X31, 0x20
	0x01CC20D0 FMOV S6, 10
	0x01CC20D4 MOV V0.16B, V10.16B
	0x01CC20D8 MOV V1.16B, V11.16B
	0x01CC20DC MOV V2.16B, V15.16B
	0x01CC20E0 MOV V3.16B, V8.16B
	0x01CC20E4 MOV V5.16B, V9.16B
	0x01CC20E8 MOV W1, W21
	0x01CC20EC MOV X2, X31
	0x01CC20F0 BL 0x3AF3258
	0x01CC20F4 LDP S11, S15, [X31 + 0x10]
	0x01CC20F8 LDP S10, S8, [X31 + 0x18]
	0x01CC20FC TBZ X0, 0x0, 0x1CC2168
	0x01CC2100 ADD X0, X31, 0x20
	0x01CC2104 MOV X1, X31
	0x01CC2108 BL 0x3AF6270
	0x01CC210C LDRB W8, [X23 + 0x442]
	0x01CC2110 MOV V8.16B, V0.16B
	0x01CC2114 MOV V9.16B, V1.16B
	0x01CC2118 MOV V10.16B, V2.16B
	0x01CC211C CBNZ W8, 0x1CC2134
	0x01CC2120 ADRP X0, 0x228B000
	0x01CC2124 LDR X0, [X0 + 0x480]
	0x01CC2128 BL 0x1B6E7F0
	0x01CC212C MOVZ W8, 0x1
	0x01CC2130 STRB W8, [X23 + 0x442]
	0x01CC2134 LDR X8, [X20]
	0x01CC2138 ADRP X9, 0xFFFFFFFFFEDE7000
	0x01CC213C LDR V0, [X9 + 0xBE4]
	0x01CC2140 LDR X8, [X8 + 0xB8]
	0x01CC2144 LDP S1, S2, [X8 + 0x18]
	0x01CC2148 LDR V3, [X8 + 0x20]
	0x01CC214C FMUL S1, S1, S0
	0x01CC2150 FMUL S2, S2, S0
	0x01CC2154 FMUL S0, S3, S0
	0x01CC2158 FADD S12, S8, S1
	0x01CC215C FADD S14, S10, S0
	0x01CC2160 LDP S10, S8, [X31 + 0x18]
	0x01CC2164 FADD S13, S9, S2
	0x01CC2168 LDR X0, [X22]
	0x01CC216C LDR W8, [X0 + 0xE0]
	0x01CC2170 CBNZ W8, 0x1CC217C
	0x01CC2174 BL 0x1B6E8F8
	0x01CC2178 LDR X0, [X22]
	0x01CC217C LDR X8, [X0 + 0xB8]
	0x01CC2180 LDR X8, [X8 + 0x8]
	0x01CC2184 CBZ X8, 0x1CC21D8
	0x01CC2188 LDR X0, [X8 + 0x48]
	0x01CC218C MOV W1, W19
	0x01CC2190 MOV V0.16B, V12.16B
	0x01CC2194 MOV V1.16B, V13.16B
	0x01CC2198 MOV V2.16B, V14.16B
	0x01CC219C MOV V3.16B, V8.16B
	0x01CC21A0 MOV V4.16B, V10.16B
	0x01CC21A4 MOV V5.16B, V15.16B
	0x01CC21A8 MOV V6.16B, V11.16B
	0x01CC21AC BL 0x1CCC0F0
	0x01CC21B0 LDP X20, X19, [X31 + 0xC0]
	0x01CC21B4 LDP X22, X21, [X31 + 0xB0]
	0x01CC21B8 LDP X24, X23, [X31 + 0xA0]
	0x01CC21BC LDP X30, X25, [X31 + 0x90]
	0x01CC21C0 LDP D9, D8, [X31 + 0x80]
	0x01CC21C4 LDP D11, D10, [X31 + 0x70]
	0x01CC21C8 LDP D13, D12, [X31 + 0x60]
	0x01CC21CC LDP D15, D14, [X31 + 0x50]
	0x01CC21D0 ADD X31, X31, 0xD0
	0x01CC21D4 RET
	0x01CC21D8 BL 0x1B6EA1C
	0x01CC21DC LDR V4, [X31]
	0x01CC21E0 ADD X8, X31, 0x4
	0x01CC21E4 LDR V3, [X31 + 0x8]
	0x01CC21E8 LDR V5, [X0 + 0x98]
	0x01CC21EC LDR V6, [X0 + 0xA0]
	0x01CC21F0 UNIMPLEMENTED
	0x01CC21F4 FADD S3, S3, S6
	0x01CC21F8 FADD V4.2S, V4.2S, V5.2S
	0x01CC21FC STR D4, [X0 + 0x98]
	0x01CC2200 STR S3, [X0 + 0xA0]
	0x01CC2204 B 0x1CC1B3C
	0x01CC2208 B 0x1CC1B3C
	0x01CC220C STP D9, D8, [X31 - 0x20]!
	0x01CC2210 STR X30, [X31 + 0x10]
	0x01CC2214 MOV V8.16B, V1.16B
	0x01CC2218 MOV V9.16B, V0.16B
	0x01CC221C BL 0x1CCB374
	0x01CC2220 CBZ X0, 0x1CC2244
	0x01CC2224 LDR X8, [X0]
	0x01CC2228 LDR X30, [X31 + 0x10]
	0x01CC222C MOV V0.16B, V9.16B
	0x01CC2230 MOV V1.16B, V8.16B
	0x01CC2234 LDR X2, [X8 + 0x228]
	0x01CC2238 LDR X1, [X8 + 0x230]
	0x01CC223C LDP D9, D8, [X31], #0x20
	0x01CC2240 BR X2
	0x01CC2244 BL 0x1B6EA1C
	0x01CC2248 STP X30, X19, [X31 - 0x10]!
	0x01CC224C LDR X1, [X0 + 0x1A0]
	0x01CC2250 MOV X19, X0
	0x01CC2254 CBZ X1, 0x1CC2264
	0x01CC2258 MOV X0, X19
	0x01CC225C MOV X2, X31
	0x01CC2260 BL 0x3A9EAE8
	0x01CC2264 MOV X0, X19
	0x01CC2268 BL 0x1CC55F0
	0x01CC226C MOV X1, X0
	0x01CC2270 STR X0, [X19 + 0x1A0]
	0x01CC2274 MOV X0, X19
	0x01CC2278 MOV X2, X31
	0x01CC227C LDP X30, X19, [X31], #0x10
	0x01CC2280 B 0x3A9E9B0
	0x01CC2284 STP D11, D10, [X31 - 0x40]!
	0x01CC2288 STP D9, D8, [X31 + 0x10]
	0x01CC228C STP X30, X21, [X31 + 0x20]
	0x01CC2290 STP X20, X19, [X31 + 0x30]
	0x01CC2294 ADRP X20, 0x2561000
	0x01CC2298 ADRP X21, 0x228D000
	0x01CC229C LDRB W8, [X20 + 0x5AE]
	0x01CC22A0 LDR X21, [X21 + 0x358]
	0x01CC22A4 MOV V8.16B, V3.16B
	0x01CC22A8 MOV V9.16B, V2.16B
	0x01CC22AC MOV V10.16B, V1.16B
	0x01CC22B0 MOV V11.16B, V0.16B
	0x01CC22B4 MOV X19, X0
	0x01CC22B8 TBNZ X8, 0x0, 0x1CC22D0
	0x01CC22BC ADRP X0, 0x228D000
	0x01CC22C0 LDR X0, [X0 + 0x358]
	0x01CC22C4 BL 0x1B6E7F0
	0x01CC22C8 MOVZ W8, 0x1
	0x01CC22CC STRB W8, [X20 + 0x5AE]
	0x01CC22D0 LDR X8, [X21]
	0x01CC22D4 LDR X8, [X8 + 0xB8]
	0x01CC22D8 LDR X8, [X8]
	0x01CC22DC CBZ X8, 0x1CC230C
	0x01CC22E0 LDR X0, [X8 + 0x48]
	0x01CC22E4 MOV X1, X19
	0x01CC22E8 MOV V2.16B, V9.16B
	0x01CC22EC MOV V3.16B, V8.16B
	0x01CC22F0 LDP X20, X19, [X31 + 0x30]
	0x01CC22F4 LDP X30, X21, [X31 + 0x20]
	0x01CC22F8 LDP D9, D8, [X31 + 0x10]
	0x01CC22FC MOV V0.16B, V11.16B
	0x01CC2300 MOV V1.16B, V10.16B
	0x01CC2304 LDP D11, D10, [X31], #0x40
	0x01CC2308 B 0x1CCE25C
	0x01CC230C BL 0x1B6EA1C
	0x01CC2310 STP X30, X21, [X31 - 0x20]!
	0x01CC2314 STP X20, X19, [X31 + 0x10]
	0x01CC2318 ADRP X20, 0x2561000
	0x01CC231C ADRP X21, 0x228D000
	0x01CC2320 LDRB W8, [X20 + 0x549]
	0x01CC2324 LDR X21, [X21 + 0x380]
	0x01CC2328 MOV X19, X0
	0x01CC232C TBNZ X8, 0x0, 0x1CC2344
	0x01CC2330 ADRP X0, 0x228D000
	0x01CC2334 LDR X0, [X0 + 0x380]
	0x01CC2338 BL 0x1B6E7F0
	0x01CC233C MOVZ W8, 0x1
	0x01CC2340 STRB W8, [X20 + 0x549]
	0x01CC2344 LDR X0, [X21]
	0x01CC2348 BL 0x1B6EA0C
	0x01CC234C MOV X1, X31
	0x01CC2350 MOV X20, X0
	0x01CC2354 BL 0x32276F8
	0x01CC2358 STR W31, [X20 + 0x10]
	0x01CC235C STR X19, [X20 + 0x20]
	0x01CC2360 MOV X0, X20
	0x01CC2364 LDP X20, X19, [X31 + 0x10]
	0x01CC2368 LDP X30, X21, [X31], #0x20
	0x01CC236C RET
	0x01CC2370 STR X30, [X31 - 0x20]!
	0x01CC2374 STP X20, X19, [X31 + 0x10]
	0x01CC2378 MOV W19, W1
	0x01CC237C MOV X1, X31
	0x01CC2380 MOV X20, X0
	0x01CC2384 BL 0x32276F8
	0x01CC2388 STR W19, [X20 + 0x10]
	0x01CC238C LDP X20, X19, [X31 + 0x10]
	0x01CC2390 LDR X30, [X31], #0x20
	0x01CC2394 RET
	0x01CC2398 STR X30, [X31 - 0x20]!
	0x01CC239C STP X20, X19, [X31 + 0x10]
	0x01CC23A0 MOV W19, W1
	0x01CC23A4 MOV X1, X31
	0x01CC23A8 MOV X20, X0
	0x01CC23AC BL 0x32276F8
	0x01CC23B0 STR W19, [X20 + 0x10]
	0x01CC23B4 LDP X20, X19, [X31 + 0x10]
	0x01CC23B8 LDR X30, [X31], #0x20
	0x01CC23BC RET
	0x01CC23C0 STR D10, [X31 - 0x40]!
	0x01CC23C4 STP D9, D8, [X31 + 0x10]
	0x01CC23C8 STP X30, X21, [X31 + 0x20]
	0x01CC23CC STP X20, X19, [X31 + 0x30]
	0x01CC23D0 CBZ X1, 0x1CC2438
	0x01CC23D4 MOV X21, X1
	0x01CC23D8 MOV X20, X0
	0x01CC23DC MOV X0, X1
	0x01CC23E0 MOV X1, X31
	0x01CC23E4 MOV W19, W2
	0x01CC23E8 BL 0x3AA7658
	0x01CC23EC MOV X0, X21
	0x01CC23F0 MOV X1, X31
	0x01CC23F4 MOV V8.16B, V0.16B
	0x01CC23F8 MOV V9.16B, V1.16B
	0x01CC23FC MOV V10.16B, V2.16B
	0x01CC2400 BL 0x3AA7AD0
	0x01CC2404 MOV V3.16B, V0.16B
	0x01CC2408 MOV V4.16B, V1.16B
	0x01CC240C AND W1, W19, 0x1
	0x01CC2410 MOV X0, X20
	0x01CC2414 MOV V0.16B, V8.16B
	0x01CC2418 MOV V1.16B, V9.16B
	0x01CC241C LDP X20, X19, [X31 + 0x30]
	0x01CC2420 LDP X30, X21, [X31 + 0x20]
	0x01CC2424 LDP D9, D8, [X31 + 0x10]
	0x01CC2428 MOV V5.16B, V2.16B
	0x01CC242C MOV V2.16B, V10.16B
	0x01CC2430 LDR V10, [X31], #0x40
	0x01CC2434 B 0x1CC243C
	0x01CC2438 BL 0x1B6EA1C
	0x01CC243C STP D13, D12, [X31 - 0x50]!
	0x01CC2440 STP D11, D10, [X31 + 0x10]
	0x01CC2444 STP D9, D8, [X31 + 0x20]
	0x01CC2448 STP X30, X21, [X31 + 0x30]
	0x01CC244C STP X20, X19, [X31 + 0x40]
	0x01CC2450 ADRP X21, 0x2561000
	0x01CC2454 LDRB W8, [X21 + 0x54C]
	0x01CC2458 MOV W20, W1
	0x01CC245C MOV V8.16B, V5.16B
	0x01CC2460 MOV V9.16B, V4.16B
	0x01CC2464 MOV V10.16B, V3.16B
	0x01CC2468 MOV V11.16B, V2.16B
	0x01CC246C MOV V12.16B, V1.16B
	0x01CC2470 MOV V13.16B, V0.16B
	0x01CC2474 MOV X19, X0
	0x01CC2478 TBNZ X8, 0x0, 0x1CC2490
	0x01CC247C ADRP X0, 0x228C000
	0x01CC2480 LDR X0, [X0 + 0x2A8]
	0x01CC2484 BL 0x1B6E7F0
	0x01CC2488 MOVZ W8, 0x1
	0x01CC248C STRB W8, [X21 + 0x54C]
	0x01CC2490 ADRP X21, 0x228C000
	0x01CC2494 LDR X21, [X21 + 0x2A8]
	0x01CC2498 TBZ X20, 0x0, 0x1CC2508
	0x01CC249C LDR X0, [X21]
	0x01CC24A0 LDR W8, [X0 + 0xE0]
	0x01CC24A4 CBNZ W8, 0x1CC24AC
	0x01CC24A8 BL 0x1B6E8F8
	0x01CC24AC MOV X0, X31
	0x01CC24B0 BL 0x1CAB1DC
	0x01CC24B4 CBZ X0, 0x1CC2574
	0x01CC24B8 MOV X1, X31
	0x01CC24BC BL 0x1CB7844
	0x01CC24C0 LDR X0, [X19 + 0x20]
	0x01CC24C4 CBZ X0, 0x1CC2574
	0x01CC24C8 MOV V0.16B, V13.16B
	0x01CC24CC MOV V1.16B, V12.16B
	0x01CC24D0 MOV V2.16B, V11.16B
	0x01CC24D4 MOV V3.16B, V10.16B
	0x01CC24D8 MOV V4.16B, V9.16B
	0x01CC24DC MOV V5.16B, V8.16B
	0x01CC24E0 MOV X1, X31
	0x01CC24E4 BL 0x1D09CC4
	0x01CC24E8 LDR X0, [X19 + 0x38]
	0x01CC24EC CBZ X0, 0x1CC2574
	0x01CC24F0 LDP X20, X19, [X31 + 0x40]
	0x01CC24F4 LDP X30, X21, [X31 + 0x30]
	0x01CC24F8 LDP D9, D8, [X31 + 0x20]
	0x01CC24FC LDP D11, D10, [X31 + 0x10]
	0x01CC2500 LDP D13, D12, [X31], #0x50
	0x01CC2504 B 0x1CC2684
	0x01CC2508 LDR X0, [X19 + 0x20]
	0x01CC250C CBZ X0, 0x1CC2574
	0x01CC2510 MOV V0.16B, V13.16B
	0x01CC2514 MOV V1.16B, V12.16B
	0x01CC2518 MOV V2.16B, V11.16B
	0x01CC251C MOV V3.16B, V10.16B
	0x01CC2520 MOV V4.16B, V9.16B
	0x01CC2524 MOV V5.16B, V8.16B
	0x01CC2528 MOV X1, X31
	0x01CC252C BL 0x1D09CC4
	0x01CC2530 LDR X0, [X19 + 0x38]
	0x01CC2534 CBZ X0, 0x1CC2574
	0x01CC2538 BL 0x1CC2684
	0x01CC253C LDR X0, [X21]
	0x01CC2540 LDR W8, [X0 + 0xE0]
	0x01CC2544 CBNZ W8, 0x1CC254C
	0x01CC2548 BL 0x1B6E8F8
	0x01CC254C MOV X0, X31
	0x01CC2550 BL 0x1CAB1DC
	0x01CC2554 CBZ X0, 0x1CC2574
	0x01CC2558 LDP X20, X19, [X31 + 0x40]
	0x01CC255C LDP X30, X21, [X31 + 0x30]
	0x01CC2560 LDP D9, D8, [X31 + 0x20]
	0x01CC2564 LDP D11, D10, [X31 + 0x10]
	0x01CC2568 MOV X1, X31
	0x01CC256C LDP D13, D12, [X31], #0x50
	0x01CC2570 B 0x1CB79B0
	0x01CC2574 BL 0x1B6EA1C
	0x01CC2578 STR D10, [X31 - 0x40]!
	0x01CC257C STP D9, D8, [X31 + 0x10]
	0x01CC2580 STP X30, X21, [X31 + 0x20]
	0x01CC2584 STP X20, X19, [X31 + 0x30]
	0x01CC2588 ADRP X21, 0x2561000
	0x01CC258C LDRB W8, [X21 + 0x54B]
	0x01CC2590 MOV W20, W1
	0x01CC2594 MOV V8.16B, V2.16B
	0x01CC2598 MOV V9.16B, V1.16B
	0x01CC259C MOV V10.16B, V0.16B
	0x01CC25A0 MOV X19, X0
	0x01CC25A4 TBNZ X8, 0x0, 0x1CC25BC
	0x01CC25A8 ADRP X0, 0x228C000
	0x01CC25AC LDR X0, [X0 + 0x2A8]
	0x01CC25B0 BL 0x1B6E7F0
	0x01CC25B4 MOVZ W8, 0x1
	0x01CC25B8 STRB W8, [X21 + 0x54B]
	0x01CC25BC ADRP X21, 0x228C000

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D14
	003 Move [X31+24], D13
	004 Move [X31+32], D12
	005 Move [X31+40], D11
	006 Move [X31+48], D10
	007 Move [X31+56], D9
	008 Move [X31+64], D8
	009 Move [X31+72], X30
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X20, 0x2563000
	017 Move W8, [X20+1349]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {46}
	023 Move X0, 0x228D000
	024 Move X0, [X0+2048]
	025 Call 0x1B6F7F0
	026 Move X0, 0x228F000
	027 Move X0, [X0+800]
	028 Call 0x1B6F7F0
	029 Move X0, 0x228D000
	030 Move X0, [X0+1144]
	031 Call 0x1B6F7F0
	032 Move X0, 0x228F000
	033 Move X0, [X0+808]
	034 Call 0x1B6F7F0
	035 Move X0, 0x228F000
	036 Move X0, [X0+816]
	037 Call 0x1B6F7F0
	038 Move X0, 0x228F000
	039 Move X0, [X0+824]
	040 Call 0x1B6F7F0
	041 Move X0, 0x228F000
	042 Move X0, [X0+832]
	043 Call 0x1B6F7F0
	044 Move W8, 1
	045 Move [X20+1349], W8
	046 Move [X31+8], X31
	047 Move S10, [X19+152]
	048 Move S9, [X19+156]
	049 Move V8, [X19+160]
	050 Move X8, -18968576
	051 Move V0, [X8+3336]
	052 Move X21, 0x228D000
	053 Multiply S1, S10, S10
	054 Multiply S2, S9, S9
	055 Move X21, [X21+1144]
	056 Add S1, S1, S2
	057 Multiply S2, S8, S8
	058 Add S1, S1, S2
	059 NotImplemented "Instruction FCMP not yet implemented."
	060 Move X0, X31
	061 Call Time.get_deltaTime
	062 Multiply S3, S10, S0
	063 Multiply S1, S9, S0
	064 Multiply S2, S8, S0
	065 Move X0, X19
	066 Move V0, V3
	067 Call PlayerController.MovePlayerDelta, X0, X1
	068 Move X20, 0x2563000
	069 Move V8, [X19+152]
	070 Move W8, [X20+1087]
	071 Move V9, [X19+160]
	072 Compare W8, 0
	073 JumpIfNotEqual {79}
	074 Move X0, 0x228D000
	075 Move X0, [X0+1152]
	076 Call 0x1B6F7F0
	077 Move W8, 1
	078 Move [X20+1087], W8
	079 Move X8, 0x228D000
	080 Move X8, [X8+1152]
	081 Move V0, [X19+164]
	082 Move S1, 1
	083 Move S3, W31
	084 Move X8, [X8]
	085 NotImplemented "Instruction FMIN not yet implemented."
	086 NotImplemented "Instruction FCMP not yet implemented."
	087 NotImplemented "Instruction FCSEL not yet implemented."
	088 Move X8, [X8+184]
	089 Move V0, [X8]
	090 Move V2, [X8+8]
	091 Subtract V0, V0, V8
	092 Subtract S2, S2, S9
	093 NotImplemented "Instruction INVALID not yet implemented."
	094 Multiply S1, S2, S1
	095 Add V0, V8, V0
	096 Add S1, S9, S1
	097 Move [X19+152], D0
	098 Move [X19+160], S1
	099 Move X0, [X21]
	100 Move X20, [X19+168]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {105}
	104 Call 0x1B6F8F8
	105 Move X0, X20
	106 Move X1, X31
	107 Move X2, X31
	108 Call Object.op_Inequality, X0, X1
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {126}
	113 Move X0, [X19+168]
	114 Compare X0, 0
	115 JumpIfEqual {580}
	116 Move X1, X31
	117 Call Transform.get_position, X0
	118 Move S3, [X19+176]
	119 Move S4, [X19+180]
	120 Move V5, [X19+184]
	121 Move X0, X19
	122 Add S0, S0, S3
	123 Add S1, S1, S4
	124 Add S2, S2, S5
	125 Call PlayerController.MovePlayerTo, X0, X1
	126 Move X22, 0x228F000
	127 Move X22, [X22+800]
	128 Move X0, X31
	129 Call GameManager.get_isDebug
	130 Move TEMP, X0
	131 And TEMP, TEMP, 1
	132 Compare TEMP, 1
	133 JumpIfNotEqual {194}
	134 Move X0, X31
	135 Call Time.get_time
	136 Move S2, [X19+224]
	137 Move S1, [X19+228]
	138 Move W20, [X19+232]
	139 Subtract S0, S0, S1
	140 NotImplemented "Instruction FCMP not yet implemented."
	141 Move X0, X31
	142 Call Time.get_time
	143 Move V1, [X19+228]
	144 Move W8, 0x7F800000
	145 NotImplemented "Instruction SCVTF not yet implemented."
	146 Move X0, X31
	147 Subtract S0, S0, S1
	148 Move S1, W8
	149 Move W8, 0xCF000000
	150 NotImplemented "Instruction FDIV not yet implemented."
	151 Move S2, W8
	152 Move W8, 0x447A0000
	153 NotImplemented "Instruction FCMP not yet implemented."
	154 Move S1, W8
	155 NotImplemented "Instruction FCVTZS not yet implemented."
	156 NotImplemented "Instruction SCVTF not yet implemented."
	157 NotImplemented "Instruction FCSEL not yet implemented."
	158 Move [X31+12], S0
	159 NotImplemented "Instruction FDIV not yet implemented."
	160 Move [X31+8], S0
	161 Move [X19+232], W31
	162 Call Time.get_time
	163 Move [X19+228], S0
	164 Move X20, 0x228E000
	165 Move X20, [X20+816]
	166 Add X0, X31, 12
	167 Move X2, X31
	168 Move X1, [X20]
	169 Call Single.ToString, X0, X1
	170 Move X1, [X20]
	171 Move X20, X0
	172 Add X0, X31, 8
	173 Move X2, X31
	174 Call Single.ToString, X0, X1
	175 Move X8, 0x228E000
	176 Move X8, [X8+832]
	177 Move X9, 0x228E000
	178 Move X9, [X9+824]
	179 Move X3, X0
	180 Move X8, [X8]
	181 Move X1, X20
	182 Move X2, [X9]
	183 Move X4, X31
	184 Move X0, X8
	185 Call String.Concat, X0, X1, X2, X3
	186 Move X8, 0x228E000
	187 Move X8, [X8+808]
	188 Move X1, X0
	189 Move X8, [X8]
	190 Move X0, X8
	191 Call DebugView.AddText, X0, X1
	192 Add W8, W20, 1
	193 Move [X19+232], W8
	194 Move X0, [X22]
	195 Move W8, [X0+224]
	196 Compare W8, 0
	197 JumpIfNotEqual {200}
	198 Call 0x1B6F8F8
	199 Move X0, [X22]
	200 Move X8, [X0+184]
	201 Move X8, [X8+8]
	202 Compare X8, 0
	203 JumpIfEqual {205}
	204 Move X20, [X8+32]
	205 Move X20, X31
	206 Move X0, [X21]
	207 Move W8, [X0+224]
	208 Compare W8, 0
	209 JumpIfNotEqual {211}
	210 Call 0x1B6F8F8
	211 Move X0, X20
	212 Move X1, X31
	213 Move X2, X31
	214 Call Object.op_Inequality, X0, X1
	215 Move X20, [X19+72]
	216 Move TEMP, X0
	217 And TEMP, TEMP, 1
	218 Compare TEMP, 1
	219 JumpIfNotEqual {273}
	220 Move X0, [X22]
	221 Move W8, [X0+224]
	222 Compare W8, 0
	223 JumpIfNotEqual {226}
	224 Call 0x1B6F8F8
	225 Move X0, [X22]
	226 Move X8, [X0+184]
	227 Move X8, [X8+8]
	228 Compare X8, 0
	229 JumpIfEqual {580}
	230 Move X8, [X8+32]
	231 Compare X8, 0
	232 JumpIfEqual {580}
	233 Compare X20, 0
	234 JumpIfEqual {580}
	235 Move W1, [X8+116]
	236 Move X0, X20
	237 Move X2, X31
	238 Call AudioReverbZone.set_reverbPreset, X0, X1
	239 Move X0, [X21]
	240 Move X20, [X19+48]
	241 Move W8, [X0+224]
	242 Compare W8, 0
	243 JumpIfNotEqual {245}
	244 Call 0x1B6F8F8
	245 Move X0, X20
	246 Move X1, X31
	247 Move X2, X31
	248 Call Object.op_Inequality, X0, X1
	249 Move TEMP, X0
	250 And TEMP, TEMP, 1
	251 Compare TEMP, 1
	252 JumpIfNotEqual {299}
	253 Move X0, [X22]
	254 Move X20, [X19+48]
	255 Move W8, [X0+224]
	256 Compare W8, 0
	257 JumpIfNotEqual {260}
	258 Call 0x1B6F8F8
	259 Move X0, [X22]
	260 Move X8, [X0+184]
	261 Move X8, [X8+8]
	262 Compare X8, 0
	263 JumpIfEqual {580}
	264 Move X8, [X8+32]
	265 Compare X8, 0
	266 JumpIfEqual {580}
	267 Compare X20, 0
	268 JumpIfEqual {580}
	269 Move W8, [X8+120]
	270 Move X0, X20
	271 NotImplemented "Instruction CMP not yet implemented."
	272 NotImplemented "Instruction CSET not yet implemented."
	273 Compare X20, 0
	274 JumpIfEqual {580}
	275 Move X0, X20
	276 Move W1, W31
	277 Move X2, X31
	278 Call AudioReverbZone.set_reverbPreset, X0, X1
	279 Move X0, [X21]
	280 Move X20, [X19+48]
	281 Move W8, [X0+224]
	282 Compare W8, 0
	283 JumpIfNotEqual {285}
	284 Call 0x1B6F8F8
	285 Move X0, X20
	286 Move X1, X31
	287 Move X2, X31
	288 Call Object.op_Inequality, X0, X1
	289 Move TEMP, X0
	290 And TEMP, TEMP, 1
	291 Compare TEMP, 1
	292 JumpIfNotEqual {299}
	293 Move X0, [X19+48]
	294 Compare X0, 0
	295 JumpIfEqual {580}
	296 Move W1, 1
	297 Move X2, X31
	298 Call Rigidbody.set_useGravity, X0, X1
	299 Move X20, 0x228C000
	300 Move W8, [X19+276]
	301 Move X20, [X20+2048]
	302 Compare W8, 0
	303 JumpIfEqual {306}
	304 Move X0, X19
	305 Call PlayerController.UpdateSnapTurn, X0
	306 Move X0, [X20]
	307 Move W8, [X0+224]
	308 Compare W8, 0
	309 JumpIfNotEqual {311}
	310 Call 0x1B6F8F8
	311 Move X0, X31
	312 Call Application.get_isEditor
	313 Move TEMP, X0
	314 And TEMP, TEMP, 1
	315 Compare TEMP, 1
	316 JumpIfEqual {564}
	317 Move W8, [X19+312]
	318 Compare W8, 0
	319 JumpIfEqual {325}
	320 Move W8, [X19+313]
	321 Compare W8, 0
	322 JumpIfNotEqual {564}
	323 Move W21, 1
	324 Move W20, 1
	325 Move X0, [X19+296]
	326 Compare X0, 0
	327 JumpIfEqual {580}
	328 Move X1, X31
	329 Call XRBaseController.get_currentControllerState, X0
	330 Compare X0, 0
	331 JumpIfEqual {580}
	332 Move W21, [X0+28]
	333 Move W8, [X19+313]
	334 NotImplemented "Instruction CMP not yet implemented."
	335 NotImplemented "Instruction CSET not yet implemented."
	336 Compare W8, 0
	337 JumpIfEqual {341}
	338 Move W22, 1
	339 Compare W20, 0
	340 JumpIfNotEqual {353}
	341 Move X0, [X19+304]
	342 Compare X0, 0
	343 JumpIfEqual {580}
	344 Move X1, X31
	345 Call XRBaseController.get_currentControllerState, X0
	346 Compare X0, 0
	347 JumpIfEqual {580}
	348 Move W8, [X0+28]
	349 NotImplemented "Instruction CMP not yet implemented."
	350 NotImplemented "Instruction CSET not yet implemented."
	351 Compare W20, 0
	352 JumpIfEqual {357}
	353 Move TEMP, X22
	354 And TEMP, TEMP, 1
	355 Compare TEMP, 1
	356 JumpIfEqual {562}
	357 Move X0, [X19+88]
	358 Compare X0, 0
	359 JumpIfEqual {580}
	360 Move X1, X31
	361 Call Transform.get_forward, X0
	362 Move X23, 0x2562000
	363 Move W8, [X23+1089]
	364 Move V8, V0
	365 Move V9, V2
	366 Compare W8, 0
	367 JumpIfNotEqual {373}
	368 Move X0, 0x228C000
	369 Move X0, [X0+1160]
	370 Call 0x1B6F7F0
	371 Move W8, 1
	372 Move [X23+1089], W8
	373 Move X8, 0x228C000
	374 Move X8, [X8+1160]
	375 Move X0, [X8]
	376 Move W8, [X0+224]
	377 Compare W8, 0
	378 JumpIfNotEqual {380}
	379 Call 0x1B6F8F8
	380 Move X8, -18972672
	381 Multiply S1, S8, S8
	382 Move S0, W31
	383 Move V2, [X8+2916]
	384 Move X23, 0x228C000
	385 Add S1, S1, S0
	386 Multiply S3, S9, S9
	387 Move X23, [X23+1152]
	388 Add S1, S3, S1
	389 NotImplemented "Instruction FSQRT not yet implemented."
	390 NotImplemented "Instruction FCMP not yet implemented."
	391 NotImplemented "Instruction FDIV not yet implemented."
	392 NotImplemented "Instruction FDIV not yet implemented."
	393 NotImplemented "Instruction FDIV not yet implemented."
	394 Move X24, 0x2562000
	395 Move W8, [X24+1087]
	396 Compare W8, 0
	397 JumpIfNotEqual {403}
	398 Move X0, 0x228C000
	399 Move X0, [X0+1152]
	400 Call 0x1B6F7F0
	401 Move W8, 1
	402 Move [X24+1087], W8
	403 Move X8, [X23]
	404 Move X8, [X8+184]
	405 Move S11, [X8]
	406 Move S12, [X8+4]
	407 Move V13, [X8+8]
	408 Move X0, [X19+88]
	409 Compare X0, 0
	410 JumpIfEqual {580}
	411 Move X1, X31
	412 Call Component.get_transform, X0
	413 Compare X0, 0
	414 JumpIfEqual {580}
	415 Move X1, X31
	416 Call Transform.get_position, X0
	417 Move X24, 0x2562000
	418 Move W8, [X24+1090]
	419 Move V8, V0
	420 Move V9, V1
	421 Move V10, V2
	422 Compare W8, 0
	423 JumpIfNotEqual {429}
	424 Move X0, 0x228C000
	425 Move X0, [X0+1152]
	426 Call 0x1B6F7F0
	427 Move W8, 1
	428 Move [X24+1090], W8
	429 Move X8, [X23]
	430 Move X9, -18972672
	431 Move V0, [X9+2492]
	432 Move X8, [X8+184]
	433 Move S1, [X8+24]
	434 Move S2, [X8+28]
	435 Move V3, [X8+32]
	436 Move X8, -18972672
	437 Move V14, [X8+2736]
	438 Multiply S1, S1, S0
	439 Multiply S2, S2, S0
	440 Multiply S0, S3, S0
	441 Subtract S1, S8, S1
	442 Multiply S3, S11, S14
	443 Subtract S2, S9, S2
	444 Multiply S4, S12, S14
	445 Subtract S0, S10, S0
	446 Multiply S5, S13, S14
	447 Add S8, S3, S1
	448 Add S9, S4, S2
	449 Add S10, S5, S0
	450 Move TEMP, X20
	451 And TEMP, TEMP, 1
	452 Compare TEMP, 1
	453 JumpIfEqual {506}
	454 Move X0, [X19+296]
	455 Compare X0, 0
	456 JumpIfEqual {580}
	457 Move X1, X31
	458 Call Component.get_transform, X0
	459 Move X8, [X19+88]
	460 Compare X8, 0
	461 JumpIfEqual {580}
	462 Move X20, X0
	463 Move X0, X8
	464 Move X1, X31
	465 Call Transform.get_right, X0
	466 Compare X20, 0
	467 JumpIfEqual {580}
	468 Multiply S2, S2, S14
	469 Multiply S1, S1, S14
	470 Multiply S0, S0, S14
	471 Subtract S2, S10, S2
	472 Subtract S1, S9, S1
	473 Subtract S0, S8, S0
	474 Move X0, X20
	475 Move X1, X31
	476 Call Transform.set_position, X0, X1
	477 Move X0, [X19+296]
	478 Compare X0, 0
	479 JumpIfEqual {580}
	480 Move X1, X31
	481 Call Component.get_transform, X0
	482 Move W8, [X24+1090]
	483 Move X20, X0
	484 Compare W8, 0
	485 JumpIfNotEqual {491}
	486 Move X0, 0x228C000
	487 Move X0, [X0+1152]
	488 Call 0x1B6F7F0
	489 Move W8, 1
	490 Move [X24+1090], W8
	491 Move X8, [X23]
	492 NotImplemented "Instruction FNEG not yet implemented."
	493 NotImplemented "Instruction FNEG not yet implemented."
	494 NotImplemented "Instruction FNEG not yet implemented."
	495 Move X8, [X8+184]
	496 Move X0, X31
	497 Move S0, [X8+24]
	498 Move S1, [X8+28]
	499 Move V2, [X8+32]
	500 Call Quaternion.LookRotation, X0, X1
	501 Compare X20, 0
	502 JumpIfEqual {580}
	503 Move X0, X20
	504 Move X1, X31
	505 Call Transform.set_rotation, X0, X1
	506 Move TEMP, X22
	507 And TEMP, TEMP, 1
	508 Compare TEMP, 1
	509 JumpIfEqual {562}
	510 Move X0, [X19+304]
	511 Compare X0, 0
	512 JumpIfEqual {580}
	513 Move X1, X31
	514 Call Component.get_transform, X0
	515 Move X8, [X19+88]
	516 Compare X8, 0
	517 JumpIfEqual {580}
	518 Move X20, X0
	519 Move X0, X8
	520 Move X1, X31
	521 Call Transform.get_right, X0
	522 Compare X20, 0
	523 JumpIfEqual {580}
	524 Multiply S2, S2, S14
	525 Multiply S1, S1, S14
	526 Multiply S0, S0, S14
	527 Add S2, S10, S2
	528 Add S1, S9, S1
	529 Add S0, S8, S0
	530 Move X0, X20
	531 Move X1, X31
	532 Call Transform.set_position, X0, X1
	533 Move X0, [X19+304]
	534 Compare X0, 0
	535 JumpIfEqual {580}
	536 Move X1, X31
	537 Call Component.get_transform, X0
	538 Move W8, [X24+1090]
	539 Move X20, X0
	540 Compare W8, 0
	541 JumpIfNotEqual {547}
	542 Move X0, 0x228C000
	543 Move X0, [X0+1152]
	544 Call 0x1B6F7F0
	545 Move W8, 1
	546 Move [X24+1090], W8
	547 Move X8, [X23]
	548 NotImplemented "Instruction FNEG not yet implemented."
	549 NotImplemented "Instruction FNEG not yet implemented."
	550 NotImplemented "Instruction FNEG not yet implemented."
	551 Move X8, [X8+184]
	552 Move X0, X31
	553 Move S0, [X8+24]
	554 Move S1, [X8+28]
	555 Move V2, [X8+32]
	556 Call Quaternion.LookRotation, X0, X1
	557 Compare X20, 0
	558 JumpIfEqual {580}
	559 Move X0, X20
	560 Move X1, X31
	561 Call Transform.set_rotation, X0, X1
	562 Move [X19+312], W21
	563 Move [X19+313], W22
	564 Move X20, [X31+112]
	565 Move X19, [X31+120]
	566 Move X22, [X31+96]
	567 Move X21, [X31+104]
	568 Move X24, [X31+80]
	569 Move X23, [X31+88]
	570 Move X30, [X31+72]
	571 Move D9, [X31+56]
	572 Move D8, [X31+64]
	573 Move D11, [X31+40]
	574 Move D10, [X31+48]
	575 Move D13, [X31+24]
	576 Move D12, [X31+32]
	577 Move V14, [X31+16]
	578 Add X31, X31, 128
	579 Return 
	580 Call 0x1B6FA1C

Method: System.Void PlayerDie(AnimalCompany.RandomSFX killSound, System.String hitName)

Disassembly:
	0x01CC2780 MOV V10.16B, V1.16B
	0x01CC2784 MOV V9.16B, V2.16B
	0x01CC2788 BL 0x3AA5FBC
	0x01CC278C CBZ X20, 0x1CC2C64
	0x01CC2790 MOV V4.16B, V0.16B
	0x01CC2794 MOV V5.16B, V1.16B
	0x01CC2798 MOV V6.16B, V2.16B
	0x01CC279C MOV V7.16B, V3.16B
	0x01CC27A0 MOV X0, X20
	0x01CC27A4 MOV V0.16B, V8.16B
	0x01CC27A8 MOV V1.16B, V10.16B
	0x01CC27AC MOV V2.16B, V9.16B
	0x01CC27B0 MOV V3.16B, V4.16B
	0x01CC27B4 MOV V4.16B, V5.16B
	0x01CC27B8 MOV V5.16B, V6.16B
	0x01CC27BC MOV V6.16B, V7.16B
	0x01CC27C0 MOV X1, X31
	0x01CC27C4 BL 0x3AA80CC
	0x01CC27C8 LDR X0, [X19 + 0x28]
	0x01CC27CC CBZ X0, 0x1CC2C64
	0x01CC27D0 MOV X1, X31
	0x01CC27D4 BL 0x3AA7658
	0x01CC27D8 LDR X0, [X19 + 0x30]
	0x01CC27DC CBZ X0, 0x1CC2C64
	0x01CC27E0 MOV X1, X31
	0x01CC27E4 MOV V8.16B, V0.16B
	0x01CC27E8 MOV V11.16B, V1.16B
	0x01CC27EC MOV V9.16B, V2.16B
	0x01CC27F0 BL 0x3AA7658
	0x01CC27F4 STR S1, [X31 + 0xC]
	0x01CC27F8 ADRP X21, 0x228D000
	0x01CC27FC LDR X21, [X21 + 0x388]
	0x01CC2800 STP S9, S8, [X31 + 0x68]
	0x01CC2804 STP S2, S0, [X31 + 0x14]
	0x01CC2808 STR S10, [X31 + 0x10]
	0x01CC280C LDR X0, [X21]
	0x01CC2810 STR S11, [X31 + 0x1C]
	0x01CC2814 LDR W8, [X0 + 0xE0]
	0x01CC2818 CBNZ W8, 0x1CC2824

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+132]
	006 Compare W8, 0
	007 JumpIfEqual {13}
	008 Move X20, [X31+16]
	009 Move X19, [X31+24]
	010 Move X30, [X31+32]
	011 Move X21, [X31+40]
	012 Return 
	013 Move X19, X0
	014 Move X0, [X0+32]
	015 Compare X0, 0
	016 JumpIfEqual {50}
	017 Move X21, X1
	018 Move X1, X31
	019 Move X20, X2
	020 Call Component.get_transform, X0
	021 Compare X0, 0
	022 JumpIfEqual {50}
	023 Move X1, X31
	024 Call Transform.get_position, X0
	025 Move S3, 1
	026 Move X0, X21
	027 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	028 Move X1, [X19+192]
	029 Compare X1, 0
	030 JumpIfEqual {34}
	031 Move X0, X19
	032 Move X2, X31
	033 Call MonoBehaviour.StopCoroutine, X0, X1
	034 Move S0, W31
	035 Move S1, W31
	036 Move S2, W31
	037 Move X0, X19
	038 Move X1, X20
	039 Call PlayerController.SetDeathCoroutine, X0, X1, X2
	040 Move X1, X0
	041 Move [X19+192], X0
	042 Move X0, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X2, X31
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Call MonoBehaviour.StartCoroutine, X0, X1
	049 Return 
	050 Call 0x1B6FA1C

Method: System.Void PlayerHit(System.Int32 damage, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.String hitSound, System.String killSound, AnimalCompany.PrefabGenerator/PrefabType prefabType, System.String hitName)

Disassembly:
	0x01CC29E8 FCMP S10, S8
	0x01CC29EC LDRB W8, [X20 + 0x441]
	0x01CC29F0 FMOV S1, -0.5
	0x01CC29F4 FCSEL S0, S10, S8, MI
	0x01CC29F8 FADD S1, S2, S1
	0x01CC29FC FCMP S0, S1
	0x01CC2A00 FCSEL S11, S0, S1, MI
	0x01CC2A04 CBNZ W8, 0x1CC2A1C
	0x01CC2A08 ADRP X0, 0x228B000
	0x01CC2A0C LDR X0, [X0 + 0x488]
	0x01CC2A10 BL 0x1B6E7F0
	0x01CC2A14 MOVZ W8, 0x1
	0x01CC2A18 STRB W8, [X20 + 0x441]
	0x01CC2A1C ADRP X8, 0x228B000
	0x01CC2A20 LDR X8, [X8 + 0x488]
	0x01CC2A24 FSUB S8, S12, S13
	0x01CC2A28 FSUB S9, S11, S11
	0x01CC2A2C FSUB S10, S15, S14
	0x01CC2A30 LDR X0, [X8]
	0x01CC2A34 LDR W8, [X0 + 0xE0]
	0x01CC2A38 CBNZ W8, 0x1CC2A40
	0x01CC2A3C BL 0x1B6E8F8
	0x01CC2A40 FMUL S0, S8, S8
	0x01CC2A44 FMUL S1, S9, S9
	0x01CC2A48 ADRP X8, 0xFFFFFFFFFEDE7000
	0x01CC2A4C FADD S0, S0, S1
	0x01CC2A50 LDR V1, [X8 + 0xB64]
	0x01CC2A54 ADRP X20, 0x228B000
	0x01CC2A58 FMUL S2, S10, S10
	0x01CC2A5C LDR X20, [X20 + 0x480]
	0x01CC2A60 FADD S0, S2, S0
	0x01CC2A64 FSQRT S0, S0
	0x01CC2A68 FCMP S0, S1
	0x01CC2A6C B.LE 0x1CC2A80
	0x01CC2A70 FDIV S8, S8, S0
	0x01CC2A74 FDIV S9, S9, S0
	0x01CC2A78 FDIV S10, S10, S0
	0x01CC2A7C B 0x1CC2AB0
	0x01CC2A80 ADRP X22, 0x2561000
	0x01CC2A84 LDRB W8, [X22 + 0x43F]
	0x01CC2A88 CBNZ W8, 0x1CC2AA0
	0x01CC2A8C ADRP X0, 0x228B000
	0x01CC2A90 LDR X0, [X0 + 0x480]
	0x01CC2A94 BL 0x1B6E7F0
	0x01CC2A98 MOVZ W8, 0x1
	0x01CC2A9C STRB W8, [X22 + 0x43F]
	0x01CC2AA0 LDR X8, [X20]
	0x01CC2AA4 LDR X8, [X8 + 0xB8]
	0x01CC2AA8 LDP S8, S9, [X8]
	0x01CC2AAC LDR V10, [X8 + 0x8]
	0x01CC2AB0 ADRP X22, 0x2561000
	0x01CC2AB4 LDRB W8, [X22 + 0x442]
	0x01CC2AB8 CBNZ W8, 0x1CC2AD0
	0x01CC2ABC ADRP X0, 0x228B000
	0x01CC2AC0 LDR X0, [X0 + 0x480]
	0x01CC2AC4 BL 0x1B6E7F0
	0x01CC2AC8 MOVZ W8, 0x1
	0x01CC2ACC STRB W8, [X22 + 0x442]
	0x01CC2AD0 LDR X0, [X19 + 0x80]
	0x01CC2AD4 CBZ X0, 0x1CC2C64
	0x01CC2AD8 LDR X8, [X20]
	0x01CC2ADC LDR X9, [X21]
	0x01CC2AE0 FADD S0, S13, S12
	0x01CC2AE4 FADD S1, S11, S11
	0x01CC2AE8 LDR X8, [X8 + 0xB8]
	0x01CC2AEC LDR X9, [X9 + 0xB8]
	0x01CC2AF0 FADD S2, S14, S15
	0x01CC2AF4 FMOV S3, 0.5
	0x01CC2AF8 FMUL S17, S0, S3
	0x01CC2AFC FMUL S19, S1, S3
	0x01CC2B00 FMUL S18, S2, S3
	0x01CC2B04 LDP S0, S5, [X8 + 0x18]
	0x01CC2B08 LDP S1, S2, [X9 + 0x18]
	0x01CC2B0C LDP S6, S3, [X8 + 0x1C]
	0x01CC2B10 LDR V4, [X8 + 0x20]
	0x01CC2B14 LDR V7, [X8 + 0x18]
	0x01CC2B18 FMUL S5, S2, S5
	0x01CC2B1C FMUL S3, S2, S3
	0x01CC2B20 FMUL S16, S9, S4
	0x01CC2B24 FMUL S2, S2, S7
	0x01CC2B28 FMUL S7, S10, S6
	0x01CC2B2C FSUB S14, S16, S7
	0x01CC2B30 FMUL S7, S10, S0
	0x01CC2B34 FMUL S4, S8, S4
	0x01CC2B38 FMUL S6, S8, S6

ISIL:
	001 Move [X31-128], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X25, 0x2562000
	017 Move W8, [X25+1350]
	018 Move X21, X5
	019 Move W19, W4
	020 Move X22, X3
	021 Move X23, X2
	022 Move V8, V2
	023 Move V9, V1
	024 Move V10, V0
	025 Move W24, W1
	026 Move X20, X0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {36}
	031 Move X0, 0x228E000
	032 Move X0, [X0+872]
	033 Call 0x1B6F7F0
	034 Move W8, 1
	035 Move [X25+1350], W8
	036 Move X0, X20
	037 Move W1, W24
	038 Move V0, V10
	039 Move V1, V9
	040 Move V2, V8
	041 Move X2, X23
	042 Move X3, X22
	043 Move X4, X21
	044 Call PlayerController.PlayerHitInternal, X0, X1, X2, X3, X4, X5, X6
	045 Move W8, [X20+132]
	046 Compare W8, 0
	047 JumpIfEqual {98}
	048 Move X0, [X20+80]
	049 Compare X0, 0
	050 JumpIfEqual {114}
	051 Move X1, X31
	052 Call Transform.get_position, X0
	053 Move X0, [X20+80]
	054 Compare X0, 0
	055 JumpIfEqual {114}
	056 Move X20, 0x228E000
	057 Move X20, [X20+872]
	058 Move X1, X31
	059 Move V8, V0
	060 Move V9, V1
	061 Move V10, V2
	062 Call Transform.get_rotation, X0
	063 Move X0, [X20]
	064 Move V11, V0
	065 Move V12, V1
	066 Move V13, V2
	067 Move W8, [X0+224]
	068 Move V14, V3
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1B6F8F8
	072 Move W0, W19
	073 Move V0, V8
	074 Move V1, V9
	075 Move V2, V10
	076 Move V3, V11
	077 Move V4, V12
	078 Move V5, V13
	079 Move X20, [X31+112]
	080 Move X19, [X31+120]
	081 Move X22, [X31+96]
	082 Move X21, [X31+104]
	083 Move X24, [X31+80]
	084 Move X23, [X31+88]
	085 Move X30, [X31+64]
	086 Move X25, [X31+72]
	087 Move D9, [X31+48]
	088 Move D8, [X31+56]
	089 Move D11, [X31+32]
	090 Move D10, [X31+40]
	091 Move D13, [X31+16]
	092 Move D12, [X31+24]
	093 Move V6, V14
	094 Move W1, W31
	095 Move V14, [X31+128]
	096 Call PrefabGenerator.GeneratePrefab, X0, X1, X2, X3
	097 Return 
	098 Move X20, [X31+112]
	099 Move X19, [X31+120]
	100 Move X22, [X31+96]
	101 Move X21, [X31+104]
	102 Move X24, [X31+80]
	103 Move X23, [X31+88]
	104 Move X30, [X31+64]
	105 Move X25, [X31+72]
	106 Move D9, [X31+48]
	107 Move D8, [X31+56]
	108 Move D11, [X31+32]
	109 Move D10, [X31+40]
	110 Move D13, [X31+16]
	111 Move D12, [X31+24]
	112 Move V14, [X31+128]
	113 Return 
	114 Call 0x1B6FA1C

Method: System.Void PlayerHit(System.Int32 damage, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.String hitSound, System.String killSound, UnityEngine.Vector3 force, System.String hitName)

Disassembly:
	0x01CC31DC BL 0x1B6E7F0
	0x01CC31E0 MOVZ W8, 0x1
	0x01CC31E4 STRB W8, [X21 + 0x550]
	0x01CC31E8 LDR X0, [X24]
	0x01CC31EC STR X31, [X31 + 0x58]
	0x01CC31F0 LDR W8, [X0 + 0xE0]
	0x01CC31F4 CBNZ W8, 0x1CC31FC
	0x01CC31F8 BL 0x1B6E8F8
	0x01CC31FC MOV X0, X22
	0x01CC3200 MOV X1, X31
	0x01CC3204 MOV X2, X31

ISIL:
	001 Move V4, [X31]
	002 Add X8, X31, 4
	003 Move V3, [X31+8]
	004 Move V5, [X0+152]
	005 Move V6, [X0+160]
	006 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	007 Add S3, S3, S6
	008 Add V4, V4, V5
	009 Move [X0+152], D4
	010 Move [X0+160], S3
	011 Call PlayerController.PlayerHitInternal, X0, X1, X2, X3, X4, X5, X6
	012 Return 

Method: System.Void PlayerHit(System.Int32 damage, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.String hitSound, System.String killSound, System.String hitName)

Disassembly:
	0x01CC3208 BL 0x3AA0AF0

ISIL:
	001 Call PlayerController.PlayerHitInternal, X0, X1, X2, X3, X4, X5, X6
	002 Return 

Method: System.Void SetCurrentHealth(System.Int32 health)

Disassembly:
	0x01CC15A4 LDP D9, D8, [X31 + 0x38]
	0x01CC15A8 LDP D11, D10, [X31 + 0x28]
	0x01CC15AC LDP D13, D12, [X31 + 0x18]
	0x01CC15B0 LDR V14, [X31 + 0x10]
	0x01CC15B4 ADD X31, X31, 0x80
	0x01CC15B8 RET
	0x01CC15BC BL 0x1B6EA1C
	0x01CC15C0 STR X30, [X31 - 0x30]!
	0x01CC15C4 STP X22, X21, [X31 + 0x10]
	0x01CC15C8 STP X20, X19, [X31 + 0x20]
	0x01CC15CC ADRP X22, 0x2562000
	0x01CC15D0 ADRP X21, 0x228E000
	0x01CC15D4 LDRB W8, [X22 + 0x593]
	0x01CC15D8 LDR X21, [X21 + 0x348]
	0x01CC15DC MOV X19, X1
	0x01CC15E0 MOV X20, X0
	0x01CC15E4 TBNZ X8, 0x0, 0x1CC1620
	0x01CC15E8 ADRP X0, 0x228E000
	0x01CC15EC LDR X0, [X0 + 0x348]
	0x01CC15F0 BL 0x1B6E7F0
	0x01CC15F4 ADRP X0, 0x228C000
	0x01CC15F8 LDR X0, [X0 + 0xF10]
	0x01CC15FC BL 0x1B6E7F0
	0x01CC1600 ADRP X0, 0x228E000
	0x01CC1604 LDR X0, [X0 + 0x350]
	0x01CC1608 BL 0x1B6E7F0
	0x01CC160C ADRP X0, 0x228C000
	0x01CC1610 LDR X0, [X0 + 0xD58]
	0x01CC1614 BL 0x1B6E7F0
	0x01CC1618 MOVZ W8, 0x1
	0x01CC161C STRB W8, [X22 + 0x593]
	0x01CC1620 LDR X8, [X21]
	0x01CC1624 LDR X8, [X8 + 0xB8]
	0x01CC1628 LDR X8, [X8]
	0x01CC162C CBZ X8, 0x1CC16C8
	0x01CC1630 LDR X0, [X8 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2563000
	007 Move X21, 0x228E000
	008 Move W8, [X22+1351]
	009 Move X21, [X21+408]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x228E000
	017 Move X0, [X0+408]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X22+1351], W8
	021 Move [X19+128], W20
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1B6F8F8
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X8, [X8+48]
	030 Compare X8, 0
	031 JumpIfEqual {42}
	032 Move W1, [X19+128]
	033 Move X3, [X8+24]
	034 Move X0, [X8+64]
	035 Move X2, [X8+40]
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 CallNoReturn X3
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Return 

Method: System.Void PlayerHitInternal(System.Int32 damage, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.String hitSound, System.String killSound, System.String hitName)

Disassembly:
	0x01CC2B3C FMUL S0, S9, S0
	0x01CC2B40 FSUB S15, S7, S4
	0x01CC2B44 LDR V4, [X9 + 0x20]
	0x01CC2B48 FSUB S11, S6, S0
	0x01CC2B4C FMUL S0, S10, S1
	0x01CC2B50 FADD S0, S18, S0
	0x01CC2B54 FADD S0, S0, S3
	0x01CC2B58 FMUL S3, S9, S1
	0x01CC2B5C FMUL S1, S8, S1
	0x01CC2B60 FADD S3, S19, S3
	0x01CC2B64 FADD S1, S17, S1
	0x01CC2B68 FADD S3, S3, S5
	0x01CC2B6C FMUL S5, S11, S4
	0x01CC2B70 FADD S6, S1, S2
	0x01CC2B74 FMUL S1, S15, S4
	0x01CC2B78 FMUL S4, S14, S4
	0x01CC2B7C FADD S2, S5, S0
	0x01CC2B80 FADD S1, S1, S3
	0x01CC2B84 FADD S0, S4, S6
	0x01CC2B88 MOV X1, X31
	0x01CC2B8C STP S18, S17, [X31 + 0x68]
	0x01CC2B90 STR S19, [X31 + 0x1C]
	0x01CC2B94 BL 0x3AA76F8
	0x01CC2B98 LDR X8, [X21]
	0x01CC2B9C LDR X19, [X19 + 0x88]
	0x01CC2BA0 LDRB W9, [X22 + 0x442]
	0x01CC2BA4 LDR X8, [X8 + 0xB8]
	0x01CC2BA8 LDP S13, S12, [X8 + 0x24]
	0x01CC2BAC CBNZ W9, 0x1CC2BCC
	0x01CC2BB0 ADRP X0, 0x228B000
	0x01CC2BB4 LDR X0, [X0 + 0x480]
	0x01CC2BB8 BL 0x1B6E7F0
	0x01CC2BBC LDR X8, [X21]
	0x01CC2BC0 MOVZ W9, 0x1
	0x01CC2BC4 STRB W9, [X22 + 0x442]
	0x01CC2BC8 LDR X8, [X8 + 0xB8]
	0x01CC2BCC CBZ X19, 0x1CC2C64
	0x01CC2BD0 LDR X9, [X20]
	0x01CC2BD4 LDR V4, [X31 + 0x6C]
	0x01CC2BD8 FMUL S0, S8, S13
	0x01CC2BDC LDR V3, [X8 + 0x2C]
	0x01CC2BE0 LDR X8, [X9 + 0xB8]
	0x01CC2BE4 FADD S0, S4, S0
	0x01CC2BE8 LDR V4, [X31 + 0x1C]
	0x01CC2BEC FMUL S1, S9, S13
	0x01CC2BF0 LDP S7, S6, [X8 + 0x1C]
	0x01CC2BF4 LDR V16, [X8 + 0x18]
	0x01CC2BF8 FADD S1, S4, S1
	0x01CC2BFC LDR V4, [X31 + 0x68]
	0x01CC2C00 FMUL S2, S10, S13
	0x01CC2C04 FMUL S5, S15, S3
	0x01CC2C08 FMUL S6, S12, S6
	0x01CC2C0C FADD S2, S4, S2
	0x01CC2C10 FMUL S4, S11, S3
	0x01CC2C14 FMUL S3, S14, S3
	0x01CC2C18 FMUL S7, S12, S7
	0x01CC2C1C FMUL S16, S12, S16
	0x01CC2C20 MOV X0, X19
	0x01CC2C24 LDP X20, X19, [X31 + 0x80]
	0x01CC2C28 LDP X22, X21, [X31 + 0x70]
	0x01CC2C2C LDR X30, [X31 + 0x60]
	0x01CC2C30 LDP D9, D8, [X31 + 0x50]
	0x01CC2C34 LDP D11, D10, [X31 + 0x40]
	0x01CC2C38 LDP D13, D12, [X31 + 0x30]
	0x01CC2C3C LDP D15, D14, [X31 + 0x20]
	0x01CC2C40 FADD S2, S2, S6
	0x01CC2C44 FADD S1, S1, S7
	0x01CC2C48 FADD S0, S0, S16
	0x01CC2C4C FADD S2, S4, S2
	0x01CC2C50 FADD S1, S5, S1
	0x01CC2C54 FADD S0, S3, S0
	0x01CC2C58 MOV X1, X31
	0x01CC2C5C ADD X31, X31, 0x90
	0x01CC2C60 B 0x3AA76F8
	0x01CC2C64 BL 0x1B6EA1C
	0x01CC2C68 STP D11, D10, [X31 - 0x50]!
	0x01CC2C6C STP D9, D8, [X31 + 0x10]
	0x01CC2C70 STR X30, [X31 + 0x20]
	0x01CC2C74 STP X22, X21, [X31 + 0x30]
	0x01CC2C78 STP X20, X19, [X31 + 0x40]
	0x01CC2C7C MOV X19, X0
	0x01CC2C80 LDR X0, [X0 + 0x20]
	0x01CC2C84 CBZ X0, 0x1CC2D24
	0x01CC2C88 ORN W8, W31, W1, 0x0
	0x01CC2C8C MOV X21, X2
	0x01CC2C90 MOV W22, W1
	0x01CC2C94 AND W1, W8, 0x1
	0x01CC2C98 MOV X2, X31
	0x01CC2C9C MOV V8.16B, V2.16B
	0x01CC2CA0 MOV V9.16B, V1.16B
	0x01CC2CA4 MOV V10.16B, V0.16B
	0x01CC2CA8 MOV W20, W3
	0x01CC2CAC BL 0x1D090A0
	0x01CC2CB0 ANDS W31, W22, 0x1
	0x01CC2CB4 CSEL X8, X21, X31, NE
	0x01CC2CB8 STR X8, [X19 + 0xA8]
	0x01CC2CBC TBNZ X20, 0x0, 0x1CC2D04
	0x01CC2CC0 LDR X0, [X19 + 0x20]
	0x01CC2CC4 CBZ X0, 0x1CC2D24
	0x01CC2CC8 MOV X1, X31
	0x01CC2CCC BL 0x3A9B084
	0x01CC2CD0 CBZ X0, 0x1CC2D24
	0x01CC2CD4 MOV X1, X31
	0x01CC2CD8 BL 0x3AA7658
	0x01CC2CDC LDR X0, [X19 + 0xA8]
	0x01CC2CE0 CBZ X0, 0x1CC2D24
	0x01CC2CE4 MOV X1, X31
	0x01CC2CE8 MOV V8.16B, V0.16B
	0x01CC2CEC MOV V9.16B, V1.16B
	0x01CC2CF0 MOV V11.16B, V2.16B
	0x01CC2CF4 BL 0x3AA7658
	0x01CC2CF8 FSUB S10, S8, S0
	0x01CC2CFC FSUB S9, S9, S1
	0x01CC2D00 FSUB S8, S11, S2
	0x01CC2D04 STP S10, S9, [X19 + 0xB0]
	0x01CC2D08 STR S8, [X19 + 0xB8]
	0x01CC2D0C LDP X20, X19, [X31 + 0x40]
	0x01CC2D10 LDP X22, X21, [X31 + 0x30]
	0x01CC2D14 LDR X30, [X31 + 0x20]
	0x01CC2D18 LDP D9, D8, [X31 + 0x10]
	0x01CC2D1C LDP D11, D10, [X31], #0x50
	0x01CC2D20 RET
	0x01CC2D24 BL 0x1B6EA1C
	0x01CC2D28 STR D8, [X31 - 0x30]!
	0x01CC2D2C STP X30, X21, [X31 + 0x10]
	0x01CC2D30 STP X20, X19, [X31 + 0x20]
	0x01CC2D34 ADRP X21, 0x2561000
	0x01CC2D38 ADRP X20, 0x228C000
	0x01CC2D3C LDRB W8, [X21 + 0x54D]
	0x01CC2D40 LDR X20, [X20 + 0x198]
	0x01CC2D44 MOV V8.16B, V0.16B
	0x01CC2D48 MOV W19, W1
	0x01CC2D4C TBNZ X8, 0x0, 0x1CC2D64
	0x01CC2D50 ADRP X0, 0x228C000
	0x01CC2D54 LDR X0, [X0 + 0x198]
	0x01CC2D58 BL 0x1B6E7F0
	0x01CC2D5C MOVZ W8, 0x1
	0x01CC2D60 STRB W8, [X21 + 0x54D]
	0x01CC2D64 LDR X0, [X20]
	0x01CC2D68 LDR W8, [X0 + 0xE0]
	0x01CC2D6C CBNZ W8, 0x1CC2D78
	0x01CC2D70 BL 0x1B6E8F8
	0x01CC2D74 LDR X0, [X20]
	0x01CC2D78 LDR X8, [X0 + 0xB8]
	0x01CC2D7C LDR X8, [X8 + 0x38]
	0x01CC2D80 CBZ X8, 0x1CC2DA8
	0x01CC2D84 LDR X3, [X8 + 0x18]
	0x01CC2D88 LDR X0, [X8 + 0x40]
	0x01CC2D8C LDR X2, [X8 + 0x28]
	0x01CC2D90 AND W1, W19, 0x1
	0x01CC2D94 LDP X20, X19, [X31 + 0x20]
	0x01CC2D98 LDP X30, X21, [X31 + 0x10]
	0x01CC2D9C MOV V0.16B, V8.16B
	0x01CC2DA0 LDR V8, [X31], #0x30
	0x01CC2DA4 BR X3
	0x01CC2DA8 LDP X20, X19, [X31 + 0x20]
	0x01CC2DAC LDP X30, X21, [X31 + 0x10]
	0x01CC2DB0 LDR V8, [X31], #0x30
	0x01CC2DB4 RET
	0x01CC2DB8 STR X30, [X31 - 0x30]!
	0x01CC2DBC STP X22, X21, [X31 + 0x10]
	0x01CC2DC0 STP X20, X19, [X31 + 0x20]
	0x01CC2DC4 ADRP X22, 0x2561000
	0x01CC2DC8 ADRP X21, 0x228C000
	0x01CC2DCC LDRB W8, [X22 + 0x54E]
	0x01CC2DD0 LDR X21, [X21 + 0x198]
	0x01CC2DD4 MOV W19, W1
	0x01CC2DD8 MOV X20, X0
	0x01CC2DDC TBNZ X8, 0x0, 0x1CC2DF4
	0x01CC2DE0 ADRP X0, 0x228C000
	0x01CC2DE4 LDR X0, [X0 + 0x198]
	0x01CC2DE8 BL 0x1B6E7F0
	0x01CC2DEC MOVZ W8, 0x1
	0x01CC2DF0 STRB W8, [X22 + 0x54E]
	0x01CC2DF4 STR W19, [X20 + 0x110]
	0x01CC2DF8 LDR X0, [X21]
	0x01CC2DFC LDR W8, [X0 + 0xE0]
	0x01CC2E00 CBNZ W8, 0x1CC2E0C
	0x01CC2E04 BL 0x1B6E8F8
	0x01CC2E08 LDR X0, [X21]
	0x01CC2E0C LDR X8, [X0 + 0xB8]
	0x01CC2E10 LDR X8, [X8 + 0x48]
	0x01CC2E14 CBZ X8, 0x1CC2E38
	0x01CC2E18 LDR X3, [X8 + 0x18]
	0x01CC2E1C LDR X0, [X8 + 0x40]
	0x01CC2E20 LDR X2, [X8 + 0x28]
	0x01CC2E24 MOV W1, W19
	0x01CC2E28 LDP X20, X19, [X31 + 0x20]
	0x01CC2E2C LDP X22, X21, [X31 + 0x10]
	0x01CC2E30 LDR X30, [X31], #0x30
	0x01CC2E34 BR X3
	0x01CC2E38 LDP X20, X19, [X31 + 0x20]
	0x01CC2E3C LDP X22, X21, [X31 + 0x10]
	0x01CC2E40 LDR X30, [X31], #0x30
	0x01CC2E44 RET
	0x01CC2E48 STR X30, [X31 - 0x10]!
	0x01CC2E4C LDR X0, [X0 + 0x20]
	0x01CC2E50 CBZ X0, 0x1CC2E60
	0x01CC2E54 MOV X1, X31
	0x01CC2E58 LDR X30, [X31], #0x10
	0x01CC2E5C B 0x1D07280
	0x01CC2E60 BL 0x1B6EA1C
	0x01CC2E64 STR X30, [X31 - 0x10]!
	0x01CC2E68 LDR X0, [X0 + 0x20]
	0x01CC2E6C CBZ X0, 0x1CC2E7C
	0x01CC2E70 MOV X1, X31
	0x01CC2E74 LDR X30, [X31], #0x10
	0x01CC2E78 B 0x1D07260
	0x01CC2E7C BL 0x1B6EA1C
	0x01CC2E80 SUB X31, X31, 0x50
	0x01CC2E84 STR D8, [X31 + 0x20]
	0x01CC2E88 STP X30, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-128], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X24, 0x2562000
	017 Move W8, [X24+1352]
	018 Move X21, X4
	019 Move X20, X3
	020 Move X22, X2
	021 Move V8, V2
	022 Move V9, V1
	023 Move V10, V0
	024 Move W23, W1
	025 Move X19, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {47}
	030 Move X0, 0x228C000
	031 Move X0, [X0+1216]
	032 Call 0x1B6F7F0
	033 Move X0, 0x228E000
	034 Move X0, [X0+872]
	035 Call 0x1B6F7F0
	036 Move X0, 0x228E000
	037 Move X0, [X0+880]
	038 Call 0x1B6F7F0
	039 Move X0, 0x228C000
	040 Move X0, [X0+3016]
	041 Call 0x1B6F7F0
	042 Move X0, 0x228E000
	043 Move X0, [X0+888]
	044 Call 0x1B6F7F0
	045 Move W8, 1
	046 Move [X24+1352], W8
	047 Move X0, [X19+88]
	048 Compare X0, 0
	049 JumpIfEqual {249}
	050 Move X25, 0x228C000
	051 Move X25, [X25+3016]
	052 Move X1, X31
	053 Call Transform.get_position, X0
	054 Move X0, [X25]
	055 Move X24, [X19+216]
	056 Move W1, 1
	057 Move V11, V0
	058 Move V12, V1
	059 Move V13, V2
	060 Call 0x1B6F868
	061 Compare X0, 0
	062 JumpIfEqual {249}
	063 Move W8, [X0+24]
	064 Compare W8, 0
	065 JumpIfEqual {250}
	066 Move X8, 0x228E000
	067 Move X8, [X8+888]
	068 Move X25, 0x228C000
	069 Move X1, X31
	070 Move X8, [X8]
	071 Move X25, [X25+1216]
	072 Move [X0+32], X8
	073 Call LayerMask.GetMask, X0
	074 Move X8, [X25]
	075 Move W25, W0
	076 Move W9, [X8+224]
	077 Compare W9, 0
	078 JumpIfNotEqual {81}
	079 Move X0, X8
	080 Call 0x1B6F8F8
	081 Move X8, -18972672
	082 Move V14, [X8+2736]
	083 Move V0, V11
	084 Move V1, V12
	085 Move V2, V13
	086 Move V3, V14
	087 Move X0, X24
	088 Move W1, W25
	089 Move X2, X31
	090 Call Physics.OverlapSphereNonAlloc, X0, V0, X1, X2
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move W8, [X19+132]
	093 Compare W8, 0
	094 JumpIfEqual {111}
	095 Move X20, [X31+112]
	096 Move X19, [X31+120]
	097 Move X22, [X31+96]
	098 Move X21, [X31+104]
	099 Move X24, [X31+80]
	100 Move X23, [X31+88]
	101 Move X30, [X31+64]
	102 Move X25, [X31+72]
	103 Move D9, [X31+48]
	104 Move D8, [X31+56]
	105 Move D11, [X31+32]
	106 Move D10, [X31+40]
	107 Move D13, [X31+16]
	108 Move D12, [X31+24]
	109 Move V14, [X31+128]
	110 Return 
	111 Move S0, 0.5
	112 Move W0, W31
	113 Move V1, V14
	114 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	115 Move S0, 0.5
	116 Move W0, 1
	117 Move V1, V14
	118 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	119 Move W8, [X19+128]
	120 Move X0, X19
	121 Subtract W1, W8, W23
	122 Call PlayerController.SetCurrentHealth, X0, X1
	123 Move X0, [X19+56]
	124 Compare X0, 0
	125 JumpIfEqual {249}
	126 Call PlayerView.PlayerHit, X0
	127 Move X8, 0x228E000
	128 Move X8, [X8+880]
	129 Move X0, [X8]
	130 Move W8, [X0+224]
	131 Compare W8, 0
	132 JumpIfNotEqual {134}
	133 Call 0x1B6F8F8
	134 Move X0, X31
	135 Call ScreenEffectManager.PlayerHit
	136 Move W8, [X19+128]
	137 NotImplemented "Instruction CMP not yet implemented."
	138 NotImplemented "Instruction CSET not yet implemented."
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move [X19+132], W9
	141 Move X0, X22
	142 Move X1, X31
	143 Call String.IsNullOrEmpty, X0
	144 Move TEMP, X0
	145 And TEMP, TEMP, 1
	146 Compare TEMP, 1
	147 JumpIfEqual {154}
	148 Move S3, 1
	149 Move X0, X22
	150 Move V0, V10
	151 Move V1, V9
	152 Move V2, V8
	153 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	154 Move X8, [X19+144]
	155 Compare X8, 0
	156 JumpIfNotEqual {194}
	157 Move X0, X19
	158 Call PlayerController.RegenerationCoroutine, X0
	159 Move X1, X0
	160 Move [X19+144], X0
	161 Move X0, X19
	162 Move X2, X31
	163 Call MonoBehaviour.StartCoroutine, X0, X1
	164 Move X1, [X19+192]
	165 Compare X1, 0
	166 JumpIfEqual {170}
	167 Move X0, X19
	168 Move X2, X31
	169 Call MonoBehaviour.StopCoroutine, X0, X1
	170 Move S0, [X19+152]
	171 Move S1, [X19+156]
	172 Move V2, [X19+160]
	173 Move X0, X19
	174 Move X1, X21
	175 Call PlayerController.SetDeathCoroutine, X0, X1, X2
	176 Move X1, X0
	177 Move [X19+192], X0
	178 Move X0, X19
	179 Move X2, X31
	180 Call MonoBehaviour.StartCoroutine, X0, X1
	181 Move X0, X20
	182 Move X1, X31
	183 Call String.IsNullOrEmpty, X0
	184 Move TEMP, X0
	185 And TEMP, TEMP, 1
	186 Compare TEMP, 1
	187 JumpIfEqual {194}
	188 Move S3, 1
	189 Move X0, X20
	190 Move V0, V10
	191 Move V1, V9
	192 Move V2, V8
	193 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	194 Move X0, [X19+80]
	195 Compare X0, 0
	196 JumpIfEqual {249}
	197 Move X1, X31
	198 Call Transform.get_position, X0
	199 Move W8, 0x43B40000
	200 Move V8, V0
	201 Move V9, V1
	202 Move S0, W31
	203 Move S1, W8
	204 Move X0, X31
	205 Move V10, V2
	206 Call Random.Range, V0, V1
	207 Move X8, -18972672
	208 Move V1, [X8+2804]
	209 Move S2, W31
	210 Move X0, X31
	211 Multiply S1, S0, S1
	212 Move S0, W31
	213 Call Quaternion.Internal_FromEulerRad, X0
	214 Move X8, 0x228E000
	215 Move X8, [X8+872]
	216 Move V11, V0
	217 Move V12, V1
	218 Move V13, V2
	219 Move X0, [X8]
	220 Move V14, V3
	221 Move W8, [X0+224]
	222 Compare W8, 0
	223 JumpIfNotEqual {225}
	224 Call 0x1B6F8F8
	225 Move V0, V8
	226 Move V1, V9
	227 Move V2, V10
	228 Move V3, V11
	229 Move V4, V12
	230 Move V5, V13
	231 Move X20, [X31+112]
	232 Move X19, [X31+120]
	233 Move X22, [X31+96]
	234 Move X21, [X31+104]
	235 Move X24, [X31+80]
	236 Move X23, [X31+88]
	237 Move X30, [X31+64]
	238 Move X25, [X31+72]
	239 Move D9, [X31+48]
	240 Move D8, [X31+56]
	241 Move D11, [X31+32]
	242 Move D10, [X31+40]
	243 Move D13, [X31+16]
	244 Move D12, [X31+24]
	245 Move W0, 1
	246 Move W1, 1
	247 Move V6, V14
	248 Move V14, [X31+128]
	249 Call 0x1B6FA1C
	250 Call 0x1B6FA24

Method: System.Collections.IEnumerator RegenerationCoroutine()

Disassembly:
	0x01CC3310 BL 0x2090EE4
	0x01CC3314 MOV V8.16B, V9.16B
	0x01CC3318 TBZ X0, 0x0, 0x1CC33A4
	0x01CC331C LDR X8, [X31 + 0x58]
	0x01CC3320 CBZ X8, 0x1CC3524
	0x01CC3324 LDR X0, [X24]
	0x01CC3328 MOV V9.16B, V10.16B
	0x01CC332C LDR X22, [X8 + 0x20]
	0x01CC3330 LDR V10, [X31 + 0xC]
	0x01CC3334 LDR W9, [X0 + 0xE0]
	0x01CC3338 CBNZ W9, 0x1CC3340
	0x01CC333C BL 0x1B6E8F8
	0x01CC3340 MOV X0, X22
	0x01CC3344 MOV X1, X31
	0x01CC3348 MOV X2, X31
	0x01CC334C BL 0x3A9D6EC
	0x01CC3350 TBZ X0, 0x0, 0x1CC34A8
	0x01CC3354 LDR X8, [X31 + 0x58]
	0x01CC3358 CBZ X8, 0x1CC3524
	0x01CC335C LDR X8, [X8 + 0x20]
	0x01CC3360 CBZ X8, 0x1CC3524
	0x01CC3364 LDR X0, [X24]
	0x01CC3368 LDR X22, [X8 + 0x20]
	0x01CC336C LDR W9, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2561000
	006 Move X21, 0x228D000
	007 Move W8, [X20+1353]
	008 Move X21, [X21+896]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x228D000
	015 Move X0, [X0+896]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1353], W8
	019 Move X0, [X21]
	020 Call 0x1B6FA0C
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move [X20+16], W31
	025 Move [X20+32], X19
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Collections.IEnumerator SetDeathCoroutine(System.String hitName, UnityEngine.Vector3 force = null)

Disassembly:
	0x01CC2958 FMUL S6, S15, S1
	0x01CC295C FMUL S7, S8, S2
	0x01CC2960 FMUL S16, S15, S0
	0x01CC2964 FMUL S17, S8, S3
	0x01CC2968 FMUL S18, S9, S2
	0x01CC296C FMUL S19, S12, S1
	0x01CC2970 FMUL S20, S9, S1
	0x01CC2974 FMUL S1, S8, S1
	0x01CC2978 FMUL S21, S8, S0
	0x01CC297C FMUL S22, S12, S2
	0x01CC2980 FMUL S23, S12, S3
	0x01CC2984 FMUL S3, S15, S3
	0x01CC2988 FMUL S2, S15, S2
	0x01CC298C LDP S15, S12, [X31 + 0x14]
	0x01CC2990 LDR V8, [X31 + 0xC]
	0x01CC2994 FMUL S0, S9, S0
	0x01CC2998 FSUB S4, S4, S5
	0x01CC299C FADD S5, S17, S18
	0x01CC29A0 FADD S3, S3, S20
	0x01CC29A4 FADD S0, S23, S0
	0x01CC29A8 FSUB S4, S4, S6
	0x01CC29AC FADD S5, S16, S5
	0x01CC29B0 FADD S3, S22, S3
	0x01CC29B4 FADD S0, S1, S0
	0x01CC29B8 FSUB S6, S4, S7
	0x01CC29BC FSUB S5, S5, S19
	0x01CC29C0 FSUB S4, S3, S21
	0x01CC29C4 FSUB S3, S0, S2
	0x01CC29C8 MOV X0, X20
	0x01CC29CC MOV V0.16B, V12.16B
	0x01CC29D0 MOV V1.16B, V8.16B
	0x01CC29D4 MOV V2.16B, V15.16B
	0x01CC29D8 MOV X1, X31
	0x01CC29DC BL 0x3AA80CC
	0x01CC29E0 LDR V2, [X31 + 0x10]
	0x01CC29E4 ADRP X20, 0x2561000

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x2562000
	010 Move X22, 0x228E000
	011 Move W8, [X21+1354]
	012 Move X22, [X22+864]
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x228E000
	023 Move X0, [X0+864]
	024 Call 0x1B6F7F0
	025 Move W8, 1
	026 Move [X21+1354], W8
	027 Move X0, [X22]
	028 Call 0x1B6FA0C
	029 Move X1, X31
	030 Move X21, X0
	031 Call Object..ctor, X0
	032 Move [X21+16], W31
	033 Move [X21+32], X20
	034 Move [X21+40], X19
	035 Move [X21+48], S10
	036 Move [X21+56], S9
	037 Move [X21+56], S8
	038 Move X0, X21
	039 Move X20, [X31+48]
	040 Move X19, [X31+56]
	041 Move X22, [X31+32]
	042 Move X21, [X31+40]
	043 Move X30, [X31+24]
	044 Move D9, [X31+8]
	045 Move D8, [X31+16]
	046 Move V10, [X31+64]
	047 Return X0

Method: System.Void Respawn(UnityEngine.Transform targetTransform, System.Boolean dropItems = False)

Disassembly:
	0x01CC33C0 ADRP X24, 0x2560000
	0x01CC33C4 CMP W22, 0x1
	0x01CC33C8 B.LT 0x1CC3448
	0x01CC33CC LDRB W9, [X24 + 0x454]
	0x01CC33D0 CBNZ W9, 0x1CC33F0
	0x01CC33D4 ADRP X0, 0x228B000
	0x01CC33D8 LDR X0, [X0 + 0x1F8]
	0x01CC33DC BL 0x1B6E7F0
	0x01CC33E0 LDR X8, [X31 + 0x58]
	0x01CC33E4 MOVZ W9, 0x1
	0x01CC33E8 STRB W9, [X24 + 0x454]
	0x01CC33EC CBZ X8, 0x1CC3524
	0x01CC33F0 LDR X0, [X8 + 0x20]
	0x01CC33F4 CBZ X0, 0x1CC3524
	0x01CC33F8 MOV X1, X31
	0x01CC33FC BL 0x3AA0C88
	0x01CC3400 ADRP X8, 0x228C000
	0x01CC3404 LDR X8, [X8 + 0x3C8]
	0x01CC3408 MOV X1, X0
	0x01CC340C MOV X2, X31
	0x01CC3410 LDR X8, [X8]
	0x01CC3414 MOV X0, X8
	0x01CC3418 BL 0x3084780
	0x01CC341C MOV X4, X0
	0x01CC3420 MOV X0, X20
	0x01CC3424 MOV W1, W22
	0x01CC3428 MOV V0.16B, V10.16B
	0x01CC342C MOV V1.16B, V9.16B
	0x01CC3430 MOV V2.16B, V8.16B
	0x01CC3434 MOV X2, X31
	0x01CC3438 MOV X3, X31

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Compare X1, 0
	009 JumpIfEqual {37}
	010 Move X21, X1
	011 Move X20, X0
	012 Move X0, X1
	013 Move X1, X31
	014 Move W19, W2
	015 Call Transform.get_position, X0
	016 Move X0, X21
	017 Move X1, X31
	018 Move V8, V0
	019 Move V9, V1
	020 Move V10, V2
	021 Call Transform.get_forward, X0
	022 Move V3, V0
	023 Move V4, V1
	024 And W1, W19, 1
	025 Move X0, X20
	026 Move V0, V8
	027 Move V1, V9
	028 Move X20, [X31+48]
	029 Move X19, [X31+56]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Move D9, [X31+16]
	033 Move D8, [X31+24]
	034 Move V5, V2
	035 Move V2, V10
	036 Move V10, [X31+64]
	037 Call 0x1B6FA1C

Method: System.Void Respawn(UnityEngine.Vector3 targetPosition, System.Boolean dropItems = False)

Disassembly:
	0x01CC3578 MOV X1, X31
	0x01CC357C BL 0x3AF2410
	0x01CC3580 CBZ X0, 0x1CC35D4
	0x01CC3584 LDR W8, [X0 + 0x18]
	0x01CC3588 CBZ W8, 0x1CC35D8
	0x01CC358C ADD X0, X0, 0x20
	0x01CC3590 MOV X1, X31
	0x01CC3594 FMUL S10, S10, S11
	0x01CC3598 FMUL S9, S9, S11
	0x01CC359C FMUL S8, S8, S11
	0x01CC35A0 BL 0x3AF7D18
	0x01CC35A4 MOV X0, X20
	0x01CC35A8 MOV X1, X21
	0x01CC35AC MOV V3.16B, V8.16B
	0x01CC35B0 MOV V4.16B, V9.16B
	0x01CC35B4 MOV W2, W19
	0x01CC35B8 LDP X20, X19, [X31 + 0x40]
	0x01CC35BC LDP X22, X21, [X31 + 0x30]
	0x01CC35C0 LDR X30, [X31 + 0x20]
	0x01CC35C4 LDP D9, D8, [X31 + 0x10]
	0x01CC35C8 MOV V5.16B, V10.16B
	0x01CC35CC LDP D11, D10, [X31], #0x50
	0x01CC35D0 B 0x1CC3154
	0x01CC35D4 BL 0x1B6EA1C
	0x01CC35D8 BL 0x1B6EA24
	0x01CC35DC CMP W1, 0x1
	0x01CC35E0 B.EQ 0x1CC35EC
	0x01CC35E4 CBNZ W1, 0x1CC35F0
	0x01CC35E8 B 0x1CCD9CC
	0x01CC35EC B 0x1CC181C
	0x01CC35F0 RET
	0x01CC35F4 SUB X31, X31, 0x20
	0x01CC35F8 STP X30, X19, [X31 + 0x10]
	0x01CC35FC MOV X19, X1
	0x01CC3600 ADD X1, X31, 0x8
	0x01CC3604 STR X31, [X31 + 0x8]
	0x01CC3608 BL 0x1CC3FDC
	0x01CC360C ADRP X8, 0xFFFFFFFFFEDE6000
	0x01CC3610 LDR V1, [X31 + 0x8]
	0x01CC3614 LDR V0, [X8 + 0xC1C]
	0x01CC3618 FCMP S1, S0
	0x01CC361C B.PL 0x1CC3630
	0x01CC3620 LDR V2, [X19]
	0x01CC3624 FCMP S2, S0
	0x01CC3628 FMOV S0, -1
	0x01CC362C B.GE 0x1CC3654
	0x01CC3630 ADRP X8, 0xFFFFFFFFFEDE6000
	0x01CC3634 LDR V2, [X8 + 0xAF8]
	0x01CC3638 FMOV S0, W31
	0x01CC363C FCMP S1, S2
	0x01CC3640 B.LE 0x1CC3654
	0x01CC3644 LDR V1, [X19]
	0x01CC3648 FCMP S1, S2
	0x01CC364C B.HI 0x1CC3654
	0x01CC3650 FMOV S0, 1
	0x01CC3654 LDR X8, [X31 + 0x8]
	0x01CC3658 STR X8, [X19]
	0x01CC365C LDP X30, X19, [X31 + 0x10]
	0x01CC3660 ADD X31, X31, 0x20
	0x01CC3664 RET
	0x01CC3668 SUB X31, X31, 0x1E0
	0x01CC366C STP D15, D14, [X31 + 0x170]
	0x01CC3670 STP D13, D12, [X31 + 0x180]
	0x01CC3674 STP D11, D10, [X31 + 0x190]
	0x01CC3678 STP D9, D8, [X31 + 0x1A0]
	0x01CC367C STR X29, [X31 + 0x1B0]
	0x01CC3680 STP X30, X21, [X31 + 0x1C0]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x2561000
	009 Move W8, [X21+1355]
	010 Move W20, W1
	011 Move V8, V2
	012 Move V9, V1
	013 Move V10, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x228C000
	020 Move X0, [X0+680]
	021 Call 0x1B6F7F0
	022 Move W8, 1
	023 Move [X21+1355], W8
	024 Move X21, 0x228C000
	025 Move X21, [X21+680]
	026 Move TEMP, X20
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {59}
	030 Move X0, [X21]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1B6F8F8
	035 Move X0, X31
	036 Call NetPlayer.get_localPlayer
	037 Compare X0, 0
	038 JumpIfEqual {90}
	039 Move X1, X31
	040 Call NetPlayer.DropItemsIfHolding, X0
	041 Move X0, [X19+32]
	042 Compare X0, 0
	043 JumpIfEqual {90}
	044 Move V0, V10
	045 Move V1, V9
	046 Move V2, V8
	047 Move X1, X31
	048 Call Player.Reposition, X0, X1
	049 Move X0, [X19+56]
	050 Compare X0, 0
	051 JumpIfEqual {90}
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Move D9, [X31+16]
	057 Move D8, [X31+24]
	058 Move V10, [X31+64]
	059 Move X0, [X19+32]
	060 Compare X0, 0
	061 JumpIfEqual {90}
	062 Move V0, V10
	063 Move V1, V9
	064 Move V2, V8
	065 Move X1, X31
	066 Call Player.Reposition, X0, X1
	067 Move X0, [X19+56]
	068 Compare X0, 0
	069 JumpIfEqual {90}
	070 Call PlayerView.UpdateTransforms, X0
	071 Move X0, [X21]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1B6F8F8
	076 Move X0, X31
	077 Call NetPlayer.get_localPlayer
	078 Compare X0, 0
	079 JumpIfEqual {90}
	080 Move X20, [X31+48]
	081 Move X19, [X31+56]
	082 Move X30, [X31+32]
	083 Move X21, [X31+40]
	084 Move D9, [X31+16]
	085 Move D8, [X31+24]
	086 Move X1, X31
	087 Move V10, [X31+64]
	088 Call NetPlayer.RepositionItemsIfHolding, X0
	089 Return 
	090 Call 0x1B6FA1C

Method: System.Void Respawn(UnityEngine.Vector3 targetPosition, UnityEngine.Vector3 targetDirection, System.Boolean dropItems = False)

Disassembly:
	0x01CC343C BL 0x1CC1B3C
	0x01CC3440 LDR X8, [X31 + 0x58]
	0x01CC3444 CBZ X8, 0x1CC3524
	0x01CC3448 LDR X8, [X8 + 0x20]
	0x01CC344C CBZ X8, 0x1CC3524
	0x01CC3450 LDRB W9, [X8 + 0x2C]
	0x01CC3454 CBZ W9, 0x1CC34A8
	0x01CC3458 LDRB W9, [X24 + 0x454]
	0x01CC345C LDRB W20, [X8 + 0x2D]
	0x01CC3460 CBNZ W9, 0x1CC3478
	0x01CC3464 ADRP X0, 0x228B000
	0x01CC3468 LDR X0, [X0 + 0x1F8]
	0x01CC346C BL 0x1B6E7F0
	0x01CC3470 MOVZ W8, 0x1
	0x01CC3474 STRB W8, [X24 + 0x454]
	0x01CC3478 ADRP X8, 0x228B000
	0x01CC347C LDR X8, [X8 + 0x1F8]
	0x01CC3480 MOV W0, W20
	0x01CC3484 MOV V0.16B, V10.16B
	0x01CC3488 MOV V1.16B, V9.16B
	0x01CC348C LDR X8, [X8]
	0x01CC3490 MOV V2.16B, V8.16B
	0x01CC3494 MOV X1, X31
	0x01CC3498 LDR X8, [X8 + 0xB8]
	0x01CC349C LDP S3, S4, [X8]
	0x01CC34A0 LDP S5, S6, [X8 + 0x8]
	0x01CC34A4 BL 0x1CF3540
	0x01CC34A8 CBZ X21, 0x1CC3524
	0x01CC34AC MOV X0, X21
	0x01CC34B0 MOV V0.16B, V10.16B
	0x01CC34B4 MOV V1.16B, V9.16B
	0x01CC34B8 MOV V2.16B, V8.16B
	0x01CC34BC MOV V3.16B, V11.16B
	0x01CC34C0 BL 0x1CC181C
	0x01CC34C4 LDR X0, [X23]
	0x01CC34C8 LDR W8, [X0 + 0xE0]
	0x01CC34CC CBNZ W8, 0x1CC34D8
	0x01CC34D0 BL 0x1B6E8F8
	0x01CC34D4 LDR X0, [X23]
	0x01CC34D8 LDR X8, [X0 + 0xB8]
	0x01CC34DC LDR X8, [X8 + 0x18]
	0x01CC34E0 CBZ X8, 0x1CC34FC
	0x01CC34E4 LDR X9, [X8 + 0x18]
	0x01CC34E8 LDR X0, [X8 + 0x40]
	0x01CC34EC LDR X2, [X8 + 0x28]
	0x01CC34F0 MOV W1, W19
	0x01CC34F4 MOV V0.16B, V11.16B
	0x01CC34F8 BLR X9
	0x01CC34FC LDP X20, X19, [X31 + 0x80]
	0x01CC3500 LDP X22, X21, [X31 + 0x70]
	0x01CC3504 LDP X24, X23, [X31 + 0x60]
	0x01CC3508 LDR X30, [X31 + 0x50]
	0x01CC350C LDP D9, D8, [X31 + 0x40]
	0x01CC3510 LDP D11, D10, [X31 + 0x30]
	0x01CC3514 LDP D13, D12, [X31 + 0x20]
	0x01CC3518 LDP D15, D14, [X31 + 0x10]
	0x01CC351C ADD X31, X31, 0x90
	0x01CC3520 RET
	0x01CC3524 BL 0x1B6EA1C
	0x01CC3528 STP D11, D10, [X31 - 0x50]!
	0x01CC352C STP D9, D8, [X31 + 0x10]
	0x01CC3530 STR X30, [X31 + 0x20]
	0x01CC3534 STP X22, X21, [X31 + 0x30]
	0x01CC3538 STP X20, X19, [X31 + 0x40]
	0x01CC353C MOV X20, X0
	0x01CC3540 MOV X0, X31
	0x01CC3544 MOV W19, W2
	0x01CC3548 MOV V10.16B, V2.16B
	0x01CC354C MOV V9.16B, V1.16B
	0x01CC3550 MOV V8.16B, V0.16B
	0x01CC3554 MOV X22, X1
	0x01CC3558 BL 0x3AA481C
	0x01CC355C CBZ X22, 0x1CC35D4
	0x01CC3560 MOV X0, X22
	0x01CC3564 MOV X1, X31
	0x01CC3568 MOV V11.16B, V0.16B
	0x01CC356C BL 0x3AF223C
	0x01CC3570 MOV X21, X0
	0x01CC3574 MOV X0, X22

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x2561000
	012 Move W8, [X21+1356]
	013 Move W20, W1
	014 Move V8, V5
	015 Move V9, V4
	016 Move V10, V3
	017 Move V11, V2
	018 Move V12, V1
	019 Move V13, V0
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x228C000
	026 Move X0, [X0+680]
	027 Call 0x1B6F7F0
	028 Move W8, 1
	029 Move [X21+1356], W8
	030 Move X21, 0x228C000
	031 Move X21, [X21+680]
	032 Move TEMP, X20
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {73}
	036 Move X0, [X21]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1B6F8F8
	041 Move X0, X31
	042 Call NetPlayer.get_localPlayer
	043 Compare X0, 0
	044 JumpIfEqual {110}
	045 Move X1, X31
	046 Call NetPlayer.DropItemsIfHolding, X0
	047 Move X0, [X19+32]
	048 Compare X0, 0
	049 JumpIfEqual {110}
	050 Move V0, V13
	051 Move V1, V12
	052 Move V2, V11
	053 Move V3, V10
	054 Move V4, V9
	055 Move V5, V8
	056 Move X1, X31
	057 Call Player.Reposition, X0, X1, X2
	058 Move X0, [X19+56]
	059 Compare X0, 0
	060 JumpIfEqual {110}
	061 Move X20, [X31+64]
	062 Move X19, [X31+72]
	063 Move X30, [X31+48]
	064 Move X21, [X31+56]
	065 Move D9, [X31+32]
	066 Move D8, [X31+40]
	067 Move D11, [X31+16]
	068 Move D10, [X31+24]
	069 Move D13, [X31+80]
	070 Move D12, [X31+88]
	071 Call PlayerView.UpdateTransforms, X0
	072 Return 
	073 Move X0, [X19+32]
	074 Compare X0, 0
	075 JumpIfEqual {110}
	076 Move V0, V13
	077 Move V1, V12
	078 Move V2, V11
	079 Move V3, V10
	080 Move V4, V9
	081 Move V5, V8
	082 Move X1, X31
	083 Call Player.Reposition, X0, X1, X2
	084 Move X0, [X19+56]
	085 Compare X0, 0
	086 JumpIfEqual {110}
	087 Call PlayerView.UpdateTransforms, X0
	088 Move X0, [X21]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {93}
	092 Call 0x1B6F8F8
	093 Move X0, X31
	094 Call NetPlayer.get_localPlayer
	095 Compare X0, 0
	096 JumpIfEqual {110}
	097 Move X20, [X31+64]
	098 Move X19, [X31+72]
	099 Move X30, [X31+48]
	100 Move X21, [X31+56]
	101 Move D9, [X31+32]
	102 Move D8, [X31+40]
	103 Move D11, [X31+16]
	104 Move D10, [X31+24]
	105 Move X1, X31
	106 Move D13, [X31+80]
	107 Move D12, [X31+88]
	108 Call NetPlayer.RepositionItemsIfHolding, X0
	109 Return 
	110 Call 0x1B6FA1C

Method: System.Void AttachToTransform(System.Boolean attach, UnityEngine.Transform transform, System.Boolean moveToTransformImmediately = False, UnityEngine.Vector3 offset = null)

Disassembly:
	0x01CC3C68 LDP D13, D12, [X31 + 0x180]
	0x01CC3C6C LDP D15, D14, [X31 + 0x170]
	0x01CC3C70 ADD X31, X31, 0x1E0
	0x01CC3C74 RET
	0x01CC3C78 BL 0x1B6EA1C
	0x01CC3C7C BL 0x3D19880
	0x01CC3C80 STR X30, [X31 - 0x10]!
	0x01CC3C84 LDR X8, [X0 + 0x98]
	0x01CC3C88 CBZ X8, 0x1CC3CA8
	0x01CC3C8C LDR W9, [X8 + 0x18]
	0x01CC3C90 CBZ W9, 0x1CC3CAC
	0x01CC3C94 LDR X0, [X8 + 0x20]
	0x01CC3C98 CBZ X0, 0x1CC3CA8
	0x01CC3C9C MOV X1, X31
	0x01CC3CA0 LDR X30, [X31], #0x10
	0x01CC3CA4 B 0x3A9D8EC
	0x01CC3CA8 BL 0x1B6EA1C
	0x01CC3CAC BL 0x1B6EA24
	0x01CC3CB0 STR X30, [X31 - 0x10]!
	0x01CC3CB4 LDR X8, [X0 + 0x98]
	0x01CC3CB8 CBZ X8, 0x1CC3CDC
	0x01CC3CBC LDR W9, [X8 + 0x18]
	0x01CC3CC0 CMP W9, 0x2
	0x01CC3CC4 B.LS 0x1CC3CE0
	0x01CC3CC8 LDR X0, [X8 + 0x30]
	0x01CC3CCC CBZ X0, 0x1CC3CDC
	0x01CC3CD0 MOV X1, X31
	0x01CC3CD4 LDR X30, [X31], #0x10
	0x01CC3CD8 B 0x3A9D8EC
	0x01CC3CDC BL 0x1B6EA1C
	0x01CC3CE0 BL 0x1B6EA24
	0x01CC3CE4 STR X30, [X31 - 0x10]!
	0x01CC3CE8 LDR X8, [X0 + 0x98]
	0x01CC3CEC CBZ X8, 0x1CC3D10
	0x01CC3CF0 LDR W9, [X8 + 0x18]
	0x01CC3CF4 CMP W9, 0x1
	0x01CC3CF8 B.LS 0x1CC3D14
	0x01CC3CFC LDR X0, [X8 + 0x28]
	0x01CC3D00 CBZ X0, 0x1CC3D10
	0x01CC3D04 MOV X1, X31
	0x01CC3D08 LDR X30, [X31], #0x10
	0x01CC3D0C B 0x3A9D8EC
	0x01CC3D10 BL 0x1B6EA1C
	0x01CC3D14 BL 0x1B6EA24
	0x01CC3D18 STR X30, [X31 - 0x40]!
	0x01CC3D1C STP X24, X23, [X31 + 0x10]
	0x01CC3D20 STP X22, X21, [X31 + 0x20]
	0x01CC3D24 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, X0
	011 Move X0, [X0+32]
	012 Compare X0, 0
	013 JumpIfEqual {64}
	014 NotImplemented "Instruction ORN not yet implemented."
	015 Move X21, X2
	016 Move W22, W1
	017 And W1, W8, 1
	018 Move X2, X31
	019 Move V8, V2
	020 Move V9, V1
	021 Move V10, V0
	022 Move W20, W3
	023 Call Player.SetActiveHandCollisions, X0, X1
	024 And W31, W22, 1
	025 NotImplemented "Instruction CSEL not yet implemented."
	026 Move [X19+168], X8
	027 Move TEMP, X20
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {51}
	031 Move X0, [X19+32]
	032 Compare X0, 0
	033 JumpIfEqual {64}
	034 Move X1, X31
	035 Call Component.get_transform, X0
	036 Compare X0, 0
	037 JumpIfEqual {64}
	038 Move X1, X31
	039 Call Transform.get_position, X0
	040 Move X0, [X19+168]
	041 Compare X0, 0
	042 JumpIfEqual {64}
	043 Move X1, X31
	044 Move V8, V0
	045 Move V9, V1
	046 Move V11, V2
	047 Call Transform.get_position, X0
	048 Subtract S10, S8, S0
	049 Subtract S9, S9, S1
	050 Subtract S8, S11, S2
	051 Move [X19+176], S10
	052 Move [X19+184], S9
	053 Move [X19+184], S8
	054 Move X20, [X31+64]
	055 Move X19, [X31+72]
	056 Move X22, [X31+48]
	057 Move X21, [X31+56]
	058 Move X30, [X31+32]
	059 Move D9, [X31+16]
	060 Move D8, [X31+24]
	061 Move D11, [X31+80]
	062 Move D10, [X31+88]
	063 Return 
	064 Call 0x1B6FA1C

Method: System.Void UpdateBackpack(System.Boolean equipped, System.Single fillAmount)

Disassembly:
	0x01CC3D28 ADRP X21, 0x2560000
	0x01CC3D2C ADRP X20, 0x228B000
	0x01CC3D30 LDRB W8, [X21 + 0x553]
	0x01CC3D34 LDR X20, [X20 + 0x2E8]
	0x01CC3D38 MOV X19, X0
	0x01CC3D3C TBNZ X8, 0x0, 0x1CC3D84
	0x01CC3D40 ADRP X0, 0x228C000
	0x01CC3D44 LDR X0, [X0 + 0x3D8]
	0x01CC3D48 BL 0x1B6E7F0
	0x01CC3D4C ADRP X0, 0x228C000
	0x01CC3D50 LDR X0, [X0 + 0x3E0]
	0x01CC3D54 BL 0x1B6E7F0
	0x01CC3D58 ADRP X0, 0x228C000
	0x01CC3D5C LDR X0, [X0 + 0x3E8]
	0x01CC3D60 BL 0x1B6E7F0
	0x01CC3D64 ADRP X0, 0x228C000
	0x01CC3D68 LDR X0, [X0 + 0x3F0]
	0x01CC3D6C BL 0x1B6E7F0
	0x01CC3D70 ADRP X0, 0x228B000
	0x01CC3D74 LDR X0, [X0 + 0x2E8]
	0x01CC3D78 BL 0x1B6E7F0
	0x01CC3D7C MOVZ W8, 0x1
	0x01CC3D80 STRB W8, [X21 + 0x553]
	0x01CC3D84 ADRP X23, 0x228C000
	0x01CC3D88 MOVZ W8, 0x64
	0x01CC3D8C LDR X23, [X23 + 0x3F0]
	0x01CC3D90 STR W8, [X19 + 0x80]
	0x01CC3D94 LDR X0, [X20]
	0x01CC3D98 ADRP X24, 0x228C000
	0x01CC3D9C ADRP X22, 0x228C000
	0x01CC3DA0 ADRP X21, 0x228C000
	0x01CC3DA4 LDR X24, [X24 + 0x3E8]
	0x01CC3DA8 LDR X22, [X22 + 0x3D8]
	0x01CC3DAC LDR X21, [X21 + 0x3E0]
	0x01CC3DB0 BL 0x1B6EA0C
	0x01CC3DB4 FMOV S0, 3

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2561000
	007 Move X20, 0x228C000
	008 Move W8, [X21+1357]
	009 Move X20, [X20+408]
	010 Move V8, V0
	011 Move W19, W1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x228C000
	017 Move X0, [X0+408]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X21+1357], W8
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1B6F8F8
	026 Move X0, [X20]
	027 Move X8, [X0+184]
	028 Move X8, [X8+56]
	029 Compare X8, 0
	030 JumpIfEqual {42}
	031 Move X3, [X8+24]
	032 Move X0, [X8+64]
	033 Move X2, [X8+40]
	034 And W1, W19, 1
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move V0, V8
	040 Move V8, [X31+48]
	041 CallNoReturn X3
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+16]
	045 Move X21, [X31+24]
	046 Move V8, [X31+48]
	047 Return 

Method: System.Void SetChannel(System.Int32 channel)

Disassembly:
	0x01CC3DB8 MOV X1, X31
	0x01CC3DBC MOV X20, X0
	0x01CC3DC0 BL 0x3AA273C
	0x01CC3DC4 STR X20, [X19 + 0x88]
	0x01CC3DC8 ADRP X20, 0x2560000
	0x01CC3DCC LDRB W8, [X20 + 0x43F]
	0x01CC3DD0 CBNZ W8, 0x1CC3DE8
	0x01CC3DD4 ADRP X0, 0x228A000
	0x01CC3DD8 LDR X0, [X0 + 0x480]
	0x01CC3DDC BL 0x1B6E7F0
	0x01CC3DE0 MOVZ W8, 0x1
	0x01CC3DE4 STRB W8, [X20 + 0x43F]
	0x01CC3DE8 ADRP X8, 0x228A000
	0x01CC3DEC LDR X8, [X8 + 0x480]
	0x01CC3DF0 LDR X8, [X8]
	0x01CC3DF4 LDR X8, [X8 + 0xB8]
	0x01CC3DF8 LDR V0, [X8]
	0x01CC3DFC LDR V1, [X8 + 0x8]
	0x01CC3E00 MOVZ W8, 0xCCCD
	0x01CC3E04 MOVK W8, 0x3DCC0000
	0x01CC3E08 STR D0, [X19 + 0x98]
	0x01CC3E0C STR S1, [X19 + 0xA0]
	0x01CC3E10 STR W8, [X19 + 0xA4]
	0x01CC3E14 LDR X0, [X23]
	0x01CC3E18 BL 0x1B6EA0C
	0x01CC3E1C LDR X1, [X24]
	0x01CC3E20 MOV X20, X0
	0x01CC3E24 BL 0x28968F4
	0x01CC3E28 STR X20, [X19 + 0xC8]
	0x01CC3E2C LDR X0, [X22]
	0x01CC3E30 MOVZ W1, 0x1
	0x01CC3E34 BL 0x1B6E868
	0x01CC3E38 ADRP X8, 0xFFFFFFFFFEDE9000
	0x01CC3E3C ADRP X9, 0xFFFFFFFFFEDEA000
	0x01CC3E40 LDR V0, [X8 + 0x95]
	0x01CC3E44 LDR V1, [X9 + 0x890]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2561000
	007 Move X21, 0x228C000
	008 Move W8, [X22+1358]
	009 Move X21, [X21+408]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x228C000
	017 Move X0, [X0+408]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X22+1358], W8
	021 Move [X20+272], W19
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1B6F8F8
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X8, [X8+72]
	030 Compare X8, 0
	031 JumpIfEqual {42}
	032 Move X3, [X8+24]
	033 Move X0, [X8+64]
	034 Move X2, [X8+40]
	035 Move W1, W19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 CallNoReturn X3
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Return 

Method: System.Void AddItemContactPoint(UnityEngine.Vector3 position, UnityEngine.Vector3 prevPosition)

Disassembly:
	0x01CC3E48 MOVZ W8, 0x3F000000
	0x01CC3E4C STR X0, [X19 + 0xD8]
	0x01CC3E50 STR W8, [X19 + 0xE0]
	0x01CC3E54 STUR V0, [X19 + 0xEC]
	0x01CC3E58 STUR D1, [X19 + 0xFC]
	0x01CC3E5C LDR X0, [X21]
	0x01CC3E60 MOVZ W1, 0xC

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Player.AddItemContactPoint, X0, X1, X2
	008 Return 
	009 Call 0x1B6FA1C

Method: System.Void AddExternalForce(UnityEngine.Vector3 velocity)

Disassembly:
	0x01CC3E64 BL 0x1B6E868
	0x01CC3E68 CBZ X0, 0x1CC3F78
	0x01CC3E6C LDR W8, [X0 + 0x18]
	0x01CC3E70 CBZ W8, 0x1CC3F74
	0x01CC3E74 ADRP X9, 0xFFFFFFFFFEDE9000
	0x01CC3E78 LDR V0, [X9 + 0x96]
	0x01CC3E7C CMP W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+32]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Player.AddExternalForceVelocity, X0, X1
	008 Return 
	009 Call 0x1B6FA1C

Method: System.Void SetItemWeight(AnimalCompany.AttachedLocation slot, System.Single weight)

Disassembly:
	0x01CC3E80 STR V0, [X0 + 0x2]
	0x01CC3E84 B.EQ 0x1CC3F74
	0x01CC3E88 ADRP X9, 0xFFFFFFFFFEDE9000
	0x01CC3E8C LDR V0, [X9 + 0x81]
	0x01CC3E90 CMP W8, 0x2
	0x01CC3E94 STR V0, [X0 + 0x3]
	0x01CC3E98 B.LS 0x1CC3F74
	0x01CC3E9C ADRP X9, 0xFFFFFFFFFEDE7000
	0x01CC3EA0 LDR V0, [X9 + 0x56]
	0x01CC3EA4 CMP W8, 0x3
	0x01CC3EA8 STR V0, [X0 + 0x4]
	0x01CC3EAC B.EQ 0x1CC3F74
	0x01CC3EB0 ADRP X9, 0xFFFFFFFFFEDE8000
	0x01CC3EB4 LDR V0, [X9 + 0x6B]
	0x01CC3EB8 CMP W8, 0x4
	0x01CC3EBC STR V0, [X0 + 0x5]
	0x01CC3EC0 B.LS 0x1CC3F74
	0x01CC3EC4 ADRP X9, 0xFFFFFFFFFEDE6000
	0x01CC3EC8 LDR V0, [X9 + 0xFD]
	0x01CC3ECC CMP W8, 0x5
	0x01CC3ED0 STR V0, [X0 + 0x6]
	0x01CC3ED4 B.EQ 0x1CC3F74
	0x01CC3ED8 ADRP X9, 0xFFFFFFFFFEDE7000
	0x01CC3EDC LDR V1, [X9 + 0x57]
	0x01CC3EE0 CMP W8, 0x6
	0x01CC3EE4 STR V1, [X0 + 0x7]
	0x01CC3EE8 B.LS 0x1CC3F74
	0x01CC3EEC ADRP X9, 0xFFFFFFFFFEDE6000
	0x01CC3EF0 LDR V1, [X9 + 0xFE]
	0x01CC3EF4 CMP W8, 0x7
	0x01CC3EF8 STR V1, [X0 + 0x8]
	0x01CC3EFC B.EQ 0x1CC3F74
	0x01CC3F00 ADRP X9, 0xFFFFFFFFFEDE9000
	0x01CC3F04 LDR V1, [X9 + 0x9]
	0x01CC3F08 CMP W8, 0x8
	0x01CC3F0C STR V1, [X0 + 0x9]
	0x01CC3F10 B.LS 0x1CC3F74
	0x01CC3F14 ADRP X9, 0xFFFFFFFFFEDE9000
	0x01CC3F18 LDR V1, [X9 + 0x4A]
	0x01CC3F1C CMP W8, 0x9
	0x01CC3F20 STR V1, [X0 + 0xA]
	0x01CC3F24 B.EQ 0x1CC3F74
	0x01CC3F28 ADRP X9, 0xFFFFFFFFFEDE8000
	0x01CC3F2C LDR V1, [X9 + 0xCC]
	0x01CC3F30 CMP W8, 0xA
	0x01CC3F34 STR V1, [X0 + 0xB]
	0x01CC3F38 B.LS 0x1CC3F74
	0x01CC3F3C ADRP X9, 0xFFFFFFFFFEDE9000
	0x01CC3F40 LDR V1, [X9 + 0xB0]
	0x01CC3F44 CMP W8, 0xB
	0x01CC3F48 STR V1, [X0 + 0xC]
	0x01CC3F4C B.EQ 0x1CC3F74
	0x01CC3F50 STR V0, [X0 + 0xD]
	0x01CC3F54 STR X0, [X19 + 0x108]
	0x01CC3F58 MOV X0, X19
	0x01CC3F5C LDP X20, X19, [X31 + 0x30]
	0x01CC3F60 LDP X22, X21, [X31 + 0x20]
	0x01CC3F64 LDP X24, X23, [X31 + 0x10]
	0x01CC3F68 MOV X1, X31
	0x01CC3F6C LDR X30, [X31], #0x40
	0x01CC3F70 B 0x3A9EEE4
	0x01CC3F74 BL 0x1B6EA24
	0x01CC3F78 BL 0x1B6EA1C
	0x01CC3F7C STR X30, [X31 - 0x20]!
	0x01CC3F80 STP X20, X19, [X31 + 0x10]
	0x01CC3F84 ADRP X19, 0x2560000
	0x01CC3F88 ADRP X20, 0x228B000
	0x01CC3F8C LDRB W8, [X19 + 0x554]
	0x01CC3F90 LDR X20, [X20 + 0x198]
	0x01CC3F94 TBNZ X8, 0x0, 0x1CC3FAC
	0x01CC3F98 ADRP X0, 0x228B000
	0x01CC3F9C LDR X0, [X0 + 0x198]
	0x01CC3FA0 BL 0x1B6E7F0
	0x01CC3FA4 MOVZ W8, 0x1
	0x01CC3FA8 STRB W8, [X19 + 0x554]
	0x01CC3FAC LDR X8, [X20]
	0x01CC3FB0 ADRP X9, 0xFFFFFFFFFEDEA000
	0x01CC3FB4 LDR V0, [X9 + 0x898]
	0x01CC3FB8 ADRP X10, 0xFFFFFFFFFEDE9000
	0x01CC3FBC LDR X9, [X8 + 0xB8]
	0x01CC3FC0 LDP X20, X19, [X31 + 0x10]
	0x01CC3FC4 STR D0, [X9 + 0x50]
	0x01CC3FC8 LDR X8, [X8 + 0xB8]
	0x01CC3FCC LDR V0, [X10 + 0xD80]
	0x01CC3FD0 STR D0, [X8 + 0x58]
	0x01CC3FD4 LDR X30, [X31], #0x20
	0x01CC3FD8 RET
	0x01CC3FDC STR X30, [X31 - 0x30]!
	0x01CC3FE0 STP X22, X21, [X31 + 0x10]
	0x01CC3FE4 STP X20, X19, [X31 + 0x20]
	0x01CC3FE8 ADRP X22, 0x2560000
	0x01CC3FEC ADRP X21, 0x228C000
	0x01CC3FF0 LDRB W8, [X22 + 0x590]
	0x01CC3FF4 LDR X21, [X21 + 0x3F8]
	0x01CC3FF8 MOV X19, X1
	0x01CC3FFC MOV W20, W0
	0x01CC4000 TBNZ X8, 0x0, 0x1CC4018
	0x01CC4004 ADRP X0, 0x228B000
	0x01CC4008 LDR X0, [X0 + 0x3F8]
	0x01CC400C BL 0x1B6E7F0
	0x01CC4010 MOVZ W8, 0x1
	0x01CC4014 STRB W8, [X22 + 0x590]
	0x01CC4018 LDR X0, [X21]
	0x01CC401C LDR W8, [X0 + 0xE0]
	0x01CC4020 CBNZ W8, 0x1CC402C
	0x01CC4024 BL 0x1B6E8F8
	0x01CC4028 LDR X0, [X21]
	0x01CC402C LDR X8, [X0 + 0xB8]
	0x01CC4030 MOV W0, W20
	0x01CC4034 MOV X2, X19
	0x01CC4038 LDP X20, X19, [X31 + 0x20]
	0x01CC403C LDR X1, [X8 + 0x88]
	0x01CC4040 LDP X22, X21, [X31 + 0x10]
	0x01CC4044 LDR X30, [X31], #0x30
	0x01CC4048 B 0x1CCB874
	0x01CC404C RET
	0x01CC4050 STR X30, [X31 - 0x20]!
	0x01CC4054 STP X20, X19, [X31 + 0x10]
	0x01CC4058 LDR W8, [X0 + 0x10]
	0x01CC405C LDR X20, [X0 + 0x20]
	0x01CC4060 MOV X19, X0
	0x01CC4064 CBZ W8, 0x1CC4090
	0x01CC4068 CMP W8, 0x1
	0x01CC406C B.NE 0x1CC40D8
	0x01CC4070 MOVN W8, 0x0
	0x01CC4074 STR W8, [X19 + 0x10]
	0x01CC4078 CBZ X20, 0x1CC40E8

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D8
	003 Move [X31+48], X30
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X21, 0x2561000
	008 Move W8, [X21+1359]
	009 Move V8, V0
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {39}
	016 Move X0, 0x228D000
	017 Move X0, [X0+912]
	018 Call 0x1B6F7F0
	019 Move X0, 0x228D000
	020 Move X0, [X0+920]
	021 Call 0x1B6F7F0
	022 Move X0, 0x228D000
	023 Move X0, [X0+928]
	024 Call 0x1B6F7F0
	025 Move X0, 0x228D000
	026 Move X0, [X0+936]
	027 Call 0x1B6F7F0
	028 Move X0, 0x228D000
	029 Move X0, [X0+944]
	030 Call 0x1B6F7F0
	031 Move X0, 0x228C000
	032 Move X0, [X0+408]
	033 Call 0x1B6F7F0
	034 Move X0, 0x228D000
	035 Move X0, [X0+952]
	036 Call 0x1B6F7F0
	037 Move W8, 1
	038 Move [X21+1359], W8
	039 Move [X31+8], X31
	040 Move [X31+16], X31
	041 Move [X31+24], X31
	042 Move X0, [X19+200]
	043 Compare X0, 0
	044 JumpIfEqual {113}
	045 Move X8, 0x228D000
	046 Move X8, [X8+920]
	047 Move W1, W20
	048 Move V0, V8
	049 Move X2, [X8]
	050 Call Dictionary`2<Int32Enum, Single>.set_Item, X0, X1, V0
	051 Move X0, [X19+200]
	052 Compare X0, 0
	053 JumpIfEqual {113}
	054 Move X8, 0x228D000
	055 Move X8, [X8+912]
	056 Move X1, [X8]
	057 Call Dictionary`2<Int32Enum, Single>.get_Values, X0
	058 Compare X0, 0
	059 JumpIfEqual {113}
	060 Move X8, 0x228D000
	061 Move X8, [X8+952]
	062 Move X21, 0x228D000
	063 Move X20, 0x228D000
	064 Move X1, [X8]
	065 Move X21, [X21+936]
	066 Move X20, [X20+928]
	067 Add X8, X31, 8
	068 Call ValueCollection<Int32Enum, Single>.GetEnumerator, X0
	069 Move S8, W31
	070 Move X1, [X21]
	071 Add X0, X31, 8
	072 Call Enumerator<Int32Enum, Single>.MoveNext, X0
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {79}
	077 Move V0, [X31+24]
	078 Add S8, S8, S0
	079 Move X1, [X20]
	080 Add X0, X31, 8
	081 Call Enumerator<Int32Enum, Single>.Dispose, X0
	082 Move V0, [X19+208]
	083 NotImplemented "Instruction FCMP not yet implemented."
	084 Move [X19+208], S8
	085 Move X20, 0x228C000
	086 Move X20, [X20+408]
	087 Move X0, [X20]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {93}
	091 Call 0x1B6F8F8
	092 Move X0, [X20]
	093 Move X8, [X0+184]
	094 Move X8, [X8+64]
	095 Compare X8, 0
	096 JumpIfEqual {102}
	097 Move X9, [X8+24]
	098 Move X0, [X8+64]
	099 Move X1, [X8+40]
	100 Move V0, V8
	101 NotImplemented "Instruction BLR not yet implemented."
	102 Move X8, [X19+32]
	103 Compare X8, 0
	104 JumpIfEqual {113}
	105 Move [X8+472], S8
	106 Move X20, [X31+64]
	107 Move X19, [X31+72]
	108 Move X30, [X31+48]
	109 Move X21, [X31+56]
	110 Move V8, [X31+32]
	111 Add X31, X31, 80
	112 Return 
	113 Call 0x1B6FA1C
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move X21, X0
	116 Move X0, X21
	117 Call 0x3D1A840
	118 Move X20, [X0]
	119 Call 0x3D1A850
	120 Move X8, 0x228C000
	121 Move X8, [X8+928]
	122 Add X0, X31, 8
	123 Move X1, [X8]
	124 Call Enumerator<Int32Enum, Single>.Dispose, X0
	125 Compare X20, 0
	126 JumpIfEqual {82}
	127 Move X0, X20
	128 Call 0x1B6FA14
	129 Move X20, X31
	130 Move X21, X0
	131 Move X8, 0x228C000
	132 Move X8, [X8+928]
	133 Move X1, [X8]
	134 Add X0, X31, 8
	135 Call Enumerator<Int32Enum, Single>.Dispose, X0
	136 Compare X20, 0
	137 JumpIfNotEqual {140}
	138 Move X0, X21
	139 Call 0x1C8518C
	140 Move X0, X20
	141 Call 0x1B6FA14
	142 Call 0x18F56A8

Method: System.Void OnHandCollidingLeft(UnityEngine.RaycastHit hit, UnityEngine.Vector3 moveDelta)

Disassembly:
	0x01CC407C LDR W8, [X20 + 0x80]
	0x01CC4080 MOV X0, X20
	0x01CC4084 ADD W1, W8, 0x1
	0x01CC4088 BL 0x1CC05A4
	0x01CC408C B 0x1CC409C
	0x01CC4090 MOVN W8, 0x0
	0x01CC4094 STR W8, [X19 + 0x10]
	0x01CC4098 CBZ X20, 0x1CC40E8
	0x01CC409C LDRB W8, [X20 + 0x84]
	0x01CC40A0 CBNZ W8, 0x1CC40C4
	0x01CC40A4 LDR W8, [X20 + 0x80]
	0x01CC40A8 CMP W8, 0x64

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+48], X30
	003 NotImplemented "Instruction LDUR not yet implemented."
	004 Move V5, [X1]
	005 Move V4, [X1+16]
	006 Add X1, X31, 0
	007 Move W2, W31
	008 Move [X31+28], V3
	009 Move [X31], V5
	010 Move [X31+8], V4
	011 Call PlayerController.OnHandColliding, X0, X1, X2, X3
	012 Move X30, [X31+48]
	013 Add X31, X31, 64
	014 Return 

Method: System.Void OnHandCollidingRight(UnityEngine.RaycastHit hit, UnityEngine.Vector3 moveDelta)

Disassembly:
	0x01CC4124 MOV X0, X19
	0x01CC4128 BL 0x1B6E8E8
	0x01CC412C LDR X0, [X0 + 0x18]
	0x01CC4130 RET
	0x01CC4134 RET
	0x01CC4138 SUB X31, X31, 0x60
	0x01CC413C STR D10, [X31 + 0x20]
	0x01CC4140 STP D9, D8, [X31 + 0x28]
	0x01CC4144 STR X30, [X31 + 0x38]
	0x01CC4148 STP X22, X21, [X31 + 0x40]
	0x01CC414C STP X20, X19, [X31 + 0x50]
	0x01CC4150 ADRP X20, 0x255F000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+48], X30
	003 NotImplemented "Instruction LDUR not yet implemented."
	004 Move V5, [X1]
	005 Move V4, [X1+16]
	006 Add X1, X31, 0
	007 Move W2, 1
	008 Move [X31+28], V3
	009 Move [X31], V5
	010 Move [X31+8], V4
	011 Call PlayerController.OnHandColliding, X0, X1, X2, X3
	012 Move X30, [X31+48]
	013 Add X31, X31, 64
	014 Return 

Method: System.Void OnHandColliding(UnityEngine.RaycastHit hit, UnityEngine.Vector3 moveDelta, AnimalCompany.HandSide handSide)

Disassembly:
	0x01CC40AC B.GE 0x1CC40C4
	0x01CC40B0 LDR X8, [X20 + 0x88]
	0x01CC40B4 MOVZ W0, 0x1
	0x01CC40B8 STR W0, [X19 + 0x10]
	0x01CC40BC STR X8, [X19 + 0x18]
	0x01CC40C0 B 0x1CC40DC
	0x01CC40C4 MOV W0, W31
	0x01CC40C8 MOVZ W8, 0x64
	0x01CC40CC STR W8, [X20 + 0x80]
	0x01CC40D0 STR X31, [X20 + 0x90]
	0x01CC40D4 B 0x1CC40DC
	0x01CC40D8 MOV W0, W31
	0x01CC40DC LDP X20, X19, [X31 + 0x10]
	0x01CC40E0 LDR X30, [X31], #0x20
	0x01CC40E4 RET
	0x01CC40E8 BL 0x1B6EA1C
	0x01CC40EC LDR X0, [X0 + 0x18]
	0x01CC40F0 RET
	0x01CC40F4 STP X30, X19, [X31 - 0x10]!
	0x01CC40F8 ADRP X0, 0x2289000
	0x01CC40FC LDR X0, [X0 + 0x990]
	0x01CC4100 BL 0x1B6E804
	0x01CC4104 BL 0x1B6EA0C
	0x01CC4108 MOV X1, X31
	0x01CC410C MOV X19, X0
	0x01CC4110 BL 0x31E99B4
	0x01CC4114 ADRP X0, 0x228B000
	0x01CC4118 LDR X0, [X0 + 0x400]
	0x01CC411C BL 0x1B6E804
	0x01CC4120 MOV X1, X0

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, X1
	010 Move X21, X0
	011 Move X0, X1
	012 Move X1, X31
	013 Move W19, W2
	014 Move V8, V2
	015 Move V9, V1
	016 Move V10, V0
	017 Call RaycastHit.get_collider, X0
	018 Move X22, X0
	019 Move X0, X20
	020 Move X1, X31
	021 Call RaycastHit.get_point, X0
	022 Move X0, X21
	023 Move X1, X22
	024 Move V4, V9
	025 Move V5, V8
	026 Move W2, W19
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X22, [X31+32]
	030 Move X21, [X31+40]
	031 Move X30, [X31+24]
	032 Move D9, [X31+8]
	033 Move D8, [X31+16]
	034 Move V3, V10
	035 Move V10, [X31+64]
	036 Call PlayerController.HandleHandCollision, X0, X1, X2, X3, X4
	037 Return 

Method: System.Void OnItemCollision(UnityEngine.Collision collision, UnityEngine.Vector3 velocity, AnimalCompany.HandSide handSide)

Disassembly:
	0x01CC4528 LDR X3, [X22]
	0x01CC452C LDR X1, [X8]
	0x01CC4530 MOV X0, X21
	0x01CC4534 BL 0x28FA2A8
	0x01CC4538 ADRP X8, 0x2289000
	0x01CC453C LDR X8, [X8 + 0x9A0]
	0x01CC4540 LDR X0, [X8]
	0x01CC4544 LDR W8, [X0 + 0xE0]
	0x01CC4548 CBNZ W8, 0x1CC4550
	0x01CC454C BL 0x1B6E8F8
	0x01CC4550 ADRP X8, 0x228B000
	0x01CC4554 LDR X8, [X8 + 0x418]
	0x01CC4558 LDR X0, [X8]
	0x01CC455C MOV X1, X21
	0x01CC4560 BL 0x1CC4B70
	0x01CC4564 LDR X0, [X20 + 0x38]
	0x01CC4568 CBZ X0, 0x1CC47D4
	0x01CC456C LDP S1, S2, [X19 + 0x34]
	0x01CC4570 LDR V0, [X19 + 0x30]
	0x01CC4574 MOVZ W1, 0x1
	0x01CC4578 BL 0x1CC4C0C
	0x01CC457C ADRP X8, 0x228B000
	0x01CC4580 LDR X8, [X8 + 0x318]
	0x01CC4584 LDR X8, [X8]
	0x01CC4588 LDR X8, [X8 + 0xB8]
	0x01CC458C LDRB W8, [X8]
	0x01CC4590 CBZ W8, 0x1CC46B0
	0x01CC4594 ADRP X8, 0x228B000
	0x01CC4598 LDR X8, [X8 + 0x408]
	0x01CC459C LDR X0, [X8]
	0x01CC45A0 LDR W8, [X0 + 0xE0]
	0x01CC45A4 CBNZ W8, 0x1CC45AC
	0x01CC45A8 BL 0x1B6E8F8
	0x01CC45AC MOVZ W0, 0x1
	0x01CC45B0 MOV X1, X31
	0x01CC45B4 MOVZ W21, 0x1
	0x01CC45B8 BL 0x1CF162C
	0x01CC45BC ADRP X8, 0x228A000
	0x01CC45C0 LDR X8, [X8 + 0x2E8]
	0x01CC45C4 LDR X0, [X8]
	0x01CC45C8 BL 0x1B6EA0C
	0x01CC45CC FMOV S0, 4
	0x01CC45D0 MOV X1, X31
	0x01CC45D4 MOV X20, X0
	0x01CC45D8 BL 0x3AA273C

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, X0
	011 Move X0, X31
	012 Move W19, W2
	013 Move V10, V2
	014 Move V9, V1
	015 Move V8, V0
	016 Move X22, X1
	017 Call Time.get_deltaTime
	018 Compare X22, 0
	019 JumpIfEqual {56}
	020 Move X0, X22
	021 Move X1, X31
	022 Move V11, V0
	023 Call Collision.get_collider, X0
	024 Move X21, X0
	025 Move X0, X22
	026 Move X1, X31
	027 Call Collision.get_contacts, X0
	028 Compare X0, 0
	029 JumpIfEqual {56}
	030 Move W8, [X0+24]
	031 Compare W8, 0
	032 JumpIfEqual {57}
	033 Add X0, X0, 32
	034 Move X1, X31
	035 Multiply S10, S10, S11
	036 Multiply S9, S9, S11
	037 Multiply S8, S8, S11
	038 Call ContactPoint.get_point, X0
	039 Move X0, X20
	040 Move X1, X21
	041 Move V3, V8
	042 Move V4, V9
	043 Move W2, W19
	044 Move X20, [X31+64]
	045 Move X19, [X31+72]
	046 Move X22, [X31+48]
	047 Move X21, [X31+56]
	048 Move X30, [X31+32]
	049 Move D9, [X31+16]
	050 Move D8, [X31+24]
	051 Move V5, V10
	052 Move D11, [X31+80]
	053 Move D10, [X31+88]
	054 Call PlayerController.HandleHandCollision, X0, X1, X2, X3, X4
	055 Return 
	056 Call 0x1B6FA1C
	057 Call 0x1B6FA24

Method: System.Void HandleHandCollision(UnityEngine.Collider collider, UnityEngine.Vector3 point, UnityEngine.Vector3 moveDelta, AnimalCompany.HandSide handSide)

Disassembly:
	0x01CC4154 LDRB W8, [X20 + 0x555]
	0x01CC4158 MOV X19, X0
	0x01CC415C TBNZ X8, 0x0, 0x1CC4210
	0x01CC4160 ADRP X0, 0x2289000
	0x01CC4164 LDR X0, [X0 + 0x9A0]
	0x01CC4168 BL 0x1B6E7F0
	0x01CC416C ADRP X0, 0x2289000
	0x01CC4170 LDR X0, [X0 + 0x5B0]
	0x01CC4174 BL 0x1B6E7F0
	0x01CC4178 ADRP X0, 0x2289000
	0x01CC417C LDR X0, [X0 + 0x5B8]
	0x01CC4180 BL 0x1B6E7F0
	0x01CC4184 ADRP X0, 0x2289000
	0x01CC4188 LDR X0, [X0 + 0x5C0]
	0x01CC418C BL 0x1B6E7F0
	0x01CC4190 ADRP X0, 0x228A000
	0x01CC4194 LDR X0, [X0 + 0x198]
	0x01CC4198 BL 0x1B6E7F0
	0x01CC419C ADRP X0, 0x228B000
	0x01CC41A0 LDR X0, [X0 + 0x318]
	0x01CC41A4 BL 0x1B6E7F0
	0x01CC41A8 ADRP X0, 0x228B000
	0x01CC41AC LDR X0, [X0 + 0x370]
	0x01CC41B0 BL 0x1B6E7F0
	0x01CC41B4 ADRP X0, 0x228B000
	0x01CC41B8 LDR X0, [X0 + 0x408]
	0x01CC41BC BL 0x1B6E7F0
	0x01CC41C0 ADRP X0, 0x228A000
	0x01CC41C4 LDR X0, [X0 + 0xA38]
	0x01CC41C8 BL 0x1B6E7F0
	0x01CC41CC ADRP X0, 0x2289000
	0x01CC41D0 LDR X0, [X0 + 0x480]
	0x01CC41D4 BL 0x1B6E7F0
	0x01CC41D8 ADRP X0, 0x228A000
	0x01CC41DC LDR X0, [X0 + 0x2E8]
	0x01CC41E0 BL 0x1B6E7F0
	0x01CC41E4 ADRP X0, 0x228A000
	0x01CC41E8 LDR X0, [X0 + 0xA50]
	0x01CC41EC BL 0x1B6E7F0
	0x01CC41F0 ADRP X0, 0x228B000
	0x01CC41F4 LDR X0, [X0 + 0x410]
	0x01CC41F8 BL 0x1B6E7F0
	0x01CC41FC ADRP X0, 0x228B000
	0x01CC4200 LDR X0, [X0 + 0x418]
	0x01CC4204 BL 0x1B6E7F0
	0x01CC4208 MOVZ W8, 0x1
	0x01CC420C STRB W8, [X20 + 0x555]
	0x01CC4210 STP X31, X31, [X31 + 0x10]
	0x01CC4214 LDR W8, [X19 + 0x10]
	0x01CC4218 CMP W8, 0x4
	0x01CC421C B.HI 0x1CC46A8
	0x01CC4220 LDR X20, [X19 + 0x20]
	0x01CC4224 ADRP X9, 0xFFFFFFFFFEE28000
	0x01CC4228 ADD X9, X9, 0x918
	0x01CC422C ADR X10, 0x10
	0x01CC4230 LDRB W11, [X9, X8, LSL]
	0x01CC4234 ADD X10, X10, X11, 0x2, LSL
	0x01CC4238 BR X10
	0x01CC423C MOVN W8, 0x0
	0x01CC4240 STR W8, [X19 + 0x10]
	0x01CC4244 CBZ X20, 0x1CC47C4
	0x01CC4248 MOVZ W21, 0x1
	0x01CC424C STRB W21, [X20 + 0x84]
	0x01CC4250 STR X31, [X19 + 0x18]
	0x01CC4254 STR W21, [X19 + 0x10]
	0x01CC4258 B 0x1CC479C
	0x01CC425C MOVN W8, 0x0
	0x01CC4260 STR W8, [X19 + 0x10]
	0x01CC4264 B 0x1CC4294
	0x01CC4268 MOVN W8, 0x0
	0x01CC426C STR W8, [X19 + 0x10]
	0x01CC4270 ADRP X8, 0x228B000
	0x01CC4274 LDR X8, [X8 + 0x408]
	0x01CC4278 LDR X0, [X8]
	0x01CC427C LDR W8, [X0 + 0xE0]
	0x01CC4280 CBNZ W8, 0x1CC4288
	0x01CC4284 BL 0x1B6E8F8
	0x01CC4288 MOV W0, W31
	0x01CC428C MOV X1, X31
	0x01CC4290 BL 0x1CF162C
	0x01CC4294 CBZ X20, 0x1CC47BC
	0x01CC4298 MOVZ W1, 0x64
	0x01CC429C MOV X0, X20
	0x01CC42A0 BL 0x1CC05A4
	0x01CC42A4 STRB W31, [X20 + 0x84]
	0x01CC42A8 ADRP X19, 0x228A000
	0x01CC42AC LDR X19, [X19 + 0x198]
	0x01CC42B0 LDR X0, [X19]
	0x01CC42B4 LDR W8, [X0 + 0xE0]
	0x01CC42B8 CBNZ W8, 0x1CC42C4
	0x01CC42BC BL 0x1B6E8F8
	0x01CC42C0 LDR X0, [X19]
	0x01CC42C4 LDR X8, [X0 + 0xB8]
	0x01CC42C8 LDR X8, [X8 + 0x20]
	0x01CC42CC CBZ X8, 0x1CC42E4
	0x01CC42D0 LDR X0, [X8 + 0x40]
	0x01CC42D4 LDR X9, [X8 + 0x18]
	0x01CC42D8 LDR X2, [X8 + 0x28]
	0x01CC42DC MOV W1, W31
	0x01CC42E0 BLR X9
	0x01CC42E4 LDR X0, [X20 + 0x38]
	0x01CC42E8 CBZ X0, 0x1CC47C0
	0x01CC42EC FMOV S0, W31
	0x01CC42F0 FMOV S1, W31
	0x01CC42F4 FMOV S2, W31
	0x01CC42F8 MOV W1, W31
	0x01CC42FC BL 0x1CC4C0C
	0x01CC4300 ADRP X19, 0x228B000
	0x01CC4304 LDR X19, [X19 + 0x318]
	0x01CC4308 LDR X8, [X19]
	0x01CC430C LDR X8, [X8 + 0xB8]
	0x01CC4310 LDRB W8, [X8]
	0x01CC4314 CBZ W8, 0x1CC45EC
	0x01CC4318 ADRP X8, 0x228A000
	0x01CC431C LDR X8, [X8 + 0xA38]
	0x01CC4320 LDR X0, [X8]
	0x01CC4324 LDR W8, [X0 + 0xE0]
	0x01CC4328 CBNZ W8, 0x1CC4330
	0x01CC432C BL 0x1B6E8F8
	0x01CC4330 ADD X1, X31, 0x18
	0x01CC4334 MOV W0, W31
	0x01CC4338 MOV X2, X31
	0x01CC433C BL 0x1CAFFBC
	0x01CC4340 LDR X8, [X19]
	0x01CC4344 LDR X8, [X8 + 0xB8]
	0x01CC4348 LDR X19, [X8 + 0x8]
	0x01CC434C TBZ X0, 0x0, 0x1CC4658
	0x01CC4350 LDR X0, [X31 + 0x18]
	0x01CC4354 CBZ X0, 0x1CC47E0
	0x01CC4358 MOV X1, X31
	0x01CC435C BL 0x3AA7658
	0x01CC4360 LDR X0, [X31 + 0x18]
	0x01CC4364 CBZ X0, 0x1CC47E8
	0x01CC4368 MOV V8.16B, V0.16B
	0x01CC436C MOV V9.16B, V1.16B
	0x01CC4370 MOV V10.16B, V2.16B
	0x01CC4374 MOV X1, X31
	0x01CC4378 BL 0x3AA5FBC
	0x01CC437C CBZ X19, 0x1CC47EC
	0x01CC4380 MOV V4.16B, V0.16B
	0x01CC4384 MOV V5.16B, V1.16B
	0x01CC4388 MOV V6.16B, V2.16B
	0x01CC438C MOV V7.16B, V3.16B
	0x01CC4390 MOV X0, X19
	0x01CC4394 MOV V0.16B, V8.16B
	0x01CC4398 MOV V1.16B, V9.16B
	0x01CC439C MOV V2.16B, V10.16B
	0x01CC43A0 MOV V3.16B, V4.16B
	0x01CC43A4 MOV V4.16B, V5.16B
	0x01CC43A8 MOV V5.16B, V6.16B
	0x01CC43AC MOV V6.16B, V7.16B
	0x01CC43B0 MOV X1, X31
	0x01CC43B4 BL 0x3AA80CC
	0x01CC43B8 B 0x1CC46A8
	0x01CC43BC MOVN W8, 0x0
	0x01CC43C0 STR W8, [X19 + 0x10]
	0x01CC43C4 ADRP X8, 0x228B000
	0x01CC43C8 LDR X8, [X8 + 0x408]
	0x01CC43CC LDR X0, [X8]
	0x01CC43D0 LDR W8, [X0 + 0xE0]
	0x01CC43D4 CBNZ W8, 0x1CC43DC
	0x01CC43D8 BL 0x1B6E8F8
	0x01CC43DC MOV W0, W31
	0x01CC43E0 MOV X1, X31
	0x01CC43E4 BL 0x1CF162C
	0x01CC43E8 ADRP X8, 0x228B000
	0x01CC43EC LDR X8, [X8 + 0x370]
	0x01CC43F0 LDR X0, [X8]
	0x01CC43F4 LDR W8, [X0 + 0xE0]
	0x01CC43F8 CBNZ W8, 0x1CC4400
	0x01CC43FC BL 0x1B6E8F8
	0x01CC4400 FMOV S0, 1
	0x01CC4404 FMOV S1, 0.5
	0x01CC4408 FMOV S2, 1
	0x01CC440C MOVZ W3, 0x1
	0x01CC4410 MOV X0, X31
	0x01CC4414 MOV X1, X31
	0x01CC4418 MOV X2, X31
	0x01CC441C MOV X4, X31
	0x01CC4420 BL 0x1CF0390
	0x01CC4424 ADRP X8, 0x228A000
	0x01CC4428 LDR X8, [X8 + 0x2E8]
	0x01CC442C LDR X0, [X8]
	0x01CC4430 BL 0x1B6EA0C
	0x01CC4434 ADRP X8, 0xFFFFFFFFFEDE5000
	0x01CC4438 LDR V0, [X8 + 0xA24]
	0x01CC443C MOV X1, X31
	0x01CC4440 MOV X20, X0
	0x01CC4444 BL 0x3AA273C
	0x01CC4448 STR X20, [X19 + 0x18]
	0x01CC444C MOVZ W8, 0x4
	0x01CC4450 B 0x1CC4774
	0x01CC4454 MOVN W8, 0x0
	0x01CC4458 STR W8, [X19 + 0x10]
	0x01CC445C ADRP X21, 0x228A000
	0x01CC4460 LDR X21, [X21 + 0x198]
	0x01CC4464 LDR X0, [X21]
	0x01CC4468 LDR W8, [X0 + 0xE0]
	0x01CC446C CBNZ W8, 0x1CC4478
	0x01CC4470 BL 0x1B6E8F8
	0x01CC4474 LDR X0, [X21]
	0x01CC4478 LDR X8, [X0 + 0xB8]
	0x01CC447C LDR X8, [X8 + 0x20]
	0x01CC4480 CBZ X8, 0x1CC4498
	0x01CC4484 LDR X0, [X8 + 0x40]
	0x01CC4488 LDR X9, [X8 + 0x18]
	0x01CC448C LDR X2, [X8 + 0x28]
	0x01CC4490 MOVZ W1, 0x1
	0x01CC4494 BLR X9
	0x01CC4498 ADRP X8, 0x2289000
	0x01CC449C LDR X8, [X8 + 0x5C0]
	0x01CC44A0 LDR X0, [X8]
	0x01CC44A4 BL 0x1B6EA0C
	0x01CC44A8 ADRP X8, 0x2289000
	0x01CC44AC LDR X8, [X8 + 0x5B8]
	0x01CC44B0 MOV X21, X0
	0x01CC44B4 LDR X1, [X8]
	0x01CC44B8 BL 0x28F9A14
	0x01CC44BC CBZ X20, 0x1CC47C8
	0x01CC44C0 MOV X0, X20
	0x01CC44C4 MOV X1, X31
	0x01CC44C8 BL 0x3A9B084
	0x01CC44CC CBZ X0, 0x1CC47CC
	0x01CC44D0 MOV X1, X31
	0x01CC44D4 BL 0x3AA7658
	0x01CC44D8 ADRP X8, 0x2289000
	0x01CC44DC LDR X8, [X8 + 0x480]
	0x01CC44E0 STP S0, S1, [X31]
	0x01CC44E4 STR S2, [X31 + 0x8]
	0x01CC44E8 LDR X0, [X8]
	0x01CC44EC ADD X1, X31, 0x0
	0x01CC44F0 BL 0x1B6E900
	0x01CC44F4 CBZ X21, 0x1CC47D0
	0x01CC44F8 ADRP X8, 0x228A000
	0x01CC44FC LDR X8, [X8 + 0xA50]
	0x01CC4500 ADRP X22, 0x2289000
	0x01CC4504 LDR X22, [X22 + 0x5B0]
	0x01CC4508 MOV X2, X0
	0x01CC450C LDR X1, [X8]
	0x01CC4510 LDR X3, [X22]
	0x01CC4514 MOV X0, X21
	0x01CC4518 BL 0x28FA2A8
	0x01CC451C ADRP X8, 0x228B000
	0x01CC4520 LDR X2, [X19 + 0x28]
	0x01CC4524 LDR X8, [X8 + 0x410]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X24
	012 Move [X31+104], X23
	013 Move [X31+112], X22
	014 Move [X31+120], X21
	015 Move [X31+128], X20
	016 Move [X31+136], X19
	017 Move X21, 0x2560000
	018 Move X24, 0x228A000
	019 Move W8, [X21+1360]
	020 Move X24, [X24+1144]
	021 Move W19, W2
	022 Move V12, V5
	023 Move V13, V4
	024 Move V14, V3
	025 Move V8, V2
	026 Move V9, V1
	027 Move V10, V0
	028 Move X22, X1
	029 Move X20, X0
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {48}
	034 Move X0, 0x228C000
	035 Move X0, [X0+960]
	036 Call 0x1B6F7F0
	037 Move X0, 0x228A000
	038 Move X0, [X0+1144]
	039 Call 0x1B6F7F0
	040 Move X0, 0x228B000
	041 Move X0, [X0+408]
	042 Call 0x1B6F7F0
	043 Move X0, 0x228C000
	044 Move X0, [X0+968]
	045 Call 0x1B6F7F0
	046 Move W8, 1
	047 Move [X21+1360], W8
	048 Move X0, [X24]
	049 Move [X31+88], X31
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1B6F8F8
	054 Move X0, X22
	055 Move X1, X31
	056 Move X2, X31
	057 Call Object.op_Equality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {279}
	062 Move [X31+12], S10
	063 Move X23, 0x228B000
	064 Move X23, [X23+408]
	065 Move V10, V9
	066 Move X0, [X23]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfEqual {71}
	070 Move V9, V8
	071 Move V9, V8
	072 Call 0x1B6F8F8
	073 Move X0, [X23]
	074 Move X8, [X0+184]
	075 Move X21, 0x2560000
	076 Move W9, [X21+1088]
	077 Move S15, [X8+80]
	078 Move S8, [X8+84]
	079 Compare W9, 0
	080 JumpIfNotEqual {86}
	081 Move X0, 0x228A000
	082 Move X0, [X0+1160]
	083 Call 0x1B6F7F0
	084 Move W8, 1
	085 Move [X21+1088], W8
	086 Move X8, 0x228A000
	087 Move X8, [X8+1160]
	088 Move X0, [X8]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {93}
	092 Call 0x1B6F8F8
	093 Move S0, W31
	094 NotImplemented "Instruction FCMP not yet implemented."
	095 Move S11, W31
	096 Multiply S1, S14, S14
	097 Multiply S2, S13, S13
	098 Multiply S3, S12, S12
	099 Add S1, S1, S2
	100 Add S1, S3, S1
	101 NotImplemented "Instruction FSQRT not yet implemented."
	102 Subtract S1, S1, S15
	103 Subtract S2, S8, S15
	104 NotImplemented "Instruction FDIV not yet implemented."
	105 NotImplemented "Instruction FCMP not yet implemented."
	106 Move S11, W31
	107 Move S2, 1
	108 NotImplemented "Instruction FMIN not yet implemented."
	109 Move X8, [X23]
	110 NotImplemented "Instruction FMAX not yet implemented."
	111 Move W0, W19
	112 Move X8, [X8+184]
	113 Move S1, [X8+88]
	114 Move S2, [X8+92]
	115 Move X8, -18980864
	116 Subtract S2, S2, S1
	117 Multiply S0, S0, S2
	118 Add S0, S1, S0
	119 Move V1, [X8+2736]
	120 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	121 Compare X22, 0
	122 JumpIfEqual {296}
	123 Move X8, 0x228C000
	124 Move X21, [X20+64]
	125 Move X8, [X8+960]
	126 Add X1, X31, 88
	127 Move X0, X22
	128 Move X2, [X8]
	129 Call 0x2091EE4, X0, X1
	130 Move V8, V9
	131 Move TEMP, X0
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfNotEqual {181}
	135 Move X8, [X31+88]
	136 Compare X8, 0
	137 JumpIfEqual {296}
	138 Move X0, [X24]
	139 Move V9, V10
	140 Move X22, [X8+32]
	141 Move V10, [X31+12]
	142 Move W9, [X0+224]
	143 Compare W9, 0
	144 JumpIfNotEqual {146}
	145 Call 0x1B6F8F8
	146 Move X0, X22
	147 Move X1, X31
	148 Move X2, X31
	149 Call Object.op_Inequality, X0, X1
	150 Move TEMP, X0
	151 And TEMP, TEMP, 1
	152 Compare TEMP, 1
	153 JumpIfNotEqual {255}
	154 Move X8, [X31+88]
	155 Compare X8, 0
	156 JumpIfEqual {296}
	157 Move X8, [X8+32]
	158 Compare X8, 0
	159 JumpIfEqual {296}
	160 Move X0, [X24]
	161 Move X22, [X8+32]
	162 Move W9, [X0+224]
	163 Compare W9, 0
	164 JumpIfNotEqual {166}
	165 Call 0x1B6F8F8
	166 Move X0, X22
	167 Move X1, X31
	168 Move X2, X31
	169 Call Object.op_Inequality, X0, X1
	170 Move X8, [X31+88]
	171 Move TEMP, X0
	172 And TEMP, TEMP, 1
	173 Compare TEMP, 1
	174 JumpIfNotEqual {183}
	175 Compare X8, 0
	176 JumpIfEqual {296}
	177 Move X9, [X8+32]
	178 Compare X9, 0
	179 JumpIfEqual {296}
	180 Move X21, [X9+32]
	181 Move V9, V10
	182 Move V10, [X31+12]
	183 Compare X8, 0
	184 JumpIfEqual {296}
	185 Move X9, [X8+32]
	186 Compare X9, 0
	187 JumpIfEqual {296}
	188 Move W22, [X9+40]
	189 Move X24, 0x2560000
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Move W9, [X24+1108]
	192 Compare W9, 0
	193 JumpIfNotEqual {202}
	194 Move X0, 0x228B000
	195 Move X0, [X0+504]
	196 Call 0x1B6F7F0
	197 Move X8, [X31+88]
	198 Move W9, 1
	199 Move [X24+1108], W9
	200 Compare X8, 0
	201 JumpIfEqual {296}
	202 Move X0, [X8+32]
	203 Compare X0, 0
	204 JumpIfEqual {296}
	205 Move X1, X31
	206 Call Object.get_name, X0
	207 Move X8, 0x228C000
	208 Move X8, [X8+968]
	209 Move X1, X0
	210 Move X2, X31
	211 Move X8, [X8]
	212 Move X0, X8
	213 Call String.Concat, X0, X1
	214 Move X4, X0
	215 Move X0, X20
	216 Move W1, W22
	217 Move V0, V10
	218 Move V1, V9
	219 Move V2, V8
	220 Move X2, X31
	221 Move X3, X31
	222 Call PlayerController.PlayerHitInternal, X0, X1, X2, X3, X4, X5, X6
	223 Move X8, [X31+88]
	224 Compare X8, 0
	225 JumpIfEqual {296}
	226 Move X8, [X8+32]
	227 Compare X8, 0
	228 JumpIfEqual {296}
	229 Move W9, [X8+44]
	230 Compare W9, 0
	231 JumpIfEqual {255}
	232 Move W9, [X24+1108]
	233 Move W20, [X8+45]
	234 Compare W9, 0
	235 JumpIfNotEqual {241}
	236 Move X0, 0x228B000
	237 Move X0, [X0+504]
	238 Call 0x1B6F7F0
	239 Move W8, 1
	240 Move [X24+1108], W8
	241 Move X8, 0x228B000
	242 Move X8, [X8+504]
	243 Move W0, W20
	244 Move V0, V10
	245 Move V1, V9
	246 Move X8, [X8]
	247 Move V2, V8
	248 Move X1, X31
	249 Move X8, [X8+184]
	250 Move S3, [X8]
	251 Move S4, [X8+4]
	252 Move S5, [X8+8]
	253 Move S6, [X8+12]
	254 Call NetworkVFX.PlayVFX, X0, X1, X2
	255 Compare X21, 0
	256 JumpIfEqual {296}
	257 Move X0, X21
	258 Move V0, V10
	259 Move V1, V9
	260 Move V2, V8
	261 Move V3, V11
	262 Call SFXManager.PlaySFXAsRPC, X0, X1, V0
	263 Move X0, [X23]
	264 Move W8, [X0+224]
	265 Compare W8, 0
	266 JumpIfNotEqual {269}
	267 Call 0x1B6F8F8
	268 Move X0, [X23]
	269 Move X8, [X0+184]
	270 Move X8, [X8+24]
	271 Compare X8, 0
	272 JumpIfEqual {279}
	273 Move X9, [X8+24]
	274 Move X0, [X8+64]
	275 Move X2, [X8+40]
	276 Move W1, W19
	277 Move V0, V11
	278 NotImplemented "Instruction BLR not yet implemented."
	279 Move X20, [X31+128]
	280 Move X19, [X31+136]
	281 Move X22, [X31+112]
	282 Move X21, [X31+120]
	283 Move X24, [X31+96]
	284 Move X23, [X31+104]
	285 Move X30, [X31+80]
	286 Move D9, [X31+64]
	287 Move D8, [X31+72]
	288 Move D11, [X31+48]
	289 Move D10, [X31+56]
	290 Move D13, [X31+32]
	291 Move D12, [X31+40]
	292 Move D15, [X31+16]
	293 Move D14, [X31+24]
	294 Add X31, X31, 144
	295 Return 
	296 Call 0x1B6FA1C

Method: System.Void UpdateSnapTurn()

Disassembly:
	0x01CC26CC LDR X0, [X0 + 0x388]
	0x01CC26D0 BL 0x1B6E7F0
	0x01CC26D4 MOVZ W8, 0x1
	0x01CC26D8 STRB W8, [X21 + 0x559]
	0x01CC26DC LDR X0, [X20]
	0x01CC26E0 LDR X20, [X19 + 0x20]
	0x01CC26E4 LDR W8, [X0 + 0xE0]
	0x01CC26E8 CBNZ W8, 0x1CC26F0
	0x01CC26EC BL 0x1B6E8F8
	0x01CC26F0 MOV X0, X20
	0x01CC26F4 MOV X1, X31
	0x01CC26F8 MOV X2, X31
	0x01CC26FC BL 0x3AA0AF0
	0x01CC2700 TBZ X0, 0x0, 0x1CC2728
	0x01CC2704 LDP X20, X19, [X31 + 0x80]
	0x01CC2708 LDP X22, X21, [X31 + 0x70]
	0x01CC270C LDR X30, [X31 + 0x60]
	0x01CC2710 LDP D9, D8, [X31 + 0x50]
	0x01CC2714 LDP D11, D10, [X31 + 0x40]
	0x01CC2718 LDP D13, D12, [X31 + 0x30]
	0x01CC271C LDP D15, D14, [X31 + 0x20]
	0x01CC2720 ADD X31, X31, 0x90
	0x01CC2724 RET
	0x01CC2728 MOV X0, X19
	0x01CC272C MOV X1, X31
	0x01CC2730 BL 0x3A9B084
	0x01CC2734 LDR X8, [X19 + 0x20]
	0x01CC2738 CBZ X8, 0x1CC2C64
	0x01CC273C MOV X20, X0
	0x01CC2740 MOV X0, X8
	0x01CC2744 MOV X1, X31
	0x01CC2748 BL 0x3AA7658
	0x01CC274C CBZ X20, 0x1CC2C64
	0x01CC2750 MOV X0, X20
	0x01CC2754 MOV X1, X31
	0x01CC2758 BL 0x3AA76F8
	0x01CC275C LDR X0, [X19 + 0x20]
	0x01CC2760 CBZ X0, 0x1CC2C64
	0x01CC2764 MOV X1, X31
	0x01CC2768 BL 0x3AA7658
	0x01CC276C LDR X0, [X19 + 0x20]
	0x01CC2770 CBZ X0, 0x1CC2C64
	0x01CC2774 LDR X20, [X19 + 0x68]
	0x01CC2778 MOV X1, X31
	0x01CC277C MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2562000
	007 Move X20, 0x228D000
	008 Move W8, [X21+1361]
	009 Move X20, [X20+408]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x228D000
	016 Move X0, [X0+408]
	017 Call 0x1B6F7F0
	018 Move W8, 1
	019 Move [X21+1361], W8
	020 Move X0, [X20]
	021 Add X20, X19, 280
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1B6F8F8
	026 Move W0, W31
	027 Move X1, X20
	028 Call PlayerController.<UpdateSnapTurn>g__CheckToTurn|110_0, X0, X1
	029 Move S1, W31
	030 Add X1, X19, 288
	031 Move W0, 1
	032 Add S8, S0, S1
	033 Call PlayerController.<UpdateSnapTurn>g__CheckToTurn|110_0, X0, X1
	034 Add S0, S8, S0
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 Move X0, [X19+32]
	037 Compare X0, 0
	038 JumpIfEqual {56}
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+16]
	042 Move X21, [X31+24]
	043 Move W8, 0x42B40000
	044 Move S1, W8
	045 Multiply S0, S0, S1
	046 Move X1, X31
	047 Move V8, [X31+48]
	048 Call Player.Turn, X0, V0
	049 Return 
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X30, [X31+16]
	053 Move X21, [X31+24]
	054 Move V8, [X31+48]
	055 Return 
	056 Call 0x1B6FA1C

Method: System.Void OnNetworkInput(Fusion.NetworkInput input)

Disassembly:
	0x01CC4668 BL 0x3A92C2C
	0x01CC466C CBZ X19, 0x1CC47E4
	0x01CC4670 MOV V4.16B, V0.16B
	0x01CC4674 MOV V5.16B, V1.16B
	0x01CC4678 MOV V6.16B, V2.16B
	0x01CC467C MOV V7.16B, V3.16B
	0x01CC4680 MOV X0, X19
	0x01CC4684 MOV V0.16B, V8.16B
	0x01CC4688 MOV V1.16B, V9.16B
	0x01CC468C MOV V2.16B, V10.16B
	0x01CC4690 MOV V3.16B, V4.16B
	0x01CC4694 MOV V4.16B, V5.16B
	0x01CC4698 MOV V5.16B, V6.16B
	0x01CC469C MOV V6.16B, V7.16B
	0x01CC46A0 MOV X1, X31
	0x01CC46A4 BL 0x3AA80CC
	0x01CC46A8 MOV W21, W31
	0x01CC46AC B 0x1CC479C
	0x01CC46B0 CBZ X20, 0x1CC47F0
	0x01CC46B4 LDR X0, [X20 + 0x20]
	0x01CC46B8 CBZ X0, 0x1CC47F4
	0x01CC46BC MOV W1, W31
	0x01CC46C0 MOV X2, X31
	0x01CC46C4 BL 0x3A9A604
	0x01CC46C8 ADRP X22, 0x255F000
	0x01CC46CC LDRB W8, [X22 + 0x43F]
	0x01CC46D0 LDR X21, [X20 + 0x30]
	0x01CC46D4 CBNZ W8, 0x1CC46EC
	0x01CC46D8 ADRP X0, 0x2289000
	0x01CC46DC LDR X0, [X0 + 0x480]
	0x01CC46E0 BL 0x1B6E7F0
	0x01CC46E4 MOVZ W8, 0x1
	0x01CC46E8 STRB W8, [X22 + 0x43F]
	0x01CC46EC CBZ X21, 0x1CC47F8
	0x01CC46F0 ADRP X8, 0x2289000
	0x01CC46F4 LDR X8, [X8 + 0x480]
	0x01CC46F8 LDR X8, [X8]
	0x01CC46FC LDR X8, [X8 + 0xB8]
	0x01CC4700 LDP S1, S2, [X8 + 0x4]
	0x01CC4704 LDR V0, [X8]
	0x01CC4708 MOV X0, X21
	0x01CC470C MOV X1, X31
	0x01CC4710 BL 0x3AF650C
	0x01CC4714 LDR X0, [X20 + 0x30]
	0x01CC4718 CBZ X0, 0x1CC47FC
	0x01CC471C MOV W1, W31
	0x01CC4720 MOV X2, X31
	0x01CC4724 BL 0x3AF68B0
	0x01CC4728 ADRP X8, 0x228B000
	0x01CC472C LDR X8, [X8 + 0x408]
	0x01CC4730 LDR X0, [X8]
	0x01CC4734 LDR W8, [X0 + 0xE0]
	0x01CC4738 CBNZ W8, 0x1CC4740
	0x01CC473C BL 0x1B6E8F8
	0x01CC4740 MOVZ W0, 0x1
	0x01CC4744 MOV X1, X31
	0x01CC4748 BL 0x1CF162C
	0x01CC474C ADRP X8, 0x228A000
	0x01CC4750 LDR X8, [X8 + 0x2E8]
	0x01CC4754 LDR X0, [X8]
	0x01CC4758 BL 0x1B6EA0C
	0x01CC475C FMOV S0, 8
	0x01CC4760 MOV X1, X31
	0x01CC4764 MOV X20, X0
	0x01CC4768 BL 0x3AA273C
	0x01CC476C MOVZ W8, 0x3
	0x01CC4770 STR X20, [X19 + 0x18]
	0x01CC4774 STR W8, [X19 + 0x10]
	0x01CC4778 MOVZ W21, 0x1
	0x01CC477C B 0x1CC479C
	0x01CC4780 LDP S0, S1, [X20 + 0xEC]
	0x01CC4784 LDP S2, S3, [X20 + 0xF4]
	0x01CC4788 LDP S4, S5, [X20 + 0xFC]
	0x01CC478C MOV X0, X20
	0x01CC4790 MOV W1, W31
	0x01CC4794 BL 0x1CC243C
	0x01CC4798 MOV W21, W31
	0x01CC479C MOV W0, W21
	0x01CC47A0 LDP X20, X19, [X31 + 0x50]
	0x01CC47A4 LDP X22, X21, [X31 + 0x40]
	0x01CC47A8 LDR X30, [X31 + 0x38]
	0x01CC47AC LDP D9, D8, [X31 + 0x28]
	0x01CC47B0 LDR V10, [X31 + 0x20]
	0x01CC47B4 ADD X31, X31, 0x60
	0x01CC47B8 RET
	0x01CC47BC BL 0x1B6EA1C
	0x01CC47C0 BL 0x1B6EA1C
	0x01CC47C4 BL 0x1B6EA1C
	0x01CC47C8 BL 0x1B6EA1C
	0x01CC47CC BL 0x1B6EA1C
	0x01CC47D0 BL 0x1B6EA1C
	0x01CC47D4 BL 0x1B6EA1C
	0x01CC47D8 BL 0x1B6EA1C
	0x01CC47DC BL 0x1B6EA1C
	0x01CC47E0 BL 0x1B6EA1C
	0x01CC47E4 BL 0x1B6EA1C
	0x01CC47E8 BL 0x1B6EA1C
	0x01CC47EC BL 0x1B6EA1C
	0x01CC47F0 BL 0x1B6EA1C
	0x01CC47F4 BL 0x1B6EA1C
	0x01CC47F8 BL 0x1B6EA1C
	0x01CC47FC BL 0x1B6EA1C
	0x01CC4800 B 0x1CC484C
	0x01CC4804 B 0x1CC4AAC
	0x01CC4808 B 0x1CC4AAC
	0x01CC480C B 0x1CC484C
	0x01CC4810 B 0x1CC4AAC
	0x01CC4814 B 0x1CC4AAC
	0x01CC4818 B 0x1CC4AAC
	0x01CC481C B 0x1CC4AAC
	0x01CC4820 B 0x1CC4AAC
	0x01CC4824 B 0x1CC4AAC
	0x01CC4828 B 0x1CC484C
	0x01CC482C B 0x1CC4AAC
	0x01CC4830 B 0x1CC484C
	0x01CC4834 B 0x1CC49E8
	0x01CC4838 B 0x1CC49E8
	0x01CC483C B 0x1CC49E8
	0x01CC4840 B 0x1CC4AAC
	0x01CC4844 B 0x1CC4AAC
	0x01CC4848 B 0x1CC4AAC
	0x01CC484C MOV X21, X0
	0x01CC4850 CMP W1, 0x1
	0x01CC4854 B.NE 0x1CC4B64
	0x01CC4858 MOV X0, X21
	0x01CC485C BL 0x3D19840
	0x01CC4860 MOV X20, X0
	0x01CC4864 ADRP X0, 0x2289000
	0x01CC4868 LDR X0, [X0 + 0x670]
	0x01CC486C BL 0x1B6E804
	0x01CC4870 LDR X8, [X20]
	0x01CC4874 LDR X1, [X8]
	0x01CC4878 BL 0x1B6ED6C
	0x01CC487C TBZ X0, 0x0, 0x1CC48DC
	0x01CC4880 LDR X20, [X20]
	0x01CC4884 BL 0x3D19850
	0x01CC4888 ADRP X0, 0x2289000
	0x01CC488C LDR X0, [X0 + 0x628]
	0x01CC4890 BL 0x1B6E804
	0x01CC4894 LDR W8, [X0 + 0xE0]
	0x01CC4898 CBNZ W8, 0x1CC48A0
	0x01CC489C BL 0x1B6E8F8
	0x01CC48A0 ADRP X0, 0x228B000
	0x01CC48A4 LDR X0, [X0 + 0x420]
	0x01CC48A8 BL 0x1B6E804
	0x01CC48AC MOV X21, X0
	0x01CC48B0 ADRP X0, 0x228B000
	0x01CC48B4 LDR X0, [X0 + 0x428]
	0x01CC48B8 BL 0x1B6E804
	0x01CC48BC MOV X3, X0
	0x01CC48C0 MOVZ W4, 0x19E
	0x01CC48C4 MOV X0, X20
	0x01CC48C8 MOV X1, X31
	0x01CC48CC MOV X2, X21
	0x01CC48D0 MOV X5, X31
	0x01CC48D4 BL 0x342B698
	0x01CC48D8 B 0x1CC474C
	0x01CC48DC MOVZ W0, 0x8
	0x01CC48E0 BL 0x3D19860
	0x01CC48E4 LDR X8, [X20]
	0x01CC48E8 STR X8, [X0]
	0x01CC48EC ADRP X1, 0x2058000
	0x01CC48F0 ADD X1, X1, 0xBD8
	0x01CC48F4 MOV X2, X31
	0x01CC48F8 BL 0x3D19870
	0x01CC48FC B 0x1CC4B5C
	0x01CC4900 MOV X21, X0
	0x01CC4904 BL 0x3D19850
	0x01CC4908 B 0x1CC4B64
	0x01CC490C B 0x1CC4AAC
	0x01CC4910 B 0x1CC4AAC
	0x01CC4914 B 0x1CC4AAC
	0x01CC4918 B 0x1CC49E8
	0x01CC491C B 0x1CC49E8
	0x01CC4920 B 0x1CC49E8
	0x01CC4924 B 0x1CC49E8
	0x01CC4928 CMP W1, 0x1
	0x01CC492C MOV X21, X0
	0x01CC4930 B.NE 0x1CC4B64
	0x01CC4934 MOV X0, X21
	0x01CC4938 BL 0x3D19840
	0x01CC493C MOV X20, X0
	0x01CC4940 ADRP X0, 0x2289000
	0x01CC4944 LDR X0, [X0 + 0x670]
	0x01CC4948 BL 0x1B6E804
	0x01CC494C LDR X8, [X20]
	0x01CC4950 LDR X1, [X8]
	0x01CC4954 BL 0x1B6ED6C
	0x01CC4958 TBZ X0, 0x0, 0x1CC49B8
	0x01CC495C LDR X20, [X20]
	0x01CC4960 BL 0x3D19850
	0x01CC4964 ADRP X0, 0x2289000
	0x01CC4968 LDR X0, [X0 + 0x628]
	0x01CC496C BL 0x1B6E804
	0x01CC4970 LDR W8, [X0 + 0xE0]
	0x01CC4974 CBNZ W8, 0x1CC497C
	0x01CC4978 BL 0x1B6E8F8
	0x01CC497C ADRP X0, 0x228B000
	0x01CC4980 LDR X0, [X0 + 0x420]
	0x01CC4984 BL 0x1B6E804
	0x01CC4988 MOV X21, X0
	0x01CC498C ADRP X0, 0x228B000
	0x01CC4990 LDR X0, [X0 + 0x428]
	0x01CC4994 BL 0x1B6E804
	0x01CC4998 MOV X3, X0
	0x01CC499C MOVZ W4, 0x1A9
	0x01CC49A0 MOV X0, X20
	0x01CC49A4 MOV X1, X31
	0x01CC49A8 MOV X2, X21
	0x01CC49AC MOV X5, X31
	0x01CC49B0 BL 0x342B698
	0x01CC49B4 B 0x1CC4424
	0x01CC49B8 MOVZ W0, 0x8
	0x01CC49BC BL 0x3D19860
	0x01CC49C0 LDR X8, [X20]
	0x01CC49C4 STR X8, [X0]
	0x01CC49C8 ADRP X1, 0x2058000
	0x01CC49CC ADD X1, X1, 0xBD8
	0x01CC49D0 MOV X2, X31
	0x01CC49D4 BL 0x3D19870
	0x01CC49D8 B 0x1CC4B5C
	0x01CC49DC MOV X21, X0
	0x01CC49E0 BL 0x3D19850
	0x01CC49E4 B 0x1CC4B64
	0x01CC49E8 MOV X21, X0
	0x01CC49EC CMP W1, 0x1
	0x01CC49F0 B.NE 0x1CC4B64
	0x01CC49F4 MOV X0, X21
	0x01CC49F8 BL 0x3D19840
	0x01CC49FC MOV X21, X0
	0x01CC4A00 ADRP X0, 0x2289000
	0x01CC4A04 LDR X0, [X0 + 0x670]
	0x01CC4A08 BL 0x1B6E804
	0x01CC4A0C LDR X8, [X21]
	0x01CC4A10 LDR X1, [X8]
	0x01CC4A14 BL 0x1B6ED6C
	0x01CC4A18 TBZ X0, 0x0, 0x1CC4A78
	0x01CC4A1C LDR X21, [X21]
	0x01CC4A20 BL 0x3D19850
	0x01CC4A24 ADRP X0, 0x2289000
	0x01CC4A28 LDR X0, [X0 + 0x628]
	0x01CC4A2C BL 0x1B6E804
	0x01CC4A30 LDR W8, [X0 + 0xE0]
	0x01CC4A34 CBNZ W8, 0x1CC4A3C
	0x01CC4A38 BL 0x1B6E8F8
	0x01CC4A3C ADRP X0, 0x228B000
	0x01CC4A40 LDR X0, [X0 + 0x420]
	0x01CC4A44 BL 0x1B6E804
	0x01CC4A48 MOV X22, X0
	0x01CC4A4C ADRP X0, 0x228B000
	0x01CC4A50 LDR X0, [X0 + 0x428]
	0x01CC4A54 BL 0x1B6E804
	0x01CC4A58 MOV X3, X0
	0x01CC4A5C MOVZ W4, 0x188
	0x01CC4A60 MOV X0, X21
	0x01CC4A64 MOV X1, X31
	0x01CC4A68 MOV X2, X22
	0x01CC4A6C MOV X5, X31
	0x01CC4A70 BL 0x342B698
	0x01CC4A74 B 0x1CC457C
	0x01CC4A78 MOVZ W0, 0x8
	0x01CC4A7C BL 0x3D19860
	0x01CC4A80 LDR X8, [X21]
	0x01CC4A84 STR X8, [X0]
	0x01CC4A88 ADRP X1, 0x2058000
	0x01CC4A8C ADD X1, X1, 0xBD8
	0x01CC4A90 MOV X2, X31
	0x01CC4A94 BL 0x3D19870
	0x01CC4A98 B 0x1CC4B5C
	0x01CC4A9C MOV X21, X0
	0x01CC4AA0 BL 0x3D19850
	0x01CC4AA4 B 0x1CC4B64
	0x01CC4AA8 B 0x1CC4AAC
	0x01CC4AAC MOV X21, X0
	0x01CC4AB0 CMP W1, 0x1
	0x01CC4AB4 B.NE 0x1CC4B64
	0x01CC4AB8 MOV X0, X21
	0x01CC4ABC BL 0x3D19840
	0x01CC4AC0 MOV X19, X0
	0x01CC4AC4 ADRP X0, 0x2289000
	0x01CC4AC8 LDR X0, [X0 + 0x670]
	0x01CC4ACC BL 0x1B6E804
	0x01CC4AD0 LDR X8, [X19]
	0x01CC4AD4 LDR X1, [X8]
	0x01CC4AD8 BL 0x1B6ED6C
	0x01CC4ADC TBZ X0, 0x0, 0x1CC4B3C
	0x01CC4AE0 LDR X19, [X19]
	0x01CC4AE4 BL 0x3D19850
	0x01CC4AE8 ADRP X0, 0x2289000
	0x01CC4AEC LDR X0, [X0 + 0x628]
	0x01CC4AF0 BL 0x1B6E804
	0x01CC4AF4 LDR W8, [X0 + 0xE0]
	0x01CC4AF8 CBNZ W8, 0x1CC4B00
	0x01CC4AFC BL 0x1B6E8F8
	0x01CC4B00 ADRP X0, 0x228B000
	0x01CC4B04 LDR X0, [X0 + 0x420]
	0x01CC4B08 BL 0x1B6E804
	0x01CC4B0C MOV X20, X0
	0x01CC4B10 ADRP X0, 0x228B000
	0x01CC4B14 LDR X0, [X0 + 0x428]
	0x01CC4B18 BL 0x1B6E804
	0x01CC4B1C MOV X3, X0
	0x01CC4B20 MOVZ W4, 0x1D4
	0x01CC4B24 MOV X0, X19
	0x01CC4B28 MOV X1, X31
	0x01CC4B2C MOV X2, X20
	0x01CC4B30 MOV X5, X31
	0x01CC4B34 BL 0x342B698
	0x01CC4B38 B 0x1CC46A8
	0x01CC4B3C MOVZ W0, 0x8
	0x01CC4B40 BL 0x3D19860
	0x01CC4B44 LDR X8, [X19]
	0x01CC4B48 STR X8, [X0]
	0x01CC4B4C ADRP X1, 0x2058000
	0x01CC4B50 ADD X1, X1, 0xBD8
	0x01CC4B54 MOV X2, X31
	0x01CC4B58 BL 0x3D19870
	0x01CC4B5C MOV X21, X0
	0x01CC4B60 BL 0x3D19850
	0x01CC4B64 MOV X0, X21
	0x01CC4B68 BL 0x1C8418C
	0x01CC4B6C BL 0x18F46A8
	0x01CC4B70 STR X30, [X31 - 0x30]!
	0x01CC4B74 STP X22, X21, [X31 + 0x10]
	0x01CC4B78 STP X20, X19, [X31 + 0x20]
	0x01CC4B7C ADRP X22, 0x255F000
	0x01CC4B80 ADRP X21, 0x2289000
	0x01CC4B84 LDRB W8, [X22 + 0x5BA]
	0x01CC4B88 LDR X21, [X21 + 0x9A0]
	0x01CC4B8C MOV X20, X1
	0x01CC4B90 MOV X19, X0
	0x01CC4B94 TBNZ X8, 0x0, 0x1CC4BAC
	0x01CC4B98 ADRP X0, 0x2289000
	0x01CC4B9C LDR X0, [X0 + 0x9A0]
	0x01CC4BA0 BL 0x1B6E7F0
	0x01CC4BA4 MOVZ W8, 0x1
	0x01CC4BA8 STRB W8, [X22 + 0x5BA]
	0x01CC4BAC LDR X0, [X21]
	0x01CC4BB0 LDR W8, [X0 + 0xE0]
	0x01CC4BB4 CBNZ W8, 0x1CC4BC0
	0x01CC4BB8 BL 0x1B6E8F8
	0x01CC4BBC LDR X0, [X21]
	0x01CC4BC0 LDR X8, [X0 + 0xB8]
	0x01CC4BC4 LDRB W8, [X8]
	0x01CC4BC8 CBZ W8, 0x1CC4BFC
	0x01CC4BCC LDR W8, [X0 + 0xE0]
	0x01CC4BD0 CBNZ W8, 0x1CC4BD8
	0x01CC4BD4 BL 0x1B6E8F8
	0x01CC4BD8 MOV X0, X20
	0x01CC4BDC BL 0x1CCF2BC
	0x01CC4BE0 MOV X1, X0
	0x01CC4BE4 MOV X0, X19
	0x01CC4BE8 LDP X20, X19, [X31 + 0x20]
	0x01CC4BEC LDP X22, X21, [X31 + 0x10]
	0x01CC4BF0 MOV X2, X31
	0x01CC4BF4 LDR X30, [X31], #0x30
	0x01CC4BF8 B 0x30407FC
	0x01CC4BFC LDP X20, X19, [X31 + 0x20]
	0x01CC4C00 LDP X22, X21, [X31 + 0x10]
	0x01CC4C04 LDR X30, [X31], #0x30
	0x01CC4C08 RET
	0x01CC4C0C STP D13, D12, [X31 - 0x70]!
	0x01CC4C10 STP D11, D10, [X31 + 0x10]
	0x01CC4C14 STP D9, D8, [X31 + 0x20]
	0x01CC4C18 STR X30, [X31 + 0x30]
	0x01CC4C1C STP X24, X23, [X31 + 0x40]
	0x01CC4C20 STP X22, X21, [X31 + 0x50]
	0x01CC4C24 STP X20, X19, [X31 + 0x60]
	0x01CC4C28 CBZ X0, 0x1CC4E68
	0x01CC4C2C AND W8, W1, 0x1
	0x01CC4C30 STR W8, [X0 + 0x90]
	0x01CC4C34 ADRP X22, 0x2289000
	0x01CC4C38 LDR X22, [X22 + 0x480]
	0x01CC4C3C MOV V10.16B, V2.16B
	0x01CC4C40 MOV V9.16B, V1.16B
	0x01CC4C44 MOV V8.16B, V0.16B
	0x01CC4C48 MOV W20, W1
	0x01CC4C4C MOV X19, X0
	0x01CC4C50 ADRP X23, 0x255F000
	0x01CC4C54 TBZ X1, 0x0, 0x1CC4CDC
	0x01CC4C58 LDRB W8, [X23 + 0x43F]
	0x01CC4C5C LDR X21, [X19 + 0x68]
	0x01CC4C60 CBNZ W8, 0x1CC4C78
	0x01CC4C64 ADRP X0, 0x2289000
	0x01CC4C68 LDR X0, [X0 + 0x480]
	0x01CC4C6C BL 0x1B6E7F0
	0x01CC4C70 MOVZ W8, 0x1
	0x01CC4C74 STRB W8, [X23 + 0x43F]
	0x01CC4C78 LDR X8, [X22]
	0x01CC4C7C ADRP X24, 0x255F000

ISIL:
	001 Subtract X31, X31, 480
	002 Move [X31+368], D15
	003 Move [X31+376], D14
	004 Move [X31+384], D13
	005 Move [X31+392], D12
	006 Move [X31+400], D11
	007 Move [X31+408], D10
	008 Move [X31+416], D9
	009 Move [X31+424], D8
	010 Move [X31+432], X29
	011 Move [X31+448], X30
	012 Move [X31+456], X21
	013 Move [X31+464], X20
	014 Move [X31+472], X19
	015 NotImplemented "Instruction MRS not yet implemented."
	016 Move X8, [X20+40]
	017 Move X21, 0x2560000
	018 Move X19, X0
	019 Move [X31+360], X8
	020 Move W8, [X21+1362]
	021 Move [X31+176], X1
	022 Move [X31+184], X2
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {32}
	027 Move X0, 0x228C000
	028 Move X0, [X0+976]
	029 Call 0x1B6F7F0
	030 Move W8, 1
	031 Move [X21+1362], W8
	032 Move X0, [X19+56]
	033 Compare X0, 0
	034 JumpIfEqual {494}
	035 Move W8, [X0+144]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move S28, W31
	038 Move [X31+148], S28
	039 Move S28, W31
	040 Move S0, W31
	041 Move [X31+144], S28
	042 Move S28, W31
	043 Move [X31+172], S0
	044 Move S0, W31
	045 Move [X31+140], S28
	046 Move S28, W31
	047 Move [X31+168], S0
	048 Move S0, W31
	049 Move [X31+136], S28
	050 Move S28, W31
	051 Move [X31+164], S0
	052 Move S0, W31
	053 Move [X31+156], S28
	054 Move S28, W31
	055 Move S4, W31
	056 Move S5, W31
	057 Move S6, W31
	058 Move S7, W31
	059 Move S16, W31
	060 Move S17, W31
	061 Move S18, W31
	062 Move S23, W31
	063 Move S24, W31
	064 Move S25, W31
	065 Move [X31+160], S0
	066 Move S19, W31
	067 Move S1, W31
	068 Move S0, W31
	069 Move S2, W31
	070 Move S3, W31
	071 Move S20, W31
	072 Move S21, W31
	073 Move S22, W31
	074 Move S26, W31
	075 Move S27, W31
	076 Move S15, W31
	077 Move S8, W31
	078 Move S9, W31
	079 Move S10, W31
	080 Move S11, W31
	081 Move S12, W31
	082 Move S13, W31
	083 Move [X31+152], S28
	084 Move S28, W31
	085 Move S29, W31
	086 Move S30, W31
	087 Move S31, W31
	088 Move S14, W31
	089 Compare W8, 0
	090 JumpIfNotEqual {418}
	091 Move X0, [X19+80]
	092 Compare X0, 0
	093 JumpIfEqual {494}
	094 Move X1, X31
	095 Call Transform.get_position, X0
	096 Move X0, [X19+80]
	097 Move [X31+128], S1
	098 Move [X31+136], S0
	099 Move [X31+124], S2
	100 Compare X0, 0
	101 JumpIfEqual {494}
	102 Move X1, X31
	103 Call Transform.get_forward, X0
	104 Move X21, 0x2560000
	105 Move W8, [X21+1089]
	106 Move V8, V0
	107 Move V9, V2
	108 Compare W8, 0
	109 JumpIfNotEqual {115}
	110 Move X0, 0x228A000
	111 Move X0, [X0+1160]
	112 Call 0x1B6F7F0
	113 Move W8, 1
	114 Move [X21+1089], W8
	115 Move X8, 0x228A000
	116 Move X8, [X8+1160]
	117 Move X0, [X8]
	118 Move W8, [X0+224]
	119 Compare W8, 0
	120 JumpIfNotEqual {122}
	121 Call 0x1B6F8F8
	122 Move X8, -18980864
	123 Multiply S0, S8, S8
	124 Move S1, W31
	125 Move V3, [X8+2916]
	126 Add S0, S0, S1
	127 Multiply S2, S9, S9
	128 Add S0, S2, S0
	129 NotImplemented "Instruction FSQRT not yet implemented."
	130 NotImplemented "Instruction FCMP not yet implemented."
	131 NotImplemented "Instruction FDIV not yet implemented."
	132 NotImplemented "Instruction FDIV not yet implemented."
	133 NotImplemented "Instruction FDIV not yet implemented."
	134 Call PlayerView.get_ragdollHead, X0
	135 Compare X0, 0
	136 JumpIfEqual {494}
	137 Move X1, X31
	138 Call Transform.get_position, X0
	139 Move X0, [X19+56]
	140 Move [X31+128], S1
	141 Move [X31+136], S0
	142 Move [X31+124], S2
	143 Compare X0, 0
	144 JumpIfEqual {494}
	145 Call PlayerView.get_ragdollHead, X0
	146 Compare X0, 0
	147 JumpIfEqual {494}
	148 Move X1, X31
	149 Call Transform.get_rotation, X0
	150 Move X0, [X19+56]
	151 Move [X31+116], S1
	152 Move [X31+124], S0
	153 Move [X31+108], S3
	154 Move [X31+116], S2
	155 Compare X0, 0
	156 JumpIfEqual {494}
	157 Call PlayerView.get_ragdollHead, X0
	158 Compare X0, 0
	159 JumpIfEqual {494}
	160 Move X1, X31
	161 Call Transform.get_position, X0
	162 Move X0, [X19+56]
	163 Move [X31+100], S1
	164 Move [X31+108], S0
	165 Move [X31+96], S2
	166 Compare X0, 0
	167 JumpIfEqual {494}
	168 Call PlayerView.get_ragdollHead, X0
	169 Compare X0, 0
	170 JumpIfEqual {494}
	171 Move X1, X31
	172 Call Transform.get_rotation, X0
	173 Move X0, [X19+56]
	174 Move [X31+168], S1
	175 Move [X31+176], S0
	176 Move [X31+160], S3
	177 Move [X31+168], S2
	178 Compare X0, 0
	179 JumpIfEqual {494}
	180 Call PlayerView.get_ragdollHandRight, X0
	181 Compare X0, 0
	182 JumpIfEqual {494}
	183 Move X1, X31
	184 Call Transform.get_position, X0
	185 Move X0, [X19+56]
	186 Move [X31+152], S1
	187 Move [X31+160], S0
	188 Move [X31+92], S2
	189 Compare X0, 0
	190 JumpIfEqual {494}
	191 Call PlayerView.get_ragdollHandRight, X0
	192 Compare X0, 0
	193 JumpIfEqual {494}
	194 Move X1, X31
	195 Call Transform.get_rotation, X0
	196 Move X0, [X19+56]
	197 Move [X31+84], S1
	198 Move [X31+92], S0
	199 Move [X31+80], S2
	200 Compare X0, 0
	201 JumpIfEqual {494}
	202 Move V11, V3
	203 Call PlayerView.get_ragdollHandLeft, X0
	204 Compare X0, 0
	205 JumpIfEqual {494}
	206 Move X1, X31
	207 Call Transform.get_position, X0
	208 Move X0, [X19+56]
	209 Compare X0, 0
	210 JumpIfEqual {494}
	211 Move V14, V0
	212 Move V15, V1
	213 Move V8, V2
	214 Call PlayerView.get_ragdollHandLeft, X0
	215 Compare X0, 0
	216 JumpIfEqual {494}
	217 Move X1, X31
	218 Call Transform.get_rotation, X0
	219 Move X0, [X19+56]
	220 Compare X0, 0
	221 JumpIfEqual {494}
	222 Move V9, V0
	223 Move V10, V1
	224 Move V12, V2
	225 Move V13, V3
	226 Call PlayerView.get_ragdollHandRight, X0
	227 Compare X0, 0
	228 JumpIfEqual {494}
	229 Move X1, X31
	230 Call Transform.get_position, X0
	231 Move X0, [X19+56]
	232 Move [X31+64], S2
	233 Move [X31+72], S0
	234 Move [X31+76], S1
	235 Compare X0, 0
	236 JumpIfEqual {494}
	237 Call PlayerView.get_ragdollHandRight, X0
	238 Compare X0, 0
	239 JumpIfEqual {494}
	240 Move X1, X31
	241 Call Transform.get_rotation, X0
	242 Move X0, [X19+56]
	243 Move [X31+40], S1
	244 Move [X31+48], S0
	245 Move [X31+32], S3
	246 Move [X31+40], S2
	247 Compare X0, 0
	248 JumpIfEqual {494}
	249 Move [X31+72], S13
	250 Move [X31+48], S12
	251 Move [X31+56], S8
	252 Move [X31+64], S11
	253 Call PlayerView.get_ragdollHandLeft, X0
	254 Compare X0, 0
	255 JumpIfEqual {494}
	256 Move X1, X31
	257 Call Transform.get_position, X0
	258 Move X0, [X19+56]
	259 Compare X0, 0
	260 JumpIfEqual {494}
	261 Move [X31+8], S2
	262 Move [X31+16], S1
	263 Move [X31+16], S0
	264 Move [X31+24], S10
	265 Move [X31+52], S9
	266 Move [X31+24], S15
	267 Move [X31+32], S14
	268 Call PlayerView.get_ragdollHandLeft, X0
	269 Compare X0, 0
	270 JumpIfNotEqual {380}
	271 Move X21, 0x2560000
	272 Move W8, [X21+1087]
	273 Compare W8, 0
	274 JumpIfNotEqual {280}
	275 Move X0, 0x228A000
	276 Move X0, [X0+1152]
	277 Call 0x1B6F7F0
	278 Move W8, 1
	279 Move [X21+1087], W8
	280 Move X8, 0x228A000
	281 Move X8, [X8+1152]
	282 Move X8, [X8]
	283 Move X8, [X8+184]
	284 Move S0, [X8]
	285 Move S1, [X8+4]
	286 Move V2, [X8+8]
	287 Move X0, X31
	288 Call Quaternion.LookRotation, X0
	289 Move X0, [X19+88]
	290 Move [X31+116], S1
	291 Move [X31+124], S0
	292 Move [X31+108], S3
	293 Move [X31+116], S2
	294 Compare X0, 0
	295 JumpIfEqual {494}
	296 Move X1, X31
	297 Call Transform.get_position, X0
	298 Move X0, [X19+88]
	299 Move [X31+100], S1
	300 Move [X31+108], S0
	301 Move [X31+96], S2
	302 Compare X0, 0
	303 JumpIfEqual {494}
	304 Move X1, X31
	305 Call Transform.get_rotation, X0
	306 Move X0, [X19+120]
	307 Move [X31+168], S1
	308 Move [X31+176], S0
	309 Move [X31+160], S3
	310 Move [X31+168], S2
	311 Compare X0, 0
	312 JumpIfEqual {494}
	313 Move X1, X31
	314 Call Transform.get_position, X0
	315 Move X0, [X19+120]
	316 Move [X31+152], S1
	317 Move [X31+160], S0
	318 Move [X31+92], S2
	319 Compare X0, 0
	320 JumpIfEqual {494}
	321 Move X1, X31
	322 Call Transform.get_rotation, X0
	323 Move X0, [X19+112]
	324 Move [X31+84], S1
	325 Move [X31+92], S0
	326 Move [X31+80], S2
	327 Compare X0, 0
	328 JumpIfEqual {494}
	329 Move X1, X31
	330 Move V8, V3
	331 Call Transform.get_position, X0
	332 Move X0, [X19+112]
	333 Compare X0, 0
	334 JumpIfEqual {494}
	335 Move X1, X31
	336 Move V11, V0
	337 Move V12, V1
	338 Move V9, V2
	339 Call Transform.get_rotation, X0
	340 Move X0, [X19+104]
	341 Move [X31+52], S0
	342 Move [X31+72], S3
	343 Compare X0, 0
	344 JumpIfEqual {494}
	345 Move X1, X31
	346 Move V10, V1
	347 Move V13, V2
	348 Call Transform.get_position, X0
	349 Move X0, [X19+120]
	350 Move [X31+76], S1
	351 Compare X0, 0
	352 JumpIfEqual {494}
	353 Move X1, X31
	354 Move V14, V0
	355 Move V15, V2
	356 Move [X31+48], S13
	357 Move [X31+56], S9
	358 Move [X31+64], S8
	359 Call Transform.get_rotation, X0
	360 Move X0, [X19+96]
	361 Compare X0, 0
	362 JumpIfEqual {494}
	363 Move X1, X31
	364 Move [X31+32], S3
	365 Move [X31+40], S2
	366 Move [X31+40], S1
	367 Move [X31+48], S0
	368 Move [X31+64], S15
	369 Move [X31+72], S14
	370 Move [X31+20], S10
	371 Move [X31+28], S12
	372 Move [X31+28], S11
	373 Call Transform.get_position, X0
	374 Move X0, [X19+112]
	375 Move [X31+12], S1
	376 Move [X31+20], S0
	377 Move [X31+8], S2
	378 Compare X0, 0
	379 JumpIfEqual {494}
	380 Move X1, X31
	381 Call Transform.get_rotation, X0
	382 Move [X31+144], S1
	383 Move [X31+152], S0
	384 Move [X31+136], S3
	385 Move [X31+144], S2
	386 Move S5, [X31+128]
	387 Move S4, [X31+132]
	388 Move S7, [X31+120]
	389 Move S6, [X31+124]
	390 Move S17, [X31+112]
	391 Move S16, [X31+116]
	392 Move S23, [X31+104]
	393 Move S18, [X31+108]
	394 Move S25, [X31+96]
	395 Move S24, [X31+100]
	396 Move S29, [X31+88]
	397 Move S28, [X31+92]
	398 Move S31, [X31+80]
	399 Move S30, [X31+84]
	400 Move S9, [X31+56]
	401 Move S14, [X31+60]
	402 Move S8, [X31+24]
	403 Move S15, [X31+28]
	404 Move S12, [X31+48]
	405 Move S10, [X31+52]
	406 Move S22, [X31+16]
	407 Move S11, [X31+20]
	408 Move S19, [X31+68]
	409 Move S13, [X31+72]
	410 Move V0, [X31+64]
	411 Move V1, [X31+76]
	412 Move S3, [X31+40]
	413 Move S2, [X31+44]
	414 Move S21, [X31+32]
	415 Move S20, [X31+36]
	416 Move S27, [X31+8]
	417 Move S26, [X31+12]
	418 Move [X31+192], S4
	419 Move [X31+200], S5
	420 Move [X31+200], S6
	421 Move [X31+208], S7
	422 Move [X31+208], S16
	423 Move [X31+216], S17
	424 Move [X31+216], S18
	425 Move [X31+224], S23
	426 Move [X31+224], S24
	427 Move [X31+232], S25
	428 Move X8, 0x228C000
	429 Move X8, [X8+976]
	430 Move [X31+252], S1
	431 Move [X31+260], S0
	432 Move V0, [X31+148]
	433 Move V4, [X31+172]
	434 Move X2, [X8]
	435 Add X0, X31, 176
	436 Move [X31+288], S0
	437 Move V0, [X31+144]
	438 Move [X31+232], S4
	439 Move V4, [X31+168]
	440 Add X1, X31, 192
	441 Move [X31+292], S0
	442 Move V0, [X31+140]
	443 Move [X31+236], S4
	444 Move V4, [X31+164]
	445 Move [X31+260], S2
	446 Move [X31+296], S0
	447 Move V0, [X31+136]
	448 Move [X31+240], S4
	449 Move V4, [X31+160]
	450 Move [X31+264], S3
	451 Move [X31+300], S0
	452 Move V0, [X31+156]
	453 Move [X31+244], S4
	454 Move [X31+252], S19
	455 Move [X31+268], S20
	456 Move [X31+272], S21
	457 Move [X31+332], S0
	458 Move V0, [X31+152]
	459 Move [X31+276], S22
	460 Move [X31+280], S26
	461 Move [X31+284], S27
	462 Move [X31+304], S15
	463 Move [X31+308], S8
	464 Move [X31+312], S9
	465 Move [X31+316], S10
	466 Move [X31+320], S11
	467 Move [X31+324], S12
	468 Move [X31+328], S13
	469 Move [X31+336], S0
	470 Move [X31+340], S28
	471 Move [X31+344], S29
	472 Move [X31+348], S30
	473 Move [X31+352], S31
	474 Move [X31+356], S14
	475 Call 0x21128A8, X0, X1
	476 Move X8, [X20+40]
	477 Move X9, [X31+360]
	478 NotImplemented "Instruction CMP not yet implemented."
	479 Move X20, [X31+464]
	480 Move X19, [X31+472]
	481 Move X30, [X31+448]
	482 Move X21, [X31+456]
	483 Move X29, [X31+432]
	484 Move D9, [X31+416]
	485 Move D8, [X31+424]
	486 Move D11, [X31+400]
	487 Move D10, [X31+408]
	488 Move D13, [X31+384]
	489 Move D12, [X31+392]
	490 Move D15, [X31+368]
	491 Move D14, [X31+376]
	492 Add X31, X31, 480
	493 Return 
	494 Call 0x1B6FA1C
	495 Call 0x3D1A880

Method: System.Void .ctor()

Disassembly:
	0x01CC4D18 LDR X0, [X0 + 0x480]
	0x01CC4D1C BL 0x1B6E7F0
	0x01CC4D20 MOVZ W8, 0x1
	0x01CC4D24 STRB W8, [X23 + 0x43F]
	0x01CC4D28 LDR X8, [X22]
	0x01CC4D2C LDR X9, [X8 + 0xB8]
	0x01CC4D30 LDR V0, [X9]
	0x01CC4D34 LDR V1, [X9 + 0x8]
	0x01CC4D38 STR D0, [X19 + 0xA8]
	0x01CC4D3C STR S1, [X19 + 0xB0]
	0x01CC4D40 LDR X9, [X8 + 0xB8]
	0x01CC4D44 LDR X8, [X19 + 0xA0]
	0x01CC4D48 LDR V0, [X9]
	0x01CC4D4C LDR V1, [X9 + 0x8]
	0x01CC4D50 STUR D0, [X19 + 0xB4]
	0x01CC4D54 STR S1, [X19 + 0xBC]
	0x01CC4D58 CBZ X8, 0x1CC4E68
	0x01CC4D5C LDR W9, [X8 + 0x18]
	0x01CC4D60 CBZ W9, 0x1CC4E6C
	0x01CC4D64 LDR X0, [X8 + 0x20]
	0x01CC4D68 CBZ X0, 0x1CC4E68
	0x01CC4D6C ORN W8, W31, W20, 0x0
	0x01CC4D70 AND W1, W8, 0x1
	0x01CC4D74 MOV X2, X31
	0x01CC4D78 BL 0x3AF6930
	0x01CC4D7C LDR X21, [X19 + 0x98]
	0x01CC4D80 CBZ X21, 0x1CC4E68
	0x01CC4D84 LDR W8, [X21 + 0x18]
	0x01CC4D88 CMP W8, 0x1
	0x01CC4D8C B.LT 0x1CC4DC4
	0x01CC4D90 MOV W22, W31
	0x01CC4D94 CMP W22, W8
	0x01CC4D98 B.CS 0x1CC4E6C
	0x01CC4D9C ADD X8, X21, W22, 0x3, SXTW
	0x01CC4DA0 LDR X0, [X8 + 0x20]
	0x01CC4DA4 CBZ X0, 0x1CC4E68
	0x01CC4DA8 AND W1, W20, 0x1
	0x01CC4DAC MOV X2, X31
	0x01CC4DB0 BL 0x3A9D9A8
	0x01CC4DB4 LDR W8, [X21 + 0x18]
	0x01CC4DB8 ADD W22, W22, 0x1
	0x01CC4DBC CMP W22, W8
	0x01CC4DC0 B.LT 0x1CC4D94
	0x01CC4DC4 TBZ X20, 0x0, 0x1CC4E48
	0x01CC4DC8 LDR X8, [X19 + 0xA0]
	0x01CC4DCC CBZ X8, 0x1CC4E68
	0x01CC4DD0 LDR W9, [X8 + 0x18]
	0x01CC4DD4 CBZ W9, 0x1CC4E6C
	0x01CC4DD8 LDR X0, [X8 + 0x20]
	0x01CC4DDC CBZ X0, 0x1CC4E68
	0x01CC4DE0 MOVZ W1, 0x2
	0x01CC4DE4 MOV V0.16B, V8.16B
	0x01CC4DE8 MOV V1.16B, V9.16B
	0x01CC4DEC MOV V2.16B, V10.16B
	0x01CC4DF0 MOV X2, X31
	0x01CC4DF4 BL 0x3AF6FC8
	0x01CC4DF8 LDR X8, [X19 + 0xA0]
	0x01CC4DFC CBZ X8, 0x1CC4E68
	0x01CC4E00 LDR W9, [X8 + 0x18]
	0x01CC4E04 CBZ W9, 0x1CC4E6C
	0x01CC4E08 LDR X0, [X8 + 0x20]
	0x01CC4E0C CBZ X0, 0x1CC4E68
	0x01CC4E10 FMOV S0, 3
	0x01CC4E14 FMUL S2, S10, S0
	0x01CC4E18 FMUL S1, S9, S0
	0x01CC4E1C FMUL S0, S8, S0
	0x01CC4E20 LDP X20, X19, [X31 + 0x60]
	0x01CC4E24 LDP X22, X21, [X31 + 0x50]
	0x01CC4E28 LDP X24, X23, [X31 + 0x40]
	0x01CC4E2C LDR X30, [X31 + 0x30]
	0x01CC4E30 LDP D9, D8, [X31 + 0x20]
	0x01CC4E34 LDP D11, D10, [X31 + 0x10]
	0x01CC4E38 MOVZ W1, 0x2
	0x01CC4E3C MOV X2, X31
	0x01CC4E40 LDP D13, D12, [X31], #0x70
	0x01CC4E44 B 0x3AF7078
	0x01CC4E48 LDP X20, X19, [X31 + 0x60]
	0x01CC4E4C LDP X22, X21, [X31 + 0x50]
	0x01CC4E50 LDP X24, X23, [X31 + 0x40]
	0x01CC4E54 LDR X30, [X31 + 0x30]
	0x01CC4E58 LDP D9, D8, [X31 + 0x20]
	0x01CC4E5C LDP D11, D10, [X31 + 0x10]
	0x01CC4E60 LDP D13, D12, [X31], #0x70
	0x01CC4E64 RET
	0x01CC4E68 BL 0x1B6EA1C
	0x01CC4E6C BL 0x1B6EA24
	0x01CC4E70 LDR X0, [X0 + 0x18]
	0x01CC4E74 RET
	0x01CC4E78 STP X30, X19, [X31 - 0x10]!
	0x01CC4E7C ADRP X0, 0x2289000
	0x01CC4E80 LDR X0, [X0 + 0x990]
	0x01CC4E84 BL 0x1B6E804
	0x01CC4E88 BL 0x1B6EA0C
	0x01CC4E8C MOV X1, X31
	0x01CC4E90 MOV X19, X0
	0x01CC4E94 BL 0x31E99B4
	0x01CC4E98 ADRP X0, 0x228B000
	0x01CC4E9C LDR X0, [X0 + 0x430]
	0x01CC4EA0 BL 0x1B6E804
	0x01CC4EA4 MOV X1, X0
	0x01CC4EA8 MOV X0, X19
	0x01CC4EAC BL 0x1B6E8E8
	0x01CC4EB0 LDR X0, [X0 + 0x18]
	0x01CC4EB4 RET
	0x01CC4EB8 STR X30, [X31 - 0x20]!
	0x01CC4EBC STP X20, X19, [X31 + 0x10]
	0x01CC4EC0 ADRP X19, 0x255F000
	0x01CC4EC4 ADRP X20, 0x228B000
	0x01CC4EC8 LDRB W8, [X19 + 0x556]
	0x01CC4ECC LDR X20, [X20 + 0x318]
	0x01CC4ED0 TBNZ X8, 0x0, 0x1CC4EE8
	0x01CC4ED4 ADRP X0, 0x228B000
	0x01CC4ED8 LDR X0, [X0 + 0x318]
	0x01CC4EDC BL 0x1B6E7F0
	0x01CC4EE0 MOVZ W8, 0x1
	0x01CC4EE4 STRB W8, [X19 + 0x556]
	0x01CC4EE8 LDR X8, [X20]
	0x01CC4EEC LDP X20, X19, [X31 + 0x10]
	0x01CC4EF0 LDR X8, [X8 + 0xB8]
	0x01CC4EF4 STRB W31, [X8]
	0x01CC4EF8 LDR X30, [X31], #0x20
	0x01CC4EFC RET
	0x01CC4F00 ADRP X10, 0xFFFFFFFFFEDE9000
	0x01CC4F04 ADRP X11, 0xFFFFFFFFFEDE6000
	0x01CC4F08 LDR V0, [X10 + 0xD68]
	0x01CC4F0C LDR V1, [X11 + 0x2A]
	0x01CC4F10 MOVZ W9, 0x6666
	0x01CC4F14 MOVZ W8, 0x1
	0x01CC4F18 MOVK W9, 0x3F260000
	0x01CC4F1C MOVZ W12, 0x42480000
	0x01CC4F20 MOV X1, X31
	0x01CC4F24 STRB W8, [X0 + 0x20]
	0x01CC4F28 STR W9, [X0 + 0x30]
	0x01CC4F2C STR D0, [X0 + 0xB8]
	0x01CC4F30 STUR V1, [X0 + 0xC8]
	0x01CC4F34 STR W12, [X0 + 0xD8]
	0x01CC4F38 B 0x3A9EEE4
	0x01CC4F3C STP X30, X19, [X31 - 0x10]!
	0x01CC4F40 MOV X19, X0
	0x01CC4F44 LDR X0, [X0 + 0x48]
	0x01CC4F48 CBZ X0, 0x1CC4F70
	0x01CC4F4C MOV W1, W31
	0x01CC4F50 MOV X2, X31
	0x01CC4F54 BL 0x3A9A604
	0x01CC4F58 LDR X0, [X19 + 0x60]
	0x01CC4F5C CBZ X0, 0x1CC4F70
	0x01CC4F60 MOV W1, W31
	0x01CC4F64 MOV X2, X31
	0x01CC4F68 LDP X30, X19, [X31], #0x10
	0x01CC4F6C B 0x3A9A604
	0x01CC4F70 BL 0x1B6EA1C
	0x01CC4F74 STP D13, D12, [X31 - 0x60]!
	0x01CC4F78 STP D11, D10, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x2560000
	009 Move X20, 0x228B000
	010 Move W8, [X21+1363]
	011 Move X20, [X20+744]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0x228C000
	018 Move X0, [X0+984]
	019 Call 0x1B6F7F0
	020 Move X0, 0x228C000
	021 Move X0, [X0+992]
	022 Call 0x1B6F7F0
	023 Move X0, 0x228C000
	024 Move X0, [X0+1000]
	025 Call 0x1B6F7F0
	026 Move X0, 0x228C000
	027 Move X0, [X0+1008]
	028 Call 0x1B6F7F0
	029 Move X0, 0x228B000
	030 Move X0, [X0+744]
	031 Call 0x1B6F7F0
	032 Move W8, 1
	033 Move [X21+1363], W8
	034 Move X23, 0x228C000
	035 Move W8, 100
	036 Move X23, [X23+1008]
	037 Move [X19+128], W8
	038 Move X0, [X20]
	039 Move X24, 0x228C000
	040 Move X22, 0x228C000
	041 Move X21, 0x228C000
	042 Move X24, [X24+1000]
	043 Move X22, [X22+984]
	044 Move X21, [X21+992]
	045 Call 0x1B6FA0C
	046 Move S0, 3
	047 Move X1, X31
	048 Move X20, X0
	049 Call WaitForSeconds..ctor, X0, V0
	050 Move [X19+136], X20
	051 Move X20, 0x2560000
	052 Move W8, [X20+1087]
	053 Compare W8, 0
	054 JumpIfNotEqual {60}
	055 Move X0, 0x228A000
	056 Move X0, [X0+1152]
	057 Call 0x1B6F7F0
	058 Move W8, 1
	059 Move [X20+1087], W8
	060 Move X8, 0x228A000
	061 Move X8, [X8+1152]
	062 Move X8, [X8]
	063 Move X8, [X8+184]
	064 Move V0, [X8]
	065 Move V1, [X8+8]
	066 Move W8, 0xCCCD
	067 NotImplemented "Instruction MOVK not yet implemented."
	068 Move [X19+152], D0
	069 Move [X19+160], S1
	070 Move [X19+164], W8
	071 Move X0, [X23]
	072 Call 0x1B6FA0C
	073 Move X1, [X24]
	074 Move X20, X0
	075 Call Dictionary`2<Int32Enum, Single>..ctor, X0
	076 Move [X19+200], X20
	077 Move X0, [X22]
	078 Move W1, 1
	079 Call 0x1B6F868
	080 Move X8, -18968576
	081 Move X9, -18964480
	082 Move V0, [X8+149]
	083 Move V1, [X9+2192]
	084 Move W8, 0x3F000000
	085 Move [X19+216], X0
	086 Move [X19+224], W8
	087 Move [X19+236], V0
	088 Move [X19+252], D1
	089 Move X0, [X21]
	090 Move W1, 12
	091 Call 0x1B6F868
	092 Compare X0, 0
	093 JumpIfEqual {155}
	094 Move W8, [X0+24]
	095 Compare W8, 0
	096 JumpIfEqual {154}
	097 Move X9, -18968576
	098 Move V0, [X9+150]
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move [X0+2], V0
	101 Move X9, -18968576
	102 Move V0, [X9+129]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move [X0+3], V0
	105 Move X9, -18976768
	106 Move V0, [X9+86]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move [X0+4], V0
	109 Move X9, -18972672
	110 Move V0, [X9+107]
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move [X0+5], V0
	113 Move X9, -18980864
	114 Move V0, [X9+253]
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move [X0+6], V0
	117 Move X9, -18976768
	118 Move V1, [X9+87]
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move [X0+7], V1
	121 Move X9, -18980864
	122 Move V1, [X9+254]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move [X0+8], V1
	125 Move X9, -18968576
	126 Move V1, [X9+9]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move [X0+9], V1
	129 Move X9, -18968576
	130 Move V1, [X9+74]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move [X0+10], V1
	133 Move X9, -18972672
	134 Move V1, [X9+204]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move [X0+11], V1
	137 Move X9, -18968576
	138 Move V1, [X9+176]
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move [X0+12], V1
	141 Move [X0+13], V0
	142 Move [X19+264], X0
	143 Move X0, X19
	144 Move X20, [X31+48]
	145 Move X19, [X31+56]
	146 Move X22, [X31+32]
	147 Move X21, [X31+40]
	148 Move X24, [X31+16]
	149 Move X23, [X31+24]
	150 Move X1, X31
	151 Move X30, [X31+64]
	152 Call MonoBehaviour..ctor, X0
	153 Return 
	154 Call 0x1B6FA24
	155 Call 0x1B6FA1C

Method: System.Void .cctor()

Disassembly:
	0x01CC4F7C STP D9, D8, [X31 + 0x20]
	0x01CC4F80 STR X30, [X31 + 0x30]
	0x01CC4F84 STP X22, X21, [X31 + 0x40]
	0x01CC4F88 STP X20, X19, [X31 + 0x50]
	0x01CC4F8C ADRP X22, 0x255F000
	0x01CC4F90 ADRP X21, 0x228B000
	0x01CC4F94 LDRB W8, [X22 + 0x557]
	0x01CC4F98 LDR X21, [X21 + 0x438]
	0x01CC4F9C MOV V8.16B, V5.16B
	0x01CC4FA0 MOV V9.16B, V4.16B
	0x01CC4FA4 MOV V10.16B, V3.16B
	0x01CC4FA8 MOV V12.16B, V2.16B
	0x01CC4FAC MOV V13.16B, V1.16B
	0x01CC4FB0 MOV V11.16B, V0.16B
	0x01CC4FB4 MOV W20, W1
	0x01CC4FB8 MOV X19, X0
	0x01CC4FBC TBNZ X8, 0x0, 0x1CC4FD4
	0x01CC4FC0 ADRP X0, 0x228B000
	0x01CC4FC4 LDR X0, [X0 + 0x438]
	0x01CC4FC8 BL 0x1B6E7F0
	0x01CC4FCC MOVZ W8, 0x1
	0x01CC4FD0 STRB W8, [X22 + 0x557]
	0x01CC4FD4 LDR X0, [X21]
	0x01CC4FD8 AND W21, W20, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2560000
	005 Move X20, 0x228B000
	006 Move W8, [X19+1364]
	007 Move X20, [X20+408]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x228B000
	013 Move X0, [X0+408]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X19+1364], W8
	017 Move X8, [X20]
	018 Move X9, -18964480
	019 Move V0, [X9+2200]
	020 Move X10, -18968576
	021 Move X9, [X8+184]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move [X9+80], D0
	025 Move X8, [X8+184]
	026 Move V0, [X10+3456]
	027 Move [X8+88], D0
	028 Move X30, [X31+32]
	029 Return 

Method: System.Single <UpdateSnapTurn>g__CheckToTurn|110_0(AnimalCompany.HandSide handSide, ref UnityEngine.Vector2 prevValue)

Disassembly:
	0x01CC45F4 MOVZ W1, 0x1
	0x01CC45F8 MOV X2, X31
	0x01CC45FC BL 0x3A9A604
	0x01CC4600 LDR X0, [X20 + 0x30]
	0x01CC4604 CBZ X0, 0x1CC47DC
	0x01CC4608 MOVZ W1, 0x1
	0x01CC460C MOV X2, X31
	0x01CC4610 BL 0x3AF68B0
	0x01CC4614 ADRP X8, 0x228A000
	0x01CC4618 LDR X8, [X8 + 0xA38]
	0x01CC461C LDR X0, [X8]
	0x01CC4620 LDR W8, [X0 + 0xE0]
	0x01CC4624 CBNZ W8, 0x1CC462C
	0x01CC4628 BL 0x1B6E8F8
	0x01CC462C ADD X1, X31, 0x10
	0x01CC4630 MOV W0, W31
	0x01CC4634 MOV X2, X31
	0x01CC4638 BL 0x1CAFFBC
	0x01CC463C TBZ X0, 0x0, 0x1CC4780
	0x01CC4640 LDR X1, [X31 + 0x10]
	0x01CC4644 MOV X0, X20
	0x01CC4648 MOV W2, W31
	0x01CC464C BL 0x1CC23C0
	0x01CC4650 MOV W21, W31
	0x01CC4654 B 0x1CC479C
	0x01CC4658 LDP S8, S9, [X20 + 0xEC]
	0x01CC465C LDP S10, S0, [X20 + 0xF4]
	0x01CC4660 LDP S1, S2, [X20 + 0xFC]
	0x01CC4664 MOV X0, X31

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Add X1, X31, 8
	006 Move [X31+8], X31
	007 Call XRInputManager.GetJoystickValue, X0, X1
	008 Move X8, -18980864
	009 Move V1, [X31+8]
	010 Move V0, [X8+3100]
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 Move V2, [X19]
	013 NotImplemented "Instruction FCMP not yet implemented."
	014 Move S0, -1
	015 Move X8, -18980864
	016 Move V2, [X8+2808]
	017 Move S0, W31
	018 NotImplemented "Instruction FCMP not yet implemented."
	019 Move V1, [X19]
	020 NotImplemented "Instruction FCMP not yet implemented."
	021 Move S0, 1
	022 Move X8, [X31+8]
	023 Move [X19], X8
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Add X31, X31, 32
	027 Return V0

