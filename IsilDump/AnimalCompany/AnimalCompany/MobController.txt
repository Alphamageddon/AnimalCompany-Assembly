Type: AnimalCompany.MobController

Method: System.Boolean get_isDie()

Disassembly:
	0x01DF10A4 BL 0x1C16DFC
	0x01DF10A8 FMUL S0, S11, S11
	0x01DF10AC FMUL S1, S9, S9
	0x01DF10B0 FMUL S2, S8, S8
	0x01DF10B4 FADD S0, S0, S1
	0x01DF10B8 FADD S0, S2, S0
	0x01DF10BC FSQRT S0, S0
	0x01DF10C0 FMOV S1, 30
	0x01DF10C4 FCMP S0, S1
	0x01DF10C8 B.LE 0x1DF1104
	0x01DF10CC ADD X8, X31, 0x0
	0x01DF10D0 MOV X0, X19
	0x01DF10D4 BL 0x1DEEE54
	0x01DF10D8 ADRP X8, 0x2308000
	0x01DF10DC LDP V0, V1, [X31]
	0x01DF10E0 LDP V2, V3, [X31 + 0x20]
	0x01DF10E4 LDR X8, [X8 + 0x208]
	0x01DF10E8 ADD X0, X31, 0x40
	0x01DF10EC STP V0, V1, [X31 + 0x40]
	0x01DF10F0 STP V2, V3, [X31 + 0x60]
	0x01DF10F4 LDR X1, [X8]
	0x01DF10F8 BL 0x2415A70
	0x01DF10FC MOV X0, X19
	0x01DF1100 BL 0x1DEF22C
	0x01DF1104 LDP X20, X19, [X31 + 0xC0]
	0x01DF1108 LDR X30, [X31 + 0xB0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2303000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x2309000
	018 Move X0, [X0+352]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x2309000
	025 Move X0, [X0+360]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_isDie(System.Boolean value)

Disassembly:
	0x01DF57F4 MOV X2, X31
	0x01DF57F8 BL 0x3EB1B00
	0x01DF57FC MOV X20, X0
	0x01DF5800 BL 0x3EB1AE0
	0x01DF5804 MOV X0, X20
	0x01DF5808 BL 0x1D2C690
	0x01DF580C BL 0x1990590
	0x01DF5810 STR X30, [X31 - 0x30]!
	0x01DF5814 STP X22, X21, [X31 + 0x10]
	0x01DF5818 STP X20, X19, [X31 + 0x20]
	0x01DF581C ADRP X22, 0x25E3000
	0x01DF5820 LDRB W8, [X22 + 0xCFC]
	0x01DF5824 MOV W21, W2
	0x01DF5828 MOV X20, X1
	0x01DF582C MOV X19, X0
	0x01DF5830 TBNZ X8, 0x0, 0x1DF5854
	0x01DF5834 ADRP X0, 0x2304000
	0x01DF5838 LDR X0, [X0 + 0x388]
	0x01DF583C BL 0x1C16CF4
	0x01DF5840 ADRP X0, 0x2302000
	0x01DF5844 LDR X0, [X0 + 0x860]
	0x01DF5848 BL 0x1C16CF4
	0x01DF584C MOVZ W8, 0x1
	0x01DF5850 STRB W8, [X22 + 0xCFC]
	0x01DF5854 ADRP X22, 0x2302000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x22FF000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x2305000
	017 Move X0, [X0+352]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x2305000
	024 Move X0, [X0+648]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: AnimalCompany.MobController/Status get_status()

Disassembly:
	0x01DF5858 LDR X22, [X22 + 0x860]
	0x01DF585C AND W2, W21, 0x1
	0x01DF5860 MOV X0, X19
	0x01DF5864 MOV X1, X20
	0x01DF5868 MOV X3, X31
	0x01DF586C BL 0x1E73F8C
	0x01DF5870 MOV X0, X31
	0x01DF5874 BL 0x1DD6AE8
	0x01DF5878 TBZ X0, 0x0, 0x1DF5880
	0x01DF587C STR X31, [X19 + 0x198]
	0x01DF5880 LDR X0, [X22]
	0x01DF5884 LDR W8, [X0 + 0xE0]
	0x01DF5888 CBNZ W8, 0x1DF5894
	0x01DF588C BL 0x1C16DFC
	0x01DF5890 LDR X0, [X22]
	0x01DF5894 LDR X8, [X0 + 0xB8]
	0x01DF5898 LDR X0, [X8 + 0x8]
	0x01DF589C CBZ X0, 0x1DF58C0
	0x01DF58A0 ADRP X8, 0x2304000
	0x01DF58A4 LDR X8, [X8 + 0x388]
	0x01DF58A8 MOV X1, X19
	0x01DF58AC LDP X20, X19, [X31 + 0x20]
	0x01DF58B0 LDP X22, X21, [X31 + 0x10]
	0x01DF58B4 LDR X2, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+4]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x22FF000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2305000
	016 Move X0, [X0+656]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2305000
	023 Move X0, [X0+664]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_status(AnimalCompany.MobController/Status value)

Disassembly:
	0x01DF58B8 LDR X30, [X31], #0x30
	0x01DF58BC B 0x2DBE67C
	0x01DF58C0 BL 0x1C16F20
	0x01DF58C4 STR X30, [X31 - 0x20]!
	0x01DF58C8 STP X20, X19, [X31 + 0x10]
	0x01DF58CC MOV X19, X0
	0x01DF58D0 LDR X0, [X0 + 0x40]
	0x01DF58D4 LDR X20, [X19 + 0xE8]
	0x01DF58D8 CBZ X0, 0x1DF58F4
	0x01DF58DC LDRB W8, [X0 + 0x60]
	0x01DF58E0 TBNZ X8, 0x1, 0x1DF58F0
	0x01DF58E4 MOV X1, X31
	0x01DF58E8 BL 0x1E93668
	0x01DF58EC B 0x1DF58F4
	0x01DF58F0 MOV W0, W31
	0x01DF58F4 CBZ X20, 0x1DF5948
	0x01DF58F8 AND W1, W0, 0x1
	0x01DF58FC MOV X0, X20
	0x01DF5900 MOV X2, X31
	0x01DF5904 BL 0x3C32410
	0x01DF5908 LDR X20, [X19 + 0xE8]
	0x01DF590C MOV X0, X19
	0x01DF5910 BL 0x1DF26A8
	0x01DF5914 CBZ X20, 0x1DF5948

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+4], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22FF000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2305000
	016 Move X0, [X0+656]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2305000
	023 Move X0, [X0+672]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Boolean get_isStunned()

Disassembly:
	0x01DF5918 MOV X0, X20
	0x01DF591C MOV X1, X31
	0x01DF5920 BL 0x3BE19E8
	0x01DF5924 LDR X20, [X19 + 0xE8]
	0x01DF5928 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Call MobController.get_status, X0
	003 And W0, W0, 1
	004 Move X30, [X31+16]
	005 Return X0

Method: Fusion.TickTimer get__timerRevive()

Disassembly:
	0x01DF592C BL 0x1DF4AAC
	0x01DF5930 CBZ X20, 0x1DF5948
	0x01DF5934 MOV X0, X20
	0x01DF5938 LDP X20, X19, [X31 + 0x10]
	0x01DF593C MOV X1, X31
	0x01DF5940 LDR X30, [X31], #0x20
	0x01DF5944 B 0x3BE1A34
	0x01DF5948 BL 0x1C16F20
	0x01DF594C STR X30, [X31 - 0x20]!
	0x01DF5950 STP X20, X19, [X31 + 0x10]
	0x01DF5954 LDR X20, [X0 + 0xE8]
	0x01DF5958 MOV X1, X31
	0x01DF595C MOV X19, X0
	0x01DF5960 BL 0x3C32E90
	0x01DF5964 CBZ X0, 0x1DF5A0C
	0x01DF5968 MOV X1, X31
	0x01DF596C BL 0x3C3F58C
	0x01DF5970 CBZ X20, 0x1DF5A0C
	0x01DF5974 MOV X0, X20
	0x01DF5978 MOV X1, X31
	0x01DF597C BL 0x3BE1644
	0x01DF5980 LDR X0, [X19 + 0xE8]
	0x01DF5984 CBZ X0, 0x1DF5A0C
	0x01DF5988 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x22FF000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2305000
	016 Move X0, [X0+680]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2305000
	023 Move X0, [X0+688]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set__timerRevive(Fusion.TickTimer value)

Disassembly:
	0x01DF598C BL 0x3BE1B08
	0x01DF5990 TBNZ X0, 0x0, 0x1DF59A8
	0x01DF5994 LDR X0, [X19 + 0xE8]
	0x01DF5998 CBZ X0, 0x1DF5A0C
	0x01DF599C MOV X1, X31
	0x01DF59A0 BL 0x3BE15CC
	0x01DF59A4 TBZ X0, 0x0, 0x1DF59B8
	0x01DF59A8 LDR X0, [X19 + 0xE8]
	0x01DF59AC CBZ X0, 0x1DF5A0C
	0x01DF59B0 MOV X1, X31
	0x01DF59B4 BL 0x3BE17F8
	0x01DF59B8 ADRP X20, 0x25E3000
	0x01DF59BC LDRB W8, [X20 + 0x783]
	0x01DF59C0 LDR X19, [X19 + 0xE8]
	0x01DF59C4 CBNZ W8, 0x1DF59DC
	0x01DF59C8 ADRP X0, 0x22FE000
	0x01DF59CC LDR X0, [X0 + 0x5A0]
	0x01DF59D0 BL 0x1C16CF4
	0x01DF59D4 MOVZ W8, 0x1
	0x01DF59D8 STRB W8, [X20 + 0x783]
	0x01DF59DC CBZ X19, 0x1DF5A0C
	0x01DF59E0 ADRP X8, 0x22FE000
	0x01DF59E4 LDR X8, [X8 + 0x5A0]
	0x01DF59E8 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22FF000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2305000
	016 Move X0, [X0+680]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2305000
	023 Move X0, [X0+696]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Int32 get_health()

Disassembly:
	0x01DF0B40 ADRP X8, 0x2309000
	0x01DF0B44 LDR X8, [X8 + 0x170]
	0x01DF0B48 ADD X0, X31, 0xE0
	0x01DF0B4C LDR X1, [X8]
	0x01DF0B50 BL 0x2C1CC18
	0x01DF0B54 MOV X0, X19
	0x01DF0B58 BL 0x1DF2AA8
	0x01DF0B5C MOV X0, X19
	0x01DF0B60 BL 0x1DF2CE4
	0x01DF0B64 MOV X0, X19
	0x01DF0B68 BL 0x1DEA5A0
	0x01DF0B6C FMOV S3, W31
	0x01DF0B70 MOV X0, X19
	0x01DF0B74 BL 0x1DF12D8
	0x01DF0B78 B 0x1DF0BB8
	0x01DF0B7C MOV X0, X19
	0x01DF0B80 BL 0x1DEF22C
	0x01DF0B84 B 0x1DF0BB8
	0x01DF0B88 MOV X0, X19
	0x01DF0B8C BL 0x1DF3200
	0x01DF0B90 MOVZ W1, 0x4
	0x01DF0B94 MOV X0, X19
	0x01DF0B98 BL 0x1DEEB40
	0x01DF0B9C MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+12]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2304000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x230A000
	016 Move X0, [X0+312]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x230A000
	023 Move X0, [X0+320]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_health(System.Int32 value)

Disassembly:
	0x01DF59EC LDP X20, X19, [X31 + 0x10]
	0x01DF59F0 MOV X1, X31
	0x01DF59F4 LDR X8, [X8]
	0x01DF59F8 LDR X8, [X8 + 0xB8]
	0x01DF59FC LDP S1, S2, [X8 + 0x4]
	0x01DF5A00 LDR V0, [X8]
	0x01DF5A04 LDR X30, [X31], #0x20
	0x01DF5A08 B 0x3BE1534
	0x01DF5A0C BL 0x1C16F20
	0x01DF5A10 STR D8, [X31 - 0x20]!
	0x01DF5A14 STP X30, X19, [X31 + 0x10]
	0x01DF5A18 STR W31, [X31 + 0x8]
	0x01DF5A1C LDRB W8, [X0 + 0x1A0]
	0x01DF5A20 CBZ W8, 0x1DF5AE0
	0x01DF5A24 MOV X19, X0
	0x01DF5A28 BL 0x1DF00A4
	0x01DF5A2C TBZ X0, 0x0, 0x1DF5A68
	0x01DF5A30 MOV X0, X19
	0x01DF5A34 BL 0x1DF492C
	0x01DF5A38 STR W0, [X31 + 0x8]
	0x01DF5A3C LDR X1, [X19 + 0x38]
	0x01DF5A40 ADD X0, X31, 0x8
	0x01DF5A44 MOV X2, X31
	0x01DF5A48 BL 0x1E91B84

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+12], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22FF000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2305000
	016 Move X0, [X0+312]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2305000
	023 Move X0, [X0+704]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get_navAgentSpeed()

Disassembly:
	0x01DF36A8 B 0x1DF36C0
	0x01DF36AC B 0x1DF36C0
	0x01DF36B0 B 0x1DF36C0
	0x01DF36B4 B 0x1DF36C0
	0x01DF36B8 B 0x1DF36C0
	0x01DF36BC B 0x1DF36C0
	0x01DF36C0 MOV X20, X0
	0x01DF36C4 CMP W1, 0x1
	0x01DF36C8 B.NE 0x1DF36FC
	0x01DF36CC MOV X0, X20
	0x01DF36D0 BL 0x3EB1AD0
	0x01DF36D4 LDR X21, [X0]
	0x01DF36D8 BL 0x3EB1AE0
	0x01DF36DC ADRP X8, 0x2305000
	0x01DF36E0 LDR X8, [X8 + 0xC20]
	0x01DF36E4 ADD X0, X31, 0x20
	0x01DF36E8 LDR X1, [X8]
	0x01DF36EC BL 0x2BC434C
	0x01DF36F0 CBZ X21, 0x1DF3500
	0x01DF36F4 MOV X0, X21
	0x01DF36F8 BL 0x1C16F18
	0x01DF36FC MOV X21, X31
	0x01DF3700 B 0x1DF3708
	0x01DF3704 MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+16]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2301000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2307000
	016 Move X0, [X0+560]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2307000
	023 Move X0, [X0+568]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_navAgentSpeed(System.Single value)

Disassembly:
	0x01DF5A4C TBZ X0, 0x0, 0x1DF5A68
	0x01DF5A50 LDR X8, [X19]
	0x01DF5A54 MOV X0, X19
	0x01DF5A58 MOV W1, W31
	0x01DF5A5C LDR X9, [X8 + 0x318]
	0x01DF5A60 LDR X2, [X8 + 0x320]
	0x01DF5A64 BLR X9
	0x01DF5A68 MOV X0, X19
	0x01DF5A6C BL 0x1DF4858
	0x01DF5A70 TBNZ X0, 0x0, 0x1DF5A98
	0x01DF5A74 MOV X0, X19
	0x01DF5A78 BL 0x1DF00A4
	0x01DF5A7C TBNZ X0, 0x0, 0x1DF5AE0
	0x01DF5A80 LDR X8, [X19]
	0x01DF5A84 MOV X0, X19
	0x01DF5A88 LDR X9, [X8 + 0x2A8]
	0x01DF5A8C LDR X1, [X8 + 0x2B0]
	0x01DF5A90 BLR X9
	0x01DF5A94 B 0x1DF5AE0
	0x01DF5A98 LDR X0, [X19 + 0x38]
	0x01DF5A9C CBZ X0, 0x1DF5AEC
	0x01DF5AA0 LDR V8, [X19 + 0x8C]
	0x01DF5AA4 MOV X1, X31
	0x01DF5AA8 BL 0x1E9E550

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+16], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22FF000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2305000
	016 Move X0, [X0+560]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2305000
	023 Move X0, [X0+712]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get_navAgentAngularSpeed()

Disassembly:
	0x01DF5AAC FSUB S0, S8, S0
	0x01DF5AB0 FCMP S0, 0x0
	0x01DF5AB4 STR S0, [X19 + 0x8C]
	0x01DF5AB8 B.HI 0x1DF5AD8
	0x01DF5ABC LDR X8, [X19]
	0x01DF5AC0 FMOV S0, 3
	0x01DF5AC4 MOV X0, X19
	0x01DF5AC8 MOV W1, W31
	0x01DF5ACC LDR X9, [X8 + 0x328]
	0x01DF5AD0 LDR X2, [X8 + 0x330]
	0x01DF5AD4 BLR X9
	0x01DF5AD8 MOV X0, X19
	0x01DF5ADC BL 0x1DF00A4
	0x01DF5AE0 LDP X30, X19, [X31 + 0x10]
	0x01DF5AE4 LDR V8, [X31], #0x20
	0x01DF5AE8 RET
	0x01DF5AEC BL 0x1C16F20
	0x01DF5AF0 STP X30, X19, [X31 - 0x10]!
	0x01DF5AF4 LDR X8, [X0 + 0x38]
	0x01DF5AF8 CBZ X8, 0x1DF5B40
	0x01DF5AFC LDR W8, [X8 + 0x188]
	0x01DF5B00 CMP W8, 0x2
	0x01DF5B04 B.NE 0x1DF5B38
	0x01DF5B08 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+20]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x22FF000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2305000
	016 Move X0, [X0+720]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2305000
	023 Move X0, [X0+728]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_navAgentAngularSpeed(System.Single value)

Disassembly:
	0x01DF5B0C LDR X0, [X0 + 0x40]
	0x01DF5B10 CBZ X0, 0x1DF5B2C
	0x01DF5B14 LDRB W8, [X0 + 0x60]
	0x01DF5B18 TBNZ X8, 0x1, 0x1DF5B2C
	0x01DF5B1C MOV X1, X31
	0x01DF5B20 BL 0x1E93668
	0x01DF5B24 TBZ X0, 0x0, 0x1DF5B2C
	0x01DF5B28 STP X31, X31, [X19 + 0x150]
	0x01DF5B2C MOV X0, X19
	0x01DF5B30 LDP X30, X19, [X31], #0x10
	0x01DF5B34 B 0x1DF58C4
	0x01DF5B38 LDP X30, X19, [X31], #0x10
	0x01DF5B3C RET
	0x01DF5B40 BL 0x1C16F20
	0x01DF5B44 STR D10, [X31 - 0x30]!
	0x01DF5B48 STP D9, D8, [X31 + 0x8]
	0x01DF5B4C STR X30, [X31 + 0x18]
	0x01DF5B50 STP X20, X19, [X31 + 0x20]
	0x01DF5B54 MOV X19, X0
	0x01DF5B58 LDR X0, [X0 + 0xE8]
	0x01DF5B5C CBZ X0, 0x1DF5BEC
	0x01DF5B60 MOV W20, W1
	0x01DF5B64 AND W1, W1, 0x1
	0x01DF5B68 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+20], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22FF000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2305000
	016 Move X0, [X0+720]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2305000
	023 Move X0, [X0+736]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get_searchPrecision()

Disassembly:
	0x01DF5B6C MOV V8.16B, V2.16B
	0x01DF5B70 MOV V9.16B, V1.16B
	0x01DF5B74 MOV V10.16B, V0.16B
	0x01DF5B78 BL 0x3BE17B4
	0x01DF5B7C LDR X0, [X19 + 0xE8]
	0x01DF5B80 CBZ X0, 0x1DF5BEC
	0x01DF5B84 EOR W8, W20, 0x1
	0x01DF5B88 AND W20, W8, 0x1
	0x01DF5B8C MOV W1, W20
	0x01DF5B90 MOV X2, X31
	0x01DF5B94 BL 0x3BE1A80
	0x01DF5B98 LDR X0, [X19 + 0xE8]
	0x01DF5B9C CBZ X0, 0x1DF5BEC
	0x01DF5BA0 MOV W1, W20
	0x01DF5BA4 MOV X2, X31
	0x01DF5BA8 BL 0x3BE1AC4
	0x01DF5BAC LDR X8, [X19]
	0x01DF5BB0 MOV X0, X19
	0x01DF5BB4 MOV V0.16B, V10.16B
	0x01DF5BB8 LDR X9, [X8 + 0x2D8]
	0x01DF5BBC LDR X1, [X8 + 0x2E0]
	0x01DF5BC0 BLR X9
	0x01DF5BC4 MOV X0, X19
	0x01DF5BC8 MOV V0.16B, V9.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+24]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x22FF000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2305000
	016 Move X0, [X0+744]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2305000
	023 Move X0, [X0+752]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_searchPrecision(System.Single value)

Disassembly:
	0x01DF5BCC BL 0x1DF4BCC
	0x01DF5BD0 MOV X0, X19
	0x01DF5BD4 MOV V0.16B, V8.16B
	0x01DF5BD8 LDP X20, X19, [X31 + 0x20]
	0x01DF5BDC LDR X30, [X31 + 0x18]
	0x01DF5BE0 LDP D9, D8, [X31 + 0x8]
	0x01DF5BE4 LDR V10, [X31], #0x30
	0x01DF5BE8 B 0x1DF4C8C
	0x01DF5BEC BL 0x1C16F20
	0x01DF5BF0 STR D8, [X31 - 0x20]!
	0x01DF5BF4 STP X30, X19, [X31 + 0x10]
	0x01DF5BF8 MOV V8.16B, V0.16B
	0x01DF5BFC MOV X19, X0
	0x01DF5C00 BL 0x1DF4A4C
	0x01DF5C04 LDR X0, [X19 + 0xE8]
	0x01DF5C08 CBZ X0, 0x1DF5C20
	0x01DF5C0C LDP X30, X19, [X31 + 0x10]
	0x01DF5C10 MOV V0.16B, V8.16B
	0x01DF5C14 MOV X1, X31
	0x01DF5C18 LDR V8, [X31], #0x20
	0x01DF5C1C B 0x3BE19E8
	0x01DF5C20 BL 0x1C16F20
	0x01DF5C24 STR D8, [X31 - 0x20]!
	0x01DF5C28 STP X30, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+24], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22FF000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2305000
	016 Move X0, [X0+744]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2305000
	023 Move X0, [X0+760]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get_searchWidth()

Disassembly:
	0x01DF5C2C MOV V8.16B, V0.16B
	0x01DF5C30 MOV X19, X0
	0x01DF5C34 BL 0x1DF4B0C
	0x01DF5C38 LDR X0, [X19 + 0xE8]
	0x01DF5C3C CBZ X0, 0x1DF5C54
	0x01DF5C40 LDP X30, X19, [X31 + 0x10]
	0x01DF5C44 MOV V0.16B, V8.16B
	0x01DF5C48 MOV X1, X31
	0x01DF5C4C LDR V8, [X31], #0x20
	0x01DF5C50 B 0x3BE1A34
	0x01DF5C54 BL 0x1C16F20
	0x01DF5C58 STR D10, [X31 - 0x30]!
	0x01DF5C5C STP D9, D8, [X31 + 0x8]
	0x01DF5C60 STR X30, [X31 + 0x18]
	0x01DF5C64 STP X20, X19, [X31 + 0x20]
	0x01DF5C68 MOV X19, X0
	0x01DF5C6C BL 0x1DF00A4
	0x01DF5C70 TBZ X0, 0x0, 0x1DF5C84
	0x01DF5C74 LDR X8, [X19]
	0x01DF5C78 LDR X9, [X8 + 0x348]
	0x01DF5C7C LDR X1, [X8 + 0x350]
	0x01DF5C80 B 0x1DF5C98
	0x01DF5C84 LDRB W8, [X19 + 0x1A0]
	0x01DF5C88 CBZ W8, 0x1DF5CA0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+28]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x22FF000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2305000
	016 Move X0, [X0+768]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2305000
	023 Move X0, [X0+776]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_searchWidth(System.Single value)

Disassembly:
	0x01DF5C8C LDR X8, [X19]
	0x01DF5C90 LDR X9, [X8 + 0x358]
	0x01DF5C94 LDR X1, [X8 + 0x360]
	0x01DF5C98 MOV X0, X19
	0x01DF5C9C BLR X9
	0x01DF5CA0 LDRB W8, [X19 + 0x180]
	0x01DF5CA4 CBZ W8, 0x1DF5D6C
	0x01DF5CA8 MOV X0, X19
	0x01DF5CAC BL 0x1DF00A4
	0x01DF5CB0 TBZ X0, 0x0, 0x1DF5D28
	0x01DF5CB4 MOV X0, X19
	0x01DF5CB8 MOV X1, X31
	0x01DF5CBC BL 0x3C32E90
	0x01DF5CC0 CBZ X0, 0x1DF5D80
	0x01DF5CC4 MOV X1, X31
	0x01DF5CC8 BL 0x3C3F58C
	0x01DF5CCC ADRP X20, 0x25E3000
	0x01DF5CD0 LDRB W8, [X20 + 0x793]
	0x01DF5CD4 MOV V8.16B, V0.16B
	0x01DF5CD8 MOV V9.16B, V1.16B
	0x01DF5CDC MOV V10.16B, V2.16B
	0x01DF5CE0 CBNZ W8, 0x1DF5CF8
	0x01DF5CE4 ADRP X0, 0x22FF000
	0x01DF5CE8 LDR X0, [X0 + 0x5A8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+28], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22FF000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2305000
	016 Move X0, [X0+768]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2305000
	023 Move X0, [X0+784]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Int32 get_targetPlayerID()

Disassembly:
	0x01DF5CEC BL 0x1C16CF4
	0x01DF5CF0 MOVZ W8, 0x1
	0x01DF5CF4 STRB W8, [X20 + 0x793]
	0x01DF5CF8 ADRP X8, 0x22FF000
	0x01DF5CFC LDR X8, [X8 + 0x5A8]
	0x01DF5D00 MOVZ W0, 0x80
	0x01DF5D04 MOV V0.16B, V8.16B
	0x01DF5D08 MOV V1.16B, V9.16B
	0x01DF5D0C LDR X8, [X8]
	0x01DF5D10 MOV V2.16B, V10.16B
	0x01DF5D14 MOV X1, X31
	0x01DF5D18 LDR X8, [X8 + 0xB8]
	0x01DF5D1C LDP S3, S4, [X8]
	0x01DF5D20 LDP S5, S6, [X8 + 0x8]
	0x01DF5D24 BL 0x1E05208
	0x01DF5D28 LDR X0, [X19 + 0xC8]
	0x01DF5D2C CBZ X0, 0x1DF5D80
	0x01DF5D30 MOV X1, X31
	0x01DF5D34 BL 0x3C32ECC
	0x01DF5D38 MOV X20, X0
	0x01DF5D3C MOV X0, X19
	0x01DF5D40 BL 0x1DF00A4
	0x01DF5D44 CBZ X20, 0x1DF5D80
	0x01DF5D48 ORN W8, W31, W0, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+32]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x22FF000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2305000
	016 Move X0, [X0+792]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2305000
	023 Move X0, [X0+800]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_targetPlayerID(System.Int32 value)

Disassembly:
	0x01DF5D4C MOV X0, X20
	0x01DF5D50 LDP X20, X19, [X31 + 0x20]
	0x01DF5D54 LDR X30, [X31 + 0x18]
	0x01DF5D58 LDP D9, D8, [X31 + 0x8]
	0x01DF5D5C AND W1, W8, 0x1
	0x01DF5D60 MOV X2, X31
	0x01DF5D64 LDR V10, [X31], #0x30
	0x01DF5D68 B 0x3C357B4
	0x01DF5D6C LDP X20, X19, [X31 + 0x20]
	0x01DF5D70 LDR X30, [X31 + 0x18]
	0x01DF5D74 LDP D9, D8, [X31 + 0x8]
	0x01DF5D78 LDR V10, [X31], #0x30
	0x01DF5D7C RET
	0x01DF5D80 BL 0x1C16F20
	0x01DF5D84 RET
	0x01DF5D88 AND W1, W1, 0x1
	0x01DF5D8C B 0x1DF47F4
	0x01DF5D90 STR D8, [X31 - 0x30]!
	0x01DF5D94 STP X30, X21, [X31 + 0x10]
	0x01DF5D98 STP X20, X19, [X31 + 0x20]
	0x01DF5D9C MOV W20, W1
	0x01DF5DA0 MOV X19, X0
	0x01DF5DA4 TBZ X1, 0x0, 0x1DF5DEC
	0x01DF5DA8 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+32], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22FF000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2305000
	016 Move X0, [X0+792]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2305000
	023 Move X0, [X0+808]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get__timerToChasing()

Disassembly:
	0x01DEB4E0 MOV X0, X19
	0x01DEB4E4 LDP X20, X19, [X31 + 0x10]
	0x01DEB4E8 LDR X30, [X31], #0x20
	0x01DEB4EC B 0x1DE76B0
	0x01DEB4F0 LDP X20, X19, [X31 + 0x10]
	0x01DEB4F4 LDR X30, [X31], #0x20
	0x01DEB4F8 RET
	0x01DEB4FC BL 0x1C16F20
	0x01DEB500 STP X30, X21, [X31 - 0x20]!
	0x01DEB504 STP X20, X19, [X31 + 0x10]
	0x01DEB508 ADRP X20, 0x25ED000
	0x01DEB50C ADRP X21, 0x230D000
	0x01DEB510 LDRB W8, [X20 + 0xCC2]
	0x01DEB514 LDR X21, [X21 + 0xC88]
	0x01DEB518 MOV X19, X0
	0x01DEB51C TBNZ X8, 0x0, 0x1DEB534
	0x01DEB520 ADRP X0, 0x230D000
	0x01DEB524 LDR X0, [X0 + 0xC88]
	0x01DEB528 BL 0x1C16CF4
	0x01DEB52C MOVZ W8, 0x1
	0x01DEB530 STRB W8, [X20 + 0xCC2]
	0x01DEB534 LDR X0, [X21]
	0x01DEB538 LDR W8, [X0 + 0xE0]
	0x01DEB53C CBNZ W8, 0x1DEB544

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+36]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2309000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x230E000
	016 Move X0, [X0+3768]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x230E000
	023 Move X0, [X0+3776]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set__timerToChasing(System.Single value)

Disassembly:
	0x01DEB540 BL 0x1C16DFC
	0x01DEB544 ADRP X8, 0xFFFFFFFFFED03000
	0x01DEB548 LDR V0, [X8 + 0x268]
	0x01DEB54C MOVZ W8, 0x1
	0x01DEB550 MOVZ W9, 0x3F800000
	0x01DEB554 STR W31, [X19 + 0x50]
	0x01DEB558 STRB W8, [X19 + 0x54]
	0x01DEB55C STR D0, [X19 + 0x48]
	0x01DEB560 STR W9, [X19 + 0x80]
	0x01DEB564 MOV X0, X19
	0x01DEB568 LDP X20, X19, [X31 + 0x10]
	0x01DEB56C MOV X1, X31
	0x01DEB570 LDP X30, X21, [X31], #0x20
	0x01DEB574 B 0x3C36C30
	0x01DEB578 STP X30, X21, [X31 - 0x20]!
	0x01DEB57C STP X20, X19, [X31 + 0x10]
	0x01DEB580 ADRP X21, 0x25ED000
	0x01DEB584 LDRB W9, [X21 + 0xCC3]
	0x01DEB588 MOV X20, X0
	0x01DEB58C MOV X19, X8
	0x01DEB590 TBNZ X9, 0x0, 0x1DEB5A8
	0x01DEB594 ADRP X0, 0x230D000
	0x01DEB598 LDR X0, [X0 + 0xEF8]
	0x01DEB59C BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+36], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2309000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x230E000
	016 Move X0, [X0+3768]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x230E000
	023 Move X0, [X0+3784]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get__timerToSearching()

Disassembly:
	0x01DF493C LDP X30, X19, [X31], #0x10
	0x01DF4940 RET
	0x01DF4944 ADRP X0, 0x22FF000
	0x01DF4948 LDR X0, [X0 + 0x5B0]
	0x01DF494C BL 0x1C16D08
	0x01DF4950 BL 0x1C16F10
	0x01DF4954 MOV X19, X0
	0x01DF4958 ADRP X0, 0x2305000
	0x01DF495C LDR X0, [X0 + 0x2A8]
	0x01DF4960 BL 0x1C16D08
	0x01DF4964 MOV X1, X0
	0x01DF4968 MOV X0, X19
	0x01DF496C MOV X2, X31
	0x01DF4970 BL 0x337DF1C
	0x01DF4974 ADRP X0, 0x2305000
	0x01DF4978 LDR X0, [X0 + 0x2B0]
	0x01DF497C BL 0x1C16D08
	0x01DF4980 MOV X1, X0
	0x01DF4984 MOV X0, X19
	0x01DF4988 BL 0x1C16DEC
	0x01DF498C STP X30, X19, [X31 - 0x10]!
	0x01DF4990 LDR X8, [X0 + 0x50]
	0x01DF4994 CBZ X8, 0x1DF49A4
	0x01DF4998 STR W1, [X8 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+40]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2300000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2306000
	016 Move X0, [X0+584]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2306000
	023 Move X0, [X0+600]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set__timerToSearching(System.Single value)

Disassembly:
	0x01DF48DC BL 0x1C16F10
	0x01DF48E0 MOV X19, X0
	0x01DF48E4 ADRP X0, 0x2305000
	0x01DF48E8 LDR X0, [X0 + 0x290]
	0x01DF48EC BL 0x1C16D08
	0x01DF48F0 MOV X1, X0
	0x01DF48F4 MOV X0, X19
	0x01DF48F8 MOV X2, X31
	0x01DF48FC BL 0x337DF1C
	0x01DF4900 ADRP X0, 0x2305000
	0x01DF4904 LDR X0, [X0 + 0x2A0]
	0x01DF4908 BL 0x1C16D08
	0x01DF490C MOV X1, X0
	0x01DF4910 MOV X0, X19
	0x01DF4914 BL 0x1C16DEC
	0x01DF4918 STR X30, [X31 - 0x10]!
	0x01DF491C BL 0x1DF4858
	0x01DF4920 AND W0, W0, 0x1
	0x01DF4924 LDR X30, [X31], #0x10
	0x01DF4928 RET
	0x01DF492C STP X30, X19, [X31 - 0x10]!
	0x01DF4930 LDR X8, [X0 + 0x50]
	0x01DF4934 CBZ X8, 0x1DF4944
	0x01DF4938 LDR W0, [X8 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+40], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2300000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2306000
	016 Move X0, [X0+584]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2306000
	023 Move X0, [X0+592]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Single get__timerAttackInterval()

Disassembly:
	0x01DEB458 ADRP X20, 0x25ED000
	0x01DEB45C LDRB W8, [X20 + 0xCC1]
	0x01DEB460 MOV X19, X0
	0x01DEB464 TBNZ X8, 0x0, 0x1DEB47C
	0x01DEB468 ADRP X0, 0x2308000
	0x01DEB46C LDR X0, [X0 + 0x598]
	0x01DEB470 BL 0x1C16CF4
	0x01DEB474 MOVZ W8, 0x1
	0x01DEB478 STRB W8, [X20 + 0xCC1]
	0x01DEB47C LDRB W8, [X19 + 0xA8]
	0x01DEB480 CBZ W8, 0x1DEB4F0
	0x01DEB484 LDRB W8, [X19 + 0x54]
	0x01DEB488 CBZ W8, 0x1DEB4E0
	0x01DEB48C ADRP X8, 0x2308000
	0x01DEB490 LDR X8, [X8 + 0x598]
	0x01DEB494 LDR X20, [X19 + 0xC0]
	0x01DEB498 LDR X0, [X8]
	0x01DEB49C LDR W8, [X0 + 0xE0]
	0x01DEB4A0 CBNZ W8, 0x1DEB4A8
	0x01DEB4A4 BL 0x1C16DFC
	0x01DEB4A8 MOV X0, X20
	0x01DEB4AC MOV X1, X31
	0x01DEB4B0 MOV X2, X31
	0x01DEB4B4 BL 0x3C354F8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+44]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2309000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x230E000
	016 Move X0, [X0+3680]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x230E000
	023 Move X0, [X0+3760]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set__timerAttackInterval(System.Single value)

Disassembly:
	0x01DE9788 ADRP X0, 0x230A000
	0x01DE978C LDR X0, [X0 + 0x598]
	0x01DE9790 BL 0x1C16CF4
	0x01DE9794 MOVZ W8, 0x1
	0x01DE9798 STRB W8, [X22 + 0xD08]
	0x01DE979C STR X20, [X19 + 0x160]
	0x01DE97A0 LDR X0, [X21]
	0x01DE97A4 LDR W8, [X0 + 0xE0]
	0x01DE97A8 CBNZ W8, 0x1DE97B0
	0x01DE97AC BL 0x1C16DFC
	0x01DE97B0 MOV X0, X20
	0x01DE97B4 MOV X1, X31
	0x01DE97B8 MOV X2, X31
	0x01DE97BC BL 0x3C354F8
	0x01DE97C0 TBZ X0, 0x0, 0x1DE97E0
	0x01DE97C4 CBZ X20, 0x1DE9800
	0x01DE97C8 LDR X8, [X20 + 0x40]
	0x01DE97CC CBZ X8, 0x1DE9800
	0x01DE97D0 LDR X8, [X8 + 0x20]
	0x01DE97D4 CBZ X8, 0x1DE97E8
	0x01DE97D8 LDR W1, [X8]
	0x01DE97DC B 0x1DE97EC
	0x01DE97E0 MOVN W1, 0x0
	0x01DE97E4 B 0x1DE97EC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+44], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x230B000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x2310000
	016 Move X0, [X0+3680]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x2310000
	023 Move X0, [X0+3688]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: AnimalCompany.MobData get_data()

Disassembly:
	0x01DF5DAC MOV V8.16B, V0.16B
	0x01DF5DB0 BL 0x1DF00A4

ISIL:
	001 Move X0, [X0+192]
	002 Return X0

Method: AnimalCompany.MobView get_view()

Disassembly:
	0x01DF5DB4 TBNZ X0, 0x0, 0x1DF5E20
	0x01DF5DB8 MOV X0, X19

ISIL:
	001 Move X0, [X0+200]
	002 Return X0

Method: UnityEngine.Transform get_viewPoint()

Disassembly:
	0x01DF5DBC BL 0x1DF4858
	0x01DF5DC0 ORR W1, W0, 0x1

ISIL:
	001 Move X0, [X0+208]
	002 Return X0

Method: UnityEngine.Transform get_hearingPoint()

Disassembly:
	0x01DF5DC4 MOV X0, X19
	0x01DF5DC8 BL 0x1DF48B8

ISIL:
	001 Move X0, [X0+216]
	002 Return X0

Method: System.Single get_viewDistance()

Disassembly:
	0x01DF5DCC LDR V0, [X19 + 0x8C]
	0x01DF5DD0 LDR X0, [X19 + 0xE8]
	0x01DF5DD4 FCMP S0, S8
	0x01DF5DD8 FCSEL S0, S0, S8, GT
	0x01DF5DDC STR S0, [X19 + 0x8C]
	0x01DF5DE0 CBZ X0, 0x1DF5E64
	0x01DF5DE4 FMOV S0, W31
	0x01DF5DE8 B 0x1DF5E18
	0x01DF5DEC MOV X0, X19
	0x01DF5DF0 BL 0x1DF4858
	0x01DF5DF4 AND W1, W0, 0xFFFFFFFE
	0x01DF5DF8 MOV X0, X19
	0x01DF5DFC BL 0x1DF48B8
	0x01DF5E00 LDR X21, [X19 + 0xE8]
	0x01DF5E04 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+192]
	003 Compare X8, 0
	004 JumpIfEqual {15}
	005 Move X8, [X8+120]
	006 Compare X8, 0
	007 JumpIfEqual {15}
	008 NotImplemented "Instruction LDRSW not yet implemented."
	009 Move W10, [X8+24]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X8, X8, X9
	012 Move V0, [X8+32]
	013 Move X30, [X31+16]
	014 Return V0
	015 Call 0x1C17F20
	016 Call 0x1C17F28

Method: AnimalCompany.GameGen.NavZone get_navZone()

Disassembly:
	0x01DF5E08 STR W31, [X19 + 0x8C]
	0x01DF5E0C BL 0x1DF26A8
	0x01DF5E10 CBZ X21, 0x1DF5E64
	0x01DF5E14 MOV X0, X21
	0x01DF5E18 MOV X1, X31
	0x01DF5E1C BL 0x3BE19E8
	0x01DF5E20 MOV X0, X19
	0x01DF5E24 BL 0x1DF00A4
	0x01DF5E28 TBZ X0, 0x0, 0x1DF5E3C
	0x01DF5E2C LDP X20, X19, [X31 + 0x20]
	0x01DF5E30 LDP X30, X21, [X31 + 0x10]
	0x01DF5E34 LDR V8, [X31], #0x30
	0x01DF5E38 RET
	0x01DF5E3C LDR X8, [X19]
	0x01DF5E40 LDR V0, [X19 + 0x8C]
	0x01DF5E44 AND W1, W20, 0x1
	0x01DF5E48 MOV X0, X19
	0x01DF5E4C LDR X3, [X8 + 0x338]
	0x01DF5E50 LDR X2, [X8 + 0x340]
	0x01DF5E54 LDP X20, X19, [X31 + 0x20]
	0x01DF5E58 LDP X30, X21, [X31 + 0x10]
	0x01DF5E5C LDR V8, [X31], #0x30
	0x01DF5E60 BR X3
	0x01DF5E64 BL 0x1C16F20
	0x01DF5E68 STR D8, [X31 - 0x30]!
	0x01DF5E6C STR X30, [X31 + 0x8]
	0x01DF5E70 STP X22, X21, [X31 + 0x10]
	0x01DF5E74 STP X20, X19, [X31 + 0x20]
	0x01DF5E78 ADRP X21, 0x25E3000
	0x01DF5E7C LDRB W8, [X21 + 0xCFE]
	0x01DF5E80 MOV V8.16B, V0.16B
	0x01DF5E84 MOV W19, W1
	0x01DF5E88 MOV X20, X0
	0x01DF5E8C TBNZ X8, 0x0, 0x1DF5EB0
	0x01DF5E90 ADRP X0, 0x2301000
	0x01DF5E94 LDR X0, [X0 + 0xA78]
	0x01DF5E98 BL 0x1C16CF4
	0x01DF5E9C ADRP X0, 0x2304000
	0x01DF5EA0 LDR X0, [X0 + 0x3A8]
	0x01DF5EA4 BL 0x1C16CF4
	0x01DF5EA8 MOVZ W8, 0x1
	0x01DF5EAC STRB W8, [X21 + 0xCFE]
	0x01DF5EB0 LDRB W8, [X20 + 0x58]
	0x01DF5EB4 CBZ W8, 0x1DF5EF8
	0x01DF5EB8 STRB W31, [X20 + 0x58]
	0x01DF5EBC MOV X0, X20
	0x01DF5EC0 BL 0x1DF00A4
	0x01DF5EC4 TBNZ X0, 0x0, 0x1DF5F34
	0x01DF5EC8 LDR X0, [X20 + 0xC8]
	0x01DF5ECC CBZ X0, 0x1DF6040
	0x01DF5ED0 LDR X8, [X0]
	0x01DF5ED4 AND W1, W19, 0x1
	0x01DF5ED8 LDP X20, X19, [X31 + 0x20]
	0x01DF5EDC LDP X22, X21, [X31 + 0x10]
	0x01DF5EE0 LDR X3, [X8 + 0x238]
	0x01DF5EE4 LDR X2, [X8 + 0x240]
	0x01DF5EE8 LDR X30, [X31 + 0x8]
	0x01DF5EEC MOV V0.16B, V8.16B
	0x01DF5EF0 LDR V8, [X31], #0x30
	0x01DF5EF4 BR X3
	0x01DF5EF8 ADRP X22, 0x2301000
	0x01DF5EFC LDR X22, [X22 + 0xA78]
	0x01DF5F00 LDR X0, [X22]
	0x01DF5F04 LDR W8, [X0 + 0xE0]
	0x01DF5F08 CBNZ W8, 0x1DF5F10
	0x01DF5F0C BL 0x1C16DFC
	0x01DF5F10 MOV X0, X20
	0x01DF5F14 MOV X1, X31
	0x01DF5F18 BL 0x1E77B08
	0x01DF5F1C LDR X0, [X20 + 0x38]
	0x01DF5F20 CBZ X0, 0x1DF6040
	0x01DF5F24 MOV X1, X31
	0x01DF5F28 BL 0x1E9E538
	0x01DF5F2C CMP W0, 0x4
	0x01DF5F30 B.NE 0x1DF5F48
	0x01DF5F34 LDP X20, X19, [X31 + 0x20]
	0x01DF5F38 LDP X22, X21, [X31 + 0x10]
	0x01DF5F3C LDR X30, [X31 + 0x8]
	0x01DF5F40 LDR V8, [X31], #0x30
	0x01DF5F44 RET
	0x01DF5F48 LDR X0, [X20 + 0x40]
	0x01DF5F4C CBZ X0, 0x1DF6040
	0x01DF5F50 MOV X1, X31
	0x01DF5F54 BL 0x1E94078
	0x01DF5F58 TBNZ X0, 0x0, 0x1DF5F9C
	0x01DF5F5C LDR X0, [X22]
	0x01DF5F60 LDR X19, [X20 + 0x40]
	0x01DF5F64 LDR W8, [X0 + 0xE0]
	0x01DF5F68 CBNZ W8, 0x1DF5F70
	0x01DF5F6C BL 0x1C16DFC
	0x01DF5F70 ADRP X8, 0x2304000
	0x01DF5F74 LDR X8, [X8 + 0x3A8]
	0x01DF5F78 MOV X1, X19
	0x01DF5F7C LDP X20, X19, [X31 + 0x20]
	0x01DF5F80 LDP X22, X21, [X31 + 0x10]
	0x01DF5F84 LDR X0, [X8]
	0x01DF5F88 LDR X30, [X31 + 0x8]
	0x01DF5F8C MOVZ W2, 0x1
	0x01DF5F90 MOV X3, X31
	0x01DF5F94 LDR V8, [X31], #0x30
	0x01DF5F98 B 0x1E77B00
	0x01DF5F9C LDR X8, [X20 + 0x38]
	0x01DF5FA0 CBZ X8, 0x1DF6040
	0x01DF5FA4 MOV W21, W0
	0x01DF5FA8 LDR X0, [X8 + 0x50]
	0x01DF5FAC CBZ X0, 0x1DF6040
	0x01DF5FB0 MOV X1, X31
	0x01DF5FB4 BL 0x1EC4D00
	0x01DF5FB8 TBZ X0, 0x0, 0x1DF6034
	0x01DF5FBC LDR X8, [X20 + 0x38]
	0x01DF5FC0 CBZ X8, 0x1DF6040
	0x01DF5FC4 LDR X0, [X8 + 0x50]
	0x01DF5FC8 MOVZ W1, 0x10
	0x01DF5FCC MOV X2, X31
	0x01DF5FD0 BL 0x1ED9318
	0x01DF5FD4 LDR X8, [X20 + 0x40]
	0x01DF5FD8 CBZ X8, 0x1DF6040
	0x01DF5FDC LDR X8, [X8 + 0x20]
	0x01DF5FE0 MOV X22, X0
	0x01DF5FE4 CBZ X8, 0x1DF5FF0
	0x01DF5FE8 LDR W0, [X8]
	0x01DF5FEC B 0x1DF5FF4
	0x01DF5FF0 MOV X0, X31
	0x01DF5FF4 LDR W1, [X20 + 0x68]
	0x01DF5FF8 MOVZ W2, 0x1
	0x01DF5FFC MOV X3, X31
	0x01DF6000 BL 0x1E9C23C
	0x01DF6004 AND W8, W19, 0x1
	0x01DF6008 STUR X0, [X22 + 0x1C]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+104], X23
	004 Move [X31+112], X22
	005 Move [X31+120], X21
	006 Move [X31+128], X20
	007 Move [X31+136], X19
	008 Move X21, 0x25E4000
	009 Move W9, [X21+3316]
	010 Move X20, X0
	011 Move X19, X8
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {45}
	016 Move X0, 0x2305000
	017 Move X0, [X0+816]
	018 Call 0x1C17CF4
	019 Move X0, 0x22FF000
	020 Move X0, [X0+1880]
	021 Call 0x1C17CF4
	022 Move X0, 0x22FF000
	023 Move X0, [X0+1928]
	024 Call 0x1C17CF4
	025 Move X0, 0x2305000
	026 Move X0, [X0+824]
	027 Call 0x1C17CF4
	028 Move X0, 0x2305000
	029 Move X0, [X0+832]
	030 Call 0x1C17CF4
	031 Move X0, 0x2305000
	032 Move X0, [X0+840]
	033 Call 0x1C17CF4
	034 Move X0, 0x2305000
	035 Move X0, [X0+848]
	036 Call 0x1C17CF4
	037 Move X0, 0x2304000
	038 Move X0, [X0+3664]
	039 Call 0x1C17CF4
	040 Move X0, 0x2305000
	041 Move X0, [X0+856]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X21+3316], W8
	045 Move [X31+40], X31
	046 Move [X31+48], X31
	047 Move [X31+56], X31
	048 Move X23, 0x2305000
	049 Move W8, [X20+264]
	050 Move X23, [X23+840]
	051 Add X21, X20, 264
	052 Compare W8, 0
	053 JumpIfNotEqual {121}
	054 Move X8, 0x2305000
	055 Move X8, [X8+816]
	056 Move W22, [X20+256]
	057 Move X0, [X8]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Add X1, X31, 40
	063 Move W0, W22
	064 Move X2, X31
	065 Call GlobalNavZones.TryGetNavZone, X0, X1
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {87}
	070 Move X8, 0x2305000
	071 Move X8, [X8+824]
	072 NotImplemented "Instruction LDUR not yet implemented."
	073 Move X9, [X31+56]
	074 NotImplemented "Instruction MOVI not yet implemented."
	075 Move X2, [X8]
	076 Add X0, X31, 0
	077 Add X1, X31, 64
	078 Move [X31], V0
	079 Move [X31+8], V0
	080 Move [X31+4], V1
	081 Move [X31+80], X9
	082 Call Nullable`1<NavZone>..ctor, X0, X1
	083 Move V1, [X31]
	084 Move V0, [X31+16]
	085 Move [X21], V1
	086 Move [X21+8], V0
	087 Move X9, 0x22FF000
	088 Move W8, [X20+256]
	089 Move X9, [X9+1880]
	090 Add X1, X31, 0
	091 Move [X31], W8
	092 Move X0, [X9]
	093 Call 0x1C17E04
	094 Move X8, 0x2305000
	095 Move X8, [X8+856]
	096 Move X1, X0
	097 Move X2, X31
	098 Move X8, [X8]
	099 Move X0, X8
	100 Call String.Format, X0, X1
	101 Move X8, 0x22FF000
	102 Move X8, [X8+1928]
	103 Move X22, X0
	104 Move X8, [X8]
	105 Move W9, [X8+224]
	106 Compare W9, 0
	107 JumpIfNotEqual {110}
	108 Move X0, X8
	109 Call 0x1C17DFC
	110 Move X8, 0x2304000
	111 Move X9, 0x2305000
	112 Move X8, [X8+3664]
	113 Move X9, [X9+848]
	114 Move W4, 101
	115 Move X0, X22
	116 Move X2, [X8]
	117 Move X3, [X9]
	118 Move X1, X31
	119 Move X5, X31
	120 Call Log.Error, X0, X1, X2, X3, X4
	121 Move X1, [X23]
	122 Add X8, X31, 64
	123 Move X0, X21
	124 Call Nullable`1<NavZone>.get_Value, X0
	125 Move X8, [X31+80]
	126 Move V0, [X31+4]
	127 Add X9, X20, 296
	128 Move X0, X21
	129 Move [X31+16], X8
	130 Move [X31], V0
	131 Move [X9+16], X8
	132 Move [X9], V0
	133 Move X1, [X23]
	134 Add X8, X31, 64
	135 Call Nullable`1<NavZone>.get_Value, X0
	136 Move X8, [X31+80]
	137 Move V0, [X31+4]
	138 Move X22, [X31+112]
	139 Move X21, [X31+120]
	140 Move X30, [X31+96]
	141 Move X23, [X31+104]
	142 Move [X19+16], X8
	143 Move [X19], V0
	144 Move X20, [X31+128]
	145 Move X19, [X31+136]
	146 Add X31, X31, 144
	147 Return X0

Method: AnimalCompany.NetPlayer get_targetPlayer()

Disassembly:
	0x01DF600C STR W8, [X22 + 0x24]
	0x01DF6010 STR S8, [X22 + 0x28]

ISIL:
	001 Move X0, [X0+352]
	002 Return X0

Method: UnityEngine.Vector3 get__targetPosition()

Disassembly:
	0x01DEB5A0 MOVZ W8, 0x1
	0x01DEB5A4 STRB W8, [X21 + 0xCC3]
	0x01DEB5A8 LDR X20, [X20 + 0x50]
	0x01DEB5AC CBZ X20, 0x1DEB5E8
	0x01DEB5B0 ADRP X21, 0x230D000
	0x01DEB5B4 LDR X21, [X21 + 0xEF8]
	0x01DEB5B8 MOV X0, X31
	0x01DEB5BC BL 0x1D79818
	0x01DEB5C0 MOV X3, X0
	0x01DEB5C4 LDR X4, [X21]
	0x01DEB5C8 STP X31, X31, [X19 + 0x8]
	0x01DEB5CC STR X31, [X19]
	0x01DEB5D0 MOV X0, X19
	0x01DEB5D4 MOV X1, X20
	0x01DEB5D8 LDP X20, X19, [X31 + 0x10]
	0x01DEB5DC MOVZ W2, 0xA
	0x01DEB5E0 LDP X30, X21, [X31], #0x20
	0x01DEB5E4 B 0x240FFE8
	0x01DEB5E8 ADRP X0, 0x2308000
	0x01DEB5EC LDR X0, [X0 + 0x5B0]
	0x01DEB5F0 BL 0x1C16D08
	0x01DEB5F4 BL 0x1C16F10
	0x01DEB5F8 MOV X19, X0
	0x01DEB5FC ADRP X0, 0x230D000
	0x01DEB600 LDR X0, [X0 + 0xF00]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move S0, [X8+48]
	007 Move S1, [X8+52]
	008 Move V2, [X8+56]
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2309000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x230E000
	018 Move X0, [X0+3744]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x230E000
	025 Move X0, [X0+3792]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set__targetPosition(UnityEngine.Vector3 value)

Disassembly:
	0x01DEAA40 LDR X0, [X19 + 0xD0]
	0x01DEAA44 CBZ X0, 0x1DEAE44
	0x01DEAA48 MOV X1, X31
	0x01DEAA4C MOV V9.16B, V0.16B
	0x01DEAA50 MOV V10.16B, V1.16B
	0x01DEAA54 MOV V11.16B, V2.16B
	0x01DEAA58 MOV V12.16B, V3.16B
	0x01DEAA5C BL 0x3C3FA04
	0x01DEAA60 MOV V4.16B, V0.16B
	0x01DEAA64 MOV V5.16B, V1.16B
	0x01DEAA68 MOV V6.16B, V2.16B
	0x01DEAA6C MOV V0.16B, V9.16B
	0x01DEAA70 MOV V1.16B, V10.16B
	0x01DEAA74 MOV V2.16B, V11.16B
	0x01DEAA78 MOV V3.16B, V12.16B
	0x01DEAA7C MOV X0, X31
	0x01DEAA80 BL 0x3C2A9FC
	0x01DEAA84 LDRB W8, [X20 + 0x786]
	0x01DEAA88 MOV V10.16B, V0.16B
	0x01DEAA8C MOV V11.16B, V1.16B
	0x01DEAA90 MOV V13.16B, V2.16B
	0x01DEAA94 CBNZ W8, 0x1DEAAAC
	0x01DEAA98 ADRP X0, 0x2309000
	0x01DEAA9C LDR X0, [X0 + 0x5A0]
	0x01DEAAA0 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move [X8+48], S0
	007 Move [X8+56], S1
	008 Move [X8+56], S2
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 
	012 Move X0, 0x230A000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x230F000
	018 Move X0, [X0+3744]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x230F000
	025 Move X0, [X0+3752]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Collections.Generic.Dictionary`2<System.UInt32, AnimalCompany.NetPlayer> get__spawnedPlayers()

Disassembly:
	0x01DF6014 CBZ X22, 0x1DF6040
	0x01DF6018 MOVZ W8, 0x80
	0x01DF601C STR W8, [X22 + 0xC]
	0x01DF6020 LDR X0, [X20 + 0x38]
	0x01DF6024 CBZ X0, 0x1DF6040
	0x01DF6028 MOV X1, X22
	0x01DF602C MOV X2, X31
	0x01DF6030 BL 0x1EA1E24
	0x01DF6034 ANDS W31, W21, 0x7
	0x01DF6038 B.NE 0x1DF5EBC
	0x01DF603C B 0x1DF5F34
	0x01DF6040 BL 0x1C16F20
	0x01DF6044 SUB X31, X31, 0x50
	0x01DF6048 STR X30, [X31 + 0x20]
	0x01DF604C STP X22, X21, [X31 + 0x30]
	0x01DF6050 STP X20, X19, [X31 + 0x40]
	0x01DF6054 ADRP X22, 0x25E2000
	0x01DF6058 ADRP X21, 0x22FD000
	0x01DF605C LDRB W8, [X22 + 0xD00]
	0x01DF6060 LDR X21, [X21 + 0x598]
	0x01DF6064 MOV X19, X1
	0x01DF6068 MOV X20, X0
	0x01DF606C TBNZ X8, 0x0, 0x1DF6084
	0x01DF6070 ADRP X0, 0x22FD000
	0x01DF6074 LDR X0, [X0 + 0x598]
	0x01DF6078 BL 0x1C16CF4
	0x01DF607C MOVZ W8, 0x1
	0x01DF6080 STRB W8, [X22 + 0xD00]
	0x01DF6084 ADD X8, X31, 0x8
	0x01DF6088 MOV X0, X20
	0x01DF608C STP X31, X31, [X31 + 0x8]
	0x01DF6090 STR X31, [X31 + 0x18]
	0x01DF6094 BL 0x1DF4E08
	0x01DF6098 ADD X0, X31, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25E3000
	005 Move X19, 0x2300000
	006 Move W8, [X20+3317]
	007 Move X19, [X19+2464]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2300000
	013 Move X0, [X0+2464]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3317], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, 0x25E3000
	023 Move W8, [X20+2922]
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0x2300000
	027 Move X0, [X0+2464]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+2922], W8
	031 Move X0, [X19]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X19]
	037 Move X8, [X0+184]
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X0, [X8]
	041 Move X30, [X31+32]
	042 Return X0

Method: System.Single get_deltaTime()

Disassembly:
	0x01DEB4B8 TBZ X0, 0x0, 0x1DEB4E0
	0x01DEB4BC LDR X0, [X19 + 0xC0]
	0x01DEB4C0 CBZ X0, 0x1DEB4FC
	0x01DEB4C4 LDR X20, [X19 + 0x40]
	0x01DEB4C8 MOV X1, X31
	0x01DEB4CC BL 0x3C3F58C
	0x01DEB4D0 CBZ X20, 0x1DEB4FC

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+56]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call NetworkRunner.get_DeltaTime, X0
	008 Return V0
	009 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerable`1<AnimalCompany.MobController> get_spawnedMobs()

Disassembly:
	0x01DF609C MOV X1, X31
	0x01DF60A0 BL 0x1E16634
	0x01DF60A4 STR X0, [X19]
	0x01DF60A8 MOV X20, X0
	0x01DF60AC LDR X0, [X21]
	0x01DF60B0 LDR W8, [X0 + 0xE0]
	0x01DF60B4 CBNZ W8, 0x1DF60BC
	0x01DF60B8 BL 0x1C16DFC
	0x01DF60BC MOV X0, X20
	0x01DF60C0 MOV X1, X31
	0x01DF60C4 MOV X2, X31
	0x01DF60C8 BL 0x3C3883C
	0x01DF60CC LDP X20, X19, [X31 + 0x40]
	0x01DF60D0 LDP X22, X21, [X31 + 0x30]
	0x01DF60D4 LDR X30, [X31 + 0x20]
	0x01DF60D8 ORN W8, W31, W0, 0x0
	0x01DF60DC AND W0, W8, 0x1
	0x01DF60E0 ADD X31, X31, 0x50
	0x01DF60E4 RET
	0x01DF60E8 SUB X31, X31, 0x40
	0x01DF60EC STR X30, [X31 + 0x20]
	0x01DF60F0 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25E3000
	005 Move X19, 0x2302000
	006 Move W8, [X20+3318]
	007 Move X19, [X19+2144]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2302000
	013 Move X0, [X0+2144]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3318], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void GenGraphSetup(System.Int32 navZone)

Disassembly:
	0x01DF60F4 ADRP X20, 0x25E2000
	0x01DF60F8 LDRB W8, [X20 + 0xD01]

ISIL:
	001 Move [X0+256], W1
	002 Return 

Method: System.Void OnUpdateFinish(System.String phase)

Disassembly:
	0x01DF60FC MOV X19, X0
	0x01DF6100 TBNZ X8, 0x0, 0x1DF6124
	0x01DF6104 ADRP X0, 0x2303000
	0x01DF6108 LDR X0, [X0 + 0x3B0]
	0x01DF610C BL 0x1C16CF4
	0x01DF6110 ADRP X0, 0x2303000
	0x01DF6114 LDR X0, [X0 + 0x3B8]
	0x01DF6118 BL 0x1C16CF4
	0x01DF611C MOVZ W8, 0x1
	0x01DF6120 STRB W8, [X20 + 0xD01]
	0x01DF6124 LDR X8, [X19 + 0x140]
	0x01DF6128 CBZ X8, 0x1DF61B4
	0x01DF612C LDP W2, W9, [X8 + 0x18]
	0x01DF6130 ADD W9, W9, 0x1
	0x01DF6134 CMP W2, 0x1
	0x01DF6138 STP W31, W9, [X8 + 0x18]
	0x01DF613C B.LT 0x1DF6150
	0x01DF6140 LDR X0, [X8 + 0x10]
	0x01DF6144 MOV W1, W31
	0x01DF6148 MOV X3, X31
	0x01DF614C BL 0x339FA34
	0x01DF6150 LDR X20, [X19 + 0x148]
	0x01DF6154 CBZ X20, 0x1DF61B4
	0x01DF6158 LDP W2, W8, [X20 + 0x18]
	0x01DF615C ADD W8, W8, 0x1
	0x01DF6160 CMP W2, 0x1
	0x01DF6164 STP W31, W8, [X20 + 0x18]
	0x01DF6168 B.LT 0x1DF6180
	0x01DF616C LDR X0, [X20 + 0x10]
	0x01DF6170 MOV W1, W31
	0x01DF6174 MOV X3, X31
	0x01DF6178 BL 0x339FA34
	0x01DF617C LDR X20, [X19 + 0x148]
	0x01DF6180 ADD X8, X31, 0x8
	0x01DF6184 MOV X0, X19
	0x01DF6188 BL 0x1DF4E08
	0x01DF618C CBZ X20, 0x1DF61B4
	0x01DF6190 ADRP X8, 0x2303000
	0x01DF6194 LDR X8, [X8 + 0x3B0]
	0x01DF6198 LDR X1, [X31 + 0x10]
	0x01DF619C MOV X0, X20
	0x01DF61A0 LDP X20, X19, [X31 + 0x30]
	0x01DF61A4 LDR X2, [X8]
	0x01DF61A8 LDR X30, [X31 + 0x20]
	0x01DF61AC ADD X31, X31, 0x40
	0x01DF61B0 B 0x301C194
	0x01DF61B4 BL 0x1C16F20
	0x01DF61B8 SUB X31, X31, 0x70
	0x01DF61BC STP D11, D10, [X31 + 0x10]
	0x01DF61C0 STP D9, D8, [X31 + 0x20]
	0x01DF61C4 STP X30, X25, [X31 + 0x30]
	0x01DF61C8 STP X24, X23, [X31 + 0x40]
	0x01DF61CC STP X22, X21, [X31 + 0x50]
	0x01DF61D0 STP X20, X19, [X31 + 0x60]
	0x01DF61D4 ADRP X21, 0x25E2000
	0x01DF61D8 LDRB W8, [X21 + 0xD02]
	0x01DF61DC MOV X19, X1
	0x01DF61E0 MOV V8.16B, V3.16B
	0x01DF61E4 MOV V9.16B, V2.16B
	0x01DF61E8 MOV V10.16B, V1.16B
	0x01DF61EC MOV V11.16B, V0.16B
	0x01DF61F0 MOV X20, X0
	0x01DF61F4 TBNZ X8, 0x0, 0x1DF626C
	0x01DF61F8 ADRP X0, 0x2303000
	0x01DF61FC LDR X0, [X0 + 0x3C0]
	0x01DF6200 BL 0x1C16CF4
	0x01DF6204 ADRP X0, 0x22FD000
	0x01DF6208 LDR X0, [X0 + 0x5D8]
	0x01DF620C BL 0x1C16CF4
	0x01DF6210 ADRP X0, 0x2303000
	0x01DF6214 LDR X0, [X0 + 0x3C8]
	0x01DF6218 BL 0x1C16CF4
	0x01DF621C ADRP X0, 0x2303000
	0x01DF6220 LDR X0, [X0 + 0x3B8]
	0x01DF6224 BL 0x1C16CF4
	0x01DF6228 ADRP X0, 0x2303000
	0x01DF622C LDR X0, [X0 + 0x3D0]
	0x01DF6230 BL 0x1C16CF4
	0x01DF6234 ADRP X0, 0x2303000
	0x01DF6238 LDR X0, [X0 + 0x3D8]
	0x01DF623C BL 0x1C16CF4
	0x01DF6240 ADRP X0, 0x2303000
	0x01DF6244 LDR X0, [X0 + 0x3E0]
	0x01DF6248 BL 0x1C16CF4
	0x01DF624C ADRP X0, 0x22FD000
	0x01DF6250 LDR X0, [X0 + 0x598]
	0x01DF6254 BL 0x1C16CF4
	0x01DF6258 ADRP X0, 0x22FD000
	0x01DF625C LDR X0, [X0 + 0x5F8]
	0x01DF6260 BL 0x1C16CF4
	0x01DF6264 MOVZ W8, 0x1
	0x01DF6268 STRB W8, [X21 + 0xD02]
	0x01DF626C STR X31, [X31 + 0x8]
	0x01DF6270 STR X31, [X19]
	0x01DF6274 LDR X8, [X20 + 0x188]
	0x01DF6278 CBZ X8, 0x1DF6478
	0x01DF627C LDP W2, W9, [X8 + 0x18]
	0x01DF6280 ADRP X21, 0x22FD000
	0x01DF6284 LDR X21, [X21 + 0x5D8]
	0x01DF6288 ADD W9, W9, 0x1
	0x01DF628C CMP W2, 0x1
	0x01DF6290 STP W31, W9, [X8 + 0x18]
	0x01DF6294 B.LT 0x1DF62A8
	0x01DF6298 LDR X0, [X8 + 0x10]
	0x01DF629C MOV W1, W31
	0x01DF62A0 MOV X3, X31
	0x01DF62A4 BL 0x339FA34
	0x01DF62A8 LDR X0, [X21]
	0x01DF62AC ADRP X22, 0x22FD000
	0x01DF62B0 LDR W8, [X0 + 0xE0]
	0x01DF62B4 LDR X22, [X22 + 0x5F8]
	0x01DF62B8 CBNZ W8, 0x1DF62C4
	0x01DF62BC BL 0x1C16DFC
	0x01DF62C0 LDR X0, [X21]
	0x01DF62C4 LDR X8, [X0 + 0xB8]
	0x01DF62C8 MOV X1, X31
	0x01DF62CC LDR W0, [X8 + 0x2C]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25E3000
	007 Move W8, [X21+3319]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {37}
	014 Move X0, 0x22FE000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move X0, 0x22FE000
	018 Move X0, [X0+2760]
	019 Call 0x1C17CF4
	020 Move X0, 0x2304000
	021 Move X0, [X0+864]
	022 Call 0x1C17CF4
	023 Move X0, 0x2304000
	024 Move X0, [X0+872]
	025 Call 0x1C17CF4
	026 Move X0, 0x2304000
	027 Move X0, [X0+880]
	028 Call 0x1C17CF4
	029 Move X0, 0x2304000
	030 Move X0, [X0+888]
	031 Call 0x1C17CF4
	032 Move X0, 0x2304000
	033 Move X0, [X0+896]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X21+3319], W8
	037 Move X0, X31
	038 Call GameManager.get_isDebug
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {116}
	043 Move X0, X31
	044 Call Time.get_realtimeSinceStartup
	045 Move V1, [X20+400]
	046 Move X8, -19968000
	047 Move V2, [X8+860]
	048 Move W8, 0x447A0000
	049 Subtract S0, S0, S1
	050 Move S1, W8
	051 Multiply S0, S0, S1
	052 NotImplemented "Instruction FCMP not yet implemented."
	053 Move [X31+12], S0
	054 Move X8, 0x22FE000
	055 Move X8, [X8+2760]
	056 Move W1, 7
	057 Move X0, [X8]
	058 Call 0x1C17D6C
	059 Compare X0, 0
	060 JumpIfEqual {123}
	061 Move W8, [X0+24]
	062 Move X21, X0
	063 Compare W8, 0
	064 JumpIfEqual {122}
	065 Move X8, 0x2304000
	066 Move X8, [X8+880]
	067 Move X0, X20
	068 Move X1, X31
	069 Move X8, [X8]
	070 Move [X21+32], X8
	071 Call Object.get_name, X0
	072 Move W8, [X21+24]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move [X21+40], X0
	076 Move X9, 0x2304000
	077 Move X9, [X9+896]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X9, [X9]
	080 Move [X21+48], X9
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move [X21+56], X19
	083 Move X8, 0x2304000
	084 Move X8, [X8+872]
	085 Add X0, X31, 12
	086 Move X2, X31
	087 Move X8, [X8]
	088 Move [X21+64], X8
	089 Move X8, 0x2304000
	090 Move X8, [X8+864]
	091 Move X1, [X8]
	092 Call Single.ToString, X0, X1
	093 Move W8, [X21+24]
	094 NotImplemented "Instruction CMP not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move [X21+72], X0
	097 Move X8, 0x2304000
	098 Move X8, [X8+888]
	099 Move X0, X21
	100 Move X1, X31
	101 Move X8, [X8]
	102 Move [X21+80], X8
	103 Call String.Concat, X0
	104 Move X8, 0x22FE000
	105 Move X8, [X8+2600]
	106 Move X19, X0
	107 Move X8, [X8]
	108 Move W9, [X8+224]
	109 Compare W9, 0
	110 JumpIfNotEqual {113}
	111 Move X0, X8
	112 Call 0x1C17DFC
	113 Move X0, X19
	114 Move X1, X31
	115 Call Debug.LogWarning, X0
	116 Move X20, [X31+32]
	117 Move X19, [X31+40]
	118 Move X30, [X31+16]
	119 Move X21, [X31+24]
	120 Add X31, X31, 48
	121 Return 
	122 Call 0x1C17F28
	123 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x01DF62D0 BL 0x3C35CB8
	0x01DF62D4 LDR X8, [X22]
	0x01DF62D8 MOV W21, W0
	0x01DF62DC LDR W9, [X8 + 0xE0]
	0x01DF62E0 CBNZ W9, 0x1DF62EC
	0x01DF62E4 MOV X0, X8
	0x01DF62E8 BL 0x1C16DFC
	0x01DF62EC MOV V0.16B, V11.16B
	0x01DF62F0 MOV V1.16B, V10.16B
	0x01DF62F4 MOV V2.16B, V9.16B
	0x01DF62F8 MOV V3.16B, V8.16B
	0x01DF62FC MOV W0, W21
	0x01DF6300 MOV X1, X31
	0x01DF6304 BL 0x3C8D090
	0x01DF6308 CBZ X0, 0x1DF6478
	0x01DF630C LDR W8, [X0 + 0x18]
	0x01DF6310 MOV X21, X0
	0x01DF6314 CMP W8, 0x1
	0x01DF6318 B.LT 0x1DF63DC
	0x01DF631C ADRP X23, 0x2303000
	0x01DF6320 ADRP X24, 0x2303000
	0x01DF6324 ADRP X25, 0x2303000
	0x01DF6328 LDR X23, [X23 + 0x3C0]
	0x01DF632C LDR X24, [X24 + 0x3D0]
	0x01DF6330 LDR X25, [X25 + 0x3C8]
	0x01DF6334 MOV W22, W31
	0x01DF6338 CMP W22, W8
	0x01DF633C B.CS 0x1DF647C
	0x01DF6340 ADD X8, X21, W22, 0x3, SXTW
	0x01DF6344 LDR X0, [X8 + 0x20]
	0x01DF6348 CBZ X0, 0x1DF6478
	0x01DF634C LDR X2, [X23]
	0x01DF6350 ADD X1, X31, 0x8
	0x01DF6354 BL 0x21A4990
	0x01DF6358 TBZ X0, 0x0, 0x1DF63CC
	0x01DF635C LDR X0, [X20 + 0x148]
	0x01DF6360 CBZ X0, 0x1DF6478
	0x01DF6364 LDR X1, [X31 + 0x8]
	0x01DF6368 LDR X2, [X24]
	0x01DF636C BL 0x301C318
	0x01DF6370 TBZ X0, 0x0, 0x1DF63CC
	0x01DF6374 LDR X0, [X20 + 0x188]
	0x01DF6378 CBZ X0, 0x1DF6478
	0x01DF637C LDR W10, [X0 + 0x1C]
	0x01DF6380 LDR X1, [X31 + 0x8]
	0x01DF6384 LDR X8, [X0 + 0x10]
	0x01DF6388 LDR X9, [X25]
	0x01DF638C ADD W10, W10, 0x1
	0x01DF6390 STR W10, [X0 + 0x1C]
	0x01DF6394 CBZ X8, 0x1DF6478
	0x01DF6398 LDRSW X10, [X0 + 0x18]
	0x01DF639C LDR W11, [X8 + 0x18]
	0x01DF63A0 CMP W10, W11
	0x01DF63A4 B.CS 0x1DF63BC
	0x01DF63A8 ADD W9, W10, 0x1
	0x01DF63AC ADD X8, X8, X10, 0x3, LSL
	0x01DF63B0 STR W9, [X0 + 0x18]
	0x01DF63B4 STR X1, [X8 + 0x20]
	0x01DF63B8 B 0x1DF63CC
	0x01DF63BC LDR X8, [X9 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x25E3000
	008 Move X23, 0x2301000
	009 Move X22, 0x2301000
	010 Move W8, [X20+3320]
	011 Move X23, [X23+3368]
	012 Move X22, [X22+3376]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x2301000
	019 Move X0, [X0+3376]
	020 Call 0x1C17CF4
	021 Move X0, 0x2301000
	022 Move X0, [X0+3368]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3320], W8
	026 Move X8, [X23]
	027 Move X0, [X22]
	028 Move X8, [X8+184]
	029 Move X20, [X8+40]
	030 Call 0x1C17F10
	031 Compare X19, 0
	032 JumpIfEqual {73}
	033 Move X8, [X19]
	034 Move X1, X19
	035 Move X3, X31
	036 Move X21, X0
	037 Move X2, [X8+656]
	038 Call Action`1<PlayerRef>..ctor, X0, X1, X2
	039 Move X0, X20
	040 Move X1, X21
	041 Move X2, X31
	042 Call Delegate.Combine, X0, X1
	043 Compare X0, 0
	044 JumpIfEqual {63}
	045 Move X20, [X22]
	046 Move X19, X0
	047 Move X1, X20
	048 Call 0x1C17E00
	049 Compare X0, 0
	050 JumpIfEqual {60}
	051 Move X8, [X23]
	052 Move X8, [X8+184]
	053 Move [X8+40], X0
	054 Move X20, [X22]
	055 Move X0, X19
	056 Move X1, X20
	057 Call 0x1C17E00
	058 Compare X0, 0
	059 JumpIfNotEqual {66}
	060 Move X0, X19
	061 Move X1, X20
	062 Call 0x1C181E0
	063 Move X8, [X23]
	064 Move X8, [X8+184]
	065 Move [X8+40], X31
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Move X23, [X31+56]
	072 Return 
	073 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x01DF63C0 LDR X8, [X8 + 0xC0]
	0x01DF63C4 LDR X2, [X8 + 0x70]
	0x01DF63C8 BL 0x301BF90
	0x01DF63CC LDR W8, [X21 + 0x18]
	0x01DF63D0 ADD W22, W22, 0x1
	0x01DF63D4 CMP W22, W8
	0x01DF63D8 B.LT 0x1DF6338
	0x01DF63DC LDR X8, [X20 + 0x188]
	0x01DF63E0 CBZ X8, 0x1DF6478
	0x01DF63E4 LDR W1, [X8 + 0x18]
	0x01DF63E8 CMP W1, 0x0
	0x01DF63EC B.LE 0x1DF6428
	0x01DF63F0 MOV W0, W31
	0x01DF63F4 MOV X2, X31
	0x01DF63F8 BL 0x3C309A8
	0x01DF63FC LDR X8, [X20 + 0x188]
	0x01DF6400 CBZ X8, 0x1DF6478
	0x01DF6404 ADRP X9, 0x2303000
	0x01DF6408 LDR X9, [X9 + 0x3E0]
	0x01DF640C MOV W1, W0
	0x01DF6410 MOV X0, X8
	0x01DF6414 LDR X2, [X9]
	0x01DF6418 BL 0x301BCCC
	0x01DF641C MOV X20, X0
	0x01DF6420 STR X0, [X19]
	0x01DF6424 B 0x1DF642C
	0x01DF6428 LDR X20, [X19]
	0x01DF642C ADRP X8, 0x22FD000
	0x01DF6430 LDR X8, [X8 + 0x598]
	0x01DF6434 LDR X0, [X8]
	0x01DF6438 LDR W8, [X0 + 0xE0]
	0x01DF643C CBNZ W8, 0x1DF6444
	0x01DF6440 BL 0x1C16DFC
	0x01DF6444 MOV X0, X20
	0x01DF6448 MOV X1, X31
	0x01DF644C MOV X2, X31
	0x01DF6450 BL 0x3C354F8
	0x01DF6454 LDP X20, X19, [X31 + 0x60]
	0x01DF6458 LDP X22, X21, [X31 + 0x50]
	0x01DF645C LDP X24, X23, [X31 + 0x40]
	0x01DF6460 LDP X30, X25, [X31 + 0x30]
	0x01DF6464 LDP D9, D8, [X31 + 0x20]
	0x01DF6468 LDP D11, D10, [X31 + 0x10]
	0x01DF646C AND W0, W0, 0x1
	0x01DF6470 ADD X31, X31, 0x70
	0x01DF6474 RET
	0x01DF6478 BL 0x1C16F20
	0x01DF647C BL 0x1C16F28
	0x01DF6480 SUB X31, X31, 0x80
	0x01DF6484 STP D11, D10, [X31 + 0x30]
	0x01DF6488 STP D9, D8, [X31 + 0x40]
	0x01DF648C STP X30, X23, [X31 + 0x50]
	0x01DF6490 STP X22, X21, [X31 + 0x60]
	0x01DF6494 STP X20, X19, [X31 + 0x70]
	0x01DF6498 ADRP X20, 0x25E2000
	0x01DF649C LDRB W8, [X20 + 0xD03]
	0x01DF64A0 MOV V8.16B, V2.16B
	0x01DF64A4 MOV V9.16B, V1.16B
	0x01DF64A8 MOV V10.16B, V0.16B
	0x01DF64AC MOV X19, X0
	0x01DF64B0 TBNZ X8, 0x0, 0x1DF64F8
	0x01DF64B4 ADRP X0, 0x2303000
	0x01DF64B8 LDR X0, [X0 + 0x3E8]
	0x01DF64BC BL 0x1C16CF4
	0x01DF64C0 ADRP X0, 0x2303000
	0x01DF64C4 LDR X0, [X0 + 0x3F0]
	0x01DF64C8 BL 0x1C16CF4
	0x01DF64CC ADRP X0, 0x2303000
	0x01DF64D0 LDR X0, [X0 + 0x3F8]
	0x01DF64D4 BL 0x1C16CF4
	0x01DF64D8 ADRP X0, 0x2303000
	0x01DF64DC LDR X0, [X0 + 0x400]
	0x01DF64E0 BL 0x1C16CF4
	0x01DF64E4 ADRP X0, 0x22FD000
	0x01DF64E8 LDR X0, [X0 + 0x598]
	0x01DF64EC BL 0x1C16CF4
	0x01DF64F0 MOVZ W8, 0x1
	0x01DF64F4 STRB W8, [X20 + 0xD03]
	0x01DF64F8 STP X31, X31, [X31 + 0x18]
	0x01DF64FC STR X31, [X31 + 0x28]
	0x01DF6500 STP X31, X31, [X31]
	0x01DF6504 STR X31, [X31 + 0x10]
	0x01DF6508 LDR X0, [X19 + 0x148]
	0x01DF650C CBZ X0, 0x1DF6614
	0x01DF6510 ADRP X8, 0x2303000
	0x01DF6514 LDR X8, [X8 + 0x400]
	0x01DF6518 ADRP X22, 0x2303000
	0x01DF651C ADRP X23, 0x22FD000
	0x01DF6520 ADRP X21, 0x2303000
	0x01DF6524 LDR X1, [X8]
	0x01DF6528 LDR X22, [X22 + 0x3F0]
	0x01DF652C LDR X23, [X23 + 0x598]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x25E3000
	008 Move X21, 0x2301000
	009 Move W8, [X20+3321]
	010 Move X21, [X21+2680]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x2301000
	017 Move X0, [X0+3376]
	018 Call 0x1C17CF4
	019 Move X0, 0x2304000
	020 Move X0, [X0+904]
	021 Call 0x1C17CF4
	022 Move X0, 0x2302000
	023 Move X0, [X0+2144]
	024 Call 0x1C17CF4
	025 Move X0, 0x2301000
	026 Move X0, [X0+2680]
	027 Call 0x1C17CF4
	028 Move X0, 0x2301000
	029 Move X0, [X0+3368]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+3321], W8
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Compare X19, 0
	039 JumpIfEqual {109}
	040 Move W8, [X19+48]
	041 Move X22, 0x2301000
	042 Move X22, [X22+3368]
	043 Move X23, 0x2301000
	044 Or W8, W8, 8
	045 Move [X19+48], W8
	046 Move X8, [X22]
	047 Move X8, [X8+184]
	048 Move X23, [X23+3376]
	049 Move X20, [X8+40]
	050 Move X0, [X23]
	051 Call 0x1C17F10
	052 Move X8, [X19]
	053 Move X1, X19
	054 Move X3, X31
	055 Move X21, X0
	056 Move X2, [X8+656]
	057 Call Action`1<PlayerRef>..ctor, X0, X1, X2
	058 Move X0, X20
	059 Move X1, X21
	060 Move X2, X31
	061 Call Delegate.Remove, X0, X1
	062 Compare X0, 0
	063 JumpIfEqual {82}
	064 Move X21, [X23]
	065 Move X20, X0
	066 Move X1, X21
	067 Call 0x1C17E00
	068 Compare X0, 0
	069 JumpIfEqual {79}
	070 Move X8, [X22]
	071 Move X8, [X8+184]
	072 Move [X8+40], X0
	073 Move X21, [X23]
	074 Move X0, X20
	075 Move X1, X21
	076 Call 0x1C17E00
	077 Compare X0, 0
	078 JumpIfNotEqual {85}
	079 Move X0, X20
	080 Move X1, X21
	081 Call 0x1C181E0
	082 Move X8, [X22]
	083 Move X8, [X8+184]
	084 Move [X8+40], X31
	085 Move X20, 0x2302000
	086 Move X20, [X20+2144]
	087 Move X0, [X20]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {93}
	091 Call 0x1C17DFC
	092 Move X0, [X20]
	093 Move X8, [X0+184]
	094 Move X0, [X8+8]
	095 Compare X0, 0
	096 JumpIfEqual {109}
	097 Move X8, 0x2304000
	098 Move X8, [X8+904]
	099 Move X1, X19
	100 Move X20, [X31+32]
	101 Move X19, [X31+40]
	102 Move X22, [X31+16]
	103 Move X21, [X31+24]
	104 Move X2, [X8]
	105 Move X30, [X31+48]
	106 Move X23, [X31+56]
	107 Call HashSet`1<Object>.Remove, X0, X1
	108 Return 
	109 Call 0x1C17F20

Method: System.Void HandlePlayerLeft(Fusion.PlayerRef player)

Disassembly:
	0x01DF6530 LDR X21, [X21 + 0x3E8]
	0x01DF6534 ADD X8, X31, 0x18
	0x01DF6538 BL 0x301CB58
	0x01DF653C MOVN W9, 0x80800000
	0x01DF6540 MOV X8, X31
	0x01DF6544 FMOV S0, W9
	0x01DF6548 MOV X20, X8
	0x01DF654C MOV V11.16B, V0.16B
	0x01DF6550 LDR X1, [X22]
	0x01DF6554 ADD X0, X31, 0x18
	0x01DF6558 BL 0x2BC4350
	0x01DF655C TBZ X0, 0x0, 0x1DF659C
	0x01DF6560 LDR X8, [X31 + 0x28]
	0x01DF6564 CBZ X8, 0x1DF6610
	0x01DF6568 LDP S0, S1, [X8 + 0x28]
	0x01DF656C LDR V2, [X8 + 0x30]
	0x01DF6570 FSUB S0, S10, S0
	0x01DF6574 FSUB S1, S9, S1
	0x01DF6578 FSUB S2, S8, S2
	0x01DF657C FMUL S0, S0, S0
	0x01DF6580 FMUL S1, S1, S1
	0x01DF6584 FADD S0, S0, S1
	0x01DF6588 FMUL S1, S2, S2
	0x01DF658C FADD S0, S0, S1
	0x01DF6590 FCMP S0, S11
	0x01DF6594 B.PL 0x1DF6550
	0x01DF6598 B 0x1DF6548
	0x01DF659C LDR X1, [X21]
	0x01DF65A0 ADD X0, X31, 0x18
	0x01DF65A4 BL 0x2BC434C
	0x01DF65A8 LDR X0, [X23]
	0x01DF65AC LDR W8, [X0 + 0xE0]
	0x01DF65B0 CBNZ W8, 0x1DF65B8
	0x01DF65B4 BL 0x1C16DFC
	0x01DF65B8 MOV X0, X20
	0x01DF65BC MOV X1, X31
	0x01DF65C0 MOV X2, X31
	0x01DF65C4 BL 0x3C3883C
	0x01DF65C8 TBZ X0, 0x0, 0x1DF65F0
	0x01DF65CC ADD X8, X31, 0x0
	0x01DF65D0 MOV X0, X19
	0x01DF65D4 BL 0x1DF4E08
	0x01DF65D8 ADD X0, X31, 0x0
	0x01DF65DC MOV X1, X31
	0x01DF65E0 BL 0x1E16634
	0x01DF65E4 MOV X20, X0
	0x01DF65E8 MOV X0, X19
	0x01DF65EC BL 0x1DF60E8
	0x01DF65F0 MOV X0, X20
	0x01DF65F4 LDP X20, X19, [X31 + 0x70]
	0x01DF65F8 LDP X22, X21, [X31 + 0x60]
	0x01DF65FC LDP X30, X23, [X31 + 0x50]
	0x01DF6600 LDP D9, D8, [X31 + 0x40]
	0x01DF6604 LDP D11, D10, [X31 + 0x30]
	0x01DF6608 ADD X31, X31, 0x80
	0x01DF660C RET
	0x01DF6610 BL 0x1C16F20
	0x01DF6614 BL 0x1C16F20
	0x01DF6618 B 0x1DF661C
	0x01DF661C MOV X22, X0
	0x01DF6620 CMP W1, 0x1
	0x01DF6624 B.NE 0x1DF6658
	0x01DF6628 MOV X0, X22
	0x01DF662C BL 0x3EB1AD0
	0x01DF6630 LDR X21, [X0]
	0x01DF6634 BL 0x3EB1AE0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25E3000
	007 Move [X31+8], W1
	008 Move X20, 0x22FE000
	009 Move W8, [X21+3322]
	010 Move X20, [X20+1432]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x22FE000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move X0, 0x2301000
	020 Move X0, [X0+3648]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3322], W8
	024 Move X0, [X20]
	025 Move X20, [X19+56]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Inequality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {82}
	038 Move X0, [X19+56]
	039 Compare X0, 0
	040 JumpIfEqual {88}
	041 Move X1, [X19+64]
	042 Move X2, X31
	043 Call NetworkRunner.Exists, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {82}
	048 Move X0, [X19+64]
	049 Compare X0, 0
	050 JumpIfEqual {82}
	051 Move W8, [X0+96]
	052 Move TEMP, X8
	053 And TEMP, TEMP, 2
	054 Compare TEMP, 2
	055 JumpIfEqual {82}
	056 Move X1, X31
	057 Call NetworkObject.get_HasStateAuthority, X0
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {82}
	062 Move X8, 0x2301000
	063 Move X8, [X8+3648]
	064 Move X0, [X8]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Add X0, X31, 8
	070 Move X1, X31
	071 Call PlayerRef.get_PlayerId, X0
	072 Move W20, W0
	073 Move X0, X19
	074 Call MobController.get_targetPlayerID, X0
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X8, [X19]
	077 Move X0, X19
	078 Move X1, X31
	079 Move X9, [X8+952]
	080 Move X2, [X8+960]
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X30, [X31+16]
	085 Move X21, [X31+24]
	086 Add X31, X31, 48
	087 Return 
	088 Call 0x1C17F20

Method: System.Void Spawned()

Disassembly:
	0x01DF6638 ADRP X8, 0x2303000
	0x01DF663C LDR X8, [X8 + 0x3E8]
	0x01DF6640 ADD X0, X31, 0x18
	0x01DF6644 LDR X1, [X8]
	0x01DF6648 BL 0x2BC434C
	0x01DF664C CBZ X21, 0x1DF65A8
	0x01DF6650 MOV X0, X21
	0x01DF6654 BL 0x1C16F18
	0x01DF6658 MOV X21, X31
	0x01DF665C B 0x1DF6664
	0x01DF6660 MOV X22, X0
	0x01DF6664 ADRP X8, 0x2303000
	0x01DF6668 LDR X8, [X8 + 0x3E8]
	0x01DF666C LDR X1, [X8]
	0x01DF6670 ADD X0, X31, 0x18
	0x01DF6674 BL 0x2BC434C
	0x01DF6678 CBNZ X21, 0x1DF6684
	0x01DF667C MOV X0, X22
	0x01DF6680 BL 0x1D2C690
	0x01DF6684 MOV X0, X21
	0x01DF6688 BL 0x1C16F18
	0x01DF668C BL 0x1990590
	0x01DF6690 SUB X31, X31, 0x70
	0x01DF6694 STP D11, D10, [X31 + 0x10]
	0x01DF6698 STP D9, D8, [X31 + 0x20]
	0x01DF669C STP X30, X25, [X31 + 0x30]
	0x01DF66A0 STP X24, X23, [X31 + 0x40]
	0x01DF66A4 STP X22, X21, [X31 + 0x50]
	0x01DF66A8 STP X20, X19, [X31 + 0x60]
	0x01DF66AC ADRP X21, 0x25E2000
	0x01DF66B0 ADRP X20, 0x22FD000
	0x01DF66B4 LDRB W8, [X21 + 0xD04]
	0x01DF66B8 LDR X20, [X20 + 0x5D8]
	0x01DF66BC MOV V8.16B, V3.16B
	0x01DF66C0 MOV V9.16B, V2.16B
	0x01DF66C4 MOV V10.16B, V1.16B
	0x01DF66C8 MOV V11.16B, V0.16B
	0x01DF66CC MOV X19, X0
	0x01DF66D0 TBNZ X8, 0x0, 0x1DF6724
	0x01DF66D4 ADRP X0, 0x2303000
	0x01DF66D8 LDR X0, [X0 + 0x3C0]
	0x01DF66DC BL 0x1C16CF4
	0x01DF66E0 ADRP X0, 0x22FD000
	0x01DF66E4 LDR X0, [X0 + 0x5D8]
	0x01DF66E8 BL 0x1C16CF4
	0x01DF66EC ADRP X0, 0x2303000
	0x01DF66F0 LDR X0, [X0 + 0x3C8]
	0x01DF66F4 BL 0x1C16CF4
	0x01DF66F8 ADRP X0, 0x2303000
	0x01DF66FC LDR X0, [X0 + 0x3D0]
	0x01DF6700 BL 0x1C16CF4
	0x01DF6704 ADRP X0, 0x2303000
	0x01DF6708 LDR X0, [X0 + 0x408]
	0x01DF670C BL 0x1C16CF4
	0x01DF6710 ADRP X0, 0x22FD000
	0x01DF6714 LDR X0, [X0 + 0x5F8]
	0x01DF6718 BL 0x1C16CF4
	0x01DF671C MOVZ W8, 0x1
	0x01DF6720 STRB W8, [X21 + 0xD04]
	0x01DF6724 LDR X0, [X20]
	0x01DF6728 STR X31, [X31 + 0x8]
	0x01DF672C ADRP X21, 0x22FD000
	0x01DF6730 LDR W8, [X0 + 0xE0]
	0x01DF6734 LDR X21, [X21 + 0x5F8]
	0x01DF6738 CBNZ W8, 0x1DF6744
	0x01DF673C BL 0x1C16DFC
	0x01DF6740 LDR X0, [X20]
	0x01DF6744 LDR X8, [X0 + 0xB8]
	0x01DF6748 MOV X1, X31
	0x01DF674C LDR W0, [X8 + 0x2C]
	0x01DF6750 BL 0x3C35CB8
	0x01DF6754 LDR X8, [X21]
	0x01DF6758 MOV W20, W0
	0x01DF675C LDR W9, [X8 + 0xE0]
	0x01DF6760 CBNZ W9, 0x1DF676C
	0x01DF6764 MOV X0, X8
	0x01DF6768 BL 0x1C16DFC
	0x01DF676C MOV V0.16B, V11.16B
	0x01DF6770 MOV V1.16B, V10.16B
	0x01DF6774 MOV V2.16B, V9.16B
	0x01DF6778 MOV V3.16B, V8.16B
	0x01DF677C MOV W0, W20
	0x01DF6780 MOV X1, X31
	0x01DF6784 BL 0x3C8D090
	0x01DF6788 CBZ X0, 0x1DF6898
	0x01DF678C LDR W8, [X0 + 0x18]
	0x01DF6790 MOV X20, X0
	0x01DF6794 CMP W8, 0x1
	0x01DF6798 B.LT 0x1DF6878
	0x01DF679C ADRP X22, 0x2303000
	0x01DF67A0 ADRP X23, 0x2303000
	0x01DF67A4 ADRP X24, 0x2303000
	0x01DF67A8 ADRP X25, 0x2303000
	0x01DF67AC LDR X22, [X22 + 0x3C0]
	0x01DF67B0 LDR X23, [X23 + 0x3D0]
	0x01DF67B4 LDR X24, [X24 + 0x408]
	0x01DF67B8 LDR X25, [X25 + 0x3C8]
	0x01DF67BC MOV W21, W31
	0x01DF67C0 CMP W21, W8
	0x01DF67C4 B.CS 0x1DF689C
	0x01DF67C8 ADD X8, X20, W21, 0x3, SXTW
	0x01DF67CC LDR X0, [X8 + 0x20]
	0x01DF67D0 CBZ X0, 0x1DF6898
	0x01DF67D4 LDR X2, [X22]
	0x01DF67D8 ADD X1, X31, 0x8
	0x01DF67DC BL 0x21A4990
	0x01DF67E0 TBZ X0, 0x0, 0x1DF6868
	0x01DF67E4 LDR X0, [X19 + 0x148]
	0x01DF67E8 CBZ X0, 0x1DF6898
	0x01DF67EC LDR X1, [X31 + 0x8]
	0x01DF67F0 LDR X2, [X23]
	0x01DF67F4 BL 0x301C318
	0x01DF67F8 TBZ X0, 0x0, 0x1DF6868
	0x01DF67FC LDR X0, [X19 + 0x148]
	0x01DF6800 CBZ X0, 0x1DF6898
	0x01DF6804 LDR X1, [X31 + 0x8]
	0x01DF6808 LDR X2, [X24]
	0x01DF680C BL 0x301D7A8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x25E3000
	007 Move W8, [X20+3323]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x22FF000
	014 Move X0, [X0+3688]
	015 Call 0x1C17CF4
	016 Move X0, 0x2304000
	017 Move X0, [X0+912]
	018 Call 0x1C17CF4
	019 Move X0, 0x2304000
	020 Move X0, [X0+920]
	021 Call 0x1C17CF4
	022 Move X0, 0x2302000
	023 Move X0, [X0+2144]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3323], W8
	027 Move X0, X19
	028 Move X1, X31
	029 Call NetworkBehaviour.Spawned, X0
	030 Move X8, [X19]
	031 Move X1, [X8+672]
	032 Move X9, [X8+664]
	033 Move X0, X19
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move X21, 0x2302000
	036 Move X21, [X21+2144]
	037 Move X0, X31
	038 Call GameManager.get_isDebug
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {55}
	043 Move X8, 0x22FF000
	044 Move X8, [X8+3688]
	045 Move X0, [X8]
	046 Call 0x1C17F10
	047 Move X8, 0x2304000
	048 Move X8, [X8+920]
	049 Move X1, X19
	050 Move X3, X31
	051 Move X20, X0
	052 Move X2, [X8]
	053 Call Action`1<Object>..ctor, X0, X1, X2
	054 Move [X19+408], X20
	055 Move X0, [X21]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {61}
	059 Call 0x1C17DFC
	060 Move X0, [X21]
	061 Move X8, [X0+184]
	062 Move X0, [X8+8]
	063 Compare X0, 0
	064 JumpIfEqual {76}
	065 Move X8, 0x2304000
	066 Move X8, [X8+912]
	067 Move X1, X19
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move X2, [X8]
	073 Move X30, [X31+48]
	074 Call HashSet`1<Object>.Add, X0, X1
	075 Return 
	076 Call 0x1C17F20
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X20, X0
	079 Move X0, X20
	080 Call 0x3EB2AD0
	081 Move X20, X0
	082 Move X0, 0x22FE000
	083 Move X0, [X0+2000]
	084 Call 0x1C17D08
	085 Move X8, [X20]
	086 Move X1, [X8]
	087 Call 0x1C18270
	088 Move TEMP, X0
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfNotEqual {121}
	092 Move X20, [X20]
	093 Call 0x3EB2AE0
	094 Move X0, 0x22FE000
	095 Move X0, [X0+1928]
	096 Call 0x1C17D08
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 Move X0, 0x2304000
	102 Move X0, [X0+928]
	103 Call 0x1C17D08
	104 Move X21, X0
	105 Move X0, 0x2303000
	106 Move X0, [X0+3664]
	107 Call 0x1C17D08
	108 Move X22, X0
	109 Move X0, 0x2302000
	110 Move X0, [X0+1784]
	111 Call 0x1C17D08
	112 Move X5, X0
	113 Move W0, 1
	114 Move W6, 198
	115 Move X1, X21
	116 Move X2, X20
	117 Move X3, X31
	118 Move X4, X22
	119 Move X7, X31
	120 Call Log.Error, X0, X1, X2, X3, X4, X5, X6
	121 Move W0, 8
	122 Call 0x3EB2AF0
	123 Move X8, [X20]
	124 Move [X0], X8
	125 Move X1, 0x20BF000
	126 Add X1, X1, 3672
	127 Move X2, X31
	128 Call 0x3EB2B00
	129 Move X20, X0
	130 Call 0x3EB2AE0
	131 Move X0, X20
	132 Call 0x1D2D690
	133 Call 0x1991590

Method: System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)

Disassembly:
	0x01DF6810 LDR X0, [X19 + 0x140]
	0x01DF6814 CBZ X0, 0x1DF6898
	0x01DF6818 LDR W10, [X0 + 0x1C]
	0x01DF681C LDR X1, [X31 + 0x8]
	0x01DF6820 LDR X8, [X0 + 0x10]
	0x01DF6824 LDR X9, [X25]
	0x01DF6828 ADD W10, W10, 0x1
	0x01DF682C STR W10, [X0 + 0x1C]
	0x01DF6830 CBZ X8, 0x1DF6898
	0x01DF6834 LDRSW X10, [X0 + 0x18]
	0x01DF6838 LDR W11, [X8 + 0x18]
	0x01DF683C CMP W10, W11
	0x01DF6840 B.CS 0x1DF6858
	0x01DF6844 ADD W9, W10, 0x1
	0x01DF6848 ADD X8, X8, X10, 0x3, LSL
	0x01DF684C STR W9, [X0 + 0x18]
	0x01DF6850 STR X1, [X8 + 0x20]
	0x01DF6854 B 0x1DF6868
	0x01DF6858 LDR X8, [X9 + 0x20]
	0x01DF685C LDR X8, [X8 + 0xC0]
	0x01DF6860 LDR X2, [X8 + 0x70]
	0x01DF6864 BL 0x301BF90
	0x01DF6868 LDR W8, [X20 + 0x18]
	0x01DF686C ADD W21, W21, 0x1
	0x01DF6870 CMP W21, W8
	0x01DF6874 B.LT 0x1DF67C0
	0x01DF6878 LDP X20, X19, [X31 + 0x60]
	0x01DF687C LDP X22, X21, [X31 + 0x50]
	0x01DF6880 LDP X24, X23, [X31 + 0x40]
	0x01DF6884 LDP X30, X25, [X31 + 0x30]
	0x01DF6888 LDP D9, D8, [X31 + 0x20]
	0x01DF688C LDP D11, D10, [X31 + 0x10]
	0x01DF6890 ADD X31, X31, 0x70
	0x01DF6894 RET
	0x01DF6898 BL 0x1C16F20
	0x01DF689C BL 0x1C16F28
	0x01DF68A0 STP D13, D12, [X31 - 0x60]!
	0x01DF68A4 STP D11, D10, [X31 + 0x10]
	0x01DF68A8 STP D9, D8, [X31 + 0x20]
	0x01DF68AC STR X30, [X31 + 0x30]
	0x01DF68B0 STP X22, X21, [X31 + 0x40]
	0x01DF68B4 STP X20, X19, [X31 + 0x50]
	0x01DF68B8 ADRP X21, 0x25E2000
	0x01DF68BC ADRP X22, 0x22FD000
	0x01DF68C0 LDRB W8, [X21 + 0xD05]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x25E3000
	007 Move W8, [X22+3324]
	008 Move W21, W2
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x2304000
	016 Move X0, [X0+904]
	017 Call 0x1C17CF4
	018 Move X0, 0x2302000
	019 Move X0, [X0+2144]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3324], W8
	023 Move X22, 0x2302000
	024 Move X22, [X22+2144]
	025 And W2, W21, 1
	026 Move X0, X19
	027 Move X1, X20
	028 Move X3, X31
	029 Call NetworkBehaviour.Despawned, X0, X1, X2
	030 Move X0, X31
	031 Call GameManager.get_isDebug
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {37}
	036 Move [X19+408], X31
	037 Move X0, [X22]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move X0, [X22]
	043 Move X8, [X0+184]
	044 Move X0, [X8+8]
	045 Compare X0, 0
	046 JumpIfEqual {58}
	047 Move X8, 0x2304000
	048 Move X8, [X8+904]
	049 Move X1, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X2, [X8]
	055 Move X30, [X31+48]
	056 Call HashSet`1<Object>.Remove, X0, X1
	057 Return 
	058 Call 0x1C17F20

Method: System.Void Setup()

Disassembly:
	0x01DE9598 MOV W1, W0
	0x01DE959C MOV X0, X20
	0x01DE95A0 LDR X2, [X8]
	0x01DE95A4 BL 0x301BCCC
	0x01DE95A8 MOV X1, X0
	0x01DE95AC MOV X0, X19
	0x01DE95B0 LDP X20, X19, [X31 + 0x40]
	0x01DE95B4 LDP X30, X21, [X31 + 0x30]
	0x01DE95B8 LDP D9, D8, [X31 + 0x20]
	0x01DE95BC LDP D11, D10, [X31 + 0x10]
	0x01DE95C0 LDP D13, D12, [X31], #0x50
	0x01DE95C4 B 0x1DE996C
	0x01DE95C8 MOV X0, X19
	0x01DE95CC MOV X1, X31
	0x01DE95D0 BL 0x3C32E90
	0x01DE95D4 CBZ X0, 0x1DE96B8
	0x01DE95D8 MOV X1, X31
	0x01DE95DC BL 0x3C3F58C
	0x01DE95E0 MOV X0, X19
	0x01DE95E4 MOV V8.16B, V0.16B
	0x01DE95E8 MOV V9.16B, V1.16B
	0x01DE95EC MOV V10.16B, V2.16B
	0x01DE95F0 BL 0x1DE7BE4
	0x01DE95F4 ADRP X20, 0x25EF000
	0x01DE95F8 LDRB W8, [X20 + 0x85C]
	0x01DE95FC MOV V11.16B, V0.16B
	0x01DE9600 MOV V12.16B, V1.16B
	0x01DE9604 MOV V13.16B, V2.16B
	0x01DE9608 CBNZ W8, 0x1DE9620
	0x01DE960C ADRP X0, 0x230A000
	0x01DE9610 LDR X0, [X0 + 0x5A8]
	0x01DE9614 BL 0x1C16CF4
	0x01DE9618 MOVZ W8, 0x1
	0x01DE961C STRB W8, [X20 + 0x85C]
	0x01DE9620 ADRP X8, 0x230A000
	0x01DE9624 LDR X8, [X8 + 0x5A8]
	0x01DE9628 FSUB S11, S8, S11
	0x01DE962C FSUB S9, S9, S12
	0x01DE9630 FSUB S8, S10, S13
	0x01DE9634 LDR X0, [X8]
	0x01DE9638 LDR W8, [X0 + 0xE0]
	0x01DE963C CBNZ W8, 0x1DE9644
	0x01DE9640 BL 0x1C16DFC
	0x01DE9644 FMUL S0, S11, S11
	0x01DE9648 FMUL S1, S9, S9
	0x01DE964C FMUL S2, S8, S8
	0x01DE9650 FADD S0, S0, S1
	0x01DE9654 FADD S0, S2, S0
	0x01DE9658 FSQRT S0, S0
	0x01DE965C FMOV S1, 6
	0x01DE9660 FCMP S0, S1
	0x01DE9664 B.PL 0x1DE9674
	0x01DE9668 MOV X0, X19
	0x01DE966C BL 0x1DE7E60
	0x01DE9670 TBZ X0, 0x0, 0x1DE969C
	0x01DE9674 LDR X8, [X19]
	0x01DE9678 MOV X0, X19
	0x01DE967C LDP X20, X19, [X31 + 0x40]
	0x01DE9680 LDP X30, X21, [X31 + 0x30]
	0x01DE9684 LDR X2, [X8 + 0x388]
	0x01DE9688 LDR X1, [X8 + 0x390]
	0x01DE968C LDP D9, D8, [X31 + 0x20]
	0x01DE9690 LDP D11, D10, [X31 + 0x10]
	0x01DE9694 LDP D13, D12, [X31], #0x50
	0x01DE9698 BR X2
	0x01DE969C MOV X0, X19
	0x01DE96A0 LDP X20, X19, [X31 + 0x40]
	0x01DE96A4 LDP X30, X21, [X31 + 0x30]
	0x01DE96A8 LDP D9, D8, [X31 + 0x20]
	0x01DE96AC LDP D11, D10, [X31 + 0x10]
	0x01DE96B0 LDP D13, D12, [X31], #0x50
	0x01DE96B4 B 0x1DE8AFC
	0x01DE96B8 BL 0x1C16F20
	0x01DE96BC STR X30, [X31 - 0x30]!
	0x01DE96C0 STP X22, X21, [X31 + 0x10]
	0x01DE96C4 STP X20, X19, [X31 + 0x20]
	0x01DE96C8 ADRP X22, 0x25EF000
	0x01DE96CC ADRP X21, 0x230A000
	0x01DE96D0 LDRB W8, [X22 + 0xCB8]
	0x01DE96D4 LDR X21, [X21 + 0x598]
	0x01DE96D8 MOV X19, X1
	0x01DE96DC MOV X20, X0
	0x01DE96E0 TBNZ X8, 0x0, 0x1DE96F8
	0x01DE96E4 ADRP X0, 0x230A000
	0x01DE96E8 LDR X0, [X0 + 0x598]
	0x01DE96EC BL 0x1C16CF4
	0x01DE96F0 MOVZ W8, 0x1
	0x01DE96F4 STRB W8, [X22 + 0xCB8]
	0x01DE96F8 MOV X0, X20
	0x01DE96FC MOV X1, X19
	0x01DE9700 BL 0x1DE9760
	0x01DE9704 LDR X0, [X21]
	0x01DE9708 LDR X20, [X20 + 0x1C0]
	0x01DE970C LDR W8, [X0 + 0xE0]
	0x01DE9710 CBNZ W8, 0x1DE9718
	0x01DE9714 BL 0x1C16DFC
	0x01DE9718 MOV X0, X19
	0x01DE971C MOV X1, X31
	0x01DE9720 MOV X2, X31
	0x01DE9724 BL 0x3C354F8
	0x01DE9728 MOV W8, W0
	0x01DE972C MOV X0, X31
	0x01DE9730 TBZ X8, 0x0, 0x1DE9744
	0x01DE9734 CBZ X19, 0x1DE975C
	0x01DE9738 MOV X0, X19
	0x01DE973C MOV X1, X31
	0x01DE9740 BL 0x3C32E90
	0x01DE9744 CBZ X20, 0x1DE975C
	0x01DE9748 STR X0, [X20 + 0xC0]
	0x01DE974C LDP X20, X19, [X31 + 0x20]
	0x01DE9750 LDP X22, X21, [X31 + 0x10]
	0x01DE9754 LDR X30, [X31], #0x30
	0x01DE9758 RET
	0x01DE975C BL 0x1C16F20
	0x01DE9760 STR X30, [X31 - 0x30]!
	0x01DE9764 STP X22, X21, [X31 + 0x10]
	0x01DE9768 STP X20, X19, [X31 + 0x20]
	0x01DE976C ADRP X22, 0x25EF000
	0x01DE9770 ADRP X21, 0x230A000
	0x01DE9774 LDRB W8, [X22 + 0xD08]
	0x01DE9778 LDR X21, [X21 + 0x598]
	0x01DE977C MOV X20, X1
	0x01DE9780 MOV X19, X0
	0x01DE9784 TBNZ X8, 0x0, 0x1DE979C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x25F0000
	006 Move W8, [X20+3325]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {26}
	012 Move X0, 0x230B000
	013 Move X0, [X0+1928]
	014 Call 0x1C17CF4
	015 Move X0, 0x2310000
	016 Move X0, [X0+3656]
	017 Call 0x1C17CF4
	018 Move X0, 0x2310000
	019 Move X0, [X0+3664]
	020 Call 0x1C17CF4
	021 Move X0, 0x2310000
	022 Move X0, [X0+3672]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3325], W8
	026 Move W8, [X19+416]
	027 Compare W8, 0
	028 JumpIfNotEqual {147}
	029 Move X0, [X19+64]
	030 Compare X0, 0
	031 JumpIfEqual {94}
	032 Move W8, [X0+96]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 2
	035 Compare TEMP, 2
	036 JumpIfEqual {94}
	037 Move X1, X31
	038 Call NetworkObject.get_HasStateAuthority, X0
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {94}
	043 Move X0, X19
	044 Move W1, W31
	045 Call MobController.set_status, X0, X1
	046 Move X8, [X19+192]
	047 Compare X8, 0
	048 JumpIfEqual {152}
	049 Move W1, [X8+32]
	050 Move X0, X19
	051 Call MobController.set_health, X0, X1
	052 Move X8, [X19+192]
	053 Compare X8, 0
	054 JumpIfEqual {152}
	055 Move X8, [X8+48]
	056 Compare X8, 0
	057 JumpIfEqual {152}
	058 Move W9, [X8+24]
	059 Compare W9, 0
	060 JumpIfEqual {153}
	061 Move V0, [X8+32]
	062 Move X0, X19
	063 Call MobController.set_navAgentSpeed, X0, V0
	064 Move X8, [X19+192]
	065 Compare X8, 0
	066 JumpIfEqual {152}
	067 Move V0, [X8+64]
	068 Move X0, X19
	069 Call MobController.set_navAgentAngularSpeed, X0, V0
	070 Move X8, [X19+192]
	071 Compare X8, 0
	072 JumpIfEqual {152}
	073 Move X8, [X8+88]
	074 Compare X8, 0
	075 JumpIfEqual {152}
	076 Move W9, [X8+24]
	077 Compare W9, 0
	078 JumpIfEqual {153}
	079 Move V0, [X8+32]
	080 Move X0, X19
	081 Call MobController.set_searchPrecision, X0, V0
	082 Move X8, [X19+192]
	083 Compare X8, 0
	084 JumpIfEqual {152}
	085 Move X8, [X8+96]
	086 Compare X8, 0
	087 JumpIfEqual {152}
	088 Move W9, [X8+24]
	089 Compare W9, 0
	090 JumpIfEqual {153}
	091 Move V0, [X8+32]
	092 Move X0, X19
	093 Call MobController.set_searchWidth, X0, V0
	094 Move X0, X19
	095 Call MobController.InitializeNavMeshAgent, X0
	096 Move X0, X19
	097 Call MobController.ResetNavMeshAgent, X0
	098 Move X0, [X19+200]
	099 Compare X0, 0
	100 JumpIfEqual {152}
	101 Move X8, [X0]
	102 Move X1, X19
	103 Move X9, [X8+392]
	104 Move X2, [X8+400]
	105 NotImplemented "Instruction BLR not yet implemented."
	106 Add X8, X31, 8
	107 Move X0, X19
	108 Call MobController.get_navZone, X0
	109 Move X8, [X31+16]
	110 Compare X8, 0
	111 JumpIfEqual {152}
	112 Move X8, [X8+24]
	113 Compare X8, 0
	114 JumpIfNotEqual {135}
	115 Move X8, 0x230B000
	116 Move X8, [X8+1928]
	117 Move X0, [X8]
	118 Move W8, [X0+224]
	119 Compare W8, 0
	120 JumpIfNotEqual {122}
	121 Call 0x1C17DFC
	122 Move X8, 0x2310000
	123 Move X9, 0x2310000
	124 Move X10, 0x2310000
	125 Move X8, [X8+3672]
	126 Move X9, [X9+3664]
	127 Move X10, [X10+3656]
	128 Move W4, 244
	129 Move X0, [X8]
	130 Move X2, [X9]
	131 Move X3, [X10]
	132 Move X1, X31
	133 Move X5, X31
	134 Call Log.Error, X0, X1, X2, X3, X4
	135 Move X8, [X19]
	136 Move X0, X19
	137 Move X9, [X8+760]
	138 Move X1, [X8+768]
	139 NotImplemented "Instruction BLR not yet implemented."
	140 Move X8, [X19]
	141 Move X0, X19
	142 Move X9, [X8+776]
	143 Move X1, [X8+784]
	144 NotImplemented "Instruction BLR not yet implemented."
	145 Move W8, 1
	146 Move [X19+416], W8
	147 Move X20, [X31+48]
	148 Move X19, [X31+56]
	149 Move X30, [X31+32]
	150 Add X31, X31, 64
	151 Return 
	152 Call 0x1C17F20
	153 Call 0x1C17F28

Method: System.Void Respawn(UnityEngine.Vector3 position)

Disassembly:
	0x01DE9AA8 STP D15, D14, [X31 + 0x20]
	0x01DE9AAC STP D13, D12, [X31 + 0x30]
	0x01DE9AB0 STP D11, D10, [X31 + 0x40]
	0x01DE9AB4 STP D9, D8, [X31 + 0x50]
	0x01DE9AB8 STP X30, X23, [X31 + 0x60]
	0x01DE9ABC STP X22, X21, [X31 + 0x70]
	0x01DE9AC0 STP X20, X19, [X31 + 0x80]
	0x01DE9AC4 ADRP X20, 0x25EF000
	0x01DE9AC8 ADRP X21, 0x230A000
	0x01DE9ACC LDRB W8, [X20 + 0xCBB]
	0x01DE9AD0 LDR X21, [X21 + 0x598]
	0x01DE9AD4 MOV X19, X0
	0x01DE9AD8 TBNZ X8, 0x0, 0x1DE9AF0
	0x01DE9ADC ADRP X0, 0x230A000
	0x01DE9AE0 LDR X0, [X0 + 0x598]
	0x01DE9AE4 BL 0x1C16CF4
	0x01DE9AE8 MOVZ W8, 0x1
	0x01DE9AEC STRB W8, [X20 + 0xCBB]
	0x01DE9AF0 LDR X0, [X21]
	0x01DE9AF4 LDR X20, [X19 + 0x160]
	0x01DE9AF8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X1, X31
	007 Move V8, V2
	008 Move V9, V1
	009 Move V10, V0
	010 Move X19, X0
	011 Call Component.get_transform, X0
	012 Compare X0, 0
	013 JumpIfEqual {27}
	014 Move V0, V10
	015 Move V1, V9
	016 Move V2, V8
	017 Move X1, X31
	018 Call Transform.set_position, X0, X1
	019 Move X0, X19
	020 Move X30, [X31+32]
	021 Move X19, [X31+40]
	022 Move D9, [X31+16]
	023 Move D8, [X31+24]
	024 Move V10, [X31+48]
	025 Call MobController.ResetNavMeshAgent, X0
	026 Return 
	027 Call 0x1C17F20

Method: System.Void InitializeNavMeshAgent()

Disassembly:
	0x01DF68C4 LDR X22, [X22 + 0x598]
	0x01DF68C8 MOV W20, W1
	0x01DF68CC MOV X19, X0
	0x01DF68D0 TBNZ X8, 0x0, 0x1DF68F4
	0x01DF68D4 ADRP X0, 0x2303000
	0x01DF68D8 LDR X0, [X0 + 0x3D8]
	0x01DF68DC BL 0x1C16CF4
	0x01DF68E0 ADRP X0, 0x22FD000
	0x01DF68E4 LDR X0, [X0 + 0x598]
	0x01DF68E8 BL 0x1C16CF4
	0x01DF68EC MOVZ W8, 0x1
	0x01DF68F0 STRB W8, [X21 + 0xD05]
	0x01DF68F4 LDR X0, [X22]
	0x01DF68F8 LDR X21, [X19 + 0x150]
	0x01DF68FC LDR W8, [X0 + 0xE0]
	0x01DF6900 CBNZ W8, 0x1DF6908
	0x01DF6904 BL 0x1C16DFC
	0x01DF6908 MOV X0, X21
	0x01DF690C MOV X1, X31
	0x01DF6910 MOV X2, X31
	0x01DF6914 BL 0x3C354F8
	0x01DF6918 TBZ X0, 0x0, 0x1DF6960
	0x01DF691C LDR X8, [X19 + 0x150]
	0x01DF6920 CBZ X8, 0x1DF6A20
	0x01DF6924 LDP S8, S9, [X8 + 0x28]
	0x01DF6928 LDR V10, [X8 + 0x30]
	0x01DF692C TBNZ X20, 0x0, 0x1DF6980
	0x01DF6930 LDR X0, [X22]
	0x01DF6934 LDR X20, [X19 + 0x158]
	0x01DF6938 LDR W8, [X0 + 0xE0]
	0x01DF693C CBNZ W8, 0x1DF6944
	0x01DF6940 BL 0x1C16DFC
	0x01DF6944 MOV X0, X20
	0x01DF6948 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+64]
	006 Move X20, [X19+232]
	007 Compare X0, 0
	008 JumpIfEqual {17}
	009 Move W8, [X0+96]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 2
	012 Compare TEMP, 2
	013 JumpIfEqual {16}
	014 Move X1, X31
	015 Call NetworkObject.get_HasStateAuthority, X0
	016 Move W0, W31
	017 Compare X20, 0
	018 JumpIfEqual {43}
	019 And W1, W0, 1
	020 Move X0, X20
	021 Move X2, X31
	022 Call Behaviour.set_enabled, X0, X1
	023 Move X20, [X19+232]
	024 Move X0, X19
	025 Call MobController.get_navAgentSpeed, X0
	026 Compare X20, 0
	027 JumpIfEqual {43}
	028 Move X0, X20
	029 Move X1, X31
	030 Call NavMeshAgent.set_speed, X0, V0
	031 Move X20, [X19+232]
	032 Move X0, X19
	033 Call MobController.get_navAgentAngularSpeed, X0
	034 Compare X20, 0
	035 JumpIfEqual {43}
	036 Move X0, X20
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X1, X31
	040 Move X30, [X31+32]
	041 Call NavMeshAgent.set_angularSpeed, X0, V0
	042 Return 
	043 Call 0x1C17F20

Method: System.Void ResetNavMeshAgent()

Disassembly:
	0x01DF694C MOV X2, X31
	0x01DF6950 BL 0x3C354F8
	0x01DF6954 TBZ X0, 0x0, 0x1DF6988
	0x01DF6958 LDR X0, [X19 + 0x158]
	0x01DF695C B 0x1DF69A0
	0x01DF6960 LDR X0, [X19 + 0xD0]
	0x01DF6964 CBZ X0, 0x1DF6A20
	0x01DF6968 MOV X1, X31
	0x01DF696C BL 0x3C3F58C
	0x01DF6970 MOV V8.16B, V0.16B
	0x01DF6974 MOV V9.16B, V1.16B
	0x01DF6978 MOV V10.16B, V2.16B
	0x01DF697C TBZ X20, 0x0, 0x1DF6930
	0x01DF6980 MOV X0, X19
	0x01DF6984 BL 0x1DF60E8
	0x01DF6988 LDR X0, [X19 + 0xD0]
	0x01DF698C CBZ X0, 0x1DF6A20
	0x01DF6990 MOV X1, X31
	0x01DF6994 BL 0x3C3F58C
	0x01DF6998 MOV X0, X19
	0x01DF699C BL 0x1DF6480
	0x01DF69A0 STR X0, [X19 + 0x150]
	0x01DF69A4 CBZ X0, 0x1DF6A20
	0x01DF69A8 LDP S11, S12, [X0 + 0x28]
	0x01DF69AC LDR V13, [X0 + 0x30]
	0x01DF69B0 MOV X0, X19
	0x01DF69B4 BL 0x1DF4B6C
	0x01DF69B8 MOV V3.16B, V0.16B
	0x01DF69BC MOV X0, X19
	0x01DF69C0 MOV V0.16B, V11.16B
	0x01DF69C4 MOV V1.16B, V12.16B
	0x01DF69C8 MOV V2.16B, V13.16B
	0x01DF69CC BL 0x1DF6690
	0x01DF69D0 LDR X8, [X19 + 0x148]
	0x01DF69D4 CBZ X8, 0x1DF6A20
	0x01DF69D8 LDR W8, [X8 + 0x18]
	0x01DF69DC CBNZ W8, 0x1DF69E8
	0x01DF69E0 MOV X0, X19
	0x01DF69E4 BL 0x1DF60E8
	0x01DF69E8 MOV X0, X19
	0x01DF69EC MOV V0.16B, V8.16B
	0x01DF69F0 MOV V1.16B, V9.16B
	0x01DF69F4 MOV V2.16B, V10.16B
	0x01DF69F8 BL 0x1DF6480
	0x01DF69FC STR X0, [X19 + 0x158]
	0x01DF6A00 MOV X0, X19
	0x01DF6A04 LDP X20, X19, [X31 + 0x50]
	0x01DF6A08 LDP X22, X21, [X31 + 0x40]
	0x01DF6A0C LDR X30, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, [X0+232]
	005 Move X1, X31
	006 Move X19, X0
	007 Call Component.get_transform, X0
	008 Compare X0, 0
	009 JumpIfEqual {66}
	010 Move X1, X31
	011 Call Transform.get_position, X0
	012 Compare X20, 0
	013 JumpIfEqual {66}
	014 Move X0, X20
	015 Move X1, X31
	016 Call NavMeshAgent.Warp, X0, X1
	017 Move X0, [X19+232]
	018 Compare X0, 0
	019 JumpIfEqual {66}
	020 Move X1, X31
	021 Call NavMeshAgent.get_isOnNavMesh, X0
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {35}
	026 Move X0, [X19+232]
	027 Compare X0, 0
	028 JumpIfEqual {66}
	029 Move X1, X31
	030 Call NavMeshAgent.get_isOnOffMeshLink, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {40}
	035 Move X0, [X19+232]
	036 Compare X0, 0
	037 JumpIfEqual {66}
	038 Move X1, X31
	039 Call NavMeshAgent.ResetPath, X0
	040 Move X20, 0x25E3000
	041 Move W8, [X20+1923]
	042 Move X19, [X19+232]
	043 Compare W8, 0
	044 JumpIfNotEqual {50}
	045 Move X0, 0x22FE000
	046 Move X0, [X0+1440]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X20+1923], W8
	050 Compare X19, 0
	051 JumpIfEqual {66}
	052 Move X8, 0x22FE000
	053 Move X8, [X8+1440]
	054 Move X0, X19
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X1, X31
	058 Move X8, [X8]
	059 Move X8, [X8+184]
	060 Move S1, [X8+4]
	061 Move S2, [X8+8]
	062 Move V0, [X8]
	063 Move X30, [X31+32]
	064 Call NavMeshAgent.set_velocity, X0, X1
	065 Return 
	066 Call 0x1C17F20

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01DF6A10 LDP D9, D8, [X31 + 0x20]
	0x01DF6A14 LDP D11, D10, [X31 + 0x10]
	0x01DF6A18 LDP D13, D12, [X31], #0x60
	0x01DF6A1C B 0x1DF6A24
	0x01DF6A20 BL 0x1C16F20
	0x01DF6A24 STP X30, X19, [X31 - 0x10]!
	0x01DF6A28 LDR X8, [X0 + 0x150]
	0x01DF6A2C CBZ X8, 0x1DF6A74
	0x01DF6A30 MOV X19, X0
	0x01DF6A34 LDR X0, [X0 + 0xE8]
	0x01DF6A38 CBZ X0, 0x1DF6A74
	0x01DF6A3C LDP S1, S2, [X8 + 0x2C]
	0x01DF6A40 LDR V0, [X8 + 0x28]
	0x01DF6A44 MOV X1, X31
	0x01DF6A48 BL 0x3BE13F8
	0x01DF6A4C LDRB W8, [X19 + 0xF0]
	0x01DF6A50 CBZ W8, 0x1DF6A68
	0x01DF6A54 LDR X8, [X19]
	0x01DF6A58 MOV X0, X19
	0x01DF6A5C LDR X9, [X8 + 0x3A8]
	0x01DF6A60 LDR X1, [X8 + 0x3B0]
	0x01DF6A64 BLR X9
	0x01DF6A68 STR W31, [X19 + 0xB8]
	0x01DF6A6C LDP X30, X19, [X31], #0x10
	0x01DF6A70 RET
	0x01DF6A74 BL 0x1C16F20
	0x01DF6A78 STR D10, [X31 - 0x30]!
	0x01DF6A7C STP D9, D8, [X31 + 0x10]
	0x01DF6A80 STP X30, X19, [X31 + 0x20]
	0x01DF6A84 MOV V8.16B, V2.16B
	0x01DF6A88 MOV V9.16B, V1.16B
	0x01DF6A8C MOV V10.16B, V0.16B
	0x01DF6A90 MOV X19, X0
	0x01DF6A94 BL 0x1DF60E8
	0x01DF6A98 MOV X0, X19
	0x01DF6A9C MOV V0.16B, V10.16B
	0x01DF6AA0 MOV V1.16B, V9.16B
	0x01DF6AA4 MOV V2.16B, V8.16B
	0x01DF6AA8 BL 0x1DF6480
	0x01DF6AAC STR X0, [X19 + 0x150]
	0x01DF6AB0 CBZ X0, 0x1DF6B0C
	0x01DF6AB4 LDP S8, S9, [X0 + 0x28]
	0x01DF6AB8 LDR V10, [X0 + 0x30]
	0x01DF6ABC MOV X0, X19
	0x01DF6AC0 BL 0x1DF4B6C
	0x01DF6AC4 MOV V3.16B, V0.16B
	0x01DF6AC8 MOV X0, X19
	0x01DF6ACC MOV V0.16B, V8.16B
	0x01DF6AD0 MOV V1.16B, V9.16B
	0x01DF6AD4 MOV V2.16B, V10.16B
	0x01DF6AD8 BL 0x1DF6690
	0x01DF6ADC LDR X8, [X19 + 0x150]
	0x01DF6AE0 CBZ X8, 0x1DF6B0C
	0x01DF6AE4 LDP S0, S1, [X8 + 0x28]
	0x01DF6AE8 LDR V2, [X8 + 0x30]
	0x01DF6AEC MOV X0, X19

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move [X31+8], W31
	005 Move W8, [X0+416]
	006 Compare W8, 0
	007 JumpIfEqual {66}
	008 Move X19, X0
	009 Call MobController.get_isDie, X0
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {31}
	014 Move X0, X19
	015 Call MobController.get__timerRevive, X0
	016 Move [X31+8], W0
	017 Move X1, [X19+56]
	018 Add X0, X31, 8
	019 Move X2, X31
	020 Call TickTimer.Expired, X0, X1
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {31}
	025 Move X8, [X19]
	026 Move X0, X19
	027 Move W1, W31
	028 Move X9, [X8+792]
	029 Move X2, [X8+800]
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Move X0, X19
	032 Call MobController.get_status, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {48}
	037 Move X0, X19
	038 Call MobController.get_isDie, X0
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {66}
	043 Move X8, [X19]
	044 Move X0, X19
	045 Move X9, [X8+680]
	046 Move X1, [X8+688]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move X0, [X19+56]
	049 Compare X0, 0
	050 JumpIfEqual {70}
	051 Move V8, [X19+140]
	052 Move X1, X31
	053 Call NetworkRunner.get_DeltaTime, X0
	054 Subtract S0, S8, S0
	055 NotImplemented "Instruction FCMP not yet implemented."
	056 Move [X19+140], S0
	057 Move X8, [X19]
	058 Move S0, 3
	059 Move X0, X19
	060 Move W1, W31
	061 Move X9, [X8+808]
	062 Move X2, [X8+816]
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move X0, X19
	065 Call MobController.get_isDie, X0
	066 Move X30, [X31+16]
	067 Move X19, [X31+24]
	068 Move V8, [X31+32]
	069 Return 
	070 Call 0x1C17F20

Method: System.Void UpdateMonsterBehaviour()

Disassembly:
	0x01DEA038 B.MI 0x1DEA090
	0x01DEA03C LDR X0, [X20]
	0x01DEA040 FMUL S1, S11, S14
	0x01DEA044 FMUL S2, S12, S15
	0x01DEA048 FMUL S3, S13, S8
	0x01DEA04C FADD S1, S1, S2
	0x01DEA050 FADD S1, S3, S1
	0x01DEA054 LDR W8, [X0 + 0xE0]
	0x01DEA058 FDIV S0, S1, S0
	0x01DEA05C FMOV S1, 1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, X31
	005 Call GameManager.get_isDebug
	006 Move TEMP, X0
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {13}
	010 Move X0, X31
	011 Call Time.get_realtimeSinceStartup
	012 Move [X19+400], S0
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return 

Method: System.Void StateAuthorityChanged()

Disassembly:
	0x01DF6AF0 BL 0x1DF6480
	0x01DF6AF4 STR X0, [X19 + 0x158]
	0x01DF6AF8 MOV X0, X19
	0x01DF6AFC LDP X30, X19, [X31 + 0x20]
	0x01DF6B00 LDP D9, D8, [X31 + 0x10]
	0x01DF6B04 LDR V10, [X31], #0x30
	0x01DF6B08 B 0x1DF6A24
	0x01DF6B0C BL 0x1C16F20
	0x01DF6B10 STP D11, D10, [X31 - 0x50]!
	0x01DF6B14 STP D9, D8, [X31 + 0x10]
	0x01DF6B18 STR X30, [X31 + 0x20]
	0x01DF6B1C STP X22, X21, [X31 + 0x30]
	0x01DF6B20 STP X20, X19, [X31 + 0x40]
	0x01DF6B24 ADRP X20, 0x25E2000
	0x01DF6B28 LDRB W8, [X20 + 0xD07]
	0x01DF6B2C MOV X19, X0
	0x01DF6B30 TBNZ X8, 0x0, 0x1DF6B48
	0x01DF6B34 ADRP X0, 0x2303000
	0x01DF6B38 LDR X0, [X0 + 0x410]
	0x01DF6B3C BL 0x1C16CF4
	0x01DF6B40 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+56]
	004 Compare X8, 0
	005 JumpIfEqual {33}
	006 Move W8, [X8+392]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X19, X0
	009 Move X0, [X0+64]
	010 Compare X0, 0
	011 JumpIfEqual {25}
	012 Move W8, [X0+96]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 2
	015 Compare TEMP, 2
	016 JumpIfEqual {25}
	017 Move X1, X31
	018 Call NetworkObject.get_HasStateAuthority, X0
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {25}
	023 Move [X19+336], X31
	024 Move [X19+344], X31
	025 Move X0, X19
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Call MobController.InitializeNavMeshAgent, X0
	029 Return 
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Return 
	033 Call 0x1C17F20

Method: System.Void SetupNavMeshValues(System.Boolean isStopped, System.Single speed, System.Single searchPrecision, System.Single searchWidth)

Disassembly:
	0x01DF6B44 STRB W8, [X20 + 0xD07]
	0x01DF6B48 LDR X20, [X19 + 0xF8]
	0x01DF6B4C CBNZ X20, 0x1DF6B70
	0x01DF6B50 ADRP X8, 0x2303000
	0x01DF6B54 LDR X8, [X8 + 0x410]
	0x01DF6B58 LDR X0, [X8]
	0x01DF6B5C BL 0x1C16F10
	0x01DF6B60 MOV X1, X31
	0x01DF6B64 MOV X20, X0
	0x01DF6B68 BL 0x3BE2658
	0x01DF6B6C STR X20, [X19 + 0xF8]
	0x01DF6B70 LDR X8, [X19 + 0x150]
	0x01DF6B74 CBZ X8, 0x1DF6C6C
	0x01DF6B78 LDR X0, [X19 + 0xE8]
	0x01DF6B7C CBZ X0, 0x1DF6C6C
	0x01DF6B80 LDP S1, S2, [X8 + 0x2C]
	0x01DF6B84 LDR V0, [X8 + 0x28]
	0x01DF6B88 MOV X1, X20
	0x01DF6B8C MOV X2, X31
	0x01DF6B90 BL 0x3BE1834
	0x01DF6B94 LDR X0, [X19 + 0xF8]
	0x01DF6B98 CBZ X0, 0x1DF6C6C
	0x01DF6B9C MOV X1, X31
	0x01DF6BA0 BL 0x3BE2888
	0x01DF6BA4 CBZ X0, 0x1DF6C6C
	0x01DF6BA8 LDR X8, [X0 + 0x18]
	0x01DF6BAC MOV X20, X0
	0x01DF6BB0 CMP W8, 0x1
	0x01DF6BB4 B.LT 0x1DF6C2C
	0x01DF6BB8 MOV X21, X31
	0x01DF6BBC AND X8, X8, 0x0
	0x01DF6BC0 ADD X22, X20, 0x28
	0x01DF6BC4 FMOV S11, 2.25
	0x01DF6BC8 CMP X21, W8, UXTW
	0x01DF6BCC B.CS 0x1DF6C70
	0x01DF6BD0 LDP S8, S9, [X22 - 0x8]
	0x01DF6BD4 LDR V10, [X22]
	0x01DF6BD8 MOV X0, X19
	0x01DF6BDC MOV X1, X31
	0x01DF6BE0 BL 0x3C32E90
	0x01DF6BE4 CBZ X0, 0x1DF6C6C
	0x01DF6BE8 MOV X1, X31
	0x01DF6BEC BL 0x3C3F58C

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Move X0, [X0+232]
	009 Compare X0, 0
	010 JumpIfEqual {51}
	011 Move W20, W1
	012 And W1, W1, 1
	013 Move X2, X31
	014 Move V8, V2
	015 Move V9, V1
	016 Move V10, V0
	017 Call NavMeshAgent.set_isStopped, X0, X1
	018 Move X0, [X19+232]
	019 Compare X0, 0
	020 JumpIfEqual {51}
	021 Xor W8, W20, 1
	022 And W20, W8, 1
	023 Move W1, W20
	024 Move X2, X31
	025 Call NavMeshAgent.set_updatePosition, X0, X1
	026 Move X0, [X19+232]
	027 Compare X0, 0
	028 JumpIfEqual {51}
	029 Move W1, W20
	030 Move X2, X31
	031 Call NavMeshAgent.set_updateRotation, X0, X1
	032 Move X8, [X19]
	033 Move X0, X19
	034 Move V0, V10
	035 Move X9, [X8+728]
	036 Move X1, [X8+736]
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X0, X19
	039 Move V0, V9
	040 Call MobController.set_searchPrecision, X0, V0
	041 Move X0, X19
	042 Move V0, V8
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X30, [X31+24]
	046 Move D9, [X31+8]
	047 Move D8, [X31+16]
	048 Move V10, [X31+48]
	049 Call MobController.set_searchWidth, X0, V0
	050 Return 
	051 Call 0x1C17F20

Method: System.Void SetNavAgentSpeed(System.Single speed)

Disassembly:
	0x01DF6BF0 FSUB S0, S0, S8
	0x01DF6BF4 FSUB S1, S1, S9
	0x01DF6BF8 FSUB S2, S2, S10
	0x01DF6BFC FMUL S0, S0, S0
	0x01DF6C00 FMUL S1, S1, S1
	0x01DF6C04 FADD S0, S0, S1
	0x01DF6C08 FMUL S1, S2, S2
	0x01DF6C0C FADD S0, S1, S0
	0x01DF6C10 FCMP S0, S11
	0x01DF6C14 B.GT 0x1DF6C44
	0x01DF6C18 LDR W8, [X20 + 0x18]
	0x01DF6C1C ADD X21, X21, 0x1
	0x01DF6C20 ADD X22, X22, 0xC

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move V8, V0
	005 Move X19, X0
	006 Call MobController.set_navAgentSpeed, X0, V0
	007 Move X0, [X19+232]
	008 Compare X0, 0
	009 JumpIfEqual {17}
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Move V0, V8
	013 Move X1, X31
	014 Move V8, [X31+32]
	015 Call NavMeshAgent.set_speed, X0, V0
	016 Return 
	017 Call 0x1C17F20

Method: System.Void SetNavAgentAngularSpeed(System.Single speed)

Disassembly:
	0x01DF6C24 CMP X21, W8, SXTW
	0x01DF6C28 B.LT 0x1DF6BC8
	0x01DF6C2C LDR X8, [X19 + 0x150]
	0x01DF6C30 CBZ X8, 0x1DF6C6C
	0x01DF6C34 LDP S0, S1, [X8 + 0x28]
	0x01DF6C38 LDR V2, [X8 + 0x30]
	0x01DF6C3C MOV X0, X19
	0x01DF6C40 B 0x1DF6C54
	0x01DF6C44 MOV X0, X19
	0x01DF6C48 MOV V0.16B, V8.16B
	0x01DF6C4C MOV V1.16B, V9.16B
	0x01DF6C50 MOV V2.16B, V10.16B
	0x01DF6C54 LDP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move V8, V0
	005 Move X19, X0
	006 Call MobController.set_navAgentAngularSpeed, X0, V0
	007 Move X0, [X19+232]
	008 Compare X0, 0
	009 JumpIfEqual {17}
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Move V0, V8
	013 Move X1, X31
	014 Move V8, [X31+32]
	015 Call NavMeshAgent.set_angularSpeed, X0, V0
	016 Return 
	017 Call 0x1C17F20

Method: System.Void HandleIsDieChanged()

Disassembly:
	0x01DF6C58 LDP X22, X21, [X31 + 0x30]
	0x01DF6C5C LDR X30, [X31 + 0x20]
	0x01DF6C60 LDP D9, D8, [X31 + 0x10]
	0x01DF6C64 LDP D11, D10, [X31], #0x50
	0x01DF6C68 B 0x1DE9A40
	0x01DF6C6C BL 0x1C16F20
	0x01DF6C70 BL 0x1C16F28
	0x01DF6C74 SUB X31, X31, 0xF0
	0x01DF6C78 STP D15, D14, [X31 + 0x50]
	0x01DF6C7C STP D13, D12, [X31 + 0x60]
	0x01DF6C80 STP D11, D10, [X31 + 0x70]
	0x01DF6C84 STP D9, D8, [X31 + 0x80]
	0x01DF6C88 STP X29, X30, [X31 + 0x90]
	0x01DF6C8C STP X28, X27, [X31 + 0xA0]
	0x01DF6C90 STP X26, X25, [X31 + 0xB0]
	0x01DF6C94 STP X24, X23, [X31 + 0xC0]
	0x01DF6C98 STP X22, X21, [X31 + 0xD0]
	0x01DF6C9C STP X20, X19, [X31 + 0xE0]
	0x01DF6CA0 ADRP X21, 0x25E2000
	0x01DF6CA4 LDRB W8, [X21 + 0xD19]
	0x01DF6CA8 MOV X19, X1
	0x01DF6CAC MOV X20, X0
	0x01DF6CB0 TBNZ X8, 0x0, 0x1DF6D28
	0x01DF6CB4 ADRP X0, 0x2301000
	0x01DF6CB8 LDR X0, [X0 + 0x850]
	0x01DF6CBC BL 0x1C16CF4
	0x01DF6CC0 ADRP X0, 0x2303000
	0x01DF6CC4 LDR X0, [X0 + 0x418]
	0x01DF6CC8 BL 0x1C16CF4
	0x01DF6CCC ADRP X0, 0x2303000
	0x01DF6CD0 LDR X0, [X0 + 0x420]
	0x01DF6CD4 BL 0x1C16CF4
	0x01DF6CD8 ADRP X0, 0x2303000
	0x01DF6CDC LDR X0, [X0 + 0x428]
	0x01DF6CE0 BL 0x1C16CF4
	0x01DF6CE4 ADRP X0, 0x2303000
	0x01DF6CE8 LDR X0, [X0 + 0x150]
	0x01DF6CEC BL 0x1C16CF4
	0x01DF6CF0 ADRP X0, 0x2303000
	0x01DF6CF4 LDR X0, [X0 + 0x158]
	0x01DF6CF8 BL 0x1C16CF4
	0x01DF6CFC ADRP X0, 0x2302000
	0x01DF6D00 LDR X0, [X0 + 0xC40]
	0x01DF6D04 BL 0x1C16CF4
	0x01DF6D08 ADRP X0, 0x22FF000
	0x01DF6D0C LDR X0, [X0 + 0x9A0]
	0x01DF6D10 BL 0x1C16CF4
	0x01DF6D14 ADRP X0, 0x2303000
	0x01DF6D18 LDR X0, [X0 + 0x430]
	0x01DF6D1C BL 0x1C16CF4
	0x01DF6D20 MOVZ W8, 0x1
	0x01DF6D24 STRB W8, [X21 + 0xD19]
	0x01DF6D28 STP X31, X31, [X31 + 0x30]
	0x01DF6D2C STR X31, [X31 + 0x40]
	0x01DF6D30 LDR X8, [X19]
	0x01DF6D34 CBZ X8, 0x1DF70D0
	0x01DF6D38 LDP W2, W9, [X8 + 0x18]
	0x01DF6D3C ADD W9, W9, 0x1
	0x01DF6D40 CMP W2, 0x1
	0x01DF6D44 STP W31, W9, [X8 + 0x18]
	0x01DF6D48 B.LT 0x1DF6D5C
	0x01DF6D4C LDR X0, [X8 + 0x10]
	0x01DF6D50 MOV W1, W31
	0x01DF6D54 MOV X3, X31
	0x01DF6D58 BL 0x339FA34
	0x01DF6D5C CBZ X20, 0x1DF70D0
	0x01DF6D60 LDR X8, [X20 + 0xC0]
	0x01DF6D64 CBZ X8, 0x1DF70D0
	0x01DF6D68 LDR V8, [X8 + 0x70]
	0x01DF6D6C MOV X0, X20
	0x01DF6D70 BL 0x1DF4DCC
	0x01DF6D74 ADRP X8, 0xFFFFFFFFFECF4000
	0x01DF6D78 MOV V15.16B, V0.16B
	0x01DF6D7C LDR V0, [X8 + 0x104]
	0x01DF6D80 FMOV S1, 0.5

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Call MobController.get_isDie, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {16}
	013 Move X8, [X19]
	014 Move X9, [X8+840]
	015 Move X1, [X8+848]
	016 Move W8, [X19+416]
	017 Compare W8, 0
	018 JumpIfEqual {24}
	019 Move X8, [X19]
	020 Move X9, [X8+856]
	021 Move X1, [X8+864]
	022 Move X0, X19
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move W8, [X19+384]
	025 Compare W8, 0
	026 JumpIfEqual {88}
	027 Move X0, X19
	028 Call MobController.get_isDie, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {66}
	033 Move X0, X19
	034 Move X1, X31
	035 Call Component.get_transform, X0
	036 Compare X0, 0
	037 JumpIfEqual {95}
	038 Move X1, X31
	039 Call Transform.get_position, X0
	040 Move X20, 0x25E3000
	041 Move W8, [X20+1939]
	042 Move V8, V0
	043 Move V9, V1
	044 Move V10, V2
	045 Compare W8, 0
	046 JumpIfNotEqual {52}
	047 Move X0, 0x22FF000
	048 Move X0, [X0+1448]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X20+1939], W8
	052 Move X8, 0x22FF000
	053 Move X8, [X8+1448]
	054 Move W0, 128
	055 Move V0, V8
	056 Move V1, V9
	057 Move X8, [X8]
	058 Move V2, V10
	059 Move X1, X31
	060 Move X8, [X8+184]
	061 Move S3, [X8]
	062 Move S4, [X8+4]
	063 Move S5, [X8+8]
	064 Move S6, [X8+12]
	065 Call NetworkVFX.PlayVFXLocal, X0, X1, X2
	066 Move X0, [X19+200]
	067 Compare X0, 0
	068 JumpIfEqual {95}
	069 Move X1, X31
	070 Call Component.get_gameObject, X0
	071 Move X20, X0
	072 Move X0, X19
	073 Call MobController.get_isDie, X0
	074 Compare X20, 0
	075 JumpIfEqual {95}
	076 NotImplemented "Instruction ORN not yet implemented."
	077 Move X0, X20
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X30, [X31+24]
	081 Move D9, [X31+8]
	082 Move D8, [X31+16]
	083 And W1, W8, 1
	084 Move X2, X31
	085 Move V10, [X31+48]
	086 Call GameObject.SetActive, X0, X1
	087 Return 
	088 Move X20, [X31+32]
	089 Move X19, [X31+40]
	090 Move X30, [X31+24]
	091 Move D9, [X31+8]
	092 Move D8, [X31+16]
	093 Move V10, [X31+48]
	094 Return 
	095 Call 0x1C17F20

Method: System.Void HandleStatusChanged()

Disassembly:
	0x01DF6D84 FMUL S1, S8, S1

ISIL:
	001 Return 

Method: System.Void SetDie(System.Boolean isDie)

Disassembly:
	0x01DF6D88 FMUL S0, S1, S0
	0x01DF6D8C BL 0x3EB1BD0

ISIL:
	001 And W1, W1, 1
	002 Call MobController.set_isDie, X0, X1
	003 Return 

Method: System.Void SetStun(System.Boolean isStun, System.Single duration = 3)

Disassembly:
	0x01DF6D90 LDR X0, [X20 + 0xD0]
	0x01DF6D94 STR S0, [X31 + 0x10]
	0x01DF6D98 CBZ X0, 0x1DF70D0
	0x01DF6D9C MOV X1, X31
	0x01DF6DA0 BL 0x3C3F58C
	0x01DF6DA4 LDR X0, [X20 + 0xD0]
	0x01DF6DA8 CBZ X0, 0x1DF70D0
	0x01DF6DAC ADRP X20, 0x22FF000
	0x01DF6DB0 LDR X20, [X20 + 0x9A0]
	0x01DF6DB4 MOV X1, X31
	0x01DF6DB8 MOV V9.16B, V0.16B
	0x01DF6DBC MOV V10.16B, V1.16B
	0x01DF6DC0 MOV V11.16B, V2.16B
	0x01DF6DC4 BL 0x3C3FA04
	0x01DF6DC8 LDR X0, [X20]
	0x01DF6DCC STP S1, S0, [X31 + 0x8]
	0x01DF6DD0 STR S2, [X31 + 0x4]
	0x01DF6DD4 LDR W8, [X0 + 0xE0]
	0x01DF6DD8 CBNZ W8, 0x1DF6DE0
	0x01DF6DDC BL 0x1C16DFC
	0x01DF6DE0 ADRP X21, 0x25E2000
	0x01DF6DE4 LDRB W8, [X21 + 0xB6A]
	0x01DF6DE8 CBNZ W8, 0x1DF6E00
	0x01DF6DEC ADRP X0, 0x22FF000
	0x01DF6DF0 LDR X0, [X0 + 0x9A0]
	0x01DF6DF4 BL 0x1C16CF4
	0x01DF6DF8 MOVZ W8, 0x1
	0x01DF6DFC STRB W8, [X21 + 0xB6A]
	0x01DF6E00 LDR X0, [X20]
	0x01DF6E04 LDR W8, [X0 + 0xE0]
	0x01DF6E08 CBNZ W8, 0x1DF6E14
	0x01DF6E0C BL 0x1C16DFC
	0x01DF6E10 LDR X0, [X20]
	0x01DF6E14 LDR X8, [X0 + 0xB8]
	0x01DF6E18 LDR X0, [X8]
	0x01DF6E1C CBZ X0, 0x1DF70D0
	0x01DF6E20 ADRP X8, 0x2301000
	0x01DF6E24 LDR X8, [X8 + 0x850]
	0x01DF6E28 LDR X1, [X8]
	0x01DF6E2C BL 0x2B0EEFC
	0x01DF6E30 CBZ X0, 0x1DF70D0
	0x01DF6E34 ADRP X8, 0x2303000
	0x01DF6E38 LDR X8, [X8 + 0x430]
	0x01DF6E3C ADRP X24, 0x2303000
	0x01DF6E40 ADRP X25, 0x2303000
	0x01DF6E44 LDR X24, [X24 + 0x420]
	0x01DF6E48 LDR X25, [X25 + 0x150]
	0x01DF6E4C LDR X1, [X8]
	0x01DF6E50 ADRP X26, 0x2302000
	0x01DF6E54 ADRP X23, 0x2303000
	0x01DF6E58 LDR X26, [X26 + 0xC40]
	0x01DF6E5C LDR X23, [X23 + 0x418]
	0x01DF6E60 ADD X8, X31, 0x18
	0x01DF6E64 FMUL S14, S15, S15

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W20, W1
	007 Move X19, X0
	008 Move TEMP, X1
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {32}
	012 Move X0, X19
	013 Move V8, V0
	014 Call MobController.get_isDie, X0
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {46}
	019 Move X0, X19
	020 Call MobController.get_status, X0
	021 Or W1, W0, 1
	022 Move X0, X19
	023 Call MobController.set_status, X0, X1
	024 Move V0, [X19+140]
	025 Move X0, [X19+232]
	026 NotImplemented "Instruction FCMP not yet implemented."
	027 NotImplemented "Instruction FCSEL not yet implemented."
	028 Move [X19+140], S0
	029 Compare X0, 0
	030 JumpIfEqual {70}
	031 Move S0, W31
	032 Move X0, X19
	033 Call MobController.get_status, X0
	034 And W1, W0, 0xFFFFFFFE
	035 Move X0, X19
	036 Call MobController.set_status, X0, X1
	037 Move X21, [X19+232]
	038 Move X0, X19
	039 Move [X19+140], W31
	040 Call MobController.get_navAgentSpeed, X0
	041 Compare X21, 0
	042 JumpIfEqual {70}
	043 Move X0, X21
	044 Move X1, X31
	045 Call NavMeshAgent.set_speed, X0, V0
	046 Move X0, X19
	047 Call MobController.get_isDie, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {58}
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X30, [X31+16]
	055 Move X21, [X31+24]
	056 Move V8, [X31+48]
	057 Return 
	058 Move X8, [X19]
	059 Move V0, [X19+140]
	060 And W1, W20, 1
	061 Move X0, X19
	062 Move X3, [X8+824]
	063 Move X2, [X8+832]
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X30, [X31+16]
	067 Move X21, [X31+24]
	068 Move V8, [X31+48]
	069 CallNoReturn X3
	070 Call 0x1C17F20

Method: System.Void RPC_SetStunView(System.Boolean isStun, System.Single duration = 3)

Disassembly:
	0x01DF6E68 BL 0x27850A8
	0x01DF6E6C ADRP X9, 0xFFFFFFFFFECF4000
	0x01DF6E70 LDR V1, [X9 + 0x2EC]
	0x01DF6E74 ADRP X20, 0x22FD000
	0x01DF6E78 ADRP X10, 0xFFFFFFFFFECF4000
	0x01DF6E7C LDUR V0, [X31 + 0x18]
	0x01DF6E80 LDR X8, [X31 + 0x28]
	0x01DF6E84 LDR X20, [X20 + 0x5A8]
	0x01DF6E88 STR S1, [X31 + 0x14]
	0x01DF6E8C LDR V1, [X10 + 0x17C]
	0x01DF6E90 STR V0, [X31 + 0x3]
	0x01DF6E94 STR X8, [X31 + 0x40]
	0x01DF6E98 ADRP X21, 0x22FD000
	0x01DF6E9C STR S1, [X31]
	0x01DF6EA0 LDR X21, [X21 + 0x5A0]
	0x01DF6EA4 ADRP X27, 0x25E2000
	0x01DF6EA8 MOVZ W28, 0x1
	0x01DF6EAC ADRP X29, 0x25E2000
	0x01DF6EB0 LDR X1, [X24]
	0x01DF6EB4 ADD X0, X31, 0x30
	0x01DF6EB8 BL 0x2C1C378
	0x01DF6EBC TBZ X0, 0x0, 0x1DF708C
	0x01DF6EC0 LDR X22, [X31 + 0x40]
	0x01DF6EC4 CBZ X22, 0x1DF70C8
	0x01DF6EC8 MOV X0, X22
	0x01DF6ECC MOV X1, X31
	0x01DF6ED0 BL 0x1DB193C
	0x01DF6ED4 TBNZ X0, 0x0, 0x1DF6EB0
	0x01DF6ED8 MOV X0, X22
	0x01DF6EDC MOV X1, X31
	0x01DF6EE0 BL 0x3C32E90
	0x01DF6EE4 CBZ X0, 0x1DF70CC
	0x01DF6EE8 MOV X1, X31
	0x01DF6EEC BL 0x3C3F58C
	0x01DF6EF0 FSUB S8, S0, S9
	0x01DF6EF4 FSUB S12, S1, S10
	0x01DF6EF8 FSUB S13, S2, S11
	0x01DF6EFC FMUL S0, S8, S8
	0x01DF6F00 FMUL S1, S12, S12
	0x01DF6F04 FADD S0, S0, S1
	0x01DF6F08 FMUL S1, S13, S13
	0x01DF6F0C FADD S15, S1, S0
	0x01DF6F10 FCMP S15, S14
	0x01DF6F14 B.GT 0x1DF6EB0
	0x01DF6F18 LDR V0, [X31 + 0x14]
	0x01DF6F1C FCMP S15, S0
	0x01DF6F20 B.PL 0x1DF6F68
	0x01DF6F24 LDR X0, [X19]
	0x01DF6F28 CBZ X0, 0x1DF70D4
	0x01DF6F2C LDR W10, [X0 + 0x1C]
	0x01DF6F30 LDR X8, [X0 + 0x10]
	0x01DF6F34 LDR X9, [X25]
	0x01DF6F38 ADD W10, W10, 0x1
	0x01DF6F3C STR W10, [X0 + 0x1C]
	0x01DF6F40 CBZ X8, 0x1DF70D8
	0x01DF6F44 LDRSW X10, [X0 + 0x18]
	0x01DF6F48 LDR W11, [X8 + 0x18]
	0x01DF6F4C CMP W10, W11
	0x01DF6F50 B.CS 0x1DF7074
	0x01DF6F54 ADD W9, W10, 0x1
	0x01DF6F58 ADD X8, X8, X10, 0x3, LSL
	0x01DF6F5C STR W9, [X0 + 0x18]
	0x01DF6F60 STR X22, [X8 + 0x20]
	0x01DF6F64 B 0x1DF6EB0
	0x01DF6F68 LDRB W8, [X27 + 0x785]
	0x01DF6F6C CBNZ W8, 0x1DF6F7C
	0x01DF6F70 MOV X0, X20
	0x01DF6F74 BL 0x1C16CF4
	0x01DF6F78 STRB W28, [X27 + 0x785]
	0x01DF6F7C LDR X0, [X20]
	0x01DF6F80 LDR W8, [X0 + 0xE0]
	0x01DF6F84 CBNZ W8, 0x1DF6F8C
	0x01DF6F88 BL 0x1C16DFC
	0x01DF6F8C LDR V0, [X31]
	0x01DF6F90 FSQRT S15, S15
	0x01DF6F94 FCMP S15, S0
	0x01DF6F98 B.LE 0x1DF6FAC
	0x01DF6F9C FDIV S8, S8, S15
	0x01DF6FA0 FDIV S12, S12, S15
	0x01DF6FA4 FDIV S13, S13, S15
	0x01DF6FA8 B 0x1DF6FD0
	0x01DF6FAC LDRB W8, [X29 + 0x783]
	0x01DF6FB0 CBNZ W8, 0x1DF6FC0
	0x01DF6FB4 MOV X0, X21
	0x01DF6FB8 BL 0x1C16CF4
	0x01DF6FBC STRB W28, [X29 + 0x783]
	0x01DF6FC0 LDR X8, [X21]
	0x01DF6FC4 LDR X8, [X8 + 0xB8]
	0x01DF6FC8 LDP S8, S12, [X8]
	0x01DF6FCC LDR V13, [X8 + 0x8]
	0x01DF6FD0 LDP S1, S0, [X31 + 0x8]
	0x01DF6FD4 FMUL S0, S0, S8
	0x01DF6FD8 FMUL S1, S1, S12
	0x01DF6FDC FADD S0, S0, S1
	0x01DF6FE0 LDR V1, [X31 + 0x4]
	0x01DF6FE4 FMUL S1, S1, S13
	0x01DF6FE8 FADD S0, S1, S0
	0x01DF6FEC LDR V1, [X31 + 0x10]
	0x01DF6FF0 FCMP S0, S1
	0x01DF6FF4 B.LE 0x1DF6EB0
	0x01DF6FF8 LDR X0, [X26]
	0x01DF6FFC LDR W8, [X0 + 0xE0]
	0x01DF7000 CBNZ W8, 0x1DF7008
	0x01DF7004 BL 0x1C16DFC
	0x01DF7008 MOV V0.16B, V9.16B
	0x01DF700C MOV V1.16B, V10.16B
	0x01DF7010 MOV V2.16B, V11.16B
	0x01DF7014 MOV V3.16B, V8.16B
	0x01DF7018 MOV V4.16B, V12.16B
	0x01DF701C MOV V5.16B, V13.16B
	0x01DF7020 MOV V6.16B, V15.16B
	0x01DF7024 BL 0x1DF7F84
	0x01DF7028 TBZ X0, 0x0, 0x1DF6EB0
	0x01DF702C LDR X0, [X19]
	0x01DF7030 CBZ X0, 0x1DF70DC
	0x01DF7034 LDR W10, [X0 + 0x1C]
	0x01DF7038 LDR X8, [X0 + 0x10]
	0x01DF703C LDR X9, [X25]
	0x01DF7040 ADD W10, W10, 0x1

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x25E3000
	008 Move W8, [X21+3326]
	009 Move V8, V0
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x2301000
	017 Move X0, [X0+2680]
	018 Call 0x1C17CF4
	019 Move X0, 0x2304000
	020 Move X0, [X0+936]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3326], W8
	024 Move W8, [X20+88]
	025 Compare W8, 0
	026 JumpIfEqual {49}
	027 Move [X20+88], W31
	028 Move X0, X20
	029 Call MobController.get_isDie, X0
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {65}
	034 Move X0, [X20+200]
	035 Compare X0, 0
	036 JumpIfEqual {149}
	037 Move X8, [X0]
	038 And W1, W19, 1
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X3, [X8+568]
	044 Move X2, [X8+576]
	045 Move X30, [X31+8]
	046 Move V0, V8
	047 Move V8, [X31+48]
	048 CallNoReturn X3
	049 Move X22, 0x2301000
	050 Move X22, [X22+2680]
	051 Move X0, [X22]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X0, X20
	057 Move X1, X31
	058 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	059 Move X0, [X20+56]
	060 Compare X0, 0
	061 JumpIfEqual {149}
	062 Move X1, X31
	063 Call NetworkRunner.get_Stage, X0
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+8]
	070 Move V8, [X31+48]
	071 Return 
	072 Move X0, [X20+64]
	073 Compare X0, 0
	074 JumpIfEqual {149}
	075 Move X1, X31
	076 Call NetworkObject.GetLocalAuthorityMask, X0
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfEqual {101}
	081 Move X0, [X22]
	082 Move X19, [X20+64]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Move X8, 0x2304000
	088 Move X8, [X8+936]
	089 Move X1, X19
	090 Move X20, [X31+32]
	091 Move X19, [X31+40]
	092 Move X22, [X31+16]
	093 Move X21, [X31+24]
	094 Move X0, [X8]
	095 Move X30, [X31+8]
	096 Move W2, 1
	097 Move X3, X31
	098 Move V8, [X31+48]
	099 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	100 Return 
	101 Move X8, [X20+56]
	102 Compare X8, 0
	103 JumpIfEqual {149}
	104 Move W21, W0
	105 Move X0, [X8+80]
	106 Compare X0, 0
	107 JumpIfEqual {149}
	108 Move X1, X31
	109 Call Simulation.HasAnyActiveConnections, X0
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfNotEqual {148}
	114 Move X8, [X20+56]
	115 Compare X8, 0
	116 JumpIfEqual {149}
	117 Move X0, [X8+80]
	118 Move W1, 16
	119 Move X2, X31
	120 Call SimulationMessage.Allocate, X0, X1
	121 Move X8, [X20+64]
	122 Compare X8, 0
	123 JumpIfEqual {149}
	124 Move X8, [X8+32]
	125 Move X22, X0
	126 Compare X8, 0
	127 JumpIfEqual {129}
	128 Move W0, [X8]
	129 Move X0, X31
	130 Move W1, [X20+104]
	131 Move W2, 1
	132 Move X3, X31
	133 Call RpcHeader.Create, X0, X1, X2
	134 And W8, W19, 1
	135 Move [X22+28], X0
	136 Move [X22+36], W8
	137 Move [X22+40], S8
	138 Compare X22, 0
	139 JumpIfEqual {149}
	140 Move W8, 128
	141 Move [X22+12], W8
	142 Move X0, [X20+56]
	143 Compare X0, 0
	144 JumpIfEqual {149}
	145 Move X1, X22
	146 Move X2, X31
	147 Call NetworkRunner.SendRpc, X0, X1
	148 And W31, W21, 7
	149 Call 0x1C17F20

Method: System.Void HandleDie()

Disassembly:
	0x01DE9BF8 BL 0x1DC0890
	0x01DE9BFC LDR X0, [X19 + 0x160]
	0x01DE9C00 CBZ X0, 0x1DEA1BC
	0x01DE9C04 MOV X1, X31
	0x01DE9C08 MOV V8.16B, V0.16B
	0x01DE9C0C MOV V9.16B, V1.16B
	0x01DE9C10 MOV V10.16B, V2.16B
	0x01DE9C14 BL 0x3C32E90
	0x01DE9C18 CBZ X0, 0x1DEA1BC
	0x01DE9C1C MOV X1, X31
	0x01DE9C20 BL 0x3C3F58C
	0x01DE9C24 MOV X0, X31
	0x01DE9C28 BL 0x1DC0890
	0x01DE9C2C MOV X0, X19
	0x01DE9C30 MOV V11.16B, V0.16B
	0x01DE9C34 MOV V12.16B, V1.16B
	0x01DE9C38 MOV V13.16B, V2.16B
	0x01DE9C3C BL 0x1DE7D6C
	0x01DE9C40 LDR X0, [X19 + 0x160]
	0x01DE9C44 CBZ X0, 0x1DEA1BC
	0x01DE9C48 MOV X1, X31
	0x01DE9C4C MOV V14.16B, V1.16B
	0x01DE9C50 BL 0x3C32E90
	0x01DE9C54 CBZ X0, 0x1DEA1BC
	0x01DE9C58 MOV X1, X31
	0x01DE9C5C BL 0x3C3F58C
	0x01DE9C60 MOV X0, X19
	0x01DE9C64 MOV V15.16B, V1.16B
	0x01DE9C68 BL 0x1DEA458
	0x01DE9C6C LDR X8, [X19 + 0xC0]
	0x01DE9C70 CBZ X8, 0x1DEA1BC
	0x01DE9C74 LDR V1, [X8 + 0x28]
	0x01DE9C78 FCMP S0, S1
	0x01DE9C7C B.LT 0x1DE9D80
	0x01DE9C80 LDR V0, [X8 + 0x4C]
	0x01DE9C84 FABD S1, S14, S14
	0x01DE9C88 FCMP S1, S0
	0x01DE9C8C B.PL 0x1DE9D80
	0x01DE9C90 FSUB S1, S8, S11
	0x01DE9C94 FSUB S2, S9, S12
	0x01DE9C98 FSUB S3, S10, S13
	0x01DE9C9C FMUL S1, S1, S1
	0x01DE9CA0 FMUL S2, S2, S2
	0x01DE9CA4 FMUL S3, S3, S3
	0x01DE9CA8 FADD S1, S1, S2
	0x01DE9CAC FADD S1, S3, S1
	0x01DE9CB0 FMUL S0, S0, S0
	0x01DE9CB4 FCMP S1, S0
	0x01DE9CB8 B.PL 0x1DE9D80
	0x01DE9CBC FMOV S0, W31
	0x01DE9CC0 MOV X0, X19
	0x01DE9CC4 BL 0x1DE8788
	0x01DE9CC8 LDR X8, [X19 + 0xC0]
	0x01DE9CCC CBZ X8, 0x1DEA1BC
	0x01DE9CD0 LDR X20, [X19 + 0x160]
	0x01DE9CD4 LDR W21, [X8 + 0x24]
	0x01DE9CD8 MOV X0, X19
	0x01DE9CDC MOV X1, X31
	0x01DE9CE0 BL 0x3C32E90
	0x01DE9CE4 LDR X8, [X19 + 0xC0]
	0x01DE9CE8 CBZ X8, 0x1DEA1BC
	0x01DE9CEC LDR X9, [X19 + 0x40]
	0x01DE9CF0 MOV X2, X0
	0x01DE9CF4 CBZ X9, 0x1DE9D58
	0x01DE9CF8 LDR X9, [X9 + 0x20]
	0x01DE9CFC CBZ X9, 0x1DE9D58
	0x01DE9D00 LDR W6, [X9]
	0x01DE9D04 B 0x1DE9D5C
	0x01DE9D08 MOV X0, X19
	0x01DE9D0C BL 0x1DEA4E0
	0x01DE9D10 LDR X0, [X19 + 0x38]
	0x01DE9D14 CBZ X0, 0x1DEA1BC
	0x01DE9D18 MOV X1, X31
	0x01DE9D1C MOV V8.16B, V0.16B
	0x01DE9D20 BL 0x1E9E550
	0x01DE9D24 FADD S0, S8, S0
	0x01DE9D28 MOV X0, X19
	0x01DE9D2C BL 0x1DEA540
	0x01DE9D30 MOV X0, X19
	0x01DE9D34 BL 0x1DEA4E0
	0x01DE9D38 LDR X8, [X19 + 0xC0]
	0x01DE9D3C CBZ X8, 0x1DEA1BC
	0x01DE9D40 LDR V1, [X8 + 0x68]
	0x01DE9D44 FCMP S0, S1
	0x01DE9D48 B.LT 0x1DE9D80
	0x01DE9D4C MOV X0, X19
	0x01DE9D50 BL 0x1DE8AFC
	0x01DE9D54 B 0x1DE9D80
	0x01DE9D58 MOV X6, X31
	0x01DE9D5C CBZ X20, 0x1DEA1BC
	0x01DE9D60 LDR W9, [X19 + 0x68]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25F0000
	006 Move W8, [X20+3327]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x230F000
	013 Move X0, [X0+2144]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3327], W8
	017 Move X0, [X19+64]
	018 Compare X0, 0
	019 JumpIfEqual {86}
	020 Move W8, [X0+96]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 2
	023 Compare TEMP, 2
	024 JumpIfEqual {86}
	025 Move X1, X31
	026 Call NetworkObject.get_HasStateAuthority, X0
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {86}
	031 Move X8, [X19+192]
	032 Compare X8, 0
	033 JumpIfEqual {125}
	034 Move X0, [X19+56]
	035 Move V0, [X8+144]
	036 Move X1, X31
	037 Call TickTimer.CreateFromSeconds, X0, V0
	038 And X1, X0, 0
	039 Move X0, X19
	040 Call MobController.set__timerRevive, X0, X1
	041 Move X0, [X19+232]
	042 Compare X0, 0
	043 JumpIfEqual {125}
	044 Move X1, X31
	045 Call NavMeshAgent.get_isOnNavMesh, X0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {59}
	050 Move X0, [X19+232]
	051 Compare X0, 0
	052 JumpIfEqual {125}
	053 Move X1, X31
	054 Call NavMeshAgent.get_isOnOffMeshLink, X0
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {64}
	059 Move X0, [X19+232]
	060 Compare X0, 0
	061 JumpIfEqual {125}
	062 Move X1, X31
	063 Call NavMeshAgent.ResetPath, X0
	064 Move X21, 0x25F0000
	065 Move W8, [X21+1923]
	066 Move X20, [X19+232]
	067 Compare W8, 0
	068 JumpIfNotEqual {74}
	069 Move X0, 0x230B000
	070 Move X0, [X0+1440]
	071 Call 0x1C17CF4
	072 Move W8, 1
	073 Move [X21+1923], W8
	074 Compare X20, 0
	075 JumpIfEqual {125}
	076 Move X8, 0x230B000
	077 Move X8, [X8+1440]
	078 Move X0, X20
	079 Move X1, X31
	080 Move X8, [X8]
	081 Move X8, [X8+184]
	082 Move S1, [X8+4]
	083 Move S2, [X8+8]
	084 Move V0, [X8]
	085 Call NavMeshAgent.set_velocity, X0, X1
	086 Move X20, 0x230F000
	087 Move X20, [X20+2144]
	088 Move X0, [X20]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {94}
	092 Call 0x1C17DFC
	093 Move X0, [X20]
	094 Move X8, [X0+184]
	095 Move X20, [X8]
	096 Compare X20, 0
	097 JumpIfEqual {108}
	098 Move X0, [X19+64]
	099 Compare X0, 0
	100 JumpIfEqual {114}
	101 Move W8, [X0+96]
	102 Move TEMP, X8
	103 And TEMP, TEMP, 2
	104 Compare TEMP, 2
	105 JumpIfEqual {113}
	106 Move X1, X31
	107 Call NetworkObject.get_HasStateAuthority, X0
	108 Move X20, [X31+16]
	109 Move X19, [X31+24]
	110 Move X30, [X31+32]
	111 Move X21, [X31+40]
	112 Return 
	113 Move W0, W31
	114 Move X8, [X20+64]
	115 Move X4, [X20+24]
	116 Move X3, [X20+40]
	117 Move X1, X19
	118 Move X20, [X31+16]
	119 Move X19, [X31+24]
	120 And W2, W0, 1
	121 Move X0, X8
	122 Move X30, [X31+32]
	123 Move X21, [X31+40]
	124 CallNoReturn X4
	125 Call 0x1C17F20

Method: System.Void HandleRevive()

Disassembly:
	0x01DE99FC LDR X9, [X9 + 0x60]
	0x01DE9A00 CBZ X9, 0x1DE9A38
	0x01DE9A04 LDR W11, [X9 + 0x18]
	0x01DE9A08 CBZ W11, 0x1DE9A3C
	0x01DE9A0C LDR X11, [X19]
	0x01DE9A10 LDR V0, [X8 + 0x20]
	0x01DE9A14 LDR V1, [X10 + 0x20]
	0x01DE9A18 LDR V2, [X9 + 0x20]
	0x01DE9A1C LDR X3, [X11 + 0x2C8]
	0x01DE9A20 LDR X2, [X11 + 0x2D0]
	0x01DE9A24 MOV X0, X19
	0x01DE9A28 LDP X20, X19, [X31 + 0x10]
	0x01DE9A2C MOV W1, W31
	0x01DE9A30 LDR X30, [X31], #0x20
	0x01DE9A34 BR X3
	0x01DE9A38 BL 0x1C16F20
	0x01DE9A3C BL 0x1C16F28
	0x01DE9A40 STP X30, X19, [X31 - 0x10]!
	0x01DE9A44 LDR X8, [X0 + 0x50]
	0x01DE9A48 CBZ X8, 0x1DE9A5C
	0x01DE9A4C STP S0, S1, [X8 + 0x30]
	0x01DE9A50 STR S2, [X8 + 0x38]
	0x01DE9A54 LDP X30, X19, [X31], #0x10
	0x01DE9A58 RET
	0x01DE9A5C ADRP X0, 0x230A000
	0x01DE9A60 LDR X0, [X0 + 0x5B0]
	0x01DE9A64 BL 0x1C16D08
	0x01DE9A68 BL 0x1C16F10
	0x01DE9A6C MOV X19, X0
	0x01DE9A70 ADRP X0, 0x230F000
	0x01DE9A74 LDR X0, [X0 + 0xEA0]
	0x01DE9A78 BL 0x1C16D08
	0x01DE9A7C MOV X1, X0
	0x01DE9A80 MOV X0, X19
	0x01DE9A84 MOV X2, X31
	0x01DE9A88 BL 0x337DF1C
	0x01DE9A8C ADRP X0, 0x230F000
	0x01DE9A90 LDR X0, [X0 + 0xEA8]
	0x01DE9A94 BL 0x1C16D08
	0x01DE9A98 MOV X1, X0
	0x01DE9A9C MOV X0, X19
	0x01DE9AA0 BL 0x1C16DEC
	0x01DE9AA4 SUB X31, X31, 0x90

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move [X31+8], X31
	005 Move X19, X0
	006 Move X0, [X0+64]
	007 Compare X0, 0
	008 JumpIfEqual {52}
	009 Move W8, [X0+96]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 2
	012 Compare TEMP, 2
	013 JumpIfEqual {52}
	014 Move X1, X31
	015 Call NetworkObject.get_HasStateAuthority, X0
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfNotEqual {52}
	020 Move X0, X31
	021 Call TickTimer.get_None
	022 And X1, X0, 0
	023 Move X0, X19
	024 Call MobController.set__timerRevive, X0, X1
	025 Move X8, [X19+192]
	026 Compare X8, 0
	027 JumpIfEqual {62}
	028 Move W1, [X8+32]
	029 Move X0, X19
	030 Call MobController.set_health, X0, X1
	031 Move X8, [X19+192]
	032 Compare X8, 0
	033 JumpIfEqual {62}
	034 Move W8, [X8+140]
	035 Compare W8, 0
	036 JumpIfEqual {52}
	037 Add X1, X31, 8
	038 Move X0, X19
	039 Call MobController.TryGetRandomNavPoint, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {52}
	044 Move X8, [X31+8]
	045 Compare X8, 0
	046 JumpIfEqual {62}
	047 Move S0, [X8+40]
	048 Move S1, [X8+44]
	049 Move V2, [X8+48]
	050 Move X0, X19
	051 Call MobController.Respawn, X0, X1
	052 Move X0, [X19+200]
	053 Compare X0, 0
	054 JumpIfEqual {62}
	055 Move X8, [X0]
	056 Move X30, [X31+16]
	057 Move X19, [X31+24]
	058 Move X2, [X8+456]
	059 Move X1, [X8+464]
	060 Add X31, X31, 32
	061 CallNoReturn X2
	062 Call 0x1C17F20

Method: System.Boolean TryGetRandomNavPoint(out AnimalCompany.GameGen.NavPoint navPoint)

Disassembly:
	0x01DF7044 STR W10, [X0 + 0x1C]
	0x01DF7048 CBZ X8, 0x1DF70E0
	0x01DF704C LDRSW X10, [X0 + 0x18]
	0x01DF7050 LDR W11, [X8 + 0x18]
	0x01DF7054 CMP W10, W11
	0x01DF7058 B.CC 0x1DF6F54
	0x01DF705C LDR X8, [X9 + 0x20]
	0x01DF7060 LDR X8, [X8 + 0xC0]
	0x01DF7064 LDR X2, [X8 + 0x70]
	0x01DF7068 MOV X1, X22
	0x01DF706C BL 0x301BF90
	0x01DF7070 B 0x1DF6EB0
	0x01DF7074 LDR X8, [X9 + 0x20]
	0x01DF7078 LDR X8, [X8 + 0xC0]
	0x01DF707C LDR X2, [X8 + 0x70]
	0x01DF7080 MOV X1, X22
	0x01DF7084 BL 0x301BF90
	0x01DF7088 B 0x1DF6EB0
	0x01DF708C LDR X1, [X23]
	0x01DF7090 ADD X0, X31, 0x30
	0x01DF7094 BL 0x2C1C374
	0x01DF7098 LDP X20, X19, [X31 + 0xE0]
	0x01DF709C LDP X22, X21, [X31 + 0xD0]
	0x01DF70A0 LDP X24, X23, [X31 + 0xC0]
	0x01DF70A4 LDP X26, X25, [X31 + 0xB0]
	0x01DF70A8 LDP X28, X27, [X31 + 0xA0]
	0x01DF70AC LDP X29, X30, [X31 + 0x90]
	0x01DF70B0 LDP D9, D8, [X31 + 0x80]
	0x01DF70B4 LDP D11, D10, [X31 + 0x70]
	0x01DF70B8 LDP D13, D12, [X31 + 0x60]
	0x01DF70BC LDP D15, D14, [X31 + 0x50]
	0x01DF70C0 ADD X31, X31, 0xF0
	0x01DF70C4 RET
	0x01DF70C8 BL 0x1C16F20
	0x01DF70CC BL 0x1C16F20
	0x01DF70D0 BL 0x1C16F20
	0x01DF70D4 BL 0x1C16F20
	0x01DF70D8 BL 0x1C16F20
	0x01DF70DC BL 0x1C16F20
	0x01DF70E0 BL 0x1C16F20
	0x01DF70E4 B 0x1DF7114

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0x25E2000
	008 Move X21, 0x22FD000
	009 Move W8, [X22+3328]
	010 Move X21, [X21+1432]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x22FD000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3328], W8
	022 Add X8, X31, 8
	023 Move X0, X20
	024 Move [X31+8], X31
	025 Move [X31+16], X31
	026 Move [X31+24], X31
	027 Call MobController.get_navZone, X0
	028 Add X0, X31, 8
	029 Move X1, X31
	030 Call NavZone.GetRandomPoint, X0
	031 Move [X19], X0
	032 Move X20, X0
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X20
	039 Move X1, X31
	040 Move X2, X31
	041 Call Object.op_Equality, X0, X1
	042 Move X20, [X31+64]
	043 Move X19, [X31+72]
	044 Move X22, [X31+48]
	045 Move X21, [X31+56]
	046 Move X30, [X31+32]
	047 NotImplemented "Instruction ORN not yet implemented."
	048 And W0, W8, 1
	049 Add X31, X31, 80
	050 Return X0

Method: System.Void ResetNavPointsVisited()

Disassembly:
	0x01DF70E8 B 0x1DF7114
	0x01DF70EC B 0x1DF7114
	0x01DF70F0 B 0x1DF7114
	0x01DF70F4 B 0x1DF7114
	0x01DF70F8 B 0x1DF7114
	0x01DF70FC B 0x1DF7114
	0x01DF7100 B 0x1DF7114
	0x01DF7104 B 0x1DF7114
	0x01DF7108 B 0x1DF7114
	0x01DF710C B 0x1DF7114
	0x01DF7110 B 0x1DF7114
	0x01DF7114 MOV X19, X0
	0x01DF7118 CMP W1, 0x1
	0x01DF711C B.NE 0x1DF7148
	0x01DF7120 MOV X0, X19
	0x01DF7124 BL 0x3EB1AD0
	0x01DF7128 LDR X20, [X0]
	0x01DF712C BL 0x3EB1AE0
	0x01DF7130 LDR X1, [X23]
	0x01DF7134 ADD X0, X31, 0x30
	0x01DF7138 BL 0x2C1C374
	0x01DF713C CBZ X20, 0x1DF7098
	0x01DF7140 MOV X0, X20
	0x01DF7144 BL 0x1C16F18
	0x01DF7148 MOV X20, X31
	0x01DF714C B 0x1DF7154
	0x01DF7150 MOV X19, X0
	0x01DF7154 LDR X1, [X23]
	0x01DF7158 ADD X0, X31, 0x30
	0x01DF715C BL 0x2C1C374
	0x01DF7160 CBNZ X20, 0x1DF716C
	0x01DF7164 MOV X0, X19
	0x01DF7168 BL 0x1D2C690
	0x01DF716C MOV X0, X20
	0x01DF7170 BL 0x1C16F18
	0x01DF7174 BL 0x1990590
	0x01DF7178 STR D8, [X31 - 0x20]!
	0x01DF717C STR X30, [X31 + 0x8]
	0x01DF7180 STP X20, X19, [X31 + 0x10]
	0x01DF7184 ADRP X20, 0x25E1000
	0x01DF7188 LDRB W8, [X20 + 0xD0B]
	0x01DF718C MOV V8.16B, V0.16B
	0x01DF7190 MOV X19, X0
	0x01DF7194 TBNZ X8, 0x0, 0x1DF71B8
	0x01DF7198 ADRP X0, 0x22FF000
	0x01DF719C LDR X0, [X0 + 0xA78]
	0x01DF71A0 BL 0x1C16CF4
	0x01DF71A4 ADRP X0, 0x2302000
	0x01DF71A8 LDR X0, [X0 + 0x438]
	0x01DF71AC BL 0x1C16CF4
	0x01DF71B0 MOVZ W8, 0x1
	0x01DF71B4 STRB W8, [X20 + 0xD0B]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x25E2000
	006 Move W8, [X20+3329]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x2303000
	013 Move X0, [X0+944]
	014 Call 0x1C17CF4
	015 Move X0, 0x2303000
	016 Move X0, [X0+952]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3329], W8
	020 Move X8, [X19+320]
	021 Compare X8, 0
	022 JumpIfEqual {63}
	023 Move W2, [X8+24]
	024 Move W9, [X8+28]
	025 Add W9, W9, 1
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move [X8+24], W31
	028 Move [X8+28], W9
	029 Move X0, [X8+16]
	030 Move W1, W31
	031 Move X3, X31
	032 Call Array.Clear, X0, X1, X2
	033 Move X20, [X19+328]
	034 Compare X20, 0
	035 JumpIfEqual {63}
	036 Move W2, [X20+24]
	037 Move W8, [X20+28]
	038 Add W8, W8, 1
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move [X20+24], W31
	041 Move [X20+28], W8
	042 Move X0, [X20+16]
	043 Move W1, W31
	044 Move X3, X31
	045 Call Array.Clear, X0, X1, X2
	046 Move X20, [X19+328]
	047 Add X8, X31, 8
	048 Move X0, X19
	049 Call MobController.get_navZone, X0
	050 Compare X20, 0
	051 JumpIfEqual {63}
	052 Move X8, 0x2303000
	053 Move X8, [X8+944]
	054 Move X1, [X31+16]
	055 Move X0, X20
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X2, [X8]
	059 Move X30, [X31+32]
	060 Add X31, X31, 64
	061 Call List`1<Object>.AddRange, X0, X1
	062 Return 
	063 Call 0x1C17F20

Method: System.Boolean TryGetRandomNodeInRange(UnityEngine.Vector3 position, System.Single range, out AnimalCompany.GameGen.NavPoint targetNode)

Disassembly:
	0x01DF71B8 LDRB W8, [X19 + 0x58]
	0x01DF71BC CBZ W8, 0x1DF71EC
	0x01DF71C0 STRB W31, [X19 + 0x58]
	0x01DF71C4 LDR X8, [X19]
	0x01DF71C8 MOV X0, X19
	0x01DF71CC LDP X20, X19, [X31 + 0x10]
	0x01DF71D0 LDR X30, [X31 + 0x8]
	0x01DF71D4 LDR X3, [X8 + 0x328]
	0x01DF71D8 LDR X2, [X8 + 0x330]
	0x01DF71DC MOVZ W1, 0x1
	0x01DF71E0 MOV V0.16B, V8.16B
	0x01DF71E4 LDR V8, [X31], #0x20
	0x01DF71E8 BR X3
	0x01DF71EC ADRP X20, 0x22FF000
	0x01DF71F0 LDR X20, [X20 + 0xA78]
	0x01DF71F4 LDR X0, [X20]
	0x01DF71F8 LDR W8, [X0 + 0xE0]
	0x01DF71FC CBNZ W8, 0x1DF7204
	0x01DF7200 BL 0x1C16DFC
	0x01DF7204 MOV X0, X19
	0x01DF7208 MOV X1, X31
	0x01DF720C BL 0x1E77B08
	0x01DF7210 LDR X0, [X19 + 0x38]
	0x01DF7214 CBZ X0, 0x1DF7328
	0x01DF7218 MOV X1, X31
	0x01DF721C BL 0x1E9E538
	0x01DF7220 CMP W0, 0x4
	0x01DF7224 B.NE 0x1DF7238
	0x01DF7228 LDP X20, X19, [X31 + 0x10]
	0x01DF722C LDR X30, [X31 + 0x8]
	0x01DF7230 LDR V8, [X31], #0x20
	0x01DF7234 RET
	0x01DF7238 LDR X0, [X19 + 0x40]
	0x01DF723C CBZ X0, 0x1DF7328
	0x01DF7240 MOV X1, X31
	0x01DF7244 BL 0x1E94078
	0x01DF7248 ANDS W31, W0, 0x7
	0x01DF724C B.EQ 0x1DF72A4
	0x01DF7250 TBNZ X0, 0x0, 0x1DF71C4
	0x01DF7254 LDR X8, [X19 + 0x38]
	0x01DF7258 CBZ X8, 0x1DF7328
	0x01DF725C LDR X0, [X8 + 0x50]
	0x01DF7260 CBZ X0, 0x1DF7328
	0x01DF7264 MOV X1, X31
	0x01DF7268 BL 0x1EC4D00
	0x01DF726C TBZ X0, 0x0, 0x1DF7228
	0x01DF7270 LDR X8, [X19 + 0x38]
	0x01DF7274 CBZ X8, 0x1DF7328
	0x01DF7278 LDR X0, [X8 + 0x50]
	0x01DF727C MOVZ W1, 0xC
	0x01DF7280 MOV X2, X31
	0x01DF7284 BL 0x1ED9318
	0x01DF7288 LDR X8, [X19 + 0x40]
	0x01DF728C CBZ X8, 0x1DF7328
	0x01DF7290 LDR X8, [X8 + 0x20]
	0x01DF7294 MOV X20, X0
	0x01DF7298 CBZ X8, 0x1DF72E0
	0x01DF729C LDR W0, [X8]
	0x01DF72A0 B 0x1DF72E4
	0x01DF72A4 LDR X0, [X20]
	0x01DF72A8 LDR X19, [X19 + 0x40]
	0x01DF72AC LDR W8, [X0 + 0xE0]
	0x01DF72B0 CBNZ W8, 0x1DF72B8
	0x01DF72B4 BL 0x1C16DFC
	0x01DF72B8 ADRP X8, 0x2302000
	0x01DF72BC LDR X8, [X8 + 0x438]
	0x01DF72C0 MOV X1, X19
	0x01DF72C4 LDP X20, X19, [X31 + 0x10]
	0x01DF72C8 LDR X30, [X31 + 0x8]
	0x01DF72CC LDR X0, [X8]
	0x01DF72D0 MOVZ W2, 0x7
	0x01DF72D4 MOV X3, X31
	0x01DF72D8 LDR V8, [X31], #0x20
	0x01DF72DC B 0x1E77B00
	0x01DF72E0 MOV X0, X31
	0x01DF72E4 LDR W1, [X19 + 0x68]
	0x01DF72E8 MOVZ W2, 0x3
	0x01DF72EC MOV X3, X31
	0x01DF72F0 BL 0x1E9C23C
	0x01DF72F4 STUR X0, [X20 + 0x1C]
	0x01DF72F8 STR S8, [X20 + 0x24]
	0x01DF72FC CBZ X20, 0x1DF7328
	0x01DF7300 MOVZ W8, 0x60
	0x01DF7304 STR W8, [X20 + 0xC]
	0x01DF7308 LDR X0, [X19 + 0x38]
	0x01DF730C CBZ X0, 0x1DF7328
	0x01DF7310 MOV X1, X20
	0x01DF7314 LDP X20, X19, [X31 + 0x10]
	0x01DF7318 LDR X30, [X31 + 0x8]
	0x01DF731C MOV X2, X31
	0x01DF7320 LDR V8, [X31], #0x20
	0x01DF7324 B 0x1EA1E24
	0x01DF7328 BL 0x1C16F20
	0x01DF732C STR D12, [X31 - 0x40]!
	0x01DF7330 STP D11, D10, [X31 + 0x10]
	0x01DF7334 STP D9, D8, [X31 + 0x20]
	0x01DF7338 STP X30, X19, [X31 + 0x30]
	0x01DF733C MOV X19, X0
	0x01DF7340 LDR X0, [X0 + 0xD0]
	0x01DF7344 CBZ X0, 0x1DF73CC
	0x01DF7348 MOV X1, X31
	0x01DF734C MOV V8.16B, V4.16B
	0x01DF7350 MOV V9.16B, V3.16B
	0x01DF7354 MOV V10.16B, V2.16B
	0x01DF7358 MOV V11.16B, V1.16B
	0x01DF735C MOV V12.16B, V0.16B
	0x01DF7360 BL 0x3C3F58C
	0x01DF7364 MOV V4.16B, V0.16B
	0x01DF7368 MOV V5.16B, V1.16B
	0x01DF736C MOV V6.16B, V2.16B
	0x01DF7370 MOV V0.16B, V12.16B
	0x01DF7374 MOV V1.16B, V11.16B
	0x01DF7378 MOV V2.16B, V10.16B
	0x01DF737C MOV V3.16B, V9.16B
	0x01DF7380 MOV X0, X31
	0x01DF7384 BL 0x1DD7D5C
	0x01DF7388 FMUL S0, S0, S8
	0x01DF738C FCMP S0, 0x0
	0x01DF7390 B.LE 0x1DF73B8
	0x01DF7394 LDR X8, [X19]
	0x01DF7398 MOV X0, X19
	0x01DF739C LDP X30, X19, [X31 + 0x30]
	0x01DF73A0 LDP D9, D8, [X31 + 0x20]
	0x01DF73A4 LDR X2, [X8 + 0x3F8]
	0x01DF73A8 LDR X1, [X8 + 0x400]
	0x01DF73AC LDP D11, D10, [X31 + 0x10]
	0x01DF73B0 LDR V12, [X31], #0x40
	0x01DF73B4 BR X2
	0x01DF73B8 LDP X30, X19, [X31 + 0x30]
	0x01DF73BC LDP D9, D8, [X31 + 0x20]
	0x01DF73C0 LDP D11, D10, [X31 + 0x10]
	0x01DF73C4 LDR V12, [X31], #0x40
	0x01DF73C8 RET
	0x01DF73CC BL 0x1C16F20
	0x01DF73D0 STP X30, X21, [X31 - 0x20]!
	0x01DF73D4 STP X20, X19, [X31 + 0x10]
	0x01DF73D8 ADRP X20, 0x25E1000
	0x01DF73DC LDRB W8, [X20 + 0xD0C]
	0x01DF73E0 MOV X19, X0
	0x01DF73E4 TBNZ X8, 0x0, 0x1DF7408
	0x01DF73E8 ADRP X0, 0x22FF000
	0x01DF73EC LDR X0, [X0 + 0xA78]
	0x01DF73F0 BL 0x1C16CF4
	0x01DF73F4 ADRP X0, 0x2302000
	0x01DF73F8 LDR X0, [X0 + 0x440]
	0x01DF73FC BL 0x1C16CF4
	0x01DF7400 MOVZ W8, 0x1
	0x01DF7404 STRB W8, [X20 + 0xD0C]
	0x01DF7408 LDRB W8, [X19 + 0x58]
	0x01DF740C CBZ W8, 0x1DF7430
	0x01DF7410 STRB W31, [X19 + 0x58]
	0x01DF7414 LDR X0, [X19 + 0xC8]
	0x01DF7418 CBZ X0, 0x1DF755C
	0x01DF741C LDR X8, [X0]
	0x01DF7420 LDP X20, X19, [X31 + 0x10]
	0x01DF7424 LDP X2, X1, [X8 + 0x1D8]
	0x01DF7428 LDP X30, X21, [X31], #0x20
	0x01DF742C BR X2
	0x01DF7430 ADRP X21, 0x22FF000
	0x01DF7434 LDR X21, [X21 + 0xA78]
	0x01DF7438 LDR X0, [X21]
	0x01DF743C LDR W8, [X0 + 0xE0]
	0x01DF7440 CBNZ W8, 0x1DF7448
	0x01DF7444 BL 0x1C16DFC
	0x01DF7448 MOV X0, X19
	0x01DF744C MOV X1, X31
	0x01DF7450 BL 0x1E77B08
	0x01DF7454 LDR X0, [X19 + 0x38]
	0x01DF7458 CBZ X0, 0x1DF755C
	0x01DF745C MOV X1, X31
	0x01DF7460 BL 0x1E9E538
	0x01DF7464 CMP W0, 0x4
	0x01DF7468 B.NE 0x1DF7478
	0x01DF746C LDP X20, X19, [X31 + 0x10]
	0x01DF7470 LDP X30, X21, [X31], #0x20
	0x01DF7474 RET
	0x01DF7478 LDR X0, [X19 + 0x40]
	0x01DF747C CBZ X0, 0x1DF755C

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0x25E2000
	015 Move W8, [X21+3330]
	016 Move X19, X1
	017 Move V8, V3
	018 Move V9, V2
	019 Move V10, V1
	020 Move V11, V0
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {55}
	026 Move X0, 0x2303000
	027 Move X0, [X0+960]
	028 Call 0x1C17CF4
	029 Move X0, 0x22FD000
	030 Move X0, [X0+1496]
	031 Call 0x1C17CF4
	032 Move X0, 0x2303000
	033 Move X0, [X0+968]
	034 Call 0x1C17CF4
	035 Move X0, 0x2303000
	036 Move X0, [X0+952]
	037 Call 0x1C17CF4
	038 Move X0, 0x2303000
	039 Move X0, [X0+976]
	040 Call 0x1C17CF4
	041 Move X0, 0x2303000
	042 Move X0, [X0+984]
	043 Call 0x1C17CF4
	044 Move X0, 0x2303000
	045 Move X0, [X0+992]
	046 Call 0x1C17CF4
	047 Move X0, 0x22FD000
	048 Move X0, [X0+1432]
	049 Call 0x1C17CF4
	050 Move X0, 0x22FD000
	051 Move X0, [X0+1528]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X21+3330], W8
	055 Move [X31+8], X31
	056 Move [X19], X31
	057 Move X8, [X20+392]
	058 Compare X8, 0
	059 JumpIfEqual {203}
	060 Move W2, [X8+24]
	061 Move W9, [X8+28]
	062 Move X21, 0x22FD000
	063 Move X21, [X21+1496]
	064 Add W9, W9, 1
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move [X8+24], W31
	067 Move [X8+28], W9
	068 Move X0, [X8+16]
	069 Move W1, W31
	070 Move X3, X31
	071 Call Array.Clear, X0, X1, X2
	072 Move X0, [X21]
	073 Move X22, 0x22FD000
	074 Move W8, [X0+224]
	075 Move X22, [X22+1528]
	076 Compare W8, 0
	077 JumpIfNotEqual {80}
	078 Call 0x1C17DFC
	079 Move X0, [X21]
	080 Move X8, [X0+184]
	081 Move X1, X31
	082 Move W0, [X8+44]
	083 Call LayerMask.op_Implicit, X0
	084 Move X8, [X22]
	085 Move W21, W0
	086 Move W9, [X8+224]
	087 Compare W9, 0
	088 JumpIfNotEqual {91}
	089 Move X0, X8
	090 Call 0x1C17DFC
	091 Move V0, V11
	092 Move V1, V10
	093 Move V2, V9
	094 Move V3, V8
	095 Move W0, W21
	096 Move X1, X31
	097 Call Physics.OverlapSphere, X0, V0, X1
	098 Compare X0, 0
	099 JumpIfEqual {203}
	100 Move W8, [X0+24]
	101 Move X21, X0
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X23, 0x2303000
	104 Move X24, 0x2303000
	105 Move X25, 0x2303000
	106 Move X23, [X23+960]
	107 Move X24, [X24+976]
	108 Move X25, [X25+968]
	109 Move W22, W31
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Add X8, X21, W22
	112 Move X0, [X8+32]
	113 Compare X0, 0
	114 JumpIfEqual {203}
	115 Move X2, [X23]
	116 Add X1, X31, 8
	117 Call 0x21A5990, X0, X1
	118 Move TEMP, X0
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfNotEqual {154}
	122 Move X0, [X20+328]
	123 Compare X0, 0
	124 JumpIfEqual {203}
	125 Move X1, [X31+8]
	126 Move X2, [X24]
	127 Call List`1<Object>.Contains, X0, X1
	128 Move TEMP, X0
	129 And TEMP, TEMP, 1
	130 Compare TEMP, 1
	131 JumpIfNotEqual {154}
	132 Move X0, [X20+392]
	133 Compare X0, 0
	134 JumpIfEqual {203}
	135 Move W10, [X0+28]
	136 Move X1, [X31+8]
	137 Move X8, [X0+16]
	138 Move X9, [X25]
	139 Add W10, W10, 1
	140 Move [X0+28], W10
	141 Compare X8, 0
	142 JumpIfEqual {203}
	143 NotImplemented "Instruction LDRSW not yet implemented."
	144 Move W11, [X8+24]
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Add W9, W10, 1
	147 Add X8, X8, X10
	148 Move [X0+24], W9
	149 Move [X8+32], X1
	150 Move X8, [X9+32]
	151 Move X8, [X8+192]
	152 Move X2, [X8+112]
	153 Call List`1<Object>.AddWithResize, X0, X1
	154 Move W8, [X21+24]
	155 Add W22, W22, 1
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move X8, [X20+392]
	158 Compare X8, 0
	159 JumpIfEqual {203}
	160 Move W1, [X8+24]
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move W0, W31
	163 Move X2, X31
	164 Call Random.Range, X0, X1
	165 Move X8, [X20+392]
	166 Compare X8, 0
	167 JumpIfEqual {203}
	168 Move X9, 0x2303000
	169 Move X9, [X9+992]
	170 Move W1, W0
	171 Move X0, X8
	172 Move X2, [X9]
	173 Call List`1<Object>.get_Item, X0, X1
	174 Move X20, X0
	175 Move [X19], X0
	176 Move X20, [X19]
	177 Move X8, 0x22FD000
	178 Move X8, [X8+1432]
	179 Move X0, [X8]
	180 Move W8, [X0+224]
	181 Compare W8, 0
	182 JumpIfNotEqual {184}
	183 Call 0x1C17DFC
	184 Move X0, X20
	185 Move X1, X31
	186 Move X2, X31
	187 Call Object.op_Inequality, X0, X1
	188 Move X20, [X31+96]
	189 Move X19, [X31+104]
	190 Move X22, [X31+80]
	191 Move X21, [X31+88]
	192 Move X24, [X31+64]
	193 Move X23, [X31+72]
	194 Move X30, [X31+48]
	195 Move X25, [X31+56]
	196 Move D9, [X31+32]
	197 Move D8, [X31+40]
	198 Move D11, [X31+16]
	199 Move D10, [X31+24]
	200 And W0, W0, 1
	201 Add X31, X31, 112
	202 Return X0
	203 Call 0x1C17F20
	204 Call 0x1C17F28

Method: AnimalCompany.GameGen.NavPoint FindClosestNodeFromPosition(UnityEngine.Vector3 position)

Disassembly:
	0x01DF7480 MOV X1, X31
	0x01DF7484 BL 0x1E94078
	0x01DF7488 TBNZ X0, 0x0, 0x1DF74C4
	0x01DF748C LDR X0, [X21]
	0x01DF7490 LDR X19, [X19 + 0x40]
	0x01DF7494 LDR W8, [X0 + 0xE0]
	0x01DF7498 CBNZ W8, 0x1DF74A0
	0x01DF749C BL 0x1C16DFC
	0x01DF74A0 ADRP X8, 0x2302000
	0x01DF74A4 LDR X8, [X8 + 0x440]
	0x01DF74A8 MOV X1, X19
	0x01DF74AC LDP X20, X19, [X31 + 0x10]
	0x01DF74B0 MOVZ W2, 0x1
	0x01DF74B4 LDR X0, [X8]
	0x01DF74B8 MOV X3, X31
	0x01DF74BC LDP X30, X21, [X31], #0x20
	0x01DF74C0 B 0x1E77B00
	0x01DF74C4 LDR X8, [X19 + 0x38]
	0x01DF74C8 CBZ X8, 0x1DF755C
	0x01DF74CC MOV W20, W0
	0x01DF74D0 LDR X0, [X8 + 0x50]
	0x01DF74D4 CBZ X0, 0x1DF755C
	0x01DF74D8 MOV X1, X31
	0x01DF74DC BL 0x1EC4D00
	0x01DF74E0 TBZ X0, 0x0, 0x1DF7550
	0x01DF74E4 LDR X8, [X19 + 0x38]
	0x01DF74E8 CBZ X8, 0x1DF755C
	0x01DF74EC LDR X0, [X8 + 0x50]
	0x01DF74F0 MOVZ W1, 0x8
	0x01DF74F4 MOV X2, X31
	0x01DF74F8 BL 0x1ED9318
	0x01DF74FC LDR X8, [X19 + 0x40]
	0x01DF7500 CBZ X8, 0x1DF755C
	0x01DF7504 LDR X8, [X8 + 0x20]
	0x01DF7508 MOV X21, X0
	0x01DF750C CBZ X8, 0x1DF7518
	0x01DF7510 LDR W0, [X8]
	0x01DF7514 B 0x1DF751C
	0x01DF7518 MOV X0, X31
	0x01DF751C LDR W1, [X19 + 0x68]
	0x01DF7520 MOVZ W2, 0x4
	0x01DF7524 MOV X3, X31
	0x01DF7528 BL 0x1E9C23C
	0x01DF752C STUR X0, [X21 + 0x1C]
	0x01DF7530 CBZ X21, 0x1DF755C
	0x01DF7534 MOVZ W8, 0x40
	0x01DF7538 STR W8, [X21 + 0xC]
	0x01DF753C LDR X0, [X19 + 0x38]
	0x01DF7540 CBZ X0, 0x1DF755C
	0x01DF7544 MOV X1, X21
	0x01DF7548 MOV X2, X31
	0x01DF754C BL 0x1EA1E24
	0x01DF7550 ANDS W31, W20, 0x7
	0x01DF7554 B.NE 0x1DF7414
	0x01DF7558 B 0x1DF746C
	0x01DF755C BL 0x1C16F20
	0x01DF7560 STR D8, [X31 - 0x30]!
	0x01DF7564 STP X30, X21, [X31 + 0x10]
	0x01DF7568 STP X20, X19, [X31 + 0x20]
	0x01DF756C ADRP X20, 0x25E1000
	0x01DF7570 LDRB W8, [X20 + 0xD0D]
	0x01DF7574 MOV V8.16B, V0.16B
	0x01DF7578 MOV X19, X0
	0x01DF757C TBNZ X8, 0x0, 0x1DF75A0
	0x01DF7580 ADRP X0, 0x22FF000
	0x01DF7584 LDR X0, [X0 + 0xA78]
	0x01DF7588 BL 0x1C16CF4
	0x01DF758C ADRP X0, 0x2302000
	0x01DF7590 LDR X0, [X0 + 0x448]
	0x01DF7594 BL 0x1C16CF4
	0x01DF7598 MOVZ W8, 0x1
	0x01DF759C STRB W8, [X20 + 0xD0D]
	0x01DF75A0 LDRB W8, [X19 + 0x58]
	0x01DF75A4 CBZ W8, 0x1DF75D0
	0x01DF75A8 STRB W31, [X19 + 0x58]
	0x01DF75AC LDR X0, [X19 + 0xC8]
	0x01DF75B0 CBZ X0, 0x1DF7708
	0x01DF75B4 LDR X8, [X0]
	0x01DF75B8 LDP X20, X19, [X31 + 0x20]
	0x01DF75BC LDP X30, X21, [X31 + 0x10]
	0x01DF75C0 MOV V0.16B, V8.16B
	0x01DF75C4 LDP X2, X1, [X8 + 0x1E8]
	0x01DF75C8 LDR V8, [X31], #0x30
	0x01DF75CC BR X2
	0x01DF75D0 ADRP X21, 0x22FF000
	0x01DF75D4 LDR X21, [X21 + 0xA78]
	0x01DF75D8 LDR X0, [X21]
	0x01DF75DC LDR W8, [X0 + 0xE0]
	0x01DF75E0 CBNZ W8, 0x1DF75E8
	0x01DF75E4 BL 0x1C16DFC
	0x01DF75E8 MOV X0, X19
	0x01DF75EC MOV X1, X31
	0x01DF75F0 BL 0x1E77B08
	0x01DF75F4 LDR X0, [X19 + 0x38]
	0x01DF75F8 CBZ X0, 0x1DF7708
	0x01DF75FC MOV X1, X31
	0x01DF7600 BL 0x1E9E538
	0x01DF7604 CMP W0, 0x4
	0x01DF7608 B.NE 0x1DF761C
	0x01DF760C LDP X20, X19, [X31 + 0x20]
	0x01DF7610 LDP X30, X21, [X31 + 0x10]
	0x01DF7614 LDR V8, [X31], #0x30
	0x01DF7618 RET
	0x01DF761C LDR X0, [X19 + 0x40]
	0x01DF7620 CBZ X0, 0x1DF7708
	0x01DF7624 MOV X1, X31
	0x01DF7628 BL 0x1E94078
	0x01DF762C TBNZ X0, 0x0, 0x1DF766C
	0x01DF7630 LDR X0, [X21]
	0x01DF7634 LDR X19, [X19 + 0x40]
	0x01DF7638 LDR W8, [X0 + 0xE0]
	0x01DF763C CBNZ W8, 0x1DF7644
	0x01DF7640 BL 0x1C16DFC
	0x01DF7644 ADRP X8, 0x2302000
	0x01DF7648 LDR X8, [X8 + 0x448]
	0x01DF764C MOV X1, X19
	0x01DF7650 LDP X20, X19, [X31 + 0x20]
	0x01DF7654 LDP X30, X21, [X31 + 0x10]
	0x01DF7658 LDR X0, [X8]
	0x01DF765C MOVZ W2, 0x1
	0x01DF7660 MOV X3, X31
	0x01DF7664 LDR V8, [X31], #0x30
	0x01DF7668 B 0x1E77B00
	0x01DF766C LDR X8, [X19 + 0x38]
	0x01DF7670 CBZ X8, 0x1DF7708
	0x01DF7674 MOV W20, W0
	0x01DF7678 LDR X0, [X8 + 0x50]
	0x01DF767C CBZ X0, 0x1DF7708
	0x01DF7680 MOV X1, X31
	0x01DF7684 BL 0x1EC4D00
	0x01DF7688 TBZ X0, 0x0, 0x1DF76FC
	0x01DF768C LDR X8, [X19 + 0x38]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], D11
	003 Move [X31+56], D10
	004 Move [X31+64], D9
	005 Move [X31+72], D8
	006 Move [X31+80], X30
	007 Move [X31+88], X23
	008 Move [X31+96], X22
	009 Move [X31+104], X21
	010 Move [X31+112], X20
	011 Move [X31+120], X19
	012 Move X20, 0x25E2000
	013 Move W8, [X20+3331]
	014 Move V8, V2
	015 Move V9, V1
	016 Move V10, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {39}
	022 Move X0, 0x2303000
	023 Move X0, [X0+1000]
	024 Call 0x1C17CF4
	025 Move X0, 0x2303000
	026 Move X0, [X0+1008]
	027 Call 0x1C17CF4
	028 Move X0, 0x2303000
	029 Move X0, [X0+1016]
	030 Call 0x1C17CF4
	031 Move X0, 0x2303000
	032 Move X0, [X0+1024]
	033 Call 0x1C17CF4
	034 Move X0, 0x22FD000
	035 Move X0, [X0+1432]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+3331], W8
	039 Move [X31+24], X31
	040 Move [X31+32], X31
	041 Move [X31+40], X31
	042 Move [X31], X31
	043 Move [X31+8], X31
	044 Move [X31+16], X31
	045 Move X0, [X19+328]
	046 Compare X0, 0
	047 JumpIfEqual {127}
	048 Move X8, 0x2303000
	049 Move X8, [X8+1024]
	050 Move X22, 0x2303000
	051 Move X23, 0x22FD000
	052 Move X21, 0x2303000
	053 Move X1, [X8]
	054 Move X22, [X22+1008]
	055 Move X23, [X23+1432]
	056 Move X21, [X21+1000]
	057 Add X8, X31, 24
	058 Call List`1<Object>.GetEnumerator, X0
	059 Move TEMP, 0x80800000
	060 Not TEMP
	061 Move W9, TEMP
	062 Move X8, X31
	063 Move S0, W9
	064 Move X20, X8
	065 Move V11, V0
	066 Move X1, [X22]
	067 Add X0, X31, 24
	068 Call Enumerator<Object>.MoveNext, X0
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {88}
	073 Move X8, [X31+40]
	074 Compare X8, 0
	075 JumpIfEqual {126}
	076 Move S0, [X8+40]
	077 Move S1, [X8+44]
	078 Move V2, [X8+48]
	079 Subtract S0, S10, S0
	080 Subtract S1, S9, S1
	081 Subtract S2, S8, S2
	082 Multiply S0, S0, S0
	083 Multiply S1, S1, S1
	084 Add S0, S0, S1
	085 Multiply S1, S2, S2
	086 Add S0, S0, S1
	087 NotImplemented "Instruction FCMP not yet implemented."
	088 Move X1, [X21]
	089 Add X0, X31, 24
	090 Call Enumerator<Object>.Dispose, X0
	091 Move X0, [X23]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X0, X20
	097 Move X1, X31
	098 Move X2, X31
	099 Call Object.op_Equality, X0, X1
	100 Move TEMP, X0
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfNotEqual {113}
	104 Add X8, X31, 0
	105 Move X0, X19
	106 Call MobController.get_navZone, X0
	107 Add X0, X31, 0
	108 Move X1, X31
	109 Call NavZone.GetRandomPoint, X0
	110 Move X20, X0
	111 Move X0, X19
	112 Call MobController.ResetNavPointsVisited, X0
	113 Move X0, X20
	114 Move X20, [X31+112]
	115 Move X19, [X31+120]
	116 Move X22, [X31+96]
	117 Move X21, [X31+104]
	118 Move X30, [X31+80]
	119 Move X23, [X31+88]
	120 Move D9, [X31+64]
	121 Move D8, [X31+72]
	122 Move D11, [X31+48]
	123 Move D10, [X31+56]
	124 Add X31, X31, 128
	125 Return X0
	126 Call 0x1C17F20
	127 Call 0x1C17F20
	128 Move X22, X0
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move X0, X22
	131 Call 0x3EB2AD0
	132 Move X21, [X0]
	133 Call 0x3EB2AE0
	134 Move X8, 0x2303000
	135 Move X8, [X8+1000]
	136 Add X0, X31, 24
	137 Move X1, [X8]
	138 Call Enumerator<Object>.Dispose, X0
	139 Compare X21, 0
	140 JumpIfEqual {91}
	141 Move X0, X21
	142 Call 0x1C17F18
	143 Move X21, X31
	144 Move X22, X0
	145 Move X8, 0x2303000
	146 Move X8, [X8+1000]
	147 Move X1, [X8]
	148 Add X0, X31, 24
	149 Call Enumerator<Object>.Dispose, X0
	150 Compare X21, 0
	151 JumpIfNotEqual {154}
	152 Move X0, X22
	153 Call 0x1D2D690
	154 Move X0, X21
	155 Call 0x1C17F18
	156 Call 0x1991590

Method: System.Void MarkExploredNodesInRange(UnityEngine.Vector3 position, System.Single range)

Disassembly:
	0x01DF7690 CBZ X8, 0x1DF7708
	0x01DF7694 LDR X0, [X8 + 0x50]
	0x01DF7698 MOVZ W1, 0xC
	0x01DF769C MOV X2, X31
	0x01DF76A0 BL 0x1ED9318
	0x01DF76A4 LDR X8, [X19 + 0x40]
	0x01DF76A8 CBZ X8, 0x1DF7708
	0x01DF76AC LDR X8, [X8 + 0x20]
	0x01DF76B0 MOV X21, X0
	0x01DF76B4 CBZ X8, 0x1DF76C0
	0x01DF76B8 LDR W0, [X8]
	0x01DF76BC B 0x1DF76C4
	0x01DF76C0 MOV X0, X31
	0x01DF76C4 LDR W1, [X19 + 0x68]
	0x01DF76C8 MOVZ W2, 0x5
	0x01DF76CC MOV X3, X31
	0x01DF76D0 BL 0x1E9C23C
	0x01DF76D4 STUR X0, [X21 + 0x1C]
	0x01DF76D8 STR S8, [X21 + 0x24]
	0x01DF76DC CBZ X21, 0x1DF7708
	0x01DF76E0 MOVZ W8, 0x60
	0x01DF76E4 STR W8, [X21 + 0xC]
	0x01DF76E8 LDR X0, [X19 + 0x38]
	0x01DF76EC CBZ X0, 0x1DF7708
	0x01DF76F0 MOV X1, X21
	0x01DF76F4 MOV X2, X31
	0x01DF76F8 BL 0x1EA1E24
	0x01DF76FC ANDS W31, W20, 0x7
	0x01DF7700 B.NE 0x1DF75AC
	0x01DF7704 B 0x1DF760C
	0x01DF7708 BL 0x1C16F20
	0x01DF770C SUB X31, X31, 0x90
	0x01DF7710 STR D10, [X31 + 0x40]
	0x01DF7714 STP D9, D8, [X31 + 0x50]
	0x01DF7718 STP X30, X23, [X31 + 0x60]
	0x01DF771C STP X22, X21, [X31 + 0x70]
	0x01DF7720 STP X20, X19, [X31 + 0x80]
	0x01DF7724 ADRP X21, 0x25E1000
	0x01DF7728 ADRP X20, 0x22FC000
	0x01DF772C LDRB W8, [X21 + 0xD0F]
	0x01DF7730 LDR X20, [X20 + 0x970]
	0x01DF7734 MOV X19, X0
	0x01DF7738 TBNZ X8, 0x0, 0x1DF778C
	0x01DF773C ADRP X0, 0x22FC000
	0x01DF7740 LDR X0, [X0 + 0x970]
	0x01DF7744 BL 0x1C16CF4
	0x01DF7748 ADRP X0, 0x2301000
	0x01DF774C LDR X0, [X0 + 0xBC0]
	0x01DF7750 BL 0x1C16CF4
	0x01DF7754 ADRP X0, 0x2302000
	0x01DF7758 LDR X0, [X0 + 0x3E8]
	0x01DF775C BL 0x1C16CF4
	0x01DF7760 ADRP X0, 0x2302000
	0x01DF7764 LDR X0, [X0 + 0x3F0]
	0x01DF7768 BL 0x1C16CF4
	0x01DF776C ADRP X0, 0x2302000
	0x01DF7770 LDR X0, [X0 + 0x3F8]
	0x01DF7774 BL 0x1C16CF4
	0x01DF7778 ADRP X0, 0x2302000
	0x01DF777C LDR X0, [X0 + 0x400]
	0x01DF7780 BL 0x1C16CF4
	0x01DF7784 MOVZ W8, 0x1
	0x01DF7788 STRB W8, [X21 + 0xD0F]
	0x01DF778C LDR X0, [X20]
	0x01DF7790 STP X31, X31, [X31 + 0x20]
	0x01DF7794 STR X31, [X31 + 0x30]
	0x01DF7798 LDR W8, [X0 + 0xE0]
	0x01DF779C CBNZ W8, 0x1DF77A4
	0x01DF77A0 BL 0x1C16DFC
	0x01DF77A4 MOV X0, X31
	0x01DF77A8 BL 0x3C018E4
	0x01DF77AC TBZ X0, 0x0, 0x1DF7988
	0x01DF77B0 LDR X0, [X19 + 0x140]
	0x01DF77B4 CBZ X0, 0x1DF79AC
	0x01DF77B8 ADRP X23, 0x2302000
	0x01DF77BC LDR X23, [X23 + 0x400]
	0x01DF77C0 ADD X8, X31, 0x8
	0x01DF77C4 LDR X1, [X23]
	0x01DF77C8 BL 0x301CB58
	0x01DF77CC LDUR V0, [X31 + 0x8]
	0x01DF77D0 LDR X8, [X31 + 0x18]
	0x01DF77D4 ADRP X9, 0xFFFFFFFFFECF3000
	0x01DF77D8 ADRP X22, 0x2302000
	0x01DF77DC STR V0, [X31 + 0x2]
	0x01DF77E0 STR X8, [X31 + 0x30]
	0x01DF77E4 LDR V8, [X9 + 0xBC]
	0x01DF77E8 LDR X22, [X22 + 0x3F0]
	0x01DF77EC LDR X1, [X22]
	0x01DF77F0 ADD X0, X31, 0x20
	0x01DF77F4 BL 0x2BC4350
	0x01DF77F8 TBZ X0, 0x0, 0x1DF7834
	0x01DF77FC LDR X20, [X31 + 0x30]
	0x01DF7800 FMOV S0, 0.5
	0x01DF7804 FMOV S1, 0.5
	0x01DF7808 FMOV S2, 0.5
	0x01DF780C FMOV S3, 1
	0x01DF7810 MOV X0, X31
	0x01DF7814 BL 0x3C0D030
	0x01DF7818 CBZ X20, 0x1DF79A4
	0x01DF781C LDP S0, S1, [X20 + 0x28]
	0x01DF7820 LDR V2, [X20 + 0x30]
	0x01DF7824 MOV V3.16B, V8.16B
	0x01DF7828 MOV X0, X31
	0x01DF782C BL 0x3C0CC38
	0x01DF7830 B 0x1DF77EC
	0x01DF7834 ADRP X8, 0x2302000
	0x01DF7838 LDR X8, [X8 + 0x3E8]
	0x01DF783C ADD X0, X31, 0x20
	0x01DF7840 LDR X1, [X8]
	0x01DF7844 BL 0x2BC434C
	0x01DF7848 LDR X0, [X19 + 0x148]
	0x01DF784C CBZ X0, 0x1DF79AC
	0x01DF7850 LDR X1, [X23]
	0x01DF7854 ADD X8, X31, 0x8
	0x01DF7858 BL 0x301CB58
	0x01DF785C LDUR V0, [X31 + 0x8]
	0x01DF7860 LDR X8, [X31 + 0x18]
	0x01DF7864 STR V0, [X31 + 0x2]
	0x01DF7868 STR X8, [X31 + 0x30]
	0x01DF786C LDR X1, [X22]
	0x01DF7870 ADD X0, X31, 0x20
	0x01DF7874 BL 0x2BC4350
	0x01DF7878 TBZ X0, 0x0, 0x1DF78B4
	0x01DF787C LDR X20, [X31 + 0x30]
	0x01DF7880 FMOV S0, W31
	0x01DF7884 FMOV S1, 1
	0x01DF7888 FMOV S2, W31
	0x01DF788C FMOV S3, 1
	0x01DF7890 MOV X0, X31
	0x01DF7894 BL 0x3C0D030
	0x01DF7898 CBZ X20, 0x1DF79A8
	0x01DF789C LDP S0, S1, [X20 + 0x28]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0x25E2000
	015 Move X20, 0x22FD000
	016 Move W8, [X21+3332]
	017 Move X20, [X20+1496]
	018 Move V8, V3
	019 Move V9, V2
	020 Move V10, V1
	021 Move V11, V0
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {47}
	027 Move X0, 0x2303000
	028 Move X0, [X0+960]
	029 Call 0x1C17CF4
	030 Move X0, 0x22FD000
	031 Move X0, [X0+1496]
	032 Call 0x1C17CF4
	033 Move X0, 0x2303000
	034 Move X0, [X0+968]
	035 Call 0x1C17CF4
	036 Move X0, 0x2303000
	037 Move X0, [X0+976]
	038 Call 0x1C17CF4
	039 Move X0, 0x2303000
	040 Move X0, [X0+1032]
	041 Call 0x1C17CF4
	042 Move X0, 0x22FD000
	043 Move X0, [X0+1528]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X21+3332], W8
	047 Move X0, [X20]
	048 Move [X31+8], X31
	049 Move X21, 0x22FD000
	050 Move W8, [X0+224]
	051 Move X21, [X21+1528]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X20]
	056 Move X8, [X0+184]
	057 Move X1, X31
	058 Move W0, [X8+44]
	059 Call LayerMask.op_Implicit, X0
	060 Move X8, [X21]
	061 Move W20, W0
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Move X0, X8
	066 Call 0x1C17DFC
	067 Move V0, V11
	068 Move V1, V10
	069 Move V2, V9
	070 Move V3, V8
	071 Move W0, W20
	072 Move X1, X31
	073 Call Physics.OverlapSphere, X0, V0, X1
	074 Compare X0, 0
	075 JumpIfEqual {155}
	076 Move W8, [X0+24]
	077 Move X20, X0
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X22, 0x2303000
	080 Move X23, 0x2303000
	081 Move X24, 0x2303000
	082 Move X25, 0x2303000
	083 Move X22, [X22+960]
	084 Move X23, [X23+976]
	085 Move X24, [X24+1032]
	086 Move X25, [X25+968]
	087 Move W21, W31
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Add X8, X20, W21
	090 Move X0, [X8+32]
	091 Compare X0, 0
	092 JumpIfEqual {155}
	093 Move X2, [X22]
	094 Add X1, X31, 8
	095 Call 0x21A5990, X0, X1
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {138}
	100 Move X0, [X19+328]
	101 Compare X0, 0
	102 JumpIfEqual {155}
	103 Move X1, [X31+8]
	104 Move X2, [X23]
	105 Call List`1<Object>.Contains, X0, X1
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfNotEqual {138}
	110 Move X0, [X19+328]
	111 Compare X0, 0
	112 JumpIfEqual {155}
	113 Move X1, [X31+8]
	114 Move X2, [X24]
	115 Call List`1<Object>.Remove, X0, X1
	116 Move X0, [X19+320]
	117 Compare X0, 0
	118 JumpIfEqual {155}
	119 Move W10, [X0+28]
	120 Move X1, [X31+8]
	121 Move X8, [X0+16]
	122 Move X9, [X25]
	123 Add W10, W10, 1
	124 Move [X0+28], W10
	125 Compare X8, 0
	126 JumpIfEqual {155}
	127 NotImplemented "Instruction LDRSW not yet implemented."
	128 Move W11, [X8+24]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Add W9, W10, 1
	131 Add X8, X8, X10
	132 Move [X0+24], W9
	133 Move [X8+32], X1
	134 Move X8, [X9+32]
	135 Move X8, [X8+192]
	136 Move X2, [X8+112]
	137 Call List`1<Object>.AddWithResize, X0, X1
	138 Move W8, [X20+24]
	139 Add W21, W21, 1
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X20, [X31+96]
	142 Move X19, [X31+104]
	143 Move X22, [X31+80]
	144 Move X21, [X31+88]
	145 Move X24, [X31+64]
	146 Move X23, [X31+72]
	147 Move X30, [X31+48]
	148 Move X25, [X31+56]
	149 Move D9, [X31+32]
	150 Move D8, [X31+40]
	151 Move D11, [X31+16]
	152 Move D10, [X31+24]
	153 Add X31, X31, 112
	154 Return 
	155 Call 0x1C17F20
	156 Call 0x1C17F28

Method: System.Void SetRoamingTarget(System.Boolean initialize = False)

Disassembly:
	0x01DF78A0 LDR V2, [X20 + 0x30]
	0x01DF78A4 MOV V3.16B, V8.16B
	0x01DF78A8 MOV X0, X31
	0x01DF78AC BL 0x3C0CC38
	0x01DF78B0 B 0x1DF786C
	0x01DF78B4 ADRP X8, 0x2302000
	0x01DF78B8 LDR X8, [X8 + 0x3E8]
	0x01DF78BC ADD X0, X31, 0x20
	0x01DF78C0 LDR X1, [X8]
	0x01DF78C4 BL 0x2BC434C
	0x01DF78C8 ADRP X20, 0x2301000
	0x01DF78CC LDR X20, [X20 + 0xBC0]
	0x01DF78D0 LDR X0, [X20]
	0x01DF78D4 LDR W8, [X0 + 0xE0]
	0x01DF78D8 CBNZ W8, 0x1DF78E4
	0x01DF78DC BL 0x1C16DFC
	0x01DF78E0 LDR X0, [X20]
	0x01DF78E4 LDR X8, [X0 + 0xB8]
	0x01DF78E8 MOV X0, X31
	0x01DF78EC LDP S0, S1, [X8 + 0x70]
	0x01DF78F0 LDP S2, S3, [X8 + 0x78]
	0x01DF78F4 BL 0x3C0D030
	0x01DF78F8 LDR X0, [X19 + 0xD0]
	0x01DF78FC CBZ X0, 0x1DF79AC
	0x01DF7900 MOV X1, X31
	0x01DF7904 BL 0x3C3F58C
	0x01DF7908 MOV X0, X19
	0x01DF790C MOV V8.16B, V0.16B
	0x01DF7910 MOV V9.16B, V1.16B
	0x01DF7914 MOV V10.16B, V2.16B
	0x01DF7918 BL 0x1DF4B6C
	0x01DF791C MOV V3.16B, V0.16B
	0x01DF7920 MOV V0.16B, V8.16B
	0x01DF7924 MOV V1.16B, V9.16B
	0x01DF7928 MOV V2.16B, V10.16B
	0x01DF792C MOV X0, X31
	0x01DF7930 BL 0x3C0CB98
	0x01DF7934 LDR X8, [X20]
	0x01DF7938 MOV X0, X31
	0x01DF793C LDR X8, [X8 + 0xB8]
	0x01DF7940 LDP S0, S1, [X8 + 0x80]
	0x01DF7944 LDP S2, S3, [X8 + 0x88]
	0x01DF7948 BL 0x3C0D030
	0x01DF794C LDR X0, [X19 + 0xD0]
	0x01DF7950 CBZ X0, 0x1DF79AC
	0x01DF7954 MOV X1, X31
	0x01DF7958 BL 0x3C3F58C
	0x01DF795C MOV X0, X19
	0x01DF7960 MOV V8.16B, V0.16B
	0x01DF7964 MOV V9.16B, V1.16B
	0x01DF7968 MOV V10.16B, V2.16B
	0x01DF796C BL 0x1DF4C2C
	0x01DF7970 MOV V3.16B, V0.16B
	0x01DF7974 MOV V0.16B, V8.16B
	0x01DF7978 MOV V1.16B, V9.16B
	0x01DF797C MOV V2.16B, V10.16B
	0x01DF7980 MOV X0, X31
	0x01DF7984 BL 0x3C0CB98
	0x01DF7988 LDP X20, X19, [X31 + 0x80]
	0x01DF798C LDP X22, X21, [X31 + 0x70]
	0x01DF7990 LDP X30, X23, [X31 + 0x60]
	0x01DF7994 LDP D9, D8, [X31 + 0x50]
	0x01DF7998 LDR V10, [X31 + 0x40]
	0x01DF799C ADD X31, X31, 0x90
	0x01DF79A0 RET
	0x01DF79A4 BL 0x1C16F20
	0x01DF79A8 BL 0x1C16F20
	0x01DF79AC BL 0x1C16F20
	0x01DF79B0 B 0x1DF79C8
	0x01DF79B4 B 0x1DF79C8
	0x01DF79B8 B 0x1DF79C8
	0x01DF79BC B 0x1DF7A2C
	0x01DF79C0 B 0x1DF7A2C
	0x01DF79C4 B 0x1DF7A2C
	0x01DF79C8 MOV X20, X0
	0x01DF79CC CMP W1, 0x1
	0x01DF79D0 B.NE 0x1DF7A00
	0x01DF79D4 MOV X0, X20
	0x01DF79D8 BL 0x3EB1AD0
	0x01DF79DC LDR X21, [X0]
	0x01DF79E0 BL 0x3EB1AE0
	0x01DF79E4 ADRP X8, 0x2302000
	0x01DF79E8 LDR X8, [X8 + 0x3E8]
	0x01DF79EC ADD X0, X31, 0x20
	0x01DF79F0 LDR X1, [X8]
	0x01DF79F4 BL 0x2BC434C
	0x01DF79F8 CBZ X21, 0x1DF78C8
	0x01DF79FC B 0x1DF7A60
	0x01DF7A00 MOV X21, X31
	0x01DF7A04 B 0x1DF7A0C
	0x01DF7A08 MOV X20, X0
	0x01DF7A0C ADRP X8, 0x2302000
	0x01DF7A10 LDR X8, [X8 + 0x3E8]
	0x01DF7A14 LDR X1, [X8]
	0x01DF7A18 ADD X0, X31, 0x20
	0x01DF7A1C BL 0x2BC434C
	0x01DF7A20 CBZ X21, 0x1DF7A8C

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0x25E2000
	013 Move X22, 0x22FD000
	014 Move W8, [X21+3333]
	015 Move X22, [X22+1432]
	016 Move W20, W1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0x2303000
	023 Move X0, [X0+984]
	024 Call 0x1C17CF4
	025 Move X0, 0x22FD000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+3333], W8
	030 Move X0, [X22]
	031 Move X21, [X19+336]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X21
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Inequality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {69}
	044 Move X8, [X19+336]
	045 Compare X8, 0
	046 JumpIfEqual {130}
	047 Move S8, [X8+40]
	048 Move S9, [X8+44]
	049 Move V10, [X8+48]
	050 Move TEMP, X20
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfEqual {81}
	054 Move X0, [X22]
	055 Move X20, [X19+344]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X20
	061 Move X1, X31
	062 Move X2, X31
	063 Call Object.op_Inequality, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {83}
	068 Move X0, [X19+344]
	069 Move X0, [X19+208]
	070 Compare X0, 0
	071 JumpIfEqual {130}
	072 Move X1, X31
	073 Call Transform.get_position, X0
	074 Move V8, V0
	075 Move V9, V1
	076 Move V10, V2
	077 Move TEMP, X20
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {54}
	081 Move X0, X19
	082 Call MobController.ResetNavPointsVisited, X0
	083 Move X0, [X19+208]
	084 Compare X0, 0
	085 JumpIfEqual {130}
	086 Move X1, X31
	087 Call Transform.get_position, X0
	088 Move X0, X19
	089 Call MobController.FindClosestNodeFromPosition, X0, X1
	090 Move [X19+336], X0
	091 Compare X0, 0
	092 JumpIfEqual {130}
	093 Move S11, [X0+40]
	094 Move S12, [X0+44]
	095 Move V13, [X0+48]
	096 Move X0, X19
	097 Call MobController.get_searchPrecision, X0
	098 Move V3, V0
	099 Move X0, X19
	100 Move V0, V11
	101 Move V1, V12
	102 Move V2, V13
	103 Call MobController.MarkExploredNodesInRange, X0, X1, V0
	104 Move X8, [X19+328]
	105 Compare X8, 0
	106 JumpIfEqual {130}
	107 Move W8, [X8+24]
	108 Compare W8, 0
	109 JumpIfNotEqual {112}
	110 Move X0, X19
	111 Call MobController.ResetNavPointsVisited, X0
	112 Move X0, X19
	113 Move V0, V8
	114 Move V1, V9
	115 Move V2, V10
	116 Call MobController.FindClosestNodeFromPosition, X0, X1
	117 Move [X19+344], X0
	118 Move X0, X19
	119 Move X20, [X31+80]
	120 Move X19, [X31+88]
	121 Move X22, [X31+64]
	122 Move X21, [X31+72]
	123 Move X30, [X31+48]
	124 Move D9, [X31+32]
	125 Move D8, [X31+40]
	126 Move D11, [X31+16]
	127 Move D10, [X31+24]
	128 Move D13, [X31+96]
	129 Move D12, [X31+104]
	130 Call 0x1C17F20

Method: System.Void SetRoamingTarget(UnityEngine.Vector3 position)

Disassembly:
	0x01DF7A78 LDR X8, [X8 + 0x3E8]
	0x01DF7A7C LDR X1, [X8]
	0x01DF7A80 ADD X0, X31, 0x20
	0x01DF7A84 BL 0x2BC434C
	0x01DF7A88 CBNZ X21, 0x1DF7A94
	0x01DF7A8C MOV X0, X20
	0x01DF7A90 BL 0x1D2C690
	0x01DF7A94 MOV X0, X21
	0x01DF7A98 BL 0x1C16F18
	0x01DF7A9C BL 0x1990590
	0x01DF7AA0 STR X30, [X31 - 0x30]!
	0x01DF7AA4 STP X22, X21, [X31 + 0x10]
	0x01DF7AA8 STP X20, X19, [X31 + 0x20]
	0x01DF7AAC ADRP X21, 0x25E1000
	0x01DF7AB0 ADRP X22, 0x2302000
	0x01DF7AB4 ADRP X19, 0x2302000
	0x01DF7AB8 ADRP X20, 0x2300000
	0x01DF7ABC LDRB W8, [X21 + 0xD11]
	0x01DF7AC0 LDR X22, [X22 + 0x450]
	0x01DF7AC4 LDR X19, [X19 + 0x458]
	0x01DF7AC8 LDR X20, [X20 + 0x860]
	0x01DF7ACC TBNZ X8, 0x0, 0x1DF7AFC
	0x01DF7AD0 ADRP X0, 0x2302000
	0x01DF7AD4 LDR X0, [X0 + 0x458]
	0x01DF7AD8 BL 0x1C16CF4
	0x01DF7ADC ADRP X0, 0x2302000
	0x01DF7AE0 LDR X0, [X0 + 0x450]
	0x01DF7AE4 BL 0x1C16CF4
	0x01DF7AE8 ADRP X0, 0x2300000
	0x01DF7AEC LDR X0, [X0 + 0x860]
	0x01DF7AF0 BL 0x1C16CF4
	0x01DF7AF4 MOVZ W8, 0x1
	0x01DF7AF8 STRB W8, [X21 + 0xD11]
	0x01DF7AFC LDR X0, [X22]
	0x01DF7B00 BL 0x1C16F10
	0x01DF7B04 LDR X1, [X19]
	0x01DF7B08 MOV X19, X0
	0x01DF7B0C BL 0x2DBDE08

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move V8, V2
	007 Move V9, V1
	008 Move V10, V0
	009 Move X19, X0
	010 Call MobController.ResetNavPointsVisited, X0
	011 Move X0, X19
	012 Move V0, V10
	013 Move V1, V9
	014 Move V2, V8
	015 Call MobController.FindClosestNodeFromPosition, X0, X1
	016 Move [X19+336], X0
	017 Compare X0, 0
	018 JumpIfEqual {47}
	019 Move S8, [X0+40]
	020 Move S9, [X0+44]
	021 Move V10, [X0+48]
	022 Move X0, X19
	023 Call MobController.get_searchPrecision, X0
	024 Move V3, V0
	025 Move X0, X19
	026 Move V0, V8
	027 Move V1, V9
	028 Move V2, V10
	029 Call MobController.MarkExploredNodesInRange, X0, X1, V0
	030 Move X8, [X19+336]
	031 Compare X8, 0
	032 JumpIfEqual {47}
	033 Move S0, [X8+40]
	034 Move S1, [X8+44]
	035 Move V2, [X8+48]
	036 Move X0, X19
	037 Call MobController.FindClosestNodeFromPosition, X0, X1
	038 Move [X19+344], X0
	039 Move X0, X19
	040 Move X30, [X31+32]
	041 Move X19, [X31+40]
	042 Move D9, [X31+16]
	043 Move D8, [X31+24]
	044 Move V10, [X31+48]
	045 Call MobController.HandleTargetNavPointChanged, X0
	046 Return 
	047 Call 0x1C17F20

Method: System.Void HandleTargetNavPointChanged()

Disassembly:
	0x01DF7A24 MOV X0, X21
	0x01DF7A28 BL 0x1C16F18
	0x01DF7A2C MOV X20, X0
	0x01DF7A30 CMP W1, 0x1
	0x01DF7A34 B.NE 0x1DF7A68
	0x01DF7A38 MOV X0, X20
	0x01DF7A3C BL 0x3EB1AD0
	0x01DF7A40 LDR X21, [X0]
	0x01DF7A44 BL 0x3EB1AE0
	0x01DF7A48 ADRP X8, 0x2302000
	0x01DF7A4C LDR X8, [X8 + 0x3E8]
	0x01DF7A50 ADD X0, X31, 0x20
	0x01DF7A54 LDR X1, [X8]
	0x01DF7A58 BL 0x2BC434C
	0x01DF7A5C CBZ X21, 0x1DF7848
	0x01DF7A60 MOV X0, X21
	0x01DF7A64 BL 0x1C16F18
	0x01DF7A68 MOV X21, X31
	0x01DF7A6C B 0x1DF7A74
	0x01DF7A70 MOV X20, X0
	0x01DF7A74 ADRP X8, 0x2302000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+336]
	004 Compare X8, 0
	005 JumpIfEqual {27}
	006 Move X19, X0
	007 Move X0, [X0+232]
	008 Compare X0, 0
	009 JumpIfEqual {27}
	010 Move S1, [X8+44]
	011 Move S2, [X8+48]
	012 Move V0, [X8+40]
	013 Move X1, X31
	014 Call NavMeshAgent.SetDestination, X0, X1
	015 Move W8, [X19+240]
	016 Compare W8, 0
	017 JumpIfEqual {23}
	018 Move X8, [X19]
	019 Move X0, X19
	020 Move X9, [X8+936]
	021 Move X1, [X8+944]
	022 NotImplemented "Instruction BLR not yet implemented."
	023 Move [X19+184], W31
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Return 
	027 Call 0x1C17F20

Method: System.Void UpdateRoaming()

Disassembly:
	0x01DF3AA8 CBZ X0, 0x1DF3D54
	0x01DF3AAC MOV X1, X31
	0x01DF3AB0 BL 0x3C3F58C
	0x01DF3AB4 MOV X0, X19
	0x01DF3AB8 MOV V8.16B, V0.16B
	0x01DF3ABC MOV V9.16B, V1.16B
	0x01DF3AC0 MOV V10.16B, V2.16B
	0x01DF3AC4 BL 0x1DEED30
	0x01DF3AC8 MOV V3.16B, V0.16B
	0x01DF3ACC MOV V0.16B, V8.16B
	0x01DF3AD0 MOV V1.16B, V9.16B
	0x01DF3AD4 MOV V2.16B, V10.16B
	0x01DF3AD8 MOV X0, X31
	0x01DF3ADC BL 0x3C0CB98
	0x01DF3AE0 ADRP X8, 0xFFFFFFFFFECF6000
	0x01DF3AE4 ADRP X9, 0xFFFFFFFFFECF7000
	0x01DF3AE8 LDR V1, [X8 + 0xF90]
	0x01DF3AEC LDR V2, [X9 + 0x30]
	0x01DF3AF0 FMOV S0, 1
	0x01DF3AF4 FMOV S3, 1
	0x01DF3AF8 MOV X0, X31
	0x01DF3AFC BL 0x3C0D030
	0x01DF3B00 LDR X0, [X19 + 0x1F0]
	0x01DF3B04 CBZ X0, 0x1DF3D54
	0x01DF3B08 MOV X1, X31
	0x01DF3B0C BL 0x3C3F58C
	0x01DF3B10 LDR X0, [X19 + 0x1D8]
	0x01DF3B14 CBZ X0, 0x1DF3D54
	0x01DF3B18 MOV X1, X31
	0x01DF3B1C MOV V8.16B, V0.16B
	0x01DF3B20 MOV V9.16B, V1.16B
	0x01DF3B24 MOV V10.16B, V2.16B
	0x01DF3B28 BL 0x3C90124
	0x01DF3B2C MOV V3.16B, V0.16B
	0x01DF3B30 MOV V0.16B, V8.16B
	0x01DF3B34 MOV V1.16B, V9.16B
	0x01DF3B38 MOV V2.16B, V10.16B
	0x01DF3B3C MOV X0, X31
	0x01DF3B40 BL 0x3C0CB98
	0x01DF3B44 LDR X8, [X19 + 0x208]
	0x01DF3B48 CBZ X8, 0x1DF3C04
	0x01DF3B4C LDR W8, [X8 + 0x18]
	0x01DF3B50 CMP W8, 0x1
	0x01DF3B54 B.LT 0x1DF3C04
	0x01DF3B58 FMOV S0, W31
	0x01DF3B5C FMOV S1, 1
	0x01DF3B60 FMOV S2, W31
	0x01DF3B64 FMOV S3, 1
	0x01DF3B68 MOV X0, X31
	0x01DF3B6C BL 0x3C0D030
	0x01DF3B70 LDR X0, [X19 + 0x208]
	0x01DF3B74 CBZ X0, 0x1DF3D54
	0x01DF3B78 ADRP X8, 0x2306000
	0x01DF3B7C LDR X8, [X8 + 0x228]
	0x01DF3B80 LDR X1, [X8]
	0x01DF3B84 ADD X8, X31, 0x0
	0x01DF3B88 BL 0x3030AB8
	0x01DF3B8C LDP V0, V1, [X31]
	0x01DF3B90 LDP V2, V3, [X31 + 0x20]
	0x01DF3B94 ADRP X9, 0xFFFFFFFFFECF7000
	0x01DF3B98 ADRP X21, 0x2306000
	0x01DF3B9C STP V0, V1, [X31 + 0x70]
	0x01DF3BA0 STP V2, V3, [X31 + 0x90]
	0x01DF3BA4 LDR V8, [X9 + 0xBC]
	0x01DF3BA8 LDR X21, [X21 + 0x218]
	0x01DF3BAC ADD X8, X31, 0x70
	0x01DF3BB0 ADD X20, X8, 0x10
	0x01DF3BB4 LDR X1, [X21]
	0x01DF3BB8 ADD X0, X31, 0x70
	0x01DF3BBC BL 0x2BC706C
	0x01DF3BC0 TBZ X0, 0x0, 0x1DF3BF0
	0x01DF3BC4 LDUR V0, [X20 + 0x1C]
	0x01DF3BC8 LDP V2, V1, [X20]
	0x01DF3BCC STUR V0, [X31 + 0x5C]
	0x01DF3BD0 STP V2, V1, [X31 + 0x40]
	0x01DF3BD4 ADD X0, X31, 0x40
	0x01DF3BD8 MOV X1, X31
	0x01DF3BDC BL 0x3C8E66C
	0x01DF3BE0 MOV V3.16B, V8.16B
	0x01DF3BE4 MOV X0, X31
	0x01DF3BE8 BL 0x3C0CC38
	0x01DF3BEC B 0x1DF3BB4
	0x01DF3BF0 ADRP X8, 0x2306000
	0x01DF3BF4 LDR X8, [X8 + 0x210]
	0x01DF3BF8 ADD X0, X31, 0x70
	0x01DF3BFC LDR X1, [X8]
	0x01DF3C00 BL 0x2BC7068
	0x01DF3C04 ADRP X8, 0x2300000
	0x01DF3C08 LDR X8, [X8 + 0x970]
	0x01DF3C0C LDR X0, [X8]
	0x01DF3C10 LDR W8, [X0 + 0xE0]
	0x01DF3C14 CBNZ W8, 0x1DF3C1C
	0x01DF3C18 BL 0x1C16DFC
	0x01DF3C1C MOV X0, X31
	0x01DF3C20 BL 0x3C018E4
	0x01DF3C24 TBZ X0, 0x0, 0x1DF3CB4
	0x01DF3C28 FMOV S0, 1
	0x01DF3C2C FMOV S1, W31
	0x01DF3C30 FMOV S2, W31
	0x01DF3C34 FMOV S3, 1
	0x01DF3C38 MOV X0, X31
	0x01DF3C3C BL 0x3C0D030
	0x01DF3C40 MOV X0, X19
	0x01DF3C44 BL 0x1DEA5A0
	0x01DF3C48 ADRP X8, 0xFFFFFFFFFECF7000
	0x01DF3C4C LDR V3, [X8 + 0x35C]
	0x01DF3C50 MOV X0, X31
	0x01DF3C54 BL 0x3C0CB98
	0x01DF3C58 MOV X0, X19
	0x01DF3C5C BL 0x1DEA5A0
	0x01DF3C60 ADRP X8, 0xFFFFFFFFFECF6000
	0x01DF3C64 LDR V3, [X8 + 0xF24]
	0x01DF3C68 MOV X0, X31
	0x01DF3C6C BL 0x3C0CC38
	0x01DF3C70 LDR X0, [X19 + 0x1F0]
	0x01DF3C74 CBZ X0, 0x1DF3D54
	0x01DF3C78 MOV X1, X31
	0x01DF3C7C BL 0x3C3F58C
	0x01DF3C80 MOV X0, X19
	0x01DF3C84 MOV V8.16B, V0.16B
	0x01DF3C88 MOV V9.16B, V1.16B
	0x01DF3C8C MOV V10.16B, V2.16B
	0x01DF3C90 BL 0x1DEA5A0
	0x01DF3C94 MOV V3.16B, V0.16B
	0x01DF3C98 MOV V4.16B, V1.16B
	0x01DF3C9C MOV V5.16B, V2.16B
	0x01DF3CA0 MOV V0.16B, V8.16B
	0x01DF3CA4 MOV V1.16B, V9.16B
	0x01DF3CA8 MOV V2.16B, V10.16B
	0x01DF3CAC MOV X0, X31
	0x01DF3CB0 BL 0x3C0CB04
	0x01DF3CB4 LDR X8, [X19 + 0xF8]
	0x01DF3CB8 CBZ X8, 0x1DF3D38
	0x01DF3CBC FMOV S0, 1
	0x01DF3CC0 FMOV S1, W31
	0x01DF3CC4 FMOV S2, W31
	0x01DF3CC8 FMOV S3, 1
	0x01DF3CCC MOV X0, X31
	0x01DF3CD0 BL 0x3C0D030
	0x01DF3CD4 LDR X0, [X19 + 0xF8]
	0x01DF3CD8 CBZ X0, 0x1DF3D54
	0x01DF3CDC MOV X1, X31
	0x01DF3CE0 BL 0x3BE2888

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x25E6000
	012 Move W8, [X20+3334]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x2301000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3334], W8
	023 Move X0, [X19+56]
	024 Compare X0, 0
	025 JumpIfEqual {176}
	026 Move X21, 0x2301000
	027 Move V8, [X19+184]
	028 Move X21, [X21+1432]
	029 Move X1, X31
	030 Call NetworkRunner.get_DeltaTime, X0
	031 Move W8, 0x42700000
	032 Add S0, S8, S0
	033 Move S1, W8
	034 NotImplemented "Instruction FCMP not yet implemented."
	035 Move [X19+184], S0
	036 Move X8, [X19]
	037 Move [X19+184], W31
	038 Move X0, X19
	039 Move W1, W31
	040 Move X9, [X8+872]
	041 Move X2, [X8+880]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Move W8, [X19+240]
	044 Compare W8, 0
	045 JumpIfEqual {51}
	046 Move X8, [X19]
	047 Move X0, X19
	048 Move X9, [X8+920]
	049 Move X1, [X8+928]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move X0, [X21]
	052 Move X20, [X19+336]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X31
	059 Move X2, X31
	060 Call Object.op_Equality, X0, X1
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {79}
	065 Move X0, [X21]
	066 Move X20, [X19+344]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Move X0, X20
	072 Move X1, X31
	073 Move X2, X31
	074 Call Object.op_Equality, X0, X1
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {85}
	079 Move X8, [X19]
	080 Move W1, 1
	081 Move X0, X19
	082 Move X9, [X8+872]
	083 Move X2, [X8+880]
	084 NotImplemented "Instruction BLR not yet implemented."
	085 Move X8, [X19+336]
	086 Move [X19+189], W31
	087 Compare X8, 0
	088 JumpIfEqual {176}
	089 Move X0, [X19+208]
	090 Compare X0, 0
	091 JumpIfEqual {176}
	092 Move S11, [X8+40]
	093 Move S12, [X8+44]
	094 Move V13, [X8+48]
	095 Move X1, X31
	096 Call Transform.get_position, X0
	097 Move X20, 0x25E6000
	098 Move W8, [X20+2140]
	099 Move V8, V0
	100 Move V9, V1
	101 Move V10, V2
	102 Compare W8, 0
	103 JumpIfNotEqual {109}
	104 Move X0, 0x2301000
	105 Move X0, [X0+1448]
	106 Call 0x1C17CF4
	107 Move W8, 1
	108 Move [X20+2140], W8
	109 Move X8, 0x2301000
	110 Move X8, [X8+1448]
	111 Subtract S11, S11, S8
	112 Subtract S9, S12, S9
	113 Subtract S8, S13, S10
	114 Move X0, [X8]
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {119}
	118 Call 0x1C17DFC
	119 Multiply S0, S11, S11
	120 Multiply S1, S9, S9
	121 Add S0, S0, S1
	122 Multiply S1, S8, S8
	123 Add S0, S1, S0
	124 Move X0, X19
	125 NotImplemented "Instruction FSQRT not yet implemented."
	126 Call MobController.get_searchPrecision, X0
	127 NotImplemented "Instruction FCMP not yet implemented."
	128 Move W8, [X19+188]
	129 Compare W8, 0
	130 JumpIfNotEqual {133}
	131 Move W8, 257
	132 NotImplemented "Instruction STRH not yet implemented."
	133 Move X0, [X19+56]
	134 Compare X0, 0
	135 JumpIfEqual {176}
	136 Move V8, [X19+180]
	137 Move X1, X31
	138 Call NetworkRunner.get_DeltaTime, X0
	139 Move X8, [X19+192]
	140 Add S0, S8, S0
	141 Move [X19+180], S0
	142 Compare X8, 0
	143 JumpIfEqual {176}
	144 Move V1, [X8+68]
	145 NotImplemented "Instruction FCMP not yet implemented."
	146 Move X8, [X19]
	147 Move W9, 256
	148 Move [X19+180], W31
	149 NotImplemented "Instruction STRH not yet implemented."
	150 Move X3, [X8+872]
	151 Move X2, [X8+880]
	152 Move X0, X19
	153 Move X20, [X31+64]
	154 Move X19, [X31+72]
	155 Move X30, [X31+48]
	156 Move X21, [X31+56]
	157 Move D9, [X31+32]
	158 Move D8, [X31+40]
	159 Move D11, [X31+16]
	160 Move D10, [X31+24]
	161 Move W1, W31
	162 Move D13, [X31+80]
	163 Move D12, [X31+88]
	164 CallNoReturn X3
	165 Move X20, [X31+64]
	166 Move X19, [X31+72]
	167 Move X30, [X31+48]
	168 Move X21, [X31+56]
	169 Move D9, [X31+32]
	170 Move D8, [X31+40]
	171 Move D11, [X31+16]
	172 Move D10, [X31+24]
	173 Move D13, [X31+80]
	174 Move D12, [X31+88]
	175 Return 
	176 Call 0x1C17F20

Method: System.Void UpdateRoamingPath()

Disassembly:
	0x01DF3CE4 CBZ X0, 0x1DF3D54
	0x01DF3CE8 LDR X8, [X0 + 0x18]
	0x01DF3CEC MOV X19, X0
	0x01DF3CF0 CMP W8, 0x1
	0x01DF3CF4 B.LT 0x1DF3D38
	0x01DF3CF8 ADRP X9, 0xFFFFFFFFFECF7000
	0x01DF3CFC LDR V8, [X9 + 0xBC]
	0x01DF3D00 MOV X20, X31
	0x01DF3D04 AND X8, X8, 0x0
	0x01DF3D08 ADD X21, X19, 0x28
	0x01DF3D0C CMP X20, W8, UXTW
	0x01DF3D10 B.CS 0x1DF3D50
	0x01DF3D14 LDP S0, S1, [X21 - 0x8]
	0x01DF3D18 LDR V2, [X21], #0xC
	0x01DF3D1C MOV V3.16B, V8.16B
	0x01DF3D20 MOV X0, X31
	0x01DF3D24 BL 0x3C0CC38
	0x01DF3D28 LDR W8, [X19 + 0x18]
	0x01DF3D2C ADD X20, X20, 0x1
	0x01DF3D30 CMP X20, W8, SXTW
	0x01DF3D34 B.LT 0x1DF3D0C
	0x01DF3D38 LDP X20, X19, [X31 + 0xE0]
	0x01DF3D3C LDP X30, X21, [X31 + 0xD0]
	0x01DF3D40 LDP D9, D8, [X31 + 0xC0]
	0x01DF3D44 LDR V10, [X31 + 0xB0]
	0x01DF3D48 ADD X31, X31, 0xF0
	0x01DF3D4C RET
	0x01DF3D50 BL 0x1C16F28
	0x01DF3D54 BL 0x1C16F20
	0x01DF3D58 B 0x1DF3D60
	0x01DF3D5C B 0x1DF3D60
	0x01DF3D60 MOV X20, X0
	0x01DF3D64 CMP W1, 0x1
	0x01DF3D68 B.NE 0x1DF3D9C
	0x01DF3D6C MOV X0, X20
	0x01DF3D70 BL 0x3EB1AD0
	0x01DF3D74 LDR X21, [X0]
	0x01DF3D78 BL 0x3EB1AE0
	0x01DF3D7C ADRP X8, 0x2306000
	0x01DF3D80 LDR X8, [X8 + 0x210]
	0x01DF3D84 ADD X0, X31, 0x70
	0x01DF3D88 LDR X1, [X8]
	0x01DF3D8C BL 0x2BC7068
	0x01DF3D90 CBZ X21, 0x1DF3C04
	0x01DF3D94 MOV X0, X21
	0x01DF3D98 BL 0x1C16F18
	0x01DF3D9C MOV X21, X31
	0x01DF3DA0 B 0x1DF3DA8
	0x01DF3DA4 MOV X20, X0
	0x01DF3DA8 ADRP X8, 0x2306000
	0x01DF3DAC LDR X8, [X8 + 0x210]
	0x01DF3DB0 LDR X1, [X8]
	0x01DF3DB4 ADD X0, X31, 0x70
	0x01DF3DB8 BL 0x2BC7068
	0x01DF3DBC CBNZ X21, 0x1DF3DC8
	0x01DF3DC0 MOV X0, X20
	0x01DF3DC4 BL 0x1D2C690
	0x01DF3DC8 MOV X0, X21
	0x01DF3DCC BL 0x1C16F18
	0x01DF3DD0 BL 0x1990590
	0x01DF3DD4 STR X30, [X31 - 0x40]!
	0x01DF3DD8 STP X24, X23, [X31 + 0x10]
	0x01DF3DDC STP X22, X21, [X31 + 0x20]
	0x01DF3DE0 STP X20, X19, [X31 + 0x30]
	0x01DF3DE4 ADRP X23, 0x25E5000
	0x01DF3DE8 ADRP X24, 0x2306000
	0x01DF3DEC ADRP X20, 0x2306000
	0x01DF3DF0 ADRP X22, 0x2306000
	0x01DF3DF4 ADRP X21, 0x2304000
	0x01DF3DF8 LDRB W8, [X23 + 0xCE9]
	0x01DF3DFC LDR X24, [X24 + 0x68]
	0x01DF3E00 LDR X20, [X20 + 0x70]
	0x01DF3E04 LDR X22, [X22 + 0xF0]
	0x01DF3E08 LDR X21, [X21 + 0x860]
	0x01DF3E0C MOV X19, X0
	0x01DF3E10 TBNZ X8, 0x0, 0x1DF3E4C
	0x01DF3E14 ADRP X0, 0x2306000
	0x01DF3E18 LDR X0, [X0 + 0xF0]
	0x01DF3E1C BL 0x1C16CF4
	0x01DF3E20 ADRP X0, 0x2306000
	0x01DF3E24 LDR X0, [X0 + 0x70]
	0x01DF3E28 BL 0x1C16CF4
	0x01DF3E2C ADRP X0, 0x2306000
	0x01DF3E30 LDR X0, [X0 + 0x68]
	0x01DF3E34 BL 0x1C16CF4
	0x01DF3E38 ADRP X0, 0x2304000
	0x01DF3E3C LDR X0, [X0 + 0x860]
	0x01DF3E40 BL 0x1C16CF4
	0x01DF3E44 MOVZ W8, 0x1
	0x01DF3E48 STRB W8, [X23 + 0xCE9]
	0x01DF3E4C LDR X0, [X24]
	0x01DF3E50 BL 0x1C16F10
	0x01DF3E54 LDR X2, [X20]
	0x01DF3E58 MOVZ W1, 0x8
	0x01DF3E5C MOV X20, X0
	0x01DF3E60 BL 0x302F3B8
	0x01DF3E64 STR X20, [X19 + 0x208]
	0x01DF3E68 LDR X0, [X22]
	0x01DF3E6C MOVZ W1, 0x2
	0x01DF3E70 BL 0x1C16D6C
	0x01DF3E74 STR X0, [X19 + 0x210]
	0x01DF3E78 LDR X0, [X21]
	0x01DF3E7C LDR W8, [X0 + 0xE0]
	0x01DF3E80 CBNZ W8, 0x1DF3E88
	0x01DF3E84 BL 0x1C16DFC
	0x01DF3E88 MOV X0, X19
	0x01DF3E8C LDP X20, X19, [X31 + 0x30]
	0x01DF3E90 LDP X22, X21, [X31 + 0x20]
	0x01DF3E94 LDP X24, X23, [X31 + 0x10]
	0x01DF3E98 LDR X30, [X31], #0x40
	0x01DF3E9C B 0x1DEAEA0
	0x01DF3EA0 STR X30, [X31 - 0x20]!
	0x01DF3EA4 STP X20, X19, [X31 + 0x10]
	0x01DF3EA8 ADRP X20, 0x25E5000
	0x01DF3EAC ADRP X19, 0x2306000
	0x01DF3EB0 LDRB W8, [X20 + 0xCEA]
	0x01DF3EB4 LDR X19, [X19 + 0x1C8]
	0x01DF3EB8 TBNZ X8, 0x0, 0x1DF3ED0
	0x01DF3EBC ADRP X0, 0x2306000
	0x01DF3EC0 LDR X0, [X0 + 0x1C8]
	0x01DF3EC4 BL 0x1C16CF4
	0x01DF3EC8 MOVZ W8, 0x1
	0x01DF3ECC STRB W8, [X20 + 0xCEA]
	0x01DF3ED0 LDR X8, [X19]
	0x01DF3ED4 ADRP X9, 0xFFFFFFFFFECFA000
	0x01DF3ED8 LDR V0, [X9 + 0xBB0]
	0x01DF3EDC ADRP X9, 0xFFFFFFFFFECFB000
	0x01DF3EE0 LDR X8, [X8 + 0xB8]
	0x01DF3EE4 ADRP X10, 0xFFFFFFFFFECFA000
	0x01DF3EE8 STR D0, [X8]
	0x01DF3EEC LDR X8, [X19]
	0x01DF3EF0 LDR V0, [X9 + 0x138]
	0x01DF3EF4 LDP X20, X19, [X31 + 0x10]
	0x01DF3EF8 LDR X9, [X8 + 0xB8]
	0x01DF3EFC STR D0, [X9 + 0x8]
	0x01DF3F00 LDR X8, [X8 + 0xB8]
	0x01DF3F04 LDR V0, [X10 + 0x780]
	0x01DF3F08 STR D0, [X8 + 0x10]
	0x01DF3F0C LDR X30, [X31], #0x20
	0x01DF3F10 RET
	0x01DF3F14 STP D13, D12, [X31 - 0x60]!
	0x01DF3F18 STP D11, D10, [X31 + 0x10]
	0x01DF3F1C STP D9, D8, [X31 + 0x20]
	0x01DF3F20 STR X30, [X31 + 0x30]
	0x01DF3F24 STP X22, X21, [X31 + 0x40]
	0x01DF3F28 STP X20, X19, [X31 + 0x50]
	0x01DF3F2C CBZ X1, 0x1DF4094
	0x01DF3F30 MOV X19, X0
	0x01DF3F34 MOV X0, X1
	0x01DF3F38 MOV X1, X31
	0x01DF3F3C MOV X20, X2
	0x01DF3F40 BL 0x3C32E90
	0x01DF3F44 CBZ X0, 0x1DF4094
	0x01DF3F48 MOV X1, X31
	0x01DF3F4C BL 0x3C3F58C
	0x01DF3F50 LDR X0, [X19 + 0xD0]
	0x01DF3F54 CBZ X0, 0x1DF4094
	0x01DF3F58 MOV X1, X31
	0x01DF3F5C MOV V8.16B, V0.16B
	0x01DF3F60 MOV V9.16B, V1.16B
	0x01DF3F64 MOV V10.16B, V2.16B
	0x01DF3F68 BL 0x3C3F58C
	0x01DF3F6C ADRP X21, 0x25E5000
	0x01DF3F70 LDRB W8, [X21 + 0x85C]
	0x01DF3F74 MOV V11.16B, V0.16B
	0x01DF3F78 MOV V12.16B, V1.16B
	0x01DF3F7C MOV V13.16B, V2.16B
	0x01DF3F80 CBNZ W8, 0x1DF3F98
	0x01DF3F84 ADRP X0, 0x2300000
	0x01DF3F88 LDR X0, [X0 + 0x5A8]
	0x01DF3F8C BL 0x1C16CF4
	0x01DF3F90 MOVZ W8, 0x1
	0x01DF3F94 STRB W8, [X21 + 0x85C]
	0x01DF3F98 ADRP X22, 0x2300000
	0x01DF3F9C LDR X22, [X22 + 0x5A8]
	0x01DF3FA0 FSUB S11, S8, S11
	0x01DF3FA4 FSUB S9, S9, S12
	0x01DF3FA8 FSUB S8, S10, S13
	0x01DF3FAC LDR X0, [X22]
	0x01DF3FB0 LDR W8, [X0 + 0xE0]
	0x01DF3FB4 CBNZ W8, 0x1DF3FBC
	0x01DF3FB8 BL 0x1C16DFC
	0x01DF3FBC FMUL S0, S11, S11
	0x01DF3FC0 FMUL S1, S9, S9
	0x01DF3FC4 FADD S0, S0, S1
	0x01DF3FC8 FMUL S1, S8, S8
	0x01DF3FCC FADD S0, S1, S0
	0x01DF3FD0 FSQRT S0, S0
	0x01DF3FD4 STR S0, [X31 + 0x3C]
	0x01DF3FD8 CBZ X20, 0x1DF4094
	0x01DF3FDC MOV X0, X20
	0x01DF3FE0 MOV X1, X31
	0x01DF3FE4 BL 0x3C32E90
	0x01DF3FE8 CBZ X0, 0x1DF4094
	0x01DF3FEC MOV X1, X31
	0x01DF3FF0 BL 0x3C3F58C
	0x01DF3FF4 LDR X0, [X19 + 0xD0]
	0x01DF3FF8 CBZ X0, 0x1DF4094
	0x01DF3FFC MOV X1, X31
	0x01DF4000 MOV V8.16B, V0.16B
	0x01DF4004 MOV V9.16B, V1.16B
	0x01DF4008 MOV V10.16B, V2.16B
	0x01DF400C BL 0x3C3F58C
	0x01DF4010 LDRB W8, [X21 + 0x85C]
	0x01DF4014 MOV V11.16B, V0.16B
	0x01DF4018 MOV V12.16B, V1.16B
	0x01DF401C MOV V13.16B, V2.16B
	0x01DF4020 CBNZ W8, 0x1DF4038
	0x01DF4024 ADRP X0, 0x22FF000
	0x01DF4028 LDR X0, [X0 + 0x5A8]
	0x01DF402C BL 0x1C16CF4
	0x01DF4030 MOVZ W8, 0x1
	0x01DF4034 STRB W8, [X21 + 0x85C]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], D13
	003 Move [X31+104], D12
	004 Move [X31+112], D11
	005 Move [X31+120], D10
	006 Move [X31+128], D9
	007 Move [X31+136], D8
	008 Move [X31+144], X30
	009 Move [X31+160], X20
	010 Move [X31+168], X19
	011 NotImplemented "Instruction MOVI not yet implemented."
	012 Move X1, X31
	013 Move X19, X0
	014 Move [X31+80], W31
	015 Move [X31+32], W31
	016 Move [X31+48], V0
	017 Move [X31+56], V0
	018 Move [X31], V0
	019 Move [X31+8], V0
	020 Call Component.get_transform, X0
	021 Compare X0, 0
	022 JumpIfEqual {277}
	023 Move X1, X31
	024 Call Transform.get_position, X0
	025 Move X0, X19
	026 Move V8, V0
	027 Move V9, V1
	028 Move V10, V2
	029 Call MobController.get__targetPosition, X0
	030 Subtract S0, S8, S0
	031 Subtract S1, S9, S1
	032 Subtract S2, S10, S2
	033 Multiply S0, S0, S0
	034 Multiply S1, S1, S1
	035 Multiply S2, S2, S2
	036 Add S0, S0, S1
	037 Add S0, S2, S0
	038 Move S1, 2.25
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 Move X20, [X19+232]
	041 Move X0, X19
	042 Move X1, X31
	043 Call Component.get_transform, X0
	044 Compare X0, 0
	045 JumpIfEqual {277}
	046 Move X1, X31
	047 Call Transform.get_position, X0
	048 Compare X20, 0
	049 JumpIfEqual {277}
	050 Move X0, X20
	051 Move X1, X31
	052 Call NavMeshAgent.Warp, X0, X1
	053 Move X0, [X19+232]
	054 Compare X0, 0
	055 JumpIfEqual {277}
	056 Move X1, X31
	057 Call NavMeshAgent.get_isOnNavMesh, X0
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {136}
	062 Move X0, [X19+232]
	063 Compare X0, 0
	064 JumpIfEqual {277}
	065 Move X1, X31
	066 Call NavMeshAgent.get_isOnOffMeshLink, X0
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfEqual {136}
	071 Move X0, X19
	072 Move X1, X31
	073 Call Component.get_transform, X0
	074 Compare X0, 0
	075 JumpIfEqual {277}
	076 Move X1, X31
	077 Call Transform.get_position, X0
	078 Move X0, X19
	079 Move X1, X31
	080 Move V8, V0
	081 Move V9, V1
	082 Move V10, V2
	083 Call Component.get_transform, X0
	084 Compare X0, 0
	085 JumpIfEqual {277}
	086 Move X1, X31
	087 Call Transform.get_position, X0
	088 Move X20, 0x25E6000
	089 Move W8, [X20+1926]
	090 Move V11, V0
	091 Move V12, V1
	092 Move V13, V2
	093 Compare W8, 0
	094 JumpIfNotEqual {100}
	095 Move X0, 0x2301000
	096 Move X0, [X0+1440]
	097 Call 0x1C17CF4
	098 Move W8, 1
	099 Move [X20+1926], W8
	100 Move X8, 0x2301000
	101 Move X8, [X8+1440]
	102 Move S3, 10
	103 Add X0, X31, 48
	104 Move TEMP, 0
	105 Not TEMP
	106 Move W1, TEMP
	107 Move X8, [X8]
	108 Move X2, X31
	109 Move X8, [X8+184]
	110 Move S0, [X8+24]
	111 Move S1, [X8+28]
	112 Move V2, [X8+32]
	113 Multiply S0, S0, S3
	114 Multiply S1, S1, S3
	115 Multiply S2, S2, S3
	116 Subtract S3, S11, S0
	117 Subtract S4, S12, S1
	118 Subtract S5, S13, S2
	119 Move V0, V8
	120 Move V1, V9
	121 Move V2, V10
	122 Call NavMesh.Raycast, X0, X1, X2, X3
	123 Move TEMP, X0
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfNotEqual {136}
	127 Move X20, [X19+232]
	128 Add X0, X31, 48
	129 Move X1, X31
	130 Call NavMeshHit.get_position, X0
	131 Compare X20, 0
	132 JumpIfEqual {277}
	133 Move X0, X20
	134 Move X1, X31
	135 Call NavMeshAgent.Warp, X0, X1
	136 Move X0, [X19+232]
	137 Compare X0, 0
	138 JumpIfEqual {277}
	139 Move X1, X31
	140 Call NavMeshAgent.get_isOnNavMesh, X0
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfEqual {162}
	145 Move X0, [X19+232]
	146 Compare X0, 0
	147 JumpIfEqual {277}
	148 Move X1, X31
	149 Call NavMeshAgent.get_isOnOffMeshLink, X0
	150 Move TEMP, X0
	151 And TEMP, TEMP, 1
	152 Compare TEMP, 1
	153 JumpIfEqual {162}
	154 Move X20, [X19+232]
	155 Move X0, X19
	156 Call MobController.get__targetPosition, X0
	157 Compare X20, 0
	158 JumpIfEqual {277}
	159 Move X0, X20
	160 Move X1, X31
	161 Call NavMeshAgent.Warp, X0, X1
	162 Move X0, [X19+232]
	163 Compare X0, 0
	164 JumpIfEqual {277}
	165 Move X1, X31
	166 Call NavMeshAgent.get_isOnNavMesh, X0
	167 Move TEMP, X0
	168 And TEMP, TEMP, 1
	169 Compare TEMP, 1
	170 JumpIfEqual {235}
	171 Move X0, [X19+232]
	172 Compare X0, 0
	173 JumpIfEqual {277}
	174 Move X1, X31
	175 Call NavMeshAgent.get_isOnOffMeshLink, X0
	176 Move TEMP, X0
	177 And TEMP, TEMP, 1
	178 Compare TEMP, 1
	179 JumpIfEqual {235}
	180 Move X0, X19
	181 Call MobController.get__targetPosition, X0
	182 Move X0, X19
	183 Move V8, V0
	184 Move V9, V1
	185 Move V10, V2
	186 Call MobController.get__targetPosition, X0
	187 Move X20, 0x25E6000
	188 Move W8, [X20+1926]
	189 Move V11, V0
	190 Move V12, V1
	191 Move V13, V2
	192 Compare W8, 0
	193 JumpIfNotEqual {199}
	194 Move X0, 0x2301000
	195 Move X0, [X0+1440]
	196 Call 0x1C17CF4
	197 Move W8, 1
	198 Move [X20+1926], W8
	199 Move X8, 0x2301000
	200 Move X8, [X8+1440]
	201 Move S3, 10
	202 Add X0, X31, 0
	203 Move TEMP, 0
	204 Not TEMP
	205 Move W1, TEMP
	206 Move X8, [X8]
	207 Move X2, X31
	208 Move X8, [X8+184]
	209 Move S0, [X8+24]
	210 Move S1, [X8+28]
	211 Move V2, [X8+32]
	212 Multiply S0, S0, S3
	213 Multiply S1, S1, S3
	214 Multiply S2, S2, S3
	215 Subtract S3, S11, S0
	216 Subtract S4, S12, S1
	217 Subtract S5, S13, S2
	218 Move V0, V8
	219 Move V1, V9
	220 Move V2, V10
	221 Call NavMesh.Raycast, X0, X1, X2, X3
	222 Move TEMP, X0
	223 And TEMP, TEMP, 1
	224 Compare TEMP, 1
	225 JumpIfNotEqual {235}
	226 Move X20, [X19+232]
	227 Add X0, X31, 0
	228 Move X1, X31
	229 Call NavMeshHit.get_position, X0
	230 Compare X20, 0
	231 JumpIfEqual {277}
	232 Move X0, X20
	233 Move X1, X31
	234 Call NavMeshAgent.Warp, X0, X1
	235 Move X0, [X19+232]
	236 Compare X0, 0
	237 JumpIfEqual {277}
	238 Move X1, X31
	239 Call NavMeshAgent.get_isOnNavMesh, X0
	240 Move TEMP, X0
	241 And TEMP, TEMP, 1
	242 Compare TEMP, 1
	243 JumpIfEqual {253}
	244 Move X0, [X19+232]
	245 Compare X0, 0
	246 JumpIfEqual {277}
	247 Move X1, X31
	248 Call NavMeshAgent.get_isOnOffMeshLink, X0
	249 Move TEMP, X0
	250 And TEMP, TEMP, 1
	251 Compare TEMP, 1
	252 JumpIfNotEqual {258}
	253 Move X8, [X19]
	254 Move X0, X19
	255 Move X9, [X8+936]
	256 Move X1, [X8+944]
	257 NotImplemented "Instruction BLR not yet implemented."
	258 Move X8, [X19+336]
	259 Compare X8, 0
	260 JumpIfEqual {277}
	261 Move S0, [X8+40]
	262 Move S1, [X8+44]
	263 Move V2, [X8+48]
	264 Move X0, X19
	265 Call MobController.set__targetPosition, X0, X1
	266 Move X20, [X31+160]
	267 Move X19, [X31+168]
	268 Move X30, [X31+144]
	269 Move D9, [X31+128]
	270 Move D8, [X31+136]
	271 Move D11, [X31+112]
	272 Move D10, [X31+120]
	273 Move D13, [X31+96]
	274 Move D12, [X31+104]
	275 Add X31, X31, 176
	276 Return 
	277 Call 0x1C17F20

Method: System.Void CalculatePathToCurrentNode()

Disassembly:
	0x01DF7B10 LDR X8, [X20]
	0x01DF7B14 LDP X22, X21, [X31 + 0x10]
	0x01DF7B18 LDR X8, [X8 + 0xB8]
	0x01DF7B1C STR X19, [X8 + 0x8]
	0x01DF7B20 LDP X20, X19, [X31 + 0x20]
	0x01DF7B24 LDR X30, [X31], #0x30
	0x01DF7B28 RET
	0x01DF7B2C STP X30, X21, [X31 - 0x20]!
	0x01DF7B30 STP X20, X19, [X31 + 0x10]
	0x01DF7B34 ADRP X21, 0x25E1000
	0x01DF7B38 LDRB W8, [X21 + 0xD12]
	0x01DF7B3C MOV X20, X1
	0x01DF7B40 MOV X19, X0
	0x01DF7B44 TBNZ X8, 0x0, 0x1DF7B5C
	0x01DF7B48 ADRP X0, 0x2300000
	0x01DF7B4C LDR X0, [X0 + 0x860]
	0x01DF7B50 BL 0x1C16CF4
	0x01DF7B54 MOVZ W8, 0x1
	0x01DF7B58 STRB W8, [X21 + 0xD12]
	0x01DF7B5C CBZ X19, 0x1DF7BC4
	0x01DF7B60 ADRP X10, 0x2300000
	0x01DF7B64 LDR X10, [X10 + 0x860]
	0x01DF7B68 MOVZ W9, 0x1
	0x01DF7B6C LDR W8, [X20 + 0x24]
	0x01DF7B70 LDR V0, [X20 + 0x28]
	0x01DF7B74 STRB W9, [X19 + 0x58]
	0x01DF7B78 LDR X9, [X19]
	0x01DF7B7C LDR X1, [X10]
	0x01DF7B80 LDRB W11, [X9 + 0x130]
	0x01DF7B84 LDRB W10, [X1 + 0x130]
	0x01DF7B88 CMP W11, W10
	0x01DF7B8C B.CC 0x1DF7BBC
	0x01DF7B90 LDR X9, [X9 + 0xC8]
	0x01DF7B94 ADD X9, X9, X10, 0x3, LSL
	0x01DF7B98 LDUR X9, [X9 - 0x8]
	0x01DF7B9C CMP X9, X1
	0x01DF7BA0 B.NE 0x1DF7BBC
	0x01DF7BA4 MOV X0, X19
	0x01DF7BA8 LDP X20, X19, [X31 + 0x10]
	0x01DF7BAC CMP W8, 0x0
	0x01DF7BB0 CSET W1, NE
	0x01DF7BB4 LDP X30, X21, [X31], #0x20
	0x01DF7BB8 B 0x1DF5E68
	0x01DF7BBC MOV X0, X19
	0x01DF7BC0 BL 0x1C171E0
	0x01DF7BC4 BL 0x1C16F20
	0x01DF7BC8 STP X30, X21, [X31 - 0x20]!
	0x01DF7BCC STP X20, X19, [X31 + 0x10]
	0x01DF7BD0 ADRP X21, 0x25E1000
	0x01DF7BD4 LDRB W8, [X21 + 0xD13]
	0x01DF7BD8 MOV X20, X1
	0x01DF7BDC MOV X19, X0
	0x01DF7BE0 TBNZ X8, 0x0, 0x1DF7BF8
	0x01DF7BE4 ADRP X0, 0x2300000
	0x01DF7BE8 LDR X0, [X0 + 0x860]
	0x01DF7BEC BL 0x1C16CF4
	0x01DF7BF0 MOVZ W8, 0x1
	0x01DF7BF4 STRB W8, [X21 + 0xD13]
	0x01DF7BF8 CBZ X19, 0x1DF7C58
	0x01DF7BFC ADRP X8, 0x2300000
	0x01DF7C00 LDR X8, [X8 + 0x860]
	0x01DF7C04 MOVZ W9, 0x1
	0x01DF7C08 LDR W1, [X20 + 0x24]
	0x01DF7C0C STRB W9, [X19 + 0x58]
	0x01DF7C10 LDR X9, [X19]
	0x01DF7C14 LDR X8, [X8]
	0x01DF7C18 LDRB W11, [X9 + 0x130]
	0x01DF7C1C LDRB W10, [X8 + 0x130]
	0x01DF7C20 CMP W11, W10
	0x01DF7C24 B.CC 0x1DF7C4C
	0x01DF7C28 LDR X9, [X9 + 0xC8]
	0x01DF7C2C ADD X9, X9, X10, 0x3, LSL
	0x01DF7C30 LDUR X9, [X9 - 0x8]
	0x01DF7C34 CMP X9, X8
	0x01DF7C38 B.NE 0x1DF7C4C
	0x01DF7C3C MOV X0, X19
	0x01DF7C40 LDP X20, X19, [X31 + 0x10]
	0x01DF7C44 LDP X30, X21, [X31], #0x20
	0x01DF7C48 B 0x1DEF940
	0x01DF7C4C MOV X0, X19
	0x01DF7C50 MOV X1, X8
	0x01DF7C54 BL 0x1C171E0
	0x01DF7C58 BL 0x1C16F20
	0x01DF7C5C STP X30, X21, [X31 - 0x20]!
	0x01DF7C60 STP X20, X19, [X31 + 0x10]
	0x01DF7C64 ADRP X21, 0x25E1000
	0x01DF7C68 LDRB W8, [X21 + 0xD14]
	0x01DF7C6C MOV X20, X1
	0x01DF7C70 MOV X19, X0

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x25E2000
	011 Move W8, [X20+3335]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x2303000
	018 Move X0, [X0+1040]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3335], W8
	022 Move X20, [X19+248]
	023 Compare X20, 0
	024 JumpIfNotEqual {33}
	025 Move X8, 0x2303000
	026 Move X8, [X8+1040]
	027 Move X0, [X8]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X20, X0
	031 Call NavMeshPath..ctor, X0
	032 Move [X19+248], X20
	033 Move X8, [X19+336]
	034 Compare X8, 0
	035 JumpIfEqual {105}
	036 Move X0, [X19+232]
	037 Compare X0, 0
	038 JumpIfEqual {105}
	039 Move S1, [X8+44]
	040 Move S2, [X8+48]
	041 Move V0, [X8+40]
	042 Move X1, X20
	043 Move X2, X31
	044 Call NavMeshAgent.CalculatePath, X0, X1, X2
	045 Move X0, [X19+248]
	046 Compare X0, 0
	047 JumpIfEqual {105}
	048 Move X1, X31
	049 Call NavMeshPath.get_corners, X0
	050 Compare X0, 0
	051 JumpIfEqual {105}
	052 Move X8, [X0+24]
	053 Move X20, X0
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X21, X31
	056 And X8, X8, 0
	057 Add X22, X20, 40
	058 Move S11, 2.25
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move S8, [X22-8]
	061 Move S9, [X22-4]
	062 Move V10, [X22]
	063 Move X0, X19
	064 Move X1, X31
	065 Call Component.get_transform, X0
	066 Compare X0, 0
	067 JumpIfEqual {105}
	068 Move X1, X31
	069 Call Transform.get_position, X0
	070 Subtract S0, S0, S8
	071 Subtract S1, S1, S9
	072 Subtract S2, S2, S10
	073 Multiply S0, S0, S0
	074 Multiply S1, S1, S1
	075 Add S0, S0, S1
	076 Multiply S1, S2, S2
	077 Add S0, S1, S0
	078 NotImplemented "Instruction FCMP not yet implemented."
	079 Move W8, [X20+24]
	080 Add X21, X21, 1
	081 Add X22, X22, 12
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X8, [X19+336]
	084 Compare X8, 0
	085 JumpIfEqual {105}
	086 Move S0, [X8+40]
	087 Move S1, [X8+44]
	088 Move V2, [X8+48]
	089 Move X0, X19
	090 Move X0, X19
	091 Move V0, V8
	092 Move V1, V9
	093 Move V2, V10
	094 Move X20, [X31+64]
	095 Move X19, [X31+72]
	096 Move X22, [X31+48]
	097 Move X21, [X31+56]
	098 Move X30, [X31+32]
	099 Move D9, [X31+16]
	100 Move D8, [X31+24]
	101 Move D11, [X31+80]
	102 Move D10, [X31+88]
	103 Call MobController.set__targetPosition, X0, X1
	104 Return 
	105 Call 0x1C17F20
	106 Call 0x1C17F28

Method: System.Void SetTargetPlayer(AnimalCompany.NetPlayer netPlayer)

Disassembly:
	0x01DEA760 CMP W8, 0x0
	0x01DEA764 CSET W0, GT
	0x01DEA768 LDR X30, [X31], #0x30
	0x01DEA76C RET
	0x01DEA770 BL 0x1C16F20
	0x01DEA774 STP X30, X21, [X31 - 0x20]!
	0x01DEA778 STP X20, X19, [X31 + 0x10]
	0x01DEA77C ADRP X21, 0x25EE000
	0x01DEA780 ADRP X20, 0x2309000
	0x01DEA784 LDRB W8, [X21 + 0xCBE]
	0x01DEA788 LDR X20, [X20 + 0x970]
	0x01DEA78C MOV X19, X0
	0x01DEA790 TBNZ X8, 0x0, 0x1DEA7B4
	0x01DEA794 ADRP X0, 0x2309000
	0x01DEA798 LDR X0, [X0 + 0x970]
	0x01DEA79C BL 0x1C16CF4
	0x01DEA7A0 ADRP X0, 0x230E000
	0x01DEA7A4 LDR X0, [X0 + 0xBC0]
	0x01DEA7A8 BL 0x1C16CF4
	0x01DEA7AC MOVZ W8, 0x1
	0x01DEA7B0 STRB W8, [X21 + 0xCBE]
	0x01DEA7B4 MOV X0, X19
	0x01DEA7B8 BL 0x1DEA894
	0x01DEA7BC LDR X0, [X20]
	0x01DEA7C0 LDR W8, [X0 + 0xE0]
	0x01DEA7C4 CBNZ W8, 0x1DEA7CC
	0x01DEA7C8 BL 0x1C16DFC
	0x01DEA7CC MOV X0, X31
	0x01DEA7D0 BL 0x3C018E4
	0x01DEA7D4 TBZ X0, 0x0, 0x1DEA884
	0x01DEA7D8 ADRP X20, 0x230E000
	0x01DEA7DC LDR X20, [X20 + 0xBC0]
	0x01DEA7E0 LDR X0, [X20]
	0x01DEA7E4 LDR W8, [X0 + 0xE0]
	0x01DEA7E8 CBNZ W8, 0x1DEA7F4
	0x01DEA7EC BL 0x1C16DFC
	0x01DEA7F0 LDR X0, [X20]
	0x01DEA7F4 LDR X8, [X0 + 0xB8]
	0x01DEA7F8 MOV X0, X31
	0x01DEA7FC LDP S0, S1, [X8 + 0xB0]
	0x01DEA800 LDP S2, S3, [X8 + 0xB8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x25EF000
	007 Move X21, 0x230A000
	008 Move W8, [X22+3336]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x230A000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3336], W8
	021 Move [X19+352], X20
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {44}
	035 Compare X20, 0
	036 JumpIfEqual {56}
	037 Move X8, [X20+64]
	038 Compare X8, 0
	039 JumpIfEqual {56}
	040 Move X8, [X8+32]
	041 Compare X8, 0
	042 JumpIfEqual {47}
	043 Move W1, [X8]
	044 Move TEMP, 0
	045 Not TEMP
	046 Move W1, TEMP
	047 Move W1, W31
	048 Move X0, X19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Call MobController.set_targetPlayerID, X0, X1
	055 Return 
	056 Call 0x1C17F20

Method: System.Void UpdateChasing()

Disassembly:
	0x01DEB1C0 MOV V8.16B, V0.16B
	0x01DEB1C4 MOV V9.16B, V1.16B
	0x01DEB1C8 MOV V10.16B, V2.16B
	0x01DEB1CC BL 0x1DE7BE4
	0x01DEB1D0 LDRB W8, [X21 + 0x85C]
	0x01DEB1D4 MOV V11.16B, V0.16B
	0x01DEB1D8 MOV V12.16B, V1.16B
	0x01DEB1DC MOV V13.16B, V2.16B
	0x01DEB1E0 CBNZ W8, 0x1DEB1F8
	0x01DEB1E4 ADRP X0, 0x2308000
	0x01DEB1E8 LDR X0, [X0 + 0x5A8]
	0x01DEB1EC BL 0x1C16CF4
	0x01DEB1F0 MOVZ W8, 0x1
	0x01DEB1F4 STRB W8, [X21 + 0x85C]
	0x01DEB1F8 LDR X0, [X22]
	0x01DEB1FC FSUB S11, S8, S11
	0x01DEB200 FSUB S9, S9, S12
	0x01DEB204 FSUB S8, S10, S13
	0x01DEB208 LDR W8, [X0 + 0xE0]
	0x01DEB20C CBNZ W8, 0x1DEB214
	0x01DEB210 BL 0x1C16DFC
	0x01DEB214 FMUL S0, S11, S11
	0x01DEB218 FMUL S1, S9, S9
	0x01DEB21C FADD S0, S0, S1
	0x01DEB220 FMUL S1, S8, S8
	0x01DEB224 FADD S0, S1, S0
	0x01DEB228 FSQRT S0, S0
	0x01DEB22C ADD X0, X31, 0x3C
	0x01DEB230 MOV X1, X31
	0x01DEB234 BL 0x338FCB8
	0x01DEB238 LDP X20, X19, [X31 + 0x50]
	0x01DEB23C LDP X22, X21, [X31 + 0x40]
	0x01DEB240 LDR X30, [X31 + 0x30]
	0x01DEB244 LDP D9, D8, [X31 + 0x20]
	0x01DEB248 LDP D11, D10, [X31 + 0x10]
	0x01DEB24C LDP D13, D12, [X31], #0x60
	0x01DEB250 RET
	0x01DEB254 BL 0x1C16F20
	0x01DEB258 STP X30, X19, [X31 - 0x10]!
	0x01DEB25C MOV W1, W31
	0x01DEB260 MOV X19, X0
	0x01DEB264 BL 0x1DEB2A4
	0x01DEB268 LDR W1, [X19 + 0x1A4]
	0x01DEB26C MOV X0, X19
	0x01DEB270 BL 0x1DE7AC4
	0x01DEB274 LDR W1, [X19 + 0x1A8]
	0x01DEB278 MOV X0, X19
	0x01DEB27C BL 0x1DE7B84
	0x01DEB280 LDR V0, [X19 + 0x1AC]
	0x01DEB284 LDR V1, [X19 + 0x1B0]
	0x01DEB288 LDR V2, [X19 + 0x1B4]
	0x01DEB28C MOV X0, X19
	0x01DEB290 BL 0x1DE7C48
	0x01DEB294 LDR W1, [X19 + 0x1B8]
	0x01DEB298 MOV X0, X19
	0x01DEB29C LDP X30, X19, [X31], #0x10
	0x01DEB2A0 B 0x1DE7D0C
	0x01DEB2A4 STP X30, X19, [X31 - 0x10]!
	0x01DEB2A8 LDRB W1, [X0 + 0x80]
	0x01DEB2AC MOV X19, X0
	0x01DEB2B0 BL 0x1DF47F4
	0x01DEB2B4 LDR W1, [X19 + 0x84]
	0x01DEB2B8 MOV X0, X19
	0x01DEB2BC BL 0x1DF48B8
	0x01DEB2C0 LDR W1, [X19 + 0x88]
	0x01DEB2C4 MOV X0, X19
	0x01DEB2C8 BL 0x1DF498C
	0x01DEB2CC LDR W1, [X19 + 0x90]
	0x01DEB2D0 MOV X0, X19
	0x01DEB2D4 BL 0x1DF49EC
	0x01DEB2D8 LDR V0, [X19 + 0x94]
	0x01DEB2DC MOV X0, X19
	0x01DEB2E0 BL 0x1DF4A4C
	0x01DEB2E4 LDR V0, [X19 + 0x98]
	0x01DEB2E8 MOV X0, X19
	0x01DEB2EC BL 0x1DF4B0C
	0x01DEB2F0 LDR V0, [X19 + 0x9C]
	0x01DEB2F4 MOV X0, X19
	0x01DEB2F8 BL 0x1DF4BCC
	0x01DEB2FC LDR V0, [X19 + 0xA0]
	0x01DEB300 MOV X0, X19
	0x01DEB304 BL 0x1DF4C8C
	0x01DEB308 LDR W1, [X19 + 0xA4]
	0x01DEB30C MOV X0, X19
	0x01DEB310 BL 0x1DF4D4C
	0x01DEB314 LDR V0, [X19 + 0xA8]
	0x01DEB318 MOV X0, X19
	0x01DEB31C BL 0x1DEA540
	0x01DEB320 LDR V0, [X19 + 0xAC]
	0x01DEB324 MOV X0, X19
	0x01DEB328 BL 0x1DF38DC
	0x01DEB32C LDR V0, [X19 + 0xB0]
	0x01DEB330 MOV X0, X19
	0x01DEB334 BL 0x1DE8788
	0x01DEB338 LDR V0, [X19 + 0x168]
	0x01DEB33C LDR V1, [X19 + 0x16C]
	0x01DEB340 LDR V2, [X19 + 0x170]
	0x01DEB344 MOV X0, X19
	0x01DEB348 LDP X30, X19, [X31], #0x10
	0x01DEB34C B 0x1DE9A40
	0x01DEB350 STP X30, X19, [X31 - 0x10]!
	0x01DEB354 MOV X19, X0
	0x01DEB358 BL 0x1DEB39C
	0x01DEB35C MOV X0, X19
	0x01DEB360 BL 0x1DE7A64
	0x01DEB364 STR W0, [X19 + 0x1A4]
	0x01DEB368 MOV X0, X19
	0x01DEB36C BL 0x1DE7B24
	0x01DEB370 STR W0, [X19 + 0x1A8]
	0x01DEB374 MOV X0, X19
	0x01DEB378 BL 0x1DE7BE4
	0x01DEB37C MOV X0, X19
	0x01DEB380 STR S0, [X19 + 0x1AC]
	0x01DEB384 STR S1, [X19 + 0x1B0]
	0x01DEB388 STR S2, [X19 + 0x1B4]
	0x01DEB38C BL 0x1DE7CAC
	0x01DEB390 STR W0, [X19 + 0x1B8]
	0x01DEB394 LDP X30, X19, [X31], #0x10
	0x01DEB398 RET
	0x01DEB39C STP X30, X19, [X31 - 0x10]!
	0x01DEB3A0 MOV X19, X0
	0x01DEB3A4 BL 0x1DF00A4
	0x01DEB3A8 AND W8, W0, 0x1
	0x01DEB3AC MOV X0, X19
	0x01DEB3B0 STRB W8, [X19 + 0x80]
	0x01DEB3B4 BL 0x1DF4858
	0x01DEB3B8 STR W0, [X19 + 0x84]
	0x01DEB3BC MOV X0, X19
	0x01DEB3C0 BL 0x1DF492C
	0x01DEB3C4 STR W0, [X19 + 0x88]
	0x01DEB3C8 MOV X0, X19
	0x01DEB3CC BL 0x1DEFB40
	0x01DEB3D0 STR W0, [X19 + 0x90]
	0x01DEB3D4 MOV X0, X19
	0x01DEB3D8 BL 0x1DF26A8
	0x01DEB3DC MOV X0, X19
	0x01DEB3E0 STR S0, [X19 + 0x94]
	0x01DEB3E4 BL 0x1DF4AAC
	0x01DEB3E8 MOV X0, X19
	0x01DEB3EC STR S0, [X19 + 0x98]
	0x01DEB3F0 BL 0x1DF4B6C
	0x01DEB3F4 MOV X0, X19
	0x01DEB3F8 STR S0, [X19 + 0x9C]
	0x01DEB3FC BL 0x1DF4C2C
	0x01DEB400 MOV X0, X19
	0x01DEB404 STR S0, [X19 + 0xA0]
	0x01DEB408 BL 0x1DF4CEC
	0x01DEB40C STR W0, [X19 + 0xA4]
	0x01DEB410 MOV X0, X19
	0x01DEB414 BL 0x1DEA4E0
	0x01DEB418 MOV X0, X19
	0x01DEB41C STR S0, [X19 + 0xA8]
	0x01DEB420 BL 0x1DF393C
	0x01DEB424 MOV X0, X19
	0x01DEB428 STR S0, [X19 + 0xAC]
	0x01DEB42C BL 0x1DEA458
	0x01DEB430 MOV X0, X19
	0x01DEB434 STR S0, [X19 + 0xB0]
	0x01DEB438 BL 0x1DEA5A0
	0x01DEB43C STR S0, [X19 + 0x168]
	0x01DEB440 STR S1, [X19 + 0x16C]
	0x01DEB444 STR S2, [X19 + 0x170]
	0x01DEB448 LDP X30, X19, [X31], #0x10
	0x01DEB44C RET
	0x01DEB450 STR X30, [X31 - 0x20]!
	0x01DEB454 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x25EE000
	008 Move X23, 0x2309000
	009 Move W8, [X20+3337]
	010 Move X23, [X23+1432]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0x230E000
	017 Move X0, [X0+3736]
	018 Call 0x1C17CF4
	019 Move X0, 0x230E000
	020 Move X0, [X0+3248]
	021 Call 0x1C17CF4
	022 Move X0, 0x230E000
	023 Move X0, [X0+3184]
	024 Call 0x1C17CF4
	025 Move X0, 0x230E000
	026 Move X0, [X0+3136]
	027 Call 0x1C17CF4
	028 Move X0, 0x230B000
	029 Move X0, [X0+2464]
	030 Call 0x1C17CF4
	031 Move X0, 0x2309000
	032 Move X0, [X0+1432]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+3337], W8
	036 Move X0, [X23]
	037 Move X21, [X19+352]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X21
	043 Move X1, X31
	044 Move X2, X31
	045 Add X20, X19, 352
	046 Call Object.op_Inequality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {66}
	051 Move X0, [X20]
	052 Compare X0, 0
	053 JumpIfEqual {210}
	054 Move X1, X31
	055 Call NetPlayer.get_isDie, X0
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {66}
	060 Move X8, [X19]
	061 Move X0, X19
	062 Move X1, X31
	063 Move X9, [X8+952]
	064 Move X2, [X8+960]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move X0, [X23]
	067 Move X21, [X20]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X22, 0x230E000
	073 Move X22, [X22+3136]
	074 Move X0, X21
	075 Move X1, X31
	076 Move X2, X31
	077 Call Object.op_Equality, X0, X1
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {109}
	082 Move X0, X19
	083 Call MobController.get_targetPlayerID, X0
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X0, X19
	086 Call MobController.get_targetPlayerID, X0
	087 Move X8, 0x230B000
	088 Move X8, [X8+2464]
	089 Move W21, W0
	090 Move X8, [X8]
	091 Move W9, [X8+224]
	092 Compare W9, 0
	093 JumpIfNotEqual {96}
	094 Move X0, X8
	095 Call 0x1C17DFC
	096 Move W0, W21
	097 Move X1, X20
	098 Move X2, X31
	099 Call NetPlayer.TryGetPlayerByID, X0, X1
	100 Move TEMP, X0
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfEqual {109}
	104 Move TEMP, 0
	105 Not TEMP
	106 Move W1, TEMP
	107 Move X0, X19
	108 Call MobController.set_targetPlayerID, X0, X1
	109 Move X0, [X22]
	110 Add X21, X19, 376
	111 Move W8, [X0+224]
	112 Compare W8, 0
	113 JumpIfNotEqual {115}
	114 Call 0x1C17DFC
	115 Move X0, X19
	116 Move X1, X21
	117 Call MobDetectionUtil.GetPlayersBySight, X0, X1
	118 Move X0, [X23]
	119 Move X22, [X19+352]
	120 Move W8, [X0+224]
	121 Compare W8, 0
	122 JumpIfNotEqual {124}
	123 Call 0x1C17DFC
	124 Move X0, X22
	125 Move X1, X31
	126 Move X2, X31
	127 Call Object.op_Inequality, X0, X1
	128 Move TEMP, X0
	129 And TEMP, TEMP, 1
	130 Compare TEMP, 1
	131 JumpIfNotEqual {147}
	132 Move X0, [X21]
	133 Compare X0, 0
	134 JumpIfEqual {210}
	135 Move X8, 0x230E000
	136 Move X1, [X20]
	137 Move X8, [X8+3736]
	138 Move X2, [X8]
	139 Call List`1<Object>.Contains, X0, X1
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfNotEqual {147}
	144 Move S0, W31
	145 Move X0, X19
	146 Call MobController.set__timerToChasing, X0, V0
	147 Move W8, [X19+241]
	148 Compare W8, 0
	149 JumpIfEqual {171}
	150 Move X21, [X21]
	151 Compare X21, 0
	152 JumpIfEqual {210}
	153 Move W1, [X21+24]
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Move W0, W31
	156 Move X2, X31
	157 Call Random.Range, X0, X1
	158 Move X8, 0x230E000
	159 Move X8, [X8+3184]
	160 Move W1, W0
	161 Move X0, X21
	162 Move X2, [X8]
	163 Call List`1<Object>.get_Item, X0, X1
	164 Move X1, X0
	165 Move X1, X31
	166 Move X8, [X19]
	167 Move X0, X19
	168 Move X9, [X8+952]
	169 Move X2, [X8+960]
	170 NotImplemented "Instruction BLR not yet implemented."
	171 Move X0, [X23]
	172 Move X21, [X20]
	173 Move W8, [X0+224]
	174 Compare W8, 0
	175 JumpIfNotEqual {177}
	176 Call 0x1C17DFC
	177 Move X0, X21
	178 Move X1, X31
	179 Move X2, X31
	180 Call Object.op_Inequality, X0, X1
	181 Move TEMP, X0
	182 And TEMP, TEMP, 1
	183 Compare TEMP, 1
	184 JumpIfNotEqual {203}
	185 Move X0, [X20]
	186 Compare X0, 0
	187 JumpIfEqual {210}
	188 Move X1, X31
	189 Call Component.get_transform, X0
	190 Compare X0, 0
	191 JumpIfEqual {210}
	192 Move X1, X31
	193 Call Transform.get_position, X0
	194 Move X0, X19
	195 Move X20, [X31+32]
	196 Move X19, [X31+40]
	197 Move X22, [X31+16]
	198 Move X21, [X31+24]
	199 Move X30, [X31+48]
	200 Move X23, [X31+56]
	201 Call MobController.set__targetPosition, X0, X1
	202 Return 
	203 Move X20, [X31+32]
	204 Move X19, [X31+40]
	205 Move X22, [X31+16]
	206 Move X21, [X31+24]
	207 Move X30, [X31+48]
	208 Move X23, [X31+56]
	209 Return 
	210 Call 0x1C17F20

Method: System.Void RPC_Hit(System.Int32 damage)

Disassembly:
	0x01DF0940 STP V2, V3, [X31 + 0xC0]
	0x01DF0944 ADD X0, X31, 0xA0
	0x01DF0948 MOV W1, W20
	0x01DF094C BL 0x2415AF8
	0x01DF0950 TBNZ X0, 0x0, 0x1DF08E0
	0x01DF0954 ADD X8, X31, 0x10
	0x01DF0958 MOV X0, X19
	0x01DF095C BL 0x1DEEE54
	0x01DF0960 LDP V0, V1, [X31 + 0x10]
	0x01DF0964 LDP V2, V3, [X31 + 0x30]
	0x01DF0968 LDR X2, [X22]
	0x01DF096C STP V0, V1, [X31 + 0xA0]
	0x01DF0970 STP V2, V3, [X31 + 0xC0]
	0x01DF0974 ADD X0, X31, 0xA0
	0x01DF0978 MOV W1, W20
	0x01DF097C MOV V0.16B, V8.16B
	0x01DF0980 BL 0x2415E40
	0x01DF0984 B 0x1DF08E0
	0x01DF0988 ADRP X8, 0x2308000
	0x01DF098C LDR X8, [X8 + 0xC20]
	0x01DF0990 ADD X0, X31, 0x60
	0x01DF0994 LDR X1, [X8]
	0x01DF0998 BL 0x2BC434C
	0x01DF099C ADD X8, X31, 0x10
	0x01DF09A0 MOV X0, X19
	0x01DF09A4 BL 0x1DEEE54
	0x01DF09A8 ADRP X8, 0x2309000
	0x01DF09AC LDP V0, V1, [X31 + 0x10]
	0x01DF09B0 LDP V2, V3, [X31 + 0x30]
	0x01DF09B4 LDR X8, [X8 + 0x198]
	0x01DF09B8 ADD X0, X31, 0xA0
	0x01DF09BC STP V0, V1, [X31 + 0xA0]
	0x01DF09C0 STP V2, V3, [X31 + 0xC0]
	0x01DF09C4 LDR X1, [X8]
	0x01DF09C8 ADD X8, X31, 0x10
	0x01DF09CC BL 0x2416BB8
	0x01DF09D0 ADD X0, X31, 0xE0
	0x01DF09D4 ADD X1, X31, 0x10
	0x01DF09D8 MOVZ W2, 0x48
	0x01DF09DC BL 0x3EB1AC0
	0x01DF09E0 ADRP X22, 0x2309000
	0x01DF09E4 ADRP X23, 0x2309000
	0x01DF09E8 LDR X22, [X22 + 0x1C8]
	0x01DF09EC LDR X23, [X23 + 0x1A0]
	0x01DF09F0 LDR X1, [X25]
	0x01DF09F4 ADD X0, X31, 0xE0
	0x01DF09F8 BL 0x2C1CA00
	0x01DF09FC TBZ X0, 0x0, 0x1DF0B40
	0x01DF0A00 LDR X1, [X26]
	0x01DF0A04 ADD X0, X31, 0xE0
	0x01DF0A08 BL 0x2C1CAAC
	0x01DF0A0C MOV X20, X0
	0x01DF0A10 LDR X0, [X27]
	0x01DF0A14 LDR W8, [X0 + 0xE0]
	0x01DF0A18 CBNZ W8, 0x1DF0A20
	0x01DF0A1C BL 0x1C16DFC
	0x01DF0A20 ADD X1, X31, 0x58
	0x01DF0A24 MOV W0, W20
	0x01DF0A28 MOV X2, X31
	0x01DF0A2C BL 0x1DB2598
	0x01DF0A30 TBZ X0, 0x0, 0x1DF09F0
	0x01DF0A34 LDR X1, [X31 + 0x58]
	0x01DF0A38 MOV X0, X19
	0x01DF0A3C BL 0x1DF3038
	0x01DF0A40 MOV W21, W0
	0x01DF0A44 LDR X0, [X19 + 0x38]
	0x01DF0A48 TBZ X21, 0x0, 0x1DF0A84
	0x01DF0A4C CBZ X0, 0x1DF0BFC
	0x01DF0A50 MOV X1, X31
	0x01DF0A54 BL 0x1E9E550
	0x01DF0A58 LDR X0, [X22]
	0x01DF0A5C MOV V8.16B, V0.16B
	0x01DF0A60 LDR W8, [X0 + 0xE0]
	0x01DF0A64 CBNZ W8, 0x1DF0A70
	0x01DF0A68 BL 0x1C16DFC
	0x01DF0A6C LDR X0, [X22]
	0x01DF0A70 LDR X8, [X0 + 0xB8]
	0x01DF0A74 LDP S0, S1, [X8 + 0x8]
	0x01DF0A78 MOV X0, X31
	0x01DF0A7C BL 0x3C30968
	0x01DF0A80 B 0x1DF0AB8
	0x01DF0A84 CBZ X0, 0x1DF0C00
	0x01DF0A88 MOV X1, X31
	0x01DF0A8C BL 0x1E9E550
	0x01DF0A90 LDR X0, [X22]
	0x01DF0A94 MOV V8.16B, V0.16B
	0x01DF0A98 LDR W8, [X0 + 0xE0]
	0x01DF0A9C CBNZ W8, 0x1DF0AA8
	0x01DF0AA0 BL 0x1C16DFC
	0x01DF0AA4 LDR X0, [X22]
	0x01DF0AA8 LDR X8, [X0 + 0xB8]
	0x01DF0AAC LDP S0, S1, [X8 + 0x10]
	0x01DF0AB0 MOV X0, X31
	0x01DF0AB4 BL 0x3C30968
	0x01DF0AB8 FDIV S9, S8, S0
	0x01DF0ABC MOV X0, X19
	0x01DF0AC0 BL 0x1DEEE2C
	0x01DF0AC4 MOV V8.16B, V0.16B
	0x01DF0AC8 ADD X8, X31, 0x10
	0x01DF0ACC MOV X0, X19
	0x01DF0AD0 BL 0x1DEEE54
	0x01DF0AD4 UBFM X8, X20, 0x20, 0x3F
	0x01DF0AD8 LDP V0, V1, [X31 + 0x10]
	0x01DF0ADC LDP V2, V3, [X31 + 0x30]
	0x01DF0AE0 LDR X2, [X23]
	0x01DF0AE4 FMOV S4, W8
	0x01DF0AE8 FADD S4, S9, S4
	0x01DF0AEC FADD S8, S4, S8
	0x01DF0AF0 STP V0, V1, [X31 + 0xA0]
	0x01DF0AF4 STP V2, V3, [X31 + 0xC0]
	0x01DF0AF8 ADD X0, X31, 0xA0
	0x01DF0AFC MOV W1, W20
	0x01DF0B00 MOV V0.16B, V8.16B
	0x01DF0B04 BL 0x2415D94
	0x01DF0B08 LDR X8, [X19 + 0xC0]
	0x01DF0B0C CBZ X8, 0x1DF0BF4
	0x01DF0B10 LDR V0, [X8 + 0x88]
	0x01DF0B14 FCMP S8, S0
	0x01DF0B18 B.LT 0x1DF09F0
	0x01DF0B1C LDR X1, [X31 + 0x58]
	0x01DF0B20 TBZ X21, 0x0, 0x1DF0B88
	0x01DF0B24 MOV X0, X19
	0x01DF0B28 BL 0x1DF3200
	0x01DF0B2C MOVZ W1, 0x3
	0x01DF0B30 MOV X0, X19
	0x01DF0B34 BL 0x1DEEB40
	0x01DF0B38 MOV W8, W31
	0x01DF0B3C B 0x1DF0BA0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25E9000
	006 Move W8, [X21+3338]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x2307000
	014 Move X0, [X0+2680]
	015 Call 0x1C17CF4
	016 Move X0, 0x230A000
	017 Move X0, [X0+304]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3338], W8
	021 Move W8, [X19+88]
	022 Compare W8, 0
	023 JumpIfEqual {58}
	024 Move [X19+88], W31
	025 Move X0, [X19+64]
	026 Compare X0, 0
	027 JumpIfEqual {47}
	028 Move W8, [X0+96]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 2
	031 Compare TEMP, 2
	032 JumpIfEqual {47}
	033 Move X1, X31
	034 Call NetworkObject.get_HasStateAuthority, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {47}
	039 Move X0, X19
	040 Call MobController.get_health, X0
	041 Subtract W1, W0, W20
	042 Move X0, X19
	043 Call MobController.set_health, X0, X1
	044 Move X0, X19
	045 Call MobController.get_health, X0
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X0, [X19+200]
	048 Compare X0, 0
	049 JumpIfEqual {160}
	050 Move X8, [X0]
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X2, [X8+552]
	054 Move X1, [X8+560]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 CallNoReturn X2
	058 Move X21, 0x2307000
	059 Move X21, [X21+2680]
	060 Move X0, [X21]
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Move X0, X19
	066 Move X1, X31
	067 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	068 Move X0, [X19+56]
	069 Compare X0, 0
	070 JumpIfEqual {160}
	071 Move X1, X31
	072 Call NetworkRunner.get_Stage, X0
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X20, [X31+16]
	075 Move X19, [X31+24]
	076 Move X30, [X31+32]
	077 Move X21, [X31+40]
	078 Return 
	079 Move X0, [X19+64]
	080 Compare X0, 0
	081 JumpIfEqual {160}
	082 Move X1, X31
	083 Call NetworkObject.GetLocalAuthorityMask, X0
	084 And W31, W0, 7
	085 Move X8, [X19+56]
	086 Compare X8, 0
	087 JumpIfEqual {160}
	088 Move X0, [X8+80]
	089 Compare X0, 0
	090 JumpIfEqual {160}
	091 Move X1, X31
	092 Call Simulation.HasAnyActiveConnections, X0
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {25}
	097 Move X8, [X19+56]
	098 Compare X8, 0
	099 JumpIfEqual {160}
	100 Move X0, [X8+80]
	101 Move W1, 12
	102 Move X2, X31
	103 Call SimulationMessage.Allocate, X0, X1
	104 Move X8, [X19+64]
	105 Compare X8, 0
	106 JumpIfEqual {160}
	107 Move X8, [X8+32]
	108 Move X21, X0
	109 Compare X8, 0
	110 JumpIfEqual {143}
	111 Move W0, [X8]
	112 Move X0, [X21]
	113 Move X19, [X19+64]
	114 Move W8, [X0+224]
	115 Compare W8, 0
	116 JumpIfNotEqual {118}
	117 Call 0x1C17DFC
	118 Move X8, 0x230A000
	119 Move X8, [X8+304]
	120 Move X1, X19
	121 Move X20, [X31+16]
	122 Move X19, [X31+24]
	123 Move W2, 7
	124 Move X0, [X8]
	125 Move X3, X31
	126 Move X30, [X31+32]
	127 Move X21, [X31+40]
	128 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	129 Return 
	130 Move X0, X19
	131 Move W1, W31
	132 Call MobController.set_health, X0, X1
	133 Move X8, [X19]
	134 Move X0, X19
	135 Move X20, [X31+16]
	136 Move X19, [X31+24]
	137 Move W1, 1
	138 Move X3, [X8+792]
	139 Move X2, [X8+800]
	140 Move X30, [X31+32]
	141 Move X21, [X31+40]
	142 CallNoReturn X3
	143 Move X0, X31
	144 Move W1, [X19+104]
	145 Move W2, 2
	146 Move X3, X31
	147 Call RpcHeader.Create, X0, X1, X2
	148 Move [X21+28], X0
	149 Move [X21+36], W20
	150 Compare X21, 0
	151 JumpIfEqual {160}
	152 Move W8, 96
	153 Move [X21+12], W8
	154 Move X0, [X19+56]
	155 Compare X0, 0
	156 JumpIfEqual {160}
	157 Move X1, X21
	158 Move X2, X31
	159 Call NetworkRunner.SendRpc, X0, X1
	160 Call 0x1C17F20

Method: System.Void Hit(System.Int32 damage, UnityEngine.Vector3 position, AnimalCompany.RandomSFX hitSound, AnimalCompany.RandomSFX killSound, UnityEngine.Vector3 force, System.String hitName, Fusion.NetworkBehaviourId source)

Disassembly:
	0x01DF0E98 STP V0, V0, [X31 + 0x40]
	0x01DF0E9C LDR W8, [X0 + 0xE0]
	0x01DF0EA0 LDR X20, [X19 + 0x160]
	0x01DF0EA4 CBNZ W8, 0x1DF0EAC

ISIL:
	001 Move X8, [X0]
	002 Move X3, [X8+984]
	003 Move X2, [X8+992]
	004 CallNoReturn X3

Method: System.Void RPC_Stun(System.Single duration)

Disassembly:
	0x01DF8178 MOV X1, X31
	0x01DF817C BL 0x3C3F58C
	0x01DF8180 LDR X8, [X20 + 0xC0]
	0x01DF8184 CBZ X8, 0x1DF835C
	0x01DF8188 ADRP X20, 0x22FD000
	0x01DF818C LDR X20, [X20 + 0x9A0]
	0x01DF8190 LDP S12, S11, [X8 + 0x80]
	0x01DF8194 MOV V8.16B, V0.16B
	0x01DF8198 MOV V9.16B, V1.16B
	0x01DF819C LDR X0, [X20]
	0x01DF81A0 MOV V10.16B, V2.16B
	0x01DF81A4 LDR W9, [X0 + 0xE0]
	0x01DF81A8 CBNZ W9, 0x1DF81B0
	0x01DF81AC BL 0x1C16DFC
	0x01DF81B0 ADRP X21, 0x25E0000
	0x01DF81B4 LDRB W8, [X21 + 0xB6A]
	0x01DF81B8 CBNZ W8, 0x1DF81D0
	0x01DF81BC ADRP X0, 0x22FD000
	0x01DF81C0 LDR X0, [X0 + 0x9A0]
	0x01DF81C4 BL 0x1C16CF4
	0x01DF81C8 MOVZ W8, 0x1
	0x01DF81CC STRB W8, [X21 + 0xB6A]
	0x01DF81D0 LDR X0, [X20]
	0x01DF81D4 LDR W8, [X0 + 0xE0]
	0x01DF81D8 CBNZ W8, 0x1DF81E4
	0x01DF81DC BL 0x1C16DFC
	0x01DF81E0 LDR X0, [X20]
	0x01DF81E4 LDR X8, [X0 + 0xB8]
	0x01DF81E8 LDR X0, [X8]
	0x01DF81EC CBZ X0, 0x1DF835C
	0x01DF81F0 ADRP X8, 0x22FF000
	0x01DF81F4 LDR X8, [X8 + 0x850]
	0x01DF81F8 LDR X1, [X8]
	0x01DF81FC BL 0x2B0EEFC
	0x01DF8200 CBZ X0, 0x1DF835C
	0x01DF8204 ADRP X8, 0x2301000
	0x01DF8208 LDR X8, [X8 + 0x430]
	0x01DF820C ADRP X22, 0x2301000
	0x01DF8210 LDR X22, [X22 + 0x420]
	0x01DF8214 ADRP X23, 0x2301000
	0x01DF8218 LDR X1, [X8]
	0x01DF821C ADRP X21, 0x2301000
	0x01DF8220 LDR X23, [X23 + 0x150]
	0x01DF8224 LDR X21, [X21 + 0x418]
	0x01DF8228 ADD X8, X31, 0x8
	0x01DF822C FMUL S12, S12, S12
	0x01DF8230 BL 0x27850A8
	0x01DF8234 LDUR V0, [X31 + 0x8]
	0x01DF8238 LDR X8, [X31 + 0x18]
	0x01DF823C STR V0, [X31 + 0x2]
	0x01DF8240 STR X8, [X31 + 0x30]
	0x01DF8244 LDR X1, [X22]
	0x01DF8248 ADD X0, X31, 0x20
	0x01DF824C BL 0x2C1C378
	0x01DF8250 TBZ X0, 0x0, 0x1DF8314
	0x01DF8254 LDR X20, [X31 + 0x30]
	0x01DF8258 CBZ X20, 0x1DF8354
	0x01DF825C MOV X0, X20
	0x01DF8260 MOV X1, X31
	0x01DF8264 BL 0x1DB193C
	0x01DF8268 TBNZ X0, 0x0, 0x1DF8244
	0x01DF826C MOV X0, X20
	0x01DF8270 MOV X1, X31
	0x01DF8274 BL 0x3C32E90
	0x01DF8278 CBZ X0, 0x1DF8358
	0x01DF827C MOV X1, X31
	0x01DF8280 BL 0x3C3F58C
	0x01DF8284 FSUB S0, S0, S8
	0x01DF8288 FSUB S1, S1, S9
	0x01DF828C FSUB S2, S2, S10
	0x01DF8290 FMUL S0, S0, S0
	0x01DF8294 FMUL S1, S1, S1
	0x01DF8298 FADD S0, S0, S1
	0x01DF829C FMUL S1, S2, S2
	0x01DF82A0 FADD S0, S1, S0
	0x01DF82A4 FCMP S0, S12
	0x01DF82A8 B.PL 0x1DF8244
	0x01DF82AC LDR V0, [X20 + 0x174]
	0x01DF82B0 FCMP S0, S11
	0x01DF82B4 B.LE 0x1DF8244
	0x01DF82B8 LDR X0, [X19]
	0x01DF82BC CBZ X0, 0x1DF8360
	0x01DF82C0 LDR W10, [X0 + 0x1C]
	0x01DF82C4 LDR X8, [X0 + 0x10]
	0x01DF82C8 LDR X9, [X23]
	0x01DF82CC ADD W10, W10, 0x1
	0x01DF82D0 STR W10, [X0 + 0x1C]
	0x01DF82D4 CBZ X8, 0x1DF8364
	0x01DF82D8 LDRSW X10, [X0 + 0x18]
	0x01DF82DC LDR W11, [X8 + 0x18]
	0x01DF82E0 CMP W10, W11
	0x01DF82E4 B.CS 0x1DF82FC
	0x01DF82E8 ADD W9, W10, 0x1
	0x01DF82EC ADD X8, X8, X10, 0x3, LSL
	0x01DF82F0 STR W9, [X0 + 0x18]
	0x01DF82F4 STR X20, [X8 + 0x20]
	0x01DF82F8 B 0x1DF8244
	0x01DF82FC LDR X8, [X9 + 0x20]
	0x01DF8300 LDR X8, [X8 + 0xC0]
	0x01DF8304 LDR X2, [X8 + 0x70]
	0x01DF8308 MOV X1, X20
	0x01DF830C BL 0x301BF90
	0x01DF8310 B 0x1DF8244
	0x01DF8314 LDR X1, [X21]
	0x01DF8318 ADD X0, X31, 0x20
	0x01DF831C BL 0x2C1C374
	0x01DF8320 LDR X8, [X19]
	0x01DF8324 CBZ X8, 0x1DF835C
	0x01DF8328 LDR W8, [X8 + 0x18]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25E1000
	006 Move W8, [X20+3339]
	007 Move V8, V0
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x22FF000
	014 Move X0, [X0+2680]
	015 Call 0x1C17CF4
	016 Move X0, 0x2302000
	017 Move X0, [X0+1080]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3339], W8
	021 Move W8, [X19+88]
	022 Compare W8, 0
	023 JumpIfEqual {36}
	024 Move [X19+88], W31
	025 Move X8, [X19]
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+8]
	030 Move X3, [X8+808]
	031 Move X2, [X8+816]
	032 Move W1, 1
	033 Move V0, V8
	034 Move V8, [X31+32]
	035 CallNoReturn X3
	036 Move X20, 0x22FF000
	037 Move X20, [X20+2680]
	038 Move X0, [X20]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X19
	044 Move X1, X31
	045 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	046 Move X0, [X19+56]
	047 Compare X0, 0
	048 JumpIfEqual {134}
	049 Move X1, X31
	050 Call NetworkRunner.get_Stage, X0
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+8]
	055 Move V8, [X31+32]
	056 Return 
	057 Move X0, [X19+64]
	058 Compare X0, 0
	059 JumpIfEqual {134}
	060 Move X1, X31
	061 Call NetworkObject.GetLocalAuthorityMask, X0
	062 And W31, W0, 7
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfEqual {25}
	067 Move X8, [X19+56]
	068 Compare X8, 0
	069 JumpIfEqual {134}
	070 Move X0, [X8+80]
	071 Compare X0, 0
	072 JumpIfEqual {134}
	073 Move X1, X31
	074 Call Simulation.HasAnyActiveConnections, X0
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {52}
	079 Move X8, [X19+56]
	080 Compare X8, 0
	081 JumpIfEqual {134}
	082 Move X0, [X8+80]
	083 Move W1, 12
	084 Move X2, X31
	085 Call SimulationMessage.Allocate, X0, X1
	086 Move X8, [X19+64]
	087 Compare X8, 0
	088 JumpIfEqual {134}
	089 Move X8, [X8+32]
	090 Move X20, X0
	091 Compare X8, 0
	092 JumpIfEqual {112}
	093 Move W0, [X8]
	094 Move X0, [X20]
	095 Move X19, [X19+64]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Move X8, 0x2302000
	101 Move X8, [X8+1080]
	102 Move X1, X19
	103 Move X20, [X31+16]
	104 Move X19, [X31+24]
	105 Move X30, [X31+8]
	106 Move X0, [X8]
	107 Move W2, 7
	108 Move X3, X31
	109 Move V8, [X31+32]
	110 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	111 Return 
	112 Move X0, X31
	113 Move W1, [X19+104]
	114 Move W2, 3
	115 Move X3, X31
	116 Call RpcHeader.Create, X0, X1, X2
	117 Move [X20+28], X0
	118 Move [X20+36], S8
	119 Compare X20, 0
	120 JumpIfEqual {134}
	121 Move W8, 96
	122 Move [X20+12], W8
	123 Move X0, [X19+56]
	124 Compare X0, 0
	125 JumpIfEqual {134}
	126 Move X1, X20
	127 Move X20, [X31+16]
	128 Move X19, [X31+24]
	129 Move X30, [X31+8]
	130 Move X2, X31
	131 Move V8, [X31+32]
	132 Call NetworkRunner.SendRpc, X0, X1
	133 Return 
	134 Call 0x1C17F20

Method: System.Void Stun(UnityEngine.Vector3 position, System.Single stunRange, System.Single duration = 3, System.String hitName = , Fusion.NetworkBehaviourId source = null, AnimalCompany.IStunnable/AttenuationType attenType = 0)

Disassembly:
	0x01DF832C LDP X20, X19, [X31 + 0x90]
	0x01DF8330 LDP X22, X21, [X31 + 0x80]
	0x01DF8334 LDP X30, X23, [X31 + 0x70]
	0x01DF8338 LDP D9, D8, [X31 + 0x60]
	0x01DF833C LDP D11, D10, [X31 + 0x50]
	0x01DF8340 LDR V12, [X31 + 0x40]
	0x01DF8344 CMP W8, 0x0
	0x01DF8348 CSET W0, GT
	0x01DF834C ADD X31, X31, 0xA0
	0x01DF8350 RET
	0x01DF8354 BL 0x1C16F20
	0x01DF8358 BL 0x1C16F20
	0x01DF835C BL 0x1C16F20
	0x01DF8360 BL 0x1C16F20
	0x01DF8364 BL 0x1C16F20
	0x01DF8368 B 0x1DF8384
	0x01DF836C B 0x1DF8384
	0x01DF8370 B 0x1DF8384
	0x01DF8374 B 0x1DF8384
	0x01DF8378 B 0x1DF8384
	0x01DF837C B 0x1DF8384
	0x01DF8380 B 0x1DF8384
	0x01DF8384 CMP W1, 0x1
	0x01DF8388 B.NE 0x1DF83B0
	0x01DF838C BL 0x3EB1AD0
	0x01DF8390 LDR X20, [X0]
	0x01DF8394 BL 0x3EB1AE0
	0x01DF8398 LDR X1, [X21]
	0x01DF839C ADD X0, X31, 0x20
	0x01DF83A0 BL 0x2C1C374
	0x01DF83A4 CBZ X20, 0x1DF8320
	0x01DF83A8 MOV X0, X20
	0x01DF83AC BL 0x1C16F18
	0x01DF83B0 MOV X19, X0
	0x01DF83B4 MOV X20, X31
	0x01DF83B8 B 0x1DF83C0
	0x01DF83BC MOV X19, X0
	0x01DF83C0 LDR X1, [X21]
	0x01DF83C4 ADD X0, X31, 0x20
	0x01DF83C8 BL 0x2C1C374
	0x01DF83CC CBNZ X20, 0x1DF83D8

ISIL:
	001 Move [X31-64], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X19
	008 Move X19, X0
	009 Move X0, [X0+208]
	010 Compare X0, 0
	011 JumpIfEqual {50}
	012 Move X1, X31
	013 Move V8, V4
	014 Move V9, V3
	015 Move V10, V2
	016 Move V11, V1
	017 Move V12, V0
	018 Call Transform.get_position, X0
	019 Move V4, V0
	020 Move V5, V1
	021 Move V6, V2
	022 Move V0, V12
	023 Move V1, V11
	024 Move V2, V10
	025 Move V3, V9
	026 Move X0, X31
	027 Call IStunnable.GetAttenuationSimple, X0, V0, X1
	028 Multiply S0, S0, S8
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 Move X8, [X19]
	031 Move X0, X19
	032 Move X30, [X31+48]
	033 Move X19, [X31+56]
	034 Move D9, [X31+32]
	035 Move D8, [X31+40]
	036 Move X2, [X8+1016]
	037 Move X1, [X8+1024]
	038 Move D11, [X31+16]
	039 Move D10, [X31+24]
	040 Move V12, [X31+64]
	041 CallNoReturn X2
	042 Move X30, [X31+48]
	043 Move X19, [X31+56]
	044 Move D9, [X31+32]
	045 Move D8, [X31+40]
	046 Move D11, [X31+16]
	047 Move D10, [X31+24]
	048 Move V12, [X31+64]
	049 Return 
	050 Call 0x1C17F20

Method: System.Void RPC_SetViewIdle()

Disassembly:
	0x01DF83D0 MOV X0, X19
	0x01DF83D4 BL 0x1D2C690
	0x01DF83D8 MOV X0, X20
	0x01DF83DC BL 0x1C16F18
	0x01DF83E0 BL 0x1990590
	0x01DF83E4 STR D10, [X31 - 0x40]!
	0x01DF83E8 STP D9, D8, [X31 + 0x10]
	0x01DF83EC STP X30, X21, [X31 + 0x20]
	0x01DF83F0 STP X20, X19, [X31 + 0x30]
	0x01DF83F4 ADRP X20, 0x25E0000
	0x01DF83F8 ADRP X19, 0x2300000
	0x01DF83FC LDRB W8, [X20 + 0xD1F]
	0x01DF8400 LDR X19, [X19 + 0xC40]
	0x01DF8404 MOV V8.16B, V2.16B
	0x01DF8408 MOV V9.16B, V1.16B
	0x01DF840C MOV V10.16B, V0.16B
	0x01DF8410 TBNZ X8, 0x0, 0x1DF8440
	0x01DF8414 ADRP X0, 0x22FB000
	0x01DF8418 LDR X0, [X0 + 0x5D8]
	0x01DF841C BL 0x1C16CF4
	0x01DF8420 ADRP X0, 0x2300000
	0x01DF8424 LDR X0, [X0 + 0xC40]
	0x01DF8428 BL 0x1C16CF4
	0x01DF842C ADRP X0, 0x22FB000
	0x01DF8430 LDR X0, [X0 + 0x5F8]
	0x01DF8434 BL 0x1C16CF4
	0x01DF8438 MOVZ W8, 0x1
	0x01DF843C STRB W8, [X20 + 0xD1F]
	0x01DF8440 LDR X8, [X19]
	0x01DF8444 ADRP X21, 0x22FB000
	0x01DF8448 LDR W9, [X8 + 0xE0]
	0x01DF844C LDR X21, [X21 + 0x5D8]
	0x01DF8450 CBNZ W9, 0x1DF8460
	0x01DF8454 MOV X0, X8
	0x01DF8458 BL 0x1C16DFC
	0x01DF845C LDR X8, [X19]
	0x01DF8460 LDR X0, [X21]
	0x01DF8464 LDR X8, [X8 + 0xB8]
	0x01DF8468 ADRP X20, 0x22FB000
	0x01DF846C LDR W9, [X0 + 0xE0]
	0x01DF8470 LDR X19, [X8 + 0x10]
	0x01DF8474 LDR X20, [X20 + 0x5F8]
	0x01DF8478 CBNZ W9, 0x1DF8484
	0x01DF847C BL 0x1C16DFC
	0x01DF8480 LDR X0, [X21]
	0x01DF8484 LDR X8, [X0 + 0xB8]
	0x01DF8488 MOV X1, X31
	0x01DF848C LDR W0, [X8 + 0x38]
	0x01DF8490 BL 0x3C35CB8
	0x01DF8494 LDR X8, [X20]
	0x01DF8498 MOV W20, W0
	0x01DF849C LDR W9, [X8 + 0xE0]
	0x01DF84A0 CBNZ W9, 0x1DF84AC
	0x01DF84A4 MOV X0, X8
	0x01DF84A8 BL 0x1C16DFC
	0x01DF84AC FMOV S3, 1.5
	0x01DF84B0 MOV V0.16B, V10.16B
	0x01DF84B4 MOV V1.16B, V9.16B
	0x01DF84B8 MOV V2.16B, V8.16B
	0x01DF84BC MOV X0, X19
	0x01DF84C0 MOV W1, W20
	0x01DF84C4 MOV X2, X31
	0x01DF84C8 BL 0x3C8D760
	0x01DF84CC LDP X20, X19, [X31 + 0x30]
	0x01DF84D0 LDP X30, X21, [X31 + 0x20]
	0x01DF84D4 LDP D9, D8, [X31 + 0x10]
	0x01DF84D8 CMP W0, 0x0
	0x01DF84DC CSET W0, GT
	0x01DF84E0 LDR V10, [X31], #0x40
	0x01DF84E4 RET
	0x01DF84E8 SUB X31, X31, 0xF0
	0x01DF84EC STP D15, D14, [X31 + 0x50]
	0x01DF84F0 STP D13, D12, [X31 + 0x60]
	0x01DF84F4 STP D11, D10, [X31 + 0x70]
	0x01DF84F8 STP D9, D8, [X31 + 0x80]
	0x01DF84FC STP X29, X30, [X31 + 0x90]
	0x01DF8500 STP X28, X27, [X31 + 0xA0]
	0x01DF8504 STP X26, X25, [X31 + 0xB0]
	0x01DF8508 STP X24, X23, [X31 + 0xC0]
	0x01DF850C STP X22, X21, [X31 + 0xD0]
	0x01DF8510 STP X20, X19, [X31 + 0xE0]
	0x01DF8514 STR S6, [X31 + 0x8]
	0x01DF8518 STR S1, [X31 + 0x14]
	0x01DF851C ADRP X23, 0x25E0000
	0x01DF8520 ADRP X21, 0x2301000
	0x01DF8524 ADRP X20, 0x2301000
	0x01DF8528 ADRP X22, 0x2300000
	0x01DF852C LDRB W8, [X23 + 0xD20]
	0x01DF8530 LDR X21, [X21 + 0x460]
	0x01DF8534 LDR X20, [X20 + 0x468]
	0x01DF8538 LDR X22, [X22 + 0xC40]
	0x01DF853C MOV X19, X0
	0x01DF8540 MOV V10.16B, V5.16B
	0x01DF8544 MOV V12.16B, V4.16B
	0x01DF8548 MOV V9.16B, V3.16B
	0x01DF854C MOV V11.16B, V2.16B
	0x01DF8550 MOV V15.16B, V0.16B
	0x01DF8554 TBNZ X8, 0x0, 0x1DF85CC
	0x01DF8558 ADRP X0, 0x2301000
	0x01DF855C LDR X0, [X0 + 0x470]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25E1000
	006 Move W8, [X20+3340]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x22FF000
	013 Move X0, [X0+2680]
	014 Call 0x1C17CF4
	015 Move X0, 0x2302000
	016 Move X0, [X0+1088]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3340], W8
	020 Move W8, [X19+88]
	021 Compare W8, 0
	022 JumpIfEqual {35}
	023 Move [X19+88], W31
	024 Move X0, [X19+200]
	025 Compare X0, 0
	026 JumpIfEqual {128}
	027 Move X8, [X0]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, [X8+472]
	031 Move X1, [X8+480]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 CallNoReturn X2
	035 Move X21, 0x22FF000
	036 Move X21, [X21+2680]
	037 Move X0, [X21]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X31
	044 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	045 Move X0, [X19+56]
	046 Compare X0, 0
	047 JumpIfEqual {128}
	048 Move X1, X31
	049 Call NetworkRunner.get_Stage, X0
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return 
	056 Move X0, [X19+64]
	057 Compare X0, 0
	058 JumpIfEqual {128}
	059 Move X1, X31
	060 Call NetworkObject.GetLocalAuthorityMask, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {83}
	065 Move X0, [X21]
	066 Move X19, [X19+64]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Move X8, 0x2302000
	072 Move X8, [X8+1088]
	073 Move X1, X19
	074 Move X20, [X31+16]
	075 Move X19, [X31+24]
	076 Move W2, 1
	077 Move X0, [X8]
	078 Move X3, X31
	079 Move X30, [X31+32]
	080 Move X21, [X31+40]
	081 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	082 Return 
	083 Move X8, [X19+56]
	084 Compare X8, 0
	085 JumpIfEqual {128}
	086 Move W20, W0
	087 Move X0, [X8+80]
	088 Compare X0, 0
	089 JumpIfEqual {128}
	090 Move X1, X31
	091 Call Simulation.HasAnyActiveConnections, X0
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {127}
	096 Move X8, [X19+56]
	097 Compare X8, 0
	098 JumpIfEqual {128}
	099 Move X0, [X8+80]
	100 Move W1, 8
	101 Move X2, X31
	102 Call SimulationMessage.Allocate, X0, X1
	103 Move X8, [X19+64]
	104 Compare X8, 0
	105 JumpIfEqual {128}
	106 Move X8, [X8+32]
	107 Move X21, X0
	108 Compare X8, 0
	109 JumpIfEqual {111}
	110 Move W0, [X8]
	111 Move X0, X31
	112 Move W1, [X19+104]
	113 Move W2, 4
	114 Move X3, X31
	115 Call RpcHeader.Create, X0, X1, X2
	116 Move [X21+28], X0
	117 Compare X21, 0
	118 JumpIfEqual {128}
	119 Move W8, 64
	120 Move [X21+12], W8
	121 Move X0, [X19+56]
	122 Compare X0, 0
	123 JumpIfEqual {128}
	124 Move X1, X21
	125 Move X2, X31
	126 Call NetworkRunner.SendRpc, X0, X1
	127 And W31, W20, 7
	128 Call 0x1C17F20

Method: System.Void RPC_SetViewWalk(System.Single speed)

Disassembly:
	0x01DF8560 BL 0x1C16CF4
	0x01DF8564 ADRP X0, 0x22FB000
	0x01DF8568 LDR X0, [X0 + 0x5D8]
	0x01DF856C BL 0x1C16CF4
	0x01DF8570 ADRP X0, 0x2301000
	0x01DF8574 LDR X0, [X0 + 0x478]
	0x01DF8578 BL 0x1C16CF4
	0x01DF857C ADRP X0, 0x2301000
	0x01DF8580 LDR X0, [X0 + 0x468]
	0x01DF8584 BL 0x1C16CF4
	0x01DF8588 ADRP X0, 0x2300000
	0x01DF858C LDR X0, [X0 + 0xC68]
	0x01DF8590 BL 0x1C16CF4
	0x01DF8594 ADRP X0, 0x2301000
	0x01DF8598 LDR X0, [X0 + 0x460]
	0x01DF859C BL 0x1C16CF4
	0x01DF85A0 ADRP X0, 0x2300000
	0x01DF85A4 LDR X0, [X0 + 0xC40]
	0x01DF85A8 BL 0x1C16CF4
	0x01DF85AC ADRP X0, 0x22FB000
	0x01DF85B0 LDR X0, [X0 + 0x598]
	0x01DF85B4 BL 0x1C16CF4
	0x01DF85B8 ADRP X0, 0x22FB000
	0x01DF85BC LDR X0, [X0 + 0x5F8]
	0x01DF85C0 BL 0x1C16CF4
	0x01DF85C4 MOVZ W8, 0x1
	0x01DF85C8 STRB W8, [X23 + 0xD20]
	0x01DF85CC ADRP X23, 0x22FB000
	0x01DF85D0 LDR X23, [X23 + 0x5D8]
	0x01DF85D4 LDR X0, [X21]
	0x01DF85D8 MOVI V0.2D, 0x0
	0x01DF85DC STUR V0, [X31 + 0x3C]
	0x01DF85E0 STP V0, V0, [X31 + 0x20]
	0x01DF85E4 STR X31, [X31 + 0x18]
	0x01DF85E8 BL 0x1C16F10
	0x01DF85EC LDR X1, [X20]
	0x01DF85F0 MOV X20, X0
	0x01DF85F4 BL 0x301B7C4
	0x01DF85F8 STR X20, [X19]
	0x01DF85FC LDR X8, [X22]
	0x01DF8600 LDR W9, [X8 + 0xE0]
	0x01DF8604 CBNZ W9, 0x1DF8614
	0x01DF8608 MOV X0, X8
	0x01DF860C BL 0x1C16DFC
	0x01DF8610 LDR X8, [X22]
	0x01DF8614 LDR X0, [X23]
	0x01DF8618 LDR X8, [X8 + 0xB8]
	0x01DF861C STP S9, S12, [X31 + 0xC]
	0x01DF8620 ADRP X21, 0x22FB000
	0x01DF8624 LDR W9, [X0 + 0xE0]
	0x01DF8628 LDR X20, [X8 + 0x18]
	0x01DF862C LDR X21, [X21 + 0x5F8]
	0x01DF8630 FADD S9, S9, S9
	0x01DF8634 FADD S8, S12, S12
	0x01DF8638 MOV V12.16B, V10.16B
	0x01DF863C FADD S10, S10, S10
	0x01DF8640 FMOV S14, 2
	0x01DF8644 CBNZ W9, 0x1DF8650
	0x01DF8648 BL 0x1C16DFC
	0x01DF864C LDR X0, [X23]
	0x01DF8650 LDR X8, [X0 + 0xB8]
	0x01DF8654 LDR V0, [X31 + 0x14]
	0x01DF8658 MOV X1, X31
	0x01DF865C MOV V13.16B, V15.16B
	0x01DF8660 LDR W0, [X8 + 0x38]
	0x01DF8664 FSUB S8, S0, S8
	0x01DF8668 LDR V0, [X31 + 0x8]
	0x01DF866C FSUB S15, S15, S9
	0x01DF8670 FSUB S9, S11, S10
	0x01DF8674 MOV V10.16B, V11.16B
	0x01DF8678 FADD S14, S0, S14
	0x01DF867C BL 0x3C35CB8
	0x01DF8680 LDR X8, [X21]
	0x01DF8684 MOV W21, W0
	0x01DF8688 LDR W9, [X8 + 0xE0]
	0x01DF868C CBNZ W9, 0x1DF8698
	0x01DF8690 MOV X0, X8
	0x01DF8694 BL 0x1C16DFC
	0x01DF8698 LDP S4, S5, [X31 + 0xC]
	0x01DF869C FMOV S3, 1.5
	0x01DF86A0 MOV V0.16B, V15.16B
	0x01DF86A4 MOV V1.16B, V8.16B
	0x01DF86A8 MOV V2.16B, V9.16B
	0x01DF86AC MOV V6.16B, V12.16B
	0x01DF86B0 MOV X0, X20
	0x01DF86B4 MOV V7.16B, V14.16B
	0x01DF86B8 MOV W1, W21
	0x01DF86BC MOV X2, X31
	0x01DF86C0 BL 0x3C8D9FC
	0x01DF86C4 LDR X8, [X22]
	0x01DF86C8 LDR X9, [X8 + 0xB8]
	0x01DF86CC LDR X9, [X9 + 0x18]
	0x01DF86D0 CBZ X9, 0x1DF897C
	0x01DF86D4 LDR W9, [X9 + 0x18]
	0x01DF86D8 CMP W0, W9
	0x01DF86DC CSEL W9, W0, W9, LT
	0x01DF86E0 CMP W9, 0x1
	0x01DF86E4 B.LT 0x1DF8938
	0x01DF86E8 ADRP X24, 0x22FB000
	0x01DF86EC ADRP X25, 0x2301000
	0x01DF86F0 ADRP X26, 0x2301000
	0x01DF86F4 ADRP X10, 0xFFFFFFFFFECF1000
	0x01DF86F8 ADRP X20, 0x22FB000
	0x01DF86FC LDR X24, [X24 + 0x598]
	0x01DF8700 LDR X25, [X25 + 0x470]
	0x01DF8704 LDR X26, [X26 + 0x478]
	0x01DF8708 LDR V12, [X10 + 0xF20]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x25E1000
	007 Move W8, [X20+3341]
	008 Move V8, V0
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x22FF000
	015 Move X0, [X0+2680]
	016 Call 0x1C17CF4
	017 Move X0, 0x2302000
	018 Move X0, [X0+1096]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3341], W8
	022 Move W8, [X19+88]
	023 Compare W8, 0
	024 JumpIfEqual {39}
	025 Move [X19+88], W31
	026 Move X0, [X19+200]
	027 Compare X0, 0
	028 JumpIfEqual {135}
	029 Move X8, [X0]
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Move V0, V8
	035 Move X2, [X8+488]
	036 Move X1, [X8+496]
	037 Move V8, [X31+48]
	038 CallNoReturn X2
	039 Move X21, 0x22FF000
	040 Move X21, [X21+2680]
	041 Move X0, [X21]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X19
	047 Move X1, X31
	048 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	049 Move X0, [X19+56]
	050 Compare X0, 0
	051 JumpIfEqual {135}
	052 Move X1, X31
	053 Call NetworkRunner.get_Stage, X0
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+16]
	058 Move X21, [X31+24]
	059 Move V8, [X31+48]
	060 Return 
	061 Move X0, [X19+64]
	062 Compare X0, 0
	063 JumpIfEqual {135}
	064 Move X1, X31
	065 Call NetworkObject.GetLocalAuthorityMask, X0
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {89}
	070 Move X0, [X21]
	071 Move X19, [X19+64]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X8, 0x2302000
	077 Move X8, [X8+1096]
	078 Move X1, X19
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X30, [X31+16]
	082 Move X21, [X31+24]
	083 Move X0, [X8]
	084 Move W2, 1
	085 Move X3, X31
	086 Move V8, [X31+48]
	087 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	088 Return 
	089 Move X8, [X19+56]
	090 Compare X8, 0
	091 JumpIfEqual {135}
	092 Move W20, W0
	093 Move X0, [X8+80]
	094 Compare X0, 0
	095 JumpIfEqual {135}
	096 Move X1, X31
	097 Call Simulation.HasAnyActiveConnections, X0
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {134}
	102 Move X8, [X19+56]
	103 Compare X8, 0
	104 JumpIfEqual {135}
	105 Move X0, [X8+80]
	106 Move W1, 12
	107 Move X2, X31
	108 Call SimulationMessage.Allocate, X0, X1
	109 Move X8, [X19+64]
	110 Compare X8, 0
	111 JumpIfEqual {135}
	112 Move X8, [X8+32]
	113 Move X21, X0
	114 Compare X8, 0
	115 JumpIfEqual {117}
	116 Move W0, [X8]
	117 Move X0, X31
	118 Move W1, [X19+104]
	119 Move W2, 5
	120 Move X3, X31
	121 Call RpcHeader.Create, X0, X1, X2
	122 Move [X21+28], X0
	123 Move [X21+36], S8
	124 Compare X21, 0
	125 JumpIfEqual {135}
	126 Move W8, 96
	127 Move [X21+12], W8
	128 Move X0, [X19+56]
	129 Compare X0, 0
	130 JumpIfEqual {135}
	131 Move X1, X21
	132 Move X2, X31
	133 Call NetworkRunner.SendRpc, X0, X1
	134 And W31, W20, 7
	135 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01DEB894 LDR X0, [X0 + 0xF48]
	0x01DEB898 BL 0x1C16D08
	0x01DEB89C MOV X1, X0
	0x01DEB8A0 MOV X0, X19
	0x01DEB8A4 BL 0x1C16DEC
	0x01DEB8A8 STP X30, X19, [X31 - 0x10]!
	0x01DEB8AC LDR X8, [X0 + 0x50]
	0x01DEB8B0 CBZ X8, 0x1DEB8C4
	0x01DEB8B4 LDP S0, S1, [X8 + 0x84]
	0x01DEB8B8 LDR V2, [X8 + 0x8C]
	0x01DEB8BC LDP X30, X19, [X31], #0x10
	0x01DEB8C0 RET
	0x01DEB8C4 ADRP X0, 0x2308000
	0x01DEB8C8 LDR X0, [X0 + 0x5B0]
	0x01DEB8CC BL 0x1C16D08
	0x01DEB8D0 BL 0x1C16F10
	0x01DEB8D4 MOV X19, X0
	0x01DEB8D8 ADRP X0, 0x230D000
	0x01DEB8DC LDR X0, [X0 + 0xF50]
	0x01DEB8E0 BL 0x1C16D08
	0x01DEB8E4 MOV X1, X0
	0x01DEB8E8 MOV X0, X19
	0x01DEB8EC MOV X2, X31
	0x01DEB8F0 BL 0x337DF1C
	0x01DEB8F4 ADRP X0, 0x230D000
	0x01DEB8F8 LDR X0, [X0 + 0xF58]
	0x01DEB8FC BL 0x1C16D08
	0x01DEB900 MOV X1, X0
	0x01DEB904 MOV X0, X19
	0x01DEB908 BL 0x1C16DEC
	0x01DEB90C STP X30, X19, [X31 - 0x10]!
	0x01DEB910 LDR X8, [X0 + 0x50]
	0x01DEB914 CBZ X8, 0x1DEB928
	0x01DEB918 STP S0, S1, [X8 + 0x84]
	0x01DEB91C STR S2, [X8 + 0x8C]
	0x01DEB920 LDP X30, X19, [X31], #0x10
	0x01DEB924 RET
	0x01DEB928 ADRP X0, 0x2308000
	0x01DEB92C LDR X0, [X0 + 0x5B0]
	0x01DEB930 BL 0x1C16D08
	0x01DEB934 BL 0x1C16F10
	0x01DEB938 MOV X19, X0
	0x01DEB93C ADRP X0, 0x230D000
	0x01DEB940 LDR X0, [X0 + 0xF50]
	0x01DEB944 BL 0x1C16D08
	0x01DEB948 MOV X1, X0
	0x01DEB94C MOV X0, X19
	0x01DEB950 MOV X2, X31
	0x01DEB954 BL 0x337DF1C
	0x01DEB958 ADRP X0, 0x230D000
	0x01DEB95C LDR X0, [X0 + 0xF60]
	0x01DEB960 BL 0x1C16D08
	0x01DEB964 MOV X1, X0
	0x01DEB968 MOV X0, X19
	0x01DEB96C BL 0x1C16DEC
	0x01DEB970 STP X30, X19, [X31 - 0x10]!
	0x01DEB974 LDR X8, [X0 + 0x50]
	0x01DEB978 CBZ X8, 0x1DEB988
	0x01DEB97C LDR V0, [X8 + 0x90]
	0x01DEB980 LDP X30, X19, [X31], #0x10
	0x01DEB984 RET
	0x01DEB988 ADRP X0, 0x2308000
	0x01DEB98C LDR X0, [X0 + 0x5B0]
	0x01DEB990 BL 0x1C16D08
	0x01DEB994 BL 0x1C16F10
	0x01DEB998 MOV X19, X0
	0x01DEB99C ADRP X0, 0x230D000
	0x01DEB9A0 LDR X0, [X0 + 0xF68]
	0x01DEB9A4 BL 0x1C16D08
	0x01DEB9A8 MOV X1, X0
	0x01DEB9AC MOV X0, X19
	0x01DEB9B0 MOV X2, X31
	0x01DEB9B4 BL 0x337DF1C
	0x01DEB9B8 ADRP X0, 0x230D000
	0x01DEB9BC LDR X0, [X0 + 0xF70]
	0x01DEB9C0 BL 0x1C16D08
	0x01DEB9C4 MOV X1, X0
	0x01DEB9C8 MOV X0, X19
	0x01DEB9CC BL 0x1C16DEC
	0x01DEB9D0 STP X30, X19, [X31 - 0x10]!
	0x01DEB9D4 LDR X8, [X0 + 0x50]
	0x01DEB9D8 CBZ X8, 0x1DEB9E8
	0x01DEB9DC STR S0, [X8 + 0x90]
	0x01DEB9E0 LDP X30, X19, [X31], #0x10
	0x01DEB9E4 RET
	0x01DEB9E8 ADRP X0, 0x2308000
	0x01DEB9EC LDR X0, [X0 + 0x5B0]
	0x01DEB9F0 BL 0x1C16D08
	0x01DEB9F4 BL 0x1C16F10
	0x01DEB9F8 MOV X19, X0
	0x01DEB9FC ADRP X0, 0x230D000
	0x01DEBA00 LDR X0, [X0 + 0xF68]
	0x01DEBA04 BL 0x1C16D08
	0x01DEBA08 MOV X1, X0
	0x01DEBA0C MOV X0, X19
	0x01DEBA10 MOV X2, X31
	0x01DEBA14 BL 0x337DF1C
	0x01DEBA18 ADRP X0, 0x230D000
	0x01DEBA1C LDR X0, [X0 + 0xF78]
	0x01DEBA20 BL 0x1C16D08
	0x01DEBA24 MOV X1, X0
	0x01DEBA28 MOV X0, X19
	0x01DEBA2C BL 0x1C16DEC
	0x01DEBA30 STP X30, X19, [X31 - 0x10]!
	0x01DEBA34 LDR X8, [X0 + 0x50]
	0x01DEBA38 CBZ X8, 0x1DEBA48
	0x01DEBA3C LDR W0, [X8 + 0x94]
	0x01DEBA40 LDP X30, X19, [X31], #0x10
	0x01DEBA44 RET
	0x01DEBA48 ADRP X0, 0x2308000
	0x01DEBA4C LDR X0, [X0 + 0x5B0]
	0x01DEBA50 BL 0x1C16D08
	0x01DEBA54 BL 0x1C16F10
	0x01DEBA58 MOV X19, X0
	0x01DEBA5C ADRP X0, 0x230D000
	0x01DEBA60 LDR X0, [X0 + 0xF80]
	0x01DEBA64 BL 0x1C16D08
	0x01DEBA68 MOV X1, X0
	0x01DEBA6C MOV X0, X19
	0x01DEBA70 MOV X2, X31
	0x01DEBA74 BL 0x337DF1C
	0x01DEBA78 ADRP X0, 0x230D000
	0x01DEBA7C LDR X0, [X0 + 0xF88]
	0x01DEBA80 BL 0x1C16D08
	0x01DEBA84 MOV X1, X0
	0x01DEBA88 MOV X0, X19
	0x01DEBA8C BL 0x1C16DEC
	0x01DEBA90 STP X30, X19, [X31 - 0x10]!
	0x01DEBA94 LDR X8, [X0 + 0x50]
	0x01DEBA98 CBZ X8, 0x1DEBAA8
	0x01DEBA9C STR W1, [X8 + 0x94]
	0x01DEBAA0 LDP X30, X19, [X31], #0x10
	0x01DEBAA4 RET
	0x01DEBAA8 ADRP X0, 0x2308000
	0x01DEBAAC LDR X0, [X0 + 0x5B0]
	0x01DEBAB0 BL 0x1C16D08
	0x01DEBAB4 BL 0x1C16F10
	0x01DEBAB8 MOV X19, X0
	0x01DEBABC ADRP X0, 0x230D000
	0x01DEBAC0 LDR X0, [X0 + 0xF80]
	0x01DEBAC4 BL 0x1C16D08
	0x01DEBAC8 MOV X1, X0
	0x01DEBACC MOV X0, X19
	0x01DEBAD0 MOV X2, X31
	0x01DEBAD4 BL 0x337DF1C
	0x01DEBAD8 ADRP X0, 0x230D000
	0x01DEBADC LDR X0, [X0 + 0xF90]
	0x01DEBAE0 BL 0x1C16D08
	0x01DEBAE4 MOV X1, X0
	0x01DEBAE8 MOV X0, X19
	0x01DEBAEC BL 0x1C16DEC
	0x01DEBAF0 STP X30, X19, [X31 - 0x10]!
	0x01DEBAF4 LDR X8, [X0 + 0x50]
	0x01DEBAF8 CBZ X8, 0x1DEBB10
	0x01DEBAFC LDR W8, [X8 + 0x98]
	0x01DEBB00 CMP W8, 0x0
	0x01DEBB04 CSET W0, NE
	0x01DEBB08 LDP X30, X19, [X31], #0x10
	0x01DEBB0C RET
	0x01DEBB10 ADRP X0, 0x2308000
	0x01DEBB14 LDR X0, [X0 + 0x5B0]
	0x01DEBB18 BL 0x1C16D08
	0x01DEBB1C BL 0x1C16F10
	0x01DEBB20 MOV X19, X0
	0x01DEBB24 ADRP X0, 0x230D000
	0x01DEBB28 LDR X0, [X0 + 0xF98]
	0x01DEBB2C BL 0x1C16D08
	0x01DEBB30 MOV X1, X0
	0x01DEBB34 MOV X0, X19
	0x01DEBB38 MOV X2, X31
	0x01DEBB3C BL 0x337DF1C
	0x01DEBB40 ADRP X0, 0x230D000
	0x01DEBB44 LDR X0, [X0 + 0xFA0]
	0x01DEBB48 BL 0x1C16D08
	0x01DEBB4C MOV X1, X0
	0x01DEBB50 MOV X0, X19
	0x01DEBB54 BL 0x1C16DEC
	0x01DEBB58 STP X30, X19, [X31 - 0x10]!
	0x01DEBB5C LDR X8, [X0 + 0x50]
	0x01DEBB60 CBZ X8, 0x1DEBB74
	0x01DEBB64 AND W9, W1, 0x1
	0x01DEBB68 STR W9, [X8 + 0x98]
	0x01DEBB6C LDP X30, X19, [X31], #0x10
	0x01DEBB70 RET
	0x01DEBB74 ADRP X0, 0x2308000
	0x01DEBB78 LDR X0, [X0 + 0x5B0]
	0x01DEBB7C BL 0x1C16D08
	0x01DEBB80 BL 0x1C16F10
	0x01DEBB84 MOV X19, X0
	0x01DEBB88 ADRP X0, 0x230D000
	0x01DEBB8C LDR X0, [X0 + 0xF98]
	0x01DEBB90 BL 0x1C16D08
	0x01DEBB94 MOV X1, X0
	0x01DEBB98 MOV X0, X19
	0x01DEBB9C MOV X2, X31
	0x01DEBBA0 BL 0x337DF1C
	0x01DEBBA4 ADRP X0, 0x230D000
	0x01DEBBA8 LDR X0, [X0 + 0xFA8]
	0x01DEBBAC BL 0x1C16D08
	0x01DEBBB0 MOV X1, X0
	0x01DEBBB4 MOV X0, X19
	0x01DEBBB8 BL 0x1C16DEC
	0x01DEBBBC STP X30, X19, [X31 - 0x10]!
	0x01DEBBC0 LDR X8, [X0 + 0x50]
	0x01DEBBC4 CBZ X8, 0x1DEBBD4
	0x01DEBBC8 LDR W0, [X8 + 0x9C]
	0x01DEBBCC LDP X30, X19, [X31], #0x10
	0x01DEBBD0 RET
	0x01DEBBD4 ADRP X0, 0x2308000
	0x01DEBBD8 LDR X0, [X0 + 0x5B0]
	0x01DEBBDC BL 0x1C16D08
	0x01DEBBE0 BL 0x1C16F10
	0x01DEBBE4 MOV X19, X0
	0x01DEBBE8 ADRP X0, 0x230D000
	0x01DEBBEC LDR X0, [X0 + 0xFB0]
	0x01DEBBF0 BL 0x1C16D08
	0x01DEBBF4 MOV X1, X0
	0x01DEBBF8 MOV X0, X19
	0x01DEBBFC MOV X2, X31
	0x01DEBC00 BL 0x337DF1C
	0x01DEBC04 ADRP X0, 0x230D000
	0x01DEBC08 LDR X0, [X0 + 0xFB8]
	0x01DEBC0C BL 0x1C16D08
	0x01DEBC10 MOV X1, X0
	0x01DEBC14 MOV X0, X19
	0x01DEBC18 BL 0x1C16DEC
	0x01DEBC1C STP X30, X19, [X31 - 0x10]!
	0x01DEBC20 LDR X8, [X0 + 0x50]
	0x01DEBC24 CBZ X8, 0x1DEBC34
	0x01DEBC28 STR W1, [X8 + 0x9C]
	0x01DEBC2C LDP X30, X19, [X31], #0x10
	0x01DEBC30 RET
	0x01DEBC34 ADRP X0, 0x2308000
	0x01DEBC38 LDR X0, [X0 + 0x5B0]
	0x01DEBC3C BL 0x1C16D08
	0x01DEBC40 BL 0x1C16F10
	0x01DEBC44 MOV X19, X0
	0x01DEBC48 ADRP X0, 0x230D000
	0x01DEBC4C LDR X0, [X0 + 0xFB0]
	0x01DEBC50 BL 0x1C16D08
	0x01DEBC54 MOV X1, X0
	0x01DEBC58 MOV X0, X19
	0x01DEBC5C MOV X2, X31
	0x01DEBC60 BL 0x337DF1C
	0x01DEBC64 ADRP X0, 0x230D000
	0x01DEBC68 LDR X0, [X0 + 0xFC0]
	0x01DEBC6C BL 0x1C16D08
	0x01DEBC70 MOV X1, X0
	0x01DEBC74 MOV X0, X19
	0x01DEBC78 BL 0x1C16DEC
	0x01DEBC7C SUB X31, X31, 0x80
	0x01DEBC80 STR X30, [X31 + 0x40]
	0x01DEBC84 STP X24, X23, [X31 + 0x50]
	0x01DEBC88 STP X22, X21, [X31 + 0x60]
	0x01DEBC8C STP X20, X19, [X31 + 0x70]
	0x01DEBC90 ADRP X20, 0x25ED000
	0x01DEBC94 LDRB W8, [X20 + 0xCC6]
	0x01DEBC98 MOV X19, X0
	0x01DEBC9C TBNZ X8, 0x0, 0x1DEBCCC
	0x01DEBCA0 ADRP X0, 0x230D000
	0x01DEBCA4 LDR X0, [X0 + 0xFC8]
	0x01DEBCA8 BL 0x1C16CF4
	0x01DEBCAC ADRP X0, 0x230D000
	0x01DEBCB0 LDR X0, [X0 + 0xFD0]
	0x01DEBCB4 BL 0x1C16CF4
	0x01DEBCB8 ADRP X0, 0x230D000
	0x01DEBCBC LDR X0, [X0 + 0xFD8]
	0x01DEBCC0 BL 0x1C16CF4
	0x01DEBCC4 MOVZ W8, 0x1
	0x01DEBCC8 STRB W8, [X20 + 0xCC6]
	0x01DEBCCC MOV X0, X19
	0x01DEBCD0 MOV X1, X31
	0x01DEBCD4 STP X31, X31, [X31 + 0x20]
	0x01DEBCD8 STR X31, [X31 + 0x30]
	0x01DEBCDC BL 0x1E73F88
	0x01DEBCE0 LDR X0, [X19 + 0x40]
	0x01DEBCE4 CBZ X0, 0x1DEBDF4
	0x01DEBCE8 LDRB W8, [X0 + 0x60]
	0x01DEBCEC TBNZ X8, 0x1, 0x1DEBDF4
	0x01DEBCF0 MOV X1, X31
	0x01DEBCF4 BL 0x1E93668
	0x01DEBCF8 TBZ X0, 0x0, 0x1DEBDF4
	0x01DEBCFC MOVZ W1, 0x64
	0x01DEBD00 MOV X0, X19
	0x01DEBD04 BL 0x1DEBA90
	0x01DEBD08 LDR X0, [X19 + 0x80]
	0x01DEBD0C CBZ X0, 0x1DEBDA8
	0x01DEBD10 MOVZ W1, 0x1
	0x01DEBD14 MOV X2, X31
	0x01DEBD18 MOVZ W22, 0x1
	0x01DEBD1C BL 0x3C357B4
	0x01DEBD20 LDR X0, [X19 + 0xD8]
	0x01DEBD24 CBZ X0, 0x1DEBDA8
	0x01DEBD28 ADRP X21, 0x2308000
	0x01DEBD2C ADRP X24, 0x230D000
	0x01DEBD30 LDR X21, [X21 + 0x5A0]
	0x01DEBD34 LDR X24, [X24 + 0xFD8]
	0x01DEBD38 MOV W20, W31
	0x01DEBD3C ADRP X23, 0x25ED000
	0x01DEBD40 LDR W8, [X0 + 0x18]
	0x01DEBD44 CMP W20, W8
	0x01DEBD48 B.GE 0x1DEBDAC
	0x01DEBD4C ADD X8, X31, 0x8
	0x01DEBD50 MOV X0, X19
	0x01DEBD54 BL 0x1DEB578
	0x01DEBD58 LDUR V0, [X31 + 0x8]
	0x01DEBD5C LDR X8, [X31 + 0x18]
	0x01DEBD60 LDRB W9, [X23 + 0x783]
	0x01DEBD64 STR V0, [X31 + 0x2]
	0x01DEBD68 STR X8, [X31 + 0x30]
	0x01DEBD6C CBNZ W9, 0x1DEBD7C
	0x01DEBD70 MOV X0, X21
	0x01DEBD74 BL 0x1C16CF4
	0x01DEBD78 STRB W22, [X23 + 0x783]
	0x01DEBD7C LDR X8, [X21]
	0x01DEBD80 LDR X2, [X24]
	0x01DEBD84 ADD X0, X31, 0x20
	0x01DEBD88 MOV W1, W20
	0x01DEBD8C LDR X8, [X8 + 0xB8]
	0x01DEBD90 LDP S0, S1, [X8]
	0x01DEBD94 LDR V2, [X8 + 0x8]
	0x01DEBD98 BL 0x2410098
	0x01DEBD9C LDR X0, [X19 + 0xD8]
	0x01DEBDA0 ADD W20, W20, 0x1
	0x01DEBDA4 CBNZ X0, 0x1DEBD40
	0x01DEBDA8 BL 0x1C16F20
	0x01DEBDAC CMP W8, 0x1
	0x01DEBDB0 B.LT 0x1DEBDF4
	0x01DEBDB4 ADRP X21, 0x230D000
	0x01DEBDB8 LDR X21, [X21 + 0xFD0]
	0x01DEBDBC MOV W20, W31
	0x01DEBDC0 LDR X2, [X21]
	0x01DEBDC4 MOV W1, W20
	0x01DEBDC8 BL 0x301BCCC
	0x01DEBDCC MOV X1, X0
	0x01DEBDD0 MOVZ W2, 0x1
	0x01DEBDD4 MOV X0, X19
	0x01DEBDD8 BL 0x1DEBE0C
	0x01DEBDDC LDR X0, [X19 + 0xD8]
	0x01DEBDE0 CBZ X0, 0x1DEBDA8
	0x01DEBDE4 LDR W8, [X0 + 0x18]
	0x01DEBDE8 ADD W20, W20, 0x1
	0x01DEBDEC CMP W20, W8
	0x01DEBDF0 B.LT 0x1DEBDC0
	0x01DEBDF4 LDP X20, X19, [X31 + 0x70]
	0x01DEBDF8 LDP X22, X21, [X31 + 0x60]
	0x01DEBDFC LDP X24, X23, [X31 + 0x50]
	0x01DEBE00 LDR X30, [X31 + 0x40]
	0x01DEBE04 ADD X31, X31, 0x80
	0x01DEBE08 RET
	0x01DEBE0C SUB X31, X31, 0xE0
	0x01DEBE10 STP D13, D12, [X31 + 0x80]
	0x01DEBE14 STP D11, D10, [X31 + 0x90]
	0x01DEBE18 STP D9, D8, [X31 + 0xA0]
	0x01DEBE1C STP X30, X23, [X31 + 0xB0]
	0x01DEBE20 STP X22, X21, [X31 + 0xC0]
	0x01DEBE24 STP X20, X19, [X31 + 0xD0]
	0x01DEBE28 ADRP X22, 0x25ED000
	0x01DEBE2C LDRB W8, [X22 + 0xCCA]
	0x01DEBE30 MOV W20, W2
	0x01DEBE34 MOV X21, X1
	0x01DEBE38 MOV X19, X0
	0x01DEBE3C TBNZ X8, 0x0, 0x1DEBE78
	0x01DEBE40 ADRP X0, 0x2308000
	0x01DEBE44 LDR X0, [X0 + 0x5D8]
	0x01DEBE48 BL 0x1C16CF4

ISIL:
	001 Move [X31-112], D15
	002 Move [X31-104], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x25EE000
	015 Move X21, 0x230E000
	016 Move W8, [X20+3342]
	017 Move X21, [X21+3008]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {34}
	023 Move X0, 0x2309000
	024 Move X0, [X0+2416]
	025 Call 0x1C17CF4
	026 Move X0, 0x230E000
	027 Move X0, [X0+3008]
	028 Call 0x1C17CF4
	029 Move X0, 0x2309000
	030 Move X0, [X0+1432]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+3342], W8
	034 Move X0, [X21]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X21]
	040 Move X8, [X0+184]
	041 Move X0, X31
	042 Move S0, [X8+32]
	043 Move S1, [X8+36]
	044 Move S2, [X8+40]
	045 Move S3, [X8+44]
	046 Call Gizmos.set_color, X0
	047 Move X0, [X19+216]
	048 Compare X0, 0
	049 JumpIfEqual {455}
	050 Move X1, X31
	051 Call Transform.get_position, X0
	052 Move X8, [X19+192]
	053 Compare X8, 0
	054 JumpIfEqual {455}
	055 Move V3, [X8+128]
	056 Move X0, X31
	057 Call Gizmos.DrawWireSphere, X0, V0
	058 Move X8, [X21]
	059 Move X0, X31
	060 Move X8, [X8+184]
	061 Move S0, [X8]
	062 Move S1, [X8+4]
	063 Move S2, [X8+8]
	064 Move S3, [X8+12]
	065 Call Gizmos.set_color, X0
	066 Move X0, [X19+208]
	067 Compare X0, 0
	068 JumpIfEqual {455}
	069 Move X1, X31
	070 Call Transform.get_position, X0
	071 Move X0, [X19+208]
	072 Compare X0, 0
	073 JumpIfEqual {455}
	074 Move X1, X31
	075 Move V8, V0
	076 Move V9, V1
	077 Move V10, V2
	078 Call Transform.get_position, X0
	079 Move X0, [X19+208]
	080 Compare X0, 0
	081 JumpIfEqual {455}
	082 Move X1, X31
	083 Move V11, V0
	084 Move V12, V1
	085 Move V13, V2
	086 Call Transform.get_forward, X0
	087 Move X8, [X19+192]
	088 Compare X8, 0
	089 JumpIfEqual {455}
	090 Move X8, [X8+120]
	091 Compare X8, 0
	092 JumpIfEqual {455}
	093 Move W9, [X8+24]
	094 Compare W9, 0
	095 JumpIfEqual {456}
	096 Move V3, [X8+32]
	097 Move X0, X31
	098 Multiply S0, S0, S3
	099 Multiply S1, S1, S3
	100 Multiply S2, S2, S3
	101 Add S3, S11, S0
	102 Add S4, S12, S1
	103 Add S5, S13, S2
	104 Move V0, V8
	105 Move V1, V9
	106 Move V2, V10
	107 Call Gizmos.DrawLine, X0, X1
	108 Move X8, [X19+192]
	109 Compare X8, 0
	110 JumpIfEqual {455}
	111 Move V0, [X8+112]
	112 Move X20, 0x25EE000
	113 Move W8, [X20+1926]
	114 Move S1, 0.5
	115 Multiply S8, S0, S1
	116 Compare W8, 0
	117 JumpIfNotEqual {123}
	118 Move X0, 0x2309000
	119 Move X0, [X0+1440]
	120 Call 0x1C17CF4
	121 Move W8, 1
	122 Move [X20+1926], W8
	123 Move X22, 0x2309000
	124 Move X22, [X22+1440]
	125 NotImplemented "Instruction FNEG not yet implemented."
	126 Move X0, X31
	127 Move X8, [X22]
	128 Move X8, [X8+184]
	129 Move S1, [X8+24]
	130 Move S2, [X8+28]
	131 Move V3, [X8+32]
	132 Call Quaternion.AngleAxis, V0, X0
	133 Move X0, [X19+208]
	134 Compare X0, 0
	135 JumpIfEqual {455}
	136 Move X1, X31
	137 Move V9, V0
	138 Move V10, V1
	139 Move V11, V2
	140 Move V12, V3
	141 Call Transform.get_forward, X0
	142 Move V4, V0
	143 Move V5, V1
	144 Move V6, V2
	145 Move V0, V9
	146 Move V1, V10
	147 Move V2, V11
	148 Move V3, V12
	149 Move X0, X31
	150 Call Quaternion.op_Multiply, X0, X1
	151 Move W8, [X20+1926]
	152 Move V10, V0
	153 Move V11, V1
	154 Move V13, V2
	155 Compare W8, 0
	156 JumpIfNotEqual {162}
	157 Move X0, 0x2309000
	158 Move X0, [X0+1440]
	159 Call 0x1C17CF4
	160 Move W8, 1
	161 Move [X20+1926], W8
	162 Move X8, [X22]
	163 Move V0, V8
	164 Move X0, X31
	165 Move X8, [X8+184]
	166 Move S1, [X8+24]
	167 Move S2, [X8+28]
	168 Move V3, [X8+32]
	169 Call Quaternion.AngleAxis, V0, X0
	170 Move X0, [X19+208]
	171 Compare X0, 0
	172 JumpIfEqual {455}
	173 Move X1, X31
	174 Move V8, V0
	175 Move V9, V1
	176 Move V12, V2
	177 Move V14, V3
	178 Call Transform.get_forward, X0
	179 Move V4, V0
	180 Move V5, V1
	181 Move V6, V2
	182 Move V0, V8
	183 Move V1, V9
	184 Move V2, V12
	185 Move V3, V14
	186 Move X0, X31
	187 Call Quaternion.op_Multiply, X0, X1
	188 Move X0, [X19+208]
	189 Move [X31+76], S0
	190 Compare X0, 0
	191 JumpIfEqual {455}
	192 Move X1, X31
	193 Move V9, V1
	194 Move V12, V2
	195 Call Transform.get_position, X0
	196 Move X0, [X19+208]
	197 Compare X0, 0
	198 JumpIfEqual {455}
	199 Move X1, X31
	200 Move V14, V0
	201 Move V15, V1
	202 Move V8, V2
	203 Call Transform.get_position, X0
	204 Move X8, [X19+192]
	205 Compare X8, 0
	206 JumpIfEqual {455}
	207 Move X8, [X8+120]
	208 Compare X8, 0
	209 JumpIfEqual {455}
	210 Move W9, [X8+24]
	211 Compare W9, 0
	212 JumpIfEqual {456}
	213 Move V3, [X8+32]
	214 Move X0, X31
	215 Multiply S4, S10, S3
	216 Multiply S5, S11, S3
	217 Multiply S6, S13, S3
	218 Add S3, S0, S4
	219 Add S4, S1, S5
	220 Add S5, S2, S6
	221 Move V0, V14
	222 Move V1, V15
	223 Move V2, V8
	224 Call Gizmos.DrawLine, X0, X1
	225 Move X0, [X19+208]
	226 Compare X0, 0
	227 JumpIfEqual {455}
	228 Move X1, X31
	229 Call Transform.get_position, X0
	230 Move X0, [X19+208]
	231 Compare X0, 0
	232 JumpIfEqual {455}
	233 Move X1, X31
	234 Move V10, V0
	235 Move V11, V1
	236 Move V8, V2
	237 Call Transform.get_position, X0
	238 Move X8, [X19+192]
	239 Compare X8, 0
	240 JumpIfEqual {455}
	241 Move X8, [X8+120]
	242 Compare X8, 0
	243 JumpIfEqual {455}
	244 Move W9, [X8+24]
	245 Compare W9, 0
	246 JumpIfEqual {456}
	247 Move V3, [X8+32]
	248 Move V4, [X31+76]
	249 Move X0, X31
	250 Multiply S5, S9, S3
	251 Multiply S4, S4, S3
	252 Multiply S6, S12, S3
	253 Add S3, S0, S4
	254 Add S4, S1, S5
	255 Add S5, S2, S6
	256 Move V0, V10
	257 Move V1, V11
	258 Move V2, V8
	259 Call Gizmos.DrawLine, X0, X1
	260 Move X8, [X21]
	261 Move X0, X31
	262 Move X8, [X8+184]
	263 Move S0, [X8+16]
	264 Move S1, [X8+20]
	265 Move S2, [X8+24]
	266 Move S3, [X8+28]
	267 Call Gizmos.set_color, X0
	268 Move X0, [X19+208]
	269 Compare X0, 0
	270 JumpIfEqual {455}
	271 Move X1, X31
	272 Call Transform.get_position, X0
	273 Move X8, -19927040
	274 Move V3, [X8+3876]
	275 Move X0, X31
	276 Call Gizmos.DrawSphere, X0, V0
	277 Move X8, [X21]
	278 Move X0, X31
	279 Move X8, [X8+184]
	280 Move S0, [X8+144]
	281 Move S1, [X8+148]
	282 Move S2, [X8+152]
	283 Move S3, [X8+156]
	284 Call Gizmos.set_color, X0
	285 Move X0, [X19+232]
	286 Compare X0, 0
	287 JumpIfEqual {455}
	288 Move X20, 0x2309000
	289 Move X20, [X20+2416]
	290 Move X1, X31
	291 Call NavMeshAgent.get_destination, X0
	292 Move S3, 0.25
	293 Move X0, X31
	294 Call Gizmos.DrawSphere, X0, V0
	295 Move X0, [X20]
	296 Move W8, [X0+224]
	297 Compare W8, 0
	298 JumpIfNotEqual {300}
	299 Call 0x1C17DFC
	300 Move X0, X31
	301 Call Application.get_isPlaying
	302 Move TEMP, X0
	303 And TEMP, TEMP, 1
	304 Compare TEMP, 1
	305 JumpIfNotEqual {441}
	306 Move X22, 0x2309000
	307 Move X22, [X22+1432]
	308 Move X20, [X19+336]
	309 Move X0, [X22]
	310 Move W8, [X0+224]
	311 Compare W8, 0
	312 JumpIfNotEqual {314}
	313 Call 0x1C17DFC
	314 Move X0, X20
	315 Move X1, X31
	316 Move X2, X31
	317 Call Object.op_Inequality, X0, X1
	318 Move TEMP, X0
	319 And TEMP, TEMP, 1
	320 Compare TEMP, 1
	321 JumpIfNotEqual {409}
	322 Move X0, [X21]
	323 Move W8, [X0+224]
	324 Compare W8, 0
	325 JumpIfNotEqual {328}
	326 Call 0x1C17DFC
	327 Move X0, [X21]
	328 Move X8, [X0+184]
	329 Move X0, X31
	330 Move S0, [X8+80]
	331 Move S1, [X8+84]
	332 Move S2, [X8+88]
	333 Move S3, [X8+92]
	334 Call Gizmos.set_color, X0
	335 Move X0, [X19+208]
	336 Compare X0, 0
	337 JumpIfEqual {455}
	338 Move X1, X31
	339 Call Transform.get_position, X0
	340 Move X8, [X19+336]
	341 Compare X8, 0
	342 JumpIfEqual {455}
	343 Move S3, [X8+40]
	344 Move S4, [X8+44]
	345 Move V5, [X8+48]
	346 Move X0, X31
	347 Call Gizmos.DrawLine, X0, X1
	348 Move X8, [X19+336]
	349 Compare X8, 0
	350 JumpIfEqual {455}
	351 Move S0, [X8+40]
	352 Move S1, [X8+44]
	353 Move V2, [X8+48]
	354 Move X8, -19922944
	355 Move V8, [X8+860]
	356 Move X0, X31
	357 Move V3, V8
	358 Call Gizmos.DrawSphere, X0, V0
	359 Move X0, [X22]
	360 Move X20, [X19+344]
	361 Move W8, [X0+224]
	362 Compare W8, 0
	363 JumpIfNotEqual {365}
	364 Call 0x1C17DFC
	365 Move X0, X20
	366 Move X1, X31
	367 Move X2, X31
	368 Call Object.op_Inequality, X0, X1
	369 Move TEMP, X0
	370 And TEMP, TEMP, 1
	371 Compare TEMP, 1
	372 JumpIfNotEqual {409}
	373 Move X0, [X21]
	374 Move W8, [X0+224]
	375 Compare W8, 0
	376 JumpIfNotEqual {379}
	377 Call 0x1C17DFC
	378 Move X0, [X21]
	379 Move X8, [X0+184]
	380 Move X0, X31
	381 Move S0, [X8+96]
	382 Move S1, [X8+100]
	383 Move S2, [X8+104]
	384 Move S3, [X8+108]
	385 Call Gizmos.set_color, X0
	386 Move X8, [X19+336]
	387 Compare X8, 0
	388 JumpIfEqual {455}
	389 Move X9, [X19+344]
	390 Compare X9, 0
	391 JumpIfEqual {455}
	392 Move S1, [X8+44]
	393 Move S2, [X8+48]
	394 Move V0, [X8+40]
	395 Move S3, [X9+40]
	396 Move S4, [X9+44]
	397 Move V5, [X9+48]
	398 Move X0, X31
	399 Call Gizmos.DrawLine, X0, X1
	400 Move X8, [X19+344]
	401 Compare X8, 0
	402 JumpIfEqual {455}
	403 Move S0, [X8+40]
	404 Move S1, [X8+44]
	405 Move V2, [X8+48]
	406 Move V3, V8
	407 Move X0, X31
	408 Call Gizmos.DrawSphere, X0, V0
	409 Move X0, [X21]
	410 Move W8, [X0+224]
	411 Compare W8, 0
	412 JumpIfNotEqual {415}
	413 Call 0x1C17DFC
	414 Move X0, [X21]
	415 Move X8, [X0+184]
	416 Move X0, X31
	417 Move S0, [X8+192]
	418 Move S1, [X8+196]
	419 Move S2, [X8+200]
	420 Move S3, [X8+204]
	421 Call Gizmos.set_color, X0
	422 Move X0, X19
	423 Call MobController.get__targetPosition, X0
	424 Move X20, [X31+96]
	425 Move X19, [X31+104]
	426 Move X22, [X31+80]
	427 Move X21, [X31+88]
	428 Move X30, [X31+64]
	429 Move D9, [X31+48]
	430 Move D8, [X31+56]
	431 Move D11, [X31+32]
	432 Move D10, [X31+40]
	433 Move D13, [X31+16]
	434 Move D12, [X31+24]
	435 Move S3, 0.5
	436 Move X0, X31
	437 Move D15, [X31+112]
	438 Move D14, [X31+120]
	439 Call Gizmos.DrawWireSphere, X0, V0
	440 Return 
	441 Move X20, [X31+96]
	442 Move X19, [X31+104]
	443 Move X22, [X31+80]
	444 Move X21, [X31+88]
	445 Move X30, [X31+64]
	446 Move D9, [X31+48]
	447 Move D8, [X31+56]
	448 Move D11, [X31+32]
	449 Move D10, [X31+40]
	450 Move D13, [X31+16]
	451 Move D12, [X31+24]
	452 Move D15, [X31+112]
	453 Move D14, [X31+120]
	454 Return 
	455 Call 0x1C17F20
	456 Call 0x1C17F28

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x01DF870C LDR X20, [X20 + 0x5A0]
	0x01DF8710 MOV W9, W9
	0x01DF8714 MOV X23, X31
	0x01DF8718 MOVZ W27, 0x20
	0x01DF871C SUB X28, X9, 0x1
	0x01DF8720 ADRP X29, 0x25E0000
	0x01DF8724 LDR W9, [X8 + 0xE0]
	0x01DF8728 CBNZ W9, 0x1DF8738
	0x01DF872C MOV X0, X8
	0x01DF8730 BL 0x1C16DFC
	0x01DF8734 LDR X8, [X22]
	0x01DF8738 LDR X8, [X8 + 0xB8]
	0x01DF873C LDR X8, [X8 + 0x18]
	0x01DF8740 CBZ X8, 0x1DF897C
	0x01DF8744 LDR W9, [X8 + 0x18]
	0x01DF8748 CMP X23, X9
	0x01DF874C B.CS 0x1DF8980
	0x01DF8750 ADD X8, X8, X27
	0x01DF8754 LDR W9, [X8 + 0x28]
	0x01DF8758 LDR X10, [X8 + 0x20]
	0x01DF875C LDP V1, V0, [X8]
	0x01DF8760 ADD X0, X31, 0x20
	0x01DF8764 MOV X1, X31
	0x01DF8768 STR W9, [X31 + 0x48]
	0x01DF876C STR X10, [X31 + 0x40]
	0x01DF8770 STP V1, V0, [X31 + 0x20]
	0x01DF8774 BL 0x3C8E5C0
	0x01DF8778 LDR X8, [X24]
	0x01DF877C MOV X21, X0
	0x01DF8780 LDR W9, [X8 + 0xE0]
	0x01DF8784 CBNZ W9, 0x1DF8790
	0x01DF8788 MOV X0, X8
	0x01DF878C BL 0x1C16DFC
	0x01DF8790 MOV X0, X21
	0x01DF8794 MOV X1, X31
	0x01DF8798 MOV X2, X31
	0x01DF879C BL 0x3C354F8
	0x01DF87A0 TBZ X0, 0x0, 0x1DF8920
	0x01DF87A4 ADD X0, X31, 0x20
	0x01DF87A8 MOV X1, X31
	0x01DF87AC BL 0x3C8E5C0
	0x01DF87B0 CBZ X0, 0x1DF897C
	0x01DF87B4 LDR X2, [X25]
	0x01DF87B8 ADD X1, X31, 0x18
	0x01DF87BC BL 0x21A4990
	0x01DF87C0 TBZ X0, 0x0, 0x1DF8920
	0x01DF87C4 LDR X8, [X31 + 0x18]
	0x01DF87C8 CBZ X8, 0x1DF897C
	0x01DF87CC LDR X0, [X24]
	0x01DF87D0 LDR X21, [X8 + 0x20]
	0x01DF87D4 LDR W9, [X0 + 0xE0]
	0x01DF87D8 CBNZ W9, 0x1DF87E0
	0x01DF87DC BL 0x1C16DFC
	0x01DF87E0 MOV X0, X21
	0x01DF87E4 MOV X1, X31
	0x01DF87E8 MOV X2, X31
	0x01DF87EC BL 0x3C354F8
	0x01DF87F0 TBZ X0, 0x0, 0x1DF8920
	0x01DF87F4 LDR X8, [X31 + 0x18]
	0x01DF87F8 CBZ X8, 0x1DF897C
	0x01DF87FC LDR X0, [X8 + 0x20]
	0x01DF8800 CBZ X0, 0x1DF897C
	0x01DF8804 MOV X1, X31
	0x01DF8808 BL 0x1D8DFE0
	0x01DF880C TBZ X0, 0x0, 0x1DF8920
	0x01DF8810 ADD X0, X31, 0x20
	0x01DF8814 MOV X1, X31
	0x01DF8818 BL 0x3C8E66C
	0x01DF881C LDRB W8, [X29 + 0x783]
	0x01DF8820 MOV V8.16B, V0.16B
	0x01DF8824 MOV V9.16B, V1.16B
	0x01DF8828 MOV V11.16B, V2.16B
	0x01DF882C CBNZ W8, 0x1DF8840
	0x01DF8830 MOV X0, X20
	0x01DF8834 BL 0x1C16CF4
	0x01DF8838 MOVZ W8, 0x1
	0x01DF883C STRB W8, [X29 + 0x783]
	0x01DF8840 LDR X8, [X20]
	0x01DF8844 LDR X8, [X8 + 0xB8]
	0x01DF8848 LDP S0, S1, [X8]
	0x01DF884C LDR V2, [X8 + 0x8]
	0x01DF8850 FSUB S0, S8, S0
	0x01DF8854 FSUB S1, S9, S1
	0x01DF8858 FSUB S2, S11, S2
	0x01DF885C FMUL S0, S0, S0
	0x01DF8860 FMUL S1, S1, S1
	0x01DF8864 FADD S0, S0, S1
	0x01DF8868 FMUL S1, S2, S2
	0x01DF886C FADD S0, S1, S0
	0x01DF8870 FCMP S0, S12
	0x01DF8874 B.MI 0x1DF88C0
	0x01DF8878 ADD X0, X31, 0x20
	0x01DF887C MOV X1, X31
	0x01DF8880 BL 0x3C8E66C
	0x01DF8884 LDR X0, [X22]
	0x01DF8888 MOV V8.16B, V0.16B
	0x01DF888C MOV V9.16B, V1.16B
	0x01DF8890 MOV V11.16B, V2.16B
	0x01DF8894 LDR W8, [X0 + 0xE0]
	0x01DF8898 CBNZ W8, 0x1DF88A0
	0x01DF889C BL 0x1C16DFC
	0x01DF88A0 LDR V1, [X31 + 0x14]
	0x01DF88A4 MOV V0.16B, V13.16B
	0x01DF88A8 MOV V2.16B, V10.16B
	0x01DF88AC MOV V3.16B, V8.16B
	0x01DF88B0 MOV V4.16B, V9.16B
	0x01DF88B4 MOV V5.16B, V11.16B
	0x01DF88B8 BL 0x1DF37E8
	0x01DF88BC TBZ X0, 0x0, 0x1DF8920
	0x01DF88C0 LDR X8, [X31 + 0x18]
	0x01DF88C4 CBZ X8, 0x1DF897C
	0x01DF88C8 LDR X0, [X19]
	0x01DF88CC CBZ X0, 0x1DF897C
	0x01DF88D0 LDR W10, [X0 + 0x1C]
	0x01DF88D4 LDR X1, [X8 + 0x20]
	0x01DF88D8 LDR X8, [X0 + 0x10]
	0x01DF88DC LDR X9, [X26]
	0x01DF88E0 ADD W10, W10, 0x1
	0x01DF88E4 STR W10, [X0 + 0x1C]
	0x01DF88E8 CBZ X8, 0x1DF897C
	0x01DF88EC LDRSW X10, [X0 + 0x18]
	0x01DF88F0 LDR W11, [X8 + 0x18]
	0x01DF88F4 CMP W10, W11
	0x01DF88F8 B.CS 0x1DF8910
	0x01DF88FC ADD W9, W10, 0x1
	0x01DF8900 ADD X8, X8, X10, 0x3, LSL
	0x01DF8904 STR W9, [X0 + 0x18]
	0x01DF8908 STR X1, [X8 + 0x20]
	0x01DF890C B 0x1DF8920
	0x01DF8910 LDR X8, [X9 + 0x20]
	0x01DF8914 LDR X8, [X8 + 0xC0]
	0x01DF8918 LDR X2, [X8 + 0x70]
	0x01DF891C BL 0x301BF90
	0x01DF8920 CMP X28, X23
	0x01DF8924 B.EQ 0x1DF8938
	0x01DF8928 LDR X8, [X22]
	0x01DF892C ADD X23, X23, 0x1
	0x01DF8930 ADD X27, X27, 0x2C
	0x01DF8934 B 0x1DF8724
	0x01DF8938 LDR X8, [X19]
	0x01DF893C CBZ X8, 0x1DF897C
	0x01DF8940 LDR W8, [X8 + 0x18]
	0x01DF8944 LDP X20, X19, [X31 + 0xE0]
	0x01DF8948 LDP X22, X21, [X31 + 0xD0]
	0x01DF894C LDP X24, X23, [X31 + 0xC0]
	0x01DF8950 LDP X26, X25, [X31 + 0xB0]
	0x01DF8954 LDP X28, X27, [X31 + 0xA0]
	0x01DF8958 LDP X29, X30, [X31 + 0x90]
	0x01DF895C LDP D9, D8, [X31 + 0x80]
	0x01DF8960 LDP D11, D10, [X31 + 0x70]
	0x01DF8964 LDP D13, D12, [X31 + 0x60]
	0x01DF8968 LDP D15, D14, [X31 + 0x50]
	0x01DF896C CMP W8, 0x0
	0x01DF8970 CSET W0, GT
	0x01DF8974 ADD X31, X31, 0xF0
	0x01DF8978 RET
	0x01DF897C BL 0x1C16F20
	0x01DF8980 BL 0x1C16F28
	0x01DF8984 SUB X31, X31, 0xF0
	0x01DF8988 STP D15, D14, [X31 + 0x50]
	0x01DF898C STP D13, D12, [X31 + 0x60]
	0x01DF8990 STP D11, D10, [X31 + 0x70]
	0x01DF8994 STP D9, D8, [X31 + 0x80]
	0x01DF8998 STP X29, X30, [X31 + 0x90]
	0x01DF899C STP X28, X27, [X31 + 0xA0]
	0x01DF89A0 STP X26, X25, [X31 + 0xB0]
	0x01DF89A4 STP X24, X23, [X31 + 0xC0]
	0x01DF89A8 STP X22, X21, [X31 + 0xD0]
	0x01DF89AC STP X20, X19, [X31 + 0xE0]
	0x01DF89B0 STR S6, [X31 + 0x8]
	0x01DF89B4 STR S1, [X31 + 0x14]
	0x01DF89B8 ADRP X20, 0x25E0000
	0x01DF89BC ADRP X22, 0x2300000
	0x01DF89C0 LDRB W8, [X20 + 0xD21]
	0x01DF89C4 LDR X22, [X22 + 0xC40]
	0x01DF89C8 MOV X19, X0
	0x01DF89CC MOV V10.16B, V5.16B
	0x01DF89D0 MOV V12.16B, V4.16B
	0x01DF89D4 MOV V9.16B, V3.16B
	0x01DF89D8 MOV V11.16B, V2.16B
	0x01DF89DC MOV V15.16B, V0.16B
	0x01DF89E0 TBNZ X8, 0x0, 0x1DF8A28
	0x01DF89E4 ADRP X0, 0x2301000
	0x01DF89E8 LDR X0, [X0 + 0x470]
	0x01DF89EC BL 0x1C16CF4
	0x01DF89F0 ADRP X0, 0x22FB000
	0x01DF89F4 LDR X0, [X0 + 0x5D8]
	0x01DF89F8 BL 0x1C16CF4
	0x01DF89FC ADRP X0, 0x2300000
	0x01DF8A00 LDR X0, [X0 + 0xC40]
	0x01DF8A04 BL 0x1C16CF4
	0x01DF8A08 ADRP X0, 0x22FB000
	0x01DF8A0C LDR X0, [X0 + 0x598]
	0x01DF8A10 BL 0x1C16CF4
	0x01DF8A14 ADRP X0, 0x22FB000
	0x01DF8A18 LDR X0, [X0 + 0x5F8]
	0x01DF8A1C BL 0x1C16CF4
	0x01DF8A20 MOVZ W8, 0x1
	0x01DF8A24 STRB W8, [X20 + 0xD21]
	0x01DF8A28 MOVI V0.2D, 0x0
	0x01DF8A2C STR X31, [X31 + 0x18]
	0x01DF8A30 STUR V0, [X31 + 0x3C]
	0x01DF8A34 STP V0, V0, [X31 + 0x20]
	0x01DF8A38 STR X31, [X19]
	0x01DF8A3C LDR X8, [X22]
	0x01DF8A40 ADRP X21, 0x22FB000
	0x01DF8A44 LDR W9, [X8 + 0xE0]
	0x01DF8A48 LDR X21, [X21 + 0x5D8]
	0x01DF8A4C CBNZ W9, 0x1DF8A5C
	0x01DF8A50 MOV X0, X8
	0x01DF8A54 BL 0x1C16DFC
	0x01DF8A58 LDR X8, [X22]
	0x01DF8A5C LDR X0, [X21]
	0x01DF8A60 LDR X8, [X8 + 0xB8]
	0x01DF8A64 STP S9, S12, [X31 + 0xC]
	0x01DF8A68 ADRP X23, 0x22FB000
	0x01DF8A6C LDR W9, [X0 + 0xE0]
	0x01DF8A70 LDR X20, [X8 + 0x18]
	0x01DF8A74 LDR X23, [X23 + 0x5F8]
	0x01DF8A78 FADD S9, S9, S9
	0x01DF8A7C FADD S8, S12, S12
	0x01DF8A80 MOV V12.16B, V10.16B
	0x01DF8A84 FADD S10, S10, S10
	0x01DF8A88 FMOV S14, 2
	0x01DF8A8C CBNZ W9, 0x1DF8A98
	0x01DF8A90 BL 0x1C16DFC
	0x01DF8A94 LDR X0, [X21]
	0x01DF8A98 LDR X8, [X0 + 0xB8]
	0x01DF8A9C LDR V0, [X31 + 0x14]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+64], D10
	003 Move [X31+80], D9
	004 Move [X31+88], D8
	005 Move [X31+96], X30
	006 Move [X31+104], X23
	007 Move [X31+112], X22
	008 Move [X31+120], X21
	009 Move [X31+128], X20
	010 Move [X31+136], X19
	011 Move X21, 0x25E1000
	012 Move X20, 0x22FC000
	013 Move W8, [X21+3343]
	014 Move X20, [X20+2416]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {40}
	020 Move X0, 0x22FC000
	021 Move X0, [X0+2416]
	022 Call 0x1C17CF4
	023 Move X0, 0x2301000
	024 Move X0, [X0+3008]
	025 Call 0x1C17CF4
	026 Move X0, 0x2302000
	027 Move X0, [X0+1000]
	028 Call 0x1C17CF4
	029 Move X0, 0x2302000
	030 Move X0, [X0+1008]
	031 Call 0x1C17CF4
	032 Move X0, 0x2302000
	033 Move X0, [X0+1016]
	034 Call 0x1C17CF4
	035 Move X0, 0x2302000
	036 Move X0, [X0+1024]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X21+3343], W8
	040 Move X0, [X20]
	041 Move [X31+32], X31
	042 Move [X31+40], X31
	043 Move [X31+48], X31
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X31
	049 Call Application.get_isPlaying
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {189}
	054 Move X0, [X19+320]
	055 Compare X0, 0
	056 JumpIfEqual {202}
	057 Move X23, 0x2302000
	058 Move X23, [X23+1024]
	059 Add X8, X31, 8
	060 Move X1, [X23]
	061 Call List`1<Object>.GetEnumerator, X0
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 Move X8, [X31+24]
	064 Move X9, -19976192
	065 Move X22, 0x2302000
	066 Move [X31+2], V0
	067 Move [X31+48], X8
	068 Move V8, [X9+188]
	069 Move X22, [X22+1008]
	070 Move X1, [X22]
	071 Add X0, X31, 32
	072 Call Enumerator<Object>.MoveNext, X0
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {92}
	077 Move X20, [X31+48]
	078 Move S0, 0.5
	079 Move S1, 0.5
	080 Move S2, 0.5
	081 Move S3, 1
	082 Move X0, X31
	083 Call Gizmos.set_color, X0
	084 Compare X20, 0
	085 JumpIfEqual {200}
	086 Move S0, [X20+40]
	087 Move S1, [X20+44]
	088 Move V2, [X20+48]
	089 Move V3, V8
	090 Move X0, X31
	091 Call Gizmos.DrawSphere, X0, V0
	092 Move X8, 0x2302000
	093 Move X8, [X8+1000]
	094 Add X0, X31, 32
	095 Move X1, [X8]
	096 Call Enumerator<Object>.Dispose, X0
	097 Move X0, [X19+328]
	098 Compare X0, 0
	099 JumpIfEqual {202}
	100 Move X1, [X23]
	101 Add X8, X31, 8
	102 Call List`1<Object>.GetEnumerator, X0
	103 NotImplemented "Instruction LDUR not yet implemented."
	104 Move X8, [X31+24]
	105 Move [X31+2], V0
	106 Move [X31+48], X8
	107 Move X1, [X22]
	108 Add X0, X31, 32
	109 Call Enumerator<Object>.MoveNext, X0
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfNotEqual {129}
	114 Move X20, [X31+48]
	115 Move S0, W31
	116 Move S1, 1
	117 Move S2, W31
	118 Move S3, 1
	119 Move X0, X31
	120 Call Gizmos.set_color, X0
	121 Compare X20, 0
	122 JumpIfEqual {201}
	123 Move S0, [X20+40]
	124 Move S1, [X20+44]
	125 Move V2, [X20+48]
	126 Move V3, V8
	127 Move X0, X31
	128 Call Gizmos.DrawSphere, X0, V0
	129 Move X8, 0x2302000
	130 Move X8, [X8+1000]
	131 Add X0, X31, 32
	132 Move X1, [X8]
	133 Call Enumerator<Object>.Dispose, X0
	134 Move X20, 0x2301000
	135 Move X20, [X20+3008]
	136 Move X0, [X20]
	137 Move W8, [X0+224]
	138 Compare W8, 0
	139 JumpIfNotEqual {142}
	140 Call 0x1C17DFC
	141 Move X0, [X20]
	142 Move X8, [X0+184]
	143 Move X0, X31
	144 Move S0, [X8+112]
	145 Move S1, [X8+116]
	146 Move S2, [X8+120]
	147 Move S3, [X8+124]
	148 Call Gizmos.set_color, X0
	149 Move X0, [X19+208]
	150 Compare X0, 0
	151 JumpIfEqual {202}
	152 Move X1, X31
	153 Call Transform.get_position, X0
	154 Move X0, X19
	155 Move V8, V0
	156 Move V9, V1
	157 Move V10, V2
	158 Call MobController.get_searchPrecision, X0
	159 Move V3, V0
	160 Move V0, V8
	161 Move V1, V9
	162 Move V2, V10
	163 Move X0, X31
	164 Call Gizmos.DrawWireSphere, X0, V0
	165 Move X8, [X20]
	166 Move X0, X31
	167 Move X8, [X8+184]
	168 Move S0, [X8+128]
	169 Move S1, [X8+132]
	170 Move S2, [X8+136]
	171 Move S3, [X8+140]
	172 Call Gizmos.set_color, X0
	173 Move X0, [X19+208]
	174 Compare X0, 0
	175 JumpIfEqual {202}
	176 Move X1, X31
	177 Call Transform.get_position, X0
	178 Move X0, X19
	179 Move V8, V0
	180 Move V9, V1
	181 Move V10, V2
	182 Call MobController.get_searchWidth, X0
	183 Move V3, V0
	184 Move V0, V8
	185 Move V1, V9
	186 Move V2, V10
	187 Move X0, X31
	188 Call Gizmos.DrawWireSphere, X0, V0
	189 Move X20, [X31+128]
	190 Move X19, [X31+136]
	191 Move X22, [X31+112]
	192 Move X21, [X31+120]
	193 Move X30, [X31+96]
	194 Move X23, [X31+104]
	195 Move D9, [X31+80]
	196 Move D8, [X31+88]
	197 Move V10, [X31+64]
	198 Add X31, X31, 144
	199 Return 
	200 Call 0x1C17F20
	201 Call 0x1C17F20
	202 Call 0x1C17F20
	203 Move X20, X0
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move X0, X20
	206 Call 0x3EB2AD0
	207 Move X21, [X0]
	208 Call 0x3EB2AE0
	209 Move X8, 0x2302000
	210 Move X8, [X8+1000]
	211 Add X0, X31, 32
	212 Move X1, [X8]
	213 Call Enumerator<Object>.Dispose, X0
	214 Compare X21, 0
	215 JumpIfEqual {134}
	216 Move X21, X31
	217 Move X20, X0
	218 Move X8, 0x2302000
	219 Move X8, [X8+1000]
	220 Move X1, [X8]
	221 Add X0, X31, 32
	222 Call Enumerator<Object>.Dispose, X0
	223 Compare X21, 0
	224 JumpIfEqual {251}
	225 Move X0, X21
	226 Call 0x1C17F18
	227 Move X20, X0
	228 NotImplemented "Instruction CMP not yet implemented."
	229 Move X0, X20
	230 Call 0x3EB2AD0
	231 Move X21, [X0]
	232 Call 0x3EB2AE0
	233 Move X8, 0x2302000
	234 Move X8, [X8+1000]
	235 Add X0, X31, 32
	236 Move X1, [X8]
	237 Call Enumerator<Object>.Dispose, X0
	238 Compare X21, 0
	239 JumpIfEqual {97}
	240 Move X0, X21
	241 Call 0x1C17F18
	242 Move X21, X31
	243 Move X20, X0
	244 Move X8, 0x2302000
	245 Move X8, [X8+1000]
	246 Move X1, [X8]
	247 Add X0, X31, 32
	248 Call Enumerator<Object>.Dispose, X0
	249 Compare X21, 0
	250 JumpIfNotEqual {253}
	251 Move X0, X20
	252 Call 0x1D2D690
	253 Move X0, X21
	254 Call 0x1C17F18
	255 Call 0x1991590

Method: System.Void .ctor()

Disassembly:
	0x01DEBEA0 MOV V12.16B, V1.16B
	0x01DEBEA4 MOV V13.16B, V2.16B
	0x01DEBEA8 BL 0x3C32E90
	0x01DEBEAC CBZ X0, 0x1DEC0D4
	0x01DEBEB0 MOV X1, X31
	0x01DEBEB4 BL 0x3C3F58C
	0x01DEBEB8 ADRP X22, 0x25ED000
	0x01DEBEBC LDRB W8, [X22 + 0x785]
	0x01DEBEC0 MOV V8.16B, V0.16B
	0x01DEBEC4 MOV V9.16B, V1.16B
	0x01DEBEC8 MOV V10.16B, V2.16B
	0x01DEBECC CBNZ W8, 0x1DEBEE4
	0x01DEBED0 ADRP X0, 0x2308000
	0x01DEBED4 LDR X0, [X0 + 0x5A8]
	0x01DEBED8 BL 0x1C16CF4
	0x01DEBEDC MOVZ W8, 0x1
	0x01DEBEE0 STRB W8, [X22 + 0x785]
	0x01DEBEE4 ADRP X8, 0x2308000
	0x01DEBEE8 LDR X8, [X8 + 0x5A8]
	0x01DEBEEC LDR X0, [X8]
	0x01DEBEF0 LDR W8, [X0 + 0xE0]
	0x01DEBEF4 CBNZ W8, 0x1DEBEFC
	0x01DEBEF8 BL 0x1C16DFC
	0x01DEBEFC FMUL S0, S11, S11
	0x01DEBF00 FMUL S1, S12, S12
	0x01DEBF04 ADRP X8, 0xFFFFFFFFFECFF000
	0x01DEBF08 FADD S0, S0, S1
	0x01DEBF0C LDR V1, [X8 + 0x17C]
	0x01DEBF10 ADRP X22, 0x2308000
	0x01DEBF14 FMUL S2, S13, S13
	0x01DEBF18 LDR X22, [X22 + 0x5D8]
	0x01DEBF1C FADD S0, S2, S0
	0x01DEBF20 FSQRT S0, S0
	0x01DEBF24 FCMP S0, S1
	0x01DEBF28 B.LE 0x1DEBF3C
	0x01DEBF2C FDIV S11, S11, S0
	0x01DEBF30 FDIV S12, S12, S0
	0x01DEBF34 FDIV S13, S13, S0
	0x01DEBF38 B 0x1DEBF74
	0x01DEBF3C ADRP X23, 0x25ED000
	0x01DEBF40 LDRB W8, [X23 + 0x783]
	0x01DEBF44 CBNZ W8, 0x1DEBF5C
	0x01DEBF48 ADRP X0, 0x2308000
	0x01DEBF4C LDR X0, [X0 + 0x5A0]
	0x01DEBF50 BL 0x1C16CF4
	0x01DEBF54 MOVZ W8, 0x1
	0x01DEBF58 STRB W8, [X23 + 0x783]
	0x01DEBF5C ADRP X8, 0x2308000
	0x01DEBF60 LDR X8, [X8 + 0x5A0]
	0x01DEBF64 LDR X8, [X8]
	0x01DEBF68 LDR X8, [X8 + 0xB8]
	0x01DEBF6C LDP S11, S12, [X8]
	0x01DEBF70 LDR V13, [X8 + 0x8]
	0x01DEBF74 LDR X0, [X22]
	0x01DEBF78 ADRP X23, 0x2308000
	0x01DEBF7C LDR W8, [X0 + 0xE0]
	0x01DEBF80 LDR X23, [X23 + 0x5F8]
	0x01DEBF84 CBNZ W8, 0x1DEBF90
	0x01DEBF88 BL 0x1C16DFC
	0x01DEBF8C LDR X0, [X22]
	0x01DEBF90 LDR X8, [X0 + 0xB8]
	0x01DEBF94 MOV X1, X31
	0x01DEBF98 LDR W0, [X8]
	0x01DEBF9C BL 0x3C35CB8
	0x01DEBFA0 LDR X8, [X23]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x25EE000
	010 Move X22, 0x230E000
	011 Move X21, 0x230E000
	012 Move X24, 0x230E000
	013 Move X23, 0x230E000
	014 Move W8, [X20+3344]
	015 Move X22, [X22+3800]
	016 Move X21, [X21+3808]
	017 Move X24, [X24+3816]
	018 Move X23, [X23+3824]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {38}
	024 Move X0, 0x230E000
	025 Move X0, [X0+3808]
	026 Call 0x1C17CF4
	027 Move X0, 0x230E000
	028 Move X0, [X0+3824]
	029 Call 0x1C17CF4
	030 Move X0, 0x230E000
	031 Move X0, [X0+3816]
	032 Call 0x1C17CF4
	033 Move X0, 0x230E000
	034 Move X0, [X0+3800]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+3344], W8
	038 Move W25, 1
	039 Move [X19+241], W25
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X1, [X21]
	043 Move X20, X0
	044 Call List`1<Object>..ctor, X0
	045 Move [X19+320], X20
	046 Move X0, [X22]
	047 Call 0x1C17F10
	048 Move X1, [X21]
	049 Move X20, X0
	050 Call List`1<Object>..ctor, X0
	051 Move [X19+328], X20
	052 Move X0, [X24]
	053 Call 0x1C17F10
	054 Move X2, [X23]
	055 Move W1, 8
	056 Move X20, X0
	057 Call List`1<Object>..ctor, X0, X1
	058 Move [X19+376], X20
	059 Move [X19+384], W25
	060 Move X0, [X22]
	061 Call 0x1C17F10
	062 Move X1, [X21]
	063 Move X20, X0
	064 Call List`1<Object>..ctor, X0
	065 Move [X19+392], X20
	066 Move X0, X19
	067 Move X20, [X31+48]
	068 Move X19, [X31+56]
	069 Move X22, [X31+32]
	070 Move X21, [X31+40]
	071 Move X24, [X31+16]
	072 Move X23, [X31+24]
	073 Move X1, X31
	074 Move X30, [X31+64]
	075 Move X25, [X31+72]
	076 Call NetworkBehaviour..ctor, X0
	077 Return 

Method: System.Void .cctor()

Disassembly:
	0x01DF8AA0 MOV X1, X31
	0x01DF8AA4 MOV V13.16B, V15.16B
	0x01DF8AA8 LDR W0, [X8 + 0x38]
	0x01DF8AAC FSUB S8, S0, S8
	0x01DF8AB0 LDR V0, [X31 + 0x8]
	0x01DF8AB4 FSUB S15, S15, S9
	0x01DF8AB8 FSUB S9, S11, S10
	0x01DF8ABC MOV V10.16B, V11.16B
	0x01DF8AC0 FADD S14, S0, S14
	0x01DF8AC4 BL 0x3C35CB8
	0x01DF8AC8 LDR X8, [X23]
	0x01DF8ACC MOV W21, W0
	0x01DF8AD0 LDR W9, [X8 + 0xE0]
	0x01DF8AD4 CBNZ W9, 0x1DF8AE0
	0x01DF8AD8 MOV X0, X8
	0x01DF8ADC BL 0x1C16DFC
	0x01DF8AE0 LDP S4, S5, [X31 + 0xC]
	0x01DF8AE4 FMOV S3, 1.5
	0x01DF8AE8 MOV V0.16B, V15.16B
	0x01DF8AEC MOV V1.16B, V8.16B
	0x01DF8AF0 MOV V2.16B, V9.16B
	0x01DF8AF4 MOV V6.16B, V12.16B
	0x01DF8AF8 MOV X0, X20
	0x01DF8AFC MOV V7.16B, V14.16B
	0x01DF8B00 MOV W1, W21
	0x01DF8B04 MOV X2, X31
	0x01DF8B08 BL 0x3C8D9FC
	0x01DF8B0C LDR X8, [X22]
	0x01DF8B10 LDR X9, [X8 + 0xB8]
	0x01DF8B14 LDR X9, [X9 + 0x18]
	0x01DF8B18 CBZ X9, 0x1DF8D9C
	0x01DF8B1C LDR W9, [X9 + 0x18]
	0x01DF8B20 ADRP X23, 0x22FB000
	0x01DF8B24 LDR X23, [X23 + 0x598]
	0x01DF8B28 CMP W0, W9

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25E1000
	007 Move X22, 0x2302000
	008 Move X19, 0x2302000
	009 Move X20, 0x2300000
	010 Move W8, [X21+3345]
	011 Move X22, [X22+1104]
	012 Move X19, [X19+1112]
	013 Move X20, [X20+2144]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x2302000
	019 Move X0, [X0+1112]
	020 Call 0x1C17CF4
	021 Move X0, 0x2302000
	022 Move X0, [X0+1104]
	023 Call 0x1C17CF4
	024 Move X0, 0x2300000
	025 Move X0, [X0+2144]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3345], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call HashSet`1<Object>..ctor, X0
	034 Move X8, [X20]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8+8], X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01DEC2A4 BL 0x1DD0FA8
	0x01DEC2A8 MOV X0, X19
	0x01DEC2AC BL 0x1DEB970
	0x01DEC2B0 FMOV S1, 2
	0x01DEC2B4 FCMP S0, S1
	0x01DEC2B8 B.PL 0x1DEC330
	0x01DEC2BC MOV X0, X31
	0x01DEC2C0 BL 0x3C3C6EC
	0x01DEC2C4 LDR V1, [X19 + 0xB8]
	0x01DEC2C8 FSUB D0, D0, D1
	0x01DEC2CC FMOV D1, 1.0000000000582077
	0x01DEC2D0 FCMP D0, D1
	0x01DEC2D4 B.LE 0x1DEC30C
	0x01DEC2D8 LDR X21, [X19 + 0xB0]
	0x01DEC2DC MOV X0, X19
	0x01DEC2E0 MOV X1, X31
	0x01DEC2E4 BL 0x3C32E90
	0x01DEC2E8 CBZ X0, 0x1DEC344
	0x01DEC2EC MOV X1, X31
	0x01DEC2F0 BL 0x3C3F58C
	0x01DEC2F4 CBZ X21, 0x1DEC344
	0x01DEC2F8 FMOV S3, 1
	0x01DEC2FC MOVZ W1, 0x1
	0x01DEC300 MOV X0, X21
	0x01DEC304 MOV X2, X31
	0x01DEC308 BL 0x1DD0FA8
	0x01DEC30C MOV X0, X31
	0x01DEC310 BL 0x3C3C6EC
	0x01DEC314 MOV X0, X19
	0x01DEC318 MOV X1, X20
	0x01DEC31C STR D0, [X19 + 0xB8]
	0x01DEC320 BL 0x1DEB730
	0x01DEC324 FMOV S0, W31
	0x01DEC328 MOV X0, X19
	0x01DEC32C BL 0x1DEB9D0
	0x01DEC330 LDP X20, X19, [X31 + 0x60]
	0x01DEC334 LDP X22, X21, [X31 + 0x50]
	0x01DEC338 LDP X30, X23, [X31 + 0x40]
	0x01DEC33C ADD X31, X31, 0x70
	0x01DEC340 RET
	0x01DEC344 BL 0x1C16F20
	0x01DEC348 STR X30, [X31 - 0x30]!
	0x01DEC34C STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, [X0+128]
	004 Move X19, X0
	005 Call MobController.set_isDie, X0, X1
	006 Move W1, [X19+132]
	007 Move X0, X19
	008 Call MobController.set_status, X0, X1
	009 Move W1, [X19+136]
	010 Move X0, X19
	011 Call MobController.set__timerRevive, X0, X1
	012 Move W1, [X19+144]
	013 Move X0, X19
	014 Call MobController.set_health, X0, X1
	015 Move V0, [X19+148]
	016 Move X0, X19
	017 Call MobController.set_navAgentSpeed, X0, V0
	018 Move V0, [X19+152]
	019 Move X0, X19
	020 Call MobController.set_navAgentAngularSpeed, X0, V0
	021 Move V0, [X19+156]
	022 Move X0, X19
	023 Call MobController.set_searchPrecision, X0, V0
	024 Move V0, [X19+160]
	025 Move X0, X19
	026 Call MobController.set_searchWidth, X0, V0
	027 Move W1, [X19+164]
	028 Move X0, X19
	029 Call MobController.set_targetPlayerID, X0, X1
	030 Move V0, [X19+168]
	031 Move X0, X19
	032 Call MobController.set__timerToChasing, X0, V0
	033 Move V0, [X19+172]
	034 Move X0, X19
	035 Call MobController.set__timerToSearching, X0, V0
	036 Move V0, [X19+176]
	037 Move X0, X19
	038 Call MobController.set__timerAttackInterval, X0, V0
	039 Move V0, [X19+360]
	040 Move V1, [X19+364]
	041 Move V2, [X19+368]
	042 Move X0, X19
	043 Move X30, [X31+16]
	044 Move X19, [X31+24]
	045 Call MobController.set__targetPosition, X0, X1
	046 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01DEC39C MOVZ W8, 0x1
	0x01DEC3A0 STRB W8, [X22 + 0xCC8]
	0x01DEC3A4 STR X31, [X31 + 0x8]
	0x01DEC3A8 LDRB W8, [X19 + 0x58]
	0x01DEC3AC CBZ W8, 0x1DEC410
	0x01DEC3B0 STRB W31, [X19 + 0x58]
	0x01DEC3B4 ADRP X8, 0x2309000
	0x01DEC3B8 LDR X8, [X8 + 0x9A0]
	0x01DEC3BC LDR X0, [X8]
	0x01DEC3C0 LDR W8, [X0 + 0xE0]
	0x01DEC3C4 CBNZ W8, 0x1DEC3CC
	0x01DEC3C8 BL 0x1C16DFC
	0x01DEC3CC ADD X1, X31, 0x8
	0x01DEC3D0 MOV W0, W21
	0x01DEC3D4 MOV X2, X31
	0x01DEC3D8 BL 0x1DB2598
	0x01DEC3DC TBZ X0, 0x0, 0x1DEC528
	0x01DEC3E0 LDR X0, [X19 + 0xD8]
	0x01DEC3E4 CBZ X0, 0x1DEC538
	0x01DEC3E8 ADRP X8, 0x230C000
	0x01DEC3EC LDR X8, [X8 + 0xFD0]
	0x01DEC3F0 MOV W1, W20
	0x01DEC3F4 LDR X2, [X8]
	0x01DEC3F8 BL 0x301BCCC
	0x01DEC3FC LDR X2, [X31 + 0x8]
	0x01DEC400 MOV X1, X0
	0x01DEC404 MOV X0, X19
	0x01DEC408 BL 0x1DEC198
	0x01DEC40C B 0x1DEC528
	0x01DEC410 ADRP X22, 0x230A000
	0x01DEC414 LDR X22, [X22 + 0xA78]
	0x01DEC418 LDR X0, [X22]
	0x01DEC41C LDR W8, [X0 + 0xE0]
	0x01DEC420 CBNZ W8, 0x1DEC428
	0x01DEC424 BL 0x1C16DFC
	0x01DEC428 MOV X0, X19
	0x01DEC42C MOV X1, X31
	0x01DEC430 BL 0x1E77B08
	0x01DEC434 LDR X0, [X19 + 0x38]
	0x01DEC438 CBZ X0, 0x1DEC538
	0x01DEC43C MOV X1, X31
	0x01DEC440 BL 0x1E9E538
	0x01DEC444 CMP W0, 0x4
	0x01DEC448 B.EQ 0x1DEC528
	0x01DEC44C LDR X0, [X19 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobController.get_isDie, X0
	005 And W8, W0, 1
	006 Move X0, X19
	007 Move [X19+128], W8
	008 Call MobController.get_status, X0
	009 Move [X19+132], W0
	010 Move X0, X19
	011 Call MobController.get__timerRevive, X0
	012 Move [X19+136], W0
	013 Move X0, X19
	014 Call MobController.get_health, X0
	015 Move [X19+144], W0
	016 Move X0, X19
	017 Call MobController.get_navAgentSpeed, X0
	018 Move X0, X19
	019 Move [X19+148], S0
	020 Call MobController.get_navAgentAngularSpeed, X0
	021 Move X0, X19
	022 Move [X19+152], S0
	023 Call MobController.get_searchPrecision, X0
	024 Move X0, X19
	025 Move [X19+156], S0
	026 Call MobController.get_searchWidth, X0
	027 Move X0, X19
	028 Move [X19+160], S0
	029 Call MobController.get_targetPlayerID, X0
	030 Move [X19+164], W0
	031 Move X0, X19
	032 Call MobController.get__timerToChasing, X0
	033 Move X0, X19
	034 Move [X19+168], S0
	035 Call MobController.get__timerToSearching, X0
	036 Move X0, X19
	037 Move [X19+172], S0
	038 Call MobController.get__timerAttackInterval, X0
	039 Move X0, X19
	040 Move [X19+176], S0
	041 Call MobController.get__targetPosition, X0
	042 Move [X19+360], S0
	043 Move [X19+364], S1
	044 Move [X19+368], S2
	045 Move X30, [X31+16]
	046 Move X19, [X31+24]
	047 Return 

Method: System.Void RPC_SetStunView@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01DF8B2C CSEL W9, W0, W9, LT
	0x01DF8B30 CMP W9, 0x1
	0x01DF8B34 B.LT 0x1DF8D2C
	0x01DF8B38 ADRP X25, 0x2301000
	0x01DF8B3C ADRP X10, 0xFFFFFFFFFECF1000
	0x01DF8B40 ADRP X20, 0x22FB000
	0x01DF8B44 LDR X25, [X25 + 0x470]
	0x01DF8B48 LDR V12, [X10 + 0xF20]
	0x01DF8B4C LDR X20, [X20 + 0x5A0]
	0x01DF8B50 MOV W9, W9
	0x01DF8B54 MOV X24, X31
	0x01DF8B58 MOVZ W26, 0x20
	0x01DF8B5C SUB X27, X9, 0x1
	0x01DF8B60 ADRP X28, 0x25E0000
	0x01DF8B64 MOVZ W29, 0x1
	0x01DF8B68 LDR W9, [X8 + 0xE0]
	0x01DF8B6C CBNZ W9, 0x1DF8B7C
	0x01DF8B70 MOV X0, X8
	0x01DF8B74 BL 0x1C16DFC
	0x01DF8B78 LDR X8, [X22]
	0x01DF8B7C LDR X8, [X8 + 0xB8]
	0x01DF8B80 LDR X8, [X8 + 0x18]
	0x01DF8B84 CBZ X8, 0x1DF8D9C
	0x01DF8B88 LDR W9, [X8 + 0x18]
	0x01DF8B8C CMP X24, X9
	0x01DF8B90 B.CS 0x1DF8DA0
	0x01DF8B94 ADD X8, X8, X26
	0x01DF8B98 LDR W9, [X8 + 0x28]
	0x01DF8B9C LDR X10, [X8 + 0x20]
	0x01DF8BA0 LDP V1, V0, [X8]
	0x01DF8BA4 ADD X0, X31, 0x20
	0x01DF8BA8 MOV X1, X31
	0x01DF8BAC STR W9, [X31 + 0x48]
	0x01DF8BB0 STR X10, [X31 + 0x40]
	0x01DF8BB4 STP V1, V0, [X31 + 0x20]
	0x01DF8BB8 BL 0x3C8E5C0
	0x01DF8BBC LDR X8, [X23]
	0x01DF8BC0 MOV X21, X0
	0x01DF8BC4 LDR W9, [X8 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25E1000
	006 Move W8, [X21+3346]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2300000
	014 Move X0, [X0+2144]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3346], W8
	018 Compare X19, 0
	019 JumpIfEqual {46}
	020 Move X10, 0x2300000
	021 Move X10, [X10+2144]
	022 Move W9, 1
	023 Move W8, [X20+36]
	024 Move V0, [X20+40]
	025 Move [X19+88], W9
	026 Move X9, [X19]
	027 Move X1, [X10]
	028 Move W11, [X9+304]
	029 Move W10, [X1+304]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, [X9+200]
	032 Add X9, X9, X10
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CSET not yet implemented."
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call MobController.RPC_SetStunView, X0, X1, V0
	043 Return 
	044 Move X0, X19
	045 Call 0x1C181E0
	046 Call 0x1C17F20

Method: System.Void RPC_Hit@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01DF8BC8 CBNZ W9, 0x1DF8BD4
	0x01DF8BCC MOV X0, X8
	0x01DF8BD0 BL 0x1C16DFC
	0x01DF8BD4 MOV X0, X21
	0x01DF8BD8 MOV X1, X31
	0x01DF8BDC MOV X2, X31
	0x01DF8BE0 BL 0x3C354F8
	0x01DF8BE4 TBZ X0, 0x0, 0x1DF8D14
	0x01DF8BE8 ADD X0, X31, 0x20
	0x01DF8BEC MOV X1, X31
	0x01DF8BF0 BL 0x3C8E5C0
	0x01DF8BF4 CBZ X0, 0x1DF8D9C
	0x01DF8BF8 LDR X2, [X25]
	0x01DF8BFC ADD X1, X31, 0x18
	0x01DF8C00 BL 0x21A4990
	0x01DF8C04 TBZ X0, 0x0, 0x1DF8D14
	0x01DF8C08 LDR X8, [X31 + 0x18]
	0x01DF8C0C CBZ X8, 0x1DF8D9C
	0x01DF8C10 LDR X0, [X23]
	0x01DF8C14 LDR X21, [X8 + 0x20]
	0x01DF8C18 LDR W9, [X0 + 0xE0]
	0x01DF8C1C CBNZ W9, 0x1DF8C24
	0x01DF8C20 BL 0x1C16DFC
	0x01DF8C24 MOV X0, X21
	0x01DF8C28 MOV X1, X31
	0x01DF8C2C MOV X2, X31
	0x01DF8C30 BL 0x3C354F8
	0x01DF8C34 TBZ X0, 0x0, 0x1DF8D14
	0x01DF8C38 LDR X8, [X31 + 0x18]
	0x01DF8C3C CBZ X8, 0x1DF8D9C
	0x01DF8C40 LDR X0, [X8 + 0x20]
	0x01DF8C44 CBZ X0, 0x1DF8D9C
	0x01DF8C48 MOV X1, X31
	0x01DF8C4C BL 0x1D8DFE0
	0x01DF8C50 TBZ X0, 0x0, 0x1DF8D14
	0x01DF8C54 ADD X0, X31, 0x20
	0x01DF8C58 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25E1000
	006 Move W8, [X21+3347]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2300000
	014 Move X0, [X0+2144]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3347], W8
	018 Compare X19, 0
	019 JumpIfEqual {44}
	020 Move X8, 0x2300000
	021 Move X8, [X8+2144]
	022 Move W9, 1
	023 Move W1, [X20+36]
	024 Move [X19+88], W9
	025 Move X9, [X19]
	026 Move X8, [X8]
	027 Move W11, [X9+304]
	028 Move W10, [X8+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X9, [X9+200]
	031 Add X9, X9, X10
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Call MobController.RPC_Hit, X0, X1
	040 Return 
	041 Move X0, X19
	042 Move X1, X8
	043 Call 0x1C181E0
	044 Call 0x1C17F20

Method: System.Void RPC_Stun@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01DF8C5C BL 0x3C8E66C
	0x01DF8C60 LDRB W8, [X28 + 0x783]
	0x01DF8C64 MOV V8.16B, V0.16B
	0x01DF8C68 MOV V9.16B, V1.16B
	0x01DF8C6C MOV V11.16B, V2.16B
	0x01DF8C70 CBNZ W8, 0x1DF8C80
	0x01DF8C74 MOV X0, X20
	0x01DF8C78 BL 0x1C16CF4
	0x01DF8C7C STRB W29, [X28 + 0x783]
	0x01DF8C80 LDR X8, [X20]
	0x01DF8C84 LDR X8, [X8 + 0xB8]
	0x01DF8C88 LDP S0, S1, [X8]
	0x01DF8C8C LDR V2, [X8 + 0x8]
	0x01DF8C90 FSUB S0, S8, S0
	0x01DF8C94 FSUB S1, S9, S1
	0x01DF8C98 FSUB S2, S11, S2
	0x01DF8C9C FMUL S0, S0, S0
	0x01DF8CA0 FMUL S1, S1, S1
	0x01DF8CA4 FADD S0, S0, S1
	0x01DF8CA8 FMUL S1, S2, S2
	0x01DF8CAC FADD S0, S1, S0
	0x01DF8CB0 FCMP S0, S12
	0x01DF8CB4 B.PL 0x1DF8CCC
	0x01DF8CB8 LDR X8, [X31 + 0x18]
	0x01DF8CBC CBZ X8, 0x1DF8D9C
	0x01DF8CC0 LDR X8, [X8 + 0x20]
	0x01DF8CC4 STR X8, [X19]
	0x01DF8CC8 B 0x1DF8D14
	0x01DF8CCC ADD X0, X31, 0x20
	0x01DF8CD0 MOV X1, X31
	0x01DF8CD4 BL 0x3C8E66C
	0x01DF8CD8 LDR X0, [X22]
	0x01DF8CDC MOV V8.16B, V0.16B
	0x01DF8CE0 MOV V9.16B, V1.16B
	0x01DF8CE4 MOV V11.16B, V2.16B
	0x01DF8CE8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25E1000
	006 Move W8, [X21+3348]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2300000
	014 Move X0, [X0+2144]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3348], W8
	018 Compare X19, 0
	019 JumpIfEqual {43}
	020 Move X9, 0x2300000
	021 Move X9, [X9+2144]
	022 Move W8, 1
	023 Move V0, [X20+36]
	024 Move [X19+88], W8
	025 Move X8, [X19]
	026 Move X1, [X9]
	027 Move W10, [X8+304]
	028 Move W9, [X1+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X8+200]
	031 Add X8, X8, X9
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Call MobController.RPC_Stun, X0, V0
	040 Return 
	041 Move X0, X19
	042 Call 0x1C181E0
	043 Call 0x1C17F20

Method: System.Void RPC_SetViewIdle@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01DF8CEC CBNZ W8, 0x1DF8CF4
	0x01DF8CF0 BL 0x1C16DFC
	0x01DF8CF4 LDR V1, [X31 + 0x14]
	0x01DF8CF8 MOV V0.16B, V13.16B
	0x01DF8CFC MOV V2.16B, V10.16B
	0x01DF8D00 MOV V3.16B, V8.16B
	0x01DF8D04 MOV V4.16B, V9.16B
	0x01DF8D08 MOV V5.16B, V11.16B
	0x01DF8D0C BL 0x1DF37E8
	0x01DF8D10 TBNZ X0, 0x0, 0x1DF8D84
	0x01DF8D14 CMP X27, X24
	0x01DF8D18 B.EQ 0x1DF8D2C
	0x01DF8D1C LDR X8, [X22]
	0x01DF8D20 ADD X24, X24, 0x1
	0x01DF8D24 ADD X26, X26, 0x2C
	0x01DF8D28 B 0x1DF8B68
	0x01DF8D2C LDR X0, [X23]
	0x01DF8D30 LDR X19, [X19]
	0x01DF8D34 LDR W8, [X0 + 0xE0]
	0x01DF8D38 CBNZ W8, 0x1DF8D40
	0x01DF8D3C BL 0x1C16DFC
	0x01DF8D40 MOV X0, X19
	0x01DF8D44 MOV X1, X31
	0x01DF8D48 MOV X2, X31
	0x01DF8D4C BL 0x3C354F8
	0x01DF8D50 LDP X20, X19, [X31 + 0xE0]
	0x01DF8D54 LDP X22, X21, [X31 + 0xD0]
	0x01DF8D58 LDP X24, X23, [X31 + 0xC0]
	0x01DF8D5C LDP X26, X25, [X31 + 0xB0]
	0x01DF8D60 LDP X28, X27, [X31 + 0xA0]
	0x01DF8D64 LDP X29, X30, [X31 + 0x90]
	0x01DF8D68 LDP D9, D8, [X31 + 0x80]
	0x01DF8D6C LDP D11, D10, [X31 + 0x70]
	0x01DF8D70 LDP D13, D12, [X31 + 0x60]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25E1000
	005 Move W8, [X20+3349]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2300000
	012 Move X0, [X0+2144]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3349], W8
	016 Compare X19, 0
	017 JumpIfEqual {39}
	018 Move X9, 0x2300000
	019 Move X9, [X9+2144]
	020 Move W8, 1
	021 Move [X19+88], W8
	022 Move X8, [X19]
	023 Move X1, [X9]
	024 Move W10, [X8+304]
	025 Move W9, [X1+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, [X8+200]
	028 Add X8, X8, X9
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Call MobController.RPC_SetViewIdle, X0
	036 Return 
	037 Move X0, X19
	038 Call 0x1C181E0
	039 Call 0x1C17F20

Method: System.Void RPC_SetViewWalk@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01DF8D74 LDP D15, D14, [X31 + 0x50]
	0x01DF8D78 AND W0, W0, 0x1
	0x01DF8D7C ADD X31, X31, 0xF0
	0x01DF8D80 RET
	0x01DF8D84 LDR X8, [X31 + 0x18]
	0x01DF8D88 CBZ X8, 0x1DF8D9C
	0x01DF8D8C LDR X8, [X8 + 0x20]
	0x01DF8D90 MOVZ W0, 0x1
	0x01DF8D94 STR X8, [X19]
	0x01DF8D98 B 0x1DF8D50
	0x01DF8D9C BL 0x1C16F20
	0x01DF8DA0 BL 0x1C16F28
	0x01DF8DA4 SUB X31, X31, 0x140
	0x01DF8DA8 STP D15, D14, [X31 + 0xA0]
	0x01DF8DAC STP D13, D12, [X31 + 0xB0]
	0x01DF8DB0 STP D11, D10, [X31 + 0xC0]
	0x01DF8DB4 STP D9, D8, [X31 + 0xD0]
	0x01DF8DB8 STP X29, X30, [X31 + 0xE0]
	0x01DF8DBC STP X28, X27, [X31 + 0xF0]
	0x01DF8DC0 STP X26, X25, [X31 + 0x100]
	0x01DF8DC4 STP X24, X23, [X31 + 0x110]
	0x01DF8DC8 STP X22, X21, [X31 + 0x120]
	0x01DF8DCC STP X20, X19, [X31 + 0x130]
	0x01DF8DD0 ADRP X21, 0x25E0000
	0x01DF8DD4 LDRB W8, [X21 + 0xD22]
	0x01DF8DD8 MOV X19, X1
	0x01DF8DDC MOV X20, X0
	0x01DF8DE0 TBNZ X8, 0x0, 0x1DF8E7C
	0x01DF8DE4 ADRP X0, 0x22FF000
	0x01DF8DE8 LDR X0, [X0 + 0x850]
	0x01DF8DEC BL 0x1C16CF4
	0x01DF8DF0 ADRP X0, 0x2301000
	0x01DF8DF4 LDR X0, [X0 + 0x418]
	0x01DF8DF8 BL 0x1C16CF4
	0x01DF8DFC ADRP X0, 0x2301000
	0x01DF8E00 LDR X0, [X0 + 0x420]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25E1000
	006 Move W8, [X21+3350]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2300000
	014 Move X0, [X0+2144]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3350], W8
	018 Compare X19, 0
	019 JumpIfEqual {43}
	020 Move X9, 0x2300000
	021 Move X9, [X9+2144]
	022 Move W8, 1
	023 Move V0, [X20+36]
	024 Move [X19+88], W8
	025 Move X8, [X19]
	026 Move X1, [X9]
	027 Move W10, [X8+304]
	028 Move W9, [X1+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X8+200]
	031 Add X8, X8, X9
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Call MobController.RPC_SetViewWalk, X0, V0
	040 Return 
	041 Move X0, X19
	042 Call 0x1C181E0
	043 Call 0x1C17F20

