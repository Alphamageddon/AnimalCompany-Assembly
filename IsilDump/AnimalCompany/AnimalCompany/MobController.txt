Type: AnimalCompany.MobController

Method: System.Boolean get_isDie()

Disassembly:
	0x01CE5000 LDR X8, [X8 + 0xB8]
	0x01CE5004 STR X0, [X8 + 0x30]
	0x01CE5008 LDR X20, [X22]
	0x01CE500C MOV X0, X19
	0x01CE5010 MOV X1, X20
	0x01CE5014 BL 0x1B6E8FC
	0x01CE5018 CBNZ X0, 0x1CE5034
	0x01CE501C MOV X0, X19
	0x01CE5020 MOV X1, X20
	0x01CE5024 BL 0x1B6ECDC
	0x01CE5028 LDR X8, [X23]
	0x01CE502C LDR X8, [X8 + 0xB8]
	0x01CE5030 STR X31, [X8 + 0x30]
	0x01CE5034 LDP X20, X19, [X31 + 0x20]
	0x01CE5038 LDP X22, X21, [X31 + 0x10]
	0x01CE503C LDP X30, X23, [X31], #0x30
	0x01CE5040 RET
	0x01CE5044 BL 0x1B6EA1C
	0x01CE5048 STP X30, X23, [X31 - 0x30]!
	0x01CE504C STP X22, X21, [X31 + 0x10]
	0x01CE5050 STP X20, X19, [X31 + 0x20]
	0x01CE5054 ADRP X20, 0x253E000
	0x01CE5058 ADRP X21, 0x2269000
	0x01CE505C LDRB W8, [X20 + 0x65B]
	0x01CE5060 LDR X21, [X21 + 0x1C0]
	0x01CE5064 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2269000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x226C000
	018 Move X0, [X0+88]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x226C000
	025 Move X0, [X0+96]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set_isDie(System.Boolean value)

Disassembly:
	0x01CE5068 TBNZ X8, 0x0, 0x1CE50B0
	0x01CE506C ADRP X0, 0x2269000
	0x01CE5070 LDR X0, [X0 + 0x3E8]
	0x01CE5074 BL 0x1B6E7F0
	0x01CE5078 ADRP X0, 0x226B000
	0x01CE507C LDR X0, [X0 + 0x1F0]
	0x01CE5080 BL 0x1B6E7F0
	0x01CE5084 ADRP X0, 0x2269000
	0x01CE5088 LDR X0, [X0 + 0xD78]
	0x01CE508C BL 0x1B6E7F0
	0x01CE5090 ADRP X0, 0x2269000
	0x01CE5094 LDR X0, [X0 + 0x1C0]
	0x01CE5098 BL 0x1B6E7F0
	0x01CE509C ADRP X0, 0x2268000
	0x01CE50A0 LDR X0, [X0 + 0xF78]
	0x01CE50A4 BL 0x1B6E7F0
	0x01CE50A8 MOVZ W8, 0x1
	0x01CE50AC STRB W8, [X20 + 0x65B]
	0x01CE50B0 LDR X0, [X21]
	0x01CE50B4 LDR W8, [X0 + 0xE0]
	0x01CE50B8 CBNZ W8, 0x1CE50C0
	0x01CE50BC BL 0x1B6E8F8
	0x01CE50C0 CBZ X19, 0x1CE51B4
	0x01CE50C4 LDR W8, [X19 + 0x30]
	0x01CE50C8 ADRP X22, 0x2268000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x2269000
	012 Move X0, [X0+1168]
	013 Call 0x1B6F804
	014 Call 0x1B6FA0C
	015 Move X19, X0
	016 Move X0, 0x226C000
	017 Move X0, [X0+88]
	018 Call 0x1B6F804
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x226C000
	024 Move X0, [X0+104]
	025 Call 0x1B6F804
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1B6F8E8

Method: Fusion.TickTimer get__timerRevive()

Disassembly:
	0x01CE50CC LDR X22, [X22 + 0xF78]
	0x01CE50D0 ADRP X23, 0x2269000
	0x01CE50D4 ORR W8, W8, 0x8
	0x01CE50D8 STR W8, [X19 + 0x30]
	0x01CE50DC LDR X8, [X22]
	0x01CE50E0 LDR X8, [X8 + 0xB8]
	0x01CE50E4 LDR X23, [X23 + 0x3E8]
	0x01CE50E8 LDR X20, [X8 + 0x30]
	0x01CE50EC LDR X0, [X23]
	0x01CE50F0 BL 0x1B6EA0C
	0x01CE50F4 LDR X8, [X19]
	0x01CE50F8 MOV X1, X19
	0x01CE50FC MOV X3, X31
	0x01CE5100 MOV X21, X0
	0x01CE5104 LDR X2, [X8 + 0x280]
	0x01CE5108 BL 0x27EC89C
	0x01CE510C MOV X0, X20
	0x01CE5110 MOV X1, X21
	0x01CE5114 MOV X2, X31
	0x01CE5118 BL 0x322A948
	0x01CE511C CBZ X0, 0x1CE5160
	0x01CE5120 LDR X21, [X23]
	0x01CE5124 MOV X20, X0
	0x01CE5128 MOV X1, X21

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+4]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+112]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+120]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set__timerRevive(Fusion.TickTimer value)

Disassembly:
	0x01CE512C BL 0x1B6E8FC
	0x01CE5130 CBZ X0, 0x1CE5154
	0x01CE5134 LDR X8, [X22]
	0x01CE5138 LDR X8, [X8 + 0xB8]
	0x01CE513C STR X0, [X8 + 0x30]
	0x01CE5140 LDR X21, [X23]
	0x01CE5144 MOV X0, X20
	0x01CE5148 MOV X1, X21
	0x01CE514C BL 0x1B6E8FC
	0x01CE5150 CBNZ X0, 0x1CE516C
	0x01CE5154 MOV X0, X20
	0x01CE5158 MOV X1, X21
	0x01CE515C BL 0x1B6ECDC
	0x01CE5160 LDR X8, [X22]
	0x01CE5164 LDR X8, [X8 + 0xB8]
	0x01CE5168 STR X31, [X8 + 0x30]
	0x01CE516C ADRP X20, 0x2269000
	0x01CE5170 LDR X20, [X20 + 0xD78]
	0x01CE5174 LDR X0, [X20]
	0x01CE5178 LDR W8, [X0 + 0xE0]
	0x01CE517C CBNZ W8, 0x1CE5188
	0x01CE5180 BL 0x1B6E8F8
	0x01CE5184 LDR X0, [X20]
	0x01CE5188 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+4], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+112]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+128]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Int32 get_health()

Disassembly:
	0x01CE518C LDR X0, [X8 + 0x8]
	0x01CE5190 CBZ X0, 0x1CE51B4
	0x01CE5194 ADRP X8, 0x226B000
	0x01CE5198 LDR X8, [X8 + 0x1F0]
	0x01CE519C MOV X1, X19
	0x01CE51A0 LDP X20, X19, [X31 + 0x20]
	0x01CE51A4 LDP X22, X21, [X31 + 0x10]
	0x01CE51A8 LDR X2, [X8]
	0x01CE51AC LDP X30, X23, [X31], #0x30
	0x01CE51B0 B 0x2BD3B48
	0x01CE51B4 BL 0x1B6EA1C
	0x01CE51B8 STR X30, [X31 - 0x20]!
	0x01CE51BC STP X20, X19, [X31 + 0x10]
	0x01CE51C0 ADRP X20, 0x253E000
	0x01CE51C4 LDRB W8, [X20 + 0x65C]
	0x01CE51C8 MOV X19, X0
	0x01CE51CC STR W1, [X31 + 0x8]
	0x01CE51D0 TBNZ X8, 0x0, 0x1CE51E8
	0x01CE51D4 ADRP X0, 0x2269000
	0x01CE51D8 LDR X0, [X0 + 0x4A8]
	0x01CE51DC BL 0x1B6E7F0
	0x01CE51E0 MOVZ W8, 0x1
	0x01CE51E4 STRB W8, [X20 + 0x65C]
	0x01CE51E8 LDR X0, [X19 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+8]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+136]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+144]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_health(System.Int32 value)

Disassembly:
	0x01CE51EC CBZ X0, 0x1CE5254
	0x01CE51F0 LDRB W8, [X0 + 0x60]
	0x01CE51F4 TBNZ X8, 0x1, 0x1CE5254
	0x01CE51F8 MOV X1, X31
	0x01CE51FC BL 0x1D9E780
	0x01CE5200 TBZ X0, 0x0, 0x1CE5254
	0x01CE5204 ADRP X8, 0x2269000
	0x01CE5208 LDR X8, [X8 + 0x4A8]
	0x01CE520C LDR X0, [X8]
	0x01CE5210 LDR W8, [X0 + 0xE0]
	0x01CE5214 CBNZ W8, 0x1CE521C
	0x01CE5218 BL 0x1B6E8F8
	0x01CE521C ADD X0, X31, 0x8
	0x01CE5220 MOV X1, X31
	0x01CE5224 BL 0x1D81200
	0x01CE5228 MOV W20, W0
	0x01CE522C MOV X0, X19
	0x01CE5230 BL 0x1CE460C
	0x01CE5234 CMP W20, W0
	0x01CE5238 B.NE 0x1CE5254
	0x01CE523C LDR X8, [X19]
	0x01CE5240 MOV X0, X19
	0x01CE5244 MOV X1, X31
	0x01CE5248 LDR X9, [X8 + 0x338]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+8], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+136]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+152]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Single get_angerMeter()

Disassembly:
	0x01CE524C LDR X2, [X8 + 0x340]
	0x01CE5250 BLR X9
	0x01CE5254 LDP X20, X19, [X31 + 0x10]
	0x01CE5258 LDR X30, [X31], #0x20
	0x01CE525C RET
	0x01CE5260 STR X30, [X31 - 0x30]!
	0x01CE5264 STP X22, X21, [X31 + 0x10]
	0x01CE5268 STP X20, X19, [X31 + 0x20]
	0x01CE526C ADRP X20, 0x253E000
	0x01CE5270 LDRB W8, [X20 + 0x65D]
	0x01CE5274 MOV X19, X0
	0x01CE5278 TBNZ X8, 0x0, 0x1CE52B4
	0x01CE527C ADRP X0, 0x226B000
	0x01CE5280 LDR X0, [X0 + 0x1F8]
	0x01CE5284 BL 0x1B6E7F0
	0x01CE5288 ADRP X0, 0x226B000
	0x01CE528C LDR X0, [X0 + 0x200]
	0x01CE5290 BL 0x1B6E7F0
	0x01CE5294 ADRP X0, 0x226B000
	0x01CE5298 LDR X0, [X0 + 0x208]
	0x01CE529C BL 0x1B6E7F0
	0x01CE52A0 ADRP X0, 0x2269000
	0x01CE52A4 LDR X0, [X0 + 0xD78]
	0x01CE52A8 BL 0x1B6E7F0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+12]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+160]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+168]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_angerMeter(System.Single value)

Disassembly:
	0x01CE52AC MOVZ W8, 0x1
	0x01CE52B0 STRB W8, [X20 + 0x65D]
	0x01CE52B4 MOV X0, X19
	0x01CE52B8 MOV X1, X31
	0x01CE52BC BL 0x1D65284
	0x01CE52C0 LDR X8, [X19]
	0x01CE52C4 LDR X1, [X8 + 0x290]
	0x01CE52C8 LDR X9, [X8 + 0x288]
	0x01CE52CC MOV X0, X19
	0x01CE52D0 BLR X9
	0x01CE52D4 ADRP X21, 0x2269000
	0x01CE52D8 LDR X21, [X21 + 0xD78]
	0x01CE52DC MOV X0, X31
	0x01CE52E0 BL 0x1CD2434
	0x01CE52E4 TBZ X0, 0x0, 0x1CE5318
	0x01CE52E8 ADRP X8, 0x226B000
	0x01CE52EC LDR X8, [X8 + 0x1F8]
	0x01CE52F0 LDR X0, [X8]
	0x01CE52F4 BL 0x1B6EA0C
	0x01CE52F8 ADRP X8, 0x226B000
	0x01CE52FC LDR X8, [X8 + 0x208]
	0x01CE5300 MOV X1, X19
	0x01CE5304 MOV X3, X31
	0x01CE5308 MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+12], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+160]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+176]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Single get_navAgentSpeed()

Disassembly:
	0x01CE530C LDR X2, [X8]
	0x01CE5310 BL 0x27EC49C
	0x01CE5314 STR X20, [X19 + 0x168]
	0x01CE5318 LDR X0, [X21]
	0x01CE531C LDR W8, [X0 + 0xE0]
	0x01CE5320 CBNZ W8, 0x1CE532C
	0x01CE5324 BL 0x1B6E8F8
	0x01CE5328 LDR X0, [X21]
	0x01CE532C LDR X8, [X0 + 0xB8]
	0x01CE5330 LDR X0, [X8 + 0x8]
	0x01CE5334 CBZ X0, 0x1CE5358
	0x01CE5338 ADRP X8, 0x226B000
	0x01CE533C LDR X8, [X8 + 0x200]
	0x01CE5340 MOV X1, X19
	0x01CE5344 LDP X20, X19, [X31 + 0x20]
	0x01CE5348 LDP X22, X21, [X31 + 0x10]
	0x01CE534C LDR X2, [X8]
	0x01CE5350 LDR X30, [X31], #0x30
	0x01CE5354 B 0x2BD43FC
	0x01CE5358 BL 0x1B6EA1C
	0x01CE535C CMP W1, 0x1
	0x01CE5360 MOV X20, X0
	0x01CE5364 B.NE 0x1CE542C
	0x01CE5368 MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+16]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+184]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+192]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_navAgentSpeed(System.Single value)

Disassembly:
	0x01CE536C BL 0x3D19840
	0x01CE5370 MOV X20, X0
	0x01CE5374 ADRP X0, 0x2268000
	0x01CE5378 LDR X0, [X0 + 0x670]
	0x01CE537C BL 0x1B6E804
	0x01CE5380 LDR X8, [X20]
	0x01CE5384 LDR X1, [X8]
	0x01CE5388 BL 0x1B6ED6C
	0x01CE538C TBZ X0, 0x0, 0x1CE5404
	0x01CE5390 LDR X20, [X20]
	0x01CE5394 BL 0x3D19850
	0x01CE5398 ADRP X0, 0x2268000
	0x01CE539C LDR X0, [X0 + 0x628]
	0x01CE53A0 BL 0x1B6E804
	0x01CE53A4 LDR W8, [X0 + 0xE0]
	0x01CE53A8 CBNZ W8, 0x1CE53B0
	0x01CE53AC BL 0x1B6E8F8
	0x01CE53B0 ADRP X0, 0x226B000
	0x01CE53B4 LDR X0, [X0 + 0x210]
	0x01CE53B8 BL 0x1B6E804
	0x01CE53BC MOV X21, X0
	0x01CE53C0 ADRP X0, 0x226B000
	0x01CE53C4 LDR X0, [X0 + 0x198]
	0x01CE53C8 BL 0x1B6E804

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+16], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+184]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+200]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Single get_navAgentAngularSpeed()

Disassembly:
	0x01CE53CC MOV X22, X0
	0x01CE53D0 ADRP X0, 0x2269000
	0x01CE53D4 LDR X0, [X0 + 0xBF0]
	0x01CE53D8 BL 0x1B6E804
	0x01CE53DC MOV X5, X0
	0x01CE53E0 MOVZ W0, 0x1
	0x01CE53E4 MOVZ W6, 0xA7
	0x01CE53E8 MOV X1, X21
	0x01CE53EC MOV X2, X20
	0x01CE53F0 MOV X3, X31
	0x01CE53F4 MOV X4, X22
	0x01CE53F8 MOV X7, X31
	0x01CE53FC BL 0x342B884
	0x01CE5400 B 0x1CE52D4
	0x01CE5404 MOVZ W0, 0x8
	0x01CE5408 BL 0x3D19860
	0x01CE540C LDR X8, [X20]
	0x01CE5410 STR X8, [X0]
	0x01CE5414 ADRP X1, 0x2037000
	0x01CE5418 ADD X1, X1, 0xBD8
	0x01CE541C MOV X2, X31
	0x01CE5420 BL 0x3D19870
	0x01CE5424 MOV X20, X0
	0x01CE5428 BL 0x3D19850

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+20]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+208]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+216]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_navAgentAngularSpeed(System.Single value)

Disassembly:
	0x01CE542C MOV X0, X20
	0x01CE5430 BL 0x1C8418C
	0x01CE5434 BL 0x18F46A8
	0x01CE5438 STR X30, [X31 - 0x30]!
	0x01CE543C STP X22, X21, [X31 + 0x10]
	0x01CE5440 STP X20, X19, [X31 + 0x20]
	0x01CE5444 ADRP X22, 0x253E000
	0x01CE5448 LDRB W8, [X22 + 0x65E]
	0x01CE544C MOV W21, W2
	0x01CE5450 MOV X20, X1
	0x01CE5454 MOV X19, X0
	0x01CE5458 TBNZ X8, 0x0, 0x1CE547C
	0x01CE545C ADRP X0, 0x226B000
	0x01CE5460 LDR X0, [X0 + 0x1F0]
	0x01CE5464 BL 0x1B6E7F0
	0x01CE5468 ADRP X0, 0x2269000
	0x01CE546C LDR X0, [X0 + 0xD78]
	0x01CE5470 BL 0x1B6E7F0
	0x01CE5474 MOVZ W8, 0x1
	0x01CE5478 STRB W8, [X22 + 0x65E]
	0x01CE547C ADRP X22, 0x2269000
	0x01CE5480 LDR X22, [X22 + 0xD78]
	0x01CE5484 AND W2, W21, 0x1
	0x01CE5488 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+20], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+208]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+224]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Single get_searchPrecision()

Disassembly:
	0x01CE548C MOV X1, X20
	0x01CE5490 MOV X3, X31
	0x01CE5494 BL 0x1D65288
	0x01CE5498 MOV X0, X31
	0x01CE549C BL 0x1CD2434
	0x01CE54A0 TBZ X0, 0x0, 0x1CE54A8
	0x01CE54A4 STR X31, [X19 + 0x168]
	0x01CE54A8 LDR X0, [X22]
	0x01CE54AC LDR W8, [X0 + 0xE0]
	0x01CE54B0 CBNZ W8, 0x1CE54BC
	0x01CE54B4 BL 0x1B6E8F8
	0x01CE54B8 LDR X0, [X22]
	0x01CE54BC LDR X8, [X0 + 0xB8]
	0x01CE54C0 LDR X0, [X8 + 0x8]
	0x01CE54C4 CBZ X0, 0x1CE54E8
	0x01CE54C8 ADRP X8, 0x226B000
	0x01CE54CC LDR X8, [X8 + 0x1F0]
	0x01CE54D0 MOV X1, X19
	0x01CE54D4 LDP X20, X19, [X31 + 0x20]
	0x01CE54D8 LDP X22, X21, [X31 + 0x10]
	0x01CE54DC LDR X2, [X8]
	0x01CE54E0 LDR X30, [X31], #0x30
	0x01CE54E4 B 0x2BD3B48
	0x01CE54E8 BL 0x1B6EA1C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+24]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+232]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+240]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_searchPrecision(System.Single value)

Disassembly:
	0x01CE54EC SUB X31, X31, 0x40
	0x01CE54F0 STR X30, [X31 + 0x20]
	0x01CE54F4 STP X20, X19, [X31 + 0x30]
	0x01CE54F8 ADRP X20, 0x253E000
	0x01CE54FC LDRB W8, [X20 + 0x65F]
	0x01CE5500 MOV X19, X0
	0x01CE5504 TBNZ X8, 0x0, 0x1CE5540
	0x01CE5508 ADRP X0, 0x2268000
	0x01CE550C LDR X0, [X0 + 0x628]
	0x01CE5510 BL 0x1B6E7F0
	0x01CE5514 ADRP X0, 0x226B000
	0x01CE5518 LDR X0, [X0 + 0x198]
	0x01CE551C BL 0x1B6E7F0
	0x01CE5520 ADRP X0, 0x226B000
	0x01CE5524 LDR X0, [X0 + 0x218]
	0x01CE5528 BL 0x1B6E7F0
	0x01CE552C ADRP X0, 0x226B000
	0x01CE5530 LDR X0, [X0 + 0x220]
	0x01CE5534 BL 0x1B6E7F0
	0x01CE5538 MOVZ W8, 0x1
	0x01CE553C STRB W8, [X20 + 0x65F]
	0x01CE5540 LDRB W8, [X19 + 0x170]
	0x01CE5544 CBNZ W8, 0x1CE56BC
	0x01CE5548 LDR X0, [X19 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+24], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+232]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+248]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Single get_searchWidth()

Disassembly:
	0x01CE554C CBZ X0, 0x1CE5610
	0x01CE5550 LDRB W8, [X0 + 0x60]
	0x01CE5554 TBNZ X8, 0x1, 0x1CE5610
	0x01CE5558 MOV X1, X31
	0x01CE555C BL 0x1D9E780
	0x01CE5560 TBZ X0, 0x0, 0x1CE5610
	0x01CE5564 MOV X0, X19
	0x01CE5568 MOV W1, W31
	0x01CE556C BL 0x1CE4068
	0x01CE5570 LDR X8, [X19 + 0xB8]
	0x01CE5574 CBZ X8, 0x1CE56CC
	0x01CE5578 LDR W1, [X8 + 0x20]
	0x01CE557C MOV X0, X19
	0x01CE5580 BL 0x1CE41EC
	0x01CE5584 FMOV S0, W31
	0x01CE5588 MOV X0, X19
	0x01CE558C BL 0x1CE42AC
	0x01CE5590 LDR X8, [X19 + 0xB8]
	0x01CE5594 CBZ X8, 0x1CE56CC
	0x01CE5598 LDR X8, [X8 + 0x30]
	0x01CE559C CBZ X8, 0x1CE56CC
	0x01CE55A0 LDR W9, [X8 + 0x18]
	0x01CE55A4 CBZ W9, 0x1CE56D0
	0x01CE55A8 LDR V0, [X8 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+28]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+256]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+264]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_searchWidth(System.Single value)

Disassembly:
	0x01CE55AC MOV X0, X19
	0x01CE55B0 BL 0x1CE436C
	0x01CE55B4 LDR X8, [X19 + 0xB8]
	0x01CE55B8 CBZ X8, 0x1CE56CC
	0x01CE55BC LDR V0, [X8 + 0x40]
	0x01CE55C0 MOV X0, X19
	0x01CE55C4 BL 0x1CE442C
	0x01CE55C8 LDR X8, [X19 + 0xB8]
	0x01CE55CC CBZ X8, 0x1CE56CC
	0x01CE55D0 LDR X8, [X8 + 0x58]
	0x01CE55D4 CBZ X8, 0x1CE56CC
	0x01CE55D8 LDR W9, [X8 + 0x18]
	0x01CE55DC CBZ W9, 0x1CE56D0
	0x01CE55E0 LDR V0, [X8 + 0x20]
	0x01CE55E4 MOV X0, X19
	0x01CE55E8 BL 0x1CE44EC
	0x01CE55EC LDR X8, [X19 + 0xB8]
	0x01CE55F0 CBZ X8, 0x1CE56CC
	0x01CE55F4 LDR X8, [X8 + 0x60]
	0x01CE55F8 CBZ X8, 0x1CE56CC
	0x01CE55FC LDR W9, [X8 + 0x18]
	0x01CE5600 CBZ W9, 0x1CE56D0
	0x01CE5604 LDR V0, [X8 + 0x20]
	0x01CE5608 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+28], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+256]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+272]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Int32 get_targetPlayerID()

Disassembly:
	0x01CE560C BL 0x1CE45AC
	0x01CE5610 MOV X0, X19
	0x01CE5614 BL 0x1CE56D4
	0x01CE5618 MOV X0, X19
	0x01CE561C BL 0x1CE57CC
	0x01CE5620 LDR X0, [X19 + 0xC0]
	0x01CE5624 CBZ X0, 0x1CE56CC
	0x01CE5628 LDR X8, [X0]
	0x01CE562C MOV X1, X19
	0x01CE5630 LDP X9, X2, [X8 + 0x188]
	0x01CE5634 BLR X9
	0x01CE5638 ADD X8, X31, 0x8
	0x01CE563C MOV X0, X19
	0x01CE5640 BL 0x1CE4968
	0x01CE5644 LDR X8, [X31 + 0x10]
	0x01CE5648 CBZ X8, 0x1CE56CC
	0x01CE564C LDR X8, [X8 + 0x18]
	0x01CE5650 CBNZ X8, 0x1CE56A0
	0x01CE5654 ADRP X8, 0x2268000
	0x01CE5658 LDR X8, [X8 + 0x628]
	0x01CE565C LDR X0, [X8]
	0x01CE5660 LDR W8, [X0 + 0xE0]
	0x01CE5664 CBNZ W8, 0x1CE566C
	0x01CE5668 BL 0x1B6E8F8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+32]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+280]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+288]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_targetPlayerID(System.Int32 value)

Disassembly:
	0x01CE566C ADRP X8, 0x226B000
	0x01CE5670 ADRP X9, 0x226B000
	0x01CE5674 ADRP X10, 0x226B000
	0x01CE5678 LDR X8, [X8 + 0x220]
	0x01CE567C LDR X9, [X9 + 0x198]
	0x01CE5680 LDR X10, [X10 + 0x218]
	0x01CE5684 MOVZ W4, 0xD6
	0x01CE5688 LDR X0, [X8]
	0x01CE568C LDR X2, [X9]
	0x01CE5690 LDR X3, [X10]
	0x01CE5694 MOV X1, X31
	0x01CE5698 MOV X5, X31
	0x01CE569C BL 0x342B554
	0x01CE56A0 LDR X8, [X19]
	0x01CE56A4 MOV X0, X19
	0x01CE56A8 LDR X9, [X8 + 0x2D8]
	0x01CE56AC LDR X1, [X8 + 0x2E0]
	0x01CE56B0 BLR X9
	0x01CE56B4 MOVZ W8, 0x1
	0x01CE56B8 STRB W8, [X19 + 0x170]
	0x01CE56BC LDP X20, X19, [X31 + 0x30]
	0x01CE56C0 LDR X30, [X31 + 0x20]
	0x01CE56C4 ADD X31, X31, 0x40
	0x01CE56C8 RET

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+32], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+280]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+296]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Single get__timerToChasing()

Disassembly:
	0x01CE56CC BL 0x1B6EA1C
	0x01CE56D0 BL 0x1B6EA24
	0x01CE56D4 STR X30, [X31 - 0x20]!
	0x01CE56D8 STP X20, X19, [X31 + 0x10]
	0x01CE56DC MOV X19, X0
	0x01CE56E0 LDR X0, [X0 + 0x40]
	0x01CE56E4 LDR X20, [X19 + 0xC8]
	0x01CE56E8 CBZ X0, 0x1CE5704
	0x01CE56EC LDRB W8, [X0 + 0x60]
	0x01CE56F0 TBNZ X8, 0x1, 0x1CE5700
	0x01CE56F4 MOV X1, X31
	0x01CE56F8 BL 0x1D9E780
	0x01CE56FC B 0x1CE5704
	0x01CE5700 MOV W0, W31
	0x01CE5704 CBZ X20, 0x1CE57C8
	0x01CE5708 AND W1, W0, 0x1
	0x01CE570C MOV X0, X20
	0x01CE5710 MOV X2, X31
	0x01CE5714 BL 0x3A9A604
	0x01CE5718 LDR X0, [X19 + 0x40]
	0x01CE571C LDR X20, [X19 + 0xC8]
	0x01CE5720 CBZ X0, 0x1CE573C
	0x01CE5724 LDRB W8, [X0 + 0x60]
	0x01CE5728 TBNZ X8, 0x1, 0x1CE5738

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+36]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+304]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+312]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set__timerToChasing(System.Single value)

Disassembly:
	0x01CE572C MOV X1, X31
	0x01CE5730 BL 0x1D9E780
	0x01CE5734 B 0x1CE573C
	0x01CE5738 MOV W0, W31
	0x01CE573C CBZ X20, 0x1CE57C8
	0x01CE5740 AND W1, W0, 0x1
	0x01CE5744 MOV X0, X20
	0x01CE5748 MOV X2, X31
	0x01CE574C BL 0x3A4ACE4
	0x01CE5750 LDR X0, [X19 + 0x40]
	0x01CE5754 LDR X20, [X19 + 0xC8]
	0x01CE5758 CBZ X0, 0x1CE5774
	0x01CE575C LDRB W8, [X0 + 0x60]
	0x01CE5760 TBNZ X8, 0x1, 0x1CE5770
	0x01CE5764 MOV X1, X31
	0x01CE5768 BL 0x1D9E780
	0x01CE576C B 0x1CE5774
	0x01CE5770 MOV W0, W31
	0x01CE5774 CBZ X20, 0x1CE57C8
	0x01CE5778 AND W1, W0, 0x1
	0x01CE577C MOV X0, X20
	0x01CE5780 MOV X2, X31
	0x01CE5784 BL 0x3A4AD28
	0x01CE5788 LDR X20, [X19 + 0xC8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+36], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+304]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+320]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Single get__timerToSearching()

Disassembly:
	0x01CE578C MOV X0, X19
	0x01CE5790 BL 0x1CE430C
	0x01CE5794 CBZ X20, 0x1CE57C8
	0x01CE5798 MOV X0, X20
	0x01CE579C MOV X1, X31
	0x01CE57A0 BL 0x3A4AC4C
	0x01CE57A4 LDR X20, [X19 + 0xC8]
	0x01CE57A8 MOV X0, X19
	0x01CE57AC BL 0x1CE43CC
	0x01CE57B0 CBZ X20, 0x1CE57C8
	0x01CE57B4 MOV X0, X20
	0x01CE57B8 LDP X20, X19, [X31 + 0x10]
	0x01CE57BC MOV X1, X31
	0x01CE57C0 LDR X30, [X31], #0x20
	0x01CE57C4 B 0x3A4AC98
	0x01CE57C8 BL 0x1B6EA1C
	0x01CE57CC STR X30, [X31 - 0x20]!
	0x01CE57D0 STP X20, X19, [X31 + 0x10]
	0x01CE57D4 LDR X20, [X0 + 0xC8]
	0x01CE57D8 MOV X1, X31
	0x01CE57DC MOV X19, X0
	0x01CE57E0 BL 0x3A9B084
	0x01CE57E4 CBZ X0, 0x1CE5864
	0x01CE57E8 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+40]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+328]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+336]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set__timerToSearching(System.Single value)

Disassembly:
	0x01CE57EC BL 0x3AA7658
	0x01CE57F0 CBZ X20, 0x1CE5864
	0x01CE57F4 MOV X0, X20
	0x01CE57F8 MOV X1, X31
	0x01CE57FC BL 0x3A4AA20
	0x01CE5800 LDR X0, [X19 + 0xC8]
	0x01CE5804 CBZ X0, 0x1CE5864
	0x01CE5808 MOV X1, X31
	0x01CE580C BL 0x3A4ABD4
	0x01CE5810 ADRP X20, 0x253E000
	0x01CE5814 LDRB W8, [X20 + 0x43F]
	0x01CE5818 LDR X19, [X19 + 0xC8]
	0x01CE581C CBNZ W8, 0x1CE5834
	0x01CE5820 ADRP X0, 0x2268000
	0x01CE5824 LDR X0, [X0 + 0x480]
	0x01CE5828 BL 0x1B6E7F0
	0x01CE582C MOVZ W8, 0x1
	0x01CE5830 STRB W8, [X20 + 0x43F]
	0x01CE5834 CBZ X19, 0x1CE5864
	0x01CE5838 ADRP X8, 0x2268000
	0x01CE583C LDR X8, [X8 + 0x480]
	0x01CE5840 MOV X0, X19
	0x01CE5844 LDP X20, X19, [X31 + 0x10]
	0x01CE5848 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+40], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+328]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+344]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Single get__timerAttackInterval()

Disassembly:
	0x01CE584C LDR X8, [X8]
	0x01CE5850 LDR X8, [X8 + 0xB8]
	0x01CE5854 LDP S1, S2, [X8 + 0x4]
	0x01CE5858 LDR V0, [X8]
	0x01CE585C LDR X30, [X31], #0x20
	0x01CE5860 B 0x3A4A94C
	0x01CE5864 BL 0x1B6EA1C
	0x01CE5868 STR D10, [X31 - 0x30]!
	0x01CE586C STP D9, D8, [X31 + 0x10]
	0x01CE5870 STP X30, X19, [X31 + 0x20]
	0x01CE5874 MOV X1, X31
	0x01CE5878 MOV V8.16B, V2.16B
	0x01CE587C MOV V9.16B, V1.16B
	0x01CE5880 MOV V10.16B, V0.16B
	0x01CE5884 MOV X19, X0
	0x01CE5888 BL 0x3A9B084
	0x01CE588C CBZ X0, 0x1CE58B8
	0x01CE5890 MOV V0.16B, V10.16B
	0x01CE5894 MOV V1.16B, V9.16B
	0x01CE5898 MOV V2.16B, V8.16B
	0x01CE589C MOV X1, X31
	0x01CE58A0 BL 0x3AA76F8
	0x01CE58A4 MOV X0, X19
	0x01CE58A8 LDP X30, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move V0, [X8+44]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+352]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+360]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set__timerAttackInterval(System.Single value)

Disassembly:
	0x01CE58AC LDP D9, D8, [X31 + 0x10]
	0x01CE58B0 LDR V10, [X31], #0x30
	0x01CE58B4 B 0x1CE57CC
	0x01CE58B8 BL 0x1B6EA1C
	0x01CE58BC SUB X31, X31, 0x20
	0x01CE58C0 STP X30, X19, [X31 + 0x10]
	0x01CE58C4 STR W31, [X31 + 0x8]
	0x01CE58C8 MOV X19, X0
	0x01CE58CC LDR X0, [X0 + 0x40]
	0x01CE58D0 CBZ X0, 0x1CE5920
	0x01CE58D4 LDRB W8, [X0 + 0x60]
	0x01CE58D8 TBNZ X8, 0x1, 0x1CE5920
	0x01CE58DC MOV X1, X31
	0x01CE58E0 BL 0x1D9E780
	0x01CE58E4 TBZ X0, 0x0, 0x1CE5920
	0x01CE58E8 MOV X0, X19
	0x01CE58EC BL 0x1CE4000
	0x01CE58F0 TBZ X0, 0x0, 0x1CE5920
	0x01CE58F4 MOV X0, X19
	0x01CE58F8 BL 0x1CE40CC
	0x01CE58FC STR W0, [X31 + 0x8]
	0x01CE5900 LDR X1, [X19 + 0x38]
	0x01CE5904 ADD X0, X31, 0x8
	0x01CE5908 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+44], S0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2269000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x226C000
	016 Move X0, [X0+352]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x226C000
	023 Move X0, [X0+368]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: AnimalCompany.MobData get_data()

Disassembly:
	0x01CE590C BL 0x1D9CBCC
	0x01CE5910 TBZ X0, 0x0, 0x1CE5920

ISIL:
	001 Move X0, [X0+184]
	002 Return X0

Method: AnimalCompany.MobView get_view()

Disassembly:
	0x01CE5914 MOV X0, X19
	0x01CE5918 MOV W1, W31

ISIL:
	001 Move X0, [X0+192]
	002 Return X0

Method: UnityEngine.Transform get_viewPoint()

Disassembly:
	0x01CE591C BL 0x1CE4068
	0x01CE5920 MOV X0, X19

ISIL:
	001 Move X0, [X0+208]
	002 Return X0

Method: UnityEngine.Transform get_hearingPoint()

Disassembly:
	0x01CE5924 BL 0x1CE4CE0
	0x01CE5928 TBZ X0, 0x0, 0x1CE5944

ISIL:
	001 Move X0, [X0+216]
	002 Return X0

Method: System.Single get_viewDistance()

Disassembly:
	0x01CE592C MOV X0, X31
	0x01CE5930 BL 0x1CD2434
	0x01CE5934 TBZ X0, 0x0, 0x1CE5944
	0x01CE5938 MOV X0, X31
	0x01CE593C BL 0x3AA2810
	0x01CE5940 STR S0, [X19 + 0x160]
	0x01CE5944 LDP X30, X19, [X31 + 0x10]
	0x01CE5948 ADD X31, X31, 0x20
	0x01CE594C RET
	0x01CE5950 AND W1, W1, 0x1
	0x01CE5954 B 0x1CE4068
	0x01CE5958 STP X30, X19, [X31 - 0x10]!
	0x01CE595C LDR X8, [X0 + 0x38]
	0x01CE5960 CBZ X8, 0x1CE59A8
	0x01CE5964 LDR W8, [X8 + 0x180]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+184]
	003 Compare X8, 0
	004 JumpIfEqual {15}
	005 Move X8, [X8+120]
	006 Compare X8, 0
	007 JumpIfEqual {15}
	008 NotImplemented "Instruction LDRSW not yet implemented."
	009 Move W10, [X8+24]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X8, X8, X9
	012 Move V0, [X8+32]
	013 Move X30, [X31+16]
	014 Return V0
	015 Call 0x1B6FA1C
	016 Call 0x1B6FA24

Method: AnimalCompany.GameGen.NavZone get_navZone()

Disassembly:
	0x01CE5968 CMP W8, 0x2
	0x01CE596C B.NE 0x1CE59A0
	0x01CE5970 MOV X19, X0
	0x01CE5974 LDR X0, [X0 + 0x40]
	0x01CE5978 CBZ X0, 0x1CE5994
	0x01CE597C LDRB W8, [X0 + 0x60]
	0x01CE5980 TBNZ X8, 0x1, 0x1CE5994
	0x01CE5984 MOV X1, X31
	0x01CE5988 BL 0x1D9E780
	0x01CE598C TBZ X0, 0x0, 0x1CE5994
	0x01CE5990 STP X31, X31, [X19 + 0x130]
	0x01CE5994 MOV X0, X19
	0x01CE5998 LDP X30, X19, [X31], #0x10
	0x01CE599C B 0x1CE56D4
	0x01CE59A0 LDP X30, X19, [X31], #0x10
	0x01CE59A4 RET
	0x01CE59A8 BL 0x1B6EA1C
	0x01CE59AC STR D10, [X31 - 0x30]!
	0x01CE59B0 STP D9, D8, [X31 + 0x8]
	0x01CE59B4 STR X30, [X31 + 0x18]
	0x01CE59B8 STP X20, X19, [X31 + 0x20]
	0x01CE59BC MOV X19, X0
	0x01CE59C0 LDR X0, [X0 + 0xC8]
	0x01CE59C4 CBZ X0, 0x1CE5A54
	0x01CE59C8 MOV W20, W1
	0x01CE59CC AND W1, W1, 0x1
	0x01CE59D0 MOV X2, X31
	0x01CE59D4 MOV V8.16B, V2.16B
	0x01CE59D8 MOV V9.16B, V1.16B
	0x01CE59DC MOV V10.16B, V0.16B
	0x01CE59E0 BL 0x3A4AB90
	0x01CE59E4 LDR X0, [X19 + 0xC8]
	0x01CE59E8 CBZ X0, 0x1CE5A54
	0x01CE59EC EOR W8, W20, 0x1
	0x01CE59F0 AND W20, W8, 0x1
	0x01CE59F4 MOV W1, W20
	0x01CE59F8 MOV X2, X31
	0x01CE59FC BL 0x3A4ACE4
	0x01CE5A00 LDR X0, [X19 + 0xC8]
	0x01CE5A04 CBZ X0, 0x1CE5A54
	0x01CE5A08 MOV W1, W20
	0x01CE5A0C MOV X2, X31
	0x01CE5A10 BL 0x3A4AD28
	0x01CE5A14 LDR X8, [X19]
	0x01CE5A18 MOV X0, X19
	0x01CE5A1C MOV V0.16B, V10.16B
	0x01CE5A20 LDR X9, [X8 + 0x2B8]
	0x01CE5A24 LDR X1, [X8 + 0x2C0]
	0x01CE5A28 BLR X9
	0x01CE5A2C MOV X0, X19
	0x01CE5A30 MOV V0.16B, V9.16B
	0x01CE5A34 BL 0x1CE44EC
	0x01CE5A38 MOV X0, X19
	0x01CE5A3C MOV V0.16B, V8.16B
	0x01CE5A40 LDP X20, X19, [X31 + 0x20]
	0x01CE5A44 LDR X30, [X31 + 0x18]
	0x01CE5A48 LDP D9, D8, [X31 + 0x8]
	0x01CE5A4C LDR V10, [X31], #0x30
	0x01CE5A50 B 0x1CE45AC
	0x01CE5A54 BL 0x1B6EA1C
	0x01CE5A58 STR D8, [X31 - 0x20]!
	0x01CE5A5C STP X30, X19, [X31 + 0x10]
	0x01CE5A60 MOV V8.16B, V0.16B
	0x01CE5A64 MOV X19, X0
	0x01CE5A68 BL 0x1CE436C
	0x01CE5A6C LDR X0, [X19 + 0xC8]
	0x01CE5A70 CBZ X0, 0x1CE5A88
	0x01CE5A74 LDP X30, X19, [X31 + 0x10]
	0x01CE5A78 MOV V0.16B, V8.16B
	0x01CE5A7C MOV X1, X31
	0x01CE5A80 LDR V8, [X31], #0x20
	0x01CE5A84 B 0x3A4AC4C
	0x01CE5A88 BL 0x1B6EA1C
	0x01CE5A8C STR D8, [X31 - 0x20]!
	0x01CE5A90 STP X30, X19, [X31 + 0x10]
	0x01CE5A94 MOV V8.16B, V0.16B
	0x01CE5A98 MOV X19, X0
	0x01CE5A9C BL 0x1CE442C
	0x01CE5AA0 LDR X0, [X19 + 0xC8]
	0x01CE5AA4 CBZ X0, 0x1CE5ABC
	0x01CE5AA8 LDP X30, X19, [X31 + 0x10]
	0x01CE5AAC MOV V0.16B, V8.16B
	0x01CE5AB0 MOV X1, X31
	0x01CE5AB4 LDR V8, [X31], #0x20
	0x01CE5AB8 B 0x3A4AC98
	0x01CE5ABC BL 0x1B6EA1C
	0x01CE5AC0 STR X30, [X31 - 0x20]!
	0x01CE5AC4 STP X20, X19, [X31 + 0x10]
	0x01CE5AC8 MOV X19, X0
	0x01CE5ACC BL 0x1CE4000
	0x01CE5AD0 TBZ X0, 0x0, 0x1CE5AE4
	0x01CE5AD4 LDR X8, [X19]
	0x01CE5AD8 LDR X9, [X8 + 0x2E8]
	0x01CE5ADC LDR X1, [X8 + 0x2F0]
	0x01CE5AE0 B 0x1CE5AF8
	0x01CE5AE4 LDRB W8, [X19 + 0x170]
	0x01CE5AE8 CBZ W8, 0x1CE5B00
	0x01CE5AEC LDR X8, [X19]
	0x01CE5AF0 LDR X9, [X8 + 0x2F8]
	0x01CE5AF4 LDR X1, [X8 + 0x300]
	0x01CE5AF8 MOV X0, X19
	0x01CE5AFC BLR X9
	0x01CE5B00 LDR X0, [X19 + 0xC0]
	0x01CE5B04 CBZ X0, 0x1CE5B3C
	0x01CE5B08 MOV X1, X31
	0x01CE5B0C BL 0x3A9B0C0
	0x01CE5B10 MOV X20, X0
	0x01CE5B14 MOV X0, X19
	0x01CE5B18 BL 0x1CE4000
	0x01CE5B1C CBZ X20, 0x1CE5B3C
	0x01CE5B20 ORN W8, W31, W0, 0x0
	0x01CE5B24 MOV X0, X20
	0x01CE5B28 LDP X20, X19, [X31 + 0x10]
	0x01CE5B2C AND W1, W8, 0x1
	0x01CE5B30 MOV X2, X31
	0x01CE5B34 LDR X30, [X31], #0x20
	0x01CE5B38 B 0x3A9D9A8
	0x01CE5B3C BL 0x1B6EA1C
	0x01CE5B40 STP X30, X21, [X31 - 0x20]!
	0x01CE5B44 STP X20, X19, [X31 + 0x10]
	0x01CE5B48 ADRP X20, 0x253E000
	0x01CE5B4C LDRB W8, [X20 + 0x660]
	0x01CE5B50 MOV X19, X0
	0x01CE5B54 TBNZ X8, 0x0, 0x1CE5B6C
	0x01CE5B58 ADRP X0, 0x2269000
	0x01CE5B5C LDR X0, [X0 + 0xD78]
	0x01CE5B60 BL 0x1B6E7F0
	0x01CE5B64 MOVZ W8, 0x1
	0x01CE5B68 STRB W8, [X20 + 0x660]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+104], X23
	004 Move [X31+112], X22
	005 Move [X31+120], X21
	006 Move [X31+128], X20
	007 Move [X31+136], X19
	008 Move X21, 0x253F000
	009 Move W9, [X21+1622]
	010 Move X20, X0
	011 Move X19, X8
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {45}
	016 Move X0, 0x226C000
	017 Move X0, [X0+376]
	018 Call 0x1B6F7F0
	019 Move X0, 0x2269000
	020 Move X0, [X0+1528]
	021 Call 0x1B6F7F0
	022 Move X0, 0x2269000
	023 Move X0, [X0+1576]
	024 Call 0x1B6F7F0
	025 Move X0, 0x226C000
	026 Move X0, [X0+384]
	027 Call 0x1B6F7F0
	028 Move X0, 0x226C000
	029 Move X0, [X0+392]
	030 Call 0x1B6F7F0
	031 Move X0, 0x226C000
	032 Move X0, [X0+400]
	033 Call 0x1B6F7F0
	034 Move X0, 0x226C000
	035 Move X0, [X0+408]
	036 Call 0x1B6F7F0
	037 Move X0, 0x226C000
	038 Move X0, [X0+416]
	039 Call 0x1B6F7F0
	040 Move X0, 0x226C000
	041 Move X0, [X0+424]
	042 Call 0x1B6F7F0
	043 Move W8, 1
	044 Move [X21+1622], W8
	045 Move [X31+40], X31
	046 Move [X31+48], X31
	047 Move [X31+56], X31
	048 Move X21, X20
	049 Move X23, 0x226C000
	050 Add X21, X21, 232
	051 Move W8, [X21]
	052 Move X23, [X23+400]
	053 Compare W8, 0
	054 JumpIfNotEqual {122}
	055 Move X8, 0x226C000
	056 Move X8, [X8+376]
	057 Move W22, [X20+228]
	058 Move X0, [X8]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1B6F8F8
	063 Add X1, X31, 40
	064 Move W0, W22
	065 Move X2, X31
	066 Call GlobalNavZones.TryGetNavZone, X0, X1
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {88}
	071 Move X8, 0x226C000
	072 Move X8, [X8+384]
	073 NotImplemented "Instruction LDUR not yet implemented."
	074 Move X9, [X31+56]
	075 NotImplemented "Instruction MOVI not yet implemented."
	076 Move X2, [X8]
	077 Add X0, X31, 0
	078 Add X1, X31, 64
	079 Move [X31], V0
	080 Move [X31+8], V0
	081 Move [X31+4], V1
	082 Move [X31+80], X9
	083 Call Nullable`1<NavZone>..ctor, X0, X1
	084 Move V1, [X31]
	085 Move V0, [X31+16]
	086 Move [X21], V1
	087 Move [X21+8], V0
	088 Move X9, 0x2269000
	089 Move W8, [X20+228]
	090 Move X9, [X9+1528]
	091 Add X1, X31, 0
	092 Move [X31], W8
	093 Move X0, [X9]
	094 Call 0x1B6F900
	095 Move X8, 0x226C000
	096 Move X8, [X8+424]
	097 Move X1, X0
	098 Move X2, X31
	099 Move X8, [X8]
	100 Move X0, X8
	101 Call String.Format, X0, X1
	102 Move X8, 0x2269000
	103 Move X8, [X8+1576]
	104 Move X22, X0
	105 Move X8, [X8]
	106 Move W9, [X8+224]
	107 Compare W9, 0
	108 JumpIfNotEqual {111}
	109 Move X0, X8
	110 Call 0x1B6F8F8
	111 Move X8, 0x226C000
	112 Move X9, 0x226C000
	113 Move X8, [X8+408]
	114 Move X9, [X9+416]
	115 Move W4, 74
	116 Move X0, X22
	117 Move X2, [X8]
	118 Move X3, [X9]
	119 Move X1, X31
	120 Move X5, X31
	121 Call Log.Error, X0, X1, X2, X3, X4
	122 Move X1, [X23]
	123 Add X8, X31, 64
	124 Move X0, X21
	125 Call Nullable`1<NavZone>.get_Value, X0
	126 Move X8, [X31+80]
	127 Move V0, [X31+4]
	128 Add X9, X20, 264
	129 Move X0, X21
	130 Move [X31+16], X8
	131 Move [X31], V0
	132 Move [X9+16], X8
	133 Move [X9], V0
	134 Move X1, [X23]
	135 Add X8, X31, 64
	136 Call Nullable`1<NavZone>.get_Value, X0
	137 Move X8, [X31+80]
	138 Move V0, [X31+4]
	139 Move X22, [X31+112]
	140 Move X21, [X31+120]
	141 Move X30, [X31+96]
	142 Move X23, [X31+104]
	143 Move [X19+16], X8
	144 Move [X19], V0
	145 Move X20, [X31+128]
	146 Move X19, [X31+136]
	147 Add X31, X31, 144
	148 Return X0

Method: System.Collections.Generic.Dictionary`2<System.UInt32, AnimalCompany.NetPlayer> get__spawnedPlayers()

Disassembly:
	0x01CE5B6C LDR X0, [X19 + 0x40]
	0x01CE5B70 CBZ X0, 0x1CE5C08
	0x01CE5B74 LDRB W8, [X0 + 0x60]
	0x01CE5B78 TBNZ X8, 0x1, 0x1CE5C08
	0x01CE5B7C MOV X1, X31
	0x01CE5B80 BL 0x1D9E780
	0x01CE5B84 TBZ X0, 0x0, 0x1CE5C08
	0x01CE5B88 LDR X8, [X19 + 0xB8]
	0x01CE5B8C CBZ X8, 0x1CE5C80
	0x01CE5B90 LDR X0, [X19 + 0x38]
	0x01CE5B94 LDR V0, [X8 + 0x90]
	0x01CE5B98 MOV X1, X31
	0x01CE5B9C BL 0x1D9CEB8
	0x01CE5BA0 AND X1, X0, 0x0
	0x01CE5BA4 MOV X0, X19
	0x01CE5BA8 BL 0x1CE412C
	0x01CE5BAC LDR X0, [X19 + 0xC8]
	0x01CE5BB0 CBZ X0, 0x1CE5C80
	0x01CE5BB4 MOV X1, X31
	0x01CE5BB8 BL 0x3A4ABD4
	0x01CE5BBC ADRP X21, 0x253E000
	0x01CE5BC0 LDRB W8, [X21 + 0x43F]
	0x01CE5BC4 LDR X20, [X19 + 0xC8]
	0x01CE5BC8 CBNZ W8, 0x1CE5BE0
	0x01CE5BCC ADRP X0, 0x2268000
	0x01CE5BD0 LDR X0, [X0 + 0x480]
	0x01CE5BD4 BL 0x1B6E7F0
	0x01CE5BD8 MOVZ W8, 0x1
	0x01CE5BDC STRB W8, [X21 + 0x43F]
	0x01CE5BE0 CBZ X20, 0x1CE5C80
	0x01CE5BE4 ADRP X8, 0x2268000
	0x01CE5BE8 LDR X8, [X8 + 0x480]
	0x01CE5BEC MOV X0, X20
	0x01CE5BF0 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x253F000
	005 Move X19, 0x226A000
	006 Move W8, [X20+1623]
	007 Move X19, [X19+680]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x226A000
	013 Move X0, [X0+680]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1623], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1B6F8F8
	022 Move X20, 0x253F000
	023 Move W8, [X20+1290]
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0x226A000
	027 Move X0, [X0+680]
	028 Call 0x1B6F7F0
	029 Move W8, 1
	030 Move [X20+1290], W8
	031 Move X0, [X19]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1B6F8F8
	036 Move X0, [X19]
	037 Move X8, [X0+184]
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X0, [X8]
	041 Move X30, [X31+32]
	042 Return X0

Method: AnimalCompany.NetPlayer get_targetPlayer()

Disassembly:
	0x01CE5BF4 LDR X8, [X8]
	0x01CE5BF8 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move X0, [X0+320]
	002 Return X0

Method: UnityEngine.Vector3 get__positionThatPlayerStayed()

Disassembly:
	0x01CE5BFC LDP S1, S2, [X8 + 0x4]
	0x01CE5C00 LDR V0, [X8]
	0x01CE5C04 BL 0x3A4A94C
	0x01CE5C08 ADRP X20, 0x2269000
	0x01CE5C0C LDR X20, [X20 + 0xD78]
	0x01CE5C10 LDR X0, [X20]
	0x01CE5C14 LDR W8, [X0 + 0xE0]
	0x01CE5C18 CBNZ W8, 0x1CE5C24
	0x01CE5C1C BL 0x1B6E8F8
	0x01CE5C20 LDR X0, [X20]
	0x01CE5C24 LDR X8, [X0 + 0xB8]
	0x01CE5C28 LDR X20, [X8]
	0x01CE5C2C CBZ X20, 0x1CE5C4C
	0x01CE5C30 LDR X0, [X19 + 0x40]
	0x01CE5C34 CBZ X0, 0x1CE5C5C
	0x01CE5C38 LDRB W8, [X0 + 0x60]
	0x01CE5C3C TBNZ X8, 0x1, 0x1CE5C58
	0x01CE5C40 MOV X1, X31
	0x01CE5C44 BL 0x1D9E780
	0x01CE5C48 B 0x1CE5C5C
	0x01CE5C4C LDP X20, X19, [X31 + 0x10]
	0x01CE5C50 LDP X30, X21, [X31], #0x20
	0x01CE5C54 RET
	0x01CE5C58 MOV W0, W31
	0x01CE5C5C LDR X8, [X20 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move S0, [X8+48]
	007 Move S1, [X8+52]
	008 Move V2, [X8+56]
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2269000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x226C000
	018 Move X0, [X0+432]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x226C000
	025 Move X0, [X0+440]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set__positionThatPlayerStayed(UnityEngine.Vector3 value)

Disassembly:
	0x01CE5C60 LDR X4, [X20 + 0x18]
	0x01CE5C64 LDR X3, [X20 + 0x28]
	0x01CE5C68 MOV X1, X19
	0x01CE5C6C LDP X20, X19, [X31 + 0x10]
	0x01CE5C70 AND W2, W0, 0x1
	0x01CE5C74 MOV X0, X8
	0x01CE5C78 LDP X30, X21, [X31], #0x20
	0x01CE5C7C BR X4
	0x01CE5C80 BL 0x1B6EA1C
	0x01CE5C84 SUB X31, X31, 0x20
	0x01CE5C88 STP X30, X19, [X31 + 0x10]
	0x01CE5C8C STR X31, [X31 + 0x8]
	0x01CE5C90 MOV X19, X0
	0x01CE5C94 LDR X0, [X0 + 0x40]
	0x01CE5C98 CBZ X0, 0x1CE5D10
	0x01CE5C9C LDRB W8, [X0 + 0x60]
	0x01CE5CA0 TBNZ X8, 0x1, 0x1CE5D10
	0x01CE5CA4 MOV X1, X31
	0x01CE5CA8 BL 0x1D9E780
	0x01CE5CAC TBZ X0, 0x0, 0x1CE5D10
	0x01CE5CB0 MOV X0, X31
	0x01CE5CB4 BL 0x1D9CB50
	0x01CE5CB8 AND X1, X0, 0x0
	0x01CE5CBC MOV X0, X19
	0x01CE5CC0 BL 0x1CE412C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move [X8+48], S0
	007 Move [X8+56], S1
	008 Move [X8+56], S2
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 
	012 Move X0, 0x2269000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x226C000
	018 Move X0, [X0+432]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x226C000
	025 Move X0, [X0+448]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Single get_deltaTime()

Disassembly:
	0x01CE5CC4 LDR X8, [X19 + 0xB8]
	0x01CE5CC8 CBZ X8, 0x1CE5D1C
	0x01CE5CCC LDR W1, [X8 + 0x20]
	0x01CE5CD0 MOV X0, X19
	0x01CE5CD4 BL 0x1CE41EC
	0x01CE5CD8 LDR X8, [X19 + 0xB8]
	0x01CE5CDC CBZ X8, 0x1CE5D1C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+56]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call NetworkRunner.get_DeltaTime, X0
	008 Return V0
	009 Call 0x1B6FA1C

Method: System.Boolean get__updateValid()

Disassembly:
	0x01CE5CE0 LDRB W8, [X8 + 0x8C]
	0x01CE5CE4 CBZ W8, 0x1CE5D10
	0x01CE5CE8 ADD X1, X31, 0x8
	0x01CE5CEC MOV X0, X19
	0x01CE5CF0 BL 0x1CE5D20
	0x01CE5CF4 TBZ X0, 0x0, 0x1CE5D10
	0x01CE5CF8 LDR X8, [X31 + 0x8]
	0x01CE5CFC CBZ X8, 0x1CE5D1C
	0x01CE5D00 LDP S0, S1, [X8 + 0x28]
	0x01CE5D04 LDR V2, [X8 + 0x30]
	0x01CE5D08 MOV X0, X19
	0x01CE5D0C BL 0x1CE5868
	0x01CE5D10 LDP X30, X19, [X31 + 0x10]
	0x01CE5D14 ADD X31, X31, 0x20
	0x01CE5D18 RET
	0x01CE5D1C BL 0x1B6EA1C
	0x01CE5D20 SUB X31, X31, 0x50

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+64]
	005 Compare X0, 0
	006 JumpIfEqual {21}
	007 Move W8, [X0+96]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 2
	010 Compare TEMP, 2
	011 JumpIfEqual {21}
	012 Move X1, X31
	013 Call NetworkObject.get_HasStateAuthority, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {21}
	018 Move X0, X19
	019 Call MobController.get_isDie, X0
	020 Xor W8, W0, 1
	021 Move W8, W31
	022 And W0, W8, 1
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Return X0

Method: System.Collections.Generic.IEnumerable`1<AnimalCompany.MobController> get_spawnedMobs()

Disassembly:
	0x01CE5D24 STR X30, [X31 + 0x20]
	0x01CE5D28 STP X22, X21, [X31 + 0x30]
	0x01CE5D2C STP X20, X19, [X31 + 0x40]
	0x01CE5D30 ADRP X22, 0x253E000
	0x01CE5D34 ADRP X21, 0x2268000
	0x01CE5D38 LDRB W8, [X22 + 0x661]
	0x01CE5D3C LDR X21, [X21 + 0x478]
	0x01CE5D40 MOV X19, X1
	0x01CE5D44 MOV X20, X0
	0x01CE5D48 TBNZ X8, 0x0, 0x1CE5D60
	0x01CE5D4C ADRP X0, 0x2268000
	0x01CE5D50 LDR X0, [X0 + 0x478]
	0x01CE5D54 BL 0x1B6E7F0
	0x01CE5D58 MOVZ W8, 0x1
	0x01CE5D5C STRB W8, [X22 + 0x661]
	0x01CE5D60 ADD X8, X31, 0x8
	0x01CE5D64 MOV X0, X20
	0x01CE5D68 STP X31, X31, [X31 + 0x8]
	0x01CE5D6C STR X31, [X31 + 0x18]
	0x01CE5D70 BL 0x1CE4968
	0x01CE5D74 ADD X0, X31, 0x8
	0x01CE5D78 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x253F000
	005 Move X19, 0x226A000
	006 Move W8, [X20+1624]
	007 Move X19, [X19+3448]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x226A000
	013 Move X0, [X0+3448]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1624], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1B6F8F8
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void GenGraphSetup(System.Int32 navZone)

Disassembly:
	0x01CE5D7C BL 0x1D02D48
	0x01CE5D80 STR X0, [X19]

ISIL:
	001 Move [X0+228], W1
	002 Return 

Method: System.Void OnUpdateFinish(System.String phase)

Disassembly:
	0x01CE5D84 MOV X20, X0
	0x01CE5D88 LDR X0, [X21]
	0x01CE5D8C LDR W8, [X0 + 0xE0]
	0x01CE5D90 CBNZ W8, 0x1CE5D98
	0x01CE5D94 BL 0x1B6E8F8
	0x01CE5D98 MOV X0, X20
	0x01CE5D9C MOV X1, X31
	0x01CE5DA0 MOV X2, X31
	0x01CE5DA4 BL 0x3AA0AF0
	0x01CE5DA8 LDP X20, X19, [X31 + 0x40]
	0x01CE5DAC LDP X22, X21, [X31 + 0x30]
	0x01CE5DB0 LDR X30, [X31 + 0x20]
	0x01CE5DB4 ORN W8, W31, W0, 0x0
	0x01CE5DB8 AND W0, W8, 0x1
	0x01CE5DBC ADD X31, X31, 0x50
	0x01CE5DC0 RET
	0x01CE5DC4 SUB X31, X31, 0x40
	0x01CE5DC8 STR X30, [X31 + 0x20]
	0x01CE5DCC STP X20, X19, [X31 + 0x30]
	0x01CE5DD0 ADRP X20, 0x253E000
	0x01CE5DD4 LDRB W8, [X20 + 0x662]
	0x01CE5DD8 MOV X19, X0
	0x01CE5DDC TBNZ X8, 0x0, 0x1CE5E00
	0x01CE5DE0 ADRP X0, 0x226B000
	0x01CE5DE4 LDR X0, [X0 + 0x228]
	0x01CE5DE8 BL 0x1B6E7F0
	0x01CE5DEC ADRP X0, 0x226B000
	0x01CE5DF0 LDR X0, [X0 + 0x230]
	0x01CE5DF4 BL 0x1B6E7F0
	0x01CE5DF8 MOVZ W8, 0x1
	0x01CE5DFC STRB W8, [X20 + 0x662]
	0x01CE5E00 LDR X8, [X19 + 0x120]
	0x01CE5E04 CBZ X8, 0x1CE5E90
	0x01CE5E08 LDP W2, W9, [X8 + 0x18]
	0x01CE5E0C ADD W9, W9, 0x1
	0x01CE5E10 CMP W2, 0x1
	0x01CE5E14 STP W31, W9, [X8 + 0x18]
	0x01CE5E18 B.LT 0x1CE5E2C
	0x01CE5E1C LDR X0, [X8 + 0x10]
	0x01CE5E20 MOV W1, W31
	0x01CE5E24 MOV X3, X31
	0x01CE5E28 BL 0x32093A0
	0x01CE5E2C LDR X20, [X19 + 0x128]
	0x01CE5E30 CBZ X20, 0x1CE5E90
	0x01CE5E34 LDP W2, W8, [X20 + 0x18]
	0x01CE5E38 ADD W8, W8, 0x1
	0x01CE5E3C CMP W2, 0x1
	0x01CE5E40 STP W31, W8, [X20 + 0x18]
	0x01CE5E44 B.LT 0x1CE5E5C
	0x01CE5E48 LDR X0, [X20 + 0x10]
	0x01CE5E4C MOV W1, W31
	0x01CE5E50 MOV X3, X31
	0x01CE5E54 BL 0x32093A0
	0x01CE5E58 LDR X20, [X19 + 0x128]
	0x01CE5E5C ADD X8, X31, 0x8
	0x01CE5E60 MOV X0, X19
	0x01CE5E64 BL 0x1CE4968
	0x01CE5E68 CBZ X20, 0x1CE5E90
	0x01CE5E6C ADRP X8, 0x226B000
	0x01CE5E70 LDR X8, [X8 + 0x228]
	0x01CE5E74 LDR X1, [X31 + 0x10]
	0x01CE5E78 MOV X0, X20
	0x01CE5E7C LDP X20, X19, [X31 + 0x30]
	0x01CE5E80 LDR X2, [X8]
	0x01CE5E84 LDR X30, [X31 + 0x20]
	0x01CE5E88 ADD X31, X31, 0x40
	0x01CE5E8C B 0x2E4671C
	0x01CE5E90 BL 0x1B6EA1C
	0x01CE5E94 SUB X31, X31, 0x70
	0x01CE5E98 STP D11, D10, [X31 + 0x10]
	0x01CE5E9C STP D9, D8, [X31 + 0x20]
	0x01CE5EA0 STP X30, X25, [X31 + 0x30]
	0x01CE5EA4 STP X24, X23, [X31 + 0x40]
	0x01CE5EA8 STP X22, X21, [X31 + 0x50]
	0x01CE5EAC STP X20, X19, [X31 + 0x60]
	0x01CE5EB0 ADRP X21, 0x253E000
	0x01CE5EB4 LDRB W8, [X21 + 0x663]
	0x01CE5EB8 MOV X19, X1
	0x01CE5EBC MOV V8.16B, V3.16B
	0x01CE5EC0 MOV V9.16B, V2.16B
	0x01CE5EC4 MOV V10.16B, V1.16B
	0x01CE5EC8 MOV V11.16B, V0.16B
	0x01CE5ECC MOV X20, X0
	0x01CE5ED0 TBNZ X8, 0x0, 0x1CE5F48
	0x01CE5ED4 ADRP X0, 0x226B000
	0x01CE5ED8 LDR X0, [X0 + 0x238]
	0x01CE5EDC BL 0x1B6E7F0
	0x01CE5EE0 ADRP X0, 0x2269000
	0x01CE5EE4 LDR X0, [X0 + 0x3D8]
	0x01CE5EE8 BL 0x1B6E7F0
	0x01CE5EEC ADRP X0, 0x226B000
	0x01CE5EF0 LDR X0, [X0 + 0x240]
	0x01CE5EF4 BL 0x1B6E7F0
	0x01CE5EF8 ADRP X0, 0x226B000
	0x01CE5EFC LDR X0, [X0 + 0x230]
	0x01CE5F00 BL 0x1B6E7F0
	0x01CE5F04 ADRP X0, 0x226B000
	0x01CE5F08 LDR X0, [X0 + 0x248]
	0x01CE5F0C BL 0x1B6E7F0
	0x01CE5F10 ADRP X0, 0x226B000
	0x01CE5F14 LDR X0, [X0 + 0x250]
	0x01CE5F18 BL 0x1B6E7F0
	0x01CE5F1C ADRP X0, 0x226B000
	0x01CE5F20 LDR X0, [X0 + 0x258]
	0x01CE5F24 BL 0x1B6E7F0
	0x01CE5F28 ADRP X0, 0x2268000
	0x01CE5F2C LDR X0, [X0 + 0x478]
	0x01CE5F30 BL 0x1B6E7F0
	0x01CE5F34 ADRP X0, 0x2268000
	0x01CE5F38 LDR X0, [X0 + 0x4C0]
	0x01CE5F3C BL 0x1B6E7F0
	0x01CE5F40 MOVZ W8, 0x1
	0x01CE5F44 STRB W8, [X21 + 0x663]
	0x01CE5F48 STR X31, [X31 + 0x8]
	0x01CE5F4C STR X31, [X19]
	0x01CE5F50 LDR X8, [X20 + 0x158]
	0x01CE5F54 CBZ X8, 0x1CE6154

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x253F000
	007 Move W8, [X21+1625]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {37}
	014 Move X0, 0x2269000
	015 Move X0, [X0+2232]
	016 Call 0x1B6F7F0
	017 Move X0, 0x2269000
	018 Move X0, [X0+3016]
	019 Call 0x1B6F7F0
	020 Move X0, 0x226C000
	021 Move X0, [X0+456]
	022 Call 0x1B6F7F0
	023 Move X0, 0x226C000
	024 Move X0, [X0+464]
	025 Call 0x1B6F7F0
	026 Move X0, 0x226C000
	027 Move X0, [X0+472]
	028 Call 0x1B6F7F0
	029 Move X0, 0x226C000
	030 Move X0, [X0+480]
	031 Call 0x1B6F7F0
	032 Move X0, 0x226C000
	033 Move X0, [X0+488]
	034 Call 0x1B6F7F0
	035 Move W8, 1
	036 Move [X21+1625], W8
	037 Move X0, X31
	038 Call GameManager.get_isDebug
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {116}
	043 Move X0, X31
	044 Call Time.get_realtimeSinceStartup
	045 Move V1, [X20+352]
	046 Move X8, -19116032
	047 Move V2, [X8+3376]
	048 Move W8, 0x447A0000
	049 Subtract S0, S0, S1
	050 Move S1, W8
	051 Multiply S0, S0, S1
	052 NotImplemented "Instruction FCMP not yet implemented."
	053 Move [X31+12], S0
	054 Move X8, 0x2269000
	055 Move X8, [X8+3016]
	056 Move W1, 7
	057 Move X0, [X8]
	058 Call 0x1B6F868
	059 Compare X0, 0
	060 JumpIfEqual {123}
	061 Move W8, [X0+24]
	062 Move X21, X0
	063 Compare W8, 0
	064 JumpIfEqual {122}
	065 Move X8, 0x226C000
	066 Move X8, [X8+472]
	067 Move X0, X20
	068 Move X1, X31
	069 Move X8, [X8]
	070 Move [X21+32], X8
	071 Call Object.get_name, X0
	072 Move W8, [X21+24]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move [X21+40], X0
	076 Move X9, 0x226C000
	077 Move X9, [X9+488]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X9, [X9]
	080 Move [X21+48], X9
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move [X21+56], X19
	083 Move X8, 0x226C000
	084 Move X8, [X8+464]
	085 Add X0, X31, 12
	086 Move X2, X31
	087 Move X8, [X8]
	088 Move [X21+64], X8
	089 Move X8, 0x226C000
	090 Move X8, [X8+456]
	091 Move X1, [X8]
	092 Call Single.ToString, X0, X1
	093 Move W8, [X21+24]
	094 NotImplemented "Instruction CMP not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move [X21+72], X0
	097 Move X8, 0x226C000
	098 Move X8, [X8+480]
	099 Move X0, X21
	100 Move X1, X31
	101 Move X8, [X8]
	102 Move [X21+80], X8
	103 Call String.Concat, X0
	104 Move X8, 0x2269000
	105 Move X8, [X8+2232]
	106 Move X19, X0
	107 Move X8, [X8]
	108 Move W9, [X8+224]
	109 Compare W9, 0
	110 JumpIfNotEqual {113}
	111 Move X0, X8
	112 Call 0x1B6F8F8
	113 Move X0, X19
	114 Move X1, X31
	115 Call Debug.LogWarning, X0
	116 Move X20, [X31+32]
	117 Move X19, [X31+40]
	118 Move X30, [X31+16]
	119 Move X21, [X31+24]
	120 Add X31, X31, 48
	121 Return 
	122 Call 0x1B6FA24
	123 Call 0x1B6FA1C

Method: System.Void Awake()

Disassembly:
	0x01CE5F58 LDP W2, W9, [X8 + 0x18]
	0x01CE5F5C ADRP X21, 0x2269000
	0x01CE5F60 LDR X21, [X21 + 0x3D8]
	0x01CE5F64 ADD W9, W9, 0x1
	0x01CE5F68 CMP W2, 0x1
	0x01CE5F6C STP W31, W9, [X8 + 0x18]
	0x01CE5F70 B.LT 0x1CE5F84
	0x01CE5F74 LDR X0, [X8 + 0x10]
	0x01CE5F78 MOV W1, W31
	0x01CE5F7C MOV X3, X31
	0x01CE5F80 BL 0x32093A0
	0x01CE5F84 LDR X0, [X21]
	0x01CE5F88 ADRP X22, 0x2268000
	0x01CE5F8C LDR W8, [X0 + 0xE0]
	0x01CE5F90 LDR X22, [X22 + 0x4C0]
	0x01CE5F94 CBNZ W8, 0x1CE5FA0
	0x01CE5F98 BL 0x1B6E8F8
	0x01CE5F9C LDR X0, [X21]
	0x01CE5FA0 LDR X8, [X0 + 0xB8]
	0x01CE5FA4 MOV X1, X31
	0x01CE5FA8 LDR W0, [X8 + 0x24]
	0x01CE5FAC BL 0x3A9DE68
	0x01CE5FB0 LDR X8, [X22]
	0x01CE5FB4 MOV W21, W0
	0x01CE5FB8 LDR W9, [X8 + 0xE0]
	0x01CE5FBC CBNZ W9, 0x1CE5FC8
	0x01CE5FC0 MOV X0, X8
	0x01CE5FC4 BL 0x1B6E8F8
	0x01CE5FC8 MOV V0.16B, V11.16B
	0x01CE5FCC MOV V1.16B, V10.16B
	0x01CE5FD0 MOV V2.16B, V9.16B
	0x01CE5FD4 MOV V3.16B, V8.16B
	0x01CE5FD8 MOV W0, W21
	0x01CE5FDC MOV X1, X31
	0x01CE5FE0 BL 0x3AF52EC
	0x01CE5FE4 CBZ X0, 0x1CE6154
	0x01CE5FE8 LDR W8, [X0 + 0x18]
	0x01CE5FEC MOV X21, X0
	0x01CE5FF0 CMP W8, 0x1
	0x01CE5FF4 B.LT 0x1CE60B8
	0x01CE5FF8 ADRP X23, 0x226B000
	0x01CE5FFC ADRP X24, 0x226B000
	0x01CE6000 ADRP X25, 0x226A000
	0x01CE6004 LDR X23, [X23 + 0x238]
	0x01CE6008 LDR X24, [X24 + 0x248]
	0x01CE600C B 0x3D19168
	0x01CE6010 MOV W22, W31
	0x01CE6014 CMP W22, W8
	0x01CE6018 B.CS 0x1CE6158
	0x01CE601C ADD X8, X21, W22, 0x3, SXTW
	0x01CE6020 LDR X0, [X8 + 0x20]
	0x01CE6024 CBZ X0, 0x1CE6154
	0x01CE6028 LDR X2, [X23]
	0x01CE602C ADD X1, X31, 0x8
	0x01CE6030 BL 0x2090EE4
	0x01CE6034 TBZ X0, 0x0, 0x1CE60A8
	0x01CE6038 LDR X0, [X20 + 0x128]
	0x01CE603C CBZ X0, 0x1CE6154
	0x01CE6040 LDR X1, [X31 + 0x8]
	0x01CE6044 LDR X2, [X24]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x253F000
	008 Move X23, 0x2269000
	009 Move X22, 0x226A000
	010 Move W8, [X20+1626]
	011 Move X23, [X23+3960]
	012 Move X22, [X22+1000]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x226A000
	019 Move X0, [X0+1000]
	020 Call 0x1B6F7F0
	021 Move X0, 0x2269000
	022 Move X0, [X0+3960]
	023 Call 0x1B6F7F0
	024 Move W8, 1
	025 Move [X20+1626], W8
	026 Move X8, [X23]
	027 Move X0, [X22]
	028 Move X8, [X8+184]
	029 Move X20, [X8+48]
	030 Call 0x1B6FA0C
	031 Compare X19, 0
	032 JumpIfEqual {73}
	033 Move X8, [X19]
	034 Move X1, X19
	035 Move X3, X31
	036 Move X21, X0
	037 Move X2, [X8+640]
	038 Call Action`1<PlayerRef>..ctor, X0, X1, X2
	039 Move X0, X20
	040 Move X1, X21
	041 Move X2, X31
	042 Call Delegate.Combine, X0, X1
	043 Compare X0, 0
	044 JumpIfEqual {63}
	045 Move X20, [X22]
	046 Move X19, X0
	047 Move X1, X20
	048 Call 0x1B6F8FC
	049 Compare X0, 0
	050 JumpIfEqual {60}
	051 Move X8, [X23]
	052 Move X8, [X8+184]
	053 Move [X8+48], X0
	054 Move X20, [X22]
	055 Move X0, X19
	056 Move X1, X20
	057 Call 0x1B6F8FC
	058 Compare X0, 0
	059 JumpIfNotEqual {66}
	060 Move X0, X19
	061 Move X1, X20
	062 Call 0x1B6FCDC
	063 Move X8, [X23]
	064 Move X8, [X8+184]
	065 Move [X8+48], X31
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Move X23, [X31+56]
	072 Return 
	073 Call 0x1B6FA1C

Method: System.Void OnDestroy()

Disassembly:
	0x01CE6048 BL 0x2E468A0
	0x01CE604C TBZ X0, 0x0, 0x1CE60A8
	0x01CE6050 LDR X0, [X20 + 0x158]
	0x01CE6054 CBZ X0, 0x1CE6154
	0x01CE6058 LDR W10, [X0 + 0x1C]
	0x01CE605C LDR X1, [X31 + 0x8]
	0x01CE6060 LDR X8, [X0 + 0x10]
	0x01CE6064 LDR X9, [X25]
	0x01CE6068 ADD W10, W10, 0x1
	0x01CE606C STR W10, [X0 + 0x1C]
	0x01CE6070 CBZ X8, 0x1CE6154
	0x01CE6074 LDRSW X10, [X0 + 0x18]
	0x01CE6078 LDR W11, [X8 + 0x18]
	0x01CE607C CMP W10, W11
	0x01CE6080 B.CS 0x1CE6098
	0x01CE6084 ADD W9, W10, 0x1
	0x01CE6088 ADD X8, X8, X10, 0x3, LSL
	0x01CE608C STR W9, [X0 + 0x18]
	0x01CE6090 STR X1, [X8 + 0x20]
	0x01CE6094 B 0x1CE60A8
	0x01CE6098 LDR X8, [X9 + 0x20]
	0x01CE609C LDR X8, [X8 + 0xC0]
	0x01CE60A0 LDR X2, [X8 + 0x70]
	0x01CE60A4 BL 0x2E46518
	0x01CE60A8 LDR W8, [X21 + 0x18]
	0x01CE60AC ADD W22, W22, 0x1
	0x01CE60B0 CMP W22, W8
	0x01CE60B4 B.LT 0x1CE6014
	0x01CE60B8 LDR X8, [X20 + 0x158]
	0x01CE60BC CBZ X8, 0x1CE6154
	0x01CE60C0 LDR W1, [X8 + 0x18]
	0x01CE60C4 CMP W1, 0x0
	0x01CE60C8 B.LE 0x1CE6104
	0x01CE60CC MOV W0, W31
	0x01CE60D0 MOV X2, X31
	0x01CE60D4 BL 0x3A98D10
	0x01CE60D8 LDR X8, [X20 + 0x158]
	0x01CE60DC CBZ X8, 0x1CE6154
	0x01CE60E0 ADRP X9, 0x226A000
	0x01CE60E4 LDR X9, [X9 + 0x258]
	0x01CE60E8 MOV W1, W0
	0x01CE60EC MOV X0, X8
	0x01CE60F0 LDR X2, [X9]
	0x01CE60F4 BL 0x2E46254
	0x01CE60F8 MOV X20, X0
	0x01CE60FC STR X0, [X19]
	0x01CE6100 B 0x1CE6108
	0x01CE6104 LDR X20, [X19]
	0x01CE6108 ADRP X8, 0x2267000
	0x01CE610C LDR X8, [X8 + 0x478]
	0x01CE6110 LDR X0, [X8]
	0x01CE6114 LDR W8, [X0 + 0xE0]
	0x01CE6118 CBNZ W8, 0x1CE6120
	0x01CE611C BL 0x1B6E8F8
	0x01CE6120 MOV X0, X20
	0x01CE6124 MOV X1, X31
	0x01CE6128 MOV X2, X31
	0x01CE612C BL 0x3A9D6EC
	0x01CE6130 LDP X20, X19, [X31 + 0x60]
	0x01CE6134 LDP X22, X21, [X31 + 0x50]
	0x01CE6138 LDP X24, X23, [X31 + 0x40]
	0x01CE613C LDP X30, X25, [X31 + 0x30]
	0x01CE6140 LDP D9, D8, [X31 + 0x20]
	0x01CE6144 LDP D11, D10, [X31 + 0x10]
	0x01CE6148 AND W0, W0, 0x1
	0x01CE614C ADD X31, X31, 0x70
	0x01CE6150 RET
	0x01CE6154 BL 0x1B6EA1C
	0x01CE6158 BL 0x1B6EA24
	0x01CE615C SUB X31, X31, 0x80
	0x01CE6160 STP D11, D10, [X31 + 0x30]
	0x01CE6164 STP D9, D8, [X31 + 0x40]
	0x01CE6168 STP X30, X23, [X31 + 0x50]
	0x01CE616C STP X22, X21, [X31 + 0x60]
	0x01CE6170 STP X20, X19, [X31 + 0x70]
	0x01CE6174 ADRP X20, 0x253D000
	0x01CE6178 LDRB W8, [X20 + 0x664]
	0x01CE617C MOV V8.16B, V2.16B
	0x01CE6180 MOV V9.16B, V1.16B
	0x01CE6184 MOV V10.16B, V0.16B
	0x01CE6188 MOV X19, X0
	0x01CE618C TBNZ X8, 0x0, 0x1CE61D4
	0x01CE6190 ADRP X0, 0x226A000
	0x01CE6194 LDR X0, [X0 + 0x260]
	0x01CE6198 BL 0x1B6E7F0
	0x01CE619C ADRP X0, 0x226A000
	0x01CE61A0 LDR X0, [X0 + 0x268]
	0x01CE61A4 BL 0x1B6E7F0
	0x01CE61A8 ADRP X0, 0x226A000
	0x01CE61AC LDR X0, [X0 + 0x270]
	0x01CE61B0 BL 0x1B6E7F0
	0x01CE61B4 ADRP X0, 0x226A000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x253E000
	008 Move X21, 0x2269000
	009 Move W8, [X20+1627]
	010 Move X21, [X21+448]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x2269000
	017 Move X0, [X0+1000]
	018 Call 0x1B6F7F0
	019 Move X0, 0x226B000
	020 Move X0, [X0+496]
	021 Call 0x1B6F7F0
	022 Move X0, 0x2269000
	023 Move X0, [X0+3448]
	024 Call 0x1B6F7F0
	025 Move X0, 0x2269000
	026 Move X0, [X0+448]
	027 Call 0x1B6F7F0
	028 Move X0, 0x2268000
	029 Move X0, [X0+3960]
	030 Call 0x1B6F7F0
	031 Move W8, 1
	032 Move [X20+1627], W8
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1B6F8F8
	038 Compare X19, 0
	039 JumpIfEqual {109}
	040 Move W8, [X19+48]
	041 Move X22, 0x2268000
	042 Move X22, [X22+3960]
	043 Move X23, 0x2269000
	044 Or W8, W8, 8
	045 Move [X19+48], W8
	046 Move X8, [X22]
	047 Move X8, [X8+184]
	048 Move X23, [X23+1000]
	049 Move X20, [X8+48]
	050 Move X0, [X23]
	051 Call 0x1B6FA0C
	052 Move X8, [X19]
	053 Move X1, X19
	054 Move X3, X31
	055 Move X21, X0
	056 Move X2, [X8+640]
	057 Call Action`1<PlayerRef>..ctor, X0, X1, X2
	058 Move X0, X20
	059 Move X1, X21
	060 Move X2, X31
	061 Call Delegate.Remove, X0, X1
	062 Compare X0, 0
	063 JumpIfEqual {82}
	064 Move X21, [X23]
	065 Move X20, X0
	066 Move X1, X21
	067 Call 0x1B6F8FC
	068 Compare X0, 0
	069 JumpIfEqual {79}
	070 Move X8, [X22]
	071 Move X8, [X8+184]
	072 Move [X8+48], X0
	073 Move X21, [X23]
	074 Move X0, X20
	075 Move X1, X21
	076 Call 0x1B6F8FC
	077 Compare X0, 0
	078 JumpIfNotEqual {85}
	079 Move X0, X20
	080 Move X1, X21
	081 Call 0x1B6FCDC
	082 Move X8, [X22]
	083 Move X8, [X8+184]
	084 Move [X8+48], X31
	085 Move X20, 0x2269000
	086 Move X20, [X20+3448]
	087 Move X0, [X20]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {93}
	091 Call 0x1B6F8F8
	092 Move X0, [X20]
	093 Move X8, [X0+184]
	094 Move X0, [X8+8]
	095 Compare X0, 0
	096 JumpIfEqual {109}
	097 Move X8, 0x226B000
	098 Move X8, [X8+496]
	099 Move X1, X19
	100 Move X20, [X31+32]
	101 Move X19, [X31+40]
	102 Move X22, [X31+16]
	103 Move X21, [X31+24]
	104 Move X2, [X8]
	105 Move X30, [X31+48]
	106 Move X23, [X31+56]
	107 Call HashSet`1<Object>.Remove, X0, X1
	108 Return 
	109 Call 0x1B6FA1C

Method: System.Void HandlePlayerLeft(Fusion.PlayerRef player)

Disassembly:
	0x01CE61B8 LDR X0, [X0 + 0x278]
	0x01CE61BC BL 0x1B6E7F0
	0x01CE61C0 ADRP X0, 0x2267000
	0x01CE61C4 LDR X0, [X0 + 0x478]
	0x01CE61C8 BL 0x1B6E7F0
	0x01CE61CC MOVZ W8, 0x1
	0x01CE61D0 STRB W8, [X20 + 0x664]
	0x01CE61D4 STP X31, X31, [X31 + 0x18]
	0x01CE61D8 STR X31, [X31 + 0x28]
	0x01CE61DC STP X31, X31, [X31]
	0x01CE61E0 STR X31, [X31 + 0x10]
	0x01CE61E4 LDR X0, [X19 + 0x128]
	0x01CE61E8 CBZ X0, 0x1CE62F0
	0x01CE61EC ADRP X8, 0x226A000
	0x01CE61F0 LDR X8, [X8 + 0x278]
	0x01CE61F4 ADRP X22, 0x226A000
	0x01CE61F8 ADRP X23, 0x2267000
	0x01CE61FC ADRP X21, 0x226A000
	0x01CE6200 LDR X1, [X8]
	0x01CE6204 LDR X22, [X22 + 0x268]
	0x01CE6208 LDR X23, [X23 + 0x478]
	0x01CE620C LDR X21, [X21 + 0x260]
	0x01CE6210 ADD X8, X31, 0x18
	0x01CE6214 BL 0x2E470E0
	0x01CE6218 MOVN W9, 0x80800000
	0x01CE621C MOV X8, X31
	0x01CE6220 FMOV S0, W9
	0x01CE6224 MOV X20, X8
	0x01CE6228 MOV V11.16B, V0.16B
	0x01CE622C LDR X1, [X22]
	0x01CE6230 ADD X0, X31, 0x18
	0x01CE6234 BL 0x2A14F30
	0x01CE6238 TBZ X0, 0x0, 0x1CE6278
	0x01CE623C LDR X8, [X31 + 0x28]
	0x01CE6240 CBZ X8, 0x1CE62EC
	0x01CE6244 LDP S0, S1, [X8 + 0x28]
	0x01CE6248 LDR V2, [X8 + 0x30]
	0x01CE624C FSUB S0, S10, S0
	0x01CE6250 FSUB S1, S9, S1
	0x01CE6254 FSUB S2, S8, S2
	0x01CE6258 FMUL S0, S0, S0
	0x01CE625C FMUL S1, S1, S1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x253E000
	005 Move W8, [X20+1628]
	006 Move X19, X0
	007 Move [X31+8], W1
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2269000
	013 Move X0, [X0+1192]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1628], W8
	017 Move X0, [X19+64]
	018 Compare X0, 0
	019 JumpIfEqual {51}
	020 Move W8, [X0+96]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 2
	023 Compare TEMP, 2
	024 JumpIfEqual {51}
	025 Move X1, X31
	026 Call NetworkObject.get_HasStateAuthority, X0
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {51}
	031 Move X8, 0x2269000
	032 Move X8, [X8+1192]
	033 Move X0, [X8]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1B6F8F8
	038 Add X0, X31, 8
	039 Move X1, X31
	040 Call PlayerRef.get_PlayerId, X0
	041 Move W20, W0
	042 Move X0, X19
	043 Call MobController.get_targetPlayerID, X0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X8, [X19]
	046 Move X0, X19
	047 Move X1, X31
	048 Move X9, [X8+824]
	049 Move X2, [X8+832]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Return 

Method: System.Void Spawned()

Disassembly:
	0x01CE6260 FADD S0, S0, S1
	0x01CE6264 FMUL S1, S2, S2
	0x01CE6268 FADD S0, S0, S1
	0x01CE626C FCMP S0, S11
	0x01CE6270 B.PL 0x1CE622C
	0x01CE6274 B 0x1CE6224
	0x01CE6278 LDR X1, [X21]
	0x01CE627C ADD X0, X31, 0x18
	0x01CE6280 BL 0x2A14F2C
	0x01CE6284 LDR X0, [X23]
	0x01CE6288 LDR W8, [X0 + 0xE0]
	0x01CE628C CBNZ W8, 0x1CE6294
	0x01CE6290 BL 0x1B6E8F8
	0x01CE6294 MOV X0, X20
	0x01CE6298 MOV X1, X31
	0x01CE629C MOV X2, X31
	0x01CE62A0 BL 0x3AA0AF0
	0x01CE62A4 TBZ X0, 0x0, 0x1CE62CC
	0x01CE62A8 ADD X8, X31, 0x0
	0x01CE62AC MOV X0, X19
	0x01CE62B0 BL 0x1CE4968
	0x01CE62B4 ADD X0, X31, 0x0
	0x01CE62B8 MOV X1, X31
	0x01CE62BC BL 0x1D02D48
	0x01CE62C0 MOV X20, X0
	0x01CE62C4 MOV X0, X19
	0x01CE62C8 BL 0x1CE5DC4
	0x01CE62CC MOV X0, X20
	0x01CE62D0 LDP X20, X19, [X31 + 0x70]
	0x01CE62D4 LDP X22, X21, [X31 + 0x60]
	0x01CE62D8 LDP X30, X23, [X31 + 0x50]
	0x01CE62DC LDP D9, D8, [X31 + 0x40]
	0x01CE62E0 LDP D11, D10, [X31 + 0x30]
	0x01CE62E4 ADD X31, X31, 0x80
	0x01CE62E8 RET
	0x01CE62EC BL 0x1B6EA1C
	0x01CE62F0 BL 0x1B6EA1C
	0x01CE62F4 B 0x1CE62F8
	0x01CE62F8 MOV X22, X0
	0x01CE62FC CMP W1, 0x1
	0x01CE6300 B.NE 0x1CE6334
	0x01CE6304 MOV X0, X22
	0x01CE6308 BL 0x3D19840
	0x01CE630C LDR X21, [X0]
	0x01CE6310 BL 0x3D19850
	0x01CE6314 ADRP X8, 0x226A000
	0x01CE6318 LDR X8, [X8 + 0x260]
	0x01CE631C ADD X0, X31, 0x18
	0x01CE6320 LDR X1, [X8]
	0x01CE6324 BL 0x2A14F2C
	0x01CE6328 CBZ X21, 0x1CE6284
	0x01CE632C MOV X0, X21
	0x01CE6330 BL 0x1B6EA14
	0x01CE6334 MOV X21, X31
	0x01CE6338 B 0x1CE6340
	0x01CE633C MOV X22, X0
	0x01CE6340 ADRP X8, 0x226A000
	0x01CE6344 LDR X8, [X8 + 0x260]
	0x01CE6348 LDR X1, [X8]
	0x01CE634C ADD X0, X31, 0x18
	0x01CE6350 BL 0x2A14F2C
	0x01CE6354 CBNZ X21, 0x1CE6360
	0x01CE6358 MOV X0, X22
	0x01CE635C BL 0x1C8418C
	0x01CE6360 MOV X0, X21
	0x01CE6364 BL 0x1B6EA14
	0x01CE6368 BL 0x18F46A8
	0x01CE636C SUB X31, X31, 0x70
	0x01CE6370 STP D11, D10, [X31 + 0x10]
	0x01CE6374 STP D9, D8, [X31 + 0x20]
	0x01CE6378 STP X30, X25, [X31 + 0x30]
	0x01CE637C STP X24, X23, [X31 + 0x40]
	0x01CE6380 STP X22, X21, [X31 + 0x50]
	0x01CE6384 STP X20, X19, [X31 + 0x60]
	0x01CE6388 ADRP X21, 0x253D000
	0x01CE638C ADRP X20, 0x2268000
	0x01CE6390 LDRB W8, [X21 + 0x665]
	0x01CE6394 LDR X20, [X20 + 0x3D8]
	0x01CE6398 MOV V8.16B, V3.16B
	0x01CE639C MOV V9.16B, V2.16B
	0x01CE63A0 MOV V10.16B, V1.16B
	0x01CE63A4 MOV V11.16B, V0.16B
	0x01CE63A8 MOV X19, X0
	0x01CE63AC TBNZ X8, 0x0, 0x1CE6400
	0x01CE63B0 ADRP X0, 0x226A000
	0x01CE63B4 LDR X0, [X0 + 0x238]
	0x01CE63B8 BL 0x1B6E7F0
	0x01CE63BC ADRP X0, 0x2268000
	0x01CE63C0 LDR X0, [X0 + 0x3D8]
	0x01CE63C4 BL 0x1B6E7F0
	0x01CE63C8 ADRP X0, 0x226A000
	0x01CE63CC LDR X0, [X0 + 0x240]
	0x01CE63D0 BL 0x1B6E7F0
	0x01CE63D4 ADRP X0, 0x226A000
	0x01CE63D8 LDR X0, [X0 + 0x248]
	0x01CE63DC BL 0x1B6E7F0
	0x01CE63E0 ADRP X0, 0x226A000
	0x01CE63E4 LDR X0, [X0 + 0x280]
	0x01CE63E8 BL 0x1B6E7F0
	0x01CE63EC ADRP X0, 0x2267000
	0x01CE63F0 LDR X0, [X0 + 0x4C0]
	0x01CE63F4 BL 0x1B6E7F0
	0x01CE63F8 MOVZ W8, 0x1
	0x01CE63FC STRB W8, [X21 + 0x665]
	0x01CE6400 LDR X0, [X20]
	0x01CE6404 STR X31, [X31 + 0x8]
	0x01CE6408 ADRP X21, 0x2267000
	0x01CE640C LDR W8, [X0 + 0xE0]
	0x01CE6410 LDR X21, [X21 + 0x4C0]
	0x01CE6414 CBNZ W8, 0x1CE6420
	0x01CE6418 BL 0x1B6E8F8
	0x01CE641C LDR X0, [X20]
	0x01CE6420 LDR X8, [X0 + 0xB8]
	0x01CE6424 MOV X1, X31
	0x01CE6428 LDR W0, [X8 + 0x24]
	0x01CE642C BL 0x3A9DE68
	0x01CE6430 LDR X8, [X21]
	0x01CE6434 MOV W20, W0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x253E000
	007 Move W8, [X20+1629]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x226B000
	014 Move X0, [X0+504]
	015 Call 0x1B6F7F0
	016 Move X0, 0x226B000
	017 Move X0, [X0+512]
	018 Call 0x1B6F7F0
	019 Move X0, 0x226B000
	020 Move X0, [X0+520]
	021 Call 0x1B6F7F0
	022 Move X0, 0x2269000
	023 Move X0, [X0+3448]
	024 Call 0x1B6F7F0
	025 Move W8, 1
	026 Move [X20+1629], W8
	027 Move X0, X19
	028 Move X1, X31
	029 Call NetworkBehaviour.Spawned, X0
	030 Move X8, [X19]
	031 Move X1, [X8+656]
	032 Move X9, [X8+648]
	033 Move X0, X19
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move X21, 0x2269000
	036 Move X21, [X21+3448]
	037 Move X0, X31
	038 Call GameManager.get_isDebug
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {55}
	043 Move X8, 0x226B000
	044 Move X8, [X8+504]
	045 Move X0, [X8]
	046 Call 0x1B6FA0C
	047 Move X8, 0x226B000
	048 Move X8, [X8+520]
	049 Move X1, X19
	050 Move X3, X31
	051 Move X20, X0
	052 Move X2, [X8]
	053 Call Action`1<Object>..ctor, X0, X1, X2
	054 Move [X19+360], X20
	055 Move X0, [X21]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {61}
	059 Call 0x1B6F8F8
	060 Move X0, [X21]
	061 Move X8, [X0+184]
	062 Move X0, [X8+8]
	063 Compare X0, 0
	064 JumpIfEqual {76}
	065 Move X8, 0x226B000
	066 Move X8, [X8+512]
	067 Move X1, X19
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move X2, [X8]
	073 Move X30, [X31+48]
	074 Call HashSet`1<Object>.Add, X0, X1
	075 Return 
	076 Call 0x1B6FA1C
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X20, X0
	079 Move X0, X20
	080 Call 0x3D1A840
	081 Move X20, X0
	082 Move X0, 0x2268000
	083 Move X0, [X0+1648]
	084 Call 0x1B6F804
	085 Move X8, [X20]
	086 Move X1, [X8]
	087 Call 0x1B6FD6C
	088 Move TEMP, X0
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfNotEqual {121}
	092 Move X20, [X20]
	093 Call 0x3D1A850
	094 Move X0, 0x2268000
	095 Move X0, [X0+1576]
	096 Call 0x1B6F804
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1B6F8F8
	101 Move X0, 0x226B000
	102 Move X0, [X0+528]
	103 Call 0x1B6F804
	104 Move X21, X0
	105 Move X0, 0x226B000
	106 Move X0, [X0+408]
	107 Call 0x1B6F804
	108 Move X22, X0
	109 Move X0, 0x2269000
	110 Move X0, [X0+3056]
	111 Call 0x1B6F804
	112 Move X5, X0
	113 Move W0, 1
	114 Move W6, 167
	115 Move X1, X21
	116 Move X2, X20
	117 Move X3, X31
	118 Move X4, X22
	119 Move X7, X31
	120 Call Log.Error, X0, X1, X2, X3, X4, X5, X6
	121 Move W0, 8
	122 Call 0x3D1A860
	123 Move X8, [X20]
	124 Move [X0], X8
	125 Move X1, 0x2037000
	126 Add X1, X1, 3032
	127 Move X2, X31
	128 Call 0x3D1A870
	129 Move X20, X0
	130 Call 0x3D1A850
	131 Move X0, X20
	132 Call 0x1C8518C
	133 Call 0x18F56A8

Method: System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)

Disassembly:
	0x01CE6438 LDR W9, [X8 + 0xE0]
	0x01CE643C CBNZ W9, 0x1CE6448
	0x01CE6440 MOV X0, X8
	0x01CE6444 BL 0x1B6E8F8
	0x01CE6448 MOV V0.16B, V11.16B
	0x01CE644C MOV V1.16B, V10.16B
	0x01CE6450 MOV V2.16B, V9.16B
	0x01CE6454 MOV V3.16B, V8.16B
	0x01CE6458 MOV W0, W20
	0x01CE645C MOV X1, X31
	0x01CE6460 BL 0x3AF52EC
	0x01CE6464 CBZ X0, 0x1CE6574
	0x01CE6468 LDR W8, [X0 + 0x18]
	0x01CE646C MOV X20, X0
	0x01CE6470 CMP W8, 0x1
	0x01CE6474 B.LT 0x1CE6554
	0x01CE6478 ADRP X22, 0x226A000
	0x01CE647C ADRP X23, 0x226A000
	0x01CE6480 ADRP X24, 0x226A000
	0x01CE6484 ADRP X25, 0x226A000
	0x01CE6488 LDR X22, [X22 + 0x238]
	0x01CE648C LDR X23, [X23 + 0x248]
	0x01CE6490 LDR X24, [X24 + 0x280]
	0x01CE6494 LDR X25, [X25 + 0x240]
	0x01CE6498 MOV W21, W31
	0x01CE649C CMP W21, W8
	0x01CE64A0 B.CS 0x1CE6578
	0x01CE64A4 ADD X8, X20, W21, 0x3, SXTW
	0x01CE64A8 LDR X0, [X8 + 0x20]
	0x01CE64AC CBZ X0, 0x1CE6574
	0x01CE64B0 LDR X2, [X22]
	0x01CE64B4 ADD X1, X31, 0x8
	0x01CE64B8 BL 0x2090EE4
	0x01CE64BC TBZ X0, 0x0, 0x1CE6544
	0x01CE64C0 LDR X0, [X19 + 0x128]
	0x01CE64C4 CBZ X0, 0x1CE6574
	0x01CE64C8 LDR X1, [X31 + 0x8]
	0x01CE64CC LDR X2, [X23]
	0x01CE64D0 BL 0x2E468A0
	0x01CE64D4 TBZ X0, 0x0, 0x1CE6544
	0x01CE64D8 LDR X0, [X19 + 0x128]
	0x01CE64DC CBZ X0, 0x1CE6574
	0x01CE64E0 LDR X1, [X31 + 0x8]
	0x01CE64E4 LDR X2, [X24]
	0x01CE64E8 BL 0x2E47D30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x253E000
	007 Move W8, [X22+1630]
	008 Move W21, W2
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x226B000
	016 Move X0, [X0+496]
	017 Call 0x1B6F7F0
	018 Move X0, 0x2269000
	019 Move X0, [X0+3448]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X22+1630], W8
	023 Move X22, 0x2269000
	024 Move X22, [X22+3448]
	025 And W2, W21, 1
	026 Move X0, X19
	027 Move X1, X20
	028 Move X3, X31
	029 Call NetworkBehaviour.Despawned, X0, X1, X2
	030 Move X0, X31
	031 Call GameManager.get_isDebug
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {37}
	036 Move [X19+360], X31
	037 Move X0, [X22]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1B6F8F8
	042 Move X0, [X22]
	043 Move X8, [X0+184]
	044 Move X0, [X8+8]
	045 Compare X0, 0
	046 JumpIfEqual {58}
	047 Move X8, 0x226B000
	048 Move X8, [X8+496]
	049 Move X1, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X2, [X8]
	055 Move X30, [X31+48]
	056 Call HashSet`1<Object>.Remove, X0, X1
	057 Return 
	058 Call 0x1B6FA1C

Method: System.Void Setup()

Disassembly:
	0x01CE64EC LDR X0, [X19 + 0x120]
	0x01CE64F0 CBZ X0, 0x1CE6574
	0x01CE64F4 LDR W10, [X0 + 0x1C]
	0x01CE64F8 LDR X1, [X31 + 0x8]
	0x01CE64FC LDR X8, [X0 + 0x10]
	0x01CE6500 LDR X9, [X25]
	0x01CE6504 ADD W10, W10, 0x1
	0x01CE6508 STR W10, [X0 + 0x1C]
	0x01CE650C CBZ X8, 0x1CE6574
	0x01CE6510 LDRSW X10, [X0 + 0x18]
	0x01CE6514 LDR W11, [X8 + 0x18]
	0x01CE6518 CMP W10, W11
	0x01CE651C B.CS 0x1CE6534
	0x01CE6520 ADD W9, W10, 0x1
	0x01CE6524 ADD X8, X8, X10, 0x3, LSL
	0x01CE6528 STR W9, [X0 + 0x18]
	0x01CE652C STR X1, [X8 + 0x20]
	0x01CE6530 B 0x1CE6544
	0x01CE6534 LDR X8, [X9 + 0x20]
	0x01CE6538 LDR X8, [X8 + 0xC0]
	0x01CE653C LDR X2, [X8 + 0x70]
	0x01CE6540 BL 0x2E46518
	0x01CE6544 LDR W8, [X20 + 0x18]
	0x01CE6548 ADD W21, W21, 0x1
	0x01CE654C CMP W21, W8
	0x01CE6550 B.LT 0x1CE649C
	0x01CE6554 LDP X20, X19, [X31 + 0x60]
	0x01CE6558 LDP X22, X21, [X31 + 0x50]
	0x01CE655C LDP X24, X23, [X31 + 0x40]
	0x01CE6560 LDP X30, X25, [X31 + 0x30]
	0x01CE6564 LDP D9, D8, [X31 + 0x20]
	0x01CE6568 LDP D11, D10, [X31 + 0x10]
	0x01CE656C ADD X31, X31, 0x70
	0x01CE6570 RET
	0x01CE6574 BL 0x1B6EA1C
	0x01CE6578 BL 0x1B6EA24
	0x01CE657C STP D13, D12, [X31 - 0x60]!
	0x01CE6580 STP D11, D10, [X31 + 0x10]
	0x01CE6584 STP D9, D8, [X31 + 0x20]
	0x01CE6588 STR X30, [X31 + 0x30]
	0x01CE658C STP X22, X21, [X31 + 0x40]
	0x01CE6590 STP X20, X19, [X31 + 0x50]
	0x01CE6594 ADRP X21, 0x253D000
	0x01CE6598 ADRP X22, 0x2267000
	0x01CE659C LDRB W8, [X21 + 0x666]
	0x01CE65A0 LDR X22, [X22 + 0x478]
	0x01CE65A4 MOV W20, W1
	0x01CE65A8 MOV X19, X0
	0x01CE65AC TBNZ X8, 0x0, 0x1CE65D0
	0x01CE65B0 ADRP X0, 0x226A000
	0x01CE65B4 LDR X0, [X0 + 0x250]
	0x01CE65B8 BL 0x1B6E7F0
	0x01CE65BC ADRP X0, 0x2267000
	0x01CE65C0 LDR X0, [X0 + 0x478]
	0x01CE65C4 BL 0x1B6E7F0
	0x01CE65C8 MOVZ W8, 0x1
	0x01CE65CC STRB W8, [X21 + 0x666]
	0x01CE65D0 LDR X0, [X22]
	0x01CE65D4 LDR X21, [X19 + 0x130]
	0x01CE65D8 LDR W8, [X0 + 0xE0]
	0x01CE65DC CBNZ W8, 0x1CE65E4
	0x01CE65E0 BL 0x1B6E8F8
	0x01CE65E4 MOV X0, X21
	0x01CE65E8 MOV X1, X31
	0x01CE65EC MOV X2, X31
	0x01CE65F0 BL 0x3A9D6EC
	0x01CE65F4 TBZ X0, 0x0, 0x1CE663C
	0x01CE65F8 LDR X8, [X19 + 0x130]
	0x01CE65FC CBZ X8, 0x1CE6714
	0x01CE6600 LDP S8, S9, [X8 + 0x28]
	0x01CE6604 LDR V10, [X8 + 0x30]
	0x01CE6608 TBNZ X20, 0x0, 0x1CE665C
	0x01CE660C LDR X0, [X22]
	0x01CE6610 LDR X20, [X19 + 0x138]
	0x01CE6614 LDR W8, [X0 + 0xE0]
	0x01CE6618 CBNZ W8, 0x1CE6620
	0x01CE661C BL 0x1B6E8F8
	0x01CE6620 MOV X0, X20
	0x01CE6624 MOV X1, X31
	0x01CE6628 MOV X2, X31
	0x01CE662C BL 0x3A9D6EC
	0x01CE6630 TBZ X0, 0x0, 0x1CE6664
	0x01CE6634 LDR X0, [X19 + 0x138]
	0x01CE6638 B 0x1CE667C
	0x01CE663C LDR X0, [X19 + 0xD0]
	0x01CE6640 CBZ X0, 0x1CE6714
	0x01CE6644 MOV X1, X31
	0x01CE6648 BL 0x3AA7658
	0x01CE664C MOV V8.16B, V0.16B
	0x01CE6650 MOV V9.16B, V1.16B
	0x01CE6654 MOV V10.16B, V2.16B
	0x01CE6658 TBZ X20, 0x0, 0x1CE660C
	0x01CE665C MOV X0, X19
	0x01CE6660 BL 0x1CE5DC4
	0x01CE6664 LDR X0, [X19 + 0xD0]
	0x01CE6668 CBZ X0, 0x1CE6714
	0x01CE666C MOV X1, X31
	0x01CE6670 BL 0x3AA7658
	0x01CE6674 MOV X0, X19
	0x01CE6678 BL 0x1CE615C
	0x01CE667C STR X0, [X19 + 0x130]
	0x01CE6680 CBZ X0, 0x1CE6714
	0x01CE6684 LDP S11, S12, [X0 + 0x28]
	0x01CE6688 LDR V13, [X0 + 0x30]
	0x01CE668C MOV X0, X19
	0x01CE6690 BL 0x1CE448C
	0x01CE6694 MOV V3.16B, V0.16B
	0x01CE6698 MOV X0, X19
	0x01CE669C MOV V0.16B, V11.16B
	0x01CE66A0 MOV V1.16B, V12.16B
	0x01CE66A4 MOV V2.16B, V13.16B
	0x01CE66A8 BL 0x1CE636C
	0x01CE66AC LDR X8, [X19 + 0x128]
	0x01CE66B0 CBZ X8, 0x1CE6714
	0x01CE66B4 LDR W8, [X8 + 0x18]
	0x01CE66B8 CBNZ W8, 0x1CE66C4
	0x01CE66BC MOV X0, X19
	0x01CE66C0 BL 0x1CE5DC4
	0x01CE66C4 MOV X0, X19
	0x01CE66C8 MOV V0.16B, V8.16B
	0x01CE66CC MOV V1.16B, V9.16B
	0x01CE66D0 MOV V2.16B, V10.16B

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x253E000
	006 Move W8, [X20+1631]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {26}
	012 Move X0, 0x2268000
	013 Move X0, [X0+1576]
	014 Call 0x1B6F7F0
	015 Move X0, 0x226B000
	016 Move X0, [X0+408]
	017 Call 0x1B6F7F0
	018 Move X0, 0x226B000
	019 Move X0, [X0+536]
	020 Call 0x1B6F7F0
	021 Move X0, 0x226B000
	022 Move X0, [X0+544]
	023 Call 0x1B6F7F0
	024 Move W8, 1
	025 Move [X20+1631], W8
	026 Move W8, [X19+368]
	027 Compare W8, 0
	028 JumpIfNotEqual {145}
	029 Move X0, [X19+64]
	030 Compare X0, 0
	031 JumpIfEqual {97}
	032 Move W8, [X0+96]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 2
	035 Compare TEMP, 2
	036 JumpIfEqual {97}
	037 Move X1, X31
	038 Call NetworkObject.get_HasStateAuthority, X0
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {97}
	043 Move X0, X19
	044 Move W1, W31
	045 Call MobController.set_isDie, X0, X1
	046 Move X8, [X19+184]
	047 Compare X8, 0
	048 JumpIfEqual {150}
	049 Move W1, [X8+32]
	050 Move X0, X19
	051 Call MobController.set_health, X0, X1
	052 Move S0, W31
	053 Move X0, X19
	054 Call MobController.set_angerMeter, X0, V0
	055 Move X8, [X19+184]
	056 Compare X8, 0
	057 JumpIfEqual {150}
	058 Move X8, [X8+48]
	059 Compare X8, 0
	060 JumpIfEqual {150}
	061 Move W9, [X8+24]
	062 Compare W9, 0
	063 JumpIfEqual {151}
	064 Move V0, [X8+32]
	065 Move X0, X19
	066 Call MobController.set_navAgentSpeed, X0, V0
	067 Move X8, [X19+184]
	068 Compare X8, 0
	069 JumpIfEqual {150}
	070 Move V0, [X8+64]
	071 Move X0, X19
	072 Call MobController.set_navAgentAngularSpeed, X0, V0
	073 Move X8, [X19+184]
	074 Compare X8, 0
	075 JumpIfEqual {150}
	076 Move X8, [X8+88]
	077 Compare X8, 0
	078 JumpIfEqual {150}
	079 Move W9, [X8+24]
	080 Compare W9, 0
	081 JumpIfEqual {151}
	082 Move V0, [X8+32]
	083 Move X0, X19
	084 Call MobController.set_searchPrecision, X0, V0
	085 Move X8, [X19+184]
	086 Compare X8, 0
	087 JumpIfEqual {150}
	088 Move X8, [X8+96]
	089 Compare X8, 0
	090 JumpIfEqual {150}
	091 Move W9, [X8+24]
	092 Compare W9, 0
	093 JumpIfEqual {151}
	094 Move V0, [X8+32]
	095 Move X0, X19
	096 Call MobController.set_searchWidth, X0, V0
	097 Move X0, X19
	098 Call MobController.InitializeNavMeshAgent, X0
	099 Move X0, X19
	100 Call MobController.ResetNavMeshAgent, X0
	101 Move X0, [X19+192]
	102 Compare X0, 0
	103 JumpIfEqual {150}
	104 Move X8, [X0]
	105 Move X1, X19
	106 Move X9, [X8+392]
	107 Move X2, [X8+400]
	108 NotImplemented "Instruction BLR not yet implemented."
	109 Add X8, X31, 8
	110 Move X0, X19
	111 Call MobController.get_navZone, X0
	112 Move X8, [X31+16]
	113 Compare X8, 0
	114 JumpIfEqual {150}
	115 Move X8, [X8+24]
	116 Compare X8, 0
	117 JumpIfNotEqual {138}
	118 Move X8, 0x2268000
	119 Move X8, [X8+1576]
	120 Move X0, [X8]
	121 Move W8, [X0+224]
	122 Compare W8, 0
	123 JumpIfNotEqual {125}
	124 Call 0x1B6F8F8
	125 Move X8, 0x226B000
	126 Move X9, 0x226B000
	127 Move X10, 0x226B000
	128 Move X8, [X8+544]
	129 Move X9, [X9+408]
	130 Move X10, [X10+536]
	131 Move W4, 214
	132 Move X0, [X8]
	133 Move X2, [X9]
	134 Move X3, [X10]
	135 Move X1, X31
	136 Move X5, X31
	137 Call Log.Error, X0, X1, X2, X3, X4
	138 Move X8, [X19]
	139 Move X0, X19
	140 Move X9, [X8+728]
	141 Move X1, [X8+736]
	142 NotImplemented "Instruction BLR not yet implemented."
	143 Move W8, 1
	144 Move [X19+368], W8
	145 Move X20, [X31+48]
	146 Move X19, [X31+56]
	147 Move X30, [X31+32]
	148 Add X31, X31, 64
	149 Return 
	150 Call 0x1B6FA1C
	151 Call 0x1B6FA24

Method: System.Void Respawn(UnityEngine.Vector3 position)

Disassembly:
	0x01CE6868 LDR X2, [X8 + 0x310]
	0x01CE686C BLR X9
	0x01CE6870 LDR X8, [X19 + 0x130]
	0x01CE6874 STRB W31, [X19 + 0xB5]
	0x01CE6878 CBZ X8, 0x1CE699C
	0x01CE687C LDR X0, [X19 + 0xD0]
	0x01CE6880 CBZ X0, 0x1CE699C
	0x01CE6884 LDP S11, S12, [X8 + 0x28]
	0x01CE6888 LDR V13, [X8 + 0x30]
	0x01CE688C MOV X1, X31
	0x01CE6890 BL 0x3AA7658
	0x01CE6894 ADRP X20, 0x253D000
	0x01CE6898 LDRB W8, [X20 + 0x506]
	0x01CE689C MOV V8.16B, V0.16B
	0x01CE68A0 MOV V9.16B, V1.16B
	0x01CE68A4 MOV V10.16B, V2.16B
	0x01CE68A8 CBNZ W8, 0x1CE68C0
	0x01CE68AC ADRP X0, 0x2267000
	0x01CE68B0 LDR X0, [X0 + 0x488]
	0x01CE68B4 BL 0x1B6E7F0
	0x01CE68B8 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X1, X31
	007 Move V8, V2
	008 Move V9, V1
	009 Move V10, V0
	010 Move X19, X0
	011 Call Component.get_transform, X0
	012 Compare X0, 0
	013 JumpIfEqual {27}
	014 Move V0, V10
	015 Move V1, V9
	016 Move V2, V8
	017 Move X1, X31
	018 Call Transform.set_position, X0, X1
	019 Move X0, X19
	020 Move X30, [X31+32]
	021 Move X19, [X31+40]
	022 Move D9, [X31+16]
	023 Move D8, [X31+24]
	024 Move V10, [X31+48]
	025 Call MobController.ResetNavMeshAgent, X0
	026 Return 
	027 Call 0x1B6FA1C

Method: System.Void InitializeNavMeshAgent()

Disassembly:
	0x01CE66D4 BL 0x1CE615C
	0x01CE66D8 LDR X8, [X19 + 0x130]
	0x01CE66DC STR X0, [X19 + 0x138]
	0x01CE66E0 CBZ X8, 0x1CE6714
	0x01CE66E4 LDR X0, [X19 + 0xC8]
	0x01CE66E8 CBZ X0, 0x1CE6714
	0x01CE66EC LDP S1, S2, [X8 + 0x2C]
	0x01CE66F0 LDR V0, [X8 + 0x28]
	0x01CE66F4 LDP X20, X19, [X31 + 0x50]
	0x01CE66F8 LDP X22, X21, [X31 + 0x40]
	0x01CE66FC LDR X30, [X31 + 0x30]
	0x01CE6700 LDP D9, D8, [X31 + 0x20]
	0x01CE6704 LDP D11, D10, [X31 + 0x10]
	0x01CE6708 MOV X1, X31
	0x01CE670C LDP D13, D12, [X31], #0x60
	0x01CE6710 B 0x3A4A810
	0x01CE6714 BL 0x1B6EA1C
	0x01CE6718 STR D10, [X31 - 0x30]!
	0x01CE671C STP D9, D8, [X31 + 0x10]
	0x01CE6720 STP X30, X19, [X31 + 0x20]
	0x01CE6724 MOV V8.16B, V2.16B
	0x01CE6728 MOV V9.16B, V1.16B
	0x01CE672C MOV V10.16B, V0.16B
	0x01CE6730 MOV X19, X0
	0x01CE6734 BL 0x1CE5DC4
	0x01CE6738 MOV X0, X19
	0x01CE673C MOV V0.16B, V10.16B
	0x01CE6740 MOV V1.16B, V9.16B
	0x01CE6744 MOV V2.16B, V8.16B
	0x01CE6748 BL 0x1CE615C
	0x01CE674C STR X0, [X19 + 0x130]
	0x01CE6750 CBZ X0, 0x1CE67C4
	0x01CE6754 LDP S8, S9, [X0 + 0x28]
	0x01CE6758 LDR V10, [X0 + 0x30]
	0x01CE675C MOV X0, X19
	0x01CE6760 BL 0x1CE448C
	0x01CE6764 MOV V3.16B, V0.16B
	0x01CE6768 MOV X0, X19
	0x01CE676C MOV V0.16B, V8.16B
	0x01CE6770 MOV V1.16B, V9.16B
	0x01CE6774 MOV V2.16B, V10.16B
	0x01CE6778 BL 0x1CE636C
	0x01CE677C LDR X8, [X19 + 0x130]
	0x01CE6780 CBZ X8, 0x1CE67C4
	0x01CE6784 LDP S0, S1, [X8 + 0x28]
	0x01CE6788 LDR V2, [X8 + 0x30]
	0x01CE678C MOV X0, X19
	0x01CE6790 BL 0x1CE615C
	0x01CE6794 LDR X8, [X19 + 0x130]
	0x01CE6798 STR X0, [X19 + 0x138]
	0x01CE679C CBZ X8, 0x1CE67C4
	0x01CE67A0 LDR X0, [X19 + 0xC8]
	0x01CE67A4 CBZ X0, 0x1CE67C4
	0x01CE67A8 LDP S1, S2, [X8 + 0x2C]
	0x01CE67AC LDR V0, [X8 + 0x28]
	0x01CE67B0 LDP X30, X19, [X31 + 0x20]
	0x01CE67B4 LDP D9, D8, [X31 + 0x10]
	0x01CE67B8 MOV X1, X31
	0x01CE67BC LDR V10, [X31], #0x30
	0x01CE67C0 B 0x3A4A810
	0x01CE67C4 BL 0x1B6EA1C
	0x01CE67C8 STP D13, D12, [X31 - 0x50]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+64]
	006 Move X20, [X19+200]
	007 Compare X0, 0
	008 JumpIfEqual {17}
	009 Move W8, [X0+96]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 2
	012 Compare TEMP, 2
	013 JumpIfEqual {16}
	014 Move X1, X31
	015 Call NetworkObject.get_HasStateAuthority, X0
	016 Move W0, W31
	017 Compare X20, 0
	018 JumpIfEqual {79}
	019 And W1, W0, 1
	020 Move X0, X20
	021 Move X2, X31
	022 Call Behaviour.set_enabled, X0, X1
	023 Move X0, [X19+64]
	024 Move X20, [X19+200]
	025 Compare X0, 0
	026 JumpIfEqual {35}
	027 Move W8, [X0+96]
	028 Move TEMP, X8
	029 And TEMP, TEMP, 2
	030 Compare TEMP, 2
	031 JumpIfEqual {34}
	032 Move X1, X31
	033 Call NetworkObject.get_HasStateAuthority, X0
	034 Move W0, W31
	035 Compare X20, 0
	036 JumpIfEqual {79}
	037 And W1, W0, 1
	038 Move X0, X20
	039 Move X2, X31
	040 Call NavMeshAgent.set_updatePosition, X0, X1
	041 Move X0, [X19+64]
	042 Move X20, [X19+200]
	043 Compare X0, 0
	044 JumpIfEqual {53}
	045 Move W8, [X0+96]
	046 Move TEMP, X8
	047 And TEMP, TEMP, 2
	048 Compare TEMP, 2
	049 JumpIfEqual {52}
	050 Move X1, X31
	051 Call NetworkObject.get_HasStateAuthority, X0
	052 Move W0, W31
	053 Compare X20, 0
	054 JumpIfEqual {79}
	055 And W1, W0, 1
	056 Move X0, X20
	057 Move X2, X31
	058 Call NavMeshAgent.set_updateRotation, X0, X1
	059 Move X20, [X19+200]
	060 Move X0, X19
	061 Call MobController.get_navAgentSpeed, X0
	062 Compare X20, 0
	063 JumpIfEqual {79}
	064 Move X0, X20
	065 Move X1, X31
	066 Call NavMeshAgent.set_speed, X0, V0
	067 Move X20, [X19+200]
	068 Move X0, X19
	069 Call MobController.get_navAgentAngularSpeed, X0
	070 Compare X20, 0
	071 JumpIfEqual {79}
	072 Move X0, X20
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X1, X31
	076 Move X30, [X31+32]
	077 Call NavMeshAgent.set_angularSpeed, X0, V0
	078 Return 
	079 Call 0x1B6FA1C

Method: System.Void ResetNavMeshAgent()

Disassembly:
	0x01CE67CC STP D11, D10, [X31 + 0x10]
	0x01CE67D0 STP D9, D8, [X31 + 0x20]
	0x01CE67D4 STP X30, X21, [X31 + 0x30]
	0x01CE67D8 STP X20, X19, [X31 + 0x40]
	0x01CE67DC ADRP X20, 0x253D000
	0x01CE67E0 ADRP X21, 0x2267000
	0x01CE67E4 LDRB W8, [X20 + 0x667]
	0x01CE67E8 LDR X21, [X21 + 0x478]
	0x01CE67EC MOV X19, X0
	0x01CE67F0 TBNZ X8, 0x0, 0x1CE6808
	0x01CE67F4 ADRP X0, 0x2267000
	0x01CE67F8 LDR X0, [X0 + 0x478]
	0x01CE67FC BL 0x1B6E7F0
	0x01CE6800 MOVZ W8, 0x1
	0x01CE6804 STRB W8, [X20 + 0x667]
	0x01CE6808 LDR X0, [X21]
	0x01CE680C LDR X20, [X19 + 0x130]
	0x01CE6810 LDR W8, [X0 + 0xE0]
	0x01CE6814 CBNZ W8, 0x1CE681C
	0x01CE6818 BL 0x1B6E8F8
	0x01CE681C MOV X0, X20
	0x01CE6820 MOV X1, X31
	0x01CE6824 MOV X2, X31
	0x01CE6828 BL 0x3AA0AF0
	0x01CE682C TBNZ X0, 0x0, 0x1CE6858
	0x01CE6830 LDR X0, [X21]
	0x01CE6834 LDR X20, [X19 + 0x138]
	0x01CE6838 LDR W8, [X0 + 0xE0]
	0x01CE683C CBNZ W8, 0x1CE6844
	0x01CE6840 BL 0x1B6E8F8
	0x01CE6844 MOV X0, X20
	0x01CE6848 MOV X1, X31
	0x01CE684C MOV X2, X31
	0x01CE6850 BL 0x3AA0AF0
	0x01CE6854 TBZ X0, 0x0, 0x1CE6870
	0x01CE6858 LDR X8, [X19]
	0x01CE685C MOVZ W1, 0x1
	0x01CE6860 MOV X0, X19
	0x01CE6864 LDR X9, [X8 + 0x308]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, [X0+200]
	005 Move X1, X31
	006 Move X19, X0
	007 Call Component.get_transform, X0
	008 Compare X0, 0
	009 JumpIfEqual {48}
	010 Move X1, X31
	011 Call Transform.get_position, X0
	012 Compare X20, 0
	013 JumpIfEqual {48}
	014 Move X0, X20
	015 Move X1, X31
	016 Call NavMeshAgent.Warp, X0, X1
	017 Move X0, [X19+200]
	018 Compare X0, 0
	019 JumpIfEqual {48}
	020 Move X1, X31
	021 Call NavMeshAgent.ResetPath, X0
	022 Move X20, 0x253E000
	023 Move W8, [X20+1087]
	024 Move X19, [X19+200]
	025 Compare W8, 0
	026 JumpIfNotEqual {32}
	027 Move X0, 0x2268000
	028 Move X0, [X0+1152]
	029 Call 0x1B6F7F0
	030 Move W8, 1
	031 Move [X20+1087], W8
	032 Compare X19, 0
	033 JumpIfEqual {48}
	034 Move X8, 0x2268000
	035 Move X8, [X8+1152]
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X1, X31
	040 Move X8, [X8]
	041 Move X8, [X8+184]
	042 Move S1, [X8+4]
	043 Move S2, [X8+8]
	044 Move V0, [X8]
	045 Move X30, [X31+32]
	046 Call NavMeshAgent.set_velocity, X0, X1
	047 Return 
	048 Call 0x1B6FA1C

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01CE68BC STRB W8, [X20 + 0x506]
	0x01CE68C0 ADRP X8, 0x2267000
	0x01CE68C4 LDR X8, [X8 + 0x488]
	0x01CE68C8 FSUB S11, S11, S8
	0x01CE68CC FSUB S9, S12, S9
	0x01CE68D0 FSUB S8, S13, S10
	0x01CE68D4 LDR X0, [X8]
	0x01CE68D8 LDR W8, [X0 + 0xE0]
	0x01CE68DC CBNZ W8, 0x1CE68E4
	0x01CE68E0 BL 0x1B6E8F8
	0x01CE68E4 FMUL S0, S11, S11
	0x01CE68E8 FMUL S1, S9, S9
	0x01CE68EC FADD S0, S0, S1
	0x01CE68F0 FMUL S1, S8, S8
	0x01CE68F4 FADD S0, S1, S0
	0x01CE68F8 MOV X0, X19
	0x01CE68FC FSQRT S8, S0
	0x01CE6900 BL 0x1CE448C
	0x01CE6904 FCMP S8, S0
	0x01CE6908 B.PL 0x1CE6984
	0x01CE690C LDRB W8, [X19 + 0xB4]
	0x01CE6910 CBNZ W8, 0x1CE691C
	0x01CE6914 MOVZ W8, 0x101
	0x01CE6918 STRH W8, [X19 + 0xB4]
	0x01CE691C LDR X0, [X19 + 0x38]
	0x01CE6920 CBZ X0, 0x1CE699C
	0x01CE6924 LDR V8, [X19 + 0xB0]
	0x01CE6928 MOV X1, X31
	0x01CE692C BL 0x1D87058
	0x01CE6930 LDR X8, [X19 + 0xB8]
	0x01CE6934 FADD S0, S8, S0
	0x01CE6938 STR S0, [X19 + 0xB0]
	0x01CE693C CBZ X8, 0x1CE699C
	0x01CE6940 LDR V1, [X8 + 0x44]
	0x01CE6944 FCMP S0, S1
	0x01CE6948 B.LE 0x1CE6984
	0x01CE694C LDR X8, [X19]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move [X31+8], W31
	005 Move X19, X0
	006 Move X0, [X0+64]
	007 Compare X0, 0
	008 JumpIfEqual {40}
	009 Move W8, [X0+96]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 2
	012 Compare TEMP, 2
	013 JumpIfEqual {40}
	014 Move X1, X31
	015 Call NetworkObject.get_HasStateAuthority, X0
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfNotEqual {40}
	020 Move X0, X19
	021 Call MobController.get_isDie, X0
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {40}
	026 Move X0, X19
	027 Call MobController.get__timerRevive, X0
	028 Move [X31+8], W0
	029 Move X1, [X19+56]
	030 Add X0, X31, 8
	031 Move X2, X31
	032 Call TickTimer.Expired, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {40}
	037 Move X0, X19
	038 Move W1, W31
	039 Call MobController.set_isDie, X0, X1
	040 Move X0, X19
	041 Call MobController.get__updateValid, X0
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {55}
	046 Move X0, X31
	047 Call GameManager.get_isDebug
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {55}
	052 Move X0, X31
	053 Call Time.get_realtimeSinceStartup
	054 Move [X19+352], S0
	055 Move X30, [X31+16]
	056 Move X19, [X31+24]
	057 Add X31, X31, 32
	058 Return 

Method: System.Void StateAuthorityChanged()

Disassembly:
	0x01CE6958 STRH W9, [X19 + 0xB4]
	0x01CE695C LDR X3, [X8 + 0x308]
	0x01CE6960 LDR X2, [X8 + 0x310]
	0x01CE6964 MOV X0, X19
	0x01CE6968 LDP X20, X19, [X31 + 0x40]
	0x01CE696C LDP X30, X21, [X31 + 0x30]
	0x01CE6970 LDP D9, D8, [X31 + 0x20]
	0x01CE6974 LDP D11, D10, [X31 + 0x10]
	0x01CE6978 MOV W1, W31
	0x01CE697C LDP D13, D12, [X31], #0x50
	0x01CE6980 BR X3
	0x01CE6984 LDP X20, X19, [X31 + 0x40]
	0x01CE6988 LDP X30, X21, [X31 + 0x30]
	0x01CE698C LDP D9, D8, [X31 + 0x20]
	0x01CE6990 LDP D11, D10, [X31 + 0x10]
	0x01CE6994 LDP D13, D12, [X31], #0x50
	0x01CE6998 RET
	0x01CE699C BL 0x1B6EA1C
	0x01CE69A0 STR X30, [X31 - 0x30]!
	0x01CE69A4 STP X22, X21, [X31 + 0x10]
	0x01CE69A8 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+56]
	004 Compare X8, 0
	005 JumpIfEqual {33}
	006 Move W8, [X8+384]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X19, X0
	009 Move X0, [X0+64]
	010 Compare X0, 0
	011 JumpIfEqual {25}
	012 Move W8, [X0+96]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 2
	015 Compare TEMP, 2
	016 JumpIfEqual {25}
	017 Move X1, X31
	018 Call NetworkObject.get_HasStateAuthority, X0
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {25}
	023 Move [X19+304], X31
	024 Move [X19+312], X31
	025 Move X0, X19
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Call MobController.InitializeNavMeshAgent, X0
	029 Return 
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Return 
	033 Call 0x1B6FA1C

Method: System.Void SetupNavMeshValues(System.Boolean isStopped, System.Single speed, System.Single searchPrecision, System.Single searchWidth)

Disassembly:
	0x01CE69AC ADRP X22, 0x253D000
	0x01CE69B0 ADRP X21, 0x2267000
	0x01CE69B4 LDRB W8, [X22 + 0x668]
	0x01CE69B8 LDR X21, [X21 + 0x478]
	0x01CE69BC MOV X20, X1
	0x01CE69C0 MOV X19, X0
	0x01CE69C4 TBNZ X8, 0x0, 0x1CE69DC
	0x01CE69C8 ADRP X0, 0x2267000
	0x01CE69CC LDR X0, [X0 + 0x478]
	0x01CE69D0 BL 0x1B6E7F0
	0x01CE69D4 MOVZ W8, 0x1
	0x01CE69D8 STRB W8, [X22 + 0x668]
	0x01CE69DC STR X20, [X19 + 0x140]
	0x01CE69E0 LDR X0, [X21]
	0x01CE69E4 LDR W8, [X0 + 0xE0]
	0x01CE69E8 CBNZ W8, 0x1CE69F0
	0x01CE69EC BL 0x1B6E8F8
	0x01CE69F0 MOV X0, X20
	0x01CE69F4 MOV X1, X31
	0x01CE69F8 MOV X2, X31
	0x01CE69FC BL 0x3A9D6EC
	0x01CE6A00 TBZ X0, 0x0, 0x1CE6A20
	0x01CE6A04 CBZ X20, 0x1CE6A40
	0x01CE6A08 LDR X8, [X20 + 0x40]
	0x01CE6A0C CBZ X8, 0x1CE6A40
	0x01CE6A10 LDR X8, [X8 + 0x20]
	0x01CE6A14 CBZ X8, 0x1CE6A28
	0x01CE6A18 LDR W1, [X8]
	0x01CE6A1C B 0x1CE6A2C
	0x01CE6A20 MOVN W1, 0x0
	0x01CE6A24 B 0x1CE6A2C
	0x01CE6A28 MOV W1, W31
	0x01CE6A2C MOV X0, X19
	0x01CE6A30 LDP X20, X19, [X31 + 0x20]
	0x01CE6A34 LDP X22, X21, [X31 + 0x10]
	0x01CE6A38 LDR X30, [X31], #0x30
	0x01CE6A3C B 0x1CE466C
	0x01CE6A40 BL 0x1B6EA1C
	0x01CE6A44 STP X30, X23, [X31 - 0x30]!
	0x01CE6A48 STP X22, X21, [X31 + 0x10]
	0x01CE6A4C STP X20, X19, [X31 + 0x20]
	0x01CE6A50 ADRP X20, 0x253D000
	0x01CE6A54 ADRP X23, 0x2267000

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Move X0, [X0+200]
	009 Compare X0, 0
	010 JumpIfEqual {51}
	011 Move W20, W1
	012 And W1, W1, 1
	013 Move X2, X31
	014 Move V8, V2
	015 Move V9, V1
	016 Move V10, V0
	017 Call NavMeshAgent.set_isStopped, X0, X1
	018 Move X0, [X19+200]
	019 Compare X0, 0
	020 JumpIfEqual {51}
	021 Xor W8, W20, 1
	022 And W20, W8, 1
	023 Move W1, W20
	024 Move X2, X31
	025 Call NavMeshAgent.set_updatePosition, X0, X1
	026 Move X0, [X19+200]
	027 Compare X0, 0
	028 JumpIfEqual {51}
	029 Move W1, W20
	030 Move X2, X31
	031 Call NavMeshAgent.set_updateRotation, X0, X1
	032 Move X8, [X19]
	033 Move X0, X19
	034 Move V0, V10
	035 Move X9, [X8+696]
	036 Move X1, [X8+704]
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X0, X19
	039 Move V0, V9
	040 Call MobController.set_searchPrecision, X0, V0
	041 Move X0, X19
	042 Move V0, V8
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X30, [X31+24]
	046 Move D9, [X31+8]
	047 Move D8, [X31+16]
	048 Move V10, [X31+48]
	049 Call MobController.set_searchWidth, X0, V0
	050 Return 
	051 Call 0x1B6FA1C

Method: System.Void SetNavAgentSpeed(System.Single speed)

Disassembly:
	0x01CE6A58 LDRB W8, [X20 + 0x669]
	0x01CE6A5C LDR X23, [X23 + 0x478]
	0x01CE6A60 MOV X19, X0
	0x01CE6A64 TBNZ X8, 0x0, 0x1CE6AAC
	0x01CE6A68 ADRP X0, 0x2269000
	0x01CE6A6C LDR X0, [X0 + 0xF20]
	0x01CE6A70 BL 0x1B6E7F0
	0x01CE6A74 ADRP X0, 0x2269000
	0x01CE6A78 LDR X0, [X0 + 0xE30]
	0x01CE6A7C BL 0x1B6E7F0
	0x01CE6A80 ADRP X0, 0x2269000
	0x01CE6A84 LDR X0, [X0 + 0xDF0]
	0x01CE6A88 BL 0x1B6E7F0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move V8, V0
	005 Move X19, X0
	006 Call MobController.set_navAgentSpeed, X0, V0
	007 Move X0, [X19+200]
	008 Compare X0, 0
	009 JumpIfEqual {17}
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Move V0, V8
	013 Move X1, X31
	014 Move V8, [X31+32]
	015 Call NavMeshAgent.set_speed, X0, V0
	016 Return 
	017 Call 0x1B6FA1C

Method: System.Void SetNavAgentAngularSpeed(System.Single speed)

Disassembly:
	0x01CE6A8C ADRP X0, 0x2268000
	0x01CE6A90 LDR X0, [X0 + 0x2A8]
	0x01CE6A94 BL 0x1B6E7F0
	0x01CE6A98 ADRP X0, 0x2267000
	0x01CE6A9C LDR X0, [X0 + 0x478]
	0x01CE6AA0 BL 0x1B6E7F0
	0x01CE6AA4 MOVZ W8, 0x1
	0x01CE6AA8 STRB W8, [X20 + 0x669]
	0x01CE6AAC LDR X0, [X23]
	0x01CE6AB0 LDR X21, [X19 + 0x140]
	0x01CE6AB4 LDR W8, [X0 + 0xE0]
	0x01CE6AB8 CBNZ W8, 0x1CE6AC0
	0x01CE6ABC BL 0x1B6E8F8

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move V8, V0
	005 Move X19, X0
	006 Call MobController.set_navAgentAngularSpeed, X0, V0
	007 Move X0, [X19+200]
	008 Compare X0, 0
	009 JumpIfEqual {17}
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Move V0, V8
	013 Move X1, X31
	014 Move V8, [X31+32]
	015 Call NavMeshAgent.set_angularSpeed, X0, V0
	016 Return 
	017 Call 0x1B6FA1C

Method: System.Void HandleIsDieChanged()

Disassembly:
	0x01CE6AC0 MOV X0, X21
	0x01CE6AC4 MOV X1, X31
	0x01CE6AC8 MOV X2, X31
	0x01CE6ACC ADD X20, X19, 0x140
	0x01CE6AD0 BL 0x3A9D6EC
	0x01CE6AD4 TBZ X0, 0x0, 0x1CE6B04
	0x01CE6AD8 LDR X0, [X20]
	0x01CE6ADC CBZ X0, 0x1CE6CA8
	0x01CE6AE0 MOV X1, X31
	0x01CE6AE4 BL 0x1CB47E0
	0x01CE6AE8 TBZ X0, 0x0, 0x1CE6B04
	0x01CE6AEC LDR X8, [X19]
	0x01CE6AF0 MOV X0, X19
	0x01CE6AF4 MOV X1, X31
	0x01CE6AF8 LDR X9, [X8 + 0x338]
	0x01CE6AFC LDR X2, [X8 + 0x340]
	0x01CE6B00 BLR X9
	0x01CE6B04 LDR X0, [X23]
	0x01CE6B08 LDR X21, [X20]
	0x01CE6B0C LDR W8, [X0 + 0xE0]
	0x01CE6B10 CBNZ W8, 0x1CE6B18
	0x01CE6B14 BL 0x1B6E8F8
	0x01CE6B18 MOV X0, X21
	0x01CE6B1C MOV X1, X31
	0x01CE6B20 MOV X2, X31
	0x01CE6B24 BL 0x3AA0AF0
	0x01CE6B28 TBZ X0, 0x0, 0x1CE6B84
	0x01CE6B2C MOV X0, X19
	0x01CE6B30 BL 0x1CE460C
	0x01CE6B34 CMP W0, 0x1
	0x01CE6B38 B.LT 0x1CE6B84
	0x01CE6B3C MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call MobController.get_isDie, X0
	006 Move TEMP, X0
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {13}
	010 Move X8, [X19]
	011 Move X9, [X8+744]
	012 Move X1, [X8+752]
	013 Move W8, [X19+368]
	014 Compare W8, 0
	015 JumpIfEqual {21}
	016 Move X8, [X19]
	017 Move X9, [X8+760]
	018 Move X1, [X8+768]
	019 Move X0, X19
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X0, [X19+192]
	022 Compare X0, 0
	023 JumpIfEqual {40}
	024 Move X1, X31
	025 Call Component.get_gameObject, X0
	026 Move X20, X0
	027 Move X0, X19
	028 Call MobController.get_isDie, X0
	029 Compare X20, 0
	030 JumpIfEqual {40}
	031 NotImplemented "Instruction ORN not yet implemented."
	032 Move X0, X20
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 And W1, W8, 1
	036 Move X2, X31
	037 Move X30, [X31+32]
	038 Call GameObject.SetActive, X0, X1
	039 Return 
	040 Call 0x1B6FA1C

Method: System.Void SetDie(System.Boolean isDie)

Disassembly:
	0x01CE6950 MOVZ W9, 0x100
	0x01CE6954 STR W31, [X19 + 0xB0]

ISIL:
	001 And W1, W1, 1
	002 Call MobController.set_isDie, X0, X1
	003 Return 

Method: System.Void HandleDie()

Disassembly:
	0x01CE6B40 BL 0x1CE460C
	0x01CE6B44 ADRP X8, 0x2268000
	0x01CE6B48 LDR X8, [X8 + 0x2A8]
	0x01CE6B4C MOV W21, W0
	0x01CE6B50 LDR X8, [X8]
	0x01CE6B54 LDR W9, [X8 + 0xE0]
	0x01CE6B58 CBNZ W9, 0x1CE6B64
	0x01CE6B5C MOV X0, X8
	0x01CE6B60 BL 0x1B6E8F8
	0x01CE6B64 MOV W0, W21
	0x01CE6B68 MOV X1, X20
	0x01CE6B6C MOV X2, X31
	0x01CE6B70 BL 0x1CB64B0
	0x01CE6B74 TBNZ X0, 0x0, 0x1CE6B84
	0x01CE6B78 MOVN W1, 0x0
	0x01CE6B7C MOV X0, X19
	0x01CE6B80 BL 0x1CE466C
	0x01CE6B84 MOV X0, X19
	0x01CE6B88 BL 0x1CE6CAC
	0x01CE6B8C LDR X8, [X23]
	0x01CE6B90 LDR X22, [X19 + 0x140]
	0x01CE6B94 MOV X21, X0
	0x01CE6B98 LDR W9, [X8 + 0xE0]
	0x01CE6B9C CBNZ W9, 0x1CE6BA8
	0x01CE6BA0 MOV X0, X8
	0x01CE6BA4 BL 0x1B6E8F8
	0x01CE6BA8 MOV X0, X22
	0x01CE6BAC MOV X1, X31
	0x01CE6BB0 MOV X2, X31
	0x01CE6BB4 BL 0x3A9D6EC
	0x01CE6BB8 TBZ X0, 0x0, 0x1CE6BEC
	0x01CE6BBC CBZ X21, 0x1CE6CA8
	0x01CE6BC0 ADRP X8, 0x2269000
	0x01CE6BC4 LDR X1, [X20]
	0x01CE6BC8 LDR X8, [X8 + 0xF20]
	0x01CE6BCC MOV X0, X21
	0x01CE6BD0 LDR X2, [X8]
	0x01CE6BD4 BL 0x2E468A0
	0x01CE6BD8 TBZ X0, 0x0, 0x1CE6BF0
	0x01CE6BDC FMOV S0, W31
	0x01CE6BE0 MOV X0, X19
	0x01CE6BE4 BL 0x1CE472C
	0x01CE6BE8 B 0x1CE6C40
	0x01CE6BEC CBZ X21, 0x1CE6CA8
	0x01CE6BF0 LDR W1, [X21 + 0x18]
	0x01CE6BF4 CMP W1, 0x1
	0x01CE6BF8 B.LT 0x1CE6C28
	0x01CE6BFC MOV W0, W31
	0x01CE6C00 MOV X2, X31
	0x01CE6C04 BL 0x3A98D10
	0x01CE6C08 ADRP X8, 0x2269000
	0x01CE6C0C LDR X8, [X8 + 0xDF0]
	0x01CE6C10 MOV W1, W0
	0x01CE6C14 MOV X0, X21
	0x01CE6C18 LDR X2, [X8]
	0x01CE6C1C BL 0x2E46254
	0x01CE6C20 MOV X1, X0
	0x01CE6C24 B 0x1CE6C2C
	0x01CE6C28 MOV X1, X31
	0x01CE6C2C LDR X8, [X19]
	0x01CE6C30 MOV X0, X19
	0x01CE6C34 LDR X9, [X8 + 0x338]
	0x01CE6C38 LDR X2, [X8 + 0x340]
	0x01CE6C3C BLR X9
	0x01CE6C40 LDR X0, [X23]
	0x01CE6C44 LDR X21, [X20]
	0x01CE6C48 LDR W8, [X0 + 0xE0]
	0x01CE6C4C CBNZ W8, 0x1CE6C54
	0x01CE6C50 BL 0x1B6E8F8
	0x01CE6C54 MOV X0, X21
	0x01CE6C58 MOV X1, X31
	0x01CE6C5C MOV X2, X31
	0x01CE6C60 BL 0x3A9D6EC
	0x01CE6C64 TBZ X0, 0x0, 0x1CE6C98
	0x01CE6C68 LDR X0, [X20]
	0x01CE6C6C CBZ X0, 0x1CE6CA8
	0x01CE6C70 MOV X1, X31
	0x01CE6C74 BL 0x3A9B084
	0x01CE6C78 CBZ X0, 0x1CE6CA8
	0x01CE6C7C MOV X1, X31
	0x01CE6C80 BL 0x3AA7658

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x253E000
	006 Move W8, [X20+1632]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2269000
	013 Move X0, [X0+3448]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1632], W8
	017 Move X0, [X19+64]
	018 Compare X0, 0
	019 JumpIfEqual {68}
	020 Move W8, [X0+96]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 2
	023 Compare TEMP, 2
	024 JumpIfEqual {68}
	025 Move X1, X31
	026 Call NetworkObject.get_HasStateAuthority, X0
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {68}
	031 Move X8, [X19+184]
	032 Compare X8, 0
	033 JumpIfEqual {107}
	034 Move X0, [X19+56]
	035 Move V0, [X8+144]
	036 Move X1, X31
	037 Call TickTimer.CreateFromSeconds, X0, V0
	038 And X1, X0, 0
	039 Move X0, X19
	040 Call MobController.set__timerRevive, X0, X1
	041 Move X0, [X19+200]
	042 Compare X0, 0
	043 JumpIfEqual {107}
	044 Move X1, X31
	045 Call NavMeshAgent.ResetPath, X0
	046 Move X21, 0x253E000
	047 Move W8, [X21+1087]
	048 Move X20, [X19+200]
	049 Compare W8, 0
	050 JumpIfNotEqual {56}
	051 Move X0, 0x2268000
	052 Move X0, [X0+1152]
	053 Call 0x1B6F7F0
	054 Move W8, 1
	055 Move [X21+1087], W8
	056 Compare X20, 0
	057 JumpIfEqual {107}
	058 Move X8, 0x2268000
	059 Move X8, [X8+1152]
	060 Move X0, X20
	061 Move X1, X31
	062 Move X8, [X8]
	063 Move X8, [X8+184]
	064 Move S1, [X8+4]
	065 Move S2, [X8+8]
	066 Move V0, [X8]
	067 Call NavMeshAgent.set_velocity, X0, X1
	068 Move X20, 0x2269000
	069 Move X20, [X20+3448]
	070 Move X0, [X20]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {76}
	074 Call 0x1B6F8F8
	075 Move X0, [X20]
	076 Move X8, [X0+184]
	077 Move X20, [X8]
	078 Compare X20, 0
	079 JumpIfEqual {90}
	080 Move X0, [X19+64]
	081 Compare X0, 0
	082 JumpIfEqual {96}
	083 Move W8, [X0+96]
	084 Move TEMP, X8
	085 And TEMP, TEMP, 2
	086 Compare TEMP, 2
	087 JumpIfEqual {95}
	088 Move X1, X31
	089 Call NetworkObject.get_HasStateAuthority, X0
	090 Move X20, [X31+16]
	091 Move X19, [X31+24]
	092 Move X30, [X31+32]
	093 Move X21, [X31+40]
	094 Return 
	095 Move W0, W31
	096 Move X8, [X20+64]
	097 Move X4, [X20+24]
	098 Move X3, [X20+40]
	099 Move X1, X19
	100 Move X20, [X31+16]
	101 Move X19, [X31+24]
	102 And W2, W0, 1
	103 Move X0, X8
	104 Move X30, [X31+32]
	105 Move X21, [X31+40]
	106 CallNoReturn X4
	107 Call 0x1B6FA1C

Method: System.Void HandleRevive()

Disassembly:
	0x01CE6C84 MOV X0, X19
	0x01CE6C88 LDP X20, X19, [X31 + 0x20]
	0x01CE6C8C LDP X22, X21, [X31 + 0x10]
	0x01CE6C90 LDP X30, X23, [X31], #0x30
	0x01CE6C94 B 0x1CE4C60
	0x01CE6C98 LDP X20, X19, [X31 + 0x20]
	0x01CE6C9C LDP X22, X21, [X31 + 0x10]
	0x01CE6CA0 LDP X30, X23, [X31], #0x30
	0x01CE6CA4 RET
	0x01CE6CA8 BL 0x1B6EA1C
	0x01CE6CAC SUB X31, X31, 0xE0
	0x01CE6CB0 STP D15, D14, [X31 + 0x40]
	0x01CE6CB4 STP D13, D12, [X31 + 0x50]
	0x01CE6CB8 STP D11, D10, [X31 + 0x60]
	0x01CE6CBC STP D9, D8, [X31 + 0x70]
	0x01CE6CC0 STP X29, X30, [X31 + 0x80]
	0x01CE6CC4 STP X28, X27, [X31 + 0x90]
	0x01CE6CC8 STP X26, X25, [X31 + 0xA0]
	0x01CE6CCC STP X24, X23, [X31 + 0xB0]
	0x01CE6CD0 STP X22, X21, [X31 + 0xC0]
	0x01CE6CD4 STP X20, X19, [X31 + 0xD0]
	0x01CE6CD8 ADRP X19, 0x253D000
	0x01CE6CDC LDRB W8, [X19 + 0x676]
	0x01CE6CE0 MOV X20, X0
	0x01CE6CE4 TBNZ X8, 0x0, 0x1CE6D5C
	0x01CE6CE8 ADRP X0, 0x2268000
	0x01CE6CEC LDR X0, [X0 + 0x808]
	0x01CE6CF0 BL 0x1B6E7F0
	0x01CE6CF4 ADRP X0, 0x226A000
	0x01CE6CF8 LDR X0, [X0 + 0x288]
	0x01CE6CFC BL 0x1B6E7F0
	0x01CE6D00 ADRP X0, 0x226A000
	0x01CE6D04 LDR X0, [X0 + 0x290]
	0x01CE6D08 BL 0x1B6E7F0
	0x01CE6D0C ADRP X0, 0x226A000
	0x01CE6D10 LDR X0, [X0 + 0x298]
	0x01CE6D14 BL 0x1B6E7F0
	0x01CE6D18 ADRP X0, 0x226A000
	0x01CE6D1C LDR X0, [X0 + 0x2A0]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move [X31+8], X31
	005 Move X19, X0
	006 Move X0, [X0+64]
	007 Compare X0, 0
	008 JumpIfEqual {52}
	009 Move W8, [X0+96]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 2
	012 Compare TEMP, 2
	013 JumpIfEqual {52}
	014 Move X1, X31
	015 Call NetworkObject.get_HasStateAuthority, X0
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfNotEqual {52}
	020 Move X0, X31
	021 Call TickTimer.get_None
	022 And X1, X0, 0
	023 Move X0, X19
	024 Call MobController.set__timerRevive, X0, X1
	025 Move X8, [X19+184]
	026 Compare X8, 0
	027 JumpIfEqual {56}
	028 Move W1, [X8+32]
	029 Move X0, X19
	030 Call MobController.set_health, X0, X1
	031 Move X8, [X19+184]
	032 Compare X8, 0
	033 JumpIfEqual {56}
	034 Move W8, [X8+140]
	035 Compare W8, 0
	036 JumpIfEqual {52}
	037 Add X1, X31, 8
	038 Move X0, X19
	039 Call MobController.TryGetRandomNavPoint, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {52}
	044 Move X8, [X31+8]
	045 Compare X8, 0
	046 JumpIfEqual {56}
	047 Move S0, [X8+40]
	048 Move S1, [X8+44]
	049 Move V2, [X8+48]
	050 Move X0, X19
	051 Call MobController.Respawn, X0, X1
	052 Move X30, [X31+16]
	053 Move X19, [X31+24]
	054 Add X31, X31, 32
	055 Return 
	056 Call 0x1B6FA1C

Method: System.Boolean TryGetRandomNavPoint(out AnimalCompany.GameGen.NavPoint navPoint)

Disassembly:
	0x01CE6D20 BL 0x1B6E7F0
	0x01CE6D24 ADRP X0, 0x226A000
	0x01CE6D28 LDR X0, [X0 + 0x2A8]
	0x01CE6D2C BL 0x1B6E7F0
	0x01CE6D30 ADRP X0, 0x226A000
	0x01CE6D34 LDR X0, [X0 + 0x2B0]
	0x01CE6D38 BL 0x1B6E7F0
	0x01CE6D3C ADRP X0, 0x2268000
	0x01CE6D40 LDR X0, [X0 + 0x2A8]
	0x01CE6D44 BL 0x1B6E7F0
	0x01CE6D48 ADRP X0, 0x226A000
	0x01CE6D4C LDR X0, [X0 + 0x2B8]
	0x01CE6D50 BL 0x1B6E7F0
	0x01CE6D54 MOVZ W8, 0x1
	0x01CE6D58 STRB W8, [X19 + 0x676]
	0x01CE6D5C STP X31, X31, [X31 + 0x20]
	0x01CE6D60 STR X31, [X31 + 0x30]
	0x01CE6D64 CBZ X20, 0x1CE70D8
	0x01CE6D68 LDR X8, [X20 + 0xB8]
	0x01CE6D6C CBZ X8, 0x1CE70D8
	0x01CE6D70 ADRP X19, 0x226A000
	0x01CE6D74 ADRP X22, 0x226A000
	0x01CE6D78 ADRP X21, 0x2268000
	0x01CE6D7C LDR V9, [X8 + 0x70]
	0x01CE6D80 LDR X19, [X19 + 0x2B0]
	0x01CE6D84 LDR X22, [X22 + 0x2A8]
	0x01CE6D88 LDR X21, [X21 + 0x2A8]
	0x01CE6D8C MOV X0, X20
	0x01CE6D90 BL 0x1CE492C
	0x01CE6D94 LDR X0, [X19]
	0x01CE6D98 MOV V8.16B, V0.16B
	0x01CE6D9C BL 0x1B6EA0C
	0x01CE6DA0 LDR X1, [X22]
	0x01CE6DA4 MOV X19, X0
	0x01CE6DA8 BL 0x2E45D4C
	0x01CE6DAC LDR X0, [X21]
	0x01CE6DB0 LDR W8, [X0 + 0xE0]
	0x01CE6DB4 CBNZ W8, 0x1CE6DBC
	0x01CE6DB8 BL 0x1B6E8F8
	0x01CE6DBC ADRP X22, 0x253D000
	0x01CE6DC0 LDRB W8, [X22 + 0x50A]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0x253E000
	008 Move X21, 0x2268000
	009 Move W8, [X22+1633]
	010 Move X21, [X21+1144]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x2268000
	018 Move X0, [X0+1144]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X22+1633], W8
	022 Add X8, X31, 8
	023 Move X0, X20
	024 Move [X31+8], X31
	025 Move [X31+16], X31
	026 Move [X31+24], X31
	027 Call MobController.get_navZone, X0
	028 Add X0, X31, 8
	029 Move X1, X31
	030 Call NavZone.GetRandomPoint, X0
	031 Move [X19], X0
	032 Move X20, X0
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1B6F8F8
	038 Move X0, X20
	039 Move X1, X31
	040 Move X2, X31
	041 Call Object.op_Equality, X0, X1
	042 Move X20, [X31+64]
	043 Move X19, [X31+72]
	044 Move X22, [X31+48]
	045 Move X21, [X31+56]
	046 Move X30, [X31+32]
	047 NotImplemented "Instruction ORN not yet implemented."
	048 And W0, W8, 1
	049 Add X31, X31, 80
	050 Return X0

Method: System.Void ResetNavPointsVisited()

Disassembly:
	0x01CE6DC4 CBNZ W8, 0x1CE6DDC
	0x01CE6DC8 ADRP X0, 0x2268000
	0x01CE6DCC LDR X0, [X0 + 0x2A8]
	0x01CE6DD0 BL 0x1B6E7F0
	0x01CE6DD4 MOVZ W8, 0x1
	0x01CE6DD8 STRB W8, [X22 + 0x50A]
	0x01CE6DDC LDR X0, [X21]
	0x01CE6DE0 LDR W8, [X0 + 0xE0]
	0x01CE6DE4 CBNZ W8, 0x1CE6DF0
	0x01CE6DE8 BL 0x1B6E8F8
	0x01CE6DEC LDR X0, [X21]
	0x01CE6DF0 LDR X8, [X0 + 0xB8]
	0x01CE6DF4 LDR X0, [X8]
	0x01CE6DF8 CBZ X0, 0x1CE70D8
	0x01CE6DFC ADRP X8, 0x2268000
	0x01CE6E00 LDR X8, [X8 + 0x808]
	0x01CE6E04 LDR X1, [X8]
	0x01CE6E08 BL 0x2961038
	0x01CE6E0C CBZ X0, 0x1CE70D8
	0x01CE6E10 ADRP X8, 0x226A000
	0x01CE6E14 LDR X8, [X8 + 0x2B8]
	0x01CE6E18 ADRP X25, 0x226A000
	0x01CE6E1C LDR X25, [X25 + 0x290]
	0x01CE6E20 ADRP X26, 0x226A000
	0x01CE6E24 LDR X1, [X8]
	0x01CE6E28 ADRP X24, 0x226A000
	0x01CE6E2C LDR X26, [X26 + 0x2A0]
	0x01CE6E30 LDR X24, [X24 + 0x288]
	0x01CE6E34 ADD X8, X31, 0x8
	0x01CE6E38 FMUL S13, S8, S8
	0x01CE6E3C BL 0x25D79BC
	0x01CE6E40 LDUR V0, [X31 + 0x8]
	0x01CE6E44 ADRP X9, 0xFFFFFFFFFEDC3000
	0x01CE6E48 LDR V2, [X9 + 0xAF4]
	0x01CE6E4C LDR X8, [X31 + 0x18]
	0x01CE6E50 FMOV S1, 0.5
	0x01CE6E54 STR V0, [X31 + 0x2]
	0x01CE6E58 FMUL S0, S9, S1
	0x01CE6E5C FMUL S0, S0, S2
	0x01CE6E60 STR X8, [X31 + 0x30]
	0x01CE6E64 BL 0x3D19900
	0x01CE6E68 ADRP X9, 0xFFFFFFFFFEDC3000
	0x01CE6E6C STR S0, [X31]
	0x01CE6E70 LDR V0, [X9 + 0xB64]
	0x01CE6E74 ADRP X21, 0x2267000
	0x01CE6E78 ADRP X8, 0xFFFFFFFFFEDC3000
	0x01CE6E7C LDR X21, [X21 + 0x488]
	0x01CE6E80 STR S0, [X31 + 0x4]
	0x01CE6E84 ADRP X22, 0x2267000
	0x01CE6E88 LDR V14, [X8 + 0xCC8]
	0x01CE6E8C LDR X22, [X22 + 0x480]
	0x01CE6E90 ADRP X27, 0x253D000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x253E000
	006 Move W8, [X20+1634]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x226B000
	013 Move X0, [X0+552]
	014 Call 0x1B6F7F0
	015 Move X0, 0x226B000
	016 Move X0, [X0+560]
	017 Call 0x1B6F7F0
	018 Move W8, 1
	019 Move [X20+1634], W8
	020 Move X8, [X19+288]
	021 Compare X8, 0
	022 JumpIfEqual {63}
	023 Move W2, [X8+24]
	024 Move W9, [X8+28]
	025 Add W9, W9, 1
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move [X8+24], W31
	028 Move [X8+28], W9
	029 Move X0, [X8+16]
	030 Move W1, W31
	031 Move X3, X31
	032 Call Array.Clear, X0, X1, X2
	033 Move X20, [X19+296]
	034 Compare X20, 0
	035 JumpIfEqual {63}
	036 Move W2, [X20+24]
	037 Move W8, [X20+28]
	038 Add W8, W8, 1
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move [X20+24], W31
	041 Move [X20+28], W8
	042 Move X0, [X20+16]
	043 Move W1, W31
	044 Move X3, X31
	045 Call Array.Clear, X0, X1, X2
	046 Move X20, [X19+296]
	047 Add X8, X31, 8
	048 Move X0, X19
	049 Call MobController.get_navZone, X0
	050 Compare X20, 0
	051 JumpIfEqual {63}
	052 Move X8, 0x226B000
	053 Move X8, [X8+552]
	054 Move X1, [X31+16]
	055 Move X0, X20
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X2, [X8]
	059 Move X30, [X31+32]
	060 Add X31, X31, 64
	061 Call List`1<Object>.AddRange, X0, X1
	062 Return 
	063 Call 0x1B6FA1C

Method: System.Boolean TryGetRandomNodeInRange(UnityEngine.Vector3 position, System.Single range, out AnimalCompany.GameGen.NavPoint targetNode)

Disassembly:
	0x01CE6E94 MOVZ W28, 0x1
	0x01CE6E98 ADRP X29, 0x253D000
	0x01CE6E9C LDR X1, [X25]
	0x01CE6EA0 ADD X0, X31, 0x20
	0x01CE6EA4 BL 0x2A6B89C
	0x01CE6EA8 TBZ X0, 0x0, 0x1CE708C
	0x01CE6EAC LDR X23, [X31 + 0x30]
	0x01CE6EB0 CBZ X23, 0x1CE70CC
	0x01CE6EB4 MOV X0, X23
	0x01CE6EB8 MOV X1, X31
	0x01CE6EBC BL 0x1CB47E0
	0x01CE6EC0 TBNZ X0, 0x0, 0x1CE6E9C
	0x01CE6EC4 MOV X0, X23
	0x01CE6EC8 MOV X1, X31
	0x01CE6ECC BL 0x3A9B084
	0x01CE6ED0 CBZ X0, 0x1CE70D0
	0x01CE6ED4 MOV X1, X31
	0x01CE6ED8 BL 0x3AA7658
	0x01CE6EDC LDR X0, [X20 + 0xD0]
	0x01CE6EE0 CBZ X0, 0x1CE70D4
	0x01CE6EE4 MOV V9.16B, V0.16B
	0x01CE6EE8 MOV V10.16B, V1.16B
	0x01CE6EEC MOV V11.16B, V2.16B
	0x01CE6EF0 MOV X1, X31
	0x01CE6EF4 BL 0x3AA7658
	0x01CE6EF8 FSUB S12, S9, S0
	0x01CE6EFC FSUB S8, S10, S1
	0x01CE6F00 FSUB S15, S11, S2
	0x01CE6F04 FMUL S0, S12, S12
	0x01CE6F08 FMUL S1, S8, S8
	0x01CE6F0C FADD S0, S0, S1
	0x01CE6F10 FMUL S1, S15, S15
	0x01CE6F14 FADD S9, S1, S0
	0x01CE6F18 FCMP S9, S13
	0x01CE6F1C B.GT 0x1CE6E9C
	0x01CE6F20 FCMP S9, S14
	0x01CE6F24 B.PL 0x1CE6F68
	0x01CE6F28 CBZ X19, 0x1CE70E0
	0x01CE6F2C LDR W10, [X19 + 0x1C]
	0x01CE6F30 LDR X8, [X19 + 0x10]
	0x01CE6F34 LDR X9, [X26]
	0x01CE6F38 ADD W10, W10, 0x1
	0x01CE6F3C STR W10, [X19 + 0x1C]
	0x01CE6F40 CBZ X8, 0x1CE70E4
	0x01CE6F44 LDRSW X10, [X19 + 0x18]
	0x01CE6F48 LDR W11, [X8 + 0x18]
	0x01CE6F4C CMP W10, W11
	0x01CE6F50 B.CS 0x1CE7070
	0x01CE6F54 ADD W9, W10, 0x1
	0x01CE6F58 ADD X8, X8, X10, 0x3, LSL
	0x01CE6F5C STR W9, [X19 + 0x18]
	0x01CE6F60 STR X23, [X8 + 0x20]
	0x01CE6F64 B 0x1CE6E9C
	0x01CE6F68 LDRB W8, [X27 + 0x441]
	0x01CE6F6C CBNZ W8, 0x1CE6F7C
	0x01CE6F70 MOV X0, X21
	0x01CE6F74 BL 0x1B6E7F0
	0x01CE6F78 STRB W28, [X27 + 0x441]
	0x01CE6F7C LDR X0, [X21]
	0x01CE6F80 LDR W8, [X0 + 0xE0]
	0x01CE6F84 CBNZ W8, 0x1CE6F8C
	0x01CE6F88 BL 0x1B6E8F8
	0x01CE6F8C LDR V0, [X31 + 0x4]
	0x01CE6F90 FSQRT S9, S9
	0x01CE6F94 FCMP S9, S0
	0x01CE6F98 B.LE 0x1CE6FAC
	0x01CE6F9C FDIV S10, S12, S9
	0x01CE6FA0 FDIV S11, S8, S9
	0x01CE6FA4 FDIV S12, S15, S9
	0x01CE6FA8 B 0x1CE6FD0
	0x01CE6FAC LDRB W8, [X29 + 0x43F]
	0x01CE6FB0 CBNZ W8, 0x1CE6FC0
	0x01CE6FB4 MOV X0, X22
	0x01CE6FB8 BL 0x1B6E7F0
	0x01CE6FBC STRB W28, [X29 + 0x43F]
	0x01CE6FC0 LDR X8, [X22]
	0x01CE6FC4 LDR X8, [X8 + 0xB8]
	0x01CE6FC8 LDP S10, S11, [X8]
	0x01CE6FCC LDR V12, [X8 + 0x8]
	0x01CE6FD0 LDR X0, [X20 + 0xD0]
	0x01CE6FD4 CBZ X0, 0x1CE70DC
	0x01CE6FD8 MOV X1, X31
	0x01CE6FDC BL 0x3AA7AD0
	0x01CE6FE0 FMUL S0, S10, S0
	0x01CE6FE4 FMUL S1, S11, S1
	0x01CE6FE8 FADD S0, S0, S1
	0x01CE6FEC FMUL S1, S12, S2
	0x01CE6FF0 FADD S0, S1, S0
	0x01CE6FF4 LDR V1, [X31]
	0x01CE6FF8 FCMP S0, S1
	0x01CE6FFC B.LE 0x1CE6E9C
	0x01CE7000 LDR X0, [X20 + 0xD0]
	0x01CE7004 CBZ X0, 0x1CE70E8
	0x01CE7008 MOV X1, X31
	0x01CE700C BL 0x3AA7658
	0x01CE7010 MOV V3.16B, V10.16B
	0x01CE7014 MOV V4.16B, V11.16B
	0x01CE7018 MOV V5.16B, V12.16B
	0x01CE701C MOV V6.16B, V9.16B
	0x01CE7020 BL 0x1CE8658
	0x01CE7024 TBZ X0, 0x0, 0x1CE6E9C
	0x01CE7028 CBZ X19, 0x1CE70EC
	0x01CE702C LDR W10, [X19 + 0x1C]
	0x01CE7030 LDR X8, [X19 + 0x10]
	0x01CE7034 LDR X9, [X26]
	0x01CE7038 ADD W10, W10, 0x1
	0x01CE703C STR W10, [X19 + 0x1C]
	0x01CE7040 CBZ X8, 0x1CE70F0
	0x01CE7044 LDRSW X10, [X19 + 0x18]
	0x01CE7048 LDR W11, [X8 + 0x18]
	0x01CE704C CMP W10, W11
	0x01CE7050 B.CC 0x1CE6F54
	0x01CE7054 LDR X8, [X9 + 0x20]
	0x01CE7058 LDR X8, [X8 + 0xC0]
	0x01CE705C LDR X2, [X8 + 0x70]
	0x01CE7060 MOV X0, X19
	0x01CE7064 MOV X1, X23
	0x01CE7068 BL 0x2E46518
	0x01CE706C B 0x1CE6E9C
	0x01CE7070 LDR X8, [X9 + 0x20]
	0x01CE7074 LDR X8, [X8 + 0xC0]
	0x01CE7078 LDR X2, [X8 + 0x70]
	0x01CE707C MOV X0, X19
	0x01CE7080 MOV X1, X23
	0x01CE7084 BL 0x2E46518
	0x01CE7088 B 0x1CE6E9C
	0x01CE708C LDR X1, [X24]
	0x01CE7090 ADD X0, X31, 0x20
	0x01CE7094 BL 0x2A6B898
	0x01CE7098 MOV X0, X19
	0x01CE709C LDP X20, X19, [X31 + 0xD0]
	0x01CE70A0 LDP X22, X21, [X31 + 0xC0]
	0x01CE70A4 LDP X24, X23, [X31 + 0xB0]
	0x01CE70A8 LDP X26, X25, [X31 + 0xA0]
	0x01CE70AC LDP X28, X27, [X31 + 0x90]
	0x01CE70B0 LDP X29, X30, [X31 + 0x80]
	0x01CE70B4 LDP D9, D8, [X31 + 0x70]
	0x01CE70B8 LDP D11, D10, [X31 + 0x60]
	0x01CE70BC LDP D13, D12, [X31 + 0x50]
	0x01CE70C0 LDP D15, D14, [X31 + 0x40]
	0x01CE70C4 ADD X31, X31, 0xE0
	0x01CE70C8 RET
	0x01CE70CC BL 0x1B6EA1C
	0x01CE70D0 BL 0x1B6EA1C
	0x01CE70D4 BL 0x1B6EA1C
	0x01CE70D8 BL 0x1B6EA1C
	0x01CE70DC BL 0x1B6EA1C
	0x01CE70E0 BL 0x1B6EA1C
	0x01CE70E4 BL 0x1B6EA1C
	0x01CE70E8 BL 0x1B6EA1C
	0x01CE70EC BL 0x1B6EA1C
	0x01CE70F0 BL 0x1B6EA1C
	0x01CE70F4 B 0x1CE7138
	0x01CE70F8 B 0x1CE7138
	0x01CE70FC B 0x1CE7138
	0x01CE7100 B 0x1CE7138
	0x01CE7104 B 0x1CE7138
	0x01CE7108 B 0x1CE7138
	0x01CE710C B 0x1CE7138
	0x01CE7110 B 0x1CE7138
	0x01CE7114 B 0x1CE7138
	0x01CE7118 B 0x1CE7138
	0x01CE711C B 0x1CE7138
	0x01CE7120 B 0x1CE7138
	0x01CE7124 B 0x1CE7138
	0x01CE7128 B 0x1CE7138
	0x01CE712C B 0x1CE7138
	0x01CE7130 B 0x1CE7138
	0x01CE7134 B 0x1CE7138
	0x01CE7138 MOV X20, X0
	0x01CE713C CMP W1, 0x1
	0x01CE7140 B.NE 0x1CE716C
	0x01CE7144 MOV X0, X20
	0x01CE7148 BL 0x3D19840
	0x01CE714C LDR X21, [X0]
	0x01CE7150 BL 0x3D19850
	0x01CE7154 LDR X1, [X24]
	0x01CE7158 ADD X0, X31, 0x20

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0x253E000
	015 Move W8, [X21+1635]
	016 Move X19, X1
	017 Move V8, V3
	018 Move V9, V2
	019 Move V10, V1
	020 Move V11, V0
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {55}
	026 Move X0, 0x226B000
	027 Move X0, [X0+568]
	028 Call 0x1B6F7F0
	029 Move X0, 0x2269000
	030 Move X0, [X0+984]
	031 Call 0x1B6F7F0
	032 Move X0, 0x226B000
	033 Move X0, [X0+576]
	034 Call 0x1B6F7F0
	035 Move X0, 0x226B000
	036 Move X0, [X0+560]
	037 Call 0x1B6F7F0
	038 Move X0, 0x226B000
	039 Move X0, [X0+584]
	040 Call 0x1B6F7F0
	041 Move X0, 0x226B000
	042 Move X0, [X0+592]
	043 Call 0x1B6F7F0
	044 Move X0, 0x226B000
	045 Move X0, [X0+600]
	046 Call 0x1B6F7F0
	047 Move X0, 0x2268000
	048 Move X0, [X0+1144]
	049 Call 0x1B6F7F0
	050 Move X0, 0x2268000
	051 Move X0, [X0+1216]
	052 Call 0x1B6F7F0
	053 Move W8, 1
	054 Move [X21+1635], W8
	055 Move [X31+8], X31
	056 Move [X19], X31
	057 Move X8, [X20+344]
	058 Compare X8, 0
	059 JumpIfEqual {204}
	060 Move W2, [X8+24]
	061 Move W9, [X8+28]
	062 Move X21, 0x2269000
	063 Move X21, [X21+984]
	064 Add W9, W9, 1
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move [X8+24], W31
	067 Move [X8+28], W9
	068 Move X0, [X8+16]
	069 Move W1, W31
	070 Move X3, X31
	071 Call Array.Clear, X0, X1, X2
	072 Move X0, [X21]
	073 Move X22, 0x2268000
	074 Move W8, [X0+224]
	075 Move X22, [X22+1216]
	076 Compare W8, 0
	077 JumpIfNotEqual {80}
	078 Call 0x1B6F8F8
	079 Move X0, [X21]
	080 Move X8, [X0+184]
	081 Move X1, X31
	082 Move W0, [X8+36]
	083 Call LayerMask.op_Implicit, X0
	084 Move X8, [X22]
	085 Move W21, W0
	086 Move W9, [X8+224]
	087 Compare W9, 0
	088 JumpIfNotEqual {91}
	089 Move X0, X8
	090 Call 0x1B6F8F8
	091 Move V0, V11
	092 Move V1, V10
	093 Move V2, V9
	094 Move V3, V8
	095 Move W0, W21
	096 Move X1, X31
	097 Call Physics.OverlapSphere, X0, V0, X1
	098 Compare X0, 0
	099 JumpIfEqual {204}
	100 Move W8, [X0+24]
	101 Move X21, X0
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X23, 0x226B000
	104 Move X24, 0x226B000
	105 Move X25, 0x226A000
	106 Move X23, [X23+568]
	107 Move X24, [X24+584]
	108 Call 0x3D1A168
	109 Return X0
	110 Move W22, W31
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Add X8, X21, W22
	113 Move X0, [X8+32]
	114 Compare X0, 0
	115 JumpIfEqual {204}
	116 Move X2, [X23]
	117 Add X1, X31, 8
	118 Call 0x2091EE4, X0, X1
	119 Move TEMP, X0
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfNotEqual {155}
	123 Move X0, [X20+296]
	124 Compare X0, 0
	125 JumpIfEqual {204}
	126 Move X1, [X31+8]
	127 Move X2, [X24]
	128 Call List`1<Object>.Contains, X0, X1
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfNotEqual {155}
	133 Move X0, [X20+344]
	134 Compare X0, 0
	135 JumpIfEqual {204}
	136 Move W10, [X0+28]
	137 Move X1, [X31+8]
	138 Move X8, [X0+16]
	139 Move X9, [X25]
	140 Add W10, W10, 1
	141 Move [X0+28], W10
	142 Compare X8, 0
	143 JumpIfEqual {204}
	144 NotImplemented "Instruction LDRSW not yet implemented."
	145 Move W11, [X8+24]
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Add W9, W10, 1
	148 Add X8, X8, X10
	149 Move [X0+24], W9
	150 Move [X8+32], X1
	151 Move X8, [X9+32]
	152 Move X8, [X8+192]
	153 Move X2, [X8+112]
	154 Call List`1<Object>.AddWithResize, X0, X1
	155 Move W8, [X21+24]
	156 Add W22, W22, 1
	157 NotImplemented "Instruction CMP not yet implemented."
	158 Move X8, [X20+344]
	159 Compare X8, 0
	160 JumpIfEqual {204}
	161 Move W1, [X8+24]
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move W0, W31
	164 Move X2, X31
	165 Call Random.Range, X0, X1
	166 Move X8, [X20+344]
	167 Compare X8, 0
	168 JumpIfEqual {204}
	169 Move X9, 0x226A000
	170 Move X9, [X9+600]
	171 Move W1, W0
	172 Move X0, X8
	173 Move X2, [X9]
	174 Call List`1<Object>.get_Item, X0, X1
	175 Move X20, X0
	176 Move [X19], X0
	177 Move X20, [X19]
	178 Move X8, 0x2267000
	179 Move X8, [X8+1144]
	180 Move X0, [X8]
	181 Move W8, [X0+224]
	182 Compare W8, 0
	183 JumpIfNotEqual {185}
	184 Call 0x1B6F8F8
	185 Move X0, X20
	186 Move X1, X31
	187 Move X2, X31
	188 Call Object.op_Inequality, X0, X1
	189 Move X20, [X31+96]
	190 Move X19, [X31+104]
	191 Move X22, [X31+80]
	192 Move X21, [X31+88]
	193 Move X24, [X31+64]
	194 Move X23, [X31+72]
	195 Move X30, [X31+48]
	196 Move X25, [X31+56]
	197 Move D9, [X31+32]
	198 Move D8, [X31+40]
	199 Move D11, [X31+16]
	200 Move D10, [X31+24]
	201 And W0, W0, 1
	202 Add X31, X31, 112
	203 Return X0
	204 Call 0x1B6FA1C
	205 Call 0x1B6FA24

Method: AnimalCompany.GameGen.NavPoint FindClosestNodeFromPosition(UnityEngine.Vector3 position)

Disassembly:
	0x01CE715C BL 0x2A6B898
	0x01CE7160 CBZ X21, 0x1CE7098
	0x01CE7164 MOV X0, X21
	0x01CE7168 BL 0x1B6EA14
	0x01CE716C MOV X21, X31
	0x01CE7170 B 0x1CE7178
	0x01CE7174 MOV X20, X0
	0x01CE7178 LDR X1, [X24]
	0x01CE717C ADD X0, X31, 0x20
	0x01CE7180 BL 0x2A6B898
	0x01CE7184 CBNZ X21, 0x1CE7190
	0x01CE7188 MOV X0, X20
	0x01CE718C BL 0x1C8418C
	0x01CE7190 MOV X0, X21
	0x01CE7194 BL 0x1B6EA14
	0x01CE7198 BL 0x18F46A8
	0x01CE719C STP X30, X21, [X31 - 0x20]!
	0x01CE71A0 STP X20, X19, [X31 + 0x10]
	0x01CE71A4 ADRP X21, 0x253C000
	0x01CE71A8 LDRB W8, [X21 + 0x66A]
	0x01CE71AC MOV W20, W1
	0x01CE71B0 MOV X19, X0
	0x01CE71B4 TBNZ X8, 0x0, 0x1CE71D8
	0x01CE71B8 ADRP X0, 0x2267000
	0x01CE71BC LDR X0, [X0 + 0x1C0]
	0x01CE71C0 BL 0x1B6E7F0
	0x01CE71C4 ADRP X0, 0x2269000
	0x01CE71C8 LDR X0, [X0 + 0x2C0]
	0x01CE71CC BL 0x1B6E7F0
	0x01CE71D0 MOVZ W8, 0x1
	0x01CE71D4 STRB W8, [X21 + 0x66A]
	0x01CE71D8 LDRB W8, [X19 + 0x58]
	0x01CE71DC CBZ W8, 0x1CE7228
	0x01CE71E0 STRB W31, [X19 + 0x58]
	0x01CE71E4 MOV X0, X19
	0x01CE71E8 BL 0x1CE418C
	0x01CE71EC SUB W1, W0, W20
	0x01CE71F0 MOV X0, X19
	0x01CE71F4 BL 0x1CE41EC
	0x01CE71F8 MOV X0, X19
	0x01CE71FC BL 0x1CE418C
	0x01CE7200 CMP W0, 0x0
	0x01CE7204 B.GT 0x1CE7264
	0x01CE7208 MOV X0, X19
	0x01CE720C MOV W1, W31
	0x01CE7210 BL 0x1CE41EC
	0x01CE7214 MOV X0, X19
	0x01CE7218 LDP X20, X19, [X31 + 0x10]
	0x01CE721C MOVZ W1, 0x1
	0x01CE7220 LDP X30, X21, [X31], #0x20
	0x01CE7224 B 0x1CE4068
	0x01CE7228 ADRP X21, 0x2267000
	0x01CE722C LDR X21, [X21 + 0x1C0]
	0x01CE7230 LDR X0, [X21]
	0x01CE7234 LDR W8, [X0 + 0xE0]
	0x01CE7238 CBNZ W8, 0x1CE7240
	0x01CE723C BL 0x1B6E8F8
	0x01CE7240 MOV X0, X19
	0x01CE7244 MOV X1, X31
	0x01CE7248 BL 0x1D697C8
	0x01CE724C LDR X0, [X19 + 0x38]
	0x01CE7250 CBZ X0, 0x1CE7364
	0x01CE7254 MOV X1, X31
	0x01CE7258 BL 0x1D87040
	0x01CE725C CMP W0, 0x4
	0x01CE7260 B.NE 0x1CE7270
	0x01CE7264 LDP X20, X19, [X31 + 0x10]
	0x01CE7268 LDP X30, X21, [X31], #0x20
	0x01CE726C RET
	0x01CE7270 LDR X0, [X19 + 0x40]
	0x01CE7274 CBZ X0, 0x1CE7364
	0x01CE7278 MOV X1, X31
	0x01CE727C BL 0x1D9F538
	0x01CE7280 ANDS W31, W0, 0x7
	0x01CE7284 B.EQ 0x1CE72E8
	0x01CE7288 TBNZ X0, 0x0, 0x1CE71E4
	0x01CE728C LDR X8, [X19 + 0x38]
	0x01CE7290 CBZ X8, 0x1CE7364
	0x01CE7294 LDR X0, [X8 + 0x50]
	0x01CE7298 CBZ X0, 0x1CE7364
	0x01CE729C MOV X1, X31
	0x01CE72A0 BL 0x1DBEFE4
	0x01CE72A4 TBZ X0, 0x0, 0x1CE7264
	0x01CE72A8 LDR X8, [X19 + 0x38]
	0x01CE72AC CBZ X8, 0x1CE7364
	0x01CE72B0 LDR X0, [X8 + 0x50]
	0x01CE72B4 MOVZ W1, 0xC
	0x01CE72B8 MOV X2, X31
	0x01CE72BC BL 0x1DD601C
	0x01CE72C0 MOV X21, X0
	0x01CE72C4 MOVZ W0, 0x1
	0x01CE72C8 MOV X1, X31
	0x01CE72CC BL 0x1D29EBC
	0x01CE72D0 LDR X8, [X19 + 0x40]
	0x01CE72D4 CBZ X8, 0x1CE7364
	0x01CE72D8 LDR X8, [X8 + 0x20]
	0x01CE72DC CBZ X8, 0x1CE7320
	0x01CE72E0 LDR W0, [X8]
	0x01CE72E4 B 0x1CE7324
	0x01CE72E8 LDR X0, [X21]
	0x01CE72EC LDR X19, [X19 + 0x40]
	0x01CE72F0 LDR W8, [X0 + 0xE0]
	0x01CE72F4 CBNZ W8, 0x1CE72FC
	0x01CE72F8 BL 0x1B6E8F8
	0x01CE72FC ADRP X8, 0x2269000
	0x01CE7300 LDR X8, [X8 + 0x2C0]
	0x01CE7304 MOV X1, X19
	0x01CE7308 LDP X20, X19, [X31 + 0x10]
	0x01CE730C MOVZ W2, 0x7
	0x01CE7310 LDR X0, [X8]
	0x01CE7314 MOV X3, X31
	0x01CE7318 LDP X30, X21, [X31], #0x20
	0x01CE731C B 0x1D69640
	0x01CE7320 MOV X0, X31
	0x01CE7324 LDR W1, [X19 + 0x68]
	0x01CE7328 MOVZ W2, 0x1
	0x01CE732C MOV X3, X31
	0x01CE7330 BL 0x1DA8258
	0x01CE7334 STUR X0, [X21 + 0x1C]
	0x01CE7338 STR W20, [X21 + 0x24]
	0x01CE733C CBZ X21, 0x1CE7364
	0x01CE7340 MOVZ W8, 0x60
	0x01CE7344 STR W8, [X21 + 0xC]
	0x01CE7348 LDR X0, [X19 + 0x38]
	0x01CE734C CBZ X0, 0x1CE7364
	0x01CE7350 LDP X20, X19, [X31 + 0x10]
	0x01CE7354 MOV X1, X21
	0x01CE7358 MOV X2, X31
	0x01CE735C LDP X30, X21, [X31], #0x20
	0x01CE7360 B 0x1D8A710
	0x01CE7364 BL 0x1B6EA1C
	0x01CE7368 B 0x1CE719C

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], D11
	003 Move [X31+56], D10
	004 Move [X31+64], D9
	005 Move [X31+72], D8
	006 Move [X31+80], X30
	007 Move [X31+88], X23
	008 Move [X31+96], X22
	009 Move [X31+104], X21
	010 Move [X31+112], X20
	011 Move [X31+120], X19
	012 Move X20, 0x253D000
	013 Move W8, [X20+1636]
	014 Move V8, V2
	015 Move V9, V1
	016 Move V10, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {39}
	022 Move X0, 0x226A000
	023 Move X0, [X0+608]
	024 Call 0x1B6F7F0
	025 Move X0, 0x226A000
	026 Move X0, [X0+616]
	027 Call 0x1B6F7F0
	028 Move X0, 0x226A000
	029 Move X0, [X0+624]
	030 Call 0x1B6F7F0
	031 Move X0, 0x226A000
	032 Move X0, [X0+632]
	033 Call 0x1B6F7F0
	034 Move X0, 0x2267000
	035 Move X0, [X0+1144]
	036 Call 0x1B6F7F0
	037 Move W8, 1
	038 Move [X20+1636], W8
	039 Move [X31+24], X31
	040 Move [X31+32], X31
	041 Move [X31+40], X31
	042 Move [X31], X31
	043 Move [X31+8], X31
	044 Move [X31+16], X31
	045 Move X0, [X19+296]
	046 Compare X0, 0
	047 JumpIfEqual {127}
	048 Move X8, 0x226A000
	049 Move X8, [X8+632]
	050 Move X22, 0x226A000
	051 Move X23, 0x2267000
	052 Move X21, 0x226A000
	053 Move X1, [X8]
	054 Move X22, [X22+616]
	055 Move X23, [X23+1144]
	056 Move X21, [X21+608]
	057 Add X8, X31, 24
	058 Call List`1<Object>.GetEnumerator, X0
	059 Move TEMP, 0x80800000
	060 Not TEMP
	061 Move W9, TEMP
	062 Move X8, X31
	063 Move S0, W9
	064 Move X20, X8
	065 Move V11, V0
	066 Move X1, [X22]
	067 Add X0, X31, 24
	068 Call Enumerator<Object>.MoveNext, X0
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {88}
	073 Move X8, [X31+40]
	074 Compare X8, 0
	075 JumpIfEqual {126}
	076 Move S0, [X8+40]
	077 Move S1, [X8+44]
	078 Move V2, [X8+48]
	079 Subtract S0, S10, S0
	080 Subtract S1, S9, S1
	081 Subtract S2, S8, S2
	082 Multiply S0, S0, S0
	083 Multiply S1, S1, S1
	084 Add S0, S0, S1
	085 Multiply S1, S2, S2
	086 Add S0, S0, S1
	087 NotImplemented "Instruction FCMP not yet implemented."
	088 Move X1, [X21]
	089 Add X0, X31, 24
	090 Call Enumerator<Object>.Dispose, X0
	091 Move X0, [X23]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1B6F8F8
	096 Move X0, X20
	097 Move X1, X31
	098 Move X2, X31
	099 Call Object.op_Equality, X0, X1
	100 Move TEMP, X0
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfNotEqual {113}
	104 Add X8, X31, 0
	105 Move X0, X19
	106 Call MobController.get_navZone, X0
	107 Add X0, X31, 0
	108 Move X1, X31
	109 Call NavZone.GetRandomPoint, X0
	110 Move X20, X0
	111 Move X0, X19
	112 Call MobController.ResetNavPointsVisited, X0
	113 Move X0, X20
	114 Move X20, [X31+112]
	115 Move X19, [X31+120]
	116 Move X22, [X31+96]
	117 Move X21, [X31+104]
	118 Move X30, [X31+80]
	119 Move X23, [X31+88]
	120 Move D9, [X31+64]
	121 Move D8, [X31+72]
	122 Move D11, [X31+48]
	123 Move D10, [X31+56]
	124 Add X31, X31, 128
	125 Return X0
	126 Call 0x1B6FA1C
	127 Call 0x1B6FA1C
	128 Move X22, X0
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move X0, X22
	131 Call 0x3D1A840
	132 Move X21, [X0]
	133 Call 0x3D1A850
	134 Move X8, 0x226A000
	135 Move X8, [X8+608]
	136 Add X0, X31, 24
	137 Move X1, [X8]
	138 Call Enumerator<Object>.Dispose, X0
	139 Compare X21, 0
	140 JumpIfEqual {91}
	141 Move X0, X21
	142 Call 0x1B6FA14
	143 Move X21, X31
	144 Move X22, X0
	145 Move X8, 0x226A000
	146 Move X8, [X8+608]
	147 Move X1, [X8]
	148 Add X0, X31, 24
	149 Call Enumerator<Object>.Dispose, X0
	150 Compare X21, 0
	151 JumpIfNotEqual {154}
	152 Move X0, X22
	153 Call 0x1C8518C
	154 Move X0, X21
	155 Call 0x1B6FA14
	156 Call 0x18F56A8

Method: System.Void MarkExploredNodesInRange(UnityEngine.Vector3 position, System.Single range)

Disassembly:
	0x01CE736C STP X30, X21, [X31 - 0x20]!
	0x01CE7370 STP X20, X19, [X31 + 0x10]
	0x01CE7374 ADRP X20, 0x253C000
	0x01CE7378 LDRB W8, [X20 + 0x66B]
	0x01CE737C MOV X19, X0
	0x01CE7380 TBNZ X8, 0x0, 0x1CE73A4
	0x01CE7384 ADRP X0, 0x2267000
	0x01CE7388 LDR X0, [X0 + 0x1C0]
	0x01CE738C BL 0x1B6E7F0
	0x01CE7390 ADRP X0, 0x2269000
	0x01CE7394 LDR X0, [X0 + 0x2C8]
	0x01CE7398 BL 0x1B6E7F0
	0x01CE739C MOVZ W8, 0x1
	0x01CE73A0 STRB W8, [X20 + 0x66B]
	0x01CE73A4 LDRB W8, [X19 + 0x58]
	0x01CE73A8 CBZ W8, 0x1CE73CC
	0x01CE73AC STRB W31, [X19 + 0x58]
	0x01CE73B0 LDR X0, [X19 + 0xC0]
	0x01CE73B4 CBZ X0, 0x1CE7504
	0x01CE73B8 LDR X8, [X0]
	0x01CE73BC LDP X20, X19, [X31 + 0x10]
	0x01CE73C0 LDP X2, X1, [X8 + 0x1B8]
	0x01CE73C4 LDP X30, X21, [X31], #0x20
	0x01CE73C8 BR X2
	0x01CE73CC ADRP X21, 0x2267000
	0x01CE73D0 LDR X21, [X21 + 0x1C0]
	0x01CE73D4 LDR X0, [X21]
	0x01CE73D8 LDR W8, [X0 + 0xE0]
	0x01CE73DC CBNZ W8, 0x1CE73E4
	0x01CE73E0 BL 0x1B6E8F8
	0x01CE73E4 MOV X0, X19
	0x01CE73E8 MOV X1, X31
	0x01CE73EC BL 0x1D697C8
	0x01CE73F0 LDR X0, [X19 + 0x38]
	0x01CE73F4 CBZ X0, 0x1CE7504
	0x01CE73F8 MOV X1, X31
	0x01CE73FC BL 0x1D87040
	0x01CE7400 CMP W0, 0x4
	0x01CE7404 B.NE 0x1CE7414
	0x01CE7408 LDP X20, X19, [X31 + 0x10]
	0x01CE740C LDP X30, X21, [X31], #0x20
	0x01CE7410 RET
	0x01CE7414 LDR X0, [X19 + 0x40]
	0x01CE7418 CBZ X0, 0x1CE7504
	0x01CE741C MOV X1, X31
	0x01CE7420 BL 0x1D9F538
	0x01CE7424 TBNZ X0, 0x0, 0x1CE7460
	0x01CE7428 LDR X0, [X21]
	0x01CE742C LDR X19, [X19 + 0x40]
	0x01CE7430 LDR W8, [X0 + 0xE0]
	0x01CE7434 CBNZ W8, 0x1CE743C
	0x01CE7438 BL 0x1B6E8F8
	0x01CE743C ADRP X8, 0x2269000
	0x01CE7440 LDR X8, [X8 + 0x2C8]
	0x01CE7444 MOV X1, X19
	0x01CE7448 LDP X20, X19, [X31 + 0x10]
	0x01CE744C MOVZ W2, 0x1
	0x01CE7450 LDR X0, [X8]
	0x01CE7454 MOV X3, X31
	0x01CE7458 LDP X30, X21, [X31], #0x20
	0x01CE745C B 0x1D69640
	0x01CE7460 LDR X8, [X19 + 0x38]
	0x01CE7464 CBZ X8, 0x1CE7504
	0x01CE7468 MOV W20, W0
	0x01CE746C LDR X0, [X8 + 0x50]
	0x01CE7470 CBZ X0, 0x1CE7504
	0x01CE7474 MOV X1, X31
	0x01CE7478 BL 0x1DBEFE4
	0x01CE747C TBZ X0, 0x0, 0x1CE74F8
	0x01CE7480 LDR X8, [X19 + 0x38]
	0x01CE7484 CBZ X8, 0x1CE7504
	0x01CE7488 LDR X0, [X8 + 0x50]
	0x01CE748C MOVZ W1, 0x8
	0x01CE7490 MOV X2, X31
	0x01CE7494 BL 0x1DD601C
	0x01CE7498 MOV X21, X0
	0x01CE749C MOVZ W0, 0x1
	0x01CE74A0 MOV X1, X31
	0x01CE74A4 BL 0x1D29EBC
	0x01CE74A8 LDR X8, [X19 + 0x40]
	0x01CE74AC CBZ X8, 0x1CE7504
	0x01CE74B0 LDR X8, [X8 + 0x20]
	0x01CE74B4 CBZ X8, 0x1CE74C0
	0x01CE74B8 LDR W0, [X8]
	0x01CE74BC B 0x1CE74C4
	0x01CE74C0 MOV X0, X31
	0x01CE74C4 LDR W1, [X19 + 0x68]
	0x01CE74C8 MOVZ W2, 0x2
	0x01CE74CC MOV X3, X31
	0x01CE74D0 BL 0x1DA8258
	0x01CE74D4 STUR X0, [X21 + 0x1C]
	0x01CE74D8 CBZ X21, 0x1CE7504
	0x01CE74DC MOVZ W8, 0x40
	0x01CE74E0 STR W8, [X21 + 0xC]
	0x01CE74E4 LDR X0, [X19 + 0x38]
	0x01CE74E8 CBZ X0, 0x1CE7504
	0x01CE74EC MOV X1, X21
	0x01CE74F0 MOV X2, X31
	0x01CE74F4 BL 0x1D8A710
	0x01CE74F8 ANDS W31, W20, 0x7
	0x01CE74FC B.NE 0x1CE73B0
	0x01CE7500 B 0x1CE7408
	0x01CE7504 BL 0x1B6EA1C
	0x01CE7508 STR D8, [X31 - 0x30]!
	0x01CE750C STP X30, X21, [X31 + 0x10]
	0x01CE7510 STP X20, X19, [X31 + 0x20]
	0x01CE7514 ADRP X20, 0x253C000
	0x01CE7518 LDRB W8, [X20 + 0x66C]
	0x01CE751C MOV V8.16B, V0.16B
	0x01CE7520 MOV X19, X0
	0x01CE7524 TBNZ X8, 0x0, 0x1CE7548
	0x01CE7528 ADRP X0, 0x2267000
	0x01CE752C LDR X0, [X0 + 0x1C0]
	0x01CE7530 BL 0x1B6E7F0
	0x01CE7534 ADRP X0, 0x2269000
	0x01CE7538 LDR X0, [X0 + 0x2D0]
	0x01CE753C BL 0x1B6E7F0
	0x01CE7540 MOVZ W8, 0x1
	0x01CE7544 STRB W8, [X20 + 0x66C]
	0x01CE7548 LDRB W8, [X19 + 0x58]
	0x01CE754C CBZ W8, 0x1CE7578
	0x01CE7550 STRB W31, [X19 + 0x58]
	0x01CE7554 LDR X0, [X19 + 0xC0]
	0x01CE7558 CBZ X0, 0x1CE76BC
	0x01CE755C LDR X8, [X0]
	0x01CE7560 LDP X20, X19, [X31 + 0x20]
	0x01CE7564 LDP X30, X21, [X31 + 0x10]
	0x01CE7568 MOV V0.16B, V8.16B
	0x01CE756C LDP X2, X1, [X8 + 0x1C8]
	0x01CE7570 LDR V8, [X31], #0x30
	0x01CE7574 BR X2
	0x01CE7578 ADRP X21, 0x2267000

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0x253D000
	015 Move X20, 0x2268000
	016 Move W8, [X21+1637]
	017 Move X20, [X20+984]
	018 Move V8, V3
	019 Move V9, V2
	020 Move V10, V1
	021 Move V11, V0
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {47}
	027 Move X0, 0x226A000
	028 Move X0, [X0+568]
	029 Call 0x1B6F7F0
	030 Move X0, 0x2268000
	031 Move X0, [X0+984]
	032 Call 0x1B6F7F0
	033 Move X0, 0x226A000
	034 Move X0, [X0+576]
	035 Call 0x1B6F7F0
	036 Move X0, 0x226A000
	037 Move X0, [X0+584]
	038 Call 0x1B6F7F0
	039 Move X0, 0x226A000
	040 Move X0, [X0+640]
	041 Call 0x1B6F7F0
	042 Move X0, 0x2267000
	043 Move X0, [X0+1216]
	044 Call 0x1B6F7F0
	045 Move W8, 1
	046 Move [X21+1637], W8
	047 Move X0, [X20]
	048 Move [X31+8], X31
	049 Move X21, 0x2267000
	050 Move W8, [X0+224]
	051 Move X21, [X21+1216]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1B6F8F8
	055 Move X0, [X20]
	056 Move X8, [X0+184]
	057 Move X1, X31
	058 Move W0, [X8+36]
	059 Call LayerMask.op_Implicit, X0
	060 Move X8, [X21]
	061 Move W20, W0
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Move X0, X8
	066 Call 0x1B6F8F8
	067 Move V0, V11
	068 Move V1, V10
	069 Move V2, V9
	070 Move V3, V8
	071 Move W0, W20
	072 Move X1, X31
	073 Call Physics.OverlapSphere, X0, V0, X1
	074 Compare X0, 0
	075 JumpIfEqual {155}
	076 Move W8, [X0+24]
	077 Move X20, X0
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X22, 0x226A000
	080 Move X23, 0x226A000
	081 Move X24, 0x226A000
	082 Move X25, 0x226A000
	083 Move X22, [X22+568]
	084 Move X23, [X23+584]
	085 Move X24, [X24+640]
	086 Move X25, [X25+576]
	087 Move W21, W31
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Add X8, X20, W21
	090 Move X0, [X8+32]
	091 Compare X0, 0
	092 JumpIfEqual {155}
	093 Move X2, [X22]
	094 Add X1, X31, 8
	095 Call 0x2091EE4, X0, X1
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {138}
	100 Move X0, [X19+296]
	101 Compare X0, 0
	102 JumpIfEqual {155}
	103 Move X1, [X31+8]
	104 Move X2, [X23]
	105 Call List`1<Object>.Contains, X0, X1
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfNotEqual {138}
	110 Move X0, [X19+296]
	111 Compare X0, 0
	112 JumpIfEqual {155}
	113 Move X1, [X31+8]
	114 Move X2, [X24]
	115 Call List`1<Object>.Remove, X0, X1
	116 Move X0, [X19+288]
	117 Compare X0, 0
	118 JumpIfEqual {155}
	119 Move W10, [X0+28]
	120 Move X1, [X31+8]
	121 Move X8, [X0+16]
	122 Move X9, [X25]
	123 Add W10, W10, 1
	124 Move [X0+28], W10
	125 Compare X8, 0
	126 JumpIfEqual {155}
	127 NotImplemented "Instruction LDRSW not yet implemented."
	128 Move W11, [X8+24]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Add W9, W10, 1
	131 Add X8, X8, X10
	132 Move [X0+24], W9
	133 Move [X8+32], X1
	134 Move X8, [X9+32]
	135 Move X8, [X8+192]
	136 Move X2, [X8+112]
	137 Call List`1<Object>.AddWithResize, X0, X1
	138 Move W8, [X20+24]
	139 Add W21, W21, 1
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X20, [X31+96]
	142 Move X19, [X31+104]
	143 Move X22, [X31+80]
	144 Move X21, [X31+88]
	145 Move X24, [X31+64]
	146 Move X23, [X31+72]
	147 Move X30, [X31+48]
	148 Move X25, [X31+56]
	149 Move D9, [X31+32]
	150 Move D8, [X31+40]
	151 Move D11, [X31+16]
	152 Move D10, [X31+24]
	153 Add X31, X31, 112
	154 Return 
	155 Call 0x1B6FA1C
	156 Call 0x1B6FA24

Method: System.Void SetRoamingTarget(System.Boolean initialize = False)

Disassembly:
	0x01CE757C LDR X21, [X21 + 0x1C0]
	0x01CE7580 LDR X0, [X21]
	0x01CE7584 LDR W8, [X0 + 0xE0]
	0x01CE7588 CBNZ W8, 0x1CE7590
	0x01CE758C BL 0x1B6E8F8
	0x01CE7590 MOV X0, X19
	0x01CE7594 MOV X1, X31
	0x01CE7598 BL 0x1D697C8
	0x01CE759C LDR X0, [X19 + 0x38]
	0x01CE75A0 CBZ X0, 0x1CE76BC
	0x01CE75A4 MOV X1, X31
	0x01CE75A8 BL 0x1D87040
	0x01CE75AC CMP W0, 0x4
	0x01CE75B0 B.NE 0x1CE75C4
	0x01CE75B4 LDP X20, X19, [X31 + 0x20]
	0x01CE75B8 LDP X30, X21, [X31 + 0x10]
	0x01CE75BC LDR V8, [X31], #0x30
	0x01CE75C0 RET
	0x01CE75C4 LDR X0, [X19 + 0x40]
	0x01CE75C8 CBZ X0, 0x1CE76BC
	0x01CE75CC MOV X1, X31
	0x01CE75D0 BL 0x1D9F538
	0x01CE75D4 TBNZ X0, 0x0, 0x1CE7614
	0x01CE75D8 LDR X0, [X21]
	0x01CE75DC LDR X19, [X19 + 0x40]
	0x01CE75E0 LDR W8, [X0 + 0xE0]
	0x01CE75E4 CBNZ W8, 0x1CE75EC
	0x01CE75E8 BL 0x1B6E8F8
	0x01CE75EC ADRP X8, 0x2269000
	0x01CE75F0 LDR X8, [X8 + 0x2D0]
	0x01CE75F4 MOV X1, X19
	0x01CE75F8 LDP X20, X19, [X31 + 0x20]
	0x01CE75FC LDP X30, X21, [X31 + 0x10]
	0x01CE7600 LDR X0, [X8]
	0x01CE7604 MOVZ W2, 0x1
	0x01CE7608 MOV X3, X31
	0x01CE760C LDR V8, [X31], #0x30
	0x01CE7610 B 0x1D69640
	0x01CE7614 LDR X8, [X19 + 0x38]
	0x01CE7618 CBZ X8, 0x1CE76BC
	0x01CE761C MOV W20, W0
	0x01CE7620 LDR X0, [X8 + 0x50]
	0x01CE7624 CBZ X0, 0x1CE76BC
	0x01CE7628 MOV X1, X31
	0x01CE762C BL 0x1DBEFE4
	0x01CE7630 TBZ X0, 0x0, 0x1CE76B0
	0x01CE7634 LDR X8, [X19 + 0x38]
	0x01CE7638 CBZ X8, 0x1CE76BC
	0x01CE763C LDR X0, [X8 + 0x50]
	0x01CE7640 MOVZ W1, 0xC
	0x01CE7644 MOV X2, X31
	0x01CE7648 BL 0x1DD601C
	0x01CE764C MOV X21, X0
	0x01CE7650 MOVZ W0, 0x1
	0x01CE7654 MOV X1, X31
	0x01CE7658 BL 0x1D29EBC
	0x01CE765C LDR X8, [X19 + 0x40]
	0x01CE7660 CBZ X8, 0x1CE76BC
	0x01CE7664 LDR X8, [X8 + 0x20]
	0x01CE7668 CBZ X8, 0x1CE7674
	0x01CE766C LDR W0, [X8]
	0x01CE7670 B 0x1CE7678
	0x01CE7674 MOV X0, X31
	0x01CE7678 LDR W1, [X19 + 0x68]
	0x01CE767C MOVZ W2, 0x3
	0x01CE7680 MOV X3, X31
	0x01CE7684 BL 0x1DA8258
	0x01CE7688 STUR X0, [X21 + 0x1C]
	0x01CE768C STR S8, [X21 + 0x24]
	0x01CE7690 CBZ X21, 0x1CE76BC
	0x01CE7694 MOVZ W8, 0x60
	0x01CE7698 STR W8, [X21 + 0xC]
	0x01CE769C LDR X0, [X19 + 0x38]
	0x01CE76A0 CBZ X0, 0x1CE76BC
	0x01CE76A4 MOV X1, X21
	0x01CE76A8 MOV X2, X31
	0x01CE76AC BL 0x1D8A710
	0x01CE76B0 ANDS W31, W20, 0x7
	0x01CE76B4 B.NE 0x1CE7554
	0x01CE76B8 B 0x1CE75B4
	0x01CE76BC BL 0x1B6EA1C
	0x01CE76C0 STP D15, D14, [X31 - 0x70]!
	0x01CE76C4 STP D13, D12, [X31 + 0x10]
	0x01CE76C8 STP D11, D10, [X31 + 0x20]
	0x01CE76CC STP D9, D8, [X31 + 0x30]
	0x01CE76D0 STR X30, [X31 + 0x40]
	0x01CE76D4 STP X22, X21, [X31 + 0x50]
	0x01CE76D8 STP X20, X19, [X31 + 0x60]
	0x01CE76DC ADRP X20, 0x253C000
	0x01CE76E0 ADRP X21, 0x2268000
	0x01CE76E4 LDRB W8, [X20 + 0x66D]
	0x01CE76E8 LDR X21, [X21 + 0xD48]
	0x01CE76EC MOV X19, X0
	0x01CE76F0 TBNZ X8, 0x0, 0x1CE7720
	0x01CE76F4 ADRP X0, 0x2266000
	0x01CE76F8 LDR X0, [X0 + 0x800]
	0x01CE76FC BL 0x1B6E7F0
	0x01CE7700 ADRP X0, 0x2268000
	0x01CE7704 LDR X0, [X0 + 0xD48]
	0x01CE7708 BL 0x1B6E7F0
	0x01CE770C ADRP X0, 0x2266000
	0x01CE7710 LDR X0, [X0 + 0x478]
	0x01CE7714 BL 0x1B6E7F0

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0x253D000
	013 Move X22, 0x2267000
	014 Move W8, [X21+1638]
	015 Move X22, [X22+1144]
	016 Move W20, W1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0x226A000
	023 Move X0, [X0+592]
	024 Call 0x1B6F7F0
	025 Move X0, 0x2267000
	026 Move X0, [X0+1144]
	027 Call 0x1B6F7F0
	028 Move W8, 1
	029 Move [X21+1638], W8
	030 Move X0, [X22]
	031 Move X21, [X19+304]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1B6F8F8
	036 Move X0, X21
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Inequality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {69}
	044 Move X8, [X19+304]
	045 Compare X8, 0
	046 JumpIfEqual {141}
	047 Move S8, [X8+40]
	048 Move S9, [X8+44]
	049 Move V10, [X8+48]
	050 Move TEMP, X20
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfEqual {81}
	054 Move X0, [X22]
	055 Move X20, [X19+312]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1B6F8F8
	060 Move X0, X20
	061 Move X1, X31
	062 Move X2, X31
	063 Call Object.op_Inequality, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {83}
	068 Move X0, [X19+312]
	069 Move X0, [X19+208]
	070 Compare X0, 0
	071 JumpIfEqual {141}
	072 Move X1, X31
	073 Call Transform.get_position, X0
	074 Move V8, V0
	075 Move V9, V1
	076 Move V10, V2
	077 Move TEMP, X20
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {54}
	081 Move X0, X19
	082 Call MobController.ResetNavPointsVisited, X0
	083 Move X0, [X19+208]
	084 Compare X0, 0
	085 JumpIfEqual {141}
	086 Move X1, X31
	087 Call Transform.get_position, X0
	088 Move X0, X19
	089 Call MobController.FindClosestNodeFromPosition, X0, X1
	090 Move [X19+304], X0
	091 Compare X0, 0
	092 JumpIfEqual {141}
	093 Move S11, [X0+40]
	094 Move S12, [X0+44]
	095 Move V13, [X0+48]
	096 Move X0, X19
	097 Call MobController.get_searchPrecision, X0
	098 Move V3, V0
	099 Move X0, X19
	100 Move V0, V11
	101 Move V1, V12
	102 Move V2, V13
	103 Call MobController.MarkExploredNodesInRange, X0, X1, V0
	104 Move X8, [X19+296]
	105 Compare X8, 0
	106 JumpIfEqual {141}
	107 Move W8, [X8+24]
	108 Compare W8, 0
	109 JumpIfNotEqual {112}
	110 Move X0, X19
	111 Call MobController.ResetNavPointsVisited, X0
	112 Move X0, X19
	113 Move V0, V8
	114 Move V1, V9
	115 Move V2, V10
	116 Call MobController.FindClosestNodeFromPosition, X0, X1
	117 Move X8, [X19+304]
	118 Move [X19+312], X0
	119 Compare X8, 0
	120 JumpIfEqual {141}
	121 Move X0, [X19+200]
	122 Compare X0, 0
	123 JumpIfEqual {141}
	124 Move S1, [X8+44]
	125 Move S2, [X8+48]
	126 Move V0, [X8+40]
	127 Move X20, [X31+80]
	128 Move X19, [X31+88]
	129 Move X22, [X31+64]
	130 Move X21, [X31+72]
	131 Move X30, [X31+48]
	132 Move D9, [X31+32]
	133 Move D8, [X31+40]
	134 Move D11, [X31+16]
	135 Move D10, [X31+24]
	136 Move X1, X31
	137 Move D13, [X31+96]
	138 Move D12, [X31+104]
	139 Call NavMeshAgent.SetDestination, X0, X1
	140 Return 
	141 Call 0x1B6FA1C

Method: System.Void SetRoamingTarget(UnityEngine.Vector3 position)

Disassembly:
	0x01CE7718 MOVZ W8, 0x1
	0x01CE771C STRB W8, [X20 + 0x66D]
	0x01CE7720 LDR X0, [X21]
	0x01CE7724 LDR W8, [X0 + 0xE0]
	0x01CE7728 CBNZ W8, 0x1CE7734
	0x01CE772C BL 0x1B6E8F8
	0x01CE7730 LDR X0, [X21]
	0x01CE7734 LDR X8, [X0 + 0xB8]
	0x01CE7738 MOV X0, X31
	0x01CE773C LDP S0, S1, [X8 + 0x20]
	0x01CE7740 LDP S2, S3, [X8 + 0x28]
	0x01CE7744 BL 0x3A75B14
	0x01CE7748 LDR X0, [X19 + 0xD8]
	0x01CE774C CBZ X0, 0x1CE7C6C
	0x01CE7750 MOV X1, X31
	0x01CE7754 BL 0x3AA7658
	0x01CE7758 LDR X8, [X19 + 0xB8]
	0x01CE775C CBZ X8, 0x1CE7C6C
	0x01CE7760 LDR V3, [X8 + 0x80]
	0x01CE7764 MOV X0, X31
	0x01CE7768 BL 0x3A7567C
	0x01CE776C LDR X8, [X21]
	0x01CE7770 MOV X0, X31
	0x01CE7774 LDR X8, [X8 + 0xB8]
	0x01CE7778 LDP S0, S1, [X8]
	0x01CE777C LDP S2, S3, [X8 + 0x8]
	0x01CE7780 BL 0x3A75B14
	0x01CE7784 LDR X0, [X19 + 0xD0]
	0x01CE7788 CBZ X0, 0x1CE7C6C
	0x01CE778C MOV X1, X31
	0x01CE7790 BL 0x3AA7658
	0x01CE7794 LDR X0, [X19 + 0xD0]
	0x01CE7798 CBZ X0, 0x1CE7C6C
	0x01CE779C MOV X1, X31
	0x01CE77A0 MOV V8.16B, V0.16B
	0x01CE77A4 MOV V9.16B, V1.16B
	0x01CE77A8 MOV V10.16B, V2.16B
	0x01CE77AC BL 0x3AA7658
	0x01CE77B0 LDR X0, [X19 + 0xD0]
	0x01CE77B4 CBZ X0, 0x1CE7C6C
	0x01CE77B8 MOV X1, X31
	0x01CE77BC MOV V11.16B, V0.16B
	0x01CE77C0 MOV V12.16B, V1.16B
	0x01CE77C4 MOV V13.16B, V2.16B

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move V8, V2
	007 Move V9, V1
	008 Move V10, V0
	009 Move X19, X0
	010 Call MobController.ResetNavPointsVisited, X0
	011 Move X0, X19
	012 Move V0, V10
	013 Move V1, V9
	014 Move V2, V8
	015 Call MobController.FindClosestNodeFromPosition, X0, X1
	016 Move [X19+304], X0
	017 Compare X0, 0
	018 JumpIfEqual {56}
	019 Move S8, [X0+40]
	020 Move S9, [X0+44]
	021 Move V10, [X0+48]
	022 Move X0, X19
	023 Call MobController.get_searchPrecision, X0
	024 Move V3, V0
	025 Move X0, X19
	026 Move V0, V8
	027 Move V1, V9
	028 Move V2, V10
	029 Call MobController.MarkExploredNodesInRange, X0, X1, V0
	030 Move X8, [X19+304]
	031 Compare X8, 0
	032 JumpIfEqual {56}
	033 Move S0, [X8+40]
	034 Move S1, [X8+44]
	035 Move V2, [X8+48]
	036 Move X0, X19
	037 Call MobController.FindClosestNodeFromPosition, X0, X1
	038 Move X8, [X19+304]
	039 Move [X19+312], X0
	040 Compare X8, 0
	041 JumpIfEqual {56}
	042 Move X0, [X19+200]
	043 Compare X0, 0
	044 JumpIfEqual {56}
	045 Move S1, [X8+44]
	046 Move S2, [X8+48]
	047 Move V0, [X8+40]
	048 Move X30, [X31+32]
	049 Move X19, [X31+40]
	050 Move D9, [X31+16]
	051 Move D8, [X31+24]
	052 Move X1, X31
	053 Move V10, [X31+48]
	054 Call NavMeshAgent.SetDestination, X0, X1
	055 Return 
	056 Call 0x1B6FA1C

Method: System.Void UpdateRoaming()

Disassembly:
	0x01CE77C8 BL 0x3AA7AD0
	0x01CE77CC LDR X8, [X19 + 0xB8]
	0x01CE77D0 CBZ X8, 0x1CE7C6C
	0x01CE77D4 LDR X8, [X8 + 0x78]
	0x01CE77D8 CBZ X8, 0x1CE7C6C
	0x01CE77DC LDR W9, [X8 + 0x18]
	0x01CE77E0 CBZ W9, 0x1CE7C70
	0x01CE77E4 LDR V3, [X8 + 0x20]
	0x01CE77E8 MOV X0, X31
	0x01CE77EC FMUL S0, S0, S3
	0x01CE77F0 FMUL S1, S1, S3
	0x01CE77F4 FMUL S2, S2, S3
	0x01CE77F8 FADD S3, S11, S0
	0x01CE77FC FADD S4, S12, S1
	0x01CE7800 FADD S5, S13, S2
	0x01CE7804 MOV V0.16B, V8.16B
	0x01CE7808 MOV V1.16B, V9.16B
	0x01CE780C MOV V2.16B, V10.16B
	0x01CE7810 BL 0x3A755E8
	0x01CE7814 LDR X8, [X19 + 0xB8]
	0x01CE7818 CBZ X8, 0x1CE7C6C
	0x01CE781C LDR V0, [X8 + 0x70]
	0x01CE7820 ADRP X20, 0x253C000
	0x01CE7824 LDRB W8, [X20 + 0x442]
	0x01CE7828 FMOV S1, 0.5
	0x01CE782C FMUL S8, S0, S1
	0x01CE7830 CBNZ W8, 0x1CE7848
	0x01CE7834 ADRP X0, 0x2266000
	0x01CE7838 LDR X0, [X0 + 0x480]
	0x01CE783C BL 0x1B6E7F0
	0x01CE7840 MOVZ W8, 0x1
	0x01CE7844 STRB W8, [X20 + 0x442]
	0x01CE7848 ADRP X22, 0x2266000
	0x01CE784C LDR X22, [X22 + 0x480]
	0x01CE7850 FNEG S0, S8
	0x01CE7854 MOV X0, X31
	0x01CE7858 LDR X8, [X22]
	0x01CE785C LDR X8, [X8 + 0xB8]
	0x01CE7860 LDP S1, S2, [X8 + 0x18]
	0x01CE7864 LDR V3, [X8 + 0x20]
	0x01CE7868 BL 0x3A92AC0
	0x01CE786C LDR X0, [X19 + 0xD0]
	0x01CE7870 CBZ X0, 0x1CE7C6C
	0x01CE7874 MOV X1, X31
	0x01CE7878 MOV V9.16B, V0.16B
	0x01CE787C MOV V10.16B, V1.16B
	0x01CE7880 MOV V11.16B, V2.16B
	0x01CE7884 MOV V12.16B, V3.16B
	0x01CE7888 BL 0x3AA7AD0
	0x01CE788C MOV V4.16B, V0.16B
	0x01CE7890 MOV V5.16B, V1.16B
	0x01CE7894 MOV V6.16B, V2.16B
	0x01CE7898 MOV V0.16B, V9.16B
	0x01CE789C MOV V1.16B, V10.16B
	0x01CE78A0 MOV V2.16B, V11.16B
	0x01CE78A4 MOV V3.16B, V12.16B
	0x01CE78A8 MOV X0, X31
	0x01CE78AC BL 0x3A92D64
	0x01CE78B0 LDRB W8, [X20 + 0x442]
	0x01CE78B4 MOV V10.16B, V0.16B
	0x01CE78B8 MOV V11.16B, V1.16B
	0x01CE78BC MOV V13.16B, V2.16B
	0x01CE78C0 CBNZ W8, 0x1CE78D8
	0x01CE78C4 ADRP X0, 0x2266000
	0x01CE78C8 LDR X0, [X0 + 0x480]
	0x01CE78CC BL 0x1B6E7F0
	0x01CE78D0 MOVZ W8, 0x1
	0x01CE78D4 STRB W8, [X20 + 0x442]
	0x01CE78D8 LDR X8, [X22]
	0x01CE78DC MOV V0.16B, V8.16B
	0x01CE78E0 MOV X0, X31
	0x01CE78E4 LDR X8, [X8 + 0xB8]
	0x01CE78E8 LDP S1, S2, [X8 + 0x18]
	0x01CE78EC LDR V3, [X8 + 0x20]
	0x01CE78F0 BL 0x3A92AC0
	0x01CE78F4 LDR X0, [X19 + 0xD0]
	0x01CE78F8 CBZ X0, 0x1CE7C6C
	0x01CE78FC MOV X1, X31
	0x01CE7900 MOV V8.16B, V0.16B
	0x01CE7904 MOV V9.16B, V1.16B
	0x01CE7908 MOV V12.16B, V2.16B
	0x01CE790C MOV V14.16B, V3.16B
	0x01CE7910 BL 0x3AA7AD0
	0x01CE7914 MOV V4.16B, V0.16B
	0x01CE7918 MOV V5.16B, V1.16B
	0x01CE791C MOV V6.16B, V2.16B
	0x01CE7920 MOV V0.16B, V8.16B
	0x01CE7924 MOV V1.16B, V9.16B
	0x01CE7928 MOV V2.16B, V12.16B
	0x01CE792C MOV V3.16B, V14.16B
	0x01CE7930 MOV X0, X31
	0x01CE7934 BL 0x3A92D64
	0x01CE7938 LDR X0, [X19 + 0xD0]
	0x01CE793C STR S0, [X31 + 0x4C]
	0x01CE7940 CBZ X0, 0x1CE7C6C
	0x01CE7944 MOV X1, X31
	0x01CE7948 MOV V9.16B, V1.16B
	0x01CE794C MOV V12.16B, V2.16B
	0x01CE7950 BL 0x3AA7658
	0x01CE7954 LDR X0, [X19 + 0xD0]
	0x01CE7958 CBZ X0, 0x1CE7C6C
	0x01CE795C MOV X1, X31
	0x01CE7960 MOV V14.16B, V0.16B
	0x01CE7964 MOV V15.16B, V1.16B
	0x01CE7968 MOV V8.16B, V2.16B
	0x01CE796C BL 0x3AA7658
	0x01CE7970 LDR X8, [X19 + 0xB8]
	0x01CE7974 CBZ X8, 0x1CE7C6C
	0x01CE7978 LDR X8, [X8 + 0x78]
	0x01CE797C CBZ X8, 0x1CE7C6C
	0x01CE7980 LDR W9, [X8 + 0x18]
	0x01CE7984 CBZ W9, 0x1CE7C70
	0x01CE7988 LDR V3, [X8 + 0x20]
	0x01CE798C MOV X0, X31
	0x01CE7990 FMUL S4, S10, S3
	0x01CE7994 FMUL S5, S11, S3
	0x01CE7998 FMUL S6, S13, S3
	0x01CE799C FADD S3, S0, S4

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x253D000
	012 Move X21, 0x2267000
	013 Move W8, [X20+1639]
	014 Move X21, [X21+1144]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x2267000
	021 Move X0, [X0+1144]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X20+1639], W8
	025 Move X0, [X21]
	026 Move X20, [X19+304]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1B6F8F8
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {53}
	039 Move X0, [X21]
	040 Move X20, [X19+312]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1B6F8F8
	045 Move X0, X20
	046 Move X1, X31
	047 Move X2, X31
	048 Call Object.op_Equality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {59}
	053 Move X8, [X19]
	054 Move W1, 1
	055 Move X0, X19
	056 Move X9, [X8+776]
	057 Move X2, [X8+784]
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move X8, [X19+304]
	060 Move [X19+181], W31
	061 Compare X8, 0
	062 JumpIfEqual {150}
	063 Move X0, [X19+208]
	064 Compare X0, 0
	065 JumpIfEqual {150}
	066 Move S11, [X8+40]
	067 Move S12, [X8+44]
	068 Move V13, [X8+48]
	069 Move X1, X31
	070 Call Transform.get_position, X0
	071 Move X20, 0x253D000
	072 Move W8, [X20+1286]
	073 Move V8, V0
	074 Move V9, V1
	075 Move V10, V2
	076 Compare W8, 0
	077 JumpIfNotEqual {83}
	078 Move X0, 0x2267000
	079 Move X0, [X0+1160]
	080 Call 0x1B6F7F0
	081 Move W8, 1
	082 Move [X20+1286], W8
	083 Move X8, 0x2267000
	084 Move X8, [X8+1160]
	085 Subtract S11, S11, S8
	086 Subtract S9, S12, S9
	087 Subtract S8, S13, S10
	088 Move X0, [X8]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {93}
	092 Call 0x1B6F8F8
	093 Multiply S0, S11, S11
	094 Multiply S1, S9, S9
	095 Add S0, S0, S1
	096 Multiply S1, S8, S8
	097 Add S0, S1, S0
	098 Move X0, X19
	099 NotImplemented "Instruction FSQRT not yet implemented."
	100 Call MobController.get_searchPrecision, X0
	101 NotImplemented "Instruction FCMP not yet implemented."
	102 Move W8, [X19+180]
	103 Compare W8, 0
	104 JumpIfNotEqual {107}
	105 Move W8, 257
	106 NotImplemented "Instruction STRH not yet implemented."
	107 Move X0, [X19+56]
	108 Compare X0, 0
	109 JumpIfEqual {150}
	110 Move V8, [X19+176]
	111 Move X1, X31
	112 Call NetworkRunner.get_DeltaTime, X0
	113 Move X8, [X19+184]
	114 Add S0, S8, S0
	115 Move [X19+176], S0
	116 Compare X8, 0
	117 JumpIfEqual {150}
	118 Move V1, [X8+68]
	119 NotImplemented "Instruction FCMP not yet implemented."
	120 Move X8, [X19]
	121 Move W9, 256
	122 Move [X19+176], W31
	123 NotImplemented "Instruction STRH not yet implemented."
	124 Move X3, [X8+776]
	125 Move X2, [X8+784]
	126 Move X0, X19
	127 Move X20, [X31+64]
	128 Move X19, [X31+72]
	129 Move X30, [X31+48]
	130 Move X21, [X31+56]
	131 Move D9, [X31+32]
	132 Move D8, [X31+40]
	133 Move D11, [X31+16]
	134 Move D10, [X31+24]
	135 Move W1, W31
	136 Move D13, [X31+80]
	137 Move D12, [X31+88]
	138 CallNoReturn X3
	139 Move X20, [X31+64]
	140 Move X19, [X31+72]
	141 Move X30, [X31+48]
	142 Move X21, [X31+56]
	143 Move D9, [X31+32]
	144 Move D8, [X31+40]
	145 Move D11, [X31+16]
	146 Move D10, [X31+24]
	147 Move D13, [X31+80]
	148 Move D12, [X31+88]
	149 Return 
	150 Call 0x1B6FA1C

Method: System.Void SetTargetPlayer(AnimalCompany.NetPlayer netPlayer)

Disassembly:
	0x01CE79A0 FADD S4, S1, S5
	0x01CE79A4 FADD S5, S2, S6
	0x01CE79A8 MOV V0.16B, V14.16B
	0x01CE79AC MOV V1.16B, V15.16B
	0x01CE79B0 MOV V2.16B, V8.16B
	0x01CE79B4 BL 0x3A755E8
	0x01CE79B8 LDR X0, [X19 + 0xD0]
	0x01CE79BC CBZ X0, 0x1CE7C6C
	0x01CE79C0 MOV X1, X31
	0x01CE79C4 BL 0x3AA7658
	0x01CE79C8 LDR X0, [X19 + 0xD0]
	0x01CE79CC CBZ X0, 0x1CE7C6C
	0x01CE79D0 MOV X1, X31
	0x01CE79D4 MOV V10.16B, V0.16B
	0x01CE79D8 MOV V11.16B, V1.16B
	0x01CE79DC MOV V8.16B, V2.16B
	0x01CE79E0 BL 0x3AA7658
	0x01CE79E4 LDR X8, [X19 + 0xB8]
	0x01CE79E8 CBZ X8, 0x1CE7C6C
	0x01CE79EC LDR X8, [X8 + 0x78]
	0x01CE79F0 CBZ X8, 0x1CE7C6C
	0x01CE79F4 LDR W9, [X8 + 0x18]
	0x01CE79F8 CBZ W9, 0x1CE7C70
	0x01CE79FC LDR V3, [X8 + 0x20]
	0x01CE7A00 LDR V4, [X31 + 0x4C]
	0x01CE7A04 MOV X0, X31
	0x01CE7A08 FMUL S5, S9, S3
	0x01CE7A0C FMUL S4, S4, S3
	0x01CE7A10 FMUL S6, S12, S3
	0x01CE7A14 FADD S3, S0, S4
	0x01CE7A18 FADD S4, S1, S5
	0x01CE7A1C FADD S5, S2, S6
	0x01CE7A20 MOV V0.16B, V10.16B
	0x01CE7A24 MOV V1.16B, V11.16B
	0x01CE7A28 MOV V2.16B, V8.16B
	0x01CE7A2C BL 0x3A755E8
	0x01CE7A30 LDR X8, [X21]
	0x01CE7A34 MOV X0, X31
	0x01CE7A38 LDR X8, [X8 + 0xB8]
	0x01CE7A3C LDP S0, S1, [X8 + 0x10]
	0x01CE7A40 LDP S2, S3, [X8 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x253D000
	007 Move X21, 0x2267000
	008 Move W8, [X22+1640]
	009 Move X21, [X21+1144]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2267000
	017 Move X0, [X0+1144]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X22+1640], W8
	021 Move [X19+320], X20
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1B6F8F8
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {44}
	035 Compare X20, 0
	036 JumpIfEqual {56}
	037 Move X8, [X20+64]
	038 Compare X8, 0
	039 JumpIfEqual {56}
	040 Move X8, [X8+32]
	041 Compare X8, 0
	042 JumpIfEqual {47}
	043 Move W1, [X8]
	044 Move TEMP, 0
	045 Not TEMP
	046 Move W1, TEMP
	047 Move W1, W31
	048 Move X0, X19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Call MobController.set_targetPlayerID, X0, X1
	055 Return 
	056 Call 0x1B6FA1C

Method: System.Void UpdateChasing()

Disassembly:
	0x01CE7A44 BL 0x3A75B14
	0x01CE7A48 LDR X0, [X19 + 0xD0]
	0x01CE7A4C CBZ X0, 0x1CE7C6C
	0x01CE7A50 MOV X1, X31
	0x01CE7A54 BL 0x3AA7658
	0x01CE7A58 ADRP X8, 0xFFFFFFFFFEDC2000
	0x01CE7A5C LDR V8, [X8 + 0xD30]
	0x01CE7A60 MOV X0, X31
	0x01CE7A64 MOV V3.16B, V8.16B
	0x01CE7A68 BL 0x3A7571C
	0x01CE7A6C LDR X8, [X21]
	0x01CE7A70 MOV X0, X31
	0x01CE7A74 LDR X8, [X8 + 0xB8]
	0x01CE7A78 LDP S0, S1, [X8 + 0x90]
	0x01CE7A7C LDP S2, S3, [X8 + 0x98]
	0x01CE7A80 BL 0x3A75B14
	0x01CE7A84 LDR X0, [X19 + 0xC8]
	0x01CE7A88 CBZ X0, 0x1CE7C6C
	0x01CE7A8C ADRP X20, 0x2266000
	0x01CE7A90 LDR X20, [X20 + 0x800]
	0x01CE7A94 MOV X1, X31
	0x01CE7A98 BL 0x3A4A8AC
	0x01CE7A9C FMOV S3, 0.25
	0x01CE7AA0 MOV X0, X31
	0x01CE7AA4 BL 0x3A7571C
	0x01CE7AA8 LDR X0, [X20]
	0x01CE7AAC LDR W8, [X0 + 0xE0]
	0x01CE7AB0 CBNZ W8, 0x1CE7AB8
	0x01CE7AB4 BL 0x1B6E8F8
	0x01CE7AB8 MOV X0, X31
	0x01CE7ABC BL 0x3A6A5FC
	0x01CE7AC0 TBZ X0, 0x0, 0x1CE7C4C
	0x01CE7AC4 ADRP X22, 0x2266000
	0x01CE7AC8 LDR X22, [X22 + 0x478]
	0x01CE7ACC LDR X20, [X19 + 0x130]
	0x01CE7AD0 LDR X0, [X22]
	0x01CE7AD4 LDR W8, [X0 + 0xE0]
	0x01CE7AD8 CBNZ W8, 0x1CE7AE0
	0x01CE7ADC BL 0x1B6E8F8
	0x01CE7AE0 MOV X0, X20
	0x01CE7AE4 MOV X1, X31
	0x01CE7AE8 MOV X2, X31
	0x01CE7AEC BL 0x3A9D6EC
	0x01CE7AF0 TBZ X0, 0x0, 0x1CE7BF4
	0x01CE7AF4 LDR X0, [X21]
	0x01CE7AF8 LDR W8, [X0 + 0xE0]
	0x01CE7AFC CBNZ W8, 0x1CE7B08
	0x01CE7B00 BL 0x1B6E8F8
	0x01CE7B04 LDR X0, [X21]
	0x01CE7B08 LDR X8, [X0 + 0xB8]
	0x01CE7B0C MOV X0, X31
	0x01CE7B10 LDP S0, S1, [X8 + 0x50]
	0x01CE7B14 LDP S2, S3, [X8 + 0x58]
	0x01CE7B18 BL 0x3A75B14
	0x01CE7B1C LDR X0, [X19 + 0xD0]
	0x01CE7B20 CBZ X0, 0x1CE7C6C
	0x01CE7B24 MOV X1, X31
	0x01CE7B28 BL 0x3AA7658
	0x01CE7B2C LDR X8, [X19 + 0x130]
	0x01CE7B30 CBZ X8, 0x1CE7C6C
	0x01CE7B34 LDP S3, S4, [X8 + 0x28]
	0x01CE7B38 LDR V5, [X8 + 0x30]
	0x01CE7B3C MOV X0, X31
	0x01CE7B40 BL 0x3A755E8
	0x01CE7B44 LDR X8, [X19 + 0x130]
	0x01CE7B48 CBZ X8, 0x1CE7C6C
	0x01CE7B4C LDP S0, S1, [X8 + 0x28]
	0x01CE7B50 LDR V2, [X8 + 0x30]
	0x01CE7B54 MOV V3.16B, V8.16B
	0x01CE7B58 MOV X0, X31
	0x01CE7B5C BL 0x3A7571C
	0x01CE7B60 LDR X0, [X22]
	0x01CE7B64 LDR X20, [X19 + 0x138]
	0x01CE7B68 LDR W8, [X0 + 0xE0]
	0x01CE7B6C CBNZ W8, 0x1CE7B74
	0x01CE7B70 BL 0x1B6E8F8
	0x01CE7B74 MOV X0, X20
	0x01CE7B78 MOV X1, X31
	0x01CE7B7C MOV X2, X31
	0x01CE7B80 BL 0x3A9D6EC
	0x01CE7B84 TBZ X0, 0x0, 0x1CE7BF4
	0x01CE7B88 LDR X0, [X21]
	0x01CE7B8C LDR W8, [X0 + 0xE0]
	0x01CE7B90 CBNZ W8, 0x1CE7B9C
	0x01CE7B94 BL 0x1B6E8F8
	0x01CE7B98 LDR X0, [X21]
	0x01CE7B9C LDR X8, [X0 + 0xB8]
	0x01CE7BA0 MOV X0, X31
	0x01CE7BA4 LDP S0, S1, [X8 + 0x60]
	0x01CE7BA8 LDP S2, S3, [X8 + 0x68]
	0x01CE7BAC BL 0x3A75B14
	0x01CE7BB0 LDR X8, [X19 + 0x130]
	0x01CE7BB4 CBZ X8, 0x1CE7C6C
	0x01CE7BB8 LDR X9, [X19 + 0x138]
	0x01CE7BBC CBZ X9, 0x1CE7C6C
	0x01CE7BC0 LDP S1, S2, [X8 + 0x2C]
	0x01CE7BC4 LDR V0, [X8 + 0x28]
	0x01CE7BC8 LDP S3, S4, [X9 + 0x28]
	0x01CE7BCC LDR V5, [X9 + 0x30]
	0x01CE7BD0 MOV X0, X31
	0x01CE7BD4 BL 0x3A755E8
	0x01CE7BD8 LDR X8, [X19 + 0x138]
	0x01CE7BDC CBZ X8, 0x1CE7C6C
	0x01CE7BE0 LDP S0, S1, [X8 + 0x28]
	0x01CE7BE4 LDR V2, [X8 + 0x30]
	0x01CE7BE8 MOV V3.16B, V8.16B
	0x01CE7BEC MOV X0, X31
	0x01CE7BF0 BL 0x3A7571C
	0x01CE7BF4 LDR X0, [X21]
	0x01CE7BF8 LDR W8, [X0 + 0xE0]
	0x01CE7BFC CBNZ W8, 0x1CE7C08
	0x01CE7C00 BL 0x1B6E8F8
	0x01CE7C04 LDR X0, [X21]
	0x01CE7C08 LDR X8, [X0 + 0xB8]
	0x01CE7C0C MOV X0, X31
	0x01CE7C10 LDP S0, S1, [X8 + 0xC0]
	0x01CE7C14 LDP S2, S3, [X8 + 0xC8]
	0x01CE7C18 BL 0x3A75B14
	0x01CE7C1C MOV X0, X19
	0x01CE7C20 BL 0x1CE4BFC
	0x01CE7C24 LDP X20, X19, [X31 + 0x60]
	0x01CE7C28 LDP X22, X21, [X31 + 0x50]
	0x01CE7C2C LDR X30, [X31 + 0x40]
	0x01CE7C30 LDP D9, D8, [X31 + 0x30]
	0x01CE7C34 LDP D11, D10, [X31 + 0x20]
	0x01CE7C38 LDP D13, D12, [X31 + 0x10]
	0x01CE7C3C FMOV S3, 0.5
	0x01CE7C40 MOV X0, X31
	0x01CE7C44 LDP D15, D14, [X31], #0x70
	0x01CE7C48 B 0x3A7567C
	0x01CE7C4C LDP X20, X19, [X31 + 0x60]
	0x01CE7C50 LDP X22, X21, [X31 + 0x50]
	0x01CE7C54 LDR X30, [X31 + 0x40]
	0x01CE7C58 LDP D9, D8, [X31 + 0x30]
	0x01CE7C5C LDP D11, D10, [X31 + 0x20]
	0x01CE7C60 LDP D13, D12, [X31 + 0x10]
	0x01CE7C64 LDP D15, D14, [X31], #0x70
	0x01CE7C68 RET
	0x01CE7C6C BL 0x1B6EA1C
	0x01CE7C70 BL 0x1B6EA24
	0x01CE7C74 SUB X31, X31, 0x90
	0x01CE7C78 STR D10, [X31 + 0x40]
	0x01CE7C7C STP D9, D8, [X31 + 0x50]
	0x01CE7C80 STP X30, X23, [X31 + 0x60]
	0x01CE7C84 STP X22, X21, [X31 + 0x70]
	0x01CE7C88 STP X20, X19, [X31 + 0x80]
	0x01CE7C8C ADRP X21, 0x253C000
	0x01CE7C90 ADRP X20, 0x2266000
	0x01CE7C94 LDRB W8, [X21 + 0x66E]
	0x01CE7C98 LDR X20, [X20 + 0x800]
	0x01CE7C9C MOV X19, X0
	0x01CE7CA0 TBNZ X8, 0x0, 0x1CE7CF4
	0x01CE7CA4 ADRP X0, 0x2266000
	0x01CE7CA8 LDR X0, [X0 + 0x800]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x253D000
	008 Move X23, 0x2267000
	009 Move W8, [X20+1641]
	010 Move X23, [X23+1144]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x2269000
	017 Move X0, [X0+3872]
	018 Call 0x1B6F7F0
	019 Move X0, 0x2269000
	020 Move X0, [X0+3632]
	021 Call 0x1B6F7F0
	022 Move X0, 0x2269000
	023 Move X0, [X0+3568]
	024 Call 0x1B6F7F0
	025 Move X0, 0x2268000
	026 Move X0, [X0+680]
	027 Call 0x1B6F7F0
	028 Move X0, 0x2267000
	029 Move X0, [X0+1144]
	030 Call 0x1B6F7F0
	031 Move W8, 1
	032 Move [X20+1641], W8
	033 Move X0, [X23]
	034 Move X21, [X19+320]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1B6F8F8
	039 Move X0, X21
	040 Move X1, X31
	041 Move X2, X31
	042 Add X20, X19, 320
	043 Call Object.op_Inequality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {63}
	048 Move X0, [X20]
	049 Compare X0, 0
	050 JumpIfEqual {196}
	051 Move X1, X31
	052 Call NetPlayer.get_isDie, X0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {63}
	057 Move X8, [X19]
	058 Move X0, X19
	059 Move X1, X31
	060 Move X9, [X8+824]
	061 Move X2, [X8+832]
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Move X0, [X23]
	064 Move X21, [X20]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1B6F8F8
	069 Move X0, X21
	070 Move X1, X31
	071 Move X2, X31
	072 Call Object.op_Equality, X0, X1
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {104}
	077 Move X0, X19
	078 Call MobController.get_targetPlayerID, X0
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X0, X19
	081 Call MobController.get_targetPlayerID, X0
	082 Move X8, 0x2268000
	083 Move X8, [X8+680]
	084 Move W21, W0
	085 Move X8, [X8]
	086 Move W9, [X8+224]
	087 Compare W9, 0
	088 JumpIfNotEqual {91}
	089 Move X0, X8
	090 Call 0x1B6F8F8
	091 Move W0, W21
	092 Move X1, X20
	093 Move X2, X31
	094 Call NetPlayer.TryGetPlayerByID, X0, X1
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfEqual {104}
	099 Move TEMP, 0
	100 Not TEMP
	101 Move W1, TEMP
	102 Move X0, X19
	103 Call MobController.set_targetPlayerID, X0, X1
	104 Move X0, X19
	105 Call MobDetectionUtil.GetPlayersBySight, X0
	106 Move X8, [X23]
	107 Move X22, [X19+320]
	108 Move X21, X0
	109 Move W9, [X8+224]
	110 Compare W9, 0
	111 JumpIfNotEqual {114}
	112 Move X0, X8
	113 Call 0x1B6F8F8
	114 Move X0, X22
	115 Move X1, X31
	116 Move X2, X31
	117 Call Object.op_Inequality, X0, X1
	118 Move TEMP, X0
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfNotEqual {137}
	122 Compare X21, 0
	123 JumpIfEqual {196}
	124 Move X8, 0x2269000
	125 Move X1, [X20]
	126 Move X8, [X8+3872]
	127 Move X0, X21
	128 Move X2, [X8]
	129 Call List`1<Object>.Contains, X0, X1
	130 Move TEMP, X0
	131 And TEMP, TEMP, 1
	132 Compare TEMP, 1
	133 JumpIfNotEqual {139}
	134 Move S0, W31
	135 Move X0, X19
	136 Call MobController.set__timerToChasing, X0, V0
	137 Compare X21, 0
	138 JumpIfEqual {196}
	139 Move W1, [X21+24]
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move W0, W31
	142 Move X2, X31
	143 Call Random.Range, X0, X1
	144 Move X8, 0x2269000
	145 Move X8, [X8+3568]
	146 Move W1, W0
	147 Move X0, X21
	148 Move X2, [X8]
	149 Call List`1<Object>.get_Item, X0, X1
	150 Move X1, X0
	151 Move X1, X31
	152 Move X8, [X19]
	153 Move X0, X19
	154 Move X9, [X8+824]
	155 Move X2, [X8+832]
	156 NotImplemented "Instruction BLR not yet implemented."
	157 Move X0, [X23]
	158 Move X21, [X20]
	159 Move W8, [X0+224]
	160 Compare W8, 0
	161 JumpIfNotEqual {163}
	162 Call 0x1B6F8F8
	163 Move X0, X21
	164 Move X1, X31
	165 Move X2, X31
	166 Call Object.op_Inequality, X0, X1
	167 Move TEMP, X0
	168 And TEMP, TEMP, 1
	169 Compare TEMP, 1
	170 JumpIfNotEqual {189}
	171 Move X0, [X20]
	172 Compare X0, 0
	173 JumpIfEqual {196}
	174 Move X1, X31
	175 Call Component.get_transform, X0
	176 Compare X0, 0
	177 JumpIfEqual {196}
	178 Move X1, X31
	179 Call Transform.get_position, X0
	180 Move X0, X19
	181 Move X20, [X31+32]
	182 Move X19, [X31+40]
	183 Move X22, [X31+16]
	184 Move X21, [X31+24]
	185 Move X30, [X31+48]
	186 Move X23, [X31+56]
	187 Call MobController.set__positionThatPlayerStayed, X0, X1
	188 Return 
	189 Move X20, [X31+32]
	190 Move X19, [X31+40]
	191 Move X22, [X31+16]
	192 Move X21, [X31+24]
	193 Move X30, [X31+48]
	194 Move X23, [X31+56]
	195 Return 
	196 Call 0x1B6FA1C

Method: System.Void RPC_Hit(System.Int32 damage)

Disassembly:
	0x01CE819C MOV X0, X19
	0x01CE81A0 BL 0x1CE45AC
	0x01CE81A4 LDR W1, [X19 + 0xA0]
	0x01CE81A8 MOV X0, X19
	0x01CE81AC BL 0x1CE466C
	0x01CE81B0 LDR V0, [X19 + 0xA4]
	0x01CE81B4 MOV X0, X19
	0x01CE81B8 BL 0x1CE472C
	0x01CE81BC LDR V0, [X19 + 0xA8]
	0x01CE81C0 MOV X0, X19
	0x01CE81C4 BL 0x1CE47EC
	0x01CE81C8 LDR V0, [X19 + 0xAC]
	0x01CE81CC MOV X0, X19
	0x01CE81D0 BL 0x1CE48AC
	0x01CE81D4 LDR V0, [X19 + 0x148]
	0x01CE81D8 LDR V1, [X19 + 0x14C]
	0x01CE81DC LDR V2, [X19 + 0x150]
	0x01CE81E0 MOV X0, X19
	0x01CE81E4 LDP X30, X19, [X31], #0x10
	0x01CE81E8 B 0x1CE4C60
	0x01CE81EC STP X30, X19, [X31 - 0x10]!
	0x01CE81F0 MOV X19, X0
	0x01CE81F4 BL 0x1CE4000
	0x01CE81F8 AND W8, W0, 0x1
	0x01CE81FC MOV X0, X19
	0x01CE8200 STRB W8, [X19 + 0x80]
	0x01CE8204 BL 0x1CE40CC
	0x01CE8208 STR W0, [X19 + 0x84]
	0x01CE820C MOV X0, X19
	0x01CE8210 BL 0x1CE418C
	0x01CE8214 STR W0, [X19 + 0x88]
	0x01CE8218 MOV X0, X19
	0x01CE821C BL 0x1CE424C
	0x01CE8220 MOV X0, X19
	0x01CE8224 STR S0, [X19 + 0x8C]
	0x01CE8228 BL 0x1CE430C
	0x01CE822C MOV X0, X19
	0x01CE8230 STR S0, [X19 + 0x90]
	0x01CE8234 BL 0x1CE43CC
	0x01CE8238 MOV X0, X19
	0x01CE823C STR S0, [X19 + 0x94]
	0x01CE8240 BL 0x1CE448C
	0x01CE8244 MOV X0, X19
	0x01CE8248 STR S0, [X19 + 0x98]
	0x01CE824C BL 0x1CE454C
	0x01CE8250 MOV X0, X19
	0x01CE8254 STR S0, [X19 + 0x9C]
	0x01CE8258 BL 0x1CE460C
	0x01CE825C STR W0, [X19 + 0xA0]
	0x01CE8260 MOV X0, X19
	0x01CE8264 BL 0x1CE46CC
	0x01CE8268 MOV X0, X19
	0x01CE826C STR S0, [X19 + 0xA4]
	0x01CE8270 BL 0x1CE478C
	0x01CE8274 MOV X0, X19
	0x01CE8278 STR S0, [X19 + 0xA8]
	0x01CE827C BL 0x1CE484C
	0x01CE8280 MOV X0, X19
	0x01CE8284 STR S0, [X19 + 0xAC]
	0x01CE8288 BL 0x1CE4BFC
	0x01CE828C STR S0, [X19 + 0x148]
	0x01CE8290 STR S1, [X19 + 0x14C]
	0x01CE8294 STR S2, [X19 + 0x150]
	0x01CE8298 LDP X30, X19, [X31], #0x10
	0x01CE829C RET
	0x01CE82A0 STP X30, X21, [X31 - 0x20]!
	0x01CE82A4 STP X20, X19, [X31 + 0x10]
	0x01CE82A8 ADRP X21, 0x253B000
	0x01CE82AC LDRB W8, [X21 + 0x671]
	0x01CE82B0 MOV X20, X1
	0x01CE82B4 MOV X19, X0
	0x01CE82B8 TBNZ X8, 0x0, 0x1CE82D0
	0x01CE82BC ADRP X0, 0x2266000
	0x01CE82C0 LDR X0, [X0 + 0xD78]
	0x01CE82C4 BL 0x1B6E7F0
	0x01CE82C8 MOVZ W8, 0x1
	0x01CE82CC STRB W8, [X21 + 0x671]
	0x01CE82D0 MOVZ W0, 0x1
	0x01CE82D4 MOV X1, X31
	0x01CE82D8 MOVZ W21, 0x1
	0x01CE82DC BL 0x1D29EBC
	0x01CE82E0 CBZ X19, 0x1CE833C
	0x01CE82E4 ADRP X8, 0x2266000
	0x01CE82E8 LDR X8, [X8 + 0xD78]
	0x01CE82EC LDR W1, [X20 + 0x24]
	0x01CE82F0 STRB W21, [X19 + 0x58]
	0x01CE82F4 LDR X9, [X19]
	0x01CE82F8 LDR X8, [X8]
	0x01CE82FC LDRB W11, [X9 + 0x130]
	0x01CE8300 LDRB W10, [X8 + 0x130]
	0x01CE8304 CMP W11, W10
	0x01CE8308 B.CC 0x1CE8330
	0x01CE830C LDR X9, [X9 + 0xC8]
	0x01CE8310 ADD X9, X9, X10, 0x3, LSL
	0x01CE8314 LDUR X9, [X9 - 0x8]
	0x01CE8318 CMP X9, X8
	0x01CE831C B.NE 0x1CE8330
	0x01CE8320 MOV X0, X19
	0x01CE8324 LDP X20, X19, [X31 + 0x10]
	0x01CE8328 LDP X30, X21, [X31], #0x20
	0x01CE832C B 0x1CE719C
	0x01CE8330 MOV X0, X19
	0x01CE8334 MOV X1, X8
	0x01CE8338 BL 0x1B6ECDC
	0x01CE833C BL 0x1B6EA1C
	0x01CE8340 STR X30, [X31 - 0x20]!
	0x01CE8344 STP X20, X19, [X31 + 0x10]
	0x01CE8348 ADRP X20, 0x253B000
	0x01CE834C LDRB W8, [X20 + 0x672]
	0x01CE8350 MOV X19, X0
	0x01CE8354 TBNZ X8, 0x0, 0x1CE836C
	0x01CE8358 ADRP X0, 0x2266000
	0x01CE835C LDR X0, [X0 + 0xD78]
	0x01CE8360 BL 0x1B6E7F0
	0x01CE8364 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x253C000
	006 Move W8, [X21+1642]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x2267000
	014 Move X0, [X0+448]
	015 Call 0x1B6F7F0
	016 Move X0, 0x2269000
	017 Move X0, [X0+704]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X21+1642], W8
	021 Move W8, [X19+88]
	022 Compare W8, 0
	023 JumpIfEqual {44}
	024 Move [X19+88], W31
	025 Move X0, X19
	026 Call MobController.get_health, X0
	027 Subtract W1, W0, W20
	028 Move X0, X19
	029 Call MobController.set_health, X0, X1
	030 Move X0, X19
	031 Call MobController.get_health, X0
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X19
	034 Move W1, W31
	035 Call MobController.set_health, X0, X1
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move W1, 1
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call MobController.set_isDie, X0, X1
	043 Return 
	044 Move X21, 0x2267000
	045 Move X21, [X21+448]
	046 Move X0, [X21]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1B6F8F8
	051 Move X0, X19
	052 Move X1, X31
	053 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	054 Move X0, [X19+56]
	055 Compare X0, 0
	056 JumpIfEqual {145}
	057 Move X1, X31
	058 Call NetworkRunner.get_Stage, X0
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Return 
	065 Move X0, [X19+64]
	066 Compare X0, 0
	067 JumpIfEqual {145}
	068 Move X1, X31
	069 Call NetworkObject.GetLocalAuthorityMask, X0
	070 And W31, W0, 7
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {25}
	075 Move X8, [X19+56]
	076 Compare X8, 0
	077 JumpIfEqual {145}
	078 Move X0, [X8+80]
	079 Compare X0, 0
	080 JumpIfEqual {145}
	081 Move X1, X31
	082 Call Simulation.HasAnyActiveConnections, X0
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfNotEqual {60}
	087 Move X8, [X19+56]
	088 Compare X8, 0
	089 JumpIfEqual {145}
	090 Move X0, [X8+80]
	091 Move W1, 12
	092 Move X2, X31
	093 Call SimulationMessage.Allocate, X0, X1
	094 Move X21, X0
	095 Move W0, 1
	096 Move X1, X31
	097 Call Assert.Check, X0
	098 Move X8, [X19+64]
	099 Compare X8, 0
	100 JumpIfEqual {145}
	101 Move X8, [X8+32]
	102 Compare X8, 0
	103 JumpIfEqual {123}
	104 Move W0, [X8]
	105 Move X0, [X21]
	106 Move X19, [X19+64]
	107 Move W8, [X0+224]
	108 Compare W8, 0
	109 JumpIfNotEqual {111}
	110 Call 0x1B6F8F8
	111 Move X8, 0x2269000
	112 Move X8, [X8+704]
	113 Move X1, X19
	114 Move X20, [X31+16]
	115 Move X19, [X31+24]
	116 Move W2, 7
	117 Move X0, [X8]
	118 Move X3, X31
	119 Move X30, [X31+32]
	120 Move X21, [X31+40]
	121 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	122 Return 
	123 Move X0, X31
	124 Move W1, [X19+104]
	125 Move W2, 1
	126 Move X3, X31
	127 Call RpcHeader.Create, X0, X1, X2
	128 Move [X21+28], X0
	129 Move [X21+36], W20
	130 Compare X21, 0
	131 JumpIfEqual {145}
	132 Move W8, 96
	133 Move [X21+12], W8
	134 Move X0, [X19+56]
	135 Compare X0, 0
	136 JumpIfEqual {145}
	137 Move X20, [X31+16]
	138 Move X19, [X31+24]
	139 Move X1, X21
	140 Move X2, X31
	141 Move X30, [X31+32]
	142 Move X21, [X31+40]
	143 Call NetworkRunner.SendRpc, X0, X1
	144 Return 
	145 Call 0x1B6FA1C

Method: System.Void Hit(System.Int32 damage, UnityEngine.Vector3 position, AnimalCompany.RandomSFX hitSound, AnimalCompany.RandomSFX killSound, UnityEngine.Vector3 force, System.String hitName)

Disassembly:
	0x01CE8368 STRB W8, [X20 + 0x672]

ISIL:
	001 Call MobController.RPC_Hit, X0, X1
	002 Return 

Method: System.Void RPC_SetViewIdle()

Disassembly:
	0x01CE836C MOVZ W0, 0x1
	0x01CE8370 MOV X1, X31
	0x01CE8374 MOVZ W20, 0x1
	0x01CE8378 BL 0x1D29EBC
	0x01CE837C CBZ X19, 0x1CE83D0
	0x01CE8380 ADRP X9, 0x2266000
	0x01CE8384 LDR X9, [X9 + 0xD78]
	0x01CE8388 STRB W20, [X19 + 0x58]
	0x01CE838C LDR X8, [X19]
	0x01CE8390 LDR X1, [X9]
	0x01CE8394 LDRB W10, [X8 + 0x130]
	0x01CE8398 LDRB W9, [X1 + 0x130]
	0x01CE839C CMP W10, W9
	0x01CE83A0 B.CC 0x1CE83C8
	0x01CE83A4 LDR X8, [X8 + 0xC8]
	0x01CE83A8 ADD X8, X8, X9, 0x3, LSL
	0x01CE83AC LDUR X8, [X8 - 0x8]
	0x01CE83B0 CMP X8, X1
	0x01CE83B4 B.NE 0x1CE83C8
	0x01CE83B8 MOV X0, X19
	0x01CE83BC LDP X20, X19, [X31 + 0x10]
	0x01CE83C0 LDR X30, [X31], #0x20
	0x01CE83C4 B 0x1CE736C
	0x01CE83C8 MOV X0, X19
	0x01CE83CC BL 0x1B6ECDC
	0x01CE83D0 BL 0x1B6EA1C
	0x01CE83D4 STP X30, X21, [X31 - 0x20]!
	0x01CE83D8 STP X20, X19, [X31 + 0x10]
	0x01CE83DC ADRP X21, 0x253B000
	0x01CE83E0 LDRB W8, [X21 + 0x673]
	0x01CE83E4 MOV X20, X1
	0x01CE83E8 MOV X19, X0
	0x01CE83EC TBNZ X8, 0x0, 0x1CE8404
	0x01CE83F0 ADRP X0, 0x2266000
	0x01CE83F4 LDR X0, [X0 + 0xD78]
	0x01CE83F8 BL 0x1B6E7F0
	0x01CE83FC MOVZ W8, 0x1
	0x01CE8400 STRB W8, [X21 + 0x673]
	0x01CE8404 MOVZ W0, 0x1
	0x01CE8408 MOV X1, X31
	0x01CE840C MOVZ W21, 0x1
	0x01CE8410 BL 0x1D29EBC
	0x01CE8414 CBZ X19, 0x1CE846C
	0x01CE8418 ADRP X9, 0x2266000
	0x01CE841C LDR X9, [X9 + 0xD78]
	0x01CE8420 LDR V0, [X20 + 0x24]
	0x01CE8424 STRB W21, [X19 + 0x58]
	0x01CE8428 LDR X8, [X19]
	0x01CE842C LDR X1, [X9]
	0x01CE8430 LDRB W10, [X8 + 0x130]
	0x01CE8434 LDRB W9, [X1 + 0x130]
	0x01CE8438 CMP W10, W9
	0x01CE843C B.CC 0x1CE8464
	0x01CE8440 LDR X8, [X8 + 0xC8]
	0x01CE8444 ADD X8, X8, X9, 0x3, LSL
	0x01CE8448 LDUR X8, [X8 - 0x8]
	0x01CE844C CMP X8, X1
	0x01CE8450 B.NE 0x1CE8464
	0x01CE8454 MOV X0, X19
	0x01CE8458 LDP X20, X19, [X31 + 0x10]
	0x01CE845C LDP X30, X21, [X31], #0x20
	0x01CE8460 B 0x1CE7508
	0x01CE8464 MOV X0, X19
	0x01CE8468 BL 0x1B6ECDC
	0x01CE846C BL 0x1B6EA1C
	0x01CE8470 LDR V0, [X0 + 0x48]
	0x01CE8474 FMUL S0, S0, S0
	0x01CE8478 RET
	0x01CE847C LDR V0, [X0 + 0x4C]
	0x01CE8480 FMUL S0, S0, S0
	0x01CE8484 RET
	0x01CE8488 LDR V0, [X0 + 0x80]
	0x01CE848C FMUL S0, S0, S0
	0x01CE8490 RET
	0x01CE8494 STP X30, X21, [X31 - 0x20]!
	0x01CE8498 STP X20, X19, [X31 + 0x10]
	0x01CE849C ADRP X21, 0x253B000
	0x01CE84A0 ADRP X20, 0x2266000
	0x01CE84A4 LDRB W8, [X21 + 0x674]
	0x01CE84A8 LDR X20, [X20 + 0xFC0]
	0x01CE84AC MOV X19, X0
	0x01CE84B0 TBNZ X8, 0x0, 0x1CE84C8
	0x01CE84B4 ADRP X0, 0x2266000
	0x01CE84B8 LDR X0, [X0 + 0xFC0]
	0x01CE84BC BL 0x1B6E7F0
	0x01CE84C0 MOVZ W8, 0x1
	0x01CE84C4 STRB W8, [X21 + 0x674]
	0x01CE84C8 ADRP X8, 0xFFFFFFFFFEDC5000
	0x01CE84CC LDR V0, [X8 + 0x1C8]
	0x01CE84D0 MOVZ W8, 0x3F800000
	0x01CE84D4 STR W8, [X19 + 0x28]
	0x01CE84D8 MOVZ W1, 0x1
	0x01CE84DC STR D0, [X19 + 0x20]
	0x01CE84E0 LDR X0, [X20]
	0x01CE84E4 BL 0x1B6E868
	0x01CE84E8 CBZ X0, 0x1CE85F8
	0x01CE84EC LDR W8, [X0 + 0x18]
	0x01CE84F0 CBZ W8, 0x1CE85F4
	0x01CE84F4 MOVZ W8, 0x40400000
	0x01CE84F8 STR W8, [X0 + 0x20]
	0x01CE84FC STR X0, [X19 + 0x30]
	0x01CE8500 LDR X0, [X20]
	0x01CE8504 MOVZ W1, 0x2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x253C000
	006 Move W8, [X20+1643]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x2267000
	013 Move X0, [X0+448]
	014 Call 0x1B6F7F0
	015 Move X0, 0x2269000
	016 Move X0, [X0+712]
	017 Call 0x1B6F7F0
	018 Move W8, 1
	019 Move [X20+1643], W8
	020 Move W8, [X19+88]
	021 Compare W8, 0
	022 JumpIfEqual {35}
	023 Move [X19+88], W31
	024 Move X0, [X19+192]
	025 Compare X0, 0
	026 JumpIfEqual {131}
	027 Move X8, [X0]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, [X8+440]
	031 Move X1, [X8+448]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 CallNoReturn X2
	035 Move X21, 0x2267000
	036 Move X21, [X21+448]
	037 Move X0, [X21]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1B6F8F8
	042 Move X0, X19
	043 Move X1, X31
	044 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	045 Move X0, [X19+56]
	046 Compare X0, 0
	047 JumpIfEqual {131}
	048 Move X1, X31
	049 Call NetworkRunner.get_Stage, X0
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return 
	056 Move X0, [X19+64]
	057 Compare X0, 0
	058 JumpIfEqual {131}
	059 Move X1, X31
	060 Call NetworkObject.GetLocalAuthorityMask, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {83}
	065 Move X0, [X21]
	066 Move X19, [X19+64]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1B6F8F8
	071 Move X8, 0x2269000
	072 Move X8, [X8+712]
	073 Move X1, X19
	074 Move X20, [X31+16]
	075 Move X19, [X31+24]
	076 Move W2, 1
	077 Move X0, [X8]
	078 Move X3, X31
	079 Move X30, [X31+32]
	080 Move X21, [X31+40]
	081 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	082 Return 
	083 Move X8, [X19+56]
	084 Compare X8, 0
	085 JumpIfEqual {131}
	086 Move W20, W0
	087 Move X0, [X8+80]
	088 Compare X0, 0
	089 JumpIfEqual {131}
	090 Move X1, X31
	091 Call Simulation.HasAnyActiveConnections, X0
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {130}
	096 Move X8, [X19+56]
	097 Compare X8, 0
	098 JumpIfEqual {131}
	099 Move X0, [X8+80]
	100 Move W1, 8
	101 Move X2, X31
	102 Call SimulationMessage.Allocate, X0, X1
	103 Move X21, X0
	104 Move W0, 1
	105 Move X1, X31
	106 Call Assert.Check, X0
	107 Move X8, [X19+64]
	108 Compare X8, 0
	109 JumpIfEqual {131}
	110 Move X8, [X8+32]
	111 Compare X8, 0
	112 JumpIfEqual {114}
	113 Move W0, [X8]
	114 Move X0, X31
	115 Move W1, [X19+104]
	116 Move W2, 2
	117 Move X3, X31
	118 Call RpcHeader.Create, X0, X1, X2
	119 Move [X21+28], X0
	120 Compare X21, 0
	121 JumpIfEqual {131}
	122 Move W8, 64
	123 Move [X21+12], W8
	124 Move X0, [X19+56]
	125 Compare X0, 0
	126 JumpIfEqual {131}
	127 Move X1, X21
	128 Move X2, X31
	129 Call NetworkRunner.SendRpc, X0, X1
	130 And W31, W20, 7
	131 Call 0x1B6FA1C

Method: System.Void RPC_SetViewWalk(System.Single speed)

Disassembly:
	0x01CE8508 BL 0x1B6E868
	0x01CE850C CBZ X0, 0x1CE85F8
	0x01CE8510 LDR W8, [X0 + 0x18]
	0x01CE8514 CBZ W8, 0x1CE85F4
	0x01CE8518 MOVZ W9, 0x40E00000
	0x01CE851C CMP W8, 0x1
	0x01CE8520 STR W9, [X0 + 0x20]
	0x01CE8524 B.EQ 0x1CE85F4
	0x01CE8528 ADRP X8, 0xFFFFFFFFFEDC2000
	0x01CE852C LDR V0, [X8 + 0xF4]
	0x01CE8530 MOVZ W8, 0x41400000
	0x01CE8534 STR W8, [X0 + 0x24]
	0x01CE8538 STR X0, [X19 + 0x38]
	0x01CE853C STR V0, [X19 + 0x4]
	0x01CE8540 LDR X0, [X20]
	0x01CE8544 MOVZ W1, 0x1
	0x01CE8548 BL 0x1B6E868
	0x01CE854C CBZ X0, 0x1CE85F8
	0x01CE8550 LDR W8, [X0 + 0x18]
	0x01CE8554 CBZ W8, 0x1CE85F4
	0x01CE8558 MOVZ W8, 0x40400000
	0x01CE855C STR W8, [X0 + 0x20]
	0x01CE8560 STR X0, [X19 + 0x58]
	0x01CE8564 LDR X0, [X20]
	0x01CE8568 MOVZ W1, 0x1
	0x01CE856C BL 0x1B6E868
	0x01CE8570 CBZ X0, 0x1CE85F8
	0x01CE8574 LDR W8, [X0 + 0x18]
	0x01CE8578 CBZ W8, 0x1CE85F4
	0x01CE857C MOVZ W8, 0x42C80000
	0x01CE8580 FMOV V0.2S, 0x0
	0x01CE8584 MOVZ W9, 0x42DC0000
	0x01CE8588 STR W8, [X0 + 0x20]
	0x01CE858C STR X0, [X19 + 0x60]
	0x01CE8590 STR D0, [X19 + 0x68]
	0x01CE8594 STR W9, [X19 + 0x70]
	0x01CE8598 LDR X0, [X20]
	0x01CE859C MOVZ W1, 0x1
	0x01CE85A0 BL 0x1B6E868
	0x01CE85A4 CBZ X0, 0x1CE85F8
	0x01CE85A8 LDR W8, [X0 + 0x18]
	0x01CE85AC CBZ W8, 0x1CE85F4
	0x01CE85B0 ADRP X9, 0xFFFFFFFFFEDC5000
	0x01CE85B4 LDR V0, [X9 + 0x3F8]
	0x01CE85B8 MOVZ W8, 0x41000000
	0x01CE85BC MOVZ W10, 0x3F800000
	0x01CE85C0 MOVZ W11, 0x1
	0x01CE85C4 MOVZ W12, 0x42700000
	0x01CE85C8 STR W8, [X0 + 0x20]
	0x01CE85CC STR X0, [X19 + 0x78]
	0x01CE85D0 STR W10, [X19 + 0x88]
	0x01CE85D4 STRB W11, [X19 + 0x8C]
	0x01CE85D8 STR D0, [X19 + 0x80]
	0x01CE85DC STR W12, [X19 + 0x90]
	0x01CE85E0 MOV X0, X19
	0x01CE85E4 LDP X20, X19, [X31 + 0x10]
	0x01CE85E8 MOV X1, X31
	0x01CE85EC LDP X30, X21, [X31], #0x20
	0x01CE85F0 B 0x3A9EFE0
	0x01CE85F4 BL 0x1B6EA24
	0x01CE85F8 BL 0x1B6EA1C
	0x01CE85FC STP X30, X21, [X31 - 0x20]!
	0x01CE8600 STP X20, X19, [X31 + 0x10]
	0x01CE8604 ADRP X21, 0x253B000
	0x01CE8608 LDRB W8, [X21 + 0x675]
	0x01CE860C MOV X19, X1
	0x01CE8610 MOV X20, X0
	0x01CE8614 TBNZ X8, 0x0, 0x1CE862C
	0x01CE8618 ADRP X0, 0x2267000
	0x01CE861C LDR X0, [X0 + 0xE30]
	0x01CE8620 BL 0x1B6E7F0
	0x01CE8624 MOVZ W8, 0x1
	0x01CE8628 STRB W8, [X21 + 0x675]
	0x01CE862C MOV X0, X20
	0x01CE8630 BL 0x1CE6CAC
	0x01CE8634 STR X0, [X19]
	0x01CE8638 CBZ X0, 0x1CE8654
	0x01CE863C LDR W8, [X0 + 0x18]
	0x01CE8640 LDP X20, X19, [X31 + 0x10]
	0x01CE8644 CMP W8, 0x0
	0x01CE8648 CSET W0, GT
	0x01CE864C LDP X30, X21, [X31], #0x20
	0x01CE8650 RET
	0x01CE8654 BL 0x1B6EA1C
	0x01CE8658 SUB X31, X31, 0x80
	0x01CE865C STR D14, [X31 + 0x30]
	0x01CE8660 STP D13, D12, [X31 + 0x38]
	0x01CE8664 STP D11, D10, [X31 + 0x48]
	0x01CE8668 STP D9, D8, [X31 + 0x58]
	0x01CE866C STR X30, [X31 + 0x68]
	0x01CE8670 STP X20, X19, [X31 + 0x70]
	0x01CE8674 ADRP X20, 0x253B000
	0x01CE8678 ADRP X19, 0x2266000
	0x01CE867C LDRB W8, [X20 + 0x677]
	0x01CE8680 LDR X19, [X19 + 0x3D8]
	0x01CE8684 MOV V8.16B, V6.16B
	0x01CE8688 MOV V9.16B, V5.16B
	0x01CE868C MOV V10.16B, V4.16B
	0x01CE8690 MOV V11.16B, V3.16B
	0x01CE8694 MOV V12.16B, V2.16B
	0x01CE8698 MOV V13.16B, V1.16B
	0x01CE869C MOV V14.16B, V0.16B
	0x01CE86A0 TBNZ X8, 0x0, 0x1CE86C4
	0x01CE86A4 ADRP X0, 0x2266000
	0x01CE86A8 LDR X0, [X0 + 0x3D8]
	0x01CE86AC BL 0x1B6E7F0
	0x01CE86B0 ADRP X0, 0x2265000
	0x01CE86B4 LDR X0, [X0 + 0x4C0]
	0x01CE86B8 BL 0x1B6E7F0
	0x01CE86BC MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x253C000
	007 Move W8, [X20+1644]
	008 Move V8, V0
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2267000
	015 Move X0, [X0+448]
	016 Call 0x1B6F7F0
	017 Move X0, 0x2269000
	018 Move X0, [X0+720]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X20+1644], W8
	022 Move W8, [X19+88]
	023 Compare W8, 0
	024 JumpIfEqual {39}
	025 Move [X19+88], W31
	026 Move X0, [X19+192]
	027 Compare X0, 0
	028 JumpIfEqual {138}
	029 Move X8, [X0]
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Move V0, V8
	035 Move X2, [X8+456]
	036 Move X1, [X8+464]
	037 Move V8, [X31+48]
	038 CallNoReturn X2
	039 Move X21, 0x2267000
	040 Move X21, [X21+448]
	041 Move X0, [X21]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1B6F8F8
	046 Move X0, X19
	047 Move X1, X31
	048 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	049 Move X0, [X19+56]
	050 Compare X0, 0
	051 JumpIfEqual {138}
	052 Move X1, X31
	053 Call NetworkRunner.get_Stage, X0
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+16]
	058 Move X21, [X31+24]
	059 Move V8, [X31+48]
	060 Return 
	061 Move X0, [X19+64]
	062 Compare X0, 0
	063 JumpIfEqual {138}
	064 Move X1, X31
	065 Call NetworkObject.GetLocalAuthorityMask, X0
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {89}
	070 Move X0, [X21]
	071 Move X19, [X19+64]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1B6F8F8
	076 Move X8, 0x2269000
	077 Move X8, [X8+720]
	078 Move X1, X19
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X30, [X31+16]
	082 Move X21, [X31+24]
	083 Move X0, [X8]
	084 Move W2, 1
	085 Move X3, X31
	086 Move V8, [X31+48]
	087 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	088 Return 
	089 Move X8, [X19+56]
	090 Compare X8, 0
	091 JumpIfEqual {138}
	092 Move W20, W0
	093 Move X0, [X8+80]
	094 Compare X0, 0
	095 JumpIfEqual {138}
	096 Move X1, X31
	097 Call Simulation.HasAnyActiveConnections, X0
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {137}
	102 Move X8, [X19+56]
	103 Compare X8, 0
	104 JumpIfEqual {138}
	105 Move X0, [X8+80]
	106 Move W1, 12
	107 Move X2, X31
	108 Call SimulationMessage.Allocate, X0, X1
	109 Move X21, X0
	110 Move W0, 1
	111 Move X1, X31
	112 Call Assert.Check, X0
	113 Move X8, [X19+64]
	114 Compare X8, 0
	115 JumpIfEqual {138}
	116 Move X8, [X8+32]
	117 Compare X8, 0
	118 JumpIfEqual {120}
	119 Move W0, [X8]
	120 Move X0, X31
	121 Move W1, [X19+104]
	122 Move W2, 3
	123 Move X3, X31
	124 Call RpcHeader.Create, X0, X1, X2
	125 Move [X21+28], X0
	126 Move [X21+36], S8
	127 Compare X21, 0
	128 JumpIfEqual {138}
	129 Move W8, 96
	130 Move [X21+12], W8
	131 Move X0, [X19+56]
	132 Compare X0, 0
	133 JumpIfEqual {138}
	134 Move X1, X21
	135 Move X2, X31
	136 Call NetworkRunner.SendRpc, X0, X1
	137 And W31, W20, 7
	138 Call 0x1B6FA1C

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01CE86C0 STRB W8, [X20 + 0x677]
	0x01CE86C4 LDR X0, [X19]
	0x01CE86C8 MOVI V0.2D, 0x0
	0x01CE86CC STUR V0, [X31 + 0x1C]
	0x01CE86D0 STP V0, V0, [X31]
	0x01CE86D4 ADRP X20, 0x2265000
	0x01CE86D8 LDR W8, [X0 + 0xE0]
	0x01CE86DC LDR X20, [X20 + 0x4C0]
	0x01CE86E0 CBNZ W8, 0x1CE86EC
	0x01CE86E4 BL 0x1B6E8F8
	0x01CE86E8 LDR X0, [X19]
	0x01CE86EC LDR X8, [X0 + 0xB8]
	0x01CE86F0 MOV X1, X31
	0x01CE86F4 LDR W0, [X8]
	0x01CE86F8 BL 0x3A9DE68
	0x01CE86FC LDR X8, [X20]
	0x01CE8700 MOV W19, W0
	0x01CE8704 LDR W9, [X8 + 0xE0]
	0x01CE8708 CBNZ W9, 0x1CE8714
	0x01CE870C MOV X0, X8
	0x01CE8710 BL 0x1B6E8F8
	0x01CE8714 ADD X0, X31, 0x0
	0x01CE8718 MOV V0.16B, V14.16B
	0x01CE871C MOV V1.16B, V13.16B
	0x01CE8720 MOV V2.16B, V12.16B
	0x01CE8724 MOV V3.16B, V11.16B
	0x01CE8728 MOV V4.16B, V10.16B
	0x01CE872C MOV V5.16B, V9.16B
	0x01CE8730 MOV V6.16B, V8.16B
	0x01CE8734 MOV W1, W19
	0x01CE8738 MOV X2, X31
	0x01CE873C BL 0x3AF3258
	0x01CE8740 LDP X20, X19, [X31 + 0x70]
	0x01CE8744 LDR X30, [X31 + 0x68]
	0x01CE8748 LDP D9, D8, [X31 + 0x58]
	0x01CE874C LDP D11, D10, [X31 + 0x48]
	0x01CE8750 LDP D13, D12, [X31 + 0x38]
	0x01CE8754 LDR V14, [X31 + 0x30]
	0x01CE8758 ORN W8, W31, W0, 0x0
	0x01CE875C AND W0, W8, 0x1
	0x01CE8760 ADD X31, X31, 0x80
	0x01CE8764 RET
	0x01CE8768 STP D13, D12, [X31 - 0x40]!
	0x01CE876C STP D11, D10, [X31 + 0x10]
	0x01CE8770 STP D9, D8, [X31 + 0x20]
	0x01CE8774 STP X30, X19, [X31 + 0x30]
	0x01CE8778 ADRP X19, 0x253B000
	0x01CE877C LDRB W8, [X19 + 0x440]
	0x01CE8780 MOV V11.16B, V5.16B
	0x01CE8784 MOV V12.16B, V4.16B
	0x01CE8788 MOV V13.16B, V3.16B
	0x01CE878C MOV V8.16B, V2.16B
	0x01CE8790 MOV V9.16B, V1.16B
	0x01CE8794 MOV V10.16B, V0.16B
	0x01CE8798 CBNZ W8, 0x1CE87B0
	0x01CE879C ADRP X0, 0x2265000
	0x01CE87A0 LDR X0, [X0 + 0x488]
	0x01CE87A4 BL 0x1B6E7F0
	0x01CE87A8 MOVZ W8, 0x1
	0x01CE87AC STRB W8, [X19 + 0x440]
	0x01CE87B0 ADRP X8, 0x2265000
	0x01CE87B4 LDR X8, [X8 + 0x488]
	0x01CE87B8 FSUB S13, S13, S10
	0x01CE87BC FSUB S12, S12, S9
	0x01CE87C0 FSUB S11, S11, S8
	0x01CE87C4 LDR X0, [X8]
	0x01CE87C8 LDR W8, [X0 + 0xE0]
	0x01CE87CC CBNZ W8, 0x1CE87D4
	0x01CE87D0 BL 0x1B6E8F8
	0x01CE87D4 FMUL S0, S13, S13
	0x01CE87D8 FMUL S1, S12, S12
	0x01CE87DC FADD S0, S0, S1
	0x01CE87E0 FMUL S1, S11, S11
	0x01CE87E4 FADD S0, S1, S0
	0x01CE87E8 FSQRT S6, S0
	0x01CE87EC FDIV S5, S11, S6
	0x01CE87F0 MOV V0.16B, V10.16B
	0x01CE87F4 MOV V1.16B, V9.16B
	0x01CE87F8 MOV V2.16B, V8.16B
	0x01CE87FC LDP X30, X19, [X31 + 0x30]
	0x01CE8800 LDP D9, D8, [X31 + 0x20]
	0x01CE8804 LDP D11, D10, [X31 + 0x10]
	0x01CE8808 FDIV S3, S13, S6
	0x01CE880C FDIV S4, S12, S6
	0x01CE8810 LDP D13, D12, [X31], #0x40
	0x01CE8814 B 0x1CE8658
	0x01CE8818 SUB X31, X31, 0xC0
	0x01CE881C STP D13, D12, [X31 + 0x40]
	0x01CE8820 STP D11, D10, [X31 + 0x50]
	0x01CE8824 STP D9, D8, [X31 + 0x60]
	0x01CE8828 STP X30, X27, [X31 + 0x70]
	0x01CE882C STP X26, X25, [X31 + 0x80]
	0x01CE8830 STP X24, X23, [X31 + 0x90]
	0x01CE8834 STP X22, X21, [X31 + 0xA0]
	0x01CE8838 STP X20, X19, [X31 + 0xB0]
	0x01CE883C ADRP X24, 0x253B000
	0x01CE8840 ADRP X23, 0x2268000
	0x01CE8844 ADRP X21, 0x2268000
	0x01CE8848 ADRP X22, 0x2266000
	0x01CE884C LDRB W8, [X24 + 0x678]
	0x01CE8850 LDR X23, [X23 + 0x2B0]
	0x01CE8854 LDR X21, [X21 + 0x2A8]
	0x01CE8858 LDR X22, [X22 + 0x2A8]
	0x01CE885C MOV X19, X1
	0x01CE8860 MOV X20, X0
	0x01CE8864 TBNZ X8, 0x0, 0x1CE88E8
	0x01CE8868 ADRP X0, 0x2266000
	0x01CE886C LDR X0, [X0 + 0x808]
	0x01CE8870 BL 0x1B6E7F0
	0x01CE8874 ADRP X0, 0x2268000
	0x01CE8878 LDR X0, [X0 + 0x288]
	0x01CE887C BL 0x1B6E7F0
	0x01CE8880 ADRP X0, 0x2268000
	0x01CE8884 LDR X0, [X0 + 0x290]
	0x01CE8888 BL 0x1B6E7F0
	0x01CE888C ADRP X0, 0x2268000
	0x01CE8890 LDR X0, [X0 + 0x298]
	0x01CE8894 BL 0x1B6E7F0
	0x01CE8898 ADRP X0, 0x2268000
	0x01CE889C LDR X0, [X0 + 0x2A0]
	0x01CE88A0 BL 0x1B6E7F0
	0x01CE88A4 ADRP X0, 0x2268000
	0x01CE88A8 LDR X0, [X0 + 0x2A8]
	0x01CE88AC BL 0x1B6E7F0
	0x01CE88B0 ADRP X0, 0x2267000
	0x01CE88B4 LDR X0, [X0 + 0xE30]
	0x01CE88B8 BL 0x1B6E7F0
	0x01CE88BC ADRP X0, 0x2268000
	0x01CE88C0 LDR X0, [X0 + 0x2B0]
	0x01CE88C4 BL 0x1B6E7F0
	0x01CE88C8 ADRP X0, 0x2266000
	0x01CE88CC LDR X0, [X0 + 0x2A8]
	0x01CE88D0 BL 0x1B6E7F0
	0x01CE88D4 ADRP X0, 0x2268000
	0x01CE88D8 LDR X0, [X0 + 0x2B8]
	0x01CE88DC BL 0x1B6E7F0
	0x01CE88E0 MOVZ W8, 0x1
	0x01CE88E4 STRB W8, [X24 + 0x678]
	0x01CE88E8 LDR X0, [X23]
	0x01CE88EC STP X31, X31, [X31 + 0x20]
	0x01CE88F0 STR X31, [X31 + 0x30]
	0x01CE88F4 BL 0x1B6EA0C
	0x01CE88F8 LDR X1, [X21]
	0x01CE88FC MOV X21, X0
	0x01CE8900 BL 0x2E45D4C
	0x01CE8904 STR X21, [X19]
	0x01CE8908 LDR X0, [X22]
	0x01CE890C LDR W8, [X0 + 0xE0]
	0x01CE8910 CBNZ W8, 0x1CE8918
	0x01CE8914 BL 0x1B6E8F8
	0x01CE8918 ADRP X21, 0x253B000
	0x01CE891C LDRB W8, [X21 + 0x50A]
	0x01CE8920 CBNZ W8, 0x1CE8938
	0x01CE8924 ADRP X0, 0x2266000
	0x01CE8928 LDR X0, [X0 + 0x2A8]
	0x01CE892C BL 0x1B6E7F0
	0x01CE8930 MOVZ W8, 0x1
	0x01CE8934 STRB W8, [X21 + 0x50A]
	0x01CE8938 LDR X0, [X22]
	0x01CE893C LDR W8, [X0 + 0xE0]
	0x01CE8940 CBNZ W8, 0x1CE894C
	0x01CE8944 BL 0x1B6E8F8
	0x01CE8948 LDR X0, [X22]
	0x01CE894C LDR X8, [X0 + 0xB8]
	0x01CE8950 LDR X0, [X8]
	0x01CE8954 CBZ X0, 0x1CE8B64
	0x01CE8958 ADRP X8, 0x2266000
	0x01CE895C LDR X8, [X8 + 0x808]
	0x01CE8960 LDR X1, [X8]
	0x01CE8964 BL 0x2961038
	0x01CE8968 CBZ X0, 0x1CE8B64
	0x01CE896C ADRP X8, 0x2268000
	0x01CE8970 LDR X8, [X8 + 0x2B8]
	0x01CE8974 ADRP X24, 0x2268000
	0x01CE8978 ADRP X25, 0x2268000
	0x01CE897C ADRP X23, 0x2268000
	0x01CE8980 LDR X1, [X8]
	0x01CE8984 LDR X24, [X24 + 0x290]
	0x01CE8988 LDR X25, [X25 + 0x2A0]
	0x01CE898C LDR X23, [X23 + 0x288]
	0x01CE8990 ADD X8, X31, 0x8
	0x01CE8994 BL 0x25D79BC
	0x01CE8998 LDUR V0, [X31 + 0x8]
	0x01CE899C LDR X8, [X31 + 0x18]
	0x01CE89A0 ADRP X21, 0x2265000
	0x01CE89A4 LDR X21, [X21 + 0x488]
	0x01CE89A8 ADRP X26, 0x253B000
	0x01CE89AC STR V0, [X31 + 0x2]
	0x01CE89B0 STR X8, [X31 + 0x30]
	0x01CE89B4 MOVZ W27, 0x1
	0x01CE89B8 LDR X1, [X24]
	0x01CE89BC ADD X0, X31, 0x20
	0x01CE89C0 BL 0x2A6B89C
	0x01CE89C4 TBZ X0, 0x0, 0x1CE8AFC
	0x01CE89C8 LDR X22, [X31 + 0x30]
	0x01CE89CC CBZ X22, 0x1CE8B44
	0x01CE89D0 MOV X0, X22
	0x01CE89D4 MOV X1, X31
	0x01CE89D8 BL 0x1CB47E0
	0x01CE89DC TBNZ X0, 0x0, 0x1CE89B8
	0x01CE89E0 MOV X0, X22
	0x01CE89E4 MOV X1, X31
	0x01CE89E8 BL 0x3A9B084
	0x01CE89EC CBZ X0, 0x1CE8B4C
	0x01CE89F0 MOV X1, X31
	0x01CE89F4 BL 0x3AA7658
	0x01CE89F8 CBZ X20, 0x1CE8B50
	0x01CE89FC LDR X0, [X20 + 0xD8]
	0x01CE8A00 CBZ X0, 0x1CE8B48
	0x01CE8A04 MOV V8.16B, V0.16B
	0x01CE8A08 MOV V9.16B, V1.16B
	0x01CE8A0C MOV V10.16B, V2.16B
	0x01CE8A10 MOV X1, X31
	0x01CE8A14 BL 0x3AA7658
	0x01CE8A18 LDRB W8, [X26 + 0x506]
	0x01CE8A1C MOV V11.16B, V0.16B
	0x01CE8A20 MOV V12.16B, V1.16B
	0x01CE8A24 MOV V13.16B, V2.16B
	0x01CE8A28 CBNZ W8, 0x1CE8A38
	0x01CE8A2C MOV X0, X21
	0x01CE8A30 BL 0x1B6E7F0
	0x01CE8A34 STRB W27, [X26 + 0x506]
	0x01CE8A38 LDR X0, [X21]
	0x01CE8A3C LDR W8, [X0 + 0xE0]
	0x01CE8A40 CBNZ W8, 0x1CE8A48
	0x01CE8A44 BL 0x1B6E8F8
	0x01CE8A48 LDR X8, [X20 + 0xB8]
	0x01CE8A4C CBZ X8, 0x1CE8B54
	0x01CE8A50 FSUB S0, S8, S11
	0x01CE8A54 FSUB S1, S9, S12
	0x01CE8A58 FSUB S2, S10, S13
	0x01CE8A5C FMUL S0, S0, S0
	0x01CE8A60 FMUL S1, S1, S1
	0x01CE8A64 LDR V3, [X8 + 0x80]
	0x01CE8A68 FMUL S2, S2, S2
	0x01CE8A6C FADD S0, S0, S1
	0x01CE8A70 FADD S0, S2, S0
	0x01CE8A74 FSQRT S0, S0
	0x01CE8A78 FCMP S0, S3
	0x01CE8A7C B.PL 0x1CE89B8
	0x01CE8A80 MOV X0, X22
	0x01CE8A84 MOV X1, X31
	0x01CE8A88 BL 0x1CB61C4
	0x01CE8A8C LDR X8, [X20 + 0xB8]
	0x01CE8A90 CBZ X8, 0x1CE8B58
	0x01CE8A94 LDR V1, [X8 + 0x84]
	0x01CE8A98 FCMP S0, S1
	0x01CE8A9C B.LE 0x1CE89B8
	0x01CE8AA0 LDR X0, [X19]
	0x01CE8AA4 CBZ X0, 0x1CE8B60
	0x01CE8AA8 LDR W10, [X0 + 0x1C]
	0x01CE8AAC LDR X8, [X0 + 0x10]
	0x01CE8AB0 LDR X9, [X25]
	0x01CE8AB4 ADD W10, W10, 0x1
	0x01CE8AB8 STR W10, [X0 + 0x1C]
	0x01CE8ABC CBZ X8, 0x1CE8B5C
	0x01CE8AC0 LDRSW X10, [X0 + 0x18]
	0x01CE8AC4 LDR W11, [X8 + 0x18]
	0x01CE8AC8 CMP W10, W11
	0x01CE8ACC B.CS 0x1CE8AE4
	0x01CE8AD0 ADD W9, W10, 0x1
	0x01CE8AD4 ADD X8, X8, X10, 0x3, LSL
	0x01CE8AD8 STR W9, [X0 + 0x18]
	0x01CE8ADC STR X22, [X8 + 0x20]
	0x01CE8AE0 B 0x1CE89B8
	0x01CE8AE4 LDR X8, [X9 + 0x20]
	0x01CE8AE8 LDR X8, [X8 + 0xC0]
	0x01CE8AEC LDR X2, [X8 + 0x70]
	0x01CE8AF0 MOV X1, X22
	0x01CE8AF4 BL 0x2E46518
	0x01CE8AF8 B 0x1CE89B8
	0x01CE8AFC LDR X1, [X23]
	0x01CE8B00 ADD X0, X31, 0x20
	0x01CE8B04 BL 0x2A6B898
	0x01CE8B08 LDR X8, [X19]
	0x01CE8B0C CBZ X8, 0x1CE8B64
	0x01CE8B10 LDR W8, [X8 + 0x18]
	0x01CE8B14 LDP X20, X19, [X31 + 0xB0]
	0x01CE8B18 LDP X22, X21, [X31 + 0xA0]
	0x01CE8B1C LDP X24, X23, [X31 + 0x90]
	0x01CE8B20 LDP X26, X25, [X31 + 0x80]
	0x01CE8B24 LDP X30, X27, [X31 + 0x70]
	0x01CE8B28 LDP D9, D8, [X31 + 0x60]
	0x01CE8B2C LDP D11, D10, [X31 + 0x50]
	0x01CE8B30 LDP D13, D12, [X31 + 0x40]
	0x01CE8B34 CMP W8, 0x0
	0x01CE8B38 CSET W0, GT
	0x01CE8B3C ADD X31, X31, 0xC0
	0x01CE8B40 RET
	0x01CE8B44 BL 0x1B6EA1C
	0x01CE8B48 BL 0x1B6EA1C
	0x01CE8B4C BL 0x1B6EA1C
	0x01CE8B50 BL 0x1B6EA1C
	0x01CE8B54 BL 0x1B6EA1C
	0x01CE8B58 BL 0x1B6EA1C
	0x01CE8B5C BL 0x1B6EA1C
	0x01CE8B60 BL 0x1B6EA1C
	0x01CE8B64 BL 0x1B6EA1C
	0x01CE8B68 B 0x1CE8BA0
	0x01CE8B6C B 0x1CE8BA0
	0x01CE8B70 B 0x1CE8BA0
	0x01CE8B74 B 0x1CE8BA0
	0x01CE8B78 B 0x1CE8BA0
	0x01CE8B7C B 0x1CE8BA0
	0x01CE8B80 B 0x1CE8BA0
	0x01CE8B84 B 0x1CE8BA0
	0x01CE8B88 B 0x1CE8BA0
	0x01CE8B8C B 0x1CE8BA0
	0x01CE8B90 B 0x1CE8BA0
	0x01CE8B94 B 0x1CE8BA0
	0x01CE8B98 B 0x1CE8BA0
	0x01CE8B9C B 0x1CE8BA0
	0x01CE8BA0 MOV X20, X0
	0x01CE8BA4 CMP W1, 0x1
	0x01CE8BA8 B.NE 0x1CE8BD4
	0x01CE8BAC MOV X0, X20
	0x01CE8BB0 BL 0x3D19840
	0x01CE8BB4 LDR X21, [X0]
	0x01CE8BB8 BL 0x3D19850
	0x01CE8BBC LDR X1, [X23]
	0x01CE8BC0 ADD X0, X31, 0x20
	0x01CE8BC4 BL 0x2A6B898
	0x01CE8BC8 CBZ X21, 0x1CE8B08
	0x01CE8BCC MOV X0, X21
	0x01CE8BD0 BL 0x1B6EA14
	0x01CE8BD4 MOV X21, X31
	0x01CE8BD8 B 0x1CE8BE0
	0x01CE8BDC MOV X20, X0
	0x01CE8BE0 LDR X1, [X23]
	0x01CE8BE4 ADD X0, X31, 0x20
	0x01CE8BE8 BL 0x2A6B898
	0x01CE8BEC CBNZ X21, 0x1CE8BF8
	0x01CE8BF0 MOV X0, X20
	0x01CE8BF4 BL 0x1C8418C
	0x01CE8BF8 MOV X0, X21
	0x01CE8BFC BL 0x1B6EA14
	0x01CE8C00 BL 0x18F46A8
	0x01CE8C04 STP D11, D10, [X31 - 0x40]!
	0x01CE8C08 STP D9, D8, [X31 + 0x10]
	0x01CE8C0C STR X30, [X31 + 0x20]
	0x01CE8C10 STP X20, X19, [X31 + 0x30]
	0x01CE8C14 ADRP X20, 0x253B000
	0x01CE8C18 LDRB W8, [X20 + 0x679]
	0x01CE8C1C MOV X19, X1
	0x01CE8C20 MOV V8.16B, V3.16B
	0x01CE8C24 MOV V9.16B, V2.16B
	0x01CE8C28 MOV V10.16B, V1.16B
	0x01CE8C2C MOV V11.16B, V0.16B
	0x01CE8C30 TBNZ X8, 0x0, 0x1CE8C48
	0x01CE8C34 ADRP X0, 0x2267000
	0x01CE8C38 LDR X0, [X0 + 0xE30]
	0x01CE8C3C BL 0x1B6E7F0
	0x01CE8C40 MOVZ W8, 0x1
	0x01CE8C44 STRB W8, [X20 + 0x679]
	0x01CE8C48 MOV V0.16B, V11.16B
	0x01CE8C4C MOV V1.16B, V10.16B
	0x01CE8C50 MOV V2.16B, V9.16B
	0x01CE8C54 MOV V3.16B, V8.16B
	0x01CE8C58 BL 0x1CE8C88
	0x01CE8C5C STR X0, [X19]
	0x01CE8C60 CBZ X0, 0x1CE8C84
	0x01CE8C64 LDR W8, [X0 + 0x18]
	0x01CE8C68 LDP X20, X19, [X31 + 0x30]
	0x01CE8C6C LDR X30, [X31 + 0x20]
	0x01CE8C70 LDP D9, D8, [X31 + 0x10]

ISIL:
	001 Move [X31-112], D15
	002 Move [X31-104], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x253C000
	015 Move X21, 0x2268000
	016 Move W8, [X20+1645]
	017 Move X21, [X21+3400]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {34}
	023 Move X0, 0x2266000
	024 Move X0, [X0+2048]
	025 Call 0x1B6F7F0
	026 Move X0, 0x2268000
	027 Move X0, [X0+3400]
	028 Call 0x1B6F7F0
	029 Move X0, 0x2266000
	030 Move X0, [X0+1144]
	031 Call 0x1B6F7F0
	032 Move W8, 1
	033 Move [X20+1645], W8
	034 Move X0, [X21]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1B6F8F8
	039 Move X0, [X21]
	040 Move X8, [X0+184]
	041 Move X0, X31
	042 Move S0, [X8+32]
	043 Move S1, [X8+36]
	044 Move S2, [X8+40]
	045 Move S3, [X8+44]
	046 Call Gizmos.set_color, X0
	047 Move X0, [X19+216]
	048 Compare X0, 0
	049 JumpIfEqual {454}
	050 Move X1, X31
	051 Call Transform.get_position, X0
	052 Move X8, [X19+184]
	053 Compare X8, 0
	054 JumpIfEqual {454}
	055 Move V3, [X8+128]
	056 Move X0, X31
	057 Call Gizmos.DrawWireSphere, X0, V0
	058 Move X8, [X21]
	059 Move X0, X31
	060 Move X8, [X8+184]
	061 Move S0, [X8]
	062 Move S1, [X8+4]
	063 Move S2, [X8+8]
	064 Move S3, [X8+12]
	065 Call Gizmos.set_color, X0
	066 Move X0, [X19+208]
	067 Compare X0, 0
	068 JumpIfEqual {454}
	069 Move X1, X31
	070 Call Transform.get_position, X0
	071 Move X0, [X19+208]
	072 Compare X0, 0
	073 JumpIfEqual {454}
	074 Move X1, X31
	075 Move V8, V0
	076 Move V9, V1
	077 Move V10, V2
	078 Call Transform.get_position, X0
	079 Move X0, [X19+208]
	080 Compare X0, 0
	081 JumpIfEqual {454}
	082 Move X1, X31
	083 Move V11, V0
	084 Move V12, V1
	085 Move V13, V2
	086 Call Transform.get_forward, X0
	087 Move X8, [X19+184]
	088 Compare X8, 0
	089 JumpIfEqual {454}
	090 Move X8, [X8+120]
	091 Compare X8, 0
	092 JumpIfEqual {454}
	093 Move W9, [X8+24]
	094 Compare W9, 0
	095 JumpIfEqual {455}
	096 Move V3, [X8+32]
	097 Move X0, X31
	098 Multiply S0, S0, S3
	099 Multiply S1, S1, S3
	100 Multiply S2, S2, S3
	101 Add S3, S11, S0
	102 Add S4, S12, S1
	103 Add S5, S13, S2
	104 Move V0, V8
	105 Move V1, V9
	106 Move V2, V10
	107 Call Gizmos.DrawLine, X0, X1
	108 Move X8, [X19+184]
	109 Compare X8, 0
	110 JumpIfEqual {454}
	111 Move V0, [X8+112]
	112 Move X20, 0x253C000
	113 Move W8, [X20+1090]
	114 Move S1, 0.5
	115 Multiply S8, S0, S1
	116 Compare W8, 0
	117 JumpIfNotEqual {123}
	118 Move X0, 0x2266000
	119 Move X0, [X0+1152]
	120 Call 0x1B6F7F0
	121 Move W8, 1
	122 Move [X20+1090], W8
	123 Move X22, 0x2266000
	124 Move X22, [X22+1152]
	125 NotImplemented "Instruction FNEG not yet implemented."
	126 Move X0, X31
	127 Move X8, [X22]
	128 Move X8, [X8+184]
	129 Move S1, [X8+24]
	130 Move S2, [X8+28]
	131 Move V3, [X8+32]
	132 Call Quaternion.AngleAxis, V0, X0
	133 Move X0, [X19+208]
	134 Compare X0, 0
	135 JumpIfEqual {454}
	136 Move X1, X31
	137 Move V9, V0
	138 Move V10, V1
	139 Move V11, V2
	140 Move V12, V3
	141 Call Transform.get_forward, X0
	142 Move V4, V0
	143 Move V5, V1
	144 Move V6, V2
	145 Move V0, V9
	146 Move V1, V10
	147 Move V2, V11
	148 Move V3, V12
	149 Move X0, X31
	150 Call Quaternion.op_Multiply, X0, X1
	151 Move W8, [X20+1090]
	152 Move V10, V0
	153 Move V11, V1
	154 Move V13, V2
	155 Compare W8, 0
	156 JumpIfNotEqual {162}
	157 Move X0, 0x2266000
	158 Move X0, [X0+1152]
	159 Call 0x1B6F7F0
	160 Move W8, 1
	161 Move [X20+1090], W8
	162 Move X8, [X22]
	163 Move V0, V8
	164 Move X0, X31
	165 Move X8, [X8+184]
	166 Move S1, [X8+24]
	167 Move S2, [X8+28]
	168 Move V3, [X8+32]
	169 Call Quaternion.AngleAxis, V0, X0
	170 Move X0, [X19+208]
	171 Compare X0, 0
	172 JumpIfEqual {454}
	173 Move X1, X31
	174 Move V8, V0
	175 Move V9, V1
	176 Move V12, V2
	177 Move V14, V3
	178 Call Transform.get_forward, X0
	179 Move V4, V0
	180 Move V5, V1
	181 Move V6, V2
	182 Move V0, V8
	183 Move V1, V9
	184 Move V2, V12
	185 Move V3, V14
	186 Move X0, X31
	187 Call Quaternion.op_Multiply, X0, X1
	188 Move X0, [X19+208]
	189 Move [X31+76], S0
	190 Compare X0, 0
	191 JumpIfEqual {454}
	192 Move X1, X31
	193 Move V9, V1
	194 Move V12, V2
	195 Call Transform.get_position, X0
	196 Move X0, [X19+208]
	197 Compare X0, 0
	198 JumpIfEqual {454}
	199 Move X1, X31
	200 Move V14, V0
	201 Move V15, V1
	202 Move V8, V2
	203 Call Transform.get_position, X0
	204 Move X8, [X19+184]
	205 Compare X8, 0
	206 JumpIfEqual {454}
	207 Move X8, [X8+120]
	208 Compare X8, 0
	209 JumpIfEqual {454}
	210 Move W9, [X8+24]
	211 Compare W9, 0
	212 JumpIfEqual {455}
	213 Move V3, [X8+32]
	214 Move X0, X31
	215 Multiply S4, S10, S3
	216 Multiply S5, S11, S3
	217 Multiply S6, S13, S3
	218 Add S3, S0, S4
	219 Add S4, S1, S5
	220 Add S5, S2, S6
	221 Move V0, V14
	222 Move V1, V15
	223 Move V2, V8
	224 Call Gizmos.DrawLine, X0, X1
	225 Move X0, [X19+208]
	226 Compare X0, 0
	227 JumpIfEqual {454}
	228 Move X1, X31
	229 Call Transform.get_position, X0
	230 Move X0, [X19+208]
	231 Compare X0, 0
	232 JumpIfEqual {454}
	233 Move X1, X31
	234 Move V10, V0
	235 Move V11, V1
	236 Move V8, V2
	237 Call Transform.get_position, X0
	238 Move X8, [X19+184]
	239 Compare X8, 0
	240 JumpIfEqual {454}
	241 Move X8, [X8+120]
	242 Compare X8, 0
	243 JumpIfEqual {454}
	244 Move W9, [X8+24]
	245 Compare W9, 0
	246 JumpIfEqual {455}
	247 Move V3, [X8+32]
	248 Move V4, [X31+76]
	249 Move X0, X31
	250 Multiply S5, S9, S3
	251 Multiply S4, S4, S3
	252 Multiply S6, S12, S3
	253 Add S3, S0, S4
	254 Add S4, S1, S5
	255 Add S5, S2, S6
	256 Move V0, V10
	257 Move V1, V11
	258 Move V2, V8
	259 Call Gizmos.DrawLine, X0, X1
	260 Move X8, [X21]
	261 Move X0, X31
	262 Move X8, [X8+184]
	263 Move S0, [X8+16]
	264 Move S1, [X8+20]
	265 Move S2, [X8+24]
	266 Move S3, [X8+28]
	267 Call Gizmos.set_color, X0
	268 Move X0, [X19+208]
	269 Compare X0, 0
	270 JumpIfEqual {454}
	271 Move X1, X31
	272 Call Transform.get_position, X0
	273 Move X8, -19128320
	274 Move V8, [X8+3376]
	275 Move X0, X31
	276 Move V3, V8
	277 Call Gizmos.DrawSphere, X0, V0
	278 Move X8, [X21]
	279 Move X0, X31
	280 Move X8, [X8+184]
	281 Move S0, [X8+144]
	282 Move S1, [X8+148]
	283 Move S2, [X8+152]
	284 Move S3, [X8+156]
	285 Call Gizmos.set_color, X0
	286 Move X0, [X19+200]
	287 Compare X0, 0
	288 JumpIfEqual {454}
	289 Move X20, 0x2266000
	290 Move X20, [X20+2048]
	291 Move X1, X31
	292 Call NavMeshAgent.get_destination, X0
	293 Move S3, 0.25
	294 Move X0, X31
	295 Call Gizmos.DrawSphere, X0, V0
	296 Move X0, [X20]
	297 Move W8, [X0+224]
	298 Compare W8, 0
	299 JumpIfNotEqual {301}
	300 Call 0x1B6F8F8
	301 Move X0, X31
	302 Call Application.get_isPlaying
	303 Move TEMP, X0
	304 And TEMP, TEMP, 1
	305 Compare TEMP, 1
	306 JumpIfNotEqual {440}
	307 Move X22, 0x2266000
	308 Move X22, [X22+1144]
	309 Move X20, [X19+304]
	310 Move X0, [X22]
	311 Move W8, [X0+224]
	312 Compare W8, 0
	313 JumpIfNotEqual {315}
	314 Call 0x1B6F8F8
	315 Move X0, X20
	316 Move X1, X31
	317 Move X2, X31
	318 Call Object.op_Inequality, X0, X1
	319 Move TEMP, X0
	320 And TEMP, TEMP, 1
	321 Compare TEMP, 1
	322 JumpIfNotEqual {408}
	323 Move X0, [X21]
	324 Move W8, [X0+224]
	325 Compare W8, 0
	326 JumpIfNotEqual {329}
	327 Call 0x1B6F8F8
	328 Move X0, [X21]
	329 Move X8, [X0+184]
	330 Move X0, X31
	331 Move S0, [X8+80]
	332 Move S1, [X8+84]
	333 Move S2, [X8+88]
	334 Move S3, [X8+92]
	335 Call Gizmos.set_color, X0
	336 Move X0, [X19+208]
	337 Compare X0, 0
	338 JumpIfEqual {454}
	339 Move X1, X31
	340 Call Transform.get_position, X0
	341 Move X8, [X19+304]
	342 Compare X8, 0
	343 JumpIfEqual {454}
	344 Move S3, [X8+40]
	345 Move S4, [X8+44]
	346 Move V5, [X8+48]
	347 Move X0, X31
	348 Call Gizmos.DrawLine, X0, X1
	349 Move X8, [X19+304]
	350 Compare X8, 0
	351 JumpIfEqual {454}
	352 Move S0, [X8+40]
	353 Move S1, [X8+44]
	354 Move V2, [X8+48]
	355 Move V3, V8
	356 Move X0, X31
	357 Call Gizmos.DrawSphere, X0, V0
	358 Move X0, [X22]
	359 Move X20, [X19+312]
	360 Move W8, [X0+224]
	361 Compare W8, 0
	362 JumpIfNotEqual {364}
	363 Call 0x1B6F8F8
	364 Move X0, X20
	365 Move X1, X31
	366 Move X2, X31
	367 Call Object.op_Inequality, X0, X1
	368 Move TEMP, X0
	369 And TEMP, TEMP, 1
	370 Compare TEMP, 1
	371 JumpIfNotEqual {408}
	372 Move X0, [X21]
	373 Move W8, [X0+224]
	374 Compare W8, 0
	375 JumpIfNotEqual {378}
	376 Call 0x1B6F8F8
	377 Move X0, [X21]
	378 Move X8, [X0+184]
	379 Move X0, X31
	380 Move S0, [X8+96]
	381 Move S1, [X8+100]
	382 Move S2, [X8+104]
	383 Move S3, [X8+108]
	384 Call Gizmos.set_color, X0
	385 Move X8, [X19+304]
	386 Compare X8, 0
	387 JumpIfEqual {454}
	388 Move X9, [X19+312]
	389 Compare X9, 0
	390 JumpIfEqual {454}
	391 Move S1, [X8+44]
	392 Move S2, [X8+48]
	393 Move V0, [X8+40]
	394 Move S3, [X9+40]
	395 Move S4, [X9+44]
	396 Move V5, [X9+48]
	397 Move X0, X31
	398 Call Gizmos.DrawLine, X0, X1
	399 Move X8, [X19+312]
	400 Compare X8, 0
	401 JumpIfEqual {454}
	402 Move S0, [X8+40]
	403 Move S1, [X8+44]
	404 Move V2, [X8+48]
	405 Move V3, V8
	406 Move X0, X31
	407 Call Gizmos.DrawSphere, X0, V0
	408 Move X0, [X21]
	409 Move W8, [X0+224]
	410 Compare W8, 0
	411 JumpIfNotEqual {414}
	412 Call 0x1B6F8F8
	413 Move X0, [X21]
	414 Move X8, [X0+184]
	415 Move X0, X31
	416 Move S0, [X8+192]
	417 Move S1, [X8+196]
	418 Move S2, [X8+200]
	419 Move S3, [X8+204]
	420 Call Gizmos.set_color, X0
	421 Move X0, X19
	422 Call MobController.get__positionThatPlayerStayed, X0
	423 Move X20, [X31+96]
	424 Move X19, [X31+104]
	425 Move X22, [X31+80]
	426 Move X21, [X31+88]
	427 Move X30, [X31+64]
	428 Move D9, [X31+48]
	429 Move D8, [X31+56]
	430 Move D11, [X31+32]
	431 Move D10, [X31+40]
	432 Move D13, [X31+16]
	433 Move D12, [X31+24]
	434 Move S3, 0.5
	435 Move X0, X31
	436 Move D15, [X31+112]
	437 Move D14, [X31+120]
	438 Call Gizmos.DrawWireSphere, X0, V0
	439 Return 
	440 Move X20, [X31+96]
	441 Move X19, [X31+104]
	442 Move X22, [X31+80]
	443 Move X21, [X31+88]
	444 Move X30, [X31+64]
	445 Move D9, [X31+48]
	446 Move D8, [X31+56]
	447 Move D11, [X31+32]
	448 Move D10, [X31+40]
	449 Move D13, [X31+16]
	450 Move D12, [X31+24]
	451 Move D15, [X31+112]
	452 Move D14, [X31+120]
	453 Return 
	454 Call 0x1B6FA1C
	455 Call 0x1B6FA24

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x01CE8C74 CMP W8, 0x0
	0x01CE8C78 CSET W0, GT
	0x01CE8C7C LDP D11, D10, [X31], #0x40
	0x01CE8C80 RET
	0x01CE8C84 BL 0x1B6EA1C
	0x01CE8C88 SUB X31, X31, 0x60
	0x01CE8C8C STP D11, D10, [X31 + 0x10]
	0x01CE8C90 STP D9, D8, [X31 + 0x20]
	0x01CE8C94 STP X30, X23, [X31 + 0x30]
	0x01CE8C98 STP X22, X21, [X31 + 0x40]
	0x01CE8C9C STP X20, X19, [X31 + 0x50]
	0x01CE8CA0 ADRP X22, 0x253B000
	0x01CE8CA4 ADRP X21, 0x2268000
	0x01CE8CA8 ADRP X19, 0x2268000
	0x01CE8CAC ADRP X20, 0x2266000
	0x01CE8CB0 LDRB W8, [X22 + 0x67A]
	0x01CE8CB4 LDR X21, [X21 + 0x2B0]
	0x01CE8CB8 LDR X19, [X19 + 0x2A8]
	0x01CE8CBC LDR X20, [X20 + 0x3D8]
	0x01CE8CC0 MOV V8.16B, V3.16B
	0x01CE8CC4 MOV V9.16B, V2.16B
	0x01CE8CC8 MOV V10.16B, V1.16B
	0x01CE8CCC MOV V11.16B, V0.16B
	0x01CE8CD0 TBNZ X8, 0x0, 0x1CE8D24
	0x01CE8CD4 ADRP X0, 0x2268000
	0x01CE8CD8 LDR X0, [X0 + 0x2F8]
	0x01CE8CDC BL 0x1B6E7F0
	0x01CE8CE0 ADRP X0, 0x2266000
	0x01CE8CE4 LDR X0, [X0 + 0x3D8]
	0x01CE8CE8 BL 0x1B6E7F0
	0x01CE8CEC ADRP X0, 0x2268000
	0x01CE8CF0 LDR X0, [X0 + 0x2A0]
	0x01CE8CF4 BL 0x1B6E7F0
	0x01CE8CF8 ADRP X0, 0x2268000
	0x01CE8CFC LDR X0, [X0 + 0x2A8]
	0x01CE8D00 BL 0x1B6E7F0
	0x01CE8D04 ADRP X0, 0x2268000
	0x01CE8D08 LDR X0, [X0 + 0x2B0]
	0x01CE8D0C BL 0x1B6E7F0
	0x01CE8D10 ADRP X0, 0x2265000
	0x01CE8D14 LDR X0, [X0 + 0x4C0]
	0x01CE8D18 BL 0x1B6E7F0
	0x01CE8D1C MOVZ W8, 0x1
	0x01CE8D20 STRB W8, [X22 + 0x67A]
	0x01CE8D24 LDR X0, [X21]
	0x01CE8D28 ADRP X21, 0x2265000
	0x01CE8D2C LDR X21, [X21 + 0x4C0]
	0x01CE8D30 STR X31, [X31 + 0x8]
	0x01CE8D34 BL 0x1B6EA0C
	0x01CE8D38 LDR X1, [X19]
	0x01CE8D3C MOV X19, X0
	0x01CE8D40 BL 0x2E45D4C
	0x01CE8D44 LDR X0, [X20]
	0x01CE8D48 LDR W8, [X0 + 0xE0]
	0x01CE8D4C CBNZ W8, 0x1CE8D58
	0x01CE8D50 BL 0x1B6E8F8
	0x01CE8D54 LDR X0, [X20]
	0x01CE8D58 LDR X8, [X0 + 0xB8]
	0x01CE8D5C MOV X1, X31
	0x01CE8D60 LDR W0, [X8 + 0x8]
	0x01CE8D64 BL 0x3A9DE68
	0x01CE8D68 LDR X8, [X21]
	0x01CE8D6C MOV W20, W0
	0x01CE8D70 LDR W9, [X8 + 0xE0]
	0x01CE8D74 CBNZ W9, 0x1CE8D80
	0x01CE8D78 MOV X0, X8
	0x01CE8D7C BL 0x1B6E8F8
	0x01CE8D80 MOV V0.16B, V11.16B
	0x01CE8D84 MOV V1.16B, V10.16B
	0x01CE8D88 MOV V2.16B, V9.16B
	0x01CE8D8C MOV V3.16B, V8.16B
	0x01CE8D90 MOV W0, W20
	0x01CE8D94 MOV X1, X31
	0x01CE8D98 BL 0x3AF52EC
	0x01CE8D9C CBZ X0, 0x1CE8E84
	0x01CE8DA0 LDR W8, [X0 + 0x18]
	0x01CE8DA4 MOV X20, X0
	0x01CE8DA8 CMP W8, 0x1
	0x01CE8DAC B.LT 0x1CE8E64
	0x01CE8DB0 ADRP X22, 0x2268000
	0x01CE8DB4 ADRP X23, 0x2268000
	0x01CE8DB8 LDR X22, [X22 + 0x2F8]
	0x01CE8DBC LDR X23, [X23 + 0x2A0]
	0x01CE8DC0 MOV W21, W31
	0x01CE8DC4 CMP W21, W8
	0x01CE8DC8 B.CS 0x1CE8E88
	0x01CE8DCC ADD X8, X20, W21, 0x3, SXTW
	0x01CE8DD0 LDR X0, [X8 + 0x20]
	0x01CE8DD4 CBZ X0, 0x1CE8E84
	0x01CE8DD8 LDR X2, [X22]
	0x01CE8DDC ADD X1, X31, 0x8
	0x01CE8DE0 BL 0x2090EE4
	0x01CE8DE4 TBZ X0, 0x0, 0x1CE8E54
	0x01CE8DE8 LDR X0, [X31 + 0x8]
	0x01CE8DEC CBZ X0, 0x1CE8E84
	0x01CE8DF0 MOV X1, X31
	0x01CE8DF4 BL 0x1CB47E0
	0x01CE8DF8 TBNZ X0, 0x0, 0x1CE8E54
	0x01CE8DFC CBZ X19, 0x1CE8E84
	0x01CE8E00 LDR W10, [X19 + 0x1C]
	0x01CE8E04 LDR X1, [X31 + 0x8]
	0x01CE8E08 LDR X8, [X19 + 0x10]
	0x01CE8E0C LDR X9, [X23]
	0x01CE8E10 ADD W10, W10, 0x1
	0x01CE8E14 STR W10, [X19 + 0x1C]
	0x01CE8E18 CBZ X8, 0x1CE8E84
	0x01CE8E1C LDRSW X10, [X19 + 0x18]
	0x01CE8E20 LDR W11, [X8 + 0x18]
	0x01CE8E24 CMP W10, W11
	0x01CE8E28 B.CS 0x1CE8E40
	0x01CE8E2C ADD W9, W10, 0x1
	0x01CE8E30 ADD X8, X8, X10, 0x3, LSL
	0x01CE8E34 STR W9, [X19 + 0x18]
	0x01CE8E38 STR X1, [X8 + 0x20]
	0x01CE8E3C B 0x1CE8E54
	0x01CE8E40 LDR X8, [X9 + 0x20]
	0x01CE8E44 MOV X0, X19
	0x01CE8E48 LDR X8, [X8 + 0xC0]
	0x01CE8E4C LDR X2, [X8 + 0x70]
	0x01CE8E50 BL 0x2E46518
	0x01CE8E54 LDR W8, [X20 + 0x18]
	0x01CE8E58 ADD W21, W21, 0x1
	0x01CE8E5C CMP W21, W8
	0x01CE8E60 B.LT 0x1CE8DC4
	0x01CE8E64 MOV X0, X19
	0x01CE8E68 LDP X20, X19, [X31 + 0x50]
	0x01CE8E6C LDP X22, X21, [X31 + 0x40]
	0x01CE8E70 LDP X30, X23, [X31 + 0x30]
	0x01CE8E74 LDP D9, D8, [X31 + 0x20]
	0x01CE8E78 LDP D11, D10, [X31 + 0x10]
	0x01CE8E7C ADD X31, X31, 0x60
	0x01CE8E80 RET
	0x01CE8E84 BL 0x1B6EA1C
	0x01CE8E88 BL 0x1B6EA24
	0x01CE8E8C SUB X31, X31, 0xF0
	0x01CE8E90 STP D15, D14, [X31 + 0x50]
	0x01CE8E94 STP D13, D12, [X31 + 0x60]
	0x01CE8E98 STP D11, D10, [X31 + 0x70]
	0x01CE8E9C STP D9, D8, [X31 + 0x80]
	0x01CE8EA0 STP X29, X30, [X31 + 0x90]
	0x01CE8EA4 STP X28, X27, [X31 + 0xA0]
	0x01CE8EA8 STP X26, X25, [X31 + 0xB0]
	0x01CE8EAC STP X24, X23, [X31 + 0xC0]
	0x01CE8EB0 STP X22, X21, [X31 + 0xD0]
	0x01CE8EB4 STP X20, X19, [X31 + 0xE0]
	0x01CE8EB8 STR S6, [X31 + 0xC]
	0x01CE8EBC STR S0, [X31 + 0x14]
	0x01CE8EC0 ADRP X20, 0x253B000
	0x01CE8EC4 ADRP X23, 0x2268000
	0x01CE8EC8 ADRP X21, 0x2268000
	0x01CE8ECC ADRP X22, 0x2266000
	0x01CE8ED0 LDRB W8, [X20 + 0x67B]
	0x01CE8ED4 LDR X23, [X23 + 0x300]
	0x01CE8ED8 LDR X21, [X21 + 0x308]
	0x01CE8EDC LDR X22, [X22 + 0x3D8]
	0x01CE8EE0 MOV X19, X0
	0x01CE8EE4 MOV V10.16B, V5.16B
	0x01CE8EE8 MOV V9.16B, V4.16B
	0x01CE8EEC MOV V8.16B, V3.16B
	0x01CE8EF0 MOV V14.16B, V2.16B
	0x01CE8EF4 MOV V13.16B, V1.16B
	0x01CE8EF8 TBNZ X8, 0x0, 0x1CE8F64
	0x01CE8EFC ADRP X0, 0x2268000
	0x01CE8F00 LDR X0, [X0 + 0x310]
	0x01CE8F04 BL 0x1B6E7F0
	0x01CE8F08 ADRP X0, 0x2266000
	0x01CE8F0C LDR X0, [X0 + 0x3D8]
	0x01CE8F10 BL 0x1B6E7F0
	0x01CE8F14 ADRP X0, 0x2268000
	0x01CE8F18 LDR X0, [X0 + 0x318]
	0x01CE8F1C BL 0x1B6E7F0
	0x01CE8F20 ADRP X0, 0x2268000
	0x01CE8F24 LDR X0, [X0 + 0x320]
	0x01CE8F28 BL 0x1B6E7F0
	0x01CE8F2C ADRP X0, 0x2268000
	0x01CE8F30 LDR X0, [X0 + 0x308]
	0x01CE8F34 BL 0x1B6E7F0
	0x01CE8F38 ADRP X0, 0x2267000
	0x01CE8F3C LDR X0, [X0 + 0xDE8]
	0x01CE8F40 BL 0x1B6E7F0
	0x01CE8F44 ADRP X0, 0x2268000
	0x01CE8F48 LDR X0, [X0 + 0x300]
	0x01CE8F4C BL 0x1B6E7F0
	0x01CE8F50 ADRP X0, 0x2265000
	0x01CE8F54 LDR X0, [X0 + 0x4C0]
	0x01CE8F58 BL 0x1B6E7F0
	0x01CE8F5C MOVZ W8, 0x1
	0x01CE8F60 STRB W8, [X20 + 0x67B]
	0x01CE8F64 ADRP X24, 0x2265000
	0x01CE8F68 LDR X24, [X24 + 0x4C0]
	0x01CE8F6C LDR X0, [X23]
	0x01CE8F70 MOVI V0.2D, 0x0
	0x01CE8F74 STUR V0, [X31 + 0x3C]
	0x01CE8F78 STP V0, V0, [X31 + 0x20]
	0x01CE8F7C STR X31, [X31 + 0x18]
	0x01CE8F80 BL 0x1B6EA0C
	0x01CE8F84 LDR X1, [X21]
	0x01CE8F88 MOV X20, X0
	0x01CE8F8C BL 0x2E45D4C
	0x01CE8F90 LDR X0, [X23]
	0x01CE8F94 BL 0x1B6EA0C
	0x01CE8F98 LDR X1, [X21]
	0x01CE8F9C MOV X21, X0
	0x01CE8FA0 BL 0x2E45D4C
	0x01CE8FA4 LDR X0, [X22]
	0x01CE8FA8 STR S8, [X31 + 0x10]
	0x01CE8FAC FADD S8, S8, S8
	0x01CE8FB0 MOV V11.16B, V9.16B
	0x01CE8FB4 LDR W8, [X0 + 0xE0]
	0x01CE8FB8 FADD S9, S9, S9
	0x01CE8FBC MOV V12.16B, V10.16B
	0x01CE8FC0 FADD S10, S10, S10
	0x01CE8FC4 CBNZ W8, 0x1CE8FD0
	0x01CE8FC8 BL 0x1B6E8F8
	0x01CE8FCC LDR X0, [X22]
	0x01CE8FD0 LDR X8, [X0 + 0xB8]
	0x01CE8FD4 LDR V0, [X31 + 0x14]
	0x01CE8FD8 MOV X1, X31
	0x01CE8FDC LDR W0, [X8 + 0x30]
	0x01CE8FE0 FSUB S15, S0, S8
	0x01CE8FE4 FSUB S8, S13, S9
	0x01CE8FE8 FSUB S9, S14, S10
	0x01CE8FEC MOV V10.16B, V14.16B
	0x01CE8FF0 BL 0x3A9DE68
	0x01CE8FF4 LDR X8, [X24]
	0x01CE8FF8 MOV W22, W0
	0x01CE8FFC LDR W9, [X8 + 0xE0]
	0x01CE9000 CBNZ W9, 0x1CE900C
	0x01CE9004 MOV X0, X8

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+64], D10
	003 Move [X31+80], D9
	004 Move [X31+88], D8
	005 Move [X31+96], X30
	006 Move [X31+104], X23
	007 Move [X31+112], X22
	008 Move [X31+120], X21
	009 Move [X31+128], X20
	010 Move [X31+136], X19
	011 Move X21, 0x253C000
	012 Move X20, 0x2266000
	013 Move W8, [X21+1646]
	014 Move X20, [X20+2048]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {40}
	020 Move X0, 0x2266000
	021 Move X0, [X0+2048]
	022 Call 0x1B6F7F0
	023 Move X0, 0x2268000
	024 Move X0, [X0+3400]
	025 Call 0x1B6F7F0
	026 Move X0, 0x2269000
	027 Move X0, [X0+608]
	028 Call 0x1B6F7F0
	029 Move X0, 0x2269000
	030 Move X0, [X0+616]
	031 Call 0x1B6F7F0
	032 Move X0, 0x2269000
	033 Move X0, [X0+624]
	034 Call 0x1B6F7F0
	035 Move X0, 0x2269000
	036 Move X0, [X0+632]
	037 Call 0x1B6F7F0
	038 Move W8, 1
	039 Move [X21+1646], W8
	040 Move X0, [X20]
	041 Move [X31+32], X31
	042 Move [X31+40], X31
	043 Move [X31+48], X31
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1B6F8F8
	048 Move X0, X31
	049 Call Application.get_isPlaying
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {189}
	054 Move X0, [X19+288]
	055 Compare X0, 0
	056 JumpIfEqual {202}
	057 Move X23, 0x2269000
	058 Move X23, [X23+632]
	059 Add X8, X31, 8
	060 Move X1, [X23]
	061 Call List`1<Object>.GetEnumerator, X0
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 Move X8, [X31+24]
	064 Move X9, -19128320
	065 Move X22, 0x2269000
	066 Move [X31+2], V0
	067 Move [X31+48], X8
	068 Move V8, [X9+2736]
	069 Move X22, [X22+616]
	070 Move X1, [X22]
	071 Add X0, X31, 32
	072 Call Enumerator<Object>.MoveNext, X0
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {92}
	077 Move X20, [X31+48]
	078 Move S0, 0.5
	079 Move S1, 0.5
	080 Move S2, 0.5
	081 Move S3, 1
	082 Move X0, X31
	083 Call Gizmos.set_color, X0
	084 Compare X20, 0
	085 JumpIfEqual {200}
	086 Move S0, [X20+40]
	087 Move S1, [X20+44]
	088 Move V2, [X20+48]
	089 Move V3, V8
	090 Move X0, X31
	091 Call Gizmos.DrawSphere, X0, V0
	092 Move X8, 0x2269000
	093 Move X8, [X8+608]
	094 Add X0, X31, 32
	095 Move X1, [X8]
	096 Call Enumerator<Object>.Dispose, X0
	097 Move X0, [X19+296]
	098 Compare X0, 0
	099 JumpIfEqual {202}
	100 Move X1, [X23]
	101 Add X8, X31, 8
	102 Call List`1<Object>.GetEnumerator, X0
	103 NotImplemented "Instruction LDUR not yet implemented."
	104 Move X8, [X31+24]
	105 Move [X31+2], V0
	106 Move [X31+48], X8
	107 Move X1, [X22]
	108 Add X0, X31, 32
	109 Call Enumerator<Object>.MoveNext, X0
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfNotEqual {129}
	114 Move X20, [X31+48]
	115 Move S0, W31
	116 Move S1, 1
	117 Move S2, W31
	118 Move S3, 1
	119 Move X0, X31
	120 Call Gizmos.set_color, X0
	121 Compare X20, 0
	122 JumpIfEqual {201}
	123 Move S0, [X20+40]
	124 Move S1, [X20+44]
	125 Move V2, [X20+48]
	126 Move V3, V8
	127 Move X0, X31
	128 Call Gizmos.DrawSphere, X0, V0
	129 Move X8, 0x2269000
	130 Move X8, [X8+608]
	131 Add X0, X31, 32
	132 Move X1, [X8]
	133 Call Enumerator<Object>.Dispose, X0
	134 Move X20, 0x2268000
	135 Move X20, [X20+3400]
	136 Move X0, [X20]
	137 Move W8, [X0+224]
	138 Compare W8, 0
	139 JumpIfNotEqual {142}
	140 Call 0x1B6F8F8
	141 Move X0, [X20]
	142 Move X8, [X0+184]
	143 Move X0, X31
	144 Move S0, [X8+112]
	145 Move S1, [X8+116]
	146 Move S2, [X8+120]
	147 Move S3, [X8+124]
	148 Call Gizmos.set_color, X0
	149 Move X0, [X19+208]
	150 Compare X0, 0
	151 JumpIfEqual {202}
	152 Move X1, X31
	153 Call Transform.get_position, X0
	154 Move X0, X19
	155 Move V8, V0
	156 Move V9, V1
	157 Move V10, V2
	158 Call MobController.get_searchPrecision, X0
	159 Move V3, V0
	160 Move V0, V8
	161 Move V1, V9
	162 Move V2, V10
	163 Move X0, X31
	164 Call Gizmos.DrawWireSphere, X0, V0
	165 Move X8, [X20]
	166 Move X0, X31
	167 Move X8, [X8+184]
	168 Move S0, [X8+128]
	169 Move S1, [X8+132]
	170 Move S2, [X8+136]
	171 Move S3, [X8+140]
	172 Call Gizmos.set_color, X0
	173 Move X0, [X19+208]
	174 Compare X0, 0
	175 JumpIfEqual {202}
	176 Move X1, X31
	177 Call Transform.get_position, X0
	178 Move X0, X19
	179 Move V8, V0
	180 Move V9, V1
	181 Move V10, V2
	182 Call MobController.get_searchWidth, X0
	183 Move V3, V0
	184 Move V0, V8
	185 Move V1, V9
	186 Move V2, V10
	187 Move X0, X31
	188 Call Gizmos.DrawWireSphere, X0, V0
	189 Move X20, [X31+128]
	190 Move X19, [X31+136]
	191 Move X22, [X31+112]
	192 Move X21, [X31+120]
	193 Move X30, [X31+96]
	194 Move X23, [X31+104]
	195 Move D9, [X31+80]
	196 Move D8, [X31+88]
	197 Move V10, [X31+64]
	198 Add X31, X31, 144
	199 Return 
	200 Call 0x1B6FA1C
	201 Call 0x1B6FA1C
	202 Call 0x1B6FA1C
	203 Move X20, X0
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move X0, X20
	206 Call 0x3D1A840
	207 Move X21, [X0]
	208 Call 0x3D1A850
	209 Move X8, 0x2269000
	210 Move X8, [X8+608]
	211 Add X0, X31, 32
	212 Move X1, [X8]
	213 Call Enumerator<Object>.Dispose, X0
	214 Compare X21, 0
	215 JumpIfEqual {134}
	216 Move X21, X31
	217 Move X20, X0
	218 Move X8, 0x2269000
	219 Move X8, [X8+608]
	220 Move X1, [X8]
	221 Add X0, X31, 32
	222 Call Enumerator<Object>.Dispose, X0
	223 Compare X21, 0
	224 JumpIfEqual {251}
	225 Move X0, X21
	226 Call 0x1B6FA14
	227 Move X20, X0
	228 NotImplemented "Instruction CMP not yet implemented."
	229 Move X0, X20
	230 Call 0x3D1A840
	231 Move X21, [X0]
	232 Call 0x3D1A850
	233 Move X8, 0x2269000
	234 Move X8, [X8+608]
	235 Add X0, X31, 32
	236 Move X1, [X8]
	237 Call Enumerator<Object>.Dispose, X0
	238 Compare X21, 0
	239 JumpIfEqual {97}
	240 Move X0, X21
	241 Call 0x1B6FA14
	242 Move X21, X31
	243 Move X20, X0
	244 Move X8, 0x2269000
	245 Move X8, [X8+608]
	246 Move X1, [X8]
	247 Add X0, X31, 32
	248 Call Enumerator<Object>.Dispose, X0
	249 Compare X21, 0
	250 JumpIfNotEqual {253}
	251 Move X0, X20
	252 Call 0x1C8518C
	253 Move X0, X21
	254 Call 0x1B6FA14
	255 Call 0x18F56A8

Method: System.Void .ctor()

Disassembly:
	0x01CE9008 BL 0x1B6E8F8
	0x01CE900C LDP S1, S4, [X31 + 0xC]
	0x01CE9010 FMOV S0, 2
	0x01CE9014 FMOV S3, 1.5
	0x01CE9018 MOV V2.16B, V9.16B
	0x01CE901C FADD S7, S1, S0
	0x01CE9020 MOV V0.16B, V15.16B
	0x01CE9024 MOV V1.16B, V8.16B
	0x01CE9028 MOV V5.16B, V11.16B
	0x01CE902C MOV V6.16B, V12.16B
	0x01CE9030 MOV W0, W22
	0x01CE9034 MOV X1, X31
	0x01CE9038 BL 0x3AF4DC8
	0x01CE903C CBZ X0, 0x1CE92B4
	0x01CE9040 LDR X8, [X0 + 0x18]
	0x01CE9044 LDR V14, [X31 + 0x14]
	0x01CE9048 MOV X22, X0
	0x01CE904C CMP W8, 0x1
	0x01CE9050 B.LT 0x1CE923C
	0x01CE9054 ADRP X25, 0x2267000
	0x01CE9058 ADRP X26, 0x2267000
	0x01CE905C ADRP X9, 0xFFFFFFFFFEDC0000
	0x01CE9060 ADRP X23, 0x2264000
	0x01CE9064 LDR X25, [X25 + 0x310]
	0x01CE9068 LDR X26, [X26 + 0x320]
	0x01CE906C LDR V12, [X9 + 0x934]
	0x01CE9070 LDR X23, [X23 + 0x480]
	0x01CE9074 MOV X24, X31
	0x01CE9078 AND X8, X8, 0x0
	0x01CE907C ADD X27, X22, 0x20
	0x01CE9080 ADRP X28, 0x253A000
	0x01CE9084 MOVZ W29, 0x1
	0x01CE9088 CMP X24, W8, UXTW
	0x01CE908C B.CS 0x1CE92B8
	0x01CE9090 LDR W8, [X27 + 0x28]
	0x01CE9094 LDR X9, [X27 + 0x20]
	0x01CE9098 LDP V1, V0, [X27]
	0x01CE909C ADD X0, X31, 0x20
	0x01CE90A0 MOV X1, X31
	0x01CE90A4 STR W8, [X31 + 0x48]
	0x01CE90A8 STR X9, [X31 + 0x40]
	0x01CE90AC STP V1, V0, [X31 + 0x20]
	0x01CE90B0 BL 0x3AF61C4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x253B000
	007 Move X22, 0x2268000
	008 Move X21, 0x2268000
	009 Move W8, [X20+1647]
	010 Move X22, [X22+728]
	011 Move X21, [X21+736]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2268000
	018 Move X0, [X0+736]
	019 Call 0x1B6F7F0
	020 Move X0, 0x2268000
	021 Move X0, [X0+728]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X20+1647], W8
	025 Move X0, [X22]
	026 Call 0x1B6FA0C
	027 Move X1, [X21]
	028 Move X20, X0
	029 Call List`1<Object>..ctor, X0
	030 Move [X19+288], X20
	031 Move X0, [X22]
	032 Call 0x1B6FA0C
	033 Move X1, [X21]
	034 Move X20, X0
	035 Call List`1<Object>..ctor, X0
	036 Move [X19+296], X20
	037 Move X0, [X22]
	038 Call 0x1B6FA0C
	039 Move X1, [X21]
	040 Move X20, X0
	041 Call List`1<Object>..ctor, X0
	042 Move [X19+344], X20
	043 Move X0, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X1, X31
	049 Move X30, [X31+48]
	050 Call NetworkBehaviour..ctor, X0
	051 Return 

Method: System.Void .cctor()

Disassembly:
	0x01CE90B4 CBZ X0, 0x1CE92B4
	0x01CE90B8 LDR X2, [X25]
	0x01CE90BC ADD X1, X31, 0x18
	0x01CE90C0 BL 0x2090EE4
	0x01CE90C4 TBZ X0, 0x0, 0x1CE9228
	0x01CE90C8 LDR X8, [X31 + 0x18]
	0x01CE90CC CBZ X8, 0x1CE92B4
	0x01CE90D0 LDR X0, [X8 + 0x20]
	0x01CE90D4 CBZ X0, 0x1CE92B4
	0x01CE90D8 MOV X1, X31
	0x01CE90DC BL 0x1C9D868
	0x01CE90E0 TBZ X0, 0x0, 0x1CE9228
	0x01CE90E4 ADD X0, X31, 0x20
	0x01CE90E8 MOV X1, X31
	0x01CE90EC BL 0x3AF6270
	0x01CE90F0 LDRB W8, [X28 + 0x43F]
	0x01CE90F4 MOV V8.16B, V0.16B
	0x01CE90F8 MOV V9.16B, V1.16B
	0x01CE90FC MOV V11.16B, V2.16B
	0x01CE9100 CBNZ W8, 0x1CE9110
	0x01CE9104 MOV X0, X23
	0x01CE9108 BL 0x1B6E7F0
	0x01CE910C STRB W29, [X28 + 0x43F]
	0x01CE9110 LDR X8, [X23]
	0x01CE9114 LDR X8, [X8 + 0xB8]
	0x01CE9118 LDP S0, S1, [X8]
	0x01CE911C LDR V2, [X8 + 0x8]
	0x01CE9120 FSUB S0, S8, S0
	0x01CE9124 FSUB S1, S9, S1
	0x01CE9128 FSUB S2, S11, S2
	0x01CE912C FMUL S0, S0, S0
	0x01CE9130 FMUL S1, S1, S1
	0x01CE9134 FADD S0, S0, S1
	0x01CE9138 FMUL S1, S2, S2
	0x01CE913C FADD S0, S1, S0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x253B000
	007 Move X22, 0x2268000
	008 Move X19, 0x2268000
	009 Move X20, 0x2266000
	010 Move W8, [X21+1648]
	011 Move X22, [X22+744]
	012 Move X19, [X19+752]
	013 Move X20, [X20+3448]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x2268000
	019 Move X0, [X0+752]
	020 Call 0x1B6F7F0
	021 Move X0, 0x2268000
	022 Move X0, [X0+744]
	023 Call 0x1B6F7F0
	024 Move X0, 0x2266000
	025 Move X0, [X0+3448]
	026 Call 0x1B6F7F0
	027 Move W8, 1
	028 Move [X21+1648], W8
	029 Move X0, [X22]
	030 Call 0x1B6FA0C
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call HashSet`1<Object>..ctor, X0
	034 Move X8, [X20]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8+8], X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01CE9140 FCMP S0, S12
	0x01CE9144 B.PL 0x1CE9190
	0x01CE9148 LDR X8, [X31 + 0x18]
	0x01CE914C CBZ X8, 0x1CE92B4
	0x01CE9150 CBZ X21, 0x1CE92B4
	0x01CE9154 LDR W10, [X21 + 0x1C]
	0x01CE9158 LDR X1, [X8 + 0x20]
	0x01CE915C LDR X8, [X21 + 0x10]
	0x01CE9160 LDR X9, [X26]
	0x01CE9164 ADD W10, W10, 0x1
	0x01CE9168 STR W10, [X21 + 0x1C]
	0x01CE916C CBZ X8, 0x1CE92B4
	0x01CE9170 LDRSW X10, [X21 + 0x18]
	0x01CE9174 LDR W11, [X8 + 0x18]
	0x01CE9178 CMP W10, W11
	0x01CE917C B.CS 0x1CE9208
	0x01CE9180 ADD W9, W10, 0x1
	0x01CE9184 ADD X8, X8, X10, 0x3, LSL
	0x01CE9188 STR W9, [X21 + 0x18]
	0x01CE918C B 0x1CE9200
	0x01CE9190 ADD X0, X31, 0x20
	0x01CE9194 MOV X1, X31
	0x01CE9198 BL 0x3AF6270
	0x01CE919C MOV V3.16B, V0.16B
	0x01CE91A0 MOV V4.16B, V1.16B
	0x01CE91A4 MOV V5.16B, V2.16B
	0x01CE91A8 MOV V0.16B, V14.16B
	0x01CE91AC MOV V1.16B, V13.16B
	0x01CE91B0 MOV V2.16B, V10.16B
	0x01CE91B4 BL 0x1CE8768
	0x01CE91B8 TBZ X0, 0x0, 0x1CE9228
	0x01CE91BC LDR X8, [X31 + 0x18]
	0x01CE91C0 CBZ X8, 0x1CE92B4
	0x01CE91C4 CBZ X20, 0x1CE92B4
	0x01CE91C8 LDR W10, [X20 + 0x1C]
	0x01CE91CC LDR X1, [X8 + 0x20]
	0x01CE91D0 LDR X8, [X20 + 0x10]
	0x01CE91D4 LDR X9, [X26]
	0x01CE91D8 ADD W10, W10, 0x1
	0x01CE91DC STR W10, [X20 + 0x1C]
	0x01CE91E0 CBZ X8, 0x1CE92B4
	0x01CE91E4 LDRSW X10, [X20 + 0x18]
	0x01CE91E8 LDR W11, [X8 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, [X0+128]
	004 Move X19, X0
	005 Call MobController.set_isDie, X0, X1
	006 Move W1, [X19+132]
	007 Move X0, X19
	008 Call MobController.set__timerRevive, X0, X1
	009 Move W1, [X19+136]
	010 Move X0, X19
	011 Call MobController.set_health, X0, X1
	012 Move V0, [X19+140]
	013 Move X0, X19
	014 Call MobController.set_angerMeter, X0, V0
	015 Move V0, [X19+144]
	016 Move X0, X19
	017 Call MobController.set_navAgentSpeed, X0, V0
	018 Move V0, [X19+148]
	019 Move X0, X19
	020 Call MobController.set_navAgentAngularSpeed, X0, V0
	021 Move V0, [X19+152]
	022 Move X0, X19
	023 Call MobController.set_searchPrecision, X0, V0
	024 Move V0, [X19+156]
	025 Move X0, X19
	026 Call MobController.set_searchWidth, X0, V0
	027 Move W1, [X19+160]
	028 Move X0, X19
	029 Call MobController.set_targetPlayerID, X0, X1
	030 Move V0, [X19+164]
	031 Move X0, X19
	032 Call MobController.set__timerToChasing, X0, V0
	033 Move V0, [X19+168]
	034 Move X0, X19
	035 Call MobController.set__timerToSearching, X0, V0
	036 Move V0, [X19+172]
	037 Move X0, X19
	038 Call MobController.set__timerAttackInterval, X0, V0
	039 Move V0, [X19+328]
	040 Move V1, [X19+332]
	041 Move V2, [X19+336]
	042 Move X0, X19
	043 Move X30, [X31+16]
	044 Move X19, [X31+24]
	045 Call MobController.set__positionThatPlayerStayed, X0, X1
	046 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01CE91EC CMP W10, W11
	0x01CE91F0 B.CS 0x1CE9214
	0x01CE91F4 ADD W9, W10, 0x1
	0x01CE91F8 ADD X8, X8, X10, 0x3, LSL
	0x01CE91FC STR W9, [X20 + 0x18]
	0x01CE9200 STR X1, [X8 + 0x20]
	0x01CE9204 B 0x1CE9228
	0x01CE9208 LDR X8, [X9 + 0x20]
	0x01CE920C MOV X0, X21
	0x01CE9210 B 0x1CE921C
	0x01CE9214 LDR X8, [X9 + 0x20]
	0x01CE9218 MOV X0, X20
	0x01CE921C LDR X8, [X8 + 0xC0]
	0x01CE9220 LDR X2, [X8 + 0x70]
	0x01CE9224 BL 0x2E46518
	0x01CE9228 LDR W8, [X22 + 0x18]
	0x01CE922C ADD X24, X24, 0x1
	0x01CE9230 ADD X27, X27, 0x2C
	0x01CE9234 CMP X24, W8, SXTW
	0x01CE9238 B.LT 0x1CE9088
	0x01CE923C CBZ X21, 0x1CE9270
	0x01CE9240 LDR W8, [X21 + 0x18]
	0x01CE9244 CMP W8, 0x1
	0x01CE9248 B.LT 0x1CE9270
	0x01CE924C CBZ X20, 0x1CE92B4
	0x01CE9250 ADRP X8, 0x2267000
	0x01CE9254 LDR X8, [X8 + 0x318]
	0x01CE9258 MOV X0, X20
	0x01CE925C MOV X1, X21
	0x01CE9260 LDR X2, [X8]
	0x01CE9264 BL 0x2E4671C
	0x01CE9268 STR X20, [X19]
	0x01CE926C B 0x1CE9278
	0x01CE9270 STR X20, [X19]
	0x01CE9274 CBZ X20, 0x1CE92B4
	0x01CE9278 LDR W8, [X20 + 0x18]
	0x01CE927C LDP X20, X19, [X31 + 0xE0]
	0x01CE9280 LDP X22, X21, [X31 + 0xD0]
	0x01CE9284 LDP X24, X23, [X31 + 0xC0]
	0x01CE9288 LDP X26, X25, [X31 + 0xB0]
	0x01CE928C LDP X28, X27, [X31 + 0xA0]
	0x01CE9290 LDP X29, X30, [X31 + 0x90]
	0x01CE9294 LDP D9, D8, [X31 + 0x80]
	0x01CE9298 LDP D11, D10, [X31 + 0x70]
	0x01CE929C LDP D13, D12, [X31 + 0x60]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MobController.get_isDie, X0
	005 And W8, W0, 1
	006 Move X0, X19
	007 Move [X19+128], W8
	008 Call MobController.get__timerRevive, X0
	009 Move [X19+132], W0
	010 Move X0, X19
	011 Call MobController.get_health, X0
	012 Move [X19+136], W0
	013 Move X0, X19
	014 Call MobController.get_angerMeter, X0
	015 Move X0, X19
	016 Move [X19+140], S0
	017 Call MobController.get_navAgentSpeed, X0
	018 Move X0, X19
	019 Move [X19+144], S0
	020 Call MobController.get_navAgentAngularSpeed, X0
	021 Move X0, X19
	022 Move [X19+148], S0
	023 Call MobController.get_searchPrecision, X0
	024 Move X0, X19
	025 Move [X19+152], S0
	026 Call MobController.get_searchWidth, X0
	027 Move X0, X19
	028 Move [X19+156], S0
	029 Call MobController.get_targetPlayerID, X0
	030 Move [X19+160], W0
	031 Move X0, X19
	032 Call MobController.get__timerToChasing, X0
	033 Move X0, X19
	034 Move [X19+164], S0
	035 Call MobController.get__timerToSearching, X0
	036 Move X0, X19
	037 Move [X19+168], S0
	038 Call MobController.get__timerAttackInterval, X0
	039 Move X0, X19
	040 Move [X19+172], S0
	041 Call MobController.get__positionThatPlayerStayed, X0
	042 Move [X19+328], S0
	043 Move [X19+332], S1
	044 Move [X19+336], S2
	045 Move X30, [X31+16]
	046 Move X19, [X31+24]
	047 Return 

Method: System.Void RPC_Hit@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01CE92A0 LDP D15, D14, [X31 + 0x50]
	0x01CE92A4 CMP W8, 0x0
	0x01CE92A8 CSET W0, GT
	0x01CE92AC ADD X31, X31, 0xF0
	0x01CE92B0 RET
	0x01CE92B4 BL 0x1B6EA1C
	0x01CE92B8 BL 0x1B6EA24
	0x01CE92BC SUB X31, X31, 0xE0
	0x01CE92C0 STP D15, D14, [X31 + 0x50]
	0x01CE92C4 STP D13, D12, [X31 + 0x60]
	0x01CE92C8 STP D11, D10, [X31 + 0x70]
	0x01CE92CC STP D9, D8, [X31 + 0x80]
	0x01CE92D0 STP X30, X27, [X31 + 0x90]
	0x01CE92D4 STP X26, X25, [X31 + 0xA0]
	0x01CE92D8 STP X24, X23, [X31 + 0xB0]
	0x01CE92DC STP X22, X21, [X31 + 0xC0]
	0x01CE92E0 STP X20, X19, [X31 + 0xD0]
	0x01CE92E4 STR S6, [X31 + 0xC]
	0x01CE92E8 STR S0, [X31 + 0x14]
	0x01CE92EC ADRP X21, 0x253A000
	0x01CE92F0 ADRP X20, 0x2265000
	0x01CE92F4 LDRB W8, [X21 + 0x67C]
	0x01CE92F8 LDR X20, [X20 + 0x3D8]
	0x01CE92FC MOV X19, X0
	0x01CE9300 MOV V10.16B, V5.16B
	0x01CE9304 MOV V9.16B, V4.16B
	0x01CE9308 MOV V8.16B, V3.16B
	0x01CE930C MOV V14.16B, V2.16B
	0x01CE9310 MOV V13.16B, V1.16B
	0x01CE9314 TBNZ X8, 0x0, 0x1CE9350
	0x01CE9318 ADRP X0, 0x2267000
	0x01CE931C LDR X0, [X0 + 0x310]
	0x01CE9320 BL 0x1B6E7F0
	0x01CE9324 ADRP X0, 0x2265000
	0x01CE9328 LDR X0, [X0 + 0x3D8]
	0x01CE932C BL 0x1B6E7F0
	0x01CE9330 ADRP X0, 0x2264000
	0x01CE9334 LDR X0, [X0 + 0x478]
	0x01CE9338 BL 0x1B6E7F0
	0x01CE933C ADRP X0, 0x2264000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x253B000
	006 Move W8, [X21+1649]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2266000
	014 Move X0, [X0+3448]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1649], W8
	018 Move W0, 1
	019 Move X1, X31
	020 Move W21, 1
	021 Call Assert.Check, X0
	022 Compare X19, 0
	023 JumpIfEqual {47}
	024 Move X8, 0x2266000
	025 Move X8, [X8+3448]
	026 Move W1, [X20+36]
	027 Move [X19+88], W21
	028 Move X9, [X19]
	029 Move X8, [X8]
	030 Move W11, [X9+304]
	031 Move W10, [X8+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X9, [X9+200]
	034 Add X9, X9, X10
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call MobController.RPC_Hit, X0, X1
	043 Return 
	044 Move X0, X19
	045 Move X1, X8
	046 Call 0x1B6FCDC
	047 Call 0x1B6FA1C

Method: System.Void RPC_SetViewIdle@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01CE9340 LDR X0, [X0 + 0x4C0]
	0x01CE9344 BL 0x1B6E7F0
	0x01CE9348 MOVZ W8, 0x1
	0x01CE934C STRB W8, [X21 + 0x67C]
	0x01CE9350 LDR X0, [X20]
	0x01CE9354 MOVI V0.2D, 0x0
	0x01CE9358 STUR V0, [X31 + 0x3C]
	0x01CE935C STP V0, V0, [X31 + 0x20]
	0x01CE9360 STR X31, [X31 + 0x18]
	0x01CE9364 ADRP X21, 0x2264000
	0x01CE9368 LDR W8, [X0 + 0xE0]
	0x01CE936C LDR X21, [X21 + 0x4C0]
	0x01CE9370 STR S8, [X31 + 0x10]
	0x01CE9374 FADD S8, S8, S8
	0x01CE9378 MOV V11.16B, V9.16B
	0x01CE937C FADD S9, S9, S9
	0x01CE9380 MOV V12.16B, V10.16B
	0x01CE9384 FADD S10, S10, S10
	0x01CE9388 CBNZ W8, 0x1CE9394
	0x01CE938C BL 0x1B6E8F8
	0x01CE9390 LDR X0, [X20]
	0x01CE9394 LDR X8, [X0 + 0xB8]
	0x01CE9398 LDR V0, [X31 + 0x14]
	0x01CE939C MOV X1, X31
	0x01CE93A0 LDR W0, [X8 + 0x30]
	0x01CE93A4 FSUB S15, S0, S8
	0x01CE93A8 FSUB S8, S13, S9
	0x01CE93AC FSUB S9, S14, S10
	0x01CE93B0 MOV V10.16B, V14.16B
	0x01CE93B4 BL 0x3A9DE68
	0x01CE93B8 LDR X8, [X21]
	0x01CE93BC MOV W20, W0
	0x01CE93C0 LDR W9, [X8 + 0xE0]
	0x01CE93C4 CBNZ W9, 0x1CE93D0
	0x01CE93C8 MOV X0, X8
	0x01CE93CC BL 0x1B6E8F8
	0x01CE93D0 LDP S1, S4, [X31 + 0xC]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x253B000
	005 Move W8, [X20+1650]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2266000
	012 Move X0, [X0+3448]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1650], W8
	016 Move W0, 1
	017 Move X1, X31
	018 Move W20, 1
	019 Call Assert.Check, X0
	020 Compare X19, 0
	021 JumpIfEqual {42}
	022 Move X9, 0x2266000
	023 Move X9, [X9+3448]
	024 Move [X19+88], W20
	025 Move X8, [X19]
	026 Move X1, [X9]
	027 Move W10, [X8+304]
	028 Move W9, [X1+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X8+200]
	031 Add X8, X8, X9
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Call MobController.RPC_SetViewIdle, X0
	039 Return 
	040 Move X0, X19
	041 Call 0x1B6FCDC
	042 Call 0x1B6FA1C

Method: System.Void RPC_SetViewWalk@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01CE93D4 FMOV S0, 2
	0x01CE93D8 FMOV S3, 1.5
	0x01CE93DC MOV V2.16B, V9.16B
	0x01CE93E0 FADD S7, S1, S0
	0x01CE93E4 MOV V0.16B, V15.16B
	0x01CE93E8 MOV V1.16B, V8.16B
	0x01CE93EC MOV V5.16B, V11.16B
	0x01CE93F0 MOV V6.16B, V12.16B
	0x01CE93F4 MOV W0, W20
	0x01CE93F8 MOV X1, X31
	0x01CE93FC BL 0x3AF4DC8
	0x01CE9400 CBZ X0, 0x1CE95CC
	0x01CE9404 LDR X8, [X0 + 0x18]
	0x01CE9408 LDR V14, [X31 + 0x14]
	0x01CE940C MOV X21, X0
	0x01CE9410 MOV X20, X31
	0x01CE9414 CMP W8, 0x1
	0x01CE9418 B.LT 0x1CE9558
	0x01CE941C ADRP X24, 0x2267000
	0x01CE9420 ADRP X9, 0xFFFFFFFFFEDC0000
	0x01CE9424 ADRP X22, 0x2264000
	0x01CE9428 LDR X24, [X24 + 0x310]
	0x01CE942C LDR V12, [X9 + 0x934]
	0x01CE9430 LDR X22, [X22 + 0x480]
	0x01CE9434 MOV X23, X31
	0x01CE9438 AND X8, X8, 0x0
	0x01CE943C ADD X25, X21, 0x20
	0x01CE9440 ADRP X26, 0x253A000
	0x01CE9444 MOVZ W27, 0x1
	0x01CE9448 CMP X23, W8, UXTW
	0x01CE944C B.CS 0x1CE95D0
	0x01CE9450 LDR W8, [X25 + 0x28]
	0x01CE9454 LDR X9, [X25 + 0x20]
	0x01CE9458 LDP V1, V0, [X25]
	0x01CE945C ADD X0, X31, 0x20
	0x01CE9460 MOV X1, X31
	0x01CE9464 STR W8, [X31 + 0x48]
	0x01CE9468 STR X9, [X31 + 0x40]
	0x01CE946C STP V1, V0, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x253B000
	006 Move W8, [X21+1651]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2266000
	014 Move X0, [X0+3448]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1651], W8
	018 Move W0, 1
	019 Move X1, X31
	020 Move W21, 1
	021 Call Assert.Check, X0
	022 Compare X19, 0
	023 JumpIfEqual {46}
	024 Move X9, 0x2266000
	025 Move X9, [X9+3448]
	026 Move V0, [X20+36]
	027 Move [X19+88], W21
	028 Move X8, [X19]
	029 Move X1, [X9]
	030 Move W10, [X8+304]
	031 Move W9, [X1+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X8, [X8+200]
	034 Add X8, X8, X9
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call MobController.RPC_SetViewWalk, X0, V0
	043 Return 
	044 Move X0, X19
	045 Call 0x1B6FCDC
	046 Call 0x1B6FA1C

