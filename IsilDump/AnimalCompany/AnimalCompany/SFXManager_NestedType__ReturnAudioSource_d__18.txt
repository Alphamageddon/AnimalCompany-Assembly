Type: AnimalCompany.SFXManager/<ReturnAudioSource>d__18

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x01DD3CA0 CMP X23, W8, UXTW
	0x01DD3CA4 B.CS 0x1DD3D08
	0x01DD3CA8 LDR X0, [X24]
	0x01DD3CAC LDP X21, X22, [X25 - 0x8]
	0x01DD3CB0 LDR W8, [X0 + 0xE0]
	0x01DD3CB4 CBNZ W8, 0x1DD3CBC
	0x01DD3CB8 BL 0x1C16DFC
	0x01DD3CBC MOV X0, X22
	0x01DD3CC0 BL 0x1DD3418
	0x01DD3CC4 CBZ X20, 0x1DD3D0C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x01DD3EFC BL 0x1C16DFC

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x01DD3F00 LDR X0, [X26]
	0x01DD3F04 MOV X1, X20
	0x01DD3F08 BL 0x1DD33A8
	0x01DD3F0C LDR X0, [X25]
	0x01DD3F10 BL 0x1C16F10
	0x01DD3F14 LDR X2, [X24]
	0x01DD3F18 MOV X1, X19
	0x01DD3F1C MOV X3, X31
	0x01DD3F20 MOV X20, X0
	0x01DD3F24 BL 0x35C52F0
	0x01DD3F28 LDR X0, [X23]
	0x01DD3F2C MOVZ W1, 0x1
	0x01DD3F30 MOVZ W23, 0x1
	0x01DD3F34 BL 0x1C16D6C
	0x01DD3F38 LDRB W8, [X22 + 0x787]
	0x01DD3F3C MOV X19, X0
	0x01DD3F40 CBNZ W8, 0x1DD3F54
	0x01DD3F44 ADRP X0, 0x2320000
	0x01DD3F48 LDR X0, [X0 + 0x648]
	0x01DD3F4C BL 0x1C16CF4
	0x01DD3F50 STRB W23, [X22 + 0x787]
	0x01DD3F54 LDR X0, [X21]
	0x01DD3F58 LDR W8, [X0 + 0xE0]
	0x01DD3F5C CBNZ W8, 0x1DD3F68
	0x01DD3F60 BL 0x1C16DFC
	0x01DD3F64 LDR X0, [X21]
	0x01DD3F68 LDR X8, [X0 + 0xB8]
	0x01DD3F6C LDR X8, [X8]
	0x01DD3F70 CBZ X8, 0x1DD3FCC
	0x01DD3F74 LDR X8, [X8 + 0xB8]
	0x01DD3F78 CBZ X8, 0x1DD3FCC
	0x01DD3F7C CBZ X19, 0x1DD3FCC
	0x01DD3F80 LDR X21, [X8 + 0x58]
	0x01DD3F84 CBZ X21, 0x1DD3F9C
	0x01DD3F88 LDR X8, [X19]
	0x01DD3F8C MOV X0, X21
	0x01DD3F90 LDR X1, [X8 + 0x40]
	0x01DD3F94 BL 0x1C16E00
	0x01DD3F98 CBZ X0, 0x1DD3FD4
	0x01DD3F9C LDR W8, [X19 + 0x18]
	0x01DD3FA0 CBZ W8, 0x1DD3FD0
	0x01DD3FA4 STR X21, [X19 + 0x20]
	0x01DD3FA8 MOV X0, X20
	0x01DD3FAC MOV X1, X19
	0x01DD3FB0 LDP X20, X19, [X31 + 0x40]
	0x01DD3FB4 LDP X22, X21, [X31 + 0x30]
	0x01DD3FB8 LDP X24, X23, [X31 + 0x20]
	0x01DD3FBC LDP X26, X25, [X31 + 0x10]
	0x01DD3FC0 MOV X2, X31
	0x01DD3FC4 LDP X30, X27, [X31], #0x50
	0x01DD3FC8 B 0x1D363F0
	0x01DD3FCC BL 0x1C16F20
	0x01DD3FD0 BL 0x1C16F28
	0x01DD3FD4 BL 0x1C16F44
	0x01DD3FD8 MOV X1, X31
	0x01DD3FDC BL 0x1C16DEC
	0x01DD3FE0 STP X30, X23, [X31 - 0x30]!
	0x01DD3FE4 STP X22, X21, [X31 + 0x10]
	0x01DD3FE8 STP X20, X19, [X31 + 0x20]
	0x01DD3FEC ADRP X22, 0x2605000
	0x01DD3FF0 ADRP X23, 0x2320000
	0x01DD3FF4 ADRP X20, 0x2325000
	0x01DD3FF8 ADRP X21, 0x2320000
	0x01DD3FFC LDRB W8, [X22 + 0xC1B]
	0x01DD4000 LDR X23, [X23 + 0xDA0]
	0x01DD4004 LDR X20, [X20 + 0x750]
	0x01DD4008 LDR X21, [X21 + 0x648]
	0x01DD400C MOV X19, X0
	0x01DD4010 TBNZ X8, 0x0, 0x1DD4040
	0x01DD4014 ADRP X0, 0x2324000
	0x01DD4018 LDR X0, [X0 + 0x750]
	0x01DD401C BL 0x1C16CF4
	0x01DD4020 ADRP X0, 0x231F000
	0x01DD4024 LDR X0, [X0 + 0x648]
	0x01DD4028 BL 0x1C16CF4
	0x01DD402C ADRP X0, 0x231F000
	0x01DD4030 LDR X0, [X0 + 0xDA0]
	0x01DD4034 BL 0x1C16CF4
	0x01DD4038 MOVZ W8, 0x1
	0x01DD403C STRB W8, [X22 + 0xC1B]
	0x01DD4040 LDR X0, [X23]
	0x01DD4044 BL 0x1C16F10
	0x01DD4048 LDR X2, [X20]
	0x01DD404C MOV X1, X19
	0x01DD4050 MOV X3, X31
	0x01DD4054 MOV X20, X0
	0x01DD4058 BL 0x35C52F0
	0x01DD405C LDR X0, [X21]
	0x01DD4060 LDR W8, [X0 + 0xE0]
	0x01DD4064 CBNZ W8, 0x1DD406C
	0x01DD4068 BL 0x1C16DFC
	0x01DD406C MOV X0, X20
	0x01DD4070 LDP X20, X19, [X31 + 0x20]
	0x01DD4074 LDP X22, X21, [X31 + 0x10]
	0x01DD4078 MOV X1, X31
	0x01DD407C LDP X30, X23, [X31], #0x30
	0x01DD4080 B 0x1D36978
	0x01DD4084 STR X30, [X31 - 0x20]!
	0x01DD4088 STP X20, X19, [X31 + 0x10]
	0x01DD408C ADRP X20, 0x2604000
	0x01DD4090 ADRP X19, 0x231F000
	0x01DD4094 LDRB W8, [X20 + 0xC1C]
	0x01DD4098 LDR X19, [X19 + 0x648]
	0x01DD409C TBNZ X8, 0x0, 0x1DD40D8
	0x01DD40A0 ADRP X0, 0x231F000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2606000
	007 Move W8, [X20+3086]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x2321000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move X0, 0x2326000
	017 Move X0, [X0+1568]
	018 Call 0x1C17CF4
	019 Move X0, 0x2326000
	020 Move X0, [X0+192]
	021 Call 0x1C17CF4
	022 Move X0, 0x2324000
	023 Move X0, [X0+3120]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3086], W8
	027 Move W8, [X19+16]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Compare W8, 0
	030 JumpIfNotEqual {120}
	031 Move TEMP, 0
	032 Not TEMP
	033 Move W8, TEMP
	034 Move [X19+16], W8
	035 Move X8, 0x2324000
	036 Move V8, [X19+32]
	037 Move X8, [X8+3120]
	038 Move X0, [X8]
	039 Call 0x1C17F10
	040 Move X8, -19824640
	041 Move V0, [X8+816]
	042 Move X1, X31
	043 Move X20, X0
	044 Add S0, S8, S0
	045 Call WaitForSeconds..ctor, X0, V0
	046 Move W0, 1
	047 Move [X19+24], X20
	048 Move [X19+16], W0
	049 Move TEMP, 0
	050 Not TEMP
	051 Move W8, TEMP
	052 Move [X19+16], W8
	053 Move X8, 0x2321000
	054 Move X8, [X8+1432]
	055 Move X20, [X19+40]
	056 Move X0, [X8]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X0, X20
	062 Move X1, X31
	063 Move X2, X31
	064 Call Object.op_Inequality, X0, X1
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {120}
	069 Move X0, [X19+40]
	070 Compare X0, 0
	071 JumpIfEqual {127}
	072 Move X1, X31
	073 Move X2, X31
	074 Call AudioSource.set_clip, X0, X1
	075 Move X0, [X19+40]
	076 Compare X0, 0
	077 JumpIfEqual {127}
	078 Move W1, 1
	079 Move X2, X31
	080 Call AudioSource.set_mute, X0, X1
	081 Move X0, [X19+40]
	082 Compare X0, 0
	083 JumpIfEqual {127}
	084 Move X1, X31
	085 Call Component.get_transform, X0
	086 Move X21, 0x2325000
	087 Move X21, [X21+192]
	088 Move X8, [X21]
	089 Move X8, [X8+184]
	090 Move X8, [X8]
	091 Compare X8, 0
	092 JumpIfEqual {127}
	093 Move X20, X0
	094 Move X0, X8
	095 Move X1, X31
	096 Call Component.get_gameObject, X0
	097 Compare X0, 0
	098 JumpIfEqual {127}
	099 Move X1, X31
	100 Call GameObject.get_transform, X0
	101 Compare X20, 0
	102 JumpIfEqual {127}
	103 Move X1, X0
	104 Move X0, X20
	105 Move X2, X31
	106 Call Transform.set_parent, X0, X1
	107 Move X8, [X21]
	108 Move X8, [X8+184]
	109 Move X8, [X8]
	110 Compare X8, 0
	111 JumpIfEqual {127}
	112 Move X0, [X8+88]
	113 Compare X0, 0
	114 JumpIfEqual {127}
	115 Move X8, 0x2325000
	116 Move X1, [X19+40]
	117 Move X8, [X8+1568]
	118 Move X2, [X8]
	119 Call Queue`1<Object>.Enqueue, X0, X1
	120 Move W0, W31
	121 Move X20, [X31+32]
	122 Move X19, [X31+40]
	123 Move X30, [X31+16]
	124 Move X21, [X31+24]
	125 Move V8, [X31+48]
	126 Return X0
	127 Call 0x1C17F20

Method: System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()

Disassembly:
	0x01DD40A4 LDR X0, [X0 + 0xB50]
	0x01DD40A8 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x01DD40AC ADRP X0, 0x231F000
	0x01DD40B0 LDR X0, [X0 + 0x648]
	0x01DD40B4 BL 0x1C16CF4
	0x01DD40B8 ADRP X0, 0x231F000
	0x01DD40BC LDR X0, [X0 + 0xDC8]
	0x01DD40C0 BL 0x1C16CF4
	0x01DD40C4 ADRP X0, 0x2324000
	0x01DD40C8 LDR X0, [X0 + 0x760]
	0x01DD40CC BL 0x1C16CF4
	0x01DD40D0 MOVZ W8, 0x1
	0x01DD40D4 STRB W8, [X20 + 0xC1C]
	0x01DD40D8 LDR X0, [X19]
	0x01DD40DC LDR W8, [X0 + 0xE0]
	0x01DD40E0 CBNZ W8, 0x1DD40E8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x2320000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x2325000
	011 Move X0, [X0+1752]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x01DD40E4 BL 0x1C16DFC
	0x01DD40E8 ADRP X20, 0x2604000

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

