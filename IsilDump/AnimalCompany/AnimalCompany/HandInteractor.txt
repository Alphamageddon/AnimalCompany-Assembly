Type: AnimalCompany.HandInteractor

Method: AnimalCompany.HandSide get_handSide()

Disassembly:
	0x01CA8008 MOV X0, X19
	0x01CA800C MOV X2, X31

ISIL:
	001 Move W0, [X0+128]
	002 Return X0

Method: AnimalCompany.AttachedItemAnchor get_itemAnchor()

Disassembly:
	0x01CA8010 BL 0x31E7550
	0x01CA8014 ADRP X0, 0x22A6000

ISIL:
	001 Move X0, [X0+136]
	002 Return X0

Method: System.Void Spawned()

Disassembly:
	0x01CA8018 LDR X0, [X0 + 0x678]
	0x01CA801C BL 0x1B6E804
	0x01CA8020 MOV X1, X0
	0x01CA8024 MOV X0, X19
	0x01CA8028 BL 0x1B6E8E8
	0x01CA802C STP X30, X19, [X31 - 0x10]!
	0x01CA8030 LDR X8, [X0 + 0x50]
	0x01CA8034 CBZ X8, 0x1CA8044
	0x01CA8038 LDR W0, [X8 + 0x2C]
	0x01CA803C LDP X30, X19, [X31], #0x10
	0x01CA8040 RET
	0x01CA8044 ADRP X0, 0x22A5000
	0x01CA8048 LDR X0, [X0 + 0x490]
	0x01CA804C BL 0x1B6E804
	0x01CA8050 BL 0x1B6EA0C
	0x01CA8054 MOV X19, X0
	0x01CA8058 ADRP X0, 0x22A6000
	0x01CA805C LDR X0, [X0 + 0x680]
	0x01CA8060 BL 0x1B6E804
	0x01CA8064 MOV X1, X0
	0x01CA8068 MOV X0, X19
	0x01CA806C MOV X2, X31
	0x01CA8070 BL 0x31E7550
	0x01CA8074 ADRP X0, 0x22A6000
	0x01CA8078 LDR X0, [X0 + 0x688]
	0x01CA807C BL 0x1B6E804
	0x01CA8080 MOV X1, X0
	0x01CA8084 MOV X0, X19
	0x01CA8088 BL 0x1B6E8E8
	0x01CA808C STP X30, X19, [X31 - 0x10]!
	0x01CA8090 LDR X8, [X0 + 0x50]
	0x01CA8094 CBZ X8, 0x1CA80A4
	0x01CA8098 STR W1, [X8 + 0x2C]
	0x01CA809C LDP X30, X19, [X31], #0x10
	0x01CA80A0 RET
	0x01CA80A4 ADRP X0, 0x22A5000
	0x01CA80A8 LDR X0, [X0 + 0x490]
	0x01CA80AC BL 0x1B6E804
	0x01CA80B0 BL 0x1B6EA0C
	0x01CA80B4 MOV X19, X0
	0x01CA80B8 ADRP X0, 0x22A6000
	0x01CA80BC LDR X0, [X0 + 0x680]
	0x01CA80C0 BL 0x1B6E804
	0x01CA80C4 MOV X1, X0
	0x01CA80C8 MOV X0, X19
	0x01CA80CC MOV X2, X31
	0x01CA80D0 BL 0x31E7550
	0x01CA80D4 ADRP X0, 0x22A6000
	0x01CA80D8 LDR X0, [X0 + 0x690]
	0x01CA80DC BL 0x1B6E804
	0x01CA80E0 MOV X1, X0
	0x01CA80E4 MOV X0, X19
	0x01CA80E8 BL 0x1B6E8E8
	0x01CA80EC STP X30, X23, [X31 - 0x30]!
	0x01CA80F0 STP X22, X21, [X31 + 0x10]
	0x01CA80F4 STP X20, X19, [X31 + 0x20]
	0x01CA80F8 ADRP X20, 0x257B000
	0x01CA80FC LDRB W8, [X20 + 0x46B]
	0x01CA8100 MOV X19, X0
	0x01CA8104 TBNZ X8, 0x0, 0x1CA8128
	0x01CA8108 ADRP X0, 0x22A6000
	0x01CA810C LDR X0, [X0 + 0x170]
	0x01CA8110 BL 0x1B6E7F0
	0x01CA8114 ADRP X0, 0x22A6000
	0x01CA8118 LDR X0, [X0 + 0x698]
	0x01CA811C BL 0x1B6E7F0
	0x01CA8120 MOVZ W8, 0x1
	0x01CA8124 STRB W8, [X20 + 0x46B]
	0x01CA8128 LDR X22, [X19 + 0x80]
	0x01CA812C CBZ X22, 0x1CA81AC
	0x01CA8130 ADRP X23, 0x22A6000
	0x01CA8134 LDR X23, [X23 + 0x170]
	0x01CA8138 ADRP X21, 0x22A6000
	0x01CA813C LDR X20, [X22 + 0x190]
	0x01CA8140 LDR X0, [X23]
	0x01CA8144 LDR X21, [X21 + 0x698]
	0x01CA8148 BL 0x1B6EA0C
	0x01CA814C LDR X2, [X21]
	0x01CA8150 MOV X1, X19
	0x01CA8154 MOV X3, X31
	0x01CA8158 MOV X21, X0
	0x01CA815C BL 0x317DB24
	0x01CA8160 MOV X0, X20
	0x01CA8164 MOV X1, X21
	0x01CA8168 MOV X2, X31
	0x01CA816C BL 0x322A750
	0x01CA8170 CBZ X0, 0x1CA8198
	0x01CA8174 LDR X1, [X23]
	0x01CA8178 LDR X8, [X0]
	0x01CA817C CMP X8, X1
	0x01CA8180 B.NE 0x1CA8194
	0x01CA8184 STR X0, [X22 + 0x190]
	0x01CA8188 LDR X8, [X0]
	0x01CA818C CMP X8, X1
	0x01CA8190 B.EQ 0x1CA819C
	0x01CA8194 BL 0x1B6ECDC
	0x01CA8198 STR X0, [X22 + 0x190]
	0x01CA819C LDP X20, X19, [X31 + 0x20]
	0x01CA81A0 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x257C000
	008 Move W8, [X20+1124]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x22A7000
	015 Move X0, [X0+368]
	016 Call 0x1B6F7F0
	017 Move X0, 0x22A7000
	018 Move X0, [X0+1568]
	019 Call 0x1B6F7F0
	020 Move X0, 0x22A7000
	021 Move X0, [X0+1104]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X20+1124], W8
	025 Move X0, X19
	026 Move X1, X31
	027 Call NetworkBehaviour.Spawned, X0
	028 Move X0, [X19+64]
	029 Compare X0, 0
	030 JumpIfEqual {105}
	031 Move W8, [X0+96]
	032 Move TEMP, X8
	033 And TEMP, TEMP, 2
	034 Compare TEMP, 2
	035 JumpIfEqual {105}
	036 Move X1, X31
	037 Call NetworkObject.get_HasInputAuthority, X0
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {105}
	042 Move X22, 0x22A7000
	043 Move X22, [X22+1104]
	044 Move W9, [X19+128]
	045 Move X8, [X22]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X8, [X8+184]
	048 Move X23, 0x22A7000
	049 Move X20, [X8+88]
	050 Move X23, [X23+368]
	051 Move X0, [X23]
	052 Call 0x1B6FA0C
	053 Move X8, 0x22A7000
	054 Move X8, [X8+1568]
	055 Move X1, X19
	056 Move X3, X31
	057 Move X21, X0
	058 Move X2, [X8]
	059 Call Action..ctor, X0, X1, X2
	060 Move X0, X20
	061 Move X1, X21
	062 Move X2, X31
	063 Call Delegate.Combine, X0, X1
	064 Compare X0, 0
	065 JumpIfEqual {99}
	066 Move X1, [X23]
	067 Move X8, [X0]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X8, [X22]
	070 Move X8, [X8+184]
	071 Move [X8+88], X0
	072 Move X23, 0x22A7000
	073 Move X20, [X8+72]
	074 Move X23, [X23+368]
	075 Move X0, [X23]
	076 Call 0x1B6FA0C
	077 Move X8, 0x22A7000
	078 Move X8, [X8+1568]
	079 Move X1, X19
	080 Move X3, X31
	081 Move X21, X0
	082 Move X2, [X8]
	083 Call Action..ctor, X0, X1, X2
	084 Move X0, X20
	085 Move X1, X21
	086 Move X2, X31
	087 Call Delegate.Combine, X0, X1
	088 Compare X0, 0
	089 JumpIfEqual {102}
	090 Move X1, [X23]
	091 Move X8, [X0]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X8, [X22]
	094 Move X8, [X8+184]
	095 Move [X8+72], X0
	096 Move X8, [X0]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Call 0x1B6FCDC
	099 Move X8, [X22]
	100 Move X8, [X8+184]
	101 Move [X8+88], X0
	102 Move X8, [X22]
	103 Move X8, [X8+184]
	104 Move [X8+72], X0
	105 Move X20, [X31+32]
	106 Move X19, [X31+40]
	107 Move X22, [X31+16]
	108 Move X21, [X31+24]
	109 Move X30, [X31+48]
	110 Move X23, [X31+56]
	111 Return 

Method: System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)

Disassembly:
	0x01CA81A4 LDP X30, X23, [X31], #0x30
	0x01CA81A8 RET
	0x01CA81AC BL 0x1B6EA1C
	0x01CA81B0 STP X30, X23, [X31 - 0x30]!
	0x01CA81B4 STP X22, X21, [X31 + 0x10]
	0x01CA81B8 STP X20, X19, [X31 + 0x20]
	0x01CA81BC ADRP X20, 0x257B000
	0x01CA81C0 ADRP X21, 0x22A6000
	0x01CA81C4 LDRB W8, [X20 + 0x46C]
	0x01CA81C8 LDR X21, [X21 + 0x1C0]
	0x01CA81CC MOV X19, X0
	0x01CA81D0 TBNZ X8, 0x0, 0x1CA820C
	0x01CA81D4 ADRP X0, 0x22A6000
	0x01CA81D8 LDR X0, [X0 + 0x170]
	0x01CA81DC BL 0x1B6E7F0
	0x01CA81E0 ADRP X0, 0x22A6000
	0x01CA81E4 LDR X0, [X0 + 0x698]
	0x01CA81E8 BL 0x1B6E7F0
	0x01CA81EC ADRP X0, 0x22A6000
	0x01CA81F0 LDR X0, [X0 + 0x6A0]
	0x01CA81F4 BL 0x1B6E7F0
	0x01CA81F8 ADRP X0, 0x22A6000
	0x01CA81FC LDR X0, [X0 + 0x1C0]
	0x01CA8200 BL 0x1B6E7F0
	0x01CA8204 MOVZ W8, 0x1
	0x01CA8208 STRB W8, [X20 + 0x46C]
	0x01CA820C LDR X0, [X21]
	0x01CA8210 LDR W8, [X0 + 0xE0]
	0x01CA8214 CBNZ W8, 0x1CA821C
	0x01CA8218 BL 0x1B6E8F8
	0x01CA821C CBZ X19, 0x1CA82D4
	0x01CA8220 LDR W8, [X19 + 0x30]
	0x01CA8224 LDR X22, [X19 + 0x80]
	0x01CA8228 ORR W8, W8, 0x8
	0x01CA822C STR W8, [X19 + 0x30]
	0x01CA8230 CBZ X22, 0x1CA82D4
	0x01CA8234 ADRP X23, 0x22A6000
	0x01CA8238 LDR X23, [X23 + 0x170]
	0x01CA823C ADRP X21, 0x22A6000
	0x01CA8240 LDR X20, [X22 + 0x190]
	0x01CA8244 LDR X0, [X23]
	0x01CA8248 LDR X21, [X21 + 0x698]
	0x01CA824C BL 0x1B6EA0C
	0x01CA8250 LDR X2, [X21]
	0x01CA8254 MOV X1, X19
	0x01CA8258 MOV X3, X31
	0x01CA825C MOV X21, X0
	0x01CA8260 BL 0x317DB24
	0x01CA8264 MOV X0, X20
	0x01CA8268 MOV X1, X21
	0x01CA826C MOV X2, X31
	0x01CA8270 BL 0x322A948
	0x01CA8274 CBZ X0, 0x1CA829C
	0x01CA8278 LDR X1, [X23]
	0x01CA827C LDR X8, [X0]
	0x01CA8280 CMP X8, X1
	0x01CA8284 B.NE 0x1CA8298
	0x01CA8288 STR X0, [X22 + 0x190]
	0x01CA828C LDR X8, [X0]
	0x01CA8290 CMP X8, X1
	0x01CA8294 B.EQ 0x1CA82A0
	0x01CA8298 BL 0x1B6ECDC
	0x01CA829C STR X0, [X22 + 0x190]
	0x01CA82A0 ADRP X8, 0x22A6000
	0x01CA82A4 LDR X8, [X8 + 0x6A0]
	0x01CA82A8 LDR W19, [X19 + 0xBC]
	0x01CA82AC LDR X0, [X8]
	0x01CA82B0 LDR W8, [X0 + 0xE0]
	0x01CA82B4 CBNZ W8, 0x1CA82BC
	0x01CA82B8 BL 0x1B6E8F8
	0x01CA82BC MOV W0, W19
	0x01CA82C0 LDP X20, X19, [X31 + 0x20]
	0x01CA82C4 LDP X22, X21, [X31 + 0x10]
	0x01CA82C8 MOV X1, X31
	0x01CA82CC LDP X30, X23, [X31], #0x30
	0x01CA82D0 B 0x301675C
	0x01CA82D4 BL 0x1B6EA1C
	0x01CA82D8 SUB X31, X31, 0x90
	0x01CA82DC STP X30, X23, [X31 + 0x60]
	0x01CA82E0 STP X22, X21, [X31 + 0x70]
	0x01CA82E4 STP X20, X19, [X31 + 0x80]
	0x01CA82E8 ADRP X20, 0x257B000
	0x01CA82EC LDRB W8, [X20 + 0x46D]
	0x01CA82F0 MOV X19, X0
	0x01CA82F4 TBNZ X8, 0x0, 0x1CA8324
	0x01CA82F8 ADRP X0, 0x22A6000
	0x01CA82FC LDR X0, [X0 + 0x6A8]
	0x01CA8300 BL 0x1B6E7F0
	0x01CA8304 ADRP X0, 0x22A6000
	0x01CA8308 LDR X0, [X0 + 0x6B0]
	0x01CA830C BL 0x1B6E7F0
	0x01CA8310 ADRP X0, 0x22A6000
	0x01CA8314 LDR X0, [X0 + 0x1E8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x257C000
	010 Move X22, 0x22A7000
	011 Move X23, 0x22A7000
	012 Move X24, 0x22A7000
	013 Move W8, [X25+1125]
	014 Move X22, [X22+1104]
	015 Move X23, [X23+368]
	016 Move X24, [X24+1568]
	017 Move W21, W2
	018 Move X20, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {35}
	024 Move X0, 0x22A7000
	025 Move X0, [X0+368]
	026 Call 0x1B6F7F0
	027 Move X0, 0x22A7000
	028 Move X0, [X0+1568]
	029 Call 0x1B6F7F0
	030 Move X0, 0x22A7000
	031 Move X0, [X0+1104]
	032 Call 0x1B6F7F0
	033 Move W8, 1
	034 Move [X25+1125], W8
	035 And W2, W21, 1
	036 Move X0, X19
	037 Move X1, X20
	038 Move X3, X31
	039 Call NetworkBehaviour.Despawned, X0, X1, X2
	040 Move X8, [X22]
	041 Move X0, [X23]
	042 Move X8, [X8+184]
	043 Move X20, [X8+88]
	044 Call 0x1B6FA0C
	045 Move X2, [X24]
	046 Move X1, X19
	047 Move X3, X31
	048 Move X21, X0
	049 Call Action..ctor, X0, X1, X2
	050 Move X0, X20
	051 Move X1, X21
	052 Move X2, X31
	053 Call Delegate.Remove, X0, X1
	054 Move X1, [X23]
	055 Compare X0, 0
	056 JumpIfEqual {64}
	057 Move X8, [X0]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X8, [X22]
	060 Move X8, [X8+184]
	061 Move [X8+88], X0
	062 Move X9, [X0]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X8, [X22]
	065 Move X8, [X8+184]
	066 Move [X8+88], X0
	067 Move X20, [X8+72]
	068 Move X0, X1
	069 Call 0x1B6FA0C
	070 Move X2, [X24]
	071 Move X1, X19
	072 Move X3, X31
	073 Move X21, X0
	074 Call Action..ctor, X0, X1, X2
	075 Move X0, X20
	076 Move X1, X21
	077 Move X2, X31
	078 Call Delegate.Remove, X0, X1
	079 Compare X0, 0
	080 JumpIfEqual {90}
	081 Move X1, [X23]
	082 Move X8, [X0]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X8, [X22]
	085 Move X8, [X8+184]
	086 Move [X8+72], X0
	087 Move X8, [X0]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Call 0x1B6FCDC
	090 Move X8, [X22]
	091 Move X8, [X8+184]
	092 Move [X8+72], X0
	093 Move X20, [X31+48]
	094 Move X19, [X31+56]
	095 Move X22, [X31+32]
	096 Move X21, [X31+40]
	097 Move X24, [X31+16]
	098 Move X23, [X31+24]
	099 Move X30, [X31+64]
	100 Move X25, [X31+72]
	101 Return 

Method: System.Void Awake()

Disassembly:
	0x01CA8318 BL 0x1B6E7F0
	0x01CA831C MOVZ W8, 0x1
	0x01CA8320 STRB W8, [X20 + 0x46D]
	0x01CA8324 ADD X8, X31, 0x8
	0x01CA8328 MOV X0, X19
	0x01CA832C STP X31, X31, [X31 + 0x40]
	0x01CA8330 STR X31, [X31 + 0x50]
	0x01CA8334 BL 0x1CA7F74
	0x01CA8338 LDUR V0, [X31 + 0x8]
	0x01CA833C LDR X9, [X31 + 0x18]
	0x01CA8340 MOV W20, W31
	0x01CA8344 STR V0, [X31 + 0x4]
	0x01CA8348 LDR W8, [X31 + 0x48]
	0x01CA834C STR V0, [X31 + 0x2]
	0x01CA8350 STR X9, [X31 + 0x50]
	0x01CA8354 CMP W8, 0x1
	0x01CA8358 B.LT 0x1CA83E4
	0x01CA835C ADRP X22, 0x22A6000
	0x01CA8360 ADRP X23, 0x22A6000
	0x01CA8364 LDR X22, [X22 + 0x6A8]
	0x01CA8368 LDR X23, [X23 + 0x1E8]
	0x01CA836C ADD X8, X31, 0x20
	0x01CA8370 MOV X0, X19
	0x01CA8374 BL 0x1CA7F74
	0x01CA8378 LDR V0, [X31 + 0x2]
	0x01CA837C LDR X8, [X31 + 0x30]
	0x01CA8380 LDR X2, [X22]
	0x01CA8384 ADD X0, X31, 0x40
	0x01CA8388 MOV W1, W20
	0x01CA838C STR V0, [X31 + 0x4]
	0x01CA8390 STR X8, [X31 + 0x50]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x257C000
	007 Move X22, 0x22A7000
	008 Move X20, 0x22A7000
	009 Move W8, [X21+1126]
	010 Move X22, [X22+1576]
	011 Move X20, [X20+1584]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x22A7000
	018 Move X0, [X0+1584]
	019 Call 0x1B6F7F0
	020 Move X0, 0x22A7000
	021 Move X0, [X0+1576]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X21+1126], W8
	025 Move X1, [X22]
	026 Move X0, X19
	027 Call 0x2090DE8, X0
	028 Move [X19+136], X0
	029 Move X1, [X20]
	030 Move X0, X19
	031 Call 0x20914A4, X0
	032 Move [X19+144], X0
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return 

Method: System.Void TestGrab()

Disassembly:
	0x01CA8394 BL 0x22AE1F0

ISIL:
No ISIL was generated
Method: System.Boolean IsByBackAttachment()

Disassembly:
	0x01CA8428 ADRP X0, 0x22A6000
	0x01CA842C LDR X0, [X0 + 0x6B8]
	0x01CA8430 BL 0x1B6E7F0
	0x01CA8434 MOVZ W8, 0x1
	0x01CA8438 STRB W8, [X20 + 0x46E]
	0x01CA843C LDRB W8, [X19 + 0x58]
	0x01CA8440 CBZ W8, 0x1CA8470
	0x01CA8444 STRB W31, [X19 + 0x58]
	0x01CA8448 MOV X0, X19
	0x01CA844C BL 0x1CA7EA8
	0x01CA8450 ORN W8, W31, W0, 0x0
	0x01CA8454 AND W1, W8, 0x1
	0x01CA8458 MOV X0, X19
	0x01CA845C BL 0x1CA7F10
	0x01CA8460 MOV X0, X19
	0x01CA8464 LDP X20, X19, [X31 + 0x10]
	0x01CA8468 LDR X30, [X31], #0x20
	0x01CA846C B 0x1CA85AC
	0x01CA8470 ADRP X20, 0x22A6000
	0x01CA8474 LDR X20, [X20 + 0x1C0]
	0x01CA8478 LDR X0, [X20]
	0x01CA847C LDR W8, [X0 + 0xE0]
	0x01CA8480 CBNZ W8, 0x1CA8488
	0x01CA8484 BL 0x1B6E8F8
	0x01CA8488 MOV X0, X19
	0x01CA848C MOV X1, X31
	0x01CA8490 BL 0x1D697C8
	0x01CA8494 LDR X0, [X19 + 0x38]
	0x01CA8498 CBZ X0, 0x1CA85A8
	0x01CA849C MOV X1, X31
	0x01CA84A0 BL 0x1D87040
	0x01CA84A4 CMP W0, 0x4
	0x01CA84A8 B.NE 0x1CA84B8
	0x01CA84AC LDP X20, X19, [X31 + 0x10]
	0x01CA84B0 LDR X30, [X31], #0x20
	0x01CA84B4 RET
	0x01CA84B8 LDR X0, [X19 + 0x40]
	0x01CA84BC CBZ X0, 0x1CA85A8
	0x01CA84C0 MOV X1, X31
	0x01CA84C4 BL 0x1D9F538
	0x01CA84C8 ANDS W31, W0, 0x7
	0x01CA84CC B.EQ 0x1CA8530
	0x01CA84D0 TBNZ X0, 0x0, 0x1CA8448
	0x01CA84D4 LDR X8, [X19 + 0x38]
	0x01CA84D8 CBZ X8, 0x1CA85A8
	0x01CA84DC LDR X0, [X8 + 0x50]
	0x01CA84E0 CBZ X0, 0x1CA85A8
	0x01CA84E4 MOV X1, X31
	0x01CA84E8 BL 0x1DBEFE4
	0x01CA84EC TBZ X0, 0x0, 0x1CA84AC
	0x01CA84F0 LDR X8, [X19 + 0x38]
	0x01CA84F4 CBZ X8, 0x1CA85A8
	0x01CA84F8 LDR X0, [X8 + 0x50]
	0x01CA84FC MOVZ W1, 0x8
	0x01CA8500 MOV X2, X31
	0x01CA8504 BL 0x1DD601C
	0x01CA8508 MOV X20, X0
	0x01CA850C MOVZ W0, 0x1
	0x01CA8510 MOV X1, X31
	0x01CA8514 BL 0x1D29EBC
	0x01CA8518 LDR X8, [X19 + 0x40]
	0x01CA851C CBZ X8, 0x1CA85A8
	0x01CA8520 LDR X8, [X8 + 0x20]
	0x01CA8524 CBZ X8, 0x1CA8568
	0x01CA8528 LDR W0, [X8]
	0x01CA852C B 0x1CA856C

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x257C000
	008 Move W8, [X20+1127]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22A7000
	015 Move X0, [X0+408]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1127], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Component.get_transform, X0
	022 Compare X0, 0
	023 JumpIfEqual {79}
	024 Move X19, 0x22A7000
	025 Move X19, [X19+408]
	026 Move X1, X31
	027 Call Transform.get_position, X0
	028 Move X0, [X19]
	029 Move V8, V0
	030 Move V9, V1
	031 Move V10, V2
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1B6F8F8
	036 Move X20, 0x257C000
	037 Move W8, [X20+1103]
	038 Compare W8, 0
	039 JumpIfNotEqual {45}
	040 Move X0, 0x22A7000
	041 Move X0, [X0+408]
	042 Call 0x1B6F7F0
	043 Move W8, 1
	044 Move [X20+1103], W8
	045 Move X0, [X19]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {51}
	049 Call 0x1B6F8F8
	050 Move X0, [X19]
	051 Move X8, [X0+184]
	052 Move X0, [X8]
	053 Compare X0, 0
	054 JumpIfEqual {79}
	055 Move X1, X31
	056 Call PlayerController.get_backAttachAnchor, X0
	057 Compare X0, 0
	058 JumpIfEqual {79}
	059 Move X1, X31
	060 Call Transform.get_position, X0
	061 Subtract S0, S8, S0
	062 Subtract S1, S9, S1
	063 Subtract S2, S10, S2
	064 Multiply S0, S0, S0
	065 Multiply S1, S1, S1
	066 Multiply S2, S2, S2
	067 Add S0, S0, S1
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X30, [X31+24]
	071 Move D9, [X31+8]
	072 Move D8, [X31+16]
	073 Add S0, S2, S0
	074 Move S1, 0.25
	075 NotImplemented "Instruction FCMP not yet implemented."
	076 NotImplemented "Instruction CSET not yet implemented."
	077 Move V10, [X31+48]
	078 Return X0
	079 Call 0x1B6FA1C

Method: System.Boolean ReattachToAnchorIfFree(AnimalCompany.AttachedItemAnchor anchor)

Disassembly:
	0x01CA8530 LDR X0, [X20]
	0x01CA8534 LDR X19, [X19 + 0x40]
	0x01CA8538 LDR W8, [X0 + 0xE0]
	0x01CA853C CBNZ W8, 0x1CA8544
	0x01CA8540 BL 0x1B6E8F8
	0x01CA8544 ADRP X8, 0x22A6000
	0x01CA8548 LDR X8, [X8 + 0x6B8]
	0x01CA854C MOV X1, X19
	0x01CA8550 LDP X20, X19, [X31 + 0x10]
	0x01CA8554 MOVZ W2, 0x7
	0x01CA8558 LDR X0, [X8]
	0x01CA855C MOV X3, X31
	0x01CA8560 LDR X30, [X31], #0x20
	0x01CA8564 B 0x1D69640
	0x01CA8568 MOV X0, X31
	0x01CA856C LDR W1, [X19 + 0x68]
	0x01CA8570 MOVZ W2, 0x1
	0x01CA8574 MOV X3, X31
	0x01CA8578 BL 0x1DA8258
	0x01CA857C STUR X0, [X20 + 0x1C]
	0x01CA8580 CBZ X20, 0x1CA85A8
	0x01CA8584 MOVZ W8, 0x40
	0x01CA8588 STR W8, [X20 + 0xC]
	0x01CA858C LDR X0, [X19 + 0x38]
	0x01CA8590 CBZ X0, 0x1CA85A8
	0x01CA8594 MOV X1, X20
	0x01CA8598 LDP X20, X19, [X31 + 0x10]
	0x01CA859C MOV X2, X31
	0x01CA85A0 LDR X30, [X31], #0x20
	0x01CA85A4 B 0x1D8A710
	0x01CA85A8 BL 0x1B6EA1C
	0x01CA85AC STR X30, [X31 - 0x20]!
	0x01CA85B0 STP X20, X19, [X31 + 0x10]
	0x01CA85B4 LDR X20, [X0 + 0xA0]
	0x01CA85B8 MOV X1, X31
	0x01CA85BC MOV X19, X0
	0x01CA85C0 BL 0x3A9B084
	0x01CA85C4 CBZ X0, 0x1CA85F0
	0x01CA85C8 MOV X1, X31
	0x01CA85CC BL 0x3AA7658

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X1, 0
	007 JumpIfEqual {50}
	008 Move X19, X1
	009 Move X21, X0
	010 Move X0, X1
	011 Move X1, X31
	012 Call AttachedItemAnchor.get_grabbedItem, X0
	013 Move [X31+8], X0
	014 Add X0, X31, 8
	015 Move X1, X31
	016 Call NetworkBehaviourId.get_IsValid, X0
	017 Move W20, W0
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {42}
	022 Move X0, [X21+136]
	023 Compare X0, 0
	024 JumpIfEqual {50}
	025 Move X1, X31
	026 Call AttachedItemAnchor.get_grabbedItem, X0
	027 Move X8, [X21+136]
	028 Compare X8, 0
	029 JumpIfEqual {50}
	030 Move X21, X0
	031 Move X0, X8
	032 Move X1, X31
	033 Call AttachedItemAnchor.UnattachItem, X0
	034 Move W2, 1
	035 Move X0, X19
	036 Move X1, X21
	037 Move W3, W31
	038 Move X4, X31
	039 Move X5, X31
	040 Move X6, X31
	041 Call AttachedItemAnchor.RPC_TryGrabItem, X0, X1, X2, X3, X4
	042 NotImplemented "Instruction ORN not yet implemented."
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X30, [X31+16]
	046 Move X21, [X31+24]
	047 And W0, W8, 1
	048 Add X31, X31, 48
	049 Return X0
	050 Call 0x1B6FA1C

Method: System.Boolean CheckAndAttach()

Disassembly:
	0x01CA85D0 FMOV S3, 1
	0x01CA85D4 MOV X0, X20
	0x01CA85D8 MOV X1, X31
	0x01CA85DC BL 0x1CCD9CC
	0x01CA85E0 MOV X0, X19
	0x01CA85E4 LDP X20, X19, [X31 + 0x10]
	0x01CA85E8 LDR X30, [X31], #0x20
	0x01CA85EC B 0x1CA85F8
	0x01CA85F0 BL 0x1B6EA1C
	0x01CA85F4 B 0x1CA8404
	0x01CA85F8 STP D9, D8, [X31 - 0x50]!
	0x01CA85FC STR X30, [X31 + 0x10]
	0x01CA8600 STP X24, X23, [X31 + 0x20]
	0x01CA8604 STP X22, X21, [X31 + 0x30]
	0x01CA8608 STP X20, X19, [X31 + 0x40]
	0x01CA860C ADRP X20, 0x257B000
	0x01CA8610 ADRP X21, 0x22A6000
	0x01CA8614 LDRB W8, [X20 + 0x470]
	0x01CA8618 LDR X21, [X21 + 0x6C0]
	0x01CA861C MOV X19, X0
	0x01CA8620 TBNZ X8, 0x0, 0x1CA8674
	0x01CA8624 ADRP X0, 0x22A6000
	0x01CA8628 LDR X0, [X0 + 0x6C8]
	0x01CA862C BL 0x1B6E7F0
	0x01CA8630 ADRP X0, 0x22A6000
	0x01CA8634 LDR X0, [X0 + 0x170]
	0x01CA8638 BL 0x1B6E7F0
	0x01CA863C ADRP X0, 0x22A6000
	0x01CA8640 LDR X0, [X0 + 0x6A0]
	0x01CA8644 BL 0x1B6E7F0
	0x01CA8648 ADRP X0, 0x22A6000
	0x01CA864C LDR X0, [X0 + 0x6D0]
	0x01CA8650 BL 0x1B6E7F0
	0x01CA8654 ADRP X0, 0x22A6000
	0x01CA8658 LDR X0, [X0 + 0x6D8]
	0x01CA865C BL 0x1B6E7F0
	0x01CA8660 ADRP X0, 0x22A6000
	0x01CA8664 LDR X0, [X0 + 0x6C0]
	0x01CA8668 BL 0x1B6E7F0
	0x01CA866C MOVZ W8, 0x1
	0x01CA8670 STRB W8, [X20 + 0x470]
	0x01CA8674 LDR X0, [X21]
	0x01CA8678 BL 0x1B6EA0C
	0x01CA867C MOV X1, X31
	0x01CA8680 MOV X20, X0
	0x01CA8684 BL 0x32276F8
	0x01CA8688 CBZ X20, 0x1CA8814
	0x01CA868C ADRP X22, 0x22A6000
	0x01CA8690 LDR X22, [X22 + 0x6A0]
	0x01CA8694 STR X19, [X20 + 0x10]
	0x01CA8698 LDR W21, [X19 + 0xBC]
	0x01CA869C LDR X0, [X22]
	0x01CA86A0 LDR W8, [X0 + 0xE0]
	0x01CA86A4 CBNZ W8, 0x1CA86AC
	0x01CA86A8 BL 0x1B6E8F8
	0x01CA86AC MOV W0, W21
	0x01CA86B0 MOV X1, X31
	0x01CA86B4 BL 0x301675C
	0x01CA86B8 LDR X0, [X19 + 0x98]
	0x01CA86BC CBZ X0, 0x1CA8814
	0x01CA86C0 MOV X1, X31
	0x01CA86C4 BL 0x3AA78FC
	0x01CA86C8 MOV X0, X31
	0x01CA86CC BL 0x3A92974
	0x01CA86D0 ADRP X8, 0xFFFFFFFFFEE01000
	0x01CA86D4 LDR V3, [X8 + 0xE1C]
	0x01CA86D8 MOV X0, X31
	0x01CA86DC FMUL S0, S0, S3
	0x01CA86E0 FMUL S1, S1, S3
	0x01CA86E4 FMUL S2, S2, S3
	0x01CA86E8 BL 0x3A92EFC
	0x01CA86EC MOVZ W8, 0xC3B40000
	0x01CA86F0 MOVZ W9, 0x43340000
	0x01CA86F4 FMOV S1, W8
	0x01CA86F8 FMOV S2, W9
	0x01CA86FC FADD S1, S0, S1
	0x01CA8700 FCMP S0, S2
	0x01CA8704 MOV X0, X19
	0x01CA8708 FCSEL S8, S1, S0, GT
	0x01CA870C BL 0x1CA7EA8
	0x01CA8710 MOVZ W8, 0xC2B40000
	0x01CA8714 ANDS W31, W0, 0x1
	0x01CA8718 FMOV S0, W31
	0x01CA871C FMOV S1, W8
	0x01CA8720 FCSEL S9, S1, S0, NE
	0x01CA8724 STR S9, [X20 + 0x18]
	0x01CA8728 LDR X0, [X22]
	0x01CA872C LDR W8, [X0 + 0xE0]
	0x01CA8730 CBNZ W8, 0x1CA8738
	0x01CA8734 BL 0x1B6E8F8
	0x01CA8738 ADRP X8, 0xFFFFFFFFFEE01000
	0x01CA873C LDR V2, [X8 + 0xE20]
	0x01CA8740 MOV V0.16B, V8.16B
	0x01CA8744 MOV V1.16B, V9.16B
	0x01CA8748 MOV X0, X31
	0x01CA874C BL 0x301B3D8
	0x01CA8750 CBZ X0, 0x1CA8814
	0x01CA8754 ADRP X21, 0x22A6000
	0x01CA8758 ADRP X22, 0x22A6000
	0x01CA875C LDR X21, [X21 + 0x6C8]
	0x01CA8760 LDR X22, [X22 + 0x6D0]
	0x01CA8764 MOV X1, X31
	0x01CA8768 BL 0x302ED48
	0x01CA876C LDR X8, [X21]
	0x01CA8770 MOV X21, X0
	0x01CA8774 MOV X0, X8
	0x01CA8778 BL 0x1B6EA0C
	0x01CA877C LDR X2, [X22]
	0x01CA8780 MOV X1, X20
	0x01CA8784 MOV X3, X31
	0x01CA8788 MOV X22, X0
	0x01CA878C BL 0x27EE464
	0x01CA8790 CBZ X21, 0x1CA8814
	0x01CA8794 ADRP X23, 0x22A6000
	0x01CA8798 ADRP X24, 0x22A6000
	0x01CA879C LDR X23, [X23 + 0x170]
	0x01CA87A0 LDR X24, [X24 + 0x6D8]
	0x01CA87A4 MOV X0, X21
	0x01CA87A8 MOV X1, X22
	0x01CA87AC MOV X2, X31
	0x01CA87B0 BL 0x303115C
	0x01CA87B4 LDR X8, [X23]
	0x01CA87B8 MOV X21, X0
	0x01CA87BC MOV X0, X8
	0x01CA87C0 BL 0x1B6EA0C
	0x01CA87C4 LDR X2, [X24]
	0x01CA87C8 MOV X1, X20
	0x01CA87CC MOV X3, X31
	0x01CA87D0 MOV X22, X0
	0x01CA87D4 BL 0x317DB24
	0x01CA87D8 CBZ X21, 0x1CA8814
	0x01CA87DC MOV X0, X21
	0x01CA87E0 MOV X1, X22
	0x01CA87E4 MOV X2, X31
	0x01CA87E8 BL 0x30310C4
	0x01CA87EC CBZ X0, 0x1CA8814
	0x01CA87F0 MOV X1, X31
	0x01CA87F4 BL 0x3028CC0
	0x01CA87F8 STR W0, [X19 + 0xBC]
	0x01CA87FC LDP X20, X19, [X31 + 0x40]
	0x01CA8800 LDP X22, X21, [X31 + 0x30]
	0x01CA8804 LDP X24, X23, [X31 + 0x20]
	0x01CA8808 LDR X30, [X31 + 0x10]
	0x01CA880C LDP D9, D8, [X31], #0x50
	0x01CA8810 RET
	0x01CA8814 BL 0x1B6EA1C
	0x01CA8818 STP X30, X21, [X31 - 0x20]!
	0x01CA881C STP X20, X19, [X31 + 0x10]
	0x01CA8820 ADRP X20, 0x257B000
	0x01CA8824 LDRB W8, [X20 + 0x46F]
	0x01CA8828 MOV X19, X0
	0x01CA882C TBNZ X8, 0x0, 0x1CA8850
	0x01CA8830 ADRP X0, 0x22A5000
	0x01CA8834 LDR X0, [X0 + 0x478]
	0x01CA8838 BL 0x1B6E7F0
	0x01CA883C ADRP X0, 0x22A6000
	0x01CA8840 LDR X0, [X0 + 0x198]
	0x01CA8844 BL 0x1B6E7F0
	0x01CA8848 MOVZ W8, 0x1
	0x01CA884C STRB W8, [X20 + 0x46F]
	0x01CA8850 LDR X8, [X19 + 0x80]
	0x01CA8854 CBZ X8, 0x1CA8944
	0x01CA8858 ADRP X9, 0x22A5000
	0x01CA885C LDR X9, [X9 + 0x478]
	0x01CA8860 LDR X20, [X8 + 0x120]
	0x01CA8864 LDR X0, [X9]
	0x01CA8868 LDR W9, [X0 + 0xE0]
	0x01CA886C CBNZ W9, 0x1CA8874
	0x01CA8870 BL 0x1B6E8F8
	0x01CA8874 MOV X0, X20
	0x01CA8878 MOV X1, X31
	0x01CA887C MOV X2, X31
	0x01CA8880 BL 0x3A9D6EC
	0x01CA8884 TBZ X0, 0x0, 0x1CA8938
	0x01CA8888 LDR X8, [X19 + 0x80]
	0x01CA888C CBZ X8, 0x1CA8944
	0x01CA8890 LDR X8, [X8 + 0x120]
	0x01CA8894 CBZ X8, 0x1CA8944
	0x01CA8898 LDR W9, [X8 + 0x80]
	0x01CA889C CMP W9, 0x2
	0x01CA88A0 B.NE 0x1CA8938
	0x01CA88A4 LDR X0, [X8 + 0x40]
	0x01CA88A8 CBZ X0, 0x1CA8938
	0x01CA88AC LDRB W8, [X0 + 0x60]
	0x01CA88B0 TBNZ X8, 0x1, 0x1CA8938
	0x01CA88B4 MOV X1, X31
	0x01CA88B8 BL 0x1D9E6A0
	0x01CA88BC TBZ X0, 0x0, 0x1CA8938
	0x01CA88C0 ADRP X20, 0x22A6000
	0x01CA88C4 LDR X20, [X20 + 0x198]
	0x01CA88C8 LDR X0, [X20]
	0x01CA88CC LDR W8, [X0 + 0xE0]
	0x01CA88D0 CBNZ W8, 0x1CA88D8
	0x01CA88D4 BL 0x1B6E8F8
	0x01CA88D8 ADRP X21, 0x257B000
	0x01CA88DC LDRB W8, [X21 + 0x44F]
	0x01CA88E0 CBNZ W8, 0x1CA88F8
	0x01CA88E4 ADRP X0, 0x22A6000
	0x01CA88E8 LDR X0, [X0 + 0x198]
	0x01CA88EC BL 0x1B6E7F0
	0x01CA88F0 MOVZ W8, 0x1
	0x01CA88F4 STRB W8, [X21 + 0x44F]
	0x01CA88F8 LDR X0, [X20]
	0x01CA88FC LDR W8, [X0 + 0xE0]
	0x01CA8900 CBNZ W8, 0x1CA890C
	0x01CA8904 BL 0x1B6E8F8
	0x01CA8908 LDR X0, [X20]
	0x01CA890C LDR X8, [X0 + 0xB8]
	0x01CA8910 MOV X0, X19
	0x01CA8914 LDR X20, [X8]
	0x01CA8918 BL 0x1CA82D8
	0x01CA891C CBZ X20, 0x1CA8944
	0x01CA8920 MOV X0, X20
	0x01CA8924 LDP X20, X19, [X31 + 0x10]
	0x01CA8928 MOVZ W1, 0x1
	0x01CA892C MOV X2, X31
	0x01CA8930 LDP X30, X21, [X31], #0x20
	0x01CA8934 B 0x1CC2D28
	0x01CA8938 LDP X20, X19, [X31 + 0x10]
	0x01CA893C LDP X30, X21, [X31], #0x20
	0x01CA8940 RET
	0x01CA8944 BL 0x1B6EA1C
	0x01CA8948 MOV X1, X31
	0x01CA894C B 0x32276F8
	0x01CA8950 STP X30, X19, [X31 - 0x10]!
	0x01CA8954 MOV X1, X31
	0x01CA8958 MOV X19, X0
	0x01CA895C BL 0x1D65284
	0x01CA8960 MOV X0, X19
	0x01CA8964 BL 0x1CA85AC
	0x01CA8968 LDR X0, [X19 + 0x40]
	0x01CA896C CBZ X0, 0x1CA89A4
	0x01CA8970 LDRB W8, [X0 + 0x60]
	0x01CA8974 TBNZ X8, 0x1, 0x1CA89A4
	0x01CA8978 MOV X1, X31
	0x01CA897C BL 0x1D9E780
	0x01CA8980 TBZ X0, 0x0, 0x1CA89A4
	0x01CA8984 LDR X8, [X19 + 0x80]
	0x01CA8988 CBZ X8, 0x1CA89AC
	0x01CA898C LDR X0, [X8 + 0x130]
	0x01CA8990 CBZ X0, 0x1CA89AC
	0x01CA8994 FMOV S0, 5
	0x01CA8998 MOV X1, X31
	0x01CA899C LDP X30, X19, [X31], #0x10
	0x01CA89A0 B 0x3AF6828
	0x01CA89A4 LDP X30, X19, [X31], #0x10
	0x01CA89A8 RET
	0x01CA89AC BL 0x1B6EA1C
	0x01CA89B0 STR X30, [X31 - 0x20]!
	0x01CA89B4 STP X20, X19, [X31 + 0x10]
	0x01CA89B8 AND W2, W2, 0x1
	0x01CA89BC MOV X3, X31
	0x01CA89C0 MOV X20, X1
	0x01CA89C4 MOV X19, X0
	0x01CA89C8 BL 0x1D65288
	0x01CA89CC CBZ X20, 0x1CA89FC
	0x01CA89D0 MOV X0, X20

ISIL:
	001 Move [X31-112], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x257C000
	015 Move W8, [X20+1128]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {41}
	021 Move X0, 0x22A7000
	022 Move X0, [X0+440]
	023 Call 0x1B6F7F0
	024 Move X0, 0x22A7000
	025 Move X0, [X0+1576]
	026 Call 0x1B6F7F0
	027 Move X0, 0x22A7000
	028 Move X0, [X0+984]
	029 Call 0x1B6F7F0
	030 Move X0, 0x22A6000
	031 Move X0, [X0+1144]
	032 Call 0x1B6F7F0
	033 Move X0, 0x22A6000
	034 Move X0, [X0+1216]
	035 Call 0x1B6F7F0
	036 Move X0, 0x22A7000
	037 Move X0, [X0+408]
	038 Call 0x1B6F7F0
	039 Move W8, 1
	040 Move [X20+1128], W8
	041 Move [X31+8], X31
	042 Move X0, [X19+64]
	043 Compare X0, 0
	044 JumpIfEqual {303}
	045 Move W8, [X0+96]
	046 Move TEMP, X8
	047 And TEMP, TEMP, 2
	048 Compare TEMP, 2
	049 JumpIfEqual {303}
	050 Move X1, X31
	051 Call NetworkObject.get_HasInputAuthority, X0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {303}
	056 Move X8, [X19+136]
	057 Compare X8, 0
	058 JumpIfEqual {320}
	059 Move X24, 0x22A6000
	060 Move X24, [X24+1144]
	061 Move X20, [X8+192]
	062 Move X0, [X24]
	063 Move W9, [X0+224]
	064 Compare W9, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1B6F8F8
	067 Move X0, X20
	068 Move X1, X31
	069 Move X2, X31
	070 Call Object.op_Inequality, X0, X1
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {303}
	075 Move X8, [X19+136]
	076 Compare X8, 0
	077 JumpIfEqual {320}
	078 Move X8, [X8+192]
	079 Compare X8, 0
	080 JumpIfEqual {320}
	081 Move W9, [X8+140]
	082 Compare W9, 0
	083 JumpIfEqual {171}
	084 Move X0, X19
	085 Move X1, X31
	086 Call Component.get_transform, X0
	087 Compare X0, 0
	088 JumpIfEqual {320}
	089 Move X1, X31
	090 Call Transform.get_position, X0
	091 Move X20, 0x22A7000
	092 Move X20, [X20+408]
	093 Move X0, [X20]
	094 Move W8, [X0+224]
	095 Compare W8, 0
	096 JumpIfNotEqual {98}
	097 Call 0x1B6F8F8
	098 Move X21, 0x257C000
	099 Move W8, [X21+1103]
	100 Compare W8, 0
	101 JumpIfNotEqual {107}
	102 Move X0, 0x22A7000
	103 Move X0, [X0+408]
	104 Call 0x1B6F7F0
	105 Move W8, 1
	106 Move [X21+1103], W8
	107 Move X0, [X20]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {113}
	111 Call 0x1B6F8F8
	112 Move X0, [X20]
	113 Move X8, [X0+184]
	114 Move X0, [X8]
	115 Compare X0, 0
	116 JumpIfEqual {320}
	117 Move X1, X31
	118 Call PlayerController.get_backAttachAnchor, X0
	119 Compare X0, 0
	120 JumpIfEqual {320}
	121 Move X1, X31
	122 Call Transform.get_position, X0
	123 Move X0, X19
	124 Call HandInteractor.IsByBackAttachment, X0
	125 Move TEMP, X0
	126 And TEMP, TEMP, 1
	127 Compare TEMP, 1
	128 JumpIfNotEqual {303}
	129 Move X8, [X19+144]
	130 Compare X8, 0
	131 JumpIfEqual {320}
	132 Move X0, [X8+280]
	133 Compare X0, 0
	134 JumpIfEqual {320}
	135 Move X1, X31
	136 Call AttachedItemAnchor.get_grabbedItem, X0
	137 Move [X31+8], X0
	138 Add X0, X31, 8
	139 Move X1, X31
	140 Call NetworkBehaviourId.get_IsValid, X0
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfEqual {303}
	145 Move X0, [X19+136]
	146 Compare X0, 0
	147 JumpIfEqual {320}
	148 Move X1, X31
	149 Call AttachedItemAnchor.get_grabbedItem, X0
	150 Move X8, [X19+136]
	151 Compare X8, 0
	152 JumpIfEqual {320}
	153 Move X20, X0
	154 Move X0, X8
	155 Move X1, X31
	156 Call AttachedItemAnchor.UnattachItem, X0
	157 Move X8, [X19+144]
	158 Compare X8, 0
	159 JumpIfEqual {320}
	160 Move X0, [X8+280]
	161 Compare X0, 0
	162 JumpIfEqual {320}
	163 Move W2, 1
	164 Move X1, X20
	165 Move W3, W31
	166 Move X4, X31
	167 Move X5, X31
	168 Move X6, X31
	169 Move W21, 1
	170 Call AttachedItemAnchor.RPC_TryGrabItem, X0, X1, X2, X3, X4
	171 Move W8, [X8+142]
	172 Compare W8, 0
	173 JumpIfEqual {303}
	174 Move X0, X19
	175 Move X1, X31
	176 Call Component.get_transform, X0
	177 Compare X0, 0
	178 JumpIfEqual {320}
	179 Move X1, X31
	180 Call Transform.get_position, X0
	181 Move X20, 0x22A7000
	182 Move X20, [X20+984]
	183 Move V8, V0
	184 Move V9, V1
	185 Move V10, V2
	186 Move X0, [X20]
	187 Move W8, [X0+224]
	188 Compare W8, 0
	189 JumpIfNotEqual {192}
	190 Call 0x1B6F8F8
	191 Move X0, [X20]
	192 Move X8, [X0+184]
	193 Move X1, X31
	194 Move W0, [X8+12]
	195 Call LayerMask.op_Implicit, X0
	196 Move X8, [X20]
	197 Move W20, W0
	198 Move X1, X31
	199 Move X8, [X8+184]
	200 Move W8, [X8+16]
	201 Move X0, X8
	202 Call LayerMask.op_Implicit, X0
	203 Move X8, 0x22A6000
	204 Move X8, [X8+1216]
	205 Move W21, W0
	206 Move X8, [X8]
	207 Move W9, [X8+224]
	208 Compare W9, 0
	209 JumpIfNotEqual {212}
	210 Move X0, X8
	211 Call 0x1B6F8F8
	212 Move X8, -18866176
	213 Move V3, [X8+3376]
	214 Or W0, W21, W20
	215 Move W1, 2
	216 Move V0, V8
	217 Move V1, V9
	218 Move V2, V10
	219 Move X2, X31
	220 Call Physics.OverlapSphere, X0, V0, X1, X2
	221 Compare X0, 0
	222 JumpIfEqual {320}
	223 Move W8, [X0+24]
	224 Move X20, X0
	225 NotImplemented "Instruction CMP not yet implemented."
	226 Move X26, 0x22A7000
	227 Move X27, 0x22A7000
	228 Move X26, [X26+1576]
	229 Move X27, [X27+440]
	230 Move W25, W31
	231 NotImplemented "Instruction CMP not yet implemented."
	232 Add X8, X20, W25
	233 Move X0, [X8+32]
	234 Compare X0, 0
	235 JumpIfEqual {320}
	236 Move X1, [X26]
	237 Call 0x2090DE8, X0
	238 Move X8, [X24]
	239 Move X21, X0
	240 Move W9, [X8+224]
	241 Compare W9, 0
	242 JumpIfNotEqual {245}
	243 Move X0, X8
	244 Call 0x1B6F8F8
	245 Move X0, X21
	246 Move X1, X31
	247 Move X2, X31
	248 Call Object.op_Inequality, X0, X1
	249 Move TEMP, X0
	250 And TEMP, TEMP, 1
	251 Compare TEMP, 1
	252 JumpIfNotEqual {299}
	253 Move X0, [X24]
	254 Move X22, [X19+136]
	255 Move W8, [X0+224]
	256 Compare W8, 0
	257 JumpIfNotEqual {259}
	258 Call 0x1B6F8F8
	259 Move X0, X21
	260 Move X1, X22
	261 Move X2, X31
	262 Call Object.op_Inequality, X0, X1
	263 Move TEMP, X0
	264 And TEMP, TEMP, 1
	265 Compare TEMP, 1
	266 JumpIfNotEqual {299}
	267 Compare X21, 0
	268 JumpIfEqual {320}
	269 Move W8, [X21+128]
	270 NotImplemented "Instruction CMP not yet implemented."
	271 Move X1, [X27]
	272 Move X0, X21
	273 Call 0x20914A4, X0
	274 Move X8, [X19+136]
	275 Compare X8, 0
	276 JumpIfEqual {320}
	277 Move X22, X0
	278 Move X0, [X24]
	279 Move X23, [X8+192]
	280 Move W9, [X0+224]
	281 Compare W9, 0
	282 JumpIfNotEqual {284}
	283 Call 0x1B6F8F8
	284 Move X0, X22
	285 Move X1, X23
	286 Move X2, X31
	287 Call Object.op_Equality, X0, X1
	288 Move TEMP, X0
	289 And TEMP, TEMP, 1
	290 Compare TEMP, 1
	291 JumpIfEqual {299}
	292 Move X0, X19
	293 Move X1, X21
	294 Call HandInteractor.ReattachToAnchorIfFree, X0, X1
	295 Move TEMP, X0
	296 And TEMP, TEMP, 1
	297 Compare TEMP, 1
	298 JumpIfEqual {319}
	299 Move W8, [X20+24]
	300 Add W25, W25, 1
	301 Move W21, W31
	302 NotImplemented "Instruction CMP not yet implemented."
	303 Move W21, W31
	304 Move W0, W21
	305 Move X20, [X31+96]
	306 Move X19, [X31+104]
	307 Move X22, [X31+80]
	308 Move X21, [X31+88]
	309 Move X24, [X31+64]
	310 Move X23, [X31+72]
	311 Move X26, [X31+48]
	312 Move X25, [X31+56]
	313 Move X30, [X31+32]
	314 Move X27, [X31+40]
	315 Move D9, [X31+16]
	316 Move D8, [X31+24]
	317 Move V10, [X31+112]
	318 Return X0
	319 Move W21, 1
	320 Call 0x1B6FA1C
	321 Call 0x1B6FA24

Method: System.Void HandleGrabButtonPressed()

Disassembly:
	0x01CA8398 LDR X8, [X23]
	0x01CA839C MOV X21, X0
	0x01CA83A0 LDR W9, [X8 + 0xE0]
	0x01CA83A4 CBNZ W9, 0x1CA83B0
	0x01CA83A8 MOV X0, X8
	0x01CA83AC BL 0x1B6E8F8
	0x01CA83B0 CBZ W21, 0x1CA83E4
	0x01CA83B4 ADD X8, X31, 0x8
	0x01CA83B8 MOV X0, X19
	0x01CA83BC ADD W20, W20, 0x1
	0x01CA83C0 BL 0x1CA7F74
	0x01CA83C4 LDUR V0, [X31 + 0x8]
	0x01CA83C8 LDR X9, [X31 + 0x18]
	0x01CA83CC STR V0, [X31 + 0x4]
	0x01CA83D0 LDR W8, [X31 + 0x48]
	0x01CA83D4 STR V0, [X31 + 0x2]
	0x01CA83D8 STR X9, [X31 + 0x50]
	0x01CA83DC CMP W20, W8
	0x01CA83E0 B.LT 0x1CA836C
	0x01CA83E4 SCVTF S0, W20
	0x01CA83E8 LDP X20, X19, [X31 + 0x80]
	0x01CA83EC LDP X22, X21, [X31 + 0x70]
	0x01CA83F0 LDP X30, X23, [X31 + 0x60]
	0x01CA83F4 FMOV S1, 10
	0x01CA83F8 FDIV S0, S0, S1
	0x01CA83FC ADD X31, X31, 0x90
	0x01CA8400 RET
	0x01CA8404 STR X30, [X31 - 0x20]!
	0x01CA8408 STP X20, X19, [X31 + 0x10]
	0x01CA840C ADRP X20, 0x257B000
	0x01CA8410 LDRB W8, [X20 + 0x46E]
	0x01CA8414 MOV X19, X0
	0x01CA8418 TBNZ X8, 0x0, 0x1CA843C
	0x01CA841C ADRP X0, 0x22A6000
	0x01CA8420 LDR X0, [X0 + 0x1C0]
	0x01CA8424 BL 0x1B6E7F0

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+136]
	006 Compare X0, 0
	007 JumpIfEqual {46}
	008 Move X1, X31
	009 Call AttachedItemAnchor.get_grabbedItem, X0
	010 Move [X31+8], X0
	011 Add X0, X31, 8
	012 Move X1, X31
	013 Call NetworkBehaviourId.get_IsValid, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {40}
	018 Move X0, X19
	019 Call HandInteractor.CheckAndAttach, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {42}
	024 Move X8, -18866176
	025 Move X9, -18866176
	026 Move W0, [X19+128]
	027 Move V0, [X8+3616]
	028 Move V1, [X9+3236]
	029 Move X1, X31
	030 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	031 Move X0, [X19+136]
	032 Compare X0, 0
	033 JumpIfEqual {46}
	034 Move S0, [X0+168]
	035 Move S1, [X0+172]
	036 Move V2, [X0+176]
	037 Move W1, W31
	038 Move X2, X31
	039 Call AttachedItemAnchor.DropWithThrowVelocity, X0, X1, X2
	040 Move X0, X19
	041 Call HandInteractor.CheckAndTryGrab, X0
	042 Move X30, [X31+16]
	043 Move X19, [X31+24]
	044 Add X31, X31, 32
	045 Return 
	046 Call 0x1B6FA1C

Method: System.Void CheckAndTryGrab()

Disassembly:
	0x01CA89D4 MOV X1, X31
	0x01CA89D8 BL 0x1D872E8
	0x01CA89DC TBZ X0, 0x0, 0x1CA89EC
	0x01CA89E0 LDP X20, X19, [X31 + 0x10]
	0x01CA89E4 LDR X30, [X31], #0x20
	0x01CA89E8 RET
	0x01CA89EC MOV X0, X19
	0x01CA89F0 LDP X20, X19, [X31 + 0x10]
	0x01CA89F4 LDR X30, [X31], #0x20
	0x01CA89F8 B 0x1CA8A00
	0x01CA89FC BL 0x1B6EA1C
	0x01CA8A00 SUB X31, X31, 0xB0
	0x01CA8A04 STR X30, [X31 + 0x60]
	0x01CA8A08 STP X26, X25, [X31 + 0x70]
	0x01CA8A0C STP X24, X23, [X31 + 0x80]
	0x01CA8A10 STP X22, X21, [X31 + 0x90]
	0x01CA8A14 STP X20, X19, [X31 + 0xA0]
	0x01CA8A18 ADRP X20, 0x257B000
	0x01CA8A1C LDRB W8, [X20 + 0x474]
	0x01CA8A20 MOV X19, X0
	0x01CA8A24 TBNZ X8, 0x0, 0x1CA8A78
	0x01CA8A28 ADRP X0, 0x22A6000
	0x01CA8A2C LDR X0, [X0 + 0x268]
	0x01CA8A30 BL 0x1B6E7F0
	0x01CA8A34 ADRP X0, 0x22A6000
	0x01CA8A38 LDR X0, [X0 + 0x6E0]
	0x01CA8A3C BL 0x1B6E7F0
	0x01CA8A40 ADRP X0, 0x22A6000
	0x01CA8A44 LDR X0, [X0 + 0x6A8]
	0x01CA8A48 BL 0x1B6E7F0
	0x01CA8A4C ADRP X0, 0x22A6000
	0x01CA8A50 LDR X0, [X0 + 0x6B0]
	0x01CA8A54 BL 0x1B6E7F0
	0x01CA8A58 ADRP X0, 0x22A6000
	0x01CA8A5C LDR X0, [X0 + 0x1E8]
	0x01CA8A60 BL 0x1B6E7F0
	0x01CA8A64 ADRP X0, 0x22A5000
	0x01CA8A68 LDR X0, [X0 + 0x478]
	0x01CA8A6C BL 0x1B6E7F0
	0x01CA8A70 MOVZ W8, 0x1
	0x01CA8A74 STRB W8, [X20 + 0x474]
	0x01CA8A78 ADD X8, X31, 0x8
	0x01CA8A7C MOV X0, X19
	0x01CA8A80 STP X31, X31, [X31 + 0x40]
	0x01CA8A84 STR X31, [X31 + 0x50]
	0x01CA8A88 BL 0x1CA7F74
	0x01CA8A8C LDUR V0, [X31 + 0x8]
	0x01CA8A90 LDR X9, [X31 + 0x18]
	0x01CA8A94 STR V0, [X31 + 0x4]
	0x01CA8A98 LDR W8, [X31 + 0x48]
	0x01CA8A9C STR V0, [X31 + 0x2]
	0x01CA8AA0 STR X9, [X31 + 0x50]
	0x01CA8AA4 CMP W8, 0x1
	0x01CA8AA8 B.LT 0x1CA8C14
	0x01CA8AAC ADRP X22, 0x22A6000
	0x01CA8AB0 ADRP X23, 0x22A6000
	0x01CA8AB4 ADRP X24, 0x22A6000
	0x01CA8AB8 ADRP X25, 0x22A5000
	0x01CA8ABC ADRP X26, 0x22A6000
	0x01CA8AC0 LDR X22, [X22 + 0x6A8]
	0x01CA8AC4 LDR X23, [X23 + 0x1E8]
	0x01CA8AC8 LDR X24, [X24 + 0x6E0]
	0x01CA8ACC LDR X25, [X25 + 0x478]
	0x01CA8AD0 LDR X26, [X26 + 0x268]
	0x01CA8AD4 MOV W20, W31
	0x01CA8AD8 ADD X8, X31, 0x20
	0x01CA8ADC MOV X0, X19
	0x01CA8AE0 BL 0x1CA7F74
	0x01CA8AE4 LDR V0, [X31 + 0x2]
	0x01CA8AE8 LDR X8, [X31 + 0x30]
	0x01CA8AEC LDR X2, [X22]
	0x01CA8AF0 ADD X0, X31, 0x40
	0x01CA8AF4 MOV W1, W20
	0x01CA8AF8 STR V0, [X31 + 0x4]
	0x01CA8AFC STR X8, [X31 + 0x50]
	0x01CA8B00 BL 0x22AE1F0
	0x01CA8B04 LDR X8, [X23]
	0x01CA8B08 MOV X21, X0
	0x01CA8B0C LDR W9, [X8 + 0xE0]
	0x01CA8B10 CBZ W9, 0x1CA8B1C
	0x01CA8B14 CBNZ W21, 0x1CA8B28
	0x01CA8B18 B 0x1CA8BE4
	0x01CA8B1C MOV X0, X8
	0x01CA8B20 BL 0x1B6E8F8
	0x01CA8B24 CBZ W21, 0x1CA8BE4
	0x01CA8B28 ADD X8, X31, 0x20
	0x01CA8B2C MOV X0, X19
	0x01CA8B30 BL 0x1CA7F74
	0x01CA8B34 LDR V0, [X31 + 0x2]
	0x01CA8B38 LDR X8, [X31 + 0x30]
	0x01CA8B3C LDR X2, [X24]
	0x01CA8B40 ADD X0, X31, 0x40
	0x01CA8B44 MOV W1, W20
	0x01CA8B48 STR V0, [X31 + 0x4]
	0x01CA8B4C STR X8, [X31 + 0x50]
	0x01CA8B50 BL 0x22AE564
	0x01CA8B54 LDR X8, [X19 + 0x38]
	0x01CA8B58 CBZ X8, 0x1CA8C30
	0x01CA8B5C AND X1, X0, 0x0
	0x01CA8B60 MOV X0, X8
	0x01CA8B64 MOV X2, X31
	0x01CA8B68 BL 0x1D8BE9C
	0x01CA8B6C LDR X8, [X25]
	0x01CA8B70 MOV X21, X0
	0x01CA8B74 LDR W9, [X8 + 0xE0]
	0x01CA8B78 CBNZ W9, 0x1CA8B84
	0x01CA8B7C MOV X0, X8
	0x01CA8B80 BL 0x1B6E8F8
	0x01CA8B84 MOV X0, X21
	0x01CA8B88 MOV X1, X31
	0x01CA8B8C MOV X2, X31
	0x01CA8B90 BL 0x3A9D6EC
	0x01CA8B94 TBZ X0, 0x0, 0x1CA8BE4
	0x01CA8B98 CBZ X21, 0x1CA8C30
	0x01CA8B9C LDR X1, [X26]
	0x01CA8BA0 MOV X0, X21
	0x01CA8BA4 BL 0x208FDE8
	0x01CA8BA8 LDR X8, [X25]
	0x01CA8BAC MOV X21, X0
	0x01CA8BB0 LDR W9, [X8 + 0xE0]
	0x01CA8BB4 CBNZ W9, 0x1CA8BC0
	0x01CA8BB8 MOV X0, X8
	0x01CA8BBC BL 0x1B6E8F8
	0x01CA8BC0 MOV X0, X21
	0x01CA8BC4 MOV X1, X31
	0x01CA8BC8 MOV X2, X31
	0x01CA8BCC BL 0x3A9D6EC
	0x01CA8BD0 TBZ X0, 0x0, 0x1CA8BE4
	0x01CA8BD4 CBZ X21, 0x1CA8C30
	0x01CA8BD8 MOV X0, X21
	0x01CA8BDC MOV X1, X31
	0x01CA8BE0 BL 0x1CA32A4
	0x01CA8BE4 ADD X8, X31, 0x8
	0x01CA8BE8 MOV X0, X19
	0x01CA8BEC ADD W20, W20, 0x1
	0x01CA8BF0 BL 0x1CA7F74
	0x01CA8BF4 LDUR V0, [X31 + 0x8]
	0x01CA8BF8 LDR X9, [X31 + 0x18]
	0x01CA8BFC STR V0, [X31 + 0x4]
	0x01CA8C00 LDR W8, [X31 + 0x48]
	0x01CA8C04 STR V0, [X31 + 0x2]
	0x01CA8C08 STR X9, [X31 + 0x50]
	0x01CA8C0C CMP W20, W8
	0x01CA8C10 B.LT 0x1CA8AD8
	0x01CA8C14 LDP X20, X19, [X31 + 0xA0]
	0x01CA8C18 LDP X22, X21, [X31 + 0x90]
	0x01CA8C1C LDP X24, X23, [X31 + 0x80]
	0x01CA8C20 LDP X26, X25, [X31 + 0x70]
	0x01CA8C24 LDR X30, [X31 + 0x60]
	0x01CA8C28 ADD X31, X31, 0xB0
	0x01CA8C2C RET
	0x01CA8C30 BL 0x1B6EA1C
	0x01CA8C34 SUB X31, X31, 0x70
	0x01CA8C38 STR D10, [X31 + 0x40]
	0x01CA8C3C STP D9, D8, [X31 + 0x48]
	0x01CA8C40 STR X30, [X31 + 0x58]
	0x01CA8C44 STP X20, X19, [X31 + 0x60]
	0x01CA8C48 ADRP X20, 0x257B000
	0x01CA8C4C LDRB W8, [X20 + 0x471]
	0x01CA8C50 MOV X19, X0
	0x01CA8C54 TBNZ X8, 0x0, 0x1CA8C78
	0x01CA8C58 ADRP X0, 0x22A6000
	0x01CA8C5C LDR X0, [X0 + 0x6A8]
	0x01CA8C60 BL 0x1B6E7F0
	0x01CA8C64 ADRP X0, 0x22A6000
	0x01CA8C68 LDR X0, [X0 + 0x1E8]
	0x01CA8C6C BL 0x1B6E7F0
	0x01CA8C70 MOVZ W8, 0x1
	0x01CA8C74 STRB W8, [X20 + 0x471]
	0x01CA8C78 MOV X0, X19
	0x01CA8C7C MOV X1, X31
	0x01CA8C80 STP X31, X31, [X31 + 0x20]
	0x01CA8C84 STR X31, [X31 + 0x30]
	0x01CA8C88 STR W31, [X31 + 0x18]
	0x01CA8C8C BL 0x1D65000
	0x01CA8C90 LDR X0, [X19 + 0x40]
	0x01CA8C94 CBZ X0, 0x1CA8E14
	0x01CA8C98 LDRB W8, [X0 + 0x60]
	0x01CA8C9C TBNZ X8, 0x1, 0x1CA8E14
	0x01CA8CA0 MOV X1, X31
	0x01CA8CA4 BL 0x1D9E780
	0x01CA8CA8 TBZ X0, 0x0, 0x1CA8E14
	0x01CA8CAC MOV X0, X19
	0x01CA8CB0 BL 0x1CA7EA8
	0x01CA8CB4 TBZ X0, 0x0, 0x1CA8E14
	0x01CA8CB8 LDR X0, [X19 + 0x90]
	0x01CA8CBC CBZ X0, 0x1CA8E2C
	0x01CA8CC0 MOV X1, X31
	0x01CA8CC4 BL 0x3AA7A54
	0x01CA8CC8 ADRP X20, 0x257B000
	0x01CA8CCC LDRB W8, [X20 + 0x442]
	0x01CA8CD0 MOV V8.16B, V0.16B
	0x01CA8CD4 MOV V9.16B, V1.16B
	0x01CA8CD8 MOV V10.16B, V2.16B
	0x01CA8CDC CBNZ W8, 0x1CA8CF4
	0x01CA8CE0 ADRP X0, 0x22A5000
	0x01CA8CE4 LDR X0, [X0 + 0x480]
	0x01CA8CE8 BL 0x1B6E7F0
	0x01CA8CEC MOVZ W8, 0x1
	0x01CA8CF0 STRB W8, [X20 + 0x442]
	0x01CA8CF4 ADRP X8, 0x22A5000
	0x01CA8CF8 LDR X8, [X8 + 0x480]
	0x01CA8CFC ADRP X9, 0xFFFFFFFFFEE01000
	0x01CA8D00 LDR V2, [X9 + 0xAB0]

ISIL:
	001 Move [X31-96], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x257C000
	013 Move W8, [X20+1129]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {39}
	019 Move X0, 0x22A7000
	020 Move X0, [X0+1592]
	021 Call 0x1B6F7F0
	022 Move X0, 0x22A7000
	023 Move X0, [X0+1600]
	024 Call 0x1B6F7F0
	025 Move X0, 0x22A7000
	026 Move X0, [X0+616]
	027 Call 0x1B6F7F0
	028 Move X0, 0x22A7000
	029 Move X0, [X0+1608]
	030 Call 0x1B6F7F0
	031 Move X0, 0x22A6000
	032 Move X0, [X0+1144]
	033 Call 0x1B6F7F0
	034 Move X0, 0x22A6000
	035 Move X0, [X0+1216]
	036 Call 0x1B6F7F0
	037 Move W8, 1
	038 Move [X20+1129], W8
	039 Move X0, X19
	040 Move [X31+8], X31
	041 Call HandInteractor.IsByBackAttachment, X0
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {92}
	046 Move X8, [X19+144]
	047 Compare X8, 0
	048 JumpIfEqual {240}
	049 Move X0, [X8+280]
	050 Compare X0, 0
	051 JumpIfEqual {240}
	052 Move X1, X31
	053 Call AttachedItemAnchor.get_grabbedItem, X0
	054 Move [X31+8], X0
	055 Add X0, X31, 8
	056 Move X1, X31
	057 Call NetworkBehaviourId.get_IsValid, X0
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {92}
	062 Move X8, [X19+144]
	063 Compare X8, 0
	064 JumpIfEqual {240}
	065 Move X0, [X8+280]
	066 Compare X0, 0
	067 JumpIfEqual {240}
	068 Move X1, X31
	069 Call AttachedItemAnchor.get_grabbedItem, X0
	070 Move X8, [X19+144]
	071 Compare X8, 0
	072 JumpIfEqual {240}
	073 Move X20, X0
	074 Move X0, [X8+280]
	075 Compare X0, 0
	076 JumpIfEqual {240}
	077 Move X1, X31
	078 Call AttachedItemAnchor.UnattachItem, X0
	079 Move X8, -18866176
	080 Move X9, -18866176
	081 Move W0, [X19+128]
	082 Move V0, [X8+3616]
	083 Move V1, [X9+3236]
	084 Move X1, X31
	085 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	086 Move X0, [X19+136]
	087 Compare X0, 0
	088 JumpIfEqual {240}
	089 Move W2, 1
	090 Move W3, 1
	091 Move X1, X20
	092 Move X0, X19
	093 Move X1, X31
	094 Call Component.get_transform, X0
	095 Compare X0, 0
	096 JumpIfEqual {240}
	097 Move X20, 0x22A6000
	098 Move X23, 0x22A7000
	099 Move X21, 0x22A7000
	100 Move X22, 0x22A7000
	101 Move X20, [X20+1216]
	102 Move X23, [X23+1600]
	103 Move X21, [X21+1608]
	104 Move X22, [X22+1592]
	105 Move X1, X31
	106 Call Transform.get_position, X0
	107 Move W0, [X19+132]
	108 Move X1, X31
	109 Move V8, V0
	110 Move V9, V1
	111 Move V10, V2
	112 Call LayerMask.op_Implicit, X0
	113 Move X8, [X20]
	114 Move W20, W0
	115 Move W9, [X8+224]
	116 Compare W9, 0
	117 JumpIfNotEqual {120}
	118 Move X0, X8
	119 Call 0x1B6F8F8
	120 Move S3, 0.5
	121 Move W1, 1
	122 Move V0, V8
	123 Move V1, V9
	124 Move V2, V10
	125 Move W0, W20
	126 Move X2, X31
	127 Call Physics.OverlapSphere, X0, V0, X1, X2
	128 Move X8, [X23]
	129 Move X20, X0
	130 Move X0, X8
	131 Call 0x1B6FA0C
	132 Move X2, [X21]
	133 Move X1, X19
	134 Move X3, X31
	135 Move X21, X0
	136 Call Comparison`1<Object>..ctor, X0, X1, X2
	137 Move X2, [X22]
	138 Move X0, X20
	139 Move X1, X21
	140 Call 0x20475D4, X0, X1
	141 Compare X20, 0
	142 JumpIfEqual {240}
	143 Move W8, [X20+24]
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move X24, 0x22A6000
	146 Move X25, 0x22A7000
	147 Move X24, [X24+1144]
	148 Move X25, [X25+616]
	149 Move W23, W31
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Add X8, X20, W23
	152 Move X21, [X8+32]
	153 Compare X21, 0
	154 JumpIfEqual {240}
	155 Move X0, X21
	156 Move X1, X31
	157 Call Collider.get_attachedRigidbody, X0
	158 Move X8, [X24]
	159 Move X22, X0
	160 Move W9, [X8+224]
	161 Compare W9, 0
	162 JumpIfNotEqual {165}
	163 Move X0, X8
	164 Call 0x1B6F8F8
	165 Move X0, X22
	166 Move X1, X31
	167 Move X2, X31
	168 Call Object.op_Inequality, X0, X1
	169 Move TEMP, X0
	170 And TEMP, TEMP, 1
	171 Compare TEMP, 1
	172 JumpIfNotEqual {179}
	173 Move X0, X21
	174 Move X1, X31
	175 Call Collider.get_attachedRigidbody, X0
	176 Compare X0, 0
	177 JumpIfEqual {240}
	178 Move X21, X0
	179 Move X1, [X25]
	180 Move X0, X21
	181 Call 0x2090DE8, X0
	182 Move X8, [X24]
	183 Move X21, X0
	184 Move W9, [X8+224]
	185 Compare W9, 0
	186 JumpIfNotEqual {189}
	187 Move X0, X8
	188 Call 0x1B6F8F8
	189 Move X0, X21
	190 Move X1, X31
	191 Move X2, X31
	192 Call Object.op_Inequality, X0, X1
	193 Move TEMP, X0
	194 And TEMP, TEMP, 1
	195 Compare TEMP, 1
	196 JumpIfEqual {200}
	197 Move W8, [X20+24]
	198 Add W23, W23, 1
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Move X8, -18866176
	201 Move X9, -18866176
	202 Move W0, [X19+128]
	203 Move V0, [X8+3616]
	204 Move V1, [X9+3236]
	205 Move X1, X31
	206 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	207 Compare X21, 0
	208 JumpIfEqual {240}
	209 Move X8, [X21+64]
	210 Move X0, [X19+136]
	211 Compare X8, 0
	212 JumpIfEqual {217}
	213 Move X8, [X8+32]
	214 Compare X8, 0
	215 JumpIfEqual {217}
	216 Move W1, [X8]
	217 Move X1, X31
	218 Compare X0, 0
	219 JumpIfEqual {240}
	220 Move W8, [X21+104]
	221 Move W3, 1
	222 Move W2, W31
	223 NotImplemented "Instruction BFM not yet implemented."
	224 Move X4, X31
	225 Move X5, X31
	226 Move X6, X31
	227 Call AttachedItemAnchor.RPC_TryGrabItem, X0, X1, X2, X3, X4
	228 Move X20, [X31+80]
	229 Move X19, [X31+88]
	230 Move X22, [X31+64]
	231 Move X21, [X31+72]
	232 Move X24, [X31+48]
	233 Move X23, [X31+56]
	234 Move X30, [X31+32]
	235 Move X25, [X31+40]
	236 Move D9, [X31+16]
	237 Move D8, [X31+24]
	238 Move V10, [X31+96]
	239 Return 
	240 Call 0x1B6FA1C
	241 Call 0x1B6FA24

Method: System.Void .ctor()

Disassembly:
	0x01CA8D04 LDR X8, [X8]
	0x01CA8D08 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move X1, X31
	002 Call NetworkBehaviour..ctor, X0
	003 Return 

Method: System.Int32 <CheckAndTryGrab>b__16_0(UnityEngine.Collider a, UnityEngine.Collider b)

Disassembly:
	0x01CA8D0C LDP S0, S1, [X8 + 0x18]
	0x01CA8D10 LDR V3, [X8 + 0x20]
	0x01CA8D14 FMUL S0, S8, S0
	0x01CA8D18 FMUL S1, S9, S1
	0x01CA8D1C FADD S0, S0, S1
	0x01CA8D20 FMUL S1, S10, S3
	0x01CA8D24 FADD S0, S1, S0
	0x01CA8D28 FCMP S0, S2
	0x01CA8D2C B.LE 0x1CA8D50
	0x01CA8D30 MOV X0, X19
	0x01CA8D34 BL 0x1CA8E30
	0x01CA8D38 MOV X0, X31
	0x01CA8D3C BL 0x1D9CB50
	0x01CA8D40 AND X1, X0, 0x0
	0x01CA8D44 MOV X0, X19
	0x01CA8D48 BL 0x1CA808C
	0x01CA8D4C B 0x1CA8E14
	0x01CA8D50 ADRP X8, 0xFFFFFFFFFEE01000
	0x01CA8D54 LDR V1, [X8 + 0xD34]
	0x01CA8D58 FCMP S0, S1
	0x01CA8D5C B.PL 0x1CA8E14
	0x01CA8D60 ADD X8, X31, 0x0
	0x01CA8D64 MOV X0, X19
	0x01CA8D68 BL 0x1CA7F74
	0x01CA8D6C ADRP X9, 0x22A6000
	0x01CA8D70 LDR V0, [X31]
	0x01CA8D74 LDR X8, [X31 + 0x10]
	0x01CA8D78 LDR X9, [X9 + 0x6A8]
	0x01CA8D7C ADD X0, X31, 0x20
	0x01CA8D80 MOV W1, W31
	0x01CA8D84 STR V0, [X31 + 0x2]
	0x01CA8D88 LDR X2, [X9]
	0x01CA8D8C STR X8, [X31 + 0x30]
	0x01CA8D90 BL 0x22AE1F0
	0x01CA8D94 ADRP X8, 0x22A6000
	0x01CA8D98 LDR X8, [X8 + 0x1E8]
	0x01CA8D9C MOV X20, X0
	0x01CA8DA0 LDR X8, [X8]
	0x01CA8DA4 LDR W9, [X8 + 0xE0]
	0x01CA8DA8 CBNZ W9, 0x1CA8DB4
	0x01CA8DAC MOV X0, X8
	0x01CA8DB0 BL 0x1B6E8F8
	0x01CA8DB4 CBZ W20, 0x1CA8E14
	0x01CA8DB8 MOV X0, X19
	0x01CA8DBC BL 0x1CA802C
	0x01CA8DC0 STR W0, [X31 + 0x18]
	0x01CA8DC4 ADD X0, X31, 0x18
	0x01CA8DC8 MOV X1, X31
	0x01CA8DCC BL 0x1D9CB58
	0x01CA8DD0 TBZ X0, 0x0, 0x1CA8E00
	0x01CA8DD4 MOV X0, X19
	0x01CA8DD8 BL 0x1CA802C
	0x01CA8DDC STR W0, [X31 + 0x18]
	0x01CA8DE0 LDR X1, [X19 + 0x38]
	0x01CA8DE4 ADD X0, X31, 0x18
	0x01CA8DE8 MOV X2, X31
	0x01CA8DEC BL 0x1D9CBCC
	0x01CA8DF0 TBZ X0, 0x0, 0x1CA8E14
	0x01CA8DF4 MOV X0, X19
	0x01CA8DF8 BL 0x1CA9318
	0x01CA8DFC TBZ X0, 0x0, 0x1CA8E14
	0x01CA8E00 LDR X0, [X19 + 0x38]
	0x01CA8E04 FMOV S0, 0.25
	0x01CA8E08 MOV X1, X31
	0x01CA8E0C BL 0x1D9CEB8
	0x01CA8E10 B 0x1CA8D40
	0x01CA8E14 LDP X20, X19, [X31 + 0x60]
	0x01CA8E18 LDR X30, [X31 + 0x58]
	0x01CA8E1C LDP D9, D8, [X31 + 0x48]
	0x01CA8E20 LDR V10, [X31 + 0x40]
	0x01CA8E24 ADD X31, X31, 0x70
	0x01CA8E28 RET
	0x01CA8E2C BL 0x1B6EA1C
	0x01CA8E30 SUB X31, X31, 0xE0
	0x01CA8E34 STR D12, [X31 + 0x60]
	0x01CA8E38 STP D11, D10, [X31 + 0x70]
	0x01CA8E3C STP D9, D8, [X31 + 0x80]
	0x01CA8E40 STP X30, X27, [X31 + 0x90]
	0x01CA8E44 STP X26, X25, [X31 + 0xA0]
	0x01CA8E48 STP X24, X23, [X31 + 0xB0]
	0x01CA8E4C STP X22, X21, [X31 + 0xC0]
	0x01CA8E50 STP X20, X19, [X31 + 0xD0]
	0x01CA8E54 ADRP X20, 0x257B000
	0x01CA8E58 LDRB W8, [X20 + 0x477]
	0x01CA8E5C MOV X19, X0
	0x01CA8E60 TBNZ X8, 0x0, 0x1CA8ED8
	0x01CA8E64 ADRP X0, 0x22A6000
	0x01CA8E68 LDR X0, [X0 + 0x268]
	0x01CA8E6C BL 0x1B6E7F0
	0x01CA8E70 ADRP X0, 0x22A6000
	0x01CA8E74 LDR X0, [X0 + 0x298]
	0x01CA8E78 BL 0x1B6E7F0
	0x01CA8E7C ADRP X0, 0x22A6000
	0x01CA8E80 LDR X0, [X0 + 0x3D8]
	0x01CA8E84 BL 0x1B6E7F0
	0x01CA8E88 ADRP X0, 0x22A6000
	0x01CA8E8C LDR X0, [X0 + 0x6E0]
	0x01CA8E90 BL 0x1B6E7F0
	0x01CA8E94 ADRP X0, 0x22A6000
	0x01CA8E98 LDR X0, [X0 + 0x6E8]
	0x01CA8E9C BL 0x1B6E7F0

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Compare X1, 0
	013 JumpIfEqual {121}
	014 Move X19, X0
	015 Move X0, X1
	016 Move X1, X31
	017 Move X20, X2
	018 Call Component.get_transform, X0
	019 Compare X0, 0
	020 JumpIfEqual {121}
	021 Move X1, X31
	022 Call Transform.get_position, X0
	023 Move X0, X19
	024 Move X1, X31
	025 Move V8, V0
	026 Move V9, V1
	027 Move V10, V2
	028 Call Component.get_transform, X0
	029 Compare X0, 0
	030 JumpIfEqual {121}
	031 Move X1, X31
	032 Call Transform.get_position, X0
	033 Move X21, 0x257C000
	034 Move W8, [X21+1286]
	035 Move V11, V0
	036 Move V12, V1
	037 Move V13, V2
	038 Compare W8, 0
	039 JumpIfNotEqual {45}
	040 Move X0, 0x22A6000
	041 Move X0, [X0+1160]
	042 Call 0x1B6F7F0
	043 Move W8, 1
	044 Move [X21+1286], W8
	045 Move X22, 0x22A6000
	046 Move X22, [X22+1160]
	047 Subtract S11, S8, S11
	048 Subtract S9, S9, S12
	049 Subtract S8, S10, S13
	050 Move X0, [X22]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1B6F8F8
	055 Multiply S0, S11, S11
	056 Multiply S1, S9, S9
	057 Add S0, S0, S1
	058 Multiply S1, S8, S8
	059 Add S0, S1, S0
	060 NotImplemented "Instruction FSQRT not yet implemented."
	061 Move [X31+60], S0
	062 Compare X20, 0
	063 JumpIfEqual {121}
	064 Move X0, X20
	065 Move X1, X31
	066 Call Component.get_transform, X0
	067 Compare X0, 0
	068 JumpIfEqual {121}
	069 Move X1, X31
	070 Call Transform.get_position, X0
	071 Move X0, X19
	072 Move X1, X31
	073 Move V8, V0
	074 Move V9, V1
	075 Move V10, V2
	076 Call Component.get_transform, X0
	077 Compare X0, 0
	078 JumpIfEqual {121}
	079 Move X1, X31
	080 Call Transform.get_position, X0
	081 Move W8, [X21+1286]
	082 Move V11, V0
	083 Move V12, V1
	084 Move V13, V2
	085 Compare W8, 0
	086 JumpIfNotEqual {92}
	087 Move X0, 0x22A6000
	088 Move X0, [X0+1160]
	089 Call 0x1B6F7F0
	090 Move W8, 1
	091 Move [X21+1286], W8
	092 Move X0, [X22]
	093 Subtract S11, S8, S11
	094 Subtract S9, S9, S12
	095 Subtract S8, S10, S13
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1B6F8F8
	100 Multiply S0, S11, S11
	101 Multiply S1, S9, S9
	102 Add S0, S0, S1
	103 Multiply S1, S8, S8
	104 Add S0, S1, S0
	105 NotImplemented "Instruction FSQRT not yet implemented."
	106 Add X0, X31, 60
	107 Move X1, X31
	108 Call Single.CompareTo, X0, V0
	109 Move X20, [X31+80]
	110 Move X19, [X31+88]
	111 Move X22, [X31+64]
	112 Move X21, [X31+72]
	113 Move X30, [X31+48]
	114 Move D9, [X31+32]
	115 Move D8, [X31+40]
	116 Move D11, [X31+16]
	117 Move D10, [X31+24]
	118 Move D13, [X31+96]
	119 Move D12, [X31+104]
	120 Return X0
	121 Call 0x1B6FA1C

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01CA8EA0 ADRP X0, 0x22A6000

ISIL:
	001 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01CA8EA4 LDR X0, [X0 + 0x6B0]

ISIL:
	001 Return 

