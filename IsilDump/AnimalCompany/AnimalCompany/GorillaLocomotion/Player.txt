Type: AnimalCompany.GorillaLocomotion.Player

Method: AnimalCompany.GorillaLocomotion.Player get_Instance()

Disassembly:
	0x01D07AE0 FSUB S10, S2, S13
	0x01D07AE4 STP S8, S9, [X31 + 0xD0]
	0x01D07AE8 STR S10, [X31 + 0xD8]
	0x01D07AEC LDR X0, [X19 + 0x28]
	0x01D07AF0 CBZ X0, 0x1D087D8
	0x01D07AF4 MOV X1, X31
	0x01D07AF8 BL 0x3A9B084
	0x01D07AFC CBZ X0, 0x1D087D8
	0x01D07B00 MOV X1, X31
	0x01D07B04 BL 0x3AA7658
	0x01D07B08 LDR X0, [X19 + 0x28]
	0x01D07B0C CBZ X0, 0x1D087D8
	0x01D07B10 STP S0, S13, [X31 + 0x20]
	0x01D07B14 STR S10, [X31 + 0x40]
	0x01D07B18 LDP S0, S10, [X19 + 0x80]
	0x01D07B1C STP S12, S11, [X31 + 0x28]
	0x01D07B20 LDR V11, [X19 + 0x88]
	0x01D07B24 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x251D000
	005 Move X20, 0x2248000
	006 Move W8, [X19+1875]
	007 Move X20, [X20+2688]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2248000
	013 Move X0, [X0+2688]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X19+1875], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move X0, [X8]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void Awake()

Disassembly:
	0x01D07B28 STP S2, S1, [X31 + 0x18]
	0x01D07B2C STR S9, [X31 + 0x50]
	0x01D07B30 STR S8, [X31 + 0x30]
	0x01D07B34 STR S0, [X31 + 0x14]
	0x01D07B38 BL 0x3A9B084
	0x01D07B3C CBZ X0, 0x1D087D8
	0x01D07B40 MOV X1, X31
	0x01D07B44 BL 0x3AA7658
	0x01D07B48 ADRP X21, 0x251C000
	0x01D07B4C LDP S12, S13, [X19 + 0x80]
	0x01D07B50 LDRB W8, [X21 + 0x440]
	0x01D07B54 LDR V9, [X19 + 0x88]
	0x01D07B58 MOV V14.16B, V0.16B
	0x01D07B5C MOV V15.16B, V1.16B
	0x01D07B60 MOV V8.16B, V2.16B
	0x01D07B64 CBNZ W8, 0x1D07B7C
	0x01D07B68 ADRP X0, 0x2246000
	0x01D07B6C LDR X0, [X0 + 0x488]
	0x01D07B70 BL 0x1B6E7F0
	0x01D07B74 MOVZ W8, 0x1
	0x01D07B78 STRB W8, [X21 + 0x440]
	0x01D07B7C ADRP X8, 0x2246000
	0x01D07B80 LDR X8, [X8 + 0x488]
	0x01D07B84 LDR X0, [X8]
	0x01D07B88 LDR W8, [X0 + 0xE0]
	0x01D07B8C CBNZ W8, 0x1D07B94
	0x01D07B90 BL 0x1B6E8F8
	0x01D07B94 LDR X0, [X19 + 0x28]
	0x01D07B98 CBZ X0, 0x1D087D8
	0x01D07B9C LDR V3, [X31 + 0x20]
	0x01D07BA0 LDP S4, S5, [X31 + 0x14]
	0x01D07BA4 FSUB S1, S15, S13
	0x01D07BA8 LDR V15, [X31 + 0x30]
	0x01D07BAC LDR V6, [X31 + 0x50]
	0x01D07BB0 FSUB S0, S14, S12
	0x01D07BB4 LDR V14, [X31 + 0x40]
	0x01D07BB8 FSUB S3, S3, S4
	0x01D07BBC LDR V4, [X31 + 0x1C]
	0x01D07BC0 FSUB S2, S8, S9
	0x01D07BC4 FADD S0, S15, S0
	0x01D07BC8 FADD S1, S6, S1
	0x01D07BCC FADD S2, S14, S2
	0x01D07BD0 FMUL S0, S0, S0
	0x01D07BD4 FMUL S1, S1, S1
	0x01D07BD8 FADD S0, S0, S1
	0x01D07BDC FMUL S1, S2, S2
	0x01D07BE0 FSUB S4, S4, S10
	0x01D07BE4 FSUB S5, S5, S11
	0x01D07BE8 FADD S0, S0, S1
	0x01D07BEC MOV X1, X31
	0x01D07BF0 FADD S11, S15, S3
	0x01D07BF4 FADD S12, S6, S4
	0x01D07BF8 FADD S13, S14, S5
	0x01D07BFC FSQRT S9, S0
	0x01D07C00 BL 0x3AF7C90
	0x01D07C04 LDR V10, [X19 + 0xB8]
	0x01D07C08 ADD X0, X19, 0x10C
	0x01D07C0C MOV X1, X31
	0x01D07C10 MOV V8.16B, V0.16B
	0x01D07C14 BL 0x3A9DE74
	0x01D07C18 ADRP X8, 0x2246000
	0x01D07C1C LDR X8, [X8 + 0x4C0]
	0x01D07C20 MOV W21, W0
	0x01D07C24 LDR X8, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x251D000
	007 Move X22, 0x2248000
	008 Move X21, 0x2247000
	009 Move W8, [X20+1876]
	010 Move X22, [X22+2688]
	011 Move X21, [X21+1144]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2247000
	018 Move X0, [X0+1144]
	019 Call 0x1B6F7F0
	020 Move X0, 0x2248000
	021 Move X0, [X0+2688]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X20+1876], W8
	025 Move X8, [X22]
	026 Move X0, [X21]
	027 Move X8, [X8+184]
	028 Move W9, [X0+224]
	029 Move X20, [X8]
	030 Compare W9, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1B6F8F8
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Inequality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {70}
	041 Move X8, [X22]
	042 Move X0, [X21]
	043 Move X8, [X8+184]
	044 Move W9, [X0+224]
	045 Move X20, [X8]
	046 Compare W9, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1B6F8F8
	049 Move X0, X20
	050 Move X1, X19
	051 Move X2, X31
	052 Call Object.op_Inequality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {70}
	057 Move X0, X19
	058 Move X1, X31
	059 Call Component.get_gameObject, X0
	060 Move X8, [X21]
	061 Move X20, X0
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Move X0, X8
	066 Call 0x1B6F8F8
	067 Move X0, X20
	068 Move X1, X31
	069 Call Object.Destroy, X0
	070 Move X8, [X22]
	071 Move X8, [X8+184]
	072 Move [X8], X19
	073 Move X0, X19
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X22, [X31+16]
	077 Move X21, [X31+24]
	078 Move X30, [X31+48]

Method: System.Void InitializeValues()

Disassembly:
	0x01D07C28 LDR W9, [X8 + 0xE0]
	0x01D07C2C CBNZ W9, 0x1D07C38
	0x01D07C30 MOV X0, X8
	0x01D07C34 BL 0x1B6E8F8
	0x01D07C38 ADRP X8, 0xFFFFFFFFFEDA2000
	0x01D07C3C LDR V0, [X8 + 0xD70]
	0x01D07C40 FMUL S1, S8, S10
	0x01D07C44 LDR V2, [X31 + 0x24]
	0x01D07C48 ADD X0, X31, 0xA0
	0x01D07C4C FMUL S0, S1, S0
	0x01D07C50 FADD S6, S9, S0
	0x01D07C54 LDP S1, S0, [X31 + 0x28]
	0x01D07C58 MOV V3.16B, V11.16B
	0x01D07C5C MOV V4.16B, V12.16B
	0x01D07C60 MOV V5.16B, V13.16B
	0x01D07C64 MOV W1, W21
	0x01D07C68 MOV X2, X31
	0x01D07C6C BL 0x3AF3258
	0x01D07C70 LDR V12, [X31 + 0x50]
	0x01D07C74 TBZ X0, 0x0, 0x1D07CB0
	0x01D07C78 LDR X0, [X19 + 0x28]
	0x01D07C7C CBZ X0, 0x1D087D8
	0x01D07C80 LDP S8, S9, [X19 + 0x80]
	0x01D07C84 LDR V10, [X19 + 0x88]
	0x01D07C88 MOV X1, X31
	0x01D07C8C BL 0x3A9B084
	0x01D07C90 CBZ X0, 0x1D087D8
	0x01D07C94 MOV X1, X31
	0x01D07C98 BL 0x3AA7658
	0x01D07C9C FSUB S15, S8, S0
	0x01D07CA0 FSUB S12, S9, S1
	0x01D07CA4 FSUB S14, S10, S2
	0x01D07CA8 STP S15, S12, [X31 + 0xD0]
	0x01D07CAC STR S14, [X31 + 0xD8]
	0x01D07CB0 LDRB W8, [X23 + 0x43F]
	0x01D07CB4 CBNZ W8, 0x1D07CCC
	0x01D07CB8 ADRP X0, 0x2246000
	0x01D07CBC LDR X0, [X0 + 0x480]
	0x01D07CC0 BL 0x1B6E7F0
	0x01D07CC4 MOVZ W8, 0x1
	0x01D07CC8 STRB W8, [X23 + 0x43F]
	0x01D07CCC LDR X8, [X20]
	0x01D07CD0 LDR X8, [X8 + 0xB8]
	0x01D07CD4 LDP S0, S1, [X8]
	0x01D07CD8 LDR V2, [X8 + 0x8]
	0x01D07CDC ADRP X8, 0xFFFFFFFFFEDA2000
	0x01D07CE0 LDR V8, [X8 + 0x934]
	0x01D07CE4 FSUB S0, S15, S0
	0x01D07CE8 FSUB S1, S12, S1
	0x01D07CEC FSUB S2, S14, S2
	0x01D07CF0 FMUL S0, S0, S0
	0x01D07CF4 FMUL S1, S1, S1
	0x01D07CF8 FADD S0, S0, S1
	0x01D07CFC FMUL S1, S2, S2
	0x01D07D00 FADD S0, S1, S0
	0x01D07D04 FCMP S0, S8
	0x01D07D08 B.MI 0x1D07D90
	0x01D07D0C LDR V0, [X19 + 0x1D8]
	0x01D07D10 ADD X0, X31, 0xD0
	0x01D07D14 LDR V1, [X31 + 0x6]
	0x01D07D18 BL 0x1D089F8
	0x01D07D1C LDR X21, [X19 + 0x90]
	0x01D07D20 MOV X0, X19
	0x01D07D24 MOV X1, X31
	0x01D07D28 BL 0x3A9B084
	0x01D07D2C CBZ X0, 0x1D087D8
	0x01D07D30 MOV X1, X31
	0x01D07D34 BL 0x3AA7658
	0x01D07D38 CBZ X21, 0x1D087D8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x251D000
	007 Move X22, 0x2248000
	008 Move X20, 0x2249000
	009 Move W8, [X21+1877]
	010 Move X22, [X22+664]
	011 Move X20, [X20+720]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2248000
	018 Move X0, [X0+664]
	019 Call 0x1B6F7F0
	020 Move X0, 0x2249000
	021 Move X0, [X0+720]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X21+1877], W8
	025 Move X1, [X22]
	026 Move X0, X19
	027 Call 0x2090DE8, X0
	028 Move [X19+144], X0
	029 Move W1, [X19+152]
	030 Move X0, [X20]
	031 Call 0x1B6F868
	032 Move X8, [X19+56]
	033 Move [X19+192], X0
	034 Compare X8, 0
	035 JumpIfEqual {87}
	036 Move X0, X8
	037 Move X1, X31
	038 Call Component.get_transform, X0
	039 Compare X0, 0
	040 JumpIfEqual {87}
	041 Move X1, X31
	042 Call Transform.get_position, X0
	043 Move X0, [X19+64]
	044 Move [X19+104], S0
	045 Move [X19+112], S1
	046 Move [X19+112], S2
	047 Compare X0, 0
	048 JumpIfEqual {87}
	049 Move X1, X31
	050 Call Component.get_transform, X0
	051 Compare X0, 0
	052 JumpIfEqual {87}
	053 Move X1, X31
	054 Call Transform.get_position, X0
	055 Move X0, [X19+40]
	056 Move [X19+116], S0
	057 Move [X19+124], S1
	058 Move [X19+124], S2
	059 Compare X0, 0
	060 JumpIfEqual {87}
	061 Move X1, X31
	062 Call Component.get_transform, X0
	063 Compare X0, 0
	064 JumpIfEqual {87}
	065 Move X1, X31
	066 Call Transform.get_position, X0
	067 Move X0, X19
	068 Move X1, X31
	069 Move [X19+128], S0
	070 Move [X19+136], S1
	071 Move [X19+136], S2
	072 Move [X19+200], W31
	073 Call Component.get_transform, X0
	074 Compare X0, 0
	075 JumpIfEqual {87}
	076 Move X1, X31
	077 Call Transform.get_position, X0
	078 Move [X19+232], S0
	079 Move [X19+240], S1
	080 Move [X19+240], S2
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X30, [X31+48]
	086 Return 
	087 Call 0x1B6FA1C

Method: UnityEngine.Vector3 CurrentLeftHandPosition()

Disassembly:
	0x01D07D3C LDP S4, S3, [X31 + 0xD4]
	0x01D07D40 LDR V5, [X31 + 0xD0]
	0x01D07D44 MOV X0, X21
	0x01D07D48 MOV X1, X31
	0x01D07D4C FADD S2, S2, S3
	0x01D07D50 FADD S1, S1, S4
	0x01D07D54 FADD S0, S0, S5
	0x01D07D58 BL 0x3AF6DE4
	0x01D07D5C MOV X0, X19
	0x01D07D60 MOV X1, X31
	0x01D07D64 BL 0x3A9B084
	0x01D07D68 LDR X8, [X19 + 0x90]
	0x01D07D6C CBZ X8, 0x1D087D8
	0x01D07D70 MOV X21, X0
	0x01D07D74 MOV X0, X8
	0x01D07D78 MOV X1, X31
	0x01D07D7C BL 0x3AF6B78
	0x01D07D80 CBZ X21, 0x1D087D8
	0x01D07D84 MOV X0, X21
	0x01D07D88 MOV X1, X31
	0x01D07D8C BL 0x3AA76F8
	0x01D07D90 LDR X0, [X19 + 0x28]
	0x01D07D94 CBZ X0, 0x1D087D8
	0x01D07D98 MOV X1, X31
	0x01D07D9C BL 0x3A9B084
	0x01D07DA0 CBZ X0, 0x1D087D8
	0x01D07DA4 MOV X1, X31
	0x01D07DA8 BL 0x3AA7658
	0x01D07DAC MOV X0, X19
	0x01D07DB0 STP S0, S1, [X19 + 0x80]
	0x01D07DB4 STR S2, [X19 + 0x88]
	0x01D07DB8 BL 0x1D06D3C
	0x01D07DBC MOV V4.16B, V0.16B
	0x01D07DC0 MOV V5.16B, V1.16B
	0x01D07DC4 MOV V6.16B, V2.16B
	0x01D07DC8 LDP S0, S1, [X19 + 0x68]
	0x01D07DCC LDR V2, [X19 + 0x70]
	0x01D07DD0 LDR V3, [X19 + 0xB0]
	0x01D07DD4 LDR V7, [X19 + 0xB8]
	0x01D07DD8 FSUB S4, S4, S0
	0x01D07DDC FSUB S5, S5, S1
	0x01D07DE0 FSUB S6, S6, S2
	0x01D07DE4 TBZ X29, 0x0, 0x1D07DF4
	0x01D07DE8 TBZ X24, 0x0, 0x1D07E08
	0x01D07DEC MOV W8, W31
	0x01D07DF0 B 0x1D07E10
	0x01D07DF4 LDRB W8, [X19 + 0x110]
	0x01D07DF8 CMP W8, 0x0
	0x01D07DFC CSET W9, EQ
	0x01D07E00 ORR W9, W9, W24, 0x0
	0x01D07E04 TBNZ X9, 0x0, 0x1D07E0C
	0x01D07E08 LDRB W8, [X19 + 0x111]
	0x01D07E0C EOR W8, W8, 0x1
	0x01D07E10 ANDS W31, W8, 0xFF
	0x01D07E14 ADD X3, X19, 0x128
	0x01D07E18 CSET W2, NE
	0x01D07E1C ADD X1, X31, 0xE0
	0x01D07E20 MOV X0, X19
	0x01D07E24 BL 0x1D08B3C
	0x01D07E28 TBZ X0, 0x0, 0x1D07E44
	0x01D07E2C LDR W8, [X31 + 0xE8]
	0x01D07E30 LDR X9, [X31 + 0xE0]
	0x01D07E34 MOVZ W29, 0x1
	0x01D07E38 STR W8, [X19 + 0x70]
	0x01D07E3C STR X9, [X19 + 0x68]
	0x01D07E40 B 0x1D07E54
	0x01D07E44 MOV X0, X19
	0x01D07E48 BL 0x1D06D3C
	0x01D07E4C STP S0, S1, [X19 + 0x68]
	0x01D07E50 STR S2, [X19 + 0x70]
	0x01D07E54 MOV X0, X19
	0x01D07E58 BL 0x1D07014
	0x01D07E5C MOV V4.16B, V0.16B
	0x01D07E60 MOV V5.16B, V1.16B
	0x01D07E64 MOV V6.16B, V2.16B
	0x01D07E68 LDP S0, S1, [X19 + 0x74]
	0x01D07E6C LDR V2, [X19 + 0x7C]
	0x01D07E70 LDR V3, [X19 + 0xB0]
	0x01D07E74 LDR V7, [X19 + 0xB8]
	0x01D07E78 FSUB S4, S4, S0
	0x01D07E7C FSUB S5, S5, S1
	0x01D07E80 FSUB S6, S6, S2
	0x01D07E84 TBZ X29, 0x0, 0x1D07E94
	0x01D07E88 TBZ X24, 0x0, 0x1D07EA8
	0x01D07E8C MOV W8, W31
	0x01D07E90 B 0x1D07EB0
	0x01D07E94 LDRB W8, [X19 + 0x110]
	0x01D07E98 CMP W8, 0x0
	0x01D07E9C CSET W9, EQ
	0x01D07EA0 ORR W9, W24, W9, 0x0
	0x01D07EA4 TBNZ X9, 0x0, 0x1D07EAC
	0x01D07EA8 LDRB W8, [X19 + 0x111]
	0x01D07EAC EOR W8, W8, 0x1
	0x01D07EB0 ANDS W31, W8, 0xFF
	0x01D07EB4 ADD X3, X19, 0x154
	0x01D07EB8 CSET W2, NE
	0x01D07EBC ADD X1, X31, 0xE0
	0x01D07EC0 MOV X0, X19
	0x01D07EC4 BL 0x1D08B3C
	0x01D07EC8 TBZ X0, 0x0, 0x1D07EF0
	0x01D07ECC LDR W8, [X31 + 0xE8]
	0x01D07ED0 LDR X9, [X31 + 0xE0]
	0x01D07ED4 MOV X0, X19
	0x01D07ED8 LDR V0, [X31 + 0x6]
	0x01D07EDC STR W8, [X19 + 0x7C]
	0x01D07EE0 STUR X9, [X19 + 0x74]
	0x01D07EE4 BL 0x1D08F74
	0x01D07EE8 MOVZ W24, 0x1
	0x01D07EEC B 0x1D07F18
	0x01D07EF0 MOV X0, X19
	0x01D07EF4 BL 0x1D07014
	0x01D07EF8 STP S0, S1, [X19 + 0x74]
	0x01D07EFC MOV X0, X19
	0x01D07F00 LDR V0, [X31 + 0x6]
	0x01D07F04 STR S2, [X19 + 0x7C]
	0x01D07F08 BL 0x1D08F74
	0x01D07F0C ORR W8, W24, W29, 0x0
	0x01D07F10 ORR W8, W25, W8, 0x0
	0x01D07F14 TBZ X8, 0x0, 0x1D08060
	0x01D07F18 LDRB W8, [X19 + 0x112]
	0x01D07F1C CBNZ W8, 0x1D08244
	0x01D07F20 ADRP X21, 0x251C000
	0x01D07F24 LDRB W8, [X21 + 0x440]
	0x01D07F28 CBNZ W8, 0x1D07F40
	0x01D07F2C ADRP X0, 0x2246000
	0x01D07F30 LDR X0, [X0 + 0x488]
	0x01D07F34 BL 0x1B6E7F0
	0x01D07F38 MOVZ W8, 0x1
	0x01D07F3C STRB W8, [X21 + 0x440]
	0x01D07F40 ADRP X22, 0x2246000
	0x01D07F44 LDR X22, [X22 + 0x488]
	0x01D07F48 LDP S11, S10, [X19 + 0xD8]
	0x01D07F4C LDR V9, [X19 + 0xE0]
	0x01D07F50 LDR X0, [X22]
	0x01D07F54 LDR W8, [X0 + 0xE0]
	0x01D07F58 CBNZ W8, 0x1D07F60
	0x01D07F5C BL 0x1B6E8F8
	0x01D07F60 FMUL S0, S11, S11
	0x01D07F64 FMUL S1, S10, S10
	0x01D07F68 LDR V2, [X19 + 0xA4]
	0x01D07F6C FADD S0, S0, S1
	0x01D07F70 FMUL S1, S9, S9
	0x01D07F74 FADD S0, S0, S1
	0x01D07F78 FSQRT S0, S0
	0x01D07F7C FCMP S0, S2
	0x01D07F80 B.LE 0x1D08244
	0x01D07F84 LDRB W8, [X21 + 0x440]
	0x01D07F88 LDR V9, [X19 + 0xA8]
	0x01D07F8C CBNZ W8, 0x1D07FA4
	0x01D07F90 ADRP X0, 0x2246000

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X1, [X0+80]
	015 Move V0, [X0+256]
	016 Move V1, [X0+260]
	017 Move V2, [X0+264]
	018 Move X19, X0
	019 Call Player.PositionWithOffset, X0, X1, X2
	020 Move X0, [X19+40]
	021 Compare X0, 0
	022 JumpIfEqual {170}
	023 Move X1, X31
	024 Move V8, V0
	025 Move V9, V1
	026 Move V10, V2
	027 Call Component.get_transform, X0
	028 Compare X0, 0
	029 JumpIfEqual {170}
	030 Move X1, X31
	031 Call Transform.get_position, X0
	032 Move X20, 0x251D000
	033 Move W8, [X20+1088]
	034 Move V11, V0
	035 Move V12, V1
	036 Move V13, V2
	037 Compare W8, 0
	038 JumpIfNotEqual {44}
	039 Move X0, 0x2247000
	040 Move X0, [X0+1160]
	041 Call 0x1B6F7F0
	042 Move W8, 1
	043 Move [X20+1088], W8
	044 Move X20, 0x2247000
	045 Move X20, [X20+1160]
	046 Subtract S11, S8, S11
	047 Subtract S9, S9, S12
	048 Subtract S8, S10, S13
	049 Move X0, [X20]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1B6F8F8
	054 Multiply S0, S11, S11
	055 Multiply S1, S9, S9
	056 Move V2, [X19+156]
	057 Add S0, S0, S1
	058 Multiply S1, S8, S8
	059 Add S0, S1, S0
	060 NotImplemented "Instruction FSQRT not yet implemented."
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 Move X1, [X19+80]
	063 Move V0, [X19+256]
	064 Move V1, [X19+260]
	065 Move V2, [X19+264]
	066 Call Player.PositionWithOffset, X0, X1, X2
	067 Move X0, [X19+40]
	068 Compare X0, 0
	069 JumpIfEqual {170}
	070 Move X1, X31
	071 Call Component.get_transform, X0
	072 Compare X0, 0
	073 JumpIfEqual {170}
	074 Move X1, X31
	075 Call Transform.get_position, X0
	076 Move V3, [X19+264]
	077 Move V8, V0
	078 Move V9, V1
	079 Move X1, [X19+80]
	080 Move V0, [X19+256]
	081 Move V1, [X19+260]
	082 Move V10, V2
	083 Move V2, V3
	084 Call Player.PositionWithOffset, X0, X1, X2
	085 Move X0, [X19+40]
	086 Compare X0, 0
	087 JumpIfEqual {170}
	088 Move X1, X31
	089 Move V11, V0
	090 Move V12, V1
	091 Move V13, V2
	092 Move [X31+12], S10
	093 Move V10, V9
	094 Move V9, V8
	095 Call Component.get_transform, X0
	096 Compare X0, 0
	097 JumpIfEqual {170}
	098 Move X1, X31
	099 Call Transform.get_position, X0
	100 Move X21, 0x251D000
	101 Move W8, [X21+1089]
	102 Move V14, V0
	103 Move V15, V1
	104 Move V8, V2
	105 Compare W8, 0
	106 JumpIfNotEqual {112}
	107 Move X0, 0x2247000
	108 Move X0, [X0+1160]
	109 Call 0x1B6F7F0
	110 Move W8, 1
	111 Move [X21+1089], W8
	112 Move X0, [X20]
	113 Subtract S14, S11, S14
	114 Subtract S11, S12, S15
	115 Subtract S8, S13, S8
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1B6F8F8
	120 Multiply S0, S14, S14
	121 Multiply S1, S11, S11
	122 Move X8, -19255296
	123 Add S0, S0, S1
	124 Move V1, [X8+2916]
	125 Multiply S2, S8, S8
	126 Add S0, S2, S0
	127 NotImplemented "Instruction FSQRT not yet implemented."
	128 NotImplemented "Instruction FCMP not yet implemented."
	129 NotImplemented "Instruction FDIV not yet implemented."
	130 NotImplemented "Instruction FDIV not yet implemented."
	131 NotImplemented "Instruction FDIV not yet implemented."
	132 Move X20, 0x251D000
	133 Move W8, [X20+1087]
	134 Compare W8, 0
	135 JumpIfNotEqual {141}
	136 Move X0, 0x2247000
	137 Move X0, [X0+1152]
	138 Call 0x1B6F7F0
	139 Move W8, 1
	140 Move [X20+1087], W8
	141 Move X8, 0x2247000
	142 Move X8, [X8+1152]
	143 Move X8, [X8]
	144 Move X8, [X8+184]
	145 Move S0, [X8]
	146 Move S1, [X8+4]
	147 Move V2, [X8+8]
	148 Move V3, [X19+156]
	149 Move V4, [X31+12]
	150 Multiply S0, S0, S3
	151 Multiply S1, S1, S3
	152 Multiply S2, S2, S3
	153 Add S0, S9, S0
	154 Add S1, S10, S1
	155 Add S2, S4, S2
	156 Move X20, [X31+96]
	157 Move X19, [X31+104]
	158 Move X30, [X31+80]
	159 Move X21, [X31+88]
	160 Move D9, [X31+64]
	161 Move D8, [X31+72]
	162 Move D11, [X31+48]
	163 Move D10, [X31+56]
	164 Move D13, [X31+32]
	165 Move D12, [X31+40]
	166 Move D15, [X31+16]
	167 Move D14, [X31+24]
	168 Add X31, X31, 112
	169 Return X0
	170 Call 0x1B6FA1C

Method: UnityEngine.Vector3 CurrentRightHandPosition()

Disassembly:
	0x01D08014 LDR X0, [X22]
	0x01D08018 LDR W8, [X0 + 0xE0]
	0x01D0801C CBNZ W8, 0x1D08024
	0x01D08020 BL 0x1B6E8F8
	0x01D08024 FMUL S0, S10, S10
	0x01D08028 FMUL S1, S11, S11
	0x01D0802C ADRP X8, 0xFFFFFFFFFEDA1000
	0x01D08030 FADD S0, S0, S1
	0x01D08034 LDR V1, [X8 + 0xB64]
	0x01D08038 FMUL S2, S12, S12
	0x01D0803C FADD S0, S2, S0
	0x01D08040 FSQRT S2, S0
	0x01D08044 FCMP S2, S1
	0x01D08048 MOV X23, X26
	0x01D0804C B.LE 0x1D081FC
	0x01D08050 FDIV S0, S10, S2
	0x01D08054 FDIV S1, S11, S2
	0x01D08058 FDIV S2, S12, S2
	0x01D0805C B 0x1D08228
	0x01D08060 MOV W24, W31
	0x01D08064 B 0x1D08244
	0x01D08068 LDP S12, S13, [X31 + 0xE0]
	0x01D0806C LDR X8, [X19 + 0x1B0]
	0x01D08070 LDR V14, [X31 + 0xE8]
	0x01D08074 CBZ X8, 0x1D080C4
	0x01D08078 LDP V0, V1, [X21]
	0x01D0807C LDUR V2, [X21 + 0x1C]
	0x01D08080 LDP S3, S4, [X19 + 0x68]
	0x01D08084 LDR V5, [X19 + 0x70]
	0x01D08088 ADD X1, X31, 0x120
	0x01D0808C STUR V2, [X22 + 0x1C]
	0x01D08090 STP V0, V1, [X31 + 0xF0]
	0x01D08094 LDR V1, [X31 + 0x10]
	0x01D08098 LDUR V2, [X22 + 0x1C]
	0x01D0809C LDR X9, [X8 + 0x18]
	0x01D080A0 LDR X0, [X8 + 0x40]
	0x01D080A4 STP V0, V1, [X31 + 0x120]
	0x01D080A8 STUR V2, [X22 + 0x4C]
	0x01D080AC LDP V1, V0, [X31 + 0x40]
	0x01D080B0 LDR X2, [X8 + 0x28]
	0x01D080B4 FSUB S2, S8, S5
	0x01D080B8 FSUB S0, S0, S3
	0x01D080BC FSUB S1, S1, S4
	0x01D080C0 BLR X9
	0x01D080C4 LDRB W8, [X23 + 0x43F]
	0x01D080C8 LDR X21, [X19 + 0x90]
	0x01D080CC CBNZ W8, 0x1D080E4
	0x01D080D0 ADRP X0, 0x2245000
	0x01D080D4 LDR X0, [X0 + 0x480]
	0x01D080D8 BL 0x1B6E7F0
	0x01D080DC MOVZ W8, 0x1
	0x01D080E0 STRB W8, [X23 + 0x43F]
	0x01D080E4 CBZ X21, 0x1D087D8
	0x01D080E8 LDR X8, [X20]
	0x01D080EC LDR V3, [X31 + 0x4]
	0x01D080F0 MOV X0, X21
	0x01D080F4 MOV X1, X31
	0x01D080F8 LDR X8, [X8 + 0xB8]
	0x01D080FC FSUB S13, S13, S3
	0x01D08100 LDR V3, [X31 + 0x5]
	0x01D08104 FSUB S14, S14, S8
	0x01D08108 LDP S1, S2, [X8 + 0x4]
	0x01D0810C LDR V0, [X8]
	0x01D08110 FSUB S3, S12, S3
	0x01D08114 STR S3, [X31 + 0x50]
	0x01D08118 BL 0x3AF650C
	0x01D0811C MOVZ W29, 0x1
	0x01D08120 B 0x1D076F8
	0x01D08124 LDP S11, S10, [X31 + 0xE0]
	0x01D08128 LDR X8, [X19 + 0x1B8]
	0x01D0812C LDR V9, [X31 + 0xE8]
	0x01D08130 CBZ X8, 0x1D08180
	0x01D08134 LDP V0, V1, [X21]
	0x01D08138 LDUR V2, [X21 + 0x1C]
	0x01D0813C LDP S3, S4, [X19 + 0x74]
	0x01D08140 LDR V5, [X19 + 0x7C]
	0x01D08144 ADD X1, X31, 0x120
	0x01D08148 STUR V2, [X22 + 0x1C]
	0x01D0814C STP V0, V1, [X31 + 0xF0]
	0x01D08150 LDR V1, [X31 + 0x10]
	0x01D08154 LDUR V2, [X22 + 0x1C]
	0x01D08158 LDR X9, [X8 + 0x18]
	0x01D0815C LDR X0, [X8 + 0x40]
	0x01D08160 STP V0, V1, [X31 + 0x120]
	0x01D08164 STUR V2, [X22 + 0x4C]
	0x01D08168 LDP V0, V1, [X31 + 0x30]
	0x01D0816C LDR X2, [X8 + 0x28]
	0x01D08170 FSUB S2, S8, S5
	0x01D08174 FSUB S0, S0, S3
	0x01D08178 FSUB S1, S1, S4
	0x01D0817C BLR X9
	0x01D08180 LDRB W8, [X23 + 0x43F]
	0x01D08184 LDR X21, [X19 + 0x90]
	0x01D08188 LDR V3, [X31 + 0x4]
	0x01D0818C CBNZ W8, 0x1D081A8
	0x01D08190 ADRP X0, 0x2245000
	0x01D08194 LDR X0, [X0 + 0x480]
	0x01D08198 BL 0x1B6E7F0
	0x01D0819C LDR V3, [X31 + 0x4]
	0x01D081A0 MOVZ W8, 0x1
	0x01D081A4 STRB W8, [X23 + 0x43F]
	0x01D081A8 CBZ X21, 0x1D087D8
	0x01D081AC LDR X8, [X20]
	0x01D081B0 FSUB S10, S10, S3
	0x01D081B4 LDR V3, [X31 + 0x3]
	0x01D081B8 MOV X0, X21
	0x01D081BC LDR X8, [X8 + 0xB8]
	0x01D081C0 MOV X1, X31
	0x01D081C4 FSUB S9, S9, S8
	0x01D081C8 FSUB S11, S11, S3
	0x01D081CC LDP S1, S2, [X8 + 0x4]
	0x01D081D0 LDR V0, [X8]
	0x01D081D4 BL 0x3AF650C
	0x01D081D8 MOVZ W24, 0x1
	0x01D081DC B 0x1D077EC
	0x01D081E0 CBZ X21, 0x1D087D8
	0x01D081E4 LDP S3, S1, [X19 + 0xDC]
	0x01D081E8 LDR V4, [X19 + 0xD8]
	0x01D081EC FMUL S2, S0, S1
	0x01D081F0 FMUL S1, S0, S3
	0x01D081F4 FMUL S0, S0, S4
	0x01D081F8 B 0x1D08238
	0x01D081FC LDRB W8, [X23 + 0x43F]
	0x01D08200 CBNZ W8, 0x1D08218
	0x01D08204 ADRP X0, 0x2245000
	0x01D08208 LDR X0, [X0 + 0x480]
	0x01D0820C BL 0x1B6E7F0
	0x01D08210 MOVZ W8, 0x1
	0x01D08214 STRB W8, [X23 + 0x43F]
	0x01D08218 LDR X8, [X20]
	0x01D0821C LDR X8, [X8 + 0xB8]
	0x01D08220 LDP S0, S1, [X8]
	0x01D08224 LDR V2, [X8 + 0x8]
	0x01D08228 CBZ X21, 0x1D087D8
	0x01D0822C FMUL S2, S9, S2
	0x01D08230 FMUL S1, S9, S1
	0x01D08234 FMUL S0, S9, S0
	0x01D08238 MOV X0, X21
	0x01D0823C MOV X1, X31
	0x01D08240 BL 0x3AF650C
	0x01D08244 ADD X8, X19, 0x1C4
	0x01D08248 LDR V9, [X19 + 0x1C0]
	0x01D0824C LDRB W9, [X23 + 0x43F]
	0x01D08250 LDR V10, [X8]
	0x01D08254 CBNZ W9, 0x1D0826C
	0x01D08258 ADRP X0, 0x2245000
	0x01D0825C LDR X0, [X0 + 0x480]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X1, [X0+72]
	015 Move S0, [X0+244]
	016 Move S1, [X0+248]
	017 Move V2, [X0+252]
	018 Move X19, X0
	019 Call Player.PositionWithOffset, X0, X1, X2
	020 Move X0, [X19+40]
	021 Compare X0, 0
	022 JumpIfEqual {170}
	023 Move X1, X31
	024 Move V8, V0
	025 Move V9, V1
	026 Move V10, V2
	027 Call Component.get_transform, X0
	028 Compare X0, 0
	029 JumpIfEqual {170}
	030 Move X1, X31
	031 Call Transform.get_position, X0
	032 Move X20, 0x251C000
	033 Move W8, [X20+1088]
	034 Move V11, V0
	035 Move V12, V1
	036 Move V13, V2
	037 Compare W8, 0
	038 JumpIfNotEqual {44}
	039 Move X0, 0x2246000
	040 Move X0, [X0+1160]
	041 Call 0x1B6F7F0
	042 Move W8, 1
	043 Move [X20+1088], W8
	044 Move X20, 0x2246000
	045 Move X20, [X20+1160]
	046 Subtract S11, S8, S11
	047 Subtract S9, S9, S12
	048 Subtract S8, S10, S13
	049 Move X0, [X20]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1B6F8F8
	054 Multiply S0, S11, S11
	055 Multiply S1, S9, S9
	056 Move V2, [X19+156]
	057 Add S0, S0, S1
	058 Multiply S1, S8, S8
	059 Add S0, S1, S0
	060 NotImplemented "Instruction FSQRT not yet implemented."
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 Move X1, [X19+72]
	063 Move S0, [X19+244]
	064 Move S1, [X19+248]
	065 Move V2, [X19+252]
	066 Call Player.PositionWithOffset, X0, X1, X2
	067 Move X0, [X19+40]
	068 Compare X0, 0
	069 JumpIfEqual {170}
	070 Move X1, X31
	071 Call Component.get_transform, X0
	072 Compare X0, 0
	073 JumpIfEqual {170}
	074 Move X1, X31
	075 Call Transform.get_position, X0
	076 Move V3, [X19+252]
	077 Move V8, V0
	078 Move V9, V1
	079 Move X1, [X19+72]
	080 Move S0, [X19+244]
	081 Move S1, [X19+248]
	082 Move V10, V2
	083 Move V2, V3
	084 Call Player.PositionWithOffset, X0, X1, X2
	085 Move X0, [X19+40]
	086 Compare X0, 0
	087 JumpIfEqual {170}
	088 Move X1, X31
	089 Move V11, V0
	090 Move V12, V1
	091 Move V13, V2
	092 Move [X31+12], S10
	093 Move V10, V9
	094 Move V9, V8
	095 Call Component.get_transform, X0
	096 Compare X0, 0
	097 JumpIfEqual {170}
	098 Move X1, X31
	099 Call Transform.get_position, X0
	100 Move X21, 0x251C000
	101 Move W8, [X21+1089]
	102 Move V14, V0
	103 Move V15, V1
	104 Move V8, V2
	105 Compare W8, 0
	106 JumpIfNotEqual {112}
	107 Move X0, 0x2246000
	108 Move X0, [X0+1160]
	109 Call 0x1B6F7F0
	110 Move W8, 1
	111 Move [X21+1089], W8
	112 Move X0, [X20]
	113 Subtract S14, S11, S14
	114 Subtract S11, S12, S15
	115 Subtract S8, S13, S8
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1B6F8F8
	120 Multiply S0, S14, S14
	121 Multiply S1, S11, S11
	122 Move X8, -19259392
	123 Add S0, S0, S1
	124 Move V1, [X8+2916]
	125 Multiply S2, S8, S8
	126 Add S0, S2, S0
	127 NotImplemented "Instruction FSQRT not yet implemented."
	128 NotImplemented "Instruction FCMP not yet implemented."
	129 NotImplemented "Instruction FDIV not yet implemented."
	130 NotImplemented "Instruction FDIV not yet implemented."
	131 NotImplemented "Instruction FDIV not yet implemented."
	132 Move X20, 0x251C000
	133 Move W8, [X20+1087]
	134 Compare W8, 0
	135 JumpIfNotEqual {141}
	136 Move X0, 0x2246000
	137 Move X0, [X0+1152]
	138 Call 0x1B6F7F0
	139 Move W8, 1
	140 Move [X20+1087], W8
	141 Move X8, 0x2246000
	142 Move X8, [X8+1152]
	143 Move X8, [X8]
	144 Move X8, [X8+184]
	145 Move S0, [X8]
	146 Move S1, [X8+4]
	147 Move V2, [X8+8]
	148 Move V3, [X19+156]
	149 Move V4, [X31+12]
	150 Multiply S0, S0, S3
	151 Multiply S1, S1, S3
	152 Multiply S2, S2, S3
	153 Add S0, S9, S0
	154 Add S1, S10, S1
	155 Add S2, S4, S2
	156 Move X20, [X31+96]
	157 Move X19, [X31+104]
	158 Move X30, [X31+80]
	159 Move X21, [X31+88]
	160 Move D9, [X31+64]
	161 Move D8, [X31+72]
	162 Move D11, [X31+48]
	163 Move D10, [X31+56]
	164 Move D13, [X31+32]
	165 Move D12, [X31+40]
	166 Move D15, [X31+16]
	167 Move D14, [X31+24]
	168 Add X31, X31, 112
	169 Return X0
	170 Call 0x1B6FA1C

Method: UnityEngine.Vector3 PositionWithOffset(UnityEngine.Transform transformToModify, UnityEngine.Vector3 offsetVector)

Disassembly:
	0x01D07F94 LDR X0, [X0 + 0x488]
	0x01D07F98 BL 0x1B6E7F0
	0x01D07F9C MOVZ W8, 0x1
	0x01D07FA0 STRB W8, [X21 + 0x440]
	0x01D07FA4 LDR X0, [X22]
	0x01D07FA8 LDP S12, S11, [X19 + 0xD8]
	0x01D07FAC LDR V10, [X19 + 0xE0]
	0x01D07FB0 LDR W8, [X0 + 0xE0]
	0x01D07FB4 CBNZ W8, 0x1D07FBC
	0x01D07FB8 BL 0x1B6E8F8
	0x01D07FBC FMUL S1, S12, S12
	0x01D07FC0 FMUL S2, S11, S11
	0x01D07FC4 LDR V0, [X19 + 0xAC]
	0x01D07FC8 FMUL S3, S10, S10
	0x01D07FCC FADD S1, S1, S2
	0x01D07FD0 FADD S1, S1, S3
	0x01D07FD4 LDR X21, [X19 + 0x90]
	0x01D07FD8 FSQRT S1, S1
	0x01D07FDC FMUL S1, S1, S0
	0x01D07FE0 FCMP S1, S9
	0x01D07FE4 B.LE 0x1D081E0
	0x01D07FE8 MOV X26, X23
	0x01D07FEC ADRP X23, 0x251C000
	0x01D07FF0 LDP S10, S11, [X19 + 0xD8]
	0x01D07FF4 LDRB W8, [X23 + 0x441]
	0x01D07FF8 LDR V12, [X19 + 0xE0]
	0x01D07FFC CBNZ W8, 0x1D08014
	0x01D08000 ADRP X0, 0x2245000
	0x01D08004 LDR X0, [X0 + 0x488]
	0x01D08008 BL 0x1B6E7F0
	0x01D0800C MOVZ W8, 0x1
	0x01D08010 STRB W8, [X23 + 0x441]

ISIL:
	001 Move [X31-64], D13
	002 Move [X31-56], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X19
	009 Compare X1, 0
	010 JumpIfEqual {41}
	011 Move X19, X1
	012 Move X0, X1
	013 Move X1, X31
	014 Move V8, V2
	015 Move V9, V1
	016 Move V10, V0
	017 Call Transform.get_position, X0
	018 Move X0, X19
	019 Move X1, X31
	020 Move V11, V0
	021 Move V12, V1
	022 Move V13, V2
	023 Call Transform.get_rotation, X0
	024 Move V4, V10
	025 Move V5, V9
	026 Move V6, V8
	027 Move X0, X31
	028 Call Quaternion.op_Multiply, X0, X1
	029 Add S0, S11, S0
	030 Move X30, [X31+48]
	031 Move X19, [X31+56]
	032 Move D9, [X31+32]
	033 Move D8, [X31+40]
	034 Move D11, [X31+16]
	035 Move D10, [X31+24]
	036 Add S1, S12, S1
	037 Add S2, S13, S2
	038 Move D13, [X31+64]
	039 Move D12, [X31+72]
	040 Return X0
	041 Call 0x1B6FA1C

Method: System.Void AddExternalForceVelocity(UnityEngine.Vector3 velocity)

Disassembly:
	0x01D08260 BL 0x1B6E7F0
	0x01D08264 MOVZ W8, 0x1
	0x01D08268 STRB W8, [X23 + 0x43F]
	0x01D0826C LDR X8, [X20]
	0x01D08270 LDR X8, [X8 + 0xB8]
	0x01D08274 LDR V0, [X8]
	0x01D08278 LDUR V1, [X8 + 0x4]
	0x01D0827C FSUB S0, S9, S0

ISIL:
	001 Move V3, [X0+448]
	002 Move V4, [X0+456]
	003 Move V0.S[1], V1.S[0]
	004 Add V0, V0, V3
	005 Add S1, S2, S4
	006 Move [X0+448], D0
	007 Move [X0+456], S1
	008 Return 

Method: System.Void AddItemContactPoint(UnityEngine.Vector3 position, UnityEngine.Vector3 prevPosition)

Disassembly:
	0x01D08280 FSUB V1.2S, V10.2S, V1.2S
	0x01D08284 FMUL S0, S0, S0
	0x00000000 INVALID
	0x01D0828C FADD S0, S0, S1
	0x01D08290 MOV S1, V1.S[1]
	0x01D08294 FADD S0, S1, S0
	0x01D08298 FCMP S0, S8
	0x01D0829C B.MI 0x1D0830C
	0x01D082A0 LDR X21, [X19 + 0x90]
	0x01D082A4 CBZ X21, 0x1D087D8
	0x01D082A8 MOV X0, X21
	0x01D082AC MOV X1, X31
	0x01D082B0 BL 0x3AF646C
	0x01D082B4 LDR V3, [X19 + 0x1C0]
	0x01D082B8 LDR V4, [X19 + 0x1C4]
	0x01D082BC LDR V5, [X19 + 0x1C8]
	0x01D082C0 MOV X0, X21
	0x01D082C4 FADD S0, S0, S3
	0x01D082C8 FADD S1, S1, S4
	0x01D082CC FADD S2, S2, S5
	0x01D082D0 MOV X1, X31
	0x01D082D4 BL 0x3AF650C
	0x01D082D8 LDRB W8, [X23 + 0x43F]
	0x01D082DC CBNZ W8, 0x1D082F4
	0x01D082E0 ADRP X0, 0x2245000
	0x01D082E4 LDR X0, [X0 + 0x480]
	0x01D082E8 BL 0x1B6E7F0
	0x01D082EC MOVZ W8, 0x1
	0x01D082F0 STRB W8, [X23 + 0x43F]
	0x01D082F4 LDR X8, [X20]
	0x01D082F8 LDR X8, [X8 + 0xB8]
	0x01D082FC LDR V0, [X8]
	0x01D08300 LDR V1, [X8 + 0x8]
	0x01D08304 STR D0, [X19 + 0x1C0]
	0x01D08308 STR S1, [X19 + 0x1C8]
	0x01D0830C CBZ W29, 0x1D08524
	0x01D08310 MOV X0, X19
	0x01D08314 BL 0x1D06D3C
	0x01D08318 ADRP X20, 0x251B000
	0x01D0831C LDP S11, S12, [X19 + 0x68]
	0x01D08320 LDRB W8, [X20 + 0x440]
	0x01D08324 LDR V13, [X19 + 0x70]
	0x01D08328 MOV V8.16B, V0.16B
	0x01D0832C MOV V9.16B, V1.16B
	0x01D08330 MOV V10.16B, V2.16B
	0x01D08334 CBNZ W8, 0x1D0834C
	0x01D08338 ADRP X0, 0x2245000
	0x01D0833C LDR X0, [X0 + 0x488]
	0x01D08340 BL 0x1B6E7F0
	0x01D08344 MOVZ W8, 0x1
	0x01D08348 STRB W8, [X20 + 0x440]
	0x01D0834C ADRP X21, 0x2245000
	0x01D08350 LDR X21, [X21 + 0x488]
	0x01D08354 FSUB S11, S8, S11
	0x01D08358 FSUB S9, S9, S12
	0x01D0835C FSUB S8, S10, S13
	0x01D08360 LDR X0, [X21]
	0x01D08364 LDR W8, [X0 + 0xE0]
	0x01D08368 CBNZ W8, 0x1D08370

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], D13
	003 Move [X31+40], D12
	004 Move [X31+48], D11
	005 Move [X31+56], D10
	006 Move [X31+64], D9
	007 Move [X31+72], D8
	008 Move [X31+80], X30
	009 Move [X31+96], X20
	010 Move [X31+104], X19
	011 Move X20, 0x251C000
	012 Move W8, [X20+1878]
	013 Move V8, V5
	014 Move V9, V4
	015 Move V10, V3
	016 Move V11, V2
	017 Move V12, V1
	018 Move V13, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x224A000
	025 Move X0, [X0+336]
	026 Call 0x1B6F7F0
	027 Move W8, 1
	028 Move [X20+1878], W8
	029 Move X0, [X19+464]
	030 Compare X0, 0
	031 JumpIfEqual {76}
	032 Move X9, 0x224A000
	033 Move X9, [X9+336]
	034 Move W10, [X0+28]
	035 Move X8, [X0+16]
	036 Move X9, [X9]
	037 Add W10, W10, 1
	038 Move [X0+28], W10
	039 Compare X8, 0
	040 JumpIfEqual {76}
	041 NotImplemented "Instruction LDRSW not yet implemented."
	042 Move W11, [X8+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move W11, 24
	045 Add W9, W10, 1
	046 NotImplemented "Instruction MADD not yet implemented."
	047 Move [X0+24], W9
	048 Move [X8+32], S13
	049 Move [X8+40], S12
	050 Move [X8+40], S11
	051 Move [X8+48], S10
	052 Move [X8+48], S9
	053 Move [X8+56], S8
	054 Move X8, [X9+32]
	055 Add X1, X31, 8
	056 Move X8, [X8+192]
	057 Move X2, [X8+112]
	058 Move [X31+8], S13
	059 Move [X31+16], S12
	060 Move [X31+16], S11
	061 Move [X31+24], S10
	062 Move [X31+24], S9
	063 Move [X31+32], S8
	064 Call List`1<ItemContactPoint>.AddWithResize, X0, X1
	065 Move X20, [X31+96]
	066 Move X19, [X31+104]
	067 Move X30, [X31+80]
	068 Move D9, [X31+64]
	069 Move D8, [X31+72]
	070 Move D11, [X31+48]
	071 Move D10, [X31+56]
	072 Move D13, [X31+32]
	073 Move D12, [X31+40]
	074 Add X31, X31, 112
	075 Return 
	076 Call 0x1B6FA1C

Method: System.Void SetItemWeight(System.Single weight)

Disassembly:
	0x01D0836C BL 0x1B6E8F8
	0x01D08370 FMUL S0, S11, S11

ISIL:
	001 Move [X0+472], S0
	002 Return 

Method: System.Void Update()

Disassembly:
	0x01D08374 FMUL S1, S9, S9
	0x01D08378 LDR V2, [X19 + 0xA0]
	0x01D0837C FADD S0, S0, S1
	0x01D08380 FMUL S1, S8, S8
	0x01D08384 FADD S0, S0, S1
	0x01D08388 FSQRT S0, S0
	0x01D0838C FCMP S0, S2
	0x01D08390 B.LE 0x1D08518
	0x01D08394 LDR X0, [X19 + 0x28]
	0x01D08398 CBZ X0, 0x1D087D8
	0x01D0839C MOV X1, X31
	0x01D083A0 BL 0x3A9B084
	0x01D083A4 CBZ X0, 0x1D087D8
	0x01D083A8 MOV X1, X31
	0x01D083AC BL 0x3AA7658
	0x01D083B0 LDR V14, [X19 + 0xB0]
	0x01D083B4 LDR V9, [X19 + 0xB8]
	0x01D083B8 MOV X0, X19
	0x01D083BC MOV V8.16B, V0.16B
	0x01D083C0 MOV V12.16B, V1.16B
	0x01D083C4 MOV V13.16B, V2.16B
	0x01D083C8 BL 0x1D06D3C
	0x01D083CC LDR X0, [X19 + 0x28]
	0x01D083D0 CBZ X0, 0x1D087D8
	0x01D083D4 MOV X1, X31
	0x01D083D8 STR S2, [X31 + 0x30]
	0x01D083DC STR S1, [X31 + 0x40]
	0x01D083E0 STR S0, [X31 + 0x50]
	0x01D083E4 STR S9, [X31 + 0x60]
	0x01D083E8 BL 0x3A9B084
	0x01D083EC CBZ X0, 0x1D087D8
	0x01D083F0 MOV X1, X31
	0x01D083F4 BL 0x3AA7658
	0x01D083F8 MOV X0, X19
	0x01D083FC STP S2, S0, [X31 + 0x28]
	0x01D08400 MOV V15.16B, V1.16B
	0x01D08404 BL 0x1D06D3C
	0x01D08408 LDR X0, [X19 + 0x28]
	0x01D0840C CBZ X0, 0x1D087D8
	0x01D08410 MOV X1, X31
	0x01D08414 MOV V9.16B, V0.16B
	0x01D08418 MOV V10.16B, V1.16B
	0x01D0841C MOV V11.16B, V2.16B
	0x01D08420 BL 0x3A9B084
	0x01D08424 CBZ X0, 0x1D087D8
	0x01D08428 MOV X1, X31
	0x01D0842C STP S14, S13, [X31 + 0x18]
	0x01D08430 STP S12, S8, [X31 + 0x20]
	0x01D08434 BL 0x3AA7658
	0x01D08438 LDRB W8, [X20 + 0x440]
	0x01D0843C MOV V12.16B, V0.16B
	0x01D08440 MOV V13.16B, V1.16B
	0x01D08444 MOV V8.16B, V2.16B
	0x01D08448 CBNZ W8, 0x1D08460
	0x01D0844C ADRP X0, 0x2245000
	0x01D08450 LDR X0, [X0 + 0x488]
	0x01D08454 BL 0x1B6E7F0
	0x01D08458 MOVZ W8, 0x1
	0x01D0845C STRB W8, [X20 + 0x440]
	0x01D08460 LDR X0, [X21]
	0x01D08464 FSUB S14, S9, S12
	0x01D08468 FSUB S10, S10, S13
	0x01D0846C FSUB S9, S11, S8
	0x01D08470 LDR W8, [X0 + 0xE0]
	0x01D08474 CBNZ W8, 0x1D0847C
	0x01D08478 BL 0x1B6E8F8
	0x01D0847C LDR V0, [X31 + 0x50]
	0x01D08480 LDR V1, [X31 + 0x2C]
	0x01D08484 FMUL S2, S9, S9
	0x01D08488 LDR V9, [X19 + 0xB0]
	0x01D0848C ADD X0, X19, 0x10C
	0x01D08490 FSUB S11, S0, S1
	0x01D08494 LDR V0, [X31 + 0x40]
	0x01D08498 LDR V1, [X31 + 0x28]
	0x01D0849C MOV X1, X31
	0x01D084A0 FSUB S12, S0, S15
	0x01D084A4 LDR V0, [X31 + 0x30]
	0x01D084A8 FSUB S8, S0, S1

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, X0
	011 Move X0, X31
	012 Call Time.get_deltaTime
	013 Move X0, X19
	014 Call Player.DoUpdate, X0, V0
	015 Move X0, [X19+144]
	016 Compare X0, 0
	017 JumpIfEqual {88}
	018 Move V12, [X19+288]
	019 Move V13, [X19+292]
	020 Move X1, X31
	021 Call Rigidbody.get_velocity, X0
	022 Move X20, 0x251C000
	023 Move W8, [X20+1088]
	024 Move V8, V0
	025 Move V9, V1
	026 Move V10, V2
	027 Compare W8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, 0x2246000
	030 Move X0, [X0+1160]
	031 Call 0x1B6F7F0
	032 Move W8, 1
	033 Move [X20+1088], W8
	034 Move X8, 0x2246000
	035 Move X8, [X8+1160]
	036 Move X0, [X8]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1B6F8F8
	041 NotImplemented "Instruction FCMP not yet implemented."
	042 Move S11, W31
	043 Multiply S0, S8, S8
	044 Multiply S1, S9, S9
	045 Multiply S2, S10, S10
	046 Add S0, S0, S1
	047 Add S0, S2, S0
	048 NotImplemented "Instruction FSQRT not yet implemented."
	049 Subtract S0, S0, S12
	050 Subtract S1, S13, S12
	051 NotImplemented "Instruction FDIV not yet implemented."
	052 NotImplemented "Instruction FCMP not yet implemented."
	053 Move S11, 1
	054 NotImplemented "Instruction FCMP not yet implemented."
	055 Move V11, V0
	056 Move X19, [X19+280]
	057 Compare X19, 0
	058 JumpIfEqual {88}
	059 Move X0, X19
	060 Move X1, X31
	061 Call AudioSource.get_volume, X0
	062 Move X0, X31
	063 Move V8, V0
	064 Call Time.get_deltaTime
	065 Move S1, 7
	066 Move S2, 1
	067 Multiply S0, S0, S1
	068 Move S3, W31
	069 NotImplemented "Instruction FMIN not yet implemented."
	070 NotImplemented "Instruction FCMP not yet implemented."
	071 NotImplemented "Instruction FCSEL not yet implemented."
	072 Subtract S1, S11, S8
	073 Multiply S0, S1, S0
	074 Add S0, S8, S0
	075 Move X0, X19
	076 Move X20, [X31+64]
	077 Move X19, [X31+72]
	078 Move X30, [X31+48]
	079 Move D9, [X31+32]
	080 Move D8, [X31+40]
	081 Move D11, [X31+16]
	082 Move D10, [X31+24]
	083 Move X1, X31
	084 Move D13, [X31+80]
	085 Move D12, [X31+88]
	086 Call AudioSource.set_volume, X0, V0
	087 Return 
	088 Call 0x1B6FA1C

Method: System.Single ClampMaxSpeed(System.Single baseMaxSpeed, System.Single mass, System.Single massThreshold, System.Single massFactor)

Disassembly:
	0x01D098AC BL 0x3AA76F8
	0x01D098B0 LDR X0, [X19 + 0x48]
	0x01D098B4 CBZ X0, 0x1D099DC
	0x01D098B8 MOV V0.16B, V10.16B
	0x01D098BC MOV V1.16B, V9.16B
	0x01D098C0 MOV V2.16B, V8.16B
	0x01D098C4 MOV X1, X31
	0x01D098C8 BL 0x3AA76F8

ISIL:
	001 NotImplemented "Instruction FCMP not yet implemented."
	002 Subtract S1, S1, S2
	003 NotImplemented "Instruction FDIV not yet implemented."
	004 Move S2, 1
	005 Add S1, S1, S2
	006 NotImplemented "Instruction FDIV not yet implemented."
	007 Return V0

Method: System.Boolean CalculateClampedVelocity(ref UnityEngine.Vector3 velocity, System.Single mass, System.Single baseMaxSpeed, System.Single massThreshold, System.Single massFactor)

Disassembly:
	0x01D098CC LDR X0, [X19 + 0x38]
	0x01D098D0 CBZ X0, 0x1D099DC
	0x01D098D4 MOV V0.16B, V10.16B
	0x01D098D8 MOV V1.16B, V9.16B
	0x01D098DC MOV V2.16B, V8.16B
	0x01D098E0 MOV X1, X31
	0x01D098E4 BL 0x3AA76F8
	0x01D098E8 LDR X0, [X19 + 0x40]
	0x01D098EC CBZ X0, 0x1D099DC
	0x01D098F0 ADRP X20, 0x2246000
	0x01D098F4 LDR X20, [X20 + 0x2D0]
	0x01D098F8 MOV V0.16B, V10.16B
	0x01D098FC MOV V1.16B, V9.16B
	0x01D09900 MOV V2.16B, V8.16B
	0x01D09904 MOV X1, X31
	0x01D09908 BL 0x3AA76F8
	0x01D0990C STP S10, S9, [X19 + 0x68]
	0x01D09910 STP S8, S10, [X19 + 0x70]
	0x01D09914 STP S9, S8, [X19 + 0x78]
	0x01D09918 STP S10, S9, [X19 + 0x80]
	0x01D0991C STR S8, [X19 + 0x88]
	0x01D09920 STP S10, S9, [X19 + 0xE8]
	0x01D09924 STR S8, [X19 + 0xF0]
	0x01D09928 STRH W31, [X19 + 0x110]
	0x01D0992C LDR W1, [X19 + 0x98]
	0x01D09930 LDR X0, [X20]
	0x01D09934 BL 0x1B6E868
	0x01D09938 STR X0, [X19 + 0xC0]
	0x01D0993C STR W31, [X19 + 0xC8]
	0x01D09940 ADRP X20, 0x251A000
	0x01D09944 LDRB W8, [X20 + 0x43F]
	0x01D09948 CBNZ W8, 0x1D09960
	0x01D0994C ADRP X0, 0x2244000
	0x01D09950 LDR X0, [X0 + 0x480]
	0x01D09954 BL 0x1B6E7F0
	0x01D09958 MOVZ W8, 0x1
	0x01D0995C STRB W8, [X20 + 0x43F]
	0x01D09960 ADRP X8, 0x2244000
	0x01D09964 LDR X8, [X8 + 0x480]
	0x01D09968 LDR X0, [X19 + 0x90]
	0x01D0996C LDR X8, [X8]
	0x01D09970 LDR X9, [X8 + 0xB8]
	0x01D09974 LDR V0, [X9]
	0x01D09978 LDR V1, [X9 + 0x8]
	0x01D0997C STUR D0, [X19 + 0xCC]
	0x01D09980 STR S1, [X19 + 0xD4]
	0x01D09984 LDR X9, [X8 + 0xB8]
	0x01D09988 LDR V0, [X9]
	0x01D0998C LDR V1, [X9 + 0x8]
	0x01D09990 STR D0, [X19 + 0xD8]
	0x01D09994 STR S1, [X19 + 0xE0]
	0x01D09998 CBZ X0, 0x1D099DC
	0x01D0999C LDR X8, [X8 + 0xB8]
	0x01D099A0 MOV X1, X31
	0x01D099A4 LDP S1, S2, [X8 + 0x4]
	0x01D099A8 LDR V0, [X8]
	0x01D099AC BL 0x3AF650C
	0x01D099B0 LDR X0, [X19 + 0x90]
	0x01D099B4 CBZ X0, 0x1D099DC
	0x01D099B8 MOV V1.16B, V9.16B
	0x01D099BC MOV V2.16B, V8.16B
	0x01D099C0 LDP X20, X19, [X31 + 0x20]
	0x01D099C4 LDR X30, [X31 + 0x18]
	0x01D099C8 LDP D9, D8, [X31 + 0x8]
	0x01D099CC MOV V0.16B, V10.16B
	0x01D099D0 MOV X1, X31
	0x01D099D4 LDR V10, [X31], #0x30
	0x01D099D8 B 0x3AF6C18
	0x01D099DC BL 0x1B6EA1C
	0x01D099E0 SUB X31, X31, 0x80
	0x01D099E4 STR D14, [X31 + 0x10]
	0x01D099E8 STP D13, D12, [X31 + 0x20]
	0x01D099EC STP D11, D10, [X31 + 0x30]
	0x01D099F0 STP D9, D8, [X31 + 0x40]
	0x01D099F4 STP X30, X23, [X31 + 0x50]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 Move X19, X0
	011 Subtract S0, S0, S2
	012 NotImplemented "Instruction FDIV not yet implemented."
	013 Move S2, 1
	014 Add S0, S0, S2
	015 NotImplemented "Instruction FDIV not yet implemented."
	016 Move V10, [X19]
	017 Move V11, [X19+8]
	018 Multiply S9, S1, S1
	019 NotImplemented "Instruction INVALID not yet implemented."
	020 Multiply S2, S11, S11
	021 NotImplemented "Instruction FADDP not yet implemented."
	022 Add S8, S0, S2
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 Move X20, 0x251B000
	025 Move W8, [X20+1089]
	026 Move [X31], V1
	027 Compare W8, 0
	028 JumpIfNotEqual {35}
	029 Move X0, 0x2245000
	030 Move X0, [X0+1160]
	031 Call 0x1B6F7F0
	032 Move V1, [X31]
	033 Move W8, 1
	034 Move [X20+1089], W8
	035 Move X8, 0x2245000
	036 Move X8, [X8+1160]
	037 Move X0, [X8]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1B6F8F8
	042 Move V1, [X31]
	043 Move X8, -19263488
	044 Move V0, [X8+2916]
	045 NotImplemented "Instruction FSQRT not yet implemented."
	046 NotImplemented "Instruction FCMP not yet implemented."
	047 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	048 NotImplemented "Instruction INVALID not yet implemented."
	049 NotImplemented "Instruction FDIV not yet implemented."
	050 Move X20, 0x251B000
	051 Move W8, [X20+1087]
	052 Compare W8, 0
	053 JumpIfNotEqual {60}
	054 Move X0, 0x2245000
	055 Move X0, [X0+1152]
	056 Call 0x1B6F7F0
	057 Move V1, [X31]
	058 Move W8, 1
	059 Move [X20+1087], W8
	060 Move X8, 0x2245000
	061 Move X8, [X8+1152]
	062 Move X8, [X8]
	063 Move X8, [X8+184]
	064 Move V0, [X8]
	065 Move V2, [X8+8]
	066 NotImplemented "Instruction INVALID not yet implemented."
	067 Multiply S1, S1, S2
	068 Move [X19], D0
	069 Move [X19+8], S1
	070 NotImplemented "Instruction FCMP not yet implemented."
	071 Move X20, [X31+64]
	072 Move X19, [X31+72]
	073 Move X30, [X31+48]
	074 Move D9, [X31+32]
	075 Move D8, [X31+40]
	076 Move D11, [X31+16]
	077 Move D10, [X31+24]
	078 NotImplemented "Instruction CSET not yet implemented."
	079 Add X31, X31, 80
	080 Return X0

Method: System.Boolean CalculateClampedMovement(ref UnityEngine.Vector3 movement, System.Single mass, System.Single dt)

Disassembly:
	0x01D099F8 STP X22, X21, [X31 + 0x60]
	0x01D099FC STP X20, X19, [X31 + 0x70]
	0x01D09A00 MOV X19, X0
	0x01D09A04 LDR X0, [X0 + 0x28]
	0x01D09A08 CBZ X0, 0x1D09CC0
	0x01D09A0C MOV X1, X31
	0x01D09A10 MOV V8.16B, V2.16B
	0x01D09A14 MOV V9.16B, V1.16B
	0x01D09A18 MOV V13.16B, V0.16B
	0x01D09A1C BL 0x3A9B084
	0x01D09A20 CBZ X0, 0x1D09CC0
	0x01D09A24 MOV X1, X31
	0x01D09A28 BL 0x3AA7AD0
	0x01D09A2C MOV X0, X31
	0x01D09A30 BL 0x1CC086C
	0x01D09A34 ADRP X20, 0x251A000
	0x01D09A38 LDRB W8, [X20 + 0x441]
	0x01D09A3C MOV V10.16B, V0.16B
	0x01D09A40 MOV V11.16B, V1.16B
	0x01D09A44 MOV V12.16B, V2.16B
	0x01D09A48 CBNZ W8, 0x1D09A60
	0x01D09A4C ADRP X0, 0x2244000
	0x01D09A50 LDR X0, [X0 + 0x488]
	0x01D09A54 BL 0x1B6E7F0
	0x01D09A58 MOVZ W8, 0x1
	0x01D09A5C STRB W8, [X20 + 0x441]
	0x01D09A60 ADRP X23, 0x2244000
	0x01D09A64 LDR X23, [X23 + 0x488]
	0x01D09A68 LDR X0, [X23]
	0x01D09A6C LDR W8, [X0 + 0xE0]
	0x01D09A70 CBNZ W8, 0x1D09A78
	0x01D09A74 BL 0x1B6E8F8
	0x01D09A78 ADRP X8, 0xFFFFFFFFFEDA0000
	0x01D09A7C FMUL S0, S10, S10
	0x01D09A80 FMUL S1, S11, S11
	0x01D09A84 LDR V14, [X8 + 0xB64]
	0x01D09A88 ADRP X21, 0x2244000
	0x01D09A8C FMUL S2, S12, S12
	0x01D09A90 FADD S0, S0, S1
	0x01D09A94 LDR X21, [X21 + 0x480]
	0x01D09A98 FADD S0, S2, S0
	0x01D09A9C FSQRT S0, S0
	0x01D09AA0 FCMP S0, S14
	0x01D09AA4 ADRP X22, 0x251A000
	0x01D09AA8 B.LE 0x1D09ABC
	0x01D09AAC FDIV S10, S10, S0
	0x01D09AB0 FDIV S11, S11, S0
	0x01D09AB4 FDIV S12, S12, S0
	0x01D09AB8 B 0x1D09AE8
	0x01D09ABC LDRB W8, [X22 + 0x43F]
	0x01D09AC0 CBNZ W8, 0x1D09AD8
	0x01D09AC4 ADRP X0, 0x2244000
	0x01D09AC8 LDR X0, [X0 + 0x480]
	0x01D09ACC BL 0x1B6E7F0
	0x01D09AD0 MOVZ W8, 0x1
	0x01D09AD4 STRB W8, [X22 + 0x43F]
	0x01D09AD8 LDR X8, [X21]
	0x01D09ADC LDR X8, [X8 + 0xB8]
	0x01D09AE0 LDP S10, S11, [X8]
	0x01D09AE4 LDR V12, [X8 + 0x8]
	0x01D09AE8 MOV V0.16B, V13.16B
	0x01D09AEC MOV V1.16B, V9.16B
	0x01D09AF0 MOV V2.16B, V8.16B
	0x01D09AF4 MOV X0, X31
	0x01D09AF8 BL 0x1CC086C
	0x01D09AFC LDRB W8, [X20 + 0x441]
	0x01D09B00 MOV V8.16B, V0.16B
	0x01D09B04 MOV V9.16B, V1.16B
	0x01D09B08 MOV V13.16B, V2.16B
	0x01D09B0C CBNZ W8, 0x1D09B24
	0x01D09B10 ADRP X0, 0x2244000
	0x01D09B14 LDR X0, [X0 + 0x488]
	0x01D09B18 BL 0x1B6E7F0
	0x01D09B1C MOVZ W8, 0x1
	0x01D09B20 STRB W8, [X20 + 0x441]
	0x01D09B24 LDR X0, [X23]
	0x01D09B28 LDR W8, [X0 + 0xE0]
	0x01D09B2C CBNZ W8, 0x1D09B34
	0x01D09B30 BL 0x1B6E8F8
	0x01D09B34 FMUL S0, S8, S8
	0x01D09B38 FMUL S1, S9, S9

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move S2, 20
	010 Move X19, X0
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 Move S2, 8
	013 Move S2, -20
	014 Move S3, 10
	015 Add S0, S0, S2
	016 Move S4, 1
	017 NotImplemented "Instruction FDIV not yet implemented."
	018 Add S0, S0, S4
	019 Move S2, 8
	020 NotImplemented "Instruction FDIV not yet implemented."
	021 Move V10, [X19]
	022 Move V11, [X19+8]
	023 Multiply S2, S2, S1
	024 Multiply S9, S2, S2
	025 NotImplemented "Instruction INVALID not yet implemented."
	026 Multiply S1, S11, S11
	027 NotImplemented "Instruction FADDP not yet implemented."
	028 Add S8, S0, S1
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 Move X20, 0x251B000
	031 Move W8, [X20+1089]
	032 Move [X31], V2
	033 Compare W8, 0
	034 JumpIfNotEqual {41}
	035 Move X0, 0x2245000
	036 Move X0, [X0+1160]
	037 Call 0x1B6F7F0
	038 Move V2, [X31]
	039 Move W8, 1
	040 Move [X20+1089], W8
	041 Move X8, 0x2245000
	042 Move X8, [X8+1160]
	043 Move X0, [X8]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {49}
	047 Call 0x1B6F8F8
	048 Move V2, [X31]
	049 Move X8, -19263488
	050 Move V0, [X8+2916]
	051 NotImplemented "Instruction FSQRT not yet implemented."
	052 NotImplemented "Instruction FCMP not yet implemented."
	053 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	054 NotImplemented "Instruction INVALID not yet implemented."
	055 NotImplemented "Instruction FDIV not yet implemented."
	056 Move X20, 0x251B000
	057 Move W8, [X20+1087]
	058 Compare W8, 0
	059 JumpIfNotEqual {66}
	060 Move X0, 0x2245000
	061 Move X0, [X0+1152]
	062 Call 0x1B6F7F0
	063 Move V2, [X31]
	064 Move W8, 1
	065 Move [X20+1087], W8
	066 Move X8, 0x2245000
	067 Move X8, [X8+1152]
	068 Move X8, [X8]
	069 Move X8, [X8+184]
	070 Move V0, [X8]
	071 Move V1, [X8+8]
	072 NotImplemented "Instruction INVALID not yet implemented."
	073 Multiply S1, S2, S1
	074 Move [X19], D0
	075 Move [X19+8], S1
	076 NotImplemented "Instruction FCMP not yet implemented."
	077 Move X20, [X31+64]
	078 Move X19, [X31+72]
	079 Move X30, [X31+48]
	080 Move D9, [X31+32]
	081 Move D8, [X31+40]
	082 Move D11, [X31+16]
	083 Move D10, [X31+24]
	084 NotImplemented "Instruction CSET not yet implemented."
	085 Add X31, X31, 80
	086 Return X0

Method: System.Void DoUpdate(System.Single dt)

Disassembly:
	0x01D084AC FMUL S0, S14, S14
	0x01D084B0 FMUL S1, S10, S10
	0x01D084B4 FADD S0, S0, S1
	0x01D084B8 FADD S0, S2, S0
	0x01D084BC FSQRT S10, S0
	0x01D084C0 BL 0x3A9DE74
	0x01D084C4 ADRP X8, 0x2245000
	0x01D084C8 LDR X8, [X8 + 0x4C0]
	0x01D084CC MOV W20, W0
	0x01D084D0 LDR X8, [X8]
	0x01D084D4 LDR W9, [X8 + 0xE0]
	0x01D084D8 CBNZ W9, 0x1D084E4
	0x01D084DC MOV X0, X8
	0x01D084E0 BL 0x1B6E8F8
	0x01D084E4 LDP S0, S2, [X31 + 0x18]
	0x01D084E8 LDR V1, [X31 + 0x60]
	0x01D084EC FSUB S7, S10, S9
	0x01D084F0 ADD X0, X31, 0xA0
	0x01D084F4 MOV V4.16B, V11.16B
	0x01D084F8 FMUL S3, S0, S1
	0x01D084FC LDP S1, S0, [X31 + 0x20]
	0x01D08500 MOV V5.16B, V12.16B
	0x01D08504 MOV V6.16B, V8.16B
	0x01D08508 MOV W1, W20
	0x01D0850C MOV X2, X31
	0x01D08510 BL 0x3AF3A7C
	0x01D08514 TBZ X0, 0x0, 0x1D0873C
	0x01D08518 MOVZ W21, 0x1
	0x01D0851C CBNZ W24, 0x1D0852C
	0x01D08520 B 0x1D08754
	0x01D08524 MOV W21, W31
	0x01D08528 CBZ W24, 0x1D08754
	0x01D0852C MOV X0, X19
	0x01D08530 BL 0x1D07014
	0x01D08534 ADRP X20, 0x251B000
	0x01D08538 LDP S11, S12, [X19 + 0x74]
	0x01D0853C LDRB W8, [X20 + 0x440]
	0x01D08540 LDR V13, [X19 + 0x7C]
	0x01D08544 MOV V8.16B, V0.16B
	0x01D08548 MOV V9.16B, V1.16B
	0x01D0854C MOV V10.16B, V2.16B
	0x01D08550 CBNZ W8, 0x1D08568
	0x01D08554 ADRP X0, 0x2245000
	0x01D08558 LDR X0, [X0 + 0x488]
	0x01D0855C BL 0x1B6E7F0
	0x01D08560 MOVZ W8, 0x1
	0x01D08564 STRB W8, [X20 + 0x440]
	0x01D08568 ADRP X22, 0x2245000
	0x01D0856C LDR X22, [X22 + 0x488]
	0x01D08570 FSUB S11, S8, S11
	0x01D08574 FSUB S9, S9, S12
	0x01D08578 FSUB S8, S10, S13
	0x01D0857C LDR X0, [X22]
	0x01D08580 LDR W8, [X0 + 0xE0]
	0x01D08584 CBNZ W8, 0x1D0858C
	0x01D08588 BL 0x1B6E8F8
	0x01D0858C FMUL S0, S11, S11
	0x01D08590 FMUL S1, S9, S9
	0x01D08594 LDR V2, [X19 + 0xA0]
	0x01D08598 FADD S0, S0, S1
	0x01D0859C FMUL S1, S8, S8
	0x01D085A0 FADD S0, S0, S1
	0x01D085A4 FSQRT S0, S0
	0x01D085A8 FCMP S0, S2
	0x01D085AC B.LE 0x1D08734
	0x01D085B0 LDR X0, [X19 + 0x28]
	0x01D085B4 CBZ X0, 0x1D087D8
	0x01D085B8 MOV X1, X31
	0x01D085BC BL 0x3A9B084
	0x01D085C0 CBZ X0, 0x1D087D8
	0x01D085C4 MOV X1, X31
	0x01D085C8 BL 0x3AA7658
	0x01D085CC LDR V14, [X19 + 0xB0]
	0x01D085D0 LDR V9, [X19 + 0xB8]
	0x01D085D4 MOV X0, X19
	0x01D085D8 MOV V8.16B, V0.16B
	0x01D085DC MOV V12.16B, V1.16B
	0x01D085E0 MOV V13.16B, V2.16B
	0x01D085E4 BL 0x1D07014
	0x01D085E8 LDR X0, [X19 + 0x28]
	0x01D085EC CBZ X0, 0x1D087D8
	0x01D085F0 MOV X1, X31
	0x01D085F4 STR S2, [X31 + 0x30]
	0x01D085F8 STR S1, [X31 + 0x40]
	0x01D085FC STR S0, [X31 + 0x50]
	0x01D08600 STR S9, [X31 + 0x60]
	0x01D08604 BL 0x3A9B084
	0x01D08608 CBZ X0, 0x1D087D8
	0x01D0860C MOV X1, X31
	0x01D08610 BL 0x3AA7658
	0x01D08614 MOV X0, X19
	0x01D08618 STP S2, S0, [X31 + 0x28]
	0x01D0861C MOV V15.16B, V1.16B
	0x01D08620 BL 0x1D07014
	0x01D08624 LDR X0, [X19 + 0x28]
	0x01D08628 CBZ X0, 0x1D087D8
	0x01D0862C MOV X1, X31
	0x01D08630 MOV V9.16B, V0.16B
	0x01D08634 MOV V10.16B, V1.16B
	0x01D08638 MOV V11.16B, V2.16B
	0x01D0863C BL 0x3A9B084
	0x01D08640 CBZ X0, 0x1D087D8
	0x01D08644 MOV X1, X31
	0x01D08648 STP S14, S13, [X31 + 0x18]
	0x01D0864C STP S12, S8, [X31 + 0x20]
	0x01D08650 BL 0x3AA7658
	0x01D08654 LDRB W8, [X20 + 0x440]
	0x01D08658 MOV V12.16B, V0.16B
	0x01D0865C MOV V13.16B, V1.16B
	0x01D08660 MOV V8.16B, V2.16B
	0x01D08664 CBNZ W8, 0x1D0867C
	0x01D08668 ADRP X0, 0x2245000
	0x01D0866C LDR X0, [X0 + 0x488]
	0x01D08670 BL 0x1B6E7F0
	0x01D08674 MOVZ W8, 0x1
	0x01D08678 STRB W8, [X20 + 0x440]
	0x01D0867C LDR X0, [X22]
	0x01D08680 FSUB S14, S9, S12
	0x01D08684 FSUB S10, S10, S13
	0x01D08688 FSUB S9, S11, S8
	0x01D0868C LDR W8, [X0 + 0xE0]
	0x01D08690 CBNZ W8, 0x1D08698
	0x01D08694 BL 0x1B6E8F8
	0x01D08698 LDR V0, [X31 + 0x50]
	0x01D0869C LDR V1, [X31 + 0x2C]
	0x01D086A0 FMUL S2, S9, S9
	0x01D086A4 LDR V9, [X19 + 0xB0]
	0x01D086A8 ADD X0, X19, 0x10C
	0x01D086AC FSUB S11, S0, S1
	0x01D086B0 LDR V0, [X31 + 0x40]
	0x01D086B4 LDR V1, [X31 + 0x28]
	0x01D086B8 MOV X1, X31
	0x01D086BC FSUB S12, S0, S15
	0x01D086C0 LDR V0, [X31 + 0x30]
	0x01D086C4 FSUB S8, S0, S1
	0x01D086C8 FMUL S0, S14, S14
	0x01D086CC FMUL S1, S10, S10
	0x01D086D0 FADD S0, S0, S1
	0x01D086D4 FADD S0, S2, S0
	0x01D086D8 FSQRT S10, S0
	0x01D086DC BL 0x3A9DE74
	0x01D086E0 ADRP X8, 0x2245000
	0x01D086E4 LDR X8, [X8 + 0x4C0]
	0x01D086E8 MOV W20, W0
	0x01D086EC LDR X8, [X8]
	0x01D086F0 LDR W9, [X8 + 0xE0]
	0x01D086F4 CBNZ W9, 0x1D08700
	0x01D086F8 MOV X0, X8
	0x01D086FC BL 0x1B6E8F8
	0x01D08700 LDP S0, S2, [X31 + 0x18]
	0x01D08704 LDR V1, [X31 + 0x60]
	0x01D08708 FSUB S7, S10, S9
	0x01D0870C ADD X0, X31, 0xA0
	0x01D08710 MOV V4.16B, V11.16B
	0x01D08714 FMUL S3, S0, S1
	0x01D08718 LDP S1, S0, [X31 + 0x20]
	0x01D0871C MOV V5.16B, V12.16B
	0x01D08720 MOV V6.16B, V8.16B
	0x01D08724 MOV W1, W20
	0x01D08728 MOV X2, X31
	0x01D0872C BL 0x3AF3A7C
	0x01D08730 TBZ X0, 0x0, 0x1D087C0
	0x01D08734 MOVZ W20, 0x1
	0x01D08738 B 0x1D08758
	0x01D0873C MOV X0, X19
	0x01D08740 BL 0x1D06D3C
	0x01D08744 MOV W21, W31
	0x01D08748 STP S0, S1, [X19 + 0x68]
	0x01D0874C STR S2, [X19 + 0x70]
	0x01D08750 CBNZ W24, 0x1D0852C
	0x01D08754 MOV W20, W31
	0x01D08758 LDR X0, [X19 + 0x38]
	0x01D0875C CBZ X0, 0x1D087D8
	0x01D08760 LDP S1, S2, [X19 + 0x6C]
	0x01D08764 LDR V0, [X19 + 0x68]
	0x01D08768 MOV X1, X31
	0x01D0876C BL 0x3AA76F8
	0x01D08770 LDR X0, [X19 + 0x40]
	0x01D08774 CBZ X0, 0x1D087D8
	0x01D08778 LDP S1, S2, [X19 + 0x78]
	0x01D0877C LDR V0, [X19 + 0x74]
	0x01D08780 MOV X1, X31
	0x01D08784 BL 0x3AA76F8
	0x01D08788 STRB W21, [X19 + 0x110]
	0x01D0878C STRB W20, [X19 + 0x111]
	0x01D08790 LDP X20, X19, [X31 + 0x1E0]
	0x01D08794 LDP X22, X21, [X31 + 0x1D0]
	0x01D08798 LDP X24, X23, [X31 + 0x1C0]
	0x01D0879C LDP X26, X25, [X31 + 0x1B0]
	0x01D087A0 LDP X28, X27, [X31 + 0x1A0]
	0x01D087A4 LDP X29, X30, [X31 + 0x190]
	0x01D087A8 LDP D9, D8, [X31 + 0x180]
	0x01D087AC LDP D11, D10, [X31 + 0x170]
	0x01D087B0 LDP D13, D12, [X31 + 0x160]
	0x01D087B4 LDP D15, D14, [X31 + 0x150]
	0x01D087B8 ADD X31, X31, 0x1F0
	0x01D087BC RET
	0x01D087C0 MOV X0, X19
	0x01D087C4 BL 0x1D07014
	0x01D087C8 MOV W20, W31
	0x01D087CC STP S0, S1, [X19 + 0x74]
	0x01D087D0 STR S2, [X19 + 0x7C]
	0x01D087D4 B 0x1D08758
	0x01D087D8 BL 0x1B6EA1C
	0x01D087DC MOV V8.16B, V15.16B
	0x01D087E0 STP S15, S9, [X31 + 0xD0]
	0x01D087E4 STR S10, [X31 + 0xD8]
	0x01D087E8 BL 0x1B6EA1C
	0x01D087EC MOV X21, X0
	0x01D087F0 MOV V8.16B, V15.16B
	0x01D087F4 STP S15, S9, [X31 + 0xD0]
	0x01D087F8 STR S10, [X31 + 0xD8]
	0x01D087FC B 0x1D0882C
	0x01D08800 MOV X21, X0
	0x01D08804 B 0x1D0882C
	0x01D08808 B 0x1D08814
	0x01D0880C B 0x1D08814
	0x01D08810 B 0x1D08814
	0x01D08814 LDR V0, [X31 + 0x50]
	0x01D08818 MOV X21, X0
	0x01D0881C MOV V8.16B, V15.16B
	0x01D08820 STP S15, S0, [X31 + 0xD0]
	0x01D08824 LDR V0, [X31 + 0x40]
	0x01D08828 STR S0, [X31 + 0xD8]
	0x01D0882C CMP W1, 0x1
	0x01D08830 B.NE 0x1D08874
	0x01D08834 MOV X0, X21
	0x01D08838 BL 0x3D19840
	0x01D0883C LDR X22, [X0]
	0x01D08840 BL 0x3D19850
	0x01D08844 ADRP X8, 0x2249000
	0x01D08848 LDR X8, [X8 + 0x158]
	0x01D0884C ADD X0, X31, 0x70
	0x01D08850 LDR X1, [X8]
	0x01D08854 BL 0x2A2FAB8
	0x01D08858 LDR V12, [X31 + 0x50]
	0x01D0885C LDR V14, [X31 + 0x40]
	0x01D08860 ADRP X23, 0x251B000
	0x01D08864 MOV V15.16B, V8.16B
	0x01D08868 CBZ X22, 0x1D07A04
	0x01D0886C MOV X0, X22
	0x01D08870 BL 0x1B6EA14
	0x01D08874 MOV X22, X31
	0x01D08878 B 0x1D08880
	0x01D0887C MOV X21, X0
	0x01D08880 ADRP X8, 0x2249000
	0x01D08884 LDR X8, [X8 + 0x158]
	0x01D08888 LDR X1, [X8]
	0x01D0888C ADD X0, X31, 0x70
	0x01D08890 BL 0x2A2FAB8
	0x01D08894 CBNZ X22, 0x1D088A0
	0x01D08898 MOV X0, X21
	0x01D0889C BL 0x1C8418C
	0x01D088A0 MOV X0, X22
	0x01D088A4 BL 0x1B6EA14
	0x01D088A8 BL 0x18F46A8
	0x01D088AC FCMP S1, S2
	0x01D088B0 B.LE 0x1D088C8
	0x01D088B4 FSUB S1, S1, S2
	0x01D088B8 FDIV S1, S1, S3
	0x01D088BC FMOV S2, 1
	0x01D088C0 FADD S1, S1, S2
	0x01D088C4 FDIV S0, S0, S1
	0x01D088C8 RET
	0x01D088CC SUB X31, X31, 0x50
	0x01D088D0 STP D11, D10, [X31 + 0x10]
	0x01D088D4 STP D9, D8, [X31 + 0x20]
	0x01D088D8 STR X30, [X31 + 0x30]
	0x01D088DC STP X20, X19, [X31 + 0x40]
	0x01D088E0 FCMP S0, S2
	0x01D088E4 MOV X19, X0
	0x01D088E8 B.LE 0x1D08900
	0x01D088EC FSUB S0, S0, S2
	0x01D088F0 FDIV S0, S0, S3
	0x01D088F4 FMOV S2, 1
	0x01D088F8 FADD S0, S0, S2
	0x01D088FC FDIV S1, S1, S0
	0x01D08900 LDR V10, [X19]
	0x01D08904 LDR V11, [X19 + 0x8]
	0x01D08908 FMUL S9, S1, S1
	0x00000000 INVALID
	0x01D08910 FMUL S2, S11, S11
	0x01D08914 FADDP S0, V0.2S
	0x01D08918 FADD S8, S0, S2
	0x01D0891C FCMP S8, S9
	0x01D08920 B.LE 0x1D089D8
	0x01D08924 ADRP X20, 0x251B000
	0x01D08928 LDRB W8, [X20 + 0x441]
	0x01D0892C STR V1, [X31]
	0x01D08930 CBNZ W8, 0x1D0894C
	0x01D08934 ADRP X0, 0x2245000
	0x01D08938 LDR X0, [X0 + 0x488]
	0x01D0893C BL 0x1B6E7F0
	0x01D08940 LDR V1, [X31]
	0x01D08944 MOVZ W8, 0x1
	0x01D08948 STRB W8, [X20 + 0x441]
	0x01D0894C ADRP X8, 0x2245000
	0x01D08950 LDR X8, [X8 + 0x488]
	0x01D08954 LDR X0, [X8]
	0x01D08958 LDR W8, [X0 + 0xE0]
	0x01D0895C CBNZ W8, 0x1D08968
	0x01D08960 BL 0x1B6E8F8
	0x01D08964 LDR V1, [X31]
	0x01D08968 ADRP X8, 0xFFFFFFFFFEDA1000
	0x01D0896C LDR V0, [X8 + 0xB64]
	0x01D08970 FSQRT S2, S8
	0x01D08974 FCMP S2, S0
	0x01D08978 B.LE 0x1D0898C
	0x01D0897C UNIMPLEMENTED
	0x00000000 INVALID
	0x01D08984 FDIV S2, S11, S2
	0x01D08988 B 0x1D089C8
	0x01D0898C ADRP X20, 0x251B000
	0x01D08990 LDRB W8, [X20 + 0x43F]
	0x01D08994 CBNZ W8, 0x1D089B0
	0x01D08998 ADRP X0, 0x2245000
	0x01D0899C LDR X0, [X0 + 0x480]
	0x01D089A0 BL 0x1B6E7F0
	0x01D089A4 LDR V1, [X31]
	0x01D089A8 MOVZ W8, 0x1
	0x01D089AC STRB W8, [X20 + 0x43F]
	0x01D089B0 ADRP X8, 0x2245000
	0x01D089B4 LDR X8, [X8 + 0x480]
	0x01D089B8 LDR X8, [X8]
	0x01D089BC LDR X8, [X8 + 0xB8]
	0x01D089C0 LDR V0, [X8]
	0x01D089C4 LDR V2, [X8 + 0x8]
	0x00000000 INVALID
	0x01D089CC FMUL S1, S1, S2
	0x01D089D0 STR D0, [X19]
	0x01D089D4 STR S1, [X19 + 0x8]
	0x01D089D8 FCMP S8, S9
	0x01D089DC LDP X20, X19, [X31 + 0x40]
	0x01D089E0 LDR X30, [X31 + 0x30]
	0x01D089E4 LDP D9, D8, [X31 + 0x20]
	0x01D089E8 LDP D11, D10, [X31 + 0x10]
	0x01D089EC CSET W0, GT
	0x01D089F0 ADD X31, X31, 0x50
	0x01D089F4 RET
	0x01D089F8 SUB X31, X31, 0x50
	0x01D089FC STP D11, D10, [X31 + 0x10]
	0x01D08A00 STP D9, D8, [X31 + 0x20]
	0x01D08A04 STR X30, [X31 + 0x30]
	0x01D08A08 STP X20, X19, [X31 + 0x40]
	0x01D08A0C FMOV S2, 20
	0x01D08A10 MOV X19, X0
	0x01D08A14 FCMP S0, S2
	0x01D08A18 FMOV S2, 8
	0x01D08A1C B.LE 0x1D08A40
	0x01D08A20 FMOV S2, -20
	0x01D08A24 FMOV S3, 10
	0x01D08A28 FADD S0, S0, S2
	0x01D08A2C FMOV S4, 1
	0x01D08A30 FDIV S0, S0, S3
	0x01D08A34 FADD S0, S0, S4
	0x01D08A38 FMOV S2, 8
	0x01D08A3C FDIV S2, S2, S0
	0x01D08A40 LDR V10, [X19]
	0x01D08A44 LDR V11, [X19 + 0x8]
	0x01D08A48 FMUL S2, S2, S1
	0x01D08A4C FMUL S9, S2, S2
	0x00000000 INVALID
	0x01D08A54 FMUL S1, S11, S11
	0x01D08A58 FADDP S0, V0.2S
	0x01D08A5C FADD S8, S0, S1
	0x01D08A60 FCMP S8, S9
	0x01D08A64 B.LE 0x1D08B1C
	0x01D08A68 ADRP X20, 0x251B000
	0x01D08A6C LDRB W8, [X20 + 0x441]
	0x01D08A70 STR V2, [X31]
	0x01D08A74 CBNZ W8, 0x1D08A90
	0x01D08A78 ADRP X0, 0x2245000
	0x01D08A7C LDR X0, [X0 + 0x488]
	0x01D08A80 BL 0x1B6E7F0
	0x01D08A84 LDR V2, [X31]
	0x01D08A88 MOVZ W8, 0x1
	0x01D08A8C STRB W8, [X20 + 0x441]
	0x01D08A90 ADRP X8, 0x2245000
	0x01D08A94 LDR X8, [X8 + 0x488]
	0x01D08A98 LDR X0, [X8]
	0x01D08A9C LDR W8, [X0 + 0xE0]
	0x01D08AA0 CBNZ W8, 0x1D08AAC
	0x01D08AA4 BL 0x1B6E8F8
	0x01D08AA8 LDR V2, [X31]
	0x01D08AAC ADRP X8, 0xFFFFFFFFFEDA1000
	0x01D08AB0 LDR V0, [X8 + 0xB64]
	0x01D08AB4 FSQRT S1, S8
	0x01D08AB8 FCMP S1, S0
	0x01D08ABC B.LE 0x1D08AD0
	0x01D08AC0 UNIMPLEMENTED
	0x00000000 INVALID
	0x01D08AC8 FDIV S1, S11, S1
	0x01D08ACC B 0x1D08B0C
	0x01D08AD0 ADRP X20, 0x251B000
	0x01D08AD4 LDRB W8, [X20 + 0x43F]
	0x01D08AD8 CBNZ W8, 0x1D08AF4
	0x01D08ADC ADRP X0, 0x2245000
	0x01D08AE0 LDR X0, [X0 + 0x480]
	0x01D08AE4 BL 0x1B6E7F0
	0x01D08AE8 LDR V2, [X31]
	0x01D08AEC MOVZ W8, 0x1
	0x01D08AF0 STRB W8, [X20 + 0x43F]
	0x01D08AF4 ADRP X8, 0x2245000
	0x01D08AF8 LDR X8, [X8 + 0x480]
	0x01D08AFC LDR X8, [X8]
	0x01D08B00 LDR X8, [X8 + 0xB8]
	0x01D08B04 LDR V0, [X8]
	0x01D08B08 LDR V1, [X8 + 0x8]
	0x00000000 INVALID
	0x01D08B10 FMUL S1, S2, S1
	0x01D08B14 STR D0, [X19]
	0x01D08B18 STR S1, [X19 + 0x8]
	0x01D08B1C FCMP S8, S9
	0x01D08B20 LDP X20, X19, [X31 + 0x40]
	0x01D08B24 LDR X30, [X31 + 0x30]
	0x01D08B28 LDP D9, D8, [X31 + 0x20]
	0x01D08B2C LDP D11, D10, [X31 + 0x10]
	0x01D08B30 CSET W0, GT
	0x01D08B34 ADD X31, X31, 0x50
	0x01D08B38 RET
	0x01D08B3C SUB X31, X31, 0xA0
	0x01D08B40 STP D15, D14, [X31 + 0x20]
	0x01D08B44 STP D13, D12, [X31 + 0x30]
	0x01D08B48 STP D11, D10, [X31 + 0x40]
	0x01D08B4C STP D9, D8, [X31 + 0x50]
	0x01D08B50 STP X30, X25, [X31 + 0x60]
	0x01D08B54 STP X24, X23, [X31 + 0x70]
	0x01D08B58 STP X22, X21, [X31 + 0x80]
	0x01D08B5C STP X20, X19, [X31 + 0x90]
	0x01D08B60 ADRP X23, 0x251B000
	0x01D08B64 LDRB W8, [X23 + 0x758]
	0x01D08B68 MOV X20, X3
	0x01D08B6C MOV W22, W2
	0x01D08B70 MOV X19, X1
	0x01D08B74 MOV V8.16B, V7.16B
	0x01D08B78 MOV V13.16B, V6.16B
	0x01D08B7C MOV V14.16B, V5.16B
	0x01D08B80 MOV V15.16B, V4.16B
	0x01D08B84 MOV V12.16B, V3.16B
	0x01D08B88 MOV V9.16B, V2.16B
	0x01D08B8C MOV V10.16B, V1.16B
	0x01D08B90 MOV V11.16B, V0.16B
	0x01D08B94 MOV X21, X0
	0x01D08B98 TBNZ X8, 0x0, 0x1D08BBC
	0x01D08B9C ADRP X0, 0x2249000
	0x01D08BA0 LDR X0, [X0 + 0x188]
	0x01D08BA4 BL 0x1B6E7F0
	0x01D08BA8 ADRP X0, 0x2245000
	0x01D08BAC LDR X0, [X0 + 0x478]
	0x01D08BB0 BL 0x1B6E7F0
	0x01D08BB4 MOVZ W8, 0x1
	0x01D08BB8 STRB W8, [X23 + 0x758]
	0x01D08BBC STR S12, [X31 + 0x18]
	0x01D08BC0 FMUL S12, S12, S8
	0x01D08BC4 MOV X0, X21
	0x01D08BC8 MOV V0.16B, V11.16B
	0x01D08BCC MOV V1.16B, V10.16B
	0x01D08BD0 MOV V2.16B, V9.16B
	0x01D08BD4 MOV V3.16B, V12.16B
	0x01D08BD8 MOV V4.16B, V15.16B
	0x01D08BDC MOV V5.16B, V14.16B
	0x01D08BE0 MOV V6.16B, V13.16B
	0x01D08BE4 MOV V7.16B, V8.16B
	0x01D08BE8 MOV X1, X19
	0x01D08BEC MOV X2, X20
	0x01D08BF0 BL 0x1D09110
	0x01D08BF4 STR S8, [X31 + 0x1C]
	0x01D08BF8 TBZ X0, 0x0, 0x1D08C68
	0x01D08BFC LDP S12, S1, [X19]
	0x01D08C00 LDR V0, [X19 + 0x8]
	0x01D08C04 MOV X0, X20
	0x01D08C08 MOV X1, X31
	0x01D08C0C STP S0, S1, [X31 + 0x10]
	0x01D08C10 BL 0x3AF61C4
	0x01D08C14 CBZ X0, 0x1D08F70
	0x01D08C18 ADRP X8, 0x2249000
	0x01D08C1C LDR X8, [X8 + 0x188]
	0x01D08C20 LDR X1, [X8]
	0x01D08C24 BL 0x208FDE8
	0x01D08C28 ADRP X8, 0x2245000
	0x01D08C2C LDR X8, [X8 + 0x478]
	0x01D08C30 MOV X23, X0
	0x01D08C34 LDR X8, [X8]
	0x01D08C38 LDR W9, [X8 + 0xE0]
	0x01D08C3C CBNZ W9, 0x1D08C48
	0x01D08C40 MOV X0, X8
	0x01D08C44 BL 0x1B6E8F8
	0x01D08C48 MOV X0, X23
	0x01D08C4C MOV X1, X31
	0x01D08C50 MOV X2, X31
	0x01D08C54 BL 0x3A9D6EC
	0x01D08C58 TBZ X0, 0x0, 0x1D08DD8
	0x01D08C5C CBZ X23, 0x1D08F70
	0x01D08C60 LDR V8, [X23 + 0x20]
	0x01D08C64 B 0x1D08DEC
	0x01D08C68 ADRP X22, 0x251B000
	0x01D08C6C LDRB W8, [X22 + 0x441]
	0x01D08C70 CBNZ W8, 0x1D08C88
	0x01D08C74 ADRP X0, 0x2245000
	0x01D08C78 LDR X0, [X0 + 0x488]
	0x01D08C7C BL 0x1B6E7F0
	0x01D08C80 MOVZ W8, 0x1
	0x01D08C84 STRB W8, [X22 + 0x441]
	0x01D08C88 ADRP X24, 0x2245000
	0x01D08C8C LDR X24, [X24 + 0x488]
	0x01D08C90 LDR X0, [X24]
	0x01D08C94 LDR W8, [X0 + 0xE0]
	0x01D08C98 CBNZ W8, 0x1D08CA0
	0x01D08C9C BL 0x1B6E8F8
	0x01D08CA0 ADRP X8, 0xFFFFFFFFFEDA1000
	0x01D08CA4 FMUL S0, S15, S15
	0x01D08CA8 FMUL S1, S14, S14
	0x01D08CAC LDR V3, [X8 + 0xB64]
	0x01D08CB0 ADRP X22, 0x2245000
	0x01D08CB4 FMUL S2, S13, S13
	0x01D08CB8 FADD S0, S0, S1
	0x01D08CBC LDR X22, [X22 + 0x480]
	0x01D08CC0 FADD S0, S2, S0
	0x01D08CC4 FSQRT S8, S0
	0x01D08CC8 FCMP S8, S3
	0x01D08CCC ADRP X23, 0x251B000
	0x01D08CD0 B.LE 0x1D08CE4
	0x01D08CD4 FDIV S15, S15, S8
	0x01D08CD8 FDIV S14, S14, S8
	0x01D08CDC FDIV S13, S13, S8
	0x01D08CE0 B 0x1D08D10
	0x01D08CE4 LDRB W8, [X23 + 0x43F]
	0x01D08CE8 CBNZ W8, 0x1D08D00
	0x01D08CEC ADRP X0, 0x2245000
	0x01D08CF0 LDR X0, [X0 + 0x480]
	0x01D08CF4 BL 0x1B6E7F0
	0x01D08CF8 MOVZ W8, 0x1
	0x01D08CFC STRB W8, [X23 + 0x43F]
	0x01D08D00 LDR X8, [X22]
	0x01D08D04 LDR X8, [X8 + 0xB8]
	0x01D08D08 LDP S15, S14, [X8]
	0x01D08D0C LDR V13, [X8 + 0x8]
	0x01D08D10 ADRP X25, 0x251B000
	0x01D08D14 LDRB W8, [X25 + 0x440]
	0x01D08D18 CBNZ W8, 0x1D08D30
	0x01D08D1C ADRP X0, 0x2245000
	0x01D08D20 LDR X0, [X0 + 0x488]
	0x01D08D24 BL 0x1B6E7F0
	0x01D08D28 MOVZ W8, 0x1
	0x01D08D2C STRB W8, [X25 + 0x440]
	0x01D08D30 LDR X0, [X24]
	0x01D08D34 LDR W8, [X0 + 0xE0]
	0x01D08D38 CBNZ W8, 0x1D08D40
	0x01D08D3C BL 0x1B6E8F8
	0x01D08D40 ADRP X8, 0xFFFFFFFFFEDA1000
	0x01D08D44 LDR V0, [X8 + 0x964]
	0x01D08D48 ADRP X9, 0xFFFFFFFFFEDA1000
	0x01D08D4C LDR V1, [X9 + 0xD10]
	0x01D08D50 MOV X0, X21
	0x01D08D54 FMUL S0, S12, S0
	0x01D08D58 FADD S0, S0, S8
	0x01D08D5C FMUL S4, S0, S15
	0x01D08D60 FMUL S5, S0, S14
	0x01D08D64 FMUL S6, S0, S13
	0x01D08D68 LDR V0, [X31 + 0x1C]
	0x01D08D6C FMUL S3, S12, S1
	0x01D08D70 MOV V2.16B, V9.16B
	0x01D08D74 MOV X1, X19
	0x01D08D78 FMUL S7, S0, S1
	0x01D08D7C MOV V0.16B, V11.16B
	0x01D08D80 MOV V1.16B, V10.16B
	0x01D08D84 MOV X2, X20
	0x01D08D88 BL 0x1D09110
	0x01D08D8C TBZ X0, 0x0, 0x1D08D9C
	0x01D08D90 STP S11, S10, [X19]
	0x01D08D94 STR S9, [X19 + 0x8]
	0x01D08D98 B 0x1D08F44
	0x01D08D9C LDRB W8, [X23 + 0x43F]
	0x01D08DA0 CBNZ W8, 0x1D08DB8
	0x01D08DA4 ADRP X0, 0x2245000
	0x01D08DA8 LDR X0, [X0 + 0x480]
	0x01D08DAC BL 0x1B6E7F0
	0x01D08DB0 MOVZ W8, 0x1
	0x01D08DB4 STRB W8, [X23 + 0x43F]
	0x01D08DB8 LDR X8, [X22]
	0x01D08DBC MOV W0, W31
	0x01D08DC0 LDR X8, [X8 + 0xB8]
	0x01D08DC4 LDR V0, [X8]
	0x01D08DC8 LDR V1, [X8 + 0x8]
	0x01D08DCC STR D0, [X19]
	0x01D08DD0 STR S1, [X19 + 0x8]
	0x01D08DD4 B 0x1D08F48
	0x01D08DD8 TBZ X22, 0x0, 0x1D08DE8
	0x01D08DDC ADRP X8, 0xFFFFFFFFFEDA1000
	0x01D08DE0 LDR V8, [X8 + 0xDE4]
	0x01D08DE4 B 0x1D08DEC
	0x01D08DE8 LDR V8, [X21 + 0xB4]
	0x01D08DEC MOV X0, X20
	0x01D08DF0 MOV X1, X31
	0x01D08DF4 FADD S15, S11, S15
	0x01D08DF8 FADD S14, S10, S14
	0x01D08DFC FADD S13, S9, S13
	0x01D08E00 BL 0x3AF627C
	0x01D08E04 ADRP X22, 0x251B000
	0x01D08E08 LDRB W8, [X22 + 0x7EA]
	0x01D08E0C MOV V11.16B, V0.16B
	0x01D08E10 MOV V9.16B, V1.16B
	0x01D08E14 MOV V10.16B, V2.16B
	0x01D08E18 CBNZ W8, 0x1D08E30
	0x01D08E1C ADRP X0, 0x2249000
	0x01D08E20 LDR X0, [X0 + 0x190]
	0x01D08E24 BL 0x1B6E7F0
	0x01D08E28 MOVZ W8, 0x1
	0x01D08E2C STRB W8, [X22 + 0x7EA]
	0x01D08E30 ADRP X8, 0x2249000
	0x01D08E34 LDR X8, [X8 + 0x190]
	0x01D08E38 LDR V1, [X31 + 0x14]
	0x01D08E3C FMUL S2, S9, S9
	0x01D08E40 FSUB S0, S15, S12
	0x01D08E44 LDR X8, [X8]
	0x01D08E48 FSUB S3, S14, S1
	0x01D08E4C FMUL S1, S11, S11
	0x01D08E50 FADD S1, S1, S2
	0x01D08E54 LDR X8, [X8 + 0xB8]
	0x01D08E58 FMUL S2, S10, S10
	0x01D08E5C FADD S1, S2, S1
	0x01D08E60 LDR V2, [X31 + 0x10]
	0x01D08E64 LDR V4, [X8]
	0x01D08E68 STP S13, S12, [X31 + 0x8]
	0x01D08E6C FCMP S1, S4
	0x01D08E70 FSUB S4, S13, S2
	0x01D08E74 B.MI 0x1D08EB0
	0x01D08E78 FMUL S2, S0, S11
	0x01D08E7C FMUL S5, S3, S9
	0x01D08E80 FMUL S6, S4, S10
	0x01D08E84 FADD S2, S2, S5
	0x01D08E88 FADD S2, S6, S2
	0x01D08E8C FMUL S5, S11, S2
	0x01D08E90 FMUL S6, S9, S2
	0x01D08E94 FMUL S2, S10, S2
	0x01D08E98 FDIV S5, S5, S1
	0x01D08E9C FDIV S6, S6, S1
	0x01D08EA0 FDIV S1, S2, S1
	0x01D08EA4 FSUB S0, S0, S5
	0x01D08EA8 FSUB S3, S3, S6
	0x01D08EAC FSUB S4, S4, S1
	0x01D08EB0 FMUL S9, S8, S0
	0x01D08EB4 FMUL S12, S8, S3
	0x01D08EB8 FMUL S11, S8, S4
	0x01D08EBC LDP S13, S8, [X31 + 0x18]
	0x01D08EC0 LDP S0, S1, [X19]
	0x01D08EC4 LDR V2, [X19 + 0x8]
	0x01D08EC8 MOV X0, X21
	0x01D08ECC FMUL S10, S8, S8
	0x01D08ED0 MOV V3.16B, V13.16B
	0x01D08ED4 MOV V4.16B, V9.16B
	0x01D08ED8 MOV V5.16B, V12.16B
	0x01D08EDC MOV V6.16B, V11.16B
	0x01D08EE0 MOV V7.16B, V10.16B
	0x01D08EE4 MOV X1, X19
	0x01D08EE8 MOV X2, X20
	0x01D08EEC BL 0x1D09110
	0x01D08EF0 TBNZ X0, 0x0, 0x1D08F44
	0x01D08EF4 MOV V5.16B, V14.16B
	0x01D08EF8 LDP S14, S3, [X31 + 0xC]
	0x01D08EFC FMUL S7, S10, S8
	0x01D08F00 MOV X0, X21
	0x01D08F04 MOV X1, X19
	0x01D08F08 FADD S0, S14, S9
	0x01D08F0C LDR V9, [X31 + 0x14]
	0x01D08F10 FADD S2, S3, S11
	0x01D08F14 MOV V11.16B, V3.16B
	0x01D08F18 LDR V3, [X31 + 0x8]
	0x01D08F1C FADD S1, S9, S12
	0x01D08F20 FSUB S4, S15, S0
	0x01D08F24 FSUB S5, S5, S1
	0x01D08F28 FSUB S6, S3, S2
	0x01D08F2C MOV V3.16B, V13.16B
	0x01D08F30 MOV X2, X20
	0x01D08F34 BL 0x1D09110
	0x01D08F38 TBNZ X0, 0x0, 0x1D08F44
	0x01D08F3C STP S14, S9, [X19]
	0x01D08F40 STR S11, [X19 + 0x8]
	0x01D08F44 MOVZ W0, 0x1
	0x01D08F48 LDP X20, X19, [X31 + 0x90]
	0x01D08F4C LDP X22, X21, [X31 + 0x80]
	0x01D08F50 LDP X24, X23, [X31 + 0x70]
	0x01D08F54 LDP X30, X25, [X31 + 0x60]
	0x01D08F58 LDP D9, D8, [X31 + 0x50]
	0x01D08F5C LDP D11, D10, [X31 + 0x40]
	0x01D08F60 LDP D13, D12, [X31 + 0x30]
	0x01D08F64 LDP D15, D14, [X31 + 0x20]
	0x01D08F68 ADD X31, X31, 0xA0
	0x01D08F6C RET
	0x01D08F70 BL 0x1B6EA1C
	0x01D08F74 SUB X31, X31, 0x30
	0x01D08F78 STP D9, D8, [X31 + 0x10]
	0x01D08F7C STP X30, X19, [X31 + 0x20]
	0x01D08F80 LDR W9, [X0 + 0xC8]
	0x01D08F84 LDR W10, [X0 + 0x98]
	0x01D08F88 LDR X8, [X0 + 0xC0]
	0x01D08F8C ADD W9, W9, 0x1
	0x01D08F90 SDIV W11, W9, W10
	0x01D08F94 MSUB W9, W11, W10, W9
	0x01D08F98 STR W9, [X0 + 0xC8]
	0x01D08F9C CBZ X8, 0x1D09098
	0x01D08FA0 LDR W10, [X8 + 0x18]
	0x01D08FA4 STR V0, [X31]
	0x01D08FA8 CMP W9, W10
	0x01D08FAC B.CS 0x1D0909C
	0x01D08FB0 SXTW X9, W9
	0x01D08FB4 MOVZ W10, 0xC
	0x01D08FB8 MADD X8, X9, X10, X8
	0x01D08FBC LDR V8, [X8 + 0x20]
	0x01D08FC0 LDR V9, [X8 + 0x28]
	0x01D08FC4 MOV X1, X31
	0x01D08FC8 MOV X19, X0
	0x01D08FCC BL 0x3A9B084
	0x01D08FD0 CBZ X0, 0x1D09098
	0x01D08FD4 MOV X1, X31
	0x01D08FD8 BL 0x3AA7658
	0x01D08FDC LDR V4, [X19 + 0xF0]
	0x01D08FE0 LDR V3, [X19 + 0xE8]
	0x01D08FE4 LDR V6, [X31]
	0x01D08FE8 LDR V5, [X19 + 0xE0]
	0x01D08FEC FSUB S2, S2, S4
	0x01D08FF0 LDR V4, [X19 + 0x98]
	0x01D08FF4 MOV V0.S[1], V1.S[0]
	0x01D08FF8 UNIMPLEMENTED
	0x01D08FFC FSUB V0.2S, V0.2S, V3.2S
	0x01D09000 LDR V3, [X19 + 0xD8]
	0x00000000 INVALID
	0x01D09008 LDR X8, [X19 + 0xC0]
	0x01D0900C SCVTF S4, S4
	0x01D09010 FDIV S1, S2, S6
	0x01D09014 UNIMPLEMENTED
	0x01D09018 FSUB V6.2S, V0.2S, V8.2S
	0x01D0901C FSUB S7, S1, S9
	0x00000000 INVALID
	0x01D09024 FDIV S4, S7, S4
	0x01D09028 FADD V2.2S, V3.2S, V2.2S
	0x01D0902C FADD S3, S5, S4
	0x01D09030 STUR D0, [X19 + 0xCC]
	0x01D09034 STR S1, [X19 + 0xD4]
	0x01D09038 STR D2, [X19 + 0xD8]
	0x01D0903C STR S3, [X19 + 0xE0]
	0x01D09040 CBZ X8, 0x1D09098
	0x01D09044 LDRSW X9, [X19 + 0xC8]
	0x01D09048 LDR W10, [X8 + 0x18]
	0x01D0904C CMP W9, W10
	0x01D09050 B.CS 0x1D0909C
	0x01D09054 MOVZ W10, 0xC
	0x01D09058 MOV S2, V0.S[1]
	0x01D0905C MADD X8, X9, X10, X8
	0x01D09060 MOV X0, X19
	0x01D09064 MOV X1, X31
	0x01D09068 STP S0, S2, [X8 + 0x20]
	0x01D0906C STR S1, [X8 + 0x28]
	0x01D09070 BL 0x3A9B084
	0x01D09074 CBZ X0, 0x1D09098
	0x01D09078 MOV X1, X31
	0x01D0907C BL 0x3AA7658
	0x01D09080 STP S0, S1, [X19 + 0xE8]
	0x01D09084 STR S2, [X19 + 0xF0]
	0x01D09088 LDP X30, X19, [X31 + 0x20]
	0x01D0908C LDP D9, D8, [X31 + 0x10]
	0x01D09090 ADD X31, X31, 0x30
	0x01D09094 RET
	0x01D09098 BL 0x1B6EA1C
	0x01D0909C BL 0x1B6EA24
	0x01D090A0 STP X30, X19, [X31 - 0x10]!
	0x01D090A4 ORN W8, W31, W1, 0x0
	0x01D090A8 AND W8, W8, 0x1
	0x01D090AC MOV X19, X0
	0x01D090B0 STRB W8, [X0 + 0x113]
	0x01D090B4 BL 0x1D06D3C
	0x01D090B8 MOV X0, X19
	0x01D090BC STP S0, S1, [X19 + 0x68]
	0x01D090C0 STR S2, [X19 + 0x70]
	0x01D090C4 BL 0x1D07014
	0x01D090C8 LDR X0, [X19 + 0x38]
	0x01D090CC STP S0, S1, [X19 + 0x74]
	0x01D090D0 STR S2, [X19 + 0x7C]
	0x01D090D4 CBZ X0, 0x1D0910C
	0x01D090D8 LDP S1, S2, [X19 + 0x6C]
	0x01D090DC LDR V0, [X19 + 0x68]
	0x01D090E0 MOV X1, X31
	0x01D090E4 BL 0x3AA76F8
	0x01D090E8 LDR X0, [X19 + 0x40]
	0x01D090EC CBZ X0, 0x1D0910C
	0x01D090F0 LDP S1, S2, [X19 + 0x78]
	0x01D090F4 LDR V0, [X19 + 0x74]
	0x01D090F8 MOV X1, X31
	0x01D090FC BL 0x3AA76F8
	0x01D09100 STRH W31, [X19 + 0x110]
	0x01D09104 LDP X30, X19, [X31], #0x10
	0x01D09108 RET
	0x01D0910C BL 0x1B6EA1C
	0x01D09110 SUB X31, X31, 0xF0
	0x01D09114 STP D15, D14, [X31 + 0x70]
	0x01D09118 STP D13, D12, [X31 + 0x80]
	0x01D0911C STP D11, D10, [X31 + 0x90]
	0x01D09120 STP D9, D8, [X31 + 0xA0]
	0x01D09124 STP X30, X25, [X31 + 0xB0]
	0x01D09128 STP X24, X23, [X31 + 0xC0]
	0x01D0912C STP X22, X21, [X31 + 0xD0]
	0x01D09130 STP X20, X19, [X31 + 0xE0]
	0x01D09134 ADRP X22, 0x251A000
	0x01D09138 LDRB W8, [X22 + 0x759]
	0x01D0913C MOV X20, X2
	0x01D09140 MOV X19, X1
	0x01D09144 MOV V9.16B, V7.16B
	0x01D09148 MOV V11.16B, V6.16B
	0x01D0914C MOV V12.16B, V5.16B
	0x01D09150 MOV V13.16B, V4.16B
	0x01D09154 MOV V10.16B, V3.16B
	0x01D09158 MOV V8.16B, V2.16B
	0x01D0915C MOV X21, X0
	0x01D09160 STR D1, [X31 + 0x30]
	0x01D09164 STR D0, [X31 + 0x20]
	0x01D09168 TBNZ X8, 0x0, 0x1D09180
	0x01D0916C ADRP X0, 0x2244000
	0x01D09170 LDR X0, [X0 + 0x4C0]
	0x01D09174 BL 0x1B6E7F0
	0x01D09178 MOVZ W8, 0x1
	0x01D0917C STRB W8, [X22 + 0x759]
	0x01D09180 ADRP X25, 0x251A000
	0x01D09184 LDRB W8, [X25 + 0x440]
	0x01D09188 MOVI V0.2D, 0x0
	0x01D0918C STUR V0, [X31 + 0x5C]
	0x01D09190 STP V0, V0, [X31 + 0x40]
	0x01D09194 CBNZ W8, 0x1D091AC
	0x01D09198 ADRP X0, 0x2244000
	0x01D0919C LDR X0, [X0 + 0x488]
	0x01D091A0 BL 0x1B6E7F0
	0x01D091A4 MOVZ W8, 0x1
	0x01D091A8 STRB W8, [X25 + 0x440]
	0x01D091AC ADRP X24, 0x2244000
	0x01D091B0 LDR X24, [X24 + 0x488]
	0x01D091B4 ADRP X23, 0x2244000
	0x01D091B8 LDR X0, [X24]
	0x01D091BC LDR W8, [X0 + 0xE0]
	0x01D091C0 LDR X23, [X23 + 0x4C0]
	0x01D091C4 CBNZ W8, 0x1D091CC
	0x01D091C8 BL 0x1B6E8F8
	0x01D091CC FMUL S0, S13, S13
	0x01D091D0 FMUL S1, S12, S12
	0x01D091D4 FMUL S2, S11, S11
	0x01D091D8 FADD S0, S0, S1
	0x01D091DC ADD X21, X21, 0x10C
	0x01D091E0 FADD S0, S2, S0
	0x01D091E4 MOV X0, X21
	0x01D091E8 MOV X1, X31
	0x01D091EC FSQRT S15, S0
	0x01D091F0 BL 0x3A9DE74
	0x01D091F4 LDR X8, [X23]
	0x01D091F8 MOV W22, W0
	0x01D091FC LDR W9, [X8 + 0xE0]
	0x01D09200 CBNZ W9, 0x1D0920C
	0x01D09204 MOV X0, X8
	0x01D09208 BL 0x1B6E8F8
	0x01D0920C FMOV S0, 1
	0x01D09210 FSUB S0, S0, S9
	0x01D09214 FMUL S14, S10, S9
	0x01D09218 FMUL S0, S0, S10
	0x01D0921C FADD S7, S0, S15
	0x01D09220 LDP V0, V1, [X31 + 0x20]
	0x01D09224 MOV V2.16B, V8.16B
	0x01D09228 MOV V3.16B, V14.16B
	0x01D0922C MOV V4.16B, V13.16B
	0x01D09230 MOV V5.16B, V12.16B
	0x01D09234 MOV V6.16B, V11.16B
	0x01D09238 MOV X0, X20
	0x01D0923C MOV W1, W22
	0x01D09240 MOV X2, X31
	0x01D09244 BL 0x3AF3A7C
	0x01D09248 TBZ X0, 0x0, 0x1D093EC
	0x01D0924C MOV X0, X20
	0x01D09250 MOV X1, X31
	0x01D09254 STR S8, [X31 + 0x1C]
	0x01D09258 BL 0x3AF6270
	0x01D0925C MOV X0, X20
	0x01D09260 MOV X1, X31
	0x01D09264 MOV V11.16B, V0.16B
	0x01D09268 MOV V12.16B, V1.16B
	0x01D0926C MOV V13.16B, V2.16B
	0x01D09270 BL 0x3AF627C
	0x01D09274 FMUL S0, S0, S10
	0x01D09278 FMUL S1, S1, S10
	0x01D0927C FMUL S2, S2, S10
	0x01D09280 FADD S8, S11, S0
	0x01D09284 FADD S11, S12, S1
	0x01D09288 FADD S15, S13, S2
	0x01D0928C STP S8, S11, [X19]
	0x01D09290 STR S15, [X19 + 0x8]
	0x01D09294 LDRB W8, [X25 + 0x440]
	0x01D09298 CBNZ W8, 0x1D092B0
	0x01D0929C ADRP X0, 0x2244000
	0x01D092A0 LDR X0, [X0 + 0x488]
	0x01D092A4 BL 0x1B6E7F0
	0x01D092A8 MOVZ W8, 0x1
	0x01D092AC STRB W8, [X25 + 0x440]
	0x01D092B0 LDR V0, [X31 + 0x2]
	0x01D092B4 LDR X0, [X24]
	0x01D092B8 FSUB S12, S8, S0
	0x01D092BC LDR V0, [X31 + 0x3]
	0x01D092C0 LDR W8, [X0 + 0xE0]
	0x01D092C4 FSUB S13, S11, S0
	0x01D092C8 LDR V0, [X31 + 0x1C]
	0x01D092CC FSUB S15, S15, S0
	0x01D092D0 CBNZ W8, 0x1D092D8
	0x01D092D4 BL 0x1B6E8F8
	0x01D092D8 FMUL S0, S12, S12
	0x01D092DC FMUL S1, S13, S13
	0x01D092E0 FADD S0, S0, S1
	0x01D092E4 FMUL S1, S15, S15
	0x01D092E8 FADD S0, S1, S0
	0x01D092EC MOV X0, X21
	0x01D092F0 MOV X1, X31
	0x01D092F4 FSQRT S8, S0
	0x01D092F8 BL 0x3A9DE74
	0x01D092FC LDR X8, [X23]
	0x01D09300 MOV W22, W0
	0x01D09304 LDR W9, [X8 + 0xE0]
	0x01D09308 CBNZ W9, 0x1D09314
	0x01D0930C MOV X0, X8
	0x01D09310 BL 0x1B6E8F8
	0x01D09314 FMUL S0, S9, S9
	0x01D09318 FMOV S1, 1
	0x01D0931C FSUB S0, S1, S0
	0x01D09320 FMUL S10, S0, S10
	0x01D09324 FADD S7, S10, S8
	0x01D09328 LDR V8, [X31 + 0x1C]
	0x01D0932C FMUL S11, S14, S9
	0x01D09330 ADD X0, X31, 0x40
	0x01D09334 LDP V0, V1, [X31 + 0x20]
	0x01D09338 MOV V2.16B, V8.16B
	0x01D0933C MOV V3.16B, V11.16B
	0x01D09340 MOV V4.16B, V12.16B
	0x01D09344 MOV V5.16B, V13.16B
	0x01D09348 MOV V6.16B, V15.16B
	0x01D0934C MOV W1, W22
	0x01D09350 MOV X2, X31
	0x01D09354 BL 0x3AF3A7C
	0x01D09358 LDP V4, V2, [X31 + 0x20]
	0x01D0935C LDR V0, [X19]
	0x01D09360 LDR V1, [X19 + 0x8]
	0x01D09364 MOV V4.S[1], V2.S[0]
	0x01D09368 FSUB V3.2S, V0.2S, V4.2S
	0x01D0936C FSUB S9, S1, S8
	0x01D09370 TBZ X0, 0x0, 0x1D09488
	0x01D09374 ADRP X21, 0x251A000
	0x01D09378 LDRB W8, [X21 + 0x441]
	0x01D0937C STR V4, [X31 + 0x3]
	0x01D09380 CBNZ W8, 0x1D093A0
	0x01D09384 ADRP X0, 0x2244000
	0x01D09388 LDR X0, [X0 + 0x488]
	0x01D0938C STR V3, [X31]
	0x01D09390 BL 0x1B6E7F0
	0x01D09394 LDR V3, [X31]
	0x01D09398 MOVZ W8, 0x1
	0x01D0939C STRB W8, [X21 + 0x441]
	0x01D093A0 LDR X0, [X24]
	0x01D093A4 LDR W8, [X0 + 0xE0]
	0x01D093A8 CBNZ W8, 0x1D093B8
	0x01D093AC STR V3, [X31]
	0x01D093B0 BL 0x1B6E8F8
	0x01D093B4 LDR V3, [X31]
	0x01D093B8 ADRP X8, 0xFFFFFFFFFEDA0000
	0x00000000 INVALID
	0x01D093C0 LDR V1, [X8 + 0xB64]
	0x01D093C4 FADDP S0, V0.2S
	0x01D093C8 FMUL S2, S9, S9
	0x01D093CC FADD S0, S2, S0
	0x01D093D0 FSQRT S0, S0
	0x01D093D4 FCMP S0, S1
	0x01D093D8 B.LE 0x1D095A8
	0x01D093DC UNIMPLEMENTED
	0x00000000 INVALID
	0x01D093E4 FDIV S9, S9, S0
	0x01D093E8 B 0x1D095E0
	0x01D093EC LDRB W8, [X25 + 0x440]
	0x01D093F0 CBNZ W8, 0x1D09408
	0x01D093F4 ADRP X0, 0x2244000
	0x01D093F8 LDR X0, [X0 + 0x488]
	0x01D093FC BL 0x1B6E7F0
	0x01D09400 MOVZ W8, 0x1
	0x01D09404 STRB W8, [X25 + 0x440]
	0x01D09408 LDR X0, [X24]
	0x01D0940C LDR W8, [X0 + 0xE0]
	0x01D09410 CBNZ W8, 0x1D09418
	0x01D09414 BL 0x1B6E8F8
	0x01D09418 MOV X0, X21
	0x01D0941C MOV X1, X31
	0x01D09420 BL 0x3A9DE74
	0x01D09424 LDR X8, [X23]
	0x01D09428 MOV W21, W0
	0x01D0942C LDR W9, [X8 + 0xE0]
	0x01D09430 CBNZ W9, 0x1D0943C
	0x01D09434 MOV X0, X8
	0x01D09438 BL 0x1B6E8F8
	0x01D0943C ADRP X8, 0xFFFFFFFFFEDA0000
	0x01D09440 LDR V0, [X8 + 0xD70]
	0x01D09444 MOV V2.16B, V8.16B
	0x01D09448 MOV V3.16B, V13.16B
	0x01D0944C MOV V4.16B, V12.16B
	0x01D09450 FMUL S0, S14, S0
	0x01D09454 FADD S6, S0, S15
	0x01D09458 LDP V0, V1, [X31 + 0x20]
	0x01D0945C MOV V5.16B, V11.16B
	0x01D09460 MOV X0, X20
	0x01D09464 MOV W1, W21
	0x01D09468 MOV X2, X31
	0x01D0946C BL 0x3AF3258
	0x01D09470 TBZ X0, 0x0, 0x1D09560
	0x01D09474 LDR V1, [X31 + 0x2]
	0x01D09478 LDR V0, [X31 + 0x3]
	0x01D0947C STR S8, [X19 + 0x8]
	0x01D09480 STP S1, S0, [X19]
	0x01D09484 B 0x1D09628
	0x01D09488 LDRB W8, [X25 + 0x440]
	0x01D0948C STR V3, [X31]
	0x01D09490 CBNZ W8, 0x1D094AC
	0x01D09494 ADRP X0, 0x2244000
	0x01D09498 LDR X0, [X0 + 0x488]
	0x01D0949C BL 0x1B6E7F0
	0x01D094A0 LDR V3, [X31]
	0x01D094A4 MOVZ W8, 0x1
	0x01D094A8 STRB W8, [X25 + 0x440]
	0x01D094AC LDR X0, [X24]
	0x01D094B0 LDR W8, [X0 + 0xE0]
	0x01D094B4 CBNZ W8, 0x1D094C0
	0x01D094B8 BL 0x1B6E8F8
	0x01D094BC LDR V3, [X31]
	0x01D094C0 MOV S10, V3.S[1]
	0x00000000 INVALID
	0x01D094C8 FMUL S1, S10, V3.S[1]
	0x01D094CC FADD S0, S0, S1
	0x01D094D0 FMUL S1, S9, S9
	0x01D094D4 FADD S0, S0, S1
	0x01D094D8 MOV X0, X21
	0x01D094DC MOV X1, X31
	0x01D094E0 FSQRT S8, S0
	0x01D094E4 BL 0x3A9DE74
	0x01D094E8 LDR X8, [X23]
	0x01D094EC MOV W21, W0
	0x01D094F0 LDR W9, [X8 + 0xE0]
	0x01D094F4 CBNZ W9, 0x1D09500
	0x01D094F8 MOV X0, X8
	0x01D094FC BL 0x1B6E8F8
	0x01D09500 ADRP X8, 0xFFFFFFFFFEDA0000
	0x01D09504 LDR V0, [X8 + 0xD70]
	0x01D09508 ADD X0, X31, 0x40
	0x01D0950C LDR V3, [X31]
	0x01D09510 MOV V4.16B, V10.16B
	0x01D09514 FMUL S0, S11, S0
	0x01D09518 FADD S6, S0, S8
	0x01D0951C LDR V8, [X31 + 0x1C]
	0x01D09520 LDP V0, V1, [X31 + 0x20]
	0x01D09524 MOV V5.16B, V9.16B
	0x01D09528 MOV W1, W21
	0x01D0952C MOV V2.16B, V8.16B
	0x01D09530 MOV X2, X31
	0x01D09534 BL 0x3AF3258
	0x01D09538 TBZ X0, 0x0, 0x1D09628
	0x01D0953C LDR V1, [X31 + 0x2]
	0x01D09540 LDP V0, V2, [X31 + 0x30]
	0x01D09544 STR S8, [X19 + 0x8]
	0x01D09548 STP S1, S0, [X19]
	0x01D0954C LDUR V0, [X31 + 0x5C]
	0x01D09550 LDR V1, [X31 + 0x5]
	0x01D09554 STUR V0, [X20 + 0x1C]
	0x01D09558 STP V2, V1, [X20]
	0x01D0955C B 0x1D09628
	0x01D09560 ADRP X20, 0x251A000
	0x01D09564 LDRB W8, [X20 + 0x43F]
	0x01D09568 CBNZ W8, 0x1D09580
	0x01D0956C ADRP X0, 0x2244000
	0x01D09570 LDR X0, [X0 + 0x480]
	0x01D09574 BL 0x1B6E7F0
	0x01D09578 MOVZ W8, 0x1
	0x01D0957C STRB W8, [X20 + 0x43F]
	0x01D09580 ADRP X8, 0x2244000
	0x01D09584 LDR X8, [X8 + 0x480]
	0x01D09588 MOV W0, W31
	0x01D0958C LDR X8, [X8]
	0x01D09590 LDR X8, [X8 + 0xB8]
	0x01D09594 LDR V0, [X8]
	0x01D09598 LDR V1, [X8 + 0x8]
	0x01D0959C STR D0, [X19]
	0x01D095A0 STR S1, [X19 + 0x8]
	0x01D095A4 B 0x1D0962C
	0x01D095A8 ADRP X21, 0x251A000
	0x01D095AC LDRB W8, [X21 + 0x43F]
	0x01D095B0 CBNZ W8, 0x1D095C8
	0x01D095B4 ADRP X0, 0x2244000
	0x01D095B8 LDR X0, [X0 + 0x480]
	0x01D095BC BL 0x1B6E7F0
	0x01D095C0 MOVZ W8, 0x1
	0x01D095C4 STRB W8, [X21 + 0x43F]
	0x01D095C8 ADRP X8, 0x2244000
	0x01D095CC LDR X8, [X8 + 0x480]
	0x01D095D0 LDR X8, [X8]
	0x01D095D4 LDR X8, [X8 + 0xB8]
	0x01D095D8 LDR V8, [X8]
	0x01D095DC LDR V9, [X8 + 0x8]
	0x01D095E0 MOV X0, X20
	0x01D095E4 MOV X1, X31
	0x01D095E8 BL 0x3AF6288
	0x01D095EC LDR V2, [X31 + 0x3]
	0x01D095F0 FSUB S0, S0, S10
	0x01D095F4 FMOV S1, W31
	0x01D095F8 FMAX S0, S0, S1
	0x00000000 INVALID
	0x01D09600 FADD V1.2S, V2.2S, V1.2S
	0x01D09604 LDR V2, [X31 + 0x1C]
	0x01D09608 FMUL S0, S9, S0
	0x01D0960C STR D1, [X19]
	0x01D09610 FADD S0, S2, S0
	0x01D09614 STR S0, [X19 + 0x8]
	0x01D09618 LDP V0, V1, [X31 + 0x40]
	0x01D0961C LDUR V2, [X31 + 0x5C]
	0x01D09620 STP V0, V1, [X20]
	0x01D09624 STUR V2, [X20 + 0x1C]
	0x01D09628 MOVZ W0, 0x1
	0x01D0962C LDP X20, X19, [X31 + 0xE0]
	0x01D09630 LDP X22, X21, [X31 + 0xD0]
	0x01D09634 LDP X24, X23, [X31 + 0xC0]
	0x01D09638 LDP X30, X25, [X31 + 0xB0]
	0x01D0963C LDP D9, D8, [X31 + 0xA0]
	0x01D09640 LDP D11, D10, [X31 + 0x90]
	0x01D09644 LDP D13, D12, [X31 + 0x80]
	0x01D09648 LDP D15, D14, [X31 + 0x70]
	0x01D0964C ADD X31, X31, 0xF0
	0x01D09650 RET
	0x01D09654 ANDS W31, W1, 0x1
	0x01D09658 MOVZ W8, 0x110
	0x01D0965C CINC X8, X8, EQ
	0x01D09660 LDRB W0, [X0, X8, LSL]
	0x01D09664 RET
	0x01D09668 STP D11, D10, [X31 - 0x50]!
	0x01D0966C STP D9, D8, [X31 + 0x10]
	0x01D09670 STR X30, [X31 + 0x20]
	0x01D09674 STP X22, X21, [X31 + 0x30]
	0x01D09678 STP X20, X19, [X31 + 0x40]
	0x01D0967C MOV X1, X31
	0x01D09680 MOV V8.16B, V0.16B
	0x01D09684 MOV X19, X0
	0x01D09688 BL 0x3A9B084
	0x01D0968C LDR X8, [X19 + 0x28]
	0x01D09690 CBZ X8, 0x1D09810
	0x01D09694 MOV X20, X0
	0x01D09698 MOV X0, X8
	0x01D0969C MOV X1, X31
	0x01D096A0 BL 0x3A9B084
	0x01D096A4 CBZ X0, 0x1D09810
	0x01D096A8 MOV X1, X31
	0x01D096AC BL 0x3AA7658
	0x01D096B0 MOV X0, X19
	0x01D096B4 MOV X1, X31
	0x01D096B8 MOV V9.16B, V0.16B
	0x01D096BC MOV V10.16B, V1.16B
	0x01D096C0 MOV V11.16B, V2.16B
	0x01D096C4 BL 0x3A9B084
	0x01D096C8 CBZ X0, 0x1D09810
	0x01D096CC MOV X1, X31
	0x01D096D0 BL 0x3AA7A54
	0x01D096D4 CBZ X20, 0x1D09810
	0x01D096D8 MOV V3.16B, V0.16B
	0x01D096DC MOV V4.16B, V1.16B
	0x01D096E0 MOV V5.16B, V2.16B
	0x01D096E4 MOV X0, X20
	0x01D096E8 MOV V0.16B, V9.16B
	0x01D096EC MOV V1.16B, V10.16B
	0x01D096F0 MOV V2.16B, V11.16B
	0x01D096F4 MOV V6.16B, V8.16B
	0x01D096F8 MOV X1, X31
	0x01D096FC BL 0x3AA874C
	0x01D09700 LDR X20, [X19 + 0x90]
	0x01D09704 MOV X0, X19
	0x01D09708 MOV X1, X31
	0x01D0970C BL 0x3A9B084
	0x01D09710 CBZ X0, 0x1D09810
	0x01D09714 MOV X1, X31
	0x01D09718 BL 0x3AA7658
	0x01D0971C CBZ X20, 0x1D09810
	0x01D09720 MOV X0, X20
	0x01D09724 MOV X1, X31
	0x01D09728 BL 0x3AF6C18
	0x01D0972C LDR X20, [X19 + 0x90]
	0x01D09730 MOV X0, X19
	0x01D09734 MOV X1, X31
	0x01D09738 BL 0x3A9B084
	0x01D0973C CBZ X0, 0x1D09810
	0x01D09740 MOV X1, X31
	0x01D09744 BL 0x3AA5FBC
	0x01D09748 CBZ X20, 0x1D09810
	0x01D0974C MOV X0, X20
	0x01D09750 MOV X1, X31
	0x01D09754 BL 0x3AF6D4C
	0x01D09758 ADRP X8, 0xFFFFFFFFFEDA0000
	0x01D0975C LDR V0, [X8 + 0xAF4]
	0x01D09760 FMOV S2, W31
	0x01D09764 MOV X0, X31
	0x01D09768 FMUL S8, S8, S0
	0x01D0976C FMOV S0, W31
	0x01D09770 MOV V1.16B, V8.16B
	0x01D09774 BL 0x3A928DC
	0x01D09778 LDP S4, S5, [X19 + 0xD8]
	0x01D0977C LDR V6, [X19 + 0xE0]
	0x01D09780 MOV X0, X31
	0x01D09784 BL 0x3A92D64
	0x01D09788 LDR X20, [X19 + 0xC0]
	0x01D0978C STP S0, S1, [X19 + 0xD8]
	0x01D09790 STR S2, [X19 + 0xE0]
	0x01D09794 CBZ X20, 0x1D09810
	0x01D09798 MOV X22, X31
	0x01D0979C MOV X21, X31
	0x01D097A0 LDRSW X8, [X20 + 0x18]
	0x01D097A4 CMP X21, X8
	0x01D097A8 B.GE 0x1D09814
	0x01D097AC FMOV S0, W31
	0x01D097B0 FMOV S2, W31
	0x01D097B4 MOV V1.16B, V8.16B
	0x01D097B8 MOV X0, X31
	0x01D097BC BL 0x3A928DC
	0x01D097C0 LDR X8, [X19 + 0xC0]
	0x01D097C4 CBZ X8, 0x1D09810
	0x01D097C8 LDR W9, [X8 + 0x18]
	0x01D097CC CMP X21, X9
	0x01D097D0 B.CS 0x1D0982C
	0x01D097D4 ADD X8, X8, X22
	0x01D097D8 LDP S4, S5, [X8 + 0x20]
	0x01D097DC LDR V6, [X8 + 0x28]
	0x01D097E0 MOV X0, X31
	0x01D097E4 BL 0x3A92D64
	0x01D097E8 LDR W8, [X20 + 0x18]
	0x01D097EC CMP X21, X8
	0x01D097F0 B.CS 0x1D0982C
	0x01D097F4 ADD X8, X20, X22
	0x01D097F8 STP S0, S1, [X8 + 0x20]
	0x01D097FC STR S2, [X8 + 0x28]
	0x01D09800 LDR X20, [X19 + 0xC0]
	0x01D09804 ADD X22, X22, 0xC
	0x01D09808 ADD X21, X21, 0x1
	0x01D0980C CBNZ X20, 0x1D097A0
	0x01D09810 BL 0x1B6EA1C
	0x01D09814 LDP X20, X19, [X31 + 0x40]
	0x01D09818 LDP X22, X21, [X31 + 0x30]
	0x01D0981C LDR X30, [X31 + 0x20]
	0x01D09820 LDP D9, D8, [X31 + 0x10]
	0x01D09824 LDP D11, D10, [X31], #0x50
	0x01D09828 RET
	0x01D0982C BL 0x1B6EA24
	0x01D09830 STR D10, [X31 - 0x30]!
	0x01D09834 STP D9, D8, [X31 + 0x8]
	0x01D09838 STR X30, [X31 + 0x18]
	0x01D0983C STP X20, X19, [X31 + 0x20]
	0x01D09840 ADRP X20, 0x251A000
	0x01D09844 LDRB W8, [X20 + 0x75A]
	0x01D09848 MOV V8.16B, V2.16B
	0x01D0984C MOV V9.16B, V1.16B
	0x01D09850 MOV V10.16B, V0.16B
	0x01D09854 MOV X19, X0
	0x01D09858 TBNZ X8, 0x0, 0x1D09870
	0x01D0985C ADRP X0, 0x2246000
	0x01D09860 LDR X0, [X0 + 0x2D0]
	0x01D09864 BL 0x1B6E7F0
	0x01D09868 MOVZ W8, 0x1
	0x01D0986C STRB W8, [X20 + 0x75A]
	0x01D09870 MOV X0, X19
	0x01D09874 MOV X1, X31
	0x01D09878 BL 0x3A9B084
	0x01D0987C CBZ X0, 0x1D099DC
	0x01D09880 MOV V0.16B, V10.16B
	0x01D09884 MOV V1.16B, V9.16B
	0x01D09888 MOV V2.16B, V8.16B
	0x01D0988C MOV X1, X31
	0x01D09890 BL 0x3AA76F8
	0x01D09894 LDR X0, [X19 + 0x50]
	0x01D09898 CBZ X0, 0x1D099DC
	0x01D0989C MOV V0.16B, V10.16B
	0x01D098A0 MOV V1.16B, V9.16B
	0x01D098A4 MOV V2.16B, V8.16B
	0x01D098A8 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 496
	002 Move [X31+336], D15
	003 Move [X31+344], D14
	004 Move [X31+352], D13
	005 Move [X31+360], D12
	006 Move [X31+368], D11
	007 Move [X31+376], D10
	008 Move [X31+384], D9
	009 Move [X31+392], D8
	010 Move [X31+400], X29
	011 Move [X31+408], X30
	012 Move [X31+416], X28
	013 Move [X31+424], X27
	014 Move [X31+432], X26
	015 Move [X31+440], X25
	016 Move [X31+448], X24
	017 Move [X31+456], X23
	018 Move [X31+464], X22
	019 Move [X31+472], X21
	020 Move [X31+480], X20
	021 Move [X31+488], X19
	022 Move X20, 0x251C000
	023 Move W8, [X20+1879]
	024 Move X19, X0
	025 Move [X31+96], D0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {53}
	030 Move X0, 0x224A000
	031 Move X0, [X0+344]
	032 Call 0x1B6F7F0
	033 Move X0, 0x224A000
	034 Move X0, [X0+352]
	035 Call 0x1B6F7F0
	036 Move X0, 0x224A000
	037 Move X0, [X0+360]
	038 Call 0x1B6F7F0
	039 Move X0, 0x224A000
	040 Move X0, [X0+368]
	041 Call 0x1B6F7F0
	042 Move X0, 0x224A000
	043 Move X0, [X0+376]
	044 Call 0x1B6F7F0
	045 Move X0, 0x224A000
	046 Move X0, [X0+384]
	047 Call 0x1B6F7F0
	048 Move X0, 0x2246000
	049 Move X0, [X0+1216]
	050 Call 0x1B6F7F0
	051 Move W8, 1
	052 Move [X20+1879], W8
	053 Move X23, 0x251C000
	054 Move W8, [X23+1087]
	055 NotImplemented "Instruction MOVI not yet implemented."
	056 Move [X31+232], W31
	057 Move [X31+224], X31
	058 Move [X31+188], V0
	059 Move [X31+160], V0
	060 Move [X31+168], V0
	061 Move [X31+144], X31
	062 Move [X31+112], V0
	063 Move [X31+120], V0
	064 Compare W8, 0
	065 JumpIfNotEqual {71}
	066 Move X0, 0x2246000
	067 Move X0, [X0+1152]
	068 Call 0x1B6F7F0
	069 Move W8, 1
	070 Move [X23+1087], W8
	071 Move X20, 0x2246000
	072 Move X20, [X20+1152]
	073 Move X8, [X20]
	074 Move X8, [X8+184]
	075 Move S11, [X8]
	076 Move S10, [X8+4]
	077 Move V9, [X8+8]
	078 Move [X31+208], S11
	079 Move [X31+216], S10
	080 Move [X31+216], S9
	081 Move X0, [X19+48]
	082 Compare X0, 0
	083 JumpIfEqual {1451}
	084 Move X1, X31
	085 Call Component.get_transform, X0
	086 Move X8, [X19+40]
	087 Compare X8, 0
	088 JumpIfEqual {1451}
	089 Move X21, X0
	090 Move X0, X8
	091 Move X1, X31
	092 Call Component.get_transform, X0
	093 Compare X0, 0
	094 JumpIfEqual {1451}
	095 Move X1, X31
	096 Call Transform.get_eulerAngles, X0
	097 Compare X21, 0
	098 JumpIfEqual {1451}
	099 Move S0, W31
	100 Move S2, W31
	101 Move X0, X21
	102 Move X1, X31
	103 Call Transform.set_eulerAngles, X0, X1
	104 Move X0, X19
	105 Call Player.CurrentLeftHandPosition, X0
	106 Move X27, 0x251C000
	107 Move V12, [X19+104]
	108 Move W8, [X27+1296]
	109 Move V13, [X19+112]
	110 Move V7, V1
	111 Move V8, V2
	112 Compare W8, 0
	113 JumpIfNotEqual {123}
	114 Move X0, 0x2246000
	115 Move X0, [X0+1152]
	116 Move [X31+64], V7
	117 Move [X31+72], V0
	118 Call 0x1B6F7F0
	119 Move V7, [X31+64]
	120 Move V0, [X31+80]
	121 Move W8, 1
	122 Move [X27+1296], W8
	123 Move W8, [X19+275]
	124 Add X22, X31, 240
	125 Compare W8, 0
	126 JumpIfNotEqual {175}
	127 Move X8, [X20]
	128 Move V3, V0
	129 Move X9, -19259392
	130 Move V5, [X9+2460]
	131 Move X8, [X8+184]
	132 Move V3.S[1], V7.S[0]
	133 Subtract V16, V3, V12
	134 Move V18, [X31+6]
	135 Move V6, [X8+44]
	136 NotImplemented "Instruction LDUR not yet implemented."
	137 Move W9, 0xCCCD
	138 NotImplemented "Instruction MOVK not yet implemented."
	139 Add S6, S6, S6
	140 Multiply S5, S6, S5
	141 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	142 Add V3, V3, V3
	143 Multiply S5, S5, S18
	144 Subtract S4, S8, S13
	145 NotImplemented "Instruction INVALID not yet implemented."
	146 Multiply S5, S5, S18
	147 Move [X31+5], V0
	148 Move S0, [X19+104]
	149 Move S1, [X19+108]
	150 Move V2, [X19+112]
	151 Move [X31+4], V7
	152 Move V3, [X19+176]
	153 Add S6, S4, S5
	154 Move V7, [X19+184]
	155 NotImplemented "Instruction INVALID not yet implemented."
	156 NotImplemented "Instruction INVALID not yet implemented."
	157 Add V4, V16, V4
	158 Add X21, X19, 296
	159 Move S5, V4.S[1]
	160 Add X1, X31, 224
	161 Move W2, 1
	162 Move X0, X19
	163 Move X3, X21
	164 Call Player.IterativeCollisionSphereCast, X0, X1, V0, X2, V1, X3, X4, X5
	165 Move TEMP, X0
	166 And TEMP, TEMP, 1
	167 Compare TEMP, 1
	168 JumpIfNotEqual {175}
	169 Move W8, [X19+272]
	170 Compare W8, 0
	171 JumpIfEqual {896}
	172 Move S12, [X19+104]
	173 Move S13, [X19+108]
	174 Move V14, [X19+112]
	175 Move W29, W31
	176 Move [X31+80], S11
	177 Move V13, V10
	178 Move V14, V9
	179 Move X0, X19
	180 Call Player.CurrentRightHandPosition, X0
	181 NotImplemented "Instruction LDUR not yet implemented."
	182 Move W8, [X27+1296]
	183 Move V12, [X19+124]
	184 Move V7, V1
	185 Move V8, V2
	186 Compare W8, 0
	187 JumpIfNotEqual {197}
	188 Move X0, 0x2246000
	189 Move X0, [X0+1152]
	190 Move [X31+48], V0
	191 Move [X31+56], V7
	192 Call 0x1B6F7F0
	193 Move V0, [X31+48]
	194 Move V7, [X31+64]
	195 Move W8, 1
	196 Move [X27+1296], W8
	197 Move W8, [X19+275]
	198 Compare W8, 0
	199 JumpIfNotEqual {248}
	200 Move X8, [X20]
	201 Move V3, V0
	202 Move X9, -19259392
	203 Move V5, [X9+2460]
	204 Move X8, [X8+184]
	205 Move V3.S[1], V7.S[0]
	206 Subtract V16, V3, V15
	207 Move V18, [X31+6]
	208 Move V6, [X8+44]
	209 NotImplemented "Instruction LDUR not yet implemented."
	210 Move W9, 0xCCCD
	211 NotImplemented "Instruction MOVK not yet implemented."
	212 Add S6, S6, S6
	213 Multiply S5, S6, S5
	214 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	215 Add V3, V3, V3
	216 Multiply S5, S5, S18
	217 Subtract S4, S8, S12
	218 NotImplemented "Instruction INVALID not yet implemented."
	219 Multiply S5, S5, S18
	220 Move [X31+3], V0
	221 Move S0, [X19+116]
	222 Move S1, [X19+120]
	223 Move V2, [X19+124]
	224 Move [X31+4], V7
	225 Move V3, [X19+176]
	226 Add S6, S4, S5
	227 Move V7, [X19+184]
	228 NotImplemented "Instruction INVALID not yet implemented."
	229 NotImplemented "Instruction INVALID not yet implemented."
	230 Add V4, V16, V4
	231 Add X21, X19, 340
	232 Move S5, V4.S[1]
	233 Add X1, X31, 224
	234 Move W2, 1
	235 Move X0, X19
	236 Move X3, X21
	237 Call Player.IterativeCollisionSphereCast, X0, X1, V0, X2, V1, X3, X4, X5
	238 Move TEMP, X0
	239 And TEMP, TEMP, 1
	240 Compare TEMP, 1
	241 JumpIfNotEqual {248}
	242 Move W8, [X19+273]
	243 Compare W8, 0
	244 JumpIfEqual {952}
	245 Move S11, [X19+116]
	246 Move S10, [X19+120]
	247 Move V9, [X19+124]
	248 Move W24, W31
	249 Move V0, [X31+80]
	250 Add S12, S13, S10
	251 Add S14, S14, S9
	252 Move [X31+216], S14
	253 Add S15, S0, S11
	254 Move [X31+208], S15
	255 Move [X31+216], S12
	256 Move TEMP, X29
	257 And TEMP, TEMP, 1
	258 Compare TEMP, 1
	259 JumpIfEqual {263}
	260 Move W8, [X19+272]
	261 Compare W8, 0
	262 JumpIfEqual {271}
	263 Move W28, 1
	264 Move TEMP, X24
	265 And TEMP, TEMP, 1
	266 Compare TEMP, 1
	267 JumpIfEqual {276}
	268 Move W8, [X19+273]
	269 Compare W8, 0
	270 JumpIfNotEqual {276}
	271 Move W28, W31
	272 Move TEMP, X24
	273 And TEMP, TEMP, 1
	274 Compare TEMP, 1
	275 JumpIfNotEqual {268}
	276 Add W28, W28, 1
	277 Move W8, [X23+1087]
	278 Compare W8, 0
	279 JumpIfNotEqual {285}
	280 Move X0, 0x2246000
	281 Move X0, [X0+1152]
	282 Call 0x1B6F7F0
	283 Move W8, 1
	284 Move [X23+1087], W8
	285 Move X0, [X19+464]
	286 Compare X0, 0
	287 JumpIfEqual {1451}
	288 Move W8, [X0+24]
	289 NotImplemented "Instruction CMP not yet implemented."
	290 Move [X31+64], S14
	291 Move [X31+80], S12
	292 Move [X31+48], W29
	293 Move X8, 0x224A000
	294 Move X8, [X8+376]
	295 Move X26, 0x224A000
	296 Move X1, [X8]
	297 Move X26, [X26+352]
	298 Add X8, X31, 288
	299 Call List`1<ItemContactPoint>.GetEnumerator, X0
	300 Move V0, [X31+288]
	301 Move V1, [X31+304]
	302 Move X8, [X31+320]
	303 Move X9, -19259392
	304 Move V11, [X9+2460]
	305 Move W23, W31
	306 Add X21, X19, 384
	307 Move [X31+112], V0
	308 Move [X31+120], V1
	309 Move [X31+144], X8
	310 Move W29, 1
	311 Move W25, W23
	312 Move X23, 0x251C000
	313 Move X1, [X26]
	314 Add X0, X31, 112
	315 Call Enumerator<ItemContactPoint>.MoveNext, X0
	316 Move TEMP, X0
	317 And TEMP, TEMP, 1
	318 Compare TEMP, 1
	319 JumpIfNotEqual {402}
	320 Move S12, [X31+128]
	321 Move S13, [X31+132]
	322 Move S14, [X31+136]
	323 Move S8, [X31+140]
	324 Move W8, [X27+1296]
	325 Move S10, [X31+144]
	326 Move S9, [X31+148]
	327 Compare W8, 0
	328 JumpIfNotEqual {332}
	329 Move X0, X20
	330 Call 0x1B6F7F0
	331 Move [X27+1296], W29
	332 Move W8, [X19+275]
	333 Compare W8, 0
	334 JumpIfNotEqual {313}
	335 Move X8, [X20]
	336 Move V16, [X31+6]
	337 Subtract S4, S14, S9
	338 Move V3, [X19+176]
	339 Move X8, [X8+184]
	340 Move V7, [X19+184]
	341 Subtract S0, S12, S8
	342 Subtract S2, S13, S10
	343 Move S5, [X8+40]
	344 Move S1, [X8+44]
	345 Add S1, S1, S1
	346 Multiply S1, S1, S11
	347 Multiply S1, S1, S16
	348 Multiply S1, S1, S16
	349 Add S6, S4, S1
	350 Move V1, [X8+36]
	351 Add S4, S5, S5
	352 Multiply S4, S4, S11
	353 Multiply S4, S4, S16
	354 Add S1, S1, S1
	355 Multiply S1, S1, S11
	356 Multiply S1, S1, S16
	357 Multiply S4, S4, S16
	358 Multiply S1, S1, S16
	359 Add S5, S2, S4
	360 Add S4, S0, S1
	361 Add X1, X31, 224
	362 Move W2, 1
	363 Move X0, X19
	364 Move V0, V8
	365 Move V1, V10
	366 Move V2, V9
	367 Move X3, X21
	368 Call Player.IterativeCollisionSphereCast, X0, X1, V0, X2, V1, X3, X4, X5
	369 Move TEMP, X0
	370 And TEMP, TEMP, 1
	371 Compare TEMP, 1
	372 JumpIfNotEqual {313}
	373 Subtract S1, S10, S13
	374 Subtract S2, S9, S14
	375 Move V9, [X31+80]
	376 Move V10, [X31+64]
	377 Move W8, [X23+1087]
	378 Move X22, [X19+144]
	379 Subtract S0, S8, S12
	380 Add S15, S0, S15
	381 Add S9, S1, S9
	382 Add S10, S2, S10
	383 Add W28, W28, 1
	384 Move [X31+80], S9
	385 Move [X31+64], S10
	386 Compare W8, 0
	387 JumpIfNotEqual {391}
	388 Move X0, X20
	389 Call 0x1B6F7F0
	390 Move [X23+1087], W29
	391 Compare X22, 0
	392 JumpIfEqual {1452}
	393 Move X8, [X20]
	394 Move W23, 1
	395 Move X8, [X8+184]
	396 Move S1, [X8+4]
	397 Move S2, [X8+8]
	398 Move V0, [X8]
	399 Move X0, X22
	400 Move X1, X31
	401 Call Rigidbody.set_velocity, X0, X1
	402 Move X8, 0x224A000
	403 Move X8, [X8+344]
	404 Move V12, [X31+80]
	405 Move V14, [X31+64]
	406 Add X0, X31, 112
	407 Move X1, [X8]
	408 Move [X31+208], S15
	409 Move [X31+216], S12
	410 Move [X31+216], S14
	411 Call Enumerator<ItemContactPoint>.Dispose, X0
	412 Move X8, [X19+464]
	413 Move W29, [X31+48]
	414 Compare X8, 0
	415 JumpIfEqual {1451}
	416 Move W9, [X8+28]
	417 Add W9, W9, 1
	418 Move [X8+24], W31
	419 Move [X8+28], W9
	420 Move W25, W31
	421 NotImplemented "Instruction CMP not yet implemented."
	422 NotImplemented "Instruction SCVTF not yet implemented."
	423 NotImplemented "Instruction FDIV not yet implemented."
	424 NotImplemented "Instruction FDIV not yet implemented."
	425 NotImplemented "Instruction FDIV not yet implemented."
	426 Move [X31+208], S15
	427 Move [X31+216], S12
	428 Move [X31+216], S14
	429 Move X0, [X19+40]
	430 Compare X0, 0
	431 JumpIfEqual {1451}
	432 Move S8, [X19+128]
	433 Move S9, [X19+132]
	434 Move V10, [X19+136]
	435 Move X1, X31
	436 Call SphereCollider.get_radius, X0
	437 Move X0, [X19+40]
	438 Compare X0, 0
	439 JumpIfEqual {1451}
	440 Move X1, X31
	441 Move V11, V0
	442 Call Component.get_transform, X0
	443 Compare X0, 0
	444 JumpIfEqual {1451}
	445 Move X1, X31
	446 Call Transform.get_position, X0
	447 Move S3, [X19+128]
	448 Move S5, [X19+132]
	449 Move V6, [X19+136]
	450 Move V7, [X19+184]
	451 Add S0, S0, S15
	452 Add S1, S1, S12
	453 Add S2, S2, S14
	454 Subtract S4, S0, S3
	455 Subtract S5, S1, S5
	456 Subtract S6, S2, S6
	457 Add X1, X31, 224
	458 Add X3, X31, 160
	459 Move X0, X19
	460 Move V0, V8
	461 Move V1, V9
	462 Move V2, V10
	463 Move V3, V11
	464 Move W2, W31
	465 Call Player.IterativeCollisionSphereCast, X0, X1, V0, X2, V1, X3, X4, X5
	466 Move TEMP, X0
	467 And TEMP, TEMP, 1
	468 Compare TEMP, 1
	469 JumpIfNotEqual {617}
	470 Move S0, [X31+224]
	471 Move S1, [X31+228]
	472 Move V2, [X31+232]
	473 Move S11, [X19+128]
	474 Move S12, [X19+132]
	475 Move V13, [X19+136]
	476 Subtract S8, S0, S11
	477 Subtract S9, S1, S12
	478 Subtract S10, S2, S13
	479 Move [X31+208], S8
	480 Move [X31+216], S9
	481 Move [X31+216], S10
	482 Move X0, [X19+40]
	483 Compare X0, 0
	484 JumpIfEqual {1451}
	485 Move X1, X31
	486 Call Component.get_transform, X0
	487 Compare X0, 0
	488 JumpIfEqual {1451}
	489 Move X1, X31
	490 Call Transform.get_position, X0
	491 Move X0, [X19+40]
	492 Compare X0, 0
	493 JumpIfEqual {1451}
	494 Move [X31+32], S0
	495 Move [X31+40], S13
	496 Move [X31+64], S10
	497 Move S0, [X19+128]
	498 Move S10, [X19+132]
	499 Move [X31+40], S12
	500 Move [X31+48], S11
	501 Move V11, [X19+136]
	502 Move X1, X31
	503 Move [X31+24], S2
	504 Move [X31+32], S1
	505 Move [X31+80], S9
	506 Move [X31+48], S8
	507 Move [X31+20], S0
	508 Call Component.get_transform, X0
	509 Compare X0, 0
	510 JumpIfEqual {1451}
	511 Move X1, X31
	512 Call Transform.get_position, X0
	513 Move X21, 0x251C000
	514 Move S12, [X19+128]
	515 Move S13, [X19+132]
	516 Move W8, [X21+1088]
	517 Move V9, [X19+136]
	518 Move V14, V0
	519 Move V15, V1
	520 Move V8, V2
	521 Compare W8, 0
	522 JumpIfNotEqual {528}
	523 Move X0, 0x2246000
	524 Move X0, [X0+1160]
	525 Call 0x1B6F7F0
	526 Move W8, 1
	527 Move [X21+1088], W8
	528 Move X8, 0x2246000
	529 Move X8, [X8+1160]
	530 Move X0, [X8]
	531 Move W8, [X0+224]
	532 Compare W8, 0
	533 JumpIfNotEqual {535}
	534 Call 0x1B6F8F8
	535 Move X0, [X19+40]
	536 Compare X0, 0
	537 JumpIfEqual {1451}
	538 Move V3, [X31+32]
	539 Move S4, [X31+20]
	540 Move S5, [X31+24]
	541 Subtract S1, S15, S13
	542 Move V15, [X31+48]
	543 Move V6, [X31+80]
	544 Subtract S0, S14, S12
	545 Move V14, [X31+64]
	546 Subtract S3, S3, S4
	547 Move V4, [X31+28]
	548 Subtract S2, S8, S9
	549 Add S0, S15, S0
	550 Add S1, S6, S1
	551 Add S2, S14, S2
	552 Multiply S0, S0, S0
	553 Multiply S1, S1, S1
	554 Add S0, S0, S1
	555 Multiply S1, S2, S2
	556 Subtract S4, S4, S10
	557 Subtract S5, S5, S11
	558 Add S0, S0, S1
	559 Move X1, X31
	560 Add S11, S15, S3
	561 Add S12, S6, S4
	562 Add S13, S14, S5
	563 NotImplemented "Instruction FSQRT not yet implemented."
	564 Call SphereCollider.get_radius, X0
	565 Move V10, [X19+184]
	566 Add X0, X19, 268
	567 Move X1, X31
	568 Move V8, V0
	569 Call LayerMask.get_value, X0
	570 Move X8, 0x2246000
	571 Move X8, [X8+1216]
	572 Move W21, W0
	573 Move X8, [X8]
	574 Move W9, [X8+224]
	575 Compare W9, 0
	576 JumpIfNotEqual {579}
	577 Move X0, X8
	578 Call 0x1B6F8F8
	579 Move X8, -19259392
	580 Move V0, [X8+3440]
	581 Multiply S1, S8, S10
	582 Move V2, [X31+36]
	583 Add X0, X31, 160
	584 Multiply S0, S1, S0
	585 Add S6, S9, S0
	586 Move S1, [X31+40]
	587 Move S0, [X31+44]
	588 Move V3, V11
	589 Move V4, V12
	590 Move V5, V13
	591 Move W1, W21
	592 Move X2, X31
	593 Call Physics.Raycast, X0, X1, X2, V0, X3
	594 Move V12, [X31+80]
	595 Move TEMP, X0
	596 And TEMP, TEMP, 1
	597 Compare TEMP, 1
	598 JumpIfNotEqual {617}
	599 Move X0, [X19+40]
	600 Compare X0, 0
	601 JumpIfEqual {1451}
	602 Move S8, [X19+128]
	603 Move S9, [X19+132]
	604 Move V10, [X19+136]
	605 Move X1, X31
	606 Call Component.get_transform, X0
	607 Compare X0, 0
	608 JumpIfEqual {1451}
	609 Move X1, X31
	610 Call Transform.get_position, X0
	611 Subtract S15, S8, S0
	612 Subtract S12, S9, S1
	613 Subtract S14, S10, S2
	614 Move [X31+208], S15
	615 Move [X31+216], S12
	616 Move [X31+216], S14
	617 Move W8, [X23+1087]
	618 Compare W8, 0
	619 JumpIfNotEqual {625}
	620 Move X0, 0x2246000
	621 Move X0, [X0+1152]
	622 Call 0x1B6F7F0
	623 Move W8, 1
	624 Move [X23+1087], W8
	625 Move X8, [X20]
	626 Move X8, [X8+184]
	627 Move S0, [X8]
	628 Move S1, [X8+4]
	629 Move V2, [X8+8]
	630 Move X8, -19259392
	631 Move V8, [X8+2356]
	632 Subtract S0, S15, S0
	633 Subtract S1, S12, S1
	634 Subtract S2, S14, S2
	635 Multiply S0, S0, S0
	636 Multiply S1, S1, S1
	637 Add S0, S0, S1
	638 Multiply S1, S2, S2
	639 Add S0, S1, S0
	640 NotImplemented "Instruction FCMP not yet implemented."
	641 Move V0, [X19+472]
	642 Add X0, X31, 208
	643 Move V1, [X31+6]
	644 Call Player.CalculateClampedMovement, X0, V0, V1
	645 Move X21, [X19+144]
	646 Move X0, X19
	647 Move X1, X31
	648 Call Component.get_transform, X0
	649 Compare X0, 0
	650 JumpIfEqual {1451}
	651 Move X1, X31
	652 Call Transform.get_position, X0
	653 Compare X21, 0
	654 JumpIfEqual {1451}
	655 Move S4, [X31+212]
	656 Move S3, [X31+216]
	657 Move V5, [X31+208]
	658 Move X0, X21
	659 Move X1, X31
	660 Add S2, S2, S3
	661 Add S1, S1, S4
	662 Add S0, S0, S5
	663 Call Rigidbody.MovePosition, X0, X1
	664 Move X0, X19
	665 Move X1, X31
	666 Call Component.get_transform, X0
	667 Move X8, [X19+144]
	668 Compare X8, 0
	669 JumpIfEqual {1451}
	670 Move X21, X0
	671 Move X0, X8
	672 Move X1, X31
	673 Call Rigidbody.get_position, X0
	674 Compare X21, 0
	675 JumpIfEqual {1451}
	676 Move X0, X21
	677 Move X1, X31
	678 Call Transform.set_position, X0, X1
	679 Move X0, [X19+40]
	680 Compare X0, 0
	681 JumpIfEqual {1451}
	682 Move X1, X31
	683 Call Component.get_transform, X0
	684 Compare X0, 0
	685 JumpIfEqual {1451}
	686 Move X1, X31
	687 Call Transform.get_position, X0
	688 Move X0, X19
	689 Move [X19+128], S0
	690 Move [X19+136], S1
	691 Move [X19+136], S2
	692 Call Player.CurrentLeftHandPosition, X0
	693 Move V4, V0
	694 Move V5, V1
	695 Move V6, V2
	696 Move S0, [X19+104]
	697 Move S1, [X19+108]
	698 Move V2, [X19+112]
	699 Move V3, [X19+176]
	700 Move V7, [X19+184]
	701 Subtract S4, S4, S0
	702 Subtract S5, S5, S1
	703 Subtract S6, S6, S2
	704 Move TEMP, X29
	705 And TEMP, TEMP, 1
	706 Compare TEMP, 1
	707 JumpIfNotEqual {713}
	708 Move TEMP, X24
	709 And TEMP, TEMP, 1
	710 Compare TEMP, 1
	711 JumpIfNotEqual {721}
	712 Move W8, W31
	713 Move W8, [X19+272]
	714 NotImplemented "Instruction CMP not yet implemented."
	715 NotImplemented "Instruction CSET not yet implemented."
	716 Or W9, W9, W24
	717 Move TEMP, X9
	718 And TEMP, TEMP, 1
	719 Compare TEMP, 1
	720 JumpIfEqual {722}
	721 Move W8, [X19+273]
	722 Xor W8, W8, 1
	723 And W31, W8, 255
	724 Add X3, X19, 296
	725 NotImplemented "Instruction CSET not yet implemented."
	726 Add X1, X31, 224
	727 Move X0, X19
	728 Call Player.IterativeCollisionSphereCast, X0, X1, V0, X2, V1, X3, X4, X5
	729 Move TEMP, X0
	730 And TEMP, TEMP, 1
	731 Compare TEMP, 1
	732 JumpIfNotEqual {738}
	733 Move W8, [X31+232]
	734 Move X9, [X31+224]
	735 Move W29, 1
	736 Move [X19+112], W8
	737 Move [X19+104], X9
	738 Move X0, X19
	739 Call Player.CurrentLeftHandPosition, X0
	740 Move [X19+104], S0
	741 Move [X19+112], S1
	742 Move [X19+112], S2
	743 Move X0, X19
	744 Call Player.CurrentRightHandPosition, X0
	745 Move V4, V0
	746 Move V5, V1
	747 Move V6, V2
	748 Move S0, [X19+116]
	749 Move S1, [X19+120]
	750 Move V2, [X19+124]
	751 Move V3, [X19+176]
	752 Move V7, [X19+184]
	753 Subtract S4, S4, S0
	754 Subtract S5, S5, S1
	755 Subtract S6, S6, S2
	756 Move TEMP, X29
	757 And TEMP, TEMP, 1
	758 Compare TEMP, 1
	759 JumpIfNotEqual {765}
	760 Move TEMP, X24
	761 And TEMP, TEMP, 1
	762 Compare TEMP, 1
	763 JumpIfNotEqual {773}
	764 Move W8, W31
	765 Move W8, [X19+272]
	766 NotImplemented "Instruction CMP not yet implemented."
	767 NotImplemented "Instruction CSET not yet implemented."
	768 Or W9, W24, W9
	769 Move TEMP, X9
	770 And TEMP, TEMP, 1
	771 Compare TEMP, 1
	772 JumpIfEqual {774}
	773 Move W8, [X19+273]
	774 Xor W8, W8, 1
	775 And W31, W8, 255
	776 Add X3, X19, 340
	777 NotImplemented "Instruction CSET not yet implemented."
	778 Add X1, X31, 224
	779 Move X0, X19
	780 Call Player.IterativeCollisionSphereCast, X0, X1, V0, X2, V1, X3, X4, X5
	781 Move TEMP, X0
	782 And TEMP, TEMP, 1
	783 Compare TEMP, 1
	784 JumpIfNotEqual {793}
	785 Move W8, [X31+232]
	786 Move X9, [X31+224]
	787 Move X0, X19
	788 Move V0, [X31+6]
	789 Move [X19+124], W8
	790 Move [X19+116], X9
	791 Call Player.StoreVelocities, X0, V0
	792 Move W24, 1
	793 Move X0, X19
	794 Call Player.CurrentRightHandPosition, X0
	795 Move [X19+116], S0
	796 Move [X19+124], S1
	797 Move X0, X19
	798 Move V0, [X31+6]
	799 Move [X19+124], S2
	800 Call Player.StoreVelocities, X0, V0
	801 Or W8, W24, W29
	802 Or W8, W25, W8
	803 Move TEMP, X8
	804 And TEMP, TEMP, 1
	805 Compare TEMP, 1
	806 JumpIfNotEqual {895}
	807 Move W8, [X19+274]
	808 Compare W8, 0
	809 JumpIfNotEqual {1037}
	810 Move X21, 0x251C000
	811 Move W8, [X21+1088]
	812 Compare W8, 0
	813 JumpIfNotEqual {819}
	814 Move X0, 0x2246000
	815 Move X0, [X0+1160]
	816 Call 0x1B6F7F0
	817 Move W8, 1
	818 Move [X21+1088], W8
	819 Move X22, 0x2246000
	820 Move X22, [X22+1160]
	821 Move S11, [X19+216]
	822 Move S10, [X19+220]
	823 Move V9, [X19+224]
	824 Move X0, [X22]
	825 Move W8, [X0+224]
	826 Compare W8, 0
	827 JumpIfNotEqual {829}
	828 Call 0x1B6F8F8
	829 Multiply S0, S11, S11
	830 Multiply S1, S10, S10
	831 Move V2, [X19+164]
	832 Add S0, S0, S1
	833 Multiply S1, S9, S9
	834 Add S0, S0, S1
	835 NotImplemented "Instruction FSQRT not yet implemented."
	836 NotImplemented "Instruction FCMP not yet implemented."
	837 Move W8, [X21+1088]
	838 Move V9, [X19+168]
	839 Compare W8, 0
	840 JumpIfNotEqual {846}
	841 Move X0, 0x2246000
	842 Move X0, [X0+1160]
	843 Call 0x1B6F7F0
	844 Move W8, 1
	845 Move [X21+1088], W8
	846 Move X0, [X22]
	847 Move S12, [X19+216]
	848 Move S11, [X19+220]
	849 Move V10, [X19+224]
	850 Move W8, [X0+224]
	851 Compare W8, 0
	852 JumpIfNotEqual {854}
	853 Call 0x1B6F8F8
	854 Multiply S1, S12, S12
	855 Multiply S2, S11, S11
	856 Move V0, [X19+172]
	857 Multiply S3, S10, S10
	858 Add S1, S1, S2
	859 Add S1, S1, S3
	860 Move X21, [X19+144]
	861 NotImplemented "Instruction FSQRT not yet implemented."
	862 Multiply S1, S1, S0
	863 NotImplemented "Instruction FCMP not yet implemented."
	864 Move X26, X23
	865 Move X23, 0x251C000
	866 Move S10, [X19+216]
	867 Move S11, [X19+220]
	868 Move W8, [X23+1089]
	869 Move V12, [X19+224]
	870 Compare W8, 0
	871 JumpIfNotEqual {877}
	872 Move X0, 0x2245000
	873 Move X0, [X0+1160]
	874 Call 0x1B6F7F0
	875 Move W8, 1
	876 Move [X23+1089], W8
	877 Move X0, [X22]
	878 Move W8, [X0+224]
	879 Compare W8, 0
	880 JumpIfNotEqual {882}
	881 Call 0x1B6F8F8
	882 Multiply S0, S10, S10
	883 Multiply S1, S11, S11
	884 Move X8, -19263488
	885 Add S0, S0, S1
	886 Move V1, [X8+2916]
	887 Multiply S2, S12, S12
	888 Add S0, S2, S0
	889 NotImplemented "Instruction FSQRT not yet implemented."
	890 NotImplemented "Instruction FCMP not yet implemented."
	891 Move X23, X26
	892 NotImplemented "Instruction FDIV not yet implemented."
	893 NotImplemented "Instruction FDIV not yet implemented."
	894 NotImplemented "Instruction FDIV not yet implemented."
	895 Move W24, W31
	896 Move S12, [X31+224]
	897 Move S13, [X31+228]
	898 Move X8, [X19+432]
	899 Move V14, [X31+232]
	900 Compare X8, 0
	901 JumpIfEqual {926}
	902 Move V0, [X21]
	903 Move V1, [X21+16]
	904 NotImplemented "Instruction LDUR not yet implemented."
	905 Move S3, [X19+104]
	906 Move S4, [X19+108]
	907 Move V5, [X19+112]
	908 Add X1, X31, 288
	909 Move [X22+28], V2
	910 Move [X31+240], V0
	911 Move [X31+248], V1
	912 Move V1, [X31+16]
	913 NotImplemented "Instruction LDUR not yet implemented."
	914 Move X9, [X8+24]
	915 Move X0, [X8+64]
	916 Move [X31+288], V0
	917 Move [X31+296], V1
	918 Move [X22+76], V2
	919 Move V1, [X31+64]
	920 Move V0, [X31+80]
	921 Move X2, [X8+40]
	922 Subtract S2, S8, S5
	923 Subtract S0, S0, S3
	924 Subtract S1, S1, S4
	925 NotImplemented "Instruction BLR not yet implemented."
	926 Move W8, [X23+1087]
	927 Move X21, [X19+144]
	928 Compare W8, 0
	929 JumpIfNotEqual {935}
	930 Move X0, 0x2245000
	931 Move X0, [X0+1152]
	932 Call 0x1B6F7F0
	933 Move W8, 1
	934 Move [X23+1087], W8
	935 Compare X21, 0
	936 JumpIfEqual {1451}
	937 Move X8, [X20]
	938 Move V3, [X31+4]
	939 Move X0, X21
	940 Move X1, X31
	941 Move X8, [X8+184]
	942 Subtract S13, S13, S3
	943 Move V3, [X31+5]
	944 Subtract S14, S14, S8
	945 Move S1, [X8+4]
	946 Move S2, [X8+8]
	947 Move V0, [X8]
	948 Subtract S3, S12, S3
	949 Move [X31+80], S3
	950 Call Rigidbody.set_velocity, X0, X1
	951 Move W29, 1
	952 Move S11, [X31+224]
	953 Move S10, [X31+228]
	954 Move X8, [X19+440]
	955 Move V9, [X31+232]
	956 Compare X8, 0
	957 JumpIfEqual {982}
	958 Move V0, [X21]
	959 Move V1, [X21+16]
	960 NotImplemented "Instruction LDUR not yet implemented."
	961 Move S3, [X19+116]
	962 Move S4, [X19+120]
	963 Move V5, [X19+124]
	964 Add X1, X31, 288
	965 Move [X22+28], V2
	966 Move [X31+240], V0
	967 Move [X31+248], V1
	968 Move V1, [X31+16]
	969 NotImplemented "Instruction LDUR not yet implemented."
	970 Move X9, [X8+24]
	971 Move X0, [X8+64]
	972 Move [X31+288], V0
	973 Move [X31+296], V1
	974 Move [X22+76], V2
	975 Move V0, [X31+48]
	976 Move V1, [X31+64]
	977 Move X2, [X8+40]
	978 Subtract S2, S8, S5
	979 Subtract S0, S0, S3
	980 Subtract S1, S1, S4
	981 NotImplemented "Instruction BLR not yet implemented."
	982 Move W8, [X23+1087]
	983 Move X21, [X19+144]
	984 Move V3, [X31+4]
	985 Compare W8, 0
	986 JumpIfNotEqual {993}
	987 Move X0, 0x2245000
	988 Move X0, [X0+1152]
	989 Call 0x1B6F7F0
	990 Move V3, [X31+4]
	991 Move W8, 1
	992 Move [X23+1087], W8
	993 Compare X21, 0
	994 JumpIfEqual {1451}
	995 Move X8, [X20]
	996 Subtract S10, S10, S3
	997 Move V3, [X31+3]
	998 Move X0, X21
	999 Move X8, [X8+184]
	1000 Move X1, X31
	1001 Subtract S9, S9, S8
	1002 Subtract S11, S11, S3
	1003 Move S1, [X8+4]
	1004 Move S2, [X8+8]
	1005 Move V0, [X8]
	1006 Call Rigidbody.set_velocity, X0, X1
	1007 Move W24, 1
	1008 Compare X21, 0
	1009 JumpIfEqual {1451}
	1010 Move S3, [X19+220]
	1011 Move S1, [X19+224]
	1012 Move V4, [X19+216]
	1013 Multiply S2, S0, S1
	1014 Multiply S1, S0, S3
	1015 Multiply S0, S0, S4
	1016 Move W8, [X23+1087]
	1017 Compare W8, 0
	1018 JumpIfNotEqual {1024}
	1019 Move X0, 0x2245000
	1020 Move X0, [X0+1152]
	1021 Call 0x1B6F7F0
	1022 Move W8, 1
	1023 Move [X23+1087], W8
	1024 Move X8, [X20]
	1025 Move X8, [X8+184]
	1026 Move S0, [X8]
	1027 Move S1, [X8+4]
	1028 Move V2, [X8+8]
	1029 Compare X21, 0
	1030 JumpIfEqual {1451}
	1031 Multiply S2, S9, S2
	1032 Multiply S1, S9, S1
	1033 Multiply S0, S9, S0
	1034 Move X0, X21
	1035 Move X1, X31
	1036 Call Rigidbody.set_velocity, X0, X1
	1037 Add X8, X19, 452
	1038 Move V9, [X19+448]
	1039 Move W9, [X23+1087]
	1040 Move V10, [X8]
	1041 Compare W9, 0
	1042 JumpIfNotEqual {1048}
	1043 Move X0, 0x2245000
	1044 Move X0, [X0+1152]
	1045 Call 0x1B6F7F0
	1046 Move W8, 1
	1047 Move [X23+1087], W8
	1048 Move X8, [X20]
	1049 Move X8, [X8+184]
	1050 Move V0, [X8]
	1051 NotImplemented "Instruction LDUR not yet implemented."
	1052 Subtract S0, S9, S0
	1053 Subtract V1, V10, V1
	1054 Multiply S0, S0, S0
	1055 NotImplemented "Instruction INVALID not yet implemented."
	1056 Add S0, S0, S1
	1057 Move S1, V1.S[1]
	1058 Add S0, S1, S0
	1059 NotImplemented "Instruction FCMP not yet implemented."
	1060 Move X21, [X19+144]
	1061 Compare X21, 0
	1062 JumpIfEqual {1451}
	1063 Move X0, X21
	1064 Move X1, X31
	1065 Call Rigidbody.get_velocity, X0
	1066 Move V3, [X19+448]
	1067 Move V4, [X19+452]
	1068 Move V5, [X19+456]
	1069 Move X0, X21
	1070 Add S0, S0, S3
	1071 Add S1, S1, S4
	1072 Add S2, S2, S5
	1073 Move X1, X31
	1074 Call Rigidbody.set_velocity, X0, X1
	1075 Move W8, [X23+1087]
	1076 Compare W8, 0
	1077 JumpIfNotEqual {1083}
	1078 Move X0, 0x2245000
	1079 Move X0, [X0+1152]
	1080 Call 0x1B6F7F0
	1081 Move W8, 1
	1082 Move [X23+1087], W8
	1083 Move X8, [X20]
	1084 Move X8, [X8+184]
	1085 Move V0, [X8]
	1086 Move V1, [X8+8]
	1087 Move [X19+448], D0
	1088 Move [X19+456], S1
	1089 Compare W29, 0
	1090 JumpIfEqual {1243}
	1091 Move X0, X19
	1092 Call Player.CurrentLeftHandPosition, X0
	1093 Move X20, 0x251B000
	1094 Move S11, [X19+104]
	1095 Move S12, [X19+108]
	1096 Move W8, [X20+1088]
	1097 Move V13, [X19+112]
	1098 Move V8, V0
	1099 Move V9, V1
	1100 Move V10, V2
	1101 Compare W8, 0
	1102 JumpIfNotEqual {1108}
	1103 Move X0, 0x2245000
	1104 Move X0, [X0+1160]
	1105 Call 0x1B6F7F0
	1106 Move W8, 1
	1107 Move [X20+1088], W8
	1108 Move X21, 0x2245000
	1109 Move X21, [X21+1160]
	1110 Subtract S11, S8, S11
	1111 Subtract S9, S9, S12
	1112 Subtract S8, S10, S13
	1113 Move X0, [X21]
	1114 Move W8, [X0+224]
	1115 Compare W8, 0
	1116 JumpIfNotEqual {1118}
	1117 Call 0x1B6F8F8
	1118 Multiply S0, S11, S11
	1119 Multiply S1, S9, S9
	1120 Move V2, [X19+160]
	1121 Add S0, S0, S1
	1122 Multiply S1, S8, S8
	1123 Add S0, S0, S1
	1124 NotImplemented "Instruction FSQRT not yet implemented."
	1125 NotImplemented "Instruction FCMP not yet implemented."
	1126 Move X0, [X19+40]
	1127 Compare X0, 0
	1128 JumpIfEqual {1451}
	1129 Move X1, X31
	1130 Call Component.get_transform, X0
	1131 Compare X0, 0
	1132 JumpIfEqual {1451}
	1133 Move X1, X31
	1134 Call Transform.get_position, X0
	1135 Move V14, [X19+176]
	1136 Move V9, [X19+184]
	1137 Move X0, X19
	1138 Move V8, V0
	1139 Move V12, V1
	1140 Move V13, V2
	1141 Call Player.CurrentLeftHandPosition, X0
	1142 Move X0, [X19+40]
	1143 Compare X0, 0
	1144 JumpIfEqual {1451}
	1145 Move X1, X31
	1146 Move [X31+48], S2
	1147 Move [X31+64], S1
	1148 Move [X31+80], S0
	1149 Move [X31+96], S9
	1150 Call Component.get_transform, X0
	1151 Compare X0, 0
	1152 JumpIfEqual {1451}
	1153 Move X1, X31
	1154 Call Transform.get_position, X0
	1155 Move X0, X19
	1156 Move [X31+40], S2
	1157 Move [X31+48], S0
	1158 Move V15, V1
	1159 Call Player.CurrentLeftHandPosition, X0
	1160 Move X0, [X19+40]
	1161 Compare X0, 0
	1162 JumpIfEqual {1451}
	1163 Move X1, X31
	1164 Move V9, V0
	1165 Move V10, V1
	1166 Move V11, V2
	1167 Call Component.get_transform, X0
	1168 Compare X0, 0
	1169 JumpIfEqual {1451}
	1170 Move X1, X31
	1171 Move [X31+24], S14
	1172 Move [X31+32], S13
	1173 Move [X31+32], S12
	1174 Move [X31+40], S8
	1175 Call Transform.get_position, X0
	1176 Move W8, [X20+1088]
	1177 Move V12, V0
	1178 Move V13, V1
	1179 Move V8, V2
	1180 Compare W8, 0
	1181 JumpIfNotEqual {1187}
	1182 Move X0, 0x2245000
	1183 Move X0, [X0+1160]
	1184 Call 0x1B6F7F0
	1185 Move W8, 1
	1186 Move [X20+1088], W8
	1187 Move X0, [X21]
	1188 Subtract S14, S9, S12
	1189 Subtract S10, S10, S13
	1190 Subtract S9, S11, S8
	1191 Move W8, [X0+224]
	1192 Compare W8, 0
	1193 JumpIfNotEqual {1195}
	1194 Call 0x1B6F8F8
	1195 Move V0, [X31+80]
	1196 Move V1, [X31+44]
	1197 Multiply S2, S9, S9
	1198 Move V9, [X19+176]
	1199 Add X0, X19, 268
	1200 Subtract S11, S0, S1
	1201 Move V0, [X31+64]
	1202 Move V1, [X31+40]
	1203 Move X1, X31
	1204 Subtract S12, S0, S15
	1205 Move V0, [X31+48]
	1206 Subtract S8, S0, S1
	1207 Multiply S0, S14, S14
	1208 Multiply S1, S10, S10
	1209 Add S0, S0, S1
	1210 Add S0, S2, S0
	1211 NotImplemented "Instruction FSQRT not yet implemented."
	1212 Call LayerMask.get_value, X0
	1213 Move X8, 0x2245000
	1214 Move X8, [X8+1216]
	1215 Move W20, W0
	1216 Move X8, [X8]
	1217 Move W9, [X8+224]
	1218 Compare W9, 0
	1219 JumpIfNotEqual {1222}
	1220 Move X0, X8
	1221 Call 0x1B6F8F8
	1222 Move S0, [X31+24]
	1223 Move S2, [X31+28]
	1224 Move V1, [X31+96]
	1225 Subtract S7, S10, S9
	1226 Add X0, X31, 160
	1227 Move V4, V11
	1228 Multiply S3, S0, S1
	1229 Move S1, [X31+32]
	1230 Move S0, [X31+36]
	1231 Move V5, V12
	1232 Move V6, V8
	1233 Move W1, W20
	1234 Move X2, X31
	1235 Call Physics.SphereCast, X0, V0, X1, X2, V1, X3
	1236 Move TEMP, X0
	1237 And TEMP, TEMP, 1
	1238 Compare TEMP, 1
	1239 JumpIfNotEqual {1396}
	1240 Move W21, 1
	1241 Compare W24, 0
	1242 JumpIfNotEqual {1246}
	1243 Move W21, W31
	1244 Compare W24, 0
	1245 JumpIfEqual {1404}
	1246 Move X0, X19
	1247 Call Player.CurrentRightHandPosition, X0
	1248 Move X20, 0x251B000
	1249 Move S11, [X19+116]
	1250 Move S12, [X19+120]
	1251 Move W8, [X20+1088]
	1252 Move V13, [X19+124]
	1253 Move V8, V0
	1254 Move V9, V1
	1255 Move V10, V2
	1256 Compare W8, 0
	1257 JumpIfNotEqual {1263}
	1258 Move X0, 0x2245000
	1259 Move X0, [X0+1160]
	1260 Call 0x1B6F7F0
	1261 Move W8, 1
	1262 Move [X20+1088], W8
	1263 Move X22, 0x2245000
	1264 Move X22, [X22+1160]
	1265 Subtract S11, S8, S11
	1266 Subtract S9, S9, S12
	1267 Subtract S8, S10, S13
	1268 Move X0, [X22]
	1269 Move W8, [X0+224]
	1270 Compare W8, 0
	1271 JumpIfNotEqual {1273}
	1272 Call 0x1B6F8F8
	1273 Multiply S0, S11, S11
	1274 Multiply S1, S9, S9
	1275 Move V2, [X19+160]
	1276 Add S0, S0, S1
	1277 Multiply S1, S8, S8
	1278 Add S0, S0, S1
	1279 NotImplemented "Instruction FSQRT not yet implemented."
	1280 NotImplemented "Instruction FCMP not yet implemented."
	1281 Move X0, [X19+40]
	1282 Compare X0, 0
	1283 JumpIfEqual {1451}
	1284 Move X1, X31
	1285 Call Component.get_transform, X0
	1286 Compare X0, 0
	1287 JumpIfEqual {1451}
	1288 Move X1, X31
	1289 Call Transform.get_position, X0
	1290 Move V14, [X19+176]
	1291 Move V9, [X19+184]
	1292 Move X0, X19
	1293 Move V8, V0
	1294 Move V12, V1
	1295 Move V13, V2
	1296 Call Player.CurrentRightHandPosition, X0
	1297 Move X0, [X19+40]
	1298 Compare X0, 0
	1299 JumpIfEqual {1451}
	1300 Move X1, X31
	1301 Move [X31+48], S2
	1302 Move [X31+64], S1
	1303 Move [X31+80], S0
	1304 Move [X31+96], S9
	1305 Call Component.get_transform, X0
	1306 Compare X0, 0
	1307 JumpIfEqual {1451}
	1308 Move X1, X31
	1309 Call Transform.get_position, X0
	1310 Move X0, X19
	1311 Move [X31+40], S2
	1312 Move [X31+48], S0
	1313 Move V15, V1
	1314 Call Player.CurrentRightHandPosition, X0
	1315 Move X0, [X19+40]
	1316 Compare X0, 0
	1317 JumpIfEqual {1451}
	1318 Move X1, X31
	1319 Move V9, V0
	1320 Move V10, V1
	1321 Move V11, V2
	1322 Call Component.get_transform, X0
	1323 Compare X0, 0
	1324 JumpIfEqual {1451}
	1325 Move X1, X31
	1326 Move [X31+24], S14
	1327 Move [X31+32], S13
	1328 Move [X31+32], S12
	1329 Move [X31+40], S8
	1330 Call Transform.get_position, X0
	1331 Move W8, [X20+1088]
	1332 Move V12, V0
	1333 Move V13, V1
	1334 Move V8, V2
	1335 Compare W8, 0
	1336 JumpIfNotEqual {1342}
	1337 Move X0, 0x2245000
	1338 Move X0, [X0+1160]
	1339 Call 0x1B6F7F0
	1340 Move W8, 1
	1341 Move [X20+1088], W8
	1342 Move X0, [X22]
	1343 Subtract S14, S9, S12
	1344 Subtract S10, S10, S13
	1345 Subtract S9, S11, S8
	1346 Move W8, [X0+224]
	1347 Compare W8, 0
	1348 JumpIfNotEqual {1350}
	1349 Call 0x1B6F8F8
	1350 Move V0, [X31+80]
	1351 Move V1, [X31+44]
	1352 Multiply S2, S9, S9
	1353 Move V9, [X19+176]
	1354 Add X0, X19, 268
	1355 Subtract S11, S0, S1
	1356 Move V0, [X31+64]
	1357 Move V1, [X31+40]
	1358 Move X1, X31
	1359 Subtract S12, S0, S15
	1360 Move V0, [X31+48]
	1361 Subtract S8, S0, S1
	1362 Multiply S0, S14, S14
	1363 Multiply S1, S10, S10
	1364 Add S0, S0, S1
	1365 Add S0, S2, S0
	1366 NotImplemented "Instruction FSQRT not yet implemented."
	1367 Call LayerMask.get_value, X0
	1368 Move X8, 0x2245000
	1369 Move X8, [X8+1216]
	1370 Move W20, W0
	1371 Move X8, [X8]
	1372 Move W9, [X8+224]
	1373 Compare W9, 0
	1374 JumpIfNotEqual {1377}
	1375 Move X0, X8
	1376 Call 0x1B6F8F8
	1377 Move S0, [X31+24]
	1378 Move S2, [X31+28]
	1379 Move V1, [X31+96]
	1380 Subtract S7, S10, S9
	1381 Add X0, X31, 160
	1382 Move V4, V11
	1383 Multiply S3, S0, S1
	1384 Move S1, [X31+32]
	1385 Move S0, [X31+36]
	1386 Move V5, V12
	1387 Move V6, V8
	1388 Move W1, W20
	1389 Move X2, X31
	1390 Call Physics.SphereCast, X0, V0, X1, X2, V1, X3
	1391 Move TEMP, X0
	1392 And TEMP, TEMP, 1
	1393 Compare TEMP, 1
	1394 JumpIfNotEqual {1445}
	1395 Move W20, 1
	1396 Move X0, X19
	1397 Call Player.CurrentLeftHandPosition, X0
	1398 Move W21, W31
	1399 Move [X19+104], S0
	1400 Move [X19+112], S1
	1401 Move [X19+112], S2
	1402 Compare W24, 0
	1403 JumpIfNotEqual {1246}
	1404 Move W20, W31
	1405 Move X0, [X19+56]
	1406 Compare X0, 0
	1407 JumpIfEqual {1451}
	1408 Move S1, [X19+108]
	1409 Move S2, [X19+112]
	1410 Move V0, [X19+104]
	1411 Move X1, X31
	1412 Call Transform.set_position, X0, X1
	1413 Move X0, [X19+64]
	1414 Compare X0, 0
	1415 JumpIfEqual {1451}
	1416 Move S1, [X19+120]
	1417 Move S2, [X19+124]
	1418 Move V0, [X19+116]
	1419 Move X1, X31
	1420 Call Transform.set_position, X0, X1
	1421 Move [X19+272], W21
	1422 Move [X19+273], W20
	1423 Move X20, [X31+480]
	1424 Move X19, [X31+488]
	1425 Move X22, [X31+464]
	1426 Move X21, [X31+472]
	1427 Move X24, [X31+448]
	1428 Move X23, [X31+456]
	1429 Move X26, [X31+432]
	1430 Move X25, [X31+440]
	1431 Move X28, [X31+416]
	1432 Move X27, [X31+424]
	1433 Move X29, [X31+400]
	1434 Move X30, [X31+408]
	1435 Move D9, [X31+384]
	1436 Move D8, [X31+392]
	1437 Move D11, [X31+368]
	1438 Move D10, [X31+376]
	1439 Move D13, [X31+352]
	1440 Move D12, [X31+360]
	1441 Move D15, [X31+336]
	1442 Move D14, [X31+344]
	1443 Add X31, X31, 496
	1444 Return 
	1445 Move X0, X19
	1446 Call Player.CurrentRightHandPosition, X0
	1447 Move W20, W31
	1448 Move [X19+116], S0
	1449 Move [X19+124], S1
	1450 Move [X19+124], S2
	1451 Call 0x1B6FA1C
	1452 Move V8, V15
	1453 Move [X31+208], S15
	1454 Move [X31+216], S9
	1455 Move [X31+216], S10
	1456 Call 0x1B6FA1C
	1457 Move X21, X0
	1458 Move V8, V15
	1459 Move [X31+208], S15
	1460 Move [X31+216], S9
	1461 Move [X31+216], S10
	1462 Move X21, X0
	1463 Move V0, [X31+80]
	1464 Move X21, X0
	1465 Move V8, V15
	1466 Move [X31+208], S15
	1467 Move [X31+216], S0
	1468 Move V0, [X31+64]
	1469 Move [X31+216], S0
	1470 NotImplemented "Instruction CMP not yet implemented."
	1471 Move X0, X21
	1472 Call 0x3D1A840
	1473 Move X22, [X0]
	1474 Call 0x3D1A850
	1475 Move X8, 0x2249000
	1476 Move X8, [X8+344]
	1477 Add X0, X31, 112
	1478 Move X1, [X8]
	1479 Call Enumerator<ItemContactPoint>.Dispose, X0
	1480 Move V12, [X31+80]
	1481 Move V14, [X31+64]
	1482 Move X23, 0x251B000
	1483 Move V15, V8
	1484 Compare X22, 0
	1485 JumpIfEqual {412}
	1486 Move X0, X22
	1487 Call 0x1B6FA14
	1488 Move X22, X31
	1489 Move X21, X0
	1490 Move X8, 0x2249000
	1491 Move X8, [X8+344]
	1492 Move X1, [X8]
	1493 Add X0, X31, 112
	1494 Call Enumerator<ItemContactPoint>.Dispose, X0
	1495 Compare X22, 0
	1496 JumpIfNotEqual {1499}
	1497 Move X0, X21
	1498 Call 0x1C8518C
	1499 Move X0, X22
	1500 Call 0x1B6FA14
	1501 Call 0x18F56A8

Method: System.Void SetActiveHandCollisions(System.Boolean enabled)

Disassembly:
	0x01D0A0A0 MOV W0, W24
	0x01D0A0A4 MOV X1, X23
	0x01D0A0A8 MOV X2, X22
	0x01D0A0AC MOV X3, X21
	0x01D0A0B0 MOV X4, X20
	0x01D0A0B4 MOV W5, W19
	0x01D0A0B8 LDP X20, X19, [X31 + 0x40]
	0x01D0A0BC LDP X22, X21, [X31 + 0x30]
	0x01D0A0C0 LDP X24, X23, [X31 + 0x20]
	0x01D0A0C4 LDP X26, X25, [X31 + 0x10]
	0x01D0A0C8 MOV X6, X31
	0x01D0A0CC LDR X30, [X31], #0x50
	0x01D0A0D0 B 0x342B4AC
	0x01D0A0D4 STR X30, [X31 - 0x50]!
	0x01D0A0D8 STP X26, X25, [X31 + 0x10]
	0x01D0A0DC STP X24, X23, [X31 + 0x20]
	0x01D0A0E0 STP X22, X21, [X31 + 0x30]
	0x01D0A0E4 STP X20, X19, [X31 + 0x40]
	0x01D0A0E8 ADRP X26, 0x2519000
	0x01D0A0EC ADRP X25, 0x2243000
	0x01D0A0F0 LDRB W8, [X26 + 0x761]
	0x01D0A0F4 LDR X25, [X25 + 0x628]
	0x01D0A0F8 MOV W19, W5
	0x01D0A0FC MOV X20, X4
	0x01D0A100 MOV X21, X3
	0x01D0A104 MOV X22, X2
	0x01D0A108 MOV X23, X1
	0x01D0A10C MOV X24, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction ORN not yet implemented."
	004 And W8, W8, 1
	005 Move X19, X0
	006 Move [X0+275], W8
	007 Call Player.CurrentLeftHandPosition, X0
	008 Move X0, X19
	009 Move [X19+104], S0
	010 Move [X19+112], S1
	011 Move [X19+112], S2
	012 Call Player.CurrentRightHandPosition, X0
	013 Move X0, [X19+56]
	014 Move [X19+116], S0
	015 Move [X19+124], S1
	016 Move [X19+124], S2
	017 Compare X0, 0
	018 JumpIfEqual {36}
	019 Move S1, [X19+108]
	020 Move S2, [X19+112]
	021 Move V0, [X19+104]
	022 Move X1, X31
	023 Call Transform.set_position, X0, X1
	024 Move X0, [X19+64]
	025 Compare X0, 0
	026 JumpIfEqual {36}
	027 Move S1, [X19+120]
	028 Move S2, [X19+124]
	029 Move V0, [X19+116]
	030 Move X1, X31
	031 Call Transform.set_position, X0, X1
	032 NotImplemented "Instruction STRH not yet implemented."
	033 Move X30, [X31+16]
	034 Move X19, [X31+24]
	035 Return 
	036 Call 0x1B6FA1C

Method: System.Boolean IterativeCollisionSphereCast(UnityEngine.Vector3 startPosition, System.Single sphereRadius, UnityEngine.Vector3 movementVector, System.Single precision, out UnityEngine.Vector3 endPosition, System.Boolean singleHand, out UnityEngine.RaycastHit hitInfo)

Disassembly:
	0x01D09B3C FADD S0, S0, S1
	0x01D09B40 FMUL S1, S13, S13
	0x01D09B44 FADD S0, S1, S0
	0x01D09B48 FSQRT S0, S0
	0x01D09B4C FCMP S0, S14
	0x01D09B50 B.LE 0x1D09B64
	0x01D09B54 FDIV S8, S8, S0
	0x01D09B58 FDIV S9, S9, S0
	0x01D09B5C FDIV S13, S13, S0
	0x01D09B60 B 0x1D09B90
	0x01D09B64 LDRB W8, [X22 + 0x43F]
	0x01D09B68 CBNZ W8, 0x1D09B80
	0x01D09B6C ADRP X0, 0x2244000
	0x01D09B70 LDR X0, [X0 + 0x480]
	0x01D09B74 BL 0x1B6E7F0
	0x01D09B78 MOVZ W8, 0x1
	0x01D09B7C STRB W8, [X22 + 0x43F]
	0x01D09B80 LDR X8, [X21]
	0x01D09B84 LDR X8, [X8 + 0xB8]
	0x01D09B88 LDP S8, S9, [X8]
	0x01D09B8C LDR V13, [X8 + 0x8]
	0x01D09B90 ADRP X22, 0x251A000
	0x01D09B94 LDRB W8, [X22 + 0x442]
	0x01D09B98 CBNZ W8, 0x1D09BB0
	0x01D09B9C ADRP X0, 0x2244000
	0x01D09BA0 LDR X0, [X0 + 0x480]
	0x01D09BA4 BL 0x1B6E7F0
	0x01D09BA8 MOVZ W8, 0x1
	0x01D09BAC STRB W8, [X22 + 0x442]
	0x01D09BB0 LDR X8, [X21]
	0x01D09BB4 MOV V1.16B, V11.16B
	0x01D09BB8 MOV V2.16B, V12.16B
	0x01D09BBC MOV V3.16B, V8.16B
	0x01D09BC0 LDR X8, [X8 + 0xB8]
	0x01D09BC4 MOV V4.16B, V9.16B
	0x01D09BC8 MOV V5.16B, V13.16B
	0x01D09BCC MOV X0, X31
	0x01D09BD0 LDR V0, [X8 + 0x20]
	0x01D09BD4 LDR X9, [X8 + 0x18]
	0x01D09BD8 STR S0, [X31 + 0x8]
	0x01D09BDC MOV V0.16B, V10.16B
	0x01D09BE0 STR X9, [X31]
	0x01D09BE4 BL 0x1CCF6E0
	0x01D09BE8 MOV X0, X19
	0x01D09BEC MOV X1, X31
	0x01D09BF0 MOV V8.16B, V0.16B
	0x01D09BF4 BL 0x3A9B084
	0x01D09BF8 LDR X8, [X19 + 0x28]
	0x01D09BFC CBZ X8, 0x1D09CC0
	0x01D09C00 MOV X20, X0
	0x01D09C04 MOV X0, X8
	0x01D09C08 MOV X1, X31
	0x01D09C0C BL 0x3A9B084
	0x01D09C10 CBZ X0, 0x1D09CC0
	0x01D09C14 MOV X1, X31
	0x01D09C18 BL 0x3AA7658
	0x01D09C1C LDRB W8, [X22 + 0x442]
	0x01D09C20 MOV V9.16B, V0.16B
	0x01D09C24 MOV V10.16B, V1.16B
	0x01D09C28 MOV V11.16B, V2.16B
	0x01D09C2C CBNZ W8, 0x1D09C44
	0x01D09C30 ADRP X0, 0x2244000
	0x01D09C34 LDR X0, [X0 + 0x480]
	0x01D09C38 BL 0x1B6E7F0
	0x01D09C3C MOVZ W8, 0x1
	0x01D09C40 STRB W8, [X22 + 0x442]
	0x01D09C44 CBZ X20, 0x1D09CC0
	0x01D09C48 LDR X8, [X21]
	0x01D09C4C MOV X0, X20
	0x01D09C50 MOV V0.16B, V9.16B
	0x01D09C54 MOV V1.16B, V10.16B
	0x01D09C58 LDR X8, [X8 + 0xB8]
	0x01D09C5C MOV V2.16B, V11.16B
	0x01D09C60 MOV V6.16B, V8.16B
	0x01D09C64 MOV X1, X31
	0x01D09C68 LDP S4, S5, [X8 + 0x1C]
	0x01D09C6C LDR V3, [X8 + 0x18]
	0x01D09C70 BL 0x3AA874C
	0x01D09C74 LDR X20, [X19 + 0x90]
	0x01D09C78 MOV X0, X19
	0x01D09C7C MOV X1, X31
	0x01D09C80 BL 0x3A9B084
	0x01D09C84 CBZ X0, 0x1D09CC0
	0x01D09C88 MOV X1, X31
	0x01D09C8C BL 0x3AA5FBC
	0x01D09C90 CBZ X20, 0x1D09CC0
	0x01D09C94 MOV X0, X20
	0x01D09C98 LDP X20, X19, [X31 + 0x70]
	0x01D09C9C LDP X22, X21, [X31 + 0x60]
	0x01D09CA0 LDP X30, X23, [X31 + 0x50]
	0x01D09CA4 LDP D9, D8, [X31 + 0x40]
	0x01D09CA8 LDP D11, D10, [X31 + 0x30]
	0x01D09CAC LDP D13, D12, [X31 + 0x20]
	0x01D09CB0 LDR V14, [X31 + 0x10]
	0x01D09CB4 MOV X1, X31
	0x01D09CB8 ADD X31, X31, 0x80
	0x01D09CBC B 0x3AF6D4C
	0x01D09CC0 BL 0x1B6EA1C
	0x01D09CC4 STR D10, [X31 - 0x30]!
	0x01D09CC8 STP D9, D8, [X31 + 0x10]
	0x01D09CCC STP X30, X19, [X31 + 0x20]
	0x01D09CD0 MOV V8.16B, V2.16B
	0x01D09CD4 MOV V9.16B, V1.16B
	0x01D09CD8 MOV V10.16B, V0.16B
	0x01D09CDC MOV V0.16B, V3.16B
	0x01D09CE0 MOV V1.16B, V4.16B
	0x01D09CE4 MOV V2.16B, V5.16B
	0x01D09CE8 MOV X19, X0
	0x01D09CEC BL 0x1D099E0
	0x01D09CF0 MOV X0, X19
	0x01D09CF4 MOV V1.16B, V9.16B
	0x01D09CF8 MOV V2.16B, V8.16B
	0x01D09CFC LDP X30, X19, [X31 + 0x20]
	0x01D09D00 LDP D9, D8, [X31 + 0x10]
	0x01D09D04 MOV V0.16B, V10.16B
	0x01D09D08 LDR V10, [X31], #0x30
	0x01D09D0C B 0x1D09830
	0x01D09D10 STR X30, [X31 - 0x30]!
	0x01D09D14 STP X22, X21, [X31 + 0x10]
	0x01D09D18 STP X20, X19, [X31 + 0x20]
	0x01D09D1C ADRP X22, 0x251A000
	0x01D09D20 ADRP X21, 0x2248000
	0x01D09D24 ADRP X20, 0x2248000
	0x01D09D28 LDRB W8, [X22 + 0x75B]
	0x01D09D2C LDR X21, [X21 + 0x198]
	0x01D09D30 LDR X20, [X20 + 0x1A0]
	0x01D09D34 MOV X19, X0
	0x01D09D38 TBNZ X8, 0x0, 0x1D09D5C
	0x01D09D3C ADRP X0, 0x2248000
	0x01D09D40 LDR X0, [X0 + 0x1A0]
	0x01D09D44 BL 0x1B6E7F0
	0x01D09D48 ADRP X0, 0x2248000
	0x01D09D4C LDR X0, [X0 + 0x198]
	0x01D09D50 BL 0x1B6E7F0
	0x01D09D54 MOVZ W8, 0x1
	0x01D09D58 STRB W8, [X22 + 0x75B]
	0x01D09D5C ADRP X8, 0xFFFFFFFFFEDA3000
	0x01D09D60 ADRP X9, 0xFFFFFFFFFEDA4000
	0x01D09D64 LDR V0, [X8 + 0xC98]
	0x01D09D68 LDR V1, [X9 + 0xD8]
	0x01D09D6C MOVZ W8, 0xB852
	0x01D09D70 MOVK W8, 0x3F7E0000
	0x01D09D74 STUR D0, [X19 + 0x9C]
	0x01D09D78 STR D1, [X19 + 0xB0]
	0x01D09D7C STR W8, [X19 + 0xB8]
	0x01D09D80 LDR X0, [X21]
	0x01D09D84 BL 0x1B6EA0C
	0x01D09D88 LDR X1, [X20]
	0x01D09D8C MOV X20, X0
	0x01D09D90 BL 0x2F43A44
	0x01D09D94 STR X20, [X19 + 0x1D0]
	0x01D09D98 MOV X0, X19
	0x01D09D9C LDP X20, X19, [X31 + 0x20]
	0x01D09DA0 LDP X22, X21, [X31 + 0x10]
	0x01D09DA4 MOV X1, X31
	0x01D09DA8 LDR X30, [X31], #0x30
	0x01D09DAC B 0x3A9EEE4
	0x01D09DB0 MOV X1, X31
	0x01D09DB4 B 0x3A9EEE4
	0x01D09DB8 LDR W0, [X0 + 0x10]
	0x01D09DBC RET
	0x01D09DC0 STR W1, [X0 + 0x10]
	0x01D09DC4 RET
	0x01D09DC8 STR X30, [X31 - 0x20]!
	0x01D09DCC STP X20, X19, [X31 + 0x10]
	0x01D09DD0 MOV W19, W1
	0x01D09DD4 MOV X1, X31
	0x01D09DD8 MOV X20, X0
	0x01D09DDC BL 0x32276F8
	0x01D09DE0 STR W19, [X20 + 0x10]
	0x01D09DE4 LDP X20, X19, [X31 + 0x10]
	0x01D09DE8 LDR X30, [X31], #0x20
	0x01D09DEC RET
	0x01D09DF0 MOV W0, W1
	0x01D09DF4 RET
	0x01D09DF8 STR X30, [X31 - 0x30]!
	0x01D09DFC STP X22, X21, [X31 + 0x10]
	0x01D09E00 STP X20, X19, [X31 + 0x20]
	0x01D09E04 ADRP X22, 0x251A000
	0x01D09E08 ADRP X21, 0x2244000
	0x01D09E0C LDRB W8, [X22 + 0x75C]
	0x01D09E10 LDR X21, [X21 + 0x628]
	0x01D09E14 MOV W19, W1
	0x01D09E18 MOV X20, X0
	0x01D09E1C TBNZ X8, 0x0, 0x1D09E34
	0x01D09E20 ADRP X0, 0x2244000
	0x01D09E24 LDR X0, [X0 + 0x628]
	0x01D09E28 BL 0x1B6E7F0
	0x01D09E2C MOVZ W8, 0x1
	0x01D09E30 STRB W8, [X22 + 0x75C]
	0x01D09E34 LDR X0, [X21]
	0x01D09E38 LDR W20, [X20 + 0x10]
	0x01D09E3C LDR W8, [X0 + 0xE0]
	0x01D09E40 CBNZ W8, 0x1D09E48
	0x01D09E44 BL 0x1B6E8F8
	0x01D09E48 MOV W0, W19
	0x01D09E4C MOV W1, W20
	0x01D09E50 LDP X20, X19, [X31 + 0x20]
	0x01D09E54 LDP X22, X21, [X31 + 0x10]
	0x01D09E58 MOV X2, X31
	0x01D09E5C LDR X30, [X31], #0x30
	0x01D09E60 B 0x342AC84
	0x01D09E64 STR X30, [X31 - 0x50]!
	0x01D09E68 STP X26, X25, [X31 + 0x10]
	0x01D09E6C STP X24, X23, [X31 + 0x20]
	0x01D09E70 STP X22, X21, [X31 + 0x30]
	0x01D09E74 STP X20, X19, [X31 + 0x40]
	0x01D09E78 ADRP X26, 0x251A000
	0x01D09E7C ADRP X25, 0x2244000
	0x01D09E80 LDRB W8, [X26 + 0x75D]
	0x01D09E84 LDR X25, [X25 + 0x628]
	0x01D09E88 MOV W19, W5
	0x01D09E8C MOV X20, X4
	0x01D09E90 MOV X21, X3
	0x01D09E94 MOV X22, X2
	0x01D09E98 MOV X23, X1
	0x01D09E9C MOV X24, X0
	0x01D09EA0 TBNZ X8, 0x0, 0x1D09EB8
	0x01D09EA4 ADRP X0, 0x2244000
	0x01D09EA8 LDR X0, [X0 + 0x628]
	0x01D09EAC BL 0x1B6E7F0
	0x01D09EB0 MOVZ W8, 0x1
	0x01D09EB4 STRB W8, [X26 + 0x75D]
	0x01D09EB8 LDR X0, [X25]
	0x01D09EBC LDR W24, [X24 + 0x10]
	0x01D09EC0 LDR W8, [X0 + 0xE0]
	0x01D09EC4 CBNZ W8, 0x1D09ECC
	0x01D09EC8 BL 0x1B6E8F8
	0x01D09ECC MOV W0, W24
	0x01D09ED0 MOV X1, X23
	0x01D09ED4 MOV X2, X22
	0x01D09ED8 MOV X3, X21
	0x01D09EDC MOV X4, X20
	0x01D09EE0 MOV W5, W19
	0x01D09EE4 LDP X20, X19, [X31 + 0x40]
	0x01D09EE8 LDP X22, X21, [X31 + 0x30]
	0x01D09EEC LDP X24, X23, [X31 + 0x20]
	0x01D09EF0 LDP X26, X25, [X31 + 0x10]
	0x01D09EF4 MOV X6, X31
	0x01D09EF8 LDR X30, [X31], #0x50
	0x01D09EFC B 0x342B0E0
	0x01D09F00 STR X30, [X31 - 0x50]!
	0x01D09F04 STP X26, X25, [X31 + 0x10]
	0x01D09F08 STP X24, X23, [X31 + 0x20]
	0x01D09F0C STP X22, X21, [X31 + 0x30]
	0x01D09F10 STP X20, X19, [X31 + 0x40]
	0x01D09F14 ADRP X26, 0x251A000
	0x01D09F18 ADRP X25, 0x2244000
	0x01D09F1C LDRB W8, [X26 + 0x75E]
	0x01D09F20 LDR X25, [X25 + 0x628]
	0x01D09F24 MOV W19, W5
	0x01D09F28 MOV X20, X4
	0x01D09F2C MOV X21, X3
	0x01D09F30 MOV X22, X2
	0x01D09F34 MOV X23, X1
	0x01D09F38 MOV X24, X0
	0x01D09F3C TBNZ X8, 0x0, 0x1D09F54
	0x01D09F40 ADRP X0, 0x2244000
	0x01D09F44 LDR X0, [X0 + 0x628]
	0x01D09F48 BL 0x1B6E7F0
	0x01D09F4C MOVZ W8, 0x1
	0x01D09F50 STRB W8, [X26 + 0x75E]
	0x01D09F54 LDR X0, [X25]
	0x01D09F58 LDR W24, [X24 + 0x10]
	0x01D09F5C LDR W8, [X0 + 0xE0]
	0x01D09F60 CBNZ W8, 0x1D09F68
	0x01D09F64 BL 0x1B6E8F8
	0x01D09F68 MOV W0, W24
	0x01D09F6C MOV X1, X23
	0x01D09F70 MOV X2, X22

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X25
	012 Move [X31+112], X24
	013 Move [X31+120], X23
	014 Move [X31+128], X22
	015 Move [X31+136], X21
	016 Move [X31+144], X20
	017 Move [X31+152], X19
	018 Move X23, 0x251B000
	019 Move W8, [X23+1880]
	020 Move X20, X3
	021 Move W22, W2
	022 Move X19, X1
	023 Move V8, V7
	024 Move V13, V6
	025 Move V14, V5
	026 Move V15, V4
	027 Move V12, V3
	028 Move V9, V2
	029 Move V10, V1
	030 Move V11, V0
	031 Move X21, X0
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {44}
	036 Move X0, 0x2249000
	037 Move X0, [X0+392]
	038 Call 0x1B6F7F0
	039 Move X0, 0x2245000
	040 Move X0, [X0+1144]
	041 Call 0x1B6F7F0
	042 Move W8, 1
	043 Move [X23+1880], W8
	044 Move [X31+24], S12
	045 Multiply S12, S12, S8
	046 Move X0, X21
	047 Move V0, V11
	048 Move V1, V10
	049 Move V2, V9
	050 Move V3, V12
	051 Move V4, V15
	052 Move V5, V14
	053 Move V6, V13
	054 Move V7, V8
	055 Move X1, X19
	056 Move X2, X20
	057 Call Player.CollisionsSphereCast, X0, X1, V0, X2, V1, X3, X4
	058 Move [X31+28], S8
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {97}
	063 Move S12, [X19]
	064 Move S1, [X19+4]
	065 Move V0, [X19+8]
	066 Move X0, X20
	067 Move X1, X31
	068 Move [X31+16], S0
	069 Move [X31+24], S1
	070 Call RaycastHit.get_collider, X0
	071 Compare X0, 0
	072 JumpIfEqual {319}
	073 Move X8, 0x2249000
	074 Move X8, [X8+392]
	075 Move X1, [X8]
	076 Call 0x2090DE8, X0
	077 Move X8, 0x2245000
	078 Move X8, [X8+1144]
	079 Move X23, X0
	080 Move X8, [X8]
	081 Move W9, [X8+224]
	082 Compare W9, 0
	083 JumpIfNotEqual {86}
	084 Move X0, X8
	085 Call 0x1B6F8F8
	086 Move X0, X23
	087 Move X1, X31
	088 Move X2, X31
	089 Call Object.op_Inequality, X0, X1
	090 Move TEMP, X0
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfNotEqual {196}
	094 Compare X23, 0
	095 JumpIfEqual {319}
	096 Move V8, [X23+32]
	097 Move X22, 0x251B000
	098 Move W8, [X22+1089]
	099 Compare W8, 0
	100 JumpIfNotEqual {106}
	101 Move X0, 0x2245000
	102 Move X0, [X0+1160]
	103 Call 0x1B6F7F0
	104 Move W8, 1
	105 Move [X22+1089], W8
	106 Move X24, 0x2245000
	107 Move X24, [X24+1160]
	108 Move X0, [X24]
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {113}
	112 Call 0x1B6F8F8
	113 Move X8, -19263488
	114 Multiply S0, S15, S15
	115 Multiply S1, S14, S14
	116 Move V3, [X8+2916]
	117 Move X22, 0x2245000
	118 Multiply S2, S13, S13
	119 Add S0, S0, S1
	120 Move X22, [X22+1152]
	121 Add S0, S2, S0
	122 NotImplemented "Instruction FSQRT not yet implemented."
	123 NotImplemented "Instruction FCMP not yet implemented."
	124 Move X23, 0x251B000
	125 NotImplemented "Instruction FDIV not yet implemented."
	126 NotImplemented "Instruction FDIV not yet implemented."
	127 NotImplemented "Instruction FDIV not yet implemented."
	128 Move W8, [X23+1087]
	129 Compare W8, 0
	130 JumpIfNotEqual {136}
	131 Move X0, 0x2245000
	132 Move X0, [X0+1152]
	133 Call 0x1B6F7F0
	134 Move W8, 1
	135 Move [X23+1087], W8
	136 Move X8, [X22]
	137 Move X8, [X8+184]
	138 Move S15, [X8]
	139 Move S14, [X8+4]
	140 Move V13, [X8+8]
	141 Move X25, 0x251B000
	142 Move W8, [X25+1088]
	143 Compare W8, 0
	144 JumpIfNotEqual {150}
	145 Move X0, 0x2245000
	146 Move X0, [X0+1160]
	147 Call 0x1B6F7F0
	148 Move W8, 1
	149 Move [X25+1088], W8
	150 Move X0, [X24]
	151 Move W8, [X0+224]
	152 Compare W8, 0
	153 JumpIfNotEqual {155}
	154 Call 0x1B6F8F8
	155 Move X8, -19263488
	156 Move V0, [X8+2404]
	157 Move X9, -19263488
	158 Move V1, [X9+3344]
	159 Move X0, X21
	160 Multiply S0, S12, S0
	161 Add S0, S0, S8
	162 Multiply S4, S0, S15
	163 Multiply S5, S0, S14
	164 Multiply S6, S0, S13
	165 Move V0, [X31+28]
	166 Multiply S3, S12, S1
	167 Move V2, V9
	168 Move X1, X19
	169 Multiply S7, S0, S1
	170 Move V0, V11
	171 Move V1, V10
	172 Move X2, X20
	173 Call Player.CollisionsSphereCast, X0, X1, V0, X2, V1, X3, X4
	174 Move TEMP, X0
	175 And TEMP, TEMP, 1
	176 Compare TEMP, 1
	177 JumpIfNotEqual {181}
	178 Move [X19], S11
	179 Move [X19+8], S10
	180 Move [X19+8], S9
	181 Move W8, [X23+1087]
	182 Compare W8, 0
	183 JumpIfNotEqual {189}
	184 Move X0, 0x2245000
	185 Move X0, [X0+1152]
	186 Call 0x1B6F7F0
	187 Move W8, 1
	188 Move [X23+1087], W8
	189 Move X8, [X22]
	190 Move W0, W31
	191 Move X8, [X8+184]
	192 Move V0, [X8]
	193 Move V1, [X8+8]
	194 Move [X19], D0
	195 Move [X19+8], S1
	196 Move TEMP, X22
	197 And TEMP, TEMP, 1
	198 Compare TEMP, 1
	199 JumpIfNotEqual {202}
	200 Move X8, -19263488
	201 Move V8, [X8+3556]
	202 Move V8, [X21+180]
	203 Move X0, X20
	204 Move X1, X31
	205 Add S15, S11, S15
	206 Add S14, S10, S14
	207 Add S13, S9, S13
	208 Call RaycastHit.get_normal, X0
	209 Move X22, 0x251B000
	210 Move W8, [X22+2026]
	211 Move V11, V0
	212 Move V9, V1
	213 Move V10, V2
	214 Compare W8, 0
	215 JumpIfNotEqual {221}
	216 Move X0, 0x2249000
	217 Move X0, [X0+400]
	218 Call 0x1B6F7F0
	219 Move W8, 1
	220 Move [X22+2026], W8
	221 Move X8, 0x2249000
	222 Move X8, [X8+400]
	223 Move V1, [X31+20]
	224 Multiply S2, S9, S9
	225 Subtract S0, S15, S12
	226 Move X8, [X8]
	227 Subtract S3, S14, S1
	228 Multiply S1, S11, S11
	229 Add S1, S1, S2
	230 Move X8, [X8+184]
	231 Multiply S2, S10, S10
	232 Add S1, S2, S1
	233 Move V2, [X31+16]
	234 Move V4, [X8]
	235 Move [X31+8], S13
	236 Move [X31+16], S12
	237 NotImplemented "Instruction FCMP not yet implemented."
	238 Subtract S4, S13, S2
	239 Multiply S2, S0, S11
	240 Multiply S5, S3, S9
	241 Multiply S6, S4, S10
	242 Add S2, S2, S5
	243 Add S2, S6, S2
	244 Multiply S5, S11, S2
	245 Multiply S6, S9, S2
	246 Multiply S2, S10, S2
	247 NotImplemented "Instruction FDIV not yet implemented."
	248 NotImplemented "Instruction FDIV not yet implemented."
	249 NotImplemented "Instruction FDIV not yet implemented."
	250 Subtract S0, S0, S5
	251 Subtract S3, S3, S6
	252 Subtract S4, S4, S1
	253 Multiply S9, S8, S0
	254 Multiply S12, S8, S3
	255 Multiply S11, S8, S4
	256 Move S13, [X31+24]
	257 Move S8, [X31+28]
	258 Move S0, [X19]
	259 Move S1, [X19+4]
	260 Move V2, [X19+8]
	261 Move X0, X21
	262 Multiply S10, S8, S8
	263 Move V3, V13
	264 Move V4, V9
	265 Move V5, V12
	266 Move V6, V11
	267 Move V7, V10
	268 Move X1, X19
	269 Move X2, X20
	270 Call Player.CollisionsSphereCast, X0, X1, V0, X2, V1, X3, X4
	271 Move TEMP, X0
	272 And TEMP, TEMP, 1
	273 Compare TEMP, 1
	274 JumpIfEqual {300}
	275 Move V5, V14
	276 Move S14, [X31+12]
	277 Move S3, [X31+16]
	278 Multiply S7, S10, S8
	279 Move X0, X21
	280 Move X1, X19
	281 Add S0, S14, S9
	282 Move V9, [X31+20]
	283 Add S2, S3, S11
	284 Move V11, V3
	285 Move V3, [X31+8]
	286 Add S1, S9, S12
	287 Subtract S4, S15, S0
	288 Subtract S5, S5, S1
	289 Subtract S6, S3, S2
	290 Move V3, V13
	291 Move X2, X20
	292 Call Player.CollisionsSphereCast, X0, X1, V0, X2, V1, X3, X4
	293 Move TEMP, X0
	294 And TEMP, TEMP, 1
	295 Compare TEMP, 1
	296 JumpIfEqual {300}
	297 Move [X19], S14
	298 Move [X19+8], S9
	299 Move [X19+8], S11
	300 Move W0, 1
	301 Move X20, [X31+144]
	302 Move X19, [X31+152]
	303 Move X22, [X31+128]
	304 Move X21, [X31+136]
	305 Move X24, [X31+112]
	306 Move X23, [X31+120]
	307 Move X30, [X31+96]
	308 Move X25, [X31+104]
	309 Move D9, [X31+80]
	310 Move D8, [X31+88]
	311 Move D11, [X31+64]
	312 Move D10, [X31+72]
	313 Move D13, [X31+48]
	314 Move D12, [X31+56]
	315 Move D15, [X31+32]
	316 Move D14, [X31+40]
	317 Add X31, X31, 160
	318 Return X0
	319 Call 0x1B6FA1C

Method: System.Boolean CollisionsSphereCast(UnityEngine.Vector3 startPosition, System.Single sphereRadius, UnityEngine.Vector3 movementVector, System.Single precision, out UnityEngine.Vector3 finalPosition, out UnityEngine.RaycastHit hitInfo)

Disassembly:
	0x01D0A110 TBNZ X8, 0x0, 0x1D0A128
	0x01D0A114 ADRP X0, 0x2243000
	0x01D0A118 LDR X0, [X0 + 0x628]
	0x01D0A11C BL 0x1B6E7F0
	0x01D0A120 MOVZ W8, 0x1
	0x01D0A124 STRB W8, [X26 + 0x761]
	0x01D0A128 LDR X0, [X25]
	0x01D0A12C LDR W24, [X24 + 0x10]
	0x01D0A130 LDR W8, [X0 + 0xE0]
	0x01D0A134 CBNZ W8, 0x1D0A13C
	0x01D0A138 BL 0x1B6E8F8
	0x01D0A13C MOV W0, W24
	0x01D0A140 MOV X1, X23
	0x01D0A144 MOV X2, X22
	0x01D0A148 MOV X3, X21
	0x01D0A14C MOV X4, X20
	0x01D0A150 MOV W5, W19
	0x01D0A154 LDP X20, X19, [X31 + 0x40]
	0x01D0A158 LDP X22, X21, [X31 + 0x30]
	0x01D0A15C LDP X24, X23, [X31 + 0x20]
	0x01D0A160 LDP X26, X25, [X31 + 0x10]
	0x01D0A164 MOV X6, X31
	0x01D0A168 LDR X30, [X31], #0x50
	0x01D0A16C B 0x342B7DC
	0x01D0A170 STP X30, X27, [X31 - 0x50]!
	0x01D0A174 STP X26, X25, [X31 + 0x10]
	0x01D0A178 STP X24, X23, [X31 + 0x20]
	0x01D0A17C STP X22, X21, [X31 + 0x30]
	0x01D0A180 STP X20, X19, [X31 + 0x40]
	0x01D0A184 ADRP X27, 0x2519000
	0x01D0A188 ADRP X26, 0x2243000
	0x01D0A18C LDRB W8, [X27 + 0x762]
	0x01D0A190 LDR X26, [X26 + 0x628]
	0x01D0A194 MOV W19, W6
	0x01D0A198 MOV X20, X5
	0x01D0A19C MOV X21, X4
	0x01D0A1A0 MOV X22, X3
	0x01D0A1A4 MOV X23, X2
	0x01D0A1A8 MOV X24, X1
	0x01D0A1AC MOV X25, X0
	0x01D0A1B0 TBNZ X8, 0x0, 0x1D0A1C8
	0x01D0A1B4 ADRP X0, 0x2243000
	0x01D0A1B8 LDR X0, [X0 + 0x628]
	0x01D0A1BC BL 0x1B6E7F0
	0x01D0A1C0 MOVZ W8, 0x1
	0x01D0A1C4 STRB W8, [X27 + 0x762]
	0x01D0A1C8 LDR X0, [X26]
	0x01D0A1CC LDR W25, [X25 + 0x10]
	0x01D0A1D0 LDR W8, [X0 + 0xE0]
	0x01D0A1D4 CBNZ W8, 0x1D0A1DC
	0x01D0A1D8 BL 0x1B6E8F8
	0x01D0A1DC MOV W0, W25
	0x01D0A1E0 MOV X1, X24
	0x01D0A1E4 MOV X2, X23
	0x01D0A1E8 MOV X3, X22
	0x01D0A1EC MOV X4, X21
	0x01D0A1F0 MOV X5, X20
	0x01D0A1F4 MOV W6, W19
	0x01D0A1F8 LDP X20, X19, [X31 + 0x40]
	0x01D0A1FC LDP X22, X21, [X31 + 0x30]
	0x01D0A200 LDP X24, X23, [X31 + 0x20]
	0x01D0A204 LDP X26, X25, [X31 + 0x10]
	0x01D0A208 MOV X7, X31
	0x01D0A20C LDP X30, X27, [X31], #0x50
	0x01D0A210 B 0x342B884
	0x01D0A214 STR X30, [X31 - 0x50]!
	0x01D0A218 STP X26, X25, [X31 + 0x10]
	0x01D0A21C STP X24, X23, [X31 + 0x20]
	0x01D0A220 STP X22, X21, [X31 + 0x30]
	0x01D0A224 STP X20, X19, [X31 + 0x40]
	0x01D0A228 ADRP X26, 0x2519000
	0x01D0A22C ADRP X25, 0x2243000
	0x01D0A230 LDRB W8, [X26 + 0x763]
	0x01D0A234 LDR X25, [X25 + 0x628]
	0x01D0A238 MOV W19, W5
	0x01D0A23C MOV X20, X4
	0x01D0A240 MOV X21, X3
	0x01D0A244 MOV X22, X2
	0x01D0A248 MOV X23, X1
	0x01D0A24C MOV X24, X0
	0x01D0A250 TBNZ X8, 0x0, 0x1D0A268
	0x01D0A254 ADRP X0, 0x2243000
	0x01D0A258 LDR X0, [X0 + 0x628]
	0x01D0A25C BL 0x1B6E7F0
	0x01D0A260 MOVZ W8, 0x1
	0x01D0A264 STRB W8, [X26 + 0x763]
	0x01D0A268 LDR X0, [X25]
	0x01D0A26C LDR W24, [X24 + 0x10]
	0x01D0A270 LDR W8, [X0 + 0xE0]
	0x01D0A274 CBNZ W8, 0x1D0A27C
	0x01D0A278 BL 0x1B6E8F8
	0x01D0A27C MOV W0, W24
	0x01D0A280 MOV X1, X23
	0x01D0A284 MOV X2, X22
	0x01D0A288 MOV X3, X21
	0x01D0A28C MOV X4, X20
	0x01D0A290 MOV W5, W19
	0x01D0A294 LDP X20, X19, [X31 + 0x40]
	0x01D0A298 LDP X22, X21, [X31 + 0x30]
	0x01D0A29C LDP X24, X23, [X31 + 0x20]
	0x01D0A2A0 LDP X26, X25, [X31 + 0x10]
	0x01D0A2A4 MOV X6, X31
	0x01D0A2A8 LDR X30, [X31], #0x50
	0x01D0A2AC B 0x342B734
	0x01D0A2B0 STR X30, [X31 - 0x60]!
	0x01D0A2B4 STP X28, X27, [X31 + 0x10]
	0x01D0A2B8 STP X26, X25, [X31 + 0x20]
	0x01D0A2BC STP X24, X23, [X31 + 0x30]
	0x01D0A2C0 STP X22, X21, [X31 + 0x40]
	0x01D0A2C4 STP X20, X19, [X31 + 0x50]
	0x01D0A2C8 ADRP X28, 0x2519000
	0x01D0A2CC ADRP X27, 0x2243000
	0x01D0A2D0 LDRB W8, [X28 + 0x764]
	0x01D0A2D4 LDR X27, [X27 + 0x628]
	0x01D0A2D8 MOV W19, W7
	0x01D0A2DC MOV X20, X6
	0x01D0A2E0 MOV X21, X5
	0x01D0A2E4 MOV X22, X4
	0x01D0A2E8 MOV X23, X3
	0x01D0A2EC MOV X24, X2
	0x01D0A2F0 MOV W25, W1
	0x01D0A2F4 MOV X26, X0
	0x01D0A2F8 TBNZ X8, 0x0, 0x1D0A310
	0x01D0A2FC ADRP X0, 0x2243000
	0x01D0A300 LDR X0, [X0 + 0x628]
	0x01D0A304 BL 0x1B6E7F0
	0x01D0A308 MOVZ W8, 0x1
	0x01D0A30C STRB W8, [X28 + 0x764]
	0x01D0A310 LDR X0, [X27]
	0x01D0A314 LDR W26, [X26 + 0x10]
	0x01D0A318 LDR W8, [X0 + 0xE0]
	0x01D0A31C CBNZ W8, 0x1D0A324
	0x01D0A320 BL 0x1B6E8F8
	0x01D0A324 MOV W0, W25
	0x01D0A328 MOV W1, W26
	0x01D0A32C MOV X2, X24
	0x01D0A330 MOV X3, X23
	0x01D0A334 MOV X4, X22
	0x01D0A338 MOV X5, X21
	0x01D0A33C MOV X6, X20
	0x01D0A340 MOV W7, W19
	0x01D0A344 LDP X20, X19, [X31 + 0x50]
	0x01D0A348 LDP X22, X21, [X31 + 0x40]
	0x01D0A34C LDP X24, X23, [X31 + 0x30]
	0x01D0A350 LDP X26, X25, [X31 + 0x20]
	0x01D0A354 LDP X28, X27, [X31 + 0x10]
	0x01D0A358 STR X31, [X31 + 0x60]
	0x01D0A35C LDR X30, [X31], #0x60
	0x01D0A360 B 0x342BA84
	0x01D0A364 STR X30, [X31 - 0x20]!
	0x01D0A368 STP X20, X19, [X31 + 0x10]
	0x01D0A36C ADRP X20, 0x2519000
	0x01D0A370 ADRP X19, 0x2243000
	0x01D0A374 LDRB W8, [X20 + 0x765]
	0x01D0A378 LDR X19, [X19 + 0x4F8]
	0x01D0A37C TBNZ X8, 0x0, 0x1D0A394
	0x01D0A380 ADRP X0, 0x2243000
	0x01D0A384 LDR X0, [X0 + 0x4F8]
	0x01D0A388 BL 0x1B6E7F0
	0x01D0A38C MOVZ W8, 0x1
	0x01D0A390 STRB W8, [X20 + 0x765]
	0x01D0A394 LDR X0, [X19]
	0x01D0A398 LDR W8, [X0 + 0xE0]
	0x01D0A39C CBNZ W8, 0x1D0A3A8
	0x01D0A3A0 BL 0x1B6E8F8
	0x01D0A3A4 LDR X0, [X19]
	0x01D0A3A8 LDR X8, [X0 + 0xB8]
	0x01D0A3AC LDP X20, X19, [X31 + 0x10]
	0x01D0A3B0 LDR X0, [X8]
	0x01D0A3B4 LDR X30, [X31], #0x20
	0x01D0A3B8 RET
	0x01D0A3BC STR X30, [X31 - 0x20]!
	0x01D0A3C0 STP X20, X19, [X31 + 0x10]
	0x01D0A3C4 ADRP X20, 0x2519000
	0x01D0A3C8 ADRP X19, 0x2243000
	0x01D0A3CC LDRB W8, [X20 + 0x766]
	0x01D0A3D0 LDR X19, [X19 + 0x4F8]
	0x01D0A3D4 TBNZ X8, 0x0, 0x1D0A3EC
	0x01D0A3D8 ADRP X0, 0x2243000
	0x01D0A3DC LDR X0, [X0 + 0x4F8]
	0x01D0A3E0 BL 0x1B6E7F0
	0x01D0A3E4 MOVZ W8, 0x1
	0x01D0A3E8 STRB W8, [X20 + 0x766]
	0x01D0A3EC LDR X0, [X19]
	0x01D0A3F0 LDR W8, [X0 + 0xE0]
	0x01D0A3F4 CBNZ W8, 0x1D0A400
	0x01D0A3F8 BL 0x1B6E8F8
	0x01D0A3FC LDR X0, [X19]
	0x01D0A400 LDR X8, [X0 + 0xB8]
	0x01D0A404 LDP X20, X19, [X31 + 0x10]
	0x01D0A408 LDR X0, [X8 + 0x20]
	0x01D0A40C LDR X30, [X31], #0x20
	0x01D0A410 RET
	0x01D0A414 STP X30, X21, [X31 - 0x20]!
	0x01D0A418 STP X20, X19, [X31 + 0x10]
	0x01D0A41C ADRP X21, 0x2519000
	0x01D0A420 ADRP X20, 0x2243000
	0x01D0A424 LDRB W8, [X21 + 0x767]
	0x01D0A428 LDR X20, [X20 + 0x4F8]
	0x01D0A42C MOV X19, X0
	0x01D0A430 TBNZ X8, 0x0, 0x1D0A448
	0x01D0A434 ADRP X0, 0x2243000
	0x01D0A438 LDR X0, [X0 + 0x4F8]
	0x01D0A43C BL 0x1B6E7F0
	0x01D0A440 MOVZ W8, 0x1
	0x01D0A444 STRB W8, [X21 + 0x767]
	0x01D0A448 LDR X0, [X20]
	0x01D0A44C LDR W8, [X0 + 0xE0]
	0x01D0A450 CBNZ W8, 0x1D0A45C
	0x01D0A454 BL 0x1B6E8F8
	0x01D0A458 LDR X0, [X20]
	0x01D0A45C LDR X8, [X0 + 0xB8]
	0x01D0A460 STR X19, [X8 + 0x20]
	0x01D0A464 LDP X20, X19, [X31 + 0x10]
	0x01D0A468 LDP X30, X21, [X31], #0x20
	0x01D0A46C RET
	0x01D0A470 STR X30, [X31 - 0x20]!
	0x01D0A474 STP X20, X19, [X31 + 0x10]
	0x01D0A478 ADRP X20, 0x2519000
	0x01D0A47C ADRP X19, 0x2243000
	0x01D0A480 LDRB W8, [X20 + 0x768]
	0x01D0A484 LDR X19, [X19 + 0x4F8]
	0x01D0A488 TBNZ X8, 0x0, 0x1D0A4A0
	0x01D0A48C ADRP X0, 0x2243000
	0x01D0A490 LDR X0, [X0 + 0x4F8]
	0x01D0A494 BL 0x1B6E7F0
	0x01D0A498 MOVZ W8, 0x1
	0x01D0A49C STRB W8, [X20 + 0x768]
	0x01D0A4A0 LDR X0, [X19]
	0x01D0A4A4 LDR W8, [X0 + 0xE0]
	0x01D0A4A8 CBNZ W8, 0x1D0A4B4
	0x01D0A4AC BL 0x1B6E8F8
	0x01D0A4B0 LDR X0, [X19]
	0x01D0A4B4 LDR X8, [X0 + 0xB8]
	0x01D0A4B8 LDP X20, X19, [X31 + 0x10]
	0x01D0A4BC LDR X0, [X8 + 0x28]
	0x01D0A4C0 LDR X30, [X31], #0x20
	0x01D0A4C4 RET
	0x01D0A4C8 STP X30, X21, [X31 - 0x20]!
	0x01D0A4CC STP X20, X19, [X31 + 0x10]
	0x01D0A4D0 ADRP X21, 0x2519000
	0x01D0A4D4 ADRP X20, 0x2243000
	0x01D0A4D8 LDRB W8, [X21 + 0x769]
	0x01D0A4DC LDR X20, [X20 + 0x4F8]
	0x01D0A4E0 MOV X19, X0
	0x01D0A4E4 TBNZ X8, 0x0, 0x1D0A4FC
	0x01D0A4E8 ADRP X0, 0x2243000
	0x01D0A4EC LDR X0, [X0 + 0x4F8]
	0x01D0A4F0 BL 0x1B6E7F0
	0x01D0A4F4 MOVZ W8, 0x1
	0x01D0A4F8 STRB W8, [X21 + 0x769]
	0x01D0A4FC LDR X0, [X20]
	0x01D0A500 LDR W8, [X0 + 0xE0]
	0x01D0A504 CBNZ W8, 0x1D0A510
	0x01D0A508 BL 0x1B6E8F8
	0x01D0A50C LDR X0, [X20]
	0x01D0A510 LDR X8, [X0 + 0xB8]
	0x01D0A514 STR X19, [X8 + 0x28]
	0x01D0A518 LDP X20, X19, [X31 + 0x10]
	0x01D0A51C LDP X30, X21, [X31], #0x20
	0x01D0A520 RET
	0x01D0A524 STP X30, X27, [X31 - 0x50]!
	0x01D0A528 STP X26, X25, [X31 + 0x10]
	0x01D0A52C STP X24, X23, [X31 + 0x20]
	0x01D0A530 STP X22, X21, [X31 + 0x30]
	0x01D0A534 STP X20, X19, [X31 + 0x40]
	0x01D0A538 ADRP X20, 0x2519000
	0x01D0A53C ADRP X24, 0x2243000
	0x01D0A540 LDRB W8, [X20 + 0x76A]
	0x01D0A544 LDR X24, [X24 + 0x4F8]
	0x01D0A548 MOV X19, X0
	0x01D0A54C TBNZ X8, 0x0, 0x1D0A600
	0x01D0A550 ADRP X0, 0x2247000
	0x01D0A554 LDR X0, [X0 + 0x1A8]
	0x01D0A558 BL 0x1B6E7F0
	0x01D0A55C ADRP X0, 0x2247000
	0x01D0A560 LDR X0, [X0 + 0x1B0]
	0x01D0A564 BL 0x1B6E7F0
	0x01D0A568 ADRP X0, 0x2247000
	0x01D0A56C LDR X0, [X0 + 0x1B8]
	0x01D0A570 BL 0x1B6E7F0
	0x01D0A574 ADRP X0, 0x2243000
	0x01D0A578 LDR X0, [X0 + 0x4F8]
	0x01D0A57C BL 0x1B6E7F0
	0x01D0A580 ADRP X0, 0x2243000
	0x01D0A584 LDR X0, [X0 + 0x4E8]
	0x01D0A588 BL 0x1B6E7F0
	0x01D0A58C ADRP X0, 0x2247000
	0x01D0A590 LDR X0, [X0 + 0x1C0]
	0x01D0A594 BL 0x1B6E7F0
	0x01D0A598 ADRP X0, 0x2247000
	0x01D0A59C LDR X0, [X0 + 0x1C8]
	0x01D0A5A0 BL 0x1B6E7F0
	0x01D0A5A4 ADRP X0, 0x2243000
	0x01D0A5A8 LDR X0, [X0 + 0xBA0]
	0x01D0A5AC BL 0x1B6E7F0
	0x01D0A5B0 ADRP X0, 0x2247000
	0x01D0A5B4 LDR X0, [X0 + 0x1D0]
	0x01D0A5B8 BL 0x1B6E7F0
	0x01D0A5BC ADRP X0, 0x2243000
	0x01D0A5C0 LDR X0, [X0 + 0x478]
	0x01D0A5C4 BL 0x1B6E7F0
	0x01D0A5C8 ADRP X0, 0x2243000
	0x01D0A5CC LDR X0, [X0 + 0xB90]
	0x01D0A5D0 BL 0x1B6E7F0
	0x01D0A5D4 ADRP X0, 0x2243000
	0x01D0A5D8 LDR X0, [X0 + 0xBB8]
	0x01D0A5DC BL 0x1B6E7F0
	0x01D0A5E0 ADRP X0, 0x2245000
	0x01D0A5E4 LDR X0, [X0 + 0x9A0]
	0x01D0A5E8 BL 0x1B6E7F0
	0x01D0A5EC ADRP X0, 0x2247000
	0x01D0A5F0 LDR X0, [X0 + 0x1D8]
	0x01D0A5F4 BL 0x1B6E7F0
	0x01D0A5F8 MOVZ W8, 0x1
	0x01D0A5FC STRB W8, [X20 + 0x76A]
	0x01D0A600 LDR X0, [X24]
	0x01D0A604 ADRP X21, 0x2243000
	0x01D0A608 LDR W8, [X0 + 0xE0]
	0x01D0A60C LDR X21, [X21 + 0x478]
	0x01D0A610 CBNZ W8, 0x1D0A61C
	0x01D0A614 BL 0x1B6E8F8
	0x01D0A618 LDR X0, [X24]
	0x01D0A61C LDR X8, [X21]
	0x01D0A620 LDR X9, [X0 + 0xB8]
	0x01D0A624 LDR W10, [X8 + 0xE0]
	0x01D0A628 LDR X20, [X9]
	0x01D0A62C CBNZ W10, 0x1D0A638
	0x01D0A630 MOV X0, X8
	0x01D0A634 BL 0x1B6E8F8
	0x01D0A638 MOV X0, X20
	0x01D0A63C MOV X1, X31
	0x01D0A640 MOV X2, X31
	0x01D0A644 BL 0x3A9D6EC
	0x01D0A648 TBZ X0, 0x0, 0x1D0A690
	0x01D0A64C MOV X0, X19
	0x01D0A650 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+112], D15
	003 Move [X31+120], D14
	004 Move [X31+128], D13
	005 Move [X31+136], D12
	006 Move [X31+144], D11
	007 Move [X31+152], D10
	008 Move [X31+160], D9
	009 Move [X31+168], D8
	010 Move [X31+176], X30
	011 Move [X31+184], X25
	012 Move [X31+192], X24
	013 Move [X31+200], X23
	014 Move [X31+208], X22
	015 Move [X31+216], X21
	016 Move [X31+224], X20
	017 Move [X31+232], X19
	018 Move X22, 0x251A000
	019 Move W8, [X22+1881]
	020 Move X20, X2
	021 Move X19, X1
	022 Move V9, V7
	023 Move V11, V6
	024 Move V12, V5
	025 Move V13, V4
	026 Move V10, V3
	027 Move V8, V2
	028 Move X21, X0
	029 Move [X31+48], D1
	030 Move [X31+32], D0
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {40}
	035 Move X0, 0x2244000
	036 Move X0, [X0+1216]
	037 Call 0x1B6F7F0
	038 Move W8, 1
	039 Move [X22+1881], W8
	040 Move X25, 0x251A000
	041 Move W8, [X25+1088]
	042 NotImplemented "Instruction MOVI not yet implemented."
	043 Move [X31+92], V0
	044 Move [X31+64], V0
	045 Move [X31+72], V0
	046 Compare W8, 0
	047 JumpIfNotEqual {53}
	048 Move X0, 0x2244000
	049 Move X0, [X0+1160]
	050 Call 0x1B6F7F0
	051 Move W8, 1
	052 Move [X25+1088], W8
	053 Move X24, 0x2244000
	054 Move X24, [X24+1160]
	055 Move X23, 0x2244000
	056 Move X0, [X24]
	057 Move W8, [X0+224]
	058 Move X23, [X23+1216]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1B6F8F8
	062 Multiply S0, S13, S13
	063 Multiply S1, S12, S12
	064 Multiply S2, S11, S11
	065 Add S0, S0, S1
	066 Add X21, X21, 268
	067 Add S0, S2, S0
	068 Move X0, X21
	069 Move X1, X31
	070 NotImplemented "Instruction FSQRT not yet implemented."
	071 Call LayerMask.get_value, X0
	072 Move X8, [X23]
	073 Move W22, W0
	074 Move W9, [X8+224]
	075 Compare W9, 0
	076 JumpIfNotEqual {79}
	077 Move X0, X8
	078 Call 0x1B6F8F8
	079 Move S0, 1
	080 Subtract S0, S0, S9
	081 Multiply S14, S10, S9
	082 Multiply S0, S0, S10
	083 Add S7, S0, S15
	084 Move V0, [X31+32]
	085 Move V1, [X31+48]
	086 Move V2, V8
	087 Move V3, V14
	088 Move V4, V13
	089 Move V5, V12
	090 Move V6, V11
	091 Move X0, X20
	092 Move W1, W22
	093 Move X2, X31
	094 Call Physics.SphereCast, X0, V0, X1, X2, V1, X3
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfNotEqual {212}
	099 Move X0, X20
	100 Move X1, X31
	101 Move [X31+28], S8
	102 Call RaycastHit.get_point, X0
	103 Move X0, X20
	104 Move X1, X31
	105 Move V11, V0
	106 Move V12, V1
	107 Move V13, V2
	108 Call RaycastHit.get_normal, X0
	109 Multiply S0, S0, S10
	110 Multiply S1, S1, S10
	111 Multiply S2, S2, S10
	112 Add S8, S11, S0
	113 Add S11, S12, S1
	114 Add S15, S13, S2
	115 Move [X19], S8
	116 Move [X19+8], S11
	117 Move [X19+8], S15
	118 Move W8, [X25+1088]
	119 Compare W8, 0
	120 JumpIfNotEqual {126}
	121 Move X0, 0x2244000
	122 Move X0, [X0+1160]
	123 Call 0x1B6F7F0
	124 Move W8, 1
	125 Move [X25+1088], W8
	126 Move V0, [X31+2]
	127 Move X0, [X24]
	128 Subtract S12, S8, S0
	129 Move V0, [X31+3]
	130 Move W8, [X0+224]
	131 Subtract S13, S11, S0
	132 Move V0, [X31+28]
	133 Subtract S15, S15, S0
	134 Compare W8, 0
	135 JumpIfNotEqual {137}
	136 Call 0x1B6F8F8
	137 Multiply S0, S12, S12
	138 Multiply S1, S13, S13
	139 Add S0, S0, S1
	140 Multiply S1, S15, S15
	141 Add S0, S1, S0
	142 Move X0, X21
	143 Move X1, X31
	144 NotImplemented "Instruction FSQRT not yet implemented."
	145 Call LayerMask.get_value, X0
	146 Move X8, [X23]
	147 Move W22, W0
	148 Move W9, [X8+224]
	149 Compare W9, 0
	150 JumpIfNotEqual {153}
	151 Move X0, X8
	152 Call 0x1B6F8F8
	153 Multiply S0, S9, S9
	154 Move S1, 1
	155 Subtract S0, S1, S0
	156 Multiply S10, S0, S10
	157 Add S7, S10, S8
	158 Move V8, [X31+28]
	159 Multiply S11, S14, S9
	160 Add X0, X31, 64
	161 Move V0, [X31+32]
	162 Move V1, [X31+48]
	163 Move V2, V8
	164 Move V3, V11
	165 Move V4, V12
	166 Move V5, V13
	167 Move V6, V15
	168 Move W1, W22
	169 Move X2, X31
	170 Call Physics.SphereCast, X0, V0, X1, X2, V1, X3
	171 Move V4, [X31+32]
	172 Move V2, [X31+48]
	173 Move V0, [X19]
	174 Move V1, [X19+8]
	175 Move V4.S[1], V2.S[0]
	176 Subtract V3, V0, V4
	177 Subtract S9, S1, S8
	178 Move TEMP, X0
	179 And TEMP, TEMP, 1
	180 Compare TEMP, 1
	181 JumpIfNotEqual {258}
	182 Move X21, 0x251A000
	183 Move W8, [X21+1089]
	184 Move [X31+3], V4
	185 Compare W8, 0
	186 JumpIfNotEqual {194}
	187 Move X0, 0x2244000
	188 Move X0, [X0+1160]
	189 Move [X31], V3
	190 Call 0x1B6F7F0
	191 Move V3, [X31]
	192 Move W8, 1
	193 Move [X21+1089], W8
	194 Move X0, [X24]
	195 Move W8, [X0+224]
	196 Compare W8, 0
	197 JumpIfNotEqual {201}
	198 Move [X31], V3
	199 Call 0x1B6F8F8
	200 Move V3, [X31]
	201 Move X8, -19267584
	202 NotImplemented "Instruction INVALID not yet implemented."
	203 Move V1, [X8+2916]
	204 NotImplemented "Instruction FADDP not yet implemented."
	205 Multiply S2, S9, S9
	206 Add S0, S2, S0
	207 NotImplemented "Instruction FSQRT not yet implemented."
	208 NotImplemented "Instruction FCMP not yet implemented."
	209 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	210 NotImplemented "Instruction INVALID not yet implemented."
	211 NotImplemented "Instruction FDIV not yet implemented."
	212 Move W8, [X25+1088]
	213 Compare W8, 0
	214 JumpIfNotEqual {220}
	215 Move X0, 0x2244000
	216 Move X0, [X0+1160]
	217 Call 0x1B6F7F0
	218 Move W8, 1
	219 Move [X25+1088], W8
	220 Move X0, [X24]
	221 Move W8, [X0+224]
	222 Compare W8, 0
	223 JumpIfNotEqual {225}
	224 Call 0x1B6F8F8
	225 Move X0, X21
	226 Move X1, X31
	227 Call LayerMask.get_value, X0
	228 Move X8, [X23]
	229 Move W21, W0
	230 Move W9, [X8+224]
	231 Compare W9, 0
	232 JumpIfNotEqual {235}
	233 Move X0, X8
	234 Call 0x1B6F8F8
	235 Move X8, -19267584
	236 Move V0, [X8+3440]
	237 Move V2, V8
	238 Move V3, V13
	239 Move V4, V12
	240 Multiply S0, S14, S0
	241 Add S6, S0, S15
	242 Move V0, [X31+32]
	243 Move V1, [X31+48]
	244 Move V5, V11
	245 Move X0, X20
	246 Move W1, W21
	247 Move X2, X31
	248 Call Physics.Raycast, X0, X1, X2, V0, X3
	249 Move TEMP, X0
	250 And TEMP, TEMP, 1
	251 Compare TEMP, 1
	252 JumpIfNotEqual {321}
	253 Move V1, [X31+2]
	254 Move V0, [X31+3]
	255 Move [X19+8], S8
	256 Move [X19], S1
	257 Move [X19+8], S0
	258 Move W8, [X25+1088]
	259 Move [X31], V3
	260 Compare W8, 0
	261 JumpIfNotEqual {268}
	262 Move X0, 0x2244000
	263 Move X0, [X0+1160]
	264 Call 0x1B6F7F0
	265 Move V3, [X31]
	266 Move W8, 1
	267 Move [X25+1088], W8
	268 Move X0, [X24]
	269 Move W8, [X0+224]
	270 Compare W8, 0
	271 JumpIfNotEqual {274}
	272 Call 0x1B6F8F8
	273 Move V3, [X31]
	274 Move S10, V3.S[1]
	275 NotImplemented "Instruction INVALID not yet implemented."
	276 Multiply S1, S10, V3.S[1]
	277 Add S0, S0, S1
	278 Multiply S1, S9, S9
	279 Add S0, S0, S1
	280 Move X0, X21
	281 Move X1, X31
	282 NotImplemented "Instruction FSQRT not yet implemented."
	283 Call LayerMask.get_value, X0
	284 Move X8, [X23]
	285 Move W21, W0
	286 Move W9, [X8+224]
	287 Compare W9, 0
	288 JumpIfNotEqual {291}
	289 Move X0, X8
	290 Call 0x1B6F8F8
	291 Move X8, -19267584
	292 Move V0, [X8+3440]
	293 Add X0, X31, 64
	294 Move V3, [X31]
	295 Move V4, V10
	296 Multiply S0, S11, S0
	297 Add S6, S0, S8
	298 Move V8, [X31+28]
	299 Move V0, [X31+32]
	300 Move V1, [X31+48]
	301 Move V5, V9
	302 Move W1, W21
	303 Move V2, V8
	304 Move X2, X31
	305 Call Physics.Raycast, X0, X1, X2, V0, X3
	306 Move TEMP, X0
	307 And TEMP, TEMP, 1
	308 Compare TEMP, 1
	309 JumpIfNotEqual {374}
	310 Move V1, [X31+2]
	311 Move V0, [X31+48]
	312 Move V2, [X31+64]
	313 Move [X19+8], S8
	314 Move [X19], S1
	315 Move [X19+8], S0
	316 NotImplemented "Instruction LDUR not yet implemented."
	317 Move V1, [X31+5]
	318 Move [X20+28], V0
	319 Move [X20], V2
	320 Move [X20+8], V1
	321 Move X20, 0x251A000
	322 Move W8, [X20+1087]
	323 Compare W8, 0
	324 JumpIfNotEqual {330}
	325 Move X0, 0x2244000
	326 Move X0, [X0+1152]
	327 Call 0x1B6F7F0
	328 Move W8, 1
	329 Move [X20+1087], W8
	330 Move X8, 0x2244000
	331 Move X8, [X8+1152]
	332 Move W0, W31
	333 Move X8, [X8]
	334 Move X8, [X8+184]
	335 Move V0, [X8]
	336 Move V1, [X8+8]
	337 Move [X19], D0
	338 Move [X19+8], S1
	339 Move X21, 0x251A000
	340 Move W8, [X21+1087]
	341 Compare W8, 0
	342 JumpIfNotEqual {348}
	343 Move X0, 0x2244000
	344 Move X0, [X0+1152]
	345 Call 0x1B6F7F0
	346 Move W8, 1
	347 Move [X21+1087], W8
	348 Move X8, 0x2244000
	349 Move X8, [X8+1152]
	350 Move X8, [X8]
	351 Move X8, [X8+184]
	352 Move V8, [X8]
	353 Move V9, [X8+8]
	354 Move X0, X20
	355 Move X1, X31
	356 Call RaycastHit.get_distance, X0
	357 Move V2, [X31+3]
	358 Subtract S0, S0, S10
	359 Move S1, W31
	360 NotImplemented "Instruction FMAX not yet implemented."
	361 NotImplemented "Instruction INVALID not yet implemented."
	362 Add V1, V2, V1
	363 Move V2, [X31+28]
	364 Multiply S0, S9, S0
	365 Move [X19], D1
	366 Add S0, S2, S0
	367 Move [X19+8], S0
	368 Move V0, [X31+64]
	369 Move V1, [X31+80]
	370 NotImplemented "Instruction LDUR not yet implemented."
	371 Move [X20], V0
	372 Move [X20+8], V1
	373 Move [X20+28], V2
	374 Move W0, 1
	375 Move X20, [X31+224]
	376 Move X19, [X31+232]
	377 Move X22, [X31+208]
	378 Move X21, [X31+216]
	379 Move X24, [X31+192]
	380 Move X23, [X31+200]
	381 Move X30, [X31+176]
	382 Move X25, [X31+184]
	383 Move D9, [X31+160]
	384 Move D8, [X31+168]
	385 Move D11, [X31+144]
	386 Move D10, [X31+152]
	387 Move D13, [X31+128]
	388 Move D12, [X31+136]
	389 Move D15, [X31+112]
	390 Move D14, [X31+120]
	391 Add X31, X31, 240
	392 Return X0

Method: System.Boolean IsHandTouching(System.Boolean forLeftHand)

Disassembly:
	0x01D0A654 BL 0x3A9B0C0
	0x01D0A658 LDR X8, [X21]
	0x01D0A65C MOV X19, X0
	0x01D0A660 LDR W9, [X8 + 0xE0]
	0x01D0A664 CBNZ W9, 0x1D0A670

ISIL:
	001 And W31, W1, 1
	002 Move W8, 272
	003 NotImplemented "Instruction CINC not yet implemented."
	004 Move W0, [X0]
	005 Return X0

Method: System.Void Turn(System.Single degrees)

Disassembly:
	0x01D0A668 MOV X0, X8
	0x01D0A66C BL 0x1B6E8F8
	0x01D0A670 MOV X0, X19
	0x01D0A674 LDP X20, X19, [X31 + 0x40]
	0x01D0A678 LDP X22, X21, [X31 + 0x30]
	0x01D0A67C LDP X24, X23, [X31 + 0x20]
	0x01D0A680 LDP X26, X25, [X31 + 0x10]
	0x01D0A684 MOV X1, X31
	0x01D0A688 LDP X30, X27, [X31], #0x50
	0x01D0A68C B 0x3AA15F4
	0x01D0A690 LDR X0, [X24]
	0x01D0A694 ADRP X25, 0x2243000
	0x01D0A698 LDR W8, [X0 + 0xE0]
	0x01D0A69C LDR X25, [X25 + 0x4E8]
	0x01D0A6A0 CBNZ W8, 0x1D0A6AC
	0x01D0A6A4 BL 0x1B6E8F8
	0x01D0A6A8 LDR X0, [X24]
	0x01D0A6AC LDR X8, [X0 + 0xB8]
	0x01D0A6B0 MOV W0, W31
	0x01D0A6B4 MOV W1, W31
	0x01D0A6B8 STR X19, [X8]
	0x01D0A6BC BL 0x1D0AAF4
	0x01D0A6C0 LDR X8, [X24]
	0x01D0A6C4 LDR X8, [X8 + 0xB8]
	0x01D0A6C8 STR X0, [X8 + 0x8]
	0x01D0A6CC LDR X0, [X25]
	0x01D0A6D0 LDR W8, [X0 + 0xE0]
	0x01D0A6D4 CBNZ W8, 0x1D0A6DC
	0x01D0A6D8 BL 0x1B6E8F8
	0x01D0A6DC ADRP X26, 0x2519000
	0x01D0A6E0 LDRB W8, [X26 + 0x443]
	0x01D0A6E4 CBNZ W8, 0x1D0A6FC
	0x01D0A6E8 ADRP X0, 0x2243000
	0x01D0A6EC LDR X0, [X0 + 0x4E8]
	0x01D0A6F0 BL 0x1B6E7F0
	0x01D0A6F4 MOVZ W8, 0x1
	0x01D0A6F8 STRB W8, [X26 + 0x443]
	0x01D0A6FC LDR X0, [X25]
	0x01D0A700 LDR W8, [X0 + 0xE0]
	0x01D0A704 CBNZ W8, 0x1D0A710
	0x01D0A708 BL 0x1B6E8F8
	0x01D0A70C LDR X0, [X25]
	0x01D0A710 LDR X8, [X0 + 0xB8]
	0x01D0A714 LDR X8, [X8]
	0x01D0A718 CBZ X8, 0x1D0AAE0
	0x01D0A71C LDR X8, [X8 + 0x88]
	0x01D0A720 CBZ X8, 0x1D0AAE0
	0x01D0A724 LDR X20, [X8 + 0x50]
	0x01D0A728 ADRP X8, 0x2247000
	0x01D0A72C LDR X8, [X8 + 0x1D8]
	0x01D0A730 LDR X0, [X8]
	0x01D0A734 BL 0x1B6EA0C
	0x01D0A738 MOV X1, X20
	0x01D0A73C MOV X2, X31
	0x01D0A740 MOV X21, X0
	0x01D0A744 BL 0x34828B8
	0x01D0A748 LDRB W8, [X26 + 0x443]
	0x01D0A74C CBNZ W8, 0x1D0A764
	0x01D0A750 ADRP X0, 0x2243000
	0x01D0A754 LDR X0, [X0 + 0x4E8]
	0x01D0A758 BL 0x1B6E7F0
	0x01D0A75C MOVZ W8, 0x1
	0x01D0A760 STRB W8, [X26 + 0x443]
	0x01D0A764 LDR X0, [X25]
	0x01D0A768 LDR W8, [X0 + 0xE0]
	0x01D0A76C CBNZ W8, 0x1D0A778
	0x01D0A770 BL 0x1B6E8F8
	0x01D0A774 LDR X0, [X25]
	0x01D0A778 LDR X8, [X0 + 0xB8]
	0x01D0A77C LDR X8, [X8]
	0x01D0A780 CBZ X8, 0x1D0AAE0
	0x01D0A784 LDR X8, [X8 + 0x90]
	0x01D0A788 CBZ X8, 0x1D0AAE0
	0x01D0A78C LDR X9, [X24]
	0x01D0A790 ADRP X27, 0x2247000
	0x01D0A794 LDR X22, [X8 + 0x50]
	0x01D0A798 LDR X9, [X9 + 0xB8]
	0x01D0A79C LDR X27, [X27 + 0x1C0]
	0x01D0A7A0 LDR X23, [X9 + 0x8]
	0x01D0A7A4 LDR X0, [X27]
	0x01D0A7A8 BL 0x1B6EA0C
	0x01D0A7AC MOVZ W4, 0x1
	0x01D0A7B0 MOV X1, X21
	0x01D0A7B4 MOV X2, X22
	0x01D0A7B8 MOV X3, X23
	0x01D0A7BC MOV X5, X31
	0x01D0A7C0 MOV X20, X0
	0x01D0A7C4 BL 0x32A906C
	0x01D0A7C8 LDR X8, [X24]
	0x01D0A7CC LDR X8, [X8 + 0xB8]
	0x01D0A7D0 STR X20, [X8 + 0x10]
	0x01D0A7D4 CBZ X20, 0x1D0AAE0
	0x01D0A7D8 ADRP X22, 0x2247000
	0x01D0A7DC LDR X8, [X20]
	0x01D0A7E0 LDR X22, [X22 + 0x1C8]
	0x01D0A7E4 LDRH W9, [X8 + 0x12E]
	0x01D0A7E8 LDR X1, [X22]
	0x01D0A7EC CBZ X9, 0x1D0A810
	0x01D0A7F0 LDR X10, [X8 + 0xB0]
	0x01D0A7F4 ADD X10, X10, 0x8
	0x01D0A7F8 LDUR X11, [X10 - 0x8]
	0x01D0A7FC CMP X11, X1
	0x01D0A800 B.EQ 0x1D0A820
	0x01D0A804 SUBS X9, X9, 0x1
	0x01D0A808 ADD X10, X10, 0x10
	0x01D0A80C B.NE 0x1D0A7F8
	0x01D0A810 MOVZ W2, 0xA
	0x01D0A814 MOV X0, X20
	0x01D0A818 BL 0x1BB4284
	0x01D0A81C B 0x1D0A830
	0x01D0A820 LDR W9, [X10]
	0x01D0A824 ADD W9, W9, 0xA
	0x01D0A828 ADD X8, X8, W9, 0x4, SXTW
	0x01D0A82C ADD X0, X8, 0x138

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X1, X31
	011 Move V8, V0
	012 Move X19, X0
	013 Call Component.get_transform, X0
	014 Move X8, [X19+40]
	015 Compare X8, 0
	016 JumpIfEqual {123}
	017 Move X20, X0
	018 Move X0, X8
	019 Move X1, X31
	020 Call Component.get_transform, X0
	021 Compare X0, 0
	022 JumpIfEqual {123}
	023 Move X1, X31
	024 Call Transform.get_position, X0
	025 Move X0, X19
	026 Move X1, X31
	027 Move V9, V0
	028 Move V10, V1
	029 Move V11, V2
	030 Call Component.get_transform, X0
	031 Compare X0, 0
	032 JumpIfEqual {123}
	033 Move X1, X31
	034 Call Transform.get_up, X0
	035 Compare X20, 0
	036 JumpIfEqual {123}
	037 Move V3, V0
	038 Move V4, V1
	039 Move V5, V2
	040 Move X0, X20
	041 Move V0, V9
	042 Move V1, V10
	043 Move V2, V11
	044 Move V6, V8
	045 Move X1, X31
	046 Call Transform.RotateAround, X0, X1, X2, V0
	047 Move X20, [X19+144]
	048 Move X0, X19
	049 Move X1, X31
	050 Call Component.get_transform, X0
	051 Compare X0, 0
	052 JumpIfEqual {123}
	053 Move X1, X31
	054 Call Transform.get_position, X0
	055 Compare X20, 0
	056 JumpIfEqual {123}
	057 Move X0, X20
	058 Move X1, X31
	059 Call Rigidbody.set_position, X0, X1
	060 Move X20, [X19+144]
	061 Move X0, X19
	062 Move X1, X31
	063 Call Component.get_transform, X0
	064 Compare X0, 0
	065 JumpIfEqual {123}
	066 Move X1, X31
	067 Call Transform.get_rotation, X0
	068 Compare X20, 0
	069 JumpIfEqual {123}
	070 Move X0, X20
	071 Move X1, X31
	072 Call Rigidbody.set_rotation, X0, X1
	073 Move X8, -19267584
	074 Move V0, [X8+2804]
	075 Move S2, W31
	076 Move X0, X31
	077 Multiply S8, S8, S0
	078 Move S0, W31
	079 Move V1, V8
	080 Call Quaternion.Internal_FromEulerRad, X0
	081 Move S4, [X19+216]
	082 Move S5, [X19+220]
	083 Move V6, [X19+224]
	084 Move X0, X31
	085 Call Quaternion.op_Multiply, X0, X1
	086 Move X20, [X19+192]
	087 Move [X19+216], S0
	088 Move [X19+224], S1
	089 Move [X19+224], S2
	090 Compare X20, 0
	091 JumpIfEqual {123}
	092 Move X22, X31
	093 Move X21, X31
	094 NotImplemented "Instruction LDRSW not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move S0, W31
	097 Move S2, W31
	098 Move V1, V8
	099 Move X0, X31
	100 Call Quaternion.Internal_FromEulerRad, X0
	101 Move X8, [X19+192]
	102 Compare X8, 0
	103 JumpIfEqual {123}
	104 Move W9, [X8+24]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Add X8, X8, X22
	107 Move S4, [X8+32]
	108 Move S5, [X8+36]
	109 Move V6, [X8+40]
	110 Move X0, X31
	111 Call Quaternion.op_Multiply, X0, X1
	112 Move W8, [X20+24]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Add X8, X20, X22
	115 Move [X8+32], S0
	116 Move [X8+40], S1
	117 Move [X8+40], S2
	118 Move X20, [X19+192]
	119 Add X22, X22, 12
	120 Add X21, X21, 1
	121 Compare X20, 0
	122 JumpIfNotEqual {94}
	123 Call 0x1B6FA1C
	124 Move X20, [X31+64]
	125 Move X19, [X31+72]
	126 Move X22, [X31+48]
	127 Move X21, [X31+56]
	128 Move X30, [X31+32]
	129 Move D9, [X31+16]
	130 Move D8, [X31+24]
	131 Move D11, [X31+80]
	132 Move D10, [X31+88]
	133 Return 
	134 Call 0x1B6FA24

Method: System.Void Reposition(UnityEngine.Vector3 targetPosition)

Disassembly:
	0x01D0A830 LDP X8, X2, [X0]
	0x01D0A834 MOVZ W1, 0xA
	0x01D0A838 MOV X0, X20
	0x01D0A83C BLR X8
	0x01D0A840 LDR X8, [X24]
	0x01D0A844 ADRP X9, 0x2247000
	0x01D0A848 LDR X8, [X8 + 0xB8]
	0x01D0A84C LDR X9, [X9 + 0x1D0]
	0x01D0A850 LDR X20, [X8 + 0x10]
	0x01D0A854 LDR X0, [X9]
	0x01D0A858 BL 0x1B6EA0C
	0x01D0A85C MOVZ W1, 0x40
	0x01D0A860 MOV X2, X31
	0x01D0A864 MOV X21, X0
	0x01D0A868 BL 0x1D15508
	0x01D0A86C CBZ X20, 0x1D0AAE0
	0x01D0A870 LDR X8, [X20]
	0x01D0A874 LDR X1, [X22]
	0x01D0A878 LDRH W9, [X8 + 0x12E]
	0x01D0A87C CBZ X9, 0x1D0A8A0
	0x01D0A880 LDR X10, [X8 + 0xB0]
	0x01D0A884 ADD X10, X10, 0x8
	0x01D0A888 LDUR X11, [X10 - 0x8]
	0x01D0A88C CMP X11, X1
	0x01D0A890 B.EQ 0x1D0A8B0
	0x01D0A894 SUBS X9, X9, 0x1
	0x01D0A898 ADD X10, X10, 0x10
	0x01D0A89C B.NE 0x1D0A888
	0x01D0A8A0 MOVZ W2, 0xC
	0x01D0A8A4 MOV X0, X20
	0x01D0A8A8 BL 0x1BB4284
	0x01D0A8AC B 0x1D0A8C0
	0x01D0A8B0 LDR W9, [X10]
	0x01D0A8B4 ADD W9, W9, 0xC
	0x01D0A8B8 ADD X8, X8, W9, 0x4, SXTW
	0x01D0A8BC ADD X0, X8, 0x138
	0x01D0A8C0 LDP X8, X2, [X0]
	0x01D0A8C4 MOV X0, X20
	0x01D0A8C8 MOV X1, X21
	0x01D0A8CC BLR X8
	0x01D0A8D0 ADRP X8, 0x2245000
	0x01D0A8D4 LDR X8, [X8 + 0x9A0]
	0x01D0A8D8 LDR X0, [X8]
	0x01D0A8DC LDR W8, [X0 + 0xE0]
	0x01D0A8E0 CBNZ W8, 0x1D0A8E8
	0x01D0A8E4 BL 0x1B6E8F8
	0x01D0A8E8 FMOV D0, 1
	0x01D0A8EC MOV X0, X31
	0x01D0A8F0 BL 0x31FDD9C
	0x01D0A8F4 LDR X8, [X27]
	0x01D0A8F8 MOV X20, X0
	0x01D0A8FC LDR W9, [X8 + 0xE0]
	0x01D0A900 CBNZ W9, 0x1D0A910
	0x01D0A904 MOV X0, X8
	0x01D0A908 BL 0x1B6E8F8
	0x01D0A90C LDR X8, [X27]
	0x01D0A910 LDR X8, [X8 + 0xB8]
	0x01D0A914 ADRP X9, 0x2247000
	0x01D0A918 STR X20, [X8]
	0x01D0A91C LDR X8, [X24]
	0x01D0A920 LDR X8, [X8 + 0xB8]
	0x01D0A924 LDR X9, [X9 + 0x1A8]
	0x01D0A928 LDR X20, [X8 + 0x10]
	0x01D0A92C LDR X0, [X9]
	0x01D0A930 BL 0x1B6EA0C
	0x01D0A934 ADRP X8, 0x2247000
	0x01D0A938 LDR X8, [X8 + 0x1B8]
	0x01D0A93C MOV X1, X19
	0x01D0A940 MOV X3, X31
	0x01D0A944 MOV X21, X0
	0x01D0A948 LDR X2, [X8]
	0x01D0A94C BL 0x27EC49C
	0x01D0A950 CBZ X20, 0x1D0AAE0
	0x01D0A954 LDR X8, [X20]
	0x01D0A958 LDR X1, [X22]
	0x01D0A95C LDRH W9, [X8 + 0x12E]
	0x01D0A960 CBZ X9, 0x1D0A984
	0x01D0A964 LDR X10, [X8 + 0xB0]
	0x01D0A968 ADD X10, X10, 0x8
	0x01D0A96C LDUR X11, [X10 - 0x8]
	0x01D0A970 CMP X11, X1
	0x01D0A974 B.EQ 0x1D0A994
	0x01D0A978 SUBS X9, X9, 0x1
	0x01D0A97C ADD X10, X10, 0x10
	0x01D0A980 B.NE 0x1D0A96C
	0x01D0A984 MOVZ W2, 0x7
	0x01D0A988 MOV X0, X20
	0x01D0A98C BL 0x1BB4284
	0x01D0A990 B 0x1D0A9A4
	0x01D0A994 LDR W9, [X10]
	0x01D0A998 ADD W9, W9, 0x7
	0x01D0A99C ADD X8, X8, W9, 0x4, SXTW
	0x01D0A9A0 ADD X0, X8, 0x138
	0x01D0A9A4 LDP X8, X2, [X0]
	0x01D0A9A8 MOV X0, X20
	0x01D0A9AC MOV X1, X21
	0x01D0A9B0 BLR X8
	0x01D0A9B4 LDR X8, [X24]
	0x01D0A9B8 MOV W1, W31
	0x01D0A9BC MOV X2, X31
	0x01D0A9C0 MOV X3, X31
	0x01D0A9C4 LDR X8, [X8 + 0xB8]
	0x01D0A9C8 LDR X0, [X8 + 0x10]
	0x01D0A9CC BL 0x3281EE8
	0x01D0A9D0 ADRP X21, 0x2519000
	0x01D0A9D4 LDRB W8, [X21 + 0x7EB]
	0x01D0A9D8 MOV X20, X0
	0x01D0A9DC CBNZ W8, 0x1D0A9F4

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x251A000
	008 Move W8, [X20+1882]
	009 Move V8, V2
	010 Move V9, V1
	011 Move V10, V0
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x2246000
	018 Move X0, [X0+720]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X20+1882], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call Component.get_transform, X0
	025 Compare X0, 0
	026 JumpIfEqual {130}
	027 Move V0, V10
	028 Move V1, V9
	029 Move V2, V8
	030 Move X1, X31
	031 Call Transform.set_position, X0, X1
	032 Move X0, [X19+80]
	033 Compare X0, 0
	034 JumpIfEqual {130}
	035 Move V0, V10
	036 Move V1, V9
	037 Move V2, V8
	038 Move X1, X31
	039 Call Transform.set_position, X0, X1
	040 Move X0, [X19+72]
	041 Compare X0, 0
	042 JumpIfEqual {130}
	043 Move V0, V10
	044 Move V1, V9
	045 Move V2, V8
	046 Move X1, X31
	047 Call Transform.set_position, X0, X1
	048 Move X0, [X19+56]
	049 Compare X0, 0
	050 JumpIfEqual {130}
	051 Move V0, V10
	052 Move V1, V9
	053 Move V2, V8
	054 Move X1, X31
	055 Call Transform.set_position, X0, X1
	056 Move X0, [X19+64]
	057 Compare X0, 0
	058 JumpIfEqual {130}
	059 Move X20, 0x2246000
	060 Move X20, [X20+720]
	061 Move V0, V10
	062 Move V1, V9
	063 Move V2, V8
	064 Move X1, X31
	065 Call Transform.set_position, X0, X1
	066 Move [X19+104], S10
	067 Move [X19+112], S9
	068 Move [X19+112], S8
	069 Move [X19+120], S10
	070 Move [X19+120], S9
	071 Move [X19+128], S8
	072 Move [X19+128], S10
	073 Move [X19+136], S9
	074 Move [X19+136], S8
	075 Move [X19+232], S10
	076 Move [X19+240], S9
	077 Move [X19+240], S8
	078 NotImplemented "Instruction STRH not yet implemented."
	079 Move W1, [X19+152]
	080 Move X0, [X20]
	081 Call 0x1B6F868
	082 Move [X19+192], X0
	083 Move [X19+200], W31
	084 Move X20, 0x251A000
	085 Move W8, [X20+1087]
	086 Compare W8, 0
	087 JumpIfNotEqual {93}
	088 Move X0, 0x2244000
	089 Move X0, [X0+1152]
	090 Call 0x1B6F7F0
	091 Move W8, 1
	092 Move [X20+1087], W8
	093 Move X8, 0x2244000
	094 Move X8, [X8+1152]
	095 Move X0, [X19+144]
	096 Move X8, [X8]
	097 Move X9, [X8+184]
	098 Move V0, [X9]
	099 Move V1, [X9+8]
	100 Move [X19+204], D0
	101 Move [X19+212], S1
	102 Move X9, [X8+184]
	103 Move V0, [X9]
	104 Move V1, [X9+8]
	105 Move [X19+216], D0
	106 Move [X19+224], S1
	107 Compare X0, 0
	108 JumpIfEqual {130}
	109 Move X8, [X8+184]
	110 Move X1, X31
	111 Move S1, [X8+4]
	112 Move S2, [X8+8]
	113 Move V0, [X8]
	114 Call Rigidbody.set_velocity, X0, X1
	115 Move X0, [X19+144]
	116 Compare X0, 0
	117 JumpIfEqual {130}
	118 Move V1, V9
	119 Move V2, V8
	120 Move X20, [X31+32]
	121 Move X19, [X31+40]
	122 Move X30, [X31+24]
	123 Move D9, [X31+8]
	124 Move D8, [X31+16]
	125 Move V0, V10
	126 Move X1, X31
	127 Move V10, [X31+48]
	128 Call Rigidbody.set_position, X0, X1
	129 Return 
	130 Call 0x1B6FA1C

Method: System.Void Rotate(UnityEngine.Vector3 targetForward)

Disassembly:
	0x01D0A9E0 ADRP X0, 0x2243000
	0x01D0A9E4 LDR X0, [X0 + 0x4F8]
	0x01D0A9E8 BL 0x1B6E7F0
	0x01D0A9EC MOVZ W8, 0x1
	0x01D0A9F0 STRB W8, [X21 + 0x7EB]
	0x01D0A9F4 LDR X0, [X24]
	0x01D0A9F8 LDR W8, [X0 + 0xE0]
	0x01D0A9FC CBNZ W8, 0x1D0AA08
	0x01D0AA00 BL 0x1B6E8F8
	0x01D0AA04 LDR X0, [X24]
	0x01D0AA08 LDR X8, [X0 + 0xB8]
	0x01D0AA0C STR X20, [X8 + 0x28]
	0x01D0AA10 ADRP X8, 0x2243000
	0x01D0AA14 LDR X8, [X8 + 0xB90]
	0x01D0AA18 LDR X0, [X8]
	0x01D0AA1C BL 0x1B6EA0C
	0x01D0AA20 ADRP X8, 0x2247000
	0x01D0AA24 LDR X8, [X8 + 0x1B0]
	0x01D0AA28 MOV X1, X19
	0x01D0AA2C MOV X3, X31
	0x01D0AA30 MOV X20, X0
	0x01D0AA34 LDR X2, [X8]
	0x01D0AA38 BL 0x342E500
	0x01D0AA3C ADRP X8, 0x2243000
	0x01D0AA40 LDR X8, [X8 + 0xBA0]
	0x01D0AA44 MOVZ W1, 0x1
	0x01D0AA48 MOVZ W21, 0x1
	0x01D0AA4C LDR X0, [X8]
	0x01D0AA50 BL 0x1B6E868
	0x01D0AA54 LDRB W8, [X26 + 0x443]
	0x01D0AA58 MOV X19, X0
	0x01D0AA5C CBNZ W8, 0x1D0AA70
	0x01D0AA60 ADRP X0, 0x2243000
	0x01D0AA64 LDR X0, [X0 + 0x4E8]
	0x01D0AA68 BL 0x1B6E7F0
	0x01D0AA6C STRB W21, [X26 + 0x443]
	0x01D0AA70 LDR X0, [X25]
	0x01D0AA74 LDR W8, [X0 + 0xE0]
	0x01D0AA78 CBNZ W8, 0x1D0AA84
	0x01D0AA7C BL 0x1B6E8F8
	0x01D0AA80 LDR X0, [X25]
	0x01D0AA84 LDR X8, [X0 + 0xB8]
	0x01D0AA88 LDR X8, [X8]
	0x01D0AA8C CBZ X8, 0x1D0AAE0
	0x01D0AA90 CBZ X19, 0x1D0AAE0
	0x01D0AA94 LDR X21, [X8 + 0x80]
	0x01D0AA98 CBZ X21, 0x1D0AAB0
	0x01D0AA9C LDR X8, [X19]
	0x01D0AAA0 MOV X0, X21
	0x01D0AAA4 LDR X1, [X8 + 0x40]
	0x01D0AAA8 BL 0x1B6E8FC
	0x01D0AAAC CBZ X0, 0x1D0AAE8
	0x01D0AAB0 LDR W8, [X19 + 0x18]
	0x01D0AAB4 CBZ W8, 0x1D0AAE4
	0x01D0AAB8 STR X21, [X19 + 0x20]
	0x01D0AABC MOV X0, X20
	0x01D0AAC0 MOV X1, X19
	0x01D0AAC4 LDP X20, X19, [X31 + 0x40]
	0x01D0AAC8 LDP X22, X21, [X31 + 0x30]
	0x01D0AACC LDP X24, X23, [X31 + 0x20]
	0x01D0AAD0 LDP X26, X25, [X31 + 0x10]
	0x01D0AAD4 MOV X2, X31
	0x01D0AAD8 LDP X30, X27, [X31], #0x50
	0x01D0AADC B 0x1C8CFDC
	0x01D0AAE0 BL 0x1B6EA1C
	0x01D0AAE4 BL 0x1B6EA24
	0x01D0AAE8 BL 0x1B6EA40
	0x01D0AAEC MOV X1, X31
	0x01D0AAF0 BL 0x1B6E8E8
	0x01D0AAF4 STR X30, [X31 - 0x30]!
	0x01D0AAF8 STP X22, X21, [X31 + 0x10]
	0x01D0AAFC STP X20, X19, [X31 + 0x20]
	0x01D0AB00 ADRP X20, 0x2519000
	0x01D0AB04 ADRP X22, 0x2247000
	0x01D0AB08 LDRB W8, [X20 + 0x7E1]
	0x01D0AB0C LDR X22, [X22 + 0x1E0]
	0x01D0AB10 MOV W19, W1
	0x01D0AB14 MOV W21, W0
	0x01D0AB18 TBNZ X8, 0x0, 0x1D0AB54
	0x01D0AB1C ADRP X0, 0x2247000
	0x01D0AB20 LDR X0, [X0 + 0x1E8]
	0x01D0AB24 BL 0x1B6E7F0
	0x01D0AB28 ADRP X0, 0x2247000
	0x01D0AB2C LDR X0, [X0 + 0x1E0]
	0x01D0AB30 BL 0x1B6E7F0
	0x01D0AB34 ADRP X0, 0x2247000
	0x01D0AB38 LDR X0, [X0 + 0x1F0]
	0x01D0AB3C BL 0x1B6E7F0
	0x01D0AB40 ADRP X0, 0x2247000
	0x01D0AB44 LDR X0, [X0 + 0x1F8]
	0x01D0AB48 BL 0x1B6E7F0
	0x01D0AB4C MOVZ W8, 0x1
	0x01D0AB50 STRB W8, [X20 + 0x7E1]
	0x01D0AB54 LDR X0, [X22]
	0x01D0AB58 BL 0x1B6EA0C
	0x01D0AB5C MOV X1, X31
	0x01D0AB60 MOV X20, X0
	0x01D0AB64 BL 0x345E2E4
	0x01D0AB68 CBZ X20, 0x1D0AC18
	0x01D0AB6C LDR X8, [X20]
	0x01D0AB70 MOV X0, X20
	0x01D0AB74 LDP X9, X1, [X8 + 0x1A8]
	0x01D0AB78 BLR X9
	0x01D0AB7C TBZ X0, 0x0, 0x1D0AB94
	0x01D0AB80 TBZ X21, 0x0, 0x1D0AB94
	0x01D0AB84 MOVZ W1, 0x3
	0x01D0AB88 MOV X0, X20
	0x01D0AB8C MOV X2, X31
	0x01D0AB90 BL 0x345EA20
	0x01D0AB94 ADRP X22, 0x2247000
	0x01D0AB98 ADRP X21, 0x2247000
	0x01D0AB9C LDR X22, [X22 + 0x1F0]
	0x01D0ABA0 LDR X21, [X21 + 0x1F8]
	0x01D0ABA4 TBZ X19, 0x0, 0x1D0ABD8
	0x01D0ABA8 ADRP X8, 0x2247000
	0x01D0ABAC LDR X8, [X8 + 0x1E8]
	0x01D0ABB0 LDR X0, [X8]
	0x01D0ABB4 BL 0x1B6EA0C
	0x01D0ABB8 MOV X1, X31
	0x01D0ABBC MOV X19, X0
	0x01D0ABC0 BL 0x34629DC
	0x01D0ABC4 MOV X0, X19
	0x01D0ABC8 MOV X1, X20
	0x01D0ABCC MOV X2, X31
	0x01D0ABD0 BL 0x34629EC
	0x01D0ABD4 MOV X20, X19
	0x01D0ABD8 LDR X0, [X22]
	0x01D0ABDC BL 0x1B6EA0C
	0x01D0ABE0 MOV X1, X20
	0x01D0ABE4 MOV X2, X31
	0x01D0ABE8 MOV X19, X0
	0x01D0ABEC BL 0x3462AF0
	0x01D0ABF0 LDR X0, [X21]
	0x01D0ABF4 BL 0x1B6EA0C
	0x01D0ABF8 MOV X1, X19
	0x01D0ABFC MOV X20, X0
	0x01D0AC00 BL 0x1D129C0
	0x01D0AC04 MOV X0, X20
	0x01D0AC08 LDP X20, X19, [X31 + 0x20]
	0x01D0AC0C LDP X22, X21, [X31 + 0x10]
	0x01D0AC10 LDR X30, [X31], #0x30
	0x01D0AC14 RET
	0x01D0AC18 BL 0x1B6EA1C
	0x01D0AC1C STR X30, [X31 - 0x30]!
	0x01D0AC20 STP X22, X21, [X31 + 0x10]
	0x01D0AC24 STP X20, X19, [X31 + 0x20]
	0x01D0AC28 ADRP X20, 0x2519000
	0x01D0AC2C ADRP X22, 0x2243000
	0x01D0AC30 LDRB W8, [X20 + 0x76B]
	0x01D0AC34 LDR X22, [X22 + 0x4F8]
	0x01D0AC38 MOV X19, X0
	0x01D0AC3C TBNZ X8, 0x0, 0x1D0ACA8
	0x01D0AC40 ADRP X0, 0x2247000
	0x01D0AC44 LDR X0, [X0 + 0x1A8]
	0x01D0AC48 BL 0x1B6E7F0
	0x01D0AC4C ADRP X0, 0x2247000
	0x01D0AC50 LDR X0, [X0 + 0x1B0]
	0x01D0AC54 BL 0x1B6E7F0
	0x01D0AC58 ADRP X0, 0x2247000
	0x01D0AC5C LDR X0, [X0 + 0x1B8]
	0x01D0AC60 BL 0x1B6E7F0
	0x01D0AC64 ADRP X0, 0x2243000
	0x01D0AC68 LDR X0, [X0 + 0x4F8]
	0x01D0AC6C BL 0x1B6E7F0
	0x01D0AC70 ADRP X0, 0x2243000
	0x01D0AC74 LDR X0, [X0 + 0x4E8]
	0x01D0AC78 BL 0x1B6E7F0
	0x01D0AC7C ADRP X0, 0x2247000
	0x01D0AC80 LDR X0, [X0 + 0x1C8]
	0x01D0AC84 BL 0x1B6E7F0
	0x01D0AC88 ADRP X0, 0x2243000
	0x01D0AC8C LDR X0, [X0 + 0x478]
	0x01D0AC90 BL 0x1B6E7F0
	0x01D0AC94 ADRP X0, 0x2243000
	0x01D0AC98 LDR X0, [X0 + 0xB90]
	0x01D0AC9C BL 0x1B6E7F0
	0x01D0ACA0 MOVZ W8, 0x1
	0x01D0ACA4 STRB W8, [X20 + 0x76B]
	0x01D0ACA8 LDR X0, [X22]
	0x01D0ACAC ADRP X20, 0x2243000
	0x01D0ACB0 LDR W8, [X0 + 0xE0]
	0x01D0ACB4 LDR X20, [X20 + 0x478]
	0x01D0ACB8 CBNZ W8, 0x1D0ACC4
	0x01D0ACBC BL 0x1B6E8F8
	0x01D0ACC0 LDR X0, [X22]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D14
	003 Move [X31+32], D13
	004 Move [X31+40], D12
	005 Move [X31+48], D11
	006 Move [X31+56], D10
	007 Move [X31+64], D9
	008 Move [X31+72], D8
	009 Move [X31+80], X30
	010 Move [X31+88], X23
	011 Move [X31+96], X22
	012 Move [X31+104], X21
	013 Move [X31+112], X20
	014 Move [X31+120], X19
	015 Move X19, X0
	016 Move X0, [X0+40]
	017 Compare X0, 0
	018 JumpIfEqual {212}
	019 Move X1, X31
	020 Move V8, V2
	021 Move V9, V1
	022 Move V13, V0
	023 Call Component.get_transform, X0
	024 Compare X0, 0
	025 JumpIfEqual {212}
	026 Move X1, X31
	027 Call Transform.get_forward, X0
	028 Move X0, X31
	029 Call Extensions.Flatten, X0
	030 Move X20, 0x251A000
	031 Move W8, [X20+1089]
	032 Move V10, V0
	033 Move V11, V1
	034 Move V12, V2
	035 Compare W8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, 0x2244000
	038 Move X0, [X0+1160]
	039 Call 0x1B6F7F0
	040 Move W8, 1
	041 Move [X20+1089], W8
	042 Move X23, 0x2244000
	043 Move X23, [X23+1160]
	044 Move X0, [X23]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1B6F8F8
	049 Move X8, -19267584
	050 Multiply S0, S10, S10
	051 Multiply S1, S11, S11
	052 Move V14, [X8+2916]
	053 Move X21, 0x2244000
	054 Multiply S2, S12, S12
	055 Add S0, S0, S1
	056 Move X21, [X21+1152]
	057 Add S0, S2, S0
	058 NotImplemented "Instruction FSQRT not yet implemented."
	059 NotImplemented "Instruction FCMP not yet implemented."
	060 Move X22, 0x251A000
	061 NotImplemented "Instruction FDIV not yet implemented."
	062 NotImplemented "Instruction FDIV not yet implemented."
	063 NotImplemented "Instruction FDIV not yet implemented."
	064 Move W8, [X22+1087]
	065 Compare W8, 0
	066 JumpIfNotEqual {72}
	067 Move X0, 0x2244000
	068 Move X0, [X0+1152]
	069 Call 0x1B6F7F0
	070 Move W8, 1
	071 Move [X22+1087], W8
	072 Move X8, [X21]
	073 Move X8, [X8+184]
	074 Move S10, [X8]
	075 Move S11, [X8+4]
	076 Move V12, [X8+8]
	077 Move V0, V13
	078 Move V1, V9
	079 Move V2, V8
	080 Move X0, X31
	081 Call Extensions.Flatten, X0
	082 Move W8, [X20+1089]
	083 Move V8, V0
	084 Move V9, V1
	085 Move V13, V2
	086 Compare W8, 0
	087 JumpIfNotEqual {93}
	088 Move X0, 0x2244000
	089 Move X0, [X0+1160]
	090 Call 0x1B6F7F0
	091 Move W8, 1
	092 Move [X20+1089], W8
	093 Move X0, [X23]
	094 Move W8, [X0+224]
	095 Compare W8, 0
	096 JumpIfNotEqual {98}
	097 Call 0x1B6F8F8
	098 Multiply S0, S8, S8
	099 Multiply S1, S9, S9
	100 Add S0, S0, S1
	101 Multiply S1, S13, S13
	102 Add S0, S1, S0
	103 NotImplemented "Instruction FSQRT not yet implemented."
	104 NotImplemented "Instruction FCMP not yet implemented."
	105 NotImplemented "Instruction FDIV not yet implemented."
	106 NotImplemented "Instruction FDIV not yet implemented."
	107 NotImplemented "Instruction FDIV not yet implemented."
	108 Move W8, [X22+1087]
	109 Compare W8, 0
	110 JumpIfNotEqual {116}
	111 Move X0, 0x2244000
	112 Move X0, [X0+1152]
	113 Call 0x1B6F7F0
	114 Move W8, 1
	115 Move [X22+1087], W8
	116 Move X8, [X21]
	117 Move X8, [X8+184]
	118 Move S8, [X8]
	119 Move S9, [X8+4]
	120 Move V13, [X8+8]
	121 Move X22, 0x251A000
	122 Move W8, [X22+1090]
	123 Compare W8, 0
	124 JumpIfNotEqual {130}
	125 Move X0, 0x2244000
	126 Move X0, [X0+1152]
	127 Call 0x1B6F7F0
	128 Move W8, 1
	129 Move [X22+1090], W8
	130 Move X8, [X21]
	131 Move V1, V11
	132 Move V2, V12
	133 Move V3, V8
	134 Move X8, [X8+184]
	135 Move V4, V9
	136 Move V5, V13
	137 Move X0, X31
	138 Move V0, [X8+32]
	139 Move X9, [X8+24]
	140 Move [X31+8], S0
	141 Move V0, V10
	142 Move [X31], X9
	143 Call 0x1CD06E0
	144 Move X0, X19
	145 Move X1, X31
	146 Move V8, V0
	147 Call Component.get_transform, X0
	148 Move X8, [X19+40]
	149 Compare X8, 0
	150 JumpIfEqual {212}
	151 Move X20, X0
	152 Move X0, X8
	153 Move X1, X31
	154 Call Component.get_transform, X0
	155 Compare X0, 0
	156 JumpIfEqual {212}
	157 Move X1, X31
	158 Call Transform.get_position, X0
	159 Move W8, [X22+1090]
	160 Move V9, V0
	161 Move V10, V1
	162 Move V11, V2
	163 Compare W8, 0
	164 JumpIfNotEqual {170}
	165 Move X0, 0x2244000
	166 Move X0, [X0+1152]
	167 Call 0x1B6F7F0
	168 Move W8, 1
	169 Move [X22+1090], W8
	170 Compare X20, 0
	171 JumpIfEqual {212}
	172 Move X8, [X21]
	173 Move X0, X20
	174 Move V0, V9
	175 Move V1, V10
	176 Move X8, [X8+184]
	177 Move V2, V11
	178 Move V6, V8
	179 Move X1, X31
	180 Move S4, [X8+28]
	181 Move S5, [X8+32]
	182 Move V3, [X8+24]
	183 Call Transform.RotateAround, X0, X1, X2, V0
	184 Move X20, [X19+144]
	185 Move X0, X19
	186 Move X1, X31
	187 Call Component.get_transform, X0
	188 Compare X0, 0
	189 JumpIfEqual {212}
	190 Move X1, X31
	191 Call Transform.get_rotation, X0
	192 Compare X20, 0
	193 JumpIfEqual {212}
	194 Move X0, X20
	195 Move X20, [X31+112]
	196 Move X19, [X31+120]
	197 Move X22, [X31+96]
	198 Move X21, [X31+104]
	199 Move X30, [X31+80]
	200 Move X23, [X31+88]
	201 Move D9, [X31+64]
	202 Move D8, [X31+72]
	203 Move D11, [X31+48]
	204 Move D10, [X31+56]
	205 Move D13, [X31+32]
	206 Move D12, [X31+40]
	207 Move V14, [X31+16]
	208 Move X1, X31
	209 Add X31, X31, 128
	210 Call Rigidbody.set_rotation, X0, X1
	211 Return 
	212 Call 0x1B6FA1C

Method: System.Void Reposition(UnityEngine.Vector3 targetPosition, UnityEngine.Vector3 targetDirection)

Disassembly:
	0x01D0ACC4 LDR X8, [X20]
	0x01D0ACC8 LDR X9, [X0 + 0xB8]
	0x01D0ACCC LDR W10, [X8 + 0xE0]
	0x01D0ACD0 LDR X20, [X9]
	0x01D0ACD4 CBNZ W10, 0x1D0ACE0
	0x01D0ACD8 MOV X0, X8
	0x01D0ACDC BL 0x1B6E8F8
	0x01D0ACE0 MOV X0, X20
	0x01D0ACE4 MOV X1, X19
	0x01D0ACE8 MOV X2, X31
	0x01D0ACEC BL 0x3AA0AF0
	0x01D0ACF0 TBZ X0, 0x0, 0x1D0AD94
	0x01D0ACF4 LDR X0, [X22]
	0x01D0ACF8 LDR W8, [X0 + 0xE0]
	0x01D0ACFC CBNZ W8, 0x1D0AD08
	0x01D0AD00 BL 0x1B6E8F8
	0x01D0AD04 LDR X0, [X22]
	0x01D0AD08 LDR X8, [X0 + 0xB8]
	0x01D0AD0C ADRP X9, 0x2247000

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move V8, V2
	007 Move V9, V1
	008 Move V10, V0
	009 Move V0, V3
	010 Move V1, V4
	011 Move V2, V5
	012 Move X19, X0
	013 Call Player.Rotate, X0, X1
	014 Move X0, X19
	015 Move V1, V9
	016 Move V2, V8
	017 Move X30, [X31+32]
	018 Move X19, [X31+40]
	019 Move D9, [X31+16]
	020 Move D8, [X31+24]
	021 Move V0, V10
	022 Move V10, [X31+48]
	023 Call Player.Reposition, X0, X1
	024 Return 

Method: System.Void StoreVelocities(System.Single dt)

Disassembly:
	0x01D09F74 MOV X3, X21
	0x01D09F78 MOV X4, X20
	0x01D09F7C MOV W5, W19
	0x01D09F80 LDP X20, X19, [X31 + 0x40]
	0x01D09F84 LDP X22, X21, [X31 + 0x30]
	0x01D09F88 LDP X24, X23, [X31 + 0x20]
	0x01D09F8C LDP X26, X25, [X31 + 0x10]
	0x01D09F90 MOV X6, X31
	0x01D09F94 LDR X30, [X31], #0x50
	0x01D09F98 B 0x342B224
	0x01D09F9C STR X30, [X31 - 0x50]!
	0x01D09FA0 STP X26, X25, [X31 + 0x10]
	0x01D09FA4 STP X24, X23, [X31 + 0x20]
	0x01D09FA8 STP X22, X21, [X31 + 0x30]
	0x01D09FAC STP X20, X19, [X31 + 0x40]
	0x01D09FB0 ADRP X26, 0x251A000
	0x01D09FB4 ADRP X25, 0x2244000
	0x01D09FB8 LDRB W8, [X26 + 0x75F]
	0x01D09FBC LDR X25, [X25 + 0x628]
	0x01D09FC0 MOV W19, W5
	0x01D09FC4 MOV X20, X4
	0x01D09FC8 MOV X21, X3
	0x01D09FCC MOV X22, X2
	0x01D09FD0 MOV X23, X1
	0x01D09FD4 MOV X24, X0
	0x01D09FD8 TBNZ X8, 0x0, 0x1D09FF0
	0x01D09FDC ADRP X0, 0x2244000
	0x01D09FE0 LDR X0, [X0 + 0x628]
	0x01D09FE4 BL 0x1B6E7F0
	0x01D09FE8 MOVZ W8, 0x1
	0x01D09FEC STRB W8, [X26 + 0x75F]
	0x01D09FF0 LDR X0, [X25]
	0x01D09FF4 LDR W24, [X24 + 0x10]
	0x01D09FF8 LDR W8, [X0 + 0xE0]
	0x01D09FFC CBNZ W8, 0x1D0A004
	0x01D0A000 BL 0x1B6E8F8
	0x01D0A004 MOV W0, W24
	0x01D0A008 MOV X1, X23
	0x01D0A00C MOV X2, X22
	0x01D0A010 MOV X3, X21
	0x01D0A014 MOV X4, X20
	0x01D0A018 MOV W5, W19
	0x01D0A01C LDP X20, X19, [X31 + 0x40]
	0x01D0A020 LDP X22, X21, [X31 + 0x30]
	0x01D0A024 LDP X24, X23, [X31 + 0x20]
	0x01D0A028 LDP X26, X25, [X31 + 0x10]
	0x01D0A02C MOV X6, X31
	0x01D0A030 LDR X30, [X31], #0x50
	0x01D0A034 B 0x342B368
	0x01D0A038 STR X30, [X31 - 0x50]!
	0x01D0A03C STP X26, X25, [X31 + 0x10]
	0x01D0A040 STP X24, X23, [X31 + 0x20]
	0x01D0A044 STP X22, X21, [X31 + 0x30]
	0x01D0A048 STP X20, X19, [X31 + 0x40]
	0x01D0A04C ADRP X26, 0x2519000
	0x01D0A050 ADRP X25, 0x2243000
	0x01D0A054 LDRB W8, [X26 + 0x760]
	0x01D0A058 LDR X25, [X25 + 0x628]
	0x01D0A05C MOV W19, W5
	0x01D0A060 MOV X20, X4
	0x01D0A064 MOV X21, X3
	0x01D0A068 MOV X22, X2
	0x01D0A06C MOV X23, X1
	0x01D0A070 MOV X24, X0
	0x01D0A074 TBNZ X8, 0x0, 0x1D0A08C
	0x01D0A078 ADRP X0, 0x2243000
	0x01D0A07C LDR X0, [X0 + 0x628]
	0x01D0A080 BL 0x1B6E7F0
	0x01D0A084 MOVZ W8, 0x1
	0x01D0A088 STRB W8, [X26 + 0x760]
	0x01D0A08C LDR X0, [X25]
	0x01D0A090 LDR W24, [X24 + 0x10]
	0x01D0A094 LDR W8, [X0 + 0xE0]
	0x01D0A098 CBNZ W8, 0x1D0A0A0
	0x01D0A09C BL 0x1B6E8F8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move W9, [X0+200]
	007 Move W10, [X0+152]
	008 Move X8, [X0+192]
	009 Add W9, W9, 1
	010 NotImplemented "Instruction SDIV not yet implemented."
	011 NotImplemented "Instruction MSUB not yet implemented."
	012 Move [X0+200], W9
	013 Compare X8, 0
	014 JumpIfEqual {82}
	015 Move W10, [X8+24]
	016 Move [X31], V0
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X9, W9
	019 Move W10, 12
	020 NotImplemented "Instruction MADD not yet implemented."
	021 Move V8, [X8+32]
	022 Move V9, [X8+40]
	023 Move X1, X31
	024 Move X19, X0
	025 Call Component.get_transform, X0
	026 Compare X0, 0
	027 JumpIfEqual {82}
	028 Move X1, X31
	029 Call Transform.get_position, X0
	030 Move V4, [X19+240]
	031 Move V3, [X19+232]
	032 Move V6, [X31]
	033 Move V5, [X19+224]
	034 Subtract S2, S2, S4
	035 Move V4, [X19+152]
	036 Move V0.S[1], V1.S[0]
	037 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	038 Subtract V0, V0, V3
	039 Move V3, [X19+216]
	040 NotImplemented "Instruction INVALID not yet implemented."
	041 Move X8, [X19+192]
	042 NotImplemented "Instruction SCVTF not yet implemented."
	043 NotImplemented "Instruction FDIV not yet implemented."
	044 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	045 Subtract V6, V0, V8
	046 Subtract S7, S1, S9
	047 NotImplemented "Instruction INVALID not yet implemented."
	048 NotImplemented "Instruction FDIV not yet implemented."
	049 Add V2, V3, V2
	050 Add S3, S5, S4
	051 Move [X19+204], D0
	052 Move [X19+212], S1
	053 Move [X19+216], D2
	054 Move [X19+224], S3
	055 Compare X8, 0
	056 JumpIfEqual {82}
	057 NotImplemented "Instruction LDRSW not yet implemented."
	058 Move W10, [X8+24]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W10, 12
	061 Move S2, V0.S[1]
	062 NotImplemented "Instruction MADD not yet implemented."
	063 Move X0, X19
	064 Move X1, X31
	065 Move [X8+32], S0
	066 Move [X8+40], S2
	067 Move [X8+40], S1
	068 Call Component.get_transform, X0
	069 Compare X0, 0
	070 JumpIfEqual {82}
	071 Move X1, X31
	072 Call Transform.get_position, X0
	073 Move [X19+232], S0
	074 Move [X19+240], S1
	075 Move [X19+240], S2
	076 Move X30, [X31+32]
	077 Move X19, [X31+40]
	078 Move D9, [X31+16]
	079 Move D8, [X31+24]
	080 Add X31, X31, 48
	081 Return 
	082 Call 0x1B6FA1C
	083 Call 0x1B6FA24

Method: System.Void .ctor()

Disassembly:
	0x01D0AD10 STR X31, [X8]
	0x01D0AD14 LDR X8, [X22]
	0x01D0AD18 LDR X8, [X8 + 0xB8]
	0x01D0AD1C LDR X9, [X9 + 0x1A8]
	0x01D0AD20 LDR X20, [X8 + 0x10]
	0x01D0AD24 LDR X0, [X9]
	0x01D0AD28 BL 0x1B6EA0C
	0x01D0AD2C ADRP X8, 0x2247000
	0x01D0AD30 LDR X8, [X8 + 0x1B8]
	0x01D0AD34 MOV X1, X19
	0x01D0AD38 MOV X3, X31
	0x01D0AD3C MOV X21, X0
	0x01D0AD40 LDR X2, [X8]
	0x01D0AD44 BL 0x27EC49C
	0x01D0AD48 CBZ X20, 0x1D0AE38
	0x01D0AD4C ADRP X10, 0x2247000
	0x01D0AD50 LDR X8, [X20]
	0x01D0AD54 LDR X10, [X10 + 0x1C8]
	0x01D0AD58 LDRH W9, [X8 + 0x12E]
	0x01D0AD5C LDR X1, [X10]
	0x01D0AD60 CBZ X9, 0x1D0AD84
	0x01D0AD64 LDR X10, [X8 + 0xB0]
	0x01D0AD68 ADD X10, X10, 0x8
	0x01D0AD6C LDUR X11, [X10 - 0x8]
	0x01D0AD70 CMP X11, X1
	0x01D0AD74 B.EQ 0x1D0ADA4
	0x01D0AD78 SUBS X9, X9, 0x1
	0x01D0AD7C ADD X10, X10, 0x10
	0x01D0AD80 B.NE 0x1D0AD6C
	0x01D0AD84 MOVZ W2, 0x8
	0x01D0AD88 MOV X0, X20
	0x01D0AD8C BL 0x1BB4284
	0x01D0AD90 B 0x1D0ADB4
	0x01D0AD94 LDP X20, X19, [X31 + 0x20]
	0x01D0AD98 LDP X22, X21, [X31 + 0x10]
	0x01D0AD9C LDR X30, [X31], #0x30
	0x01D0ADA0 RET
	0x01D0ADA4 LDR W9, [X10]
	0x01D0ADA8 ADD W9, W9, 0x8
	0x01D0ADAC ADD X8, X8, W9, 0x4, SXTW

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x251A000
	007 Move X21, 0x2248000
	008 Move X20, 0x2248000
	009 Move W8, [X22+1883]
	010 Move X21, [X21+408]
	011 Move X20, [X20+416]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2248000
	018 Move X0, [X0+416]
	019 Call 0x1B6F7F0
	020 Move X0, 0x2248000
	021 Move X0, [X0+408]
	022 Call 0x1B6F7F0
	023 Move W8, 1
	024 Move [X22+1883], W8
	025 Move X8, -19255296
	026 Move X9, -19251200
	027 Move V0, [X8+3224]
	028 Move V1, [X9+216]
	029 Move W8, 0xB852
	030 NotImplemented "Instruction MOVK not yet implemented."
	031 Move [X19+156], D0
	032 Move [X19+176], D1
	033 Move [X19+184], W8
	034 Move X0, [X21]
	035 Call 0x1B6FA0C
	036 Move X1, [X20]
	037 Move X20, X0
	038 Call List`1<ItemContactPoint>..ctor, X0
	039 Move [X19+464], X20
	040 Move X0, X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X1, X31
	046 Move X30, [X31+48]
	047 Call MonoBehaviour..ctor, X0
	048 Return 

