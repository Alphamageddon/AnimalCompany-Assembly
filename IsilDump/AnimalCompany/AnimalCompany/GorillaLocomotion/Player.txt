Type: AnimalCompany.GorillaLocomotion.Player

Method: AnimalCompany.GorillaLocomotion.Player get_Instance()

Disassembly:
	0x01E1B3A8 ADD X21, X19, 0x190
	0x01E1B3AC STP V0, V1, [X31 + 0x80]
	0x01E1B3B0 STR X8, [X31 + 0xA0]
	0x01E1B3B4 MOVZ W26, 0x1
	0x01E1B3B8 LDR X1, [X23]
	0x01E1B3BC ADD X0, X31, 0x80
	0x01E1B3C0 BL 0x2BE0090
	0x01E1B3C4 TBZ X0, 0x0, 0x1E1B4AC
	0x01E1B3C8 LDR V14, [X31 + 0x90]
	0x01E1B3CC LDR V15, [X31 + 0x98]
	0x01E1B3D0 LDUR V0, [X31 + 0x9C]
	0x01E1B3D4 LDRB W8, [X29 + 0xABD]
	0x01E1B3D8 LDR V8, [X31 + 0xA4]
	0x01E1B3DC STR V0, [X31 + 0x7]
	0x01E1B3E0 CBNZ W8, 0x1E1B3F0
	0x01E1B3E4 MOV X0, X20
	0x01E1B3E8 BL 0x1C16CF4
	0x01E1B3EC STRB W26, [X29 + 0xABD]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x25BE000
	005 Move X20, 0x22DA000
	006 Move W8, [X19+3611]
	007 Move X20, [X20+1440]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x22DA000
	013 Move X0, [X0+1440]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3611], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move X0, [X8]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void Awake()

Disassembly:
	0x01E1B3F0 LDRB W8, [X19 + 0x113]
	0x01E1B3F4 CBNZ W8, 0x1E1B3B8
	0x01E1B3F8 LDR X8, [X20]
	0x01E1B3FC LDP V16, V0, [X31 + 0x60]
	0x01E1B400 FSUB S2, S15, S8
	0x01E1B404 LDR V3, [X19 + 0xB0]
	0x01E1B408 LDR X8, [X8 + 0xB8]
	0x01E1B40C LDR V7, [X19 + 0xB8]
	0x01E1B410 FSUB V17.2S, V14.2S, V0.2S
	0x01E1B414 MOV S4, V17.S[1]
	0x01E1B418 LDP S5, S1, [X8 + 0x28]
	0x01E1B41C FADD S1, S1, S1
	0x01E1B420 FMUL S1, S1, S13
	0x01E1B424 FMUL S1, S1, S16
	0x01E1B428 FMUL S1, S1, S16
	0x01E1B42C FADD S6, S2, S1
	0x01E1B430 LDR V1, [X8 + 0x24]
	0x01E1B434 FADD S2, S5, S5
	0x01E1B438 FMUL S2, S2, S13
	0x01E1B43C FMUL S2, S2, S16
	0x01E1B440 FADD S1, S1, S1
	0x01E1B444 FMUL S1, S1, S13
	0x01E1B448 FMUL S1, S1, S16
	0x01E1B44C FMUL S2, S2, S16
	0x01E1B450 FMUL S1, S1, S16
	0x01E1B454 FADD S5, S4, S2
	0x01E1B458 FADD S4, S17, S1
	0x01E1B45C MOV S1, V0.S[1]
	0x01E1B460 ADD X1, X31, 0xF0
	0x01E1B464 MOVZ W2, 0x1
	0x01E1B468 MOV X0, X19
	0x01E1B46C MOV V2.16B, V8.16B
	0x01E1B470 MOV X3, X21
	0x01E1B474 BL 0x1E1C8AC
	0x01E1B478 TBZ X0, 0x0, 0x1E1B3B8
	0x01E1B47C LDR V0, [X31 + 0x7]
	0x01E1B480 FSUB S1, S8, S15
	0x01E1B484 FADD S10, S10, S1
	0x01E1B488 ADD W22, W22, 0x1
	0x01E1B48C FSUB V0.2S, V0.2S, V14.2S
	0x01E1B490 FADD V11.2S, V11.2S, V0.2S
	0x01E1B494 MOV X0, X21
	0x01E1B498 MOV X1, X31
	0x01E1B49C BL 0x3C8E678
	0x01E1B4A0 MOV X0, X19
	0x01E1B4A4 BL 0x1E1C6C0
	0x01E1B4A8 B 0x1E1B3B8
	0x01E1B4AC LDR X1, [X24]
	0x01E1B4B0 ADD X0, X31, 0x80
	0x01E1B4B4 BL 0x2BE008C
	0x01E1B4B8 ADRP X24, 0x22D8000
	0x01E1B4BC LDR X24, [X24 + 0x5A8]
	0x01E1B4C0 LDR V15, [X31 + 0x40]
	0x01E1B4C4 LDR V4, [X31 + 0x5]
	0x01E1B4C8 CMP W22, 0x1
	0x01E1B4CC ADRP X23, 0x25BD000
	0x01E1B4D0 MOV W26, W25
	0x01E1B4D4 B.LT 0x1E1B514
	0x01E1B4D8 SCVTF S0, W22
	0x01E1B4DC FMOV S1, 1
	0x01E1B4E0 UNIMPLEMENTED
	0x01E1B4E4 FDIV S0, S10, S0
	0x01E1B4E8 FADD S9, S9, S1
	0x00000000 INVALID

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x25BE000
	007 Move X22, 0x22DA000
	008 Move X21, 0x22D9000
	009 Move W8, [X20+3612]
	010 Move X22, [X22+1440]
	011 Move X21, [X21+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x22D9000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x22DA000
	021 Move X0, [X0+1440]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3612], W8
	025 Move X8, [X22]
	026 Move X0, [X21]
	027 Move X8, [X8+184]
	028 Move W9, [X0+224]
	029 Move X20, [X8]
	030 Compare W9, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Inequality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {70}
	041 Move X8, [X22]
	042 Move X0, [X21]
	043 Move X8, [X8+184]
	044 Move W9, [X0+224]
	045 Move X20, [X8]
	046 Compare W9, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X19
	051 Move X2, X31
	052 Call Object.op_Inequality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {70}
	057 Move X0, X19
	058 Move X1, X31
	059 Call Component.get_gameObject, X0
	060 Move X8, [X21]
	061 Move X20, X0
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Move X0, X8
	066 Call 0x1C17DFC
	067 Move X0, X20
	068 Move X1, X31
	069 Call Object.Destroy, X0
	070 Move X8, [X22]
	071 Move X8, [X8+184]
	072 Move [X8], X19
	073 Move X0, X19
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X22, [X31+16]
	077 Move X21, [X31+24]
	078 Move X30, [X31+48]

Method: System.Void InitializeValues()

Disassembly:
	0x01E1B4F0 FADD S12, S0, S12
	0x01E1B4F4 FADD V4.2S, V1.2S, V4.2S
	0x01E1B4F8 MOVZ W29, 0x1
	0x01E1B4FC STR S12, [X31 + 0xE8]
	0x01E1B500 STR D4, [X31 + 0xE0]
	0x01E1B504 B 0x1E1B518
	0x01E1B508 MOV W29, W31
	0x01E1B50C ADRP X25, 0x25BD000
	0x01E1B510 B 0x1E1B530
	0x01E1B514 MOV W29, W31
	0x01E1B518 LDR X8, [X19 + 0x1E0]
	0x01E1B51C ADRP X25, 0x25BD000
	0x01E1B520 CBZ X8, 0x1E1C3B8
	0x01E1B524 LDR W9, [X8 + 0x1C]
	0x01E1B528 ADD W9, W9, 0x1
	0x01E1B52C STP W31, W9, [X8 + 0x18]
	0x01E1B530 ADD X22, X19, 0x1D4
	0x01E1B534 CBZ W26, 0x1E1B5EC
	0x01E1B538 LDR V0, [X19 + 0x1F8]
	0x01E1B53C LDR V1, [X19 + 0x1F4]
	0x01E1B540 LDR V2, [X22 + 0x18]
	0x01E1B544 LDRB W8, [X25 + 0x783]
	0x01E1B548 SCVTF S0, S0
	0x01E1B54C UNIMPLEMENTED
	0x01E1B550 FDIV S0, S1, S0
	0x00000000 INVALID
	0x01E1B558 FADD S12, S12, S0
	0x01E1B55C FADD V4.2S, V4.2S, V1.2S
	0x01E1B560 STR S12, [X31 + 0xE8]
	0x01E1B564 STR D4, [X31 + 0xE0]
	0x01E1B568 LDR X21, [X19 + 0x90]
	0x01E1B56C STR V4, [X31 + 0x5]
	0x01E1B570 CBNZ W8, 0x1E1B588
	0x01E1B574 ADRP X0, 0x22D8000
	0x01E1B578 LDR X0, [X0 + 0x5A0]
	0x01E1B57C BL 0x1C16CF4
	0x01E1B580 MOVZ W8, 0x1
	0x01E1B584 STRB W8, [X25 + 0x783]
	0x01E1B588 CBZ X21, 0x1E1C3B8
	0x01E1B58C LDR X8, [X20]
	0x01E1B590 MOV X0, X21
	0x01E1B594 MOV X1, X31
	0x01E1B598 LDR X8, [X8 + 0xB8]
	0x01E1B59C LDP S1, S2, [X8 + 0x4]
	0x01E1B5A0 LDR V0, [X8]
	0x01E1B5A4 BL 0x3C8E908
	0x01E1B5A8 LDRB W8, [X25 + 0x783]
	0x01E1B5AC FMOV S8, 1
	0x01E1B5B0 CBNZ W8, 0x1E1B5C8
	0x01E1B5B4 ADRP X0, 0x22D8000
	0x01E1B5B8 LDR X0, [X0 + 0x5A0]
	0x01E1B5BC BL 0x1C16CF4
	0x01E1B5C0 MOVZ W8, 0x1
	0x01E1B5C4 STRB W8, [X25 + 0x783]
	0x01E1B5C8 LDR X8, [X20]
	0x01E1B5CC LDR V4, [X31 + 0x5]
	0x01E1B5D0 FADD S9, S9, S8
	0x01E1B5D4 LDR X8, [X8 + 0xB8]
	0x01E1B5D8 LDR V0, [X8]
	0x01E1B5DC LDR V1, [X8 + 0x8]
	0x01E1B5E0 STR D0, [X22 + 0x18]
	0x01E1B5E4 STR S1, [X19 + 0x1F4]
	0x01E1B5E8 STR W31, [X19 + 0x1F8]
	0x01E1B5EC FMOV S0, 1
	0x01E1B5F0 MOV S8, V4.S[1]
	0x01E1B5F4 FCMP S9, S0
	0x01E1B5F8 B.LE 0x1E1B610
	0x01E1B5FC FDIV S4, S4, S9
	0x01E1B600 FDIV S8, S8, S9

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25BE000
	007 Move X22, 0x22DC000
	008 Move X20, 0x22DB000
	009 Move W8, [X21+3613]
	010 Move X22, [X22+2968]
	011 Move X20, [X20+2480]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x22DC000
	018 Move X0, [X0+2968]
	019 Call 0x1C17CF4
	020 Move X0, 0x22DB000
	021 Move X0, [X0+2480]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3613], W8
	025 Move X1, [X22]
	026 Move X0, X19
	027 Call 0x21A4894, X0
	028 Move [X19+144], X0
	029 Move W1, [X19+152]
	030 Move X0, [X20]
	031 Call 0x1C17D6C
	032 Move X8, [X19+56]
	033 Move [X19+192], X0
	034 Compare X8, 0
	035 JumpIfEqual {87}
	036 Move X0, X8
	037 Move X1, X31
	038 Call Component.get_transform, X0
	039 Compare X0, 0
	040 JumpIfEqual {87}
	041 Move X1, X31
	042 Call Transform.get_position, X0
	043 Move X0, [X19+64]
	044 Move [X19+104], S0
	045 Move [X19+112], S1
	046 Move [X19+112], S2
	047 Compare X0, 0
	048 JumpIfEqual {87}
	049 Move X1, X31
	050 Call Component.get_transform, X0
	051 Compare X0, 0
	052 JumpIfEqual {87}
	053 Move X1, X31
	054 Call Transform.get_position, X0
	055 Move X0, [X19+40]
	056 Move [X19+116], S0
	057 Move [X19+124], S1
	058 Move [X19+124], S2
	059 Compare X0, 0
	060 JumpIfEqual {87}
	061 Move X1, X31
	062 Call Component.get_transform, X0
	063 Compare X0, 0
	064 JumpIfEqual {87}
	065 Move X1, X31
	066 Call Transform.get_position, X0
	067 Move X0, X19
	068 Move X1, X31
	069 Move [X19+128], S0
	070 Move [X19+136], S1
	071 Move [X19+136], S2
	072 Move [X19+200], W31
	073 Call Component.get_transform, X0
	074 Compare X0, 0
	075 JumpIfEqual {87}
	076 Move X1, X31
	077 Call Transform.get_position, X0
	078 Move [X19+232], S0
	079 Move [X19+240], S1
	080 Move [X19+240], S2
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X30, [X31+48]
	086 Return 
	087 Call 0x1C17F20

Method: UnityEngine.Vector3 CurrentLeftHandPosition()

Disassembly:
	0x01E1B604 FDIV S12, S12, S9
	0x01E1B608 STP S4, S8, [X31 + 0xE0]
	0x01E1B60C STR S12, [X31 + 0xE8]
	0x01E1B610 LDRB W8, [X25 + 0x783]
	0x01E1B614 CBNZ W8, 0x1E1B634
	0x01E1B618 ADRP X0, 0x22D8000
	0x01E1B61C LDR X0, [X0 + 0x5A0]
	0x01E1B620 STR V4, [X31 + 0x5]
	0x01E1B624 BL 0x1C16CF4
	0x01E1B628 LDR V4, [X31 + 0x5]
	0x01E1B62C MOVZ W8, 0x1
	0x01E1B630 STRB W8, [X25 + 0x783]
	0x01E1B634 LDR X8, [X20]
	0x01E1B638 LDR X8, [X8 + 0xB8]
	0x01E1B63C LDP S0, S1, [X8]
	0x01E1B640 LDR V2, [X8 + 0x8]
	0x01E1B644 FSUB S0, S4, S0
	0x01E1B648 FSUB S1, S8, S1
	0x01E1B64C FSUB S2, S12, S2
	0x01E1B650 FMUL S0, S0, S0
	0x01E1B654 FMUL S1, S1, S1
	0x01E1B658 FADD S0, S0, S1
	0x01E1B65C FMUL S1, S2, S2
	0x01E1B660 FADD S0, S1, S0
	0x01E1B664 FCMP S0, S15
	0x01E1B668 B.MI 0x1E1B67C
	0x01E1B66C LDR V0, [X19 + 0x1E8]
	0x01E1B670 ADD X0, X31, 0xE0
	0x01E1B674 LDR V1, [X31 + 0x6]
	0x01E1B678 BL 0x1E1C57C
	0x01E1B67C LDR X0, [X19 + 0x28]
	0x01E1B680 CBZ X0, 0x1E1C3B8
	0x01E1B684 LDP S8, S9, [X19 + 0x80]
	0x01E1B688 LDR V10, [X19 + 0x88]
	0x01E1B68C MOV X1, X31
	0x01E1B690 BL 0x3C90124
	0x01E1B694 LDR X0, [X19 + 0x28]
	0x01E1B698 CBZ X0, 0x1E1C3B8
	0x01E1B69C MOV X1, X31
	0x01E1B6A0 MOV V11.16B, V0.16B
	0x01E1B6A4 BL 0x3C32E90
	0x01E1B6A8 CBZ X0, 0x1E1C3B8
	0x01E1B6AC MOV X1, X31
	0x01E1B6B0 BL 0x3C3F58C
	0x01E1B6B4 LDP S12, S13, [X31 + 0xE0]
	0x01E1B6B8 LDR V14, [X31 + 0xE8]
	0x01E1B6BC LDP S3, S5, [X19 + 0x80]
	0x01E1B6C0 LDR V6, [X19 + 0x88]
	0x01E1B6C4 LDR V7, [X19 + 0xB8]
	0x01E1B6C8 FADD S0, S0, S12
	0x01E1B6CC FSUB S4, S0, S3
	0x01E1B6D0 FADD S0, S1, S13
	0x01E1B6D4 FADD S1, S2, S14
	0x01E1B6D8 FSUB S5, S0, S5
	0x01E1B6DC FSUB S6, S1, S6
	0x01E1B6E0 ADD X1, X31, 0xF0
	0x01E1B6E4 ADD X3, X31, 0xB0
	0x01E1B6E8 MOV X0, X19
	0x01E1B6EC MOV V0.16B, V8.16B
	0x01E1B6F0 MOV V1.16B, V9.16B
	0x01E1B6F4 MOV V2.16B, V10.16B
	0x01E1B6F8 MOV V3.16B, V11.16B
	0x01E1B6FC MOV W2, W31
	0x01E1B700 BL 0x1E1C8AC
	0x01E1B704 TBZ X0, 0x0, 0x1E1B8F8
	0x01E1B708 LDP S0, S1, [X31 + 0xF0]
	0x01E1B70C LDR V2, [X31 + 0xF8]
	0x01E1B710 LDP S8, S9, [X19 + 0x80]
	0x01E1B714 LDR V10, [X19 + 0x88]
	0x01E1B718 FSUB S12, S0, S8
	0x01E1B71C FSUB S13, S1, S9
	0x01E1B720 FSUB S14, S2, S10
	0x01E1B724 STP S12, S13, [X31 + 0xE0]
	0x01E1B728 STR S14, [X31 + 0xE8]
	0x01E1B72C LDR X0, [X19 + 0x28]
	0x01E1B730 CBZ X0, 0x1E1C3B8
	0x01E1B734 MOV X1, X31
	0x01E1B738 BL 0x3C32E90
	0x01E1B73C CBZ X0, 0x1E1C3B8
	0x01E1B740 MOV X1, X31
	0x01E1B744 BL 0x3C3F58C
	0x01E1B748 LDR X0, [X19 + 0x28]
	0x01E1B74C CBZ X0, 0x1E1C3B8
	0x01E1B750 STR S0, [X31 + 0x20]
	0x01E1B754 LDR V3, [X19 + 0x80]
	0x01E1B758 LDR V0, [X19 + 0x84]
	0x01E1B75C MOV X1, X31
	0x01E1B760 STP S2, S1, [X31 + 0x18]
	0x01E1B764 STR S10, [X31 + 0x30]
	0x01E1B768 STP S0, S3, [X31 + 0x10]
	0x01E1B76C LDR V0, [X19 + 0x88]
	0x01E1B770 STR S9, [X31 + 0x50]
	0x01E1B774 STR S8, [X31 + 0x70]
	0x01E1B778 STR S0, [X31 + 0xC]
	0x01E1B77C BL 0x3C32E90
	0x01E1B780 CBZ X0, 0x1E1C3B8
	0x01E1B784 MOV X1, X31
	0x01E1B788 BL 0x3C3F58C
	0x01E1B78C LDP S10, S11, [X19 + 0x80]
	0x01E1B790 LDRB W8, [X23 + 0x784]
	0x01E1B794 LDR V9, [X19 + 0x88]
	0x01E1B798 MOV V15.16B, V1.16B
	0x01E1B79C MOV V8.16B, V2.16B
	0x01E1B7A0 CBNZ W8, 0x1E1B7C0
	0x01E1B7A4 ADRP X0, 0x22D8000
	0x01E1B7A8 LDR X0, [X0 + 0x5A8]
	0x01E1B7AC STR S0, [X31 + 0x8]
	0x01E1B7B0 BL 0x1C16CF4
	0x01E1B7B4 LDR V0, [X31 + 0x8]
	0x01E1B7B8 MOVZ W8, 0x1
	0x01E1B7BC STRB W8, [X23 + 0x784]
	0x01E1B7C0 LDR X0, [X24]
	0x01E1B7C4 LDR W8, [X0 + 0xE0]
	0x01E1B7C8 CBNZ W8, 0x1E1B7D8
	0x01E1B7CC STR S0, [X31 + 0x8]
	0x01E1B7D0 BL 0x1C16DFC
	0x01E1B7D4 LDR V0, [X31 + 0x8]
	0x01E1B7D8 LDR X0, [X19 + 0x28]
	0x01E1B7DC CBZ X0, 0x1E1C3B8
	0x01E1B7E0 LDR V3, [X31 + 0x20]
	0x01E1B7E4 LDP S5, S4, [X31 + 0x10]
	0x01E1B7E8 FSUB S0, S0, S10
	0x01E1B7EC FSUB S1, S15, S11
	0x01E1B7F0 LDR V6, [X31 + 0xC]
	0x01E1B7F4 FSUB S3, S3, S4
	0x01E1B7F8 LDR V4, [X31 + 0x1C]
	0x01E1B7FC FSUB S2, S8, S9
	0x01E1B800 FADD S0, S12, S0
	0x01E1B804 FADD S1, S13, S1
	0x01E1B808 FSUB S4, S4, S5
	0x01E1B80C LDR V5, [X31 + 0x18]
	0x01E1B810 FADD S2, S14, S2
	0x01E1B814 FMUL S0, S0, S0
	0x01E1B818 FMUL S1, S1, S1
	0x01E1B81C FADD S0, S0, S1
	0x01E1B820 FMUL S1, S2, S2
	0x01E1B824 FSUB S5, S5, S6
	0x01E1B828 FADD S3, S12, S3
	0x01E1B82C FADD S0, S0, S1
	0x01E1B830 MOV X1, X31
	0x01E1B834 STR S3, [X31 + 0x20]
	0x01E1B838 FADD S9, S13, S4
	0x01E1B83C FADD S10, S14, S5
	0x01E1B840 FSQRT S15, S0
	0x01E1B844 BL 0x3C90124
	0x01E1B848 LDR V11, [X19 + 0xB8]
	0x01E1B84C ADD X0, X19, 0x10C
	0x01E1B850 MOV X1, X31
	0x01E1B854 MOV V8.16B, V0.16B
	0x01E1B858 BL 0x3C35CC4

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X1, [X0+80]
	015 Move V0, [X0+256]
	016 Move V1, [X0+260]
	017 Move V2, [X0+264]
	018 Move X19, X0
	019 Call Player.PositionWithOffset, X0, X1, X2
	020 Move X0, [X19+40]
	021 Compare X0, 0
	022 JumpIfEqual {170}
	023 Move X1, X31
	024 Move V8, V0
	025 Move V9, V1
	026 Move V10, V2
	027 Call Component.get_transform, X0
	028 Compare X0, 0
	029 JumpIfEqual {170}
	030 Move X1, X31
	031 Call Transform.get_position, X0
	032 Move X20, 0x25BE000
	033 Move W8, [X20+1924]
	034 Move V11, V0
	035 Move V12, V1
	036 Move V13, V2
	037 Compare W8, 0
	038 JumpIfNotEqual {44}
	039 Move X0, 0x22D9000
	040 Move X0, [X0+1448]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X20+1924], W8
	044 Move X20, 0x22D9000
	045 Move X20, [X20+1448]
	046 Subtract S11, S8, S11
	047 Subtract S9, S9, S12
	048 Subtract S8, S10, S13
	049 Move X0, [X20]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Multiply S0, S11, S11
	055 Multiply S1, S9, S9
	056 Move V2, [X19+156]
	057 Add S0, S0, S1
	058 Multiply S1, S8, S8
	059 Add S0, S1, S0
	060 NotImplemented "Instruction FSQRT not yet implemented."
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 Move X1, [X19+80]
	063 Move V0, [X19+256]
	064 Move V1, [X19+260]
	065 Move V2, [X19+264]
	066 Call Player.PositionWithOffset, X0, X1, X2
	067 Move X0, [X19+40]
	068 Compare X0, 0
	069 JumpIfEqual {170}
	070 Move X1, X31
	071 Call Component.get_transform, X0
	072 Compare X0, 0
	073 JumpIfEqual {170}
	074 Move X1, X31
	075 Call Transform.get_position, X0
	076 Move V3, [X19+264]
	077 Move V8, V0
	078 Move V9, V1
	079 Move X1, [X19+80]
	080 Move V0, [X19+256]
	081 Move V1, [X19+260]
	082 Move V10, V2
	083 Move V2, V3
	084 Call Player.PositionWithOffset, X0, X1, X2
	085 Move X0, [X19+40]
	086 Compare X0, 0
	087 JumpIfEqual {170}
	088 Move X1, X31
	089 Move V11, V0
	090 Move V12, V1
	091 Move V13, V2
	092 Move [X31+12], S10
	093 Move V10, V9
	094 Move V9, V8
	095 Call Component.get_transform, X0
	096 Compare X0, 0
	097 JumpIfEqual {170}
	098 Move X1, X31
	099 Call Transform.get_position, X0
	100 Move X21, 0x25BE000
	101 Move W8, [X21+1925]
	102 Move V14, V0
	103 Move V15, V1
	104 Move V8, V2
	105 Compare W8, 0
	106 JumpIfNotEqual {112}
	107 Move X0, 0x22D9000
	108 Move X0, [X0+1448]
	109 Call 0x1C17CF4
	110 Move W8, 1
	111 Move [X21+1925], W8
	112 Move X0, [X20]
	113 Subtract S14, S11, S14
	114 Subtract S11, S12, S15
	115 Subtract S8, S13, S8
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Multiply S0, S14, S14
	121 Multiply S1, S11, S11
	122 Move X8, -20119552
	123 Add S0, S0, S1
	124 Move V1, [X8+380]
	125 Multiply S2, S8, S8
	126 Add S0, S2, S0
	127 NotImplemented "Instruction FSQRT not yet implemented."
	128 NotImplemented "Instruction FCMP not yet implemented."
	129 NotImplemented "Instruction FDIV not yet implemented."
	130 NotImplemented "Instruction FDIV not yet implemented."
	131 NotImplemented "Instruction FDIV not yet implemented."
	132 Move X20, 0x25BE000
	133 Move W8, [X20+1923]
	134 Compare W8, 0
	135 JumpIfNotEqual {141}
	136 Move X0, 0x22D9000
	137 Move X0, [X0+1440]
	138 Call 0x1C17CF4
	139 Move W8, 1
	140 Move [X20+1923], W8
	141 Move X8, 0x22D9000
	142 Move X8, [X8+1440]
	143 Move X8, [X8]
	144 Move X8, [X8+184]
	145 Move S0, [X8]
	146 Move S1, [X8+4]
	147 Move V2, [X8+8]
	148 Move V3, [X19+156]
	149 Move V4, [X31+12]
	150 Multiply S0, S0, S3
	151 Multiply S1, S1, S3
	152 Multiply S2, S2, S3
	153 Add S0, S9, S0
	154 Add S1, S10, S1
	155 Add S2, S4, S2
	156 Move X20, [X31+96]
	157 Move X19, [X31+104]
	158 Move X30, [X31+80]
	159 Move X21, [X31+88]
	160 Move D9, [X31+64]
	161 Move D8, [X31+72]
	162 Move D11, [X31+48]
	163 Move D10, [X31+56]
	164 Move D13, [X31+32]
	165 Move D12, [X31+40]
	166 Move D15, [X31+16]
	167 Move D14, [X31+24]
	168 Add X31, X31, 112
	169 Return X0
	170 Call 0x1C17F20

Method: UnityEngine.Vector3 CurrentRightHandPosition()

Disassembly:
	0x01E1B8DC MOV X1, X31
	0x01E1B8E0 BL 0x3C3F58C
	0x01E1B8E4 FSUB S12, S8, S0
	0x01E1B8E8 FSUB S13, S9, S1
	0x01E1B8EC FSUB S14, S10, S2
	0x01E1B8F0 STP S12, S13, [X31 + 0xE0]
	0x01E1B8F4 STR S14, [X31 + 0xE8]
	0x01E1B8F8 LDRB W8, [X25 + 0x783]
	0x01E1B8FC CBNZ W8, 0x1E1B914
	0x01E1B900 ADRP X0, 0x22D8000
	0x01E1B904 LDR X0, [X0 + 0x5A0]
	0x01E1B908 BL 0x1C16CF4
	0x01E1B90C MOVZ W8, 0x1
	0x01E1B910 STRB W8, [X25 + 0x783]
	0x01E1B914 LDR X8, [X20]
	0x01E1B918 LDR X8, [X8 + 0xB8]
	0x01E1B91C LDP S0, S1, [X8]
	0x01E1B920 LDR V2, [X8 + 0x8]
	0x01E1B924 FSUB S0, S12, S0
	0x01E1B928 FSUB S1, S13, S1
	0x01E1B92C FSUB S2, S14, S2
	0x01E1B930 FMUL S0, S0, S0
	0x01E1B934 FMUL S1, S1, S1
	0x01E1B938 FADD S0, S0, S1
	0x01E1B93C FMUL S1, S2, S2
	0x01E1B940 FADD S0, S1, S0
	0x01E1B944 FCMP S0, S15
	0x01E1B948 B.MI 0x1E1B9B8
	0x01E1B94C LDR X21, [X19 + 0x90]
	0x01E1B950 MOV X0, X19
	0x01E1B954 MOV X1, X31
	0x01E1B958 BL 0x3C32E90
	0x01E1B95C CBZ X0, 0x1E1C3B8
	0x01E1B960 MOV X1, X31
	0x01E1B964 BL 0x3C3F58C
	0x01E1B968 CBZ X21, 0x1E1C3B8
	0x01E1B96C FADD S2, S14, S2
	0x01E1B970 FADD S1, S13, S1
	0x01E1B974 FADD S0, S12, S0
	0x01E1B978 MOV X0, X21
	0x01E1B97C MOV X1, X31
	0x01E1B980 BL 0x3C8F1E0
	0x01E1B984 MOV X0, X19
	0x01E1B988 MOV X1, X31
	0x01E1B98C BL 0x3C32E90
	0x01E1B990 LDR X8, [X19 + 0x90]
	0x01E1B994 CBZ X8, 0x1E1C3B8
	0x01E1B998 MOV X21, X0
	0x01E1B99C MOV X0, X8
	0x01E1B9A0 MOV X1, X31
	0x01E1B9A4 BL 0x3C8EF74
	0x01E1B9A8 CBZ X21, 0x1E1C3B8
	0x01E1B9AC MOV X0, X21
	0x01E1B9B0 MOV X1, X31
	0x01E1B9B4 BL 0x3C3F62C
	0x01E1B9B8 LDR X0, [X19 + 0x28]
	0x01E1B9BC CBZ X0, 0x1E1C3B8
	0x01E1B9C0 MOV X1, X31
	0x01E1B9C4 BL 0x3C32E90
	0x01E1B9C8 CBZ X0, 0x1E1C3B8
	0x01E1B9CC MOV X1, X31
	0x01E1B9D0 BL 0x3C3F58C
	0x01E1B9D4 MOV X0, X19
	0x01E1B9D8 STP S0, S1, [X19 + 0x80]
	0x01E1B9DC STR S2, [X19 + 0x88]
	0x01E1B9E0 BL 0x1E1A604
	0x01E1B9E4 MOV V4.16B, V0.16B
	0x01E1B9E8 MOV V5.16B, V1.16B
	0x01E1B9EC MOV V6.16B, V2.16B
	0x01E1B9F0 LDP S0, S1, [X19 + 0x68]
	0x01E1B9F4 LDR V2, [X19 + 0x70]
	0x01E1B9F8 LDR V3, [X19 + 0xB0]
	0x01E1B9FC LDR V7, [X19 + 0xB8]
	0x01E1BA00 FSUB S4, S4, S0
	0x01E1BA04 FSUB S5, S5, S1
	0x01E1BA08 FSUB S6, S6, S2
	0x01E1BA0C TBZ X28, 0x0, 0x1E1BA1C
	0x01E1BA10 TBZ X27, 0x0, 0x1E1BA30
	0x01E1BA14 MOV W8, W31
	0x01E1BA18 B 0x1E1BA38
	0x01E1BA1C LDRB W8, [X19 + 0x110]
	0x01E1BA20 CMP W8, 0x0
	0x01E1BA24 CSET W9, EQ
	0x01E1BA28 ORR W9, W9, W27, 0x0
	0x01E1BA2C TBNZ X9, 0x0, 0x1E1BA34
	0x01E1BA30 LDRB W8, [X19 + 0x111]
	0x01E1BA34 EOR W8, W8, 0x1
	0x01E1BA38 ANDS W31, W8, 0xFF
	0x01E1BA3C ADD X3, X19, 0x138
	0x01E1BA40 CSET W2, NE
	0x01E1BA44 ADD X1, X31, 0xF0
	0x01E1BA48 MOV X0, X19
	0x01E1BA4C BL 0x1E1C8AC
	0x01E1BA50 TBZ X0, 0x0, 0x1E1BA6C
	0x01E1BA54 LDR W8, [X31 + 0xF8]
	0x01E1BA58 LDR X9, [X31 + 0xF0]
	0x01E1BA5C MOVZ W28, 0x1
	0x01E1BA60 STR W8, [X19 + 0x70]
	0x01E1BA64 STR X9, [X19 + 0x68]
	0x01E1BA68 B 0x1E1BA7C
	0x01E1BA6C MOV X0, X19
	0x01E1BA70 BL 0x1E1A604
	0x01E1BA74 STP S0, S1, [X19 + 0x68]
	0x01E1BA78 STR S2, [X19 + 0x70]
	0x01E1BA7C MOV X0, X19
	0x01E1BA80 BL 0x1E1A8DC
	0x01E1BA84 MOV V4.16B, V0.16B
	0x01E1BA88 MOV V5.16B, V1.16B
	0x01E1BA8C MOV V6.16B, V2.16B
	0x01E1BA90 LDP S0, S1, [X19 + 0x74]
	0x01E1BA94 LDR V2, [X19 + 0x7C]
	0x01E1BA98 LDR V3, [X19 + 0xB0]
	0x01E1BA9C LDR V7, [X19 + 0xB8]
	0x01E1BAA0 FSUB S4, S4, S0
	0x01E1BAA4 FSUB S5, S5, S1
	0x01E1BAA8 FSUB S6, S6, S2
	0x01E1BAAC TBZ X28, 0x0, 0x1E1BABC
	0x01E1BAB0 TBZ X27, 0x0, 0x1E1BAD0
	0x01E1BAB4 MOV W8, W31
	0x01E1BAB8 B 0x1E1BAD8
	0x01E1BABC LDRB W8, [X19 + 0x110]
	0x01E1BAC0 CMP W8, 0x0
	0x01E1BAC4 CSET W9, EQ
	0x01E1BAC8 ORR W9, W27, W9, 0x0
	0x01E1BACC TBNZ X9, 0x0, 0x1E1BAD4
	0x01E1BAD0 LDRB W8, [X19 + 0x111]
	0x01E1BAD4 EOR W8, W8, 0x1
	0x01E1BAD8 ANDS W31, W8, 0xFF
	0x01E1BADC ADD X3, X19, 0x164
	0x01E1BAE0 CSET W2, NE
	0x01E1BAE4 ADD X1, X31, 0xF0
	0x01E1BAE8 MOV X0, X19
	0x01E1BAEC BL 0x1E1C8AC
	0x01E1BAF0 TBZ X0, 0x0, 0x1E1BB0C
	0x01E1BAF4 LDR W8, [X31 + 0xF8]
	0x01E1BAF8 LDR X9, [X31 + 0xF0]
	0x01E1BAFC MOVZ W27, 0x1
	0x01E1BB00 STR W8, [X19 + 0x7C]
	0x01E1BB04 STUR X9, [X19 + 0x74]
	0x01E1BB08 B 0x1E1BB1C
	0x01E1BB0C MOV X0, X19
	0x01E1BB10 BL 0x1E1A8DC
	0x01E1BB14 STP S0, S1, [X19 + 0x74]
	0x01E1BB18 STR S2, [X19 + 0x7C]
	0x01E1BB1C MOV X0, X19
	0x01E1BB20 LDR V0, [X31 + 0x6]
	0x01E1BB24 BL 0x1E1CCF4

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X1, [X0+72]
	015 Move S0, [X0+244]
	016 Move S1, [X0+248]
	017 Move V2, [X0+252]
	018 Move X19, X0
	019 Call Player.PositionWithOffset, X0, X1, X2
	020 Move X0, [X19+40]
	021 Compare X0, 0
	022 JumpIfEqual {170}
	023 Move X1, X31
	024 Move V8, V0
	025 Move V9, V1
	026 Move V10, V2
	027 Call Component.get_transform, X0
	028 Compare X0, 0
	029 JumpIfEqual {170}
	030 Move X1, X31
	031 Call Transform.get_position, X0
	032 Move X20, 0x25BE000
	033 Move W8, [X20+1924]
	034 Move V11, V0
	035 Move V12, V1
	036 Move V13, V2
	037 Compare W8, 0
	038 JumpIfNotEqual {44}
	039 Move X0, 0x22D9000
	040 Move X0, [X0+1448]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X20+1924], W8
	044 Move X20, 0x22D9000
	045 Move X20, [X20+1448]
	046 Subtract S11, S8, S11
	047 Subtract S9, S9, S12
	048 Subtract S8, S10, S13
	049 Move X0, [X20]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Multiply S0, S11, S11
	055 Multiply S1, S9, S9
	056 Move V2, [X19+156]
	057 Add S0, S0, S1
	058 Multiply S1, S8, S8
	059 Add S0, S1, S0
	060 NotImplemented "Instruction FSQRT not yet implemented."
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 Move X1, [X19+72]
	063 Move S0, [X19+244]
	064 Move S1, [X19+248]
	065 Move V2, [X19+252]
	066 Call Player.PositionWithOffset, X0, X1, X2
	067 Move X0, [X19+40]
	068 Compare X0, 0
	069 JumpIfEqual {170}
	070 Move X1, X31
	071 Call Component.get_transform, X0
	072 Compare X0, 0
	073 JumpIfEqual {170}
	074 Move X1, X31
	075 Call Transform.get_position, X0
	076 Move V3, [X19+252]
	077 Move V8, V0
	078 Move V9, V1
	079 Move X1, [X19+72]
	080 Move S0, [X19+244]
	081 Move S1, [X19+248]
	082 Move V10, V2
	083 Move V2, V3
	084 Call Player.PositionWithOffset, X0, X1, X2
	085 Move X0, [X19+40]
	086 Compare X0, 0
	087 JumpIfEqual {170}
	088 Move X1, X31
	089 Move V11, V0
	090 Move V12, V1
	091 Move V13, V2
	092 Move [X31+12], S10
	093 Move V10, V9
	094 Move V9, V8
	095 Call Component.get_transform, X0
	096 Compare X0, 0
	097 JumpIfEqual {170}
	098 Move X1, X31
	099 Call Transform.get_position, X0
	100 Move X21, 0x25BE000
	101 Move W8, [X21+1925]
	102 Move V14, V0
	103 Move V15, V1
	104 Move V8, V2
	105 Compare W8, 0
	106 JumpIfNotEqual {112}
	107 Move X0, 0x22D9000
	108 Move X0, [X0+1448]
	109 Call 0x1C17CF4
	110 Move W8, 1
	111 Move [X21+1925], W8
	112 Move X0, [X20]
	113 Subtract S14, S11, S14
	114 Subtract S11, S12, S15
	115 Subtract S8, S13, S8
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Multiply S0, S14, S14
	121 Multiply S1, S11, S11
	122 Move X8, -20119552
	123 Add S0, S0, S1
	124 Move V1, [X8+380]
	125 Multiply S2, S8, S8
	126 Add S0, S2, S0
	127 NotImplemented "Instruction FSQRT not yet implemented."
	128 NotImplemented "Instruction FCMP not yet implemented."
	129 NotImplemented "Instruction FDIV not yet implemented."
	130 NotImplemented "Instruction FDIV not yet implemented."
	131 NotImplemented "Instruction FDIV not yet implemented."
	132 Move X20, 0x25BE000
	133 Move W8, [X20+1923]
	134 Compare W8, 0
	135 JumpIfNotEqual {141}
	136 Move X0, 0x22D9000
	137 Move X0, [X0+1440]
	138 Call 0x1C17CF4
	139 Move W8, 1
	140 Move [X20+1923], W8
	141 Move X8, 0x22D9000
	142 Move X8, [X8+1440]
	143 Move X8, [X8]
	144 Move X8, [X8+184]
	145 Move S0, [X8]
	146 Move S1, [X8+4]
	147 Move V2, [X8+8]
	148 Move V3, [X19+156]
	149 Move V4, [X31+12]
	150 Multiply S0, S0, S3
	151 Multiply S1, S1, S3
	152 Multiply S2, S2, S3
	153 Add S0, S9, S0
	154 Add S1, S10, S1
	155 Add S2, S4, S2
	156 Move X20, [X31+96]
	157 Move X19, [X31+104]
	158 Move X30, [X31+80]
	159 Move X21, [X31+88]
	160 Move D9, [X31+64]
	161 Move D8, [X31+72]
	162 Move D11, [X31+48]
	163 Move D10, [X31+56]
	164 Move D13, [X31+32]
	165 Move D12, [X31+40]
	166 Move D15, [X31+16]
	167 Move D14, [X31+24]
	168 Add X31, X31, 112
	169 Return X0
	170 Call 0x1C17F20

Method: UnityEngine.Vector3 PositionWithOffset(UnityEngine.Transform transformToModify, UnityEngine.Vector3 offsetVector)

Disassembly:
	0x01E1B85C ADRP X8, 0x22D8000
	0x01E1B860 LDR X8, [X8 + 0x5F8]
	0x01E1B864 MOV W21, W0
	0x01E1B868 LDR X8, [X8]
	0x01E1B86C LDR W9, [X8 + 0xE0]
	0x01E1B870 CBNZ W9, 0x1E1B87C
	0x01E1B874 MOV X0, X8
	0x01E1B878 BL 0x1C16DFC
	0x01E1B87C ADRP X8, 0xFFFFFFFFFECCF000
	0x01E1B880 LDR V0, [X8 + 0x39C]
	0x01E1B884 FMUL S1, S8, S11
	0x01E1B888 LDR V2, [X31 + 0x30]
	0x01E1B88C LDR V3, [X31 + 0x20]
	0x01E1B890 FMUL S0, S1, S0
	0x01E1B894 FADD S6, S15, S0
	0x01E1B898 LDR V0, [X31 + 0x70]
	0x01E1B89C LDR V1, [X31 + 0x50]
	0x01E1B8A0 ADD X0, X31, 0xB0
	0x01E1B8A4 MOV V4.16B, V9.16B
	0x01E1B8A8 MOV V5.16B, V10.16B
	0x01E1B8AC MOV W1, W21
	0x01E1B8B0 MOV X2, X31
	0x01E1B8B4 BL 0x3C8B18C
	0x01E1B8B8 LDR V15, [X31 + 0x40]
	0x01E1B8BC TBZ X0, 0x0, 0x1E1B8F8
	0x01E1B8C0 LDR X0, [X19 + 0x28]
	0x01E1B8C4 CBZ X0, 0x1E1C3B8
	0x01E1B8C8 LDP S8, S9, [X19 + 0x80]
	0x01E1B8CC LDR V10, [X19 + 0x88]
	0x01E1B8D0 MOV X1, X31
	0x01E1B8D4 BL 0x3C32E90
	0x01E1B8D8 CBZ X0, 0x1E1C3B8

ISIL:
	001 Move [X31-64], D13
	002 Move [X31-56], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X19
	009 Compare X1, 0
	010 JumpIfEqual {41}
	011 Move X19, X1
	012 Move X0, X1
	013 Move X1, X31
	014 Move V8, V2
	015 Move V9, V1
	016 Move V10, V0
	017 Call Transform.get_position, X0
	018 Move X0, X19
	019 Move X1, X31
	020 Move V11, V0
	021 Move V12, V1
	022 Move V13, V2
	023 Call Transform.get_rotation, X0
	024 Move V4, V10
	025 Move V5, V9
	026 Move V6, V8
	027 Move X0, X31
	028 Call Quaternion.op_Multiply, X0, X1
	029 Add S0, S11, S0
	030 Move X30, [X31+48]
	031 Move X19, [X31+56]
	032 Move D9, [X31+32]
	033 Move D8, [X31+40]
	034 Move D11, [X31+16]
	035 Move D10, [X31+24]
	036 Add S1, S12, S1
	037 Add S2, S13, S2
	038 Move D13, [X31+64]
	039 Move D12, [X31+72]
	040 Return X0
	041 Call 0x1C17F20

Method: System.Void AddExternalForceVelocity(UnityEngine.Vector3 velocity)

Disassembly:
	0x01E1BB28 ORR W8, W28, W27, 0x0
	0x01E1BB2C ORR W8, W29, W8, 0x0
	0x01E1BB30 CBNZ W8, 0x1E1BB3C
	0x01E1BB34 LDRB W8, [X19 + 0x1FC]
	0x01E1BB38 CBZ W8, 0x1E1BE1C
	0x01E1BB3C LDRB W8, [X19 + 0x112]
	0x01E1BB40 CBNZ W8, 0x1E1BE1C
	0x01E1BB44 LDRB W8, [X23 + 0x784]

ISIL:
	001 Move V3, [X0+464]
	002 Move V4, [X0+472]
	003 Move V0.S[1], V1.S[0]
	004 Add V0, V0, V3
	005 Add S1, S2, S4
	006 Move [X0+464], D0
	007 Move [X0+472], S1
	008 Return 

Method: System.Void AddItemContactPoint(UnityEngine.Vector3 position, UnityEngine.Vector3 prevPosition)

Disassembly:
	0x01E1BB48 CBNZ W8, 0x1E1BB60
	0x01E1BB4C ADRP X0, 0x22D8000
	0x01E1BB50 LDR X0, [X0 + 0x5A8]
	0x01E1BB54 BL 0x1C16CF4
	0x01E1BB58 MOVZ W8, 0x1
	0x01E1BB5C STRB W8, [X23 + 0x784]
	0x01E1BB60 LDR X0, [X24]
	0x01E1BB64 LDP S10, S9, [X19 + 0xD8]
	0x01E1BB68 LDR V8, [X19 + 0xE0]
	0x01E1BB6C LDR W8, [X0 + 0xE0]
	0x01E1BB70 CBNZ W8, 0x1E1BB78
	0x01E1BB74 BL 0x1C16DFC
	0x01E1BB78 FMUL S0, S10, S10
	0x01E1BB7C FMUL S1, S9, S9
	0x01E1BB80 LDR V2, [X19 + 0xA4]
	0x01E1BB84 FADD S0, S0, S1
	0x01E1BB88 FMUL S1, S8, S8
	0x01E1BB8C FADD S0, S0, S1
	0x01E1BB90 FSQRT S0, S0
	0x01E1BB94 FCMP S0, S2
	0x01E1BB98 B.LE 0x1E1BE1C
	0x01E1BB9C LDRB W8, [X25 + 0x783]
	0x01E1BBA0 LDR V0, [X19 + 0xA8]
	0x01E1BBA4 STR V0, [X31 + 0x7]
	0x01E1BBA8 CBNZ W8, 0x1E1BBC0
	0x01E1BBAC ADRP X0, 0x22D8000
	0x01E1BBB0 LDR X0, [X0 + 0x5A0]
	0x01E1BBB4 BL 0x1C16CF4
	0x01E1BBB8 MOVZ W8, 0x1
	0x01E1BBBC STRB W8, [X25 + 0x783]
	0x01E1BBC0 LDRB W8, [X23 + 0x784]
	0x01E1BBC4 CBNZ W8, 0x1E1BBDC
	0x01E1BBC8 ADRP X0, 0x22D8000
	0x01E1BBCC LDR X0, [X0 + 0x5A8]
	0x01E1BBD0 BL 0x1C16CF4
	0x01E1BBD4 MOVZ W8, 0x1
	0x01E1BBD8 STRB W8, [X23 + 0x784]
	0x01E1BBDC LDR X0, [X24]
	0x01E1BBE0 LDP S10, S9, [X19 + 0xD8]
	0x01E1BBE4 LDR V8, [X19 + 0xE0]
	0x01E1BBE8 LDR W8, [X0 + 0xE0]
	0x01E1BBEC CBNZ W8, 0x1E1BBF4
	0x01E1BBF0 BL 0x1C16DFC
	0x01E1BBF4 FMUL S0, S10, S10
	0x01E1BBF8 FMUL S2, S9, S9
	0x01E1BBFC LDR V1, [X19 + 0xAC]
	0x01E1BC00 FADD S0, S0, S2
	0x01E1BC04 FMUL S2, S8, S8
	0x01E1BC08 FADD S0, S0, S2
	0x01E1BC0C LDR V2, [X31 + 0x7]
	0x01E1BC10 FSQRT S0, S0
	0x01E1BC14 FMUL S0, S0, S1
	0x01E1BC18 FCMP S0, S2
	0x01E1BC1C B.LE 0x1E1BC8C
	0x01E1BC20 ADRP X21, 0x25BD000
	0x01E1BC24 LDR V8, [X19 + 0xD8]
	0x01E1BC28 LDRB W8, [X21 + 0x785]
	0x01E1BC2C LDR V9, [X19 + 0xE0]
	0x01E1BC30 CBNZ W8, 0x1E1BC48

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], D13
	003 Move [X31+40], D12
	004 Move [X31+48], D11
	005 Move [X31+56], D10
	006 Move [X31+64], D9
	007 Move [X31+72], D8
	008 Move [X31+80], X30
	009 Move [X31+96], X20
	010 Move [X31+104], X19
	011 Move X20, 0x25BE000
	012 Move W8, [X20+3614]
	013 Move V8, V5
	014 Move V9, V4
	015 Move V10, V3
	016 Move V11, V2
	017 Move V12, V1
	018 Move V13, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x22E0000
	025 Move X0, [X0+1144]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+3614], W8
	029 Move X0, [X19+480]
	030 Compare X0, 0
	031 JumpIfEqual {76}
	032 Move X9, 0x22E0000
	033 Move X9, [X9+1144]
	034 Move W10, [X0+28]
	035 Move X8, [X0+16]
	036 Move X9, [X9]
	037 Add W10, W10, 1
	038 Move [X0+28], W10
	039 Compare X8, 0
	040 JumpIfEqual {76}
	041 NotImplemented "Instruction LDRSW not yet implemented."
	042 Move W11, [X8+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move W11, 24
	045 Add W9, W10, 1
	046 NotImplemented "Instruction MADD not yet implemented."
	047 Move [X0+24], W9
	048 Move [X8+32], S13
	049 Move [X8+40], S12
	050 Move [X8+40], S11
	051 Move [X8+48], S10
	052 Move [X8+48], S9
	053 Move [X8+56], S8
	054 Move X8, [X9+32]
	055 Add X1, X31, 8
	056 Move X8, [X8+192]
	057 Move X2, [X8+112]
	058 Move [X31+8], S13
	059 Move [X31+16], S12
	060 Move [X31+16], S11
	061 Move [X31+24], S10
	062 Move [X31+24], S9
	063 Move [X31+32], S8
	064 Call List`1<ItemContactPoint>.AddWithResize, X0, X1
	065 Move X20, [X31+96]
	066 Move X19, [X31+104]
	067 Move X30, [X31+80]
	068 Move D9, [X31+64]
	069 Move D8, [X31+72]
	070 Move D11, [X31+48]
	071 Move D10, [X31+56]
	072 Move D13, [X31+32]
	073 Move D12, [X31+40]
	074 Add X31, X31, 112
	075 Return 
	076 Call 0x1C17F20

Method: System.Void SetItemWeight(System.Single weight)

Disassembly:
	0x01E1BC34 ADRP X0, 0x22D8000
	0x01E1BC38 LDR X0, [X0 + 0x5A8]

ISIL:
	001 Move [X0+488], S0
	002 Return 

Method: System.Void AddGrabPositionOffset(UnityEngine.Vector3 grabOffset)

Disassembly:
	0x01E1BC3C BL 0x1C16CF4
	0x01E1BC40 MOVZ W8, 0x1
	0x01E1BC44 STRB W8, [X21 + 0x785]
	0x01E1BC48 LDR X0, [X24]
	0x01E1BC4C LDR W8, [X0 + 0xE0]
	0x01E1BC50 CBNZ W8, 0x1E1BC58
	0x01E1BC54 BL 0x1C16DFC
	0x01E1BC58 ADRP X8, 0xFFFFFFFFFECCF000
	0x00000000 INVALID
	0x01E1BC60 LDR V2, [X8 + 0x17C]
	0x01E1BC64 FADDP S0, V0.2S
	0x01E1BC68 FMUL S1, S9, S9

ISIL:
	001 Add X8, X0, 492
	002 Move V3, [X8]
	003 Move V4, [X8+8]
	004 Move V0.S[1], V1.S[0]
	005 Add V0, V0, V3
	006 Add S1, S2, S4
	007 Move [X8], D0
	008 Move [X8+8], S1
	009 Move W8, [X0+504]
	010 Add W8, W8, 1
	011 Move [X0+504], W8
	012 Return 

Method: System.Void Update()

Disassembly:
	0x01E1BC6C FADD S0, S1, S0
	0x01E1BC70 FSQRT S1, S0
	0x01E1BC74 FCMP S1, S2
	0x01E1BC78 B.LE 0x1E1BDB8
	0x01E1BC7C UNIMPLEMENTED
	0x00000000 INVALID
	0x01E1BC84 FDIV S1, S9, S1
	0x01E1BC88 B 0x1E1BDE4
	0x01E1BC8C LDR V0, [X19 + 0xD8]
	0x01E1BC90 LDR V2, [X19 + 0xE0]
	0x00000000 INVALID
	0x01E1BC98 FMUL S2, S1, S2
	0x01E1BC9C B 0x1E1BDF0
	0x01E1BCA0 LDR V9, [X31 + 0xF0]
	0x01E1BCA4 LDR X8, [X19 + 0x1C0]
	0x01E1BCA8 LDR V10, [X31 + 0xF8]
	0x01E1BCAC CBZ X8, 0x1E1BCFC
	0x01E1BCB0 LDP V0, V1, [X21]
	0x01E1BCB4 LDUR V2, [X21 + 0x1C]
	0x01E1BCB8 LDP S3, S4, [X19 + 0x68]
	0x01E1BCBC LDR V5, [X19 + 0x70]
	0x01E1BCC0 ADD X1, X31, 0x130
	0x01E1BCC4 STUR V2, [X26 + 0x1C]
	0x01E1BCC8 STP V0, V1, [X31 + 0x100]
	0x01E1BCCC LDR V1, [X31 + 0x11]
	0x01E1BCD0 LDUR V2, [X26 + 0x1C]
	0x01E1BCD4 LDR X9, [X8 + 0x18]
	0x01E1BCD8 LDR X0, [X8 + 0x40]
	0x01E1BCDC STP V0, V1, [X31 + 0x130]
	0x01E1BCE0 STUR V2, [X26 + 0x4C]
	0x01E1BCE4 LDP V1, V0, [X31 + 0x30]
	0x01E1BCE8 LDR X2, [X8 + 0x28]
	0x01E1BCEC FSUB S2, S8, S5
	0x01E1BCF0 FSUB S0, S0, S3
	0x01E1BCF4 FSUB S1, S1, S4
	0x01E1BCF8 BLR X9
	0x01E1BCFC LDR V0, [X31 + 0x7]
	0x01E1BD00 MOV X0, X21
	0x01E1BD04 MOV X1, X31
	0x01E1BD08 FSUB S15, S10, S8
	0x01E1BD0C FSUB V14.2S, V9.2S, V0.2S
	0x01E1BD10 BL 0x3C8E678
	0x01E1BD14 MOV X0, X19
	0x01E1BD18 BL 0x1E1C6C0
	0x01E1BD1C MOVZ W28, 0x1
	0x01E1BD20 B 0x1E1B0DC
	0x01E1BD24 LDR V9, [X31 + 0xF0]
	0x01E1BD28 LDR X8, [X19 + 0x1C8]
	0x01E1BD2C LDR V10, [X31 + 0xF8]
	0x01E1BD30 LDR V6, [X31 + 0x4]
	0x01E1BD34 CBZ X8, 0x1E1BD88
	0x01E1BD38 LDP V0, V1, [X21]
	0x01E1BD3C LDUR V2, [X21 + 0x1C]
	0x01E1BD40 LDP S3, S4, [X19 + 0x74]
	0x01E1BD44 LDR V5, [X19 + 0x7C]
	0x01E1BD48 ADD X1, X31, 0x130
	0x01E1BD4C STUR V2, [X26 + 0x1C]
	0x01E1BD50 STP V0, V1, [X31 + 0x100]
	0x01E1BD54 LDR V1, [X31 + 0x11]
	0x01E1BD58 LDUR V2, [X26 + 0x1C]
	0x01E1BD5C LDR X9, [X8 + 0x18]
	0x01E1BD60 LDR X0, [X8 + 0x40]
	0x01E1BD64 STP V0, V1, [X31 + 0x130]
	0x01E1BD68 STUR V2, [X26 + 0x4C]
	0x01E1BD6C LDR V0, [X31 + 0x7]
	0x01E1BD70 LDR X2, [X8 + 0x28]
	0x01E1BD74 FSUB S1, S6, S4
	0x01E1BD78 FSUB S2, S8, S5
	0x01E1BD7C FSUB S0, S0, S3
	0x01E1BD80 BLR X9
	0x01E1BD84 LDR V6, [X31 + 0x4]
	0x01E1BD88 LDR V0, [X31 + 0x7]
	0x01E1BD8C MOV X0, X21
	0x01E1BD90 MOV X1, X31
	0x01E1BD94 FSUB S8, S10, S8
	0x01E1BD98 MOV V0.S[1], V6.S[0]
	0x01E1BD9C FSUB V10.2S, V9.2S, V0.2S
	0x01E1BDA0 BL 0x3C8E678

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, X0
	011 Move X0, X31
	012 Call Time.get_deltaTime
	013 Move X0, X19
	014 Call Player.DoUpdate, X0, V0
	015 Move X0, [X19+144]
	016 Compare X0, 0
	017 JumpIfEqual {88}
	018 Move V12, [X19+304]
	019 Move V13, [X19+308]
	020 Move X1, X31
	021 Call Rigidbody.get_velocity, X0
	022 Move X20, 0x25BE000
	023 Move W8, [X20+1924]
	024 Move V8, V0
	025 Move V9, V1
	026 Move V10, V2
	027 Compare W8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, 0x22D9000
	030 Move X0, [X0+1448]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+1924], W8
	034 Move X8, 0x22D9000
	035 Move X8, [X8+1448]
	036 Move X0, [X8]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 NotImplemented "Instruction FCMP not yet implemented."
	042 Move S11, W31
	043 Multiply S0, S8, S8
	044 Multiply S1, S9, S9
	045 Multiply S2, S10, S10
	046 Add S0, S0, S1
	047 Add S0, S2, S0
	048 NotImplemented "Instruction FSQRT not yet implemented."
	049 Subtract S0, S0, S12
	050 Subtract S1, S13, S12
	051 NotImplemented "Instruction FDIV not yet implemented."
	052 NotImplemented "Instruction FCMP not yet implemented."
	053 Move S11, 1
	054 NotImplemented "Instruction FCMP not yet implemented."
	055 Move V11, V0
	056 Move X19, [X19+296]
	057 Compare X19, 0
	058 JumpIfEqual {88}
	059 Move X0, X19
	060 Move X1, X31
	061 Call AudioSource.get_volume, X0
	062 Move X0, X31
	063 Move V8, V0
	064 Call Time.get_deltaTime
	065 Move S1, 7
	066 Move S2, 1
	067 Multiply S0, S0, S1
	068 Move S3, W31
	069 NotImplemented "Instruction FMIN not yet implemented."
	070 NotImplemented "Instruction FCMP not yet implemented."
	071 NotImplemented "Instruction FCSEL not yet implemented."
	072 Subtract S1, S11, S8
	073 Multiply S0, S1, S0
	074 Add S0, S8, S0
	075 Move X0, X19
	076 Move X20, [X31+64]
	077 Move X19, [X31+72]
	078 Move X30, [X31+48]
	079 Move D9, [X31+32]
	080 Move D8, [X31+40]
	081 Move D11, [X31+16]
	082 Move D10, [X31+24]
	083 Move X1, X31
	084 Move D13, [X31+80]
	085 Move D12, [X31+88]
	086 Call AudioSource.set_volume, X0, V0
	087 Return 
	088 Call 0x1C17F20

Method: System.Single ClampMaxSpeed(System.Single baseMaxSpeed, System.Single mass, System.Single massThreshold, System.Single massFactor)

Disassembly:
	0x01E1D430 MOV X0, X19
	0x01E1D434 MOV X1, X31
	0x01E1D438 MOV V9.16B, V0.16B
	0x01E1D43C MOV V10.16B, V1.16B
	0x01E1D440 MOV V11.16B, V2.16B
	0x01E1D444 BL 0x3C32E90
	0x01E1D448 CBZ X0, 0x1E1D590
	0x01E1D44C MOV X1, X31

ISIL:
	001 NotImplemented "Instruction FCMP not yet implemented."
	002 Subtract S1, S1, S2
	003 NotImplemented "Instruction FDIV not yet implemented."
	004 Move S2, 1
	005 Add S1, S1, S2
	006 NotImplemented "Instruction FDIV not yet implemented."
	007 Return V0

Method: System.Boolean CalculateClampedVelocity(ref UnityEngine.Vector3 velocity, System.Single mass, System.Single baseMaxSpeed, System.Single massThreshold, System.Single massFactor)

Disassembly:
	0x01E1D450 BL 0x3C3F988
	0x01E1D454 CBZ X20, 0x1E1D590
	0x01E1D458 MOV V3.16B, V0.16B
	0x01E1D45C MOV V4.16B, V1.16B
	0x01E1D460 MOV V5.16B, V2.16B
	0x01E1D464 MOV X0, X20
	0x01E1D468 MOV V0.16B, V9.16B
	0x01E1D46C MOV V1.16B, V10.16B
	0x01E1D470 MOV V2.16B, V11.16B
	0x01E1D474 MOV V6.16B, V8.16B
	0x01E1D478 MOV X1, X31
	0x01E1D47C BL 0x3C40680
	0x01E1D480 LDR X20, [X19 + 0x90]
	0x01E1D484 MOV X0, X19
	0x01E1D488 MOV X1, X31
	0x01E1D48C BL 0x3C32E90
	0x01E1D490 CBZ X0, 0x1E1D590
	0x01E1D494 MOV X1, X31
	0x01E1D498 BL 0x3C3F58C
	0x01E1D49C CBZ X20, 0x1E1D590
	0x01E1D4A0 MOV X0, X20
	0x01E1D4A4 MOV X1, X31
	0x01E1D4A8 BL 0x3C8F014
	0x01E1D4AC LDR X20, [X19 + 0x90]
	0x01E1D4B0 MOV X0, X19
	0x01E1D4B4 MOV X1, X31
	0x01E1D4B8 BL 0x3C32E90
	0x01E1D4BC CBZ X0, 0x1E1D590
	0x01E1D4C0 MOV X1, X31
	0x01E1D4C4 BL 0x3C3DEB4
	0x01E1D4C8 CBZ X20, 0x1E1D590
	0x01E1D4CC MOV X0, X20
	0x01E1D4D0 MOV X1, X31
	0x01E1D4D4 BL 0x3C8F148
	0x01E1D4D8 ADRP X8, 0xFFFFFFFFFECCD000
	0x01E1D4DC LDR V0, [X8 + 0x104]
	0x01E1D4E0 FMOV S2, W31
	0x01E1D4E4 MOV X0, X31
	0x01E1D4E8 FMUL S8, S8, S0
	0x01E1D4EC FMOV S0, W31
	0x01E1D4F0 MOV V1.16B, V8.16B
	0x01E1D4F4 BL 0x3C2A574
	0x01E1D4F8 LDP S4, S5, [X19 + 0xD8]
	0x01E1D4FC LDR V6, [X19 + 0xE0]
	0x01E1D500 MOV X0, X31
	0x01E1D504 BL 0x3C2A9FC
	0x01E1D508 LDR X20, [X19 + 0xC0]
	0x01E1D50C STP S0, S1, [X19 + 0xD8]
	0x01E1D510 STR S2, [X19 + 0xE0]
	0x01E1D514 CBZ X20, 0x1E1D590
	0x01E1D518 MOV X22, X31
	0x01E1D51C MOV X21, X31
	0x01E1D520 LDRSW X8, [X20 + 0x18]
	0x01E1D524 CMP X21, X8
	0x01E1D528 B.GE 0x1E1D594
	0x01E1D52C FMOV S0, W31
	0x01E1D530 FMOV S2, W31
	0x01E1D534 MOV V1.16B, V8.16B
	0x01E1D538 MOV X0, X31
	0x01E1D53C BL 0x3C2A574
	0x01E1D540 LDR X8, [X19 + 0xC0]
	0x01E1D544 CBZ X8, 0x1E1D590
	0x01E1D548 LDR W9, [X8 + 0x18]
	0x01E1D54C CMP X21, X9
	0x01E1D550 B.CS 0x1E1D5AC
	0x01E1D554 ADD X8, X8, X22
	0x01E1D558 LDP S4, S5, [X8 + 0x20]
	0x01E1D55C LDR V6, [X8 + 0x28]
	0x01E1D560 MOV X0, X31
	0x01E1D564 BL 0x3C2A9FC
	0x01E1D568 LDR W8, [X20 + 0x18]
	0x01E1D56C CMP X21, X8
	0x01E1D570 B.CS 0x1E1D5AC
	0x01E1D574 ADD X8, X20, X22
	0x01E1D578 STP S0, S1, [X8 + 0x20]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 Move X19, X0
	011 Subtract S0, S0, S2
	012 NotImplemented "Instruction FDIV not yet implemented."
	013 Move S2, 1
	014 Add S0, S0, S2
	015 NotImplemented "Instruction FDIV not yet implemented."
	016 Move V10, [X19]
	017 Move V11, [X19+8]
	018 Multiply S9, S1, S1
	019 NotImplemented "Instruction INVALID not yet implemented."
	020 Multiply S2, S11, S11
	021 NotImplemented "Instruction FADDP not yet implemented."
	022 Add S8, S0, S2
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 Move X20, 0x25BC000
	025 Move W8, [X20+1925]
	026 Move [X31], V1
	027 Compare W8, 0
	028 JumpIfNotEqual {35}
	029 Move X0, 0x22D7000
	030 Move X0, [X0+1448]
	031 Call 0x1C17CF4
	032 Move V1, [X31]
	033 Move W8, 1
	034 Move [X20+1925], W8
	035 Move X8, 0x22D7000
	036 Move X8, [X8+1448]
	037 Move X0, [X8]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move V1, [X31]
	043 Move X8, -20127744
	044 Move V0, [X8+380]
	045 NotImplemented "Instruction FSQRT not yet implemented."
	046 NotImplemented "Instruction FCMP not yet implemented."
	047 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	048 NotImplemented "Instruction INVALID not yet implemented."
	049 NotImplemented "Instruction FDIV not yet implemented."
	050 Move X20, 0x25BC000
	051 Move W8, [X20+1923]
	052 Compare W8, 0
	053 JumpIfNotEqual {60}
	054 Move X0, 0x22D7000
	055 Move X0, [X0+1440]
	056 Call 0x1C17CF4
	057 Move V1, [X31]
	058 Move W8, 1
	059 Move [X20+1923], W8
	060 Move X8, 0x22D7000
	061 Move X8, [X8+1440]
	062 Move X8, [X8]
	063 Move X8, [X8+184]
	064 Move V0, [X8]
	065 Move V2, [X8+8]
	066 NotImplemented "Instruction INVALID not yet implemented."
	067 Multiply S1, S1, S2
	068 Move [X19], D0
	069 Move [X19+8], S1
	070 NotImplemented "Instruction FCMP not yet implemented."
	071 Move X20, [X31+64]
	072 Move X19, [X31+72]
	073 Move X30, [X31+48]
	074 Move D9, [X31+32]
	075 Move D8, [X31+40]
	076 Move D11, [X31+16]
	077 Move D10, [X31+24]
	078 NotImplemented "Instruction CSET not yet implemented."
	079 Add X31, X31, 80
	080 Return X0

Method: System.Boolean CalculateClampedMovement(ref UnityEngine.Vector3 movement, System.Single mass, System.Single dt)

Disassembly:
	0x01E1D57C STR S2, [X8 + 0x28]
	0x01E1D580 LDR X20, [X19 + 0xC0]
	0x01E1D584 ADD X22, X22, 0xC
	0x01E1D588 ADD X21, X21, 0x1
	0x01E1D58C CBNZ X20, 0x1E1D520
	0x01E1D590 BL 0x1C16F20
	0x01E1D594 LDP X20, X19, [X31 + 0x40]
	0x01E1D598 LDP X22, X21, [X31 + 0x30]
	0x01E1D59C LDR X30, [X31 + 0x20]
	0x01E1D5A0 LDP D9, D8, [X31 + 0x10]
	0x01E1D5A4 LDP D11, D10, [X31], #0x50
	0x01E1D5A8 RET
	0x01E1D5AC BL 0x1C16F28
	0x01E1D5B0 STR D10, [X31 - 0x30]!
	0x01E1D5B4 STP D9, D8, [X31 + 0x8]
	0x01E1D5B8 STR X30, [X31 + 0x18]
	0x01E1D5BC STP X20, X19, [X31 + 0x20]
	0x01E1D5C0 ADRP X20, 0x25BB000
	0x01E1D5C4 LDRB W8, [X20 + 0xE22]
	0x01E1D5C8 MOV V8.16B, V2.16B
	0x01E1D5CC MOV V9.16B, V1.16B
	0x01E1D5D0 MOV V10.16B, V0.16B
	0x01E1D5D4 MOV X19, X0
	0x01E1D5D8 TBNZ X8, 0x0, 0x1E1D5F0
	0x01E1D5DC ADRP X0, 0x22D8000
	0x01E1D5E0 LDR X0, [X0 + 0x9B0]
	0x01E1D5E4 BL 0x1C16CF4
	0x01E1D5E8 MOVZ W8, 0x1
	0x01E1D5EC STRB W8, [X20 + 0xE22]
	0x01E1D5F0 MOV X0, X19
	0x01E1D5F4 MOV X1, X31
	0x01E1D5F8 BL 0x3C32E90
	0x01E1D5FC CBZ X0, 0x1E1D75C
	0x01E1D600 MOV V0.16B, V10.16B
	0x01E1D604 MOV V1.16B, V9.16B
	0x01E1D608 MOV V2.16B, V8.16B
	0x01E1D60C MOV X1, X31
	0x01E1D610 BL 0x3C3F62C
	0x01E1D614 LDR X0, [X19 + 0x50]
	0x01E1D618 CBZ X0, 0x1E1D75C
	0x01E1D61C MOV V0.16B, V10.16B
	0x01E1D620 MOV V1.16B, V9.16B
	0x01E1D624 MOV V2.16B, V8.16B
	0x01E1D628 MOV X1, X31
	0x01E1D62C BL 0x3C3F62C
	0x01E1D630 LDR X0, [X19 + 0x48]
	0x01E1D634 CBZ X0, 0x1E1D75C
	0x01E1D638 MOV V0.16B, V10.16B
	0x01E1D63C MOV V1.16B, V9.16B
	0x01E1D640 MOV V2.16B, V8.16B
	0x01E1D644 MOV X1, X31
	0x01E1D648 BL 0x3C3F62C
	0x01E1D64C LDR X0, [X19 + 0x38]
	0x01E1D650 CBZ X0, 0x1E1D75C
	0x01E1D654 MOV V0.16B, V10.16B
	0x01E1D658 MOV V1.16B, V9.16B
	0x01E1D65C MOV V2.16B, V8.16B
	0x01E1D660 MOV X1, X31
	0x01E1D664 BL 0x3C3F62C
	0x01E1D668 LDR X0, [X19 + 0x40]
	0x01E1D66C CBZ X0, 0x1E1D75C
	0x01E1D670 ADRP X20, 0x22D8000
	0x01E1D674 LDR X20, [X20 + 0x9B0]
	0x01E1D678 MOV V0.16B, V10.16B
	0x01E1D67C MOV V1.16B, V9.16B
	0x01E1D680 MOV V2.16B, V8.16B
	0x01E1D684 MOV X1, X31
	0x01E1D688 BL 0x3C3F62C
	0x01E1D68C STP S10, S9, [X19 + 0x68]
	0x01E1D690 STP S8, S10, [X19 + 0x70]
	0x01E1D694 STP S9, S8, [X19 + 0x78]
	0x01E1D698 STP S10, S9, [X19 + 0x80]
	0x01E1D69C STR S8, [X19 + 0x88]
	0x01E1D6A0 STP S10, S9, [X19 + 0xE8]
	0x01E1D6A4 STR S8, [X19 + 0xF0]
	0x01E1D6A8 STRH W31, [X19 + 0x110]
	0x01E1D6AC LDR W1, [X19 + 0x98]
	0x01E1D6B0 LDR X0, [X20]
	0x01E1D6B4 BL 0x1C16D6C
	0x01E1D6B8 STR X0, [X19 + 0xC0]
	0x01E1D6BC STR W31, [X19 + 0xC8]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move S2, 20
	010 Move X19, X0
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 Move S2, 8
	013 Move S2, -20
	014 Move S3, 10
	015 Add S0, S0, S2
	016 Move S4, 1
	017 NotImplemented "Instruction FDIV not yet implemented."
	018 Add S0, S0, S4
	019 Move S2, 8
	020 NotImplemented "Instruction FDIV not yet implemented."
	021 Move V10, [X19]
	022 Move V11, [X19+8]
	023 Multiply S2, S2, S1
	024 Multiply S9, S2, S2
	025 NotImplemented "Instruction INVALID not yet implemented."
	026 Multiply S1, S11, S11
	027 NotImplemented "Instruction FADDP not yet implemented."
	028 Add S8, S0, S1
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 Move X20, 0x25BC000
	031 Move W8, [X20+1925]
	032 Move [X31], V2
	033 Compare W8, 0
	034 JumpIfNotEqual {41}
	035 Move X0, 0x22D7000
	036 Move X0, [X0+1448]
	037 Call 0x1C17CF4
	038 Move V2, [X31]
	039 Move W8, 1
	040 Move [X20+1925], W8
	041 Move X8, 0x22D7000
	042 Move X8, [X8+1448]
	043 Move X0, [X8]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {49}
	047 Call 0x1C17DFC
	048 Move V2, [X31]
	049 Move X8, -20127744
	050 Move V0, [X8+380]
	051 NotImplemented "Instruction FSQRT not yet implemented."
	052 NotImplemented "Instruction FCMP not yet implemented."
	053 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	054 NotImplemented "Instruction INVALID not yet implemented."
	055 NotImplemented "Instruction FDIV not yet implemented."
	056 Move X20, 0x25BC000
	057 Move W8, [X20+1923]
	058 Compare W8, 0
	059 JumpIfNotEqual {66}
	060 Move X0, 0x22D7000
	061 Move X0, [X0+1440]
	062 Call 0x1C17CF4
	063 Move V2, [X31]
	064 Move W8, 1
	065 Move [X20+1923], W8
	066 Move X8, 0x22D7000
	067 Move X8, [X8+1440]
	068 Move X8, [X8]
	069 Move X8, [X8+184]
	070 Move V0, [X8]
	071 Move V1, [X8+8]
	072 NotImplemented "Instruction INVALID not yet implemented."
	073 Multiply S1, S2, S1
	074 Move [X19], D0
	075 Move [X19+8], S1
	076 NotImplemented "Instruction FCMP not yet implemented."
	077 Move X20, [X31+64]
	078 Move X19, [X31+72]
	079 Move X30, [X31+48]
	080 Move D9, [X31+32]
	081 Move D8, [X31+40]
	082 Move D11, [X31+16]
	083 Move D10, [X31+24]
	084 NotImplemented "Instruction CSET not yet implemented."
	085 Add X31, X31, 80
	086 Return X0

Method: System.Void ApplyFriction(UnityEngine.Vector3 normal)

Disassembly:
	0x01E1D6C0 ADRP X20, 0x25BB000
	0x01E1D6C4 LDRB W8, [X20 + 0x783]
	0x01E1D6C8 CBNZ W8, 0x1E1D6E0
	0x01E1D6CC ADRP X0, 0x22D6000
	0x01E1D6D0 LDR X0, [X0 + 0x5A0]
	0x01E1D6D4 BL 0x1C16CF4
	0x01E1D6D8 MOVZ W8, 0x1
	0x01E1D6DC STRB W8, [X20 + 0x783]
	0x01E1D6E0 ADRP X8, 0x22D6000
	0x01E1D6E4 LDR X8, [X8 + 0x5A0]
	0x01E1D6E8 LDR X0, [X19 + 0x90]
	0x01E1D6EC LDR X8, [X8]
	0x01E1D6F0 LDR X9, [X8 + 0xB8]
	0x01E1D6F4 LDR V0, [X9]
	0x01E1D6F8 LDR V1, [X9 + 0x8]
	0x01E1D6FC STUR D0, [X19 + 0xCC]
	0x01E1D700 STR S1, [X19 + 0xD4]
	0x01E1D704 LDR X9, [X8 + 0xB8]
	0x01E1D708 LDR V0, [X9]
	0x01E1D70C LDR V1, [X9 + 0x8]
	0x01E1D710 STR D0, [X19 + 0xD8]
	0x01E1D714 STR S1, [X19 + 0xE0]
	0x01E1D718 CBZ X0, 0x1E1D75C
	0x01E1D71C LDR X8, [X8 + 0xB8]
	0x01E1D720 MOV X1, X31
	0x01E1D724 LDP S1, S2, [X8 + 0x4]
	0x01E1D728 LDR V0, [X8]
	0x01E1D72C BL 0x3C8E908
	0x01E1D730 LDR X0, [X19 + 0x90]
	0x01E1D734 CBZ X0, 0x1E1D75C
	0x01E1D738 MOV V1.16B, V9.16B
	0x01E1D73C MOV V2.16B, V8.16B
	0x01E1D740 LDP X20, X19, [X31 + 0x20]
	0x01E1D744 LDR X30, [X31 + 0x18]
	0x01E1D748 LDP D9, D8, [X31 + 0x8]
	0x01E1D74C MOV V0.16B, V10.16B
	0x01E1D750 MOV X1, X31
	0x01E1D754 LDR V10, [X31], #0x30
	0x01E1D758 B 0x3C8F014
	0x01E1D75C BL 0x1C16F20
	0x01E1D760 SUB X31, X31, 0x80
	0x01E1D764 STR D14, [X31 + 0x10]
	0x01E1D768 STP D13, D12, [X31 + 0x20]
	0x01E1D76C STP D11, D10, [X31 + 0x30]
	0x01E1D770 STP D9, D8, [X31 + 0x40]
	0x01E1D774 STP X30, X23, [X31 + 0x50]
	0x01E1D778 STP X22, X21, [X31 + 0x60]
	0x01E1D77C STP X20, X19, [X31 + 0x70]
	0x01E1D780 MOV X19, X0
	0x01E1D784 LDR X0, [X0 + 0x28]
	0x01E1D788 CBZ X0, 0x1E1DA40
	0x01E1D78C MOV X1, X31
	0x01E1D790 MOV V8.16B, V2.16B
	0x01E1D794 MOV V9.16B, V1.16B
	0x01E1D798 MOV V13.16B, V0.16B
	0x01E1D79C BL 0x3C32E90
	0x01E1D7A0 CBZ X0, 0x1E1DA40
	0x01E1D7A4 MOV X1, X31
	0x01E1D7A8 BL 0x3C3FA04
	0x01E1D7AC MOV X0, X31
	0x01E1D7B0 BL 0x1DC0890
	0x01E1D7B4 ADRP X20, 0x25BB000
	0x01E1D7B8 LDRB W8, [X20 + 0x785]
	0x01E1D7BC MOV V10.16B, V0.16B
	0x01E1D7C0 MOV V11.16B, V1.16B
	0x01E1D7C4 MOV V12.16B, V2.16B
	0x01E1D7C8 CBNZ W8, 0x1E1D7E0
	0x01E1D7CC ADRP X0, 0x22D6000
	0x01E1D7D0 LDR X0, [X0 + 0x5A8]
	0x01E1D7D4 BL 0x1C16CF4
	0x01E1D7D8 MOVZ W8, 0x1
	0x01E1D7DC STRB W8, [X20 + 0x785]
	0x01E1D7E0 ADRP X23, 0x22D6000
	0x01E1D7E4 LDR X23, [X23 + 0x5A8]
	0x01E1D7E8 LDR X0, [X23]
	0x01E1D7EC LDR W8, [X0 + 0xE0]
	0x01E1D7F0 CBNZ W8, 0x1E1D7F8
	0x01E1D7F4 BL 0x1C16DFC
	0x01E1D7F8 ADRP X8, 0xFFFFFFFFFECCD000
	0x01E1D7FC FMUL S0, S10, S10
	0x01E1D800 FMUL S1, S11, S11
	0x01E1D804 LDR V14, [X8 + 0x17C]
	0x01E1D808 ADRP X21, 0x22D6000
	0x01E1D80C FMUL S2, S12, S12
	0x01E1D810 FADD S0, S0, S1
	0x01E1D814 LDR X21, [X21 + 0x5A0]
	0x01E1D818 FADD S0, S2, S0
	0x01E1D81C FSQRT S0, S0
	0x01E1D820 FCMP S0, S14
	0x01E1D824 ADRP X22, 0x25BB000
	0x01E1D828 B.LE 0x1E1D83C
	0x01E1D82C FDIV S10, S10, S0
	0x01E1D830 FDIV S11, S11, S0
	0x01E1D834 FDIV S12, S12, S0
	0x01E1D838 B 0x1E1D868
	0x01E1D83C LDRB W8, [X22 + 0x783]
	0x01E1D840 CBNZ W8, 0x1E1D858
	0x01E1D844 ADRP X0, 0x22D6000
	0x01E1D848 LDR X0, [X0 + 0x5A0]
	0x01E1D84C BL 0x1C16CF4
	0x01E1D850 MOVZ W8, 0x1
	0x01E1D854 STRB W8, [X22 + 0x783]
	0x01E1D858 LDR X8, [X21]
	0x01E1D85C LDR X8, [X8 + 0xB8]
	0x01E1D860 LDP S10, S11, [X8]
	0x01E1D864 LDR V12, [X8 + 0x8]
	0x01E1D868 MOV V0.16B, V13.16B
	0x01E1D86C MOV V1.16B, V9.16B
	0x01E1D870 MOV V2.16B, V8.16B
	0x01E1D874 MOV X0, X31
	0x01E1D878 BL 0x1DC0890
	0x01E1D87C LDRB W8, [X20 + 0x785]
	0x01E1D880 MOV V8.16B, V0.16B
	0x01E1D884 MOV V9.16B, V1.16B
	0x01E1D888 MOV V13.16B, V2.16B
	0x01E1D88C CBNZ W8, 0x1E1D8A4
	0x01E1D890 ADRP X0, 0x22D6000
	0x01E1D894 LDR X0, [X0 + 0x5A8]
	0x01E1D898 BL 0x1C16CF4
	0x01E1D89C MOVZ W8, 0x1
	0x01E1D8A0 STRB W8, [X20 + 0x785]
	0x01E1D8A4 LDR X0, [X23]
	0x01E1D8A8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X19, X0
	013 Move X0, [X0+144]
	014 Compare X0, 0
	015 JumpIfEqual {138}
	016 Move X1, X31
	017 Move V8, V2
	018 Move V9, V1
	019 Move V10, V0
	020 Call Rigidbody.get_velocity, X0
	021 Move X20, 0x25BC000
	022 Move W8, [X20+1925]
	023 Move V11, V0
	024 Move V12, V1
	025 Move V13, V2
	026 Compare W8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, 0x22D7000
	029 Move X0, [X0+1448]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+1925], W8
	033 Move X8, 0x22D7000
	034 Move X8, [X8+1448]
	035 Move X0, [X8]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X8, -20127744
	041 Multiply S0, S11, S11
	042 Multiply S1, S12, S12
	043 Move V3, [X8+380]
	044 Move X21, 0x22D7000
	045 Multiply S2, S13, S13
	046 Add S0, S0, S1
	047 Move X21, [X21+1440]
	048 Add S0, S2, S0
	049 NotImplemented "Instruction FSQRT not yet implemented."
	050 NotImplemented "Instruction FCMP not yet implemented."
	051 Move X22, 0x25BC000
	052 NotImplemented "Instruction FDIV not yet implemented."
	053 NotImplemented "Instruction FDIV not yet implemented."
	054 NotImplemented "Instruction FDIV not yet implemented."
	055 Move W8, [X22+1923]
	056 Compare W8, 0
	057 JumpIfNotEqual {63}
	058 Move X0, 0x22D7000
	059 Move X0, [X0+1440]
	060 Call 0x1C17CF4
	061 Move W8, 1
	062 Move [X22+1923], W8
	063 Move X8, [X21]
	064 Move X8, [X8+184]
	065 Move S0, [X8]
	066 Move S1, [X8+4]
	067 Move V2, [X8+8]
	068 Multiply S0, S10, S0
	069 Multiply S1, S9, S1
	070 Add S0, S0, S1
	071 Multiply S1, S8, S2
	072 Add S1, S1, S0
	073 NotImplemented "Instruction FCMP not yet implemented."
	074 Move S0, 1
	075 NotImplemented "Instruction FCMP not yet implemented."
	076 Move S2, 1
	077 NotImplemented "Instruction FCMP not yet implemented."
	078 Move V2, V1
	079 Subtract S1, S0, S2
	080 Move S2, -1
	081 Move X20, [X19+144]
	082 Add S1, S1, S1
	083 Add S1, S1, S2
	084 NotImplemented "Instruction FMIN not yet implemented."
	085 NotImplemented "Instruction FCMP not yet implemented."
	086 Move S1, W31
	087 NotImplemented "Instruction FCSEL not yet implemented."
	088 Compare X20, 0
	089 JumpIfEqual {138}
	090 Move X0, X20
	091 Move X1, X31
	092 Call Rigidbody.get_velocity, X0
	093 Move X0, [X19+144]
	094 Compare X0, 0
	095 JumpIfEqual {138}
	096 Move X1, X31
	097 Move V8, V0
	098 Move V9, V1
	099 Move V10, V2
	100 Call Rigidbody.get_velocity, X0
	101 Multiply S0, S11, S0
	102 Multiply S1, S11, S1
	103 Multiply S2, S11, S2
	104 Subtract S0, S8, S0
	105 Subtract S1, S9, S1
	106 Subtract S2, S10, S2
	107 Move W8, [X22+1923]
	108 Move X20, [X19+144]
	109 Compare W8, 0
	110 JumpIfNotEqual {116}
	111 Move X0, 0x22D7000
	112 Move X0, [X0+1440]
	113 Call 0x1C17CF4
	114 Move W8, 1
	115 Move [X22+1923], W8
	116 Compare X20, 0
	117 JumpIfEqual {138}
	118 Move X8, [X21]
	119 Move X8, [X8+184]
	120 Move S1, [X8+4]
	121 Move S2, [X8+8]
	122 Move V0, [X8]
	123 Move X0, X20
	124 Move X20, [X31+80]
	125 Move X19, [X31+88]
	126 Move X22, [X31+64]
	127 Move X21, [X31+72]
	128 Move X30, [X31+48]
	129 Move D9, [X31+32]
	130 Move D8, [X31+40]
	131 Move D11, [X31+16]
	132 Move D10, [X31+24]
	133 Move X1, X31
	134 Move D13, [X31+96]
	135 Move D12, [X31+104]
	136 Call Rigidbody.set_velocity, X0, X1
	137 Return 
	138 Call 0x1C17F20

Method: System.Void DoUpdate(System.Single dt)

Disassembly:
	0x01E1BDA4 MOV X0, X19
	0x01E1BDA8 BL 0x1E1C6C0
	0x01E1BDAC LDR V4, [X31 + 0x5]
	0x01E1BDB0 MOVZ W27, 0x1
	0x01E1BDB4 B 0x1E1B274
	0x01E1BDB8 LDRB W8, [X25 + 0x783]
	0x01E1BDBC CBNZ W8, 0x1E1BDD4
	0x01E1BDC0 ADRP X0, 0x22D8000
	0x01E1BDC4 LDR X0, [X0 + 0x5A0]
	0x01E1BDC8 BL 0x1C16CF4
	0x01E1BDCC MOVZ W8, 0x1
	0x01E1BDD0 STRB W8, [X25 + 0x783]
	0x01E1BDD4 LDR X8, [X20]
	0x01E1BDD8 LDR X8, [X8 + 0xB8]
	0x01E1BDDC LDR V0, [X8]
	0x01E1BDE0 LDR V1, [X8 + 0x8]
	0x01E1BDE4 LDR V2, [X31 + 0x7]
	0x00000000 INVALID
	0x01E1BDEC FMUL S2, S2, S1
	0x01E1BDF0 LDRB W8, [X19 + 0x114]
	0x01E1BDF4 CBZ W8, 0x1E1BE08
	0x01E1BDF8 LDR V1, [X19 + 0x118]
	0x01E1BDFC LDR V3, [X19 + 0x120]
	0x01E1BE00 FADD V0.2S, V0.2S, V1.2S
	0x01E1BE04 FADD S2, S2, S3
	0x01E1BE08 LDR X0, [X19 + 0x90]
	0x01E1BE0C CBZ X0, 0x1E1C3B8
	0x01E1BE10 MOV S1, V0.S[1]
	0x01E1BE14 MOV X1, X31
	0x01E1BE18 BL 0x3C8E908
	0x01E1BE1C LDR V8, [X19 + 0x1D0]
	0x01E1BE20 LDRB W8, [X25 + 0x783]
	0x01E1BE24 LDR V9, [X22]
	0x01E1BE28 CBNZ W8, 0x1E1BE40
	0x01E1BE2C ADRP X0, 0x22D8000
	0x01E1BE30 LDR X0, [X0 + 0x5A0]
	0x01E1BE34 BL 0x1C16CF4
	0x01E1BE38 MOVZ W8, 0x1
	0x01E1BE3C STRB W8, [X25 + 0x783]
	0x01E1BE40 LDR X8, [X20]
	0x01E1BE44 LDR X8, [X8 + 0xB8]
	0x01E1BE48 LDR V0, [X8]
	0x01E1BE4C LDUR V1, [X8 + 0x4]
	0x01E1BE50 FSUB S0, S8, S0
	0x01E1BE54 FSUB V1.2S, V9.2S, V1.2S
	0x01E1BE58 FMUL S0, S0, S0
	0x00000000 INVALID
	0x01E1BE60 FADD S0, S0, S1
	0x01E1BE64 MOV S1, V1.S[1]
	0x01E1BE68 FADD S0, S1, S0
	0x01E1BE6C FCMP S0, S15
	0x01E1BE70 B.MI 0x1E1C0F4
	0x01E1BE74 LDR X0, [X19 + 0x90]
	0x01E1BE78 CBZ X0, 0x1E1C3B8
	0x01E1BE7C LDR V2, [X19 + 0x1D8]
	0x01E1BE80 LDR V1, [X19 + 0x1D4]
	0x01E1BE84 LDR V0, [X19 + 0x1D0]
	0x01E1BE88 MOVZ W1, 0x2
	0x01E1BE8C MOV X2, X31
	0x01E1BE90 BL 0x3C8F3C4
	0x01E1BE94 LDR W8, [X19 + 0x1D8]
	0x01E1BE98 LDR X9, [X19 + 0x1D0]
	0x01E1BE9C STR W8, [X19 + 0x120]
	0x01E1BEA0 STR X9, [X19 + 0x118]
	0x01E1BEA4 LDRB W8, [X25 + 0x783]
	0x01E1BEA8 CBNZ W8, 0x1E1BEC0
	0x01E1BEAC ADRP X0, 0x22D8000
	0x01E1BEB0 LDR X0, [X0 + 0x5A0]
	0x01E1BEB4 BL 0x1C16CF4
	0x01E1BEB8 MOVZ W8, 0x1
	0x01E1BEBC STRB W8, [X25 + 0x783]
	0x01E1BEC0 LDR X8, [X20]
	0x01E1BEC4 LDR X8, [X8 + 0xB8]
	0x01E1BEC8 LDR V0, [X8]
	0x01E1BECC LDR V1, [X8 + 0x8]
	0x01E1BED0 MOVZ W8, 0x1
	0x01E1BED4 STRB W8, [X19 + 0x114]
	0x01E1BED8 STR D0, [X19 + 0x1D0]
	0x01E1BEDC STR S1, [X19 + 0x1D8]
	0x01E1BEE0 CBNZ W28, 0x1E1C10C
	0x01E1BEE4 MOV W21, W31
	0x01E1BEE8 CBZ W27, 0x1E1C314
	0x01E1BEEC MOV X0, X19
	0x01E1BEF0 BL 0x1E1A8DC
	0x01E1BEF4 LDP S11, S12, [X19 + 0x74]
	0x01E1BEF8 LDRB W8, [X23 + 0x784]
	0x01E1BEFC LDR V13, [X19 + 0x7C]
	0x01E1BF00 MOV V8.16B, V0.16B
	0x01E1BF04 MOV V9.16B, V1.16B
	0x01E1BF08 MOV V10.16B, V2.16B
	0x01E1BF0C CBNZ W8, 0x1E1BF24
	0x01E1BF10 ADRP X0, 0x22D8000
	0x01E1BF14 LDR X0, [X0 + 0x5A8]
	0x01E1BF18 BL 0x1C16CF4
	0x01E1BF1C MOVZ W8, 0x1
	0x01E1BF20 STRB W8, [X23 + 0x784]
	0x01E1BF24 LDR X0, [X24]
	0x01E1BF28 FSUB S11, S8, S11
	0x01E1BF2C FSUB S9, S9, S12
	0x01E1BF30 FSUB S8, S10, S13
	0x01E1BF34 LDR W8, [X0 + 0xE0]
	0x01E1BF38 CBNZ W8, 0x1E1BF40
	0x01E1BF3C BL 0x1C16DFC
	0x01E1BF40 FMUL S0, S11, S11
	0x01E1BF44 FMUL S1, S9, S9
	0x01E1BF48 LDR V2, [X19 + 0xA0]
	0x01E1BF4C FADD S0, S0, S1
	0x01E1BF50 FMUL S1, S8, S8
	0x01E1BF54 FADD S0, S0, S1
	0x01E1BF58 FSQRT S0, S0
	0x01E1BF5C FCMP S0, S2
	0x01E1BF60 B.LE 0x1E1C0EC
	0x01E1BF64 LDR X0, [X19 + 0x28]
	0x01E1BF68 CBZ X0, 0x1E1C3B8
	0x01E1BF6C MOV X1, X31
	0x01E1BF70 BL 0x3C32E90
	0x01E1BF74 CBZ X0, 0x1E1C3B8
	0x01E1BF78 MOV X1, X31
	0x01E1BF7C BL 0x3C3F58C
	0x01E1BF80 LDR V14, [X19 + 0xB0]
	0x01E1BF84 LDR V9, [X19 + 0xB8]
	0x01E1BF88 MOV X0, X19
	0x01E1BF8C MOV V8.16B, V0.16B
	0x01E1BF90 MOV V12.16B, V1.16B
	0x01E1BF94 MOV V13.16B, V2.16B
	0x01E1BF98 BL 0x1E1A8DC
	0x01E1BF9C LDR X0, [X19 + 0x28]
	0x01E1BFA0 CBZ X0, 0x1E1C3B8
	0x01E1BFA4 MOV X1, X31
	0x01E1BFA8 STR S2, [X31 + 0x40]
	0x01E1BFAC STR S1, [X31 + 0x50]
	0x01E1BFB0 STR S0, [X31 + 0x60]
	0x01E1BFB4 STR S9, [X31 + 0x70]
	0x01E1BFB8 BL 0x3C32E90
	0x01E1BFBC CBZ X0, 0x1E1C3B8
	0x01E1BFC0 MOV X1, X31
	0x01E1BFC4 BL 0x3C3F58C
	0x01E1BFC8 MOV X0, X19
	0x01E1BFCC STR S0, [X31 + 0x30]
	0x01E1BFD0 MOV V15.16B, V1.16B
	0x01E1BFD4 STR S2, [X31 + 0x20]
	0x01E1BFD8 BL 0x1E1A8DC
	0x01E1BFDC LDR X0, [X19 + 0x28]
	0x01E1BFE0 CBZ X0, 0x1E1C3B8
	0x01E1BFE4 MOV X1, X31
	0x01E1BFE8 MOV V9.16B, V0.16B
	0x01E1BFEC MOV V10.16B, V1.16B
	0x01E1BFF0 MOV V11.16B, V2.16B
	0x01E1BFF4 BL 0x3C32E90
	0x01E1BFF8 CBZ X0, 0x1E1C3B8
	0x01E1BFFC MOV X1, X31
	0x01E1C000 STP S14, S13, [X31 + 0x10]
	0x01E1C004 STP S12, S8, [X31 + 0x18]
	0x01E1C008 BL 0x3C3F58C
	0x01E1C00C LDRB W8, [X23 + 0x784]
	0x01E1C010 MOV V12.16B, V0.16B
	0x01E1C014 MOV V13.16B, V1.16B
	0x01E1C018 MOV V8.16B, V2.16B
	0x01E1C01C CBNZ W8, 0x1E1C034
	0x01E1C020 ADRP X0, 0x22D7000
	0x01E1C024 LDR X0, [X0 + 0x5A8]
	0x01E1C028 BL 0x1C16CF4
	0x01E1C02C MOVZ W8, 0x1
	0x01E1C030 STRB W8, [X23 + 0x784]
	0x01E1C034 LDR X0, [X24]
	0x01E1C038 FSUB S14, S9, S12
	0x01E1C03C FSUB S10, S10, S13
	0x01E1C040 FSUB S9, S11, S8
	0x01E1C044 LDR W8, [X0 + 0xE0]
	0x01E1C048 CBNZ W8, 0x1E1C050
	0x01E1C04C BL 0x1C16DFC
	0x01E1C050 LDR V0, [X31 + 0x60]
	0x01E1C054 LDR V1, [X31 + 0x30]
	0x01E1C058 FMUL S2, S9, S9
	0x01E1C05C LDR V9, [X19 + 0xB0]
	0x01E1C060 ADD X0, X19, 0x10C
	0x01E1C064 FSUB S11, S0, S1
	0x01E1C068 LDR V0, [X31 + 0x50]
	0x01E1C06C LDR V1, [X31 + 0x20]
	0x01E1C070 MOV X1, X31
	0x01E1C074 FSUB S12, S0, S15
	0x01E1C078 LDR V0, [X31 + 0x40]
	0x01E1C07C FSUB S8, S0, S1
	0x01E1C080 FMUL S0, S14, S14
	0x01E1C084 FMUL S1, S10, S10
	0x01E1C088 FADD S0, S0, S1
	0x01E1C08C FADD S0, S2, S0
	0x01E1C090 FSQRT S10, S0
	0x01E1C094 BL 0x3C35CC4
	0x01E1C098 ADRP X8, 0x22D7000
	0x01E1C09C LDR X8, [X8 + 0x5F8]
	0x01E1C0A0 MOV W20, W0
	0x01E1C0A4 LDR X8, [X8]
	0x01E1C0A8 LDR W9, [X8 + 0xE0]
	0x01E1C0AC CBNZ W9, 0x1E1C0B8
	0x01E1C0B0 MOV X0, X8
	0x01E1C0B4 BL 0x1C16DFC
	0x01E1C0B8 LDP S0, S2, [X31 + 0x10]
	0x01E1C0BC LDR V1, [X31 + 0x70]
	0x01E1C0C0 FSUB S7, S10, S9
	0x01E1C0C4 ADD X0, X31, 0xB0
	0x01E1C0C8 MOV V4.16B, V11.16B
	0x01E1C0CC FMUL S3, S0, S1
	0x01E1C0D0 LDP S1, S0, [X31 + 0x18]
	0x01E1C0D4 MOV V5.16B, V12.16B
	0x01E1C0D8 MOV V6.16B, V8.16B
	0x01E1C0DC MOV W1, W20
	0x01E1C0E0 MOV X2, X31
	0x01E1C0E4 BL 0x3C8BB8C
	0x01E1C0E8 TBZ X0, 0x0, 0x1E1C3A0
	0x01E1C0EC MOVZ W20, 0x1
	0x01E1C0F0 B 0x1E1C318
	0x01E1C0F4 STRB W31, [X19 + 0x114]
	0x01E1C0F8 LDR V0, [X8]
	0x01E1C0FC LDR V1, [X8 + 0x8]
	0x01E1C100 STR D0, [X19 + 0x118]
	0x01E1C104 STR S1, [X19 + 0x120]
	0x01E1C108 CBZ W28, 0x1E1BEE4
	0x01E1C10C MOV X0, X19
	0x01E1C110 BL 0x1E1A604
	0x01E1C114 LDP S11, S12, [X19 + 0x68]
	0x01E1C118 LDRB W8, [X23 + 0x784]
	0x01E1C11C LDR V13, [X19 + 0x70]
	0x01E1C120 MOV V8.16B, V0.16B
	0x01E1C124 MOV V9.16B, V1.16B
	0x01E1C128 MOV V10.16B, V2.16B
	0x01E1C12C CBNZ W8, 0x1E1C144
	0x01E1C130 ADRP X0, 0x22D7000
	0x01E1C134 LDR X0, [X0 + 0x5A8]
	0x01E1C138 BL 0x1C16CF4
	0x01E1C13C MOVZ W8, 0x1
	0x01E1C140 STRB W8, [X23 + 0x784]
	0x01E1C144 LDR X0, [X24]
	0x01E1C148 FSUB S11, S8, S11
	0x01E1C14C FSUB S9, S9, S12
	0x01E1C150 FSUB S8, S10, S13
	0x01E1C154 LDR W8, [X0 + 0xE0]
	0x01E1C158 CBNZ W8, 0x1E1C160
	0x01E1C15C BL 0x1C16DFC
	0x01E1C160 FMUL S0, S11, S11
	0x01E1C164 FMUL S1, S9, S9
	0x01E1C168 LDR V2, [X19 + 0xA0]
	0x01E1C16C FADD S0, S0, S1
	0x01E1C170 FMUL S1, S8, S8
	0x01E1C174 FADD S0, S0, S1
	0x01E1C178 FSQRT S0, S0
	0x01E1C17C FCMP S0, S2
	0x01E1C180 B.LE 0x1E1C30C
	0x01E1C184 LDR X0, [X19 + 0x28]
	0x01E1C188 CBZ X0, 0x1E1C3B8
	0x01E1C18C MOV X1, X31
	0x01E1C190 BL 0x3C32E90
	0x01E1C194 CBZ X0, 0x1E1C3B8
	0x01E1C198 MOV X1, X31
	0x01E1C19C BL 0x3C3F58C
	0x01E1C1A0 LDR V14, [X19 + 0xB0]
	0x01E1C1A4 LDR V9, [X19 + 0xB8]
	0x01E1C1A8 MOV X0, X19
	0x01E1C1AC MOV V8.16B, V0.16B
	0x01E1C1B0 MOV V12.16B, V1.16B
	0x01E1C1B4 MOV V13.16B, V2.16B
	0x01E1C1B8 BL 0x1E1A604
	0x01E1C1BC LDR X0, [X19 + 0x28]
	0x01E1C1C0 CBZ X0, 0x1E1C3B8
	0x01E1C1C4 MOV X1, X31
	0x01E1C1C8 STR S2, [X31 + 0x40]
	0x01E1C1CC STR S1, [X31 + 0x50]
	0x01E1C1D0 STR S0, [X31 + 0x60]
	0x01E1C1D4 STR S9, [X31 + 0x70]
	0x01E1C1D8 BL 0x3C32E90
	0x01E1C1DC CBZ X0, 0x1E1C3B8
	0x01E1C1E0 MOV X1, X31
	0x01E1C1E4 BL 0x3C3F58C
	0x01E1C1E8 MOV X0, X19
	0x01E1C1EC STR S0, [X31 + 0x30]
	0x01E1C1F0 MOV V15.16B, V1.16B
	0x01E1C1F4 STR S2, [X31 + 0x20]
	0x01E1C1F8 BL 0x1E1A604
	0x01E1C1FC LDR X0, [X19 + 0x28]
	0x01E1C200 CBZ X0, 0x1E1C3B8
	0x01E1C204 MOV X1, X31
	0x01E1C208 MOV V9.16B, V0.16B
	0x01E1C20C MOV V10.16B, V1.16B
	0x01E1C210 MOV V11.16B, V2.16B
	0x01E1C214 BL 0x3C32E90
	0x01E1C218 CBZ X0, 0x1E1C3B8
	0x01E1C21C MOV X1, X31
	0x01E1C220 STP S14, S13, [X31 + 0x10]
	0x01E1C224 STP S12, S8, [X31 + 0x18]
	0x01E1C228 BL 0x3C3F58C
	0x01E1C22C LDRB W8, [X23 + 0x784]
	0x01E1C230 MOV V12.16B, V0.16B
	0x01E1C234 MOV V13.16B, V1.16B
	0x01E1C238 MOV V8.16B, V2.16B
	0x01E1C23C CBNZ W8, 0x1E1C254
	0x01E1C240 ADRP X0, 0x22D7000
	0x01E1C244 LDR X0, [X0 + 0x5A8]
	0x01E1C248 BL 0x1C16CF4
	0x01E1C24C MOVZ W8, 0x1
	0x01E1C250 STRB W8, [X23 + 0x784]
	0x01E1C254 LDR X0, [X24]
	0x01E1C258 FSUB S14, S9, S12
	0x01E1C25C FSUB S10, S10, S13
	0x01E1C260 FSUB S9, S11, S8
	0x01E1C264 LDR W8, [X0 + 0xE0]
	0x01E1C268 CBNZ W8, 0x1E1C270
	0x01E1C26C BL 0x1C16DFC
	0x01E1C270 LDR V0, [X31 + 0x60]
	0x01E1C274 LDR V1, [X31 + 0x30]
	0x01E1C278 FMUL S2, S9, S9
	0x01E1C27C LDR V9, [X19 + 0xB0]
	0x01E1C280 ADD X0, X19, 0x10C
	0x01E1C284 FSUB S11, S0, S1
	0x01E1C288 LDR V0, [X31 + 0x50]
	0x01E1C28C LDR V1, [X31 + 0x20]
	0x01E1C290 MOV X1, X31
	0x01E1C294 FSUB S12, S0, S15
	0x01E1C298 LDR V0, [X31 + 0x40]
	0x01E1C29C FSUB S8, S0, S1
	0x01E1C2A0 FMUL S0, S14, S14
	0x01E1C2A4 FMUL S1, S10, S10
	0x01E1C2A8 FADD S0, S0, S1
	0x01E1C2AC FADD S0, S2, S0
	0x01E1C2B0 FSQRT S10, S0
	0x01E1C2B4 BL 0x3C35CC4
	0x01E1C2B8 ADRP X8, 0x22D7000
	0x01E1C2BC LDR X8, [X8 + 0x5F8]
	0x01E1C2C0 MOV W20, W0
	0x01E1C2C4 LDR X8, [X8]
	0x01E1C2C8 LDR W9, [X8 + 0xE0]
	0x01E1C2CC CBNZ W9, 0x1E1C2D8
	0x01E1C2D0 MOV X0, X8
	0x01E1C2D4 BL 0x1C16DFC
	0x01E1C2D8 LDP S0, S2, [X31 + 0x10]
	0x01E1C2DC LDR V1, [X31 + 0x70]
	0x01E1C2E0 FSUB S7, S10, S9
	0x01E1C2E4 ADD X0, X31, 0xB0
	0x01E1C2E8 MOV V4.16B, V11.16B
	0x01E1C2EC FMUL S3, S0, S1
	0x01E1C2F0 LDP S1, S0, [X31 + 0x18]
	0x01E1C2F4 MOV V5.16B, V12.16B
	0x01E1C2F8 MOV V6.16B, V8.16B
	0x01E1C2FC MOV W1, W20
	0x01E1C300 MOV X2, X31
	0x01E1C304 BL 0x3C8BB8C
	0x01E1C308 TBZ X0, 0x0, 0x1E1C384
	0x01E1C30C MOVZ W21, 0x1
	0x01E1C310 CBNZ W27, 0x1E1BEEC
	0x01E1C314 MOV W20, W31
	0x01E1C318 LDR X0, [X19 + 0x38]
	0x01E1C31C CBZ X0, 0x1E1C3B8
	0x01E1C320 LDP S1, S2, [X19 + 0x6C]
	0x01E1C324 LDR V0, [X19 + 0x68]
	0x01E1C328 MOV X1, X31
	0x01E1C32C BL 0x3C3F62C
	0x01E1C330 LDR X0, [X19 + 0x40]
	0x01E1C334 CBZ X0, 0x1E1C3B8
	0x01E1C338 LDP S1, S2, [X19 + 0x78]
	0x01E1C33C LDR V0, [X19 + 0x74]
	0x01E1C340 MOV X1, X31
	0x01E1C344 BL 0x3C3F62C
	0x01E1C348 STRB W21, [X19 + 0x110]
	0x01E1C34C STRB W20, [X19 + 0x111]
	0x01E1C350 STRB W26, [X19 + 0x1FC]
	0x01E1C354 ADD X31, X31, 0x160
	0x01E1C358 LDP X20, X19, [X31 + 0x90]
	0x01E1C35C LDP X22, X21, [X31 + 0x80]
	0x01E1C360 LDP X24, X23, [X31 + 0x70]
	0x01E1C364 LDP X26, X25, [X31 + 0x60]
	0x01E1C368 LDP X28, X27, [X31 + 0x50]
	0x01E1C36C LDP X29, X30, [X31 + 0x40]
	0x01E1C370 LDP D9, D8, [X31 + 0x30]
	0x01E1C374 LDP D11, D10, [X31 + 0x20]
	0x01E1C378 LDP D13, D12, [X31 + 0x10]
	0x01E1C37C LDP D15, D14, [X31], #0xA0
	0x01E1C380 RET
	0x01E1C384 MOV X0, X19
	0x01E1C388 BL 0x1E1A604
	0x01E1C38C MOV W21, W31
	0x01E1C390 STP S0, S1, [X19 + 0x68]
	0x01E1C394 STR S2, [X19 + 0x70]
	0x01E1C398 CBNZ W27, 0x1E1BEEC
	0x01E1C39C B 0x1E1C314
	0x01E1C3A0 MOV X0, X19
	0x01E1C3A4 BL 0x1E1A8DC
	0x01E1C3A8 MOV W20, W31
	0x01E1C3AC STP S0, S1, [X19 + 0x74]
	0x01E1C3B0 STR S2, [X19 + 0x7C]
	0x01E1C3B4 B 0x1E1C318
	0x01E1C3B8 BL 0x1C16F20
	0x01E1C3BC B 0x1E1C3CC
	0x01E1C3C0 B 0x1E1C3CC
	0x01E1C3C4 B 0x1E1C3CC
	0x01E1C3C8 B 0x1E1C3CC
	0x01E1C3CC MOV X21, X0
	0x01E1C3D0 CMP W1, 0x1
	0x01E1C3D4 B.NE 0x1E1C400
	0x01E1C3D8 MOV X0, X21
	0x01E1C3DC BL 0x3EB1AD0
	0x01E1C3E0 LDR X29, [X0]
	0x01E1C3E4 BL 0x3EB1AE0
	0x01E1C3E8 LDR X1, [X24]
	0x01E1C3EC ADD X0, X31, 0x80
	0x01E1C3F0 BL 0x2BE008C
	0x01E1C3F4 CBZ X29, 0x1E1B4B8
	0x01E1C3F8 MOV X0, X29
	0x01E1C3FC BL 0x1C16F18
	0x01E1C400 MOV X29, X31
	0x01E1C404 B 0x1E1C40C
	0x01E1C408 MOV X21, X0
	0x01E1C40C LDR X1, [X24]
	0x01E1C410 ADD X0, X31, 0x80
	0x01E1C414 BL 0x2BE008C
	0x01E1C418 CBNZ X29, 0x1E1C424
	0x01E1C41C MOV X0, X21
	0x01E1C420 BL 0x1D2C690
	0x01E1C424 MOV X0, X29
	0x01E1C428 BL 0x1C16F18
	0x01E1C42C BL 0x1990590
	0x01E1C430 FCMP S1, S2
	0x01E1C434 B.LE 0x1E1C44C
	0x01E1C438 FSUB S1, S1, S2
	0x01E1C43C FDIV S1, S1, S3
	0x01E1C440 FMOV S2, 1
	0x01E1C444 FADD S1, S1, S2
	0x01E1C448 FDIV S0, S0, S1
	0x01E1C44C RET
	0x01E1C450 SUB X31, X31, 0x50
	0x01E1C454 STP D11, D10, [X31 + 0x10]
	0x01E1C458 STP D9, D8, [X31 + 0x20]
	0x01E1C45C STR X30, [X31 + 0x30]
	0x01E1C460 STP X20, X19, [X31 + 0x40]
	0x01E1C464 FCMP S0, S2
	0x01E1C468 MOV X19, X0
	0x01E1C46C B.LE 0x1E1C484
	0x01E1C470 FSUB S0, S0, S2
	0x01E1C474 FDIV S0, S0, S3
	0x01E1C478 FMOV S2, 1
	0x01E1C47C FADD S0, S0, S2
	0x01E1C480 FDIV S1, S1, S0
	0x01E1C484 LDR V10, [X19]
	0x01E1C488 LDR V11, [X19 + 0x8]
	0x01E1C48C FMUL S9, S1, S1
	0x00000000 INVALID
	0x01E1C494 FMUL S2, S11, S11
	0x01E1C498 FADDP S0, V0.2S
	0x01E1C49C FADD S8, S0, S2
	0x01E1C4A0 FCMP S8, S9
	0x01E1C4A4 B.LE 0x1E1C55C
	0x01E1C4A8 ADRP X20, 0x25BC000
	0x01E1C4AC LDRB W8, [X20 + 0x785]
	0x01E1C4B0 STR V1, [X31]
	0x01E1C4B4 CBNZ W8, 0x1E1C4D0
	0x01E1C4B8 ADRP X0, 0x22D7000
	0x01E1C4BC LDR X0, [X0 + 0x5A8]
	0x01E1C4C0 BL 0x1C16CF4
	0x01E1C4C4 LDR V1, [X31]
	0x01E1C4C8 MOVZ W8, 0x1
	0x01E1C4CC STRB W8, [X20 + 0x785]
	0x01E1C4D0 ADRP X8, 0x22D7000
	0x01E1C4D4 LDR X8, [X8 + 0x5A8]
	0x01E1C4D8 LDR X0, [X8]
	0x01E1C4DC LDR W8, [X0 + 0xE0]
	0x01E1C4E0 CBNZ W8, 0x1E1C4EC
	0x01E1C4E4 BL 0x1C16DFC
	0x01E1C4E8 LDR V1, [X31]
	0x01E1C4EC ADRP X8, 0xFFFFFFFFFECCE000
	0x01E1C4F0 LDR V0, [X8 + 0x17C]
	0x01E1C4F4 FSQRT S2, S8
	0x01E1C4F8 FCMP S2, S0
	0x01E1C4FC B.LE 0x1E1C510
	0x01E1C500 UNIMPLEMENTED
	0x00000000 INVALID
	0x01E1C508 FDIV S2, S11, S2
	0x01E1C50C B 0x1E1C54C
	0x01E1C510 ADRP X20, 0x25BC000
	0x01E1C514 LDRB W8, [X20 + 0x783]
	0x01E1C518 CBNZ W8, 0x1E1C534
	0x01E1C51C ADRP X0, 0x22D7000
	0x01E1C520 LDR X0, [X0 + 0x5A0]
	0x01E1C524 BL 0x1C16CF4
	0x01E1C528 LDR V1, [X31]
	0x01E1C52C MOVZ W8, 0x1
	0x01E1C530 STRB W8, [X20 + 0x783]
	0x01E1C534 ADRP X8, 0x22D7000
	0x01E1C538 LDR X8, [X8 + 0x5A0]
	0x01E1C53C LDR X8, [X8]
	0x01E1C540 LDR X8, [X8 + 0xB8]
	0x01E1C544 LDR V0, [X8]
	0x01E1C548 LDR V2, [X8 + 0x8]
	0x00000000 INVALID
	0x01E1C550 FMUL S1, S1, S2
	0x01E1C554 STR D0, [X19]
	0x01E1C558 STR S1, [X19 + 0x8]
	0x01E1C55C FCMP S8, S9
	0x01E1C560 LDP X20, X19, [X31 + 0x40]
	0x01E1C564 LDR X30, [X31 + 0x30]
	0x01E1C568 LDP D9, D8, [X31 + 0x20]
	0x01E1C56C LDP D11, D10, [X31 + 0x10]
	0x01E1C570 CSET W0, GT
	0x01E1C574 ADD X31, X31, 0x50
	0x01E1C578 RET
	0x01E1C57C SUB X31, X31, 0x50
	0x01E1C580 STP D11, D10, [X31 + 0x10]
	0x01E1C584 STP D9, D8, [X31 + 0x20]
	0x01E1C588 STR X30, [X31 + 0x30]
	0x01E1C58C STP X20, X19, [X31 + 0x40]
	0x01E1C590 FMOV S2, 20
	0x01E1C594 MOV X19, X0
	0x01E1C598 FCMP S0, S2
	0x01E1C59C FMOV S2, 8
	0x01E1C5A0 B.LE 0x1E1C5C4
	0x01E1C5A4 FMOV S2, -20
	0x01E1C5A8 FMOV S3, 10
	0x01E1C5AC FADD S0, S0, S2
	0x01E1C5B0 FMOV S4, 1
	0x01E1C5B4 FDIV S0, S0, S3
	0x01E1C5B8 FADD S0, S0, S4
	0x01E1C5BC FMOV S2, 8
	0x01E1C5C0 FDIV S2, S2, S0
	0x01E1C5C4 LDR V10, [X19]
	0x01E1C5C8 LDR V11, [X19 + 0x8]
	0x01E1C5CC FMUL S2, S2, S1
	0x01E1C5D0 FMUL S9, S2, S2
	0x00000000 INVALID
	0x01E1C5D8 FMUL S1, S11, S11
	0x01E1C5DC FADDP S0, V0.2S
	0x01E1C5E0 FADD S8, S0, S1
	0x01E1C5E4 FCMP S8, S9
	0x01E1C5E8 B.LE 0x1E1C6A0
	0x01E1C5EC ADRP X20, 0x25BC000
	0x01E1C5F0 LDRB W8, [X20 + 0x785]
	0x01E1C5F4 STR V2, [X31]
	0x01E1C5F8 CBNZ W8, 0x1E1C614
	0x01E1C5FC ADRP X0, 0x22D7000
	0x01E1C600 LDR X0, [X0 + 0x5A8]
	0x01E1C604 BL 0x1C16CF4
	0x01E1C608 LDR V2, [X31]
	0x01E1C60C MOVZ W8, 0x1
	0x01E1C610 STRB W8, [X20 + 0x785]
	0x01E1C614 ADRP X8, 0x22D7000
	0x01E1C618 LDR X8, [X8 + 0x5A8]
	0x01E1C61C LDR X0, [X8]
	0x01E1C620 LDR W8, [X0 + 0xE0]
	0x01E1C624 CBNZ W8, 0x1E1C630
	0x01E1C628 BL 0x1C16DFC
	0x01E1C62C LDR V2, [X31]
	0x01E1C630 ADRP X8, 0xFFFFFFFFFECCE000
	0x01E1C634 LDR V0, [X8 + 0x17C]
	0x01E1C638 FSQRT S1, S8
	0x01E1C63C FCMP S1, S0
	0x01E1C640 B.LE 0x1E1C654
	0x01E1C644 UNIMPLEMENTED
	0x00000000 INVALID
	0x01E1C64C FDIV S1, S11, S1
	0x01E1C650 B 0x1E1C690
	0x01E1C654 ADRP X20, 0x25BC000
	0x01E1C658 LDRB W8, [X20 + 0x783]
	0x01E1C65C CBNZ W8, 0x1E1C678
	0x01E1C660 ADRP X0, 0x22D7000
	0x01E1C664 LDR X0, [X0 + 0x5A0]
	0x01E1C668 BL 0x1C16CF4
	0x01E1C66C LDR V2, [X31]
	0x01E1C670 MOVZ W8, 0x1
	0x01E1C674 STRB W8, [X20 + 0x783]
	0x01E1C678 ADRP X8, 0x22D7000
	0x01E1C67C LDR X8, [X8 + 0x5A0]
	0x01E1C680 LDR X8, [X8]
	0x01E1C684 LDR X8, [X8 + 0xB8]
	0x01E1C688 LDR V0, [X8]
	0x01E1C68C LDR V1, [X8 + 0x8]
	0x00000000 INVALID
	0x01E1C694 FMUL S1, S2, S1
	0x01E1C698 STR D0, [X19]
	0x01E1C69C STR S1, [X19 + 0x8]
	0x01E1C6A0 FCMP S8, S9
	0x01E1C6A4 LDP X20, X19, [X31 + 0x40]
	0x01E1C6A8 LDR X30, [X31 + 0x30]
	0x01E1C6AC LDP D9, D8, [X31 + 0x20]
	0x01E1C6B0 LDP D11, D10, [X31 + 0x10]
	0x01E1C6B4 CSET W0, GT
	0x01E1C6B8 ADD X31, X31, 0x50
	0x01E1C6BC RET
	0x01E1C6C0 STP D13, D12, [X31 - 0x60]!
	0x01E1C6C4 STP D11, D10, [X31 + 0x10]
	0x01E1C6C8 STP D9, D8, [X31 + 0x20]
	0x01E1C6CC STR X30, [X31 + 0x30]
	0x01E1C6D0 STP X22, X21, [X31 + 0x40]
	0x01E1C6D4 STP X20, X19, [X31 + 0x50]
	0x01E1C6D8 MOV X19, X0
	0x01E1C6DC LDR X0, [X0 + 0x90]
	0x01E1C6E0 CBZ X0, 0x1E1C8A8
	0x01E1C6E4 MOV X1, X31
	0x01E1C6E8 MOV V8.16B, V2.16B
	0x01E1C6EC MOV V9.16B, V1.16B
	0x01E1C6F0 MOV V10.16B, V0.16B
	0x01E1C6F4 BL 0x3C8E868
	0x01E1C6F8 ADRP X20, 0x25BC000
	0x01E1C6FC LDRB W8, [X20 + 0x785]
	0x01E1C700 MOV V11.16B, V0.16B
	0x01E1C704 MOV V12.16B, V1.16B
	0x01E1C708 MOV V13.16B, V2.16B
	0x01E1C70C CBNZ W8, 0x1E1C724
	0x01E1C710 ADRP X0, 0x22D7000
	0x01E1C714 LDR X0, [X0 + 0x5A8]
	0x01E1C718 BL 0x1C16CF4
	0x01E1C71C MOVZ W8, 0x1
	0x01E1C720 STRB W8, [X20 + 0x785]
	0x01E1C724 ADRP X8, 0x22D7000
	0x01E1C728 LDR X8, [X8 + 0x5A8]
	0x01E1C72C LDR X0, [X8]
	0x01E1C730 LDR W8, [X0 + 0xE0]
	0x01E1C734 CBNZ W8, 0x1E1C73C
	0x01E1C738 BL 0x1C16DFC
	0x01E1C73C ADRP X8, 0xFFFFFFFFFECCE000
	0x01E1C740 FMUL S0, S11, S11
	0x01E1C744 FMUL S1, S12, S12
	0x01E1C748 LDR V3, [X8 + 0x17C]
	0x01E1C74C ADRP X21, 0x22D7000
	0x01E1C750 FMUL S2, S13, S13
	0x01E1C754 FADD S0, S0, S1
	0x01E1C758 LDR X21, [X21 + 0x5A0]
	0x01E1C75C FADD S0, S2, S0
	0x01E1C760 FSQRT S2, S0
	0x01E1C764 FCMP S2, S3
	0x01E1C768 ADRP X22, 0x25BC000
	0x01E1C76C B.LE 0x1E1C780
	0x01E1C770 FDIV S0, S11, S2
	0x01E1C774 FDIV S1, S12, S2
	0x01E1C778 FDIV S2, S13, S2
	0x01E1C77C B 0x1E1C7AC
	0x01E1C780 LDRB W8, [X22 + 0x783]
	0x01E1C784 CBNZ W8, 0x1E1C79C
	0x01E1C788 ADRP X0, 0x22D7000
	0x01E1C78C LDR X0, [X0 + 0x5A0]
	0x01E1C790 BL 0x1C16CF4
	0x01E1C794 MOVZ W8, 0x1
	0x01E1C798 STRB W8, [X22 + 0x783]
	0x01E1C79C LDR X8, [X21]
	0x01E1C7A0 LDR X8, [X8 + 0xB8]
	0x01E1C7A4 LDP S0, S1, [X8]
	0x01E1C7A8 LDR V2, [X8 + 0x8]
	0x01E1C7AC FMUL S0, S10, S0
	0x01E1C7B0 FMUL S1, S9, S1
	0x01E1C7B4 FADD S0, S0, S1
	0x01E1C7B8 FMUL S1, S8, S2
	0x01E1C7BC FADD S1, S1, S0
	0x01E1C7C0 FCMP S1, 0x0
	0x01E1C7C4 B.MI 0x1E1C850
	0x01E1C7C8 FMOV S0, 1
	0x01E1C7CC FCMP S1, S0
	0x01E1C7D0 FMOV S2, 1
	0x01E1C7D4 B.GT 0x1E1C7E4
	0x01E1C7D8 FCMP S1, 0x0
	0x01E1C7DC MOV V2.16B, V1.16B
	0x01E1C7E0 B.LS 0x1E1C850
	0x01E1C7E4 FSUB S1, S0, S2
	0x01E1C7E8 FMOV S2, -1
	0x01E1C7EC LDR X20, [X19 + 0x90]
	0x01E1C7F0 FADD S1, S1, S1
	0x01E1C7F4 FADD S1, S1, S2
	0x01E1C7F8 FMIN S0, S1, S0
	0x01E1C7FC FCMP S1, 0x0
	0x01E1C800 FMOV S1, W31
	0x01E1C804 FCSEL S11, S0, S1, PL
	0x01E1C808 CBZ X20, 0x1E1C8A8
	0x01E1C80C MOV X0, X20
	0x01E1C810 MOV X1, X31
	0x01E1C814 BL 0x3C8E868
	0x01E1C818 LDR X0, [X19 + 0x90]
	0x01E1C81C CBZ X0, 0x1E1C8A8
	0x01E1C820 MOV X1, X31
	0x01E1C824 MOV V8.16B, V0.16B
	0x01E1C828 MOV V9.16B, V1.16B
	0x01E1C82C MOV V10.16B, V2.16B
	0x01E1C830 BL 0x3C8E868
	0x01E1C834 FMUL S0, S11, S0
	0x01E1C838 FMUL S1, S11, S1
	0x01E1C83C FMUL S2, S11, S2
	0x01E1C840 FSUB S0, S8, S0
	0x01E1C844 FSUB S1, S9, S1
	0x01E1C848 FSUB S2, S10, S2
	0x01E1C84C B 0x1E1C884
	0x01E1C850 LDRB W8, [X22 + 0x783]
	0x01E1C854 LDR X20, [X19 + 0x90]
	0x01E1C858 CBNZ W8, 0x1E1C870
	0x01E1C85C ADRP X0, 0x22D7000
	0x01E1C860 LDR X0, [X0 + 0x5A0]
	0x01E1C864 BL 0x1C16CF4
	0x01E1C868 MOVZ W8, 0x1
	0x01E1C86C STRB W8, [X22 + 0x783]
	0x01E1C870 CBZ X20, 0x1E1C8A8
	0x01E1C874 LDR X8, [X21]
	0x01E1C878 LDR X8, [X8 + 0xB8]
	0x01E1C87C LDP S1, S2, [X8 + 0x4]
	0x01E1C880 LDR V0, [X8]
	0x01E1C884 MOV X0, X20
	0x01E1C888 LDP X20, X19, [X31 + 0x50]
	0x01E1C88C LDP X22, X21, [X31 + 0x40]
	0x01E1C890 LDR X30, [X31 + 0x30]
	0x01E1C894 LDP D9, D8, [X31 + 0x20]
	0x01E1C898 LDP D11, D10, [X31 + 0x10]
	0x01E1C89C MOV X1, X31
	0x01E1C8A0 LDP D13, D12, [X31], #0x60
	0x01E1C8A4 B 0x3C8E908
	0x01E1C8A8 BL 0x1C16F20
	0x01E1C8AC SUB X31, X31, 0xA0
	0x01E1C8B0 STP D15, D14, [X31 + 0x20]
	0x01E1C8B4 STP D13, D12, [X31 + 0x30]
	0x01E1C8B8 STP D11, D10, [X31 + 0x40]
	0x01E1C8BC STP D9, D8, [X31 + 0x50]
	0x01E1C8C0 STP X30, X25, [X31 + 0x60]
	0x01E1C8C4 STP X24, X23, [X31 + 0x70]
	0x01E1C8C8 STP X22, X21, [X31 + 0x80]
	0x01E1C8CC STP X20, X19, [X31 + 0x90]
	0x01E1C8D0 ADRP X23, 0x25BC000
	0x01E1C8D4 LDRB W8, [X23 + 0xE20]
	0x01E1C8D8 MOV X20, X3
	0x01E1C8DC MOV W22, W2
	0x01E1C8E0 MOV X19, X1
	0x01E1C8E4 MOV V8.16B, V7.16B
	0x01E1C8E8 MOV V13.16B, V6.16B
	0x01E1C8EC MOV V14.16B, V5.16B
	0x01E1C8F0 MOV V15.16B, V4.16B
	0x01E1C8F4 MOV V12.16B, V3.16B
	0x01E1C8F8 MOV V9.16B, V2.16B
	0x01E1C8FC MOV V10.16B, V1.16B
	0x01E1C900 MOV V11.16B, V0.16B
	0x01E1C904 MOV X21, X0
	0x01E1C908 TBNZ X8, 0x0, 0x1E1C92C
	0x01E1C90C ADRP X0, 0x22DE000
	0x01E1C910 LDR X0, [X0 + 0x4B0]
	0x01E1C914 BL 0x1C16CF4
	0x01E1C918 ADRP X0, 0x22D7000
	0x01E1C91C LDR X0, [X0 + 0x598]
	0x01E1C920 BL 0x1C16CF4
	0x01E1C924 MOVZ W8, 0x1
	0x01E1C928 STRB W8, [X23 + 0xE20]
	0x01E1C92C STR S12, [X31 + 0x18]
	0x01E1C930 FMUL S12, S12, S8
	0x01E1C934 MOV X0, X21
	0x01E1C938 MOV V0.16B, V11.16B
	0x01E1C93C MOV V1.16B, V10.16B
	0x01E1C940 MOV V2.16B, V9.16B
	0x01E1C944 MOV V3.16B, V12.16B
	0x01E1C948 MOV V4.16B, V15.16B
	0x01E1C94C MOV V5.16B, V14.16B
	0x01E1C950 MOV V6.16B, V13.16B
	0x01E1C954 MOV V7.16B, V8.16B
	0x01E1C958 MOV X1, X19
	0x01E1C95C MOV X2, X20
	0x01E1C960 BL 0x1E1CE90
	0x01E1C964 STR S8, [X31 + 0x1C]
	0x01E1C968 TBZ X0, 0x0, 0x1E1C9A4
	0x01E1C96C LDP S12, S1, [X19]
	0x01E1C970 LDR V0, [X19 + 0x8]
	0x01E1C974 MOV X0, X20
	0x01E1C978 MOV X1, X31
	0x01E1C97C STP S0, S1, [X31 + 0x10]
	0x01E1C980 BL 0x3C8E5C0
	0x01E1C984 CBZ X0, 0x1E1CCF0
	0x01E1C988 ADRP X8, 0x22DE000
	0x01E1C98C LDR X8, [X8 + 0x4B0]
	0x01E1C990 LDR X1, [X8]
	0x01E1C994 BL 0x21A3894
	0x01E1C998 CBZ X0, 0x1E1CB14
	0x01E1C99C LDR X23, [X0 + 0x20]
	0x01E1C9A0 B 0x1E1CB18
	0x01E1C9A4 ADRP X22, 0x25BC000
	0x01E1C9A8 LDRB W8, [X22 + 0x785]
	0x01E1C9AC CBNZ W8, 0x1E1C9C4
	0x01E1C9B0 ADRP X0, 0x22D7000
	0x01E1C9B4 LDR X0, [X0 + 0x5A8]
	0x01E1C9B8 BL 0x1C16CF4
	0x01E1C9BC MOVZ W8, 0x1
	0x01E1C9C0 STRB W8, [X22 + 0x785]
	0x01E1C9C4 ADRP X24, 0x22D7000
	0x01E1C9C8 LDR X24, [X24 + 0x5A8]
	0x01E1C9CC LDR X0, [X24]
	0x01E1C9D0 LDR W8, [X0 + 0xE0]
	0x01E1C9D4 CBNZ W8, 0x1E1C9DC
	0x01E1C9D8 BL 0x1C16DFC
	0x01E1C9DC ADRP X8, 0xFFFFFFFFFECCE000
	0x01E1C9E0 FMUL S0, S15, S15
	0x01E1C9E4 FMUL S1, S14, S14
	0x01E1C9E8 LDR V3, [X8 + 0x17C]
	0x01E1C9EC ADRP X22, 0x22D7000
	0x01E1C9F0 FMUL S2, S13, S13
	0x01E1C9F4 FADD S0, S0, S1
	0x01E1C9F8 LDR X22, [X22 + 0x5A0]
	0x01E1C9FC FADD S0, S2, S0
	0x01E1CA00 FSQRT S8, S0
	0x01E1CA04 FCMP S8, S3
	0x01E1CA08 ADRP X23, 0x25BC000
	0x01E1CA0C B.LE 0x1E1CA20
	0x01E1CA10 FDIV S15, S15, S8
	0x01E1CA14 FDIV S14, S14, S8
	0x01E1CA18 FDIV S13, S13, S8
	0x01E1CA1C B 0x1E1CA4C
	0x01E1CA20 LDRB W8, [X23 + 0x783]
	0x01E1CA24 CBNZ W8, 0x1E1CA3C
	0x01E1CA28 ADRP X0, 0x22D7000
	0x01E1CA2C LDR X0, [X0 + 0x5A0]
	0x01E1CA30 BL 0x1C16CF4
	0x01E1CA34 MOVZ W8, 0x1
	0x01E1CA38 STRB W8, [X23 + 0x783]
	0x01E1CA3C LDR X8, [X22]
	0x01E1CA40 LDR X8, [X8 + 0xB8]
	0x01E1CA44 LDP S15, S14, [X8]
	0x01E1CA48 LDR V13, [X8 + 0x8]
	0x01E1CA4C ADRP X25, 0x25BC000
	0x01E1CA50 LDRB W8, [X25 + 0x784]
	0x01E1CA54 CBNZ W8, 0x1E1CA6C
	0x01E1CA58 ADRP X0, 0x22D7000
	0x01E1CA5C LDR X0, [X0 + 0x5A8]
	0x01E1CA60 BL 0x1C16CF4
	0x01E1CA64 MOVZ W8, 0x1
	0x01E1CA68 STRB W8, [X25 + 0x784]
	0x01E1CA6C LDR X0, [X24]
	0x01E1CA70 LDR W8, [X0 + 0xE0]
	0x01E1CA74 CBNZ W8, 0x1E1CA7C
	0x01E1CA78 BL 0x1C16DFC
	0x01E1CA7C ADRP X8, 0xFFFFFFFFFECCD000
	0x01E1CA80 LDR V0, [X8 + 0xF58]
	0x01E1CA84 ADRP X9, 0xFFFFFFFFFECCE000
	0x01E1CA88 LDR V1, [X9 + 0x33C]
	0x01E1CA8C MOV X0, X21
	0x01E1CA90 FMUL S0, S12, S0
	0x01E1CA94 FADD S0, S0, S8
	0x01E1CA98 FMUL S4, S0, S15
	0x01E1CA9C FMUL S5, S0, S14
	0x01E1CAA0 FMUL S6, S0, S13
	0x01E1CAA4 LDR V0, [X31 + 0x1C]
	0x01E1CAA8 FMUL S3, S12, S1
	0x01E1CAAC MOV V2.16B, V9.16B
	0x01E1CAB0 MOV X1, X19
	0x01E1CAB4 FMUL S7, S0, S1
	0x01E1CAB8 MOV V0.16B, V11.16B
	0x01E1CABC MOV V1.16B, V10.16B
	0x01E1CAC0 MOV X2, X20
	0x01E1CAC4 BL 0x1E1CE90
	0x01E1CAC8 TBZ X0, 0x0, 0x1E1CAD8
	0x01E1CACC STP S11, S10, [X19]
	0x01E1CAD0 STR S9, [X19 + 0x8]
	0x01E1CAD4 B 0x1E1CCC4
	0x01E1CAD8 LDRB W8, [X23 + 0x783]
	0x01E1CADC CBNZ W8, 0x1E1CAF4
	0x01E1CAE0 ADRP X0, 0x22D7000
	0x01E1CAE4 LDR X0, [X0 + 0x5A0]
	0x01E1CAE8 BL 0x1C16CF4
	0x01E1CAEC MOVZ W8, 0x1
	0x01E1CAF0 STRB W8, [X23 + 0x783]
	0x01E1CAF4 LDR X8, [X22]
	0x01E1CAF8 MOV W0, W31
	0x01E1CAFC LDR X8, [X8 + 0xB8]
	0x01E1CB00 LDR V0, [X8]
	0x01E1CB04 LDR V1, [X8 + 0x8]
	0x01E1CB08 STR D0, [X19]
	0x01E1CB0C STR S1, [X19 + 0x8]
	0x01E1CB10 B 0x1E1CCC8
	0x01E1CB14 MOV X23, X31
	0x01E1CB18 ADRP X8, 0x22D7000
	0x01E1CB1C LDR X8, [X8 + 0x598]
	0x01E1CB20 LDR X0, [X8]
	0x01E1CB24 LDR W8, [X0 + 0xE0]
	0x01E1CB28 CBNZ W8, 0x1E1CB30
	0x01E1CB2C BL 0x1C16DFC
	0x01E1CB30 MOV X0, X23
	0x01E1CB34 MOV X1, X31
	0x01E1CB38 MOV X2, X31
	0x01E1CB3C BL 0x3C354F8
	0x01E1CB40 TBZ X0, 0x0, 0x1E1CB58
	0x01E1CB44 CBZ X23, 0x1E1CCF0
	0x01E1CB48 LDR V0, [X23 + 0x18]
	0x01E1CB4C FMOV S1, 1
	0x01E1CB50 FSUB S8, S1, S0
	0x01E1CB54 B 0x1E1CB6C
	0x01E1CB58 TBZ X22, 0x0, 0x1E1CB68
	0x01E1CB5C ADRP X8, 0xFFFFFFFFFECCE000
	0x01E1CB60 LDR V8, [X8 + 0x410]
	0x01E1CB64 B 0x1E1CB6C
	0x01E1CB68 LDR V8, [X21 + 0xB4]
	0x01E1CB6C MOV X0, X20
	0x01E1CB70 MOV X1, X31
	0x01E1CB74 FADD S15, S11, S15
	0x01E1CB78 FADD S14, S10, S14
	0x01E1CB7C FADD S13, S9, S13
	0x01E1CB80 BL 0x3C8E678
	0x01E1CB84 ADRP X22, 0x25BC000
	0x01E1CB88 LDRB W8, [X22 + 0xE39]
	0x01E1CB8C MOV V11.16B, V0.16B
	0x01E1CB90 MOV V9.16B, V1.16B
	0x01E1CB94 MOV V10.16B, V2.16B
	0x01E1CB98 CBNZ W8, 0x1E1CBB0
	0x01E1CB9C ADRP X0, 0x22DE000
	0x01E1CBA0 LDR X0, [X0 + 0x4B8]
	0x01E1CBA4 BL 0x1C16CF4
	0x01E1CBA8 MOVZ W8, 0x1
	0x01E1CBAC STRB W8, [X22 + 0xE39]
	0x01E1CBB0 ADRP X8, 0x22DE000
	0x01E1CBB4 LDR X8, [X8 + 0x4B8]
	0x01E1CBB8 LDR V1, [X31 + 0x14]
	0x01E1CBBC FMUL S2, S9, S9
	0x01E1CBC0 FSUB S0, S15, S12
	0x01E1CBC4 LDR X8, [X8]
	0x01E1CBC8 FSUB S3, S14, S1
	0x01E1CBCC FMUL S1, S11, S11
	0x01E1CBD0 FADD S1, S1, S2
	0x01E1CBD4 LDR X8, [X8 + 0xB8]
	0x01E1CBD8 FMUL S2, S10, S10
	0x01E1CBDC FADD S1, S2, S1
	0x01E1CBE0 LDR V2, [X31 + 0x10]
	0x01E1CBE4 LDR V4, [X8]
	0x01E1CBE8 STP S13, S12, [X31 + 0x8]
	0x01E1CBEC FCMP S1, S4
	0x01E1CBF0 FSUB S4, S13, S2
	0x01E1CBF4 B.MI 0x1E1CC30
	0x01E1CBF8 FMUL S2, S0, S11
	0x01E1CBFC FMUL S5, S3, S9
	0x01E1CC00 FMUL S6, S4, S10
	0x01E1CC04 FADD S2, S2, S5
	0x01E1CC08 FADD S2, S6, S2
	0x01E1CC0C FMUL S5, S11, S2
	0x01E1CC10 FMUL S6, S9, S2
	0x01E1CC14 FMUL S2, S10, S2
	0x01E1CC18 FDIV S5, S5, S1
	0x01E1CC1C FDIV S6, S6, S1
	0x01E1CC20 FDIV S1, S2, S1
	0x01E1CC24 FSUB S0, S0, S5
	0x01E1CC28 FSUB S3, S3, S6
	0x01E1CC2C FSUB S4, S4, S1
	0x01E1CC30 FMUL S9, S8, S0
	0x01E1CC34 FMUL S12, S8, S3
	0x01E1CC38 FMUL S11, S8, S4
	0x01E1CC3C LDP S13, S8, [X31 + 0x18]
	0x01E1CC40 LDP S0, S1, [X19]
	0x01E1CC44 LDR V2, [X19 + 0x8]
	0x01E1CC48 MOV X0, X21
	0x01E1CC4C FMUL S10, S8, S8
	0x01E1CC50 MOV V3.16B, V13.16B
	0x01E1CC54 MOV V4.16B, V9.16B
	0x01E1CC58 MOV V5.16B, V12.16B
	0x01E1CC5C MOV V6.16B, V11.16B
	0x01E1CC60 MOV V7.16B, V10.16B
	0x01E1CC64 MOV X1, X19
	0x01E1CC68 MOV X2, X20
	0x01E1CC6C BL 0x1E1CE90
	0x01E1CC70 TBNZ X0, 0x0, 0x1E1CCC4
	0x01E1CC74 MOV V5.16B, V14.16B
	0x01E1CC78 LDP S14, S3, [X31 + 0xC]
	0x01E1CC7C FMUL S7, S10, S8
	0x01E1CC80 MOV X0, X21
	0x01E1CC84 MOV X1, X19
	0x01E1CC88 FADD S0, S14, S9
	0x01E1CC8C LDR V9, [X31 + 0x14]
	0x01E1CC90 FADD S2, S3, S11
	0x01E1CC94 MOV V11.16B, V3.16B
	0x01E1CC98 LDR V3, [X31 + 0x8]
	0x01E1CC9C FADD S1, S9, S12
	0x01E1CCA0 FSUB S4, S15, S0
	0x01E1CCA4 FSUB S5, S5, S1
	0x01E1CCA8 FSUB S6, S3, S2
	0x01E1CCAC MOV V3.16B, V13.16B
	0x01E1CCB0 MOV X2, X20
	0x01E1CCB4 BL 0x1E1CE90
	0x01E1CCB8 TBNZ X0, 0x0, 0x1E1CCC4
	0x01E1CCBC STP S14, S9, [X19]
	0x01E1CCC0 STR S11, [X19 + 0x8]
	0x01E1CCC4 MOVZ W0, 0x1
	0x01E1CCC8 LDP X20, X19, [X31 + 0x90]
	0x01E1CCCC LDP X22, X21, [X31 + 0x80]
	0x01E1CCD0 LDP X24, X23, [X31 + 0x70]
	0x01E1CCD4 LDP X30, X25, [X31 + 0x60]
	0x01E1CCD8 LDP D9, D8, [X31 + 0x50]
	0x01E1CCDC LDP D11, D10, [X31 + 0x40]
	0x01E1CCE0 LDP D13, D12, [X31 + 0x30]
	0x01E1CCE4 LDP D15, D14, [X31 + 0x20]
	0x01E1CCE8 ADD X31, X31, 0xA0
	0x01E1CCEC RET
	0x01E1CCF0 BL 0x1C16F20
	0x01E1CCF4 SUB X31, X31, 0x30
	0x01E1CCF8 STP D9, D8, [X31 + 0x10]
	0x01E1CCFC STP X30, X19, [X31 + 0x20]
	0x01E1CD00 LDR W9, [X0 + 0xC8]
	0x01E1CD04 LDR W10, [X0 + 0x98]
	0x01E1CD08 LDR X8, [X0 + 0xC0]
	0x01E1CD0C ADD W9, W9, 0x1
	0x01E1CD10 SDIV W11, W9, W10
	0x01E1CD14 MSUB W9, W11, W10, W9
	0x01E1CD18 STR W9, [X0 + 0xC8]
	0x01E1CD1C CBZ X8, 0x1E1CE18
	0x01E1CD20 LDR W10, [X8 + 0x18]
	0x01E1CD24 STR V0, [X31]
	0x01E1CD28 CMP W9, W10
	0x01E1CD2C B.CS 0x1E1CE1C
	0x01E1CD30 SXTW X9, W9
	0x01E1CD34 MOVZ W10, 0xC
	0x01E1CD38 MADD X8, X9, X10, X8
	0x01E1CD3C LDR V8, [X8 + 0x20]
	0x01E1CD40 LDR V9, [X8 + 0x28]
	0x01E1CD44 MOV X1, X31
	0x01E1CD48 MOV X19, X0
	0x01E1CD4C BL 0x3C32E90
	0x01E1CD50 CBZ X0, 0x1E1CE18
	0x01E1CD54 MOV X1, X31
	0x01E1CD58 BL 0x3C3F58C
	0x01E1CD5C LDR V4, [X19 + 0xF0]
	0x01E1CD60 LDR V3, [X19 + 0xE8]
	0x01E1CD64 LDR V6, [X31]
	0x01E1CD68 LDR V5, [X19 + 0xE0]
	0x01E1CD6C FSUB S2, S2, S4
	0x01E1CD70 LDR V4, [X19 + 0x98]
	0x01E1CD74 MOV V0.S[1], V1.S[0]
	0x01E1CD78 UNIMPLEMENTED
	0x01E1CD7C FSUB V0.2S, V0.2S, V3.2S
	0x01E1CD80 LDR V3, [X19 + 0xD8]
	0x00000000 INVALID
	0x01E1CD88 LDR X8, [X19 + 0xC0]
	0x01E1CD8C SCVTF S4, S4
	0x01E1CD90 FDIV S1, S2, S6
	0x01E1CD94 UNIMPLEMENTED
	0x01E1CD98 FSUB V6.2S, V0.2S, V8.2S
	0x01E1CD9C FSUB S7, S1, S9
	0x00000000 INVALID
	0x01E1CDA4 FDIV S4, S7, S4
	0x01E1CDA8 FADD V2.2S, V3.2S, V2.2S
	0x01E1CDAC FADD S3, S5, S4
	0x01E1CDB0 STUR D0, [X19 + 0xCC]
	0x01E1CDB4 STR S1, [X19 + 0xD4]
	0x01E1CDB8 STR D2, [X19 + 0xD8]
	0x01E1CDBC STR S3, [X19 + 0xE0]
	0x01E1CDC0 CBZ X8, 0x1E1CE18
	0x01E1CDC4 LDRSW X9, [X19 + 0xC8]
	0x01E1CDC8 LDR W10, [X8 + 0x18]
	0x01E1CDCC CMP W9, W10
	0x01E1CDD0 B.CS 0x1E1CE1C
	0x01E1CDD4 MOVZ W10, 0xC
	0x01E1CDD8 MOV S2, V0.S[1]
	0x01E1CDDC MADD X8, X9, X10, X8
	0x01E1CDE0 MOV X0, X19
	0x01E1CDE4 MOV X1, X31
	0x01E1CDE8 STP S0, S2, [X8 + 0x20]
	0x01E1CDEC STR S1, [X8 + 0x28]
	0x01E1CDF0 BL 0x3C32E90
	0x01E1CDF4 CBZ X0, 0x1E1CE18
	0x01E1CDF8 MOV X1, X31
	0x01E1CDFC BL 0x3C3F58C
	0x01E1CE00 STP S0, S1, [X19 + 0xE8]
	0x01E1CE04 STR S2, [X19 + 0xF0]
	0x01E1CE08 LDP X30, X19, [X31 + 0x20]
	0x01E1CE0C LDP D9, D8, [X31 + 0x10]
	0x01E1CE10 ADD X31, X31, 0x30
	0x01E1CE14 RET
	0x01E1CE18 BL 0x1C16F20
	0x01E1CE1C BL 0x1C16F28
	0x01E1CE20 STP X30, X19, [X31 - 0x10]!
	0x01E1CE24 ORN W8, W31, W1, 0x0
	0x01E1CE28 AND W8, W8, 0x1
	0x01E1CE2C MOV X19, X0
	0x01E1CE30 STRB W8, [X0 + 0x113]
	0x01E1CE34 BL 0x1E1A604
	0x01E1CE38 MOV X0, X19
	0x01E1CE3C STP S0, S1, [X19 + 0x68]
	0x01E1CE40 STR S2, [X19 + 0x70]
	0x01E1CE44 BL 0x1E1A8DC
	0x01E1CE48 LDR X0, [X19 + 0x38]
	0x01E1CE4C STP S0, S1, [X19 + 0x74]
	0x01E1CE50 STR S2, [X19 + 0x7C]
	0x01E1CE54 CBZ X0, 0x1E1CE8C
	0x01E1CE58 LDP S1, S2, [X19 + 0x6C]
	0x01E1CE5C LDR V0, [X19 + 0x68]
	0x01E1CE60 MOV X1, X31
	0x01E1CE64 BL 0x3C3F62C
	0x01E1CE68 LDR X0, [X19 + 0x40]
	0x01E1CE6C CBZ X0, 0x1E1CE8C
	0x01E1CE70 LDP S1, S2, [X19 + 0x78]
	0x01E1CE74 LDR V0, [X19 + 0x74]
	0x01E1CE78 MOV X1, X31
	0x01E1CE7C BL 0x3C3F62C
	0x01E1CE80 STRH W31, [X19 + 0x110]
	0x01E1CE84 LDP X30, X19, [X31], #0x10
	0x01E1CE88 RET
	0x01E1CE8C BL 0x1C16F20
	0x01E1CE90 SUB X31, X31, 0xF0
	0x01E1CE94 STP D15, D14, [X31 + 0x70]
	0x01E1CE98 STP D13, D12, [X31 + 0x80]
	0x01E1CE9C STP D11, D10, [X31 + 0x90]
	0x01E1CEA0 STP D9, D8, [X31 + 0xA0]
	0x01E1CEA4 STP X30, X25, [X31 + 0xB0]
	0x01E1CEA8 STP X24, X23, [X31 + 0xC0]
	0x01E1CEAC STP X22, X21, [X31 + 0xD0]
	0x01E1CEB0 STP X20, X19, [X31 + 0xE0]
	0x01E1CEB4 ADRP X22, 0x25BC000
	0x01E1CEB8 LDRB W8, [X22 + 0xE21]
	0x01E1CEBC MOV X20, X2
	0x01E1CEC0 MOV X19, X1
	0x01E1CEC4 MOV V9.16B, V7.16B
	0x01E1CEC8 MOV V11.16B, V6.16B
	0x01E1CECC MOV V12.16B, V5.16B
	0x01E1CED0 MOV V13.16B, V4.16B
	0x01E1CED4 MOV V10.16B, V3.16B
	0x01E1CED8 MOV V8.16B, V2.16B
	0x01E1CEDC MOV X21, X0
	0x01E1CEE0 STR D1, [X31 + 0x30]
	0x01E1CEE4 STR D0, [X31 + 0x20]
	0x01E1CEE8 TBNZ X8, 0x0, 0x1E1CF00
	0x01E1CEEC ADRP X0, 0x22D7000
	0x01E1CEF0 LDR X0, [X0 + 0x5F8]
	0x01E1CEF4 BL 0x1C16CF4
	0x01E1CEF8 MOVZ W8, 0x1
	0x01E1CEFC STRB W8, [X22 + 0xE21]
	0x01E1CF00 ADRP X25, 0x25BC000
	0x01E1CF04 LDRB W8, [X25 + 0x784]
	0x01E1CF08 MOVI V0.2D, 0x0
	0x01E1CF0C STUR V0, [X31 + 0x5C]
	0x01E1CF10 STP V0, V0, [X31 + 0x40]
	0x01E1CF14 CBNZ W8, 0x1E1CF2C
	0x01E1CF18 ADRP X0, 0x22D7000
	0x01E1CF1C LDR X0, [X0 + 0x5A8]
	0x01E1CF20 BL 0x1C16CF4
	0x01E1CF24 MOVZ W8, 0x1
	0x01E1CF28 STRB W8, [X25 + 0x784]
	0x01E1CF2C ADRP X24, 0x22D7000
	0x01E1CF30 LDR X24, [X24 + 0x5A8]
	0x01E1CF34 ADRP X23, 0x22D7000
	0x01E1CF38 LDR X0, [X24]
	0x01E1CF3C LDR W8, [X0 + 0xE0]
	0x01E1CF40 LDR X23, [X23 + 0x5F8]
	0x01E1CF44 CBNZ W8, 0x1E1CF4C
	0x01E1CF48 BL 0x1C16DFC
	0x01E1CF4C FMUL S0, S13, S13
	0x01E1CF50 FMUL S1, S12, S12
	0x01E1CF54 FMUL S2, S11, S11
	0x01E1CF58 FADD S0, S0, S1
	0x01E1CF5C ADD X21, X21, 0x10C
	0x01E1CF60 FADD S0, S2, S0
	0x01E1CF64 MOV X0, X21
	0x01E1CF68 MOV X1, X31
	0x01E1CF6C FSQRT S15, S0
	0x01E1CF70 BL 0x3C35CC4
	0x01E1CF74 LDR X8, [X23]
	0x01E1CF78 MOV W22, W0
	0x01E1CF7C LDR W9, [X8 + 0xE0]
	0x01E1CF80 CBNZ W9, 0x1E1CF8C
	0x01E1CF84 MOV X0, X8
	0x01E1CF88 BL 0x1C16DFC
	0x01E1CF8C FMOV S0, 1
	0x01E1CF90 FSUB S0, S0, S9
	0x01E1CF94 FMUL S14, S10, S9
	0x01E1CF98 FMUL S0, S0, S10
	0x01E1CF9C FADD S7, S0, S15
	0x01E1CFA0 LDP V0, V1, [X31 + 0x20]
	0x01E1CFA4 MOV V2.16B, V8.16B
	0x01E1CFA8 MOV V3.16B, V14.16B
	0x01E1CFAC MOV V4.16B, V13.16B
	0x01E1CFB0 MOV V5.16B, V12.16B
	0x01E1CFB4 MOV V6.16B, V11.16B
	0x01E1CFB8 MOV X0, X20
	0x01E1CFBC MOV W1, W22
	0x01E1CFC0 MOV X2, X31
	0x01E1CFC4 BL 0x3C8BB8C
	0x01E1CFC8 TBZ X0, 0x0, 0x1E1D16C
	0x01E1CFCC MOV X0, X20
	0x01E1CFD0 MOV X1, X31
	0x01E1CFD4 STR S8, [X31 + 0x1C]
	0x01E1CFD8 BL 0x3C8E66C
	0x01E1CFDC MOV X0, X20
	0x01E1CFE0 MOV X1, X31
	0x01E1CFE4 MOV V11.16B, V0.16B
	0x01E1CFE8 MOV V12.16B, V1.16B
	0x01E1CFEC MOV V13.16B, V2.16B
	0x01E1CFF0 BL 0x3C8E678
	0x01E1CFF4 FMUL S0, S0, S10
	0x01E1CFF8 FMUL S1, S1, S10
	0x01E1CFFC FMUL S2, S2, S10
	0x01E1D000 FADD S8, S11, S0
	0x01E1D004 FADD S11, S12, S1
	0x01E1D008 FADD S15, S13, S2
	0x01E1D00C STP S8, S11, [X19]
	0x01E1D010 STR S15, [X19 + 0x8]
	0x01E1D014 LDRB W8, [X25 + 0x784]
	0x01E1D018 CBNZ W8, 0x1E1D030
	0x01E1D01C ADRP X0, 0x22D6000
	0x01E1D020 LDR X0, [X0 + 0x5A8]
	0x01E1D024 BL 0x1C16CF4
	0x01E1D028 MOVZ W8, 0x1
	0x01E1D02C STRB W8, [X25 + 0x784]
	0x01E1D030 LDR V0, [X31 + 0x2]
	0x01E1D034 LDR X0, [X24]
	0x01E1D038 FSUB S12, S8, S0
	0x01E1D03C LDR V0, [X31 + 0x3]
	0x01E1D040 LDR W8, [X0 + 0xE0]
	0x01E1D044 FSUB S13, S11, S0
	0x01E1D048 LDR V0, [X31 + 0x1C]
	0x01E1D04C FSUB S15, S15, S0
	0x01E1D050 CBNZ W8, 0x1E1D058
	0x01E1D054 BL 0x1C16DFC
	0x01E1D058 FMUL S0, S12, S12
	0x01E1D05C FMUL S1, S13, S13
	0x01E1D060 FADD S0, S0, S1
	0x01E1D064 FMUL S1, S15, S15
	0x01E1D068 FADD S0, S1, S0
	0x01E1D06C MOV X0, X21
	0x01E1D070 MOV X1, X31
	0x01E1D074 FSQRT S8, S0
	0x01E1D078 BL 0x3C35CC4
	0x01E1D07C LDR X8, [X23]
	0x01E1D080 MOV W22, W0
	0x01E1D084 LDR W9, [X8 + 0xE0]
	0x01E1D088 CBNZ W9, 0x1E1D094
	0x01E1D08C MOV X0, X8
	0x01E1D090 BL 0x1C16DFC
	0x01E1D094 FMUL S0, S9, S9
	0x01E1D098 FMOV S1, 1
	0x01E1D09C FSUB S0, S1, S0
	0x01E1D0A0 FMUL S10, S0, S10
	0x01E1D0A4 FADD S7, S10, S8
	0x01E1D0A8 LDR V8, [X31 + 0x1C]
	0x01E1D0AC FMUL S11, S14, S9
	0x01E1D0B0 ADD X0, X31, 0x40
	0x01E1D0B4 LDP V0, V1, [X31 + 0x20]
	0x01E1D0B8 MOV V2.16B, V8.16B
	0x01E1D0BC MOV V3.16B, V11.16B
	0x01E1D0C0 MOV V4.16B, V12.16B
	0x01E1D0C4 MOV V5.16B, V13.16B
	0x01E1D0C8 MOV V6.16B, V15.16B
	0x01E1D0CC MOV W1, W22
	0x01E1D0D0 MOV X2, X31
	0x01E1D0D4 BL 0x3C8BB8C
	0x01E1D0D8 LDP V4, V2, [X31 + 0x20]
	0x01E1D0DC LDR V0, [X19]
	0x01E1D0E0 LDR V1, [X19 + 0x8]
	0x01E1D0E4 MOV V4.S[1], V2.S[0]
	0x01E1D0E8 FSUB V3.2S, V0.2S, V4.2S
	0x01E1D0EC FSUB S9, S1, S8
	0x01E1D0F0 TBZ X0, 0x0, 0x1E1D208
	0x01E1D0F4 ADRP X21, 0x25BB000
	0x01E1D0F8 LDRB W8, [X21 + 0x785]
	0x01E1D0FC STR V4, [X31 + 0x3]
	0x01E1D100 CBNZ W8, 0x1E1D120
	0x01E1D104 ADRP X0, 0x22D6000
	0x01E1D108 LDR X0, [X0 + 0x5A8]
	0x01E1D10C STR V3, [X31]
	0x01E1D110 BL 0x1C16CF4
	0x01E1D114 LDR V3, [X31]
	0x01E1D118 MOVZ W8, 0x1
	0x01E1D11C STRB W8, [X21 + 0x785]
	0x01E1D120 LDR X0, [X24]
	0x01E1D124 LDR W8, [X0 + 0xE0]
	0x01E1D128 CBNZ W8, 0x1E1D138
	0x01E1D12C STR V3, [X31]
	0x01E1D130 BL 0x1C16DFC
	0x01E1D134 LDR V3, [X31]
	0x01E1D138 ADRP X8, 0xFFFFFFFFFECCD000
	0x00000000 INVALID
	0x01E1D140 LDR V1, [X8 + 0x17C]
	0x01E1D144 FADDP S0, V0.2S
	0x01E1D148 FMUL S2, S9, S9
	0x01E1D14C FADD S0, S2, S0
	0x01E1D150 FSQRT S0, S0
	0x01E1D154 FCMP S0, S1
	0x01E1D158 B.LE 0x1E1D328
	0x01E1D15C UNIMPLEMENTED
	0x00000000 INVALID
	0x01E1D164 FDIV S9, S9, S0
	0x01E1D168 B 0x1E1D360
	0x01E1D16C LDRB W8, [X25 + 0x784]
	0x01E1D170 CBNZ W8, 0x1E1D188
	0x01E1D174 ADRP X0, 0x22D6000
	0x01E1D178 LDR X0, [X0 + 0x5A8]
	0x01E1D17C BL 0x1C16CF4
	0x01E1D180 MOVZ W8, 0x1
	0x01E1D184 STRB W8, [X25 + 0x784]
	0x01E1D188 LDR X0, [X24]
	0x01E1D18C LDR W8, [X0 + 0xE0]
	0x01E1D190 CBNZ W8, 0x1E1D198
	0x01E1D194 BL 0x1C16DFC
	0x01E1D198 MOV X0, X21
	0x01E1D19C MOV X1, X31
	0x01E1D1A0 BL 0x3C35CC4
	0x01E1D1A4 LDR X8, [X23]
	0x01E1D1A8 MOV W21, W0
	0x01E1D1AC LDR W9, [X8 + 0xE0]
	0x01E1D1B0 CBNZ W9, 0x1E1D1BC
	0x01E1D1B4 MOV X0, X8
	0x01E1D1B8 BL 0x1C16DFC
	0x01E1D1BC ADRP X8, 0xFFFFFFFFFECCD000
	0x01E1D1C0 LDR V0, [X8 + 0x39C]
	0x01E1D1C4 MOV V2.16B, V8.16B
	0x01E1D1C8 MOV V3.16B, V13.16B
	0x01E1D1CC MOV V4.16B, V12.16B
	0x01E1D1D0 FMUL S0, S14, S0
	0x01E1D1D4 FADD S6, S0, S15
	0x01E1D1D8 LDP V0, V1, [X31 + 0x20]
	0x01E1D1DC MOV V5.16B, V11.16B
	0x01E1D1E0 MOV X0, X20
	0x01E1D1E4 MOV W1, W21
	0x01E1D1E8 MOV X2, X31
	0x01E1D1EC BL 0x3C8B18C
	0x01E1D1F0 TBZ X0, 0x0, 0x1E1D2E0
	0x01E1D1F4 LDR V1, [X31 + 0x2]
	0x01E1D1F8 LDR V0, [X31 + 0x3]
	0x01E1D1FC STR S8, [X19 + 0x8]
	0x01E1D200 STP S1, S0, [X19]
	0x01E1D204 B 0x1E1D3A8
	0x01E1D208 LDRB W8, [X25 + 0x784]
	0x01E1D20C STR V3, [X31]
	0x01E1D210 CBNZ W8, 0x1E1D22C
	0x01E1D214 ADRP X0, 0x22D6000
	0x01E1D218 LDR X0, [X0 + 0x5A8]
	0x01E1D21C BL 0x1C16CF4
	0x01E1D220 LDR V3, [X31]
	0x01E1D224 MOVZ W8, 0x1
	0x01E1D228 STRB W8, [X25 + 0x784]
	0x01E1D22C LDR X0, [X24]
	0x01E1D230 LDR W8, [X0 + 0xE0]
	0x01E1D234 CBNZ W8, 0x1E1D240
	0x01E1D238 BL 0x1C16DFC
	0x01E1D23C LDR V3, [X31]
	0x01E1D240 MOV S10, V3.S[1]
	0x00000000 INVALID
	0x01E1D248 FMUL S1, S10, V3.S[1]
	0x01E1D24C FADD S0, S0, S1
	0x01E1D250 FMUL S1, S9, S9
	0x01E1D254 FADD S0, S0, S1
	0x01E1D258 MOV X0, X21
	0x01E1D25C MOV X1, X31
	0x01E1D260 FSQRT S8, S0
	0x01E1D264 BL 0x3C35CC4
	0x01E1D268 LDR X8, [X23]
	0x01E1D26C MOV W21, W0
	0x01E1D270 LDR W9, [X8 + 0xE0]
	0x01E1D274 CBNZ W9, 0x1E1D280
	0x01E1D278 MOV X0, X8
	0x01E1D27C BL 0x1C16DFC
	0x01E1D280 ADRP X8, 0xFFFFFFFFFECCD000
	0x01E1D284 LDR V0, [X8 + 0x39C]
	0x01E1D288 ADD X0, X31, 0x40
	0x01E1D28C LDR V3, [X31]
	0x01E1D290 MOV V4.16B, V10.16B
	0x01E1D294 FMUL S0, S11, S0
	0x01E1D298 FADD S6, S0, S8
	0x01E1D29C LDR V8, [X31 + 0x1C]
	0x01E1D2A0 LDP V0, V1, [X31 + 0x20]
	0x01E1D2A4 MOV V5.16B, V9.16B
	0x01E1D2A8 MOV W1, W21
	0x01E1D2AC MOV V2.16B, V8.16B
	0x01E1D2B0 MOV X2, X31
	0x01E1D2B4 BL 0x3C8B18C
	0x01E1D2B8 TBZ X0, 0x0, 0x1E1D3A8
	0x01E1D2BC LDR V1, [X31 + 0x2]
	0x01E1D2C0 LDP V0, V2, [X31 + 0x30]
	0x01E1D2C4 STR S8, [X19 + 0x8]
	0x01E1D2C8 STP S1, S0, [X19]
	0x01E1D2CC LDUR V0, [X31 + 0x5C]
	0x01E1D2D0 LDR V1, [X31 + 0x5]
	0x01E1D2D4 STUR V0, [X20 + 0x1C]
	0x01E1D2D8 STP V2, V1, [X20]
	0x01E1D2DC B 0x1E1D3A8
	0x01E1D2E0 ADRP X20, 0x25BB000
	0x01E1D2E4 LDRB W8, [X20 + 0x783]
	0x01E1D2E8 CBNZ W8, 0x1E1D300
	0x01E1D2EC ADRP X0, 0x22D6000
	0x01E1D2F0 LDR X0, [X0 + 0x5A0]
	0x01E1D2F4 BL 0x1C16CF4
	0x01E1D2F8 MOVZ W8, 0x1
	0x01E1D2FC STRB W8, [X20 + 0x783]
	0x01E1D300 ADRP X8, 0x22D6000
	0x01E1D304 LDR X8, [X8 + 0x5A0]
	0x01E1D308 MOV W0, W31
	0x01E1D30C LDR X8, [X8]
	0x01E1D310 LDR X8, [X8 + 0xB8]
	0x01E1D314 LDR V0, [X8]
	0x01E1D318 LDR V1, [X8 + 0x8]
	0x01E1D31C STR D0, [X19]
	0x01E1D320 STR S1, [X19 + 0x8]
	0x01E1D324 B 0x1E1D3AC
	0x01E1D328 ADRP X21, 0x25BB000
	0x01E1D32C LDRB W8, [X21 + 0x783]
	0x01E1D330 CBNZ W8, 0x1E1D348
	0x01E1D334 ADRP X0, 0x22D6000
	0x01E1D338 LDR X0, [X0 + 0x5A0]
	0x01E1D33C BL 0x1C16CF4
	0x01E1D340 MOVZ W8, 0x1
	0x01E1D344 STRB W8, [X21 + 0x783]
	0x01E1D348 ADRP X8, 0x22D6000
	0x01E1D34C LDR X8, [X8 + 0x5A0]
	0x01E1D350 LDR X8, [X8]
	0x01E1D354 LDR X8, [X8 + 0xB8]
	0x01E1D358 LDR V8, [X8]
	0x01E1D35C LDR V9, [X8 + 0x8]
	0x01E1D360 MOV X0, X20
	0x01E1D364 MOV X1, X31
	0x01E1D368 BL 0x3C8E684
	0x01E1D36C LDR V2, [X31 + 0x3]
	0x01E1D370 FSUB S0, S0, S10
	0x01E1D374 FMOV S1, W31
	0x01E1D378 FMAX S0, S0, S1
	0x00000000 INVALID
	0x01E1D380 FADD V1.2S, V2.2S, V1.2S
	0x01E1D384 LDR V2, [X31 + 0x1C]
	0x01E1D388 FMUL S0, S9, S0
	0x01E1D38C STR D1, [X19]
	0x01E1D390 FADD S0, S2, S0
	0x01E1D394 STR S0, [X19 + 0x8]
	0x01E1D398 LDP V0, V1, [X31 + 0x40]
	0x01E1D39C LDUR V2, [X31 + 0x5C]
	0x01E1D3A0 STP V0, V1, [X20]
	0x01E1D3A4 STUR V2, [X20 + 0x1C]
	0x01E1D3A8 MOVZ W0, 0x1
	0x01E1D3AC LDP X20, X19, [X31 + 0xE0]
	0x01E1D3B0 LDP X22, X21, [X31 + 0xD0]
	0x01E1D3B4 LDP X24, X23, [X31 + 0xC0]
	0x01E1D3B8 LDP X30, X25, [X31 + 0xB0]
	0x01E1D3BC LDP D9, D8, [X31 + 0xA0]
	0x01E1D3C0 LDP D11, D10, [X31 + 0x90]
	0x01E1D3C4 LDP D13, D12, [X31 + 0x80]
	0x01E1D3C8 LDP D15, D14, [X31 + 0x70]
	0x01E1D3CC ADD X31, X31, 0xF0
	0x01E1D3D0 RET
	0x01E1D3D4 ANDS W31, W1, 0x1
	0x01E1D3D8 MOVZ W8, 0x110
	0x01E1D3DC CINC X8, X8, EQ
	0x01E1D3E0 LDRB W0, [X0, X8, LSL]
	0x01E1D3E4 RET
	0x01E1D3E8 STP D11, D10, [X31 - 0x50]!
	0x01E1D3EC STP D9, D8, [X31 + 0x10]
	0x01E1D3F0 STR X30, [X31 + 0x20]
	0x01E1D3F4 STP X22, X21, [X31 + 0x30]
	0x01E1D3F8 STP X20, X19, [X31 + 0x40]
	0x01E1D3FC MOV X1, X31
	0x01E1D400 MOV V8.16B, V0.16B
	0x01E1D404 MOV X19, X0
	0x01E1D408 BL 0x3C32E90
	0x01E1D40C LDR X8, [X19 + 0x28]
	0x01E1D410 CBZ X8, 0x1E1D590
	0x01E1D414 MOV X20, X0
	0x01E1D418 MOV X0, X8
	0x01E1D41C MOV X1, X31
	0x01E1D420 BL 0x3C32E90
	0x01E1D424 CBZ X0, 0x1E1D590
	0x01E1D428 MOV X1, X31
	0x01E1D42C BL 0x3C3F58C

ISIL:
	001 Move [X31-160], D15
	002 Move [X31-152], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+72], X30
	011 Move [X31+80], X28
	012 Move [X31+88], X27
	013 Move [X31+96], X26
	014 Move [X31+104], X25
	015 Move [X31+112], X24
	016 Move [X31+120], X23
	017 Move [X31+128], X22
	018 Move [X31+136], X21
	019 Move [X31+144], X20
	020 Move [X31+152], X19
	021 Subtract X31, X31, 352
	022 Move X20, 0x25BE000
	023 Move W8, [X20+3615]
	024 Move X19, X0
	025 Move [X31+96], D0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {53}
	030 Move X0, 0x22E0000
	031 Move X0, [X0+1152]
	032 Call 0x1C17CF4
	033 Move X0, 0x22E0000
	034 Move X0, [X0+1160]
	035 Call 0x1C17CF4
	036 Move X0, 0x22E0000
	037 Move X0, [X0+1168]
	038 Call 0x1C17CF4
	039 Move X0, 0x22E0000
	040 Move X0, [X0+1176]
	041 Call 0x1C17CF4
	042 Move X0, 0x22E0000
	043 Move X0, [X0+1184]
	044 Call 0x1C17CF4
	045 Move X0, 0x22E0000
	046 Move X0, [X0+1192]
	047 Call 0x1C17CF4
	048 Move X0, 0x22D9000
	049 Move X0, [X0+1528]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X20+3615], W8
	053 Move X25, 0x25BE000
	054 Move W8, [X25+1923]
	055 NotImplemented "Instruction MOVI not yet implemented."
	056 Move [X31+248], W31
	057 Move [X31+240], X31
	058 Move [X31+204], V0
	059 Move [X31+176], V0
	060 Move [X31+184], V0
	061 Move [X31+160], X31
	062 Move [X31+128], V0
	063 Move [X31+136], V0
	064 Compare W8, 0
	065 JumpIfNotEqual {71}
	066 Move X0, 0x22D9000
	067 Move X0, [X0+1440]
	068 Call 0x1C17CF4
	069 Move W8, 1
	070 Move [X25+1923], W8
	071 Move X20, 0x22D9000
	072 Move X20, [X20+1440]
	073 Move X8, [X20]
	074 Move X8, [X8+184]
	075 Move V0, [X8]
	076 Move V12, [X8+8]
	077 Move [X31+224], D0
	078 Move [X31+232], S12
	079 Move X0, [X19+48]
	080 Move [X31+5], V0
	081 Compare X0, 0
	082 JumpIfEqual {1614}
	083 Move X1, X31
	084 Call Component.get_transform, X0
	085 Move X8, [X19+40]
	086 Compare X8, 0
	087 JumpIfEqual {1614}
	088 Move X21, X0
	089 Move X0, X8
	090 Move X1, X31
	091 Call Component.get_transform, X0
	092 Compare X0, 0
	093 JumpIfEqual {1614}
	094 Move X1, X31
	095 Call Transform.get_eulerAngles, X0
	096 Compare X21, 0
	097 JumpIfEqual {1614}
	098 Move S0, W31
	099 Move S2, W31
	100 Move X0, X21
	101 Move X1, X31
	102 Call Transform.set_eulerAngles, X0, X1
	103 Move X0, X19
	104 Call Player.CurrentLeftHandPosition, X0
	105 Move X29, 0x25BE000
	106 Move V9, [X19+104]
	107 Move W8, [X29+2749]
	108 Move V10, [X19+112]
	109 Move V8, V2
	110 Move [X31+48], V1
	111 Move [X31+56], V0
	112 Move V0.S[1], V1.S[0]
	113 Move [X31+7], V0
	114 Compare W8, 0
	115 JumpIfNotEqual {122}
	116 Move X0, 0x22D9000
	117 Move X0, [X0+1440]
	118 Call 0x1C17CF4
	119 Move V0, [X31+7]
	120 Move W8, 1
	121 Move [X29+2749], W8
	122 Move X8, [X20]
	123 Subtract V9, V0, V9
	124 Move W9, 0xCCCD
	125 NotImplemented "Instruction MOVK not yet implemented."
	126 Move X8, [X8+184]
	127 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	128 Move X9, -20123648
	129 Move V13, [X9+3992]
	130 NotImplemented "Instruction LDUR not yet implemented."
	131 Move V2, [X8+44]
	132 Move X23, 0x25BE000
	133 Move W8, [X23+1924]
	134 Add V0, V0, V0
	135 NotImplemented "Instruction INVALID not yet implemented."
	136 Add S1, S2, S2
	137 Move V2, [X31+6]
	138 Multiply S1, S1, S13
	139 Subtract S10, S8, S10
	140 NotImplemented "Instruction INVALID not yet implemented."
	141 Multiply S1, S1, S2
	142 NotImplemented "Instruction INVALID not yet implemented."
	143 Multiply S14, S1, S2
	144 Compare W8, 0
	145 JumpIfNotEqual {151}
	146 Move X0, 0x22D9000
	147 Move X0, [X0+1448]
	148 Call 0x1C17CF4
	149 Move W8, 1
	150 Move [X23+1924], W8
	151 Move X24, 0x22D9000
	152 Move X24, [X24+1448]
	153 Add V4, V9, V11
	154 Add S9, S10, S14
	155 Move X0, [X24]
	156 Move W8, [X0+224]
	157 Compare W8, 0
	158 JumpIfNotEqual {162}
	159 Move [X31+2], V4
	160 Call 0x1C17DFC
	161 Move V4, [X31+2]
	162 Move S5, V4.S[1]
	163 NotImplemented "Instruction INVALID not yet implemented."
	164 Move W8, [X19+275]
	165 Multiply S1, S5, V4.S[1]
	166 Add S0, S0, S1
	167 Multiply S1, S9, S9
	168 Add S0, S0, S1
	169 Add X26, X31, 256
	170 NotImplemented "Instruction FSQRT not yet implemented."
	171 Compare W8, 0
	172 JumpIfNotEqual {233}
	173 Move S0, [X19+104]
	174 Move S1, [X19+108]
	175 Move V2, [X19+112]
	176 Move V3, [X19+176]
	177 Move V7, [X19+184]
	178 Add X21, X19, 312
	179 Add X1, X31, 240
	180 Move W2, 1
	181 Move X0, X19
	182 Move V6, V9
	183 Move X3, X21
	184 Call Player.IterativeCollisionSphereCast, X0, X1, V0, X2, V1, X3, X4, X5
	185 Move TEMP, X0
	186 And TEMP, TEMP, 1
	187 Compare TEMP, 1
	188 JumpIfNotEqual {233}
	189 Move X0, X21
	190 Move X1, X31
	191 Call RaycastHit.get_rigidbody, X0
	192 Compare X0, 0
	193 JumpIfEqual {228}
	194 Move X22, X0
	195 Move X0, X21
	196 Move X1, X31
	197 Call RaycastHit.get_normal, X0
	198 NotImplemented "Instruction FNEG not yet implemented."
	199 NotImplemented "Instruction FNEG not yet implemented."
	200 NotImplemented "Instruction FNEG not yet implemented."
	201 Move W8, 0x447A0000
	202 Multiply S0, S11, S0
	203 Multiply S1, S11, S1
	204 Multiply S2, S11, S2
	205 Move S3, W8
	206 Multiply S0, S0, S3
	207 Multiply S1, S1, S3
	208 Multiply S2, S2, S3
	209 Move V3, [X31+6]
	210 Move X0, X21
	211 Move X1, X31
	212 Move V14, V11
	213 Multiply S9, S0, S3
	214 Multiply S10, S1, S3
	215 Multiply S11, S2, S3
	216 Call RaycastHit.get_point, X0
	217 Move V3, V0
	218 Move V4, V1
	219 Move V5, V2
	220 Move X0, X22
	221 Move V0, V9
	222 Move V1, V10
	223 Move V2, V11
	224 Move W1, W31
	225 Move X2, X31
	226 Move V11, V14
	227 Call Rigidbody.AddForceAtPosition, X0, X1, X2, X3
	228 Move W8, [X19+272]
	229 Compare W8, 0
	230 JumpIfEqual {1092}
	231 Move V9, [X19+104]
	232 Move V10, [X19+112]
	233 Move V0, [X31+5]
	234 Move W28, W31
	235 Move V15, V12
	236 Move V14, V0
	237 Move X0, X19
	238 Call Player.CurrentRightHandPosition, X0
	239 NotImplemented "Instruction LDUR not yet implemented."
	240 Move W8, [X29+2749]
	241 Move V10, [X19+124]
	242 Move V16, V1
	243 Move V8, V2
	244 Compare W8, 0
	245 JumpIfNotEqual {255}
	246 Move X0, 0x22D8000
	247 Move X0, [X0+1440]
	248 Move [X31+7], V0
	249 Move [X31+4], V16
	250 Call 0x1C17CF4
	251 Move V16, [X31+4]
	252 Move V0, [X31+7]
	253 Move W8, 1
	254 Move [X29+2749], W8
	255 Move W8, [X19+275]
	256 Move V4, [X31+5]
	257 Compare W8, 0
	258 JumpIfNotEqual {343}
	259 Move X8, [X20]
	260 Move W9, 0xCCCD
	261 NotImplemented "Instruction MOVK not yet implemented."
	262 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	263 Move X8, [X8+184]
	264 Move V7, [X31+6]
	265 Move V2, V0
	266 Move V2.S[1], V16.S[0]
	267 NotImplemented "Instruction LDUR not yet implemented."
	268 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	269 Move [X31+7], V0
	270 Move S0, [X19+116]
	271 Move S1, [X19+120]
	272 Add V6, V6, V6
	273 NotImplemented "Instruction INVALID not yet implemented."
	274 Move V6, [X8+44]
	275 NotImplemented "Instruction INVALID not yet implemented."
	276 Move [X31+4], V16
	277 Subtract V16, V2, V9
	278 Add S6, S6, S6
	279 Multiply S6, S6, S13
	280 Multiply S6, S6, S7
	281 Move V2, [X19+124]
	282 NotImplemented "Instruction INVALID not yet implemented."
	283 Move V3, [X19+176]
	284 Multiply S6, S6, S7
	285 Move V7, [X19+184]
	286 Subtract S5, S8, S10
	287 Add V4, V16, V4
	288 Add X21, X19, 356
	289 Add S6, S5, S6
	290 Move S5, V4.S[1]
	291 Add X1, X31, 240
	292 Move W2, 1
	293 Move X0, X19
	294 Move X3, X21
	295 Call Player.IterativeCollisionSphereCast, X0, X1, V0, X2, V1, X3, X4, X5
	296 Move TEMP, X0
	297 And TEMP, TEMP, 1
	298 Compare TEMP, 1
	299 JumpIfNotEqual {342}
	300 Move X0, X21
	301 Move X1, X31
	302 Call RaycastHit.get_rigidbody, X0
	303 Compare X0, 0
	304 JumpIfEqual {337}
	305 Move X22, X0
	306 Move X0, X21
	307 Move X1, X31
	308 Call RaycastHit.get_normal, X0
	309 NotImplemented "Instruction FNEG not yet implemented."
	310 NotImplemented "Instruction FNEG not yet implemented."
	311 NotImplemented "Instruction FNEG not yet implemented."
	312 Move W8, 0x447A0000
	313 Multiply S0, S11, S0
	314 Multiply S1, S11, S1
	315 Multiply S2, S11, S2
	316 Move S3, W8
	317 Multiply S0, S0, S3
	318 Multiply S1, S1, S3
	319 Multiply S2, S2, S3
	320 Move V3, [X31+6]
	321 Move X0, X21
	322 Move X1, X31
	323 Multiply S9, S0, S3
	324 Multiply S10, S1, S3
	325 Multiply S11, S2, S3
	326 Call RaycastHit.get_point, X0
	327 Move V3, V0
	328 Move V4, V1
	329 Move V5, V2
	330 Move X0, X22
	331 Move V0, V9
	332 Move V1, V10
	333 Move V2, V11
	334 Move W1, W31
	335 Move X2, X31
	336 Call Rigidbody.AddForceAtPosition, X0, X1, X2, X3
	337 Move W8, [X19+273]
	338 Compare W8, 0
	339 JumpIfEqual {1130}
	340 NotImplemented "Instruction LDUR not yet implemented."
	341 Move V10, [X19+124]
	342 Move V4, [X31+5]
	343 Move W27, W31
	344 Move V8, V12
	345 Move V10, V4
	346 Move V0, 0
	347 Move TEMP, X28
	348 And TEMP, TEMP, 1
	349 Compare TEMP, 1
	350 JumpIfEqual {354}
	351 Move W8, [X19+272]
	352 Compare W8, 0
	353 JumpIfEqual {368}
	354 Move S9, 5
	355 NotImplemented "Instruction INVALID not yet implemented."
	356 Multiply S2, S15, S9
	357 Add V4, V4, V1
	358 Add S12, S12, S2
	359 Move [X31+224], D4
	360 Move [X31+232], S12
	361 Move TEMP, X27
	362 And TEMP, TEMP, 1
	363 Compare TEMP, 1
	364 JumpIfEqual {373}
	365 Move W8, [X19+273]
	366 Compare W8, 0
	367 JumpIfNotEqual {373}
	368 Move S9, W31
	369 Move TEMP, X27
	370 And TEMP, TEMP, 1
	371 Compare TEMP, 1
	372 JumpIfNotEqual {365}
	373 Move S1, 5
	374 NotImplemented "Instruction INVALID not yet implemented."
	375 Multiply S2, S8, S1
	376 Add V4, V0, V4
	377 Add S12, S2, S12
	378 Add S9, S9, S1
	379 Move [X31+224], D4
	380 Move [X31+232], S12
	381 Move V8, [X19+492]
	382 Move W8, [X25+1923]
	383 Move V10, [X19+496]
	384 Move [X31+5], V4
	385 Compare W8, 0
	386 JumpIfNotEqual {393}
	387 Move X0, 0x22D8000
	388 Move X0, [X0+1440]
	389 Call 0x1C17CF4
	390 Move V4, [X31+5]
	391 Move W8, 1
	392 Move [X25+1923], W8
	393 Move X8, [X20]
	394 Move X9, -20127744
	395 Move V15, [X9+3872]
	396 Move X8, [X8+184]
	397 Move V0, [X8]
	398 NotImplemented "Instruction LDUR not yet implemented."
	399 Subtract S0, S8, S0
	400 Subtract V1, V10, V1
	401 Multiply S0, S0, S0
	402 NotImplemented "Instruction INVALID not yet implemented."
	403 Add S0, S0, S1
	404 Move S1, V1.S[1]
	405 Add S0, S1, S0
	406 NotImplemented "Instruction FCMP not yet implemented."
	407 Move W9, [X19+504]
	408 NotImplemented "Instruction CMP not yet implemented."
	409 NotImplemented "Instruction CSET not yet implemented."
	410 Move W26, W31
	411 Move X0, [X19+480]
	412 Compare X0, 0
	413 JumpIfEqual {1614}
	414 Move W9, [X0+24]
	415 Move [X31+64], S15
	416 NotImplemented "Instruction CMP not yet implemented."
	417 Move X9, 0x22DF000
	418 Move X9, [X9+1184]
	419 Move X23, 0x22DF000
	420 Move X24, 0x22DF000
	421 Move V10, [X8+8]
	422 Move X1, [X9]
	423 Move V11, [X8]
	424 Move X23, [X23+1160]
	425 Move X24, [X24+1152]
	426 Add X8, X31, 304
	427 Move W25, W26
	428 Call List`1<ItemContactPoint>.GetEnumerator, X0
	429 Move V0, [X31+304]
	430 Move V1, [X31+320]
	431 Move X8, [X31+336]
	432 Move W22, W31
	433 Add X21, X19, 400
	434 Move [X31+128], V0
	435 Move [X31+136], V1
	436 Move [X31+160], X8
	437 Move W26, 1
	438 Move X1, [X23]
	439 Add X0, X31, 128
	440 Call Enumerator<ItemContactPoint>.MoveNext, X0
	441 Move TEMP, X0
	442 And TEMP, TEMP, 1
	443 Compare TEMP, 1
	444 JumpIfNotEqual {508}
	445 Move V14, [X31+144]
	446 Move V15, [X31+152]
	447 NotImplemented "Instruction LDUR not yet implemented."
	448 Move W8, [X29+2749]
	449 Move V8, [X31+164]
	450 Move [X31+7], V0
	451 Compare W8, 0
	452 JumpIfNotEqual {456}
	453 Move X0, X20
	454 Call 0x1C17CF4
	455 Move [X29+2749], W26
	456 Move W8, [X19+275]
	457 Compare W8, 0
	458 JumpIfNotEqual {438}
	459 Move X8, [X20]
	460 Move V16, [X31+96]
	461 Move V0, [X31+112]
	462 Subtract S2, S15, S8
	463 Move V3, [X19+176]
	464 Move X8, [X8+184]
	465 Move V7, [X19+184]
	466 Subtract V17, V14, V0
	467 Move S4, V17.S[1]
	468 Move S5, [X8+40]
	469 Move S1, [X8+44]
	470 Add S1, S1, S1
	471 Multiply S1, S1, S13
	472 Multiply S1, S1, S16
	473 Multiply S1, S1, S16
	474 Add S6, S2, S1
	475 Move V1, [X8+36]
	476 Add S2, S5, S5
	477 Multiply S2, S2, S13
	478 Multiply S2, S2, S16
	479 Add S1, S1, S1
	480 Multiply S1, S1, S13
	481 Multiply S1, S1, S16
	482 Multiply S2, S2, S16
	483 Multiply S1, S1, S16
	484 Add S5, S4, S2
	485 Add S4, S17, S1
	486 Move S1, V0.S[1]
	487 Add X1, X31, 240
	488 Move W2, 1
	489 Move X0, X19
	490 Move V2, V8
	491 Move X3, X21
	492 Call Player.IterativeCollisionSphereCast, X0, X1, V0, X2, V1, X3, X4, X5
	493 Move TEMP, X0
	494 And TEMP, TEMP, 1
	495 Compare TEMP, 1
	496 JumpIfNotEqual {438}
	497 Move V0, [X31+7]
	498 Subtract S1, S8, S15
	499 Add S10, S10, S1
	500 Add W22, W22, 1
	501 Subtract V0, V0, V14
	502 Add V11, V11, V0
	503 Move X0, X21
	504 Move X1, X31
	505 Call RaycastHit.get_normal, X0
	506 Move X0, X19
	507 Call Player.ApplyFriction, X0, X1
	508 Move X1, [X24]
	509 Add X0, X31, 128
	510 Call Enumerator<ItemContactPoint>.Dispose, X0
	511 Move X24, 0x22D8000
	512 Move X24, [X24+1448]
	513 Move V15, [X31+64]
	514 Move V4, [X31+5]
	515 NotImplemented "Instruction CMP not yet implemented."
	516 Move X23, 0x25BD000
	517 Move W26, W25
	518 NotImplemented "Instruction SCVTF not yet implemented."
	519 Move S1, 1
	520 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	521 NotImplemented "Instruction FDIV not yet implemented."
	522 Add S9, S9, S1
	523 NotImplemented "Instruction INVALID not yet implemented."
	524 Add S12, S0, S12
	525 Add V4, V1, V4
	526 Move W29, 1
	527 Move [X31+232], S12
	528 Move [X31+224], D4
	529 Move W29, W31
	530 Move X25, 0x25BD000
	531 Move W29, W31
	532 Move X8, [X19+480]
	533 Move X25, 0x25BD000
	534 Compare X8, 0
	535 JumpIfEqual {1614}
	536 Move W9, [X8+28]
	537 Add W9, W9, 1
	538 Move [X8+24], W31
	539 Move [X8+28], W9
	540 Add X22, X19, 468
	541 Compare W26, 0
	542 JumpIfEqual {592}
	543 Move V0, [X19+504]
	544 Move V1, [X19+500]
	545 Move V2, [X22+24]
	546 Move W8, [X25+1923]
	547 NotImplemented "Instruction SCVTF not yet implemented."
	548 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	549 NotImplemented "Instruction FDIV not yet implemented."
	550 NotImplemented "Instruction INVALID not yet implemented."
	551 Add S12, S12, S0
	552 Add V4, V4, V1
	553 Move [X31+232], S12
	554 Move [X31+224], D4
	555 Move X21, [X19+144]
	556 Move [X31+5], V4
	557 Compare W8, 0
	558 JumpIfNotEqual {564}
	559 Move X0, 0x22D8000
	560 Move X0, [X0+1440]
	561 Call 0x1C17CF4
	562 Move W8, 1
	563 Move [X25+1923], W8
	564 Compare X21, 0
	565 JumpIfEqual {1614}
	566 Move X8, [X20]
	567 Move X0, X21
	568 Move X1, X31
	569 Move X8, [X8+184]
	570 Move S1, [X8+4]
	571 Move S2, [X8+8]
	572 Move V0, [X8]
	573 Call Rigidbody.set_velocity, X0, X1
	574 Move W8, [X25+1923]
	575 Move S8, 1
	576 Compare W8, 0
	577 JumpIfNotEqual {583}
	578 Move X0, 0x22D8000
	579 Move X0, [X0+1440]
	580 Call 0x1C17CF4
	581 Move W8, 1
	582 Move [X25+1923], W8
	583 Move X8, [X20]
	584 Move V4, [X31+5]
	585 Add S9, S9, S8
	586 Move X8, [X8+184]
	587 Move V0, [X8]
	588 Move V1, [X8+8]
	589 Move [X22+24], D0
	590 Move [X19+500], S1
	591 Move [X19+504], W31
	592 Move S0, 1
	593 Move S8, V4.S[1]
	594 NotImplemented "Instruction FCMP not yet implemented."
	595 NotImplemented "Instruction FDIV not yet implemented."
	596 NotImplemented "Instruction FDIV not yet implemented."
	597 NotImplemented "Instruction FDIV not yet implemented."
	598 Move [X31+224], S4
	599 Move [X31+232], S8
	600 Move [X31+232], S12
	601 Move W8, [X25+1923]
	602 Compare W8, 0
	603 JumpIfNotEqual {611}
	604 Move X0, 0x22D8000
	605 Move X0, [X0+1440]
	606 Move [X31+5], V4
	607 Call 0x1C17CF4
	608 Move V4, [X31+5]
	609 Move W8, 1
	610 Move [X25+1923], W8
	611 Move X8, [X20]
	612 Move X8, [X8+184]
	613 Move S0, [X8]
	614 Move S1, [X8+4]
	615 Move V2, [X8+8]
	616 Subtract S0, S4, S0
	617 Subtract S1, S8, S1
	618 Subtract S2, S12, S2
	619 Multiply S0, S0, S0
	620 Multiply S1, S1, S1
	621 Add S0, S0, S1
	622 Multiply S1, S2, S2
	623 Add S0, S1, S0
	624 NotImplemented "Instruction FCMP not yet implemented."
	625 Move V0, [X19+488]
	626 Add X0, X31, 224
	627 Move V1, [X31+6]
	628 Call Player.CalculateClampedMovement, X0, V0, V1
	629 Move X0, [X19+40]
	630 Compare X0, 0
	631 JumpIfEqual {1614}
	632 Move S8, [X19+128]
	633 Move S9, [X19+132]
	634 Move V10, [X19+136]
	635 Move X1, X31
	636 Call SphereCollider.get_radius, X0
	637 Move X0, [X19+40]
	638 Compare X0, 0
	639 JumpIfEqual {1614}
	640 Move X1, X31
	641 Move V11, V0
	642 Call Component.get_transform, X0
	643 Compare X0, 0
	644 JumpIfEqual {1614}
	645 Move X1, X31
	646 Call Transform.get_position, X0
	647 Move S12, [X31+224]
	648 Move S13, [X31+228]
	649 Move V14, [X31+232]
	650 Move S3, [X19+128]
	651 Move S5, [X19+132]
	652 Move V6, [X19+136]
	653 Move V7, [X19+184]
	654 Add S0, S0, S12
	655 Subtract S4, S0, S3
	656 Add S0, S1, S13
	657 Add S1, S2, S14
	658 Subtract S5, S0, S5
	659 Subtract S6, S1, S6
	660 Add X1, X31, 240
	661 Add X3, X31, 176
	662 Move X0, X19
	663 Move V0, V8
	664 Move V1, V9
	665 Move V2, V10
	666 Move V3, V11
	667 Move W2, W31
	668 Call Player.IterativeCollisionSphereCast, X0, X1, V0, X2, V1, X3, X4, X5
	669 Move TEMP, X0
	670 And TEMP, TEMP, 1
	671 Compare TEMP, 1
	672 JumpIfNotEqual {819}
	673 Move S0, [X31+240]
	674 Move S1, [X31+244]
	675 Move V2, [X31+248]
	676 Move S8, [X19+128]
	677 Move S9, [X19+132]
	678 Move V10, [X19+136]
	679 Subtract S12, S0, S8
	680 Subtract S13, S1, S9
	681 Subtract S14, S2, S10
	682 Move [X31+224], S12
	683 Move [X31+232], S13
	684 Move [X31+232], S14
	685 Move X0, [X19+40]
	686 Compare X0, 0
	687 JumpIfEqual {1614}
	688 Move X1, X31
	689 Call Component.get_transform, X0
	690 Compare X0, 0
	691 JumpIfEqual {1614}
	692 Move X1, X31
	693 Call Transform.get_position, X0
	694 Move X0, [X19+40]
	695 Compare X0, 0
	696 JumpIfEqual {1614}
	697 Move [X31+32], S0
	698 Move V3, [X19+128]
	699 Move V0, [X19+132]
	700 Move X1, X31
	701 Move [X31+24], S2
	702 Move [X31+32], S1
	703 Move [X31+48], S10
	704 Move [X31+16], S0
	705 Move [X31+24], S3
	706 Move V0, [X19+136]
	707 Move [X31+80], S9
	708 Move [X31+112], S8
	709 Move [X31+12], S0
	710 Call Component.get_transform, X0
	711 Compare X0, 0
	712 JumpIfEqual {1614}
	713 Move X1, X31
	714 Call Transform.get_position, X0
	715 Move S10, [X19+128]
	716 Move S11, [X19+132]
	717 Move W8, [X23+1924]
	718 Move V9, [X19+136]
	719 Move V15, V1
	720 Move V8, V2
	721 Compare W8, 0
	722 JumpIfNotEqual {730}
	723 Move X0, 0x22D8000
	724 Move X0, [X0+1448]
	725 Move [X31+8], S0
	726 Call 0x1C17CF4
	727 Move V0, [X31+8]
	728 Move W8, 1
	729 Move [X23+1924], W8
	730 Move X0, [X24]
	731 Move W8, [X0+224]
	732 Compare W8, 0
	733 JumpIfNotEqual {737}
	734 Move [X31+8], S0
	735 Call 0x1C17DFC
	736 Move V0, [X31+8]
	737 Move X0, [X19+40]
	738 Compare X0, 0
	739 JumpIfEqual {1614}
	740 Move V3, [X31+32]
	741 Move S5, [X31+16]
	742 Move S4, [X31+20]
	743 Subtract S0, S0, S10
	744 Subtract S1, S15, S11
	745 Move V6, [X31+12]
	746 Subtract S3, S3, S4
	747 Move V4, [X31+28]
	748 Subtract S2, S8, S9
	749 Add S0, S12, S0
	750 Add S1, S13, S1
	751 Subtract S4, S4, S5
	752 Move V5, [X31+24]
	753 Add S2, S14, S2
	754 Multiply S0, S0, S0
	755 Multiply S1, S1, S1
	756 Add S0, S0, S1
	757 Multiply S1, S2, S2
	758 Subtract S5, S5, S6
	759 Add S3, S12, S3
	760 Add S0, S0, S1
	761 Move X1, X31
	762 Move [X31+32], S3
	763 Add S9, S13, S4
	764 Add S10, S14, S5
	765 NotImplemented "Instruction FSQRT not yet implemented."
	766 Call SphereCollider.get_radius, X0
	767 Move V11, [X19+184]
	768 Add X0, X19, 268
	769 Move X1, X31
	770 Move V8, V0
	771 Call LayerMask.get_value, X0
	772 Move X8, 0x22D8000
	773 Move X8, [X8+1528]
	774 Move W21, W0
	775 Move X8, [X8]
	776 Move W9, [X8+224]
	777 Compare W9, 0
	778 JumpIfNotEqual {781}
	779 Move X0, X8
	780 Call 0x1C17DFC
	781 Move X8, -20123648
	782 Move V0, [X8+924]
	783 Multiply S1, S8, S11
	784 Move V2, [X31+48]
	785 Move V3, [X31+32]
	786 Multiply S0, S1, S0
	787 Add S6, S15, S0
	788 Move V0, [X31+112]
	789 Move V1, [X31+80]
	790 Add X0, X31, 176
	791 Move V4, V9
	792 Move V5, V10
	793 Move W1, W21
	794 Move X2, X31
	795 Call Physics.Raycast, X0, X1, X2, V0, X3
	796 Move V15, [X31+64]
	797 Move TEMP, X0
	798 And TEMP, TEMP, 1
	799 Compare TEMP, 1
	800 JumpIfNotEqual {819}
	801 Move X0, [X19+40]
	802 Compare X0, 0
	803 JumpIfEqual {1614}
	804 Move S8, [X19+128]
	805 Move S9, [X19+132]
	806 Move V10, [X19+136]
	807 Move X1, X31
	808 Call Component.get_transform, X0
	809 Compare X0, 0
	810 JumpIfEqual {1614}
	811 Move X1, X31
	812 Call Transform.get_position, X0
	813 Subtract S12, S8, S0
	814 Subtract S13, S9, S1
	815 Subtract S14, S10, S2
	816 Move [X31+224], S12
	817 Move [X31+232], S13
	818 Move [X31+232], S14
	819 Move W8, [X25+1923]
	820 Compare W8, 0
	821 JumpIfNotEqual {827}
	822 Move X0, 0x22D8000
	823 Move X0, [X0+1440]
	824 Call 0x1C17CF4
	825 Move W8, 1
	826 Move [X25+1923], W8
	827 Move X8, [X20]
	828 Move X8, [X8+184]
	829 Move S0, [X8]
	830 Move S1, [X8+4]
	831 Move V2, [X8+8]
	832 Subtract S0, S12, S0
	833 Subtract S1, S13, S1
	834 Subtract S2, S14, S2
	835 Multiply S0, S0, S0
	836 Multiply S1, S1, S1
	837 Add S0, S0, S1
	838 Multiply S1, S2, S2
	839 Add S0, S1, S0
	840 NotImplemented "Instruction FCMP not yet implemented."
	841 Move X21, [X19+144]
	842 Move X0, X19
	843 Move X1, X31
	844 Call Component.get_transform, X0
	845 Compare X0, 0
	846 JumpIfEqual {1614}
	847 Move X1, X31
	848 Call Transform.get_position, X0
	849 Compare X21, 0
	850 JumpIfEqual {1614}
	851 Add S2, S14, S2
	852 Add S1, S13, S1
	853 Add S0, S12, S0
	854 Move X0, X21
	855 Move X1, X31
	856 Call Rigidbody.MovePosition, X0, X1
	857 Move X0, X19
	858 Move X1, X31
	859 Call Component.get_transform, X0
	860 Move X8, [X19+144]
	861 Compare X8, 0
	862 JumpIfEqual {1614}
	863 Move X21, X0
	864 Move X0, X8
	865 Move X1, X31
	866 Call Rigidbody.get_position, X0
	867 Compare X21, 0
	868 JumpIfEqual {1614}
	869 Move X0, X21
	870 Move X1, X31
	871 Call Transform.set_position, X0, X1
	872 Move X0, [X19+40]
	873 Compare X0, 0
	874 JumpIfEqual {1614}
	875 Move X1, X31
	876 Call Component.get_transform, X0
	877 Compare X0, 0
	878 JumpIfEqual {1614}
	879 Move X1, X31
	880 Call Transform.get_position, X0
	881 Move X0, X19
	882 Move [X19+128], S0
	883 Move [X19+136], S1
	884 Move [X19+136], S2
	885 Call Player.CurrentLeftHandPosition, X0
	886 Move V4, V0
	887 Move V5, V1
	888 Move V6, V2
	889 Move S0, [X19+104]
	890 Move S1, [X19+108]
	891 Move V2, [X19+112]
	892 Move V3, [X19+176]
	893 Move V7, [X19+184]
	894 Subtract S4, S4, S0
	895 Subtract S5, S5, S1
	896 Subtract S6, S6, S2
	897 Move TEMP, X28
	898 And TEMP, TEMP, 1
	899 Compare TEMP, 1
	900 JumpIfNotEqual {906}
	901 Move TEMP, X27
	902 And TEMP, TEMP, 1
	903 Compare TEMP, 1
	904 JumpIfNotEqual {914}
	905 Move W8, W31
	906 Move W8, [X19+272]
	907 NotImplemented "Instruction CMP not yet implemented."
	908 NotImplemented "Instruction CSET not yet implemented."
	909 Or W9, W9, W27
	910 Move TEMP, X9
	911 And TEMP, TEMP, 1
	912 Compare TEMP, 1
	913 JumpIfEqual {915}
	914 Move W8, [X19+273]
	915 Xor W8, W8, 1
	916 And W31, W8, 255
	917 Add X3, X19, 312
	918 NotImplemented "Instruction CSET not yet implemented."
	919 Add X1, X31, 240
	920 Move X0, X19
	921 Call Player.IterativeCollisionSphereCast, X0, X1, V0, X2, V1, X3, X4, X5
	922 Move TEMP, X0
	923 And TEMP, TEMP, 1
	924 Compare TEMP, 1
	925 JumpIfNotEqual {931}
	926 Move W8, [X31+248]
	927 Move X9, [X31+240]
	928 Move W28, 1
	929 Move [X19+112], W8
	930 Move [X19+104], X9
	931 Move X0, X19
	932 Call Player.CurrentLeftHandPosition, X0
	933 Move [X19+104], S0
	934 Move [X19+112], S1
	935 Move [X19+112], S2
	936 Move X0, X19
	937 Call Player.CurrentRightHandPosition, X0
	938 Move V4, V0
	939 Move V5, V1
	940 Move V6, V2
	941 Move S0, [X19+116]
	942 Move S1, [X19+120]
	943 Move V2, [X19+124]
	944 Move V3, [X19+176]
	945 Move V7, [X19+184]
	946 Subtract S4, S4, S0
	947 Subtract S5, S5, S1
	948 Subtract S6, S6, S2
	949 Move TEMP, X28
	950 And TEMP, TEMP, 1
	951 Compare TEMP, 1
	952 JumpIfNotEqual {958}
	953 Move TEMP, X27
	954 And TEMP, TEMP, 1
	955 Compare TEMP, 1
	956 JumpIfNotEqual {966}
	957 Move W8, W31
	958 Move W8, [X19+272]
	959 NotImplemented "Instruction CMP not yet implemented."
	960 NotImplemented "Instruction CSET not yet implemented."
	961 Or W9, W27, W9
	962 Move TEMP, X9
	963 And TEMP, TEMP, 1
	964 Compare TEMP, 1
	965 JumpIfEqual {967}
	966 Move W8, [X19+273]
	967 Xor W8, W8, 1
	968 And W31, W8, 255
	969 Add X3, X19, 356
	970 NotImplemented "Instruction CSET not yet implemented."
	971 Add X1, X31, 240
	972 Move X0, X19
	973 Call Player.IterativeCollisionSphereCast, X0, X1, V0, X2, V1, X3, X4, X5
	974 Move TEMP, X0
	975 And TEMP, TEMP, 1
	976 Compare TEMP, 1
	977 JumpIfNotEqual {983}
	978 Move W8, [X31+248]
	979 Move X9, [X31+240]
	980 Move W27, 1
	981 Move [X19+124], W8
	982 Move [X19+116], X9
	983 Move X0, X19
	984 Call Player.CurrentRightHandPosition, X0
	985 Move [X19+116], S0
	986 Move [X19+124], S1
	987 Move [X19+124], S2
	988 Move X0, X19
	989 Move V0, [X31+6]
	990 Call Player.StoreVelocities, X0, V0
	991 Or W8, W28, W27
	992 Or W8, W29, W8
	993 Compare W8, 0
	994 JumpIfNotEqual {998}
	995 Move W8, [X19+508]
	996 Compare W8, 0
	997 JumpIfEqual {1199}
	998 Move W8, [X19+274]
	999 Compare W8, 0
	1000 JumpIfNotEqual {1199}
	1001 Move W8, [X23+1924]
	1002 Compare W8, 0
	1003 JumpIfNotEqual {1009}
	1004 Move X0, 0x22D8000
	1005 Move X0, [X0+1448]
	1006 Call 0x1C17CF4
	1007 Move W8, 1
	1008 Move [X23+1924], W8
	1009 Move X0, [X24]
	1010 Move S10, [X19+216]
	1011 Move S9, [X19+220]
	1012 Move V8, [X19+224]
	1013 Move W8, [X0+224]
	1014 Compare W8, 0
	1015 JumpIfNotEqual {1017}
	1016 Call 0x1C17DFC
	1017 Multiply S0, S10, S10
	1018 Multiply S1, S9, S9
	1019 Move V2, [X19+164]
	1020 Add S0, S0, S1
	1021 Multiply S1, S8, S8
	1022 Add S0, S0, S1
	1023 NotImplemented "Instruction FSQRT not yet implemented."
	1024 NotImplemented "Instruction FCMP not yet implemented."
	1025 Move W8, [X25+1923]
	1026 Move V0, [X19+168]
	1027 Move [X31+7], V0
	1028 Compare W8, 0
	1029 JumpIfNotEqual {1035}
	1030 Move X0, 0x22D8000
	1031 Move X0, [X0+1440]
	1032 Call 0x1C17CF4
	1033 Move W8, 1
	1034 Move [X25+1923], W8
	1035 Move W8, [X23+1924]
	1036 Compare W8, 0
	1037 JumpIfNotEqual {1043}
	1038 Move X0, 0x22D8000
	1039 Move X0, [X0+1448]
	1040 Call 0x1C17CF4
	1041 Move W8, 1
	1042 Move [X23+1924], W8
	1043 Move X0, [X24]
	1044 Move S10, [X19+216]
	1045 Move S9, [X19+220]
	1046 Move V8, [X19+224]
	1047 Move W8, [X0+224]
	1048 Compare W8, 0
	1049 JumpIfNotEqual {1051}
	1050 Call 0x1C17DFC
	1051 Multiply S0, S10, S10
	1052 Multiply S2, S9, S9
	1053 Move V1, [X19+172]
	1054 Add S0, S0, S2
	1055 Multiply S2, S8, S8
	1056 Add S0, S0, S2
	1057 Move V2, [X31+7]
	1058 NotImplemented "Instruction FSQRT not yet implemented."
	1059 Multiply S0, S0, S1
	1060 NotImplemented "Instruction FCMP not yet implemented."
	1061 Move X21, 0x25BD000
	1062 Move V8, [X19+216]
	1063 Move W8, [X21+1925]
	1064 Move V9, [X19+224]
	1065 Compare W8, 0
	1066 JumpIfNotEqual {1072}
	1067 Move X0, 0x22D8000
	1068 Move X0, [X0+1448]
	1069 Call 0x1C17CF4
	1070 Move W8, 1
	1071 Move [X21+1925], W8
	1072 Move X0, [X24]
	1073 Move W8, [X0+224]
	1074 Compare W8, 0
	1075 JumpIfNotEqual {1077}
	1076 Call 0x1C17DFC
	1077 Move X8, -20123648
	1078 NotImplemented "Instruction INVALID not yet implemented."
	1079 Move V2, [X8+380]
	1080 NotImplemented "Instruction FADDP not yet implemented."
	1081 Multiply S1, S9, S9
	1082 Add S0, S1, S0
	1083 NotImplemented "Instruction FSQRT not yet implemented."
	1084 NotImplemented "Instruction FCMP not yet implemented."
	1085 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	1086 NotImplemented "Instruction INVALID not yet implemented."
	1087 NotImplemented "Instruction FDIV not yet implemented."
	1088 Move V0, [X19+216]
	1089 Move V2, [X19+224]
	1090 NotImplemented "Instruction INVALID not yet implemented."
	1091 Multiply S2, S1, S2
	1092 Move V9, [X31+240]
	1093 Move X8, [X19+448]
	1094 Move V10, [X31+248]
	1095 Compare X8, 0
	1096 JumpIfEqual {1121}
	1097 Move V0, [X21]
	1098 Move V1, [X21+16]
	1099 NotImplemented "Instruction LDUR not yet implemented."
	1100 Move S3, [X19+104]
	1101 Move S4, [X19+108]
	1102 Move V5, [X19+112]
	1103 Add X1, X31, 304
	1104 Move [X26+28], V2
	1105 Move [X31+256], V0
	1106 Move [X31+264], V1
	1107 Move V1, [X31+17]
	1108 NotImplemented "Instruction LDUR not yet implemented."
	1109 Move X9, [X8+24]
	1110 Move X0, [X8+64]
	1111 Move [X31+304], V0
	1112 Move [X31+312], V1
	1113 Move [X26+76], V2
	1114 Move V1, [X31+48]
	1115 Move V0, [X31+64]
	1116 Move X2, [X8+40]
	1117 Subtract S2, S8, S5
	1118 Subtract S0, S0, S3
	1119 Subtract S1, S1, S4
	1120 NotImplemented "Instruction BLR not yet implemented."
	1121 Move V0, [X31+7]
	1122 Move X0, X21
	1123 Move X1, X31
	1124 Subtract S15, S10, S8
	1125 Subtract V14, V9, V0
	1126 Call RaycastHit.get_normal, X0
	1127 Move X0, X19
	1128 Call Player.ApplyFriction, X0, X1
	1129 Move W28, 1
	1130 Move V9, [X31+240]
	1131 Move X8, [X19+456]
	1132 Move V10, [X31+248]
	1133 Move V6, [X31+4]
	1134 Compare X8, 0
	1135 JumpIfEqual {1160}
	1136 Move V0, [X21]
	1137 Move V1, [X21+16]
	1138 NotImplemented "Instruction LDUR not yet implemented."
	1139 Move S3, [X19+116]
	1140 Move S4, [X19+120]
	1141 Move V5, [X19+124]
	1142 Add X1, X31, 304
	1143 Move [X26+28], V2
	1144 Move [X31+256], V0
	1145 Move [X31+264], V1
	1146 Move V1, [X31+17]
	1147 NotImplemented "Instruction LDUR not yet implemented."
	1148 Move X9, [X8+24]
	1149 Move X0, [X8+64]
	1150 Move [X31+304], V0
	1151 Move [X31+312], V1
	1152 Move [X26+76], V2
	1153 Move V0, [X31+7]
	1154 Move X2, [X8+40]
	1155 Subtract S1, S6, S4
	1156 Subtract S2, S8, S5
	1157 Subtract S0, S0, S3
	1158 NotImplemented "Instruction BLR not yet implemented."
	1159 Move V6, [X31+4]
	1160 Move V0, [X31+7]
	1161 Move X0, X21
	1162 Move X1, X31
	1163 Subtract S8, S10, S8
	1164 Move V0.S[1], V6.S[0]
	1165 Subtract V10, V9, V0
	1166 Call RaycastHit.get_normal, X0
	1167 Move X0, X19
	1168 Call Player.ApplyFriction, X0, X1
	1169 Move V4, [X31+5]
	1170 Move W27, 1
	1171 Move W8, [X25+1923]
	1172 Compare W8, 0
	1173 JumpIfNotEqual {1179}
	1174 Move X0, 0x22D8000
	1175 Move X0, [X0+1440]
	1176 Call 0x1C17CF4
	1177 Move W8, 1
	1178 Move [X25+1923], W8
	1179 Move X8, [X20]
	1180 Move X8, [X8+184]
	1181 Move V0, [X8]
	1182 Move V1, [X8+8]
	1183 Move V2, [X31+7]
	1184 NotImplemented "Instruction INVALID not yet implemented."
	1185 Multiply S2, S2, S1
	1186 Move W8, [X19+276]
	1187 Compare W8, 0
	1188 JumpIfEqual {1193}
	1189 Move V1, [X19+280]
	1190 Move V3, [X19+288]
	1191 Add V0, V0, V1
	1192 Add S2, S2, S3
	1193 Move X0, [X19+144]
	1194 Compare X0, 0
	1195 JumpIfEqual {1614}
	1196 Move S1, V0.S[1]
	1197 Move X1, X31
	1198 Call Rigidbody.set_velocity, X0, X1
	1199 Move V8, [X19+464]
	1200 Move W8, [X25+1923]
	1201 Move V9, [X22]
	1202 Compare W8, 0
	1203 JumpIfNotEqual {1209}
	1204 Move X0, 0x22D8000
	1205 Move X0, [X0+1440]
	1206 Call 0x1C17CF4
	1207 Move W8, 1
	1208 Move [X25+1923], W8
	1209 Move X8, [X20]
	1210 Move X8, [X8+184]
	1211 Move V0, [X8]
	1212 NotImplemented "Instruction LDUR not yet implemented."
	1213 Subtract S0, S8, S0
	1214 Subtract V1, V9, V1
	1215 Multiply S0, S0, S0
	1216 NotImplemented "Instruction INVALID not yet implemented."
	1217 Add S0, S0, S1
	1218 Move S1, V1.S[1]
	1219 Add S0, S1, S0
	1220 NotImplemented "Instruction FCMP not yet implemented."
	1221 Move X0, [X19+144]
	1222 Compare X0, 0
	1223 JumpIfEqual {1614}
	1224 Move V2, [X19+472]
	1225 Move V1, [X19+468]
	1226 Move V0, [X19+464]
	1227 Move W1, 2
	1228 Move X2, X31
	1229 Call Rigidbody.AddForce, X0, X1, X2
	1230 Move W8, [X19+472]
	1231 Move X9, [X19+464]
	1232 Move [X19+288], W8
	1233 Move [X19+280], X9
	1234 Move W8, [X25+1923]
	1235 Compare W8, 0
	1236 JumpIfNotEqual {1242}
	1237 Move X0, 0x22D8000
	1238 Move X0, [X0+1440]
	1239 Call 0x1C17CF4
	1240 Move W8, 1
	1241 Move [X25+1923], W8
	1242 Move X8, [X20]
	1243 Move X8, [X8+184]
	1244 Move V0, [X8]
	1245 Move V1, [X8+8]
	1246 Move W8, 1
	1247 Move [X19+276], W8
	1248 Move [X19+464], D0
	1249 Move [X19+472], S1
	1250 Compare W28, 0
	1251 JumpIfNotEqual {1409}
	1252 Move W21, W31
	1253 Compare W27, 0
	1254 JumpIfEqual {1558}
	1255 Move X0, X19
	1256 Call Player.CurrentRightHandPosition, X0
	1257 Move S11, [X19+116]
	1258 Move S12, [X19+120]
	1259 Move W8, [X23+1924]
	1260 Move V13, [X19+124]
	1261 Move V8, V0
	1262 Move V9, V1
	1263 Move V10, V2
	1264 Compare W8, 0
	1265 JumpIfNotEqual {1271}
	1266 Move X0, 0x22D8000
	1267 Move X0, [X0+1448]
	1268 Call 0x1C17CF4
	1269 Move W8, 1
	1270 Move [X23+1924], W8
	1271 Move X0, [X24]
	1272 Subtract S11, S8, S11
	1273 Subtract S9, S9, S12
	1274 Subtract S8, S10, S13
	1275 Move W8, [X0+224]
	1276 Compare W8, 0
	1277 JumpIfNotEqual {1279}
	1278 Call 0x1C17DFC
	1279 Multiply S0, S11, S11
	1280 Multiply S1, S9, S9
	1281 Move V2, [X19+160]
	1282 Add S0, S0, S1
	1283 Multiply S1, S8, S8
	1284 Add S0, S0, S1
	1285 NotImplemented "Instruction FSQRT not yet implemented."
	1286 NotImplemented "Instruction FCMP not yet implemented."
	1287 Move X0, [X19+40]
	1288 Compare X0, 0
	1289 JumpIfEqual {1614}
	1290 Move X1, X31
	1291 Call Component.get_transform, X0
	1292 Compare X0, 0
	1293 JumpIfEqual {1614}
	1294 Move X1, X31
	1295 Call Transform.get_position, X0
	1296 Move V14, [X19+176]
	1297 Move V9, [X19+184]
	1298 Move X0, X19
	1299 Move V8, V0
	1300 Move V12, V1
	1301 Move V13, V2
	1302 Call Player.CurrentRightHandPosition, X0
	1303 Move X0, [X19+40]
	1304 Compare X0, 0
	1305 JumpIfEqual {1614}
	1306 Move X1, X31
	1307 Move [X31+64], S2
	1308 Move [X31+80], S1
	1309 Move [X31+96], S0
	1310 Move [X31+112], S9
	1311 Call Component.get_transform, X0
	1312 Compare X0, 0
	1313 JumpIfEqual {1614}
	1314 Move X1, X31
	1315 Call Transform.get_position, X0
	1316 Move X0, X19
	1317 Move [X31+48], S0
	1318 Move V15, V1
	1319 Move [X31+32], S2
	1320 Call Player.CurrentRightHandPosition, X0
	1321 Move X0, [X19+40]
	1322 Compare X0, 0
	1323 JumpIfEqual {1614}
	1324 Move X1, X31
	1325 Move V9, V0
	1326 Move V10, V1
	1327 Move V11, V2
	1328 Call Component.get_transform, X0
	1329 Compare X0, 0
	1330 JumpIfEqual {1614}
	1331 Move X1, X31
	1332 Move [X31+16], S14
	1333 Move [X31+24], S13
	1334 Move [X31+24], S12
	1335 Move [X31+32], S8
	1336 Call Transform.get_position, X0
	1337 Move W8, [X23+1924]
	1338 Move V12, V0
	1339 Move V13, V1
	1340 Move V8, V2
	1341 Compare W8, 0
	1342 JumpIfNotEqual {1348}
	1343 Move X0, 0x22D7000
	1344 Move X0, [X0+1448]
	1345 Call 0x1C17CF4
	1346 Move W8, 1
	1347 Move [X23+1924], W8
	1348 Move X0, [X24]
	1349 Subtract S14, S9, S12
	1350 Subtract S10, S10, S13
	1351 Subtract S9, S11, S8
	1352 Move W8, [X0+224]
	1353 Compare W8, 0
	1354 JumpIfNotEqual {1356}
	1355 Call 0x1C17DFC
	1356 Move V0, [X31+96]
	1357 Move V1, [X31+48]
	1358 Multiply S2, S9, S9
	1359 Move V9, [X19+176]
	1360 Add X0, X19, 268
	1361 Subtract S11, S0, S1
	1362 Move V0, [X31+80]
	1363 Move V1, [X31+32]
	1364 Move X1, X31
	1365 Subtract S12, S0, S15
	1366 Move V0, [X31+64]
	1367 Subtract S8, S0, S1
	1368 Multiply S0, S14, S14
	1369 Multiply S1, S10, S10
	1370 Add S0, S0, S1
	1371 Add S0, S2, S0
	1372 NotImplemented "Instruction FSQRT not yet implemented."
	1373 Call LayerMask.get_value, X0
	1374 Move X8, 0x22D7000
	1375 Move X8, [X8+1528]
	1376 Move W20, W0
	1377 Move X8, [X8]
	1378 Move W9, [X8+224]
	1379 Compare W9, 0
	1380 JumpIfNotEqual {1383}
	1381 Move X0, X8
	1382 Call 0x1C17DFC
	1383 Move S0, [X31+16]
	1384 Move S2, [X31+20]
	1385 Move V1, [X31+112]
	1386 Subtract S7, S10, S9
	1387 Add X0, X31, 176
	1388 Move V4, V11
	1389 Multiply S3, S0, S1
	1390 Move S1, [X31+24]
	1391 Move S0, [X31+28]
	1392 Move V5, V12
	1393 Move V6, V8
	1394 Move W1, W20
	1395 Move X2, X31
	1396 Call Physics.SphereCast, X0, V0, X1, X2, V1, X3
	1397 Move TEMP, X0
	1398 And TEMP, TEMP, 1
	1399 Compare TEMP, 1
	1400 JumpIfNotEqual {1608}
	1401 Move W20, 1
	1402 Move [X19+276], W31
	1403 Move V0, [X8]
	1404 Move V1, [X8+8]
	1405 Move [X19+280], D0
	1406 Move [X19+288], S1
	1407 Compare W28, 0
	1408 JumpIfEqual {1252}
	1409 Move X0, X19
	1410 Call Player.CurrentLeftHandPosition, X0
	1411 Move S11, [X19+104]
	1412 Move S12, [X19+108]
	1413 Move W8, [X23+1924]
	1414 Move V13, [X19+112]
	1415 Move V8, V0
	1416 Move V9, V1
	1417 Move V10, V2
	1418 Compare W8, 0
	1419 JumpIfNotEqual {1425}
	1420 Move X0, 0x22D7000
	1421 Move X0, [X0+1448]
	1422 Call 0x1C17CF4
	1423 Move W8, 1
	1424 Move [X23+1924], W8
	1425 Move X0, [X24]
	1426 Subtract S11, S8, S11
	1427 Subtract S9, S9, S12
	1428 Subtract S8, S10, S13
	1429 Move W8, [X0+224]
	1430 Compare W8, 0
	1431 JumpIfNotEqual {1433}
	1432 Call 0x1C17DFC
	1433 Multiply S0, S11, S11
	1434 Multiply S1, S9, S9
	1435 Move V2, [X19+160]
	1436 Add S0, S0, S1
	1437 Multiply S1, S8, S8
	1438 Add S0, S0, S1
	1439 NotImplemented "Instruction FSQRT not yet implemented."
	1440 NotImplemented "Instruction FCMP not yet implemented."
	1441 Move X0, [X19+40]
	1442 Compare X0, 0
	1443 JumpIfEqual {1614}
	1444 Move X1, X31
	1445 Call Component.get_transform, X0
	1446 Compare X0, 0
	1447 JumpIfEqual {1614}
	1448 Move X1, X31
	1449 Call Transform.get_position, X0
	1450 Move V14, [X19+176]
	1451 Move V9, [X19+184]
	1452 Move X0, X19
	1453 Move V8, V0
	1454 Move V12, V1
	1455 Move V13, V2
	1456 Call Player.CurrentLeftHandPosition, X0
	1457 Move X0, [X19+40]
	1458 Compare X0, 0
	1459 JumpIfEqual {1614}
	1460 Move X1, X31
	1461 Move [X31+64], S2
	1462 Move [X31+80], S1
	1463 Move [X31+96], S0
	1464 Move [X31+112], S9
	1465 Call Component.get_transform, X0
	1466 Compare X0, 0
	1467 JumpIfEqual {1614}
	1468 Move X1, X31
	1469 Call Transform.get_position, X0
	1470 Move X0, X19
	1471 Move [X31+48], S0
	1472 Move V15, V1
	1473 Move [X31+32], S2
	1474 Call Player.CurrentLeftHandPosition, X0
	1475 Move X0, [X19+40]
	1476 Compare X0, 0
	1477 JumpIfEqual {1614}
	1478 Move X1, X31
	1479 Move V9, V0
	1480 Move V10, V1
	1481 Move V11, V2
	1482 Call Component.get_transform, X0
	1483 Compare X0, 0
	1484 JumpIfEqual {1614}
	1485 Move X1, X31
	1486 Move [X31+16], S14
	1487 Move [X31+24], S13
	1488 Move [X31+24], S12
	1489 Move [X31+32], S8
	1490 Call Transform.get_position, X0
	1491 Move W8, [X23+1924]
	1492 Move V12, V0
	1493 Move V13, V1
	1494 Move V8, V2
	1495 Compare W8, 0
	1496 JumpIfNotEqual {1502}
	1497 Move X0, 0x22D7000
	1498 Move X0, [X0+1448]
	1499 Call 0x1C17CF4
	1500 Move W8, 1
	1501 Move [X23+1924], W8
	1502 Move X0, [X24]
	1503 Subtract S14, S9, S12
	1504 Subtract S10, S10, S13
	1505 Subtract S9, S11, S8
	1506 Move W8, [X0+224]
	1507 Compare W8, 0
	1508 JumpIfNotEqual {1510}
	1509 Call 0x1C17DFC
	1510 Move V0, [X31+96]
	1511 Move V1, [X31+48]
	1512 Multiply S2, S9, S9
	1513 Move V9, [X19+176]
	1514 Add X0, X19, 268
	1515 Subtract S11, S0, S1
	1516 Move V0, [X31+80]
	1517 Move V1, [X31+32]
	1518 Move X1, X31
	1519 Subtract S12, S0, S15
	1520 Move V0, [X31+64]
	1521 Subtract S8, S0, S1
	1522 Multiply S0, S14, S14
	1523 Multiply S1, S10, S10
	1524 Add S0, S0, S1
	1525 Add S0, S2, S0
	1526 NotImplemented "Instruction FSQRT not yet implemented."
	1527 Call LayerMask.get_value, X0
	1528 Move X8, 0x22D7000
	1529 Move X8, [X8+1528]
	1530 Move W20, W0
	1531 Move X8, [X8]
	1532 Move W9, [X8+224]
	1533 Compare W9, 0
	1534 JumpIfNotEqual {1537}
	1535 Move X0, X8
	1536 Call 0x1C17DFC
	1537 Move S0, [X31+16]
	1538 Move S2, [X31+20]
	1539 Move V1, [X31+112]
	1540 Subtract S7, S10, S9
	1541 Add X0, X31, 176
	1542 Move V4, V11
	1543 Multiply S3, S0, S1
	1544 Move S1, [X31+24]
	1545 Move S0, [X31+28]
	1546 Move V5, V12
	1547 Move V6, V8
	1548 Move W1, W20
	1549 Move X2, X31
	1550 Call Physics.SphereCast, X0, V0, X1, X2, V1, X3
	1551 Move TEMP, X0
	1552 And TEMP, TEMP, 1
	1553 Compare TEMP, 1
	1554 JumpIfNotEqual {1600}
	1555 Move W21, 1
	1556 Compare W27, 0
	1557 JumpIfNotEqual {1255}
	1558 Move W20, W31
	1559 Move X0, [X19+56]
	1560 Compare X0, 0
	1561 JumpIfEqual {1614}
	1562 Move S1, [X19+108]
	1563 Move S2, [X19+112]
	1564 Move V0, [X19+104]
	1565 Move X1, X31
	1566 Call Transform.set_position, X0, X1
	1567 Move X0, [X19+64]
	1568 Compare X0, 0
	1569 JumpIfEqual {1614}
	1570 Move S1, [X19+120]
	1571 Move S2, [X19+124]
	1572 Move V0, [X19+116]
	1573 Move X1, X31
	1574 Call Transform.set_position, X0, X1
	1575 Move [X19+272], W21
	1576 Move [X19+273], W20
	1577 Move [X19+508], W26
	1578 Add X31, X31, 352
	1579 Move X20, [X31+144]
	1580 Move X19, [X31+152]
	1581 Move X22, [X31+128]
	1582 Move X21, [X31+136]
	1583 Move X24, [X31+112]
	1584 Move X23, [X31+120]
	1585 Move X26, [X31+96]
	1586 Move X25, [X31+104]
	1587 Move X28, [X31+80]
	1588 Move X27, [X31+88]
	1589 Move X29, [X31+64]
	1590 Move X30, [X31+72]
	1591 Move D9, [X31+48]
	1592 Move D8, [X31+56]
	1593 Move D11, [X31+32]
	1594 Move D10, [X31+40]
	1595 Move D13, [X31+16]
	1596 Move D12, [X31+24]
	1597 Move D15, [X31+160]
	1598 Move D14, [X31+168]
	1599 Return 
	1600 Move X0, X19
	1601 Call Player.CurrentLeftHandPosition, X0
	1602 Move W21, W31
	1603 Move [X19+104], S0
	1604 Move [X19+112], S1
	1605 Move [X19+112], S2
	1606 Compare W27, 0
	1607 JumpIfNotEqual {1255}
	1608 Move X0, X19
	1609 Call Player.CurrentRightHandPosition, X0
	1610 Move W20, W31
	1611 Move [X19+116], S0
	1612 Move [X19+124], S1
	1613 Move [X19+124], S2
	1614 Call 0x1C17F20
	1615 Move X21, X0
	1616 NotImplemented "Instruction CMP not yet implemented."
	1617 Move X0, X21
	1618 Call 0x3EB2AD0
	1619 Move X29, [X0]
	1620 Call 0x3EB2AE0
	1621 Move X1, [X24]
	1622 Add X0, X31, 128
	1623 Call Enumerator<ItemContactPoint>.Dispose, X0
	1624 Compare X29, 0
	1625 JumpIfEqual {511}
	1626 Move X0, X29
	1627 Call 0x1C17F18
	1628 Move X29, X31
	1629 Move X21, X0
	1630 Move X1, [X24]
	1631 Add X0, X31, 128
	1632 Call Enumerator<ItemContactPoint>.Dispose, X0
	1633 Compare X29, 0
	1634 JumpIfNotEqual {1637}
	1635 Move X0, X21
	1636 Call 0x1D2D690
	1637 Move X0, X29
	1638 Call 0x1C17F18
	1639 Call 0x1991590

Method: System.Void SetActiveHandCollisions(System.Boolean enabled)

Disassembly:
	0x01E1DE20 MOV X19, X0
	0x01E1DE24 BL 0x2A44560
	0x01E1DE28 CBZ X19, 0x1E1E714
	0x01E1DE2C ADRP X8, 0x22D8000
	0x01E1DE30 ADRP X23, 0x22DD000
	0x01E1DE34 LDR X8, [X8 + 0x930]
	0x01E1DE38 LDR X23, [X23 + 0x508]
	0x01E1DE3C ADRP X25, 0x22D8000
	0x01E1DE40 ADRP X26, 0x22D8000
	0x01E1DE44 ADRP X27, 0x22DD000
	0x01E1DE48 ADRP X28, 0x22DD000
	0x01E1DE4C ADRP X24, 0x22D8000
	0x01E1DE50 LDR X25, [X25 + 0x940]
	0x01E1DE54 LDR X26, [X26 + 0x998]
	0x01E1DE58 LDR X27, [X27 + 0x5E8]
	0x01E1DE5C LDR X28, [X28 + 0x5E0]
	0x01E1DE60 LDR X24, [X24 + 0x950]
	0x01E1DE64 LDR X2, [X8]
	0x01E1DE68 LDR X3, [X23]
	0x01E1DE6C ADRP X21, 0x22DD000
	0x01E1DE70 ADRP X22, 0x22DD000
	0x01E1DE74 ADRP X20, 0x22DD000
	0x01E1DE78 LDR X21, [X21 + 0x4F0]
	0x01E1DE7C LDR X22, [X22 + 0x558]
	0x01E1DE80 LDR X20, [X20 + 0x530]
	0x01E1DE84 MOVZ W1, 0x1
	0x01E1DE88 MOV X0, X19
	0x01E1DE8C BL 0x2A44E18

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction ORN not yet implemented."
	004 And W8, W8, 1
	005 Move X19, X0
	006 Move [X0+275], W8
	007 Call Player.CurrentLeftHandPosition, X0
	008 Move X0, X19
	009 Move [X19+104], S0
	010 Move [X19+112], S1
	011 Move [X19+112], S2
	012 Call Player.CurrentRightHandPosition, X0
	013 Move X0, [X19+56]
	014 Move [X19+116], S0
	015 Move [X19+124], S1
	016 Move [X19+124], S2
	017 Compare X0, 0
	018 JumpIfEqual {36}
	019 Move S1, [X19+108]
	020 Move S2, [X19+112]
	021 Move V0, [X19+104]
	022 Move X1, X31
	023 Call Transform.set_position, X0, X1
	024 Move X0, [X19+64]
	025 Compare X0, 0
	026 JumpIfEqual {36}
	027 Move S1, [X19+120]
	028 Move S2, [X19+124]
	029 Move V0, [X19+116]
	030 Move X1, X31
	031 Call Transform.set_position, X0, X1
	032 NotImplemented "Instruction STRH not yet implemented."
	033 Move X30, [X31+16]
	034 Move X19, [X31+24]
	035 Return 
	036 Call 0x1C17F20

Method: System.Boolean IterativeCollisionSphereCast(UnityEngine.Vector3 startPosition, System.Single sphereRadius, UnityEngine.Vector3 movementVector, System.Single precision, out UnityEngine.Vector3 endPosition, System.Boolean singleHand, out UnityEngine.RaycastHit hitInfo)

Disassembly:
	0x01E1D8AC CBNZ W8, 0x1E1D8B4
	0x01E1D8B0 BL 0x1C16DFC
	0x01E1D8B4 FMUL S0, S8, S8
	0x01E1D8B8 FMUL S1, S9, S9
	0x01E1D8BC FADD S0, S0, S1
	0x01E1D8C0 FMUL S1, S13, S13
	0x01E1D8C4 FADD S0, S1, S0
	0x01E1D8C8 FSQRT S0, S0
	0x01E1D8CC FCMP S0, S14
	0x01E1D8D0 B.LE 0x1E1D8E4
	0x01E1D8D4 FDIV S8, S8, S0
	0x01E1D8D8 FDIV S9, S9, S0
	0x01E1D8DC FDIV S13, S13, S0
	0x01E1D8E0 B 0x1E1D910
	0x01E1D8E4 LDRB W8, [X22 + 0x783]
	0x01E1D8E8 CBNZ W8, 0x1E1D900
	0x01E1D8EC ADRP X0, 0x22D6000
	0x01E1D8F0 LDR X0, [X0 + 0x5A0]
	0x01E1D8F4 BL 0x1C16CF4
	0x01E1D8F8 MOVZ W8, 0x1
	0x01E1D8FC STRB W8, [X22 + 0x783]
	0x01E1D900 LDR X8, [X21]
	0x01E1D904 LDR X8, [X8 + 0xB8]
	0x01E1D908 LDP S8, S9, [X8]
	0x01E1D90C LDR V13, [X8 + 0x8]
	0x01E1D910 ADRP X22, 0x25BB000
	0x01E1D914 LDRB W8, [X22 + 0x786]
	0x01E1D918 CBNZ W8, 0x1E1D930
	0x01E1D91C ADRP X0, 0x22D6000
	0x01E1D920 LDR X0, [X0 + 0x5A0]
	0x01E1D924 BL 0x1C16CF4
	0x01E1D928 MOVZ W8, 0x1
	0x01E1D92C STRB W8, [X22 + 0x786]
	0x01E1D930 LDR X8, [X21]
	0x01E1D934 MOV V1.16B, V11.16B
	0x01E1D938 MOV V2.16B, V12.16B
	0x01E1D93C MOV V3.16B, V8.16B
	0x01E1D940 LDR X8, [X8 + 0xB8]
	0x01E1D944 MOV V4.16B, V9.16B
	0x01E1D948 MOV V5.16B, V13.16B
	0x01E1D94C MOV X0, X31
	0x01E1D950 LDR V0, [X8 + 0x20]
	0x01E1D954 LDR X9, [X8 + 0x18]
	0x01E1D958 STR S0, [X31 + 0x8]
	0x01E1D95C MOV V0.16B, V10.16B
	0x01E1D960 STR X9, [X31]
	0x01E1D964 BL 0x1DD4D78
	0x01E1D968 MOV X0, X19
	0x01E1D96C MOV X1, X31
	0x01E1D970 MOV V8.16B, V0.16B
	0x01E1D974 BL 0x3C32E90
	0x01E1D978 LDR X8, [X19 + 0x28]
	0x01E1D97C CBZ X8, 0x1E1DA40
	0x01E1D980 MOV X20, X0
	0x01E1D984 MOV X0, X8
	0x01E1D988 MOV X1, X31
	0x01E1D98C BL 0x3C32E90
	0x01E1D990 CBZ X0, 0x1E1DA40
	0x01E1D994 MOV X1, X31
	0x01E1D998 BL 0x3C3F58C
	0x01E1D99C LDRB W8, [X22 + 0x786]
	0x01E1D9A0 MOV V9.16B, V0.16B
	0x01E1D9A4 MOV V10.16B, V1.16B
	0x01E1D9A8 MOV V11.16B, V2.16B
	0x01E1D9AC CBNZ W8, 0x1E1D9C4
	0x01E1D9B0 ADRP X0, 0x22D6000
	0x01E1D9B4 LDR X0, [X0 + 0x5A0]
	0x01E1D9B8 BL 0x1C16CF4
	0x01E1D9BC MOVZ W8, 0x1
	0x01E1D9C0 STRB W8, [X22 + 0x786]
	0x01E1D9C4 CBZ X20, 0x1E1DA40
	0x01E1D9C8 LDR X8, [X21]
	0x01E1D9CC MOV X0, X20
	0x01E1D9D0 MOV V0.16B, V9.16B
	0x01E1D9D4 MOV V1.16B, V10.16B
	0x01E1D9D8 LDR X8, [X8 + 0xB8]
	0x01E1D9DC MOV V2.16B, V11.16B
	0x01E1D9E0 MOV V6.16B, V8.16B
	0x01E1D9E4 MOV X1, X31
	0x01E1D9E8 LDP S4, S5, [X8 + 0x1C]
	0x01E1D9EC LDR V3, [X8 + 0x18]
	0x01E1D9F0 BL 0x3C40680
	0x01E1D9F4 LDR X20, [X19 + 0x90]
	0x01E1D9F8 MOV X0, X19
	0x01E1D9FC MOV X1, X31
	0x01E1DA00 BL 0x3C32E90
	0x01E1DA04 CBZ X0, 0x1E1DA40
	0x01E1DA08 MOV X1, X31
	0x01E1DA0C BL 0x3C3DEB4
	0x01E1DA10 CBZ X20, 0x1E1DA40
	0x01E1DA14 MOV X0, X20
	0x01E1DA18 LDP X20, X19, [X31 + 0x70]
	0x01E1DA1C LDP X22, X21, [X31 + 0x60]
	0x01E1DA20 LDP X30, X23, [X31 + 0x50]
	0x01E1DA24 LDP D9, D8, [X31 + 0x40]
	0x01E1DA28 LDP D11, D10, [X31 + 0x30]
	0x01E1DA2C LDP D13, D12, [X31 + 0x20]
	0x01E1DA30 LDR V14, [X31 + 0x10]
	0x01E1DA34 MOV X1, X31
	0x01E1DA38 ADD X31, X31, 0x80
	0x01E1DA3C B 0x3C8F148
	0x01E1DA40 BL 0x1C16F20
	0x01E1DA44 STR D10, [X31 - 0x30]!
	0x01E1DA48 STP D9, D8, [X31 + 0x10]
	0x01E1DA4C STP X30, X19, [X31 + 0x20]
	0x01E1DA50 MOV V8.16B, V2.16B
	0x01E1DA54 MOV V9.16B, V1.16B
	0x01E1DA58 MOV V10.16B, V0.16B
	0x01E1DA5C MOV V0.16B, V3.16B
	0x01E1DA60 MOV V1.16B, V4.16B
	0x01E1DA64 MOV V2.16B, V5.16B
	0x01E1DA68 MOV X19, X0
	0x01E1DA6C BL 0x1E1D760
	0x01E1DA70 MOV X0, X19
	0x01E1DA74 MOV V1.16B, V9.16B
	0x01E1DA78 MOV V2.16B, V8.16B
	0x01E1DA7C LDP X30, X19, [X31 + 0x20]
	0x01E1DA80 LDP D9, D8, [X31 + 0x10]
	0x01E1DA84 MOV V0.16B, V10.16B
	0x01E1DA88 LDR V10, [X31], #0x30
	0x01E1DA8C B 0x1E1D5B0
	0x01E1DA90 STP X30, X23, [X31 - 0x30]!
	0x01E1DA94 STP X22, X21, [X31 + 0x10]
	0x01E1DA98 STP X20, X19, [X31 + 0x20]
	0x01E1DA9C ADRP X20, 0x25BB000
	0x01E1DAA0 LDRB W8, [X20 + 0xE23]
	0x01E1DAA4 MOV X19, X0
	0x01E1DAA8 TBNZ X8, 0x0, 0x1E1DACC
	0x01E1DAAC ADRP X0, 0x22DD000
	0x01E1DAB0 LDR X0, [X0 + 0x4C0]
	0x01E1DAB4 BL 0x1C16CF4
	0x01E1DAB8 ADRP X0, 0x22DD000
	0x01E1DABC LDR X0, [X0 + 0x4C8]
	0x01E1DAC0 BL 0x1C16CF4
	0x01E1DAC4 MOVZ W8, 0x1
	0x01E1DAC8 STRB W8, [X20 + 0xE23]
	0x01E1DACC ADRP X8, 0xFFFFFFFFFECD0000
	0x01E1DAD0 ADRP X9, 0xFFFFFFFFFECD0000
	0x01E1DAD4 LDR V0, [X8 + 0x3C0]
	0x01E1DAD8 LDR V1, [X9 + 0x818]
	0x01E1DADC MOVZ W8, 0xB852
	0x01E1DAE0 MOVK W8, 0x3F7E0000
	0x01E1DAE4 STR W8, [X19 + 0xB8]
	0x01E1DAE8 STUR D0, [X19 + 0x9C]
	0x01E1DAEC STR D1, [X19 + 0xB0]
	0x01E1DAF0 ADRP X21, 0x25BB000
	0x01E1DAF4 ADRP X23, 0x22DD000
	0x01E1DAF8 ADRP X20, 0x22DD000
	0x01E1DAFC LDRB W8, [X21 + 0x783]
	0x01E1DB00 LDR X23, [X23 + 0x4C8]
	0x01E1DB04 LDR X20, [X20 + 0x4C0]
	0x01E1DB08 CBNZ W8, 0x1E1DB20
	0x01E1DB0C ADRP X0, 0x22D6000
	0x01E1DB10 LDR X0, [X0 + 0x5A0]
	0x01E1DB14 BL 0x1C16CF4
	0x01E1DB18 MOVZ W8, 0x1
	0x01E1DB1C STRB W8, [X21 + 0x783]
	0x01E1DB20 ADRP X22, 0x22D6000
	0x01E1DB24 LDR X22, [X22 + 0x5A0]
	0x01E1DB28 LDR X8, [X22]
	0x01E1DB2C LDR X8, [X8 + 0xB8]
	0x01E1DB30 LDR V0, [X8]
	0x01E1DB34 LDR V1, [X8 + 0x8]
	0x01E1DB38 STR D0, [X19 + 0x118]
	0x01E1DB3C STR S1, [X19 + 0x120]
	0x01E1DB40 LDR X0, [X23]
	0x01E1DB44 BL 0x1C16F10
	0x01E1DB48 LDR X1, [X20]
	0x01E1DB4C MOV X20, X0
	0x01E1DB50 BL 0x3119E44
	0x01E1DB54 STR X20, [X19 + 0x1E0]
	0x01E1DB58 LDRB W8, [X21 + 0x783]
	0x01E1DB5C CBNZ W8, 0x1E1DB74
	0x01E1DB60 ADRP X0, 0x22D6000
	0x01E1DB64 LDR X0, [X0 + 0x5A0]
	0x01E1DB68 BL 0x1C16CF4
	0x01E1DB6C MOVZ W8, 0x1
	0x01E1DB70 STRB W8, [X21 + 0x783]
	0x01E1DB74 LDR X8, [X22]
	0x01E1DB78 MOV X0, X19
	0x01E1DB7C LDP X22, X21, [X31 + 0x10]
	0x01E1DB80 MOV X1, X31
	0x01E1DB84 LDR X8, [X8 + 0xB8]
	0x01E1DB88 LDR V0, [X8]
	0x01E1DB8C LDR V1, [X8 + 0x8]
	0x01E1DB90 ADD X8, X19, 0x1EC
	0x01E1DB94 LDP X20, X19, [X31 + 0x20]
	0x01E1DB98 STR D0, [X8]
	0x01E1DB9C STR S1, [X8 + 0x8]
	0x01E1DBA0 LDP X30, X23, [X31], #0x30
	0x01E1DBA4 B 0x3C36C30
	0x01E1DBA8 MOV X1, X31
	0x01E1DBAC B 0x3C36C30
	0x01E1DBB0 STR X30, [X31 - 0x10]!
	0x01E1DBB4 LDR X8, [X0 + 0x20]
	0x01E1DBB8 CBZ X8, 0x1E1DBDC
	0x01E1DBBC LDR W10, [X8 + 0x18]
	0x01E1DBC0 SUB W9, W1, 0x1
	0x01E1DBC4 CMP W9, W10
	0x01E1DBC8 B.CS 0x1E1DBE0
	0x01E1DBCC ADD X8, X8, W9, 0x3, SXTW
	0x01E1DBD0 LDR X0, [X8 + 0x20]
	0x01E1DBD4 LDR X30, [X31], #0x10
	0x01E1DBD8 RET
	0x01E1DBDC BL 0x1C16F20
	0x01E1DBE0 BL 0x1C16F28
	0x01E1DBE4 MOV X1, X31
	0x01E1DBE8 B 0x3C36C30
	0x01E1DBEC STP X29, X30, [X31 - 0x60]!
	0x01E1DBF0 STP X28, X27, [X31 + 0x10]
	0x01E1DBF4 STP X26, X25, [X31 + 0x20]
	0x01E1DBF8 STP X24, X23, [X31 + 0x30]
	0x01E1DBFC STP X22, X21, [X31 + 0x40]
	0x01E1DC00 STP X20, X19, [X31 + 0x50]
	0x01E1DC04 ADRP X20, 0x25BB000
	0x01E1DC08 ADRP X21, 0x22DD000
	0x01E1DC0C ADRP X19, 0x22DD000
	0x01E1DC10 LDRB W8, [X20 + 0xE24]
	0x01E1DC14 LDR X21, [X21 + 0x4D0]
	0x01E1DC18 LDR X19, [X19 + 0x4D8]
	0x01E1DC1C TBNZ X8, 0x0, 0x1E1DE14
	0x01E1DC20 ADRP X0, 0x22DD000
	0x01E1DC24 LDR X0, [X0 + 0x4E0]
	0x01E1DC28 BL 0x1C16CF4
	0x01E1DC2C ADRP X0, 0x22DD000
	0x01E1DC30 LDR X0, [X0 + 0x4E8]
	0x01E1DC34 BL 0x1C16CF4
	0x01E1DC38 ADRP X0, 0x22DD000
	0x01E1DC3C LDR X0, [X0 + 0x4F0]
	0x01E1DC40 BL 0x1C16CF4
	0x01E1DC44 ADRP X0, 0x22DD000
	0x01E1DC48 LDR X0, [X0 + 0x4F8]
	0x01E1DC4C BL 0x1C16CF4
	0x01E1DC50 ADRP X0, 0x22DD000
	0x01E1DC54 LDR X0, [X0 + 0x500]
	0x01E1DC58 BL 0x1C16CF4
	0x01E1DC5C ADRP X0, 0x22DD000
	0x01E1DC60 LDR X0, [X0 + 0x508]
	0x01E1DC64 BL 0x1C16CF4
	0x01E1DC68 ADRP X0, 0x22DD000
	0x01E1DC6C LDR X0, [X0 + 0x510]
	0x01E1DC70 BL 0x1C16CF4
	0x01E1DC74 ADRP X0, 0x22DD000
	0x01E1DC78 LDR X0, [X0 + 0x518]
	0x01E1DC7C BL 0x1C16CF4
	0x01E1DC80 ADRP X0, 0x22DD000
	0x01E1DC84 LDR X0, [X0 + 0x520]
	0x01E1DC88 BL 0x1C16CF4
	0x01E1DC8C ADRP X0, 0x22DD000
	0x01E1DC90 LDR X0, [X0 + 0x528]
	0x01E1DC94 BL 0x1C16CF4
	0x01E1DC98 ADRP X0, 0x22DD000
	0x01E1DC9C LDR X0, [X0 + 0x530]
	0x01E1DCA0 BL 0x1C16CF4
	0x01E1DCA4 ADRP X0, 0x22DD000
	0x01E1DCA8 LDR X0, [X0 + 0x4D8]
	0x01E1DCAC BL 0x1C16CF4
	0x01E1DCB0 ADRP X0, 0x22DD000
	0x01E1DCB4 LDR X0, [X0 + 0x538]
	0x01E1DCB8 BL 0x1C16CF4
	0x01E1DCBC ADRP X0, 0x22DD000
	0x01E1DCC0 LDR X0, [X0 + 0x4D0]
	0x01E1DCC4 BL 0x1C16CF4
	0x01E1DCC8 ADRP X0, 0x22DD000
	0x01E1DCCC LDR X0, [X0 + 0x540]
	0x01E1DCD0 BL 0x1C16CF4
	0x01E1DCD4 ADRP X0, 0x22DD000
	0x01E1DCD8 LDR X0, [X0 + 0x548]
	0x01E1DCDC BL 0x1C16CF4
	0x01E1DCE0 ADRP X0, 0x22DD000
	0x01E1DCE4 LDR X0, [X0 + 0x550]
	0x01E1DCE8 BL 0x1C16CF4
	0x01E1DCEC ADRP X0, 0x22DD000
	0x01E1DCF0 LDR X0, [X0 + 0x558]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X25
	012 Move [X31+112], X24
	013 Move [X31+120], X23
	014 Move [X31+128], X22
	015 Move [X31+136], X21
	016 Move [X31+144], X20
	017 Move [X31+152], X19
	018 Move X23, 0x25BC000
	019 Move W8, [X23+3616]
	020 Move X20, X3
	021 Move W22, W2
	022 Move X19, X1
	023 Move V8, V7
	024 Move V13, V6
	025 Move V14, V5
	026 Move V15, V4
	027 Move V12, V3
	028 Move V9, V2
	029 Move V10, V1
	030 Move V11, V0
	031 Move X21, X0
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {44}
	036 Move X0, 0x22DE000
	037 Move X0, [X0+1200]
	038 Call 0x1C17CF4
	039 Move X0, 0x22D7000
	040 Move X0, [X0+1432]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X23+3616], W8
	044 Move [X31+24], S12
	045 Multiply S12, S12, S8
	046 Move X0, X21
	047 Move V0, V11
	048 Move V1, V10
	049 Move V2, V9
	050 Move V3, V12
	051 Move V4, V15
	052 Move V5, V14
	053 Move V6, V13
	054 Move V7, V8
	055 Move X1, X19
	056 Move X2, X20
	057 Call Player.CollisionsSphereCast, X0, X1, V0, X2, V1, X3, X4
	058 Move [X31+28], S8
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {80}
	063 Move S12, [X19]
	064 Move S1, [X19+4]
	065 Move V0, [X19+8]
	066 Move X0, X20
	067 Move X1, X31
	068 Move [X31+16], S0
	069 Move [X31+24], S1
	070 Call RaycastHit.get_collider, X0
	071 Compare X0, 0
	072 JumpIfEqual {323}
	073 Move X8, 0x22DE000
	074 Move X8, [X8+1200]
	075 Move X1, [X8]
	076 Call 0x21A4894, X0
	077 Compare X0, 0
	078 JumpIfEqual {179}
	079 Move X23, [X0+32]
	080 Move X22, 0x25BC000
	081 Move W8, [X22+1925]
	082 Compare W8, 0
	083 JumpIfNotEqual {89}
	084 Move X0, 0x22D7000
	085 Move X0, [X0+1448]
	086 Call 0x1C17CF4
	087 Move W8, 1
	088 Move [X22+1925], W8
	089 Move X24, 0x22D7000
	090 Move X24, [X24+1448]
	091 Move X0, [X24]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X8, -20127744
	097 Multiply S0, S15, S15
	098 Multiply S1, S14, S14
	099 Move V3, [X8+380]
	100 Move X22, 0x22D7000
	101 Multiply S2, S13, S13
	102 Add S0, S0, S1
	103 Move X22, [X22+1440]
	104 Add S0, S2, S0
	105 NotImplemented "Instruction FSQRT not yet implemented."
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 Move X23, 0x25BC000
	108 NotImplemented "Instruction FDIV not yet implemented."
	109 NotImplemented "Instruction FDIV not yet implemented."
	110 NotImplemented "Instruction FDIV not yet implemented."
	111 Move W8, [X23+1923]
	112 Compare W8, 0
	113 JumpIfNotEqual {119}
	114 Move X0, 0x22D7000
	115 Move X0, [X0+1440]
	116 Call 0x1C17CF4
	117 Move W8, 1
	118 Move [X23+1923], W8
	119 Move X8, [X22]
	120 Move X8, [X8+184]
	121 Move S15, [X8]
	122 Move S14, [X8+4]
	123 Move V13, [X8+8]
	124 Move X25, 0x25BC000
	125 Move W8, [X25+1924]
	126 Compare W8, 0
	127 JumpIfNotEqual {133}
	128 Move X0, 0x22D7000
	129 Move X0, [X0+1448]
	130 Call 0x1C17CF4
	131 Move W8, 1
	132 Move [X25+1924], W8
	133 Move X0, [X24]
	134 Move W8, [X0+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {138}
	137 Call 0x1C17DFC
	138 Move X8, -20131840
	139 Move V0, [X8+3928]
	140 Move X9, -20127744
	141 Move V1, [X9+828]
	142 Move X0, X21
	143 Multiply S0, S12, S0
	144 Add S0, S0, S8
	145 Multiply S4, S0, S15
	146 Multiply S5, S0, S14
	147 Multiply S6, S0, S13
	148 Move V0, [X31+28]
	149 Multiply S3, S12, S1
	150 Move V2, V9
	151 Move X1, X19
	152 Multiply S7, S0, S1
	153 Move V0, V11
	154 Move V1, V10
	155 Move X2, X20
	156 Call Player.CollisionsSphereCast, X0, X1, V0, X2, V1, X3, X4
	157 Move TEMP, X0
	158 And TEMP, TEMP, 1
	159 Compare TEMP, 1
	160 JumpIfNotEqual {164}
	161 Move [X19], S11
	162 Move [X19+8], S10
	163 Move [X19+8], S9
	164 Move W8, [X23+1923]
	165 Compare W8, 0
	166 JumpIfNotEqual {172}
	167 Move X0, 0x22D7000
	168 Move X0, [X0+1440]
	169 Call 0x1C17CF4
	170 Move W8, 1
	171 Move [X23+1923], W8
	172 Move X8, [X22]
	173 Move W0, W31
	174 Move X8, [X8+184]
	175 Move V0, [X8]
	176 Move V1, [X8+8]
	177 Move [X19], D0
	178 Move [X19+8], S1
	179 Move X23, X31
	180 Move X8, 0x22D7000
	181 Move X8, [X8+1432]
	182 Move X0, [X8]
	183 Move W8, [X0+224]
	184 Compare W8, 0
	185 JumpIfNotEqual {187}
	186 Call 0x1C17DFC
	187 Move X0, X23
	188 Move X1, X31
	189 Move X2, X31
	190 Call Object.op_Inequality, X0, X1
	191 Move TEMP, X0
	192 And TEMP, TEMP, 1
	193 Compare TEMP, 1
	194 JumpIfNotEqual {200}
	195 Compare X23, 0
	196 JumpIfEqual {323}
	197 Move V0, [X23+24]
	198 Move S1, 1
	199 Subtract S8, S1, S0
	200 Move TEMP, X22
	201 And TEMP, TEMP, 1
	202 Compare TEMP, 1
	203 JumpIfNotEqual {206}
	204 Move X8, -20127744
	205 Move V8, [X8+1040]
	206 Move V8, [X21+180]
	207 Move X0, X20
	208 Move X1, X31
	209 Add S15, S11, S15
	210 Add S14, S10, S14
	211 Add S13, S9, S13
	212 Call RaycastHit.get_normal, X0
	213 Move X22, 0x25BC000
	214 Move W8, [X22+3641]
	215 Move V11, V0
	216 Move V9, V1
	217 Move V10, V2
	218 Compare W8, 0
	219 JumpIfNotEqual {225}
	220 Move X0, 0x22DE000
	221 Move X0, [X0+1208]
	222 Call 0x1C17CF4
	223 Move W8, 1
	224 Move [X22+3641], W8
	225 Move X8, 0x22DE000
	226 Move X8, [X8+1208]
	227 Move V1, [X31+20]
	228 Multiply S2, S9, S9
	229 Subtract S0, S15, S12
	230 Move X8, [X8]
	231 Subtract S3, S14, S1
	232 Multiply S1, S11, S11
	233 Add S1, S1, S2
	234 Move X8, [X8+184]
	235 Multiply S2, S10, S10
	236 Add S1, S2, S1
	237 Move V2, [X31+16]
	238 Move V4, [X8]
	239 Move [X31+8], S13
	240 Move [X31+16], S12
	241 NotImplemented "Instruction FCMP not yet implemented."
	242 Subtract S4, S13, S2
	243 Multiply S2, S0, S11
	244 Multiply S5, S3, S9
	245 Multiply S6, S4, S10
	246 Add S2, S2, S5
	247 Add S2, S6, S2
	248 Multiply S5, S11, S2
	249 Multiply S6, S9, S2
	250 Multiply S2, S10, S2
	251 NotImplemented "Instruction FDIV not yet implemented."
	252 NotImplemented "Instruction FDIV not yet implemented."
	253 NotImplemented "Instruction FDIV not yet implemented."
	254 Subtract S0, S0, S5
	255 Subtract S3, S3, S6
	256 Subtract S4, S4, S1
	257 Multiply S9, S8, S0
	258 Multiply S12, S8, S3
	259 Multiply S11, S8, S4
	260 Move S13, [X31+24]
	261 Move S8, [X31+28]
	262 Move S0, [X19]
	263 Move S1, [X19+4]
	264 Move V2, [X19+8]
	265 Move X0, X21
	266 Multiply S10, S8, S8
	267 Move V3, V13
	268 Move V4, V9
	269 Move V5, V12
	270 Move V6, V11
	271 Move V7, V10
	272 Move X1, X19
	273 Move X2, X20
	274 Call Player.CollisionsSphereCast, X0, X1, V0, X2, V1, X3, X4
	275 Move TEMP, X0
	276 And TEMP, TEMP, 1
	277 Compare TEMP, 1
	278 JumpIfEqual {304}
	279 Move V5, V14
	280 Move S14, [X31+12]
	281 Move S3, [X31+16]
	282 Multiply S7, S10, S8
	283 Move X0, X21
	284 Move X1, X19
	285 Add S0, S14, S9
	286 Move V9, [X31+20]
	287 Add S2, S3, S11
	288 Move V11, V3
	289 Move V3, [X31+8]
	290 Add S1, S9, S12
	291 Subtract S4, S15, S0
	292 Subtract S5, S5, S1
	293 Subtract S6, S3, S2
	294 Move V3, V13
	295 Move X2, X20
	296 Call Player.CollisionsSphereCast, X0, X1, V0, X2, V1, X3, X4
	297 Move TEMP, X0
	298 And TEMP, TEMP, 1
	299 Compare TEMP, 1
	300 JumpIfEqual {304}
	301 Move [X19], S14
	302 Move [X19+8], S9
	303 Move [X19+8], S11
	304 Move W0, 1
	305 Move X20, [X31+144]
	306 Move X19, [X31+152]
	307 Move X22, [X31+128]
	308 Move X21, [X31+136]
	309 Move X24, [X31+112]
	310 Move X23, [X31+120]
	311 Move X30, [X31+96]
	312 Move X25, [X31+104]
	313 Move D9, [X31+80]
	314 Move D8, [X31+88]
	315 Move D11, [X31+64]
	316 Move D10, [X31+72]
	317 Move D13, [X31+48]
	318 Move D12, [X31+56]
	319 Move D15, [X31+32]
	320 Move D14, [X31+40]
	321 Add X31, X31, 160
	322 Return X0
	323 Call 0x1C17F20

Method: System.Boolean CollisionsSphereCast(UnityEngine.Vector3 startPosition, System.Single sphereRadius, UnityEngine.Vector3 movementVector, System.Single precision, out UnityEngine.Vector3 finalPosition, out UnityEngine.RaycastHit hitInfo)

Disassembly:
	0x01E1DE90 LDR X2, [X25]
	0x01E1DE94 LDR X3, [X23]
	0x01E1DE98 MOVZ W1, 0x2
	0x01E1DE9C MOV X0, X19
	0x01E1DEA0 BL 0x2A44E18
	0x01E1DEA4 LDR X2, [X25]
	0x01E1DEA8 LDR X3, [X23]
	0x01E1DEAC MOVZ W1, 0x3
	0x01E1DEB0 MOV X0, X19
	0x01E1DEB4 BL 0x2A44E18
	0x01E1DEB8 LDR X2, [X26]
	0x01E1DEBC LDR X3, [X23]
	0x01E1DEC0 MOVZ W1, 0x4
	0x01E1DEC4 MOV X0, X19
	0x01E1DEC8 BL 0x2A44E18
	0x01E1DECC LDR X2, [X27]
	0x01E1DED0 LDR X3, [X23]
	0x01E1DED4 MOVZ W1, 0x5
	0x01E1DED8 MOV X0, X19
	0x01E1DEDC BL 0x2A44E18
	0x01E1DEE0 LDR X2, [X28]
	0x01E1DEE4 LDR X3, [X23]
	0x01E1DEE8 MOVZ W1, 0x6
	0x01E1DEEC MOV X0, X19
	0x01E1DEF0 BL 0x2A44E18
	0x01E1DEF4 LDR X2, [X24]
	0x01E1DEF8 LDR X3, [X23]
	0x01E1DEFC MOVZ W1, 0x7
	0x01E1DF00 MOV X0, X19
	0x01E1DF04 BL 0x2A44E18
	0x01E1DF08 LDR X3, [X23]
	0x01E1DF0C MOVZ W1, 0x8
	0x01E1DF10 MOV X0, X19
	0x01E1DF14 MOV X2, X31
	0x01E1DF18 BL 0x2A44E18
	0x01E1DF1C LDR X8, [X21]
	0x01E1DF20 LDR X8, [X8 + 0xB8]
	0x01E1DF24 STR X19, [X8]
	0x01E1DF28 LDR X0, [X22]
	0x01E1DF2C BL 0x1C16F10
	0x01E1DF30 LDR X1, [X20]
	0x01E1DF34 MOV X19, X0
	0x01E1DF38 BL 0x2A41638
	0x01E1DF3C CBZ X19, 0x1E1E714
	0x01E1DF40 ADRP X24, 0x22DD000
	0x01E1DF44 LDR X24, [X24 + 0x510]
	0x01E1DF48 ADRP X23, 0x22DD000
	0x01E1DF4C ADRP X20, 0x22DD000
	0x01E1DF50 ADRP X22, 0x22DD000
	0x01E1DF54 LDR X3, [X24]
	0x01E1DF58 LDR X23, [X23 + 0x548]
	0x01E1DF5C LDR X20, [X20 + 0x520]
	0x01E1DF60 LDR X22, [X22 + 0x4E8]
	0x01E1DF64 MOVZ W1, 0x1
	0x01E1DF68 MOVZ W2, 0x4
	0x01E1DF6C MOV X0, X19
	0x01E1DF70 BL 0x2A41EE0
	0x01E1DF74 LDR X3, [X24]
	0x01E1DF78 MOVZ W1, 0x2
	0x01E1DF7C MOVZ W2, 0x5
	0x01E1DF80 MOV X0, X19
	0x01E1DF84 BL 0x2A41EE0
	0x01E1DF88 LDR X3, [X24]
	0x01E1DF8C MOVZ W1, 0x3
	0x01E1DF90 MOVZ W2, 0x5
	0x01E1DF94 MOV X0, X19
	0x01E1DF98 BL 0x2A41EE0
	0x01E1DF9C LDR X3, [X24]
	0x01E1DFA0 MOVZ W1, 0x4
	0x01E1DFA4 MOVZ W2, 0x6
	0x01E1DFA8 MOV X0, X19
	0x01E1DFAC BL 0x2A41EE0
	0x01E1DFB0 LDR X3, [X24]
	0x01E1DFB4 MOVZ W1, 0x5
	0x01E1DFB8 MOVZ W2, 0x7
	0x01E1DFBC MOV X0, X19
	0x01E1DFC0 BL 0x2A41EE0
	0x01E1DFC4 LDR X3, [X24]
	0x01E1DFC8 MOVZ W1, 0x6
	0x01E1DFCC MOVZ W2, 0x8
	0x01E1DFD0 MOV X0, X19
	0x01E1DFD4 BL 0x2A41EE0
	0x01E1DFD8 LDR X3, [X24]
	0x01E1DFDC MOVZ W1, 0x7
	0x01E1DFE0 MOVZ W2, 0x9
	0x01E1DFE4 MOV X0, X19
	0x01E1DFE8 BL 0x2A41EE0
	0x01E1DFEC LDR X3, [X24]
	0x01E1DFF0 MOVZ W1, 0x8
	0x01E1DFF4 MOVZ W2, 0xA
	0x01E1DFF8 MOV X0, X19
	0x01E1DFFC BL 0x2A41EE0
	0x01E1E000 LDR X8, [X21]
	0x01E1E004 LDR X8, [X8 + 0xB8]
	0x01E1E008 STR X19, [X8 + 0x8]
	0x01E1E00C LDR X0, [X23]
	0x01E1E010 BL 0x1C16F10
	0x01E1E014 LDR X1, [X20]
	0x01E1E018 MOV X19, X0
	0x01E1E01C BL 0x2A44560
	0x01E1E020 LDR X0, [X22]
	0x01E1E024 MOVZ W1, 0x1
	0x01E1E028 BL 0x1C16D6C
	0x01E1E02C CBZ X0, 0x1E1E714
	0x01E1E030 LDR W8, [X0 + 0x18]
	0x01E1E034 MOV X2, X0
	0x01E1E038 CBZ W8, 0x1E1E718
	0x01E1E03C MOVZ W8, 0x1
	0x01E1E040 STR W8, [X2 + 0x20]
	0x01E1E044 CBZ X19, 0x1E1E714
	0x01E1E048 ADRP X23, 0x22DC000
	0x01E1E04C LDR X23, [X23 + 0x500]
	0x01E1E050 MOVZ W1, 0x1
	0x01E1E054 MOV X0, X19
	0x01E1E058 LDR X3, [X23]
	0x01E1E05C BL 0x2A44E18
	0x01E1E060 LDR X0, [X22]
	0x01E1E064 MOV W1, W31
	0x01E1E068 BL 0x1C16D6C
	0x01E1E06C LDR X3, [X23]
	0x01E1E070 MOV X2, X0
	0x01E1E074 MOVZ W1, 0x2
	0x01E1E078 MOV X0, X19
	0x01E1E07C BL 0x2A44E18
	0x01E1E080 LDR X0, [X22]
	0x01E1E084 MOV W1, W31
	0x01E1E088 BL 0x1C16D6C
	0x01E1E08C LDR X3, [X23]
	0x01E1E090 MOV X2, X0
	0x01E1E094 MOVZ W1, 0x3
	0x01E1E098 MOV X0, X19
	0x01E1E09C BL 0x2A44E18
	0x01E1E0A0 LDR X0, [X22]
	0x01E1E0A4 MOVZ W1, 0x1
	0x01E1E0A8 BL 0x1C16D6C
	0x01E1E0AC CBZ X0, 0x1E1E714
	0x01E1E0B0 LDR W8, [X0 + 0x18]
	0x01E1E0B4 MOV X2, X0
	0x01E1E0B8 CBZ W8, 0x1E1E718
	0x01E1E0BC MOVZ W8, 0x2
	0x01E1E0C0 STR W8, [X2 + 0x20]
	0x01E1E0C4 LDR X3, [X23]
	0x01E1E0C8 ADRP X20, 0x22DC000
	0x01E1E0CC ADRP X24, 0x22DC000
	0x01E1E0D0 LDR X20, [X20 + 0x568]
	0x01E1E0D4 LDR X24, [X24 + 0x590]
	0x01E1E0D8 MOVZ W1, 0x4
	0x01E1E0DC MOV X0, X19
	0x01E1E0E0 BL 0x2A44E18
	0x01E1E0E4 LDR X0, [X22]
	0x01E1E0E8 MOVZ W1, 0xC
	0x01E1E0EC BL 0x1C16D6C
	0x01E1E0F0 LDR X1, [X20]
	0x01E1E0F4 MOV X2, X31
	0x01E1E0F8 MOV X20, X0
	0x01E1E0FC BL 0x32C5BD8
	0x01E1E100 LDR X3, [X23]
	0x01E1E104 MOVZ W1, 0x5
	0x01E1E108 MOV X0, X19
	0x01E1E10C MOV X2, X20
	0x01E1E110 BL 0x2A44E18
	0x01E1E114 LDR X0, [X22]
	0x01E1E118 MOVZ W1, 0xC
	0x01E1E11C BL 0x1C16D6C
	0x01E1E120 LDR X1, [X24]
	0x01E1E124 MOV X2, X31
	0x01E1E128 MOV X20, X0
	0x01E1E12C BL 0x32C5BD8
	0x01E1E130 LDR X3, [X23]
	0x01E1E134 MOVZ W1, 0x6
	0x01E1E138 MOV X0, X19
	0x01E1E13C MOV X2, X20
	0x01E1E140 BL 0x2A44E18
	0x01E1E144 LDR X0, [X22]
	0x01E1E148 MOVZ W1, 0x2
	0x01E1E14C BL 0x1C16D6C
	0x01E1E150 CBZ X0, 0x1E1E714
	0x01E1E154 LDR W8, [X0 + 0x18]
	0x01E1E158 MOV X2, X0
	0x01E1E15C CBZ W8, 0x1E1E718
	0x01E1E160 MOVZ W9, 0x3
	0x01E1E164 CMP W8, 0x1
	0x01E1E168 STR W9, [X2 + 0x20]
	0x01E1E16C B.EQ 0x1E1E718
	0x01E1E170 ADRP X20, 0x22DC000
	0x01E1E174 MOVZ W8, 0x4
	0x01E1E178 LDR X20, [X20 + 0x550]
	0x01E1E17C STR W8, [X2 + 0x24]
	0x01E1E180 LDR X3, [X23]
	0x01E1E184 ADRP X24, 0x22DC000
	0x01E1E188 ADRP X25, 0x22DC000
	0x01E1E18C ADRP X26, 0x22DC000
	0x01E1E190 LDR X24, [X24 + 0x538]
	0x01E1E194 LDR X25, [X25 + 0x4E0]
	0x01E1E198 LDR X26, [X26 + 0x5B8]
	0x01E1E19C MOVZ W1, 0x7
	0x01E1E1A0 MOV X0, X19
	0x01E1E1A4 BL 0x2A44E18
	0x01E1E1A8 LDR X0, [X22]
	0x01E1E1AC MOV W1, W31
	0x01E1E1B0 BL 0x1C16D6C
	0x01E1E1B4 LDR X3, [X23]
	0x01E1E1B8 MOV X2, X0
	0x01E1E1BC MOVZ W1, 0x8
	0x01E1E1C0 MOV X0, X19
	0x01E1E1C4 BL 0x2A44E18
	0x01E1E1C8 LDR X8, [X21]
	0x01E1E1CC LDR X8, [X8 + 0xB8]
	0x01E1E1D0 STR X19, [X8 + 0x10]
	0x01E1E1D4 LDR X0, [X20]
	0x01E1E1D8 BL 0x1C16F10
	0x01E1E1DC LDR X1, [X24]
	0x01E1E1E0 MOV X19, X0
	0x01E1E1E4 BL 0x2A44560
	0x01E1E1E8 LDR X0, [X25]
	0x01E1E1EC MOVZ W1, 0x9
	0x01E1E1F0 BL 0x1C16D6C
	0x01E1E1F4 LDR X1, [X26]
	0x01E1E1F8 MOV X2, X31
	0x01E1E1FC MOV X20, X0
	0x01E1E200 BL 0x32C5BD8
	0x01E1E204 CBZ X19, 0x1E1E714
	0x01E1E208 ADRP X27, 0x22DC000
	0x01E1E20C LDR X27, [X27 + 0x4F8]
	0x01E1E210 ADRP X28, 0x22DC000
	0x01E1E214 ADRP X23, 0x22DC000
	0x01E1E218 LDR X28, [X28 + 0x5D0]
	0x01E1E21C LDR X23, [X23 + 0x540]
	0x01E1E220 LDR X3, [X27]
	0x01E1E224 ADRP X29, 0x22DC000
	0x01E1E228 ADRP X22, 0x22D6000
	0x01E1E22C ADRP X26, 0x22DC000
	0x01E1E230 LDR X29, [X29 + 0x528]
	0x01E1E234 LDR X22, [X22 + 0xE58]
	0x01E1E238 LDR X26, [X26 + 0x578]
	0x01E1E23C MOVZ W1, 0x1
	0x01E1E240 MOV X0, X19
	0x01E1E244 MOV X2, X20
	0x01E1E248 BL 0x2A44E18
	0x01E1E24C LDR X0, [X25]
	0x01E1E250 MOVZ W1, 0x3
	0x01E1E254 BL 0x1C16D6C
	0x01E1E258 LDR X1, [X28]
	0x01E1E25C MOV X2, X31
	0x01E1E260 MOV X20, X0
	0x01E1E264 BL 0x32C5BD8
	0x01E1E268 LDR X3, [X27]
	0x01E1E26C MOVZ W1, 0x4
	0x01E1E270 MOV X0, X19
	0x01E1E274 MOV X2, X20
	0x01E1E278 BL 0x2A44E18
	0x01E1E27C LDR X0, [X25]
	0x01E1E280 MOV W1, W31
	0x01E1E284 BL 0x1C16D6C
	0x01E1E288 LDR X3, [X27]
	0x01E1E28C MOV X2, X0
	0x01E1E290 MOVZ W1, 0x5
	0x01E1E294 MOV X0, X19
	0x01E1E298 BL 0x2A44E18
	0x01E1E29C LDR X0, [X25]
	0x01E1E2A0 MOV W1, W31
	0x01E1E2A4 BL 0x1C16D6C
	0x01E1E2A8 LDR X3, [X27]
	0x01E1E2AC MOV X2, X0
	0x01E1E2B0 MOVZ W1, 0x6
	0x01E1E2B4 MOV X0, X19
	0x01E1E2B8 BL 0x2A44E18
	0x01E1E2BC LDR X0, [X25]
	0x01E1E2C0 MOV W1, W31
	0x01E1E2C4 BL 0x1C16D6C
	0x01E1E2C8 LDR X3, [X27]
	0x01E1E2CC MOV X2, X0
	0x01E1E2D0 MOVZ W1, 0x2
	0x01E1E2D4 MOV X0, X19
	0x01E1E2D8 BL 0x2A44E18
	0x01E1E2DC LDR X0, [X25]
	0x01E1E2E0 MOV W1, W31
	0x01E1E2E4 BL 0x1C16D6C
	0x01E1E2E8 LDR X3, [X27]
	0x01E1E2EC MOV X2, X0
	0x01E1E2F0 MOVZ W1, 0x3
	0x01E1E2F4 MOV X0, X19
	0x01E1E2F8 BL 0x2A44E18
	0x01E1E2FC LDR X0, [X25]
	0x01E1E300 MOV W1, W31
	0x01E1E304 BL 0x1C16D6C
	0x01E1E308 LDR X3, [X27]
	0x01E1E30C MOV X2, X0
	0x01E1E310 MOVZ W1, 0x7
	0x01E1E314 MOV X0, X19
	0x01E1E318 BL 0x2A44E18
	0x01E1E31C LDR X0, [X25]
	0x01E1E320 MOV W1, W31
	0x01E1E324 BL 0x1C16D6C
	0x01E1E328 LDR X3, [X27]
	0x01E1E32C MOV X2, X0
	0x01E1E330 MOVZ W1, 0x8
	0x01E1E334 MOV X0, X19
	0x01E1E338 BL 0x2A44E18
	0x01E1E33C LDR X8, [X21]
	0x01E1E340 MOV X24, X23
	0x01E1E344 LDR X8, [X8 + 0xB8]
	0x01E1E348 STR X19, [X8 + 0x18]
	0x01E1E34C LDR X0, [X23]
	0x01E1E350 BL 0x1C16F10
	0x01E1E354 LDR X1, [X29]
	0x01E1E358 MOV X19, X0
	0x01E1E35C BL 0x2A44560
	0x01E1E360 LDR X0, [X22]
	0x01E1E364 MOVZ W1, 0x13F
	0x01E1E368 BL 0x1C16D6C
	0x01E1E36C LDR X1, [X26]
	0x01E1E370 MOV X2, X31
	0x01E1E374 MOV X20, X0
	0x01E1E378 BL 0x32C5BD8
	0x01E1E37C CBZ X19, 0x1E1E714
	0x01E1E380 ADRP X25, 0x22DC000
	0x01E1E384 LDR X25, [X25 + 0x518]
	0x01E1E388 MOV X23, X21
	0x01E1E38C ADRP X21, 0x22DC000
	0x01E1E390 ADRP X29, 0x22DC000
	0x01E1E394 LDR X21, [X21 + 0x598]
	0x01E1E398 LDR X29, [X29 + 0x5A0]
	0x01E1E39C LDR X3, [X25]
	0x01E1E3A0 ADRP X28, 0x22DC000
	0x01E1E3A4 ADRP X27, 0x22DC000
	0x01E1E3A8 ADRP X26, 0x22DC000
	0x01E1E3AC LDR X28, [X28 + 0x5D8]
	0x01E1E3B0 LDR X27, [X27 + 0x5C0]
	0x01E1E3B4 LDR X26, [X26 + 0x560]
	0x01E1E3B8 MOVZ W1, 0x1
	0x01E1E3BC MOV X0, X19
	0x01E1E3C0 MOV X2, X20
	0x01E1E3C4 BL 0x2A44E18
	0x01E1E3C8 LDR X0, [X22]
	0x01E1E3CC MOV W1, W31
	0x01E1E3D0 BL 0x1C16D6C

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+112], D15
	003 Move [X31+120], D14
	004 Move [X31+128], D13
	005 Move [X31+136], D12
	006 Move [X31+144], D11
	007 Move [X31+152], D10
	008 Move [X31+160], D9
	009 Move [X31+168], D8
	010 Move [X31+176], X30
	011 Move [X31+184], X25
	012 Move [X31+192], X24
	013 Move [X31+200], X23
	014 Move [X31+208], X22
	015 Move [X31+216], X21
	016 Move [X31+224], X20
	017 Move [X31+232], X19
	018 Move X22, 0x25BC000
	019 Move W8, [X22+3617]
	020 Move X20, X2
	021 Move X19, X1
	022 Move V9, V7
	023 Move V11, V6
	024 Move V12, V5
	025 Move V13, V4
	026 Move V10, V3
	027 Move V8, V2
	028 Move X21, X0
	029 Move [X31+48], D1
	030 Move [X31+32], D0
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {40}
	035 Move X0, 0x22D7000
	036 Move X0, [X0+1528]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X22+3617], W8
	040 Move X25, 0x25BC000
	041 Move W8, [X25+1924]
	042 NotImplemented "Instruction MOVI not yet implemented."
	043 Move [X31+92], V0
	044 Move [X31+64], V0
	045 Move [X31+72], V0
	046 Compare W8, 0
	047 JumpIfNotEqual {53}
	048 Move X0, 0x22D7000
	049 Move X0, [X0+1448]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X25+1924], W8
	053 Move X24, 0x22D7000
	054 Move X24, [X24+1448]
	055 Move X23, 0x22D7000
	056 Move X0, [X24]
	057 Move W8, [X0+224]
	058 Move X23, [X23+1528]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Multiply S0, S13, S13
	063 Multiply S1, S12, S12
	064 Multiply S2, S11, S11
	065 Add S0, S0, S1
	066 Add X21, X21, 268
	067 Add S0, S2, S0
	068 Move X0, X21
	069 Move X1, X31
	070 NotImplemented "Instruction FSQRT not yet implemented."
	071 Call LayerMask.get_value, X0
	072 Move X8, [X23]
	073 Move W22, W0
	074 Move W9, [X8+224]
	075 Compare W9, 0
	076 JumpIfNotEqual {79}
	077 Move X0, X8
	078 Call 0x1C17DFC
	079 Move S0, 1
	080 Subtract S0, S0, S9
	081 Multiply S14, S10, S9
	082 Multiply S0, S0, S10
	083 Add S7, S0, S15
	084 Move V0, [X31+32]
	085 Move V1, [X31+48]
	086 Move V2, V8
	087 Move V3, V14
	088 Move V4, V13
	089 Move V5, V12
	090 Move V6, V11
	091 Move X0, X20
	092 Move W1, W22
	093 Move X2, X31
	094 Call Physics.SphereCast, X0, V0, X1, X2, V1, X3
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfNotEqual {212}
	099 Move X0, X20
	100 Move X1, X31
	101 Move [X31+28], S8
	102 Call RaycastHit.get_point, X0
	103 Move X0, X20
	104 Move X1, X31
	105 Move V11, V0
	106 Move V12, V1
	107 Move V13, V2
	108 Call RaycastHit.get_normal, X0
	109 Multiply S0, S0, S10
	110 Multiply S1, S1, S10
	111 Multiply S2, S2, S10
	112 Add S8, S11, S0
	113 Add S11, S12, S1
	114 Add S15, S13, S2
	115 Move [X19], S8
	116 Move [X19+8], S11
	117 Move [X19+8], S15
	118 Move W8, [X25+1924]
	119 Compare W8, 0
	120 JumpIfNotEqual {126}
	121 Move X0, 0x22D6000
	122 Move X0, [X0+1448]
	123 Call 0x1C17CF4
	124 Move W8, 1
	125 Move [X25+1924], W8
	126 Move V0, [X31+2]
	127 Move X0, [X24]
	128 Subtract S12, S8, S0
	129 Move V0, [X31+3]
	130 Move W8, [X0+224]
	131 Subtract S13, S11, S0
	132 Move V0, [X31+28]
	133 Subtract S15, S15, S0
	134 Compare W8, 0
	135 JumpIfNotEqual {137}
	136 Call 0x1C17DFC
	137 Multiply S0, S12, S12
	138 Multiply S1, S13, S13
	139 Add S0, S0, S1
	140 Multiply S1, S15, S15
	141 Add S0, S1, S0
	142 Move X0, X21
	143 Move X1, X31
	144 NotImplemented "Instruction FSQRT not yet implemented."
	145 Call LayerMask.get_value, X0
	146 Move X8, [X23]
	147 Move W22, W0
	148 Move W9, [X8+224]
	149 Compare W9, 0
	150 JumpIfNotEqual {153}
	151 Move X0, X8
	152 Call 0x1C17DFC
	153 Multiply S0, S9, S9
	154 Move S1, 1
	155 Subtract S0, S1, S0
	156 Multiply S10, S0, S10
	157 Add S7, S10, S8
	158 Move V8, [X31+28]
	159 Multiply S11, S14, S9
	160 Add X0, X31, 64
	161 Move V0, [X31+32]
	162 Move V1, [X31+48]
	163 Move V2, V8
	164 Move V3, V11
	165 Move V4, V12
	166 Move V5, V13
	167 Move V6, V15
	168 Move W1, W22
	169 Move X2, X31
	170 Call Physics.SphereCast, X0, V0, X1, X2, V1, X3
	171 Move V4, [X31+32]
	172 Move V2, [X31+48]
	173 Move V0, [X19]
	174 Move V1, [X19+8]
	175 Move V4.S[1], V2.S[0]
	176 Subtract V3, V0, V4
	177 Subtract S9, S1, S8
	178 Move TEMP, X0
	179 And TEMP, TEMP, 1
	180 Compare TEMP, 1
	181 JumpIfNotEqual {258}
	182 Move X21, 0x25BB000
	183 Move W8, [X21+1925]
	184 Move [X31+3], V4
	185 Compare W8, 0
	186 JumpIfNotEqual {194}
	187 Move X0, 0x22D6000
	188 Move X0, [X0+1448]
	189 Move [X31], V3
	190 Call 0x1C17CF4
	191 Move V3, [X31]
	192 Move W8, 1
	193 Move [X21+1925], W8
	194 Move X0, [X24]
	195 Move W8, [X0+224]
	196 Compare W8, 0
	197 JumpIfNotEqual {201}
	198 Move [X31], V3
	199 Call 0x1C17DFC
	200 Move V3, [X31]
	201 Move X8, -20131840
	202 NotImplemented "Instruction INVALID not yet implemented."
	203 Move V1, [X8+380]
	204 NotImplemented "Instruction FADDP not yet implemented."
	205 Multiply S2, S9, S9
	206 Add S0, S2, S0
	207 NotImplemented "Instruction FSQRT not yet implemented."
	208 NotImplemented "Instruction FCMP not yet implemented."
	209 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	210 NotImplemented "Instruction INVALID not yet implemented."
	211 NotImplemented "Instruction FDIV not yet implemented."
	212 Move W8, [X25+1924]
	213 Compare W8, 0
	214 JumpIfNotEqual {220}
	215 Move X0, 0x22D6000
	216 Move X0, [X0+1448]
	217 Call 0x1C17CF4
	218 Move W8, 1
	219 Move [X25+1924], W8
	220 Move X0, [X24]
	221 Move W8, [X0+224]
	222 Compare W8, 0
	223 JumpIfNotEqual {225}
	224 Call 0x1C17DFC
	225 Move X0, X21
	226 Move X1, X31
	227 Call LayerMask.get_value, X0
	228 Move X8, [X23]
	229 Move W21, W0
	230 Move W9, [X8+224]
	231 Compare W9, 0
	232 JumpIfNotEqual {235}
	233 Move X0, X8
	234 Call 0x1C17DFC
	235 Move X8, -20131840
	236 Move V0, [X8+924]
	237 Move V2, V8
	238 Move V3, V13
	239 Move V4, V12
	240 Multiply S0, S14, S0
	241 Add S6, S0, S15
	242 Move V0, [X31+32]
	243 Move V1, [X31+48]
	244 Move V5, V11
	245 Move X0, X20
	246 Move W1, W21
	247 Move X2, X31
	248 Call Physics.Raycast, X0, X1, X2, V0, X3
	249 Move TEMP, X0
	250 And TEMP, TEMP, 1
	251 Compare TEMP, 1
	252 JumpIfNotEqual {321}
	253 Move V1, [X31+2]
	254 Move V0, [X31+3]
	255 Move [X19+8], S8
	256 Move [X19], S1
	257 Move [X19+8], S0
	258 Move W8, [X25+1924]
	259 Move [X31], V3
	260 Compare W8, 0
	261 JumpIfNotEqual {268}
	262 Move X0, 0x22D6000
	263 Move X0, [X0+1448]
	264 Call 0x1C17CF4
	265 Move V3, [X31]
	266 Move W8, 1
	267 Move [X25+1924], W8
	268 Move X0, [X24]
	269 Move W8, [X0+224]
	270 Compare W8, 0
	271 JumpIfNotEqual {274}
	272 Call 0x1C17DFC
	273 Move V3, [X31]
	274 Move S10, V3.S[1]
	275 NotImplemented "Instruction INVALID not yet implemented."
	276 Multiply S1, S10, V3.S[1]
	277 Add S0, S0, S1
	278 Multiply S1, S9, S9
	279 Add S0, S0, S1
	280 Move X0, X21
	281 Move X1, X31
	282 NotImplemented "Instruction FSQRT not yet implemented."
	283 Call LayerMask.get_value, X0
	284 Move X8, [X23]
	285 Move W21, W0
	286 Move W9, [X8+224]
	287 Compare W9, 0
	288 JumpIfNotEqual {291}
	289 Move X0, X8
	290 Call 0x1C17DFC
	291 Move X8, -20131840
	292 Move V0, [X8+924]
	293 Add X0, X31, 64
	294 Move V3, [X31]
	295 Move V4, V10
	296 Multiply S0, S11, S0
	297 Add S6, S0, S8
	298 Move V8, [X31+28]
	299 Move V0, [X31+32]
	300 Move V1, [X31+48]
	301 Move V5, V9
	302 Move W1, W21
	303 Move V2, V8
	304 Move X2, X31
	305 Call Physics.Raycast, X0, X1, X2, V0, X3
	306 Move TEMP, X0
	307 And TEMP, TEMP, 1
	308 Compare TEMP, 1
	309 JumpIfNotEqual {374}
	310 Move V1, [X31+2]
	311 Move V0, [X31+48]
	312 Move V2, [X31+64]
	313 Move [X19+8], S8
	314 Move [X19], S1
	315 Move [X19+8], S0
	316 NotImplemented "Instruction LDUR not yet implemented."
	317 Move V1, [X31+5]
	318 Move [X20+28], V0
	319 Move [X20], V2
	320 Move [X20+8], V1
	321 Move X20, 0x25BB000
	322 Move W8, [X20+1923]
	323 Compare W8, 0
	324 JumpIfNotEqual {330}
	325 Move X0, 0x22D6000
	326 Move X0, [X0+1440]
	327 Call 0x1C17CF4
	328 Move W8, 1
	329 Move [X20+1923], W8
	330 Move X8, 0x22D6000
	331 Move X8, [X8+1440]
	332 Move W0, W31
	333 Move X8, [X8]
	334 Move X8, [X8+184]
	335 Move V0, [X8]
	336 Move V1, [X8+8]
	337 Move [X19], D0
	338 Move [X19+8], S1
	339 Move X21, 0x25BB000
	340 Move W8, [X21+1923]
	341 Compare W8, 0
	342 JumpIfNotEqual {348}
	343 Move X0, 0x22D6000
	344 Move X0, [X0+1440]
	345 Call 0x1C17CF4
	346 Move W8, 1
	347 Move [X21+1923], W8
	348 Move X8, 0x22D6000
	349 Move X8, [X8+1440]
	350 Move X8, [X8]
	351 Move X8, [X8+184]
	352 Move V8, [X8]
	353 Move V9, [X8+8]
	354 Move X0, X20
	355 Move X1, X31
	356 Call RaycastHit.get_distance, X0
	357 Move V2, [X31+3]
	358 Subtract S0, S0, S10
	359 Move S1, W31
	360 NotImplemented "Instruction FMAX not yet implemented."
	361 NotImplemented "Instruction INVALID not yet implemented."
	362 Add V1, V2, V1
	363 Move V2, [X31+28]
	364 Multiply S0, S9, S0
	365 Move [X19], D1
	366 Add S0, S2, S0
	367 Move [X19+8], S0
	368 Move V0, [X31+64]
	369 Move V1, [X31+80]
	370 NotImplemented "Instruction LDUR not yet implemented."
	371 Move [X20], V0
	372 Move [X20+8], V1
	373 Move [X20+28], V2
	374 Move W0, 1
	375 Move X20, [X31+224]
	376 Move X19, [X31+232]
	377 Move X22, [X31+208]
	378 Move X21, [X31+216]
	379 Move X24, [X31+192]
	380 Move X23, [X31+200]
	381 Move X30, [X31+176]
	382 Move X25, [X31+184]
	383 Move D9, [X31+160]
	384 Move D8, [X31+168]
	385 Move D11, [X31+144]
	386 Move D10, [X31+152]
	387 Move D13, [X31+128]
	388 Move D12, [X31+136]
	389 Move D15, [X31+112]
	390 Move D14, [X31+120]
	391 Add X31, X31, 240
	392 Return X0

Method: System.Boolean IsHandTouching(System.Boolean forLeftHand)

Disassembly:
	0x01E1E3D4 LDR X3, [X25]
	0x01E1E3D8 MOV X2, X0
	0x01E1E3DC MOVZ W1, 0x2
	0x01E1E3E0 MOV X0, X19
	0x01E1E3E4 BL 0x2A44E18

ISIL:
	001 And W31, W1, 1
	002 Move W8, 272
	003 NotImplemented "Instruction CINC not yet implemented."
	004 Move W0, [X0]
	005 Return X0

Method: System.Void Turn(System.Single degrees)

Disassembly:
	0x01E1E3E8 LDR X0, [X22]
	0x01E1E3EC MOV W1, W31
	0x01E1E3F0 BL 0x1C16D6C
	0x01E1E3F4 LDR X3, [X25]
	0x01E1E3F8 MOV X2, X0
	0x01E1E3FC MOVZ W1, 0x3
	0x01E1E400 MOV X0, X19
	0x01E1E404 BL 0x2A44E18
	0x01E1E408 LDR X0, [X22]
	0x01E1E40C MOVZ W1, 0x9D
	0x01E1E410 BL 0x1C16D6C
	0x01E1E414 LDR X1, [X21]
	0x01E1E418 MOV X2, X31
	0x01E1E41C MOV X20, X0
	0x01E1E420 BL 0x32C5BD8
	0x01E1E424 LDR X3, [X25]
	0x01E1E428 MOVZ W1, 0x4
	0x01E1E42C MOV X0, X19
	0x01E1E430 MOV X2, X20
	0x01E1E434 BL 0x2A44E18
	0x01E1E438 LDR X0, [X22]
	0x01E1E43C MOVZ W1, 0xB7
	0x01E1E440 BL 0x1C16D6C
	0x01E1E444 LDR X1, [X29]
	0x01E1E448 MOV X2, X31
	0x01E1E44C MOV X20, X0
	0x01E1E450 BL 0x32C5BD8
	0x01E1E454 LDR X3, [X25]
	0x01E1E458 MOVZ W1, 0x5
	0x01E1E45C MOV X0, X19
	0x01E1E460 MOV X2, X20
	0x01E1E464 BL 0x2A44E18
	0x01E1E468 LDR X0, [X22]
	0x01E1E46C MOVZ W1, 0xB7
	0x01E1E470 BL 0x1C16D6C
	0x01E1E474 LDR X1, [X28]
	0x01E1E478 MOV X2, X31
	0x01E1E47C MOV X20, X0
	0x01E1E480 BL 0x32C5BD8
	0x01E1E484 LDR X3, [X25]
	0x01E1E488 MOVZ W1, 0x6
	0x01E1E48C MOV X0, X19
	0x01E1E490 MOV X2, X20
	0x01E1E494 BL 0x2A44E18
	0x01E1E498 LDR X0, [X22]
	0x01E1E49C MOVZ W1, 0x5D
	0x01E1E4A0 BL 0x1C16D6C
	0x01E1E4A4 LDR X1, [X27]
	0x01E1E4A8 MOV X2, X31
	0x01E1E4AC MOV X20, X0
	0x01E1E4B0 BL 0x32C5BD8
	0x01E1E4B4 LDR X3, [X25]
	0x01E1E4B8 MOVZ W1, 0x7
	0x01E1E4BC MOV X0, X19
	0x01E1E4C0 MOV X2, X20
	0x01E1E4C4 BL 0x2A44E18
	0x01E1E4C8 LDR X0, [X22]
	0x01E1E4CC MOV W1, W31
	0x01E1E4D0 BL 0x1C16D6C
	0x01E1E4D4 LDR X3, [X25]
	0x01E1E4D8 MOV X2, X0
	0x01E1E4DC MOVZ W1, 0x8
	0x01E1E4E0 MOV X0, X19
	0x01E1E4E4 BL 0x2A44E18
	0x01E1E4E8 LDR X8, [X23]
	0x01E1E4EC LDR X8, [X8 + 0xB8]
	0x01E1E4F0 STR X19, [X8 + 0x20]
	0x01E1E4F4 LDR X0, [X24]
	0x01E1E4F8 BL 0x1C16F10
	0x01E1E4FC ADRP X29, 0x22DC000
	0x01E1E500 LDR X29, [X29 + 0x528]
	0x01E1E504 MOV X19, X0
	0x01E1E508 LDR X1, [X29]
	0x01E1E50C BL 0x2A44560
	0x01E1E510 LDR X0, [X22]
	0x01E1E514 MOVZ W1, 0x10
	0x01E1E518 BL 0x1C16D6C
	0x01E1E51C LDR X1, [X26]
	0x01E1E520 MOV X2, X31
	0x01E1E524 MOV X20, X0
	0x01E1E528 BL 0x32C5BD8
	0x01E1E52C CBZ X19, 0x1E1E714
	0x01E1E530 LDR X3, [X25]
	0x01E1E534 ADRP X21, 0x22DC000
	0x01E1E538 ADRP X27, 0x22DC000
	0x01E1E53C ADRP X26, 0x22DC000
	0x01E1E540 LDR X21, [X21 + 0x580]
	0x01E1E544 LDR X27, [X27 + 0x5C8]
	0x01E1E548 LDR X26, [X26 + 0x588]
	0x01E1E54C MOVZ W1, 0x1
	0x01E1E550 MOV X0, X19
	0x01E1E554 MOV X2, X20
	0x01E1E558 MOV X28, X23
	0x01E1E55C BL 0x2A44E18
	0x01E1E560 LDR X0, [X22]
	0x01E1E564 MOVZ W1, 0xA
	0x01E1E568 BL 0x1C16D6C
	0x01E1E56C LDR X1, [X21]
	0x01E1E570 MOV X2, X31
	0x01E1E574 MOV X20, X0
	0x01E1E578 BL 0x32C5BD8
	0x01E1E57C LDR X3, [X25]
	0x01E1E580 MOVZ W1, 0x5
	0x01E1E584 MOV X0, X19
	0x01E1E588 MOV X2, X20
	0x01E1E58C BL 0x2A44E18
	0x01E1E590 LDR X0, [X22]
	0x01E1E594 MOVZ W1, 0xA
	0x01E1E598 BL 0x1C16D6C
	0x01E1E59C LDR X1, [X21]
	0x01E1E5A0 MOV X2, X31
	0x01E1E5A4 MOV X20, X0
	0x01E1E5A8 BL 0x32C5BD8
	0x01E1E5AC LDR X3, [X25]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X1, X31
	011 Move V8, V0
	012 Move X19, X0
	013 Call Component.get_transform, X0
	014 Move X8, [X19+40]
	015 Compare X8, 0
	016 JumpIfEqual {123}
	017 Move X20, X0
	018 Move X0, X8
	019 Move X1, X31
	020 Call Component.get_transform, X0
	021 Compare X0, 0
	022 JumpIfEqual {123}
	023 Move X1, X31
	024 Call Transform.get_position, X0
	025 Move X0, X19
	026 Move X1, X31
	027 Move V9, V0
	028 Move V10, V1
	029 Move V11, V2
	030 Call Component.get_transform, X0
	031 Compare X0, 0
	032 JumpIfEqual {123}
	033 Move X1, X31
	034 Call Transform.get_up, X0
	035 Compare X20, 0
	036 JumpIfEqual {123}
	037 Move V3, V0
	038 Move V4, V1
	039 Move V5, V2
	040 Move X0, X20
	041 Move V0, V9
	042 Move V1, V10
	043 Move V2, V11
	044 Move V6, V8
	045 Move X1, X31
	046 Call Transform.RotateAround, X0, X1, X2, V0
	047 Move X20, [X19+144]
	048 Move X0, X19
	049 Move X1, X31
	050 Call Component.get_transform, X0
	051 Compare X0, 0
	052 JumpIfEqual {123}
	053 Move X1, X31
	054 Call Transform.get_position, X0
	055 Compare X20, 0
	056 JumpIfEqual {123}
	057 Move X0, X20
	058 Move X1, X31
	059 Call Rigidbody.set_position, X0, X1
	060 Move X20, [X19+144]
	061 Move X0, X19
	062 Move X1, X31
	063 Call Component.get_transform, X0
	064 Compare X0, 0
	065 JumpIfEqual {123}
	066 Move X1, X31
	067 Call Transform.get_rotation, X0
	068 Compare X20, 0
	069 JumpIfEqual {123}
	070 Move X0, X20
	071 Move X1, X31
	072 Call Rigidbody.set_rotation, X0, X1
	073 Move X8, -20131840
	074 Move V0, [X8+260]
	075 Move S2, W31
	076 Move X0, X31
	077 Multiply S8, S8, S0
	078 Move S0, W31
	079 Move V1, V8
	080 Call Quaternion.Internal_FromEulerRad, X0
	081 Move S4, [X19+216]
	082 Move S5, [X19+220]
	083 Move V6, [X19+224]
	084 Move X0, X31
	085 Call Quaternion.op_Multiply, X0, X1
	086 Move X20, [X19+192]
	087 Move [X19+216], S0
	088 Move [X19+224], S1
	089 Move [X19+224], S2
	090 Compare X20, 0
	091 JumpIfEqual {123}
	092 Move X22, X31
	093 Move X21, X31
	094 NotImplemented "Instruction LDRSW not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move S0, W31
	097 Move S2, W31
	098 Move V1, V8
	099 Move X0, X31
	100 Call Quaternion.Internal_FromEulerRad, X0
	101 Move X8, [X19+192]
	102 Compare X8, 0
	103 JumpIfEqual {123}
	104 Move W9, [X8+24]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Add X8, X8, X22
	107 Move S4, [X8+32]
	108 Move S5, [X8+36]
	109 Move V6, [X8+40]
	110 Move X0, X31
	111 Call Quaternion.op_Multiply, X0, X1
	112 Move W8, [X20+24]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Add X8, X20, X22
	115 Move [X8+32], S0
	116 Move [X8+40], S1
	117 Move [X8+40], S2
	118 Move X20, [X19+192]
	119 Add X22, X22, 12
	120 Add X21, X21, 1
	121 Compare X20, 0
	122 JumpIfNotEqual {94}
	123 Call 0x1C17F20
	124 Move X20, [X31+64]
	125 Move X19, [X31+72]
	126 Move X22, [X31+48]
	127 Move X21, [X31+56]
	128 Move X30, [X31+32]
	129 Move D9, [X31+16]
	130 Move D8, [X31+24]
	131 Move D11, [X31+80]
	132 Move D10, [X31+88]
	133 Return 
	134 Call 0x1C17F28

Method: System.Void Reposition(UnityEngine.Vector3 targetPosition)

Disassembly:
	0x01E1E5B0 MOVZ W1, 0x6
	0x01E1E5B4 MOV X0, X19
	0x01E1E5B8 MOV X2, X20
	0x01E1E5BC BL 0x2A44E18
	0x01E1E5C0 LDR X0, [X22]
	0x01E1E5C4 MOVZ W1, 0x16
	0x01E1E5C8 BL 0x1C16D6C
	0x01E1E5CC LDR X1, [X27]
	0x01E1E5D0 MOV X2, X31
	0x01E1E5D4 MOV X20, X0
	0x01E1E5D8 BL 0x32C5BD8
	0x01E1E5DC LDR X3, [X25]
	0x01E1E5E0 MOVZ W1, 0x7
	0x01E1E5E4 MOV X0, X19
	0x01E1E5E8 MOV X2, X20
	0x01E1E5EC BL 0x2A44E18
	0x01E1E5F0 LDR X8, [X23]
	0x01E1E5F4 LDR X8, [X8 + 0xB8]
	0x01E1E5F8 STR X19, [X8 + 0x28]
	0x01E1E5FC LDR X0, [X24]
	0x01E1E600 BL 0x1C16F10
	0x01E1E604 LDR X1, [X29]
	0x01E1E608 MOV X19, X0
	0x01E1E60C BL 0x2A44560
	0x01E1E610 LDR X0, [X22]
	0x01E1E614 MOVZ W1, 0x10
	0x01E1E618 BL 0x1C16D6C
	0x01E1E61C LDR X1, [X26]
	0x01E1E620 MOV X2, X31
	0x01E1E624 MOV X20, X0
	0x01E1E628 BL 0x32C5BD8
	0x01E1E62C CBZ X19, 0x1E1E714
	0x01E1E630 LDR X3, [X25]
	0x01E1E634 ADRP X21, 0x22DC000
	0x01E1E638 ADRP X24, 0x22DC000
	0x01E1E63C ADRP X23, 0x22DC000
	0x01E1E640 LDR X21, [X21 + 0x570]
	0x01E1E644 LDR X24, [X24 + 0x5A8]
	0x01E1E648 LDR X23, [X23 + 0x5B0]
	0x01E1E64C MOVZ W1, 0x1
	0x01E1E650 MOV X0, X19
	0x01E1E654 MOV X2, X20
	0x01E1E658 BL 0x2A44E18
	0x01E1E65C LDR X0, [X22]
	0x01E1E660 MOVZ W1, 0xA
	0x01E1E664 BL 0x1C16D6C
	0x01E1E668 LDR X1, [X21]
	0x01E1E66C MOV X2, X31
	0x01E1E670 MOV X20, X0
	0x01E1E674 BL 0x32C5BD8
	0x01E1E678 LDR X3, [X25]
	0x01E1E67C MOVZ W1, 0x5
	0x01E1E680 MOV X0, X19
	0x01E1E684 MOV X2, X20
	0x01E1E688 BL 0x2A44E18
	0x01E1E68C LDR X0, [X22]
	0x01E1E690 MOVZ W1, 0xA
	0x01E1E694 BL 0x1C16D6C
	0x01E1E698 LDR X1, [X24]
	0x01E1E69C MOV X2, X31
	0x01E1E6A0 MOV X20, X0
	0x01E1E6A4 BL 0x32C5BD8
	0x01E1E6A8 LDR X3, [X25]
	0x01E1E6AC MOVZ W1, 0x6
	0x01E1E6B0 MOV X0, X19
	0x01E1E6B4 MOV X2, X20
	0x01E1E6B8 BL 0x2A44E18
	0x01E1E6BC LDR X0, [X22]
	0x01E1E6C0 MOVZ W1, 0x16
	0x01E1E6C4 BL 0x1C16D6C
	0x01E1E6C8 LDR X1, [X23]
	0x01E1E6CC MOV X2, X31
	0x01E1E6D0 MOV X20, X0
	0x01E1E6D4 BL 0x32C5BD8
	0x01E1E6D8 LDR X3, [X25]
	0x01E1E6DC MOVZ W1, 0x7
	0x01E1E6E0 MOV X0, X19
	0x01E1E6E4 MOV X2, X20
	0x01E1E6E8 BL 0x2A44E18
	0x01E1E6EC LDR X8, [X28]
	0x01E1E6F0 LDP X22, X21, [X31 + 0x40]
	0x01E1E6F4 LDP X24, X23, [X31 + 0x30]
	0x01E1E6F8 LDP X26, X25, [X31 + 0x20]
	0x01E1E6FC LDR X8, [X8 + 0xB8]
	0x01E1E700 LDP X28, X27, [X31 + 0x10]
	0x01E1E704 STR X19, [X8 + 0x30]
	0x01E1E708 LDP X20, X19, [X31 + 0x50]
	0x01E1E70C LDP X29, X30, [X31], #0x60
	0x01E1E710 RET
	0x01E1E714 BL 0x1C16F20
	0x01E1E718 BL 0x1C16F28
	0x01E1E71C B 0x1E1E720
	0x01E1E720 STP X30, X21, [X31 - 0x20]!
	0x01E1E724 STP X20, X19, [X31 + 0x10]
	0x01E1E728 ADRP X20, 0x25BA000
	0x01E1E72C ADRP X21, 0x22D7000
	0x01E1E730 LDRB W8, [X20 + 0xE33]
	0x01E1E734 LDR X21, [X21 + 0x898]
	0x01E1E738 MOV X19, X0
	0x01E1E73C TBNZ X8, 0x0, 0x1E1E754
	0x01E1E740 ADRP X0, 0x22D7000
	0x01E1E744 LDR X0, [X0 + 0x898]
	0x01E1E748 BL 0x1C16CF4
	0x01E1E74C MOVZ W8, 0x1
	0x01E1E750 STRB W8, [X20 + 0xE33]
	0x01E1E754 LDR X0, [X21]
	0x01E1E758 BL 0x1C16F10
	0x01E1E75C MOVN W1, 0x1

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x25BB000
	008 Move W8, [X20+3618]
	009 Move V8, V2
	010 Move V9, V1
	011 Move V10, V0
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x22D8000
	018 Move X0, [X0+2480]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3618], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call Component.get_transform, X0
	025 Compare X0, 0
	026 JumpIfEqual {130}
	027 Move V0, V10
	028 Move V1, V9
	029 Move V2, V8
	030 Move X1, X31
	031 Call Transform.set_position, X0, X1
	032 Move X0, [X19+80]
	033 Compare X0, 0
	034 JumpIfEqual {130}
	035 Move V0, V10
	036 Move V1, V9
	037 Move V2, V8
	038 Move X1, X31
	039 Call Transform.set_position, X0, X1
	040 Move X0, [X19+72]
	041 Compare X0, 0
	042 JumpIfEqual {130}
	043 Move V0, V10
	044 Move V1, V9
	045 Move V2, V8
	046 Move X1, X31
	047 Call Transform.set_position, X0, X1
	048 Move X0, [X19+56]
	049 Compare X0, 0
	050 JumpIfEqual {130}
	051 Move V0, V10
	052 Move V1, V9
	053 Move V2, V8
	054 Move X1, X31
	055 Call Transform.set_position, X0, X1
	056 Move X0, [X19+64]
	057 Compare X0, 0
	058 JumpIfEqual {130}
	059 Move X20, 0x22D8000
	060 Move X20, [X20+2480]
	061 Move V0, V10
	062 Move V1, V9
	063 Move V2, V8
	064 Move X1, X31
	065 Call Transform.set_position, X0, X1
	066 Move [X19+104], S10
	067 Move [X19+112], S9
	068 Move [X19+112], S8
	069 Move [X19+120], S10
	070 Move [X19+120], S9
	071 Move [X19+128], S8
	072 Move [X19+128], S10
	073 Move [X19+136], S9
	074 Move [X19+136], S8
	075 Move [X19+232], S10
	076 Move [X19+240], S9
	077 Move [X19+240], S8
	078 NotImplemented "Instruction STRH not yet implemented."
	079 Move W1, [X19+152]
	080 Move X0, [X20]
	081 Call 0x1C17D6C
	082 Move [X19+192], X0
	083 Move [X19+200], W31
	084 Move X20, 0x25BB000
	085 Move W8, [X20+1923]
	086 Compare W8, 0
	087 JumpIfNotEqual {93}
	088 Move X0, 0x22D6000
	089 Move X0, [X0+1440]
	090 Call 0x1C17CF4
	091 Move W8, 1
	092 Move [X20+1923], W8
	093 Move X8, 0x22D6000
	094 Move X8, [X8+1440]
	095 Move X0, [X19+144]
	096 Move X8, [X8]
	097 Move X9, [X8+184]
	098 Move V0, [X9]
	099 Move V1, [X9+8]
	100 Move [X19+204], D0
	101 Move [X19+212], S1
	102 Move X9, [X8+184]
	103 Move V0, [X9]
	104 Move V1, [X9+8]
	105 Move [X19+216], D0
	106 Move [X19+224], S1
	107 Compare X0, 0
	108 JumpIfEqual {130}
	109 Move X8, [X8+184]
	110 Move X1, X31
	111 Move S1, [X8+4]
	112 Move S2, [X8+8]
	113 Move V0, [X8]
	114 Call Rigidbody.set_velocity, X0, X1
	115 Move X0, [X19+144]
	116 Compare X0, 0
	117 JumpIfEqual {130}
	118 Move V1, V9
	119 Move V2, V8
	120 Move X20, [X31+32]
	121 Move X19, [X31+40]
	122 Move X30, [X31+24]
	123 Move D9, [X31+8]
	124 Move D8, [X31+16]
	125 Move V0, V10
	126 Move X1, X31
	127 Move V10, [X31+48]
	128 Call Rigidbody.set_position, X0, X1
	129 Return 
	130 Call 0x1C17F20

Method: System.Void Rotate(UnityEngine.Vector3 targetForward)

Disassembly:
	0x01E1E760 MOV X2, X31
	0x01E1E764 MOV X20, X0
	0x01E1E768 BL 0x1D64BCC
	0x01E1E76C CBZ X20, 0x1E1E784
	0x01E1E770 STR X19, [X20 + 0x28]
	0x01E1E774 MOV X0, X20
	0x01E1E778 LDP X20, X19, [X31 + 0x10]
	0x01E1E77C LDP X30, X21, [X31], #0x20
	0x01E1E780 RET
	0x01E1E784 BL 0x1C16F20
	0x01E1E788 B 0x1E1E78C
	0x01E1E78C STP X30, X21, [X31 - 0x20]!
	0x01E1E790 STP X20, X19, [X31 + 0x10]
	0x01E1E794 ADRP X20, 0x25BA000
	0x01E1E798 ADRP X21, 0x22D7000
	0x01E1E79C LDRB W8, [X20 + 0xE34]
	0x01E1E7A0 LDR X21, [X21 + 0x880]
	0x01E1E7A4 MOV X19, X0
	0x01E1E7A8 TBNZ X8, 0x0, 0x1E1E7C0
	0x01E1E7AC ADRP X0, 0x22D7000
	0x01E1E7B0 LDR X0, [X0 + 0x880]
	0x01E1E7B4 BL 0x1C16CF4
	0x01E1E7B8 MOVZ W8, 0x1
	0x01E1E7BC STRB W8, [X20 + 0xE34]
	0x01E1E7C0 LDR X0, [X21]
	0x01E1E7C4 BL 0x1C16F10
	0x01E1E7C8 MOVN W1, 0x1
	0x01E1E7CC MOV X2, X31
	0x01E1E7D0 MOV X20, X0
	0x01E1E7D4 BL 0x1D64938
	0x01E1E7D8 CBZ X20, 0x1E1E7F0
	0x01E1E7DC STR X19, [X20 + 0x28]
	0x01E1E7E0 MOV X0, X20
	0x01E1E7E4 LDP X20, X19, [X31 + 0x10]
	0x01E1E7E8 LDP X30, X21, [X31], #0x20
	0x01E1E7EC RET
	0x01E1E7F0 BL 0x1C16F20
	0x01E1E7F4 STR X30, [X31 - 0x10]!
	0x01E1E7F8 LDR X8, [X0 + 0x68]
	0x01E1E7FC CBZ X8, 0x1E1E81C
	0x01E1E800 LDR W9, [X8 + 0x18]
	0x01E1E804 CBZ W9, 0x1E1E820
	0x01E1E808 LDR X8, [X8 + 0x20]
	0x01E1E80C CBZ X8, 0x1E1E81C
	0x01E1E810 LDR X0, [X8 + 0x28]
	0x01E1E814 LDR X30, [X31], #0x10
	0x01E1E818 RET
	0x01E1E81C BL 0x1C16F20
	0x01E1E820 BL 0x1C16F28
	0x01E1E824 STR X30, [X31 - 0x20]!
	0x01E1E828 STP X20, X19, [X31 + 0x10]
	0x01E1E82C ADRP X20, 0x25BA000
	0x01E1E830 LDRB W8, [X20 + 0xE25]
	0x01E1E834 MOV X19, X0
	0x01E1E838 TBNZ X8, 0x0, 0x1E1E850
	0x01E1E83C ADRP X0, 0x22D5000
	0x01E1E840 LDR X0, [X0 + 0x598]
	0x01E1E844 BL 0x1C16CF4
	0x01E1E848 MOVZ W8, 0x1
	0x01E1E84C STRB W8, [X20 + 0xE25]
	0x01E1E850 LDR X8, [X19 + 0x68]
	0x01E1E854 CBZ X8, 0x1E1E8C4
	0x01E1E858 LDR W9, [X8 + 0x18]
	0x01E1E85C CMP W9, 0x1
	0x01E1E860 B.LS 0x1E1E8C8
	0x01E1E864 LDR X20, [X8 + 0x28]
	0x01E1E868 CBZ X20, 0x1E1E8C4
	0x01E1E86C ADRP X8, 0x22D5000
	0x01E1E870 LDR X8, [X8 + 0x598]
	0x01E1E874 LDR X19, [X20 + 0x18]
	0x01E1E878 LDR X0, [X8]
	0x01E1E87C LDR W8, [X0 + 0xE0]
	0x01E1E880 CBNZ W8, 0x1E1E888
	0x01E1E884 BL 0x1C16DFC
	0x01E1E888 MOV X0, X19
	0x01E1E88C MOV X1, X31
	0x01E1E890 MOV X2, X31
	0x01E1E894 BL 0x3C354F8
	0x01E1E898 TBZ X0, 0x0, 0x1E1E8B4
	0x01E1E89C LDR X0, [X20 + 0x18]
	0x01E1E8A0 CBZ X0, 0x1E1E8C4
	0x01E1E8A4 LDP X20, X19, [X31 + 0x10]
	0x01E1E8A8 MOV X1, X31
	0x01E1E8AC LDR X30, [X31], #0x20
	0x01E1E8B0 B 0x3C356F8
	0x01E1E8B4 LDP X20, X19, [X31 + 0x10]
	0x01E1E8B8 MOV X0, X31
	0x01E1E8BC LDR X30, [X31], #0x20
	0x01E1E8C0 RET
	0x01E1E8C4 BL 0x1C16F20
	0x01E1E8C8 BL 0x1C16F28
	0x01E1E8CC STR X30, [X31 - 0x20]!
	0x01E1E8D0 STP X20, X19, [X31 + 0x10]
	0x01E1E8D4 ADRP X20, 0x25BA000
	0x01E1E8D8 LDRB W8, [X20 + 0xE26]
	0x01E1E8DC MOV X19, X0
	0x01E1E8E0 TBNZ X8, 0x0, 0x1E1E8F8
	0x01E1E8E4 ADRP X0, 0x22D5000
	0x01E1E8E8 LDR X0, [X0 + 0x598]
	0x01E1E8EC BL 0x1C16CF4
	0x01E1E8F0 MOVZ W8, 0x1
	0x01E1E8F4 STRB W8, [X20 + 0xE26]
	0x01E1E8F8 LDR X8, [X19 + 0x68]
	0x01E1E8FC CBZ X8, 0x1E1E96C
	0x01E1E900 LDR W9, [X8 + 0x18]
	0x01E1E904 CMP W9, 0x2
	0x01E1E908 B.LS 0x1E1E970
	0x01E1E90C LDR X20, [X8 + 0x30]
	0x01E1E910 CBZ X20, 0x1E1E96C
	0x01E1E914 ADRP X8, 0x22D5000
	0x01E1E918 LDR X8, [X8 + 0x598]
	0x01E1E91C LDR X19, [X20 + 0x18]
	0x01E1E920 LDR X0, [X8]
	0x01E1E924 LDR W8, [X0 + 0xE0]
	0x01E1E928 CBNZ W8, 0x1E1E930
	0x01E1E92C BL 0x1C16DFC
	0x01E1E930 MOV X0, X19
	0x01E1E934 MOV X1, X31
	0x01E1E938 MOV X2, X31
	0x01E1E93C BL 0x3C354F8
	0x01E1E940 TBZ X0, 0x0, 0x1E1E95C
	0x01E1E944 LDR X0, [X20 + 0x18]
	0x01E1E948 CBZ X0, 0x1E1E96C
	0x01E1E94C LDP X20, X19, [X31 + 0x10]
	0x01E1E950 MOV X1, X31
	0x01E1E954 LDR X30, [X31], #0x20
	0x01E1E958 B 0x3C356F8
	0x01E1E95C LDP X20, X19, [X31 + 0x10]
	0x01E1E960 MOV X0, X31
	0x01E1E964 LDR X30, [X31], #0x20
	0x01E1E968 RET
	0x01E1E96C BL 0x1C16F20
	0x01E1E970 BL 0x1C16F28
	0x01E1E974 STR X30, [X31 - 0x20]!
	0x01E1E978 STP X20, X19, [X31 + 0x10]
	0x01E1E97C ADRP X20, 0x25BA000
	0x01E1E980 LDRB W8, [X20 + 0xE27]
	0x01E1E984 MOV X19, X0
	0x01E1E988 TBNZ X8, 0x0, 0x1E1E9B8
	0x01E1E98C ADRP X0, 0x22DC000
	0x01E1E990 LDR X0, [X0 + 0x5F0]
	0x01E1E994 BL 0x1C16CF4
	0x01E1E998 ADRP X0, 0x22D6000
	0x01E1E99C LDR X0, [X0 + 0x470]
	0x01E1E9A0 BL 0x1C16CF4
	0x01E1E9A4 ADRP X0, 0x22D8000
	0x01E1E9A8 LDR X0, [X0 + 0xEF8]
	0x01E1E9AC BL 0x1C16CF4
	0x01E1E9B0 MOVZ W8, 0x1
	0x01E1E9B4 STRB W8, [X20 + 0xE27]
	0x01E1E9B8 LDR X8, [X19 + 0x68]
	0x01E1E9BC CBZ X8, 0x1E1EA54
	0x01E1E9C0 LDR W9, [X8 + 0x18]
	0x01E1E9C4 CMP W9, 0x1
	0x01E1E9C8 B.LS 0x1E1EA58
	0x01E1E9CC LDR X8, [X8 + 0x28]
	0x01E1E9D0 CBZ X8, 0x1E1EA44
	0x01E1E9D4 LDR X8, [X8 + 0x30]
	0x01E1E9D8 CBZ X8, 0x1E1EA44
	0x01E1E9DC STR X31, [X31 + 0x8]
	0x01E1E9E0 ADRP X9, 0x22D6000
	0x01E1E9E4 LDR X9, [X9 + 0x470]
	0x01E1E9E8 LDR W1, [X8 + 0x18]
	0x01E1E9EC ADD X0, X31, 0x8
	0x01E1E9F0 LDR X2, [X9]
	0x01E1E9F4 BL 0x24341FC
	0x01E1E9F8 LDRB W8, [X31 + 0x8]
	0x01E1E9FC MOV X0, X31
	0x01E1EA00 CBZ W8, 0x1E1EA48
	0x01E1EA04 LDR W8, [X31 + 0xC]
	0x01E1EA08 CMP W8, 0x1
	0x01E1EA0C B.LT 0x1E1EA48
	0x01E1EA10 LDR X8, [X19 + 0x68]
	0x01E1EA14 CBZ X8, 0x1E1EA54
	0x01E1EA18 LDR W9, [X8 + 0x18]
	0x01E1EA1C CMP W9, 0x1
	0x01E1EA20 B.LS 0x1E1EA58
	0x01E1EA24 LDR X8, [X8 + 0x28]
	0x01E1EA28 CBZ X8, 0x1E1EA54
	0x01E1EA2C LDR X8, [X8 + 0x30]
	0x01E1EA30 CBZ X8, 0x1E1EA54
	0x01E1EA34 LDR W9, [X8 + 0x18]
	0x01E1EA38 CBZ W9, 0x1E1EA58
	0x01E1EA3C LDR X0, [X8 + 0x20]
	0x01E1EA40 B 0x1E1EA48

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D14
	003 Move [X31+32], D13
	004 Move [X31+40], D12
	005 Move [X31+48], D11
	006 Move [X31+56], D10
	007 Move [X31+64], D9
	008 Move [X31+72], D8
	009 Move [X31+80], X30
	010 Move [X31+88], X23
	011 Move [X31+96], X22
	012 Move [X31+104], X21
	013 Move [X31+112], X20
	014 Move [X31+120], X19
	015 Move X19, X0
	016 Move X0, [X0+40]
	017 Compare X0, 0
	018 JumpIfEqual {212}
	019 Move X1, X31
	020 Move V8, V2
	021 Move V9, V1
	022 Move V13, V0
	023 Call Component.get_transform, X0
	024 Compare X0, 0
	025 JumpIfEqual {212}
	026 Move X1, X31
	027 Call Transform.get_forward, X0
	028 Move X0, X31
	029 Call Extensions.Flatten, X0
	030 Move X20, 0x25BB000
	031 Move W8, [X20+1925]
	032 Move V10, V0
	033 Move V11, V1
	034 Move V12, V2
	035 Compare W8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, 0x22D6000
	038 Move X0, [X0+1448]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+1925], W8
	042 Move X23, 0x22D6000
	043 Move X23, [X23+1448]
	044 Move X0, [X23]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X8, -20131840
	050 Multiply S0, S10, S10
	051 Multiply S1, S11, S11
	052 Move V14, [X8+380]
	053 Move X21, 0x22D6000
	054 Multiply S2, S12, S12
	055 Add S0, S0, S1
	056 Move X21, [X21+1440]
	057 Add S0, S2, S0
	058 NotImplemented "Instruction FSQRT not yet implemented."
	059 NotImplemented "Instruction FCMP not yet implemented."
	060 Move X22, 0x25BB000
	061 NotImplemented "Instruction FDIV not yet implemented."
	062 NotImplemented "Instruction FDIV not yet implemented."
	063 NotImplemented "Instruction FDIV not yet implemented."
	064 Move W8, [X22+1923]
	065 Compare W8, 0
	066 JumpIfNotEqual {72}
	067 Move X0, 0x22D6000
	068 Move X0, [X0+1440]
	069 Call 0x1C17CF4
	070 Move W8, 1
	071 Move [X22+1923], W8
	072 Move X8, [X21]
	073 Move X8, [X8+184]
	074 Move S10, [X8]
	075 Move S11, [X8+4]
	076 Move V12, [X8+8]
	077 Move V0, V13
	078 Move V1, V9
	079 Move V2, V8
	080 Move X0, X31
	081 Call Extensions.Flatten, X0
	082 Move W8, [X20+1925]
	083 Move V8, V0
	084 Move V9, V1
	085 Move V13, V2
	086 Compare W8, 0
	087 JumpIfNotEqual {93}
	088 Move X0, 0x22D6000
	089 Move X0, [X0+1448]
	090 Call 0x1C17CF4
	091 Move W8, 1
	092 Move [X20+1925], W8
	093 Move X0, [X23]
	094 Move W8, [X0+224]
	095 Compare W8, 0
	096 JumpIfNotEqual {98}
	097 Call 0x1C17DFC
	098 Multiply S0, S8, S8
	099 Multiply S1, S9, S9
	100 Add S0, S0, S1
	101 Multiply S1, S13, S13
	102 Add S0, S1, S0
	103 NotImplemented "Instruction FSQRT not yet implemented."
	104 NotImplemented "Instruction FCMP not yet implemented."
	105 NotImplemented "Instruction FDIV not yet implemented."
	106 NotImplemented "Instruction FDIV not yet implemented."
	107 NotImplemented "Instruction FDIV not yet implemented."
	108 Move W8, [X22+1923]
	109 Compare W8, 0
	110 JumpIfNotEqual {116}
	111 Move X0, 0x22D6000
	112 Move X0, [X0+1440]
	113 Call 0x1C17CF4
	114 Move W8, 1
	115 Move [X22+1923], W8
	116 Move X8, [X21]
	117 Move X8, [X8+184]
	118 Move S8, [X8]
	119 Move S9, [X8+4]
	120 Move V13, [X8+8]
	121 Move X22, 0x25BB000
	122 Move W8, [X22+1926]
	123 Compare W8, 0
	124 JumpIfNotEqual {130}
	125 Move X0, 0x22D6000
	126 Move X0, [X0+1440]
	127 Call 0x1C17CF4
	128 Move W8, 1
	129 Move [X22+1926], W8
	130 Move X8, [X21]
	131 Move V1, V11
	132 Move V2, V12
	133 Move V3, V8
	134 Move X8, [X8+184]
	135 Move V4, V9
	136 Move V5, V13
	137 Move X0, X31
	138 Move V0, [X8+32]
	139 Move X9, [X8+24]
	140 Move [X31+8], S0
	141 Move V0, V10
	142 Move [X31], X9
	143 Call 0x1DD5D78
	144 Move X0, X19
	145 Move X1, X31
	146 Move V8, V0
	147 Call Component.get_transform, X0
	148 Move X8, [X19+40]
	149 Compare X8, 0
	150 JumpIfEqual {212}
	151 Move X20, X0
	152 Move X0, X8
	153 Move X1, X31
	154 Call Component.get_transform, X0
	155 Compare X0, 0
	156 JumpIfEqual {212}
	157 Move X1, X31
	158 Call Transform.get_position, X0
	159 Move W8, [X22+1926]
	160 Move V9, V0
	161 Move V10, V1
	162 Move V11, V2
	163 Compare W8, 0
	164 JumpIfNotEqual {170}
	165 Move X0, 0x22D6000
	166 Move X0, [X0+1440]
	167 Call 0x1C17CF4
	168 Move W8, 1
	169 Move [X22+1926], W8
	170 Compare X20, 0
	171 JumpIfEqual {212}
	172 Move X8, [X21]
	173 Move X0, X20
	174 Move V0, V9
	175 Move V1, V10
	176 Move X8, [X8+184]
	177 Move V2, V11
	178 Move V6, V8
	179 Move X1, X31
	180 Move S4, [X8+28]
	181 Move S5, [X8+32]
	182 Move V3, [X8+24]
	183 Call Transform.RotateAround, X0, X1, X2, V0
	184 Move X20, [X19+144]
	185 Move X0, X19
	186 Move X1, X31
	187 Call Component.get_transform, X0
	188 Compare X0, 0
	189 JumpIfEqual {212}
	190 Move X1, X31
	191 Call Transform.get_rotation, X0
	192 Compare X20, 0
	193 JumpIfEqual {212}
	194 Move X0, X20
	195 Move X20, [X31+112]
	196 Move X19, [X31+120]
	197 Move X22, [X31+96]
	198 Move X21, [X31+104]
	199 Move X30, [X31+80]
	200 Move X23, [X31+88]
	201 Move D9, [X31+64]
	202 Move D8, [X31+72]
	203 Move D11, [X31+48]
	204 Move D10, [X31+56]
	205 Move D13, [X31+32]
	206 Move D12, [X31+40]
	207 Move V14, [X31+16]
	208 Move X1, X31
	209 Add X31, X31, 128
	210 Call Rigidbody.set_rotation, X0, X1
	211 Return 
	212 Call 0x1C17F20

Method: System.Void Reposition(UnityEngine.Vector3 targetPosition, UnityEngine.Vector3 targetDirection)

Disassembly:
	0x01E1EA44 MOV X0, X31
	0x01E1EA48 LDP X20, X19, [X31 + 0x10]
	0x01E1EA4C LDR X30, [X31], #0x20
	0x01E1EA50 RET
	0x01E1EA54 BL 0x1C16F20
	0x01E1EA58 BL 0x1C16F28
	0x01E1EA5C STR X30, [X31 - 0x20]!
	0x01E1EA60 STP X20, X19, [X31 + 0x10]
	0x01E1EA64 ADRP X20, 0x25BA000
	0x01E1EA68 LDRB W8, [X20 + 0xE28]
	0x01E1EA6C MOV X19, X0
	0x01E1EA70 TBNZ X8, 0x0, 0x1E1EAA0
	0x01E1EA74 ADRP X0, 0x22DC000
	0x01E1EA78 LDR X0, [X0 + 0x5F0]
	0x01E1EA7C BL 0x1C16CF4
	0x01E1EA80 ADRP X0, 0x22D6000
	0x01E1EA84 LDR X0, [X0 + 0x470]
	0x01E1EA88 BL 0x1C16CF4
	0x01E1EA8C ADRP X0, 0x22D8000

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move V8, V2
	007 Move V9, V1
	008 Move V10, V0
	009 Move V0, V3
	010 Move V1, V4
	011 Move V2, V5
	012 Move X19, X0
	013 Call Player.Rotate, X0, X1
	014 Move X0, X19
	015 Move V1, V9
	016 Move V2, V8
	017 Move X30, [X31+32]
	018 Move X19, [X31+40]
	019 Move D9, [X31+16]
	020 Move D8, [X31+24]
	021 Move V0, V10
	022 Move V10, [X31+48]
	023 Call Player.Reposition, X0, X1
	024 Return 

Method: System.Void StoreVelocities(System.Single dt)

Disassembly:
	0x01E1DCF4 BL 0x1C16CF4
	0x01E1DCF8 ADRP X0, 0x22D7000
	0x01E1DCFC LDR X0, [X0 + 0xE58]
	0x01E1DD00 BL 0x1C16CF4
	0x01E1DD04 ADRP X0, 0x22DD000
	0x01E1DD08 LDR X0, [X0 + 0x560]
	0x01E1DD0C BL 0x1C16CF4
	0x01E1DD10 ADRP X0, 0x22DD000
	0x01E1DD14 LDR X0, [X0 + 0x568]
	0x01E1DD18 BL 0x1C16CF4
	0x01E1DD1C ADRP X0, 0x22DD000
	0x01E1DD20 LDR X0, [X0 + 0x570]
	0x01E1DD24 BL 0x1C16CF4
	0x01E1DD28 ADRP X0, 0x22DD000
	0x01E1DD2C LDR X0, [X0 + 0x578]
	0x01E1DD30 BL 0x1C16CF4
	0x01E1DD34 ADRP X0, 0x22DD000
	0x01E1DD38 LDR X0, [X0 + 0x580]
	0x01E1DD3C BL 0x1C16CF4
	0x01E1DD40 ADRP X0, 0x22DD000
	0x01E1DD44 LDR X0, [X0 + 0x588]
	0x01E1DD48 BL 0x1C16CF4
	0x01E1DD4C ADRP X0, 0x22DD000
	0x01E1DD50 LDR X0, [X0 + 0x590]
	0x01E1DD54 BL 0x1C16CF4
	0x01E1DD58 ADRP X0, 0x22DD000
	0x01E1DD5C LDR X0, [X0 + 0x598]
	0x01E1DD60 BL 0x1C16CF4
	0x01E1DD64 ADRP X0, 0x22DD000
	0x01E1DD68 LDR X0, [X0 + 0x5A0]
	0x01E1DD6C BL 0x1C16CF4
	0x01E1DD70 ADRP X0, 0x22DD000
	0x01E1DD74 LDR X0, [X0 + 0x5A8]
	0x01E1DD78 BL 0x1C16CF4
	0x01E1DD7C ADRP X0, 0x22DD000
	0x01E1DD80 LDR X0, [X0 + 0x5B0]
	0x01E1DD84 BL 0x1C16CF4
	0x01E1DD88 ADRP X0, 0x22DD000
	0x01E1DD8C LDR X0, [X0 + 0x5B8]
	0x01E1DD90 BL 0x1C16CF4
	0x01E1DD94 ADRP X0, 0x22DD000
	0x01E1DD98 LDR X0, [X0 + 0x5C0]
	0x01E1DD9C BL 0x1C16CF4
	0x01E1DDA0 ADRP X0, 0x22DD000
	0x01E1DDA4 LDR X0, [X0 + 0x5C8]
	0x01E1DDA8 BL 0x1C16CF4
	0x01E1DDAC ADRP X0, 0x22DD000
	0x01E1DDB0 LDR X0, [X0 + 0x5D0]
	0x01E1DDB4 BL 0x1C16CF4
	0x01E1DDB8 ADRP X0, 0x22DD000
	0x01E1DDBC LDR X0, [X0 + 0x5D8]
	0x01E1DDC0 BL 0x1C16CF4
	0x01E1DDC4 ADRP X0, 0x22DD000
	0x01E1DDC8 LDR X0, [X0 + 0x5E0]
	0x01E1DDCC BL 0x1C16CF4
	0x01E1DDD0 ADRP X0, 0x22DD000
	0x01E1DDD4 LDR X0, [X0 + 0x5E8]
	0x01E1DDD8 BL 0x1C16CF4
	0x01E1DDDC ADRP X0, 0x22D8000
	0x01E1DDE0 LDR X0, [X0 + 0x930]
	0x01E1DDE4 BL 0x1C16CF4
	0x01E1DDE8 ADRP X0, 0x22D8000
	0x01E1DDEC LDR X0, [X0 + 0x940]
	0x01E1DDF0 BL 0x1C16CF4
	0x01E1DDF4 ADRP X0, 0x22D8000
	0x01E1DDF8 LDR X0, [X0 + 0x950]
	0x01E1DDFC BL 0x1C16CF4
	0x01E1DE00 ADRP X0, 0x22D8000
	0x01E1DE04 LDR X0, [X0 + 0x998]
	0x01E1DE08 BL 0x1C16CF4
	0x01E1DE0C MOVZ W8, 0x1
	0x01E1DE10 STRB W8, [X20 + 0xE24]
	0x01E1DE14 LDR X0, [X21]
	0x01E1DE18 BL 0x1C16F10
	0x01E1DE1C LDR X1, [X19]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move W9, [X0+200]
	007 Move W10, [X0+152]
	008 Move X8, [X0+192]
	009 Add W9, W9, 1
	010 NotImplemented "Instruction SDIV not yet implemented."
	011 NotImplemented "Instruction MSUB not yet implemented."
	012 Move [X0+200], W9
	013 Compare X8, 0
	014 JumpIfEqual {82}
	015 Move W10, [X8+24]
	016 Move [X31], V0
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X9, W9
	019 Move W10, 12
	020 NotImplemented "Instruction MADD not yet implemented."
	021 Move V8, [X8+32]
	022 Move V9, [X8+40]
	023 Move X1, X31
	024 Move X19, X0
	025 Call Component.get_transform, X0
	026 Compare X0, 0
	027 JumpIfEqual {82}
	028 Move X1, X31
	029 Call Transform.get_position, X0
	030 Move V4, [X19+240]
	031 Move V3, [X19+232]
	032 Move V6, [X31]
	033 Move V5, [X19+224]
	034 Subtract S2, S2, S4
	035 Move V4, [X19+152]
	036 Move V0.S[1], V1.S[0]
	037 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	038 Subtract V0, V0, V3
	039 Move V3, [X19+216]
	040 NotImplemented "Instruction INVALID not yet implemented."
	041 Move X8, [X19+192]
	042 NotImplemented "Instruction SCVTF not yet implemented."
	043 NotImplemented "Instruction FDIV not yet implemented."
	044 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	045 Subtract V6, V0, V8
	046 Subtract S7, S1, S9
	047 NotImplemented "Instruction INVALID not yet implemented."
	048 NotImplemented "Instruction FDIV not yet implemented."
	049 Add V2, V3, V2
	050 Add S3, S5, S4
	051 Move [X19+204], D0
	052 Move [X19+212], S1
	053 Move [X19+216], D2
	054 Move [X19+224], S3
	055 Compare X8, 0
	056 JumpIfEqual {82}
	057 NotImplemented "Instruction LDRSW not yet implemented."
	058 Move W10, [X8+24]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W10, 12
	061 Move S2, V0.S[1]
	062 NotImplemented "Instruction MADD not yet implemented."
	063 Move X0, X19
	064 Move X1, X31
	065 Move [X8+32], S0
	066 Move [X8+40], S2
	067 Move [X8+40], S1
	068 Call Component.get_transform, X0
	069 Compare X0, 0
	070 JumpIfEqual {82}
	071 Move X1, X31
	072 Call Transform.get_position, X0
	073 Move [X19+232], S0
	074 Move [X19+240], S1
	075 Move [X19+240], S2
	076 Move X30, [X31+32]
	077 Move X19, [X31+40]
	078 Move D9, [X31+16]
	079 Move D8, [X31+24]
	080 Add X31, X31, 48
	081 Return 
	082 Call 0x1C17F20
	083 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x01E1EA90 LDR X0, [X0 + 0xEF8]
	0x01E1EA94 BL 0x1C16CF4
	0x01E1EA98 MOVZ W8, 0x1
	0x01E1EA9C STRB W8, [X20 + 0xE28]
	0x01E1EAA0 LDR X8, [X19 + 0x68]
	0x01E1EAA4 CBZ X8, 0x1E1EB3C
	0x01E1EAA8 LDR W9, [X8 + 0x18]
	0x01E1EAAC CMP W9, 0x2
	0x01E1EAB0 B.LS 0x1E1EB40
	0x01E1EAB4 LDR X8, [X8 + 0x30]
	0x01E1EAB8 CBZ X8, 0x1E1EB2C
	0x01E1EABC LDR X8, [X8 + 0x30]
	0x01E1EAC0 CBZ X8, 0x1E1EB2C
	0x01E1EAC4 STR X31, [X31 + 0x8]
	0x01E1EAC8 ADRP X9, 0x22D6000
	0x01E1EACC LDR X9, [X9 + 0x470]
	0x01E1EAD0 LDR W1, [X8 + 0x18]
	0x01E1EAD4 ADD X0, X31, 0x8
	0x01E1EAD8 LDR X2, [X9]
	0x01E1EADC BL 0x24341FC
	0x01E1EAE0 LDRB W8, [X31 + 0x8]
	0x01E1EAE4 MOV X0, X31
	0x01E1EAE8 CBZ W8, 0x1E1EB30
	0x01E1EAEC LDR W8, [X31 + 0xC]
	0x01E1EAF0 CMP W8, 0x1
	0x01E1EAF4 B.LT 0x1E1EB30
	0x01E1EAF8 LDR X8, [X19 + 0x68]
	0x01E1EAFC CBZ X8, 0x1E1EB3C
	0x01E1EB00 LDR W9, [X8 + 0x18]
	0x01E1EB04 CMP W9, 0x2
	0x01E1EB08 B.LS 0x1E1EB40
	0x01E1EB0C LDR X8, [X8 + 0x30]
	0x01E1EB10 CBZ X8, 0x1E1EB3C
	0x01E1EB14 LDR X8, [X8 + 0x30]
	0x01E1EB18 CBZ X8, 0x1E1EB3C
	0x01E1EB1C LDR W9, [X8 + 0x18]
	0x01E1EB20 CBZ W9, 0x1E1EB40
	0x01E1EB24 LDR X0, [X8 + 0x20]
	0x01E1EB28 B 0x1E1EB30
	0x01E1EB2C MOV X0, X31
	0x01E1EB30 LDP X20, X19, [X31 + 0x10]
	0x01E1EB34 LDR X30, [X31], #0x20
	0x01E1EB38 RET
	0x01E1EB3C BL 0x1C16F20
	0x01E1EB40 BL 0x1C16F28
	0x01E1EB44 LDR X0, [X0 + 0x28]
	0x01E1EB48 RET
	0x01E1EB4C STR X30, [X31 - 0x50]!
	0x01E1EB50 STP X26, X25, [X31 + 0x10]
	0x01E1EB54 STP X24, X23, [X31 + 0x20]
	0x01E1EB58 STP X22, X21, [X31 + 0x30]
	0x01E1EB5C STP X20, X19, [X31 + 0x40]
	0x01E1EB60 ADRP X21, 0x25BA000
	0x01E1EB64 LDRB W8, [X21 + 0xE29]
	0x01E1EB68 MOV X19, X0
	0x01E1EB6C AND W20, W1, 0x1
	0x01E1EB70 TBNZ X8, 0x0, 0x1E1EB88
	0x01E1EB74 ADRP X0, 0x22D5000
	0x01E1EB78 LDR X0, [X0 + 0x598]
	0x01E1EB7C BL 0x1C16CF4
	0x01E1EB80 MOVZ W8, 0x1
	0x01E1EB84 STRB W8, [X21 + 0xE29]
	0x01E1EB88 LDR X22, [X19 + 0x68]
	0x01E1EB8C STRB W20, [X19 + 0x44]
	0x01E1EB90 CBZ X22, 0x1E1EC68
	0x01E1EB94 LDR W8, [X22 + 0x18]
	0x01E1EB98 CMP W8, 0x1
	0x01E1EB9C B.LT 0x1E1EC68
	0x01E1EBA0 ADRP X25, 0x22D5000
	0x01E1EBA4 LDR X25, [X25 + 0x598]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x25BB000
	008 Move W8, [X20+3619]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x22DD000
	015 Move X0, [X0+1216]
	016 Call 0x1C17CF4
	017 Move X0, 0x22DD000
	018 Move X0, [X0+1224]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3619], W8
	022 Move X8, -20119552
	023 Move X9, -20119552
	024 Move V0, [X8+960]
	025 Move V1, [X9+2072]
	026 Move W8, 0xB852
	027 NotImplemented "Instruction MOVK not yet implemented."
	028 Move [X19+184], W8
	029 Move [X19+156], D0
	030 Move [X19+176], D1
	031 Move X21, 0x25BB000
	032 Move X23, 0x22DD000
	033 Move X20, 0x22DD000
	034 Move W8, [X21+1923]
	035 Move X23, [X23+1224]
	036 Move X20, [X20+1216]
	037 Compare W8, 0
	038 JumpIfNotEqual {44}
	039 Move X0, 0x22D6000
	040 Move X0, [X0+1440]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X21+1923], W8
	044 Move X22, 0x22D6000
	045 Move X22, [X22+1440]
	046 Move X8, [X22]
	047 Move X8, [X8+184]
	048 Move V0, [X8]
	049 Move V1, [X8+8]
	050 Move [X19+280], D0
	051 Move [X19+288], S1
	052 Move X0, [X23]
	053 Call 0x1C17F10
	054 Move X1, [X20]
	055 Move X20, X0
	056 Call List`1<ItemContactPoint>..ctor, X0
	057 Move [X19+480], X20
	058 Move W8, [X21+1923]
	059 Compare W8, 0
	060 JumpIfNotEqual {66}
	061 Move X0, 0x22D6000
	062 Move X0, [X0+1440]
	063 Call 0x1C17CF4
	064 Move W8, 1
	065 Move [X21+1923], W8
	066 Move X8, [X22]
	067 Move X0, X19
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X1, X31
	071 Move X8, [X8+184]
	072 Move V0, [X8]
	073 Move V1, [X8+8]
	074 Add X8, X19, 492
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move [X8], D0
	078 Move [X8+8], S1
	079 Move X30, [X31+48]
	080 Move X23, [X31+56]
	081 Call MonoBehaviour..ctor, X0
	082 Return 

