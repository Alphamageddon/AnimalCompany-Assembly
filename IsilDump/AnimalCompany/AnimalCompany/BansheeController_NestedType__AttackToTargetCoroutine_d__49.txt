Type: AnimalCompany.BansheeController/<AttackToTargetCoroutine>d__49

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x01DE5DF0 ADRP X0, 0x230E000
	0x01DE5DF4 LDR X0, [X0 + 0xB40]
	0x01DE5DF8 BL 0x1C16D08
	0x01DE5DFC BL 0x1C16F10
	0x01DE5E00 MOV X1, X31
	0x01DE5E04 MOV X19, X0
	0x01DE5E08 BL 0x3380310
	0x01DE5E0C ADRP X0, 0x2313000
	0x01DE5E10 LDR X0, [X0 + 0xD68]
	0x01DE5E14 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x01DE6378 MOV X2, X31

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x01DE637C BL 0x1EA1A20
	0x01DE6380 TBZ X0, 0x0, 0x1DE63A8
	0x01DE6384 MOV X0, X19
	0x01DE6388 BL 0x1DE5E2C
	0x01DE638C STR W0, [X31 + 0x8]
	0x01DE6390 ADD X0, X31, 0x8
	0x01DE6394 MOV X1, X31
	0x01DE6398 BL 0x1E91B10
	0x01DE639C TBNZ X0, 0x0, 0x1DE63A8
	0x01DE63A0 MOV X0, X19
	0x01DE63A4 BL 0x1DE5F84
	0x01DE63A8 LDP X20, X19, [X31 + 0x20]
	0x01DE63AC LDP X30, X21, [X31 + 0x10]
	0x01DE63B0 ADD X31, X31, 0x30
	0x01DE63B4 RET
	0x01DE63B8 BL 0x1C16F20
	0x01DE63BC MOV X1, X31
	0x01DE63C0 B 0x1E74F04
	0x01DE63C4 STP X30, X21, [X31 - 0x20]!
	0x01DE63C8 STP X20, X19, [X31 + 0x10]
	0x01DE63CC ADRP X20, 0x25F2000
	0x01DE63D0 ADRP X21, 0x2310000
	0x01DE63D4 ADRP X19, 0x2312000
	0x01DE63D8 LDRB W8, [X20 + 0xCA5]
	0x01DE63DC LDR X21, [X21 + 0xC88]
	0x01DE63E0 LDR X19, [X19 + 0xD88]
	0x01DE63E4 TBNZ X8, 0x0, 0x1DE6408
	0x01DE63E8 ADRP X0, 0x2312000
	0x01DE63EC LDR X0, [X0 + 0xD88]
	0x01DE63F0 BL 0x1C16CF4
	0x01DE63F4 ADRP X0, 0x2310000
	0x01DE63F8 LDR X0, [X0 + 0xC88]
	0x01DE63FC BL 0x1C16CF4
	0x01DE6400 MOVZ W8, 0x1
	0x01DE6404 STRB W8, [X20 + 0xCA5]
	0x01DE6408 LDR X0, [X21]
	0x01DE640C MOV X1, X31
	0x01DE6410 BL 0x3C124EC
	0x01DE6414 LDR X8, [X19]
	0x01DE6418 ADRP X9, 0xFFFFFFFFFED05000
	0x01DE641C LDR V0, [X9 + 0xE9]
	0x01DE6420 LDP X20, X19, [X31 + 0x10]
	0x01DE6424 LDR X8, [X8 + 0xB8]
	0x01DE6428 STR W0, [X8]
	0x01DE642C STUR V0, [X8 + 0x4]
	0x01DE6430 LDP X30, X21, [X31], #0x20
	0x01DE6434 RET
	0x01DE6438 LDR W1, [X0 + 0x80]
	0x01DE643C B 0x1DE5E8C
	0x01DE6440 STP X30, X19, [X31 - 0x10]!
	0x01DE6444 MOV X19, X0
	0x01DE6448 BL 0x1DE5E2C
	0x01DE644C STR W0, [X19 + 0x80]
	0x01DE6450 LDP X30, X19, [X31], #0x10
	0x01DE6454 RET
	0x01DE6458 STR X30, [X31 - 0x20]!
	0x01DE645C STP X20, X19, [X31 + 0x10]
	0x01DE6460 ADRP X20, 0x25F2000
	0x01DE6464 LDRB W8, [X20 + 0xCA6]
	0x01DE6468 MOV X19, X0
	0x01DE646C TBNZ X8, 0x0, 0x1DE6484
	0x01DE6470 ADRP X0, 0x2312000
	0x01DE6474 LDR X0, [X0 + 0xD88]
	0x01DE6478 BL 0x1C16CF4
	0x01DE647C MOVZ W8, 0x1
	0x01DE6480 STRB W8, [X20 + 0xCA6]
	0x01DE6484 CBZ X19, 0x1DE64DC
	0x01DE6488 ADRP X9, 0x2312000
	0x01DE648C LDR X9, [X9 + 0xD88]
	0x01DE6490 MOVZ W8, 0x1
	0x01DE6494 STRB W8, [X19 + 0x58]
	0x01DE6498 LDR X8, [X19]
	0x01DE649C LDR X1, [X9]
	0x01DE64A0 LDRB W10, [X8 + 0x130]
	0x01DE64A4 LDRB W9, [X1 + 0x130]
	0x01DE64A8 CMP W10, W9
	0x01DE64AC B.CC 0x1DE64D4
	0x01DE64B0 LDR X8, [X8 + 0xC8]
	0x01DE64B4 ADD X8, X8, X9, 0x3, LSL
	0x01DE64B8 LDUR X8, [X8 - 0x8]
	0x01DE64BC CMP X8, X1
	0x01DE64C0 B.NE 0x1DE64D4
	0x01DE64C4 MOV X0, X19
	0x01DE64C8 LDP X20, X19, [X31 + 0x10]
	0x01DE64CC LDR X30, [X31], #0x20
	0x01DE64D0 B 0x1DE5F84
	0x01DE64D4 MOV X0, X19
	0x01DE64D8 BL 0x1C171E0
	0x01DE64DC BL 0x1C16F20
	0x01DE64E0 STP X30, X19, [X31 - 0x10]!
	0x01DE64E4 LDR X8, [X0 + 0x50]
	0x01DE64E8 CBZ X8, 0x1DE64F8
	0x01DE64EC LDR W0, [X8 + 0x3C]
	0x01DE64F0 LDP X30, X19, [X31], #0x10
	0x01DE64F4 RET
	0x01DE64F8 ADRP X0, 0x230D000
	0x01DE64FC LDR X0, [X0 + 0x5B0]
	0x01DE6500 BL 0x1C16D08
	0x01DE6504 BL 0x1C16F10
	0x01DE6508 MOV X19, X0
	0x01DE650C ADRP X0, 0x2312000
	0x01DE6510 LDR X0, [X0 + 0xD98]
	0x01DE6514 BL 0x1C16D08
	0x01DE6518 MOV X1, X0
	0x01DE651C MOV X0, X19
	0x01DE6520 MOV X2, X31
	0x01DE6524 BL 0x337DF1C
	0x01DE6528 ADRP X0, 0x2312000
	0x01DE652C LDR X0, [X0 + 0xDA0]
	0x01DE6530 BL 0x1C16D08
	0x01DE6534 MOV X1, X0
	0x01DE6538 MOV X0, X19
	0x01DE653C BL 0x1C16DEC
	0x01DE6540 STP X30, X19, [X31 - 0x10]!
	0x01DE6544 LDR X8, [X0 + 0x50]
	0x01DE6548 CBZ X8, 0x1DE6558
	0x01DE654C STR W1, [X8 + 0x3C]
	0x01DE6550 LDP X30, X19, [X31], #0x10
	0x01DE6554 RET
	0x01DE6558 ADRP X0, 0x230D000
	0x01DE655C LDR X0, [X0 + 0x5B0]
	0x01DE6560 BL 0x1C16D08
	0x01DE6564 BL 0x1C16F10
	0x01DE6568 MOV X19, X0
	0x01DE656C ADRP X0, 0x2312000
	0x01DE6570 LDR X0, [X0 + 0xD98]
	0x01DE6574 BL 0x1C16D08
	0x01DE6578 MOV X1, X0
	0x01DE657C MOV X0, X19
	0x01DE6580 MOV X2, X31
	0x01DE6584 BL 0x337DF1C
	0x01DE6588 ADRP X0, 0x2312000
	0x01DE658C LDR X0, [X0 + 0xDA8]
	0x01DE6590 BL 0x1C16D08
	0x01DE6594 MOV X1, X0
	0x01DE6598 MOV X0, X19
	0x01DE659C BL 0x1C16DEC
	0x01DE65A0 STP X30, X19, [X31 - 0x10]!
	0x01DE65A4 LDR X8, [X0 + 0x50]
	0x01DE65A8 CBZ X8, 0x1DE65B8
	0x01DE65AC LDR V0, [X8 + 0x40]
	0x01DE65B0 LDP X30, X19, [X31], #0x10
	0x01DE65B4 RET
	0x01DE65B8 ADRP X0, 0x230D000
	0x01DE65BC LDR X0, [X0 + 0x5B0]
	0x01DE65C0 BL 0x1C16D08
	0x01DE65C4 BL 0x1C16F10
	0x01DE65C8 MOV X19, X0
	0x01DE65CC ADRP X0, 0x2312000
	0x01DE65D0 LDR X0, [X0 + 0xDB0]
	0x01DE65D4 BL 0x1C16D08
	0x01DE65D8 MOV X1, X0
	0x01DE65DC MOV X0, X19
	0x01DE65E0 MOV X2, X31
	0x01DE65E4 BL 0x337DF1C
	0x01DE65E8 ADRP X0, 0x2312000
	0x01DE65EC LDR X0, [X0 + 0xDB8]
	0x01DE65F0 BL 0x1C16D08
	0x01DE65F4 MOV X1, X0
	0x01DE65F8 MOV X0, X19
	0x01DE65FC BL 0x1C16DEC
	0x01DE6600 STP X30, X19, [X31 - 0x10]!
	0x01DE6604 LDR X8, [X0 + 0x50]
	0x01DE6608 CBZ X8, 0x1DE6618
	0x01DE660C STR S0, [X8 + 0x40]
	0x01DE6610 LDP X30, X19, [X31], #0x10
	0x01DE6614 RET
	0x01DE6618 ADRP X0, 0x230D000
	0x01DE661C LDR X0, [X0 + 0x5B0]
	0x01DE6620 BL 0x1C16D08
	0x01DE6624 BL 0x1C16F10
	0x01DE6628 MOV X19, X0
	0x01DE662C ADRP X0, 0x2312000
	0x01DE6630 LDR X0, [X0 + 0xDB0]
	0x01DE6634 BL 0x1C16D08
	0x01DE6638 MOV X1, X0
	0x01DE663C MOV X0, X19
	0x01DE6640 MOV X2, X31
	0x01DE6644 BL 0x337DF1C
	0x01DE6648 ADRP X0, 0x2312000
	0x01DE664C LDR X0, [X0 + 0xDC0]
	0x01DE6650 BL 0x1C16D08
	0x01DE6654 MOV X1, X0
	0x01DE6658 MOV X0, X19
	0x01DE665C BL 0x1C16DEC
	0x01DE6660 STR X30, [X31 - 0x10]!
	0x01DE6664 LDR X8, [X0 + 0xC0]
	0x01DE6668 CBZ X8, 0x1DE6678
	0x01DE666C LDR V0, [X8 + 0x28]
	0x01DE6670 LDR X30, [X31], #0x10
	0x01DE6674 RET
	0x01DE6678 BL 0x1C16F20
	0x01DE667C STR X30, [X31 - 0x20]!
	0x01DE6680 STP X20, X19, [X31 + 0x10]
	0x01DE6684 MOV X19, X0
	0x01DE6688 BL 0x1DE64E0
	0x01DE668C SUB W8, W0, 0x1
	0x01DE6690 CMP W8, 0x4
	0x01DE6694 B.HI 0x1DE67A8
	0x01DE6698 ADRP X9, 0xFFFFFFFFFED47000
	0x01DE669C ADD X9, X9, 0x959
	0x01DE66A0 ADR X10, 0x10
	0x01DE66A4 LDRB W11, [X9, X8, LSL]
	0x01DE66A8 ADD X10, X10, X11, 0x2, LSL
	0x01DE66AC BR X10
	0x01DE66B0 LDR X9, [X19 + 0xC0]
	0x01DE66B4 CBZ X9, 0x1DE67D4
	0x01DE66B8 LDR X8, [X9 + 0x38]
	0x01DE66BC CBZ X8, 0x1DE67D4
	0x01DE66C0 LDR W10, [X8 + 0x18]
	0x01DE66C4 CBZ W10, 0x1DE67D8
	0x01DE66C8 LDR X9, [X9 + 0x30]
	0x01DE66CC CBZ X9, 0x1DE67D4
	0x01DE66D0 LDR W10, [X9 + 0x18]
	0x01DE66D4 CBZ W10, 0x1DE67D8
	0x01DE66D8 LDR X0, [X19 + 0xC8]
	0x01DE66DC CBZ X0, 0x1DE67D4
	0x01DE66E0 LDR X10, [X0]
	0x01DE66E4 LDR V0, [X8 + 0x20]
	0x01DE66E8 LDR V2, [X9 + 0x20]
	0x01DE66EC LDR V1, [X19 + 0x1C4]
	0x01DE66F0 LDP X8, X1, [X10 + 0x1F8]
	0x01DE66F4 FDIV S0, S0, S2
	0x01DE66F8 FMUL S0, S1, S0
	0x01DE66FC BLR X8
	0x01DE6700 LDR X8, [X19 + 0x1B0]
	0x01DE6704 CBZ X8, 0x1DE67D4
	0x01DE6708 MOVZ W9, 0x3F800000
	0x01DE670C B 0x1DE6754
	0x01DE6710 LDR X8, [X19 + 0xC0]
	0x01DE6714 CBZ X8, 0x1DE67D4
	0x01DE6718 LDR X8, [X8 + 0x30]
	0x01DE671C CBZ X8, 0x1DE67D4
	0x01DE6720 LDR W9, [X8 + 0x18]
	0x01DE6724 CBZ W9, 0x1DE67D8
	0x01DE6728 LDR X0, [X19 + 0xC8]
	0x01DE672C CBZ X0, 0x1DE67D4
	0x01DE6730 LDR X9, [X0]
	0x01DE6734 LDR V0, [X19 + 0x1C0]
	0x01DE6738 LDR V1, [X8 + 0x20]
	0x01DE673C LDP X8, X1, [X9 + 0x1E8]
	0x01DE6740 FMUL S0, S0, S1
	0x01DE6744 BLR X8
	0x01DE6748 LDR X8, [X19 + 0x1B0]
	0x01DE674C CBZ X8, 0x1DE67D4
	0x01DE6750 MOVZ W9, 0x3F000000
	0x01DE6754 STR W9, [X8 + 0x80]
	0x01DE6758 B 0x1DE67A8
	0x01DE675C LDR X0, [X19 + 0xC8]
	0x01DE6760 CBZ X0, 0x1DE67D4
	0x01DE6764 LDR X8, [X0]
	0x01DE6768 LDR X9, [X8 + 0x208]
	0x01DE676C LDR X1, [X8 + 0x210]
	0x01DE6770 BLR X9
	0x01DE6774 LDR X8, [X19 + 0xC0]
	0x01DE6778 CBZ X8, 0x1DE67D4
	0x01DE677C LDR X20, [X8 + 0xC0]
	0x01DE6780 MOV X0, X19
	0x01DE6784 MOV X1, X31
	0x01DE6788 BL 0x3C32E90
	0x01DE678C CBZ X0, 0x1DE67D4
	0x01DE6790 MOV X1, X31
	0x01DE6794 BL 0x3C3F58C
	0x01DE6798 FMOV S3, 1
	0x01DE679C MOV X0, X20
	0x01DE67A0 MOV X1, X31
	0x01DE67A4 BL 0x1DD1B94
	0x01DE67A8 LDR X20, [X19 + 0x1B0]
	0x01DE67AC MOV X0, X19
	0x01DE67B0 BL 0x1DE64E0
	0x01DE67B4 CBZ X20, 0x1DE67D4
	0x01DE67B8 CMP W0, 0x3
	0x01DE67BC MOV X0, X20
	0x01DE67C0 LDP X20, X19, [X31 + 0x10]
	0x01DE67C4 CSET W1, EQ
	0x01DE67C8 MOV X2, X31
	0x01DE67CC LDR X30, [X31], #0x20
	0x01DE67D0 B 0x1DE74C4
	0x01DE67D4 BL 0x1C16F20
	0x01DE67D8 BL 0x1C16F28
	0x01DE67DC STP X30, X19, [X31 - 0x10]!
	0x01DE67E0 MOV X1, X31
	0x01DE67E4 MOV X19, X0
	0x01DE67E8 BL 0x1DE8598
	0x01DE67EC LDR X0, [X19 + 0xE8]
	0x01DE67F0 CBZ X0, 0x1DE6844
	0x01DE67F4 MOVZ W1, 0x1
	0x01DE67F8 MOV X2, X31
	0x01DE67FC BL 0x3BE1A80
	0x01DE6800 LDR X0, [X19 + 0xE8]
	0x01DE6804 CBZ X0, 0x1DE6844
	0x01DE6808 MOVZ W1, 0x1
	0x01DE680C MOV X2, X31
	0x01DE6810 BL 0x3BE1AC4
	0x01DE6814 LDR X0, [X19 + 0x40]
	0x01DE6818 CBZ X0, 0x1DE6844
	0x01DE681C MOV X1, X31
	0x01DE6820 BL 0x1E93668
	0x01DE6824 TBZ X0, 0x0, 0x1DE6838
	0x01DE6828 MOV X0, X19
	0x01DE682C BL 0x1DE6848
	0x01DE6830 MOV X0, X19
	0x01DE6834 BL 0x1DE6888
	0x01DE6838 MOV X0, X19
	0x01DE683C LDP X30, X19, [X31], #0x10
	0x01DE6840 B 0x1DE667C
	0x01DE6844 BL 0x1C16F20
	0x01DE6848 STP X30, X19, [X31 - 0x10]!
	0x01DE684C LDR X8, [X0]
	0x01DE6850 MOV X1, X31
	0x01DE6854 MOV X19, X0
	0x01DE6858 LDR X9, [X8 + 0x3B8]
	0x01DE685C LDR X2, [X8 + 0x3C0]
	0x01DE6860 BLR X9
	0x01DE6864 FMOV S0, W31
	0x01DE6868 MOV X0, X19
	0x01DE686C MOV X1, X31
	0x01DE6870 BL 0x1DEA540
	0x01DE6874 FMOV S0, W31
	0x01DE6878 MOV X0, X19
	0x01DE687C MOV X1, X31
	0x01DE6880 LDP X30, X19, [X31], #0x10
	0x01DE6884 B 0x1DF38DC
	0x01DE6888 STP X30, X19, [X31 - 0x10]!
	0x01DE688C MOVZ W1, 0x1
	0x01DE6890 MOV X19, X0
	0x01DE6894 BL 0x1DE6540
	0x01DE6898 LDR X9, [X19 + 0xC0]
	0x01DE689C CBZ X9, 0x1DE6910
	0x01DE68A0 LDR X8, [X9 + 0x30]
	0x01DE68A4 CBZ X8, 0x1DE6910
	0x01DE68A8 LDR W10, [X8 + 0x18]
	0x01DE68AC CBZ W10, 0x1DE6914
	0x01DE68B0 LDR X10, [X9 + 0x58]
	0x01DE68B4 CBZ X10, 0x1DE6910
	0x01DE68B8 LDR W11, [X10 + 0x18]
	0x01DE68BC CBZ W11, 0x1DE6914
	0x01DE68C0 LDR X9, [X9 + 0x60]
	0x01DE68C4 CBZ X9, 0x1DE6910
	0x01DE68C8 LDR W11, [X9 + 0x18]
	0x01DE68CC CBZ W11, 0x1DE6914
	0x01DE68D0 LDR X11, [X19]
	0x01DE68D4 LDR V0, [X8 + 0x20]
	0x01DE68D8 LDR V1, [X10 + 0x20]
	0x01DE68DC LDR V2, [X9 + 0x20]
	0x01DE68E0 LDR X8, [X11 + 0x2C8]
	0x01DE68E4 LDR X2, [X11 + 0x2D0]
	0x01DE68E8 MOV X0, X19
	0x01DE68EC MOV W1, W31
	0x01DE68F0 BLR X8
	0x01DE68F4 LDR X8, [X19]
	0x01DE68F8 MOVZ W1, 0x1
	0x01DE68FC MOV X0, X19
	0x01DE6900 LDR X3, [X8 + 0x368]
	0x01DE6904 LDR X2, [X8 + 0x370]
	0x01DE6908 LDP X30, X19, [X31], #0x10
	0x01DE690C BR X3
	0x01DE6910 BL 0x1C16F20
	0x01DE6914 BL 0x1C16F28
	0x01DE6918 STP X30, X19, [X31 - 0x10]!
	0x01DE691C MOV X1, X31
	0x01DE6920 MOV X19, X0
	0x01DE6924 BL 0x1DE89FC
	0x01DE6928 LDR X0, [X19 + 0x40]
	0x01DE692C CBZ X0, 0x1DE6958
	0x01DE6930 MOV X1, X31
	0x01DE6934 BL 0x1E93668
	0x01DE6938 TBZ X0, 0x0, 0x1DE6950
	0x01DE693C MOV X0, X19
	0x01DE6940 BL 0x1DE6848
	0x01DE6944 MOV X0, X19
	0x01DE6948 LDP X30, X19, [X31], #0x10
	0x01DE694C B 0x1DE6888
	0x01DE6950 LDP X30, X19, [X31], #0x10
	0x01DE6954 RET
	0x01DE6958 BL 0x1C16F20
	0x01DE695C SUB X31, X31, 0x40
	0x01DE6960 STR X30, [X31 + 0x20]
	0x01DE6964 STP X20, X19, [X31 + 0x30]
	0x01DE6968 ADRP X20, 0x25F2000
	0x01DE696C LDRB W8, [X20 + 0xCA7]
	0x01DE6970 MOV X19, X0
	0x01DE6974 TBNZ X8, 0x0, 0x1DE698C
	0x01DE6978 ADRP X0, 0x2312000
	0x01DE697C LDR X0, [X0 + 0xDC8]
	0x01DE6980 BL 0x1C16CF4
	0x01DE6984 MOVZ W8, 0x1
	0x01DE6988 STRB W8, [X20 + 0xCA7]
	0x01DE698C MOV X0, X19
	0x01DE6990 MOV X1, X31
	0x01DE6994 BL 0x1DE9038
	0x01DE6998 MOV X0, X19
	0x01DE699C BL 0x1DE64E0
	0x01DE69A0 SUB W8, W0, 0x1
	0x01DE69A4 CMP W8, 0x3
	0x01DE69A8 B.HI 0x1DE6A00
	0x01DE69AC ADRP X9, 0xFFFFFFFFFED47000
	0x01DE69B0 ADD X9, X9, 0x95E
	0x01DE69B4 ADR X10, 0x10
	0x01DE69B8 LDRB W11, [X9, X8, LSL]
	0x01DE69BC ADD X10, X10, X11, 0x2, LSL
	0x01DE69C0 BR X10
	0x01DE69C4 LDR X8, [X19]
	0x01DE69C8 LDR X9, [X8 + 0x388]
	0x01DE69CC LDR X1, [X8 + 0x390]
	0x01DE69D0 B 0x1DE69E0
	0x01DE69D4 LDR X8, [X19]
	0x01DE69D8 LDR X9, [X8 + 0x3C8]
	0x01DE69DC LDR X1, [X8 + 0x3D0]
	0x01DE69E0 MOV X0, X19
	0x01DE69E4 BLR X9
	0x01DE69E8 B 0x1DE6A00
	0x01DE69EC MOV X0, X19
	0x01DE69F0 BL 0x1DE6A64
	0x01DE69F4 B 0x1DE6A00
	0x01DE69F8 MOV X0, X19
	0x01DE69FC BL 0x1DE6ACC

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+64], D15
	003 Move [X31+72], D14
	004 Move [X31+80], D13
	005 Move [X31+88], D12
	006 Move [X31+96], D11
	007 Move [X31+104], D10
	008 Move [X31+112], D9
	009 Move [X31+120], D8
	010 Move [X31+128], X30
	011 Move [X31+136], X23
	012 Move [X31+144], X22
	013 Move [X31+152], X21
	014 Move [X31+160], X20
	015 Move [X31+168], X19
	016 Move X19, 0x25F3000
	017 Move W8, [X19+3226]
	018 Move X20, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x230E000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X19+3226], W8
	028 Move W8, [X20+16]
	029 Move X19, [X20+32]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Compare W8, 0
	032 JumpIfNotEqual {317}
	033 Move TEMP, 0
	034 Not TEMP
	035 Move W8, TEMP
	036 Move [X20+16], W8
	037 Compare X19, 0
	038 JumpIfEqual {492}
	039 Move X22, 0x230E000
	040 Move X22, [X22+1432]
	041 Move X21, [X19+352]
	042 Move X0, [X22]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X21
	048 Move X1, X31
	049 Move X2, X31
	050 Call Object.op_Equality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {317}
	055 Move X8, [X19+352]
	056 Compare X8, 0
	057 JumpIfEqual {492}
	058 Move X0, [X22]
	059 Move X21, [X8+144]
	060 Move W9, [X0+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X21
	065 Move X1, X31
	066 Move X2, X31
	067 Call Object.op_Equality, X0, X1
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {317}
	072 Move W8, 0x3333
	073 NotImplemented "Instruction MOVK not yet implemented."
	074 Move [X20+40], W8
	075 Move W23, 1
	076 Move V0, [X20+40]
	077 Move TEMP, 0
	078 Not TEMP
	079 Move W8, TEMP
	080 Move [X20+16], W8
	081 NotImplemented "Instruction FCMP not yet implemented."
	082 NotImplemented "Instruction CSET not yet implemented."
	083 Compare X19, 0
	084 JumpIfEqual {492}
	085 Move X22, 0x230E000
	086 Move X22, [X22+1432]
	087 Move X21, [X19+352]
	088 Move X0, [X22]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {93}
	092 Call 0x1C17DFC
	093 Move X0, X21
	094 Move X1, X31
	095 Move X2, X31
	096 Move TEMP, X23
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {205}
	100 Call Object.op_Equality, X0, X1
	101 Move TEMP, X0
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfEqual {317}
	105 Move X8, [X19+352]
	106 Compare X8, 0
	107 JumpIfEqual {492}
	108 Move X0, [X22]
	109 Move X21, [X8+144]
	110 Move W9, [X0+224]
	111 Compare W9, 0
	112 JumpIfNotEqual {114}
	113 Call 0x1C17DFC
	114 Move X0, X21
	115 Move X1, X31
	116 Move X2, X31
	117 Call Object.op_Equality, X0, X1
	118 Move TEMP, X0
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfEqual {317}
	122 Move X8, [X19+352]
	123 Compare X8, 0
	124 JumpIfEqual {492}
	125 Move X0, [X8+144]
	126 Compare X0, 0
	127 JumpIfEqual {492}
	128 Move X1, X31
	129 Call Transform.get_position, X0
	130 Move X8, [X19+352]
	131 Compare X8, 0
	132 JumpIfEqual {492}
	133 Move X0, [X8+144]
	134 Move [X31+60], S2
	135 Compare X0, 0
	136 JumpIfEqual {492}
	137 Move X1, X31
	138 Move V10, V1
	139 Move V9, V0
	140 Call Transform.get_forward, X0
	141 Move X0, X19
	142 Move V11, V0
	143 Move V12, V1
	144 Move V13, V2
	145 Call BansheeController.get_headToRootOffset, X0
	146 Move X0, X19
	147 Move X1, X31
	148 Move V14, V0
	149 Move V15, V1
	150 Move V8, V2
	151 Call Component.get_transform, X0
	152 Compare X0, 0
	153 JumpIfEqual {492}
	154 Move X8, -19902464
	155 Move V0, [X8+188]
	156 Move V3, [X31+60]
	157 Move X1, X31
	158 Multiply S1, S11, S0
	159 Multiply S2, S12, S0
	160 Multiply S0, S13, S0
	161 Add S1, S9, S1
	162 Add S2, S10, S2
	163 Add S0, S3, S0
	164 Move [X31+56], S2
	165 Move [X31+64], S1
	166 Add S12, S14, S1
	167 Add S13, S15, S2
	168 Move [X31+52], S0
	169 Add S14, S8, S0
	170 Call Transform.get_position, X0
	171 Move X21, 0x25F3000
	172 Move W8, [X21+1925]
	173 Move V8, V0
	174 Move V9, V1
	175 Move V11, V2
	176 Compare W8, 0
	177 JumpIfNotEqual {183}
	178 Move X0, 0x230E000
	179 Move X0, [X0+1448]
	180 Call 0x1C17CF4
	181 Move W8, 1
	182 Move [X21+1925], W8
	183 Move X8, 0x230E000
	184 Move X8, [X8+1448]
	185 Subtract S10, S12, S8
	186 Subtract S9, S13, S9
	187 Subtract S8, S14, S11
	188 Move X0, [X8]
	189 Move W8, [X0+224]
	190 Compare W8, 0
	191 JumpIfNotEqual {193}
	192 Call 0x1C17DFC
	193 Multiply S0, S10, S10
	194 Multiply S1, S9, S9
	195 Move X8, -19902464
	196 Add S0, S0, S1
	197 Move V1, [X8+380]
	198 Multiply S2, S8, S8
	199 Add S0, S2, S0
	200 NotImplemented "Instruction FSQRT not yet implemented."
	201 NotImplemented "Instruction FCMP not yet implemented."
	202 NotImplemented "Instruction FDIV not yet implemented."
	203 NotImplemented "Instruction FDIV not yet implemented."
	204 NotImplemented "Instruction FDIV not yet implemented."
	205 Call Object.op_Inequality, X0, X1
	206 Move TEMP, X0
	207 And TEMP, TEMP, 1
	208 Compare TEMP, 1
	209 JumpIfNotEqual {314}
	210 Move X8, [X19+352]
	211 Compare X8, 0
	212 JumpIfEqual {492}
	213 Move X0, [X8+144]
	214 Compare X0, 0
	215 JumpIfEqual {492}
	216 Move X1, X31
	217 Call Transform.get_position, X0
	218 Move X0, X19
	219 Move X1, X31
	220 Move V8, V0
	221 Move V9, V1
	222 Move V10, V2
	223 Call Component.get_transform, X0
	224 Compare X0, 0
	225 JumpIfEqual {492}
	226 Move X1, X31
	227 Call Transform.get_position, X0
	228 Move X20, 0x25F3000
	229 Move W8, [X20+1925]
	230 Move V11, V0
	231 Move V12, V1
	232 Move V13, V2
	233 Compare W8, 0
	234 JumpIfNotEqual {240}
	235 Move X0, 0x230E000
	236 Move X0, [X0+1448]
	237 Call 0x1C17CF4
	238 Move W8, 1
	239 Move [X20+1925], W8
	240 Move X8, 0x230E000
	241 Move X8, [X8+1448]
	242 Subtract S8, S8, S11
	243 Subtract S9, S9, S12
	244 Subtract S10, S10, S13
	245 Move X0, [X8]
	246 Move W8, [X0+224]
	247 Compare W8, 0
	248 JumpIfNotEqual {250}
	249 Call 0x1C17DFC
	250 Multiply S0, S8, S8
	251 Multiply S1, S9, S9
	252 Move X8, -19902464
	253 Add S0, S0, S1
	254 Move V1, [X8+380]
	255 Multiply S2, S10, S10
	256 Add S0, S2, S0
	257 NotImplemented "Instruction FSQRT not yet implemented."
	258 NotImplemented "Instruction FCMP not yet implemented."
	259 NotImplemented "Instruction FDIV not yet implemented."
	260 NotImplemented "Instruction FDIV not yet implemented."
	261 NotImplemented "Instruction FDIV not yet implemented."
	262 Move X20, 0x25F3000
	263 Move W8, [X20+1923]
	264 Compare W8, 0
	265 JumpIfNotEqual {271}
	266 Move X0, 0x230E000
	267 Move X0, [X0+1440]
	268 Call 0x1C17CF4
	269 Move W8, 1
	270 Move [X20+1923], W8
	271 Move X8, 0x230E000
	272 Move X8, [X8+1440]
	273 Move X8, [X8]
	274 Move X8, [X8+184]
	275 Move S8, [X8]
	276 Move S9, [X8+4]
	277 Move V10, [X8+8]
	278 Move X8, [X19+192]
	279 Compare X8, 0
	280 JumpIfEqual {492}
	281 Move X20, [X19+352]
	282 Compare X20, 0
	283 JumpIfEqual {492}
	284 Move X0, [X20+144]
	285 Compare X0, 0
	286 JumpIfEqual {492}
	287 Move V11, [X8+80]
	288 Move W21, [X8+36]
	289 Move X1, X31
	290 Call Transform.get_position, X0
	291 Move X8, [X19+192]
	292 Compare X8, 0
	293 JumpIfEqual {492}
	294 Move X2, [X8+184]
	295 Move X9, [X19+64]
	296 Move X4, [X8+24]
	297 Multiply S3, S8, S11
	298 Multiply S4, S9, S11
	299 Multiply S5, S10, S11
	300 Compare X9, 0
	301 JumpIfEqual {306}
	302 Move X8, [X9+32]
	303 Compare X8, 0
	304 JumpIfEqual {306}
	305 Move W5, [X8]
	306 Move X5, X31
	307 Move W8, [X19+104]
	308 Move X0, X20
	309 Move W1, W21
	310 Move X3, X2
	311 NotImplemented "Instruction BFM not yet implemented."
	312 Move X6, X31
	313 Call NetPlayer.Hit, X0, X1, X2, X3, X4, X5, X6, X7
	314 Move X0, X19
	315 Move [X19+504], X31
	316 Call BansheeController.SetDie, X0
	317 Move W0, W31
	318 Move X20, [X31+160]
	319 Move X19, [X31+168]
	320 Move X22, [X31+144]
	321 Move X21, [X31+152]
	322 Move X30, [X31+128]
	323 Move X23, [X31+136]
	324 Move D9, [X31+112]
	325 Move D8, [X31+120]
	326 Move D11, [X31+96]
	327 Move D10, [X31+104]
	328 Move D13, [X31+80]
	329 Move D12, [X31+88]
	330 Move D15, [X31+64]
	331 Move D14, [X31+72]
	332 Add X31, X31, 176
	333 Return X0
	334 Move X21, 0x25F3000
	335 Move W8, [X21+1923]
	336 Compare W8, 0
	337 JumpIfNotEqual {343}
	338 Move X0, 0x230E000
	339 Move X0, [X0+1440]
	340 Call 0x1C17CF4
	341 Move W8, 1
	342 Move [X21+1923], W8
	343 Move X8, 0x230E000
	344 Move X8, [X8+1440]
	345 Move X8, [X8]
	346 Move X8, [X8+184]
	347 Move S10, [X8]
	348 Move S9, [X8+4]
	349 Move V8, [X8+8]
	350 Move X0, [X19+496]
	351 Compare X0, 0
	352 JumpIfEqual {492}
	353 Move X1, X31
	354 Call Transform.get_position, X0
	355 Move X8, [X19+352]
	356 Compare X8, 0
	357 JumpIfEqual {492}
	358 Move X0, [X8+144]
	359 Move [X31+48], S14
	360 Compare X0, 0
	361 JumpIfEqual {492}
	362 Move X1, X31
	363 Move [X31+28], S2
	364 Move [X31+36], S1
	365 Move [X31+36], S0
	366 Move [X31+44], S13
	367 Move [X31+16], S8
	368 Move [X31+24], S9
	369 Move [X31+24], S10
	370 Move [X31+44], S12
	371 Call Transform.get_forward, X0
	372 NotImplemented "Instruction FNEG not yet implemented."
	373 NotImplemented "Instruction FNEG not yet implemented."
	374 NotImplemented "Instruction FNEG not yet implemented."
	375 Move X0, X31
	376 Call Quaternion.LookRotation, X0
	377 Move X0, X19
	378 Move X1, X31
	379 Move V14, V0
	380 Move V15, V1
	381 Move V8, V2
	382 Move V9, V3
	383 Call Component.get_transform, X0
	384 Move X21, X0
	385 Move X0, X19
	386 Move X1, X31
	387 Call Component.get_transform, X0
	388 Compare X0, 0
	389 JumpIfEqual {492}
	390 Move X1, X31
	391 Call Transform.get_rotation, X0
	392 Move X0, X19
	393 Move X1, X31
	394 Move V10, V0
	395 Move V11, V1
	396 Move V12, V2
	397 Move V13, V3
	398 Call MobController.get_deltaTime, X0
	399 Move S1, 5
	400 Multiply S0, S0, S1
	401 Move [X31], S0
	402 Move V0, V10
	403 Move V1, V11
	404 Move V2, V12
	405 Move V3, V13
	406 Move V4, V14
	407 Move V5, V15
	408 Move V6, V8
	409 Move V7, V9
	410 Move X0, X31
	411 Call Quaternion.Slerp, X0, X1, V0
	412 Compare X21, 0
	413 JumpIfEqual {492}
	414 Move V4, [X31+60]
	415 Move S6, [X31+32]
	416 Move S5, [X31+36]
	417 Move V7, [X31+28]
	418 Move X0, X21
	419 Move X1, X31
	420 Subtract S4, S4, S5
	421 Move V5, [X31+56]
	422 Multiply S4, S4, S4
	423 Subtract S5, S5, S6
	424 Move V6, [X31+52]
	425 Multiply S5, S5, S5
	426 Add S4, S4, S5
	427 Subtract S6, S6, S7
	428 Multiply S5, S6, S6
	429 Add S8, S5, S4
	430 Call Transform.set_rotation, X0, X1
	431 Move X8, -19902464
	432 Move V0, [X8+816]
	433 Move S10, [X31+40]
	434 Move S9, [X31+44]
	435 Move V11, [X31+48]
	436 NotImplemented "Instruction FCMP not yet implemented."
	437 Move V8, [X20+40]
	438 Move X0, X31
	439 Call Time.get_deltaTime
	440 Subtract S0, S8, S0
	441 Move X0, X19
	442 Move X1, X31
	443 Move [X20+40], S0
	444 Call Component.get_transform, X0
	445 Compare X0, 0
	446 JumpIfEqual {492}
	447 Move V0, V9
	448 Move V1, V10
	449 Move V2, V11
	450 Move X0, X19
	451 Move X1, X31
	452 Call Component.get_transform, X0
	453 Compare X0, 0
	454 JumpIfEqual {492}
	455 Move X1, X31
	456 Move X21, X0
	457 Call Transform.get_position, X0
	458 Move X8, [X19+192]
	459 Compare X8, 0
	460 JumpIfEqual {492}
	461 Move X8, [X8+56]
	462 Compare X8, 0
	463 JumpIfEqual {492}
	464 Move W9, [X8+24]
	465 Compare W9, 0
	466 JumpIfEqual {493}
	467 Move V8, V0
	468 Move V9, V1
	469 Move V0, [X8+32]
	470 Move V1, [X31+24]
	471 Move X0, X19
	472 Move X1, X31
	473 Move V10, V2
	474 Multiply S11, S1, S0
	475 Move V1, [X31+20]
	476 Multiply S12, S1, S0
	477 Move V1, [X31+16]
	478 Multiply S13, S1, S0
	479 Call MobController.get_deltaTime, X0
	480 Multiply S1, S11, S0
	481 Multiply S2, S12, S0
	482 Multiply S3, S13, S0
	483 Add S0, S8, S1
	484 Add S1, S9, S2
	485 Add S2, S10, S3
	486 Move X0, X21
	487 Move X1, X31
	488 Call Transform.set_position, X0, X1
	489 Move W0, 1
	490 Move [X20+24], X31
	491 Move [X20+16], W0
	492 Call 0x1C17F20
	493 Call 0x1C17F28

Method: System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()

Disassembly:
	0x01DE6A00 BL 0x1DD6AE8
	0x01DE6A04 TBZ X0, 0x0, 0x1DE6A54

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x01DE6A08 LDR X20, [X19 + 0x198]
	0x01DE6A0C CBZ X20, 0x1DE6A54
	0x01DE6A10 MOV X0, X19
	0x01DE6A14 BL 0x1DE64E0
	0x01DE6A18 ADRP X8, 0x2312000
	0x01DE6A1C LDR X8, [X8 + 0xDC8]
	0x01DE6A20 MOVN X9, 0x0
	0x01DE6A24 STR W0, [X31 + 0x18]
	0x01DE6A28 ADD X0, X31, 0x8
	0x01DE6A2C LDR X8, [X8]
	0x01DE6A30 MOV X1, X31
	0x01DE6A34 STP X8, X9, [X31 + 0x8]
	0x01DE6A38 BL 0x33B162C
	0x01DE6A3C LDR X8, [X20 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x230E000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x2313000
	011 Move X0, [X0+3400]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x01DE6A40 LDR X9, [X20 + 0x18]
	0x01DE6A44 LDR X2, [X20 + 0x28]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

