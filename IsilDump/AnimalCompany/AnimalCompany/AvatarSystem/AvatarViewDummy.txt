Type: AnimalCompany.AvatarSystem.AvatarViewDummy

Method: System.Void Awake()

Disassembly:
	0x01D66240 FCMP S27, S8
	0x01D66244 FADD S9, S10, S9
	0x01D66248 B.PL 0x1D6628C
	0x01D6624C FCMP S27, S9
	0x01D66250 B.PL 0x1D6628C
	0x01D66254 MOV V8.16B, V27.16B
	0x01D66258 LDR V27, [X31 + 0x84]
	0x01D6625C MOV V15.16B, V6.16B
	0x01D66260 MOV V16.16B, V31.16B
	0x01D66264 MOV V7.16B, V20.16B
	0x01D66268 MOV V24.16B, V23.16B
	0x01D6626C MOV V25.16B, V19.16B
	0x01D66270 MOV V26.16B, V18.16B
	0x01D66274 MOV V10.16B, V11.16B
	0x01D66278 MOV V11.16B, V12.16B
	0x01D6627C MOV V14.16B, V13.16B
	0x01D66280 MOV V12.16B, V3.16B
	0x01D66284 MOV V13.16B, V4.16B
	0x01D66288 B 0x1D662F4
	0x01D6628C FCMP S8, S27
	0x01D66290 LDR V27, [X31 + 0x84]
	0x01D66294 MOV V10.16B, V11.16B
	0x01D66298 MOV V11.16B, V12.16B
	0x01D6629C MOV V14.16B, V13.16B
	0x01D662A0 MOV V12.16B, V3.16B
	0x01D662A4 MOV V13.16B, V4.16B
	0x01D662A8 B.PL 0x1D662B4
	0x01D662AC FCMP S8, S9
	0x01D662B0 B.MI 0x1D662F4
	0x01D662B4 MOV V8.16B, V9.16B
	0x01D662B8 MOV V15.16B, V30.16B
	0x01D662BC MOV V16.16B, V28.16B
	0x01D662C0 MOV V7.16B, V29.16B
	0x01D662C4 MOV V24.16B, V22.16B
	0x01D662C8 MOV V25.16B, V21.16B
	0x01D662CC MOV V26.16B, V17.16B
	0x01D662D0 B 0x1D662F4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2673000
	005 Move W8, [X20+2155]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x238F000
	012 Move X0, [X0+2840]
	013 Call 0x1C17CF4
	014 Move X0, 0x2390000
	015 Move X0, [X0+672]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2155], W8
	019 Move W1, [X19+32]
	020 Move X0, X19
	021 Call AvatarViewDummy.GetAvatarState, X0, X1
	022 Compare X0, 0
	023 JumpIfEqual {50}
	024 Move X20, X0
	025 Move X0, [X19+40]
	026 Compare X0, 0
	027 JumpIfEqual {50}
	028 Move X1, [X20+96]
	029 Move X2, X31
	030 Call PlayerView.UpdateAvatar, X0, X1
	031 Move X8, [X20+96]
	032 Compare X8, 0
	033 JumpIfEqual {50}
	034 Move X8, [X8+80]
	035 Compare X8, 0
	036 JumpIfEqual {50}
	037 Move X0, [X19+40]
	038 Compare X0, 0
	039 JumpIfEqual {50}
	040 Move S2, [X8+84]
	041 Move S3, [X8+88]
	042 Move S0, [X8+76]
	043 Move S1, [X8+80]
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X1, X31
	047 Move X30, [X31+32]
	048 Call PlayerView.SetColor, X0, X1
	049 Return 
	050 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01D668D4 STP X26, X25, [X31 + 0x70]
	0x01D668D8 STP X24, X23, [X31 + 0x80]
	0x01D668DC STP X22, X21, [X31 + 0x90]
	0x01D668E0 STP X20, X19, [X31 + 0xA0]
	0x01D668E4 CBZ X0, 0x1D66B08
	0x01D668E8 LDR X20, [X0 + 0x10]
	0x01D668EC MOV X24, X0
	0x01D668F0 CBZ X20, 0x1D66B08
	0x01D668F4 MOV X19, X4
	0x01D668F8 MOV X21, X3
	0x01D668FC MOV X22, X2
	0x01D66900 MOV X23, X1
	0x01D66904 MOV X26, X31
	0x01D66908 MOV X25, X31
	0x01D6690C MOVZ W27, 0xC
	0x01D66910 MOV X8, X20
	0x01D66914 LDR W8, [X8 + 0x18]
	0x01D66918 CMP W25, W8
	0x01D6691C B.GE 0x1D66AC4
	0x01D66920 LDR X8, [X24 + 0x18]
	0x01D66924 CBZ X8, 0x1D66B08
	0x01D66928 LDR W9, [X8 + 0x18]
	0x01D6692C CMP W25, W9
	0x01D66930 B.CS 0x1D66B04
	0x01D66934 LDR X9, [X24 + 0x20]
	0x01D66938 CBZ X9, 0x1D66B08
	0x01D6693C LDR W10, [X9 + 0x18]
	0x01D66940 CMP W25, W10
	0x01D66944 B.CS 0x1D66B04
	0x01D66948 LDR X10, [X24 + 0x28]
	0x01D6694C CBZ X10, 0x1D66B08
	0x01D66950 LDR W11, [X10 + 0x18]
	0x01D66954 CMP W25, W11
	0x01D66958 B.CS 0x1D66B04
	0x01D6695C CBZ X21, 0x1D66B08
	0x01D66960 ADD X10, X10, X25, 0x2, LSL
	0x01D66964 LDRSW X12, [X10 + 0x20]
	0x01D66968 LDR W13, [X21 + 0x18]
	0x01D6696C CMP W12, W13
	0x01D66970 B.CS 0x1D66B04
	0x01D66974 CBZ X23, 0x1D66B08
	0x01D66978 ADD X10, X21, X12, 0x2, LSL
	0x01D6697C LDRSW X10, [X10 + 0x20]
	0x01D66980 LDR W14, [X23 + 0x18]
	0x01D66984 CMP W10, W14
	0x01D66988 B.CS 0x1D66B04
	0x01D6698C ADD W11, W12, 0x1
	0x01D66990 CMP W11, W13
	0x01D66994 B.CS 0x1D66B04
	0x01D66998 ADD X11, X21, W11, 0x2, SXTW
	0x01D6699C LDRSW X11, [X11 + 0x20]
	0x01D669A0 CMP W11, W14
	0x01D669A4 B.CS 0x1D66B04
	0x01D669A8 ADD W12, W12, 0x2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2673000
	006 Move X21, 0x2390000
	007 Move W8, [X20+2156]
	008 Move X21, [X21+2464]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2390000
	015 Move X0, [X0+2464]
	016 Call 0x1C17CF4
	017 Move X0, 0x238E000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2156], W8
	022 Move X0, [X21]
	023 Move X20, 0x238E000
	024 Move W8, [X0+224]
	025 Move X20, [X20+1432]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X31
	030 Call NetPlayer.get_localPlayer
	031 Move X8, [X20]
	032 Move X20, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X0, X20
	039 Move X1, X31
	040 Move X2, X31
	041 Call Object.op_Inequality, X0, X1
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {67}
	046 Move X0, [X21]
	047 Move X19, [X19+40]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X0, X31
	053 Call NetPlayer.get_localPlayer
	054 Compare X0, 0
	055 JumpIfEqual {72}
	056 Compare X19, 0
	057 JumpIfEqual {72}
	058 Move V0, [X0+372]
	059 Move X0, X19
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X1, X31
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Call PlayerView.UpdateVoice, X0, V0
	066 Return 
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Move X21, [X31+40]
	071 Return 
	072 Call 0x1C17F20

Method: UnityEngine.Color GetRandomColor()

Disassembly:
	0x01D669AC CMP W12, W13
	0x01D669B0 B.CS 0x1D66B04
	0x01D669B4 ADD X12, X21, W12, 0x2, SXTW
	0x01D669B8 LDRSW X12, [X12 + 0x20]
	0x01D669BC CMP W12, W14
	0x01D669C0 B.CS 0x1D66B04
	0x01D669C4 CBZ X22, 0x1D66B08
	0x01D669C8 LDR W13, [X22 + 0x18]
	0x01D669CC CMP W10, W13
	0x01D669D0 B.CS 0x1D66B04
	0x01D669D4 CMP W11, W13
	0x01D669D8 B.CS 0x1D66B04
	0x01D669DC CMP W12, W13
	0x01D669E0 B.CS 0x1D66B04
	0x01D669E4 ADD X8, X8, X26
	0x01D669E8 ADD X9, X9, X26
	0x01D669EC LDP S0, S1, [X8 + 0x20]

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move X0, X31
	005 Call Random.get_value
	006 Move X0, X31
	007 Move V8, V0
	008 Call Random.get_value
	009 Move X0, X31
	010 Move V9, V0
	011 Call Random.get_value
	012 Move X30, [X31+16]
	013 Move S3, 1
	014 Move V2, V0
	015 Move V0, V8
	016 Move V1, V9
	017 Move D9, [X31+32]
	018 Move D8, [X31+40]
	019 Return X0

Method: SpatialSys.ObservableState.TempStateRoot`1<AnimalCompany.UserAvatarState> GetAvatarState(AnimalCompany.AvatarSystem.AvatarViewDummy/AvatarType avatarType)

Disassembly:
	0x01D662D4 FSUB S7, S29, S26
	0x01D662D8 FSUB S16, S28, S25
	0x01D662DC FSUB S15, S8, S24
	0x01D662E0 FMUL S6, S7, S7
	0x01D662E4 FMUL S17, S16, S16
	0x01D662E8 FADD S6, S17, S6
	0x01D662EC FMUL S17, S15, S15
	0x01D662F0 FADD S8, S17, S6
	0x01D662F4 LDR W13, [X28 + 0x18]
	0x01D662F8 CMP X8, X13
	0x01D662FC B.CS 0x1D663DC
	0x01D66300 LDR V6, [X24, X8, LSL #2]
	0x01D66304 FCMP S8, S6
	0x01D66308 B.PL 0x1D66354
	0x01D6630C STR S8, [X24, X8, LSL #2]
	0x01D66310 CBZ X25, 0x1D663E0
	0x01D66314 LDR W9, [X25 + 0x18]
	0x01D66318 CMP X8, X9
	0x01D6631C B.CS 0x1D663DC
	0x01D66320 STP S26, S25, [X11 - 0x8]
	0x01D66324 STR S24, [X11]
	0x01D66328 CBZ X26, 0x1D663E0
	0x01D6632C LDR W9, [X26 + 0x18]
	0x01D66330 CMP X8, X9
	0x01D66334 B.CS 0x1D663DC
	0x01D66338 STR W21, [X20, X8, LSL #2]
	0x01D6633C LDR W9, [X27 + 0x18]
	0x01D66340 CMP X8, X9
	0x01D66344 B.CS 0x1D663DC
	0x01D66348 STP S7, S16, [X10 - 0x8]
	0x01D6634C STR S15, [X10]
	0x01D66350 LDR W9, [X19 + 0x18]
	0x01D66354 LDP S15, S9, [X31 + 0x88]
	0x01D66358 ADD X8, X8, 0x1
	0x01D6635C ADD X12, X12, 0xC
	0x01D66360 ADD X11, X11, 0xC
	0x01D66364 CMP X8, W9, SXTW
	0x01D66368 ADD X10, X10, 0xC
	0x01D6636C B.LT 0x1D65FF4
	0x01D66370 LDR W8, [X22 + 0x18]
	0x01D66374 ADD W21, W21, 0x3
	0x01D66378 CMP W21, W8
	0x01D6637C B.LT 0x1D65BE8
	0x01D66380 LDP X3, X2, [X31 + 0x10]
	0x01D66384 MOV X0, X22
	0x01D66388 MOV X1, X23
	0x01D6638C MOV X4, X19
	0x01D66390 BL 0x1D663E4
	0x01D66394 LDR X8, [X31 + 0x20]
	0x01D66398 CBZ X8, 0x1D663E0
	0x01D6639C STP X19, X25, [X8 + 0x10]
	0x01D663A0 STP X27, X26, [X8 + 0x20]
	0x01D663A4 LDP X20, X19, [X31 + 0x140]
	0x01D663A8 LDP X22, X21, [X31 + 0x130]
	0x01D663AC LDP X24, X23, [X31 + 0x120]
	0x01D663B0 LDP X26, X25, [X31 + 0x110]
	0x01D663B4 LDP X28, X27, [X31 + 0x100]
	0x01D663B8 LDP X29, X30, [X31 + 0xF0]
	0x01D663BC LDP D9, D8, [X31 + 0xE0]
	0x01D663C0 LDP D11, D10, [X31 + 0xD0]
	0x01D663C4 LDP D13, D12, [X31 + 0xC0]
	0x01D663C8 LDP D15, D14, [X31 + 0xB0]
	0x01D663CC STR X0, [X8 + 0x30]
	0x01D663D0 MOV X0, X8
	0x01D663D4 ADD X31, X31, 0x150
	0x01D663D8 RET
	0x01D663DC BL 0x1C16F28
	0x01D663E0 BL 0x1C16F20
	0x01D663E4 SUB X31, X31, 0x120
	0x01D663E8 STP D15, D14, [X31 + 0x80]
	0x01D663EC STP D13, D12, [X31 + 0x90]
	0x01D663F0 STP D11, D10, [X31 + 0xA0]
	0x01D663F4 STP D9, D8, [X31 + 0xB0]
	0x01D663F8 STP X29, X30, [X31 + 0xC0]
	0x01D663FC STP X28, X27, [X31 + 0xD0]
	0x01D66400 STP X26, X25, [X31 + 0xE0]
	0x01D66404 STP X24, X23, [X31 + 0xF0]
	0x01D66408 STP X22, X21, [X31 + 0x100]
	0x01D6640C STP X20, X19, [X31 + 0x110]
	0x01D66410 ADRP X20, 0x2672000
	0x01D66414 LDRB W8, [X20 + 0x86F]
	0x01D66418 MOV X21, X4
	0x01D6641C MOV X22, X3
	0x01D66420 MOV X29, X1
	0x01D66424 MOV X19, X0
	0x01D66428 STR X2, [X31 + 0x48]
	0x01D6642C TBNZ X8, 0x0, 0x1D664A4
	0x01D66430 ADRP X0, 0x238F000
	0x01D66434 LDR X0, [X0 + 0x9B8]
	0x01D66438 BL 0x1C16CF4
	0x01D6643C ADRP X0, 0x238F000
	0x01D66440 LDR X0, [X0 + 0x9C0]
	0x01D66444 BL 0x1C16CF4
	0x01D66448 ADRP X0, 0x238F000
	0x01D6644C LDR X0, [X0 + 0x9C8]
	0x01D66450 BL 0x1C16CF4
	0x01D66454 ADRP X0, 0x238F000
	0x01D66458 LDR X0, [X0 + 0x9D0]
	0x01D6645C BL 0x1C16CF4
	0x01D66460 ADRP X0, 0x238F000
	0x01D66464 LDR X0, [X0 + 0x9D8]
	0x01D66468 BL 0x1C16CF4
	0x01D6646C ADRP X0, 0x238F000
	0x01D66470 LDR X0, [X0 + 0x9E0]
	0x01D66474 BL 0x1C16CF4
	0x01D66478 ADRP X0, 0x238E000
	0x01D6647C LDR X0, [X0 + 0xE08]
	0x01D66480 BL 0x1C16CF4
	0x01D66484 ADRP X0, 0x238F000
	0x01D66488 LDR X0, [X0 + 0x9E8]
	0x01D6648C BL 0x1C16CF4
	0x01D66490 ADRP X0, 0x238F000
	0x01D66494 LDR X0, [X0 + 0x9F0]
	0x01D66498 BL 0x1C16CF4
	0x01D6649C MOVZ W8, 0x1
	0x01D664A0 STRB W8, [X20 + 0x86F]
	0x01D664A4 STR W31, [X31 + 0x78]
	0x01D664A8 STR X31, [X31 + 0x70]
	0x01D664AC CBZ X29, 0x1D668C4
	0x01D664B0 ADRP X8, 0x238F000
	0x01D664B4 LDR X8, [X8 + 0x9B8]
	0x01D664B8 LDR W1, [X29 + 0x18]
	0x01D664BC LDR X0, [X8]
	0x01D664C0 BL 0x1C16D6C
	0x01D664C4 LDR X8, [X29 + 0x18]
	0x01D664C8 MOV X20, X0
	0x01D664CC CMP W8, 0x1
	0x01D664D0 B.LT 0x1D666E8
	0x01D664D4 LDR X9, [X31 + 0x48]
	0x01D664D8 CBZ X9, 0x1D668C4
	0x01D664DC ADRP X9, 0xFFFFFFFFFED84000
	0x01D664E0 LDR V0, [X9 + 0x108]
	0x01D664E4 ADRP X11, 0xFFFFFFFFFED83000
	0x01D664E8 ADRP X25, 0x238D000
	0x01D664EC LDR V14, [X11 + 0xFB8]
	0x01D664F0 STR S0, [X31 + 0x44]
	0x01D664F4 LDR X25, [X25 + 0x5A8]
	0x01D664F8 MOVZ W10, 0x999A
	0x01D664FC MOVK W10, 0xBE190000
	0x01D66500 MOV X26, X31
	0x01D66504 AND X8, X8, 0x0
	0x01D66508 MOVZ W27, 0xC
	0x01D6650C UNIMPLEMENTED
	0x01D66510 ADRP X28, 0x2672000
	0x01D66514 LDR X9, [X31 + 0x48]
	0x01D66518 LDR W9, [X9 + 0x18]
	0x01D6651C CMP X26, X9
	0x01D66520 B.CS 0x1D668C0
	0x01D66524 CMP X26, W8, UXTW
	0x01D66528 B.CS 0x1D668C0
	0x01D6652C CBZ X22, 0x1D668C4
	0x01D66530 LDR W8, [X22 + 0x18]
	0x01D66534 CMP W8, 0x1
	0x01D66538 B.LT 0x1D666D8
	0x01D6653C LDR X9, [X31 + 0x48]
	0x01D66540 NOP
	0x01D66544 MADD X10, X26, X27, X29
	0x01D66548 LDR V2, [X31 + 0x44]
	0x01D6654C LDR V0, [X10 + 0x20]
	0x01D66550 NOP
	0x01D66554 MADD X9, X26, X27, X9
	0x01D66558 LDUR V3, [X9 + 0x24]
	0x01D6655C LDR V8, [X9 + 0x20]
	0x01D66560 LDUR V1, [X10 + 0x24]
	0x01D66564 MOVZ W23, 0x2
	0x01D66568 MOV S9, V3.S[1]
	0x01D6656C FMUL S2, S8, S2
	0x01D66570 STR V3, [X31 + 0x5]
	0x00000000 INVALID
	0x01D66578 FADD S10, S0, S2
	0x01D6657C FADD V0.2S, V1.2S, V3.2S
	0x01D66580 MOV S11, V0.S[1]
	0x01D66584 STR V0, [X31 + 0x6]
	0x01D66588 SUB W11, W23, 0x2
	0x01D6658C CMP W11, W8
	0x01D66590 B.CS 0x1D668C0
	0x01D66594 CBZ X21, 0x1D668C4
	0x01D66598 ADD X9, X22, W11, 0x2, SXTW
	0x01D6659C LDRSW X9, [X9 + 0x20]
	0x01D665A0 LDR W10, [X21 + 0x18]
	0x01D665A4 CMP W9, W10
	0x01D665A8 B.CS 0x1D668C0
	0x01D665AC ADD W12, W11, 0x1
	0x01D665B0 CMP W12, W8
	0x01D665B4 B.CS 0x1D668C0
	0x01D665B8 SUB W11, W23, 0x1
	0x01D665BC ADD X11, X22, W11, 0x2, SXTW
	0x01D665C0 LDRSW X11, [X11 + 0x20]
	0x01D665C4 CMP W11, W10
	0x01D665C8 B.CS 0x1D668C0
	0x01D665CC ADD W24, W12, 0x1
	0x01D665D0 CMP W24, W8
	0x01D665D4 B.CS 0x1D668C0
	0x01D665D8 ADD X8, X22, W23, 0x2, SXTW
	0x01D665DC LDRSW X8, [X8 + 0x20]
	0x01D665E0 CMP W8, W10
	0x01D665E4 B.CS 0x1D668C0
	0x01D665E8 MADD X9, X9, X27, X21
	0x01D665EC MADD X10, X11, X27, X21
	0x01D665F0 MADD X8, X8, X27, X21
	0x01D665F4 LDP S0, S1, [X9 + 0x20]
	0x01D665F8 LDR V2, [X9 + 0x28]
	0x01D665FC LDP S3, S4, [X10 + 0x20]
	0x01D66600 LDR V5, [X10 + 0x28]
	0x01D66604 LDR X9, [X8 + 0x20]
	0x01D66608 LDR V6, [X8 + 0x28]
	0x01D6660C STR S3, [X31 + 0x10]
	0x01D66610 STP S4, S5, [X31 + 0x14]
	0x01D66614 STP S1, S2, [X31 + 0x4]
	0x01D66618 ADD X0, X31, 0x70
	0x01D6661C STR S0, [X31]
	0x01D66620 MOV V0.16B, V10.16B
	0x01D66624 LDP V4, V1, [X31 + 0x50]
	0x01D66628 MOV V2.16B, V11.16B
	0x01D6662C MOV V3.16B, V8.16B
	0x01D66630 MOV V5.16B, V9.16B
	0x01D66634 MOV X1, X31
	0x01D66638 STR S6, [X31 + 0x28]
	0x01D6663C STR X9, [X31 + 0x20]
	0x01D66640 BL 0x1D79A04
	0x01D66644 TBZ X0, 0x0, 0x1D666A4
	0x01D66648 LDR V15, [X31 + 0x70]
	0x01D6664C LDRB W8, [X28 + 0x85C]
	0x01D66650 LDUR V12, [X31 + 0x74]
	0x01D66654 CBNZ W8, 0x1D66668
	0x01D66658 MOV X0, X25
	0x01D6665C BL 0x1C16CF4
	0x01D66660 MOVZ W8, 0x1
	0x01D66664 STRB W8, [X28 + 0x85C]
	0x01D66668 LDR X0, [X25]
	0x01D6666C LDR W8, [X0 + 0xE0]
	0x01D66670 CBNZ W8, 0x1D66678
	0x01D66674 BL 0x1C16DFC
	0x01D66678 LDR V1, [X31 + 0x6]
	0x01D6667C FSUB S0, S15, S10
	0x01D66680 FMUL S0, S0, S0
	0x01D66684 FSUB V1.2S, V12.2S, V1.2S
	0x00000000 INVALID
	0x01D6668C FADD S0, S0, S1
	0x01D66690 MOV S1, V1.S[1]
	0x01D66694 FADD S0, S1, S0
	0x01D66698 FSQRT S0, S0
	0x01D6669C FCMP S0, S14
	0x01D666A0 B.MI 0x1D666BC
	0x01D666A4 LDR W8, [X22 + 0x18]
	0x01D666A8 ADD W9, W24, 0x1
	0x01D666AC ADD W23, W23, 0x3
	0x01D666B0 CMP W9, W8
	0x01D666B4 B.LT 0x1D66588
	0x01D666B8 B 0x1D666D8
	0x01D666BC CBZ X20, 0x1D668C4
	0x01D666C0 LDR W8, [X20 + 0x18]
	0x01D666C4 CMP X26, X8
	0x01D666C8 B.CS 0x1D668C0
	0x01D666CC ADD X8, X20, X26
	0x01D666D0 MOVZ W9, 0x1
	0x01D666D4 STRB W9, [X8 + 0x20]
	0x01D666D8 LDR W8, [X29 + 0x18]
	0x01D666DC ADD X26, X26, 0x1
	0x01D666E0 CMP X26, W8, SXTW
	0x01D666E4 B.LT 0x1D66514
	0x01D666E8 CBZ X19, 0x1D668C4
	0x01D666EC ADRP X8, 0x238E000
	0x01D666F0 LDR X8, [X8 + 0xE08]
	0x01D666F4 ADRP X23, 0x238F000
	0x01D666F8 LDR X0, [X8]
	0x01D666FC LDR X23, [X23 + 0x9E0]
	0x01D66700 BL 0x1C16F10
	0x01D66704 LDRSW X8, [X19 + 0x18]
	0x01D66708 MOVZ W22, 0x5556
	0x01D6670C MOVK W22, 0x55550000
	0x01D66710 LDR X2, [X23]
	0x01D66714 MUL X8, X8, X22
	0x01D66718 UBFM X9, X8, 0x3F, 0x3F
	0x01D6671C UBFM X8, X8, 0x20, 0x3F
	0x01D66720 ADD W1, W8, W9
	0x01D66724 MOV X21, X0
	0x01D66728 BL 0x2DA9F8C
	0x01D6672C LDR X8, [X19 + 0x18]
	0x01D66730 CMP W8, 0x1
	0x01D66734 B.LT 0x1D667F0
	0x01D66738 ADRP X24, 0x238F000
	0x01D6673C LDR X24, [X24 + 0x9D8]
	0x01D66740 MOV W23, W31
	0x01D66744 CMP W23, W8
	0x01D66748 B.CS 0x1D668C0
	0x01D6674C CBZ X20, 0x1D668C4
	0x01D66750 ADD X9, X19, W23, 0x2, SXTW
	0x01D66754 LDRSW X9, [X9 + 0x20]
	0x01D66758 LDR W10, [X20 + 0x18]
	0x01D6675C CMP W9, W10
	0x01D66760 B.CS 0x1D668C0
	0x01D66764 ADD W11, W23, 0x1
	0x01D66768 CMP W11, W8
	0x01D6676C B.CS 0x1D668C0
	0x01D66770 ADD X11, X19, W11, 0x2, SXTW
	0x01D66774 LDRSW X11, [X11 + 0x20]
	0x01D66778 CMP W11, W10
	0x01D6677C B.CS 0x1D668C0
	0x01D66780 ADD W12, W23, 0x2
	0x01D66784 CMP W12, W8
	0x01D66788 B.CS 0x1D668C0
	0x01D6678C ADD X12, X19, W12, 0x2, SXTW
	0x01D66790 LDRSW X12, [X12 + 0x20]
	0x01D66794 CMP W12, W10
	0x01D66798 B.CS 0x1D668C0
	0x01D6679C ADD X9, X20, X9
	0x01D667A0 LDRB W9, [X9 + 0x20]
	0x01D667A4 CBZ W9, 0x1D667E4
	0x01D667A8 ADD X9, X20, X11
	0x01D667AC LDRB W9, [X9 + 0x20]
	0x01D667B0 CBZ W9, 0x1D667E4
	0x01D667B4 ADD X9, X20, X12
	0x01D667B8 LDRB W9, [X9 + 0x20]
	0x01D667BC CBZ W9, 0x1D667E4
	0x01D667C0 CBZ X21, 0x1D668C4
	0x01D667C4 LDR X2, [X24]
	0x01D667C8 SMADDL X8, X23, X22, X31
	0x01D667CC UBFM X9, X8, 0x3F, 0x3F
	0x01D667D0 UBFM X8, X8, 0x20, 0x3F
	0x01D667D4 ADD W1, W8, W9
	0x01D667D8 MOV X0, X21
	0x01D667DC BL 0x2DAB03C
	0x01D667E0 LDR X8, [X19 + 0x18]
	0x01D667E4 ADD W23, W23, 0x3
	0x01D667E8 CMP W23, W8
	0x01D667EC B.LT 0x1D66744
	0x01D667F0 ADRP X22, 0x238F000
	0x01D667F4 LDR X22, [X22 + 0x9F0]
	0x01D667F8 LDR X0, [X22]
	0x01D667FC LDR W8, [X0 + 0xE0]
	0x01D66800 CBNZ W8, 0x1D6680C
	0x01D66804 BL 0x1C16DFC
	0x01D66808 LDR X0, [X22]
	0x01D6680C LDR X8, [X0 + 0xB8]
	0x01D66810 ADRP X24, 0x238F000
	0x01D66814 ADRP X23, 0x238F000
	0x01D66818 LDR X19, [X8 + 0x8]
	0x01D6681C LDR X24, [X24 + 0x9C0]
	0x01D66820 LDR X23, [X23 + 0x9C8]
	0x01D66824 CBNZ X19, 0x1D66878
	0x01D66828 LDR W8, [X0 + 0xE0]
	0x01D6682C CBNZ W8, 0x1D66838
	0x01D66830 BL 0x1C16DFC
	0x01D66834 LDR X0, [X22]
	0x01D66838 ADRP X9, 0x238F000
	0x01D6683C LDR X8, [X0 + 0xB8]
	0x01D66840 LDR X9, [X9 + 0x9D0]
	0x01D66844 LDR X20, [X8]
	0x01D66848 LDR X0, [X9]
	0x01D6684C BL 0x1C16F10
	0x01D66850 ADRP X8, 0x238F000
	0x01D66854 LDR X8, [X8 + 0x9E8]
	0x01D66858 MOV X1, X20
	0x01D6685C MOV X3, X31
	0x01D66860 MOV X19, X0
	0x01D66864 LDR X2, [X8]
	0x01D66868 BL 0x2D2CF74
	0x01D6686C LDR X8, [X22]
	0x01D66870 LDR X8, [X8 + 0xB8]
	0x01D66874 STR X19, [X8 + 0x8]
	0x01D66878 LDR X2, [X24]
	0x01D6687C MOV X0, X21
	0x01D66880 MOV X1, X19
	0x01D66884 BL 0x21C98D4
	0x01D66888 LDR X1, [X23]
	0x01D6688C BL 0x21D54D4
	0x01D66890 LDP X20, X19, [X31 + 0x110]
	0x01D66894 LDP X22, X21, [X31 + 0x100]
	0x01D66898 LDP X24, X23, [X31 + 0xF0]
	0x01D6689C LDP X26, X25, [X31 + 0xE0]
	0x01D668A0 LDP X28, X27, [X31 + 0xD0]
	0x01D668A4 LDP X29, X30, [X31 + 0xC0]
	0x01D668A8 LDP D9, D8, [X31 + 0xB0]
	0x01D668AC LDP D11, D10, [X31 + 0xA0]
	0x01D668B0 LDP D13, D12, [X31 + 0x90]
	0x01D668B4 LDP D15, D14, [X31 + 0x80]
	0x01D668B8 ADD X31, X31, 0x120
	0x01D668BC RET
	0x01D668C0 BL 0x1C16F28
	0x01D668C4 BL 0x1C16F20
	0x01D668C8 SUB X31, X31, 0xB0
	0x01D668CC STP D9, D8, [X31 + 0x50]
	0x01D668D0 STP X30, X27, [X31 + 0x60]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x2673000
	011 Move X21, 0x2390000
	012 Move X19, 0x2390000
	013 Move W8, [X22+2157]
	014 Move X21, [X21+800]
	015 Move X19, [X19+792]
	016 Move W20, W1
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {107}
	021 Move X0, 0x238F000
	022 Move X0, [X0+2560]
	023 Call 0x1C17CF4
	024 Move X0, 0x238E000
	025 Move X0, [X0+2304]
	026 Call 0x1C17CF4
	027 Move X0, 0x2390000
	028 Move X0, [X0+792]
	029 Call 0x1C17CF4
	030 Move X0, 0x2390000
	031 Move X0, [X0+672]
	032 Call 0x1C17CF4
	033 Move X0, 0x2390000
	034 Move X0, [X0+800]
	035 Call 0x1C17CF4
	036 Move X0, 0x2390000
	037 Move X0, [X0+2280]
	038 Call 0x1C17CF4
	039 Move X0, 0x2390000
	040 Move X0, [X0+2288]
	041 Call 0x1C17CF4
	042 Move X0, 0x2390000
	043 Move X0, [X0+2296]
	044 Call 0x1C17CF4
	045 Move X0, 0x2390000
	046 Move X0, [X0+2304]
	047 Call 0x1C17CF4
	048 Move X0, 0x2390000
	049 Move X0, [X0+2312]
	050 Call 0x1C17CF4
	051 Move X0, 0x2390000
	052 Move X0, [X0+2320]
	053 Call 0x1C17CF4
	054 Move X0, 0x2390000
	055 Move X0, [X0+2328]
	056 Call 0x1C17CF4
	057 Move X0, 0x2390000
	058 Move X0, [X0+2336]
	059 Call 0x1C17CF4
	060 Move X0, 0x2390000
	061 Move X0, [X0+2344]
	062 Call 0x1C17CF4
	063 Move X0, 0x2390000
	064 Move X0, [X0+2352]
	065 Call 0x1C17CF4
	066 Move X0, 0x2390000
	067 Move X0, [X0+2360]
	068 Call 0x1C17CF4
	069 Move X0, 0x2390000
	070 Move X0, [X0+2368]
	071 Call 0x1C17CF4
	072 Move X0, 0x2390000
	073 Move X0, [X0+2376]
	074 Call 0x1C17CF4
	075 Move X0, 0x2390000
	076 Move X0, [X0+2384]
	077 Call 0x1C17CF4
	078 Move X0, 0x2390000
	079 Move X0, [X0+2392]
	080 Call 0x1C17CF4
	081 Move X0, 0x2390000
	082 Move X0, [X0+2400]
	083 Call 0x1C17CF4
	084 Move X0, 0x2390000
	085 Move X0, [X0+2408]
	086 Call 0x1C17CF4
	087 Move X0, 0x2390000
	088 Move X0, [X0+2416]
	089 Call 0x1C17CF4
	090 Move X0, 0x2390000
	091 Move X0, [X0+2424]
	092 Call 0x1C17CF4
	093 Move X0, 0x2390000
	094 Move X0, [X0+2432]
	095 Call 0x1C17CF4
	096 Move X0, 0x2390000
	097 Move X0, [X0+2440]
	098 Call 0x1C17CF4
	099 Move X0, 0x2390000
	100 Move X0, [X0+2448]
	101 Call 0x1C17CF4
	102 Move X0, 0x2390000
	103 Move X0, [X0+2456]
	104 Call 0x1C17CF4
	105 Move W8, 1
	106 Move [X22+2157], W8
	107 Call AvatarViewDummy.GetRandomColor, X0
	108 Move X0, [X21]
	109 Move V8, V0
	110 Move V9, V1
	111 Move V10, V2
	112 Move V11, V3
	113 Call 0x1C17F10
	114 Move X2, [X19]
	115 Move X1, X31
	116 Move X19, X0
	117 Call 0x26B0B18, X0, X1
	118 NotImplemented "Instruction CMP not yet implemented."
	119 NotImplemented "Instruction CMP not yet implemented."
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Compare X19, 0
	122 JumpIfEqual {451}
	123 Move X8, [X19+96]
	124 Compare X8, 0
	125 JumpIfEqual {451}
	126 Move X0, [X8+88]
	127 Compare X0, 0
	128 JumpIfEqual {451}
	129 Move X8, 0x2390000
	130 Move X20, 0x238E000
	131 Move X8, [X8+2408]
	132 Move X20, [X20+2304]
	133 Move X1, [X8]
	134 Move X2, [X20]
	135 Call StatePrimitive`1<Object>.set_value, X0, X1
	136 Move X8, [X19+96]
	137 Compare X8, 0
	138 JumpIfEqual {451}
	139 Move X0, [X8+96]
	140 Compare X0, 0
	141 JumpIfEqual {451}
	142 Move X21, 0x2390000
	143 Move X21, [X21+2360]
	144 Move X2, [X20]
	145 Move X1, [X21]
	146 Call StatePrimitive`1<Object>.set_value, X0, X1
	147 Move X8, [X19+96]
	148 Compare X8, 0
	149 JumpIfEqual {451}
	150 Move X0, [X8+104]
	151 Compare X0, 0
	152 JumpIfEqual {451}
	153 Move X1, [X21]
	154 Move X2, [X20]
	155 Call StatePrimitive`1<Object>.set_value, X0, X1
	156 Move X8, [X19+96]
	157 Compare X8, 0
	158 JumpIfEqual {451}
	159 Move X0, [X8+112]
	160 Compare X0, 0
	161 JumpIfEqual {451}
	162 Move X8, 0x2390000
	163 Move X8, [X8+2424]
	164 Move X2, [X20]
	165 Move X1, [X8]
	166 Call StatePrimitive`1<Object>.set_value, X0, X1
	167 Move X8, [X19+96]
	168 Compare X8, 0
	169 JumpIfEqual {451}
	170 Move X0, [X8+120]
	171 Compare X0, 0
	172 JumpIfEqual {451}
	173 Move X8, 0x2390000
	174 Move X8, [X8+2416]
	175 Move X2, [X20]
	176 Move X1, [X8]
	177 Call StatePrimitive`1<Object>.set_value, X0, X1
	178 Move X8, [X19+96]
	179 Compare X8, 0
	180 JumpIfEqual {451}
	181 Move X0, [X8+128]
	182 Compare X0, 0
	183 JumpIfEqual {451}
	184 Move X8, 0x2390000
	185 Move X8, [X8+2304]
	186 Compare X19, 0
	187 JumpIfEqual {451}
	188 Move X8, [X19+96]
	189 Compare X8, 0
	190 JumpIfEqual {451}
	191 Move X0, [X8+88]
	192 Compare X0, 0
	193 JumpIfEqual {451}
	194 Move X8, 0x2390000
	195 Move X20, 0x238E000
	196 Move X8, [X8+2400]
	197 Move X20, [X20+2304]
	198 Move X1, [X8]
	199 Move X2, [X20]
	200 Call StatePrimitive`1<Object>.set_value, X0, X1
	201 Move X8, [X19+96]
	202 Compare X8, 0
	203 JumpIfEqual {451}
	204 Move X0, [X8+96]
	205 Compare X0, 0
	206 JumpIfEqual {451}
	207 Move X21, 0x2390000
	208 Move X21, [X21+2288]
	209 Move X2, [X20]
	210 Move X1, [X21]
	211 Call StatePrimitive`1<Object>.set_value, X0, X1
	212 Move X8, [X19+96]
	213 Compare X8, 0
	214 JumpIfEqual {451}
	215 Move X0, [X8+104]
	216 Compare X0, 0
	217 JumpIfEqual {451}
	218 Move X1, [X21]
	219 Move X2, [X20]
	220 Call StatePrimitive`1<Object>.set_value, X0, X1
	221 Move X8, [X19+96]
	222 Compare X8, 0
	223 JumpIfEqual {451}
	224 Move X0, [X8+112]
	225 Compare X0, 0
	226 JumpIfEqual {451}
	227 Move X8, 0x2390000
	228 Move X8, [X8+2280]
	229 Move X2, [X20]
	230 Move X1, [X8]
	231 Call StatePrimitive`1<Object>.set_value, X0, X1
	232 Move X8, [X19+96]
	233 Compare X8, 0
	234 JumpIfEqual {451}
	235 Move X0, [X8+120]
	236 Compare X0, 0
	237 JumpIfEqual {451}
	238 Move X8, 0x2390000
	239 Move X8, [X8+2296]
	240 Move X2, [X20]
	241 Move X1, [X8]
	242 Call StatePrimitive`1<Object>.set_value, X0, X1
	243 Move X8, [X19+96]
	244 Compare X8, 0
	245 JumpIfEqual {451}
	246 Move X0, [X8+128]
	247 Compare X0, 0
	248 JumpIfEqual {451}
	249 Move X8, 0x2390000
	250 Move X8, [X8+2440]
	251 Move X2, [X20]
	252 Move X1, [X8]
	253 Call StatePrimitive`1<Object>.set_value, X0, X1
	254 Move X8, [X19+96]
	255 Compare X8, 0
	256 JumpIfEqual {451}
	257 Move X0, [X8+136]
	258 Compare X0, 0
	259 JumpIfEqual {451}
	260 Move X8, 0x2390000
	261 Move X8, [X8+2392]
	262 Move X2, [X20]
	263 Move X1, [X8]
	264 Call StatePrimitive`1<Object>.set_value, X0, X1
	265 Move X8, [X19+96]
	266 Compare X8, 0
	267 JumpIfEqual {451}
	268 Move X0, [X8+144]
	269 Compare X0, 0
	270 JumpIfEqual {451}
	271 Move X8, 0x2390000
	272 Move X8, [X8+2344]
	273 Compare X19, 0
	274 JumpIfEqual {451}
	275 Move X8, [X19+96]
	276 Compare X8, 0
	277 JumpIfEqual {451}
	278 Move X0, [X8+88]
	279 Compare X0, 0
	280 JumpIfEqual {451}
	281 Move X8, 0x2390000
	282 Move X20, 0x238E000
	283 Move X8, [X8+2432]
	284 Move X20, [X20+2304]
	285 Move X1, [X8]
	286 Move X2, [X20]
	287 Call StatePrimitive`1<Object>.set_value, X0, X1
	288 Move X8, [X19+96]
	289 Compare X8, 0
	290 JumpIfEqual {451}
	291 Move X0, [X8+96]
	292 Compare X0, 0
	293 JumpIfEqual {451}
	294 Move X21, 0x2390000
	295 Move X21, [X21+2320]
	296 Move X2, [X20]
	297 Move X1, [X21]
	298 Call StatePrimitive`1<Object>.set_value, X0, X1
	299 Move X8, [X19+96]
	300 Compare X8, 0
	301 JumpIfEqual {451}
	302 Move X0, [X8+104]
	303 Compare X0, 0
	304 JumpIfEqual {451}
	305 Move X1, [X21]
	306 Move X2, [X20]
	307 Call StatePrimitive`1<Object>.set_value, X0, X1
	308 Move X8, [X19+96]
	309 Compare X8, 0
	310 JumpIfEqual {451}
	311 Move X0, [X8+112]
	312 Compare X0, 0
	313 JumpIfEqual {451}
	314 Move X8, 0x2390000
	315 Move X8, [X8+2376]
	316 Move X2, [X20]
	317 Move X1, [X8]
	318 Call StatePrimitive`1<Object>.set_value, X0, X1
	319 Move X8, [X19+96]
	320 Compare X8, 0
	321 JumpIfEqual {451}
	322 Move X0, [X8+120]
	323 Compare X0, 0
	324 JumpIfEqual {451}
	325 Move X8, 0x2390000
	326 Move X8, [X8+2312]
	327 Move X2, [X20]
	328 Move X1, [X8]
	329 Call StatePrimitive`1<Object>.set_value, X0, X1
	330 Move X8, [X19+96]
	331 Compare X8, 0
	332 JumpIfEqual {451}
	333 Move X0, [X8+128]
	334 Compare X0, 0
	335 JumpIfEqual {451}
	336 Move X8, 0x2390000
	337 Move X8, [X8+2448]
	338 Compare X19, 0
	339 JumpIfEqual {451}
	340 Move X8, [X19+96]
	341 Compare X8, 0
	342 JumpIfEqual {451}
	343 Move X0, [X8+88]
	344 Compare X0, 0
	345 JumpIfEqual {451}
	346 Move X8, 0x2390000
	347 Move X20, 0x238E000
	348 Move X8, [X8+2352]
	349 Move X20, [X20+2304]
	350 Move X1, [X8]
	351 Move X2, [X20]
	352 Call StatePrimitive`1<Object>.set_value, X0, X1
	353 Move X8, [X19+96]
	354 Compare X8, 0
	355 JumpIfEqual {451}
	356 Move X0, [X8+96]
	357 Compare X0, 0
	358 JumpIfEqual {451}
	359 Move X21, 0x2390000
	360 Move X21, [X21+2368]
	361 Move X2, [X20]
	362 Move X1, [X21]
	363 Call StatePrimitive`1<Object>.set_value, X0, X1
	364 Move X8, [X19+96]
	365 Compare X8, 0
	366 JumpIfEqual {451}
	367 Move X0, [X8+104]
	368 Compare X0, 0
	369 JumpIfEqual {451}
	370 Move X1, [X21]
	371 Move X2, [X20]
	372 Call StatePrimitive`1<Object>.set_value, X0, X1
	373 Move X8, [X19+96]
	374 Compare X8, 0
	375 JumpIfEqual {451}
	376 Move X0, [X8+112]
	377 Compare X0, 0
	378 JumpIfEqual {451}
	379 Move X8, 0x2390000
	380 Move X8, [X8+2456]
	381 Move X2, [X20]
	382 Move X1, [X8]
	383 Call StatePrimitive`1<Object>.set_value, X0, X1
	384 Move X8, [X19+96]
	385 Compare X8, 0
	386 JumpIfEqual {451}
	387 Move X0, [X8+120]
	388 Compare X0, 0
	389 JumpIfEqual {451}
	390 Move X21, 0x2390000
	391 Move X21, [X21+2328]
	392 Move X2, [X20]
	393 Move X1, [X21]
	394 Call StatePrimitive`1<Object>.set_value, X0, X1
	395 Move X8, [X19+96]
	396 Compare X8, 0
	397 JumpIfEqual {451}
	398 Move X0, [X8+128]
	399 Compare X0, 0
	400 JumpIfEqual {451}
	401 Move X1, [X21]
	402 Move X2, [X20]
	403 Call StatePrimitive`1<Object>.set_value, X0, X1
	404 Move X8, [X19+96]
	405 Compare X8, 0
	406 JumpIfEqual {451}
	407 Move X0, [X8+136]
	408 Compare X0, 0
	409 JumpIfEqual {451}
	410 Move X8, 0x2390000
	411 Move X8, [X8+2384]
	412 Move X2, [X20]
	413 Move X1, [X8]
	414 Call StatePrimitive`1<Object>.set_value, X0, X1
	415 Move X8, [X19+96]
	416 Compare X8, 0
	417 JumpIfEqual {451}
	418 Move X0, [X8+144]
	419 Compare X0, 0
	420 JumpIfEqual {451}
	421 Move X8, 0x2390000
	422 Move X8, [X8+2336]
	423 Move X1, [X8]
	424 Move X2, [X20]
	425 Call StatePrimitive`1<Object>.set_value, X0, X1
	426 Move X8, [X19+96]
	427 Compare X8, 0
	428 JumpIfEqual {451}
	429 Move X0, [X8+80]
	430 Compare X0, 0
	431 JumpIfEqual {451}
	432 Move X8, 0x238F000
	433 Move X8, [X8+2560]
	434 Move V0, V8
	435 Move V1, V9
	436 Move V2, V10
	437 Move X1, [X8]
	438 Move V3, V11
	439 Call StatePrimitive`1<Color>.set_value, X0, X1
	440 Move X0, X19
	441 Move X20, [X31+64]
	442 Move X19, [X31+72]
	443 Move X22, [X31+48]
	444 Move X21, [X31+56]
	445 Move X30, [X31+32]
	446 Move D9, [X31+16]
	447 Move D8, [X31+24]
	448 Move D11, [X31+80]
	449 Move D10, [X31+88]
	450 Return X0
	451 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D669F0 LDR V2, [X8 + 0x28]
	0x01D669F4 NOP

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

