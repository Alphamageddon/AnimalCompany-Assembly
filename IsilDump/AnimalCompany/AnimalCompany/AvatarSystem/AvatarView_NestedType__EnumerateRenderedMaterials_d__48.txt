Type: AnimalCompany.AvatarSystem.AvatarView/<EnumerateRenderedMaterials>d__48

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x01D65BCC ADRP X9, 0xFFFFFFFFFED85000
	0x01D65BD0 LDR X29, [X29 + 0x5A8]
	0x01D65BD4 LDR V0, [X9 + 0x17C]
	0x01D65BD8 MOV W21, W31
	0x01D65BDC ADD X24, X28, 0x20
	0x01D65BE0 ADD X20, X26, 0x20
	0x01D65BE4 STR S0, [X31 + 0x44]
	0x01D65BE8 CMP W21, W8
	0x01D65BEC B.CS 0x1D663DC
	0x01D65BF0 CBZ X23, 0x1D663E0
	0x01D65BF4 ADD X9, X22, W21, 0x2, SXTW
	0x01D65BF8 LDRSW X9, [X9 + 0x20]
	0x01D65BFC LDR W10, [X23 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move X0, X31
	009 Move [X20+16], W19
	010 Call Environment.get_CurrentManagedThreadId
	011 Move [X20+32], W0
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x01D65C00 CMP W9, W10

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x01D65C04 B.CS 0x1D663DC
	0x01D65C08 ADD W11, W21, 0x1
	0x01D65C0C CMP W11, W8
	0x01D65C10 B.CS 0x1D663DC
	0x01D65C14 ADD X11, X22, W11, 0x2, SXTW
	0x01D65C18 LDRSW X11, [X11 + 0x20]
	0x01D65C1C CMP W11, W10
	0x01D65C20 B.CS 0x1D663DC
	0x01D65C24 ADD W12, W21, 0x2
	0x01D65C28 CMP W12, W8
	0x01D65C2C B.CS 0x1D663DC
	0x01D65C30 ADD X8, X22, W12, 0x2, SXTW
	0x01D65C34 LDRSW X8, [X8 + 0x20]
	0x01D65C38 CMP W8, W10
	0x01D65C3C B.CS 0x1D663DC
	0x01D65C40 MOVZ W12, 0xC
	0x01D65C44 MADD X10, X11, X12, X23
	0x01D65C48 MADD X8, X8, X12, X23
	0x01D65C4C LDR V1, [X10 + 0x28]
	0x01D65C50 LDR V0, [X8 + 0x20]
	0x01D65C54 NOP
	0x01D65C58 MADD X9, X9, X12, X23
	0x01D65C5C ADRP X11, 0x2673000
	0x01D65C60 LDRB W11, [X11 + 0x785]
	0x01D65C64 LDP S11, S14, [X9 + 0x20]
	0x01D65C68 LDR V9, [X9 + 0x28]
	0x01D65C6C LDP S10, S15, [X10 + 0x20]
	0x01D65C70 STP S0, S1, [X31 + 0xA8]
	0x01D65C74 LDR V1, [X8 + 0x24]
	0x01D65C78 LDR V0, [X8 + 0x28]
	0x01D65C7C STP S0, S1, [X31 + 0xA0]
	0x01D65C80 CBNZ W11, 0x1D65C98
	0x01D65C84 MOV X0, X29
	0x01D65C88 BL 0x1C16CF4
	0x01D65C8C ADRP X8, 0x2673000
	0x01D65C90 MOVZ W9, 0x1
	0x01D65C94 STRB W9, [X8 + 0x785]
	0x01D65C98 LDR X0, [X29]
	0x01D65C9C LDR W8, [X0 + 0xE0]
	0x01D65CA0 CBNZ W8, 0x1D65CA8
	0x01D65CA4 BL 0x1C16DFC
	0x01D65CA8 LDR V0, [X31 + 0xAC]
	0x01D65CAC FSUB S12, S10, S11
	0x01D65CB0 FSUB S13, S15, S14
	0x01D65CB4 FMUL S1, S13, S13
	0x01D65CB8 FSUB S27, S0, S9
	0x01D65CBC FMUL S0, S12, S12
	0x01D65CC0 FADD S0, S0, S1
	0x01D65CC4 FMUL S1, S27, S27
	0x01D65CC8 FADD S0, S1, S0
	0x01D65CCC LDR V1, [X31 + 0x44]
	0x01D65CD0 STR S0, [X31 + 0x74]
	0x01D65CD4 FSQRT S0, S0
	0x01D65CD8 STR S27, [X31 + 0x84]
	0x01D65CDC FCMP S0, S1
	0x01D65CE0 B.LE 0x1D65CF8
	0x01D65CE4 FDIV S1, S13, S0
	0x01D65CE8 FDIV S8, S12, S0
	0x01D65CEC STR S1, [X31 + 0x9C]
	0x01D65CF0 FDIV S0, S27, S0
	0x01D65CF4 B 0x1D65D3C
	0x01D65CF8 ADRP X8, 0x2673000
	0x01D65CFC LDRB W8, [X8 + 0x783]
	0x01D65D00 CBNZ W8, 0x1D65D20
	0x01D65D04 ADRP X0, 0x238E000
	0x01D65D08 LDR X0, [X0 + 0x5A0]
	0x01D65D0C BL 0x1C16CF4
	0x01D65D10 LDR V27, [X31 + 0x84]
	0x01D65D14 MOVZ W8, 0x1
	0x01D65D18 ADRP X9, 0x2673000
	0x01D65D1C STRB W8, [X9 + 0x783]
	0x01D65D20 ADRP X8, 0x238E000
	0x01D65D24 LDR X8, [X8 + 0x5A0]
	0x01D65D28 LDR X8, [X8]
	0x01D65D2C LDR X8, [X8 + 0xB8]
	0x01D65D30 LDP S8, S0, [X8]
	0x01D65D34 STR S0, [X31 + 0x9C]
	0x01D65D38 LDR V0, [X8 + 0x8]
	0x01D65D3C ADRP X8, 0x2673000
	0x01D65D40 LDRB W8, [X8 + 0x785]
	0x01D65D44 STR S0, [X31 + 0x98]
	0x01D65D48 CBNZ W8, 0x1D65D64
	0x01D65D4C MOV X0, X29
	0x01D65D50 BL 0x1C16CF4
	0x01D65D54 LDR V27, [X31 + 0x84]
	0x01D65D58 ADRP X8, 0x2673000
	0x01D65D5C MOVZ W9, 0x1
	0x01D65D60 STRB W9, [X8 + 0x785]
	0x01D65D64 LDR X0, [X29]
	0x01D65D68 LDR W8, [X0 + 0xE0]
	0x01D65D6C CBNZ W8, 0x1D65D78
	0x01D65D70 BL 0x1C16DFC
	0x01D65D74 LDR V27, [X31 + 0x84]
	0x01D65D78 LDR V0, [X31 + 0xA8]
	0x01D65D7C FSUB S2, S0, S10
	0x01D65D80 LDP S1, S0, [X31 + 0xA0]
	0x01D65D84 FSUB S3, S0, S15
	0x01D65D88 LDR V0, [X31 + 0xAC]
	0x01D65D8C STP S3, S2, [X31 + 0x7C]
	0x01D65D90 FSUB S4, S1, S0
	0x01D65D94 FMUL S0, S2, S2
	0x01D65D98 FMUL S1, S3, S3
	0x01D65D9C FADD S0, S0, S1
	0x01D65DA0 FMUL S1, S4, S4
	0x01D65DA4 FADD S0, S1, S0
	0x01D65DA8 LDR V1, [X31 + 0x44]
	0x01D65DAC STR S0, [X31 + 0x70]
	0x01D65DB0 FSQRT S0, S0
	0x01D65DB4 STR S4, [X31 + 0x78]
	0x01D65DB8 FCMP S0, S1
	0x01D65DBC B.LE 0x1D65DD0
	0x01D65DC0 FDIV S6, S2, S0
	0x01D65DC4 FDIV S7, S3, S0
	0x01D65DC8 FDIV S3, S4, S0
	0x01D65DCC B 0x1D65E10
	0x01D65DD0 ADRP X8, 0x2673000
	0x01D65DD4 LDRB W8, [X8 + 0x783]
	0x01D65DD8 CBNZ W8, 0x1D65DF8
	0x01D65DDC ADRP X0, 0x238E000
	0x01D65DE0 LDR X0, [X0 + 0x5A0]
	0x01D65DE4 BL 0x1C16CF4
	0x01D65DE8 LDR V27, [X31 + 0x84]
	0x01D65DEC MOVZ W8, 0x1
	0x01D65DF0 ADRP X9, 0x2673000
	0x01D65DF4 STRB W8, [X9 + 0x783]
	0x01D65DF8 ADRP X8, 0x238E000
	0x01D65DFC LDR X8, [X8 + 0x5A0]
	0x01D65E00 LDR X8, [X8]
	0x01D65E04 LDR X8, [X8 + 0xB8]
	0x01D65E08 LDP S6, S7, [X8]
	0x01D65E0C LDR V3, [X8 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2674000
	006 Move W8, [X20+2150]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x238F000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move X0, 0x2391000
	016 Move X0, [X0+2184]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2150], W8
	020 Move W8, [X19+16]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X21, [X19+40]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Compare W8, 0
	025 JumpIfNotEqual {46}
	026 Move TEMP, 0
	027 Not TEMP
	028 Move W8, TEMP
	029 Move [X19+16], W8
	030 Compare X21, 0
	031 JumpIfEqual {145}
	032 Move X9, [X21+104]
	033 Move W8, W31
	034 Move [X19+56], W31
	035 Move [X19+48], X9
	036 Compare X9, 0
	037 JumpIfNotEqual {93}
	038 Move TEMP, 0
	039 Not TEMP
	040 Move W8, TEMP
	041 Move [X19+16], W8
	042 Move TEMP, 0
	043 Not TEMP
	044 Move W8, TEMP
	045 Move [X19+16], W8
	046 Move W0, W31
	047 Add X10, X9, W8
	048 Move X10, [X10+32]
	049 Compare X10, 0
	050 JumpIfEqual {145}
	051 Move W11, [X10+16]
	052 And W11, W11, 0xFFFFFFFE
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X10, [X10+48]
	055 Compare X10, 0
	056 JumpIfEqual {89}
	057 Move W8, W31
	058 Move [X19+64], X10
	059 Move [X19+72], W31
	060 Add X8, X10, W8
	061 Move X20, [X8+32]
	062 Compare X20, 0
	063 JumpIfEqual {145}
	064 Move X0, X20
	065 Move X1, X31
	066 Call Object.get_name, X0
	067 Compare X0, 0
	068 JumpIfEqual {145}
	069 Move X8, 0x2391000
	070 Move X8, [X8+2184]
	071 Move X2, X31
	072 Move X1, [X8]
	073 Call String.Contains, X0, X1
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfEqual {102}
	078 Move W8, [X19+72]
	079 Move X10, [X19+64]
	080 Add W8, W8, 1
	081 Move [X19+72], W8
	082 Compare X10, 0
	083 JumpIfEqual {145}
	084 Move W9, [X10+24]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move W8, [X19+56]
	087 Move X9, [X19+48]
	088 Move [X19+64], X31
	089 Add W8, W8, 1
	090 Move [X19+56], W8
	091 Compare X9, 0
	092 JumpIfEqual {145}
	093 Move W10, [X9+24]
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move [X19+48], X31
	096 Compare X21, 0
	097 JumpIfEqual {145}
	098 Move X9, [X21+112]
	099 Move W8, W31
	100 Move [X19+56], W31
	101 Move [X19+80], X9
	102 Move W0, 1
	103 Move [X19+24], X20
	104 Move [X19+16], W0
	105 Add X8, X9, W8
	106 Move X21, [X8+32]
	107 Compare X21, 0
	108 JumpIfEqual {145}
	109 Move X8, 0x238F000
	110 Move X8, [X8+1432]
	111 Move X20, [X21+40]
	112 Move X0, [X8]
	113 Move W8, [X0+224]
	114 Compare W8, 0
	115 JumpIfNotEqual {117}
	116 Call 0x1C17DFC
	117 Move X0, X20
	118 Move X1, X31
	119 Move X2, X31
	120 Call Object.op_Inequality, X0, X1
	121 Move TEMP, X0
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfEqual {135}
	125 Move W8, [X19+56]
	126 Move X9, [X19+80]
	127 Add W8, W8, 1
	128 Move [X19+56], W8
	129 Compare X9, 0
	130 JumpIfEqual {145}
	131 Move W10, [X9+24]
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move W0, W31
	134 Move [X19+80], X31
	135 Move X8, [X21+40]
	136 Move W9, 2
	137 Move [X19+16], W9
	138 Move W0, 1
	139 Move [X19+24], X8
	140 Move X20, [X31+16]
	141 Move X19, [X31+24]
	142 Move X30, [X31+32]
	143 Move X21, [X31+40]
	144 Return X0
	145 Call 0x1C17F20
	146 Call 0x1C17F28

Method: UnityEngine.Material System.Collections.Generic.IEnumerator<UnityEngine.Material>.get_Current()

Disassembly:
	0x01D65E10 ADRP X8, 0x2673000
	0x01D65E14 LDRB W8, [X8 + 0x785]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x01D65E18 CBNZ W8, 0x1D65E4C
	0x01D65E1C MOV X0, X29
	0x01D65E20 STP S7, S8, [X31 + 0x90]
	0x01D65E24 MOV V8.16B, V6.16B
	0x01D65E28 STR S3, [X31 + 0x8C]
	0x01D65E2C BL 0x1C16CF4
	0x01D65E30 LDP S3, S7, [X31 + 0x8C]
	0x01D65E34 MOV V6.16B, V8.16B
	0x01D65E38 LDR V8, [X31 + 0x94]
	0x01D65E3C LDR V27, [X31 + 0x84]
	0x01D65E40 ADRP X8, 0x2673000
	0x01D65E44 MOVZ W9, 0x1
	0x01D65E48 STRB W9, [X8 + 0x785]
	0x01D65E4C LDR X0, [X29]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x238F000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x2391000
	011 Move X0, [X0+2192]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x01D65E50 LDR W8, [X0 + 0xE0]
	0x01D65E54 CBNZ W8, 0x1D65E78

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Collections.Generic.IEnumerator`1<UnityEngine.Material> System.Collections.Generic.IEnumerable<UnityEngine.Material>.GetEnumerator()

Disassembly:
	0x01D65E58 STP S7, S8, [X31 + 0x90]
	0x01D65E5C MOV V8.16B, V6.16B
	0x01D65E60 STR S3, [X31 + 0x8C]
	0x01D65E64 BL 0x1C16DFC
	0x01D65E68 LDP S3, S7, [X31 + 0x8C]
	0x01D65E6C MOV V6.16B, V8.16B
	0x01D65E70 LDR V8, [X31 + 0x94]
	0x01D65E74 LDR V27, [X31 + 0x84]
	0x01D65E78 LDP S2, S5, [X31 + 0x98]
	0x01D65E7C FMUL S4, S8, S7
	0x01D65E80 FMUL S0, S5, S3
	0x01D65E84 FMUL S1, S2, S7
	0x01D65E88 FMUL S2, S2, S6
	0x01D65E8C FMUL S3, S8, S3
	0x01D65E90 FMUL S5, S5, S6
	0x01D65E94 FSUB S0, S0, S1
	0x01D65E98 FSUB S1, S2, S3
	0x01D65E9C FSUB S2, S4, S5
	0x01D65EA0 FMUL S3, S0, S0
	0x01D65EA4 FMUL S4, S1, S1
	0x01D65EA8 FADD S3, S3, S4
	0x01D65EAC FMUL S4, S2, S2
	0x01D65EB0 FADD S3, S4, S3
	0x01D65EB4 LDR V4, [X31 + 0x44]
	0x01D65EB8 FSQRT S3, S3
	0x01D65EBC FCMP S3, S4
	0x01D65EC0 B.LE 0x1D65ED8
	0x01D65EC4 FDIV S0, S0, S3
	0x01D65EC8 STR S0, [X31 + 0x9C]
	0x01D65ECC FDIV S1, S1, S3
	0x01D65ED0 FDIV S2, S2, S3
	0x01D65ED4 B 0x1D65F1C
	0x01D65ED8 ADRP X8, 0x2673000
	0x01D65EDC LDRB W8, [X8 + 0x783]
	0x01D65EE0 CBNZ W8, 0x1D65F00
	0x01D65EE4 ADRP X0, 0x238E000
	0x01D65EE8 LDR X0, [X0 + 0x5A0]
	0x01D65EEC BL 0x1C16CF4
	0x01D65EF0 LDR V27, [X31 + 0x84]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2674000
	005 Move W8, [X20+2151]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2391000
	012 Move X0, [X0+2200]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2151], W8
	016 Move W8, [X19+16]
	017 Add W31, W8, 2
	018 Move W20, [X19+32]
	019 Move X0, X31
	020 Call Environment.get_CurrentManagedThreadId
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move [X19+16], W31
	023 Move X8, 0x2391000
	024 Move X8, [X8+2200]
	025 Move X0, [X8]
	026 Call 0x1C17F10
	027 Move X1, X31
	028 Move X20, X0
	029 Call Object..ctor, X0
	030 Move X0, X31
	031 Move [X20+16], W31
	032 Call Environment.get_CurrentManagedThreadId
	033 Move [X20+32], W0
	034 Move X8, [X19+40]
	035 Move X19, X20
	036 Move [X20+40], X8
	037 Move X0, X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x01D65EF4 MOVZ W8, 0x1

ISIL:
	001 Call <EnumerateRenderedMaterials>d__48.System.Collections.Generic.IEnumerable<UnityEngine.Material>.GetEnumerator, X0
	002 Return X0

