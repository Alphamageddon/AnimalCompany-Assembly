Type: AnimalCompany.UIScrollWheel

Method: System.Void Awake()

Disassembly:
	0x01D7C540 MOV X0, X19
	0x01D7C544 MOV X1, X31
	0x01D7C548 BL 0x3C32E90
	0x01D7C54C CBZ X0, 0x1D7CB40
	0x01D7C550 MOV X1, X31
	0x01D7C554 BL 0x3C3F58C
	0x01D7C558 MOV X0, X19
	0x01D7C55C MOV X1, X31
	0x01D7C560 MOV V8.16B, V0.16B
	0x01D7C564 MOV V9.16B, V1.16B
	0x01D7C568 MOV V10.16B, V2.16B
	0x01D7C56C BL 0x3C32E90
	0x01D7C570 CBZ X0, 0x1D7CB40
	0x01D7C574 MOV X1, X31
	0x01D7C578 BL 0x3C3FA04
	0x01D7C57C MOV X0, X31
	0x01D7C580 MOV V11.16B, V0.16B
	0x01D7C584 MOV V12.16B, V1.16B
	0x01D7C588 MOV V13.16B, V2.16B
	0x01D7C58C BL 0x3C3C714
	0x01D7C590 CBZ X20, 0x1D7CB40
	0x01D7C594 LDR V3, [X31 + 0x2]
	0x01D7C598 MOV X0, X20
	0x01D7C59C MOV X1, X31
	0x01D7C5A0 FMUL S1, S3, S13
	0x01D7C5A4 FMUL S2, S3, S12
	0x01D7C5A8 FMUL S3, S3, S11
	0x01D7C5AC FMUL S1, S0, S1
	0x01D7C5B0 FMUL S4, S0, S2
	0x01D7C5B4 FMUL S0, S0, S3
	0x01D7C5B8 FADD S2, S10, S1
	0x01D7C5BC FADD S1, S9, S4
	0x01D7C5C0 FADD S0, S8, S0
	0x01D7C5C4 BL 0x3C3F62C
	0x01D7C5C8 MOVZ W0, 0x73
	0x01D7C5CC MOV X1, X31
	0x01D7C5D0 BL 0x3C84CAC
	0x01D7C5D4 TBNZ X0, 0x0, 0x1D7C5E8
	0x01D7C5D8 MOVZ W0, 0x112
	0x01D7C5DC MOV X1, X31
	0x01D7C5E0 BL 0x3C84CAC
	0x01D7C5E4 TBZ X0, 0x0, 0x1D7C680
	0x01D7C5E8 MOV X0, X19
	0x01D7C5EC MOV X1, X31
	0x01D7C5F0 BL 0x3C32E90
	0x01D7C5F4 MOV X20, X0
	0x01D7C5F8 MOV X0, X19
	0x01D7C5FC MOV X1, X31
	0x01D7C600 BL 0x3C32E90
	0x01D7C604 CBZ X0, 0x1D7CB40
	0x01D7C608 MOV X1, X31
	0x01D7C60C BL 0x3C3F58C
	0x01D7C610 MOV X0, X19
	0x01D7C614 MOV X1, X31
	0x01D7C618 MOV V8.16B, V0.16B
	0x01D7C61C MOV V9.16B, V1.16B
	0x01D7C620 MOV V10.16B, V2.16B
	0x01D7C624 BL 0x3C32E90
	0x01D7C628 CBZ X0, 0x1D7CB40
	0x01D7C62C MOV X1, X31
	0x01D7C630 BL 0x3C3FA04
	0x01D7C634 MOV X0, X31
	0x01D7C638 MOV V11.16B, V0.16B
	0x01D7C63C MOV V12.16B, V1.16B
	0x01D7C640 MOV V13.16B, V2.16B
	0x01D7C644 BL 0x3C3C714
	0x01D7C648 CBZ X20, 0x1D7CB40
	0x01D7C64C LDR V3, [X31 + 0x2]
	0x01D7C650 MOV X0, X20
	0x01D7C654 MOV X1, X31
	0x01D7C658 FMUL S1, S3, S13
	0x01D7C65C FMUL S2, S3, S12
	0x01D7C660 FMUL S3, S3, S11
	0x01D7C664 FMUL S1, S0, S1
	0x01D7C668 FMUL S4, S0, S2
	0x01D7C66C FMUL S0, S0, S3
	0x01D7C670 FSUB S2, S10, S1
	0x01D7C674 FSUB S1, S9, S4
	0x01D7C678 FSUB S0, S8, S0
	0x01D7C67C BL 0x3C3F62C
	0x01D7C680 MOVZ W0, 0x71
	0x01D7C684 MOV X1, X31
	0x01D7C688 BL 0x3C84CAC
	0x01D7C68C TBZ X0, 0x0, 0x1D7C728
	0x01D7C690 MOV X0, X19
	0x01D7C694 MOV X1, X31
	0x01D7C698 BL 0x3C32E90
	0x01D7C69C MOV X20, X0
	0x01D7C6A0 MOV X0, X19
	0x01D7C6A4 MOV X1, X31
	0x01D7C6A8 BL 0x3C32E90
	0x01D7C6AC CBZ X0, 0x1D7CB40
	0x01D7C6B0 MOV X1, X31
	0x01D7C6B4 BL 0x3C3F58C
	0x01D7C6B8 MOV X0, X19
	0x01D7C6BC MOV X1, X31
	0x01D7C6C0 MOV V8.16B, V0.16B
	0x01D7C6C4 MOV V9.16B, V1.16B
	0x01D7C6C8 MOV V10.16B, V2.16B
	0x01D7C6CC BL 0x3C32E90

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x265D000
	008 Move W8, [X20+2373]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x237A000
	015 Move X0, [X0+1744]
	016 Call 0x1C17CF4
	017 Move X0, 0x237B000
	018 Move X0, [X0+1080]
	019 Call 0x1C17CF4
	020 Move X0, 0x237B000
	021 Move X0, [X0+1088]
	022 Call 0x1C17CF4
	023 Move X0, 0x237A000
	024 Move X0, [X0+1664]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+2373], W8
	028 Move X23, [X19+40]
	029 Compare X23, 0
	030 JumpIfEqual {119}
	031 Move X22, 0x237A000
	032 Move X22, [X22+1744]
	033 Move X21, 0x237B000
	034 Move X20, [X23+32]
	035 Move X0, [X22]
	036 Move X21, [X21+1080]
	037 Call 0x1C17F10
	038 Move X2, [X21]
	039 Move X1, X19
	040 Move X3, X31
	041 Move X21, X0
	042 Call Action`1<Object>..ctor, X0, X1, X2
	043 Move X0, X20
	044 Move X1, X21
	045 Move X2, X31
	046 Call Delegate.Combine, X0, X1
	047 Compare X0, 0
	048 JumpIfEqual {62}
	049 Move X21, [X22]
	050 Move X20, X0
	051 Move X1, X21
	052 Call 0x1C17E00
	053 Compare X0, 0
	054 JumpIfEqual {95}
	055 Move [X23+32], X0
	056 Move X21, [X22]
	057 Move X0, X20
	058 Move X1, X21
	059 Call 0x1C17E00
	060 Compare X0, 0
	061 JumpIfNotEqual {63}
	062 Move [X23+32], X31
	063 Move X23, [X19+40]
	064 Compare X23, 0
	065 JumpIfEqual {119}
	066 Move X0, [X22]
	067 Move X21, 0x237B000
	068 Move X20, [X23+40]
	069 Move X21, [X21+1088]
	070 Call 0x1C17F10
	071 Move X2, [X21]
	072 Move X1, X19
	073 Move X3, X31
	074 Move X21, X0
	075 Call Action`1<Object>..ctor, X0, X1, X2
	076 Move X0, X20
	077 Move X1, X21
	078 Move X2, X31
	079 Call Delegate.Combine, X0, X1
	080 Compare X0, 0
	081 JumpIfEqual {98}
	082 Move X21, [X22]
	083 Move X20, X0
	084 Move X1, X21
	085 Call 0x1C17E00
	086 Compare X0, 0
	087 JumpIfEqual {95}
	088 Move [X23+40], X0
	089 Move X21, [X22]
	090 Move X0, X20
	091 Move X1, X21
	092 Call 0x1C17E00
	093 Compare X0, 0
	094 JumpIfNotEqual {99}
	095 Move X0, X20
	096 Move X1, X21
	097 Call 0x1C181E0
	098 Move [X23+40], X31
	099 Move X0, [X19+48]
	100 Compare X0, 0
	101 JumpIfEqual {119}
	102 Move X1, X31
	103 Call Renderer.get_material, X0
	104 Compare X0, 0
	105 JumpIfEqual {119}
	106 Move X8, 0x237A000
	107 Move X8, [X8+1664]
	108 Move X20, [X31+32]
	109 Move X19, [X31+40]
	110 Move X22, [X31+16]
	111 Move X21, [X31+24]
	112 Move S0, 0.5
	113 Move X1, [X8]
	114 Move X2, X31
	115 Move X30, [X31+48]
	116 Move X23, [X31+56]
	117 Call Material.SetFloat, X0, X1, V0
	118 Return 
	119 Call 0x1C17F20

Method: System.Void FixedUpdate()

Disassembly:
	0x01D7C6D0 CBZ X0, 0x1D7CB40
	0x01D7C6D4 MOV X1, X31
	0x01D7C6D8 BL 0x3C3F988
	0x01D7C6DC MOV X0, X31
	0x01D7C6E0 MOV V11.16B, V0.16B
	0x01D7C6E4 MOV V12.16B, V1.16B
	0x01D7C6E8 MOV V13.16B, V2.16B
	0x01D7C6EC BL 0x3C3C714
	0x01D7C6F0 CBZ X20, 0x1D7CB40
	0x01D7C6F4 LDR V3, [X31 + 0x2]
	0x01D7C6F8 MOV X0, X20
	0x01D7C6FC MOV X1, X31
	0x01D7C700 FMUL S1, S3, S13
	0x01D7C704 FMUL S2, S3, S12
	0x01D7C708 FMUL S3, S3, S11
	0x01D7C70C FMUL S1, S0, S1
	0x01D7C710 FMUL S4, S0, S2
	0x01D7C714 FMUL S0, S0, S3
	0x01D7C718 FADD S2, S10, S1
	0x01D7C71C FADD S1, S9, S4
	0x01D7C720 FADD S0, S8, S0
	0x01D7C724 BL 0x3C3F62C
	0x01D7C728 MOVZ W0, 0x65
	0x01D7C72C MOV X1, X31
	0x01D7C730 BL 0x3C84CAC
	0x01D7C734 TBZ X0, 0x0, 0x1D7C7D0
	0x01D7C738 MOV X0, X19
	0x01D7C73C MOV X1, X31
	0x01D7C740 BL 0x3C32E90
	0x01D7C744 MOV X20, X0
	0x01D7C748 MOV X0, X19
	0x01D7C74C MOV X1, X31
	0x01D7C750 BL 0x3C32E90
	0x01D7C754 CBZ X0, 0x1D7CB40
	0x01D7C758 MOV X1, X31
	0x01D7C75C BL 0x3C3F58C
	0x01D7C760 MOV X0, X19
	0x01D7C764 MOV X1, X31
	0x01D7C768 MOV V8.16B, V0.16B
	0x01D7C76C MOV V9.16B, V1.16B
	0x01D7C770 MOV V10.16B, V2.16B
	0x01D7C774 BL 0x3C32E90
	0x01D7C778 CBZ X0, 0x1D7CB40
	0x01D7C77C MOV X1, X31
	0x01D7C780 BL 0x3C3F988
	0x01D7C784 MOV X0, X31
	0x01D7C788 MOV V11.16B, V0.16B
	0x01D7C78C MOV V12.16B, V1.16B
	0x01D7C790 MOV V13.16B, V2.16B
	0x01D7C794 BL 0x3C3C714
	0x01D7C798 CBZ X20, 0x1D7CB40
	0x01D7C79C LDR V3, [X31 + 0x2]
	0x01D7C7A0 MOV X0, X20
	0x01D7C7A4 MOV X1, X31
	0x01D7C7A8 FMUL S1, S3, S13
	0x01D7C7AC FMUL S2, S3, S12
	0x01D7C7B0 FMUL S3, S3, S11
	0x01D7C7B4 FMUL S1, S0, S1
	0x01D7C7B8 FMUL S4, S0, S2
	0x01D7C7BC FMUL S0, S0, S3
	0x01D7C7C0 FSUB S2, S10, S1
	0x01D7C7C4 FSUB S1, S9, S4
	0x01D7C7C8 FSUB S0, S8, S0
	0x01D7C7CC BL 0x3C3F62C
	0x01D7C7D0 MOVZ W0, 0x72
	0x01D7C7D4 MOV X1, X31
	0x01D7C7D8 BL 0x3C84CAC
	0x01D7C7DC ADRP X22, 0x2377000
	0x01D7C7E0 LDR X22, [X22 + 0x5A0]
	0x01D7C7E4 ADRP X23, 0x265C000
	0x01D7C7E8 TBNZ X0, 0x0, 0x1D7C7FC
	0x01D7C7EC MOVZ W0, 0x118
	0x01D7C7F0 MOV X1, X31
	0x01D7C7F4 BL 0x3C84CAC
	0x01D7C7F8 TBZ X0, 0x0, 0x1D7C89C
	0x01D7C7FC MOV X0, X19
	0x01D7C800 MOV X1, X31
	0x01D7C804 BL 0x3C32E90
	0x01D7C808 MOV X20, X0
	0x01D7C80C MOV X0, X19
	0x01D7C810 MOV X1, X31
	0x01D7C814 BL 0x3C32E90
	0x01D7C818 CBZ X0, 0x1D7CB40
	0x01D7C81C MOV X1, X31
	0x01D7C820 BL 0x3C3F58C
	0x01D7C824 LDRB W8, [X23 + 0x786]
	0x01D7C828 MOV V8.16B, V0.16B
	0x01D7C82C MOV V9.16B, V1.16B
	0x01D7C830 MOV V10.16B, V2.16B
	0x01D7C834 CBNZ W8, 0x1D7C84C
	0x01D7C838 ADRP X0, 0x2377000
	0x01D7C83C LDR X0, [X0 + 0x5A0]
	0x01D7C840 BL 0x1C16CF4
	0x01D7C844 MOVZ W8, 0x1
	0x01D7C848 STRB W8, [X23 + 0x786]
	0x01D7C84C LDR X8, [X22]
	0x01D7C850 MOV X0, X31
	0x01D7C854 LDR X8, [X8 + 0xB8]
	0x01D7C858 LDP S11, S12, [X8 + 0x18]
	0x01D7C85C LDR V13, [X8 + 0x20]
	0x01D7C860 BL 0x3C3C714
	0x01D7C864 CBZ X20, 0x1D7CB40
	0x01D7C868 LDR V3, [X31 + 0x2]
	0x01D7C86C MOV X0, X20
	0x01D7C870 MOV X1, X31
	0x01D7C874 FMUL S1, S3, S13
	0x01D7C878 FMUL S2, S3, S12
	0x01D7C87C FMUL S3, S3, S11
	0x01D7C880 FMUL S1, S1, S0
	0x01D7C884 FMUL S4, S2, S0
	0x01D7C888 FMUL S0, S3, S0
	0x01D7C88C FADD S2, S10, S1
	0x01D7C890 FADD S1, S9, S4
	0x01D7C894 FADD S0, S8, S0
	0x01D7C898 BL 0x3C3F62C
	0x01D7C89C MOVZ W0, 0x66
	0x01D7C8A0 MOV X1, X31
	0x01D7C8A4 BL 0x3C84CAC
	0x01D7C8A8 TBNZ X0, 0x0, 0x1D7C8BC
	0x01D7C8AC MOVZ W0, 0x119
	0x01D7C8B0 MOV X1, X31
	0x01D7C8B4 BL 0x3C84CAC
	0x01D7C8B8 TBZ X0, 0x0, 0x1D7C95C
	0x01D7C8BC MOV X0, X19
	0x01D7C8C0 MOV X1, X31
	0x01D7C8C4 BL 0x3C32E90
	0x01D7C8C8 MOV X20, X0
	0x01D7C8CC MOV X0, X19
	0x01D7C8D0 MOV X1, X31
	0x01D7C8D4 BL 0x3C32E90
	0x01D7C8D8 CBZ X0, 0x1D7CB40
	0x01D7C8DC MOV X1, X31
	0x01D7C8E0 BL 0x3C3F58C
	0x01D7C8E4 LDRB W8, [X23 + 0x786]
	0x01D7C8E8 MOV V8.16B, V2.16B
	0x01D7C8EC STR D0, [X31 + 0x10]
	0x01D7C8F0 STR D1, [X31]
	0x01D7C8F4 CBNZ W8, 0x1D7C90C
	0x01D7C8F8 ADRP X0, 0x2377000
	0x01D7C8FC LDR X0, [X0 + 0x5A0]
	0x01D7C900 BL 0x1C16CF4
	0x01D7C904 MOVZ W8, 0x1
	0x01D7C908 STRB W8, [X23 + 0x786]
	0x01D7C90C LDR X8, [X22]
	0x01D7C910 MOV X0, X31
	0x01D7C914 LDR X8, [X8 + 0xB8]
	0x01D7C918 LDR V9, [X8 + 0x18]
	0x01D7C91C LDR V10, [X8 + 0x20]
	0x01D7C920 BL 0x3C3C714
	0x01D7C924 CBZ X20, 0x1D7CB40
	0x01D7C928 LDP V3, V2, [X31 + 0x10]
	0x01D7C92C LDR V4, [X31]
	0x01D7C930 MOV X0, X20
	0x01D7C934 MOV X1, X31
	0x01D7C938 FMUL S1, S2, S10
	0x00000000 INVALID
	0x01D7C940 MOV V3.S[1], V4.S[0]
	0x01D7C944 FMUL S1, S1, S0
	0x00000000 INVALID
	0x01D7C94C FSUB V0.2S, V3.2S, V0.2S
	0x01D7C950 FSUB S2, S8, S1
	0x01D7C954 MOV S1, V0.S[1]
	0x01D7C958 BL 0x3C3F62C
	0x01D7C95C LDRB W8, [X19 + 0x40]
	0x01D7C960 CBZ W8, 0x1D7CA00
	0x01D7C964 MOV X0, X19
	0x01D7C968 MOV X1, X31
	0x01D7C96C BL 0x3C32E90
	0x01D7C970 CBZ X0, 0x1D7CB40
	0x01D7C974 ADRP X20, 0x237A000
	0x01D7C978 LDR X20, [X20 + 0x458]
	0x01D7C97C MOV X1, X31
	0x01D7C980 BL 0x3C3F800
	0x01D7C984 LDR X0, [X20]
	0x01D7C988 MOV X1, X31
	0x01D7C98C MOV V8.16B, V1.16B
	0x01D7C990 BL 0x3C847C0
	0x01D7C994 LDR V12, [X19 + 0x34]
	0x01D7C998 MOV X0, X19
	0x01D7C99C MOV X1, X31
	0x01D7C9A0 MOV V9.16B, V0.16B
	0x01D7C9A4 BL 0x3C32E90
	0x01D7C9A8 CBZ X0, 0x1D7CB40
	0x01D7C9AC ADRP X20, 0x237A000
	0x01D7C9B0 LDR X20, [X20 + 0x450]
	0x01D7C9B4 MOV X1, X31
	0x01D7C9B8 BL 0x3C3F800
	0x01D7C9BC LDR X0, [X20]
	0x01D7C9C0 MOV X1, X31
	0x01D7C9C4 MOV V10.16B, V0.16B
	0x01D7C9C8 BL 0x3C847C0
	0x01D7C9CC LDR V13, [X19 + 0x34]
	0x01D7C9D0 MOV X0, X19
	0x01D7C9D4 MOV X1, X31
	0x01D7C9D8 MOV V11.16B, V0.16B
	0x01D7C9DC BL 0x3C32E90
	0x01D7C9E0 CBZ X0, 0x1D7CB40
	0x01D7C9E4 FMUL S0, S9, S12
	0x01D7C9E8 FMUL S2, S11, S13
	0x01D7C9EC FADD S1, S8, S0
	0x01D7C9F0 FSUB S0, S10, S2
	0x01D7C9F4 FMOV S2, W31
	0x01D7C9F8 MOV X1, X31
	0x01D7C9FC BL 0x3C3F888
	0x01D7CA00 ADRP X8, 0x237A000
	0x01D7CA04 LDR X8, [X8 + 0x460]
	0x01D7CA08 MOV X1, X31
	0x01D7CA0C LDR X0, [X8]
	0x01D7CA10 BL 0x3C847C0
	0x01D7CA14 FCMP S0, 0x0
	0x01D7CA18 B.EQ 0x1D7CAB4
	0x01D7CA1C CMP W21, 0x0
	0x01D7CA20 MOVZ W8, 0x3C
	0x01D7CA24 MOVZ W9, 0x38
	0x01D7CA28 CSEL X8, X9, X8, EQ
	0x01D7CA2C LDR V12, [X19, X8, LSL]
	0x01D7CA30 MOV X0, X19
	0x01D7CA34 MOV X1, X31
	0x01D7CA38 MOV V8.16B, V0.16B
	0x01D7CA3C BL 0x3C32E90
	0x01D7CA40 MOV X20, X0
	0x01D7CA44 MOV X0, X19
	0x01D7CA48 MOV X1, X31
	0x01D7CA4C BL 0x3C32E90
	0x01D7CA50 CBZ X0, 0x1D7CB40
	0x01D7CA54 MOV X1, X31
	0x01D7CA58 BL 0x3C3F58C
	0x01D7CA5C MOV X0, X19
	0x01D7CA60 MOV X1, X31
	0x01D7CA64 MOV V9.16B, V0.16B
	0x01D7CA68 MOV V10.16B, V1.16B
	0x01D7CA6C MOV V11.16B, V2.16B
	0x01D7CA70 BL 0x3C32E90
	0x01D7CA74 CBZ X0, 0x1D7CB40
	0x01D7CA78 MOV X1, X31
	0x01D7CA7C BL 0x3C3FA04
	0x01D7CA80 CBZ X20, 0x1D7CB40
	0x01D7CA84 FMUL S2, S8, S2
	0x01D7CA88 FMUL S1, S8, S1
	0x01D7CA8C FMUL S0, S8, S0
	0x01D7CA90 FMUL S2, S12, S2
	0x01D7CA94 FMUL S1, S12, S1
	0x01D7CA98 FMUL S0, S12, S0
	0x01D7CA9C FADD S2, S11, S2
	0x01D7CAA0 FADD S1, S10, S1
	0x01D7CAA4 FADD S0, S9, S0
	0x01D7CAA8 MOV X0, X20
	0x01D7CAAC MOV X1, X31
	0x01D7CAB0 BL 0x3C3F62C
	0x01D7CAB4 MOVZ W0, 0x144
	0x01D7CAB8 MOV X1, X31
	0x01D7CABC BL 0x3C84D24
	0x01D7CAC0 MOV W20, W0
	0x01D7CAC4 TBZ X0, 0x0, 0x1D7CAD0
	0x01D7CAC8 MOVZ W21, 0x1
	0x01D7CACC B 0x1D7CAE4
	0x01D7CAD0 MOVZ W0, 0x144
	0x01D7CAD4 MOV X1, X31
	0x01D7CAD8 BL 0x3C84CE8
	0x01D7CADC TBZ X0, 0x0, 0x1D7CB20
	0x01D7CAE0 MOV W21, W31
	0x01D7CAE4 ORN W8, W31, W20, 0x0
	0x01D7CAE8 AND W0, W8, 0x1
	0x01D7CAEC MOV X1, X31
	0x01D7CAF0 STRB W21, [X19 + 0x40]
	0x01D7CAF4 BL 0x3C24698
	0x01D7CAF8 MOV W0, W21
	0x01D7CAFC LDP X20, X19, [X31 + 0x80]
	0x01D7CB00 LDP X22, X21, [X31 + 0x70]
	0x01D7CB04 LDP X30, X23, [X31 + 0x60]
	0x01D7CB08 LDP D9, D8, [X31 + 0x50]
	0x01D7CB0C LDP D11, D10, [X31 + 0x40]
	0x01D7CB10 LDP D13, D12, [X31 + 0x30]
	0x01D7CB14 MOV X1, X31
	0x01D7CB18 ADD X31, X31, 0x90
	0x01D7CB1C B 0x3C246FC
	0x01D7CB20 LDP X20, X19, [X31 + 0x80]
	0x01D7CB24 LDP X22, X21, [X31 + 0x70]
	0x01D7CB28 LDP X30, X23, [X31 + 0x60]
	0x01D7CB2C LDP D9, D8, [X31 + 0x50]
	0x01D7CB30 LDP D11, D10, [X31 + 0x40]
	0x01D7CB34 LDP D13, D12, [X31 + 0x30]
	0x01D7CB38 ADD X31, X31, 0x90
	0x01D7CB3C RET
	0x01D7CB40 BL 0x1C16F20
	0x01D7CB44 STR X30, [X31 - 0x10]!
	0x01D7CB48 MOVZ W8, 0x1
	0x01D7CB4C STRB W8, [X0 + 0x40]
	0x01D7CB50 MOV W0, W31
	0x01D7CB54 MOV X1, X31
	0x01D7CB58 BL 0x3C24698
	0x01D7CB5C MOVZ W0, 0x1
	0x01D7CB60 MOV X1, X31
	0x01D7CB64 LDR X30, [X31], #0x10
	0x01D7CB68 B 0x3C246FC
	0x01D7CB6C STR X30, [X31 - 0x10]!
	0x01D7CB70 STRB W31, [X0 + 0x40]
	0x01D7CB74 MOVZ W0, 0x1
	0x01D7CB78 MOV X1, X31
	0x01D7CB7C BL 0x3C24698
	0x01D7CB80 MOV W0, W31

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x265D000
	012 Move X20, 0x2378000
	013 Move W8, [X21+2374]
	014 Move X20, [X20+1432]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x2378000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2374], W8
	025 Move X0, [X20]
	026 Move X20, [X19+64]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {162}
	039 Move X0, X19
	040 Move X1, X31
	041 Call Component.get_transform, X0
	042 Compare X0, 0
	043 JumpIfEqual {344}
	044 Move S1, [X19+76]
	045 Move S2, [X19+80]
	046 Move V0, [X19+72]
	047 Move X1, X31
	048 Call Transform.InverseTransformPoint, X0, X1
	049 Move X0, X19
	050 Move X1, X31
	051 Move V8, V1
	052 Move V9, V2
	053 Call Component.get_transform, X0
	054 Move X8, [X19+64]
	055 Compare X8, 0
	056 JumpIfEqual {344}
	057 Move X20, X0
	058 Move X0, X8
	059 Move X1, X31
	060 Call Component.get_transform, X0
	061 Compare X0, 0
	062 JumpIfEqual {344}
	063 Move X1, X31
	064 Call Transform.get_position, X0
	065 Compare X20, 0
	066 JumpIfEqual {344}
	067 Move X0, X20
	068 Move X1, X31
	069 Call Transform.InverseTransformPoint, X0, X1
	070 Move X20, 0x265D000
	071 Move W8, [X20+2590]
	072 Move V10, V1
	073 Move V11, V2
	074 Compare W8, 0
	075 JumpIfNotEqual {81}
	076 Move X0, 0x2378000
	077 Move X0, [X0+1448]
	078 Call 0x1C17CF4
	079 Move W8, 1
	080 Move [X20+2590], W8
	081 Move X20, 0x2378000
	082 Move X20, [X20+1448]
	083 Multiply S0, S9, S9
	084 Multiply S1, S8, S8
	085 Add S12, S0, S1
	086 Move X0, [X20]
	087 Multiply S0, S11, S11
	088 Multiply S1, S10, S10
	089 Add S13, S0, S1
	090 Move W8, [X0+224]
	091 Compare W8, 0
	092 JumpIfNotEqual {94}
	093 Call 0x1C17DFC
	094 Move X8, -19472384
	095 Move V0, [X8+4072]
	096 Multiply S1, S12, S13
	097 NotImplemented "Instruction FSQRT not yet implemented."
	098 NotImplemented "Instruction FCMP not yet implemented."
	099 Move S0, W31
	100 Move X0, [X20]
	101 Multiply S0, S9, S11
	102 Multiply S2, S8, S10
	103 Add S0, S0, S2
	104 Move W8, [X0+224]
	105 NotImplemented "Instruction FDIV not yet implemented."
	106 Move S1, 1
	107 Move S2, -1
	108 NotImplemented "Instruction FMIN not yet implemented."
	109 NotImplemented "Instruction FCMP not yet implemented."
	110 NotImplemented "Instruction FCSEL not yet implemented."
	111 Compare W8, 0
	112 JumpIfNotEqual {114}
	113 Call 0x1C17DFC
	114 NotImplemented "Instruction FCVT not yet implemented."
	115 Call 0x3EB2B80
	116 Move X8, -19468288
	117 Move V1, [X8+1096]
	118 NotImplemented "Instruction INVALID not yet implemented."
	119 Multiply S0, S0, S1
	120 Move X21, 0x265D000
	121 Multiply S1, S9, S10
	122 Multiply S2, S8, S11
	123 Move W8, [X21+2591]
	124 Move X20, [X19+56]
	125 Subtract S1, S1, S2
	126 NotImplemented "Instruction FNEG not yet implemented."
	127 NotImplemented "Instruction FCMP not yet implemented."
	128 NotImplemented "Instruction FCSEL not yet implemented."
	129 Compare W8, 0
	130 JumpIfNotEqual {136}
	131 Move X0, 0x2378000
	132 Move X0, [X0+1440]
	133 Call 0x1C17CF4
	134 Move W8, 1
	135 Move [X21+2591], W8
	136 Compare X20, 0
	137 JumpIfEqual {344}
	138 Move X8, 0x2378000
	139 Move X8, [X8+1440]
	140 Move W1, 1
	141 Move X0, X20
	142 Move V3, V8
	143 Move X8, [X8]
	144 Move X2, X31
	145 Move X8, [X8+184]
	146 Move S1, [X8+76]
	147 Move S2, [X8+80]
	148 Move V0, [X8+72]
	149 Call Transform.Rotate, X0, X1, V0, X2
	150 Move V0, [X19+120]
	151 Move X8, [X19+32]
	152 Add S0, S8, S0
	153 Move [X19+120], S0
	154 Compare X8, 0
	155 JumpIfEqual {236}
	156 Move X9, [X8+24]
	157 Move X0, [X8+64]
	158 Move X1, [X8+40]
	159 Move V0, V8
	160 NotImplemented "Instruction BLR not yet implemented."
	161 Move W20, W0
	162 Move V8, [X19+84]
	163 Move X0, X31
	164 Call Time.get_fixedDeltaTime
	165 Move V1, [X19+88]
	166 Move X8, -19468288
	167 Move V2, [X8+816]
	168 Multiply S0, S0, S1
	169 Move S1, 1
	170 Subtract S0, S1, S0
	171 Multiply S11, S8, S0
	172 NotImplemented "Instruction FCMP not yet implemented."
	173 Move [X19+84], S11
	174 Move X8, -19468288
	175 Move V0, [X8+308]
	176 NotImplemented "Instruction FCMP not yet implemented."
	177 Move [X19+84], W31
	178 Move X21, 0x265D000
	179 Move W8, [X21+2591]
	180 Move X20, [X19+56]
	181 Compare W8, 0
	182 JumpIfNotEqual {189}
	183 Move X0, 0x2378000
	184 Move X0, [X0+1440]
	185 Call 0x1C17CF4
	186 Move W8, 1
	187 Move [X21+2591], W8
	188 Move V11, [X19+84]
	189 Move X8, 0x2378000
	190 Move X8, [X8+1440]
	191 Move X0, X31
	192 Move X8, [X8]
	193 Move X8, [X8+184]
	194 Move S8, [X8+72]
	195 Move S9, [X8+76]
	196 Move V10, [X8+80]
	197 Call Time.get_fixedDeltaTime
	198 Compare X20, 0
	199 JumpIfEqual {344}
	200 Multiply S3, S11, S0
	201 Move W1, 1
	202 Move X0, X20
	203 Move V0, V8
	204 Move V1, V9
	205 Move V2, V10
	206 Move X2, X31
	207 Call Transform.Rotate, X0, X1, V0, X2
	208 Move X20, [X19+32]
	209 Compare X20, 0
	210 JumpIfEqual {220}
	211 Move V8, [X19+84]
	212 Move X0, X31
	213 Call Time.get_fixedDeltaTime
	214 Move X8, [X20+24]
	215 Move X0, [X20+64]
	216 Move X1, [X20+40]
	217 Multiply S0, S8, S0
	218 NotImplemented "Instruction BLR not yet implemented."
	219 Move W20, W0
	220 Move V8, [X19+120]
	221 Move V9, [X19+84]
	222 Move X0, X31
	223 Call Time.get_fixedDeltaTime
	224 Move V1, [X19+96]
	225 Multiply S0, S9, S0
	226 Add S0, S8, S0
	227 NotImplemented "Instruction FABS not yet implemented."
	228 NotImplemented "Instruction FCMP not yet implemented."
	229 Move [X19+120], S0
	230 Move [X19+120], W31
	231 Move TEMP, X20
	232 And TEMP, TEMP, 1
	233 Compare TEMP, 1
	234 JumpIfNotEqual {307}
	235 Move X20, [X19+104]
	236 Move W20, W31
	237 Move X0, X31
	238 Call Time.get_fixedDeltaTime
	239 Move V1, [X19+120]
	240 Move V2, [X19+96]
	241 NotImplemented "Instruction FDIV not yet implemented."
	242 Move [X19+84], S0
	243 NotImplemented "Instruction FABS not yet implemented."
	244 NotImplemented "Instruction FCMP not yet implemented."
	245 Move [X19+120], W31
	246 Move TEMP, X20
	247 And TEMP, TEMP, 1
	248 Compare TEMP, 1
	249 JumpIfNotEqual {251}
	250 Move X20, [X19+104]
	251 Move X20, [X19+112]
	252 Move X0, X19
	253 Move X1, X31
	254 Call Component.get_transform, X0
	255 Compare X0, 0
	256 JumpIfEqual {344}
	257 Move X1, X31
	258 Call Transform.get_position, X0
	259 Compare X20, 0
	260 JumpIfEqual {344}
	261 Move V3, [X19+84]
	262 Move S4, 30
	263 Move X8, -19468288
	264 Move S6, 1
	265 NotImplemented "Instruction FABS not yet implemented."
	266 NotImplemented "Instruction FDIV not yet implemented."
	267 Move V4, [X8+92]
	268 Move X8, -19468288
	269 Move V5, [X8+1100]
	270 NotImplemented "Instruction FMIN not yet implemented."
	271 Multiply S3, S3, S4
	272 Move X0, X20
	273 Add S3, S3, S5
	274 Move W1, W31
	275 Move X2, X31
	276 Call RandomSFX.Play, X0, X1, V0, X2
	277 Move X8, -19468288
	278 Move X9, -19468288
	279 Move W0, [X19+92]
	280 Move V0, [X8+20]
	281 Move V1, [X9+188]
	282 Move X1, X31
	283 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	284 Move X0, [X19+64]
	285 Compare X0, 0
	286 JumpIfEqual {344}
	287 Move X1, X31
	288 Call Component.get_transform, X0
	289 Compare X0, 0
	290 JumpIfEqual {344}
	291 Move X1, X31
	292 Call Transform.get_position, X0
	293 Move [X19+72], S0
	294 Move [X19+80], S1
	295 Move [X19+80], S2
	296 Move X20, [X31+64]
	297 Move X19, [X31+72]
	298 Move X30, [X31+48]
	299 Move X21, [X31+56]
	300 Move D9, [X31+32]
	301 Move D8, [X31+40]
	302 Move D11, [X31+16]
	303 Move D10, [X31+24]
	304 Move D13, [X31+80]
	305 Move D12, [X31+88]
	306 Return 
	307 Move X20, [X19+112]
	308 Move X0, X19
	309 Move X1, X31
	310 Call Component.get_transform, X0
	311 Compare X0, 0
	312 JumpIfEqual {344}
	313 Move X1, X31
	314 Call Transform.get_position, X0
	315 Compare X20, 0
	316 JumpIfEqual {344}
	317 Move V3, [X19+84]
	318 Move X8, -19468288
	319 Move X9, -19468288
	320 Move V5, [X8+92]
	321 Move S4, 30
	322 Move V6, [X9+1100]
	323 NotImplemented "Instruction FABS not yet implemented."
	324 NotImplemented "Instruction FDIV not yet implemented."
	325 Move S4, 1
	326 Move X0, X20
	327 Move X20, [X31+64]
	328 Move X19, [X31+72]
	329 Move X30, [X31+48]
	330 Move X21, [X31+56]
	331 Move D9, [X31+32]
	332 Move D8, [X31+40]
	333 Move D11, [X31+16]
	334 Move D10, [X31+24]
	335 NotImplemented "Instruction FMIN not yet implemented."
	336 Multiply S3, S3, S5
	337 Add S3, S3, S6
	338 Move W1, W31
	339 Move X2, X31
	340 Move D13, [X31+80]
	341 Move D12, [X31+88]
	342 Call RandomSFX.Play, X0, X1, V0, X2
	343 Return 
	344 Call 0x1C17F20

Method: System.Void TriggerEnter(UnityEngine.Collider col)

Disassembly:
	0x01D7CB84 MOV X1, X31
	0x01D7CB88 LDR X30, [X31], #0x10
	0x01D7CB8C B 0x3C246FC
	0x01D7CB90 STR X30, [X31 - 0x10]!
	0x01D7CB94 STRB W31, [X0 + 0x40]
	0x01D7CB98 MOVZ W0, 0x1
	0x01D7CB9C MOV X1, X31
	0x01D7CBA0 BL 0x3C24698
	0x01D7CBA4 MOV W0, W31
	0x01D7CBA8 MOV X1, X31
	0x01D7CBAC LDR X30, [X31], #0x10
	0x01D7CBB0 B 0x3C246FC
	0x01D7CBB4 ADRP X8, 0xFFFFFFFFFED6E000
	0x01D7CBB8 LDR V0, [X8 + 0x8F]
	0x01D7CBBC MOVZ W8, 0x1
	0x01D7CBC0 MOVZ W9, 0x42480000
	0x01D7CBC4 MOV X1, X31
	0x01D7CBC8 STRB W8, [X0 + 0x28]
	0x01D7CBCC STUR V0, [X0 + 0x2C]
	0x01D7CBD0 STR W9, [X0 + 0x3C]
	0x01D7CBD4 B 0x3C36C30
	0x01D7CBD8 LDR X0, [X0 + 0x20]
	0x01D7CBDC RET
	0x01D7CBE0 MOV X1, X31
	0x01D7CBE4 B 0x3C36C30
	0x01D7CBE8 STP X30, X21, [X31 - 0x20]!
	0x01D7CBEC STP X20, X19, [X31 + 0x10]
	0x01D7CBF0 ADRP X21, 0x265C000
	0x01D7CBF4 LDRB W8, [X21 + 0x94D]
	0x01D7CBF8 MOV X20, X1
	0x01D7CBFC MOV X19, X0
	0x01D7CC00 TBNZ X8, 0x0, 0x1D7CC18
	0x01D7CC04 ADRP X0, 0x2378000
	0x01D7CC08 LDR X0, [X0 + 0xB18]
	0x01D7CC0C BL 0x1C16CF4
	0x01D7CC10 MOVZ W8, 0x1
	0x01D7CC14 STRB W8, [X21 + 0x94D]
	0x01D7CC18 LDR X0, [X19 + 0x20]
	0x01D7CC1C CBZ X0, 0x1D7CC9C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x265D000
	006 Move W8, [X21+2375]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x237A000
	014 Move X0, [X0+1664]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2375], W8
	018 Add X1, X19, 92
	019 Move X0, X20
	020 Call HandInputUtility.HandleFingerTipInput, X0, X1
	021 Move [X19+64], X20
	022 Compare X20, 0
	023 JumpIfEqual {52}
	024 Move X0, X20
	025 Move X1, X31
	026 Call Component.get_transform, X0
	027 Compare X0, 0
	028 JumpIfEqual {52}
	029 Move X1, X31
	030 Call Transform.get_position, X0
	031 Move X0, [X19+48]
	032 Move [X19+72], S0
	033 Move [X19+80], S1
	034 Move [X19+80], S2
	035 Compare X0, 0
	036 JumpIfEqual {52}
	037 Move X1, X31
	038 Call Renderer.get_material, X0
	039 Compare X0, 0
	040 JumpIfEqual {52}
	041 Move X8, 0x237A000
	042 Move X8, [X8+1664]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move S0, 1
	046 Move X2, X31
	047 Move X1, [X8]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Call Material.SetFloat, X0, X1, V0
	051 Return 
	052 Call 0x1C17F20

Method: System.Void TriggerExit(UnityEngine.Collider col)

Disassembly:
	0x01D7CC20 MOV X1, X31
	0x01D7CC24 BL 0x3C32ECC
	0x01D7CC28 CBZ X0, 0x1D7CC9C
	0x01D7CC2C CMP X20, 0x0
	0x01D7CC30 CSET W1, NE
	0x01D7CC34 MOV X2, X31
	0x01D7CC38 BL 0x3C357B4
	0x01D7CC3C CBZ X20, 0x1D7CC90
	0x01D7CC40 LDR X0, [X19 + 0x20]
	0x01D7CC44 CBZ X0, 0x1D7CC9C
	0x01D7CC48 MOV X1, X20
	0x01D7CC4C MOV X2, X31
	0x01D7CC50 BL 0x1E1F0D8
	0x01D7CC54 LDR X8, [X20 + 0x50]
	0x01D7CC58 CBZ X8, 0x1D7CC9C
	0x01D7CC5C LDR X0, [X19 + 0x20]
	0x01D7CC60 CBZ X0, 0x1D7CC9C
	0x01D7CC64 LDP S2, S3, [X8 + 0x54]
	0x01D7CC68 LDP S0, S1, [X8 + 0x4C]
	0x01D7CC6C MOV X1, X31
	0x01D7CC70 BL 0x1E1EF5C
	0x01D7CC74 LDR X0, [X19 + 0x20]
	0x01D7CC78 CBZ X0, 0x1D7CC9C
	0x01D7CC7C LDP X20, X19, [X31 + 0x10]
	0x01D7CC80 MOVZ W1, 0x1
	0x01D7CC84 MOV X2, X31
	0x01D7CC88 LDP X30, X21, [X31], #0x20
	0x01D7CC8C B 0x1E1ED54
	0x01D7CC90 LDP X20, X19, [X31 + 0x10]
	0x01D7CC94 LDP X30, X21, [X31], #0x20
	0x01D7CC98 RET
	0x01D7CC9C BL 0x1C16F20
	0x01D7CCA0 FMOV S1, 1
	0x01D7CCA4 FCMP S0, 0x0
	0x01D7CCA8 FMIN S0, S0, S1
	0x01D7CCAC FMOV S1, W31
	0x01D7CCB0 FCSEL S0, S0, S1, PL
	0x01D7CCB4 STR S0, [X0 + 0x40]
	0x01D7CCB8 RET
	0x01D7CCBC STR D12, [X31 - 0x50]!
	0x01D7CCC0 STP D11, D10, [X31 + 0x8]
	0x01D7CCC4 STP D9, D8, [X31 + 0x18]
	0x01D7CCC8 STR X30, [X31 + 0x28]
	0x01D7CCCC STP X22, X21, [X31 + 0x30]
	0x01D7CCD0 STP X20, X19, [X31 + 0x40]
	0x01D7CCD4 ADRP X20, 0x265C000
	0x01D7CCD8 LDRB W8, [X20 + 0x94E]
	0x01D7CCDC MOV X19, X0
	0x01D7CCE0 TBNZ X8, 0x0, 0x1D7CD04
	0x01D7CCE4 ADRP X0, 0x237A000
	0x01D7CCE8 LDR X0, [X0 + 0x468]
	0x01D7CCEC BL 0x1C16CF4
	0x01D7CCF0 ADRP X0, 0x2377000
	0x01D7CCF4 LDR X0, [X0 + 0x598]
	0x01D7CCF8 BL 0x1C16CF4
	0x01D7CCFC MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x265D000
	007 Move X21, 0x2378000
	008 Move W8, [X22+2376]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x2378000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move X0, 0x237A000
	020 Move X0, [X0+1664]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2376], W8
	024 Move X0, [X21]
	025 Move X21, [X19+64]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X21
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {66}
	038 Move X8, -19468288
	039 Move X9, -19468288
	040 Move W0, [X19+92]
	041 Move V0, [X8+268]
	042 Move V1, [X9+188]
	043 Move X1, X31
	044 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	045 Move X0, [X19+48]
	046 Move [X19+64], X31
	047 Compare X0, 0
	048 JumpIfEqual {72}
	049 Move X1, X31
	050 Call Renderer.get_material, X0
	051 Compare X0, 0
	052 JumpIfEqual {72}
	053 Move X8, 0x237A000
	054 Move X8, [X8+1664]
	055 Move X9, -19472384
	056 Move V0, [X9+4024]
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X1, [X8]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X2, X31
	063 Move X30, [X31+48]
	064 Call Material.SetFloat, X0, X1, V0
	065 Return 
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Return 
	072 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D7CD00 STRB W8, [X20 + 0x94E]
	0x01D7CD04 LDR X0, [X19 + 0x20]
	0x01D7CD08 CBZ X0, 0x1D7CF8C
	0x01D7CD0C MOV X1, X31
	0x01D7CD10 BL 0x3C32ECC
	0x01D7CD14 CBZ X0, 0x1D7CF8C

ISIL:
	001 Move W8, 0x3E800000
	002 Move W9, 0x3F800000
	003 Move X1, X31
	004 Move [X0+88], W8
	005 Move [X0+96], W9
	006 Call MonoBehaviour..ctor, X0
	007 Return 

