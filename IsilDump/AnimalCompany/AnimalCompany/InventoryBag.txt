Type: AnimalCompany.InventoryBag

Method: System.Boolean get_isOpen()

Disassembly:
	0x01CA8EA8 BL 0x1B6E7F0
	0x01CA8EAC ADRP X0, 0x22A6000
	0x01CA8EB0 LDR X0, [X0 + 0x1E8]
	0x01CA8EB4 BL 0x1B6E7F0
	0x01CA8EB8 ADRP X0, 0x22A5000
	0x01CA8EBC LDR X0, [X0 + 0x478]
	0x01CA8EC0 BL 0x1B6E7F0
	0x01CA8EC4 ADRP X0, 0x22A5000
	0x01CA8EC8 LDR X0, [X0 + 0x4C0]
	0x01CA8ECC BL 0x1B6E7F0
	0x01CA8ED0 MOVZ W8, 0x1
	0x01CA8ED4 STRB W8, [X20 + 0x477]
	0x01CA8ED8 ADRP X25, 0x22A5000
	0x01CA8EDC LDR X25, [X25 + 0x478]
	0x01CA8EE0 ADD X8, X31, 0x8
	0x01CA8EE4 MOV X0, X19
	0x01CA8EE8 STP X31, X31, [X31 + 0x40]
	0x01CA8EEC STR X31, [X31 + 0x50]
	0x01CA8EF0 STR X31, [X31 + 0x68]
	0x01CA8EF4 STR W31, [X31 + 0x3C]
	0x01CA8EF8 BL 0x1CA7F74
	0x01CA8EFC LDUR V0, [X31 + 0x8]
	0x01CA8F00 LDR X9, [X31 + 0x18]
	0x01CA8F04 MOV W20, W31
	0x01CA8F08 STR V0, [X31 + 0x4]
	0x01CA8F0C LDR W8, [X31 + 0x48]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x22A6000
	013 Move X0, [X0+1168]
	014 Call 0x1B6F804
	015 Call 0x1B6FA0C
	016 Move X19, X0
	017 Move X0, 0x22A7000
	018 Move X0, [X0+1616]
	019 Call 0x1B6F804
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x22A7000
	025 Move X0, [X0+1624]
	026 Call 0x1B6F804
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1B6F8E8

Method: System.Void set_isOpen(System.Boolean value)

Disassembly:
	0x01CA8F10 STR V0, [X31 + 0x2]
	0x01CA8F14 STR X9, [X31 + 0x50]
	0x01CA8F18 CMP W8, 0x1
	0x01CA8F1C B.LT 0x1CA9060
	0x01CA8F20 ADRP X23, 0x22A6000
	0x01CA8F24 ADRP X24, 0x22A6000
	0x01CA8F28 ADRP X26, 0x22A6000
	0x01CA8F2C LDR X23, [X23 + 0x6E0]
	0x01CA8F30 LDR X24, [X24 + 0x1E8]
	0x01CA8F34 LDR X26, [X26 + 0x298]
	0x01CA8F38 MOV W21, W31
	0x01CA8F3C FMOV S8, 5
	0x01CA8F40 ADD X8, X31, 0x20
	0x01CA8F44 MOV X0, X19
	0x01CA8F48 BL 0x1CA7F74
	0x01CA8F4C LDR V0, [X31 + 0x2]
	0x01CA8F50 LDR X8, [X31 + 0x30]
	0x01CA8F54 LDR X2, [X23]
	0x01CA8F58 ADD X0, X31, 0x40
	0x01CA8F5C MOV W1, W21
	0x01CA8F60 STR V0, [X31 + 0x4]
	0x01CA8F64 STR X8, [X31 + 0x50]
	0x01CA8F68 BL 0x22AE564
	0x01CA8F6C LDR X8, [X24]
	0x01CA8F70 MOV X22, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x22A6000
	012 Move X0, [X0+1168]
	013 Call 0x1B6F804
	014 Call 0x1B6FA0C
	015 Move X19, X0
	016 Move X0, 0x22A7000
	017 Move X0, [X0+1616]
	018 Call 0x1B6F804
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x22A7000
	024 Move X0, [X0+1632]
	025 Call 0x1B6F804
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1B6F8E8

Method: Fusion.NetworkArray`1<Fusion.NetworkId> get_containedObjects()

Disassembly:
	0x01CA8F74 LDR W9, [X8 + 0xE0]
	0x01CA8F78 CBZ W9, 0x1CA8F84
	0x01CA8F7C CBNZ W22, 0x1CA8F90
	0x01CA8F80 B 0x1CA9024
	0x01CA8F84 MOV X0, X8
	0x01CA8F88 BL 0x1B6E8F8
	0x01CA8F8C CBZ W22, 0x1CA9024
	0x01CA8F90 LDR X0, [X19 + 0x38]
	0x01CA8F94 CBZ X0, 0x1CA9310
	0x01CA8F98 AND X1, X22, 0x0
	0x01CA8F9C MOV X2, X31
	0x01CA8FA0 BL 0x1D8BE9C
	0x01CA8FA4 LDR X8, [X25]
	0x01CA8FA8 MOV X22, X0
	0x01CA8FAC LDR W9, [X8 + 0xE0]
	0x01CA8FB0 CBNZ W9, 0x1CA8FBC
	0x01CA8FB4 MOV X0, X8
	0x01CA8FB8 BL 0x1B6E8F8
	0x01CA8FBC MOV X0, X22
	0x01CA8FC0 MOV X1, X31
	0x01CA8FC4 MOV X2, X31
	0x01CA8FC8 ADD W20, W20, 0x1
	0x01CA8FCC BL 0x3AA0AF0
	0x01CA8FD0 TBNZ X0, 0x0, 0x1CA9024
	0x01CA8FD4 CBZ X22, 0x1CA9310
	0x01CA8FD8 LDR X1, [X26]
	0x01CA8FDC MOV X0, X22
	0x01CA8FE0 BL 0x208FDE8
	0x01CA8FE4 LDR X8, [X25]
	0x01CA8FE8 MOV X22, X0
	0x01CA8FEC LDR W9, [X8 + 0xE0]
	0x01CA8FF0 CBNZ W9, 0x1CA8FFC
	0x01CA8FF4 MOV X0, X8
	0x01CA8FF8 BL 0x1B6E8F8
	0x01CA8FFC MOV X0, X22
	0x01CA9000 MOV X1, X31
	0x01CA9004 MOV X2, X31
	0x01CA9008 BL 0x3A9D6EC
	0x01CA900C TBZ X0, 0x0, 0x1CA9024
	0x01CA9010 CBZ X22, 0x1CA9310
	0x01CA9014 MOV X0, X22
	0x01CA9018 MOV X1, X31
	0x01CA901C BL 0x3AF67EC
	0x01CA9020 FADD S8, S8, S0
	0x01CA9024 ADD X8, X31, 0x8
	0x01CA9028 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x257C000
	006 Move W9, [X21+1130]
	007 Move X20, X0
	008 Move X19, X8
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22A7000
	014 Move X0, [X0+1640]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X21+1130], W8
	018 Move X20, [X20+80]
	019 Compare X20, 0
	020 JumpIfEqual {39}
	021 Move X21, 0x22A7000
	022 Move X21, [X21+1640]
	023 Move X0, X31
	024 Call ReaderWriter@Fusion_NetworkId.GetInstance
	025 Move X3, X0
	026 Move [X19+8], X31
	027 Move [X19+16], X31
	028 Move X4, [X21]
	029 Add X1, X20, 4
	030 Move [X19], X31
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move W2, 10
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call NetworkArray`1<NetworkId>..ctor, X0, X1, X2, X3
	038 Return X0
	039 Move X0, 0x22A6000
	040 Move X0, [X0+1168]
	041 Call 0x1B6F804
	042 Call 0x1B6FA0C
	043 Move X19, X0
	044 Move X0, 0x22A7000
	045 Move X0, [X0+1648]
	046 Call 0x1B6F804
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call InvalidOperationException..ctor, X0, X1
	051 Move X0, 0x22A6000
	052 Move X0, [X0+1656]
	053 Call 0x1B6F804
	054 Move X1, X0
	055 Move X0, X19
	056 Call 0x1B6F8E8

Method: Fusion.TickTimer get_emptyingTimer()

Disassembly:
	0x01CA902C ADD W21, W21, 0x1
	0x01CA9030 BL 0x1CA7F74
	0x01CA9034 LDUR V0, [X31 + 0x8]
	0x01CA9038 LDR X9, [X31 + 0x18]
	0x01CA903C STR V0, [X31 + 0x4]
	0x01CA9040 LDR W8, [X31 + 0x48]
	0x01CA9044 STR V0, [X31 + 0x2]
	0x01CA9048 STR X9, [X31 + 0x50]
	0x01CA904C CMP W21, W8
	0x01CA9050 B.LT 0x1CA8F40
	0x01CA9054 CMP W20, 0x9
	0x01CA9058 B.LE 0x1CA9064
	0x01CA905C B 0x1CA9224
	0x01CA9060 FMOV S8, 5
	0x01CA9064 LDR X0, [X19 + 0x90]
	0x01CA9068 CBZ X0, 0x1CA9310
	0x01CA906C ADRP X22, 0x22A5000
	0x01CA9070 ADRP X21, 0x22A4000
	0x01CA9074 LDR X22, [X22 + 0x3D8]
	0x01CA9078 LDR X21, [X21 + 0x4C0]
	0x01CA907C MOV X1, X31
	0x01CA9080 BL 0x3AA7658
	0x01CA9084 LDR X0, [X22]
	0x01CA9088 MOV V10.16B, V0.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+44]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x22A5000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x22A6000
	016 Move X0, [X0+1664]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22A6000
	023 Move X0, [X0+1672]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void set_emptyingTimer(Fusion.TickTimer value)

Disassembly:
	0x01CA908C MOV V11.16B, V1.16B
	0x01CA9090 MOV V12.16B, V2.16B
	0x01CA9094 LDR W8, [X0 + 0xE0]
	0x01CA9098 CBNZ W8, 0x1CA90A4
	0x01CA909C BL 0x1B6E8F8
	0x01CA90A0 LDR X0, [X22]
	0x01CA90A4 LDR X8, [X0 + 0xB8]
	0x01CA90A8 MOV X1, X31
	0x01CA90AC LDR W0, [X8 + 0xC]
	0x01CA90B0 BL 0x3A9DE68
	0x01CA90B4 LDR X8, [X21]
	0x01CA90B8 MOV W21, W0
	0x01CA90BC LDR W9, [X8 + 0xE0]
	0x01CA90C0 CBNZ W9, 0x1CA90CC
	0x01CA90C4 MOV X0, X8
	0x01CA90C8 BL 0x1B6E8F8
	0x01CA90CC ADRP X8, 0xFFFFFFFFFEE00000
	0x01CA90D0 LDR V9, [X8 + 0xAB0]
	0x01CA90D4 MOV V0.16B, V10.16B
	0x01CA90D8 MOV V1.16B, V11.16B
	0x01CA90DC MOV V2.16B, V12.16B
	0x01CA90E0 MOV V3.16B, V9.16B
	0x01CA90E4 MOV W0, W21
	0x01CA90E8 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+44], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x22A5000
	011 Move X0, [X0+1168]
	012 Call 0x1B6F804
	013 Call 0x1B6FA0C
	014 Move X19, X0
	015 Move X0, 0x22A6000
	016 Move X0, [X0+1664]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x22A6000
	023 Move X0, [X0+1680]
	024 Call 0x1B6F804
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1B6F8E8

Method: System.Void Awake()

Disassembly:
	0x01CA90EC BL 0x3AF52EC
	0x01CA90F0 CBZ X0, 0x1CA9310
	0x01CA90F4 LDR W8, [X0 + 0x18]
	0x01CA90F8 MOV X21, X0
	0x01CA90FC CMP W8, 0x1
	0x01CA9100 B.LT 0x1CA9218
	0x01CA9104 ADRP X27, 0x22A5000
	0x01CA9108 LDR X27, [X27 + 0x268]
	0x01CA910C MOV W26, W31
	0x01CA9110 CMP W26, W8
	0x01CA9114 B.CS 0x1CA9314
	0x01CA9118 ADD X8, X21, W26, 0x3, SXTW
	0x01CA911C LDR X0, [X8 + 0x20]
	0x01CA9120 CBZ X0, 0x1CA9310
	0x01CA9124 MOV X1, X31
	0x01CA9128 BL 0x3AF6430
	0x01CA912C LDR X8, [X25]
	0x01CA9130 MOV X22, X0
	0x01CA9134 LDR W9, [X8 + 0xE0]
	0x01CA9138 CBNZ W9, 0x1CA9144
	0x01CA913C MOV X0, X8
	0x01CA9140 BL 0x1B6E8F8
	0x01CA9144 MOV X0, X22
	0x01CA9148 MOV X1, X31
	0x01CA914C MOV X2, X31
	0x01CA9150 BL 0x3A9D6EC
	0x01CA9154 TBZ X0, 0x0, 0x1CA9208
	0x01CA9158 CBZ X22, 0x1CA9310
	0x01CA915C MOV X0, X22
	0x01CA9160 MOV X1, X31
	0x01CA9164 BL 0x3A9B0C0
	0x01CA9168 MOV X23, X0
	0x01CA916C MOV X0, X19
	0x01CA9170 MOV X1, X31
	0x01CA9174 BL 0x3A9B0C0
	0x01CA9178 LDR X8, [X25]
	0x01CA917C MOV X24, X0
	0x01CA9180 LDR W9, [X8 + 0xE0]
	0x01CA9184 CBNZ W9, 0x1CA9190
	0x01CA9188 MOV X0, X8
	0x01CA918C BL 0x1B6E8F8
	0x01CA9190 MOV X0, X23
	0x01CA9194 MOV X1, X24
	0x01CA9198 MOV X2, X31
	0x01CA919C BL 0x3A9D6EC
	0x01CA91A0 TBZ X0, 0x0, 0x1CA9208
	0x01CA91A4 LDR X1, [X27]
	0x01CA91A8 MOV X0, X22
	0x01CA91AC BL 0x208FDE8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x257B000
	008 Move W8, [X20+1131]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x22A6000
	015 Move X0, [X0+368]
	016 Call 0x1B6F7F0
	017 Move X0, 0x22A6000
	018 Move X0, [X0+1688]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X20+1131], W8
	022 Move X22, [X19+128]
	023 Compare X22, 0
	024 JumpIfEqual {58}
	025 Move X23, 0x22A6000
	026 Move X23, [X23+368]
	027 Move X21, 0x22A6000
	028 Move X20, [X22+400]
	029 Move X0, [X23]
	030 Move X21, [X21+1688]
	031 Call 0x1B6FA0C
	032 Move X2, [X21]
	033 Move X1, X19
	034 Move X3, X31
	035 Move X21, X0
	036 Call Action..ctor, X0, X1, X2
	037 Move X0, X20
	038 Move X1, X21
	039 Move X2, X31
	040 Call Delegate.Combine, X0, X1
	041 Compare X0, 0
	042 JumpIfEqual {50}
	043 Move X1, [X23]
	044 Move X8, [X0]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move [X22+400], X0
	047 Move X8, [X0]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Call 0x1B6FCDC
	050 Move [X22+400], X0
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Return 
	058 Call 0x1B6FA1C

Method: System.Void OnDestroy()

Disassembly:
	0x01CA91B0 LDR X8, [X25]
	0x01CA91B4 MOV X23, X0
	0x01CA91B8 LDR W9, [X8 + 0xE0]
	0x01CA91BC CBNZ W9, 0x1CA91C8
	0x01CA91C0 MOV X0, X8
	0x01CA91C4 BL 0x1B6E8F8
	0x01CA91C8 MOV X0, X23
	0x01CA91CC MOV X1, X31
	0x01CA91D0 MOV X2, X31
	0x01CA91D4 BL 0x3A9D6EC
	0x01CA91D8 TBZ X0, 0x0, 0x1CA9208
	0x01CA91DC CBZ X23, 0x1CA9310
	0x01CA91E0 LDRB W8, [X23 + 0x8D]
	0x01CA91E4 CBZ W8, 0x1CA9208
	0x01CA91E8 MOV X0, X23
	0x01CA91EC MOV X1, X31
	0x01CA91F0 BL 0x1C99A60
	0x01CA91F4 STR X0, [X31 + 0x68]
	0x01CA91F8 ADD X0, X31, 0x68
	0x01CA91FC MOV X1, X31
	0x01CA9200 BL 0x1D680F0
	0x01CA9204 TBZ X0, 0x0, 0x1CA924C
	0x01CA9208 LDR W8, [X21 + 0x18]
	0x01CA920C ADD W26, W26, 0x1
	0x01CA9210 CMP W26, W8
	0x01CA9214 B.LT 0x1CA9110
	0x01CA9218 MOV X0, X19
	0x01CA921C MOV V0.16B, V8.16B
	0x01CA9220 BL 0x1CA9B70
	0x01CA9224 LDP X20, X19, [X31 + 0xD0]
	0x01CA9228 LDP X22, X21, [X31 + 0xC0]
	0x01CA922C LDP X24, X23, [X31 + 0xB0]
	0x01CA9230 LDP X26, X25, [X31 + 0xA0]
	0x01CA9234 LDP X30, X27, [X31 + 0x90]
	0x01CA9238 LDP D9, D8, [X31 + 0x80]
	0x01CA923C LDP D11, D10, [X31 + 0x70]
	0x01CA9240 LDR V12, [X31 + 0x60]
	0x01CA9244 ADD X31, X31, 0xE0
	0x01CA9248 RET
	0x01CA924C ADD X8, X31, 0x20
	0x01CA9250 MOV X0, X19
	0x01CA9254 BL 0x1CA7F74
	0x01CA9258 LDR V0, [X31 + 0x2]
	0x01CA925C LDR X8, [X31 + 0x30]
	0x01CA9260 STR V0, [X31 + 0x4]
	0x01CA9264 STR X8, [X31 + 0x50]
	0x01CA9268 LDR X8, [X23 + 0x40]
	0x01CA926C CBZ X8, 0x1CA9310
	0x01CA9270 LDR X8, [X8 + 0x20]
	0x01CA9274 CBZ X8, 0x1CA9280
	0x01CA9278 LDR W2, [X8]
	0x01CA927C B 0x1CA9284
	0x01CA9280 MOV X2, X31
	0x01CA9284 ADRP X8, 0x22A5000
	0x01CA9288 LDR X8, [X8 + 0x6E8]
	0x01CA928C ADD X0, X31, 0x40
	0x01CA9290 MOV W1, W20
	0x01CA9294 LDR X3, [X8]
	0x01CA9298 BL 0x22AE5B0
	0x01CA929C MOV X0, X22
	0x01CA92A0 MOV X1, X31
	0x01CA92A4 BL 0x3AF67EC
	0x01CA92A8 LDR X8, [X19 + 0x40]
	0x01CA92AC MOV V10.16B, V0.16B
	0x01CA92B0 CBZ X8, 0x1CA92C4
	0x01CA92B4 LDR X8, [X8 + 0x20]
	0x01CA92B8 CBZ X8, 0x1CA92C4
	0x01CA92BC LDR W1, [X8]
	0x01CA92C0 B 0x1CA92C8
	0x01CA92C4 MOV X1, X31
	0x01CA92C8 LDR W8, [X19 + 0x68]
	0x01CA92CC MOV X0, X23
	0x01CA92D0 MOV X2, X31
	0x01CA92D4 BFM X1, X8, 0x20, 0x1F

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x257B000
	008 Move X21, 0x22A6000
	009 Move W8, [X20+1132]
	010 Move X21, [X21+448]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x22A6000
	017 Move X0, [X0+368]
	018 Call 0x1B6F7F0
	019 Move X0, 0x22A6000
	020 Move X0, [X0+1688]
	021 Call 0x1B6F7F0
	022 Move X0, 0x22A6000
	023 Move X0, [X0+1696]
	024 Call 0x1B6F7F0
	025 Move X0, 0x22A6000
	026 Move X0, [X0+448]
	027 Call 0x1B6F7F0
	028 Move W8, 1
	029 Move [X20+1132], W8
	030 Move X0, [X21]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1B6F8F8
	035 Compare X19, 0
	036 JumpIfEqual {87}
	037 Move W8, [X19+48]
	038 Move X22, [X19+128]
	039 Or W8, W8, 8
	040 Move [X19+48], W8
	041 Compare X22, 0
	042 JumpIfEqual {87}
	043 Move X23, 0x22A6000
	044 Move X23, [X23+368]
	045 Move X21, 0x22A6000
	046 Move X20, [X22+400]
	047 Move X0, [X23]
	048 Move X21, [X21+1688]
	049 Call 0x1B6FA0C
	050 Move X2, [X21]
	051 Move X1, X19
	052 Move X3, X31
	053 Move X21, X0
	054 Call Action..ctor, X0, X1, X2
	055 Move X0, X20
	056 Move X1, X21
	057 Move X2, X31
	058 Call Delegate.Remove, X0, X1
	059 Compare X0, 0
	060 JumpIfEqual {68}
	061 Move X1, [X23]
	062 Move X8, [X0]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move [X22+400], X0
	065 Move X8, [X0]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Call 0x1B6FCDC
	068 Move [X22+400], X0
	069 Move X8, 0x22A6000
	070 Move X8, [X8+1696]
	071 Move W19, [X19+188]
	072 Move X0, [X8]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1B6F8F8
	077 Move W0, W19
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, X31
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Call LeanTween.cancel, X0
	086 Return 
	087 Call 0x1B6FA1C

Method: System.Single GetFilledAmount()

Disassembly:
	0x01CA92D8 BL 0x1CA09F4
	0x01CA92DC LDR X0, [X19 + 0x80]
	0x01CA92E0 CBZ X0, 0x1CA9310
	0x01CA92E4 ADD X1, X31, 0x3C
	0x01CA92E8 MOV X2, X31
	0x01CA92EC FADD S8, S8, S10
	0x01CA92F0 BL 0x1C9E62C
	0x01CA92F4 TBZ X0, 0x0, 0x1CA9218
	0x01CA92F8 LDR W0, [X31 + 0x3C]
	0x01CA92FC FMOV S0, 0.5
	0x01CA9300 MOV V1.16B, V9.16B
	0x01CA9304 MOV X1, X31
	0x01CA9308 BL 0x1CC220C
	0x01CA930C B 0x1CA9218
	0x01CA9310 BL 0x1B6EA1C
	0x01CA9314 BL 0x1B6EA24
	0x01CA9318 SUB X31, X31, 0xB0
	0x01CA931C STR D8, [X31 + 0x60]
	0x01CA9320 STR X30, [X31 + 0x68]
	0x01CA9324 STP X26, X25, [X31 + 0x70]
	0x01CA9328 STP X24, X23, [X31 + 0x80]
	0x01CA932C STP X22, X21, [X31 + 0x90]
	0x01CA9330 STP X20, X19, [X31 + 0xA0]
	0x01CA9334 ADRP X20, 0x257A000
	0x01CA9338 LDRB W8, [X20 + 0x476]
	0x01CA933C MOV X19, X0
	0x01CA9340 TBNZ X8, 0x0, 0x1CA93A0
	0x01CA9344 ADRP X0, 0x22A5000
	0x01CA9348 LDR X0, [X0 + 0x268]
	0x01CA934C BL 0x1B6E7F0
	0x01CA9350 ADRP X0, 0x22A5000
	0x01CA9354 LDR X0, [X0 + 0x298]
	0x01CA9358 BL 0x1B6E7F0
	0x01CA935C ADRP X0, 0x22A5000
	0x01CA9360 LDR X0, [X0 + 0x6E0]
	0x01CA9364 BL 0x1B6E7F0
	0x01CA9368 ADRP X0, 0x22A5000
	0x01CA936C LDR X0, [X0 + 0x6E8]
	0x01CA9370 BL 0x1B6E7F0
	0x01CA9374 ADRP X0, 0x22A5000
	0x01CA9378 LDR X0, [X0 + 0x6B0]
	0x01CA937C BL 0x1B6E7F0
	0x01CA9380 ADRP X0, 0x22A5000
	0x01CA9384 LDR X0, [X0 + 0x1E8]
	0x01CA9388 BL 0x1B6E7F0
	0x01CA938C ADRP X0, 0x22A4000
	0x01CA9390 LDR X0, [X0 + 0x478]
	0x01CA9394 BL 0x1B6E7F0
	0x01CA9398 MOVZ W8, 0x1
	0x01CA939C STRB W8, [X20 + 0x476]
	0x01CA93A0 ADD X8, X31, 0x8
	0x01CA93A4 MOV X0, X19
	0x01CA93A8 STP X31, X31, [X31 + 0x40]
	0x01CA93AC STR X31, [X31 + 0x50]
	0x01CA93B0 STR W31, [X31 + 0x3C]
	0x01CA93B4 BL 0x1CA7F74
	0x01CA93B8 LDUR V0, [X31 + 0x8]
	0x01CA93BC LDR X9, [X31 + 0x18]
	0x01CA93C0 STR V0, [X31 + 0x4]
	0x01CA93C4 LDR W8, [X31 + 0x48]
	0x01CA93C8 STR V0, [X31 + 0x2]
	0x01CA93CC STR X9, [X31 + 0x50]
	0x01CA93D0 CMP W8, 0x1
	0x01CA93D4 B.LT 0x1CA9748
	0x01CA93D8 ADRP X25, 0x22A5000
	0x01CA93DC ADRP X26, 0x22A5000
	0x01CA93E0 ADRP X23, 0x22A4000
	0x01CA93E4 ADRP X24, 0x22A5000
	0x01CA93E8 LDR X25, [X25 + 0x6E0]
	0x01CA93EC LDR X26, [X26 + 0x1E8]
	0x01CA93F0 LDR X23, [X23 + 0x478]
	0x01CA93F4 LDR X24, [X24 + 0x298]
	0x01CA93F8 MOV W21, W31
	0x01CA93FC MOVN W20, 0x0
	0x01CA9400 FMOV S8, 5

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+104], X23
	004 Move [X31+112], X22
	005 Move [X31+120], X21
	006 Move [X31+128], X20
	007 Move [X31+136], X19
	008 Move X20, 0x257B000
	009 Move W8, [X20+1133]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x22A6000
	016 Move X0, [X0+1704]
	017 Call 0x1B6F7F0
	018 Move X0, 0x22A6000
	019 Move X0, [X0+1712]
	020 Call 0x1B6F7F0
	021 Move X0, 0x22A6000
	022 Move X0, [X0+488]
	023 Call 0x1B6F7F0
	024 Move W8, 1
	025 Move [X20+1133], W8
	026 Add X8, X31, 8
	027 Move X0, X19
	028 Move [X31+64], X31
	029 Move [X31+72], X31
	030 Move [X31+80], X31
	031 Call InventoryBag.get_containedObjects, X0
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 Move X9, [X31+24]
	034 Move W20, W31
	035 Move [X31+4], V0
	036 Move W8, [X31+72]
	037 Move [X31+2], V0
	038 Move [X31+80], X9
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X22, 0x22A6000
	041 Move X23, 0x22A6000
	042 Move X22, [X22+1704]
	043 Move X23, [X23+488]
	044 Add X8, X31, 32
	045 Move X0, X19
	046 Call InventoryBag.get_containedObjects, X0
	047 Move V0, [X31+2]
	048 Move X8, [X31+48]
	049 Move X2, [X22]
	050 Add X0, X31, 64
	051 Move W1, W20
	052 Move [X31+4], V0
	053 Move [X31+80], X8
	054 Call NetworkArray`1<NetworkId>.get_Item, X0, X1
	055 Move X8, [X23]
	056 Move X21, X0
	057 Move W9, [X8+224]
	058 Compare W9, 0
	059 JumpIfNotEqual {62}
	060 Move X0, X8
	061 Call 0x1B6F8F8
	062 Compare W21, 0
	063 JumpIfEqual {75}
	064 Add X8, X31, 8
	065 Move X0, X19
	066 Add W20, W20, 1
	067 Call InventoryBag.get_containedObjects, X0
	068 NotImplemented "Instruction LDUR not yet implemented."
	069 Move X9, [X31+24]
	070 Move [X31+4], V0
	071 Move W8, [X31+72]
	072 Move [X31+2], V0
	073 Move [X31+80], X9
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction SCVTF not yet implemented."
	076 Move X20, [X31+128]
	077 Move X19, [X31+136]
	078 Move X22, [X31+112]
	079 Move X21, [X31+120]
	080 Move X30, [X31+96]
	081 Move X23, [X31+104]
	082 Move S1, 10
	083 NotImplemented "Instruction FDIV not yet implemented."
	084 Add X31, X31, 144
	085 Return V0

Method: System.Void RPC_ToggleOnOff()

Disassembly:
	0x01CA9404 ADD X8, X31, 0x20
	0x01CA9408 MOV X0, X19
	0x01CA940C BL 0x1CA7F74
	0x01CA9410 LDR V0, [X31 + 0x2]
	0x01CA9414 LDR X8, [X31 + 0x30]
	0x01CA9418 LDR X2, [X25]
	0x01CA941C ADD X0, X31, 0x40
	0x01CA9420 MOV W1, W21
	0x01CA9424 STR V0, [X31 + 0x4]
	0x01CA9428 STR X8, [X31 + 0x50]
	0x01CA942C BL 0x22AE564
	0x01CA9430 LDR X8, [X26]
	0x01CA9434 MOV X22, X0
	0x01CA9438 LDR W9, [X8 + 0xE0]
	0x01CA943C CBZ W9, 0x1CA9448
	0x01CA9440 CBNZ W22, 0x1CA9454
	0x01CA9444 B 0x1CA94E8
	0x01CA9448 MOV X0, X8
	0x01CA944C BL 0x1B6E8F8
	0x01CA9450 CBZ W22, 0x1CA94E8
	0x01CA9454 LDR X0, [X19 + 0x38]
	0x01CA9458 CBZ X0, 0x1CA97EC
	0x01CA945C AND X1, X22, 0x0
	0x01CA9460 MOV X2, X31
	0x01CA9464 BL 0x1D8BE9C
	0x01CA9468 LDR X8, [X23]
	0x01CA946C MOV X22, X0
	0x01CA9470 LDR W9, [X8 + 0xE0]
	0x01CA9474 CBNZ W9, 0x1CA9480
	0x01CA9478 MOV X0, X8
	0x01CA947C BL 0x1B6E8F8
	0x01CA9480 MOV X0, X22
	0x01CA9484 MOV X1, X31
	0x01CA9488 MOV X2, X31
	0x01CA948C ADD W20, W20, 0x1
	0x01CA9490 BL 0x3AA0AF0
	0x01CA9494 TBNZ X0, 0x0, 0x1CA94E8
	0x01CA9498 CBZ X22, 0x1CA97EC
	0x01CA949C LDR X1, [X24]
	0x01CA94A0 MOV X0, X22
	0x01CA94A4 BL 0x208FDE8
	0x01CA94A8 LDR X8, [X23]
	0x01CA94AC MOV X22, X0
	0x01CA94B0 LDR W9, [X8 + 0xE0]
	0x01CA94B4 CBNZ W9, 0x1CA94C0
	0x01CA94B8 MOV X0, X8
	0x01CA94BC BL 0x1B6E8F8
	0x01CA94C0 MOV X0, X22
	0x01CA94C4 MOV X1, X31
	0x01CA94C8 MOV X2, X31
	0x01CA94CC BL 0x3A9D6EC
	0x01CA94D0 TBZ X0, 0x0, 0x1CA94E8
	0x01CA94D4 CBZ X22, 0x1CA97EC
	0x01CA94D8 MOV X0, X22
	0x01CA94DC MOV X1, X31
	0x01CA94E0 BL 0x3AF67EC
	0x01CA94E4 FADD S8, S8, S0
	0x01CA94E8 ADD X8, X31, 0x8
	0x01CA94EC MOV X0, X19
	0x01CA94F0 ADD W21, W21, 0x1
	0x01CA94F4 BL 0x1CA7F74
	0x01CA94F8 LDUR V0, [X31 + 0x8]
	0x01CA94FC LDR X9, [X31 + 0x18]
	0x01CA9500 STR V0, [X31 + 0x4]
	0x01CA9504 LDR W8, [X31 + 0x48]
	0x01CA9508 STR V0, [X31 + 0x2]
	0x01CA950C STR X9, [X31 + 0x50]
	0x01CA9510 CMP W21, W8
	0x01CA9514 B.LT 0x1CA9404
	0x01CA9518 TBNZ X20, 0x1F, 0x1CA9748
	0x01CA951C ADD X8, X31, 0x20
	0x01CA9520 MOV X0, X19
	0x01CA9524 BL 0x1CA7F74
	0x01CA9528 LDR V0, [X31 + 0x2]
	0x01CA952C LDR X8, [X31 + 0x30]
	0x01CA9530 LDR X2, [X25]
	0x01CA9534 ADD X0, X31, 0x40
	0x01CA9538 MOV W1, W20
	0x01CA953C STR V0, [X31 + 0x4]
	0x01CA9540 STR X8, [X31 + 0x50]
	0x01CA9544 BL 0x22AE564
	0x01CA9548 LDR X8, [X19 + 0x38]
	0x01CA954C CBZ X8, 0x1CA97EC
	0x01CA9550 AND X1, X0, 0x0
	0x01CA9554 MOV X0, X8
	0x01CA9558 MOV X2, X31
	0x01CA955C BL 0x1D8BE9C
	0x01CA9560 LDR X8, [X23]
	0x01CA9564 MOV X21, X0
	0x01CA9568 LDR W9, [X8 + 0xE0]
	0x01CA956C CBNZ W9, 0x1CA9578
	0x01CA9570 MOV X0, X8
	0x01CA9574 BL 0x1B6E8F8
	0x01CA9578 MOV X0, X21
	0x01CA957C MOV X1, X31
	0x01CA9580 MOV X2, X31
	0x01CA9584 BL 0x3A9D6EC
	0x01CA9588 TBZ X0, 0x0, 0x1CA9764
	0x01CA958C CBZ X21, 0x1CA97EC
	0x01CA9590 MOV X0, X21
	0x01CA9594 MOV X1, X31
	0x01CA9598 BL 0x3A9B084
	0x01CA959C LDR X8, [X19 + 0x90]
	0x01CA95A0 CBZ X8, 0x1CA97EC
	0x01CA95A4 MOV X22, X0
	0x01CA95A8 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x257B000
	005 Move W8, [X20+1134]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x22A6000
	012 Move X0, [X0+448]
	013 Call 0x1B6F7F0
	014 Move X0, 0x22A6000
	015 Move X0, [X0+1720]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1134], W8
	019 Move W8, [X19+88]
	020 Compare W8, 0
	021 JumpIfEqual {33}
	022 Move [X19+88], W31
	023 Move X0, X19
	024 Call InventoryBag.get_isOpen, X0
	025 NotImplemented "Instruction ORN not yet implemented."
	026 And W1, W8, 1
	027 Move X0, X19
	028 Call InventoryBag.set_isOpen, X0, X1
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X20, 0x22A6000
	034 Move X20, [X20+448]
	035 Move X0, [X20]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1B6F8F8
	040 Move X0, X19
	041 Move X1, X31
	042 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	043 Move X0, [X19+56]
	044 Compare X0, 0
	045 JumpIfEqual {130}
	046 Move X1, X31
	047 Call NetworkRunner.get_Stage, X0
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Return 
	053 Move X0, [X19+64]
	054 Compare X0, 0
	055 JumpIfEqual {130}
	056 Move X1, X31
	057 Call NetworkObject.GetLocalAuthorityMask, X0
	058 And W31, W0, 7
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {23}
	063 Move X8, [X19+56]
	064 Compare X8, 0
	065 JumpIfEqual {130}
	066 Move X0, [X8+80]
	067 Compare X0, 0
	068 JumpIfEqual {130}
	069 Move X1, X31
	070 Call Simulation.HasAnyActiveConnections, X0
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {49}
	075 Move X8, [X19+56]
	076 Compare X8, 0
	077 JumpIfEqual {130}
	078 Move X0, [X8+80]
	079 Move W1, 8
	080 Move X2, X31
	081 Call SimulationMessage.Allocate, X0, X1
	082 Move X20, X0
	083 Move W0, 1
	084 Move X1, X31
	085 Call Assert.Check, X0
	086 Move X8, [X19+64]
	087 Compare X8, 0
	088 JumpIfEqual {130}
	089 Move X8, [X8+32]
	090 Compare X8, 0
	091 JumpIfEqual {110}
	092 Move W0, [X8]
	093 Move X0, [X20]
	094 Move X19, [X19+64]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1B6F8F8
	099 Move X8, 0x22A6000
	100 Move X8, [X8+1720]
	101 Move X1, X19
	102 Move X20, [X31+16]
	103 Move X19, [X31+24]
	104 Move W2, 7
	105 Move X0, [X8]
	106 Move X3, X31
	107 Move X30, [X31+32]
	108 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	109 Return 
	110 Move X0, X31
	111 Move W1, [X19+104]
	112 Move W2, 1
	113 Move X3, X31
	114 Call RpcHeader.Create, X0, X1, X2
	115 Move [X20+28], X0
	116 Compare X20, 0
	117 JumpIfEqual {130}
	118 Move W8, 64
	119 Move [X20+12], W8
	120 Move X0, [X19+56]
	121 Compare X0, 0
	122 JumpIfEqual {130}
	123 Move X1, X20
	124 Move X20, [X31+16]
	125 Move X19, [X31+24]
	126 Move X2, X31
	127 Move X30, [X31+32]
	128 Call NetworkRunner.SendRpc, X0, X1
	129 Return 
	130 Call 0x1B6FA1C

Method: System.Void HandleToggleUse()

Disassembly:
	0x01CA95F4 BL 0x3AA7878

ISIL:
	001 Call InventoryBag.RPC_ToggleOnOff, X0
	002 Return 

Method: System.Void HandleIsOpenChanged()

Disassembly:
	0x01CA95AC MOV X1, X31
	0x01CA95B0 BL 0x3AA7658
	0x01CA95B4 CBZ X22, 0x1CA97EC
	0x01CA95B8 MOV X0, X22
	0x01CA95BC MOV X1, X31
	0x01CA95C0 BL 0x3AA76F8
	0x01CA95C4 MOV X0, X21
	0x01CA95C8 MOV X1, X31
	0x01CA95CC BL 0x3A9B084
	0x01CA95D0 LDR X8, [X19 + 0x90]
	0x01CA95D4 CBZ X8, 0x1CA97EC
	0x01CA95D8 MOV X22, X0
	0x01CA95DC MOV X0, X8
	0x01CA95E0 MOV X1, X31
	0x01CA95E4 BL 0x3AA5FBC
	0x01CA95E8 CBZ X22, 0x1CA97EC
	0x01CA95EC MOV X0, X22
	0x01CA95F0 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, [X0+160]
	005 Move X1, X31
	006 Move X19, X0
	007 Call Component.get_transform, X0
	008 Compare X0, 0
	009 JumpIfEqual {22}
	010 Move X1, X31
	011 Call Transform.get_position, X0
	012 Move S3, 1
	013 Move X0, X20
	014 Move X1, X31
	015 Call SFXManager.PlaySFX, X0, X1, V0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Call InventoryBag.AnimateOpenClose, X0
	021 Return 
	022 Call 0x1B6FA1C

Method: System.Void HandleContainedObjectsChanged()

Disassembly:
	0x01CA9818 SUB X31, X31, 0x40
	0x01CA981C STR X30, [X31 + 0x20]
	0x01CA9820 STP X20, X19, [X31 + 0x30]
	0x01CA9824 ADRP X20, 0x257A000
	0x01CA9828 LDRB W8, [X20 + 0x472]
	0x01CA982C MOV X19, X0
	0x01CA9830 TBNZ X8, 0x0, 0x1CA9848
	0x01CA9834 ADRP X0, 0x22A5000
	0x01CA9838 LDR X0, [X0 + 0x6B0]
	0x01CA983C BL 0x1B6E7F0
	0x01CA9840 MOVZ W8, 0x1
	0x01CA9844 STRB W8, [X20 + 0x472]
	0x01CA9848 ADD X8, X31, 0x8
	0x01CA984C MOV X0, X19
	0x01CA9850 BL 0x1CA7F74
	0x01CA9854 LDR W8, [X31 + 0x10]
	0x01CA9858 CMP W8, 0x1
	0x01CA985C B.LT 0x1CA9888
	0x01CA9860 MOV W20, W31
	0x01CA9864 MOV X0, X19
	0x01CA9868 BL 0x1CA9318
	0x01CA986C ADD X8, X31, 0x8
	0x01CA9870 MOV X0, X19
	0x01CA9874 ADD W20, W20, 0x1
	0x01CA9878 BL 0x1CA7F74
	0x01CA987C LDR W8, [X31 + 0x10]
	0x01CA9880 CMP W20, W8
	0x01CA9884 B.LT 0x1CA9864
	0x01CA9888 LDP X20, X19, [X31 + 0x30]
	0x01CA988C LDR X30, [X31 + 0x20]
	0x01CA9890 ADD X31, X31, 0x40
	0x01CA9894 RET
	0x01CA9898 SUB X31, X31, 0xC0
	0x01CA989C STR X30, [X31 + 0x60]
	0x01CA98A0 STP X28, X27, [X31 + 0x70]
	0x01CA98A4 STP X26, X25, [X31 + 0x80]
	0x01CA98A8 STP X24, X23, [X31 + 0x90]
	0x01CA98AC STP X22, X21, [X31 + 0xA0]
	0x01CA98B0 STP X20, X19, [X31 + 0xB0]
	0x01CA98B4 ADRP X22, 0x257A000
	0x01CA98B8 ADRP X21, 0x22A5000
	0x01CA98BC ADRP X20, 0x22A5000
	0x01CA98C0 LDRB W8, [X22 + 0x473]
	0x01CA98C4 LDR X21, [X21 + 0x6F0]
	0x01CA98C8 LDR X20, [X20 + 0x6F8]
	0x01CA98CC MOV X19, X0
	0x01CA98D0 TBNZ X8, 0x0, 0x1CA9948
	0x01CA98D4 ADRP X0, 0x22A5000
	0x01CA98D8 LDR X0, [X0 + 0x268]
	0x01CA98DC BL 0x1B6E7F0
	0x01CA98E0 ADRP X0, 0x22A5000
	0x01CA98E4 LDR X0, [X0 + 0x700]
	0x01CA98E8 BL 0x1B6E7F0
	0x01CA98EC ADRP X0, 0x22A5000
	0x01CA98F0 LDR X0, [X0 + 0x6F8]
	0x01CA98F4 BL 0x1B6E7F0
	0x01CA98F8 ADRP X0, 0x22A5000
	0x01CA98FC LDR X0, [X0 + 0x6F0]
	0x01CA9900 BL 0x1B6E7F0
	0x01CA9904 ADRP X0, 0x22A5000
	0x01CA9908 LDR X0, [X0 + 0x6E0]
	0x01CA990C BL 0x1B6E7F0
	0x01CA9910 ADRP X0, 0x22A5000
	0x01CA9914 LDR X0, [X0 + 0x6A8]
	0x01CA9918 BL 0x1B6E7F0
	0x01CA991C ADRP X0, 0x22A5000
	0x01CA9920 LDR X0, [X0 + 0x6B0]
	0x01CA9924 BL 0x1B6E7F0
	0x01CA9928 ADRP X0, 0x22A5000
	0x01CA992C LDR X0, [X0 + 0x1E8]
	0x01CA9930 BL 0x1B6E7F0
	0x01CA9934 ADRP X0, 0x22A4000
	0x01CA9938 LDR X0, [X0 + 0x478]
	0x01CA993C BL 0x1B6E7F0
	0x01CA9940 MOVZ W8, 0x1
	0x01CA9944 STRB W8, [X22 + 0x473]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x257B000
	006 Move W8, [X20+1135]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x22A5000
	013 Move X0, [X0+1144]
	014 Call 0x1B6F7F0
	015 Move X0, 0x22A6000
	016 Move X0, [X0+408]
	017 Call 0x1B6F7F0
	018 Move W8, 1
	019 Move [X20+1135], W8
	020 Move X8, [X19+128]
	021 Compare X8, 0
	022 JumpIfEqual {103}
	023 Move X9, 0x22A5000
	024 Move X9, [X9+1144]
	025 Move X20, [X8+288]
	026 Move X0, [X9]
	027 Move W9, [X0+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1B6F8F8
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {98}
	039 Move X8, [X19+128]
	040 Compare X8, 0
	041 JumpIfEqual {103}
	042 Move X8, [X8+288]
	043 Compare X8, 0
	044 JumpIfEqual {103}
	045 Move W9, [X8+128]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X0, [X8+64]
	048 Compare X0, 0
	049 JumpIfEqual {98}
	050 Move W8, [X0+96]
	051 Move TEMP, X8
	052 And TEMP, TEMP, 2
	053 Compare TEMP, 2
	054 JumpIfEqual {98}
	055 Move X1, X31
	056 Call NetworkObject.get_HasInputAuthority, X0
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {98}
	061 Move X20, 0x22A6000
	062 Move X20, [X20+408]
	063 Move X0, [X20]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1B6F8F8
	068 Move X21, 0x257B000
	069 Move W8, [X21+1103]
	070 Compare W8, 0
	071 JumpIfNotEqual {77}
	072 Move X0, 0x22A6000
	073 Move X0, [X0+408]
	074 Call 0x1B6F7F0
	075 Move W8, 1
	076 Move [X21+1103], W8
	077 Move X0, [X20]
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {83}
	081 Call 0x1B6F8F8
	082 Move X0, [X20]
	083 Move X8, [X0+184]
	084 Move X0, X19
	085 Move X20, [X8]
	086 Call InventoryBag.GetFilledAmount, X0
	087 Compare X20, 0
	088 JumpIfEqual {103}
	089 Move X0, X20
	090 Move X20, [X31+16]
	091 Move X19, [X31+24]
	092 Move W1, 1
	093 Move X2, X31
	094 Move X30, [X31+32]
	095 Move X21, [X31+40]
	096 Call PlayerController.UpdateBackpack, X0, X1, V0
	097 Return 
	098 Move X20, [X31+16]
	099 Move X19, [X31+24]
	100 Move X30, [X31+32]
	101 Move X21, [X31+40]
	102 Return 
	103 Call 0x1B6FA1C

Method: System.Void AnimateOpenClose()

Disassembly:
	0x01CA95F8 ADRP X8, 0x22A5000
	0x01CA95FC LDR X8, [X8 + 0x268]
	0x01CA9600 MOV X0, X21
	0x01CA9604 LDR X1, [X8]
	0x01CA9608 BL 0x208FDE8
	0x01CA960C LDR X8, [X23]
	0x01CA9610 MOV X22, X0
	0x01CA9614 LDR W9, [X8 + 0xE0]
	0x01CA9618 CBNZ W9, 0x1CA9624
	0x01CA961C MOV X0, X8
	0x01CA9620 BL 0x1B6E8F8
	0x01CA9624 MOV X0, X22
	0x01CA9628 MOV X1, X31
	0x01CA962C MOV X2, X31
	0x01CA9630 BL 0x3A9D6EC
	0x01CA9634 TBZ X0, 0x0, 0x1CA968C
	0x01CA9638 LDR X0, [X19 + 0x90]
	0x01CA963C CBZ X0, 0x1CA97EC
	0x01CA9640 MOV X1, X31
	0x01CA9644 BL 0x3AA7658
	0x01CA9648 CBZ X22, 0x1CA97EC
	0x01CA964C MOV X0, X22
	0x01CA9650 MOV X1, X31
	0x01CA9654 BL 0x1CA0C40
	0x01CA9658 LDR X0, [X19 + 0x80]
	0x01CA965C CBZ X0, 0x1CA97EC
	0x01CA9660 ADD X1, X31, 0x3C
	0x01CA9664 MOV X2, X31
	0x01CA9668 BL 0x1C9E62C
	0x01CA966C TBZ X0, 0x0, 0x1CA968C
	0x01CA9670 ADRP X8, 0xFFFFFFFFFEE00000
	0x01CA9674 ADRP X9, 0xFFFFFFFFFEE00000
	0x01CA9678 LDR W0, [X31 + 0x3C]
	0x01CA967C LDR V0, [X8 + 0x930]
	0x01CA9680 LDR V1, [X9 + 0xAB0]
	0x01CA9684 MOV X1, X31
	0x01CA9688 BL 0x1CC220C
	0x01CA968C LDR X1, [X24]
	0x01CA9690 MOV X0, X21
	0x01CA9694 BL 0x208FDE8
	0x01CA9698 LDR X8, [X23]
	0x01CA969C MOV X22, X0
	0x01CA96A0 LDR W9, [X8 + 0xE0]
	0x01CA96A4 CBNZ W9, 0x1CA96B0
	0x01CA96A8 MOV X0, X8
	0x01CA96AC BL 0x1B6E8F8
	0x01CA96B0 MOV X0, X22
	0x01CA96B4 MOV X1, X31
	0x01CA96B8 MOV X2, X31
	0x01CA96BC BL 0x3A9D6EC
	0x01CA96C0 TBZ X0, 0x0, 0x1CA9750
	0x01CA96C4 ADRP X24, 0x257A000
	0x01CA96C8 LDRB W8, [X24 + 0x43F]
	0x01CA96CC CBNZ W8, 0x1CA96E4
	0x01CA96D0 ADRP X0, 0x22A4000
	0x01CA96D4 LDR X0, [X0 + 0x480]
	0x01CA96D8 BL 0x1B6E7F0
	0x01CA96DC MOVZ W8, 0x1
	0x01CA96E0 STRB W8, [X24 + 0x43F]
	0x01CA96E4 CBZ X22, 0x1CA97EC
	0x01CA96E8 ADRP X25, 0x22A4000
	0x01CA96EC LDR X25, [X25 + 0x480]
	0x01CA96F0 MOV X0, X22
	0x01CA96F4 MOV X1, X31
	0x01CA96F8 LDR X8, [X25]
	0x01CA96FC LDR X8, [X8 + 0xB8]
	0x01CA9700 LDP S1, S2, [X8 + 0x4]
	0x01CA9704 LDR V0, [X8]
	0x01CA9708 BL 0x3AF650C
	0x01CA970C LDRB W8, [X24 + 0x43F]
	0x01CA9710 CBNZ W8, 0x1CA9728
	0x01CA9714 ADRP X0, 0x22A4000
	0x01CA9718 LDR X0, [X0 + 0x480]
	0x01CA971C BL 0x1B6E7F0
	0x01CA9720 MOVZ W8, 0x1
	0x01CA9724 STRB W8, [X24 + 0x43F]
	0x01CA9728 LDR X8, [X25]
	0x01CA972C MOV X0, X22
	0x01CA9730 MOV X1, X31
	0x01CA9734 LDR X8, [X8 + 0xB8]
	0x01CA9738 LDP S0, S1, [X8]
	0x01CA973C LDR V2, [X8 + 0x8]
	0x01CA9740 BL 0x3AF6644
	0x01CA9744 B 0x1CA9754
	0x01CA9748 MOV W0, W31
	0x01CA974C B 0x1CA97C8
	0x01CA9750 CBZ X22, 0x1CA97EC
	0x01CA9754 MOV X0, X22
	0x01CA9758 MOV X1, X31
	0x01CA975C BL 0x3AF67EC
	0x01CA9760 FSUB S8, S8, S0
	0x01CA9764 ADD X8, X31, 0x20
	0x01CA9768 MOV X0, X19
	0x01CA976C BL 0x1CA7F74
	0x01CA9770 ADRP X9, 0x22A5000
	0x01CA9774 LDR V0, [X31 + 0x2]
	0x01CA9778 LDR X8, [X31 + 0x30]
	0x01CA977C LDR X9, [X9 + 0x6E8]
	0x01CA9780 ADD X0, X31, 0x40
	0x01CA9784 MOV W1, W20
	0x01CA9788 MOV X2, X31
	0x01CA978C LDR X3, [X9]
	0x01CA9790 STR V0, [X31 + 0x4]
	0x01CA9794 STR X8, [X31 + 0x50]
	0x01CA9798 BL 0x22AE5B0
	0x01CA979C MOV X0, X19
	0x01CA97A0 MOV V0.16B, V8.16B
	0x01CA97A4 BL 0x1CA9B70
	0x01CA97A8 LDR X0, [X23]
	0x01CA97AC LDR W8, [X0 + 0xE0]
	0x01CA97B0 CBNZ W8, 0x1CA97B8
	0x01CA97B4 BL 0x1B6E8F8
	0x01CA97B8 MOV X0, X21
	0x01CA97BC MOV X1, X31
	0x01CA97C0 MOV X2, X31
	0x01CA97C4 BL 0x3A9D6EC
	0x01CA97C8 LDP X20, X19, [X31 + 0xA0]
	0x01CA97CC LDP X22, X21, [X31 + 0x90]
	0x01CA97D0 LDP X24, X23, [X31 + 0x80]
	0x01CA97D4 LDP X26, X25, [X31 + 0x70]
	0x01CA97D8 LDR X30, [X31 + 0x68]
	0x01CA97DC LDR V8, [X31 + 0x60]
	0x01CA97E0 AND W0, W0, 0x1
	0x01CA97E4 ADD X31, X31, 0xB0
	0x01CA97E8 RET
	0x01CA97EC BL 0x1B6EA1C
	0x01CA97F0 STP X30, X19, [X31 - 0x10]!
	0x01CA97F4 MOV X19, X0
	0x01CA97F8 BL 0x1CA9818
	0x01CA97FC LDR X0, [X19 + 0x38]
	0x01CA9800 CBZ X0, 0x1CA9814
	0x01CA9804 LDR X1, [X19 + 0x40]
	0x01CA9808 MOV X2, X31
	0x01CA980C LDP X30, X19, [X31], #0x10
	0x01CA9810 B 0x1D8C548
	0x01CA9814 BL 0x1B6EA1C

ISIL:
	001 Move [X31-80], D9
	002 Move [X31-72], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x257B000
	011 Move X21, 0x22A6000
	012 Move W8, [X20+1136]
	013 Move X21, [X21+1728]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {39}
	019 Move X0, 0x22A6000
	020 Move X0, [X0+1736]
	021 Call 0x1B6F7F0
	022 Move X0, 0x22A6000
	023 Move X0, [X0+368]
	024 Call 0x1B6F7F0
	025 Move X0, 0x22A6000
	026 Move X0, [X0+1696]
	027 Call 0x1B6F7F0
	028 Move X0, 0x22A6000
	029 Move X0, [X0+1744]
	030 Call 0x1B6F7F0
	031 Move X0, 0x22A6000
	032 Move X0, [X0+1752]
	033 Call 0x1B6F7F0
	034 Move X0, 0x22A6000
	035 Move X0, [X0+1728]
	036 Call 0x1B6F7F0
	037 Move W8, 1
	038 Move [X20+1136], W8
	039 Move X0, [X21]
	040 Call 0x1B6FA0C
	041 Move X1, X31
	042 Move X20, X0
	043 Call Object..ctor, X0
	044 Compare X20, 0
	045 JumpIfEqual {155}
	046 Move X22, 0x22A6000
	047 Move X22, [X22+1696]
	048 Move [X20+16], X19
	049 Move W21, [X19+188]
	050 Move X0, [X22]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1B6F8F8
	055 Move W0, W21
	056 Move X1, X31
	057 Call LeanTween.cancel, X0
	058 Move X0, [X19+152]
	059 Compare X0, 0
	060 JumpIfEqual {155}
	061 Move X1, X31
	062 Call Transform.get_localRotation, X0
	063 Move X0, X31
	064 Call Quaternion.Internal_ToEulerRad, X0
	065 Move X8, -18870272
	066 Move V3, [X8+3612]
	067 Move X0, X31
	068 Multiply S0, S0, S3
	069 Multiply S1, S1, S3
	070 Multiply S2, S2, S3
	071 Call Quaternion.Internal_MakePositive, X0
	072 Move W8, 0xC3B40000
	073 Move W9, 0x43340000
	074 Move S1, W8
	075 Move S2, W9
	076 Add S1, S0, S1
	077 NotImplemented "Instruction FCMP not yet implemented."
	078 Move X0, X19
	079 NotImplemented "Instruction FCSEL not yet implemented."
	080 Call InventoryBag.get_isOpen, X0
	081 Move W8, 0xC2B40000
	082 And W31, W0, 1
	083 Move S0, W31
	084 Move S1, W8
	085 NotImplemented "Instruction FCSEL not yet implemented."
	086 Move [X20+24], S9
	087 Move X0, [X22]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1B6F8F8
	092 Move X8, -18870272
	093 Move V2, [X8+3616]
	094 Move V0, V8
	095 Move V1, V9
	096 Move X0, X31
	097 Call LeanTween.value, V0, V1, V2
	098 Compare X0, 0
	099 JumpIfEqual {155}
	100 Move X21, 0x22A6000
	101 Move X22, 0x22A6000
	102 Move X21, [X21+1736]
	103 Move X22, [X22+1744]
	104 Move X1, X31
	105 Call LTDescr.setEaseOutCirc, X0
	106 Move X8, [X21]
	107 Move X21, X0
	108 Move X0, X8
	109 Call 0x1B6FA0C
	110 Move X2, [X22]
	111 Move X1, X20
	112 Move X3, X31
	113 Move X22, X0
	114 Call Action`1<Single>..ctor, X0, X1, X2
	115 Compare X21, 0
	116 JumpIfEqual {155}
	117 Move X23, 0x22A6000
	118 Move X24, 0x22A6000
	119 Move X23, [X23+368]
	120 Move X24, [X24+1752]
	121 Move X0, X21
	122 Move X1, X22
	123 Move X2, X31
	124 Call LTDescr.setOnUpdate, X0, X1
	125 Move X8, [X23]
	126 Move X21, X0
	127 Move X0, X8
	128 Call 0x1B6FA0C
	129 Move X2, [X24]
	130 Move X1, X20
	131 Move X3, X31
	132 Move X22, X0
	133 Call Action..ctor, X0, X1, X2
	134 Compare X21, 0
	135 JumpIfEqual {155}
	136 Move X0, X21
	137 Move X1, X22
	138 Move X2, X31
	139 Call LTDescr.setOnComplete, X0, X1
	140 Compare X0, 0
	141 JumpIfEqual {155}
	142 Move X1, X31
	143 Call LTDescr.get_id, X0
	144 Move [X19+188], W0
	145 Move X20, [X31+64]
	146 Move X19, [X31+72]
	147 Move X22, [X31+48]
	148 Move X21, [X31+56]
	149 Move X24, [X31+32]
	150 Move X23, [X31+40]
	151 Move X30, [X31+16]
	152 Move D9, [X31+80]
	153 Move D8, [X31+88]
	154 Return 
	155 Call 0x1B6FA1C

Method: System.Void Spawned()

Disassembly:
	0x01CA9950 STR X31, [X31 + 0x50]
	0x01CA9954 BL 0x1B6EA0C
	0x01CA9958 LDR X1, [X20]
	0x01CA995C MOV X20, X0
	0x01CA9960 BL 0x2E45D4C
	0x01CA9964 ADD X8, X31, 0x8
	0x01CA9968 MOV X0, X19
	0x01CA996C BL 0x1CA7F74
	0x01CA9970 LDUR V0, [X31 + 0x8]
	0x01CA9974 LDR X9, [X31 + 0x18]
	0x01CA9978 STR V0, [X31 + 0x4]
	0x01CA997C LDR W8, [X31 + 0x48]
	0x01CA9980 STR V0, [X31 + 0x2]
	0x01CA9984 STR X9, [X31 + 0x50]
	0x01CA9988 CMP W8, 0x1
	0x01CA998C B.LT 0x1CA9B48
	0x01CA9990 ADRP X23, 0x22A5000
	0x01CA9994 ADRP X24, 0x22A5000
	0x01CA9998 ADRP X25, 0x22A5000
	0x01CA999C ADRP X26, 0x22A4000
	0x01CA99A0 ADRP X27, 0x22A5000
	0x01CA99A4 ADRP X28, 0x22A5000
	0x01CA99A8 LDR X23, [X23 + 0x6A8]
	0x01CA99AC LDR X24, [X24 + 0x1E8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call NetworkBehaviour.Spawned, X0
	006 Move X0, X19
	007 Call InventoryBag.HandleIsOpenChanged, X0
	008 Move X0, [X19+64]
	009 Compare X0, 0
	010 JumpIfEqual {34}
	011 Move W8, [X0+96]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 2
	014 Compare TEMP, 2
	015 JumpIfEqual {34}
	016 Move X1, X31
	017 Call NetworkObject.get_HasStateAuthority, X0
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {34}
	022 Move X8, [X19+128]
	023 Compare X8, 0
	024 JumpIfEqual {37}
	025 Move X0, [X8+304]
	026 Compare X0, 0
	027 JumpIfEqual {37}
	028 Move S0, 5
	029 Move X1, X31
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Call Rigidbody.set_mass, X0, V0
	033 Return 
	034 Move X30, [X31+16]
	035 Move X19, [X31+24]
	036 Return 
	037 Call 0x1B6FA1C

Method: System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)

Disassembly:
	0x01CA99B0 LDR X25, [X25 + 0x6E0]
	0x01CA99B4 LDR X26, [X26 + 0x478]
	0x01CA99B8 LDR X27, [X27 + 0x268]
	0x01CA99BC LDR X28, [X28 + 0x700]
	0x01CA99C0 MOV W21, W31
	0x01CA99C4 ADD X8, X31, 0x20
	0x01CA99C8 MOV X0, X19
	0x01CA99CC BL 0x1CA7F74
	0x01CA99D0 LDR V0, [X31 + 0x2]
	0x01CA99D4 LDR X8, [X31 + 0x30]
	0x01CA99D8 LDR X2, [X23]
	0x01CA99DC ADD X0, X31, 0x40
	0x01CA99E0 MOV W1, W21
	0x01CA99E4 STR V0, [X31 + 0x4]
	0x01CA99E8 STR X8, [X31 + 0x50]
	0x01CA99EC BL 0x22AE1F0
	0x01CA99F0 LDR X8, [X24]
	0x01CA99F4 MOV X22, X0
	0x01CA99F8 LDR W9, [X8 + 0xE0]
	0x01CA99FC CBZ W9, 0x1CA9A08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 And W2, W2, 1
	005 Move X3, X31
	006 Move X20, X1
	007 Move X19, X0
	008 Call NetworkBehaviour.Despawned, X0, X1, X2
	009 Compare X20, 0
	010 JumpIfEqual {26}
	011 Move X0, X20
	012 Move X1, X31
	013 Call NetworkRunner.get_IsShutdown, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {22}
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return 
	022 Move X0, X19
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Call 0x1B6FA1C

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01CA9C34 LDR V8, [X31], #0x20
	0x01CA9C38 B 0x1C9A9A8
	0x01CA9C3C LDP X20, X19, [X31 + 0x10]
	0x01CA9C40 LDR X30, [X31 + 0x8]
	0x01CA9C44 LDR V8, [X31], #0x20
	0x01CA9C48 RET
	0x01CA9C4C BL 0x1B6EA1C
	0x01CA9C50 MOV X1, X31
	0x01CA9C54 B 0x1D661D8
	0x01CA9C58 SUB X31, X31, 0x70
	0x01CA9C5C STR X30, [X31 + 0x40]
	0x01CA9C60 STP X22, X21, [X31 + 0x50]
	0x01CA9C64 STP X20, X19, [X31 + 0x60]
	0x01CA9C68 ADRP X21, 0x257A000
	0x01CA9C6C ADRP X20, 0x22A5000
	0x01CA9C70 LDRB W8, [X21 + 0x478]
	0x01CA9C74 LDR X20, [X20 + 0x1C0]
	0x01CA9C78 MOV X19, X0
	0x01CA9C7C TBNZ X8, 0x0, 0x1CA9CAC
	0x01CA9C80 ADRP X0, 0x22A5000
	0x01CA9C84 LDR X0, [X0 + 0x708]
	0x01CA9C88 BL 0x1B6E7F0
	0x01CA9C8C ADRP X0, 0x22A5000
	0x01CA9C90 LDR X0, [X0 + 0x1C0]
	0x01CA9C94 BL 0x1B6E7F0
	0x01CA9C98 ADRP X0, 0x22A5000
	0x01CA9C9C LDR X0, [X0 + 0x710]
	0x01CA9CA0 BL 0x1B6E7F0
	0x01CA9CA4 MOVZ W8, 0x1
	0x01CA9CA8 STRB W8, [X21 + 0x478]
	0x01CA9CAC LDRB W1, [X19 + 0xA8]
	0x01CA9CB0 ADRP X22, 0x22A5000
	0x01CA9CB4 ADRP X21, 0x22A5000
	0x01CA9CB8 LDR X22, [X22 + 0x710]
	0x01CA9CBC LDR X21, [X21 + 0x708]
	0x01CA9CC0 MOV X0, X19
	0x01CA9CC4 BL 0x1CA7F10
	0x01CA9CC8 ADD X8, X31, 0x20
	0x01CA9CCC MOV X0, X19
	0x01CA9CD0 BL 0x1CA7F74
	0x01CA9CD4 LDR V0, [X31 + 0x2]
	0x01CA9CD8 LDR X8, [X31 + 0x30]
	0x01CA9CDC LDR X0, [X20]
	0x01CA9CE0 STR V0, [X31]
	0x01CA9CE4 STR X8, [X31 + 0x10]
	0x01CA9CE8 LDR W8, [X0 + 0xE0]
	0x01CA9CEC LDR X20, [X19 + 0xB0]
	0x01CA9CF0 CBNZ W8, 0x1CA9CF8
	0x01CA9CF4 BL 0x1B6E8F8
	0x01CA9CF8 LDR X2, [X22]
	0x01CA9CFC LDR V0, [X31]
	0x01CA9D00 LDR X8, [X31 + 0x10]
	0x01CA9D04 LDR X3, [X21]
	0x01CA9D08 ADD X0, X31, 0x20
	0x01CA9D0C MOV X1, X20
	0x01CA9D10 STR V0, [X31 + 0x2]
	0x01CA9D14 STR X8, [X31 + 0x30]
	0x01CA9D18 BL 0x210FAAC
	0x01CA9D1C LDR W1, [X19 + 0xB8]
	0x01CA9D20 MOV X0, X19
	0x01CA9D24 BL 0x1CA808C
	0x01CA9D28 LDP X20, X19, [X31 + 0x60]
	0x01CA9D2C LDP X22, X21, [X31 + 0x50]
	0x01CA9D30 LDR X30, [X31 + 0x40]
	0x01CA9D34 ADD X31, X31, 0x70
	0x01CA9D38 RET
	0x01CA9D3C SUB X31, X31, 0x60
	0x01CA9D40 STP X30, X21, [X31 + 0x40]
	0x01CA9D44 STP X20, X19, [X31 + 0x50]
	0x01CA9D48 ADRP X21, 0x257A000
	0x01CA9D4C ADRP X20, 0x22A5000
	0x01CA9D50 LDRB W8, [X21 + 0x479]
	0x01CA9D54 LDR X20, [X20 + 0x1C0]
	0x01CA9D58 MOV X19, X0
	0x01CA9D5C TBNZ X8, 0x0, 0x1CA9D80
	0x01CA9D60 ADRP X0, 0x22A5000
	0x01CA9D64 LDR X0, [X0 + 0x718]
	0x01CA9D68 BL 0x1B6E7F0
	0x01CA9D6C ADRP X0, 0x22A5000
	0x01CA9D70 LDR X0, [X0 + 0x1C0]
	0x01CA9D74 BL 0x1B6E7F0
	0x01CA9D78 MOVZ W8, 0x1
	0x01CA9D7C STRB W8, [X21 + 0x479]
	0x01CA9D80 ADRP X21, 0x22A5000
	0x01CA9D84 LDR X21, [X21 + 0x718]
	0x01CA9D88 MOV X0, X19
	0x01CA9D8C BL 0x1CA7EA8
	0x01CA9D90 AND W8, W0, 0x1
	0x01CA9D94 STRB W8, [X19 + 0xA8]
	0x01CA9D98 ADD X8, X31, 0x20
	0x01CA9D9C MOV X0, X19
	0x01CA9DA0 BL 0x1CA7F74
	0x01CA9DA4 LDR V0, [X31 + 0x2]
	0x01CA9DA8 LDR X8, [X31 + 0x30]
	0x01CA9DAC LDR X0, [X20]
	0x01CA9DB0 STR V0, [X31]
	0x01CA9DB4 STR X8, [X31 + 0x10]
	0x01CA9DB8 LDR W8, [X0 + 0xE0]
	0x01CA9DBC CBNZ W8, 0x1CA9DC4
	0x01CA9DC0 BL 0x1B6E8F8
	0x01CA9DC4 LDR V0, [X31]
	0x01CA9DC8 LDR X8, [X31 + 0x10]
	0x01CA9DCC LDR X2, [X21]
	0x01CA9DD0 ADD X1, X19, 0xB0
	0x01CA9DD4 ADD X0, X31, 0x20
	0x01CA9DD8 STR V0, [X31 + 0x2]
	0x01CA9DDC STR X8, [X31 + 0x30]
	0x01CA9DE0 BL 0x210ED88
	0x01CA9DE4 MOV X0, X19
	0x01CA9DE8 BL 0x1CA802C
	0x01CA9DEC STR W0, [X19 + 0xB8]
	0x01CA9DF0 LDP X20, X19, [X31 + 0x50]
	0x01CA9DF4 LDP X30, X21, [X31 + 0x40]
	0x01CA9DF8 ADD X31, X31, 0x60
	0x01CA9DFC RET
	0x01CA9E00 STR X30, [X31 - 0x20]!
	0x01CA9E04 STP X20, X19, [X31 + 0x10]
	0x01CA9E08 ADRP X20, 0x257A000
	0x01CA9E0C LDRB W8, [X20 + 0x47A]
	0x01CA9E10 MOV X19, X0
	0x01CA9E14 TBNZ X8, 0x0, 0x1CA9E2C
	0x01CA9E18 ADRP X0, 0x22A5000
	0x01CA9E1C LDR X0, [X0 + 0x720]
	0x01CA9E20 BL 0x1B6E7F0
	0x01CA9E24 MOVZ W8, 0x1
	0x01CA9E28 STRB W8, [X20 + 0x47A]
	0x01CA9E2C MOVZ W0, 0x1

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], D10
	003 Move [X31+72], D9
	004 Move [X31+80], D8
	005 Move [X31+88], X30
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move X20, 0x257B000
	009 Move W8, [X20+1137]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x22A6000
	016 Move X0, [X0+1704]
	017 Call 0x1B6F7F0
	018 Move X0, 0x22A6000
	019 Move X0, [X0+488]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X20+1137], W8
	023 Move X0, X19
	024 Move X1, X31
	025 Move [X31+32], X31
	026 Move [X31+40], X31
	027 Move [X31+48], X31
	028 Move [X31+24], W31
	029 Call NetworkBehaviour.FixedUpdateNetwork, X0
	030 Move X0, [X19+64]
	031 Compare X0, 0
	032 JumpIfEqual {147}
	033 Move W8, [X0+96]
	034 Move TEMP, X8
	035 And TEMP, TEMP, 2
	036 Compare TEMP, 2
	037 JumpIfEqual {147}
	038 Move X1, X31
	039 Call NetworkObject.get_HasStateAuthority, X0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {147}
	044 Move X0, X19
	045 Call InventoryBag.get_isOpen, X0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {147}
	050 Move X0, [X19+144]
	051 Compare X0, 0
	052 JumpIfEqual {155}
	053 Move X1, X31
	054 Call Transform.get_up, X0
	055 Move X20, 0x257B000
	056 Move W8, [X20+1090]
	057 Move V8, V0
	058 Move V9, V1
	059 Move V10, V2
	060 Compare W8, 0
	061 JumpIfNotEqual {67}
	062 Move X0, 0x22A5000
	063 Move X0, [X0+1152]
	064 Call 0x1B6F7F0
	065 Move W8, 1
	066 Move [X20+1090], W8
	067 Move X8, 0x22A5000
	068 Move X8, [X8+1152]
	069 Move X9, -18870272
	070 Move V2, [X9+2736]
	071 Move X8, [X8]
	072 Move X8, [X8+184]
	073 Move S0, [X8+24]
	074 Move S1, [X8+28]
	075 Move V3, [X8+32]
	076 Multiply S0, S8, S0
	077 Multiply S1, S9, S1
	078 Add S0, S0, S1
	079 Multiply S1, S10, S3
	080 Add S0, S1, S0
	081 NotImplemented "Instruction FCMP not yet implemented."
	082 Move X0, X19
	083 Call InventoryBag.CheckToAddItem, X0
	084 Move X0, X31
	085 Call TickTimer.get_None
	086 And X1, X0, 0
	087 Move X0, X19
	088 Call InventoryBag.set_emptyingTimer, X0, X1
	089 Move X8, -18870272
	090 Move V1, [X8+3380]
	091 NotImplemented "Instruction FCMP not yet implemented."
	092 Add X8, X31, 0
	093 Move X0, X19
	094 Call InventoryBag.get_containedObjects, X0
	095 Move X9, 0x22A6000
	096 Move V0, [X31]
	097 Move X8, [X31+16]
	098 Move X9, [X9+1704]
	099 Add X0, X31, 32
	100 Move W1, W31
	101 Move [X31+2], V0
	102 Move X2, [X9]
	103 Move [X31+48], X8
	104 Call NetworkArray`1<NetworkId>.get_Item, X0, X1
	105 Move X8, 0x22A6000
	106 Move X8, [X8+488]
	107 Move X20, X0
	108 Move X8, [X8]
	109 Move W9, [X8+224]
	110 Compare W9, 0
	111 JumpIfNotEqual {114}
	112 Move X0, X8
	113 Call 0x1B6F8F8
	114 Compare W20, 0
	115 JumpIfEqual {147}
	116 Move X0, X19
	117 Call InventoryBag.get_emptyingTimer, X0
	118 Move [X31+24], W0
	119 Add X0, X31, 24
	120 Move X1, X31
	121 Call TickTimer.get_IsRunning, X0
	122 Move TEMP, X0
	123 And TEMP, TEMP, 1
	124 Compare TEMP, 1
	125 JumpIfNotEqual {143}
	126 Move X0, X19
	127 Call InventoryBag.get_emptyingTimer, X0
	128 Move [X31+24], W0
	129 Move X1, [X19+56]
	130 Add X0, X31, 24
	131 Move X2, X31
	132 Call TickTimer.Expired, X0, X1
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {147}
	137 Move X0, X19
	138 Call InventoryBag.CheckToEmptyItem, X0
	139 Move TEMP, X0
	140 And TEMP, TEMP, 1
	141 Compare TEMP, 1
	142 JumpIfNotEqual {147}
	143 Move X0, [X19+56]
	144 Move S0, 0.25
	145 Move X1, X31
	146 Call TickTimer.CreateFromSeconds, X0, V0
	147 Move X20, [X31+96]
	148 Move X19, [X31+104]
	149 Move X30, [X31+88]
	150 Move D9, [X31+72]
	151 Move D8, [X31+80]
	152 Move V10, [X31+64]
	153 Add X31, X31, 112
	154 Return 
	155 Call 0x1B6FA1C

Method: System.Void Explode()

Disassembly:
	0x01CAA7F0 LDRB W8, [X21 + 0x482]
	0x01CAA7F4 LDR X20, [X20 + 0x728]
	0x01CAA7F8 MOV X19, X0
	0x01CAA7FC TBNZ X8, 0x0, 0x1CAA82C
	0x01CAA800 ADRP X0, 0x22A4000
	0x01CAA804 LDR X0, [X0 + 0x728]
	0x01CAA808 BL 0x1B6E7F0
	0x01CAA80C ADRP X0, 0x22A4000
	0x01CAA810 LDR X0, [X0 + 0x730]
	0x01CAA814 BL 0x1B6E7F0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call InventoryBag.EmptyContents, X0
	005 Move X0, [X19+56]
	006 Compare X0, 0
	007 JumpIfEqual {14}
	008 Move X1, [X19+64]
	009 Move X2, X31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Call NetworkRunner.Despawn, X0, X1
	013 Return 
	014 Call 0x1B6FA1C

Method: System.Void EmptyContents()

Disassembly:
	0x01CAA818 ADRP X0, 0x22A4000
	0x01CAA81C LDR X0, [X0 + 0x790]
	0x01CAA820 BL 0x1B6E7F0
	0x01CAA824 MOVZ W8, 0x1
	0x01CAA828 STRB W8, [X21 + 0x482]
	0x01CAA82C MOV X0, X31
	0x01CAA830 BL 0x3AA4994
	0x01CAA834 LDR X8, [X20]
	0x01CAA838 LDR X8, [X8 + 0xB8]
	0x01CAA83C LDR W9, [X8]
	0x01CAA840 SUB W9, W0, W9
	0x01CAA844 CMP W9, 0x1
	0x01CAA848 B.LT 0x1CAA8C0
	0x01CAA84C LDRB W8, [X8 + 0x8]
	0x01CAA850 CBZ W8, 0x1CAA8C0
	0x01CAA854 MOV X0, X31
	0x01CAA858 BL 0x3AA47CC
	0x01CAA85C LDR X8, [X20]
	0x01CAA860 ADRP X9, 0x22A4000
	0x01CAA864 MOV V8.16B, V0.16B
	0x01CAA868 LDR X8, [X8 + 0xB8]
	0x01CAA86C LDR X9, [X9 + 0x790]
	0x01CAA870 ADD X0, X8, 0x8
	0x01CAA874 LDR X1, [X9]
	0x01CAA878 BL 0x22DB254
	0x01CAA87C MOVZ W8, 0x42700000
	0x01CAA880 FSUB S0, S8, S0
	0x01CAA884 FMOV S1, W8
	0x01CAA888 FCMP S0, S1
	0x01CAA88C B.LE 0x1CAA8AC
	0x01CAA890 LDR X8, [X20]
	0x01CAA894 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x257A000
	006 Move W8, [X20+1138]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x22A5000
	013 Move X0, [X0+1712]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+1138], W8
	017 Add X8, X31, 8
	018 Move X0, X19
	019 Call InventoryBag.get_containedObjects, X0
	020 Move W8, [X31+16]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W20, W31
	023 Move X0, X19
	024 Call InventoryBag.CheckToEmptyItem, X0
	025 Add X8, X31, 8
	026 Move X0, X19
	027 Add W20, W20, 1
	028 Call InventoryBag.get_containedObjects, X0
	029 Move W8, [X31+16]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, [X31+48]
	032 Move X19, [X31+56]
	033 Move X30, [X31+32]
	034 Add X31, X31, 64
	035 Return 

Method: System.Collections.Generic.List`1<AnimalCompany.GrabbableItem> GetContainedItems()

Disassembly:
	0x01CAA898 LDR X9, [X8 + 0xB8]
	0x01CAA89C STR X31, [X9 + 0x8]
	0x01CAA8A0 LDR X8, [X8 + 0xB8]
	0x01CAA8A4 STR W31, [X8 + 0x4]
	0x01CAA8A8 BL 0x1CAA4C8
	0x01CAA8AC MOV X0, X31
	0x01CAA8B0 BL 0x3AA4994
	0x01CAA8B4 LDR X8, [X20]
	0x01CAA8B8 LDR X8, [X8 + 0xB8]
	0x01CAA8BC STR W0, [X8]
	0x01CAA8C0 LDP X20, X19, [X31 + 0x20]
	0x01CAA8C4 LDP X30, X21, [X31 + 0x10]
	0x01CAA8C8 LDR V8, [X31], #0x30
	0x01CAA8CC RET
	0x01CAA8D0 CMP W1, 0xD
	0x01CAA8D4 B.EQ 0x1CAA8F0
	0x01CAA8D8 CMP W1, 0x113
	0x01CAA8DC B.EQ 0x1CAA8F4
	0x01CAA8E0 CMP W1, 0x114
	0x01CAA8E4 B.NE 0x1CAA8FC
	0x01CAA8E8 MOVN W1, 0x0
	0x01CAA8EC B 0x1CAA900
	0x01CAA8F0 B 0x1CAA968
	0x01CAA8F4 MOVZ W1, 0x1
	0x01CAA8F8 B 0x1CAA900
	0x01CAA8FC RET
	0x01CAA900 STP X30, X21, [X31 - 0x20]!
	0x01CAA904 STP X20, X19, [X31 + 0x10]
	0x01CAA908 ADRP X21, 0x2579000
	0x01CAA90C LDRB W8, [X21 + 0x483]
	0x01CAA910 MOV W20, W1
	0x01CAA914 MOV X19, X0
	0x01CAA918 TBNZ X8, 0x0, 0x1CAA930
	0x01CAA91C ADRP X0, 0x22A4000
	0x01CAA920 LDR X0, [X0 + 0x778]
	0x01CAA924 BL 0x1B6E7F0
	0x01CAA928 MOVZ W8, 0x1
	0x01CAA92C STRB W8, [X21 + 0x483]
	0x01CAA930 LDR X8, [X19 + 0x20]
	0x01CAA934 CBZ X8, 0x1CAA964
	0x01CAA938 LDR W8, [X8 + 0x18]
	0x01CAA93C LDR W9, [X19 + 0x60]
	0x01CAA940 MOV X0, X19
	0x01CAA944 ADD W10, W8, W20
	0x01CAA948 ADD W9, W10, W9
	0x01CAA94C SDIV W10, W9, W8
	0x01CAA950 MSUB W8, W10, W8, W9
	0x01CAA954 STR W8, [X19 + 0x60]
	0x01CAA958 LDP X20, X19, [X31 + 0x10]
	0x01CAA95C LDP X30, X21, [X31], #0x20
	0x01CAA960 B 0x1CAA4C8
	0x01CAA964 BL 0x1B6EA1C
	0x01CAA968 SUB X31, X31, 0x100
	0x01CAA96C STR X30, [X31 + 0xA0]
	0x01CAA970 STP X28, X27, [X31 + 0xB0]
	0x01CAA974 STP X26, X25, [X31 + 0xC0]
	0x01CAA978 STP X24, X23, [X31 + 0xD0]
	0x01CAA97C STP X22, X21, [X31 + 0xE0]
	0x01CAA980 STP X20, X19, [X31 + 0xF0]
	0x01CAA984 ADRP X20, 0x2579000
	0x01CAA988 LDRB W8, [X20 + 0x484]
	0x01CAA98C MOV X19, X0
	0x01CAA990 TBNZ X8, 0x0, 0x1CAAA80
	0x01CAA994 ADRP X0, 0x22A3000
	0x01CAA998 LDR X0, [X0 + 0x9A0]
	0x01CAA99C BL 0x1B6E7F0
	0x01CAA9A0 ADRP X0, 0x22A4000
	0x01CAA9A4 LDR X0, [X0 + 0x268]
	0x01CAA9A8 BL 0x1B6E7F0
	0x01CAA9AC ADRP X0, 0x22A4000
	0x01CAA9B0 LDR X0, [X0 + 0x7A8]
	0x01CAA9B4 BL 0x1B6E7F0
	0x01CAA9B8 ADRP X0, 0x22A3000
	0x01CAA9BC LDR X0, [X0 + 0x5F8]
	0x01CAA9C0 BL 0x1B6E7F0
	0x01CAA9C4 ADRP X0, 0x22A4000
	0x01CAA9C8 LDR X0, [X0 + 0x728]
	0x01CAA9CC BL 0x1B6E7F0
	0x01CAA9D0 ADRP X0, 0x22A4000
	0x01CAA9D4 LDR X0, [X0 + 0x780]
	0x01CAA9D8 BL 0x1B6E7F0
	0x01CAA9DC ADRP X0, 0x22A4000
	0x01CAA9E0 LDR X0, [X0 + 0x2A8]
	0x01CAA9E4 BL 0x1B6E7F0
	0x01CAA9E8 ADRP X0, 0x22A4000
	0x01CAA9EC LDR X0, [X0 + 0x248]
	0x01CAA9F0 BL 0x1B6E7F0
	0x01CAA9F4 ADRP X0, 0x22A4000
	0x01CAA9F8 LDR X0, [X0 + 0x250]
	0x01CAA9FC BL 0x1B6E7F0
	0x01CAAA00 ADRP X0, 0x22A4000
	0x01CAAA04 LDR X0, [X0 + 0x7B0]
	0x01CAAA08 BL 0x1B6E7F0
	0x01CAAA0C ADRP X0, 0x22A4000
	0x01CAAA10 LDR X0, [X0 + 0x730]
	0x01CAAA14 BL 0x1B6E7F0
	0x01CAAA18 ADRP X0, 0x22A3000
	0x01CAAA1C LDR X0, [X0 + 0x478]
	0x01CAAA20 BL 0x1B6E7F0
	0x01CAAA24 ADRP X0, 0x22A4000
	0x01CAAA28 LDR X0, [X0 + 0x7B8]
	0x01CAAA2C BL 0x1B6E7F0
	0x01CAAA30 ADRP X0, 0x22A4000
	0x01CAAA34 LDR X0, [X0 + 0x7C0]
	0x01CAAA38 BL 0x1B6E7F0
	0x01CAAA3C ADRP X0, 0x22A4000
	0x01CAAA40 LDR X0, [X0 + 0x7C8]
	0x01CAAA44 BL 0x1B6E7F0
	0x01CAAA48 ADRP X0, 0x22A4000
	0x01CAAA4C LDR X0, [X0 + 0x7D0]
	0x01CAAA50 BL 0x1B6E7F0
	0x01CAAA54 ADRP X0, 0x22A4000
	0x01CAAA58 LDR X0, [X0 + 0x7D8]
	0x01CAAA5C BL 0x1B6E7F0
	0x01CAAA60 ADRP X0, 0x22A4000
	0x01CAAA64 LDR X0, [X0 + 0x7E0]
	0x01CAAA68 BL 0x1B6E7F0
	0x01CAAA6C ADRP X0, 0x22A4000
	0x01CAAA70 LDR X0, [X0 + 0x7E8]
	0x01CAAA74 BL 0x1B6E7F0
	0x01CAAA78 MOVZ W8, 0x1
	0x01CAAA7C STRB W8, [X20 + 0x484]
	0x01CAAA80 ADRP X22, 0x2579000
	0x01CAAA84 LDRB W8, [X22 + 0x508]
	0x01CAAA88 STR X31, [X31 + 0xA8]
	0x01CAAA8C STR X31, [X31 + 0x98]
	0x01CAAA90 CBNZ W8, 0x1CAAAA8
	0x01CAAA94 ADRP X0, 0x22A3000
	0x01CAAA98 LDR X0, [X0 + 0xF78]
	0x01CAAA9C BL 0x1B6E7F0
	0x01CAAAA0 MOVZ W8, 0x1
	0x01CAAAA4 STRB W8, [X22 + 0x508]
	0x01CAAAA8 ADRP X23, 0x22A3000
	0x01CAAAAC LDR X23, [X23 + 0xF78]
	0x01CAAAB0 ADRP X24, 0x22A3000
	0x01CAAAB4 LDR X8, [X23]
	0x01CAAAB8 LDR X8, [X8 + 0xB8]
	0x01CAAABC LDR X8, [X8 + 0x40]
	0x01CAAAC0 LDR X24, [X24 + 0x478]
	0x01CAAAC4 CBZ X8, 0x1CAAAD0
	0x01CAAAC8 LDR X20, [X8 + 0x98]
	0x01CAAACC B 0x1CAAAD4
	0x01CAAAD0 MOV X20, X31
	0x01CAAAD4 LDR X0, [X24]
	0x01CAAAD8 LDR W8, [X0 + 0xE0]
	0x01CAAADC CBNZ W8, 0x1CAAAE4
	0x01CAAAE0 BL 0x1B6E8F8
	0x01CAAAE4 MOV X0, X20
	0x01CAAAE8 MOV X1, X31
	0x01CAAAEC MOV X2, X31
	0x01CAAAF0 BL 0x3AA0AF0
	0x01CAAAF4 TBNZ X0, 0x0, 0x1CAB064
	0x01CAAAF8 MOV X0, X19
	0x01CAAAFC BL 0x1CAA7DC
	0x01CAAB00 BL 0x1CAA010
	0x01CAAB04 TBNZ X0, 0x0, 0x1CAB064
	0x01CAAB08 LDR X0, [X19 + 0x20]
	0x01CAAB0C CBZ X0, 0x1CAB084
	0x01CAAB10 ADRP X8, 0x22A4000
	0x01CAAB14 LDR W1, [X19 + 0x60]
	0x01CAAB18 LDR X8, [X8 + 0x780]
	0x01CAAB1C LDR X2, [X8]
	0x01CAAB20 BL 0x2E46254
	0x01CAAB24 CBZ X0, 0x1CAB084
	0x01CAAB28 MOV X20, X0
	0x01CAAB2C LDR W0, [X0 + 0x20]
	0x01CAAB30 MOV X1, X31
	0x01CAAB34 BL 0x1CD27F8
	0x01CAAB38 TBZ X0, 0x0, 0x1CAADF8
	0x01CAAB3C LDR X0, [X24]
	0x01CAAB40 LDR X21, [X20 + 0x38]
	0x01CAAB44 LDR W8, [X0 + 0xE0]
	0x01CAAB48 CBNZ W8, 0x1CAAB50
	0x01CAAB4C BL 0x1B6E8F8
	0x01CAAB50 MOV X0, X21
	0x01CAAB54 MOV X1, X31
	0x01CAAB58 BL 0x3AA0BFC
	0x01CAAB5C TBZ X0, 0x0, 0x1CAAE30
	0x01CAAB60 LDRB W8, [X22 + 0x508]
	0x01CAAB64 CBNZ W8, 0x1CAAB7C
	0x01CAAB68 ADRP X0, 0x22A3000
	0x01CAAB6C LDR X0, [X0 + 0xF78]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], X30
	003 Move [X31+112], X28
	004 Move [X31+120], X27
	005 Move [X31+128], X26
	006 Move [X31+136], X25
	007 Move [X31+144], X24
	008 Move [X31+152], X23
	009 Move [X31+160], X22
	010 Move [X31+168], X21
	011 Move [X31+176], X20
	012 Move [X31+184], X19
	013 Move X22, 0x257A000
	014 Move X21, 0x22A5000
	015 Move X20, 0x22A5000
	016 Move W8, [X22+1139]
	017 Move X21, [X21+1776]
	018 Move X20, [X20+1784]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {53}
	024 Move X0, 0x22A5000
	025 Move X0, [X0+616]
	026 Call 0x1B6F7F0
	027 Move X0, 0x22A5000
	028 Move X0, [X0+1792]
	029 Call 0x1B6F7F0
	030 Move X0, 0x22A5000
	031 Move X0, [X0+1784]
	032 Call 0x1B6F7F0
	033 Move X0, 0x22A5000
	034 Move X0, [X0+1776]
	035 Call 0x1B6F7F0
	036 Move X0, 0x22A5000
	037 Move X0, [X0+1760]
	038 Call 0x1B6F7F0
	039 Move X0, 0x22A5000
	040 Move X0, [X0+1704]
	041 Call 0x1B6F7F0
	042 Move X0, 0x22A5000
	043 Move X0, [X0+1712]
	044 Call 0x1B6F7F0
	045 Move X0, 0x22A5000
	046 Move X0, [X0+488]
	047 Call 0x1B6F7F0
	048 Move X0, 0x22A4000
	049 Move X0, [X0+1144]
	050 Call 0x1B6F7F0
	051 Move W8, 1
	052 Move [X22+1139], W8
	053 Move X0, [X21]
	054 Move [X31+64], X31
	055 Move [X31+72], X31
	056 Move [X31+80], X31
	057 Call 0x1B6FA0C
	058 Move X1, [X20]
	059 Move X20, X0
	060 Call List`1<Object>..ctor, X0
	061 Add X8, X31, 8
	062 Move X0, X19
	063 Call InventoryBag.get_containedObjects, X0
	064 NotImplemented "Instruction LDUR not yet implemented."
	065 Move X9, [X31+24]
	066 Move [X31+4], V0
	067 Move W8, [X31+72]
	068 Move [X31+2], V0
	069 Move [X31+80], X9
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X23, 0x22A5000
	072 Move X24, 0x22A5000
	073 Move X25, 0x22A5000
	074 Move X26, 0x22A4000
	075 Move X27, 0x22A5000
	076 Move X28, 0x22A5000
	077 Move X23, [X23+1704]
	078 Move X24, [X24+488]
	079 Move X25, [X25+1760]
	080 Move X26, [X26+1144]
	081 Move X27, [X27+616]
	082 Move X28, [X28+1792]
	083 Move W21, W31
	084 Add X8, X31, 32
	085 Move X0, X19
	086 Call InventoryBag.get_containedObjects, X0
	087 Move V0, [X31+2]
	088 Move X8, [X31+48]
	089 Move X2, [X23]
	090 Add X0, X31, 64
	091 Move W1, W21
	092 Move [X31+4], V0
	093 Move [X31+80], X8
	094 Call NetworkArray`1<NetworkId>.get_Item, X0, X1
	095 Move X8, [X24]
	096 Move X22, X0
	097 Move W9, [X8+224]
	098 Compare W9, 0
	099 JumpIfEqual {102}
	100 Compare W22, 0
	101 JumpIfNotEqual {106}
	102 Move X0, X8
	103 Call 0x1B6F8F8
	104 Compare W22, 0
	105 JumpIfEqual {181}
	106 Add X8, X31, 32
	107 Move X0, X19
	108 Call InventoryBag.get_containedObjects, X0
	109 Move V0, [X31+2]
	110 Move X8, [X31+48]
	111 Move X2, [X25]
	112 Add X0, X31, 64
	113 Move W1, W21
	114 Move [X31+4], V0
	115 Move [X31+80], X8
	116 Call NetworkArray`1<NetworkId>.Get, X0, X1
	117 Move X8, [X19+56]
	118 Compare X8, 0
	119 JumpIfEqual {206}
	120 And X1, X0, 0
	121 Move X0, X8
	122 Move X2, X31
	123 Call NetworkRunner.FindObject, X0, X1
	124 Move X8, [X26]
	125 Move X22, X0
	126 Move W9, [X8+224]
	127 Compare W9, 0
	128 JumpIfNotEqual {131}
	129 Move X0, X8
	130 Call 0x1B6F8F8
	131 Move X0, X22
	132 Move X1, X31
	133 Move X2, X31
	134 Call Object.op_Inequality, X0, X1
	135 Move TEMP, X0
	136 And TEMP, TEMP, 1
	137 Compare TEMP, 1
	138 JumpIfNotEqual {181}
	139 Compare X22, 0
	140 JumpIfEqual {206}
	141 Move X1, [X27]
	142 Move X0, X22
	143 Call 0x2090DE8, X0
	144 Move X8, [X26]
	145 Move X22, X0
	146 Move W9, [X8+224]
	147 Compare W9, 0
	148 JumpIfNotEqual {151}
	149 Move X0, X8
	150 Call 0x1B6F8F8
	151 Move X0, X22
	152 Move X1, X31
	153 Move X2, X31
	154 Call Object.op_Inequality, X0, X1
	155 Move TEMP, X0
	156 And TEMP, TEMP, 1
	157 Compare TEMP, 1
	158 JumpIfNotEqual {181}
	159 Compare X20, 0
	160 JumpIfEqual {206}
	161 Move W10, [X20+28]
	162 Move X8, [X20+16]
	163 Move X9, [X28]
	164 Add W10, W10, 1
	165 Move [X20+28], W10
	166 Compare X8, 0
	167 JumpIfEqual {206}
	168 NotImplemented "Instruction LDRSW not yet implemented."
	169 Move W11, [X8+24]
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Add W9, W10, 1
	172 Add X8, X8, X10
	173 Move [X20+24], W9
	174 Move [X8+32], X22
	175 Move X8, [X9+32]
	176 Move X0, X20
	177 Move X1, X22
	178 Move X8, [X8+192]
	179 Move X2, [X8+112]
	180 Call List`1<Object>.AddWithResize, X0, X1
	181 Add X8, X31, 8
	182 Move X0, X19
	183 Add W21, W21, 1
	184 Call InventoryBag.get_containedObjects, X0
	185 NotImplemented "Instruction LDUR not yet implemented."
	186 Move X9, [X31+24]
	187 Move [X31+4], V0
	188 Move W8, [X31+72]
	189 Move [X31+2], V0
	190 Move [X31+80], X9
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move X0, X20
	193 Move X20, [X31+176]
	194 Move X19, [X31+184]
	195 Move X22, [X31+160]
	196 Move X21, [X31+168]
	197 Move X24, [X31+144]
	198 Move X23, [X31+152]
	199 Move X26, [X31+128]
	200 Move X25, [X31+136]
	201 Move X28, [X31+112]
	202 Move X27, [X31+120]
	203 Move X30, [X31+96]
	204 Add X31, X31, 192
	205 Return X0
	206 Call 0x1B6FA1C

Method: System.Void RespawnOrDespawnContainedObjects()

Disassembly:
	0x01CA9A00 CBNZ W22, 0x1CA9A14
	0x01CA9A04 B 0x1CA9B18
	0x01CA9A08 MOV X0, X8
	0x01CA9A0C BL 0x1B6E8F8
	0x01CA9A10 CBZ W22, 0x1CA9B18
	0x01CA9A14 ADD X8, X31, 0x20
	0x01CA9A18 MOV X0, X19
	0x01CA9A1C BL 0x1CA7F74
	0x01CA9A20 LDR V0, [X31 + 0x2]
	0x01CA9A24 LDR X8, [X31 + 0x30]
	0x01CA9A28 LDR X2, [X25]
	0x01CA9A2C ADD X0, X31, 0x40
	0x01CA9A30 MOV W1, W21
	0x01CA9A34 STR V0, [X31 + 0x4]
	0x01CA9A38 STR X8, [X31 + 0x50]
	0x01CA9A3C BL 0x22AE564
	0x01CA9A40 LDR X8, [X19 + 0x38]
	0x01CA9A44 CBZ X8, 0x1CA9B6C
	0x01CA9A48 AND X1, X0, 0x0
	0x01CA9A4C MOV X0, X8
	0x01CA9A50 MOV X2, X31
	0x01CA9A54 BL 0x1D8BE9C
	0x01CA9A58 LDR X8, [X26]
	0x01CA9A5C MOV X22, X0
	0x01CA9A60 LDR W9, [X8 + 0xE0]
	0x01CA9A64 CBNZ W9, 0x1CA9A70
	0x01CA9A68 MOV X0, X8
	0x01CA9A6C BL 0x1B6E8F8
	0x01CA9A70 MOV X0, X22
	0x01CA9A74 MOV X1, X31
	0x01CA9A78 MOV X2, X31
	0x01CA9A7C BL 0x3A9D6EC
	0x01CA9A80 TBZ X0, 0x0, 0x1CA9B18
	0x01CA9A84 CBZ X22, 0x1CA9B6C
	0x01CA9A88 LDR X1, [X27]
	0x01CA9A8C MOV X0, X22
	0x01CA9A90 BL 0x208FDE8
	0x01CA9A94 LDR X8, [X26]
	0x01CA9A98 MOV X22, X0
	0x01CA9A9C LDR W9, [X8 + 0xE0]
	0x01CA9AA0 CBNZ W9, 0x1CA9AAC
	0x01CA9AA4 MOV X0, X8
	0x01CA9AA8 BL 0x1B6E8F8
	0x01CA9AAC MOV X0, X22
	0x01CA9AB0 MOV X1, X31
	0x01CA9AB4 MOV X2, X31
	0x01CA9AB8 BL 0x3A9D6EC
	0x01CA9ABC TBZ X0, 0x0, 0x1CA9B18
	0x01CA9AC0 CBZ X20, 0x1CA9B6C
	0x01CA9AC4 LDR W10, [X20 + 0x1C]
	0x01CA9AC8 LDR X8, [X20 + 0x10]
	0x01CA9ACC LDR X9, [X28]
	0x01CA9AD0 ADD W10, W10, 0x1
	0x01CA9AD4 STR W10, [X20 + 0x1C]
	0x01CA9AD8 CBZ X8, 0x1CA9B6C
	0x01CA9ADC LDRSW X10, [X20 + 0x18]
	0x01CA9AE0 LDR W11, [X8 + 0x18]
	0x01CA9AE4 CMP W10, W11
	0x01CA9AE8 B.CS 0x1CA9B00
	0x01CA9AEC ADD W9, W10, 0x1
	0x01CA9AF0 ADD X8, X8, X10, 0x3, LSL
	0x01CA9AF4 STR W9, [X20 + 0x18]
	0x01CA9AF8 STR X22, [X8 + 0x20]
	0x01CA9AFC B 0x1CA9B18
	0x01CA9B00 LDR X8, [X9 + 0x20]
	0x01CA9B04 MOV X0, X20
	0x01CA9B08 MOV X1, X22
	0x01CA9B0C LDR X8, [X8 + 0xC0]
	0x01CA9B10 LDR X2, [X8 + 0x70]
	0x01CA9B14 BL 0x2E46518
	0x01CA9B18 ADD X8, X31, 0x8
	0x01CA9B1C MOV X0, X19
	0x01CA9B20 ADD W21, W21, 0x1
	0x01CA9B24 BL 0x1CA7F74
	0x01CA9B28 LDUR V0, [X31 + 0x8]
	0x01CA9B2C LDR X9, [X31 + 0x18]
	0x01CA9B30 STR V0, [X31 + 0x4]
	0x01CA9B34 LDR W8, [X31 + 0x48]
	0x01CA9B38 STR V0, [X31 + 0x2]
	0x01CA9B3C STR X9, [X31 + 0x50]
	0x01CA9B40 CMP W21, W8
	0x01CA9B44 B.LT 0x1CA99C4
	0x01CA9B48 MOV X0, X20
	0x01CA9B4C LDP X20, X19, [X31 + 0xB0]
	0x01CA9B50 LDP X22, X21, [X31 + 0xA0]
	0x01CA9B54 LDP X24, X23, [X31 + 0x90]
	0x01CA9B58 LDP X26, X25, [X31 + 0x80]
	0x01CA9B5C LDP X28, X27, [X31 + 0x70]
	0x01CA9B60 LDR X30, [X31 + 0x60]
	0x01CA9B64 ADD X31, X31, 0xC0
	0x01CA9B68 RET
	0x01CA9B6C BL 0x1B6EA1C
	0x01CA9B70 STR D8, [X31 - 0x20]!
	0x01CA9B74 STR X30, [X31 + 0x8]
	0x01CA9B78 STP X20, X19, [X31 + 0x10]
	0x01CA9B7C ADRP X20, 0x257A000
	0x01CA9B80 LDRB W8, [X20 + 0x475]
	0x01CA9B84 MOV V8.16B, V0.16B
	0x01CA9B88 MOV X19, X0
	0x01CA9B8C TBNZ X8, 0x0, 0x1CA9BA4
	0x01CA9B90 ADRP X0, 0x22A4000
	0x01CA9B94 LDR X0, [X0 + 0x478]
	0x01CA9B98 BL 0x1B6E7F0
	0x01CA9B9C MOVZ W8, 0x1
	0x01CA9BA0 STRB W8, [X20 + 0x475]
	0x01CA9BA4 LDR X8, [X19 + 0x80]
	0x01CA9BA8 CBZ X8, 0x1CA9C4C
	0x01CA9BAC LDR X0, [X8 + 0x130]
	0x01CA9BB0 CBZ X0, 0x1CA9C4C
	0x01CA9BB4 MOV X1, X31
	0x01CA9BB8 BL 0x3AF67EC
	0x01CA9BBC FCMP S0, S8
	0x01CA9BC0 B.EQ 0x1CA9C3C
	0x01CA9BC4 LDR X8, [X19 + 0x80]
	0x01CA9BC8 CBZ X8, 0x1CA9C4C
	0x01CA9BCC LDR X0, [X8 + 0x130]
	0x01CA9BD0 CBZ X0, 0x1CA9C4C
	0x01CA9BD4 MOV V0.16B, V8.16B
	0x01CA9BD8 MOV X1, X31
	0x01CA9BDC BL 0x3AF6828
	0x01CA9BE0 LDR X8, [X19 + 0x80]
	0x01CA9BE4 CBZ X8, 0x1CA9C4C
	0x01CA9BE8 ADRP X9, 0x22A4000
	0x01CA9BEC LDR X9, [X9 + 0x478]
	0x01CA9BF0 LDR X20, [X8 + 0x120]
	0x01CA9BF4 LDR X0, [X9]
	0x01CA9BF8 LDR W9, [X0 + 0xE0]
	0x01CA9BFC CBNZ W9, 0x1CA9C04
	0x01CA9C00 BL 0x1B6E8F8
	0x01CA9C04 MOV X0, X20
	0x01CA9C08 MOV X1, X31
	0x01CA9C0C MOV X2, X31
	0x01CA9C10 BL 0x3A9D6EC
	0x01CA9C14 TBZ X0, 0x0, 0x1CA9C3C
	0x01CA9C18 LDR X8, [X19 + 0x80]
	0x01CA9C1C CBZ X8, 0x1CA9C4C
	0x01CA9C20 LDR X0, [X8 + 0x120]
	0x01CA9C24 CBZ X0, 0x1CA9C4C
	0x01CA9C28 LDP X20, X19, [X31 + 0x10]
	0x01CA9C2C LDR X30, [X31 + 0x8]
	0x01CA9C30 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], X30
	003 Move [X31+112], X26
	004 Move [X31+120], X25
	005 Move [X31+128], X24
	006 Move [X31+136], X23
	007 Move [X31+144], X22
	008 Move [X31+152], X21
	009 Move [X31+160], X20
	010 Move [X31+168], X19
	011 Move X20, 0x257B000
	012 Move W8, [X20+1140]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {38}
	018 Move X0, 0x22A6000
	019 Move X0, [X0+616]
	020 Call 0x1B6F7F0
	021 Move X0, 0x22A6000
	022 Move X0, [X0+1760]
	023 Call 0x1B6F7F0
	024 Move X0, 0x22A6000
	025 Move X0, [X0+1704]
	026 Call 0x1B6F7F0
	027 Move X0, 0x22A6000
	028 Move X0, [X0+1712]
	029 Call 0x1B6F7F0
	030 Move X0, 0x22A6000
	031 Move X0, [X0+488]
	032 Call 0x1B6F7F0
	033 Move X0, 0x22A5000
	034 Move X0, [X0+1144]
	035 Call 0x1B6F7F0
	036 Move W8, 1
	037 Move [X20+1140], W8
	038 Add X8, X31, 8
	039 Move X0, X19
	040 Move [X31+64], X31
	041 Move [X31+72], X31
	042 Move [X31+80], X31
	043 Call InventoryBag.get_containedObjects, X0
	044 NotImplemented "Instruction LDUR not yet implemented."
	045 Move X9, [X31+24]
	046 Move [X31+4], V0
	047 Move W8, [X31+72]
	048 Move [X31+2], V0
	049 Move [X31+80], X9
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X22, 0x22A6000
	052 Move X23, 0x22A6000
	053 Move X24, 0x22A6000
	054 Move X25, 0x22A5000
	055 Move X26, 0x22A6000
	056 Move X22, [X22+1704]
	057 Move X23, [X23+488]
	058 Move X24, [X24+1760]
	059 Move X25, [X25+1144]
	060 Move X26, [X26+616]
	061 Move W20, W31
	062 Add X8, X31, 32
	063 Move X0, X19
	064 Call InventoryBag.get_containedObjects, X0
	065 Move V0, [X31+2]
	066 Move X8, [X31+48]
	067 Move X2, [X22]
	068 Add X0, X31, 64
	069 Move W1, W20
	070 Move [X31+4], V0
	071 Move [X31+80], X8
	072 Call NetworkArray`1<NetworkId>.get_Item, X0, X1
	073 Move X8, [X23]
	074 Move X21, X0
	075 Move W9, [X8+224]
	076 Compare W9, 0
	077 JumpIfEqual {80}
	078 Compare W21, 0
	079 JumpIfNotEqual {84}
	080 Move X0, X8
	081 Call 0x1B6F8F8
	082 Compare W21, 0
	083 JumpIfEqual {142}
	084 Add X8, X31, 32
	085 Move X0, X19
	086 Call InventoryBag.get_containedObjects, X0
	087 Move V0, [X31+2]
	088 Move X8, [X31+48]
	089 Move X2, [X24]
	090 Add X0, X31, 64
	091 Move W1, W20
	092 Move [X31+4], V0
	093 Move [X31+80], X8
	094 Call NetworkArray`1<NetworkId>.Get, X0, X1
	095 Move X8, [X19+56]
	096 Compare X8, 0
	097 JumpIfEqual {164}
	098 And X1, X0, 0
	099 Move X0, X8
	100 Move X2, X31
	101 Call NetworkRunner.FindObject, X0, X1
	102 Move X8, [X25]
	103 Move X21, X0
	104 Move W9, [X8+224]
	105 Compare W9, 0
	106 JumpIfNotEqual {109}
	107 Move X0, X8
	108 Call 0x1B6F8F8
	109 Move X0, X21
	110 Move X1, X31
	111 Move X2, X31
	112 Call Object.op_Inequality, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfNotEqual {142}
	117 Compare X21, 0
	118 JumpIfEqual {164}
	119 Move X1, [X26]
	120 Move X0, X21
	121 Call 0x2090DE8, X0
	122 Move X8, [X25]
	123 Move X21, X0
	124 Move W9, [X8+224]
	125 Compare W9, 0
	126 JumpIfNotEqual {129}
	127 Move X0, X8
	128 Call 0x1B6F8F8
	129 Move X0, X21
	130 Move X1, X31
	131 Move X2, X31
	132 Call Object.op_Inequality, X0, X1
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {142}
	137 Compare X21, 0
	138 JumpIfEqual {164}
	139 Move X0, X21
	140 Move X1, X31
	141 Call GrabbableItem.RespawnOrDespawn, X0
	142 Add X8, X31, 8
	143 Move X0, X19
	144 Add W20, W20, 1
	145 Call InventoryBag.get_containedObjects, X0
	146 NotImplemented "Instruction LDUR not yet implemented."
	147 Move X9, [X31+24]
	148 Move [X31+4], V0
	149 Move W8, [X31+72]
	150 Move [X31+2], V0
	151 Move [X31+80], X9
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move X20, [X31+160]
	154 Move X19, [X31+168]
	155 Move X22, [X31+144]
	156 Move X21, [X31+152]
	157 Move X24, [X31+128]
	158 Move X23, [X31+136]
	159 Move X26, [X31+112]
	160 Move X25, [X31+120]
	161 Move X30, [X31+96]
	162 Add X31, X31, 176
	163 Return 
	164 Call 0x1B6FA1C

Method: System.Void UpdateMass(System.Single mass)

Disassembly:
	0x01CAAB70 BL 0x1B6E7F0
	0x01CAAB74 MOVZ W8, 0x1
	0x01CAAB78 STRB W8, [X22 + 0x508]
	0x01CAAB7C LDR X8, [X23]
	0x01CAAB80 LDR X8, [X8 + 0xB8]
	0x01CAAB84 LDR X8, [X8 + 0x40]
	0x01CAAB88 CBZ X8, 0x1CAB084
	0x01CAAB8C LDR X0, [X19 + 0x38]
	0x01CAAB90 CBZ X0, 0x1CAB084
	0x01CAAB94 LDR X21, [X8 + 0x98]
	0x01CAAB98 LDR X22, [X20 + 0x38]
	0x01CAAB9C MOV X1, X31
	0x01CAABA0 BL 0x3AA7658
	0x01CAABA4 ADRP X8, 0x22A4000
	0x01CAABA8 LDR X8, [X8 + 0x248]
	0x01CAABAC ADD X0, X31, 0x80
	0x01CAABB0 STP X31, X31, [X31 + 0x80]
	0x01CAABB4 LDR X1, [X8]
	0x01CAABB8 BL 0x22DC630
	0x01CAABBC LDR X0, [X19 + 0x38]
	0x01CAABC0 CBZ X0, 0x1CAB084
	0x01CAABC4 MOV X1, X31
	0x01CAABC8 BL 0x3AA5FBC
	0x01CAABCC ADRP X8, 0x22A4000
	0x01CAABD0 LDR X8, [X8 + 0x250]
	0x01CAABD4 ADD X0, X31, 0x48
	0x01CAABD8 STP X31, X31, [X31 + 0x48]
	0x01CAABDC STR W31, [X31 + 0x58]
	0x01CAABE0 LDR X1, [X8]
	0x01CAABE4 BL 0x22D82D0
	0x01CAABE8 CBZ X21, 0x1CAB084
	0x01CAABEC LDUR V0, [X31 + 0x48]
	0x01CAABF0 LDR W8, [X31 + 0x58]
	0x01CAABF4 LDP X2, X3, [X31 + 0x80]
	0x01CAABF8 ADD X4, X31, 0x60
	0x01CAABFC MOV X0, X21
	0x01CAAC00 MOV X1, X22
	0x01CAAC04 MOV X5, X31
	0x01CAAC08 MOV X6, X31
	0x01CAAC0C MOV W7, W31
	0x01CAAC10 STR V0, [X31 + 0x6]
	0x01CAAC14 STR W8, [X31 + 0x70]
	0x01CAAC18 STR X31, [X31]
	0x01CAAC1C BL 0x1D98EB8
	0x01CAAC20 ADRP X8, 0x22A4000
	0x01CAAC24 LDR X8, [X8 + 0x2A8]
	0x01CAAC28 MOV X21, X0
	0x01CAAC2C LDR X8, [X8]
	0x01CAAC30 LDR W9, [X8 + 0xE0]
	0x01CAAC34 CBNZ W9, 0x1CAAC40
	0x01CAAC38 MOV X0, X8
	0x01CAAC3C BL 0x1B6E8F8
	0x01CAAC40 BL 0x1CAB1DC
	0x01CAAC44 CBZ X21, 0x1CAB09C
	0x01CAAC48 ADRP X8, 0x22A4000
	0x01CAAC4C LDR X8, [X8 + 0x268]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x257A000
	006 Move W8, [X20+1141]
	007 Move V8, V0
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22A4000
	014 Move X0, [X0+1144]
	015 Call 0x1B6F7F0
	016 Move W8, 1
	017 Move [X20+1141], W8
	018 Move X8, [X19+128]
	019 Compare X8, 0
	020 JumpIfEqual {73}
	021 Move X0, [X8+304]
	022 Compare X0, 0
	023 JumpIfEqual {73}
	024 Move X1, X31
	025 Call Rigidbody.get_mass, X0
	026 NotImplemented "Instruction FCMP not yet implemented."
	027 Move X8, [X19+128]
	028 Compare X8, 0
	029 JumpIfEqual {73}
	030 Move X0, [X8+304]
	031 Compare X0, 0
	032 JumpIfEqual {73}
	033 Move V0, V8
	034 Move X1, X31
	035 Call Rigidbody.set_mass, X0, V0
	036 Move X8, [X19+128]
	037 Compare X8, 0
	038 JumpIfEqual {73}
	039 Move X9, 0x22A4000
	040 Move X9, [X9+1144]
	041 Move X20, [X8+288]
	042 Move X0, [X9]
	043 Move W9, [X0+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1B6F8F8
	047 Move X0, X20
	048 Move X1, X31
	049 Move X2, X31
	050 Call Object.op_Inequality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {68}
	055 Move X8, [X19+128]
	056 Compare X8, 0
	057 JumpIfEqual {73}
	058 Move X0, [X8+288]
	059 Compare X0, 0
	060 JumpIfEqual {73}
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X30, [X31+8]
	064 Move X1, X31
	065 Move V8, [X31+32]
	066 Call AttachedItemAnchor.UpdatedItemMass, X0
	067 Return 
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+8]
	071 Move V8, [X31+32]
	072 Return 
	073 Call 0x1B6FA1C

Method: System.Boolean CheckToEmptyItem()

Disassembly:
	0x01CAA318 MOV X20, X0
	0x01CAA31C BL 0x342E500
	0x01CAA320 LDR X0, [X21]
	0x01CAA324 LDR W8, [X0 + 0xE0]
	0x01CAA328 CBNZ W8, 0x1CAA330
	0x01CAA32C BL 0x1B6E8F8
	0x01CAA330 MOV X0, X20
	0x01CAA334 LDP X20, X19, [X31 + 0x20]
	0x01CAA338 LDP X22, X21, [X31 + 0x10]
	0x01CAA33C MOV X1, X31
	0x01CAA340 LDP X30, X23, [X31], #0x30
	0x01CAA344 B 0x1C8D564
	0x01CAA348 STP X30, X21, [X31 - 0x20]!
	0x01CAA34C STP X20, X19, [X31 + 0x10]
	0x01CAA350 ADRP X21, 0x2579000
	0x01CAA354 ADRP X20, 0x22A3000
	0x01CAA358 LDRB W8, [X21 + 0x480]
	0x01CAA35C LDR X20, [X20 + 0x4E8]
	0x01CAA360 MOV X19, X0
	0x01CAA364 TBNZ X8, 0x0, 0x1CAA3B8
	0x01CAA368 ADRP X0, 0x22A3000
	0x01CAA36C LDR X0, [X0 + 0x4E8]
	0x01CAA370 BL 0x1B6E7F0
	0x01CAA374 ADRP X0, 0x22A4000
	0x01CAA378 LDR X0, [X0 + 0x758]
	0x01CAA37C BL 0x1B6E7F0
	0x01CAA380 ADRP X0, 0x22A4000
	0x01CAA384 LDR X0, [X0 + 0x760]
	0x01CAA388 BL 0x1B6E7F0
	0x01CAA38C ADRP X0, 0x22A4000
	0x01CAA390 LDR X0, [X0 + 0x768]
	0x01CAA394 BL 0x1B6E7F0
	0x01CAA398 ADRP X0, 0x22A4000
	0x01CAA39C LDR X0, [X0 + 0x770]
	0x01CAA3A0 BL 0x1B6E7F0
	0x01CAA3A4 ADRP X0, 0x22A3000
	0x01CAA3A8 LDR X0, [X0 + 0xD00]
	0x01CAA3AC BL 0x1B6E7F0
	0x01CAA3B0 MOVZ W8, 0x1
	0x01CAA3B4 STRB W8, [X21 + 0x480]
	0x01CAA3B8 LDR X0, [X20]
	0x01CAA3BC LDR W8, [X0 + 0xE0]
	0x01CAA3C0 CBNZ W8, 0x1CAA3C8
	0x01CAA3C4 BL 0x1B6E8F8
	0x01CAA3C8 ADRP X21, 0x2579000
	0x01CAA3CC LDRB W8, [X21 + 0x443]
	0x01CAA3D0 CBNZ W8, 0x1CAA3E8
	0x01CAA3D4 ADRP X0, 0x22A3000
	0x01CAA3D8 LDR X0, [X0 + 0x4E8]
	0x01CAA3DC BL 0x1B6E7F0
	0x01CAA3E0 MOVZ W8, 0x1
	0x01CAA3E4 STRB W8, [X21 + 0x443]
	0x01CAA3E8 LDR X0, [X20]
	0x01CAA3EC LDR W8, [X0 + 0xE0]
	0x01CAA3F0 CBNZ W8, 0x1CAA3FC
	0x01CAA3F4 BL 0x1B6E8F8
	0x01CAA3F8 LDR X0, [X20]
	0x01CAA3FC LDR X8, [X0 + 0xB8]
	0x01CAA400 LDR X8, [X8]
	0x01CAA404 CBZ X8, 0x1CAA4C0
	0x01CAA408 LDR X8, [X8 + 0xA8]
	0x01CAA40C CBZ X8, 0x1CAA4C0
	0x01CAA410 ADRP X9, 0x22A3000
	0x01CAA414 LDR X9, [X9 + 0xD00]
	0x01CAA418 LDR X0, [X8 + 0x70]
	0x01CAA41C LDR X1, [X9]
	0x01CAA420 BL 0x24B9848
	0x01CAA424 LDRB W8, [X19 + 0x68]
	0x01CAA428 TBZ X0, 0x0, 0x1CAA45C
	0x01CAA42C CBNZ W8, 0x1CAA4B4
	0x01CAA430 LDR X0, [X19 + 0x20]
	0x01CAA434 MOVZ W8, 0x1
	0x01CAA438 STRB W8, [X19 + 0x68]
	0x01CAA43C CBZ X0, 0x1CAA4C0
	0x01CAA440 ADRP X8, 0x22A4000
	0x01CAA444 LDR X1, [X19 + 0x28]
	0x01CAA448 LDR X8, [X8 + 0x760]
	0x01CAA44C LDP X20, X19, [X31 + 0x10]
	0x01CAA450 LDR X2, [X8]
	0x01CAA454 LDP X30, X21, [X31], #0x20
	0x01CAA458 B 0x2E4671C
	0x01CAA45C CBZ W8, 0x1CAA4B4
	0x01CAA460 ADRP X8, 0x22A4000
	0x01CAA464 LDR X20, [X19 + 0x20]
	0x01CAA468 LDR X8, [X8 + 0x770]
	0x01CAA46C LDR X0, [X8]
	0x01CAA470 BL 0x1B6EA0C
	0x01CAA474 ADRP X8, 0x22A4000
	0x01CAA478 LDR X8, [X8 + 0x758]
	0x01CAA47C MOV X1, X19
	0x01CAA480 MOV X3, X31
	0x01CAA484 MOV X21, X0
	0x01CAA488 LDR X2, [X8]
	0x01CAA48C BL 0x234AD78
	0x01CAA490 CBZ X20, 0x1CAA4C0
	0x01CAA494 ADRP X8, 0x22A4000
	0x01CAA498 LDR X8, [X8 + 0x768]
	0x01CAA49C MOV X0, X20
	0x01CAA4A0 LDP X20, X19, [X31 + 0x10]
	0x01CAA4A4 MOV X1, X21
	0x01CAA4A8 LDR X2, [X8]
	0x01CAA4AC LDP X30, X21, [X31], #0x20
	0x01CAA4B0 B 0x2E47E64
	0x01CAA4B4 LDP X20, X19, [X31 + 0x10]
	0x01CAA4B8 LDP X30, X21, [X31], #0x20
	0x01CAA4BC RET
	0x01CAA4C0 BL 0x1B6EA1C
	0x01CAA4C4 B 0x1CAA4C8
	0x01CAA4C8 STR X30, [X31 - 0x30]!
	0x01CAA4CC STP X22, X21, [X31 + 0x10]
	0x01CAA4D0 STP X20, X19, [X31 + 0x20]
	0x01CAA4D4 ADRP X20, 0x2579000
	0x01CAA4D8 LDRB W8, [X20 + 0x485]
	0x01CAA4DC MOV X19, X0
	0x01CAA4E0 TBNZ X8, 0x0, 0x1CAA51C
	0x01CAA4E4 ADRP X0, 0x22A3000
	0x01CAA4E8 LDR X0, [X0 + 0x5F8]
	0x01CAA4EC BL 0x1B6E7F0
	0x01CAA4F0 ADRP X0, 0x22A4000
	0x01CAA4F4 LDR X0, [X0 + 0x778]
	0x01CAA4F8 BL 0x1B6E7F0
	0x01CAA4FC ADRP X0, 0x22A4000
	0x01CAA500 LDR X0, [X0 + 0x780]
	0x01CAA504 BL 0x1B6E7F0
	0x01CAA508 ADRP X0, 0x22A4000
	0x01CAA50C LDR X0, [X0 + 0x788]
	0x01CAA510 BL 0x1B6E7F0
	0x01CAA514 MOVZ W8, 0x1
	0x01CAA518 STRB W8, [X20 + 0x485]
	0x01CAA51C LDR X0, [X19 + 0x20]
	0x01CAA520 CBZ X0, 0x1CAA5E8
	0x01CAA524 ADRP X21, 0x22A4000
	0x01CAA528 LDR X21, [X21 + 0x780]
	0x01CAA52C LDR W1, [X19 + 0x60]
	0x01CAA530 LDR X20, [X19 + 0x30]
	0x01CAA534 LDR X2, [X21]
	0x01CAA538 BL 0x2E46254
	0x01CAA53C CBZ X0, 0x1CAA5E8
	0x01CAA540 ADRP X8, 0x22A3000
	0x01CAA544 LDR X8, [X8 + 0x5F8]
	0x01CAA548 LDR W9, [X0 + 0x20]
	0x01CAA54C ADRP X22, 0x22A4000
	0x01CAA550 ADD X1, X31, 0xC
	0x01CAA554 LDR X0, [X8]
	0x01CAA558 LDR X22, [X22 + 0x788]
	0x01CAA55C STR W9, [X31 + 0xC]
	0x01CAA560 BL 0x1B6E900
	0x01CAA564 LDR X8, [X22]
	0x01CAA568 MOV X1, X0
	0x01CAA56C MOV X2, X31
	0x01CAA570 MOV X0, X8
	0x01CAA574 BL 0x3087E18
	0x01CAA578 CBZ X20, 0x1CAA5E8
	0x01CAA57C LDR X8, [X20]
	0x01CAA580 MOV X1, X0
	0x01CAA584 MOV X0, X20
	0x01CAA588 LDR X9, [X8 + 0x558]
	0x01CAA58C LDR X2, [X8 + 0x560]
	0x01CAA590 BLR X9
	0x01CAA594 LDR X0, [X19 + 0x20]
	0x01CAA598 CBZ X0, 0x1CAA5E8
	0x01CAA59C MOV W20, W31
	0x01CAA5A0 LDR W8, [X0 + 0x18]
	0x01CAA5A4 CMP W20, W8
	0x01CAA5A8 B.GE 0x1CAA5EC
	0x01CAA5AC LDR X2, [X21]
	0x01CAA5B0 MOV W1, W20
	0x01CAA5B4 BL 0x2E46254
	0x01CAA5B8 MOV X1, X0
	0x01CAA5BC MOV X0, X19
	0x01CAA5C0 BL 0x1CAB520
	0x01CAA5C4 CBZ X0, 0x1CAA5E8
	0x01CAA5C8 LDR W8, [X19 + 0x60]
	0x01CAA5CC MOV X2, X31
	0x01CAA5D0 CMP W20, W8
	0x01CAA5D4 CSET W1, EQ
	0x01CAA5D8 BL 0x3A9D9A8
	0x01CAA5DC LDR X0, [X19 + 0x20]
	0x01CAA5E0 ADD W20, W20, 0x1
	0x01CAA5E4 CBNZ X0, 0x1CAA5A0
	0x01CAA5E8 BL 0x1B6EA1C
	0x01CAA5EC LDP X20, X19, [X31 + 0x20]
	0x01CAA5F0 LDP X22, X21, [X31 + 0x10]
	0x01CAA5F4 LDR X30, [X31], #0x30
	0x01CAA5F8 RET
	0x01CAA5FC SUB X31, X31, 0x40
	0x01CAA600 STP D9, D8, [X31 + 0x10]
	0x01CAA604 STP X30, X21, [X31 + 0x20]
	0x01CAA608 STP X20, X19, [X31 + 0x30]
	0x01CAA60C ADRP X20, 0x2579000
	0x01CAA610 LDRB W8, [X20 + 0x481]
	0x01CAA614 MOV X19, X0
	0x01CAA618 TBNZ X8, 0x0, 0x1CAA654
	0x01CAA61C ADRP X0, 0x22A4000
	0x01CAA620 LDR X0, [X0 + 0x728]
	0x01CAA624 BL 0x1B6E7F0
	0x01CAA628 ADRP X0, 0x22A4000
	0x01CAA62C LDR X0, [X0 + 0x790]
	0x01CAA630 BL 0x1B6E7F0
	0x01CAA634 ADRP X0, 0x22A4000
	0x01CAA638 LDR X0, [X0 + 0x798]
	0x01CAA63C BL 0x1B6E7F0
	0x01CAA640 ADRP X0, 0x22A4000
	0x01CAA644 LDR X0, [X0 + 0x7A0]
	0x01CAA648 BL 0x1B6E7F0
	0x01CAA64C MOVZ W8, 0x1
	0x01CAA650 STRB W8, [X20 + 0x481]
	0x01CAA654 ADRP X21, 0x2579000
	0x01CAA658 LDRB W8, [X21 + 0x442]
	0x01CAA65C LDR X20, [X19 + 0x38]
	0x01CAA660 CBNZ W8, 0x1CAA678
	0x01CAA664 ADRP X0, 0x22A3000
	0x01CAA668 LDR X0, [X0 + 0x480]
	0x01CAA66C BL 0x1B6E7F0
	0x01CAA670 MOVZ W8, 0x1
	0x01CAA674 STRB W8, [X21 + 0x442]
	0x01CAA678 ADRP X8, 0x22A3000
	0x01CAA67C LDR X8, [X8 + 0x480]
	0x01CAA680 MOV X0, X31
	0x01CAA684 LDR X8, [X8]
	0x01CAA688 LDR X8, [X8 + 0xB8]
	0x01CAA68C LDR V8, [X8 + 0x18]
	0x01CAA690 LDR V9, [X8 + 0x20]
	0x01CAA694 BL 0x3AA481C
	0x01CAA698 CBZ X20, 0x1CAA7D8
	0x01CAA69C FMOV S1, 25
	0x01CAA6A0 FMOV V2.2S, 0x0
	0x01CAA6A4 FMUL S1, S9, S1
	0x00000000 INVALID
	0x01CAA6AC FMUL S2, S1, S0
	0x00000000 INVALID
	0x01CAA6B4 MOV S1, V0.S[1]
	0x01CAA6B8 MOV X0, X20
	0x01CAA6BC MOV X1, X31
	0x01CAA6C0 BL 0x3AA8564
	0x01CAA6C4 MOV X0, X19
	0x01CAA6C8 BL 0x1CAA7DC
	0x01CAA6CC BL 0x1CAA010
	0x01CAA6D0 TBZ X0, 0x0, 0x1CAA7C4
	0x01CAA6D4 MOV X0, X31
	0x01CAA6D8 BL 0x3AA47CC
	0x01CAA6DC ADRP X8, 0x22A4000
	0x01CAA6E0 LDR X8, [X8 + 0x728]
	0x01CAA6E4 ADRP X9, 0x22A4000
	0x01CAA6E8 MOV V8.16B, V0.16B
	0x01CAA6EC LDR X8, [X8]
	0x01CAA6F0 LDR X8, [X8 + 0xB8]
	0x01CAA6F4 LDR X9, [X9 + 0x790]
	0x01CAA6F8 ADD X0, X8, 0x8
	0x01CAA6FC LDR X1, [X9]
	0x01CAA700 BL 0x22DB254
	0x01CAA704 ADRP X20, 0x2579000
	0x01CAA708 LDRB W8, [X20 + 0x507]
	0x01CAA70C MOV V9.16B, V0.16B
	0x01CAA710 CBNZ W8, 0x1CAA728
	0x01CAA714 ADRP X0, 0x22A3000
	0x01CAA718 LDR X0, [X0 + 0x488]
	0x01CAA71C BL 0x1B6E7F0
	0x01CAA720 MOVZ W8, 0x1
	0x01CAA724 STRB W8, [X20 + 0x507]
	0x01CAA728 ADRP X8, 0x22A3000
	0x01CAA72C LDR X8, [X8 + 0x488]
	0x01CAA730 FSUB S8, S8, S9
	0x01CAA734 LDR X0, [X8]
	0x01CAA738 LDR W8, [X0 + 0xE0]
	0x01CAA73C CBNZ W8, 0x1CAA744
	0x01CAA740 BL 0x1B6E8F8
	0x01CAA744 ADRP X12, 0x22A4000
	0x01CAA748 MOVZ W10, 0x7F800000
	0x01CAA74C LDR X12, [X12 + 0x798]
	0x01CAA750 FRINTP S0, S8
	0x01CAA754 FCVTPS W8, S8
	0x01CAA758 MOVZ W9, 0x3C
	0x01CAA75C MOVZ W11, 0x3C
	0x01CAA760 FMOV S1, W10
	0x01CAA764 MOVK W11, 0x80000000
	0x01CAA768 SUB W8, W9, W8
	0x01CAA76C FCMP S0, S1
	0x01CAA770 CSEL W8, W11, W8, EQ
	0x01CAA774 STR W8, [X31 + 0xC]
	0x01CAA778 LDR X1, [X12]
	0x01CAA77C LDR X19, [X19 + 0x30]
	0x01CAA780 ADD X0, X31, 0xC
	0x01CAA784 MOV X2, X31
	0x01CAA788 BL 0x31E4DA8
	0x01CAA78C ADRP X8, 0x22A4000
	0x01CAA790 LDR X8, [X8 + 0x7A0]
	0x01CAA794 MOV X1, X0
	0x01CAA798 MOV X2, X31
	0x01CAA79C LDR X8, [X8]
	0x01CAA7A0 MOV X0, X8
	0x01CAA7A4 BL 0x3084780
	0x01CAA7A8 CBZ X19, 0x1CAA7D8
	0x01CAA7AC LDR X8, [X19]
	0x01CAA7B0 MOV X1, X0
	0x01CAA7B4 MOV X0, X19
	0x01CAA7B8 LDR X9, [X8 + 0x558]
	0x01CAA7BC LDR X2, [X8 + 0x560]
	0x01CAA7C0 BLR X9
	0x01CAA7C4 LDP X20, X19, [X31 + 0x30]
	0x01CAA7C8 LDP X30, X21, [X31 + 0x20]
	0x01CAA7CC LDP D9, D8, [X31 + 0x10]
	0x01CAA7D0 ADD X31, X31, 0x40
	0x01CAA7D4 RET
	0x01CAA7D8 BL 0x1B6EA1C
	0x01CAA7DC STR D8, [X31 - 0x30]!
	0x01CAA7E0 STP X30, X21, [X31 + 0x10]
	0x01CAA7E4 STP X20, X19, [X31 + 0x20]
	0x01CAA7E8 ADRP X21, 0x2579000
	0x01CAA7EC ADRP X20, 0x22A4000

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], D8
	003 Move [X31+104], X30
	004 Move [X31+112], X26
	005 Move [X31+120], X25
	006 Move [X31+128], X24
	007 Move [X31+136], X23
	008 Move [X31+144], X22
	009 Move [X31+152], X21
	010 Move [X31+160], X20
	011 Move [X31+168], X19
	012 Move X20, 0x257A000
	013 Move W8, [X20+1142]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {42}
	019 Move X0, 0x22A5000
	020 Move X0, [X0+616]
	021 Call 0x1B6F7F0
	022 Move X0, 0x22A5000
	023 Move X0, [X0+664]
	024 Call 0x1B6F7F0
	025 Move X0, 0x22A5000
	026 Move X0, [X0+1760]
	027 Call 0x1B6F7F0
	028 Move X0, 0x22A5000
	029 Move X0, [X0+1768]
	030 Call 0x1B6F7F0
	031 Move X0, 0x22A5000
	032 Move X0, [X0+1712]
	033 Call 0x1B6F7F0
	034 Move X0, 0x22A5000
	035 Move X0, [X0+488]
	036 Call 0x1B6F7F0
	037 Move X0, 0x22A4000
	038 Move X0, [X0+1144]
	039 Call 0x1B6F7F0
	040 Move W8, 1
	041 Move [X20+1142], W8
	042 Add X8, X31, 8
	043 Move X0, X19
	044 Move [X31+64], X31
	045 Move [X31+72], X31
	046 Move [X31+80], X31
	047 Move [X31+60], W31
	048 Call InventoryBag.get_containedObjects, X0
	049 NotImplemented "Instruction LDUR not yet implemented."
	050 Move X9, [X31+24]
	051 Move [X31+4], V0
	052 Move W8, [X31+72]
	053 Move [X31+2], V0
	054 Move [X31+80], X9
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X25, 0x22A5000
	057 Move X26, 0x22A5000
	058 Move X23, 0x22A4000
	059 Move X24, 0x22A5000
	060 Move X25, [X25+1760]
	061 Move X26, [X26+488]
	062 Move X23, [X23+1144]
	063 Move X24, [X24+664]
	064 Move W21, W31
	065 Move TEMP, 0
	066 Not TEMP
	067 Move W20, TEMP
	068 Move S8, 5
	069 Add X8, X31, 32
	070 Move X0, X19
	071 Call InventoryBag.get_containedObjects, X0
	072 Move V0, [X31+2]
	073 Move X8, [X31+48]
	074 Move X2, [X25]
	075 Add X0, X31, 64
	076 Move W1, W21
	077 Move [X31+4], V0
	078 Move [X31+80], X8
	079 Call NetworkArray`1<NetworkId>.Get, X0, X1
	080 Move X8, [X26]
	081 Move X22, X0
	082 Move W9, [X8+224]
	083 Compare W9, 0
	084 JumpIfEqual {87}
	085 Compare W22, 0
	086 JumpIfNotEqual {91}
	087 Move X0, X8
	088 Call 0x1B6F8F8
	089 Compare W22, 0
	090 JumpIfEqual {139}
	091 Move X0, [X19+56]
	092 Compare X0, 0
	093 JumpIfEqual {367}
	094 And X1, X22, 0
	095 Move X2, X31
	096 Call NetworkRunner.FindObject, X0, X1
	097 Move X8, [X23]
	098 Move X22, X0
	099 Move W9, [X8+224]
	100 Compare W9, 0
	101 JumpIfNotEqual {104}
	102 Move X0, X8
	103 Call 0x1B6F8F8
	104 Move X0, X22
	105 Move X1, X31
	106 Move X2, X31
	107 Add W20, W20, 1
	108 Call Object.op_Equality, X0, X1
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfEqual {139}
	113 Compare X22, 0
	114 JumpIfEqual {367}
	115 Move X1, [X24]
	116 Move X0, X22
	117 Call 0x2090DE8, X0
	118 Move X8, [X23]
	119 Move X22, X0
	120 Move W9, [X8+224]
	121 Compare W9, 0
	122 JumpIfNotEqual {125}
	123 Move X0, X8
	124 Call 0x1B6F8F8
	125 Move X0, X22
	126 Move X1, X31
	127 Move X2, X31
	128 Call Object.op_Inequality, X0, X1
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfNotEqual {139}
	133 Compare X22, 0
	134 JumpIfEqual {367}
	135 Move X0, X22
	136 Move X1, X31
	137 Call Rigidbody.get_mass, X0
	138 Add S8, S8, S0
	139 Add X8, X31, 8
	140 Move X0, X19
	141 Add W21, W21, 1
	142 Call InventoryBag.get_containedObjects, X0
	143 NotImplemented "Instruction LDUR not yet implemented."
	144 Move X9, [X31+24]
	145 Move [X31+4], V0
	146 Move W8, [X31+72]
	147 Move [X31+2], V0
	148 Move [X31+80], X9
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move TEMP, X20
	151 And TEMP, TEMP, -2147483648
	152 Compare TEMP, -2147483648
	153 JumpIfEqual {321}
	154 Add X8, X31, 32
	155 Move X0, X19
	156 Call InventoryBag.get_containedObjects, X0
	157 Move V0, [X31+2]
	158 Move X8, [X31+48]
	159 Move X2, [X25]
	160 Add X0, X31, 64
	161 Move W1, W20
	162 Move [X31+4], V0
	163 Move [X31+80], X8
	164 Call NetworkArray`1<NetworkId>.Get, X0, X1
	165 Move X8, [X19+56]
	166 Compare X8, 0
	167 JumpIfEqual {367}
	168 And X1, X0, 0
	169 Move X0, X8
	170 Move X2, X31
	171 Call NetworkRunner.FindObject, X0, X1
	172 Move X8, [X23]
	173 Move X21, X0
	174 Move W9, [X8+224]
	175 Compare W9, 0
	176 JumpIfNotEqual {179}
	177 Move X0, X8
	178 Call 0x1B6F8F8
	179 Move X0, X21
	180 Move X1, X31
	181 Move X2, X31
	182 Call Object.op_Inequality, X0, X1
	183 Move TEMP, X0
	184 And TEMP, TEMP, 1
	185 Compare TEMP, 1
	186 JumpIfNotEqual {328}
	187 Compare X21, 0
	188 JumpIfEqual {367}
	189 Move X0, X21
	190 Move X1, X31
	191 Call Component.get_transform, X0
	192 Move X8, [X19+144]
	193 Compare X8, 0
	194 JumpIfEqual {367}
	195 Move X22, X0
	196 Move X0, X8
	197 Move X1, X31
	198 Call Transform.get_position, X0
	199 Compare X22, 0
	200 JumpIfEqual {367}
	201 Move X0, X22
	202 Move X1, X31
	203 Call Transform.set_position, X0, X1
	204 Move X0, X21
	205 Move X1, X31
	206 Call Component.get_transform, X0
	207 Move X8, [X19+144]
	208 Compare X8, 0
	209 JumpIfEqual {367}
	210 Move X22, X0
	211 Move X0, X8
	212 Move X1, X31
	213 Call Transform.get_rotation, X0
	214 Compare X22, 0
	215 JumpIfEqual {367}
	216 Move X0, X22
	217 Move X1, X31
	218 Call Transform.set_rotation, X0, X1
	219 Move X8, 0x22A5000
	220 Move X8, [X8+616]
	221 Move X0, X21
	222 Move X1, [X8]
	223 Call 0x2090DE8, X0
	224 Move X8, [X23]
	225 Move X22, X0
	226 Move W9, [X8+224]
	227 Compare W9, 0
	228 JumpIfNotEqual {231}
	229 Move X0, X8
	230 Call 0x1B6F8F8
	231 Move X0, X22
	232 Move X1, X31
	233 Move X2, X31
	234 Call Object.op_Inequality, X0, X1
	235 Move TEMP, X0
	236 And TEMP, TEMP, 1
	237 Compare TEMP, 1
	238 JumpIfNotEqual {266}
	239 Move X0, [X19+144]
	240 Compare X0, 0
	241 JumpIfEqual {367}
	242 Move X1, X31
	243 Call Transform.get_position, X0
	244 Compare X22, 0
	245 JumpIfEqual {367}
	246 Move X0, X22
	247 Move X1, X31
	248 Call GrabbableItem.RemoveFromBag, X0, X1
	249 Move X0, [X19+128]
	250 Compare X0, 0
	251 JumpIfEqual {367}
	252 Add X1, X31, 60
	253 Move X2, X31
	254 Call GrabbableItem.TryGetHandSide, X0, X1
	255 Move TEMP, X0
	256 And TEMP, TEMP, 1
	257 Compare TEMP, 1
	258 JumpIfNotEqual {266}
	259 Move X8, -18874368
	260 Move X9, -18874368
	261 Move W0, [X31+60]
	262 Move V0, [X8+2352]
	263 Move V1, [X9+2736]
	264 Move X1, X31
	265 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	266 Move X1, [X24]
	267 Move X0, X21
	268 Call 0x2090DE8, X0
	269 Move X8, [X23]
	270 Move X22, X0
	271 Move W9, [X8+224]
	272 Compare W9, 0
	273 JumpIfNotEqual {276}
	274 Move X0, X8
	275 Call 0x1B6F8F8
	276 Move X0, X22
	277 Move X1, X31
	278 Move X2, X31
	279 Call Object.op_Inequality, X0, X1
	280 Move TEMP, X0
	281 And TEMP, TEMP, 1
	282 Compare TEMP, 1
	283 JumpIfNotEqual {322}
	284 Move X24, 0x257A000
	285 Move W8, [X24+1087]
	286 Compare W8, 0
	287 JumpIfNotEqual {293}
	288 Move X0, 0x22A4000
	289 Move X0, [X0+1152]
	290 Call 0x1B6F7F0
	291 Move W8, 1
	292 Move [X24+1087], W8
	293 Compare X22, 0
	294 JumpIfEqual {367}
	295 Move X25, 0x22A4000
	296 Move X25, [X25+1152]
	297 Move X0, X22
	298 Move X1, X31
	299 Move X8, [X25]
	300 Move X8, [X8+184]
	301 Move S1, [X8+4]
	302 Move S2, [X8+8]
	303 Move V0, [X8]
	304 Call Rigidbody.set_velocity, X0, X1
	305 Move W8, [X24+1087]
	306 Compare W8, 0
	307 JumpIfNotEqual {313}
	308 Move X0, 0x22A4000
	309 Move X0, [X0+1152]
	310 Call 0x1B6F7F0
	311 Move W8, 1
	312 Move [X24+1087], W8
	313 Move X8, [X25]
	314 Move X0, X22
	315 Move X1, X31
	316 Move X8, [X8+184]
	317 Move S0, [X8]
	318 Move S1, [X8+4]
	319 Move V2, [X8+8]
	320 Call Rigidbody.set_angularVelocity, X0, X1
	321 Move W0, W31
	322 Compare X22, 0
	323 JumpIfEqual {367}
	324 Move X0, X22
	325 Move X1, X31
	326 Call Rigidbody.get_mass, X0
	327 Subtract S8, S8, S0
	328 Add X8, X31, 32
	329 Move X0, X19
	330 Call InventoryBag.get_containedObjects, X0
	331 Move X9, 0x22A5000
	332 Move V0, [X31+2]
	333 Move X8, [X31+48]
	334 Move X9, [X9+1768]
	335 Add X0, X31, 64
	336 Move W1, W20
	337 Move X2, X31
	338 Move X3, [X9]
	339 Move [X31+4], V0
	340 Move [X31+80], X8
	341 Call NetworkArray`1<NetworkId>.Set, X0, X1, X2
	342 Move X0, X19
	343 Move V0, V8
	344 Call InventoryBag.UpdateMass, X0, V0
	345 Move X0, [X23]
	346 Move W8, [X0+224]
	347 Compare W8, 0
	348 JumpIfNotEqual {350}
	349 Call 0x1B6F8F8
	350 Move X0, X21
	351 Move X1, X31
	352 Move X2, X31
	353 Call Object.op_Inequality, X0, X1
	354 Move X20, [X31+160]
	355 Move X19, [X31+168]
	356 Move X22, [X31+144]
	357 Move X21, [X31+152]
	358 Move X24, [X31+128]
	359 Move X23, [X31+136]
	360 Move X26, [X31+112]
	361 Move X25, [X31+120]
	362 Move X30, [X31+104]
	363 Move V8, [X31+96]
	364 And W0, W0, 1
	365 Add X31, X31, 176
	366 Return X0
	367 Call 0x1B6FA1C

Method: System.Void CheckToAddItem()

Disassembly:
	0x01CA9E30 MOV X1, X31
	0x01CA9E34 MOVZ W20, 0x1
	0x01CA9E38 BL 0x1D29EBC
	0x01CA9E3C CBZ X19, 0x1CA9E90
	0x01CA9E40 ADRP X9, 0x22A5000
	0x01CA9E44 LDR X9, [X9 + 0x720]
	0x01CA9E48 STRB W20, [X19 + 0x58]
	0x01CA9E4C LDR X8, [X19]
	0x01CA9E50 LDR X1, [X9]
	0x01CA9E54 LDRB W10, [X8 + 0x130]
	0x01CA9E58 LDRB W9, [X1 + 0x130]
	0x01CA9E5C CMP W10, W9
	0x01CA9E60 B.CC 0x1CA9E88
	0x01CA9E64 LDR X8, [X8 + 0xC8]
	0x01CA9E68 ADD X8, X8, X9, 0x3, LSL
	0x01CA9E6C LDUR X8, [X8 - 0x8]
	0x01CA9E70 CMP X8, X1
	0x01CA9E74 B.NE 0x1CA9E88
	0x01CA9E78 MOV X0, X19
	0x01CA9E7C LDP X20, X19, [X31 + 0x10]
	0x01CA9E80 LDR X30, [X31], #0x20
	0x01CA9E84 B 0x1CA8404
	0x01CA9E88 MOV X0, X19
	0x01CA9E8C BL 0x1B6ECDC
	0x01CA9E90 BL 0x1B6EA1C
	0x01CA9E94 STR D8, [X31 - 0x20]!
	0x01CA9E98 STR X30, [X31 + 0x8]
	0x01CA9E9C STP X20, X19, [X31 + 0x10]
	0x01CA9EA0 ADRP X20, 0x257A000
	0x01CA9EA4 LDRB W8, [X20 + 0x47B]
	0x01CA9EA8 MOV V8.16B, V0.16B
	0x01CA9EAC MOV X19, X0
	0x01CA9EB0 TBNZ X8, 0x0, 0x1CA9EC8
	0x01CA9EB4 ADRP X0, 0x22A4000
	0x01CA9EB8 LDR X0, [X0 + 0x478]
	0x01CA9EBC BL 0x1B6E7F0
	0x01CA9EC0 MOVZ W8, 0x1
	0x01CA9EC4 STRB W8, [X20 + 0x47B]
	0x01CA9EC8 LDR X8, [X19 + 0x10]
	0x01CA9ECC CBZ X8, 0x1CA9F54
	0x01CA9ED0 ADRP X9, 0x22A4000
	0x01CA9ED4 LDR X9, [X9 + 0x478]
	0x01CA9ED8 LDR X20, [X8 + 0x98]
	0x01CA9EDC LDR X0, [X9]
	0x01CA9EE0 LDR W9, [X0 + 0xE0]
	0x01CA9EE4 CBNZ W9, 0x1CA9EEC
	0x01CA9EE8 BL 0x1B6E8F8
	0x01CA9EEC MOV X0, X20
	0x01CA9EF0 MOV X1, X31
	0x01CA9EF4 MOV X2, X31
	0x01CA9EF8 BL 0x3AA0AF0
	0x01CA9EFC TBZ X0, 0x0, 0x1CA9F10
	0x01CA9F00 LDP X20, X19, [X31 + 0x10]
	0x01CA9F04 LDR X30, [X31 + 0x8]
	0x01CA9F08 LDR V8, [X31], #0x20
	0x01CA9F0C RET
	0x01CA9F10 LDR X8, [X19 + 0x10]
	0x01CA9F14 CBZ X8, 0x1CA9F54
	0x01CA9F18 ADRP X9, 0xFFFFFFFFFEE00000
	0x01CA9F1C LDR V0, [X9 + 0xAF4]
	0x01CA9F20 LDR X19, [X8 + 0x98]
	0x01CA9F24 FMOV S1, W31
	0x01CA9F28 FMOV S2, W31
	0x01CA9F2C FMUL S0, S8, S0
	0x01CA9F30 MOV X0, X31
	0x01CA9F34 BL 0x3A928DC
	0x01CA9F38 CBZ X19, 0x1CA9F54
	0x01CA9F3C MOV X0, X19
	0x01CA9F40 LDP X20, X19, [X31 + 0x10]
	0x01CA9F44 LDR X30, [X31 + 0x8]
	0x01CA9F48 MOV X1, X31
	0x01CA9F4C LDR V8, [X31], #0x20
	0x01CA9F50 B 0x3AA7984
	0x01CA9F54 BL 0x1B6EA1C
	0x01CA9F58 STR X30, [X31 - 0x20]!
	0x01CA9F5C STP X20, X19, [X31 + 0x10]
	0x01CA9F60 ADRP X20, 0x257A000
	0x01CA9F64 LDRB W8, [X20 + 0x47C]
	0x01CA9F68 MOV X19, X0
	0x01CA9F6C TBNZ X8, 0x0, 0x1CA9F84
	0x01CA9F70 ADRP X0, 0x22A4000
	0x01CA9F74 LDR X0, [X0 + 0x478]
	0x01CA9F78 BL 0x1B6E7F0
	0x01CA9F7C MOVZ W8, 0x1
	0x01CA9F80 STRB W8, [X20 + 0x47C]
	0x01CA9F84 LDR X8, [X19 + 0x10]
	0x01CA9F88 CBZ X8, 0x1CAA00C
	0x01CA9F8C ADRP X9, 0x22A4000
	0x01CA9F90 LDR X9, [X9 + 0x478]
	0x01CA9F94 LDR X20, [X8 + 0x98]
	0x01CA9F98 LDR X0, [X9]
	0x01CA9F9C LDR W9, [X0 + 0xE0]
	0x01CA9FA0 CBNZ W9, 0x1CA9FA8
	0x01CA9FA4 BL 0x1B6E8F8
	0x01CA9FA8 MOV X0, X20
	0x01CA9FAC MOV X1, X31
	0x01CA9FB0 MOV X2, X31
	0x01CA9FB4 BL 0x3AA0AF0
	0x01CA9FB8 TBZ X0, 0x0, 0x1CA9FC8
	0x01CA9FBC LDP X20, X19, [X31 + 0x10]
	0x01CA9FC0 LDR X30, [X31], #0x20
	0x01CA9FC4 RET
	0x01CA9FC8 LDR X8, [X19 + 0x10]
	0x01CA9FCC CBZ X8, 0x1CAA00C
	0x01CA9FD0 ADRP X9, 0xFFFFFFFFFEE00000
	0x01CA9FD4 LDR V0, [X19 + 0x18]
	0x01CA9FD8 LDR V1, [X9 + 0xAF4]
	0x01CA9FDC LDR X19, [X8 + 0x98]
	0x01CA9FE0 FMOV S2, W31
	0x01CA9FE4 MOV X0, X31
	0x01CA9FE8 FMUL S0, S0, S1
	0x01CA9FEC FMOV S1, W31
	0x01CA9FF0 BL 0x3A928DC
	0x01CA9FF4 CBZ X19, 0x1CAA00C
	0x01CA9FF8 MOV X0, X19
	0x01CA9FFC LDP X20, X19, [X31 + 0x10]
	0x01CAA000 MOV X1, X31
	0x01CAA004 LDR X30, [X31], #0x20
	0x01CAA008 B 0x3AA7984
	0x01CAA00C BL 0x1B6EA1C
	0x01CAA010 STR X30, [X31 - 0x20]!
	0x01CAA014 STP X20, X19, [X31 + 0x10]
	0x01CAA018 ADRP X19, 0x2579000
	0x01CAA01C ADRP X20, 0x22A4000
	0x01CAA020 LDRB W8, [X19 + 0x47D]
	0x01CAA024 LDR X20, [X20 + 0x728]
	0x01CAA028 TBNZ X8, 0x0, 0x1CAA04C
	0x01CAA02C ADRP X0, 0x22A4000
	0x01CAA030 LDR X0, [X0 + 0x728]
	0x01CAA034 BL 0x1B6E7F0
	0x01CAA038 ADRP X0, 0x22A4000
	0x01CAA03C LDR X0, [X0 + 0x730]
	0x01CAA040 BL 0x1B6E7F0
	0x01CAA044 MOVZ W8, 0x1
	0x01CAA048 STRB W8, [X19 + 0x47D]
	0x01CAA04C LDR X8, [X20]
	0x01CAA050 LDR X8, [X8 + 0xB8]
	0x01CAA054 LDRB W9, [X8 + 0x8]
	0x01CAA058 CBZ W9, 0x1CAA06C
	0x01CAA05C LDR W8, [X8 + 0x4]
	0x01CAA060 CMP W8, 0x9
	0x01CAA064 CSET W0, GT
	0x01CAA068 B 0x1CAA070
	0x01CAA06C MOV W0, W31
	0x01CAA070 LDP X20, X19, [X31 + 0x10]
	0x01CAA074 LDR X30, [X31], #0x20
	0x01CAA078 RET
	0x01CAA07C STP X30, X23, [X31 - 0x30]!
	0x01CAA080 STP X22, X21, [X31 + 0x10]
	0x01CAA084 STP X20, X19, [X31 + 0x20]
	0x01CAA088 ADRP X20, 0x2579000
	0x01CAA08C ADRP X21, 0x22A4000
	0x01CAA090 LDRB W8, [X20 + 0x47E]
	0x01CAA094 LDR X21, [X21 + 0x738]
	0x01CAA098 MOV X19, X0
	0x01CAA09C TBNZ X8, 0x0, 0x1CAA0FC
	0x01CAA0A0 ADRP X0, 0x22A4000
	0x01CAA0A4 LDR X0, [X0 + 0x740]
	0x01CAA0A8 BL 0x1B6E7F0
	0x01CAA0AC ADRP X0, 0x22A3000
	0x01CAA0B0 LDR X0, [X0 + 0x4E8]
	0x01CAA0B4 BL 0x1B6E7F0
	0x01CAA0B8 ADRP X0, 0x22A4000
	0x01CAA0BC LDR X0, [X0 + 0x738]
	0x01CAA0C0 BL 0x1B6E7F0
	0x01CAA0C4 ADRP X0, 0x22A3000
	0x01CAA0C8 LDR X0, [X0 + 0xBA0]
	0x01CAA0CC BL 0x1B6E7F0
	0x01CAA0D0 ADRP X0, 0x22A4000
	0x01CAA0D4 LDR X0, [X0 + 0x748]
	0x01CAA0D8 BL 0x1B6E7F0
	0x01CAA0DC ADRP X0, 0x22A4000
	0x01CAA0E0 LDR X0, [X0 + 0x750]
	0x01CAA0E4 BL 0x1B6E7F0
	0x01CAA0E8 ADRP X0, 0x22A3000
	0x01CAA0EC LDR X0, [X0 + 0xB90]
	0x01CAA0F0 BL 0x1B6E7F0
	0x01CAA0F4 MOVZ W8, 0x1
	0x01CAA0F8 STRB W8, [X20 + 0x47E]
	0x01CAA0FC LDR X1, [X21]
	0x01CAA100 MOV X0, X19
	0x01CAA104 BL 0x208FDE8
	0x01CAA108 STR X0, [X19 + 0x50]
	0x01CAA10C CBZ X0, 0x1CAA284
	0x01CAA110 ADRP X23, 0x22A4000
	0x01CAA114 LDR X23, [X23 + 0x740]
	0x01CAA118 MOV X20, X0
	0x01CAA11C LDR X21, [X0 + 0x20]
	0x01CAA120 ADRP X22, 0x22A4000
	0x01CAA124 LDR X0, [X23]
	0x01CAA128 LDR X22, [X22 + 0x748]
	0x01CAA12C BL 0x1B6EA0C
	0x01CAA130 LDR X2, [X22]
	0x01CAA134 MOV X1, X19
	0x01CAA138 MOV X3, X31
	0x01CAA13C MOV X22, X0
	0x01CAA140 BL 0x28D58F8
	0x01CAA144 MOV X0, X21
	0x01CAA148 MOV X1, X22
	0x01CAA14C MOV X2, X31
	0x01CAA150 BL 0x322A750
	0x01CAA154 CBZ X0, 0x1CAA190
	0x01CAA158 LDR X22, [X23]
	0x01CAA15C MOV X21, X0
	0x01CAA160 MOV X1, X22
	0x01CAA164 BL 0x1B6E8FC
	0x01CAA168 CBZ X0, 0x1CAA28C
	0x01CAA16C STR X0, [X20 + 0x20]
	0x01CAA170 LDR X20, [X23]
	0x01CAA174 MOV X0, X21
	0x01CAA178 MOV X1, X20
	0x01CAA17C BL 0x1B6E8FC
	0x01CAA180 CBNZ X0, 0x1CAA194
	0x01CAA184 MOV X0, X21
	0x01CAA188 MOV X1, X20
	0x01CAA18C BL 0x1B6ECDC
	0x01CAA190 STR X31, [X20 + 0x20]
	0x01CAA194 ADRP X8, 0x22A3000
	0x01CAA198 LDR X8, [X8 + 0xB90]
	0x01CAA19C ADRP X20, 0x22A4000
	0x01CAA1A0 ADRP X22, 0x22A3000
	0x01CAA1A4 ADRP X21, 0x22A3000
	0x01CAA1A8 LDR X0, [X8]
	0x01CAA1AC LDR X20, [X20 + 0x750]
	0x01CAA1B0 LDR X22, [X22 + 0xBA0]
	0x01CAA1B4 LDR X21, [X21 + 0x4E8]
	0x01CAA1B8 BL 0x1B6EA0C
	0x01CAA1BC LDR X2, [X20]
	0x01CAA1C0 MOV X1, X19
	0x01CAA1C4 MOV X3, X31
	0x01CAA1C8 MOV X20, X0
	0x01CAA1CC BL 0x342E500
	0x01CAA1D0 LDR X0, [X22]
	0x01CAA1D4 MOVZ W1, 0x1
	0x01CAA1D8 BL 0x1B6E868
	0x01CAA1DC LDR X8, [X21]
	0x01CAA1E0 MOV X19, X0
	0x01CAA1E4 LDR W9, [X8 + 0xE0]
	0x01CAA1E8 CBNZ W9, 0x1CAA1F4
	0x01CAA1EC MOV X0, X8
	0x01CAA1F0 BL 0x1B6E8F8
	0x01CAA1F4 ADRP X22, 0x2579000
	0x01CAA1F8 LDRB W8, [X22 + 0x443]
	0x01CAA1FC CBNZ W8, 0x1CAA214
	0x01CAA200 ADRP X0, 0x22A3000
	0x01CAA204 LDR X0, [X0 + 0x4E8]
	0x01CAA208 BL 0x1B6E7F0
	0x01CAA20C MOVZ W8, 0x1
	0x01CAA210 STRB W8, [X22 + 0x443]
	0x01CAA214 LDR X0, [X21]
	0x01CAA218 LDR W8, [X0 + 0xE0]
	0x01CAA21C CBNZ W8, 0x1CAA228
	0x01CAA220 BL 0x1B6E8F8
	0x01CAA224 LDR X0, [X21]
	0x01CAA228 LDR X8, [X0 + 0xB8]
	0x01CAA22C LDR X8, [X8]
	0x01CAA230 CBZ X8, 0x1CAA284
	0x01CAA234 LDR X8, [X8 + 0xA8]
	0x01CAA238 CBZ X8, 0x1CAA284
	0x01CAA23C CBZ X19, 0x1CAA284
	0x01CAA240 LDR X21, [X8 + 0x70]
	0x01CAA244 CBZ X21, 0x1CAA25C
	0x01CAA248 LDR X8, [X19]
	0x01CAA24C MOV X0, X21
	0x01CAA250 LDR X1, [X8 + 0x40]
	0x01CAA254 BL 0x1B6E8FC
	0x01CAA258 CBZ X0, 0x1CAA298
	0x01CAA25C LDR W8, [X19 + 0x18]
	0x01CAA260 CBZ W8, 0x1CAA288
	0x01CAA264 STR X21, [X19 + 0x20]
	0x01CAA268 MOV X0, X20
	0x01CAA26C MOV X1, X19
	0x01CAA270 LDP X20, X19, [X31 + 0x20]
	0x01CAA274 LDP X22, X21, [X31 + 0x10]
	0x01CAA278 MOV X2, X31
	0x01CAA27C LDP X30, X23, [X31], #0x30
	0x01CAA280 B 0x1C8CFDC
	0x01CAA284 BL 0x1B6EA1C
	0x01CAA288 BL 0x1B6EA24
	0x01CAA28C MOV X0, X21
	0x01CAA290 MOV X1, X22
	0x01CAA294 BL 0x1B6ECDC
	0x01CAA298 BL 0x1B6EA40
	0x01CAA29C MOV X1, X31
	0x01CAA2A0 BL 0x1B6E8E8
	0x01CAA2A4 STP X30, X23, [X31 - 0x30]!
	0x01CAA2A8 STP X22, X21, [X31 + 0x10]
	0x01CAA2AC STP X20, X19, [X31 + 0x20]
	0x01CAA2B0 ADRP X22, 0x2579000
	0x01CAA2B4 ADRP X23, 0x22A3000
	0x01CAA2B8 ADRP X20, 0x22A4000
	0x01CAA2BC ADRP X21, 0x22A3000
	0x01CAA2C0 LDRB W8, [X22 + 0x47F]
	0x01CAA2C4 LDR X23, [X23 + 0xB90]
	0x01CAA2C8 LDR X20, [X20 + 0x750]
	0x01CAA2CC LDR X21, [X21 + 0x4E8]
	0x01CAA2D0 MOV X19, X0
	0x01CAA2D4 TBNZ X8, 0x0, 0x1CAA304
	0x01CAA2D8 ADRP X0, 0x22A3000
	0x01CAA2DC LDR X0, [X0 + 0x4E8]
	0x01CAA2E0 BL 0x1B6E7F0
	0x01CAA2E4 ADRP X0, 0x22A4000
	0x01CAA2E8 LDR X0, [X0 + 0x750]
	0x01CAA2EC BL 0x1B6E7F0
	0x01CAA2F0 ADRP X0, 0x22A3000
	0x01CAA2F4 LDR X0, [X0 + 0xB90]
	0x01CAA2F8 BL 0x1B6E7F0
	0x01CAA2FC MOVZ W8, 0x1
	0x01CAA300 STRB W8, [X22 + 0x47F]
	0x01CAA304 LDR X0, [X23]
	0x01CAA308 BL 0x1B6EA0C
	0x01CAA30C LDR X2, [X20]
	0x01CAA310 MOV X1, X19
	0x01CAA314 MOV X3, X31

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+96], D12
	003 Move [X31+112], D11
	004 Move [X31+120], D10
	005 Move [X31+128], D9
	006 Move [X31+136], D8
	007 Move [X31+144], X30
	008 Move [X31+152], X27
	009 Move [X31+160], X26
	010 Move [X31+168], X25
	011 Move [X31+176], X24
	012 Move [X31+184], X23
	013 Move [X31+192], X22
	014 Move [X31+200], X21
	015 Move [X31+208], X20
	016 Move [X31+216], X19
	017 Move X20, 0x257B000
	018 Move W8, [X20+1143]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {53}
	024 Move X0, 0x22A6000
	025 Move X0, [X0+616]
	026 Call 0x1B6F7F0
	027 Move X0, 0x22A6000
	028 Move X0, [X0+664]
	029 Call 0x1B6F7F0
	030 Move X0, 0x22A6000
	031 Move X0, [X0+984]
	032 Call 0x1B6F7F0
	033 Move X0, 0x22A6000
	034 Move X0, [X0+1760]
	035 Call 0x1B6F7F0
	036 Move X0, 0x22A6000
	037 Move X0, [X0+1768]
	038 Call 0x1B6F7F0
	039 Move X0, 0x22A6000
	040 Move X0, [X0+1712]
	041 Call 0x1B6F7F0
	042 Move X0, 0x22A6000
	043 Move X0, [X0+488]
	044 Call 0x1B6F7F0
	045 Move X0, 0x22A5000
	046 Move X0, [X0+1144]
	047 Call 0x1B6F7F0
	048 Move X0, 0x22A5000
	049 Move X0, [X0+1216]
	050 Call 0x1B6F7F0
	051 Move W8, 1
	052 Move [X20+1143], W8
	053 Move X25, 0x22A5000
	054 Move X25, [X25+1144]
	055 Add X8, X31, 8
	056 Move X0, X19
	057 Move [X31+64], X31
	058 Move [X31+72], X31
	059 Move [X31+80], X31
	060 Move [X31+104], X31
	061 Move [X31+60], W31
	062 Call InventoryBag.get_containedObjects, X0
	063 NotImplemented "Instruction LDUR not yet implemented."
	064 Move X9, [X31+24]
	065 Move W20, W31
	066 Move [X31+4], V0
	067 Move W8, [X31+72]
	068 Move [X31+2], V0
	069 Move [X31+80], X9
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X23, 0x22A6000
	072 Move X24, 0x22A6000
	073 Move X26, 0x22A6000
	074 Move X23, [X23+1760]
	075 Move X24, [X24+488]
	076 Move X26, [X26+664]
	077 Move W21, W31
	078 Move S8, 5
	079 Add X8, X31, 32
	080 Move X0, X19
	081 Call InventoryBag.get_containedObjects, X0
	082 Move V0, [X31+2]
	083 Move X8, [X31+48]
	084 Move X2, [X23]
	085 Add X0, X31, 64
	086 Move W1, W21
	087 Move [X31+4], V0
	088 Move [X31+80], X8
	089 Call NetworkArray`1<NetworkId>.Get, X0, X1
	090 Move X8, [X24]
	091 Move X22, X0
	092 Move W9, [X8+224]
	093 Compare W9, 0
	094 JumpIfEqual {97}
	095 Compare W22, 0
	096 JumpIfNotEqual {101}
	097 Move X0, X8
	098 Call 0x1B6F8F8
	099 Compare W22, 0
	100 JumpIfEqual {149}
	101 Move X0, [X19+56]
	102 Compare X0, 0
	103 JumpIfEqual {365}
	104 And X1, X22, 0
	105 Move X2, X31
	106 Call NetworkRunner.FindObject, X0, X1
	107 Move X8, [X25]
	108 Move X22, X0
	109 Move W9, [X8+224]
	110 Compare W9, 0
	111 JumpIfNotEqual {114}
	112 Move X0, X8
	113 Call 0x1B6F8F8
	114 Move X0, X22
	115 Move X1, X31
	116 Move X2, X31
	117 Add W20, W20, 1
	118 Call Object.op_Equality, X0, X1
	119 Move TEMP, X0
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfEqual {149}
	123 Compare X22, 0
	124 JumpIfEqual {365}
	125 Move X1, [X26]
	126 Move X0, X22
	127 Call 0x2090DE8, X0
	128 Move X8, [X25]
	129 Move X22, X0
	130 Move W9, [X8+224]
	131 Compare W9, 0
	132 JumpIfNotEqual {135}
	133 Move X0, X8
	134 Call 0x1B6F8F8
	135 Move X0, X22
	136 Move X1, X31
	137 Move X2, X31
	138 Call Object.op_Inequality, X0, X1
	139 Move TEMP, X0
	140 And TEMP, TEMP, 1
	141 Compare TEMP, 1
	142 JumpIfNotEqual {149}
	143 Compare X22, 0
	144 JumpIfEqual {365}
	145 Move X0, X22
	146 Move X1, X31
	147 Call Rigidbody.get_mass, X0
	148 Add S8, S8, S0
	149 Add X8, X31, 8
	150 Move X0, X19
	151 Add W21, W21, 1
	152 Call InventoryBag.get_containedObjects, X0
	153 NotImplemented "Instruction LDUR not yet implemented."
	154 Move X9, [X31+24]
	155 Move [X31+4], V0
	156 Move W8, [X31+72]
	157 Move [X31+2], V0
	158 Move [X31+80], X9
	159 NotImplemented "Instruction CMP not yet implemented."
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move S8, 5
	162 Move X0, [X19+144]
	163 Compare X0, 0
	164 JumpIfEqual {365}
	165 Move X22, 0x22A5000
	166 Move X21, 0x22A4000
	167 Move X22, [X22+984]
	168 Move X21, [X21+1216]
	169 Move X1, X31
	170 Call Transform.get_position, X0
	171 Move X0, [X22]
	172 Move V10, V0
	173 Move V11, V1
	174 Move V12, V2
	175 Move W8, [X0+224]
	176 Compare W8, 0
	177 JumpIfNotEqual {180}
	178 Call 0x1B6F8F8
	179 Move X0, [X22]
	180 Move X8, [X0+184]
	181 Move X1, X31
	182 Move W0, [X8+12]
	183 Call LayerMask.op_Implicit, X0
	184 Move X8, [X21]
	185 Move W21, W0
	186 Move W9, [X8+224]
	187 Compare W9, 0
	188 JumpIfNotEqual {191}
	189 Move X0, X8
	190 Call 0x1B6F8F8
	191 Move X8, -18874368
	192 Move V9, [X8+2736]
	193 Move V0, V10
	194 Move V1, V11
	195 Move V2, V12
	196 Move V3, V9
	197 Move W0, W21
	198 Move X1, X31
	199 Call Physics.OverlapSphere, X0, V0, X1
	200 Compare X0, 0
	201 JumpIfEqual {365}
	202 Move W8, [X0+24]
	203 Move X21, X0
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move X27, 0x22A5000
	206 Move X27, [X27+616]
	207 Move W26, W31
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Add X8, X21, W26
	210 Move X0, [X8+32]
	211 Compare X0, 0
	212 JumpIfEqual {365}
	213 Move X1, X31
	214 Call Collider.get_attachedRigidbody, X0
	215 Move X8, [X25]
	216 Move X22, X0
	217 Move W9, [X8+224]
	218 Compare W9, 0
	219 JumpIfNotEqual {222}
	220 Move X0, X8
	221 Call 0x1B6F8F8
	222 Move X0, X22
	223 Move X1, X31
	224 Move X2, X31
	225 Call Object.op_Inequality, X0, X1
	226 Move TEMP, X0
	227 And TEMP, TEMP, 1
	228 Compare TEMP, 1
	229 JumpIfNotEqual {288}
	230 Compare X22, 0
	231 JumpIfEqual {365}
	232 Move X0, X22
	233 Move X1, X31
	234 Call Component.get_gameObject, X0
	235 Move X23, X0
	236 Move X0, X19
	237 Move X1, X31
	238 Call Component.get_gameObject, X0
	239 Move X8, [X25]
	240 Move X24, X0
	241 Move W9, [X8+224]
	242 Compare W9, 0
	243 JumpIfNotEqual {246}
	244 Move X0, X8
	245 Call 0x1B6F8F8
	246 Move X0, X23
	247 Move X1, X24
	248 Move X2, X31
	249 Call Object.op_Inequality, X0, X1
	250 Move TEMP, X0
	251 And TEMP, TEMP, 1
	252 Compare TEMP, 1
	253 JumpIfNotEqual {288}
	254 Move X1, [X27]
	255 Move X0, X22
	256 Call 0x2090DE8, X0
	257 Move X8, [X25]
	258 Move X23, X0
	259 Move W9, [X8+224]
	260 Compare W9, 0
	261 JumpIfNotEqual {264}
	262 Move X0, X8
	263 Call 0x1B6F8F8
	264 Move X0, X23
	265 Move X1, X31
	266 Move X2, X31
	267 Call Object.op_Inequality, X0, X1
	268 Move TEMP, X0
	269 And TEMP, TEMP, 1
	270 Compare TEMP, 1
	271 JumpIfNotEqual {288}
	272 Compare X23, 0
	273 JumpIfEqual {365}
	274 Move W8, [X23+141]
	275 Compare W8, 0
	276 JumpIfEqual {288}
	277 Move X0, X23
	278 Move X1, X31
	279 Call GrabbableItem.get_attachedAnchorId, X0
	280 Move [X31+104], X0
	281 Add X0, X31, 104
	282 Move X1, X31
	283 Call NetworkBehaviourId.get_IsValid, X0
	284 Move TEMP, X0
	285 And TEMP, TEMP, 1
	286 Compare TEMP, 1
	287 JumpIfNotEqual {311}
	288 Move W8, [X21+24]
	289 Add W26, W26, 1
	290 NotImplemented "Instruction CMP not yet implemented."
	291 Move X0, X19
	292 Move V0, V8
	293 Call InventoryBag.UpdateMass, X0, V0
	294 Move X20, [X31+208]
	295 Move X19, [X31+216]
	296 Move X22, [X31+192]
	297 Move X21, [X31+200]
	298 Move X24, [X31+176]
	299 Move X23, [X31+184]
	300 Move X26, [X31+160]
	301 Move X25, [X31+168]
	302 Move X30, [X31+144]
	303 Move X27, [X31+152]
	304 Move D9, [X31+128]
	305 Move D8, [X31+136]
	306 Move D11, [X31+112]
	307 Move D10, [X31+120]
	308 Move V12, [X31+96]
	309 Add X31, X31, 224
	310 Return 
	311 Add X8, X31, 32
	312 Move X0, X19
	313 Call InventoryBag.get_containedObjects, X0
	314 Move V0, [X31+2]
	315 Move X8, [X31+48]
	316 Move [X31+4], V0
	317 Move [X31+80], X8
	318 Move X8, [X23+64]
	319 Compare X8, 0
	320 JumpIfEqual {365}
	321 Move X8, [X8+32]
	322 Compare X8, 0
	323 JumpIfEqual {325}
	324 Move W2, [X8]
	325 Move X2, X31
	326 Move X8, 0x22A5000
	327 Move X8, [X8+1768]
	328 Add X0, X31, 64
	329 Move W1, W20
	330 Move X3, [X8]
	331 Call NetworkArray`1<NetworkId>.Set, X0, X1, X2
	332 Move X0, X22
	333 Move X1, X31
	334 Call Rigidbody.get_mass, X0
	335 Move X8, [X19+64]
	336 Move V10, V0
	337 Compare X8, 0
	338 JumpIfEqual {343}
	339 Move X8, [X8+32]
	340 Compare X8, 0
	341 JumpIfEqual {343}
	342 Move W1, [X8]
	343 Move X1, X31
	344 Move W8, [X19+104]
	345 Move X0, X23
	346 Move X2, X31
	347 NotImplemented "Instruction BFM not yet implemented."
	348 Call GrabbableItem.AddToBag, X0, X1
	349 Move X0, [X19+128]
	350 Compare X0, 0
	351 JumpIfEqual {365}
	352 Add X1, X31, 60
	353 Move X2, X31
	354 Add S8, S8, S10
	355 Call GrabbableItem.TryGetHandSide, X0, X1
	356 Move TEMP, X0
	357 And TEMP, TEMP, 1
	358 Compare TEMP, 1
	359 JumpIfNotEqual {291}
	360 Move W0, [X31+60]
	361 Move S0, 0.5
	362 Move V1, V9
	363 Move X1, X31
	364 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	365 Call 0x1B6FA1C
	366 Call 0x1B6FA24

Method: System.Void .ctor()

Disassembly:
	0x01CAAC50 MOV X23, X0
	0x01CAAC54 LDR X1, [X8]

ISIL:
	001 Move X1, X31
	002 Call NetworkBehaviour..ctor, X0
	003 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01CAAC58 MOV X0, X21
	0x01CAAC5C BL 0x208FDE8
	0x01CAAC60 MOV X22, X0
	0x01CAAC64 LDR X0, [X24]
	0x01CAAC68 LDR W8, [X0 + 0xE0]
	0x01CAAC6C CBNZ W8, 0x1CAAC74
	0x01CAAC70 BL 0x1B6E8F8
	0x01CAAC74 MOV X0, X23
	0x01CAAC78 MOV X1, X31
	0x01CAAC7C MOV X2, X31
	0x01CAAC80 BL 0x3A9D6EC
	0x01CAAC84 TBZ X0, 0x0, 0x1CAAE4C
	0x01CAAC88 LDR X0, [X24]
	0x01CAAC8C LDR W8, [X0 + 0xE0]
	0x01CAAC90 CBNZ W8, 0x1CAAC98
	0x01CAAC94 BL 0x1B6E8F8
	0x01CAAC98 MOV X0, X22
	0x01CAAC9C MOV X1, X31
	0x01CAACA0 MOV X2, X31
	0x01CAACA4 BL 0x3A9D6EC
	0x01CAACA8 TBZ X0, 0x0, 0x1CAAE4C
	0x01CAACAC CBZ X23, 0x1CAB0A0
	0x01CAACB0 LDR X25, [X23 + 0xC8]
	0x01CAACB4 CBZ X25, 0x1CAB0A4
	0x01CAACB8 LDR X8, [X25 + 0x18]
	0x01CAACBC CMP W8, 0x1
	0x01CAACC0 B.LT 0x1CAAE40
	0x01CAACC4 MOV W24, W31
	0x01CAACC8 MOV X26, X31
	0x01CAACCC AND X8, X8, 0x0
	0x01CAACD0 ADD X27, X25, 0x20
	0x01CAACD4 CMP X26, W8, UXTW
	0x01CAACD8 B.CS 0x1CAB090
	0x01CAACDC CBZ X22, 0x1CAB08C
	0x01CAACE0 LDRB W8, [X22 + 0x8C]
	0x01CAACE4 LDR X23, [X27, X26, LSL #3]
	0x01CAACE8 CBZ W8, 0x1CAAD34
	0x01CAACEC CBZ X23, 0x1CAB094
	0x01CAACF0 LDR W8, [X23 + 0x80]
	0x01CAACF4 CMP W8, 0x2
	0x01CAACF8 B.NE 0x1CAAD64
	0x01CAACFC MOV X0, X23
	0x01CAAD00 MOV X1, X31
	0x01CAAD04 BL 0x1C98D1C
	0x01CAAD08 STR X0, [X31 + 0x98]
	0x01CAAD0C ADD X0, X31, 0x98
	0x01CAAD10 MOV X1, X31
	0x01CAAD14 BL 0x1D680F0
	0x01CAAD18 TBNZ X0, 0x0, 0x1CAAD64
	0x01CAAD1C LDR X8, [X22 + 0x40]
	0x01CAAD20 CBZ X8, 0x1CAAD80
	0x01CAAD24 LDR X8, [X8 + 0x20]
	0x01CAAD28 CBZ X8, 0x1CAAD80
	0x01CAAD2C LDR W1, [X8]
	0x01CAAD30 B 0x1CAAD84
	0x01CAAD34 CBZ X23, 0x1CAB098
	0x01CAAD38 LDR W8, [X23 + 0x80]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X21, 0x257A000
	008 Move X20, 0x22A5000
	009 Move W8, [X21+1144]
	010 Move X20, [X20+448]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x22A5000
	017 Move X0, [X0+1800]
	018 Call 0x1B6F7F0
	019 Move X0, 0x22A5000
	020 Move X0, [X0+448]
	021 Call 0x1B6F7F0
	022 Move X0, 0x22A5000
	023 Move X0, [X0+1808]
	024 Call 0x1B6F7F0
	025 Move W8, 1
	026 Move [X21+1144], W8
	027 Move W1, [X19+168]
	028 Move X22, 0x22A5000
	029 Move X21, 0x22A5000
	030 Move X22, [X22+1808]
	031 Move X21, [X21+1800]
	032 Move X0, X19
	033 Call InventoryBag.set_isOpen, X0, X1
	034 Add X8, X31, 32
	035 Move X0, X19
	036 Call InventoryBag.get_containedObjects, X0
	037 Move V0, [X31+2]
	038 Move X8, [X31+48]
	039 Move X0, [X20]
	040 Move [X31], V0
	041 Move [X31+16], X8
	042 Move W8, [X0+224]
	043 Move X20, [X19+176]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1B6F8F8
	047 Move X2, [X22]
	048 Move V0, [X31]
	049 Move X8, [X31+16]
	050 Move X3, [X21]
	051 Add X0, X31, 32
	052 Move X1, X20
	053 Move [X31+2], V0
	054 Move [X31+48], X8
	055 Call NetworkBehaviourUtils.InitializeNetworkArray, X0, X1, X2
	056 Move W1, [X19+184]
	057 Move X0, X19
	058 Call InventoryBag.set_emptyingTimer, X0, X1
	059 Move X20, [X31+96]
	060 Move X19, [X31+104]
	061 Move X22, [X31+80]
	062 Move X21, [X31+88]
	063 Move X30, [X31+64]
	064 Add X31, X31, 112
	065 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01CAAD3C CMP W8, 0x2
	0x01CAAD40 B.EQ 0x1CAAD64
	0x01CAAD44 MOV X0, X23
	0x01CAAD48 MOV X1, X31
	0x01CAAD4C BL 0x1C98D1C
	0x01CAAD50 STR X0, [X31 + 0x98]
	0x01CAAD54 ADD X0, X31, 0x98
	0x01CAAD58 MOV X1, X31
	0x01CAAD5C BL 0x1D680F0
	0x01CAAD60 TBZ X0, 0x0, 0x1CAADB0
	0x01CAAD64 MOV W28, W24
	0x01CAAD68 LDR W8, [X25 + 0x18]
	0x01CAAD6C ADD X26, X26, 0x1
	0x01CAAD70 MOV W24, W28
	0x01CAAD74 CMP X26, W8, SXTW
	0x01CAAD78 B.LT 0x1CAACD4
	0x01CAAD7C B 0x1CAAE44
	0x01CAAD80 MOV X1, X31
	0x01CAAD84 LDR W8, [X22 + 0x68]
	0x01CAAD88 MOVZ W28, 0x1
	0x01CAAD8C BFM X1, X8, 0x20, 0x1F
	0x01CAAD90 MOVZ W3, 0x1
	0x01CAAD94 MOV X0, X23
	0x01CAAD98 MOV W2, W31
	0x01CAAD9C MOV X4, X31
	0x01CAADA0 MOV X5, X31
	0x01CAADA4 MOV X6, X31
	0x01CAADA8 BL 0x1C99804
	0x01CAADAC B 0x1CAAD68
	0x01CAADB0 LDR X8, [X22 + 0x40]
	0x01CAADB4 CBZ X8, 0x1CAADC8
	0x01CAADB8 LDR X8, [X8 + 0x20]
	0x01CAADBC CBZ X8, 0x1CAADC8
	0x01CAADC0 LDR W1, [X8]
	0x01CAADC4 B 0x1CAADCC
	0x01CAADC8 MOV X1, X31
	0x01CAADCC LDR W8, [X22 + 0x68]
	0x01CAADD0 MOVZ W28, 0x1
	0x01CAADD4 BFM X1, X8, 0x20, 0x1F
	0x01CAADD8 MOVZ W3, 0x1
	0x01CAADDC MOV X0, X23
	0x01CAADE0 MOV W2, W31
	0x01CAADE4 MOV X4, X31
	0x01CAADE8 MOV X5, X31
	0x01CAADEC MOV X6, X31
	0x01CAADF0 BL 0x1C99804
	0x01CAADF4 B 0x1CAAD68
	0x01CAADF8 MOV X0, X19
	0x01CAADFC BL 0x1CAB3BC

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0x257A000
	007 Move X20, 0x22A5000
	008 Move W8, [X21+1145]
	009 Move X20, [X20+448]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x22A5000
	016 Move X0, [X0+1816]
	017 Call 0x1B6F7F0
	018 Move X0, 0x22A5000
	019 Move X0, [X0+448]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X21+1145], W8
	023 Move X21, 0x22A5000
	024 Move X21, [X21+1816]
	025 Move X0, X19
	026 Call InventoryBag.get_isOpen, X0
	027 And W8, W0, 1
	028 Move [X19+168], W8
	029 Add X8, X31, 32
	030 Move X0, X19
	031 Call InventoryBag.get_containedObjects, X0
	032 Move V0, [X31+2]
	033 Move X8, [X31+48]
	034 Move X0, [X20]
	035 Move [X31], V0
	036 Move [X31+16], X8
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1B6F8F8
	041 Move V0, [X31]
	042 Move X8, [X31+16]
	043 Move X2, [X21]
	044 Add X1, X19, 176
	045 Add X0, X31, 32
	046 Move [X31+2], V0
	047 Move [X31+48], X8
	048 Call NetworkBehaviourUtils.CopyFromNetworkArray, X0, X1
	049 Move X0, X19
	050 Call InventoryBag.get_emptyingTimer, X0
	051 Move [X19+184], W0
	052 Move X20, [X31+80]
	053 Move X19, [X31+88]
	054 Move X30, [X31+64]
	055 Move X21, [X31+72]
	056 Add X31, X31, 96
	057 Return 

Method: System.Void RPC_ToggleOnOff@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01CAAE00 LDR X20, [X19 + 0x48]
	0x01CAAE04 MOV X0, X19
	0x01CAAE08 MOV X1, X31
	0x01CAAE0C BL 0x3A9B084
	0x01CAAE10 CBZ X0, 0x1CAB084
	0x01CAAE14 MOV X1, X31
	0x01CAAE18 BL 0x3AA7658
	0x01CAAE1C FMOV S3, 1
	0x01CAAE20 MOV X0, X20
	0x01CAAE24 MOV X1, X31
	0x01CAAE28 BL 0x1CC181C
	0x01CAAE2C B 0x1CAB064
	0x01CAAE30 LDR W0, [X20 + 0x24]
	0x01CAAE34 MOV X1, X31
	0x01CAAE38 BL 0x1CD2B3C
	0x01CAAE3C B 0x1CAAEFC
	0x01CAAE40 MOV W28, W31
	0x01CAAE44 TBNZ X28, 0x0, 0x1CAAEA8
	0x01CAAE48 CBZ X21, 0x1CAB084
	0x01CAAE4C ADRP X8, 0x22A4000
	0x01CAAE50 LDR X8, [X8 + 0x7A8]
	0x01CAAE54 ADD X1, X31, 0xA8
	0x01CAAE58 MOV X0, X21
	0x01CAAE5C LDR X2, [X8]
	0x01CAAE60 BL 0x2090EE4
	0x01CAAE64 TBZ X0, 0x0, 0x1CAAEA8
	0x01CAAE68 LDR X21, [X31 + 0xA8]
	0x01CAAE6C MOV X0, X19
	0x01CAAE70 MOV X1, X31
	0x01CAAE74 BL 0x3A9B084
	0x01CAAE78 CBZ X0, 0x1CAB084
	0x01CAAE7C MOV X1, X31
	0x01CAAE80 BL 0x3AA7AD0
	0x01CAAE84 CBZ X21, 0x1CAB084
	0x01CAAE88 FMOV S3, 3
	0x01CAAE8C FMUL S2, S2, S3
	0x01CAAE90 FMUL S1, S1, S3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x257A000
	005 Move W8, [X20+1146]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22A5000
	012 Move X0, [X0+1824]
	013 Call 0x1B6F7F0
	014 Move W8, 1
	015 Move [X20+1146], W8
	016 Move W0, 1
	017 Move X1, X31
	018 Move W20, 1
	019 Call Assert.Check, X0
	020 Compare X19, 0
	021 JumpIfEqual {42}
	022 Move X9, 0x22A5000
	023 Move X9, [X9+1824]
	024 Move [X19+88], W20
	025 Move X8, [X19]
	026 Move X1, [X9]
	027 Move W10, [X8+304]
	028 Move W9, [X1+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X8+200]
	031 Add X8, X8, X9
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Call InventoryBag.RPC_ToggleOnOff, X0
	039 Return 
	040 Move X0, X19
	041 Call 0x1B6FCDC
	042 Call 0x1B6FA1C

