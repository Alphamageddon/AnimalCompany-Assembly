Type: AnimalCompany.InventoryBag

Method: System.Boolean get_isOpen()

Disassembly:
	0x01D9C670 BL 0x1C16CF4
	0x01D9C674 ADRP X0, 0x2357000
	0x01D9C678 LDR X0, [X0 + 0x598]
	0x01D9C67C BL 0x1C16CF4
	0x01D9C680 ADRP X0, 0x2357000
	0x01D9C684 LDR X0, [X0 + 0x5F8]
	0x01D9C688 BL 0x1C16CF4
	0x01D9C68C MOVZ W8, 0x1
	0x01D9C690 STRB W8, [X20 + 0xA4C]
	0x01D9C694 ADRP X25, 0x2357000
	0x01D9C698 LDR X25, [X25 + 0x598]
	0x01D9C69C ADD X8, X31, 0x8
	0x01D9C6A0 MOV X0, X19
	0x01D9C6A4 STP X31, X31, [X31 + 0x40]
	0x01D9C6A8 STR X31, [X31 + 0x50]
	0x01D9C6AC STR X31, [X31 + 0x68]
	0x01D9C6B0 STR W31, [X31 + 0x3C]
	0x01D9C6B4 BL 0x1D9B73C
	0x01D9C6B8 LDUR V0, [X31 + 0x8]
	0x01D9C6BC LDR X9, [X31 + 0x18]
	0x01D9C6C0 MOV W20, W31
	0x01D9C6C4 STR V0, [X31 + 0x4]
	0x01D9C6C8 LDR W8, [X31 + 0x48]
	0x01D9C6CC STR V0, [X31 + 0x2]
	0x01D9C6D0 STR X9, [X31 + 0x50]
	0x01D9C6D4 CMP W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Move X0, 0x2358000
	013 Move X0, [X0+1456]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x235B000
	018 Move X0, [X0+4080]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call InvalidOperationException..ctor, X0, X1
	024 Move X0, 0x235B000
	025 Move X0, [X0+4088]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Void set_isOpen(System.Boolean value)

Disassembly:
	0x01D9C6D8 B.LT 0x1D9C81C
	0x01D9C6DC ADRP X23, 0x235B000
	0x01D9C6E0 ADRP X24, 0x235A000
	0x01D9C6E4 ADRP X26, 0x235A000
	0x01D9C6E8 LDR X23, [X23 + 0x70]
	0x01D9C6EC LDR X24, [X24 + 0x398]
	0x01D9C6F0 LDR X26, [X26 + 0xB98]
	0x01D9C6F4 MOV W21, W31
	0x01D9C6F8 FMOV S8, 5
	0x01D9C6FC ADD X8, X31, 0x20
	0x01D9C700 MOV X0, X19
	0x01D9C704 BL 0x1D9B73C
	0x01D9C708 LDR V0, [X31 + 0x2]
	0x01D9C70C LDR X8, [X31 + 0x30]
	0x01D9C710 LDR X2, [X23]
	0x01D9C714 ADD X0, X31, 0x40
	0x01D9C718 MOV W1, W21
	0x01D9C71C STR V0, [X31 + 0x4]
	0x01D9C720 STR X8, [X31 + 0x50]
	0x01D9C724 BL 0x240C380
	0x01D9C728 LDR X8, [X24]
	0x01D9C72C MOV X22, X0
	0x01D9C730 LDR W9, [X8 + 0xE0]
	0x01D9C734 CBZ W9, 0x1D9C740
	0x01D9C738 CBNZ W22, 0x1D9C74C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {11}
	006 And W9, W1, 1
	007 Move [X8], W9
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0x2358000
	012 Move X0, [X0+1456]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0x235B000
	017 Move X0, [X0+4080]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call InvalidOperationException..ctor, X0, X1
	023 Move X0, 0x235C000
	024 Move X0, [X0]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: Fusion.NetworkArray`1<Fusion.NetworkId> get_containedObjects()

Disassembly:
	0x01D9C73C B 0x1D9C7E0
	0x01D9C740 MOV X0, X8
	0x01D9C744 BL 0x1C16DFC
	0x01D9C748 CBZ W22, 0x1D9C7E0
	0x01D9C74C LDR X0, [X19 + 0x38]
	0x01D9C750 CBZ X0, 0x1D9CAD4
	0x01D9C754 AND X1, X22, 0x0
	0x01D9C758 MOV X2, X31
	0x01D9C75C BL 0x1EA3204
	0x01D9C760 LDR X8, [X25]
	0x01D9C764 MOV X22, X0
	0x01D9C768 LDR W9, [X8 + 0xE0]
	0x01D9C76C CBNZ W9, 0x1D9C778
	0x01D9C770 MOV X0, X8
	0x01D9C774 BL 0x1C16DFC
	0x01D9C778 MOV X0, X22
	0x01D9C77C MOV X1, X31
	0x01D9C780 MOV X2, X31
	0x01D9C784 ADD W20, W20, 0x1
	0x01D9C788 BL 0x3C3883C
	0x01D9C78C TBNZ X0, 0x0, 0x1D9C7E0
	0x01D9C790 CBZ X22, 0x1D9CAD4
	0x01D9C794 LDR X1, [X26]
	0x01D9C798 MOV X0, X22
	0x01D9C79C BL 0x21A3894
	0x01D9C7A0 LDR X8, [X25]
	0x01D9C7A4 MOV X22, X0
	0x01D9C7A8 LDR W9, [X8 + 0xE0]
	0x01D9C7AC CBNZ W9, 0x1D9C7B8
	0x01D9C7B0 MOV X0, X8
	0x01D9C7B4 BL 0x1C16DFC
	0x01D9C7B8 MOV X0, X22
	0x01D9C7BC MOV X1, X31
	0x01D9C7C0 MOV X2, X31
	0x01D9C7C4 BL 0x3C354F8
	0x01D9C7C8 TBZ X0, 0x0, 0x1D9C7E0
	0x01D9C7CC CBZ X22, 0x1D9CAD4
	0x01D9C7D0 MOV X0, X22
	0x01D9C7D4 MOV X1, X31
	0x01D9C7D8 BL 0x3C8EBE8
	0x01D9C7DC FADD S8, S8, S0
	0x01D9C7E0 ADD X8, X31, 0x8
	0x01D9C7E4 MOV X0, X19
	0x01D9C7E8 ADD W21, W21, 0x1
	0x01D9C7EC BL 0x1D9B73C
	0x01D9C7F0 LDUR V0, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x263D000
	006 Move W9, [X21+2623]
	007 Move X20, X0
	008 Move X19, X8
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x235C000
	014 Move X0, [X0+8]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2623], W8
	018 Move X20, [X20+80]
	019 Compare X20, 0
	020 JumpIfEqual {39}
	021 Move X21, 0x235C000
	022 Move X21, [X21+8]
	023 Move X0, X31
	024 Call ReaderWriter@Fusion_NetworkId.GetInstance
	025 Move X3, X0
	026 Move [X19+8], X31
	027 Move [X19+16], X31
	028 Move X4, [X21]
	029 Add X1, X20, 4
	030 Move [X19], X31
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move W2, 10
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call NetworkArray`1<NetworkId>..ctor, X0, X1, X2, X3
	038 Return X0
	039 Move X0, 0x2358000
	040 Move X0, [X0+1456]
	041 Call 0x1C17D08
	042 Call 0x1C17F10
	043 Move X19, X0
	044 Move X0, 0x235C000
	045 Move X0, [X0+16]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call InvalidOperationException..ctor, X0, X1
	051 Move X0, 0x235C000
	052 Move X0, [X0+24]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X19
	056 Call 0x1C17DEC

Method: Fusion.TickTimer get_emptyingTimer()

Disassembly:
	0x01D9C7F4 LDR X9, [X31 + 0x18]
	0x01D9C7F8 STR V0, [X31 + 0x4]
	0x01D9C7FC LDR W8, [X31 + 0x48]
	0x01D9C800 STR V0, [X31 + 0x2]
	0x01D9C804 STR X9, [X31 + 0x50]
	0x01D9C808 CMP W21, W8
	0x01D9C80C B.LT 0x1D9C6FC
	0x01D9C810 CMP W20, 0x9
	0x01D9C814 B.LE 0x1D9C820
	0x01D9C818 B 0x1D9C9E8
	0x01D9C81C FMOV S8, 5
	0x01D9C820 LDR X0, [X19 + 0x90]
	0x01D9C824 CBZ X0, 0x1D9CAD4
	0x01D9C828 ADRP X22, 0x2357000
	0x01D9C82C ADRP X21, 0x2357000
	0x01D9C830 LDR X22, [X22 + 0x5D8]
	0x01D9C834 LDR X21, [X21 + 0x5F8]
	0x01D9C838 MOV X1, X31
	0x01D9C83C BL 0x3C3F58C
	0x01D9C840 LDR X0, [X22]
	0x01D9C844 MOV V10.16B, V0.16B
	0x01D9C848 MOV V11.16B, V1.16B
	0x01D9C84C MOV V12.16B, V2.16B
	0x01D9C850 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move W0, [X8+44]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0x2358000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x235C000
	016 Move X0, [X0+32]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x235C000
	023 Move X0, [X0+40]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void set_emptyingTimer(Fusion.TickTimer value)

Disassembly:
	0x01D9C854 CBNZ W8, 0x1D9C860
	0x01D9C858 BL 0x1C16DFC
	0x01D9C85C LDR X0, [X22]
	0x01D9C860 LDR X8, [X0 + 0xB8]
	0x01D9C864 MOV X1, X31
	0x01D9C868 LDR W0, [X8 + 0x10]
	0x01D9C86C BL 0x3C35CB8
	0x01D9C870 LDR X8, [X21]
	0x01D9C874 MOV W21, W0
	0x01D9C878 LDR W9, [X8 + 0xE0]
	0x01D9C87C CBNZ W9, 0x1D9C888
	0x01D9C880 MOV X0, X8
	0x01D9C884 BL 0x1C16DFC
	0x01D9C888 ADRP X8, 0xFFFFFFFFFED4E000
	0x01D9C88C LDR V9, [X8 + 0xBC]
	0x01D9C890 MOV V0.16B, V10.16B
	0x01D9C894 MOV V1.16B, V11.16B
	0x01D9C898 MOV V2.16B, V12.16B
	0x01D9C89C MOV V3.16B, V9.16B
	0x01D9C8A0 MOV W0, W21
	0x01D9C8A4 MOV X1, X31
	0x01D9C8A8 BL 0x3C8D090
	0x01D9C8AC CBZ X0, 0x1D9CAD4
	0x01D9C8B0 LDR W8, [X0 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+80]
	004 Compare X8, 0
	005 JumpIfEqual {10}
	006 Move [X8+44], W1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 
	010 Move X0, 0x2358000
	011 Move X0, [X0+1456]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0x235C000
	016 Move X0, [X0+32]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call InvalidOperationException..ctor, X0, X1
	022 Move X0, 0x235C000
	023 Move X0, [X0+48]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void Awake()

Disassembly:
	0x01D9C8B4 MOV X21, X0
	0x01D9C8B8 CMP W8, 0x1
	0x01D9C8BC B.LT 0x1D9C9DC
	0x01D9C8C0 ADRP X27, 0x235A000
	0x01D9C8C4 LDR X27, [X27 + 0xBB8]
	0x01D9C8C8 MOV W26, W31
	0x01D9C8CC CMP W26, W8
	0x01D9C8D0 B.CS 0x1D9CAD8
	0x01D9C8D4 ADD X8, X21, W26, 0x3, SXTW
	0x01D9C8D8 LDR X0, [X8 + 0x20]
	0x01D9C8DC CBZ X0, 0x1D9CAD4
	0x01D9C8E0 MOV X1, X31
	0x01D9C8E4 BL 0x3C8E82C
	0x01D9C8E8 LDR X8, [X25]
	0x01D9C8EC MOV X22, X0
	0x01D9C8F0 LDR W9, [X8 + 0xE0]
	0x01D9C8F4 CBNZ W9, 0x1D9C900
	0x01D9C8F8 MOV X0, X8
	0x01D9C8FC BL 0x1C16DFC
	0x01D9C900 MOV X0, X22
	0x01D9C904 MOV X1, X31
	0x01D9C908 MOV X2, X31
	0x01D9C90C BL 0x3C354F8
	0x01D9C910 TBZ X0, 0x0, 0x1D9C9CC
	0x01D9C914 CBZ X22, 0x1D9CAD4
	0x01D9C918 MOV X0, X22
	0x01D9C91C MOV X1, X31
	0x01D9C920 BL 0x3C32ECC
	0x01D9C924 MOV X23, X0
	0x01D9C928 MOV X0, X19
	0x01D9C92C MOV X1, X31
	0x01D9C930 BL 0x3C32ECC
	0x01D9C934 LDR X8, [X25]
	0x01D9C938 MOV X24, X0
	0x01D9C93C LDR W9, [X8 + 0xE0]
	0x01D9C940 CBNZ W9, 0x1D9C94C
	0x01D9C944 MOV X0, X8
	0x01D9C948 BL 0x1C16DFC
	0x01D9C94C MOV X0, X23
	0x01D9C950 MOV X1, X24
	0x01D9C954 MOV X2, X31
	0x01D9C958 BL 0x3C354F8
	0x01D9C95C TBZ X0, 0x0, 0x1D9C9CC
	0x01D9C960 LDR X1, [X27]
	0x01D9C964 MOV X0, X22
	0x01D9C968 BL 0x21A3894
	0x01D9C96C LDR X8, [X25]
	0x01D9C970 MOV X23, X0
	0x01D9C974 LDR W9, [X8 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x263D000
	008 Move W8, [X20+2624]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2359000
	015 Move X0, [X0+3696]
	016 Call 0x1C17CF4
	017 Move X0, 0x235C000
	018 Move X0, [X0+56]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2624], W8
	022 Move X22, [X19+128]
	023 Compare X22, 0
	024 JumpIfEqual {58}
	025 Move X23, 0x2359000
	026 Move X23, [X23+3696]
	027 Move X21, 0x235C000
	028 Move X20, [X22+464]
	029 Move X0, [X23]
	030 Move X21, [X21+56]
	031 Call 0x1C17F10
	032 Move X2, [X21]
	033 Move X1, X19
	034 Move X3, X31
	035 Move X21, X0
	036 Call Action..ctor, X0, X1, X2
	037 Move X0, X20
	038 Move X1, X21
	039 Move X2, X31
	040 Call Delegate.Combine, X0, X1
	041 Compare X0, 0
	042 JumpIfEqual {50}
	043 Move X1, [X23]
	044 Move X8, [X0]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move [X22+464], X0
	047 Move X8, [X0]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Call 0x1C181E0
	050 Move [X22+464], X0
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Return 
	058 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x01D9C978 CBNZ W9, 0x1D9C984
	0x01D9C97C MOV X0, X8
	0x01D9C980 BL 0x1C16DFC
	0x01D9C984 MOV X0, X23
	0x01D9C988 MOV X1, X31
	0x01D9C98C MOV X2, X31
	0x01D9C990 BL 0x3C354F8
	0x01D9C994 TBZ X0, 0x0, 0x1D9C9CC
	0x01D9C998 CBZ X23, 0x1D9CAD4
	0x01D9C99C MOV X0, X23
	0x01D9C9A0 MOV X1, X31
	0x01D9C9A4 BL 0x1D8EDF0
	0x01D9C9A8 TBZ X0, 0x0, 0x1D9C9CC
	0x01D9C9AC MOV X0, X23
	0x01D9C9B0 MOV X1, X31
	0x01D9C9B4 BL 0x1D896B8
	0x01D9C9B8 STR X0, [X31 + 0x68]
	0x01D9C9BC ADD X0, X31, 0x68
	0x01D9C9C0 MOV X1, X31
	0x01D9C9C4 BL 0x1E74DE4
	0x01D9C9C8 TBZ X0, 0x0, 0x1D9CA10
	0x01D9C9CC LDR W8, [X21 + 0x18]
	0x01D9C9D0 ADD W26, W26, 0x1
	0x01D9C9D4 CMP W26, W8
	0x01D9C9D8 B.LT 0x1D9C8CC
	0x01D9C9DC MOV X0, X19
	0x01D9C9E0 MOV V0.16B, V8.16B
	0x01D9C9E4 BL 0x1D9D328
	0x01D9C9E8 LDP X20, X19, [X31 + 0xD0]
	0x01D9C9EC LDP X22, X21, [X31 + 0xC0]
	0x01D9C9F0 LDP X24, X23, [X31 + 0xB0]
	0x01D9C9F4 LDP X26, X25, [X31 + 0xA0]
	0x01D9C9F8 LDP X30, X27, [X31 + 0x90]
	0x01D9C9FC LDP D9, D8, [X31 + 0x80]
	0x01D9CA00 LDP D11, D10, [X31 + 0x70]
	0x01D9CA04 LDR V12, [X31 + 0x60]
	0x01D9CA08 ADD X31, X31, 0xE0
	0x01D9CA0C RET
	0x01D9CA10 ADD X8, X31, 0x20
	0x01D9CA14 MOV X0, X19
	0x01D9CA18 BL 0x1D9B73C
	0x01D9CA1C LDR V0, [X31 + 0x2]
	0x01D9CA20 LDR X8, [X31 + 0x30]
	0x01D9CA24 STR V0, [X31 + 0x4]
	0x01D9CA28 STR X8, [X31 + 0x50]
	0x01D9CA2C LDR X8, [X23 + 0x40]
	0x01D9CA30 CBZ X8, 0x1D9CAD4
	0x01D9CA34 LDR X8, [X8 + 0x20]
	0x01D9CA38 CBZ X8, 0x1D9CA44
	0x01D9CA3C LDR W2, [X8]
	0x01D9CA40 B 0x1D9CA48
	0x01D9CA44 MOV X2, X31
	0x01D9CA48 ADRP X8, 0x235B000
	0x01D9CA4C LDR X8, [X8 + 0x78]
	0x01D9CA50 ADD X0, X31, 0x40
	0x01D9CA54 MOV W1, W20
	0x01D9CA58 LDR X3, [X8]
	0x01D9CA5C BL 0x240C3CC
	0x01D9CA60 MOV X0, X22
	0x01D9CA64 MOV X1, X31
	0x01D9CA68 BL 0x3C8EBE8
	0x01D9CA6C LDR X8, [X19 + 0x40]
	0x01D9CA70 MOV V10.16B, V0.16B
	0x01D9CA74 CBZ X8, 0x1D9CA88
	0x01D9CA78 LDR X8, [X8 + 0x20]
	0x01D9CA7C CBZ X8, 0x1D9CA88
	0x01D9CA80 LDR W1, [X8]
	0x01D9CA84 B 0x1D9CA8C
	0x01D9CA88 MOV X1, X31
	0x01D9CA8C LDR W8, [X19 + 0x68]
	0x01D9CA90 MOV X0, X23
	0x01D9CA94 MOV X2, X31
	0x01D9CA98 BFM X1, X8, 0x20, 0x1F
	0x01D9CA9C BL 0x1D91A08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x263D000
	008 Move X21, 0x235B000
	009 Move W8, [X20+2625]
	010 Move X21, [X21+2680]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x2359000
	017 Move X0, [X0+3696]
	018 Call 0x1C17CF4
	019 Move X0, 0x235C000
	020 Move X0, [X0+56]
	021 Call 0x1C17CF4
	022 Move X0, 0x235A000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move X0, 0x235B000
	026 Move X0, [X0+2680]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2625], W8
	030 Move X0, [X21]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Compare X19, 0
	036 JumpIfEqual {87}
	037 Move W8, [X19+48]
	038 Move X22, [X19+128]
	039 Or W8, W8, 8
	040 Move [X19+48], W8
	041 Compare X22, 0
	042 JumpIfEqual {87}
	043 Move X23, 0x2359000
	044 Move X23, [X23+3696]
	045 Move X21, 0x235C000
	046 Move X20, [X22+464]
	047 Move X0, [X23]
	048 Move X21, [X21+56]
	049 Call 0x1C17F10
	050 Move X2, [X21]
	051 Move X1, X19
	052 Move X3, X31
	053 Move X21, X0
	054 Call Action..ctor, X0, X1, X2
	055 Move X0, X20
	056 Move X1, X21
	057 Move X2, X31
	058 Call Delegate.Remove, X0, X1
	059 Compare X0, 0
	060 JumpIfEqual {68}
	061 Move X1, [X23]
	062 Move X8, [X0]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move [X22+464], X0
	065 Move X8, [X0]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Call 0x1C181E0
	068 Move [X22+464], X0
	069 Move X8, 0x235A000
	070 Move X8, [X8+1448]
	071 Move W19, [X19+188]
	072 Move X0, [X8]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move W0, W19
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X1, X31
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Call LeanTween.cancel, X0
	086 Return 
	087 Call 0x1C17F20

Method: System.Single GetFilledAmount()

Disassembly:
	0x01D9CAA0 LDR X0, [X19 + 0x80]
	0x01D9CAA4 CBZ X0, 0x1D9CAD4
	0x01D9CAA8 ADD X1, X31, 0x3C
	0x01D9CAAC MOV X2, X31
	0x01D9CAB0 FADD S8, S8, S10
	0x01D9CAB4 BL 0x1D8EF8C
	0x01D9CAB8 TBZ X0, 0x0, 0x1D9C9DC
	0x01D9CABC LDR W0, [X31 + 0x3C]
	0x01D9CAC0 FMOV S0, 0.5
	0x01D9CAC4 MOV V1.16B, V9.16B
	0x01D9CAC8 MOV X1, X31
	0x01D9CACC BL 0x1DC2324
	0x01D9CAD0 B 0x1D9C9DC
	0x01D9CAD4 BL 0x1C16F20
	0x01D9CAD8 BL 0x1C16F28
	0x01D9CADC SUB X31, X31, 0xB0
	0x01D9CAE0 STR D8, [X31 + 0x60]
	0x01D9CAE4 STR X30, [X31 + 0x68]
	0x01D9CAE8 STP X26, X25, [X31 + 0x70]
	0x01D9CAEC STP X24, X23, [X31 + 0x80]
	0x01D9CAF0 STP X22, X21, [X31 + 0x90]
	0x01D9CAF4 STP X20, X19, [X31 + 0xA0]
	0x01D9CAF8 ADRP X20, 0x263C000
	0x01D9CAFC LDRB W8, [X20 + 0xA4B]
	0x01D9CB00 MOV X19, X0
	0x01D9CB04 TBNZ X8, 0x0, 0x1D9CB64
	0x01D9CB08 ADRP X0, 0x235A000
	0x01D9CB0C LDR X0, [X0 + 0xBB8]
	0x01D9CB10 BL 0x1C16CF4
	0x01D9CB14 ADRP X0, 0x235A000
	0x01D9CB18 LDR X0, [X0 + 0xB98]
	0x01D9CB1C BL 0x1C16CF4
	0x01D9CB20 ADRP X0, 0x235B000
	0x01D9CB24 LDR X0, [X0 + 0x70]
	0x01D9CB28 BL 0x1C16CF4
	0x01D9CB2C ADRP X0, 0x235B000
	0x01D9CB30 LDR X0, [X0 + 0x78]
	0x01D9CB34 BL 0x1C16CF4
	0x01D9CB38 ADRP X0, 0x235B000
	0x01D9CB3C LDR X0, [X0 + 0x48]
	0x01D9CB40 BL 0x1C16CF4
	0x01D9CB44 ADRP X0, 0x235A000
	0x01D9CB48 LDR X0, [X0 + 0x398]
	0x01D9CB4C BL 0x1C16CF4
	0x01D9CB50 ADRP X0, 0x2357000
	0x01D9CB54 LDR X0, [X0 + 0x598]
	0x01D9CB58 BL 0x1C16CF4
	0x01D9CB5C MOVZ W8, 0x1
	0x01D9CB60 STRB W8, [X20 + 0xA4B]
	0x01D9CB64 ADD X8, X31, 0x8
	0x01D9CB68 MOV X0, X19
	0x01D9CB6C STP X31, X31, [X31 + 0x40]
	0x01D9CB70 STR X31, [X31 + 0x50]
	0x01D9CB74 STR W31, [X31 + 0x3C]
	0x01D9CB78 BL 0x1D9B73C
	0x01D9CB7C LDUR V0, [X31 + 0x8]
	0x01D9CB80 LDR X9, [X31 + 0x18]
	0x01D9CB84 STR V0, [X31 + 0x4]
	0x01D9CB88 LDR W8, [X31 + 0x48]
	0x01D9CB8C STR V0, [X31 + 0x2]
	0x01D9CB90 STR X9, [X31 + 0x50]
	0x01D9CB94 CMP W8, 0x1
	0x01D9CB98 B.LT 0x1D9CF00
	0x01D9CB9C ADRP X25, 0x235B000
	0x01D9CBA0 ADRP X26, 0x235A000
	0x01D9CBA4 ADRP X23, 0x2357000
	0x01D9CBA8 ADRP X24, 0x235A000
	0x01D9CBAC LDR X25, [X25 + 0x70]
	0x01D9CBB0 LDR X26, [X26 + 0x398]
	0x01D9CBB4 LDR X23, [X23 + 0x598]
	0x01D9CBB8 LDR X24, [X24 + 0xB98]
	0x01D9CBBC MOV W21, W31
	0x01D9CBC0 MOVN W20, 0x0
	0x01D9CBC4 FMOV S8, 5
	0x01D9CBC8 ADD X8, X31, 0x20

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+104], X23
	004 Move [X31+112], X22
	005 Move [X31+120], X21
	006 Move [X31+128], X20
	007 Move [X31+136], X19
	008 Move X20, 0x263D000
	009 Move W8, [X20+2626]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x235C000
	016 Move X0, [X0+64]
	017 Call 0x1C17CF4
	018 Move X0, 0x235C000
	019 Move X0, [X0+72]
	020 Call 0x1C17CF4
	021 Move X0, 0x235B000
	022 Move X0, [X0+920]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2626], W8
	026 Add X8, X31, 8
	027 Move X0, X19
	028 Move [X31+64], X31
	029 Move [X31+72], X31
	030 Move [X31+80], X31
	031 Call InventoryBag.get_containedObjects, X0
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 Move X9, [X31+24]
	034 Move W20, W31
	035 Move [X31+4], V0
	036 Move W8, [X31+72]
	037 Move [X31+2], V0
	038 Move [X31+80], X9
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X22, 0x235C000
	041 Move X23, 0x235B000
	042 Move X22, [X22+64]
	043 Move X23, [X23+920]
	044 Add X8, X31, 32
	045 Move X0, X19
	046 Call InventoryBag.get_containedObjects, X0
	047 Move V0, [X31+2]
	048 Move X8, [X31+48]
	049 Move X2, [X22]
	050 Add X0, X31, 64
	051 Move W1, W20
	052 Move [X31+4], V0
	053 Move [X31+80], X8
	054 Call NetworkArray`1<NetworkId>.get_Item, X0, X1
	055 Move X8, [X23]
	056 Move X21, X0
	057 Move W9, [X8+224]
	058 Compare W9, 0
	059 JumpIfNotEqual {62}
	060 Move X0, X8
	061 Call 0x1C17DFC
	062 Compare W21, 0
	063 JumpIfEqual {75}
	064 Add X8, X31, 8
	065 Move X0, X19
	066 Add W20, W20, 1
	067 Call InventoryBag.get_containedObjects, X0
	068 NotImplemented "Instruction LDUR not yet implemented."
	069 Move X9, [X31+24]
	070 Move [X31+4], V0
	071 Move W8, [X31+72]
	072 Move [X31+2], V0
	073 Move [X31+80], X9
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction SCVTF not yet implemented."
	076 Move X20, [X31+128]
	077 Move X19, [X31+136]
	078 Move X22, [X31+112]
	079 Move X21, [X31+120]
	080 Move X30, [X31+96]
	081 Move X23, [X31+104]
	082 Move S1, 10
	083 NotImplemented "Instruction FDIV not yet implemented."
	084 Add X31, X31, 144
	085 Return V0

Method: System.Void RPC_ToggleOnOff()

Disassembly:
	0x01D9CBCC MOV X0, X19
	0x01D9CBD0 BL 0x1D9B73C
	0x01D9CBD4 LDR V0, [X31 + 0x2]
	0x01D9CBD8 LDR X8, [X31 + 0x30]
	0x01D9CBDC LDR X2, [X25]
	0x01D9CBE0 ADD X0, X31, 0x40
	0x01D9CBE4 MOV W1, W21
	0x01D9CBE8 STR V0, [X31 + 0x4]
	0x01D9CBEC STR X8, [X31 + 0x50]
	0x01D9CBF0 BL 0x240C380
	0x01D9CBF4 LDR X8, [X26]
	0x01D9CBF8 MOV X22, X0
	0x01D9CBFC LDR W9, [X8 + 0xE0]
	0x01D9CC00 CBZ W9, 0x1D9CC0C
	0x01D9CC04 CBNZ W22, 0x1D9CC18
	0x01D9CC08 B 0x1D9CCAC
	0x01D9CC0C MOV X0, X8
	0x01D9CC10 BL 0x1C16DFC
	0x01D9CC14 CBZ W22, 0x1D9CCAC
	0x01D9CC18 LDR X0, [X19 + 0x38]
	0x01D9CC1C CBZ X0, 0x1D9CFA4
	0x01D9CC20 AND X1, X22, 0x0
	0x01D9CC24 MOV X2, X31
	0x01D9CC28 BL 0x1EA3204
	0x01D9CC2C LDR X8, [X23]
	0x01D9CC30 MOV X22, X0
	0x01D9CC34 LDR W9, [X8 + 0xE0]
	0x01D9CC38 CBNZ W9, 0x1D9CC44
	0x01D9CC3C MOV X0, X8
	0x01D9CC40 BL 0x1C16DFC
	0x01D9CC44 MOV X0, X22
	0x01D9CC48 MOV X1, X31
	0x01D9CC4C MOV X2, X31
	0x01D9CC50 ADD W20, W20, 0x1
	0x01D9CC54 BL 0x3C3883C
	0x01D9CC58 TBNZ X0, 0x0, 0x1D9CCAC
	0x01D9CC5C CBZ X22, 0x1D9CFA4
	0x01D9CC60 LDR X1, [X24]
	0x01D9CC64 MOV X0, X22
	0x01D9CC68 BL 0x21A3894
	0x01D9CC6C LDR X8, [X23]
	0x01D9CC70 MOV X22, X0
	0x01D9CC74 LDR W9, [X8 + 0xE0]
	0x01D9CC78 CBNZ W9, 0x1D9CC84
	0x01D9CC7C MOV X0, X8
	0x01D9CC80 BL 0x1C16DFC
	0x01D9CC84 MOV X0, X22
	0x01D9CC88 MOV X1, X31
	0x01D9CC8C MOV X2, X31
	0x01D9CC90 BL 0x3C354F8
	0x01D9CC94 TBZ X0, 0x0, 0x1D9CCAC
	0x01D9CC98 CBZ X22, 0x1D9CFA4
	0x01D9CC9C MOV X0, X22
	0x01D9CCA0 MOV X1, X31
	0x01D9CCA4 BL 0x3C8EBE8
	0x01D9CCA8 FADD S8, S8, S0
	0x01D9CCAC ADD X8, X31, 0x8
	0x01D9CCB0 MOV X0, X19
	0x01D9CCB4 ADD W21, W21, 0x1
	0x01D9CCB8 BL 0x1D9B73C
	0x01D9CCBC LDUR V0, [X31 + 0x8]
	0x01D9CCC0 LDR X9, [X31 + 0x18]
	0x01D9CCC4 STR V0, [X31 + 0x4]
	0x01D9CCC8 LDR W8, [X31 + 0x48]
	0x01D9CCCC STR V0, [X31 + 0x2]
	0x01D9CCD0 STR X9, [X31 + 0x50]
	0x01D9CCD4 CMP W21, W8
	0x01D9CCD8 B.LT 0x1D9CBC8
	0x01D9CCDC TBNZ X20, 0x1F, 0x1D9CF00
	0x01D9CCE0 ADD X8, X31, 0x20
	0x01D9CCE4 MOV X0, X19
	0x01D9CCE8 BL 0x1D9B73C
	0x01D9CCEC LDR V0, [X31 + 0x2]
	0x01D9CCF0 LDR X8, [X31 + 0x30]
	0x01D9CCF4 LDR X2, [X25]
	0x01D9CCF8 ADD X0, X31, 0x40
	0x01D9CCFC MOV W1, W20
	0x01D9CD00 STR V0, [X31 + 0x4]
	0x01D9CD04 STR X8, [X31 + 0x50]
	0x01D9CD08 BL 0x240C380
	0x01D9CD0C LDR X8, [X19 + 0x38]
	0x01D9CD10 CBZ X8, 0x1D9CFA4
	0x01D9CD14 AND X1, X0, 0x0
	0x01D9CD18 MOV X0, X8
	0x01D9CD1C MOV X2, X31
	0x01D9CD20 BL 0x1EA3204
	0x01D9CD24 LDR X8, [X23]
	0x01D9CD28 MOV X21, X0
	0x01D9CD2C LDR W9, [X8 + 0xE0]
	0x01D9CD30 CBNZ W9, 0x1D9CD3C
	0x01D9CD34 MOV X0, X8
	0x01D9CD38 BL 0x1C16DFC
	0x01D9CD3C MOV X0, X21
	0x01D9CD40 MOV X1, X31
	0x01D9CD44 MOV X2, X31
	0x01D9CD48 BL 0x3C354F8
	0x01D9CD4C TBZ X0, 0x0, 0x1D9CF1C
	0x01D9CD50 CBZ X21, 0x1D9CFA4
	0x01D9CD54 MOV X0, X21
	0x01D9CD58 MOV X1, X31
	0x01D9CD5C BL 0x3C32E90
	0x01D9CD60 LDR X8, [X19 + 0x90]
	0x01D9CD64 CBZ X8, 0x1D9CFA4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x263D000
	005 Move W8, [X20+2627]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x235B000
	012 Move X0, [X0+2680]
	013 Call 0x1C17CF4
	014 Move X0, 0x235C000
	015 Move X0, [X0+80]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2627], W8
	019 Move W8, [X19+88]
	020 Compare W8, 0
	021 JumpIfEqual {33}
	022 Move [X19+88], W31
	023 Move X0, X19
	024 Call InventoryBag.get_isOpen, X0
	025 NotImplemented "Instruction ORN not yet implemented."
	026 And W1, W8, 1
	027 Move X0, X19
	028 Call InventoryBag.set_isOpen, X0, X1
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X20, 0x235B000
	034 Move X20, [X20+2680]
	035 Move X0, [X20]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X19
	041 Move X1, X31
	042 Call NetworkBehaviourUtils.ThrowIfBehaviourNotInitialized, X0
	043 Move X0, [X19+56]
	044 Compare X0, 0
	045 JumpIfEqual {127}
	046 Move X1, X31
	047 Call NetworkRunner.get_Stage, X0
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Return 
	053 Move X0, [X19+64]
	054 Compare X0, 0
	055 JumpIfEqual {127}
	056 Move X1, X31
	057 Call NetworkObject.GetLocalAuthorityMask, X0
	058 And W31, W0, 7
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {23}
	063 Move X8, [X19+56]
	064 Compare X8, 0
	065 JumpIfEqual {127}
	066 Move X0, [X8+80]
	067 Compare X0, 0
	068 JumpIfEqual {127}
	069 Move X1, X31
	070 Call Simulation.HasAnyActiveConnections, X0
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {49}
	075 Move X8, [X19+56]
	076 Compare X8, 0
	077 JumpIfEqual {127}
	078 Move X0, [X8+80]
	079 Move W1, 8
	080 Move X2, X31
	081 Call SimulationMessage.Allocate, X0, X1
	082 Move X8, [X19+64]
	083 Compare X8, 0
	084 JumpIfEqual {127}
	085 Move X8, [X8+32]
	086 Move X20, X0
	087 Compare X8, 0
	088 JumpIfEqual {107}
	089 Move W0, [X8]
	090 Move X0, [X20]
	091 Move X19, [X19+64]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X8, 0x235C000
	097 Move X8, [X8+80]
	098 Move X1, X19
	099 Move X20, [X31+16]
	100 Move X19, [X31+24]
	101 Move W2, 7
	102 Move X0, [X8]
	103 Move X3, X31
	104 Move X30, [X31+32]
	105 Call NetworkBehaviourUtils.NotifyLocalSimulationNotAllowedToSendRpc, X0, X1, X2
	106 Return 
	107 Move X0, X31
	108 Move W1, [X19+104]
	109 Move W2, 1
	110 Move X3, X31
	111 Call RpcHeader.Create, X0, X1, X2
	112 Move [X20+28], X0
	113 Compare X20, 0
	114 JumpIfEqual {127}
	115 Move W8, 64
	116 Move [X20+12], W8
	117 Move X0, [X19+56]
	118 Compare X0, 0
	119 JumpIfEqual {127}
	120 Move X1, X20
	121 Move X20, [X31+16]
	122 Move X19, [X31+24]
	123 Move X2, X31
	124 Move X30, [X31+32]
	125 Call NetworkRunner.SendRpc, X0, X1
	126 Return 
	127 Call 0x1C17F20

Method: System.Void HandleToggleUse()

Disassembly:
	0x01D9CDB0 MOV X0, X22

ISIL:
	001 Call InventoryBag.RPC_ToggleOnOff, X0
	002 Return 

Method: System.Void HandleIsOpenChanged()

Disassembly:
	0x01D9CD68 MOV X22, X0
	0x01D9CD6C MOV X0, X8
	0x01D9CD70 MOV X1, X31
	0x01D9CD74 BL 0x3C3F58C
	0x01D9CD78 CBZ X22, 0x1D9CFA4
	0x01D9CD7C MOV X0, X22
	0x01D9CD80 MOV X1, X31
	0x01D9CD84 BL 0x3C3F62C
	0x01D9CD88 MOV X0, X21
	0x01D9CD8C MOV X1, X31
	0x01D9CD90 BL 0x3C32E90
	0x01D9CD94 LDR X8, [X19 + 0x90]
	0x01D9CD98 CBZ X8, 0x1D9CFA4
	0x01D9CD9C MOV X22, X0
	0x01D9CDA0 MOV X0, X8
	0x01D9CDA4 MOV X1, X31
	0x01D9CDA8 BL 0x3C3DEB4
	0x01D9CDAC CBZ X22, 0x1D9CFA4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, [X0+160]
	005 Move X1, X31
	006 Move X19, X0
	007 Call Component.get_transform, X0
	008 Compare X0, 0
	009 JumpIfEqual {22}
	010 Move X1, X31
	011 Call Transform.get_position, X0
	012 Move S3, 1
	013 Move X0, X20
	014 Move X1, X31
	015 Call SFXManager.PlaySFX, X0, X1, V0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Call InventoryBag.AnimateOpenClose, X0
	021 Return 
	022 Call 0x1C17F20

Method: System.Void HandleContainedObjectsChanged()

Disassembly:
	0x01D9CFD4 STR X30, [X31 + 0x20]
	0x01D9CFD8 STP X20, X19, [X31 + 0x30]
	0x01D9CFDC ADRP X20, 0x263C000
	0x01D9CFE0 LDRB W8, [X20 + 0xA47]
	0x01D9CFE4 MOV X19, X0
	0x01D9CFE8 TBNZ X8, 0x0, 0x1D9D000
	0x01D9CFEC ADRP X0, 0x235B000
	0x01D9CFF0 LDR X0, [X0 + 0x48]
	0x01D9CFF4 BL 0x1C16CF4
	0x01D9CFF8 MOVZ W8, 0x1
	0x01D9CFFC STRB W8, [X20 + 0xA47]
	0x01D9D000 ADD X8, X31, 0x8
	0x01D9D004 MOV X0, X19
	0x01D9D008 BL 0x1D9B73C
	0x01D9D00C LDR W8, [X31 + 0x10]
	0x01D9D010 CMP W8, 0x1
	0x01D9D014 B.LT 0x1D9D040
	0x01D9D018 MOV W20, W31
	0x01D9D01C MOV X0, X19
	0x01D9D020 BL 0x1D9CADC
	0x01D9D024 ADD X8, X31, 0x8
	0x01D9D028 MOV X0, X19
	0x01D9D02C ADD W20, W20, 0x1
	0x01D9D030 BL 0x1D9B73C
	0x01D9D034 LDR W8, [X31 + 0x10]
	0x01D9D038 CMP W20, W8
	0x01D9D03C B.LT 0x1D9D01C
	0x01D9D040 LDP X20, X19, [X31 + 0x30]
	0x01D9D044 LDR X30, [X31 + 0x20]
	0x01D9D048 ADD X31, X31, 0x40
	0x01D9D04C RET
	0x01D9D050 SUB X31, X31, 0xC0
	0x01D9D054 STR X30, [X31 + 0x60]
	0x01D9D058 STP X28, X27, [X31 + 0x70]
	0x01D9D05C STP X26, X25, [X31 + 0x80]
	0x01D9D060 STP X24, X23, [X31 + 0x90]
	0x01D9D064 STP X22, X21, [X31 + 0xA0]
	0x01D9D068 STP X20, X19, [X31 + 0xB0]
	0x01D9D06C ADRP X22, 0x263B000
	0x01D9D070 ADRP X21, 0x235A000
	0x01D9D074 ADRP X20, 0x235A000
	0x01D9D078 LDRB W8, [X22 + 0xA48]
	0x01D9D07C LDR X21, [X21 + 0x80]
	0x01D9D080 LDR X20, [X20 + 0x88]
	0x01D9D084 MOV X19, X0
	0x01D9D088 TBNZ X8, 0x0, 0x1D9D100
	0x01D9D08C ADRP X0, 0x2359000
	0x01D9D090 LDR X0, [X0 + 0xBB8]
	0x01D9D094 BL 0x1C16CF4
	0x01D9D098 ADRP X0, 0x235A000
	0x01D9D09C LDR X0, [X0 + 0x90]
	0x01D9D0A0 BL 0x1C16CF4
	0x01D9D0A4 ADRP X0, 0x235A000
	0x01D9D0A8 LDR X0, [X0 + 0x88]
	0x01D9D0AC BL 0x1C16CF4
	0x01D9D0B0 ADRP X0, 0x235A000
	0x01D9D0B4 LDR X0, [X0 + 0x80]
	0x01D9D0B8 BL 0x1C16CF4
	0x01D9D0BC ADRP X0, 0x235A000
	0x01D9D0C0 LDR X0, [X0 + 0x70]
	0x01D9D0C4 BL 0x1C16CF4
	0x01D9D0C8 ADRP X0, 0x235A000
	0x01D9D0CC LDR X0, [X0 + 0x40]
	0x01D9D0D0 BL 0x1C16CF4
	0x01D9D0D4 ADRP X0, 0x235A000
	0x01D9D0D8 LDR X0, [X0 + 0x48]
	0x01D9D0DC BL 0x1C16CF4
	0x01D9D0E0 ADRP X0, 0x2359000
	0x01D9D0E4 LDR X0, [X0 + 0x398]
	0x01D9D0E8 BL 0x1C16CF4
	0x01D9D0EC ADRP X0, 0x2356000
	0x01D9D0F0 LDR X0, [X0 + 0x598]
	0x01D9D0F4 BL 0x1C16CF4
	0x01D9D0F8 MOVZ W8, 0x1
	0x01D9D0FC STRB W8, [X22 + 0xA48]
	0x01D9D100 LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x263D000
	006 Move W8, [X20+2628]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x2358000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move X0, 0x235A000
	016 Move X0, [X0+1992]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2628], W8
	020 Move X8, [X19+128]
	021 Compare X8, 0
	022 JumpIfEqual {103}
	023 Move X9, 0x2357000
	024 Move X9, [X9+1432]
	025 Move X20, [X8+336]
	026 Move X0, [X9]
	027 Move W9, [X0+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {98}
	039 Move X8, [X19+128]
	040 Compare X8, 0
	041 JumpIfEqual {103}
	042 Move X8, [X8+336]
	043 Compare X8, 0
	044 JumpIfEqual {103}
	045 Move W9, [X8+128]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X0, [X8+64]
	048 Compare X0, 0
	049 JumpIfEqual {98}
	050 Move W8, [X0+96]
	051 Move TEMP, X8
	052 And TEMP, TEMP, 2
	053 Compare TEMP, 2
	054 JumpIfEqual {98}
	055 Move X1, X31
	056 Call NetworkObject.get_HasInputAuthority, X0
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {98}
	061 Move X20, 0x2359000
	062 Move X20, [X20+1992]
	063 Move X0, [X20]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X21, 0x263C000
	069 Move W8, [X21+2141]
	070 Compare W8, 0
	071 JumpIfNotEqual {77}
	072 Move X0, 0x2359000
	073 Move X0, [X0+1992]
	074 Call 0x1C17CF4
	075 Move W8, 1
	076 Move [X21+2141], W8
	077 Move X0, [X20]
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {83}
	081 Call 0x1C17DFC
	082 Move X0, [X20]
	083 Move X8, [X0+184]
	084 Move X0, X19
	085 Move X20, [X8]
	086 Call InventoryBag.GetFilledAmount, X0
	087 Compare X20, 0
	088 JumpIfEqual {103}
	089 Move X0, X20
	090 Move X20, [X31+16]
	091 Move X19, [X31+24]
	092 Move W1, 1
	093 Move X2, X31
	094 Move X30, [X31+32]
	095 Move X21, [X31+40]
	096 Call PlayerController.UpdateBackpack, X0, X1, V0
	097 Return 
	098 Move X20, [X31+16]
	099 Move X19, [X31+24]
	100 Move X30, [X31+32]
	101 Move X21, [X31+40]
	102 Return 
	103 Call 0x1C17F20

Method: System.Void AnimateOpenClose()

Disassembly:
	0x01D9CDB4 MOV X1, X31
	0x01D9CDB8 BL 0x3C3F7AC
	0x01D9CDBC ADRP X8, 0x235A000
	0x01D9CDC0 LDR X8, [X8 + 0xBB8]
	0x01D9CDC4 MOV X0, X21
	0x01D9CDC8 LDR X1, [X8]
	0x01D9CDCC BL 0x21A3894
	0x01D9CDD0 LDR X8, [X23]
	0x01D9CDD4 MOV X22, X0
	0x01D9CDD8 LDR W9, [X8 + 0xE0]
	0x01D9CDDC CBNZ W9, 0x1D9CDE8
	0x01D9CDE0 MOV X0, X8
	0x01D9CDE4 BL 0x1C16DFC
	0x01D9CDE8 MOV X0, X22
	0x01D9CDEC MOV X1, X31
	0x01D9CDF0 MOV X2, X31
	0x01D9CDF4 BL 0x3C354F8
	0x01D9CDF8 TBZ X0, 0x0, 0x1D9CE50
	0x01D9CDFC LDR X0, [X19 + 0x90]
	0x01D9CE00 CBZ X0, 0x1D9CFA4
	0x01D9CE04 MOV X1, X31
	0x01D9CE08 BL 0x3C3F58C
	0x01D9CE0C CBZ X22, 0x1D9CFA4
	0x01D9CE10 MOV X0, X22
	0x01D9CE14 MOV X1, X31
	0x01D9CE18 BL 0x1D91C48
	0x01D9CE1C LDR X0, [X19 + 0x80]
	0x01D9CE20 CBZ X0, 0x1D9CFA4
	0x01D9CE24 ADD X1, X31, 0x3C
	0x01D9CE28 MOV X2, X31
	0x01D9CE2C BL 0x1D8EF8C
	0x01D9CE30 TBZ X0, 0x0, 0x1D9CE50
	0x01D9CE34 ADRP X8, 0xFFFFFFFFFED4D000
	0x01D9CE38 ADRP X9, 0xFFFFFFFFFED4E000
	0x01D9CE3C LDR W0, [X31 + 0x3C]
	0x01D9CE40 LDR V0, [X8 + 0xF24]
	0x01D9CE44 LDR V1, [X9 + 0xBC]
	0x01D9CE48 MOV X1, X31
	0x01D9CE4C BL 0x1DC2324
	0x01D9CE50 LDR X1, [X24]
	0x01D9CE54 MOV X0, X21
	0x01D9CE58 BL 0x21A3894
	0x01D9CE5C LDR X8, [X23]
	0x01D9CE60 MOV X22, X0
	0x01D9CE64 LDR W9, [X8 + 0xE0]
	0x01D9CE68 CBNZ W9, 0x1D9CE74
	0x01D9CE6C MOV X0, X8
	0x01D9CE70 BL 0x1C16DFC
	0x01D9CE74 MOV X0, X22
	0x01D9CE78 MOV X1, X31
	0x01D9CE7C MOV X2, X31
	0x01D9CE80 BL 0x3C354F8
	0x01D9CE84 TBZ X0, 0x0, 0x1D9CF08
	0x01D9CE88 LDR X0, [X19 + 0x90]
	0x01D9CE8C CBZ X0, 0x1D9CFA4
	0x01D9CE90 MOV X1, X31
	0x01D9CE94 BL 0x3C3F988
	0x01D9CE98 CBZ X22, 0x1D9CFA4
	0x01D9CE9C FMOV S3, 0.5
	0x01D9CEA0 FMUL S2, S2, S3
	0x01D9CEA4 FMUL S1, S1, S3
	0x01D9CEA8 FMUL S0, S0, S3
	0x01D9CEAC MOV X0, X22
	0x01D9CEB0 MOV X1, X31
	0x01D9CEB4 BL 0x3C8E908
	0x01D9CEB8 ADRP X24, 0x263C000
	0x01D9CEBC LDRB W8, [X24 + 0x783]
	0x01D9CEC0 CBNZ W8, 0x1D9CED8
	0x01D9CEC4 ADRP X0, 0x2357000
	0x01D9CEC8 LDR X0, [X0 + 0x5A0]
	0x01D9CECC BL 0x1C16CF4
	0x01D9CED0 MOVZ W8, 0x1
	0x01D9CED4 STRB W8, [X24 + 0x783]
	0x01D9CED8 ADRP X8, 0x2357000
	0x01D9CEDC LDR X8, [X8 + 0x5A0]
	0x01D9CEE0 MOV X0, X22
	0x01D9CEE4 MOV X1, X31
	0x01D9CEE8 LDR X8, [X8]
	0x01D9CEEC LDR X8, [X8 + 0xB8]
	0x01D9CEF0 LDP S0, S1, [X8]
	0x01D9CEF4 LDR V2, [X8 + 0x8]
	0x01D9CEF8 BL 0x3C8EA40
	0x01D9CEFC B 0x1D9CF0C
	0x01D9CF00 MOV W0, W31
	0x01D9CF04 B 0x1D9CF80
	0x01D9CF08 CBZ X22, 0x1D9CFA4
	0x01D9CF0C MOV X0, X22
	0x01D9CF10 MOV X1, X31
	0x01D9CF14 BL 0x3C8EBE8
	0x01D9CF18 FSUB S8, S8, S0
	0x01D9CF1C ADD X8, X31, 0x20
	0x01D9CF20 MOV X0, X19
	0x01D9CF24 BL 0x1D9B73C
	0x01D9CF28 ADRP X9, 0x235B000
	0x01D9CF2C LDR V0, [X31 + 0x2]
	0x01D9CF30 LDR X8, [X31 + 0x30]
	0x01D9CF34 LDR X9, [X9 + 0x78]
	0x01D9CF38 ADD X0, X31, 0x40
	0x01D9CF3C MOV W1, W20
	0x01D9CF40 MOV X2, X31
	0x01D9CF44 LDR X3, [X9]
	0x01D9CF48 STR V0, [X31 + 0x4]
	0x01D9CF4C STR X8, [X31 + 0x50]
	0x01D9CF50 BL 0x240C3CC
	0x01D9CF54 MOV X0, X19
	0x01D9CF58 MOV V0.16B, V8.16B
	0x01D9CF5C BL 0x1D9D328
	0x01D9CF60 LDR X0, [X23]
	0x01D9CF64 LDR W8, [X0 + 0xE0]
	0x01D9CF68 CBNZ W8, 0x1D9CF70
	0x01D9CF6C BL 0x1C16DFC
	0x01D9CF70 MOV X0, X21
	0x01D9CF74 MOV X1, X31
	0x01D9CF78 MOV X2, X31
	0x01D9CF7C BL 0x3C354F8
	0x01D9CF80 LDP X20, X19, [X31 + 0xA0]
	0x01D9CF84 LDP X22, X21, [X31 + 0x90]
	0x01D9CF88 LDP X24, X23, [X31 + 0x80]
	0x01D9CF8C LDP X26, X25, [X31 + 0x70]
	0x01D9CF90 LDR X30, [X31 + 0x68]
	0x01D9CF94 LDR V8, [X31 + 0x60]
	0x01D9CF98 AND W0, W0, 0x1
	0x01D9CF9C ADD X31, X31, 0xB0
	0x01D9CFA0 RET
	0x01D9CFA4 BL 0x1C16F20
	0x01D9CFA8 STP X30, X19, [X31 - 0x10]!
	0x01D9CFAC MOV X19, X0
	0x01D9CFB0 BL 0x1D9CFD0
	0x01D9CFB4 LDR X0, [X19 + 0x38]
	0x01D9CFB8 CBZ X0, 0x1D9CFCC
	0x01D9CFBC LDR X1, [X19 + 0x40]
	0x01D9CFC0 MOV X2, X31
	0x01D9CFC4 LDP X30, X19, [X31], #0x10
	0x01D9CFC8 B 0x1EA3884
	0x01D9CFCC BL 0x1C16F20
	0x01D9CFD0 SUB X31, X31, 0x40

ISIL:
	001 Move [X31-80], D9
	002 Move [X31-72], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x263D000
	011 Move X21, 0x235C000
	012 Move W8, [X20+2629]
	013 Move X21, [X21+88]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {39}
	019 Move X0, 0x235A000
	020 Move X0, [X0+1456]
	021 Call 0x1C17CF4
	022 Move X0, 0x2359000
	023 Move X0, [X0+3696]
	024 Call 0x1C17CF4
	025 Move X0, 0x235A000
	026 Move X0, [X0+1448]
	027 Call 0x1C17CF4
	028 Move X0, 0x235C000
	029 Move X0, [X0+96]
	030 Call 0x1C17CF4
	031 Move X0, 0x235C000
	032 Move X0, [X0+104]
	033 Call 0x1C17CF4
	034 Move X0, 0x235C000
	035 Move X0, [X0+88]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+2629], W8
	039 Move X0, [X21]
	040 Call 0x1C17F10
	041 Move X1, X31
	042 Move X20, X0
	043 Call Object..ctor, X0
	044 Compare X20, 0
	045 JumpIfEqual {155}
	046 Move X22, 0x235A000
	047 Move X22, [X22+1448]
	048 Move [X20+16], X19
	049 Move W21, [X19+188]
	050 Move X0, [X22]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move W0, W21
	056 Move X1, X31
	057 Call LeanTween.cancel, X0
	058 Move X0, [X19+152]
	059 Compare X0, 0
	060 JumpIfEqual {155}
	061 Move X1, X31
	062 Call Transform.get_localRotation, X0
	063 Move X0, X31
	064 Call Quaternion.Internal_ToEulerRad, X0
	065 Move X8, -19599360
	066 Move V3, [X8+1096]
	067 Move X0, X31
	068 Multiply S0, S0, S3
	069 Multiply S1, S1, S3
	070 Multiply S2, S2, S3
	071 Call Quaternion.Internal_MakePositive, X0
	072 Move W8, 0xC3B40000
	073 Move W9, 0x43340000
	074 Move S1, W8
	075 Move S2, W9
	076 Add S1, S0, S1
	077 NotImplemented "Instruction FCMP not yet implemented."
	078 Move X0, X19
	079 NotImplemented "Instruction FCSEL not yet implemented."
	080 Call InventoryBag.get_isOpen, X0
	081 Move W8, 0xC2B40000
	082 And W31, W0, 1
	083 Move S0, W31
	084 Move S1, W8
	085 NotImplemented "Instruction FCSEL not yet implemented."
	086 Move [X20+24], S9
	087 Move X0, [X22]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move X8, -19599360
	093 Move V2, [X8+1100]
	094 Move V0, V8
	095 Move V1, V9
	096 Move X0, X31
	097 Call LeanTween.value, V0, V1, V2
	098 Compare X0, 0
	099 JumpIfEqual {155}
	100 Move X21, 0x235A000
	101 Move X22, 0x235C000
	102 Move X21, [X21+1456]
	103 Move X22, [X22+96]
	104 Move X1, X31
	105 Call LTDescr.setEaseOutCirc, X0
	106 Move X8, [X21]
	107 Move X21, X0
	108 Move X0, X8
	109 Call 0x1C17F10
	110 Move X2, [X22]
	111 Move X1, X20
	112 Move X3, X31
	113 Move X22, X0
	114 Call Action`1<Single>..ctor, X0, X1, X2
	115 Compare X21, 0
	116 JumpIfEqual {155}
	117 Move X23, 0x2359000
	118 Move X24, 0x235C000
	119 Move X23, [X23+3696]
	120 Move X24, [X24+104]
	121 Move X0, X21
	122 Move X1, X22
	123 Move X2, X31
	124 Call LTDescr.setOnUpdate, X0, X1
	125 Move X8, [X23]
	126 Move X21, X0
	127 Move X0, X8
	128 Call 0x1C17F10
	129 Move X2, [X24]
	130 Move X1, X20
	131 Move X3, X31
	132 Move X22, X0
	133 Call Action..ctor, X0, X1, X2
	134 Compare X21, 0
	135 JumpIfEqual {155}
	136 Move X0, X21
	137 Move X1, X22
	138 Move X2, X31
	139 Call LTDescr.setOnComplete, X0, X1
	140 Compare X0, 0
	141 JumpIfEqual {155}
	142 Move X1, X31
	143 Call LTDescr.get_id, X0
	144 Move [X19+188], W0
	145 Move X20, [X31+64]
	146 Move X19, [X31+72]
	147 Move X22, [X31+48]
	148 Move X21, [X31+56]
	149 Move X24, [X31+32]
	150 Move X23, [X31+40]
	151 Move X30, [X31+16]
	152 Move D9, [X31+80]
	153 Move D8, [X31+88]
	154 Return 
	155 Call 0x1C17F20

Method: System.Void Spawned()

Disassembly:
	0x01D9D10C BL 0x1C16F10
	0x01D9D110 LDR X1, [X20]
	0x01D9D114 MOV X20, X0
	0x01D9D118 BL 0x301B7C4
	0x01D9D11C ADD X8, X31, 0x8
	0x01D9D120 MOV X0, X19
	0x01D9D124 BL 0x1D9B73C
	0x01D9D128 LDUR V0, [X31 + 0x8]
	0x01D9D12C LDR X9, [X31 + 0x18]
	0x01D9D130 STR V0, [X31 + 0x4]
	0x01D9D134 LDR W8, [X31 + 0x48]
	0x01D9D138 STR V0, [X31 + 0x2]
	0x01D9D13C STR X9, [X31 + 0x50]
	0x01D9D140 CMP W8, 0x1
	0x01D9D144 B.LT 0x1D9D300
	0x01D9D148 ADRP X23, 0x235A000
	0x01D9D14C ADRP X24, 0x2359000
	0x01D9D150 ADRP X25, 0x235A000
	0x01D9D154 ADRP X26, 0x2356000
	0x01D9D158 ADRP X27, 0x2359000
	0x01D9D15C ADRP X28, 0x235A000
	0x01D9D160 LDR X23, [X23 + 0x40]
	0x01D9D164 LDR X24, [X24 + 0x398]
	0x01D9D168 LDR X25, [X25 + 0x70]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call NetworkBehaviour.Spawned, X0
	006 Move X0, X19
	007 Call InventoryBag.HandleIsOpenChanged, X0
	008 Move X0, [X19+64]
	009 Compare X0, 0
	010 JumpIfEqual {34}
	011 Move W8, [X0+96]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 2
	014 Compare TEMP, 2
	015 JumpIfEqual {34}
	016 Move X1, X31
	017 Call NetworkObject.get_HasStateAuthority, X0
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {34}
	022 Move X8, [X19+128]
	023 Compare X8, 0
	024 JumpIfEqual {37}
	025 Move X0, [X8+360]
	026 Compare X0, 0
	027 JumpIfEqual {37}
	028 Move S0, 5
	029 Move X1, X31
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Call Rigidbody.set_mass, X0, V0
	033 Return 
	034 Move X30, [X31+16]
	035 Move X19, [X31+24]
	036 Return 
	037 Call 0x1C17F20

Method: System.Void Despawned(Fusion.NetworkRunner runner, System.Boolean hasState)

Disassembly:
	0x01D9D16C LDR X26, [X26 + 0x598]
	0x01D9D170 LDR X27, [X27 + 0xBB8]
	0x01D9D174 LDR X28, [X28 + 0x90]
	0x01D9D178 MOV W21, W31
	0x01D9D17C ADD X8, X31, 0x20
	0x01D9D180 MOV X0, X19
	0x01D9D184 BL 0x1D9B73C
	0x01D9D188 LDR V0, [X31 + 0x2]
	0x01D9D18C LDR X8, [X31 + 0x30]
	0x01D9D190 LDR X2, [X23]
	0x01D9D194 ADD X0, X31, 0x40
	0x01D9D198 MOV W1, W21
	0x01D9D19C STR V0, [X31 + 0x4]
	0x01D9D1A0 STR X8, [X31 + 0x50]
	0x01D9D1A4 BL 0x240C008
	0x01D9D1A8 LDR X8, [X24]
	0x01D9D1AC MOV X22, X0
	0x01D9D1B0 LDR W9, [X8 + 0xE0]
	0x01D9D1B4 CBZ W9, 0x1D9D1C0
	0x01D9D1B8 CBNZ W22, 0x1D9D1CC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 And W2, W2, 1
	005 Move X3, X31
	006 Move X20, X1
	007 Move X19, X0
	008 Call NetworkBehaviour.Despawned, X0, X1, X2
	009 Compare X20, 0
	010 JumpIfEqual {26}
	011 Move X0, X20
	012 Move X1, X31
	013 Call NetworkRunner.get_IsShutdown, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {22}
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return 
	022 Move X0, X19
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Call 0x1C17F20

Method: System.Void FixedUpdateNetwork()

Disassembly:
	0x01D9D3F0 B 0x1D89E54
	0x01D9D3F4 LDP X20, X19, [X31 + 0x10]
	0x01D9D3F8 LDR X30, [X31 + 0x8]
	0x01D9D3FC LDR V8, [X31], #0x20
	0x01D9D400 RET
	0x01D9D404 BL 0x1C16F20
	0x01D9D408 MOV X1, X31
	0x01D9D40C B 0x1E74F04
	0x01D9D410 SUB X31, X31, 0x70
	0x01D9D414 STR X30, [X31 + 0x40]
	0x01D9D418 STP X22, X21, [X31 + 0x50]
	0x01D9D41C STP X20, X19, [X31 + 0x60]
	0x01D9D420 ADRP X21, 0x263B000
	0x01D9D424 ADRP X20, 0x2359000
	0x01D9D428 LDRB W8, [X21 + 0xA4D]
	0x01D9D42C LDR X20, [X20 + 0xA78]
	0x01D9D430 MOV X19, X0
	0x01D9D434 TBNZ X8, 0x0, 0x1D9D464
	0x01D9D438 ADRP X0, 0x235A000
	0x01D9D43C LDR X0, [X0 + 0x98]
	0x01D9D440 BL 0x1C16CF4
	0x01D9D444 ADRP X0, 0x2359000
	0x01D9D448 LDR X0, [X0 + 0xA78]
	0x01D9D44C BL 0x1C16CF4
	0x01D9D450 ADRP X0, 0x235A000
	0x01D9D454 LDR X0, [X0 + 0xA0]
	0x01D9D458 BL 0x1C16CF4
	0x01D9D45C MOVZ W8, 0x1
	0x01D9D460 STRB W8, [X21 + 0xA4D]
	0x01D9D464 LDRB W1, [X19 + 0xA8]
	0x01D9D468 ADRP X22, 0x235A000
	0x01D9D46C ADRP X21, 0x235A000
	0x01D9D470 LDR X22, [X22 + 0xA0]
	0x01D9D474 LDR X21, [X21 + 0x98]
	0x01D9D478 MOV X0, X19
	0x01D9D47C BL 0x1D9B6D8
	0x01D9D480 ADD X8, X31, 0x20
	0x01D9D484 MOV X0, X19
	0x01D9D488 BL 0x1D9B73C
	0x01D9D48C LDR V0, [X31 + 0x2]
	0x01D9D490 LDR X8, [X31 + 0x30]
	0x01D9D494 LDR X0, [X20]
	0x01D9D498 STR V0, [X31]
	0x01D9D49C STR X8, [X31 + 0x10]
	0x01D9D4A0 LDR W8, [X0 + 0xE0]
	0x01D9D4A4 LDR X20, [X19 + 0xB0]
	0x01D9D4A8 CBNZ W8, 0x1D9D4B0
	0x01D9D4AC BL 0x1C16DFC
	0x01D9D4B0 LDR X2, [X22]
	0x01D9D4B4 LDR V0, [X31]
	0x01D9D4B8 LDR X8, [X31 + 0x10]
	0x01D9D4BC LDR X3, [X21]
	0x01D9D4C0 ADD X0, X31, 0x20
	0x01D9D4C4 MOV X1, X20
	0x01D9D4C8 STR V0, [X31 + 0x2]
	0x01D9D4CC STR X8, [X31 + 0x30]
	0x01D9D4D0 BL 0x2228FB4
	0x01D9D4D4 LDR W1, [X19 + 0xB8]
	0x01D9D4D8 MOV X0, X19
	0x01D9D4DC BL 0x1D9B854
	0x01D9D4E0 LDP X20, X19, [X31 + 0x60]
	0x01D9D4E4 LDP X22, X21, [X31 + 0x50]
	0x01D9D4E8 LDR X30, [X31 + 0x40]
	0x01D9D4EC ADD X31, X31, 0x70
	0x01D9D4F0 RET
	0x01D9D4F4 SUB X31, X31, 0x60
	0x01D9D4F8 STP X30, X21, [X31 + 0x40]
	0x01D9D4FC STP X20, X19, [X31 + 0x50]
	0x01D9D500 ADRP X21, 0x263B000
	0x01D9D504 ADRP X20, 0x2359000
	0x01D9D508 LDRB W8, [X21 + 0xA4E]
	0x01D9D50C LDR X20, [X20 + 0xA78]
	0x01D9D510 MOV X19, X0
	0x01D9D514 TBNZ X8, 0x0, 0x1D9D538
	0x01D9D518 ADRP X0, 0x235A000
	0x01D9D51C LDR X0, [X0 + 0xA8]
	0x01D9D520 BL 0x1C16CF4
	0x01D9D524 ADRP X0, 0x2359000
	0x01D9D528 LDR X0, [X0 + 0xA78]
	0x01D9D52C BL 0x1C16CF4
	0x01D9D530 MOVZ W8, 0x1
	0x01D9D534 STRB W8, [X21 + 0xA4E]
	0x01D9D538 ADRP X21, 0x235A000
	0x01D9D53C LDR X21, [X21 + 0xA8]
	0x01D9D540 MOV X0, X19
	0x01D9D544 BL 0x1D9B670
	0x01D9D548 AND W8, W0, 0x1
	0x01D9D54C STRB W8, [X19 + 0xA8]
	0x01D9D550 ADD X8, X31, 0x20
	0x01D9D554 MOV X0, X19
	0x01D9D558 BL 0x1D9B73C
	0x01D9D55C LDR V0, [X31 + 0x2]
	0x01D9D560 LDR X8, [X31 + 0x30]
	0x01D9D564 LDR X0, [X20]
	0x01D9D568 STR V0, [X31]
	0x01D9D56C STR X8, [X31 + 0x10]
	0x01D9D570 LDR W8, [X0 + 0xE0]
	0x01D9D574 CBNZ W8, 0x1D9D57C
	0x01D9D578 BL 0x1C16DFC
	0x01D9D57C LDR V0, [X31]
	0x01D9D580 LDR X8, [X31 + 0x10]
	0x01D9D584 LDR X2, [X21]
	0x01D9D588 ADD X1, X19, 0xB0
	0x01D9D58C ADD X0, X31, 0x20
	0x01D9D590 STR V0, [X31 + 0x2]
	0x01D9D594 STR X8, [X31 + 0x30]
	0x01D9D598 BL 0x2227EDC
	0x01D9D59C MOV X0, X19
	0x01D9D5A0 BL 0x1D9B7F4
	0x01D9D5A4 STR W0, [X19 + 0xB8]
	0x01D9D5A8 LDP X20, X19, [X31 + 0x50]
	0x01D9D5AC LDP X30, X21, [X31 + 0x40]
	0x01D9D5B0 ADD X31, X31, 0x60
	0x01D9D5B4 RET
	0x01D9D5B8 STR X30, [X31 - 0x20]!
	0x01D9D5BC STP X20, X19, [X31 + 0x10]
	0x01D9D5C0 ADRP X20, 0x263B000
	0x01D9D5C4 LDRB W8, [X20 + 0xA4F]
	0x01D9D5C8 MOV X19, X0
	0x01D9D5CC TBNZ X8, 0x0, 0x1D9D5E4
	0x01D9D5D0 ADRP X0, 0x235A000
	0x01D9D5D4 LDR X0, [X0 + 0xB0]
	0x01D9D5D8 BL 0x1C16CF4
	0x01D9D5DC MOVZ W8, 0x1
	0x01D9D5E0 STRB W8, [X20 + 0xA4F]
	0x01D9D5E4 CBZ X19, 0x1D9D63C
	0x01D9D5E8 ADRP X9, 0x235A000

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], D10
	003 Move [X31+72], D9
	004 Move [X31+80], D8
	005 Move [X31+88], X30
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move X20, 0x263C000
	009 Move W8, [X20+2630]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x235B000
	016 Move X0, [X0+64]
	017 Call 0x1C17CF4
	018 Move X0, 0x235A000
	019 Move X0, [X0+920]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2630], W8
	023 Move X0, X19
	024 Move X1, X31
	025 Move [X31+32], X31
	026 Move [X31+40], X31
	027 Move [X31+48], X31
	028 Move [X31+24], W31
	029 Call NetworkBehaviour.FixedUpdateNetwork, X0
	030 Move X0, [X19+64]
	031 Compare X0, 0
	032 JumpIfEqual {147}
	033 Move W8, [X0+96]
	034 Move TEMP, X8
	035 And TEMP, TEMP, 2
	036 Compare TEMP, 2
	037 JumpIfEqual {147}
	038 Move X1, X31
	039 Call NetworkObject.get_HasStateAuthority, X0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {147}
	044 Move X0, X19
	045 Call InventoryBag.get_isOpen, X0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {147}
	050 Move X0, [X19+144]
	051 Compare X0, 0
	052 JumpIfEqual {155}
	053 Move X1, X31
	054 Call Transform.get_up, X0
	055 Move X20, 0x263C000
	056 Move W8, [X20+1926]
	057 Move V8, V0
	058 Move V9, V1
	059 Move V10, V2
	060 Compare W8, 0
	061 JumpIfNotEqual {67}
	062 Move X0, 0x2357000
	063 Move X0, [X0+1440]
	064 Call 0x1C17CF4
	065 Move W8, 1
	066 Move [X20+1926], W8
	067 Move X8, 0x2357000
	068 Move X8, [X8+1440]
	069 Move X9, -19603456
	070 Move V2, [X9+188]
	071 Move X8, [X8]
	072 Move X8, [X8+184]
	073 Move S0, [X8+24]
	074 Move S1, [X8+28]
	075 Move V3, [X8+32]
	076 Multiply S0, S8, S0
	077 Multiply S1, S9, S1
	078 Add S0, S0, S1
	079 Multiply S1, S10, S3
	080 Add S0, S1, S0
	081 NotImplemented "Instruction FCMP not yet implemented."
	082 Move X0, X19
	083 Call InventoryBag.CheckToAddItem, X0
	084 Move X0, X31
	085 Call TickTimer.get_None
	086 And X1, X0, 0
	087 Move X0, X19
	088 Call InventoryBag.set_emptyingTimer, X0, X1
	089 Move X8, -19603456
	090 Move V1, [X8+864]
	091 NotImplemented "Instruction FCMP not yet implemented."
	092 Add X8, X31, 0
	093 Move X0, X19
	094 Call InventoryBag.get_containedObjects, X0
	095 Move X9, 0x235B000
	096 Move V0, [X31]
	097 Move X8, [X31+16]
	098 Move X9, [X9+64]
	099 Add X0, X31, 32
	100 Move W1, W31
	101 Move [X31+2], V0
	102 Move X2, [X9]
	103 Move [X31+48], X8
	104 Call NetworkArray`1<NetworkId>.get_Item, X0, X1
	105 Move X8, 0x235A000
	106 Move X8, [X8+920]
	107 Move X20, X0
	108 Move X8, [X8]
	109 Move W9, [X8+224]
	110 Compare W9, 0
	111 JumpIfNotEqual {114}
	112 Move X0, X8
	113 Call 0x1C17DFC
	114 Compare W20, 0
	115 JumpIfEqual {147}
	116 Move X0, X19
	117 Call InventoryBag.get_emptyingTimer, X0
	118 Move [X31+24], W0
	119 Add X0, X31, 24
	120 Move X1, X31
	121 Call TickTimer.get_IsRunning, X0
	122 Move TEMP, X0
	123 And TEMP, TEMP, 1
	124 Compare TEMP, 1
	125 JumpIfNotEqual {143}
	126 Move X0, X19
	127 Call InventoryBag.get_emptyingTimer, X0
	128 Move [X31+24], W0
	129 Move X1, [X19+56]
	130 Add X0, X31, 24
	131 Move X2, X31
	132 Call TickTimer.Expired, X0, X1
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {147}
	137 Move X0, X19
	138 Call InventoryBag.CheckToEmptyItem, X0
	139 Move TEMP, X0
	140 And TEMP, TEMP, 1
	141 Compare TEMP, 1
	142 JumpIfNotEqual {147}
	143 Move X0, [X19+56]
	144 Move S0, 0.25
	145 Move X1, X31
	146 Call TickTimer.CreateFromSeconds, X0, V0
	147 Move X20, [X31+96]
	148 Move X19, [X31+104]
	149 Move X30, [X31+88]
	150 Move D9, [X31+72]
	151 Move D8, [X31+80]
	152 Move V10, [X31+64]
	153 Add X31, X31, 112
	154 Return 
	155 Call 0x1C17F20

Method: System.Void Explode()

Disassembly:
	0x01D9DFA8 RET
	0x01D9DFAC BL 0x1C16F20
	0x01D9DFB0 STR D8, [X31 - 0x30]!
	0x01D9DFB4 STP X30, X21, [X31 + 0x10]
	0x01D9DFB8 STP X20, X19, [X31 + 0x20]
	0x01D9DFBC ADRP X21, 0x263B000
	0x01D9DFC0 ADRP X20, 0x235A000
	0x01D9DFC4 LDRB W8, [X21 + 0xA57]
	0x01D9DFC8 LDR X20, [X20 + 0xB8]
	0x01D9DFCC MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call InventoryBag.EmptyContents, X0
	005 Move X0, [X19+56]
	006 Compare X0, 0
	007 JumpIfEqual {14}
	008 Move X1, [X19+64]
	009 Move X2, X31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Call NetworkRunner.Despawn, X0, X1
	013 Return 
	014 Call 0x1C17F20

Method: System.Void EmptyContents()

Disassembly:
	0x01D9DFD0 TBNZ X8, 0x0, 0x1D9E000
	0x01D9DFD4 ADRP X0, 0x235A000
	0x01D9DFD8 LDR X0, [X0 + 0xB8]
	0x01D9DFDC BL 0x1C16CF4
	0x01D9DFE0 ADRP X0, 0x235A000
	0x01D9DFE4 LDR X0, [X0 + 0xC0]
	0x01D9DFE8 BL 0x1C16CF4
	0x01D9DFEC ADRP X0, 0x235A000
	0x01D9DFF0 LDR X0, [X0 + 0x118]
	0x01D9DFF4 BL 0x1C16CF4
	0x01D9DFF8 MOVZ W8, 0x1
	0x01D9DFFC STRB W8, [X21 + 0xA57]
	0x01D9E000 MOV X0, X31
	0x01D9E004 BL 0x3C3C88C
	0x01D9E008 LDR X8, [X20]
	0x01D9E00C LDR X8, [X8 + 0xB8]
	0x01D9E010 LDR W9, [X8]
	0x01D9E014 SUB W9, W0, W9
	0x01D9E018 CMP W9, 0x1
	0x01D9E01C B.LT 0x1D9E094
	0x01D9E020 LDRB W8, [X8 + 0x8]
	0x01D9E024 CBZ W8, 0x1D9E094
	0x01D9E028 MOV X0, X31
	0x01D9E02C BL 0x3C3C6C4
	0x01D9E030 LDR X8, [X20]
	0x01D9E034 ADRP X9, 0x2359000
	0x01D9E038 MOV V8.16B, V0.16B
	0x01D9E03C LDR X8, [X8 + 0xB8]
	0x01D9E040 LDR X9, [X9 + 0x118]
	0x01D9E044 ADD X0, X8, 0x8
	0x01D9E048 LDR X1, [X9]
	0x01D9E04C BL 0x243AC20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x263C000
	006 Move W8, [X20+2631]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x235B000
	013 Move X0, [X0+72]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2631], W8
	017 Add X8, X31, 8
	018 Move X0, X19
	019 Call InventoryBag.get_containedObjects, X0
	020 Move W8, [X31+16]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W20, W31
	023 Move X0, X19
	024 Call InventoryBag.CheckToEmptyItem, X0
	025 Add X8, X31, 8
	026 Move X0, X19
	027 Add W20, W20, 1
	028 Call InventoryBag.get_containedObjects, X0
	029 Move W8, [X31+16]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, [X31+48]
	032 Move X19, [X31+56]
	033 Move X30, [X31+32]
	034 Add X31, X31, 64
	035 Return 

Method: System.Collections.Generic.List`1<AnimalCompany.GrabbableItem> GetContainedItems()

Disassembly:
	0x01D9E050 MOVZ W8, 0x42700000
	0x01D9E054 FSUB S0, S8, S0
	0x01D9E058 FMOV S1, W8
	0x01D9E05C FCMP S0, S1
	0x01D9E060 B.LE 0x1D9E080
	0x01D9E064 LDR X8, [X20]
	0x01D9E068 MOV X0, X19
	0x01D9E06C LDR X9, [X8 + 0xB8]
	0x01D9E070 STR X31, [X9 + 0x8]
	0x01D9E074 LDR X8, [X8 + 0xB8]
	0x01D9E078 STR W31, [X8 + 0x4]
	0x01D9E07C BL 0x1D9DC74
	0x01D9E080 MOV X0, X31
	0x01D9E084 BL 0x3C3C88C
	0x01D9E088 LDR X8, [X20]
	0x01D9E08C LDR X8, [X8 + 0xB8]
	0x01D9E090 STR W0, [X8]
	0x01D9E094 LDP X20, X19, [X31 + 0x20]
	0x01D9E098 LDP X30, X21, [X31 + 0x10]
	0x01D9E09C LDR V8, [X31], #0x30
	0x01D9E0A0 RET
	0x01D9E0A4 CMP W1, 0xD
	0x01D9E0A8 B.EQ 0x1D9E0C4
	0x01D9E0AC CMP W1, 0x113
	0x01D9E0B0 B.EQ 0x1D9E0C8
	0x01D9E0B4 CMP W1, 0x114
	0x01D9E0B8 B.NE 0x1D9E0D0
	0x01D9E0BC MOVN W1, 0x0
	0x01D9E0C0 B 0x1D9E0D4
	0x01D9E0C4 B 0x1D9E13C
	0x01D9E0C8 MOVZ W1, 0x1
	0x01D9E0CC B 0x1D9E0D4
	0x01D9E0D0 RET
	0x01D9E0D4 STP X30, X21, [X31 - 0x20]!
	0x01D9E0D8 STP X20, X19, [X31 + 0x10]
	0x01D9E0DC ADRP X21, 0x263A000
	0x01D9E0E0 LDRB W8, [X21 + 0xA58]
	0x01D9E0E4 MOV W20, W1
	0x01D9E0E8 MOV X19, X0
	0x01D9E0EC TBNZ X8, 0x0, 0x1D9E104
	0x01D9E0F0 ADRP X0, 0x2359000
	0x01D9E0F4 LDR X0, [X0 + 0x100]
	0x01D9E0F8 BL 0x1C16CF4
	0x01D9E0FC MOVZ W8, 0x1
	0x01D9E100 STRB W8, [X21 + 0xA58]
	0x01D9E104 LDR X8, [X19 + 0x20]
	0x01D9E108 CBZ X8, 0x1D9E138
	0x01D9E10C LDR W8, [X8 + 0x18]
	0x01D9E110 LDR W9, [X19 + 0x68]
	0x01D9E114 MOV X0, X19
	0x01D9E118 ADD W10, W8, W20
	0x01D9E11C ADD W9, W10, W9
	0x01D9E120 SDIV W10, W9, W8
	0x01D9E124 MSUB W8, W10, W8, W9
	0x01D9E128 STR W8, [X19 + 0x68]
	0x01D9E12C LDP X20, X19, [X31 + 0x10]
	0x01D9E130 LDP X30, X21, [X31], #0x20
	0x01D9E134 B 0x1D9DC74
	0x01D9E138 BL 0x1C16F20
	0x01D9E13C SUB X31, X31, 0x160
	0x01D9E140 STR D10, [X31 + 0xE0]
	0x01D9E144 STP D9, D8, [X31 + 0xF0]
	0x01D9E148 STP X29, X30, [X31 + 0x100]
	0x01D9E14C STP X28, X27, [X31 + 0x110]
	0x01D9E150 STP X26, X25, [X31 + 0x120]
	0x01D9E154 STP X24, X23, [X31 + 0x130]
	0x01D9E158 STP X22, X21, [X31 + 0x140]
	0x01D9E15C STP X20, X19, [X31 + 0x150]
	0x01D9E160 ADRP X20, 0x263A000
	0x01D9E164 LDRB W8, [X20 + 0xA59]
	0x01D9E168 MOV X19, X0
	0x01D9E16C TBNZ X8, 0x0, 0x1D9E298
	0x01D9E170 ADRP X0, 0x2355000
	0x01D9E174 LDR X0, [X0 + 0xB50]
	0x01D9E178 BL 0x1C16CF4
	0x01D9E17C ADRP X0, 0x2358000
	0x01D9E180 LDR X0, [X0 + 0xBB8]
	0x01D9E184 BL 0x1C16CF4
	0x01D9E188 ADRP X0, 0x2359000
	0x01D9E18C LDR X0, [X0 + 0x130]
	0x01D9E190 BL 0x1C16CF4
	0x01D9E194 ADRP X0, 0x2355000
	0x01D9E198 LDR X0, [X0 + 0x758]
	0x01D9E19C BL 0x1C16CF4
	0x01D9E1A0 ADRP X0, 0x2359000
	0x01D9E1A4 LDR X0, [X0 + 0xB8]
	0x01D9E1A8 BL 0x1C16CF4
	0x01D9E1AC ADRP X0, 0x2359000
	0x01D9E1B0 LDR X0, [X0 + 0x108]
	0x01D9E1B4 BL 0x1C16CF4
	0x01D9E1B8 ADRP X0, 0x2357000
	0x01D9E1BC LDR X0, [X0 + 0x9A0]
	0x01D9E1C0 BL 0x1C16CF4
	0x01D9E1C4 ADRP X0, 0x2358000
	0x01D9E1C8 LDR X0, [X0 + 0xB58]
	0x01D9E1CC BL 0x1C16CF4
	0x01D9E1D0 ADRP X0, 0x2358000
	0x01D9E1D4 LDR X0, [X0 + 0xB60]
	0x01D9E1D8 BL 0x1C16CF4
	0x01D9E1DC ADRP X0, 0x2359000
	0x01D9E1E0 LDR X0, [X0 + 0x138]
	0x01D9E1E4 BL 0x1C16CF4
	0x01D9E1E8 ADRP X0, 0x2359000
	0x01D9E1EC LDR X0, [X0 + 0xC0]
	0x01D9E1F0 BL 0x1C16CF4
	0x01D9E1F4 ADRP X0, 0x2355000
	0x01D9E1F8 LDR X0, [X0 + 0x598]
	0x01D9E1FC BL 0x1C16CF4
	0x01D9E200 ADRP X0, 0x2359000
	0x01D9E204 LDR X0, [X0 + 0x140]
	0x01D9E208 BL 0x1C16CF4
	0x01D9E20C ADRP X0, 0x2357000
	0x01D9E210 LDR X0, [X0 + 0x7C8]
	0x01D9E214 BL 0x1C16CF4
	0x01D9E218 ADRP X0, 0x2359000
	0x01D9E21C LDR X0, [X0 + 0x148]
	0x01D9E220 BL 0x1C16CF4
	0x01D9E224 ADRP X0, 0x2359000
	0x01D9E228 LDR X0, [X0 + 0x150]
	0x01D9E22C BL 0x1C16CF4
	0x01D9E230 ADRP X0, 0x2359000
	0x01D9E234 LDR X0, [X0 + 0x158]
	0x01D9E238 BL 0x1C16CF4
	0x01D9E23C ADRP X0, 0x2359000
	0x01D9E240 LDR X0, [X0 + 0x160]
	0x01D9E244 BL 0x1C16CF4
	0x01D9E248 ADRP X0, 0x2359000
	0x01D9E24C LDR X0, [X0 + 0x168]
	0x01D9E250 BL 0x1C16CF4
	0x01D9E254 ADRP X0, 0x2359000
	0x01D9E258 LDR X0, [X0 + 0x170]
	0x01D9E25C BL 0x1C16CF4
	0x01D9E260 ADRP X0, 0x2359000
	0x01D9E264 LDR X0, [X0 + 0x178]
	0x01D9E268 BL 0x1C16CF4
	0x01D9E26C ADRP X0, 0x2359000
	0x01D9E270 LDR X0, [X0 + 0x180]
	0x01D9E274 BL 0x1C16CF4
	0x01D9E278 ADRP X0, 0x2358000
	0x01D9E27C LDR X0, [X0 + 0xD70]
	0x01D9E280 BL 0x1C16CF4
	0x01D9E284 ADRP X0, 0x2359000
	0x01D9E288 LDR X0, [X0 + 0x188]
	0x01D9E28C BL 0x1C16CF4
	0x01D9E290 MOVZ W8, 0x1
	0x01D9E294 STRB W8, [X20 + 0xA59]
	0x01D9E298 ADRP X22, 0x263A000
	0x01D9E29C LDRB W8, [X22 + 0xABF]
	0x01D9E2A0 STR X31, [X31 + 0xE8]
	0x01D9E2A4 STR X31, [X31 + 0xD8]
	0x01D9E2A8 STP X31, X31, [X31 + 0xC0]
	0x01D9E2AC STR W31, [X31 + 0xD0]
	0x01D9E2B0 STP X31, X31, [X31 + 0xA0]
	0x01D9E2B4 STR W31, [X31 + 0xB0]
	0x01D9E2B8 CBNZ W8, 0x1D9E2D0
	0x01D9E2BC ADRP X0, 0x2358000
	0x01D9E2C0 LDR X0, [X0 + 0xD28]
	0x01D9E2C4 BL 0x1C16CF4
	0x01D9E2C8 MOVZ W8, 0x1
	0x01D9E2CC STRB W8, [X22 + 0xABF]
	0x01D9E2D0 ADRP X23, 0x2358000
	0x01D9E2D4 LDR X23, [X23 + 0xD28]
	0x01D9E2D8 ADRP X27, 0x2355000
	0x01D9E2DC LDR X8, [X23]
	0x01D9E2E0 LDR X8, [X8 + 0xB8]
	0x01D9E2E4 LDR X0, [X8 + 0x38]
	0x01D9E2E8 LDR X27, [X27 + 0x598]
	0x01D9E2EC CBZ X0, 0x1D9E300
	0x01D9E2F0 MOV X1, X31
	0x01D9E2F4 BL 0x1DBAC58
	0x01D9E2F8 MOV X20, X0
	0x01D9E2FC B 0x1D9E304
	0x01D9E300 MOV X20, X31
	0x01D9E304 LDR X0, [X27]
	0x01D9E308 LDR W8, [X0 + 0xE0]
	0x01D9E30C CBNZ W8, 0x1D9E314
	0x01D9E310 BL 0x1C16DFC
	0x01D9E314 MOV X0, X20
	0x01D9E318 MOV X1, X31
	0x01D9E31C MOV X2, X31
	0x01D9E320 BL 0x3C3883C
	0x01D9E324 TBNZ X0, 0x0, 0x1D9EBAC

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], X30
	003 Move [X31+112], X28
	004 Move [X31+120], X27
	005 Move [X31+128], X26
	006 Move [X31+136], X25
	007 Move [X31+144], X24
	008 Move [X31+152], X23
	009 Move [X31+160], X22
	010 Move [X31+168], X21
	011 Move [X31+176], X20
	012 Move [X31+184], X19
	013 Move X22, 0x263B000
	014 Move X21, 0x235A000
	015 Move X20, 0x235A000
	016 Move W8, [X22+2632]
	017 Move X21, [X21+128]
	018 Move X20, [X20+136]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {53}
	024 Move X0, 0x2359000
	025 Move X0, [X0+3000]
	026 Call 0x1C17CF4
	027 Move X0, 0x235A000
	028 Move X0, [X0+144]
	029 Call 0x1C17CF4
	030 Move X0, 0x235A000
	031 Move X0, [X0+136]
	032 Call 0x1C17CF4
	033 Move X0, 0x235A000
	034 Move X0, [X0+128]
	035 Call 0x1C17CF4
	036 Move X0, 0x235A000
	037 Move X0, [X0+112]
	038 Call 0x1C17CF4
	039 Move X0, 0x235A000
	040 Move X0, [X0+64]
	041 Call 0x1C17CF4
	042 Move X0, 0x235A000
	043 Move X0, [X0+72]
	044 Call 0x1C17CF4
	045 Move X0, 0x2359000
	046 Move X0, [X0+920]
	047 Call 0x1C17CF4
	048 Move X0, 0x2356000
	049 Move X0, [X0+1432]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X22+2632], W8
	053 Move X0, [X21]
	054 Move [X31+64], X31
	055 Move [X31+72], X31
	056 Move [X31+80], X31
	057 Call 0x1C17F10
	058 Move X1, [X20]
	059 Move X20, X0
	060 Call List`1<Object>..ctor, X0
	061 Add X8, X31, 8
	062 Move X0, X19
	063 Call InventoryBag.get_containedObjects, X0
	064 NotImplemented "Instruction LDUR not yet implemented."
	065 Move X9, [X31+24]
	066 Move [X31+4], V0
	067 Move W8, [X31+72]
	068 Move [X31+2], V0
	069 Move [X31+80], X9
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X23, 0x235A000
	072 Move X24, 0x2359000
	073 Move X25, 0x235A000
	074 Move X26, 0x2356000
	075 Move X27, 0x2359000
	076 Move X28, 0x235A000
	077 Move X23, [X23+64]
	078 Move X24, [X24+920]
	079 Move X25, [X25+112]
	080 Move X26, [X26+1432]
	081 Move X27, [X27+3000]
	082 Move X28, [X28+144]
	083 Move W21, W31
	084 Add X8, X31, 32
	085 Move X0, X19
	086 Call InventoryBag.get_containedObjects, X0
	087 Move V0, [X31+2]
	088 Move X8, [X31+48]
	089 Move X2, [X23]
	090 Add X0, X31, 64
	091 Move W1, W21
	092 Move [X31+4], V0
	093 Move [X31+80], X8
	094 Call NetworkArray`1<NetworkId>.get_Item, X0, X1
	095 Move X8, [X24]
	096 Move X22, X0
	097 Move W9, [X8+224]
	098 Compare W9, 0
	099 JumpIfEqual {102}
	100 Compare W22, 0
	101 JumpIfNotEqual {106}
	102 Move X0, X8
	103 Call 0x1C17DFC
	104 Compare W22, 0
	105 JumpIfEqual {181}
	106 Add X8, X31, 32
	107 Move X0, X19
	108 Call InventoryBag.get_containedObjects, X0
	109 Move V0, [X31+2]
	110 Move X8, [X31+48]
	111 Move X2, [X25]
	112 Add X0, X31, 64
	113 Move W1, W21
	114 Move [X31+4], V0
	115 Move [X31+80], X8
	116 Call NetworkArray`1<NetworkId>.Get, X0, X1
	117 Move X8, [X19+56]
	118 Compare X8, 0
	119 JumpIfEqual {206}
	120 And X1, X0, 0
	121 Move X0, X8
	122 Move X2, X31
	123 Call NetworkRunner.FindObject, X0, X1
	124 Move X8, [X26]
	125 Move X22, X0
	126 Move W9, [X8+224]
	127 Compare W9, 0
	128 JumpIfNotEqual {131}
	129 Move X0, X8
	130 Call 0x1C17DFC
	131 Move X0, X22
	132 Move X1, X31
	133 Move X2, X31
	134 Call Object.op_Inequality, X0, X1
	135 Move TEMP, X0
	136 And TEMP, TEMP, 1
	137 Compare TEMP, 1
	138 JumpIfNotEqual {181}
	139 Compare X22, 0
	140 JumpIfEqual {206}
	141 Move X1, [X27]
	142 Move X0, X22
	143 Call 0x21A4894, X0
	144 Move X8, [X26]
	145 Move X22, X0
	146 Move W9, [X8+224]
	147 Compare W9, 0
	148 JumpIfNotEqual {151}
	149 Move X0, X8
	150 Call 0x1C17DFC
	151 Move X0, X22
	152 Move X1, X31
	153 Move X2, X31
	154 Call Object.op_Inequality, X0, X1
	155 Move TEMP, X0
	156 And TEMP, TEMP, 1
	157 Compare TEMP, 1
	158 JumpIfNotEqual {181}
	159 Compare X20, 0
	160 JumpIfEqual {206}
	161 Move W10, [X20+28]
	162 Move X8, [X20+16]
	163 Move X9, [X28]
	164 Add W10, W10, 1
	165 Move [X20+28], W10
	166 Compare X8, 0
	167 JumpIfEqual {206}
	168 NotImplemented "Instruction LDRSW not yet implemented."
	169 Move W11, [X8+24]
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Add W9, W10, 1
	172 Add X8, X8, X10
	173 Move [X20+24], W9
	174 Move [X8+32], X22
	175 Move X8, [X9+32]
	176 Move X0, X20
	177 Move X1, X22
	178 Move X8, [X8+192]
	179 Move X2, [X8+112]
	180 Call List`1<Object>.AddWithResize, X0, X1
	181 Add X8, X31, 8
	182 Move X0, X19
	183 Add W21, W21, 1
	184 Call InventoryBag.get_containedObjects, X0
	185 NotImplemented "Instruction LDUR not yet implemented."
	186 Move X9, [X31+24]
	187 Move [X31+4], V0
	188 Move W8, [X31+72]
	189 Move [X31+2], V0
	190 Move [X31+80], X9
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move X0, X20
	193 Move X20, [X31+176]
	194 Move X19, [X31+184]
	195 Move X22, [X31+160]
	196 Move X21, [X31+168]
	197 Move X24, [X31+144]
	198 Move X23, [X31+152]
	199 Move X26, [X31+128]
	200 Move X25, [X31+136]
	201 Move X28, [X31+112]
	202 Move X27, [X31+120]
	203 Move X30, [X31+96]
	204 Add X31, X31, 192
	205 Return X0
	206 Call 0x1C17F20

Method: System.Void RespawnOrDespawnContainedObjects()

Disassembly:
	0x01D9D1BC B 0x1D9D2D0
	0x01D9D1C0 MOV X0, X8
	0x01D9D1C4 BL 0x1C16DFC
	0x01D9D1C8 CBZ W22, 0x1D9D2D0
	0x01D9D1CC ADD X8, X31, 0x20
	0x01D9D1D0 MOV X0, X19
	0x01D9D1D4 BL 0x1D9B73C
	0x01D9D1D8 LDR V0, [X31 + 0x2]
	0x01D9D1DC LDR X8, [X31 + 0x30]
	0x01D9D1E0 LDR X2, [X25]
	0x01D9D1E4 ADD X0, X31, 0x40
	0x01D9D1E8 MOV W1, W21
	0x01D9D1EC STR V0, [X31 + 0x4]
	0x01D9D1F0 STR X8, [X31 + 0x50]
	0x01D9D1F4 BL 0x240C380
	0x01D9D1F8 LDR X8, [X19 + 0x38]
	0x01D9D1FC CBZ X8, 0x1D9D324
	0x01D9D200 AND X1, X0, 0x0
	0x01D9D204 MOV X0, X8
	0x01D9D208 MOV X2, X31
	0x01D9D20C BL 0x1EA3204
	0x01D9D210 LDR X8, [X26]
	0x01D9D214 MOV X22, X0
	0x01D9D218 LDR W9, [X8 + 0xE0]
	0x01D9D21C CBNZ W9, 0x1D9D228
	0x01D9D220 MOV X0, X8
	0x01D9D224 BL 0x1C16DFC
	0x01D9D228 MOV X0, X22
	0x01D9D22C MOV X1, X31
	0x01D9D230 MOV X2, X31
	0x01D9D234 BL 0x3C354F8
	0x01D9D238 TBZ X0, 0x0, 0x1D9D2D0
	0x01D9D23C CBZ X22, 0x1D9D324
	0x01D9D240 LDR X1, [X27]
	0x01D9D244 MOV X0, X22
	0x01D9D248 BL 0x21A3894
	0x01D9D24C LDR X8, [X26]
	0x01D9D250 MOV X22, X0
	0x01D9D254 LDR W9, [X8 + 0xE0]
	0x01D9D258 CBNZ W9, 0x1D9D264
	0x01D9D25C MOV X0, X8
	0x01D9D260 BL 0x1C16DFC
	0x01D9D264 MOV X0, X22
	0x01D9D268 MOV X1, X31
	0x01D9D26C MOV X2, X31
	0x01D9D270 BL 0x3C354F8
	0x01D9D274 TBZ X0, 0x0, 0x1D9D2D0
	0x01D9D278 CBZ X20, 0x1D9D324
	0x01D9D27C LDR W10, [X20 + 0x1C]
	0x01D9D280 LDR X8, [X20 + 0x10]
	0x01D9D284 LDR X9, [X28]
	0x01D9D288 ADD W10, W10, 0x1
	0x01D9D28C STR W10, [X20 + 0x1C]
	0x01D9D290 CBZ X8, 0x1D9D324
	0x01D9D294 LDRSW X10, [X20 + 0x18]
	0x01D9D298 LDR W11, [X8 + 0x18]
	0x01D9D29C CMP W10, W11
	0x01D9D2A0 B.CS 0x1D9D2B8
	0x01D9D2A4 ADD W9, W10, 0x1
	0x01D9D2A8 ADD X8, X8, X10, 0x3, LSL
	0x01D9D2AC STR W9, [X20 + 0x18]
	0x01D9D2B0 STR X22, [X8 + 0x20]
	0x01D9D2B4 B 0x1D9D2D0
	0x01D9D2B8 LDR X8, [X9 + 0x20]
	0x01D9D2BC MOV X0, X20
	0x01D9D2C0 MOV X1, X22
	0x01D9D2C4 LDR X8, [X8 + 0xC0]
	0x01D9D2C8 LDR X2, [X8 + 0x70]
	0x01D9D2CC BL 0x301BF90
	0x01D9D2D0 ADD X8, X31, 0x8
	0x01D9D2D4 MOV X0, X19
	0x01D9D2D8 ADD W21, W21, 0x1
	0x01D9D2DC BL 0x1D9B73C
	0x01D9D2E0 LDUR V0, [X31 + 0x8]
	0x01D9D2E4 LDR X9, [X31 + 0x18]
	0x01D9D2E8 STR V0, [X31 + 0x4]
	0x01D9D2EC LDR W8, [X31 + 0x48]
	0x01D9D2F0 STR V0, [X31 + 0x2]
	0x01D9D2F4 STR X9, [X31 + 0x50]
	0x01D9D2F8 CMP W21, W8
	0x01D9D2FC B.LT 0x1D9D17C
	0x01D9D300 MOV X0, X20
	0x01D9D304 LDP X20, X19, [X31 + 0xB0]
	0x01D9D308 LDP X22, X21, [X31 + 0xA0]
	0x01D9D30C LDP X24, X23, [X31 + 0x90]
	0x01D9D310 LDP X26, X25, [X31 + 0x80]
	0x01D9D314 LDP X28, X27, [X31 + 0x70]
	0x01D9D318 LDR X30, [X31 + 0x60]
	0x01D9D31C ADD X31, X31, 0xC0
	0x01D9D320 RET
	0x01D9D324 BL 0x1C16F20
	0x01D9D328 STR D8, [X31 - 0x20]!
	0x01D9D32C STR X30, [X31 + 0x8]
	0x01D9D330 STP X20, X19, [X31 + 0x10]
	0x01D9D334 ADRP X20, 0x263B000
	0x01D9D338 LDRB W8, [X20 + 0xA4A]
	0x01D9D33C MOV V8.16B, V0.16B
	0x01D9D340 MOV X19, X0
	0x01D9D344 TBNZ X8, 0x0, 0x1D9D35C
	0x01D9D348 ADRP X0, 0x2356000
	0x01D9D34C LDR X0, [X0 + 0x598]
	0x01D9D350 BL 0x1C16CF4
	0x01D9D354 MOVZ W8, 0x1
	0x01D9D358 STRB W8, [X20 + 0xA4A]
	0x01D9D35C LDR X8, [X19 + 0x80]
	0x01D9D360 CBZ X8, 0x1D9D404
	0x01D9D364 LDR X0, [X8 + 0x168]
	0x01D9D368 CBZ X0, 0x1D9D404
	0x01D9D36C MOV X1, X31
	0x01D9D370 BL 0x3C8EBE8
	0x01D9D374 FCMP S0, S8
	0x01D9D378 B.EQ 0x1D9D3F4
	0x01D9D37C LDR X8, [X19 + 0x80]
	0x01D9D380 CBZ X8, 0x1D9D404
	0x01D9D384 LDR X0, [X8 + 0x168]
	0x01D9D388 CBZ X0, 0x1D9D404
	0x01D9D38C MOV V0.16B, V8.16B
	0x01D9D390 MOV X1, X31
	0x01D9D394 BL 0x3C8EC24
	0x01D9D398 LDR X8, [X19 + 0x80]
	0x01D9D39C CBZ X8, 0x1D9D404
	0x01D9D3A0 ADRP X9, 0x2356000
	0x01D9D3A4 LDR X9, [X9 + 0x598]
	0x01D9D3A8 LDR X20, [X8 + 0x150]
	0x01D9D3AC LDR X0, [X9]
	0x01D9D3B0 LDR W9, [X0 + 0xE0]
	0x01D9D3B4 CBNZ W9, 0x1D9D3BC
	0x01D9D3B8 BL 0x1C16DFC
	0x01D9D3BC MOV X0, X20
	0x01D9D3C0 MOV X1, X31
	0x01D9D3C4 MOV X2, X31
	0x01D9D3C8 BL 0x3C354F8
	0x01D9D3CC TBZ X0, 0x0, 0x1D9D3F4
	0x01D9D3D0 LDR X8, [X19 + 0x80]
	0x01D9D3D4 CBZ X8, 0x1D9D404
	0x01D9D3D8 LDR X0, [X8 + 0x150]
	0x01D9D3DC CBZ X0, 0x1D9D404
	0x01D9D3E0 LDP X20, X19, [X31 + 0x10]
	0x01D9D3E4 LDR X30, [X31 + 0x8]
	0x01D9D3E8 MOV X1, X31
	0x01D9D3EC LDR V8, [X31], #0x20

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], X30
	003 Move [X31+112], X26
	004 Move [X31+120], X25
	005 Move [X31+128], X24
	006 Move [X31+136], X23
	007 Move [X31+144], X22
	008 Move [X31+152], X21
	009 Move [X31+160], X20
	010 Move [X31+168], X19
	011 Move X20, 0x263C000
	012 Move W8, [X20+2633]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {38}
	018 Move X0, 0x235A000
	019 Move X0, [X0+3000]
	020 Call 0x1C17CF4
	021 Move X0, 0x235B000
	022 Move X0, [X0+112]
	023 Call 0x1C17CF4
	024 Move X0, 0x235B000
	025 Move X0, [X0+64]
	026 Call 0x1C17CF4
	027 Move X0, 0x235B000
	028 Move X0, [X0+72]
	029 Call 0x1C17CF4
	030 Move X0, 0x235A000
	031 Move X0, [X0+920]
	032 Call 0x1C17CF4
	033 Move X0, 0x2357000
	034 Move X0, [X0+1432]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+2633], W8
	038 Add X8, X31, 8
	039 Move X0, X19
	040 Move [X31+64], X31
	041 Move [X31+72], X31
	042 Move [X31+80], X31
	043 Call InventoryBag.get_containedObjects, X0
	044 NotImplemented "Instruction LDUR not yet implemented."
	045 Move X9, [X31+24]
	046 Move [X31+4], V0
	047 Move W8, [X31+72]
	048 Move [X31+2], V0
	049 Move [X31+80], X9
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X22, 0x235B000
	052 Move X23, 0x235A000
	053 Move X24, 0x235B000
	054 Move X25, 0x2357000
	055 Move X26, 0x235A000
	056 Move X22, [X22+64]
	057 Move X23, [X23+920]
	058 Move X24, [X24+112]
	059 Move X25, [X25+1432]
	060 Move X26, [X26+3000]
	061 Move W20, W31
	062 Add X8, X31, 32
	063 Move X0, X19
	064 Call InventoryBag.get_containedObjects, X0
	065 Move V0, [X31+2]
	066 Move X8, [X31+48]
	067 Move X2, [X22]
	068 Add X0, X31, 64
	069 Move W1, W20
	070 Move [X31+4], V0
	071 Move [X31+80], X8
	072 Call NetworkArray`1<NetworkId>.get_Item, X0, X1
	073 Move X8, [X23]
	074 Move X21, X0
	075 Move W9, [X8+224]
	076 Compare W9, 0
	077 JumpIfEqual {80}
	078 Compare W21, 0
	079 JumpIfNotEqual {84}
	080 Move X0, X8
	081 Call 0x1C17DFC
	082 Compare W21, 0
	083 JumpIfEqual {142}
	084 Add X8, X31, 32
	085 Move X0, X19
	086 Call InventoryBag.get_containedObjects, X0
	087 Move V0, [X31+2]
	088 Move X8, [X31+48]
	089 Move X2, [X24]
	090 Add X0, X31, 64
	091 Move W1, W20
	092 Move [X31+4], V0
	093 Move [X31+80], X8
	094 Call NetworkArray`1<NetworkId>.Get, X0, X1
	095 Move X8, [X19+56]
	096 Compare X8, 0
	097 JumpIfEqual {164}
	098 And X1, X0, 0
	099 Move X0, X8
	100 Move X2, X31
	101 Call NetworkRunner.FindObject, X0, X1
	102 Move X8, [X25]
	103 Move X21, X0
	104 Move W9, [X8+224]
	105 Compare W9, 0
	106 JumpIfNotEqual {109}
	107 Move X0, X8
	108 Call 0x1C17DFC
	109 Move X0, X21
	110 Move X1, X31
	111 Move X2, X31
	112 Call Object.op_Inequality, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfNotEqual {142}
	117 Compare X21, 0
	118 JumpIfEqual {164}
	119 Move X1, [X26]
	120 Move X0, X21
	121 Call 0x21A4894, X0
	122 Move X8, [X25]
	123 Move X21, X0
	124 Move W9, [X8+224]
	125 Compare W9, 0
	126 JumpIfNotEqual {129}
	127 Move X0, X8
	128 Call 0x1C17DFC
	129 Move X0, X21
	130 Move X1, X31
	131 Move X2, X31
	132 Call Object.op_Inequality, X0, X1
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {142}
	137 Compare X21, 0
	138 JumpIfEqual {164}
	139 Move X0, X21
	140 Move X1, X31
	141 Call GrabbableItem.RespawnOrDespawn, X0
	142 Add X8, X31, 8
	143 Move X0, X19
	144 Add W20, W20, 1
	145 Call InventoryBag.get_containedObjects, X0
	146 NotImplemented "Instruction LDUR not yet implemented."
	147 Move X9, [X31+24]
	148 Move [X31+4], V0
	149 Move W8, [X31+72]
	150 Move [X31+2], V0
	151 Move [X31+80], X9
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move X20, [X31+160]
	154 Move X19, [X31+168]
	155 Move X22, [X31+144]
	156 Move X21, [X31+152]
	157 Move X24, [X31+128]
	158 Move X23, [X31+136]
	159 Move X26, [X31+112]
	160 Move X25, [X31+120]
	161 Move X30, [X31+96]
	162 Add X31, X31, 176
	163 Return 
	164 Call 0x1C17F20

Method: System.Void UpdateMass(System.Single mass)

Disassembly:
	0x01D9E328 LDRB W8, [X22 + 0xABF]
	0x01D9E32C CBNZ W8, 0x1D9E344
	0x01D9E330 ADRP X0, 0x2358000
	0x01D9E334 LDR X0, [X0 + 0xD28]
	0x01D9E338 BL 0x1C16CF4
	0x01D9E33C MOVZ W8, 0x1
	0x01D9E340 STRB W8, [X22 + 0xABF]
	0x01D9E344 LDR X8, [X23]
	0x01D9E348 LDR X8, [X8 + 0xB8]
	0x01D9E34C LDR X0, [X8 + 0x38]
	0x01D9E350 CBZ X0, 0x1D9EBD4
	0x01D9E354 MOV X1, X31
	0x01D9E358 BL 0x1DBAC58
	0x01D9E35C CBZ X0, 0x1D9EBD4
	0x01D9E360 MOV X1, X31
	0x01D9E364 BL 0x1E9E7CC
	0x01D9E368 TBZ X0, 0x0, 0x1D9EBAC
	0x01D9E36C MOV X0, X19
	0x01D9E370 BL 0x1D9DFB0
	0x01D9E374 BL 0x1D9D7BC
	0x01D9E378 TBNZ X0, 0x0, 0x1D9EBAC
	0x01D9E37C LDR X0, [X19 + 0x20]
	0x01D9E380 CBZ X0, 0x1D9EBD4
	0x01D9E384 ADRP X8, 0x2359000
	0x01D9E388 LDR W1, [X19 + 0x68]
	0x01D9E38C LDR X8, [X8 + 0x108]
	0x01D9E390 LDR X2, [X8]
	0x01D9E394 BL 0x301BCCC
	0x01D9E398 CBZ X0, 0x1D9EBD4
	0x01D9E39C MOV X20, X0
	0x01D9E3A0 LDR W0, [X0 + 0x20]
	0x01D9E3A4 MOV X1, X31
	0x01D9E3A8 BL 0x1DD6EAC
	0x01D9E3AC TBZ X0, 0x0, 0x1D9E4A0
	0x01D9E3B0 LDR X0, [X27]
	0x01D9E3B4 LDR X21, [X20 + 0x38]
	0x01D9E3B8 LDR W8, [X0 + 0xE0]
	0x01D9E3BC CBNZ W8, 0x1D9E3C4
	0x01D9E3C0 BL 0x1C16DFC
	0x01D9E3C4 MOV X0, X21
	0x01D9E3C8 MOV X1, X31
	0x01D9E3CC BL 0x3C38948
	0x01D9E3D0 TBZ X0, 0x0, 0x1D9E4D8
	0x01D9E3D4 LDRB W8, [X22 + 0xABF]
	0x01D9E3D8 CBNZ W8, 0x1D9E3F0
	0x01D9E3DC ADRP X0, 0x2358000
	0x01D9E3E0 LDR X0, [X0 + 0xD28]
	0x01D9E3E4 BL 0x1C16CF4
	0x01D9E3E8 MOVZ W8, 0x1
	0x01D9E3EC STRB W8, [X22 + 0xABF]
	0x01D9E3F0 LDR X8, [X23]
	0x01D9E3F4 LDR X8, [X8 + 0xB8]
	0x01D9E3F8 LDR X0, [X8 + 0x38]
	0x01D9E3FC CBZ X0, 0x1D9EBD4
	0x01D9E400 MOV X1, X31
	0x01D9E404 BL 0x1DBAC58

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x263B000
	006 Move W8, [X20+2634]
	007 Move V8, V0
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2356000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+2634], W8
	018 Move X8, [X19+128]
	019 Compare X8, 0
	020 JumpIfEqual {73}
	021 Move X0, [X8+360]
	022 Compare X0, 0
	023 JumpIfEqual {73}
	024 Move X1, X31
	025 Call Rigidbody.get_mass, X0
	026 NotImplemented "Instruction FCMP not yet implemented."
	027 Move X8, [X19+128]
	028 Compare X8, 0
	029 JumpIfEqual {73}
	030 Move X0, [X8+360]
	031 Compare X0, 0
	032 JumpIfEqual {73}
	033 Move V0, V8
	034 Move X1, X31
	035 Call Rigidbody.set_mass, X0, V0
	036 Move X8, [X19+128]
	037 Compare X8, 0
	038 JumpIfEqual {73}
	039 Move X9, 0x2356000
	040 Move X9, [X9+1432]
	041 Move X20, [X8+336]
	042 Move X0, [X9]
	043 Move W9, [X0+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X20
	048 Move X1, X31
	049 Move X2, X31
	050 Call Object.op_Inequality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {68}
	055 Move X8, [X19+128]
	056 Compare X8, 0
	057 JumpIfEqual {73}
	058 Move X0, [X8+336]
	059 Compare X0, 0
	060 JumpIfEqual {73}
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X30, [X31+8]
	064 Move X1, X31
	065 Move V8, [X31+32]
	066 Call AttachedItemAnchor.UpdatedItemMass, X0
	067 Return 
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+8]
	071 Move V8, [X31+32]
	072 Return 
	073 Call 0x1C17F20

Method: System.Boolean CheckToEmptyItem()

Disassembly:
	0x01D9DADC MOV X0, X20
	0x01D9DAE0 LDP X20, X19, [X31 + 0x20]
	0x01D9DAE4 LDP X22, X21, [X31 + 0x10]
	0x01D9DAE8 MOV X1, X31
	0x01D9DAEC LDP X30, X23, [X31], #0x30
	0x01D9DAF0 B 0x1D36978
	0x01D9DAF4 STP X30, X21, [X31 - 0x20]!
	0x01D9DAF8 STP X20, X19, [X31 + 0x10]
	0x01D9DAFC ADRP X21, 0x263B000
	0x01D9DB00 ADRP X20, 0x2356000
	0x01D9DB04 LDRB W8, [X21 + 0xA55]
	0x01D9DB08 LDR X20, [X20 + 0x648]
	0x01D9DB0C MOV X19, X0
	0x01D9DB10 TBNZ X8, 0x0, 0x1D9DB64
	0x01D9DB14 ADRP X0, 0x2356000
	0x01D9DB18 LDR X0, [X0 + 0x648]
	0x01D9DB1C BL 0x1C16CF4
	0x01D9DB20 ADRP X0, 0x235A000
	0x01D9DB24 LDR X0, [X0 + 0xE0]
	0x01D9DB28 BL 0x1C16CF4
	0x01D9DB2C ADRP X0, 0x235A000
	0x01D9DB30 LDR X0, [X0 + 0xE8]
	0x01D9DB34 BL 0x1C16CF4
	0x01D9DB38 ADRP X0, 0x235A000
	0x01D9DB3C LDR X0, [X0 + 0xF0]
	0x01D9DB40 BL 0x1C16CF4
	0x01D9DB44 ADRP X0, 0x235A000
	0x01D9DB48 LDR X0, [X0 + 0xF8]
	0x01D9DB4C BL 0x1C16CF4
	0x01D9DB50 ADRP X0, 0x2357000
	0x01D9DB54 LDR X0, [X0 + 0x178]
	0x01D9DB58 BL 0x1C16CF4
	0x01D9DB5C MOVZ W8, 0x1
	0x01D9DB60 STRB W8, [X21 + 0xA55]
	0x01D9DB64 LDR X0, [X20]
	0x01D9DB68 LDR W8, [X0 + 0xE0]
	0x01D9DB6C CBNZ W8, 0x1D9DB74
	0x01D9DB70 BL 0x1C16DFC
	0x01D9DB74 ADRP X21, 0x263B000
	0x01D9DB78 LDRB W8, [X21 + 0x787]
	0x01D9DB7C CBNZ W8, 0x1D9DB94
	0x01D9DB80 ADRP X0, 0x2356000
	0x01D9DB84 LDR X0, [X0 + 0x648]
	0x01D9DB88 BL 0x1C16CF4
	0x01D9DB8C MOVZ W8, 0x1
	0x01D9DB90 STRB W8, [X21 + 0x787]
	0x01D9DB94 LDR X0, [X20]
	0x01D9DB98 LDR W8, [X0 + 0xE0]
	0x01D9DB9C CBNZ W8, 0x1D9DBA8
	0x01D9DBA0 BL 0x1C16DFC
	0x01D9DBA4 LDR X0, [X20]
	0x01D9DBA8 LDR X8, [X0 + 0xB8]
	0x01D9DBAC LDR X8, [X8]
	0x01D9DBB0 CBZ X8, 0x1D9DC6C
	0x01D9DBB4 LDR X8, [X8 + 0xB8]
	0x01D9DBB8 CBZ X8, 0x1D9DC6C
	0x01D9DBBC ADRP X9, 0x2357000
	0x01D9DBC0 LDR X9, [X9 + 0x178]
	0x01D9DBC4 LDR X0, [X8 + 0x98]
	0x01D9DBC8 LDR X1, [X9]
	0x01D9DBCC BL 0x2651A74
	0x01D9DBD0 LDRB W8, [X19 + 0x70]
	0x01D9DBD4 TBZ X0, 0x0, 0x1D9DC08
	0x01D9DBD8 CBNZ W8, 0x1D9DC60
	0x01D9DBDC LDR X0, [X19 + 0x20]
	0x01D9DBE0 MOVZ W8, 0x1
	0x01D9DBE4 STRB W8, [X19 + 0x70]
	0x01D9DBE8 CBZ X0, 0x1D9DC6C
	0x01D9DBEC ADRP X8, 0x235A000
	0x01D9DBF0 LDR X1, [X19 + 0x28]
	0x01D9DBF4 LDR X8, [X8 + 0xE8]
	0x01D9DBF8 LDP X20, X19, [X31 + 0x10]
	0x01D9DBFC LDR X2, [X8]
	0x01D9DC00 LDP X30, X21, [X31], #0x20
	0x01D9DC04 B 0x301C194
	0x01D9DC08 CBZ W8, 0x1D9DC60
	0x01D9DC0C ADRP X8, 0x235A000
	0x01D9DC10 LDR X20, [X19 + 0x20]
	0x01D9DC14 LDR X8, [X8 + 0xF8]
	0x01D9DC18 LDR X0, [X8]
	0x01D9DC1C BL 0x1C16F10
	0x01D9DC20 ADRP X8, 0x235A000
	0x01D9DC24 LDR X8, [X8 + 0xE0]
	0x01D9DC28 MOV X1, X19
	0x01D9DC2C MOV X3, X31
	0x01D9DC30 MOV X21, X0
	0x01D9DC34 LDR X2, [X8]
	0x01D9DC38 BL 0x24AD1FC
	0x01D9DC3C CBZ X20, 0x1D9DC6C
	0x01D9DC40 ADRP X8, 0x235A000
	0x01D9DC44 LDR X8, [X8 + 0xF0]
	0x01D9DC48 MOV X0, X20
	0x01D9DC4C LDP X20, X19, [X31 + 0x10]
	0x01D9DC50 MOV X1, X21
	0x01D9DC54 LDR X2, [X8]
	0x01D9DC58 LDP X30, X21, [X31], #0x20
	0x01D9DC5C B 0x301D8DC
	0x01D9DC60 LDP X20, X19, [X31 + 0x10]
	0x01D9DC64 LDP X30, X21, [X31], #0x20
	0x01D9DC68 RET
	0x01D9DC6C BL 0x1C16F20
	0x01D9DC70 B 0x1D9DC74
	0x01D9DC74 STR X30, [X31 - 0x30]!
	0x01D9DC78 STP X22, X21, [X31 + 0x10]
	0x01D9DC7C STP X20, X19, [X31 + 0x20]
	0x01D9DC80 ADRP X20, 0x263B000
	0x01D9DC84 LDRB W8, [X20 + 0xA5A]
	0x01D9DC88 MOV X19, X0
	0x01D9DC8C TBNZ X8, 0x0, 0x1D9DCC8
	0x01D9DC90 ADRP X0, 0x2356000
	0x01D9DC94 LDR X0, [X0 + 0x758]
	0x01D9DC98 BL 0x1C16CF4
	0x01D9DC9C ADRP X0, 0x235A000
	0x01D9DCA0 LDR X0, [X0 + 0x100]
	0x01D9DCA4 BL 0x1C16CF4
	0x01D9DCA8 ADRP X0, 0x235A000
	0x01D9DCAC LDR X0, [X0 + 0x108]
	0x01D9DCB0 BL 0x1C16CF4
	0x01D9DCB4 ADRP X0, 0x235A000
	0x01D9DCB8 LDR X0, [X0 + 0x110]
	0x01D9DCBC BL 0x1C16CF4
	0x01D9DCC0 MOVZ W8, 0x1
	0x01D9DCC4 STRB W8, [X20 + 0xA5A]
	0x01D9DCC8 LDR X0, [X19 + 0x20]
	0x01D9DCCC CBZ X0, 0x1D9DDA8
	0x01D9DCD0 ADRP X21, 0x235A000
	0x01D9DCD4 LDR X21, [X21 + 0x108]
	0x01D9DCD8 LDR W1, [X19 + 0x68]
	0x01D9DCDC LDR X20, [X19 + 0x30]
	0x01D9DCE0 LDR X2, [X21]
	0x01D9DCE4 BL 0x301BCCC
	0x01D9DCE8 CBZ X0, 0x1D9DDA8
	0x01D9DCEC ADRP X8, 0x2356000
	0x01D9DCF0 LDR X8, [X8 + 0x758]
	0x01D9DCF4 LDR W9, [X0 + 0x20]
	0x01D9DCF8 ADRP X22, 0x235A000
	0x01D9DCFC ADD X1, X31, 0xC
	0x01D9DD00 LDR X0, [X8]
	0x01D9DD04 LDR X22, [X22 + 0x110]
	0x01D9DD08 STR W9, [X31 + 0xC]
	0x01D9DD0C BL 0x1C16E04
	0x01D9DD10 LDR X8, [X22]
	0x01D9DD14 MOV X1, X0
	0x01D9DD18 MOV X2, X31
	0x01D9DD1C MOV X0, X8
	0x01D9DD20 BL 0x321EFD0
	0x01D9DD24 CBZ X20, 0x1D9DDA8
	0x01D9DD28 LDR X8, [X20]
	0x01D9DD2C MOV X1, X0
	0x01D9DD30 MOV X0, X20
	0x01D9DD34 LDR X9, [X8 + 0x558]
	0x01D9DD38 LDR X2, [X8 + 0x560]
	0x01D9DD3C BLR X9
	0x01D9DD40 LDR X0, [X19 + 0x38]
	0x01D9DD44 CBZ X0, 0x1D9DDA8
	0x01D9DD48 MOVZ W1, 0x1
	0x01D9DD4C MOV X2, X31
	0x01D9DD50 BL 0x3C32410
	0x01D9DD54 LDR X0, [X19 + 0x20]
	0x01D9DD58 CBZ X0, 0x1D9DDA8
	0x01D9DD5C MOV W20, W31
	0x01D9DD60 LDR W8, [X0 + 0x18]
	0x01D9DD64 CMP W20, W8
	0x01D9DD68 B.GE 0x1D9DDAC
	0x01D9DD6C LDR X2, [X21]
	0x01D9DD70 MOV W1, W20
	0x01D9DD74 BL 0x301BCCC
	0x01D9DD78 MOV X1, X0
	0x01D9DD7C MOV X0, X19
	0x01D9DD80 BL 0x1D9EEE4
	0x01D9DD84 CBZ X0, 0x1D9DDA8
	0x01D9DD88 LDR W8, [X19 + 0x68]
	0x01D9DD8C MOV X2, X31
	0x01D9DD90 CMP W20, W8
	0x01D9DD94 CSET W1, EQ
	0x01D9DD98 BL 0x3C357B4
	0x01D9DD9C LDR X0, [X19 + 0x20]
	0x01D9DDA0 ADD W20, W20, 0x1
	0x01D9DDA4 CBNZ X0, 0x1D9DD60
	0x01D9DDA8 BL 0x1C16F20
	0x01D9DDAC LDP X20, X19, [X31 + 0x20]
	0x01D9DDB0 LDP X22, X21, [X31 + 0x10]
	0x01D9DDB4 LDR X30, [X31], #0x30
	0x01D9DDB8 RET
	0x01D9DDBC SUB X31, X31, 0x40
	0x01D9DDC0 STP D9, D8, [X31 + 0x10]
	0x01D9DDC4 STP X30, X21, [X31 + 0x20]
	0x01D9DDC8 STP X20, X19, [X31 + 0x30]
	0x01D9DDCC ADRP X20, 0x263B000
	0x01D9DDD0 LDRB W8, [X20 + 0xA56]
	0x01D9DDD4 MOV X19, X0
	0x01D9DDD8 TBNZ X8, 0x0, 0x1D9DE14
	0x01D9DDDC ADRP X0, 0x235A000
	0x01D9DDE0 LDR X0, [X0 + 0xB8]
	0x01D9DDE4 BL 0x1C16CF4
	0x01D9DDE8 ADRP X0, 0x235A000
	0x01D9DDEC LDR X0, [X0 + 0x118]
	0x01D9DDF0 BL 0x1C16CF4
	0x01D9DDF4 ADRP X0, 0x235A000
	0x01D9DDF8 LDR X0, [X0 + 0x120]
	0x01D9DDFC BL 0x1C16CF4
	0x01D9DE00 ADRP X0, 0x235A000
	0x01D9DE04 LDR X0, [X0 + 0x128]
	0x01D9DE08 BL 0x1C16CF4
	0x01D9DE0C MOVZ W8, 0x1
	0x01D9DE10 STRB W8, [X20 + 0xA56]
	0x01D9DE14 ADRP X21, 0x263B000
	0x01D9DE18 LDRB W8, [X21 + 0x786]
	0x01D9DE1C LDR X20, [X19 + 0x40]
	0x01D9DE20 CBNZ W8, 0x1D9DE38
	0x01D9DE24 ADRP X0, 0x2356000
	0x01D9DE28 LDR X0, [X0 + 0x5A0]
	0x01D9DE2C BL 0x1C16CF4
	0x01D9DE30 MOVZ W8, 0x1
	0x01D9DE34 STRB W8, [X21 + 0x786]
	0x01D9DE38 ADRP X8, 0x2356000
	0x01D9DE3C LDR X8, [X8 + 0x5A0]
	0x01D9DE40 MOV X0, X31
	0x01D9DE44 LDR X8, [X8]
	0x01D9DE48 LDR X8, [X8 + 0xB8]
	0x01D9DE4C LDR V8, [X8 + 0x18]
	0x01D9DE50 LDR V9, [X8 + 0x20]
	0x01D9DE54 BL 0x3C3C714
	0x01D9DE58 CBZ X20, 0x1D9DFAC
	0x01D9DE5C FMOV S1, 25
	0x01D9DE60 FMOV V2.2S, 0x0
	0x01D9DE64 FMUL S1, S9, S1
	0x00000000 INVALID
	0x01D9DE6C FMUL S2, S1, S0
	0x00000000 INVALID
	0x01D9DE74 MOV S1, V0.S[1]
	0x01D9DE78 MOV X0, X20
	0x01D9DE7C MOV X1, X31
	0x01D9DE80 BL 0x3C40498
	0x01D9DE84 MOV X0, X19
	0x01D9DE88 BL 0x1D9DFB0
	0x01D9DE8C BL 0x1D9D7BC
	0x01D9DE90 TBZ X0, 0x0, 0x1D9DF98
	0x01D9DE94 MOV X0, X31
	0x01D9DE98 BL 0x3C3C6C4
	0x01D9DE9C ADRP X8, 0x235A000
	0x01D9DEA0 LDR X8, [X8 + 0xB8]
	0x01D9DEA4 ADRP X9, 0x235A000
	0x01D9DEA8 MOV V8.16B, V0.16B
	0x01D9DEAC LDR X8, [X8]
	0x01D9DEB0 LDR X8, [X8 + 0xB8]
	0x01D9DEB4 LDR X9, [X9 + 0x118]
	0x01D9DEB8 ADD X0, X8, 0x8
	0x01D9DEBC LDR X1, [X9]
	0x01D9DEC0 BL 0x243AC20
	0x01D9DEC4 ADRP X20, 0x263B000
	0x01D9DEC8 LDRB W8, [X20 + 0xABE]
	0x01D9DECC MOV V9.16B, V0.16B
	0x01D9DED0 CBNZ W8, 0x1D9DEE8
	0x01D9DED4 ADRP X0, 0x2356000
	0x01D9DED8 LDR X0, [X0 + 0x5A8]
	0x01D9DEDC BL 0x1C16CF4
	0x01D9DEE0 MOVZ W8, 0x1
	0x01D9DEE4 STRB W8, [X20 + 0xABE]
	0x01D9DEE8 ADRP X8, 0x2356000
	0x01D9DEEC LDR X8, [X8 + 0x5A8]
	0x01D9DEF0 FSUB S8, S8, S9
	0x01D9DEF4 LDR X0, [X8]
	0x01D9DEF8 LDR W8, [X0 + 0xE0]
	0x01D9DEFC CBNZ W8, 0x1D9DF04
	0x01D9DF00 BL 0x1C16DFC
	0x01D9DF04 ADRP X12, 0x235A000
	0x01D9DF08 MOVZ W10, 0x7F800000
	0x01D9DF0C LDR X12, [X12 + 0x120]
	0x01D9DF10 FRINTP S0, S8
	0x01D9DF14 FCVTPS W8, S8
	0x01D9DF18 MOVZ W9, 0x3C
	0x01D9DF1C MOVZ W11, 0x3C
	0x01D9DF20 FMOV S1, W10
	0x01D9DF24 MOVK W11, 0x80000000
	0x01D9DF28 SUB W8, W9, W8
	0x01D9DF2C FCMP S0, S1
	0x01D9DF30 CSEL W8, W11, W8, EQ
	0x01D9DF34 STR W8, [X31 + 0xC]
	0x01D9DF38 LDR X1, [X12]
	0x01D9DF3C LDR X20, [X19 + 0x30]
	0x01D9DF40 ADD X0, X31, 0xC
	0x01D9DF44 MOV X2, X31
	0x01D9DF48 BL 0x337B774
	0x01D9DF4C ADRP X8, 0x235A000
	0x01D9DF50 LDR X8, [X8 + 0x128]
	0x01D9DF54 MOV X1, X0
	0x01D9DF58 MOV X2, X31
	0x01D9DF5C LDR X8, [X8]
	0x01D9DF60 MOV X0, X8
	0x01D9DF64 BL 0x321B938
	0x01D9DF68 CBZ X20, 0x1D9DFAC
	0x01D9DF6C LDR X8, [X20]
	0x01D9DF70 MOV X1, X0
	0x01D9DF74 MOV X0, X20
	0x01D9DF78 LDR X9, [X8 + 0x558]
	0x01D9DF7C LDR X2, [X8 + 0x560]
	0x01D9DF80 BLR X9
	0x01D9DF84 LDR X0, [X19 + 0x38]
	0x01D9DF88 CBZ X0, 0x1D9DFAC
	0x01D9DF8C MOV W1, W31
	0x01D9DF90 MOV X2, X31
	0x01D9DF94 BL 0x3C32410
	0x01D9DF98 LDP X20, X19, [X31 + 0x30]
	0x01D9DF9C LDP X30, X21, [X31 + 0x20]
	0x01D9DFA0 LDP D9, D8, [X31 + 0x10]
	0x01D9DFA4 ADD X31, X31, 0x40

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], D8
	003 Move [X31+104], X30
	004 Move [X31+112], X26
	005 Move [X31+120], X25
	006 Move [X31+128], X24
	007 Move [X31+136], X23
	008 Move [X31+144], X22
	009 Move [X31+152], X21
	010 Move [X31+160], X20
	011 Move [X31+168], X19
	012 Move X20, 0x263C000
	013 Move W8, [X20+2635]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {42}
	019 Move X0, 0x235A000
	020 Move X0, [X0+3000]
	021 Call 0x1C17CF4
	022 Move X0, 0x235A000
	023 Move X0, [X0+2968]
	024 Call 0x1C17CF4
	025 Move X0, 0x235B000
	026 Move X0, [X0+112]
	027 Call 0x1C17CF4
	028 Move X0, 0x235B000
	029 Move X0, [X0+120]
	030 Call 0x1C17CF4
	031 Move X0, 0x235B000
	032 Move X0, [X0+72]
	033 Call 0x1C17CF4
	034 Move X0, 0x235A000
	035 Move X0, [X0+920]
	036 Call 0x1C17CF4
	037 Move X0, 0x2357000
	038 Move X0, [X0+1432]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+2635], W8
	042 Add X8, X31, 8
	043 Move X0, X19
	044 Move [X31+64], X31
	045 Move [X31+72], X31
	046 Move [X31+80], X31
	047 Move [X31+60], W31
	048 Call InventoryBag.get_containedObjects, X0
	049 NotImplemented "Instruction LDUR not yet implemented."
	050 Move X9, [X31+24]
	051 Move [X31+4], V0
	052 Move W8, [X31+72]
	053 Move [X31+2], V0
	054 Move [X31+80], X9
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X25, 0x235B000
	057 Move X26, 0x235A000
	058 Move X23, 0x2357000
	059 Move X24, 0x235A000
	060 Move X25, [X25+112]
	061 Move X26, [X26+920]
	062 Move X23, [X23+1432]
	063 Move X24, [X24+2968]
	064 Move W21, W31
	065 Move TEMP, 0
	066 Not TEMP
	067 Move W20, TEMP
	068 Move S8, 5
	069 Add X8, X31, 32
	070 Move X0, X19
	071 Call InventoryBag.get_containedObjects, X0
	072 Move V0, [X31+2]
	073 Move X8, [X31+48]
	074 Move X2, [X25]
	075 Add X0, X31, 64
	076 Move W1, W21
	077 Move [X31+4], V0
	078 Move [X31+80], X8
	079 Call NetworkArray`1<NetworkId>.Get, X0, X1
	080 Move X8, [X26]
	081 Move X22, X0
	082 Move W9, [X8+224]
	083 Compare W9, 0
	084 JumpIfEqual {87}
	085 Compare W22, 0
	086 JumpIfNotEqual {91}
	087 Move X0, X8
	088 Call 0x1C17DFC
	089 Compare W22, 0
	090 JumpIfEqual {139}
	091 Move X0, [X19+56]
	092 Compare X0, 0
	093 JumpIfEqual {363}
	094 And X1, X22, 0
	095 Move X2, X31
	096 Call NetworkRunner.FindObject, X0, X1
	097 Move X8, [X23]
	098 Move X22, X0
	099 Move W9, [X8+224]
	100 Compare W9, 0
	101 JumpIfNotEqual {104}
	102 Move X0, X8
	103 Call 0x1C17DFC
	104 Move X0, X22
	105 Move X1, X31
	106 Move X2, X31
	107 Add W20, W20, 1
	108 Call Object.op_Equality, X0, X1
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfEqual {139}
	113 Compare X22, 0
	114 JumpIfEqual {363}
	115 Move X1, [X24]
	116 Move X0, X22
	117 Call 0x21A4894, X0
	118 Move X8, [X23]
	119 Move X22, X0
	120 Move W9, [X8+224]
	121 Compare W9, 0
	122 JumpIfNotEqual {125}
	123 Move X0, X8
	124 Call 0x1C17DFC
	125 Move X0, X22
	126 Move X1, X31
	127 Move X2, X31
	128 Call Object.op_Inequality, X0, X1
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfNotEqual {139}
	133 Compare X22, 0
	134 JumpIfEqual {363}
	135 Move X0, X22
	136 Move X1, X31
	137 Call Rigidbody.get_mass, X0
	138 Add S8, S8, S0
	139 Add X8, X31, 8
	140 Move X0, X19
	141 Add W21, W21, 1
	142 Call InventoryBag.get_containedObjects, X0
	143 NotImplemented "Instruction LDUR not yet implemented."
	144 Move X9, [X31+24]
	145 Move [X31+4], V0
	146 Move W8, [X31+72]
	147 Move [X31+2], V0
	148 Move [X31+80], X9
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move TEMP, X20
	151 And TEMP, TEMP, -2147483648
	152 Compare TEMP, -2147483648
	153 JumpIfEqual {317}
	154 Add X8, X31, 32
	155 Move X0, X19
	156 Call InventoryBag.get_containedObjects, X0
	157 Move V0, [X31+2]
	158 Move X8, [X31+48]
	159 Move X2, [X25]
	160 Add X0, X31, 64
	161 Move W1, W20
	162 Move [X31+4], V0
	163 Move [X31+80], X8
	164 Call NetworkArray`1<NetworkId>.Get, X0, X1
	165 Move X8, [X19+56]
	166 Compare X8, 0
	167 JumpIfEqual {363}
	168 And X1, X0, 0
	169 Move X0, X8
	170 Move X2, X31
	171 Call NetworkRunner.FindObject, X0, X1
	172 Move X8, [X23]
	173 Move X21, X0
	174 Move W9, [X8+224]
	175 Compare W9, 0
	176 JumpIfNotEqual {179}
	177 Move X0, X8
	178 Call 0x1C17DFC
	179 Move X0, X21
	180 Move X1, X31
	181 Move X2, X31
	182 Call Object.op_Inequality, X0, X1
	183 Move TEMP, X0
	184 And TEMP, TEMP, 1
	185 Compare TEMP, 1
	186 JumpIfNotEqual {324}
	187 Compare X21, 0
	188 JumpIfEqual {363}
	189 Move X0, X21
	190 Move X1, X31
	191 Call Component.get_transform, X0
	192 Move X8, [X19+144]
	193 Compare X8, 0
	194 JumpIfEqual {363}
	195 Move X22, X0
	196 Move X0, X8
	197 Move X1, X31
	198 Call Transform.get_position, X0
	199 Compare X22, 0
	200 JumpIfEqual {363}
	201 Move X0, X22
	202 Move X1, X31
	203 Call Transform.set_position, X0, X1
	204 Move X0, X21
	205 Move X1, X31
	206 Call Component.get_transform, X0
	207 Move X8, [X19+144]
	208 Compare X8, 0
	209 JumpIfEqual {363}
	210 Move X22, X0
	211 Move X0, X8
	212 Move X1, X31
	213 Call Transform.get_rotation, X0
	214 Compare X22, 0
	215 JumpIfEqual {363}
	216 Move X0, X22
	217 Move X1, X31
	218 Call Transform.set_rotation, X0, X1
	219 Move X8, 0x235A000
	220 Move X8, [X8+3000]
	221 Move X0, X21
	222 Move X1, [X8]
	223 Call 0x21A4894, X0
	224 Move X8, [X23]
	225 Move X22, X0
	226 Move W9, [X8+224]
	227 Compare W9, 0
	228 JumpIfNotEqual {231}
	229 Move X0, X8
	230 Call 0x1C17DFC
	231 Move X0, X22
	232 Move X1, X31
	233 Move X2, X31
	234 Call Object.op_Inequality, X0, X1
	235 Move TEMP, X0
	236 And TEMP, TEMP, 1
	237 Compare TEMP, 1
	238 JumpIfNotEqual {266}
	239 Move X0, [X19+144]
	240 Compare X0, 0
	241 JumpIfEqual {363}
	242 Move X1, X31
	243 Call Transform.get_position, X0
	244 Compare X22, 0
	245 JumpIfEqual {363}
	246 Move X0, X22
	247 Move X1, X31
	248 Call GrabbableItem.RemoveFromBag, X0, X1
	249 Move X0, [X19+128]
	250 Compare X0, 0
	251 JumpIfEqual {363}
	252 Add X1, X31, 60
	253 Move X2, X31
	254 Call GrabbableItem.TryGetHandSide, X0, X1
	255 Move TEMP, X0
	256 And TEMP, TEMP, 1
	257 Compare TEMP, 1
	258 JumpIfNotEqual {266}
	259 Move X8, -19607552
	260 Move X9, -19603456
	261 Move W0, [X31+60]
	262 Move V0, [X8+3876]
	263 Move V1, [X9+188]
	264 Move X1, X31
	265 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	266 Move X1, [X24]
	267 Move X0, X21
	268 Call 0x21A4894, X0
	269 Move X8, [X23]
	270 Move X22, X0
	271 Move W9, [X8+224]
	272 Compare W9, 0
	273 JumpIfNotEqual {276}
	274 Move X0, X8
	275 Call 0x1C17DFC
	276 Move X0, X22
	277 Move X1, X31
	278 Move X2, X31
	279 Call Object.op_Inequality, X0, X1
	280 Move TEMP, X0
	281 And TEMP, TEMP, 1
	282 Compare TEMP, 1
	283 JumpIfNotEqual {318}
	284 Move X0, [X19+144]
	285 Compare X0, 0
	286 JumpIfEqual {363}
	287 Move X1, X31
	288 Call Transform.get_up, X0
	289 Compare X22, 0
	290 JumpIfEqual {363}
	291 Move S3, 0.5
	292 Multiply S2, S2, S3
	293 Multiply S1, S1, S3
	294 Multiply S0, S0, S3
	295 Move X0, X22
	296 Move X1, X31
	297 Call Rigidbody.set_velocity, X0, X1
	298 Move X24, 0x263C000
	299 Move W8, [X24+1923]
	300 Compare W8, 0
	301 JumpIfNotEqual {307}
	302 Move X0, 0x2357000
	303 Move X0, [X0+1440]
	304 Call 0x1C17CF4
	305 Move W8, 1
	306 Move [X24+1923], W8
	307 Move X8, 0x2357000
	308 Move X8, [X8+1440]
	309 Move X0, X22
	310 Move X1, X31
	311 Move X8, [X8]
	312 Move X8, [X8+184]
	313 Move S0, [X8]
	314 Move S1, [X8+4]
	315 Move V2, [X8+8]
	316 Call Rigidbody.set_angularVelocity, X0, X1
	317 Move W0, W31
	318 Compare X22, 0
	319 JumpIfEqual {363}
	320 Move X0, X22
	321 Move X1, X31
	322 Call Rigidbody.get_mass, X0
	323 Subtract S8, S8, S0
	324 Add X8, X31, 32
	325 Move X0, X19
	326 Call InventoryBag.get_containedObjects, X0
	327 Move X9, 0x235B000
	328 Move V0, [X31+2]
	329 Move X8, [X31+48]
	330 Move X9, [X9+120]
	331 Add X0, X31, 64
	332 Move W1, W20
	333 Move X2, X31
	334 Move X3, [X9]
	335 Move [X31+4], V0
	336 Move [X31+80], X8
	337 Call NetworkArray`1<NetworkId>.Set, X0, X1, X2
	338 Move X0, X19
	339 Move V0, V8
	340 Call InventoryBag.UpdateMass, X0, V0
	341 Move X0, [X23]
	342 Move W8, [X0+224]
	343 Compare W8, 0
	344 JumpIfNotEqual {346}
	345 Call 0x1C17DFC
	346 Move X0, X21
	347 Move X1, X31
	348 Move X2, X31
	349 Call Object.op_Inequality, X0, X1
	350 Move X20, [X31+160]
	351 Move X19, [X31+168]
	352 Move X22, [X31+144]
	353 Move X21, [X31+152]
	354 Move X24, [X31+128]
	355 Move X23, [X31+136]
	356 Move X26, [X31+112]
	357 Move X25, [X31+120]
	358 Move X30, [X31+104]
	359 Move V8, [X31+96]
	360 And W0, W0, 1
	361 Add X31, X31, 176
	362 Return X0
	363 Call 0x1C17F20

Method: System.Void CheckToAddItem()

Disassembly:
	0x01D9D5EC LDR X9, [X9 + 0xB0]
	0x01D9D5F0 MOVZ W8, 0x1
	0x01D9D5F4 STRB W8, [X19 + 0x58]
	0x01D9D5F8 LDR X8, [X19]
	0x01D9D5FC LDR X1, [X9]
	0x01D9D600 LDRB W10, [X8 + 0x130]
	0x01D9D604 LDRB W9, [X1 + 0x130]
	0x01D9D608 CMP W10, W9
	0x01D9D60C B.CC 0x1D9D634
	0x01D9D610 LDR X8, [X8 + 0xC8]
	0x01D9D614 ADD X8, X8, X9, 0x3, LSL
	0x01D9D618 LDUR X8, [X8 - 0x8]
	0x01D9D61C CMP X8, X1
	0x01D9D620 B.NE 0x1D9D634
	0x01D9D624 MOV X0, X19
	0x01D9D628 LDP X20, X19, [X31 + 0x10]
	0x01D9D62C LDR X30, [X31], #0x20
	0x01D9D630 B 0x1D9BBCC
	0x01D9D634 MOV X0, X19
	0x01D9D638 BL 0x1C171E0
	0x01D9D63C BL 0x1C16F20
	0x01D9D640 STR D8, [X31 - 0x20]!
	0x01D9D644 STR X30, [X31 + 0x8]
	0x01D9D648 STP X20, X19, [X31 + 0x10]
	0x01D9D64C ADRP X20, 0x263B000
	0x01D9D650 LDRB W8, [X20 + 0xA50]
	0x01D9D654 MOV V8.16B, V0.16B
	0x01D9D658 MOV X19, X0
	0x01D9D65C TBNZ X8, 0x0, 0x1D9D674
	0x01D9D660 ADRP X0, 0x2356000
	0x01D9D664 LDR X0, [X0 + 0x598]
	0x01D9D668 BL 0x1C16CF4
	0x01D9D66C MOVZ W8, 0x1
	0x01D9D670 STRB W8, [X20 + 0xA50]
	0x01D9D674 LDR X8, [X19 + 0x10]
	0x01D9D678 CBZ X8, 0x1D9D700
	0x01D9D67C ADRP X9, 0x2356000
	0x01D9D680 LDR X9, [X9 + 0x598]
	0x01D9D684 LDR X20, [X8 + 0x98]
	0x01D9D688 LDR X0, [X9]
	0x01D9D68C LDR W9, [X0 + 0xE0]
	0x01D9D690 CBNZ W9, 0x1D9D698
	0x01D9D694 BL 0x1C16DFC
	0x01D9D698 MOV X0, X20
	0x01D9D69C MOV X1, X31
	0x01D9D6A0 MOV X2, X31
	0x01D9D6A4 BL 0x3C3883C
	0x01D9D6A8 TBZ X0, 0x0, 0x1D9D6BC
	0x01D9D6AC LDP X20, X19, [X31 + 0x10]
	0x01D9D6B0 LDR X30, [X31 + 0x8]
	0x01D9D6B4 LDR V8, [X31], #0x20
	0x01D9D6B8 RET
	0x01D9D6BC LDR X8, [X19 + 0x10]
	0x01D9D6C0 CBZ X8, 0x1D9D700
	0x01D9D6C4 ADRP X9, 0xFFFFFFFFFED4D000
	0x01D9D6C8 LDR V0, [X9 + 0x104]
	0x01D9D6CC LDR X19, [X8 + 0x98]
	0x01D9D6D0 FMOV S1, W31
	0x01D9D6D4 FMOV S2, W31
	0x01D9D6D8 FMUL S0, S8, S0
	0x01D9D6DC MOV X0, X31
	0x01D9D6E0 BL 0x3C2A574
	0x01D9D6E4 CBZ X19, 0x1D9D700
	0x01D9D6E8 MOV X0, X19
	0x01D9D6EC LDP X20, X19, [X31 + 0x10]
	0x01D9D6F0 LDR X30, [X31 + 0x8]
	0x01D9D6F4 MOV X1, X31
	0x01D9D6F8 LDR V8, [X31], #0x20
	0x01D9D6FC B 0x3C3F8B8
	0x01D9D700 BL 0x1C16F20
	0x01D9D704 STR X30, [X31 - 0x20]!
	0x01D9D708 STP X20, X19, [X31 + 0x10]
	0x01D9D70C ADRP X20, 0x263B000
	0x01D9D710 LDRB W8, [X20 + 0xA51]
	0x01D9D714 MOV X19, X0
	0x01D9D718 TBNZ X8, 0x0, 0x1D9D730
	0x01D9D71C ADRP X0, 0x2356000
	0x01D9D720 LDR X0, [X0 + 0x598]
	0x01D9D724 BL 0x1C16CF4
	0x01D9D728 MOVZ W8, 0x1
	0x01D9D72C STRB W8, [X20 + 0xA51]
	0x01D9D730 LDR X8, [X19 + 0x10]
	0x01D9D734 CBZ X8, 0x1D9D7B8
	0x01D9D738 ADRP X9, 0x2356000
	0x01D9D73C LDR X9, [X9 + 0x598]
	0x01D9D740 LDR X20, [X8 + 0x98]
	0x01D9D744 LDR X0, [X9]
	0x01D9D748 LDR W9, [X0 + 0xE0]
	0x01D9D74C CBNZ W9, 0x1D9D754
	0x01D9D750 BL 0x1C16DFC
	0x01D9D754 MOV X0, X20
	0x01D9D758 MOV X1, X31
	0x01D9D75C MOV X2, X31
	0x01D9D760 BL 0x3C3883C
	0x01D9D764 TBZ X0, 0x0, 0x1D9D774
	0x01D9D768 LDP X20, X19, [X31 + 0x10]
	0x01D9D76C LDR X30, [X31], #0x20
	0x01D9D770 RET
	0x01D9D774 LDR X8, [X19 + 0x10]
	0x01D9D778 CBZ X8, 0x1D9D7B8
	0x01D9D77C ADRP X9, 0xFFFFFFFFFED4D000
	0x01D9D780 LDR V0, [X19 + 0x18]
	0x01D9D784 LDR V1, [X9 + 0x104]
	0x01D9D788 LDR X19, [X8 + 0x98]
	0x01D9D78C FMOV S2, W31
	0x01D9D790 MOV X0, X31
	0x01D9D794 FMUL S0, S0, S1
	0x01D9D798 FMOV S1, W31
	0x01D9D79C BL 0x3C2A574
	0x01D9D7A0 CBZ X19, 0x1D9D7B8
	0x01D9D7A4 MOV X0, X19
	0x01D9D7A8 LDP X20, X19, [X31 + 0x10]
	0x01D9D7AC MOV X1, X31
	0x01D9D7B0 LDR X30, [X31], #0x20
	0x01D9D7B4 B 0x3C3F8B8
	0x01D9D7B8 BL 0x1C16F20
	0x01D9D7BC STR X30, [X31 - 0x20]!
	0x01D9D7C0 STP X20, X19, [X31 + 0x10]
	0x01D9D7C4 ADRP X19, 0x263B000
	0x01D9D7C8 ADRP X20, 0x235A000
	0x01D9D7CC LDRB W8, [X19 + 0xA52]
	0x01D9D7D0 LDR X20, [X20 + 0xB8]
	0x01D9D7D4 TBNZ X8, 0x0, 0x1D9D7F8
	0x01D9D7D8 ADRP X0, 0x235A000
	0x01D9D7DC LDR X0, [X0 + 0xB8]
	0x01D9D7E0 BL 0x1C16CF4
	0x01D9D7E4 ADRP X0, 0x235A000
	0x01D9D7E8 LDR X0, [X0 + 0xC0]
	0x01D9D7EC BL 0x1C16CF4
	0x01D9D7F0 MOVZ W8, 0x1
	0x01D9D7F4 STRB W8, [X19 + 0xA52]
	0x01D9D7F8 LDR X8, [X20]
	0x01D9D7FC LDR X8, [X8 + 0xB8]
	0x01D9D800 LDRB W9, [X8 + 0x8]
	0x01D9D804 CBZ W9, 0x1D9D818
	0x01D9D808 LDR W8, [X8 + 0x4]
	0x01D9D80C CMP W8, 0x9
	0x01D9D810 CSET W0, GT
	0x01D9D814 B 0x1D9D81C
	0x01D9D818 MOV W0, W31
	0x01D9D81C LDP X20, X19, [X31 + 0x10]
	0x01D9D820 LDR X30, [X31], #0x20
	0x01D9D824 RET
	0x01D9D828 STP X30, X23, [X31 - 0x30]!
	0x01D9D82C STP X22, X21, [X31 + 0x10]
	0x01D9D830 STP X20, X19, [X31 + 0x20]
	0x01D9D834 ADRP X20, 0x263B000
	0x01D9D838 ADRP X21, 0x235A000
	0x01D9D83C LDRB W8, [X20 + 0xA53]
	0x01D9D840 LDR X21, [X21 + 0xC8]
	0x01D9D844 MOV X19, X0
	0x01D9D848 TBNZ X8, 0x0, 0x1D9D8A8
	0x01D9D84C ADRP X0, 0x2359000
	0x01D9D850 LDR X0, [X0 + 0x478]
	0x01D9D854 BL 0x1C16CF4
	0x01D9D858 ADRP X0, 0x2356000
	0x01D9D85C LDR X0, [X0 + 0x648]
	0x01D9D860 BL 0x1C16CF4
	0x01D9D864 ADRP X0, 0x235A000
	0x01D9D868 LDR X0, [X0 + 0xC8]
	0x01D9D86C BL 0x1C16CF4
	0x01D9D870 ADRP X0, 0x2356000
	0x01D9D874 LDR X0, [X0 + 0xDB0]
	0x01D9D878 BL 0x1C16CF4
	0x01D9D87C ADRP X0, 0x235A000
	0x01D9D880 LDR X0, [X0 + 0xD0]
	0x01D9D884 BL 0x1C16CF4
	0x01D9D888 ADRP X0, 0x235A000
	0x01D9D88C LDR X0, [X0 + 0xD8]
	0x01D9D890 BL 0x1C16CF4
	0x01D9D894 ADRP X0, 0x2356000
	0x01D9D898 LDR X0, [X0 + 0xDA0]
	0x01D9D89C BL 0x1C16CF4
	0x01D9D8A0 MOVZ W8, 0x1
	0x01D9D8A4 STRB W8, [X20 + 0xA53]
	0x01D9D8A8 LDR X1, [X21]
	0x01D9D8AC MOV X0, X19
	0x01D9D8B0 BL 0x21A3894
	0x01D9D8B4 STR X0, [X19 + 0x58]
	0x01D9D8B8 CBZ X0, 0x1D9DA30
	0x01D9D8BC ADRP X23, 0x2359000
	0x01D9D8C0 LDR X23, [X23 + 0x478]
	0x01D9D8C4 MOV X20, X0
	0x01D9D8C8 LDR X21, [X0 + 0x20]
	0x01D9D8CC ADRP X22, 0x235A000
	0x01D9D8D0 LDR X0, [X23]
	0x01D9D8D4 LDR X22, [X22 + 0xD0]
	0x01D9D8D8 BL 0x1C16F10
	0x01D9D8DC LDR X2, [X22]
	0x01D9D8E0 MOV X1, X19
	0x01D9D8E4 MOV X3, X31
	0x01D9D8E8 MOV X22, X0
	0x01D9D8EC BL 0x2A76254
	0x01D9D8F0 MOV X0, X21
	0x01D9D8F4 MOV X1, X22
	0x01D9D8F8 MOV X2, X31
	0x01D9D8FC BL 0x33C0DE4
	0x01D9D900 CBZ X0, 0x1D9D93C
	0x01D9D904 LDR X22, [X23]
	0x01D9D908 MOV X21, X0
	0x01D9D90C MOV X1, X22
	0x01D9D910 BL 0x1C16E00
	0x01D9D914 CBZ X0, 0x1D9DA38
	0x01D9D918 STR X0, [X20 + 0x20]
	0x01D9D91C LDR X20, [X23]
	0x01D9D920 MOV X0, X21
	0x01D9D924 MOV X1, X20
	0x01D9D928 BL 0x1C16E00
	0x01D9D92C CBNZ X0, 0x1D9D940
	0x01D9D930 MOV X0, X21
	0x01D9D934 MOV X1, X20
	0x01D9D938 BL 0x1C171E0
	0x01D9D93C STR X31, [X20 + 0x20]
	0x01D9D940 ADRP X8, 0x2356000
	0x01D9D944 LDR X8, [X8 + 0xDA0]
	0x01D9D948 ADRP X20, 0x235A000
	0x01D9D94C ADRP X22, 0x2356000
	0x01D9D950 ADRP X21, 0x2356000
	0x01D9D954 LDR X0, [X8]
	0x01D9D958 LDR X20, [X20 + 0xD8]
	0x01D9D95C LDR X22, [X22 + 0xDB0]
	0x01D9D960 LDR X21, [X21 + 0x648]
	0x01D9D964 BL 0x1C16F10
	0x01D9D968 LDR X2, [X20]
	0x01D9D96C MOV X1, X19
	0x01D9D970 MOV X3, X31
	0x01D9D974 MOV X20, X0
	0x01D9D978 BL 0x35C52F0
	0x01D9D97C LDR X0, [X22]
	0x01D9D980 MOVZ W1, 0x1
	0x01D9D984 BL 0x1C16D6C
	0x01D9D988 LDR X8, [X21]
	0x01D9D98C MOV X19, X0
	0x01D9D990 LDR W9, [X8 + 0xE0]
	0x01D9D994 CBNZ W9, 0x1D9D9A0
	0x01D9D998 MOV X0, X8
	0x01D9D99C BL 0x1C16DFC
	0x01D9D9A0 ADRP X22, 0x263B000
	0x01D9D9A4 LDRB W8, [X22 + 0x787]
	0x01D9D9A8 CBNZ W8, 0x1D9D9C0
	0x01D9D9AC ADRP X0, 0x2356000
	0x01D9D9B0 LDR X0, [X0 + 0x648]
	0x01D9D9B4 BL 0x1C16CF4
	0x01D9D9B8 MOVZ W8, 0x1
	0x01D9D9BC STRB W8, [X22 + 0x787]
	0x01D9D9C0 LDR X0, [X21]
	0x01D9D9C4 LDR W8, [X0 + 0xE0]
	0x01D9D9C8 CBNZ W8, 0x1D9D9D4
	0x01D9D9CC BL 0x1C16DFC
	0x01D9D9D0 LDR X0, [X21]
	0x01D9D9D4 LDR X8, [X0 + 0xB8]
	0x01D9D9D8 LDR X8, [X8]
	0x01D9D9DC CBZ X8, 0x1D9DA30
	0x01D9D9E0 LDR X8, [X8 + 0xB8]
	0x01D9D9E4 CBZ X8, 0x1D9DA30
	0x01D9D9E8 CBZ X19, 0x1D9DA30
	0x01D9D9EC LDR X21, [X8 + 0x98]
	0x01D9D9F0 CBZ X21, 0x1D9DA08
	0x01D9D9F4 LDR X8, [X19]
	0x01D9D9F8 MOV X0, X21
	0x01D9D9FC LDR X1, [X8 + 0x40]
	0x01D9DA00 BL 0x1C16E00
	0x01D9DA04 CBZ X0, 0x1D9DA44
	0x01D9DA08 LDR W8, [X19 + 0x18]
	0x01D9DA0C CBZ W8, 0x1D9DA34
	0x01D9DA10 STR X21, [X19 + 0x20]
	0x01D9DA14 MOV X0, X20
	0x01D9DA18 MOV X1, X19
	0x01D9DA1C LDP X20, X19, [X31 + 0x20]
	0x01D9DA20 LDP X22, X21, [X31 + 0x10]
	0x01D9DA24 MOV X2, X31
	0x01D9DA28 LDP X30, X23, [X31], #0x30
	0x01D9DA2C B 0x1D363F0
	0x01D9DA30 BL 0x1C16F20
	0x01D9DA34 BL 0x1C16F28
	0x01D9DA38 MOV X0, X21
	0x01D9DA3C MOV X1, X22
	0x01D9DA40 BL 0x1C171E0
	0x01D9DA44 BL 0x1C16F44
	0x01D9DA48 MOV X1, X31
	0x01D9DA4C BL 0x1C16DEC
	0x01D9DA50 STP X30, X23, [X31 - 0x30]!
	0x01D9DA54 STP X22, X21, [X31 + 0x10]
	0x01D9DA58 STP X20, X19, [X31 + 0x20]
	0x01D9DA5C ADRP X22, 0x263B000
	0x01D9DA60 ADRP X23, 0x2356000
	0x01D9DA64 ADRP X20, 0x235A000
	0x01D9DA68 ADRP X21, 0x2356000
	0x01D9DA6C LDRB W8, [X22 + 0xA54]
	0x01D9DA70 LDR X23, [X23 + 0xDA0]
	0x01D9DA74 LDR X20, [X20 + 0xD8]
	0x01D9DA78 LDR X21, [X21 + 0x648]
	0x01D9DA7C MOV X19, X0
	0x01D9DA80 TBNZ X8, 0x0, 0x1D9DAB0
	0x01D9DA84 ADRP X0, 0x2356000
	0x01D9DA88 LDR X0, [X0 + 0x648]
	0x01D9DA8C BL 0x1C16CF4
	0x01D9DA90 ADRP X0, 0x235A000
	0x01D9DA94 LDR X0, [X0 + 0xD8]
	0x01D9DA98 BL 0x1C16CF4
	0x01D9DA9C ADRP X0, 0x2356000
	0x01D9DAA0 LDR X0, [X0 + 0xDA0]
	0x01D9DAA4 BL 0x1C16CF4
	0x01D9DAA8 MOVZ W8, 0x1
	0x01D9DAAC STRB W8, [X22 + 0xA54]
	0x01D9DAB0 LDR X0, [X23]
	0x01D9DAB4 BL 0x1C16F10
	0x01D9DAB8 LDR X2, [X20]
	0x01D9DABC MOV X1, X19
	0x01D9DAC0 MOV X3, X31
	0x01D9DAC4 MOV X20, X0
	0x01D9DAC8 BL 0x35C52F0
	0x01D9DACC LDR X0, [X21]
	0x01D9DAD0 LDR W8, [X0 + 0xE0]
	0x01D9DAD4 CBNZ W8, 0x1D9DADC
	0x01D9DAD8 BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+96], D12
	003 Move [X31+112], D11
	004 Move [X31+120], D10
	005 Move [X31+128], D9
	006 Move [X31+136], D8
	007 Move [X31+144], X30
	008 Move [X31+152], X27
	009 Move [X31+160], X26
	010 Move [X31+168], X25
	011 Move [X31+176], X24
	012 Move [X31+184], X23
	013 Move [X31+192], X22
	014 Move [X31+200], X21
	015 Move [X31+208], X20
	016 Move [X31+216], X19
	017 Move X20, 0x263C000
	018 Move W8, [X20+2636]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {53}
	024 Move X0, 0x235A000
	025 Move X0, [X0+3000]
	026 Call 0x1C17CF4
	027 Move X0, 0x235A000
	028 Move X0, [X0+2968]
	029 Call 0x1C17CF4
	030 Move X0, 0x2357000
	031 Move X0, [X0+1496]
	032 Call 0x1C17CF4
	033 Move X0, 0x235B000
	034 Move X0, [X0+112]
	035 Call 0x1C17CF4
	036 Move X0, 0x235B000
	037 Move X0, [X0+120]
	038 Call 0x1C17CF4
	039 Move X0, 0x235B000
	040 Move X0, [X0+72]
	041 Call 0x1C17CF4
	042 Move X0, 0x235A000
	043 Move X0, [X0+920]
	044 Call 0x1C17CF4
	045 Move X0, 0x2357000
	046 Move X0, [X0+1432]
	047 Call 0x1C17CF4
	048 Move X0, 0x2357000
	049 Move X0, [X0+1528]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X20+2636], W8
	053 Move X25, 0x2357000
	054 Move X25, [X25+1432]
	055 Add X8, X31, 8
	056 Move X0, X19
	057 Move [X31+64], X31
	058 Move [X31+72], X31
	059 Move [X31+80], X31
	060 Move [X31+104], X31
	061 Move [X31+60], W31
	062 Call InventoryBag.get_containedObjects, X0
	063 NotImplemented "Instruction LDUR not yet implemented."
	064 Move X9, [X31+24]
	065 Move W20, W31
	066 Move [X31+4], V0
	067 Move W8, [X31+72]
	068 Move [X31+2], V0
	069 Move [X31+80], X9
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X23, 0x235B000
	072 Move X24, 0x235A000
	073 Move X26, 0x235A000
	074 Move X23, [X23+112]
	075 Move X24, [X24+920]
	076 Move X26, [X26+2968]
	077 Move W21, W31
	078 Move S8, 5
	079 Add X8, X31, 32
	080 Move X0, X19
	081 Call InventoryBag.get_containedObjects, X0
	082 Move V0, [X31+2]
	083 Move X8, [X31+48]
	084 Move X2, [X23]
	085 Add X0, X31, 64
	086 Move W1, W21
	087 Move [X31+4], V0
	088 Move [X31+80], X8
	089 Call NetworkArray`1<NetworkId>.Get, X0, X1
	090 Move X8, [X24]
	091 Move X22, X0
	092 Move W9, [X8+224]
	093 Compare W9, 0
	094 JumpIfEqual {97}
	095 Compare W22, 0
	096 JumpIfNotEqual {101}
	097 Move X0, X8
	098 Call 0x1C17DFC
	099 Compare W22, 0
	100 JumpIfEqual {149}
	101 Move X0, [X19+56]
	102 Compare X0, 0
	103 JumpIfEqual {369}
	104 And X1, X22, 0
	105 Move X2, X31
	106 Call NetworkRunner.FindObject, X0, X1
	107 Move X8, [X25]
	108 Move X22, X0
	109 Move W9, [X8+224]
	110 Compare W9, 0
	111 JumpIfNotEqual {114}
	112 Move X0, X8
	113 Call 0x1C17DFC
	114 Move X0, X22
	115 Move X1, X31
	116 Move X2, X31
	117 Add W20, W20, 1
	118 Call Object.op_Equality, X0, X1
	119 Move TEMP, X0
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfEqual {149}
	123 Compare X22, 0
	124 JumpIfEqual {369}
	125 Move X1, [X26]
	126 Move X0, X22
	127 Call 0x21A4894, X0
	128 Move X8, [X25]
	129 Move X22, X0
	130 Move W9, [X8+224]
	131 Compare W9, 0
	132 JumpIfNotEqual {135}
	133 Move X0, X8
	134 Call 0x1C17DFC
	135 Move X0, X22
	136 Move X1, X31
	137 Move X2, X31
	138 Call Object.op_Inequality, X0, X1
	139 Move TEMP, X0
	140 And TEMP, TEMP, 1
	141 Compare TEMP, 1
	142 JumpIfNotEqual {149}
	143 Compare X22, 0
	144 JumpIfEqual {369}
	145 Move X0, X22
	146 Move X1, X31
	147 Call Rigidbody.get_mass, X0
	148 Add S8, S8, S0
	149 Add X8, X31, 8
	150 Move X0, X19
	151 Add W21, W21, 1
	152 Call InventoryBag.get_containedObjects, X0
	153 NotImplemented "Instruction LDUR not yet implemented."
	154 Move X9, [X31+24]
	155 Move [X31+4], V0
	156 Move W8, [X31+72]
	157 Move [X31+2], V0
	158 Move [X31+80], X9
	159 NotImplemented "Instruction CMP not yet implemented."
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move S8, 5
	162 Move X0, [X19+144]
	163 Compare X0, 0
	164 JumpIfEqual {369}
	165 Move X22, 0x2357000
	166 Move X21, 0x2357000
	167 Move X22, [X22+1496]
	168 Move X21, [X21+1528]
	169 Move X1, X31
	170 Call Transform.get_position, X0
	171 Move X0, [X22]
	172 Move V10, V0
	173 Move V11, V1
	174 Move V12, V2
	175 Move W8, [X0+224]
	176 Compare W8, 0
	177 JumpIfNotEqual {180}
	178 Call 0x1C17DFC
	179 Move X0, [X22]
	180 Move X8, [X0+184]
	181 Move X1, X31
	182 Move W0, [X8+16]
	183 Call LayerMask.op_Implicit, X0
	184 Move X8, [X21]
	185 Move W21, W0
	186 Move W9, [X8+224]
	187 Compare W9, 0
	188 JumpIfNotEqual {191}
	189 Move X0, X8
	190 Call 0x1C17DFC
	191 Move X8, -19603456
	192 Move V9, [X8+188]
	193 Move V0, V10
	194 Move V1, V11
	195 Move V2, V12
	196 Move V3, V9
	197 Move W0, W21
	198 Move X1, X31
	199 Call Physics.OverlapSphere, X0, V0, X1
	200 Compare X0, 0
	201 JumpIfEqual {369}
	202 Move W8, [X0+24]
	203 Move X21, X0
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move X27, 0x235A000
	206 Move X27, [X27+3000]
	207 Move W26, W31
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Add X8, X21, W26
	210 Move X0, [X8+32]
	211 Compare X0, 0
	212 JumpIfEqual {369}
	213 Move X1, X31
	214 Call Collider.get_attachedRigidbody, X0
	215 Move X8, [X25]
	216 Move X22, X0
	217 Move W9, [X8+224]
	218 Compare W9, 0
	219 JumpIfNotEqual {222}
	220 Move X0, X8
	221 Call 0x1C17DFC
	222 Move X0, X22
	223 Move X1, X31
	224 Move X2, X31
	225 Call Object.op_Inequality, X0, X1
	226 Move TEMP, X0
	227 And TEMP, TEMP, 1
	228 Compare TEMP, 1
	229 JumpIfNotEqual {292}
	230 Compare X22, 0
	231 JumpIfEqual {369}
	232 Move X0, X22
	233 Move X1, X31
	234 Call Component.get_gameObject, X0
	235 Move X23, X0
	236 Move X0, X19
	237 Move X1, X31
	238 Call Component.get_gameObject, X0
	239 Move X8, [X25]
	240 Move X24, X0
	241 Move W9, [X8+224]
	242 Compare W9, 0
	243 JumpIfNotEqual {246}
	244 Move X0, X8
	245 Call 0x1C17DFC
	246 Move X0, X23
	247 Move X1, X24
	248 Move X2, X31
	249 Call Object.op_Inequality, X0, X1
	250 Move TEMP, X0
	251 And TEMP, TEMP, 1
	252 Compare TEMP, 1
	253 JumpIfNotEqual {292}
	254 Move X1, [X27]
	255 Move X0, X22
	256 Call 0x21A4894, X0
	257 Move X8, [X25]
	258 Move X23, X0
	259 Move W9, [X8+224]
	260 Compare W9, 0
	261 JumpIfNotEqual {264}
	262 Move X0, X8
	263 Call 0x1C17DFC
	264 Move X0, X23
	265 Move X1, X31
	266 Move X2, X31
	267 Call Object.op_Inequality, X0, X1
	268 Move TEMP, X0
	269 And TEMP, TEMP, 1
	270 Compare TEMP, 1
	271 JumpIfNotEqual {292}
	272 Compare X23, 0
	273 JumpIfEqual {369}
	274 Move X0, X23
	275 Move X1, X31
	276 Call GrabbableItem.get_allowAddToBag, X0
	277 Move TEMP, X0
	278 And TEMP, TEMP, 1
	279 Compare TEMP, 1
	280 JumpIfNotEqual {292}
	281 Move X0, X23
	282 Move X1, X31
	283 Call GrabbableItem.get_attachedAnchorId, X0
	284 Move [X31+104], X0
	285 Add X0, X31, 104
	286 Move X1, X31
	287 Call NetworkBehaviourId.get_IsValid, X0
	288 Move TEMP, X0
	289 And TEMP, TEMP, 1
	290 Compare TEMP, 1
	291 JumpIfNotEqual {315}
	292 Move W8, [X21+24]
	293 Add W26, W26, 1
	294 NotImplemented "Instruction CMP not yet implemented."
	295 Move X0, X19
	296 Move V0, V8
	297 Call InventoryBag.UpdateMass, X0, V0
	298 Move X20, [X31+208]
	299 Move X19, [X31+216]
	300 Move X22, [X31+192]
	301 Move X21, [X31+200]
	302 Move X24, [X31+176]
	303 Move X23, [X31+184]
	304 Move X26, [X31+160]
	305 Move X25, [X31+168]
	306 Move X30, [X31+144]
	307 Move X27, [X31+152]
	308 Move D9, [X31+128]
	309 Move D8, [X31+136]
	310 Move D11, [X31+112]
	311 Move D10, [X31+120]
	312 Move V12, [X31+96]
	313 Add X31, X31, 224
	314 Return 
	315 Add X8, X31, 32
	316 Move X0, X19
	317 Call InventoryBag.get_containedObjects, X0
	318 Move V0, [X31+2]
	319 Move X8, [X31+48]
	320 Move [X31+4], V0
	321 Move [X31+80], X8
	322 Move X8, [X23+64]
	323 Compare X8, 0
	324 JumpIfEqual {369}
	325 Move X8, [X8+32]
	326 Compare X8, 0
	327 JumpIfEqual {329}
	328 Move W2, [X8]
	329 Move X2, X31
	330 Move X8, 0x235B000
	331 Move X8, [X8+120]
	332 Add X0, X31, 64
	333 Move W1, W20
	334 Move X3, [X8]
	335 Call NetworkArray`1<NetworkId>.Set, X0, X1, X2
	336 Move X0, X22
	337 Move X1, X31
	338 Call Rigidbody.get_mass, X0
	339 Move X8, [X19+64]
	340 Move V10, V0
	341 Compare X8, 0
	342 JumpIfEqual {347}
	343 Move X8, [X8+32]
	344 Compare X8, 0
	345 JumpIfEqual {347}
	346 Move W1, [X8]
	347 Move X1, X31
	348 Move W8, [X19+104]
	349 Move X0, X23
	350 Move X2, X31
	351 NotImplemented "Instruction BFM not yet implemented."
	352 Call GrabbableItem.AddToBag, X0, X1
	353 Move X0, [X19+128]
	354 Compare X0, 0
	355 JumpIfEqual {369}
	356 Add X1, X31, 60
	357 Move X2, X31
	358 Add S8, S8, S10
	359 Call GrabbableItem.TryGetHandSide, X0, X1
	360 Move TEMP, X0
	361 And TEMP, TEMP, 1
	362 Compare TEMP, 1
	363 JumpIfNotEqual {295}
	364 Move W0, [X31+60]
	365 Move S0, 0.5
	366 Move V1, V9
	367 Move X1, X31
	368 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	369 Call 0x1C17F20
	370 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x01D9E408 LDR X8, [X19 + 0x40]
	0x01D9E40C CBZ X8, 0x1D9EBD4

ISIL:
	001 Move X1, X31
	002 Call NetworkBehaviour..ctor, X0
	003 Return 

Method: System.Void CopyBackingFieldsToState(System.Boolean param_0)

Disassembly:
	0x01D9E410 LDR X22, [X20 + 0x38]
	0x01D9E414 MOV X21, X0
	0x01D9E418 MOV X0, X8
	0x01D9E41C MOV X1, X31
	0x01D9E420 BL 0x3C3F58C
	0x01D9E424 ADRP X8, 0x2358000
	0x01D9E428 LDR X8, [X8 + 0xB58]
	0x01D9E42C ADD X0, X31, 0x90
	0x01D9E430 STP X31, X31, [X31 + 0x90]
	0x01D9E434 LDR X1, [X8]
	0x01D9E438 BL 0x243BFEC
	0x01D9E43C LDR X0, [X19 + 0x40]
	0x01D9E440 CBZ X0, 0x1D9EBD4
	0x01D9E444 MOV X1, X31
	0x01D9E448 BL 0x3C3DEB4
	0x01D9E44C ADRP X8, 0x2358000
	0x01D9E450 LDR X8, [X8 + 0xB60]
	0x01D9E454 ADD X0, X31, 0x58
	0x01D9E458 STP X31, X31, [X31 + 0x58]
	0x01D9E45C STR W31, [X31 + 0x68]
	0x01D9E460 LDR X1, [X8]
	0x01D9E464 BL 0x2437C9C
	0x01D9E468 ADRP X28, 0x2359000
	0x01D9E46C LDR X28, [X28 + 0x158]
	0x01D9E470 LDR X0, [X28]
	0x01D9E474 LDR W8, [X0 + 0xE0]
	0x01D9E478 CBNZ W8, 0x1D9E484
	0x01D9E47C BL 0x1C16DFC
	0x01D9E480 LDR X0, [X28]
	0x01D9E484 LDR X8, [X0 + 0xB8]
	0x01D9E488 LDR X25, [X8 + 0x8]
	0x01D9E48C CBZ X25, 0x1D9E4E8
	0x01D9E490 LDUR V0, [X31 + 0x58]
	0x01D9E494 LDR W8, [X31 + 0x68]
	0x01D9E498 LDP X23, X24, [X31 + 0x90]
	0x01D9E49C B 0x1D9E554
	0x01D9E4A0 MOV X0, X19
	0x01D9E4A4 BL 0x1D9ED80
	0x01D9E4A8 LDR X20, [X19 + 0x50]
	0x01D9E4AC MOV X0, X19
	0x01D9E4B0 MOV X1, X31
	0x01D9E4B4 BL 0x3C32E90
	0x01D9E4B8 CBZ X0, 0x1D9EBD4
	0x01D9E4BC MOV X1, X31
	0x01D9E4C0 BL 0x3C3F58C
	0x01D9E4C4 FMOV S3, 1
	0x01D9E4C8 MOV X0, X20
	0x01D9E4CC MOV X1, X31
	0x01D9E4D0 BL 0x1DC15C4
	0x01D9E4D4 B 0x1D9EBAC
	0x01D9E4D8 LDR W0, [X20 + 0x24]
	0x01D9E4DC MOV X1, X31
	0x01D9E4E0 BL 0x1DD71F0
	0x01D9E4E4 B 0x1D9EA44
	0x01D9E4E8 LDUR V0, [X31 + 0x58]
	0x01D9E4EC LDR W8, [X31 + 0x68]
	0x01D9E4F0 LDP X23, X24, [X31 + 0x90]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X21, 0x263B000
	008 Move X20, 0x2359000
	009 Move W8, [X21+2637]
	010 Move X20, [X20+2680]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x235A000
	017 Move X0, [X0+152]
	018 Call 0x1C17CF4
	019 Move X0, 0x2359000
	020 Move X0, [X0+2680]
	021 Call 0x1C17CF4
	022 Move X0, 0x235A000
	023 Move X0, [X0+160]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+2637], W8
	027 Move W1, [X19+168]
	028 Move X22, 0x235A000
	029 Move X21, 0x235A000
	030 Move X22, [X22+160]
	031 Move X21, [X21+152]
	032 Move X0, X19
	033 Call InventoryBag.set_isOpen, X0, X1
	034 Add X8, X31, 32
	035 Move X0, X19
	036 Call InventoryBag.get_containedObjects, X0
	037 Move V0, [X31+2]
	038 Move X8, [X31+48]
	039 Move X0, [X20]
	040 Move [X31], V0
	041 Move [X31+16], X8
	042 Move W8, [X0+224]
	043 Move X20, [X19+176]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X2, [X22]
	048 Move V0, [X31]
	049 Move X8, [X31+16]
	050 Move X3, [X21]
	051 Add X0, X31, 32
	052 Move X1, X20
	053 Move [X31+2], V0
	054 Move [X31+48], X8
	055 Call NetworkBehaviourUtils.InitializeNetworkArray, X0, X1, X2
	056 Move W1, [X19+184]
	057 Move X0, X19
	058 Call InventoryBag.set_emptyingTimer, X0, X1
	059 Move X20, [X31+96]
	060 Move X19, [X31+104]
	061 Move X22, [X31+80]
	062 Move X21, [X31+88]
	063 Move X30, [X31+64]
	064 Add X31, X31, 112
	065 Return 

Method: System.Void CopyStateToBackingFields()

Disassembly:
	0x01D9E4F4 STR V0, [X31 + 0xA]
	0x01D9E4F8 STR W8, [X31 + 0xB0]
	0x01D9E4FC LDR W8, [X0 + 0xE0]
	0x01D9E500 CBNZ W8, 0x1D9E50C
	0x01D9E504 BL 0x1C16DFC
	0x01D9E508 LDR X0, [X28]
	0x01D9E50C ADRP X9, 0x2359000
	0x01D9E510 LDR X8, [X0 + 0xB8]
	0x01D9E514 LDR X9, [X9 + 0x140]
	0x01D9E518 LDR X26, [X8]
	0x01D9E51C LDR X0, [X9]
	0x01D9E520 BL 0x1C16F10
	0x01D9E524 ADRP X8, 0x2359000
	0x01D9E528 LDR X8, [X8 + 0x150]
	0x01D9E52C MOV X1, X26
	0x01D9E530 MOV X3, X31
	0x01D9E534 MOV X25, X0
	0x01D9E538 LDR X2, [X8]
	0x01D9E53C BL 0x1EB1E84
	0x01D9E540 LDR X8, [X28]
	0x01D9E544 LDR X8, [X8 + 0xB8]
	0x01D9E548 STR X25, [X8 + 0x8]
	0x01D9E54C LDR V0, [X31 + 0xA]
	0x01D9E550 LDR W8, [X31 + 0xB0]
	0x01D9E554 STR V0, [X31 + 0xC]
	0x01D9E558 STR W8, [X31 + 0xD0]
	0x01D9E55C CBZ X21, 0x1D9EBD4
	0x01D9E560 LDR V0, [X31 + 0xC]
	0x01D9E564 LDR W8, [X31 + 0xD0]
	0x01D9E568 ADD X4, X31, 0x70
	0x01D9E56C MOV X0, X21
	0x01D9E570 MOV X1, X22
	0x01D9E574 MOV X2, X23
	0x01D9E578 MOV X3, X24
	0x01D9E57C MOV X5, X31
	0x01D9E580 MOV X6, X25
	0x01D9E584 MOV W7, W31
	0x01D9E588 STR V0, [X31 + 0x7]
	0x01D9E58C STR W8, [X31 + 0x80]
	0x01D9E590 STR X31, [X31]
	0x01D9E594 BL 0x1EAE6A8
	0x01D9E598 ADRP X8, 0x2357000
	0x01D9E59C LDR X8, [X8 + 0x9A0]
	0x01D9E5A0 MOV X24, X0
	0x01D9E5A4 LDR X8, [X8]
	0x01D9E5A8 LDR W9, [X8 + 0xE0]
	0x01D9E5AC CBNZ W9, 0x1D9E5BC
	0x01D9E5B0 MOV X0, X8
	0x01D9E5B4 MOV W21, W31

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0x263B000
	007 Move X20, 0x2359000
	008 Move W8, [X21+2638]
	009 Move X20, [X20+2680]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x235A000
	016 Move X0, [X0+168]
	017 Call 0x1C17CF4
	018 Move X0, 0x2359000
	019 Move X0, [X0+2680]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+2638], W8
	023 Move X21, 0x235A000
	024 Move X21, [X21+168]
	025 Move X0, X19
	026 Call InventoryBag.get_isOpen, X0
	027 And W8, W0, 1
	028 Move [X19+168], W8
	029 Add X8, X31, 32
	030 Move X0, X19
	031 Call InventoryBag.get_containedObjects, X0
	032 Move V0, [X31+2]
	033 Move X8, [X31+48]
	034 Move X0, [X20]
	035 Move [X31], V0
	036 Move [X31+16], X8
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move V0, [X31]
	042 Move X8, [X31+16]
	043 Move X2, [X21]
	044 Add X1, X19, 176
	045 Add X0, X31, 32
	046 Move [X31+2], V0
	047 Move [X31+48], X8
	048 Call NetworkBehaviourUtils.CopyFromNetworkArray, X0, X1
	049 Move X0, X19
	050 Call InventoryBag.get_emptyingTimer, X0
	051 Move [X19+184], W0
	052 Move X20, [X31+80]
	053 Move X19, [X31+88]
	054 Move X30, [X31+64]
	055 Move X21, [X31+72]
	056 Add X31, X31, 96
	057 Return 

Method: System.Void RPC_ToggleOnOff@Invoker(Fusion.NetworkBehaviour behaviour, Fusion.SimulationMessage* message)

Disassembly:
	0x01D9E5B8 BL 0x1C16DFC
	0x01D9E5BC MOV X0, X31
	0x01D9E5C0 BL 0x1DB1DCC
	0x01D9E5C4 CBZ X24, 0x1D9EBEC
	0x01D9E5C8 ADRP X8, 0x2358000
	0x01D9E5CC LDR X8, [X8 + 0xBB8]
	0x01D9E5D0 MOV X23, X0
	0x01D9E5D4 LDR X1, [X8]
	0x01D9E5D8 MOV X0, X24
	0x01D9E5DC BL 0x21A3894
	0x01D9E5E0 MOV X22, X0
	0x01D9E5E4 LDR X0, [X27]
	0x01D9E5E8 LDR W8, [X0 + 0xE0]
	0x01D9E5EC CBNZ W8, 0x1D9E5F4
	0x01D9E5F0 BL 0x1C16DFC
	0x01D9E5F4 MOV X0, X23
	0x01D9E5F8 MOV X1, X31
	0x01D9E5FC MOV X2, X31
	0x01D9E600 BL 0x3C354F8
	0x01D9E604 TBZ X0, 0x0, 0x1D9E91C
	0x01D9E608 LDR X0, [X27]
	0x01D9E60C LDR W8, [X0 + 0xE0]
	0x01D9E610 CBNZ W8, 0x1D9E618
	0x01D9E614 BL 0x1C16DFC
	0x01D9E618 MOV X0, X22
	0x01D9E61C MOV X1, X31
	0x01D9E620 MOV X2, X31
	0x01D9E624 BL 0x3C354F8
	0x01D9E628 TBZ X0, 0x0, 0x1D9E91C
	0x01D9E62C STR X24, [X31 + 0x10]
	0x01D9E630 CBZ X23, 0x1D9EC04
	0x01D9E634 LDR X28, [X23 + 0xE8]
	0x01D9E638 CBZ X28, 0x1D9EC08
	0x01D9E63C LDR X8, [X28 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x263B000
	005 Move W8, [X20+2639]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x235A000
	012 Move X0, [X0+176]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2639], W8
	016 Compare X19, 0
	017 JumpIfEqual {39}
	018 Move X9, 0x235A000
	019 Move X9, [X9+176]
	020 Move W8, 1
	021 Move [X19+88], W8
	022 Move X8, [X19]
	023 Move X1, [X9]
	024 Move W10, [X8+304]
	025 Move W9, [X1+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, [X8+200]
	028 Add X8, X8, X9
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Call InventoryBag.RPC_ToggleOnOff, X0
	036 Return 
	037 Move X0, X19
	038 Call 0x1C181E0
	039 Call 0x1C17F20

