Type: AnimalCompany.ItemSellingMachineView

Method: System.Boolean get_isSellingInProgress()

Disassembly:
	0x01CD810C FDIV S0, S0, S1
	0x01CD8110 MOVN W21, 0x0
	0x01CD8114 FSUB S8, S9, S0
	0x01CD8118 FMOV S10, W31

ISIL:
	001 Move X8, [X0+144]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void Awake()

Disassembly:
	0x01CD811C LDR W8, [X8 + 0x18]
	0x01CD8120 ADD W23, W21, 0x1
	0x01CD8124 CMP W23, W8
	0x01CD8128 B.GE 0x1CD85D0
	0x01CD812C FSUB S0, S9, S8
	0x01CD8130 FMOV S1, 3
	0x01CD8134 BL 0x3D198E0
	0x01CD8138 LDR X0, [X22]
	0x01CD813C MOV V8.16B, V0.16B
	0x01CD8140 LDR W8, [X0 + 0xE0]
	0x01CD8144 CBNZ W8, 0x1CD8150
	0x01CD8148 BL 0x1B6E8F8
	0x01CD814C LDR X0, [X22]
	0x01CD8150 LDR X8, [X0 + 0xB8]
	0x01CD8154 LDR X8, [X8 + 0x10]
	0x01CD8158 CBZ X8, 0x1CD85F8
	0x01CD815C LDR W9, [X8 + 0x18]
	0x01CD8160 CMP W23, W9
	0x01CD8164 B.CS 0x1CD85FC
	0x01CD8168 LDR X9, [X20 + 0x70]
	0x01CD816C FSUB S8, S9, S8
	0x01CD8170 FMIN S0, S8, S9
	0x01CD8174 FCMP S8, 0x0
	0x01CD8178 FCSEL S0, S0, S10, PL
	0x01CD817C CBZ X9, 0x1CD85F8
	0x01CD8180 LDR W10, [X9 + 0x18]
	0x01CD8184 ADD W21, W21, 0x1
	0x01CD8188 CMP W21, W10
	0x01CD818C B.CS 0x1CD85FC
	0x01CD8190 SXTW X10, W23
	0x01CD8194 ADD X9, X9, X10, 0x3, LSL
	0x01CD8198 LDR X0, [X9 + 0x20]
	0x01CD819C CBZ X0, 0x1CD85F8
	0x01CD81A0 ADD X8, X8, X10, 0x2, LSL
	0x01CD81A4 LDR V1, [X8 + 0x20]
	0x01CD81A8 MOV X1, X31
	0x01CD81AC FSUB S2, S10, S1
	0x01CD81B0 FMUL S0, S0, S2
	0x01CD81B4 FADD S0, S1, S0
	0x01CD81B8 FMOV S1, W31
	0x01CD81BC FMOV S2, W31
	0x01CD81C0 BL 0x3AA7954
	0x01CD81C4 LDR X8, [X20 + 0x70]
	0x01CD81C8 CBNZ X8, 0x1CD811C
	0x01CD81CC B 0x1CD85F8
	0x01CD81D0 LDR V8, [X19 + 0x3C]
	0x01CD81D4 MOVN W8, 0x0
	0x01CD81D8 STR W8, [X19 + 0x10]
	0x01CD81DC B 0x1CD83BC
	0x01CD81E0 MOVN W8, 0x0
	0x01CD81E4 STR W8, [X19 + 0x10]
	0x01CD81E8 CBZ X20, 0x1CD85F8
	0x01CD81EC LDR X21, [X20 + 0x60]
	0x01CD81F0 MOV X0, X20
	0x01CD81F4 MOV X1, X31
	0x01CD81F8 BL 0x3A9B084
	0x01CD81FC CBZ X0, 0x1CD85F8
	0x01CD8200 MOV X1, X31
	0x01CD8204 BL 0x3AA7658
	0x01CD8208 FMOV S3, 1
	0x01CD820C MOV X0, X21
	0x01CD8210 MOV X1, X31
	0x01CD8214 BL 0x1CCD9CC
	0x01CD8218 LDR V8, [X19 + 0x34]
	0x01CD821C STR S8, [X19 + 0x3C]
	0x01CD8220 B 0x1CD8230
	0x01CD8224 LDR V8, [X19 + 0x3C]
	0x01CD8228 MOVN W8, 0x0
	0x01CD822C STR W8, [X19 + 0x10]
	0x01CD8230 FCMP S8, 0x0
	0x01CD8234 B.LE 0x1CD8320
	0x01CD8238 MOV X0, X31
	0x01CD823C BL 0x3AA481C
	0x01CD8240 FSUB S0, S8, S0
	0x01CD8244 STR S0, [X19 + 0x3C]
	0x01CD8248 CBZ X20, 0x1CD85F8
	0x01CD824C LDR X8, [X20 + 0x70]
	0x01CD8250 CBZ X8, 0x1CD85F8
	0x01CD8254 LDR V1, [X19 + 0x34]
	0x01CD8258 ADRP X22, 0x2277000
	0x01CD825C LDR X22, [X22 + 0xC28]
	0x01CD8260 FMOV S9, 1
	0x01CD8264 FDIV S0, S0, S1
	0x01CD8268 MOV W21, W31
	0x01CD826C FSUB S8, S9, S0
	0x01CD8270 FMOV S10, W31
	0x01CD8274 LDR W8, [X8 + 0x18]
	0x01CD8278 CMP W21, W8
	0x01CD827C B.GE 0x1CD85BC
	0x01CD8280 FSUB S0, S9, S8
	0x01CD8284 FMOV S1, 3
	0x01CD8288 BL 0x3D198E0
	0x01CD828C LDR X0, [X22]
	0x01CD8290 MOV V8.16B, V0.16B
	0x01CD8294 LDR W8, [X0 + 0xE0]
	0x01CD8298 CBNZ W8, 0x1CD82A4
	0x01CD829C BL 0x1B6E8F8
	0x01CD82A0 LDR X0, [X22]
	0x01CD82A4 LDR X8, [X0 + 0xB8]
	0x01CD82A8 LDR X8, [X8 + 0x10]
	0x01CD82AC CBZ X8, 0x1CD85F8
	0x01CD82B0 LDR W9, [X8 + 0x18]
	0x01CD82B4 CMP W21, W9
	0x01CD82B8 B.CS 0x1CD85FC
	0x01CD82BC LDR X9, [X20 + 0x70]
	0x01CD82C0 FSUB S8, S9, S8
	0x01CD82C4 FMIN S0, S8, S9
	0x01CD82C8 FCMP S8, 0x0
	0x01CD82CC FCSEL S0, S0, S10, PL
	0x01CD82D0 CBZ X9, 0x1CD85F8
	0x01CD82D4 LDR W10, [X9 + 0x18]
	0x01CD82D8 CMP W21, W10
	0x01CD82DC B.CS 0x1CD85FC
	0x01CD82E0 SXTW X10, W21
	0x01CD82E4 ADD X9, X9, X10, 0x3, LSL
	0x01CD82E8 LDR X0, [X9 + 0x20]
	0x01CD82EC CBZ X0, 0x1CD85F8
	0x01CD82F0 ADD X8, X8, X10, 0x2, LSL
	0x01CD82F4 LDR V1, [X8 + 0x20]
	0x01CD82F8 FMOV S2, W31
	0x01CD82FC MOV X1, X31
	0x01CD8300 ADD W21, W21, 0x1
	0x01CD8304 FMUL S0, S0, S1
	0x01CD8308 FADD S0, S0, S10
	0x01CD830C FMOV S1, W31
	0x01CD8310 BL 0x3AA7954
	0x01CD8314 LDR X8, [X20 + 0x70]
	0x01CD8318 CBNZ X8, 0x1CD8274
	0x01CD831C B 0x1CD85F8
	0x01CD8320 MOV W0, W31
	0x01CD8324 B 0x1CD85DC
	0x01CD8328 CBZ X20, 0x1CD85F8
	0x01CD832C LDR X21, [X20 + 0x68]
	0x01CD8330 MOV X0, X20
	0x01CD8334 MOV X1, X31
	0x01CD8338 BL 0x3A9B084
	0x01CD833C CBZ X0, 0x1CD85F8
	0x01CD8340 MOV X1, X31
	0x01CD8344 BL 0x3AA7658
	0x01CD8348 FMOV S3, 1
	0x01CD834C MOV X0, X21
	0x01CD8350 MOV X1, X31
	0x01CD8354 BL 0x1CCD9CC
	0x01CD8358 LDR X22, [X20 + 0x48]
	0x01CD835C CBZ X22, 0x1CD85F8
	0x01CD8360 LDR W8, [X22 + 0x18]
	0x01CD8364 CMP W8, 0x1
	0x01CD8368 B.LT 0x1CD83B4
	0x01CD836C MOV W23, W31
	0x01CD8370 CMP W23, W8
	0x01CD8374 B.CS 0x1CD85FC
	0x01CD8378 ADD X8, X22, W23, 0x3, SXTW
	0x01CD837C LDR X21, [X8 + 0x20]
	0x01CD8380 CBZ X21, 0x1CD85F8
	0x01CD8384 MOVZ W1, 0x1
	0x01CD8388 MOV X0, X21
	0x01CD838C MOV X2, X31
	0x01CD8390 BL 0x3A9A604
	0x01CD8394 FMOV S0, W31
	0x01CD8398 MOV X0, X21
	0x01CD839C MOV X1, X31
	0x01CD83A0 BL 0x3A7F1D4
	0x01CD83A4 LDR W8, [X22 + 0x18]
	0x01CD83A8 ADD W23, W23, 0x1
	0x01CD83AC CMP W23, W8
	0x01CD83B0 B.LT 0x1CD8370
	0x01CD83B4 LDR V8, [X19 + 0x2C]
	0x01CD83B8 STR S8, [X19 + 0x3C]
	0x01CD83BC FCMP S8, 0x0
	0x01CD83C0 B.LE 0x1CD8460
	0x01CD83C4 MOV X0, X31
	0x01CD83C8 BL 0x3AA481C
	0x01CD83CC FSUB S0, S8, S0
	0x01CD83D0 STR S0, [X19 + 0x3C]
	0x01CD83D4 CBZ X20, 0x1CD85F8
	0x01CD83D8 LDR X20, [X20 + 0x48]
	0x01CD83DC CBZ X20, 0x1CD85F8
	0x01CD83E0 LDR W8, [X20 + 0x18]
	0x01CD83E4 CMP W8, 0x1
	0x01CD83E8 B.LT 0x1CD8454
	0x01CD83EC LDR V1, [X19 + 0x2C]
	0x01CD83F0 FMOV S2, 1
	0x01CD83F4 FMOV S3, -1
	0x01CD83F8 MOV W21, W31
	0x01CD83FC FDIV S0, S0, S1
	0x01CD8400 FSUB S0, S2, S0
	0x01CD8404 FADD S0, S0, S0
	0x01CD8408 FADD S0, S0, S3
	0x01CD840C FMUL S1, S0, S0
	0x01CD8410 LDR V3, [X19 + 0x38]
	0x01CD8414 FMUL S1, S0, S1
	0x01CD8418 FMUL S0, S0, S1
	0x01CD841C FSUB S0, S2, S0
	0x01CD8420 FMUL S8, S3, S0
	0x01CD8424 CMP W21, W8
	0x01CD8428 B.CS 0x1CD85FC
	0x01CD842C ADD X8, X20, W21, 0x3, SXTW
	0x01CD8430 LDR X0, [X8 + 0x20]
	0x01CD8434 CBZ X0, 0x1CD85F8
	0x01CD8438 MOV V0.16B, V8.16B
	0x01CD843C MOV X1, X31
	0x01CD8440 BL 0x3A7F1D4
	0x01CD8444 LDR W8, [X20 + 0x18]
	0x01CD8448 ADD W21, W21, 0x1
	0x01CD844C CMP W21, W8
	0x01CD8450 B.LT 0x1CD8424
	0x01CD8454 MOVZ W8, 0x2
	0x01CD8458 STR X31, [X19 + 0x18]
	0x01CD845C B 0x1CD85C4
	0x01CD8460 CBZ X20, 0x1CD85F8
	0x01CD8464 LDR X22, [X20 + 0x48]
	0x01CD8468 CBZ X22, 0x1CD85F8
	0x01CD846C LDR W8, [X22 + 0x18]
	0x01CD8470 CMP W8, 0x1
	0x01CD8474 B.LT 0x1CD84C0

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0x254C000
	014 Move W8, [X20+1540]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {43}
	020 Move X0, 0x2278000
	021 Move X0, [X0+3264]
	022 Call 0x1B6F7F0
	023 Move X0, 0x2278000
	024 Move X0, [X0+992]
	025 Call 0x1B6F7F0
	026 Move X0, 0x2278000
	027 Move X0, [X0+3272]
	028 Call 0x1B6F7F0
	029 Move X0, 0x2278000
	030 Move X0, [X0+3280]
	031 Call 0x1B6F7F0
	032 Move X0, 0x2278000
	033 Move X0, [X0+3288]
	034 Call 0x1B6F7F0
	035 Move X0, 0x2278000
	036 Move X0, [X0+3296]
	037 Call 0x1B6F7F0
	038 Move X0, 0x2278000
	039 Move X0, [X0+3112]
	040 Call 0x1B6F7F0
	041 Move W8, 1
	042 Move [X20+1540], W8
	043 Move X20, [X19+120]
	044 Compare X20, 0
	045 JumpIfEqual {220}
	046 Move W8, [X20+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move W21, W31
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Add X8, X20, W21
	051 Move X0, [X8+32]
	052 Compare X0, 0
	053 JumpIfEqual {220}
	054 Move W1, W31
	055 Move X2, X31
	056 Call Behaviour.set_enabled, X0, X1
	057 Move W8, [X20+24]
	058 Add W21, W21, 1
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X20, [X19+72]
	061 Compare X20, 0
	062 JumpIfEqual {220}
	063 Move W8, [X20+24]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move W21, W31
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add X8, X20, W21
	068 Move X0, [X8+32]
	069 Compare X0, 0
	070 JumpIfEqual {220}
	071 Move W1, W31
	072 Move X2, X31
	073 Call Behaviour.set_enabled, X0, X1
	074 Move W8, [X20+24]
	075 Add W21, W21, 1
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X8, [X19+40]
	078 Compare X8, 0
	079 JumpIfEqual {220}
	080 Move X9, 0x2278000
	081 Move X9, [X9+3272]
	082 Move W1, [X8+24]
	083 Move X0, [X9]
	084 Call 0x1B6F868
	085 Move X8, [X19+40]
	086 Move [X19+128], X0
	087 Compare X8, 0
	088 JumpIfEqual {220}
	089 Move X25, 0x2278000
	090 Move X26, 0x2278000
	091 Move X27, 0x2278000
	092 Move X28, 0x2278000
	093 Move X23, 0x2278000
	094 Move X22, 0x2278000
	095 Move X25, [X25+3264]
	096 Move X26, [X26+3296]
	097 Move X27, [X27+3288]
	098 Move X28, [X28+3280]
	099 Move X23, [X23+992]
	100 Move X22, [X22+3112]
	101 Move X24, X31
	102 NotImplemented "Instruction LDRSW not yet implemented."
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move X8, [X19+128]
	105 Compare X8, 0
	106 JumpIfEqual {220}
	107 Move W9, [X8+24]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Add X8, X8, X24
	110 Move [X8+32], X31
	111 Move X8, [X19+40]
	112 Compare X8, 0
	113 JumpIfEqual {220}
	114 Move W9, [X8+24]
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Add X8, X8, X24
	117 Move X29, [X8+32]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Compare W24, 0
	121 JumpIfNotEqual {164}
	122 Compare X29, 0
	123 JumpIfEqual {220}
	124 Move X0, [X25]
	125 Move X20, [X29+32]
	126 Call 0x1B6FA0C
	127 Move X2, [X28]
	128 Compare X29, 0
	129 JumpIfEqual {220}
	130 Move X0, [X25]
	131 Move X20, [X29+32]
	132 Call 0x1B6FA0C
	133 Move X2, [X26]
	134 Compare X29, 0
	135 JumpIfEqual {220}
	136 Move X0, [X25]
	137 Move X20, [X29+32]
	138 Call 0x1B6FA0C
	139 Move X2, [X27]
	140 Move X1, X19
	141 Move X3, X31
	142 Move X21, X0
	143 Call Action`1<Object>..ctor, X0, X1, X2
	144 Move X0, X20
	145 Move X1, X21
	146 Move X2, X31
	147 Call Delegate.Combine, X0, X1
	148 Compare X0, 0
	149 JumpIfEqual {163}
	150 Move X21, [X25]
	151 Move X20, X0
	152 Move X1, X21
	153 Call 0x1B6F8FC
	154 Compare X0, 0
	155 JumpIfEqual {235}
	156 Move [X29+32], X0
	157 Move X21, [X25]
	158 Move X0, X20
	159 Move X1, X21
	160 Call 0x1B6F8FC
	161 Compare X0, 0
	162 JumpIfNotEqual {164}
	163 Move [X29+32], X31
	164 Move X8, [X19+40]
	165 Add X24, X24, 1
	166 Compare X8, 0
	167 JumpIfNotEqual {102}
	168 Move X8, [X19+48]
	169 Compare X8, 0
	170 JumpIfEqual {220}
	171 Move X0, [X23]
	172 Move W1, [X8+24]
	173 Call 0x1B6F868
	174 Move X8, [X19+48]
	175 Move [X19+32], X0
	176 Compare X8, 0
	177 JumpIfEqual {220}
	178 Move X23, X31
	179 Move X21, X31
	180 Move W9, [X8+24]
	181 NotImplemented "Instruction CMP not yet implemented."
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Add X8, X8, X21
	184 Move X0, [X8+32]
	185 Compare X0, 0
	186 JumpIfEqual {220}
	187 Move X24, [X19+32]
	188 Move X1, X31
	189 Call Renderer.get_material, X0
	190 Move X8, [X22]
	191 Move X20, X0
	192 Move W9, [X8+224]
	193 Compare W9, 0
	194 JumpIfNotEqual {197}
	195 Move X0, X8
	196 Call 0x1B6F8F8
	197 Compare X20, 0
	198 JumpIfEqual {220}
	199 Move X8, [X22]
	200 Move X0, X20
	201 Move X2, X31
	202 Move X8, [X8+184]
	203 Move W1, [X8+4]
	204 Call Material.GetColor, X0, X1
	205 Compare X24, 0
	206 JumpIfEqual {220}
	207 Move W8, [X24+24]
	208 Add X21, X21, 1
	209 Subtract W9, W21, 1
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Add X8, X24, X23
	212 Move [X8+32], S0
	213 Move [X8+40], S1
	214 Move [X8+40], S2
	215 Move [X8+48], S3
	216 Move X8, [X19+48]
	217 Add X23, X23, 16
	218 Compare X8, 0
	219 JumpIfNotEqual {180}
	220 Call 0x1B6FA1C
	221 Move X20, [X31+80]
	222 Move X19, [X31+88]
	223 Move X22, [X31+64]
	224 Move X21, [X31+72]
	225 Move X24, [X31+48]
	226 Move X23, [X31+56]
	227 Move X26, [X31+32]
	228 Move X25, [X31+40]
	229 Move X28, [X31+16]
	230 Move X27, [X31+24]
	231 Move X29, [X31+96]
	232 Move X30, [X31+104]
	233 Return 
	234 Call 0x1B6FA24
	235 Move X0, X20
	236 Move X1, X21
	237 Call 0x1B6FCDC

Method: System.Void OnItemTrigger1Enter(UnityEngine.Collider col)

Disassembly:
	0x01CD8478 MOV W23, W31
	0x01CD847C CMP W23, W8
	0x01CD8480 B.CS 0x1CD85FC
	0x01CD8484 ADD X8, X22, W23, 0x3, SXTW
	0x01CD8488 LDR X21, [X8 + 0x20]
	0x01CD848C CBZ X21, 0x1CD85F8
	0x01CD8490 MOV X0, X21
	0x01CD8494 MOV W1, W31
	0x01CD8498 MOV X2, X31
	0x01CD849C BL 0x3A9A604
	0x01CD84A0 LDR V0, [X19 + 0x38]
	0x01CD84A4 MOV X0, X21
	0x01CD84A8 MOV X1, X31
	0x01CD84AC BL 0x3A7F1D4
	0x01CD84B0 LDR W8, [X22 + 0x18]
	0x01CD84B4 ADD W23, W23, 0x1

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X8, X1
	005 Move X19, X0
	006 Add X1, X31, 8
	007 Move X0, X8
	008 Move X2, X31
	009 Move [X31+8], X31
	010 Call TriggerUtilities.TryGetItemFromCollider, X0, X1
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {18}
	015 Move X0, X19
	016 Move W1, W31
	017 Call ItemSellingMachineView.PlayerBulbEffect, X0, X1
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Add X31, X31, 32
	021 Return 

Method: System.Void OnItemTrigger2Enter(UnityEngine.Collider col)

Disassembly:
	0x01CD8574 LDR W1, [X8]
	0x01CD8578 BL 0x3A7E584
	0x01CD857C LDR W8, [X21 + 0x18]
	0x01CD8580 ADD W23, W23, 0x1
	0x01CD8584 CMP W23, W8
	0x01CD8588 B.LT 0x1CD8528
	0x01CD858C ADRP X8, 0x2276000
	0x01CD8590 LDR V8, [X19 + 0x30]
	0x01CD8594 LDR X8, [X8 + 0x2E8]
	0x01CD8598 LDR X0, [X8]
	0x01CD859C BL 0x1B6EA0C
	0x01CD85A0 MOV V0.16B, V8.16B
	0x01CD85A4 MOV X1, X31
	0x01CD85A8 MOV X20, X0
	0x01CD85AC BL 0x3AA273C
	0x01CD85B0 STR X20, [X19 + 0x18]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X8, X1
	005 Move X19, X0
	006 Add X1, X31, 8
	007 Move X0, X8
	008 Move X2, X31
	009 Move [X31+8], X31
	010 Call TriggerUtilities.TryGetItemFromCollider, X0, X1
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {18}
	015 Move W1, 1
	016 Move X0, X19
	017 Call ItemSellingMachineView.PlayerBulbEffect, X0, X1
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Add X31, X31, 32
	021 Return 

Method: System.Void OnItemTrigger3Enter(UnityEngine.Collider col)

Disassembly:
	0x01CD85B4 MOVZ W8, 0x3
	0x01CD85B8 B 0x1CD85C4
	0x01CD85BC STR X31, [X19 + 0x18]
	0x01CD85C0 MOVZ W8, 0x4
	0x01CD85C4 STR W8, [X19 + 0x10]
	0x01CD85C8 MOVZ W0, 0x1
	0x01CD85CC B 0x1CD85DC
	0x01CD85D0 MOVZ W0, 0x1
	0x01CD85D4 STR X31, [X19 + 0x18]
	0x01CD85D8 STR W0, [X19 + 0x10]
	0x01CD85DC LDP X20, X19, [X31 + 0x40]
	0x01CD85E0 LDP X22, X21, [X31 + 0x30]
	0x01CD85E4 LDP X24, X23, [X31 + 0x20]
	0x01CD85E8 LDR X30, [X31 + 0x18]
	0x01CD85EC LDP D9, D8, [X31 + 0x8]
	0x01CD85F0 LDR V10, [X31], #0x50

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X8, X1
	005 Move X19, X0
	006 Add X1, X31, 8
	007 Move X0, X8
	008 Move X2, X31
	009 Move [X31+8], X31
	010 Call TriggerUtilities.TryGetItemFromCollider, X0, X1
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {18}
	015 Move W1, 2
	016 Move X0, X19
	017 Call ItemSellingMachineView.PlayerBulbEffect, X0, X1
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Add X31, X31, 32
	021 Return 

Method: System.Void SetOverheatedColor(System.Boolean isOverheated)

Disassembly:
	0x01CD6178 STR V0, [X20 + 0x2]
	0x01CD617C ADD X0, X31, 0x48
	0x01CD6180 LDR X8, [X8]
	0x01CD6184 MOV X1, X31
	0x01CD6188 STP X8, X9, [X31 + 0x48]
	0x01CD618C LDR W8, [X21 + 0x28]
	0x01CD6190 STR W8, [X31 + 0x58]
	0x01CD6194 BL 0x321AF98
	0x01CD6198 ADRP X8, 0x2278000
	0x01CD619C LDR X8, [X8 + 0x7D0]
	0x01CD61A0 LDR X3, [X24]
	0x01CD61A4 MOV X2, X0
	0x01CD61A8 ADD X0, X31, 0x20
	0x01CD61AC LDR X1, [X8]
	0x01CD61B0 STP X31, X31, [X31 + 0x20]
	0x01CD61B4 BL 0x25FCCA4
	0x01CD61B8 LDR W8, [X20 + 0x18]
	0x01CD61BC CMP W8, 0x1
	0x01CD61C0 B.LS 0x1CD627C
	0x01CD61C4 LDR V0, [X31 + 0x2]
	0x01CD61C8 ADRP X9, 0x2277000
	0x01CD61CC ADD X1, X31, 0x1C
	0x01CD61D0 STR V0, [X20 + 0x3]
	0x01CD61D4 LDR W8, [X21 + 0x24]
	0x01CD61D8 LDR X9, [X9 + 0x5F8]
	0x01CD61DC STR W8, [X31 + 0x1C]
	0x01CD61E0 LDR X0, [X9]
	0x01CD61E4 BL 0x1B6E900
	0x01CD61E8 ADRP X8, 0x2279000
	0x01CD61EC LDR X8, [X8 + 0xC68]
	0x01CD61F0 LDR X3, [X24]
	0x01CD61F4 MOV X2, X0
	0x01CD61F8 ADD X0, X31, 0x0
	0x01CD61FC LDR X1, [X8]
	0x01CD6200 STP X31, X31, [X31]
	0x01CD6204 BL 0x25FCCA4
	0x01CD6208 LDR W8, [X20 + 0x18]
	0x01CD620C CMP W8, 0x2
	0x01CD6210 B.LS 0x1CD627C
	0x01CD6214 LDR V0, [X31]
	0x01CD6218 ADRP X8, 0x2277000
	0x01CD621C ADD W21, W22, W23
	0x01CD6220 STR V0, [X20 + 0x4]
	0x01CD6224 LDR X8, [X8 + 0x9A0]
	0x01CD6228 LDR X0, [X8]
	0x01CD622C LDR W8, [X0 + 0xE0]
	0x01CD6230 CBNZ W8, 0x1CD6238
	0x01CD6234 BL 0x1B6E8F8
	0x01CD6238 ADRP X8, 0x2279000
	0x01CD623C LDR X8, [X8 + 0xC70]
	0x01CD6240 MOV X1, X20
	0x01CD6244 MOV X2, X31
	0x01CD6248 LDR X0, [X8]
	0x01CD624C BL 0x1CCF488
	0x01CD6250 MOV X0, X19
	0x01CD6254 MOV X1, X31
	0x01CD6258 BL 0x1CA19B4
	0x01CD625C MOV W0, W21
	0x01CD6260 LDP X20, X19, [X31 + 0xB0]
	0x01CD6264 LDP X22, X21, [X31 + 0xA0]
	0x01CD6268 LDP X24, X23, [X31 + 0x90]
	0x01CD626C LDR X30, [X31 + 0x80]
	0x01CD6270 ADD X31, X31, 0xC0
	0x01CD6274 RET
	0x01CD6278 BL 0x1B6EA1C
	0x01CD627C BL 0x1B6EA24
	0x01CD6280 B 0x1CD6288
	0x01CD6284 B 0x1CD6288
	0x01CD6288 MOV X21, X0
	0x01CD628C CMP W1, 0x1
	0x01CD6290 B.NE 0x1CD62C4
	0x01CD6294 MOV X0, X21
	0x01CD6298 BL 0x3D19840

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x254E000
	011 Move W8, [X21+1541]
	012 Move W20, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x227A000
	019 Move X0, [X0+3112]
	020 Call 0x1B6F7F0
	021 Move W8, 1
	022 Move [X21+1541], W8
	023 Move X21, 0x227A000
	024 Move X21, [X21+3112]
	025 Move TEMP, X20
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {40}
	029 Move X0, [X21]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {35}
	033 Call 0x1B6F8F8
	034 Move X0, [X21]
	035 Move X8, [X0+184]
	036 Move S11, [X8+24]
	037 Move S10, [X8+28]
	038 Move S8, [X8+32]
	039 Move S9, [X8+36]
	040 Move S8, W31
	041 Move S9, 1
	042 Move S10, W31
	043 Move S11, W31
	044 Move X20, [X19+48]
	045 Compare X20, 0
	046 JumpIfEqual {89}
	047 Move W8, [X20+24]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W22, W31
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add X8, X20, W22
	052 Move X0, [X8+32]
	053 Compare X0, 0
	054 JumpIfEqual {89}
	055 Move X1, X31
	056 Call Renderer.get_material, X0
	057 Move X8, [X21]
	058 Move X19, X0
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1B6F8F8
	064 Compare X19, 0
	065 JumpIfEqual {89}
	066 Move X8, [X21]
	067 Move X0, X19
	068 Move V0, V11
	069 Move V1, V10
	070 Move X8, [X8+184]
	071 Move V2, V8
	072 Move V3, V9
	073 Move X2, X31
	074 Move W1, [X8+8]
	075 Call Material.SetColor, X0, X1, X2
	076 Move W8, [X20+24]
	077 Add W22, W22, 1
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X20, [X31+64]
	080 Move X19, [X31+72]
	081 Move X22, [X31+48]
	082 Move X21, [X31+56]
	083 Move X30, [X31+32]
	084 Move D9, [X31+16]
	085 Move D8, [X31+24]
	086 Move D11, [X31+80]
	087 Move D10, [X31+88]
	088 Return 
	089 Call 0x1B6FA1C
	090 Call 0x1B6FA24

Method: System.Void SetExplodedColor(System.Boolean isExploded)

Disassembly:
	0x01CD750C MOV X0, X21
	0x01CD7510 MOV X1, X31
	0x01CD7514 BL 0x1CCD9CC
	0x01CD7518 LDR X8, [X19 + 0x80]
	0x01CD751C CBZ X8, 0x1CD756C
	0x01CD7520 LDR W9, [X8 + 0x18]
	0x01CD7524 CMP W9, W20
	0x01CD7528 B.LS 0x1CD7570
	0x01CD752C ADD X8, X8, X22, 0x3, LSL
	0x01CD7530 LDR X1, [X8 + 0x20]
	0x01CD7534 CBZ X1, 0x1CD7544
	0x01CD7538 MOV X0, X19
	0x01CD753C MOV X2, X31
	0x01CD7540 BL 0x3A9EAE8
	0x01CD7544 MOV X0, X19
	0x01CD7548 MOV W1, W20
	0x01CD754C BL 0x1CD75F4
	0x01CD7550 MOV X1, X0
	0x01CD7554 MOV X0, X19
	0x01CD7558 LDP X20, X19, [X31 + 0x20]
	0x01CD755C LDP X22, X21, [X31 + 0x10]
	0x01CD7560 MOV X2, X31
	0x01CD7564 LDR X30, [X31], #0x30
	0x01CD7568 B 0x3A9E9B0
	0x01CD756C BL 0x1B6EA1C
	0x01CD7570 BL 0x1B6EA24
	0x01CD7574 SUB X31, X31, 0x20
	0x01CD7578 STP X30, X19, [X31 + 0x10]
	0x01CD757C MOV X8, X1
	0x01CD7580 MOV X19, X0
	0x01CD7584 ADD X1, X31, 0x8
	0x01CD7588 MOV X0, X8
	0x01CD758C MOV X2, X31
	0x01CD7590 STR X31, [X31 + 0x8]
	0x01CD7594 BL 0x1CF25DC
	0x01CD7598 TBZ X0, 0x0, 0x1CD75A8
	0x01CD759C MOVZ W1, 0x1
	0x01CD75A0 MOV X0, X19
	0x01CD75A4 BL 0x1CD74B8
	0x01CD75A8 LDP X30, X19, [X31 + 0x10]
	0x01CD75AC ADD X31, X31, 0x20
	0x01CD75B0 RET
	0x01CD75B4 SUB X31, X31, 0x20
	0x01CD75B8 STP X30, X19, [X31 + 0x10]
	0x01CD75BC MOV X8, X1
	0x01CD75C0 MOV X19, X0
	0x01CD75C4 ADD X1, X31, 0x8
	0x01CD75C8 MOV X0, X8
	0x01CD75CC MOV X2, X31
	0x01CD75D0 STR X31, [X31 + 0x8]
	0x01CD75D4 BL 0x1CF25DC
	0x01CD75D8 TBZ X0, 0x0, 0x1CD75E8
	0x01CD75DC MOVZ W1, 0x2
	0x01CD75E0 MOV X0, X19
	0x01CD75E4 BL 0x1CD74B8
	0x01CD75E8 LDP X30, X19, [X31 + 0x10]
	0x01CD75EC ADD X31, X31, 0x20
	0x01CD75F0 RET
	0x01CD75F4 STR X30, [X31 - 0x30]!
	0x01CD75F8 STP X22, X21, [X31 + 0x10]
	0x01CD75FC STP X20, X19, [X31 + 0x20]
	0x01CD7600 ADRP X21, 0x254C000
	0x01CD7604 ADRP X22, 0x2278000
	0x01CD7608 LDRB W8, [X21 + 0x607]
	0x01CD760C LDR X22, [X22 + 0xCE8]
	0x01CD7610 MOV W19, W1
	0x01CD7614 MOV X20, X0
	0x01CD7618 TBNZ X8, 0x0, 0x1CD7630
	0x01CD761C ADRP X0, 0x2278000
	0x01CD7620 LDR X0, [X0 + 0xCE8]
	0x01CD7624 BL 0x1B6E7F0

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x254D000
	010 Move W8, [X21+1542]
	011 Move W19, W1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x2279000
	018 Move X0, [X0+3112]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X21+1542], W8
	022 Move X8, [X20+48]
	023 Compare X8, 0
	024 JumpIfEqual {78}
	025 Move X24, 0x2279000
	026 Move X24, [X24+3112]
	027 Move X22, X31
	028 Move X23, X31
	029 Move S8, 0.5
	030 Move W9, [X8+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Add X8, X8, X23
	034 Move X0, [X8+32]
	035 Compare X0, 0
	036 JumpIfEqual {78}
	037 Move X1, X31
	038 Call Renderer.get_material, X0
	039 Move X8, [X24]
	040 Move X21, X0
	041 Move W9, [X8+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {47}
	044 Move X0, X8
	045 Call 0x1B6F8F8
	046 Move X8, [X24]
	047 Move X9, [X20+32]
	048 Compare X9, 0
	049 JumpIfEqual {78}
	050 Move W10, [X9+24]
	051 Add X23, X23, 1
	052 Subtract W11, W23, 1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X9, X9, X22
	055 Move S0, [X9+32]
	056 Move S1, [X9+36]
	057 Move S2, [X9+40]
	058 Move S3, [X9+44]
	059 Move TEMP, X19
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {67}
	063 Multiply S0, S0, S8
	064 Multiply S1, S1, S8
	065 Multiply S2, S2, S8
	066 Multiply S3, S3, S8
	067 Compare X21, 0
	068 JumpIfEqual {78}
	069 Move X8, [X8+184]
	070 Move X0, X21
	071 Move X2, X31
	072 Add X22, X22, 16
	073 Move W1, [X8+4]
	074 Call Material.SetColor, X0, X1, X2
	075 Move X8, [X20+48]
	076 Compare X8, 0
	077 JumpIfNotEqual {30}
	078 Call 0x1B6FA1C
	079 Move X20, [X31+48]
	080 Move X19, [X31+56]
	081 Move X22, [X31+32]
	082 Move X21, [X31+40]
	083 Move X24, [X31+16]
	084 Move X23, [X31+24]
	085 Move X30, [X31+8]
	086 Move V8, [X31+64]
	087 Return 
	088 Call 0x1B6FA24

Method: System.Void PlayerBulbEffect(System.Int32 bulbIndex)

Disassembly:
	0x01CD84B8 CMP W23, W8
	0x01CD84BC B.LT 0x1CD847C
	0x01CD84C0 LDR X0, [X20 + 0x38]
	0x01CD84C4 CBZ X0, 0x1CD85F8
	0x01CD84C8 MOV X1, X31
	0x01CD84CC BL 0x3A7BCC8
	0x01CD84D0 ADRP X22, 0x2277000
	0x01CD84D4 LDR X22, [X22 + 0xC28]
	0x01CD84D8 MOV X21, X0
	0x01CD84DC LDR X8, [X22]
	0x01CD84E0 LDR W9, [X8 + 0xE0]
	0x01CD84E4 CBNZ W9, 0x1CD84F0
	0x01CD84E8 MOV X0, X8
	0x01CD84EC BL 0x1B6E8F8
	0x01CD84F0 CBZ X21, 0x1CD85F8
	0x01CD84F4 LDR X8, [X22]
	0x01CD84F8 FMOV S0, W31
	0x01CD84FC MOV X0, X21
	0x01CD8500 MOV X2, X31
	0x01CD8504 LDR X8, [X8 + 0xB8]
	0x01CD8508 LDR W1, [X8]
	0x01CD850C BL 0x3A7E584
	0x01CD8510 LDR X21, [X20 + 0x40]
	0x01CD8514 CBZ X21, 0x1CD85F8
	0x01CD8518 LDR W8, [X21 + 0x18]
	0x01CD851C CMP W8, 0x1
	0x01CD8520 B.LT 0x1CD858C
	0x01CD8524 MOV W23, W31
	0x01CD8528 CMP W23, W8
	0x01CD852C B.CS 0x1CD85FC
	0x01CD8530 ADD X8, X21, W23, 0x3, SXTW
	0x01CD8534 LDR X0, [X8 + 0x20]
	0x01CD8538 CBZ X0, 0x1CD85F8
	0x01CD853C MOV X1, X31
	0x01CD8540 BL 0x3A7BCC8
	0x01CD8544 LDR X8, [X22]
	0x01CD8548 MOV X20, X0
	0x01CD854C LDR W9, [X8 + 0xE0]
	0x01CD8550 CBNZ W9, 0x1CD855C
	0x01CD8554 MOV X0, X8
	0x01CD8558 BL 0x1B6E8F8
	0x01CD855C CBZ X20, 0x1CD85F8
	0x01CD8560 LDR X8, [X22]
	0x01CD8564 FMOV S0, W31
	0x01CD8568 MOV X0, X20
	0x01CD856C MOV X2, X31
	0x01CD8570 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X0+40]
	007 Compare X8, 0
	008 JumpIfEqual {54}
	009 Move W9, [X8+24]
	010 Move W20, W1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X22, W20
	013 Add X8, X8, X22
	014 Move X19, X0
	015 Move X0, [X8+32]
	016 Compare X0, 0
	017 JumpIfEqual {54}
	018 Move X21, [X19+80]
	019 Move X1, X31
	020 Call Component.get_transform, X0
	021 Compare X0, 0
	022 JumpIfEqual {54}
	023 Move X1, X31
	024 Call Transform.get_position, X0
	025 Move S3, 1
	026 Move X0, X21
	027 Move X1, X31
	028 Call SFXManager.PlaySFX, X0, X1, V0
	029 Move X8, [X19+128]
	030 Compare X8, 0
	031 JumpIfEqual {54}
	032 Move W9, [X8+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Add X8, X8, X22
	035 Move X1, [X8+32]
	036 Compare X1, 0
	037 JumpIfEqual {41}
	038 Move X0, X19
	039 Move X2, X31
	040 Call MonoBehaviour.StopCoroutine, X0, X1
	041 Move X0, X19
	042 Move W1, W20
	043 Call ItemSellingMachineView.PlayBulbEffectCoroutine, X0, X1
	044 Move X1, X0
	045 Move X0, X19
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Call MonoBehaviour.StartCoroutine, X0, X1
	053 Return 
	054 Call 0x1B6FA1C
	055 Call 0x1B6FA24

Method: System.Collections.IEnumerator PlayBulbEffectCoroutine(System.Int32 bulbIndex)

Disassembly:
	0x01CD85F4 RET
	0x01CD85F8 BL 0x1B6EA1C
	0x01CD85FC BL 0x1B6EA24
	0x01CD8600 LDR X0, [X0 + 0x18]
	0x01CD8604 RET
	0x01CD8608 STP X30, X19, [X31 - 0x10]!
	0x01CD860C ADRP X0, 0x2275000
	0x01CD8610 LDR X0, [X0 + 0x990]
	0x01CD8614 BL 0x1B6E804
	0x01CD8618 BL 0x1B6EA0C
	0x01CD861C MOV X1, X31
	0x01CD8620 MOV X19, X0
	0x01CD8624 BL 0x31E99B4
	0x01CD8628 ADRP X0, 0x2277000
	0x01CD862C LDR X0, [X0 + 0xD38]
	0x01CD8630 BL 0x1B6E804
	0x01CD8634 MOV X1, X0
	0x01CD8638 MOV X0, X19
	0x01CD863C BL 0x1B6E8E8
	0x01CD8640 LDR X0, [X0 + 0x18]
	0x01CD8644 RET
	0x01CD8648 RET
	0x01CD864C SUB X31, X31, 0x50
	0x01CD8650 STR D8, [X31 + 0x10]
	0x01CD8654 STR X30, [X31 + 0x18]
	0x01CD8658 STP X24, X23, [X31 + 0x20]
	0x01CD865C STP X22, X21, [X31 + 0x30]
	0x01CD8660 STP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x254C000
	007 Move X22, 0x2278000
	008 Move W8, [X21+1543]
	009 Move X22, [X22+3304]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2278000
	017 Move X0, [X0+3304]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X21+1543], W8
	021 Move X0, [X22]
	022 Call 0x1B6FA0C
	023 Move X1, X31
	024 Move X21, X0
	025 Call Object..ctor, X0
	026 Move [X21+16], W31
	027 Move [X21+32], X20
	028 Move [X21+40], W19
	029 Move X0, X21
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return X0

Method: System.Void PlayItemSellAnimation(System.Single closeDuration = 0.3, System.Single lightDuration = 2, System.Single openDuration = 0.3, System.Single randomWaitTime = 1.5)

Disassembly:
	0x01CD6E4C ADRP X9, 0x2279000
	0x01CD6E50 LDR X9, [X9 + 0xC18]
	0x01CD6E54 LDR V0, [X20 + 0x24]
	0x01CD6E58 STRB W21, [X19 + 0x58]
	0x01CD6E5C LDR X8, [X19]
	0x01CD6E60 LDR X1, [X9]
	0x01CD6E64 LDRB W10, [X8 + 0x130]
	0x01CD6E68 LDRB W9, [X1 + 0x130]
	0x01CD6E6C CMP W10, W9
	0x01CD6E70 B.CC 0x1CD6E98
	0x01CD6E74 LDR X8, [X8 + 0xC8]
	0x01CD6E78 ADD X8, X8, X9, 0x3, LSL
	0x01CD6E7C LDUR X8, [X8 - 0x8]
	0x01CD6E80 CMP X8, X1
	0x01CD6E84 B.NE 0x1CD6E98
	0x01CD6E88 MOV X0, X19
	0x01CD6E8C LDP X20, X19, [X31 + 0x10]
	0x01CD6E90 LDP X30, X21, [X31], #0x20
	0x01CD6E94 B 0x1CD5B8C
	0x01CD6E98 MOV X0, X19
	0x01CD6E9C BL 0x1B6ECDC
	0x01CD6EA0 BL 0x1B6EA1C
	0x01CD6EA4 STR X30, [X31 - 0x20]!
	0x01CD6EA8 STP X20, X19, [X31 + 0x10]
	0x01CD6EAC ADRP X20, 0x254D000
	0x01CD6EB0 LDRB W8, [X20 + 0x600]
	0x01CD6EB4 MOV X19, X0

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move X1, [X0+144]
	008 Move V8, V3
	009 Move V9, V2
	010 Move V10, V1
	011 Move X19, X0
	012 Move V11, V0
	013 Compare X1, 0
	014 JumpIfEqual {18}
	015 Move X0, X19
	016 Move X2, X31
	017 Call MonoBehaviour.StopCoroutine, X0, X1
	018 Move X0, X19
	019 Move V0, V11
	020 Move V1, V10
	021 Move V2, V9
	022 Move V3, V8
	023 Call ItemSellingMachineView.PlayItemSellAnimationCoroutine, X0, V0, V1, V2, V3
	024 Move X1, X0
	025 Move [X19+144], X0
	026 Move X0, X19
	027 Move X30, [X31+32]
	028 Move X19, [X31+40]
	029 Move D9, [X31+16]
	030 Move D8, [X31+24]
	031 Move X2, X31
	032 Move D11, [X31+48]
	033 Move D10, [X31+56]
	034 Call MonoBehaviour.StartCoroutine, X0, X1
	035 Return 

Method: System.Collections.IEnumerator PlayItemSellAnimationCoroutine(System.Single closeDuration, System.Single lightDuration, System.Single openDuration, System.Single randomWaitTime)

Disassembly:
	0x01CD868C ADRP X0, 0x2275000
	0x01CD8690 LDR X0, [X0 + 0x818]
	0x01CD8694 BL 0x1B6E7F0
	0x01CD8698 MOVZ W8, 0x1
	0x01CD869C STRB W8, [X20 + 0x610]
	0x01CD86A0 LDR W8, [X19 + 0x10]
	0x01CD86A4 CMP W8, 0x5
	0x01CD86A8 B.HI 0x1CD88F4
	0x01CD86AC LDR X22, [X19 + 0x20]
	0x01CD86B0 ADRP X9, 0xFFFFFFFFFEE14000
	0x01CD86B4 ADD X9, X9, 0x926
	0x01CD86B8 ADR X10, 0x10
	0x01CD86BC LDRB W11, [X9, X8, LSL]
	0x01CD86C0 ADD X10, X10, X11, 0x2, LSL
	0x01CD86C4 BR X10
	0x01CD86C8 MOVN W8, 0x0
	0x01CD86CC STR W8, [X19 + 0x10]
	0x01CD86D0 CBZ X22, 0x1CD8A2C
	0x01CD86D4 LDR X20, [X22 + 0x78]
	0x01CD86D8 CBZ X20, 0x1CD8A2C
	0x01CD86DC LDR W8, [X20 + 0x18]
	0x01CD86E0 CMP W8, 0x1
	0x01CD86E4 B.LT 0x1CD871C
	0x01CD86E8 MOV W21, W31
	0x01CD86EC CMP W21, W8
	0x01CD86F0 B.CS 0x1CD8A30
	0x01CD86F4 ADD X8, X20, W21, 0x3, SXTW
	0x01CD86F8 LDR X0, [X8 + 0x20]
	0x01CD86FC CBZ X0, 0x1CD8A2C
	0x01CD8700 MOVZ W1, 0x1
	0x01CD8704 MOV X2, X31
	0x01CD8708 BL 0x3A9A604
	0x01CD870C LDR W8, [X20 + 0x18]
	0x01CD8710 ADD W21, W21, 0x1

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x254C000
	010 Move X21, 0x2278000
	011 Move W8, [X20+1544]
	012 Move X21, [X21+3312]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x2278000
	023 Move X0, [X0+3312]
	024 Call 0x1B6F7F0
	025 Move W8, 1
	026 Move [X20+1544], W8
	027 Move X0, [X21]
	028 Call 0x1B6FA0C
	029 Move X1, X31
	030 Move X20, X0
	031 Call Object..ctor, X0
	032 Move [X20+16], W31
	033 Move [X20+32], X19
	034 Move [X20+40], S11
	035 Move [X20+48], S10
	036 Move [X20+48], S8
	037 Move [X20+56], S9
	038 Move X0, X20
	039 Move X20, [X31+48]
	040 Move X19, [X31+56]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Move D9, [X31+16]
	044 Move D8, [X31+24]
	045 Move D11, [X31+64]
	046 Move D10, [X31+72]
	047 Return X0

Method: System.Void PlayValueTextAnimation(System.Int32 value)

Disassembly:
	0x01CD7914 BL 0x1B6EA0C
	0x01CD7918 ADRP X8, 0xFFFFFFFFFEDD2000
	0x01CD791C LDR V0, [X8 + 0xCE8]
	0x01CD7920 MOV X1, X31
	0x01CD7924 MOV X20, X0
	0x01CD7928 BL 0x3AA273C
	0x01CD792C STR X20, [X19 + 0xA0]
	0x01CD7930 LDR X0, [X21]
	0x01CD7934 BL 0x1B6EA0C
	0x01CD7938 FMOV S0, 1
	0x01CD793C MOV X1, X31
	0x01CD7940 MOV X20, X0
	0x01CD7944 BL 0x3AA273C
	0x01CD7948 STR X20, [X19 + 0xA8]
	0x01CD794C LDR X0, [X21]
	0x01CD7950 BL 0x1B6EA0C
	0x01CD7954 FMOV S0, 5
	0x01CD7958 MOV X1, X31
	0x01CD795C MOV X20, X0
	0x01CD7960 BL 0x3AA273C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+152]
	005 Move X19, X0
	006 Move W20, W1
	007 Compare X8, 0
	008 JumpIfEqual {13}
	009 Move X0, X19
	010 Move X1, X8
	011 Move X2, X31
	012 Call MonoBehaviour.StopCoroutine, X0, X1
	013 Move X0, X19
	014 Move W1, W20
	015 Call ItemSellingMachineView.ShowValueTextCoroutine, X0, X1
	016 Move X1, X0
	017 Move [X19+152], X0
	018 Move X0, X19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X2, X31
	022 Move X30, [X31+32]
	023 Call MonoBehaviour.StartCoroutine, X0, X1
	024 Return 

Method: System.Void StopValueTextAnimation()

Disassembly:
	0x01CD6DD0 MOV X0, X19
	0x01CD6DD4 BL 0x1CD4A04
	0x01CD6DD8 STR W0, [X19 + 0xA0]
	0x01CD6DDC MOV X0, X19
	0x01CD6DE0 BL 0x1CD4AC4
	0x01CD6DE4 STR W0, [X19 + 0xA4]
	0x01CD6DE8 MOV X0, X19
	0x01CD6DEC BL 0x1CD4B84
	0x01CD6DF0 STR S0, [X19 + 0xA8]
	0x01CD6DF4 LDP X20, X19, [X31 + 0x80]
	0x01CD6DF8 LDP X22, X21, [X31 + 0x70]
	0x01CD6DFC LDR X30, [X31 + 0x60]
	0x01CD6E00 ADD X31, X31, 0x90
	0x01CD6E04 RET
	0x01CD6E08 STP X30, X21, [X31 - 0x20]!
	0x01CD6E0C STP X20, X19, [X31 + 0x10]
	0x01CD6E10 ADRP X21, 0x254D000
	0x01CD6E14 LDRB W8, [X21 + 0x5FF]
	0x01CD6E18 MOV X20, X1
	0x01CD6E1C MOV X19, X0
	0x01CD6E20 TBNZ X8, 0x0, 0x1CD6E38
	0x01CD6E24 ADRP X0, 0x2279000
	0x01CD6E28 LDR X0, [X0 + 0xC18]
	0x01CD6E2C BL 0x1B6E7F0
	0x01CD6E30 MOVZ W8, 0x1
	0x01CD6E34 STRB W8, [X21 + 0x5FF]
	0x01CD6E38 MOVZ W0, 0x1
	0x01CD6E3C MOV X1, X31
	0x01CD6E40 MOVZ W21, 0x1
	0x01CD6E44 BL 0x1D29EBC
	0x01CD6E48 CBZ X19, 0x1CD6EA0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, [X0+152]
	005 Compare X1, 0
	006 JumpIfEqual {28}
	007 Move X2, X31
	008 Move X19, X0
	009 Call MonoBehaviour.StopCoroutine, X0, X1
	010 Move X20, [X19+120]
	011 Move [X19+152], X31
	012 Compare X20, 0
	013 JumpIfEqual {33}
	014 Move W8, [X20+24]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move W19, W31
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Add X8, X20, W19
	019 Move X0, [X8+32]
	020 Compare X0, 0
	021 JumpIfEqual {33}
	022 Move W1, W31
	023 Move X2, X31
	024 Call Behaviour.set_enabled, X0, X1
	025 Move W8, [X20+24]
	026 Add W19, W19, 1
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return 
	032 Call 0x1B6FA24
	033 Call 0x1B6FA1C

Method: System.Collections.IEnumerator ShowValueTextCoroutine(System.Int32 value)

Disassembly:
	0x01CD873C STR X31, [X19 + 0x18]
	0x01CD8740 STR W8, [X19 + 0x10]
	0x01CD8744 B 0x1CD8A0C
	0x01CD8748 LDR V8, [X19 + 0x38]
	0x01CD874C FMOV S0, 1
	0x01CD8750 MOVN W8, 0x0
	0x01CD8754 STR W8, [X19 + 0x10]
	0x01CD8758 FCMP S8, S0
	0x01CD875C B.PL 0x1CD89EC
	0x01CD8760 MOV X0, X31
	0x01CD8764 BL 0x3AA481C
	0x01CD8768 FMOV S1, 0.5
	0x01CD876C FMUL S0, S0, S1
	0x01CD8770 FADD S0, S8, S0
	0x01CD8774 FMOV S8, 1
	0x01CD8778 FCMP S0, S8
	0x01CD877C STR S0, [X19 + 0x38]
	0x01CD8780 B.LE 0x1CD88FC
	0x01CD8784 LDR W8, [X19 + 0x28]
	0x01CD8788 B 0x1CD894C
	0x01CD878C MOVN W8, 0x0
	0x01CD8790 STR W8, [X19 + 0x10]
	0x01CD8794 CBZ X22, 0x1CD8A2C
	0x01CD8798 LDR X20, [X22 + 0x78]
	0x01CD879C CBZ X20, 0x1CD8A2C
	0x01CD87A0 LDR W8, [X20 + 0x18]
	0x01CD87A4 CMP W8, 0x1
	0x01CD87A8 B.LT 0x1CD87E0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x254C000
	007 Move X22, 0x2278000
	008 Move W8, [X21+1545]
	009 Move X22, [X22+3320]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2278000
	017 Move X0, [X0+3320]
	018 Call 0x1B6F7F0
	019 Move W8, 1
	020 Move [X21+1545], W8
	021 Move X0, [X22]
	022 Call 0x1B6FA0C
	023 Move X1, X31
	024 Move X21, X0
	025 Call Object..ctor, X0
	026 Move [X21+16], W31
	027 Move [X21+32], X20
	028 Move [X21+40], W19
	029 Move X0, X21
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return X0

Method: System.Int32 GetRandomValue(System.Int32 min, System.Int32 max, System.Int32 prev)

Disassembly:
	0x01CD87D4 ADD W21, W21, 0x1
	0x01CD87D8 CMP W21, W8
	0x01CD87DC B.LT 0x1CD87B0
	0x01CD87E0 LDR X8, [X22 + 0xA0]
	0x01CD87E4 MOVZ W9, 0x4
	0x01CD87E8 B 0x1CD8A04
	0x01CD87EC MOVN W8, 0x0
	0x01CD87F0 STR W8, [X19 + 0x10]
	0x01CD87F4 CBZ X22, 0x1CD8A2C
	0x01CD87F8 LDR W3, [X19 + 0x40]
	0x01CD87FC MOVZ W1, 0x1
	0x01CD8800 MOVZ W2, 0x5
	0x01CD8804 BL 0x1CD77D4
	0x01CD8808 LDR X1, [X19 + 0x30]
	0x01CD880C MOV W2, W0
	0x01CD8810 STR W0, [X19 + 0x40]
	0x01CD8814 BL 0x1CD7818

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W19, W3
	006 Move W20, W2
	007 Move W21, W1
	008 Move W0, W1
	009 Move W1, W2
	010 Move X2, X31
	011 Call Random.Range, X0, X1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W0, W21
	014 Move W1, W20
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Move X21, [X31+40]
	019 Return X0

Method: System.String GetRepeatString(System.String str, System.Int32 repeat)

Disassembly:
	0x01CD8818 LDR X23, [X22 + 0x78]
	0x01CD881C CBZ X23, 0x1CD8A2C
	0x01CD8820 LDR W8, [X23 + 0x18]
	0x01CD8824 CMP W8, 0x1
	0x01CD8828 B.LT 0x1CD8880
	0x01CD882C MOV X20, X0
	0x01CD8830 MOV W24, W31
	0x01CD8834 CMP W24, W8
	0x01CD8838 B.CS 0x1CD8A30
	0x01CD883C ADD X8, X23, W24, 0x3, SXTW
	0x01CD8840 LDR X21, [X8 + 0x20]
	0x01CD8844 CBZ X21, 0x1CD8A2C
	0x01CD8848 MOVZ W1, 0x1
	0x01CD884C MOV X0, X21
	0x01CD8850 MOV X2, X31
	0x01CD8854 BL 0x3A9A604
	0x01CD8858 LDR X8, [X21]
	0x01CD885C MOV X0, X21
	0x01CD8860 MOV X1, X20
	0x01CD8864 LDR X9, [X8 + 0x558]
	0x01CD8868 LDR X2, [X8 + 0x560]
	0x01CD886C BLR X9
	0x01CD8870 LDR W8, [X23 + 0x18]
	0x01CD8874 ADD W24, W24, 0x1
	0x01CD8878 CMP W24, W8
	0x01CD887C B.LT 0x1CD8834
	0x01CD8880 LDR W8, [X19 + 0x3C]
	0x01CD8884 ADD W8, W8, 0x1
	0x01CD8888 CMP W8, 0x5
	0x01CD888C STR W8, [X19 + 0x3C]
	0x01CD8890 B.LT 0x1CD89FC
	0x01CD8894 LDR X8, [X22 + 0xB0]
	0x01CD8898 MOVZ W9, 0x5
	0x01CD889C B 0x1CD8A04
	0x01CD88A0 MOVN W8, 0x0
	0x01CD88A4 STR W8, [X19 + 0x10]
	0x01CD88A8 CBZ X22, 0x1CD8A2C
	0x01CD88AC LDR X19, [X22 + 0x78]
	0x01CD88B0 CBZ X19, 0x1CD8A2C
	0x01CD88B4 LDR W8, [X19 + 0x18]
	0x01CD88B8 CMP W8, 0x1
	0x01CD88BC B.LT 0x1CD88F4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x254C000
	007 Move X22, 0x2276000
	008 Move W8, [X21+1546]
	009 Move X22, [X22+2072]
	010 Move W19, W2
	011 Move X20, X1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x2276000
	017 Move X0, [X0+3024]
	018 Call 0x1B6F7F0
	019 Move X0, 0x2276000
	020 Move X0, [X0+2072]
	021 Call 0x1B6F7F0
	022 Move W8, 1
	023 Move [X21+1546], W8
	024 Move X21, [X22]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X22, 0x2276000
	027 Move X22, [X22+3024]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X1, X20
	030 Move X1, [X22]
	031 Move X0, X20
	032 Move X2, X31
	033 Call String.Concat, X0, X1
	034 Move X1, X0
	035 Move X0, X21
	036 Move X2, X31
	037 Call String.Concat, X0, X1
	038 Subtract W19, W19, 1
	039 Move X21, X0
	040 Move X0, X21
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return X0

Method: System.Void .ctor()

Disassembly:
	0x01CD88C0 MOV W20, W31
	0x01CD88C4 CMP W20, W8
	0x01CD88C8 B.CS 0x1CD8A30
	0x01CD88CC ADD X8, X19, W20, 0x3, SXTW
	0x01CD88D0 LDR X0, [X8 + 0x20]
	0x01CD88D4 CBZ X0, 0x1CD8A2C
	0x01CD88D8 MOV W1, W31
	0x01CD88DC MOV X2, X31
	0x01CD88E0 BL 0x3A9A604
	0x01CD88E4 LDR W8, [X19 + 0x18]
	0x01CD88E8 ADD W20, W20, 0x1
	0x01CD88EC CMP W20, W8
	0x01CD88F0 B.LT 0x1CD88C4
	0x01CD88F4 MOV W0, W31
	0x01CD88F8 B 0x1CD8A10
	0x01CD88FC FSUB S0, S8, S0
	0x01CD8900 FMOV S1, 6
	0x01CD8904 BL 0x3D198E0
	0x01CD8908 LDR W8, [X19 + 0x28]
	0x01CD890C FSUB S0, S8, S0
	0x01CD8910 FMOV S1, W31
	0x01CD8914 FMIN S2, S0, S8
	0x01CD8918 FCMP S0, 0x0
	0x01CD891C FCSEL S0, S2, S1, PL
	0x01CD8920 SCVTF S2, W8
	0x01CD8924 MOVZ W9, 0x7F800000
	0x01CD8928 FMUL S0, S0, S2
	0x01CD892C FMOV S2, W9
	0x01CD8930 FADD S0, S0, S1
	0x01CD8934 FCVTZS W9, S0
	0x01CD8938 FCMP S0, S2
	0x01CD893C MOVZ W10, 0x80000000
	0x01CD8940 CSEL W9, W10, W9, EQ
	0x01CD8944 CMP W9, W8
	0x01CD8948 CSEL W8, W8, W9, GT
	0x01CD894C ADRP X9, 0x2277000
	0x01CD8950 LDR X9, [X9 + 0x330]
	0x01CD8954 ADD X0, X31, 0xC
	0x01CD8958 MOV X2, X31
	0x01CD895C STR W8, [X31 + 0xC]
	0x01CD8960 LDR X1, [X9]
	0x01CD8964 BL 0x31E4DA8
	0x01CD8968 ADRP X8, 0x2277000
	0x01CD896C LDR X8, [X8 + 0x518]
	0x01CD8970 MOV X1, X0
	0x01CD8974 MOV X2, X31
	0x01CD8978 LDR X8, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x254C000
	006 Move X21, 0x2277000
	007 Move W8, [X20+1547]
	008 Move X21, [X21+744]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2277000
	015 Move X0, [X0+744]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X20+1547], W8
	019 Move X0, [X21]
	020 Call 0x1B6FA0C
	021 Move S0, 1.5
	022 Move X1, X31
	023 Move X20, X0
	024 Call WaitForSeconds..ctor, X0, V0
	025 Move [X19+136], X20
	026 Move X0, [X21]
	027 Call 0x1B6FA0C
	028 Move X8, -19062784
	029 Move V0, [X8+3304]
	030 Move X1, X31
	031 Move X20, X0
	032 Call WaitForSeconds..ctor, X0, V0
	033 Move [X19+160], X20
	034 Move X0, [X21]
	035 Call 0x1B6FA0C
	036 Move S0, 1
	037 Move X1, X31
	038 Move X20, X0
	039 Call WaitForSeconds..ctor, X0, V0
	040 Move [X19+168], X20
	041 Move X0, [X21]
	042 Call 0x1B6FA0C
	043 Move S0, 5
	044 Move X1, X31
	045 Move X20, X0
	046 Call WaitForSeconds..ctor, X0, V0
	047 Move [X19+176], X20
	048 Move X0, X19
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X1, X31
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]
	054 Call MonoBehaviour..ctor, X0
	055 Return 

Method: System.Void .cctor()

Disassembly:
	0x01CD897C MOV X0, X8
	0x01CD8980 BL 0x3084780
	0x01CD8984 STR X0, [X19 + 0x30]
	0x01CD8988 CBZ X22, 0x1CD8A2C
	0x01CD898C LDR X20, [X22 + 0x78]
	0x01CD8990 CBZ X20, 0x1CD8A2C
	0x01CD8994 LDR W8, [X20 + 0x18]
	0x01CD8998 CMP W8, 0x1
	0x01CD899C B.LT 0x1CD89DC
	0x01CD89A0 MOV W21, W31
	0x01CD89A4 CMP W21, W8
	0x01CD89A8 B.CS 0x1CD8A30
	0x01CD89AC ADD X8, X20, W21, 0x3, SXTW
	0x01CD89B0 LDR X0, [X8 + 0x20]
	0x01CD89B4 CBZ X0, 0x1CD8A2C
	0x01CD89B8 LDR X8, [X0]
	0x01CD89BC LDR X1, [X19 + 0x30]
	0x01CD89C0 LDR X9, [X8 + 0x558]
	0x01CD89C4 LDR X2, [X8 + 0x560]
	0x01CD89C8 BLR X9
	0x01CD89CC LDR W8, [X20 + 0x18]
	0x01CD89D0 ADD W21, W21, 0x1
	0x01CD89D4 CMP W21, W8
	0x01CD89D8 B.LT 0x1CD89A4
	0x01CD89DC MOVZ W0, 0x1
	0x01CD89E0 STR X31, [X19 + 0x18]
	0x01CD89E4 STR W0, [X19 + 0x10]
	0x01CD89E8 B 0x1CD8A10
	0x01CD89EC ADRP X8, 0xFFFFFFFFFEDD4000
	0x01CD89F0 LDR V0, [X8 + 0xF10]
	0x01CD89F4 STUR D0, [X19 + 0x3C]
	0x01CD89F8 CBZ X22, 0x1CD8A2C
	0x01CD89FC LDR X8, [X22 + 0xA8]
	0x01CD8A00 MOVZ W9, 0x3
	0x01CD8A04 STR W9, [X19 + 0x10]
	0x01CD8A08 STR X8, [X19 + 0x18]
	0x01CD8A0C MOVZ W0, 0x1
	0x01CD8A10 LDP X20, X19, [X31 + 0x40]
	0x01CD8A14 LDP X22, X21, [X31 + 0x30]
	0x01CD8A18 LDP X24, X23, [X31 + 0x20]
	0x01CD8A1C LDR X30, [X31 + 0x18]
	0x01CD8A20 LDR V8, [X31 + 0x10]
	0x01CD8A24 ADD X31, X31, 0x50
	0x01CD8A28 RET
	0x01CD8A2C BL 0x1B6EA1C
	0x01CD8A30 BL 0x1B6EA24
	0x01CD8A34 LDR X0, [X0 + 0x18]
	0x01CD8A38 RET
	0x01CD8A3C STP X30, X19, [X31 - 0x10]!
	0x01CD8A40 ADRP X0, 0x2275000
	0x01CD8A44 LDR X0, [X0 + 0x990]
	0x01CD8A48 BL 0x1B6E804
	0x01CD8A4C BL 0x1B6EA0C
	0x01CD8A50 MOV X1, X31
	0x01CD8A54 MOV X19, X0
	0x01CD8A58 BL 0x31E99B4
	0x01CD8A5C ADRP X0, 0x2277000
	0x01CD8A60 LDR X0, [X0 + 0xD40]
	0x01CD8A64 BL 0x1B6E804
	0x01CD8A68 MOV X1, X0
	0x01CD8A6C MOV X0, X19
	0x01CD8A70 BL 0x1B6E8E8
	0x01CD8A74 LDR X0, [X0 + 0x18]
	0x01CD8A78 RET
	0x01CD8A7C MOV X1, X31
	0x01CD8A80 B 0x3A9EEE4
	0x01CD8A84 MOV X1, X31
	0x01CD8A88 B 0x32276F8
	0x01CD8A8C STR X30, [X31 - 0x20]!
	0x01CD8A90 STP X20, X19, [X31 + 0x10]
	0x01CD8A94 ADRP X20, 0x254B000
	0x01CD8A98 ADRP X19, 0x2277000
	0x01CD8A9C LDRB W8, [X20 + 0x611]
	0x01CD8AA0 LDR X19, [X19 + 0xD48]
	0x01CD8AA4 TBNZ X8, 0x0, 0x1CD8ABC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x254C000
	010 Move X25, 0x2278000
	011 Move X20, 0x2278000
	012 Move X23, 0x2277000
	013 Move X22, 0x2277000
	014 Move X21, 0x2277000
	015 Move X19, 0x2278000
	016 Move X25, [X25+3328]
	017 Move W8, [X24+1548]
	018 Move X20, [X20+3112]
	019 Move X23, [X23+2216]
	020 Move X22, [X22+832]
	021 Move X21, [X21+4032]
	022 Move X19, [X19+3336]
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {47}
	027 Move X0, 0x2278000
	028 Move X0, [X0+3112]
	029 Call 0x1B6F7F0
	030 Move X0, 0x2277000
	031 Move X0, [X0+4032]
	032 Call 0x1B6F7F0
	033 Move X0, 0x2278000
	034 Move X0, [X0+3336]
	035 Call 0x1B6F7F0
	036 Move X0, 0x2277000
	037 Move X0, [X0+2216]
	038 Call 0x1B6F7F0
	039 Move X0, 0x2278000
	040 Move X0, [X0+3328]
	041 Call 0x1B6F7F0
	042 Move X0, 0x2277000
	043 Move X0, [X0+832]
	044 Call 0x1B6F7F0
	045 Move W8, 1
	046 Move [X24+1548], W8
	047 Move X0, [X25]
	048 Move X1, X31
	049 Call Shader.PropertyToID, X0
	050 Move X8, [X20]
	051 Move X1, X31
	052 Move X8, [X8+184]
	053 Move [X8], W0
	054 Move X0, [X23]
	055 Call Shader.PropertyToID, X0
	056 Move X8, [X20]
	057 Move X1, X31
	058 Move X8, [X8+184]
	059 Move [X8+4], W0
	060 Move X0, [X22]
	061 Call Shader.PropertyToID, X0
	062 Move X8, [X20]
	063 Move W1, 3
	064 Move X8, [X8+184]
	065 Move [X8+8], W0
	066 Move X0, [X21]
	067 Call 0x1B6F868
	068 Move X1, [X19]
	069 Move X2, X31
	070 Move X19, X0
	071 Call RuntimeHelpers.InitializeArray, X0, X1
	072 Move X8, [X20]
	073 Move X9, -19054592
	074 Move V0, [X9+108]
	075 Move X22, [X31+32]
	076 Move X21, [X31+40]
	077 Move X8, [X8+184]
	078 Move X24, [X31+16]
	079 Move X23, [X31+24]
	080 Move [X8+16], X19
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move [X8+24], V0
	084 Move X30, [X31+64]
	085 Move X25, [X31+72]
	086 Return 

