Type: AnimalCompany.ItemSellingMachineView

Method: System.Boolean get_isSellingInProgress()

Disassembly:
	0x01DDCA14 BL 0x3C3C714
	0x01DDCA18 FSUB S0, S8, S0
	0x01DDCA1C STR S0, [X19 + 0x3C]
	0x01DDCA20 CBZ X20, 0x1DDCF28

ISIL:
	001 Move X8, [X0+152]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void Awake()

Disassembly:
	0x01DDCA24 LDR X8, [X20 + 0x70]
	0x01DDCA28 CBZ X8, 0x1DDCF28
	0x01DDCA2C LDR V1, [X19 + 0x28]
	0x01DDCA30 ADRP X22, 0x231C000
	0x01DDCA34 LDR X22, [X22 + 0xA48]
	0x01DDCA38 FMOV S9, 1
	0x01DDCA3C FDIV S0, S0, S1
	0x01DDCA40 MOVN W21, 0x0
	0x01DDCA44 FSUB S8, S9, S0
	0x01DDCA48 FMOV S10, W31
	0x01DDCA4C LDR W8, [X8 + 0x18]
	0x01DDCA50 ADD W23, W21, 0x1
	0x01DDCA54 CMP W23, W8
	0x01DDCA58 B.GE 0x1DDCF00
	0x01DDCA5C FSUB S0, S9, S8
	0x01DDCA60 FMOV S1, 3
	0x01DDCA64 BL 0x3EB1B50
	0x01DDCA68 LDR X0, [X22]
	0x01DDCA6C MOV V8.16B, V0.16B
	0x01DDCA70 LDR W8, [X0 + 0xE0]
	0x01DDCA74 CBNZ W8, 0x1DDCA80
	0x01DDCA78 BL 0x1C16DFC
	0x01DDCA7C LDR X0, [X22]
	0x01DDCA80 LDR X8, [X0 + 0xB8]
	0x01DDCA84 LDR X8, [X8 + 0x10]
	0x01DDCA88 CBZ X8, 0x1DDCF28
	0x01DDCA8C LDR W9, [X8 + 0x18]
	0x01DDCA90 CMP W23, W9
	0x01DDCA94 B.CS 0x1DDCF2C
	0x01DDCA98 LDR X9, [X20 + 0x70]
	0x01DDCA9C FSUB S8, S9, S8
	0x01DDCAA0 FMIN S0, S8, S9
	0x01DDCAA4 FCMP S8, 0x0
	0x01DDCAA8 FCSEL S0, S0, S10, PL
	0x01DDCAAC CBZ X9, 0x1DDCF28
	0x01DDCAB0 LDR W10, [X9 + 0x18]
	0x01DDCAB4 ADD W21, W21, 0x1
	0x01DDCAB8 CMP W21, W10
	0x01DDCABC B.CS 0x1DDCF2C
	0x01DDCAC0 SXTW X10, W23
	0x01DDCAC4 ADD X9, X9, X10, 0x3, LSL
	0x01DDCAC8 LDR X0, [X9 + 0x20]
	0x01DDCACC CBZ X0, 0x1DDCF28
	0x01DDCAD0 ADD X8, X8, X10, 0x2, LSL
	0x01DDCAD4 LDR V1, [X8 + 0x20]
	0x01DDCAD8 MOV X1, X31
	0x01DDCADC FSUB S2, S10, S1
	0x01DDCAE0 FMUL S0, S0, S2
	0x01DDCAE4 FADD S0, S1, S0
	0x01DDCAE8 FMOV S1, W31
	0x01DDCAEC FMOV S2, W31
	0x01DDCAF0 BL 0x3C3F888
	0x01DDCAF4 LDR X8, [X20 + 0x70]
	0x01DDCAF8 CBNZ X8, 0x1DDCA4C
	0x01DDCAFC B 0x1DDCF28
	0x01DDCB00 LDR V8, [X19 + 0x3C]
	0x01DDCB04 MOVN W8, 0x0
	0x01DDCB08 STR W8, [X19 + 0x10]
	0x01DDCB0C B 0x1DDCCEC
	0x01DDCB10 MOVN W8, 0x0
	0x01DDCB14 STR W8, [X19 + 0x10]
	0x01DDCB18 CBZ X20, 0x1DDCF28
	0x01DDCB1C LDR X21, [X20 + 0x60]
	0x01DDCB20 MOV X0, X20
	0x01DDCB24 MOV X1, X31
	0x01DDCB28 BL 0x3C32E90
	0x01DDCB2C CBZ X0, 0x1DDCF28
	0x01DDCB30 MOV X1, X31
	0x01DDCB34 BL 0x3C3F58C
	0x01DDCB38 FMOV S3, 1
	0x01DDCB3C MOV X0, X21
	0x01DDCB40 MOV X1, X31
	0x01DDCB44 BL 0x1DD1B94
	0x01DDCB48 LDR V8, [X19 + 0x34]
	0x01DDCB4C STR S8, [X19 + 0x3C]
	0x01DDCB50 B 0x1DDCB60
	0x01DDCB54 LDR V8, [X19 + 0x3C]
	0x01DDCB58 MOVN W8, 0x0
	0x01DDCB5C STR W8, [X19 + 0x10]
	0x01DDCB60 FCMP S8, 0x0
	0x01DDCB64 B.LE 0x1DDCC50
	0x01DDCB68 MOV X0, X31
	0x01DDCB6C BL 0x3C3C714
	0x01DDCB70 FSUB S0, S8, S0
	0x01DDCB74 STR S0, [X19 + 0x3C]
	0x01DDCB78 CBZ X20, 0x1DDCF28
	0x01DDCB7C LDR X8, [X20 + 0x70]
	0x01DDCB80 CBZ X8, 0x1DDCF28
	0x01DDCB84 LDR V1, [X19 + 0x34]
	0x01DDCB88 ADRP X22, 0x231C000
	0x01DDCB8C LDR X22, [X22 + 0xA48]
	0x01DDCB90 FMOV S9, 1
	0x01DDCB94 FDIV S0, S0, S1
	0x01DDCB98 MOV W21, W31
	0x01DDCB9C FSUB S8, S9, S0
	0x01DDCBA0 FMOV S10, W31
	0x01DDCBA4 LDR W8, [X8 + 0x18]
	0x01DDCBA8 CMP W21, W8
	0x01DDCBAC B.GE 0x1DDCEEC
	0x01DDCBB0 FSUB S0, S9, S8
	0x01DDCBB4 FMOV S1, 3
	0x01DDCBB8 BL 0x3EB1B50
	0x01DDCBBC LDR X0, [X22]
	0x01DDCBC0 MOV V8.16B, V0.16B
	0x01DDCBC4 LDR W8, [X0 + 0xE0]
	0x01DDCBC8 CBNZ W8, 0x1DDCBD4
	0x01DDCBCC BL 0x1C16DFC
	0x01DDCBD0 LDR X0, [X22]
	0x01DDCBD4 LDR X8, [X0 + 0xB8]
	0x01DDCBD8 LDR X8, [X8 + 0x10]
	0x01DDCBDC CBZ X8, 0x1DDCF28
	0x01DDCBE0 LDR W9, [X8 + 0x18]
	0x01DDCBE4 CMP W21, W9
	0x01DDCBE8 B.CS 0x1DDCF2C
	0x01DDCBEC LDR X9, [X20 + 0x70]
	0x01DDCBF0 FSUB S8, S9, S8
	0x01DDCBF4 FMIN S0, S8, S9
	0x01DDCBF8 FCMP S8, 0x0
	0x01DDCBFC FCSEL S0, S0, S10, PL
	0x01DDCC00 CBZ X9, 0x1DDCF28
	0x01DDCC04 LDR W10, [X9 + 0x18]
	0x01DDCC08 CMP W21, W10
	0x01DDCC0C B.CS 0x1DDCF2C
	0x01DDCC10 SXTW X10, W21
	0x01DDCC14 ADD X9, X9, X10, 0x3, LSL
	0x01DDCC18 LDR X0, [X9 + 0x20]
	0x01DDCC1C CBZ X0, 0x1DDCF28
	0x01DDCC20 ADD X8, X8, X10, 0x2, LSL
	0x01DDCC24 LDR V1, [X8 + 0x20]
	0x01DDCC28 FMOV S2, W31
	0x01DDCC2C MOV X1, X31
	0x01DDCC30 ADD W21, W21, 0x1
	0x01DDCC34 FMUL S0, S0, S1
	0x01DDCC38 FADD S0, S0, S10
	0x01DDCC3C FMOV S1, W31
	0x01DDCC40 BL 0x3C3F888
	0x01DDCC44 LDR X8, [X20 + 0x70]
	0x01DDCC48 CBNZ X8, 0x1DDCBA4
	0x01DDCC4C B 0x1DDCF28
	0x01DDCC50 MOV W0, W31
	0x01DDCC54 B 0x1DDCF0C
	0x01DDCC58 CBZ X20, 0x1DDCF28
	0x01DDCC5C LDR X21, [X20 + 0x68]
	0x01DDCC60 MOV X0, X20
	0x01DDCC64 MOV X1, X31
	0x01DDCC68 BL 0x3C32E90
	0x01DDCC6C CBZ X0, 0x1DDCF28
	0x01DDCC70 MOV X1, X31
	0x01DDCC74 BL 0x3C3F58C
	0x01DDCC78 FMOV S3, 1
	0x01DDCC7C MOV X0, X21
	0x01DDCC80 MOV X1, X31
	0x01DDCC84 BL 0x1DD1B94
	0x01DDCC88 LDR X22, [X20 + 0x48]
	0x01DDCC8C CBZ X22, 0x1DDCF28
	0x01DDCC90 LDR W8, [X22 + 0x18]
	0x01DDCC94 CMP W8, 0x1
	0x01DDCC98 B.LT 0x1DDCCE4
	0x01DDCC9C MOV W23, W31
	0x01DDCCA0 CMP W23, W8
	0x01DDCCA4 B.CS 0x1DDCF2C
	0x01DDCCA8 ADD X8, X22, W23, 0x3, SXTW
	0x01DDCCAC LDR X21, [X8 + 0x20]
	0x01DDCCB0 CBZ X21, 0x1DDCF28
	0x01DDCCB4 MOVZ W1, 0x1
	0x01DDCCB8 MOV X0, X21
	0x01DDCCBC MOV X2, X31
	0x01DDCCC0 BL 0x3C32410
	0x01DDCCC4 FMOV S0, W31
	0x01DDCCC8 MOV X0, X21
	0x01DDCCCC MOV X1, X31
	0x01DDCCD0 BL 0x3C16928
	0x01DDCCD4 LDR W8, [X22 + 0x18]
	0x01DDCCD8 ADD W23, W23, 0x1
	0x01DDCCDC CMP W23, W8
	0x01DDCCE0 B.LT 0x1DDCCA0
	0x01DDCCE4 LDR V8, [X19 + 0x2C]
	0x01DDCCE8 STR S8, [X19 + 0x3C]
	0x01DDCCEC FCMP S8, 0x0
	0x01DDCCF0 B.LE 0x1DDCD90
	0x01DDCCF4 MOV X0, X31
	0x01DDCCF8 BL 0x3C3C714
	0x01DDCCFC FSUB S0, S8, S0
	0x01DDCD00 STR S0, [X19 + 0x3C]
	0x01DDCD04 CBZ X20, 0x1DDCF28
	0x01DDCD08 LDR X20, [X20 + 0x48]
	0x01DDCD0C CBZ X20, 0x1DDCF28
	0x01DDCD10 LDR W8, [X20 + 0x18]
	0x01DDCD14 CMP W8, 0x1
	0x01DDCD18 B.LT 0x1DDCD84
	0x01DDCD1C LDR V1, [X19 + 0x2C]
	0x01DDCD20 FMOV S2, 1
	0x01DDCD24 FMOV S3, -1
	0x01DDCD28 MOV W21, W31
	0x01DDCD2C FDIV S0, S0, S1
	0x01DDCD30 FSUB S0, S2, S0
	0x01DDCD34 FADD S0, S0, S0
	0x01DDCD38 FADD S0, S0, S3
	0x01DDCD3C FMUL S1, S0, S0
	0x01DDCD40 LDR V3, [X19 + 0x38]
	0x01DDCD44 FMUL S1, S0, S1
	0x01DDCD48 FMUL S0, S0, S1
	0x01DDCD4C FSUB S0, S2, S0
	0x01DDCD50 FMUL S8, S3, S0
	0x01DDCD54 CMP W21, W8
	0x01DDCD58 B.CS 0x1DDCF2C
	0x01DDCD5C ADD X8, X20, W21, 0x3, SXTW
	0x01DDCD60 LDR X0, [X8 + 0x20]
	0x01DDCD64 CBZ X0, 0x1DDCF28
	0x01DDCD68 MOV V0.16B, V8.16B
	0x01DDCD6C MOV X1, X31
	0x01DDCD70 BL 0x3C16928
	0x01DDCD74 LDR W8, [X20 + 0x18]
	0x01DDCD78 ADD W21, W21, 0x1
	0x01DDCD7C CMP W21, W8
	0x01DDCD80 B.LT 0x1DDCD54
	0x01DDCD84 MOVZ W8, 0x2
	0x01DDCD88 STR X31, [X19 + 0x18]
	0x01DDCD8C B 0x1DDCEF4
	0x01DDCD90 CBZ X20, 0x1DDCF28
	0x01DDCD94 LDR X22, [X20 + 0x48]
	0x01DDCD98 CBZ X22, 0x1DDCF28
	0x01DDCD9C LDR W8, [X22 + 0x18]
	0x01DDCDA0 CMP W8, 0x1
	0x01DDCDA4 B.LT 0x1DDCDF0

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0x25FD000
	014 Move W8, [X20+3174]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {43}
	020 Move X0, 0x231A000
	021 Move X0, [X0+1744]
	022 Call 0x1C17CF4
	023 Move X0, 0x231D000
	024 Move X0, [X0+320]
	025 Call 0x1C17CF4
	026 Move X0, 0x231D000
	027 Move X0, [X0+2784]
	028 Call 0x1C17CF4
	029 Move X0, 0x231D000
	030 Move X0, [X0+2792]
	031 Call 0x1C17CF4
	032 Move X0, 0x231D000
	033 Move X0, [X0+2800]
	034 Call 0x1C17CF4
	035 Move X0, 0x231D000
	036 Move X0, [X0+2808]
	037 Call 0x1C17CF4
	038 Move X0, 0x231D000
	039 Move X0, [X0+2632]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X20+3174], W8
	043 Move X8, [X19+120]
	044 Compare X8, 0
	045 JumpIfEqual {232}
	046 Move X20, 0x231D000
	047 Move X24, 0x231A000
	048 Move X25, 0x231D000
	049 Move X26, 0x231D000
	050 Move X27, 0x231D000
	051 Move X23, 0x231D000
	052 Move X22, 0x231D000
	053 Move X20, [X20+2784]
	054 Move X24, [X24+1744]
	055 Move X25, [X25+2808]
	056 Move X26, [X26+2800]
	057 Move X27, [X27+2792]
	058 Move X23, [X23+320]
	059 Move X22, [X22+2632]
	060 Move W21, 4
	061 Move W9, [X8+24]
	062 Subtract X28, X21, 4
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, [X8]
	066 Compare X0, 0
	067 JumpIfEqual {232}
	068 Move W1, W31
	069 Move X2, X31
	070 Call Behaviour.set_enabled, X0, X1
	071 Move X8, [X19+128]
	072 Compare X8, 0
	073 JumpIfEqual {232}
	074 Move W9, [X8+24]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X0, [X8]
	077 Compare X0, 0
	078 JumpIfEqual {232}
	079 Move W1, W31
	080 Move X2, X31
	081 Call Renderer.set_enabled, X0, X1
	082 Move X8, [X19+120]
	083 Add X21, X21, 1
	084 Compare X8, 0
	085 JumpIfNotEqual {61}
	086 Move X21, [X19+72]
	087 Compare X21, 0
	088 JumpIfEqual {232}
	089 Move W8, [X21+24]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move W28, W31
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Add X8, X21, W28
	094 Move X0, [X8+32]
	095 Compare X0, 0
	096 JumpIfEqual {232}
	097 Move W1, W31
	098 Move X2, X31
	099 Call Behaviour.set_enabled, X0, X1
	100 Move W8, [X21+24]
	101 Add W28, W28, 1
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X8, [X19+40]
	104 Compare X8, 0
	105 JumpIfEqual {232}
	106 Move X0, [X20]
	107 Move W1, [X8+24]
	108 Call 0x1C17D6C
	109 Move X8, [X19+40]
	110 Move [X19+136], X0
	111 Compare X8, 0
	112 JumpIfEqual {232}
	113 Move X28, X31
	114 NotImplemented "Instruction LDRSW not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X8, [X19+136]
	117 Compare X8, 0
	118 JumpIfEqual {232}
	119 Move W9, [X8+24]
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Add X8, X8, X28
	122 Move [X8+32], X31
	123 Move X8, [X19+40]
	124 Compare X8, 0
	125 JumpIfEqual {232}
	126 Move W9, [X8+24]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Add X8, X8, X28
	129 Move X29, [X8+32]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Compare W28, 0
	133 JumpIfNotEqual {176}
	134 Compare X29, 0
	135 JumpIfEqual {232}
	136 Move X0, [X24]
	137 Move X20, [X29+32]
	138 Call 0x1C17F10
	139 Move X2, [X27]
	140 Compare X29, 0
	141 JumpIfEqual {232}
	142 Move X0, [X24]
	143 Move X20, [X29+32]
	144 Call 0x1C17F10
	145 Move X2, [X25]
	146 Compare X29, 0
	147 JumpIfEqual {232}
	148 Move X0, [X24]
	149 Move X20, [X29+32]
	150 Call 0x1C17F10
	151 Move X2, [X26]
	152 Move X1, X19
	153 Move X3, X31
	154 Move X21, X0
	155 Call Action`1<Object>..ctor, X0, X1, X2
	156 Move X0, X20
	157 Move X1, X21
	158 Move X2, X31
	159 Call Delegate.Combine, X0, X1
	160 Compare X0, 0
	161 JumpIfEqual {175}
	162 Move X21, [X24]
	163 Move X20, X0
	164 Move X1, X21
	165 Call 0x1C17E00
	166 Compare X0, 0
	167 JumpIfEqual {247}
	168 Move [X29+32], X0
	169 Move X21, [X24]
	170 Move X0, X20
	171 Move X1, X21
	172 Call 0x1C17E00
	173 Compare X0, 0
	174 JumpIfNotEqual {176}
	175 Move [X29+32], X31
	176 Move X8, [X19+40]
	177 Add X28, X28, 1
	178 Compare X8, 0
	179 JumpIfNotEqual {114}
	180 Move X8, [X19+48]
	181 Compare X8, 0
	182 JumpIfEqual {232}
	183 Move X0, [X23]
	184 Move W1, [X8+24]
	185 Call 0x1C17D6C
	186 Move X8, [X19+48]
	187 Move [X19+32], X0
	188 Compare X8, 0
	189 JumpIfEqual {232}
	190 Move X23, X31
	191 Move X21, X31
	192 Move W9, [X8+24]
	193 NotImplemented "Instruction CMP not yet implemented."
	194 NotImplemented "Instruction CMP not yet implemented."
	195 Add X8, X8, X21
	196 Move X0, [X8+32]
	197 Compare X0, 0
	198 JumpIfEqual {232}
	199 Move X24, [X19+32]
	200 Move X1, X31
	201 Call Renderer.get_material, X0
	202 Move X8, [X22]
	203 Move X20, X0
	204 Move W9, [X8+224]
	205 Compare W9, 0
	206 JumpIfNotEqual {209}
	207 Move X0, X8
	208 Call 0x1C17DFC
	209 Compare X20, 0
	210 JumpIfEqual {232}
	211 Move X8, [X22]
	212 Move X0, X20
	213 Move X2, X31
	214 Move X8, [X8+184]
	215 Move W1, [X8+4]
	216 Call Material.GetColor, X0, X1
	217 Compare X24, 0
	218 JumpIfEqual {232}
	219 Move W8, [X24+24]
	220 Add X21, X21, 1
	221 Subtract W9, W21, 1
	222 NotImplemented "Instruction CMP not yet implemented."
	223 Add X8, X24, X23
	224 Move [X8+32], S0
	225 Move [X8+40], S1
	226 Move [X8+40], S2
	227 Move [X8+48], S3
	228 Move X8, [X19+48]
	229 Add X23, X23, 16
	230 Compare X8, 0
	231 JumpIfNotEqual {192}
	232 Call 0x1C17F20
	233 Move X20, [X31+80]
	234 Move X19, [X31+88]
	235 Move X22, [X31+64]
	236 Move X21, [X31+72]
	237 Move X24, [X31+48]
	238 Move X23, [X31+56]
	239 Move X26, [X31+32]
	240 Move X25, [X31+40]
	241 Move X28, [X31+16]
	242 Move X27, [X31+24]
	243 Move X29, [X31+96]
	244 Move X30, [X31+104]
	245 Return 
	246 Call 0x1C17F28
	247 Move X0, X20
	248 Move X1, X21
	249 Call 0x1C181E0

Method: System.Void OnItemTrigger1Enter(UnityEngine.Collider col)

Disassembly:
	0x01DDCDA8 MOV W23, W31
	0x01DDCDAC CMP W23, W8
	0x01DDCDB0 B.CS 0x1DDCF2C
	0x01DDCDB4 ADD X8, X22, W23, 0x3, SXTW
	0x01DDCDB8 LDR X21, [X8 + 0x20]
	0x01DDCDBC CBZ X21, 0x1DDCF28
	0x01DDCDC0 MOV X0, X21
	0x01DDCDC4 MOV W1, W31
	0x01DDCDC8 MOV X2, X31
	0x01DDCDCC BL 0x3C32410
	0x01DDCDD0 LDR V0, [X19 + 0x38]
	0x01DDCDD4 MOV X0, X21
	0x01DDCDD8 MOV X1, X31
	0x01DDCDDC BL 0x3C16928
	0x01DDCDE0 LDR W8, [X22 + 0x18]
	0x01DDCDE4 ADD W23, W23, 0x1

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X8, X1
	005 Move X19, X0
	006 Add X1, X31, 8
	007 Move X0, X8
	008 Move X2, X31
	009 Move [X31+8], X31
	010 Call TriggerUtilities.TryGetItemFromCollider, X0, X1
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {18}
	015 Move X0, X19
	016 Move W1, W31
	017 Call ItemSellingMachineView.PlayerBulbEffect, X0, X1
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Add X31, X31, 32
	021 Return 

Method: System.Void OnItemTrigger2Enter(UnityEngine.Collider col)

Disassembly:
	0x01DDCEA4 LDR W1, [X8]
	0x01DDCEA8 BL 0x3C15CD8
	0x01DDCEAC LDR W8, [X21 + 0x18]
	0x01DDCEB0 ADD W23, W23, 0x1
	0x01DDCEB4 CMP W23, W8
	0x01DDCEB8 B.LT 0x1DDCE58
	0x01DDCEBC ADRP X8, 0x231A000
	0x01DDCEC0 LDR V8, [X19 + 0x30]
	0x01DDCEC4 LDR X8, [X8 + 0xC30]
	0x01DDCEC8 LDR X0, [X8]
	0x01DDCECC BL 0x1C16F10
	0x01DDCED0 MOV V0.16B, V8.16B
	0x01DDCED4 MOV X1, X31
	0x01DDCED8 MOV X20, X0
	0x01DDCEDC BL 0x3C3A634
	0x01DDCEE0 STR X20, [X19 + 0x18]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X8, X1
	005 Move X19, X0
	006 Add X1, X31, 8
	007 Move X0, X8
	008 Move X2, X31
	009 Move [X31+8], X31
	010 Call TriggerUtilities.TryGetItemFromCollider, X0, X1
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {18}
	015 Move W1, 1
	016 Move X0, X19
	017 Call ItemSellingMachineView.PlayerBulbEffect, X0, X1
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Add X31, X31, 32
	021 Return 

Method: System.Void OnItemTrigger3Enter(UnityEngine.Collider col)

Disassembly:
	0x01DDCEE4 MOVZ W8, 0x3
	0x01DDCEE8 B 0x1DDCEF4
	0x01DDCEEC STR X31, [X19 + 0x18]
	0x01DDCEF0 MOVZ W8, 0x4
	0x01DDCEF4 STR W8, [X19 + 0x10]
	0x01DDCEF8 MOVZ W0, 0x1
	0x01DDCEFC B 0x1DDCF0C
	0x01DDCF00 MOVZ W0, 0x1
	0x01DDCF04 STR X31, [X19 + 0x18]
	0x01DDCF08 STR W0, [X19 + 0x10]
	0x01DDCF0C LDP X20, X19, [X31 + 0x40]
	0x01DDCF10 LDP X22, X21, [X31 + 0x30]
	0x01DDCF14 LDP X24, X23, [X31 + 0x20]
	0x01DDCF18 LDR X30, [X31 + 0x18]
	0x01DDCF1C LDP D9, D8, [X31 + 0x8]
	0x01DDCF20 LDR V10, [X31], #0x50

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X8, X1
	005 Move X19, X0
	006 Add X1, X31, 8
	007 Move X0, X8
	008 Move X2, X31
	009 Move [X31+8], X31
	010 Call TriggerUtilities.TryGetItemFromCollider, X0, X1
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {18}
	015 Move W1, 2
	016 Move X0, X19
	017 Call ItemSellingMachineView.PlayerBulbEffect, X0, X1
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Add X31, X31, 32
	021 Return 

Method: System.Void SetOverheatedColor(System.Boolean isOverheated)

Disassembly:
	0x01DDAA9C LDR X24, [X24 + 0x168]
	0x01DDAAA0 MOV X2, X0
	0x01DDAAA4 ADD X0, X31, 0x30
	0x01DDAAA8 LDR X1, [X8]
	0x01DDAAAC LDR X3, [X24]
	0x01DDAAB0 STP X31, X31, [X31 + 0x30]
	0x01DDAAB4 BL 0x27ABC80
	0x01DDAAB8 CBZ X20, 0x1DDABD4
	0x01DDAABC LDR W8, [X20 + 0x18]
	0x01DDAAC0 CBZ W8, 0x1DDABD8
	0x01DDAAC4 LDR V0, [X31 + 0x3]
	0x01DDAAC8 ADRP X8, 0x231D000
	0x01DDAACC LDR X8, [X8 + 0x148]
	0x01DDAAD0 MOVN X9, 0x0
	0x01DDAAD4 STR V0, [X20 + 0x2]
	0x01DDAAD8 ADD X0, X31, 0x48
	0x01DDAADC LDR X8, [X8]
	0x01DDAAE0 MOV X1, X31
	0x01DDAAE4 STP X8, X9, [X31 + 0x48]
	0x01DDAAE8 LDR W8, [X21 + 0x28]
	0x01DDAAEC STR W8, [X31 + 0x58]
	0x01DDAAF0 BL 0x33B162C
	0x01DDAAF4 ADRP X8, 0x231D000
	0x01DDAAF8 LDR X8, [X8 + 0x170]
	0x01DDAAFC LDR X3, [X24]
	0x01DDAB00 MOV X2, X0
	0x01DDAB04 ADD X0, X31, 0x20
	0x01DDAB08 LDR X1, [X8]
	0x01DDAB0C STP X31, X31, [X31 + 0x20]
	0x01DDAB10 BL 0x27ABC80
	0x01DDAB14 LDR W8, [X20 + 0x18]
	0x01DDAB18 CMP W8, 0x1
	0x01DDAB1C B.LS 0x1DDABD8
	0x01DDAB20 LDR V0, [X31 + 0x2]
	0x01DDAB24 ADRP X9, 0x2319000
	0x01DDAB28 ADD X1, X31, 0x1C
	0x01DDAB2C STR V0, [X20 + 0x3]
	0x01DDAB30 LDR W8, [X21 + 0x24]
	0x01DDAB34 LDR X9, [X9 + 0x758]
	0x01DDAB38 STR W8, [X31 + 0x1C]
	0x01DDAB3C LDR X0, [X9]
	0x01DDAB40 BL 0x1C16E04
	0x01DDAB44 ADRP X8, 0x231E000
	0x01DDAB48 LDR X8, [X8 + 0xA88]
	0x01DDAB4C LDR X3, [X24]
	0x01DDAB50 MOV X2, X0
	0x01DDAB54 ADD X0, X31, 0x0
	0x01DDAB58 LDR X1, [X8]
	0x01DDAB5C STP X31, X31, [X31]
	0x01DDAB60 BL 0x27ABC80
	0x01DDAB64 LDR W8, [X20 + 0x18]
	0x01DDAB68 CMP W8, 0x2
	0x01DDAB6C B.LS 0x1DDABD8
	0x01DDAB70 LDR V0, [X31]
	0x01DDAB74 ADRP X8, 0x2319000
	0x01DDAB78 ADD W21, W22, W23
	0x01DDAB7C STR V0, [X20 + 0x4]
	0x01DDAB80 LDR X8, [X8 + 0xB50]
	0x01DDAB84 LDR X0, [X8]
	0x01DDAB88 LDR W8, [X0 + 0xE0]
	0x01DDAB8C CBNZ W8, 0x1DDAB94
	0x01DDAB90 BL 0x1C16DFC
	0x01DDAB94 ADRP X8, 0x231E000
	0x01DDAB98 LDR X8, [X8 + 0xA90]
	0x01DDAB9C MOV X1, X20
	0x01DDABA0 MOV X2, X31
	0x01DDABA4 LDR X0, [X8]
	0x01DDABA8 BL 0x1DD3B5C
	0x01DDABAC MOV X0, X19
	0x01DDABB0 MOV X1, X31
	0x01DDABB4 BL 0x1D934E0
	0x01DDABB8 MOV W0, W21
	0x01DDABBC LDP X20, X19, [X31 + 0xB0]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x25FF000
	011 Move W8, [X21+3175]
	012 Move W20, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x231F000
	019 Move X0, [X0+2632]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3175], W8
	023 Move X21, 0x231F000
	024 Move X21, [X21+2632]
	025 Move TEMP, X20
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {40}
	029 Move X0, [X21]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {35}
	033 Call 0x1C17DFC
	034 Move X0, [X21]
	035 Move X8, [X0+184]
	036 Move S11, [X8+24]
	037 Move S10, [X8+28]
	038 Move S8, [X8+32]
	039 Move S9, [X8+36]
	040 Move S8, W31
	041 Move S9, 1
	042 Move S10, W31
	043 Move S11, W31
	044 Move X20, [X19+48]
	045 Compare X20, 0
	046 JumpIfEqual {89}
	047 Move W8, [X20+24]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W22, W31
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add X8, X20, W22
	052 Move X0, [X8+32]
	053 Compare X0, 0
	054 JumpIfEqual {89}
	055 Move X1, X31
	056 Call Renderer.get_material, X0
	057 Move X8, [X21]
	058 Move X19, X0
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 Compare X19, 0
	065 JumpIfEqual {89}
	066 Move X8, [X21]
	067 Move X0, X19
	068 Move V0, V11
	069 Move V1, V10
	070 Move X8, [X8+184]
	071 Move V2, V8
	072 Move V3, V9
	073 Move X2, X31
	074 Move W1, [X8+8]
	075 Call Material.SetColor, X0, X1, X2
	076 Move W8, [X20+24]
	077 Add W22, W22, 1
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X20, [X31+64]
	080 Move X19, [X31+72]
	081 Move X22, [X31+48]
	082 Move X21, [X31+56]
	083 Move X30, [X31+32]
	084 Move D9, [X31+16]
	085 Move D8, [X31+24]
	086 Move D11, [X31+80]
	087 Move D10, [X31+88]
	088 Return 
	089 Call 0x1C17F20
	090 Call 0x1C17F28

Method: System.Void SetExplodedColor(System.Boolean isExploded)

Disassembly:
	0x01DDBE5C ADD X8, X8, X22, 0x3, LSL
	0x01DDBE60 LDR X1, [X8 + 0x20]
	0x01DDBE64 CBZ X1, 0x1DDBE74
	0x01DDBE68 MOV X0, X19
	0x01DDBE6C MOV X2, X31
	0x01DDBE70 BL 0x3C36834
	0x01DDBE74 MOV X0, X19
	0x01DDBE78 MOV W1, W20
	0x01DDBE7C BL 0x1DDBF24
	0x01DDBE80 MOV X1, X0
	0x01DDBE84 MOV X0, X19
	0x01DDBE88 LDP X20, X19, [X31 + 0x20]
	0x01DDBE8C LDP X22, X21, [X31 + 0x10]
	0x01DDBE90 MOV X2, X31
	0x01DDBE94 LDR X30, [X31], #0x30
	0x01DDBE98 B 0x3C366FC
	0x01DDBE9C BL 0x1C16F20
	0x01DDBEA0 BL 0x1C16F28
	0x01DDBEA4 SUB X31, X31, 0x20
	0x01DDBEA8 STP X30, X19, [X31 + 0x10]
	0x01DDBEAC MOV X8, X1
	0x01DDBEB0 MOV X19, X0
	0x01DDBEB4 ADD X1, X31, 0x8
	0x01DDBEB8 MOV X0, X8
	0x01DDBEBC MOV X2, X31
	0x01DDBEC0 STR X31, [X31 + 0x8]
	0x01DDBEC4 BL 0x1E02B30
	0x01DDBEC8 TBZ X0, 0x0, 0x1DDBED8
	0x01DDBECC MOVZ W1, 0x1
	0x01DDBED0 MOV X0, X19
	0x01DDBED4 BL 0x1DDBDE8
	0x01DDBED8 LDP X30, X19, [X31 + 0x10]
	0x01DDBEDC ADD X31, X31, 0x20
	0x01DDBEE0 RET
	0x01DDBEE4 SUB X31, X31, 0x20
	0x01DDBEE8 STP X30, X19, [X31 + 0x10]
	0x01DDBEEC MOV X8, X1
	0x01DDBEF0 MOV X19, X0
	0x01DDBEF4 ADD X1, X31, 0x8
	0x01DDBEF8 MOV X0, X8
	0x01DDBEFC MOV X2, X31
	0x01DDBF00 STR X31, [X31 + 0x8]
	0x01DDBF04 BL 0x1E02B30
	0x01DDBF08 TBZ X0, 0x0, 0x1DDBF18
	0x01DDBF0C MOVZ W1, 0x2
	0x01DDBF10 MOV X0, X19
	0x01DDBF14 BL 0x1DDBDE8
	0x01DDBF18 LDP X30, X19, [X31 + 0x10]
	0x01DDBF1C ADD X31, X31, 0x20
	0x01DDBF20 RET
	0x01DDBF24 STR X30, [X31 - 0x30]!
	0x01DDBF28 STP X22, X21, [X31 + 0x10]
	0x01DDBF2C STP X20, X19, [X31 + 0x20]
	0x01DDBF30 ADRP X21, 0x25FD000
	0x01DDBF34 ADRP X22, 0x231D000
	0x01DDBF38 LDRB W8, [X21 + 0xC69]
	0x01DDBF3C LDR X22, [X22 + 0xB00]
	0x01DDBF40 MOV W19, W1
	0x01DDBF44 MOV X20, X0
	0x01DDBF48 TBNZ X8, 0x0, 0x1DDBF60
	0x01DDBF4C ADRP X0, 0x231D000
	0x01DDBF50 LDR X0, [X0 + 0xB00]
	0x01DDBF54 BL 0x1C16CF4
	0x01DDBF58 MOVZ W8, 0x1
	0x01DDBF5C STRB W8, [X21 + 0xC69]
	0x01DDBF60 LDR X0, [X22]
	0x01DDBF64 BL 0x1C16F10
	0x01DDBF68 MOV X1, X31
	0x01DDBF6C MOV X21, X0
	0x01DDBF70 BL 0x33BDD8C
	0x01DDBF74 STR W31, [X21 + 0x10]

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x25FE000
	010 Move W8, [X21+3176]
	011 Move W19, W1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x231E000
	018 Move X0, [X0+2632]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3176], W8
	022 Move X8, [X20+48]
	023 Compare X8, 0
	024 JumpIfEqual {78}
	025 Move X24, 0x231E000
	026 Move X24, [X24+2632]
	027 Move X22, X31
	028 Move X23, X31
	029 Move S8, 0.5
	030 Move W9, [X8+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Add X8, X8, X23
	034 Move X0, [X8+32]
	035 Compare X0, 0
	036 JumpIfEqual {78}
	037 Move X1, X31
	038 Call Renderer.get_material, X0
	039 Move X8, [X24]
	040 Move X21, X0
	041 Move W9, [X8+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {47}
	044 Move X0, X8
	045 Call 0x1C17DFC
	046 Move X8, [X24]
	047 Move X9, [X20+32]
	048 Compare X9, 0
	049 JumpIfEqual {78}
	050 Move W10, [X9+24]
	051 Add X23, X23, 1
	052 Subtract W11, W23, 1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X9, X9, X22
	055 Move S0, [X9+32]
	056 Move S1, [X9+36]
	057 Move S2, [X9+40]
	058 Move S3, [X9+44]
	059 Move TEMP, X19
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {67}
	063 Multiply S0, S0, S8
	064 Multiply S1, S1, S8
	065 Multiply S2, S2, S8
	066 Multiply S3, S3, S8
	067 Compare X21, 0
	068 JumpIfEqual {78}
	069 Move X8, [X8+184]
	070 Move X0, X21
	071 Move X2, X31
	072 Add X22, X22, 16
	073 Move W1, [X8+4]
	074 Call Material.SetColor, X0, X1, X2
	075 Move X8, [X20+48]
	076 Compare X8, 0
	077 JumpIfNotEqual {30}
	078 Call 0x1C17F20
	079 Move X20, [X31+48]
	080 Move X19, [X31+56]
	081 Move X22, [X31+32]
	082 Move X21, [X31+40]
	083 Move X24, [X31+16]
	084 Move X23, [X31+24]
	085 Move X30, [X31+8]
	086 Move V8, [X31+64]
	087 Return 
	088 Call 0x1C17F28

Method: System.Void PlayerBulbEffect(System.Int32 bulbIndex)

Disassembly:
	0x01DDCDE8 CMP W23, W8
	0x01DDCDEC B.LT 0x1DDCDAC
	0x01DDCDF0 LDR X0, [X20 + 0x38]
	0x01DDCDF4 CBZ X0, 0x1DDCF28
	0x01DDCDF8 MOV X1, X31
	0x01DDCDFC BL 0x3C1341C
	0x01DDCE00 ADRP X22, 0x231C000
	0x01DDCE04 LDR X22, [X22 + 0xA48]
	0x01DDCE08 MOV X21, X0
	0x01DDCE0C LDR X8, [X22]
	0x01DDCE10 LDR W9, [X8 + 0xE0]
	0x01DDCE14 CBNZ W9, 0x1DDCE20
	0x01DDCE18 MOV X0, X8
	0x01DDCE1C BL 0x1C16DFC
	0x01DDCE20 CBZ X21, 0x1DDCF28
	0x01DDCE24 LDR X8, [X22]
	0x01DDCE28 FMOV S0, W31
	0x01DDCE2C MOV X0, X21
	0x01DDCE30 MOV X2, X31
	0x01DDCE34 LDR X8, [X8 + 0xB8]
	0x01DDCE38 LDR W1, [X8]
	0x01DDCE3C BL 0x3C15CD8
	0x01DDCE40 LDR X21, [X20 + 0x40]
	0x01DDCE44 CBZ X21, 0x1DDCF28
	0x01DDCE48 LDR W8, [X21 + 0x18]
	0x01DDCE4C CMP W8, 0x1
	0x01DDCE50 B.LT 0x1DDCEBC
	0x01DDCE54 MOV W23, W31
	0x01DDCE58 CMP W23, W8
	0x01DDCE5C B.CS 0x1DDCF2C
	0x01DDCE60 ADD X8, X21, W23, 0x3, SXTW
	0x01DDCE64 LDR X0, [X8 + 0x20]
	0x01DDCE68 CBZ X0, 0x1DDCF28
	0x01DDCE6C MOV X1, X31
	0x01DDCE70 BL 0x3C1341C
	0x01DDCE74 LDR X8, [X22]
	0x01DDCE78 MOV X20, X0
	0x01DDCE7C LDR W9, [X8 + 0xE0]
	0x01DDCE80 CBNZ W9, 0x1DDCE8C
	0x01DDCE84 MOV X0, X8
	0x01DDCE88 BL 0x1C16DFC
	0x01DDCE8C CBZ X20, 0x1DDCF28
	0x01DDCE90 LDR X8, [X22]
	0x01DDCE94 FMOV S0, W31
	0x01DDCE98 MOV X0, X20
	0x01DDCE9C MOV X2, X31
	0x01DDCEA0 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X0+40]
	007 Compare X8, 0
	008 JumpIfEqual {54}
	009 Move W9, [X8+24]
	010 Move W20, W1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X22, W20
	013 Add X8, X8, X22
	014 Move X19, X0
	015 Move X0, [X8+32]
	016 Compare X0, 0
	017 JumpIfEqual {54}
	018 Move X21, [X19+80]
	019 Move X1, X31
	020 Call Component.get_transform, X0
	021 Compare X0, 0
	022 JumpIfEqual {54}
	023 Move X1, X31
	024 Call Transform.get_position, X0
	025 Move S3, 1
	026 Move X0, X21
	027 Move X1, X31
	028 Call SFXManager.PlaySFX, X0, X1, V0
	029 Move X8, [X19+136]
	030 Compare X8, 0
	031 JumpIfEqual {54}
	032 Move W9, [X8+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Add X8, X8, X22
	035 Move X1, [X8+32]
	036 Compare X1, 0
	037 JumpIfEqual {41}
	038 Move X0, X19
	039 Move X2, X31
	040 Call MonoBehaviour.StopCoroutine, X0, X1
	041 Move X0, X19
	042 Move W1, W20
	043 Call ItemSellingMachineView.PlayBulbEffectCoroutine, X0, X1
	044 Move X1, X0
	045 Move X0, X19
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X2, X31
	051 Move X30, [X31+48]
	052 Call MonoBehaviour.StartCoroutine, X0, X1
	053 Return 
	054 Call 0x1C17F20
	055 Call 0x1C17F28

Method: System.Collections.IEnumerator PlayBulbEffectCoroutine(System.Int32 bulbIndex)

Disassembly:
	0x01DDCF24 RET
	0x01DDCF28 BL 0x1C16F20
	0x01DDCF2C BL 0x1C16F28
	0x01DDCF30 LDR X0, [X0 + 0x18]
	0x01DDCF34 RET
	0x01DDCF38 STP X30, X19, [X31 - 0x10]!
	0x01DDCF3C ADRP X0, 0x2317000
	0x01DDCF40 LDR X0, [X0 + 0xB40]
	0x01DDCF44 BL 0x1C16D08
	0x01DDCF48 BL 0x1C16F10
	0x01DDCF4C MOV X1, X31
	0x01DDCF50 MOV X19, X0
	0x01DDCF54 BL 0x3380310
	0x01DDCF58 ADRP X0, 0x231C000
	0x01DDCF5C LDR X0, [X0 + 0xB50]
	0x01DDCF60 BL 0x1C16D08
	0x01DDCF64 MOV X1, X0
	0x01DDCF68 MOV X0, X19
	0x01DDCF6C BL 0x1C16DEC
	0x01DDCF70 LDR X0, [X0 + 0x18]
	0x01DDCF74 RET
	0x01DDCF78 RET
	0x01DDCF7C STR D8, [X31 - 0x40]!
	0x01DDCF80 STP X30, X23, [X31 + 0x10]
	0x01DDCF84 STP X22, X21, [X31 + 0x20]
	0x01DDCF88 STP X20, X19, [X31 + 0x30]
	0x01DDCF8C ADRP X20, 0x25FC000
	0x01DDCF90 LDRB W8, [X20 + 0xC72]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25FD000
	007 Move X22, 0x231D000
	008 Move W8, [X21+3177]
	009 Move X22, [X22+2816]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x231D000
	017 Move X0, [X0+2816]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3177], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X21, X0
	025 Call Object..ctor, X0
	026 Move [X21+16], W31
	027 Move [X21+32], X20
	028 Move [X21+40], W19
	029 Move X0, X21
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return X0

Method: System.Void PlayItemSellAnimation(System.Single closeDuration = 0.3, System.Single lightDuration = 2, System.Single openDuration = 0.3, System.Single randomWaitTime = 1.5)

Disassembly:
	0x01DDB7A8 B.CC 0x1DDB7D0
	0x01DDB7AC LDR X8, [X8 + 0xC8]
	0x01DDB7B0 ADD X8, X8, X9, 0x3, LSL
	0x01DDB7B4 LDUR X8, [X8 - 0x8]
	0x01DDB7B8 CMP X8, X1
	0x01DDB7BC B.NE 0x1DDB7D0
	0x01DDB7C0 MOV X0, X19
	0x01DDB7C4 LDP X20, X19, [X31 + 0x10]
	0x01DDB7C8 LDP X30, X21, [X31], #0x20
	0x01DDB7CC B 0x1DDA4D0
	0x01DDB7D0 MOV X0, X19
	0x01DDB7D4 BL 0x1C171E0
	0x01DDB7D8 BL 0x1C16F20
	0x01DDB7DC STR X30, [X31 - 0x20]!
	0x01DDB7E0 STP X20, X19, [X31 + 0x10]
	0x01DDB7E4 ADRP X20, 0x25FD000
	0x01DDB7E8 LDRB W8, [X20 + 0xC62]
	0x01DDB7EC MOV X19, X0
	0x01DDB7F0 TBNZ X8, 0x0, 0x1DDB808
	0x01DDB7F4 ADRP X0, 0x231D000
	0x01DDB7F8 LDR X0, [X0 + 0xA38]
	0x01DDB7FC BL 0x1C16CF4
	0x01DDB800 MOVZ W8, 0x1
	0x01DDB804 STRB W8, [X20 + 0xC62]
	0x01DDB808 CBZ X19, 0x1DDB860
	0x01DDB80C ADRP X9, 0x231D000
	0x01DDB810 LDR X9, [X9 + 0xA38]

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move X1, [X0+152]
	008 Move V8, V3
	009 Move V9, V2
	010 Move V10, V1
	011 Move X19, X0
	012 Move V11, V0
	013 Compare X1, 0
	014 JumpIfEqual {18}
	015 Move X0, X19
	016 Move X2, X31
	017 Call MonoBehaviour.StopCoroutine, X0, X1
	018 Move X0, X19
	019 Move V0, V11
	020 Move V1, V10
	021 Move V2, V9
	022 Move V3, V8
	023 Call ItemSellingMachineView.PlayItemSellAnimationCoroutine, X0, V0, V1, V2, V3
	024 Move X1, X0
	025 Move [X19+152], X0
	026 Move X0, X19
	027 Move X30, [X31+32]
	028 Move X19, [X31+40]
	029 Move D9, [X31+16]
	030 Move D8, [X31+24]
	031 Move X2, X31
	032 Move D11, [X31+48]
	033 Move D10, [X31+56]
	034 Call MonoBehaviour.StartCoroutine, X0, X1
	035 Return 

Method: System.Collections.IEnumerator PlayItemSellAnimationCoroutine(System.Single closeDuration, System.Single lightDuration, System.Single openDuration, System.Single randomWaitTime)

Disassembly:
	0x01DDCFBC LDR W8, [X19 + 0x10]
	0x01DDCFC0 CMP W8, 0x5
	0x01DDCFC4 B.HI 0x1DDD270
	0x01DDCFC8 LDR X21, [X19 + 0x20]
	0x01DDCFCC ADRP X9, 0xFFFFFFFFFED51000
	0x01DDCFD0 ADD X9, X9, 0x93F
	0x01DDCFD4 ADR X10, 0x10
	0x01DDCFD8 LDRB W11, [X9, X8, LSL]
	0x01DDCFDC ADD X10, X10, X11, 0x2, LSL
	0x01DDCFE0 BR X10
	0x01DDCFE4 MOVN W8, 0x0
	0x01DDCFE8 STR W8, [X19 + 0x10]
	0x01DDCFEC CBZ X21, 0x1DDD3C8
	0x01DDCFF0 LDR X8, [X21 + 0x78]
	0x01DDCFF4 CBZ X8, 0x1DDD3C8
	0x01DDCFF8 MOVN W20, 0x0
	0x01DDCFFC LDR W10, [X8 + 0x18]
	0x01DDD000 ADD W9, W20, 0x1
	0x01DDD004 CMP W9, W10
	0x01DDD008 B.GE 0x1DDD278
	0x01DDD00C CMP W9, W10
	0x01DDD010 B.CS 0x1DDD3CC
	0x01DDD014 SXTW X22, W9
	0x01DDD018 ADD X8, X8, X22, 0x3, LSL
	0x01DDD01C LDR X0, [X8 + 0x20]
	0x01DDD020 CBZ X0, 0x1DDD3C8
	0x01DDD024 MOVZ W1, 0x1
	0x01DDD028 MOV X2, X31
	0x01DDD02C BL 0x3C32410
	0x01DDD030 LDR X8, [X21 + 0x80]
	0x01DDD034 CBZ X8, 0x1DDD3C8
	0x01DDD038 LDR W9, [X8 + 0x18]
	0x01DDD03C ADD W20, W20, 0x1
	0x01DDD040 CMP W20, W9

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x25FD000
	010 Move X21, 0x231D000
	011 Move W8, [X20+3178]
	012 Move X21, [X21+2824]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x231D000
	023 Move X0, [X0+2824]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3178], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X20, X0
	031 Call Object..ctor, X0
	032 Move [X20+16], W31
	033 Move [X20+32], X19
	034 Move [X20+40], S11
	035 Move [X20+48], S10
	036 Move [X20+48], S8
	037 Move [X20+56], S9
	038 Move X0, X20
	039 Move X20, [X31+48]
	040 Move X19, [X31+56]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Move D9, [X31+16]
	044 Move D8, [X31+24]
	045 Move D11, [X31+64]
	046 Move D10, [X31+72]
	047 Return X0

Method: System.Void PlayValueTextAnimation(System.Int32 value)

Disassembly:
	0x01DDC258 BL 0x3C3A634
	0x01DDC25C STR X20, [X19 + 0xA8]
	0x01DDC260 LDR X0, [X21]
	0x01DDC264 BL 0x1C16F10
	0x01DDC268 FMOV S0, 1
	0x01DDC26C MOV X1, X31
	0x01DDC270 MOV X20, X0
	0x01DDC274 BL 0x3C3A634
	0x01DDC278 STR X20, [X19 + 0xB0]
	0x01DDC27C LDR X0, [X21]
	0x01DDC280 BL 0x1C16F10
	0x01DDC284 FMOV S0, 5
	0x01DDC288 MOV X1, X31
	0x01DDC28C MOV X20, X0
	0x01DDC290 BL 0x3C3A634
	0x01DDC294 STR X20, [X19 + 0xB8]
	0x01DDC298 MOV X0, X19
	0x01DDC29C LDP X20, X19, [X31 + 0x10]
	0x01DDC2A0 MOV X1, X31
	0x01DDC2A4 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+160]
	005 Move X19, X0
	006 Move W20, W1
	007 Compare X8, 0
	008 JumpIfEqual {13}
	009 Move X0, X19
	010 Move X1, X8
	011 Move X2, X31
	012 Call MonoBehaviour.StopCoroutine, X0, X1
	013 Move X0, X19
	014 Move W1, W20
	015 Call ItemSellingMachineView.ShowValueTextCoroutine, X0, X1
	016 Move X1, X0
	017 Move [X19+160], X0
	018 Move X0, X19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X2, X31
	022 Move X30, [X31+32]
	023 Call MonoBehaviour.StartCoroutine, X0, X1
	024 Return 

Method: System.Void StopValueTextAnimation()

Disassembly:
	0x01DDB708 MOV X0, X19
	0x01DDB70C BL 0x1DD9260
	0x01DDB710 STR W0, [X19 + 0x9C]
	0x01DDB714 MOV X0, X19
	0x01DDB718 BL 0x1DD9320
	0x01DDB71C STR W0, [X19 + 0xA0]
	0x01DDB720 MOV X0, X19
	0x01DDB724 BL 0x1DD93E0
	0x01DDB728 STR W0, [X19 + 0xA4]
	0x01DDB72C MOV X0, X19
	0x01DDB730 BL 0x1DD94A0
	0x01DDB734 STR S0, [X19 + 0xA8]
	0x01DDB738 LDP X20, X19, [X31 + 0x80]
	0x01DDB73C LDP X22, X21, [X31 + 0x70]
	0x01DDB740 LDR X30, [X31 + 0x60]
	0x01DDB744 ADD X31, X31, 0x90
	0x01DDB748 RET
	0x01DDB74C STP X30, X21, [X31 - 0x20]!
	0x01DDB750 STP X20, X19, [X31 + 0x10]
	0x01DDB754 ADRP X21, 0x25FD000
	0x01DDB758 LDRB W8, [X21 + 0xC61]
	0x01DDB75C MOV X20, X1
	0x01DDB760 MOV X19, X0
	0x01DDB764 TBNZ X8, 0x0, 0x1DDB77C
	0x01DDB768 ADRP X0, 0x231D000
	0x01DDB76C LDR X0, [X0 + 0xA38]
	0x01DDB770 BL 0x1C16CF4
	0x01DDB774 MOVZ W8, 0x1
	0x01DDB778 STRB W8, [X21 + 0xC61]
	0x01DDB77C CBZ X19, 0x1DDB7D8
	0x01DDB780 ADRP X9, 0x231D000
	0x01DDB784 LDR X9, [X9 + 0xA38]
	0x01DDB788 MOVZ W8, 0x1
	0x01DDB78C LDR V0, [X20 + 0x24]
	0x01DDB790 STRB W8, [X19 + 0x58]
	0x01DDB794 LDR X8, [X19]
	0x01DDB798 LDR X1, [X9]
	0x01DDB79C LDRB W10, [X8 + 0x130]
	0x01DDB7A0 LDRB W9, [X1 + 0x130]
	0x01DDB7A4 CMP W10, W9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X1, [X0+160]
	006 Compare X1, 0
	007 JumpIfEqual {42}
	008 Move X2, X31
	009 Move X19, X0
	010 Call MonoBehaviour.StopCoroutine, X0, X1
	011 Move X8, [X19+120]
	012 Move [X19+160], X31
	013 Compare X8, 0
	014 JumpIfEqual {41}
	015 Move W20, 4
	016 Move W9, [X8+24]
	017 Subtract X21, X20, 4
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X0, [X8]
	021 Compare X0, 0
	022 JumpIfEqual {41}
	023 Move W1, W31
	024 Move X2, X31
	025 Call Behaviour.set_enabled, X0, X1
	026 Move X8, [X19+128]
	027 Compare X8, 0
	028 JumpIfEqual {41}
	029 Move W9, [X8+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, [X8]
	032 Compare X0, 0
	033 JumpIfEqual {41}
	034 Move W1, W31
	035 Move X2, X31
	036 Call Renderer.set_enabled, X0, X1
	037 Move X8, [X19+120]
	038 Add X20, X20, 1
	039 Compare X8, 0
	040 JumpIfNotEqual {16}
	041 Call 0x1C17F20
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return 
	047 Call 0x1C17F28

Method: System.Collections.IEnumerator ShowValueTextCoroutine(System.Int32 value)

Disassembly:
	0x01DDD06C MOVZ W8, 0x2
	0x01DDD070 STR X31, [X19 + 0x18]
	0x01DDD074 STR W8, [X19 + 0x10]
	0x01DDD078 B 0x1DDD3B0
	0x01DDD07C LDR V8, [X19 + 0x38]
	0x01DDD080 FMOV S0, 1
	0x01DDD084 MOVN W8, 0x0
	0x01DDD088 STR W8, [X19 + 0x10]
	0x01DDD08C FCMP S8, S0
	0x01DDD090 B.MI 0x1DDD290
	0x01DDD094 ADRP X8, 0xFFFFFFFFFED10000
	0x01DDD098 LDR V0, [X8 + 0x640]
	0x01DDD09C STUR D0, [X19 + 0x3C]
	0x01DDD0A0 CBNZ X21, 0x1DDD2DC
	0x01DDD0A4 B 0x1DDD3C8
	0x01DDD0A8 MOVN W8, 0x0
	0x01DDD0AC STR W8, [X19 + 0x10]
	0x01DDD0B0 CBZ X21, 0x1DDD3C8
	0x01DDD0B4 LDR X8, [X21 + 0x78]
	0x01DDD0B8 CBZ X8, 0x1DDD3C8
	0x01DDD0BC MOVN W20, 0x0
	0x01DDD0C0 LDR W10, [X8 + 0x18]
	0x01DDD0C4 ADD W9, W20, 0x1
	0x01DDD0C8 CMP W9, W10
	0x01DDD0CC B.GE 0x1DDD2BC
	0x01DDD0D0 CMP W9, W10
	0x01DDD0D4 B.CS 0x1DDD3CC
	0x01DDD0D8 SXTW X22, W9

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25FC000
	007 Move X22, 0x231C000
	008 Move W8, [X21+3179]
	009 Move X22, [X22+2832]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x231C000
	017 Move X0, [X0+2832]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3179], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X21, X0
	025 Call Object..ctor, X0
	026 Move [X21+16], W31
	027 Move [X21+32], X20
	028 Move [X21+40], W19
	029 Move X0, X21
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return X0

Method: System.Int32 GetRandomValue(System.Int32 min, System.Int32 max, System.Int32 prev)

Disassembly:
	0x01DDD104 CMP W20, W9
	0x01DDD108 B.CS 0x1DDD3CC
	0x01DDD10C ADD X8, X8, X22, 0x3, LSL
	0x01DDD110 LDR X0, [X8 + 0x20]
	0x01DDD114 CBZ X0, 0x1DDD3C8
	0x01DDD118 MOV W1, W31
	0x01DDD11C MOV X2, X31
	0x01DDD120 BL 0x3C13034
	0x01DDD124 LDR X8, [X21 + 0x78]
	0x01DDD128 CBNZ X8, 0x1DDD0C0
	0x01DDD12C B 0x1DDD3C8
	0x01DDD130 MOVN W8, 0x0
	0x01DDD134 STR W8, [X19 + 0x10]
	0x01DDD138 CBZ X21, 0x1DDD3C8
	0x01DDD13C LDR W2, [X19 + 0x40]
	0x01DDD140 LDR X1, [X19 + 0x30]
	0x01DDD144 BL 0x1DDC148

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W19, W3
	006 Move W20, W2
	007 Move W21, W1
	008 Move W0, W1
	009 Move W1, W2
	010 Move X2, X31
	011 Call Random.Range, X0, X1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W0, W21
	014 Move W1, W20
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Move X21, [X31+40]
	019 Return X0

Method: System.String GetRepeatString(System.String str, System.Int32 repeat)

Disassembly:
	0x01DDD148 LDR X8, [X21 + 0x78]
	0x01DDD14C CBZ X8, 0x1DDD3C8
	0x01DDD150 MOV X20, X0
	0x01DDD154 MOVZ W22, 0x4
	0x01DDD158 LDR W9, [X8 + 0x18]
	0x01DDD15C SUB X23, X22, 0x4
	0x01DDD160 CMP W23, W9
	0x01DDD164 B.GE 0x1DDD2C8
	0x01DDD168 CMP W23, W9
	0x01DDD16C B.CS 0x1DDD3CC
	0x01DDD170 LDR X0, [X8, X22, LSL #3]
	0x01DDD174 CBZ X0, 0x1DDD3C8
	0x01DDD178 MOVZ W1, 0x1
	0x01DDD17C MOV X2, X31
	0x01DDD180 BL 0x3C32410
	0x01DDD184 LDR X8, [X21 + 0x78]
	0x01DDD188 CBZ X8, 0x1DDD3C8
	0x01DDD18C LDR W9, [X8 + 0x18]
	0x01DDD190 CMP W23, W9
	0x01DDD194 B.CS 0x1DDD3CC
	0x01DDD198 LDR X0, [X8, X22, LSL #3]
	0x01DDD19C CBZ X0, 0x1DDD3C8
	0x01DDD1A0 LDR X8, [X0]
	0x01DDD1A4 MOV X1, X20
	0x01DDD1A8 LDR X9, [X8 + 0x558]
	0x01DDD1AC LDR X2, [X8 + 0x560]
	0x01DDD1B0 BLR X9
	0x01DDD1B4 LDR X8, [X21 + 0x80]
	0x01DDD1B8 CBZ X8, 0x1DDD3C8
	0x01DDD1BC LDR W9, [X8 + 0x18]
	0x01DDD1C0 CMP W23, W9
	0x01DDD1C4 B.CS 0x1DDD3CC
	0x01DDD1C8 LDR X0, [X8, X22, LSL #3]
	0x01DDD1CC CBZ X0, 0x1DDD3C8
	0x01DDD1D0 MOVZ W1, 0x1
	0x01DDD1D4 MOV X2, X31
	0x01DDD1D8 BL 0x3C13034
	0x01DDD1DC LDR X8, [X21 + 0x78]
	0x01DDD1E0 ADD X22, X22, 0x1
	0x01DDD1E4 CBNZ X8, 0x1DDD158
	0x01DDD1E8 B 0x1DDD3C8
	0x01DDD1EC MOVN W8, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25FC000
	007 Move X22, 0x2317000
	008 Move W8, [X21+3180]
	009 Move X22, [X22+2440]
	010 Move W19, W2
	011 Move X20, X1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x2317000
	017 Move X0, [X0+3544]
	018 Call 0x1C17CF4
	019 Move X0, 0x2317000
	020 Move X0, [X0+2440]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3180], W8
	024 Move X21, [X22]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X22, 0x2317000
	027 Move X22, [X22+3544]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X1, X20
	030 Move X1, [X22]
	031 Move X0, X20
	032 Move X2, X31
	033 Call String.Concat, X0, X1
	034 Move X1, X0
	035 Move X0, X21
	036 Move X2, X31
	037 Call String.Concat, X0, X1
	038 Subtract W19, W19, 1
	039 Move X21, X0
	040 Move X0, X21
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return X0

Method: System.Void .ctor()

Disassembly:
	0x01DDD1F0 STR W8, [X19 + 0x10]
	0x01DDD1F4 CBZ X21, 0x1DDD3C8
	0x01DDD1F8 LDR X8, [X21 + 0x78]
	0x01DDD1FC CBZ X8, 0x1DDD3C8
	0x01DDD200 MOV W19, W31
	0x01DDD204 LDR W9, [X8 + 0x18]
	0x01DDD208 CMP W19, W9
	0x01DDD20C B.GE 0x1DDD270
	0x01DDD210 CMP W19, W9
	0x01DDD214 B.CS 0x1DDD3CC
	0x01DDD218 SXTW X20, W19
	0x01DDD21C ADD X8, X8, X20, 0x3, LSL
	0x01DDD220 LDR X0, [X8 + 0x20]
	0x01DDD224 CBZ X0, 0x1DDD3C8
	0x01DDD228 MOV W1, W31
	0x01DDD22C MOV X2, X31
	0x01DDD230 BL 0x3C32410
	0x01DDD234 LDR X8, [X21 + 0x80]
	0x01DDD238 CBZ X8, 0x1DDD3C8
	0x01DDD23C LDR W9, [X8 + 0x18]
	0x01DDD240 CMP W19, W9
	0x01DDD244 B.CS 0x1DDD3CC
	0x01DDD248 ADD X8, X8, X20, 0x3, LSL
	0x01DDD24C LDR X0, [X8 + 0x20]
	0x01DDD250 CBZ X0, 0x1DDD3C8
	0x01DDD254 MOV W1, W31
	0x01DDD258 MOV X2, X31
	0x01DDD25C ADD W19, W19, 0x1
	0x01DDD260 BL 0x3C13034
	0x01DDD264 LDR X8, [X21 + 0x78]
	0x01DDD268 CBNZ X8, 0x1DDD204
	0x01DDD26C B 0x1DDD3C8
	0x01DDD270 MOV W0, W31
	0x01DDD274 B 0x1DDD3B4
	0x01DDD278 ADRP X8, 0x2316000
	0x01DDD27C LDR X8, [X8 + 0x988]
	0x01DDD280 FMOV S8, W31
	0x01DDD284 LDR X8, [X8]
	0x01DDD288 STR W31, [X19 + 0x38]
	0x01DDD28C STR X8, [X19 + 0x30]
	0x01DDD290 MOV X0, X31
	0x01DDD294 BL 0x3C3C714
	0x01DDD298 FMOV S1, 0.5
	0x01DDD29C FMUL S0, S0, S1
	0x01DDD2A0 FADD S0, S8, S0
	0x01DDD2A4 FMOV S8, 1
	0x01DDD2A8 FCMP S0, S8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25FC000
	006 Move X21, 0x231A000
	007 Move W8, [X20+3181]
	008 Move X21, [X21+3120]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x231A000
	015 Move X0, [X0+3120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3181], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move S0, 1.5
	022 Move X1, X31
	023 Move X20, X0
	024 Call WaitForSeconds..ctor, X0, V0
	025 Move [X19+144], X20
	026 Move X0, [X21]
	027 Call 0x1C17F10
	028 Move X8, -19865600
	029 Move V0, [X8+780]
	030 Move X1, X31
	031 Move X20, X0
	032 Call WaitForSeconds..ctor, X0, V0
	033 Move [X19+168], X20
	034 Move X0, [X21]
	035 Call 0x1C17F10
	036 Move S0, 1
	037 Move X1, X31
	038 Move X20, X0
	039 Call WaitForSeconds..ctor, X0, V0
	040 Move [X19+176], X20
	041 Move X0, [X21]
	042 Call 0x1C17F10
	043 Move S0, 5
	044 Move X1, X31
	045 Move X20, X0
	046 Call WaitForSeconds..ctor, X0, V0
	047 Move [X19+184], X20
	048 Move X0, X19
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X1, X31
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]
	054 Call MonoBehaviour..ctor, X0
	055 Return 

Method: System.Void .cctor()

Disassembly:
	0x01DDD2AC STR S0, [X19 + 0x38]
	0x01DDD2B0 B.LE 0x1DDD2E8
	0x01DDD2B4 LDR W8, [X19 + 0x28]
	0x01DDD2B8 B 0x1DDD31C
	0x01DDD2BC LDR X8, [X21 + 0xA8]
	0x01DDD2C0 MOVZ W9, 0x4
	0x01DDD2C4 B 0x1DDD3A8
	0x01DDD2C8 LDR W8, [X19 + 0x3C]
	0x01DDD2CC ADD W8, W8, 0x1
	0x01DDD2D0 CMP W8, 0x5
	0x01DDD2D4 STR W8, [X19 + 0x3C]
	0x01DDD2D8 B.GE 0x1DDD3A0
	0x01DDD2DC LDR X8, [X21 + 0xB0]
	0x01DDD2E0 MOVZ W9, 0x3
	0x01DDD2E4 B 0x1DDD3A8
	0x01DDD2E8 FSUB S0, S8, S0
	0x01DDD2EC FMOV S1, 4
	0x01DDD2F0 BL 0x3EB1B50
	0x01DDD2F4 LDR V1, [X19 + 0x28]
	0x01DDD2F8 MOVZ W8, 0x7F800000
	0x01DDD2FC FSUB S0, S8, S0
	0x01DDD300 FMOV S2, W8
	0x01DDD304 SCVTF S1, S1
	0x01DDD308 FMUL S0, S0, S1
	0x01DDD30C FCVTZS W8, S0
	0x01DDD310 FCMP S0, S2
	0x01DDD314 MOVZ W9, 0x80000000
	0x01DDD318 CSEL W8, W9, W8, EQ
	0x01DDD31C ADRP X9, 0x231B000
	0x01DDD320 LDR X9, [X9 + 0x98]
	0x01DDD324 ADD X0, X31, 0xC
	0x01DDD328 MOV X2, X31
	0x01DDD32C STR W8, [X31 + 0xC]
	0x01DDD330 LDR X1, [X9]
	0x01DDD334 BL 0x337B774
	0x01DDD338 STR X0, [X19 + 0x30]
	0x01DDD33C CBZ X21, 0x1DDD3C8
	0x01DDD340 LDR X20, [X21 + 0x78]
	0x01DDD344 CBZ X20, 0x1DDD3C8
	0x01DDD348 LDR W8, [X20 + 0x18]
	0x01DDD34C CMP W8, 0x1
	0x01DDD350 B.LT 0x1DDD390
	0x01DDD354 MOV W21, W31
	0x01DDD358 CMP W21, W8
	0x01DDD35C B.CS 0x1DDD3CC
	0x01DDD360 ADD X8, X20, W21, 0x3, SXTW
	0x01DDD364 LDR X0, [X8 + 0x20]
	0x01DDD368 CBZ X0, 0x1DDD3C8
	0x01DDD36C LDR X8, [X0]
	0x01DDD370 LDR X1, [X19 + 0x30]
	0x01DDD374 LDR X9, [X8 + 0x558]
	0x01DDD378 LDR X2, [X8 + 0x560]
	0x01DDD37C BLR X9
	0x01DDD380 LDR W8, [X20 + 0x18]
	0x01DDD384 ADD W21, W21, 0x1
	0x01DDD388 CMP W21, W8
	0x01DDD38C B.LT 0x1DDD358
	0x01DDD390 MOVZ W0, 0x1
	0x01DDD394 STR X31, [X19 + 0x18]
	0x01DDD398 STR W0, [X19 + 0x10]
	0x01DDD39C B 0x1DDD3B4
	0x01DDD3A0 LDR X8, [X21 + 0xB8]
	0x01DDD3A4 MOVZ W9, 0x5
	0x01DDD3A8 STR W9, [X19 + 0x10]
	0x01DDD3AC STR X8, [X19 + 0x18]
	0x01DDD3B0 MOVZ W0, 0x1
	0x01DDD3B4 LDP X20, X19, [X31 + 0x30]
	0x01DDD3B8 LDP X22, X21, [X31 + 0x20]
	0x01DDD3BC LDP X30, X23, [X31 + 0x10]
	0x01DDD3C0 LDR V8, [X31], #0x40
	0x01DDD3C4 RET
	0x01DDD3C8 BL 0x1C16F20
	0x01DDD3CC BL 0x1C16F28
	0x01DDD3D0 LDR X0, [X0 + 0x18]
	0x01DDD3D4 RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x25FC000
	010 Move X25, 0x231C000
	011 Move X20, 0x231C000
	012 Move X23, 0x231B000
	013 Move X22, 0x231A000
	014 Move X21, 0x2317000
	015 Move X19, 0x231C000
	016 Move X25, [X25+2840]
	017 Move W8, [X24+3182]
	018 Move X20, [X20+2632]
	019 Move X23, [X23+544]
	020 Move X22, [X22+3208]
	021 Move X21, [X21+1592]
	022 Move X19, [X19+2848]
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {47}
	027 Move X0, 0x231C000
	028 Move X0, [X0+2632]
	029 Call 0x1C17CF4
	030 Move X0, 0x2317000
	031 Move X0, [X0+1592]
	032 Call 0x1C17CF4
	033 Move X0, 0x231C000
	034 Move X0, [X0+2848]
	035 Call 0x1C17CF4
	036 Move X0, 0x231B000
	037 Move X0, [X0+544]
	038 Call 0x1C17CF4
	039 Move X0, 0x231C000
	040 Move X0, [X0+2840]
	041 Call 0x1C17CF4
	042 Move X0, 0x231A000
	043 Move X0, [X0+3208]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X24+3182], W8
	047 Move X0, [X25]
	048 Move X1, X31
	049 Call Shader.PropertyToID, X0
	050 Move X8, [X20]
	051 Move X1, X31
	052 Move X8, [X8+184]
	053 Move [X8], W0
	054 Move X0, [X23]
	055 Call Shader.PropertyToID, X0
	056 Move X8, [X20]
	057 Move X1, X31
	058 Move X8, [X8+184]
	059 Move [X8+4], W0
	060 Move X0, [X22]
	061 Call Shader.PropertyToID, X0
	062 Move X8, [X20]
	063 Move W1, 3
	064 Move X8, [X8+184]
	065 Move [X8+8], W0
	066 Move X0, [X21]
	067 Call 0x1C17D6C
	068 Move X1, [X19]
	069 Move X2, X31
	070 Move X19, X0
	071 Call RuntimeHelpers.InitializeArray, X0, X1
	072 Move X8, [X20]
	073 Move X9, -19861504
	074 Move V0, [X9+214]
	075 Move X22, [X31+32]
	076 Move X21, [X31+40]
	077 Move X8, [X8+184]
	078 Move X24, [X31+16]
	079 Move X23, [X31+24]
	080 Move [X8+16], X19
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move [X8+24], V0
	084 Move X30, [X31+64]
	085 Move X25, [X31+72]
	086 Return 

