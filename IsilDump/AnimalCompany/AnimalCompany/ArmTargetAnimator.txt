Type: AnimalCompany.ArmTargetAnimator

Method: UnityEngine.Vector3 get_centerPosition()

Disassembly:
	0x01DEF07C BL 0x3C8A910
	0x01DEF080 LDR W8, [X22 + 0x18]
	0x01DEF084 ADD X23, X23, 0x1
	0x01DEF088 CMP X23, W8, SXTW
	0x01DEF08C B.LT 0x1DEF050
	0x01DEF090 ADRP X8, 0x230A000
	0x01DEF094 LDR X8, [X8 + 0xF0]
	0x01DEF098 MOVZ W1, 0x2

ISIL:
	001 Move [X31-16], X30
	002 Move X1, X31
	003 Call Component.get_transform, X0
	004 Compare X0, 0
	005 JumpIfEqual {10}
	006 Move X1, X31
	007 Move X30, [X31+16]
	008 Call Transform.get_position, X0
	009 Return X0
	010 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x01DEF09C LDR X0, [X8]
	0x01DEF0A0 BL 0x1C16D6C
	0x01DEF0A4 STR X0, [X19 + 0x210]
	0x01DEF0A8 CBZ X0, 0x1DEF11C
	0x01DEF0AC ADRP X23, 0x230A000
	0x01DEF0B0 LDR X23, [X23 + 0xF8]
	0x01DEF0B4 MOVZ W24, 0xCCCD
	0x01DEF0B8 MOV X20, X0
	0x01DEF0BC MOV X22, X31
	0x01DEF0C0 MOVK W24, 0x3E4C0000
	0x01DEF0C4 LDRSW X8, [X20 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+32]
	005 Compare X0, 0
	006 JumpIfEqual {15}
	007 Move X1, X31
	008 Call Transform.get_localPosition, X0
	009 Move [X19+80], S0
	010 Move [X19+88], S1
	011 Move [X19+88], S2
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x01DEF0C8 CMP X22, X8
	0x01DEF0CC B.GE 0x1DEF120
	0x01DEF0D0 LDR X0, [X23]
	0x01DEF0D4 BL 0x1C16F10
	0x01DEF0D8 MOV X1, X31
	0x01DEF0DC MOV X21, X0
	0x01DEF0E0 STR W24, [X0 + 0x18]
	0x01DEF0E4 BL 0x33BDD8C
	0x01DEF0E8 LDR X8, [X20]
	0x01DEF0EC MOV X0, X21
	0x01DEF0F0 LDR X1, [X8 + 0x40]
	0x01DEF0F4 BL 0x1C16E00
	0x01DEF0F8 CBZ X0, 0x1DEF138
	0x01DEF0FC LDR W8, [X20 + 0x18]
	0x01DEF100 CMP X22, X8
	0x01DEF104 B.CS 0x1DEF134
	0x01DEF108 ADD X8, X20, X22, 0x3, LSL
	0x01DEF10C STR X21, [X8 + 0x20]
	0x01DEF110 LDR X20, [X19 + 0x210]
	0x01DEF114 ADD X22, X22, 0x1
	0x01DEF118 CBNZ X20, 0x1DEF0C4
	0x01DEF11C BL 0x1C16F20
	0x01DEF120 LDP X20, X19, [X31 + 0x30]
	0x01DEF124 LDP X22, X21, [X31 + 0x20]
	0x01DEF128 LDP X24, X23, [X31 + 0x10]
	0x01DEF12C LDP X30, X25, [X31], #0x40
	0x01DEF130 RET
	0x01DEF134 BL 0x1C16F28
	0x01DEF138 BL 0x1C16F44
	0x01DEF13C MOV X1, X31
	0x01DEF140 BL 0x1C16DEC
	0x01DEF144 MOVZ W8, 0xCCCD
	0x01DEF148 MOVK W8, 0x3E4C0000
	0x01DEF14C MOV X1, X31
	0x01DEF150 STR W8, [X0 + 0x18]
	0x01DEF154 B 0x33BDD8C
	0x01DEF158 STP D11, D10, [X31 - 0x40]!
	0x01DEF15C STP D9, D8, [X31 + 0x10]
	0x01DEF160 STR X30, [X31 + 0x20]
	0x01DEF164 STP X20, X19, [X31 + 0x30]
	0x01DEF168 MOV X19, X0
	0x01DEF16C BL 0x1DE8598
	0x01DEF170 LDR X0, [X19 + 0x40]
	0x01DEF174 CBZ X0, 0x1DEF228
	0x01DEF178 MOV X1, X31
	0x01DEF17C BL 0x1E93668
	0x01DEF180 TBZ X0, 0x0, 0x1DEF1CC
	0x01DEF184 MOV X0, X19
	0x01DEF188 BL 0x1DEF22C
	0x01DEF18C LDR X8, [X19]
	0x01DEF190 MOV X0, X19
	0x01DEF194 LDR X9, [X8 + 0x3A8]
	0x01DEF198 LDR X1, [X8 + 0x3B0]
	0x01DEF19C BLR X9
	0x01DEF1A0 ADRP X8, 0xFFFFFFFFFECFB000
	0x01DEF1A4 LDR V5, [X8 + 0x5C]
	0x01DEF1A8 FMOV S0, W31
	0x01DEF1AC FMOV S1, 1
	0x01DEF1B0 FMOV S2, 0.5
	0x01DEF1B4 FMOV S3, 1
	0x01DEF1B8 FMOV S4, 0.5
	0x01DEF1BC MOV X0, X31
	0x01DEF1C0 BL 0x3C30B68
	0x01DEF1C4 MOV X0, X19
	0x01DEF1C8 BL 0x1DEEC04
	0x01DEF1CC LDR X20, [X19 + 0x1F8]
	0x01DEF1D0 MOV X0, X19
	0x01DEF1D4 BL 0x1DEEBA0
	0x01DEF1D8 MOV X0, X19
	0x01DEF1DC MOV V8.16B, V0.16B
	0x01DEF1E0 MOV V9.16B, V1.16B
	0x01DEF1E4 MOV V10.16B, V2.16B
	0x01DEF1E8 MOV V11.16B, V3.16B
	0x01DEF1EC BL 0x1DEEF44
	0x01DEF1F0 CBZ X20, 0x1DEF228
	0x01DEF1F4 MOV X0, X20
	0x01DEF1F8 MOV V0.16B, V8.16B
	0x01DEF1FC MOV V1.16B, V9.16B
	0x01DEF200 MOV V2.16B, V10.16B
	0x01DEF204 MOV V3.16B, V11.16B
	0x01DEF208 MOV W1, W31
	0x01DEF20C BL 0x1DEF2DC
	0x01DEF210 MOV X0, X19
	0x01DEF214 LDP X20, X19, [X31 + 0x30]
	0x01DEF218 LDR X30, [X31 + 0x20]
	0x01DEF21C LDP D9, D8, [X31 + 0x10]
	0x01DEF220 LDP D11, D10, [X31], #0x40
	0x01DEF224 B 0x1DEF618
	0x01DEF228 BL 0x1C16F20
	0x01DEF22C STP X30, X19, [X31 - 0x10]!
	0x01DEF230 MOVZ W1, 0x1
	0x01DEF234 MOV X19, X0
	0x01DEF238 BL 0x1DEEB40
	0x01DEF23C LDR X8, [X19]
	0x01DEF240 MOV X0, X19
	0x01DEF244 MOV X1, X31
	0x01DEF248 LDR X9, [X8 + 0x3B8]
	0x01DEF24C LDR X2, [X8 + 0x3C0]
	0x01DEF250 BLR X9
	0x01DEF254 LDR X9, [X19 + 0xC0]
	0x01DEF258 CBZ X9, 0x1DEF2D4
	0x01DEF25C LDR X8, [X9 + 0x30]
	0x01DEF260 CBZ X8, 0x1DEF2D4
	0x01DEF264 LDR W10, [X8 + 0x18]
	0x01DEF268 CBZ W10, 0x1DEF2D8
	0x01DEF26C LDR X10, [X9 + 0x58]
	0x01DEF270 CBZ X10, 0x1DEF2D4
	0x01DEF274 LDR W11, [X10 + 0x18]
	0x01DEF278 CBZ W11, 0x1DEF2D8
	0x01DEF27C LDR X9, [X9 + 0x60]
	0x01DEF280 CBZ X9, 0x1DEF2D4
	0x01DEF284 LDR W11, [X9 + 0x18]
	0x01DEF288 CBZ W11, 0x1DEF2D8
	0x01DEF28C LDR X11, [X19]
	0x01DEF290 LDR V0, [X8 + 0x20]
	0x01DEF294 LDR V1, [X10 + 0x20]
	0x01DEF298 LDR V2, [X9 + 0x20]
	0x01DEF29C LDR X8, [X11 + 0x2C8]
	0x01DEF2A0 LDR X2, [X11 + 0x2D0]
	0x01DEF2A4 MOVZ W1, 0x1
	0x01DEF2A8 MOV X0, X19
	0x01DEF2AC BLR X8
	0x01DEF2B0 LDR X8, [X19]
	0x01DEF2B4 MOVZ W1, 0x1
	0x01DEF2B8 MOV X0, X19
	0x01DEF2BC LDR X9, [X8 + 0x368]
	0x01DEF2C0 LDR X2, [X8 + 0x370]
	0x01DEF2C4 BLR X9
	0x01DEF2C8 STR W31, [X19 + 0xE0]
	0x01DEF2CC LDP X30, X19, [X31], #0x10
	0x01DEF2D0 RET
	0x01DEF2D4 BL 0x1C16F20
	0x01DEF2D8 BL 0x1C16F28
	0x01DEF2DC STP D11, D10, [X31 - 0x50]!
	0x01DEF2E0 STP D9, D8, [X31 + 0x10]
	0x01DEF2E4 STR X30, [X31 + 0x20]
	0x01DEF2E8 STP X22, X21, [X31 + 0x30]
	0x01DEF2EC STP X20, X19, [X31 + 0x40]
	0x01DEF2F0 ADRP X21, 0x25E9000
	0x01DEF2F4 ADRP X22, 0x2306000
	0x01DEF2F8 ADRP X20, 0x2306000
	0x01DEF2FC LDRB W8, [X21 + 0xCEE]
	0x01DEF300 LDR X22, [X22 + 0x320]
	0x01DEF304 LDR X20, [X20 + 0x318]
	0x01DEF308 MOV V8.16B, V3.16B
	0x01DEF30C MOV V9.16B, V2.16B
	0x01DEF310 MOV V10.16B, V1.16B
	0x01DEF314 MOV V11.16B, V0.16B
	0x01DEF318 MOV X19, X0
	0x01DEF31C TBNZ X8, 0x0, 0x1DEF3D0
	0x01DEF320 ADRP X0, 0x230A000
	0x01DEF324 LDR X0, [X0 + 0x100]
	0x01DEF328 BL 0x1C16CF4
	0x01DEF32C ADRP X0, 0x230A000
	0x01DEF330 LDR X0, [X0 + 0x108]
	0x01DEF334 BL 0x1C16CF4
	0x01DEF338 ADRP X0, 0x230A000
	0x01DEF33C LDR X0, [X0 + 0x110]
	0x01DEF340 BL 0x1C16CF4
	0x01DEF344 ADRP X0, 0x2305000
	0x01DEF348 LDR X0, [X0 + 0xA00]
	0x01DEF34C BL 0x1C16CF4
	0x01DEF350 ADRP X0, 0x2304000
	0x01DEF354 LDR X0, [X0 + 0x900]
	0x01DEF358 BL 0x1C16CF4
	0x01DEF35C ADRP X0, 0x2306000
	0x01DEF360 LDR X0, [X0 + 0x318]
	0x01DEF364 BL 0x1C16CF4
	0x01DEF368 ADRP X0, 0x2306000
	0x01DEF36C LDR X0, [X0 + 0x2A0]
	0x01DEF370 BL 0x1C16CF4
	0x01DEF374 ADRP X0, 0x2306000
	0x01DEF378 LDR X0, [X0 + 0x320]
	0x01DEF37C BL 0x1C16CF4
	0x01DEF380 ADRP X0, 0x2306000
	0x01DEF384 LDR X0, [X0 + 0x918]
	0x01DEF388 BL 0x1C16CF4
	0x01DEF38C ADRP X0, 0x2306000
	0x01DEF390 LDR X0, [X0 + 0x920]
	0x01DEF394 BL 0x1C16CF4
	0x01DEF398 ADRP X0, 0x2306000
	0x01DEF39C LDR X0, [X0 + 0x930]
	0x01DEF3A0 BL 0x1C16CF4
	0x01DEF3A4 ADRP X0, 0x2306000
	0x01DEF3A8 LDR X0, [X0 + 0x940]
	0x01DEF3AC BL 0x1C16CF4
	0x01DEF3B0 ADRP X0, 0x2306000
	0x01DEF3B4 LDR X0, [X0 + 0x950]
	0x01DEF3B8 BL 0x1C16CF4
	0x01DEF3BC ADRP X0, 0x2306000
	0x01DEF3C0 LDR X0, [X0 + 0x998]
	0x01DEF3C4 BL 0x1C16CF4
	0x01DEF3C8 MOVZ W8, 0x1
	0x01DEF3CC STRB W8, [X21 + 0xCEE]
	0x01DEF3D0 LDR X0, [X22]
	0x01DEF3D4 BL 0x1C16F10
	0x01DEF3D8 LDR X2, [X20]
	0x01DEF3DC MOV X1, X31
	0x01DEF3E0 MOV X20, X0
	0x01DEF3E4 BL 0x26AFB18
	0x01DEF3E8 CBZ X20, 0x1DEF614
	0x01DEF3EC LDR X8, [X20 + 0x60]
	0x01DEF3F0 CBZ X8, 0x1DEF614
	0x01DEF3F4 LDR X0, [X8 + 0x58]
	0x01DEF3F8 CBZ X0, 0x1DEF614
	0x01DEF3FC ADRP X8, 0x2306000
	0x01DEF400 ADRP X21, 0x2304000
	0x01DEF404 LDR X8, [X8 + 0x930]
	0x01DEF408 LDR X21, [X21 + 0x900]
	0x01DEF40C LDR X1, [X8]
	0x01DEF410 LDR X2, [X21]
	0x01DEF414 BL 0x265C3F4
	0x01DEF418 LDR X8, [X20 + 0x60]
	0x01DEF41C CBZ X8, 0x1DEF614
	0x01DEF420 LDR X0, [X8 + 0x60]
	0x01DEF424 CBZ X0, 0x1DEF614
	0x01DEF428 ADRP X22, 0x2306000
	0x01DEF42C LDR X22, [X22 + 0x940]
	0x01DEF430 LDR X2, [X21]
	0x01DEF434 LDR X1, [X22]
	0x01DEF438 BL 0x265C3F4
	0x01DEF43C LDR X8, [X20 + 0x60]
	0x01DEF440 CBZ X8, 0x1DEF614
	0x01DEF444 LDR X0, [X8 + 0x68]
	0x01DEF448 CBZ X0, 0x1DEF614
	0x01DEF44C LDR X1, [X22]
	0x01DEF450 LDR X2, [X21]
	0x01DEF454 BL 0x265C3F4
	0x01DEF458 LDR X8, [X20 + 0x60]
	0x01DEF45C CBZ X8, 0x1DEF614
	0x01DEF460 LDR X0, [X8 + 0x70]
	0x01DEF464 CBZ X0, 0x1DEF614
	0x01DEF468 ADRP X8, 0x2306000
	0x01DEF46C LDR X8, [X8 + 0x998]
	0x01DEF470 LDR X2, [X21]
	0x01DEF474 LDR X1, [X8]
	0x01DEF478 BL 0x265C3F4
	0x01DEF47C LDR X8, [X20 + 0x60]
	0x01DEF480 CBZ X8, 0x1DEF614
	0x01DEF484 LDR X0, [X8 + 0x78]
	0x01DEF488 CBZ X0, 0x1DEF614
	0x01DEF48C ADRP X22, 0x2306000
	0x01DEF490 LDR X22, [X22 + 0x918]
	0x01DEF494 LDR X2, [X21]
	0x01DEF498 LDR X1, [X22]
	0x01DEF49C BL 0x265C3F4
	0x01DEF4A0 LDR X8, [X20 + 0x60]
	0x01DEF4A4 CBZ X8, 0x1DEF614
	0x01DEF4A8 LDR X0, [X8 + 0x80]
	0x01DEF4AC CBZ X0, 0x1DEF614
	0x01DEF4B0 LDR X1, [X22]
	0x01DEF4B4 LDR X2, [X21]
	0x01DEF4B8 BL 0x265C3F4
	0x01DEF4BC LDR X8, [X20 + 0x60]
	0x01DEF4C0 CBZ X8, 0x1DEF614
	0x01DEF4C4 LDR X0, [X8 + 0x88]
	0x01DEF4C8 CBZ X0, 0x1DEF614
	0x01DEF4CC ADRP X8, 0x2306000
	0x01DEF4D0 LDR X8, [X8 + 0x950]
	0x01DEF4D4 LDR X2, [X21]
	0x01DEF4D8 LDR X1, [X8]
	0x01DEF4DC BL 0x265C3F4
	0x01DEF4E0 LDR X8, [X20 + 0x60]
	0x01DEF4E4 CBZ X8, 0x1DEF614
	0x01DEF4E8 LDR X0, [X8 + 0x90]
	0x01DEF4EC CBZ X0, 0x1DEF614
	0x01DEF4F0 ADRP X8, 0x2306000
	0x01DEF4F4 LDR X8, [X8 + 0x920]
	0x01DEF4F8 LDR X2, [X21]
	0x01DEF4FC LDR X1, [X8]
	0x01DEF500 BL 0x265C3F4
	0x01DEF504 LDR X8, [X20 + 0x60]
	0x01DEF508 CBZ X8, 0x1DEF614
	0x01DEF50C LDR X0, [X8 + 0x50]
	0x01DEF510 CBZ X0, 0x1DEF614
	0x01DEF514 ADRP X8, 0x2305000
	0x01DEF518 LDR X8, [X8 + 0xA00]
	0x01DEF51C MOV V0.16B, V11.16B
	0x01DEF520 MOV V1.16B, V10.16B
	0x01DEF524 MOV V2.16B, V9.16B
	0x01DEF528 LDR X1, [X8]
	0x01DEF52C MOV V3.16B, V8.16B
	0x01DEF530 BL 0x2653AC4
	0x01DEF534 LDR X0, [X19 + 0xB0]
	0x01DEF538 CBZ X0, 0x1DEF614
	0x01DEF53C LDR X1, [X20 + 0x60]
	0x01DEF540 MOV X2, X31
	0x01DEF544 BL 0x1E1F0D8
	0x01DEF548 LDR X0, [X19 + 0xB0]
	0x01DEF54C CBZ X0, 0x1DEF614
	0x01DEF550 MOV V0.16B, V11.16B
	0x01DEF554 MOV V1.16B, V10.16B
	0x01DEF558 MOV V2.16B, V9.16B
	0x01DEF55C MOV V3.16B, V8.16B
	0x01DEF560 MOV X1, X31
	0x01DEF564 BL 0x1E1EF5C
	0x01DEF568 LDR X0, [X19 + 0xB0]
	0x01DEF56C CBZ X0, 0x1DEF614
	0x01DEF570 ADRP X20, 0x230A000
	0x01DEF574 ADRP X21, 0x230A000
	0x01DEF578 LDR X20, [X20 + 0x100]
	0x01DEF57C LDR X21, [X21 + 0x108]
	0x01DEF580 MOV X1, X31
	0x01DEF584 BL 0x1E1E788
	0x01DEF588 LDR X1, [X19 + 0xD0]
	0x01DEF58C LDR X2, [X20]
	0x01DEF590 BL 0x21B4124
	0x01DEF594 LDR X1, [X21]
	0x01DEF598 BL 0x21D577C
	0x01DEF59C LDR X8, [X19 + 0xC8]
	0x01DEF5A0 STR X0, [X19 + 0x30]
	0x01DEF5A4 CBZ X8, 0x1DEF614
	0x01DEF5A8 ADRP X20, 0x230A000
	0x01DEF5AC LDR X20, [X20 + 0x110]
	0x01DEF5B0 MOV X0, X8
	0x01DEF5B4 MOV X1, X31
	0x01DEF5B8 BL 0x3C1341C
	0x01DEF5BC LDR X8, [X20]
	0x01DEF5C0 MOV X19, X0
	0x01DEF5C4 LDR W9, [X8 + 0xE0]
	0x01DEF5C8 CBNZ W9, 0x1DEF5D4
	0x01DEF5CC MOV X0, X8
	0x01DEF5D0 BL 0x1C16DFC
	0x01DEF5D4 CBZ X19, 0x1DEF614
	0x01DEF5D8 LDR X8, [X20]
	0x01DEF5DC MOV X0, X19
	0x01DEF5E0 MOV V2.16B, V9.16B
	0x01DEF5E4 MOV V3.16B, V8.16B
	0x01DEF5E8 LDR X8, [X8 + 0xB8]
	0x01DEF5EC LDP X20, X19, [X31 + 0x40]
	0x01DEF5F0 LDP X22, X21, [X31 + 0x30]
	0x01DEF5F4 LDR X30, [X31 + 0x20]
	0x01DEF5F8 LDR W1, [X8]
	0x01DEF5FC LDP D9, D8, [X31 + 0x10]
	0x01DEF600 MOV V0.16B, V11.16B
	0x01DEF604 MOV V1.16B, V10.16B
	0x01DEF608 MOV X2, X31
	0x01DEF60C LDP D11, D10, [X31], #0x50
	0x01DEF610 B 0x3C14988
	0x01DEF614 BL 0x1C16F20
	0x01DEF618 STR X30, [X31 - 0x20]!
	0x01DEF61C STP X20, X19, [X31 + 0x10]
	0x01DEF620 MOV X19, X0
	0x01DEF624 BL 0x1DEEAE0
	0x01DEF628 SUB W8, W0, 0x3
	0x01DEF62C CMP W8, 0x3
	0x01DEF630 B.CS 0x1DEF648
	0x01DEF634 LDR X0, [X19 + 0xC8]
	0x01DEF638 CBZ X0, 0x1DEF6AC
	0x01DEF63C LDR X8, [X0]
	0x01DEF640 LDP X9, X1, [X8 + 0x1F8]
	0x01DEF644 B 0x1DEF668
	0x01DEF648 CMP W0, 0x2
	0x01DEF64C B.EQ 0x1DEF658
	0x01DEF650 CMP W0, 0x1
	0x01DEF654 B.NE 0x1DEF670
	0x01DEF658 LDR X0, [X19 + 0xC8]
	0x01DEF65C CBZ X0, 0x1DEF6AC
	0x01DEF660 LDR X8, [X0]
	0x01DEF664 LDP X9, X1, [X8 + 0x1E8]
	0x01DEF668 FMOV S0, 1
	0x01DEF66C BLR X9
	0x01DEF670 MOV X0, X19
	0x01DEF674 BL 0x1DF00A4
	0x01DEF678 TBZ X0, 0x0, 0x1DEF688
	0x01DEF67C LDP X20, X19, [X31 + 0x10]
	0x01DEF680 LDR X30, [X31], #0x20
	0x01DEF684 RET
	0x01DEF688 LDR X20, [X19 + 0x1F8]
	0x01DEF68C MOV X0, X19
	0x01DEF690 BL 0x1DEEF44
	0x01DEF694 CBZ X20, 0x1DEF6AC
	0x01DEF698 AND W1, W0, 0x1
	0x01DEF69C MOV X0, X20
	0x01DEF6A0 LDP X20, X19, [X31 + 0x10]
	0x01DEF6A4 LDR X30, [X31], #0x20
	0x01DEF6A8 B 0x1DF010C
	0x01DEF6AC BL 0x1C16F20
	0x01DEF6B0 STP D11, D10, [X31 - 0x50]!
	0x01DEF6B4 STP D9, D8, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 272
	002 Move [X31+112], D15
	003 Move [X31+120], D14
	004 Move [X31+128], D13
	005 Move [X31+136], D12
	006 Move [X31+144], D11
	007 Move [X31+152], D10
	008 Move [X31+160], D9
	009 Move [X31+168], D8
	010 Move [X31+176], X29
	011 Move [X31+192], X30
	012 Move [X31+200], X27
	013 Move [X31+208], X26
	014 Move [X31+216], X25
	015 Move [X31+224], X24
	016 Move [X31+232], X23
	017 Move [X31+240], X22
	018 Move [X31+248], X21
	019 Move [X31+256], X20
	020 Move [X31+264], X19
	021 Move X20, 0x25EA000
	022 Move W8, [X20+3284]
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {60}
	028 Move X0, 0x230A000
	029 Move X0, [X0+288]
	030 Call 0x1C17CF4
	031 Move X0, 0x230B000
	032 Move X0, [X0+40]
	033 Call 0x1C17CF4
	034 Move X0, 0x230B000
	035 Move X0, [X0+48]
	036 Call 0x1C17CF4
	037 Move X0, 0x230B000
	038 Move X0, [X0+56]
	039 Call 0x1C17CF4
	040 Move X0, 0x2305000
	041 Move X0, [X0+1496]
	042 Call 0x1C17CF4
	043 Move X0, 0x230B000
	044 Move X0, [X0+64]
	045 Call 0x1C17CF4
	046 Move X0, 0x230A000
	047 Move X0, [X0+3136]
	048 Call 0x1C17CF4
	049 Move X0, 0x2305000
	050 Move X0, [X0+1432]
	051 Call 0x1C17CF4
	052 Move X0, 0x230B000
	053 Move X0, [X0+72]
	054 Call 0x1C17CF4
	055 Move X0, 0x230B000
	056 Move X0, [X0+80]
	057 Call 0x1C17CF4
	058 Move W8, 1
	059 Move [X20+3284], W8
	060 NotImplemented "Instruction MOVI not yet implemented."
	061 Move [X31+92], V0
	062 Move [X31+64], V0
	063 Move [X31+72], V0
	064 Move [X31+184], X31
	065 Move X21, [X19+56]
	066 Move X0, X19
	067 Move X1, X31
	068 Call Component.get_transform, X0
	069 Compare X0, 0
	070 JumpIfEqual {441}
	071 Move X1, X31
	072 Call Transform.get_position, X0
	073 Move X0, X19
	074 Move X1, X31
	075 Move V8, V0
	076 Move V9, V1
	077 Move V10, V2
	078 Call Component.get_transform, X0
	079 Compare X0, 0
	080 JumpIfEqual {441}
	081 Move X22, 0x2305000
	082 Move X20, 0x230A000
	083 Move X22, [X22+1496]
	084 Move X20, [X20+3136]
	085 Move X1, X31
	086 Call Transform.get_rotation, X0
	087 Move X0, [X22]
	088 Move V11, V0
	089 Move V12, V1
	090 Move V13, V2
	091 Move W8, [X0+224]
	092 Move V14, V3
	093 Compare W8, 0
	094 JumpIfNotEqual {97}
	095 Call 0x1C17DFC
	096 Move X0, [X22]
	097 Move X8, [X20]
	098 Move X9, [X0+184]
	099 Add X20, X19, 72
	100 Move W10, [X8+224]
	101 Move W22, [X9]
	102 Compare W10, 0
	103 JumpIfNotEqual {106}
	104 Move X0, X8
	105 Call 0x1C17DFC
	106 Move X8, -19939328
	107 Move V7, [X8+188]
	108 Move X0, X20
	109 Move X1, X21
	110 Move V0, V8
	111 Move V1, V9
	112 Move V2, V10
	113 Move V3, V11
	114 Move V4, V12
	115 Move V5, V13
	116 Move V6, V14
	117 Move X2, X22
	118 Call MobDetectionUtil.GetContactPoints, X0, X1, X2, X3, V0, X4
	119 NotImplemented "Instruction MOVI not yet implemented."
	120 Move [X31+92], V0
	121 Move [X31+64], V0
	122 Move [X31+72], V0
	123 Move X21, [X20]
	124 Compare X21, 0
	125 JumpIfEqual {441}
	126 Move W24, [X21+24]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X25, 0x230B000
	129 Move X25, [X25+80]
	130 Move X0, [X25]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {136}
	134 Call 0x1C17DFC
	135 Move X0, [X25]
	136 Move X8, [X0+184]
	137 Move X27, 0x230B000
	138 Move X26, 0x230B000
	139 Move X22, [X8+8]
	140 Move X27, [X27+48]
	141 Move X26, [X26+40]
	142 Compare X22, 0
	143 JumpIfNotEqual {165}
	144 Move W8, [X0+224]
	145 Compare W8, 0
	146 JumpIfNotEqual {149}
	147 Call 0x1C17DFC
	148 Move X0, [X25]
	149 Move X9, 0x230B000
	150 Move X8, [X0+184]
	151 Move X9, [X9+56]
	152 Move X23, [X8]
	153 Move X0, [X9]
	154 Call 0x1C17F10
	155 Move X8, 0x230B000
	156 Move X8, [X8+72]
	157 Move X1, X23
	158 Move X3, X31
	159 Move X22, X0
	160 Move X2, [X8]
	161 Call Func`2<RaycastHit, Single>..ctor, X0, X1, X2
	162 Move X8, [X25]
	163 Move X8, [X8+184]
	164 Move [X8+8], X22
	165 Move X2, [X27]
	166 Move X0, X21
	167 Move X1, X22
	168 Call Enumerable.OrderBy, X0, X1
	169 Move X1, [X26]
	170 Add X8, X31, 16
	171 Call Enumerable.First, X0
	172 Move V0, [X31+16]
	173 Move V1, [X31+32]
	174 NotImplemented "Instruction LDUR not yet implemented."
	175 Add X0, X31, 64
	176 Move X1, X31
	177 Move [X31+64], V0
	178 Move [X31+72], V1
	179 Move [X31+92], V2
	180 Call RaycastHit.get_point, X0
	181 Move X0, [X19+40]
	182 Compare X0, 0
	183 JumpIfEqual {441}
	184 Move S1, [X19+84]
	185 Move S2, [X19+88]
	186 Move V0, [X19+80]
	187 Move X1, X31
	188 Call Transform.TransformPoint, X0, X1
	189 Move X0, [X19+32]
	190 Move [X19+92], S0
	191 Move [X19+100], S1
	192 Move [X19+100], S2
	193 Compare X0, 0
	194 JumpIfEqual {441}
	195 Move X1, X31
	196 Call Transform.get_position, X0
	197 Move V8, V0
	198 Move V9, V1
	199 Move V10, V2
	200 Move S0, [X19+92]
	201 Move S1, [X19+96]
	202 Move V2, [X19+100]
	203 Move X0, X31
	204 Subtract S11, S0, S8
	205 Subtract S12, S1, S9
	206 Subtract S13, S2, S10
	207 Call Time.get_deltaTime
	208 Multiply S1, S11, S0
	209 Multiply S2, S12, S0
	210 Multiply S0, S13, S0
	211 Move S3, 7
	212 Multiply S1, S1, S3
	213 Multiply S2, S2, S3
	214 Multiply S0, S0, S3
	215 Move X0, X19
	216 Add S8, S8, S1
	217 Add S9, S9, S2
	218 Add S10, S10, S0
	219 Call ArmTargetAnimator.get_centerPosition, X0
	220 Move X21, 0x25EA000
	221 Move W8, [X21+1925]
	222 Move V11, V0
	223 Move V12, V1
	224 Move V13, V2
	225 Compare W8, 0
	226 JumpIfNotEqual {232}
	227 Move X0, 0x2305000
	228 Move X0, [X0+1448]
	229 Call 0x1C17CF4
	230 Move W8, 1
	231 Move [X21+1925], W8
	232 Move X21, 0x2305000
	233 Move X21, [X21+1448]
	234 Subtract S11, S8, S11
	235 Subtract S12, S9, S12
	236 Subtract S13, S10, S13
	237 Move X0, [X21]
	238 Move W8, [X0+224]
	239 Compare W8, 0
	240 JumpIfNotEqual {242}
	241 Call 0x1C17DFC
	242 Multiply S0, S11, S11
	243 Multiply S1, S12, S12
	244 Move V2, [X19+48]
	245 Add S0, S0, S1
	246 Multiply S1, S13, S13
	247 Add S0, S1, S0
	248 NotImplemented "Instruction FSQRT not yet implemented."
	249 NotImplemented "Instruction FCMP not yet implemented."
	250 Move X0, X19
	251 Call ArmTargetAnimator.get_centerPosition, X0
	252 Move V3, [X19+48]
	253 NotImplemented "Instruction FDIV not yet implemented."
	254 NotImplemented "Instruction FDIV not yet implemented."
	255 NotImplemented "Instruction FDIV not yet implemented."
	256 Multiply S4, S4, S3
	257 Multiply S5, S5, S3
	258 Multiply S3, S6, S3
	259 Add S8, S0, S4
	260 Add S9, S1, S5
	261 Add S10, S2, S3
	262 Move X8, [X20]
	263 Compare X8, 0
	264 JumpIfEqual {441}
	265 Move W8, [X8+24]
	266 NotImplemented "Instruction CMP not yet implemented."
	267 Move X0, X19
	268 Move [X31+8], S10
	269 Move [X31+16], S9
	270 Move V10, V8
	271 Call ArmTargetAnimator.get_centerPosition, X0
	272 Move X20, 0x25EA000
	273 Move S15, [X19+92]
	274 Move S8, [X19+96]
	275 Move W8, [X20+2140]
	276 Move V9, [X19+100]
	277 Move V11, V0
	278 Move V12, V1
	279 Move V13, V2
	280 Compare W8, 0
	281 JumpIfNotEqual {287}
	282 Move X0, 0x2305000
	283 Move X0, [X0+1448]
	284 Call 0x1C17CF4
	285 Move W8, 1
	286 Move [X20+2140], W8
	287 Move X0, [X21]
	288 Subtract S15, S11, S15
	289 Subtract S11, S12, S8
	290 Subtract S8, S13, S9
	291 Move W8, [X0+224]
	292 Compare W8, 0
	293 JumpIfNotEqual {295}
	294 Call 0x1C17DFC
	295 Multiply S0, S15, S15
	296 Multiply S1, S11, S11
	297 Add S0, S0, S1
	298 Multiply S1, S8, S8
	299 Move V8, V10
	300 Move S10, [X31+8]
	301 Move S9, [X31+12]
	302 Add S0, S1, S0
	303 NotImplemented "Instruction FSQRT not yet implemented."
	304 NotImplemented "Instruction FCMP not yet implemented."
	305 Move S8, [X19+92]
	306 Move S9, [X19+96]
	307 Move V10, [X19+100]
	308 NotImplemented "Instruction CMP not yet implemented."
	309 Move S0, [X19+92]
	310 Move S1, [X19+96]
	311 Move V2, [X19+100]
	312 Move X8, -19939328
	313 Move V3, [X8+648]
	314 Subtract S4, S8, S0
	315 Subtract S5, S9, S1
	316 Subtract S6, S10, S2
	317 Multiply S4, S4, S4
	318 Multiply S5, S5, S5
	319 Add S4, S4, S5
	320 Multiply S5, S6, S6
	321 Add S4, S5, S4
	322 NotImplemented "Instruction FCMP not yet implemented."
	323 Move S3, [X19+104]
	324 Move S4, [X19+108]
	325 Move V5, [X19+112]
	326 Subtract S0, S3, S0
	327 Subtract S1, S4, S1
	328 Subtract S2, S5, S2
	329 Multiply S0, S0, S0
	330 Multiply S1, S1, S1
	331 Multiply S2, S2, S2
	332 Add S0, S0, S1
	333 Add S0, S2, S0
	334 Move S1, 0.25
	335 NotImplemented "Instruction FCMP not yet implemented."
	336 NotImplemented "Instruction LDUR not yet implemented."
	337 Move W9, [X19+100]
	338 Move X20, [X19+64]
	339 Add X0, X31, 64
	340 Move X1, X31
	341 Move [X19+104], X8
	342 Move [X19+112], W9
	343 Call RaycastHit.get_collider, X0
	344 Compare X0, 0
	345 JumpIfEqual {441}
	346 Move X8, 0x230A000
	347 Move X8, [X8+288]
	348 Add X1, X31, 184
	349 Move X2, [X8]
	350 Call 0x21A5990, X0, X1
	351 Move TEMP, X0
	352 And TEMP, TEMP, 1
	353 Compare TEMP, 1
	354 JumpIfNotEqual {401}
	355 Move X8, [X31+184]
	356 Compare X8, 0
	357 JumpIfEqual {441}
	358 Move X22, 0x2305000
	359 Move X22, [X22+1432]
	360 Move X21, [X8+32]
	361 Move X0, [X22]
	362 Move W9, [X0+224]
	363 Compare W9, 0
	364 JumpIfNotEqual {366}
	365 Call 0x1C17DFC
	366 Move X0, X21
	367 Move X1, X31
	368 Move X2, X31
	369 Call Object.op_Inequality, X0, X1
	370 Move TEMP, X0
	371 And TEMP, TEMP, 1
	372 Compare TEMP, 1
	373 JumpIfNotEqual {401}
	374 Move X8, [X31+184]
	375 Compare X8, 0
	376 JumpIfEqual {441}
	377 Move X8, [X8+32]
	378 Compare X8, 0
	379 JumpIfEqual {441}
	380 Move X0, [X22]
	381 Move X21, [X8+32]
	382 Move W9, [X0+224]
	383 Compare W9, 0
	384 JumpIfNotEqual {386}
	385 Call 0x1C17DFC
	386 Move X0, X21
	387 Move X1, X31
	388 Move X2, X31
	389 Call Object.op_Inequality, X0, X1
	390 Move TEMP, X0
	391 And TEMP, TEMP, 1
	392 Compare TEMP, 1
	393 JumpIfNotEqual {401}
	394 Move X8, [X31+184]
	395 Compare X8, 0
	396 JumpIfEqual {441}
	397 Move X8, [X8+32]
	398 Compare X8, 0
	399 JumpIfEqual {441}
	400 Move X20, [X8+32]
	401 Compare X20, 0
	402 JumpIfEqual {441}
	403 Move X8, -19939328
	404 Move S1, [X19+96]
	405 Move S2, [X19+100]
	406 Move V0, [X19+92]
	407 Move V3, [X8+780]
	408 Move X0, X20
	409 Move W1, W31
	410 Move X2, X31
	411 Call RandomSFX.Play, X0, X1, V0, X2
	412 Move X0, [X19+32]
	413 Compare X0, 0
	414 JumpIfEqual {441}
	415 Move V0, V8
	416 Move V1, V9
	417 Move V2, V10
	418 Move X1, X31
	419 Call Transform.set_position, X0, X1
	420 Move X20, [X31+256]
	421 Move X19, [X31+264]
	422 Move X22, [X31+240]
	423 Move X21, [X31+248]
	424 Move X24, [X31+224]
	425 Move X23, [X31+232]
	426 Move X26, [X31+208]
	427 Move X25, [X31+216]
	428 Move X30, [X31+192]
	429 Move X27, [X31+200]
	430 Move X29, [X31+176]
	431 Move D9, [X31+160]
	432 Move D8, [X31+168]
	433 Move D11, [X31+144]
	434 Move D10, [X31+152]
	435 Move D13, [X31+128]
	436 Move D12, [X31+136]
	437 Move D15, [X31+112]
	438 Move D14, [X31+120]
	439 Add X31, X31, 272
	440 Return 
	441 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01DEF980 CBZ W8, 0x1DEF9E8
	0x01DEF984 STRB W31, [X19 + 0x58]
	0x01DEF988 LDR X0, [X19 + 0x40]
	0x01DEF98C CBZ X0, 0x1DEF9C8
	0x01DEF990 LDRB W8, [X0 + 0x60]
	0x01DEF994 TBNZ X8, 0x1, 0x1DEF9C8
	0x01DEF998 MOV X1, X31
	0x01DEF99C BL 0x1E93668
	0x01DEF9A0 TBZ X0, 0x0, 0x1DEF9C8
	0x01DEF9A4 MOV X0, X19
	0x01DEF9A8 BL 0x1DEFB40
	0x01DEF9AC SUB W1, W0, W20
	0x01DEF9B0 MOV X0, X19
	0x01DEF9B4 BL 0x1DF49EC
	0x01DEF9B8 MOV X0, X19
	0x01DEF9BC BL 0x1DEFB40
	0x01DEF9C0 CMP W0, 0x0
	0x01DEF9C4 B.LE 0x1DEFAD0
	0x01DEF9C8 LDR X0, [X19 + 0xC8]
	0x01DEF9CC CBZ X0, 0x1DEFB3C
	0x01DEF9D0 LDR X8, [X0]
	0x01DEF9D4 LDP X20, X19, [X31 + 0x10]
	0x01DEF9D8 LDR X2, [X8 + 0x228]
	0x01DEF9DC LDR X1, [X8 + 0x230]
	0x01DEF9E0 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move S0, W31
	005 Move S1, 1
	006 Move S2, 1
	007 Move S3, 1
	008 Move X0, X31
	009 Call Gizmos.set_color, X0
	010 Move X0, X19
	011 Move X1, X31
	012 Call Component.get_transform, X0
	013 Compare X0, 0
	014 JumpIfEqual {30}
	015 Move X1, X31
	016 Call Transform.get_position, X0
	017 Move V3, [X19+48]
	018 Move X0, X31
	019 Call Gizmos.DrawWireSphere, X0, V0
	020 Move X8, -19939328
	021 Move S0, [X19+92]
	022 Move S1, [X19+96]
	023 Move V2, [X19+100]
	024 Move V3, [X8+512]
	025 Move X0, X31
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Call Gizmos.DrawSphere, X0, V0
	029 Return 
	030 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DEF9E4 BR X2
	0x01DEF9E8 ADRP X21, 0x2307000
	0x01DEF9EC LDR X21, [X21 + 0xA78]
	0x01DEF9F0 LDR X0, [X21]
	0x01DEF9F4 LDR W8, [X0 + 0xE0]
	0x01DEF9F8 CBNZ W8, 0x1DEFA00
	0x01DEF9FC BL 0x1C16DFC
	0x01DEFA00 MOV X0, X19
	0x01DEFA04 MOV X1, X31
	0x01DEFA08 BL 0x1E77B08
	0x01DEFA0C LDR X0, [X19 + 0x38]
	0x01DEFA10 CBZ X0, 0x1DEFB3C
	0x01DEFA14 MOV X1, X31
	0x01DEFA18 BL 0x1E9E538
	0x01DEFA1C CMP W0, 0x4
	0x01DEFA20 B.NE 0x1DEFA30
	0x01DEFA24 LDP X20, X19, [X31 + 0x10]
	0x01DEFA28 LDP X30, X21, [X31], #0x20
	0x01DEFA2C RET
	0x01DEFA30 LDR X0, [X19 + 0x40]
	0x01DEFA34 CBZ X0, 0x1DEFB3C
	0x01DEFA38 MOV X1, X31
	0x01DEFA3C BL 0x1E94078
	0x01DEFA40 ANDS W31, W0, 0x7
	0x01DEFA44 B.EQ 0x1DEFA98
	0x01DEFA48 LDR X8, [X19 + 0x38]
	0x01DEFA4C CBZ X8, 0x1DEFB3C
	0x01DEFA50 LDR X0, [X8 + 0x50]
	0x01DEFA54 CBZ X0, 0x1DEFB3C
	0x01DEFA58 MOV X1, X31
	0x01DEFA5C BL 0x1EC4D00
	0x01DEFA60 TBZ X0, 0x0, 0x1DEF988
	0x01DEFA64 LDR X8, [X19 + 0x38]
	0x01DEFA68 CBZ X8, 0x1DEFB3C
	0x01DEFA6C LDR X0, [X8 + 0x50]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x25EA000
	007 Move X21, 0x230B000
	008 Move X20, 0x230B000
	009 Move W8, [X22+3285]
	010 Move X21, [X21+104]
	011 Move X20, [X20+112]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x230B000
	018 Move X0, [X0+112]
	019 Call 0x1C17CF4
	020 Move X0, 0x230B000
	021 Move X0, [X0+104]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3285], W8
	025 Move X8, -19927040
	026 Move V0, [X8+1200]
	027 Move [X19+48], D0
	028 Move X0, [X21]
	029 Call 0x1C17F10
	030 Move X2, [X20]
	031 Move W1, 8
	032 Move X20, X0
	033 Call List`1<RaycastHit>..ctor, X0, X1
	034 Move [X19+72], X20
	035 Move X0, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X1, X31
	041 Move X30, [X31+48]
	042 Call MonoBehaviour..ctor, X0
	043 Return 

