Type: AnimalCompany.Rotater

Method: System.Void Update()

Disassembly:
	0x01D7D260 STRB W8, [X26 + 0x787]
	0x01D7D264 LDR X0, [X23]
	0x01D7D268 LDR W8, [X0 + 0xE0]
	0x01D7D26C CBNZ W8, 0x1D7D278
	0x01D7D270 BL 0x1C16DFC
	0x01D7D274 LDR X0, [X23]
	0x01D7D278 LDR X8, [X0 + 0xB8]
	0x01D7D27C LDR X8, [X8]
	0x01D7D280 CBZ X8, 0x1D7D9C4
	0x01D7D284 LDR X8, [X8 + 0xE0]
	0x01D7D288 CBZ X8, 0x1D7D9C4
	0x01D7D28C CBZ X21, 0x1D7D9C4
	0x01D7D290 LDR X22, [X8 + 0x70]
	0x01D7D294 CBZ X22, 0x1D7D2AC
	0x01D7D298 LDR X8, [X21]
	0x01D7D29C MOV X0, X22
	0x01D7D2A0 LDR X1, [X8 + 0x40]
	0x01D7D2A4 BL 0x1C16E00
	0x01D7D2A8 CBZ X0, 0x1D7D9CC
	0x01D7D2AC LDR W8, [X21 + 0x18]
	0x01D7D2B0 CBZ W8, 0x1D7D9C8
	0x01D7D2B4 STR X22, [X21 + 0x20]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X1, X31
	007 Move X19, X0
	008 Call Component.get_transform, X0
	009 Move S8, [X19+32]
	010 Move S9, [X19+36]
	011 Move V10, [X19+40]
	012 Move X19, X0
	013 Move X0, X31
	014 Call Time.get_deltaTime
	015 Compare X19, 0
	016 JumpIfEqual {29}
	017 Multiply S2, S10, S0
	018 Multiply S1, S9, S0
	019 Multiply S0, S8, S0
	020 Move X0, X19
	021 Move X30, [X31+32]
	022 Move X19, [X31+40]
	023 Move D9, [X31+16]
	024 Move D8, [X31+24]
	025 Move X1, X31
	026 Move V10, [X31+48]
	027 Call Transform.Rotate, X0, X1
	028 Return 
	029 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01D7D2B8 LDRB W8, [X26 + 0x787]
	0x01D7D2BC CBNZ W8, 0x1D7D2D4
	0x01D7D2C0 ADRP X0, 0x2376000
	0x01D7D2C4 LDR X0, [X0 + 0x648]

ISIL:
	001 Move X1, X31
	002 Move [X0+32], X31
	003 Move [X0+40], W31
	004 Call MonoBehaviour..ctor, X0
	005 Return 

