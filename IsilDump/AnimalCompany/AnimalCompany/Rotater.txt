Type: AnimalCompany.Rotater

Method: System.Void Update()

Disassembly:
	0x01C993A4 LDR X21, [X23]
	0x01C993A8 MOV X0, X20
	0x01C993AC MOV X1, X21
	0x01C993B0 BL 0x1B6E8FC
	0x01C993B4 CBNZ X0, 0x1C993C8
	0x01C993B8 MOV X0, X20
	0x01C993BC MOV X1, X21
	0x01C993C0 BL 0x1B6ECDC
	0x01C993C4 STR X31, [X22 + 0x1B0]
	0x01C993C8 STR X31, [X19 + 0xC0]
	0x01C993CC LDP X20, X19, [X31 + 0x20]
	0x01C993D0 LDP X22, X21, [X31 + 0x10]
	0x01C993D4 LDP X30, X23, [X31], #0x30
	0x01C993D8 RET
	0x01C993DC BL 0x1B6EA1C
	0x01C993E0 STP X30, X23, [X31 - 0x30]!
	0x01C993E4 STP X22, X21, [X31 + 0x10]
	0x01C993E8 STP X20, X19, [X31 + 0x20]
	0x01C993EC ADRP X20, 0x258A000
	0x01C993F0 LDRB W8, [X20 + 0x3E3]
	0x01C993F4 MOV X19, X0
	0x01C993F8 TBNZ X8, 0x0, 0x1C99440

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X1, X31
	007 Move X19, X0
	008 Call Component.get_transform, X0
	009 Move S8, [X19+32]
	010 Move S9, [X19+36]
	011 Move V10, [X19+40]
	012 Move X19, X0
	013 Move X0, X31
	014 Call Time.get_deltaTime
	015 Compare X19, 0
	016 JumpIfEqual {29}
	017 Multiply S2, S10, S0
	018 Multiply S1, S9, S0
	019 Multiply S0, S8, S0
	020 Move X0, X19
	021 Move X30, [X31+32]
	022 Move X19, [X31+40]
	023 Move D9, [X31+16]
	024 Move D8, [X31+24]
	025 Move X1, X31
	026 Move V10, [X31+48]
	027 Call Transform.Rotate, X0, X1
	028 Return 
	029 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01C993FC ADRP X0, 0x22B5000
	0x01C99400 LDR X0, [X0 + 0x170]
	0x01C99404 BL 0x1B6E7F0
	0x01C99408 ADRP X0, 0x22B5000

ISIL:
	001 Move X1, X31
	002 Move [X0+32], X31
	003 Move [X0+40], W31
	004 Call MonoBehaviour..ctor, X0
	005 Return 

