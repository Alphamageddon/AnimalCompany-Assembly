Type: AnimalCompany.ApplyLogSettingsAction

Method: System.Void .ctor(AnimalCompany.LogLevel logLevel, AnimalCompany.LogChannel logChannelFlags, AnimalCompany.LogLevel remoteLogLevel, AnimalCompany.LogChannel remoteLogChannelFlags)

Disassembly:
	0x01D37C60 BL 0x3C35934
	0x01D37C64 CBZ X20, 0x1D37CAC
	0x01D37C68 MOV X0, X20
	0x01D37C6C MOV X1, X31
	0x01D37C70 BL 0x3C356F8
	0x01D37C74 MOV X21, X0
	0x01D37C78 MOV X0, X19
	0x01D37C7C MOV X1, X31
	0x01D37C80 BL 0x3C32E90
	0x01D37C84 CBZ X21, 0x1D37CAC
	0x01D37C88 MOV X1, X0
	0x01D37C8C MOV X0, X21
	0x01D37C90 MOV X2, X31
	0x01D37C94 BL 0x3C3FD20
	0x01D37C98 MOV X0, X20
	0x01D37C9C LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W22, W1
	008 Move X1, X31
	009 Move W19, W4
	010 Move W20, W3
	011 Move W21, W2
	012 Move X23, X0
	013 Call Object..ctor, X0
	014 Move [X23+20], W22
	015 Move [X23+24], W21
	016 Move [X23+28], W20
	017 Move [X23+32], W19
	018 Move X20, [X31+32]
	019 Move X19, [X31+40]
	020 Move X22, [X31+16]
	021 Move X21, [X31+24]
	022 Move X30, [X31+48]
	023 Move X23, [X31+56]
	024 Return 

Method: System.Void Execute(AnimalCompany.AppState state)

Disassembly:
	0x01D37CA0 LDP X22, X21, [X31 + 0x10]
	0x01D37CA4 LDR X30, [X31], #0x30
	0x01D37CA8 RET
	0x01D37CAC BL 0x1C16F20
	0x01D37CB0 STP X30, X23, [X31 - 0x30]!
	0x01D37CB4 STP X22, X21, [X31 + 0x10]
	0x01D37CB8 STP X20, X19, [X31 + 0x20]
	0x01D37CBC ADRP X23, 0x26A1000
	0x01D37CC0 ADRP X22, 0x23BC000
	0x01D37CC4 ADRP X21, 0x23BC000
	0x01D37CC8 ADRP X20, 0x23BC000
	0x01D37CCC LDRB W8, [X23 + 0x6F8]
	0x01D37CD0 LDR X22, [X22 + 0x978]
	0x01D37CD4 LDR X21, [X21 + 0x980]
	0x01D37CD8 LDR X20, [X20 + 0x898]
	0x01D37CDC MOV X19, X0
	0x01D37CE0 TBNZ X8, 0x0, 0x1D37D10
	0x01D37CE4 ADRP X0, 0x23BC000
	0x01D37CE8 LDR X0, [X0 + 0x898]
	0x01D37CEC BL 0x1C16CF4
	0x01D37CF0 ADRP X0, 0x23BC000
	0x01D37CF4 LDR X0, [X0 + 0x978]
	0x01D37CF8 BL 0x1C16CF4
	0x01D37CFC ADRP X0, 0x23BC000
	0x01D37D00 LDR X0, [X0 + 0x980]
	0x01D37D04 BL 0x1C16CF4
	0x01D37D08 MOVZ W8, 0x1
	0x01D37D0C STRB W8, [X23 + 0x6F8]
	0x01D37D10 ADRP X8, 0xFFFFFFFFFEDB4000
	0x01D37D14 LDR V0, [X8 + 0xD4]
	0x01D37D18 STR V0, [X19 + 0x2]
	0x01D37D1C LDR X9, [X22]
	0x01D37D20 LDR X8, [X21]
	0x01D37D24 STP X9, X8, [X19 + 0x30]
	0x01D37D28 LDR X0, [X20]
	0x01D37D2C LDR W8, [X0 + 0xE0]
	0x01D37D30 CBNZ W8, 0x1D37D38
	0x01D37D34 BL 0x1C16DFC
	0x01D37D38 ADRP X21, 0x26A1000
	0x01D37D3C LDRB W8, [X21 + 0x78B]
	0x01D37D40 CBNZ W8, 0x1D37D58
	0x01D37D44 ADRP X0, 0x23BC000
	0x01D37D48 LDR X0, [X0 + 0x898]
	0x01D37D4C BL 0x1C16CF4
	0x01D37D50 MOVZ W8, 0x1
	0x01D37D54 STRB W8, [X21 + 0x78B]
	0x01D37D58 LDR X0, [X20]
	0x01D37D5C LDR W8, [X0 + 0xE0]
	0x01D37D60 CBNZ W8, 0x1D37D6C
	0x01D37D64 BL 0x1C16DFC
	0x01D37D68 LDR X0, [X20]
	0x01D37D6C LDR X8, [X0 + 0xB8]
	0x01D37D70 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x26A2000
	007 Move W8, [X21+1768]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x23BD000
	015 Move X0, [X0+2312]
	016 Call 0x1C17CF4
	017 Move X0, 0x23BD000
	018 Move X0, [X0+2320]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1768], W8
	022 Compare X20, 0
	023 JumpIfEqual {70}
	024 Move X8, [X20+168]
	025 Compare X8, 0
	026 JumpIfEqual {70}
	027 Move X0, [X8+72]
	028 Compare X0, 0
	029 JumpIfEqual {70}
	030 Move X21, 0x23BD000
	031 Move X21, [X21+2320]
	032 Move W1, [X19+20]
	033 Move X2, [X21]
	034 Call StatePrimitive`1<Int32Enum>.set_value, X0, X1
	035 Move X8, [X20+168]
	036 Compare X8, 0
	037 JumpIfEqual {70}
	038 Move X0, [X8+80]
	039 Compare X0, 0
	040 JumpIfEqual {70}
	041 Move X22, 0x23BD000
	042 Move X22, [X22+2312]
	043 Move W1, [X19+24]
	044 Move X2, [X22]
	045 Call StatePrimitive`1<Int32Enum>.set_value, X0, X1
	046 Move X8, [X20+168]
	047 Compare X8, 0
	048 JumpIfEqual {70}
	049 Move X0, [X8+88]
	050 Compare X0, 0
	051 JumpIfEqual {70}
	052 Move W1, [X19+28]
	053 Move X2, [X21]
	054 Call StatePrimitive`1<Int32Enum>.set_value, X0, X1
	055 Move X8, [X20+168]
	056 Compare X8, 0
	057 JumpIfEqual {70}
	058 Move X0, [X8+96]
	059 Compare X0, 0
	060 JumpIfEqual {70}
	061 Move W1, [X19+32]
	062 Move X2, [X22]
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move X30, [X31+48]
	068 Call StatePrimitive`1<Int32Enum>.set_value, X0, X1
	069 Return 
	070 Call 0x1C17F20

