Type: AnimalCompany.ApplyLogSettingsAction

Method: System.Void .ctor(AnimalCompany.LogLevel logLevel, AnimalCompany.LogChannel logChannelFlags, AnimalCompany.LogLevel remoteLogLevel, AnimalCompany.LogChannel remoteLogChannelFlags)

Disassembly:
	0x01C8E84C MOV X19, X0
	0x01C8E850 BL 0x32276F8
	0x01C8E854 LDR X8, [X20]
	0x01C8E858 LDR X8, [X8 + 0xB8]
	0x01C8E85C STR X19, [X8]
	0x01C8E860 LDP X20, X19, [X31 + 0x10]
	0x01C8E864 LDR X30, [X31], #0x20
	0x01C8E868 RET
	0x01C8E86C MOV X1, X31
	0x01C8E870 B 0x32276F8
	0x01C8E874 B 0x1C8E878
	0x01C8E878 SUB X31, X31, 0x90
	0x01C8E87C STP X30, X21, [X31 + 0x70]
	0x01C8E880 STP X20, X19, [X31 + 0x80]
	0x01C8E884 ADRP X20, 0x2595000
	0x01C8E888 ADRP X19, 0x22BF000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W22, W1
	008 Move X1, X31
	009 Move W19, W4
	010 Move W20, W3
	011 Move W21, W2
	012 Move X23, X0
	013 Call Object..ctor, X0
	014 Move [X23+20], W22
	015 Move [X23+24], W21
	016 Move [X23+28], W20
	017 Move [X23+32], W19
	018 Move X20, [X31+32]
	019 Move X19, [X31+40]
	020 Move X22, [X31+16]
	021 Move X21, [X31+24]
	022 Move X30, [X31+48]
	023 Move X23, [X31+56]
	024 Return 

Method: System.Void Execute(AnimalCompany.AppState state)

Disassembly:
	0x01C8E88C LDRB W8, [X20 + 0x3C3]
	0x01C8E890 LDR X19, [X19 + 0x8F0]
	0x01C8E894 TBNZ X8, 0x0, 0x1C8E8D0
	0x01C8E898 ADRP X0, 0x22BF000
	0x01C8E89C LDR X0, [X0 + 0x8F8]
	0x01C8E8A0 BL 0x1B6E7F0
	0x01C8E8A4 ADRP X0, 0x22BF000
	0x01C8E8A8 LDR X0, [X0 + 0x900]
	0x01C8E8AC BL 0x1B6E7F0
	0x01C8E8B0 ADRP X0, 0x22BF000
	0x01C8E8B4 LDR X0, [X0 + 0x908]
	0x01C8E8B8 BL 0x1B6E7F0
	0x01C8E8BC ADRP X0, 0x22BF000
	0x01C8E8C0 LDR X0, [X0 + 0x8F0]
	0x01C8E8C4 BL 0x1B6E7F0
	0x01C8E8C8 MOVZ W8, 0x1
	0x01C8E8CC STRB W8, [X20 + 0x3C3]
	0x01C8E8D0 LDR X0, [X19]
	0x01C8E8D4 MOVI V0.2D, 0x0
	0x01C8E8D8 STP V0, V0, [X31 + 0x50]
	0x01C8E8DC STP V0, V0, [X31 + 0x30]
	0x01C8E8E0 STR V0, [X31 + 0x2]
	0x01C8E8E4 ADRP X21, 0x22BF000
	0x01C8E8E8 ADRP X19, 0x22BF000
	0x01C8E8EC ADRP X20, 0x22BF000
	0x01C8E8F0 LDR W8, [X0 + 0xE0]
	0x01C8E8F4 LDR X21, [X21 + 0x8F8]
	0x01C8E8F8 LDR X19, [X19 + 0x900]
	0x01C8E8FC LDR X20, [X20 + 0x908]
	0x01C8E900 CBNZ W8, 0x1C8E908
	0x01C8E904 BL 0x1B6E8F8
	0x01C8E908 LDR X0, [X21]
	0x01C8E90C ADD X8, X31, 0x8
	0x01C8E910 BL 0x23D1690
	0x01C8E914 LDUR V0, [X31 + 0x8]
	0x01C8E918 LDR X9, [X31 + 0x18]
	0x01C8E91C LDR X2, [X19]
	0x01C8E920 ADD X8, X31, 0x20
	0x01C8E924 ORR X19, X8, 0xF
	0x01C8E928 MOVN W10, 0x0
	0x01C8E92C ADD X1, X31, 0x20
	0x01C8E930 MOV X0, X19
	0x01C8E934 STUR V0, [X31 + 0x28]
	0x01C8E938 STR X9, [X31 + 0x38]
	0x01C8E93C STR W10, [X31 + 0x20]
	0x01C8E940 BL 0x2020904
	0x01C8E944 LDR X1, [X20]
	0x01C8E948 MOV X0, X19
	0x01C8E94C BL 0x23D16A4
	0x01C8E950 LDP X20, X19, [X31 + 0x80]
	0x01C8E954 LDP X30, X21, [X31 + 0x70]
	0x01C8E958 ADD X31, X31, 0x90
	0x01C8E95C RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2596000
	007 Move W8, [X21+920]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x22C0000
	015 Move X0, [X0+1960]
	016 Call 0x1B6F7F0
	017 Move X0, 0x22C0000
	018 Move X0, [X0+1968]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X21+920], W8
	022 Compare X20, 0
	023 JumpIfEqual {70}
	024 Move X8, [X20+184]
	025 Compare X8, 0
	026 JumpIfEqual {70}
	027 Move X0, [X8+72]
	028 Compare X0, 0
	029 JumpIfEqual {70}
	030 Move X21, 0x22C0000
	031 Move X21, [X21+1968]
	032 Move W1, [X19+20]
	033 Move X2, [X21]
	034 Call StatePrimitive`1<Int32Enum>.set_value, X0, X1
	035 Move X8, [X20+184]
	036 Compare X8, 0
	037 JumpIfEqual {70}
	038 Move X0, [X8+80]
	039 Compare X0, 0
	040 JumpIfEqual {70}
	041 Move X22, 0x22C0000
	042 Move X22, [X22+1960]
	043 Move W1, [X19+24]
	044 Move X2, [X22]
	045 Call StatePrimitive`1<Int32Enum>.set_value, X0, X1
	046 Move X8, [X20+184]
	047 Compare X8, 0
	048 JumpIfEqual {70}
	049 Move X0, [X8+88]
	050 Compare X0, 0
	051 JumpIfEqual {70}
	052 Move W1, [X19+28]
	053 Move X2, [X21]
	054 Call StatePrimitive`1<Int32Enum>.set_value, X0, X1
	055 Move X8, [X20+184]
	056 Compare X8, 0
	057 JumpIfEqual {70}
	058 Move X0, [X8+96]
	059 Compare X0, 0
	060 JumpIfEqual {70}
	061 Move W1, [X19+32]
	062 Move X2, [X22]
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move X30, [X31+48]
	068 Call StatePrimitive`1<Int32Enum>.set_value, X0, X1
	069 Return 
	070 Call 0x1B6FA1C

