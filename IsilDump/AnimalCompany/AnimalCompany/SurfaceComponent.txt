Type: AnimalCompany.SurfaceComponent

Method: System.Void OnValidate()

Disassembly:
	0x01E03F88 BL 0x1C16F10

ISIL:
	001 Return 

Method: System.Void OnEnable()

Disassembly:
	0x01E03F8C MOV X1, X31

ISIL:
No ISIL was generated
Method: System.Void OnDisable()

Disassembly:
	0x01E040D0 BL 0x1C16CF4

ISIL:
	001 Return 

Method: System.Void ApplySurface()

Disassembly:
	0x01E03F90 MOV X21, X0
	0x01E03F94 BL 0x33BDD8C
	0x01E03F98 STR W31, [X21 + 0x10]
	0x01E03F9C STP X20, X19, [X21 + 0x20]
	0x01E03FA0 MOV X0, X21
	0x01E03FA4 LDP X20, X19, [X31 + 0x20]
	0x01E03FA8 LDP X22, X21, [X31 + 0x10]
	0x01E03FAC LDR X30, [X31], #0x30
	0x01E03FB0 RET
	0x01E03FB4 STR X30, [X31 - 0x20]!
	0x01E03FB8 STP X20, X19, [X31 + 0x10]
	0x01E03FBC MOV W19, W1
	0x01E03FC0 MOV X1, X31
	0x01E03FC4 MOV X20, X0
	0x01E03FC8 BL 0x33BDD8C
	0x01E03FCC STR W19, [X20 + 0x10]
	0x01E03FD0 LDP X20, X19, [X31 + 0x10]
	0x01E03FD4 LDR X30, [X31], #0x20
	0x01E03FD8 RET
	0x01E03FDC STR X30, [X31 - 0x30]!
	0x01E03FE0 STP X22, X21, [X31 + 0x10]
	0x01E03FE4 STP X20, X19, [X31 + 0x20]
	0x01E03FE8 ADRP X21, 0x25D5000
	0x01E03FEC ADRP X22, 0x22F6000
	0x01E03FF0 LDRB W8, [X21 + 0xD8B]
	0x01E03FF4 LDR X22, [X22 + 0x870]
	0x01E03FF8 MOV X19, X1
	0x01E03FFC MOV X20, X0
	0x01E04000 TBNZ X8, 0x0, 0x1E04018
	0x01E04004 ADRP X0, 0x22F5000
	0x01E04008 LDR X0, [X0 + 0x870]
	0x01E0400C BL 0x1C16CF4
	0x01E04010 MOVZ W8, 0x1
	0x01E04014 STRB W8, [X21 + 0xD8B]
	0x01E04018 LDR X0, [X22]
	0x01E0401C BL 0x1C16F10
	0x01E04020 MOV X1, X31
	0x01E04024 MOV X21, X0
	0x01E04028 BL 0x33BDD8C
	0x01E0402C STR W31, [X21 + 0x10]
	0x01E04030 STP X19, X20, [X21 + 0x20]
	0x01E04034 MOV X0, X21
	0x01E04038 LDP X20, X19, [X31 + 0x20]
	0x01E0403C LDP X22, X21, [X31 + 0x10]
	0x01E04040 LDR X30, [X31], #0x30
	0x01E04044 RET
	0x01E04048 STR X30, [X31 - 0x20]!
	0x01E0404C STP X20, X19, [X31 + 0x10]
	0x01E04050 MOV W19, W1
	0x01E04054 MOV X1, X31
	0x01E04058 MOV X20, X0
	0x01E0405C BL 0x33BDD8C
	0x01E04060 STR W19, [X20 + 0x10]
	0x01E04064 LDP X20, X19, [X31 + 0x10]
	0x01E04068 LDR X30, [X31], #0x20
	0x01E0406C RET
	0x01E04070 STR X30, [X31 - 0x40]!
	0x01E04074 STP X24, X23, [X31 + 0x10]
	0x01E04078 STP X22, X21, [X31 + 0x20]
	0x01E0407C STP X20, X19, [X31 + 0x30]
	0x01E04080 ADRP X23, 0x25D4000
	0x01E04084 ADRP X24, 0x22F5000
	0x01E04088 ADRP X20, 0x22F5000
	0x01E0408C ADRP X22, 0x22F5000
	0x01E04090 ADRP X21, 0x22F5000
	0x01E04094 LDRB W8, [X23 + 0xD8C]
	0x01E04098 LDR X24, [X24 + 0x878]
	0x01E0409C LDR X20, [X20 + 0x880]
	0x01E040A0 LDR X22, [X22 + 0x888]
	0x01E040A4 LDR X21, [X21 + 0x890]
	0x01E040A8 MOV X19, X0
	0x01E040AC TBNZ X8, 0x0, 0x1E040E8
	0x01E040B0 ADRP X0, 0x22F5000
	0x01E040B4 LDR X0, [X0 + 0x888]
	0x01E040B8 BL 0x1C16CF4
	0x01E040BC ADRP X0, 0x22F5000
	0x01E040C0 LDR X0, [X0 + 0x880]
	0x01E040C4 BL 0x1C16CF4
	0x01E040C8 ADRP X0, 0x22F5000
	0x01E040CC LDR X0, [X0 + 0x878]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x25D6000
	007 Move X21, 0x22F1000
	008 Move W8, [X20+3453]
	009 Move X21, [X21+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x22F7000
	016 Move X0, [X0+1952]
	017 Call 0x1C17CF4
	018 Move X0, 0x22F1000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move X0, 0x22F7000
	022 Move X0, [X0+1960]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3453], W8
	026 Move X0, [X21]
	027 Move [X31+8], X31
	028 Move X20, [X19+32]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {94}
	041 Move X8, [X19+32]
	042 Compare X8, 0
	043 JumpIfEqual {94}
	044 Move X9, 0x22F6000
	045 Move X9, [X9+1960]
	046 Move X10, [X8]
	047 Move X9, [X9]
	048 Move W12, [X10+304]
	049 Move W11, [X9+304]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X10, [X10+200]
	052 Add X10, X10, X11
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CSEL not yet implemented."
	056 Move X8, 0x22F6000
	057 Move X8, [X8+1952]
	058 Add X1, X31, 8
	059 Move X0, X19
	060 Move X2, [X8]
	061 Call 0x21A5990, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {94}
	066 Move X0, [X31+8]
	067 Compare X0, 0
	068 JumpIfEqual {100}
	069 Move X1, X31
	070 Call Renderer.get_sharedMaterial, X0
	071 Compare X22, 0
	072 JumpIfEqual {100}
	073 Move X19, X0
	074 Move X0, [X21]
	075 Move X20, [X22+64]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X0, X19
	081 Move X1, X20
	082 Move X2, X31
	083 Call Object.op_Equality, X0, X1
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfEqual {94}
	088 Move X0, [X31+8]
	089 Compare X0, 0
	090 JumpIfEqual {100}
	091 Move X1, [X22+64]
	092 Move X2, X31
	093 Call Renderer.set_sharedMaterial, X0, X1
	094 Move X20, [X31+32]
	095 Move X19, [X31+40]
	096 Move X22, [X31+16]
	097 Move X21, [X31+24]
	098 Move X30, [X31+48]
	099 Return 
	100 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01E040D4 ADRP X0, 0x22F5000
	0x01E040D8 LDR X0, [X0 + 0x890]
	0x01E040DC BL 0x1C16CF4
	0x01E040E0 MOVZ W8, 0x1
	0x01E040E4 STRB W8, [X23 + 0xD8C]
	0x01E040E8 LDR X0, [X24]
	0x01E040EC BL 0x1C16F10
	0x01E040F0 LDR X1, [X20]
	0x01E040F4 MOV X20, X0
	0x01E040F8 BL 0x301B7C4
	0x01E040FC STR X20, [X19 + 0x20]
	0x01E04100 LDR X0, [X22]
	0x01E04104 MOVZ W1, 0x3
	0x01E04108 BL 0x1C16D6C
	0x01E0410C LDR X1, [X21]
	0x01E04110 MOV X2, X31
	0x01E04114 MOV X20, X0
	0x01E04118 BL 0x32C5BD8
	0x01E0411C STR X20, [X19 + 0x78]
	0x01E04120 MOV X0, X19
	0x01E04124 LDP X20, X19, [X31 + 0x30]
	0x01E04128 LDP X22, X21, [X31 + 0x20]
	0x01E0412C LDP X24, X23, [X31 + 0x10]
	0x01E04130 MOV X1, X31
	0x01E04134 LDR X30, [X31], #0x40
	0x01E04138 B 0x3C36C30
	0x01E0413C STR X30, [X31 - 0x10]!
	0x01E04140 LDR X8, [X0 + 0x10]
	0x01E04144 CBZ X8, 0x1E04158
	0x01E04148 LDR X1, [X0 + 0x18]
	0x01E0414C MOV X0, X8
	0x01E04150 LDR X30, [X31], #0x10
	0x01E04154 B 0x1E03F48
	0x01E04158 BL 0x1C16F20
	0x01E0415C MOV X1, X31
	0x01E04160 B 0x33BDD8C
	0x01E04164 STR X30, [X31 - 0x10]!
	0x01E04168 LDR X8, [X0 + 0x18]
	0x01E0416C CBZ X8, 0x1E04180
	0x01E04170 LDR X1, [X0 + 0x10]
	0x01E04174 MOV X0, X8
	0x01E04178 LDR X30, [X31], #0x10
	0x01E0417C B 0x1E03FDC
	0x01E04180 BL 0x1C16F20
	0x01E04184 RET
	0x01E04188 STR X30, [X31 - 0x40]!
	0x01E0418C STP X24, X23, [X31 + 0x10]
	0x01E04190 STP X22, X21, [X31 + 0x20]
	0x01E04194 STP X20, X19, [X31 + 0x30]
	0x01E04198 ADRP X20, 0x25D4000
	0x01E0419C LDRB W8, [X20 + 0xD8D]
	0x01E041A0 MOV X19, X0
	0x01E041A4 TBNZ X8, 0x0, 0x1E041EC
	0x01E041A8 ADRP X0, 0x22EF000
	0x01E041AC LDR X0, [X0 + 0x958]
	0x01E041B0 BL 0x1C16CF4
	0x01E041B4 ADRP X0, 0x22F5000
	0x01E041B8 LDR X0, [X0 + 0x898]
	0x01E041BC BL 0x1C16CF4
	0x01E041C0 ADRP X0, 0x22F5000
	0x01E041C4 LDR X0, [X0 + 0x8A0]
	0x01E041C8 BL 0x1C16CF4
	0x01E041CC ADRP X0, 0x22F5000
	0x01E041D0 LDR X0, [X0 + 0x8A8]
	0x01E041D4 BL 0x1C16CF4
	0x01E041D8 ADRP X0, 0x22F5000
	0x01E041DC LDR X0, [X0 + 0x8B0]
	0x01E041E0 BL 0x1C16CF4
	0x01E041E4 MOVZ W8, 0x1
	0x01E041E8 STRB W8, [X20 + 0xD8D]
	0x01E041EC LDR W8, [X19 + 0x10]
	0x01E041F0 LDR X23, [X19 + 0x20]
	0x01E041F4 CMP W8, 0x1
	0x01E041F8 B.EQ 0x1E04238
	0x01E041FC CBNZ W8, 0x1E04334
	0x01E04200 MOVN W8, 0x0
	0x01E04204 STR W8, [X19 + 0x10]
	0x01E04208 CBZ X23, 0x1E042E4
	0x01E0420C LDR X0, [X23 + 0x28]
	0x01E04210 CBZ X0, 0x1E042E4
	0x01E04214 MOV X1, X31
	0x01E04218 BL 0x3C32ECC
	0x01E0421C CBZ X0, 0x1E042E4
	0x01E04220 MOVZ W1, 0x1
	0x01E04224 MOV X2, X31
	0x01E04228 BL 0x3C357B4
	0x01E0422C MOV W8, W31
	0x01E04230 STR W31, [X19 + 0x30]
	0x01E04234 B 0x1E042FC
	0x01E04238 MOVN W8, 0x0
	0x01E0423C STR W8, [X19 + 0x10]
	0x01E04240 B 0x1E042F0
	0x01E04244 ADRP X8, 0x22F5000
	0x01E04248 LDR X8, [X8 + 0x8B0]
	0x01E0424C LDR X0, [X8]
	0x01E04250 BL 0x1C16F10
	0x01E04254 MOV X1, X31
	0x01E04258 MOV X20, X0
	0x01E0425C BL 0x33BDD8C
	0x01E04260 CBZ X20, 0x1E042E4
	0x01E04264 STR X23, [X20 + 0x18]
	0x01E04268 LDR X8, [X19 + 0x28]
	0x01E0426C CBZ X8, 0x1E042E4
	0x01E04270 LDRSW X9, [X19 + 0x30]
	0x01E04274 LDR W10, [X8 + 0x18]
	0x01E04278 CMP W9, W10
	0x01E0427C B.CS 0x1E043B4
	0x01E04280 ADD X8, X8, X9, 0x3, LSL
	0x01E04284 LDR X21, [X8 + 0x20]
	0x01E04288 STR X31, [X20 + 0x10]
	0x01E0428C CBZ X23, 0x1E042E4
	0x01E04290 LDR X0, [X23 + 0x20]
	0x01E04294 CBZ X0, 0x1E042E4
	0x01E04298 ADRP X24, 0x22F5000

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+128], D10
	003 Move [X31+144], D9
	004 Move [X31+152], D8
	005 Move [X31+160], X30
	006 Move [X31+168], X21
	007 Move [X31+176], X20
	008 Move [X31+184], X19
	009 Move X21, 0x25D5000
	010 Move X20, 0x22F6000
	011 Move W8, [X21+3454]
	012 Move X20, [X20+1968]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x22F6000
	019 Move X0, [X0+1968]
	020 Call 0x1C17CF4
	021 Move X0, 0x22F0000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move X0, 0x22F6000
	025 Move X0, [X0+1976]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3454], W8
	029 Move X2, [X20]
	030 Add X1, X31, 136
	031 Move X0, X19
	032 Move [X31+136], X31
	033 Call 0x21A5990, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {133}
	038 Move X8, 0x22F0000
	039 Move X8, [X8+1432]
	040 Move X20, [X19+32]
	041 Move X0, [X8]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X20
	047 Move X1, X31
	048 Move X2, X31
	049 Call Object.op_Equality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {59}
	054 Move X8, -20025344
	055 Move V3, [X8+196]
	056 Move S0, 1
	057 Move S1, W31
	058 Move S2, 1
	059 Move X8, [X19+32]
	060 Compare X8, 0
	061 JumpIfEqual {142}
	062 Move S0, [X8+48]
	063 Move S1, [X8+52]
	064 Move S2, [X8+56]
	065 Move S3, [X8+60]
	066 Move X0, X31
	067 Call Gizmos.set_color, X0
	068 Move X0, X19
	069 Move X1, X31
	070 Call Component.get_transform, X0
	071 Compare X0, 0
	072 JumpIfEqual {142}
	073 Add X8, X31, 64
	074 Move X1, X31
	075 Call Transform.get_localToWorldMatrix, X0
	076 Move V0, [X31+64]
	077 Move V1, [X31+80]
	078 Move V2, [X31+96]
	079 Move V3, [X31+112]
	080 Add X0, X31, 0
	081 Move X1, X31
	082 Move [X31], V0
	083 Move [X31+8], V1
	084 Move [X31+32], V2
	085 Move [X31+40], V3
	086 Call Gizmos.set_matrix, X0
	087 Move X0, [X31+136]
	088 Compare X0, 0
	089 JumpIfEqual {142}
	090 Move X1, X31
	091 Call MeshFilter.get_sharedMesh, X0
	092 Move X20, 0x25D5000
	093 Move W8, [X20+1923]
	094 Move X19, X0
	095 Compare W8, 0
	096 JumpIfNotEqual {102}
	097 Move X0, 0x22F0000
	098 Move X0, [X0+1440]
	099 Call 0x1C17CF4
	100 Move W8, 1
	101 Move [X20+1923], W8
	102 Move X8, 0x22F0000
	103 Move X8, [X8+1440]
	104 Move X9, 0x22F6000
	105 Move X0, X31
	106 Move X8, [X8]
	107 Move X9, [X9+1976]
	108 Move X8, [X8+184]
	109 Move X9, [X9]
	110 Move S8, [X8]
	111 Move S9, [X8+4]
	112 Move X9, [X9+184]
	113 Move V10, [X8+8]
	114 Move S0, [X9]
	115 Move S1, [X9+4]
	116 Move S2, [X9+8]
	117 Move S3, [X9+12]
	118 Call quaternion.op_Implicit, X0
	119 Move V4, V0
	120 Move V5, V1
	121 Move V6, V2
	122 Move V7, V3
	123 Move X0, X19
	124 Move V0, V8
	125 Move V1, V9
	126 Move V2, V10
	127 Move V3, V4
	128 Move V4, V5
	129 Move V5, V6
	130 Move V6, V7
	131 Move X1, X31
	132 Call Gizmos.DrawMesh, X0, X1, X2
	133 Move X20, [X31+176]
	134 Move X19, [X31+184]
	135 Move X30, [X31+160]
	136 Move X21, [X31+168]
	137 Move D9, [X31+144]
	138 Move D8, [X31+152]
	139 Move V10, [X31+128]
	140 Add X31, X31, 192
	141 Return 
	142 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01E0429C LDR X24, [X24 + 0x8A0]
	0x01E042A0 MOV W22, W31

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

