Type: AnimalCompany.GameManager

Method: AnimalCompany.GameManager get_instance()

Disassembly:
	0x01DD7AA0 MOV V9.16B, V1.16B
	0x01DD7AA4 MOV V10.16B, V2.16B
	0x01DD7AA8 CBNZ W8, 0x1DD7AB8
	0x01DD7AAC MOV X0, X20
	0x01DD7AB0 BL 0x1C16CF4
	0x01DD7AB4 STRB W27, [X26 + 0x786]
	0x01DD7AB8 CBZ X21, 0x1DD7B34
	0x01DD7ABC LDR X8, [X20]
	0x01DD7AC0 LDR V3, [X31 + 0x8]
	0x01DD7AC4 MOV X0, X21
	0x01DD7AC8 MOV X1, X31
	0x01DD7ACC LDR X8, [X8 + 0xB8]
	0x01DD7AD0 LDP S1, S0, [X8 + 0x1C]
	0x01DD7AD4 LDR V2, [X8 + 0x18]
	0x01DD7AD8 FMUL S0, S0, S3
	0x01DD7ADC FMUL S1, S1, S3
	0x01DD7AE0 FMUL S3, S2, S3
	0x01DD7AE4 FADD S2, S10, S0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2602000
	005 Move X20, 0x2322000
	006 Move W8, [X19+3130]
	007 Move X20, [X20+2152]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2322000
	013 Move X0, [X0+2152]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3130], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move X0, [X8]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Boolean get_isDebug()

Disassembly:
	0x01DD7AE8 FADD S1, S9, S1
	0x01DD7AEC FADD S0, S8, S3
	0x01DD7AF0 BL 0x3C3F62C
	0x01DD7AF4 LDR W8, [X19 + 0x18]
	0x01DD7AF8 ADD W23, W23, 0x1
	0x01DD7AFC CMP W23, W8
	0x01DD7B00 B.LT 0x1DD797C
	0x01DD7B04 LDP X20, X19, [X31 + 0xD0]
	0x01DD7B08 LDP X22, X21, [X31 + 0xC0]
	0x01DD7B0C LDP X24, X23, [X31 + 0xB0]
	0x01DD7B10 LDP X26, X25, [X31 + 0xA0]
	0x01DD7B14 LDP X28, X27, [X31 + 0x90]
	0x01DD7B18 LDP X29, X30, [X31 + 0x80]
	0x01DD7B1C LDP D9, D8, [X31 + 0x70]
	0x01DD7B20 LDP D11, D10, [X31 + 0x60]
	0x01DD7B24 LDP D13, D12, [X31 + 0x50]
	0x01DD7B28 LDP D15, D14, [X31 + 0x40]
	0x01DD7B2C ADD X31, X31, 0xE0
	0x01DD7B30 RET
	0x01DD7B34 BL 0x1C16F20
	0x01DD7B38 BL 0x1C16F28
	0x01DD7B3C STP X30, X21, [X31 - 0x20]!
	0x01DD7B40 STP X20, X19, [X31 + 0x10]
	0x01DD7B44 ADRP X20, 0x2601000
	0x01DD7B48 LDRB W8, [X20 + 0xA1F]
	0x01DD7B4C MOV X19, X0
	0x01DD7B50 CBNZ W8, 0x1DD7B68
	0x01DD7B54 ADRP X0, 0x231C000
	0x01DD7B58 LDR X0, [X0 + 0x5A0]
	0x01DD7B5C BL 0x1C16CF4
	0x01DD7B60 MOVZ W8, 0x1
	0x01DD7B64 STRB W8, [X20 + 0xA1F]
	0x01DD7B68 ADRP X20, 0x231C000
	0x01DD7B6C LDR X20, [X20 + 0x5A0]
	0x01DD7B70 ADRP X21, 0x2601000
	0x01DD7B74 LDR X8, [X20]
	0x01DD7B78 LDR X9, [X8 + 0xB8]
	0x01DD7B7C LDR V0, [X9 + 0x48]
	0x01DD7B80 LDR V1, [X9 + 0x50]
	0x01DD7B84 STUR D0, [X19 + 0x24]
	0x01DD7B88 STR S1, [X19 + 0x2C]
	0x01DD7B8C LDRB W9, [X21 + 0x783]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2602000
	006 Move X20, 0x2322000
	007 Move X19, 0x231D000
	008 Move W8, [X21+3131]
	009 Move X20, [X20+2152]
	010 Move X19, [X19+1432]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x2322000
	016 Move X0, [X0+2152]
	017 Call 0x1C17CF4
	018 Move X0, 0x231D000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3131], W8
	023 Move X8, [X20]
	024 Move X0, [X19]
	025 Move X8, [X8+184]
	026 Move W9, [X0+224]
	027 Move X19, [X8]
	028 Compare W9, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X19
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {40}
	039 Move W0, W31
	040 Move X8, [X20]
	041 Move X8, [X8+184]
	042 Move X8, [X8]
	043 Compare X8, 0
	044 JumpIfEqual {53}
	045 Move W8, [X8+56]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction CSET not yet implemented."
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return X0
	053 Call 0x1C17F20

Method: UnityEngine.Transform get_masterClientAOIOrigin()

Disassembly:
	0x01DD7B90 CBNZ W9, 0x1DD7BA8
	0x01DD7B94 MOV X0, X20

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void Awake()

Disassembly:
	0x01DD7B98 BL 0x1C16CF4
	0x01DD7B9C LDR X8, [X20]
	0x01DD7BA0 MOVZ W9, 0x1
	0x01DD7BA4 STRB W9, [X21 + 0x783]
	0x01DD7BA8 LDR X8, [X8 + 0xB8]
	0x01DD7BAC MOV X0, X19
	0x01DD7BB0 MOV X1, X31
	0x01DD7BB4 LDR V0, [X8]
	0x01DD7BB8 LDR V1, [X8 + 0x8]
	0x01DD7BBC STR D0, [X19 + 0x30]
	0x01DD7BC0 STR S1, [X19 + 0x38]
	0x01DD7BC4 LDP X20, X19, [X31 + 0x10]
	0x01DD7BC8 LDP X30, X21, [X31], #0x20
	0x01DD7BCC B 0x3C36C30
	0x01DD7BD0 STR D14, [X31 - 0x50]!
	0x01DD7BD4 STP D13, D12, [X31 + 0x8]
	0x01DD7BD8 STP D11, D10, [X31 + 0x18]
	0x01DD7BDC STP D9, D8, [X31 + 0x28]
	0x01DD7BE0 STR X30, [X31 + 0x38]
	0x01DD7BE4 STP X20, X19, [X31 + 0x40]
	0x01DD7BE8 ADRP X20, 0x2601000
	0x01DD7BEC LDRB W8, [X20 + 0x784]
	0x01DD7BF0 MOV V9.16B, V6.16B
	0x01DD7BF4 MOV V10.16B, V5.16B
	0x01DD7BF8 MOV V11.16B, V4.16B
	0x01DD7BFC MOV V8.16B, V3.16B
	0x01DD7C00 MOV V12.16B, V2.16B
	0x01DD7C04 MOV V13.16B, V1.16B
	0x01DD7C08 MOV V14.16B, V0.16B
	0x01DD7C0C MOV W19, W0
	0x01DD7C10 CBNZ W8, 0x1DD7C28
	0x01DD7C14 ADRP X0, 0x231C000
	0x01DD7C18 LDR X0, [X0 + 0x5A8]
	0x01DD7C1C BL 0x1C16CF4
	0x01DD7C20 MOVZ W8, 0x1
	0x01DD7C24 STRB W8, [X20 + 0x784]
	0x01DD7C28 ADRP X8, 0x231C000
	0x01DD7C2C LDR X8, [X8 + 0x5A8]
	0x01DD7C30 FSUB S11, S14, S11
	0x01DD7C34 FSUB S10, S13, S10
	0x01DD7C38 FSUB S9, S12, S9
	0x01DD7C3C LDR X0, [X8]
	0x01DD7C40 LDR W8, [X0 + 0xE0]
	0x01DD7C44 CBNZ W8, 0x1DD7C4C
	0x01DD7C48 BL 0x1C16DFC
	0x01DD7C4C FMUL S0, S11, S11
	0x01DD7C50 FMUL S4, S10, S10
	0x01DD7C54 LDP S2, S1, [X31 + 0x54]
	0x01DD7C58 LDR V3, [X31 + 0x50]
	0x01DD7C5C FMUL S5, S9, S9
	0x01DD7C60 FADD S0, S0, S4
	0x01DD7C64 FADD S0, S5, S0
	0x01DD7C68 FSQRT S0, S0
	0x01DD7C6C FDIV S6, S11, S0
	0x01DD7C70 FDIV S5, S10, S0
	0x01DD7C74 FDIV S4, S9, S0
	0x01DD7C78 CBZ W19, 0x1DD7D04
	0x01DD7C7C FMOV S16, 1
	0x01DD7C80 CMP W19, 0x1
	0x01DD7C84 FMOV S7, 1
	0x01DD7C88 B.NE 0x1DD7D3C
	0x01DD7C8C FMUL S3, S3, S6
	0x01DD7C90 FMUL S2, S2, S5
	0x01DD7C94 ADRP X8, 0xFFFFFFFFFED13000
	0x01DD7C98 FADD S2, S3, S2
	0x01DD7C9C LDR V3, [X8 + 0x35C]
	0x01DD7CA0 FMUL S1, S1, S4
	0x01DD7CA4 FADD S1, S1, S2
	0x01DD7CA8 FSUB S0, S8, S0
	0x01DD7CAC FADD S1, S1, S3
	0x01DD7CB0 FMOV S4, 1
	0x01DD7CB4 FMOV S6, 1.5
	0x01DD7CB8 FDIV S0, S0, S8
	0x01DD7CBC FADD S1, S1, S1
	0x01DD7CC0 FMOV S5, W31
	0x01DD7CC4 FMUL S0, S0, S6
	0x01DD7CC8 FMIN S3, S1, S4
	0x01DD7CCC FCMP S1, 0x0
	0x01DD7CD0 FMIN S2, S0, S4
	0x01DD7CD4 FCSEL S7, S3, S5, PL
	0x01DD7CD8 FCMP S0, 0x0
	0x01DD7CDC MOVZ W8, 0xFF800000
	0x01DD7CE0 FCSEL S0, S2, S5, PL
	0x01DD7CE4 FMOV S16, W8
	0x01DD7CE8 MOVZ W8, 0x7F800000
	0x01DD7CEC FSQRT S1, S0
	0x01DD7CF0 FABS S1, S1
	0x01DD7CF4 FCMP S0, S16
	0x01DD7CF8 FMOV S0, W8
	0x01DD7CFC FCSEL S16, S0, S1, EQ
	0x01DD7D00 B 0x1DD7D3C
	0x01DD7D04 FMUL S3, S3, S6
	0x01DD7D08 FMUL S2, S2, S5
	0x01DD7D0C FMUL S1, S1, S4
	0x01DD7D10 FADD S2, S3, S2
	0x01DD7D14 FMOV S4, 1
	0x01DD7D18 FADD S1, S1, S2
	0x01DD7D1C FMOV S5, W31
	0x01DD7D20 FSUB S0, S8, S0
	0x01DD7D24 FMIN S2, S1, S4
	0x01DD7D28 FCMP S1, 0x0
	0x01DD7D2C FDIV S0, S0, S8
	0x01DD7D30 FCSEL S1, S2, S5, PL
	0x01DD7D34 FMUL S7, S1, S1
	0x01DD7D38 FMUL S16, S0, S0
	0x01DD7D3C LDP X20, X19, [X31 + 0x40]
	0x01DD7D40 LDR X30, [X31 + 0x38]
	0x01DD7D44 LDP D9, D8, [X31 + 0x28]
	0x01DD7D48 LDP D11, D10, [X31 + 0x18]
	0x01DD7D4C LDP D13, D12, [X31 + 0x8]
	0x01DD7D50 FMUL S0, S16, S7
	0x01DD7D54 LDR V14, [X31], #0x50
	0x01DD7D58 RET
	0x01DD7D5C STR D14, [X31 - 0x50]!
	0x01DD7D60 STP D13, D12, [X31 + 0x10]
	0x01DD7D64 STP D11, D10, [X31 + 0x20]
	0x01DD7D68 STP D9, D8, [X31 + 0x30]
	0x01DD7D6C STP X30, X19, [X31 + 0x40]
	0x01DD7D70 ADRP X19, 0x2601000
	0x01DD7D74 LDRB W8, [X19 + 0x85C]
	0x01DD7D78 MOV V9.16B, V6.16B
	0x01DD7D7C MOV V10.16B, V5.16B
	0x01DD7D80 MOV V11.16B, V4.16B
	0x01DD7D84 MOV V8.16B, V3.16B
	0x01DD7D88 MOV V12.16B, V2.16B

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x2602000
	009 Move X20, 0x231D000
	010 Move W8, [X21+3132]
	011 Move X20, [X20+1928]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {43}
	017 Move X0, 0x2322000
	018 Move X0, [X0+2160]
	019 Call 0x1C17CF4
	020 Move X0, 0x2322000
	021 Move X0, [X0+2168]
	022 Call 0x1C17CF4
	023 Move X0, 0x2322000
	024 Move X0, [X0+2152]
	025 Call 0x1C17CF4
	026 Move X0, 0x231D000
	027 Move X0, [X0+1928]
	028 Call 0x1C17CF4
	029 Move X0, 0x231D000
	030 Move X0, [X0+1432]
	031 Call 0x1C17CF4
	032 Move X0, 0x2322000
	033 Move X0, [X0+2176]
	034 Call 0x1C17CF4
	035 Move X0, 0x2322000
	036 Move X0, [X0+2184]
	037 Call 0x1C17CF4
	038 Move X0, 0x2321000
	039 Move X0, [X0+1592]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X21+3132], W8
	043 Move X0, [X20]
	044 Move X24, 0x2322000
	045 Move X23, 0x2322000
	046 Move X20, 0x2321000
	047 Move X22, 0x2322000
	048 Move X21, 0x231D000
	049 Move X24, [X24+2176]
	050 Move W8, [X0+224]
	051 Move X23, [X23+2184]
	052 Move X20, [X20+1592]
	053 Move X22, [X22+2152]
	054 Move X21, [X21+1432]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, [X24]
	059 Move X2, [X23]
	060 Move X3, [X20]
	061 Move W4, 30
	062 Move X1, X31
	063 Move X5, X31
	064 Call Log.Info, X0, X1, X2, X3, X4
	065 Move X8, [X22]
	066 Move X0, [X21]
	067 Move X8, [X8+184]
	068 Move W9, [X0+224]
	069 Move X20, [X8]
	070 Compare W9, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Move X0, X20
	074 Move X1, X31
	075 Move X2, X31
	076 Call Object.op_Equality, X0, X1
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {84}
	081 Move X8, [X22]
	082 Move X8, [X8+184]
	083 Move [X8], X19
	084 Move X0, X19
	085 Move X1, X31
	086 Call Component.get_gameObject, X0
	087 Move X8, [X21]
	088 Move X20, X0
	089 Move W9, [X8+224]
	090 Compare W9, 0
	091 JumpIfNotEqual {94}
	092 Move X0, X8
	093 Call 0x1C17DFC
	094 Move X0, X20
	095 Move X1, X31
	096 Call Object.Destroy, X0
	097 Move X22, [X19+40]
	098 Compare X22, 0
	099 JumpIfEqual {143}
	100 Move X23, 0x2322000
	101 Move X23, [X23+2160]
	102 Move X21, 0x2322000
	103 Move X20, [X22+32]
	104 Move X0, [X23]
	105 Move X21, [X21+2168]
	106 Call 0x1C17F10
	107 Move X2, [X21]
	108 Move X1, X19
	109 Move X3, X31
	110 Move X21, X0
	111 Call Action`1<Object>..ctor, X0, X1, X2
	112 Move X0, X20
	113 Move X1, X21
	114 Move X2, X31
	115 Call Delegate.Combine, X0, X1
	116 Compare X0, 0
	117 JumpIfEqual {134}
	118 Move X20, [X23]
	119 Move X19, X0
	120 Move X1, X20
	121 Call 0x1C17E00
	122 Compare X0, 0
	123 JumpIfEqual {131}
	124 Move [X22+32], X0
	125 Move X20, [X23]
	126 Move X0, X19
	127 Move X1, X20
	128 Call 0x1C17E00
	129 Compare X0, 0
	130 JumpIfNotEqual {135}
	131 Move X0, X19
	132 Move X1, X20
	133 Call 0x1C181E0
	134 Move [X22+32], X31
	135 Move X20, [X31+48]
	136 Move X19, [X31+56]
	137 Move X22, [X31+32]
	138 Move X21, [X31+40]
	139 Move X24, [X31+16]
	140 Move X23, [X31+24]
	141 Move X30, [X31+64]
	142 Return 
	143 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x01DD7D8C MOV V13.16B, V1.16B
	0x01DD7D90 MOV V14.16B, V0.16B
	0x01DD7D94 CBNZ W8, 0x1DD7DAC
	0x01DD7D98 ADRP X0, 0x231C000
	0x01DD7D9C LDR X0, [X0 + 0x5A8]
	0x01DD7DA0 BL 0x1C16CF4
	0x01DD7DA4 MOVZ W8, 0x1
	0x01DD7DA8 STRB W8, [X19 + 0x85C]
	0x01DD7DAC ADRP X8, 0x231C000
	0x01DD7DB0 LDR X8, [X8 + 0x5A8]
	0x01DD7DB4 FSUB S11, S14, S11
	0x01DD7DB8 FSUB S10, S13, S10
	0x01DD7DBC FSUB S9, S12, S9
	0x01DD7DC0 LDR X0, [X8]
	0x01DD7DC4 LDR W8, [X0 + 0xE0]
	0x01DD7DC8 CBNZ W8, 0x1DD7DD0
	0x01DD7DCC BL 0x1C16DFC
	0x01DD7DD0 FMUL S0, S11, S11
	0x01DD7DD4 FMUL S1, S10, S10
	0x01DD7DD8 FMUL S2, S9, S9
	0x01DD7DDC FADD S0, S0, S1
	0x01DD7DE0 FADD S0, S2, S0
	0x01DD7DE4 FSQRT S0, S0
	0x01DD7DE8 FSUB S0, S8, S0
	0x01DD7DEC FMOV S1, 1.5
	0x01DD7DF0 FDIV S0, S0, S8
	0x01DD7DF4 FMOV S2, 1
	0x01DD7DF8 FMUL S0, S0, S1
	0x01DD7DFC FMOV S3, W31
	0x01DD7E00 FMIN S2, S0, S2
	0x01DD7E04 FCMP S0, 0x0
	0x01DD7E08 MOVZ W8, 0xFF800000
	0x01DD7E0C FCSEL S0, S2, S3, PL
	0x01DD7E10 LDP X30, X19, [X31 + 0x40]
	0x01DD7E14 LDP D9, D8, [X31 + 0x30]
	0x01DD7E18 LDP D11, D10, [X31 + 0x20]
	0x01DD7E1C LDP D13, D12, [X31 + 0x10]
	0x01DD7E20 FMOV S1, W8
	0x01DD7E24 MOVZ W8, 0x7F800000
	0x01DD7E28 FSQRT S2, S0
	0x01DD7E2C FABS S2, S2
	0x01DD7E30 FCMP S0, S1
	0x01DD7E34 FMOV S0, W8
	0x01DD7E38 FCSEL S0, S0, S2, EQ
	0x01DD7E3C LDR V14, [X31], #0x50
	0x01DD7E40 RET
	0x01DD7E44 STP X30, X19, [X31 - 0x10]!
	0x01DD7E48 LDR X8, [X0 + 0x50]
	0x01DD7E4C CBZ X8, 0x1DD7E5C
	0x01DD7E50 LDR W0, [X8]
	0x01DD7E54 LDP X30, X19, [X31], #0x10
	0x01DD7E58 RET
	0x01DD7E5C ADRP X0, 0x231C000
	0x01DD7E60 LDR X0, [X0 + 0x5B0]
	0x01DD7E64 BL 0x1C16D08
	0x01DD7E68 BL 0x1C16F10
	0x01DD7E6C MOV X19, X0
	0x01DD7E70 ADRP X0, 0x2321000
	0x01DD7E74 LDR X0, [X0 + 0x8D0]
	0x01DD7E78 BL 0x1C16D08
	0x01DD7E7C MOV X1, X0
	0x01DD7E80 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2602000
	008 Move X21, 0x2322000
	009 Move W8, [X20+3133]
	010 Move X21, [X21+2152]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x2322000
	017 Move X0, [X0+2160]
	018 Call 0x1C17CF4
	019 Move X0, 0x2322000
	020 Move X0, [X0+2168]
	021 Call 0x1C17CF4
	022 Move X0, 0x2322000
	023 Move X0, [X0+2152]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3133], W8
	027 Move X8, [X21]
	028 Move X8, [X8+184]
	029 Move [X8], X31
	030 Move X22, [X19+40]
	031 Compare X22, 0
	032 JumpIfEqual {75}
	033 Move X23, 0x2322000
	034 Move X23, [X23+2160]
	035 Move X21, 0x2322000
	036 Move X20, [X22+32]
	037 Move X0, [X23]
	038 Move X21, [X21+2168]
	039 Call 0x1C17F10
	040 Move X2, [X21]
	041 Move X1, X19
	042 Move X3, X31
	043 Move X21, X0
	044 Call Action`1<Object>..ctor, X0, X1, X2
	045 Move X0, X20
	046 Move X1, X21
	047 Move X2, X31
	048 Call Delegate.Remove, X0, X1
	049 Compare X0, 0
	050 JumpIfEqual {67}
	051 Move X20, [X23]
	052 Move X19, X0
	053 Move X1, X20
	054 Call 0x1C17E00
	055 Compare X0, 0
	056 JumpIfEqual {64}
	057 Move [X22+32], X0
	058 Move X20, [X23]
	059 Move X0, X19
	060 Move X1, X20
	061 Call 0x1C17E00
	062 Compare X0, 0
	063 JumpIfNotEqual {68}
	064 Move X0, X19
	065 Move X1, X20
	066 Call 0x1C181E0
	067 Move [X22+32], X31
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move X30, [X31+48]
	073 Move X23, [X31+56]
	074 Return 
	075 Call 0x1C17F20

Method: System.Void OnPlayerCollisionEnter1(AnimalCompany.PlayerController playerController)

Disassembly:
	0x01DD7E84 MOV X2, X31
	0x01DD7E88 BL 0x337DF1C
	0x01DD7E8C ADRP X0, 0x2321000
	0x01DD7E90 LDR X0, [X0 + 0x8D8]
	0x01DD7E94 BL 0x1C16D08
	0x01DD7E98 MOV X1, X0
	0x01DD7E9C MOV X0, X19
	0x01DD7EA0 BL 0x1C16DEC
	0x01DD7EA4 STP X30, X19, [X31 - 0x10]!
	0x01DD7EA8 LDR X8, [X0 + 0x50]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {12}
	004 Move X8, [X0+48]
	005 Move W2, 1
	006 Move X0, X1
	007 Move X3, X31
	008 Move X1, X8
	009 Move X30, [X31+16]
	010 Call PlayerController.Respawn, X0, X1, X2
	011 Return 
	012 Call 0x1C17F20

Method: System.Boolean TrySpendMoney(System.Int32 amount)

Disassembly:
	0x01DD7EAC CBZ X8, 0x1DD7EBC
	0x01DD7EB0 STR W1, [X8]
	0x01DD7EB4 LDP X30, X19, [X31], #0x10
	0x01DD7EB8 RET
	0x01DD7EBC ADRP X0, 0x231C000
	0x01DD7EC0 LDR X0, [X0 + 0x5B0]
	0x01DD7EC4 BL 0x1C16D08
	0x01DD7EC8 BL 0x1C16F10
	0x01DD7ECC MOV X19, X0
	0x01DD7ED0 ADRP X0, 0x2321000
	0x01DD7ED4 LDR X0, [X0 + 0x8D0]
	0x01DD7ED8 BL 0x1C16D08
	0x01DD7EDC MOV X1, X0
	0x01DD7EE0 MOV X0, X19
	0x01DD7EE4 MOV X2, X31
	0x01DD7EE8 BL 0x337DF1C
	0x01DD7EEC ADRP X0, 0x2321000
	0x01DD7EF0 LDR X0, [X0 + 0x8E0]
	0x01DD7EF4 BL 0x1C16D08
	0x01DD7EF8 MOV X1, X0
	0x01DD7EFC MOV X0, X19
	0x01DD7F00 BL 0x1C16DEC
	0x01DD7F04 STP X30, X19, [X31 - 0x10]!
	0x01DD7F08 MOV X1, X31
	0x01DD7F0C MOV X19, X0
	0x01DD7F10 BL 0x1E73F88
	0x01DD7F14 LDR X0, [X19 + 0x40]
	0x01DD7F18 CBZ X0, 0x1DD7F50
	0x01DD7F1C LDRB W8, [X0 + 0x60]
	0x01DD7F20 TBNZ X8, 0x1, 0x1DD7F50
	0x01DD7F24 MOV X1, X31
	0x01DD7F28 BL 0x1E93668
	0x01DD7F2C TBZ X0, 0x0, 0x1DD7F50
	0x01DD7F30 LDR X0, [X19 + 0x38]
	0x01DD7F34 LDR V0, [X19 + 0x80]
	0x01DD7F38 MOV X1, X31
	0x01DD7F3C BL 0x1E91E68
	0x01DD7F40 AND X1, X0, 0x0
	0x01DD7F44 MOV X0, X19
	0x01DD7F48 LDP X30, X19, [X31], #0x10
	0x01DD7F4C B 0x1DD7EA4
	0x01DD7F50 LDP X30, X19, [X31], #0x10
	0x01DD7F54 RET
	0x01DD7F58 SUB X31, X31, 0x20
	0x01DD7F5C STP X30, X19, [X31 + 0x10]
	0x01DD7F60 MOV X1, X31
	0x01DD7F64 MOV X19, X0
	0x01DD7F68 BL 0x1E73D04
	0x01DD7F6C LDR X0, [X19 + 0x40]
	0x01DD7F70 CBZ X0, 0x1DD7FBC
	0x01DD7F74 LDRB W8, [X0 + 0x60]
	0x01DD7F78 TBNZ X8, 0x1, 0x1DD7FBC
	0x01DD7F7C MOV X1, X31
	0x01DD7F80 BL 0x1E93668
	0x01DD7F84 TBZ X0, 0x0, 0x1DD7FBC
	0x01DD7F88 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2602000
	006 Move X20, 0x231D000
	007 Move W8, [X21+3134]
	008 Move X20, [X20+1608]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x231D000
	015 Move X0, [X0+1608]
	016 Call 0x1C17CF4
	017 Move X0, 0x231F000
	018 Move X0, [X0+1040]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3134], W8
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X21, 0x2602000
	028 Move W8, [X21+1927]
	029 Compare W8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, 0x231D000
	032 Move X0, [X0+1608]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+1927], W8
	036 Move X0, [X20]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {42}
	040 Call 0x1C17DFC
	041 Move X0, [X20]
	042 Move X8, [X0+184]
	043 Move X8, [X8]
	044 Compare X8, 0
	045 JumpIfEqual {68}
	046 Move X8, [X8+184]
	047 Compare X8, 0
	048 JumpIfEqual {68}
	049 Move X8, [X8+128]
	050 Compare X8, 0
	051 JumpIfEqual {68}
	052 Move X9, 0x231F000
	053 Move X9, [X9+1040]
	054 Move X0, [X8+72]
	055 Move X1, [X9]
	056 Call StatePrimitive`1<Int32>.op_Implicit, X0
	057 Move W20, W0
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move W0, W19
	060 Call GameManager.SubtractPlayerMoney, X0
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 NotImplemented "Instruction CSET not yet implemented."
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Return X0
	068 Call 0x1C17F20

Method: System.Void AddPlayerMoney(System.Int32 amount)

Disassembly:
	0x01DD81F0 STP X30, X21, [X31 + 0x70]
	0x01DD81F4 STP X20, X19, [X31 + 0x80]
	0x01DD81F8 ADRP X21, 0x2600000
	0x01DD81FC LDRB W8, [X21 + 0xC5C]
	0x01DD8200 MOV W20, W1
	0x01DD8204 MOV X19, X0
	0x01DD8208 TBNZ X8, 0x0, 0x1DD8244
	0x01DD820C ADRP X0, 0x2320000
	0x01DD8210 LDR X0, [X0 + 0x8F0]
	0x01DD8214 BL 0x1C16CF4
	0x01DD8218 ADRP X0, 0x2320000
	0x01DD821C LDR X0, [X0 + 0x8F8]
	0x01DD8220 BL 0x1C16CF4
	0x01DD8224 ADRP X0, 0x231E000
	0x01DD8228 LDR X0, [X0 + 0xA78]
	0x01DD822C BL 0x1C16CF4
	0x01DD8230 ADRP X0, 0x2320000
	0x01DD8234 LDR X0, [X0 + 0x900]
	0x01DD8238 BL 0x1C16CF4
	0x01DD823C MOVZ W8, 0x1
	0x01DD8240 STRB W8, [X21 + 0xC5C]
	0x01DD8244 STP X31, X31, [X31 + 0x40]
	0x01DD8248 STR X31, [X31 + 0x50]
	0x01DD824C STP X31, X31, [X31 + 0x20]
	0x01DD8250 STR X31, [X31 + 0x30]
	0x01DD8254 LDRB W8, [X19 + 0x58]
	0x01DD8258 CBZ W8, 0x1DD8444
	0x01DD825C STRB W31, [X19 + 0x58]
	0x01DD8260 LDR X8, [X19 + 0xB8]
	0x01DD8264 CBZ X8, 0x1DD8594
	0x01DD8268 LDR W9, [X8 + 0x18]
	0x01DD826C CMP W9, W20
	0x01DD8270 B.LS 0x1DD8598
	0x01DD8274 SXTW X21, W20
	0x01DD8278 ADD X8, X8, X21, 0x3, LSL
	0x01DD827C LDR X0, [X8 + 0x20]
	0x01DD8280 CBZ X0, 0x1DD8594
	0x01DD8284 BL 0x1DD859C
	0x01DD8288 MOV X0, X19
	0x01DD828C BL 0x1DD8EA4
	0x01DD8290 TBNZ X0, 0x0, 0x1DD8518
	0x01DD8294 LDR X8, [X19 + 0xC0]
	0x01DD8298 CBZ X8, 0x1DD8594
	0x01DD829C LDR W9, [X8 + 0x18]
	0x01DD82A0 CMP W9, W20
	0x01DD82A4 B.LS 0x1DD8598
	0x01DD82A8 ADD X8, X8, X21, 0x3, LSL
	0x01DD82AC LDR X21, [X8 + 0x20]
	0x01DD82B0 MOV X0, X19
	0x01DD82B4 MOV X1, X31
	0x01DD82B8 BL 0x3C32E90
	0x01DD82BC CBZ X0, 0x1DD8594
	0x01DD82C0 MOV X1, X31
	0x01DD82C4 BL 0x3C3F58C
	0x01DD82C8 FMOV S3, 1
	0x01DD82CC MOV X0, X21
	0x01DD82D0 MOV X1, X31
	0x01DD82D4 BL 0x1DD1B94
	0x01DD82D8 LDR X0, [X19 + 0x40]
	0x01DD82DC CBZ X0, 0x1DD8518
	0x01DD82E0 LDRB W8, [X0 + 0x60]
	0x01DD82E4 TBNZ X8, 0x1, 0x1DD8518
	0x01DD82E8 MOV X1, X31
	0x01DD82EC BL 0x1E93668
	0x01DD82F0 TBZ X0, 0x0, 0x1DD8518
	0x01DD82F4 ADD X8, X31, 0x8
	0x01DD82F8 MOV X0, X19
	0x01DD82FC BL 0x1DD9030
	0x01DD8300 ADRP X9, 0x2320000
	0x01DD8304 LDUR V0, [X31 + 0x8]
	0x01DD8308 LDR X8, [X31 + 0x18]
	0x01DD830C LDR X9, [X9 + 0x8F8]
	0x01DD8310 ADD X0, X31, 0x40
	0x01DD8314 MOVZ W2, 0x1
	0x01DD8318 MOV W1, W20
	0x01DD831C LDR X3, [X9]
	0x01DD8320 STR V0, [X31 + 0x4]
	0x01DD8324 STR X8, [X31 + 0x50]
	0x01DD8328 BL 0x240B0B0
	0x01DD832C ADD X8, X31, 0x8
	0x01DD8330 MOV X0, X19
	0x01DD8334 BL 0x1DD90E8
	0x01DD8338 LDUR V0, [X31 + 0x8]
	0x01DD833C LDR X8, [X31 + 0x18]
	0x01DD8340 MOV X1, X31
	0x01DD8344 STR V0, [X31 + 0x2]
	0x01DD8348 STR X8, [X31 + 0x30]
	0x01DD834C LDR X0, [X19 + 0x38]
	0x01DD8350 FMOV S0, 5
	0x01DD8354 BL 0x1E91E68
	0x01DD8358 ADRP X8, 0x2320000
	0x01DD835C LDR X8, [X8 + 0x8F0]
	0x01DD8360 AND X2, X0, 0x0
	0x01DD8364 ADD X0, X31, 0x20
	0x01DD8368 MOV W1, W20
	0x01DD836C LDR X3, [X8]
	0x01DD8370 BL 0x240ED7C
	0x01DD8374 MOV X0, X19
	0x01DD8378 BL 0x1DD94A0
	0x01DD837C ADRP X8, 0xFFFFFFFFFED12000
	0x01DD8380 LDR V1, [X8 + 0x10C]
	0x01DD8384 MOV X0, X19
	0x01DD8388 FADD S0, S0, S1
	0x01DD838C BL 0x1DD9500
	0x01DD8390 MOV X0, X19
	0x01DD8394 BL 0x1DD8D0C
	0x01DD8398 TBNZ X0, 0x0, 0x1DD8518
	0x01DD839C MOV X0, X19
	0x01DD83A0 BL 0x1DD93E0
	0x01DD83A4 CMP W0, W20
	0x01DD83A8 B.NE 0x1DD8518
	0x01DD83AC MOV X0, X19
	0x01DD83B0 BL 0x1DD94A0
	0x01DD83B4 ADRP X8, 0xFFFFFFFFFED12000
	0x01DD83B8 LDR V1, [X8 + 0x338]
	0x01DD83BC MOV X0, X19
	0x01DD83C0 FADD S0, S0, S1
	0x01DD83C4 BL 0x1DD9500
	0x01DD83C8 MOV X0, X19
	0x01DD83CC BL 0x1DD94A0
	0x01DD83D0 MOVZ W8, 0x42C80000
	0x01DD83D4 FMOV S1, W8
	0x01DD83D8 FCMP S0, S1
	0x01DD83DC B.GE 0x1DD856C
	0x01DD83E0 FMOV S0, 2
	0x01DD83E4 FMOV S1, 5
	0x01DD83E8 MOV X0, X31
	0x01DD83EC BL 0x3C30968
	0x01DD83F0 MOV X0, X19
	0x01DD83F4 MOV V8.16B, V0.16B
	0x01DD83F8 BL 0x1DDA4D0
	0x01DD83FC ADRP X8, 0xFFFFFFFFFED11000
	0x01DD8400 LDR X0, [X19 + 0x38]
	0x01DD8404 LDR V0, [X8 + 0xFEC]
	0x01DD8408 MOV X1, X31
	0x01DD840C BL 0x1E91E68
	0x01DD8410 AND X1, X0, 0x0
	0x01DD8414 MOV X0, X19
	0x01DD8418 BL 0x1DD92C0
	0x01DD841C ADRP X8, 0xFFFFFFFFFED11000
	0x01DD8420 LDR V0, [X8 + 0xFC4]
	0x01DD8424 LDR X0, [X19 + 0x38]
	0x01DD8428 MOV X1, X31
	0x01DD842C FADD S0, S8, S0
	0x01DD8430 BL 0x1E91E68
	0x01DD8434 AND X1, X0, 0x0
	0x01DD8438 MOV X0, X19
	0x01DD843C BL 0x1DD9200
	0x01DD8440 B 0x1DD8518
	0x01DD8444 ADRP X21, 0x231E000
	0x01DD8448 LDR X21, [X21 + 0xA78]
	0x01DD844C LDR X0, [X21]
	0x01DD8450 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+40], X25
	004 Move [X31+48], X24
	005 Move [X31+56], X23
	006 Move [X31+64], X22
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 Move X20, 0x2601000
	011 Move W8, [X20+3135]
	012 Move W19, W0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {49}
	017 Move X0, 0x231C000
	018 Move X0, [X0+2896]
	019 Call 0x1C17CF4
	020 Move X0, 0x231C000
	021 Move X0, [X0+1608]
	022 Call 0x1C17CF4
	023 Move X0, 0x231C000
	024 Move X0, [X0+2736]
	025 Call 0x1C17CF4
	026 Move X0, 0x231C000
	027 Move X0, [X0+1880]
	028 Call 0x1C17CF4
	029 Move X0, 0x2321000
	030 Move X0, [X0+2192]
	031 Call 0x1C17CF4
	032 Move X0, 0x231E000
	033 Move X0, [X0+1040]
	034 Call 0x1C17CF4
	035 Move X0, 0x2320000
	036 Move X0, [X0+352]
	037 Call 0x1C17CF4
	038 Move X0, 0x2320000
	039 Move X0, [X0+360]
	040 Call 0x1C17CF4
	041 Move X0, 0x2321000
	042 Move X0, [X0+2208]
	043 Call 0x1C17CF4
	044 Move X0, 0x2321000
	045 Move X0, [X0+2216]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X20+3135], W8
	049 Move TEMP, X19
	050 And TEMP, TEMP, -2147483648
	051 Compare TEMP, -2147483648
	052 JumpIfEqual {167}
	053 Move X8, 0x231C000
	054 Move X8, [X8+2736]
	055 Move X21, 0x231C000
	056 Move W1, 1
	057 Move X0, [X8]
	058 Move X21, [X21+1608]
	059 Call 0x1C17D6C
	060 Move X8, [X21]
	061 Move X20, X0
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Move X0, X8
	066 Call 0x1C17DFC
	067 Move X22, 0x2601000
	068 Move W8, [X22+1927]
	069 Compare W8, 0
	070 JumpIfNotEqual {76}
	071 Move X0, 0x231C000
	072 Move X0, [X0+1608]
	073 Call 0x1C17CF4
	074 Move W8, 1
	075 Move [X22+1927], W8
	076 Move X0, [X21]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {82}
	080 Call 0x1C17DFC
	081 Move X0, [X21]
	082 Move X8, [X0+184]
	083 Move X8, [X8]
	084 Compare X8, 0
	085 JumpIfEqual {177}
	086 Move X8, [X8+184]
	087 Compare X8, 0
	088 JumpIfEqual {177}
	089 Move X8, [X8+128]
	090 Compare X8, 0
	091 JumpIfEqual {177}
	092 Move X9, 0x231E000
	093 Move X9, [X9+1040]
	094 Move X0, [X8+72]
	095 Move X21, 0x2321000
	096 Move X1, [X9]
	097 Move X21, [X21+2192]
	098 Call StatePrimitive`1<Int32>.op_Implicit, X0
	099 Move X8, [X21]
	100 Move W22, W0
	101 Move X0, X8
	102 Call 0x1C17F10
	103 Add W1, W22, W19
	104 Move X2, X31
	105 Move X21, X0
	106 Call SetUserSoftCurrencyAmountAction..ctor, X0, X1
	107 Compare X20, 0
	108 JumpIfEqual {177}
	109 Compare X21, 0
	110 JumpIfEqual {117}
	111 Move X8, [X20]
	112 Move X0, X21
	113 Move X1, [X8+64]
	114 Call 0x1C17E00
	115 Compare X0, 0
	116 JumpIfEqual {179}
	117 Move W8, [X20+24]
	118 Compare W8, 0
	119 JumpIfEqual {178}
	120 Move X22, 0x2320000
	121 Move X23, 0x231C000
	122 Move X24, 0x2321000
	123 Move X25, 0x2320000
	124 Move X22, [X22+352]
	125 Move X23, [X23+1880]
	126 Move X24, [X24+2208]
	127 Move X25, [X25+360]
	128 Move X0, X20
	129 Move X1, X31
	130 Move [X20+32], X21
	131 Call App.ExecuteActionOrDelay, X0
	132 Move X0, [X22]
	133 Move W1, 1
	134 Call 0x1C17D6C
	135 Move X20, X0
	136 Move X0, [X23]
	137 Add X1, X31, 28
	138 Move [X31+28], W19
	139 Call 0x1C17E04
	140 Move X1, [X24]
	141 Move X3, [X25]
	142 Move X2, X0
	143 Add X0, X31, 0
	144 Move [X31], X31
	145 Move [X31+8], X31
	146 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	147 Compare X20, 0
	148 JumpIfEqual {177}
	149 Move W8, [X20+24]
	150 Compare W8, 0
	151 JumpIfEqual {178}
	152 Move V0, [X31]
	153 Move X8, 0x231C000
	154 Move X8, [X8+2896]
	155 Move X19, 0x2321000
	156 Move [X20+2], V0
	157 Move X0, [X8]
	158 Move W8, [X0+224]
	159 Move X19, [X19+2216]
	160 Compare W8, 0
	161 JumpIfNotEqual {163}
	162 Call 0x1C17DFC
	163 Move X0, [X19]
	164 Move X1, X20
	165 Move X2, X31
	166 Call Analytics.Track, X0, X1
	167 Move X20, [X31+80]
	168 Move X19, [X31+88]
	169 Move X22, [X31+64]
	170 Move X21, [X31+72]
	171 Move X24, [X31+48]
	172 Move X23, [X31+56]
	173 Move X30, [X31+32]
	174 Move X25, [X31+40]
	175 Add X31, X31, 96
	176 Return 
	177 Call 0x1C17F20
	178 Call 0x1C17F28
	179 Call 0x1C17F44
	180 Move X1, X31
	181 Call 0x1C17DEC

Method: System.Void SubtractPlayerMoney(System.Int32 amount)

Disassembly:
	0x01DD7F8C BL 0x1DD7E44
	0x01DD7F90 STR W0, [X31 + 0x8]
	0x01DD7F94 LDR X1, [X19 + 0x38]
	0x01DD7F98 ADD X0, X31, 0x8
	0x01DD7F9C MOV X2, X31
	0x01DD7FA0 BL 0x1E91B84
	0x01DD7FA4 TBZ X0, 0x0, 0x1DD7FBC
	0x01DD7FA8 LDR X0, [X19 + 0x38]
	0x01DD7FAC CBZ X0, 0x1DD7FC8
	0x01DD7FB0 LDR X1, [X19 + 0x40]
	0x01DD7FB4 MOV X2, X31
	0x01DD7FB8 BL 0x1EA3884
	0x01DD7FBC LDP X30, X19, [X31 + 0x10]
	0x01DD7FC0 ADD X31, X31, 0x20
	0x01DD7FC4 RET
	0x01DD7FC8 BL 0x1C16F20
	0x01DD7FCC MOVZ W8, 0x41200000
	0x01DD7FD0 MOV X1, X31
	0x01DD7FD4 STR W8, [X0 + 0x80]
	0x01DD7FD8 B 0x1E74F04
	0x01DD7FDC LDR W1, [X0 + 0x84]
	0x01DD7FE0 B 0x1DD7EA4
	0x01DD7FE4 STP X30, X19, [X31 - 0x10]!
	0x01DD7FE8 MOV X19, X0
	0x01DD7FEC BL 0x1DD7E44
	0x01DD7FF0 STR W0, [X19 + 0x84]
	0x01DD7FF4 LDP X30, X19, [X31], #0x10
	0x01DD7FF8 RET
	0x01DD7FFC LDRB W8, [X0 + 0x28]
	0x01DD8000 ANDS W31, W8, 0x1
	0x01DD8004 CSET W0, EQ
	0x01DD8008 RET
	0x01DD800C MOV X1, X31
	0x01DD8010 B 0x3C36D2C
	0x01DD8014 STP X30, X21, [X31 - 0x20]!
	0x01DD8018 STP X20, X19, [X31 + 0x10]
	0x01DD801C ADRP X21, 0x2600000
	0x01DD8020 ADRP X20, 0x231D000
	0x01DD8024 LDRB W8, [X21 + 0xC46]
	0x01DD8028 LDR X20, [X20 + 0x5A8]
	0x01DD802C MOV X19, X0
	0x01DD8030 TBNZ X8, 0x0, 0x1DD8048
	0x01DD8034 ADRP X0, 0x231D000
	0x01DD8038 LDR X0, [X0 + 0x5A8]
	0x01DD803C BL 0x1C16CF4
	0x01DD8040 MOVZ W8, 0x1
	0x01DD8044 STRB W8, [X21 + 0xC46]
	0x01DD8048 LDR X0, [X20]
	0x01DD804C LDR W19, [X19 + 0x4C]
	0x01DD8050 LDR W8, [X0 + 0xE0]
	0x01DD8054 CBNZ W8, 0x1DD805C
	0x01DD8058 BL 0x1C16DFC
	0x01DD805C MOV W0, W19
	0x01DD8060 LDP X20, X19, [X31 + 0x10]
	0x01DD8064 MOV X1, X31
	0x01DD8068 LDP X30, X21, [X31], #0x20
	0x01DD806C B 0x31AD670
	0x01DD8070 STR X1, [X0 + 0x20]
	0x01DD8074 STP W2, W3, [X0 + 0x28]
	0x01DD8078 RET
	0x01DD807C STR X30, [X31 - 0x30]!
	0x01DD8080 STP X22, X21, [X31 + 0x10]
	0x01DD8084 STP X20, X19, [X31 + 0x20]
	0x01DD8088 ADRP X21, 0x2600000
	0x01DD808C LDRB W8, [X21 + 0xC47]
	0x01DD8090 MOV X20, X1
	0x01DD8094 MOV X19, X0
	0x01DD8098 TBNZ X8, 0x0, 0x1DD80C8
	0x01DD809C ADRP X0, 0x2320000
	0x01DD80A0 LDR X0, [X0 + 0x8E8]
	0x01DD80A4 BL 0x1C16CF4
	0x01DD80A8 ADRP X0, 0x231B000
	0x01DD80AC LDR X0, [X0 + 0x598]
	0x01DD80B0 BL 0x1C16CF4
	0x01DD80B4 ADRP X0, 0x231E000
	0x01DD80B8 LDR X0, [X0 + 0x428]
	0x01DD80BC BL 0x1C16CF4
	0x01DD80C0 MOVZ W8, 0x1
	0x01DD80C4 STRB W8, [X21 + 0xC47]
	0x01DD80C8 MOV X0, X31
	0x01DD80CC BL 0x3C3C6C4
	0x01DD80D0 LDR V1, [X19 + 0x48]
	0x01DD80D4 ADRP X8, 0xFFFFFFFFFED12000
	0x01DD80D8 LDR V2, [X8 + 0x35C]
	0x01DD80DC FSUB S0, S0, S1
	0x01DD80E0 FCMP S0, S2
	0x01DD80E4 B.MI 0x1DD81D4
	0x01DD80E8 CBZ X20, 0x1DD81E4
	0x01DD80EC MOV X0, X20
	0x01DD80F0 MOV X1, X31
	0x01DD80F4 BL 0x3C8E82C
	0x01DD80F8 ADRP X22, 0x231B000
	0x01DD80FC LDR X22, [X22 + 0x598]
	0x01DD8100 MOV X21, X0
	0x01DD8104 LDR X8, [X22]
	0x01DD8108 LDR W9, [X8 + 0xE0]
	0x01DD810C CBNZ W9, 0x1DD8118
	0x01DD8110 MOV X0, X8
	0x01DD8114 BL 0x1C16DFC
	0x01DD8118 MOV X0, X21
	0x01DD811C MOV X1, X31
	0x01DD8120 MOV X2, X31
	0x01DD8124 BL 0x3C3883C
	0x01DD8128 TBNZ X0, 0x0, 0x1DD81D4
	0x01DD812C MOV X0, X20
	0x01DD8130 MOV X1, X31
	0x01DD8134 BL 0x3C32ECC
	0x01DD8138 CBZ X0, 0x1DD81E4
	0x01DD813C ADRP X8, 0x231E000
	0x01DD8140 LDR X8, [X8 + 0x428]
	0x01DD8144 MOV X2, X31
	0x01DD8148 LDR X1, [X8]
	0x01DD814C BL 0x3C33498
	0x01DD8150 TBZ X0, 0x0, 0x1DD81D4
	0x01DD8154 MOV X0, X20
	0x01DD8158 MOV X1, X31
	0x01DD815C BL 0x3C8E82C
	0x01DD8160 CBZ X0, 0x1DD81E4
	0x01DD8164 MOV X1, X31
	0x01DD8168 BL 0x3C32ECC
	0x01DD816C CBZ X0, 0x1DD81E4
	0x01DD8170 ADRP X8, 0x2320000
	0x01DD8174 LDR X8, [X8 + 0x8E8]
	0x01DD8178 LDR X1, [X8]
	0x01DD817C BL 0x21E58C4
	0x01DD8180 LDR X8, [X22]
	0x01DD8184 MOV X20, X0
	0x01DD8188 LDR W9, [X8 + 0xE0]
	0x01DD818C CBNZ W9, 0x1DD8198
	0x01DD8190 MOV X0, X8
	0x01DD8194 BL 0x1C16DFC
	0x01DD8198 MOV X0, X20
	0x01DD819C MOV X1, X31
	0x01DD81A0 MOV X2, X31
	0x01DD81A4 BL 0x3C354F8
	0x01DD81A8 TBZ X0, 0x0, 0x1DD81D4
	0x01DD81AC MOV X0, X31
	0x01DD81B0 BL 0x3C3C6C4
	0x01DD81B4 LDR X0, [X19 + 0x20]
	0x01DD81B8 STR S0, [X19 + 0x48]
	0x01DD81BC CBZ X0, 0x1DD81E4
	0x01DD81C0 LDR W1, [X19 + 0x2C]
	0x01DD81C4 LDP X20, X19, [X31 + 0x20]
	0x01DD81C8 LDP X22, X21, [X31 + 0x10]
	0x01DD81CC LDR X30, [X31], #0x30
	0x01DD81D0 B 0x1DD81E8
	0x01DD81D4 LDP X20, X19, [X31 + 0x20]
	0x01DD81D8 LDP X22, X21, [X31 + 0x10]
	0x01DD81DC LDR X30, [X31], #0x30
	0x01DD81E0 RET
	0x01DD81E4 BL 0x1C16F20
	0x01DD81E8 SUB X31, X31, 0x90
	0x01DD81EC STR D8, [X31 + 0x60]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+40], X25
	004 Move [X31+48], X24
	005 Move [X31+56], X23
	006 Move [X31+64], X22
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 Move X20, 0x2602000
	011 Move W8, [X20+3136]
	012 Move W19, W0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {49}
	017 Move X0, 0x231D000
	018 Move X0, [X0+2896]
	019 Call 0x1C17CF4
	020 Move X0, 0x231D000
	021 Move X0, [X0+1608]
	022 Call 0x1C17CF4
	023 Move X0, 0x231D000
	024 Move X0, [X0+2736]
	025 Call 0x1C17CF4
	026 Move X0, 0x231D000
	027 Move X0, [X0+1880]
	028 Call 0x1C17CF4
	029 Move X0, 0x2322000
	030 Move X0, [X0+2192]
	031 Call 0x1C17CF4
	032 Move X0, 0x231F000
	033 Move X0, [X0+1040]
	034 Call 0x1C17CF4
	035 Move X0, 0x2321000
	036 Move X0, [X0+352]
	037 Call 0x1C17CF4
	038 Move X0, 0x2320000
	039 Move X0, [X0+360]
	040 Call 0x1C17CF4
	041 Move X0, 0x2321000
	042 Move X0, [X0+2200]
	043 Call 0x1C17CF4
	044 Move X0, 0x2321000
	045 Move X0, [X0+2208]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X20+3136], W8
	049 Move TEMP, X19
	050 And TEMP, TEMP, -2147483648
	051 Compare TEMP, -2147483648
	052 JumpIfEqual {167}
	053 Move X8, 0x231C000
	054 Move X8, [X8+2736]
	055 Move X21, 0x231C000
	056 Move W1, 1
	057 Move X0, [X8]
	058 Move X21, [X21+1608]
	059 Call 0x1C17D6C
	060 Move X8, [X21]
	061 Move X20, X0
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Move X0, X8
	066 Call 0x1C17DFC
	067 Move X22, 0x2601000
	068 Move W8, [X22+1927]
	069 Compare W8, 0
	070 JumpIfNotEqual {76}
	071 Move X0, 0x231C000
	072 Move X0, [X0+1608]
	073 Call 0x1C17CF4
	074 Move W8, 1
	075 Move [X22+1927], W8
	076 Move X0, [X21]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {82}
	080 Call 0x1C17DFC
	081 Move X0, [X21]
	082 Move X8, [X0+184]
	083 Move X8, [X8]
	084 Compare X8, 0
	085 JumpIfEqual {177}
	086 Move X8, [X8+184]
	087 Compare X8, 0
	088 JumpIfEqual {177}
	089 Move X8, [X8+128]
	090 Compare X8, 0
	091 JumpIfEqual {177}
	092 Move X9, 0x231E000
	093 Move X9, [X9+1040]
	094 Move X0, [X8+72]
	095 Move X21, 0x2321000
	096 Move X1, [X9]
	097 Move X21, [X21+2192]
	098 Call StatePrimitive`1<Int32>.op_Implicit, X0
	099 Move X8, [X21]
	100 Move W22, W0
	101 Move X0, X8
	102 Call 0x1C17F10
	103 Subtract W1, W22, W19
	104 Move X2, X31
	105 Move X21, X0
	106 Call SetUserSoftCurrencyAmountAction..ctor, X0, X1
	107 Compare X20, 0
	108 JumpIfEqual {177}
	109 Compare X21, 0
	110 JumpIfEqual {117}
	111 Move X8, [X20]
	112 Move X0, X21
	113 Move X1, [X8+64]
	114 Call 0x1C17E00
	115 Compare X0, 0
	116 JumpIfEqual {179}
	117 Move W8, [X20+24]
	118 Compare W8, 0
	119 JumpIfEqual {178}
	120 Move X22, 0x2320000
	121 Move X23, 0x231C000
	122 Move X24, 0x2321000
	123 Move X25, 0x2320000
	124 Move X22, [X22+352]
	125 Move X23, [X23+1880]
	126 Move X24, [X24+2208]
	127 Move X25, [X25+360]
	128 Move X0, X20
	129 Move X1, X31
	130 Move [X20+32], X21
	131 Call App.ExecuteActionOrDelay, X0
	132 Move X0, [X22]
	133 Move W1, 1
	134 Call 0x1C17D6C
	135 Move X20, X0
	136 Move X0, [X23]
	137 Add X1, X31, 28
	138 Move [X31+28], W19
	139 Call 0x1C17E04
	140 Move X1, [X24]
	141 Move X3, [X25]
	142 Move X2, X0
	143 Add X0, X31, 0
	144 Move [X31], X31
	145 Move [X31+8], X31
	146 Call ValueTuple`2<Object, Object>..ctor, X0, X1, X2
	147 Compare X20, 0
	148 JumpIfEqual {177}
	149 Move W8, [X20+24]
	150 Compare W8, 0
	151 JumpIfEqual {178}
	152 Move V0, [X31]
	153 Move X8, 0x231C000
	154 Move X8, [X8+2896]
	155 Move X19, 0x2321000
	156 Move [X20+2], V0
	157 Move X0, [X8]
	158 Move W8, [X0+224]
	159 Move X19, [X19+2200]
	160 Compare W8, 0
	161 JumpIfNotEqual {163}
	162 Call 0x1C17DFC
	163 Move X0, [X19]
	164 Move X1, X20
	165 Move X2, X31
	166 Call Analytics.Track, X0, X1
	167 Move X20, [X31+80]
	168 Move X19, [X31+88]
	169 Move X22, [X31+64]
	170 Move X21, [X31+72]
	171 Move X24, [X31+48]
	172 Move X23, [X31+56]
	173 Move X30, [X31+32]
	174 Move X25, [X31+40]
	175 Add X31, X31, 96
	176 Return 
	177 Call 0x1C17F20
	178 Call 0x1C17F28
	179 Call 0x1C17F44
	180 Move X1, X31
	181 Call 0x1C17DEC

Method: System.Void .ctor()

Disassembly:
	0x01DD8454 CBNZ W8, 0x1DD845C
	0x01DD8458 BL 0x1C16DFC

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

