Type: AnimalCompany.AudioMixerManager

Method: UnityEngine.Audio.AudioMixerGroup GetAudioGroup(AnimalCompany.AudioMixerManager/Group group)

Disassembly:
	0x01DD3BFC LDR X30, [X31], #0x30
	0x01DD3C00 RET
	0x01DD3C04 MOV X0, X19
	0x01DD3C08 LDP X20, X19, [X31 + 0x20]
	0x01DD3C0C LDP X22, X21, [X31 + 0x10]
	0x01DD3C10 MOV X1, X31
	0x01DD3C14 LDR X30, [X31], #0x30
	0x01DD3C18 B 0x31D85D4
	0x01DD3C1C BL 0x1C16F20
	0x01DD3C20 STP X30, X25, [X31 - 0x40]!
	0x01DD3C24 STP X24, X23, [X31 + 0x10]
	0x01DD3C28 STP X22, X21, [X31 + 0x20]
	0x01DD3C2C STP X20, X19, [X31 + 0x30]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move X9, -19550208
	003 Move W8, W0
	004 Add X9, X9, 2358
	005 NotImplemented "Instruction ADR not yet implemented."
	006 Move W11, [X9]
	007 Add X10, X10, X11
	008 CallNoReturn X10
	009 Call AudioMixerManager.get_audioGroupGameplay
	010 Return X0
	011 Call AudioMixerManager.get_audioGroupSFX
	012 Return X0
	013 Call AudioMixerManager.get_audioGroupMonster
	014 Return X0
	015 Call AudioMixerManager.get_audioGroupAmbience
	016 Return X0

Method: UnityEngine.Audio.AudioMixerGroup get_audioGroupGameplay()

Disassembly:
	0x01DD56B0 LDP D13, D12, [X31 + 0x8]
	0x01DD56B4 MOV V5.16B, V14.16B
	0x01DD56B8 LDR V14, [X31], #0x50
	0x01DD56BC B 0x1DD50BC
	0x01DD56C0 SUB X31, X31, 0x170
	0x01DD56C4 STR D14, [X31 + 0x110]
	0x01DD56C8 STP D13, D12, [X31 + 0x118]
	0x01DD56CC STP D11, D10, [X31 + 0x128]
	0x01DD56D0 STP D9, D8, [X31 + 0x138]
	0x01DD56D4 STR X29, [X31 + 0x148]
	0x01DD56D8 STP X30, X21, [X31 + 0x150]
	0x01DD56DC STP X20, X19, [X31 + 0x160]
	0x01DD56E0 MOV X19, X0
	0x01DD56E4 ADD X8, X31, 0x90
	0x01DD56E8 MOV X0, X31
	0x01DD56EC BL 0x3C0D0B0
	0x01DD56F0 LDP V0, V1, [X31 + 0x90]
	0x01DD56F4 LDP V2, V3, [X31 + 0xB0]
	0x01DD56F8 MOV X0, X19
	0x01DD56FC MOV X1, X31
	0x01DD5700 STP V0, V1, [X31 + 0xD0]
	0x01DD5704 STP V2, V3, [X31 + 0xF0]
	0x01DD5708 BL 0x3C32E90
	0x01DD570C CBZ X0, 0x1DD5938
	0x01DD5710 MOV X1, X31
	0x01DD5714 BL 0x3C3F58C
	0x01DD5718 MOV X0, X19
	0x01DD571C MOV X1, X31
	0x01DD5720 MOV V8.16B, V0.16B
	0x01DD5724 MOV V9.16B, V1.16B
	0x01DD5728 MOV V10.16B, V2.16B
	0x01DD572C BL 0x3C32E90
	0x01DD5730 CBZ X0, 0x1DD5938
	0x01DD5734 MOV X1, X31
	0x01DD5738 BL 0x3C3DEB4
	0x01DD573C ADRP X20, 0x2603000
	0x01DD5740 LDRB W8, [X20 + 0x85B]
	0x01DD5744 MOV V11.16B, V0.16B
	0x01DD5748 MOV V12.16B, V1.16B
	0x01DD574C MOV V13.16B, V2.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2604000
	005 Move X19, 0x2324000
	006 Move W8, [X20+3104]
	007 Move X19, [X19+224]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x2324000
	013 Move X0, [X0+224]
	014 Call 0x1C17CF4
	015 Move X0, 0x2324000
	016 Move X0, [X0+1992]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3104], W8
	020 Move X8, [X19]
	021 Move X8, [X8+184]
	022 Move X0, [X8]
	023 Compare X0, 0
	024 JumpIfNotEqual {45}
	025 Move X8, [X8+32]
	026 Compare X8, 0
	027 JumpIfEqual {49}
	028 Move X0, [X8+32]
	029 Compare X0, 0
	030 JumpIfEqual {49}
	031 Move X8, 0x2324000
	032 Move X8, [X8+1992]
	033 Move X2, X31
	034 Move X1, [X8]
	035 Call AudioMixer.FindMatchingGroups, X0, X1
	036 Compare X0, 0
	037 JumpIfEqual {49}
	038 Move W8, [X0+24]
	039 Compare W8, 0
	040 JumpIfEqual {50}
	041 Move X8, [X19]
	042 Move X0, [X0+32]
	043 Move X8, [X8+184]
	044 Move [X8], X0
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Return X0
	049 Call 0x1C17F20
	050 Call 0x1C17F28

Method: UnityEngine.Audio.AudioMixerGroup get_audioGroupSFX()

Disassembly:
	0x01DD5750 MOV V14.16B, V3.16B
	0x01DD5754 CBNZ W8, 0x1DD576C
	0x01DD5758 ADRP X0, 0x231E000
	0x01DD575C LDR X0, [X0 + 0x5A0]
	0x01DD5760 BL 0x1C16CF4
	0x01DD5764 MOVZ W8, 0x1
	0x01DD5768 STRB W8, [X20 + 0x85B]
	0x01DD576C ADRP X20, 0x231E000
	0x01DD5770 LDR X20, [X20 + 0x5A0]
	0x01DD5774 MOV V1.16B, V9.16B
	0x01DD5778 MOV V2.16B, V10.16B
	0x01DD577C MOV V3.16B, V11.16B
	0x01DD5780 LDR X8, [X20]
	0x01DD5784 MOV V4.16B, V12.16B
	0x01DD5788 MOV V5.16B, V13.16B
	0x01DD578C MOV V6.16B, V14.16B
	0x01DD5790 LDR X8, [X8 + 0xB8]
	0x01DD5794 MOV X0, X31
	0x01DD5798 LDR V0, [X8 + 0x14]
	0x01DD579C LDUR X9, [X8 + 0xC]
	0x01DD57A0 ADD X8, X31, 0x90
	0x01DD57A4 STR S0, [X31 + 0x8]
	0x01DD57A8 MOV V0.16B, V8.16B
	0x01DD57AC STR X9, [X31]
	0x01DD57B0 BL 0x3C26FA8
	0x01DD57B4 LDP V0, V1, [X31 + 0x90]
	0x01DD57B8 LDP V2, V3, [X31 + 0xB0]
	0x01DD57BC ADD X0, X31, 0x50
	0x01DD57C0 MOV X1, X31
	0x01DD57C4 STP V0, V1, [X31 + 0x50]
	0x01DD57C8 STP V2, V3, [X31 + 0x70]
	0x01DD57CC BL 0x3C0D150
	0x01DD57D0 ADRP X8, 0xFFFFFFFFFED15000
	0x01DD57D4 LDR V3, [X8 + 0x44C]
	0x01DD57D8 FMOV S0, 1
	0x01DD57DC FMOV S1, W31
	0x01DD57E0 FMOV S2, W31
	0x01DD57E4 MOV X0, X31
	0x01DD57E8 FMOV S8, 1
	0x01DD57EC BL 0x3C0D030

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2604000
	005 Move X19, 0x2324000
	006 Move W8, [X20+3105]
	007 Move X19, [X19+224]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x2324000
	013 Move X0, [X0+224]
	014 Call 0x1C17CF4
	015 Move X0, 0x2324000
	016 Move X0, [X0+2000]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3105], W8
	020 Move X8, [X19]
	021 Move X8, [X8+184]
	022 Move X0, [X8+8]
	023 Compare X0, 0
	024 JumpIfNotEqual {45}
	025 Move X8, [X8+32]
	026 Compare X8, 0
	027 JumpIfEqual {49}
	028 Move X0, [X8+40]
	029 Compare X0, 0
	030 JumpIfEqual {49}
	031 Move X8, 0x2324000
	032 Move X8, [X8+2000]
	033 Move X2, X31
	034 Move X1, [X8]
	035 Call AudioMixer.FindMatchingGroups, X0, X1
	036 Compare X0, 0
	037 JumpIfEqual {49}
	038 Move W8, [X0+24]
	039 Compare W8, 0
	040 JumpIfEqual {50}
	041 Move X8, [X19]
	042 Move X0, [X0+32]
	043 Move X8, [X8+184]
	044 Move [X8+8], X0
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Return X0
	049 Call 0x1C17F20
	050 Call 0x1C17F28

Method: UnityEngine.Audio.AudioMixerGroup get_audioGroupMonster()

Disassembly:
	0x01DD57F0 LDR W8, [X19 + 0x20]
	0x01DD57F4 CMP W8, 0x2
	0x01DD57F8 B.EQ 0x1DD5824
	0x01DD57FC CMP W8, 0x1
	0x01DD5800 B.EQ 0x1DD5818
	0x01DD5804 CBNZ W8, 0x1DD5840
	0x01DD5808 LDR V5, [X19 + 0x30]
	0x01DD580C FMOV S8, 1
	0x01DD5810 FMOV S4, 1
	0x01DD5814 B 0x1DD582C
	0x01DD5818 LDR V8, [X19 + 0x30]
	0x01DD581C FMOV S4, 1
	0x01DD5820 B 0x1DD5828
	0x01DD5824 LDR V4, [X19 + 0x30]
	0x01DD5828 FMOV S5, 1
	0x01DD582C LDP S1, S2, [X19 + 0x28]
	0x01DD5830 LDR V0, [X19 + 0x24]
	0x01DD5834 MOV V3.16B, V8.16B
	0x01DD5838 MOV X0, X31
	0x01DD583C BL 0x3C0CD6C
	0x01DD5840 ADRP X8, 0xFFFFFFFFFED15000
	0x01DD5844 LDR V3, [X8 + 0x10C]
	0x01DD5848 FMOV S0, 1
	0x01DD584C FMOV S1, W31
	0x01DD5850 FMOV S2, W31
	0x01DD5854 MOV X0, X31
	0x01DD5858 BL 0x3C0D030
	0x01DD585C ADRP X21, 0x2603000
	0x01DD5860 LDRB W8, [X21 + 0x783]
	0x01DD5864 CBNZ W8, 0x1DD587C
	0x01DD5868 ADRP X0, 0x231E000
	0x01DD586C LDR X0, [X0 + 0x5A0]
	0x01DD5870 BL 0x1C16CF4
	0x01DD5874 MOVZ W8, 0x1
	0x01DD5878 STRB W8, [X21 + 0x783]
	0x01DD587C LDR X8, [X20]
	0x01DD5880 MOV X0, X31
	0x01DD5884 LDR X8, [X8 + 0xB8]
	0x01DD5888 LDP S0, S1, [X8]
	0x01DD588C LDR V2, [X8 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2604000
	005 Move X19, 0x2324000
	006 Move W8, [X20+3106]
	007 Move X19, [X19+224]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x2324000
	013 Move X0, [X0+224]
	014 Call 0x1C17CF4
	015 Move X0, 0x2324000
	016 Move X0, [X0+2008]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3106], W8
	020 Move X8, [X19]
	021 Move X8, [X8+184]
	022 Move X0, [X8+16]
	023 Compare X0, 0
	024 JumpIfNotEqual {45}
	025 Move X8, [X8+32]
	026 Compare X8, 0
	027 JumpIfEqual {49}
	028 Move X0, [X8+40]
	029 Compare X0, 0
	030 JumpIfEqual {49}
	031 Move X8, 0x2324000
	032 Move X8, [X8+2008]
	033 Move X2, X31
	034 Move X1, [X8]
	035 Call AudioMixer.FindMatchingGroups, X0, X1
	036 Compare X0, 0
	037 JumpIfEqual {49}
	038 Move W8, [X0+24]
	039 Compare W8, 0
	040 JumpIfEqual {50}
	041 Move X8, [X19]
	042 Move X0, [X0+32]
	043 Move X8, [X8+184]
	044 Move [X8+16], X0
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Return X0
	049 Call 0x1C17F20
	050 Call 0x1C17F28

Method: UnityEngine.Audio.AudioMixerGroup get_audioGroupAmbience()

Disassembly:
	0x01DD5890 ADRP X8, 0xFFFFFFFFFED15000
	0x01DD5894 LDR V8, [X8 + 0x35C]
	0x01DD5898 MOV V3.16B, V8.16B
	0x01DD589C BL 0x3C0CC38
	0x01DD58A0 LDP V0, V1, [X31 + 0xD0]
	0x01DD58A4 LDP V2, V3, [X31 + 0xF0]
	0x01DD58A8 ADD X0, X31, 0x10
	0x01DD58AC MOV X1, X31
	0x01DD58B0 STP V0, V1, [X31 + 0x10]
	0x01DD58B4 STP V2, V3, [X31 + 0x30]
	0x01DD58B8 BL 0x3C0D150
	0x01DD58BC MOV X0, X19
	0x01DD58C0 BL 0x1DD5510
	0x01DD58C4 CBZ X0, 0x1DD5938
	0x01DD58C8 LDR X8, [X0 + 0x18]
	0x01DD58CC MOV X19, X0
	0x01DD58D0 CMP W8, 0x1
	0x01DD58D4 B.LT 0x1DD5910
	0x01DD58D8 MOV X20, X31
	0x01DD58DC AND X8, X8, 0x0
	0x01DD58E0 ADD X21, X19, 0x28
	0x01DD58E4 CMP X20, W8, UXTW
	0x01DD58E8 B.CS 0x1DD5934
	0x01DD58EC LDP S0, S1, [X21 - 0x8]
	0x01DD58F0 LDR V2, [X21], #0xC
	0x01DD58F4 MOV V3.16B, V8.16B
	0x01DD58F8 MOV X0, X31
	0x01DD58FC BL 0x3C0CC38
	0x01DD5900 LDR W8, [X19 + 0x18]
	0x01DD5904 ADD X20, X20, 0x1
	0x01DD5908 CMP X20, W8, SXTW
	0x01DD590C B.LT 0x1DD58E4
	0x01DD5910 LDP X20, X19, [X31 + 0x160]
	0x01DD5914 LDP X30, X21, [X31 + 0x150]
	0x01DD5918 LDR X29, [X31 + 0x148]
	0x01DD591C LDP D9, D8, [X31 + 0x138]
	0x01DD5920 LDP D11, D10, [X31 + 0x128]
	0x01DD5924 LDP D13, D12, [X31 + 0x118]
	0x01DD5928 LDR V14, [X31 + 0x110]
	0x01DD592C ADD X31, X31, 0x170

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2604000
	005 Move X19, 0x2324000
	006 Move W8, [X20+3107]
	007 Move X19, [X19+224]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x2324000
	013 Move X0, [X0+224]
	014 Call 0x1C17CF4
	015 Move X0, 0x2324000
	016 Move X0, [X0+2016]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3107], W8
	020 Move X8, [X19]
	021 Move X8, [X8+184]
	022 Move X0, [X8+24]
	023 Compare X0, 0
	024 JumpIfNotEqual {45}
	025 Move X8, [X8+32]
	026 Compare X8, 0
	027 JumpIfEqual {49}
	028 Move X0, [X8+40]
	029 Compare X0, 0
	030 JumpIfEqual {49}
	031 Move X8, 0x2324000
	032 Move X8, [X8+2016]
	033 Move X2, X31
	034 Move X1, [X8]
	035 Call AudioMixer.FindMatchingGroups, X0, X1
	036 Compare X0, 0
	037 JumpIfEqual {49}
	038 Move W8, [X0+24]
	039 Compare W8, 0
	040 JumpIfEqual {50}
	041 Move X8, [X19]
	042 Move X0, [X0+32]
	043 Move X8, [X8+184]
	044 Move [X8+24], X0
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Return X0
	049 Call 0x1C17F20
	050 Call 0x1C17F28

Method: System.Single get_gamePlayPitch()

Disassembly:
	0x01DD5930 RET
	0x01DD5934 BL 0x1C16F28
	0x01DD5938 BL 0x1C16F20
	0x01DD593C STR X30, [X31 - 0x20]!
	0x01DD5940 STP X20, X19, [X31 + 0x10]
	0x01DD5944 ADRP X20, 0x2603000
	0x01DD5948 LDRB W8, [X20 + 0x783]
	0x01DD594C MOV X19, X0
	0x01DD5950 CBNZ W8, 0x1DD5968
	0x01DD5954 ADRP X0, 0x231E000
	0x01DD5958 LDR X0, [X0 + 0x5A0]
	0x01DD595C BL 0x1C16CF4
	0x01DD5960 MOVZ W8, 0x1
	0x01DD5964 STRB W8, [X20 + 0x783]
	0x01DD5968 ADRP X8, 0x231E000
	0x01DD596C LDR X8, [X8 + 0x5A0]
	0x01DD5970 MOV X0, X19
	0x01DD5974 MOV X1, X31
	0x01DD5978 LDR X8, [X8]
	0x01DD597C LDR X8, [X8 + 0xB8]
	0x01DD5980 LDR V0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2604000
	005 Move X20, 0x2324000
	006 Move W8, [X19+3108]
	007 Move X20, [X20+224]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2324000
	013 Move X0, [X0+224]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3108], W8
	017 Move X8, [X20]
	018 Move X8, [X8+184]
	019 Move X8, [X8+32]
	020 Compare X8, 0
	021 JumpIfEqual {27}
	022 Move V0, [X8+48]
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return V0
	027 Call 0x1C17F20

Method: System.Void set_gamePlayPitch(System.Single value)

Disassembly:
	0x01DD5984 LDR V1, [X8 + 0x8]
	0x01DD5988 MOVZ W8, 0x41200000
	0x01DD598C STR W8, [X19 + 0x30]
	0x01DD5990 STUR D0, [X19 + 0x24]
	0x01DD5994 STR S1, [X19 + 0x2C]
	0x01DD5998 LDP X20, X19, [X31 + 0x10]
	0x01DD599C LDR X30, [X31], #0x20
	0x01DD59A0 B 0x3C36C30
	0x01DD59A4 MOVZ W8, 0xCCCD
	0x01DD59A8 MOVK W8, 0x3DCC0000
	0x01DD59AC MOV X1, X31
	0x01DD59B0 STR W8, [X0 + 0x28]
	0x01DD59B4 B 0x3C36C30
	0x01DD59B8 STR X30, [X31 - 0x20]!
	0x01DD59BC STP X20, X19, [X31 + 0x10]
	0x01DD59C0 ADRP X20, 0x2603000
	0x01DD59C4 ADRP X19, 0x2323000
	0x01DD59C8 LDRB W8, [X20 + 0xC32]
	0x01DD59CC LDR X19, [X19 + 0x808]
	0x01DD59D0 TBNZ X8, 0x0, 0x1DD59E8
	0x01DD59D4 ADRP X0, 0x2323000
	0x01DD59D8 LDR X0, [X0 + 0x808]
	0x01DD59DC BL 0x1C16CF4
	0x01DD59E0 MOVZ W8, 0x1
	0x01DD59E4 STRB W8, [X20 + 0xC32]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x2604000
	006 Move X20, 0x2324000
	007 Move W8, [X19+3109]
	008 Move X20, [X20+224]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2324000
	015 Move X0, [X0+224]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3109], W8
	019 Move X8, [X20]
	020 Move X8, [X8+184]
	021 Move X8, [X8+32]
	022 Compare X8, 0
	023 JumpIfEqual {30}
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+8]
	027 Move [X8+48], S8
	028 Move V0, V8
	029 Move V8, [X31+32]
	030 Call 0x1C17F20

Method: System.Single get_gamePlayLowPass()

Disassembly:
	0x01DD5A4C MOVZ W8, 0x1
	0x01DD5A50 STRB W8, [X20 + 0xC33]
	0x01DD5A54 LDR X0, [X21]
	0x01DD5A58 ADRP X22, 0x231E000
	0x01DD5A5C LDR W8, [X0 + 0xE0]
	0x01DD5A60 LDR X22, [X22 + 0x598]
	0x01DD5A64 CBNZ W8, 0x1DD5A70
	0x01DD5A68 BL 0x1C16DFC
	0x01DD5A6C LDR X0, [X21]
	0x01DD5A70 LDR X8, [X22]
	0x01DD5A74 LDR X9, [X0 + 0xB8]
	0x01DD5A78 LDR W10, [X8 + 0xE0]
	0x01DD5A7C LDR X20, [X9]
	0x01DD5A80 CBNZ W10, 0x1DD5A8C
	0x01DD5A84 MOV X0, X8
	0x01DD5A88 BL 0x1C16DFC
	0x01DD5A8C MOV X0, X20
	0x01DD5A90 MOV X1, X31
	0x01DD5A94 MOV X2, X31
	0x01DD5A98 BL 0x3C3883C
	0x01DD5A9C TBZ X0, 0x0, 0x1DD5ACC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2604000
	005 Move X20, 0x2324000
	006 Move W8, [X19+3110]
	007 Move X20, [X20+224]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2324000
	013 Move X0, [X0+224]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3110], W8
	017 Move X8, [X20]
	018 Move X8, [X8+184]
	019 Move X8, [X8+32]
	020 Compare X8, 0
	021 JumpIfEqual {27}
	022 Move V0, [X8+52]
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Return V0
	027 Call 0x1C17F20

Method: System.Void set_gamePlayLowPass(System.Single value)

Disassembly:
	0x01DD5AA0 LDR X0, [X21]
	0x01DD5AA4 LDR W8, [X0 + 0xE0]
	0x01DD5AA8 CBNZ W8, 0x1DD5AB4
	0x01DD5AAC BL 0x1C16DFC
	0x01DD5AB0 LDR X0, [X21]
	0x01DD5AB4 LDR X8, [X0 + 0xB8]
	0x01DD5AB8 LDP X22, X21, [X31 + 0x10]
	0x01DD5ABC STR X19, [X8]
	0x01DD5AC0 LDP X20, X19, [X31 + 0x20]
	0x01DD5AC4 LDR X30, [X31], #0x30
	0x01DD5AC8 RET
	0x01DD5ACC LDR X0, [X22]
	0x01DD5AD0 LDR W8, [X0 + 0xE0]
	0x01DD5AD4 CBNZ W8, 0x1DD5ADC
	0x01DD5AD8 BL 0x1C16DFC
	0x01DD5ADC MOV X0, X19
	0x01DD5AE0 LDP X20, X19, [X31 + 0x20]
	0x01DD5AE4 LDP X22, X21, [X31 + 0x10]
	0x01DD5AE8 MOV X1, X31
	0x01DD5AEC LDR X30, [X31], #0x30
	0x01DD5AF0 B 0x3C394A8
	0x01DD5AF4 STP X30, X21, [X31 - 0x20]!
	0x01DD5AF8 STP X20, X19, [X31 + 0x10]
	0x01DD5AFC ADRP X20, 0x2603000
	0x01DD5B00 ADRP X21, 0x2321000

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x2604000
	006 Move X20, 0x2324000
	007 Move W8, [X19+3111]
	008 Move X20, [X20+224]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2324000
	015 Move X0, [X0+224]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3111], W8
	019 Move X8, [X20]
	020 Move X8, [X8+184]
	021 Move X8, [X8+32]
	022 Compare X8, 0
	023 JumpIfEqual {30}
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+8]
	027 Move [X8+52], S8
	028 Move V0, V8
	029 Move V8, [X31+32]
	030 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x01DD5B94 CBNZ W10, 0x1DD5BA0
	0x01DD5B98 MOV X0, X8
	0x01DD5B9C BL 0x1C16DFC
	0x01DD5BA0 MOV X0, X20
	0x01DD5BA4 MOV X1, X19
	0x01DD5BA8 MOV X2, X31
	0x01DD5BAC BL 0x3C3883C
	0x01DD5BB0 TBZ X0, 0x0, 0x1DD5BD0
	0x01DD5BB4 LDR X0, [X21]
	0x01DD5BB8 LDR W8, [X0 + 0xE0]
	0x01DD5BBC CBNZ W8, 0x1DD5BC8
	0x01DD5BC0 BL 0x1C16DFC
	0x01DD5BC4 LDR X0, [X21]
	0x01DD5BC8 LDR X8, [X0 + 0xB8]
	0x01DD5BCC STR X31, [X8]
	0x01DD5BD0 LDP X20, X19, [X31 + 0x10]
	0x01DD5BD4 LDP X30, X21, [X31], #0x20
	0x01DD5BD8 RET
	0x01DD5BDC BL 0x1C16F20
	0x01DD5BE0 STP X30, X21, [X31 - 0x20]!
	0x01DD5BE4 STP X20, X19, [X31 + 0x10]
	0x01DD5BE8 ADRP X21, 0x2603000
	0x01DD5BEC ADRP X20, 0x231E000
	0x01DD5BF0 LDRB W8, [X21 + 0xC35]
	0x01DD5BF4 LDR X20, [X20 + 0x598]
	0x01DD5BF8 MOV X19, X0
	0x01DD5BFC TBNZ X8, 0x0, 0x1DD5C14
	0x01DD5C00 ADRP X0, 0x231E000
	0x01DD5C04 LDR X0, [X0 + 0x598]
	0x01DD5C08 BL 0x1C16CF4
	0x01DD5C0C MOVZ W8, 0x1
	0x01DD5C10 STRB W8, [X21 + 0xC35]
	0x01DD5C14 MOV X0, X19
	0x01DD5C18 MOV X1, X31
	0x01DD5C1C BL 0x1E73F88
	0x01DD5C20 LDR X0, [X20]
	0x01DD5C24 LDR X20, [X19 + 0x80]
	0x01DD5C28 LDR W8, [X0 + 0xE0]
	0x01DD5C2C CBNZ W8, 0x1DD5C34
	0x01DD5C30 BL 0x1C16DFC
	0x01DD5C34 MOV X0, X20
	0x01DD5C38 MOV X1, X31
	0x01DD5C3C MOV X2, X31
	0x01DD5C40 BL 0x3C354F8
	0x01DD5C44 TBZ X0, 0x0, 0x1DD5C68
	0x01DD5C48 LDRB W8, [X19 + 0x88]
	0x01DD5C4C CBZ W8, 0x1DD5C68
	0x01DD5C50 LDR X0, [X19 + 0x80]
	0x01DD5C54 CBZ X0, 0x1DD5C74
	0x01DD5C58 LDP X20, X19, [X31 + 0x10]
	0x01DD5C5C MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2604000
	007 Move X21, 0x2324000
	008 Move X22, 0x231F000
	009 Move W8, [X20+3112]
	010 Move X21, [X21+224]
	011 Move X22, [X22+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2324000
	018 Move X0, [X0+224]
	019 Call 0x1C17CF4
	020 Move X0, 0x231F000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3112], W8
	025 Move X8, [X21]
	026 Move X0, [X22]
	027 Move X8, [X8+184]
	028 Move W9, [X0+224]
	029 Move X20, [X8+32]
	030 Compare W9, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {54}
	041 Move X8, [X21]
	042 Move S0, 1
	043 Move X8, [X8+184]
	044 Move [X8+32], X19
	045 Call AudioMixerManager.set_gamePlayPitch, V0
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move S0, 1
	051 Move X30, [X31+48]
	052 Call AudioMixerManager.set_gamePlayLowPass, V0
	053 Return 
	054 Move X0, [X22]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X19
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X1, X31
	065 Move X30, [X31+48]
	066 Call Object.Destroy, X0
	067 Return 

Method: System.Void OnDestroy()

Disassembly:
	0x01DD5C78 STP X30, X21, [X31 - 0x20]!
	0x01DD5C7C STP X20, X19, [X31 + 0x10]
	0x01DD5C80 ADRP X21, 0x2603000
	0x01DD5C84 ADRP X20, 0x2321000
	0x01DD5C88 LDRB W8, [X21 + 0xC36]
	0x01DD5C8C LDR X20, [X20 + 0xC30]
	0x01DD5C90 MOV X19, X0
	0x01DD5C94 TBNZ X8, 0x0, 0x1DD5CAC
	0x01DD5C98 ADRP X0, 0x2321000
	0x01DD5C9C LDR X0, [X0 + 0xC30]
	0x01DD5CA0 BL 0x1C16CF4
	0x01DD5CA4 MOVZ W8, 0x1
	0x01DD5CA8 STRB W8, [X21 + 0xC36]
	0x01DD5CAC MOVZ W8, 0x1
	0x01DD5CB0 STRB W8, [X19 + 0x88]
	0x01DD5CB4 LDR X0, [X20]
	0x01DD5CB8 BL 0x1C16F10
	0x01DD5CBC FMOV S0, 30
	0x01DD5CC0 MOV X1, X31
	0x01DD5CC4 MOV X20, X0
	0x01DD5CC8 BL 0x3C3A634
	0x01DD5CCC STR X20, [X19 + 0x90]
	0x01DD5CD0 MOV X0, X19
	0x01DD5CD4 LDP X20, X19, [X31 + 0x10]
	0x01DD5CD8 MOV X1, X31
	0x01DD5CDC LDP X30, X21, [X31], #0x20
	0x01DD5CE0 B 0x1E74F04
	0x01DD5CE4 STR X30, [X31 - 0x30]!
	0x01DD5CE8 STP X22, X21, [X31 + 0x10]
	0x01DD5CEC STP X20, X19, [X31 + 0x20]
	0x01DD5CF0 ADRP X21, 0x2603000
	0x01DD5CF4 ADRP X22, 0x2323000
	0x01DD5CF8 ADRP X19, 0x2323000
	0x01DD5CFC ADRP X20, 0x2323000
	0x01DD5D00 LDRB W8, [X21 + 0xC37]
	0x01DD5D04 LDR X22, [X22 + 0x810]
	0x01DD5D08 LDR X19, [X19 + 0x818]
	0x01DD5D0C LDR X20, [X20 + 0x808]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2604000
	007 Move X21, 0x2324000
	008 Move X20, 0x231F000
	009 Move W8, [X22+3113]
	010 Move X21, [X21+224]
	011 Move X20, [X20+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2324000
	018 Move X0, [X0+224]
	019 Call 0x1C17CF4
	020 Move X0, 0x231F000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3113], W8
	025 Move X8, [X21]
	026 Move X0, [X20]
	027 Move X8, [X8+184]
	028 Move W9, [X0+224]
	029 Move X20, [X8+32]
	030 Compare W9, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X19
	035 Move X2, X31
	036 Call Object.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {44}
	041 Move X8, [X21]
	042 Move X8, [X8+184]
	043 Move [X8+32], X31
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Return 

Method: System.Void ResetSettings()

Disassembly:
	0x01DD5C60 LDP X30, X21, [X31], #0x20
	0x01DD5C64 B 0x36E0220
	0x01DD5C68 LDP X20, X19, [X31 + 0x10]
	0x01DD5C6C LDP X30, X21, [X31], #0x20
	0x01DD5C70 RET
	0x01DD5C74 BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Move S0, 1
	003 Call AudioMixerManager.set_gamePlayPitch, V0
	004 Move S0, 1
	005 Move X30, [X31+16]
	006 Call AudioMixerManager.set_gamePlayLowPass, V0
	007 Return 

Method: System.Void PlayerStun(System.Single duration)

Disassembly:
	0x01DC3284 STP D15, D14, [X31 + 0x10]
	0x01DC3288 STP D13, D12, [X31 + 0x20]
	0x01DC328C STP D11, D10, [X31 + 0x30]
	0x01DC3290 STP D9, D8, [X31 + 0x40]
	0x01DC3294 STR X30, [X31 + 0x50]
	0x01DC3298 STP X24, X23, [X31 + 0x60]
	0x01DC329C STP X22, X21, [X31 + 0x70]
	0x01DC32A0 STP X20, X19, [X31 + 0x80]
	0x01DC32A4 ADRP X21, 0x2615000
	0x01DC32A8 ADRP X24, 0x2330000
	0x01DC32AC LDRB W8, [X21 + 0xB8B]
	0x01DC32B0 LDR X24, [X24 + 0x598]
	0x01DC32B4 MOV W19, W2
	0x01DC32B8 MOV V12.16B, V5.16B
	0x01DC32BC MOV V13.16B, V4.16B
	0x01DC32C0 MOV V14.16B, V3.16B
	0x01DC32C4 MOV V11.16B, V2.16B
	0x01DC32C8 MOV V9.16B, V1.16B
	0x01DC32CC MOV V10.16B, V0.16B
	0x01DC32D0 MOV X22, X1
	0x01DC32D4 MOV X20, X0
	0x01DC32D8 TBNZ X8, 0x0, 0x1DC3314
	0x01DC32DC ADRP X0, 0x2335000
	0x01DC32E0 LDR X0, [X0 + 0x120]
	0x01DC32E4 BL 0x1C16CF4
	0x01DC32E8 ADRP X0, 0x2330000
	0x01DC32EC LDR X0, [X0 + 0x598]
	0x01DC32F0 BL 0x1C16CF4
	0x01DC32F4 ADRP X0, 0x2332000
	0x01DC32F8 LDR X0, [X0 + 0x7C8]
	0x01DC32FC BL 0x1C16CF4
	0x01DC3300 ADRP X0, 0x2335000
	0x01DC3304 LDR X0, [X0 + 0x128]
	0x01DC3308 BL 0x1C16CF4
	0x01DC330C MOVZ W8, 0x1
	0x01DC3310 STRB W8, [X21 + 0xB8B]
	0x01DC3314 LDR X0, [X24]
	0x01DC3318 STR X31, [X31 + 0x58]
	0x01DC331C LDR W8, [X0 + 0xE0]
	0x01DC3320 CBNZ W8, 0x1DC3328

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2616000
	006 Move X19, 0x2336000
	007 Move W8, [X20+3114]
	008 Move X19, [X19+224]
	009 Move V8, V0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2336000
	015 Move X0, [X0+224]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3114], W8
	019 Move X8, [X19]
	020 Move X8, [X8+184]
	021 Move V0, [X8+40]
	022 Move X9, [X8+48]
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 NotImplemented "Instruction FCSEL not yet implemented."
	025 Move [X8+40], S0
	026 Compare X9, 0
	027 JumpIfEqual {33}
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+8]
	031 Move V8, [X31+32]
	032 Return 
	033 Call AudioMixerManager.PlayerStunCoroutine
	034 Move X8, [X19]
	035 Move X9, [X8+184]
	036 Move X8, [X9+32]
	037 Move [X9+48], X0
	038 Compare X8, 0
	039 JumpIfEqual {49}
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+8]
	043 Move X1, X0
	044 Move X0, X8
	045 Move X2, X31
	046 Move V8, [X31+32]
	047 Call MonoBehaviour.StartCoroutine, X0, X1
	048 Return 
	049 Call 0x1C17F20

Method: System.Collections.IEnumerator PlayerStunCoroutine()

Disassembly:
	0x01DD5D10 TBNZ X8, 0x0, 0x1DD5D40
	0x01DD5D14 ADRP X0, 0x2323000
	0x01DD5D18 LDR X0, [X0 + 0x818]
	0x01DD5D1C BL 0x1C16CF4
	0x01DD5D20 ADRP X0, 0x2323000
	0x01DD5D24 LDR X0, [X0 + 0x810]
	0x01DD5D28 BL 0x1C16CF4
	0x01DD5D2C ADRP X0, 0x2323000
	0x01DD5D30 LDR X0, [X0 + 0x808]
	0x01DD5D34 BL 0x1C16CF4
	0x01DD5D38 MOVZ W8, 0x1
	0x01DD5D3C STRB W8, [X21 + 0xC37]
	0x01DD5D40 LDR X0, [X22]
	0x01DD5D44 BL 0x1C16F10
	0x01DD5D48 LDR X1, [X19]
	0x01DD5D4C MOV X19, X0
	0x01DD5D50 BL 0x2A12DD4
	0x01DD5D54 LDR X8, [X20]
	0x01DD5D58 LDP X22, X21, [X31 + 0x10]
	0x01DD5D5C LDR X8, [X8 + 0xB8]
	0x01DD5D60 STR X19, [X8 + 0x8]
	0x01DD5D64 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2604000
	005 Move X20, 0x2324000
	006 Move W8, [X19+3115]
	007 Move X20, [X20+2040]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2324000
	013 Move X0, [X0+2040]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3115], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move W1, W31
	020 Move X2, X31
	021 Move X19, X0
	022 Call <PlayerStunCoroutine>d__39..ctor, X0, X1
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0

Method: System.Void SetGameplayLowPass(System.Single value)

Disassembly:
	0x01DD5B04 LDRB W8, [X20 + 0xC34]
	0x01DD5B08 LDR X21, [X21 + 0xA78]
	0x01DD5B0C MOV X19, X0
	0x01DD5B10 TBNZ X8, 0x0, 0x1DD5B40
	0x01DD5B14 ADRP X0, 0x2323000
	0x01DD5B18 LDR X0, [X0 + 0x808]
	0x01DD5B1C BL 0x1C16CF4
	0x01DD5B20 ADRP X0, 0x2321000
	0x01DD5B24 LDR X0, [X0 + 0xA78]
	0x01DD5B28 BL 0x1C16CF4
	0x01DD5B2C ADRP X0, 0x231E000
	0x01DD5B30 LDR X0, [X0 + 0x598]
	0x01DD5B34 BL 0x1C16CF4
	0x01DD5B38 MOVZ W8, 0x1
	0x01DD5B3C STRB W8, [X20 + 0xC34]
	0x01DD5B40 LDR X0, [X21]
	0x01DD5B44 LDR W8, [X0 + 0xE0]
	0x01DD5B48 CBNZ W8, 0x1DD5B50
	0x01DD5B4C BL 0x1C16DFC
	0x01DD5B50 CBZ X19, 0x1DD5BDC
	0x01DD5B54 LDR W8, [X19 + 0x30]
	0x01DD5B58 ADRP X21, 0x2323000
	0x01DD5B5C LDR X21, [X21 + 0x808]
	0x01DD5B60 ADRP X20, 0x231E000
	0x01DD5B64 ORR W8, W8, 0x8
	0x01DD5B68 STR W8, [X19 + 0x30]
	0x01DD5B6C LDR X0, [X21]
	0x01DD5B70 LDR W8, [X0 + 0xE0]
	0x01DD5B74 LDR X20, [X20 + 0x598]
	0x01DD5B78 CBNZ W8, 0x1DD5B84
	0x01DD5B7C BL 0x1C16DFC
	0x01DD5B80 LDR X0, [X21]
	0x01DD5B84 LDR X8, [X20]
	0x01DD5B88 LDR X9, [X0 + 0xB8]
	0x01DD5B8C LDR W10, [X8 + 0xE0]
	0x01DD5B90 LDR X20, [X9]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, 0x2604000
	005 Move W8, [X19+3116]
	006 Move V8, V0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2324000
	012 Move X0, [X0+2032]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X19+3116], W8
	016 Call AudioMixerManager.get_audioGroupGameplay
	017 Compare X0, 0
	018 JumpIfEqual {44}
	019 Move X1, X31
	020 Call AudioMixerGroup.get_audioMixer, X0
	021 Compare X0, 0
	022 JumpIfEqual {44}
	023 Move X8, 0x2324000
	024 Move X8, [X8+2032]
	025 Move X9, -19832832
	026 Move V1, [X9+388]
	027 Multiply S0, S8, S8
	028 Multiply S0, S0, S8
	029 Move S2, 1
	030 Move W9, 0x43480000
	031 NotImplemented "Instruction FMIN not yet implemented."
	032 Move X1, [X8]
	033 Move X30, [X31+16]
	034 Move X19, [X31+24]
	035 Multiply S1, S2, S1
	036 Move S2, W9
	037 Add S1, S1, S2
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 NotImplemented "Instruction FCSEL not yet implemented."
	040 Move X2, X31
	041 Move V8, [X31+32]
	042 Call AudioMixer.SetFloat, X0, X1, V0
	043 Return 
	044 Call 0x1C17F20

Method: System.Void SetGameplayPitch(System.Single value)

Disassembly:
	0x01DD59E8 LDR X0, [X19]
	0x01DD59EC LDR W8, [X0 + 0xE0]
	0x01DD59F0 CBNZ W8, 0x1DD59FC
	0x01DD59F4 BL 0x1C16DFC
	0x01DD59F8 LDR X0, [X19]
	0x01DD59FC LDR X8, [X0 + 0xB8]
	0x01DD5A00 LDP X20, X19, [X31 + 0x10]
	0x01DD5A04 LDR X0, [X8]
	0x01DD5A08 LDR X30, [X31], #0x20
	0x01DD5A0C RET
	0x01DD5A10 STR X30, [X31 - 0x30]!
	0x01DD5A14 STP X22, X21, [X31 + 0x10]
	0x01DD5A18 STP X20, X19, [X31 + 0x20]
	0x01DD5A1C ADRP X20, 0x2603000
	0x01DD5A20 ADRP X21, 0x2323000
	0x01DD5A24 LDRB W8, [X20 + 0xC33]
	0x01DD5A28 LDR X21, [X21 + 0x808]
	0x01DD5A2C MOV X19, X0
	0x01DD5A30 TBNZ X8, 0x0, 0x1DD5A54
	0x01DD5A34 ADRP X0, 0x2323000
	0x01DD5A38 LDR X0, [X0 + 0x808]
	0x01DD5A3C BL 0x1C16CF4
	0x01DD5A40 ADRP X0, 0x231E000
	0x01DD5A44 LDR X0, [X0 + 0x598]
	0x01DD5A48 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, 0x2604000
	005 Move W8, [X19+3117]
	006 Move V8, V0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2324000
	012 Move X0, [X0+2024]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X19+3117], W8
	016 Call AudioMixerManager.get_audioGroupGameplay
	017 Compare X0, 0
	018 JumpIfEqual {33}
	019 Move X1, X31
	020 Call AudioMixerGroup.get_audioMixer, X0
	021 Compare X0, 0
	022 JumpIfEqual {33}
	023 Move X8, 0x2324000
	024 Move X8, [X8+2024]
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Move V0, V8
	028 Move X2, X31
	029 Move X1, [X8]
	030 Move V8, [X31+32]
	031 Call AudioMixer.SetFloat, X0, X1, V0
	032 Return 
	033 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DD5D68 LDR X30, [X31], #0x30
	0x01DD5D6C RET
	0x01DD5D70 RET
	0x01DD5D74 RET
	0x01DD5D78 SUB X31, X31, 0x50
	0x01DD5D7C STR D10, [X31 + 0x20]
	0x01DD5D80 STP D9, D8, [X31 + 0x28]
	0x01DD5D84 STR X30, [X31 + 0x38]
	0x01DD5D88 STP X20, X19, [X31 + 0x40]
	0x01DD5D8C MOV X1, X31
	0x01DD5D90 MOV X19, X0
	0x01DD5D94 BL 0x3C32E90
	0x01DD5D98 CBZ X0, 0x1DD5E3C
	0x01DD5D9C MOV X1, X31
	0x01DD5DA0 BL 0x3C3F58C
	0x01DD5DA4 ADRP X20, 0x2603000
	0x01DD5DA8 LDR V9, [X19 + 0x98]
	0x01DD5DAC LDRB W8, [X20 + 0x786]
	0x01DD5DB0 LDR V10, [X19 + 0xA0]
	0x01DD5DB4 MOV V8.16B, V2.16B
	0x01DD5DB8 CBNZ W8, 0x1DD5DD8
	0x01DD5DBC ADRP X0, 0x231E000
	0x01DD5DC0 LDR X0, [X0 + 0x5A0]
	0x01DD5DC4 STP V1, V0, [X31]
	0x01DD5DC8 BL 0x1C16CF4
	0x01DD5DCC LDP V1, V0, [X31]
	0x01DD5DD0 MOVZ W8, 0x1
	0x01DD5DD4 STRB W8, [X20 + 0x786]
	0x01DD5DD8 ADRP X8, 0x231E000
	0x01DD5DDC LDR X8, [X8 + 0x5A0]
	0x01DD5DE0 LDR V5, [X19 + 0x94]
	0x01DD5DE4 MOV V0.S[1], V1.S[0]
	0x01DD5DE8 FADD S6, S8, S10
	0x01DD5DEC LDR X8, [X8]
	0x01DD5DF0 FADD V4.2S, V0.2S, V9.2S
	0x01DD5DF4 LDP X20, X19, [X31 + 0x40]
	0x01DD5DF8 LDR X30, [X31 + 0x38]
	0x01DD5DFC LDR X8, [X8 + 0xB8]
	0x01DD5E00 LDP D9, D8, [X31 + 0x28]
	0x01DD5E04 LDR V10, [X31 + 0x20]
	0x01DD5E08 LDR V2, [X8 + 0x18]
	0x01DD5E0C LDR V3, [X8 + 0x20]
	0x00000000 INVALID
	0x01DD5E14 FMUL S0, S3, S5
	0x01DD5E18 MOVI V3.2S, 0x3F, 0x18
	0x00000000 INVALID
	0x01DD5E20 FMOV S3, 0.5
	0x01DD5E24 FMUL S3, S0, S3
	0x01DD5E28 FADD V0.2S, V4.2S, V2.2S
	0x01DD5E2C FADD S2, S6, S3
	0x01DD5E30 MOV S1, V0.S[1]
	0x01DD5E34 ADD X31, X31, 0x50
	0x01DD5E38 RET
	0x01DD5E3C BL 0x1C16F20
	0x01DD5E40 SUB X31, X31, 0x50
	0x01DD5E44 STR D10, [X31 + 0x20]
	0x01DD5E48 STP D9, D8, [X31 + 0x28]
	0x01DD5E4C STR X30, [X31 + 0x38]
	0x01DD5E50 STP X20, X19, [X31 + 0x40]
	0x01DD5E54 MOV X1, X31
	0x01DD5E58 MOV X19, X0
	0x01DD5E5C BL 0x3C32E90
	0x01DD5E60 CBZ X0, 0x1DD5F04
	0x01DD5E64 MOV X1, X31
	0x01DD5E68 BL 0x3C3F58C
	0x01DD5E6C ADRP X20, 0x2603000
	0x01DD5E70 LDR V9, [X19 + 0x98]
	0x01DD5E74 LDRB W8, [X20 + 0x786]
	0x01DD5E78 LDR V10, [X19 + 0xA0]
	0x01DD5E7C MOV V8.16B, V2.16B
	0x01DD5E80 CBNZ W8, 0x1DD5EA0
	0x01DD5E84 ADRP X0, 0x231E000
	0x01DD5E88 LDR X0, [X0 + 0x5A0]
	0x01DD5E8C STP V1, V0, [X31]
	0x01DD5E90 BL 0x1C16CF4
	0x01DD5E94 LDP V1, V0, [X31]
	0x01DD5E98 MOVZ W8, 0x1
	0x01DD5E9C STRB W8, [X20 + 0x786]
	0x01DD5EA0 ADRP X8, 0x231E000
	0x01DD5EA4 LDR X8, [X8 + 0x5A0]
	0x01DD5EA8 LDR V5, [X19 + 0x94]
	0x01DD5EAC MOV V0.S[1], V1.S[0]
	0x01DD5EB0 FADD S6, S8, S10
	0x01DD5EB4 LDR X8, [X8]
	0x01DD5EB8 FADD V4.2S, V0.2S, V9.2S
	0x01DD5EBC LDP X20, X19, [X31 + 0x40]
	0x01DD5EC0 LDR X30, [X31 + 0x38]
	0x01DD5EC4 LDR X8, [X8 + 0xB8]
	0x01DD5EC8 LDP D9, D8, [X31 + 0x28]
	0x01DD5ECC LDR V10, [X31 + 0x20]
	0x01DD5ED0 LDR V2, [X8 + 0x18]
	0x01DD5ED4 LDR V3, [X8 + 0x20]
	0x00000000 INVALID
	0x01DD5EDC FMUL S0, S3, S5
	0x01DD5EE0 MOVI V3.2S, 0xBF, 0x18
	0x00000000 INVALID
	0x01DD5EE8 FMOV S3, -0.5
	0x01DD5EEC FMUL S3, S0, S3

ISIL:
	001 Move V0, 0
	002 Move X1, X31
	003 Move [X0+48], D0
	004 Call MonoBehaviour..ctor, X0
	005 Return 
	006 Subtract X31, X31, 96
	007 Move [X31+16], D15
	008 Move [X31+24], D14
	009 Move [X31+32], D13
	010 Move [X31+40], D12
	011 Move [X31+48], D11
	012 Move [X31+56], D10
	013 Move [X31+64], D9
	014 Move [X31+72], D8
	015 Move [X31+80], X30
	016 Move [X31+88], X19
	017 Move X19, 0x2604000
	018 Move W8, [X19+2596]
	019 Move V10, V5
	020 Move V9, V4
	021 Move V8, V3
	022 Move V12, V2
	023 Move V11, V1
	024 Move V13, V0
	025 Compare W8, 0
	026 JumpIfNotEqual {32}
	027 Move X0, 0x231F000
	028 Move X0, [X0+1448]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X19+2596], W8
	032 Move X19, 0x231F000
	033 Move X19, [X19+1448]
	034 Multiply S0, S13, S13
	035 Multiply S1, S11, S11
	036 Add S0, S0, S1
	037 Move X0, [X19]
	038 Multiply S1, S12, S12
	039 Add S15, S1, S0
	040 Multiply S0, S8, S8
	041 Move W8, [X0+224]
	042 Multiply S1, S9, S9
	043 Add S0, S0, S1
	044 Multiply S1, S10, S10
	045 Add S14, S1, S0
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X8, -19836928
	050 Move V0, [X8+4072]
	051 Move S16, [X31+100]
	052 Move S7, [X31+104]
	053 Move V17, [X31+96]
	054 Multiply S1, S15, S14
	055 NotImplemented "Instruction FSQRT not yet implemented."
	056 NotImplemented "Instruction FCMP not yet implemented."
	057 Move S0, W31
	058 Move X0, [X19]
	059 Multiply S0, S13, S8
	060 Multiply S2, S11, S9
	061 Multiply S3, S12, S10
	062 Add S0, S0, S2
	063 Add S0, S3, S0
	064 Move W8, [X0+224]
	065 NotImplemented "Instruction FDIV not yet implemented."
	066 Move S1, 1
	067 Move S2, -1
	068 NotImplemented "Instruction FMIN not yet implemented."
	069 NotImplemented "Instruction FCMP not yet implemented."
	070 Move V15, V7
	071 NotImplemented "Instruction FCSEL not yet implemented."
	072 Move [X31+8], S17
	073 Move [X31+16], S16
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 NotImplemented "Instruction FCVT not yet implemented."
	078 Call 0x3EB2B80
	079 Move X8, -19832832
	080 Move V1, [X8+1096]
	081 Move S17, [X31+8]
	082 Move S16, [X31+12]
	083 NotImplemented "Instruction INVALID not yet implemented."
	084 Move V7, V15
	085 Multiply S0, S0, S1
	086 Multiply S1, S11, S10
	087 Multiply S2, S12, S9
	088 Multiply S3, S12, S8
	089 Multiply S4, S13, S10
	090 Multiply S5, S13, S9
	091 Multiply S6, S11, S8
	092 Subtract S1, S1, S2
	093 Subtract S2, S3, S4
	094 Subtract S3, S5, S6
	095 Multiply S1, S17, S1
	096 Multiply S2, S16, S2
	097 Multiply S3, S7, S3
	098 Add S1, S1, S2
	099 Move X30, [X31+80]
	100 Move X19, [X31+88]
	101 Move D9, [X31+64]
	102 Move D8, [X31+72]
	103 Move D11, [X31+48]
	104 Move D10, [X31+56]
	105 Move D13, [X31+32]
	106 Move D12, [X31+40]
	107 Move D15, [X31+16]
	108 Move D14, [X31+24]
	109 Add S1, S3, S1
	110 NotImplemented "Instruction FNEG not yet implemented."
	111 NotImplemented "Instruction FCMP not yet implemented."
	112 NotImplemented "Instruction FCSEL not yet implemented."
	113 Add X31, X31, 96
	114 Return 

