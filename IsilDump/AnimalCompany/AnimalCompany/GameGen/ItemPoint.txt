Type: AnimalCompany.GameGen.ItemPoint

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01E0E358 CBNZ W9, 0x1E0E360
	0x01E0E35C BL 0x1C16DFC
	0x01E0E360 MOV X0, X20
	0x01E0E364 MOV X1, X31
	0x01E0E368 MOV X2, X31
	0x01E0E36C BL 0x3C354F8
	0x01E0E370 TBZ X0, 0x0, 0x1E0E5A4
	0x01E0E374 LDR W21, [X19 + 0x28]
	0x01E0E378 FMOV S1, 1
	0x01E0E37C FMOV S2, W31
	0x01E0E380 MOV V3.16B, V8.16B
	0x01E0E384 CMP W21, 0x3
	0x01E0E388 FCSEL S0, S2, S1, CC
	0x01E0E38C FCSEL S1, S1, S2, CC
	0x01E0E390 MOV V2.16B, V1.16B
	0x01E0E394 MOV X0, X31
	0x01E0E398 BL 0x3C0D030
	0x01E0E39C LDR X0, [X19 + 0x20]
	0x01E0E3A0 CBZ X0, 0x1E0E828
	0x01E0E3A4 MOV X1, X31
	0x01E0E3A8 BL 0x3C32E90
	0x01E0E3AC LDR X8, [X22]
	0x01E0E3B0 CBZ X8, 0x1E0E828
	0x01E0E3B4 MOV X20, X0
	0x01E0E3B8 LDR X0, [X8 + 0x60]
	0x01E0E3BC CBZ X0, 0x1E0E828
	0x01E0E3C0 MOV X1, X31
	0x01E0E3C4 BL 0x3C32E90
	0x01E0E3C8 CBZ X0, 0x1E0E828
	0x01E0E3CC MOV X1, X31
	0x01E0E3D0 BL 0x3C3F58C
	0x01E0E3D4 CBZ X20, 0x1E0E828
	0x01E0E3D8 MOV X0, X20
	0x01E0E3DC MOV X1, X31
	0x01E0E3E0 BL 0x3C40B58
	0x01E0E3E4 LDR X0, [X22]
	0x01E0E3E8 CBZ X0, 0x1E0E828
	0x01E0E3EC MOV X1, X31
	0x01E0E3F0 MOV V8.16B, V0.16B
	0x01E0E3F4 MOV V9.16B, V1.16B
	0x01E0E3F8 MOV V10.16B, V2.16B
	0x01E0E3FC BL 0x3C32E90
	0x01E0E400 CBZ X0, 0x1E0E828
	0x01E0E404 MOV X1, X31
	0x01E0E408 BL 0x3C3DEB4
	0x01E0E40C MOV X0, X31
	0x01E0E410 BL 0x3C2A260
	0x01E0E414 LDR X8, [X22]
	0x01E0E418 CBZ X8, 0x1E0E828
	0x01E0E41C LDR X0, [X8 + 0x60]
	0x01E0E420 CBZ X0, 0x1E0E828
	0x01E0E424 MOV X1, X31
	0x01E0E428 MOV V14.16B, V0.16B
	0x01E0E42C MOV V13.16B, V1.16B
	0x01E0E430 MOV V12.16B, V2.16B
	0x01E0E434 MOV V15.16B, V3.16B
	0x01E0E438 STP S10, S9, [X31 + 0x18]
	0x01E0E43C STR S8, [X31 + 0x1E8]
	0x01E0E440 BL 0x3C32E90
	0x01E0E444 CBZ X0, 0x1E0E828
	0x01E0E448 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+144], D9
	003 Move [X31+152], D8
	004 Move [X31+160], X30
	005 Move [X31+168], X19
	006 Move X8, -20066304
	007 Move V3, [X8+188]
	008 Move X19, X0
	009 Move S0, 1
	010 Move S1, 1
	011 Move S2, 1
	012 Move X0, X31
	013 Call Gizmos.set_color, X0
	014 Move W0, [X19+32]
	015 Call ItemPointSizeUtil.GetSize, X0
	016 Move X0, X19
	017 Move X1, X31
	018 Move V8, V0
	019 Move [X31], D1
	020 Move V9, V2
	021 Call Component.get_transform, X0
	022 Compare X0, 0
	023 JumpIfEqual {71}
	024 Add X8, X31, 80
	025 Move X1, X31
	026 Call Transform.get_localToWorldMatrix, X0
	027 Move V0, [X31+80]
	028 Move V1, [X31+96]
	029 Move V2, [X31+112]
	030 Move V3, [X31+128]
	031 Add X0, X31, 16
	032 Move X1, X31
	033 Move [X31+16], V0
	034 Move [X31+24], V1
	035 Move [X31+48], V2
	036 Move [X31+56], V3
	037 Call Gizmos.set_matrix, X0
	038 Move X19, 0x25CB000
	039 Move W8, [X19+1926]
	040 Compare W8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, 0x22E6000
	043 Move X0, [X0+1440]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X19+1926], W8
	047 Move X8, 0x22E6000
	048 Move X8, [X8+1440]
	049 Move V4, [X31]
	050 NotImplemented "Instruction MOVI not yet implemented."
	051 Move S3, 0.5
	052 Move X8, [X8]
	053 Move V5, V9
	054 Move X0, X31
	055 Move X8, [X8+184]
	056 Move V0, [X8+24]
	057 Move V1, [X8+32]
	058 NotImplemented "Instruction INVALID not yet implemented."
	059 Multiply S1, S4, S1
	060 NotImplemented "Instruction INVALID not yet implemented."
	061 Multiply S2, S1, S3
	062 Move S1, V0.S[1]
	063 Move V3, V8
	064 Call Gizmos.DrawWireCube, X0, X1
	065 Move X30, [X31+160]
	066 Move X19, [X31+168]
	067 Move D9, [X31+144]
	068 Move D8, [X31+152]
	069 Add X31, X31, 176
	070 Return 
	071 Call 0x1C17F20

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x01E0E44C BL 0x3C3DEB4
	0x01E0E450 MOV X0, X19
	0x01E0E454 MOV X1, X31
	0x01E0E458 MOV V10.16B, V0.16B
	0x01E0E45C MOV V9.16B, V1.16B
	0x01E0E460 MOV V8.16B, V2.16B
	0x01E0E464 MOV V11.16B, V3.16B
	0x01E0E468 BL 0x3C32E90
	0x01E0E46C CBZ X0, 0x1E0E828
	0x01E0E470 FMUL S0, S15, S10
	0x01E0E474 FMUL S1, S14, S11
	0x01E0E478 FMUL S4, S15, S9
	0x01E0E47C FMUL S5, S13, S11
	0x01E0E480 FMUL S17, S14, S10
	0x01E0E484 FMUL S20, S15, S8
	0x01E0E488 FMUL S21, S15, S11
	0x01E0E48C FMUL S22, S12, S11
	0x01E0E490 FMUL S2, S13, S8
	0x01E0E494 FMUL S6, S12, S10
	0x01E0E498 FMUL S16, S14, S9
	0x01E0E49C FMUL S19, S13, S9
	0x01E0E4A0 FADD S0, S0, S1
	0x01E0E4A4 FADD S1, S4, S5
	0x01E0E4A8 FADD S4, S20, S22
	0x01E0E4AC FSUB S5, S21, S17
	0x01E0E4B0 FMUL S3, S12, S9
	0x01E0E4B4 FMUL S7, S14, S8
	0x01E0E4B8 FMUL S18, S13, S10
	0x01E0E4BC FMUL S23, S12, S8
	0x01E0E4C0 FADD S0, S2, S0
	0x01E0E4C4 FADD S1, S6, S1
	0x01E0E4C8 FADD S2, S16, S4
	0x01E0E4CC FSUB S4, S5, S19
	0x01E0E4D0 MOV X1, X31
	0x01E0E4D4 FSUB S15, S0, S3
	0x01E0E4D8 FSUB S14, S1, S7
	0x01E0E4DC FSUB S13, S2, S18
	0x01E0E4E0 FSUB S12, S4, S23
	0x01E0E4E4 BL 0x3C3F58C
	0x01E0E4E8 LDR V3, [X31 + 0x1E8]
	0x01E0E4EC ADRP X20, 0x25CA000
	0x01E0E4F0 LDRB W8, [X20 + 0x85B]
	0x01E0E4F4 FADD S10, S3, S0
	0x01E0E4F8 LDR V0, [X31 + 0x1C]
	0x01E0E4FC FADD S9, S0, S1
	0x01E0E500 LDR V0, [X31 + 0x18]
	0x01E0E504 FADD S8, S0, S2
	0x01E0E508 CBNZ W8, 0x1E0E520
	0x01E0E50C ADRP X0, 0x22E5000
	0x01E0E510 LDR X0, [X0 + 0x5A0]
	0x01E0E514 BL 0x1C16CF4
	0x01E0E518 MOVZ W8, 0x1
	0x01E0E51C STRB W8, [X20 + 0x85B]
	0x01E0E520 ADRP X8, 0x22E5000
	0x01E0E524 LDR X8, [X8 + 0x5A0]
	0x01E0E528 MOV V1.16B, V9.16B
	0x01E0E52C MOV V2.16B, V8.16B
	0x01E0E530 MOV V3.16B, V15.16B
	0x01E0E534 LDR X8, [X8]
	0x01E0E538 MOV V4.16B, V14.16B

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+144], D9
	003 Move [X31+152], D8
	004 Move [X31+160], X30
	005 Move [X31+168], X19
	006 Move X19, X0
	007 Move S0, 1
	008 Move S1, 1
	009 Move S2, 1
	010 Move S3, 1
	011 Move X0, X31
	012 Call Gizmos.set_color, X0
	013 Move W0, [X19+32]
	014 Call ItemPointSizeUtil.GetSize, X0
	015 Move X0, X19
	016 Move X1, X31
	017 Move V8, V0
	018 Move [X31], D1
	019 Move V9, V2
	020 Call Component.get_transform, X0
	021 Compare X0, 0
	022 JumpIfEqual {70}
	023 Add X8, X31, 80
	024 Move X1, X31
	025 Call Transform.get_localToWorldMatrix, X0
	026 Move V0, [X31+80]
	027 Move V1, [X31+96]
	028 Move V2, [X31+112]
	029 Move V3, [X31+128]
	030 Add X0, X31, 16
	031 Move X1, X31
	032 Move [X31+16], V0
	033 Move [X31+24], V1
	034 Move [X31+48], V2
	035 Move [X31+56], V3
	036 Call Gizmos.set_matrix, X0
	037 Move X19, 0x25CB000
	038 Move W8, [X19+1926]
	039 Compare W8, 0
	040 JumpIfNotEqual {46}
	041 Move X0, 0x22E6000
	042 Move X0, [X0+1440]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X19+1926], W8
	046 Move X8, 0x22E6000
	047 Move X8, [X8+1440]
	048 Move V4, [X31]
	049 NotImplemented "Instruction MOVI not yet implemented."
	050 Move S3, 0.5
	051 Move X8, [X8]
	052 Move V5, V9
	053 Move X0, X31
	054 Move X8, [X8+184]
	055 Move V0, [X8+24]
	056 Move V1, [X8+32]
	057 NotImplemented "Instruction INVALID not yet implemented."
	058 Multiply S1, S4, S1
	059 NotImplemented "Instruction INVALID not yet implemented."
	060 Multiply S2, S1, S3
	061 Move S1, V0.S[1]
	062 Move V3, V8
	063 Call Gizmos.DrawWireCube, X0, X1
	064 Move X30, [X31+160]
	065 Move X19, [X31+168]
	066 Move D9, [X31+144]
	067 Move D8, [X31+152]
	068 Add X31, X31, 176
	069 Return 
	070 Call 0x1C17F20

Method: UnityEngine.Vector3 GetCenterPosition()

Disassembly:
	0x01E0E53C MOV V5.16B, V13.16B
	0x01E0E540 MOV V6.16B, V12.16B
	0x01E0E544 LDR X8, [X8 + 0xB8]
	0x01E0E548 MOV X0, X31
	0x01E0E54C LDR V0, [X8 + 0x14]
	0x01E0E550 LDUR X9, [X8 + 0xC]
	0x01E0E554 ADD X8, X31, 0x160
	0x01E0E558 STR S0, [X31 + 0x8]
	0x01E0E55C MOV V0.16B, V10.16B
	0x01E0E560 STR X9, [X31]
	0x01E0E564 BL 0x3C26FA8
	0x01E0E568 LDP V0, V1, [X31 + 0x160]
	0x01E0E56C LDP V2, V3, [X31 + 0x180]
	0x01E0E570 ADD X0, X31, 0x60
	0x01E0E574 MOV X1, X31
	0x01E0E578 STP V0, V1, [X31 + 0x60]
	0x01E0E57C STP V2, V3, [X31 + 0x80]
	0x01E0E580 BL 0x3C0D150
	0x01E0E584 LDR X8, [X22]
	0x01E0E588 CBZ X8, 0x1E0E828
	0x01E0E58C LDR V8, [X31 + 0x1EC]
	0x01E0E590 LDR X0, [X8 + 0x60]
	0x01E0E594 CMP W21, 0x3
	0x01E0E598 CSET W1, CC
	0x01E0E59C MOV V0.16B, V8.16B
	0x01E0E5A0 BL 0x1E0E82C
	0x01E0E5A4 LDR X8, [X22]
	0x01E0E5A8 CBZ X8, 0x1E0E828
	0x01E0E5AC LDR X0, [X23]
	0x01E0E5B0 LDR X20, [X8 + 0x68]
	0x01E0E5B4 LDR W9, [X0 + 0xE0]
	0x01E0E5B8 CBNZ W9, 0x1E0E5C0
	0x01E0E5BC BL 0x1C16DFC
	0x01E0E5C0 MOV X0, X20
	0x01E0E5C4 MOV X1, X31
	0x01E0E5C8 MOV X2, X31
	0x01E0E5CC BL 0x3C354F8
	0x01E0E5D0 TBZ X0, 0x0, 0x1E0E800
	0x01E0E5D4 LDR W21, [X19 + 0x28]
	0x01E0E5D8 FMOV S1, 1
	0x01E0E5DC FMOV S2, W31
	0x01E0E5E0 MOV V3.16B, V8.16B
	0x01E0E5E4 CMP W21, 0x0
	0x01E0E5E8 FCSEL S0, S2, S1, EQ
	0x01E0E5EC FCSEL S1, S1, S2, EQ
	0x01E0E5F0 MOV V2.16B, V1.16B
	0x01E0E5F4 MOV X0, X31

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X1, X31
	011 Move X19, X0
	012 Call Component.get_transform, X0
	013 Compare X0, 0
	014 JumpIfEqual {58}
	015 Move X1, X31
	016 Call Transform.get_position, X0
	017 Move X20, 0x25CB000
	018 Move W8, [X20+1926]
	019 Move V8, V0
	020 Move V9, V1
	021 Move V10, V2
	022 Compare W8, 0
	023 JumpIfNotEqual {29}
	024 Move X0, 0x22E6000
	025 Move X0, [X0+1440]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+1926], W8
	029 Move X8, 0x22E6000
	030 Move X8, [X8+1440]
	031 Move W0, [X19+32]
	032 Move X8, [X8]
	033 Move X8, [X8+184]
	034 Move S11, [X8+24]
	035 Move S12, [X8+28]
	036 Move V13, [X8+32]
	037 Call ItemPointSizeUtil.GetSize, X0
	038 Multiply S0, S11, S1
	039 Multiply S2, S12, S1
	040 Multiply S1, S13, S1
	041 Move S3, 0.5
	042 Multiply S0, S0, S3
	043 Multiply S2, S2, S3
	044 Multiply S3, S1, S3
	045 Add S0, S8, S0
	046 Add S1, S9, S2
	047 Add S2, S10, S3
	048 Move X20, [X31+64]
	049 Move X19, [X31+72]
	050 Move X30, [X31+48]
	051 Move D9, [X31+32]
	052 Move D8, [X31+40]
	053 Move D11, [X31+16]
	054 Move D10, [X31+24]
	055 Move D13, [X31+80]
	056 Move D12, [X31+88]
	057 Return X0
	058 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01E0E5F8 BL 0x3C0D030
	0x01E0E5FC LDR X0, [X19 + 0x20]
	0x01E0E600 CBZ X0, 0x1E0E828
	0x01E0E604 MOV X1, X31

ISIL:
	001 Move W8, 2
	002 Move X1, X31
	003 Move [X0+32], W8
	004 Call MonoBehaviour..ctor, X0
	005 Return 

