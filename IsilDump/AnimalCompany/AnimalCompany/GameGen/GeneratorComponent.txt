Type: AnimalCompany.GameGen.GeneratorComponent

Method: System.Void OnEnable()

Disassembly:
	0x01E0D934 FMOV S1, W31
	0x01E0D938 FMOV S2, 1
	0x01E0D93C FMOV S3, 1
	0x01E0D940 CMP W8, 0x0
	0x01E0D944 FCSEL S0, S2, S1, EQ
	0x01E0D948 FCSEL S1, S1, S2, EQ
	0x01E0D94C FMOV S2, W31
	0x01E0D950 MOV X0, X31
	0x01E0D954 BL 0x3C0D030
	0x01E0D958 MOV X0, X19
	0x01E0D95C MOV X1, X31
	0x01E0D960 BL 0x3C32E90
	0x01E0D964 CBZ X0, 0x1E0D994
	0x01E0D968 MOV X1, X31
	0x01E0D96C BL 0x3C3F58C
	0x01E0D970 ADRP X8, 0xFFFFFFFFFECDD000
	0x01E0D974 LDR V3, [X8 + 0xBC]
	0x01E0D978 LDP X20, X19, [X31 + 0x40]
	0x01E0D97C LDR X30, [X31 + 0x30]
	0x01E0D980 LDP D9, D8, [X31 + 0x20]
	0x01E0D984 LDP D11, D10, [X31 + 0x10]
	0x01E0D988 MOV X0, X31
	0x01E0D98C LDP D13, D12, [X31], #0x50

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25CC000
	006 Move X20, 0x22ED000
	007 Move W8, [X21+3536]
	008 Move X20, [X20+816]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22ED000
	015 Move X0, [X0+816]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3536], W8
	019 Move X0, [X20]
	020 Move X19, [X19+40]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call GlobalNavZones.RegisterZones, X0
	032 Return 

Method: System.Void OnDisable()

Disassembly:
	0x01E0D990 B 0x3C0CC38
	0x01E0D994 BL 0x1C16F20
	0x01E0D998 MOVZ W8, 0x1
	0x01E0D99C MOVZ W9, 0x3F400000
	0x01E0D9A0 MOV X1, X31
	0x01E0D9A4 STRB W8, [X0 + 0x20]
	0x01E0D9A8 STR W9, [X0 + 0x24]
	0x01E0D9AC B 0x3C36C30
	0x01E0D9B0 STP X30, X25, [X31 - 0x40]!
	0x01E0D9B4 STP X24, X23, [X31 + 0x10]
	0x01E0D9B8 STP X22, X21, [X31 + 0x20]
	0x01E0D9BC STP X20, X19, [X31 + 0x30]
	0x01E0D9C0 ADRP X22, 0x25CB000
	0x01E0D9C4 ADRP X23, 0x22EC000
	0x01E0D9C8 LDRB W8, [X22 + 0xDD5]
	0x01E0D9CC LDR X23, [X23 + 0xD88]
	0x01E0D9D0 MOV X20, X2
	0x01E0D9D4 MOV X19, X1
	0x01E0D9D8 MOV X21, X0
	0x01E0D9DC TBNZ X8, 0x0, 0x1E0DA3C
	0x01E0D9E0 ADRP X0, 0x22EC000
	0x01E0D9E4 LDR X0, [X0 + 0xD88]
	0x01E0D9E8 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25CC000
	006 Move X20, 0x22ED000
	007 Move W8, [X21+3537]
	008 Move X20, [X20+816]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22ED000
	015 Move X0, [X0+816]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3537], W8
	019 Move X0, [X20]
	020 Move X19, [X19+40]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call GlobalNavZones.DeregisterZones, X0
	032 Return 

Method: System.Void Generate()

Disassembly:
	0x01E0D9EC ADRP X0, 0x22E8000

ISIL:
No ISIL was generated
Method: System.Boolean TryGenerate()

Disassembly:
	0x01E0D9F0 LDR X0, [X0 + 0x150]
	0x01E0D9F4 BL 0x1C16CF4
	0x01E0D9F8 ADRP X0, 0x22EC000
	0x01E0D9FC LDR X0, [X0 + 0xD90]
	0x01E0DA00 BL 0x1C16CF4
	0x01E0DA04 ADRP X0, 0x22E6000
	0x01E0DA08 LDR X0, [X0 + 0xA58]
	0x01E0DA0C BL 0x1C16CF4
	0x01E0DA10 ADRP X0, 0x22EC000
	0x01E0DA14 LDR X0, [X0 + 0xD98]
	0x01E0DA18 BL 0x1C16CF4
	0x01E0DA1C ADRP X0, 0x22E6000
	0x01E0DA20 LDR X0, [X0 + 0x598]
	0x01E0DA24 BL 0x1C16CF4
	0x01E0DA28 ADRP X0, 0x22EC000
	0x01E0DA2C LDR X0, [X0 + 0xDA0]
	0x01E0DA30 BL 0x1C16CF4
	0x01E0DA34 MOVZ W8, 0x1
	0x01E0DA38 STRB W8, [X22 + 0xDD5]
	0x01E0DA3C LDR X2, [X23]
	0x01E0DA40 MOVZ W1, 0x1
	0x01E0DA44 MOV X0, X21
	0x01E0DA48 BL 0x21A45B8
	0x01E0DA4C CBZ X0, 0x1E0DCFC
	0x01E0DA50 LDR W8, [X0 + 0x18]
	0x01E0DA54 MOV X22, X0
	0x01E0DA58 CMP W8, 0x1
	0x01E0DA5C B.LT 0x1E0DAE8
	0x01E0DA60 ADRP X25, 0x22EC000
	0x01E0DA64 LDR X25, [X25 + 0xD98]
	0x01E0DA68 MOV W24, W31
	0x01E0DA6C CMP W24, W8
	0x01E0DA70 B.CS 0x1E0DD00
	0x01E0DA74 ADD X8, X22, W24, 0x3, SXTW
	0x01E0DA78 LDR X23, [X8 + 0x20]
	0x01E0DA7C CBZ X23, 0x1E0DCFC
	0x01E0DA80 LDR X8, [X23]
	0x01E0DA84 LDR X1, [X25]
	0x01E0DA88 LDRH W9, [X8 + 0x12E]
	0x01E0DA8C CBZ X9, 0x1E0DAB0
	0x01E0DA90 LDR X10, [X8 + 0xB0]
	0x01E0DA94 ADD X10, X10, 0x8
	0x01E0DA98 LDUR X11, [X10 - 0x8]
	0x01E0DA9C CMP X11, X1
	0x01E0DAA0 B.EQ 0x1E0DAC0
	0x01E0DAA4 SUBS X9, X9, 0x1
	0x01E0DAA8 ADD X10, X10, 0x10
	0x01E0DAAC B.NE 0x1E0DA98
	0x01E0DAB0 MOV X0, X23
	0x01E0DAB4 MOV W2, W31
	0x01E0DAB8 BL 0x1C5C788
	0x01E0DABC B 0x1E0DACC
	0x01E0DAC0 LDRSW X9, [X10]
	0x01E0DAC4 ADD X8, X8, X9, 0x4, LSL
	0x01E0DAC8 ADD X0, X8, 0x138
	0x01E0DACC LDP X8, X1, [X0]
	0x01E0DAD0 MOV X0, X23
	0x01E0DAD4 BLR X8
	0x01E0DAD8 LDR W8, [X22 + 0x18]
	0x01E0DADC ADD W24, W24, 0x1
	0x01E0DAE0 CMP W24, W8
	0x01E0DAE4 B.LT 0x1E0DA6C
	0x01E0DAE8 CBZ X19, 0x1E0DCFC
	0x01E0DAEC ADRP X8, 0x22E6000
	0x01E0DAF0 LDR X8, [X8 + 0x598]
	0x01E0DAF4 LDR X22, [X19 + 0x30]
	0x01E0DAF8 LDR X0, [X8]
	0x01E0DAFC LDR W8, [X0 + 0xE0]
	0x01E0DB00 CBNZ W8, 0x1E0DB08
	0x01E0DB04 BL 0x1C16DFC
	0x01E0DB08 MOV X0, X22
	0x01E0DB0C MOV X1, X31
	0x01E0DB10 MOV X2, X31
	0x01E0DB14 BL 0x3C354F8
	0x01E0DB18 TBZ X0, 0x0, 0x1E0DCE8
	0x01E0DB1C LDR X0, [X19 + 0x30]
	0x01E0DB20 CBZ X0, 0x1E0DCFC
	0x01E0DB24 MOV X1, X31
	0x01E0DB28 BL 0x3C389D4
	0x01E0DB2C ADRP X8, 0x22EC000
	0x01E0DB30 LDR X8, [X8 + 0xDA0]
	0x01E0DB34 MOV X1, X0
	0x01E0DB38 MOV X2, X31
	0x01E0DB3C LDR X8, [X8]
	0x01E0DB40 MOV X0, X8
	0x01E0DB44 BL 0x321B938
	0x01E0DB48 ADRP X8, 0x22E6000
	0x01E0DB4C LDR X8, [X8 + 0xA58]
	0x01E0DB50 MOV X23, X0
	0x01E0DB54 LDR X8, [X8]
	0x01E0DB58 MOV X0, X8
	0x01E0DB5C BL 0x1C16F10
	0x01E0DB60 MOV X1, X23
	0x01E0DB64 MOV X2, X31
	0x01E0DB68 MOV X22, X0
	0x01E0DB6C BL 0x3C35934
	0x01E0DB70 CBZ X22, 0x1E0DCFC
	0x01E0DB74 MOV X0, X22
	0x01E0DB78 MOV X1, X31
	0x01E0DB7C BL 0x3C356F8
	0x01E0DB80 MOV X23, X0
	0x01E0DB84 MOV X0, X21
	0x01E0DB88 MOV X1, X31
	0x01E0DB8C BL 0x3C32E90
	0x01E0DB90 CBZ X23, 0x1E0DCFC
	0x01E0DB94 MOV X1, X0
	0x01E0DB98 MOV X0, X23
	0x01E0DB9C MOV X2, X31
	0x01E0DBA0 BL 0x3C3FD20
	0x01E0DBA4 MOV X0, X22
	0x01E0DBA8 MOV X1, X31
	0x01E0DBAC BL 0x3C356F8
	0x01E0DBB0 ADRP X23, 0x25CB000
	0x01E0DBB4 LDRB W8, [X23 + 0x783]
	0x01E0DBB8 MOV X21, X0
	0x01E0DBBC CBNZ W8, 0x1E0DBD4
	0x01E0DBC0 ADRP X0, 0x22E6000
	0x01E0DBC4 LDR X0, [X0 + 0x5A0]
	0x01E0DBC8 BL 0x1C16CF4
	0x01E0DBCC MOVZ W8, 0x1
	0x01E0DBD0 STRB W8, [X23 + 0x783]
	0x01E0DBD4 CBZ X21, 0x1E0DCFC
	0x01E0DBD8 ADRP X8, 0x22E6000
	0x01E0DBDC LDR X8, [X8 + 0x5A0]
	0x01E0DBE0 MOV X0, X21
	0x01E0DBE4 MOV X1, X31
	0x01E0DBE8 LDR X8, [X8]
	0x01E0DBEC LDR X8, [X8 + 0xB8]
	0x01E0DBF0 LDP S1, S2, [X8 + 0x4]
	0x01E0DBF4 LDR V0, [X8]
	0x01E0DBF8 BL 0x3C3EC04
	0x01E0DBFC MOV X0, X22
	0x01E0DC00 MOV X1, X31
	0x01E0DC04 BL 0x3C356F8
	0x01E0DC08 ADRP X23, 0x25CB000
	0x01E0DC0C LDRB W8, [X23 + 0x793]
	0x01E0DC10 MOV X21, X0
	0x01E0DC14 CBNZ W8, 0x1E0DC2C
	0x01E0DC18 ADRP X0, 0x22E7000
	0x01E0DC1C LDR X0, [X0 + 0x5A8]
	0x01E0DC20 BL 0x1C16CF4
	0x01E0DC24 MOVZ W8, 0x1
	0x01E0DC28 STRB W8, [X23 + 0x793]
	0x01E0DC2C CBZ X21, 0x1E0DCFC
	0x01E0DC30 ADRP X8, 0x22E7000
	0x01E0DC34 LDR X8, [X8 + 0x5A8]
	0x01E0DC38 MOV X0, X21
	0x01E0DC3C MOV X1, X31
	0x01E0DC40 LDR X8, [X8]
	0x01E0DC44 LDR X8, [X8 + 0xB8]
	0x01E0DC48 LDP S2, S3, [X8 + 0x8]
	0x01E0DC4C LDP S0, S1, [X8]
	0x01E0DC50 BL 0x3C3F8B8
	0x01E0DC54 MOVZ W1, 0x14
	0x01E0DC58 MOV X0, X22
	0x01E0DC5C MOV X2, X31
	0x01E0DC60 BL 0x3C35770
	0x01E0DC64 ADRP X8, 0x22E8000
	0x01E0DC68 LDR X8, [X8 + 0x150]
	0x01E0DC6C MOV X0, X22
	0x01E0DC70 LDR X1, [X8]
	0x01E0DC74 BL 0x21E51FC
	0x01E0DC78 CBZ X20, 0x1E0DCFC
	0x01E0DC7C MOV X21, X0
	0x01E0DC80 CBZ X0, 0x1E0DCFC
	0x01E0DC84 LDP S1, S2, [X20 + 0x24]
	0x01E0DC88 LDR V0, [X20 + 0x20]
	0x01E0DC8C MOV X0, X21
	0x01E0DC90 MOV X1, X31
	0x01E0DC94 BL 0x3C8FEB4
	0x01E0DC98 LDP S0, S1, [X20 + 0x2C]
	0x01E0DC9C LDR V2, [X20 + 0x34]
	0x01E0DCA0 MOV X0, X21
	0x01E0DCA4 MOV X1, X31
	0x01E0DCA8 FADD S0, S0, S0
	0x01E0DCAC FADD S1, S1, S1
	0x01E0DCB0 FADD S2, S2, S2
	0x01E0DCB4 BL 0x3C8FFEC
	0x01E0DCB8 MOVZ W1, 0x1
	0x01E0DCBC MOV X0, X21
	0x01E0DCC0 MOV X2, X31
	0x01E0DCC4 BL 0x3C8F7C8
	0x01E0DCC8 ADRP X8, 0x22EC000
	0x01E0DCCC LDR X8, [X8 + 0xD90]
	0x01E0DCD0 MOV X0, X22
	0x01E0DCD4 LDR X1, [X8]
	0x01E0DCD8 BL 0x21E51FC
	0x01E0DCDC CBZ X0, 0x1E0DCFC
	0x01E0DCE0 LDR X8, [X19 + 0x30]
	0x01E0DCE4 STR X8, [X0 + 0x20]
	0x01E0DCE8 LDP X20, X19, [X31 + 0x30]
	0x01E0DCEC LDP X22, X21, [X31 + 0x20]
	0x01E0DCF0 LDP X24, X23, [X31 + 0x10]
	0x01E0DCF4 LDP X30, X25, [X31], #0x40
	0x01E0DCF8 RET
	0x01E0DCFC BL 0x1C16F20
	0x01E0DD00 BL 0x1C16F28
	0x01E0DD04 LDR W8, [X0 + 0x28]
	0x01E0DD08 CMP W8, 0x4
	0x01E0DD0C B.HI 0x1E0DD30
	0x01E0DD10 ADRP X9, 0xFFFFFFFFFED20000
	0x01E0DD14 ADD X9, X9, 0x98E
	0x01E0DD18 ADR X10, 0x10
	0x01E0DD1C LDRB W11, [X9, X8, LSL]
	0x01E0DD20 ADD X10, X10, X11, 0x2, LSL
	0x01E0DD24 BR X10
	0x01E0DD28 MOVZ W0, 0x1
	0x01E0DD2C RET
	0x01E0DD30 MOV W0, W31
	0x01E0DD34 RET
	0x01E0DD38 CMP W1, 0x3
	0x01E0DD3C B 0x1E0DD54
	0x01E0DD40 AND W8, W1, 0xFFFFFFFD
	0x01E0DD44 CMP W8, 0x1
	0x01E0DD48 B 0x1E0DD54
	0x01E0DD4C AND W8, W1, 0xFFFFFFFE
	0x01E0DD50 CMP W8, 0x2
	0x01E0DD54 CSET W0, NE
	0x01E0DD58 RET
	0x01E0DD5C CMP W1, 0x0
	0x01E0DD60 CSET W0, EQ
	0x01E0DD64 RET
	0x01E0DD68 FMOV S0, 1
	0x01E0DD6C B 0x1E0DD70
	0x01E0DD70 STP D15, D14, [X31 - 0x80]!
	0x01E0DD74 STP D13, D12, [X31 + 0x10]
	0x01E0DD78 STP D11, D10, [X31 + 0x20]
	0x01E0DD7C STP D9, D8, [X31 + 0x30]
	0x01E0DD80 STR X29, [X31 + 0x40]
	0x01E0DD84 STP X30, X23, [X31 + 0x50]
	0x01E0DD88 STP X22, X21, [X31 + 0x60]
	0x01E0DD8C STP X20, X19, [X31 + 0x70]
	0x01E0DD90 SUB X31, X31, 0x1A0
	0x01E0DD94 ADRP X20, 0x25CB000
	0x01E0DD98 ADRP X23, 0x22E6000
	0x01E0DD9C LDRB W8, [X20 + 0xDD6]
	0x01E0DDA0 LDR X23, [X23 + 0x598]
	0x01E0DDA4 MOV V8.16B, V0.16B
	0x01E0DDA8 MOV X19, X0
	0x01E0DDAC TBNZ X8, 0x0, 0x1E0DDC4
	0x01E0DDB0 ADRP X0, 0x22E6000
	0x01E0DDB4 LDR X0, [X0 + 0x598]
	0x01E0DDB8 BL 0x1C16CF4
	0x01E0DDBC MOVZ W8, 0x1
	0x01E0DDC0 STRB W8, [X20 + 0xDD6]
	0x01E0DDC4 MOV X22, X19
	0x01E0DDC8 LDR X20, [X22 + 0x20]!
	0x01E0DDCC LDR X0, [X23]
	0x01E0DDD0 LDR W8, [X0 + 0xE0]
	0x01E0DDD4 CBNZ W8, 0x1E0DDDC
	0x01E0DDD8 BL 0x1C16DFC
	0x01E0DDDC MOV X0, X20
	0x01E0DDE0 MOV X1, X31
	0x01E0DDE4 MOV X2, X31
	0x01E0DDE8 BL 0x3C3883C
	0x01E0DDEC TBNZ X0, 0x0, 0x1E0E800
	0x01E0DDF0 FMOV S0, 0.25
	0x01E0DDF4 FMUL S3, S8, S0
	0x01E0DDF8 FMOV S0, 1
	0x01E0DDFC FMOV S1, 1
	0x01E0DE00 FMOV S2, 1
	0x01E0DE04 MOV X0, X31
	0x01E0DE08 BL 0x3C0D030
	0x01E0DE0C MOV X0, X19
	0x01E0DE10 MOV X1, X31
	0x01E0DE14 BL 0x3C32E90
	0x01E0DE18 CBZ X0, 0x1E0E828
	0x01E0DE1C ADD X8, X31, 0x160
	0x01E0DE20 MOV X1, X31
	0x01E0DE24 BL 0x3C3F1C8
	0x01E0DE28 LDP V0, V1, [X31 + 0x160]
	0x01E0DE2C LDP V2, V3, [X31 + 0x180]
	0x01E0DE30 ADD X0, X31, 0x120
	0x01E0DE34 MOV X1, X31
	0x01E0DE38 STP V0, V1, [X31 + 0x120]
	0x01E0DE3C STP V2, V3, [X31 + 0x140]
	0x01E0DE40 BL 0x3C0D150
	0x01E0DE44 LDR X8, [X22]
	0x01E0DE48 CBZ X8, 0x1E0E828
	0x01E0DE4C LDP S2, S3, [X8 + 0x28]
	0x01E0DE50 LDP S4, S5, [X8 + 0x30]
	0x01E0DE54 LDP S0, S1, [X8 + 0x20]
	0x01E0DE58 MOV X0, X31
	0x01E0DE5C FADD S3, S3, S3
	0x01E0DE60 FADD S4, S4, S4
	0x01E0DE64 FADD S5, S5, S5
	0x01E0DE68 BL 0x3C0CCD8
	0x01E0DE6C LDR X8, [X22]
	0x01E0DE70 CBZ X8, 0x1E0E828
	0x01E0DE74 LDR X0, [X23]
	0x01E0DE78 LDR X20, [X8 + 0x50]
	0x01E0DE7C LDR W9, [X0 + 0xE0]
	0x01E0DE80 CBNZ W9, 0x1E0DE88
	0x01E0DE84 BL 0x1C16DFC
	0x01E0DE88 MOV X0, X20
	0x01E0DE8C MOV X1, X31
	0x01E0DE90 MOV X2, X31
	0x01E0DE94 BL 0x3C354F8
	0x01E0DE98 STR S8, [X31 + 0x1EC]
	0x01E0DE9C TBZ X0, 0x0, 0x1E0E0D0
	0x01E0DEA0 LDR W21, [X19 + 0x28]
	0x01E0DEA4 FMOV S1, 1
	0x01E0DEA8 FMOV S2, W31
	0x01E0DEAC MOV V3.16B, V8.16B
	0x01E0DEB0 CMP W21, 0x5
	0x01E0DEB4 FCSEL S0, S2, S1, CC
	0x01E0DEB8 FCSEL S1, S1, S2, CC
	0x01E0DEBC MOV V2.16B, V1.16B
	0x01E0DEC0 MOV X0, X31
	0x01E0DEC4 BL 0x3C0D030
	0x01E0DEC8 LDR X0, [X19 + 0x20]
	0x01E0DECC CBZ X0, 0x1E0E828
	0x01E0DED0 MOV X1, X31
	0x01E0DED4 BL 0x3C32E90
	0x01E0DED8 LDR X8, [X22]
	0x01E0DEDC CBZ X8, 0x1E0E828
	0x01E0DEE0 MOV X20, X0
	0x01E0DEE4 LDR X0, [X8 + 0x50]
	0x01E0DEE8 CBZ X0, 0x1E0E828
	0x01E0DEEC MOV X1, X31
	0x01E0DEF0 BL 0x3C32E90
	0x01E0DEF4 CBZ X0, 0x1E0E828
	0x01E0DEF8 MOV X1, X31
	0x01E0DEFC BL 0x3C3F58C
	0x01E0DF00 CBZ X20, 0x1E0E828
	0x01E0DF04 MOV X0, X20
	0x01E0DF08 MOV X1, X31
	0x01E0DF0C BL 0x3C40B58
	0x01E0DF10 LDR X0, [X22]
	0x01E0DF14 CBZ X0, 0x1E0E828
	0x01E0DF18 MOV X1, X31
	0x01E0DF1C MOV V8.16B, V0.16B
	0x01E0DF20 MOV V9.16B, V1.16B
	0x01E0DF24 MOV V10.16B, V2.16B
	0x01E0DF28 BL 0x3C32E90
	0x01E0DF2C CBZ X0, 0x1E0E828
	0x01E0DF30 MOV X1, X31
	0x01E0DF34 BL 0x3C3DEB4
	0x01E0DF38 MOV X0, X31
	0x01E0DF3C BL 0x3C2A260
	0x01E0DF40 LDR X8, [X22]
	0x01E0DF44 CBZ X8, 0x1E0E828

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x25CC000
	013 Move X23, 0x22E7000
	014 Move W8, [X20+3538]
	015 Move X23, [X23+1432]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {56}
	021 Move X0, 0x22ED000
	022 Move X0, [X0+3408]
	023 Call 0x1C17CF4
	024 Move X0, 0x22ED000
	025 Move X0, [X0+3384]
	026 Call 0x1C17CF4
	027 Move X0, 0x22E7000
	028 Move X0, [X0+1880]
	029 Call 0x1C17CF4
	030 Move X0, 0x22E7000
	031 Move X0, [X0+1928]
	032 Call 0x1C17CF4
	033 Move X0, 0x22E7000
	034 Move X0, [X0+1432]
	035 Call 0x1C17CF4
	036 Move X0, 0x22ED000
	037 Move X0, [X0+3416]
	038 Call 0x1C17CF4
	039 Move X0, 0x22ED000
	040 Move X0, [X0+3424]
	041 Call 0x1C17CF4
	042 Move X0, 0x22ED000
	043 Move X0, [X0+3432]
	044 Call 0x1C17CF4
	045 Move X0, 0x22ED000
	046 Move X0, [X0+3440]
	047 Call 0x1C17CF4
	048 Move X0, 0x22ED000
	049 Move X0, [X0+3448]
	050 Call 0x1C17CF4
	051 Move X0, 0x22ED000
	052 Move X0, [X0+3456]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X20+3538], W8
	056 Move X0, [X23]
	057 Move [X31+12], W31
	058 Move X20, [X19+48]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X26, 0x22E7000
	064 Move X25, 0x22ED000
	065 Move X24, 0x22ED000
	066 Move X26, [X26+1928]
	067 Move X25, [X25+3432]
	068 Move X24, [X24+3424]
	069 Move X0, X20
	070 Move X1, X31
	071 Move X2, X31
	072 Call Object.op_Equality, X0, X1
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfEqual {91}
	077 Move X0, [X23]
	078 Move X20, [X19+56]
	079 Move W8, [X0+224]
	080 Compare W8, 0
	081 JumpIfNotEqual {83}
	082 Call 0x1C17DFC
	083 Move X0, X20
	084 Move X1, X31
	085 Move X2, X31
	086 Call Object.op_Equality, X0, X1
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {119}
	091 Move X0, [X26]
	092 Move X19, 0x22ED000
	093 Move W8, [X0+224]
	094 Move X19, [X19+3416]
	095 Compare W8, 0
	096 JumpIfNotEqual {98}
	097 Call 0x1C17DFC
	098 Move X1, [X19]
	099 Move X3, [X25]
	100 Move X4, [X24]
	101 Move W0, 32
	102 Move W5, 71
	103 Move X2, X31
	104 Move X6, X31
	105 Call Log.Error, X0, X1, X2, X3, X4, X5
	106 Move W0, W31
	107 Move X20, [X31+80]
	108 Move X19, [X31+88]
	109 Move X22, [X31+64]
	110 Move X21, [X31+72]
	111 Move X24, [X31+48]
	112 Move X23, [X31+56]
	113 Move X26, [X31+32]
	114 Move X25, [X31+40]
	115 Move X30, [X31+16]
	116 Move X27, [X31+24]
	117 Add X31, X31, 96
	118 Return X0
	119 Move X0, X19
	120 Move X1, X31
	121 Call Component.get_transform, X0
	122 Compare X0, 0
	123 JumpIfEqual {385}
	124 Move X1, X31
	125 Call Transform.get_childCount, X0
	126 Subtract W20, W0, 1
	127 Move X0, X19
	128 Move X1, X31
	129 Call Component.get_transform, X0
	130 Compare X0, 0
	131 JumpIfEqual {385}
	132 Move W1, W20
	133 Move X2, X31
	134 Call Transform.GetChild, X0, X1
	135 Compare X0, 0
	136 JumpIfEqual {385}
	137 Move X1, X31
	138 Call Component.get_gameObject, X0
	139 Move X8, [X23]
	140 Move X21, X0
	141 Move W9, [X8+224]
	142 Compare W9, 0
	143 JumpIfNotEqual {146}
	144 Move X0, X8
	145 Call 0x1C17DFC
	146 Move X0, X21
	147 Move X1, X31
	148 Call Object.DestroyImmediate, X0
	149 Subtract W20, W20, 1
	150 Move X8, 0x22ED000
	151 Move X21, [X19+48]
	152 Move X8, [X8+3384]
	153 Move X0, [X8]
	154 Call 0x1C17F10
	155 Move X1, X21
	156 Move X2, X31
	157 Move X20, X0
	158 Call Generator..ctor, X0, X1
	159 Move W27, W31
	160 Move [X31+12], W31
	161 Move X21, [X19+56]
	162 Move X22, [X19+64]
	163 Move W1, 0x86A0
	164 NotImplemented "Instruction MOVK not yet implemented."
	165 Move W0, W31
	166 Move X2, X31
	167 Call Random.Range, X0, X1
	168 Compare X20, 0
	169 JumpIfEqual {385}
	170 Move W4, [X19+32]
	171 Move W3, W0
	172 Move W5, 1
	173 Move W6, 1
	174 Move X0, X20
	175 Move X1, X21
	176 Move X2, X22
	177 Move X7, X31
	178 Call Generator.Generate, X0, X1, X2, X3, X4, X5, X6
	179 Move TEMP, X0
	180 And TEMP, TEMP, 1
	181 Compare TEMP, 1
	182 JumpIfEqual {284}
	183 Move X0, X19
	184 Move X1, X31
	185 Call Component.get_transform, X0
	186 Compare X0, 0
	187 JumpIfEqual {385}
	188 Move X1, X31
	189 Call Transform.get_childCount, X0
	190 Subtract W21, W0, 1
	191 Move X0, X19
	192 Move X1, X31
	193 Call Component.get_transform, X0
	194 Compare X0, 0
	195 JumpIfEqual {385}
	196 Move W1, W21
	197 Move X2, X31
	198 Call Transform.GetChild, X0, X1
	199 Compare X0, 0
	200 JumpIfEqual {385}
	201 Move X1, X31
	202 Call Component.get_gameObject, X0
	203 Move X8, [X23]
	204 Move X22, X0
	205 Move W9, [X8+224]
	206 Compare W9, 0
	207 JumpIfNotEqual {210}
	208 Move X0, X8
	209 Call 0x1C17DFC
	210 Move X0, X22
	211 Move X1, X31
	212 Call Object.DestroyImmediate, X0
	213 Subtract W21, W21, 1
	214 Add W27, W27, 1
	215 NotImplemented "Instruction CMP not yet implemented."
	216 Move [X31+12], W27
	217 Move X0, [X19+48]
	218 Compare X0, 0
	219 JumpIfEqual {385}
	220 Move X1, X31
	221 Call Object.get_name, X0
	222 Move X8, 0x22E7000
	223 Move X8, [X8+1880]
	224 Move X20, X0
	225 Add X1, X31, 8
	226 Move X0, [X8]
	227 Move W8, 64
	228 Move [X31+8], W8
	229 Call 0x1C17E04
	230 Move X8, 0x22ED000
	231 Move X8, [X8+3448]
	232 Move X2, X0
	233 Move X1, X20
	234 Move X3, X31
	235 Move X8, [X8]
	236 Move X0, X8
	237 Call String.Format, X0, X1, X2
	238 Move X8, [X26]
	239 Move X20, X0
	240 Move W9, [X8+224]
	241 Compare W9, 0
	242 JumpIfNotEqual {245}
	243 Move X0, X8
	244 Call 0x1C17DFC
	245 Move X3, [X25]
	246 Move X4, [X24]
	247 Move W0, 32
	248 Move W5, 111
	249 Move X1, X20
	250 Move X2, X31
	251 Move X6, X31
	252 Call Log.Error, X0, X1, X2, X3, X4, X5
	253 Move X0, X19
	254 Move X1, X31
	255 Call Component.get_transform, X0
	256 Compare X0, 0
	257 JumpIfEqual {385}
	258 Move X1, X31
	259 Call Transform.get_childCount, X0
	260 Subtract W20, W0, 1
	261 Move X0, X19
	262 Move X1, X31
	263 Call Component.get_transform, X0
	264 Compare X0, 0
	265 JumpIfEqual {385}
	266 Move W1, W20
	267 Move X2, X31
	268 Call Transform.GetChild, X0, X1
	269 Compare X0, 0
	270 JumpIfEqual {385}
	271 Move X1, X31
	272 Call Component.get_gameObject, X0
	273 Move X8, [X23]
	274 Move X21, X0
	275 Move W9, [X8+224]
	276 Compare W9, 0
	277 JumpIfNotEqual {280}
	278 Move X0, X8
	279 Call 0x1C17DFC
	280 Move X0, X21
	281 Move X1, X31
	282 Call Object.DestroyImmediate, X0
	283 Subtract W20, W20, 1
	284 Move X0, [X19+48]
	285 Compare X0, 0
	286 JumpIfEqual {385}
	287 Move X1, X31
	288 Call Object.get_name, X0
	289 Move X21, X0
	290 Add X0, X31, 12
	291 Move X1, X31
	292 Call Int32.ToString, X0
	293 Move X8, 0x22ED000
	294 Move X9, 0x22ED000
	295 Move X8, [X8+3440]
	296 Move X9, [X9+3456]
	297 Move X2, X0
	298 Move X0, X21
	299 Move X1, [X8]
	300 Move X3, [X9]
	301 Move X4, X31
	302 Call String.Concat, X0, X1, X2, X3
	303 Move X8, [X26]
	304 Move X21, X0
	305 Move W9, [X8+224]
	306 Compare W9, 0
	307 JumpIfNotEqual {310}
	308 Move X0, X8
	309 Call 0x1C17DFC
	310 Move X3, [X25]
	311 Move X4, [X24]
	312 Move W0, 32
	313 Move W5, 86
	314 Move X1, X21
	315 Move X2, X31
	316 Move X6, X31
	317 Call Log.Debug, X0, X1, X2, X3, X4, X5
	318 Move X8, [X20+40]
	319 Compare X8, 0
	320 JumpIfEqual {385}
	321 Move X8, [X8+32]
	322 Move X21, [X19+72]
	323 Move [X19+40], X8
	324 Move X0, [X23]
	325 Move W8, [X0+224]
	326 Compare W8, 0
	327 JumpIfNotEqual {329}
	328 Call 0x1C17DFC
	329 Move X0, X21
	330 Move X1, X31
	331 Move X2, X31
	332 Call Object.op_Inequality, X0, X1
	333 Move TEMP, X0
	334 And TEMP, TEMP, 1
	335 Compare TEMP, 1
	336 JumpIfNotEqual {343}
	337 Move X0, [X20+72]
	338 Compare X0, 0
	339 JumpIfEqual {385}
	340 Move X1, [X19+72]
	341 Move X2, X31
	342 Call Transform.set_parent, X0, X1
	343 Move X0, [X23]
	344 Move X21, [X19+80]
	345 Move W8, [X0+224]
	346 Compare W8, 0
	347 JumpIfNotEqual {349}
	348 Call 0x1C17DFC
	349 Move X0, X21
	350 Move X1, X31
	351 Move X2, X31
	352 Call Object.op_Inequality, X0, X1
	353 Move TEMP, X0
	354 And TEMP, TEMP, 1
	355 Compare TEMP, 1
	356 JumpIfNotEqual {363}
	357 Move X0, [X20+64]
	358 Compare X0, 0
	359 JumpIfEqual {385}
	360 Move X1, [X19+80]
	361 Move X2, X31
	362 Call Transform.set_parent, X0, X1
	363 Move X8, 0x22ED000
	364 Move X8, [X8+3408]
	365 Move X0, X19
	366 Move X1, [X8]
	367 Call 0x21A53A8, X0
	368 Compare X0, 0
	369 JumpIfEqual {385}
	370 Move W8, [X0+24]
	371 Move X19, X0
	372 NotImplemented "Instruction CMP not yet implemented."
	373 Move W20, W31
	374 NotImplemented "Instruction CMP not yet implemented."
	375 Add X8, X19, W20
	376 Move X0, [X8+32]
	377 Compare X0, 0
	378 JumpIfEqual {385}
	379 Move X1, X31
	380 Call NavMeshSurface.BuildNavMesh, X0
	381 Move W8, [X19+24]
	382 Add W20, W20, 1
	383 NotImplemented "Instruction CMP not yet implemented."
	384 Move W0, 1
	385 Call 0x1C17F20
	386 Call 0x1C17F28

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x01E0DF48 LDR X0, [X8 + 0x50]
	0x01E0DF4C CBZ X0, 0x1E0E828
	0x01E0DF50 MOV X1, X31
	0x01E0DF54 MOV V14.16B, V0.16B
	0x01E0DF58 MOV V13.16B, V1.16B
	0x01E0DF5C MOV V12.16B, V2.16B
	0x01E0DF60 MOV V15.16B, V3.16B
	0x01E0DF64 STP S10, S9, [X31 + 0x18]
	0x01E0DF68 STR S8, [X31 + 0x1E8]
	0x01E0DF6C BL 0x3C32E90
	0x01E0DF70 CBZ X0, 0x1E0E828
	0x01E0DF74 MOV X1, X31
	0x01E0DF78 BL 0x3C3DEB4
	0x01E0DF7C MOV X0, X19
	0x01E0DF80 MOV X1, X31
	0x01E0DF84 MOV V10.16B, V0.16B
	0x01E0DF88 MOV V9.16B, V1.16B
	0x01E0DF8C MOV V8.16B, V2.16B
	0x01E0DF90 MOV V11.16B, V3.16B
	0x01E0DF94 BL 0x3C32E90
	0x01E0DF98 CBZ X0, 0x1E0E828
	0x01E0DF9C FMUL S0, S15, S10
	0x01E0DFA0 FMUL S1, S14, S11
	0x01E0DFA4 FMUL S4, S15, S9
	0x01E0DFA8 FMUL S5, S13, S11
	0x01E0DFAC FMUL S17, S14, S10
	0x01E0DFB0 FMUL S20, S15, S8
	0x01E0DFB4 FMUL S21, S15, S11
	0x01E0DFB8 FMUL S22, S12, S11
	0x01E0DFBC FMUL S2, S13, S8
	0x01E0DFC0 FMUL S6, S12, S10
	0x01E0DFC4 FMUL S16, S14, S9
	0x01E0DFC8 FMUL S19, S13, S9
	0x01E0DFCC FADD S0, S0, S1
	0x01E0DFD0 FADD S1, S4, S5
	0x01E0DFD4 FADD S4, S20, S22
	0x01E0DFD8 FSUB S5, S21, S17
	0x01E0DFDC FMUL S3, S12, S9
	0x01E0DFE0 FMUL S7, S14, S8
	0x01E0DFE4 FMUL S18, S13, S10
	0x01E0DFE8 FMUL S23, S12, S8
	0x01E0DFEC FADD S0, S2, S0
	0x01E0DFF0 FADD S1, S6, S1
	0x01E0DFF4 FADD S2, S16, S4
	0x01E0DFF8 FSUB S4, S5, S19
	0x01E0DFFC MOV X1, X31
	0x01E0E000 FSUB S15, S0, S3
	0x01E0E004 FSUB S14, S1, S7
	0x01E0E008 FSUB S13, S2, S18
	0x01E0E00C FSUB S12, S4, S23
	0x01E0E010 BL 0x3C3F58C
	0x01E0E014 LDR V3, [X31 + 0x1E8]
	0x01E0E018 ADRP X20, 0x25CA000
	0x01E0E01C LDRB W8, [X20 + 0x85B]
	0x01E0E020 FADD S10, S3, S0
	0x01E0E024 LDR V0, [X31 + 0x1C]
	0x01E0E028 FADD S9, S0, S1
	0x01E0E02C LDR V0, [X31 + 0x18]
	0x01E0E030 FADD S8, S0, S2
	0x01E0E034 CBNZ W8, 0x1E0E04C
	0x01E0E038 ADRP X0, 0x22E5000
	0x01E0E03C LDR X0, [X0 + 0x5A0]
	0x01E0E040 BL 0x1C16CF4
	0x01E0E044 MOVZ W8, 0x1
	0x01E0E048 STRB W8, [X20 + 0x85B]
	0x01E0E04C ADRP X8, 0x22E5000
	0x01E0E050 LDR X8, [X8 + 0x5A0]
	0x01E0E054 MOV V1.16B, V9.16B
	0x01E0E058 MOV V2.16B, V8.16B
	0x01E0E05C MOV V3.16B, V15.16B
	0x01E0E060 LDR X8, [X8]
	0x01E0E064 MOV V4.16B, V14.16B
	0x01E0E068 MOV V5.16B, V13.16B
	0x01E0E06C MOV V6.16B, V12.16B
	0x01E0E070 LDR X8, [X8 + 0xB8]
	0x01E0E074 MOV X0, X31
	0x01E0E078 LDR V0, [X8 + 0x14]
	0x01E0E07C LDUR X9, [X8 + 0xC]
	0x01E0E080 ADD X8, X31, 0x160
	0x01E0E084 STR S0, [X31 + 0x8]
	0x01E0E088 MOV V0.16B, V10.16B
	0x01E0E08C STR X9, [X31]
	0x01E0E090 BL 0x3C26FA8
	0x01E0E094 LDP V0, V1, [X31 + 0x160]
	0x01E0E098 LDP V2, V3, [X31 + 0x180]
	0x01E0E09C ADD X0, X31, 0xE0
	0x01E0E0A0 MOV X1, X31
	0x01E0E0A4 STP V0, V1, [X31 + 0xE0]
	0x01E0E0A8 STP V2, V3, [X31 + 0x100]
	0x01E0E0AC BL 0x3C0D150
	0x01E0E0B0 LDR X8, [X22]
	0x01E0E0B4 CBZ X8, 0x1E0E828
	0x01E0E0B8 LDR V8, [X31 + 0x1EC]
	0x01E0E0BC LDR X0, [X8 + 0x50]
	0x01E0E0C0 CMP W21, 0x5
	0x01E0E0C4 CSET W1, CC
	0x01E0E0C8 MOV V0.16B, V8.16B
	0x01E0E0CC BL 0x1E0E82C
	0x01E0E0D0 LDR X8, [X22]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+112], X20
	004 Move [X31+120], X19
	005 Move X20, 0x25CC000
	006 Move W8, [X20+3539]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {26}
	012 Move X0, 0x22ED000
	013 Move X0, [X0+2456]
	014 Call 0x1C17CF4
	015 Move X0, 0x22ED000
	016 Move X0, [X0+2464]
	017 Call 0x1C17CF4
	018 Move X0, 0x22ED000
	019 Move X0, [X0+2472]
	020 Call 0x1C17CF4
	021 Move X0, 0x22ED000
	022 Move X0, [X0+2480]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3539], W8
	026 NotImplemented "Instruction MOVI not yet implemented."
	027 Move [X31+80], X31
	028 Move [X31+48], V0
	029 Move [X31+56], V0
	030 Move X8, [X19+64]
	031 Compare X8, 0
	032 JumpIfEqual {78}
	033 Move S0, 1
	034 Move S1, W31
	035 Move S2, W31
	036 Move S3, 1
	037 Move X0, X31
	038 Call Gizmos.set_color, X0
	039 Move X0, [X19+64]
	040 Compare X0, 0
	041 JumpIfEqual {83}
	042 Move X8, 0x22ED000
	043 Move X8, [X8+2480]
	044 Move X20, 0x22ED000
	045 Move X19, 0x22ED000
	046 Move X1, [X8]
	047 Move X20, [X20+2464]
	048 Move X19, [X19+2456]
	049 Add X8, X31, 8
	050 Call List`1<Bounds>.GetEnumerator, X0
	051 NotImplemented "Instruction LDUR not yet implemented."
	052 NotImplemented "Instruction LDUR not yet implemented."
	053 Move X8, [X31+40]
	054 Move [X31+48], V0
	055 Move [X31+56], V1
	056 Move [X31+80], X8
	057 Move X1, [X20]
	058 Add X0, X31, 48
	059 Call Enumerator<Bounds>.MoveNext, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {75}
	064 Move S2, [X31+72]
	065 Move S3, [X31+76]
	066 Move S4, [X31+80]
	067 Move S5, [X31+84]
	068 Move S0, [X31+64]
	069 Move S1, [X31+68]
	070 Add S3, S3, S3
	071 Add S4, S4, S4
	072 Add S5, S5, S5
	073 Move X0, X31
	074 Call Gizmos.DrawWireCube, X0, X1
	075 Move X1, [X19]
	076 Add X0, X31, 48
	077 Call Enumerator<Bounds>.Dispose, X0
	078 Move X20, [X31+112]
	079 Move X19, [X31+120]
	080 Move X30, [X31+96]
	081 Add X31, X31, 128
	082 Return 
	083 Call 0x1C17F20
	084 Move X20, X0
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X0, X20
	087 Call 0x3EB2AD0
	088 Move X19, [X0]
	089 Call 0x3EB2AE0
	090 Move X8, 0x22EC000
	091 Move X8, [X8+2456]
	092 Add X0, X31, 48
	093 Move X1, [X8]
	094 Call Enumerator<Bounds>.Dispose, X0
	095 Compare X19, 0
	096 JumpIfEqual {78}
	097 Move X0, X19
	098 Call 0x1C17F18
	099 Move X19, X31
	100 Move X20, X0
	101 Move X8, 0x22EC000
	102 Move X8, [X8+2456]
	103 Move X1, [X8]
	104 Add X0, X31, 48
	105 Call Enumerator<Bounds>.Dispose, X0
	106 Compare X19, 0
	107 JumpIfNotEqual {110}
	108 Move X0, X20
	109 Call 0x1D2D690
	110 Move X0, X19
	111 Call 0x1C17F18
	112 Call 0x1991590

Method: System.Void .ctor()

Disassembly:
	0x01E0E0D4 CBZ X8, 0x1E0E828
	0x01E0E0D8 LDR X0, [X23]

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

