Type: AnimalCompany.GameGen.RuledTile

Method: System.Void RenderTile(AnimalCompany.GameGen.Archetype archetype, AnimalCompany.GameGen.RuleTile ruleTile)

Disassembly:
	0x01CFB57C FMOV S1, W31
	0x01CFB580 FMOV S2, W31
	0x01CFB584 FMOV S4, W31
	0x01CFB588 MOV V0.16B, V10.16B
	0x01CFB58C MOV V3.16B, V10.16B
	0x01CFB590 MOV V5.16B, V9.16B
	0x01CFB594 MOV X0, X31
	0x01CFB598 BL 0x3A755E8
	0x01CFB59C FMOV S2, W31
	0x01CFB5A0 MOV V0.16B, V10.16B
	0x01CFB5A4 MOV V1.16B, V8.16B
	0x01CFB5A8 MOV V3.16B, V10.16B
	0x01CFB5AC MOV V4.16B, V8.16B
	0x01CFB5B0 MOV V5.16B, V9.16B
	0x01CFB5B4 MOV X0, X31
	0x01CFB5B8 BL 0x3A755E8
	0x01CFB5BC MOV V0.16B, V11.16B
	0x01CFB5C0 MOV V1.16B, V8.16B
	0x01CFB5C4 MOV V3.16B, V11.16B
	0x01CFB5C8 MOV V4.16B, V8.16B
	0x01CFB5CC MOV V5.16B, V9.16B
	0x01CFB5D0 LDP X30, X19, [X31 + 0x30]
	0x01CFB5D4 LDP D9, D8, [X31 + 0x20]
	0x01CFB5D8 LDP D11, D10, [X31 + 0x10]
	0x01CFB5DC FMOV S2, W31
	0x01CFB5E0 MOV X0, X31
	0x01CFB5E4 LDP D13, D12, [X31], #0x40
	0x01CFB5E8 B 0x3A755E8
	0x01CFB5EC BL 0x1B6EA1C
	0x01CFB5F0 MOV X1, X31
	0x01CFB5F4 B 0x3A9EEE4
	0x01CFB5F8 SUB X31, X31, 0x70
	0x01CFB5FC STP D11, D10, [X31 + 0x10]
	0x01CFB600 STP D9, D8, [X31 + 0x20]
	0x01CFB604 STP X30, X25, [X31 + 0x30]
	0x01CFB608 STP X24, X23, [X31 + 0x40]
	0x01CFB60C STP X22, X21, [X31 + 0x50]
	0x01CFB610 STP X20, X19, [X31 + 0x60]
	0x01CFB614 ADRP X22, 0x2528000
	0x01CFB618 ADRP X21, 0x2255000
	0x01CFB61C LDRB W8, [X22 + 0x715]
	0x01CFB620 LDR X21, [X21 + 0x400]
	0x01CFB624 MOV X20, X1
	0x01CFB628 MOV X19, X0
	0x01CFB62C TBNZ X8, 0x0, 0x1CFB698
	0x01CFB630 ADRP X0, 0x2255000
	0x01CFB634 LDR X0, [X0 + 0x400]
	0x01CFB638 BL 0x1B6E7F0
	0x01CFB63C ADRP X0, 0x2255000
	0x01CFB640 LDR X0, [X0 + 0xAD0]
	0x01CFB644 BL 0x1B6E7F0
	0x01CFB648 ADRP X0, 0x2252000
	0x01CFB64C LDR X0, [X0 + 0x628]
	0x01CFB650 BL 0x1B6E7F0
	0x01CFB654 ADRP X0, 0x2255000
	0x01CFB658 LDR X0, [X0 + 0xAD8]
	0x01CFB65C BL 0x1B6E7F0
	0x01CFB660 ADRP X0, 0x2252000
	0x01CFB664 LDR X0, [X0 + 0x478]
	0x01CFB668 BL 0x1B6E7F0
	0x01CFB66C ADRP X0, 0x2255000
	0x01CFB670 LDR X0, [X0 + 0xAE0]
	0x01CFB674 BL 0x1B6E7F0
	0x01CFB678 ADRP X0, 0x2255000
	0x01CFB67C LDR X0, [X0 + 0xAE8]
	0x01CFB680 BL 0x1B6E7F0
	0x01CFB684 ADRP X0, 0x2255000
	0x01CFB688 LDR X0, [X0 + 0xAF0]
	0x01CFB68C BL 0x1B6E7F0
	0x01CFB690 MOVZ W8, 0x1
	0x01CFB694 STRB W8, [X22 + 0x715]
	0x01CFB698 MOV X0, X19
	0x01CFB69C MOV X1, X20
	0x01CFB6A0 BL 0x1CFBBA0
	0x01CFB6A4 LDR X0, [X21]
	0x01CFB6A8 MOVZ W1, 0x4
	0x01CFB6AC BL 0x1B6E868
	0x01CFB6B0 LDR X8, [X19 + 0x60]
	0x01CFB6B4 CBZ X8, 0x1CFBB9C
	0x01CFB6B8 MOV X21, X0
	0x01CFB6BC CBZ X0, 0x1CFBB9C
	0x01CFB6C0 LDR X9, [X21 + 0x18]
	0x01CFB6C4 CBZ W9, 0x1CFBB98
	0x01CFB6C8 LDRB W8, [X8 + 0x50]
	0x01CFB6CC STRB W8, [X21 + 0x20]
	0x01CFB6D0 LDR X8, [X19 + 0x50]
	0x01CFB6D4 CBZ X8, 0x1CFBB9C
	0x01CFB6D8 CMP W9, 0x1
	0x01CFB6DC B.LS 0x1CFBB98
	0x01CFB6E0 LDRB W8, [X8 + 0x50]
	0x01CFB6E4 STRB W8, [X21 + 0x21]
	0x01CFB6E8 LDR X8, [X19 + 0x58]
	0x01CFB6EC CBZ X8, 0x1CFBB9C
	0x01CFB6F0 CMP W9, 0x2
	0x01CFB6F4 B.LS 0x1CFBB98
	0x01CFB6F8 LDRB W8, [X8 + 0x50]
	0x01CFB6FC STRB W8, [X21 + 0x22]
	0x01CFB700 LDR X8, [X19 + 0x48]
	0x01CFB704 CBZ X8, 0x1CFBB9C
	0x01CFB708 CMP W9, 0x3
	0x01CFB70C B.LS 0x1CFBB98
	0x01CFB710 LDRB W8, [X8 + 0x50]
	0x01CFB714 CMP W9, 0x1
	0x01CFB718 STRB W8, [X21 + 0x23]
	0x01CFB71C STR W31, [X31 + 0xC]
	0x01CFB720 B.LT 0x1CFB780
	0x01CFB724 MOV W25, W31
	0x01CFB728 MOV X8, X31
	0x01CFB72C MOV W24, W31
	0x01CFB730 MOV W11, W31
	0x01CFB734 AND X9, X9, 0x0
	0x01CFB738 ADD X10, X21, 0x20
	0x01CFB73C CMP X9, X8
	0x01CFB740 B.EQ 0x1CFBB98
	0x01CFB744 LDRB W12, [X10, X8, LSL]
	0x01CFB748 CBNZ W12, 0x1CFB760
	0x01CFB74C ANDS W31, W11, 0x1
	0x01CFB750 ADD W25, W25, 0x1
	0x01CFB754 CSEL W24, W24, W8, NE
	0x01CFB758 MOVZ W11, 0x1
	0x01CFB75C STR W25, [X31 + 0xC]
	0x01CFB760 ADD X8, X8, 0x1
	0x01CFB764 CMP X9, X8
	0x01CFB768 B.NE 0x1CFB73C
	0x01CFB76C CMP W25, 0x4
	0x01CFB770 B.EQ 0x1CFB7A8
	0x01CFB774 CMP W25, 0x1
	0x01CFB778 B.EQ 0x1CFB7D0
	0x01CFB77C CBNZ W25, 0x1CFB824
	0x01CFB780 MOVZ W1, 0x4
	0x01CFB784 MOV W0, W31
	0x01CFB788 MOV X2, X31
	0x01CFB78C BL 0x3A98D10
	0x01CFB790 LDR X8, [X19 + 0x40]
	0x01CFB794 CBZ X8, 0x1CFBB9C
	0x01CFB798 MOV W22, W0
	0x01CFB79C MOV X0, X8
	0x01CFB7A0 MOV W1, W31
	0x01CFB7A4 B 0x1CFB8EC
	0x01CFB7A8 MOVZ W1, 0x4
	0x01CFB7AC MOV W0, W31
	0x01CFB7B0 MOV X2, X31
	0x01CFB7B4 BL 0x3A98D10
	0x01CFB7B8 LDR X8, [X19 + 0x40]
	0x01CFB7BC CBZ X8, 0x1CFBB9C
	0x01CFB7C0 MOV W22, W0
	0x01CFB7C4 MOVZ W1, 0x5
	0x01CFB7C8 MOV X0, X8
	0x01CFB7CC B 0x1CFB8EC
	0x01CFB7D0 LDR X8, [X21 + 0x18]
	0x01CFB7D4 CMP W8, 0x1
	0x01CFB7D8 B.LT 0x1CFB800
	0x01CFB7DC MOV X22, X31
	0x01CFB7E0 ADD X9, X21, 0x20
	0x01CFB7E4 CMP W8, W22
	0x01CFB7E8 B.EQ 0x1CFBB98
	0x01CFB7EC LDRB W10, [X9, X22, LSL]
	0x01CFB7F0 CBZ W10, 0x1CFB804
	0x01CFB7F4 ADD X22, X22, 0x1
	0x01CFB7F8 CMP W22, W8
	0x01CFB7FC B.LT 0x1CFB7E4
	0x01CFB800 MOV W22, W31
	0x01CFB804 LDR X0, [X19 + 0x40]
	0x01CFB808 CBZ X0, 0x1CFBB9C
	0x01CFB80C MOVZ W1, 0x1
	0x01CFB810 MOV X2, X31
	0x01CFB814 BL 0x1CF7BC0
	0x01CFB818 MOV X23, X0
	0x01CFB81C SUB W22, W31, W22
	0x01CFB820 B 0x1CFB82C
	0x01CFB824 MOV W22, W31
	0x01CFB828 MOV X23, X31
	0x01CFB82C CMP W25, 0x3
	0x01CFB830 B.EQ 0x1CFB8A4
	0x01CFB834 CMP W25, 0x2
	0x01CFB838 B.NE 0x1CFB8F8
	0x01CFB83C ADD W22, W24, 0x2
	0x01CFB840 ADD W8, W24, 0x5
	0x01CFB844 CMP W22, 0x0
	0x01CFB848 LDR W9, [X21 + 0x18]
	0x01CFB84C CSEL W8, W8, W22, LT
	0x01CFB850 AND W8, W8, 0xFFFFFFFC
	0x01CFB854 SUB W8, W22, W8
	0x01CFB858 CMP W8, W9
	0x01CFB85C B.CS 0x1CFBB98
	0x01CFB860 LDR X0, [X19 + 0x40]
	0x01CFB864 CBZ X0, 0x1CFBB9C
	0x01CFB868 ADD X8, X21, W8, SXTW
	0x01CFB86C LDRB W8, [X8 + 0x20]
	0x01CFB870 CBZ W8, 0x1CFBB64
	0x01CFB874 MOVZ W1, 0x2
	0x01CFB878 MOV X2, X31
	0x01CFB87C BL 0x1CF7BC0
	0x01CFB880 MOV X23, X0
	0x01CFB884 CBNZ W24, 0x1CFB89C
	0x01CFB888 LDR W8, [X21 + 0x18]
	0x01CFB88C CMP W8, 0x3
	0x01CFB890 B.LS 0x1CFBB98
	0x01CFB894 LDRB W8, [X21 + 0x23]
	0x01CFB898 CBZ W8, 0x1CFBB90
	0x01CFB89C SUB W22, W31, W24
	0x01CFB8A0 B 0x1CFB8F8
	0x01CFB8A4 LDR X9, [X21 + 0x18]
	0x01CFB8A8 CMP W9, 0x1
	0x01CFB8AC B.LT 0x1CFB8D4
	0x01CFB8B0 MOV X8, X31
	0x01CFB8B4 ADD X10, X21, 0x20
	0x01CFB8B8 CMP W9, W8
	0x01CFB8BC B.EQ 0x1CFBB98
	0x01CFB8C0 LDRB W11, [X10, X8, LSL]
	0x01CFB8C4 CBNZ W11, 0x1CFB8D8
	0x01CFB8C8 ADD X8, X8, 0x1
	0x01CFB8CC CMP W8, W9

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x2529000
	010 Move X23, 0x2256000
	011 Move W8, [X22+1811]
	012 Move X23, [X23+2728]
	013 Move X20, X2
	014 Move X19, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {43}
	020 Move X0, 0x2256000
	021 Move X0, [X0+2728]
	022 Call 0x1B6F7F0
	023 Move X0, 0x2256000
	024 Move X0, [X0+2736]
	025 Call 0x1B6F7F0
	026 Move X0, 0x2256000
	027 Move X0, [X0+2744]
	028 Call 0x1B6F7F0
	029 Move X0, 0x2253000
	030 Move X0, [X0+2272]
	031 Call 0x1B6F7F0
	032 Move X0, 0x2256000
	033 Move X0, [X0+2752]
	034 Call 0x1B6F7F0
	035 Move X0, 0x2253000
	036 Move X0, [X0+1144]
	037 Call 0x1B6F7F0
	038 Move X0, 0x2256000
	039 Move X0, [X0+2760]
	040 Call 0x1B6F7F0
	041 Move W8, 1
	042 Move [X22+1811], W8
	043 Move X2, [X23]
	044 Move W1, 1
	045 Move X0, X21
	046 Call 0x2091B0C, X0, X1
	047 Compare X0, 0
	048 JumpIfEqual {241}
	049 Move W8, [X0+24]
	050 Move X22, X0
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X25, 0x2256000
	053 Move X25, [X25+2752]
	054 Move W24, W31
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Add X8, X22, W24
	057 Move X23, [X8+32]
	058 Compare X23, 0
	059 JumpIfEqual {241}
	060 Move X8, [X23]
	061 Move X1, [X25]
	062 NotImplemented "Instruction LDRH not yet implemented."
	063 Compare X9, 0
	064 JumpIfEqual {71}
	065 Move X10, [X8+176]
	066 Add X10, X10, 8
	067 NotImplemented "Instruction LDUR not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Subtract X9, X9, 1
	070 Add X10, X10, 16
	071 Move X0, X23
	072 Move W2, W31
	073 Call 0x1BB5284
	074 NotImplemented "Instruction LDRSW not yet implemented."
	075 Add X8, X8, X9
	076 Add X0, X8, 312
	077 Move X8, [X0]
	078 Move X1, [X0+8]
	079 Move X0, X23
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move W8, [X22+24]
	082 Add W24, W24, 1
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Compare X19, 0
	085 JumpIfEqual {241}
	086 Move X8, 0x2253000
	087 Move X8, [X8+1144]
	088 Move X22, [X19+32]
	089 Move X0, [X8]
	090 Move W8, [X0+224]
	091 Compare W8, 0
	092 JumpIfNotEqual {94}
	093 Call 0x1B6F8F8
	094 Move X0, X22
	095 Move X1, X31
	096 Move X2, X31
	097 Call Object.op_Inequality, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {232}
	102 Move X0, [X19+32]
	103 Compare X0, 0
	104 JumpIfEqual {241}
	105 Move X1, X31
	106 Call Object.get_name, X0
	107 Move X8, 0x2256000
	108 Move X8, [X8+2760]
	109 Move X1, X0
	110 Move X2, X31
	111 Move X8, [X8]
	112 Move X0, X8
	113 Call String.Concat, X0, X1
	114 Move X8, 0x2253000
	115 Move X8, [X8+2272]
	116 Move X23, X0
	117 Move X8, [X8]
	118 Move X0, X8
	119 Call 0x1B6FA0C
	120 Move X1, X23
	121 Move X2, X31
	122 Move X22, X0
	123 Call GameObject..ctor, X0, X1
	124 Compare X22, 0
	125 JumpIfEqual {241}
	126 Move X0, X22
	127 Move X1, X31
	128 Call GameObject.get_transform, X0
	129 Move X23, X0
	130 Move X0, X21
	131 Move X1, X31
	132 Call Component.get_transform, X0
	133 Compare X23, 0
	134 JumpIfEqual {241}
	135 Move X1, X0
	136 Move X0, X23
	137 Move X2, X31
	138 Call Transform.set_parent, X0, X1
	139 Move X0, X22
	140 Move X1, X31
	141 Call GameObject.get_transform, X0
	142 Move X23, 0x2529000
	143 Move W8, [X23+1087]
	144 Move X21, X0
	145 Compare W8, 0
	146 JumpIfNotEqual {152}
	147 Move X0, 0x2253000
	148 Move X0, [X0+1152]
	149 Call 0x1B6F7F0
	150 Move W8, 1
	151 Move [X23+1087], W8
	152 Compare X21, 0
	153 JumpIfEqual {241}
	154 Move X8, 0x2253000
	155 Move X8, [X8+1152]
	156 Move X0, X21
	157 Move X1, X31
	158 Move X8, [X8]
	159 Move X8, [X8+184]
	160 Move S1, [X8+4]
	161 Move S2, [X8+8]
	162 Move V0, [X8]
	163 Call Transform.set_localPosition, X0, X1
	164 Move X0, X22
	165 Move X1, X31
	166 Call GameObject.get_transform, X0
	167 Move X23, 0x2529000
	168 Move W8, [X23+1108]
	169 Move X21, X0
	170 Compare W8, 0
	171 JumpIfNotEqual {177}
	172 Move X0, 0x2254000
	173 Move X0, [X0+504]
	174 Call 0x1B6F7F0
	175 Move W8, 1
	176 Move [X23+1108], W8
	177 Compare X21, 0
	178 JumpIfEqual {241}
	179 Move X8, 0x2254000
	180 Move X8, [X8+504]
	181 Move X0, X21
	182 Move X1, X31
	183 Move X8, [X8]
	184 Move X8, [X8+184]
	185 Move S2, [X8+8]
	186 Move S3, [X8+12]
	187 Move S0, [X8]
	188 Move S1, [X8+4]
	189 Call Transform.set_localRotation, X0, X1
	190 Move W1, 20
	191 Move X0, X22
	192 Move X2, X31
	193 Call GameObject.set_layer, X0, X1
	194 Move X8, 0x2256000
	195 Move X8, [X8+2736]
	196 Move X0, X22
	197 Move X1, [X8]
	198 Call 0x20CFE08, X0
	199 Compare X20, 0
	200 JumpIfEqual {241}
	201 Move X21, X0
	202 Compare X0, 0
	203 JumpIfEqual {241}
	204 Move S1, [X20+36]
	205 Move S2, [X20+40]
	206 Move V0, [X20+32]
	207 Move X0, X21
	208 Move X1, X31
	209 Call BoxCollider.set_center, X0, X1
	210 Move S0, [X20+44]
	211 Move S1, [X20+48]
	212 Move V2, [X20+52]
	213 Move X0, X21
	214 Move X1, X31
	215 Add S0, S0, S0
	216 Add S1, S1, S1
	217 Add S2, S2, S2
	218 Call BoxCollider.set_size, X0, X1
	219 Move W1, 1
	220 Move X0, X21
	221 Move X2, X31
	222 Call Collider.set_isTrigger, X0, X1
	223 Move X8, 0x2256000
	224 Move X8, [X8+2744]
	225 Move X0, X22
	226 Move X1, [X8]
	227 Call 0x20CFE08, X0
	228 Compare X0, 0
	229 JumpIfEqual {241}
	230 Move X8, [X19+32]
	231 Move [X0+32], X8
	232 Move X20, [X31+48]
	233 Move X19, [X31+56]
	234 Move X22, [X31+32]
	235 Move X21, [X31+40]
	236 Move X24, [X31+16]
	237 Move X23, [X31+24]
	238 Move X30, [X31+64]
	239 Move X25, [X31+72]
	240 Return 
	241 Call 0x1B6FA1C
	242 Call 0x1B6FA24

Method: System.Boolean GetIsRuleOrientationOpen(AnimalCompany.GameGen.RuleOrientation ruleOrientation)

Disassembly:
	0x01CFB8D0 B.LT 0x1CFB8B8
	0x01CFB8D4 MOV W8, W31
	0x01CFB8D8 LDR X0, [X19 + 0x40]
	0x01CFB8DC CBZ X0, 0x1CFBB9C
	0x01CFB8E0 MOVZ W9, 0x3
	0x01CFB8E4 SUB W22, W9, W8
	0x01CFB8E8 MOVZ W1, 0x4
	0x01CFB8EC MOV X2, X31
	0x01CFB8F0 BL 0x1CF7BC0
	0x01CFB8F4 MOV X23, X0
	0x01CFB8F8 ADRP X21, 0x2252000
	0x01CFB8FC LDR X21, [X21 + 0x478]
	0x01CFB900 LDR X0, [X21]
	0x01CFB904 LDR W8, [X0 + 0xE0]
	0x01CFB908 CBNZ W8, 0x1CFB910
	0x01CFB90C BL 0x1B6E8F8
	0x01CFB910 MOV X0, X23
	0x01CFB914 MOV X1, X31
	0x01CFB918 MOV X2, X31
	0x01CFB91C BL 0x3AA0AF0
	0x01CFB920 TBZ X0, 0x0, 0x1CFB9A0
	0x01CFB924 ADD X0, X31, 0xC
	0x01CFB928 MOV X1, X31
	0x01CFB92C BL 0x31E4D14
	0x01CFB930 ADRP X8, 0x2255000

ISIL:
	001 Move W8, [X0+40]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move X9, -18931712
	004 Add X9, X9, 2411
	005 NotImplemented "Instruction ADR not yet implemented."
	006 Move W11, [X9]
	007 Add X10, X10, X11
	008 CallNoReturn X10
	009 Move W0, 1
	010 Return X0
	011 Move W0, W31
	012 Return X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 And W8, W1, 0xFFFFFFFD
	015 NotImplemented "Instruction CMP not yet implemented."
	016 And W8, W1, 0xFFFFFFFE
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction CSET not yet implemented."
	019 Return X0
	020 NotImplemented "Instruction CMP not yet implemented."
	021 NotImplemented "Instruction CSET not yet implemented."
	022 Return X0

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01CFB934 LDR X8, [X8 + 0xAF0]
	0x01CFB938 MOV X1, X0

ISIL:
	001 Move S0, 1

Method: System.Void DrawWireframeGizmoInternal(System.Single opacity)

Disassembly:
	0x01CFB93C MOV X2, X31
	0x01CFB940 LDR X8, [X8]
	0x01CFB944 MOV X0, X8
	0x01CFB948 BL 0x3084780
	0x01CFB94C ADRP X8, 0x2252000
	0x01CFB950 LDR X8, [X8 + 0x628]
	0x01CFB954 MOV X19, X0
	0x01CFB958 LDR X8, [X8]
	0x01CFB95C LDR W9, [X8 + 0xE0]
	0x01CFB960 CBNZ W9, 0x1CFB96C
	0x01CFB964 MOV X0, X8
	0x01CFB968 BL 0x1B6E8F8
	0x01CFB96C ADRP X8, 0x2255000
	0x01CFB970 ADRP X9, 0x2255000
	0x01CFB974 LDR X8, [X8 + 0xAE0]
	0x01CFB978 LDR X9, [X9 + 0xAE8]
	0x01CFB97C MOVZ W0, 0x20
	0x01CFB980 MOVZ W5, 0xA3
	0x01CFB984 LDR X3, [X8]
	0x01CFB988 LDR X4, [X9]
	0x01CFB98C MOV X1, X19
	0x01CFB990 MOV X2, X31
	0x01CFB994 MOV X6, X31
	0x01CFB998 BL 0x342B7DC
	0x01CFB99C B 0x1CFBB44
	0x01CFB9A0 LDR X0, [X21]
	0x01CFB9A4 LDR W8, [X0 + 0xE0]
	0x01CFB9A8 CBNZ W8, 0x1CFB9B0
	0x01CFB9AC BL 0x1B6E8F8
	0x01CFB9B0 ADRP X8, 0x2255000
	0x01CFB9B4 LDR X8, [X8 + 0xAD8]
	0x01CFB9B8 MOV X0, X23
	0x01CFB9BC LDR X1, [X8]
	0x01CFB9C0 BL 0x2114D24
	0x01CFB9C4 CBZ X0, 0x1CFBB9C
	0x01CFB9C8 MOV X1, X31
	0x01CFB9CC MOV X21, X0
	0x01CFB9D0 BL 0x3A9B084
	0x01CFB9D4 MOV X23, X0
	0x01CFB9D8 MOV X0, X19
	0x01CFB9DC MOV X1, X31
	0x01CFB9E0 BL 0x3A9B084
	0x01CFB9E4 CBZ X0, 0x1CFBB9C
	0x01CFB9E8 MOV X1, X31
	0x01CFB9EC BL 0x3AA7658
	0x01CFB9F0 CBZ X23, 0x1CFBB9C
	0x01CFB9F4 MOV X0, X23
	0x01CFB9F8 MOV X1, X31
	0x01CFB9FC BL 0x3AA76F8
	0x01CFBA00 MOV X0, X21
	0x01CFBA04 MOV X1, X31
	0x01CFBA08 BL 0x3A9B084
	0x01CFBA0C ADRP X8, 0xFFFFFFFFFEDAE000
	0x01CFBA10 LDR V0, [X8 + 0xAF4]
	0x01CFBA14 MOVZ W8, 0x5A
	0x01CFBA18 MUL W8, W22, W8
	0x01CFBA1C SCVTF S1, W8
	0x01CFBA20 MOV X23, X0
	0x01CFBA24 FMUL S1, S1, S0
	0x01CFBA28 FMOV S0, W31
	0x01CFBA2C FMOV S2, W31
	0x01CFBA30 MOV X0, X31
	0x01CFBA34 BL 0x3A928DC
	0x01CFBA38 MOV X0, X19
	0x01CFBA3C MOV X1, X31
	0x01CFBA40 MOV V9.16B, V0.16B
	0x01CFBA44 MOV V11.16B, V1.16B
	0x01CFBA48 MOV V8.16B, V2.16B
	0x01CFBA4C MOV V10.16B, V3.16B
	0x01CFBA50 BL 0x3A9B084
	0x01CFBA54 CBZ X0, 0x1CFBB9C
	0x01CFBA58 MOV X1, X31
	0x01CFBA5C BL 0x3AA5FBC
	0x01CFBA60 CBZ X23, 0x1CFBB9C
	0x01CFBA64 FMUL S4, S10, S3
	0x01CFBA68 FMUL S5, S9, S0
	0x01CFBA6C FMUL S7, S8, S2
	0x01CFBA70 FMUL S17, S10, S2
	0x01CFBA74 FMUL S18, S8, S3
	0x01CFBA78 FMUL S19, S11, S0
	0x01CFBA7C FMUL S20, S11, S3
	0x01CFBA80 FMUL S21, S11, S2
	0x01CFBA84 FMUL S22, S9, S2
	0x01CFBA88 FMUL S2, S9, S3
	0x01CFBA8C FMUL S3, S8, S0
	0x01CFBA90 FMUL S0, S10, S0
	0x01CFBA94 FMUL S23, S10, S1
	0x01CFBA98 FMUL S6, S11, S1
	0x01CFBA9C FMUL S16, S9, S1
	0x01CFBAA0 FMUL S24, S8, S1
	0x01CFBAA4 FSUB S1, S4, S5
	0x01CFBAA8 FADD S4, S17, S18
	0x01CFBAAC FADD S5, S23, S20
	0x01CFBAB0 FADD S0, S0, S2
	0x01CFBAB4 FSUB S1, S1, S6
	0x01CFBAB8 FADD S2, S16, S4
	0x01CFBABC FADD S4, S3, S5
	0x01CFBAC0 FADD S0, S21, S0
	0x01CFBAC4 FSUB S3, S1, S7
	0x01CFBAC8 FSUB S2, S2, S19
	0x01CFBACC FSUB S1, S4, S22
	0x01CFBAD0 FSUB S0, S0, S24
	0x01CFBAD4 MOV X0, X23
	0x01CFBAD8 MOV X1, X31
	0x01CFBADC BL 0x3AA7984
	0x01CFBAE0 MOV X0, X21
	0x01CFBAE4 MOV X1, X31
	0x01CFBAE8 BL 0x3A9B084
	0x01CFBAEC MOV X22, X0
	0x01CFBAF0 MOV X0, X19
	0x01CFBAF4 MOV X1, X31
	0x01CFBAF8 BL 0x3A9B084
	0x01CFBAFC CBZ X0, 0x1CFBB9C
	0x01CFBB00 MOV X1, X31
	0x01CFBB04 BL 0x3A9B084
	0x01CFBB08 CBZ X22, 0x1CFBB9C
	0x01CFBB0C MOV X1, X0
	0x01CFBB10 MOVZ W2, 0x1
	0x01CFBB14 MOV X0, X22
	0x01CFBB18 MOV X3, X31
	0x01CFBB1C BL 0x3AA7F84
	0x01CFBB20 ADRP X8, 0x2255000
	0x01CFBB24 LDR X8, [X8 + 0xAD0]
	0x01CFBB28 MOV X0, X21
	0x01CFBB2C LDR X1, [X8]
	0x01CFBB30 BL 0x208FDE8
	0x01CFBB34 CBZ X0, 0x1CFBB9C
	0x01CFBB38 MOV X1, X20
	0x01CFBB3C MOV X2, X19
	0x01CFBB40 BL 0x1CFA57C
	0x01CFBB44 LDP X20, X19, [X31 + 0x60]
	0x01CFBB48 LDP X22, X21, [X31 + 0x50]
	0x01CFBB4C LDP X24, X23, [X31 + 0x40]
	0x01CFBB50 LDP X30, X25, [X31 + 0x30]
	0x01CFBB54 LDP D9, D8, [X31 + 0x20]
	0x01CFBB58 LDP D11, D10, [X31 + 0x10]
	0x01CFBB5C ADD X31, X31, 0x70
	0x01CFBB60 RET
	0x01CFBB64 MOVZ W1, 0x3
	0x01CFBB68 MOV X2, X31
	0x01CFBB6C BL 0x1CF7BC0
	0x01CFBB70 MOV X23, X0
	0x01CFBB74 MOVZ W1, 0x2
	0x01CFBB78 MOV W0, W31
	0x01CFBB7C MOV X2, X31
	0x01CFBB80 BL 0x3A98D10
	0x01CFBB84 CMP W0, 0x0
	0x01CFBB88 CSEL W22, W22, W24, EQ
	0x01CFBB8C B 0x1CFB8F8
	0x01CFBB90 MOVZ W22, 0x1
	0x01CFBB94 B 0x1CFB8F8
	0x01CFBB98 BL 0x1B6EA24
	0x01CFBB9C BL 0x1B6EA1C
	0x01CFBBA0 STR X30, [X31 - 0x40]!
	0x01CFBBA4 STP X24, X23, [X31 + 0x10]
	0x01CFBBA8 STP X22, X21, [X31 + 0x20]
	0x01CFBBAC STP X20, X19, [X31 + 0x30]
	0x01CFBBB0 ADRP X21, 0x2528000
	0x01CFBBB4 ADRP X22, 0x2255000
	0x01CFBBB8 LDRB W8, [X21 + 0x718]
	0x01CFBBBC LDR X22, [X22 + 0xAA8]
	0x01CFBBC0 MOV X19, X1
	0x01CFBBC4 MOV X20, X0
	0x01CFBBC8 TBNZ X8, 0x0, 0x1CFBC28
	0x01CFBBCC ADRP X0, 0x2255000
	0x01CFBBD0 LDR X0, [X0 + 0xAA8]
	0x01CFBBD4 BL 0x1B6E7F0
	0x01CFBBD8 ADRP X0, 0x2255000
	0x01CFBBDC LDR X0, [X0 + 0xAB0]
	0x01CFBBE0 BL 0x1B6E7F0
	0x01CFBBE4 ADRP X0, 0x2255000
	0x01CFBBE8 LDR X0, [X0 + 0xAB8]
	0x01CFBBEC BL 0x1B6E7F0
	0x01CFBBF0 ADRP X0, 0x2252000
	0x01CFBBF4 LDR X0, [X0 + 0x8E0]
	0x01CFBBF8 BL 0x1B6E7F0
	0x01CFBBFC ADRP X0, 0x2255000
	0x01CFBC00 LDR X0, [X0 + 0xAC0]
	0x01CFBC04 BL 0x1B6E7F0
	0x01CFBC08 ADRP X0, 0x2252000
	0x01CFBC0C LDR X0, [X0 + 0x478]
	0x01CFBC10 BL 0x1B6E7F0
	0x01CFBC14 ADRP X0, 0x2255000
	0x01CFBC18 LDR X0, [X0 + 0xAC8]
	0x01CFBC1C BL 0x1B6E7F0
	0x01CFBC20 MOVZ W8, 0x1
	0x01CFBC24 STRB W8, [X21 + 0x718]
	0x01CFBC28 LDR X2, [X22]
	0x01CFBC2C MOVZ W1, 0x1
	0x01CFBC30 MOV X0, X20
	0x01CFBC34 BL 0x2090B0C
	0x01CFBC38 CBZ X0, 0x1CFBEE0
	0x01CFBC3C LDR W8, [X0 + 0x18]
	0x01CFBC40 MOV X21, X0
	0x01CFBC44 CMP W8, 0x1
	0x01CFBC48 B.LT 0x1CFBCD4
	0x01CFBC4C ADRP X24, 0x2255000
	0x01CFBC50 LDR X24, [X24 + 0xAC0]
	0x01CFBC54 MOV W23, W31
	0x01CFBC58 CMP W23, W8
	0x01CFBC5C B.CS 0x1CFBEE4
	0x01CFBC60 ADD X8, X21, W23, 0x3, SXTW
	0x01CFBC64 LDR X22, [X8 + 0x20]
	0x01CFBC68 CBZ X22, 0x1CFBEE0
	0x01CFBC6C LDR X8, [X22]
	0x01CFBC70 LDR X1, [X24]
	0x01CFBC74 LDRH W9, [X8 + 0x12E]
	0x01CFBC78 CBZ X9, 0x1CFBC9C
	0x01CFBC7C LDR X10, [X8 + 0xB0]
	0x01CFBC80 ADD X10, X10, 0x8
	0x01CFBC84 LDUR X11, [X10 - 0x8]
	0x01CFBC88 CMP X11, X1
	0x01CFBC8C B.EQ 0x1CFBCAC
	0x01CFBC90 SUBS X9, X9, 0x1
	0x01CFBC94 ADD X10, X10, 0x10
	0x01CFBC98 B.NE 0x1CFBC84
	0x01CFBC9C MOV X0, X22
	0x01CFBCA0 MOV W2, W31
	0x01CFBCA4 BL 0x1BB4284
	0x01CFBCA8 B 0x1CFBCB8
	0x01CFBCAC LDRSW X9, [X10]
	0x01CFBCB0 ADD X8, X8, X9, 0x4, LSL
	0x01CFBCB4 ADD X0, X8, 0x138
	0x01CFBCB8 LDP X8, X1, [X0]
	0x01CFBCBC MOV X0, X22
	0x01CFBCC0 BLR X8
	0x01CFBCC4 LDR W8, [X21 + 0x18]
	0x01CFBCC8 ADD W23, W23, 0x1
	0x01CFBCCC CMP W23, W8
	0x01CFBCD0 B.LT 0x1CFBC58
	0x01CFBCD4 CBZ X19, 0x1CFBEE0
	0x01CFBCD8 ADRP X8, 0x2252000
	0x01CFBCDC LDR X8, [X8 + 0x478]
	0x01CFBCE0 LDR X21, [X19 + 0x20]
	0x01CFBCE4 LDR X0, [X8]
	0x01CFBCE8 LDR W8, [X0 + 0xE0]
	0x01CFBCEC CBNZ W8, 0x1CFBCF4
	0x01CFBCF0 BL 0x1B6E8F8
	0x01CFBCF4 MOV X0, X21
	0x01CFBCF8 MOV X1, X31
	0x01CFBCFC MOV X2, X31
	0x01CFBD00 BL 0x3A9D6EC
	0x01CFBD04 TBZ X0, 0x0, 0x1CFBECC
	0x01CFBD08 LDR X0, [X19 + 0x20]
	0x01CFBD0C CBZ X0, 0x1CFBEE0
	0x01CFBD10 MOV X1, X31
	0x01CFBD14 BL 0x3AA0C88
	0x01CFBD18 ADRP X8, 0x2255000
	0x01CFBD1C LDR X8, [X8 + 0xAC8]
	0x01CFBD20 MOV X1, X0
	0x01CFBD24 MOV X2, X31
	0x01CFBD28 LDR X8, [X8]
	0x01CFBD2C MOV X0, X8
	0x01CFBD30 BL 0x3084780
	0x01CFBD34 ADRP X8, 0x2252000
	0x01CFBD38 LDR X8, [X8 + 0x8E0]
	0x01CFBD3C MOV X22, X0
	0x01CFBD40 LDR X8, [X8]
	0x01CFBD44 MOV X0, X8
	0x01CFBD48 BL 0x1B6EA0C
	0x01CFBD4C MOV X1, X22
	0x01CFBD50 MOV X2, X31
	0x01CFBD54 MOV X21, X0
	0x01CFBD58 BL 0x3A9DAE4
	0x01CFBD5C CBZ X21, 0x1CFBEE0
	0x01CFBD60 MOV X0, X21
	0x01CFBD64 MOV X1, X31
	0x01CFBD68 BL 0x3A9D8EC
	0x01CFBD6C MOV X22, X0
	0x01CFBD70 MOV X0, X20
	0x01CFBD74 MOV X1, X31
	0x01CFBD78 BL 0x3A9B084
	0x01CFBD7C CBZ X22, 0x1CFBEE0
	0x01CFBD80 MOV X1, X0
	0x01CFBD84 MOV X0, X22
	0x01CFBD88 MOV X2, X31
	0x01CFBD8C BL 0x3AA7DEC
	0x01CFBD90 MOV X0, X21
	0x01CFBD94 MOV X1, X31
	0x01CFBD98 BL 0x3A9D8EC
	0x01CFBD9C ADRP X23, 0x2528000
	0x01CFBDA0 LDRB W8, [X23 + 0x43F]
	0x01CFBDA4 MOV X22, X0
	0x01CFBDA8 CBNZ W8, 0x1CFBDC0
	0x01CFBDAC ADRP X0, 0x2252000
	0x01CFBDB0 LDR X0, [X0 + 0x480]
	0x01CFBDB4 BL 0x1B6E7F0
	0x01CFBDB8 MOVZ W8, 0x1
	0x01CFBDBC STRB W8, [X23 + 0x43F]
	0x01CFBDC0 CBZ X22, 0x1CFBEE0
	0x01CFBDC4 ADRP X8, 0x2252000
	0x01CFBDC8 LDR X8, [X8 + 0x480]
	0x01CFBDCC MOV X0, X22
	0x01CFBDD0 MOV X1, X31
	0x01CFBDD4 LDR X8, [X8]
	0x01CFBDD8 LDR X8, [X8 + 0xB8]
	0x01CFBDDC LDP S1, S2, [X8 + 0x4]
	0x01CFBDE0 LDR V0, [X8]
	0x01CFBDE4 BL 0x3AA6D0C
	0x01CFBDE8 MOV X0, X21
	0x01CFBDEC MOV X1, X31
	0x01CFBDF0 BL 0x3A9D8EC
	0x01CFBDF4 ADRP X23, 0x2528000
	0x01CFBDF8 LDRB W8, [X23 + 0x454]
	0x01CFBDFC MOV X22, X0
	0x01CFBE00 CBNZ W8, 0x1CFBE18
	0x01CFBE04 ADRP X0, 0x2253000
	0x01CFBE08 LDR X0, [X0 + 0x1F8]
	0x01CFBE0C BL 0x1B6E7F0
	0x01CFBE10 MOVZ W8, 0x1
	0x01CFBE14 STRB W8, [X23 + 0x454]
	0x01CFBE18 CBZ X22, 0x1CFBEE0
	0x01CFBE1C ADRP X8, 0x2253000
	0x01CFBE20 LDR X8, [X8 + 0x1F8]
	0x01CFBE24 MOV X0, X22
	0x01CFBE28 MOV X1, X31
	0x01CFBE2C LDR X8, [X8]
	0x01CFBE30 LDR X8, [X8 + 0xB8]
	0x01CFBE34 LDP S2, S3, [X8 + 0x8]
	0x01CFBE38 LDP S0, S1, [X8]
	0x01CFBE3C BL 0x3AA7984
	0x01CFBE40 MOVZ W1, 0x14
	0x01CFBE44 MOV X0, X21
	0x01CFBE48 MOV X2, X31
	0x01CFBE4C BL 0x3A9D964
	0x01CFBE50 ADRP X8, 0x2255000
	0x01CFBE54 LDR X8, [X8 + 0xAB0]
	0x01CFBE58 MOV X0, X21
	0x01CFBE5C LDR X1, [X8]
	0x01CFBE60 BL 0x20CEE08
	0x01CFBE64 CBZ X0, 0x1CFBEE0
	0x01CFBE68 LDP S1, S2, [X20 + 0x24]
	0x01CFBE6C LDR V0, [X20 + 0x20]
	0x01CFBE70 MOV X1, X31
	0x01CFBE74 MOV X22, X0
	0x01CFBE78 BL 0x3AF7A20
	0x01CFBE7C LDP S0, S1, [X20 + 0x2C]
	0x01CFBE80 LDR V2, [X20 + 0x34]
	0x01CFBE84 MOV X0, X22
	0x01CFBE88 MOV X1, X31
	0x01CFBE8C FADD S0, S0, S0
	0x01CFBE90 FADD S1, S1, S1
	0x01CFBE94 FADD S2, S2, S2
	0x01CFBE98 BL 0x3AF7B58
	0x01CFBE9C MOVZ W1, 0x1
	0x01CFBEA0 MOV X0, X22
	0x01CFBEA4 MOV X2, X31
	0x01CFBEA8 BL 0x3AF73C0
	0x01CFBEAC ADRP X8, 0x2255000
	0x01CFBEB0 LDR X8, [X8 + 0xAB8]
	0x01CFBEB4 MOV X0, X21
	0x01CFBEB8 LDR X1, [X8]
	0x01CFBEBC BL 0x20CEE08
	0x01CFBEC0 CBZ X0, 0x1CFBEE0
	0x01CFBEC4 LDR X8, [X19 + 0x20]
	0x01CFBEC8 STR X8, [X0 + 0x20]
	0x01CFBECC LDP X20, X19, [X31 + 0x30]
	0x01CFBED0 LDP X22, X21, [X31 + 0x20]
	0x01CFBED4 LDP X24, X23, [X31 + 0x10]
	0x01CFBED8 LDR X30, [X31], #0x40
	0x01CFBEDC RET
	0x01CFBEE0 BL 0x1B6EA1C
	0x01CFBEE4 BL 0x1B6EA24
	0x01CFBEE8 B 0x1CFBEEC
	0x01CFBEEC STR X30, [X31 - 0x30]!
	0x01CFBEF0 STP X22, X21, [X31 + 0x10]
	0x01CFBEF4 STP X20, X19, [X31 + 0x20]
	0x01CFBEF8 ADRP X21, 0x2528000
	0x01CFBEFC ADRP X22, 0x2255000
	0x01CFBF00 ADRP X20, 0x2255000
	0x01CFBF04 LDRB W8, [X21 + 0x71A]
	0x01CFBF08 LDR X22, [X22 + 0x7F8]
	0x01CFBF0C LDR X20, [X20 + 0x7C8]
	0x01CFBF10 MOV X19, X0
	0x01CFBF14 TBNZ X8, 0x0, 0x1CFBF38
	0x01CFBF18 ADRP X0, 0x2255000
	0x01CFBF1C LDR X0, [X0 + 0x7C8]
	0x01CFBF20 BL 0x1B6E7F0
	0x01CFBF24 ADRP X0, 0x2255000
	0x01CFBF28 LDR X0, [X0 + 0x7F8]
	0x01CFBF2C BL 0x1B6E7F0
	0x01CFBF30 MOVZ W8, 0x1
	0x01CFBF34 STRB W8, [X21 + 0x71A]
	0x01CFBF38 LDR X0, [X22]
	0x01CFBF3C BL 0x1B6EA0C
	0x01CFBF40 LDR X1, [X20]
	0x01CFBF44 MOV X20, X0
	0x01CFBF48 BL 0x2E45D4C
	0x01CFBF4C STR X20, [X19 + 0x38]
	0x01CFBF50 MOV X0, X19
	0x01CFBF54 LDP X20, X19, [X31 + 0x20]
	0x01CFBF58 LDP X22, X21, [X31 + 0x10]
	0x01CFBF5C MOV X1, X31
	0x01CFBF60 LDR X30, [X31], #0x30
	0x01CFBF64 B 0x3A9EEE4
	0x01CFBF68 LDRB W0, [X0 + 0x50]
	0x01CFBF6C RET
	0x01CFBF70 AND W8, W1, 0x1
	0x01CFBF74 STRB W8, [X0 + 0x50]
	0x01CFBF78 RET
	0x01CFBF7C SUB X31, X31, 0x80
	0x01CFBF80 STP X30, X25, [X31 + 0x40]
	0x01CFBF84 STP X24, X23, [X31 + 0x50]
	0x01CFBF88 STP X22, X21, [X31 + 0x60]
	0x01CFBF8C STP X20, X19, [X31 + 0x70]
	0x01CFBF90 ADRP X21, 0x2528000
	0x01CFBF94 LDRB W8, [X21 + 0x716]
	0x01CFBF98 MOV W20, W1
	0x01CFBF9C MOV X19, X0
	0x01CFBFA0 TBNZ X8, 0x0, 0x1CFBFF4
	0x01CFBFA4 ADRP X0, 0x2255000
	0x01CFBFA8 LDR X0, [X0 + 0xAF8]
	0x01CFBFAC BL 0x1B6E7F0
	0x01CFBFB0 ADRP X0, 0x2255000
	0x01CFBFB4 LDR X0, [X0 + 0xB00]
	0x01CFBFB8 BL 0x1B6E7F0
	0x01CFBFBC ADRP X0, 0x2255000
	0x01CFBFC0 LDR X0, [X0 + 0xB08]
	0x01CFBFC4 BL 0x1B6E7F0
	0x01CFBFC8 ADRP X0, 0x2255000
	0x01CFBFCC LDR X0, [X0 + 0xB10]
	0x01CFBFD0 BL 0x1B6E7F0
	0x01CFBFD4 ADRP X0, 0x2255000
	0x01CFBFD8 LDR X0, [X0 + 0x9C8]
	0x01CFBFDC BL 0x1B6E7F0
	0x01CFBFE0 ADRP X0, 0x2255000
	0x01CFBFE4 LDR X0, [X0 + 0x9D0]
	0x01CFBFE8 BL 0x1B6E7F0
	0x01CFBFEC MOVZ W8, 0x1
	0x01CFBFF0 STRB W8, [X21 + 0x716]
	0x01CFBFF4 STP X31, X31, [X31 + 0x20]
	0x01CFBFF8 STR X31, [X31 + 0x30]
	0x01CFBFFC LDR X0, [X19 + 0x28]
	0x01CFC000 AND W8, W20, 0x1
	0x01CFC004 STRB W8, [X19 + 0x50]
	0x01CFC008 CBZ X0, 0x1CFC144
	0x01CFC00C ADRP X25, 0x2254000
	0x01CFC010 LDR X25, [X25 + 0xB10]
	0x01CFC014 ADRP X24, 0x2254000
	0x01CFC018 ADRP X23, 0x2254000
	0x01CFC01C ADD X8, X31, 0x8
	0x01CFC020 LDR X1, [X25]
	0x01CFC024 LDR X24, [X24 + 0xB00]
	0x01CFC028 LDR X23, [X23 + 0xAF8]
	0x01CFC02C BL 0x2E470E0
	0x01CFC030 LDUR V0, [X31 + 0x8]
	0x01CFC034 LDR X8, [X31 + 0x18]
	0x01CFC038 STR V0, [X31 + 0x2]
	0x01CFC03C STR X8, [X31 + 0x30]
	0x01CFC040 LDR X1, [X24]
	0x01CFC044 ADD X0, X31, 0x20
	0x01CFC048 BL 0x2A14F30
	0x01CFC04C TBZ X0, 0x0, 0x1CFC068
	0x01CFC050 LDR X0, [X31 + 0x30]
	0x01CFC054 CBZ X0, 0x1CFC13C
	0x01CFC058 MOV W1, W31
	0x01CFC05C MOV X2, X31
	0x01CFC060 BL 0x3A9D9A8
	0x01CFC064 B 0x1CFC040
	0x01CFC068 LDR X1, [X23]
	0x01CFC06C ADD X0, X31, 0x20
	0x01CFC070 BL 0x2A14F2C
	0x01CFC074 LDR X0, [X19 + 0x30]
	0x01CFC078 CBZ X0, 0x1CFC144
	0x01CFC07C LDR X1, [X25]
	0x01CFC080 ADD X8, X31, 0x8
	0x01CFC084 BL 0x2E470E0
	0x01CFC088 LDUR V0, [X31 + 0x8]
	0x01CFC08C LDR X8, [X31 + 0x18]
	0x01CFC090 STR V0, [X31 + 0x2]
	0x01CFC094 STR X8, [X31 + 0x30]
	0x01CFC098 LDR X1, [X24]
	0x01CFC09C ADD X0, X31, 0x20
	0x01CFC0A0 BL 0x2A14F30
	0x01CFC0A4 TBZ X0, 0x0, 0x1CFC0C0
	0x01CFC0A8 LDR X0, [X31 + 0x30]
	0x01CFC0AC CBZ X0, 0x1CFC140
	0x01CFC0B0 MOV W1, W31
	0x01CFC0B4 MOV X2, X31
	0x01CFC0B8 BL 0x3A9D9A8
	0x01CFC0BC B 0x1CFC098
	0x01CFC0C0 LDR X1, [X23]
	0x01CFC0C4 ADD X0, X31, 0x20
	0x01CFC0C8 BL 0x2A14F2C
	0x01CFC0CC TBZ X20, 0x0, 0x1CFC0DC
	0x01CFC0D0 LDR X19, [X19 + 0x28]
	0x01CFC0D4 CBNZ X19, 0x1CFC0E4
	0x01CFC0D8 B 0x1CFC144
	0x01CFC0DC LDR X19, [X19 + 0x30]
	0x01CFC0E0 CBZ X19, 0x1CFC144
	0x01CFC0E4 LDR W1, [X19 + 0x18]
	0x01CFC0E8 CMP W1, 0x1
	0x01CFC0EC B.LT 0x1CFC124
	0x01CFC0F0 MOV W0, W31
	0x01CFC0F4 MOV X2, X31
	0x01CFC0F8 BL 0x3A98D10
	0x01CFC0FC ADRP X8, 0x2254000
	0x01CFC100 LDR X8, [X8 + 0x9D0]
	0x01CFC104 MOV W1, W0
	0x01CFC108 MOV X0, X19
	0x01CFC10C LDR X2, [X8]
	0x01CFC110 BL 0x2E46254
	0x01CFC114 CBZ X0, 0x1CFC144
	0x01CFC118 MOVZ W1, 0x1
	0x01CFC11C MOV X2, X31
	0x01CFC120 BL 0x3A9D9A8
	0x01CFC124 LDP X20, X19, [X31 + 0x70]
	0x01CFC128 LDP X22, X21, [X31 + 0x60]
	0x01CFC12C LDP X24, X23, [X31 + 0x50]
	0x01CFC130 LDP X30, X25, [X31 + 0x40]
	0x01CFC134 ADD X31, X31, 0x80
	0x01CFC138 RET
	0x01CFC13C BL 0x1B6EA1C
	0x01CFC140 BL 0x1B6EA1C
	0x01CFC144 BL 0x1B6EA1C
	0x01CFC148 B 0x1CFC158
	0x01CFC14C B 0x1CFC158
	0x01CFC150 B 0x1CFC1AC
	0x01CFC154 B 0x1CFC1AC
	0x01CFC158 MOV X21, X0
	0x01CFC15C CMP W1, 0x1
	0x01CFC160 B.NE 0x1CFC188
	0x01CFC164 MOV X0, X21
	0x01CFC168 BL 0x3D19840
	0x01CFC16C LDR X22, [X0]
	0x01CFC170 BL 0x3D19850
	0x01CFC174 LDR X1, [X23]
	0x01CFC178 ADD X0, X31, 0x20
	0x01CFC17C BL 0x2A14F2C
	0x01CFC180 CBZ X22, 0x1CFC0CC
	0x01CFC184 B 0x1CFC1D8
	0x01CFC188 MOV X22, X31
	0x01CFC18C B 0x1CFC194
	0x01CFC190 MOV X21, X0
	0x01CFC194 LDR X1, [X23]
	0x01CFC198 ADD X0, X31, 0x20
	0x01CFC19C BL 0x2A14F2C
	0x01CFC1A0 CBZ X22, 0x1CFC1FC
	0x01CFC1A4 MOV X0, X22
	0x01CFC1A8 BL 0x1B6EA14
	0x01CFC1AC MOV X21, X0
	0x01CFC1B0 CMP W1, 0x1
	0x01CFC1B4 B.NE 0x1CFC1E0
	0x01CFC1B8 MOV X0, X21
	0x01CFC1BC BL 0x3D19840
	0x01CFC1C0 LDR X22, [X0]
	0x01CFC1C4 BL 0x3D19850
	0x01CFC1C8 LDR X1, [X23]
	0x01CFC1CC ADD X0, X31, 0x20
	0x01CFC1D0 BL 0x2A14F2C
	0x01CFC1D4 CBZ X22, 0x1CFC074
	0x01CFC1D8 MOV X0, X22
	0x01CFC1DC BL 0x1B6EA14
	0x01CFC1E0 MOV X22, X31
	0x01CFC1E4 B 0x1CFC1EC
	0x01CFC1E8 MOV X21, X0
	0x01CFC1EC LDR X1, [X23]
	0x01CFC1F0 ADD X0, X31, 0x20
	0x01CFC1F4 BL 0x2A14F2C
	0x01CFC1F8 CBNZ X22, 0x1CFC204
	0x01CFC1FC MOV X0, X21
	0x01CFC200 BL 0x1C8418C
	0x01CFC204 MOV X0, X22
	0x01CFC208 BL 0x1B6EA14
	0x01CFC20C BL 0x18F46A8
	0x01CFC210 ADRP X8, 0xFFFFFFFFFEDAD000
	0x01CFC214 LDR V0, [X8 + 0xD30]
	0x01CFC218 B 0x1CFC21C
	0x01CFC21C SUB X31, X31, 0xD0
	0x01CFC220 STR D14, [X31 + 0x80]
	0x01CFC224 STP D13, D12, [X31 + 0x90]
	0x01CFC228 STP D11, D10, [X31 + 0xA0]
	0x01CFC22C STP D9, D8, [X31 + 0xB0]
	0x01CFC230 STP X30, X19, [X31 + 0xC0]
	0x01CFC234 ADRP X8, 0xFFFFFFFFFEDAD000
	0x01CFC238 ADRP X9, 0xFFFFFFFFFEDAD000
	0x01CFC23C MOV V10.16B, V0.16B
	0x01CFC240 LDR V0, [X8 + 0xD30]
	0x01CFC244 LDR V2, [X9 + 0xA58]
	0x01CFC248 MOV X19, X0
	0x01CFC24C FMOV S1, 1
	0x01CFC250 MOV V3.16B, V10.16B
	0x01CFC254 MOV X0, X31
	0x01CFC258 FMOV S9, 1
	0x01CFC25C BL 0x3A75B14
	0x01CFC260 LDR W8, [X19 + 0x20]
	0x01CFC264 FMOV S8, 2
	0x01CFC268 SUB W8, W8, 0x1
	0x01CFC26C CMP W8, 0x5
	0x01CFC270 B.HI 0x1CFC28C
	0x01CFC274 ADRP X9, 0xFFFFFFFFFEDF0000
	0x01CFC278 ADRP X10, 0xFFFFFFFFFEDF0000
	0x01CFC27C ADD X9, X9, 0x970
	0x01CFC280 ADD X10, X10, 0x988
	0x01CFC284 LDR V8, [X9, W8, SXTW]
	0x01CFC288 LDR V9, [X10, W8, SXTW]
	0x01CFC28C MOV X0, X19
	0x01CFC290 MOV X1, X31
	0x01CFC294 BL 0x3A9B084
	0x01CFC298 CBZ X0, 0x1CFC3D4
	0x01CFC29C ADD X8, X31, 0x40
	0x01CFC2A0 MOV X1, X31
	0x01CFC2A4 BL 0x3AA7294
	0x01CFC2A8 LDP V0, V1, [X31 + 0x40]
	0x01CFC2AC LDP V2, V3, [X31 + 0x60]
	0x01CFC2B0 ADD X0, X31, 0x0
	0x01CFC2B4 MOV X1, X31
	0x01CFC2B8 STP V0, V1, [X31]
	0x01CFC2BC STP V2, V3, [X31 + 0x20]
	0x01CFC2C0 BL 0x3A75C34
	0x01CFC2C4 FMOV S14, 0.5
	0x01CFC2C8 FMUL S1, S8, S14
	0x01CFC2CC FMOV S0, W31
	0x01CFC2D0 FMOV S2, W31
	0x01CFC2D4 FMOV S5, W31
	0x01CFC2D8 MOV V3.16B, V9.16B
	0x01CFC2DC MOV V4.16B, V8.16B
	0x01CFC2E0 MOV X0, X31
	0x01CFC2E4 BL 0x3A757BC
	0x01CFC2E8 FCMP S9, S8
	0x01CFC2EC FCSEL S0, S9, S8, MI
	0x01CFC2F0 FMOV S1, 0.25
	0x01CFC2F4 MOV X0, X31
	0x01CFC2F8 FMUL S11, S0, S1
	0x01CFC2FC BL 0x3A75A90
	0x01CFC300 MOV X0, X31
	0x01CFC304 MOV V12.16B, V0.16B
	0x01CFC308 BL 0x3A75A90
	0x01CFC30C MOV X0, X31
	0x01CFC310 MOV V13.16B, V1.16B
	0x01CFC314 BL 0x3A75A90
	0x01CFC318 FMUL S3, S10, S14
	0x01CFC31C MOV V0.16B, V12.16B
	0x01CFC320 MOV V1.16B, V13.16B
	0x01CFC324 MOV X0, X31
	0x01CFC328 BL 0x3A75B14
	0x01CFC32C FMUL S10, S9, S14
	0x01CFC330 FMOV S1, W31
	0x01CFC334 FMOV S2, W31
	0x01CFC338 FMOV S4, W31
	0x01CFC33C MOV V0.16B, V10.16B
	0x01CFC340 MOV V3.16B, V10.16B
	0x01CFC344 MOV V5.16B, V11.16B
	0x01CFC348 MOV X0, X31
	0x01CFC34C BL 0x3A755E8
	0x01CFC350 FMOV S0, -0.5
	0x01CFC354 FMUL S9, S9, S0
	0x01CFC358 FMOV S1, W31
	0x01CFC35C FMOV S2, W31
	0x01CFC360 FMOV S4, W31
	0x01CFC364 MOV V0.16B, V9.16B
	0x01CFC368 MOV V3.16B, V9.16B
	0x01CFC36C MOV V5.16B, V11.16B
	0x01CFC370 MOV X0, X31
	0x01CFC374 BL 0x3A755E8
	0x01CFC378 FMOV S2, W31
	0x01CFC37C MOV V0.16B, V9.16B
	0x01CFC380 MOV V1.16B, V8.16B
	0x01CFC384 MOV V3.16B, V9.16B
	0x01CFC388 MOV V4.16B, V8.16B
	0x01CFC38C MOV V5.16B, V11.16B
	0x01CFC390 MOV X0, X31
	0x01CFC394 BL 0x3A755E8
	0x01CFC398 FMOV S2, W31
	0x01CFC39C MOV V0.16B, V10.16B
	0x01CFC3A0 MOV V1.16B, V8.16B
	0x01CFC3A4 MOV V3.16B, V10.16B
	0x01CFC3A8 MOV V4.16B, V8.16B
	0x01CFC3AC MOV V5.16B, V11.16B
	0x01CFC3B0 MOV X0, X31
	0x01CFC3B4 BL 0x3A755E8
	0x01CFC3B8 LDP X30, X19, [X31 + 0xC0]
	0x01CFC3BC LDP D9, D8, [X31 + 0xB0]
	0x01CFC3C0 LDP D11, D10, [X31 + 0xA0]
	0x01CFC3C4 LDP D13, D12, [X31 + 0x90]
	0x01CFC3C8 LDR V14, [X31 + 0x80]
	0x01CFC3CC ADD X31, X31, 0xD0
	0x01CFC3D0 RET
	0x01CFC3D4 BL 0x1B6EA1C
	0x01CFC3D8 FMOV S0, 1
	0x01CFC3DC B 0x1CFC21C
	0x01CFC3E0 SUB W8, W0, 0x1
	0x01CFC3E4 CMP W8, 0x5
	0x01CFC3E8 B.HI 0x1CFC408
	0x01CFC3EC ADRP X9, 0xFFFFFFFFFEDF0000
	0x01CFC3F0 ADRP X10, 0xFFFFFFFFFEDF0000
	0x01CFC3F4 ADD X9, X9, 0x970

ISIL:
	001 Move [X31-128], D15
	002 Move [X31-120], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+80], X30
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Subtract X31, X31, 416
	017 Move X20, 0x2529000
	018 Move X23, 0x2253000
	019 Move W8, [X20+1812]
	020 Move X23, [X23+1144]
	021 Move V8, V0
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {32}
	027 Move X0, 0x2253000
	028 Move X0, [X0+1144]
	029 Call 0x1B6F7F0
	030 Move W8, 1
	031 Move [X20+1812], W8
	032 Move X22, X19
	033 Add X22, X22, 32
	034 Move X20, [X22]
	035 Move X0, [X23]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1B6F8F8
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Equality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {790}
	048 Move S0, 0.25
	049 Multiply S3, S8, S0
	050 Move S0, 1
	051 Move S1, 1
	052 Move S2, 1
	053 Move X0, X31
	054 Call Gizmos.set_color, X0
	055 Move X0, X19
	056 Move X1, X31
	057 Call Component.get_transform, X0
	058 Compare X0, 0
	059 JumpIfEqual {807}
	060 Add X8, X31, 352
	061 Move X1, X31
	062 Call Transform.get_localToWorldMatrix, X0
	063 Move V0, [X31+352]
	064 Move V1, [X31+368]
	065 Move V2, [X31+384]
	066 Move V3, [X31+400]
	067 Add X0, X31, 288
	068 Move X1, X31
	069 Move [X31+288], V0
	070 Move [X31+296], V1
	071 Move [X31+320], V2
	072 Move [X31+328], V3
	073 Call Gizmos.set_matrix, X0
	074 Move X8, [X22]
	075 Compare X8, 0
	076 JumpIfEqual {807}
	077 Move S2, [X8+40]
	078 Move S3, [X8+44]
	079 Move S4, [X8+48]
	080 Move S5, [X8+52]
	081 Move S0, [X8+32]
	082 Move S1, [X8+36]
	083 Move X0, X31
	084 Add S3, S3, S3
	085 Add S4, S4, S4
	086 Add S5, S5, S5
	087 Call Gizmos.DrawWireCube, X0, X1
	088 Move X8, [X22]
	089 Compare X8, 0
	090 JumpIfEqual {807}
	091 Move X0, [X23]
	092 Move X20, [X8+72]
	093 Move W9, [X0+224]
	094 Compare W9, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1B6F8F8
	097 Move X0, X20
	098 Move X1, X31
	099 Move X2, X31
	100 Call Object.op_Inequality, X0, X1
	101 Move [X31+492], S8
	102 Move TEMP, X0
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfNotEqual {264}
	106 Move W21, [X19+40]
	107 Move S1, 1
	108 Move S2, W31
	109 Move V3, V8
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction FCSEL not yet implemented."
	112 NotImplemented "Instruction FCSEL not yet implemented."
	113 Move V2, V1
	114 Move X0, X31
	115 Call Gizmos.set_color, X0
	116 Move X0, [X19+32]
	117 Compare X0, 0
	118 JumpIfEqual {807}
	119 Move X1, X31
	120 Call Component.get_transform, X0
	121 Move X8, [X22]
	122 Compare X8, 0
	123 JumpIfEqual {807}
	124 Move X20, X0
	125 Move X0, [X8+72]
	126 Compare X0, 0
	127 JumpIfEqual {807}
	128 Move X1, X31
	129 Call Component.get_transform, X0
	130 Compare X0, 0
	131 JumpIfEqual {807}
	132 Move X1, X31
	133 Call Transform.get_position, X0
	134 Compare X20, 0
	135 JumpIfEqual {807}
	136 Move X0, X20
	137 Move X1, X31
	138 Call Transform.InverseTransformPoint, X0, X1
	139 Move X0, [X22]
	140 Compare X0, 0
	141 JumpIfEqual {807}
	142 Move X1, X31
	143 Move V8, V0
	144 Move V9, V1
	145 Move V10, V2
	146 Call Component.get_transform, X0
	147 Compare X0, 0
	148 JumpIfEqual {807}
	149 Move X1, X31
	150 Call Transform.get_rotation, X0
	151 Move X0, X31
	152 Call Quaternion.Inverse, X0
	153 Move X8, [X22]
	154 Compare X8, 0
	155 JumpIfEqual {807}
	156 Move X0, [X8+72]
	157 Compare X0, 0
	158 JumpIfEqual {807}
	159 Move X1, X31
	160 Move V14, V0
	161 Move V13, V1
	162 Move V12, V2
	163 Move V15, V3
	164 Move [X31+24], S10
	165 Move [X31+32], S9
	166 Move [X31+488], S8
	167 Call Component.get_transform, X0
	168 Compare X0, 0
	169 JumpIfEqual {807}
	170 Move X1, X31
	171 Call Transform.get_rotation, X0
	172 Move X0, X19
	173 Move X1, X31
	174 Move V10, V0
	175 Move V9, V1
	176 Move V8, V2
	177 Move V11, V3
	178 Call Component.get_transform, X0
	179 Compare X0, 0
	180 JumpIfEqual {807}
	181 Multiply S0, S15, S10
	182 Multiply S1, S14, S11
	183 Multiply S4, S15, S9
	184 Multiply S5, S13, S11
	185 Multiply S17, S14, S10
	186 Multiply S20, S15, S8
	187 Multiply S21, S15, S11
	188 Multiply S22, S12, S11
	189 Multiply S2, S13, S8
	190 Multiply S6, S12, S10
	191 Multiply S16, S14, S9
	192 Multiply S19, S13, S9
	193 Add S0, S0, S1
	194 Add S1, S4, S5
	195 Add S4, S20, S22
	196 Subtract S5, S21, S17
	197 Multiply S3, S12, S9
	198 Multiply S7, S14, S8
	199 Multiply S18, S13, S10
	200 Multiply S23, S12, S8
	201 Add S0, S2, S0
	202 Add S1, S6, S1
	203 Add S2, S16, S4
	204 Subtract S4, S5, S19
	205 Move X1, X31
	206 Subtract S15, S0, S3
	207 Subtract S14, S1, S7
	208 Subtract S13, S2, S18
	209 Subtract S12, S4, S23
	210 Call Transform.get_position, X0
	211 Move V3, [X31+488]
	212 Move X20, 0x2529000
	213 Move W8, [X20+1110]
	214 Add S10, S3, S0
	215 Move V0, [X31+28]
	216 Add S9, S0, S1
	217 Move V0, [X31+24]
	218 Add S8, S0, S2
	219 Compare W8, 0
	220 JumpIfNotEqual {226}
	221 Move X0, 0x2253000
	222 Move X0, [X0+1152]
	223 Call 0x1B6F7F0
	224 Move W8, 1
	225 Move [X20+1110], W8
	226 Move X8, 0x2253000
	227 Move X8, [X8+1152]
	228 Move V1, V9
	229 Move V2, V8
	230 Move V3, V15
	231 Move X8, [X8]
	232 Move V4, V14
	233 Move V5, V13
	234 Move V6, V12
	235 Move X8, [X8+184]
	236 Move X0, X31
	237 Move V0, [X8+20]
	238 NotImplemented "Instruction LDUR not yet implemented."
	239 Add X8, X31, 352
	240 Move [X31+8], S0
	241 Move V0, V10
	242 Move [X31], X9
	243 Call Matrix4x4.TRS, X0, X1, X2
	244 Move V0, [X31+352]
	245 Move V1, [X31+368]
	246 Move V2, [X31+384]
	247 Move V3, [X31+400]
	248 Add X0, X31, 224
	249 Move X1, X31
	250 Move [X31+224], V0
	251 Move [X31+232], V1
	252 Move [X31+256], V2
	253 Move [X31+264], V3
	254 Call Gizmos.set_matrix, X0
	255 Move X8, [X22]
	256 Compare X8, 0
	257 JumpIfEqual {807}
	258 Move V8, [X31+492]
	259 Move X0, [X8+72]
	260 NotImplemented "Instruction CMP not yet implemented."
	261 NotImplemented "Instruction CSET not yet implemented."
	262 Move V0, V8
	263 Call SocketUtils.DrawSocketGizmo, X0, V0, X1
	264 Move X8, [X22]
	265 Compare X8, 0
	266 JumpIfEqual {807}
	267 Move X0, [X23]
	268 Move X20, [X8+80]
	269 Move W9, [X0+224]
	270 Compare W9, 0
	271 JumpIfNotEqual {273}
	272 Call 0x1B6F8F8
	273 Move X0, X20
	274 Move X1, X31
	275 Move X2, X31
	276 Call Object.op_Inequality, X0, X1
	277 Move TEMP, X0
	278 And TEMP, TEMP, 1
	279 Compare TEMP, 1
	280 JumpIfNotEqual {441}
	281 Move W8, [X19+40]
	282 NotImplemented "Instruction CMP not yet implemented."
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Move S1, 1
	285 Move S0, W31
	286 Move W20, 1
	287 Move W20, W31
	288 Move S1, W31
	289 Move S0, 1
	290 Move V2, V1
	291 Move V3, V8
	292 Move X0, X31
	293 Call Gizmos.set_color, X0
	294 Move X0, [X22]
	295 Compare X0, 0
	296 JumpIfEqual {807}
	297 Move X1, X31
	298 Call Component.get_transform, X0
	299 Move X8, [X22]
	300 Compare X8, 0
	301 JumpIfEqual {807}
	302 Move X21, X0
	303 Move X0, [X8+80]
	304 Compare X0, 0
	305 JumpIfEqual {807}
	306 Move X1, X31
	307 Call Component.get_transform, X0
	308 Compare X0, 0
	309 JumpIfEqual {807}
	310 Move X1, X31
	311 Call Transform.get_position, X0
	312 Compare X21, 0
	313 JumpIfEqual {807}
	314 Move X0, X21
	315 Move X1, X31
	316 Call Transform.InverseTransformPoint, X0, X1
	317 Move X0, [X22]
	318 Compare X0, 0
	319 JumpIfEqual {807}
	320 Move X1, X31
	321 Move V8, V0
	322 Move V9, V1
	323 Move V10, V2
	324 Call Component.get_transform, X0
	325 Compare X0, 0
	326 JumpIfEqual {807}
	327 Move X1, X31
	328 Call Transform.get_rotation, X0
	329 Move X0, X31
	330 Call Quaternion.Inverse, X0
	331 Move X8, [X22]
	332 Compare X8, 0
	333 JumpIfEqual {807}
	334 Move X0, [X8+80]
	335 Compare X0, 0
	336 JumpIfEqual {807}
	337 Move X1, X31
	338 Move V14, V0
	339 Move V13, V1
	340 Move V12, V2
	341 Move V15, V3
	342 Move [X31+24], S10
	343 Move [X31+32], S9
	344 Move [X31+488], S8
	345 Call Component.get_transform, X0
	346 Compare X0, 0
	347 JumpIfEqual {807}
	348 Move X1, X31
	349 Call Transform.get_rotation, X0
	350 Move X0, X19
	351 Move X1, X31
	352 Move V10, V0
	353 Move V9, V1
	354 Move V8, V2
	355 Move V11, V3
	356 Call Component.get_transform, X0
	357 Compare X0, 0
	358 JumpIfEqual {807}
	359 Multiply S0, S15, S10
	360 Multiply S1, S14, S11
	361 Multiply S4, S15, S9
	362 Multiply S5, S13, S11
	363 Multiply S17, S14, S10
	364 Multiply S20, S15, S8
	365 Multiply S21, S15, S11
	366 Multiply S22, S12, S11
	367 Multiply S2, S13, S8
	368 Multiply S6, S12, S10
	369 Multiply S16, S14, S9
	370 Multiply S19, S13, S9
	371 Add S0, S0, S1
	372 Add S1, S4, S5
	373 Add S4, S20, S22
	374 Subtract S5, S21, S17
	375 Multiply S3, S12, S9
	376 Multiply S7, S14, S8
	377 Multiply S18, S13, S10
	378 Multiply S23, S12, S8
	379 Add S0, S2, S0
	380 Add S1, S6, S1
	381 Add S2, S16, S4
	382 Subtract S4, S5, S19
	383 Move X1, X31
	384 Subtract S15, S0, S3
	385 Subtract S14, S1, S7
	386 Subtract S13, S2, S18
	387 Subtract S12, S4, S23
	388 Call Transform.get_position, X0
	389 Move V3, [X31+488]
	390 Move X21, 0x2529000
	391 Move W8, [X21+1110]
	392 Add S10, S3, S0
	393 Move V0, [X31+28]
	394 Add S9, S0, S1
	395 Move V0, [X31+24]
	396 Add S8, S0, S2
	397 Compare W8, 0
	398 JumpIfNotEqual {404}
	399 Move X0, 0x2253000
	400 Move X0, [X0+1152]
	401 Call 0x1B6F7F0
	402 Move W8, 1
	403 Move [X21+1110], W8
	404 Move X8, 0x2253000
	405 Move X8, [X8+1152]
	406 Move V1, V9
	407 Move V2, V8
	408 Move V3, V15
	409 Move X8, [X8]
	410 Move V4, V14
	411 Move V5, V13
	412 Move V6, V12
	413 Move X8, [X8+184]
	414 Move X0, X31
	415 Move V0, [X8+20]
	416 NotImplemented "Instruction LDUR not yet implemented."
	417 Add X8, X31, 352
	418 Move [X31+8], S0
	419 Move V0, V10
	420 Move [X31], X9
	421 Call Matrix4x4.TRS, X0, X1, X2
	422 Move V0, [X31+352]
	423 Move V1, [X31+368]
	424 Move V2, [X31+384]
	425 Move V3, [X31+400]
	426 Add X0, X31, 160
	427 Move X1, X31
	428 Move [X31+160], V0
	429 Move [X31+168], V1
	430 Move [X31+192], V2
	431 Move [X31+200], V3
	432 Call Gizmos.set_matrix, X0
	433 Move X8, [X22]
	434 Compare X8, 0
	435 JumpIfEqual {807}
	436 Move V8, [X31+492]
	437 Move X0, [X8+80]
	438 Move W1, W20
	439 Move V0, V8
	440 Call SocketUtils.DrawSocketGizmo, X0, V0, X1
	441 Move X8, [X22]
	442 Compare X8, 0
	443 JumpIfEqual {807}
	444 Move X0, [X23]
	445 Move X20, [X8+88]
	446 Move W9, [X0+224]
	447 Compare W9, 0
	448 JumpIfNotEqual {450}
	449 Call 0x1B6F8F8
	450 Move X0, X20
	451 Move X1, X31
	452 Move X2, X31
	453 Call Object.op_Inequality, X0, X1
	454 Move TEMP, X0
	455 And TEMP, TEMP, 1
	456 Compare TEMP, 1
	457 JumpIfNotEqual {616}
	458 Move W21, [X19+40]
	459 Move S1, 1
	460 Move S2, W31
	461 Move V3, V8
	462 NotImplemented "Instruction CMP not yet implemented."
	463 NotImplemented "Instruction FCSEL not yet implemented."
	464 NotImplemented "Instruction FCSEL not yet implemented."
	465 Move V2, V1
	466 Move X0, X31
	467 Call Gizmos.set_color, X0
	468 Move X0, [X19+32]
	469 Compare X0, 0
	470 JumpIfEqual {807}
	471 Move X1, X31
	472 Call Component.get_transform, X0
	473 Move X8, [X22]
	474 Compare X8, 0
	475 JumpIfEqual {807}
	476 Move X20, X0
	477 Move X0, [X8+88]
	478 Compare X0, 0
	479 JumpIfEqual {807}
	480 Move X1, X31
	481 Call Component.get_transform, X0
	482 Compare X0, 0
	483 JumpIfEqual {807}
	484 Move X1, X31
	485 Call Transform.get_position, X0
	486 Compare X20, 0
	487 JumpIfEqual {807}
	488 Move X0, X20
	489 Move X1, X31
	490 Call Transform.InverseTransformPoint, X0, X1
	491 Move X0, [X22]
	492 Compare X0, 0
	493 JumpIfEqual {807}
	494 Move X1, X31
	495 Move V8, V0
	496 Move V9, V1
	497 Move V10, V2
	498 Call Component.get_transform, X0
	499 Compare X0, 0
	500 JumpIfEqual {807}
	501 Move X1, X31
	502 Call Transform.get_rotation, X0
	503 Move X0, X31
	504 Call Quaternion.Inverse, X0
	505 Move X8, [X22]
	506 Compare X8, 0
	507 JumpIfEqual {807}
	508 Move X0, [X8+88]
	509 Compare X0, 0
	510 JumpIfEqual {807}
	511 Move X1, X31
	512 Move V14, V0
	513 Move V13, V1
	514 Move V12, V2
	515 Move V15, V3
	516 Move [X31+24], S10
	517 Move [X31+32], S9
	518 Move [X31+488], S8
	519 Call Component.get_transform, X0
	520 Compare X0, 0
	521 JumpIfEqual {807}
	522 Move X1, X31
	523 Call Transform.get_rotation, X0
	524 Move X0, X19
	525 Move X1, X31
	526 Move V10, V0
	527 Move V9, V1
	528 Move V8, V2
	529 Move V11, V3
	530 Call Component.get_transform, X0
	531 Compare X0, 0
	532 JumpIfEqual {807}
	533 Multiply S0, S15, S10
	534 Multiply S1, S14, S11
	535 Multiply S4, S15, S9
	536 Multiply S5, S13, S11
	537 Multiply S17, S14, S10
	538 Multiply S20, S15, S8
	539 Multiply S21, S15, S11
	540 Multiply S22, S12, S11
	541 Multiply S2, S13, S8
	542 Multiply S6, S12, S10
	543 Multiply S16, S14, S9
	544 Multiply S19, S13, S9
	545 Add S0, S0, S1
	546 Add S1, S4, S5
	547 Add S4, S20, S22
	548 Subtract S5, S21, S17
	549 Multiply S3, S12, S9
	550 Multiply S7, S14, S8
	551 Multiply S18, S13, S10
	552 Multiply S23, S12, S8
	553 Add S0, S2, S0
	554 Add S1, S6, S1
	555 Add S2, S16, S4
	556 Subtract S4, S5, S19
	557 Move X1, X31
	558 Subtract S15, S0, S3
	559 Subtract S14, S1, S7
	560 Subtract S13, S2, S18
	561 Subtract S12, S4, S23
	562 Call Transform.get_position, X0
	563 Move V3, [X31+488]
	564 Move X20, 0x2528000
	565 Move W8, [X20+1110]
	566 Add S10, S3, S0
	567 Move V0, [X31+28]
	568 Add S9, S0, S1
	569 Move V0, [X31+24]
	570 Add S8, S0, S2
	571 Compare W8, 0
	572 JumpIfNotEqual {578}
	573 Move X0, 0x2252000
	574 Move X0, [X0+1152]
	575 Call 0x1B6F7F0
	576 Move W8, 1
	577 Move [X20+1110], W8
	578 Move X8, 0x2252000
	579 Move X8, [X8+1152]
	580 Move V1, V9
	581 Move V2, V8
	582 Move V3, V15
	583 Move X8, [X8]
	584 Move V4, V14
	585 Move V5, V13
	586 Move V6, V12
	587 Move X8, [X8+184]
	588 Move X0, X31
	589 Move V0, [X8+20]
	590 NotImplemented "Instruction LDUR not yet implemented."
	591 Add X8, X31, 352
	592 Move [X31+8], S0
	593 Move V0, V10
	594 Move [X31], X9
	595 Call Matrix4x4.TRS, X0, X1, X2
	596 Move V0, [X31+352]
	597 Move V1, [X31+368]
	598 Move V2, [X31+384]
	599 Move V3, [X31+400]
	600 Add X0, X31, 96
	601 Move X1, X31
	602 Move [X31+96], V0
	603 Move [X31+104], V1
	604 Move [X31+128], V2
	605 Move [X31+136], V3
	606 Call Gizmos.set_matrix, X0
	607 Move X8, [X22]
	608 Compare X8, 0
	609 JumpIfEqual {807}
	610 Move V8, [X31+492]
	611 Move X0, [X8+88]
	612 NotImplemented "Instruction CMP not yet implemented."
	613 NotImplemented "Instruction CSET not yet implemented."
	614 Move V0, V8
	615 Call SocketUtils.DrawSocketGizmo, X0, V0, X1
	616 Move X8, [X22]
	617 Compare X8, 0
	618 JumpIfEqual {807}
	619 Move X0, [X23]
	620 Move X20, [X8+96]
	621 Move W9, [X0+224]
	622 Compare W9, 0
	623 JumpIfNotEqual {625}
	624 Call 0x1B6F8F8
	625 Move X0, X20
	626 Move X1, X31
	627 Move X2, X31
	628 Call Object.op_Inequality, X0, X1
	629 Move TEMP, X0
	630 And TEMP, TEMP, 1
	631 Compare TEMP, 1
	632 JumpIfNotEqual {790}
	633 Move W21, [X19+40]
	634 Move S1, 1
	635 Move S2, W31
	636 Move V3, V8
	637 NotImplemented "Instruction CMP not yet implemented."
	638 NotImplemented "Instruction FCSEL not yet implemented."
	639 NotImplemented "Instruction FCSEL not yet implemented."
	640 Move V2, V1
	641 Move X0, X31
	642 Call Gizmos.set_color, X0
	643 Move X0, [X19+32]
	644 Compare X0, 0
	645 JumpIfEqual {807}
	646 Move X1, X31
	647 Call Component.get_transform, X0
	648 Move X8, [X22]
	649 Compare X8, 0
	650 JumpIfEqual {807}
	651 Move X20, X0
	652 Move X0, [X8+96]
	653 Compare X0, 0
	654 JumpIfEqual {807}
	655 Move X1, X31
	656 Call Component.get_transform, X0
	657 Compare X0, 0
	658 JumpIfEqual {807}
	659 Move X1, X31
	660 Call Transform.get_position, X0
	661 Compare X20, 0
	662 JumpIfEqual {807}
	663 Move X0, X20
	664 Move X1, X31
	665 Call Transform.InverseTransformPoint, X0, X1
	666 Move X0, [X22]
	667 Compare X0, 0
	668 JumpIfEqual {807}
	669 Move X1, X31
	670 Move V8, V0
	671 Move V9, V1
	672 Move V10, V2
	673 Call Component.get_transform, X0
	674 Compare X0, 0
	675 JumpIfEqual {807}
	676 Move X1, X31
	677 Call Transform.get_rotation, X0
	678 Move X0, X31
	679 Call Quaternion.Inverse, X0
	680 Move X8, [X22]
	681 Compare X8, 0
	682 JumpIfEqual {807}
	683 Move X0, [X8+96]
	684 Compare X0, 0
	685 JumpIfEqual {807}
	686 Move X1, X31
	687 Move V14, V0
	688 Move V13, V1
	689 Move V12, V2
	690 Move V15, V3
	691 Move [X31+24], S10
	692 Move [X31+32], S9
	693 Move [X31+488], S8
	694 Call Component.get_transform, X0
	695 Compare X0, 0
	696 JumpIfEqual {807}
	697 Move X1, X31
	698 Call Transform.get_rotation, X0
	699 Move X0, X19
	700 Move X1, X31
	701 Move V10, V0
	702 Move V9, V1
	703 Move V8, V2
	704 Move V11, V3
	705 Call Component.get_transform, X0
	706 Compare X0, 0
	707 JumpIfEqual {807}
	708 Multiply S0, S15, S10
	709 Multiply S1, S14, S11
	710 Multiply S4, S15, S9
	711 Multiply S5, S13, S11
	712 Multiply S17, S14, S10
	713 Multiply S20, S15, S8
	714 Multiply S21, S15, S11
	715 Multiply S22, S12, S11
	716 Multiply S2, S13, S8
	717 Multiply S6, S12, S10
	718 Multiply S16, S14, S9
	719 Multiply S19, S13, S9
	720 Add S0, S0, S1
	721 Add S1, S4, S5
	722 Add S4, S20, S22
	723 Subtract S5, S21, S17
	724 Multiply S3, S12, S9
	725 Multiply S7, S14, S8
	726 Multiply S18, S13, S10
	727 Multiply S23, S12, S8
	728 Add S0, S2, S0
	729 Add S1, S6, S1
	730 Add S2, S16, S4
	731 Subtract S4, S5, S19
	732 Move X1, X31
	733 Subtract S15, S0, S3
	734 Subtract S14, S1, S7
	735 Subtract S13, S2, S18
	736 Subtract S12, S4, S23
	737 Call Transform.get_position, X0
	738 Move V3, [X31+488]
	739 Move X19, 0x2528000
	740 Move W8, [X19+1110]
	741 Add S10, S3, S0
	742 Move V0, [X31+28]
	743 Add S9, S0, S1
	744 Move V0, [X31+24]
	745 Add S8, S0, S2
	746 Compare W8, 0
	747 JumpIfNotEqual {753}
	748 Move X0, 0x2252000
	749 Move X0, [X0+1152]
	750 Call 0x1B6F7F0
	751 Move W8, 1
	752 Move [X19+1110], W8
	753 Move X8, 0x2252000
	754 Move X8, [X8+1152]
	755 Move V1, V9
	756 Move V2, V8
	757 Move V3, V15
	758 Move X8, [X8]
	759 Move V4, V14
	760 Move V5, V13
	761 Move V6, V12
	762 Move X8, [X8+184]
	763 Move X0, X31
	764 Move V0, [X8+20]
	765 NotImplemented "Instruction LDUR not yet implemented."
	766 Add X8, X31, 352
	767 Move [X31+8], S0
	768 Move V0, V10
	769 Move [X31], X9
	770 Call Matrix4x4.TRS, X0, X1, X2
	771 Move V0, [X31+352]
	772 Move V1, [X31+368]
	773 Move V2, [X31+384]
	774 Move V3, [X31+400]
	775 Add X0, X31, 32
	776 Move X1, X31
	777 Move [X31+32], V0
	778 Move [X31+40], V1
	779 Move [X31+64], V2
	780 Move [X31+72], V3
	781 Call Gizmos.set_matrix, X0
	782 Move X8, [X22]
	783 Compare X8, 0
	784 JumpIfEqual {807}
	785 Move X0, [X8+96]
	786 Move V0, [X31+492]
	787 NotImplemented "Instruction CMP not yet implemented."
	788 NotImplemented "Instruction CSET not yet implemented."
	789 Call SocketUtils.DrawSocketGizmo, X0, V0, X1
	790 Add X31, X31, 416
	791 Move X20, [X31+112]
	792 Move X19, [X31+120]
	793 Move X22, [X31+96]
	794 Move X21, [X31+104]
	795 Move X30, [X31+80]
	796 Move X23, [X31+88]
	797 Move X29, [X31+64]
	798 Move D9, [X31+48]
	799 Move D8, [X31+56]
	800 Move D11, [X31+32]
	801 Move D10, [X31+40]
	802 Move D13, [X31+16]
	803 Move D12, [X31+24]
	804 Move D15, [X31+128]
	805 Move D14, [X31+136]
	806 Return 
	807 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CFC5F0 STP X22, X21, [X31 + 0x20]
	0x01CFC5F4 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

