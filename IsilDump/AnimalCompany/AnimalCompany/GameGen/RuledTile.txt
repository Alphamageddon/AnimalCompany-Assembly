Type: AnimalCompany.GameGen.RuledTile

Method: System.Void RenderTile(AnimalCompany.GameGen.Archetype archetype, AnimalCompany.GameGen.RuleTile ruleTile)

Disassembly:
	0x01E0E9B0 FMOV S2, W31
	0x01E0E9B4 MOV V0.16B, V10.16B
	0x01E0E9B8 MOV V1.16B, V8.16B
	0x01E0E9BC MOV V3.16B, V10.16B
	0x01E0E9C0 MOV V4.16B, V8.16B
	0x01E0E9C4 MOV V5.16B, V9.16B
	0x01E0E9C8 MOV X0, X31
	0x01E0E9CC BL 0x3C0CB04
	0x01E0E9D0 MOV V0.16B, V11.16B
	0x01E0E9D4 MOV V1.16B, V8.16B
	0x01E0E9D8 MOV V3.16B, V11.16B
	0x01E0E9DC MOV V4.16B, V8.16B
	0x01E0E9E0 MOV V5.16B, V9.16B
	0x01E0E9E4 LDP X30, X19, [X31 + 0x30]
	0x01E0E9E8 LDP D9, D8, [X31 + 0x20]
	0x01E0E9EC LDP D11, D10, [X31 + 0x10]
	0x01E0E9F0 FMOV S2, W31
	0x01E0E9F4 MOV X0, X31
	0x01E0E9F8 LDP D13, D12, [X31], #0x40
	0x01E0E9FC B 0x3C0CB04
	0x01E0EA00 BL 0x1C16F20
	0x01E0EA04 MOV X1, X31
	0x01E0EA08 B 0x3C36C30
	0x01E0EA0C SUB X31, X31, 0x70
	0x01E0EA10 STP D11, D10, [X31 + 0x10]
	0x01E0EA14 STP D9, D8, [X31 + 0x20]
	0x01E0EA18 STP X30, X25, [X31 + 0x30]
	0x01E0EA1C STP X24, X23, [X31 + 0x40]
	0x01E0EA20 STP X22, X21, [X31 + 0x50]
	0x01E0EA24 STP X20, X19, [X31 + 0x60]
	0x01E0EA28 ADRP X22, 0x25CA000
	0x01E0EA2C ADRP X21, 0x22E7000
	0x01E0EA30 LDRB W8, [X22 + 0xDD7]
	0x01E0EA34 LDR X21, [X21 + 0x9B8]
	0x01E0EA38 MOV X20, X1
	0x01E0EA3C MOV X19, X0
	0x01E0EA40 TBNZ X8, 0x0, 0x1E0EAAC
	0x01E0EA44 ADRP X0, 0x22E7000
	0x01E0EA48 LDR X0, [X0 + 0x9B8]
	0x01E0EA4C BL 0x1C16CF4
	0x01E0EA50 ADRP X0, 0x22EB000
	0x01E0EA54 LDR X0, [X0 + 0xDA8]
	0x01E0EA58 BL 0x1C16CF4
	0x01E0EA5C ADRP X0, 0x22E5000
	0x01E0EA60 LDR X0, [X0 + 0x788]
	0x01E0EA64 BL 0x1C16CF4
	0x01E0EA68 ADRP X0, 0x22EB000
	0x01E0EA6C LDR X0, [X0 + 0xDB0]
	0x01E0EA70 BL 0x1C16CF4
	0x01E0EA74 ADRP X0, 0x22E5000
	0x01E0EA78 LDR X0, [X0 + 0x598]
	0x01E0EA7C BL 0x1C16CF4
	0x01E0EA80 ADRP X0, 0x22EB000
	0x01E0EA84 LDR X0, [X0 + 0xDB8]
	0x01E0EA88 BL 0x1C16CF4
	0x01E0EA8C ADRP X0, 0x22EB000
	0x01E0EA90 LDR X0, [X0 + 0xDC0]
	0x01E0EA94 BL 0x1C16CF4
	0x01E0EA98 ADRP X0, 0x22EB000
	0x01E0EA9C LDR X0, [X0 + 0xDC8]
	0x01E0EAA0 BL 0x1C16CF4
	0x01E0EAA4 MOVZ W8, 0x1
	0x01E0EAA8 STRB W8, [X22 + 0xDD7]
	0x01E0EAAC MOV X0, X19
	0x01E0EAB0 MOV X1, X20
	0x01E0EAB4 BL 0x1E0EFA4
	0x01E0EAB8 LDR X0, [X21]
	0x01E0EABC MOVZ W1, 0x4
	0x01E0EAC0 BL 0x1C16D6C
	0x01E0EAC4 LDR X8, [X19 + 0x68]
	0x01E0EAC8 CBZ X8, 0x1E0EFA0
	0x01E0EACC MOV X21, X0
	0x01E0EAD0 CBZ X0, 0x1E0EFA0
	0x01E0EAD4 LDR X9, [X21 + 0x18]
	0x01E0EAD8 CBZ W9, 0x1E0EF9C
	0x01E0EADC LDRB W8, [X8 + 0x60]
	0x01E0EAE0 STRB W8, [X21 + 0x20]
	0x01E0EAE4 LDR X8, [X19 + 0x58]
	0x01E0EAE8 CBZ X8, 0x1E0EFA0
	0x01E0EAEC CMP W9, 0x1
	0x01E0EAF0 B.LS 0x1E0EF9C
	0x01E0EAF4 LDRB W8, [X8 + 0x60]
	0x01E0EAF8 STRB W8, [X21 + 0x21]
	0x01E0EAFC LDR X8, [X19 + 0x60]
	0x01E0EB00 CBZ X8, 0x1E0EFA0
	0x01E0EB04 CMP W9, 0x2
	0x01E0EB08 B.LS 0x1E0EF9C
	0x01E0EB0C LDRB W8, [X8 + 0x60]
	0x01E0EB10 STRB W8, [X21 + 0x22]
	0x01E0EB14 LDR X8, [X19 + 0x50]
	0x01E0EB18 CBZ X8, 0x1E0EFA0
	0x01E0EB1C CMP W9, 0x3
	0x01E0EB20 B.LS 0x1E0EF9C
	0x01E0EB24 LDRB W8, [X8 + 0x60]
	0x01E0EB28 CMP W9, 0x1
	0x01E0EB2C STRB W8, [X21 + 0x23]
	0x01E0EB30 STR W31, [X31 + 0xC]
	0x01E0EB34 B.LT 0x1E0EB94
	0x01E0EB38 MOV W25, W31
	0x01E0EB3C MOV X8, X31
	0x01E0EB40 MOV W24, W31
	0x01E0EB44 MOV W11, W31
	0x01E0EB48 AND X9, X9, 0x0
	0x01E0EB4C ADD X10, X21, 0x20
	0x01E0EB50 CMP X9, X8
	0x01E0EB54 B.EQ 0x1E0EF9C
	0x01E0EB58 LDRB W12, [X10, X8, LSL]
	0x01E0EB5C CBNZ W12, 0x1E0EB74
	0x01E0EB60 ANDS W31, W11, 0x1
	0x01E0EB64 ADD W25, W25, 0x1
	0x01E0EB68 CSEL W24, W24, W8, NE
	0x01E0EB6C MOVZ W11, 0x1
	0x01E0EB70 STR W25, [X31 + 0xC]
	0x01E0EB74 ADD X8, X8, 0x1
	0x01E0EB78 CMP X9, X8
	0x01E0EB7C B.NE 0x1E0EB50
	0x01E0EB80 CMP W25, 0x4
	0x01E0EB84 B.EQ 0x1E0EBBC
	0x01E0EB88 CMP W25, 0x1
	0x01E0EB8C B.EQ 0x1E0EBE4
	0x01E0EB90 CBNZ W25, 0x1E0EC34
	0x01E0EB94 MOVZ W1, 0x4
	0x01E0EB98 MOV W0, W31
	0x01E0EB9C MOV X2, X31
	0x01E0EBA0 BL 0x3C309A8
	0x01E0EBA4 LDR X8, [X19 + 0x48]
	0x01E0EBA8 CBZ X8, 0x1E0EFA0
	0x01E0EBAC MOV W22, W0
	0x01E0EBB0 MOV X0, X8
	0x01E0EBB4 MOV W1, W31
	0x01E0EBB8 B 0x1E0ECF8
	0x01E0EBBC MOVZ W1, 0x4
	0x01E0EBC0 MOV W0, W31
	0x01E0EBC4 MOV X2, X31
	0x01E0EBC8 BL 0x3C309A8
	0x01E0EBCC LDR X8, [X19 + 0x48]
	0x01E0EBD0 CBZ X8, 0x1E0EFA0
	0x01E0EBD4 MOV W22, W0
	0x01E0EBD8 MOVZ W1, 0x5
	0x01E0EBDC MOV X0, X8
	0x01E0EBE0 B 0x1E0ECF8
	0x01E0EBE4 LDR X8, [X21 + 0x18]
	0x01E0EBE8 CMP W8, 0x1
	0x01E0EBEC B.LT 0x1E0EC14
	0x01E0EBF0 MOV X22, X31
	0x01E0EBF4 ADD X9, X21, 0x20
	0x01E0EBF8 CMP W8, W22
	0x01E0EBFC B.EQ 0x1E0EF9C
	0x01E0EC00 LDRB W10, [X9, X22, LSL]
	0x01E0EC04 CBZ W10, 0x1E0EC18
	0x01E0EC08 ADD X22, X22, 0x1
	0x01E0EC0C CMP W22, W8
	0x01E0EC10 B.LT 0x1E0EBF8
	0x01E0EC14 MOV W22, W31
	0x01E0EC18 LDR X0, [X19 + 0x48]
	0x01E0EC1C CBZ X0, 0x1E0EFA0
	0x01E0EC20 MOVZ W1, 0x1
	0x01E0EC24 BL 0x1E0AFEC
	0x01E0EC28 MOV X23, X0
	0x01E0EC2C SUB W22, W31, W22
	0x01E0EC30 B 0x1E0EC3C
	0x01E0EC34 MOV W22, W31
	0x01E0EC38 MOV X23, X31
	0x01E0EC3C CMP W25, 0x3
	0x01E0EC40 B.EQ 0x1E0ECB0
	0x01E0EC44 CMP W25, 0x2
	0x01E0EC48 B.NE 0x1E0ED00
	0x01E0EC4C ADD W22, W24, 0x2
	0x01E0EC50 ADD W8, W24, 0x5
	0x01E0EC54 CMP W22, 0x0
	0x01E0EC58 LDR W9, [X21 + 0x18]
	0x01E0EC5C CSEL W8, W8, W22, LT
	0x01E0EC60 AND W8, W8, 0xFFFFFFFC
	0x01E0EC64 SUB W8, W22, W8
	0x01E0EC68 CMP W8, W9
	0x01E0EC6C B.CS 0x1E0EF9C
	0x01E0EC70 LDR X0, [X19 + 0x48]
	0x01E0EC74 CBZ X0, 0x1E0EFA0
	0x01E0EC78 ADD X8, X21, W8, SXTW
	0x01E0EC7C LDRB W8, [X8 + 0x20]
	0x01E0EC80 CBZ W8, 0x1E0EF6C
	0x01E0EC84 MOVZ W1, 0x2
	0x01E0EC88 BL 0x1E0AFEC
	0x01E0EC8C MOV X23, X0
	0x01E0EC90 CBNZ W24, 0x1E0ECA8
	0x01E0EC94 LDR W8, [X21 + 0x18]
	0x01E0EC98 CMP W8, 0x3
	0x01E0EC9C B.LS 0x1E0EF9C
	0x01E0ECA0 LDRB W8, [X21 + 0x23]
	0x01E0ECA4 CBZ W8, 0x1E0EF94
	0x01E0ECA8 SUB W22, W31, W24
	0x01E0ECAC B 0x1E0ED00
	0x01E0ECB0 LDR X9, [X21 + 0x18]
	0x01E0ECB4 CMP W9, 0x1
	0x01E0ECB8 B.LT 0x1E0ECE0
	0x01E0ECBC MOV X8, X31
	0x01E0ECC0 ADD X10, X21, 0x20
	0x01E0ECC4 CMP W9, W8
	0x01E0ECC8 B.EQ 0x1E0EF9C
	0x01E0ECCC LDRB W11, [X10, X8, LSL]
	0x01E0ECD0 CBNZ W11, 0x1E0ECE4
	0x01E0ECD4 ADD X8, X8, 0x1
	0x01E0ECD8 CMP W8, W9
	0x01E0ECDC B.LT 0x1E0ECC4
	0x01E0ECE0 MOV W8, W31
	0x01E0ECE4 LDR X0, [X19 + 0x48]
	0x01E0ECE8 CBZ X0, 0x1E0EFA0
	0x01E0ECEC MOVZ W9, 0x3
	0x01E0ECF0 SUB W22, W9, W8
	0x01E0ECF4 MOVZ W1, 0x4
	0x01E0ECF8 BL 0x1E0AFEC
	0x01E0ECFC MOV X23, X0
	0x01E0ED00 ADRP X21, 0x22E5000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x25CB000
	010 Move X23, 0x22EC000
	011 Move W8, [X22+3541]
	012 Move X23, [X23+3464]
	013 Move X20, X2
	014 Move X19, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {43}
	020 Move X0, 0x22EC000
	021 Move X0, [X0+3464]
	022 Call 0x1C17CF4
	023 Move X0, 0x22E8000
	024 Move X0, [X0+336]
	025 Call 0x1C17CF4
	026 Move X0, 0x22EC000
	027 Move X0, [X0+3472]
	028 Call 0x1C17CF4
	029 Move X0, 0x22E6000
	030 Move X0, [X0+2648]
	031 Call 0x1C17CF4
	032 Move X0, 0x22EC000
	033 Move X0, [X0+3480]
	034 Call 0x1C17CF4
	035 Move X0, 0x22E6000
	036 Move X0, [X0+1432]
	037 Call 0x1C17CF4
	038 Move X0, 0x22EC000
	039 Move X0, [X0+3488]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X22+3541], W8
	043 Move X2, [X23]
	044 Move W1, 1
	045 Move X0, X21
	046 Call 0x21A55B8, X0, X1
	047 Compare X0, 0
	048 JumpIfEqual {241}
	049 Move W8, [X0+24]
	050 Move X22, X0
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X25, 0x22EC000
	053 Move X25, [X25+3480]
	054 Move W24, W31
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Add X8, X22, W24
	057 Move X23, [X8+32]
	058 Compare X23, 0
	059 JumpIfEqual {241}
	060 Move X8, [X23]
	061 Move X1, [X25]
	062 NotImplemented "Instruction LDRH not yet implemented."
	063 Compare X9, 0
	064 JumpIfEqual {71}
	065 Move X10, [X8+176]
	066 Add X10, X10, 8
	067 NotImplemented "Instruction LDUR not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Subtract X9, X9, 1
	070 Add X10, X10, 16
	071 Move X0, X23
	072 Move W2, W31
	073 Call 0x1C5D788
	074 NotImplemented "Instruction LDRSW not yet implemented."
	075 Add X8, X8, X9
	076 Add X0, X8, 312
	077 Move X8, [X0]
	078 Move X1, [X0+8]
	079 Move X0, X23
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move W8, [X22+24]
	082 Add W24, W24, 1
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Compare X19, 0
	085 JumpIfEqual {241}
	086 Move X8, 0x22E6000
	087 Move X8, [X8+1432]
	088 Move X22, [X19+48]
	089 Move X0, [X8]
	090 Move W8, [X0+224]
	091 Compare W8, 0
	092 JumpIfNotEqual {94}
	093 Call 0x1C17DFC
	094 Move X0, X22
	095 Move X1, X31
	096 Move X2, X31
	097 Call Object.op_Inequality, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {232}
	102 Move X0, [X19+48]
	103 Compare X0, 0
	104 JumpIfEqual {241}
	105 Move X1, X31
	106 Call Object.get_name, X0
	107 Move X8, 0x22EC000
	108 Move X8, [X8+3488]
	109 Move X1, X0
	110 Move X2, X31
	111 Move X8, [X8]
	112 Move X0, X8
	113 Call String.Concat, X0, X1
	114 Move X8, 0x22E6000
	115 Move X8, [X8+2648]
	116 Move X23, X0
	117 Move X8, [X8]
	118 Move X0, X8
	119 Call 0x1C17F10
	120 Move X1, X23
	121 Move X2, X31
	122 Move X22, X0
	123 Call GameObject..ctor, X0, X1
	124 Compare X22, 0
	125 JumpIfEqual {241}
	126 Move X0, X22
	127 Move X1, X31
	128 Call GameObject.get_transform, X0
	129 Move X23, X0
	130 Move X0, X21
	131 Move X1, X31
	132 Call Component.get_transform, X0
	133 Compare X23, 0
	134 JumpIfEqual {241}
	135 Move X1, X0
	136 Move X0, X23
	137 Move X2, X31
	138 Call Transform.set_parent, X0, X1
	139 Move X0, X22
	140 Move X1, X31
	141 Call GameObject.get_transform, X0
	142 Move X23, 0x25CB000
	143 Move W8, [X23+1923]
	144 Move X21, X0
	145 Compare W8, 0
	146 JumpIfNotEqual {152}
	147 Move X0, 0x22E6000
	148 Move X0, [X0+1440]
	149 Call 0x1C17CF4
	150 Move W8, 1
	151 Move [X23+1923], W8
	152 Compare X21, 0
	153 JumpIfEqual {241}
	154 Move X8, 0x22E6000
	155 Move X8, [X8+1440]
	156 Move X0, X21
	157 Move X1, X31
	158 Move X8, [X8]
	159 Move X8, [X8+184]
	160 Move S1, [X8+4]
	161 Move S2, [X8+8]
	162 Move V0, [X8]
	163 Call Transform.set_localPosition, X0, X1
	164 Move X0, X22
	165 Move X1, X31
	166 Call GameObject.get_transform, X0
	167 Move X23, 0x25CB000
	168 Move W8, [X23+1939]
	169 Move X21, X0
	170 Compare W8, 0
	171 JumpIfNotEqual {177}
	172 Move X0, 0x22E7000
	173 Move X0, [X0+1448]
	174 Call 0x1C17CF4
	175 Move W8, 1
	176 Move [X23+1939], W8
	177 Compare X21, 0
	178 JumpIfEqual {241}
	179 Move X8, 0x22E7000
	180 Move X8, [X8+1448]
	181 Move X0, X21
	182 Move X1, X31
	183 Move X8, [X8]
	184 Move X8, [X8+184]
	185 Move S2, [X8+8]
	186 Move S3, [X8+12]
	187 Move S0, [X8]
	188 Move S1, [X8+4]
	189 Call Transform.set_localRotation, X0, X1
	190 Move W1, 20
	191 Move X0, X22
	192 Move X2, X31
	193 Call GameObject.set_layer, X0, X1
	194 Move X8, 0x22E8000
	195 Move X8, [X8+336]
	196 Move X0, X22
	197 Move X1, [X8]
	198 Call 0x21E61FC, X0
	199 Compare X20, 0
	200 JumpIfEqual {241}
	201 Move X21, X0
	202 Compare X0, 0
	203 JumpIfEqual {241}
	204 Move S1, [X20+36]
	205 Move S2, [X20+40]
	206 Move V0, [X20+32]
	207 Move X0, X21
	208 Move X1, X31
	209 Call BoxCollider.set_center, X0, X1
	210 Move S0, [X20+44]
	211 Move S1, [X20+48]
	212 Move V2, [X20+52]
	213 Move X0, X21
	214 Move X1, X31
	215 Add S0, S0, S0
	216 Add S1, S1, S1
	217 Add S2, S2, S2
	218 Call BoxCollider.set_size, X0, X1
	219 Move W1, 1
	220 Move X0, X21
	221 Move X2, X31
	222 Call Collider.set_isTrigger, X0, X1
	223 Move X8, 0x22EC000
	224 Move X8, [X8+3472]
	225 Move X0, X22
	226 Move X1, [X8]
	227 Call 0x21E61FC, X0
	228 Compare X0, 0
	229 JumpIfEqual {241}
	230 Move X8, [X19+48]
	231 Move [X0+32], X8
	232 Move X20, [X31+48]
	233 Move X19, [X31+56]
	234 Move X22, [X31+32]
	235 Move X21, [X31+40]
	236 Move X24, [X31+16]
	237 Move X23, [X31+24]
	238 Move X30, [X31+64]
	239 Move X25, [X31+72]
	240 Return 
	241 Call 0x1C17F20
	242 Call 0x1C17F28

Method: System.Boolean GetIsRuleOrientationOpen(AnimalCompany.GameGen.RuleOrientation ruleOrientation)

Disassembly:
	0x01E0ED04 LDR X21, [X21 + 0x598]
	0x01E0ED08 LDR X0, [X21]
	0x01E0ED0C LDR W8, [X0 + 0xE0]
	0x01E0ED10 CBNZ W8, 0x1E0ED18
	0x01E0ED14 BL 0x1C16DFC
	0x01E0ED18 MOV X0, X23
	0x01E0ED1C MOV X1, X31
	0x01E0ED20 MOV X2, X31
	0x01E0ED24 BL 0x3C3883C
	0x01E0ED28 TBZ X0, 0x0, 0x1E0EDA8
	0x01E0ED2C ADD X0, X31, 0xC
	0x01E0ED30 MOV X1, X31
	0x01E0ED34 BL 0x337B6E0
	0x01E0ED38 ADRP X8, 0x22EB000
	0x01E0ED3C LDR X8, [X8 + 0xDC0]
	0x01E0ED40 MOV X1, X0
	0x01E0ED44 MOV X2, X31
	0x01E0ED48 LDR X8, [X8]
	0x01E0ED4C MOV X0, X8
	0x01E0ED50 BL 0x321B938
	0x01E0ED54 ADRP X8, 0x22E5000
	0x01E0ED58 LDR X8, [X8 + 0x788]
	0x01E0ED5C MOV X19, X0
	0x01E0ED60 LDR X8, [X8]
	0x01E0ED64 LDR W9, [X8 + 0xE0]

ISIL:
	001 Move W8, [X0+40]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move X9, -19791872
	004 Add X9, X9, 2446
	005 NotImplemented "Instruction ADR not yet implemented."
	006 Move W11, [X9]
	007 Add X10, X10, X11
	008 CallNoReturn X10
	009 Move W0, 1
	010 Return X0
	011 Move W0, W31
	012 Return X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 And W8, W1, 0xFFFFFFFD
	015 NotImplemented "Instruction CMP not yet implemented."
	016 And W8, W1, 0xFFFFFFFE
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction CSET not yet implemented."
	019 Return X0
	020 NotImplemented "Instruction CMP not yet implemented."
	021 NotImplemented "Instruction CSET not yet implemented."
	022 Return X0

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01E0ED68 CBNZ W9, 0x1E0ED74
	0x01E0ED6C MOV X0, X8

ISIL:
	001 Move S0, 1

Method: System.Void DrawWireframeGizmoInternal(System.Single opacity)

Disassembly:
	0x01E0ED70 BL 0x1C16DFC
	0x01E0ED74 ADRP X8, 0x22EB000
	0x01E0ED78 ADRP X9, 0x22EB000
	0x01E0ED7C LDR X8, [X8 + 0xDC8]
	0x01E0ED80 LDR X9, [X9 + 0xDB8]
	0x01E0ED84 MOVZ W0, 0x20
	0x01E0ED88 MOVZ W5, 0xA3
	0x01E0ED8C LDR X3, [X8]
	0x01E0ED90 LDR X4, [X9]
	0x01E0ED94 MOV X1, X19
	0x01E0ED98 MOV X2, X31
	0x01E0ED9C MOV X6, X31
	0x01E0EDA0 BL 0x35C25CC
	0x01E0EDA4 B 0x1E0EF4C
	0x01E0EDA8 LDR X0, [X21]
	0x01E0EDAC LDR W8, [X0 + 0xE0]
	0x01E0EDB0 CBNZ W8, 0x1E0EDB8
	0x01E0EDB4 BL 0x1C16DFC
	0x01E0EDB8 ADRP X8, 0x22EB000
	0x01E0EDBC LDR X8, [X8 + 0xDB0]
	0x01E0EDC0 MOV X0, X23
	0x01E0EDC4 LDR X1, [X8]
	0x01E0EDC8 BL 0x222D35C
	0x01E0EDCC CBZ X0, 0x1E0EFA0
	0x01E0EDD0 MOV X1, X31
	0x01E0EDD4 MOV X21, X0
	0x01E0EDD8 BL 0x3C32E90
	0x01E0EDDC MOV X23, X0
	0x01E0EDE0 MOV X0, X19
	0x01E0EDE4 MOV X1, X31
	0x01E0EDE8 BL 0x3C32E90
	0x01E0EDEC CBZ X0, 0x1E0EFA0
	0x01E0EDF0 MOV X1, X31
	0x01E0EDF4 BL 0x3C3F58C
	0x01E0EDF8 CBZ X23, 0x1E0EFA0
	0x01E0EDFC MOV X0, X23
	0x01E0EE00 MOV X1, X31
	0x01E0EE04 BL 0x3C3F62C
	0x01E0EE08 MOV X0, X21
	0x01E0EE0C MOV X1, X31
	0x01E0EE10 BL 0x3C32E90
	0x01E0EE14 ADRP X8, 0xFFFFFFFFFECDC000
	0x01E0EE18 LDR V0, [X8 + 0x104]
	0x01E0EE1C MOVZ W8, 0x5A
	0x01E0EE20 MUL W8, W22, W8
	0x01E0EE24 SCVTF S1, W8
	0x01E0EE28 MOV X23, X0
	0x01E0EE2C FMUL S1, S1, S0
	0x01E0EE30 FMOV S0, W31
	0x01E0EE34 FMOV S2, W31
	0x01E0EE38 MOV X0, X31
	0x01E0EE3C BL 0x3C2A574
	0x01E0EE40 MOV X0, X19
	0x01E0EE44 MOV X1, X31
	0x01E0EE48 MOV V9.16B, V0.16B
	0x01E0EE4C MOV V11.16B, V1.16B
	0x01E0EE50 MOV V8.16B, V2.16B
	0x01E0EE54 MOV V10.16B, V3.16B
	0x01E0EE58 BL 0x3C32E90
	0x01E0EE5C CBZ X0, 0x1E0EFA0
	0x01E0EE60 MOV X1, X31
	0x01E0EE64 BL 0x3C3DEB4
	0x01E0EE68 CBZ X23, 0x1E0EFA0
	0x01E0EE6C FMUL S4, S10, S3
	0x01E0EE70 FMUL S5, S9, S0
	0x01E0EE74 FMUL S7, S8, S2
	0x01E0EE78 FMUL S17, S10, S2
	0x01E0EE7C FMUL S18, S8, S3
	0x01E0EE80 FMUL S19, S11, S0
	0x01E0EE84 FMUL S20, S11, S3
	0x01E0EE88 FMUL S21, S11, S2
	0x01E0EE8C FMUL S22, S9, S2
	0x01E0EE90 FMUL S2, S9, S3
	0x01E0EE94 FMUL S3, S8, S0
	0x01E0EE98 FMUL S0, S10, S0
	0x01E0EE9C FMUL S23, S10, S1
	0x01E0EEA0 FMUL S6, S11, S1
	0x01E0EEA4 FMUL S16, S9, S1
	0x01E0EEA8 FMUL S24, S8, S1
	0x01E0EEAC FSUB S1, S4, S5
	0x01E0EEB0 FADD S4, S17, S18
	0x01E0EEB4 FADD S5, S23, S20
	0x01E0EEB8 FADD S0, S0, S2
	0x01E0EEBC FSUB S1, S1, S6
	0x01E0EEC0 FADD S2, S16, S4
	0x01E0EEC4 FADD S4, S3, S5
	0x01E0EEC8 FADD S0, S21, S0
	0x01E0EECC FSUB S3, S1, S7
	0x01E0EED0 FSUB S2, S2, S19
	0x01E0EED4 FSUB S1, S4, S22
	0x01E0EED8 FSUB S0, S0, S24
	0x01E0EEDC MOV X0, X23
	0x01E0EEE0 MOV X1, X31
	0x01E0EEE4 BL 0x3C3F8B8
	0x01E0EEE8 MOV X0, X21
	0x01E0EEEC MOV X1, X31
	0x01E0EEF0 BL 0x3C32E90
	0x01E0EEF4 MOV X22, X0
	0x01E0EEF8 MOV X0, X19
	0x01E0EEFC MOV X1, X31
	0x01E0EF00 BL 0x3C32E90
	0x01E0EF04 CBZ X0, 0x1E0EFA0
	0x01E0EF08 MOV X1, X31
	0x01E0EF0C BL 0x3C32E90
	0x01E0EF10 CBZ X22, 0x1E0EFA0
	0x01E0EF14 MOV X1, X0
	0x01E0EF18 MOVZ W2, 0x1
	0x01E0EF1C MOV X0, X22
	0x01E0EF20 MOV X3, X31
	0x01E0EF24 BL 0x3C3FEB8
	0x01E0EF28 ADRP X8, 0x22EB000
	0x01E0EF2C LDR X8, [X8 + 0xDA8]
	0x01E0EF30 MOV X0, X21
	0x01E0EF34 LDR X1, [X8]
	0x01E0EF38 BL 0x21A3894
	0x01E0EF3C CBZ X0, 0x1E0EFA0
	0x01E0EF40 MOV X1, X20
	0x01E0EF44 MOV X2, X19
	0x01E0EF48 BL 0x1E0D9B0
	0x01E0EF4C LDP X20, X19, [X31 + 0x60]
	0x01E0EF50 LDP X22, X21, [X31 + 0x50]
	0x01E0EF54 LDP X24, X23, [X31 + 0x40]
	0x01E0EF58 LDP X30, X25, [X31 + 0x30]
	0x01E0EF5C LDP D9, D8, [X31 + 0x20]
	0x01E0EF60 LDP D11, D10, [X31 + 0x10]
	0x01E0EF64 ADD X31, X31, 0x70
	0x01E0EF68 RET
	0x01E0EF6C MOVZ W1, 0x3
	0x01E0EF70 BL 0x1E0AFEC
	0x01E0EF74 MOV X23, X0
	0x01E0EF78 MOVZ W1, 0x2
	0x01E0EF7C MOV W0, W31
	0x01E0EF80 MOV X2, X31
	0x01E0EF84 BL 0x3C309A8
	0x01E0EF88 CMP W0, 0x0
	0x01E0EF8C CSEL W22, W22, W24, EQ
	0x01E0EF90 B 0x1E0ED00
	0x01E0EF94 MOVZ W22, 0x1
	0x01E0EF98 B 0x1E0ED00
	0x01E0EF9C BL 0x1C16F28
	0x01E0EFA0 BL 0x1C16F20
	0x01E0EFA4 STR X30, [X31 - 0x40]!
	0x01E0EFA8 STP X24, X23, [X31 + 0x10]
	0x01E0EFAC STP X22, X21, [X31 + 0x20]
	0x01E0EFB0 STP X20, X19, [X31 + 0x30]
	0x01E0EFB4 ADRP X21, 0x25CA000
	0x01E0EFB8 ADRP X22, 0x22EB000
	0x01E0EFBC LDRB W8, [X21 + 0xDDA]
	0x01E0EFC0 LDR X22, [X22 + 0xD88]
	0x01E0EFC4 MOV X19, X1
	0x01E0EFC8 MOV X20, X0
	0x01E0EFCC TBNZ X8, 0x0, 0x1E0F02C
	0x01E0EFD0 ADRP X0, 0x22EB000
	0x01E0EFD4 LDR X0, [X0 + 0xD88]
	0x01E0EFD8 BL 0x1C16CF4
	0x01E0EFDC ADRP X0, 0x22E7000
	0x01E0EFE0 LDR X0, [X0 + 0x150]
	0x01E0EFE4 BL 0x1C16CF4
	0x01E0EFE8 ADRP X0, 0x22EB000
	0x01E0EFEC LDR X0, [X0 + 0xD90]
	0x01E0EFF0 BL 0x1C16CF4
	0x01E0EFF4 ADRP X0, 0x22E5000
	0x01E0EFF8 LDR X0, [X0 + 0xA58]
	0x01E0EFFC BL 0x1C16CF4
	0x01E0F000 ADRP X0, 0x22EA000
	0x01E0F004 LDR X0, [X0 + 0xD98]
	0x01E0F008 BL 0x1C16CF4
	0x01E0F00C ADRP X0, 0x22E4000
	0x01E0F010 LDR X0, [X0 + 0x598]
	0x01E0F014 BL 0x1C16CF4
	0x01E0F018 ADRP X0, 0x22EA000
	0x01E0F01C LDR X0, [X0 + 0xDA0]
	0x01E0F020 BL 0x1C16CF4
	0x01E0F024 MOVZ W8, 0x1
	0x01E0F028 STRB W8, [X21 + 0xDDA]
	0x01E0F02C LDR X2, [X22]
	0x01E0F030 MOVZ W1, 0x1
	0x01E0F034 MOV X0, X20
	0x01E0F038 BL 0x21A45B8
	0x01E0F03C CBZ X0, 0x1E0F2E4
	0x01E0F040 LDR W8, [X0 + 0x18]
	0x01E0F044 MOV X21, X0
	0x01E0F048 CMP W8, 0x1
	0x01E0F04C B.LT 0x1E0F0D8
	0x01E0F050 ADRP X24, 0x22EA000
	0x01E0F054 LDR X24, [X24 + 0xD98]
	0x01E0F058 MOV W23, W31
	0x01E0F05C CMP W23, W8
	0x01E0F060 B.CS 0x1E0F2E8
	0x01E0F064 ADD X8, X21, W23, 0x3, SXTW
	0x01E0F068 LDR X22, [X8 + 0x20]
	0x01E0F06C CBZ X22, 0x1E0F2E4
	0x01E0F070 LDR X8, [X22]
	0x01E0F074 LDR X1, [X24]
	0x01E0F078 LDRH W9, [X8 + 0x12E]
	0x01E0F07C CBZ X9, 0x1E0F0A0
	0x01E0F080 LDR X10, [X8 + 0xB0]
	0x01E0F084 ADD X10, X10, 0x8
	0x01E0F088 LDUR X11, [X10 - 0x8]
	0x01E0F08C CMP X11, X1
	0x01E0F090 B.EQ 0x1E0F0B0
	0x01E0F094 SUBS X9, X9, 0x1
	0x01E0F098 ADD X10, X10, 0x10
	0x01E0F09C B.NE 0x1E0F088
	0x01E0F0A0 MOV X0, X22
	0x01E0F0A4 MOV W2, W31
	0x01E0F0A8 BL 0x1C5C788
	0x01E0F0AC B 0x1E0F0BC
	0x01E0F0B0 LDRSW X9, [X10]
	0x01E0F0B4 ADD X8, X8, X9, 0x4, LSL
	0x01E0F0B8 ADD X0, X8, 0x138
	0x01E0F0BC LDP X8, X1, [X0]
	0x01E0F0C0 MOV X0, X22
	0x01E0F0C4 BLR X8
	0x01E0F0C8 LDR W8, [X21 + 0x18]
	0x01E0F0CC ADD W23, W23, 0x1
	0x01E0F0D0 CMP W23, W8
	0x01E0F0D4 B.LT 0x1E0F05C
	0x01E0F0D8 CBZ X19, 0x1E0F2E4
	0x01E0F0DC ADRP X8, 0x22E4000
	0x01E0F0E0 LDR X8, [X8 + 0x598]
	0x01E0F0E4 LDR X21, [X19 + 0x30]
	0x01E0F0E8 LDR X0, [X8]
	0x01E0F0EC LDR W8, [X0 + 0xE0]
	0x01E0F0F0 CBNZ W8, 0x1E0F0F8
	0x01E0F0F4 BL 0x1C16DFC
	0x01E0F0F8 MOV X0, X21
	0x01E0F0FC MOV X1, X31
	0x01E0F100 MOV X2, X31
	0x01E0F104 BL 0x3C354F8
	0x01E0F108 TBZ X0, 0x0, 0x1E0F2D0
	0x01E0F10C LDR X0, [X19 + 0x30]
	0x01E0F110 CBZ X0, 0x1E0F2E4
	0x01E0F114 MOV X1, X31
	0x01E0F118 BL 0x3C389D4
	0x01E0F11C ADRP X8, 0x22EA000
	0x01E0F120 LDR X8, [X8 + 0xDA0]
	0x01E0F124 MOV X1, X0
	0x01E0F128 MOV X2, X31
	0x01E0F12C LDR X8, [X8]
	0x01E0F130 MOV X0, X8
	0x01E0F134 BL 0x321B938
	0x01E0F138 ADRP X8, 0x22E4000
	0x01E0F13C LDR X8, [X8 + 0xA58]
	0x01E0F140 MOV X22, X0
	0x01E0F144 LDR X8, [X8]
	0x01E0F148 MOV X0, X8
	0x01E0F14C BL 0x1C16F10
	0x01E0F150 MOV X1, X22
	0x01E0F154 MOV X2, X31
	0x01E0F158 MOV X21, X0
	0x01E0F15C BL 0x3C35934
	0x01E0F160 CBZ X21, 0x1E0F2E4
	0x01E0F164 MOV X0, X21
	0x01E0F168 MOV X1, X31
	0x01E0F16C BL 0x3C356F8
	0x01E0F170 MOV X22, X0
	0x01E0F174 MOV X0, X20
	0x01E0F178 MOV X1, X31
	0x01E0F17C BL 0x3C32E90
	0x01E0F180 CBZ X22, 0x1E0F2E4
	0x01E0F184 MOV X1, X0
	0x01E0F188 MOV X0, X22
	0x01E0F18C MOV X2, X31
	0x01E0F190 BL 0x3C3FD20
	0x01E0F194 MOV X0, X21
	0x01E0F198 MOV X1, X31
	0x01E0F19C BL 0x3C356F8
	0x01E0F1A0 ADRP X23, 0x25C9000
	0x01E0F1A4 LDRB W8, [X23 + 0x783]
	0x01E0F1A8 MOV X22, X0
	0x01E0F1AC CBNZ W8, 0x1E0F1C4
	0x01E0F1B0 ADRP X0, 0x22E4000
	0x01E0F1B4 LDR X0, [X0 + 0x5A0]
	0x01E0F1B8 BL 0x1C16CF4
	0x01E0F1BC MOVZ W8, 0x1
	0x01E0F1C0 STRB W8, [X23 + 0x783]
	0x01E0F1C4 CBZ X22, 0x1E0F2E4
	0x01E0F1C8 ADRP X8, 0x22E4000
	0x01E0F1CC LDR X8, [X8 + 0x5A0]
	0x01E0F1D0 MOV X0, X22
	0x01E0F1D4 MOV X1, X31
	0x01E0F1D8 LDR X8, [X8]
	0x01E0F1DC LDR X8, [X8 + 0xB8]
	0x01E0F1E0 LDP S1, S2, [X8 + 0x4]
	0x01E0F1E4 LDR V0, [X8]
	0x01E0F1E8 BL 0x3C3EC04
	0x01E0F1EC MOV X0, X21
	0x01E0F1F0 MOV X1, X31
	0x01E0F1F4 BL 0x3C356F8
	0x01E0F1F8 ADRP X23, 0x25C9000
	0x01E0F1FC LDRB W8, [X23 + 0x793]
	0x01E0F200 MOV X22, X0
	0x01E0F204 CBNZ W8, 0x1E0F21C
	0x01E0F208 ADRP X0, 0x22E5000
	0x01E0F20C LDR X0, [X0 + 0x5A8]
	0x01E0F210 BL 0x1C16CF4
	0x01E0F214 MOVZ W8, 0x1
	0x01E0F218 STRB W8, [X23 + 0x793]
	0x01E0F21C CBZ X22, 0x1E0F2E4
	0x01E0F220 ADRP X8, 0x22E5000
	0x01E0F224 LDR X8, [X8 + 0x5A8]
	0x01E0F228 MOV X0, X22
	0x01E0F22C MOV X1, X31
	0x01E0F230 LDR X8, [X8]
	0x01E0F234 LDR X8, [X8 + 0xB8]
	0x01E0F238 LDP S2, S3, [X8 + 0x8]
	0x01E0F23C LDP S0, S1, [X8]
	0x01E0F240 BL 0x3C3F8B8
	0x01E0F244 MOVZ W1, 0x14
	0x01E0F248 MOV X0, X21
	0x01E0F24C MOV X2, X31
	0x01E0F250 BL 0x3C35770
	0x01E0F254 ADRP X8, 0x22E6000
	0x01E0F258 LDR X8, [X8 + 0x150]
	0x01E0F25C MOV X0, X21
	0x01E0F260 LDR X1, [X8]
	0x01E0F264 BL 0x21E51FC
	0x01E0F268 CBZ X0, 0x1E0F2E4
	0x01E0F26C LDP S1, S2, [X20 + 0x24]
	0x01E0F270 LDR V0, [X20 + 0x20]
	0x01E0F274 MOV X1, X31
	0x01E0F278 MOV X22, X0
	0x01E0F27C BL 0x3C8FEB4
	0x01E0F280 LDP S0, S1, [X20 + 0x2C]
	0x01E0F284 LDR V2, [X20 + 0x34]
	0x01E0F288 MOV X0, X22
	0x01E0F28C MOV X1, X31
	0x01E0F290 FADD S0, S0, S0
	0x01E0F294 FADD S1, S1, S1
	0x01E0F298 FADD S2, S2, S2
	0x01E0F29C BL 0x3C8FFEC
	0x01E0F2A0 MOVZ W1, 0x1
	0x01E0F2A4 MOV X0, X22
	0x01E0F2A8 MOV X2, X31
	0x01E0F2AC BL 0x3C8F7C8
	0x01E0F2B0 ADRP X8, 0x22EA000
	0x01E0F2B4 LDR X8, [X8 + 0xD90]
	0x01E0F2B8 MOV X0, X21
	0x01E0F2BC LDR X1, [X8]
	0x01E0F2C0 BL 0x21E51FC
	0x01E0F2C4 CBZ X0, 0x1E0F2E4
	0x01E0F2C8 LDR X8, [X19 + 0x30]
	0x01E0F2CC STR X8, [X0 + 0x20]
	0x01E0F2D0 LDP X20, X19, [X31 + 0x30]
	0x01E0F2D4 LDP X22, X21, [X31 + 0x20]
	0x01E0F2D8 LDP X24, X23, [X31 + 0x10]
	0x01E0F2DC LDR X30, [X31], #0x40
	0x01E0F2E0 RET
	0x01E0F2E4 BL 0x1C16F20
	0x01E0F2E8 BL 0x1C16F28
	0x01E0F2EC B 0x1E0F2F0
	0x01E0F2F0 STR X30, [X31 - 0x30]!
	0x01E0F2F4 STP X22, X21, [X31 + 0x10]
	0x01E0F2F8 STP X20, X19, [X31 + 0x20]
	0x01E0F2FC ADRP X21, 0x25C9000
	0x01E0F300 ADRP X22, 0x22EA000
	0x01E0F304 ADRP X20, 0x22EA000
	0x01E0F308 LDRB W8, [X21 + 0xDDD]
	0x01E0F30C LDR X22, [X22 + 0xAE0]
	0x01E0F310 LDR X20, [X20 + 0xAC0]
	0x01E0F314 MOV X19, X0
	0x01E0F318 TBNZ X8, 0x0, 0x1E0F33C
	0x01E0F31C ADRP X0, 0x22EA000
	0x01E0F320 LDR X0, [X0 + 0xAC0]
	0x01E0F324 BL 0x1C16CF4
	0x01E0F328 ADRP X0, 0x22EA000
	0x01E0F32C LDR X0, [X0 + 0xAE0]
	0x01E0F330 BL 0x1C16CF4
	0x01E0F334 MOVZ W8, 0x1
	0x01E0F338 STRB W8, [X21 + 0xDDD]
	0x01E0F33C LDR X0, [X22]
	0x01E0F340 BL 0x1C16F10
	0x01E0F344 LDR X1, [X20]
	0x01E0F348 MOV X20, X0
	0x01E0F34C BL 0x301B7C4
	0x01E0F350 STR X20, [X19 + 0x38]
	0x01E0F354 MOV X0, X19
	0x01E0F358 LDP X20, X19, [X31 + 0x20]
	0x01E0F35C LDP X22, X21, [X31 + 0x10]
	0x01E0F360 MOV X1, X31
	0x01E0F364 LDR X30, [X31], #0x30
	0x01E0F368 B 0x3C36C30
	0x01E0F36C LDRB W0, [X0 + 0x60]
	0x01E0F370 RET
	0x01E0F374 AND W8, W1, 0x1
	0x01E0F378 STRB W8, [X0 + 0x60]
	0x01E0F37C RET
	0x01E0F380 SUB X31, X31, 0x80
	0x01E0F384 STP X30, X25, [X31 + 0x40]
	0x01E0F388 STP X24, X23, [X31 + 0x50]
	0x01E0F38C STP X22, X21, [X31 + 0x60]
	0x01E0F390 STP X20, X19, [X31 + 0x70]
	0x01E0F394 ADRP X21, 0x25C9000
	0x01E0F398 LDRB W8, [X21 + 0xDD8]
	0x01E0F39C MOV W20, W1
	0x01E0F3A0 MOV X19, X0
	0x01E0F3A4 TBNZ X8, 0x0, 0x1E0F3F8
	0x01E0F3A8 ADRP X0, 0x22EA000
	0x01E0F3AC LDR X0, [X0 + 0xDD0]
	0x01E0F3B0 BL 0x1C16CF4
	0x01E0F3B4 ADRP X0, 0x22EA000
	0x01E0F3B8 LDR X0, [X0 + 0xDD8]
	0x01E0F3BC BL 0x1C16CF4
	0x01E0F3C0 ADRP X0, 0x22EA000
	0x01E0F3C4 LDR X0, [X0 + 0xDE0]
	0x01E0F3C8 BL 0x1C16CF4
	0x01E0F3CC ADRP X0, 0x22EA000
	0x01E0F3D0 LDR X0, [X0 + 0xDE8]
	0x01E0F3D4 BL 0x1C16CF4
	0x01E0F3D8 ADRP X0, 0x22EA000
	0x01E0F3DC LDR X0, [X0 + 0xCA0]
	0x01E0F3E0 BL 0x1C16CF4
	0x01E0F3E4 ADRP X0, 0x22EA000
	0x01E0F3E8 LDR X0, [X0 + 0xCA8]
	0x01E0F3EC BL 0x1C16CF4
	0x01E0F3F0 MOVZ W8, 0x1
	0x01E0F3F4 STRB W8, [X21 + 0xDD8]
	0x01E0F3F8 STP X31, X31, [X31 + 0x20]
	0x01E0F3FC STR X31, [X31 + 0x30]
	0x01E0F400 LDR X0, [X19 + 0x38]
	0x01E0F404 AND W8, W20, 0x1
	0x01E0F408 STRB W8, [X19 + 0x60]
	0x01E0F40C CBZ X0, 0x1E0F548
	0x01E0F410 ADRP X25, 0x22EA000
	0x01E0F414 LDR X25, [X25 + 0xDE8]
	0x01E0F418 ADRP X24, 0x22EA000
	0x01E0F41C ADRP X23, 0x22EA000
	0x01E0F420 ADD X8, X31, 0x8
	0x01E0F424 LDR X1, [X25]
	0x01E0F428 LDR X24, [X24 + 0xDD8]
	0x01E0F42C LDR X23, [X23 + 0xDD0]
	0x01E0F430 BL 0x301CB58
	0x01E0F434 LDUR V0, [X31 + 0x8]
	0x01E0F438 LDR X8, [X31 + 0x18]
	0x01E0F43C STR V0, [X31 + 0x2]
	0x01E0F440 STR X8, [X31 + 0x30]
	0x01E0F444 LDR X1, [X24]
	0x01E0F448 ADD X0, X31, 0x20
	0x01E0F44C BL 0x2BC4350
	0x01E0F450 TBZ X0, 0x0, 0x1E0F46C
	0x01E0F454 LDR X0, [X31 + 0x30]
	0x01E0F458 CBZ X0, 0x1E0F540
	0x01E0F45C MOV W1, W31
	0x01E0F460 MOV X2, X31
	0x01E0F464 BL 0x3C357B4
	0x01E0F468 B 0x1E0F444
	0x01E0F46C LDR X1, [X23]
	0x01E0F470 ADD X0, X31, 0x20
	0x01E0F474 BL 0x2BC434C
	0x01E0F478 LDR X0, [X19 + 0x40]
	0x01E0F47C CBZ X0, 0x1E0F548
	0x01E0F480 LDR X1, [X25]
	0x01E0F484 ADD X8, X31, 0x8
	0x01E0F488 BL 0x301CB58
	0x01E0F48C LDUR V0, [X31 + 0x8]
	0x01E0F490 LDR X8, [X31 + 0x18]
	0x01E0F494 STR V0, [X31 + 0x2]
	0x01E0F498 STR X8, [X31 + 0x30]
	0x01E0F49C LDR X1, [X24]
	0x01E0F4A0 ADD X0, X31, 0x20
	0x01E0F4A4 BL 0x2BC4350
	0x01E0F4A8 TBZ X0, 0x0, 0x1E0F4C4
	0x01E0F4AC LDR X0, [X31 + 0x30]
	0x01E0F4B0 CBZ X0, 0x1E0F544
	0x01E0F4B4 MOV W1, W31
	0x01E0F4B8 MOV X2, X31
	0x01E0F4BC BL 0x3C357B4
	0x01E0F4C0 B 0x1E0F49C
	0x01E0F4C4 LDR X1, [X23]
	0x01E0F4C8 ADD X0, X31, 0x20
	0x01E0F4CC BL 0x2BC434C
	0x01E0F4D0 TBZ X20, 0x0, 0x1E0F4E0
	0x01E0F4D4 LDR X19, [X19 + 0x38]
	0x01E0F4D8 CBNZ X19, 0x1E0F4E8
	0x01E0F4DC B 0x1E0F548
	0x01E0F4E0 LDR X19, [X19 + 0x40]
	0x01E0F4E4 CBZ X19, 0x1E0F548
	0x01E0F4E8 LDR W1, [X19 + 0x18]
	0x01E0F4EC CMP W1, 0x1
	0x01E0F4F0 B.LT 0x1E0F528
	0x01E0F4F4 MOV W0, W31
	0x01E0F4F8 MOV X2, X31
	0x01E0F4FC BL 0x3C309A8
	0x01E0F500 ADRP X8, 0x22EA000
	0x01E0F504 LDR X8, [X8 + 0xCA8]
	0x01E0F508 MOV W1, W0
	0x01E0F50C MOV X0, X19
	0x01E0F510 LDR X2, [X8]
	0x01E0F514 BL 0x301BCCC
	0x01E0F518 CBZ X0, 0x1E0F548
	0x01E0F51C MOVZ W1, 0x1
	0x01E0F520 MOV X2, X31
	0x01E0F524 BL 0x3C357B4
	0x01E0F528 LDP X20, X19, [X31 + 0x70]
	0x01E0F52C LDP X22, X21, [X31 + 0x60]
	0x01E0F530 LDP X24, X23, [X31 + 0x50]
	0x01E0F534 LDP X30, X25, [X31 + 0x40]
	0x01E0F538 ADD X31, X31, 0x80
	0x01E0F53C RET
	0x01E0F540 BL 0x1C16F20
	0x01E0F544 BL 0x1C16F20
	0x01E0F548 BL 0x1C16F20
	0x01E0F54C B 0x1E0F55C
	0x01E0F550 B 0x1E0F55C
	0x01E0F554 B 0x1E0F5B0
	0x01E0F558 B 0x1E0F5B0
	0x01E0F55C MOV X21, X0
	0x01E0F560 CMP W1, 0x1
	0x01E0F564 B.NE 0x1E0F58C
	0x01E0F568 MOV X0, X21
	0x01E0F56C BL 0x3EB1AD0
	0x01E0F570 LDR X22, [X0]
	0x01E0F574 BL 0x3EB1AE0
	0x01E0F578 LDR X1, [X23]
	0x01E0F57C ADD X0, X31, 0x20
	0x01E0F580 BL 0x2BC434C
	0x01E0F584 CBZ X22, 0x1E0F4D0
	0x01E0F588 B 0x1E0F5DC
	0x01E0F58C MOV X22, X31
	0x01E0F590 B 0x1E0F598
	0x01E0F594 MOV X21, X0
	0x01E0F598 LDR X1, [X23]
	0x01E0F59C ADD X0, X31, 0x20
	0x01E0F5A0 BL 0x2BC434C
	0x01E0F5A4 CBZ X22, 0x1E0F600
	0x01E0F5A8 MOV X0, X22
	0x01E0F5AC BL 0x1C16F18
	0x01E0F5B0 MOV X21, X0
	0x01E0F5B4 CMP W1, 0x1
	0x01E0F5B8 B.NE 0x1E0F5E4
	0x01E0F5BC MOV X0, X21
	0x01E0F5C0 BL 0x3EB1AD0
	0x01E0F5C4 LDR X22, [X0]
	0x01E0F5C8 BL 0x3EB1AE0
	0x01E0F5CC LDR X1, [X23]
	0x01E0F5D0 ADD X0, X31, 0x20
	0x01E0F5D4 BL 0x2BC434C
	0x01E0F5D8 CBZ X22, 0x1E0F478
	0x01E0F5DC MOV X0, X22
	0x01E0F5E0 BL 0x1C16F18
	0x01E0F5E4 MOV X22, X31
	0x01E0F5E8 B 0x1E0F5F0
	0x01E0F5EC MOV X21, X0
	0x01E0F5F0 LDR X1, [X23]
	0x01E0F5F4 ADD X0, X31, 0x20
	0x01E0F5F8 BL 0x2BC434C
	0x01E0F5FC CBNZ X22, 0x1E0F608
	0x01E0F600 MOV X0, X21
	0x01E0F604 BL 0x1D2C690
	0x01E0F608 MOV X0, X22
	0x01E0F60C BL 0x1C16F18
	0x01E0F610 BL 0x1990590
	0x01E0F614 ADRP X8, 0xFFFFFFFFFECDB000
	0x01E0F618 LDR V0, [X8 + 0x35C]
	0x01E0F61C B 0x1E0F620
	0x01E0F620 SUB X31, X31, 0xD0
	0x01E0F624 STR D14, [X31 + 0x80]
	0x01E0F628 STP D13, D12, [X31 + 0x90]
	0x01E0F62C STP D11, D10, [X31 + 0xA0]
	0x01E0F630 STP D9, D8, [X31 + 0xB0]
	0x01E0F634 STP X30, X19, [X31 + 0xC0]
	0x01E0F638 ADRP X8, 0xFFFFFFFFFECDB000
	0x01E0F63C ADRP X9, 0xFFFFFFFFFECDB000
	0x01E0F640 MOV V9.16B, V0.16B
	0x01E0F644 LDR V0, [X8 + 0x35C]
	0x01E0F648 LDR V2, [X9 + 0x68]
	0x01E0F64C MOV X19, X0
	0x01E0F650 FMOV S1, 1
	0x01E0F654 MOV V3.16B, V9.16B
	0x01E0F658 MOV X0, X31
	0x01E0F65C BL 0x3C0D030
	0x01E0F660 LDR W0, [X19 + 0x20]
	0x01E0F664 MOV X1, X31
	0x01E0F668 BL 0x1E15EE0
	0x01E0F66C MOV X0, X19
	0x01E0F670 MOV X1, X31
	0x01E0F674 MOV V10.16B, V0.16B
	0x01E0F678 MOV V8.16B, V1.16B
	0x01E0F67C BL 0x3C32E90
	0x01E0F680 CBZ X0, 0x1E0F7BC
	0x01E0F684 ADD X8, X31, 0x40
	0x01E0F688 MOV X1, X31
	0x01E0F68C BL 0x3C3F1C8
	0x01E0F690 LDP V0, V1, [X31 + 0x40]
	0x01E0F694 LDP V2, V3, [X31 + 0x60]
	0x01E0F698 ADD X0, X31, 0x0
	0x01E0F69C MOV X1, X31
	0x01E0F6A0 STP V0, V1, [X31]
	0x01E0F6A4 STP V2, V3, [X31 + 0x20]
	0x01E0F6A8 BL 0x3C0D150
	0x01E0F6AC FMOV S14, 0.5
	0x01E0F6B0 FMUL S1, S8, S14
	0x01E0F6B4 FMOV S0, W31
	0x01E0F6B8 FMOV S2, W31
	0x01E0F6BC FMOV S5, W31
	0x01E0F6C0 MOV V3.16B, V10.16B
	0x01E0F6C4 MOV V4.16B, V8.16B
	0x01E0F6C8 MOV X0, X31
	0x01E0F6CC BL 0x3C0CCD8
	0x01E0F6D0 FCMP S10, S8
	0x01E0F6D4 FCSEL S0, S10, S8, MI
	0x01E0F6D8 FMOV S1, 0.25
	0x01E0F6DC MOV X0, X31
	0x01E0F6E0 FMUL S11, S0, S1
	0x01E0F6E4 BL 0x3C0CFAC
	0x01E0F6E8 MOV X0, X31
	0x01E0F6EC MOV V12.16B, V0.16B
	0x01E0F6F0 BL 0x3C0CFAC
	0x01E0F6F4 MOV X0, X31
	0x01E0F6F8 MOV V13.16B, V1.16B
	0x01E0F6FC BL 0x3C0CFAC
	0x01E0F700 FMUL S3, S9, S14
	0x01E0F704 MOV V0.16B, V12.16B
	0x01E0F708 MOV V1.16B, V13.16B
	0x01E0F70C MOV X0, X31
	0x01E0F710 BL 0x3C0D030
	0x01E0F714 FMUL S9, S10, S14
	0x01E0F718 FMOV S1, W31
	0x01E0F71C FMOV S2, W31
	0x01E0F720 FMOV S4, W31
	0x01E0F724 MOV V0.16B, V9.16B
	0x01E0F728 MOV V3.16B, V9.16B
	0x01E0F72C MOV V5.16B, V11.16B
	0x01E0F730 MOV X0, X31
	0x01E0F734 BL 0x3C0CB04
	0x01E0F738 FMOV S0, -0.5
	0x01E0F73C FMUL S10, S10, S0
	0x01E0F740 FMOV S1, W31
	0x01E0F744 FMOV S2, W31
	0x01E0F748 FMOV S4, W31
	0x01E0F74C MOV V0.16B, V10.16B
	0x01E0F750 MOV V3.16B, V10.16B
	0x01E0F754 MOV V5.16B, V11.16B
	0x01E0F758 MOV X0, X31
	0x01E0F75C BL 0x3C0CB04
	0x01E0F760 FMOV S2, W31
	0x01E0F764 MOV V0.16B, V10.16B
	0x01E0F768 MOV V1.16B, V8.16B
	0x01E0F76C MOV V3.16B, V10.16B
	0x01E0F770 MOV V4.16B, V8.16B
	0x01E0F774 MOV V5.16B, V11.16B
	0x01E0F778 MOV X0, X31
	0x01E0F77C BL 0x3C0CB04
	0x01E0F780 FMOV S2, W31
	0x01E0F784 MOV V0.16B, V9.16B
	0x01E0F788 MOV V1.16B, V8.16B
	0x01E0F78C MOV V3.16B, V9.16B
	0x01E0F790 MOV V4.16B, V8.16B
	0x01E0F794 MOV V5.16B, V11.16B
	0x01E0F798 MOV X0, X31
	0x01E0F79C BL 0x3C0CB04
	0x01E0F7A0 LDP X30, X19, [X31 + 0xC0]
	0x01E0F7A4 LDP D9, D8, [X31 + 0xB0]
	0x01E0F7A8 LDP D11, D10, [X31 + 0xA0]
	0x01E0F7AC LDP D13, D12, [X31 + 0x90]
	0x01E0F7B0 LDR V14, [X31 + 0x80]
	0x01E0F7B4 ADD X31, X31, 0xD0
	0x01E0F7B8 RET
	0x01E0F7BC BL 0x1C16F20
	0x01E0F7C0 FMOV S0, 1
	0x01E0F7C4 B 0x1E0F620
	0x01E0F7C8 STP X30, X23, [X31 - 0x30]!
	0x01E0F7CC STP X22, X21, [X31 + 0x10]
	0x01E0F7D0 STP X20, X19, [X31 + 0x20]
	0x01E0F7D4 ADRP X20, 0x25C9000
	0x01E0F7D8 ADRP X23, 0x22E4000
	0x01E0F7DC ADRP X22, 0x22EA000
	0x01E0F7E0 ADRP X21, 0x22EA000
	0x01E0F7E4 LDRB W8, [X20 + 0xDD9]
	0x01E0F7E8 LDR X23, [X23 + 0x988]
	0x01E0F7EC LDR X22, [X22 + 0x548]
	0x01E0F7F0 LDR X21, [X21 + 0x550]
	0x01E0F7F4 MOV X19, X0
	0x01E0F7F8 TBNZ X8, 0x0, 0x1E0F828
	0x01E0F7FC ADRP X0, 0x22EA000
	0x01E0F800 LDR X0, [X0 + 0x550]
	0x01E0F804 BL 0x1C16CF4
	0x01E0F808 ADRP X0, 0x22EA000
	0x01E0F80C LDR X0, [X0 + 0x548]
	0x01E0F810 BL 0x1C16CF4
	0x01E0F814 ADRP X0, 0x22E4000
	0x01E0F818 LDR X0, [X0 + 0x988]
	0x01E0F81C BL 0x1C16CF4
	0x01E0F820 MOVZ W8, 0x1
	0x01E0F824 STRB W8, [X20 + 0xDD9]
	0x01E0F828 LDR X8, [X23]

ISIL:
	001 Move [X31-128], D15
	002 Move [X31-120], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+80], X30
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Subtract X31, X31, 416
	017 Move X20, 0x25CB000
	018 Move X23, 0x22E6000
	019 Move W8, [X20+3542]
	020 Move X23, [X23+1432]
	021 Move V8, V0
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {32}
	027 Move X0, 0x22E6000
	028 Move X0, [X0+1432]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+3542], W8
	032 Move X22, X19
	033 Add X22, X22, 32
	034 Move X20, [X22]
	035 Move X0, [X23]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Equality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {790}
	048 Move S0, 0.25
	049 Multiply S3, S8, S0
	050 Move S0, 1
	051 Move S1, 1
	052 Move S2, 1
	053 Move X0, X31
	054 Call Gizmos.set_color, X0
	055 Move X0, X19
	056 Move X1, X31
	057 Call Component.get_transform, X0
	058 Compare X0, 0
	059 JumpIfEqual {807}
	060 Add X8, X31, 352
	061 Move X1, X31
	062 Call Transform.get_localToWorldMatrix, X0
	063 Move V0, [X31+352]
	064 Move V1, [X31+368]
	065 Move V2, [X31+384]
	066 Move V3, [X31+400]
	067 Add X0, X31, 288
	068 Move X1, X31
	069 Move [X31+288], V0
	070 Move [X31+296], V1
	071 Move [X31+320], V2
	072 Move [X31+328], V3
	073 Call Gizmos.set_matrix, X0
	074 Move X8, [X22]
	075 Compare X8, 0
	076 JumpIfEqual {807}
	077 Move S2, [X8+40]
	078 Move S3, [X8+44]
	079 Move S4, [X8+48]
	080 Move S5, [X8+52]
	081 Move S0, [X8+32]
	082 Move S1, [X8+36]
	083 Move X0, X31
	084 Add S3, S3, S3
	085 Add S4, S4, S4
	086 Add S5, S5, S5
	087 Call Gizmos.DrawWireCube, X0, X1
	088 Move X8, [X22]
	089 Compare X8, 0
	090 JumpIfEqual {807}
	091 Move X0, [X23]
	092 Move X20, [X8+80]
	093 Move W9, [X0+224]
	094 Compare W9, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1C17DFC
	097 Move X0, X20
	098 Move X1, X31
	099 Move X2, X31
	100 Call Object.op_Inequality, X0, X1
	101 Move [X31+492], S8
	102 Move TEMP, X0
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfNotEqual {264}
	106 Move W21, [X19+40]
	107 Move S1, 1
	108 Move S2, W31
	109 Move V3, V8
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction FCSEL not yet implemented."
	112 NotImplemented "Instruction FCSEL not yet implemented."
	113 Move V2, V1
	114 Move X0, X31
	115 Call Gizmos.set_color, X0
	116 Move X0, [X19+32]
	117 Compare X0, 0
	118 JumpIfEqual {807}
	119 Move X1, X31
	120 Call Component.get_transform, X0
	121 Move X8, [X22]
	122 Compare X8, 0
	123 JumpIfEqual {807}
	124 Move X20, X0
	125 Move X0, [X8+80]
	126 Compare X0, 0
	127 JumpIfEqual {807}
	128 Move X1, X31
	129 Call Component.get_transform, X0
	130 Compare X0, 0
	131 JumpIfEqual {807}
	132 Move X1, X31
	133 Call Transform.get_position, X0
	134 Compare X20, 0
	135 JumpIfEqual {807}
	136 Move X0, X20
	137 Move X1, X31
	138 Call Transform.InverseTransformPoint, X0, X1
	139 Move X0, [X22]
	140 Compare X0, 0
	141 JumpIfEqual {807}
	142 Move X1, X31
	143 Move V8, V0
	144 Move V9, V1
	145 Move V10, V2
	146 Call Component.get_transform, X0
	147 Compare X0, 0
	148 JumpIfEqual {807}
	149 Move X1, X31
	150 Call Transform.get_rotation, X0
	151 Move X0, X31
	152 Call Quaternion.Inverse, X0
	153 Move X8, [X22]
	154 Compare X8, 0
	155 JumpIfEqual {807}
	156 Move X0, [X8+80]
	157 Compare X0, 0
	158 JumpIfEqual {807}
	159 Move X1, X31
	160 Move V14, V0
	161 Move V13, V1
	162 Move V12, V2
	163 Move V15, V3
	164 Move [X31+24], S10
	165 Move [X31+32], S9
	166 Move [X31+488], S8
	167 Call Component.get_transform, X0
	168 Compare X0, 0
	169 JumpIfEqual {807}
	170 Move X1, X31
	171 Call Transform.get_rotation, X0
	172 Move X0, X19
	173 Move X1, X31
	174 Move V10, V0
	175 Move V9, V1
	176 Move V8, V2
	177 Move V11, V3
	178 Call Component.get_transform, X0
	179 Compare X0, 0
	180 JumpIfEqual {807}
	181 Multiply S0, S15, S10
	182 Multiply S1, S14, S11
	183 Multiply S4, S15, S9
	184 Multiply S5, S13, S11
	185 Multiply S17, S14, S10
	186 Multiply S20, S15, S8
	187 Multiply S21, S15, S11
	188 Multiply S22, S12, S11
	189 Multiply S2, S13, S8
	190 Multiply S6, S12, S10
	191 Multiply S16, S14, S9
	192 Multiply S19, S13, S9
	193 Add S0, S0, S1
	194 Add S1, S4, S5
	195 Add S4, S20, S22
	196 Subtract S5, S21, S17
	197 Multiply S3, S12, S9
	198 Multiply S7, S14, S8
	199 Multiply S18, S13, S10
	200 Multiply S23, S12, S8
	201 Add S0, S2, S0
	202 Add S1, S6, S1
	203 Add S2, S16, S4
	204 Subtract S4, S5, S19
	205 Move X1, X31
	206 Subtract S15, S0, S3
	207 Subtract S14, S1, S7
	208 Subtract S13, S2, S18
	209 Subtract S12, S4, S23
	210 Call Transform.get_position, X0
	211 Move V3, [X31+488]
	212 Move X20, 0x25CA000
	213 Move W8, [X20+2139]
	214 Add S10, S3, S0
	215 Move V0, [X31+28]
	216 Add S9, S0, S1
	217 Move V0, [X31+24]
	218 Add S8, S0, S2
	219 Compare W8, 0
	220 JumpIfNotEqual {226}
	221 Move X0, 0x22E5000
	222 Move X0, [X0+1440]
	223 Call 0x1C17CF4
	224 Move W8, 1
	225 Move [X20+2139], W8
	226 Move X8, 0x22E5000
	227 Move X8, [X8+1440]
	228 Move V1, V9
	229 Move V2, V8
	230 Move V3, V15
	231 Move X8, [X8]
	232 Move V4, V14
	233 Move V5, V13
	234 Move V6, V12
	235 Move X8, [X8+184]
	236 Move X0, X31
	237 Move V0, [X8+20]
	238 NotImplemented "Instruction LDUR not yet implemented."
	239 Add X8, X31, 352
	240 Move [X31+8], S0
	241 Move V0, V10
	242 Move [X31], X9
	243 Call Matrix4x4.TRS, X0, X1, X2
	244 Move V0, [X31+352]
	245 Move V1, [X31+368]
	246 Move V2, [X31+384]
	247 Move V3, [X31+400]
	248 Add X0, X31, 224
	249 Move X1, X31
	250 Move [X31+224], V0
	251 Move [X31+232], V1
	252 Move [X31+256], V2
	253 Move [X31+264], V3
	254 Call Gizmos.set_matrix, X0
	255 Move X8, [X22]
	256 Compare X8, 0
	257 JumpIfEqual {807}
	258 Move V8, [X31+492]
	259 Move X0, [X8+80]
	260 NotImplemented "Instruction CMP not yet implemented."
	261 NotImplemented "Instruction CSET not yet implemented."
	262 Move V0, V8
	263 Call SocketUtils.DrawSocketGizmo, X0, V0, X1
	264 Move X8, [X22]
	265 Compare X8, 0
	266 JumpIfEqual {807}
	267 Move X0, [X23]
	268 Move X20, [X8+88]
	269 Move W9, [X0+224]
	270 Compare W9, 0
	271 JumpIfNotEqual {273}
	272 Call 0x1C17DFC
	273 Move X0, X20
	274 Move X1, X31
	275 Move X2, X31
	276 Call Object.op_Inequality, X0, X1
	277 Move TEMP, X0
	278 And TEMP, TEMP, 1
	279 Compare TEMP, 1
	280 JumpIfNotEqual {441}
	281 Move W8, [X19+40]
	282 NotImplemented "Instruction CMP not yet implemented."
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Move S1, 1
	285 Move S0, W31
	286 Move W20, 1
	287 Move W20, W31
	288 Move S1, W31
	289 Move S0, 1
	290 Move V2, V1
	291 Move V3, V8
	292 Move X0, X31
	293 Call Gizmos.set_color, X0
	294 Move X0, [X22]
	295 Compare X0, 0
	296 JumpIfEqual {807}
	297 Move X1, X31
	298 Call Component.get_transform, X0
	299 Move X8, [X22]
	300 Compare X8, 0
	301 JumpIfEqual {807}
	302 Move X21, X0
	303 Move X0, [X8+88]
	304 Compare X0, 0
	305 JumpIfEqual {807}
	306 Move X1, X31
	307 Call Component.get_transform, X0
	308 Compare X0, 0
	309 JumpIfEqual {807}
	310 Move X1, X31
	311 Call Transform.get_position, X0
	312 Compare X21, 0
	313 JumpIfEqual {807}
	314 Move X0, X21
	315 Move X1, X31
	316 Call Transform.InverseTransformPoint, X0, X1
	317 Move X0, [X22]
	318 Compare X0, 0
	319 JumpIfEqual {807}
	320 Move X1, X31
	321 Move V8, V0
	322 Move V9, V1
	323 Move V10, V2
	324 Call Component.get_transform, X0
	325 Compare X0, 0
	326 JumpIfEqual {807}
	327 Move X1, X31
	328 Call Transform.get_rotation, X0
	329 Move X0, X31
	330 Call Quaternion.Inverse, X0
	331 Move X8, [X22]
	332 Compare X8, 0
	333 JumpIfEqual {807}
	334 Move X0, [X8+88]
	335 Compare X0, 0
	336 JumpIfEqual {807}
	337 Move X1, X31
	338 Move V14, V0
	339 Move V13, V1
	340 Move V12, V2
	341 Move V15, V3
	342 Move [X31+24], S10
	343 Move [X31+32], S9
	344 Move [X31+488], S8
	345 Call Component.get_transform, X0
	346 Compare X0, 0
	347 JumpIfEqual {807}
	348 Move X1, X31
	349 Call Transform.get_rotation, X0
	350 Move X0, X19
	351 Move X1, X31
	352 Move V10, V0
	353 Move V9, V1
	354 Move V8, V2
	355 Move V11, V3
	356 Call Component.get_transform, X0
	357 Compare X0, 0
	358 JumpIfEqual {807}
	359 Multiply S0, S15, S10
	360 Multiply S1, S14, S11
	361 Multiply S4, S15, S9
	362 Multiply S5, S13, S11
	363 Multiply S17, S14, S10
	364 Multiply S20, S15, S8
	365 Multiply S21, S15, S11
	366 Multiply S22, S12, S11
	367 Multiply S2, S13, S8
	368 Multiply S6, S12, S10
	369 Multiply S16, S14, S9
	370 Multiply S19, S13, S9
	371 Add S0, S0, S1
	372 Add S1, S4, S5
	373 Add S4, S20, S22
	374 Subtract S5, S21, S17
	375 Multiply S3, S12, S9
	376 Multiply S7, S14, S8
	377 Multiply S18, S13, S10
	378 Multiply S23, S12, S8
	379 Add S0, S2, S0
	380 Add S1, S6, S1
	381 Add S2, S16, S4
	382 Subtract S4, S5, S19
	383 Move X1, X31
	384 Subtract S15, S0, S3
	385 Subtract S14, S1, S7
	386 Subtract S13, S2, S18
	387 Subtract S12, S4, S23
	388 Call Transform.get_position, X0
	389 Move V3, [X31+488]
	390 Move X21, 0x25CA000
	391 Move W8, [X21+2139]
	392 Add S10, S3, S0
	393 Move V0, [X31+28]
	394 Add S9, S0, S1
	395 Move V0, [X31+24]
	396 Add S8, S0, S2
	397 Compare W8, 0
	398 JumpIfNotEqual {404}
	399 Move X0, 0x22E5000
	400 Move X0, [X0+1440]
	401 Call 0x1C17CF4
	402 Move W8, 1
	403 Move [X21+2139], W8
	404 Move X8, 0x22E5000
	405 Move X8, [X8+1440]
	406 Move V1, V9
	407 Move V2, V8
	408 Move V3, V15
	409 Move X8, [X8]
	410 Move V4, V14
	411 Move V5, V13
	412 Move V6, V12
	413 Move X8, [X8+184]
	414 Move X0, X31
	415 Move V0, [X8+20]
	416 NotImplemented "Instruction LDUR not yet implemented."
	417 Add X8, X31, 352
	418 Move [X31+8], S0
	419 Move V0, V10
	420 Move [X31], X9
	421 Call Matrix4x4.TRS, X0, X1, X2
	422 Move V0, [X31+352]
	423 Move V1, [X31+368]
	424 Move V2, [X31+384]
	425 Move V3, [X31+400]
	426 Add X0, X31, 160
	427 Move X1, X31
	428 Move [X31+160], V0
	429 Move [X31+168], V1
	430 Move [X31+192], V2
	431 Move [X31+200], V3
	432 Call Gizmos.set_matrix, X0
	433 Move X8, [X22]
	434 Compare X8, 0
	435 JumpIfEqual {807}
	436 Move V8, [X31+492]
	437 Move X0, [X8+88]
	438 Move W1, W20
	439 Move V0, V8
	440 Call SocketUtils.DrawSocketGizmo, X0, V0, X1
	441 Move X8, [X22]
	442 Compare X8, 0
	443 JumpIfEqual {807}
	444 Move X0, [X23]
	445 Move X20, [X8+96]
	446 Move W9, [X0+224]
	447 Compare W9, 0
	448 JumpIfNotEqual {450}
	449 Call 0x1C17DFC
	450 Move X0, X20
	451 Move X1, X31
	452 Move X2, X31
	453 Call Object.op_Inequality, X0, X1
	454 Move TEMP, X0
	455 And TEMP, TEMP, 1
	456 Compare TEMP, 1
	457 JumpIfNotEqual {616}
	458 Move W21, [X19+40]
	459 Move S1, 1
	460 Move S2, W31
	461 Move V3, V8
	462 NotImplemented "Instruction CMP not yet implemented."
	463 NotImplemented "Instruction FCSEL not yet implemented."
	464 NotImplemented "Instruction FCSEL not yet implemented."
	465 Move V2, V1
	466 Move X0, X31
	467 Call Gizmos.set_color, X0
	468 Move X0, [X19+32]
	469 Compare X0, 0
	470 JumpIfEqual {807}
	471 Move X1, X31
	472 Call Component.get_transform, X0
	473 Move X8, [X22]
	474 Compare X8, 0
	475 JumpIfEqual {807}
	476 Move X20, X0
	477 Move X0, [X8+96]
	478 Compare X0, 0
	479 JumpIfEqual {807}
	480 Move X1, X31
	481 Call Component.get_transform, X0
	482 Compare X0, 0
	483 JumpIfEqual {807}
	484 Move X1, X31
	485 Call Transform.get_position, X0
	486 Compare X20, 0
	487 JumpIfEqual {807}
	488 Move X0, X20
	489 Move X1, X31
	490 Call Transform.InverseTransformPoint, X0, X1
	491 Move X0, [X22]
	492 Compare X0, 0
	493 JumpIfEqual {807}
	494 Move X1, X31
	495 Move V8, V0
	496 Move V9, V1
	497 Move V10, V2
	498 Call Component.get_transform, X0
	499 Compare X0, 0
	500 JumpIfEqual {807}
	501 Move X1, X31
	502 Call Transform.get_rotation, X0
	503 Move X0, X31
	504 Call Quaternion.Inverse, X0
	505 Move X8, [X22]
	506 Compare X8, 0
	507 JumpIfEqual {807}
	508 Move X0, [X8+96]
	509 Compare X0, 0
	510 JumpIfEqual {807}
	511 Move X1, X31
	512 Move V14, V0
	513 Move V13, V1
	514 Move V12, V2
	515 Move V15, V3
	516 Move [X31+24], S10
	517 Move [X31+32], S9
	518 Move [X31+488], S8
	519 Call Component.get_transform, X0
	520 Compare X0, 0
	521 JumpIfEqual {807}
	522 Move X1, X31
	523 Call Transform.get_rotation, X0
	524 Move X0, X19
	525 Move X1, X31
	526 Move V10, V0
	527 Move V9, V1
	528 Move V8, V2
	529 Move V11, V3
	530 Call Component.get_transform, X0
	531 Compare X0, 0
	532 JumpIfEqual {807}
	533 Multiply S0, S15, S10
	534 Multiply S1, S14, S11
	535 Multiply S4, S15, S9
	536 Multiply S5, S13, S11
	537 Multiply S17, S14, S10
	538 Multiply S20, S15, S8
	539 Multiply S21, S15, S11
	540 Multiply S22, S12, S11
	541 Multiply S2, S13, S8
	542 Multiply S6, S12, S10
	543 Multiply S16, S14, S9
	544 Multiply S19, S13, S9
	545 Add S0, S0, S1
	546 Add S1, S4, S5
	547 Add S4, S20, S22
	548 Subtract S5, S21, S17
	549 Multiply S3, S12, S9
	550 Multiply S7, S14, S8
	551 Multiply S18, S13, S10
	552 Multiply S23, S12, S8
	553 Add S0, S2, S0
	554 Add S1, S6, S1
	555 Add S2, S16, S4
	556 Subtract S4, S5, S19
	557 Move X1, X31
	558 Subtract S15, S0, S3
	559 Subtract S14, S1, S7
	560 Subtract S13, S2, S18
	561 Subtract S12, S4, S23
	562 Call Transform.get_position, X0
	563 Move V3, [X31+488]
	564 Move X20, 0x25CA000
	565 Move W8, [X20+2139]
	566 Add S10, S3, S0
	567 Move V0, [X31+28]
	568 Add S9, S0, S1
	569 Move V0, [X31+24]
	570 Add S8, S0, S2
	571 Compare W8, 0
	572 JumpIfNotEqual {578}
	573 Move X0, 0x22E5000
	574 Move X0, [X0+1440]
	575 Call 0x1C17CF4
	576 Move W8, 1
	577 Move [X20+2139], W8
	578 Move X8, 0x22E5000
	579 Move X8, [X8+1440]
	580 Move V1, V9
	581 Move V2, V8
	582 Move V3, V15
	583 Move X8, [X8]
	584 Move V4, V14
	585 Move V5, V13
	586 Move V6, V12
	587 Move X8, [X8+184]
	588 Move X0, X31
	589 Move V0, [X8+20]
	590 NotImplemented "Instruction LDUR not yet implemented."
	591 Add X8, X31, 352
	592 Move [X31+8], S0
	593 Move V0, V10
	594 Move [X31], X9
	595 Call Matrix4x4.TRS, X0, X1, X2
	596 Move V0, [X31+352]
	597 Move V1, [X31+368]
	598 Move V2, [X31+384]
	599 Move V3, [X31+400]
	600 Add X0, X31, 96
	601 Move X1, X31
	602 Move [X31+96], V0
	603 Move [X31+104], V1
	604 Move [X31+128], V2
	605 Move [X31+136], V3
	606 Call Gizmos.set_matrix, X0
	607 Move X8, [X22]
	608 Compare X8, 0
	609 JumpIfEqual {807}
	610 Move V8, [X31+492]
	611 Move X0, [X8+96]
	612 NotImplemented "Instruction CMP not yet implemented."
	613 NotImplemented "Instruction CSET not yet implemented."
	614 Move V0, V8
	615 Call SocketUtils.DrawSocketGizmo, X0, V0, X1
	616 Move X8, [X22]
	617 Compare X8, 0
	618 JumpIfEqual {807}
	619 Move X0, [X23]
	620 Move X20, [X8+104]
	621 Move W9, [X0+224]
	622 Compare W9, 0
	623 JumpIfNotEqual {625}
	624 Call 0x1C17DFC
	625 Move X0, X20
	626 Move X1, X31
	627 Move X2, X31
	628 Call Object.op_Inequality, X0, X1
	629 Move TEMP, X0
	630 And TEMP, TEMP, 1
	631 Compare TEMP, 1
	632 JumpIfNotEqual {790}
	633 Move W21, [X19+40]
	634 Move S1, 1
	635 Move S2, W31
	636 Move V3, V8
	637 NotImplemented "Instruction CMP not yet implemented."
	638 NotImplemented "Instruction FCSEL not yet implemented."
	639 NotImplemented "Instruction FCSEL not yet implemented."
	640 Move V2, V1
	641 Move X0, X31
	642 Call Gizmos.set_color, X0
	643 Move X0, [X19+32]
	644 Compare X0, 0
	645 JumpIfEqual {807}
	646 Move X1, X31
	647 Call Component.get_transform, X0
	648 Move X8, [X22]
	649 Compare X8, 0
	650 JumpIfEqual {807}
	651 Move X20, X0
	652 Move X0, [X8+104]
	653 Compare X0, 0
	654 JumpIfEqual {807}
	655 Move X1, X31
	656 Call Component.get_transform, X0
	657 Compare X0, 0
	658 JumpIfEqual {807}
	659 Move X1, X31
	660 Call Transform.get_position, X0
	661 Compare X20, 0
	662 JumpIfEqual {807}
	663 Move X0, X20
	664 Move X1, X31
	665 Call Transform.InverseTransformPoint, X0, X1
	666 Move X0, [X22]
	667 Compare X0, 0
	668 JumpIfEqual {807}
	669 Move X1, X31
	670 Move V8, V0
	671 Move V9, V1
	672 Move V10, V2
	673 Call Component.get_transform, X0
	674 Compare X0, 0
	675 JumpIfEqual {807}
	676 Move X1, X31
	677 Call Transform.get_rotation, X0
	678 Move X0, X31
	679 Call Quaternion.Inverse, X0
	680 Move X8, [X22]
	681 Compare X8, 0
	682 JumpIfEqual {807}
	683 Move X0, [X8+104]
	684 Compare X0, 0
	685 JumpIfEqual {807}
	686 Move X1, X31
	687 Move V14, V0
	688 Move V13, V1
	689 Move V12, V2
	690 Move V15, V3
	691 Move [X31+24], S10
	692 Move [X31+32], S9
	693 Move [X31+488], S8
	694 Call Component.get_transform, X0
	695 Compare X0, 0
	696 JumpIfEqual {807}
	697 Move X1, X31
	698 Call Transform.get_rotation, X0
	699 Move X0, X19
	700 Move X1, X31
	701 Move V10, V0
	702 Move V9, V1
	703 Move V8, V2
	704 Move V11, V3
	705 Call Component.get_transform, X0
	706 Compare X0, 0
	707 JumpIfEqual {807}
	708 Multiply S0, S15, S10
	709 Multiply S1, S14, S11
	710 Multiply S4, S15, S9
	711 Multiply S5, S13, S11
	712 Multiply S17, S14, S10
	713 Multiply S20, S15, S8
	714 Multiply S21, S15, S11
	715 Multiply S22, S12, S11
	716 Multiply S2, S13, S8
	717 Multiply S6, S12, S10
	718 Multiply S16, S14, S9
	719 Multiply S19, S13, S9
	720 Add S0, S0, S1
	721 Add S1, S4, S5
	722 Add S4, S20, S22
	723 Subtract S5, S21, S17
	724 Multiply S3, S12, S9
	725 Multiply S7, S14, S8
	726 Multiply S18, S13, S10
	727 Multiply S23, S12, S8
	728 Add S0, S2, S0
	729 Add S1, S6, S1
	730 Add S2, S16, S4
	731 Subtract S4, S5, S19
	732 Move X1, X31
	733 Subtract S15, S0, S3
	734 Subtract S14, S1, S7
	735 Subtract S13, S2, S18
	736 Subtract S12, S4, S23
	737 Call Transform.get_position, X0
	738 Move V3, [X31+488]
	739 Move X19, 0x25CA000
	740 Move W8, [X19+2139]
	741 Add S10, S3, S0
	742 Move V0, [X31+28]
	743 Add S9, S0, S1
	744 Move V0, [X31+24]
	745 Add S8, S0, S2
	746 Compare W8, 0
	747 JumpIfNotEqual {753}
	748 Move X0, 0x22E5000
	749 Move X0, [X0+1440]
	750 Call 0x1C17CF4
	751 Move W8, 1
	752 Move [X19+2139], W8
	753 Move X8, 0x22E5000
	754 Move X8, [X8+1440]
	755 Move V1, V9
	756 Move V2, V8
	757 Move V3, V15
	758 Move X8, [X8]
	759 Move V4, V14
	760 Move V5, V13
	761 Move V6, V12
	762 Move X8, [X8+184]
	763 Move X0, X31
	764 Move V0, [X8+20]
	765 NotImplemented "Instruction LDUR not yet implemented."
	766 Add X8, X31, 352
	767 Move [X31+8], S0
	768 Move V0, V10
	769 Move [X31], X9
	770 Call Matrix4x4.TRS, X0, X1, X2
	771 Move V0, [X31+352]
	772 Move V1, [X31+368]
	773 Move V2, [X31+384]
	774 Move V3, [X31+400]
	775 Add X0, X31, 32
	776 Move X1, X31
	777 Move [X31+32], V0
	778 Move [X31+40], V1
	779 Move [X31+64], V2
	780 Move [X31+72], V3
	781 Call Gizmos.set_matrix, X0
	782 Move X8, [X22]
	783 Compare X8, 0
	784 JumpIfEqual {807}
	785 Move X0, [X8+104]
	786 Move V0, [X31+492]
	787 NotImplemented "Instruction CMP not yet implemented."
	788 NotImplemented "Instruction CSET not yet implemented."
	789 Call SocketUtils.DrawSocketGizmo, X0, V0, X1
	790 Add X31, X31, 416
	791 Move X20, [X31+112]
	792 Move X19, [X31+120]
	793 Move X22, [X31+96]
	794 Move X21, [X31+104]
	795 Move X30, [X31+80]
	796 Move X23, [X31+88]
	797 Move X29, [X31+64]
	798 Move D9, [X31+48]
	799 Move D8, [X31+56]
	800 Move D11, [X31+32]
	801 Move D10, [X31+40]
	802 Move D13, [X31+16]
	803 Move D12, [X31+24]
	804 Move D15, [X31+128]
	805 Move D14, [X31+136]
	806 Return 
	807 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01E0FA04 FCMP S0, S1
	0x01E0FA08 CSET W1, MI

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

