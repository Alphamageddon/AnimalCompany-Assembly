Type: AnimalCompany.GameGen.GameGenUtil

Method: System.Collections.Generic.List`1<AnimalCompany.GameGen.Socket> GetOuterSockets(System.Collections.Generic.List`1<AnimalCompany.GameGen.Socket> points)

Disassembly:
	0x01E10B6C ADRP X22, 0x22E9000
	0x01E10B70 ADRP X23, 0x22E3000
	0x01E10B74 LDR X22, [X22 + 0xED8]
	0x01E10B78 LDR X23, [X23 + 0xA28]
	0x01E10B7C ADD X0, X31, 0xC
	0x01E10B80 MOV X1, X31
	0x01E10B84 BL 0x337B6E0
	0x01E10B88 LDR X8, [X22]
	0x01E10B8C MOV X1, X0
	0x01E10B90 MOV X2, X31
	0x01E10B94 MOV X0, X8
	0x01E10B98 BL 0x321B938
	0x01E10B9C LDR X8, [X23]
	0x01E10BA0 MOV X22, X0
	0x01E10BA4 LDR W9, [X8 + 0xE0]
	0x01E10BA8 CBNZ W9, 0x1E10BB4
	0x01E10BAC MOV X0, X8
	0x01E10BB0 BL 0x1C16DFC
	0x01E10BB4 MOV X0, X22
	0x01E10BB8 MOV X1, X31
	0x01E10BBC BL 0x3C06A04
	0x01E10BC0 LDR W0, [X31 + 0xC]
	0x01E10BC4 MOV X1, X31
	0x01E10BC8 BL 0x3C30830
	0x01E10BCC MOV X0, X19
	0x01E10BD0 BL 0x1E107DC
	0x01E10BD4 TBZ X0, 0x0, 0x1E10C2C
	0x01E10BD8 MOV X0, X19
	0x01E10BDC BL 0x1E10E20
	0x01E10BE0 MOV X0, X19
	0x01E10BE4 BL 0x1E1116C
	0x01E10BE8 MOV X0, X19
	0x01E10BEC BL 0x1E1185C
	0x01E10BF0 MOV X0, X19
	0x01E10BF4 BL 0x1E11B04
	0x01E10BF8 MOV X0, X19
	0x01E10BFC BL 0x1E11E64
	0x01E10C00 MOV X0, X19
	0x01E10C04 BL 0x1E12548
	0x01E10C08 MOV X0, X19
	0x01E10C0C MOV W1, W21
	0x01E10C10 BL 0x1E12874
	0x01E10C14 TBZ X20, 0x0, 0x1E10C3C
	0x01E10C18 MOV X0, X19
	0x01E10C1C BL 0x1E12D98
	0x01E10C20 MOV X0, X19
	0x01E10C24 BL 0x1E13DA4
	0x01E10C28 B 0x1E10C5C
	0x01E10C2C MOV X0, X19
	0x01E10C30 BL 0x1E10C78
	0x01E10C34 MOV W0, W31
	0x01E10C38 B 0x1E10C60
	0x01E10C3C LDR X0, [X24]
	0x01E10C40 LDR X19, [X19 + 0x50]
	0x01E10C44 LDR W8, [X0 + 0xE0]
	0x01E10C48 CBNZ W8, 0x1E10C50
	0x01E10C4C BL 0x1C16DFC
	0x01E10C50 MOV X0, X19
	0x01E10C54 MOV X1, X31
	0x01E10C58 BL 0x3C394A8
	0x01E10C5C MOVZ W0, 0x1
	0x01E10C60 LDP X20, X19, [X31 + 0x40]
	0x01E10C64 LDP X22, X21, [X31 + 0x30]
	0x01E10C68 LDP X24, X23, [X31 + 0x20]
	0x01E10C6C LDP X26, X25, [X31 + 0x10]
	0x01E10C70 LDR X30, [X31], #0x50
	0x01E10C74 RET
	0x01E10C78 SUB X31, X31, 0x50
	0x01E10C7C STR X30, [X31 + 0x20]
	0x01E10C80 STP X22, X21, [X31 + 0x30]
	0x01E10C84 STP X20, X19, [X31 + 0x40]
	0x01E10C88 ADRP X20, 0x25C8000
	0x01E10C8C LDRB W8, [X20 + 0xDEB]
	0x01E10C90 MOV X19, X0
	0x01E10C94 TBNZ X8, 0x0, 0x1E10CE8
	0x01E10C98 ADRP X0, 0x22E9000
	0x01E10C9C LDR X0, [X0 + 0xEE0]
	0x01E10CA0 BL 0x1C16CF4
	0x01E10CA4 ADRP X0, 0x22E9000
	0x01E10CA8 LDR X0, [X0 + 0xEE8]
	0x01E10CAC BL 0x1C16CF4
	0x01E10CB0 ADRP X0, 0x22E9000
	0x01E10CB4 LDR X0, [X0 + 0xEF0]
	0x01E10CB8 BL 0x1C16CF4
	0x01E10CBC ADRP X0, 0x22E9000
	0x01E10CC0 LDR X0, [X0 + 0xEF8]
	0x01E10CC4 BL 0x1C16CF4
	0x01E10CC8 ADRP X0, 0x22E3000
	0x01E10CCC LDR X0, [X0 + 0x598]
	0x01E10CD0 BL 0x1C16CF4
	0x01E10CD4 ADRP X0, 0x22E9000
	0x01E10CD8 LDR X0, [X0 + 0xF00]
	0x01E10CDC BL 0x1C16CF4
	0x01E10CE0 MOVZ W8, 0x1
	0x01E10CE4 STRB W8, [X20 + 0xDEB]
	0x01E10CE8 STP X31, X31, [X31 + 0x8]
	0x01E10CEC STR X31, [X31 + 0x18]
	0x01E10CF0 LDR X8, [X19 + 0x28]
	0x01E10CF4 CBZ X8, 0x1E10DA0
	0x01E10CF8 LDR X0, [X8 + 0x10]
	0x01E10CFC CBZ X0, 0x1E10DA0
	0x01E10D00 ADRP X8, 0x22E9000
	0x01E10D04 LDR X8, [X8 + 0xEE0]
	0x01E10D08 LDR X1, [X8]
	0x01E10D0C BL 0x2AA4F58
	0x01E10D10 CBZ X0, 0x1E10DA0
	0x01E10D14 ADRP X8, 0x22E9000
	0x01E10D18 LDR X8, [X8 + 0xF00]
	0x01E10D1C ADRP X21, 0x22E9000
	0x01E10D20 ADRP X22, 0x22E3000
	0x01E10D24 ADRP X20, 0x22E9000
	0x01E10D28 LDR X1, [X8]
	0x01E10D2C LDR X21, [X21 + 0xEF0]
	0x01E10D30 LDR X22, [X22 + 0x598]
	0x01E10D34 LDR X20, [X20 + 0xEE8]
	0x01E10D38 ADD X8, X31, 0x8
	0x01E10D3C BL 0x275A7AC
	0x01E10D40 LDR X1, [X21]
	0x01E10D44 ADD X0, X31, 0x8
	0x01E10D48 BL 0x2C0B1F0
	0x01E10D4C TBZ X0, 0x0, 0x1E10D7C
	0x01E10D50 LDR X8, [X31 + 0x18]
	0x01E10D54 CBZ X8, 0x1E10D9C
	0x01E10D58 LDR X0, [X22]
	0x01E10D5C LDR X19, [X8 + 0x18]
	0x01E10D60 LDR W9, [X0 + 0xE0]
	0x01E10D64 CBNZ W9, 0x1E10D6C
	0x01E10D68 BL 0x1C16DFC
	0x01E10D6C MOV X0, X19
	0x01E10D70 MOV X1, X31
	0x01E10D74 BL 0x3C39564

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x25C9000
	011 Move X22, 0x22EA000
	012 Move X20, 0x22EA000
	013 Move W8, [X21+3553]
	014 Move X22, [X22+2784]
	015 Move X20, [X20+2752]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {41}
	021 Move X0, 0x22EA000
	022 Move X0, [X0+2576]
	023 Call 0x1C17CF4
	024 Move X0, 0x22EA000
	025 Move X0, [X0+2752]
	026 Call 0x1C17CF4
	027 Move X0, 0x22EA000
	028 Move X0, [X0+2520]
	029 Call 0x1C17CF4
	030 Move X0, 0x22EA000
	031 Move X0, [X0+2528]
	032 Call 0x1C17CF4
	033 Move X0, 0x22EA000
	034 Move X0, [X0+2784]
	035 Call 0x1C17CF4
	036 Move X0, 0x22E4000
	037 Move X0, [X0+1432]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X21+3553], W8
	041 Move X0, [X22]
	042 Call 0x1C17F10
	043 Move X1, [X20]
	044 Move X20, X0
	045 Call List`1<Object>..ctor, X0
	046 Move X0, X19
	047 Call GameGenUtil.lowestXCoord, X0
	048 Compare X20, 0
	049 JumpIfEqual {148}
	050 Move X24, 0x22EA000
	051 Move X25, 0x22EA000
	052 Move X26, 0x22E4000
	053 Move X24, [X24+2576]
	054 Move X25, [X25+2528]
	055 Move X26, [X26+1432]
	056 Move X21, X0
	057 Move W10, [X20+28]
	058 Move X8, [X20+16]
	059 Move X9, [X24]
	060 Add W10, W10, 1
	061 Move [X20+28], W10
	062 Compare X8, 0
	063 JumpIfEqual {148}
	064 NotImplemented "Instruction LDRSW not yet implemented."
	065 Move W11, [X8+24]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add W9, W10, 1
	068 Add X8, X8, X10
	069 Move [X20+24], W9
	070 Move [X8+32], X21
	071 Move X8, [X9+32]
	072 Move X0, X20
	073 Move X1, X21
	074 Move X8, [X8+192]
	075 Move X2, [X8+112]
	076 Call List`1<Object>.AddWithResize, X0, X1
	077 Compare X19, 0
	078 JumpIfEqual {148}
	079 Move X2, [X25]
	080 Move X0, X19
	081 Move W1, W31
	082 Call List`1<Object>.get_Item, X0, X1
	083 Move W8, [X19+24]
	084 Move X22, X0
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move W23, 1
	087 Move X0, [X26]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move X0, X22
	093 Move X1, X21
	094 Move X2, X31
	095 Call Object.op_Equality, X0, X1
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfEqual {109}
	100 Move X2, [X25]
	101 Move X0, X19
	102 Move W1, W23
	103 Call List`1<Object>.get_Item, X0, X1
	104 Move X2, X0
	105 Move X0, X21
	106 Move X1, X22
	107 Call GameGenUtil.ccw, X0, X1, X2
	108 NotImplemented "Instruction FCMP not yet implemented."
	109 Move X2, [X25]
	110 Move X0, X19
	111 Move W1, W23
	112 Call List`1<Object>.get_Item, X0, X1
	113 Move X22, X0
	114 Move W8, [X19+24]
	115 Add W23, W23, 1
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move X2, [X25]
	118 Move X0, X20
	119 Move W1, W31
	120 Call List`1<Object>.get_Item, X0, X1
	121 Move X8, [X26]
	122 Move X21, X0
	123 Move W9, [X8+224]
	124 Compare W9, 0
	125 JumpIfNotEqual {128}
	126 Move X0, X8
	127 Call 0x1C17DFC
	128 Move X0, X22
	129 Move X1, X21
	130 Move X2, X31
	131 Call Object.op_Equality, X0, X1
	132 Move X21, X22
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {57}
	137 Move X0, X20
	138 Move X20, [X31+64]
	139 Move X19, [X31+72]
	140 Move X22, [X31+48]
	141 Move X21, [X31+56]
	142 Move X24, [X31+32]
	143 Move X23, [X31+40]
	144 Move X26, [X31+16]
	145 Move X25, [X31+24]
	146 Move X30, [X31+80]
	147 Return X0
	148 Call 0x1C17F20

Method: AnimalCompany.GameGen.Socket lowestXCoord(System.Collections.Generic.List`1<AnimalCompany.GameGen.Socket> array)

Disassembly:
	0x01E10D78 B 0x1E10D40
	0x01E10D7C LDR X1, [X20]
	0x01E10D80 ADD X0, X31, 0x8
	0x01E10D84 BL 0x2C0B1EC
	0x01E10D88 LDP X20, X19, [X31 + 0x40]
	0x01E10D8C LDP X22, X21, [X31 + 0x30]
	0x01E10D90 LDR X30, [X31 + 0x20]
	0x01E10D94 ADD X31, X31, 0x50
	0x01E10D98 RET
	0x01E10D9C BL 0x1C16F20
	0x01E10DA0 BL 0x1C16F20
	0x01E10DA4 B 0x1E10DAC
	0x01E10DA8 B 0x1E10DAC
	0x01E10DAC MOV X19, X0
	0x01E10DB0 CMP W1, 0x1
	0x01E10DB4 B.NE 0x1E10DE8
	0x01E10DB8 MOV X0, X19
	0x01E10DBC BL 0x3EB1AD0
	0x01E10DC0 LDR X20, [X0]
	0x01E10DC4 BL 0x3EB1AE0
	0x01E10DC8 ADRP X8, 0x22E9000
	0x01E10DCC LDR X8, [X8 + 0xEE8]
	0x01E10DD0 ADD X0, X31, 0x8
	0x01E10DD4 LDR X1, [X8]
	0x01E10DD8 BL 0x2C0B1EC
	0x01E10DDC CBZ X20, 0x1E10D88
	0x01E10DE0 MOV X0, X20
	0x01E10DE4 BL 0x1C16F18
	0x01E10DE8 MOV X20, X31
	0x01E10DEC B 0x1E10DF4
	0x01E10DF0 MOV X19, X0
	0x01E10DF4 ADRP X8, 0x22E9000
	0x01E10DF8 LDR X8, [X8 + 0xEE8]
	0x01E10DFC LDR X1, [X8]
	0x01E10E00 ADD X0, X31, 0x8
	0x01E10E04 BL 0x2C0B1EC
	0x01E10E08 CBNZ X20, 0x1E10E14
	0x01E10E0C MOV X0, X19
	0x01E10E10 BL 0x1D2C690
	0x01E10E14 MOV X0, X20
	0x01E10E18 BL 0x1C16F18
	0x01E10E1C BL 0x1990590
	0x01E10E20 STR D14, [X31 - 0xA0]!
	0x01E10E24 STP D13, D12, [X31 + 0x10]
	0x01E10E28 STP D11, D10, [X31 + 0x20]
	0x01E10E2C STP D9, D8, [X31 + 0x30]
	0x01E10E30 STP X29, X30, [X31 + 0x40]
	0x01E10E34 STP X28, X27, [X31 + 0x50]
	0x01E10E38 STP X26, X25, [X31 + 0x60]
	0x01E10E3C STP X24, X23, [X31 + 0x70]
	0x01E10E40 STP X22, X21, [X31 + 0x80]
	0x01E10E44 STP X20, X19, [X31 + 0x90]
	0x01E10E48 ADRP X20, 0x25C8000
	0x01E10E4C LDRB W8, [X20 + 0xDED]
	0x01E10E50 MOV X19, X0
	0x01E10E54 TBNZ X8, 0x0, 0x1E10EA8
	0x01E10E58 ADRP X0, 0x22E9000
	0x01E10E5C LDR X0, [X0 + 0xF08]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x25C9000
	008 Move X21, 0x22EA000
	009 Move W8, [X20+3554]
	010 Move X21, [X21+3584]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x22EA000
	017 Move X0, [X0+3592]
	018 Call 0x1C17CF4
	019 Move X0, 0x22EA000
	020 Move X0, [X0+2504]
	021 Call 0x1C17CF4
	022 Move X0, 0x22EA000
	023 Move X0, [X0+2512]
	024 Call 0x1C17CF4
	025 Move X0, 0x22EA000
	026 Move X0, [X0+3600]
	027 Call 0x1C17CF4
	028 Move X0, 0x22EA000
	029 Move X0, [X0+3584]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+3554], W8
	033 Move X0, [X21]
	034 Call 0x1C17F10
	035 Move X1, X31
	036 Move X20, X0
	037 Call Object..ctor, X0
	038 Compare X20, 0
	039 JumpIfEqual {69}
	040 Move X8, 0x22EA000
	041 Move X8, [X8+2512]
	042 Move [X20+16], X19
	043 Move X21, 0x22EA000
	044 Move X22, 0x22EA000
	045 Move X0, [X8]
	046 Move X23, 0x22EA000
	047 Move X21, [X21+3600]
	048 Move X22, [X22+2504]
	049 Move X23, [X23+3592]
	050 Call 0x1C17F10
	051 Move X2, [X21]
	052 Move X1, X20
	053 Move X3, X31
	054 Move X21, X0
	055 Call Func`2<Object, Boolean>..ctor, X0, X1, X2
	056 Move X2, [X22]
	057 Move X0, X19
	058 Move X1, X21
	059 Call Enumerable.Where, X0, X1
	060 Move X1, [X23]
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X22, [X31+16]
	064 Move X21, [X31+24]
	065 Move X30, [X31+48]
	066 Move X23, [X31+56]
	067 Call Enumerable.First, X0
	068 Return X0
	069 Call 0x1C17F20

Method: System.Single ccw(AnimalCompany.GameGen.Socket p1, AnimalCompany.GameGen.Socket p2, AnimalCompany.GameGen.Socket p3)

Disassembly:
	0x01E10E60 BL 0x1C16CF4
	0x01E10E64 ADRP X0, 0x22E9000
	0x01E10E68 LDR X0, [X0 + 0xF10]
	0x01E10E6C BL 0x1C16CF4
	0x01E10E70 ADRP X0, 0x22E9000
	0x01E10E74 LDR X0, [X0 + 0xF18]
	0x01E10E78 BL 0x1C16CF4
	0x01E10E7C ADRP X0, 0x22E9000
	0x01E10E80 LDR X0, [X0 + 0xF20]
	0x01E10E84 BL 0x1C16CF4
	0x01E10E88 ADRP X0, 0x22E9000
	0x01E10E8C LDR X0, [X0 + 0xF28]
	0x01E10E90 BL 0x1C16CF4
	0x01E10E94 ADRP X0, 0x22E3000
	0x01E10E98 LDR X0, [X0 + 0x598]
	0x01E10E9C BL 0x1C16CF4
	0x01E10EA0 MOVZ W8, 0x1
	0x01E10EA4 STRB W8, [X20 + 0xDED]
	0x01E10EA8 LDR X0, [X19 + 0x38]
	0x01E10EAC CBZ X0, 0x1E11168
	0x01E10EB0 ADRP X8, 0x22E9000
	0x01E10EB4 LDR X8, [X8 + 0xF08]
	0x01E10EB8 ADRP X19, 0x22E9000
	0x01E10EBC ADRP X20, 0x22E9000
	0x01E10EC0 MOVZ W1, 0x1
	0x01E10EC4 LDR X2, [X8]
	0x01E10EC8 LDR X19, [X19 + 0xF28]
	0x01E10ECC LDR X20, [X20 + 0xF20]
	0x01E10ED0 BL 0x21A45B8
	0x01E10ED4 LDR X8, [X19]
	0x01E10ED8 MOV X19, X0
	0x01E10EDC MOV X0, X8
	0x01E10EE0 BL 0x1C16F10
	0x01E10EE4 LDR X1, [X20]
	0x01E10EE8 MOV X20, X0
	0x01E10EEC BL 0x2DBDE08
	0x01E10EF0 CBZ X19, 0x1E11168
	0x01E10EF4 LDR X8, [X19 + 0x18]
	0x01E10EF8 CMP W8, 0x1
	0x01E10EFC B.LT 0x1E110D8
	0x01E10F00 ADRP X24, 0x22E3000
	0x01E10F04 ADRP X9, 0xFFFFFFFFFECDA000
	0x01E10F08 LDR X24, [X24 + 0x598]
	0x01E10F0C LDR V14, [X9 + 0x410]
	0x01E10F10 MOV X27, X31
	0x01E10F14 ADD X26, X19, 0x28
	0x01E10F18 MOVZ W29, 0x1
	0x01E10F1C ADD X9, X27, 0x1
	0x01E10F20 CMP W9, W8
	0x01E10F24 B.GE 0x1E110C4
	0x01E10F28 STR X9, [X31 + 0x8]
	0x01E10F2C ADD X9, X19, X27, 0x3, LSL
	0x01E10F30 MOV X28, X31
	0x01E10F34 ADD X21, X9, 0x20
	0x01E10F38 CMP X27, W8, UXTW
	0x01E10F3C B.CS 0x1E11164
	0x01E10F40 ADD X25, X29, X28
	0x01E10F44 CMP W8, W25
	0x01E10F48 B.LS 0x1E11164
	0x01E10F4C LDR X0, [X24]
	0x01E10F50 LDR X22, [X21]
	0x01E10F54 LDR X23, [X26, X28, LSL #3]
	0x01E10F58 LDR W8, [X0 + 0xE0]
	0x01E10F5C CBNZ W8, 0x1E10F64
	0x01E10F60 BL 0x1C16DFC
	0x01E10F64 MOV X0, X22
	0x01E10F68 MOV X1, X23
	0x01E10F6C MOV X2, X31
	0x01E10F70 BL 0x3C3883C
	0x01E10F74 TBNZ X0, 0x0, 0x1E110AC
	0x01E10F78 LDR X8, [X19 + 0x18]
	0x01E10F7C CMP X27, W8, UXTW
	0x01E10F80 B.CS 0x1E11164
	0x01E10F84 LDR X0, [X21]
	0x01E10F88 CBZ X0, 0x1E11168
	0x01E10F8C CMP W25, W8
	0x01E10F90 B.CS 0x1E11164
	0x01E10F94 LDR X8, [X26, X28, LSL #3]
	0x01E10F98 CBZ X8, 0x1E11168
	0x01E10F9C LDR W9, [X0 + 0x20]
	0x01E10FA0 LDR W8, [X8 + 0x20]
	0x01E10FA4 CMP W9, W8
	0x01E10FA8 B.NE 0x1E110AC
	0x01E10FAC MOV X1, X31
	0x01E10FB0 BL 0x3C32E90
	0x01E10FB4 CBZ X0, 0x1E11168

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Compare X1, 0
	013 JumpIfEqual {107}
	014 Move X20, X1
	015 Move X19, X0
	016 Move X0, X1
	017 Move X1, X31
	018 Move X21, X2
	019 Call Component.get_transform, X0
	020 Compare X0, 0
	021 JumpIfEqual {107}
	022 Move X1, X31
	023 Call Transform.get_position, X0
	024 Compare X19, 0
	025 JumpIfEqual {107}
	026 Move X0, X19
	027 Move X1, X31
	028 Move V8, V0
	029 Call Component.get_transform, X0
	030 Compare X0, 0
	031 JumpIfEqual {107}
	032 Move X1, X31
	033 Call Transform.get_position, X0
	034 Compare X21, 0
	035 JumpIfEqual {107}
	036 Move X0, X21
	037 Move X1, X31
	038 Move V9, V0
	039 Call Component.get_transform, X0
	040 Compare X0, 0
	041 JumpIfEqual {107}
	042 Move X1, X31
	043 Call Transform.get_position, X0
	044 Move X0, X19
	045 Move X1, X31
	046 Move V10, V2
	047 Call Component.get_transform, X0
	048 Compare X0, 0
	049 JumpIfEqual {107}
	050 Move X1, X31
	051 Call Transform.get_position, X0
	052 Move X0, X21
	053 Move X1, X31
	054 Move V11, V2
	055 Call Component.get_transform, X0
	056 Compare X0, 0
	057 JumpIfEqual {107}
	058 Move X1, X31
	059 Call Transform.get_position, X0
	060 Move X0, X19
	061 Move X1, X31
	062 Move V12, V0
	063 Call Component.get_transform, X0
	064 Compare X0, 0
	065 JumpIfEqual {107}
	066 Move X1, X31
	067 Call Transform.get_position, X0
	068 Move X0, X20
	069 Move X1, X31
	070 Move V13, V0
	071 Call Component.get_transform, X0
	072 Compare X0, 0
	073 JumpIfEqual {107}
	074 Move X1, X31
	075 Call Transform.get_position, X0
	076 Move X0, X19
	077 Move X1, X31
	078 Move V14, V2
	079 Call Component.get_transform, X0
	080 Compare X0, 0
	081 JumpIfEqual {107}
	082 Move X1, X31
	083 Call Transform.get_position, X0
	084 Subtract S0, S8, S9
	085 Subtract S1, S10, S11
	086 Subtract S3, S12, S13
	087 Subtract S2, S14, S2
	088 Multiply S0, S0, S1
	089 Multiply S1, S3, S2
	090 Move X20, [X31+80]
	091 Move X19, [X31+88]
	092 Move X30, [X31+64]
	093 Move X21, [X31+72]
	094 Move D9, [X31+48]
	095 Move D8, [X31+56]
	096 Move D11, [X31+32]
	097 Move D10, [X31+40]
	098 Move D13, [X31+16]
	099 Move D12, [X31+24]
	100 Subtract S0, S0, S1
	101 Move S4, -1
	102 NotImplemented "Instruction FCMP not yet implemented."
	103 Move S0, 1
	104 NotImplemented "Instruction FCSEL not yet implemented."
	105 Move V14, [X31+96]
	106 Return V0
	107 Call 0x1C17F20

