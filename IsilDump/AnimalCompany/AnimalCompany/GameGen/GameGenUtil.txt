Type: AnimalCompany.GameGen.GameGenUtil

Method: System.Collections.Generic.List`1<AnimalCompany.GameGen.Socket> GetOuterSockets(System.Collections.Generic.List`1<AnimalCompany.GameGen.Socket> points)

Disassembly:
	0x01CFD890 ADRP X23, 0x2250000
	0x01CFD894 LDR X22, [X22 + 0xC18]
	0x01CFD898 LDR X23, [X23 + 0x8B8]
	0x01CFD89C ADD X0, X31, 0xC
	0x01CFD8A0 MOV X1, X31
	0x01CFD8A4 BL 0x31E4D14
	0x01CFD8A8 LDR X8, [X22]
	0x01CFD8AC MOV X1, X0
	0x01CFD8B0 MOV X2, X31
	0x01CFD8B4 MOV X0, X8
	0x01CFD8B8 BL 0x3084780
	0x01CFD8BC LDR X8, [X23]
	0x01CFD8C0 MOV X22, X0
	0x01CFD8C4 LDR W9, [X8 + 0xE0]
	0x01CFD8C8 CBNZ W9, 0x1CFD8D4
	0x01CFD8CC MOV X0, X8
	0x01CFD8D0 BL 0x1B6E8F8
	0x01CFD8D4 MOV X0, X22
	0x01CFD8D8 MOV X1, X31
	0x01CFD8DC BL 0x3A6F5F8
	0x01CFD8E0 LDR W0, [X31 + 0xC]
	0x01CFD8E4 MOV X1, X31
	0x01CFD8E8 BL 0x3A98B98
	0x01CFD8EC MOV X0, X19
	0x01CFD8F0 BL 0x1CFD500
	0x01CFD8F4 TBZ X0, 0x0, 0x1CFD94C
	0x01CFD8F8 MOV X0, X19
	0x01CFD8FC BL 0x1CFDB40
	0x01CFD900 MOV X0, X19
	0x01CFD904 BL 0x1CFDE88
	0x01CFD908 MOV X0, X19
	0x01CFD90C BL 0x1CFE578
	0x01CFD910 MOV X0, X19
	0x01CFD914 BL 0x1CFE820
	0x01CFD918 MOV X0, X19
	0x01CFD91C BL 0x1CFEB80
	0x01CFD920 MOV X0, X19
	0x01CFD924 BL 0x1CFF264
	0x01CFD928 MOV X0, X19
	0x01CFD92C MOV W1, W21
	0x01CFD930 BL 0x1CFF590
	0x01CFD934 TBZ X20, 0x0, 0x1CFD95C
	0x01CFD938 MOV X0, X19
	0x01CFD93C BL 0x1CFFAB4
	0x01CFD940 MOV X0, X19
	0x01CFD944 BL 0x1D00A78
	0x01CFD948 B 0x1CFD97C
	0x01CFD94C MOV X0, X19
	0x01CFD950 BL 0x1CFD998
	0x01CFD954 MOV W0, W31
	0x01CFD958 B 0x1CFD980
	0x01CFD95C LDR X0, [X24]
	0x01CFD960 LDR X19, [X19 + 0x50]
	0x01CFD964 LDR W8, [X0 + 0xE0]
	0x01CFD968 CBNZ W8, 0x1CFD970
	0x01CFD96C BL 0x1B6E8F8
	0x01CFD970 MOV X0, X19
	0x01CFD974 MOV X1, X31
	0x01CFD978 BL 0x3AA15F4
	0x01CFD97C MOVZ W0, 0x1
	0x01CFD980 LDP X20, X19, [X31 + 0x40]
	0x01CFD984 LDP X22, X21, [X31 + 0x30]
	0x01CFD988 LDP X24, X23, [X31 + 0x20]
	0x01CFD98C LDP X26, X25, [X31 + 0x10]
	0x01CFD990 LDR X30, [X31], #0x50
	0x01CFD994 RET
	0x01CFD998 SUB X31, X31, 0x50
	0x01CFD99C STR X30, [X31 + 0x20]
	0x01CFD9A0 STP X22, X21, [X31 + 0x30]
	0x01CFD9A4 STP X20, X19, [X31 + 0x40]
	0x01CFD9A8 ADRP X20, 0x2526000
	0x01CFD9AC LDRB W8, [X20 + 0x726]
	0x01CFD9B0 MOV X19, X0
	0x01CFD9B4 TBNZ X8, 0x0, 0x1CFDA08
	0x01CFD9B8 ADRP X0, 0x2253000
	0x01CFD9BC LDR X0, [X0 + 0xC20]
	0x01CFD9C0 BL 0x1B6E7F0
	0x01CFD9C4 ADRP X0, 0x2253000
	0x01CFD9C8 LDR X0, [X0 + 0xC28]
	0x01CFD9CC BL 0x1B6E7F0
	0x01CFD9D0 ADRP X0, 0x2253000
	0x01CFD9D4 LDR X0, [X0 + 0xC30]
	0x01CFD9D8 BL 0x1B6E7F0
	0x01CFD9DC ADRP X0, 0x2253000
	0x01CFD9E0 LDR X0, [X0 + 0xC38]
	0x01CFD9E4 BL 0x1B6E7F0
	0x01CFD9E8 ADRP X0, 0x2250000
	0x01CFD9EC LDR X0, [X0 + 0x478]
	0x01CFD9F0 BL 0x1B6E7F0
	0x01CFD9F4 ADRP X0, 0x2253000
	0x01CFD9F8 LDR X0, [X0 + 0xC40]
	0x01CFD9FC BL 0x1B6E7F0
	0x01CFDA00 MOVZ W8, 0x1
	0x01CFDA04 STRB W8, [X20 + 0x726]
	0x01CFDA08 STP X31, X31, [X31 + 0x8]
	0x01CFDA0C STR X31, [X31 + 0x18]
	0x01CFDA10 LDR X8, [X19 + 0x28]
	0x01CFDA14 CBZ X8, 0x1CFDAC0
	0x01CFDA18 LDR X0, [X8 + 0x10]
	0x01CFDA1C CBZ X0, 0x1CFDAC0
	0x01CFDA20 ADRP X8, 0x2253000
	0x01CFDA24 LDR X8, [X8 + 0xC20]
	0x01CFDA28 LDR X1, [X8]
	0x01CFDA2C BL 0x28FA168
	0x01CFDA30 CBZ X0, 0x1CFDAC0
	0x01CFDA34 ADRP X8, 0x2253000
	0x01CFDA38 LDR X8, [X8 + 0xC40]
	0x01CFDA3C ADRP X21, 0x2253000
	0x01CFDA40 ADRP X22, 0x2250000
	0x01CFDA44 ADRP X20, 0x2253000
	0x01CFDA48 LDR X1, [X8]
	0x01CFDA4C LDR X21, [X21 + 0xC30]
	0x01CFDA50 LDR X22, [X22 + 0x478]
	0x01CFDA54 LDR X20, [X20 + 0xC28]
	0x01CFDA58 ADD X8, X31, 0x8
	0x01CFDA5C BL 0x25CA7B8
	0x01CFDA60 LDR X1, [X21]
	0x01CFDA64 ADD X0, X31, 0x8
	0x01CFDA68 BL 0x2A5AE8C
	0x01CFDA6C TBZ X0, 0x0, 0x1CFDA9C
	0x01CFDA70 LDR X8, [X31 + 0x18]
	0x01CFDA74 CBZ X8, 0x1CFDABC
	0x01CFDA78 LDR X0, [X22]
	0x01CFDA7C LDR X19, [X8 + 0x18]
	0x01CFDA80 LDR W9, [X0 + 0xE0]
	0x01CFDA84 CBNZ W9, 0x1CFDA8C
	0x01CFDA88 BL 0x1B6E8F8
	0x01CFDA8C MOV X0, X19
	0x01CFDA90 MOV X1, X31
	0x01CFDA94 BL 0x3AA16B0
	0x01CFDA98 B 0x1CFDA60

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x2527000
	011 Move X22, 0x2254000
	012 Move X20, 0x2254000
	013 Move W8, [X21+1820]
	014 Move X22, [X22+2040]
	015 Move X20, [X20+1992]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {41}
	021 Move X0, 0x2254000
	022 Move X0, [X0+1920]
	023 Call 0x1B6F7F0
	024 Move X0, 0x2254000
	025 Move X0, [X0+1992]
	026 Call 0x1B6F7F0
	027 Move X0, 0x2254000
	028 Move X0, [X0+2008]
	029 Call 0x1B6F7F0
	030 Move X0, 0x2254000
	031 Move X0, [X0+2016]
	032 Call 0x1B6F7F0
	033 Move X0, 0x2254000
	034 Move X0, [X0+2040]
	035 Call 0x1B6F7F0
	036 Move X0, 0x2251000
	037 Move X0, [X0+1144]
	038 Call 0x1B6F7F0
	039 Move W8, 1
	040 Move [X21+1820], W8
	041 Move X0, [X22]
	042 Call 0x1B6FA0C
	043 Move X1, [X20]
	044 Move X20, X0
	045 Call List`1<Object>..ctor, X0
	046 Move X0, X19
	047 Call GameGenUtil.lowestXCoord, X0
	048 Compare X20, 0
	049 JumpIfEqual {148}
	050 Move X24, 0x2254000
	051 Move X25, 0x2254000
	052 Move X26, 0x2251000
	053 Move X24, [X24+1920]
	054 Move X25, [X25+2016]
	055 Move X26, [X26+1144]
	056 Move X21, X0
	057 Move W10, [X20+28]
	058 Move X8, [X20+16]
	059 Move X9, [X24]
	060 Add W10, W10, 1
	061 Move [X20+28], W10
	062 Compare X8, 0
	063 JumpIfEqual {148}
	064 NotImplemented "Instruction LDRSW not yet implemented."
	065 Move W11, [X8+24]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add W9, W10, 1
	068 Add X8, X8, X10
	069 Move [X20+24], W9
	070 Move [X8+32], X21
	071 Move X8, [X9+32]
	072 Move X0, X20
	073 Move X1, X21
	074 Move X8, [X8+192]
	075 Move X2, [X8+112]
	076 Call List`1<Object>.AddWithResize, X0, X1
	077 Compare X19, 0
	078 JumpIfEqual {148}
	079 Move X2, [X25]
	080 Move X0, X19
	081 Move W1, W31
	082 Call List`1<Object>.get_Item, X0, X1
	083 Move W8, [X19+24]
	084 Move X22, X0
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move W23, 1
	087 Move X0, [X26]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1B6F8F8
	092 Move X0, X22
	093 Move X1, X21
	094 Move X2, X31
	095 Call Object.op_Equality, X0, X1
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfEqual {109}
	100 Move X2, [X25]
	101 Move X0, X19
	102 Move W1, W23
	103 Call List`1<Object>.get_Item, X0, X1
	104 Move X2, X0
	105 Move X0, X21
	106 Move X1, X22
	107 Call GameGenUtil.ccw, X0, X1, X2
	108 NotImplemented "Instruction FCMP not yet implemented."
	109 Move X2, [X25]
	110 Move X0, X19
	111 Move W1, W23
	112 Call List`1<Object>.get_Item, X0, X1
	113 Move X22, X0
	114 Move W8, [X19+24]
	115 Add W23, W23, 1
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move X2, [X25]
	118 Move X0, X20
	119 Move W1, W31
	120 Call List`1<Object>.get_Item, X0, X1
	121 Move X8, [X26]
	122 Move X21, X0
	123 Move W9, [X8+224]
	124 Compare W9, 0
	125 JumpIfNotEqual {128}
	126 Move X0, X8
	127 Call 0x1B6F8F8
	128 Move X0, X22
	129 Move X1, X21
	130 Move X2, X31
	131 Call Object.op_Equality, X0, X1
	132 Move X21, X22
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {57}
	137 Move X0, X20
	138 Move X20, [X31+64]
	139 Move X19, [X31+72]
	140 Move X22, [X31+48]
	141 Move X21, [X31+56]
	142 Move X24, [X31+32]
	143 Move X23, [X31+40]
	144 Move X26, [X31+16]
	145 Move X25, [X31+24]
	146 Move X30, [X31+80]
	147 Return X0
	148 Call 0x1B6FA1C

Method: AnimalCompany.GameGen.Socket lowestXCoord(System.Collections.Generic.List`1<AnimalCompany.GameGen.Socket> array)

Disassembly:
	0x01CFDA9C LDR X1, [X20]
	0x01CFDAA0 ADD X0, X31, 0x8
	0x01CFDAA4 BL 0x2A5AE88
	0x01CFDAA8 LDP X20, X19, [X31 + 0x40]
	0x01CFDAAC LDP X22, X21, [X31 + 0x30]
	0x01CFDAB0 LDR X30, [X31 + 0x20]
	0x01CFDAB4 ADD X31, X31, 0x50
	0x01CFDAB8 RET
	0x01CFDABC BL 0x1B6EA1C
	0x01CFDAC0 BL 0x1B6EA1C
	0x01CFDAC4 B 0x1CFDACC
	0x01CFDAC8 B 0x1CFDACC
	0x01CFDACC MOV X19, X0
	0x01CFDAD0 CMP W1, 0x1
	0x01CFDAD4 B.NE 0x1CFDB08
	0x01CFDAD8 MOV X0, X19
	0x01CFDADC BL 0x3D19840
	0x01CFDAE0 LDR X20, [X0]
	0x01CFDAE4 BL 0x3D19850
	0x01CFDAE8 ADRP X8, 0x2253000
	0x01CFDAEC LDR X8, [X8 + 0xC28]
	0x01CFDAF0 ADD X0, X31, 0x8
	0x01CFDAF4 LDR X1, [X8]
	0x01CFDAF8 BL 0x2A5AE88
	0x01CFDAFC CBZ X20, 0x1CFDAA8
	0x01CFDB00 MOV X0, X20
	0x01CFDB04 BL 0x1B6EA14
	0x01CFDB08 MOV X20, X31
	0x01CFDB0C B 0x1CFDB14
	0x01CFDB10 MOV X19, X0
	0x01CFDB14 ADRP X8, 0x2253000
	0x01CFDB18 LDR X8, [X8 + 0xC28]
	0x01CFDB1C LDR X1, [X8]
	0x01CFDB20 ADD X0, X31, 0x8
	0x01CFDB24 BL 0x2A5AE88
	0x01CFDB28 CBNZ X20, 0x1CFDB34
	0x01CFDB2C MOV X0, X19
	0x01CFDB30 BL 0x1C8418C
	0x01CFDB34 MOV X0, X20
	0x01CFDB38 BL 0x1B6EA14
	0x01CFDB3C BL 0x18F46A8
	0x01CFDB40 STR D14, [X31 - 0xA0]!
	0x01CFDB44 STP D13, D12, [X31 + 0x10]
	0x01CFDB48 STP D11, D10, [X31 + 0x20]
	0x01CFDB4C STP D9, D8, [X31 + 0x30]
	0x01CFDB50 STP X29, X30, [X31 + 0x40]
	0x01CFDB54 STP X28, X27, [X31 + 0x50]
	0x01CFDB58 STP X26, X25, [X31 + 0x60]
	0x01CFDB5C STP X24, X23, [X31 + 0x70]
	0x01CFDB60 STP X22, X21, [X31 + 0x80]
	0x01CFDB64 STP X20, X19, [X31 + 0x90]
	0x01CFDB68 ADRP X20, 0x2526000
	0x01CFDB6C LDRB W8, [X20 + 0x728]
	0x01CFDB70 MOV X19, X0
	0x01CFDB74 TBNZ X8, 0x0, 0x1CFDBC8
	0x01CFDB78 ADRP X0, 0x2253000
	0x01CFDB7C LDR X0, [X0 + 0xC48]
	0x01CFDB80 BL 0x1B6E7F0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x2527000
	008 Move X21, 0x2254000
	009 Move W8, [X20+1821]
	010 Move X21, [X21+2880]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x2254000
	017 Move X0, [X0+2888]
	018 Call 0x1B6F7F0
	019 Move X0, 0x2254000
	020 Move X0, [X0+2848]
	021 Call 0x1B6F7F0
	022 Move X0, 0x2254000
	023 Move X0, [X0+2856]
	024 Call 0x1B6F7F0
	025 Move X0, 0x2254000
	026 Move X0, [X0+2896]
	027 Call 0x1B6F7F0
	028 Move X0, 0x2254000
	029 Move X0, [X0+2880]
	030 Call 0x1B6F7F0
	031 Move W8, 1
	032 Move [X20+1821], W8
	033 Move X0, [X21]
	034 Call 0x1B6FA0C
	035 Move X1, X31
	036 Move X20, X0
	037 Call Object..ctor, X0
	038 Compare X20, 0
	039 JumpIfEqual {69}
	040 Move X8, 0x2254000
	041 Move X8, [X8+2856]
	042 Move [X20+16], X19
	043 Move X21, 0x2254000
	044 Move X22, 0x2254000
	045 Move X0, [X8]
	046 Move X23, 0x2254000
	047 Move X21, [X21+2896]
	048 Move X22, [X22+2848]
	049 Move X23, [X23+2888]
	050 Call 0x1B6FA0C
	051 Move X2, [X21]
	052 Move X1, X20
	053 Move X3, X31
	054 Move X21, X0
	055 Call Func`2<Object, Boolean>..ctor, X0, X1, X2
	056 Move X2, [X22]
	057 Move X0, X19
	058 Move X1, X21
	059 Call Enumerable.Where, X0, X1
	060 Move X1, [X23]
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X22, [X31+16]
	064 Move X21, [X31+24]
	065 Move X30, [X31+48]
	066 Move X23, [X31+56]
	067 Call Enumerable.First, X0
	068 Return X0
	069 Call 0x1B6FA1C

Method: System.Single ccw(AnimalCompany.GameGen.Socket p1, AnimalCompany.GameGen.Socket p2, AnimalCompany.GameGen.Socket p3)

Disassembly:
	0x01CFDB84 ADRP X0, 0x2253000
	0x01CFDB88 LDR X0, [X0 + 0xC50]
	0x01CFDB8C BL 0x1B6E7F0
	0x01CFDB90 ADRP X0, 0x2253000
	0x01CFDB94 LDR X0, [X0 + 0xC58]
	0x01CFDB98 BL 0x1B6E7F0
	0x01CFDB9C ADRP X0, 0x2253000
	0x01CFDBA0 LDR X0, [X0 + 0xC60]
	0x01CFDBA4 BL 0x1B6E7F0
	0x01CFDBA8 ADRP X0, 0x2253000
	0x01CFDBAC LDR X0, [X0 + 0xC68]
	0x01CFDBB0 BL 0x1B6E7F0
	0x01CFDBB4 ADRP X0, 0x2250000
	0x01CFDBB8 LDR X0, [X0 + 0x478]
	0x01CFDBBC BL 0x1B6E7F0
	0x01CFDBC0 MOVZ W8, 0x1
	0x01CFDBC4 STRB W8, [X20 + 0x728]
	0x01CFDBC8 LDR X0, [X19 + 0x38]
	0x01CFDBCC CBZ X0, 0x1CFDE84
	0x01CFDBD0 ADRP X8, 0x2253000
	0x01CFDBD4 LDR X8, [X8 + 0xC48]
	0x01CFDBD8 ADRP X19, 0x2253000
	0x01CFDBDC ADRP X20, 0x2253000
	0x01CFDBE0 MOVZ W1, 0x1
	0x01CFDBE4 LDR X2, [X8]
	0x01CFDBE8 LDR X19, [X19 + 0xC68]
	0x01CFDBEC LDR X20, [X20 + 0xC60]
	0x01CFDBF0 BL 0x2090B0C
	0x01CFDBF4 LDR X8, [X19]
	0x01CFDBF8 MOV X19, X0
	0x01CFDBFC MOV X0, X8
	0x01CFDC00 BL 0x1B6EA0C
	0x01CFDC04 LDR X1, [X20]
	0x01CFDC08 MOV X20, X0
	0x01CFDC0C BL 0x2BD32D4
	0x01CFDC10 CBZ X19, 0x1CFDE84
	0x01CFDC14 LDR X8, [X19 + 0x18]
	0x01CFDC18 CMP W8, 0x1
	0x01CFDC1C B.LT 0x1CFDDF8
	0x01CFDC20 ADRP X24, 0x2250000
	0x01CFDC24 ADRP X9, 0xFFFFFFFFFEDAC000
	0x01CFDC28 LDR X24, [X24 + 0x478]
	0x01CFDC2C LDR V14, [X9 + 0xDE4]
	0x01CFDC30 MOV X27, X31
	0x01CFDC34 ADD X26, X19, 0x28
	0x01CFDC38 MOVZ W29, 0x1
	0x01CFDC3C ADD X9, X27, 0x1
	0x01CFDC40 CMP W9, W8
	0x01CFDC44 B.GE 0x1CFDDE4
	0x01CFDC48 STR X9, [X31 + 0x8]
	0x01CFDC4C ADD X9, X19, X27, 0x3, LSL
	0x01CFDC50 MOV X28, X31
	0x01CFDC54 ADD X21, X9, 0x20
	0x01CFDC58 CMP X27, W8, UXTW
	0x01CFDC5C B.CS 0x1CFDE80
	0x01CFDC60 ADD X25, X29, X28
	0x01CFDC64 CMP W8, W25
	0x01CFDC68 B.LS 0x1CFDE80
	0x01CFDC6C LDR X0, [X24]
	0x01CFDC70 LDR X22, [X21]
	0x01CFDC74 LDR X23, [X26, X28, LSL #3]
	0x01CFDC78 LDR W8, [X0 + 0xE0]
	0x01CFDC7C CBNZ W8, 0x1CFDC84
	0x01CFDC80 BL 0x1B6E8F8
	0x01CFDC84 MOV X0, X22
	0x01CFDC88 MOV X1, X23
	0x01CFDC8C MOV X2, X31
	0x01CFDC90 BL 0x3AA0AF0
	0x01CFDC94 TBNZ X0, 0x0, 0x1CFDDCC
	0x01CFDC98 LDR X8, [X19 + 0x18]
	0x01CFDC9C CMP X27, W8, UXTW
	0x01CFDCA0 B.CS 0x1CFDE80
	0x01CFDCA4 LDR X0, [X21]
	0x01CFDCA8 CBZ X0, 0x1CFDE84
	0x01CFDCAC CMP W25, W8
	0x01CFDCB0 B.CS 0x1CFDE80
	0x01CFDCB4 LDR X8, [X26, X28, LSL #3]
	0x01CFDCB8 CBZ X8, 0x1CFDE84
	0x01CFDCBC LDR W9, [X0 + 0x20]
	0x01CFDCC0 LDR W8, [X8 + 0x20]
	0x01CFDCC4 CMP W9, W8
	0x01CFDCC8 B.NE 0x1CFDDCC
	0x01CFDCCC MOV X1, X31
	0x01CFDCD0 BL 0x3A9B084
	0x01CFDCD4 CBZ X0, 0x1CFDE84
	0x01CFDCD8 MOV X1, X31

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Compare X1, 0
	013 JumpIfEqual {107}
	014 Move X20, X1
	015 Move X19, X0
	016 Move X0, X1
	017 Move X1, X31
	018 Move X21, X2
	019 Call Component.get_transform, X0
	020 Compare X0, 0
	021 JumpIfEqual {107}
	022 Move X1, X31
	023 Call Transform.get_position, X0
	024 Compare X19, 0
	025 JumpIfEqual {107}
	026 Move X0, X19
	027 Move X1, X31
	028 Move V8, V0
	029 Call Component.get_transform, X0
	030 Compare X0, 0
	031 JumpIfEqual {107}
	032 Move X1, X31
	033 Call Transform.get_position, X0
	034 Compare X21, 0
	035 JumpIfEqual {107}
	036 Move X0, X21
	037 Move X1, X31
	038 Move V9, V0
	039 Call Component.get_transform, X0
	040 Compare X0, 0
	041 JumpIfEqual {107}
	042 Move X1, X31
	043 Call Transform.get_position, X0
	044 Move X0, X19
	045 Move X1, X31
	046 Move V10, V2
	047 Call Component.get_transform, X0
	048 Compare X0, 0
	049 JumpIfEqual {107}
	050 Move X1, X31
	051 Call Transform.get_position, X0
	052 Move X0, X21
	053 Move X1, X31
	054 Move V11, V2
	055 Call Component.get_transform, X0
	056 Compare X0, 0
	057 JumpIfEqual {107}
	058 Move X1, X31
	059 Call Transform.get_position, X0
	060 Move X0, X19
	061 Move X1, X31
	062 Move V12, V0
	063 Call Component.get_transform, X0
	064 Compare X0, 0
	065 JumpIfEqual {107}
	066 Move X1, X31
	067 Call Transform.get_position, X0
	068 Move X0, X20
	069 Move X1, X31
	070 Move V13, V0
	071 Call Component.get_transform, X0
	072 Compare X0, 0
	073 JumpIfEqual {107}
	074 Move X1, X31
	075 Call Transform.get_position, X0
	076 Move X0, X19
	077 Move X1, X31
	078 Move V14, V2
	079 Call Component.get_transform, X0
	080 Compare X0, 0
	081 JumpIfEqual {107}
	082 Move X1, X31
	083 Call Transform.get_position, X0
	084 Subtract S0, S8, S9
	085 Subtract S1, S10, S11
	086 Subtract S3, S12, S13
	087 Subtract S2, S14, S2
	088 Multiply S0, S0, S1
	089 Multiply S1, S3, S2
	090 Move X20, [X31+80]
	091 Move X19, [X31+88]
	092 Move X30, [X31+64]
	093 Move X21, [X31+72]
	094 Move D9, [X31+48]
	095 Move D8, [X31+56]
	096 Move D11, [X31+32]
	097 Move D10, [X31+40]
	098 Move D13, [X31+16]
	099 Move D12, [X31+24]
	100 Subtract S0, S0, S1
	101 Move S4, -1
	102 NotImplemented "Instruction FCMP not yet implemented."
	103 Move S0, 1
	104 NotImplemented "Instruction FCSEL not yet implemented."
	105 Move V14, [X31+96]
	106 Return V0
	107 Call 0x1B6FA1C

