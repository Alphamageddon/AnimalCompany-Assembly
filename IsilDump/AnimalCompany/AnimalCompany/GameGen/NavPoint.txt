Type: AnimalCompany.GameGen.NavPoint

Method: System.Void OnEnable()

Disassembly:
	0x01E0E608 BL 0x3C32E90
	0x01E0E60C LDR X8, [X22]
	0x01E0E610 CBZ X8, 0x1E0E828
	0x01E0E614 MOV X20, X0
	0x01E0E618 LDR X0, [X8 + 0x68]
	0x01E0E61C CBZ X0, 0x1E0E828
	0x01E0E620 MOV X1, X31
	0x01E0E624 BL 0x3C32E90
	0x01E0E628 CBZ X0, 0x1E0E828
	0x01E0E62C MOV X1, X31
	0x01E0E630 BL 0x3C3F58C
	0x01E0E634 CBZ X20, 0x1E0E828

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Component.get_transform, X0
	006 Compare X0, 0
	007 JumpIfEqual {16}
	008 Move X1, X31
	009 Call Transform.get_position, X0
	010 Move [X19+40], S0
	011 Move [X19+48], S1
	012 Move [X19+48], S2
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return 
	016 Call 0x1C17F20

Method: UnityEngine.Vector3 GetSpawnPosition()

Disassembly:
	0x01E0E638 MOV X0, X20
	0x01E0E63C MOV X1, X31
	0x01E0E640 BL 0x3C40B58
	0x01E0E644 LDR X0, [X22]
	0x01E0E648 CBZ X0, 0x1E0E828
	0x01E0E64C MOV X1, X31
	0x01E0E650 MOV V8.16B, V0.16B
	0x01E0E654 MOV V9.16B, V1.16B
	0x01E0E658 MOV V10.16B, V2.16B
	0x01E0E65C BL 0x3C32E90
	0x01E0E660 CBZ X0, 0x1E0E828
	0x01E0E664 MOV X1, X31
	0x01E0E668 BL 0x3C3DEB4
	0x01E0E66C MOV X0, X31
	0x01E0E670 BL 0x3C2A260
	0x01E0E674 LDR X8, [X22]
	0x01E0E678 CBZ X8, 0x1E0E828
	0x01E0E67C LDR X0, [X8 + 0x68]
	0x01E0E680 CBZ X0, 0x1E0E828
	0x01E0E684 MOV X1, X31
	0x01E0E688 MOV V14.16B, V0.16B
	0x01E0E68C MOV V13.16B, V1.16B
	0x01E0E690 MOV V12.16B, V2.16B
	0x01E0E694 MOV V15.16B, V3.16B
	0x01E0E698 STP S10, S9, [X31 + 0x18]
	0x01E0E69C STR S8, [X31 + 0x1E8]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move X0, X31
	008 Call Random.get_insideUnitSphere
	009 Move V10, [X19+36]
	010 Move X0, X19
	011 Move X1, X31
	012 Move V8, V0
	013 Move V9, V2
	014 Call Component.get_transform, X0
	015 Compare X0, 0
	016 JumpIfEqual {31}
	017 Move X1, X31
	018 Multiply S9, S9, S10
	019 Multiply S8, S8, S10
	020 Call Transform.get_position, X0
	021 Add S0, S8, S0
	022 Add S2, S9, S2
	023 Move X30, [X31+32]
	024 Move X19, [X31+40]
	025 Move D9, [X31+16]
	026 Move D8, [X31+24]
	027 Move S3, W31
	028 Add S1, S1, S3
	029 Move V10, [X31+48]
	030 Return X0
	031 Call 0x1C17F20

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01E0E6A0 BL 0x3C32E90
	0x01E0E6A4 CBZ X0, 0x1E0E828
	0x01E0E6A8 MOV X1, X31
	0x01E0E6AC BL 0x3C3DEB4
	0x01E0E6B0 MOV X0, X19
	0x01E0E6B4 MOV X1, X31
	0x01E0E6B8 MOV V10.16B, V0.16B
	0x01E0E6BC MOV V9.16B, V1.16B
	0x01E0E6C0 MOV V8.16B, V2.16B
	0x01E0E6C4 MOV V11.16B, V3.16B
	0x01E0E6C8 BL 0x3C32E90
	0x01E0E6CC CBZ X0, 0x1E0E828
	0x01E0E6D0 FMUL S0, S15, S10
	0x01E0E6D4 FMUL S1, S14, S11
	0x01E0E6D8 FMUL S4, S15, S9
	0x01E0E6DC FMUL S5, S13, S11
	0x01E0E6E0 FMUL S17, S14, S10
	0x01E0E6E4 FMUL S20, S15, S8
	0x01E0E6E8 FMUL S21, S15, S11
	0x01E0E6EC FMUL S22, S12, S11
	0x01E0E6F0 FMUL S2, S13, S8
	0x01E0E6F4 FMUL S6, S12, S10
	0x01E0E6F8 FMUL S16, S14, S9
	0x01E0E6FC FMUL S19, S13, S9
	0x01E0E700 FADD S0, S0, S1
	0x01E0E704 FADD S1, S4, S5
	0x01E0E708 FADD S4, S20, S22
	0x01E0E70C FSUB S5, S21, S17
	0x01E0E710 FMUL S3, S12, S9
	0x01E0E714 FMUL S7, S14, S8
	0x01E0E718 FMUL S18, S13, S10
	0x01E0E71C FMUL S23, S12, S8
	0x01E0E720 FADD S0, S2, S0
	0x01E0E724 FADD S1, S6, S1
	0x01E0E728 FADD S2, S16, S4
	0x01E0E72C FSUB S4, S5, S19
	0x01E0E730 MOV X1, X31
	0x01E0E734 FSUB S15, S0, S3
	0x01E0E738 FSUB S14, S1, S7
	0x01E0E73C FSUB S13, S2, S18
	0x01E0E740 FSUB S12, S4, S23
	0x01E0E744 BL 0x3C3F58C
	0x01E0E748 LDR V3, [X31 + 0x1E8]
	0x01E0E74C ADRP X19, 0x25CA000
	0x01E0E750 LDRB W8, [X19 + 0x85B]
	0x01E0E754 FADD S10, S3, S0
	0x01E0E758 LDR V0, [X31 + 0x1C]
	0x01E0E75C FADD S9, S0, S1
	0x01E0E760 LDR V0, [X31 + 0x18]
	0x01E0E764 FADD S8, S0, S2
	0x01E0E768 CBNZ W8, 0x1E0E780
	0x01E0E76C ADRP X0, 0x22E5000
	0x01E0E770 LDR X0, [X0 + 0x5A0]
	0x01E0E774 BL 0x1C16CF4
	0x01E0E778 MOVZ W8, 0x1
	0x01E0E77C STRB W8, [X19 + 0x85B]
	0x01E0E780 ADRP X8, 0x22E5000
	0x01E0E784 LDR X8, [X8 + 0x5A0]
	0x01E0E788 MOV V1.16B, V9.16B
	0x01E0E78C MOV V2.16B, V8.16B
	0x01E0E790 MOV V3.16B, V15.16B
	0x01E0E794 LDR X8, [X8]
	0x01E0E798 MOV V4.16B, V14.16B
	0x01E0E79C MOV V5.16B, V13.16B
	0x01E0E7A0 MOV V6.16B, V12.16B
	0x01E0E7A4 LDR X8, [X8 + 0xB8]
	0x01E0E7A8 MOV X0, X31
	0x01E0E7AC LDR V0, [X8 + 0x14]
	0x01E0E7B0 LDUR X9, [X8 + 0xC]
	0x01E0E7B4 ADD X8, X31, 0x160
	0x01E0E7B8 STR S0, [X31 + 0x8]
	0x01E0E7BC MOV V0.16B, V10.16B
	0x01E0E7C0 STR X9, [X31]
	0x01E0E7C4 BL 0x3C26FA8
	0x01E0E7C8 LDP V0, V1, [X31 + 0x160]
	0x01E0E7CC LDP V2, V3, [X31 + 0x180]
	0x01E0E7D0 ADD X0, X31, 0x20
	0x01E0E7D4 MOV X1, X31
	0x01E0E7D8 STP V0, V1, [X31 + 0x20]
	0x01E0E7DC STP V2, V3, [X31 + 0x40]
	0x01E0E7E0 BL 0x3C0D150
	0x01E0E7E4 LDR X8, [X22]
	0x01E0E7E8 CBZ X8, 0x1E0E828
	0x01E0E7EC LDR X0, [X8 + 0x68]
	0x01E0E7F0 LDR V0, [X31 + 0x1EC]
	0x01E0E7F4 CMP W21, 0x0
	0x01E0E7F8 CSET W1, EQ
	0x01E0E7FC BL 0x1E0E82C
	0x01E0E800 ADD X31, X31, 0x1A0
	0x01E0E804 LDP X20, X19, [X31 + 0x70]
	0x01E0E808 LDP X22, X21, [X31 + 0x60]
	0x01E0E80C LDP X30, X23, [X31 + 0x50]
	0x01E0E810 LDR X29, [X31 + 0x40]
	0x01E0E814 LDP D9, D8, [X31 + 0x30]
	0x01E0E818 LDP D11, D10, [X31 + 0x20]
	0x01E0E81C LDP D13, D12, [X31 + 0x10]
	0x01E0E820 LDP D15, D14, [X31], #0x80

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X8, -20070400
	011 Move X9, -20066304
	012 Move V1, [X8+3984]
	013 Move V2, [X9+48]
	014 Move X19, X0
	015 Move S0, 1
	016 Move S3, 1
	017 Move X0, X31
	018 Call Gizmos.set_color, X0
	019 Move X0, X31
	020 Call Gizmos.get_color
	021 Move X0, X31
	022 Move V8, V0
	023 Call Gizmos.get_color
	024 Move X0, X31
	025 Move V9, V1
	026 Call Gizmos.get_color
	027 Move X8, -20066304
	028 Move V3, [X8+188]
	029 Move V0, V8
	030 Move V1, V9
	031 Move X0, X31
	032 Call Gizmos.set_color, X0
	033 Move X0, X19
	034 Move X1, X31
	035 Call Component.get_transform, X0
	036 Compare X0, 0
	037 JumpIfEqual {111}
	038 Move X1, X31
	039 Call Transform.get_position, X0
	040 Move X0, X19
	041 Move X1, X31
	042 Move V8, V0
	043 Move V9, V1
	044 Move V10, V2
	045 Call Component.get_transform, X0
	046 Compare X0, 0
	047 JumpIfEqual {111}
	048 Move X1, X31
	049 Call Transform.get_position, X0
	050 Move X20, 0x25CB000
	051 Move W8, [X20+1926]
	052 Move V11, V0
	053 Move V12, V1
	054 Move V13, V2
	055 Compare W8, 0
	056 JumpIfNotEqual {62}
	057 Move X0, 0x22E6000
	058 Move X0, [X0+1440]
	059 Call 0x1C17CF4
	060 Move W8, 1
	061 Move [X20+1926], W8
	062 Move X8, 0x22E6000
	063 Move X8, [X8+1440]
	064 Move X0, X31
	065 Move X8, [X8]
	066 Move X8, [X8+184]
	067 Move S0, [X8+24]
	068 Move S1, [X8+28]
	069 Move V2, [X8+32]
	070 Add S3, S11, S0
	071 Add S4, S12, S1
	072 Add S5, S13, S2
	073 Move V0, V8
	074 Move V1, V9
	075 Move V2, V10
	076 Call Gizmos.DrawLine, X0, X1
	077 Move X0, X31
	078 Call Gizmos.get_color
	079 Move X0, X31
	080 Move V8, V0
	081 Call Gizmos.get_color
	082 Move X0, X31
	083 Move V9, V1
	084 Call Gizmos.get_color
	085 Move X8, -20070400
	086 Move V3, [X8+4024]
	087 Move V0, V8
	088 Move V1, V9
	089 Move X0, X31
	090 Call Gizmos.set_color, X0
	091 Move X0, X19
	092 Move X1, X31
	093 Call Component.get_transform, X0
	094 Compare X0, 0
	095 JumpIfEqual {111}
	096 Move X1, X31
	097 Call Transform.get_position, X0
	098 Move V3, [X19+36]
	099 Move X20, [X31+64]
	100 Move X19, [X31+72]
	101 Move X30, [X31+48]
	102 Move D9, [X31+32]
	103 Move D8, [X31+40]
	104 Move D11, [X31+16]
	105 Move D10, [X31+24]
	106 Move X0, X31
	107 Move D13, [X31+80]
	108 Move D12, [X31+88]
	109 Call Gizmos.DrawWireSphere, X0, V0
	110 Return 
	111 Call 0x1C17F20

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x01E0E824 RET
	0x01E0E828 BL 0x1C16F20
	0x01E0E82C STP D13, D12, [X31 - 0x40]!
	0x01E0E830 STP D11, D10, [X31 + 0x10]
	0x01E0E834 STP D9, D8, [X31 + 0x20]
	0x01E0E838 STP X30, X19, [X31 + 0x30]
	0x01E0E83C CBZ X0, 0x1E0EA00
	0x01E0E840 LDR W0, [X0 + 0x20]
	0x01E0E844 MOV W19, W1
	0x01E0E848 MOV X1, X31
	0x01E0E84C MOV V11.16B, V0.16B
	0x01E0E850 BL 0x1E15EE0
	0x01E0E854 FCMP S0, S1
	0x01E0E858 MOV V10.16B, V0.16B
	0x01E0E85C MOV V8.16B, V1.16B
	0x01E0E860 FCSEL S0, S0, S1, MI
	0x01E0E864 FMOV S1, 0.25
	0x01E0E868 MOV X0, X31
	0x01E0E86C FMUL S9, S0, S1
	0x01E0E870 BL 0x3C0CFAC
	0x01E0E874 MOV X0, X31
	0x01E0E878 MOV V12.16B, V0.16B
	0x01E0E87C BL 0x3C0CFAC
	0x01E0E880 MOV X0, X31
	0x01E0E884 MOV V13.16B, V1.16B
	0x01E0E888 BL 0x3C0CFAC
	0x01E0E88C MOV V0.16B, V12.16B
	0x01E0E890 MOV V1.16B, V13.16B
	0x01E0E894 MOV V3.16B, V11.16B
	0x01E0E898 MOV X0, X31
	0x01E0E89C BL 0x3C0D030
	0x01E0E8A0 TBZ X19, 0x0, 0x1E0E8CC
	0x01E0E8A4 FMOV S0, 0.5
	0x01E0E8A8 FMUL S1, S8, S0
	0x01E0E8AC FMOV S0, W31
	0x01E0E8B0 FMOV S2, W31
	0x01E0E8B4 FMOV S5, W31
	0x01E0E8B8 MOV V3.16B, V10.16B
	0x01E0E8BC MOV V4.16B, V8.16B
	0x01E0E8C0 MOV X0, X31
	0x01E0E8C4 BL 0x3C0CCD8
	0x01E0E8C8 B 0x1E0E92C
	0x01E0E8CC MOV X0, X31
	0x01E0E8D0 BL 0x3C0CFAC
	0x01E0E8D4 MOV X0, X31
	0x01E0E8D8 MOV V12.16B, V0.16B
	0x01E0E8DC BL 0x3C0CFAC
	0x01E0E8E0 MOV X0, X31
	0x01E0E8E4 MOV V13.16B, V1.16B
	0x01E0E8E8 BL 0x3C0CFAC
	0x01E0E8EC ADRP X8, 0xFFFFFFFFFECDB000
	0x01E0E8F0 LDR V0, [X8 + 0xFB8]
	0x01E0E8F4 MOV V1.16B, V13.16B
	0x01E0E8F8 MOV X0, X31
	0x01E0E8FC FMUL S3, S11, S0
	0x01E0E900 MOV V0.16B, V12.16B
	0x01E0E904 BL 0x3C0D030
	0x01E0E908 FMOV S0, 0.5
	0x01E0E90C FMUL S1, S8, S0
	0x01E0E910 FMOV S0, W31
	0x01E0E914 FMOV S2, W31
	0x01E0E918 FMOV S5, W31
	0x01E0E91C MOV V3.16B, V10.16B
	0x01E0E920 MOV V4.16B, V8.16B
	0x01E0E924 MOV X0, X31
	0x01E0E928 BL 0x3C0CD6C
	0x01E0E92C MOV X0, X31
	0x01E0E930 BL 0x3C0CFAC
	0x01E0E934 MOV X0, X31
	0x01E0E938 MOV V12.16B, V0.16B
	0x01E0E93C BL 0x3C0CFAC
	0x01E0E940 MOV X0, X31
	0x01E0E944 MOV V13.16B, V1.16B
	0x01E0E948 BL 0x3C0CFAC
	0x01E0E94C MOV V0.16B, V12.16B
	0x01E0E950 MOV V1.16B, V13.16B
	0x01E0E954 MOV V3.16B, V11.16B
	0x01E0E958 MOV X0, X31
	0x01E0E95C BL 0x3C0D030
	0x01E0E960 FMOV S0, 0.5
	0x01E0E964 FMUL S11, S10, S0
	0x01E0E968 FMOV S1, W31
	0x01E0E96C FMOV S2, W31
	0x01E0E970 FMOV S4, W31
	0x01E0E974 MOV V0.16B, V11.16B
	0x01E0E978 MOV V3.16B, V11.16B
	0x01E0E97C MOV V5.16B, V9.16B
	0x01E0E980 MOV X0, X31
	0x01E0E984 BL 0x3C0CB04
	0x01E0E988 FMOV S0, -0.5
	0x01E0E98C FMUL S10, S10, S0
	0x01E0E990 FMOV S1, W31
	0x01E0E994 FMOV S2, W31

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X8, -20070400
	011 Move X9, -20066304
	012 Move V1, [X8+3984]
	013 Move V2, [X9+48]
	014 Move X19, X0
	015 Move S0, 1
	016 Move S3, 1
	017 Move X0, X31
	018 Call Gizmos.set_color, X0
	019 Move X0, X31
	020 Call Gizmos.get_color
	021 Move X0, X31
	022 Move V8, V0
	023 Call Gizmos.get_color
	024 Move X0, X31
	025 Move V9, V1
	026 Call Gizmos.get_color
	027 Move S3, 1
	028 Move V0, V8
	029 Move V1, V9
	030 Move X0, X31
	031 Call Gizmos.set_color, X0
	032 Move X0, X19
	033 Move X1, X31
	034 Call Component.get_transform, X0
	035 Compare X0, 0
	036 JumpIfEqual {107}
	037 Move X1, X31
	038 Call Transform.get_position, X0
	039 Move X0, X19
	040 Move X1, X31
	041 Move V8, V0
	042 Move V9, V1
	043 Move V10, V2
	044 Call Component.get_transform, X0
	045 Compare X0, 0
	046 JumpIfEqual {107}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X20, 0x25CB000
	050 Move W8, [X20+1926]
	051 Move V11, V0
	052 Move V12, V1
	053 Move V13, V2
	054 Compare W8, 0
	055 JumpIfNotEqual {61}
	056 Move X0, 0x22E6000
	057 Move X0, [X0+1440]
	058 Call 0x1C17CF4
	059 Move W8, 1
	060 Move [X20+1926], W8
	061 Move X8, 0x22E6000
	062 Move X8, [X8+1440]
	063 Move X0, X31
	064 Move X8, [X8]
	065 Move X8, [X8+184]
	066 Move S0, [X8+24]
	067 Move S1, [X8+28]
	068 Move V2, [X8+32]
	069 Add S3, S11, S0
	070 Add S4, S12, S1
	071 Add S5, S13, S2
	072 Move V0, V8
	073 Move V1, V9
	074 Move V2, V10
	075 Call Gizmos.DrawLine, X0, X1
	076 Move W8, [X19+32]
	077 Move S1, W31
	078 Move S2, 1
	079 Move S3, 1
	080 NotImplemented "Instruction CMP not yet implemented."
	081 NotImplemented "Instruction FCSEL not yet implemented."
	082 NotImplemented "Instruction FCSEL not yet implemented."
	083 Move S2, W31
	084 Move X0, X31
	085 Call Gizmos.set_color, X0
	086 Move X0, X19
	087 Move X1, X31
	088 Call Component.get_transform, X0
	089 Compare X0, 0
	090 JumpIfEqual {107}
	091 Move X1, X31
	092 Call Transform.get_position, X0
	093 Move X8, -20066304
	094 Move V3, [X8+188]
	095 Move X20, [X31+64]
	096 Move X19, [X31+72]
	097 Move X30, [X31+48]
	098 Move D9, [X31+32]
	099 Move D8, [X31+40]
	100 Move D11, [X31+16]
	101 Move D10, [X31+24]
	102 Move X0, X31
	103 Move D13, [X31+80]
	104 Move D12, [X31+88]
	105 Call Gizmos.DrawSphere, X0, V0
	106 Return 
	107 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01E0E998 FMOV S4, W31
	0x01E0E99C MOV V0.16B, V10.16B
	0x01E0E9A0 MOV V3.16B, V10.16B
	0x01E0E9A4 MOV V5.16B, V9.16B
	0x01E0E9A8 MOV X0, X31
	0x01E0E9AC BL 0x3C0CB04

ISIL:
	001 Move W8, 1
	002 Move W9, 0x3F400000
	003 Move X1, X31
	004 Move [X0+32], W8
	005 Move [X0+36], W9
	006 Call MonoBehaviour..ctor, X0
	007 Return 

