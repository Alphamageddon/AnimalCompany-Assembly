Type: AnimalCompany.GameGen.NavPoint

Method: System.Void OnEnable()

Disassembly:
	0x01CFB038 CBZ X0, 0x1CFB3F4
	0x01CFB03C FMUL S0, S15, S10
	0x01CFB040 FMUL S1, S14, S11
	0x01CFB044 FMUL S4, S15, S9
	0x01CFB048 FMUL S5, S13, S11
	0x01CFB04C FMUL S17, S14, S10
	0x01CFB050 FMUL S20, S15, S8
	0x01CFB054 FMUL S21, S15, S11
	0x01CFB058 FMUL S22, S12, S11
	0x01CFB05C FMUL S2, S13, S8
	0x01CFB060 FMUL S6, S12, S10
	0x01CFB064 FMUL S16, S14, S9

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Component.get_transform, X0
	006 Compare X0, 0
	007 JumpIfEqual {16}
	008 Move X1, X31
	009 Call Transform.get_position, X0
	010 Move [X19+40], S0
	011 Move [X19+48], S1
	012 Move [X19+48], S2
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return 
	016 Call 0x1B6FA1C

Method: UnityEngine.Vector3 GetSpawnPosition()

Disassembly:
	0x01CFB068 FMUL S19, S13, S9
	0x01CFB06C FADD S0, S0, S1
	0x01CFB070 FADD S1, S4, S5
	0x01CFB074 FADD S4, S20, S22
	0x01CFB078 FSUB S5, S21, S17
	0x01CFB07C FMUL S3, S12, S9
	0x01CFB080 FMUL S7, S14, S8
	0x01CFB084 FMUL S18, S13, S10
	0x01CFB088 FMUL S23, S12, S8
	0x01CFB08C FADD S0, S2, S0
	0x01CFB090 FADD S1, S6, S1
	0x01CFB094 FADD S2, S16, S4
	0x01CFB098 FSUB S4, S5, S19
	0x01CFB09C MOV X1, X31
	0x01CFB0A0 FSUB S15, S0, S3
	0x01CFB0A4 FSUB S14, S1, S7
	0x01CFB0A8 FSUB S13, S2, S18
	0x01CFB0AC FSUB S12, S4, S23
	0x01CFB0B0 BL 0x3AA7658
	0x01CFB0B4 LDR V3, [X31 + 0x1E8]
	0x01CFB0B8 ADRP X20, 0x2528000
	0x01CFB0BC LDRB W8, [X20 + 0x456]
	0x01CFB0C0 FADD S10, S3, S0
	0x01CFB0C4 LDR V0, [X31 + 0x1C]
	0x01CFB0C8 FADD S9, S0, S1
	0x01CFB0CC LDR V0, [X31 + 0x18]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move X0, X31
	008 Call Random.get_insideUnitSphere
	009 Move V10, [X19+36]
	010 Move X0, X19
	011 Move X1, X31
	012 Move V8, V0
	013 Move V9, V2
	014 Call Component.get_transform, X0
	015 Compare X0, 0
	016 JumpIfEqual {31}
	017 Move X1, X31
	018 Multiply S9, S9, S10
	019 Multiply S8, S8, S10
	020 Call Transform.get_position, X0
	021 Add S0, S8, S0
	022 Add S2, S9, S2
	023 Move X30, [X31+32]
	024 Move X19, [X31+40]
	025 Move D9, [X31+16]
	026 Move D8, [X31+24]
	027 Move S3, W31
	028 Add S1, S1, S3
	029 Move V10, [X31+48]
	030 Return X0
	031 Call 0x1B6FA1C

Method: System.Void OnDrawGizmos()

Disassembly:
	0x01CFB0D0 FADD S8, S0, S2
	0x01CFB0D4 CBNZ W8, 0x1CFB0EC
	0x01CFB0D8 ADRP X0, 0x2252000
	0x01CFB0DC LDR X0, [X0 + 0x480]
	0x01CFB0E0 BL 0x1B6E7F0
	0x01CFB0E4 MOVZ W8, 0x1
	0x01CFB0E8 STRB W8, [X20 + 0x456]
	0x01CFB0EC ADRP X8, 0x2252000
	0x01CFB0F0 LDR X8, [X8 + 0x480]
	0x01CFB0F4 MOV V1.16B, V9.16B
	0x01CFB0F8 MOV V2.16B, V8.16B
	0x01CFB0FC MOV V3.16B, V15.16B
	0x01CFB100 LDR X8, [X8]
	0x01CFB104 MOV V4.16B, V14.16B
	0x01CFB108 MOV V5.16B, V13.16B
	0x01CFB10C MOV V6.16B, V12.16B
	0x01CFB110 LDR X8, [X8 + 0xB8]
	0x01CFB114 MOV X0, X31
	0x01CFB118 LDR V0, [X8 + 0x14]
	0x01CFB11C LDUR X9, [X8 + 0xC]
	0x01CFB120 ADD X8, X31, 0x160
	0x01CFB124 STR S0, [X31 + 0x8]
	0x01CFB128 MOV V0.16B, V10.16B
	0x01CFB12C STR X9, [X31]
	0x01CFB130 BL 0x3A8F354
	0x01CFB134 LDP V0, V1, [X31 + 0x160]
	0x01CFB138 LDP V2, V3, [X31 + 0x180]
	0x01CFB13C ADD X0, X31, 0x60
	0x01CFB140 MOV X1, X31
	0x01CFB144 STP V0, V1, [X31 + 0x60]
	0x01CFB148 STP V2, V3, [X31 + 0x80]
	0x01CFB14C BL 0x3A75C34
	0x01CFB150 LDR X8, [X22]
	0x01CFB154 CBZ X8, 0x1CFB3F4
	0x01CFB158 LDR V8, [X31 + 0x1EC]
	0x01CFB15C LDR X0, [X8 + 0x58]
	0x01CFB160 CMP W21, 0x3
	0x01CFB164 CSET W1, CC
	0x01CFB168 MOV V0.16B, V8.16B
	0x01CFB16C BL 0x1CFB3F8
	0x01CFB170 LDR X8, [X22]
	0x01CFB174 CBZ X8, 0x1CFB3F4
	0x01CFB178 LDR X0, [X23]
	0x01CFB17C LDR X20, [X8 + 0x60]
	0x01CFB180 LDR W9, [X0 + 0xE0]
	0x01CFB184 CBNZ W9, 0x1CFB18C
	0x01CFB188 BL 0x1B6E8F8
	0x01CFB18C MOV X0, X20
	0x01CFB190 MOV X1, X31
	0x01CFB194 MOV X2, X31
	0x01CFB198 BL 0x3A9D6EC
	0x01CFB19C TBZ X0, 0x0, 0x1CFB3CC
	0x01CFB1A0 LDR W21, [X19 + 0x28]
	0x01CFB1A4 FMOV S1, 1
	0x01CFB1A8 FMOV S2, W31
	0x01CFB1AC MOV V3.16B, V8.16B
	0x01CFB1B0 CMP W21, 0x0
	0x01CFB1B4 FCSEL S0, S2, S1, EQ
	0x01CFB1B8 FCSEL S1, S1, S2, EQ
	0x01CFB1BC MOV V2.16B, V1.16B
	0x01CFB1C0 MOV X0, X31
	0x01CFB1C4 BL 0x3A75B14
	0x01CFB1C8 LDR X0, [X19 + 0x20]
	0x01CFB1CC CBZ X0, 0x1CFB3F4
	0x01CFB1D0 MOV X1, X31
	0x01CFB1D4 BL 0x3A9B084
	0x01CFB1D8 LDR X8, [X22]
	0x01CFB1DC CBZ X8, 0x1CFB3F4
	0x01CFB1E0 MOV X20, X0
	0x01CFB1E4 LDR X0, [X8 + 0x60]
	0x01CFB1E8 CBZ X0, 0x1CFB3F4
	0x01CFB1EC MOV X1, X31
	0x01CFB1F0 BL 0x3A9B084
	0x01CFB1F4 CBZ X0, 0x1CFB3F4
	0x01CFB1F8 MOV X1, X31
	0x01CFB1FC BL 0x3AA7658
	0x01CFB200 CBZ X20, 0x1CFB3F4
	0x01CFB204 MOV X0, X20
	0x01CFB208 MOV X1, X31
	0x01CFB20C BL 0x3AA8C24
	0x01CFB210 LDR X0, [X22]
	0x01CFB214 CBZ X0, 0x1CFB3F4
	0x01CFB218 MOV X1, X31
	0x01CFB21C MOV V8.16B, V0.16B
	0x01CFB220 MOV V9.16B, V1.16B
	0x01CFB224 MOV V10.16B, V2.16B
	0x01CFB228 BL 0x3A9B084
	0x01CFB22C CBZ X0, 0x1CFB3F4
	0x01CFB230 MOV X1, X31
	0x01CFB234 BL 0x3AA5FBC
	0x01CFB238 MOV X0, X31
	0x01CFB23C BL 0x3A925C8
	0x01CFB240 LDR X8, [X22]
	0x01CFB244 CBZ X8, 0x1CFB3F4
	0x01CFB248 LDR X0, [X8 + 0x60]
	0x01CFB24C CBZ X0, 0x1CFB3F4
	0x01CFB250 MOV X1, X31

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X8, -19206144
	011 Move X9, -19206144
	012 Move V1, [X8+2452]
	013 Move V2, [X9+2600]
	014 Move X19, X0
	015 Move S0, 1
	016 Move S3, 1
	017 Move X0, X31
	018 Call Gizmos.set_color, X0
	019 Move X0, X31
	020 Call Gizmos.get_color
	021 Move X0, X31
	022 Move V8, V0
	023 Call Gizmos.get_color
	024 Move X0, X31
	025 Move V9, V1
	026 Call Gizmos.get_color
	027 Move X8, -19206144
	028 Move V3, [X8+2736]
	029 Move V0, V8
	030 Move V1, V9
	031 Move X0, X31
	032 Call Gizmos.set_color, X0
	033 Move X0, X19
	034 Move X1, X31
	035 Call Component.get_transform, X0
	036 Compare X0, 0
	037 JumpIfEqual {111}
	038 Move X1, X31
	039 Call Transform.get_position, X0
	040 Move X0, X19
	041 Move X1, X31
	042 Move V8, V0
	043 Move V9, V1
	044 Move V10, V2
	045 Call Component.get_transform, X0
	046 Compare X0, 0
	047 JumpIfEqual {111}
	048 Move X1, X31
	049 Call Transform.get_position, X0
	050 Move X20, 0x2529000
	051 Move W8, [X20+1090]
	052 Move V11, V0
	053 Move V12, V1
	054 Move V13, V2
	055 Compare W8, 0
	056 JumpIfNotEqual {62}
	057 Move X0, 0x2253000
	058 Move X0, [X0+1152]
	059 Call 0x1B6F7F0
	060 Move W8, 1
	061 Move [X20+1090], W8
	062 Move X8, 0x2253000
	063 Move X8, [X8+1152]
	064 Move X0, X31
	065 Move X8, [X8]
	066 Move X8, [X8+184]
	067 Move S0, [X8+24]
	068 Move S1, [X8+28]
	069 Move V2, [X8+32]
	070 Add S3, S11, S0
	071 Add S4, S12, S1
	072 Add S5, S13, S2
	073 Move V0, V8
	074 Move V1, V9
	075 Move V2, V10
	076 Call Gizmos.DrawLine, X0, X1
	077 Move X0, X31
	078 Call Gizmos.get_color
	079 Move X0, X31
	080 Move V8, V0
	081 Call Gizmos.get_color
	082 Move X0, X31
	083 Move V9, V1
	084 Call Gizmos.get_color
	085 Move X8, -19206144
	086 Move V3, [X8+2492]
	087 Move V0, V8
	088 Move V1, V9
	089 Move X0, X31
	090 Call Gizmos.set_color, X0
	091 Move X0, X19
	092 Move X1, X31
	093 Call Component.get_transform, X0
	094 Compare X0, 0
	095 JumpIfEqual {111}
	096 Move X1, X31
	097 Call Transform.get_position, X0
	098 Move V3, [X19+36]
	099 Move X20, [X31+64]
	100 Move X19, [X31+72]
	101 Move X30, [X31+48]
	102 Move D9, [X31+32]
	103 Move D8, [X31+40]
	104 Move D11, [X31+16]
	105 Move D10, [X31+24]
	106 Move X0, X31
	107 Move D13, [X31+80]
	108 Move D12, [X31+88]
	109 Call Gizmos.DrawWireSphere, X0, V0
	110 Return 
	111 Call 0x1B6FA1C

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x01CFB254 MOV V14.16B, V0.16B
	0x01CFB258 MOV V13.16B, V1.16B
	0x01CFB25C MOV V12.16B, V2.16B
	0x01CFB260 MOV V15.16B, V3.16B
	0x01CFB264 STP S10, S9, [X31 + 0x18]
	0x01CFB268 STR S8, [X31 + 0x1E8]
	0x01CFB26C BL 0x3A9B084
	0x01CFB270 CBZ X0, 0x1CFB3F4
	0x01CFB274 MOV X1, X31
	0x01CFB278 BL 0x3AA5FBC
	0x01CFB27C MOV X0, X19
	0x01CFB280 MOV X1, X31
	0x01CFB284 MOV V10.16B, V0.16B
	0x01CFB288 MOV V9.16B, V1.16B
	0x01CFB28C MOV V8.16B, V2.16B
	0x01CFB290 MOV V11.16B, V3.16B
	0x01CFB294 BL 0x3A9B084
	0x01CFB298 CBZ X0, 0x1CFB3F4
	0x01CFB29C FMUL S0, S15, S10
	0x01CFB2A0 FMUL S1, S14, S11
	0x01CFB2A4 FMUL S4, S15, S9
	0x01CFB2A8 FMUL S5, S13, S11
	0x01CFB2AC FMUL S17, S14, S10
	0x01CFB2B0 FMUL S20, S15, S8
	0x01CFB2B4 FMUL S21, S15, S11
	0x01CFB2B8 FMUL S22, S12, S11
	0x01CFB2BC FMUL S2, S13, S8
	0x01CFB2C0 FMUL S6, S12, S10
	0x01CFB2C4 FMUL S16, S14, S9
	0x01CFB2C8 FMUL S19, S13, S9
	0x01CFB2CC FADD S0, S0, S1
	0x01CFB2D0 FADD S1, S4, S5
	0x01CFB2D4 FADD S4, S20, S22
	0x01CFB2D8 FSUB S5, S21, S17
	0x01CFB2DC FMUL S3, S12, S9
	0x01CFB2E0 FMUL S7, S14, S8
	0x01CFB2E4 FMUL S18, S13, S10
	0x01CFB2E8 FMUL S23, S12, S8
	0x01CFB2EC FADD S0, S2, S0
	0x01CFB2F0 FADD S1, S6, S1
	0x01CFB2F4 FADD S2, S16, S4
	0x01CFB2F8 FSUB S4, S5, S19
	0x01CFB2FC MOV X1, X31
	0x01CFB300 FSUB S15, S0, S3
	0x01CFB304 FSUB S14, S1, S7
	0x01CFB308 FSUB S13, S2, S18
	0x01CFB30C FSUB S12, S4, S23
	0x01CFB310 BL 0x3AA7658
	0x01CFB314 LDR V3, [X31 + 0x1E8]
	0x01CFB318 ADRP X19, 0x2528000
	0x01CFB31C LDRB W8, [X19 + 0x456]
	0x01CFB320 FADD S10, S3, S0
	0x01CFB324 LDR V0, [X31 + 0x1C]
	0x01CFB328 FADD S9, S0, S1
	0x01CFB32C LDR V0, [X31 + 0x18]
	0x01CFB330 FADD S8, S0, S2
	0x01CFB334 CBNZ W8, 0x1CFB34C
	0x01CFB338 ADRP X0, 0x2252000
	0x01CFB33C LDR X0, [X0 + 0x480]
	0x01CFB340 BL 0x1B6E7F0
	0x01CFB344 MOVZ W8, 0x1
	0x01CFB348 STRB W8, [X19 + 0x456]
	0x01CFB34C ADRP X8, 0x2252000
	0x01CFB350 LDR X8, [X8 + 0x480]
	0x01CFB354 MOV V1.16B, V9.16B
	0x01CFB358 MOV V2.16B, V8.16B
	0x01CFB35C MOV V3.16B, V15.16B
	0x01CFB360 LDR X8, [X8]
	0x01CFB364 MOV V4.16B, V14.16B
	0x01CFB368 MOV V5.16B, V13.16B
	0x01CFB36C MOV V6.16B, V12.16B
	0x01CFB370 LDR X8, [X8 + 0xB8]
	0x01CFB374 MOV X0, X31
	0x01CFB378 LDR V0, [X8 + 0x14]
	0x01CFB37C LDUR X9, [X8 + 0xC]
	0x01CFB380 ADD X8, X31, 0x160
	0x01CFB384 STR S0, [X31 + 0x8]
	0x01CFB388 MOV V0.16B, V10.16B
	0x01CFB38C STR X9, [X31]
	0x01CFB390 BL 0x3A8F354
	0x01CFB394 LDP V0, V1, [X31 + 0x160]
	0x01CFB398 LDP V2, V3, [X31 + 0x180]
	0x01CFB39C ADD X0, X31, 0x20
	0x01CFB3A0 MOV X1, X31
	0x01CFB3A4 STP V0, V1, [X31 + 0x20]
	0x01CFB3A8 STP V2, V3, [X31 + 0x40]
	0x01CFB3AC BL 0x3A75C34
	0x01CFB3B0 LDR X8, [X22]
	0x01CFB3B4 CBZ X8, 0x1CFB3F4
	0x01CFB3B8 LDR X0, [X8 + 0x60]
	0x01CFB3BC LDR V0, [X31 + 0x1EC]
	0x01CFB3C0 CMP W21, 0x0
	0x01CFB3C4 CSET W1, EQ

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X8, -19206144
	011 Move X9, -19206144
	012 Move V1, [X8+2452]
	013 Move V2, [X9+2600]
	014 Move X19, X0
	015 Move S0, 1
	016 Move S3, 1
	017 Move X0, X31
	018 Call Gizmos.set_color, X0
	019 Move X0, X31
	020 Call Gizmos.get_color
	021 Move X0, X31
	022 Move V8, V0
	023 Call Gizmos.get_color
	024 Move X0, X31
	025 Move V9, V1
	026 Call Gizmos.get_color
	027 Move S3, 1
	028 Move V0, V8
	029 Move V1, V9
	030 Move X0, X31
	031 Call Gizmos.set_color, X0
	032 Move X0, X19
	033 Move X1, X31
	034 Call Component.get_transform, X0
	035 Compare X0, 0
	036 JumpIfEqual {107}
	037 Move X1, X31
	038 Call Transform.get_position, X0
	039 Move X0, X19
	040 Move X1, X31
	041 Move V8, V0
	042 Move V9, V1
	043 Move V10, V2
	044 Call Component.get_transform, X0
	045 Compare X0, 0
	046 JumpIfEqual {107}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X20, 0x2529000
	050 Move W8, [X20+1090]
	051 Move V11, V0
	052 Move V12, V1
	053 Move V13, V2
	054 Compare W8, 0
	055 JumpIfNotEqual {61}
	056 Move X0, 0x2253000
	057 Move X0, [X0+1152]
	058 Call 0x1B6F7F0
	059 Move W8, 1
	060 Move [X20+1090], W8
	061 Move X8, 0x2253000
	062 Move X8, [X8+1152]
	063 Move X0, X31
	064 Move X8, [X8]
	065 Move X8, [X8+184]
	066 Move S0, [X8+24]
	067 Move S1, [X8+28]
	068 Move V2, [X8+32]
	069 Add S3, S11, S0
	070 Add S4, S12, S1
	071 Add S5, S13, S2
	072 Move V0, V8
	073 Move V1, V9
	074 Move V2, V10
	075 Call Gizmos.DrawLine, X0, X1
	076 Move W8, [X19+32]
	077 Move S1, W31
	078 Move S2, 1
	079 Move S3, 1
	080 NotImplemented "Instruction CMP not yet implemented."
	081 NotImplemented "Instruction FCSEL not yet implemented."
	082 NotImplemented "Instruction FCSEL not yet implemented."
	083 Move S2, W31
	084 Move X0, X31
	085 Call Gizmos.set_color, X0
	086 Move X0, X19
	087 Move X1, X31
	088 Call Component.get_transform, X0
	089 Compare X0, 0
	090 JumpIfEqual {107}
	091 Move X1, X31
	092 Call Transform.get_position, X0
	093 Move X8, -19206144
	094 Move V3, [X8+2736]
	095 Move X20, [X31+64]
	096 Move X19, [X31+72]
	097 Move X30, [X31+48]
	098 Move D9, [X31+32]
	099 Move D8, [X31+40]
	100 Move D11, [X31+16]
	101 Move D10, [X31+24]
	102 Move X0, X31
	103 Move D13, [X31+80]
	104 Move D12, [X31+88]
	105 Call Gizmos.DrawSphere, X0, V0
	106 Return 
	107 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CFB3C8 BL 0x1CFB3F8
	0x01CFB3CC ADD X31, X31, 0x1A0
	0x01CFB3D0 LDP X20, X19, [X31 + 0x70]
	0x01CFB3D4 LDP X22, X21, [X31 + 0x60]
	0x01CFB3D8 LDP X30, X23, [X31 + 0x50]
	0x01CFB3DC LDR X29, [X31 + 0x40]

ISIL:
	001 Move W8, 1
	002 Move W9, 0x3F400000
	003 Move X1, X31
	004 Move [X0+32], W8
	005 Move [X0+36], W9
	006 Call MonoBehaviour..ctor, X0
	007 Return 

