Type: AnimalCompany.PlayerAudioView

Method: System.Int32 get_handStepClipCount()

Disassembly:
	0x01DC0A88 LDR X8, [X8 + 0xDA0]
	0x01DC0A8C ADRP X20, 0x2338000
	0x01DC0A90 ADRP X21, 0x2333000
	0x01DC0A94 LDR X0, [X8]
	0x01DC0A98 LDR X20, [X20 + 0x60]
	0x01DC0A9C LDR X21, [X21 + 0x648]
	0x01DC0AA0 BL 0x1C16F10

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+32]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void PlayHandstepSound(AnimalCompany.HandSide handSide, System.Int32 clipIndex, System.Single intensity01)

Disassembly:
	0x01DC0AA4 LDR X2, [X20]
	0x01DC0AA8 MOV X1, X19
	0x01DC0AAC MOV X3, X31
	0x01DC0AB0 MOV X20, X0
	0x01DC0AB4 BL 0x35C52F0
	0x01DC0AB8 LDR X0, [X21]
	0x01DC0ABC LDR W8, [X0 + 0xE0]
	0x01DC0AC0 CBNZ W8, 0x1DC0AC8
	0x01DC0AC4 BL 0x1C16DFC
	0x01DC0AC8 MOV X0, X20
	0x01DC0ACC LDP X20, X19, [X31 + 0x20]
	0x01DC0AD0 LDP X22, X21, [X31 + 0x10]
	0x01DC0AD4 MOV X1, X31
	0x01DC0AD8 LDP X30, X23, [X31], #0x30
	0x01DC0ADC B 0x1D36978
	0x01DC0AE0 STR X30, [X31 - 0x30]!
	0x01DC0AE4 STP X22, X21, [X31 + 0x10]
	0x01DC0AE8 STP X20, X19, [X31 + 0x20]
	0x01DC0AEC ADRP X21, 0x2618000
	0x01DC0AF0 ADRP X20, 0x2333000
	0x01DC0AF4 LDRB W8, [X21 + 0xB7C]
	0x01DC0AF8 LDR X20, [X20 + 0x648]
	0x01DC0AFC MOV X19, X0
	0x01DC0B00 TBNZ X8, 0x0, 0x1DC0B24
	0x01DC0B04 ADRP X0, 0x2333000
	0x01DC0B08 LDR X0, [X0 + 0x648]
	0x01DC0B0C BL 0x1C16CF4
	0x01DC0B10 ADRP X0, 0x2334000
	0x01DC0B14 LDR X0, [X0 + 0xB18]
	0x01DC0B18 BL 0x1C16CF4
	0x01DC0B1C MOVZ W8, 0x1
	0x01DC0B20 STRB W8, [X21 + 0xB7C]
	0x01DC0B24 LDR X0, [X20]
	0x01DC0B28 LDR X22, [X19 + 0x38]
	0x01DC0B2C LDR W8, [X0 + 0xE0]
	0x01DC0B30 CBNZ W8, 0x1DC0B38
	0x01DC0B34 BL 0x1C16DFC
	0x01DC0B38 ADRP X21, 0x2618000
	0x01DC0B3C LDRB W8, [X21 + 0x787]
	0x01DC0B40 CBNZ W8, 0x1DC0B58
	0x01DC0B44 ADRP X0, 0x2333000
	0x01DC0B48 LDR X0, [X0 + 0x648]
	0x01DC0B4C BL 0x1C16CF4
	0x01DC0B50 MOVZ W8, 0x1
	0x01DC0B54 STRB W8, [X21 + 0x787]
	0x01DC0B58 LDR X0, [X20]
	0x01DC0B5C LDR W8, [X0 + 0xE0]
	0x01DC0B60 CBNZ W8, 0x1DC0B6C
	0x01DC0B64 BL 0x1C16DFC
	0x01DC0B68 LDR X0, [X20]
	0x01DC0B6C LDR X8, [X0 + 0xB8]
	0x01DC0B70 LDR X8, [X8]
	0x01DC0B74 CBZ X8, 0x1DC0C18
	0x01DC0B78 LDR X8, [X8 + 0xB8]
	0x01DC0B7C CBZ X8, 0x1DC0C18
	0x01DC0B80 CBZ X22, 0x1DC0C18
	0x01DC0B84 LDR X0, [X22 + 0xA8]
	0x01DC0B88 CBZ X0, 0x1DC0C18
	0x01DC0B8C LDR X1, [X8 + 0x70]
	0x01DC0B90 MOV X2, X31
	0x01DC0B94 BL 0x1E1F0D8
	0x01DC0B98 LDRB W8, [X21 + 0x787]
	0x01DC0B9C LDR X19, [X19 + 0x38]
	0x01DC0BA0 CBNZ W8, 0x1DC0BB8

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2619000
	007 Move W8, [X21+2932]
	008 Move V8, V0
	009 Move W19, W1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2339000
	016 Move X0, [X0+48]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+2932], W8
	020 Move X8, [X20+32]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W9, 48
	023 Move W10, 40
	024 NotImplemented "Instruction CSEL not yet implemented."
	025 Compare X8, 0
	026 JumpIfEqual {75}
	027 Move W1, [X8+24]
	028 Move X19, [X20]
	029 Move W0, W31
	030 Move X2, X31
	031 Call Random.Range, X0, X1
	032 Move X8, [X20+32]
	033 Compare X8, 0
	034 JumpIfEqual {75}
	035 Move W9, [X8+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Compare X19, 0
	038 JumpIfEqual {75}
	039 Add X8, X8, W0
	040 Move X1, [X8+32]
	041 Move X20, 0x2339000
	042 Move X20, [X20+48]
	043 Move X0, X19
	044 Move X2, X31
	045 Call AudioSource.set_clip, X0, X1
	046 Move X0, [X20]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {52}
	050 Call 0x1C17DFC
	051 Move X0, [X20]
	052 Move X8, [X0+184]
	053 Move S0, 1
	054 NotImplemented "Instruction FMIN not yet implemented."
	055 NotImplemented "Instruction FCMP not yet implemented."
	056 Move S1, [X8]
	057 Move S2, [X8+4]
	058 Move S3, W31
	059 NotImplemented "Instruction FCSEL not yet implemented."
	060 Move X0, X19
	061 Subtract S2, S2, S1
	062 Multiply S0, S0, S2
	063 Add S0, S1, S0
	064 Move X1, X31
	065 Call AudioSource.set_volume, X0, V0
	066 Move X0, X19
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X30, [X31+16]
	070 Move X21, [X31+24]
	071 Move X1, X31
	072 Move V8, [X31+48]
	073 Call AudioSource.Play, X0
	074 Return 
	075 Call 0x1C17F20
	076 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x01DC0BA4 ADRP X0, 0x2333000
	0x01DC0BA8 LDR X0, [X0 + 0x648]

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x01DC0BAC BL 0x1C16CF4
	0x01DC0BB0 MOVZ W8, 0x1
	0x01DC0BB4 STRB W8, [X21 + 0x787]
	0x01DC0BB8 LDR X0, [X20]
	0x01DC0BBC LDR W8, [X0 + 0xE0]
	0x01DC0BC0 CBNZ W8, 0x1DC0BCC
	0x01DC0BC4 BL 0x1C16DFC
	0x01DC0BC8 LDR X0, [X20]
	0x01DC0BCC LDR X8, [X0 + 0xB8]
	0x01DC0BD0 LDR X8, [X8]
	0x01DC0BD4 CBZ X8, 0x1DC0C18
	0x01DC0BD8 LDR X8, [X8 + 0xB8]
	0x01DC0BDC CBZ X8, 0x1DC0C18
	0x01DC0BE0 LDR X8, [X8 + 0x70]
	0x01DC0BE4 CBZ X8, 0x1DC0C18
	0x01DC0BE8 LDR X8, [X8 + 0x50]
	0x01DC0BEC CBZ X8, 0x1DC0C18
	0x01DC0BF0 CBZ X19, 0x1DC0C18
	0x01DC0BF4 LDR X0, [X19 + 0xA8]
	0x01DC0BF8 CBZ X0, 0x1DC0C18

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2619000
	005 Move X20, 0x2339000
	006 Move W8, [X19+2933]
	007 Move X20, [X20+48]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2339000
	013 Move X0, [X0+48]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2933], W8
	017 Move X8, [X20]
	018 Move X9, -19730432
	019 Move V0, [X9+304]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X8, [X8+184]
	023 Move [X8], D0
	024 Move X30, [X31+32]
	025 Return 

