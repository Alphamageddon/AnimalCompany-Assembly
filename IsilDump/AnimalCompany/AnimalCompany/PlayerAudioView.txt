Type: AnimalCompany.PlayerAudioView

Method: System.Int32 get_handStepClipCount()

Disassembly:
	0x01CC0CD4 TBNZ X8, 0x0, 0x1CC0CF8
	0x01CC0CD8 ADRP X0, 0x228F000
	0x01CC0CDC LDR X0, [X0 + 0x320]
	0x01CC0CE0 BL 0x1B6E7F0
	0x01CC0CE4 ADRP X0, 0x228D000
	0x01CC0CE8 LDR X0, [X0 + 0x478]
	0x01CC0CEC BL 0x1B6E7F0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+32]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1B6FA1C

Method: System.Void PlayHandstepSound(AnimalCompany.HandSide handSide, System.Int32 clipIndex, System.Single intensity01)

Disassembly:
	0x01CC0CF0 MOVZ W8, 0x1
	0x01CC0CF4 STRB W8, [X20 + 0x544]
	0x01CC0CF8 LDR X0, [X21]
	0x01CC0CFC LDR W8, [X0 + 0xE0]
	0x01CC0D00 CBNZ W8, 0x1CC0D0C
	0x01CC0D04 BL 0x1B6E8F8
	0x01CC0D08 LDR X0, [X21]
	0x01CC0D0C LDR X8, [X0 + 0xB8]
	0x01CC0D10 ADRP X22, 0x228D000
	0x01CC0D14 LDR X8, [X8 + 0x8]
	0x01CC0D18 LDR X22, [X22 + 0x478]
	0x01CC0D1C CBZ X8, 0x1CC0D28
	0x01CC0D20 LDR X20, [X8 + 0x20]
	0x01CC0D24 B 0x1CC0D2C
	0x01CC0D28 MOV X20, X31
	0x01CC0D2C LDR X0, [X22]
	0x01CC0D30 LDR W8, [X0 + 0xE0]
	0x01CC0D34 CBNZ W8, 0x1CC0D3C
	0x01CC0D38 BL 0x1B6E8F8
	0x01CC0D3C MOV X0, X20
	0x01CC0D40 MOV X1, X31
	0x01CC0D44 MOV X2, X31
	0x01CC0D48 BL 0x3A9D6EC
	0x01CC0D4C TBZ X0, 0x0, 0x1CC0DFC
	0x01CC0D50 LDR X0, [X21]
	0x01CC0D54 LDR W8, [X0 + 0xE0]
	0x01CC0D58 CBNZ W8, 0x1CC0D64
	0x01CC0D5C BL 0x1B6E8F8
	0x01CC0D60 LDR X0, [X21]
	0x01CC0D64 LDR X8, [X0 + 0xB8]
	0x01CC0D68 LDR X8, [X8 + 0x8]
	0x01CC0D6C CBZ X8, 0x1CC0E0C
	0x01CC0D70 LDR X8, [X8 + 0x20]
	0x01CC0D74 CBZ X8, 0x1CC0E0C
	0x01CC0D78 LDRB W8, [X8 + 0x78]
	0x01CC0D7C CBZ W8, 0x1CC0DFC
	0x01CC0D80 LDR X0, [X22]
	0x01CC0D84 LDR X20, [X19 + 0x30]
	0x01CC0D88 LDR W8, [X0 + 0xE0]
	0x01CC0D8C CBNZ W8, 0x1CC0D94
	0x01CC0D90 BL 0x1B6E8F8
	0x01CC0D94 MOV X0, X20
	0x01CC0D98 MOV X1, X31
	0x01CC0D9C MOV X2, X31
	0x01CC0DA0 BL 0x3A9D6EC
	0x01CC0DA4 TBZ X0, 0x0, 0x1CC0DFC
	0x01CC0DA8 LDR X0, [X21]
	0x01CC0DAC LDR X19, [X19 + 0x30]
	0x01CC0DB0 LDR W8, [X0 + 0xE0]
	0x01CC0DB4 CBNZ W8, 0x1CC0DC0
	0x01CC0DB8 BL 0x1B6E8F8
	0x01CC0DBC LDR X0, [X21]
	0x01CC0DC0 LDR X8, [X0 + 0xB8]
	0x01CC0DC4 LDR X8, [X8 + 0x8]
	0x01CC0DC8 CBZ X8, 0x1CC0E0C
	0x01CC0DCC LDR X8, [X8 + 0x20]
	0x01CC0DD0 CBZ X8, 0x1CC0E0C
	0x01CC0DD4 CBZ X19, 0x1CC0E0C
	0x01CC0DD8 LDP S1, S2, [X8 + 0x80]
	0x01CC0DDC LDR V0, [X8 + 0x7C]
	0x01CC0DE0 MOV X0, X19
	0x01CC0DE4 LDP X20, X19, [X31 + 0x20]
	0x01CC0DE8 LDP X22, X21, [X31 + 0x10]
	0x01CC0DEC MOVZ W1, 0x5

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2564000
	007 Move W8, [X21+1339]
	008 Move V8, V0
	009 Move W19, W1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2290000
	016 Move X0, [X0+728]
	017 Call 0x1B6F7F0
	018 Move W8, 1
	019 Move [X21+1339], W8
	020 Move X8, [X20+32]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W9, 48
	023 Move W10, 40
	024 NotImplemented "Instruction CSEL not yet implemented."
	025 Compare X8, 0
	026 JumpIfEqual {75}
	027 Move W1, [X8+24]
	028 Move X19, [X20]
	029 Move W0, W31
	030 Move X2, X31
	031 Call Random.Range, X0, X1
	032 Move X8, [X20+32]
	033 Compare X8, 0
	034 JumpIfEqual {75}
	035 Move W9, [X8+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Compare X19, 0
	038 JumpIfEqual {75}
	039 Add X8, X8, W0
	040 Move X1, [X8+32]
	041 Move X20, 0x2290000
	042 Move X20, [X20+728]
	043 Move X0, X19
	044 Move X2, X31
	045 Call AudioSource.set_clip, X0, X1
	046 Move X0, [X20]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {52}
	050 Call 0x1B6F8F8
	051 Move X0, [X20]
	052 Move X8, [X0+184]
	053 Move S0, 1
	054 NotImplemented "Instruction FMIN not yet implemented."
	055 NotImplemented "Instruction FCMP not yet implemented."
	056 Move S1, [X8]
	057 Move S2, [X8+4]
	058 Move S3, W31
	059 NotImplemented "Instruction FCSEL not yet implemented."
	060 Move X0, X19
	061 Subtract S2, S2, S1
	062 Multiply S0, S0, S2
	063 Add S0, S1, S0
	064 Move X1, X31
	065 Call AudioSource.set_volume, X0, V0
	066 Move X0, X19
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X30, [X31+16]
	070 Move X21, [X31+24]
	071 Move X1, X31
	072 Move V8, [X31+48]
	073 Call AudioSource.Play, X0
	074 Return 
	075 Call 0x1B6FA1C
	076 Call 0x1B6FA24

Method: System.Void .ctor()

Disassembly:
	0x01CC0DF0 MOV X2, X31
	0x01CC0DF4 LDR X30, [X31], #0x30

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x01CC0DF8 B 0x3AF6FC8
	0x01CC0DFC LDP X20, X19, [X31 + 0x20]
	0x01CC0E00 LDP X22, X21, [X31 + 0x10]
	0x01CC0E04 LDR X30, [X31], #0x30
	0x01CC0E08 RET
	0x01CC0E0C BL 0x1B6EA1C
	0x01CC0E10 SUB X31, X31, 0x80
	0x01CC0E14 STR D14, [X31 + 0x10]
	0x01CC0E18 STP D13, D12, [X31 + 0x18]
	0x01CC0E1C STP D11, D10, [X31 + 0x28]
	0x01CC0E20 STP D9, D8, [X31 + 0x38]
	0x01CC0E24 STR X30, [X31 + 0x48]
	0x01CC0E28 STP X24, X23, [X31 + 0x50]
	0x01CC0E2C STP X22, X21, [X31 + 0x60]
	0x01CC0E30 STP X20, X19, [X31 + 0x70]
	0x01CC0E34 ADRP X20, 0x2563000
	0x01CC0E38 LDRB W8, [X20 + 0x545]
	0x01CC0E3C MOV X19, X0
	0x01CC0E40 TBNZ X8, 0x0, 0x1CC0EA0
	0x01CC0E44 ADRP X0, 0x228D000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2564000
	005 Move X20, 0x2290000
	006 Move W8, [X19+1340]
	007 Move X20, [X20+728]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2290000
	013 Move X0, [X0+728]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X19+1340], W8
	017 Move X8, [X20]
	018 Move X9, -18948096
	019 Move V0, [X9+2496]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X8, [X8+184]
	023 Move [X8], D0
	024 Move X30, [X31+32]
	025 Return 

