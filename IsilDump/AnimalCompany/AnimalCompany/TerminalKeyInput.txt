Type: AnimalCompany.TerminalKeyInput

Method: System.Void OnDestroy()

Disassembly:
	0x01DB0FD8 BL 0x1C16DFC
	0x01DB0FDC MOV X0, X31
	0x01DB0FE0 BL 0x3C03278
	0x01DB0FE4 TBZ X0, 0x0, 0x1DB1040
	0x01DB0FE8 LDRB W8, [X19 + 0x20]
	0x01DB0FEC CBZ W8, 0x1DB1040
	0x01DB0FF0 LDR X0, [X19 + 0x28]
	0x01DB0FF4 CBZ X0, 0x1DB110C
	0x01DB0FF8 ADRP X8, 0x2347000
	0x01DB0FFC LDR X8, [X8 + 0x9B8]
	0x01DB1000 LDR X1, [X8]
	0x01DB1004 BL 0x21E52E4
	0x01DB1008 CBZ X0, 0x1DB110C
	0x01DB100C MOVZ W1, 0x1
	0x01DB1010 MOV X2, X31
	0x01DB1014 BL 0x3C32410
	0x01DB1018 LDR X0, [X19 + 0x28]
	0x01DB101C CBZ X0, 0x1DB110C
	0x01DB1020 ADRP X8, 0x2346000
	0x01DB1024 LDR X8, [X8 + 0x9C8]
	0x01DB1028 LDR X1, [X8]
	0x01DB102C BL 0x21E52E4
	0x01DB1030 CBZ X0, 0x1DB110C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2629000
	006 Move X20, 0x2346000
	007 Move W8, [X21+2794]
	008 Move X20, [X20+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2346000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2794], W8
	019 Move X0, [X20]
	020 Move W19, [X19+76]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call LeanTween.cancel, X0
	032 Return 

Method: System.Void OnTriggerEnter(UnityEngine.Collider other)

Disassembly:
	0x01DB1034 MOVZ W1, 0x1
	0x01DB1038 MOV X2, X31
	0x01DB103C BL 0x3C32410
	0x01DB1040 LDR X0, [X19 + 0x28]
	0x01DB1044 CBZ X0, 0x1DB110C
	0x01DB1048 ADRP X8, 0x2346000
	0x01DB104C LDR X8, [X8 + 0x9C0]
	0x01DB1050 ADRP X23, 0x2345000
	0x01DB1054 ADRP X22, 0x2345000
	0x01DB1058 ADRP X21, 0x2346000
	0x01DB105C LDR X1, [X8]
	0x01DB1060 LDR X23, [X23 + 0xD28]
	0x01DB1064 LDR X22, [X22 + 0xA30]
	0x01DB1068 LDR X21, [X21 + 0x9D0]
	0x01DB106C BL 0x21E52E4
	0x01DB1070 STR X0, [X19 + 0x30]
	0x01DB1074 LDR X8, [X23]
	0x01DB1078 LDR X0, [X22]
	0x01DB107C LDR X8, [X8 + 0xB8]
	0x01DB1080 LDR X20, [X8 + 0x10]
	0x01DB1084 BL 0x1C16F10
	0x01DB1088 LDR X2, [X21]
	0x01DB108C MOV X1, X19
	0x01DB1090 MOV X3, X31
	0x01DB1094 MOV X21, X0
	0x01DB1098 BL 0x2A6B948
	0x01DB109C MOV X0, X20
	0x01DB10A0 MOV X1, X21
	0x01DB10A4 MOV X2, X31
	0x01DB10A8 BL 0x33C0DE4
	0x01DB10AC CBZ X0, 0x1DB10F0
	0x01DB10B0 LDR X20, [X22]
	0x01DB10B4 MOV X19, X0
	0x01DB10B8 MOV X1, X20
	0x01DB10BC BL 0x1C16E00
	0x01DB10C0 CBZ X0, 0x1DB10E4
	0x01DB10C4 LDR X8, [X23]
	0x01DB10C8 LDR X8, [X8 + 0xB8]
	0x01DB10CC STR X0, [X8 + 0x10]
	0x01DB10D0 LDR X20, [X22]
	0x01DB10D4 MOV X0, X19
	0x01DB10D8 MOV X1, X20
	0x01DB10DC BL 0x1C16E00

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2628000
	007 Move W8, [X21+2795]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2343000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2795], W8
	019 Move [X31+12], W31
	020 Compare X20, 0
	021 JumpIfEqual {58}
	022 Move X21, 0x2343000
	023 Move X21, [X21+1432]
	024 Move X0, X20
	025 Move X1, X31
	026 Call Collider.get_attachedRigidbody, X0
	027 Move X8, [X21]
	028 Move X21, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X21
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {52}
	042 Add X1, X31, 12
	043 Move X0, X20
	044 Move X2, X31
	045 Call HandInputUtility.HandleFingerTipInput, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {52}
	050 Move X0, X19
	051 Call TerminalKeyInput.Press, X0
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X30, [X31+16]
	055 Move X21, [X31+24]
	056 Add X31, X31, 48
	057 Return 
	058 Call 0x1C17F20

Method: System.Void Press()

Disassembly:
	0x01DB10E0 CBNZ X0, 0x1DB10FC
	0x01DB10E4 MOV X0, X19
	0x01DB10E8 MOV X1, X20
	0x01DB10EC BL 0x1C171E0
	0x01DB10F0 LDR X8, [X23]
	0x01DB10F4 LDR X8, [X8 + 0xB8]
	0x01DB10F8 STR X31, [X8 + 0x10]
	0x01DB10FC LDP X20, X19, [X31 + 0x20]
	0x01DB1100 LDP X22, X21, [X31 + 0x10]
	0x01DB1104 LDP X30, X23, [X31], #0x30
	0x01DB1108 RET
	0x01DB110C BL 0x1C16F20
	0x01DB1110 STP X30, X23, [X31 - 0x30]!
	0x01DB1114 STP X22, X21, [X31 + 0x10]
	0x01DB1118 STP X20, X19, [X31 + 0x20]
	0x01DB111C ADRP X20, 0x2627000
	0x01DB1120 LDRB W8, [X20 + 0xAF4]
	0x01DB1124 MOV X19, X0
	0x01DB1128 TBNZ X8, 0x0, 0x1DB1164
	0x01DB112C ADRP X0, 0x2345000
	0x01DB1130 LDR X0, [X0 + 0xA30]
	0x01DB1134 BL 0x1C16CF4
	0x01DB1138 ADRP X0, 0x2346000
	0x01DB113C LDR X0, [X0 + 0x9D0]
	0x01DB1140 BL 0x1C16CF4
	0x01DB1144 ADRP X0, 0x2345000
	0x01DB1148 LDR X0, [X0 + 0xD28]
	0x01DB114C BL 0x1C16CF4
	0x01DB1150 ADRP X0, 0x2342000
	0x01DB1154 LDR X0, [X0 + 0x598]
	0x01DB1158 BL 0x1C16CF4
	0x01DB115C MOVZ W8, 0x1
	0x01DB1160 STRB W8, [X20 + 0xAF4]
	0x01DB1164 ADRP X21, 0x2627000
	0x01DB1168 ADRP X22, 0x2345000
	0x01DB116C ADRP X20, 0x2342000
	0x01DB1170 LDRB W8, [X21 + 0xABF]
	0x01DB1174 LDR X22, [X22 + 0xD28]
	0x01DB1178 LDR X20, [X20 + 0x598]
	0x01DB117C CBNZ W8, 0x1DB1194
	0x01DB1180 ADRP X0, 0x2345000
	0x01DB1184 LDR X0, [X0 + 0xD28]
	0x01DB1188 BL 0x1C16CF4
	0x01DB118C MOVZ W8, 0x1
	0x01DB1190 STRB W8, [X21 + 0xABF]
	0x01DB1194 LDR X8, [X22]
	0x01DB1198 LDR X0, [X20]
	0x01DB119C LDR X8, [X8 + 0xB8]
	0x01DB11A0 LDR W9, [X0 + 0xE0]
	0x01DB11A4 LDR X20, [X8 + 0x38]
	0x01DB11A8 CBNZ W9, 0x1DB11B0
	0x01DB11AC BL 0x1C16DFC
	0x01DB11B0 MOV X0, X20
	0x01DB11B4 MOV X1, X31
	0x01DB11B8 MOV X2, X31
	0x01DB11BC BL 0x3C354F8
	0x01DB11C0 TBZ X0, 0x0, 0x1DB125C
	0x01DB11C4 LDR X8, [X22]
	0x01DB11C8 ADRP X23, 0x2345000
	0x01DB11CC LDR X8, [X8 + 0xB8]
	0x01DB11D0 LDR X23, [X23 + 0xA30]
	0x01DB11D4 LDR X20, [X8 + 0x10]
	0x01DB11D8 LDR X0, [X23]
	0x01DB11DC BL 0x1C16F10
	0x01DB11E0 ADRP X8, 0x2346000
	0x01DB11E4 LDR X8, [X8 + 0x9D0]
	0x01DB11E8 MOV X1, X19
	0x01DB11EC MOV X3, X31
	0x01DB11F0 MOV X21, X0
	0x01DB11F4 LDR X2, [X8]
	0x01DB11F8 BL 0x2A6B948
	0x01DB11FC MOV X0, X20
	0x01DB1200 MOV X1, X21
	0x01DB1204 MOV X2, X31
	0x01DB1208 BL 0x33C0FDC
	0x01DB120C CBZ X0, 0x1DB1250
	0x01DB1210 LDR X20, [X23]
	0x01DB1214 MOV X19, X0
	0x01DB1218 MOV X1, X20
	0x01DB121C BL 0x1C16E00
	0x01DB1220 CBZ X0, 0x1DB1244
	0x01DB1224 LDR X8, [X22]
	0x01DB1228 LDR X8, [X8 + 0xB8]
	0x01DB122C STR X0, [X8 + 0x10]
	0x01DB1230 LDR X20, [X23]
	0x01DB1234 MOV X0, X19
	0x01DB1238 MOV X1, X20
	0x01DB123C BL 0x1C16E00
	0x01DB1240 CBNZ X0, 0x1DB125C
	0x01DB1244 MOV X0, X19
	0x01DB1248 MOV X1, X20
	0x01DB124C BL 0x1C171E0
	0x01DB1250 LDR X8, [X22]
	0x01DB1254 LDR X8, [X8 + 0xB8]
	0x01DB1258 STR X31, [X8 + 0x10]
	0x01DB125C LDP X20, X19, [X31 + 0x20]
	0x01DB1260 LDP X22, X21, [X31 + 0x10]
	0x01DB1264 LDP X30, X23, [X31], #0x30
	0x01DB1268 RET
	0x01DB126C STR X30, [X31 - 0x10]!
	0x01DB1270 LDR X0, [X0 + 0x30]
	0x01DB1274 CBZ X0, 0x1DB1284
	0x01DB1278 MOV X2, X31
	0x01DB127C LDR X30, [X31], #0x10
	0x01DB1280 B 0x1F9E71C
	0x01DB1284 BL 0x1C16F20
	0x01DB1288 MOVZ W8, 0x1
	0x01DB128C MOV X1, X31
	0x01DB1290 STRB W8, [X0 + 0x20]
	0x01DB1294 B 0x3C36C30
	0x01DB1298 STP X30, X21, [X31 - 0x20]!
	0x01DB129C STP X20, X19, [X31 + 0x10]
	0x01DB12A0 ADRP X21, 0x2627000
	0x01DB12A4 ADRP X20, 0x2346000
	0x01DB12A8 ADRP X19, 0x2342000
	0x01DB12AC LDRB W8, [X21 + 0xAF5]
	0x01DB12B0 LDR X20, [X20 + 0x9D8]
	0x01DB12B4 LDR X19, [X19 + 0x598]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2628000
	006 Move W8, [X20+2796]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {29}
	012 Move X0, 0x2345000
	013 Move X0, [X0+1456]
	014 Call 0x1C17CF4
	015 Move X0, 0x2344000
	016 Move X0, [X0+3696]
	017 Call 0x1C17CF4
	018 Move X0, 0x2345000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move X0, 0x2347000
	022 Move X0, [X0+2400]
	023 Call 0x1C17CF4
	024 Move X0, 0x2347000
	025 Move X0, [X0+2408]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2796], W8
	029 Move X0, X31
	030 Call Time.get_time
	031 Move V1, [X19+80]
	032 Subtract S0, S0, S1
	033 Move S1, 0.25
	034 NotImplemented "Instruction FCMP not yet implemented."
	035 Move X20, [X19+56]
	036 Move X0, X19
	037 Move X1, X31
	038 Call Component.get_transform, X0
	039 Compare X0, 0
	040 JumpIfEqual {134}
	041 Move X1, X31
	042 Call Transform.get_position, X0
	043 Compare X20, 0
	044 JumpIfEqual {134}
	045 Move S3, 1
	046 Move W1, 1
	047 Move X0, X20
	048 Move X2, X31
	049 Call RandomSFX.Play, X0, X1, V0, X2
	050 Move X8, 0x2345000
	051 Move X8, [X8+1448]
	052 Move W20, [X19+76]
	053 Move X0, [X8]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move W0, W20
	059 Move X1, X31
	060 Call LeanTween.cancel, X0
	061 Move X8, -19685376
	062 Move V2, [X8+1100]
	063 Move S0, W31
	064 Move S1, 1
	065 Move X0, X31
	066 Call LeanTween.value, V0, V1, V2
	067 Compare X0, 0
	068 JumpIfEqual {134}
	069 Move X1, X31
	070 Call LTDescr.setEaseOutCirc, X0
	071 Move X8, 0x2345000
	072 Move X8, [X8+1456]
	073 Move X20, X0
	074 Move X8, [X8]
	075 Move X0, X8
	076 Call 0x1C17F10
	077 Move X8, 0x2347000
	078 Move X8, [X8+2400]
	079 Move X1, X19
	080 Move X3, X31
	081 Move X21, X0
	082 Move X2, [X8]
	083 Call Action`1<Single>..ctor, X0, X1, X2
	084 Compare X20, 0
	085 JumpIfEqual {134}
	086 Move X0, X20
	087 Move X1, X21
	088 Move X2, X31
	089 Call LTDescr.setOnUpdate, X0, X1
	090 Move X8, 0x2344000
	091 Move X8, [X8+3696]
	092 Move X20, X0
	093 Move X8, [X8]
	094 Move X0, X8
	095 Call 0x1C17F10
	096 Move X8, 0x2347000
	097 Move X8, [X8+2408]
	098 Move X1, X19
	099 Move X3, X31
	100 Move X21, X0
	101 Move X2, [X8]
	102 Call Action..ctor, X0, X1, X2
	103 Compare X20, 0
	104 JumpIfEqual {134}
	105 Move X0, X20
	106 Move X1, X21
	107 Move X2, X31
	108 Call LTDescr.setOnComplete, X0, X1
	109 Compare X0, 0
	110 JumpIfEqual {134}
	111 Move X1, X31
	112 Call LTDescr.get_id, X0
	113 Move X8, [X19+64]
	114 Move [X19+76], W0
	115 Compare X8, 0
	116 JumpIfEqual {134}
	117 Move X8, [X8+32]
	118 Compare X8, 0
	119 JumpIfEqual {126}
	120 Move W2, [X19+32]
	121 Move W1, [X19+36]
	122 Move X9, [X8+24]
	123 Move X0, [X8+64]
	124 Move X3, [X8+40]
	125 NotImplemented "Instruction BLR not yet implemented."
	126 Move X0, X31
	127 Call Time.get_time
	128 Move [X19+80], S0
	129 Move X20, [X31+16]
	130 Move X19, [X31+24]
	131 Move X30, [X31+32]
	132 Move X21, [X31+40]
	133 Return 
	134 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01DB12D4 ADRP X0, 0x2345000
	0x01DB12D8 LDR X0, [X0 + 0xE40]
	0x01DB12DC BL 0x1C16CF4
	0x01DB12E0 MOVZ W8, 0x1
	0x01DB12E4 STRB W8, [X21 + 0xAF5]

ISIL:
	001 Move W8, 0xCCCD
	002 NotImplemented "Instruction MOVK not yet implemented."
	003 Move X1, X31
	004 Move [X0+72], W8
	005 Call MonoBehaviour..ctor, X0
	006 Return 

Method: System.Void <Press>b__12_0(System.Single val)

Disassembly:
	0x01DB12E8 LDR X8, [X20]
	0x01DB12EC LDR X0, [X19]
	0x01DB12F0 LDR X8, [X8 + 0xB8]
	0x01DB12F4 LDR W9, [X0 + 0xE0]
	0x01DB12F8 LDR X19, [X8]
	0x01DB12FC CBNZ W9, 0x1DB1304
	0x01DB1300 BL 0x1C16DFC
	0x01DB1304 MOV X0, X19
	0x01DB1308 MOV X1, X31
	0x01DB130C MOV X2, X31
	0x01DB1310 BL 0x3C354F8
	0x01DB1314 TBZ X0, 0x0, 0x1DB133C
	0x01DB1318 LDR X8, [X20]
	0x01DB131C LDR X8, [X8 + 0xB8]
	0x01DB1320 LDR X8, [X8]
	0x01DB1324 CBZ X8, 0x1DB136C
	0x01DB1328 LDR X0, [X8 + 0x40]
	0x01DB132C CBZ X0, 0x1DB136C
	0x01DB1330 MOV X1, X31
	0x01DB1334 BL 0x1E93A0C
	0x01DB1338 B 0x1DB135C
	0x01DB133C ADRP X8, 0x2345000
	0x01DB1340 LDR X8, [X8 + 0xE40]
	0x01DB1344 LDR X0, [X8]
	0x01DB1348 LDR W8, [X0 + 0xE0]
	0x01DB134C CBNZ W8, 0x1DB1354
	0x01DB1350 BL 0x1C16DFC
	0x01DB1354 MOV X0, X31
	0x01DB1358 BL 0x1E8D7F4
	0x01DB135C LDP X20, X19, [X31 + 0x10]
	0x01DB1360 AND X0, X0, 0x0
	0x01DB1364 LDP X30, X21, [X31], #0x20
	0x01DB1368 RET
	0x01DB136C BL 0x1C16F20
	0x01DB1370 STP X30, X21, [X31 - 0x20]!
	0x01DB1374 STP X20, X19, [X31 + 0x10]
	0x01DB1378 ADRP X21, 0x2627000
	0x01DB137C ADRP X20, 0x2346000
	0x01DB1380 LDRB W8, [X21 + 0xAF6]
	0x01DB1384 LDR X20, [X20 + 0x9D8]
	0x01DB1388 MOV X19, X0
	0x01DB138C TBNZ X8, 0x0, 0x1DB13A4
	0x01DB1390 ADRP X0, 0x2346000
	0x01DB1394 LDR X0, [X0 + 0x9D8]
	0x01DB1398 BL 0x1C16CF4
	0x01DB139C MOVZ W8, 0x1
	0x01DB13A0 STRB W8, [X21 + 0xAF6]
	0x01DB13A4 MOV X0, X19
	0x01DB13A8 MOV X1, X31
	0x01DB13AC BL 0x1E73F88
	0x01DB13B0 LDR X8, [X20]
	0x01DB13B4 LDR X8, [X8 + 0xB8]
	0x01DB13B8 STR X19, [X8]
	0x01DB13BC LDP X20, X19, [X31 + 0x10]
	0x01DB13C0 LDP X30, X21, [X31], #0x20
	0x01DB13C4 RET
	0x01DB13C8 STP X30, X21, [X31 - 0x20]!
	0x01DB13CC STP X20, X19, [X31 + 0x10]
	0x01DB13D0 ADRP X21, 0x2627000
	0x01DB13D4 ADRP X20, 0x2342000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2628000
	007 Move X20, 0x2343000
	008 Move W8, [X21+2797]
	009 Move X20, [X20+1432]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x2345000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move X0, 0x2343000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+2797], W8
	024 Move X0, [X20]
	025 Move X20, [X19+48]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {55}
	038 Move X8, 0x2345000
	039 Move X8, [X8+1448]
	040 Move W19, [X19+76]
	041 Move X0, [X8]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move W0, W19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 Move X21, [X31+24]
	051 Move X1, X31
	052 Move V8, [X31+48]
	053 Call LeanTween.cancel, X0
	054 Return 
	055 Move X0, [X19+48]
	056 Compare X0, 0
	057 JumpIfEqual {77}
	058 Move V1, [X19+72]
	059 Move S3, 1
	060 Move S2, W31
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 NotImplemented "Instruction FMIN not yet implemented."
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X30, [X31+16]
	066 Move X21, [X31+24]
	067 NotImplemented "Instruction FCSEL not yet implemented."
	068 Subtract S2, S2, S1
	069 Multiply S2, S3, S2
	070 Move S0, W31
	071 Add S1, S1, S2
	072 Move S2, W31
	073 Move X1, X31
	074 Move V8, [X31+48]
	075 Call Transform.set_localPosition, X0, X1
	076 Return 
	077 Call 0x1C17F20

Method: System.Void <Press>b__12_1()

Disassembly:
	0x01DB13D8 LDRB W8, [X21 + 0xAF7]
	0x01DB13DC LDR X20, [X20 + 0x598]
	0x01DB13E0 MOV X19, X0
	0x01DB13E4 TBNZ X8, 0x0, 0x1DB1408
	0x01DB13E8 ADRP X0, 0x2345000
	0x01DB13EC LDR X0, [X0 + 0xD28]
	0x01DB13F0 BL 0x1C16CF4
	0x01DB13F4 ADRP X0, 0x2342000
	0x01DB13F8 LDR X0, [X0 + 0x598]
	0x01DB13FC BL 0x1C16CF4
	0x01DB1400 MOVZ W8, 0x1
	0x01DB1404 STRB W8, [X21 + 0xAF7]
	0x01DB1408 LDR X0, [X20]
	0x01DB140C LDR X20, [X19 + 0x40]
	0x01DB1410 LDR W8, [X0 + 0xE0]
	0x01DB1414 CBNZ W8, 0x1DB141C
	0x01DB1418 BL 0x1C16DFC
	0x01DB141C MOV X0, X20
	0x01DB1420 MOV X1, X31
	0x01DB1424 MOV X2, X31
	0x01DB1428 BL 0x3C354F8
	0x01DB142C TBZ X0, 0x0, 0x1DB148C
	0x01DB1430 LDR X0, [X19 + 0x40]
	0x01DB1434 CBZ X0, 0x1DB1498
	0x01DB1438 MOV X1, X31
	0x01DB143C BL 0x1E934B8
	0x01DB1440 TBZ X0, 0x0, 0x1DB148C
	0x01DB1444 ADRP X8, 0x2345000
	0x01DB1448 LDR X8, [X8 + 0xD28]
	0x01DB144C LDR X8, [X8]
	0x01DB1450 LDR X8, [X8 + 0xB8]
	0x01DB1454 LDR X20, [X8 + 0x30]
	0x01DB1458 CBZ X20, 0x1DB148C
	0x01DB145C LDR X0, [X19 + 0x40]
	0x01DB1460 CBZ X0, 0x1DB1498
	0x01DB1464 MOV X1, X31
	0x01DB1468 BL 0x1E93A0C
	0x01DB146C LDR X8, [X20 + 0x40]
	0x01DB1470 LDR X3, [X20 + 0x18]
	0x01DB1474 LDR X2, [X20 + 0x28]
	0x01DB1478 LDP X20, X19, [X31 + 0x10]
	0x01DB147C AND X1, X0, 0x0
	0x01DB1480 MOV X0, X8
	0x01DB1484 LDP X30, X21, [X31], #0x20
	0x01DB1488 BR X3
	0x01DB148C LDP X20, X19, [X31 + 0x10]
	0x01DB1490 LDP X30, X21, [X31], #0x20
	0x01DB1494 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2628000
	006 Move X20, 0x2343000
	007 Move W8, [X21+2798]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2343000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2798], W8
	019 Move X0, [X20]
	020 Move X20, [X19+48]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {38}
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 
	038 Move X20, 0x2628000
	039 Move W8, [X20+1923]
	040 Move X19, [X19+48]
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x2343000
	044 Move X0, [X0+1440]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X20+1923], W8
	048 Compare X19, 0
	049 JumpIfEqual {65}
	050 Move X8, 0x2343000
	051 Move X8, [X8+1440]
	052 Move X0, X19
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X1, X31
	056 Move X8, [X8]
	057 Move X8, [X8+184]
	058 Move S1, [X8+4]
	059 Move S2, [X8+8]
	060 Move V0, [X8]
	061 Move X30, [X31+32]
	062 Move X21, [X31+40]
	063 Call Transform.set_localPosition, X0, X1
	064 Return 
	065 Call 0x1C17F20

