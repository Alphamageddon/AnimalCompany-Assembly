Type: AnimalCompany.TerminalKeyInput

Method: System.Void OnDestroy()

Disassembly:
	0x01CB6204 MOV X2, X31
	0x01CB6208 BL 0x31E7550
	0x01CB620C ADRP X0, 0x2298000
	0x01CB6210 LDR X0, [X0 + 0xED0]
	0x01CB6214 BL 0x1B6E804
	0x01CB6218 MOV X1, X0
	0x01CB621C MOV X0, X19
	0x01CB6220 BL 0x1B6E8E8
	0x01CB6224 STP X30, X19, [X31 - 0x10]!
	0x01CB6228 LDR X8, [X0 + 0x50]
	0x01CB622C CBZ X8, 0x1CB623C
	0x01CB6230 STR S0, [X8 + 0x64]
	0x01CB6234 LDP X30, X19, [X31], #0x10
	0x01CB6238 RET
	0x01CB623C ADRP X0, 0x2297000
	0x01CB6240 LDR X0, [X0 + 0x490]
	0x01CB6244 BL 0x1B6E804
	0x01CB6248 BL 0x1B6EA0C
	0x01CB624C MOV X19, X0
	0x01CB6250 ADRP X0, 0x2298000
	0x01CB6254 LDR X0, [X0 + 0xEC8]
	0x01CB6258 BL 0x1B6E804
	0x01CB625C MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x256E000
	006 Move X20, 0x2299000
	007 Move W8, [X21+1245]
	008 Move X20, [X20+1696]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2299000
	015 Move X0, [X0+1696]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1245], W8
	019 Move X0, [X20]
	020 Move W19, [X19+72]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1B6F8F8
	025 Move W0, W19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call LeanTween.cancel, X0
	032 Return 

Method: System.Void OnTriggerEnter(UnityEngine.Collider other)

Disassembly:
	0x01CB6260 MOV X0, X19
	0x01CB6264 MOV X2, X31
	0x01CB6268 BL 0x31E7550
	0x01CB626C ADRP X0, 0x2298000
	0x01CB6270 LDR X0, [X0 + 0xED8]
	0x01CB6274 BL 0x1B6E804
	0x01CB6278 MOV X1, X0
	0x01CB627C MOV X0, X19
	0x01CB6280 BL 0x1B6E8E8
	0x01CB6284 LDR X0, [X0 + 0xC8]
	0x01CB6288 RET
	0x01CB628C STR X30, [X31 - 0x20]!
	0x01CB6290 STP X20, X19, [X31 + 0x10]
	0x01CB6294 ADRP X20, 0x256D000
	0x01CB6298 ADRP X19, 0x2298000
	0x01CB629C LDRB W8, [X20 + 0x4E5]
	0x01CB62A0 LDR X19, [X19 + 0x2A8]
	0x01CB62A4 TBNZ X8, 0x0, 0x1CB62BC
	0x01CB62A8 ADRP X0, 0x2298000
	0x01CB62AC LDR X0, [X0 + 0x2A8]
	0x01CB62B0 BL 0x1B6E7F0
	0x01CB62B4 MOVZ W8, 0x1
	0x01CB62B8 STRB W8, [X20 + 0x4E5]
	0x01CB62BC LDR X0, [X19]
	0x01CB62C0 LDR W8, [X0 + 0xE0]
	0x01CB62C4 CBNZ W8, 0x1CB62D0
	0x01CB62C8 BL 0x1B6E8F8
	0x01CB62CC LDR X0, [X19]
	0x01CB62D0 LDR X8, [X0 + 0xB8]
	0x01CB62D4 LDP X20, X19, [X31 + 0x10]
	0x01CB62D8 LDR X0, [X8]
	0x01CB62DC LDR X30, [X31], #0x20
	0x01CB62E0 RET
	0x01CB62E4 STP X30, X21, [X31 - 0x20]!
	0x01CB62E8 STP X20, X19, [X31 + 0x10]
	0x01CB62EC ADRP X19, 0x256D000
	0x01CB62F0 ADRP X20, 0x2298000
	0x01CB62F4 LDRB W8, [X19 + 0x4E7]
	0x01CB62F8 LDR X20, [X20 + 0x2A8]
	0x01CB62FC TBNZ X8, 0x0, 0x1CB6320
	0x01CB6300 ADRP X0, 0x2298000
	0x01CB6304 LDR X0, [X0 + 0x2A8]
	0x01CB6308 BL 0x1B6E7F0
	0x01CB630C ADRP X0, 0x2297000
	0x01CB6310 LDR X0, [X0 + 0x478]
	0x01CB6314 BL 0x1B6E7F0
	0x01CB6318 MOVZ W8, 0x1
	0x01CB631C STRB W8, [X19 + 0x4E7]
	0x01CB6320 LDR X0, [X20]
	0x01CB6324 ADRP X21, 0x2297000
	0x01CB6328 LDR W8, [X0 + 0xE0]
	0x01CB632C LDR X21, [X21 + 0x478]
	0x01CB6330 CBNZ W8, 0x1CB6338
	0x01CB6334 BL 0x1B6E8F8
	0x01CB6338 BL 0x1CAB1DC
	0x01CB633C LDR X8, [X21]
	0x01CB6340 MOV X19, X0
	0x01CB6344 LDR W9, [X8 + 0xE0]
	0x01CB6348 CBNZ W9, 0x1CB6354
	0x01CB634C MOV X0, X8
	0x01CB6350 BL 0x1B6E8F8
	0x01CB6354 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x256E000
	007 Move W8, [X21+1246]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2299000
	015 Move X0, [X0+3656]
	016 Call 0x1B6F7F0
	017 Move X0, 0x2298000
	018 Move X0, [X0+1144]
	019 Call 0x1B6F7F0
	020 Move W8, 1
	021 Move [X21+1246], W8
	022 Compare X20, 0
	023 JumpIfEqual {80}
	024 Move X22, 0x2298000
	025 Move X22, [X22+1144]
	026 Move X0, X20
	027 Move X1, X31
	028 Call Collider.get_attachedRigidbody, X0
	029 Move X8, [X22]
	030 Move X21, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1B6F8F8
	036 Move X0, X21
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Equality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {74}
	044 Move X0, X20
	045 Move X1, X31
	046 Call Component.get_gameObject, X0
	047 Compare X0, 0
	048 JumpIfEqual {80}
	049 Move X8, 0x2299000
	050 Move X8, [X8+3656]
	051 Move X1, [X8]
	052 Call 0x20CFEF0, X0
	053 Move X8, [X22]
	054 Move X20, X0
	055 Move W9, [X8+224]
	056 Compare W9, 0
	057 JumpIfNotEqual {60}
	058 Move X0, X8
	059 Call 0x1B6F8F8
	060 Move X0, X20
	061 Move X1, X31
	062 Move X2, X31
	063 Call Object.op_Inequality, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {74}
	068 Move X0, X19
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X30, [X31+48]
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X22, [X31+16]
	077 Move X21, [X31+24]
	078 Move X30, [X31+48]
	079 Return 
	080 Call 0x1B6FA1C

Method: System.Void Press()

Disassembly:
	0x01CB6358 MOV X1, X31
	0x01CB635C MOV X2, X31
	0x01CB6360 BL 0x3A9D6EC
	0x01CB6364 TBZ X0, 0x0, 0x1CB63DC
	0x01CB6368 LDR X0, [X20]
	0x01CB636C LDR W8, [X0 + 0xE0]
	0x01CB6370 CBNZ W8, 0x1CB6378
	0x01CB6374 BL 0x1B6E8F8
	0x01CB6378 BL 0x1CAB1DC
	0x01CB637C CBZ X0, 0x1CB63EC
	0x01CB6380 LDR X8, [X21]
	0x01CB6384 LDR X19, [X0 + 0x40]
	0x01CB6388 LDR W9, [X8 + 0xE0]
	0x01CB638C CBNZ W9, 0x1CB6398
	0x01CB6390 MOV X0, X8
	0x01CB6394 BL 0x1B6E8F8
	0x01CB6398 MOV X0, X19
	0x01CB639C MOV X1, X31
	0x01CB63A0 MOV X2, X31
	0x01CB63A4 BL 0x3A9D6EC
	0x01CB63A8 TBZ X0, 0x0, 0x1CB63DC
	0x01CB63AC LDR X0, [X20]
	0x01CB63B0 LDR W8, [X0 + 0xE0]
	0x01CB63B4 CBNZ W8, 0x1CB63BC
	0x01CB63B8 BL 0x1B6E8F8
	0x01CB63BC BL 0x1CAB1DC
	0x01CB63C0 CBZ X0, 0x1CB63EC
	0x01CB63C4 LDR X8, [X0 + 0x40]
	0x01CB63C8 CBZ X8, 0x1CB63EC
	0x01CB63CC LDR X8, [X8 + 0x20]
	0x01CB63D0 CBZ X8, 0x1CB63DC
	0x01CB63D4 LDR W0, [X8]
	0x01CB63D8 B 0x1CB63E0
	0x01CB63DC MOV W0, W31
	0x01CB63E0 LDP X20, X19, [X31 + 0x10]
	0x01CB63E4 LDP X30, X21, [X31], #0x20
	0x01CB63E8 RET
	0x01CB63EC BL 0x1B6EA1C
	0x01CB63F0 STR X30, [X31 - 0x10]!
	0x01CB63F4 LDR X8, [X0 + 0x40]
	0x01CB63F8 CBZ X8, 0x1CB6418
	0x01CB63FC LDR X8, [X8 + 0x20]
	0x01CB6400 CBZ X8, 0x1CB640C
	0x01CB6404 LDR W0, [X8]
	0x01CB6408 B 0x1CB6410
	0x01CB640C MOV W0, W31
	0x01CB6410 LDR X30, [X31], #0x10
	0x01CB6414 RET
	0x01CB6418 BL 0x1B6EA1C
	0x01CB641C LDR X0, [X0 + 0x118]
	0x01CB6420 RET
	0x01CB6424 STR X1, [X0 + 0x118]
	0x01CB6428 RET
	0x01CB642C STR X30, [X31 - 0x20]!
	0x01CB6430 STP X20, X19, [X31 + 0x10]
	0x01CB6434 ADRP X20, 0x256D000
	0x01CB6438 LDRB W8, [X20 + 0x4E8]
	0x01CB643C MOV X19, X0
	0x01CB6440 TBNZ X8, 0x0, 0x1CB6464
	0x01CB6444 ADRP X0, 0x2298000
	0x01CB6448 LDR X0, [X0 + 0x628]
	0x01CB644C BL 0x1B6E7F0
	0x01CB6450 ADRP X0, 0x2298000
	0x01CB6454 LDR X0, [X0 + 0xEE0]
	0x01CB6458 BL 0x1B6E7F0
	0x01CB645C MOVZ W8, 0x1
	0x01CB6460 STRB W8, [X20 + 0x4E8]
	0x01CB6464 LDR X0, [X19 + 0xB8]
	0x01CB6468 CBZ X0, 0x1CB64AC
	0x01CB646C ADRP X8, 0x2298000
	0x01CB6470 LDR X8, [X8 + 0xEE0]
	0x01CB6474 LDR X1, [X8]
	0x01CB6478 BL 0x208FDE8
	0x01CB647C LDR X8, [X19 + 0xA0]
	0x01CB6480 STR X0, [X19 + 0x128]
	0x01CB6484 CBZ X8, 0x1CB64AC
	0x01CB6488 ADRP X9, 0x2298000
	0x01CB648C LDR X9, [X9 + 0x628]
	0x01CB6490 MOV X0, X8
	0x01CB6494 LDR X1, [X9]
	0x01CB6498 BL 0x208FDE8
	0x01CB649C STR X0, [X19 + 0x118]
	0x01CB64A0 LDP X20, X19, [X31 + 0x10]
	0x01CB64A4 LDR X30, [X31], #0x20
	0x01CB64A8 RET
	0x01CB64AC BL 0x1B6EA1C
	0x01CB64B0 STR X30, [X31 - 0x30]!
	0x01CB64B4 STP X22, X21, [X31 + 0x10]
	0x01CB64B8 STP X20, X19, [X31 + 0x20]
	0x01CB64BC ADRP X22, 0x256D000
	0x01CB64C0 ADRP X21, 0x2298000
	0x01CB64C4 LDRB W8, [X22 + 0x4E9]
	0x01CB64C8 LDR X21, [X21 + 0x2A8]
	0x01CB64CC MOV X19, X1
	0x01CB64D0 MOV W20, W0
	0x01CB64D4 TBNZ X8, 0x0, 0x1CB64F8
	0x01CB64D8 ADRP X0, 0x2298000
	0x01CB64DC LDR X0, [X0 + 0xEE8]
	0x01CB64E0 BL 0x1B6E7F0
	0x01CB64E4 ADRP X0, 0x2298000
	0x01CB64E8 LDR X0, [X0 + 0x2A8]
	0x01CB64EC BL 0x1B6E7F0
	0x01CB64F0 MOVZ W8, 0x1
	0x01CB64F4 STRB W8, [X22 + 0x4E9]
	0x01CB64F8 LDR X0, [X21]
	0x01CB64FC LDR W8, [X0 + 0xE0]
	0x01CB6500 CBNZ W8, 0x1CB650C
	0x01CB6504 BL 0x1B6E8F8
	0x01CB6508 LDR X0, [X21]
	0x01CB650C LDR X8, [X0 + 0xB8]
	0x01CB6510 LDR X0, [X8]
	0x01CB6514 CBZ X0, 0x1CB653C
	0x01CB6518 ADRP X8, 0x2298000
	0x01CB651C LDR X8, [X8 + 0xEE8]
	0x01CB6520 MOV W1, W20
	0x01CB6524 MOV X2, X19
	0x01CB6528 LDP X20, X19, [X31 + 0x20]
	0x01CB652C LDR X3, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x256E000
	006 Move W8, [X20+1247]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {29}
	012 Move X0, 0x2299000
	013 Move X0, [X0+1736]
	014 Call 0x1B6F7F0
	015 Move X0, 0x2299000
	016 Move X0, [X0+368]
	017 Call 0x1B6F7F0
	018 Move X0, 0x2299000
	019 Move X0, [X0+1696]
	020 Call 0x1B6F7F0
	021 Move X0, 0x2299000
	022 Move X0, [X0+3664]
	023 Call 0x1B6F7F0
	024 Move X0, 0x2299000
	025 Move X0, [X0+3672]
	026 Call 0x1B6F7F0
	027 Move W8, 1
	028 Move [X20+1247], W8
	029 Move X0, X31
	030 Call Time.get_time
	031 Move V1, [X19+76]
	032 Subtract S0, S0, S1
	033 Move S1, 0.25
	034 NotImplemented "Instruction FCMP not yet implemented."
	035 Move X20, [X19+56]
	036 Move X0, X19
	037 Move X1, X31
	038 Call Component.get_transform, X0
	039 Compare X0, 0
	040 JumpIfEqual {134}
	041 Move X1, X31
	042 Call Transform.get_position, X0
	043 Compare X20, 0
	044 JumpIfEqual {134}
	045 Move S3, 1
	046 Move W1, 1
	047 Move X0, X20
	048 Move X2, X31
	049 Call RandomSFX.Play, X0, X1, V0, X2
	050 Move X8, 0x2299000
	051 Move X8, [X8+1696]
	052 Move W20, [X19+72]
	053 Move X0, [X8]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1B6F8F8
	058 Move W0, W20
	059 Move X1, X31
	060 Call LeanTween.cancel, X0
	061 Move X8, -18923520
	062 Move V2, [X8+3616]
	063 Move S0, W31
	064 Move S1, 1
	065 Move X0, X31
	066 Call LeanTween.value, V0, V1, V2
	067 Compare X0, 0
	068 JumpIfEqual {134}
	069 Move X1, X31
	070 Call LTDescr.setEaseOutCirc, X0
	071 Move X8, 0x2299000
	072 Move X8, [X8+1736]
	073 Move X20, X0
	074 Move X8, [X8]
	075 Move X0, X8
	076 Call 0x1B6FA0C
	077 Move X8, 0x2299000
	078 Move X8, [X8+3664]
	079 Move X1, X19
	080 Move X3, X31
	081 Move X21, X0
	082 Move X2, [X8]
	083 Call Action`1<Single>..ctor, X0, X1, X2
	084 Compare X20, 0
	085 JumpIfEqual {134}
	086 Move X0, X20
	087 Move X1, X21
	088 Move X2, X31
	089 Call LTDescr.setOnUpdate, X0, X1
	090 Move X8, 0x2299000
	091 Move X8, [X8+368]
	092 Move X20, X0
	093 Move X8, [X8]
	094 Move X0, X8
	095 Call 0x1B6FA0C
	096 Move X8, 0x2299000
	097 Move X8, [X8+3672]
	098 Move X1, X19
	099 Move X3, X31
	100 Move X21, X0
	101 Move X2, [X8]
	102 Call Action..ctor, X0, X1, X2
	103 Compare X20, 0
	104 JumpIfEqual {134}
	105 Move X0, X20
	106 Move X1, X21
	107 Move X2, X31
	108 Call LTDescr.setOnComplete, X0, X1
	109 Compare X0, 0
	110 JumpIfEqual {134}
	111 Move X1, X31
	112 Call LTDescr.get_id, X0
	113 Move X8, [X19+64]
	114 Move [X19+72], W0
	115 Compare X8, 0
	116 JumpIfEqual {134}
	117 Move X8, [X8+32]
	118 Compare X8, 0
	119 JumpIfEqual {126}
	120 Move W2, [X19+32]
	121 Move W1, [X19+36]
	122 Move X9, [X8+24]
	123 Move X0, [X8+64]
	124 Move X3, [X8+40]
	125 NotImplemented "Instruction BLR not yet implemented."
	126 Move X0, X31
	127 Call Time.get_time
	128 Move [X19+76], S0
	129 Move X20, [X31+16]
	130 Move X19, [X31+24]
	131 Move X30, [X31+32]
	132 Move X21, [X31+40]
	133 Return 
	134 Call 0x1B6FA1C

Method: System.Void .ctor()

Disassembly:
	0x01CB654C STP X24, X23, [X31 + 0x30]
	0x01CB6550 STP X22, X21, [X31 + 0x40]

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

Method: System.Void <Press>b__11_0(System.Single val)

Disassembly:
	0x01CB6554 STP X20, X19, [X31 + 0x50]
	0x01CB6558 ADRP X20, 0x256D000
	0x01CB655C LDRB W8, [X20 + 0x4EA]
	0x01CB6560 MOV X19, X0
	0x01CB6564 TBNZ X8, 0x0, 0x1CB6654
	0x01CB6568 ADRP X0, 0x2297000
	0x01CB656C LDR X0, [X0 + 0xB38]
	0x01CB6570 BL 0x1B6E7F0
	0x01CB6574 ADRP X0, 0x2298000
	0x01CB6578 LDR X0, [X0 + 0xEF0]
	0x01CB657C BL 0x1B6E7F0
	0x01CB6580 ADRP X0, 0x2298000
	0x01CB6584 LDR X0, [X0 + 0xEF8]
	0x01CB6588 BL 0x1B6E7F0
	0x01CB658C ADRP X0, 0x2298000
	0x01CB6590 LDR X0, [X0 + 0x270]
	0x01CB6594 BL 0x1B6E7F0
	0x01CB6598 ADRP X0, 0x2298000
	0x01CB659C LDR X0, [X0 + 0xF00]
	0x01CB65A0 BL 0x1B6E7F0
	0x01CB65A4 ADRP X0, 0x2298000
	0x01CB65A8 LDR X0, [X0 + 0x170]
	0x01CB65AC BL 0x1B6E7F0
	0x01CB65B0 ADRP X0, 0x2297000
	0x01CB65B4 LDR X0, [X0 + 0x4E8]
	0x01CB65B8 BL 0x1B6E7F0
	0x01CB65BC ADRP X0, 0x2298000
	0x01CB65C0 LDR X0, [X0 + 0xF08]
	0x01CB65C4 BL 0x1B6E7F0
	0x01CB65C8 ADRP X0, 0x2297000
	0x01CB65CC LDR X0, [X0 + 0xBA0]
	0x01CB65D0 BL 0x1B6E7F0
	0x01CB65D4 ADRP X0, 0x2298000
	0x01CB65D8 LDR X0, [X0 + 0xF10]
	0x01CB65DC BL 0x1B6E7F0
	0x01CB65E0 ADRP X0, 0x2298000
	0x01CB65E4 LDR X0, [X0 + 0xF18]
	0x01CB65E8 BL 0x1B6E7F0
	0x01CB65EC ADRP X0, 0x2298000
	0x01CB65F0 LDR X0, [X0 + 0xF20]
	0x01CB65F4 BL 0x1B6E7F0
	0x01CB65F8 ADRP X0, 0x2298000
	0x01CB65FC LDR X0, [X0 + 0xF28]
	0x01CB6600 BL 0x1B6E7F0
	0x01CB6604 ADRP X0, 0x2298000
	0x01CB6608 LDR X0, [X0 + 0xF30]
	0x01CB660C BL 0x1B6E7F0
	0x01CB6610 ADRP X0, 0x2298000
	0x01CB6614 LDR X0, [X0 + 0xF38]
	0x01CB6618 BL 0x1B6E7F0
	0x01CB661C ADRP X0, 0x2298000
	0x01CB6620 LDR X0, [X0 + 0xF40]
	0x01CB6624 BL 0x1B6E7F0
	0x01CB6628 ADRP X0, 0x2298000
	0x01CB662C LDR X0, [X0 + 0x2A8]
	0x01CB6630 BL 0x1B6E7F0
	0x01CB6634 ADRP X0, 0x2297000
	0x01CB6638 LDR X0, [X0 + 0xB90]
	0x01CB663C BL 0x1B6E7F0
	0x01CB6640 ADRP X0, 0x2298000
	0x01CB6644 LDR X0, [X0 + 0x198]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x256E000
	007 Move X20, 0x2298000
	008 Move W8, [X21+1248]
	009 Move X20, [X20+1144]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x2299000
	017 Move X0, [X0+1696]
	018 Call 0x1B6F7F0
	019 Move X0, 0x2298000
	020 Move X0, [X0+1144]
	021 Call 0x1B6F7F0
	022 Move W8, 1
	023 Move [X21+1248], W8
	024 Move X0, [X20]
	025 Move X20, [X19+48]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1B6F8F8
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {55}
	038 Move X8, 0x2299000
	039 Move X8, [X8+1696]
	040 Move W19, [X19+72]
	041 Move X0, [X8]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1B6F8F8
	046 Move W0, W19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 Move X21, [X31+24]
	051 Move X1, X31
	052 Move V8, [X31+48]
	053 Call LeanTween.cancel, X0
	054 Return 
	055 Move X0, [X19+48]
	056 Compare X0, 0
	057 JumpIfEqual {78}
	058 Move X8, -18923520
	059 Move X9, -18923520
	060 Move V2, [X8+3304]
	061 Move V3, [X9+3012]
	062 Move S1, 1
	063 NotImplemented "Instruction FMIN not yet implemented."
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X30, [X31+16]
	067 Move X21, [X31+24]
	068 Multiply S1, S1, S2
	069 NotImplemented "Instruction FCMP not yet implemented."
	070 Add S1, S1, S3
	071 Move S0, W31
	072 NotImplemented "Instruction FCSEL not yet implemented."
	073 Move S2, W31
	074 Move X1, X31
	075 Move V8, [X31+48]
	076 Call Transform.set_localPosition, X0, X1
	077 Return 
	078 Call 0x1B6FA1C

Method: System.Void <Press>b__11_1()

Disassembly:
	0x01CB6648 BL 0x1B6E7F0
	0x01CB664C MOVZ W8, 0x1
	0x01CB6650 STRB W8, [X20 + 0x4EA]
	0x01CB6654 MOVZ W2, 0x1
	0x01CB6658 MOV X0, X19
	0x01CB665C MOV W1, W31
	0x01CB6660 MOV X3, X31
	0x01CB6664 BL 0x1D6519C
	0x01CB6668 LDR X8, [X19 + 0x40]
	0x01CB666C STR X0, [X19 + 0x100]
	0x01CB6670 CBZ X8, 0x1CB6C58
	0x01CB6674 MOV X0, X8
	0x01CB6678 MOV X1, X31
	0x01CB667C BL 0x1D9E6A0
	0x01CB6680 LDR X8, [X19 + 0xA8]
	0x01CB6684 TBZ X0, 0x0, 0x1CB6838
	0x01CB6688 CBZ X8, 0x1CB6C58
	0x01CB668C MOV X0, X8
	0x01CB6690 MOV X1, X31
	0x01CB6694 BL 0x3A9B0C0
	0x01CB6698 CBZ X0, 0x1CB6C58
	0x01CB669C MOV W1, W31
	0x01CB66A0 MOV X2, X31
	0x01CB66A4 BL 0x3A9D9A8
	0x01CB66A8 MOV X0, X19
	0x01CB66AC BL 0x1CB6C6C
	0x01CB66B0 ADRP X8, 0x2297000
	0x01CB66B4 LDR X8, [X8 + 0xB90]
	0x01CB66B8 LDR X0, [X8]
	0x01CB66BC BL 0x1B6EA0C
	0x01CB66C0 ADRP X8, 0x2298000
	0x01CB66C4 LDR X8, [X8 + 0xF30]
	0x01CB66C8 MOV X1, X19
	0x01CB66CC MOV X3, X31
	0x01CB66D0 MOV X20, X0
	0x01CB66D4 LDR X2, [X8]
	0x01CB66D8 BL 0x342E500
	0x01CB66DC ADRP X8, 0x2297000
	0x01CB66E0 LDR X8, [X8 + 0xBA0]
	0x01CB66E4 MOVZ W1, 0x1
	0x01CB66E8 LDR X0, [X8]
	0x01CB66EC BL 0x1B6E868
	0x01CB66F0 ADRP X22, 0x2297000
	0x01CB66F4 LDR X22, [X22 + 0x4E8]
	0x01CB66F8 MOV X21, X0
	0x01CB66FC LDR X8, [X22]
	0x01CB6700 LDR W9, [X8 + 0xE0]
	0x01CB6704 CBNZ W9, 0x1CB6710

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x256E000
	006 Move X20, 0x2298000
	007 Move W8, [X21+1249]
	008 Move X20, [X20+1144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2298000
	015 Move X0, [X0+1144]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X21+1249], W8
	019 Move X0, [X20]
	020 Move X20, [X19+48]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1B6F8F8
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {38}
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 
	038 Move X20, 0x256E000
	039 Move W8, [X20+1087]
	040 Move X19, [X19+48]
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x2298000
	044 Move X0, [X0+1152]
	045 Call 0x1B6F7F0
	046 Move W8, 1
	047 Move [X20+1087], W8
	048 Compare X19, 0
	049 JumpIfEqual {65}
	050 Move X8, 0x2298000
	051 Move X8, [X8+1152]
	052 Move X0, X19
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X1, X31
	056 Move X8, [X8]
	057 Move X8, [X8+184]
	058 Move S1, [X8+4]
	059 Move S2, [X8+8]
	060 Move V0, [X8]
	061 Move X30, [X31+32]
	062 Move X21, [X31+40]
	063 Call Transform.set_localPosition, X0, X1
	064 Return 
	065 Call 0x1B6FA1C

