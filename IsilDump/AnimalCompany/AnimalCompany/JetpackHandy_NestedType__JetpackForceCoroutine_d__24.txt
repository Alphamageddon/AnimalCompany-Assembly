Type: AnimalCompany.JetpackHandy/<JetpackForceCoroutine>d__24

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x01DA09E4 LDR X20, [X19 + 0x90]
	0x01DA09E8 CBNZ W8, 0x1DA0A00
	0x01DA09EC ADRP X0, 0x2354000
	0x01DA09F0 LDR X0, [X0 + 0x5A8]
	0x01DA09F4 BL 0x1C16CF4
	0x01DA09F8 MOVZ W8, 0x1
	0x01DA09FC STRB W8, [X22 + 0x793]
	0x01DA0A00 CBZ X20, 0x1DA0F88
	0x01DA0A04 ADRP X8, 0x2354000
	0x01DA0A08 LDR X8, [X8 + 0x5A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x00000000 INVALID

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x01DA0E98 FADDP S0, V0.2S
	0x01DA0E9C FMUL S1, S9, S9
	0x01DA0EA0 FADD S10, S0, S1
	0x01DA0EA4 FCMP S10, S8
	0x01DA0EA8 B.LE 0x1DA0EC0
	0x01DA0EAC MOV X0, X19
	0x01DA0EB0 MOV W1, W31
	0x01DA0EB4 BL 0x1DA016C
	0x01DA0EB8 MOV X0, X19
	0x01DA0EBC BL 0x1DA06F0
	0x01DA0EC0 ADRP X8, 0xFFFFFFFFFED4A000
	0x01DA0EC4 LDR V0, [X8 + 0x2CC]
	0x01DA0EC8 ADRP X8, 0xFFFFFFFFFED4A000
	0x01DA0ECC LDR V1, [X8 + 0x5C]
	0x01DA0ED0 FDIV S8, S10, S8
	0x01DA0ED4 FADD S0, S8, S0
	0x01DA0ED8 FDIV S0, S0, S1
	0x01DA0EDC FCMP S0, 0x0
	0x01DA0EE0 B.MI 0x1DA0A28
	0x01DA0EE4 FMOV S1, 1
	0x01DA0EE8 FCMP S0, S1
	0x01DA0EEC B.GT 0x1DA0F00
	0x01DA0EF0 ADRP X8, 0xFFFFFFFFFED4A000
	0x01DA0EF4 LDR V1, [X8 + 0x330]
	0x01DA0EF8 FCMP S0, S1
	0x01DA0EFC B.LE 0x1DA0A28
	0x01DA0F00 LDR X8, [X19 + 0xB0]
	0x01DA0F04 CBZ X8, 0x1DA0F88
	0x01DA0F08 LDR X0, [X22]
	0x01DA0F0C LDR X20, [X8 + 0x150]
	0x01DA0F10 LDR W9, [X0 + 0xE0]
	0x01DA0F14 CBNZ W9, 0x1DA0F1C
	0x01DA0F18 BL 0x1C16DFC
	0x01DA0F1C MOV X0, X20
	0x01DA0F20 MOV X1, X31
	0x01DA0F24 MOV X2, X31
	0x01DA0F28 BL 0x3C354F8
	0x01DA0F2C TBZ X0, 0x0, 0x1DA0A28
	0x01DA0F30 LDR X8, [X19 + 0xB0]
	0x01DA0F34 CBZ X8, 0x1DA0F88
	0x01DA0F38 LDR X0, [X8 + 0x150]
	0x01DA0F3C CBZ X0, 0x1DA0F88
	0x01DA0F40 MOV X1, X31
	0x01DA0F44 BL 0x1D881A0
	0x01DA0F48 TBZ X0, 0x0, 0x1DA0A28
	0x01DA0F4C LDR X8, [X19 + 0xB0]
	0x01DA0F50 CBZ X8, 0x1DA0F88
	0x01DA0F54 LDR X8, [X8 + 0x150]
	0x01DA0F58 CBZ X8, 0x1DA0F88
	0x01DA0F5C LDR W8, [X8 + 0x80]
	0x01DA0F60 MOV X0, X31
	0x01DA0F64 CMP W8, 0x0
	0x01DA0F68 CSET W20, NE
	0x01DA0F6C BL 0x3C3C714
	0x01DA0F70 FADD S1, S0, S0
	0x01DA0F74 MOV W0, W20
	0x01DA0F78 MOV V0.16B, V8.16B
	0x01DA0F7C MOV X1, X31
	0x01DA0F80 BL 0x1DC2324
	0x01DA0F84 B 0x1DA0A28
	0x01DA0F88 BL 0x1C16F20
	0x01DA0F8C STR X30, [X31 - 0x20]!
	0x01DA0F90 STP X20, X19, [X31 + 0x10]
	0x01DA0F94 ADRP X20, 0x2638000
	0x01DA0F98 LDRB W8, [X20 + 0xA91]
	0x01DA0F9C MOV X19, X0
	0x01DA0FA0 TBNZ X8, 0x0, 0x1DA0FB8
	0x01DA0FA4 ADRP X0, 0x2356000
	0x01DA0FA8 LDR X0, [X0 + 0x398]
	0x01DA0FAC BL 0x1C16CF4
	0x01DA0FB0 MOVZ W8, 0x1
	0x01DA0FB4 STRB W8, [X20 + 0xA91]
	0x01DA0FB8 LDR X0, [X19 + 0x80]
	0x01DA0FBC CBZ X0, 0x1DA1030
	0x01DA0FC0 ADRP X20, 0x2356000
	0x01DA0FC4 LDR X20, [X20 + 0x398]
	0x01DA0FC8 MOV X1, X31
	0x01DA0FCC BL 0x1D8EB5C
	0x01DA0FD0 LDR X8, [X20]
	0x01DA0FD4 MOV X20, X0
	0x01DA0FD8 LDR W9, [X8 + 0xE0]
	0x01DA0FDC CBZ W9, 0x1DA1014
	0x01DA0FE0 CBZ W20, 0x1DA1020
	0x01DA0FE4 LDR X0, [X19 + 0x80]
	0x01DA0FE8 CBZ X0, 0x1DA1030
	0x01DA0FEC LDR X19, [X19 + 0x38]
	0x01DA0FF0 MOV X1, X31
	0x01DA0FF4 BL 0x1D8EB5C
	0x01DA0FF8 CBZ X19, 0x1DA1030
	0x01DA0FFC AND X1, X0, 0x0
	0x01DA1000 MOV X0, X19
	0x01DA1004 LDP X20, X19, [X31 + 0x10]
	0x01DA1008 MOV X2, X31
	0x01DA100C LDR X30, [X31], #0x20
	0x01DA1010 B 0x1EA37F8
	0x01DA1014 MOV X0, X8
	0x01DA1018 BL 0x1C16DFC
	0x01DA101C CBNZ W20, 0x1DA0FE4
	0x01DA1020 LDP X20, X19, [X31 + 0x10]
	0x01DA1024 MOV W0, W31
	0x01DA1028 LDR X30, [X31], #0x20
	0x01DA102C RET
	0x01DA1030 BL 0x1C16F20
	0x01DA1034 SUB X31, X31, 0xA0
	0x01DA1038 STP D15, D14, [X31 + 0x40]
	0x01DA103C STP D13, D12, [X31 + 0x50]
	0x01DA1040 STP D11, D10, [X31 + 0x60]
	0x01DA1044 STP D9, D8, [X31 + 0x70]
	0x01DA1048 STP X30, X21, [X31 + 0x80]
	0x01DA104C STP X20, X19, [X31 + 0x90]
	0x01DA1050 ADRP X20, 0x2637000
	0x01DA1054 LDRB W8, [X20 + 0xA72]
	0x01DA1058 MOV V8.16B, V0.16B
	0x01DA105C MOV X19, X0
	0x01DA1060 TBNZ X8, 0x0, 0x1DA1090
	0x01DA1064 ADRP X0, 0x2356000
	0x01DA1068 LDR X0, [X0 + 0x278]
	0x01DA106C BL 0x1C16CF4
	0x01DA1070 ADRP X0, 0x2352000
	0x01DA1074 LDR X0, [X0 + 0x598]
	0x01DA1078 BL 0x1C16CF4
	0x01DA107C ADRP X0, 0x2352000
	0x01DA1080 LDR X0, [X0 + 0x5F8]
	0x01DA1084 BL 0x1C16CF4
	0x01DA1088 MOVZ W8, 0x1
	0x01DA108C STRB W8, [X20 + 0xA72]
	0x01DA1090 MOVI V0.2D, 0x0
	0x01DA1094 STUR V0, [X31 + 0x2C]
	0x01DA1098 STP V0, V0, [X31 + 0x10]
	0x01DA109C LDR X8, [X19 + 0xB0]
	0x01DA10A0 CBZ X8, 0x1DA1300
	0x01DA10A4 ADRP X21, 0x2352000
	0x01DA10A8 LDR X21, [X21 + 0x598]
	0x01DA10AC LDR X20, [X8 + 0x150]
	0x01DA10B0 LDR X0, [X21]
	0x01DA10B4 LDR W9, [X0 + 0xE0]
	0x01DA10B8 CBNZ W9, 0x1DA10C0

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x2639000
	007 Move W8, [X20+2668]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2357000
	014 Move X0, [X0+3120]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+2668], W8
	018 Move [X31+12], W31
	019 Move W8, [X19+16]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X21, [X19+32]
	022 Move X9, -19341312
	023 Add X9, X9, 2336
	024 NotImplemented "Instruction ADR not yet implemented."
	025 Move W11, [X9]
	026 Add X10, X10, X11
	027 CallNoReturn X10
	028 Move TEMP, 0
	029 Not TEMP
	030 Move W8, TEMP
	031 Move [X19+16], W8
	032 Compare X21, 0
	033 JumpIfEqual {164}
	034 Move X0, [X21+136]
	035 Compare X0, 0
	036 JumpIfEqual {164}
	037 Move X20, [X21+128]
	038 Move X1, X31
	039 Call Transform.get_forward, X0
	040 Compare X20, 0
	041 JumpIfEqual {164}
	042 Move S3, 7
	043 Multiply S2, S2, S3
	044 Multiply S1, S1, S3
	045 Multiply S0, S0, S3
	046 Move X0, X20
	047 Move X1, X31
	048 Call GrabbableItem.AddExternalForce, X0, X1
	049 Move W0, 1
	050 Move [X19+24], X31
	051 Move [X19+16], W0
	052 Move TEMP, 0
	053 Not TEMP
	054 Move W8, TEMP
	055 Move S8, W31
	056 Move [X19+40], W31
	057 Move [X19+16], W8
	058 Move V8, [X19+40]
	059 Move S0, 2
	060 Move TEMP, 0
	061 Not TEMP
	062 Move W8, TEMP
	063 Move [X19+16], W8
	064 NotImplemented "Instruction FCMP not yet implemented."
	065 Move X0, X31
	066 Call Time.get_deltaTime
	067 Add S0, S8, S0
	068 Move [X19+40], S0
	069 Compare X21, 0
	070 JumpIfEqual {164}
	071 Move X0, [X21+128]
	072 Compare X0, 0
	073 JumpIfEqual {164}
	074 Move X1, X31
	075 Call GrabbableItem.get_isAttached, X0
	076 Move X20, [X21+128]
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {125}
	081 Move X0, [X21+136]
	082 Compare X0, 0
	083 JumpIfEqual {164}
	084 Move X1, X31
	085 Call Transform.get_forward, X0
	086 Compare X20, 0
	087 JumpIfEqual {164}
	088 Move X8, -19615744
	089 Move V3, [X8+1044]
	090 Move X0, X20
	091 Move X1, X31
	092 Multiply S2, S2, S3
	093 Multiply S1, S1, S3
	094 Multiply S0, S0, S3
	095 Call GrabbableItem.AddExternalForce, X0, X1
	096 Move X0, [X21+128]
	097 Compare X0, 0
	098 JumpIfEqual {164}
	099 Add X1, X31, 12
	100 Move X2, X31
	101 Call GrabbableItem.TryGetHandSide, X0, X1
	102 Move TEMP, X0
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfNotEqual {144}
	106 Move X8, -19615744
	107 Move X9, -19615744
	108 Move W0, [X31+12]
	109 Move V0, [X8+1100]
	110 Move V1, [X9+188]
	111 Move X1, X31
	112 Call XRInputManager.SendHapticImpulse, X0, V0, V1
	113 Move TEMP, 0
	114 Not TEMP
	115 Move W8, TEMP
	116 Move [X19+16], W8
	117 Compare X21, 0
	118 JumpIfEqual {164}
	119 Move X0, [X21+128]
	120 Compare X0, 0
	121 JumpIfEqual {164}
	122 Move X1, X31
	123 Call GrabbableItem.Despawn, X0
	124 Move W0, W31
	125 Compare X20, 0
	126 JumpIfEqual {164}
	127 Move X0, [X21+136]
	128 Compare X0, 0
	129 JumpIfEqual {164}
	130 Move X20, [X20+360]
	131 Move X1, X31
	132 Call Transform.get_forward, X0
	133 Compare X20, 0
	134 JumpIfEqual {164}
	135 Move X8, -19619840
	136 Move V3, [X8+1044]
	137 Move W1, 2
	138 Move X0, X20
	139 Move X2, X31
	140 Multiply S2, S2, S3
	141 Multiply S1, S1, S3
	142 Multiply S0, S0, S3
	143 Call Rigidbody.AddForce, X0, X1, X2
	144 Move W8, 2
	145 Move [X19+24], X31
	146 Move X8, 0x2356000
	147 Move X8, [X8+3120]
	148 Move X0, [X8]
	149 Call 0x1C17F10
	150 Move S0, 4
	151 Move X1, X31
	152 Move X20, X0
	153 Call WaitForSeconds..ctor, X0, V0
	154 Move [X19+24], X20
	155 Move W8, 3
	156 Move [X19+16], W8
	157 Move W0, 1
	158 Move X20, [X31+32]
	159 Move X19, [X31+40]
	160 Move X30, [X31+16]
	161 Move X21, [X31+24]
	162 Move V8, [X31+48]
	163 Return X0
	164 Call 0x1C17F20

Method: System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()

Disassembly:
	0x01DA10BC BL 0x1C16DFC
	0x01DA10C0 MOV X0, X20

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x01DA10C4 MOV X1, X31
	0x01DA10C8 MOV X2, X31
	0x01DA10CC BL 0x3C354F8
	0x01DA10D0 TBZ X0, 0x0, 0x1DA10F0
	0x01DA10D4 LDR X8, [X19 + 0xB0]
	0x01DA10D8 CBZ X8, 0x1DA1300
	0x01DA10DC LDR X0, [X8 + 0x150]
	0x01DA10E0 CBZ X0, 0x1DA1300
	0x01DA10E4 MOV X1, X31
	0x01DA10E8 BL 0x1D881A0
	0x01DA10EC TBZ X0, 0x0, 0x1DA12E0
	0x01DA10F0 LDR X0, [X19 + 0x88]
	0x01DA10F4 CBZ X0, 0x1DA1300
	0x01DA10F8 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x2353000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x2357000
	011 Move X0, [X0+560]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x01DA10FC BL 0x3C3F58C
	0x01DA1100 LDR X0, [X19 + 0x88]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

