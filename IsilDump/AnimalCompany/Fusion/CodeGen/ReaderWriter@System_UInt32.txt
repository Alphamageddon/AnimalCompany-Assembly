Type: Fusion.CodeGen.ReaderWriter@System_UInt32

Method: System.UInt32 Read(System.Byte* data, System.Int32 index)

Disassembly:
	0x01D7A88C ADRP X0, 0x237C000
	0x01D7A890 LDR X0, [X0 + 0x400]
	0x01D7A894 BL 0x1C16CF4

ISIL:
	001 Move W8, W2
	002 ShiftRight W8, 30
	003 And W8, W8, 0x1FFFFFFF
	004 Move W0, [X1]
	005 Return X0

Method: System.UInt32 ReadRef(System.Byte* data, System.Int32 index)

Disassembly:
	0x01D7A898 ADRP X0, 0x237C000
	0x01D7A89C LDR X0, [X0 + 0x408]
	0x01D7A8A0 BL 0x1C16CF4

ISIL:
	001 Move W8, W2
	002 ShiftRight W8, 30
	003 And W8, W8, 0x1FFFFFFF
	004 Add X0, X1, W8
	005 Return X0

Method: System.Void Write(System.Byte* data, System.Int32 index, System.UInt32 val)

Disassembly:
	0x01D7A8A4 ADRP X0, 0x237C000
	0x01D7A8A8 LDR X0, [X0 + 0x410]
	0x01D7A8AC BL 0x1C16CF4

ISIL:
	001 Move W8, W2
	002 ShiftRight W8, 30
	003 And W8, W8, 0x1FFFFFFF
	004 Move [X1], W3
	005 Return 

Method: System.Int32 GetElementWordCount()

Disassembly:
	0x01D7A8B0 MOVZ W8, 0x1
	0x01D7A8B4 STRB W8, [X20 + 0x93F]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Int32 GetElementHashCode(System.UInt32 val)

Disassembly:
	0x01D7A8B8 LDR X8, [X19 + 0x28]
	0x01D7A8BC CBZ X8, 0x1D7A914
	0x01D7A8C0 ADRP X9, 0x237C000
	0x01D7A8C4 LDR X9, [X9 + 0x408]
	0x01D7A8C8 ADRP X21, 0x237C000
	0x01D7A8CC LDR X20, [X8 + 0xB8]
	0x01D7A8D0 LDR X0, [X9]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31+12], W1
	003 Add X0, X31, 12
	004 Move X1, X31
	005 Call UInt32.GetHashCode, X0
	006 Move X30, [X31+16]
	007 Return X0

Method: Fusion.IElementReaderWriter`1<System.UInt32> GetInstance()

Disassembly:
	0x01D7A8D4 LDR X21, [X21 + 0x400]
	0x01D7A8D8 BL 0x1C16F10
	0x01D7A8DC LDR X2, [X21]
	0x01D7A8E0 MOV X1, X19
	0x01D7A8E4 MOV X3, X31
	0x01D7A8E8 MOV X21, X0
	0x01D7A8EC BL 0x2725C6C
	0x01D7A8F0 CBZ X20, 0x1D7A914
	0x01D7A8F4 ADRP X8, 0x237C000
	0x01D7A8F8 LDR X8, [X8 + 0x410]
	0x01D7A8FC MOV X0, X20
	0x01D7A900 LDP X20, X19, [X31 + 0x10]
	0x01D7A904 MOV X1, X21
	0x01D7A908 LDR X2, [X8]
	0x01D7A90C LDP X30, X21, [X31], #0x20
	0x01D7A910 B 0x2729B68
	0x01D7A914 BL 0x1C16F20
	0x01D7A918 LDR X0, [X0 + 0x20]
	0x01D7A91C MOV X1, X31
	0x01D7A920 B 0x32277A8
	0x01D7A924 RET
	0x01D7A928 STP X30, X21, [X31 - 0x20]!
	0x01D7A92C STP X20, X19, [X31 + 0x10]
	0x01D7A930 MOV X19, X0
	0x01D7A934 LDR X0, [X0 + 0x28]
	0x01D7A938 CBZ X0, 0x1D7A9F4
	0x01D7A93C MOV X1, X31
	0x01D7A940 BL 0x3C32E90
	0x01D7A944 ADRP X21, 0x265E000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x265F000
	005 Move X19, 0x237D000
	006 Move W8, [X20+2357]
	007 Move X19, [X19+1000]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x237D000
	013 Move X0, [X0+1000]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2357], W8
	017 Move X0, [X19]
	018 Move X8, [X0+184]
	019 Move X8, [X8]
	020 Compare X8, 0
	021 JumpIfNotEqual {31}
	022 Add X1, X31, 8
	023 Move [X31+8], W31
	024 Call 0x1C17E04
	025 Move X8, [X19]
	026 Move X8, [X8+184]
	027 Move [X8], X0
	028 Move X8, [X19]
	029 Move X8, [X8+184]
	030 Move X8, [X8]
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X0, X8
	034 Move X30, [X31+32]
	035 Return X0

