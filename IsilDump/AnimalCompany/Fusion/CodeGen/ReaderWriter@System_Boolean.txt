Type: Fusion.CodeGen.ReaderWriter@System_Boolean

Method: System.Boolean Read(System.Byte* data, System.Int32 index)

Disassembly:
	0x01D16A9C STP V0, V0, [X29 + 0x150]
	0x01D16AA0 STP V0, V0, [X29 + 0x130]
	0x01D16AA4 STP V0, V0, [X29 + 0x110]
	0x01D16AA8 MOV X0, X26
	0x01D16AAC MOV W1, W27

ISIL:
	001 Move W8, W2
	002 ShiftRight W8, 30
	003 And W8, W8, 0x1FFFFFFF
	004 Move W8, [X1]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Return X0

Method: System.Boolean ReadRef(System.Byte* data, System.Int32 index)

Disassembly:
	0x01D16AB0 BL 0x2E46254
	0x01D16AB4 CBZ X0, 0x1D174AC
	0x01D16AB8 LDR X0, [X0 + 0x18]
	0x01D16ABC CBZ X0, 0x1D174B0
	0x01D16AC0 MOV X1, X31
	0x01D16AC4 BL 0x3A7F5B0
	0x01D16AC8 MOV X1, X0
	0x01D16ACC ADD X0, X31, 0x1A0
	0x01D16AD0 MOV X2, X31
	0x01D16AD4 BL 0x3A82D7C
	0x01D16AD8 LDR X2, [X20]
	0x01D16ADC MOV X0, X26
	0x01D16AE0 MOV W1, W27
	0x01D16AE4 BL 0x2E46254
	0x01D16AE8 CBZ X0, 0x1D174A8
	0x01D16AEC LDR W1, [X0 + 0x28]
	0x01D16AF0 ADD X0, X31, 0x1A0
	0x01D16AF4 MOV X2, X31
	0x01D16AF8 BL 0x3A82E0C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x2238000
	004 Move X0, [X0+2448]
	005 Call 0x1B6F804
	006 Call 0x1B6FA0C
	007 Move X19, X0
	008 Move X0, 0x223C000
	009 Move X0, [X0+1472]
	010 Call 0x1B6F804
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0x223C000
	016 Move X0, [X0+1480]
	017 Call 0x1B6F804
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1B6F8E8

Method: System.Void Write(System.Byte* data, System.Int32 index, System.Boolean val)

Disassembly:
	0x01D16AFC LDR X2, [X20]
	0x01D16B00 MOV X0, X26
	0x01D16B04 MOV W1, W27
	0x01D16B08 BL 0x2E46254

ISIL:
	001 Move W8, W2
	002 ShiftRight W8, 30
	003 And W8, W8, 0x1FFFFFFF
	004 And W9, W3, 1
	005 Move [X1], W9
	006 Return 

Method: System.Int32 GetElementWordCount()

Disassembly:
	0x01D16B0C CBZ X0, 0x1D174A0
	0x01D16B10 LDR X0, [X0 + 0x10]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Int32 GetElementHashCode(System.Boolean val)

Disassembly:
	0x01D16B14 CBZ X0, 0x1D174A4
	0x01D16B18 ADD X8, X31, 0x378
	0x01D16B1C MOV X1, X31
	0x01D16B20 BL 0x3AA7294
	0x01D16B24 ADD X8, X31, 0x279
	0x01D16B28 LDUR V0, [X8 + 0xFF]
	0x01D16B2C ADD X8, X31, 0x289
	0x01D16B30 LDUR V1, [X8 + 0xFF]
	0x01D16B34 ADD X8, X31, 0x299
	0x01D16B38 LDUR V2, [X8 + 0xFF]
	0x01D16B3C ADD X8, X31, 0x2A9
	0x01D16B40 LDUR V3, [X8 + 0xFF]
	0x01D16B44 STP V0, V1, [X29 + 0x40]
	0x01D16B48 STP V2, V3, [X29 + 0x60]
	0x01D16B4C ADD X0, X31, 0x1A0
	0x01D16B50 ADD X1, X31, 0xD0
	0x01D16B54 MOV X2, X31
	0x01D16B58 BL 0x3A82E14
	0x01D16B5C ADD X0, X31, 0x378
	0x01D16B60 ADD X1, X31, 0x1A0
	0x01D16B64 MOVZ W2, 0x68
	0x01D16B68 BL 0x3D198D0
	0x01D16B6C CBZ X25, 0x1D174B8
	0x01D16B70 LDR X28, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 And W9, W1, 1
	005 Move X19, 0x250E000
	006 Move [X31+12], W9
	007 Move X20, 0x2238000
	008 Move W8, [X19+2046]
	009 Move X20, [X20+2480]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2238000
	015 Move X0, [X0+2480]
	016 Call 0x1B6F7F0
	017 Move W8, 1
	018 Move [X19+2046], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1B6F8F8
	024 Add X0, X31, 12
	025 Move X1, X31
	026 Call Boolean.GetHashCode, X0
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Return X0

Method: Fusion.IElementReaderWriter`1<System.Boolean> GetInstance()

Disassembly:
	0x01D16B74 ADD X0, X31, 0x240
	0x01D16B78 ADD X1, X31, 0x378
	0x01D16B7C MOVZ W2, 0x68
	0x01D16B80 BL 0x3D198D0
	0x01D16B84 LDR W9, [X25 + 0x1C]
	0x01D16B88 LDR X8, [X25 + 0x10]
	0x01D16B8C ADD W9, W9, 0x1
	0x01D16B90 STR W9, [X25 + 0x1C]
	0x01D16B94 CBZ X8, 0x1D174B4
	0x01D16B98 LDRSW X9, [X25 + 0x18]
	0x01D16B9C LDR W10, [X8 + 0x18]
	0x01D16BA0 CMP W9, W10
	0x01D16BA4 B.CS 0x1D16BC8
	0x01D16BA8 MADD X8, X9, X19, X8
	0x01D16BAC ADD W10, W9, 0x1
	0x01D16BB0 ADD X0, X8, 0x20
	0x01D16BB4 ADD X1, X31, 0x240
	0x01D16BB8 MOVZ W2, 0x68
	0x01D16BBC STR W10, [X25 + 0x18]
	0x01D16BC0 BL 0x3D198D0
	0x01D16BC4 B 0x1D16BF4
	0x01D16BC8 LDR X8, [X28 + 0x20]
	0x01D16BCC ADD X0, X31, 0x2A8
	0x01D16BD0 ADD X1, X31, 0x240
	0x01D16BD4 MOVZ W2, 0x68
	0x01D16BD8 LDR X8, [X8 + 0xC0]
	0x01D16BDC LDR X28, [X8 + 0x70]
	0x01D16BE0 BL 0x3D198D0
	0x01D16BE4 ADD X1, X31, 0x2A8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x250E000
	005 Move X19, 0x223C000
	006 Move W8, [X20+2047]
	007 Move X19, [X19+1488]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x223C000
	013 Move X0, [X0+1488]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+2047], W8
	017 Move X0, [X19]
	018 Move X8, [X0+184]
	019 Move X8, [X8]
	020 Compare X8, 0
	021 JumpIfNotEqual {31}
	022 Add X1, X31, 8
	023 Move [X31+8], W31
	024 Call 0x1B6F900
	025 Move X8, [X19]
	026 Move X8, [X8+184]
	027 Move [X8], X0
	028 Move X8, [X19]
	029 Move X8, [X8+184]
	030 Move X8, [X8]
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X0, X8
	034 Move X30, [X31+32]
	035 Return X0

