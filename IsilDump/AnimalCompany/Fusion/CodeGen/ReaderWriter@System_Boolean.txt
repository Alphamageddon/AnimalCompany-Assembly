Type: Fusion.CodeGen.ReaderWriter@System_Boolean

Method: System.Boolean Read(System.Byte* data, System.Int32 index)

Disassembly:
	0x01D7A51C ADRP X0, 0x237C000
	0x01D7A520 LDR X0, [X0 + 0x3F8]
	0x01D7A524 BL 0x1C16CF4
	0x01D7A528 MOVZ W8, 0x1
	0x01D7A52C STRB W8, [X20 + 0x93B]

ISIL:
	001 Move W8, W2
	002 ShiftRight W8, 30
	003 And W8, W8, 0x1FFFFFFF
	004 Move W8, [X1]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Return X0

Method: System.Boolean ReadRef(System.Byte* data, System.Int32 index)

Disassembly:
	0x01D7A530 LDR X22, [X19 + 0x38]
	0x01D7A534 CBZ X22, 0x1D7A5C8
	0x01D7A538 ADRP X23, 0x237B000
	0x01D7A53C LDR X23, [X23 + 0x4A0]
	0x01D7A540 ADRP X21, 0x237C000
	0x01D7A544 LDR X20, [X22 + 0x20]
	0x01D7A548 LDR X0, [X23]
	0x01D7A54C LDR X21, [X21 + 0x3F8]
	0x01D7A550 BL 0x1C16F10
	0x01D7A554 LDR X2, [X21]
	0x01D7A558 MOV X1, X19
	0x01D7A55C MOV X3, X31
	0x01D7A560 MOV X21, X0
	0x01D7A564 BL 0x2D32B84
	0x01D7A568 MOV X0, X20
	0x01D7A56C MOV X1, X21
	0x01D7A570 MOV X2, X31
	0x01D7A574 BL 0x33C0DE4
	0x01D7A578 CBZ X0, 0x1D7A5B4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x237A000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0x237D000
	009 Move X0, [X0+952]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0x237D000
	016 Move X0, [X0+960]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Void Write(System.Byte* data, System.Int32 index, System.Boolean val)

Disassembly:
	0x01D7A57C LDR X20, [X23]
	0x01D7A580 MOV X19, X0
	0x01D7A584 MOV X1, X20
	0x01D7A588 BL 0x1C16E00

ISIL:
	001 Move W8, W2
	002 ShiftRight W8, 30
	003 And W8, W8, 0x1FFFFFFF
	004 And W9, W3, 1
	005 Move [X1], W9
	006 Return 

Method: System.Int32 GetElementWordCount()

Disassembly:
	0x01D7A58C CBZ X0, 0x1D7A5A8
	0x01D7A590 STR X0, [X22 + 0x20]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Int32 GetElementHashCode(System.Boolean val)

Disassembly:
	0x01D7A594 LDR X20, [X23]
	0x01D7A598 MOV X0, X19
	0x01D7A59C MOV X1, X20
	0x01D7A5A0 BL 0x1C16E00
	0x01D7A5A4 CBNZ X0, 0x1D7A5B8
	0x01D7A5A8 MOV X0, X19
	0x01D7A5AC MOV X1, X20
	0x01D7A5B0 BL 0x1C171E0
	0x01D7A5B4 STR X31, [X22 + 0x20]
	0x01D7A5B8 LDP X20, X19, [X31 + 0x20]
	0x01D7A5BC LDP X22, X21, [X31 + 0x10]
	0x01D7A5C0 LDP X30, X23, [X31], #0x30
	0x01D7A5C4 RET
	0x01D7A5C8 BL 0x1C16F20
	0x01D7A5CC STP X30, X19, [X31 - 0x10]!
	0x01D7A5D0 MOV X19, X0
	0x01D7A5D4 LDR X0, [X0 + 0x40]
	0x01D7A5D8 CBZ X0, 0x1D7A60C
	0x01D7A5DC MOV X1, X31
	0x01D7A5E0 BL 0x3C3EF3C
	0x01D7A5E4 LDR X19, [X19 + 0x40]
	0x01D7A5E8 CBZ X19, 0x1D7A60C
	0x01D7A5EC MOV X0, X19
	0x01D7A5F0 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 And W9, W1, 1
	005 Move X19, 0x265F000
	006 Move [X31+12], W9
	007 Move X20, 0x237A000
	008 Move W8, [X19+2352]
	009 Move X20, [X20+2904]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x237A000
	015 Move X0, [X0+2904]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+2352], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Add X0, X31, 12
	025 Move X1, X31
	026 Call Boolean.GetHashCode, X0
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Return X0

Method: Fusion.IElementReaderWriter`1<System.Boolean> GetInstance()

Disassembly:
	0x01D7A5F4 BL 0x3C3E7F0
	0x01D7A5F8 FMOV S0, -5
	0x01D7A5FC MOV X0, X19
	0x01D7A600 MOV X1, X31
	0x01D7A604 LDP X30, X19, [X31], #0x10
	0x01D7A608 B 0x3C3E880
	0x01D7A60C BL 0x1C16F20
	0x01D7A610 STR D10, [X31 - 0x30]!
	0x01D7A614 STP D9, D8, [X31 + 0x10]
	0x01D7A618 STP X30, X19, [X31 + 0x20]
	0x01D7A61C MOV X19, X0
	0x01D7A620 LDR X0, [X0 + 0x40]
	0x01D7A624 CBZ X0, 0x1D7A6B8
	0x01D7A628 MOV X1, X31
	0x01D7A62C MOV V8.16B, V0.16B
	0x01D7A630 BL 0x3C3E7F0
	0x01D7A634 LDR X0, [X19 + 0x40]
	0x01D7A638 CBZ X0, 0x1D7A6B8
	0x01D7A63C MOV X1, X31
	0x01D7A640 MOV V9.16B, V0.16B
	0x01D7A644 BL 0x3C3E51C
	0x01D7A648 FNEG S0, S2
	0x01D7A64C LDR V2, [X19 + 0x48]
	0x01D7A650 FMOV S1, -5
	0x01D7A654 LDR X19, [X19 + 0x40]
	0x01D7A658 FMINNM S10, S0, S1
	0x01D7A65C FMUL S0, S2, S8
	0x01D7A660 FMOV S3, W31
	0x01D7A664 FADD S0, S9, S0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x265F000
	005 Move X19, 0x237D000
	006 Move W8, [X20+2353]
	007 Move X19, [X19+968]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x237D000
	013 Move X0, [X0+968]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2353], W8
	017 Move X0, [X19]
	018 Move X8, [X0+184]
	019 Move X8, [X8]
	020 Compare X8, 0
	021 JumpIfNotEqual {31}
	022 Add X1, X31, 8
	023 Move [X31+8], W31
	024 Call 0x1C17E04
	025 Move X8, [X19]
	026 Move X8, [X8+184]
	027 Move [X8], X0
	028 Move X8, [X19]
	029 Move X8, [X8+184]
	030 Move X8, [X8]
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X0, X8
	034 Move X30, [X31+32]
	035 Return X0

