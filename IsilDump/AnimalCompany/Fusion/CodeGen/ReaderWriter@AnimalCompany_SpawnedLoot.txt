Type: Fusion.CodeGen.ReaderWriter@AnimalCompany_SpawnedLoot

Method: AnimalCompany.SpawnedLoot Read(System.Byte* data, System.Int32 index)

Disassembly:
	0x01D1694C CMP W19, W8
	0x01D16950 B.CS 0x1D1749C
	0x01D16954 LDR X8, [X20, X19, LSL #3]
	0x01D16958 CBZ X8, 0x1D17498
	0x01D1695C LDR X0, [X8 + 0x18]
	0x01D16960 CBZ X0, 0x1D17498

ISIL:
	001 Add W8, W2, W2
	002 Move W8, W8
	003 ShiftRight W8, 30
	004 And W8, W8, 0x1FFFFFFF
	005 Add X8, X1, W8
	006 Move X0, [X8]
	007 Move W1, [X8+8]
	008 Return X0

Method: AnimalCompany.SpawnedLoot ReadRef(System.Byte* data, System.Int32 index)

Disassembly:
	0x01D16964 MOV X1, X31
	0x01D16968 BL 0x3A7F5B0
	0x01D1696C CBZ X0, 0x1D17498
	0x01D16970 MOV X1, X31

ISIL:
	001 Add W8, W2, W2
	002 Move W8, W8
	003 ShiftRight W8, 30
	004 And W8, W8, 0x1FFFFFFF
	005 Add X0, X1, W8
	006 Return X0

Method: System.Void Write(System.Byte* data, System.Int32 index, AnimalCompany.SpawnedLoot val)

Disassembly:
	0x01D16974 BL 0x3A7FEAC
	0x01D16978 LDR X8, [X31 + 0x18]
	0x01D1697C ADD X19, X19, 0x1
	0x01D16980 ADD W23, W0, W23
	0x01D16984 LDR W8, [X8 + 0x18]
	0x01D16988 CMP W19, W8

ISIL:
	001 Add W8, W2, W2
	002 Move W8, W8
	003 ShiftRight W8, 30
	004 And W8, W8, 0x1FFFFFFF
	005 Add X8, X1, W8
	006 Move [X8], X3
	007 Move [X8+8], W4
	008 Return 

Method: System.Int32 GetElementWordCount()

Disassembly:
	0x01D1698C B.LT 0x1D1694C
	0x01D16990 B 0x1D169C8

ISIL:
	001 Move W0, 3
	002 Return X0

Method: System.Int32 GetElementHashCode(AnimalCompany.SpawnedLoot val)

Disassembly:
	0x01D16994 LDRB W8, [X19 + 0x70]
	0x01D16998 CBZ W8, 0x1D1645C
	0x01D1699C ADRP X8, 0x2237000
	0x01D169A0 LDR X8, [X8 + 0x8B8]
	0x01D169A4 LDR X0, [X8]
	0x01D169A8 LDR W8, [X0 + 0xE0]
	0x01D169AC CBNZ W8, 0x1D169B4
	0x01D169B0 BL 0x1B6E8F8
	0x01D169B4 ADRP X8, 0x223B000
	0x01D169B8 LDR X8, [X8 + 0x770]
	0x01D169BC LDR X0, [X8]
	0x01D169C0 B 0x1D16454
	0x01D169C4 MOV W23, W31
	0x01D169C8 STR X22, [X31 + 0x8]
	0x01D169CC ADRP X8, 0x223B000
	0x01D169D0 LDR X8, [X8 + 0x720]
	0x01D169D4 LDR X0, [X8]
	0x01D169D8 BL 0x1B6EA0C
	0x01D169DC ADRP X8, 0x223B000
	0x01D169E0 LDR X8, [X8 + 0x700]
	0x01D169E4 MOV X24, X0
	0x01D169E8 LDR X1, [X8]
	0x01D169EC BL 0x2E45D4C
	0x01D169F0 CBZ X21, 0x1D17498
	0x01D169F4 ADRP X8, 0x223B000
	0x01D169F8 LDR X8, [X8 + 0x620]
	0x01D169FC MOV X0, X21
	0x01D16A00 LDR X1, [X8]
	0x01D16A04 ADD X8, X31, 0x378
	0x01D16A08 BL 0x28FA6CC
	0x01D16A0C ADD X8, X31, 0x279
	0x01D16A10 LDUR V0, [X8 + 0xFF]
	0x01D16A14 ADD X8, X31, 0x289
	0x01D16A18 LDUR V1, [X8 + 0xFF]
	0x01D16A1C ADRP X25, 0x223B000
	0x01D16A20 LDR X8, [X31 + 0x398]
	0x01D16A24 LDR X25, [X25 + 0x658]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 NotImplemented "Instruction MRS not yet implemented."
	009 Move X8, [X21+40]
	010 Move X22, 0x250E000
	011 Move X23, 0x223C000
	012 Move X19, X2
	013 Move [X31+40], X8
	014 Move W8, [X22+2044]
	015 Move X23, [X23+1456]
	016 Move X20, X1
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x223C000
	022 Move X0, [X0+1456]
	023 Call 0x1B6F7F0
	024 Move W8, 1
	025 Move [X22+2044], W8
	026 Move X8, [X23]
	027 Move TEMP, 0
	028 Not TEMP
	029 Move X9, TEMP
	030 Add X0, X31, 8
	031 Move X1, X31
	032 Move [X31+16], X9
	033 Move [X31+24], X20
	034 Move [X31+8], X8
	035 Move [X31+32], W19
	036 Call ValueType.GetHashCode, X0
	037 Move X8, [X21+40]
	038 Move X9, [X31+40]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X20, [X31+80]
	041 Move X19, [X31+88]
	042 Move X22, [X31+64]
	043 Move X21, [X31+72]
	044 Move X30, [X31+48]
	045 Move X23, [X31+56]
	046 Add X31, X31, 96
	047 Return X0
	048 Call 0x3D1A880

Method: Fusion.IElementReaderWriter`1<AnimalCompany.SpawnedLoot> GetInstance()

Disassembly:
	0x01D16A28 STP V0, V1, [X29 + 0x180]
	0x01D16A2C ADRP X20, 0x223B000
	0x01D16A30 ADRP X22, 0x223B000
	0x01D16A34 LDR X20, [X20 + 0x710]
	0x01D16A38 LDR X22, [X22 + 0x6C8]
	0x01D16A3C MOVZ W19, 0x68
	0x01D16A40 STR X8, [X31 + 0x230]
	0x01D16A44 LDR X1, [X25]
	0x01D16A48 ADD X0, X31, 0x210
	0x01D16A4C BL 0x2A5A3C4
	0x01D16A50 TBZ X0, 0x0, 0x1D16D08
	0x01D16A54 ADRP X8, 0x223B000
	0x01D16A58 LDR X26, [X31 + 0x228]
	0x01D16A5C LDR X8, [X8 + 0x728]
	0x01D16A60 LDR X0, [X8]
	0x01D16A64 BL 0x1B6EA0C
	0x01D16A68 ADRP X8, 0x223B000
	0x01D16A6C LDR X8, [X8 + 0x6E8]
	0x01D16A70 MOV X25, X0
	0x01D16A74 LDR X1, [X8]
	0x01D16A78 BL 0x2D9ABB0
	0x01D16A7C CBZ X26, 0x1D174CC
	0x01D16A80 LDR W8, [X26 + 0x18]
	0x01D16A84 CMP W8, 0x1
	0x01D16A88 B.LT 0x1D16C04
	0x01D16A8C MOV W27, W31
	0x01D16A90 LDR X2, [X20]
	0x01D16A94 MOVI V0.2D, 0x0
	0x01D16A98 STR X31, [X31 + 0x200]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x250E000
	005 Move X19, 0x223C000
	006 Move W8, [X20+2045]
	007 Move X19, [X19+1464]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x223C000
	013 Move X0, [X0+1464]
	014 Call 0x1B6F7F0
	015 Move W8, 1
	016 Move [X20+2045], W8
	017 Move X0, [X19]
	018 Move X8, [X0+184]
	019 Move X8, [X8]
	020 Compare X8, 0
	021 JumpIfNotEqual {31}
	022 Add X1, X31, 8
	023 Move [X31+8], W31
	024 Call 0x1B6F900
	025 Move X8, [X19]
	026 Move X8, [X8+184]
	027 Move [X8], X0
	028 Move X8, [X19]
	029 Move X8, [X8+184]
	030 Move X8, [X8]
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X0, X8
	034 Move X30, [X31+32]
	035 Return X0

