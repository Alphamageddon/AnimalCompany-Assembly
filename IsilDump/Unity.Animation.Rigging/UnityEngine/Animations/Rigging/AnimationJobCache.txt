Type: UnityEngine.Animations.Rigging.AnimationJobCache

Method: System.Void .ctor(System.Single[] data)

Disassembly:
	0x036E34A4 MOV X2, X31
	0x036E34A8 STR X8, [X31 + 0x30]
	0x036E34AC STP V4, V3, [X31 + 0x10]
	0x036E34B0 STR V5, [X31]
	0x036E34B4 BL 0x3BF88E4
	0x036E34B8 LDR X30, [X31 + 0x40]
	0x036E34BC ADD X31, X31, 0x50
	0x036E34C0 RET
	0x036E34C4 SUB X31, X31, 0x90
	0x036E34C8 STR X30, [X31 + 0x80]
	0x036E34CC LDRB W8, [X0 + 0x14]
	0x036E34D0 CMP W8, 0x1
	0x036E34D4 B.NE 0x36E3500
	0x036E34D8 LDR X8, [X1 + 0x30]
	0x036E34DC LDP V1, V0, [X1 + 0x10]
	0x036E34E0 LDR V2, [X1]
	0x036E34E4 ADD X1, X31, 0x0
	0x036E34E8 MOV X2, X31
	0x036E34EC STR X8, [X31 + 0x30]
	0x036E34F0 STP V1, V0, [X31 + 0x10]
	0x036E34F4 STR V2, [X31]
	0x036E34F8 BL 0x3BF871C
	0x036E34FC B 0x36E3528
	0x036E3500 LDP V2, V0, [X1 + 0x10]
	0x036E3504 LDR X8, [X1 + 0x30]
	0x036E3508 LDR V1, [X1]
	0x036E350C ADD X0, X0, 0xC
	0x036E3510 ADD X1, X31, 0x40
	0x036E3514 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0xCFE000
	008 Move X21, 0xA5E000
	009 Move W8, [X22+2833]
	010 Move X21, [X21+1808]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xA5E000
	018 Move X0, [X0+1808]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+2833], W8
	022 Move X3, [X21]
	023 Add X0, X31, 0
	024 Move W2, 4
	025 Move X1, X20
	026 Move [X31], X31
	027 Move [X31+8], X31
	028 Call NativeArray`1<Single>..ctor, X0, X1, X2
	029 Move V0, [X31]
	030 Move X22, [X31+32]
	031 Move X21, [X31+40]
	032 Move X30, [X31+16]
	033 Move [X19], V0
	034 Move X20, [X31+48]
	035 Move X19, [X31+56]
	036 Add X31, X31, 64
	037 Return 

Method: System.Void Dispose()

Disassembly:
	0x036E3518 STR X8, [X31 + 0x70]
	0x036E351C STP V2, V0, [X31 + 0x50]
	0x036E3520 STR V1, [X31 + 0x4]
	0x036E3524 BL 0x3BFA1E0
	0x036E3528 LDR X30, [X31 + 0x80]
	0x036E352C ADD X31, X31, 0x90
	0x036E3530 RET
	0x036E3534 SUB X31, X31, 0x50
	0x036E3538 STR X30, [X31 + 0x40]
	0x036E353C LDR X8, [X1 + 0x30]
	0x036E3540 LDP V1, V0, [X1 + 0x10]
	0x036E3544 LDR V2, [X1]
	0x036E3548 ADD X1, X31, 0x0
	0x036E354C MOV X2, X31
	0x036E3550 STR X8, [X31 + 0x30]
	0x036E3554 STP V1, V0, [X31 + 0x10]
	0x036E3558 STR V2, [X31]
	0x036E355C BL 0x3BF871C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xCFE000
	006 Move X21, 0xA3B000
	007 Move W8, [X20+2834]
	008 Move X21, [X21+344]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xA3B000
	015 Move X0, [X0+344]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2834], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call NativeArray`1<Single>.Dispose, X0
	026 Return 

Method: System.Single GetRaw(UnityEngine.Animations.Rigging.CacheIndex index, System.Int32 offset = 0)

Disassembly:
	0x036E3560 LDR X30, [X31 + 0x40]
	0x036E3564 ADD X31, X31, 0x50
	0x036E3568 RET
	0x036E356C SUB X31, X31, 0x50

ISIL:
	001 Move X8, [X0]
	002 Add W9, W1, W2
	003 Move V0, [X8]
	004 Return V0

Method: System.Void SetRaw(System.Single val, UnityEngine.Animations.Rigging.CacheIndex index, System.Int32 offset = 0)

Disassembly:
	0x036E3570 STR X30, [X31 + 0x40]
	0x036E3574 LDR X8, [X1 + 0x30]
	0x036E3578 LDP V5, V4, [X1 + 0x10]
	0x036E357C LDR V6, [X1]

ISIL:
	001 Move X8, [X0]
	002 Add W9, W1, W2
	003 Move [X8], S0
	004 Return 

Method: T Get(UnityEngine.Animations.Rigging.CacheIndex index, System.Int32 offset = 0)

Disassembly:
	0x022C5E4C LDR X0, [X0 + 0x230]
	0x022C5E50 BL 0x1C16CF4
	0x022C5E54 ADRP X0, 0x1E2E000
	0x022C5E58 LDR X0, [X0 + 0x6C0]
	0x022C5E5C BL 0x1C16CF4
	0x022C5E60 LDR X8, [X19 + 0x38]
	0x022C5E64 CBNZ X8, 0x22C5E70
	0x022C5E68 MOV X0, X19
	0x022C5E6C BL 0x1C5C6E0
	0x022C5E70 ADRP X8, 0x1E57000
	0x022C5E74 LDR X8, [X8 + 0xAF8]
	0x022C5E78 LDR X0, [X8]
	0x022C5E7C LDR W8, [X0 + 0xE0]
	0x022C5E80 CBNZ W8, 0x22C5E88
	0x022C5E84 BL 0x1C16DFC
	0x022C5E88 MOV X0, X20
	0x022C5E8C MOV X1, X31
	0x022C5E90 BL 0x3BF7F20
	0x022C5E94 ADRP X9, 0x1E57000
	0x022C5E98 LDR X9, [X9 + 0x230]
	0x022C5E9C MOV X8, X0
	0x022C5EA0 STP X8, X1, [X31]
	0x022C5EA4 LDR X0, [X9]
	0x022C5EA8 LDR W8, [X0 + 0xE0]
	0x022C5EAC CBNZ W8, 0x22C5EB4
	0x022C5EB0 BL 0x1C16DFC
	0x022C5EB4 ADD X0, X31, 0x0
	0x022C5EB8 MOV X1, X31
	0x022C5EBC BL 0x3C5E9E8
	0x022C5EC0 ADRP X8, 0x1E2E000
	0x022C5EC4 LDR X8, [X8 + 0x6C0]
	0x022C5EC8 LDR X9, [X19 + 0x38]
	0x022C5ECC MOV X20, X0
	0x022C5ED0 LDR X8, [X8]
	0x022C5ED4 LDR X21, [X9]
	0x022C5ED8 LDR W10, [X8 + 0xE0]
	0x022C5EDC CBNZ W10, 0x22C5EE8
	0x022C5EE0 MOV X0, X8
	0x022C5EE4 BL 0x1C16DFC
	0x022C5EE8 MOV X0, X21
	0x022C5EEC MOV X1, X31

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X8, [X3+56]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {25}
	013 Move X0, 0x1E58000
	014 Move X0, [X0+2760]
	015 Move X22, X3
	016 Call 0x1C17CF4
	017 Move X0, 0x1E58000
	018 Move X0, [X0+2768]
	019 Call 0x1C17CF4
	020 Move X8, [X22+56]
	021 Compare X8, 0
	022 JumpIfNotEqual {25}
	023 Move X0, X22
	024 Call 0x1C5D6E0
	025 Move [X31], X31
	026 Move [X31+8], X31
	027 Move X8, 0x1E58000
	028 Move X8, [X8+2760]
	029 Move X0, [X21]
	030 Move X1, [X21+8]
	031 Move X2, [X8]
	032 Call NativeArrayUnsafeUtility.GetUnsafeReadOnlyPtr, X0
	033 NotImplemented "Instruction SBFM not yet implemented."
	034 Move W9, W19
	035 ShiftRight W9, 30
	036 And W9, W9, 0x1FFFFFFF
	037 Add X8, X8, W9
	038 Add X1, X8, X0
	039 Add X0, X31, 0
	040 Move W2, 16
	041 Move X3, X31
	042 Call UnsafeUtility.MemCpy, X0, X1, X2
	043 Move S0, [X31]
	044 Move S1, [X31+4]
	045 Move S2, [X31+8]
	046 Move S3, [X31+12]
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X22, [X31+32]
	050 Move X21, [X31+40]
	051 Move X30, [X31+16]
	052 Add X31, X31, 64
	053 Return X0

Method: System.Void Set(T val, UnityEngine.Animations.Rigging.CacheIndex index, System.Int32 offset = 0)

Disassembly:
	0x022C6054 CBNZ W8, 0x22C605C
	0x022C6058 BL 0x1C16DFC
	0x022C605C ADD X0, X31, 0x0
	0x022C6060 MOV X1, X31
	0x022C6064 BL 0x3C5E9E8
	0x022C6068 ADRP X8, 0x1E2D000
	0x022C606C LDR X8, [X8 + 0x6C0]
	0x022C6070 LDR X9, [X19 + 0x38]
	0x022C6074 MOV X20, X0
	0x022C6078 LDR X8, [X8]
	0x022C607C LDR X21, [X9]
	0x022C6080 LDR W10, [X8 + 0xE0]
	0x022C6084 CBNZ W10, 0x22C6090
	0x022C6088 MOV X0, X8
	0x022C608C BL 0x1C16DFC
	0x022C6090 MOV X0, X21
	0x022C6094 MOV X1, X31
	0x022C6098 BL 0x338C698
	0x022C609C MOV X1, X0
	0x022C60A0 MOV X0, X20
	0x022C60A4 MOV X2, X31
	0x022C60A8 BL 0x3395F0C
	0x022C60AC TBNZ X0, 0x0, 0x22C60C0
	0x022C60B0 LDP X20, X19, [X31 + 0x20]
	0x022C60B4 LDP X30, X21, [X31 + 0x10]
	0x022C60B8 ADD X31, X31, 0x30
	0x022C60BC RET
	0x022C60C0 LDR X8, [X19 + 0x38]
	0x022C60C4 ADRP X0, 0x1E2D000
	0x022C60C8 LDR X21, [X8]
	0x022C60CC LDR X0, [X0 + 0x6C0]
	0x022C60D0 BL 0x1C16D08
	0x022C60D4 BL 0x19903D0
	0x022C60D8 MOV X0, X21
	0x022C60DC MOV X1, X31
	0x022C60E0 BL 0x338C698
	0x022C60E4 MOV X21, X0
	0x022C60E8 BL 0x19903C0
	0x022C60EC LDR X8, [X21]
	0x022C60F0 MOV X0, X21

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move [X31], S0
	008 Move [X31+8], S1
	009 Move [X31+8], S2
	010 Move [X31+16], S3
	011 Move X8, [X3+56]
	012 Move W19, W2
	013 Move X20, X1
	014 Move X22, X0
	015 Compare X8, 0
	016 JumpIfNotEqual {29}
	017 Move X0, 0x1E57000
	018 Move X0, [X0+2776]
	019 Move X21, X3
	020 Call 0x1C17CF4
	021 Move X0, 0x1E57000
	022 Move X0, [X0+2768]
	023 Call 0x1C17CF4
	024 Move X8, [X21+56]
	025 Compare X8, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X21
	028 Call 0x1C5D6E0
	029 Move X8, 0x1E57000
	030 Move X0, [X22]
	031 Move X1, [X22+8]
	032 Move X8, [X8+2776]
	033 Move X2, [X8]
	034 Call NativeArrayUnsafeUtility.GetUnsafePtr, X0
	035 NotImplemented "Instruction SBFM not yet implemented."
	036 Move W9, W19
	037 ShiftRight W9, 30
	038 And W9, W9, 0x1FFFFFFF
	039 Add X8, X8, W9
	040 Add X0, X8, X0
	041 Add X1, X31, 0
	042 Move W2, 16
	043 Move X3, X31
	044 Call UnsafeUtility.MemCpy, X0, X1, X2
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X22, [X31+32]
	048 Move X21, [X31+40]
	049 Move X30, [X31+16]
	050 Add X31, X31, 64
	051 Return 

Method: System.Void SetArray(T[] v, UnityEngine.Animations.Rigging.CacheIndex index, System.Int32 offset = 0)

Disassembly:
	0x022C61A8 LDR X0, [X0 + 0x6C0]
	0x022C61AC BL 0x1C16CF4
	0x022C61B0 LDR X8, [X19 + 0x38]
	0x022C61B4 CBNZ X8, 0x22C61C0
	0x022C61B8 MOV X0, X19
	0x022C61BC BL 0x1C5C6E0
	0x022C61C0 ADRP X8, 0x1E56000
	0x022C61C4 LDR X8, [X8 + 0xAF8]
	0x022C61C8 LDR X0, [X8]
	0x022C61CC LDR W8, [X0 + 0xE0]
	0x022C61D0 CBNZ W8, 0x22C61D8
	0x022C61D4 BL 0x1C16DFC
	0x022C61D8 MOV X0, X20
	0x022C61DC MOV X1, X31
	0x022C61E0 BL 0x3BF7F20
	0x022C61E4 ADRP X9, 0x1E56000
	0x022C61E8 LDR X9, [X9 + 0x230]
	0x022C61EC MOV X8, X0
	0x022C61F0 STP X8, X1, [X31]
	0x022C61F4 LDR X0, [X9]
	0x022C61F8 LDR W8, [X0 + 0xE0]
	0x022C61FC CBNZ W8, 0x22C6204
	0x022C6200 BL 0x1C16DFC
	0x022C6204 ADD X0, X31, 0x0
	0x022C6208 MOV X1, X31
	0x022C620C BL 0x3C5E9E8
	0x022C6210 ADRP X8, 0x1E2D000
	0x022C6214 LDR X8, [X8 + 0x6C0]
	0x022C6218 LDR X9, [X19 + 0x38]
	0x022C621C MOV X20, X0
	0x022C6220 LDR X8, [X8]
	0x022C6224 LDR X21, [X9]
	0x022C6228 LDR W10, [X8 + 0xE0]
	0x022C622C CBNZ W10, 0x22C6238
	0x022C6230 MOV X0, X8
	0x022C6234 BL 0x1C16DFC
	0x022C6238 MOV X0, X21
	0x022C623C MOV X1, X31
	0x022C6240 BL 0x338C698
	0x022C6244 MOV X1, X0
	0x022C6248 MOV X0, X20
	0x022C624C MOV X2, X31
	0x022C6250 BL 0x3395F0C
	0x022C6254 TBNZ X0, 0x0, 0x22C6268
	0x022C6258 LDP X20, X19, [X31 + 0x20]
	0x022C625C LDP X30, X21, [X31 + 0x10]
	0x022C6260 ADD X31, X31, 0x30
	0x022C6264 RET
	0x022C6268 LDR X8, [X19 + 0x38]
	0x022C626C ADRP X0, 0x1E2D000
	0x022C6270 LDR X21, [X8]
	0x022C6274 LDR X0, [X0 + 0x6C0]
	0x022C6278 BL 0x1C16D08
	0x022C627C BL 0x19903D0
	0x022C6280 MOV X0, X21
	0x022C6284 MOV X1, X31
	0x022C6288 BL 0x338C698
	0x022C628C MOV X21, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X4+56]
	009 Move W19, W3
	010 Move X21, X2
	011 Move X20, X1
	012 Move X22, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {28}
	015 Move X0, 0x1E57000
	016 Move X0, [X0+2776]
	017 Move X23, X4
	018 Call 0x1C17CF4
	019 Move X0, 0x1E57000
	020 Move X0, [X0+2768]
	021 Call 0x1C17CF4
	022 Move X8, [X23+56]
	023 Compare X8, 0
	024 JumpIfNotEqual {28}
	025 Move X0, X23
	026 Call 0x1C5D6E0
	027 Move X8, [X23+56]
	028 Move X0, [X8]
	029 Move X8, [X0]
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Move W23, W0
	032 Compare X20, 0
	033 JumpIfEqual {38}
	034 Move W8, [X20+24]
	035 Add X9, X20, 32
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Move X24, X31
	039 Move X8, 0x1E57000
	040 Move X0, [X22]
	041 Move X1, [X22+8]
	042 Move X8, [X8+2776]
	043 Move X2, [X8]
	044 Call NativeArrayUnsafeUtility.GetUnsafePtr, X0
	045 Compare X20, 0
	046 JumpIfEqual {69}
	047 Add W8, W23, 3
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W10, [X20+24]
	050 NotImplemented "Instruction CSEL not yet implemented."
	051 NotImplemented "Instruction SBFM not yet implemented."
	052 NotImplemented "Instruction SBFM not yet implemented."
	053 Multiply W8, W8, W19
	054 Add X8, X9, W8
	055 Multiply W9, W23, W10
	056 Move X1, X24
	057 Move X20, [X31+48]
	058 Move X19, [X31+56]
	059 Move X22, [X31+32]
	060 Move X21, [X31+40]
	061 Move X24, [X31+16]
	062 Move X23, [X31+24]
	063 Add X0, X8, X0
	064 Move X2, W9
	065 Move X3, X31
	066 Move X30, [X31+64]
	067 Call UnsafeUtility.MemCpy, X0, X1, X2
	068 Return 
	069 Call 0x1C17F20

