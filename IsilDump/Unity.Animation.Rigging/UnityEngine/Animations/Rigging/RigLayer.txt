Type: UnityEngine.Animations.Rigging.RigLayer

Method: UnityEngine.Animations.Rigging.Rig get_rig()

Disassembly:
	0x036F4D94 LDR X19, [X0]
	0x036F4D98 BL 0x3EB1AE0

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_rig(UnityEngine.Animations.Rigging.Rig value)

Disassembly:
	0x036F4D9C MOVZ W20, 0x1
	0x036F4DA0 CBNZ X21, 0x36F4C70

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Boolean get_active()

Disassembly:
	0x036F4DA4 B 0x36F4CD0
	0x036F4DA8 MOV X19, X31

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_active(System.Boolean value)

Disassembly:
	0x036F4DAC B 0x36F4DB4
	0x036F4DB0 MOV X20, X0
	0x036F4DB4 CBZ X21, 0x36F4E18

ISIL:
	001 And W8, W1, 1
	002 Move [X0+24], W8
	003 Return 

Method: System.String get_name()

Disassembly:
	0x036F4DB8 ADRP X10, 0x9FF000
	0x036F4DBC LDR X8, [X21]
	0x036F4DC0 LDR X10, [X10 + 0xE00]
	0x036F4DC4 LDRH W9, [X8 + 0x12E]
	0x036F4DC8 LDR X1, [X10]
	0x036F4DCC CBZ X9, 0x36F4DF0
	0x036F4DD0 LDR X10, [X8 + 0xB0]
	0x036F4DD4 ADD X10, X10, 0x8
	0x036F4DD8 LDUR X11, [X10 - 0x8]
	0x036F4DDC CMP X11, X1
	0x036F4DE0 B.EQ 0x36F4E00
	0x036F4DE4 SUBS X9, X9, 0x1
	0x036F4DE8 ADD X10, X10, 0x10
	0x036F4DEC B.NE 0x36F4DD8
	0x036F4DF0 MOV X0, X21
	0x036F4DF4 MOV W2, W31
	0x036F4DF8 BL 0x1C5C788
	0x036F4DFC B 0x36F4E0C
	0x036F4E00 LDRSW X9, [X10]
	0x036F4E04 ADD X8, X8, X9, 0x4, LSL
	0x036F4E08 ADD X0, X8, 0x138
	0x036F4E0C LDP X8, X1, [X0]
	0x036F4E10 MOV X0, X21
	0x036F4E14 BLR X8
	0x036F4E18 CBNZ X19, 0x36F4E24
	0x036F4E1C MOV X0, X20
	0x036F4E20 BL 0x1D2C690
	0x036F4E24 MOV X0, X19
	0x036F4E28 BL 0x1C16F18
	0x036F4E2C BL 0x1990590
	0x036F4E30 SUB X31, X31, 0x40
	0x036F4E34 STP X30, X23, [X31 + 0x10]
	0x036F4E38 STP X22, X21, [X31 + 0x20]
	0x036F4E3C STP X20, X19, [X31 + 0x30]
	0x036F4E40 ADRP X23, 0xCEC000
	0x036F4E44 ADRP X22, 0xA4C000
	0x036F4E48 LDRB W8, [X23 + 0xBA2]
	0x036F4E4C LDR X22, [X22 + 0xA00]
	0x036F4E50 MOV X20, X3
	0x036F4E54 MOV X19, X2
	0x036F4E58 MOV X21, X0
	0x036F4E5C TBNZ X8, 0x0, 0x36F4E8C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xCED000
	006 Move X20, 0xA00000
	007 Move W8, [X21+2970]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xA00000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0xA4D000
	018 Move X0, [X0+2456]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2970], W8
	022 Move X0, [X20]
	023 Move X20, [X19+16]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {50}
	036 Move X0, [X19+16]
	037 Compare X0, 0
	038 JumpIfEqual {58}
	039 Move X1, X31
	040 Call Component.get_gameObject, X0
	041 Compare X0, 0
	042 JumpIfEqual {58}
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X1, X31
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Call Object.get_name, X0
	049 Return X0
	050 Move X8, 0xA4D000
	051 Move X8, [X8+2456]
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X0, [X8]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Return X0
	058 Call 0x1C17F20

Method: UnityEngine.Animations.Rigging.IRigConstraint[] get_constraints()

Disassembly:
	0x036F4E60 ADRP X0, 0xA4C000
	0x036F4E64 LDR X0, [X0 + 0xAC8]
	0x036F4E68 BL 0x1C16CF4
	0x036F4E6C ADRP X0, 0xA4C000
	0x036F4E70 LDR X0, [X0 + 0xAD0]
	0x036F4E74 BL 0x1C16CF4

ISIL:
	001 Move W8, [X0+48]
	002 Compare W8, 0
	003 JumpIfEqual {6}
	004 Move X0, [X0+32]
	005 Return X0
	006 Move X0, X31
	007 Return X0

Method: UnityEngine.Animations.IAnimationJob[] get_jobs()

Disassembly:
	0x036F4E78 ADRP X0, 0xA4C000
	0x036F4E7C LDR X0, [X0 + 0xA00]
	0x036F4E80 BL 0x1C16CF4
	0x036F4E84 MOVZ W8, 0x1
	0x036F4E88 STRB W8, [X23 + 0xBA2]
	0x036F4E8C LDR X0, [X22]

ISIL:
	001 Move W8, [X0+48]
	002 Compare W8, 0
	003 JumpIfEqual {6}
	004 Move X0, [X0+40]
	005 Return X0
	006 Move X0, X31
	007 Return X0

Method: System.Boolean get_isInitialized()

Disassembly:
	0x036F4E90 STR X31, [X31 + 0x8]
	0x036F4E94 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_isInitialized(System.Boolean value)

Disassembly:
	0x036F4E98 CBNZ W8, 0x36F4EA4
	0x036F4E9C BL 0x1C16DFC
	0x036F4EA0 LDR X0, [X22]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+48], W8
	003 Return 

Method: System.Void .ctor(UnityEngine.Animations.Rigging.Rig rig, System.Boolean active = True)

Disassembly:
	0x036F4EA4 CBZ X21, 0x36F4F90
	0x036F4EA8 LDR X8, [X0 + 0xB8]
	0x036F4EAC LDR X9, [X21]
	0x036F4EB0 MOV X0, X21
	0x036F4EB4 LDR X22, [X8]
	0x036F4EB8 LDR X8, [X9 + 0x258]
	0x036F4EBC LDR X1, [X9 + 0x260]
	0x036F4EC0 BLR X8
	0x036F4EC4 CBZ X22, 0x36F4F90
	0x036F4EC8 ADRP X8, 0xA4C000
	0x036F4ECC LDR X8, [X8 + 0xAC8]
	0x036F4ED0 MOV X1, X0
	0x036F4ED4 ADD X2, X31, 0x8
	0x036F4ED8 MOV X0, X22
	0x036F4EDC LDR X3, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move W8, 1
	007 Move X1, X31
	008 Move W19, W2
	009 Move X21, X0
	010 Move [X0+24], W8
	011 Call Object..ctor, X0
	012 Move [X21+16], X20
	013 And W8, W19, 1
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move [X21+24], W8
	017 Move X30, [X31+32]
	018 Move X21, [X31+40]
	019 Return 

Method: System.Boolean Initialize(UnityEngine.Animator animator)

Disassembly:
	0x036F4EE0 BL 0x2AB03DC
	0x036F4EE4 TBZ X0, 0x0, 0x36F4F5C
	0x036F4EE8 LDR X8, [X21]
	0x036F4EEC MOV X0, X21
	0x036F4EF0 LDP X9, X1, [X8 + 0x1A8]
	0x036F4EF4 BLR X9
	0x036F4EF8 MOV X1, X0
	0x036F4EFC MOV X0, X20
	0x036F4F00 MOV X2, X31
	0x036F4F04 BL 0x321B938
	0x036F4F08 BL 0x36ECF70
	0x036F4F0C CBZ X19, 0x36F4F90
	0x036F4F10 ADRP X9, 0xA4C000
	0x036F4F14 LDR X2, [X31 + 0x8]
	0x036F4F18 LDR X9, [X9 + 0xAD0]
	0x036F4F1C LDR W10, [X19 + 0x1C]
	0x036F4F20 LDR X8, [X19 + 0x10]
	0x036F4F24 LDR X9, [X9]
	0x036F4F28 ADD W10, W10, 0x1
	0x036F4F2C STR W10, [X19 + 0x1C]
	0x036F4F30 CBZ X8, 0x36F4F90
	0x036F4F34 LDRSW X10, [X19 + 0x18]
	0x036F4F38 LDR W11, [X8 + 0x18]
	0x036F4F3C MOV X1, X0
	0x036F4F40 CMP W10, W11
	0x036F4F44 B.CS 0x36F4F64
	0x036F4F48 ADD W9, W10, 0x1
	0x036F4F4C ADD X8, X8, X10, 0x4, LSL
	0x036F4F50 STR W9, [X19 + 0x18]
	0x036F4F54 STP X1, X2, [X8 + 0x20]
	0x036F4F58 B 0x36F4F78
	0x036F4F5C MOV W0, W31
	0x036F4F60 B 0x36F4F7C
	0x036F4F64 LDR X8, [X9 + 0x20]
	0x036F4F68 MOV X0, X19
	0x036F4F6C LDR X8, [X8 + 0xC0]
	0x036F4F70 LDR X3, [X8 + 0x70]
	0x036F4F74 BL 0x302A37C
	0x036F4F78 MOVZ W0, 0x1
	0x036F4F7C LDP X20, X19, [X31 + 0x30]
	0x036F4F80 LDP X22, X21, [X31 + 0x20]
	0x036F4F84 LDP X30, X23, [X31 + 0x10]
	0x036F4F88 ADD X31, X31, 0x40
	0x036F4F8C RET
	0x036F4F90 BL 0x1C16F20
	0x036F4F94 SUB X31, X31, 0x70
	0x036F4F98 STP X29, X30, [X31 + 0x10]
	0x036F4F9C STP X28, X27, [X31 + 0x20]
	0x036F4FA0 STP X26, X25, [X31 + 0x30]
	0x036F4FA4 STP X24, X23, [X31 + 0x40]
	0x036F4FA8 STP X22, X21, [X31 + 0x50]
	0x036F4FAC STP X20, X19, [X31 + 0x60]
	0x036F4FB0 ADRP X24, 0xCEC000
	0x036F4FB4 LDRB W8, [X24 + 0xBA3]
	0x036F4FB8 MOV X19, X4
	0x036F4FBC MOV X22, X3
	0x036F4FC0 MOV X20, X2
	0x036F4FC4 MOV X21, X1
	0x036F4FC8 MOV X23, X0
	0x036F4FCC TBNZ X8, 0x0, 0x36F5098
	0x036F4FD0 ADRP X0, 0xA4C000
	0x036F4FD4 LDR X0, [X0 + 0xAD8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xCED000
	007 Move W8, [X21+2971]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xA00000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0xA4D000
	018 Move X0, [X0+2560]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2971], W8
	022 Move W8, [X19+48]
	023 Compare W8, 0
	024 JumpIfEqual {26}
	025 Move W0, 1
	026 Move X8, 0xA00000
	027 Move X8, [X8+1432]
	028 Move X21, [X19+16]
	029 Move X0, [X8]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X21
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Inequality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {70}
	042 Move X22, 0xA4D000
	043 Move X22, [X22+2560]
	044 Move X21, [X19+16]
	045 Move X0, [X22]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X21
	051 Call RigUtils.GetConstraints, X0
	052 Move [X19+32], X0
	053 Compare X0, 0
	054 JumpIfEqual {71}
	055 Move X8, [X0+24]
	056 Move X21, X0
	057 Compare X8, 0
	058 JumpIfEqual {70}
	059 Move X0, [X22]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X20
	065 Move X1, X21
	066 Call RigUtils.CreateAnimationJobs, X0, X1
	067 Move [X19+40], X0
	068 Move W0, 1
	069 Move [X19+48], W0
	070 Move W0, W31
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X22, [X31+16]
	074 Move X21, [X31+24]
	075 Move X30, [X31+48]
	076 Return X0

Method: System.Void Update()

Disassembly:
	0x036F5358 LDR X10, [X10 + 0x878]
	0x036F535C LDR X1, [X10]
	0x036F5360 CBZ X9, 0x36F5384
	0x036F5364 LDR X10, [X8 + 0xB0]
	0x036F5368 ADD X10, X10, 0x8
	0x036F536C LDUR X11, [X10 - 0x8]
	0x036F5370 CMP X11, X1
	0x036F5374 B.EQ 0x36F5394
	0x036F5378 SUBS X9, X9, 0x1
	0x036F537C ADD X10, X10, 0x10
	0x036F5380 B.NE 0x36F536C
	0x036F5384 MOV X0, X20
	0x036F5388 MOV W2, W31
	0x036F538C BL 0x1C5C788
	0x036F5390 B 0x36F53A0
	0x036F5394 LDRSW X9, [X10]
	0x036F5398 ADD X8, X8, X9, 0x4, LSL
	0x036F539C ADD X0, X8, 0x138
	0x036F53A0 LDP X8, X1, [X0]
	0x036F53A4 MOV X0, X20
	0x036F53A8 BLR X8
	0x036F53AC ADRP X8, 0x9FE000
	0x036F53B0 LDR X8, [X8 + 0x598]
	0x036F53B4 MOV X24, X0
	0x036F53B8 LDR X0, [X8]
	0x036F53BC LDR W8, [X0 + 0xE0]
	0x036F53C0 CBNZ W8, 0x36F53C8
	0x036F53C4 BL 0x1C16DFC
	0x036F53C8 MOV X0, X24
	0x036F53CC MOV X1, X31
	0x036F53D0 MOV X2, X31
	0x036F53D4 BL 0x3C354F8
	0x036F53D8 TBZ X0, 0x0, 0x36F5464
	0x036F53DC CBZ X23, 0x36F575C
	0x036F53E0 MOV X0, X23
	0x036F53E4 MOV X1, X31
	0x036F53E8 BL 0x3C32E90
	0x036F53EC MOV X1, X0
	0x036F53F0 CBZ X24, 0x36F5760
	0x036F53F4 MOV X0, X24
	0x036F53F8 MOV X2, X31
	0x036F53FC BL 0x3C40F48
	0x036F5400 TBZ X0, 0x0, 0x36F5464
	0x036F5404 CBZ X22, 0x36F5764
	0x036F5408 ADRP X9, 0xA05000
	0x036F540C LDR W10, [X22 + 0x1C]
	0x036F5410 LDR X8, [X22 + 0x10]
	0x036F5414 LDR X9, [X9 + 0x958]
	0x036F5418 ADD W10, W10, 0x1
	0x036F541C LDR X9, [X9]
	0x036F5420 STR W10, [X22 + 0x1C]
	0x036F5424 CBZ X8, 0x36F5768
	0x036F5428 LDRSW X10, [X22 + 0x18]
	0x036F542C LDR W11, [X8 + 0x18]
	0x036F5430 CMP W10, W11
	0x036F5434 B.CS 0x36F544C
	0x036F5438 ADD W9, W10, 0x1
	0x036F543C ADD X8, X8, X10, 0x3, LSL
	0x036F5440 STR W9, [X22 + 0x18]
	0x036F5444 STR X24, [X8 + 0x20]
	0x036F5448 B 0x36F5464
	0x036F544C LDR X8, [X9 + 0x20]
	0x036F5450 LDR X8, [X8 + 0xC0]
	0x036F5454 LDR X2, [X8 + 0x70]
	0x036F5458 MOV X0, X22
	0x036F545C MOV X1, X24
	0x036F5460 BL 0x301BF90
	0x036F5464 LDR X8, [X21]
	0x036F5468 LDP X9, X1, [X8 + 0x1A8]
	0x036F546C MOV X0, X21
	0x036F5470 BLR X9
	0x036F5474 MOV X24, X0
	0x036F5478 ADD X0, X31, 0xC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xCEC000
	009 Move W8, [X20+2972]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xA28000
	016 Move X0, [X0+3632]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2972], W8
	020 Move W8, [X19+48]
	021 Compare W8, 0
	022 JumpIfEqual {74}
	023 Move X8, [X19+32]
	024 Compare X8, 0
	025 JumpIfEqual {73}
	026 Move W22, [X8+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X23, 0xA28000
	029 Move X23, [X23+3632]
	030 Move W9, W31
	031 Move W10, [X8+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X10, [X19+40]
	034 Compare X10, 0
	035 JumpIfEqual {73}
	036 Move W11, [X10+24]
	037 Move X24, W9
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Add X8, X8, X24
	040 Move X20, [X8+32]
	041 Compare X20, 0
	042 JumpIfEqual {73}
	043 Move X8, [X20]
	044 Add X9, X10, X24
	045 Move X21, [X9+32]
	046 Move X1, [X23]
	047 NotImplemented "Instruction LDRH not yet implemented."
	048 Compare X9, 0
	049 JumpIfEqual {56}
	050 Move X10, [X8+176]
	051 Add X10, X10, 8
	052 NotImplemented "Instruction LDUR not yet implemented."
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Subtract X9, X9, 1
	055 Add X10, X10, 16
	056 Move W2, 2
	057 Move X0, X20
	058 Call 0x1C5D788
	059 Move W9, [X10]
	060 Add W9, W9, 2
	061 Add X8, X8, W9
	062 Add X0, X8, 312
	063 Move X8, [X0]
	064 Move X2, [X0+8]
	065 Move X0, X20
	066 Move X1, X21
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Add W9, W24, 1
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X8, [X19+32]
	071 Compare X8, 0
	072 JumpIfNotEqual {31}
	073 Call 0x1C17F20
	074 Move X20, [X31+48]
	075 Move X19, [X31+56]
	076 Move X22, [X31+32]
	077 Move X21, [X31+40]
	078 Move X24, [X31+16]
	079 Move X23, [X31+24]
	080 Move X30, [X31+64]
	081 Return 
	082 Call 0x1C17F28

Method: System.Void Reset()

Disassembly:
	0x036F547C MOV X1, X31
	0x036F5480 BL 0x337B6E0
	0x036F5484 ADRP X8, 0xA4B000
	0x036F5488 LDR X8, [X8 + 0x7C0]
	0x036F548C MOV X2, X0
	0x036F5490 LDR X1, [X8]
	0x036F5494 ADRP X8, 0xA4B000
	0x036F5498 LDR X8, [X8 + 0x7B8]
	0x036F549C LDR X3, [X8]
	0x036F54A0 MOV X0, X24
	0x036F54A4 MOV X4, X31
	0x036F54A8 BL 0x32277C4
	0x036F54AC BL 0x36ECF70
	0x036F54B0 MOV X24, X0
	0x036F54B4 LDR X0, [X29]
	0x036F54B8 LDR W8, [X0 + 0xE0]
	0x036F54BC CBNZ W8, 0x36F54C8
	0x036F54C0 BL 0x1C16DFC
	0x036F54C4 LDR X0, [X29]
	0x036F54C8 ADRP X9, 0x9FE000
	0x036F54CC LDR X8, [X0 + 0xB8]
	0x036F54D0 LDR X9, [X9 + 0x6C0]
	0x036F54D4 LDR X25, [X8]
	0x036F54D8 LDR X0, [X9]
	0x036F54DC ADRP X9, 0xA26000
	0x036F54E0 LDR W8, [X0 + 0xE0]
	0x036F54E4 LDR X9, [X9 + 0xA80]
	0x036F54E8 LDR X26, [X9]
	0x036F54EC CBNZ W8, 0x36F54F4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xCEC000
	006 Move W8, [X20+2973]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xA4C000
	013 Move X0, [X0+2560]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2973], W8
	017 Move W8, [X19+48]
	018 Compare W8, 0
	019 JumpIfEqual {36}
	020 Move X8, 0xA4C000
	021 Move X8, [X8+2560]
	022 Add X19, X19, 32
	023 Move X20, [X19]
	024 Move X0, [X8]
	025 Move X21, [X19+8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X21
	032 Call RigUtils.DestroyAnimationJobs, X0, X1
	033 Move [X19], X31
	034 Move [X19+8], X31
	035 Move [X19+16], W31
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return 

Method: System.Boolean IsValid()

Disassembly:
	0x036F560C MOV X2, X31
	0x036F5610 LDR X1, [X8]
	0x036F5614 BL 0x321B938
	0x036F5618 BL 0x36ECF70
	0x036F561C ADRP X21, 0xA4B000
	0x036F5620 LDR X21, [X21 + 0xA00]
	0x036F5624 MOV X20, X0
	0x036F5628 LDR X8, [X21]
	0x036F562C LDR W9, [X8 + 0xE0]
	0x036F5630 CBNZ W9, 0x36F5640
	0x036F5634 MOV X0, X8
	0x036F5638 BL 0x1C16DFC
	0x036F563C LDR X8, [X21]
	0x036F5640 ADRP X9, 0x9FE000
	0x036F5644 LDR X8, [X8 + 0xB8]
	0x036F5648 LDR X9, [X9 + 0x6C0]
	0x036F564C LDR X0, [X9]
	0x036F5650 ADRP X9, 0xA26000
	0x036F5654 LDR X9, [X9 + 0xA80]
	0x036F5658 LDR X21, [X8]
	0x036F565C LDR W8, [X0 + 0xE0]
	0x036F5660 LDR X22, [X9]
	0x036F5664 CBNZ W8, 0x36F566C
	0x036F5668 BL 0x1C16DFC
	0x036F566C MOV X0, X22
	0x036F5670 MOV X1, X31
	0x036F5674 BL 0x338C698
	0x036F5678 CBZ X21, 0x36F5758
	0x036F567C ADRP X8, 0xA4B000
	0x036F5680 LDR X8, [X8 + 0xAD8]
	0x036F5684 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xCEC000
	006 Move X20, 0x9FF000
	007 Move W8, [X21+2974]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x9FF000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2974], W8
	019 Move X0, [X20]
	020 Move X20, [X19+16]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {36}
	033 Move W8, [X19+48]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CSET not yet implemented."
	036 Move W0, W31
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0

