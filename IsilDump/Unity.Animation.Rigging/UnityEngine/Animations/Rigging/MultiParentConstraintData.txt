Type: UnityEngine.Animations.Rigging.MultiParentConstraintData

Method: UnityEngine.Transform get_constrainedObject()

Disassembly:
	0x036EF3A0 MOVZ W8, 0x1
	0x036EF3A4 STRB W8, [X20 + 0xB64]

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Void set_constrainedObject(UnityEngine.Transform value)

Disassembly:
	0x036EF3A8 LDR X9, [X19 + 0x8]
	0x036EF3AC LDR W8, [X19]

ISIL:
	001 Move [X0], X1
	002 Return 

Method: UnityEngine.Animations.Rigging.WeightedTransformArray get_sourceObjects()

Disassembly:
	0x036EF3B0 CBZ X9, 0x36EF3BC
	0x036EF3B4 LDR W9, [X9 + 0x18]
	0x036EF3B8 SUB W9, W9, 0x1
	0x036EF3BC CMP W8, W9

ISIL:
	001 Add X1, X0, 8
	002 Move W2, 136
	003 Move X0, X8
	004 Call 0x3EB2AC0
	005 Return X0

Method: System.Void set_sourceObjects(UnityEngine.Animations.Rigging.WeightedTransformArray value)

Disassembly:
	0x036EF3C0 CSEL W9, W9, W8, GT
	0x036EF3C4 CMP W8, 0x0
	0x036EF3C8 CSEL W8, W31, W9, LT
	0x036EF3CC STR W8, [X19]
	0x036EF3D0 LDP X20, X19, [X31 + 0x10]
	0x036EF3D4 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X0, 8
	003 Move W2, 136
	004 Call 0x3EB2B30
	005 Move X30, [X31+16]
	006 Return 

Method: System.Boolean get_maintainPositionOffset()

Disassembly:
	0x036EF3D8 RET
	0x036EF3DC STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move W0, [X0+150]
	002 Return X0

Method: System.Void set_maintainPositionOffset(System.Boolean value)

Disassembly:
	0x036EF3E0 STP X20, X19, [X31 + 0x10]
	0x036EF3E4 ADRP X20, 0xCF1000
	0x036EF3E8 ADRP X21, 0xA51000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+150], W8
	003 Return 

Method: System.Boolean get_maintainRotationOffset()

Disassembly:
	0x036EF3EC LDRB W8, [X20 + 0xB65]
	0x036EF3F0 LDR X21, [X21 + 0x8E0]

ISIL:
	001 Move W0, [X0+151]
	002 Return X0

Method: System.Void set_maintainRotationOffset(System.Boolean value)

Disassembly:
	0x036EF3F4 MOV X19, X0
	0x036EF3F8 TBNZ X8, 0x0, 0x36EF410
	0x036EF3FC ADRP X0, 0xA51000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+151], W8
	003 Return 

Method: System.Boolean get_constrainedPositionXAxis()

Disassembly:
	0x036EF400 LDR X0, [X0 + 0x8E0]
	0x036EF404 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+144]
	002 Return X0

Method: System.Void set_constrainedPositionXAxis(System.Boolean value)

Disassembly:
	0x036EF408 MOVZ W8, 0x1
	0x036EF40C STRB W8, [X20 + 0xB65]
	0x036EF410 LDR X1, [X21]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+144], W8
	003 Return 

Method: System.Boolean get_constrainedPositionYAxis()

Disassembly:
	0x036EF414 MOV X0, X19
	0x036EF418 BL 0x25CBE04

ISIL:
	001 Move W0, [X0+145]
	002 Return X0

Method: System.Void set_constrainedPositionYAxis(System.Boolean value)

Disassembly:
	0x036EF41C ADD X0, X19, 0x28
	0x036EF420 LDP X20, X19, [X31 + 0x10]
	0x036EF424 LDP X30, X21, [X31], #0x20

ISIL:
	001 And W8, W1, 1
	002 Move [X0+145], W8
	003 Return 

Method: System.Boolean get_constrainedPositionZAxis()

Disassembly:
	0x036EF428 B 0x36EF37C
	0x036EF42C STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move W0, [X0+146]
	002 Return X0

Method: System.Void set_constrainedPositionZAxis(System.Boolean value)

Disassembly:
	0x036EF430 STP X20, X19, [X31 + 0x10]
	0x036EF434 ADRP X21, 0xCF1000
	0x036EF438 ADRP X20, 0xA51000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+146], W8
	003 Return 

Method: System.Boolean get_constrainedRotationXAxis()

Disassembly:
	0x036EF43C LDRB W8, [X21 + 0xB66]
	0x036EF440 LDR X20, [X20 + 0x8E8]

ISIL:
	001 Move W0, [X0+147]
	002 Return X0

Method: System.Void set_constrainedRotationXAxis(System.Boolean value)

Disassembly:
	0x036EF444 MOV X19, X0
	0x036EF448 TBNZ X8, 0x0, 0x36EF46C
	0x036EF44C ADRP X0, 0xA51000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+147], W8
	003 Return 

Method: System.Boolean get_constrainedRotationYAxis()

Disassembly:
	0x036EF450 LDR X0, [X0 + 0x8F0]
	0x036EF454 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+148]
	002 Return X0

Method: System.Void set_constrainedRotationYAxis(System.Boolean value)

Disassembly:
	0x036EF458 ADRP X0, 0xA51000
	0x036EF45C LDR X0, [X0 + 0x8E8]
	0x036EF460 BL 0x1C16CF4

ISIL:
	001 And W8, W1, 1
	002 Move [X0+148], W8
	003 Return 

Method: System.Boolean get_constrainedRotationZAxis()

Disassembly:
	0x036EF464 MOVZ W8, 0x1
	0x036EF468 STRB W8, [X21 + 0xB66]

ISIL:
	001 Move W0, [X0+149]
	002 Return X0

Method: System.Void set_constrainedRotationZAxis(System.Boolean value)

Disassembly:
	0x036EF46C LDR X0, [X20]
	0x036EF470 ADRP X20, 0xA51000
	0x036EF474 LDR W8, [X0 + 0xE0]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+149], W8
	003 Return 

Method: System.String UnityEngine.Animations.Rigging.IMultiParentConstraintData.get_sourceObjectsProperty()

Disassembly:
	0x036EF478 LDR X20, [X20 + 0x8F0]
	0x036EF47C CBNZ W8, 0x36EF484
	0x036EF480 BL 0x1C16DFC
	0x036EF484 LDR X1, [X20]
	0x036EF488 MOV X0, X19
	0x036EF48C LDP X20, X19, [X31 + 0x10]
	0x036EF490 LDP X30, X21, [X31], #0x20
	0x036EF494 B 0x25CC23C
	0x036EF498 LDR X0, [X0]
	0x036EF49C RET
	0x036EF4A0 STR X1, [X0]
	0x036EF4A4 RET
	0x036EF4A8 ADD X1, X0, 0x8
	0x036EF4AC MOVZ W2, 0x88
	0x036EF4B0 MOV X0, X8
	0x036EF4B4 B 0x3EB1AC0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xCF2000
	005 Move X20, 0xA52000
	006 Move W8, [X19+2898]
	007 Move X20, [X20+2160]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xA52000
	013 Move X0, [X0+2160]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2898], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Call ConstraintsUtils.ConstructConstraintDataPropertyName, X0
	022 Return X0

Method: System.Boolean UnityEngine.Animations.Rigging.IAnimationJobData.IsValid()

Disassembly:
	0x036EF4B8 STR X30, [X31 - 0x10]!
	0x036EF4BC ADD X0, X0, 0x8
	0x036EF4C0 MOVZ W2, 0x88
	0x036EF4C4 BL 0x3EB1B30
	0x036EF4C8 LDR X30, [X31], #0x10
	0x036EF4CC RET
	0x036EF4D0 LDRB W0, [X0 + 0x9F]
	0x036EF4D4 RET
	0x036EF4D8 AND W8, W1, 0x1
	0x036EF4DC STRB W8, [X0 + 0x9F]
	0x036EF4E0 RET
	0x036EF4E4 LDP S0, S1, [X0 + 0x90]
	0x036EF4E8 LDR V2, [X0 + 0x98]
	0x036EF4EC RET
	0x036EF4F0 STP S0, S1, [X0 + 0x90]
	0x036EF4F4 STR S2, [X0 + 0x98]
	0x036EF4F8 RET
	0x036EF4FC LDRB W0, [X0 + 0x9C]
	0x036EF500 RET
	0x036EF504 AND W8, W1, 0x1
	0x036EF508 STRB W8, [X0 + 0x9C]
	0x036EF50C RET
	0x036EF510 LDRB W0, [X0 + 0x9D]
	0x036EF514 RET
	0x036EF518 AND W8, W1, 0x1
	0x036EF51C STRB W8, [X0 + 0x9D]
	0x036EF520 RET
	0x036EF524 LDRB W0, [X0 + 0x9E]
	0x036EF528 RET
	0x036EF52C AND W8, W1, 0x1
	0x036EF530 STRB W8, [X0 + 0x9E]
	0x036EF534 RET
	0x036EF538 STR X30, [X31 - 0x20]!
	0x036EF53C STP X20, X19, [X31 + 0x10]
	0x036EF540 ADRP X19, 0xCF1000
	0x036EF544 ADRP X20, 0xA51000
	0x036EF548 LDRB W8, [X19 + 0xB67]
	0x036EF54C LDR X20, [X20 + 0x858]
	0x036EF550 TBNZ X8, 0x0, 0x36EF568
	0x036EF554 ADRP X0, 0xA51000
	0x036EF558 LDR X0, [X0 + 0x858]
	0x036EF55C BL 0x1C16CF4
	0x036EF560 MOVZ W8, 0x1
	0x036EF564 STRB W8, [X19 + 0xB67]
	0x036EF568 LDR X0, [X20]
	0x036EF56C LDP X20, X19, [X31 + 0x10]
	0x036EF570 LDR X30, [X31], #0x20
	0x036EF574 B 0x36ECF70
	0x036EF578 STR X30, [X31 - 0x20]!
	0x036EF57C STP X20, X19, [X31 + 0x10]
	0x036EF580 ADRP X19, 0xCF1000
	0x036EF584 ADRP X20, 0xA51000
	0x036EF588 LDRB W8, [X19 + 0xB68]
	0x036EF58C LDR X20, [X20 + 0x870]
	0x036EF590 TBNZ X8, 0x0, 0x36EF5A8
	0x036EF594 ADRP X0, 0xA51000
	0x036EF598 LDR X0, [X0 + 0x870]
	0x036EF59C BL 0x1C16CF4
	0x036EF5A0 MOVZ W8, 0x1
	0x036EF5A4 STRB W8, [X19 + 0xB68]
	0x036EF5A8 LDR X0, [X20]
	0x036EF5AC LDP X20, X19, [X31 + 0x10]
	0x036EF5B0 LDR X30, [X31], #0x20
	0x036EF5B4 B 0x36ECF70
	0x036EF5B8 STR X30, [X31 - 0x40]!
	0x036EF5BC STP X24, X23, [X31 + 0x10]
	0x036EF5C0 STP X22, X21, [X31 + 0x20]
	0x036EF5C4 STP X20, X19, [X31 + 0x30]
	0x036EF5C8 ADRP X20, 0xCF1000
	0x036EF5CC ADRP X22, 0xA04000
	0x036EF5D0 LDRB W8, [X20 + 0xB69]
	0x036EF5D4 LDR X22, [X22 + 0x598]
	0x036EF5D8 MOV X19, X0
	0x036EF5DC TBNZ X8, 0x0, 0x36EF624
	0x036EF5E0 ADRP X0, 0xA04000
	0x036EF5E4 LDR X0, [X0 + 0xE00]
	0x036EF5E8 BL 0x1C16CF4
	0x036EF5EC ADRP X0, 0xA51000
	0x036EF5F0 LDR X0, [X0 + 0x878]
	0x036EF5F4 BL 0x1C16CF4
	0x036EF5F8 ADRP X0, 0xA04000
	0x036EF5FC LDR X0, [X0 + 0xE18]
	0x036EF600 BL 0x1C16CF4
	0x036EF604 ADRP X0, 0xA04000
	0x036EF608 LDR X0, [X0 + 0x598]
	0x036EF60C BL 0x1C16CF4
	0x036EF610 ADRP X0, 0xA2E000
	0x036EF614 LDR X0, [X0 + 0x960]
	0x036EF618 BL 0x1C16CF4
	0x036EF61C MOVZ W8, 0x1
	0x036EF620 STRB W8, [X20 + 0xB69]
	0x036EF624 LDR X0, [X22]
	0x036EF628 LDR X20, [X19]
	0x036EF62C LDR W8, [X0 + 0xE0]
	0x036EF630 CBNZ W8, 0x36EF638
	0x036EF634 BL 0x1C16DFC
	0x036EF638 MOV X0, X20
	0x036EF63C MOV X1, X31
	0x036EF640 MOV X2, X31
	0x036EF644 BL 0x3C3883C
	0x036EF648 TBNZ X0, 0x0, 0x36EF7D4
	0x036EF64C ADRP X20, 0xA2E000
	0x036EF650 LDR X20, [X20 + 0x960]
	0x036EF654 ADD X19, X19, 0x8
	0x036EF658 LDR X0, [X20]
	0x036EF65C LDR W8, [X0 + 0xE0]
	0x036EF660 CBNZ W8, 0x36EF668
	0x036EF664 BL 0x1C16DFC
	0x036EF668 LDR W8, [X19]
	0x036EF66C CBZ W8, 0x36EF7D4
	0x036EF670 LDR X0, [X20]
	0x036EF674 LDR W8, [X0 + 0xE0]
	0x036EF678 CBNZ W8, 0x36EF680
	0x036EF67C BL 0x1C16DFC
	0x036EF680 MOV X0, X19
	0x036EF684 BL 0x36EE038
	0x036EF688 MOV X19, X0
	0x036EF68C CBZ X0, 0x36EF810
	0x036EF690 ADRP X23, 0xA04000
	0x036EF694 ADRP X24, 0xA51000
	0x036EF698 LDR X23, [X23 + 0xE18]
	0x036EF69C LDR X24, [X24 + 0x878]
	0x036EF6A0 LDR X8, [X19]
	0x036EF6A4 LDR X1, [X23]
	0x036EF6A8 LDRH W9, [X8 + 0x12E]
	0x036EF6AC CBZ X9, 0x36EF6D0
	0x036EF6B0 LDR X10, [X8 + 0xB0]
	0x036EF6B4 ADD X10, X10, 0x8
	0x036EF6B8 LDUR X11, [X10 - 0x8]
	0x036EF6BC CMP X11, X1
	0x036EF6C0 B.EQ 0x36EF6E0
	0x036EF6C4 SUBS X9, X9, 0x1
	0x036EF6C8 ADD X10, X10, 0x10
	0x036EF6CC B.NE 0x36EF6B8
	0x036EF6D0 MOV X0, X19
	0x036EF6D4 MOV W2, W31
	0x036EF6D8 BL 0x1C5C788
	0x036EF6DC B 0x36EF6EC
	0x036EF6E0 LDRSW X9, [X10]
	0x036EF6E4 ADD X8, X8, X9, 0x4, LSL
	0x036EF6E8 ADD X0, X8, 0x138
	0x036EF6EC LDP X8, X1, [X0]
	0x036EF6F0 MOV X0, X19
	0x036EF6F4 BLR X8
	0x036EF6F8 MOV W21, W0
	0x036EF6FC TBZ X0, 0x0, 0x36EF780
	0x036EF700 LDR X8, [X19]
	0x036EF704 LDR X1, [X24]
	0x036EF708 LDRH W9, [X8 + 0x12E]
	0x036EF70C CBZ X9, 0x36EF730
	0x036EF710 LDR X10, [X8 + 0xB0]
	0x036EF714 ADD X10, X10, 0x8
	0x036EF718 LDUR X11, [X10 - 0x8]
	0x036EF71C CMP X11, X1
	0x036EF720 B.EQ 0x36EF740
	0x036EF724 SUBS X9, X9, 0x1
	0x036EF728 ADD X10, X10, 0x10
	0x036EF72C B.NE 0x36EF718
	0x036EF730 MOV X0, X19
	0x036EF734 MOV W2, W31
	0x036EF738 BL 0x1C5C788
	0x036EF73C B 0x36EF74C
	0x036EF740 LDRSW X9, [X10]
	0x036EF744 ADD X8, X8, X9, 0x4, LSL
	0x036EF748 ADD X0, X8, 0x138
	0x036EF74C LDP X8, X1, [X0]
	0x036EF750 MOV X0, X19
	0x036EF754 BLR X8
	0x036EF758 MOV X20, X0
	0x036EF75C LDR X0, [X22]
	0x036EF760 LDR W8, [X0 + 0xE0]
	0x036EF764 CBNZ W8, 0x36EF76C
	0x036EF768 BL 0x1C16DFC
	0x036EF76C MOV X0, X20
	0x036EF770 MOV X1, X31
	0x036EF774 MOV X2, X31
	0x036EF778 BL 0x3C3883C
	0x036EF77C TBZ X0, 0x0, 0x36EF6A0
	0x036EF780 MOV X20, X31
	0x036EF784 EOR W21, W21, 0x1
	0x036EF788 CBZ X19, 0x36EF7F4
	0x036EF78C ADRP X10, 0xA04000
	0x036EF790 LDR X8, [X19]
	0x036EF794 LDR X10, [X10 + 0xE00]
	0x036EF798 LDRH W9, [X8 + 0x12E]
	0x036EF79C LDR X1, [X10]
	0x036EF7A0 CBZ X9, 0x36EF7C4
	0x036EF7A4 LDR X10, [X8 + 0xB0]
	0x036EF7A8 ADD X10, X10, 0x8
	0x036EF7AC LDUR X11, [X10 - 0x8]
	0x036EF7B0 CMP X11, X1
	0x036EF7B4 B.EQ 0x36EF7DC
	0x036EF7B8 SUBS X9, X9, 0x1
	0x036EF7BC ADD X10, X10, 0x10
	0x036EF7C0 B.NE 0x36EF7AC
	0x036EF7C4 MOV X0, X19
	0x036EF7C8 MOV W2, W31
	0x036EF7CC BL 0x1C5C788
	0x036EF7D0 B 0x36EF7E8
	0x036EF7D4 MOV W21, W31
	0x036EF7D8 B 0x36EF7F8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xCF2000
	009 Move X22, 0xA05000
	010 Move W8, [X20+2899]
	011 Move X22, [X22+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xA05000
	018 Move X0, [X0+3584]
	019 Call 0x1C17CF4
	020 Move X0, 0xA52000
	021 Move X0, [X0+2168]
	022 Call 0x1C17CF4
	023 Move X0, 0xA05000
	024 Move X0, [X0+3608]
	025 Call 0x1C17CF4
	026 Move X0, 0xA05000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move X0, 0xA2F000
	030 Move X0, [X0+2400]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+2899], W8
	034 Move X0, [X22]
	035 Move X20, [X19]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Equality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {154}
	048 Move X20, 0xA2F000
	049 Move X20, [X20+2400]
	050 Add X19, X19, 8
	051 Move X0, [X20]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move W8, [X19]
	057 Compare W8, 0
	058 JumpIfEqual {154}
	059 Move X0, [X20]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X19
	065 Call WeightedTransformArray.GetEnumerator, X0
	066 Move X19, X0
	067 Compare X0, 0
	068 JumpIfEqual {173}
	069 Move X23, 0xA05000
	070 Move X24, 0xA52000
	071 Move X23, [X23+3608]
	072 Move X24, [X24+2168]
	073 Move X8, [X19]
	074 Move X1, [X23]
	075 NotImplemented "Instruction LDRH not yet implemented."
	076 Compare X9, 0
	077 JumpIfEqual {84}
	078 Move X10, [X8+176]
	079 Add X10, X10, 8
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Subtract X9, X9, 1
	083 Add X10, X10, 16
	084 Move X0, X19
	085 Move W2, W31
	086 Call 0x1C5D788
	087 NotImplemented "Instruction LDRSW not yet implemented."
	088 Add X8, X8, X9
	089 Add X0, X8, 312
	090 Move X8, [X0]
	091 Move X1, [X0+8]
	092 Move X0, X19
	093 NotImplemented "Instruction BLR not yet implemented."
	094 Move W21, W0
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfNotEqual {134}
	099 Move X8, [X19]
	100 Move X1, [X24]
	101 NotImplemented "Instruction LDRH not yet implemented."
	102 Compare X9, 0
	103 JumpIfEqual {110}
	104 Move X10, [X8+176]
	105 Add X10, X10, 8
	106 NotImplemented "Instruction LDUR not yet implemented."
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Subtract X9, X9, 1
	109 Add X10, X10, 16
	110 Move X0, X19
	111 Move W2, W31
	112 Call 0x1C5D788
	113 NotImplemented "Instruction LDRSW not yet implemented."
	114 Add X8, X8, X9
	115 Add X0, X8, 312
	116 Move X8, [X0]
	117 Move X1, [X0+8]
	118 Move X0, X19
	119 NotImplemented "Instruction BLR not yet implemented."
	120 Move X20, X0
	121 Move X0, [X22]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Move X0, X20
	127 Move X1, X31
	128 Move X2, X31
	129 Call Object.op_Equality, X0, X1
	130 Move TEMP, X0
	131 And TEMP, TEMP, 1
	132 Compare TEMP, 1
	133 JumpIfNotEqual {73}
	134 Move X20, X31
	135 Xor W21, W21, 1
	136 Compare X19, 0
	137 JumpIfEqual {162}
	138 Move X10, 0xA05000
	139 Move X8, [X19]
	140 Move X10, [X10+3584]
	141 NotImplemented "Instruction LDRH not yet implemented."
	142 Move X1, [X10]
	143 Compare X9, 0
	144 JumpIfEqual {151}
	145 Move X10, [X8+176]
	146 Add X10, X10, 8
	147 NotImplemented "Instruction LDUR not yet implemented."
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Subtract X9, X9, 1
	150 Add X10, X10, 16
	151 Move X0, X19
	152 Move W2, W31
	153 Call 0x1C5D788
	154 Move W21, W31
	155 NotImplemented "Instruction LDRSW not yet implemented."
	156 Add X8, X8, X9
	157 Add X0, X8, 312
	158 Move X8, [X0]
	159 Move X1, [X0+8]
	160 Move X0, X19
	161 NotImplemented "Instruction BLR not yet implemented."
	162 Compare X20, 0
	163 JumpIfNotEqual {174}
	164 And W0, W21, 1
	165 Move X20, [X31+48]
	166 Move X19, [X31+56]
	167 Move X22, [X31+32]
	168 Move X21, [X31+40]
	169 Move X24, [X31+16]
	170 Move X23, [X31+24]
	171 Move X30, [X31+64]
	172 Return X0
	173 Call 0x1C17F20
	174 Move X0, X20
	175 Call 0x1C17F18
	176 Move X21, X0
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move X0, X21
	179 Call 0x3EB2AD0
	180 Move X20, [X0]
	181 Call 0x3EB2AE0
	182 Move W21, 1
	183 Compare X19, 0
	184 JumpIfNotEqual {138}
	185 Move X20, X31
	186 Move X21, X0
	187 Compare X19, 0
	188 JumpIfEqual {212}
	189 Move X10, 0xA05000
	190 Move X8, [X19]
	191 Move X10, [X10+3584]
	192 NotImplemented "Instruction LDRH not yet implemented."
	193 Move X1, [X10]
	194 Compare X9, 0
	195 JumpIfEqual {202}
	196 Move X10, [X8+176]
	197 Add X10, X10, 8
	198 NotImplemented "Instruction LDUR not yet implemented."
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Subtract X9, X9, 1
	201 Add X10, X10, 16
	202 Move X0, X19
	203 Move W2, W31
	204 Call 0x1C5D788
	205 NotImplemented "Instruction LDRSW not yet implemented."
	206 Add X8, X8, X9
	207 Add X0, X8, 312
	208 Move X8, [X0]
	209 Move X1, [X0+8]
	210 Move X0, X19
	211 NotImplemented "Instruction BLR not yet implemented."
	212 Compare X20, 0
	213 JumpIfNotEqual {216}
	214 Move X0, X21
	215 Call 0x1D2D690
	216 Move X0, X20
	217 Call 0x1C17F18
	218 Call 0x1991590

Method: System.Void UnityEngine.Animations.Rigging.IAnimationJobData.SetDefaultValues()

Disassembly:
	0x036EF7DC LDRSW X9, [X10]
	0x036EF7E0 ADD X8, X8, X9, 0x4, LSL
	0x036EF7E4 ADD X0, X8, 0x138
	0x036EF7E8 LDP X8, X1, [X0]
	0x036EF7EC MOV X0, X19
	0x036EF7F0 BLR X8
	0x036EF7F4 CBNZ X20, 0x36EF814
	0x036EF7F8 AND W0, W21, 0x1
	0x036EF7FC LDP X20, X19, [X31 + 0x30]
	0x036EF800 LDP X22, X21, [X31 + 0x20]
	0x036EF804 LDP X24, X23, [X31 + 0x10]
	0x036EF808 LDR X30, [X31], #0x40
	0x036EF80C RET
	0x036EF810 BL 0x1C16F20
	0x036EF814 MOV X0, X20
	0x036EF818 BL 0x1C16F18
	0x036EF81C B 0x36EF82C
	0x036EF820 B 0x36EF82C
	0x036EF824 B 0x36EF82C
	0x036EF828 B 0x36EF82C
	0x036EF82C MOV X21, X0
	0x036EF830 CMP W1, 0x1
	0x036EF834 B.NE 0x36EF854
	0x036EF838 MOV X0, X21
	0x036EF83C BL 0x3EB1AD0
	0x036EF840 LDR X20, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xCF2000
	006 Move X20, 0xA2F000
	007 Move W8, [X21+2900]
	008 Move X20, [X20+2400]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xA2F000
	015 Move X0, [X0+2400]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2900], W8
	019 Or W8, W31, 0x1010101
	020 Move [X19], X31
	021 Move [X19+144], W8
	022 NotImplemented "Instruction STRH not yet implemented."
	023 Move X0, [X20]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move [X19+8], W31
	029 NotImplemented "Instruction STRH not yet implemented."
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 

