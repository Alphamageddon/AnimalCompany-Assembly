Type: UnityEngine.Animations.Rigging.OverrideRigLayer

Method: UnityEngine.Animations.Rigging.Rig get_rig()

Disassembly:
	0x036F180C CBZ X0, 0x36F1978
	0x036F1810 LDR X8, [X0]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_rig(UnityEngine.Animations.Rigging.Rig value)

Disassembly:
	0x036F1814 LDR X1, [X29]
	0x036F1818 MOV X24, X0

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Boolean get_active()

Disassembly:
	0x036F181C LDRH W9, [X8 + 0x12E]
	0x036F1820 CBZ X9, 0x36F1844

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_active(System.Boolean value)

Disassembly:
	0x036F1824 LDR X10, [X8 + 0xB0]
	0x036F1828 ADD X10, X10, 0x8
	0x036F182C LDUR X11, [X10 - 0x8]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+24], W8
	003 Return 

Method: System.String get_name()

Disassembly:
	0x036F1830 CMP X11, X1
	0x036F1834 B.EQ 0x36F1854
	0x036F1838 SUBS X9, X9, 0x1
	0x036F183C ADD X10, X10, 0x10
	0x036F1840 B.NE 0x36F182C
	0x036F1844 MOVZ W2, 0x3
	0x036F1848 MOV X0, X24
	0x036F184C BL 0x1C5C788
	0x036F1850 B 0x36F1864
	0x036F1854 LDR W9, [X10]
	0x036F1858 ADD W9, W9, 0x3
	0x036F185C ADD X8, X8, W9, 0x4, SXTW
	0x036F1860 ADD X0, X8, 0x138
	0x036F1864 LDP X8, X1, [X0]
	0x036F1868 MOV X0, X24
	0x036F186C BLR X8
	0x036F1870 CBZ X23, 0x36F1978
	0x036F1874 LDR W8, [X23 + 0x18]
	0x036F1878 CMP X22, X8
	0x036F187C B.CS 0x36F197C
	0x036F1880 ADD X9, X23, X22
	0x036F1884 ADD X22, X22, 0x1
	0x036F1888 AND W8, W0, 0x1
	0x036F188C CMP X22, X26
	0x036F1890 STRB W8, [X9 + 0x20]
	0x036F1894 B.NE 0x36F1730
	0x036F1898 ADRP X20, 0xA4F000
	0x036F189C LDR X20, [X20 + 0xA00]
	0x036F18A0 LDR X0, [X20]
	0x036F18A4 LDR W8, [X0 + 0xE0]
	0x036F18A8 CBNZ W8, 0x36F18B0
	0x036F18AC BL 0x1C16DFC
	0x036F18B0 ADRP X21, 0xCEF000
	0x036F18B4 LDRB W8, [X21 + 0xBE0]
	0x036F18B8 CBNZ W8, 0x36F18D0
	0x036F18BC ADRP X0, 0xA4F000
	0x036F18C0 LDR X0, [X0 + 0xA00]
	0x036F18C4 BL 0x1C16CF4
	0x036F18C8 MOVZ W8, 0x1
	0x036F18CC STRB W8, [X21 + 0xBE0]
	0x036F18D0 LDR X0, [X20]
	0x036F18D4 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xCF0000
	006 Move X20, 0xA03000
	007 Move W8, [X21+2945]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xA03000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0xA50000
	018 Move X0, [X0+2456]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2945], W8
	022 Move X0, [X20]
	023 Move X20, [X19+16]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {50}
	036 Move X0, [X19+16]
	037 Compare X0, 0
	038 JumpIfEqual {58}
	039 Move X1, X31
	040 Call Component.get_gameObject, X0
	041 Compare X0, 0
	042 JumpIfEqual {58}
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X1, X31
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Call Object.get_name, X0
	049 Return X0
	050 Move X8, 0xA50000
	051 Move X8, [X8+2456]
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X0, [X8]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Return X0
	058 Call 0x1C17F20

Method: UnityEngine.Animations.Rigging.IRigConstraint[] get_constraints()

Disassembly:
	0x036F18D8 CBNZ W8, 0x36F18E4
	0x036F18DC BL 0x1C16DFC
	0x036F18E0 LDR X0, [X20]
	0x036F18E4 LDR X8, [X0 + 0xB8]
	0x036F18E8 LDR X20, [X8 + 0x8]
	0x036F18EC CBZ X20, 0x36F1978

ISIL:
	001 Move W8, [X0+48]
	002 Compare W8, 0
	003 JumpIfEqual {6}
	004 Move X0, [X0+32]
	005 Return X0
	006 Move X0, X31
	007 Return X0

Method: UnityEngine.Animations.IAnimationJob[] get_jobs()

Disassembly:
	0x036F18F0 ADRP X10, 0xA2B000
	0x036F18F4 LDR X8, [X20]
	0x036F18F8 LDP X21, X19, [X19 + 0x18]
	0x036F18FC LDR X10, [X10 + 0xE28]
	0x036F1900 LDRH W9, [X8 + 0x12E]
	0x036F1904 LDR X1, [X10]

ISIL:
	001 Move W8, [X0+48]
	002 Compare W8, 0
	003 JumpIfEqual {6}
	004 Move X0, [X0+40]
	005 Return X0
	006 Move X0, X31
	007 Return X0

Method: System.Boolean get_isInitialized()

Disassembly:
	0x036F1908 CBZ X9, 0x36F192C
	0x036F190C LDR X10, [X8 + 0xB0]

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_isInitialized(System.Boolean value)

Disassembly:
	0x036F1910 ADD X10, X10, 0x8
	0x036F1914 LDUR X11, [X10 - 0x8]
	0x036F1918 CMP X11, X1

ISIL:
	001 And W8, W1, 1
	002 Move [X0+48], W8
	003 Return 

Method: System.Void .ctor(UnityEngine.Animations.Rigging.Rig rig, UnityEngine.Animations.Rigging.IRigConstraint[] constraints, System.Boolean active = True)

Disassembly:
	0x036F191C B.EQ 0x36F193C
	0x036F1920 SUBS X9, X9, 0x1
	0x036F1924 ADD X10, X10, 0x10
	0x036F1928 B.NE 0x36F1914
	0x036F192C MOVZ W2, 0x2
	0x036F1930 MOV X0, X20
	0x036F1934 BL 0x1C5C788
	0x036F1938 B 0x36F194C
	0x036F193C LDR W9, [X10]
	0x036F1940 ADD W9, W9, 0x2
	0x036F1944 ADD X8, X8, W9, 0x4, SXTW
	0x036F1948 ADD X0, X8, 0x138
	0x036F194C LDP X4, X3, [X0]
	0x036F1950 MOV X0, X20
	0x036F1954 MOV X1, X21
	0x036F1958 MOV X2, X19
	0x036F195C LDP X20, X19, [X31 + 0x50]
	0x036F1960 LDP X22, X21, [X31 + 0x40]
	0x036F1964 LDP X24, X23, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, X1
	007 Move W8, 1
	008 Move X1, X31
	009 Move W19, W3
	010 Move X20, X2
	011 Move X22, X0
	012 Move [X0+24], W8
	013 Call Object..ctor, X0
	014 And W8, W19, 1
	015 Move [X22+16], X21
	016 Move [X22+24], W8
	017 Move [X22+32], X20
	018 Move X20, [X31+32]
	019 Move X19, [X31+40]
	020 Move X22, [X31+16]
	021 Move X21, [X31+24]
	022 Move X30, [X31+48]
	023 Return 

Method: System.Boolean Initialize(UnityEngine.Animator animator)

Disassembly:
	0x036F1968 LDP X26, X25, [X31 + 0x20]
	0x036F196C LDP X28, X27, [X31 + 0x10]
	0x036F1970 LDP X29, X30, [X31], #0x60
	0x036F1974 BR X4
	0x036F1978 BL 0x1C16F20
	0x036F197C BL 0x1C16F28
	0x036F1980 STR X30, [X31 - 0x20]!
	0x036F1984 STP X20, X19, [X31 + 0x10]
	0x036F1988 ADRP X20, 0xCEF000
	0x036F198C LDRB W8, [X20 + 0xB91]
	0x036F1990 MOV X19, X0
	0x036F1994 TBNZ X8, 0x0, 0x36F19B8
	0x036F1998 ADRP X0, 0xA4F000
	0x036F199C LDR X0, [X0 + 0xA08]
	0x036F19A0 BL 0x1C16CF4
	0x036F19A4 ADRP X0, 0xA4F000
	0x036F19A8 LDR X0, [X0 + 0xA10]
	0x036F19AC BL 0x1C16CF4
	0x036F19B0 MOVZ W8, 0x1
	0x036F19B4 STRB W8, [X20 + 0xB91]
	0x036F19B8 LDR X20, [X19 + 0x20]
	0x036F19BC CBNZ X20, 0x36F19E8
	0x036F19C0 ADRP X8, 0xA4F000
	0x036F19C4 LDR X8, [X8 + 0xA10]
	0x036F19C8 LDR X0, [X8]
	0x036F19CC BL 0x1C16F10
	0x036F19D0 ADRP X8, 0xA4F000
	0x036F19D4 LDR X8, [X8 + 0xA08]
	0x036F19D8 MOV X20, X0
	0x036F19DC LDR X1, [X8]
	0x036F19E0 BL 0x301B7C4
	0x036F19E4 STR X20, [X19 + 0x20]
	0x036F19E8 MOV X0, X20
	0x036F19EC LDP X20, X19, [X31 + 0x10]
	0x036F19F0 LDR X30, [X31], #0x20
	0x036F19F4 RET
	0x036F19F8 SUB X31, X31, 0x40
	0x036F19FC STP X30, X23, [X31 + 0x10]
	0x036F1A00 STP X22, X21, [X31 + 0x20]
	0x036F1A04 STP X20, X19, [X31 + 0x30]
	0x036F1A08 ADRP X22, 0xCEF000
	0x036F1A0C LDRB W8, [X22 + 0xB96]
	0x036F1A10 MOV X19, X2
	0x036F1A14 MOV X20, X1
	0x036F1A18 MOV X21, X0
	0x036F1A1C TBNZ X8, 0x0, 0x36F1A40
	0x036F1A20 ADRP X0, 0xA4F000
	0x036F1A24 LDR X0, [X0 + 0x9D0]
	0x036F1A28 BL 0x1C16CF4
	0x036F1A2C ADRP X0, 0xA4F000
	0x036F1A30 LDR X0, [X0 + 0xA18]
	0x036F1A34 BL 0x1C16CF4
	0x036F1A38 MOVZ W8, 0x1
	0x036F1A3C STRB W8, [X22 + 0xB96]
	0x036F1A40 CBZ X21, 0x36F1AE4
	0x036F1A44 MOV X0, X21
	0x036F1A48 MOV X1, X31
	0x036F1A4C BL 0x3C32ECC
	0x036F1A50 CBZ X0, 0x36F1AE4
	0x036F1A54 MOV X1, X31
	0x036F1A58 BL 0x3C356F8
	0x036F1A5C CBZ X0, 0x36F1AE4
	0x036F1A60 ADRP X22, 0xA4F000
	0x036F1A64 ADRP X23, 0xA4F000
	0x036F1A68 LDR X22, [X22 + 0xA18]
	0x036F1A6C LDR X23, [X23 + 0x9D0]
	0x036F1A70 MOV X1, X31
	0x036F1A74 BL 0x3C389D4
	0x036F1A78 LDR X1, [X22]
	0x036F1A7C MOV X2, X31
	0x036F1A80 BL 0x321B938
	0x036F1A84 MOV X1, X31
	0x036F1A88 BL 0x3C5DEE0
	0x036F1A8C STP X0, X1, [X31]
	0x036F1A90 ADD X0, X31, 0x0
	0x036F1A94 MOVZ W1, 0x1
	0x036F1A98 MOV X2, X31
	0x036F1A9C BL 0x3C5E178
	0x036F1AA0 LDR X0, [X23]
	0x036F1AA4 LDP X23, X22, [X31]
	0x036F1AA8 LDR W8, [X0 + 0xE0]
	0x036F1AAC CBNZ W8, 0x36F1AB4
	0x036F1AB0 BL 0x1C16DFC
	0x036F1AB4 MOV X0, X23
	0x036F1AB8 MOV X1, X22
	0x036F1ABC MOV X2, X21
	0x036F1AC0 MOV X3, X20
	0x036F1AC4 MOV X4, X19
	0x036F1AC8 BL 0x36F1C40
	0x036F1ACC LDP X0, X1, [X31]
	0x036F1AD0 LDP X20, X19, [X31 + 0x30]
	0x036F1AD4 LDP X22, X21, [X31 + 0x20]
	0x036F1AD8 LDP X30, X23, [X31 + 0x10]
	0x036F1ADC ADD X31, X31, 0x40
	0x036F1AE0 RET
	0x036F1AE4 BL 0x1C16F20
	0x036F1AE8 STP X30, X23, [X31 - 0x30]!
	0x036F1AEC STP X22, X21, [X31 + 0x10]
	0x036F1AF0 STP X20, X19, [X31 + 0x20]
	0x036F1AF4 ADRP X22, 0xCEF000
	0x036F1AF8 LDRB W8, [X22 + 0xB8B]
	0x036F1AFC MOV X19, X2
	0x036F1B00 MOV X20, X1
	0x036F1B04 MOV X21, X0
	0x036F1B08 TBNZ X8, 0x0, 0x36F1B50
	0x036F1B0C ADRP X0, 0xA0C000
	0x036F1B10 LDR X0, [X0 + 0x850]
	0x036F1B14 BL 0x1C16CF4
	0x036F1B18 ADRP X0, 0xA4F000
	0x036F1B1C LDR X0, [X0 + 0x9C0]
	0x036F1B20 BL 0x1C16CF4
	0x036F1B24 ADRP X0, 0xA4F000
	0x036F1B28 LDR X0, [X0 + 0x9C8]
	0x036F1B2C BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0xCF0000
	010 Move W8, [X21+2946]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xA50000
	018 Move X0, [X0+2464]
	019 Call 0x1C17CF4
	020 Move X0, 0xA2C000
	021 Move X0, [X0+3632]
	022 Call 0x1C17CF4
	023 Move X0, 0xA03000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+2946], W8
	028 Move W8, [X20+48]
	029 Compare W8, 0
	030 JumpIfEqual {32}
	031 Move W0, 1
	032 Move X8, 0xA03000
	033 Move X8, [X8+1432]
	034 Move X21, [X20+16]
	035 Move X0, [X8]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X21
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Equality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {117}
	048 Move X8, [X20+32]
	049 Compare X8, 0
	050 JumpIfEqual {117}
	051 Move X1, [X8+24]
	052 Compare X1, 0
	053 JumpIfEqual {117}
	054 Move X8, 0xA50000
	055 Move X8, [X8+2464]
	056 Move X0, [X8]
	057 Call 0x1C17D6C
	058 Move X8, [X20+32]
	059 Move [X20+40], X0
	060 Compare X8, 0
	061 JumpIfEqual {116}
	062 Move X23, 0xA2C000
	063 Move X23, [X23+3632]
	064 Move W22, W31
	065 Move W9, [X8+24]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X24, W22
	069 Add X8, X8, X24
	070 Move X21, [X8+32]
	071 Compare X21, 0
	072 JumpIfEqual {116}
	073 Move X8, [X21]
	074 Move X25, [X20+40]
	075 Move X1, [X23]
	076 NotImplemented "Instruction LDRH not yet implemented."
	077 Compare X9, 0
	078 JumpIfEqual {85}
	079 Move X10, [X8+176]
	080 Add X10, X10, 8
	081 NotImplemented "Instruction LDUR not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Subtract X9, X9, 1
	084 Add X10, X10, 16
	085 Move W2, 1
	086 Move X0, X21
	087 Call 0x1C5D788
	088 Move W9, [X10]
	089 Add W9, W9, 1
	090 Add X8, X8, W9
	091 Add X0, X8, 312
	092 Move X8, [X0]
	093 Move X2, [X0+8]
	094 Move X0, X21
	095 Move X1, X19
	096 NotImplemented "Instruction BLR not yet implemented."
	097 Compare X25, 0
	098 JumpIfEqual {116}
	099 Move X21, X0
	100 Compare X0, 0
	101 JumpIfEqual {108}
	102 Move X8, [X25]
	103 Move X0, X21
	104 Move X1, [X8+64]
	105 Call 0x1C17E00
	106 Compare X0, 0
	107 JumpIfEqual {130}
	108 Move W8, [X25+24]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Add X8, X25, X24
	111 Move [X8+32], X21
	112 Move X8, [X20+32]
	113 Add W22, W22, 1
	114 Compare X8, 0
	115 JumpIfNotEqual {65}
	116 Call 0x1C17F20
	117 Move W0, W31
	118 Move X20, [X31+48]
	119 Move X19, [X31+56]
	120 Move X22, [X31+32]
	121 Move X21, [X31+40]
	122 Move X24, [X31+16]
	123 Move X23, [X31+24]
	124 Move X30, [X31+64]
	125 Move X25, [X31+72]
	126 Return X0
	127 Move W0, 1
	128 Move [X20+48], W0
	129 Call 0x1C17F28
	130 Call 0x1C17F44
	131 Move X1, X31
	132 Call 0x1C17DEC

Method: System.Void Update()

Disassembly:
	0x036F1B30 ADRP X0, 0xA02000
	0x036F1B34 LDR X0, [X0 + 0x598]
	0x036F1B38 BL 0x1C16CF4
	0x036F1B3C ADRP X0, 0xA4F000
	0x036F1B40 LDR X0, [X0 + 0x9D0]
	0x036F1B44 BL 0x1C16CF4
	0x036F1B48 MOVZ W8, 0x1
	0x036F1B4C STRB W8, [X22 + 0xB8B]
	0x036F1B50 LDRB W8, [X21 + 0x40]
	0x036F1B54 CBNZ W8, 0x36F1C28
	0x036F1B58 MOV X0, X21
	0x036F1B5C BL 0x36F115C
	0x036F1B60 ADRP X8, 0xA0C000
	0x036F1B64 LDR X8, [X8 + 0x850]
	0x036F1B68 MOV X0, X21
	0x036F1B6C LDR X1, [X8]
	0x036F1B70 BL 0x21A3894
	0x036F1B74 ADRP X8, 0xA02000
	0x036F1B78 LDR X8, [X8 + 0x598]
	0x036F1B7C MOV X22, X0
	0x036F1B80 LDR X8, [X8]
	0x036F1B84 LDR W9, [X8 + 0xE0]
	0x036F1B88 CBNZ W9, 0x36F1B94
	0x036F1B8C MOV X0, X8
	0x036F1B90 BL 0x1C16DFC
	0x036F1B94 MOV X0, X22
	0x036F1B98 MOV X1, X31
	0x036F1B9C MOV X2, X31
	0x036F1BA0 BL 0x3C3883C
	0x036F1BA4 TBNZ X0, 0x0, 0x36F1C28
	0x036F1BA8 MOV X0, X21
	0x036F1BAC BL 0x36F1980
	0x036F1BB0 CBZ X0, 0x36F1C3C
	0x036F1BB4 LDR W8, [X0 + 0x18]
	0x036F1BB8 CBZ W8, 0x36F1C28
	0x036F1BBC MOV X0, X21
	0x036F1BC0 BL 0x36F1980
	0x036F1BC4 CBZ X0, 0x36F1C3C
	0x036F1BC8 ADRP X8, 0xA4F000
	0x036F1BCC LDR X8, [X8 + 0x9C0]
	0x036F1BD0 LDR X1, [X8]
	0x036F1BD4 BL 0x301DDC4
	0x036F1BD8 MOV X23, X0
	0x036F1BDC STR X0, [X21 + 0x28]
	0x036F1BE0 MOV X0, X21
	0x036F1BE4 BL 0x36F153C
	0x036F1BE8 ADRP X8, 0xA4F000
	0x036F1BEC LDR X8, [X8 + 0x9D0]
	0x036F1BF0 MOV X21, X0
	0x036F1BF4 LDR X8, [X8]
	0x036F1BF8 LDR W9, [X8 + 0xE0]
	0x036F1BFC CBNZ W9, 0x36F1C08
	0x036F1C00 MOV X0, X8
	0x036F1C04 BL 0x1C16DFC
	0x036F1C08 MOV X0, X20
	0x036F1C0C MOV X1, X19
	0x036F1C10 MOV X2, X22
	0x036F1C14 MOV X3, X23
	0x036F1C18 MOV X4, X21
	0x036F1C1C BL 0x36F1C40
	0x036F1C20 MOVZ W0, 0x1
	0x036F1C24 B 0x36F1C2C
	0x036F1C28 MOV W0, W31
	0x036F1C2C LDP X20, X19, [X31 + 0x20]
	0x036F1C30 LDP X22, X21, [X31 + 0x10]
	0x036F1C34 LDP X30, X23, [X31], #0x30
	0x036F1C38 RET
	0x036F1C3C BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xCF0000
	008 Move W8, [X20+2947]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xA2C000
	015 Move X0, [X0+3632]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2947], W8
	019 Move W8, [X19+48]
	020 Compare W8, 0
	021 JumpIfEqual {71}
	022 Move X8, [X19+32]
	023 Compare X8, 0
	024 JumpIfEqual {70}
	025 Move X23, 0xA2C000
	026 Move X23, [X23+3632]
	027 Move W22, W31
	028 Move W9, [X8+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, [X19+40]
	032 Compare X9, 0
	033 JumpIfEqual {70}
	034 Move W10, [X9+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X10, W22
	037 Add X8, X8, X10
	038 Move X20, [X8+32]
	039 Compare X20, 0
	040 JumpIfEqual {70}
	041 Move X8, [X20]
	042 Add X9, X9, X10
	043 Move X21, [X9+32]
	044 Move X1, [X23]
	045 NotImplemented "Instruction LDRH not yet implemented."
	046 Compare X9, 0
	047 JumpIfEqual {54}
	048 Move X10, [X8+176]
	049 Add X10, X10, 8
	050 NotImplemented "Instruction LDUR not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Subtract X9, X9, 1
	053 Add X10, X10, 16
	054 Move W2, 2
	055 Move X0, X20
	056 Call 0x1C5D788
	057 Move W9, [X10]
	058 Add W9, W9, 2
	059 Add X8, X8, W9
	060 Add X0, X8, 312
	061 Move X8, [X0]
	062 Move X2, [X0+8]
	063 Move X0, X20
	064 Move X1, X21
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move X8, [X19+32]
	067 Add W22, W22, 1
	068 Compare X8, 0
	069 JumpIfNotEqual {28}
	070 Call 0x1C17F20
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X22, [X31+16]
	074 Move X21, [X31+24]
	075 Move X30, [X31+48]
	076 Move X23, [X31+56]
	077 Return 
	078 Call 0x1C17F28

Method: System.Void Reset()

Disassembly:
	0x036F1C40 STP X29, X30, [X31 - 0x60]!
	0x036F1C44 STP X28, X27, [X31 + 0x10]
	0x036F1C48 STP X26, X25, [X31 + 0x20]
	0x036F1C4C STP X24, X23, [X31 + 0x30]
	0x036F1C50 STP X22, X21, [X31 + 0x40]
	0x036F1C54 STP X20, X19, [X31 + 0x50]
	0x036F1C58 ADRP X24, 0xCEF000
	0x036F1C5C LDRB W8, [X24 + 0xB97]
	0x036F1C60 MOV X19, X4
	0x036F1C64 MOV X23, X3
	0x036F1C68 MOV X20, X2
	0x036F1C6C MOV X21, X1
	0x036F1C70 MOV X22, X0
	0x036F1C74 TBNZ X8, 0x0, 0x36F1CD4
	0x036F1C78 ADRP X0, 0xA02000
	0x036F1C7C LDR X0, [X0 + 0xE00]
	0x036F1C80 BL 0x1C16CF4
	0x036F1C84 ADRP X0, 0xA4F000
	0x036F1C88 LDR X0, [X0 + 0xA20]
	0x036F1C8C BL 0x1C16CF4
	0x036F1C90 ADRP X0, 0xA4F000
	0x036F1C94 LDR X0, [X0 + 0xA28]
	0x036F1C98 BL 0x1C16CF4
	0x036F1C9C ADRP X0, 0xA02000
	0x036F1CA0 LDR X0, [X0 + 0xE18]
	0x036F1CA4 BL 0x1C16CF4
	0x036F1CA8 ADRP X0, 0xA4F000
	0x036F1CAC LDR X0, [X0 + 0xA30]
	0x036F1CB0 BL 0x1C16CF4
	0x036F1CB4 ADRP X0, 0xA4F000
	0x036F1CB8 LDR X0, [X0 + 0x9D0]
	0x036F1CBC BL 0x1C16CF4
	0x036F1CC0 ADRP X0, 0xA4F000
	0x036F1CC4 LDR X0, [X0 + 0xA38]
	0x036F1CC8 BL 0x1C16CF4
	0x036F1CCC MOVZ W8, 0x1
	0x036F1CD0 STRB W8, [X24 + 0xB97]
	0x036F1CD4 ADRP X8, 0xA4F000
	0x036F1CD8 LDR X8, [X8 + 0x9D0]
	0x036F1CDC LDR X0, [X8]
	0x036F1CE0 LDR W8, [X0 + 0xE0]
	0x036F1CE4 CBNZ W8, 0x36F1CEC
	0x036F1CE8 BL 0x1C16DFC
	0x036F1CEC MOV X0, X20
	0x036F1CF0 MOV X1, X22
	0x036F1CF4 MOV X2, X21
	0x036F1CF8 MOV X3, X23
	0x036F1CFC MOV X4, X19
	0x036F1D00 BL 0x36F2A38
	0x036F1D04 CBZ X0, 0x36F1F8C
	0x036F1D08 ADRP X10, 0xA4F000
	0x036F1D0C LDR X8, [X0]
	0x036F1D10 LDR X10, [X10 + 0xA20]
	0x036F1D14 MOV X19, X0
	0x036F1D18 LDRH W9, [X8 + 0x12E]
	0x036F1D1C LDR X1, [X10]
	0x036F1D20 CBZ X9, 0x36F1D44
	0x036F1D24 LDR X10, [X8 + 0xB0]
	0x036F1D28 ADD X10, X10, 0x8
	0x036F1D2C LDUR X11, [X10 - 0x8]
	0x036F1D30 CMP X11, X1
	0x036F1D34 B.EQ 0x36F1D54
	0x036F1D38 SUBS X9, X9, 0x1
	0x036F1D3C ADD X10, X10, 0x10
	0x036F1D40 B.NE 0x36F1D2C
	0x036F1D44 MOV X0, X19
	0x036F1D48 MOV W2, W31
	0x036F1D4C BL 0x1C5C788
	0x036F1D50 B 0x36F1D60
	0x036F1D54 LDRSW X9, [X10]
	0x036F1D58 ADD X8, X8, X9, 0x4, LSL
	0x036F1D5C ADD X0, X8, 0x138
	0x036F1D60 LDP X8, X1, [X0]
	0x036F1D64 MOV X0, X19
	0x036F1D68 BLR X8
	0x036F1D6C MOV X19, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xCF0000
	010 Move W8, [X20+2948]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xA2C000
	017 Move X0, [X0+3632]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+2948], W8
	021 Move W8, [X19+48]
	022 Compare W8, 0
	023 JumpIfEqual {80}
	024 Move X22, X19
	025 Add X22, X22, 32
	026 Move X8, [X22]
	027 Compare X8, 0
	028 JumpIfEqual {76}
	029 Move W23, [X8+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X24, 0xA2C000
	032 Move X24, [X24+3632]
	033 Move W9, W31
	034 Move W10, [X8+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X10, [X19+40]
	037 Compare X10, 0
	038 JumpIfEqual {76}
	039 Move W11, [X10+24]
	040 Move X25, W9
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Add X8, X8, X25
	043 Move X20, [X8+32]
	044 Compare X20, 0
	045 JumpIfEqual {76}
	046 Move X8, [X20]
	047 Add X9, X10, X25
	048 Move X21, [X9+32]
	049 Move X1, [X24]
	050 NotImplemented "Instruction LDRH not yet implemented."
	051 Compare X9, 0
	052 JumpIfEqual {59}
	053 Move X10, [X8+176]
	054 Add X10, X10, 8
	055 NotImplemented "Instruction LDUR not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Subtract X9, X9, 1
	058 Add X10, X10, 16
	059 Move W2, 3
	060 Move X0, X20
	061 Call 0x1C5D788
	062 Move W9, [X10]
	063 Add W9, W9, 3
	064 Add X8, X8, W9
	065 Add X0, X8, 312
	066 Move X8, [X0]
	067 Move X2, [X0+8]
	068 Move X0, X20
	069 Move X1, X21
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Add W9, W25, 1
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X8, [X22]
	074 Compare X8, 0
	075 JumpIfNotEqual {34}
	076 Call 0x1C17F20
	077 Move [X22], X31
	078 Move [X22+8], X31
	079 Move [X22+16], W31
	080 Move X20, [X31+48]
	081 Move X19, [X31+56]
	082 Move X22, [X31+32]
	083 Move X21, [X31+40]
	084 Move X24, [X31+16]
	085 Move X23, [X31+24]
	086 Move X30, [X31+64]
	087 Move X25, [X31+72]
	088 Return 
	089 Call 0x1C17F28

Method: System.Boolean IsValid()

Disassembly:
	0x036F1D70 CBZ X0, 0x36F1F90
	0x036F1D74 ADRP X28, 0xA02000
	0x036F1D78 ADRP X29, 0xA4F000
	0x036F1D7C ADRP X26, 0xA4F000
	0x036F1D80 ADRP X27, 0xA4F000
	0x036F1D84 LDR X28, [X28 + 0xE18]
	0x036F1D88 LDR X29, [X29 + 0xA28]
	0x036F1D8C LDR X26, [X26 + 0xA38]
	0x036F1D90 LDR X27, [X27 + 0xA30]
	0x036F1D94 LDR X8, [X19]
	0x036F1D98 LDR X1, [X28]
	0x036F1D9C LDRH W9, [X8 + 0x12E]
	0x036F1DA0 CBZ X9, 0x36F1DC4
	0x036F1DA4 LDR X10, [X8 + 0xB0]
	0x036F1DA8 ADD X10, X10, 0x8
	0x036F1DAC LDUR X11, [X10 - 0x8]
	0x036F1DB0 CMP X11, X1
	0x036F1DB4 B.EQ 0x36F1DD4
	0x036F1DB8 SUBS X9, X9, 0x1
	0x036F1DBC ADD X10, X10, 0x10
	0x036F1DC0 B.NE 0x36F1DAC
	0x036F1DC4 MOV X0, X19
	0x036F1DC8 MOV W2, W31
	0x036F1DCC BL 0x1C5C788
	0x036F1DD0 B 0x36F1DE0
	0x036F1DD4 LDRSW X9, [X10]
	0x036F1DD8 ADD X8, X8, X9, 0x4, LSL
	0x036F1DDC ADD X0, X8, 0x138
	0x036F1DE0 LDP X8, X1, [X0]
	0x036F1DE4 MOV X0, X19
	0x036F1DE8 BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xCF0000
	006 Move X20, 0xA03000
	007 Move W8, [X21+2949]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xA03000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2949], W8
	019 Move X0, [X20]
	020 Move X20, [X19+16]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {36}
	033 Move W8, [X19+48]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CSET not yet implemented."
	036 Move W0, W31
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0

