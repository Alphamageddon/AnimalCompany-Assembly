Type: UnityEngine.Animations.Rigging.TwoBoneIKConstraintData

Method: UnityEngine.Transform get_root()

Disassembly:
	0x036F1428 B.NE 0x36F1414
	0x036F142C MOVZ W2, 0x3

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Void set_root(UnityEngine.Transform value)

Disassembly:
	0x036F1430 MOV X0, X20
	0x036F1434 BL 0x1C5C788

ISIL:
	001 Move [X0], X1
	002 Return 

Method: UnityEngine.Transform get_mid()

Disassembly:
	0x036F1438 B 0x36F144C
	0x036F143C LDR W9, [X10]

ISIL:
	001 Move X0, [X0+8]
	002 Return X0

Method: System.Void set_mid(UnityEngine.Transform value)

Disassembly:
	0x036F1440 ADD W9, W9, 0x3
	0x036F1444 ADD X8, X8, W9, 0x4, SXTW

ISIL:
	001 Move [X0+8], X1
	002 Return 

Method: UnityEngine.Transform get_tip()

Disassembly:
	0x036F1448 ADD X0, X8, 0x138
	0x036F144C LDP X8, X1, [X0]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_tip(UnityEngine.Transform value)

Disassembly:
	0x036F1450 MOV X0, X20
	0x036F1454 BLR X8

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: UnityEngine.Transform get_target()

Disassembly:
	0x036F1458 TBZ X0, 0x0, 0x36F14D8
	0x036F145C LDR X8, [X19 + 0x28]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_target(UnityEngine.Transform value)

Disassembly:
	0x036F1460 CBZ X8, 0x36F14EC
	0x036F1464 LDR W9, [X8 + 0x18]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: UnityEngine.Transform get_hint()

Disassembly:
	0x036F1468 CMP W23, W9
	0x036F146C B.CS 0x36F1500

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_hint(UnityEngine.Transform value)

Disassembly:
	0x036F1470 ADD X8, X8, X23, 0x3, LSL
	0x036F1474 LDR X20, [X8 + 0x20]

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Single get_targetPositionWeight()

Disassembly:
	0x036F1478 CBZ X20, 0x36F14EC
	0x036F147C LDR X8, [X20]

ISIL:
	001 Move V0, [X0+40]
	002 Return V0

Method: System.Void set_targetPositionWeight(System.Single value)

Disassembly:
	0x036F1480 LDR X1, [X22]
	0x036F1484 LDRH W9, [X8 + 0x12E]
	0x036F1488 CBZ X9, 0x36F14AC
	0x036F148C LDR X10, [X8 + 0xB0]
	0x036F1490 ADD X10, X10, 0x8
	0x036F1494 LDUR X11, [X10 - 0x8]
	0x036F1498 CMP X11, X1

ISIL:
	001 Move S1, 1
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction FMIN not yet implemented."
	004 Move S1, W31
	005 NotImplemented "Instruction FCSEL not yet implemented."
	006 Move [X0+40], S0
	007 Return 

Method: System.Single get_targetRotationWeight()

Disassembly:
	0x036F149C B.EQ 0x36F14BC
	0x036F14A0 SUBS X9, X9, 0x1

ISIL:
	001 Move V0, [X0+44]
	002 Return V0

Method: System.Void set_targetRotationWeight(System.Single value)

Disassembly:
	0x036F14A4 ADD X10, X10, 0x10
	0x036F14A8 B.NE 0x36F1494
	0x036F14AC MOVZ W2, 0x6
	0x036F14B0 MOV X0, X20
	0x036F14B4 BL 0x1C5C788
	0x036F14B8 B 0x36F14CC
	0x036F14BC LDR W9, [X10]

ISIL:
	001 Move S1, 1
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction FMIN not yet implemented."
	004 Move S1, W31
	005 NotImplemented "Instruction FCSEL not yet implemented."
	006 Move [X0+44], S0
	007 Return 

Method: System.Single get_hintWeight()

Disassembly:
	0x036F14C0 ADD W9, W9, 0x6
	0x036F14C4 ADD X8, X8, W9, 0x4, SXTW

ISIL:
	001 Move V0, [X0+48]
	002 Return V0

Method: System.Void set_hintWeight(System.Single value)

Disassembly:
	0x036F14C8 ADD X0, X8, 0x138
	0x036F14CC LDP X8, X1, [X0]
	0x036F14D0 MOV X0, X20
	0x036F14D4 BLR X8
	0x036F14D8 ADD W9, W23, 0x1
	0x036F14DC CMP W9, W21
	0x036F14E0 B.EQ 0x36F14F0

ISIL:
	001 Move S1, 1
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction FMIN not yet implemented."
	004 Move S1, W31
	005 NotImplemented "Instruction FCSEL not yet implemented."
	006 Move [X0+48], S0
	007 Return 

Method: System.Boolean get_maintainTargetPositionOffset()

Disassembly:
	0x036F14E4 LDR X8, [X19 + 0x28]
	0x036F14E8 CBNZ X8, 0x36F1360

ISIL:
	001 Move W0, [X0+52]
	002 Return X0

Method: System.Void set_maintainTargetPositionOffset(System.Boolean value)

Disassembly:
	0x036F14EC BL 0x1C16F20
	0x036F14F0 LDP X20, X19, [X31 + 0x20]
	0x036F14F4 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+52], W8
	003 Return 

Method: System.Boolean get_maintainTargetRotationOffset()

Disassembly:
	0x036F14F8 LDP X30, X23, [X31], #0x30
	0x036F14FC RET

ISIL:
	001 Move W0, [X0+53]
	002 Return X0

Method: System.Void set_maintainTargetRotationOffset(System.Boolean value)

Disassembly:
	0x036F1500 BL 0x1C16F28
	0x036F1504 SUB X31, X31, 0x20
	0x036F1508 STP X30, X19, [X31 + 0x10]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+53], W8
	003 Return 

Method: System.String UnityEngine.Animations.Rigging.ITwoBoneIKConstraintData.get_targetPositionWeightFloatProperty()

Disassembly:
	0x036F150C LDUR V0, [X0 + 0x48]
	0x036F1510 MOV X19, X0
	0x036F1514 ADD X0, X31, 0x0
	0x036F1518 MOV X1, X31
	0x036F151C STR V0, [X31]
	0x036F1520 BL 0x3C5DFF0
	0x036F1524 TBZ X0, 0x0, 0x36F1530
	0x036F1528 MOV X0, X19
	0x036F152C BL 0x36F12F4
	0x036F1530 LDP X30, X19, [X31 + 0x10]
	0x036F1534 ADD X31, X31, 0x20
	0x036F1538 RET
	0x036F153C STR X30, [X31 - 0x20]!
	0x036F1540 STP X20, X19, [X31 + 0x10]
	0x036F1544 ADRP X20, 0xCEF000
	0x036F1548 LDRB W8, [X20 + 0xB92]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xCF0000
	005 Move X20, 0xA50000
	006 Move W8, [X19+2939]
	007 Move X20, [X20+2408]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xA50000
	013 Move X0, [X0+2408]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2939], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Call ConstraintsUtils.ConstructConstraintDataPropertyName, X0
	022 Return X0

Method: System.String UnityEngine.Animations.Rigging.ITwoBoneIKConstraintData.get_targetRotationWeightFloatProperty()

Disassembly:
	0x036F154C MOV X19, X0
	0x036F1550 TBNZ X8, 0x0, 0x36F1568
	0x036F1554 ADRP X0, 0xA4F000
	0x036F1558 LDR X0, [X0 + 0x9E0]
	0x036F155C BL 0x1C16CF4
	0x036F1560 MOVZ W8, 0x1
	0x036F1564 STRB W8, [X20 + 0xB92]
	0x036F1568 LDR X20, [X19 + 0x30]
	0x036F156C CBNZ X20, 0x36F1590
	0x036F1570 ADRP X8, 0xA4F000
	0x036F1574 LDR X8, [X8 + 0x9E0]
	0x036F1578 LDR X0, [X8]
	0x036F157C BL 0x1C16F10
	0x036F1580 MOV X1, X31
	0x036F1584 MOV X20, X0
	0x036F1588 BL 0x33BDD8C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xCF0000
	005 Move X20, 0xA50000
	006 Move W8, [X19+2940]
	007 Move X20, [X20+2416]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xA50000
	013 Move X0, [X0+2416]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2940], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Call ConstraintsUtils.ConstructConstraintDataPropertyName, X0
	022 Return X0

Method: System.String UnityEngine.Animations.Rigging.ITwoBoneIKConstraintData.get_hintWeightFloatProperty()

Disassembly:
	0x036F158C STR X20, [X19 + 0x30]
	0x036F1590 MOV X0, X20
	0x036F1594 LDP X20, X19, [X31 + 0x10]
	0x036F1598 LDR X30, [X31], #0x20
	0x036F159C RET
	0x036F15A0 STP X29, X30, [X31 - 0x60]!
	0x036F15A4 STP X28, X27, [X31 + 0x10]
	0x036F15A8 STP X26, X25, [X31 + 0x20]
	0x036F15AC STP X24, X23, [X31 + 0x30]
	0x036F15B0 STP X22, X21, [X31 + 0x40]
	0x036F15B4 STP X20, X19, [X31 + 0x50]
	0x036F15B8 ADRP X21, 0xCEF000
	0x036F15BC LDRB W8, [X21 + 0xBB0]
	0x036F15C0 MOV X20, X1
	0x036F15C4 MOV X19, X0
	0x036F15C8 TBNZ X8, 0x0, 0x36F1634

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xCF0000
	005 Move X20, 0xA50000
	006 Move W8, [X19+2941]
	007 Move X20, [X20+2424]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xA50000
	013 Move X0, [X0+2424]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2941], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Call ConstraintsUtils.ConstructConstraintDataPropertyName, X0
	022 Return X0

Method: System.Boolean UnityEngine.Animations.Rigging.IAnimationJobData.IsValid()

Disassembly:
	0x036F15CC ADRP X0, 0xA2B000
	0x036F15D0 LDR X0, [X0 + 0xE28]
	0x036F15D4 BL 0x1C16CF4
	0x036F15D8 ADRP X0, 0xA4F000
	0x036F15DC LDR X0, [X0 + 0x9E8]
	0x036F15E0 BL 0x1C16CF4
	0x036F15E4 ADRP X0, 0xA4F000
	0x036F15E8 LDR X0, [X0 + 0x9F0]
	0x036F15EC BL 0x1C16CF4
	0x036F15F0 ADRP X0, 0xA4F000
	0x036F15F4 LDR X0, [X0 + 0x9D8]
	0x036F15F8 BL 0x1C16CF4
	0x036F15FC ADRP X0, 0xA4F000
	0x036F1600 LDR X0, [X0 + 0x9F8]
	0x036F1604 BL 0x1C16CF4
	0x036F1608 ADRP X0, 0xA03000
	0x036F160C LDR X0, [X0 + 0xE28]
	0x036F1610 BL 0x1C16CF4
	0x036F1614 ADRP X0, 0xA2C000
	0x036F1618 LDR X0, [X0 + 0xF38]
	0x036F161C BL 0x1C16CF4
	0x036F1620 ADRP X0, 0xA4F000
	0x036F1624 LDR X0, [X0 + 0xA00]
	0x036F1628 BL 0x1C16CF4
	0x036F162C MOVZ W8, 0x1
	0x036F1630 STRB W8, [X21 + 0xBB0]
	0x036F1634 LDRB W8, [X19 + 0x10]
	0x036F1638 CBZ W8, 0x36F16DC
	0x036F163C LDR X21, [X19 + 0x20]
	0x036F1640 CBZ X21, 0x36F1978
	0x036F1644 ADRP X10, 0xA4F000
	0x036F1648 LDR X8, [X21]
	0x036F164C LDR X10, [X10 + 0x9E8]
	0x036F1650 LDRH W9, [X8 + 0x12E]
	0x036F1654 LDR X1, [X10]
	0x036F1658 CBZ X9, 0x36F167C
	0x036F165C LDR X10, [X8 + 0xB0]
	0x036F1660 ADD X10, X10, 0x8
	0x036F1664 LDUR X11, [X10 - 0x8]
	0x036F1668 CMP X11, X1
	0x036F166C B.EQ 0x36F168C
	0x036F1670 SUBS X9, X9, 0x1
	0x036F1674 ADD X10, X10, 0x10
	0x036F1678 B.NE 0x36F1664
	0x036F167C MOV X0, X21
	0x036F1680 MOV W2, W31
	0x036F1684 BL 0x1C5C788
	0x036F1688 B 0x36F1698
	0x036F168C LDRSW X9, [X10]
	0x036F1690 ADD X8, X8, X9, 0x4, LSL
	0x036F1694 ADD X0, X8, 0x138
	0x036F1698 LDP X8, X1, [X0]
	0x036F169C MOV X0, X21
	0x036F16A0 BLR X8
	0x036F16A4 TBZ X0, 0x0, 0x36F16DC
	0x036F16A8 ADRP X25, 0xA4F000
	0x036F16AC LDR X22, [X19 + 0x20]
	0x036F16B0 LDR X25, [X25 + 0x9F8]
	0x036F16B4 CBZ X22, 0x36F16F8
	0x036F16B8 LDR X23, [X25]
	0x036F16BC MOV X0, X22
	0x036F16C0 MOV X1, X23
	0x036F16C4 BL 0x1C16E00
	0x036F16C8 MOV X21, X0
	0x036F16CC CBNZ X0, 0x36F16FC
	0x036F16D0 MOV X0, X22
	0x036F16D4 MOV X1, X23
	0x036F16D8 BL 0x1C171E0
	0x036F16DC LDP X20, X19, [X31 + 0x50]
	0x036F16E0 LDP X22, X21, [X31 + 0x40]
	0x036F16E4 LDP X24, X23, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xCF0000
	006 Move X21, 0xA03000
	007 Move W8, [X20+2942]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xA03000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2942], W8
	019 Move X0, [X21]
	020 Move X20, [X19+16]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {96}
	033 Move X0, [X21]
	034 Move X20, [X19+8]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Inequality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {96}
	047 Move X0, [X21]
	048 Move X20, [X19]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X20
	054 Move X1, X31
	055 Move X2, X31
	056 Call Object.op_Inequality, X0, X1
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {96}
	061 Move X0, [X21]
	062 Move X20, [X19+24]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, X20
	068 Move X1, X31
	069 Move X2, X31
	070 Call Object.op_Inequality, X0, X1
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {96}
	075 Move X0, [X19+16]
	076 Compare X0, 0
	077 JumpIfEqual {102}
	078 Move X1, [X19+8]
	079 Move X2, X31
	080 Call Transform.IsChildOf, X0, X1
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {96}
	085 Move X0, [X19+8]
	086 Compare X0, 0
	087 JumpIfEqual {102}
	088 Move X1, [X19]
	089 Move X20, [X31+16]
	090 Move X19, [X31+24]
	091 Move X2, X31
	092 Move X30, [X31+32]
	093 Move X21, [X31+40]
	094 Call Transform.IsChildOf, X0, X1
	095 Return X0
	096 Move X20, [X31+16]
	097 Move X19, [X31+24]
	098 Move W0, W31
	099 Move X30, [X31+32]
	100 Move X21, [X31+40]
	101 Return X0
	102 Call 0x1C17F20

Method: System.Void UnityEngine.Animations.Rigging.IAnimationJobData.SetDefaultValues()

Disassembly:
	0x036F16E8 LDP X26, X25, [X31 + 0x20]
	0x036F16EC LDP X28, X27, [X31 + 0x10]
	0x036F16F0 LDP X29, X30, [X31], #0x60
	0x036F16F4 RET
	0x036F16F8 MOV X21, X31
	0x036F16FC LDR X8, [X19 + 0x28]
	0x036F1700 CBZ X8, 0x36F1978
	0x036F1704 LDR W26, [X8 + 0x18]
	0x036F1708 CMP W26, 0x1

ISIL:
	001 NotImplemented "Instruction MOVI not yet implemented."
	002 Move V1, 0
	003 Move W8, 0x3F800000
	004 Move [X0+32], X31
	005 Move [X0], V0
	006 Move [X0+8], V0
	007 Move [X0+40], D1
	008 Move [X0+48], W8
	009 NotImplemented "Instruction STRH not yet implemented."
	010 Return 

