Type: UnityEngine.Animations.Rigging.AffineTransform

Method: System.Void .ctor(UnityEngine.Vector3 t, UnityEngine.Quaternion r)

Disassembly:
	0x036E5E50 MOV X20, X0
	0x036E5E54 TBNZ X8, 0x0, 0x36E5E84
	0x036E5E58 ADRP X0, 0xA38000
	0x036E5E5C LDR X0, [X0 + 0x178]
	0x036E5E60 BL 0x1C16CF4

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], S2
	004 Move [X0+16], S3
	005 Move [X0+16], S4
	006 Move [X0+24], S5
	007 Move [X0+24], S6
	008 Return 

Method: System.Void Set(UnityEngine.Vector3 t, UnityEngine.Quaternion r)

Disassembly:
	0x036E5FC4 CSEL X8, X8, X31, NE
	0x036E5FC8 ANDS W31, W22, 0x1
	0x036E5FCC MOVZ W9, 0x100
	0x036E5FD0 CSEL X9, X9, X31, NE
	0x036E5FD4 BFM X9, X21, 0x0, 0x0

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], S2
	004 Move [X0+16], S3
	005 Move [X0+16], S4
	006 Move [X0+24], S5
	007 Move [X0+24], S6
	008 Return 

Method: UnityEngine.Vector3 Transform(UnityEngine.Vector3 p)

Disassembly:
	0x036FA09C STR X30, [X31 - 0x30]!
	0x036FA0A0 STP X22, X21, [X31 + 0x10]
	0x036FA0A4 STP X20, X19, [X31 + 0x20]
	0x036FA0A8 ADRP X22, 0xCE6000
	0x036FA0AC ADRP X21, 0x9FD000
	0x036FA0B0 LDRB W8, [X22 + 0xBE4]
	0x036FA0B4 LDR X21, [X21 + 0xFD8]
	0x036FA0B8 MOV W20, W1
	0x036FA0BC MOV X19, X0
	0x036FA0C0 TBNZ X8, 0x0, 0x36FA0D8
	0x036FA0C4 ADRP X0, 0x9FD000
	0x036FA0C8 LDR X0, [X0 + 0xFD8]
	0x036FA0CC BL 0x1C16CF4
	0x036FA0D0 MOVZ W8, 0x1
	0x036FA0D4 STRB W8, [X22 + 0xBE4]
	0x036FA0D8 LDR X2, [X21]
	0x036FA0DC AND W1, W20, 0x1
	0x036FA0E0 ADD X0, X31, 0xC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V5, V1
	004 Move S4, [X0+12]
	005 Move S1, [X0+16]
	006 Move V6, V2
	007 Move S2, [X0+20]
	008 Move S3, [X0+24]
	009 Move V7, V0
	010 Move X19, X0
	011 Move V0, V4
	012 Move V4, V7
	013 Move X0, X31
	014 Call Quaternion.op_Multiply, X0, X1
	015 Move S3, [X19]
	016 Move S4, [X19+4]
	017 Move V5, [X19+8]
	018 Add S0, S0, S3
	019 Add S1, S1, S4
	020 Add S2, S2, S5
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return X0

Method: UnityEngine.Vector3 InverseTransform(UnityEngine.Vector3 p)

Disassembly:
	0x036E9C08 ADD X0, X19, 0xF8
	0x036E9C0C MOV W2, W31
	0x036E9C10 LDR X3, [X8]
	0x036E9C14 BL 0x22C4E4C
	0x036E9C18 MOV X0, X31
	0x036E9C1C MOV V8.16B, V0.16B
	0x036E9C20 MOV V9.16B, V1.16B
	0x036E9C24 MOV V10.16B, V2.16B
	0x036E9C28 MOV V12.16B, V3.16B
	0x036E9C2C BL 0x3C2A260
	0x036E9C30 MOV V15.16B, V2.16B
	0x036E9C34 LDR V2, [X31 + 0x18]
	0x036E9C38 STR S0, [X31 + 0x14]
	0x036E9C3C MOV V14.16B, V1.16B
	0x036E9C40 LDR V0, [X19 + 0x3]
	0x036E9C44 LDUR V1, [X19 + 0x24]
	0x036E9C48 STR D2, [X31 + 0x240]
	0x036E9C4C LDR V2, [X31 + 0x24]
	0x036E9C50 ADD X8, X31, 0x220
	0x036E9C54 STR V1, [X31 + 0x26]
	0x036E9C58 STUR V0, [X22 + 0x2C]
	0x036E9C5C STR S2, [X31 + 0x248]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move V9, V1
	007 Move S4, [X0+12]
	008 Move S1, [X0+16]
	009 Move V8, V2
	010 Move S2, [X0+20]
	011 Move S3, [X0+24]
	012 Move X19, X0
	013 Move V10, V0
	014 Move V0, V4
	015 Move X0, X31
	016 Call Quaternion.Inverse, X0
	017 Move S4, [X19]
	018 Move S5, [X19+4]
	019 Move V6, [X19+8]
	020 Move X30, [X31+32]
	021 Move X19, [X31+40]
	022 Move X0, X31
	023 Subtract S5, S9, S5
	024 Subtract S6, S8, S6
	025 Move D9, [X31+16]
	026 Move D8, [X31+24]
	027 Subtract S4, S10, S4
	028 Move V10, [X31+48]
	029 Call Quaternion.op_Multiply, X0, X1
	030 Return X0

Method: UnityEngine.Animations.Rigging.AffineTransform Inverse()

Disassembly:
	0x036EA2AC MOV V9.16B, V2.16B
	0x036EA2B0 MOV V10.16B, V1.16B
	0x036EA2B4 MOV V11.16B, V0.16B
	0x036EA2B8 MOV X19, X8
	0x036EA2BC BL 0x3C2A9FC
	0x036EA2C0 LDP S3, S4, [X20 + 0xC]
	0x036EA2C4 LDP S5, S6, [X20 + 0x14]
	0x036EA2C8 STP S0, S1, [X19]
	0x036EA2CC LDR X30, [X31 + 0x20]
	0x036EA2D0 FMUL S0, S8, S3
	0x036EA2D4 FMUL S1, S11, S6
	0x036EA2D8 FMUL S17, S8, S4
	0x036EA2DC FMUL S18, S10, S6
	0x036EA2E0 FMUL S22, S11, S3
	0x036EA2E4 FMUL S23, S8, S5
	0x036EA2E8 FMUL S24, S8, S6
	0x036EA2EC FMUL S6, S9, S6
	0x036EA2F0 FMUL S7, S10, S5
	0x036EA2F4 FMUL S16, S9, S4
	0x036EA2F8 FMUL S19, S9, S3
	0x036EA2FC FMUL S21, S11, S4
	0x036EA300 FMUL S4, S10, S4
	0x036EA304 FADD S0, S0, S1
	0x036EA308 FADD S1, S17, S18
	0x036EA30C FADD S6, S23, S6
	0x036EA310 FSUB S17, S24, S22
	0x036EA314 FMUL S20, S11, S5
	0x036EA318 FMUL S3, S10, S3
	0x036EA31C FMUL S5, S9, S5
	0x036EA320 FADD S0, S7, S0
	0x036EA324 FADD S1, S19, S1
	0x036EA328 FADD S6, S21, S6
	0x036EA32C FSUB S4, S17, S4

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move S0, [X0+12]
	009 Move S1, [X0+16]
	010 Move S2, [X0+20]
	011 Move S3, [X0+24]
	012 Move X19, X0
	013 Move X0, X31
	014 Move X20, X8
	015 Call Quaternion.Inverse, X0
	016 Move V8, V0
	017 Move V9, V1
	018 Move V10, V2
	019 Move S0, [X19]
	020 Move S1, [X19+4]
	021 Move V2, [X19+8]
	022 Move X0, X31
	023 Move V11, V3
	024 NotImplemented "Instruction FNEG not yet implemented."
	025 NotImplemented "Instruction FNEG not yet implemented."
	026 NotImplemented "Instruction FNEG not yet implemented."
	027 Move V0, V8
	028 Move V1, V9
	029 Move V2, V10
	030 Call Quaternion.op_Multiply, X0, X1
	031 Move [X20], S0
	032 Move [X20+8], S1
	033 Move [X20+8], S2
	034 Move [X20+16], S8
	035 Move [X20+16], S9
	036 Move [X20+24], S10
	037 Move [X20+24], S11
	038 Move X20, [X31+48]
	039 Move X19, [X31+56]
	040 Move X30, [X31+32]
	041 Move D9, [X31+16]
	042 Move D8, [X31+24]
	043 Move D11, [X31+64]
	044 Move D10, [X31+72]
	045 Return X0

Method: UnityEngine.Animations.Rigging.AffineTransform InverseMul(UnityEngine.Animations.Rigging.AffineTransform transform)

Disassembly:
	0x036E94C4 ADRP X21, 0xA36000
	0x036E94C8 LDR X21, [X21 + 0x230]
	0x036E94CC FMOV S1, 1
	0x036E94D0 FDIV S2, S1, S0
	0x036E94D4 FCMP S0, S1
	0x036E94D8 LDR X0, [X21]
	0x036E94DC FCSEL S14, S2, S1, GT
	0x036E94E0 LDR W8, [X0 + 0xE0]
	0x036E94E4 CBNZ W8, 0x36E94F0
	0x036E94E8 BL 0x1C16DFC
	0x036E94EC LDR X0, [X21]
	0x036E94F0 LDR X9, [X0 + 0xB8]
	0x036E94F4 LDR W8, [X19 + 0x60]
	0x036E94F8 LDP S13, S12, [X9]
	0x036E94FC LDP S11, S10, [X9 + 0x8]
	0x036E9500 CMP W8, 0x1
	0x036E9504 B.LT 0x36E968C
	0x036E9508 MOV X22, X31
	0x036E950C MOV X23, X31
	0x036E9510 MOV X24, X31
	0x036E9514 FMOV S8, W31
	0x036E9518 STP S14, S9, [X31 + 0x10]
	0x036E951C LDR X9, [X19 + 0x88]
	0x036E9520 LDR V0, [X9, X24, LSL #2]
	0x036E9524 FMUL S0, S14, S0
	0x036E9528 FCMP S0, S9
	0x036E952C B.MI 0x36E9670
	0x036E9530 LDR X8, [X19 + 0x58]
	0x036E9534 STP S0, S13, [X31 + 0x18]
	0x036E9538 ADD X0, X31, 0x230
	0x036E953C ADD X1, X31, 0x170
	0x036E9540 ADD X8, X8, X22
	0x036E9544 LDR X9, [X8 + 0x10]
	0x036E9548 LDR V0, [X8]
	0x036E954C STP S12, S11, [X31 + 0x20]
	0x036E9550 STP S10, S8, [X31 + 0x28]
	0x036E9554 STR X9, [X31 + 0x240]
	0x036E9558 STR V0, [X31 + 0x23]
	0x036E955C LDR X8, [X20 + 0x30]
	0x036E9560 LDP V1, V0, [X20 + 0x10]
	0x036E9564 LDR V2, [X20]
	0x036E9568 STR X8, [X31 + 0x1A0]
	0x036E956C STP V1, V0, [X31 + 0x180]
	0x036E9570 STR V2, [X31 + 0x17]
	0x036E9574 BL 0x36E34C4
	0x036E9578 LDR X8, [X19 + 0x78]
	0x036E957C LDR X0, [X21]
	0x036E9580 MOV V15.16B, V0.16B
	0x036E9584 MOV V14.16B, V1.16B
	0x036E9588 ADD X8, X8, X23
	0x036E958C LDR W9, [X0 + 0xE0]
	0x036E9590 LDP S10, S9, [X8]
	0x036E9594 LDP S11, S12, [X8 + 0x8]
	0x036E9598 MOV V13.16B, V2.16B
	0x036E959C MOV V8.16B, V3.16B
	0x036E95A0 CBNZ W9, 0x36E95A8
	0x036E95A4 BL 0x1C16DFC
	0x036E95A8 FMUL S0, S8, S10
	0x036E95AC FMUL S1, S15, S12
	0x036E95B0 FMUL S3, S13, S9
	0x036E95B4 FMUL S4, S8, S9
	0x036E95B8 FMUL S5, S14, S12
	0x036E95BC FMUL S16, S15, S9
	0x036E95C0 FMUL S17, S15, S10
	0x036E95C4 FMUL S19, S14, S9
	0x036E95C8 FMUL S20, S8, S11
	0x036E95CC FMUL S21, S8, S12

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move S0, [X0+12]
	010 Move S1, [X0+16]
	011 Move S2, [X0+20]
	012 Move S3, [X0+24]
	013 Move X21, X0
	014 Move X0, X31
	015 Move X20, X1
	016 Move X19, X8
	017 Call Quaternion.Inverse, X0
	018 Move V9, V0
	019 Move V8, V2
	020 Move V0, [X20]
	021 Move V2, [X21]
	022 Move V10, V1
	023 Move V11, V3
	024 Move V1, [X20+8]
	025 Move V3, [X21+8]
	026 Subtract V4, V0, V2
	027 Move S5, V4.S[1]
	028 Move V0, V9
	029 Subtract S6, S1, S3
	030 Move V1, V10
	031 Move V2, V8
	032 Move V3, V11
	033 Move X0, X31
	034 Call Quaternion.op_Multiply, X0, X1
	035 Move S3, [X20+12]
	036 Move S4, [X20+16]
	037 Move S5, [X20+20]
	038 Move S6, [X20+24]
	039 Move [X19], S0
	040 Move [X19+8], S1
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Multiply S0, S11, S3
	044 Multiply S1, S9, S6
	045 Multiply S17, S11, S4
	046 Multiply S18, S10, S6
	047 Multiply S22, S9, S3
	048 Multiply S23, S11, S5
	049 Multiply S24, S11, S6
	050 Multiply S6, S8, S6
	051 Multiply S7, S10, S5
	052 Multiply S16, S8, S4
	053 Multiply S19, S8, S3
	054 Multiply S21, S9, S4
	055 Multiply S4, S10, S4
	056 Add S0, S0, S1
	057 Add S1, S17, S18
	058 Add S6, S23, S6
	059 Subtract S17, S24, S22
	060 Multiply S20, S9, S5
	061 Multiply S3, S10, S3
	062 Multiply S5, S8, S5
	063 Add S0, S7, S0
	064 Add S1, S19, S1
	065 Add S6, S21, S6
	066 Subtract S4, S17, S4
	067 Subtract S0, S0, S16
	068 Subtract S1, S1, S20
	069 Subtract S3, S6, S3
	070 Subtract S4, S4, S5
	071 Move [X19+8], S2
	072 Move [X19+16], S0
	073 Move [X19+16], S1
	074 Move [X19+24], S3
	075 Move [X19+24], S4
	076 Move X20, [X31+48]
	077 Move X19, [X31+56]
	078 Move D9, [X31+16]
	079 Move D8, [X31+24]
	080 Move D11, [X31+64]
	081 Move D10, [X31+72]
	082 Return X0

Method: UnityEngine.Vector3 op_Multiply(UnityEngine.Animations.Rigging.AffineTransform lhs, UnityEngine.Vector3 rhs)

Disassembly:
	0x036E9C60 LDR V2, [X31 + 0x28]
	0x036E9C64 LDR V0, [X31 + 0x30]
	0x036E9C68 ADD X0, X31, 0x260
	0x036E9C6C ADD X1, X31, 0x240
	0x036E9C70 MOV V13.16B, V3.16B
	0x036E9C74 STUR D2, [X22 + 0xC]
	0x036E9C78 STUR D0, [X22 + 0x14]
	0x036E9C7C BL 0x36E4E64
	0x036E9C80 LDR V0, [X31 + 0x14]
	0x036E9C84 ADD X8, X31, 0x200
	0x036E9C88 ADD X0, X31, 0x220
	0x036E9C8C MOV V1.16B, V14.16B
	0x036E9C90 MOV V2.16B, V15.16B
	0x036E9C94 MOV V3.16B, V13.16B
	0x036E9C98 BL 0x36EA288
	0x036E9C9C ADD X8, X31, 0x3C0
	0x036E9CA0 ADD X0, X31, 0x200
	0x036E9CA4 MOV V0.16B, V8.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move V5, V1
	004 Move S4, [X0+12]
	005 Move S1, [X0+16]
	006 Move V6, V2
	007 Move S2, [X0+20]
	008 Move S3, [X0+24]
	009 Move V7, V0
	010 Move X19, X0
	011 Move V0, V4
	012 Move V4, V7
	013 Move X0, X31
	014 Call Quaternion.op_Multiply, X0, X1
	015 Move S3, [X19]
	016 Move S4, [X19+4]
	017 Move V5, [X19+8]
	018 Add S0, S0, S3
	019 Add S1, S1, S4
	020 Add S2, S2, S5
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return X0

Method: UnityEngine.Animations.Rigging.AffineTransform op_Multiply(UnityEngine.Animations.Rigging.AffineTransform lhs, UnityEngine.Animations.Rigging.AffineTransform rhs)

Disassembly:
	0x036E5E64 ADRP X0, 0xA38000
	0x036E5E68 LDR X0, [X0 + 0x180]
	0x036E5E6C BL 0x1C16CF4
	0x036E5E70 ADRP X0, 0xA38000
	0x036E5E74 LDR X0, [X0 + 0x188]
	0x036E5E78 BL 0x1C16CF4
	0x036E5E7C MOVZ W8, 0x1
	0x036E5E80 STRB W8, [X22 + 0xB25]
	0x036E5E84 LDR X1, [X24]
	0x036E5E88 MOV X0, X21
	0x036E5E8C MOV X2, X31
	0x036E5E90 BL 0x321B938
	0x036E5E94 MOV X1, X0
	0x036E5E98 MOVZ W2, 0x6
	0x036E5E9C MOV X0, X20
	0x036E5EA0 MOV X3, X31
	0x036E5EA4 BL 0x3BFB0BC
	0x036E5EA8 LDR X8, [X23]
	0x036E5EAC MOV X22, X0
	0x036E5EB0 MOV X23, X1
	0x036E5EB4 MOV X0, X21
	0x036E5EB8 MOV X1, X8
	0x036E5EBC MOV X2, X31
	0x036E5EC0 BL 0x321B938
	0x036E5EC4 MOV X1, X0
	0x036E5EC8 MOVZ W2, 0x6
	0x036E5ECC MOV X0, X20
	0x036E5ED0 MOV X3, X31
	0x036E5ED4 BL 0x3BFB0BC
	0x036E5ED8 LDR X8, [X25]
	0x036E5EDC MOV X24, X0
	0x036E5EE0 MOV X25, X1
	0x036E5EE4 MOV X0, X21
	0x036E5EE8 MOV X1, X8
	0x036E5EEC MOV X2, X31
	0x036E5EF0 BL 0x321B938
	0x036E5EF4 MOV X1, X0
	0x036E5EF8 MOVZ W2, 0x6
	0x036E5EFC MOV X0, X20
	0x036E5F00 MOV X3, X31
	0x036E5F04 BL 0x3BFB0BC
	0x036E5F08 STP X22, X23, [X19]
	0x036E5F0C STP X24, X25, [X19 + 0x10]
	0x036E5F10 STP X0, X1, [X19 + 0x20]
	0x036E5F14 LDP X20, X19, [X31 + 0x30]
	0x036E5F18 LDP X22, X21, [X31 + 0x20]
	0x036E5F1C LDP X24, X23, [X31 + 0x10]
	0x036E5F20 LDP X30, X25, [X31], #0x40
	0x036E5F24 RET
	0x036E5F28 SUB X31, X31, 0xF0
	0x036E5F2C STR X30, [X31 + 0xC0]
	0x036E5F30 STP X22, X21, [X31 + 0xD0]
	0x036E5F34 STP X20, X19, [X31 + 0xE0]
	0x036E5F38 LDR X8, [X1 + 0x30]
	0x036E5F3C LDP V1, V0, [X1 + 0x10]
	0x036E5F40 LDR V2, [X1]
	0x036E5F44 MOV X19, X1
	0x036E5F48 ADD X1, X31, 0x80
	0x036E5F4C MOV X2, X31
	0x036E5F50 MOV X20, X0
	0x036E5F54 STR X8, [X31 + 0xB0]
	0x036E5F58 STP V1, V0, [X31 + 0x90]
	0x036E5F5C STR V2, [X31 + 0x8]
	0x036E5F60 BL 0x3BF9B18
	0x036E5F64 LDP V1, V0, [X19 + 0x10]
	0x036E5F68 LDR X8, [X19 + 0x30]
	0x036E5F6C LDR V2, [X19]
	0x036E5F70 MOV W21, W0
	0x036E5F74 ADD X0, X20, 0x10
	0x036E5F78 ADD X1, X31, 0x40
	0x036E5F7C MOV X2, X31

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X23, 0xCFC000
	011 Move X22, 0xA38000
	012 Move X19, X8
	013 Move W8, [X23+3030]
	014 Move X22, [X22+3648]
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xA38000
	022 Move X0, [X0+3648]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+3030], W8
	026 Move X0, [X22]
	027 Move S10, [X20]
	028 Move S8, [X20+4]
	029 Move V9, [X20+8]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X21
	035 Move V0, V10
	036 Move V1, V8
	037 Move V2, V9
	038 Call AffineTransform.Transform, X0, X1
	039 Move S3, [X21+12]
	040 Move S4, [X21+16]
	041 Move S5, [X21+20]
	042 Move S6, [X21+24]
	043 Move S7, [X20+12]
	044 Move S16, [X20+16]
	045 Move S17, [X20+20]
	046 Move S18, [X20+24]
	047 Move [X19], S0
	048 Move [X19+8], S1
	049 Move X22, [X31+48]
	050 Move X21, [X31+56]
	051 Multiply S0, S6, S7
	052 Multiply S1, S3, S18
	053 Multiply S19, S4, S17
	054 Multiply S20, S5, S16
	055 Multiply S21, S6, S16
	056 Multiply S22, S4, S18
	057 Multiply S23, S5, S7
	058 Multiply S24, S3, S17
	059 Multiply S25, S3, S16
	060 Multiply S3, S3, S7
	061 Multiply S7, S4, S7
	062 Multiply S4, S4, S16
	063 Multiply S16, S6, S17
	064 Multiply S6, S6, S18
	065 Multiply S18, S5, S18
	066 Add S0, S0, S1
	067 Add S1, S21, S22
	068 Add S16, S16, S18
	069 Subtract S3, S6, S3
	070 Multiply S5, S5, S17
	071 Add S0, S19, S0
	072 Add S1, S23, S1
	073 Add S6, S25, S16
	074 Subtract S3, S3, S4
	075 Subtract S0, S0, S20
	076 Subtract S1, S1, S24
	077 Subtract S4, S6, S7
	078 Subtract S3, S3, S5
	079 Move [X19+8], S2
	080 Move [X19+16], S0
	081 Move [X19+16], S1
	082 Move [X19+24], S4
	083 Move [X19+24], S3
	084 Move X20, [X31+64]
	085 Move X19, [X31+72]
	086 Move X30, [X31+32]
	087 Move X23, [X31+40]
	088 Move D9, [X31+16]
	089 Move D8, [X31+24]
	090 Move V10, [X31+80]
	091 Return X0

Method: UnityEngine.Animations.Rigging.AffineTransform op_Multiply(UnityEngine.Quaternion lhs, UnityEngine.Animations.Rigging.AffineTransform rhs)

Disassembly:
	0x036EB288 BL 0x330E100
	0x036EB28C ADRP X0, 0xA55000
	0x036EB290 LDR X0, [X0 + 0x7A8]
	0x036EB294 BL 0x1C16D08
	0x036EB298 MOV X1, X0
	0x036EB29C MOV X0, X19
	0x036EB2A0 BL 0x1C16DEC
	0x036EB2A4 LDP X8, X1, [X0 + 0x58]
	0x036EB2A8 MOV X0, X8
	0x036EB2AC RET
	0x036EB2B0 STP X1, X2, [X0 + 0x58]
	0x036EB2B4 RET
	0x036EB2B8 RET
	0x036EB2BC STP D15, D14, [X31 - 0x80]!
	0x036EB2C0 STP D13, D12, [X31 + 0x10]
	0x036EB2C4 STP D11, D10, [X31 + 0x20]
	0x036EB2C8 STP D9, D8, [X31 + 0x30]
	0x036EB2CC STR X29, [X31 + 0x40]
	0x036EB2D0 STP X30, X23, [X31 + 0x50]
	0x036EB2D4 STP X22, X21, [X31 + 0x60]
	0x036EB2D8 STP X20, X19, [X31 + 0x70]
	0x036EB2DC SUB X31, X31, 0x1A0
	0x036EB2E0 MOV X19, X1
	0x036EB2E4 MOV X1, X31
	0x036EB2E8 MOV X20, X0
	0x036EB2EC STR W31, [X31 + 0x148]
	0x036EB2F0 STR X31, [X31 + 0x140]
	0x036EB2F4 STR W31, [X31 + 0x138]
	0x036EB2F8 STR X31, [X31 + 0x130]
	0x036EB2FC BL 0x36F9F10
	0x036EB300 STP X0, X1, [X31 + 0x150]
	0x036EB304 LDR X8, [X19 + 0x30]
	0x036EB308 LDP V1, V0, [X19 + 0x10]
	0x036EB30C LDR V2, [X19]
	0x036EB310 ADD X0, X31, 0x150
	0x036EB314 ADD X1, X31, 0x160
	0x036EB318 MOV X2, X31
	0x036EB31C STR X8, [X31 + 0x190]
	0x036EB320 STP V1, V0, [X31 + 0x170]
	0x036EB324 STR V2, [X31 + 0x16]
	0x036EB328 BL 0x3BF9750
	0x036EB32C FCMP S0, 0x0
	0x036EB330 B.LE 0x36EB6C8
	0x036EB334 MOV V9.16B, V0.16B
	0x036EB338 LDR X8, [X19 + 0x30]
	0x036EB33C LDP V1, V0, [X19 + 0x10]
	0x036EB340 LDR V2, [X19]
	0x036EB344 ADD X1, X31, 0x160
	0x036EB348 MOV X0, X20
	0x036EB34C MOV X2, X31
	0x036EB350 STR X8, [X31 + 0x190]
	0x036EB354 STP V1, V0, [X31 + 0x170]
	0x036EB358 STR V2, [X31 + 0x16]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move S4, [X0]
	009 Move S5, [X0+4]
	010 Move V6, [X0+8]
	011 Move X20, X0
	012 Move X0, X31
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X8
	018 Call Quaternion.op_Multiply, X0, X1
	019 Move S3, [X20+12]
	020 Move S4, [X20+16]
	021 Move S5, [X20+20]
	022 Move S6, [X20+24]
	023 Move [X19], S0
	024 Move [X19+8], S1
	025 Move X30, [X31+32]
	026 Multiply S0, S8, S3
	027 Multiply S1, S11, S6
	028 Multiply S17, S8, S4
	029 Multiply S18, S10, S6
	030 Multiply S22, S11, S3
	031 Multiply S23, S8, S5
	032 Multiply S24, S8, S6
	033 Multiply S6, S9, S6
	034 Multiply S7, S10, S5
	035 Multiply S16, S9, S4
	036 Multiply S19, S9, S3
	037 Multiply S21, S11, S4
	038 Multiply S4, S10, S4
	039 Add S0, S0, S1
	040 Add S1, S17, S18
	041 Add S6, S23, S6
	042 Subtract S17, S24, S22
	043 Multiply S20, S11, S5
	044 Multiply S3, S10, S3
	045 Multiply S5, S9, S5
	046 Add S0, S7, S0
	047 Add S1, S19, S1
	048 Add S6, S21, S6
	049 Subtract S4, S17, S4
	050 Subtract S0, S0, S16
	051 Subtract S1, S1, S20
	052 Subtract S3, S6, S3
	053 Subtract S4, S4, S5
	054 Move [X19+8], S2
	055 Move [X19+16], S0
	056 Move [X19+16], S1
	057 Move [X19+24], S3
	058 Move [X19+24], S4
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move D9, [X31+16]
	062 Move D8, [X31+24]
	063 Move D11, [X31+64]
	064 Move D10, [X31+72]
	065 Return X0

Method: UnityEngine.Animations.Rigging.AffineTransform op_Multiply(UnityEngine.Animations.Rigging.AffineTransform lhs, UnityEngine.Quaternion rhs)

Disassembly:
	0x036EB35C BL 0x3BF871C
	0x036EB360 MOV V10.16B, V0.16B
	0x036EB364 MOV V15.16B, V1.16B
	0x036EB368 STR S2, [X31 + 0x1E8]
	0x036EB36C LDP V2, V0, [X19 + 0x10]
	0x036EB370 LDR X8, [X19 + 0x30]
	0x036EB374 LDR V1, [X19]
	0x036EB378 ADD X0, X20, 0xC
	0x036EB37C ADD X1, X31, 0x160
	0x036EB380 MOV X2, X31
	0x036EB384 MOV V8.16B, V3.16B
	0x036EB388 STR X8, [X31 + 0x190]
	0x036EB38C STP V2, V0, [X31 + 0x170]
	0x036EB390 STR V1, [X31 + 0x16]
	0x036EB394 BL 0x3BF871C
	0x036EB398 LDR X8, [X20 + 0x18]
	0x036EB39C MOV V14.16B, V0.16B
	0x036EB3A0 MOV V11.16B, V1.16B
	0x036EB3A4 MOV V12.16B, V2.16B
	0x036EB3A8 LDR W9, [X8 + 0x8]
	0x036EB3AC LDR X10, [X8]
	0x036EB3B0 ADD X0, X31, 0x130
	0x036EB3B4 ADD X1, X31, 0x160
	0x036EB3B8 STR W9, [X31 + 0x148]
	0x036EB3BC STR X10, [X31 + 0x140]
	0x036EB3C0 LDR X9, [X19 + 0x30]
	0x036EB3C4 LDP V1, V0, [X19 + 0x10]
	0x036EB3C8 LDR V2, [X19]
	0x036EB3CC MOV X2, X31
	0x036EB3D0 STR X9, [X31 + 0x120]
	0x036EB3D4 STP V1, V0, [X31 + 0x100]
	0x036EB3D8 STR V2, [X31 + 0xF]
	0x036EB3DC LDR W9, [X8 + 0x8]
	0x036EB3E0 LDR X8, [X8]
	0x036EB3E4 MOV V13.16B, V3.16B
	0x036EB3E8 STR W9, [X31 + 0x138]
	0x036EB3EC STR X8, [X31 + 0x130]

ISIL:
	001 Move S17, [X0+20]
	002 Move S5, [X0+24]
	003 Move S6, [X0+8]
	004 Move S7, [X0+12]
	005 Move V16, [X0+16]
	006 Move V4, [X0]
	007 Multiply S18, S0, S5
	008 Multiply S19, S3, S7
	009 Multiply S20, S2, S16
	010 Multiply S21, S1, S17
	011 Multiply S22, S1, S5
	012 Multiply S23, S3, S16
	013 Multiply S24, S0, S17
	014 Multiply S25, S2, S7
	015 Multiply S26, S1, S7
	016 Multiply S7, S0, S7
	017 Multiply S0, S0, S16
	018 Multiply S1, S1, S16
	019 Multiply S16, S2, S5
	020 Multiply S5, S3, S5
	021 Multiply S3, S3, S17
	022 Multiply S2, S2, S17
	023 Move [X8], D4
	024 Add S4, S19, S18
	025 Add S17, S23, S22
	026 Add S3, S3, S16
	027 Subtract S5, S5, S7
	028 Add S4, S20, S4
	029 Add S7, S24, S17
	030 Add S3, S26, S3
	031 Subtract S1, S5, S1
	032 Subtract S4, S4, S21
	033 Subtract S5, S7, S25
	034 Subtract S0, S3, S0
	035 Subtract S1, S1, S2
	036 Move [X8+8], S6
	037 Move [X8+16], S4
	038 Move [X8+16], S5
	039 Move [X8+24], S0
	040 Move [X8+24], S1
	041 Return X0

Method: UnityEngine.Animations.Rigging.AffineTransform get_identity()

Disassembly:
	0x036FA0E4 STRH W31, [X31 + 0xC]
	0x036FA0E8 BL 0x242D570
	0x036FA0EC LDRH W8, [X31 + 0xC]
	0x036FA0F0 LDP X22, X21, [X31 + 0x10]
	0x036FA0F4 STRH W8, [X19 + 0x18]
	0x036FA0F8 LDP X20, X19, [X31 + 0x20]
	0x036FA0FC LDR X30, [X31], #0x30
	0x036FA100 RET
	0x036FA104 STR X30, [X31 - 0x20]!
	0x036FA108 STP X20, X19, [X31 + 0x10]
	0x036FA10C ADRP X20, 0xCE6000
	0x036FA110 LDRB W8, [X20 + 0xBE5]
	0x036FA114 MOV X19, X0
	0x036FA118 TBNZ X8, 0x0, 0x36FA13C
	0x036FA11C ADRP X0, 0x9FD000
	0x036FA120 LDR X0, [X0 + 0xBF0]
	0x036FA124 BL 0x1C16CF4
	0x036FA128 ADRP X0, 0x9FD000
	0x036FA12C LDR X0, [X0 + 0xBF8]
	0x036FA130 BL 0x1C16CF4
	0x036FA134 MOVZ W8, 0x1
	0x036FA138 STRB W8, [X20 + 0xBE5]
	0x036FA13C LDRB W8, [X19 + 0x1A]!
	0x036FA140 CBZ W8, 0x36FA160
	0x036FA144 ADRP X8, 0x9FD000
	0x036FA148 LDR X8, [X8 + 0xBF8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xCE7000
	006 Move X20, 0xA23000
	007 Move X19, X8
	008 Move W8, [X21+3031]
	009 Move X20, [X20+3648]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xA23000
	015 Move X0, [X0+3648]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3031], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 NotImplemented "Instruction LDUR not yet implemented."
	027 Move V1, [X8]
	028 Move [X19+12], V0
	029 Move [X19], V1
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0

Method: System.Void .cctor()

Disassembly:
	0x036FA14C MOV X0, X19
	0x036FA150 LDP X20, X19, [X31 + 0x10]
	0x036FA154 LDR X1, [X8]
	0x036FA158 LDR X30, [X31], #0x20
	0x036FA15C B 0x242D58C
	0x036FA160 LDP X20, X19, [X31 + 0x10]
	0x036FA164 MOV W0, W31
	0x036FA168 LDR X30, [X31], #0x20
	0x036FA16C RET
	0x036FA170 STR X30, [X31 - 0x30]!
	0x036FA174 STP X22, X21, [X31 + 0x10]
	0x036FA178 STP X20, X19, [X31 + 0x20]
	0x036FA17C ADRP X22, 0xCE6000
	0x036FA180 ADRP X21, 0x9FD000
	0x036FA184 LDRB W8, [X22 + 0xBE6]
	0x036FA188 LDR X21, [X21 + 0xFD8]
	0x036FA18C MOV W20, W1
	0x036FA190 MOV X19, X0
	0x036FA194 TBNZ X8, 0x0, 0x36FA1AC
	0x036FA198 ADRP X0, 0x9FD000
	0x036FA19C LDR X0, [X0 + 0xFD8]
	0x036FA1A0 BL 0x1C16CF4
	0x036FA1A4 MOVZ W8, 0x1
	0x036FA1A8 STRB W8, [X22 + 0xBE6]
	0x036FA1AC LDR X2, [X21]
	0x036FA1B0 AND W1, W20, 0x1
	0x036FA1B4 ADD X0, X31, 0xC
	0x036FA1B8 STRH W31, [X31 + 0xC]
	0x036FA1BC BL 0x242D570
	0x036FA1C0 LDRH W8, [X31 + 0xC]
	0x036FA1C4 LDP X22, X21, [X31 + 0x10]
	0x036FA1C8 STRH W8, [X19 + 0x1A]
	0x036FA1CC LDP X20, X19, [X31 + 0x20]
	0x036FA1D0 LDR X30, [X31], #0x30
	0x036FA1D4 RET
	0x036FA1D8 STR X30, [X31 - 0x20]!
	0x036FA1DC STP X20, X19, [X31 + 0x10]
	0x036FA1E0 ADRP X20, 0xCE6000
	0x036FA1E4 LDRB W8, [X20 + 0xBE7]
	0x036FA1E8 MOV X19, X0
	0x036FA1EC TBNZ X8, 0x0, 0x36FA210
	0x036FA1F0 ADRP X0, 0x9FD000
	0x036FA1F4 LDR X0, [X0 + 0xBF0]
	0x036FA1F8 BL 0x1C16CF4
	0x036FA1FC ADRP X0, 0x9FD000
	0x036FA200 LDR X0, [X0 + 0xBF8]
	0x036FA204 BL 0x1C16CF4
	0x036FA208 MOVZ W8, 0x1
	0x036FA20C STRB W8, [X20 + 0xBE7]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xCE7000
	007 Move W8, [X19+3032]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xA23000
	013 Move X0, [X0+3648]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3032], W8
	017 Move X19, 0xCDF000
	018 Move W8, [X19+1923]
	019 Compare W8, 0
	020 JumpIfNotEqual {26}
	021 Move X0, 0x9FA000
	022 Move X0, [X0+1440]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X19+1923], W8
	026 Move X8, 0x9FA000
	027 Move X8, [X8+1440]
	028 Move X20, 0xCDF000
	029 Move X19, 0xA23000
	030 Move W9, [X20+1939]
	031 Move X8, [X8]
	032 Move X8, [X8+184]
	033 Move V9, [X8]
	034 Move V8, [X8+8]
	035 Move X19, [X19+3648]
	036 Compare W9, 0
	037 JumpIfNotEqual {43}
	038 Move X0, 0x9FB000
	039 Move X0, [X0+1448]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X20+1939], W8
	043 Move X8, 0x9FB000
	044 Move X8, [X8+1448]
	045 Move X9, [X19]
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X30, [X31+16]
	049 Move X8, [X8]
	050 Move X9, [X9+184]
	051 Move X8, [X8+184]
	052 Move V0, [X8]
	053 Move [X9], D9
	054 Move [X9+8], S8
	055 Move [X9+12], V0
	056 Move D9, [X31+48]
	057 Move D8, [X31+56]
	058 Return 

