Type: UnityEngine.AudioClip

Method: System.Void .ctor()

Disassembly:
	0x03BFCB40 BL 0x1C16CF4
	0x03BFCB44 ADRP X0, 0x4F7000
	0x03BFCB48 LDR X0, [X0 + 0x598]
	0x03BFCB4C BL 0x1C16CF4
	0x03BFCB50 ADRP X0, 0x562000
	0x03BFCB54 LDR X0, [X0 + 0x9E8]
	0x03BFCB58 BL 0x1C16CF4
	0x03BFCB5C MOVZ W8, 0x1
	0x03BFCB60 STRB W8, [X21 + 0xB20]
	0x03BFCB64 LDR X0, [X22]
	0x03BFCB68 LDR W8, [X0 + 0xE0]
	0x03BFCB6C CBNZ W8, 0x3BFCB74
	0x03BFCB70 BL 0x1C16DFC
	0x03BFCB74 MOV X0, X19
	0x03BFCB78 MOV X1, X31
	0x03BFCB7C MOV X2, X31
	0x03BFCB80 BL 0x3C3883C
	0x03BFCB84 TBZ X0, 0x0, 0x3BFCBC4
	0x03BFCB88 ADRP X8, 0x4F7000
	0x03BFCB8C LDR X8, [X8 + 0xA28]
	0x03BFCB90 ADRP X19, 0x562000
	0x03BFCB94 LDR X0, [X8]
	0x03BFCB98 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7E8000
	006 Move X20, 0x4F8000
	007 Move W8, [X21+2676]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4F8000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2676], W8
	019 Move [X19+24], X31
	020 Move [X19+32], X31
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X1, X31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call Object..ctor, X0
	033 Return 

Method: System.Boolean GetData(UnityEngine.AudioClip clip, out System.Single[] data, System.Int32 numSamples, System.Int32 samplesOffset)

Disassembly:
	0x03BFCB9C LDR X19, [X19 + 0x9E8]
	0x03BFCBA0 CBNZ W8, 0x3BFCBA8
	0x03BFCBA4 BL 0x1C16DFC
	0x03BFCBA8 LDR X0, [X19]
	0x03BFCBAC LDP X20, X19, [X31 + 0x20]
	0x03BFCBB0 LDP X22, X21, [X31 + 0x10]
	0x03BFCBB4 LDR X30, [X31 + 0x8]
	0x03BFCBB8 MOV X1, X31
	0x03BFCBBC LDR V8, [X31], #0x30
	0x03BFCBC0 B 0x3C06A04
	0x03BFCBC4 ADRP X21, 0x7E7000
	0x03BFCBC8 LDR X2, [X21 + 0xAD8]
	0x03BFCBCC CBNZ X2, 0x3BFCBE4
	0x03BFCBD0 ADRP X0, 0xFFFFFFFFFCF16000
	0x03BFCBD4 ADD X0, X0, 0x875
	0x03BFCBD8 BL 0x1C16CB8
	0x03BFCBDC MOV X2, X0
	0x03BFCBE0 STR X0, [X21 + 0xAD8]
	0x03BFCBE4 MOV X0, X20
	0x03BFCBE8 MOV X1, X19
	0x03BFCBEC LDP X20, X19, [X31 + 0x20]
	0x03BFCBF0 LDP X22, X21, [X31 + 0x10]
	0x03BFCBF4 LDR X30, [X31 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x7E8000
	008 Move X4, [X23+2680]
	009 Move W19, W3
	010 Move W20, W2
	011 Move X21, X1
	012 Move X22, X0
	013 Compare X4, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51253248
	016 Add X0, X0, 1715
	017 Call 0x1C17CB8
	018 Move X4, X0
	019 Move [X23+2680], X0
	020 Move X0, X22
	021 Move X1, X21
	022 Move W2, W20
	023 Move W3, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Move X23, [X31+56]
	030 CallNoReturn X4

Method: System.Boolean SetData(UnityEngine.AudioClip clip, System.Single[] data, System.Int32 numsamples, System.Int32 samplesOffset)

Disassembly:
	0x03BFCBF8 MOV V0.16B, V8.16B
	0x03BFCBFC LDR V8, [X31], #0x30
	0x03BFCC00 BR X2
	0x03BFCC04 STR X30, [X31 - 0x20]!
	0x03BFCC08 STP X20, X19, [X31 + 0x10]
	0x03BFCC0C ADRP X20, 0x7E7000
	0x03BFCC10 LDR X2, [X20 + 0xAE0]
	0x03BFCC14 MOV X19, X0
	0x03BFCC18 CBNZ X2, 0x3BFCC30
	0x03BFCC1C ADRP X0, 0xFFFFFFFFFCF22000
	0x03BFCC20 ADD X0, X0, 0x6E4
	0x03BFCC24 BL 0x1C16CB8
	0x03BFCC28 MOV X2, X0
	0x03BFCC2C STR X0, [X20 + 0xAE0]
	0x03BFCC30 MOV X0, X19
	0x03BFCC34 LDP X20, X19, [X31 + 0x10]
	0x03BFCC38 MOVZ W1, 0x1
	0x03BFCC3C LDR X30, [X31], #0x20
	0x03BFCC40 BR X2
	0x03BFCC44 STR X30, [X31 - 0x20]!
	0x03BFCC48 STP X20, X19, [X31 + 0x10]
	0x03BFCC4C ADRP X20, 0x7E7000
	0x03BFCC50 LDR X1, [X20 + 0xB28]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x7E8000
	008 Move X4, [X23+2688]
	009 Move W19, W3
	010 Move W20, W2
	011 Move X21, X1
	012 Move X22, X0
	013 Compare X4, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51376128
	016 Add X0, X0, 3776
	017 Call 0x1C17CB8
	018 Move X4, X0
	019 Move [X23+2688], X0
	020 Move X0, X22
	021 Move X1, X21
	022 Move W2, W20
	023 Move W3, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Move X23, [X31+56]
	030 CallNoReturn X4

Method: UnityEngine.AudioClip Construct_Internal()

Disassembly:
	0x03BFCC54 MOV X19, X0
	0x03BFCC58 CBNZ X1, 0x3BFCC70
	0x03BFCC5C ADRP X0, 0xFFFFFFFFFCF04000
	0x03BFCC60 ADD X0, X0, 0xA99
	0x03BFCC64 BL 0x1C16CB8
	0x03BFCC68 MOV X1, X0
	0x03BFCC6C STR X0, [X20 + 0xB28]
	0x03BFCC70 MOV X0, X19
	0x03BFCC74 LDP X20, X19, [X31 + 0x10]
	0x03BFCC78 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7E8000
	004 Move X0, [X19+2696]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51212288
	008 Add X0, X0, 2139
	009 Call 0x1C17CB8
	010 Move [X19+2696], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.String GetName()

Disassembly:
	0x03BFCC7C BR X1
	0x03BFCC80 STR X30, [X31 - 0x20]!
	0x03BFCC84 STP X20, X19, [X31 + 0x10]
	0x03BFCC88 ADRP X20, 0x7E7000
	0x03BFCC8C LDR X1, [X20 + 0xB30]
	0x03BFCC90 MOV X19, X0
	0x03BFCC94 CBNZ X1, 0x3BFCCAC
	0x03BFCC98 ADRP X0, 0xFFFFFFFFFCEF6000
	0x03BFCC9C ADD X0, X0, 0xD5E
	0x03BFCCA0 BL 0x1C16CB8
	0x03BFCCA4 MOV X1, X0
	0x03BFCCA8 STR X0, [X20 + 0xB30]
	0x03BFCCAC MOV X0, X19
	0x03BFCCB0 LDP X20, X19, [X31 + 0x10]
	0x03BFCCB4 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E8000
	005 Move X1, [X20+2704]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51195904
	010 Add X0, X0, 751
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2704], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void CreateUserSound(System.String name, System.Int32 lengthSamples, System.Int32 channels, System.Int32 frequency, System.Boolean stream)

Disassembly:
	0x03BFCCB8 BR X1
	0x03BFCCBC STP D11, D10, [X31 - 0x50]!
	0x03BFCCC0 STP D9, D8, [X31 + 0x10]
	0x03BFCCC4 STR X30, [X31 + 0x20]
	0x03BFCCC8 STP X22, X21, [X31 + 0x30]
	0x03BFCCCC STP X20, X19, [X31 + 0x40]
	0x03BFCCD0 ADRP X21, 0x7E7000
	0x03BFCCD4 ADRP X22, 0x4F7000
	0x03BFCCD8 ADRP X20, 0x562000
	0x03BFCCDC LDRB W8, [X21 + 0xB38]
	0x03BFCCE0 LDR X22, [X22 + 0xA58]
	0x03BFCCE4 LDR X20, [X20 + 0x9F0]
	0x03BFCCE8 MOV V8.16B, V3.16B
	0x03BFCCEC MOV V9.16B, V2.16B
	0x03BFCCF0 MOV V10.16B, V1.16B
	0x03BFCCF4 MOV V11.16B, V0.16B
	0x03BFCCF8 MOV X19, X0
	0x03BFCCFC TBNZ X8, 0x0, 0x3BFCD50
	0x03BFCD00 ADRP X0, 0x562000
	0x03BFCD04 LDR X0, [X0 + 0x9F8]
	0x03BFCD08 BL 0x1C16CF4
	0x03BFCD0C ADRP X0, 0x562000
	0x03BFCD10 LDR X0, [X0 + 0xA00]
	0x03BFCD14 BL 0x1C16CF4
	0x03BFCD18 ADRP X0, 0x4F7000
	0x03BFCD1C LDR X0, [X0 + 0xA58]
	0x03BFCD20 BL 0x1C16CF4
	0x03BFCD24 ADRP X0, 0x4F7000
	0x03BFCD28 LDR X0, [X0 + 0x598]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x7E8000
	010 Move X6, [X25+2712]
	011 Move W22, W5
	012 Move W19, W4
	013 Move W20, W3
	014 Move W21, W2
	015 Move X23, X1
	016 Move X24, X0
	017 Compare X6, 0
	018 JumpIfNotEqual {24}
	019 Move X0, -51212288
	020 Add X0, X0, 2183
	021 Call 0x1C17CB8
	022 Move X6, X0
	023 Move [X25+2712], X0
	024 And W5, W22, 1
	025 Move X0, X24
	026 Move X1, X23
	027 Move W2, W21
	028 Move W3, W20
	029 Move W4, W19
	030 Move X20, [X31+48]
	031 Move X19, [X31+56]
	032 Move X22, [X31+32]
	033 Move X21, [X31+40]
	034 Move X24, [X31+16]
	035 Move X23, [X31+24]
	036 Move X30, [X31+64]
	037 Move X25, [X31+72]
	038 CallNoReturn X6

Method: System.Single get_length()

Disassembly:
	0x03BFCD2C BL 0x1C16CF4
	0x03BFCD30 ADRP X0, 0x4F7000
	0x03BFCD34 LDR X0, [X0 + 0x6C0]
	0x03BFCD38 BL 0x1C16CF4
	0x03BFCD3C ADRP X0, 0x562000
	0x03BFCD40 LDR X0, [X0 + 0x9F0]
	0x03BFCD44 BL 0x1C16CF4
	0x03BFCD48 MOVZ W8, 0x1
	0x03BFCD4C STRB W8, [X21 + 0xB38]
	0x03BFCD50 LDR X0, [X22]
	0x03BFCD54 BL 0x1C16F10
	0x03BFCD58 LDR X1, [X20]
	0x03BFCD5C MOV X2, X31
	0x03BFCD60 MOV X20, X0
	0x03BFCD64 BL 0x3C35934

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E8000
	005 Move X1, [X20+2720]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51326976
	010 Add X0, X0, 2779
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2720], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 get_samples()

Disassembly:
	0x03BFCD68 CBZ X20, 0x3BFCF30
	0x03BFCD6C MOV X0, X20
	0x03BFCD70 MOV X1, X31
	0x03BFCD74 BL 0x3C356F8
	0x03BFCD78 CBZ X0, 0x3BFCF30
	0x03BFCD7C ADRP X21, 0x562000
	0x03BFCD80 ADRP X22, 0x4F7000
	0x03BFCD84 LDR X21, [X21 + 0x9F8]
	0x03BFCD88 LDR X22, [X22 + 0x6C0]
	0x03BFCD8C MOV V0.16B, V11.16B
	0x03BFCD90 MOV V1.16B, V10.16B
	0x03BFCD94 MOV V2.16B, V9.16B
	0x03BFCD98 MOV X1, X31
	0x03BFCD9C BL 0x3C3F62C
	0x03BFCDA0 LDR X0, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E8000
	005 Move X1, [X20+2728]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51318784
	010 Add X0, X0, 3528
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2728], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 get_channels()

Disassembly:
	0x03BFCDA4 LDR X21, [X21]
	0x03BFCDA8 LDR W8, [X0 + 0xE0]
	0x03BFCDAC CBNZ W8, 0x3BFCDB4
	0x03BFCDB0 BL 0x1C16DFC
	0x03BFCDB4 MOV X0, X21
	0x03BFCDB8 MOV X1, X31
	0x03BFCDBC BL 0x338C698
	0x03BFCDC0 MOV X1, X0
	0x03BFCDC4 MOV X0, X20
	0x03BFCDC8 MOV X2, X31
	0x03BFCDCC BL 0x3C356B4
	0x03BFCDD0 CBZ X0, 0x3BFCF30
	0x03BFCDD4 ADRP X8, 0x562000
	0x03BFCDD8 LDR X8, [X8 + 0xA00]
	0x03BFCDDC MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E8000
	005 Move X1, [X20+2736]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51400704
	010 Add X0, X0, 3467
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2736], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 get_frequency()

Disassembly:
	0x03BFCDE0 LDR X1, [X8]
	0x03BFCDE4 LDR X8, [X0]
	0x03BFCDE8 CMP X8, X1
	0x03BFCDEC B.NE 0x3BFCF34
	0x03BFCDF0 ADRP X22, 0x7E7000
	0x03BFCDF4 LDR X8, [X22 + 0xB10]
	0x03BFCDF8 CBNZ X8, 0x3BFCE10
	0x03BFCDFC ADRP X0, 0xFFFFFFFFFCF04000
	0x03BFCE00 ADD X0, X0, 0xA60
	0x03BFCE04 BL 0x1C16CB8
	0x03BFCE08 MOV X8, X0
	0x03BFCE0C STR X0, [X22 + 0xB10]
	0x03BFCE10 MOV X0, X21
	0x03BFCE14 MOV X1, X19
	0x03BFCE18 BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E8000
	005 Move X1, [X20+2744]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51351552
	010 Add X0, X0, 3093
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2744], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean GetData(System.Single[] data, System.Int32 offsetSamples)

Disassembly:
	0x03BFCE1C ADRP X22, 0x7E7000
	0x03BFCE20 LDR X8, [X22 + 0xB50]
	0x03BFCE24 CBNZ X8, 0x3BFCE3C
	0x03BFCE28 ADRP X0, 0xFFFFFFFFFCEFE000
	0x03BFCE2C ADD X0, X0, 0xCF8
	0x03BFCE30 BL 0x1C16CB8
	0x03BFCE34 MOV X8, X0
	0x03BFCE38 STR X0, [X22 + 0xB50]
	0x03BFCE3C FMOV S0, 1
	0x03BFCE40 MOV X0, X21
	0x03BFCE44 BLR X8
	0x03BFCE48 ADRP X22, 0x7E7000
	0x03BFCE4C LDR X8, [X22 + 0xAF0]
	0x03BFCE50 CBNZ X8, 0x3BFCE68
	0x03BFCE54 ADRP X0, 0xFFFFFFFFFCF2A000
	0x03BFCE58 ADD X0, X0, 0x9D6
	0x03BFCE5C BL 0x1C16CB8
	0x03BFCE60 MOV X8, X0
	0x03BFCE64 STR X0, [X22 + 0xAF0]
	0x03BFCE68 MOV X0, X21
	0x03BFCE6C MOV V0.16B, V8.16B
	0x03BFCE70 BLR X8
	0x03BFCE74 ADRP X22, 0x7E7000
	0x03BFCE78 LDR X8, [X22 + 0xAD0]
	0x03BFCE7C CBNZ X8, 0x3BFCE94
	0x03BFCE80 ADRP X0, 0xFFFFFFFFFCF02000
	0x03BFCE84 ADD X0, X0, 0xACF
	0x03BFCE88 BL 0x1C16CB8
	0x03BFCE8C MOV X8, X0
	0x03BFCE90 STR X0, [X22 + 0xAD0]
	0x03BFCE94 MOV X0, X21
	0x03BFCE98 MOV X1, X31
	0x03BFCE9C BLR X8
	0x03BFCEA0 CBZ X19, 0x3BFCF30
	0x03BFCEA4 ADRP X21, 0x7E7000
	0x03BFCEA8 LDR X8, [X21 + 0xAA0]
	0x03BFCEAC CBNZ X8, 0x3BFCEC4
	0x03BFCEB0 ADRP X0, 0xFFFFFFFFFCF0C000
	0x03BFCEB4 ADD X0, X0, 0xADB
	0x03BFCEB8 BL 0x1C16CB8
	0x03BFCEBC MOV X8, X0
	0x03BFCEC0 STR X0, [X21 + 0xAA0]
	0x03BFCEC4 ADRP X21, 0x4F7000
	0x03BFCEC8 LDR X21, [X21 + 0x598]
	0x03BFCECC MOV X0, X19
	0x03BFCED0 BLR X8
	0x03BFCED4 MOV X0, X31
	0x03BFCED8 MOV V8.16B, V0.16B
	0x03BFCEDC BL 0x3C3C864
	0x03BFCEE0 ADRP X8, 0xFFFFFFFFFCEEE000
	0x03BFCEE4 LDR V9, [X8 + 0x330]
	0x03BFCEE8 FCMP S0, S9
	0x03BFCEEC B.MI 0x3BFCEFC
	0x03BFCEF0 MOV X0, X31
	0x03BFCEF4 BL 0x3C3C864
	0x03BFCEF8 MOV V9.16B, V0.16B
	0x03BFCEFC LDR X0, [X21]
	0x03BFCF00 LDR W8, [X0 + 0xE0]
	0x03BFCF04 CBNZ W8, 0x3BFCF0C
	0x03BFCF08 BL 0x1C16DFC
	0x03BFCF0C FMUL S0, S8, S9
	0x03BFCF10 MOV X0, X20
	0x03BFCF14 LDP X20, X19, [X31 + 0x40]
	0x03BFCF18 LDP X22, X21, [X31 + 0x30]
	0x03BFCF1C LDR X30, [X31 + 0x20]
	0x03BFCF20 LDP D9, D8, [X31 + 0x10]
	0x03BFCF24 MOV X1, X31
	0x03BFCF28 LDP D11, D10, [X31], #0x50
	0x03BFCF2C B 0x3C3945C
	0x03BFCF30 BL 0x1C16F20
	0x03BFCF34 MOV X0, X21
	0x03BFCF38 BL 0x1C171E0
	0x03BFCF3C STR D8, [X31 - 0x20]!
	0x03BFCF40 STR X30, [X31 + 0x8]
	0x03BFCF44 STP X20, X19, [X31 + 0x10]
	0x03BFCF48 ADRP X20, 0x7E7000
	0x03BFCF4C LDR X1, [X20 + 0xB50]
	0x03BFCF50 MOV V8.16B, V0.16B
	0x03BFCF54 MOV X19, X0
	0x03BFCF58 CBNZ X1, 0x3BFCF70
	0x03BFCF5C ADRP X0, 0xFFFFFFFFFCEFE000
	0x03BFCF60 ADD X0, X0, 0xCF8
	0x03BFCF64 BL 0x1C16CB8
	0x03BFCF68 MOV X1, X0
	0x03BFCF6C STR X0, [X20 + 0xB50]
	0x03BFCF70 MOV X0, X19
	0x03BFCF74 LDP X20, X19, [X31 + 0x10]
	0x03BFCF78 LDR X30, [X31 + 0x8]
	0x03BFCF7C MOV V0.16B, V8.16B
	0x03BFCF80 LDR V8, [X31], #0x20
	0x03BFCF84 BR X1
	0x03BFCF88 STP X30, X21, [X31 - 0x20]!
	0x03BFCF8C STP X20, X19, [X31 + 0x10]
	0x03BFCF90 ADRP X21, 0x7E7000
	0x03BFCF94 LDR X2, [X21 + 0xB40]
	0x03BFCF98 MOV W19, W1
	0x03BFCF9C MOV X20, X0
	0x03BFCFA0 CBNZ X2, 0x3BFCFB8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x7E8000
	008 Move W8, [X22+2752]
	009 Move W20, W2
	010 Move X21, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x4F8000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x563000
	020 Move X0, [X0+2456]
	021 Call 0x1C17CF4
	022 Move X0, 0x563000
	023 Move X0, [X0+2464]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+2752], W8
	027 Move X22, 0x7E8000
	028 Move X8, [X22+2736]
	029 Compare X8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, -51400704
	032 Add X0, X0, 3467
	033 Call 0x1C17CB8
	034 Move X8, X0
	035 Move [X22+2736], X0
	036 Move X0, X19
	037 NotImplemented "Instruction BLR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Compare X21, 0
	040 JumpIfEqual {94}
	041 Move X8, [X22+2736]
	042 Compare X8, 0
	043 JumpIfNotEqual {49}
	044 Move X0, -51400704
	045 Add X0, X0, 3467
	046 Call 0x1C17CB8
	047 Move X8, X0
	048 Move [X22+2736], X0
	049 Move X0, X19
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move W8, [X21+24]
	052 NotImplemented "Instruction SDIV not yet implemented."
	053 Move X20, 0x7E8000
	054 Move X8, [X20+2704]
	055 Compare X8, 0
	056 JumpIfNotEqual {62}
	057 Move X0, -51195904
	058 Add X0, X0, 751
	059 Call 0x1C17CB8
	060 Move X8, X0
	061 Move [X20+2704], X0
	062 Move X0, X19
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move X8, 0x563000
	065 Move X8, [X8+2464]
	066 Move X9, 0x563000
	067 Move X9, [X9+2456]
	068 Move X1, X0
	069 Move X8, [X8]
	070 Move X3, X31
	071 Move X2, [X9]
	072 Move X0, X8
	073 Call String.Concat, X0, X1, X2
	074 Move X8, 0x4F8000
	075 Move X8, [X8+2600]
	076 Move X19, X0
	077 Move X8, [X8]
	078 Move W9, [X8+224]
	079 Compare W9, 0
	080 JumpIfNotEqual {83}
	081 Move X0, X8
	082 Call 0x1C17DFC
	083 Move X0, X19
	084 Move X1, X31
	085 Call Debug.Log, X0
	086 Move X20, [X31+32]
	087 Move X19, [X31+40]
	088 Move X22, [X31+16]
	089 Move X21, [X31+24]
	090 Move W0, W31
	091 Move X30, [X31+48]
	092 Move X23, [X31+56]
	093 Return X0
	094 Move W22, W31
	095 Move X23, 0x7E8000
	096 Move X4, [X23+2680]
	097 Compare X4, 0
	098 JumpIfNotEqual {104}
	099 Move X0, -51253248
	100 Add X0, X0, 1715
	101 Call 0x1C17CB8
	102 Move X4, X0
	103 Move [X23+2680], X0
	104 Move X0, X19
	105 Move X1, X21
	106 Move W2, W22
	107 Move W3, W20
	108 Move X20, [X31+32]
	109 Move X19, [X31+40]
	110 Move X22, [X31+16]
	111 Move X21, [X31+24]
	112 Move X30, [X31+48]
	113 Move X23, [X31+56]
	114 CallNoReturn X4

Method: System.Boolean SetData(System.Single[] data, System.Int32 offsetSamples)

Disassembly:
	0x03BFCFA4 ADRP X0, 0xFFFFFFFFFCEF4000
	0x03BFCFA8 ADD X0, X0, 0xA7D
	0x03BFCFAC BL 0x1C16CB8
	0x03BFCFB0 MOV X2, X0
	0x03BFCFB4 STR X0, [X21 + 0xB40]
	0x03BFCFB8 AND W1, W19, 0x1
	0x03BFCFBC MOV X0, X20
	0x03BFCFC0 LDP X20, X19, [X31 + 0x10]
	0x03BFCFC4 LDP X30, X21, [X31], #0x20
	0x03BFCFC8 BR X2
	0x03BFCFCC STP X30, X21, [X31 - 0x20]!
	0x03BFCFD0 STP X20, X19, [X31 + 0x10]
	0x03BFCFD4 ADRP X21, 0x7E7000
	0x03BFCFD8 LDR X2, [X21 + 0xB48]
	0x03BFCFDC MOV W19, W1
	0x03BFCFE0 MOV X20, X0
	0x03BFCFE4 CBNZ X2, 0x3BFCFFC
	0x03BFCFE8 ADRP X0, 0xFFFFFFFFFCEF8000
	0x03BFCFEC ADD X0, X0, 0xEC1
	0x03BFCFF0 BL 0x1C16CB8
	0x03BFCFF4 MOV X2, X0
	0x03BFCFF8 STR X0, [X21 + 0xB48]
	0x03BFCFFC AND W1, W19, 0x1
	0x03BFD000 MOV X0, X20
	0x03BFD004 LDP X20, X19, [X31 + 0x10]
	0x03BFD008 LDP X30, X21, [X31], #0x20
	0x03BFD00C BR X2
	0x03BFD010 STR D8, [X31 - 0x20]!
	0x03BFD014 STR X30, [X31 + 0x8]
	0x03BFD018 STP X20, X19, [X31 + 0x10]
	0x03BFD01C ADRP X20, 0x7E6000
	0x03BFD020 LDR X1, [X20 + 0xB58]
	0x03BFD024 MOV V8.16B, V0.16B
	0x03BFD028 MOV X19, X0
	0x03BFD02C CBNZ X1, 0x3BFD044
	0x03BFD030 ADRP X0, 0xFFFFFFFFFCF07000
	0x03BFD034 ADD X0, X0, 0xD7D
	0x03BFD038 BL 0x1C16CB8
	0x03BFD03C MOV X1, X0
	0x03BFD040 STR X0, [X20 + 0xB58]
	0x03BFD044 MOV X0, X19
	0x03BFD048 LDP X20, X19, [X31 + 0x10]
	0x03BFD04C LDR X30, [X31 + 0x8]
	0x03BFD050 MOV V0.16B, V8.16B
	0x03BFD054 LDR V8, [X31], #0x20
	0x03BFD058 BR X1
	0x03BFD05C STP X30, X21, [X31 - 0x20]!
	0x03BFD060 STP X20, X19, [X31 + 0x10]
	0x03BFD064 ADRP X21, 0x7E6000
	0x03BFD068 LDR X2, [X21 + 0xB60]
	0x03BFD06C MOV W19, W1
	0x03BFD070 MOV X20, X0
	0x03BFD074 CBNZ X2, 0x3BFD08C
	0x03BFD078 ADRP X0, 0xFFFFFFFFFCEF9000
	0x03BFD07C ADD X0, X0, 0xDB1
	0x03BFD080 BL 0x1C16CB8
	0x03BFD084 MOV X2, X0
	0x03BFD088 STR X0, [X21 + 0xB60]
	0x03BFD08C AND W1, W19, 0x1
	0x03BFD090 MOV X0, X20
	0x03BFD094 LDP X20, X19, [X31 + 0x10]
	0x03BFD098 LDP X30, X21, [X31], #0x20
	0x03BFD09C BR X2
	0x03BFD0A0 STR D8, [X31 - 0x20]!
	0x03BFD0A4 STR X30, [X31 + 0x8]
	0x03BFD0A8 STP X20, X19, [X31 + 0x10]
	0x03BFD0AC ADRP X20, 0x7E6000
	0x03BFD0B0 LDR X1, [X20 + 0xB68]
	0x03BFD0B4 MOV V8.16B, V0.16B
	0x03BFD0B8 MOV X19, X0
	0x03BFD0BC CBNZ X1, 0x3BFD0D4
	0x03BFD0C0 ADRP X0, 0xFFFFFFFFFCF09000
	0x03BFD0C4 ADD X0, X0, 0xD33
	0x03BFD0C8 BL 0x1C16CB8
	0x03BFD0CC MOV X1, X0
	0x03BFD0D0 STR X0, [X20 + 0xB68]
	0x03BFD0D4 MOV X0, X19
	0x03BFD0D8 LDP X20, X19, [X31 + 0x10]
	0x03BFD0DC LDR X30, [X31 + 0x8]
	0x03BFD0E0 MOV V0.16B, V8.16B
	0x03BFD0E4 LDR V8, [X31], #0x20
	0x03BFD0E8 BR X1
	0x03BFD0EC STR D8, [X31 - 0x20]!
	0x03BFD0F0 STR X30, [X31 + 0x8]
	0x03BFD0F4 STP X20, X19, [X31 + 0x10]
	0x03BFD0F8 ADRP X20, 0x7E6000
	0x03BFD0FC LDR X1, [X20 + 0xB70]
	0x03BFD100 MOV V8.16B, V0.16B
	0x03BFD104 MOV X19, X0
	0x03BFD108 CBNZ X1, 0x3BFD120
	0x03BFD10C ADRP X0, 0xFFFFFFFFFCEF3000
	0x03BFD110 ADD X0, X0, 0xAAF
	0x03BFD114 BL 0x1C16CB8
	0x03BFD118 MOV X1, X0
	0x03BFD11C STR X0, [X20 + 0xB70]
	0x03BFD120 MOV X0, X19
	0x03BFD124 LDP X20, X19, [X31 + 0x10]
	0x03BFD128 LDR X30, [X31 + 0x8]
	0x03BFD12C MOV V0.16B, V8.16B
	0x03BFD130 LDR V8, [X31], #0x20
	0x03BFD134 BR X1
	0x03BFD138 STP X30, X21, [X31 - 0x20]!
	0x03BFD13C STP X20, X19, [X31 + 0x10]
	0x03BFD140 ADRP X21, 0x7E6000
	0x03BFD144 LDR X2, [X21 + 0xB78]
	0x03BFD148 MOV W19, W1
	0x03BFD14C MOV X20, X0
	0x03BFD150 CBNZ X2, 0x3BFD168
	0x03BFD154 ADRP X0, 0xFFFFFFFFFCF1D000
	0x03BFD158 ADD X0, X0, 0x739
	0x03BFD15C BL 0x1C16CB8
	0x03BFD160 MOV X2, X0
	0x03BFD164 STR X0, [X21 + 0xB78]
	0x03BFD168 MOV X0, X20
	0x03BFD16C MOV W1, W19
	0x03BFD170 LDP X20, X19, [X31 + 0x10]
	0x03BFD174 LDP X30, X21, [X31], #0x20
	0x03BFD178 BR X2
	0x03BFD17C STP X30, X21, [X31 - 0x20]!
	0x03BFD180 STP X20, X19, [X31 + 0x10]
	0x03BFD184 ADRP X21, 0x7E6000
	0x03BFD188 LDR X2, [X21 + 0xB80]
	0x03BFD18C MOV W19, W1
	0x03BFD190 MOV X20, X0
	0x03BFD194 CBNZ X2, 0x3BFD1AC
	0x03BFD198 ADRP X0, 0xFFFFFFFFFCEFD000
	0x03BFD19C ADD X0, X0, 0xD31
	0x03BFD1A0 BL 0x1C16CB8
	0x03BFD1A4 MOV X2, X0
	0x03BFD1A8 STR X0, [X21 + 0xB80]
	0x03BFD1AC MOV X0, X20
	0x03BFD1B0 MOV W1, W19
	0x03BFD1B4 LDP X20, X19, [X31 + 0x10]
	0x03BFD1B8 LDP X30, X21, [X31], #0x20
	0x03BFD1BC BR X2
	0x03BFD1C0 STR X30, [X31 - 0x20]!
	0x03BFD1C4 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x7E8000
	008 Move W8, [X22+2753]
	009 Move W20, W2
	010 Move X21, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x4F8000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x563000
	020 Move X0, [X0+2472]
	021 Call 0x1C17CF4
	022 Move X0, 0x563000
	023 Move X0, [X0+2456]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+2753], W8
	027 Move X22, 0x7E8000
	028 Move X8, [X22+2736]
	029 Compare X8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, -51404800
	032 Add X0, X0, 3467
	033 Call 0x1C17CB8
	034 Move X8, X0
	035 Move [X22+2736], X0
	036 Move X0, X19
	037 NotImplemented "Instruction BLR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move TEMP, X20
	040 And TEMP, TEMP, -2147483648
	041 Compare TEMP, -2147483648
	042 JumpIfEqual {133}
	043 Move X23, 0x7E7000
	044 Move X8, [X23+2728]
	045 Compare X8, 0
	046 JumpIfNotEqual {52}
	047 Move X0, -51322880
	048 Add X0, X0, 3528
	049 Call 0x1C17CB8
	050 Move X8, X0
	051 Move [X23+2728], X0
	052 Move X0, X19
	053 NotImplemented "Instruction BLR not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Compare X21, 0
	056 JumpIfEqual {140}
	057 Move W8, [X21+24]
	058 Compare W8, 0
	059 JumpIfEqual {140}
	060 Move X8, [X22+2736]
	061 Compare X8, 0
	062 JumpIfNotEqual {68}
	063 Move X0, -51404800
	064 Add X0, X0, 3467
	065 Call 0x1C17CB8
	066 Move X8, X0
	067 Move [X22+2736], X0
	068 Move X0, X19
	069 NotImplemented "Instruction BLR not yet implemented."
	070 Move W8, [X21+24]
	071 Move X23, 0x7E7000
	072 Move X4, [X23+2688]
	073 NotImplemented "Instruction SDIV not yet implemented."
	074 Compare X4, 0
	075 JumpIfNotEqual {81}
	076 Move X0, -51380224
	077 Add X0, X0, 3776
	078 Call 0x1C17CB8
	079 Move X4, X0
	080 Move [X23+2688], X0
	081 Move X0, X19
	082 Move X1, X21
	083 Move W2, W22
	084 Move W3, W20
	085 Move X20, [X31+32]
	086 Move X19, [X31+40]
	087 Move X22, [X31+16]
	088 Move X21, [X31+24]
	089 Move X30, [X31+48]
	090 Move X23, [X31+56]
	091 CallNoReturn X4
	092 Move X20, 0x7E7000
	093 Move X8, [X20+2704]
	094 Compare X8, 0
	095 JumpIfNotEqual {101}
	096 Move X0, -51200000
	097 Add X0, X0, 751
	098 Call 0x1C17CB8
	099 Move X8, X0
	100 Move [X20+2704], X0
	101 Move X0, X19
	102 NotImplemented "Instruction BLR not yet implemented."
	103 Move X8, 0x562000
	104 Move X8, [X8+2472]
	105 Move X9, 0x562000
	106 Move X9, [X9+2456]
	107 Move X1, X0
	108 Move X8, [X8]
	109 Move X3, X31
	110 Move X2, [X9]
	111 Move X0, X8
	112 Call String.Concat, X0, X1, X2
	113 Move X8, 0x4F7000
	114 Move X8, [X8+2600]
	115 Move X19, X0
	116 Move X8, [X8]
	117 Move W9, [X8+224]
	118 Compare W9, 0
	119 JumpIfNotEqual {122}
	120 Move X0, X8
	121 Call 0x1C17DFC
	122 Move X0, X19
	123 Move X1, X31
	124 Call Debug.Log, X0
	125 Move X20, [X31+32]
	126 Move X19, [X31+40]
	127 Move X22, [X31+16]
	128 Move X21, [X31+24]
	129 Move W0, W31
	130 Move X30, [X31+48]
	131 Move X23, [X31+56]
	132 Return X0
	133 Move X0, 0x4FF000
	134 Move X0, [X0+1400]
	135 Call 0x1C17D08
	136 Call 0x1C17F10
	137 Move X19, X0
	138 Move X0, 0x562000
	139 Move X0, [X0+2480]
	140 Move X0, 0x4FF000
	141 Move X0, [X0+1400]
	142 Call 0x1C17D08
	143 Call 0x1C17F10
	144 Move X19, X0
	145 Move X0, 0x562000
	146 Move X0, [X0+2488]
	147 Call 0x1C17D08
	148 Move X1, X0
	149 Move X0, X19
	150 Move X2, X31
	151 Call ArgumentException..ctor, X0, X1
	152 Move X0, 0x562000
	153 Move X0, [X0+2496]
	154 Call 0x1C17D08
	155 Move X1, X0
	156 Move X0, X19
	157 Call 0x1C17DEC

Method: UnityEngine.AudioClip Create(System.String name, System.Int32 lengthSamples, System.Int32 channels, System.Int32 frequency, System.Boolean stream)

Disassembly:
	0x03BFD1C8 ADRP X20, 0x7E6000
	0x03BFD1CC LDR X1, [X20 + 0xB88]
	0x03BFD1D0 MOV X19, X0
	0x03BFD1D4 CBNZ X1, 0x3BFD1EC

ISIL:
	001 And W4, W4, 1
	002 Move X5, X31
	003 Move X6, X31

Method: UnityEngine.AudioClip Create(System.String name, System.Int32 lengthSamples, System.Int32 channels, System.Int32 frequency, System.Boolean stream, UnityEngine.AudioClip/PCMReaderCallback pcmreadercallback, UnityEngine.AudioClip/PCMSetPositionCallback pcmsetpositioncallback)

Disassembly:
	0x03BFD1D8 ADRP X0, 0xFFFFFFFFFCF09000
	0x03BFD1DC ADD X0, X0, 0xD6B
	0x03BFD1E0 BL 0x1C16CB8
	0x03BFD1E4 MOV X1, X0
	0x03BFD1E8 STR X0, [X20 + 0xB88]
	0x03BFD1EC MOV X0, X19
	0x03BFD1F0 LDP X20, X19, [X31 + 0x10]
	0x03BFD1F4 LDR X30, [X31], #0x20
	0x03BFD1F8 BR X1
	0x03BFD1FC STR D8, [X31 - 0x30]!
	0x03BFD200 STR X30, [X31 + 0x8]
	0x03BFD204 STP X22, X21, [X31 + 0x10]
	0x03BFD208 STP X20, X19, [X31 + 0x20]
	0x03BFD20C ADRP X22, 0x7E6000
	0x03BFD210 LDR X3, [X22 + 0xB90]
	0x03BFD214 MOV W19, W2
	0x03BFD218 MOV V8.16B, V0.16B
	0x03BFD21C MOV W20, W1
	0x03BFD220 MOV W21, W0
	0x03BFD224 CBNZ X3, 0x3BFD23C
	0x03BFD228 ADRP X0, 0xFFFFFFFFFCF05000
	0x03BFD22C ADD X0, X0, 0xC3C
	0x03BFD230 BL 0x1C16CB8
	0x03BFD234 MOV X3, X0
	0x03BFD238 STR X0, [X22 + 0xB90]
	0x03BFD23C AND W1, W20, 0x1
	0x03BFD240 MOV W0, W21
	0x03BFD244 MOV W2, W19
	0x03BFD248 LDP X20, X19, [X31 + 0x20]
	0x03BFD24C LDP X22, X21, [X31 + 0x10]
	0x03BFD250 LDR X30, [X31 + 0x8]
	0x03BFD254 MOV V0.16B, V8.16B
	0x03BFD258 LDR V8, [X31], #0x30
	0x03BFD25C BR X3
	0x03BFD260 STR X30, [X31 - 0x20]!
	0x03BFD264 STP X20, X19, [X31 + 0x10]
	0x03BFD268 ADRP X20, 0x7E6000
	0x03BFD26C LDR X1, [X20 + 0xB98]
	0x03BFD270 MOV W19, W0
	0x03BFD274 CBNZ X1, 0x3BFD28C
	0x03BFD278 ADRP X0, 0xFFFFFFFFFCF17000
	0x03BFD27C ADD X0, X0, 0x51A
	0x03BFD280 BL 0x1C16CB8
	0x03BFD284 MOV X1, X0
	0x03BFD288 STR X0, [X20 + 0xB98]
	0x03BFD28C MOV W0, W19
	0x03BFD290 LDP X20, X19, [X31 + 0x10]
	0x03BFD294 LDR X30, [X31], #0x20
	0x03BFD298 BR X1
	0x03BFD29C STR X30, [X31 - 0x20]!
	0x03BFD2A0 STP X20, X19, [X31 + 0x10]
	0x03BFD2A4 ADRP X20, 0x7E6000
	0x03BFD2A8 LDR X1, [X20 + 0xBA0]
	0x03BFD2AC MOV W19, W0
	0x03BFD2B0 CBNZ X1, 0x3BFD2C8
	0x03BFD2B4 ADRP X0, 0xFFFFFFFFFCEF5000
	0x03BFD2B8 ADD X0, X0, 0xD87
	0x03BFD2BC BL 0x1C16CB8
	0x03BFD2C0 MOV X1, X0
	0x03BFD2C4 STR X0, [X20 + 0xBA0]
	0x03BFD2C8 MOV W0, W19
	0x03BFD2CC LDP X20, X19, [X31 + 0x10]
	0x03BFD2D0 LDR X30, [X31], #0x20
	0x03BFD2D4 BR X1
	0x03BFD2D8 STR X30, [X31 - 0x20]!
	0x03BFD2DC STP X20, X19, [X31 + 0x10]
	0x03BFD2E0 ADRP X20, 0x7E6000
	0x03BFD2E4 LDR X1, [X20 + 0xBA8]
	0x03BFD2E8 MOV W19, W0
	0x03BFD2EC CBNZ X1, 0x3BFD304
	0x03BFD2F0 ADRP X0, 0xFFFFFFFFFCEF5000
	0x03BFD2F4 ADD X0, X0, 0xDB9
	0x03BFD2F8 BL 0x1C16CB8
	0x03BFD2FC MOV X1, X0
	0x03BFD300 STR X0, [X20 + 0xBA8]
	0x03BFD304 MOV W0, W19
	0x03BFD308 LDP X20, X19, [X31 + 0x10]
	0x03BFD30C LDR X30, [X31], #0x20
	0x03BFD310 BR X1
	0x03BFD314 STR X30, [X31 - 0x30]!
	0x03BFD318 STP X22, X21, [X31 + 0x10]
	0x03BFD31C STP X20, X19, [X31 + 0x20]
	0x03BFD320 ADRP X22, 0x7E6000
	0x03BFD324 LDR X3, [X22 + 0xBB0]
	0x03BFD328 MOV X19, X2
	0x03BFD32C MOV X20, X1
	0x03BFD330 MOV W21, W0
	0x03BFD334 CBNZ X3, 0x3BFD34C
	0x03BFD338 ADRP X0, 0xFFFFFFFFFCF03000
	0x03BFD33C ADD X0, X0, 0xABA
	0x03BFD340 BL 0x1C16CB8
	0x03BFD344 MOV X3, X0
	0x03BFD348 STR X0, [X22 + 0xBB0]
	0x03BFD34C MOV W0, W21
	0x03BFD350 MOV X1, X20
	0x03BFD354 MOV X2, X19
	0x03BFD358 LDP X20, X19, [X31 + 0x20]
	0x03BFD35C LDP X22, X21, [X31 + 0x10]
	0x03BFD360 LDR X30, [X31], #0x30
	0x03BFD364 BR X3
	0x03BFD368 SUB X31, X31, 0x40
	0x03BFD36C STP X30, X23, [X31 + 0x10]
	0x03BFD370 STP X22, X21, [X31 + 0x20]
	0x03BFD374 STP X20, X19, [X31 + 0x30]
	0x03BFD378 ADRP X23, 0x7E6000
	0x03BFD37C LDR X8, [X23 + 0xB88]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Compare X0, 0
	011 JumpIfEqual {77}
	012 Move W21, W1
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W20, W2
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move W19, W3
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X25, 0x7E7000
	019 Move X8, [X25+2696]
	020 Move X24, X6
	021 Move X26, X5
	022 Move W22, W4
	023 Move X23, X0
	024 Compare X8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, -51216384
	027 Add X0, X0, 2139
	028 Call 0x1C17CB8
	029 Move X8, X0
	030 Move [X25+2696], X0
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X25, X0
	033 Compare X26, 0
	034 JumpIfEqual {40}
	035 Compare X25, 0
	036 JumpIfEqual {76}
	037 Move X0, X25
	038 Move X1, X26
	039 Call AudioClip.add_m_PCMReaderCallback, X0, X1
	040 Compare X24, 0
	041 JumpIfEqual {47}
	042 Compare X25, 0
	043 JumpIfEqual {76}
	044 Move X0, X25
	045 Move X1, X24
	046 Call AudioClip.add_m_PCMSetPositionCallback, X0, X1
	047 Compare X25, 0
	048 JumpIfEqual {76}
	049 Move X24, 0x7E7000
	050 Move X8, [X24+2712]
	051 Compare X8, 0
	052 JumpIfNotEqual {58}
	053 Move X0, -51216384
	054 Add X0, X0, 2183
	055 Call 0x1C17CB8
	056 Move X8, X0
	057 Move [X24+2712], X0
	058 And W5, W22, 1
	059 Move X0, X25
	060 Move X1, X23
	061 Move W2, W21
	062 Move W3, W20
	063 Move W4, W19
	064 NotImplemented "Instruction BLR not yet implemented."
	065 Move X0, X25
	066 Move X20, [X31+64]
	067 Move X19, [X31+72]
	068 Move X22, [X31+48]
	069 Move X21, [X31+56]
	070 Move X24, [X31+32]
	071 Move X23, [X31+40]
	072 Move X26, [X31+16]
	073 Move X25, [X31+24]
	074 Move X30, [X31+80]
	075 Return X0
	076 Call 0x1C17F20
	077 Move X0, 0x502000
	078 Move X0, [X0+2584]
	079 Call 0x1C17D08
	080 Call 0x1C17F10
	081 Move X1, X31
	082 Move X19, X0
	083 Call NullReferenceException..ctor, X0
	084 Move X0, 0x4FF000
	085 Move X0, [X0+1400]
	086 Call 0x1C17D08
	087 Call 0x1C17F10
	088 Move X19, X0
	089 Move X0, 0x562000
	090 Move X0, [X0+2504]
	091 Move X0, 0x4FF000
	092 Move X0, [X0+1400]
	093 Call 0x1C17D08
	094 Call 0x1C17F10
	095 Move X19, X0
	096 Move X0, 0x562000
	097 Move X0, [X0+2512]
	098 Move X0, 0x4FF000
	099 Move X0, [X0+1400]
	100 Call 0x1C17D08
	101 Call 0x1C17F10
	102 Move X19, X0
	103 Move X0, 0x562000
	104 Move X0, [X0+2520]
	105 Call 0x1C17D08
	106 Move X1, X0
	107 Move X0, X19
	108 Move X2, X31
	109 Call ArgumentException..ctor, X0, X1
	110 Move X0, 0x562000
	111 Move X0, [X0+2528]
	112 Call 0x1C17D08
	113 Move X1, X0
	114 Move X0, X19
	115 Call 0x1C17DEC

Method: System.Void add_m_PCMReaderCallback(UnityEngine.AudioClip/PCMReaderCallback value)

Disassembly:
	0x03BFD380 MOV W19, W3
	0x03BFD384 MOV W21, W2
	0x03BFD388 MOV W20, W1
	0x03BFD38C MOV X22, X0
	0x03BFD390 STP W3, W2, [X31 + 0x8]
	0x03BFD394 CBNZ X8, 0x3BFD3AC
	0x03BFD398 ADRP X0, 0xFFFFFFFFFCF09000
	0x03BFD39C ADD X0, X0, 0xD6B
	0x03BFD3A0 BL 0x1C16CB8
	0x03BFD3A4 MOV X8, X0
	0x03BFD3A8 STR X0, [X23 + 0xB88]
	0x03BFD3AC MOV X0, X22
	0x03BFD3B0 BLR X8
	0x03BFD3B4 ADDS W31, W0, 0x1
	0x03BFD3B8 B.EQ 0x3BFD41C
	0x03BFD3BC CMP W21, 0x0
	0x03BFD3C0 B.LE 0x3BFD438
	0x03BFD3C4 CMP W21, 0xE11
	0x03BFD3C8 B.GE 0x3BFD454
	0x03BFD3CC CMP W19, 0x0
	0x03BFD3D0 B.LE 0x3BFD480
	0x03BFD3D4 ADRP X22, 0x7E6000
	0x03BFD3D8 LDR X3, [X22 + 0xB90]
	0x03BFD3DC MOV W23, W0
	0x03BFD3E0 CBNZ X3, 0x3BFD3F8
	0x03BFD3E4 ADRP X0, 0xFFFFFFFFFCF05000
	0x03BFD3E8 ADD X0, X0, 0xC3C
	0x03BFD3EC BL 0x1C16CB8
	0x03BFD3F0 MOV X3, X0
	0x03BFD3F4 STR X0, [X22 + 0xB90]
	0x03BFD3F8 SCVTF S0, W21
	0x03BFD3FC AND W1, W20, 0x1
	0x03BFD400 MOV W0, W23
	0x03BFD404 MOV W2, W19
	0x03BFD408 LDP X20, X19, [X31 + 0x30]
	0x03BFD40C LDP X22, X21, [X31 + 0x20]
	0x03BFD410 LDP X30, X23, [X31 + 0x10]
	0x03BFD414 ADD X31, X31, 0x40
	0x03BFD418 BR X3

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7E7000
	007 Move W8, [X21+2754]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x523000
	015 Move X0, [X0+656]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2754], W8
	019 Move X22, 0x523000
	020 Add X20, X20, 24
	021 Move X21, [X20]
	022 Move X22, [X22+656]
	023 Move X0, X21
	024 Move X1, X19
	025 Move X2, X31
	026 Call Delegate.Combine, X0, X1
	027 Move X8, X0
	028 Compare X0, 0
	029 JumpIfEqual {33}
	030 Move X1, [X22]
	031 Move X9, [X8]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X20
	034 Move X1, X8
	035 Move X2, X21
	036 Call 0x1C25138
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X21, X0
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 
	045 Move X0, X8
	046 Call 0x1C181E0

Method: System.Void remove_m_PCMReaderCallback(UnityEngine.AudioClip/PCMReaderCallback value)

Disassembly:
	0x03BFD4B8 MOV X3, X31
	0x03BFD4BC BL 0x32274B8
	0x03BFD4C0 MOV X19, X0
	0x03BFD4C4 ADRP X0, 0x4FE000
	0x03BFD4C8 LDR X0, [X0 + 0x578]
	0x03BFD4CC BL 0x1C16D08
	0x03BFD4D0 BL 0x1C16F10
	0x03BFD4D4 MOV X1, X19
	0x03BFD4D8 MOV X2, X31
	0x03BFD4DC MOV X20, X0
	0x03BFD4E0 BL 0x3314A68
	0x03BFD4E4 ADRP X0, 0x561000
	0x03BFD4E8 LDR X0, [X0 + 0xA38]
	0x03BFD4EC BL 0x1C16D08
	0x03BFD4F0 MOV X1, X0
	0x03BFD4F4 MOV X0, X20
	0x03BFD4F8 BL 0x1C16DEC
	0x03BFD4FC STR X30, [X31 - 0x20]!
	0x03BFD500 STP X20, X19, [X31 + 0x10]
	0x03BFD504 ADRP X20, 0x7E6000
	0x03BFD508 LDR X8, [X20 + 0xB88]
	0x03BFD50C MOV X19, X0
	0x03BFD510 CBNZ X8, 0x3BFD528
	0x03BFD514 ADRP X0, 0xFFFFFFFFFCF09000
	0x03BFD518 ADD X0, X0, 0xD6B
	0x03BFD51C BL 0x1C16CB8
	0x03BFD520 MOV X8, X0
	0x03BFD524 STR X0, [X20 + 0xB88]
	0x03BFD528 MOV X0, X19
	0x03BFD52C BLR X8
	0x03BFD530 ADDS W31, W0, 0x1
	0x03BFD534 B.EQ 0x3BFD56C
	0x03BFD538 ADRP X20, 0x7E6000
	0x03BFD53C LDR X1, [X20 + 0xB98]
	0x03BFD540 MOV W19, W0
	0x03BFD544 CBNZ X1, 0x3BFD55C
	0x03BFD548 ADRP X0, 0xFFFFFFFFFCF17000
	0x03BFD54C ADD X0, X0, 0x51A
	0x03BFD550 BL 0x1C16CB8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7E7000
	007 Move W8, [X21+2755]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x523000
	015 Move X0, [X0+656]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2755], W8
	019 Move X22, 0x523000
	020 Add X20, X20, 24
	021 Move X21, [X20]
	022 Move X22, [X22+656]
	023 Move X0, X21
	024 Move X1, X19
	025 Move X2, X31
	026 Call Delegate.Remove, X0, X1
	027 Move X8, X0
	028 Compare X0, 0
	029 JumpIfEqual {33}
	030 Move X1, [X22]
	031 Move X9, [X8]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X20
	034 Move X1, X8
	035 Move X2, X21
	036 Call 0x1C25138
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X21, X0
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 
	045 Move X0, X8
	046 Call 0x1C181E0

Method: System.Void add_m_PCMSetPositionCallback(UnityEngine.AudioClip/PCMSetPositionCallback value)

Disassembly:
	0x03BFD41C ADRP X0, 0x561000
	0x03BFD420 LDR X0, [X0 + 0xA08]
	0x03BFD424 BL 0x1C16D08
	0x03BFD428 MOV X1, X22
	0x03BFD42C MOV X2, X31
	0x03BFD430 BL 0x321B938
	0x03BFD434 B 0x3BFD4C0
	0x03BFD438 ADD X0, X31, 0xC
	0x03BFD43C MOV X1, X31
	0x03BFD440 BL 0x337B6E0
	0x03BFD444 MOV X19, X0
	0x03BFD448 ADRP X0, 0x561000
	0x03BFD44C LDR X0, [X0 + 0xA10]
	0x03BFD450 B 0x3BFD46C
	0x03BFD454 ADD X0, X31, 0xC
	0x03BFD458 MOV X1, X31
	0x03BFD45C BL 0x337B6E0
	0x03BFD460 MOV X19, X0
	0x03BFD464 ADRP X0, 0x561000
	0x03BFD468 LDR X0, [X0 + 0xA18]
	0x03BFD46C BL 0x1C16D08
	0x03BFD470 MOV X20, X0
	0x03BFD474 ADRP X0, 0x561000
	0x03BFD478 LDR X0, [X0 + 0xA20]
	0x03BFD47C B 0x3BFD4A8
	0x03BFD480 ADD X0, X31, 0x8
	0x03BFD484 MOV X1, X31
	0x03BFD488 BL 0x337B6E0
	0x03BFD48C MOV X19, X0
	0x03BFD490 ADRP X0, 0x561000
	0x03BFD494 LDR X0, [X0 + 0xA28]
	0x03BFD498 BL 0x1C16D08
	0x03BFD49C MOV X20, X0
	0x03BFD4A0 ADRP X0, 0x561000
	0x03BFD4A4 LDR X0, [X0 + 0xA30]
	0x03BFD4A8 BL 0x1C16D08
	0x03BFD4AC MOV X2, X0
	0x03BFD4B0 MOV X0, X20
	0x03BFD4B4 MOV X1, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7E7000
	007 Move W8, [X21+2756]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x523000
	015 Move X0, [X0+664]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2756], W8
	019 Move X22, 0x523000
	020 Add X20, X20, 32
	021 Move X21, [X20]
	022 Move X22, [X22+664]
	023 Move X0, X21
	024 Move X1, X19
	025 Move X2, X31
	026 Call Delegate.Combine, X0, X1
	027 Move X8, X0
	028 Compare X0, 0
	029 JumpIfEqual {33}
	030 Move X1, [X22]
	031 Move X9, [X8]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X20
	034 Move X1, X8
	035 Move X2, X21
	036 Call 0x1C25138
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X21, X0
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 
	045 Move X0, X8
	046 Call 0x1C181E0

Method: System.Void remove_m_PCMSetPositionCallback(UnityEngine.AudioClip/PCMSetPositionCallback value)

Disassembly:
	0x03BFD554 MOV X1, X0
	0x03BFD558 STR X0, [X20 + 0xB98]
	0x03BFD55C MOV W0, W19
	0x03BFD560 LDP X20, X19, [X31 + 0x10]
	0x03BFD564 LDR X30, [X31], #0x20
	0x03BFD568 BR X1
	0x03BFD56C LDP X20, X19, [X31 + 0x10]
	0x03BFD570 LDR X30, [X31], #0x20
	0x03BFD574 RET
	0x03BFD578 STP X30, X19, [X31 - 0x10]!
	0x03BFD57C ADRP X19, 0x7E6000
	0x03BFD580 LDR X0, [X19 + 0xBB8]
	0x03BFD584 CBNZ X0, 0x3BFD598
	0x03BFD588 ADRP X0, 0xFFFFFFFFFCF19000
	0x03BFD58C ADD X0, X0, 0x1B8
	0x03BFD590 BL 0x1C16CB8
	0x03BFD594 STR X0, [X19 + 0xBB8]
	0x03BFD598 LDP X30, X19, [X31], #0x10
	0x03BFD59C BR X0
	0x03BFD5A0 STR X30, [X31 - 0x20]!
	0x03BFD5A4 STP X20, X19, [X31 + 0x10]
	0x03BFD5A8 ADRP X20, 0x7E6000
	0x03BFD5AC LDR X8, [X20 + 0xB88]
	0x03BFD5B0 MOV X19, X0
	0x03BFD5B4 CBNZ X8, 0x3BFD5CC
	0x03BFD5B8 ADRP X0, 0xFFFFFFFFFCF09000
	0x03BFD5BC ADD X0, X0, 0xD6B
	0x03BFD5C0 BL 0x1C16CB8
	0x03BFD5C4 MOV X8, X0
	0x03BFD5C8 STR X0, [X20 + 0xB88]
	0x03BFD5CC MOV X0, X19
	0x03BFD5D0 BLR X8
	0x03BFD5D4 ADDS W31, W0, 0x1
	0x03BFD5D8 B.EQ 0x3BFD610
	0x03BFD5DC ADRP X20, 0x7E6000
	0x03BFD5E0 LDR X1, [X20 + 0xBA0]
	0x03BFD5E4 MOV W19, W0
	0x03BFD5E8 CBNZ X1, 0x3BFD600
	0x03BFD5EC ADRP X0, 0xFFFFFFFFFCEF5000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7E7000
	007 Move W8, [X21+2757]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x523000
	015 Move X0, [X0+664]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2757], W8
	019 Move X22, 0x523000
	020 Add X20, X20, 32
	021 Move X21, [X20]
	022 Move X22, [X22+664]
	023 Move X0, X21
	024 Move X1, X19
	025 Move X2, X31
	026 Call Delegate.Remove, X0, X1
	027 Move X8, X0
	028 Compare X0, 0
	029 JumpIfEqual {33}
	030 Move X1, [X22]
	031 Move X9, [X8]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X20
	034 Move X1, X8
	035 Move X2, X21
	036 Call 0x1C25138
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X21, X0
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 
	045 Move X0, X8
	046 Call 0x1C181E0

Method: System.Void InvokePCMReaderCallback_Internal(System.Single[] data)

Disassembly:
	0x03BFD5F0 ADD X0, X0, 0xD87
	0x03BFD5F4 BL 0x1C16CB8
	0x03BFD5F8 MOV X1, X0
	0x03BFD5FC STR X0, [X20 + 0xBA0]
	0x03BFD600 MOV W0, W19
	0x03BFD604 LDP X20, X19, [X31 + 0x10]
	0x03BFD608 LDR X30, [X31], #0x20

ISIL:
	001 Move X8, [X0+24]
	002 Compare X8, 0
	003 JumpIfEqual {8}
	004 Move X3, [X8+24]
	005 Move X0, [X8+64]
	006 Move X2, [X8+40]
	007 CallNoReturn X3
	008 Return 

Method: System.Void InvokePCMSetPositionCallback_Internal(System.Int32 position)

Disassembly:
	0x03BFD60C BR X1
	0x03BFD610 LDP X20, X19, [X31 + 0x10]
	0x03BFD614 MOV W0, W31
	0x03BFD618 LDR X30, [X31], #0x20
	0x03BFD61C RET
	0x03BFD620 STR X30, [X31 - 0x20]!
	0x03BFD624 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X8, [X0+32]
	002 Compare X8, 0
	003 JumpIfEqual {8}
	004 Move X3, [X8+24]
	005 Move X0, [X8+64]
	006 Move X2, [X8+40]
	007 CallNoReturn X3
	008 Return 

