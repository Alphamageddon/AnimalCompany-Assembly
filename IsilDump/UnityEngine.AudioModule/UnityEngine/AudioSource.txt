Type: UnityEngine.AudioSource

Method: System.Void SetPitch(UnityEngine.AudioSource source, System.Single pitch)

Disassembly:
	0x03BFD778 LDR X0, [X9 + 0x40]
	0x03BFD77C LDR X3, [X9 + 0x28]
	0x03BFD780 MOV W2, W1
	0x03BFD784 MOV X1, X8
	0x03BFD788 BR X4
	0x03BFD78C RET
	0x03BFD790 STR X30, [X31 - 0x30]!
	0x03BFD794 STP X22, X21, [X31 + 0x10]
	0x03BFD798 STP X20, X19, [X31 + 0x20]
	0x03BFD79C LDR X8, [X2 + 0x8]
	0x03BFD7A0 STP X1, X2, [X0 + 0x20]
	0x03BFD7A4 MOV X19, X0
	0x03BFD7A8 MOV X20, X2
	0x03BFD7AC STR X8, [X0 + 0x10]
	0x03BFD7B0 LDRB W22, [X2 + 0x52]
	0x03BFD7B4 STR X0, [X0 + 0x40]
	0x03BFD7B8 MOV X0, X2
	0x03BFD7BC MOV X21, X1
	0x03BFD7C0 BL 0x1C16D84

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7E7000
	006 Move X1, [X20+2760]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51273728
	012 Add X0, X0, 367
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+2760], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void PlayHelper(UnityEngine.AudioSource source, System.UInt64 delay)

Disassembly:
	0x03BFD7C4 TBZ X0, 0x0, 0x3BFD7DC
	0x03BFD7C8 CMP W22, 0x2
	0x03BFD7CC B.NE 0x3BFD818
	0x03BFD7D0 ADRP X8, 0xFFFFFFFFFE006000
	0x03BFD7D4 ADD X8, X8, 0x904
	0x03BFD7D8 B 0x3BFD85C
	0x03BFD7DC CMP W22, 0x1
	0x03BFD7E0 B.NE 0x3BFD814
	0x03BFD7E4 LDRB W8, [X19 + 0x70]
	0x03BFD7E8 CBZ W8, 0x3BFD82C
	0x03BFD7EC MOV X0, X20
	0x03BFD7F0 BL 0x1C16D7C
	0x03BFD7F4 MOV W21, W0
	0x03BFD7F8 MOV X0, X20
	0x03BFD7FC BL 0x1C17238
	0x03BFD800 TBZ X21, 0x0, 0x3BFD838
	0x03BFD804 TBZ X0, 0x0, 0x3BFD848

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7E7000
	006 Move X2, [X21+2768]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51372032
	012 Add X0, X0, 2767
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2768], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void PlayOneShotHelper(UnityEngine.AudioSource source, UnityEngine.AudioClip clip, System.Single volumeScale)

Disassembly:
	0x03BFD808 ADRP X8, 0xFFFFFFFFFE006000
	0x03BFD80C ADD X8, X8, 0xA20
	0x03BFD810 B 0x3BFD85C
	0x03BFD814 CBZ X21, 0x3BFD87C
	0x03BFD818 LDR X8, [X19 + 0x10]
	0x03BFD81C LDR X9, [X19 + 0x20]
	0x03BFD820 STR X8, [X19 + 0x18]
	0x03BFD824 STR X9, [X19 + 0x40]
	0x03BFD828 B 0x3BFD860
	0x03BFD82C ADRP X8, 0xFFFFFFFFFE006000
	0x03BFD830 ADD X8, X8, 0x8E0
	0x03BFD834 B 0x3BFD85C
	0x03BFD838 TBZ X0, 0x0, 0x3BFD854
	0x03BFD83C ADRP X8, 0xFFFFFFFFFE006000
	0x03BFD840 ADD X8, X8, 0x948
	0x03BFD844 B 0x3BFD85C
	0x03BFD848 ADRP X8, 0xFFFFFFFFFE006000
	0x03BFD84C ADD X8, X8, 0x9D4
	0x03BFD850 B 0x3BFD85C
	0x03BFD854 ADRP X8, 0xFFFFFFFFFE006000
	0x03BFD858 ADD X8, X8, 0x918

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7E7000
	007 Move X2, [X21+2776]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Compare X2, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51290112
	014 Add X0, X0, 2165
	015 Call 0x1C17CB8
	016 Move X2, X0
	017 Move [X21+2776], X0
	018 Move X0, X20
	019 Move X1, X19
	020 Move X20, [X31+32]
	021 Move X19, [X31+40]
	022 Move X30, [X31+16]
	023 Move X21, [X31+24]
	024 Move V0, V8
	025 Move V8, [X31+48]
	026 CallNoReturn X2

Method: System.Void Stop(System.Boolean stopOneShots)

Disassembly:
	0x03BFD85C STR X8, [X19 + 0x18]
	0x03BFD860 ADRP X8, 0xFFFFFFFFFE006000
	0x03BFD864 ADD X8, X8, 0x888
	0x03BFD868 STR X8, [X19 + 0x38]
	0x03BFD86C LDP X20, X19, [X31 + 0x20]
	0x03BFD870 LDP X22, X21, [X31 + 0x10]
	0x03BFD874 LDR X30, [X31], #0x30
	0x03BFD878 RET
	0x03BFD87C ADRP X1, 0xFFFFFFFFFCF1E000
	0x03BFD880 ADD X1, X1, 0xEE3
	0x03BFD884 MOV X0, X31
	0x03BFD888 BL 0x1C16F3C
	0x03BFD88C MOV X1, X31
	0x03BFD890 BL 0x1C16DEC
	0x03BFD894 LDR X8, [X0 + 0x40]
	0x03BFD898 LDR X4, [X0 + 0x18]
	0x03BFD89C LDR X3, [X0 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7E7000
	006 Move X2, [X21+2784]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51240960
	012 Add X0, X0, 1764
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2784], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Single get_volume()

Disassembly:
	0x03BFD8A0 MOV X0, X8
	0x03BFD8A4 BR X4
	0x03BFD8A8 LDP X8, X1, [X0]
	0x03BFD8AC MOV X0, X8
	0x03BFD8B0 RET
	0x03BFD8B4 STP X30, X23, [X31 - 0x30]!
	0x03BFD8B8 STP X22, X21, [X31 + 0x10]
	0x03BFD8BC STP X20, X19, [X31 + 0x20]
	0x03BFD8C0 ADRP X23, 0x7E6000
	0x03BFD8C4 ADRP X22, 0x51F000
	0x03BFD8C8 LDRB W8, [X23 + 0xBC0]
	0x03BFD8CC LDR X22, [X22 + 0x230]
	0x03BFD8D0 MOV X19, X2
	0x03BFD8D4 MOV X20, X1
	0x03BFD8D8 MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E7000
	005 Move X1, [X20+2792]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51257344
	010 Add X0, X0, 1811
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2792], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_volume(System.Single value)

Disassembly:
	0x03BFD8DC TBNZ X8, 0x0, 0x3BFD8F4
	0x03BFD8E0 ADRP X0, 0x51F000
	0x03BFD8E4 LDR X0, [X0 + 0x230]
	0x03BFD8E8 BL 0x1C16CF4
	0x03BFD8EC MOVZ W8, 0x1
	0x03BFD8F0 STRB W8, [X23 + 0xBC0]
	0x03BFD8F4 LDR X0, [X22]
	0x03BFD8F8 LDP X22, X21, [X21]
	0x03BFD8FC LDR W8, [X0 + 0xE0]
	0x03BFD900 CBNZ W8, 0x3BFD908
	0x03BFD904 BL 0x1C16DFC
	0x03BFD908 MOV X0, X22
	0x03BFD90C MOV X1, X21
	0x03BFD910 MOV X2, X20
	0x03BFD914 MOV X3, X19
	0x03BFD918 LDP X20, X19, [X31 + 0x20]
	0x03BFD91C LDP X22, X21, [X31 + 0x10]
	0x03BFD920 MOV X4, X31
	0x03BFD924 LDP X30, X23, [X31], #0x30

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7E7000
	006 Move X1, [X20+2800]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51208192
	012 Add X0, X0, 2518
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+2800], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void set_pitch(System.Single value)

Disassembly:
	0x03BFD928 B 0x3C5DA90
	0x03BFD92C STP X30, X21, [X31 - 0x20]!
	0x03BFD930 STP X20, X19, [X31 + 0x10]
	0x03BFD934 ADRP X20, 0x7E6000
	0x03BFD938 ADRP X21, 0x4F6000
	0x03BFD93C LDRB W8, [X20 + 0xBC1]
	0x03BFD940 LDR X21, [X21 + 0x598]
	0x03BFD944 MOV X19, X0
	0x03BFD948 TBNZ X8, 0x0, 0x3BFD960
	0x03BFD94C ADRP X0, 0x4F6000
	0x03BFD950 LDR X0, [X0 + 0x598]
	0x03BFD954 BL 0x1C16CF4
	0x03BFD958 MOVZ W8, 0x1
	0x03BFD95C STRB W8, [X20 + 0xBC1]
	0x03BFD960 LDR X0, [X21]
	0x03BFD964 LDR W8, [X0 + 0xE0]
	0x03BFD968 CBNZ W8, 0x3BFD970
	0x03BFD96C BL 0x1C16DFC
	0x03BFD970 MOV X0, X19

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7E7000
	006 Move X1, [X20+2760]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51273728
	012 Add X0, X0, 367
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+2760], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void set_time(System.Single value)

Disassembly:
	0x03BFD974 LDP X20, X19, [X31 + 0x10]
	0x03BFD978 MOV X1, X31
	0x03BFD97C LDP X30, X21, [X31], #0x20
	0x03BFD980 B 0x3C33594
	0x03BFD984 STP X30, X21, [X31 - 0x20]!
	0x03BFD988 STP X20, X19, [X31 + 0x10]
	0x03BFD98C ADRP X21, 0x7E6000
	0x03BFD990 LDR X2, [X21 + 0xBC8]
	0x03BFD994 MOV X19, X1
	0x03BFD998 MOV X20, X0
	0x03BFD99C CBNZ X2, 0x3BFD9B4
	0x03BFD9A0 ADRP X0, 0xFFFFFFFFFCEFF000
	0x03BFD9A4 ADD X0, X0, 0xF51
	0x03BFD9A8 BL 0x1C16CB8
	0x03BFD9AC MOV X2, X0
	0x03BFD9B0 STR X0, [X21 + 0xBC8]
	0x03BFD9B4 MOV X0, X20
	0x03BFD9B8 MOV X1, X19
	0x03BFD9BC LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7E7000
	006 Move X1, [X20+2808]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51380224
	012 Add X0, X0, 3872
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+2808], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Int32 get_timeSamples()

Disassembly:
	0x03BFD9C0 LDP X30, X21, [X31], #0x20
	0x03BFD9C4 BR X2
	0x03BFD9C8 STR D8, [X31 - 0x30]!
	0x03BFD9CC STP X30, X21, [X31 + 0x10]
	0x03BFD9D0 STP X20, X19, [X31 + 0x20]
	0x03BFD9D4 ADRP X21, 0x7E6000
	0x03BFD9D8 LDR X2, [X21 + 0xBD0]
	0x03BFD9DC MOV V8.16B, V0.16B
	0x03BFD9E0 MOV X19, X1
	0x03BFD9E4 MOV X20, X0
	0x03BFD9E8 CBNZ X2, 0x3BFDA00
	0x03BFD9EC ADRP X0, 0xFFFFFFFFFCF0B000
	0x03BFD9F0 ADD X0, X0, 0xAFF
	0x03BFD9F4 BL 0x1C16CB8
	0x03BFD9F8 MOV X2, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E7000
	005 Move X1, [X20+2816]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51265536
	010 Add X0, X0, 1325
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2816], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.AudioClip get_clip()

Disassembly:
	0x03BFD9FC STR X0, [X21 + 0xBD0]
	0x03BFDA00 MOV X0, X20
	0x03BFDA04 MOV X1, X19
	0x03BFDA08 LDP X20, X19, [X31 + 0x20]
	0x03BFDA0C LDP X30, X21, [X31 + 0x10]
	0x03BFDA10 MOV V0.16B, V8.16B
	0x03BFDA14 LDR V8, [X31], #0x30
	0x03BFDA18 BR X2
	0x03BFDA1C STP X30, X21, [X31 - 0x20]!
	0x03BFDA20 STP X20, X19, [X31 + 0x10]
	0x03BFDA24 ADRP X20, 0x7E6000
	0x03BFDA28 ADRP X21, 0x4F6000
	0x03BFDA2C LDRB W8, [X20 + 0xBD8]
	0x03BFDA30 LDR X21, [X21 + 0x598]
	0x03BFDA34 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E7000
	005 Move X1, [X20+2824]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51281920
	010 Add X0, X0, 1270
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2824], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_clip(UnityEngine.AudioClip value)

Disassembly:
	0x03BFDA38 TBNZ X8, 0x0, 0x3BFDA50
	0x03BFDA3C ADRP X0, 0x4F6000
	0x03BFDA40 LDR X0, [X0 + 0x598]
	0x03BFDA44 BL 0x1C16CF4
	0x03BFDA48 MOVZ W8, 0x1
	0x03BFDA4C STRB W8, [X20 + 0xBD8]
	0x03BFDA50 LDR X0, [X21]
	0x03BFDA54 LDR W8, [X0 + 0xE0]
	0x03BFDA58 CBNZ W8, 0x3BFDA60
	0x03BFDA5C BL 0x1C16DFC
	0x03BFDA60 MOV X0, X19
	0x03BFDA64 LDP X20, X19, [X31 + 0x10]
	0x03BFDA68 MOV X1, X31
	0x03BFDA6C LDP X30, X21, [X31], #0x20
	0x03BFDA70 B 0x3C33594
	0x03BFDA74 STR X30, [X31 - 0x20]!
	0x03BFDA78 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7E7000
	006 Move X2, [X21+2832]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51363840
	012 Add X0, X0, 2656
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2832], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_outputAudioMixerGroup(UnityEngine.Audio.AudioMixerGroup value)

Disassembly:
	0x03BFDA7C ADRP X20, 0x7E6000
	0x03BFDA80 LDR X1, [X20 + 0xBE0]
	0x03BFDA84 MOV X19, X0
	0x03BFDA88 CBNZ X1, 0x3BFDAA0
	0x03BFDA8C ADRP X0, 0xFFFFFFFFFCF27000
	0x03BFDA90 ADD X0, X0, 0x8F3
	0x03BFDA94 BL 0x1C16CB8
	0x03BFDA98 MOV X1, X0
	0x03BFDA9C STR X0, [X20 + 0xBE0]
	0x03BFDAA0 MOV X0, X19
	0x03BFDAA4 LDP X20, X19, [X31 + 0x10]
	0x03BFDAA8 LDR X30, [X31], #0x20
	0x03BFDAAC BR X1
	0x03BFDAB0 LDP X8, X1, [X0]
	0x03BFDAB4 MOV X0, X8
	0x03BFDAB8 RET
	0x03BFDABC STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7E7000
	006 Move X2, [X21+2840]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51421184
	012 Add X0, X0, 3336
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2840], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void Play()

Disassembly:
	0x03BFDAC0 STP X22, X21, [X31 + 0x10]
	0x03BFDAC4 STP X20, X19, [X31 + 0x20]
	0x03BFDAC8 ADRP X23, 0x7E6000
	0x03BFDACC ADRP X22, 0x51F000
	0x03BFDAD0 LDRB W8, [X23 + 0xBE8]
	0x03BFDAD4 LDR X22, [X22 + 0x230]
	0x03BFDAD8 MOV X19, X2
	0x03BFDADC MOV X20, X1
	0x03BFDAE0 MOV X21, X0
	0x03BFDAE4 TBNZ X8, 0x0, 0x3BFDAFC
	0x03BFDAE8 ADRP X0, 0x51F000
	0x03BFDAEC LDR X0, [X0 + 0x230]
	0x03BFDAF0 BL 0x1C16CF4
	0x03BFDAF4 MOVZ W8, 0x1
	0x03BFDAF8 STRB W8, [X23 + 0xBE8]
	0x03BFDAFC LDR X0, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E7000
	005 Move X2, [X20+2768]
	006 Move X19, X0
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51372032
	010 Add X0, X0, 2767
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+2768], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X1, X31
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Void PlayOneShot(UnityEngine.AudioClip clip)

Disassembly:
	0x03BFDB00 LDP X22, X21, [X21]
	0x03BFDB04 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move S0, 1

Method: System.Void PlayOneShot(UnityEngine.AudioClip clip, System.Single volumeScale)

Disassembly:
	0x03BFDB08 CBNZ W8, 0x3BFDB10
	0x03BFDB0C BL 0x1C16DFC
	0x03BFDB10 MOV X0, X22
	0x03BFDB14 MOV X1, X21
	0x03BFDB18 MOV X2, X20
	0x03BFDB1C MOV X3, X19
	0x03BFDB20 LDP X20, X19, [X31 + 0x20]
	0x03BFDB24 LDP X22, X21, [X31 + 0x10]
	0x03BFDB28 MOV X4, X31
	0x03BFDB2C LDP X30, X23, [X31], #0x30
	0x03BFDB30 B 0x3C5DA90
	0x03BFDB34 LDP X8, X1, [X0]
	0x03BFDB38 MOV X0, X8
	0x03BFDB3C RET
	0x03BFDB40 MOV X1, X31
	0x03BFDB44 B 0x33A51F0
	0x03BFDB48 MOV X1, X31
	0x03BFDB4C B 0x33A51F0
	0x03BFDB50 MOV X1, X31
	0x03BFDB54 B 0x33A51F0
	0x03BFDB58 STR X30, [X31 - 0x20]!
	0x03BFDB5C STP X20, X19, [X31 + 0x10]
	0x03BFDB60 ADRP X20, 0x7E6000
	0x03BFDB64 ADRP X19, 0x561000
	0x03BFDB68 LDRB W8, [X20 + 0xBEB]
	0x03BFDB6C LDR X19, [X19 + 0xA40]
	0x03BFDB70 TBNZ X8, 0x0, 0x3BFDB88
	0x03BFDB74 ADRP X0, 0x561000
	0x03BFDB78 LDR X0, [X0 + 0xA40]
	0x03BFDB7C BL 0x1C16CF4
	0x03BFDB80 MOVZ W8, 0x1
	0x03BFDB84 STRB W8, [X20 + 0xBEB]
	0x03BFDB88 BL 0x1C16D44
	0x03BFDB8C LDR X8, [X19]
	0x03BFDB90 MOVZ W9, 0x800000
	0x03BFDB94 LDR X8, [X8 + 0xB8]
	0x03BFDB98 STR W9, [X8]
	0x03BFDB9C BL 0x1C16D44
	0x03BFDBA0 LDR X8, [X19]
	0x03BFDBA4 MOVZ W20, 0x1
	0x03BFDBA8 LDR X8, [X8 + 0xB8]
	0x03BFDBAC STR W20, [X8 + 0x4]
	0x03BFDBB0 BL 0x1C16D44
	0x03BFDBB4 LDR X8, [X19]
	0x03BFDBB8 FMOV S1, W31
	0x03BFDBBC FMOV S0, W20
	0x03BFDBC0 MOV X1, X31
	0x03BFDBC4 LDR X8, [X8 + 0xB8]
	0x03BFDBC8 ADD X0, X8, 0x4
	0x03BFDBCC BL 0x33EB144
	0x03BFDBD0 LDR X8, [X19]
	0x03BFDBD4 LDP X20, X19, [X31 + 0x10]
	0x03BFDBD8 FCMP S0, 0x0
	0x03BFDBDC CSET W9, EQ
	0x03BFDBE0 LDR X8, [X8 + 0xB8]
	0x03BFDBE4 STRB W9, [X8 + 0x8]
	0x03BFDBE8 LDR X30, [X31], #0x20
	0x03BFDBEC RET
	0x03BFDBF0 SUB X31, X31, 0x50
	0x03BFDBF4 STR X30, [X31 + 0x20]
	0x03BFDBF8 STP X22, X21, [X31 + 0x30]
	0x03BFDBFC STP X20, X19, [X31 + 0x40]
	0x03BFDC00 ADRP X21, 0x7E6000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x7E7000
	008 Move X22, 0x4F7000
	009 Move W8, [X21+2848]
	010 Move X22, [X22+1432]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x4F7000
	019 Move X0, [X0+2600]
	020 Call 0x1C17CF4
	021 Move X0, 0x4F7000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move X0, 0x562000
	025 Move X0, [X0+2536]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+2848], W8
	029 Move X0, [X22]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {61}
	042 Move X8, 0x4F7000
	043 Move X8, [X8+2600]
	044 Move X19, 0x562000
	045 Move X0, [X8]
	046 Move W8, [X0+224]
	047 Move X19, [X19+2536]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, [X19]
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+8]
	057 Move X1, X31
	058 Move V8, [X31+48]
	059 Call Debug.LogWarning, X0
	060 Return 
	061 Move X21, 0x7E7000
	062 Move X2, [X21+2776]
	063 Compare X2, 0
	064 JumpIfNotEqual {70}
	065 Move X0, -51290112
	066 Add X0, X0, 2165
	067 Call 0x1C17CB8
	068 Move X2, X0
	069 Move [X21+2776], X0
	070 Move X0, X20
	071 Move X1, X19
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X30, [X31+8]
	077 Move V0, V8
	078 Move V8, [X31+48]
	079 CallNoReturn X2

Method: System.Void Stop()

Disassembly:
	0x03BFDC04 ADRP X22, 0x561000
	0x03BFDC08 LDRB W8, [X21 + 0xBEC]
	0x03BFDC0C LDR X22, [X22 + 0xA48]
	0x03BFDC10 MOV W20, W1
	0x03BFDC14 MOV X19, X0
	0x03BFDC18 TBNZ X8, 0x0, 0x3BFDC30
	0x03BFDC1C ADRP X0, 0x561000
	0x03BFDC20 LDR X0, [X0 + 0xA48]
	0x03BFDC24 BL 0x1C16CF4
	0x03BFDC28 MOVZ W8, 0x1
	0x03BFDC2C STRB W8, [X21 + 0xBEC]
	0x03BFDC30 LDR X8, [X22]
	0x03BFDC34 MOVN X9, 0x0
	0x03BFDC38 ADD X0, X31, 0x8
	0x03BFDC3C MOV X1, X31
	0x03BFDC40 STP X8, X9, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E7000
	005 Move X2, [X20+2784]
	006 Move X19, X0
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51240960
	010 Add X0, X0, 1764
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+2784], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, 1
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Void Pause()

Disassembly:
	0x03BFDC44 STR W20, [X31 + 0x18]
	0x03BFDC48 BL 0x33B162C
	0x03BFDC4C MOV X20, X0
	0x03BFDC50 MOV X0, X19
	0x03BFDC54 MOV X1, X31
	0x03BFDC58 BL 0x33A51F0
	0x03BFDC5C STR X20, [X19 + 0x10]
	0x03BFDC60 LDP X20, X19, [X31 + 0x40]
	0x03BFDC64 LDP X22, X21, [X31 + 0x30]
	0x03BFDC68 LDR X30, [X31 + 0x20]
	0x03BFDC6C ADD X31, X31, 0x50
	0x03BFDC70 RET
	0x03BFDC74 STR X30, [X31 - 0x20]!
	0x03BFDC78 STP X20, X19, [X31 + 0x10]
	0x03BFDC7C MOV X19, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E7000
	005 Move X1, [X20+2856]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51363840
	010 Add X0, X0, 2713
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2856], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean get_isPlaying()

Disassembly:
	0x03BFDC80 MOV X1, X31
	0x03BFDC84 MOV X20, X0
	0x03BFDC88 BL 0x33A51F0
	0x03BFDC8C STR X19, [X20 + 0x10]
	0x03BFDC90 LDP X20, X19, [X31 + 0x10]
	0x03BFDC94 LDR X30, [X31], #0x20
	0x03BFDC98 RET
	0x03BFDC9C LDR X0, [X0 + 0x10]
	0x03BFDCA0 RET
	0x03BFDCA4 MOV X1, X31
	0x03BFDCA8 B 0x3356984
	0x03BFDCAC STR X30, [X31 - 0x20]!
	0x03BFDCB0 STP X20, X19, [X31 + 0x10]
	0x03BFDCB4 LDR X8, [X0]
	0x03BFDCB8 CBZ X8, 0x3BFDCF0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E7000
	005 Move X1, [X20+2864]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51421184
	010 Add X0, X0, 3422
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2864], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void PlayClipAtPoint(UnityEngine.AudioClip clip, UnityEngine.Vector3 position, System.Single volume)

Disassembly:
	0x03BFDCBC ADRP X20, 0x7E6000
	0x03BFDCC0 LDR X1, [X20 + 0xBF8]
	0x03BFDCC4 MOV X19, X0
	0x03BFDCC8 CBNZ X1, 0x3BFDCE0
	0x03BFDCCC ADRP X0, 0xFFFFFFFFFCF2F000
	0x03BFDCD0 ADD X0, X0, 0x44E
	0x03BFDCD4 BL 0x1C16CB8
	0x03BFDCD8 MOV X1, X0
	0x03BFDCDC STR X0, [X20 + 0xBF8]
	0x03BFDCE0 MOV X0, X19
	0x03BFDCE4 LDP X20, X19, [X31 + 0x10]
	0x03BFDCE8 LDR X30, [X31], #0x20
	0x03BFDCEC BR X1
	0x03BFDCF0 LDP X20, X19, [X31 + 0x10]
	0x03BFDCF4 LDR X30, [X31], #0x20
	0x03BFDCF8 RET
	0x03BFDCFC STR X30, [X31 - 0x20]!
	0x03BFDD00 STP X20, X19, [X31 + 0x10]
	0x03BFDD04 ADRP X20, 0x7E6000
	0x03BFDD08 LDR X1, [X20 + 0xBF8]
	0x03BFDD0C MOV X19, X0
	0x03BFDD10 CBNZ X1, 0x3BFDD28
	0x03BFDD14 ADRP X0, 0xFFFFFFFFFCF2F000
	0x03BFDD18 ADD X0, X0, 0x44E
	0x03BFDD1C BL 0x1C16CB8
	0x03BFDD20 MOV X1, X0
	0x03BFDD24 STR X0, [X20 + 0xBF8]
	0x03BFDD28 MOV X0, X19
	0x03BFDD2C LDP X20, X19, [X31 + 0x10]
	0x03BFDD30 LDR X30, [X31], #0x20
	0x03BFDD34 BR X1
	0x03BFDD38 STR X30, [X31 - 0x20]!
	0x03BFDD3C STP X20, X19, [X31 + 0x10]
	0x03BFDD40 ADRP X20, 0x7E6000
	0x03BFDD44 LDR X1, [X20 + 0xC00]
	0x03BFDD48 MOV X19, X0
	0x03BFDD4C CBNZ X1, 0x3BFDD64
	0x03BFDD50 ADRP X0, 0xFFFFFFFFFCF1F000
	0x03BFDD54 ADD X0, X0, 0x9ED
	0x03BFDD58 BL 0x1C16CB8
	0x03BFDD5C MOV X1, X0
	0x03BFDD60 STR X0, [X20 + 0xC00]
	0x03BFDD64 MOV X0, X19
	0x03BFDD68 LDP X20, X19, [X31 + 0x10]
	0x03BFDD6C LDR X30, [X31], #0x20
	0x03BFDD70 BR X1
	0x03BFDD74 STR X30, [X31 - 0x20]!
	0x03BFDD78 STP X20, X19, [X31 + 0x10]
	0x03BFDD7C ADRP X20, 0x7E6000
	0x03BFDD80 LDR X1, [X20 + 0xC00]
	0x03BFDD84 MOV X19, X0
	0x03BFDD88 CBNZ X1, 0x3BFDDA0
	0x03BFDD8C ADRP X0, 0xFFFFFFFFFCF1F000
	0x03BFDD90 ADD X0, X0, 0x9ED
	0x03BFDD94 BL 0x1C16CB8
	0x03BFDD98 MOV X1, X0
	0x03BFDD9C STR X0, [X20 + 0xC00]
	0x03BFDDA0 MOV X0, X19
	0x03BFDDA4 LDP X20, X19, [X31 + 0x10]
	0x03BFDDA8 LDR X30, [X31], #0x20
	0x03BFDDAC BR X1
	0x03BFDDB0 STP X30, X19, [X31 - 0x10]!
	0x03BFDDB4 ADRP X19, 0x7E6000
	0x03BFDDB8 LDR X0, [X19 + 0xBF0]
	0x03BFDDBC CBNZ X0, 0x3BFDDD0
	0x03BFDDC0 ADRP X0, 0xFFFFFFFFFCEF3000
	0x03BFDDC4 ADD X0, X0, 0xAE7
	0x03BFDDC8 BL 0x1C16CB8
	0x03BFDDCC STR X0, [X19 + 0xBF0]
	0x03BFDDD0 LDP X30, X19, [X31], #0x10
	0x03BFDDD4 BR X0
	0x03BFDDD8 SUB X31, X31, 0x30
	0x03BFDDDC STP X1, X30, [X31 + 0x18]
	0x03BFDDE0 STP X3, X0, [X31 + 0x8]
	0x03BFDDE4 ADD X0, X31, 0x10
	0x03BFDDE8 ADD X1, X31, 0x0
	0x03BFDDEC STR X2, [X31]
	0x03BFDDF0 BL 0x3BFDE00
	0x03BFDDF4 LDR X30, [X31 + 0x20]
	0x03BFDDF8 ADD X31, X31, 0x30
	0x03BFDDFC RET
	0x03BFDE00 SUB X31, X31, 0x30
	0x03BFDE04 STP X30, X21, [X31 + 0x10]
	0x03BFDE08 STP X20, X19, [X31 + 0x20]
	0x03BFDE0C ADRP X21, 0x7E6000
	0x03BFDE10 LDR X8, [X21 + 0xC10]
	0x03BFDE14 MOV X19, X1
	0x03BFDE18 MOV X20, X0
	0x03BFDE1C STP X31, X31, [X31]
	0x03BFDE20 CBNZ X8, 0x3BFDE38
	0x03BFDE24 ADRP X0, 0xFFFFFFFFFCF13000
	0x03BFDE28 ADD X0, X0, 0xC2D
	0x03BFDE2C BL 0x1C16CB8
	0x03BFDE30 MOV X8, X0
	0x03BFDE34 STR X0, [X21 + 0xC10]
	0x03BFDE38 ADD X2, X31, 0x0
	0x03BFDE3C MOV X0, X20
	0x03BFDE40 MOV X1, X19
	0x03BFDE44 BLR X8
	0x03BFDE48 LDP X0, X1, [X31]
	0x03BFDE4C LDP X20, X19, [X31 + 0x20]
	0x03BFDE50 LDP X30, X21, [X31 + 0x10]
	0x03BFDE54 ADD X31, X31, 0x30
	0x03BFDE58 RET
	0x03BFDE5C STR X30, [X31 - 0x30]!
	0x03BFDE60 STP X22, X21, [X31 + 0x10]
	0x03BFDE64 STP X20, X19, [X31 + 0x20]
	0x03BFDE68 ADRP X22, 0x7E6000
	0x03BFDE6C ADRP X21, 0x561000
	0x03BFDE70 LDRB W8, [X22 + 0xC08]
	0x03BFDE74 LDR X21, [X21 + 0xA50]
	0x03BFDE78 MOV X19, X1
	0x03BFDE7C MOV X20, X0
	0x03BFDE80 TBNZ X8, 0x0, 0x3BFDE98
	0x03BFDE84 ADRP X0, 0x561000
	0x03BFDE88 LDR X0, [X0 + 0xA50]
	0x03BFDE8C BL 0x1C16CF4
	0x03BFDE90 MOVZ W8, 0x1
	0x03BFDE94 STRB W8, [X22 + 0xC08]
	0x03BFDE98 LDR X2, [X21]
	0x03BFDE9C MOV X0, X20
	0x03BFDEA0 MOV X1, X19
	0x03BFDEA4 BL 0x22226C0
	0x03BFDEA8 MOV W1, W19
	0x03BFDEAC LDP X20, X19, [X31 + 0x20]
	0x03BFDEB0 LDP X22, X21, [X31 + 0x10]
	0x03BFDEB4 LDR X30, [X31], #0x30
	0x03BFDEB8 B 0x3BFDEBC
	0x03BFDEBC SUB X31, X31, 0x30
	0x03BFDEC0 STP X30, X21, [X31 + 0x10]
	0x03BFDEC4 STP X20, X19, [X31 + 0x20]
	0x03BFDEC8 ADRP X21, 0x7E6000
	0x03BFDECC LDR X8, [X21 + 0xC18]
	0x03BFDED0 MOV W19, W1
	0x03BFDED4 MOV X20, X0
	0x03BFDED8 STP X31, X31, [X31]
	0x03BFDEDC CBNZ X8, 0x3BFDEF4
	0x03BFDEE0 ADRP X0, 0xFFFFFFFFFCF0F000
	0x03BFDEE4 ADD X0, X0, 0xB06
	0x03BFDEE8 BL 0x1C16CB8
	0x03BFDEEC MOV X8, X0
	0x03BFDEF0 STR X0, [X21 + 0xC18]
	0x03BFDEF4 ADD X2, X31, 0x0
	0x03BFDEF8 MOV X0, X20
	0x03BFDEFC MOV W1, W19
	0x03BFDF00 BLR X8
	0x03BFDF04 LDP X0, X1, [X31]
	0x03BFDF08 LDP X20, X19, [X31 + 0x20]
	0x03BFDF0C LDP X30, X21, [X31 + 0x10]
	0x03BFDF10 ADD X31, X31, 0x30
	0x03BFDF14 RET
	0x03BFDF18 SUB X31, X31, 0x40
	0x03BFDF1C STP X30, X23, [X31 + 0x10]
	0x03BFDF20 STP X22, X21, [X31 + 0x20]
	0x03BFDF24 STP X20, X19, [X31 + 0x30]
	0x03BFDF28 ADRP X22, 0x7E6000
	0x03BFDF2C STP X0, X1, [X31]
	0x03BFDF30 ADRP X23, 0x561000
	0x03BFDF34 ADRP X21, 0x561000
	0x03BFDF38 LDRB W8, [X22 + 0xC09]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x7E7000
	011 Move X22, 0x4F7000
	012 Move X20, 0x562000
	013 Move W8, [X21+2872]
	014 Move X22, [X22+2648]
	015 Move X20, [X20+2544]
	016 Move V8, V3
	017 Move V9, V2
	018 Move V10, V1
	019 Move V11, V0
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {45}
	025 Move X0, 0x562000
	026 Move X0, [X0+2552]
	027 Call 0x1C17CF4
	028 Move X0, 0x562000
	029 Move X0, [X0+2560]
	030 Call 0x1C17CF4
	031 Move X0, 0x4F7000
	032 Move X0, [X0+2648]
	033 Call 0x1C17CF4
	034 Move X0, 0x4F7000
	035 Move X0, [X0+1432]
	036 Call 0x1C17CF4
	037 Move X0, 0x4F7000
	038 Move X0, [X0+1728]
	039 Call 0x1C17CF4
	040 Move X0, 0x562000
	041 Move X0, [X0+2544]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X21+2872], W8
	045 Move X0, [X22]
	046 Call 0x1C17F10
	047 Move X1, [X20]
	048 Move X2, X31
	049 Move X20, X0
	050 Call GameObject..ctor, X0, X1
	051 Compare X20, 0
	052 JumpIfEqual {179}
	053 Move X0, X20
	054 Move X1, X31
	055 Call GameObject.get_transform, X0
	056 Compare X0, 0
	057 JumpIfEqual {179}
	058 Move X21, 0x562000
	059 Move X22, 0x4F7000
	060 Move X21, [X21+2552]
	061 Move X22, [X22+1728]
	062 Move V0, V11
	063 Move V1, V10
	064 Move V2, V9
	065 Move X1, X31
	066 Call Transform.set_position, X0, X1
	067 Move X0, [X22]
	068 Move X21, [X21]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Move X0, X21
	074 Move X1, X31
	075 Call Type.GetTypeFromHandle, X0
	076 Move X1, X0
	077 Move X0, X20
	078 Move X2, X31
	079 Call GameObject.AddComponent, X0, X1
	080 Compare X0, 0
	081 JumpIfEqual {179}
	082 Move X8, 0x562000
	083 Move X8, [X8+2560]
	084 Move X21, X0
	085 Move X1, [X8]
	086 Move X8, [X0]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X22, 0x7E7000
	089 Move X8, [X22+2832]
	090 Compare X8, 0
	091 JumpIfNotEqual {97}
	092 Move X0, -51363840
	093 Add X0, X0, 2656
	094 Call 0x1C17CB8
	095 Move X8, X0
	096 Move [X22+2832], X0
	097 Move X0, X21
	098 Move X1, X19
	099 NotImplemented "Instruction BLR not yet implemented."
	100 Move X22, 0x7E7000
	101 Move X8, [X22+2896]
	102 Compare X8, 0
	103 JumpIfNotEqual {109}
	104 Move X0, -51388416
	105 Add X0, X0, 3320
	106 Call 0x1C17CB8
	107 Move X8, X0
	108 Move [X22+2896], X0
	109 Move S0, 1
	110 Move X0, X21
	111 NotImplemented "Instruction BLR not yet implemented."
	112 Move X22, 0x7E7000
	113 Move X8, [X22+2800]
	114 Compare X8, 0
	115 JumpIfNotEqual {121}
	116 Move X0, -51208192
	117 Add X0, X0, 2518
	118 Call 0x1C17CB8
	119 Move X8, X0
	120 Move [X22+2800], X0
	121 Move X0, X21
	122 Move V0, V8
	123 NotImplemented "Instruction BLR not yet implemented."
	124 Move X22, 0x7E7000
	125 Move X8, [X22+2768]
	126 Compare X8, 0
	127 JumpIfNotEqual {133}
	128 Move X0, -51372032
	129 Add X0, X0, 2767
	130 Call 0x1C17CB8
	131 Move X8, X0
	132 Move [X22+2768], X0
	133 Move X0, X21
	134 Move X1, X31
	135 NotImplemented "Instruction BLR not yet implemented."
	136 Compare X19, 0
	137 JumpIfEqual {179}
	138 Move X21, 0x7E7000
	139 Move X8, [X21+2720]
	140 Compare X8, 0
	141 JumpIfNotEqual {147}
	142 Move X0, -51331072
	143 Add X0, X0, 2779
	144 Call 0x1C17CB8
	145 Move X8, X0
	146 Move [X21+2720], X0
	147 Move X21, 0x4F7000
	148 Move X21, [X21+1432]
	149 Move X0, X19
	150 NotImplemented "Instruction BLR not yet implemented."
	151 Move X0, X31
	152 Move V8, V0
	153 Call Time.get_timeScale
	154 Move X8, -51453952
	155 Move V9, [X8+816]
	156 NotImplemented "Instruction FCMP not yet implemented."
	157 Move X0, X31
	158 Call Time.get_timeScale
	159 Move V9, V0
	160 Move X0, [X21]
	161 Move W8, [X0+224]
	162 Compare W8, 0
	163 JumpIfNotEqual {165}
	164 Call 0x1C17DFC
	165 Multiply S0, S8, S9
	166 Move X0, X20
	167 Move X20, [X31+64]
	168 Move X19, [X31+72]
	169 Move X22, [X31+48]
	170 Move X21, [X31+56]
	171 Move X30, [X31+32]
	172 Move D9, [X31+16]
	173 Move D8, [X31+24]
	174 Move X1, X31
	175 Move D11, [X31+80]
	176 Move D10, [X31+88]
	177 Call Object.Destroy, X0, V0
	178 Return 
	179 Call 0x1C17F20
	180 Move X0, X21
	181 Call 0x1C181E0

Method: System.Void set_loop(System.Boolean value)

Disassembly:
	0x03BFDF88 ADD X0, X31, 0x0
	0x03BFDF8C BL 0x2405D5C
	0x03BFDF90 MOV W1, W0
	0x03BFDF94 MOV X0, X19
	0x03BFDF98 BL 0x3BFDEBC
	0x03BFDF9C LDP X20, X19, [X31 + 0x30]
	0x03BFDFA0 LDP X22, X21, [X31 + 0x20]
	0x03BFDFA4 LDP X30, X23, [X31 + 0x10]
	0x03BFDFA8 ADD X31, X31, 0x40
	0x03BFDFAC RET
	0x03BFDFB0 STR X30, [X31 - 0x30]!
	0x03BFDFB4 STP X22, X21, [X31 + 0x10]
	0x03BFDFB8 STP X20, X19, [X31 + 0x20]
	0x03BFDFBC ADRP X22, 0x7E6000
	0x03BFDFC0 LDR X3, [X22 + 0xC10]
	0x03BFDFC4 MOV X19, X2
	0x03BFDFC8 MOV X20, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7E7000
	006 Move X2, [X21+2880]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51429376
	012 Add X0, X0, 2685
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2880], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_playOnAwake(System.Boolean value)

Disassembly:
	0x03BFDFCC MOV X21, X0
	0x03BFDFD0 CBNZ X3, 0x3BFDFE8
	0x03BFDFD4 ADRP X0, 0xFFFFFFFFFCF13000
	0x03BFDFD8 ADD X0, X0, 0xC2D
	0x03BFDFDC BL 0x1C16CB8
	0x03BFDFE0 MOV X3, X0
	0x03BFDFE4 STR X0, [X22 + 0xC10]
	0x03BFDFE8 MOV X0, X21
	0x03BFDFEC MOV X1, X20
	0x03BFDFF0 MOV X2, X19
	0x03BFDFF4 LDP X20, X19, [X31 + 0x20]
	0x03BFDFF8 LDP X22, X21, [X31 + 0x10]
	0x03BFDFFC LDR X30, [X31], #0x30
	0x03BFE000 BR X3
	0x03BFE004 STR X30, [X31 - 0x30]!
	0x03BFE008 STP X22, X21, [X31 + 0x10]
	0x03BFE00C STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7E7000
	006 Move X2, [X21+2888]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51412992
	012 Add X0, X0, 3777
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2888], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_spatialBlend(System.Single value)

Disassembly:
	0x03BFDF3C LDR X23, [X23 + 0xA58]
	0x03BFDF40 LDR X21, [X21 + 0xA60]
	0x03BFDF44 MOV X19, X1
	0x03BFDF48 MOV X20, X0
	0x03BFDF4C TBNZ X8, 0x0, 0x3BFDF70
	0x03BFDF50 ADRP X0, 0x561000
	0x03BFDF54 LDR X0, [X0 + 0xA58]
	0x03BFDF58 BL 0x1C16CF4
	0x03BFDF5C ADRP X0, 0x561000
	0x03BFDF60 LDR X0, [X0 + 0xA60]
	0x03BFDF64 BL 0x1C16CF4
	0x03BFDF68 MOVZ W8, 0x1
	0x03BFDF6C STRB W8, [X22 + 0xC09]
	0x03BFDF70 LDR X2, [X23]
	0x03BFDF74 MOV X0, X20
	0x03BFDF78 MOV X1, X19
	0x03BFDF7C BL 0x22232DC
	0x03BFDF80 LDR X1, [X21]
	0x03BFDF84 MOV X19, X0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7E7000
	006 Move X1, [X20+2896]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51388416
	012 Add X0, X0, 3320
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+2896], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void set_reverbZoneMix(System.Single value)

Disassembly:
	0x03BFE010 ADRP X22, 0x7E5000
	0x03BFE014 LDR X3, [X22 + 0xC18]
	0x03BFE018 MOV X19, X2
	0x03BFE01C MOV W20, W1
	0x03BFE020 MOV X21, X0
	0x03BFE024 CBNZ X3, 0x3BFE03C
	0x03BFE028 ADRP X0, 0xFFFFFFFFFCF0E000
	0x03BFE02C ADD X0, X0, 0xB06
	0x03BFE030 BL 0x1C16CB8
	0x03BFE034 MOV X3, X0
	0x03BFE038 STR X0, [X22 + 0xC18]
	0x03BFE03C MOV X0, X21
	0x03BFE040 MOV W1, W20
	0x03BFE044 MOV X2, X19
	0x03BFE048 LDP X20, X19, [X31 + 0x20]
	0x03BFE04C LDP X22, X21, [X31 + 0x10]
	0x03BFE050 LDR X30, [X31], #0x30
	0x03BFE054 BR X3
	0x03BFE058 LDR X8, [X0]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7E6000
	006 Move X1, [X20+2904]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51351552
	012 Add X0, X0, 3453
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+2904], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void set_mute(System.Boolean value)

Disassembly:
	0x03BFE05C CMP X8, X1
	0x03BFE060 CSET W0, EQ
	0x03BFE064 RET
	0x03BFE068 STR X30, [X31 - 0x20]!
	0x03BFE06C STP X20, X19, [X31 + 0x10]
	0x03BFE070 MOV X19, X1
	0x03BFE074 MOV X1, X31
	0x03BFE078 MOV X20, X0
	0x03BFE07C BL 0x33A51F0
	0x03BFE080 STR X19, [X20 + 0x10]
	0x03BFE084 LDP X20, X19, [X31 + 0x10]
	0x03BFE088 LDR X30, [X31], #0x20
	0x03BFE08C RET
	0x03BFE090 STP X30, X21, [X31 - 0x20]!
	0x03BFE094 STP X20, X19, [X31 + 0x10]
	0x03BFE098 LDR X0, [X0 + 0x10]
	0x03BFE09C MOV W21, W1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7E6000
	006 Move X2, [X21+2912]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51408896
	012 Add X0, X0, 3505
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2912], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_minDistance(System.Single value)

Disassembly:
	0x03BFE0A0 MOV X1, X31
	0x03BFE0A4 MOV X19, X3
	0x03BFE0A8 MOV X20, X2
	0x03BFE0AC BL 0x33C6948
	0x03BFE0B0 UBFM W8, W21, 0x1F, 0x1E
	0x03BFE0B4 LDR W8, [X0, W8, SXTW]
	0x03BFE0B8 MOVZ W9, 0x1
	0x03BFE0BC BFM W9, W21, 0x1F, 0x1E
	0x03BFE0C0 STR W8, [X20]
	0x03BFE0C4 LDR W8, [X0, W9, SXTW]
	0x03BFE0C8 STR W8, [X19]
	0x03BFE0CC LDP X20, X19, [X31 + 0x10]
	0x03BFE0D0 LDP X30, X21, [X31], #0x20
	0x03BFE0D4 RET
	0x03BFE0D8 STP X30, X23, [X31 - 0x30]!
	0x03BFE0DC STP X22, X21, [X31 + 0x10]
	0x03BFE0E0 STP X20, X19, [X31 + 0x20]
	0x03BFE0E4 ADRP X23, 0x7E5000
	0x03BFE0E8 LDR X4, [X23 + 0xC20]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7E6000
	006 Move X1, [X20+2920]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51343360
	012 Add X0, X0, 3379
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+2920], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void set_maxDistance(System.Single value)

Disassembly:
	0x03BFE0EC MOV X19, X3
	0x03BFE0F0 MOV X20, X2
	0x03BFE0F4 MOV W21, W1
	0x03BFE0F8 MOV X22, X0
	0x03BFE0FC CBNZ X4, 0x3BFE114
	0x03BFE100 ADRP X0, 0xFFFFFFFFFCF22000
	0x03BFE104 ADD X0, X0, 0x693
	0x03BFE108 BL 0x1C16CB8
	0x03BFE10C MOV X4, X0
	0x03BFE110 STR X0, [X23 + 0xC20]
	0x03BFE114 MOV X0, X22
	0x03BFE118 MOV W1, W21
	0x03BFE11C MOV X2, X20
	0x03BFE120 MOV X3, X19
	0x03BFE124 LDP X20, X19, [X31 + 0x20]
	0x03BFE128 LDP X22, X21, [X31 + 0x10]
	0x03BFE12C LDP X30, X23, [X31], #0x30
	0x03BFE130 BR X4
	0x03BFE134 SUB X31, X31, 0x30

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7E6000
	006 Move X1, [X20+2928]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51433472
	012 Add X0, X0, 2735
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+2928], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void set_rolloffMode(UnityEngine.AudioRolloffMode value)

Disassembly:
	0x03BFE138 STP X31, X30, [X31 + 0x8]
	0x03BFE13C STP X20, X19, [X31 + 0x20]
	0x03BFE140 ADRP X20, 0x7E5000
	0x03BFE144 LDR X8, [X20 + 0xC40]
	0x03BFE148 MOV X19, X0
	0x03BFE14C STR X31, [X31]
	0x03BFE150 CBNZ X8, 0x3BFE168
	0x03BFE154 ADRP X0, 0xFFFFFFFFFCF12000
	0x03BFE158 ADD X0, X0, 0xCAC
	0x03BFE15C BL 0x1C16CB8
	0x03BFE160 MOV X8, X0
	0x03BFE164 STR X0, [X20 + 0xC40]
	0x03BFE168 ADD X1, X31, 0x0
	0x03BFE16C MOV X0, X19
	0x03BFE170 BLR X8
	0x03BFE174 LDP X0, X1, [X31]
	0x03BFE178 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7E6000
	006 Move X2, [X21+2936]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51261440
	012 Add X0, X0, 1849
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2936], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

