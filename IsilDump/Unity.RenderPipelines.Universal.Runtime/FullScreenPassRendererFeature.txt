Type: FullScreenPassRendererFeature

Method: System.Void Create()

Disassembly:
	0x03A01C98 TBNZ X8, 0x0, 0x3A01CB0
	0x03A01C9C ADRP X0, 0x6F2000
	0x03A01CA0 LDR X0, [X0 + 0x598]
	0x03A01CA4 BL 0x1C16CF4
	0x03A01CA8 MOVZ W8, 0x1
	0x03A01CAC STRB W8, [X20 + 0xF4F]
	0x03A01CB0 LDR X0, [X19 + 0x38]
	0x03A01CB4 CBZ X0, 0x3A01D4C
	0x03A01CB8 ADRP X19, 0x6F2000
	0x03A01CBC LDR X19, [X19 + 0x598]
	0x03A01CC0 MOV X1, X31
	0x03A01CC4 BL 0x3C040B4
	0x03A01CC8 LDR X8, [X19]
	0x03A01CCC MOV X19, X0
	0x03A01CD0 LDR W9, [X8 + 0xE0]
	0x03A01CD4 CBNZ W9, 0x3A01CE0
	0x03A01CD8 MOV X0, X8
	0x03A01CDC BL 0x1C16DFC
	0x03A01CE0 MOV X0, X19
	0x03A01CE4 MOV X1, X31
	0x03A01CE8 MOV X2, X31
	0x03A01CEC BL 0x3C3883C
	0x03A01CF0 TBZ X0, 0x0, 0x3A01D0C
	0x03A01CF4 MOV X0, X31
	0x03A01CF8 BL 0x3C0E0B0
	0x03A01CFC MOV W20, W0
	0x03A01D00 MOV X0, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x9E1000
	006 Move X20, 0x753000
	007 Move W8, [X21+3909]
	008 Move X20, [X20+4072]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x753000
	015 Move X0, [X0+4072]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3909], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object.get_name, X0
	022 Move X8, [X20]
	023 Move X20, X0
	024 Move X0, X8
	025 Call 0x1C17F10
	026 Move X1, X20
	027 Move X21, X0
	028 Call FullScreenRenderPass..ctor, X0, X1
	029 Move [X19+64], X21
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 

Method: System.Boolean RequireRenderingLayers(System.Boolean isDeferred, System.Boolean needsGBufferAccurateNormals, out UnityEngine.Rendering.Universal.RenderingLayerUtils/Event atEvent, out UnityEngine.Rendering.Universal.RenderingLayerUtils/MaskSize maskSize)

Disassembly:
	0x03A01D9C CBZ X0, 0x3A01FE4
	0x03A01DA0 MOV X1, X31
	0x03A01DA4 BL 0x3C3F58C
	0x03A01DA8 MOV X0, X19
	0x03A01DAC MOV V8.16B, V0.16B

ISIL:
	001 Move W8, 1
	002 Move W0, W31
	003 Move [X3], W8
	004 Move [X4], W31
	005 Return X0

Method: System.Void AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, ref UnityEngine.Rendering.Universal.RenderingData renderingData)

Disassembly:
	0x03A01DB0 MOV V9.16B, V1.16B
	0x03A01DB4 MOV V10.16B, V2.16B
	0x03A01DB8 BL 0x3A01A80
	0x03A01DBC ADRP X20, 0x9D7000
	0x03A01DC0 LDRB W8, [X20 + 0x793]
	0x03A01DC4 FSUB S15, S0, S8
	0x03A01DC8 FSUB S11, S1, S9
	0x03A01DCC FSUB S12, S2, S10
	0x03A01DD0 CBNZ W8, 0x3A01DE8
	0x03A01DD4 ADRP X0, 0x6F3000
	0x03A01DD8 LDR X0, [X0 + 0x5A8]
	0x03A01DDC BL 0x1C16CF4
	0x03A01DE0 MOVZ W8, 0x1
	0x03A01DE4 STRB W8, [X20 + 0x793]
	0x03A01DE8 ADRP X8, 0x6F3000
	0x03A01DEC LDR X8, [X8 + 0x5A8]
	0x03A01DF0 ADRP X20, 0x9D7000
	0x03A01DF4 LDRB W9, [X20 + 0x85B]
	0x03A01DF8 FADD S15, S8, S15
	0x03A01DFC LDR X8, [X8]
	0x03A01E00 FADD S9, S9, S11
	0x03A01E04 FSUB S8, S10, S12
	0x03A01E08 LDR X8, [X8 + 0xB8]
	0x03A01E0C LDP S14, S13, [X8]
	0x03A01E10 LDP S5, S6, [X8 + 0x8]
	0x03A01E14 CBNZ W9, 0x3A01E3C
	0x03A01E18 ADRP X0, 0x6F2000
	0x03A01E1C LDR X0, [X0 + 0x5A0]
	0x03A01E20 MOV V10.16B, V6.16B
	0x03A01E24 MOV V11.16B, V5.16B
	0x03A01E28 BL 0x1C16CF4
	0x03A01E2C MOV V5.16B, V11.16B
	0x03A01E30 MOV V6.16B, V10.16B
	0x03A01E34 MOVZ W8, 0x1
	0x03A01E38 STRB W8, [X20 + 0x85B]
	0x03A01E3C ADRP X8, 0x6F2000
	0x03A01E40 LDR X8, [X8 + 0x5A0]
	0x03A01E44 MOV V1.16B, V9.16B
	0x03A01E48 MOV V2.16B, V8.16B
	0x03A01E4C MOV V3.16B, V14.16B
	0x03A01E50 LDR X8, [X8]
	0x03A01E54 MOV V4.16B, V13.16B
	0x03A01E58 MOV X0, X31
	0x03A01E5C LDR X8, [X8 + 0xB8]
	0x03A01E60 LDR V0, [X8 + 0x14]
	0x03A01E64 LDUR X9, [X8 + 0xC]
	0x03A01E68 ADD X8, X31, 0x290
	0x03A01E6C STR S0, [X31 + 0x8]
	0x03A01E70 MOV V0.16B, V15.16B
	0x03A01E74 STR X9, [X31]
	0x03A01E78 BL 0x3C26FA8
	0x03A01E7C LDP V0, V1, [X31 + 0x290]
	0x03A01E80 LDP V2, V3, [X31 + 0x2B0]
	0x03A01E84 ADD X8, X31, 0x190
	0x03A01E88 ADD X0, X31, 0x1D0
	0x03A01E8C MOV X1, X31
	0x03A01E90 STP V0, V1, [X31 + 0x1D0]
	0x03A01E94 STP V2, V3, [X31 + 0x1F0]
	0x03A01E98 BL 0x3C271CC
	0x03A01E9C LDP V0, V1, [X31 + 0x190]
	0x03A01EA0 LDP V2, V3, [X31 + 0x1B0]
	0x03A01EA4 STP V0, V1, [X31 + 0x290]
	0x03A01EA8 STP V2, V3, [X31 + 0x2B0]
	0x03A01EAC LDR X0, [X19 + 0x38]
	0x03A01EB0 CBZ X0, 0x3A01FE4
	0x03A01EB4 MOV X1, X31
	0x03A01EB8 BL 0x3C32E90
	0x03A01EBC CBZ X0, 0x3A01FE4
	0x03A01EC0 MOV X1, X31
	0x03A01EC4 BL 0x3C3DEB4
	0x03A01EC8 ADD X8, X31, 0x190
	0x03A01ECC MOV X0, X31
	0x03A01ED0 BL 0x3C28378
	0x03A01ED4 LDP V0, V1, [X31 + 0x190]
	0x03A01ED8 LDP V2, V3, [X31 + 0x1B0]
	0x03A01EDC ADD X8, X31, 0x190
	0x03A01EE0 ADD X0, X31, 0x1D0
	0x03A01EE4 MOV X1, X31
	0x03A01EE8 STP V0, V1, [X31 + 0x1D0]
	0x03A01EEC STP V2, V3, [X31 + 0x1F0]
	0x03A01EF0 BL 0x3C271CC
	0x03A01EF4 LDP V0, V1, [X31 + 0x190]
	0x03A01EF8 LDP V2, V3, [X31 + 0x1B0]
	0x03A01EFC ADD X8, X31, 0x190
	0x03A01F00 MOV X0, X31
	0x03A01F04 STP V0, V1, [X31 + 0x250]
	0x03A01F08 STP V2, V3, [X31 + 0x270]
	0x03A01F0C FMOV S0, 1
	0x03A01F10 FMOV S1, 1
	0x03A01F14 FMOV S2, -1
	0x03A01F18 BL 0x3C28318
	0x03A01F1C LDP V1, V0, [X31 + 0x1B0]
	0x03A01F20 LDP V2, V3, [X31 + 0x190]
	0x03A01F24 ADD X8, X31, 0x190
	0x03A01F28 ADD X0, X31, 0x150
	0x03A01F2C STP V1, V0, [X31 + 0x230]
	0x03A01F30 STP V2, V3, [X31 + 0x210]
	0x03A01F34 LDR X19, [X19 + 0x38]
	0x03A01F38 STP V2, V3, [X31 + 0x150]
	0x03A01F3C LDP V2, V3, [X31 + 0x250]
	0x03A01F40 STP V1, V0, [X31 + 0x170]
	0x03A01F44 LDP V0, V1, [X31 + 0x270]
	0x03A01F48 ADD X1, X31, 0x110
	0x03A01F4C MOV X2, X31
	0x03A01F50 STP V2, V3, [X31 + 0x110]
	0x03A01F54 STP V0, V1, [X31 + 0x130]
	0x03A01F58 BL 0x3C27F74
	0x03A01F5C LDP V0, V1, [X31 + 0x190]
	0x03A01F60 LDP V2, V3, [X31 + 0x1B0]
	0x03A01F64 ADD X8, X31, 0xD0
	0x03A01F68 ADD X0, X31, 0x90
	0x03A01F6C STP V0, V1, [X31 + 0x90]
	0x03A01F70 LDP V0, V1, [X31 + 0x290]
	0x03A01F74 STP V2, V3, [X31 + 0xB0]
	0x03A01F78 LDP V2, V3, [X31 + 0x2B0]
	0x03A01F7C ADD X1, X31, 0x50
	0x03A01F80 MOV X2, X31
	0x03A01F84 STP V0, V1, [X31 + 0x50]
	0x03A01F88 STP V2, V3, [X31 + 0x70]
	0x03A01F8C BL 0x3C27F74
	0x03A01F90 LDP V0, V1, [X31 + 0xD0]
	0x03A01F94 LDP V2, V3, [X31 + 0xF0]
	0x03A01F98 STP V0, V1, [X31 + 0x190]
	0x03A01F9C STP V2, V3, [X31 + 0x1B0]
	0x03A01FA0 CBZ X19, 0x3A01FE4
	0x03A01FA4 LDP V0, V1, [X31 + 0x190]
	0x03A01FA8 LDP V2, V3, [X31 + 0x1B0]
	0x03A01FAC ADD X1, X31, 0x10
	0x03A01FB0 MOV X0, X19
	0x03A01FB4 MOV X2, X31
	0x03A01FB8 STP V0, V1, [X31 + 0x10]
	0x03A01FBC STP V2, V3, [X31 + 0x30]
	0x03A01FC0 BL 0x3C042D0
	0x03A01FC4 ADD X31, X31, 0x2D0
	0x03A01FC8 LDP X20, X19, [X31 + 0x50]
	0x03A01FCC LDP X29, X30, [X31 + 0x40]
	0x03A01FD0 LDP D9, D8, [X31 + 0x30]
	0x03A01FD4 LDP D11, D10, [X31 + 0x20]
	0x03A01FD8 LDP D13, D12, [X31 + 0x10]
	0x03A01FDC LDP D15, D14, [X31], #0x60
	0x03A01FE0 RET
	0x03A01FE4 BL 0x1C16F20
	0x03A01FE8 STR X30, [X31 - 0x30]!
	0x03A01FEC STP X22, X21, [X31 + 0x10]
	0x03A01FF0 STP X20, X19, [X31 + 0x20]
	0x03A01FF4 ADRP X21, 0x9E0000
	0x03A01FF8 ADRP X22, 0x71A000
	0x03A01FFC ADRP X20, 0x753000
	0x03A02000 LDRB W8, [X21 + 0xF50]
	0x03A02004 LDR X22, [X22 + 0x2C8]
	0x03A02008 B 0x3EB1964
	0x03A0200C MOV X19, X0
	0x03A02010 TBNZ X8, 0x0, 0x3A02034
	0x03A02014 ADRP X0, 0x719000
	0x03A02018 LDR X0, [X0 + 0x2C8]
	0x03A0201C BL 0x1C16CF4
	0x03A02020 ADRP X0, 0x752000
	0x03A02024 LDR X0, [X0 + 0x38]
	0x03A02028 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x9E1000
	008 Move X22, 0x753000
	009 Move W8, [X23+3910]
	010 Move X22, [X22+4088]
	011 Move X21, X2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {38}
	018 Move X0, 0x6F3000
	019 Move X0, [X0+2600]
	020 Call 0x1C17CF4
	021 Move X0, 0x6F3000
	022 Move X0, [X0+2512]
	023 Call 0x1C17CF4
	024 Move X0, 0x6F3000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0x753000
	028 Move X0, [X0+4088]
	029 Call 0x1C17CF4
	030 Move X0, 0x754000
	031 Move X0, [X0]
	032 Call 0x1C17CF4
	033 Move X0, 0x754000
	034 Move X0, [X0+8]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X23+3910], W8
	038 Move X0, [X22]
	039 Add X22, X21, 24
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X22
	045 Move X1, X31
	046 Call UniversalRenderer.IsOffscreenDepthTexture, X0
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {54}
	051 Move W8, [X21+384]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Move X23, [X31+56]
	060 Return 
	061 Move X8, 0x6F3000
	062 Move X8, [X8+1432]
	063 Move X21, [X19+40]
	064 Move X0, [X8]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, X21
	070 Move X1, X31
	071 Move X2, X31
	072 Call Object.op_Equality, X0, X1
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {110}
	077 Move X8, 0x6F3000
	078 Move X8, [X8+2512]
	079 Move W1, 1
	080 Move X0, [X8]
	081 Call 0x1C17D6C
	082 Move X20, X0
	083 Move X0, X19
	084 Move X1, X31
	085 Call Object.get_name, X0
	086 Compare X20, 0
	087 JumpIfEqual {192}
	088 Move X19, X0
	089 Compare X0, 0
	090 JumpIfEqual {97}
	091 Move X8, [X20]
	092 Move X0, X19
	093 Move X1, [X8+64]
	094 Call 0x1C17E00
	095 Compare X0, 0
	096 JumpIfEqual {194}
	097 Move W8, [X20+24]
	098 Compare W8, 0
	099 JumpIfEqual {193}
	100 Move [X20+32], X19
	101 Move X8, 0x6F3000
	102 Move X8, [X8+2600]
	103 Move X0, [X8]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1C17DFC
	108 Move X8, 0x754000
	109 Move X8, [X8]
	110 Move W21, [X19+52]
	111 Move TEMP, X21
	112 And TEMP, TEMP, -2147483648
	113 Compare TEMP, -2147483648
	114 JumpIfEqual {148}
	115 Move X0, [X19+40]
	116 Compare X0, 0
	117 JumpIfEqual {192}
	118 Move X1, X31
	119 Call Material.get_passCount, X0
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X1, [X19+64]
	122 Compare X1, 0
	123 JumpIfEqual {192}
	124 Move W8, [X19+28]
	125 Move [X1+16], W8
	126 Move W8, [X19+36]
	127 Move [X1+200], W8
	128 Move X8, [X19+40]
	129 Move W9, [X19+52]
	130 Move W10, [X19+32]
	131 Move W11, [X19+56]
	132 Move [X1+224], X8
	133 Move [X1+232], W9
	134 Move [X1+236], W10
	135 Move [X1+237], W11
	136 Compare X20, 0
	137 JumpIfEqual {192}
	138 Move X0, X20
	139 Move X20, [X31+32]
	140 Move X19, [X31+40]
	141 Move X22, [X31+16]
	142 Move X21, [X31+24]
	143 Move X2, X31
	144 Move X30, [X31+48]
	145 Move X23, [X31+56]
	146 Call ScriptableRenderer.EnqueuePass, X0, X1
	147 Return 
	148 Move X8, 0x6F3000
	149 Move X8, [X8+2512]
	150 Move W1, 1
	151 Move X0, [X8]
	152 Call 0x1C17D6C
	153 Move X20, X0
	154 Move X0, X19
	155 Move X1, X31
	156 Call Object.get_name, X0
	157 Compare X20, 0
	158 JumpIfEqual {192}
	159 Move X19, X0
	160 Compare X0, 0
	161 JumpIfEqual {168}
	162 Move X8, [X20]
	163 Move X0, X19
	164 Move X1, [X8+64]
	165 Call 0x1C17E00
	166 Compare X0, 0
	167 JumpIfEqual {194}
	168 Move W8, [X20+24]
	169 Compare W8, 0
	170 JumpIfEqual {193}
	171 Move [X20+32], X19
	172 Move X8, 0x6F3000
	173 Move X8, [X8+2600]
	174 Move X0, [X8]
	175 Move W8, [X0+224]
	176 Compare W8, 0
	177 JumpIfNotEqual {179}
	178 Call 0x1C17DFC
	179 Move X8, 0x754000
	180 Move X8, [X8+8]
	181 Move X0, [X8]
	182 Move X1, X20
	183 Move X20, [X31+32]
	184 Move X19, [X31+40]
	185 Move X22, [X31+16]
	186 Move X21, [X31+24]
	187 Move X2, X31
	188 Move X30, [X31+48]
	189 Move X23, [X31+56]
	190 Call Debug.LogWarningFormat, X0, X1
	191 Return 
	192 Call 0x1C17F20
	193 Call 0x1C17F28
	194 Call 0x1C17F44
	195 Move X1, X31
	196 Call 0x1C17DEC

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x03A02048 BL 0x1C16F10
	0x03A0204C MOV X1, X19
	0x03A02050 MOV X2, X31
	0x03A02054 MOV X20, X0
	0x03A02058 BL 0x3A20514
	0x03A0205C STR X20, [X19 + 0x40]
	0x03A02060 MOV X0, X19
	0x03A02064 LDP X20, X19, [X31 + 0x20]
	0x03A02068 LDP X22, X21, [X31 + 0x10]
	0x03A0206C LDR X30, [X31], #0x30
	0x03A02070 B 0x3A02074

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+64]
	003 Compare X8, 0
	004 JumpIfEqual {14}
	005 Move X0, [X8+240]
	006 Compare X0, 0
	007 JumpIfEqual {12}
	008 Move X1, X31
	009 Move X30, [X31+16]
	010 Call RTHandle.Release, X0
	011 Return 
	012 Move X30, [X31+16]
	013 Return 
	014 Call 0x1C17F20

Method: System.Void UpgradeIfNeeded()

Disassembly:
	0x03A02088 CBZ X8, 0x3A0210C

ISIL:
	001 Return 

Method: System.Void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()

Disassembly:
	0x03A0208C MOV X20, X0
	0x03A02090 UBFM X21, X0, 0x20, 0x3F
	0x03A02094 MOV X0, X8
	0x03A02098 MOV W1, W20
	0x03A0209C MOV W2, W21
	0x03A020A0 MOV X3, X31
	0x03A020A4 BL 0x3A2065C

ISIL:
	001 Move W8, [X0+72]
	002 Add W31, W8, 1
	003 Return 
	004 Move W8, 1
	005 Move [X0+72], W8
	006 Return 

Method: System.Void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()

Disassembly:
	0x03A020A8 LDR X0, [X19 + 0x40]
	0x03A020AC CBZ X0, 0x3A0210C
	0x03A020B0 LDRB W8, [X0 + 0x2C]
	0x03A020B4 LDR X19, [X19 + 0x38]
	0x03A020B8 CBZ W8, 0x3A020E4
	0x03A020BC MOV W1, W20

ISIL:
	001 Move W8, [X0+72]
	002 Add W31, W8, 1
	003 Return 
	004 Move [X0+72], W31
	005 Return 

Method: System.Void .ctor()

Disassembly:
	0x03A020C0 MOV W2, W21
	0x03A020C4 MOV X3, X31
	0x03A020C8 BL 0x3A20CBC
	0x03A020CC CBZ X19, 0x3A0210C
	0x03A020D0 MOV X0, X19
	0x03A020D4 LDP X20, X19, [X31 + 0x10]
	0x03A020D8 MOV X1, X31
	0x03A020DC LDP X30, X21, [X31], #0x20

ISIL:
	001 Move W8, 600
	002 Move W9, 1
	003 Move TEMP, 0
	004 Not TEMP
	005 Move W10, TEMP
	006 Move X1, X31
	007 Move [X0+28], W8
	008 Move [X0+32], W9
	009 Move [X0+72], W10
	010 Call ScriptableRendererFeature..ctor, X0
	011 Return 

