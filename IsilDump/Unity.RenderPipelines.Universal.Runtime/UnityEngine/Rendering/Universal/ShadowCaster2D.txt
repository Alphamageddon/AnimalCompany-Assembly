Type: UnityEngine.Rendering.Universal.ShadowCaster2D

Method: UnityEngine.Mesh get_mesh()

Disassembly:
	0x03A27600 STP X22, X21, [X31 + 0x10]
	0x03A27604 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move X0, [X0+80]
	002 Return X0

Method: UnityEngine.Vector3[] get_shapePath()

Disassembly:
	0x03A27608 ADRP X22, 0x9BB000
	0x03A2760C ADRP X21, 0x6CC000

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Int32 get_shapePathHash()

Disassembly:
	0x03A27610 LDRB W8, [X22 + 0x38]
	0x03A27614 LDR X21, [X21 + 0x598]

ISIL:
	001 Move W0, [X0+72]
	002 Return X0

Method: System.Void set_shapePathHash(System.Int32 value)

Disassembly:
	0x03A27618 MOV X19, X1
	0x03A2761C MOV X20, X0

ISIL:
	001 Move [X0+72], W1
	002 Return 

Method: System.Void CacheValues()

Disassembly:
	0x03A27620 TBNZ X8, 0x0, 0x3A27638
	0x03A27624 ADRP X0, 0x6CC000
	0x03A27628 LDR X0, [X0 + 0x598]
	0x03A2762C BL 0x1C16CF4
	0x03A27630 MOVZ W8, 0x1
	0x03A27634 STRB W8, [X22 + 0x38]
	0x03A27638 LDR X0, [X21]
	0x03A2763C LDR W8, [X0 + 0xE0]
	0x03A27640 CBNZ W8, 0x3A27648
	0x03A27644 BL 0x1C16DFC
	0x03A27648 MOV X0, X19
	0x03A2764C MOV X1, X31
	0x03A27650 MOV X2, X31
	0x03A27654 BL 0x3C354F8
	0x03A27658 TBZ X0, 0x0, 0x3A2766C
	0x03A2765C CBZ X19, 0x3A276B4
	0x03A27660 MOV X0, X19
	0x03A27664 MOV X1, X20
	0x03A27668 BL 0x3A27E30
	0x03A2766C LDR X0, [X21]
	0x03A27670 LDR W8, [X0 + 0xE0]
	0x03A27674 CBNZ W8, 0x3A2767C
	0x03A27678 BL 0x1C16DFC
	0x03A2767C MOV X0, X19
	0x03A27680 MOV X1, X20
	0x03A27684 MOV X2, X31
	0x03A27688 BL 0x3C3883C
	0x03A2768C TBZ X0, 0x0, 0x3A276A4
	0x03A27690 MOV X0, X19
	0x03A27694 LDP X20, X19, [X31 + 0x20]
	0x03A27698 LDP X22, X21, [X31 + 0x10]
	0x03A2769C LDR X30, [X31], #0x30
	0x03A276A0 B 0x3A26558
	0x03A276A4 LDP X20, X19, [X31 + 0x20]
	0x03A276A8 LDP X22, X21, [X31 + 0x10]
	0x03A276AC LDR X30, [X31], #0x30
	0x03A276B0 RET
	0x03A276B4 BL 0x1C16F20
	0x03A276B8 SUB X31, X31, 0x40
	0x03A276BC STP X30, X21, [X31 + 0x20]
	0x03A276C0 STP X20, X19, [X31 + 0x30]
	0x03A276C4 ADRP X21, 0x9BB000
	0x03A276C8 ADRP X20, 0x6D2000
	0x03A276CC LDRB W8, [X21 + 0x2E]
	0x03A276D0 LDR X20, [X20 + 0x7A0]
	0x03A276D4 MOV X19, X0
	0x03A276D8 TBNZ X8, 0x0, 0x3A276FC
	0x03A276DC ADRP X0, 0x6D2000
	0x03A276E0 LDR X0, [X0 + 0x7A0]
	0x03A276E4 BL 0x1C16CF4
	0x03A276E8 ADRP X0, 0x6CC000
	0x03A276EC LDR X0, [X0 + 0x598]
	0x03A276F0 BL 0x1C16CF4
	0x03A276F4 MOVZ W8, 0x1
	0x03A276F8 STRB W8, [X21 + 0x2E]
	0x03A276FC LDR X2, [X20]
	0x03A27700 ADD X1, X31, 0x18
	0x03A27704 MOV X0, X19
	0x03A27708 STR X31, [X31 + 0x18]
	0x03A2770C BL 0x21A4990
	0x03A27710 LDR W8, [X19 + 0x48]
	0x03A27714 AND W9, W0, 0x1
	0x03A27718 ADD X1, X19, 0xA0
	0x03A2771C MOV X2, X31
	0x03A27720 MOV W0, W8
	0x03A27724 STRB W9, [X19 + 0x34]
	0x03A27728 BL 0x3A13FD8
	0x03A2772C TBZ X0, 0x0, 0x3A27750
	0x03A27730 LDR X0, [X19 + 0x50]
	0x03A27734 LDR X1, [X19 + 0x40]
	0x03A27738 ADD X8, X31, 0x0
	0x03A2773C BL 0x3A26E10
	0x03A27740 LDR X8, [X31 + 0x10]
	0x03A27744 LDR V0, [X31]
	0x03A27748 STR X8, [X19 + 0x80]
	0x03A2774C STR V0, [X19 + 0x7]
	0x03A27750 MOV X20, X19
	0x03A27754 LDR X8, [X20 + 0x60]!
	0x03A27758 MOV X0, X19
	0x03A2775C MOV X1, X20
	0x03A27760 STR X8, [X19 + 0x68]
	0x03A27764 BL 0x3A27874
	0x03A27768 TBZ X0, 0x0, 0x3A27808
	0x03A2776C ADRP X21, 0x6CC000
	0x03A27770 LDR X21, [X21 + 0x598]
	0x03A27774 LDR X20, [X20]
	0x03A27778 LDR X0, [X21]
	0x03A2777C LDR W8, [X0 + 0xE0]
	0x03A27780 CBNZ W8, 0x3A27788
	0x03A27784 BL 0x1C16DFC
	0x03A27788 MOV X0, X20
	0x03A2778C MOV X1, X31
	0x03A27790 MOV X2, X31
	0x03A27794 BL 0x3C354F8
	0x03A27798 TBZ X0, 0x0, 0x3A27808
	0x03A2779C LDR X0, [X21]
	0x03A277A0 LDR X20, [X19 + 0x68]
	0x03A277A4 LDR W8, [X0 + 0xE0]
	0x03A277A8 CBNZ W8, 0x3A277B0
	0x03A277AC BL 0x1C16DFC
	0x03A277B0 MOV X0, X20
	0x03A277B4 MOV X1, X19
	0x03A277B8 MOV X2, X31
	0x03A277BC BL 0x3C3883C
	0x03A277C0 TBZ X0, 0x0, 0x3A277CC

ISIL:
	001 Subtract X31, X31, 368
	002 Move [X31+272], D14
	003 Move [X31+288], D13
	004 Move [X31+296], D12
	005 Move [X31+304], D11
	006 Move [X31+312], D10
	007 Move [X31+320], D9
	008 Move [X31+328], D8
	009 Move [X31+336], X29
	010 Move [X31+344], X30
	011 Move [X31+352], X20
	012 Move [X31+360], X19
	013 Move X1, X31
	014 Move X19, X0
	015 Call Component.get_transform, X0
	016 Compare X0, 0
	017 JumpIfEqual {141}
	018 Move X1, X31
	019 Call Transform.get_position, X0
	020 Move X0, X19
	021 Move X1, X31
	022 Move [X19+164], S0
	023 Move [X19+172], S1
	024 Move [X19+172], S2
	025 Call Component.get_transform, X0
	026 Compare X0, 0
	027 JumpIfEqual {141}
	028 Move X1, X31
	029 Call Transform.get_lossyScale, X0
	030 Move X0, X19
	031 Move X1, X31
	032 Move [X19+176], S0
	033 Move [X19+184], S1
	034 Move [X19+184], S2
	035 Call Component.get_transform, X0
	036 Compare X0, 0
	037 JumpIfEqual {141}
	038 Move X1, X31
	039 Call Transform.get_rotation, X0
	040 Move [X19+188], S0
	041 Move [X19+196], S1
	042 Move [X19+196], S2
	043 Move [X19+204], S3
	044 Move X20, 0x9B2000
	045 Move S12, [X19+164]
	046 Move S13, [X19+168]
	047 Move W8, [X20+2139]
	048 Move V14, [X19+172]
	049 Move V8, V0
	050 Move V9, V1
	051 Move V10, V2
	052 Move V11, V3
	053 Compare W8, 0
	054 JumpIfNotEqual {60}
	055 Move X0, 0x6CD000
	056 Move X0, [X0+1440]
	057 Call 0x1C17CF4
	058 Move W8, 1
	059 Move [X20+2139], W8
	060 Move X8, 0x6CD000
	061 Move X8, [X8+1440]
	062 Move V1, V13
	063 Move V2, V14
	064 Move V3, V8
	065 Move X8, [X8]
	066 Move V4, V9
	067 Move V5, V10
	068 Move V6, V11
	069 Move X8, [X8+184]
	070 Move X0, X31
	071 Move V0, [X8+20]
	072 NotImplemented "Instruction LDUR not yet implemented."
	073 Add X8, X31, 144
	074 Move [X31+8], S0
	075 Move V0, V12
	076 Move [X31], X9
	077 Call Matrix4x4.TRS, X0, X1, X2
	078 Move V1, [X31+176]
	079 Move V0, [X31+192]
	080 Move V3, [X31+144]
	081 Move V2, [X31+160]
	082 Add X0, X19, 204
	083 Add X8, X31, 80
	084 Move X1, X31
	085 Move [X31+240], V1
	086 Move [X31+248], V0
	087 Move [X31+208], V3
	088 Move [X31+216], V2
	089 Move [X19+252], V0
	090 Move [X19+236], V1
	091 Move [X19+220], V2
	092 Move [X19+204], V3
	093 Call Matrix4x4.get_inverse, X0
	094 Move V1, [X31+112]
	095 Move V0, [X31+128]
	096 Move V3, [X31+80]
	097 Move V2, [X31+96]
	098 Add X8, X19, 268
	099 Move X0, X19
	100 Move X1, X31
	101 Move [X31+176], V1
	102 Move [X31+184], V0
	103 Move [X31+144], V3
	104 Move [X31+152], V2
	105 Move [X8+32], V1
	106 Move [X8+40], V0
	107 Move [X8], V3
	108 Move [X8+8], V2
	109 Call Component.get_transform, X0
	110 Compare X0, 0
	111 JumpIfEqual {141}
	112 Add X8, X31, 16
	113 Move X1, X31
	114 Call Transform.get_localToWorldMatrix, X0
	115 Move V1, [X31+48]
	116 Move V0, [X31+64]
	117 Move V3, [X31+16]
	118 Move V2, [X31+32]
	119 Add X8, X19, 332
	120 Move X20, [X31+352]
	121 Move X19, [X31+360]
	122 Move X29, [X31+336]
	123 Move X30, [X31+344]
	124 Move D9, [X31+320]
	125 Move D8, [X31+328]
	126 Move D11, [X31+304]
	127 Move D10, [X31+312]
	128 Move D13, [X31+288]
	129 Move D12, [X31+296]
	130 Move V14, [X31+272]
	131 Move [X31+112], V1
	132 Move [X31+120], V0
	133 Move [X31+80], V3
	134 Move [X31+88], V2
	135 Move [X8+32], V1
	136 Move [X8+40], V0
	137 Move [X8], V3
	138 Move [X8+8], V2
	139 Add X31, X31, 368
	140 Return 
	141 Call 0x1C17F20

Method: System.Void set_useRendererSilhouette(System.Boolean value)

Disassembly:
	0x03A277C4 MOV X0, X19
	0x03A277C8 BL 0x3A26558
	0x03A277CC LDR X1, [X19 + 0x68]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+53], W8
	003 Return 

Method: System.Boolean get_useRendererSilhouette()

Disassembly:
	0x03A277D0 MOV X0, X19
	0x03A277D4 BL 0x3A275FC
	0x03A277D8 LDR X0, [X21]
	0x03A277DC LDR X20, [X19 + 0x60]
	0x03A277E0 LDR W8, [X0 + 0xE0]
	0x03A277E4 CBNZ W8, 0x3A277EC
	0x03A277E8 BL 0x1C16DFC
	0x03A277EC MOV X0, X20

ISIL:
	001 Move W8, [X0+53]
	002 Compare W8, 0
	003 JumpIfEqual {8}
	004 Move W8, [X0+52]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Return X0
	008 Move W0, W31
	009 Return X0

Method: System.Void set_selfShadows(System.Boolean value)

Disassembly:
	0x03A277F0 MOV X1, X19
	0x03A277F4 MOV X2, X31
	0x03A277F8 BL 0x3C3883C

ISIL:
	001 And W8, W1, 1
	002 Move [X0+55], W8
	003 Return 

Method: System.Boolean get_selfShadows()

Disassembly:
	0x03A277FC TBZ X0, 0x0, 0x3A27808
	0x03A27800 MOV X0, X19

ISIL:
	001 Move W0, [X0+55]
	002 Return X0

Method: System.Void set_castsShadows(System.Boolean value)

Disassembly:
	0x03A27804 BL 0x3A26468
	0x03A27808 LDR W0, [X19 + 0x20]
	0x03A2780C ADD X1, X19, 0x98

ISIL:
	001 And W8, W1, 1
	002 Move [X0+54], W8
	003 Return 

Method: System.Boolean get_castsShadows()

Disassembly:
	0x03A27810 MOV X2, X31
	0x03A27814 BL 0x3A13FD8

ISIL:
	001 Move W0, [X0+54]
	002 Return X0

Method: System.Int32[] SetDefaultSortingLayers()

Disassembly:
	0x03A27818 TBZ X0, 0x0, 0x3A2782C
	0x03A2781C MOV X0, X19
	0x03A27820 BL 0x3A26558
	0x03A27824 MOV X0, X19
	0x03A27828 BL 0x3A26468
	0x03A2782C LDRB W0, [X19 + 0x36]
	0x03A27830 ADD X1, X19, 0x9C
	0x03A27834 MOV X2, X31
	0x03A27838 BL 0x3A16DA4
	0x03A2783C TBZ X0, 0x0, 0x3A2785C
	0x03A27840 LDRB W8, [X19 + 0x36]
	0x03A27844 CBZ W8, 0x3A27854
	0x03A27848 MOV X0, X19
	0x03A2784C BL 0x3A26468
	0x03A27850 B 0x3A2785C
	0x03A27854 MOV X0, X19
	0x03A27858 BL 0x3A26558
	0x03A2785C MOV X0, X19
	0x03A27860 BL 0x3A2799C
	0x03A27864 LDP X20, X19, [X31 + 0x30]
	0x03A27868 LDP X30, X21, [X31 + 0x20]
	0x03A2786C ADD X31, X31, 0x40
	0x03A27870 RET
	0x03A27874 STR X30, [X31 - 0x30]!
	0x03A27878 STP X22, X21, [X31 + 0x10]
	0x03A2787C STP X20, X19, [X31 + 0x20]
	0x03A27880 ADRP X21, 0x9BB000
	0x03A27884 ADRP X22, 0x6CC000
	0x03A27888 LDRB W8, [X21 + 0x37]
	0x03A2788C LDR X22, [X22 + 0x598]
	0x03A27890 MOV X19, X1
	0x03A27894 MOV X20, X0
	0x03A27898 TBNZ X8, 0x0, 0x3A278BC
	0x03A2789C ADRP X0, 0x72D000
	0x03A278A0 LDR X0, [X0 + 0xAB8]
	0x03A278A4 BL 0x1C16CF4
	0x03A278A8 ADRP X0, 0x6CC000
	0x03A278AC LDR X0, [X0 + 0x598]
	0x03A278B0 BL 0x1C16CF4
	0x03A278B4 MOVZ W8, 0x1
	0x03A278B8 STRB W8, [X21 + 0x37]
	0x03A278BC MOV X0, X20
	0x03A278C0 BL 0x3A2816C
	0x03A278C4 LDR X8, [X22]
	0x03A278C8 STR X0, [X31 + 0x8]
	0x03A278CC MOV X21, X0
	0x03A278D0 LDR W9, [X8 + 0xE0]
	0x03A278D4 CBNZ W9, 0x3A278E0
	0x03A278D8 MOV X0, X8
	0x03A278DC BL 0x1C16DFC
	0x03A278E0 MOV X0, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x9BC000
	007 Move W8, [X19+42]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x6CE000
	013 Move X0, [X0+3672]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+42], W8
	017 Move X0, X31
	018 Call SortingLayer.get_layers
	019 Compare X0, 0
	020 JumpIfEqual {56}
	021 Move X8, 0x6CE000
	022 Move X8, [X8+3672]
	023 Move X20, [X0+24]
	024 Move X0, [X8]
	025 Move W1, W20
	026 Call 0x1C17D6C
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X19, X0
	029 Move X21, X31
	030 And X20, X20, 0
	031 Move W22, 32
	032 Move X0, X31
	033 Call SortingLayer.get_layers
	034 Compare X0, 0
	035 JumpIfEqual {56}
	036 Move W8, [X0+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Add X0, X0, X22
	039 Move X1, X31
	040 Call SortingLayer.get_id, X0
	041 Compare X19, 0
	042 JumpIfEqual {56}
	043 Move W8, [X19+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Add X21, X21, 1
	046 Move [X19], W0
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Add X22, X22, 4
	049 Move X0, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Return X0
	056 Call 0x1C17F20
	057 Call 0x1C17F28

Method: System.Boolean IsLit(UnityEngine.Rendering.Universal.Light2D light)

Disassembly:
	0x03A278E4 MOV X1, X31
	0x03A278E8 MOV X2, X31
	0x03A278EC BL 0x3C3883C
	0x03A278F0 TBZ X0, 0x0, 0x3A27914
	0x03A278F4 CBZ X20, 0x3A27998
	0x03A278F8 ADRP X8, 0x72D000
	0x03A278FC LDR X8, [X8 + 0xAB8]
	0x03A27900 ADD X1, X31, 0x8
	0x03A27904 MOV X0, X20
	0x03A27908 LDR X2, [X8]
	0x03A2790C BL 0x21A4990
	0x03A27910 LDR X21, [X31 + 0x8]
	0x03A27914 LDR X0, [X22]
	0x03A27918 LDR W8, [X0 + 0xE0]
	0x03A2791C CBNZ W8, 0x3A27924
	0x03A27920 BL 0x1C16DFC
	0x03A27924 MOV X0, X21
	0x03A27928 MOV X1, X31
	0x03A2792C MOV X2, X31
	0x03A27930 BL 0x3C354F8
	0x03A27934 TBZ X0, 0x0, 0x3A27984
	0x03A27938 LDR X0, [X22]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {23}
	004 Move V0, [X1+172]
	005 Move V1, [X0+136]
	006 Move V2, [X1+176]
	007 NotImplemented "Instruction LDUR not yet implemented."
	008 Move V4, [X1+220]
	009 Move V5, [X0+148]
	010 Subtract S0, S0, S1
	011 Subtract V1, V2, V3
	012 Multiply S0, S0, S0
	013 NotImplemented "Instruction INVALID not yet implemented."
	014 Add S2, S4, S5
	015 Add S0, S0, S1
	016 Move S1, V1.S[1]
	017 Add S0, S0, S1
	018 Multiply S1, S2, S2
	019 NotImplemented "Instruction FCMP not yet implemented."
	020 NotImplemented "Instruction CSET not yet implemented."
	021 Move X30, [X31+16]
	022 Return X0
	023 Call 0x1C17F20

Method: System.Boolean IsShadowedLayer(System.Int32 layer)

Disassembly:
	0x03A2793C LDR X21, [X19]
	0x03A27940 LDR X22, [X31 + 0x8]
	0x03A27944 LDR W8, [X0 + 0xE0]
	0x03A27948 CBNZ W8, 0x3A27950
	0x03A2794C BL 0x1C16DFC
	0x03A27950 MOV X0, X21
	0x03A27954 MOV X1, X22
	0x03A27958 MOV X2, X31
	0x03A2795C BL 0x3C354F8
	0x03A27960 TBZ X0, 0x0, 0x3A27984
	0x03A27964 LDR X0, [X31 + 0x8]
	0x03A27968 CBZ X0, 0x3A27998
	0x03A2796C MOV X1, X20
	0x03A27970 BL 0x3A27D44
	0x03A27974 LDR X8, [X31 + 0x8]
	0x03A27978 MOVZ W0, 0x1
	0x03A2797C STR X8, [X19]
	0x03A27980 B 0x3A27988
	0x03A27984 MOV W0, W31
	0x03A27988 LDP X20, X19, [X31 + 0x20]
	0x03A2798C LDP X22, X21, [X31 + 0x10]
	0x03A27990 LDR X30, [X31], #0x30
	0x03A27994 RET
	0x03A27998 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x9BC000
	006 Move W8, [X21+43]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x728000
	014 Move X0, [X0+3328]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+43], W8
	018 Move X0, [X20+56]
	019 Compare X0, 0
	020 JumpIfEqual {30}
	021 Move X8, 0x728000
	022 Move X8, [X8+3328]
	023 Move W1, W19
	024 Move X2, [X8]
	025 Call Array.IndexOf, X0, X1
	026 NotImplemented "Instruction ORN not yet implemented."
	027 Move W0, W8
	028 ShiftRight W0, 31
	029 And W0, W0, 0x7FFFFFFF
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0

Method: System.Void Awake()

Disassembly:
	0x03A2799C SUB X31, X31, 0x60
	0x03A279A0 STR D14, [X31 + 0x10]
	0x03A279A4 STP D13, D12, [X31 + 0x18]
	0x03A279A8 STP D11, D10, [X31 + 0x28]
	0x03A279AC STP D9, D8, [X31 + 0x38]
	0x03A279B0 STR X30, [X31 + 0x48]
	0x03A279B4 STP X20, X19, [X31 + 0x50]
	0x03A279B8 MOV X1, X31
	0x03A279BC MOV X19, X0
	0x03A279C0 BL 0x3C32E90
	0x03A279C4 CBZ X0, 0x3A27AE8
	0x03A279C8 LDR V0, [X19 + 0x78]
	0x03A279CC LDR V1, [X19 + 0x84]
	0x03A279D0 LDR V3, [X19 + 0x70]
	0x03A279D4 LDUR V4, [X19 + 0x7C]
	0x03A279D8 MOV X1, X31
	0x03A279DC FADD S2, S0, S1
	0x03A279E0 FADD V0.2S, V3.2S, V4.2S
	0x03A279E4 MOV S1, V0.S[1]
	0x03A279E8 BL 0x3C3DE4C
	0x03A279EC MOV X0, X19
	0x03A279F0 MOV X1, X31
	0x03A279F4 MOV V8.16B, V0.16B
	0x03A279F8 MOV V9.16B, V1.16B
	0x03A279FC MOV V10.16B, V2.16B
	0x03A27A00 BL 0x3C32E90
	0x03A27A04 CBZ X0, 0x3A27AE8
	0x03A27A08 LDR V0, [X19 + 0x78]
	0x03A27A0C LDR V1, [X19 + 0x84]
	0x03A27A10 LDR V3, [X19 + 0x70]
	0x03A27A14 LDUR V4, [X19 + 0x7C]
	0x03A27A18 MOV X1, X31
	0x03A27A1C FSUB S2, S0, S1
	0x03A27A20 FSUB V0.2S, V3.2S, V4.2S
	0x03A27A24 MOV S1, V0.S[1]
	0x03A27A28 BL 0x3C3DE4C
	0x03A27A2C ADRP X20, 0x9B1000
	0x03A27A30 LDRB W8, [X20 + 0x785]
	0x03A27A34 FADD S0, S8, S0
	0x03A27A38 FADD S1, S9, S1
	0x03A27A3C FADD S2, S10, S2
	0x03A27A40 FMOV S3, 0.5
	0x03A27A44 FMUL S13, S0, S3
	0x03A27A48 FMUL S12, S1, S3
	0x03A27A4C FMUL S11, S2, S3
	0x03A27A50 CBNZ W8, 0x3A27A68
	0x03A27A54 ADRP X0, 0x6CC000
	0x03A27A58 LDR X0, [X0 + 0x5A8]
	0x03A27A5C BL 0x1C16CF4
	0x03A27A60 MOVZ W8, 0x1
	0x03A27A64 STRB W8, [X20 + 0x785]
	0x03A27A68 ADRP X8, 0x6CC000
	0x03A27A6C LDR X8, [X8 + 0x5A8]
	0x03A27A70 FSUB S14, S8, S13
	0x03A27A74 FSUB S9, S9, S12
	0x03A27A78 FSUB S8, S10, S11
	0x03A27A7C LDR X0, [X8]
	0x03A27A80 LDR W8, [X0 + 0xE0]
	0x03A27A84 CBNZ W8, 0x3A27A8C
	0x03A27A88 BL 0x1C16DFC
	0x03A27A8C FMUL S0, S14, S14
	0x03A27A90 FMUL S1, S9, S9
	0x03A27A94 FMUL S2, S8, S8
	0x03A27A98 FADD S0, S0, S1
	0x03A27A9C FADD S0, S2, S0
	0x03A27AA0 FSQRT S3, S0
	0x03A27AA4 ADD X0, X31, 0x0
	0x03A27AA8 MOV V0.16B, V13.16B
	0x03A27AAC MOV V1.16B, V12.16B
	0x03A27AB0 MOV V2.16B, V11.16B
	0x03A27AB4 MOV X1, X31
	0x03A27AB8 STP X31, X31, [X31]
	0x03A27ABC BL 0x3C05044
	0x03A27AC0 LDR V0, [X31]
	0x03A27AC4 LDR X30, [X31 + 0x48]
	0x03A27AC8 LDP D9, D8, [X31 + 0x38]
	0x03A27ACC LDP D11, D10, [X31 + 0x28]
	0x03A27AD0 STUR V0, [X19 + 0x88]
	0x03A27AD4 LDP X20, X19, [X31 + 0x50]
	0x03A27AD8 LDP D13, D12, [X31 + 0x18]
	0x03A27ADC LDR V14, [X31 + 0x10]
	0x03A27AE0 ADD X31, X31, 0x60
	0x03A27AE4 RET
	0x03A27AE8 BL 0x1C16F20
	0x03A27AEC MOVZ W8, 0x1
	0x03A27AF0 STR W8, [X0 + 0x30]
	0x03A27AF4 RET
	0x03A27AF8 SUB X31, X31, 0x30
	0x03A27AFC STP X30, X19, [X31 + 0x20]
	0x03A27B00 LDR W8, [X0 + 0x30]
	0x03A27B04 CBNZ W8, 0x3A27B30
	0x03A27B08 MOV X19, X0
	0x03A27B0C LDR X0, [X0 + 0x40]
	0x03A27B10 ADD X8, X31, 0x8
	0x03A27B14 BL 0x3A27B3C
	0x03A27B18 LDR X8, [X31 + 0x18]
	0x03A27B1C LDUR V0, [X31 + 0x8]
	0x03A27B20 MOVZ W9, 0x1
	0x03A27B24 STR W9, [X19 + 0x30]
	0x03A27B28 STR X8, [X19 + 0x80]
	0x03A27B2C STR V0, [X19 + 0x7]
	0x03A27B30 LDP X30, X19, [X31 + 0x20]
	0x03A27B34 ADD X31, X31, 0x30
	0x03A27B38 RET
	0x03A27B3C STR D8, [X31 - 0x30]!
	0x03A27B40 STR X30, [X31 + 0x8]
	0x03A27B44 STP X22, X21, [X31 + 0x10]
	0x03A27B48 STP X20, X19, [X31 + 0x20]
	0x03A27B4C CBZ X0, 0x3A27C88
	0x03A27B50 MOV X19, X8
	0x03A27B54 LDR X8, [X0 + 0x18]
	0x03A27B58 MOV X20, X0
	0x03A27B5C CBZ X8, 0x3A27C1C
	0x03A27B60 ADRP X21, 0x9BB000
	0x03A27B64 LDRB W8, [X21 + 0x132]
	0x03A27B68 CBNZ W8, 0x3A27B80
	0x03A27B6C ADRP X0, 0x6D4000
	0x03A27B70 LDR X0, [X0 + 0xF08]
	0x03A27B74 BL 0x1C16CF4
	0x03A27B78 MOVZ W8, 0x1
	0x03A27B7C STRB W8, [X21 + 0x132]
	0x03A27B80 ADRP X21, 0x6D4000
	0x03A27B84 LDR X21, [X21 + 0xF08]
	0x03A27B88 ADRP X22, 0x9B4000
	0x03A27B8C LDRB W9, [X22 + 0x510]
	0x03A27B90 LDR X8, [X21]
	0x03A27B94 LDR X8, [X8 + 0xB8]
	0x03A27B98 LDR V8, [X8 + 0x30]
	0x03A27B9C CBNZ W9, 0x3A27BB8
	0x03A27BA0 MOV X0, X21
	0x03A27BA4 BL 0x1C16CF4
	0x03A27BA8 LDR X8, [X21]
	0x03A27BAC MOVZ W9, 0x1
	0x03A27BB0 STRB W9, [X22 + 0x510]
	0x03A27BB4 LDR X8, [X8 + 0xB8]
	0x03A27BB8 LDR X9, [X20 + 0x18]
	0x03A27BBC LDR V0, [X8 + 0x38]
	0x03A27BC0 CMP W9, 0x1
	0x03A27BC4 B.LT 0x3A27BEC
	0x03A27BC8 AND X8, X9, 0x0
	0x03A27BCC ADD X9, X20, 0x20
	0x03A27BD0 LDR V1, [X9], #0xC
	0x03A27BD4 SUBS X8, X8, 0x1
	0x00000000 INVALID
	0x00000000 INVALID
	0x00000000 INVALID
	0x00000000 INVALID
	0x03A27BE8 B.NE 0x3A27BD0
	0x03A27BEC MOVI V1.2S, 0x3F, 0x18
	0x03A27BF0 MOVI D2, 0x0
	0x00000000 INVALID
	0x03A27BF8 FADD V2.2S, V0.2S, V2.2S
	0x03A27BFC FADD V0.2S, V0.2S, V2.2S
	0x03A27C00 FSUB V0.2S, V0.2S, V8.2S
	0x00000000 INVALID
	0x03A27C08 FADD V1.2S, V8.2S, V0.2S
	0x03A27C0C STR D1, [X19]
	0x03A27C10 FMOV S1, W31
	0x03A27C14 STR W31, [X19 + 0x8]
	0x03A27C18 B 0x3A27C6C
	0x03A27C1C ADRP X20, 0x9B1000
	0x03A27C20 LDRB W8, [X20 + 0x783]
	0x03A27C24 CBNZ W8, 0x3A27C3C
	0x03A27C28 ADRP X0, 0x6CC000
	0x03A27C2C LDR X0, [X0 + 0x5A0]
	0x03A27C30 BL 0x1C16CF4
	0x03A27C34 MOVZ W8, 0x1
	0x03A27C38 STRB W8, [X20 + 0x783]
	0x03A27C3C ADRP X8, 0x6CC000
	0x03A27C40 LDR X8, [X8 + 0x5A0]
	0x03A27C44 MOVI V2.2S, 0x3F, 0x18
	0x03A27C48 FMOV S3, 0.5
	0x03A27C4C LDR X8, [X8]
	0x03A27C50 LDR X8, [X8 + 0xB8]
	0x03A27C54 LDR V0, [X8]
	0x03A27C58 LDR V1, [X8 + 0x8]
	0x03A27C5C STR D0, [X19]
	0x03A27C60 STR S1, [X19 + 0x8]
	0x00000000 INVALID
	0x03A27C68 FMUL S1, S1, S3
	0x03A27C6C STUR D0, [X19 + 0xC]
	0x03A27C70 STR S1, [X19 + 0x14]
	0x03A27C74 LDP X20, X19, [X31 + 0x20]
	0x03A27C78 LDP X22, X21, [X31 + 0x10]
	0x03A27C7C LDR X30, [X31 + 0x8]
	0x03A27C80 LDR V8, [X31], #0x30
	0x03A27C84 RET
	0x03A27C88 BL 0x1C16F20
	0x03A27C8C MOVZ W8, 0x101
	0x03A27C90 MOVZ W9, 0x1
	0x03A27C94 MOV X1, X31
	0x03A27C98 STURH W8, [X0 + 0x35]
	0x03A27C9C STRB W9, [X0 + 0x9C]
	0x03A27CA0 B 0x3C36C30
	0x03A27CA4 STP X30, X21, [X31 - 0x20]!
	0x03A27CA8 STP X20, X19, [X31 + 0x10]
	0x03A27CAC ADRP X20, 0x9BB000
	0x03A27CB0 LDRB W8, [X20 + 0x2F]
	0x03A27CB4 MOV X19, X0
	0x03A27CB8 TBNZ X8, 0x0, 0x3A27CDC
	0x03A27CBC ADRP X0, 0x72D000
	0x03A27CC0 LDR X0, [X0 + 0xAC0]
	0x03A27CC4 BL 0x1C16CF4
	0x03A27CC8 ADRP X0, 0x72D000
	0x03A27CCC LDR X0, [X0 + 0xAC8]
	0x03A27CD0 BL 0x1C16CF4
	0x03A27CD4 MOVZ W8, 0x1
	0x03A27CD8 STRB W8, [X20 + 0x2F]
	0x03A27CDC LDR X0, [X19 + 0x28]
	0x03A27CE0 CBZ X0, 0x3A27D28
	0x03A27CE4 ADRP X21, 0x72D000
	0x03A27CE8 LDR X21, [X21 + 0xAC8]
	0x03A27CEC MOV W20, W31
	0x03A27CF0 LDR W8, [X0 + 0x18]
	0x03A27CF4 CMP W20, W8
	0x03A27CF8 B.GE 0x3A27D28
	0x03A27CFC LDR X2, [X21]
	0x03A27D00 MOV W1, W20
	0x03A27D04 BL 0x301BCCC
	0x03A27D08 CBZ X0, 0x3A27D24
	0x03A27D0C LDR X8, [X0]
	0x03A27D10 LDP X9, X1, [X8 + 0x178]
	0x03A27D14 BLR X9
	0x03A27D18 LDR X0, [X19 + 0x28]
	0x03A27D1C ADD W20, W20, 0x1
	0x03A27D20 CBNZ X0, 0x3A27CF0
	0x03A27D24 BL 0x1C16F20

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], D14
	003 Move [X31+56], D13
	004 Move [X31+64], D12
	005 Move [X31+72], D11
	006 Move [X31+80], D10
	007 Move [X31+88], D9
	008 Move [X31+96], D8
	009 Move [X31+104], X30
	010 Move [X31+112], X22
	011 Move [X31+120], X21
	012 Move [X31+128], X20
	013 Move [X31+136], X19
	014 Move X20, 0x9BC000
	015 Move W8, [X20+44]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0x72E000
	022 Move X0, [X0+2624]
	023 Call 0x1C17CF4
	024 Move X0, 0x6F9000
	025 Move X0, [X0+1440]
	026 Call 0x1C17CF4
	027 Move X0, 0x6CD000
	028 Move X0, [X0+1432]
	029 Call 0x1C17CF4
	030 Move X0, 0x6CF000
	031 Move X0, [X0+2480]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+44], W8
	035 Move X8, [X19+56]
	036 Compare X8, 0
	037 JumpIfNotEqual {40}
	038 Call ShadowCaster2D.SetDefaultSortingLayers
	039 Move [X19+56], X0
	040 Move X0, X19
	041 Move X1, X31
	042 Call Component.get_transform, X0
	043 Compare X0, 0
	044 JumpIfEqual {263}
	045 Move X20, 0x6F9000
	046 Move X22, 0x6CD000
	047 Move X20, [X20+1440]
	048 Move X22, [X22+1432]
	049 Move X1, X31
	050 Call Transform.get_position, X0
	051 Move X21, 0x9B2000
	052 Move W8, [X21+2139]
	053 Move V8, V0
	054 Move V9, V1
	055 Compare W8, 0
	056 JumpIfNotEqual {62}
	057 Move X0, 0x6CD000
	058 Move X0, [X0+1440]
	059 Call 0x1C17CF4
	060 Move W8, 1
	061 Move [X21+2139], W8
	062 Move X21, 0x6CD000
	063 Move X21, [X21+1440]
	064 Move X1, [X20]
	065 Move X0, X19
	066 Move X8, [X21]
	067 Move X8, [X8+184]
	068 NotImplemented "Instruction LDUR not yet implemented."
	069 Call 0x21A4894, X0
	070 Move X8, [X22]
	071 Move X20, X0
	072 Move W9, [X8+224]
	073 Compare W9, 0
	074 JumpIfNotEqual {77}
	075 Move X0, X8
	076 Call 0x1C17DFC
	077 Move X0, X20
	078 Move X1, X31
	079 Move X2, X31
	080 Call Object.op_Inequality, X0, X1
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {91}
	085 Compare X20, 0
	086 JumpIfEqual {263}
	087 Add X8, X31, 24
	088 Move X0, X20
	089 Move X1, X31
	090 Call Renderer.get_bounds, X0
	091 Move X8, 0x72E000
	092 Move X8, [X8+2624]
	093 Move X0, X19
	094 Move X1, [X8]
	095 Call 0x21A4894, X0
	096 Move X8, [X22]
	097 Move X20, X0
	098 Move W9, [X8+224]
	099 Compare W9, 0
	100 JumpIfNotEqual {103}
	101 Move X0, X8
	102 Call 0x1C17DFC
	103 Move X0, X20
	104 Move X1, X31
	105 Move X2, X31
	106 Call Object.op_Inequality, X0, X1
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {120}
	111 Compare X20, 0
	112 JumpIfEqual {263}
	113 Add X8, X31, 24
	114 Move X0, X20
	115 Move X1, X31
	116 Call Collider2D.get_bounds, X0
	117 Move S8, [X31+24]
	118 Move S9, [X31+28]
	119 NotImplemented "Instruction LDUR not yet implemented."
	120 NotImplemented "Instruction MOVI not yet implemented."
	121 NotImplemented "Instruction INVALID not yet implemented."
	122 Move X20, 0x9B2000
	123 Move W8, [X20+1923]
	124 Move [X31], V0
	125 Compare W8, 0
	126 JumpIfNotEqual {132}
	127 Move X0, 0x6CD000
	128 Move X0, [X0+1440]
	129 Call 0x1C17CF4
	130 Move W8, 1
	131 Move [X20+1923], W8
	132 Move X8, [X21]
	133 Move X0, X19
	134 Move X1, X31
	135 Move X8, [X8+184]
	136 Move S13, [X8]
	137 Move S14, [X8+4]
	138 Call Component.get_transform, X0
	139 Compare X0, 0
	140 JumpIfEqual {263}
	141 Move X1, X31
	142 Call Transform.get_position, X0
	143 Move X0, X19
	144 Move X1, X31
	145 Move V10, V0
	146 Move V11, V1
	147 Move V12, V2
	148 Call Component.get_transform, X0
	149 Compare X0, 0
	150 JumpIfEqual {263}
	151 Move X1, X31
	152 Call Transform.get_lossyScale, X0
	153 NotImplemented "Instruction FCMP not yet implemented."
	154 Move X0, X19
	155 Move X1, X31
	156 Call Component.get_transform, X0
	157 Compare X0, 0
	158 JumpIfEqual {263}
	159 Move X1, X31
	160 Call Transform.get_lossyScale, X0
	161 NotImplemented "Instruction FCMP not yet implemented."
	162 Move X0, X19
	163 Move X1, X31
	164 Call Component.get_transform, X0
	165 Compare X0, 0
	166 JumpIfEqual {263}
	167 Move X1, X31
	168 Call Transform.get_lossyScale, X0
	169 Move X0, X19
	170 Move X1, X31
	171 Move V10, V0
	172 Call Component.get_transform, X0
	173 Compare X0, 0
	174 JumpIfEqual {263}
	175 Move X1, X31
	176 Call Transform.get_lossyScale, X0
	177 Move X0, X19
	178 Move X1, X31
	179 Move V11, V1
	180 Call Component.get_transform, X0
	181 Compare X0, 0
	182 JumpIfEqual {263}
	183 Move X1, X31
	184 Call Transform.get_position, X0
	185 Move X0, X19
	186 Move X1, X31
	187 Move V12, V0
	188 Call Component.get_transform, X0
	189 Compare X0, 0
	190 JumpIfEqual {263}
	191 Move S0, 1
	192 Move X1, X31
	193 NotImplemented "Instruction FDIV not yet implemented."
	194 NotImplemented "Instruction FDIV not yet implemented."
	195 Call Transform.get_position, X0
	196 NotImplemented "Instruction FNEG not yet implemented."
	197 NotImplemented "Instruction FNEG not yet implemented."
	198 Multiply S10, S13, S0
	199 Multiply S11, S14, S1
	200 Move S12, W31
	201 Move X8, [X19+64]
	202 Compare X8, 0
	203 JumpIfEqual {207}
	204 Move X8, [X8+24]
	205 Compare X8, 0
	206 JumpIfNotEqual {249}
	207 Move X8, 0x6CF000
	208 Move X8, [X8+2480]
	209 Move W1, 4
	210 Move X0, [X8]
	211 Call 0x1C17D6C
	212 Compare X0, 0
	213 JumpIfEqual {263}
	214 Move W8, [X0+24]
	215 Move V5, [X31]
	216 Compare W8, 0
	217 JumpIfEqual {264}
	218 Move S2, V5.S[1]
	219 Subtract S0, S8, S5
	220 Move S1, W31
	221 Subtract S3, S9, S2
	222 Multiply S4, S0, S13
	223 Add S0, S12, S1
	224 Multiply S1, S3, S14
	225 NotImplemented "Instruction CMP not yet implemented."
	226 Add S3, S4, S10
	227 Add S1, S1, S11
	228 Move [X0+32], S3
	229 Move [X0+40], S1
	230 Move [X0+40], S0
	231 Add S2, S9, S2
	232 Multiply S2, S2, S14
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Add S2, S2, S11
	235 Move [X0+44], S3
	236 Move [X0+52], S2
	237 Move [X0+52], S0
	238 Add S3, S8, S5
	239 Multiply S3, S3, S13
	240 NotImplemented "Instruction CMP not yet implemented."
	241 Add S3, S3, S10
	242 Move [X0+56], S3
	243 Move [X0+64], S2
	244 Move [X0+64], S0
	245 Move [X0+68], S3
	246 Move [X0+76], S1
	247 Move [X0+76], S0
	248 Move [X19+64], X0
	249 Move X20, [X31+128]
	250 Move X19, [X31+136]
	251 Move X22, [X31+112]
	252 Move X21, [X31+120]
	253 Move X30, [X31+104]
	254 Move D9, [X31+88]
	255 Move D8, [X31+96]
	256 Move D11, [X31+72]
	257 Move D10, [X31+80]
	258 Move D13, [X31+56]
	259 Move D12, [X31+64]
	260 Move V14, [X31+48]
	261 Add X31, X31, 144
	262 Return 
	263 Call 0x1C17F20
	264 Call 0x1C17F28

Method: System.Void OnEnable()

Disassembly:
	0x03A27D28 LDP X20, X19, [X31 + 0x10]
	0x03A27D2C LDP X30, X21, [X31], #0x20
	0x03A27D30 RET
	0x03A27D34 LDR X0, [X0 + 0x28]
	0x03A27D38 RET
	0x03A27D3C LDR W0, [X0 + 0x20]
	0x03A27D40 RET
	0x03A27D44 STP X30, X21, [X31 - 0x20]!
	0x03A27D48 STP X20, X19, [X31 + 0x10]
	0x03A27D4C ADRP X20, 0x9BB000
	0x03A27D50 LDRB W8, [X20 + 0x30]
	0x03A27D54 MOV X19, X1
	0x03A27D58 MOV X21, X0
	0x03A27D5C TBNZ X8, 0x0, 0x3A27D8C
	0x03A27D60 ADRP X0, 0x72D000
	0x03A27D64 LDR X0, [X0 + 0xAD0]
	0x03A27D68 BL 0x1C16CF4
	0x03A27D6C ADRP X0, 0x72D000
	0x03A27D70 LDR X0, [X0 + 0xAD8]
	0x03A27D74 BL 0x1C16CF4
	0x03A27D78 ADRP X0, 0x72D000
	0x03A27D7C LDR X0, [X0 + 0xAE0]
	0x03A27D80 BL 0x1C16CF4
	0x03A27D84 MOVZ W8, 0x1
	0x03A27D88 STRB W8, [X20 + 0x30]
	0x03A27D8C LDR X20, [X21 + 0x28]
	0x03A27D90 CBNZ X20, 0x3A27DC0
	0x03A27D94 ADRP X8, 0x72D000
	0x03A27D98 LDR X8, [X8 + 0xAE0]
	0x03A27D9C LDR X0, [X8]
	0x03A27DA0 BL 0x1C16F10
	0x03A27DA4 ADRP X8, 0x72D000
	0x03A27DA8 LDR X8, [X8 + 0xAD8]
	0x03A27DAC MOV X20, X0
	0x03A27DB0 LDR X1, [X8]
	0x03A27DB4 BL 0x301B7C4
	0x03A27DB8 STR X20, [X21 + 0x28]
	0x03A27DBC CBZ X20, 0x3A27E2C
	0x03A27DC0 ADRP X9, 0x72D000
	0x03A27DC4 LDR X9, [X9 + 0xAD0]
	0x03A27DC8 LDR W10, [X20 + 0x1C]
	0x03A27DCC LDR X8, [X20 + 0x10]
	0x03A27DD0 LDR X9, [X9]
	0x03A27DD4 ADD W10, W10, 0x1
	0x03A27DD8 STR W10, [X20 + 0x1C]
	0x03A27DDC CBZ X8, 0x3A27E2C
	0x03A27DE0 LDRSW X10, [X20 + 0x18]
	0x03A27DE4 LDR W11, [X8 + 0x18]
	0x03A27DE8 CMP W10, W11
	0x03A27DEC B.CS 0x3A27E0C
	0x03A27DF0 ADD W9, W10, 0x1
	0x03A27DF4 ADD X8, X8, X10, 0x3, LSL
	0x03A27DF8 STR W9, [X20 + 0x18]
	0x03A27DFC STR X19, [X8 + 0x20]
	0x03A27E00 LDP X20, X19, [X31 + 0x10]
	0x03A27E04 LDP X30, X21, [X31], #0x20
	0x03A27E08 RET
	0x03A27E0C LDR X8, [X9 + 0x20]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x9BC000
	007 Move X20, 0x6CD000
	008 Move W8, [X21+45]
	009 Move X20, [X20+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x6D4000
	016 Move X0, [X0+1792]
	017 Call 0x1C17CF4
	018 Move X0, 0x6CD000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+45], W8
	023 Move X0, [X20]
	024 Move X20, [X19+80]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {42}
	037 Move W20, [X19+88]
	038 Move X0, X19
	039 Move X1, X31
	040 Call Object.GetInstanceID, X0
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X8, 0x6D4000
	043 Move X8, [X8+1792]
	044 Move X0, [X8]
	045 Call 0x1C17F10
	046 Move X1, X31
	047 Move X20, X0
	048 Call Mesh..ctor, X0
	049 Move X1, [X19+64]
	050 Add X8, X31, 8
	051 Move X0, X20
	052 Move [X19+80], X20
	053 Call ShadowUtility.GenerateShadowMesh, X0, X1
	054 Move X8, [X31+24]
	055 NotImplemented "Instruction LDUR not yet implemented."
	056 Move X0, X19
	057 Move X1, X31
	058 Move [X19+128], X8
	059 Move [X19+7], V0
	060 Call Object.GetInstanceID, X0
	061 Move [X19+88], W0
	062 Move [X19+96], X31
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Add X31, X31, 64
	068 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03A285F4 LDR X8, [X8 + 0x60]
	0x03A285F8 CBZ X8, 0x3A28624

ISIL:
	001 Move X1, [X0+96]

Method: System.Void Update()

Disassembly:
	0x03A286B8 TBNZ X8, 0x0, 0x3A286E8
	0x03A286BC ADRP X0, 0x6F3000
	0x03A286C0 LDR X0, [X0 + 0x8F8]
	0x03A286C4 BL 0x1C16CF4
	0x03A286C8 ADRP X0, 0x6D2000
	0x03A286CC LDR X0, [X0 + 0x7A0]
	0x03A286D0 BL 0x1C16CF4
	0x03A286D4 ADRP X0, 0x72C000
	0x03A286D8 LDR X0, [X0 + 0x6A0]
	0x03A286DC BL 0x1C16CF4
	0x03A286E0 MOVZ W8, 0x1
	0x03A286E4 STRB W8, [X22 + 0x3E]
	0x03A286E8 LDR X0, [X21]
	0x03A286EC ADRP X23, 0x6F3000
	0x03A286F0 ADRP X24, 0x72C000
	0x03A286F4 LDR X23, [X23 + 0x8F8]
	0x03A286F8 LDR X24, [X24 + 0x6A0]
	0x03A286FC MOVZ W1, 0x4
	0x03A28700 BL 0x1C16D6C
	0x03A28704 MOV X21, X0
	0x03A28708 MOV X25, X31
	0x03A2870C ADD X26, X0, 0x20
	0x03A28710 MOVZ W27, 0x1
	0x03A28714 LDR X0, [X23]
	0x03A28718 LDR W8, [X0 + 0xE0]
	0x03A2871C CBNZ W8, 0x3A28724
	0x03A28720 BL 0x1C16DFC
	0x03A28724 MOV X0, X20
	0x03A28728 MOV X1, X31
	0x03A2872C BL 0x39E1920
	0x03A28730 CBZ X21, 0x3A287D8
	0x03A28734 MOV X22, X0
	0x03A28738 CBZ X0, 0x3A28750
	0x03A2873C LDR X8, [X21]
	0x03A28740 MOV X0, X22
	0x03A28744 LDR X1, [X8 + 0x40]
	0x03A28748 BL 0x1C16E00
	0x03A2874C CBZ X0, 0x3A287E0
	0x03A28750 LDR W8, [X21 + 0x18]
	0x03A28754 CMP W25, W8
	0x03A28758 B.CS 0x3A287DC
	0x03A2875C STR X22, [X26, X25, LSL #3]
	0x03A28760 LDR X0, [X24]
	0x03A28764 LDR W8, [X0 + 0xE0]
	0x03A28768 CBNZ W8, 0x3A28770
	0x03A2876C BL 0x1C16DFC
	0x03A28770 CBZ X22, 0x3A287D8
	0x03A28774 LDR X8, [X24]
	0x03A28778 LSLV W2, W27, W25
	0x03A2877C MOV X0, X22
	0x03A28780 MOV X3, X31
	0x03A28784 LDR X8, [X8 + 0xB8]
	0x03A28788 LDR W1, [X8 + 0x18]
	0x03A2878C BL 0x3C15C04
	0x03A28790 LDR W8, [X21 + 0x18]
	0x03A28794 CMP W25, W8
	0x03A28798 B.CS 0x3A287DC
	0x03A2879C LDR X0, [X26, X25, LSL #3]
	0x03A287A0 CBZ X0, 0x3A287D8
	0x03A287A4 MOV W1, W19
	0x03A287A8 MOV X2, X31
	0x03A287AC BL 0x3C1518C
	0x03A287B0 ADD X25, X25, 0x1
	0x03A287B4 CMP W25, 0x4
	0x03A287B8 B.NE 0x3A28714
	0x03A287BC MOV X0, X21
	0x03A287C0 LDP X20, X19, [X31 + 0x40]
	0x03A287C4 LDP X22, X21, [X31 + 0x30]
	0x03A287C8 LDP X24, X23, [X31 + 0x20]
	0x03A287CC LDP X26, X25, [X31 + 0x10]
	0x03A287D0 LDP X30, X27, [X31], #0x50
	0x03A287D4 RET
	0x03A287D8 BL 0x1C16F20
	0x03A287DC BL 0x1C16F28
	0x03A287E0 BL 0x1C16F44
	0x03A287E4 MOV X1, X31
	0x03A287E8 BL 0x1C16DEC
	0x03A287EC STR X30, [X31 - 0x30]!
	0x03A287F0 STP X22, X21, [X31 + 0x10]
	0x03A287F4 STP X20, X19, [X31 + 0x20]
	0x03A287F8 ADRP X21, 0x9BA000
	0x03A287FC LDRB W8, [X21 + 0x3F]
	0x03A28800 MOV W19, W1
	0x03A28804 MOV X20, X0
	0x03A28808 TBNZ X8, 0x0, 0x3A2882C
	0x03A2880C ADRP X0, 0x6CB000
	0x03A28810 LDR X0, [X0 + 0x598]
	0x03A28814 BL 0x1C16CF4
	0x03A28818 ADRP X0, 0x72C000
	0x03A2881C LDR X0, [X0 + 0x6A0]
	0x03A28820 BL 0x1C16CF4
	0x03A28824 MOVZ W8, 0x1
	0x03A28828 STRB W8, [X21 + 0x3F]
	0x03A2882C CBZ X20, 0x3A288E8
	0x03A28830 LDR X8, [X20 + 0x110]
	0x03A28834 CBZ X8, 0x3A2888C
	0x03A28838 LDR X9, [X8 + 0x18]
	0x03A2883C CBZ X9, 0x3A2888C
	0x03A28840 CBZ W9, 0x3A288EC
	0x03A28844 LDR X0, [X8 + 0x20]
	0x03A28848 CBZ X0, 0x3A288E8
	0x03A2884C LDR X21, [X20 + 0xB8]
	0x03A28850 MOV X1, X31
	0x03A28854 BL 0x3C14714
	0x03A28858 ADRP X8, 0x6CB000
	0x03A2885C LDR X8, [X8 + 0x598]
	0x03A28860 MOV X22, X0
	0x03A28864 LDR X8, [X8]
	0x03A28868 LDR W9, [X8 + 0xE0]
	0x03A2886C CBNZ W9, 0x3A28878
	0x03A28870 MOV X0, X8

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x9BB000
	007 Move X20, 0x6D2000
	008 Move W8, [X21+46]
	009 Move X20, [X20+1952]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x6D2000
	016 Move X0, [X0+1952]
	017 Call 0x1C17CF4
	018 Move X0, 0x6CC000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+46], W8
	023 Move X2, [X20]
	024 Add X1, X31, 24
	025 Move X0, X19
	026 Move [X31+24], X31
	027 Call 0x21A5990, X0, X1
	028 Move W8, [X19+72]
	029 And W9, W0, 1
	030 Add X1, X19, 160
	031 Move X2, X31
	032 Move W0, W8
	033 Move [X19+52], W9
	034 Call LightUtility.CheckForChange, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {47}
	039 Move X0, [X19+80]
	040 Move X1, [X19+64]
	041 Add X8, X31, 0
	042 Call ShadowUtility.GenerateShadowMesh, X0, X1
	043 Move X8, [X31+16]
	044 Move V0, [X31]
	045 Move [X19+128], X8
	046 Move [X19+7], V0
	047 Move X20, X19
	048 Add X20, X20, 96
	049 Move X8, [X20]
	050 Move X0, X19
	051 Move X1, X20
	052 Move [X19+104], X8
	053 Call ShadowCasterGroup2DManager.AddToShadowCasterGroup, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {109}
	058 Move X21, 0x6CC000
	059 Move X21, [X21+1432]
	060 Move X20, [X20]
	061 Move X0, [X21]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X20
	067 Move X1, X31
	068 Move X2, X31
	069 Call Object.op_Inequality, X0, X1
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {109}
	074 Move X0, [X21]
	075 Move X20, [X19+104]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X0, X20
	081 Move X1, X19
	082 Move X2, X31
	083 Call Object.op_Equality, X0, X1
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {90}
	088 Move X0, X19
	089 Call ShadowCasterGroup2DManager.RemoveGroup, X0
	090 Move X1, [X19+104]
	091 Move X0, X19
	092 Call ShadowCasterGroup2DManager.RemoveFromShadowCasterGroup, X0, X1
	093 Move X0, [X21]
	094 Move X20, [X19+96]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move X0, X20
	100 Move X1, X19
	101 Move X2, X31
	102 Call Object.op_Equality, X0, X1
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {109}
	107 Move X0, X19
	108 Call ShadowCasterGroup2DManager.AddGroup, X0
	109 Move W0, [X19+32]
	110 Add X1, X19, 152
	111 Move X2, X31
	112 Call LightUtility.CheckForChange, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfNotEqual {121}
	117 Move X0, X19
	118 Call ShadowCasterGroup2DManager.RemoveGroup, X0
	119 Move X0, X19
	120 Call ShadowCasterGroup2DManager.AddGroup, X0
	121 Move W0, [X19+54]
	122 Add X1, X19, 156
	123 Move X2, X31
	124 Call LightUtility.CheckForChange, X0, X1
	125 Move TEMP, X0
	126 And TEMP, TEMP, 1
	127 Compare TEMP, 1
	128 JumpIfNotEqual {136}
	129 Move W8, [X19+54]
	130 Compare W8, 0
	131 JumpIfEqual {134}
	132 Move X0, X19
	133 Call ShadowCasterGroup2DManager.AddGroup, X0
	134 Move X0, X19
	135 Call ShadowCasterGroup2DManager.RemoveGroup, X0
	136 Move X0, X19
	137 Call ShadowCaster2D.UpdateBoundingSphere, X0
	138 Move X20, [X31+48]
	139 Move X19, [X31+56]
	140 Move X30, [X31+32]
	141 Move X21, [X31+40]
	142 Add X31, X31, 64
	143 Return 

Method: System.Void OnBeforeSerialize()

Disassembly:
	0x03A28AEC CBNZ X0, 0x3A28AC4
	0x03A28AF0 BL 0x1C16F20
	0x03A28AF4 BL 0x1C16F28

ISIL:
	001 Move W8, 1
	002 Move [X0+48], W8
	003 Return 

Method: System.Void OnAfterDeserialize()

Disassembly:
	0x03A28AF8 STR X30, [X31 - 0x30]!
	0x03A28AFC STP X22, X21, [X31 + 0x10]
	0x03A28B00 STP X20, X19, [X31 + 0x20]
	0x03A28B04 ADRP X21, 0x9BA000
	0x03A28B08 LDRB W8, [X21 + 0x42]
	0x03A28B0C MOV W19, W1
	0x03A28B10 MOV X20, X0
	0x03A28B14 TBNZ X8, 0x0, 0x3A28B38
	0x03A28B18 ADRP X0, 0x6CB000
	0x03A28B1C LDR X0, [X0 + 0x598]
	0x03A28B20 BL 0x1C16CF4
	0x03A28B24 ADRP X0, 0x72C000
	0x03A28B28 LDR X0, [X0 + 0x6A0]
	0x03A28B2C BL 0x1C16CF4
	0x03A28B30 MOVZ W8, 0x1
	0x03A28B34 STRB W8, [X21 + 0x42]
	0x03A28B38 CBZ X20, 0x3A28BF4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move W8, [X0+48]
	005 Compare W8, 0
	006 JumpIfNotEqual {17}
	007 Move X19, X0
	008 Move X0, [X0+64]
	009 Add X8, X31, 8
	010 Call ShadowUtility.CalculateLocalBounds, X0
	011 Move X8, [X31+24]
	012 NotImplemented "Instruction LDUR not yet implemented."
	013 Move W9, 1
	014 Move [X19+48], W9
	015 Move [X19+128], X8
	016 Move [X19+7], V0
	017 Move X30, [X31+32]
	018 Move X19, [X31+40]
	019 Add X31, X31, 48
	020 Return 

Method: System.Void UpdateBoundingSphere()

Disassembly:
	0x03A2899C LDR X0, [X8]
	0x03A289A0 LDR W8, [X0 + 0xE0]
	0x03A289A4 CBNZ W8, 0x3A289AC
	0x03A289A8 BL 0x1C16DFC
	0x03A289AC MOVZ W1, 0x1
	0x03A289B0 MOV X0, X21
	0x03A289B4 BL 0x3A2868C
	0x03A289B8 STR X0, [X20 + 0x118]
	0x03A289BC CBZ X0, 0x3A289EC
	0x03A289C0 LDR W8, [X0 + 0x18]
	0x03A289C4 CMP W8, W19
	0x03A289C8 B.LS 0x3A289F0
	0x03A289CC ADD X8, X0, W19, 0x3, SXTW
	0x03A289D0 LDR X0, [X8 + 0x20]
	0x03A289D4 LDP X20, X19, [X31 + 0x20]
	0x03A289D8 LDP X22, X21, [X31 + 0x10]
	0x03A289DC LDR X30, [X31], #0x30
	0x03A289E0 RET
	0x03A289E4 LDR X0, [X20 + 0x118]
	0x03A289E8 CBNZ X0, 0x3A289C0
	0x03A289EC BL 0x1C16F20
	0x03A289F0 BL 0x1C16F28
	0x03A289F4 STR X30, [X31 - 0x30]!
	0x03A289F8 STP X22, X21, [X31 + 0x10]
	0x03A289FC STP X20, X19, [X31 + 0x20]
	0x03A28A00 ADRP X21, 0x9BA000
	0x03A28A04 LDRB W8, [X21 + 0x41]
	0x03A28A08 MOV W19, W1
	0x03A28A0C MOV X20, X0
	0x03A28A10 TBNZ X8, 0x0, 0x3A28A34
	0x03A28A14 ADRP X0, 0x6CB000
	0x03A28A18 LDR X0, [X0 + 0x598]
	0x03A28A1C BL 0x1C16CF4
	0x03A28A20 ADRP X0, 0x72C000
	0x03A28A24 LDR X0, [X0 + 0x6A0]
	0x03A28A28 BL 0x1C16CF4
	0x03A28A2C MOVZ W8, 0x1
	0x03A28A30 STRB W8, [X21 + 0x41]
	0x03A28A34 CBZ X20, 0x3A28AF0
	0x03A28A38 LDR X8, [X20 + 0xF8]
	0x03A28A3C CBZ X8, 0x3A28A94
	0x03A28A40 LDR X9, [X8 + 0x18]
	0x03A28A44 CBZ X9, 0x3A28A94
	0x03A28A48 CBZ W9, 0x3A28AF4
	0x03A28A4C LDR X0, [X8 + 0x20]
	0x03A28A50 CBZ X0, 0x3A28AF0
	0x03A28A54 LDR X21, [X20 + 0xC0]
	0x03A28A58 MOV X1, X31
	0x03A28A5C BL 0x3C14714
	0x03A28A60 ADRP X8, 0x6CB000
	0x03A28A64 LDR X8, [X8 + 0x598]
	0x03A28A68 MOV X22, X0
	0x03A28A6C LDR X8, [X8]
	0x03A28A70 LDR W9, [X8 + 0xE0]
	0x03A28A74 CBNZ W9, 0x3A28A80
	0x03A28A78 MOV X0, X8
	0x03A28A7C BL 0x1C16DFC
	0x03A28A80 MOV X0, X21
	0x03A28A84 MOV X1, X22
	0x03A28A88 MOV X2, X31
	0x03A28A8C BL 0x3C354F8
	0x03A28A90 TBZ X0, 0x0, 0x3A28AE8
	0x03A28A94 ADRP X8, 0x72C000
	0x03A28A98 LDR X8, [X8 + 0x6A0]
	0x03A28A9C LDR X21, [X20 + 0xC0]
	0x03A28AA0 LDR X0, [X8]
	0x03A28AA4 LDR W8, [X0 + 0xE0]
	0x03A28AA8 CBNZ W8, 0x3A28AB0
	0x03A28AAC BL 0x1C16DFC
	0x03A28AB0 MOV X0, X21
	0x03A28AB4 MOV W1, W31
	0x03A28AB8 BL 0x3A2868C
	0x03A28ABC STR X0, [X20 + 0xF8]
	0x03A28AC0 CBZ X0, 0x3A28AF0
	0x03A28AC4 LDR W8, [X0 + 0x18]
	0x03A28AC8 CMP W8, W19
	0x03A28ACC B.LS 0x3A28AF4
	0x03A28AD0 ADD X8, X0, W19, 0x3, SXTW
	0x03A28AD4 LDR X0, [X8 + 0x20]
	0x03A28AD8 LDP X20, X19, [X31 + 0x20]
	0x03A28ADC LDP X22, X21, [X31 + 0x10]
	0x03A28AE0 LDR X30, [X31], #0x30
	0x03A28AE4 RET
	0x03A28AE8 LDR X0, [X20 + 0xF8]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D14
	003 Move [X31+24], D13
	004 Move [X31+32], D12
	005 Move [X31+40], D11
	006 Move [X31+48], D10
	007 Move [X31+56], D9
	008 Move [X31+64], D8
	009 Move [X31+72], X30
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X1, X31
	013 Move X19, X0
	014 Call Component.get_transform, X0
	015 Compare X0, 0
	016 JumpIfEqual {97}
	017 Move V0, [X19+120]
	018 Move V1, [X19+132]
	019 Move V3, [X19+112]
	020 NotImplemented "Instruction LDUR not yet implemented."
	021 Move X1, X31
	022 Add S2, S0, S1
	023 Add V0, V3, V4
	024 Move S1, V0.S[1]
	025 Call Transform.TransformPoint, X0, X1
	026 Move X0, X19
	027 Move X1, X31
	028 Move V8, V0
	029 Move V9, V1
	030 Move V10, V2
	031 Call Component.get_transform, X0
	032 Compare X0, 0
	033 JumpIfEqual {97}
	034 Move V0, [X19+120]
	035 Move V1, [X19+132]
	036 Move V3, [X19+112]
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 Move X1, X31
	039 Subtract S2, S0, S1
	040 Subtract V0, V3, V4
	041 Move S1, V0.S[1]
	042 Call Transform.TransformPoint, X0, X1
	043 Move X20, 0x9B1000
	044 Move W8, [X20+1925]
	045 Add S0, S8, S0
	046 Add S1, S9, S1
	047 Add S2, S10, S2
	048 Move S3, 0.5
	049 Multiply S13, S0, S3
	050 Multiply S12, S1, S3
	051 Multiply S11, S2, S3
	052 Compare W8, 0
	053 JumpIfNotEqual {59}
	054 Move X0, 0x6CC000
	055 Move X0, [X0+1448]
	056 Call 0x1C17CF4
	057 Move W8, 1
	058 Move [X20+1925], W8
	059 Move X8, 0x6CC000
	060 Move X8, [X8+1448]
	061 Subtract S14, S8, S13
	062 Subtract S9, S9, S12
	063 Subtract S8, S10, S11
	064 Move X0, [X8]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Multiply S0, S14, S14
	070 Multiply S1, S9, S9
	071 Multiply S2, S8, S8
	072 Add S0, S0, S1
	073 Add S0, S2, S0
	074 NotImplemented "Instruction FSQRT not yet implemented."
	075 Add X0, X31, 0
	076 Move V0, V13
	077 Move V1, V12
	078 Move V2, V11
	079 Move X1, X31
	080 Move [X31], X31
	081 Move [X31+8], X31
	082 Call BoundingSphere..ctor, X0, X1, V0
	083 Move V0, [X31]
	084 Move X30, [X31+72]
	085 Move D9, [X31+56]
	086 Move D8, [X31+64]
	087 Move D11, [X31+40]
	088 Move D10, [X31+48]
	089 Move [X19+136], V0
	090 Move X20, [X31+80]
	091 Move X19, [X31+88]
	092 Move D13, [X31+24]
	093 Move D12, [X31+32]
	094 Move V14, [X31+16]
	095 Add X31, X31, 96
	096 Return 
	097 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03A28C8C MOV X1, X22
	0x03A28C90 MOV X2, X31
	0x03A28C94 BL 0x3C354F8
	0x03A28C98 TBZ X0, 0x0, 0x3A28CF0
	0x03A28C9C ADRP X8, 0x72C000
	0x03A28CA0 LDR X8, [X8 + 0x6A0]

ISIL:
	001 Move W8, 257
	002 Move W9, 1
	003 Move X1, X31
	004 NotImplemented "Instruction STURH not yet implemented."
	005 Move [X0+156], W9
	006 Call MonoBehaviour..ctor, X0
	007 Return 

