Type: UnityEngine.Rendering.Universal.LightCookieManager/LightCookieShaderData

Method: UnityEngine.Matrix4x4[] get_worldToLights()

Disassembly:
	0x03A58618 CBNZ X8, 0x3A58654
	0x03A5861C B 0x3A588D8

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: UnityEngine.Rendering.Universal.LightCookieManager/ShaderBitArray get_cookieEnableBits()

Disassembly:
	0x03A58620 LDR X9, [X20 + 0x10]
	0x03A58624 CBZ X9, 0x3A588D8

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: UnityEngine.Vector4[] get_atlasUVRects()

Disassembly:
	0x03A58628 LDR W10, [X9 + 0x18]
	0x03A5862C CMP W21, W10

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Single[] get_lightTypes()

Disassembly:
	0x03A58630 B.CS 0x3A588DC
	0x03A58634 ADD X9, X9, X22, 0x6, LSL

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Boolean get_isUploaded()

Disassembly:
	0x03A58638 LDP V1, V0, [X9 + 0x40]
	0x03A5863C LDP V3, V2, [X9 + 0x20]

ISIL:
	001 Move W0, [X0+80]
	002 Return X0

Method: System.Void set_isUploaded(System.Boolean value)

Disassembly:
	0x03A58640 STR V0, [X31 + 0x4F]
	0x03A58644 STR V1, [X31 + 0x4E]
	0x03A58648 STR V2, [X31 + 0x4D]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+80], W8
	003 Return 

Method: System.Void .ctor(System.Int32 size, System.Boolean useStructuredBuffer)

Disassembly:
	0x03A55734 ADRP X8, 0x69E000
	0x03A55738 LDR X8, [X8 + 0xAC8]
	0x03A5573C MOVZ W1, 0x5
	0x03A55740 LDR X0, [X8]
	0x03A55744 BL 0x1C16D6C
	0x03A55748 CBZ X0, 0x3A55820
	0x03A5574C LDR W8, [X0 + 0x18]
	0x03A55750 MOV X21, X0
	0x03A55754 CBZ W8, 0x3A55824
	0x03A55758 ADRP X8, 0x701000
	0x03A5575C LDR X8, [X8 + 0x1D0]
	0x03A55760 ADD X0, X31, 0x2C
	0x03A55764 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W19, W1
	006 Move X1, X31
	007 Move X20, X0
	008 And W21, W2, 1
	009 Call Object..ctor, X0
	010 Move [X20+20], W21
	011 Move X0, X20
	012 Move W1, W19
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Move X21, [X31+40]
	017 Call LightCookieShaderData.Resize, X0, X1
	018 Return 

Method: System.Void Dispose()

Disassembly:
	0x03A557B8 BL 0x337B6E0
	0x03A557BC LDR W8, [X21 + 0x18]
	0x03A557C0 CMP W8, 0x3
	0x03A557C4 B.LS 0x3A55824
	0x03A557C8 CMP W8, 0x4
	0x03A557CC STR X0, [X21 + 0x38]
	0x03A557D0 B.EQ 0x3A55824
	0x03A557D4 ADRP X8, 0x701000
	0x03A557D8 LDR X8, [X8 + 0x1E8]
	0x03A557DC MOV X0, X21
	0x03A557E0 MOV X1, X31
	0x03A557E4 LDR X8, [X8]
	0x03A557E8 STR X8, [X21 + 0x40]
	0x03A557EC BL 0x32278CC
	0x03A557F0 ADRP X8, 0x69E000
	0x03A557F4 LDR X8, [X8 + 0xA28]
	0x03A557F8 MOV X20, X0
	0x03A557FC LDR X8, [X8]
	0x03A55800 LDR W9, [X8 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+20]
	004 Compare W8, 0
	005 JumpIfEqual {25}
	006 Move X19, X0
	007 Move X0, [X0+56]
	008 Compare X0, 0
	009 JumpIfEqual {12}
	010 Move X1, X31
	011 Call ComputeBuffer.Dispose, X0
	012 Move X0, [X19+64]
	013 Compare X0, 0
	014 JumpIfEqual {17}
	015 Move X1, X31
	016 Call ComputeBuffer.Dispose, X0
	017 Move X0, [X19+72]
	018 Compare X0, 0
	019 JumpIfEqual {25}
	020 Move X1, X31
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Call ComputeBuffer.Dispose, X0
	024 Return 
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Return 

Method: System.Void Resize(System.Int32 size)

Disassembly:
	0x03A5789C BL 0x1C16CF4
	0x03A578A0 MOVZ W8, 0x1
	0x03A578A4 STRB W8, [X21 + 0x1F1]
	0x03A578A8 LDP W1, W2, [X19 + 0x18]
	0x03A578AC LDR X3, [X20]
	0x03A578B0 MOV X0, X19
	0x03A578B4 LDP X20, X19, [X31 + 0x10]
	0x03A578B8 LDP X30, X21, [X31], #0x20
	0x03A578BC B 0x21A0608
	0x03A578C0 SUB X31, X31, 0x40
	0x03A578C4 STR X30, [X31 + 0x10]
	0x03A578C8 STP X22, X21, [X31 + 0x20]
	0x03A578CC STP X20, X19, [X31 + 0x30]
	0x03A578D0 ADRP X21, 0x98B000
	0x03A578D4 LDRB W8, [X21 + 0x1F2]
	0x03A578D8 MOV W19, W1
	0x03A578DC MOV X20, X0
	0x03A578E0 TBNZ X8, 0x0, 0x3A578F8
	0x03A578E4 ADRP X0, 0x6FF000
	0x03A578E8 LDR X0, [X0 + 0x2D0]
	0x03A578EC BL 0x1C16CF4
	0x03A578F0 MOVZ W8, 0x1
	0x03A578F4 STRB W8, [X21 + 0x1F2]
	0x03A578F8 ADRP X21, 0x6FF000
	0x03A578FC LDR X21, [X21 + 0x2D0]
	0x03A57900 MOV X0, X20
	0x03A57904 BL 0x3A57874
	0x03A57908 ADRP X22, 0x98B000
	0x03A5790C LDRB W8, [X22 + 0x1ED]
	0x03A57910 STP X0, X1, [X31]
	0x03A57914 TBNZ X8, 0x0, 0x3A5792C
	0x03A57918 ADRP X0, 0x6FF000
	0x03A5791C LDR X0, [X0 + 0x2B0]
	0x03A57920 BL 0x1C16CF4
	0x03A57924 MOVZ W8, 0x1
	0x03A57928 STRB W8, [X22 + 0x1ED]
	0x03A5792C LDR X8, [X20]
	0x03A57930 MOVZ W9, 0x6
	0x03A57934 MOVN W10, 0x0
	0x03A57938 LDR X3, [X21]
	0x03A5793C LDR W8, [X8]
	0x03A57940 ADD X0, X31, 0x0
	0x03A57944 SDIV W9, W9, W8
	0x03A57948 SUBS W11, W19, W9
	0x03A5794C BIC W12, W11, W11, 0x1F
	0x03A57950 MUL W12, W12, W8
	0x03A57954 LSLV W12, W10, W12
	0x03A57958 ADD W11, W11, 0x1
	0x03A5795C LSLV W10, W10, W8
	0x03A57960 BIC W11, W11, W11, 0x1F
	0x03A57964 ORN W12, W31, W12, 0x0
	0x03A57968 MUL W11, W11, W8
	0x03A5796C LSLV W8, W12, W8
	0x03A57970 ORN W10, W31, W10, 0x0
	0x03A57974 CSEL W9, W19, W9, LT
	0x03A57978 MOVZ W12, 0x1
	0x03A5797C SDIV W8, W8, W10
	0x03A57980 ADD W1, W8, W9
	0x03A57984 LSLV W2, W12, W11
	0x03A57988 BL 0x23D6638
	0x03A5798C LDP X20, X19, [X31 + 0x30]
	0x03A57990 LDP X22, X21, [X31 + 0x20]
	0x03A57994 LDR X30, [X31 + 0x10]
	0x03A57998 ADD X31, X31, 0x40
	0x03A5799C RET
	0x03A579A0 STR X30, [X31 - 0x20]!
	0x03A579A4 STP X20, X19, [X31 + 0x10]
	0x03A579A8 ADRP X20, 0x98B000
	0x03A579AC LDRB W8, [X20 + 0x1ED]
	0x03A579B0 MOV X19, X0
	0x03A579B4 TBNZ X8, 0x0, 0x3A579CC
	0x03A579B8 ADRP X0, 0x6FF000
	0x03A579BC LDR X0, [X0 + 0x2B0]
	0x03A579C0 BL 0x1C16CF4
	0x03A579C4 MOVZ W8, 0x1
	0x03A579C8 STRB W8, [X20 + 0x1ED]
	0x03A579CC LDR X8, [X19]
	0x03A579D0 LDP X20, X19, [X31 + 0x10]
	0x03A579D4 LDR W0, [X8 + 0x4]
	0x03A579D8 LDR X30, [X31], #0x20
	0x03A579DC RET
	0x03A579E0 SUB X31, X31, 0x50
	0x03A579E4 STP X30, X25, [X31 + 0x10]
	0x03A579E8 STP X24, X23, [X31 + 0x20]
	0x03A579EC STP X22, X21, [X31 + 0x30]
	0x03A579F0 STP X20, X19, [X31 + 0x40]
	0x03A579F4 ADRP X25, 0x98B000
	0x03A579F8 ADRP X24, 0x6FF000
	0x03A579FC ADRP X23, 0x6FF000
	0x03A57A00 LDRB W8, [X25 + 0x1F3]
	0x03A57A04 LDR X24, [X24 + 0x2D8]
	0x03A57A08 LDR X23, [X23 + 0x2E0]
	0x03A57A0C MOV W22, W3
	0x03A57A10 MOV W21, W2
	0x03A57A14 MOV W20, W1
	0x03A57A18 MOV X19, X0
	0x03A57A1C TBNZ X8, 0x0, 0x3A57A40
	0x03A57A20 ADRP X0, 0x6FF000
	0x03A57A24 LDR X0, [X0 + 0x2D8]
	0x03A57A28 BL 0x1C16CF4
	0x03A57A2C ADRP X0, 0x6FF000
	0x03A57A30 LDR X0, [X0 + 0x2E0]
	0x03A57A34 BL 0x1C16CF4
	0x03A57A38 MOVZ W8, 0x1
	0x03A57A3C STRB W8, [X25 + 0x1F3]
	0x03A57A40 LDR X2, [X24]
	0x03A57A44 MOVZ W8, 0x10
	0x03A57A48 ADD X1, X31, 0xC
	0x03A57A4C MOV W0, W20
	0x03A57A50 STR W8, [X31 + 0xC]
	0x03A57A54 BL 0x21A0414
	0x03A57A58 MOVZ W8, 0x6
	0x03A57A5C SDIV W8, W8, W21
	0x03A57A60 SUBS W10, W20, W8
	0x03A57A64 BIC W10, W10, W10, 0x1F
	0x03A57A68 MOVN W9, 0x0
	0x03A57A6C MUL W10, W10, W21
	0x03A57A70 LSLV W10, W9, W10
	0x03A57A74 STR X0, [X19 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x98C000
	008 Move W8, [X21+490]
	009 Move W19, W1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {41}
	015 Move X0, 0x6C6000
	016 Move X0, [X0+1264]
	017 Call 0x1C17CF4
	018 Move X0, 0x700000
	019 Move X0, [X0+536]
	020 Call 0x1C17CF4
	021 Move X0, 0x700000
	022 Move X0, [X0+544]
	023 Call 0x1C17CF4
	024 Move X0, 0x700000
	025 Move X0, [X0+552]
	026 Call 0x1C17CF4
	027 Move X0, 0x6C5000
	028 Move X0, [X0+2128]
	029 Call 0x1C17CF4
	030 Move X0, 0x6A1000
	031 Move X0, [X0+2440]
	032 Call 0x1C17CF4
	033 Move X0, 0x69D000
	034 Move X0, [X0+1592]
	035 Call 0x1C17CF4
	036 Move X0, 0x6F8000
	037 Move X0, [X0+72]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X21+490], W8
	041 Move W8, [X20+16]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X23, 0x6A1000
	044 Move X22, 0x6F8000
	045 Move X21, 0x69D000
	046 Move X23, [X23+2440]
	047 Move X22, [X22+72]
	048 Move X21, [X21+1592]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X0, X20
	051 Call LightCookieShaderData.Dispose, X0
	052 Move X0, [X23]
	053 Move W1, W19
	054 Call 0x1C17D6C
	055 Move [X20+24], X0
	056 Move X0, [X22]
	057 Move W1, W19
	058 Call 0x1C17D6C
	059 Move [X20+32], X0
	060 Move X0, [X21]
	061 Move W1, W19
	062 Call 0x1C17D6C
	063 Move [X20+40], X0
	064 Add X0, X20, 48
	065 Move W1, W19
	066 Call ShaderBitArray.Resize, X0, X1
	067 Move W8, [X20+20]
	068 Compare W8, 0
	069 JumpIfEqual {121}
	070 Move X8, 0x6C5000
	071 Move X8, [X8+2128]
	072 Move X0, [X8]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move X8, 0x700000
	078 Move X8, [X8+536]
	079 Move X0, [X8]
	080 Call Marshal.SizeOf
	081 Move X23, 0x6C6000
	082 Move X23, [X23+1264]
	083 Move W21, W0
	084 Move X8, [X23]
	085 Move X0, X8
	086 Call 0x1C17F10
	087 Move W1, W19
	088 Move W2, W21
	089 Move X3, X31
	090 Move X22, X0
	091 Call ComputeBuffer..ctor, X0, X1, X2
	092 Move [X20+56], X22
	093 Move X8, 0x700000
	094 Move X8, [X8+552]
	095 Move X0, [X8]
	096 Call Marshal.SizeOf
	097 Move X8, [X23]
	098 Move W21, W0
	099 Move X0, X8
	100 Call 0x1C17F10
	101 Move W1, W19
	102 Move W2, W21
	103 Move X3, X31
	104 Move X22, X0
	105 Call ComputeBuffer..ctor, X0, X1, X2
	106 Move [X20+64], X22
	107 Move X8, 0x700000
	108 Move X8, [X8+544]
	109 Move X0, [X8]
	110 Call Marshal.SizeOf
	111 Move X8, [X23]
	112 Move W21, W0
	113 Move X0, X8
	114 Call 0x1C17F10
	115 Move W1, W19
	116 Move W2, W21
	117 Move X3, X31
	118 Move X22, X0
	119 Call ComputeBuffer..ctor, X0, X1, X2
	120 Move [X20+72], X22
	121 Move [X20+16], W19
	122 Move X20, [X31+32]
	123 Move X19, [X31+40]
	124 Move X22, [X31+16]
	125 Move X21, [X31+24]
	126 Move X30, [X31+48]
	127 Move X23, [X31+56]
	128 Return 

Method: System.Void Upload(UnityEngine.Rendering.CommandBuffer cmd)

Disassembly:
	0x03A57B0C MOV W1, W31
	0x03A57B10 STP W21, W20, [X8]
	0x03A57B14 STR X31, [X8 + 0x8]
	0x03A57B18 BL 0x3A57734
	0x03A57B1C MOVZ W8, 0xF
	0x03A57B20 STR X8, [X0]
	0x03A57B24 MOV X0, X19
	0x03A57B28 BL 0x3A5769C
	0x03A57B2C LDP X20, X19, [X31 + 0x40]
	0x03A57B30 LDP X22, X21, [X31 + 0x30]
	0x03A57B34 LDP X24, X23, [X31 + 0x20]
	0x03A57B38 LDP X30, X25, [X31 + 0x10]
	0x03A57B3C MOVZ W8, 0x1
	0x03A57B40 STR W8, [X0]
	0x03A57B44 ADD X31, X31, 0x50
	0x03A57B48 RET
	0x03A57B4C SUB X31, X31, 0x70
	0x03A57B50 STP X29, X30, [X31 + 0x10]
	0x03A57B54 STP X28, X27, [X31 + 0x20]
	0x03A57B58 STP X26, X25, [X31 + 0x30]
	0x03A57B5C STP X24, X23, [X31 + 0x40]
	0x03A57B60 STP X22, X21, [X31 + 0x50]
	0x03A57B64 STP X20, X19, [X31 + 0x60]
	0x03A57B68 MOV X19, X2
	0x03A57B6C MOV W21, W1
	0x03A57B70 MOV X20, X0
	0x03A57B74 STR X31, [X2]
	0x03A57B78 BL 0x3A5769C
	0x03A57B7C TBNZ X21, 0x1F, 0x3A57BB0
	0x03A57B80 MOV X22, X0
	0x03A57B84 MOV W25, W21
	0x03A57B88 MOVZ W26, 0x1
	0x03A57B8C ADD W8, W25, W26
	0x03A57B90 SUB W8, W8, 0x1
	0x03A57B94 LDR W8, [X22, W8, UXTW]
	0x03A57B98 CMP W8, 0x0
	0x03A57B9C B.GT 0x3A57BB8
	0x03A57BA0 SUB X26, X26, 0x1
	0x03A57BA4 ADD W8, W25, W26
	0x03A57BA8 CMP W8, 0x0
	0x03A57BAC B.GT 0x3A57B8C
	0x03A57BB0 MOV W0, W31
	0x03A57BB4 B 0x3A57D50
	0x03A57BB8 ADD X8, X26, W21, UXTW
	0x03A57BBC SUB X23, X8, 0x1
	0x03A57BC0 MOV X0, X20
	0x03A57BC4 MOV W1, W23
	0x03A57BC8 BL 0x3A578C0
	0x03A57BCC LDR W8, [X22, W23, UXTW]
	0x03A57BD0 MOV X24, X0
	0x03A57BD4 MOV W1, W23
	0x03A57BD8 SUB W8, W8, 0x1
	0x03A57BDC STR W8, [X22, W23, UXTW]
	0x03A57BE0 LDR W27, [X0, W8, SXTW]
	0x03A57BE4 MOV X0, X20
	0x03A57BE8 BL 0x3A57734
	0x03A57BEC LDR X9, [X0, W27, SXTW]
	0x03A57BF0 SXTW X8, W27
	0x03A57BF4 CBZ X9, 0x3A57C40
	0x03A57BF8 SUB X10, X31, X9
	0x03A57BFC MOVZ X12, 0xC3300000
	0x03A57C00 AND X10, X9, X10, 0x0
	0x03A57C04 FMOV D0, X12
	0x03A57C08 UBFM X12, X10, 0x20, 0x3F
	0x03A57C0C CMP W10, 0x0
	0x03A57C10 CSEL X10, X12, X10, EQ
	0x03A57C14 MOVZ X12, 0x43300000
	0x03A57C18 BFM X12, X10, 0x0, 0x1F
	0x03A57C1C FMOV D1, X12
	0x03A57C20 MOVN W11, 0x3FE
	0x03A57C24 MOVN W10, 0x3DE
	0x03A57C28 FADD D0, D1, D0
	0x03A57C2C CSEL W10, W10, W11, EQ
	0x03A57C30 FMOV X11, D0
	0x03A57C34 SBFM X11, X11, 0x34, 0x3F
	0x03A57C38 ADD W10, W10, W11
	0x03A57C3C B 0x3A57C44
	0x03A57C40 MOVZ W10, 0x40
	0x03A57C44 MOVZ W11, 0x1
	0x03A57C48 LSLV X11, X11, X10
	0x03A57C4C EOR X9, X11, X9, 0x0
	0x03A57C50 STR X9, [X0, X8, LSL #3]
	0x03A57C54 CBZ X9, 0x3A57C6C
	0x03A57C58 AND X8, X23, 0x0
	0x03A57C5C LDRSW X9, [X22, X8, LSL #2]
	0x03A57C60 ADD W11, W9, 0x1
	0x03A57C64 STR W11, [X22, X8, LSL #2]
	0x03A57C68 STR W27, [X24, X9, LSL #2]
	0x03A57C6C CMP W23, W21
	0x03A57C70 ADD W24, W10, W27, 0x6, LSL
	0x03A57C74 B.GE 0x3A57D48
	0x03A57C78 STR X19, [X31 + 0x8]
	0x03A57C7C ADRP X27, 0x98B000
	0x03A57C80 ADD X28, X22, W21, 0x2, SXTW
	0x03A57C84 ADRP X21, 0x6FF000
	0x03A57C88 LDRB W8, [X27 + 0x1ED]
	0x03A57C8C LDR X21, [X21 + 0x2B0]
	0x03A57C90 TBNZ X8, 0x0, 0x3A57CA4
	0x03A57C94 MOV X0, X21
	0x03A57C98 BL 0x1C16CF4
	0x03A57C9C MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x98C000
	006 Move W8, [X21+491]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x700000
	014 Move X0, [X0+392]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+491], W8
	018 Move X21, 0x700000
	019 Move W8, [X19+20]
	020 Move X21, [X21+392]
	021 Compare W8, 0
	022 JumpIfEqual {69}
	023 Move X0, [X19+56]
	024 Compare X0, 0
	025 JumpIfEqual {116}
	026 Move X1, [X19+24]
	027 Move X2, X31
	028 Call ComputeBuffer.SetData, X0, X1
	029 Move X0, [X19+64]
	030 Compare X0, 0
	031 JumpIfEqual {116}
	032 Move X1, [X19+32]
	033 Move X2, X31
	034 Call ComputeBuffer.SetData, X0, X1
	035 Move X0, [X19+72]
	036 Compare X0, 0
	037 JumpIfEqual {116}
	038 Move X1, [X19+40]
	039 Move X2, X31
	040 Call ComputeBuffer.SetData, X0, X1
	041 Move X0, [X21]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Compare X20, 0
	047 JumpIfEqual {116}
	048 Move X8, [X21]
	049 Move X2, [X19+56]
	050 Move X0, X20
	051 Move X3, X31
	052 Move X8, [X8+184]
	053 Move W1, [X8+32]
	054 Call CommandBuffer.SetGlobalBuffer, X0, X1, X2
	055 Move X8, [X21]
	056 Move X2, [X19+64]
	057 Move X0, X20
	058 Move X3, X31
	059 Move X8, [X8+184]
	060 Move W1, [X8+24]
	061 Call CommandBuffer.SetGlobalBuffer, X0, X1, X2
	062 Move X8, [X21]
	063 Move X2, [X19+72]
	064 Move X0, X20
	065 Move X3, X31
	066 Move X8, [X8+184]
	067 Move W1, [X8+36]
	068 Call CommandBuffer.SetGlobalBuffer, X0, X1, X2
	069 Move X0, [X21]
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Compare X20, 0
	075 JumpIfEqual {116}
	076 Move X8, [X21]
	077 Move X2, [X19+24]
	078 Move X0, X20
	079 Move X3, X31
	080 Move X8, [X8+184]
	081 Move W1, [X8+40]
	082 Call CommandBuffer.SetGlobalMatrixArray, X0, X1, X2
	083 Move X8, [X21]
	084 Move X2, [X19+32]
	085 Move X0, X20
	086 Move X3, X31
	087 Move X8, [X8+184]
	088 Move W1, [X8+28]
	089 Call CommandBuffer.SetGlobalVectorArray, X0, X1, X2
	090 Move X8, [X21]
	091 Move X2, [X19+40]
	092 Move X0, X20
	093 Move X3, X31
	094 Move X8, [X8+184]
	095 Move W1, [X8+44]
	096 Call CommandBuffer.SetGlobalFloatArray, X0, X1, X2
	097 Move X0, [X21]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move X8, [X21]
	103 Move X2, [X19+48]
	104 Move X0, X20
	105 Move X3, X31
	106 Move X8, [X8+184]
	107 Move W1, [X8+20]
	108 Call CommandBuffer.SetGlobalFloatArray, X0, X1, X2
	109 Move W8, 1
	110 Move [X19+80], W8
	111 Move X20, [X31+16]
	112 Move X19, [X31+24]
	113 Move X30, [X31+32]
	114 Move X21, [X31+40]
	115 Return 
	116 Call 0x1C17F20

Method: System.Void Clear(UnityEngine.Rendering.CommandBuffer cmd)

Disassembly:
	0x03A56058 LDRB W8, [X20 + 0x1DC]
	0x03A5605C MOV W19, W4
	0x03A56060 MOV X21, X3
	0x03A56064 MOV X22, X2
	0x03A56068 MOV X23, X1
	0x03A5606C MOV X24, X0
	0x03A56070 TBNZ X8, 0x0, 0x3A560AC
	0x03A56074 ADRP X0, 0x69D000
	0x03A56078 LDR X0, [X0 + 0xA28]
	0x03A5607C BL 0x1C16CF4
	0x03A56080 ADRP X0, 0x700000
	0x03A56084 LDR X0, [X0 + 0x200]
	0x03A56088 BL 0x1C16CF4
	0x03A5608C ADRP X0, 0x700000
	0x03A56090 LDR X0, [X0 + 0x208]
	0x03A56094 BL 0x1C16CF4
	0x03A56098 ADRP X0, 0x700000
	0x03A5609C LDR X0, [X0 + 0x210]
	0x03A560A0 BL 0x1C16CF4
	0x03A560A4 MOVZ W8, 0x1
	0x03A560A8 STRB W8, [X20 + 0x1DC]
	0x03A560AC LDR W8, [X22 + 0xC]
	0x03A560B0 CMP W8, 0x1
	0x03A560B4 B.LT 0x3A56250
	0x03A560B8 ADRP X27, 0x700000
	0x03A560BC ADRP X8, 0xFFFFFFFFFD093000
	0x03A560C0 ADRP X25, 0x6A4000
	0x03A560C4 LDR X27, [X27 + 0x200]
	0x03A560C8 LDR V12, [X8 + 0xF20]
	0x03A560CC LDR X25, [X25 + 0x9A0]
	0x03A560D0 MOV X20, X31
	0x03A560D4 ADD X28, X21, 0x2C
	0x03A560D8 ADRP X29, 0x982000
	0x03A560DC FMOV S13, 1
	0x03A560E0 LDR X2, [X27]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x98D000
	006 Move W8, [X21+492]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x701000
	014 Move X0, [X0+392]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+492], W8
	018 Move W8, [X19+80]
	019 Compare W8, 0
	020 JumpIfEqual {40}
	021 Move X21, 0x701000
	022 Move X21, [X21+392]
	023 Add X0, X19, 48
	024 Call ShaderBitArray.Clear, X0
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Compare X20, 0
	031 JumpIfEqual {45}
	032 Move X8, [X21]
	033 Move X2, [X19+48]
	034 Move X0, X20
	035 Move X3, X31
	036 Move X8, [X8+184]
	037 Move W1, [X8+20]
	038 Call CommandBuffer.SetGlobalFloatArray, X0, X1, X2
	039 Move [X19+80], W31
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return 
	045 Call 0x1C17F20

