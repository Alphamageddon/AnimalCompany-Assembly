Type: UnityEngine.Rendering.Universal.CameraData

Method: System.Void SetViewAndProjectionMatrix(UnityEngine.Matrix4x4 viewMatrix, UnityEngine.Matrix4x4 projectionMatrix)

Disassembly:
	0x03A938AC LDR X0, [X0 + 0x4C0]
	0x03A938B0 BL 0x1C16CF4
	0x03A938B4 ADRP X0, 0x6C4000
	0x03A938B8 LDR X0, [X0 + 0x478]
	0x03A938BC BL 0x1C16CF4
	0x03A938C0 ADRP X0, 0x6C4000
	0x03A938C4 LDR X0, [X0 + 0x4C8]
	0x03A938C8 BL 0x1C16CF4
	0x03A938CC ADRP X0, 0x6C4000
	0x03A938D0 LDR X0, [X0 + 0x490]
	0x03A938D4 BL 0x1C16CF4
	0x03A938D8 ADRP X0, 0x6C4000
	0x03A938DC LDR X0, [X0 + 0x4D0]
	0x03A938E0 BL 0x1C16CF4
	0x03A938E4 ADRP X0, 0x6C4000
	0x03A938E8 LDR X0, [X0 + 0x4D8]
	0x03A938EC BL 0x1C16CF4
	0x03A938F0 ADRP X0, 0x6C4000
	0x03A938F4 LDR X0, [X0 + 0x488]
	0x03A938F8 BL 0x1C16CF4
	0x03A938FC ADRP X0, 0x6C3000
	0x03A93900 LDR X0, [X0 + 0xEB8]
	0x03A93904 BL 0x1C16CF4
	0x03A93908 ADRP X0, 0x6C4000
	0x03A9390C LDR X0, [X0 + 0x4E0]
	0x03A93910 BL 0x1C16CF4
	0x03A93914 ADRP X0, 0x6C1000
	0x03A93918 LDR X0, [X0 + 0x820]
	0x03A9391C BL 0x1C16CF4
	0x03A93920 ADRP X0, 0x6C4000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move V1, [X1+32]
	005 Move V0, [X1+48]
	006 Move V3, [X1]
	007 Move V2, [X1+16]
	008 Move X20, 0x946000
	009 Move X19, X0
	010 Move [X0+32], V1
	011 Move [X0+40], V0
	012 Move [X0], V3
	013 Move [X0+8], V2
	014 Move V1, [X2+32]
	015 Move V0, [X2+48]
	016 Move V3, [X2]
	017 Move V2, [X2+16]
	018 Move [X0+96], V1
	019 Move [X0+104], V0
	020 Move [X0+64], V3
	021 Move [X0+72], V2
	022 Move W8, [X20+2752]
	023 Compare W8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, 0x665000
	026 Move X0, [X0+624]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2752], W8
	030 Move X8, 0x665000
	031 Move X8, [X8+624]
	032 Move X8, [X8]
	033 Move X8, [X8+184]
	034 Move V1, [X8+96]
	035 Move V0, [X8+112]
	036 Move V3, [X8+64]
	037 Move V2, [X8+80]
	038 Move [X19+160], V1
	039 Move [X19+168], V0
	040 Move [X19+128], V3
	041 Move [X19+136], V2
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Return 

Method: System.Void SetViewProjectionAndJitterMatrix(UnityEngine.Matrix4x4 viewMatrix, UnityEngine.Matrix4x4 projectionMatrix, UnityEngine.Matrix4x4 jitterMatrix)

Disassembly:
	0x03A91038 B 0x3A9103C
	0x03A9103C MOV X20, X0
	0x03A91040 CMP W1, 0x1
	0x03A91044 B.NE 0x3A91070
	0x03A91048 MOV X0, X20
	0x03A9104C BL 0x3EB1AD0
	0x03A91050 LDR X19, [X0]
	0x03A91054 BL 0x3EB1AE0
	0x03A91058 ADD X0, X31, 0x8
	0x03A9105C MOV X1, X31
	0x03A91060 BL 0x39B1DB4
	0x03A91064 CBNZ X19, 0x3A91078
	0x03A91068 MOV W20, W31

ISIL:
	001 Move V1, [X1+32]
	002 Move V0, [X1+48]
	003 Move V3, [X1]
	004 Move V2, [X1+16]
	005 Move [X0+32], V1
	006 Move [X0+40], V0
	007 Move [X0], V3
	008 Move [X0+8], V2
	009 Move V1, [X2+32]
	010 Move V0, [X2+48]
	011 Move V3, [X2]
	012 Move V2, [X2+16]
	013 Move [X0+96], V1
	014 Move [X0+104], V0
	015 Move [X0+64], V3
	016 Move [X0+72], V2
	017 Move V1, [X3+32]
	018 Move V0, [X3+48]
	019 Move V3, [X3]
	020 Move V2, [X3+16]
	021 Move [X0+160], V1
	022 Move [X0+168], V0
	023 Move [X0+128], V3
	024 Move [X0+136], V2
	025 Return 

Method: System.Void PushBuiltinShaderConstantsXR(UnityEngine.Rendering.CommandBuffer cmd, System.Boolean renderIntoTexture)

Disassembly:
	0x03A93924 LDR X0, [X0 + 0x4E8]
	0x03A93928 BL 0x1C16CF4
	0x03A9392C ADRP X0, 0x6C4000
	0x03A93930 LDR X0, [X0 + 0x4F0]
	0x03A93934 BL 0x1C16CF4
	0x03A93938 ADRP X0, 0x6C4000
	0x03A9393C LDR X0, [X0 + 0x4F8]
	0x03A93940 BL 0x1C16CF4
	0x03A93944 ADRP X0, 0x6C4000
	0x03A93948 LDR X0, [X0 + 0x480]
	0x03A9394C BL 0x1C16CF4
	0x03A93950 ADRP X0, 0x6C4000
	0x03A93954 LDR X0, [X0 + 0x500]
	0x03A93958 BL 0x1C16CF4
	0x03A9395C ADRP X0, 0x6BD000
	0x03A93960 LDR X0, [X0 + 0x5C0]
	0x03A93964 BL 0x1C16CF4
	0x03A93968 ADRP X0, 0x6C4000
	0x03A9396C LDR X0, [X0 + 0x508]
	0x03A93970 BL 0x1C16CF4
	0x03A93974 ADRP X0, 0x6C4000
	0x03A93978 LDR X0, [X0 + 0x510]
	0x03A9397C BL 0x1C16CF4
	0x03A93980 ADRP X0, 0x6BD000
	0x03A93984 LDR X0, [X0 + 0x5B8]
	0x03A93988 BL 0x1C16CF4
	0x03A9398C ADRP X0, 0x6C4000
	0x03A93990 LDR X0, [X0 + 0x518]
	0x03A93994 BL 0x1C16CF4
	0x03A93998 ADRP X0, 0x6C4000
	0x03A9399C LDR X0, [X0 + 0x520]
	0x03A939A0 BL 0x1C16CF4
	0x03A939A4 ADRP X0, 0x6C3000
	0x03A939A8 LDR X0, [X0 + 0xEC8]
	0x03A939AC BL 0x1C16CF4
	0x03A939B0 ADRP X0, 0x6C4000
	0x03A939B4 LDR X0, [X0 + 0x528]
	0x03A939B8 BL 0x1C16CF4
	0x03A939BC ADRP X0, 0x6C4000
	0x03A939C0 LDR X0, [X0 + 0x530]
	0x03A939C4 BL 0x1C16CF4
	0x03A939C8 ADRP X0, 0x6C4000
	0x03A939CC LDR X0, [X0 + 0x538]
	0x03A939D0 BL 0x1C16CF4
	0x03A939D4 ADRP X0, 0x6C4000
	0x03A939D8 LDR X0, [X0 + 0x540]
	0x03A939DC BL 0x1C16CF4
	0x03A939E0 ADRP X0, 0x6C4000
	0x03A939E4 LDR X0, [X0 + 0x548]
	0x03A939E8 BL 0x1C16CF4
	0x03A939EC ADRP X0, 0x6C4000
	0x03A939F0 LDR X0, [X0 + 0x550]
	0x03A939F4 BL 0x1C16CF4
	0x03A939F8 ADRP X0, 0x6C4000
	0x03A939FC LDR X0, [X0 + 0x558]
	0x03A93A00 BL 0x1C16CF4
	0x03A93A04 ADRP X0, 0x6BD000
	0x03A93A08 LDR X0, [X0 + 0x5A8]
	0x03A93A0C BL 0x1C16CF4
	0x03A93A10 ADRP X0, 0x6C4000
	0x03A93A14 LDR X0, [X0 + 0x560]
	0x03A93A18 BL 0x1C16CF4
	0x03A93A1C ADRP X0, 0x6C3000
	0x03A93A20 LDR X0, [X0 + 0x3D0]
	0x03A93A24 BL 0x1C16CF4
	0x03A93A28 ADRP X0, 0x6C4000
	0x03A93A2C LDR X0, [X0 + 0x568]
	0x03A93A30 BL 0x1C16CF4
	0x03A93A34 ADRP X0, 0x6C4000
	0x03A93A38 LDR X0, [X0 + 0x570]
	0x03A93A3C BL 0x1C16CF4
	0x03A93A40 ADRP X0, 0x6C4000
	0x03A93A44 LDR X0, [X0 + 0x578]
	0x03A93A48 BL 0x1C16CF4
	0x03A93A4C ADRP X0, 0x6C4000
	0x03A93A50 LDR X0, [X0 + 0x458]
	0x03A93A54 BL 0x1C16CF4
	0x03A93A58 ADRP X0, 0x6C4000
	0x03A93A5C LDR X0, [X0 + 0x580]
	0x03A93A60 BL 0x1C16CF4
	0x03A93A64 ADRP X0, 0x6C4000
	0x03A93A68 LDR X0, [X0 + 0x588]
	0x03A93A6C BL 0x1C16CF4
	0x03A93A70 ADRP X0, 0x6C4000
	0x03A93A74 LDR X0, [X0 + 0x470]
	0x03A93A78 BL 0x1C16CF4
	0x03A93A7C ADRP X0, 0x6C4000
	0x03A93A80 LDR X0, [X0 + 0x590]
	0x03A93A84 BL 0x1C16CF4
	0x03A93A88 ADRP X0, 0x6C4000
	0x03A93A8C LDR X0, [X0 + 0x598]
	0x03A93A90 BL 0x1C16CF4
	0x03A93A94 ADRP X0, 0x6C0000
	0x03A93A98 LDR X0, [X0 + 0x3B8]
	0x03A93A9C BL 0x1C16CF4
	0x03A93AA0 ADRP X0, 0x6C4000
	0x03A93AA4 LDR X0, [X0 + 0x5A0]
	0x03A93AA8 BL 0x1C16CF4
	0x03A93AAC MOVZ W8, 0x1
	0x03A93AB0 STRB W8, [X22 + 0x392]
	0x03A93AB4 LDR X0, [X23]
	0x03A93AB8 MOV X1, X31
	0x03A93ABC BL 0x3C124EC
	0x03A93AC0 LDR X8, [X19]
	0x03A93AC4 MOV X1, X31
	0x03A93AC8 LDR X8, [X8 + 0xB8]
	0x03A93ACC STR W0, [X8]
	0x03A93AD0 LDR X0, [X21]
	0x03A93AD4 BL 0x3C124EC
	0x03A93AD8 LDR X8, [X19]
	0x03A93ADC MOV X1, X31
	0x03A93AE0 LDR X8, [X8 + 0xB8]
	0x03A93AE4 STR W0, [X8 + 0x4]
	0x03A93AE8 LDR X0, [X20]
	0x03A93AEC BL 0x3C124EC
	0x03A93AF0 LDR X8, [X19]
	0x03A93AF4 MOV X1, X31
	0x03A93AF8 LDR X8, [X8 + 0xB8]
	0x03A93AFC STR W0, [X8 + 0x8]
	0x03A93B00 LDR X0, [X29]
	0x03A93B04 BL 0x3C124EC
	0x03A93B08 LDR X8, [X19]
	0x03A93B0C MOV X1, X31
	0x03A93B10 LDR X8, [X8 + 0xB8]
	0x03A93B14 STR W0, [X8 + 0xC]
	0x03A93B18 LDR X0, [X28]
	0x03A93B1C BL 0x3C124EC
	0x03A93B20 LDR X8, [X19]
	0x03A93B24 MOV X1, X31
	0x03A93B28 LDR X8, [X8 + 0xB8]
	0x03A93B2C STR W0, [X8 + 0x10]
	0x03A93B30 LDR X0, [X27]
	0x03A93B34 BL 0x3C124EC
	0x03A93B38 LDR X8, [X19]
	0x03A93B3C MOV X1, X31
	0x03A93B40 LDR X8, [X8 + 0xB8]
	0x03A93B44 STR W0, [X8 + 0x14]
	0x03A93B48 LDR X0, [X26]
	0x03A93B4C BL 0x3C124EC
	0x03A93B50 LDR X8, [X19]
	0x03A93B54 MOV X1, X31
	0x03A93B58 LDR X8, [X8 + 0xB8]
	0x03A93B5C STR W0, [X8 + 0x18]
	0x03A93B60 LDR X0, [X25]
	0x03A93B64 BL 0x3C124EC
	0x03A93B68 LDR X8, [X19]
	0x03A93B6C MOV X1, X31

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X29
	005 Move [X31+32], X30
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Subtract X31, X31, 512
	012 Move X22, 0x950000
	013 Move W8, [X22+903]
	014 Move W21, W2
	015 Move X19, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x6C2000
	022 Move X0, [X0+32]
	023 Call 0x1C17CF4
	024 Move X0, 0x6BE000
	025 Move X0, [X0+1192]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+903], W8
	029 NotImplemented "Instruction MOVI not yet implemented."
	030 Move [X31+480], V0
	031 Move [X31+488], V0
	032 Move [X31+448], V0
	033 Move [X31+456], V0
	034 Move X0, [X20+376]
	035 Compare X0, 0
	036 JumpIfEqual {132}
	037 Move X1, X31
	038 Call XRPass.get_enabled, X0
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {181}
	043 Add X8, X31, 384
	044 Move X0, X20
	045 Move W1, W31
	046 Call CameraData.GetViewMatrix, X0, X1
	047 Add X8, X31, 320
	048 Move X0, X20
	049 Move W1, W31
	050 Call CameraData.GetProjectionMatrix, X0, X1
	051 Compare X19, 0
	052 JumpIfEqual {132}
	053 Move V0, [X31+384]
	054 Move V1, [X31+400]
	055 Move V2, [X31+416]
	056 Move V3, [X31+432]
	057 Add X1, X31, 256
	058 Add X2, X31, 192
	059 Move [X31+256], V0
	060 Move [X31+264], V1
	061 Move V0, [X31+320]
	062 Move V1, [X31+336]
	063 Move [X31+288], V2
	064 Move [X31+296], V3
	065 Move V2, [X31+352]
	066 Move V3, [X31+368]
	067 Move X0, X19
	068 Move X3, X31
	069 Move [X31+192], V0
	070 Move [X31+200], V1
	071 Move [X31+224], V2
	072 Move [X31+232], V3
	073 Call CommandBuffer.SetViewProjectionMatrices, X0, X1, X2
	074 Move X0, [X20+376]
	075 Compare X0, 0
	076 JumpIfEqual {132}
	077 Move X1, X31
	078 Call XRPass.get_singlePassEnabled, X0
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {133}
	083 Move X0, [X20+376]
	084 Compare X0, 0
	085 JumpIfEqual {132}
	086 Move X23, 0x6BE000
	087 Move X23, [X23+1192]
	088 Move W22, W31
	089 And W21, W21, 1
	090 Move X1, X31
	091 Call XRPass.get_viewCount, X0
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Add X8, X31, 384
	094 Move X0, X20
	095 Move W1, W22
	096 Call CameraData.GetViewMatrix, X0, X1
	097 Add X8, X31, 320
	098 Move X0, X20
	099 Move W1, W22
	100 Call CameraData.GetProjectionMatrix, X0, X1
	101 Move X0, [X23]
	102 Move W8, [X0+224]
	103 Compare W8, 0
	104 JumpIfNotEqual {106}
	105 Call 0x1C17DFC
	106 Move V0, [X31+384]
	107 Move V1, [X31+400]
	108 Move V2, [X31+416]
	109 Move V3, [X31+432]
	110 Add X0, X31, 128
	111 Add X1, X31, 64
	112 Move [X31+128], V0
	113 Move [X31+136], V1
	114 Move V0, [X31+320]
	115 Move V1, [X31+336]
	116 Move [X31+160], V2
	117 Move [X31+168], V3
	118 Move V2, [X31+352]
	119 Move V3, [X31+368]
	120 Move W2, W21
	121 Move W3, W22
	122 Move X4, X31
	123 Move [X31+64], V0
	124 Move [X31+72], V1
	125 Move [X31+96], V2
	126 Move [X31+104], V3
	127 Call XRBuiltinShaderConstants.UpdateBuiltinShaderConstants, X0, X1, X2, X3
	128 Move X0, [X20+376]
	129 Add W22, W22, 1
	130 Compare X0, 0
	131 JumpIfNotEqual {90}
	132 Call 0x1C17F20
	133 Add X8, X31, 0
	134 Move X0, X20
	135 Move W1, W31
	136 Call CameraData.GetViewMatrix, X0, X1
	137 Add X8, X31, 384
	138 Add X0, X31, 0
	139 Move X1, X31
	140 Call Matrix4x4.Inverse, X0
	141 Move V0, [X31+384]
	142 Move V1, [X31+400]
	143 Move V2, [X31+416]
	144 Move V3, [X31+432]
	145 Add X0, X31, 448
	146 Move W1, 3
	147 Move X2, X31
	148 Move [X31+448], V0
	149 Move [X31+456], V1
	150 Move [X31+480], V2
	151 Move [X31+488], V3
	152 Call Matrix4x4.GetColumn, X0, X1
	153 Move X20, 0x6C2000
	154 Move X20, [X20+32]
	155 Move V8, V0
	156 Move V9, V1
	157 Move V10, V2
	158 Move X0, [X20]
	159 Move W8, [X0+224]
	160 Compare W8, 0
	161 JumpIfNotEqual {164}
	162 Call 0x1C17DFC
	163 Move X0, [X20]
	164 Move X8, [X0+184]
	165 Move S3, W31
	166 Move X0, X19
	167 Move V0, V8
	168 Move W1, [X8+52]
	169 Move V1, V9
	170 Move V2, V10
	171 Move X2, X31
	172 Call CommandBuffer.SetGlobalVector, X0, X1, X2
	173 Move X0, [X23]
	174 Move W8, [X0+224]
	175 Compare W8, 0
	176 JumpIfNotEqual {178}
	177 Call 0x1C17DFC
	178 Move X0, X19
	179 Move X1, X31
	180 Call XRBuiltinShaderConstants.SetBuiltinShaderConstants, X0
	181 Add X31, X31, 512
	182 Move X20, [X31+64]
	183 Move X19, [X31+72]
	184 Move X22, [X31+48]
	185 Move X21, [X31+56]
	186 Move X30, [X31+32]
	187 Move X23, [X31+40]
	188 Move X29, [X31+24]
	189 Move D9, [X31+8]
	190 Move D8, [X31+16]
	191 Move V10, [X31+80]
	192 Return 

Method: UnityEngine.Matrix4x4 GetViewMatrix(System.Int32 viewIndex = 0)

Disassembly:
	0x03A93B70 LDR X8, [X8 + 0xB8]
	0x03A93B74 STR W0, [X8 + 0x1C]
	0x03A93B78 LDR X0, [X24]
	0x03A93B7C BL 0x3C124EC
	0x03A93B80 LDR X8, [X19]
	0x03A93B84 MOV X1, X31
	0x03A93B88 LDR X8, [X8 + 0xB8]
	0x03A93B8C STR W0, [X8 + 0x20]
	0x03A93B90 ADRP X8, 0x6C4000
	0x03A93B94 LDR X8, [X8 + 0x518]
	0x03A93B98 LDR X0, [X8]
	0x03A93B9C BL 0x3C124EC
	0x03A93BA0 LDR X8, [X19]
	0x03A93BA4 MOV X1, X31
	0x03A93BA8 LDR X8, [X8 + 0xB8]
	0x03A93BAC STR W0, [X8 + 0x24]
	0x03A93BB0 ADRP X8, 0x6C4000
	0x03A93BB4 LDR X8, [X8 + 0x558]
	0x03A93BB8 LDR X0, [X8]
	0x03A93BBC BL 0x3C124EC
	0x03A93BC0 LDR X8, [X19]
	0x03A93BC4 MOV X1, X31
	0x03A93BC8 LDR X8, [X8 + 0xB8]
	0x03A93BCC STR W0, [X8 + 0x28]
	0x03A93BD0 ADRP X8, 0x6C4000
	0x03A93BD4 LDR X8, [X8 + 0x4D8]
	0x03A93BD8 LDR X0, [X8]
	0x03A93BDC BL 0x3C124EC
	0x03A93BE0 LDR X8, [X19]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, X0
	007 Move X0, [X0+376]
	008 Compare X0, 0
	009 JumpIfEqual {43}
	010 Move W20, W1
	011 Move X1, X31
	012 Move X19, X8
	013 Call XRPass.get_enabled, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {29}
	018 Move X0, [X21+376]
	019 Compare X0, 0
	020 JumpIfEqual {43}
	021 Add X8, X31, 0
	022 Move W1, W20
	023 Move X2, X31
	024 Call XRPass.GetViewMatrix, X0, X1
	025 Move V1, [X31+32]
	026 Move V0, [X31+48]
	027 Move V3, [X31]
	028 Move V2, [X31+16]
	029 Move V1, [X21+32]
	030 Move V0, [X21+48]
	031 Move V3, [X21]
	032 Move V2, [X21+16]
	033 Move [X19+32], V1
	034 Move [X19+40], V0
	035 Move [X19], V3
	036 Move [X19+8], V2
	037 Move X20, [X31+80]
	038 Move X19, [X31+88]
	039 Move X30, [X31+64]
	040 Move X21, [X31+72]
	041 Add X31, X31, 96
	042 Return X0
	043 Call 0x1C17F20

Method: UnityEngine.Matrix4x4 GetProjectionMatrix(System.Int32 viewIndex = 0)

Disassembly:
	0x03A93BE4 MOV X1, X31
	0x03A93BE8 LDR X8, [X8 + 0xB8]
	0x03A93BEC STR W0, [X8 + 0x2C]
	0x03A93BF0 ADRP X8, 0x6C4000
	0x03A93BF4 LDR X8, [X8 + 0x508]
	0x03A93BF8 LDR X0, [X8]
	0x03A93BFC BL 0x3C124EC
	0x03A93C00 LDR X8, [X19]
	0x03A93C04 MOV X1, X31
	0x03A93C08 LDR X8, [X8 + 0xB8]
	0x03A93C0C STR W0, [X8 + 0x30]
	0x03A93C10 ADRP X8, 0x6C4000
	0x03A93C14 LDR X8, [X8 + 0x550]
	0x03A93C18 LDR X0, [X8]
	0x03A93C1C BL 0x3C124EC
	0x03A93C20 LDR X8, [X19]
	0x03A93C24 MOV X1, X31
	0x03A93C28 LDR X8, [X8 + 0xB8]
	0x03A93C2C STR W0, [X8 + 0x34]
	0x03A93C30 ADRP X8, 0x6C4000
	0x03A93C34 LDR X8, [X8 + 0x580]
	0x03A93C38 LDR X0, [X8]
	0x03A93C3C BL 0x3C124EC
	0x03A93C40 LDR X8, [X19]
	0x03A93C44 MOV X1, X31
	0x03A93C48 LDR X8, [X8 + 0xB8]
	0x03A93C4C STR W0, [X8 + 0x38]
	0x03A93C50 ADRP X8, 0x6C4000
	0x03A93C54 LDR X8, [X8 + 0x4B0]
	0x03A93C58 LDR X0, [X8]
	0x03A93C5C BL 0x3C124EC
	0x03A93C60 LDR X8, [X19]
	0x03A93C64 MOV X1, X31
	0x03A93C68 LDR X8, [X8 + 0xB8]
	0x03A93C6C STR W0, [X8 + 0x3C]
	0x03A93C70 ADRP X8, 0x6C4000
	0x03A93C74 LDR X8, [X8 + 0x540]
	0x03A93C78 LDR X0, [X8]
	0x03A93C7C BL 0x3C124EC
	0x03A93C80 LDR X8, [X19]
	0x03A93C84 MOV X1, X31
	0x03A93C88 LDR X8, [X8 + 0xB8]
	0x03A93C8C STR W0, [X8 + 0x40]
	0x03A93C90 ADRP X8, 0x6C4000
	0x03A93C94 LDR X8, [X8 + 0x538]
	0x03A93C98 LDR X0, [X8]
	0x03A93C9C BL 0x3C124EC
	0x03A93CA0 LDR X8, [X19]
	0x03A93CA4 MOV X1, X31
	0x03A93CA8 LDR X8, [X8 + 0xB8]
	0x03A93CAC STR W0, [X8 + 0x44]
	0x03A93CB0 ADRP X8, 0x6C4000
	0x03A93CB4 LDR X8, [X8 + 0x548]
	0x03A93CB8 LDR X0, [X8]
	0x03A93CBC BL 0x3C124EC
	0x03A93CC0 LDR X8, [X19]
	0x03A93CC4 MOV X1, X31
	0x03A93CC8 LDR X8, [X8 + 0xB8]
	0x03A93CCC STR W0, [X8 + 0x48]
	0x03A93CD0 ADRP X8, 0x6C4000
	0x03A93CD4 LDR X8, [X8 + 0x568]

ISIL:
	001 Subtract X31, X31, 432
	002 Move [X31+384], X29
	003 Move [X31+400], X30
	004 Move [X31+408], X21
	005 Move [X31+416], X20
	006 Move [X31+424], X19
	007 Move X20, X0
	008 Move X0, [X0+376]
	009 Compare X0, 0
	010 JumpIfEqual {95}
	011 Move W21, W1
	012 Move X1, X31
	013 Move X19, X8
	014 Call XRPass.get_enabled, X0
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {59}
	019 Move V1, [X20+160]
	020 Move V0, [X20+176]
	021 Move V3, [X20+128]
	022 Move V2, [X20+144]
	023 Move [X31+352], V1
	024 Move [X31+360], V0
	025 Move [X31+320], V3
	026 Move [X31+328], V2
	027 Move X0, [X20+376]
	028 Compare X0, 0
	029 JumpIfEqual {95}
	030 Add X8, X31, 256
	031 Move W1, W21
	032 Move X2, X31
	033 Call XRPass.GetProjMatrix, X0, X1
	034 Move V0, [X31+256]
	035 Move V1, [X31+272]
	036 Move V2, [X31+288]
	037 Move V3, [X31+304]
	038 Add X8, X31, 256
	039 Add X0, X31, 192
	040 Move [X31+128], V0
	041 Move [X31+136], V1
	042 Move V0, [X31+320]
	043 Move V1, [X31+336]
	044 Move [X31+160], V2
	045 Move [X31+168], V3
	046 Move V2, [X31+352]
	047 Move V3, [X31+368]
	048 Add X1, X31, 128
	049 Move X2, X31
	050 Move [X31+192], V0
	051 Move [X31+200], V1
	052 Move [X31+224], V2
	053 Move [X31+232], V3
	054 Call Matrix4x4.op_Multiply, X0, X1
	055 Move V1, [X31+288]
	056 Move V0, [X31+304]
	057 Move V3, [X31+256]
	058 Move V2, [X31+272]
	059 Move V1, [X20+160]
	060 Move V0, [X20+176]
	061 Move V3, [X20+128]
	062 Move V2, [X20+144]
	063 Add X8, X31, 320
	064 Add X0, X31, 64
	065 Move [X31+96], V1
	066 Move [X31+104], V0
	067 Move [X31+64], V3
	068 Move [X31+72], V2
	069 Move V1, [X20+96]
	070 Move V0, [X20+112]
	071 Move V3, [X20+64]
	072 Move V2, [X20+80]
	073 Add X1, X31, 0
	074 Move X2, X31
	075 Move [X31+32], V1
	076 Move [X31+40], V0
	077 Move [X31], V3
	078 Move [X31+8], V2
	079 Call Matrix4x4.op_Multiply, X0, X1
	080 Move V1, [X31+352]
	081 Move V0, [X31+368]
	082 Move V3, [X31+320]
	083 Move V2, [X31+336]
	084 Move [X19+32], V1
	085 Move [X19+40], V0
	086 Move [X19], V3
	087 Move [X19+8], V2
	088 Move X20, [X31+416]
	089 Move X19, [X31+424]
	090 Move X30, [X31+400]
	091 Move X21, [X31+408]
	092 Move X29, [X31+384]
	093 Add X31, X31, 432
	094 Return X0
	095 Call 0x1C17F20

Method: UnityEngine.Matrix4x4 GetProjectionMatrixNoJitter(System.Int32 viewIndex = 0)

Disassembly:
	0x03A93CD8 LDR X0, [X8]
	0x03A93CDC BL 0x3C124EC
	0x03A93CE0 LDR X8, [X19]
	0x03A93CE4 MOV X1, X31
	0x03A93CE8 LDR X8, [X8 + 0xB8]
	0x03A93CEC STR W0, [X8 + 0x4C]
	0x03A93CF0 ADRP X8, 0x6C4000
	0x03A93CF4 LDR X8, [X8 + 0x4A8]
	0x03A93CF8 LDR X0, [X8]
	0x03A93CFC BL 0x3C124EC
	0x03A93D00 LDR X8, [X19]
	0x03A93D04 MOV X1, X31
	0x03A93D08 LDR X8, [X8 + 0xB8]
	0x03A93D0C STR W0, [X8 + 0x50]
	0x03A93D10 ADRP X8, 0x6C4000
	0x03A93D14 LDR X8, [X8 + 0x4C8]
	0x03A93D18 LDR X0, [X8]
	0x03A93D1C BL 0x3C124EC
	0x03A93D20 LDR X8, [X19]
	0x03A93D24 MOV X1, X31
	0x03A93D28 LDR X8, [X8 + 0xB8]
	0x03A93D2C STR W0, [X8 + 0x54]
	0x03A93D30 ADRP X8, 0x6C4000
	0x03A93D34 LDR X8, [X8 + 0x4D0]
	0x03A93D38 LDR X0, [X8]
	0x03A93D3C BL 0x3C124EC
	0x03A93D40 LDR X8, [X19]
	0x03A93D44 MOV X1, X31
	0x03A93D48 LDR X8, [X8 + 0xB8]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, X0
	007 Move X0, [X0+376]
	008 Compare X0, 0
	009 JumpIfEqual {43}
	010 Move W20, W1
	011 Move X1, X31
	012 Move X19, X8
	013 Call XRPass.get_enabled, X0
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {29}
	018 Move X0, [X21+376]
	019 Compare X0, 0
	020 JumpIfEqual {43}
	021 Add X8, X31, 0
	022 Move W1, W20
	023 Move X2, X31
	024 Call XRPass.GetProjMatrix, X0, X1
	025 Move V1, [X31+32]
	026 Move V0, [X31+48]
	027 Move V3, [X31]
	028 Move V2, [X31+16]
	029 Move V1, [X21+96]
	030 Move V0, [X21+112]
	031 Move V3, [X21+64]
	032 Move V2, [X21+80]
	033 Move [X19+32], V1
	034 Move [X19+40], V0
	035 Move [X19], V3
	036 Move [X19+8], V2
	037 Move X20, [X31+80]
	038 Move X19, [X31+88]
	039 Move X30, [X31+64]
	040 Move X21, [X31+72]
	041 Add X31, X31, 96
	042 Return X0
	043 Call 0x1C17F20

Method: UnityEngine.Matrix4x4 GetGPUProjectionMatrix(System.Int32 viewIndex = 0)

Disassembly:
	0x03A93D4C STR W0, [X8 + 0x58]
	0x03A93D50 ADRP X8, 0x6C4000
	0x03A93D54 LDR X8, [X8 + 0x590]
	0x03A93D58 LDR X0, [X8]
	0x03A93D5C BL 0x3C124EC
	0x03A93D60 LDR X8, [X19]
	0x03A93D64 MOV X1, X31
	0x03A93D68 LDR X8, [X8 + 0xB8]
	0x03A93D6C STR W0, [X8 + 0x5C]
	0x03A93D70 ADRP X8, 0x6C4000
	0x03A93D74 LDR X8, [X8 + 0x4F0]
	0x03A93D78 LDR X0, [X8]
	0x03A93D7C BL 0x3C124EC
	0x03A93D80 LDR X8, [X19]
	0x03A93D84 MOV X1, X31
	0x03A93D88 LDR X8, [X8 + 0xB8]
	0x03A93D8C STR W0, [X8 + 0x60]
	0x03A93D90 ADRP X8, 0x6C4000
	0x03A93D94 LDR X8, [X8 + 0x498]
	0x03A93D98 LDR X0, [X8]
	0x03A93D9C BL 0x3C124EC
	0x03A93DA0 LDR X8, [X19]
	0x03A93DA4 MOV X1, X31
	0x03A93DA8 LDR X8, [X8 + 0xB8]
	0x03A93DAC STR W0, [X8 + 0x64]
	0x03A93DB0 ADRP X8, 0x6C4000
	0x03A93DB4 LDR X8, [X8 + 0x530]
	0x03A93DB8 LDR X0, [X8]
	0x03A93DBC BL 0x3C124EC
	0x03A93DC0 LDR X8, [X19]
	0x03A93DC4 MOV X1, X31
	0x03A93DC8 LDR X8, [X8 + 0xB8]
	0x03A93DCC STR W0, [X8 + 0x68]
	0x03A93DD0 ADRP X8, 0x6C4000
	0x03A93DD4 LDR X8, [X8 + 0x570]
	0x03A93DD8 LDR X0, [X8]
	0x03A93DDC BL 0x3C124EC
	0x03A93DE0 LDR X8, [X19]
	0x03A93DE4 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 352
	002 Move [X31+320], X29
	003 Move [X31+328], X30
	004 Move [X31+336], X20
	005 Move [X31+344], X19
	006 Move V1, [X0+160]
	007 Move V0, [X0+176]
	008 Move V3, [X0+128]
	009 Move V2, [X0+144]
	010 Move X19, X8
	011 Add X8, X31, 128
	012 Move X20, X0
	013 Move [X31+288], V1
	014 Move [X31+296], V0
	015 Move [X31+256], V3
	016 Move [X31+264], V2
	017 Call CameraData.GetProjectionMatrixNoJitter, X0, X1
	018 Move X0, X20
	019 Call CameraData.IsCameraProjectionMatrixFlipped, X0
	020 And W1, W0, 1
	021 Add X8, X31, 192
	022 Add X0, X31, 128
	023 Move X2, X31
	024 Call GL.GetGPUProjectionMatrix, X0, X1
	025 Move V0, [X31+192]
	026 Move V1, [X31+208]
	027 Move V2, [X31+224]
	028 Move V3, [X31+240]
	029 Add X8, X31, 192
	030 Add X0, X31, 64
	031 Move [X31], V0
	032 Move [X31+8], V1
	033 Move V0, [X31+256]
	034 Move V1, [X31+272]
	035 Move [X31+32], V2
	036 Move [X31+40], V3
	037 Move V2, [X31+288]
	038 Move V3, [X31+304]
	039 Add X1, X31, 0
	040 Move X2, X31
	041 Move [X31+64], V0
	042 Move [X31+72], V1
	043 Move [X31+96], V2
	044 Move [X31+104], V3
	045 Call Matrix4x4.op_Multiply, X0, X1
	046 Move V1, [X31+224]
	047 Move V0, [X31+240]
	048 Move V3, [X31+192]
	049 Move V2, [X31+208]
	050 Move X29, [X31+320]
	051 Move X30, [X31+328]
	052 Move [X19+32], V1
	053 Move [X19+40], V0
	054 Move [X19], V3
	055 Move [X19+8], V2
	056 Move X20, [X31+336]
	057 Move X19, [X31+344]
	058 Add X31, X31, 352
	059 Return X0

Method: UnityEngine.Matrix4x4 GetGPUProjectionMatrixNoJitter(System.Int32 viewIndex = 0)

Disassembly:
	0x03A94020 LDR X8, [X19]
	0x03A94024 MOV X1, X31
	0x03A94028 LDR X8, [X8 + 0xB8]
	0x03A9402C STR W0, [X8 + 0xB4]
	0x03A94030 ADRP X8, 0x6C3000
	0x03A94034 LDR X8, [X8 + 0x4F8]
	0x03A94038 LDR X0, [X8]
	0x03A9403C BL 0x3C124EC
	0x03A94040 LDR X8, [X19]
	0x03A94044 MOV X1, X31
	0x03A94048 LDR X8, [X8 + 0xB8]
	0x03A9404C STR W0, [X8 + 0xB8]
	0x03A94050 ADRP X8, 0x6C3000
	0x03A94054 LDR X8, [X8 + 0x500]
	0x03A94058 LDR X0, [X8]
	0x03A9405C BL 0x3C124EC
	0x03A94060 LDR X8, [X19]
	0x03A94064 MOV X1, X31
	0x03A94068 LDR X8, [X8 + 0xB8]
	0x03A9406C STR W0, [X8 + 0xBC]
	0x03A94070 ADRP X8, 0x6C3000
	0x03A94074 LDR X8, [X8 + 0x560]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+128], X30
	003 Move [X31+144], X20
	004 Move [X31+152], X19
	005 Move X20, X8
	006 Add X8, X31, 0
	007 Move X19, X0
	008 Call CameraData.GetProjectionMatrixNoJitter, X0, X1
	009 Move X0, X19
	010 Call CameraData.IsCameraProjectionMatrixFlipped, X0
	011 And W1, W0, 1
	012 Add X8, X31, 64
	013 Add X0, X31, 0
	014 Move X2, X31
	015 Call GL.GetGPUProjectionMatrix, X0, X1
	016 Move V1, [X31+96]
	017 Move V0, [X31+112]
	018 Move V3, [X31+64]
	019 Move V2, [X31+80]
	020 Move X30, [X31+128]
	021 Move [X20+32], V1
	022 Move [X20+40], V0
	023 Move [X20], V3
	024 Move [X20+8], V2
	025 Move X20, [X31+144]
	026 Move X19, [X31+152]
	027 Add X31, X31, 160
	028 Return X0

Method: UnityEngine.Matrix4x4 GetGPUProjectionMatrix(System.Boolean renderIntoTexture, System.Int32 viewIndex = 0)

Disassembly:
	0x03A94078 LDR X0, [X8]
	0x03A9407C BL 0x3C124EC
	0x03A94080 LDR X8, [X19]
	0x03A94084 MOV X1, X31
	0x03A94088 LDR X8, [X8 + 0xB8]
	0x03A9408C STR W0, [X8 + 0xC0]
	0x03A94090 ADRP X8, 0x6C3000
	0x03A94094 LDR X8, [X8 + 0x520]
	0x03A94098 LDR X0, [X8]
	0x03A9409C BL 0x3C124EC
	0x03A940A0 LDR X8, [X19]
	0x03A940A4 MOV X1, X31
	0x03A940A8 LDR X8, [X8 + 0xB8]
	0x03A940AC STR W0, [X8 + 0xC4]
	0x03A940B0 ADRP X8, 0x6C2000
	0x03A940B4 LDR X8, [X8 + 0x3D0]
	0x03A940B8 LDR X0, [X8]
	0x03A940BC BL 0x3C124EC
	0x03A940C0 LDR X8, [X19]
	0x03A940C4 MOV X1, X31
	0x03A940C8 LDR X8, [X8 + 0xB8]
	0x03A940CC STR W0, [X8 + 0xC8]
	0x03A940D0 ADRP X8, 0x6C3000
	0x03A940D4 LDR X8, [X8 + 0x528]
	0x03A940D8 LDR X0, [X8]
	0x03A940DC BL 0x3C124EC
	0x03A940E0 LDR X8, [X19]
	0x03A940E4 MOV X1, X31
	0x03A940E8 LDR X8, [X8 + 0xB8]
	0x03A940EC STR W0, [X8 + 0xCC]
	0x03A940F0 ADRP X8, 0x6C3000
	0x03A940F4 LDR X8, [X8 + 0x598]
	0x03A940F8 LDR X0, [X8]
	0x03A940FC BL 0x3C124EC
	0x03A94100 LDR X8, [X19]
	0x03A94104 LDP X20, X19, [X31 + 0x50]
	0x03A94108 LDP X22, X21, [X31 + 0x40]
	0x03A9410C LDP X24, X23, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 352
	002 Move [X31+320], X29
	003 Move [X31+328], X30
	004 Move [X31+336], X20
	005 Move [X31+344], X19
	006 Move V1, [X0+160]
	007 Move V0, [X0+176]
	008 Move V3, [X0+128]
	009 Move V2, [X0+144]
	010 Move W19, W1
	011 Move X20, X8
	012 Add X8, X31, 128
	013 Move W1, W2
	014 Move [X31+288], V1
	015 Move [X31+296], V0
	016 Move [X31+256], V3
	017 Move [X31+264], V2
	018 Call CameraData.GetProjectionMatrix, X0, X1
	019 And W1, W19, 1
	020 Add X8, X31, 192
	021 Add X0, X31, 128
	022 Move X2, X31
	023 Call GL.GetGPUProjectionMatrix, X0, X1
	024 Move V0, [X31+192]
	025 Move V1, [X31+208]
	026 Move V2, [X31+224]
	027 Move V3, [X31+240]
	028 Add X8, X31, 192
	029 Add X0, X31, 64
	030 Move [X31], V0
	031 Move [X31+8], V1
	032 Move V0, [X31+256]
	033 Move V1, [X31+272]
	034 Move [X31+32], V2
	035 Move [X31+40], V3
	036 Move V2, [X31+288]
	037 Move V3, [X31+304]
	038 Add X1, X31, 0
	039 Move X2, X31
	040 Move [X31+64], V0
	041 Move [X31+72], V1
	042 Move [X31+96], V2
	043 Move [X31+104], V3
	044 Call Matrix4x4.op_Multiply, X0, X1
	045 Move V1, [X31+224]
	046 Move V0, [X31+240]
	047 Move V3, [X31+192]
	048 Move V2, [X31+208]
	049 Move X29, [X31+320]
	050 Move X30, [X31+328]
	051 Move [X20+32], V1
	052 Move [X20+40], V0
	053 Move [X20], V3
	054 Move [X20+8], V2
	055 Move X20, [X31+336]
	056 Move X19, [X31+344]
	057 Add X31, X31, 352
	058 Return X0

Method: System.Int32 get_scaledWidth()

Disassembly:
	0x03A9265C STP V0, V0, [X31 + 0x30]
	0x03A92660 STP V0, V0, [X31 + 0x10]
	0x03A92664 STR V0, [X31]
	0x03A92668 STP V0, V0, [X31 + 0x150]
	0x03A9266C STP V0, V0, [X31 + 0x130]
	0x03A92670 STP V0, V0, [X31 + 0x110]
	0x03A92674 LDR W8, [X0 + 0xE0]
	0x03A92678 CBNZ W8, 0x3A92680
	0x03A9267C BL 0x1C16DFC
	0x03A92680 MOV X0, X31
	0x03A92684 BL 0x3C5B374
	0x03A92688 CBZ X0, 0x3A928A4
	0x03A9268C LDRB W8, [X0 + 0x25]
	0x03A92690 CBZ W8, 0x3A9281C
	0x03A92694 LDR X0, [X21]
	0x03A92698 LDR W8, [X0 + 0xE0]
	0x03A9269C CBNZ W8, 0x3A926A4
	0x03A926A0 BL 0x1C16DFC
	0x03A926A4 MOV X0, X31
	0x03A926A8 BL 0x3C5B374

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+192]
	005 Compare X0, 0
	006 JumpIfEqual {23}
	007 Move X1, X31
	008 Call Camera.get_pixelWidth, X0
	009 Move V0, [X19+332]
	010 Move W8, 0x7F800000
	011 NotImplemented "Instruction SCVTF not yet implemented."
	012 Move S2, W8
	013 Multiply S0, S0, S1
	014 NotImplemented "Instruction FCVTZS not yet implemented."
	015 NotImplemented "Instruction FCMP not yet implemented."
	016 Move W9, 0x80000000
	017 NotImplemented "Instruction CSEL not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSINC not yet implemented."
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return X0
	023 Call 0x1C17F20

Method: System.Int32 get_scaledHeight()

Disassembly:
	0x03A926AC CBZ X0, 0x3A928A4
	0x03A926B0 CBZ X20, 0x3A928A4
	0x03A926B4 LDR W9, [X20 + 0x18]
	0x03A926B8 CMP W9, 0x1
	0x03A926BC B.LT 0x3A92884
	0x03A926C0 ADRP X10, 0xFFFFFFFFFD058000
	0x03A926C4 LDR V8, [X10 + 0x104]
	0x03A926C8 ADRP X23, 0xFFFFFFFFFD105000
	0x03A926CC MOV W8, W31
	0x03A926D0 MOVZ W22, 0x60
	0x03A926D4 ADD X23, X23, 0xB44
	0x03A926D8 MOVZ W24, 0x1
	0x03A926DC CMP W8, W9
	0x03A926E0 B.CS 0x3A928A8
	0x03A926E4 SXTW X25, W8
	0x03A926E8 ADD X8, X20, X25, 0x3, LSL
	0x03A926EC LDR X21, [X8 + 0x20]
	0x03A926F0 CBZ X21, 0x3A928A4
	0x03A926F4 MOV X0, X21
	0x03A926F8 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+192]
	005 Compare X0, 0
	006 JumpIfEqual {23}
	007 Move X1, X31
	008 Call Camera.get_pixelHeight, X0
	009 Move V0, [X19+332]
	010 Move W8, 0x7F800000
	011 NotImplemented "Instruction SCVTF not yet implemented."
	012 Move S2, W8
	013 Multiply S0, S0, S1
	014 NotImplemented "Instruction FCVTZS not yet implemented."
	015 NotImplemented "Instruction FCMP not yet implemented."
	016 Move W9, 0x80000000
	017 NotImplemented "Instruction CSEL not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSINC not yet implemented."
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return X0
	023 Call 0x1C17F20

Method: System.Boolean get_requireSrgbConversion()

Disassembly:
	0x03A94110 LDR X8, [X8 + 0xB8]
	0x03A94114 LDP X26, X25, [X31 + 0x20]
	0x03A94118 LDP X28, X27, [X31 + 0x10]
	0x03A9411C STR W0, [X8 + 0xD0]
	0x03A94120 LDP X29, X30, [X31], #0x60
	0x03A94124 RET
	0x03A94128 STP X30, X21, [X31 - 0x20]!
	0x03A9412C STP X20, X19, [X31 + 0x10]
	0x03A94130 ADRP X19, 0x94E000
	0x03A94134 ADRP X20, 0x6C2000
	0x03A94138 LDRB W8, [X19 + 0x393]
	0x03A9413C LDR X20, [X20 + 0xEF8]
	0x03A94140 TBNZ X8, 0x0, 0x3A94164
	0x03A94144 ADRP X0, 0x65F000
	0x03A94148 LDR X0, [X0 + 0x970]
	0x03A9414C BL 0x1C16CF4
	0x03A94150 ADRP X0, 0x6C2000
	0x03A94154 LDR X0, [X0 + 0xEF8]
	0x03A94158 BL 0x1C16CF4
	0x03A9415C MOVZ W8, 0x1
	0x03A94160 STRB W8, [X19 + 0x393]
	0x03A94164 LDR X0, [X20]
	0x03A94168 LDR W8, [X0 + 0xE0]
	0x03A9416C CBNZ W8, 0x3A94174
	0x03A94170 BL 0x1C16DFC
	0x03A94174 BL 0x3A94280
	0x03A94178 ADRP X21, 0x94E000
	0x03A9417C LDRB W8, [X21 + 0x3D3]
	0x03A94180 MOV W19, W0
	0x03A94184 CBNZ W8, 0x3A9419C
	0x03A94188 ADRP X0, 0x6C2000
	0x03A9418C LDR X0, [X0 + 0xEF8]
	0x03A94190 BL 0x1C16CF4
	0x03A94194 MOVZ W8, 0x1
	0x03A94198 STRB W8, [X21 + 0x3D3]
	0x03A9419C LDR X0, [X20]
	0x03A941A0 LDR W8, [X0 + 0xE0]
	0x03A941A4 CBNZ W8, 0x3A941B0
	0x03A941A8 BL 0x1C16DFC
	0x03A941AC LDR X0, [X20]
	0x03A941B0 LDR X8, [X0 + 0xB8]
	0x03A941B4 AND W9, W19, 0x1
	0x03A941B8 MOVZ W0, 0x11
	0x03A941BC MOV X1, X31
	0x03A941C0 STRB W9, [X8 + 0x8]
	0x03A941C4 BL 0x3C4BA88
	0x03A941C8 ADRP X21, 0x94E000
	0x03A941CC LDRB W8, [X21 + 0x3D4]
	0x03A941D0 MOV W19, W0
	0x03A941D4 CBNZ W8, 0x3A941EC
	0x03A941D8 ADRP X0, 0x6C2000
	0x03A941DC LDR X0, [X0 + 0xEF8]
	0x03A941E0 BL 0x1C16CF4
	0x03A941E4 MOVZ W8, 0x1
	0x03A941E8 STRB W8, [X21 + 0x3D4]
	0x03A941EC LDR X0, [X20]
	0x03A941F0 ADRP X21, 0x65F000
	0x03A941F4 LDR W8, [X0 + 0xE0]
	0x03A941F8 LDR X21, [X21 + 0x970]
	0x03A941FC CBNZ W8, 0x3A94208
	0x03A94200 BL 0x1C16DFC
	0x03A94204 LDR X0, [X20]
	0x03A94208 LDR X8, [X0 + 0xB8]
	0x03A9420C AND W9, W19, 0x1
	0x03A94210 STRB W9, [X8 + 0x9]
	0x03A94214 LDR X0, [X21]
	0x03A94218 LDR W8, [X0 + 0xE0]
	0x03A9421C CBNZ W8, 0x3A94224
	0x03A94220 BL 0x1C16DFC
	0x03A94224 MOV X0, X31
	0x03A94228 BL 0x3C01AB0
	0x03A9422C ADRP X21, 0x94E000
	0x03A94230 LDRB W8, [X21 + 0x3D5]
	0x03A94234 MOV W19, W0
	0x03A94238 CBNZ W8, 0x3A94250
	0x03A9423C ADRP X0, 0x6C2000
	0x03A94240 LDR X0, [X0 + 0xEF8]
	0x03A94244 BL 0x1C16CF4
	0x03A94248 MOVZ W8, 0x1
	0x03A9424C STRB W8, [X21 + 0x3D5]
	0x03A94250 LDR X0, [X20]
	0x03A94254 LDR W8, [X0 + 0xE0]
	0x03A94258 CBNZ W8, 0x3A94264
	0x03A9425C BL 0x1C16DFC
	0x03A94260 LDR X0, [X20]
	0x03A94264 LDR X8, [X0 + 0xB8]
	0x03A94268 CMP W19, 0x20
	0x03A9426C LDP X20, X19, [X31 + 0x10]
	0x03A94270 CSET W9, EQ
	0x03A94274 STRB W9, [X8 + 0xA]
	0x03A94278 LDP X30, X21, [X31], #0x20
	0x03A9427C RET
	0x03A94280 STP X30, X21, [X31 - 0x20]!
	0x03A94284 STP X20, X19, [X31 + 0x10]
	0x03A94288 ADRP X19, 0x94E000
	0x03A9428C ADRP X20, 0x65F000
	0x03A94290 LDRB W8, [X19 + 0x394]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X20, 0x94F000
	006 Move W8, [X20+904]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x6C4000
	013 Move X0, [X0+1096]
	014 Call 0x1C17CF4
	015 Move X0, 0x660000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+904], W8
	020 Move X0, [X19+376]
	021 Compare X0, 0
	022 JumpIfEqual {117}
	023 Move X1, X31
	024 Call XRPass.get_enabled, X0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {81}
	029 Move X8, [X19+376]
	030 Compare X8, 0
	031 JumpIfEqual {117}
	032 Move W9, [X8+136]
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction LDUR not yet implemented."
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 Add X0, X31, 0
	037 Move X1, X31
	038 Move [X31+48], W9
	039 Move [X31+16], V1
	040 Move [X31+24], V0
	041 Move [X31], V2
	042 Call RenderTextureDescriptor.get_sRGB, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {110}
	047 Move X8, [X19+376]
	048 Compare X8, 0
	049 JumpIfEqual {117}
	050 Move W9, [X8+136]
	051 NotImplemented "Instruction LDUR not yet implemented."
	052 NotImplemented "Instruction LDUR not yet implemented."
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 Add X0, X31, 0
	055 Move X1, X31
	056 Move [X31+48], W9
	057 Move [X31+16], V1
	058 Move [X31+24], V0
	059 Move [X31], V2
	060 Call RenderTextureDescriptor.get_graphicsFormat, X0
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X8, [X19+376]
	063 Compare X8, 0
	064 JumpIfEqual {117}
	065 Move W9, [X8+136]
	066 NotImplemented "Instruction LDUR not yet implemented."
	067 NotImplemented "Instruction LDUR not yet implemented."
	068 NotImplemented "Instruction LDUR not yet implemented."
	069 Add X0, X31, 0
	070 Move X1, X31
	071 Move [X31+48], W9
	072 Move [X31+16], V1
	073 Move [X31+24], V0
	074 Move [X31], V2
	075 Call RenderTextureDescriptor.get_graphicsFormat, X0
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X0, X31
	078 Call QualitySettings.get_activeColorSpace
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CSET not yet implemented."
	081 Move X8, 0x660000
	082 Move X8, [X8+1432]
	083 Move X19, [X19+208]
	084 Move X0, [X8]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move X0, X19
	090 Move X1, X31
	091 Move X2, X31
	092 Call Object.op_Equality, X0, X1
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {110}
	097 Move X8, 0x6C4000
	098 Move X8, [X8+1096]
	099 Move X0, [X8]
	100 Move W8, [X0+224]
	101 Compare W8, 0
	102 JumpIfNotEqual {104}
	103 Call 0x1C17DFC
	104 Move X0, X31
	105 Call Display.get_main
	106 Compare X0, 0
	107 JumpIfEqual {117}
	108 Move X1, X31
	109 Call Display.get_requiresSrgbBlitToBackbuffer, X0
	110 Move W0, W31
	111 Move X20, [X31+80]
	112 Move X19, [X31+88]
	113 Move X30, [X31+64]
	114 And W0, W0, 1
	115 Add X31, X31, 96
	116 Return X0
	117 Call 0x1C17F20

Method: System.Boolean get_isSceneViewCamera()

Disassembly:
	0x03A8EE34 FMUL S8, S8, S2
	0x03A8EE38 FMUL S10, S10, S3
	0x03A8EE3C FADD S11, S0, S4
	0x03A8EE40 FADD S9, S1, S5

ISIL:
	001 Move W8, [X0+360]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_isPreviewCamera()

Disassembly:
	0x03A9224C LDR X0, [X21]
	0x03A92250 BL 0x1C16F10
	0x03A92254 LDR X1, [X29]
	0x03A92258 MOV X2, X31

ISIL:
	001 Move W8, [X0+360]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_isRenderPassSupportedCamera()

Disassembly:
	0x03A94294 LDR X20, [X20 + 0x970]
	0x03A94298 TBNZ X8, 0x0, 0x3A942EC
	0x03A9429C ADRP X0, 0x65F000
	0x03A942A0 LDR X0, [X0 + 0x970]
	0x03A942A4 BL 0x1C16CF4
	0x03A942A8 ADRP X0, 0x6BC000
	0x03A942AC LDR X0, [X0 + 0x6C0]

ISIL:
	001 Move W8, [X0+360]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Or W0, W9, W8
	007 Return X0

Method: System.Boolean get_resolveToScreen()

Disassembly:
	0x03A942B0 BL 0x1C16CF4
	0x03A942B4 ADRP X0, 0x6BC000
	0x03A942B8 LDR X0, [X0 + 0x6C8]
	0x03A942BC BL 0x1C16CF4
	0x03A942C0 ADRP X0, 0x6C2000
	0x03A942C4 LDR X0, [X0 + 0xEF8]
	0x03A942C8 BL 0x1C16CF4
	0x03A942CC ADRP X0, 0x6BC000
	0x03A942D0 LDR X0, [X0 + 0x6D0]
	0x03A942D4 BL 0x1C16CF4
	0x03A942D8 ADRP X0, 0x687000
	0x03A942DC LDR X0, [X0 + 0xC0]
	0x03A942E0 BL 0x1C16CF4
	0x03A942E4 MOVZ W8, 0x1
	0x03A942E8 STRB W8, [X19 + 0x394]
	0x03A942EC LDR X0, [X20]
	0x03A942F0 LDR W8, [X0 + 0xE0]
	0x03A942F4 CBNZ W8, 0x3A942FC
	0x03A942F8 BL 0x1C16DFC
	0x03A942FC MOV X0, X31
	0x03A94300 BL 0x3C01AB0
	0x03A94304 MOV W8, W0
	0x03A94308 CMP W0, 0x14
	0x03A9430C MOV W0, W31
	0x03A94310 B.HI 0x3A943E0
	0x03A94314 MOVZ W9, 0x1
	0x03A94318 LSLV W8, W9, W8
	0x03A9431C MOVZ W9, 0x800
	0x03A94320 MOVK W9, 0x1C0000
	0x03A94324 ANDS W31, W8, W9, 0x0
	0x03A94328 B.EQ 0x3A943E0
	0x03A9432C ADRP X20, 0x6C2000
	0x03A94330 LDR X20, [X20 + 0xEF8]
	0x03A94334 ADRP X19, 0x687000
	0x03A94338 LDR X0, [X20]
	0x03A9433C LDR W8, [X0 + 0xE0]
	0x03A94340 LDR X19, [X19 + 0xC0]
	0x03A94344 CBNZ W8, 0x3A94350
	0x03A94348 BL 0x1C16DFC
	0x03A9434C LDR X0, [X20]
	0x03A94350 LDR X8, [X19]
	0x03A94354 LDR X9, [X0 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x94F000
	006 Move X20, 0x660000
	007 Move W8, [X21+905]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x660000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+905], W8
	019 Move X0, [X20]
	020 Move X20, [X19+208]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {39}
	033 Move W8, [X19+448]
	034 Compare W8, 0
	035 JumpIfEqual {39}
	036 Move W8, [X19+360]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move W0, 1
	039 Move W0, W31
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return X0
	045 Move X0, [X19+192]
	046 Compare X0, 0
	047 JumpIfEqual {52}
	048 Move X1, X31
	049 Call Camera.get_cameraType, X0
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSET not yet implemented."
	052 Call 0x1C17F20

Method: System.Boolean get_isHDROutputActive()

Disassembly:
	0x03A9106C B 0x3A91024
	0x03A91070 MOV X19, X31
	0x03A91074 B 0x3A91084
	0x03A91078 MOV X0, X19
	0x03A9107C BL 0x1C16F18
	0x03A91080 MOV X20, X0
	0x03A91084 ADD X0, X31, 0x8
	0x03A91088 MOV X1, X31
	0x03A9108C BL 0x39B1DB4
	0x03A91090 CBNZ X19, 0x3A9109C
	0x03A91094 MOV X0, X20
	0x03A91098 BL 0x1D2C690
	0x03A9109C MOV X0, X19
	0x03A910A0 BL 0x1C16F18
	0x03A910A4 BL 0x1990590
	0x03A910A8 STP X30, X23, [X31 - 0x30]!
	0x03A910AC STP X22, X21, [X31 + 0x10]
	0x03A910B0 STP X20, X19, [X31 + 0x20]
	0x03A910B4 ADRP X21, 0x951000
	0x03A910B8 ADRP X20, 0x6C4000
	0x03A910BC LDRB W8, [X21 + 0x370]
	0x03A910C0 LDR X20, [X20 + 0x4B0]
	0x03A910C4 MOV X19, X0
	0x03A910C8 TBNZ X8, 0x0, 0x3A91104
	0x03A910CC ADRP X0, 0x6C4000
	0x03A910D0 LDR X0, [X0 + 0x4A8]
	0x03A910D4 BL 0x1C16CF4
	0x03A910D8 ADRP X0, 0x6C4000
	0x03A910DC LDR X0, [X0 + 0x4B0]
	0x03A910E0 BL 0x1C16CF4
	0x03A910E4 ADRP X0, 0x662000
	0x03A910E8 LDR X0, [X0 + 0x598]
	0x03A910EC BL 0x1C16CF4
	0x03A910F0 ADRP X0, 0x68B000
	0x03A910F4 LDR X0, [X0 + 0x8A8]
	0x03A910F8 BL 0x1C16CF4
	0x03A910FC MOVZ W8, 0x1
	0x03A91100 STRB W8, [X21 + 0x370]
	0x03A91104 LDR X0, [X20]
	0x03A91108 ADRP X20, 0x6C4000
	0x03A9110C LDR W8, [X0 + 0xE0]
	0x03A91110 LDR X20, [X20 + 0x4A8]
	0x03A91114 CBNZ W8, 0x3A9111C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x952000
	006 Move X21, 0x68C000
	007 Move W8, [X20+906]
	008 Move X21, [X21+2216]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x68C000
	015 Move X0, [X0+2216]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+906], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Call UniversalRenderPipeline.HDROutputForMainDisplayIsActive
	025 Move X8, [X19+376]
	026 Compare X8, 0
	027 JumpIfEqual {65}
	028 Move W20, W0
	029 Move X0, X8
	030 Move X1, X31
	031 Call XRPass.get_enabled, X0
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {45}
	036 Move X0, [X19+376]
	037 Compare X0, 0
	038 JumpIfEqual {65}
	039 Move X1, X31
	040 Call XRPass.get_isHDRDisplayOutputActive, X0
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {49}
	045 Move TEMP, X20
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {59}
	049 Move W8, [X19+366]
	050 Compare W8, 0
	051 JumpIfEqual {59}
	052 Move X0, X19
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Call CameraData.get_resolveToScreen, X0
	058 Return X0
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move W0, W31
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Return X0
	065 Call 0x1C17F20

Method: UnityEngine.Rendering.HDROutputUtils/HDRDisplayInformation get_hdrDisplayInformation()

Disassembly:
	0x03A94358 ADRP X21, 0x6BC000
	0x03A9435C LDR W10, [X8 + 0xE0]
	0x03A94360 LDR X19, [X9]
	0x03A94364 LDR X21, [X21 + 0x6D0]
	0x03A94368 CBNZ W10, 0x3A94374
	0x03A9436C MOV X0, X8
	0x03A94370 BL 0x1C16DFC
	0x03A94374 LDR X1, [X21]
	0x03A94378 MOV X0, X19
	0x03A9437C BL 0x229839C
	0x03A94380 LDR X8, [X20]
	0x03A94384 LDR X9, [X8 + 0xB8]
	0x03A94388 LDR X0, [X9]
	0x03A9438C CBZ X0, 0x3A943EC
	0x03A94390 LDR W9, [X0 + 0x18]
	0x03A94394 CMP W9, 0x1
	0x03A94398 B.LT 0x3A943DC
	0x03A9439C LDR W9, [X8 + 0xE0]
	0x03A943A0 CBNZ W9, 0x3A943BC
	0x03A943A4 MOV X0, X8
	0x03A943A8 BL 0x1C16DFC
	0x03A943AC LDR X8, [X20]
	0x03A943B0 LDR X8, [X8 + 0xB8]
	0x03A943B4 LDR X0, [X8]
	0x03A943B8 CBZ X0, 0x3A943EC
	0x03A943BC ADRP X8, 0x6BC000
	0x03A943C0 LDR X8, [X8 + 0x6C8]
	0x03A943C4 MOV W1, W31
	0x03A943C8 LDR X2, [X8]
	0x03A943CC BL 0x301BCCC
	0x03A943D0 CBZ X0, 0x3A943DC
	0x03A943D4 MOVZ W0, 0x1
	0x03A943D8 B 0x3A943E0
	0x03A943DC MOV W0, W31
	0x03A943E0 LDP X20, X19, [X31 + 0x10]
	0x03A943E4 LDP X30, X21, [X31], #0x20
	0x03A943E8 RET
	0x03A943EC BL 0x1C16F20
	0x03A943F0 STR X30, [X31 - 0x20]!
	0x03A943F4 STP X20, X19, [X31 + 0x10]
	0x03A943F8 ADRP X20, 0x94E000
	0x03A943FC ADRP X19, 0x6C2000
	0x03A94400 LDRB W8, [X20 + 0x395]
	0x03A94404 LDR X19, [X19 + 0xEF8]
	0x03A94408 TBNZ X8, 0x0, 0x3A94420
	0x03A9440C ADRP X0, 0x6C2000
	0x03A94410 LDR X0, [X0 + 0xEF8]
	0x03A94414 BL 0x1C16CF4
	0x03A94418 MOVZ W8, 0x1
	0x03A9441C STRB W8, [X20 + 0x395]
	0x03A94420 LDR X0, [X19]
	0x03A94424 LDR W8, [X0 + 0xE0]
	0x03A94428 CBNZ W8, 0x3A94434
	0x03A9442C BL 0x1C16DFC
	0x03A94430 LDR X0, [X19]
	0x03A94434 LDR X8, [X0 + 0xB8]
	0x03A94438 LDP X20, X19, [X31 + 0x10]
	0x03A9443C LDRB W0, [X8 + 0x8]
	0x03A94440 LDR X30, [X31], #0x20
	0x03A94444 RET
	0x03A94448 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X20, 0x94F000
	008 Move W8, [X20+907]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x6BD000
	015 Move X0, [X0+1392]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+907], W8
	019 Move [X31], X31
	020 Move [X31+8], X31
	021 Move X0, [X19+376]
	022 Compare X0, 0
	023 JumpIfEqual {76}
	024 Move X1, X31
	025 Call XRPass.get_enabled, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {35}
	030 Move X0, [X19+376]
	031 Compare X0, 0
	032 JumpIfEqual {76}
	033 Move X1, X31
	034 Call XRPass.get_hdrDisplayOutputInformation, X0
	035 Move X8, 0x6BD000
	036 Move X8, [X8+1392]
	037 Move X0, [X8]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X31
	043 Call HDROutputSettings.get_main
	044 Compare X0, 0
	045 JumpIfEqual {76}
	046 Move X1, X31
	047 Move X19, X0
	048 Call HDROutputSettings.get_maxFullFrameToneMapLuminance, X0
	049 Move W20, W0
	050 Move X0, X19
	051 Move X1, X31
	052 Call HDROutputSettings.get_maxToneMapLuminance, X0
	053 Move W21, W0
	054 Move X0, X19
	055 Move X1, X31
	056 Call HDROutputSettings.get_minToneMapLuminance, X0
	057 Move W22, W0
	058 Move X0, X19
	059 Move X1, X31
	060 Call HDROutputSettings.get_paperWhiteNits, X0
	061 Add X0, X31, 0
	062 Move W1, W20
	063 Move W2, W21
	064 Move W3, W22
	065 Move X4, X31
	066 Call HDRDisplayInformation..ctor, X0, X1, X2, X3, V0
	067 Move X0, [X31]
	068 Move X1, [X31+8]
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X30, [X31+16]
	074 Add X31, X31, 64
	075 Return X0
	076 Call 0x1C17F20

Method: UnityEngine.ColorGamut get_hdrDisplayColorGamut()

Disassembly:
	0x03A9444C STP X20, X19, [X31 + 0x10]
	0x03A94450 ADRP X21, 0x94E000
	0x03A94454 ADRP X20, 0x6C2000
	0x03A94458 LDRB W8, [X21 + 0x396]
	0x03A9445C LDR X20, [X20 + 0xEF8]
	0x03A94460 MOV W19, W0
	0x03A94464 TBNZ X8, 0x0, 0x3A9447C
	0x03A94468 ADRP X0, 0x6C2000
	0x03A9446C LDR X0, [X0 + 0xEF8]
	0x03A94470 BL 0x1C16CF4
	0x03A94474 MOVZ W8, 0x1
	0x03A94478 STRB W8, [X21 + 0x396]
	0x03A9447C LDR X0, [X20]
	0x03A94480 LDR W8, [X0 + 0xE0]
	0x03A94484 CBNZ W8, 0x3A94490
	0x03A94488 BL 0x1C16DFC
	0x03A9448C LDR X0, [X20]
	0x03A94490 LDR X8, [X0 + 0xB8]
	0x03A94494 AND W9, W19, 0x1
	0x03A94498 LDP X20, X19, [X31 + 0x10]
	0x03A9449C STRB W9, [X8 + 0x8]
	0x03A944A0 LDP X30, X21, [X31], #0x20
	0x03A944A4 RET
	0x03A944A8 STR X30, [X31 - 0x20]!
	0x03A944AC STP X20, X19, [X31 + 0x10]
	0x03A944B0 ADRP X20, 0x94E000
	0x03A944B4 ADRP X19, 0x6C2000
	0x03A944B8 LDRB W8, [X20 + 0x397]
	0x03A944BC LDR X19, [X19 + 0xEF8]
	0x03A944C0 TBNZ X8, 0x0, 0x3A944D8
	0x03A944C4 ADRP X0, 0x6C2000
	0x03A944C8 LDR X0, [X0 + 0xEF8]
	0x03A944CC BL 0x1C16CF4
	0x03A944D0 MOVZ W8, 0x1
	0x03A944D4 STRB W8, [X20 + 0x397]
	0x03A944D8 LDR X0, [X19]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x94F000
	005 Move W8, [X20+908]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x6BD000
	012 Move X0, [X0+1392]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+908], W8
	016 Move X0, [X19+376]
	017 Compare X0, 0
	018 JumpIfEqual {51}
	019 Move X1, X31
	020 Call XRPass.get_enabled, X0
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {34}
	025 Move X0, [X19+376]
	026 Compare X0, 0
	027 JumpIfEqual {51}
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X1, X31
	031 Move X30, [X31+32]
	032 Call XRPass.get_hdrDisplayOutputColorGamut, X0
	033 Return X0
	034 Move X8, 0x6BD000
	035 Move X8, [X8+1392]
	036 Move X0, [X8]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X31
	042 Call HDROutputSettings.get_main
	043 Compare X0, 0
	044 JumpIfEqual {51}
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X1, X31
	048 Move X30, [X31+32]
	049 Call HDROutputSettings.get_displayColorGamut, X0
	050 Return X0
	051 Call 0x1C17F20

Method: System.Boolean get_rendersOverlayUI()

Disassembly:
	0x03A944DC LDR W8, [X0 + 0xE0]
	0x03A944E0 CBNZ W8, 0x3A944EC
	0x03A944E4 BL 0x1C16DFC
	0x03A944E8 LDR X0, [X19]
	0x03A944EC LDR X8, [X0 + 0xB8]
	0x03A944F0 LDP X20, X19, [X31 + 0x10]
	0x03A944F4 LDRB W0, [X8 + 0x9]
	0x03A944F8 LDR X30, [X31], #0x20
	0x03A944FC RET
	0x03A94500 STP X30, X21, [X31 - 0x20]!
	0x03A94504 STP X20, X19, [X31 + 0x10]
	0x03A94508 ADRP X21, 0x94E000
	0x03A9450C ADRP X20, 0x6C2000
	0x03A94510 LDRB W8, [X21 + 0x398]
	0x03A94514 LDR X20, [X20 + 0xEF8]
	0x03A94518 MOV W19, W0
	0x03A9451C TBNZ X8, 0x0, 0x3A94534
	0x03A94520 ADRP X0, 0x6C2000
	0x03A94524 LDR X0, [X0 + 0xEF8]
	0x03A94528 BL 0x1C16CF4
	0x03A9452C MOVZ W8, 0x1
	0x03A94530 STRB W8, [X21 + 0x398]
	0x03A94534 LDR X0, [X20]
	0x03A94538 LDR W8, [X0 + 0xE0]
	0x03A9453C CBNZ W8, 0x3A94548
	0x03A94540 BL 0x1C16DFC
	0x03A94544 LDR X0, [X20]
	0x03A94548 LDR X8, [X0 + 0xB8]
	0x03A9454C AND W9, W19, 0x1
	0x03A94550 LDP X20, X19, [X31 + 0x10]
	0x03A94554 STRB W9, [X8 + 0x9]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x94F000
	006 Move X21, 0x6C4000
	007 Move W8, [X20+909]
	008 Move X21, [X21+544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x6C4000
	015 Move X0, [X0+544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+909], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call SupportedRenderingFeatures.get_active
	026 Compare X0, 0
	027 JumpIfEqual {44}
	028 Move W8, [X0+44]
	029 Compare W8, 0
	030 JumpIfEqual {38}
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call CameraData.get_resolveToScreen, X0
	037 Return X0
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move W0, W31
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0
	044 Call 0x1C17F20

Method: System.Boolean IsHandleYFlipped(UnityEngine.Rendering.RTHandle handle)

Disassembly:
	0x03A94558 LDP X30, X21, [X31], #0x20
	0x03A9455C RET
	0x03A94560 STR X30, [X31 - 0x20]!
	0x03A94564 STP X20, X19, [X31 + 0x10]
	0x03A94568 ADRP X20, 0x94E000
	0x03A9456C ADRP X19, 0x6C2000
	0x03A94570 LDRB W8, [X20 + 0x399]
	0x03A94574 LDR X19, [X19 + 0xEF8]
	0x03A94578 TBNZ X8, 0x0, 0x3A94590
	0x03A9457C ADRP X0, 0x6C2000
	0x03A94580 LDR X0, [X0 + 0xEF8]
	0x03A94584 BL 0x1C16CF4
	0x03A94588 MOVZ W8, 0x1
	0x03A9458C STRB W8, [X20 + 0x399]
	0x03A94590 LDR X0, [X19]
	0x03A94594 LDR W8, [X0 + 0xE0]
	0x03A94598 CBNZ W8, 0x3A945A4
	0x03A9459C BL 0x1C16DFC
	0x03A945A0 LDR X0, [X19]
	0x03A945A4 LDR X8, [X0 + 0xB8]
	0x03A945A8 LDP X20, X19, [X31 + 0x10]
	0x03A945AC LDRB W0, [X8 + 0xA]
	0x03A945B0 LDR X30, [X31], #0x20
	0x03A945B4 RET
	0x03A945B8 STP X30, X21, [X31 - 0x20]!
	0x03A945BC STP X20, X19, [X31 + 0x10]
	0x03A945C0 ADRP X21, 0x94E000
	0x03A945C4 ADRP X20, 0x6C2000
	0x03A945C8 LDRB W8, [X21 + 0x39A]
	0x03A945CC LDR X20, [X20 + 0xEF8]
	0x03A945D0 MOV W19, W0
	0x03A945D4 TBNZ X8, 0x0, 0x3A945EC
	0x03A945D8 ADRP X0, 0x6C2000
	0x03A945DC LDR X0, [X0 + 0xEF8]
	0x03A945E0 BL 0x1C16CF4
	0x03A945E4 MOVZ W8, 0x1
	0x03A945E8 STRB W8, [X21 + 0x39A]
	0x03A945EC LDR X0, [X20]
	0x03A945F0 LDR W8, [X0 + 0xE0]
	0x03A945F4 CBNZ W8, 0x3A94600
	0x03A945F8 BL 0x1C16DFC
	0x03A945FC LDR X0, [X20]
	0x03A94600 LDR X8, [X0 + 0xB8]
	0x03A94604 AND W9, W19, 0x1
	0x03A94608 LDP X20, X19, [X31 + 0x10]
	0x03A9460C STRB W9, [X8 + 0xA]
	0x03A94610 LDP X30, X21, [X31], #0x20
	0x03A94614 RET
	0x03A94618 STR X30, [X31 - 0x20]!
	0x03A9461C STP X20, X19, [X31 + 0x10]
	0x03A94620 ADRP X20, 0x94E000
	0x03A94624 LDRB W8, [X20 + 0x39B]
	0x03A94628 MOV W19, W0
	0x03A9462C TBNZ X8, 0x0, 0x3A94644
	0x03A94630 ADRP X0, 0x6C2000
	0x03A94634 LDR X0, [X0 + 0xEF8]
	0x03A94638 BL 0x1C16CF4
	0x03A9463C MOVZ W8, 0x1
	0x03A94640 STRB W8, [X20 + 0x39B]
	0x03A94644 CBNZ W19, 0x3A946F0
	0x03A94648 ADRP X19, 0x6C2000
	0x03A9464C LDR X19, [X19 + 0xEF8]
	0x03A94650 LDR X0, [X19]
	0x03A94654 LDR W8, [X0 + 0xE0]
	0x03A94658 CBNZ W8, 0x3A94660
	0x03A9465C BL 0x1C16DFC
	0x03A94660 ADRP X20, 0x94E000
	0x03A94664 LDRB W8, [X20 + 0x30A]
	0x03A94668 CBNZ W8, 0x3A94680
	0x03A9466C ADRP X0, 0x6C2000
	0x03A94670 LDR X0, [X0 + 0xEF8]
	0x03A94674 BL 0x1C16CF4
	0x03A94678 MOVZ W8, 0x1
	0x03A9467C STRB W8, [X20 + 0x30A]
	0x03A94680 LDR X0, [X19]
	0x03A94684 LDR W8, [X0 + 0xE0]
	0x03A94688 CBNZ W8, 0x3A94694
	0x03A9468C BL 0x1C16DFC
	0x03A94690 LDR X0, [X19]
	0x03A94694 LDR X8, [X0 + 0xB8]
	0x03A94698 LDRB W8, [X8 + 0x8]
	0x03A9469C CBNZ W8, 0x3A946EC
	0x03A946A0 LDR W8, [X0 + 0xE0]
	0x03A946A4 CBNZ W8, 0x3A946AC
	0x03A946A8 BL 0x1C16DFC
	0x03A946AC ADRP X20, 0x94E000
	0x03A946B0 LDRB W8, [X20 + 0x3D6]
	0x03A946B4 CBNZ W8, 0x3A946CC
	0x03A946B8 ADRP X0, 0x6C2000
	0x03A946BC LDR X0, [X0 + 0xEF8]
	0x03A946C0 BL 0x1C16CF4
	0x03A946C4 MOVZ W8, 0x1
	0x03A946C8 STRB W8, [X20 + 0x3D6]
	0x03A946CC LDR X0, [X19]
	0x03A946D0 LDR W8, [X0 + 0xE0]
	0x03A946D4 CBNZ W8, 0x3A946E0
	0x03A946D8 BL 0x1C16DFC
	0x03A946DC LDR X0, [X19]
	0x03A946E0 LDR X8, [X0 + 0xB8]

ISIL:
	001 Subtract X31, X31, 464
	002 Move [X31+432], X29
	003 Move [X31+440], X30
	004 Move [X31+448], X20
	005 Move [X31+456], X19
	006 Move X19, X0
	007 NotImplemented "Instruction MOVI not yet implemented."
	008 Move X0, X31
	009 Move X20, X1
	010 Move [X31+416], X31
	011 Move [X31+384], V0
	012 Move [X31+392], V0
	013 Call SystemInfo.get_graphicsUVStartsAtTop
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {122}
	018 Move W9, [X19+360]
	019 Move W8, 1
	020 NotImplemented "Instruction CMP not yet implemented."
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Compare X20, 0
	023 JumpIfEqual {130}
	024 Move X8, [X20+72]
	025 NotImplemented "Instruction LDUR not yet implemented."
	026 NotImplemented "Instruction LDUR not yet implemented."
	027 Add X0, X31, 384
	028 Add X1, X31, 336
	029 Move TEMP, 0
	030 Not TEMP
	031 Move W3, TEMP
	032 Move W2, W31
	033 Move W4, W31
	034 Move X5, X31
	035 Move [X31+368], X8
	036 Move [X31+336], V1
	037 Move [X31+344], V0
	038 Call RenderTargetIdentifier..ctor, X0, X1, X2, X3, X4
	039 Move X8, [X31+416]
	040 Move V0, [X31+384]
	041 Move V1, [X31+400]
	042 Move W0, 2
	043 Move X1, X31
	044 Move [X31+320], X8
	045 Add X8, X31, 240
	046 Move [X31+288], V0
	047 Move [X31+296], V1
	048 Call RenderTargetIdentifier.op_Implicit, X0
	049 Move V0, [X31+240]
	050 Move V1, [X31+256]
	051 Move X8, [X31+272]
	052 Move V2, [X31+288]
	053 Move V3, [X31+304]
	054 Move X9, [X31+320]
	055 Add X0, X31, 192
	056 Add X1, X31, 144
	057 Move X2, X31
	058 Move [X31+144], V0
	059 Move [X31+152], V1
	060 Move [X31+176], X8
	061 Move [X31+192], V2
	062 Move [X31+200], V3
	063 Move [X31+224], X9
	064 Call RenderTargetIdentifier.op_Equality, X0, X1
	065 Move X8, [X19+376]
	066 Compare X8, 0
	067 JumpIfEqual {130}
	068 Move W20, W0
	069 Move X0, X8
	070 Move X1, X31
	071 Call XRPass.get_enabled, X0
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {121}
	076 Move V0, [X31+384]
	077 Move V1, [X31+400]
	078 Move X8, [X31+416]
	079 Move [X31+288], V0
	080 Move [X31+296], V1
	081 Move [X31+320], X8
	082 Move X8, [X19+376]
	083 Compare X8, 0
	084 JumpIfEqual {130}
	085 Move X9, [X8+80]
	086 Move V0, [X8+48]
	087 Move V1, [X8+64]
	088 NotImplemented "Instruction MOVI not yet implemented."
	089 Add X0, X31, 240
	090 Add X1, X31, 96
	091 Move TEMP, 0
	092 Not TEMP
	093 Move W3, TEMP
	094 Move W2, W31
	095 Move W4, W31
	096 Move X5, X31
	097 Move [X31+272], X31
	098 Move [X31+128], X9
	099 Move [X31+96], V0
	100 Move [X31+104], V1
	101 Move [X31+240], V2
	102 Move [X31+248], V2
	103 Call RenderTargetIdentifier..ctor, X0, X1, X2, X3, X4
	104 Move V0, [X31+288]
	105 Move V1, [X31+304]
	106 Move X8, [X31+320]
	107 Move V2, [X31+240]
	108 Move V3, [X31+256]
	109 Move X9, [X31+272]
	110 Add X0, X31, 48
	111 Add X1, X31, 0
	112 Move X2, X31
	113 Move [X31+48], V0
	114 Move [X31+56], V1
	115 Move [X31+80], X8
	116 Move [X31], V2
	117 Move [X31+8], V3
	118 Move [X31+32], X9
	119 Call RenderTargetIdentifier.op_Equality, X0, X1
	120 Or W20, W20, W0
	121 Xor W8, W20, 1
	122 Move W8, W31
	123 Move X20, [X31+448]
	124 Move X19, [X31+456]
	125 Move X29, [X31+432]
	126 Move X30, [X31+440]
	127 And W0, W8, 1
	128 Add X31, X31, 464
	129 Return X0
	130 Call 0x1C17F20

Method: System.Boolean IsCameraProjectionMatrixFlipped()

Disassembly:
	0x03A93DE8 LDR X8, [X8 + 0xB8]
	0x03A93DEC STR W0, [X8 + 0x6C]
	0x03A93DF0 ADRP X8, 0x6C4000
	0x03A93DF4 LDR X8, [X8 + 0x588]
	0x03A93DF8 LDR X0, [X8]
	0x03A93DFC BL 0x3C124EC
	0x03A93E00 LDR X8, [X19]
	0x03A93E04 MOV X1, X31
	0x03A93E08 LDR X8, [X8 + 0xB8]
	0x03A93E0C STR W0, [X8 + 0x70]
	0x03A93E10 ADRP X8, 0x6C4000
	0x03A93E14 LDR X8, [X8 + 0x5A0]
	0x03A93E18 LDR X0, [X8]
	0x03A93E1C BL 0x3C124EC
	0x03A93E20 LDR X8, [X19]
	0x03A93E24 MOV X1, X31
	0x03A93E28 LDR X8, [X8 + 0xB8]
	0x03A93E2C STR W0, [X8 + 0x74]
	0x03A93E30 ADRP X8, 0x6C4000
	0x03A93E34 LDR X8, [X8 + 0x4E8]
	0x03A93E38 LDR X0, [X8]
	0x03A93E3C BL 0x3C124EC
	0x03A93E40 LDR X8, [X19]
	0x03A93E44 MOV X1, X31
	0x03A93E48 LDR X8, [X8 + 0xB8]
	0x03A93E4C STR W0, [X8 + 0x78]
	0x03A93E50 ADRP X8, 0x6C4000
	0x03A93E54 LDR X8, [X8 + 0x4B8]
	0x03A93E58 LDR X0, [X8]
	0x03A93E5C BL 0x3C124EC
	0x03A93E60 LDR X8, [X19]
	0x03A93E64 MOV X1, X31
	0x03A93E68 LDR X8, [X8 + 0xB8]
	0x03A93E6C STR W0, [X8 + 0x7C]
	0x03A93E70 ADRP X8, 0x6C4000
	0x03A93E74 LDR X8, [X8 + 0x578]
	0x03A93E78 LDR X0, [X8]
	0x03A93E7C BL 0x3C124EC
	0x03A93E80 LDR X8, [X19]
	0x03A93E84 MOV X1, X31
	0x03A93E88 LDR X8, [X8 + 0xB8]
	0x03A93E8C STR W0, [X8 + 0x80]
	0x03A93E90 ADRP X8, 0x6C3000
	0x03A93E94 LDR X8, [X8 + 0xEB8]
	0x03A93E98 LDR X0, [X8]
	0x03A93E9C BL 0x3C124EC
	0x03A93EA0 LDR X8, [X19]
	0x03A93EA4 MOV X1, X31
	0x03A93EA8 LDR X8, [X8 + 0xB8]
	0x03A93EAC STR W0, [X8 + 0x84]
	0x03A93EB0 ADRP X8, 0x6C3000
	0x03A93EB4 LDR X8, [X8 + 0xEC8]
	0x03A93EB8 LDR X0, [X8]
	0x03A93EBC BL 0x3C124EC
	0x03A93EC0 LDR X8, [X19]
	0x03A93EC4 MOV X1, X31
	0x03A93EC8 LDR X8, [X8 + 0xB8]
	0x03A93ECC STR W0, [X8 + 0x88]
	0x03A93ED0 ADRP X8, 0x6C1000
	0x03A93ED4 LDR X8, [X8 + 0x820]
	0x03A93ED8 LDR X0, [X8]
	0x03A93EDC BL 0x3C124EC
	0x03A93EE0 LDR X8, [X19]
	0x03A93EE4 MOV X1, X31
	0x03A93EE8 LDR X8, [X8 + 0xB8]
	0x03A93EEC STR W0, [X8 + 0x8C]
	0x03A93EF0 ADRP X8, 0x6C4000
	0x03A93EF4 LDR X8, [X8 + 0x510]
	0x03A93EF8 LDR X0, [X8]
	0x03A93EFC BL 0x3C124EC
	0x03A93F00 LDR X8, [X19]
	0x03A93F04 MOV X1, X31
	0x03A93F08 LDR X8, [X8 + 0xB8]
	0x03A93F0C STR W0, [X8 + 0x90]
	0x03A93F10 ADRP X8, 0x6C4000
	0x03A93F14 LDR X8, [X8 + 0x4C0]
	0x03A93F18 LDR X0, [X8]
	0x03A93F1C BL 0x3C124EC
	0x03A93F20 LDR X8, [X19]
	0x03A93F24 MOV X1, X31
	0x03A93F28 LDR X8, [X8 + 0xB8]
	0x03A93F2C STR W0, [X8 + 0x94]
	0x03A93F30 ADRP X8, 0x6C4000
	0x03A93F34 LDR X8, [X8 + 0x4A0]
	0x03A93F38 LDR X0, [X8]
	0x03A93F3C BL 0x3C124EC
	0x03A93F40 LDR X8, [X19]
	0x03A93F44 MOV X1, X31
	0x03A93F48 LDR X8, [X8 + 0xB8]
	0x03A93F4C STR W0, [X8 + 0x98]
	0x03A93F50 ADRP X8, 0x6C4000
	0x03A93F54 LDR X8, [X8 + 0x4E0]
	0x03A93F58 LDR X0, [X8]
	0x03A93F5C BL 0x3C124EC
	0x03A93F60 LDR X8, [X19]
	0x03A93F64 MOV X1, X31
	0x03A93F68 LDR X8, [X8 + 0xB8]
	0x03A93F6C STR W0, [X8 + 0x9C]
	0x03A93F70 ADRP X8, 0x6C0000
	0x03A93F74 LDR X8, [X8 + 0x3B8]
	0x03A93F78 LDR X0, [X8]
	0x03A93F7C BL 0x3C124EC
	0x03A93F80 LDR X8, [X19]
	0x03A93F84 MOV X1, X31
	0x03A93F88 LDR X8, [X8 + 0xB8]
	0x03A93F8C STR W0, [X8 + 0xA0]
	0x03A93F90 ADRP X8, 0x6C0000
	0x03A93F94 LDR X8, [X8 + 0x3C8]
	0x03A93F98 LDR X0, [X8]
	0x03A93F9C BL 0x3C124EC
	0x03A93FA0 LDR X8, [X19]
	0x03A93FA4 MOV X1, X31
	0x03A93FA8 LDR X8, [X8 + 0xB8]
	0x03A93FAC STR W0, [X8 + 0xA4]
	0x03A93FB0 ADRP X8, 0x6BD000
	0x03A93FB4 LDR X8, [X8 + 0x5A8]
	0x03A93FB8 LDR X0, [X8]
	0x03A93FBC BL 0x3C124EC
	0x03A93FC0 LDR X8, [X19]
	0x03A93FC4 MOV X1, X31
	0x03A93FC8 LDR X8, [X8 + 0xB8]
	0x03A93FCC STR W0, [X8 + 0xA8]
	0x03A93FD0 ADRP X8, 0x6BD000
	0x03A93FD4 LDR X8, [X8 + 0x5B8]
	0x03A93FD8 LDR X0, [X8]
	0x03A93FDC BL 0x3C124EC
	0x03A93FE0 LDR X8, [X19]
	0x03A93FE4 MOV X1, X31
	0x03A93FE8 LDR X8, [X8 + 0xB8]
	0x03A93FEC STR W0, [X8 + 0xAC]
	0x03A93FF0 ADRP X8, 0x6BD000
	0x03A93FF4 LDR X8, [X8 + 0x5C0]
	0x03A93FF8 LDR X0, [X8]
	0x03A93FFC BL 0x3C124EC
	0x03A94000 LDR X8, [X19]
	0x03A94004 MOV X1, X31
	0x03A94008 LDR X8, [X8 + 0xB8]
	0x03A9400C STR W0, [X8 + 0xB0]
	0x03A94010 ADRP X8, 0x6C0000
	0x03A94014 LDR X8, [X8 + 0x6D8]
	0x03A94018 LDR X0, [X8]
	0x03A9401C BL 0x3C124EC

ISIL:
	001 Subtract X31, X31, 464
	002 Move [X31+432], X29
	003 Move [X31+440], X30
	004 Move [X31+448], X20
	005 Move [X31+456], X19
	006 Move X20, 0x950000
	007 Move W8, [X20+910]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x661000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move X0, 0x6C2000
	017 Move X0, [X0+2248]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+910], W8
	021 NotImplemented "Instruction MOVI not yet implemented."
	022 Move X0, X31
	023 Move [X31+416], X31
	024 Move [X31+384], V0
	025 Move [X31+392], V0
	026 Call SystemInfo.get_graphicsUVStartsAtTop
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {67}
	031 Move X20, 0x6C2000
	032 Move X20, [X20+2248]
	033 Move X0, [X20]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X20]
	039 Move X8, [X0+184]
	040 Move X20, [X8]
	041 Compare X20, 0
	042 JumpIfEqual {70}
	043 Move X0, X20
	044 Move X1, X31
	045 Call ScriptableRenderer.get_cameraColorTargetHandle, X0
	046 Compare X0, 0
	047 JumpIfEqual {68}
	048 Move X1, X0
	049 Move X0, X19
	050 Call CameraData.IsHandleYFlipped, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {70}
	055 Move X8, 0x661000
	056 Move X8, [X8+1432]
	057 Move X19, [X19+208]
	058 Move X0, [X8]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X19
	064 Move X1, X31
	065 Move X2, X31
	066 Call Object.op_Inequality, X0, X1
	067 Move W0, W31
	068 Move W8, [X19+360]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move W0, 1
	071 Move X20, [X31+448]
	072 Move X19, [X31+456]
	073 Move X29, [X31+432]
	074 Move X30, [X31+440]
	075 And W0, W0, 1
	076 Add X31, X31, 464
	077 Return X0
	078 Add X8, X31, 336
	079 Move X0, X20
	080 Move X1, X31
	081 Call ScriptableRenderer.get_cameraColorTarget, X0
	082 Move V0, [X31+336]
	083 Move V1, [X31+352]
	084 Move X8, [X31+368]
	085 Add X0, X31, 384
	086 Add X1, X31, 288
	087 Move TEMP, 0
	088 Not TEMP
	089 Move W3, TEMP
	090 Move W2, W31
	091 Move W4, W31
	092 Move X5, X31
	093 Move [X31+288], V0
	094 Move [X31+296], V1
	095 Move [X31+320], X8
	096 Call RenderTargetIdentifier..ctor, X0, X1, X2, X3, X4
	097 Move X8, [X31+416]
	098 Move V0, [X31+384]
	099 Move V1, [X31+400]
	100 Move W0, 2
	101 Move X1, X31
	102 Move [X31+368], X8
	103 Add X8, X31, 240
	104 Move [X31+336], V0
	105 Move [X31+344], V1
	106 Call RenderTargetIdentifier.op_Implicit, X0
	107 Move V0, [X31+240]
	108 Move V1, [X31+256]
	109 Move X8, [X31+272]
	110 Move V2, [X31+336]
	111 Move V3, [X31+352]
	112 Move X9, [X31+368]
	113 Add X0, X31, 192
	114 Add X1, X31, 144
	115 Move X2, X31
	116 Move [X31+144], V0
	117 Move [X31+152], V1
	118 Move [X31+176], X8
	119 Move [X31+192], V2
	120 Move [X31+200], V3
	121 Move [X31+224], X9
	122 Call RenderTargetIdentifier.op_Equality, X0, X1
	123 Move X8, [X19+376]
	124 Compare X8, 0
	125 JumpIfEqual {187}
	126 Move W20, W0
	127 Move X0, X8
	128 Move X1, X31
	129 Call XRPass.get_enabled, X0
	130 Move TEMP, X0
	131 And TEMP, TEMP, 1
	132 Compare TEMP, 1
	133 JumpIfNotEqual {183}
	134 Move V0, [X31+384]
	135 Move V1, [X31+400]
	136 Move X8, [X31+416]
	137 Move [X31+336], V0
	138 Move [X31+344], V1
	139 Move [X31+368], X8
	140 Move X8, [X19+376]
	141 Compare X8, 0
	142 JumpIfEqual {187}
	143 Move X9, [X8+80]
	144 Move V0, [X8+48]
	145 Move V1, [X8+64]
	146 NotImplemented "Instruction MOVI not yet implemented."
	147 Add X0, X31, 240
	148 Add X1, X31, 96
	149 Move TEMP, 0
	150 Not TEMP
	151 Move W3, TEMP
	152 Move W2, W31
	153 Move W4, W31
	154 Move X5, X31
	155 Move [X31+272], X31
	156 Move [X31+128], X9
	157 Move [X31+96], V0
	158 Move [X31+104], V1
	159 Move [X31+240], V2
	160 Move [X31+248], V2
	161 Call RenderTargetIdentifier..ctor, X0, X1, X2, X3, X4
	162 Move V0, [X31+336]
	163 Move V1, [X31+352]
	164 Move X8, [X31+368]
	165 Move V2, [X31+240]
	166 Move V3, [X31+256]
	167 Move X9, [X31+272]
	168 Add X0, X31, 48
	169 Add X1, X31, 0
	170 Move X2, X31
	171 Move [X31+48], V0
	172 Move [X31+56], V1
	173 Move [X31+80], X8
	174 Move [X31], V2
	175 Move [X31+8], V3
	176 Move [X31+32], X9
	177 Call RenderTargetIdentifier.op_Equality, X0, X1
	178 Or W8, W20, W0
	179 Move TEMP, X8
	180 And TEMP, TEMP, 1
	181 Compare TEMP, 1
	182 JumpIfEqual {55}
	183 Move TEMP, X20
	184 And TEMP, TEMP, 1
	185 Compare TEMP, 1
	186 JumpIfEqual {55}
	187 Call 0x1C17F20

Method: System.Boolean IsRenderTargetProjectionMatrixFlipped(UnityEngine.Rendering.RTHandle color, UnityEngine.Rendering.RTHandle depth = null)

Disassembly:
	0x03A946E4 LDRB W8, [X8 + 0x9]
	0x03A946E8 CBZ W8, 0x3A94700
	0x03A946EC MOVZ W19, 0x1
	0x03A946F0 MOV W0, W19
	0x03A946F4 LDP X20, X19, [X31 + 0x10]
	0x03A946F8 LDR X30, [X31], #0x20
	0x03A946FC RET
	0x03A94700 LDR W8, [X0 + 0xE0]
	0x03A94704 CBNZ W8, 0x3A9470C
	0x03A94708 BL 0x1C16DFC
	0x03A9470C ADRP X20, 0x94E000
	0x03A94710 LDRB W8, [X20 + 0x3D7]
	0x03A94714 CBNZ W8, 0x3A9472C
	0x03A94718 ADRP X0, 0x6C2000
	0x03A9471C LDR X0, [X0 + 0xEF8]
	0x03A94720 BL 0x1C16CF4
	0x03A94724 MOVZ W8, 0x1
	0x03A94728 STRB W8, [X20 + 0x3D7]
	0x03A9472C LDR X0, [X19]
	0x03A94730 LDR W8, [X0 + 0xE0]
	0x03A94734 CBNZ W8, 0x3A94740
	0x03A94738 BL 0x1C16DFC
	0x03A9473C LDR X0, [X19]
	0x03A94740 LDR X8, [X0 + 0xB8]
	0x03A94744 LDRB W8, [X8 + 0xA]
	0x03A94748 CMP W8, 0x0
	0x03A9474C MOVZ W8, 0x3
	0x03A94750 CSINC W0, W8, W31, EQ
	0x03A94754 B 0x3A946F4
	0x03A94758 STR X30, [X31 - 0x30]!
	0x03A9475C STP X22, X21, [X31 + 0x10]
	0x03A94760 STP X20, X19, [X31 + 0x20]
	0x03A94764 ADRP X21, 0x94E000
	0x03A94768 ADRP X22, 0x6BC000
	0x03A9476C ADRP X19, 0x6BC000
	0x03A94770 ADRP X20, 0x6C2000
	0x03A94774 LDRB W8, [X21 + 0x39C]
	0x03A94778 LDR X22, [X22 + 0x718]
	0x03A9477C LDR X19, [X19 + 0x720]
	0x03A94780 LDR X20, [X20 + 0xEF8]
	0x03A94784 TBNZ X8, 0x0, 0x3A947B4
	0x03A94788 ADRP X0, 0x6BC000
	0x03A9478C LDR X0, [X0 + 0x720]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x94F000
	007 Move W8, [X22+911]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x660000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+911], W8
	020 Move X0, X31
	021 Call SystemInfo.get_graphicsUVStartsAtTop
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {43}
	026 Move X8, 0x660000
	027 Move X8, [X8+1432]
	028 Move X22, [X21+208]
	029 Move X0, [X8]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X22
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Inequality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {50}
	042 Move W0, 1
	043 Move W0, W31
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Return X0
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSEL not yet implemented."
	052 Move X0, X21
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Call CameraData.IsHandleYFlipped, X0, X1
	059 Return X0

Method: System.Boolean IsTemporalAAEnabled()

Disassembly:
	0x03A903D4 BL 0x1C16CF4
	0x03A903D8 ADRP X0, 0x6C4000
	0x03A903DC LDR X0, [X0 + 0x10]
	0x03A903E0 BL 0x1C16CF4
	0x03A903E4 ADRP X0, 0x68C000
	0x03A903E8 LDR X0, [X0 + 0x8A8]
	0x03A903EC BL 0x1C16CF4
	0x03A903F0 MOVZ W8, 0x1
	0x03A903F4 STRB W8, [X25 + 0x36A]
	0x03A903F8 LDR X0, [X24]
	0x03A903FC STRB W31, [X31 + 0x8]
	0x03A90400 ADRP X25, 0x68C000
	0x03A90404 LDR W8, [X0 + 0xE0]
	0x03A90408 LDR X25, [X25 + 0x8A8]
	0x03A9040C CBNZ W8, 0x3A90418
	0x03A90410 BL 0x1C16DFC
	0x03A90414 LDR X0, [X24]
	0x03A90418 LDR X8, [X0 + 0xB8]
	0x03A9041C ADD X0, X31, 0x8
	0x03A90420 MOV X1, X31
	0x03A90424 MOV X3, X31
	0x03A90428 LDR X2, [X8 + 0x48]
	0x03A9042C BL 0x39B1DB0
	0x03A90430 LDR X0, [X25]
	0x03A90434 LDR W8, [X0 + 0xE0]
	0x03A90438 CBNZ W8, 0x3A90440
	0x03A9043C BL 0x1C16DFC
	0x03A90440 MOV X0, X31
	0x03A90444 BL 0x3C3BACC
	0x03A90448 CMP W0, 0x8
	0x03A9044C MOVZ W8, 0x8
	0x03A90450 MOVZ W9, 0x4
	0x03A90454 CSEL W24, W9, W8, EQ
	0x03A90458 BL 0x3A89318
	0x03A9045C STR W23, [X19]
	0x03A90460 CBZ X20, 0x3A90568
	0x03A90464 LDR W8, [X20 + 0x88]
	0x03A90468 CBZ W8, 0x3A904C0
	0x03A9046C ADRP X8, 0x663000
	0x03A90470 LDR X8, [X8 + 0x5A8]
	0x03A90474 MOV W25, W0
	0x03A90478 ADDS W31, W23, 0x1
	0x03A9047C CSET W23, NE
	0x03A90480 LDR X0, [X8]
	0x03A90484 LDR W8, [X0 + 0xE0]
	0x03A90488 CBNZ W8, 0x3A90490
	0x03A9048C BL 0x1C16DFC
	0x03A90490 SUB W0, W21, W23
	0x03A90494 MOV W1, W25
	0x03A90498 MOV X2, X31
	0x03A9049C BL 0x337EE94
	0x03A904A0 STR W0, [X19 + 0x4]
	0x03A904A4 LDR W0, [X20 + 0x8C]
	0x03A904A8 MOV W1, W24
	0x03A904AC MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x953000
	005 Move W8, [X20+912]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x6C5000
	012 Move X0, [X0+2328]
	013 Call 0x1C17CF4
	014 Move X0, 0x6C7000
	015 Move X0, [X0+3880]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+912], W8
	019 Move [X31+8], X31
	020 Move X0, [X19+192]
	021 Compare X0, 0
	022 JumpIfEqual {63}
	023 Move X8, 0x6C5000
	024 Move X8, [X8+2328]
	025 Add X1, X31, 8
	026 Move X2, [X8]
	027 Call 0x21A5990, X0, X1
	028 Move W8, [X19+428]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X19+480]
	031 Compare X8, 0
	032 JumpIfEqual {55}
	033 Move W8, [X19+224]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X0, [X31+8]
	036 Compare X0, 0
	037 JumpIfEqual {46}
	038 Move W8, [X0+44]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X1, X31
	041 Call UniversalAdditionalCameraData.get_cameraStack, X0
	042 Compare X0, 0
	043 JumpIfEqual {63}
	044 Move W8, [X0+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X0, [X19+192]
	047 Compare X0, 0
	048 JumpIfEqual {63}
	049 Move X1, X31
	050 Call Camera.get_allowDynamicResolution, X0
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {60}
	055 Move W0, W31
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+32]
	059 Return X0
	060 Move W8, [X19+392]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction CSET not yet implemented."
	063 Call 0x1C17F20

Method: UnityEngine.Experimental.Rendering.XRPass get_xr()

Disassembly:
	0x03A94790 BL 0x1C16CF4
	0x03A94794 ADRP X0, 0x6BC000

ISIL:
	001 Move X0, [X0+376]
	002 Return X0

Method: System.Void set_xr(UnityEngine.Experimental.Rendering.XRPass value)

Disassembly:
	0x03A94798 LDR X0, [X0 + 0x718]
	0x03A9479C BL 0x1C16CF4

ISIL:
	001 Move [X0+376], X1
	002 Return 

Method: UnityEngine.Rendering.Universal.XRPassUniversal get_xrUniversal()

Disassembly:
	0x03A9013C LDR X22, [X22 + 0x898]
	0x03A90140 MOV X19, X2
	0x03A90144 MOV X20, X1
	0x03A90148 MOV X21, X0
	0x03A9014C TBNZ X8, 0x0, 0x3A9017C
	0x03A90150 ADRP X0, 0x6C6000
	0x03A90154 LDR X0, [X0 + 0x1B8]
	0x03A90158 BL 0x1C16CF4
	0x03A9015C ADRP X0, 0x663000
	0x03A90160 LDR X0, [X0 + 0x598]
	0x03A90164 BL 0x1C16CF4
	0x03A90168 ADRP X0, 0x68C000
	0x03A9016C LDR X0, [X0 + 0x898]
	0x03A90170 BL 0x1C16CF4
	0x03A90174 MOVZ W8, 0x1
	0x03A90178 STRB W8, [X23 + 0x36D]
	0x03A9017C LDR X0, [X22]
	0x03A90180 STRB W31, [X31 + 0x8]
	0x03A90184 LDR W8, [X0 + 0xE0]
	0x03A90188 CBNZ W8, 0x3A90194
	0x03A9018C BL 0x1C16DFC
	0x03A90190 LDR X0, [X22]
	0x03A90194 LDR X8, [X0 + 0xB8]
	0x03A90198 ADD X0, X31, 0x8
	0x03A9019C MOV X1, X31
	0x03A901A0 MOV X3, X31
	0x03A901A4 LDR X2, [X8 + 0x58]
	0x03A901A8 BL 0x39B1DB0
	0x03A901AC CBZ W19, 0x3A902AC
	0x03A901B0 CBZ X21, 0x3A902E8
	0x03A901B4 LDR W8, [X21 + 0x7C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x953000
	005 Move W8, [X20+913]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x6C8000
	012 Move X0, [X0+912]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+913], W8
	016 Move X8, [X19+376]
	017 Compare X8, 0
	018 JumpIfEqual {26}
	019 Move X9, 0x6C8000
	020 Move X9, [X9+912]
	021 Move X10, [X8]
	022 Move X9, [X9]
	023 Move W12, [X10+304]
	024 Move W11, [X9+304]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X0, X31
	027 Move X10, [X10+200]
	028 Add X10, X10, X11
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSEL not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0

Method: System.Boolean get_resetHistory()

Disassembly:
	0x03A947A0 ADRP X0, 0x6C2000
	0x03A947A4 LDR X0, [X0 + 0xEF8]
	0x03A947A8 BL 0x1C16CF4
	0x03A947AC MOVZ W8, 0x1

ISIL:
	001 Move W8, [X0+512]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

