Type: UnityEngine.Rendering.Universal.Light2DBlendStyle

Method: UnityEngine.Vector2 get_blendFactors()

Disassembly:
	0x03A16958 BL 0x1C16CF4
	0x03A1695C ADRP X0, 0x73E000
	0x03A16960 LDR X0, [X0 + 0x498]
	0x03A16964 BL 0x1C16CF4
	0x03A16968 ADRP X0, 0x73E000
	0x03A1696C LDR X0, [X0 + 0x568]
	0x03A16970 BL 0x1C16CF4
	0x03A16974 MOVZ W8, 0x1
	0x03A16978 STRB W8, [X22 + 0xFC5]
	0x03A1697C LDR X0, [X21]
	0x03A16980 STP X31, X31, [X31 + 0x8]
	0x03A16984 STR X31, [X31 + 0x18]
	0x03A16988 LDR W8, [X0 + 0xE0]

ISIL:
	001 NotImplemented "Instruction LDRSW not yet implemented."
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move X9, -48750592
	004 Move X10, -48750592
	005 Add X9, X9, 2796
	006 Add X10, X10, 2808
	007 Move V0, [X9]
	008 Move V1, [X10]
	009 Return X0
	010 Move S1, W31
	011 Move S0, 1
	012 Return X0

Method: UnityEngine.Rendering.Universal.Light2DBlendStyle/MaskChannelFilter get_maskTextureChannelFilter()

Disassembly:
	0x03A1698C CBNZ W8, 0x3A16994
	0x03A16990 BL 0x1C16DFC
	0x03A16994 ADRP X22, 0x9CC000
	0x03A16998 LDRB W8, [X22 + 0xD]
	0x03A1699C CBNZ W8, 0x3A169B4
	0x03A169A0 ADRP X0, 0x73E000
	0x03A169A4 LDR X0, [X0 + 0x498]
	0x03A169A8 BL 0x1C16CF4
	0x03A169AC MOVZ W8, 0x1
	0x03A169B0 STRB W8, [X22 + 0xD]
	0x03A169B4 LDR X0, [X21]
	0x03A169B8 LDR W8, [X0 + 0xE0]
	0x03A169BC CBNZ W8, 0x3A169C8
	0x03A169C0 BL 0x1C16DFC
	0x03A169C4 LDR X0, [X21]
	0x03A169C8 LDR X8, [X0 + 0xB8]
	0x03A169CC LDR X0, [X8 + 0x8]
	0x03A169D0 CBZ X0, 0x3A16A8C
	0x03A169D4 ADRP X8, 0x73E000
	0x03A169D8 LDR X8, [X8 + 0x568]
	0x03A169DC ADRP X23, 0x73E000
	0x03A169E0 ADRP X22, 0x73E000
	0x03A169E4 LDR X1, [X8]
	0x03A169E8 LDR X23, [X23 + 0x558]
	0x03A169EC LDR X22, [X22 + 0x550]
	0x03A169F0 ADD X8, X31, 0x8
	0x03A169F4 BL 0x301CB58
	0x03A169F8 MOVZ W8, 0x1
	0x03A169FC MOV W24, W8
	0x03A16A00 LDR X1, [X23]
	0x03A16A04 ADD X0, X31, 0x8
	0x03A16A08 BL 0x2BC4350
	0x03A16A0C MOV W21, W0
	0x03A16A10 TBZ X0, 0x0, 0x3A16A54
	0x03A16A14 LDR X8, [X31 + 0x18]
	0x03A16A18 CBZ X8, 0x3A16A88
	0x03A16A1C LDR W9, [X8 + 0x24]
	0x03A16A20 CMP W9, 0x4
	0x03A16A24 B.NE 0x3A16A00
	0x03A16A28 LDR W9, [X8 + 0x28]
	0x03A16A2C CMP W9, W19
	0x03A16A30 B.NE 0x3A16A00
	0x03A16A34 MOV X0, X8
	0x03A16A38 MOV W1, W20
	0x03A16A3C BL 0x3A15404
	0x03A16A40 TBZ X0, 0x0, 0x3A16A00
	0x03A16A44 MOV W8, W31
	0x03A16A48 TBNZ X24, 0x0, 0x3A169FC
	0x03A16A4C MOVZ W19, 0x5
	0x03A16A50 B 0x3A16A58
	0x03A16A54 MOVZ W19, 0x6
	0x03A16A58 LDR X1, [X22]
	0x03A16A5C ADD X0, X31, 0x8
	0x03A16A60 BL 0x2BC434C
	0x03A16A64 CMP W19, 0x5
	0x03A16A68 CSET W8, EQ
	0x03A16A6C AND W0, W21, W8, 0x0
	0x03A16A70 LDP X20, X19, [X31 + 0x50]
	0x03A16A74 LDP X22, X21, [X31 + 0x40]
	0x03A16A78 LDP X24, X23, [X31 + 0x30]
	0x03A16A7C LDR X30, [X31 + 0x20]
	0x03A16A80 ADD X31, X31, 0x60
	0x03A16A84 RET
	0x03A16A88 BL 0x1C16F20
	0x03A16A8C BL 0x1C16F20
	0x03A16A90 B 0x3A16A98
	0x03A16A94 B 0x3A16A98
	0x03A16A98 MOV X19, X0
	0x03A16A9C CMP W1, 0x1
	0x03A16AA0 B.NE 0x3A16AD0
	0x03A16AA4 MOV X0, X19
	0x03A16AA8 BL 0x3EB1AD0
	0x03A16AAC LDR X20, [X0]
	0x03A16AB0 BL 0x3EB1AE0
	0x03A16AB4 LDR X1, [X22]
	0x03A16AB8 ADD X0, X31, 0x8
	0x03A16ABC BL 0x2BC434C
	0x03A16AC0 CBNZ X20, 0x3A16AD8
	0x03A16AC4 MOV W21, W31
	0x03A16AC8 MOV W19, W31
	0x03A16ACC B 0x3A16A64
	0x03A16AD0 MOV X20, X31
	0x03A16AD4 B 0x3A16AE4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W9, [X0+8]
	005 Move X19, X8
	006 Subtract W9, W9, 1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X8, -48750592
	009 Add X8, X8, 2773
	010 NotImplemented "Instruction ADR not yet implemented."
	011 Move W11, [X8]
	012 Add X10, X10, X11
	013 CallNoReturn X10
	014 Move W8, 0x3F800000
	015 Move [X19+4], X31
	016 Move [X19+20], X31
	017 Move [X19+12], X31
	018 Move [X19], W8
	019 Move X20, 0x9C3000
	020 Move W8, [X20+3674]
	021 Compare W8, 0
	022 JumpIfNotEqual {28}
	023 Move X0, 0x6E5000
	024 Move X0, [X0+2464]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+3674], W8
	028 Move X8, 0x6E5000
	029 Move X8, [X8+2464]
	030 Move X8, [X8]
	031 Move X8, [X8+184]
	032 Move S0, [X8]
	033 Move S1, [X8+4]
	034 Move S2, [X8+8]
	035 Move S3, [X8+12]
	036 Move [X19], S0
	037 Move [X19+8], S1
	038 Move [X19+8], S2
	039 Move [X19+16], S3
	040 Move [X19+16], S0
	041 Move [X19+24], S1
	042 Move [X19+24], S2
	043 Move [X19+32], S3
	044 Move X8, 0x3F800000
	045 Move [X19], X8
	046 Move [X19+8], X31
	047 Move W8, 0x3F800000
	048 Move [X19], X31
	049 Move [X19+20], X31
	050 Move [X19+12], X31
	051 Move [X19+8], W8
	052 Move [X19+28], W31
	053 Move X8, 0x3F800000
	054 Move [X19], X31
	055 Move [X19+8], X8
	056 Move [X19+16], X31
	057 Move [X19+24], X31
	058 Move X8, -49451008
	059 Move V0, [X8+17]
	060 Move [X19], V0
	061 Move [X19+8], V0
	062 Move X8, -49451008
	063 Move X9, -49446912
	064 Move V0, [X8+17]
	065 Move V1, [X9+1608]
	066 Move [X19], W31
	067 Move [X19+28], W31
	068 Move [X19+4], V0
	069 Move [X19+20], D1
	070 Move X8, -49451008
	071 Move X9, -49446912
	072 Move V0, [X8+17]
	073 Move V1, [X9+1608]
	074 Move [X19], X31
	075 Move [X19+8], V0
	076 Move [X19+24], D1
	077 Move X8, -49451008
	078 Move V0, [X8+17]
	079 Move W8, 0x3F800000
	080 Move [X19+8], W31
	081 Move [X19], X31
	082 Move [X19+12], V0
	083 Move [X19+28], W8
	084 Move X20, [X31+16]
	085 Move X19, [X31+24]
	086 Move X30, [X31+32]
	087 Return X0

Method: System.Boolean get_isDirty()

Disassembly:
	0x03A16AEC BL 0x2BC434C
	0x03A16AF0 CBNZ X20, 0x3A16AFC

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_isDirty(System.Boolean value)

Disassembly:
	0x03A16AF4 MOV X0, X19
	0x03A16AF8 BL 0x1D2C690
	0x03A16AFC MOV X0, X20

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.Boolean get_hasRenderTarget()

Disassembly:
	0x03A16B00 BL 0x1C16F18
	0x03A16B04 BL 0x1990590

ISIL:
	001 Move W0, [X0+17]
	002 Return X0

Method: System.Void set_hasRenderTarget(System.Boolean value)

Disassembly:
	0x03A16B08 SUB X31, X31, 0x60
	0x03A16B0C STP X30, X25, [X31 + 0x20]
	0x03A16B10 STP X24, X23, [X31 + 0x30]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+17], W8
	003 Return 

