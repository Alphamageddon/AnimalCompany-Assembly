Type: UnityEngine.Rendering.Universal.PostProcessPasses

Method: UnityEngine.Rendering.Universal.Internal.ColorGradingLutPass get_colorGradingLutPass()

Disassembly:
	0x03A68814 BL 0x1C16CF4
	0x03A68818 ADRP X0, 0x6EE000

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: UnityEngine.Rendering.Universal.PostProcessPass get_postProcessPass()

Disassembly:
	0x03A6881C LDR X0, [X0 + 0x9C0]
	0x03A68820 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+8]
	002 Return X0

Method: UnityEngine.Rendering.Universal.PostProcessPass get_finalPostProcessPass()

Disassembly:
	0x03A68824 ADRP X0, 0x68C000
	0x03A68828 LDR X0, [X0 + 0xE10]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: UnityEngine.Rendering.RTHandle get_afterPostProcessColor()

Disassembly:
	0x03A6882C BL 0x1C16CF4
	0x03A68830 ADRP X0, 0x692000

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: UnityEngine.Rendering.RTHandle get_colorGradingLut()

Disassembly:
	0x03A68834 LDR X0, [X0 + 0x858]
	0x03A68838 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Boolean get_isCreated()

Disassembly:
	0x03A6883C ADRP X0, 0x6B6000
	0x03A68840 LDR X0, [X0 + 0xB50]
	0x03A68844 BL 0x1C16CF4
	0x03A68848 ADRP X0, 0x68B000
	0x03A6884C LDR X0, [X0 + 0x5A8]
	0x03A68850 BL 0x1C16CF4
	0x03A68854 ADRP X0, 0x6EE000
	0x03A68858 LDR X0, [X0 + 0x9C8]
	0x03A6885C BL 0x1C16CF4
	0x03A68860 ADRP X0, 0x68B000
	0x03A68864 LDR X0, [X0 + 0x598]
	0x03A68868 BL 0x1C16CF4
	0x03A6886C ADRP X0, 0x6EC000
	0x03A68870 LDR X0, [X0 + 0xA8]
	0x03A68874 BL 0x1C16CF4
	0x03A68878 ADRP X0, 0x6EE000
	0x03A6887C LDR X0, [X0 + 0x9D0]
	0x03A68880 BL 0x1C16CF4
	0x03A68884 ADRP X0, 0x6B4000
	0x03A68888 LDR X0, [X0 + 0x8A8]
	0x03A6888C BL 0x1C16CF4
	0x03A68890 ADRP X0, 0x6EE000
	0x03A68894 LDR X0, [X0 + 0x9D8]
	0x03A68898 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x97B000
	006 Move X20, 0x68C000
	007 Move W8, [X21+612]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x68C000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+612], W8
	019 Move X0, [X20]
	020 Move X19, [X19+48]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X2, X31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call Object.op_Inequality, X0, X1
	033 Return X0

Method: System.Void .ctor(UnityEngine.Rendering.Universal.PostProcessData rendererPostProcessData, ref UnityEngine.Rendering.Universal.PostProcessParams postProcessParams)

Disassembly:
	0x03A6889C MOVZ W8, 0x1
	0x03A688A0 STRB W8, [X23 + 0x26B]
	0x03A688A4 ADD X0, X31, 0x6B0
	0x03A688A8 MOVZ W2, 0x98
	0x03A688AC MOV W1, W31
	0x03A688B0 BL 0x3EB1B10
	0x03A688B4 MOVI V0.2D, 0x0

ISIL:
	001 NotImplemented "Instruction MOVI not yet implemented."
	002 Move [X0+40], X1
	003 Move [X0+48], X31
	004 Move [X0], V0
	005 Move [X0+8], V0
	006 Move [X0+32], X31
	007 Move X8, [X2]
	008 Move [X0+56], X8

Method: System.Void Recreate(UnityEngine.Rendering.Universal.PostProcessData data, ref UnityEngine.Rendering.Universal.PostProcessParams ppParams)

Disassembly:
	0x03A688B8 ADD X0, X31, 0x1B8
	0x03A688BC MOVZ W2, 0x88
	0x03A688C0 MOV W1, W31
	0x03A688C4 STR X31, [X31 + 0x6A0]
	0x03A688C8 STR W31, [X31 + 0x294]
	0x03A688CC STR X31, [X31 + 0x5A0]
	0x03A688D0 STR X31, [X31 + 0x278]
	0x03A688D4 STR X31, [X31 + 0x270]
	0x03A688D8 STR X31, [X31 + 0x280]
	0x03A688DC STR X31, [X31 + 0x248]
	0x03A688E0 STR V0, [X31 + 0x69]
	0x03A688E4 STR V0, [X31 + 0x68]
	0x03A688E8 STR V0, [X31 + 0x67]
	0x03A688EC STR V0, [X31 + 0x66]
	0x03A688F0 STR V0, [X31 + 0x65]
	0x03A688F4 STR V0, [X31 + 0x64]
	0x03A688F8 STR V0, [X31 + 0x63]
	0x03A688FC STR V0, [X31 + 0x62]
	0x03A68900 STR V0, [X31 + 0x61]
	0x03A68904 STR V0, [X31 + 0x60]
	0x03A68908 STR V0, [X31 + 0x5F]
	0x03A6890C STR V0, [X31 + 0x5E]
	0x03A68910 STR V0, [X31 + 0x5D]
	0x03A68914 STR V0, [X31 + 0x5C]
	0x03A68918 STR V0, [X31 + 0x5B]
	0x03A6891C STR V0, [X31 + 0x59]
	0x03A68920 STR V0, [X31 + 0x58]
	0x03A68924 STR V0, [X31 + 0x57]
	0x03A68928 STR V0, [X31 + 0x56]
	0x03A6892C STR V0, [X31 + 0x55]
	0x03A68930 STR V0, [X31 + 0x54]
	0x03A68934 STR V0, [X31 + 0x53]
	0x03A68938 STP V0, V0, [X31 + 0x250]
	0x03A6893C STR W31, [X31 + 0x244]
	0x03A68940 BL 0x3EB1B10
	0x03A68944 MOVI V0.2D, 0x0
	0x03A68948 ADD X0, X31, 0x128
	0x03A6894C MOVZ W2, 0x88
	0x03A68950 MOV W1, W31
	0x03A68954 STR X31, [X31 + 0x520]
	0x03A68958 STR V0, [X31 + 0x51]
	0x03A6895C STR V0, [X31 + 0x50]
	0x03A68960 STR V0, [X31 + 0x4F]
	0x03A68964 STR V0, [X31 + 0x4E]
	0x03A68968 STR V0, [X31 + 0x4D]
	0x03A6896C STR V0, [X31 + 0x4C]
	0x03A68970 STR V0, [X31 + 0x4B]
	0x03A68974 STR X31, [X31 + 0x1B0]
	0x03A68978 BL 0x3EB1B10
	0x03A6897C MOVI V0.2D, 0x0
	0x03A68980 ADD X0, X21, 0x8
	0x03A68984 MOV X1, X31
	0x03A68988 STR X31, [X31 + 0x4A0]
	0x03A6898C STR V0, [X31 + 0x49]
	0x03A68990 STR V0, [X31 + 0x48]
	0x03A68994 STR V0, [X31 + 0x47]
	0x03A68998 STR V0, [X31 + 0x46]
	0x03A6899C STR V0, [X31 + 0x45]
	0x03A689A0 STR V0, [X31 + 0x44]
	0x03A689A4 STR V0, [X31 + 0x43]
	0x03A689A8 STRB W31, [X31 + 0x120]
	0x03A689AC STR X31, [X31 + 0x420]
	0x03A689B0 STR V0, [X31 + 0x41]
	0x03A689B4 STP V0, V0, [X31 + 0x3F0]
	0x03A689B8 STP V0, V0, [X31 + 0x3D0]
	0x03A689BC STP V0, V0, [X31 + 0x3B0]
	0x03A689C0 BL 0x3C52ECC
	0x03A689C4 STR X0, [X31 + 0x90]
	0x03A689C8 LDR X0, [X22]
	0x03A689CC MOV X21, X1
	0x03A689D0 LDR W8, [X0 + 0xE0]
	0x03A689D4 CBNZ W8, 0x3A689DC
	0x03A689D8 BL 0x1C16DFC
	0x03A689DC MOV X0, X31
	0x03A689E0 BL 0x3A894A8
	0x03A689E4 CMP W0, W21
	0x03A689E8 CSEL W8, W21, W0, GT
	0x03A689EC MOV X0, X31
	0x03A689F0 STR W8, [X31 + 0x68]
	0x03A689F4 BL 0x3C3C8B4
	0x03A689F8 LDR X9, [X19 + 0x40]
	0x03A689FC STR W0, [X31 + 0x98]
	0x03A68A00 CBZ X9, 0x3A69C34
	0x03A68A04 ADRP X8, 0x6EE000
	0x03A68A08 LDR X8, [X8 + 0x978]
	0x03A68A0C ADRP X29, 0x6EE000
	0x03A68A10 ADRP X22, 0x6EE000
	0x03A68A14 ADRP X23, 0x68B000
	0x03A68A18 ADRP X28, 0x6B6000
	0x03A68A1C LDR X29, [X29 + 0x9A8]
	0x03A68A20 LDR X22, [X22 + 0x9B8]
	0x03A68A24 LDR X23, [X23 + 0x5A8]
	0x03A68A28 LDR X28, [X28 + 0xB28]
	0x03A68A2C LDR X1, [X8]
	0x03A68A30 ADD X8, X31, 0x310
	0x03A68A34 MOV X0, X9
	0x03A68A38 BL 0x2A2F9C0
	0x03A68A3C ADD X0, X31, 0x6B0
	0x03A68A40 ADD X1, X31, 0x310
	0x03A68A44 MOVZ W2, 0x98
	0x03A68A48 ADD X21, X31, 0x6B0
	0x03A68A4C BL 0x3EB1AC0
	0x03A68A50 ADD X24, X21, 0x10
	0x03A68A54 ADD X21, X19, 0x18
	0x03A68A58 ADD X27, X31, 0x630
	0x03A68A5C LDR X1, [X29]
	0x03A68A60 ADD X0, X31, 0x6B0
	0x03A68A64 BL 0x2BFA640
	0x03A68A68 TBZ X0, 0x0, 0x3A68BBC
	0x03A68A6C ADD X0, X31, 0x5B0
	0x03A68A70 MOVZ W2, 0x80

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x97B000
	008 Move X23, 0x68C000
	009 Move W8, [X22+613]
	010 Move X23, [X23+1432]
	011 Move X21, X2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x6EF000
	019 Move X0, [X0+2336]
	020 Call 0x1C17CF4
	021 Move X0, 0x68C000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move X0, 0x6ED000
	025 Move X0, [X0+2392]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+613], W8
	029 Move X0, [X23]
	030 Move X22, [X19+40]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X22
	036 Move X1, X31
	037 Call Object.op_Implicit, X0
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {43}
	042 Move X20, [X19+40]
	043 Move X0, [X23]
	044 Move X22, [X19+48]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X22
	051 Move X2, X31
	052 Call Object.op_Equality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {134}
	057 Move X0, [X23]
	058 Move X22, [X19+48]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X22
	064 Move X1, X31
	065 Move X2, X31
	066 Call Object.op_Inequality, X0, X1
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {90}
	071 Move X0, [X19]
	072 Compare X0, 0
	073 JumpIfEqual {76}
	074 Move X1, X31
	075 Call ColorGradingLutPass.Cleanup, X0
	076 Move X0, [X19+8]
	077 Compare X0, 0
	078 JumpIfEqual {81}
	079 Move X1, X31
	080 Call PostProcessPass.Cleanup, X0
	081 Move X0, [X19+16]
	082 Compare X0, 0
	083 JumpIfEqual {86}
	084 Move X1, X31
	085 Call PostProcessPass.Cleanup, X0
	086 Move [X19+48], X31
	087 Move [X19+8], X31
	088 Move [X19+16], X31
	089 Move [X19], X31
	090 Move X0, [X23]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X0, X20
	096 Move X1, X31
	097 Move X2, X31
	098 Call Object.op_Inequality, X0, X1
	099 Move TEMP, X0
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfNotEqual {134}
	103 Move X8, 0x6EF000
	104 Move X8, [X8+2336]
	105 Move X0, [X8]
	106 Call 0x1C17F10
	107 Move W1, 150
	108 Move X2, X20
	109 Move X3, X31
	110 Move X22, X0
	111 Call ColorGradingLutPass..ctor, X0, X1, X2
	112 Move [X19], X22
	113 Move X23, 0x6ED000
	114 Move X23, [X23+2392]
	115 Move X0, [X23]
	116 Call 0x1C17F10
	117 Move W1, 550
	118 Move X2, X20
	119 Move X3, X21
	120 Move X4, X31
	121 Move X22, X0
	122 Call PostProcessPass..ctor, X0, X1, X2, X3
	123 Move [X19+8], X22
	124 Move X0, [X23]
	125 Call 0x1C17F10
	126 Move W1, 600
	127 Move X2, X20
	128 Move X3, X21
	129 Move X4, X31
	130 Move X22, X0
	131 Call PostProcessPass..ctor, X0, X1, X2, X3
	132 Move [X19+16], X22
	133 Move [X19+48], X20
	134 Move X20, [X31+32]
	135 Move X19, [X31+40]
	136 Move X22, [X31+16]
	137 Move X21, [X31+24]
	138 Move X30, [X31+48]
	139 Move X23, [X31+56]
	140 Return 

Method: System.Void Dispose()

Disassembly:
	0x03A68A74 MOV X1, X24
	0x03A68A78 BL 0x3EB1AC0
	0x03A68A7C LDR X3, [X22]
	0x03A68A80 ADD X0, X31, 0x5B0
	0x03A68A84 ADD X1, X31, 0x294
	0x03A68A88 ADD X2, X31, 0x530
	0x03A68A8C BL 0x2EE0378
	0x03A68A90 LDR W25, [X31 + 0x294]
	0x03A68A94 ADD X0, X31, 0x630
	0x03A68A98 ADD X1, X31, 0x530
	0x03A68A9C MOVZ W2, 0x78
	0x03A68AA0 BL 0x3EB1AC0
	0x03A68AA4 LDR X0, [X23]
	0x03A68AA8 LDR W26, [X31 + 0x690]
	0x03A68AAC LDR W8, [X0 + 0xE0]
	0x03A68AB0 CBNZ W8, 0x3A68AB8
	0x03A68AB4 BL 0x1C16DFC
	0x03A68AB8 LDR W8, [X31 + 0x98]
	0x03A68ABC SUBS W8, W26, W8
	0x03A68AC0 CSNEG W8, W8, W8, PL
	0x03A68AC4 CMP W8, 0x1
	0x03A68AC8 B.HI 0x3A68B18
	0x03A68ACC ADRP X8, 0x68B000
	0x03A68AD0 LDR X8, [X8 + 0x598]
	0x03A68AD4 LDR X26, [X31 + 0x688]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0]
	005 Compare X0, 0
	006 JumpIfEqual {9}
	007 Move X1, X31
	008 Call ColorGradingLutPass.Cleanup, X0
	009 Move X0, [X19+8]
	010 Compare X0, 0
	011 JumpIfEqual {14}
	012 Move X1, X31
	013 Call PostProcessPass.Cleanup, X0
	014 Move X0, [X19+16]
	015 Compare X0, 0
	016 JumpIfEqual {19}
	017 Move X1, X31
	018 Call PostProcessPass.Cleanup, X0
	019 Move X0, [X19+24]
	020 Compare X0, 0
	021 JumpIfEqual {24}
	022 Move X1, X31
	023 Call RTHandle.Release, X0
	024 Move X0, [X19+32]
	025 Compare X0, 0
	026 JumpIfEqual {32}
	027 Move X1, X31
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Call RTHandle.Release, X0
	031 Return 
	032 Move X30, [X31+16]
	033 Move X19, [X31+24]
	034 Return 

Method: System.Void ReleaseRenderTargets()

Disassembly:
	0x03A68AD8 LDR X0, [X8]
	0x03A68ADC LDR W8, [X0 + 0xE0]
	0x03A68AE0 CBNZ W8, 0x3A68AE8
	0x03A68AE4 BL 0x1C16DFC
	0x03A68AE8 MOV X0, X26
	0x03A68AEC MOV X1, X31
	0x03A68AF0 BL 0x3C38948
	0x03A68AF4 TBZ X0, 0x0, 0x3A68B18
	0x03A68AF8 LDR X0, [X31 + 0x688]
	0x03A68AFC CBZ X0, 0x3A69C58
	0x03A68B00 LDR X8, [X0]
	0x03A68B04 LDR W26, [X31 + 0x648]
	0x03A68B08 LDP X9, X1, [X8 + 0x188]
	0x03A68B0C BLR X9
	0x03A68B10 CMP W26, W0
	0x03A68B14 B.EQ 0x3A68A5C
	0x03A68B18 LDR X0, [X19 + 0x58]
	0x03A68B1C CBZ X0, 0x3A69C48
	0x03A68B20 ADRP X9, 0x68C000
	0x03A68B24 LDR W10, [X0 + 0x1C]
	0x03A68B28 LDR X8, [X0 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+24]
	005 Compare X0, 0
	006 JumpIfEqual {9}
	007 Move X1, X31
	008 Call RTHandle.Release, X0
	009 Move X0, [X19+8]
	010 Compare X0, 0
	011 JumpIfEqual {14}
	012 Move X1, X31
	013 Call PostProcessPass.Dispose, X0
	014 Move X0, [X19+16]
	015 Compare X0, 0
	016 JumpIfEqual {19}
	017 Move X1, X31
	018 Call PostProcessPass.Dispose, X0
	019 Move X0, [X19+32]
	020 Compare X0, 0
	021 JumpIfEqual {27}
	022 Move X1, X31
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Call RTHandle.Release, X0
	026 Return 
	027 Move X30, [X31+16]
	028 Move X19, [X31+24]
	029 Return 

