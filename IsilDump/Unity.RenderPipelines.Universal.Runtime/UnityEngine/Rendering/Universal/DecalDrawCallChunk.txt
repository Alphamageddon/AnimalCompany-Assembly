Type: UnityEngine.Rendering.Universal.DecalDrawCallChunk

Method: System.Void set_subCallCount(System.Int32 value)

Disassembly:
	0x03A3C0A4 LDR X1, [X26]
	0x03A3C0A8 LDR X0, [X31 + 0x8]
	0x03A3C0AC BL 0x21337F0

ISIL:
	001 Move X8, [X0+104]
	002 Move [X8], W1
	003 Return 

Method: System.Int32 get_subCallCount()

Disassembly:
	0x03A3C0B0 LDR X3, [X23 + 0x20]
	0x03A3C0B4 LDR X6, [X27]
	0x03A3C0B8 MOV W2, W19

ISIL:
	001 Move X8, [X0+104]
	002 Move W0, [X8]
	003 Return X0

Method: System.Void RemoveAtSwapBack(System.Int32 entityIndex)

Disassembly:
	0x03A3C0BC MOV W4, W31
	0x03A3C0C0 MOV W5, W29
	0x03A3C0C4 BL 0x23DAD20
	0x03A3C0C8 ADRP X8, 0x719000
	0x03A3C0CC LDR X8, [X8 + 0x810]
	0x03A3C0D0 MOV X0, X28
	0x03A3C0D4 LDR X1, [X8]
	0x03A3C0D8 BL 0x2133458
	0x03A3C0DC ADRP X8, 0x719000
	0x03A3C0E0 LDR X3, [X23 + 0x28]
	0x03A3C0E4 LDR X8, [X8 + 0x800]
	0x03A3C0E8 MOV W2, W19
	0x03A3C0EC MOV W4, W31
	0x03A3C0F0 MOV W5, W29
	0x03A3C0F4 LDR X6, [X8]
	0x03A3C0F8 BL 0x23E5C74
	0x03A3C0FC LDR X0, [X21 + 0x28]
	0x03A3C100 CBZ X0, 0x3A3C194
	0x03A3C104 ADRP X8, 0x719000
	0x03A3C108 LDR X2, [X23 + 0x20]
	0x03A3C10C LDR X8, [X8 + 0x828]
	0x03A3C110 MOV X3, X31
	0x03A3C114 LDR X1, [X8]
	0x03A3C118 BL 0x3C129C0
	0x03A3C11C LDR X0, [X21 + 0x28]
	0x03A3C120 CBZ X0, 0x3A3C194
	0x03A3C124 ADRP X8, 0x719000
	0x03A3C128 LDR X2, [X23 + 0x28]
	0x03A3C12C LDR X8, [X8 + 0x820]
	0x03A3C130 MOV X3, X31
	0x03A3C134 LDR X1, [X8]
	0x03A3C138 BL 0x3C128D8
	0x03A3C13C CBZ X22, 0x3A3C194
	0x03A3C140 LDR X7, [X21 + 0x28]
	0x03A3C144 LDR X5, [X23 + 0x18]
	0x03A3C148 LDP X3, X1, [X31 + 0x18]
	0x03A3C14C LDR W4, [X31 + 0x2C]
	0x03A3C150 MOV X0, X22
	0x03A3C154 MOV W2, W31
	0x03A3C158 MOV W6, W29
	0x03A3C15C STR X31, [X31]
	0x03A3C160 BL 0x3C4F52C
	0x03A3C164 ADD X20, X20, 0x8
	0x03A3C168 CMP X24, X20
	0x03A3C16C MOV X29, X25
	0x03A3C170 B.NE 0x3A3C06C
	0x03A3C174 LDP X20, X19, [X31 + 0x80]
	0x03A3C178 LDP X22, X21, [X31 + 0x70]
	0x03A3C17C LDP X24, X23, [X31 + 0x60]
	0x03A3C180 LDP X26, X25, [X31 + 0x50]
	0x03A3C184 LDP X28, X27, [X31 + 0x40]
	0x03A3C188 LDP X29, X30, [X31 + 0x30]
	0x03A3C18C ADD X31, X31, 0x90
	0x03A3C190 RET
	0x03A3C194 BL 0x1C16F20
	0x03A3C198 STP X29, X30, [X31 - 0x60]!
	0x03A3C19C STP X28, X27, [X31 + 0x10]
	0x03A3C1A0 STP X26, X25, [X31 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x9A7000
	009 Move X23, 0x71A000
	010 Move X22, 0x71A000
	011 Move X21, 0x71A000
	012 Move W8, [X24+307]
	013 Move X23, [X23+1928]
	014 Move X22, [X22+1936]
	015 Move X21, [X21+1944]
	016 Move W20, W1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0x71A000
	023 Move X0, [X0+1944]
	024 Call 0x1C17CF4
	025 Move X0, 0x71A000
	026 Move X0, [X0+1936]
	027 Call 0x1C17CF4
	028 Move X0, 0x71A000
	029 Move X0, [X0+1928]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X24+307], W8
	033 Move W3, [X19+16]
	034 Move X4, [X23]
	035 Add X1, X19, 40
	036 Move X0, X19
	037 Move W2, W20
	038 Call DecalChunk.RemoveAtSwapBack, X0, X1, X2, X3
	039 Move W3, [X19+16]
	040 Move X4, [X23]
	041 Add X1, X19, 56
	042 Move X0, X19
	043 Move W2, W20
	044 Call DecalChunk.RemoveAtSwapBack, X0, X1, X2, X3
	045 Move W3, [X19+16]
	046 Move X4, [X22]
	047 Add X1, X19, 72
	048 Move X0, X19
	049 Move W2, W20
	050 Call DecalChunk.RemoveAtSwapBack, X0, X1, X2, X3
	051 Move W3, [X19+16]
	052 Move X4, [X21]
	053 Add X1, X19, 88
	054 Move X0, X19
	055 Move W2, W20
	056 Call DecalChunk.RemoveAtSwapBack, X0, X1, X2, X3
	057 Move W8, [X19+16]
	058 Move X22, [X31+32]
	059 Move X21, [X31+40]
	060 Move X24, [X31+16]
	061 Move X23, [X31+24]
	062 Subtract W8, W8, 1
	063 Move [X19+16], W8
	064 Move X20, [X31+48]
	065 Move X19, [X31+56]
	066 Move X30, [X31+64]
	067 Return 

Method: System.Void SetCapacity(System.Int32 newCapacity)

Disassembly:
	0x03A3C1A4 STP X24, X23, [X31 + 0x30]
	0x03A3C1A8 STP X22, X21, [X31 + 0x40]
	0x03A3C1AC STP X20, X19, [X31 + 0x50]
	0x03A3C1B0 SUB X31, X31, 0x1E0
	0x03A3C1B4 ADRP X23, 0x9A6000
	0x03A3C1B8 LDRB W8, [X23 + 0x13C]
	0x03A3C1BC MOV W19, W5
	0x03A3C1C0 MOV X20, X4
	0x03A3C1C4 MOV X21, X3
	0x03A3C1C8 MOV X24, X2
	0x03A3C1CC MOV X22, X1
	0x03A3C1D0 MOV X25, X0
	0x03A3C1D4 TBNZ X8, 0x0, 0x3A3C204
	0x03A3C1D8 ADRP X0, 0x719000
	0x03A3C1DC LDR X0, [X0 + 0x818]
	0x03A3C1E0 BL 0x1C16CF4
	0x03A3C1E4 ADRP X0, 0x719000
	0x03A3C1E8 LDR X0, [X0 + 0x820]
	0x03A3C1EC BL 0x1C16CF4
	0x03A3C1F0 ADRP X0, 0x719000
	0x03A3C1F4 LDR X0, [X0 + 0x828]
	0x03A3C1F8 BL 0x1C16CF4
	0x03A3C1FC MOVZ W8, 0x1
	0x03A3C200 STRB W8, [X23 + 0x13C]
	0x03A3C204 LDR X0, [X25 + 0x10]
	0x03A3C208 CBZ X0, 0x3A3C3E0
	0x03A3C20C BL 0x3A3C3E4
	0x03A3C210 LDR X8, [X25]
	0x03A3C214 MOV X23, X0
	0x03A3C218 MOV X0, X25
	0x03A3C21C MOV X1, X24
	0x03A3C220 LDP X9, X2, [X8 + 0x178]
	0x03A3C224 BLR X9
	0x03A3C228 CBZ X21, 0x3A3C3E0
	0x03A3C22C MOV X24, X0
	0x03A3C230 LDR X0, [X21 + 0x28]
	0x03A3C234 CBZ X0, 0x3A3C3E0
	0x03A3C238 ADRP X8, 0x719000
	0x03A3C23C LDR X8, [X8 + 0x818]
	0x03A3C240 FMOV S0, 1
	0x03A3C244 FMOV S1, 1
	0x03A3C248 FMOV S2, 1
	0x03A3C24C LDR X1, [X8]
	0x03A3C250 FMOV S3, W31
	0x03A3C254 MOV X2, X31
	0x03A3C258 BL 0x3C126A4
	0x03A3C25C CBZ X20, 0x3A3C3E0
	0x03A3C260 LDR X8, [X20 + 0x68]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x9A7000
	009 Move X23, 0x71A000
	010 Move X22, 0x71A000
	011 Move X21, 0x71A000
	012 Move W8, [X24+308]
	013 Move X23, [X23+1952]
	014 Move X22, [X22+1960]
	015 Move X21, [X21+1968]
	016 Move W19, W1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0x71A000
	023 Move X0, [X0+1968]
	024 Call 0x1C17CF4
	025 Move X0, 0x71A000
	026 Move X0, [X0+1960]
	027 Call 0x1C17CF4
	028 Move X0, 0x71A000
	029 Move X0, [X0+1952]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X24+308], W8
	033 Move X2, [X23]
	034 Add X0, X20, 40
	035 Move W1, W19
	036 Call ArrayExtensions.ResizeArray, X0, X1
	037 Move X2, [X23]
	038 Add X0, X20, 56
	039 Move W1, W19
	040 Call ArrayExtensions.ResizeArray, X0, X1
	041 Move X2, [X22]
	042 Add X0, X20, 72
	043 Move W1, W19
	044 Call ArrayExtensions.ResizeArray, X0, X1
	045 Move X2, [X21]
	046 Add X0, X20, 88
	047 Move W1, W19
	048 Call ArrayExtensions.ResizeArray, X0, X1
	049 Move [X20+20], W19
	050 Move X20, [X31+48]
	051 Move X19, [X31+56]
	052 Move X22, [X31+32]
	053 Move X21, [X31+40]
	054 Move X24, [X31+16]
	055 Move X23, [X31+24]
	056 Move X30, [X31+64]
	057 Return 

Method: System.Void Dispose()

Disassembly:
	0x03A3C264 LDR W8, [X8]
	0x03A3C268 CMP W8, 0x1
	0x03A3C26C STR X8, [X31 + 0x10]
	0x03A3C270 B.LT 0x3A3C3C0
	0x03A3C274 ADRP X29, 0x719000
	0x03A3C278 LDR X29, [X29 + 0x820]
	0x03A3C27C MOV X9, X31
	0x03A3C280 LDR X8, [X20 + 0x58]
	0x03A3C284 STR X9, [X31 + 0x18]
	0x03A3C288 ADD X9, X8, X9, 0x3, LSL
	0x03A3C28C LDP W8, W9, [X9]
	0x03A3C290 SXTW X8, W8
	0x03A3C294 CMP W8, W9
	0x03A3C298 B.GE 0x3A3C3B0
	0x03A3C29C UBFM X26, X8, 0x3A, 0x39
	0x03A3C2A0 UBFM X27, X8, 0x3E, 0x3D
	0x03A3C2A4 SUB W28, W9, W8
	0x03A3C2A8 LDR X8, [X20 + 0x38]
	0x03A3C2AC LDR X25, [X21 + 0x28]
	0x03A3C2B0 ADD X0, X31, 0x120
	0x03A3C2B4 MOV X1, X31
	0x03A3C2B8 ADD X8, X8, X26
	0x03A3C2BC LDP V0, V1, [X8 + 0x20]
	0x03A3C2C0 LDP V2, V3, [X8]
	0x03A3C2C4 ADD X8, X31, 0x160
	0x03A3C2C8 STP V0, V1, [X31 + 0x140]
	0x03A3C2CC STP V2, V3, [X31 + 0x120]
	0x03A3C2D0 BL 0x38990D4
	0x03A3C2D4 LDP V0, V1, [X31 + 0x160]
	0x03A3C2D8 LDP V2, V3, [X31 + 0x180]
	0x03A3C2DC STP V0, V1, [X31 + 0x1A0]
	0x03A3C2E0 STP V2, V3, [X31 + 0x1C0]
	0x03A3C2E4 CBZ X25, 0x3A3C3E0
	0x03A3C2E8 ADRP X8, 0x719000
	0x03A3C2EC LDR X8, [X8 + 0x828]
	0x03A3C2F0 LDP V0, V1, [X31 + 0x1A0]
	0x03A3C2F4 LDP V2, V3, [X31 + 0x1C0]
	0x03A3C2F8 ADD X2, X31, 0xE0
	0x03A3C2FC LDR X1, [X8]
	0x03A3C300 MOV X0, X25
	0x03A3C304 MOV X3, X31
	0x03A3C308 STP V0, V1, [X31 + 0xE0]
	0x03A3C30C STP V2, V3, [X31 + 0x100]
	0x03A3C310 BL 0x3C12728
	0x03A3C314 LDR X0, [X21 + 0x28]
	0x03A3C318 CBZ X0, 0x3A3C3E0
	0x03A3C31C LDR X8, [X20 + 0x48]
	0x03A3C320 LDR X1, [X29]
	0x03A3C324 MOV X2, X31
	0x03A3C328 LDR V0, [X8, X27, LSL]
	0x03A3C32C BL 0x3C1257C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x9A7000
	007 Move X20, 0x6E2000
	008 Move W8, [X21+309]
	009 Move X20, [X20+328]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x6E2000
	016 Move X0, [X0+328]
	017 Call 0x1C17CF4
	018 Move X0, 0x71A000
	019 Move X0, [X0+1976]
	020 Call 0x1C17CF4
	021 Move X0, 0x71A000
	022 Move X0, [X0+1984]
	023 Call 0x1C17CF4
	024 Move X0, 0x6E2000
	025 Move X0, [X0+344]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+309], W8
	029 Move X1, [X20]
	030 Add X0, X19, 104
	031 Call NativeArray`1<Int32>.Dispose, X0
	032 Move W8, [X19+20]
	033 Compare W8, 0
	034 JumpIfEqual {54}
	035 Move X20, 0x71A000
	036 Move X20, [X20+1976]
	037 Move X21, 0x6E2000
	038 Move X22, 0x71A000
	039 Add X0, X19, 40
	040 Move X1, [X20]
	041 Move X21, [X21+344]
	042 Move X22, [X22+1984]
	043 Call NativeArray`1<float4x4>.Dispose, X0
	044 Move X1, [X20]
	045 Add X0, X19, 56
	046 Call NativeArray`1<float4x4>.Dispose, X0
	047 Move X1, [X21]
	048 Add X0, X19, 72
	049 Call NativeArray`1<Single>.Dispose, X0
	050 Move X1, [X22]
	051 Add X0, X19, 88
	052 Call NativeArray`1<DecalSubDrawCall>.Dispose, X0
	053 Move [X19+16], X31
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Return 

Method: System.Void .ctor()

Disassembly:
	0x03A3C330 LDR X8, [X20 + 0x28]
	0x03A3C334 ADD X0, X31, 0x60

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

