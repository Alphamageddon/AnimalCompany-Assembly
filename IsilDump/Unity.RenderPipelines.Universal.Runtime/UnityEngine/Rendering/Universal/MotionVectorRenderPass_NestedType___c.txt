Type: UnityEngine.Rendering.Universal.MotionVectorRenderPass/<>c

Method: System.Void .cctor()

Disassembly:
	0x03A5FC80 LDR X8, [X24 + 0x198]
	0x03A5FC84 CBZ X8, 0x3A60430
	0x03A5FC88 LDR X21, [X8 + 0x68]
	0x03A5FC8C CBZ X21, 0x3A60430
	0x03A5FC90 MOV X0, X21
	0x03A5FC94 MOV X1, X31
	0x03A5FC98 MOV X2, X31
	0x03A5FC9C ADD X22, X20, 0x18
	0x03A5FCA0 BL 0x3C152D0
	0x03A5FCA4 LDR W8, [X20 + 0x120]
	0x03A5FCA8 LDP V1, V0, [X20 + 0x100]
	0x03A5FCAC LDR V2, [X20 + 0xF]
	0x03A5FCB0 ADD X1, X31, 0xB0
	0x03A5FCB4 MOV X0, X19
	0x03A5FCB8 MOV X2, X31
	0x03A5FCBC STR W8, [X31 + 0xE0]
	0x03A5FCC0 STP V1, V0, [X31 + 0xC0]
	0x03A5FCC4 STR V2, [X31 + 0xB]
	0x03A5FCC8 BL 0x3A68048
	0x03A5FCCC MOV X0, X24
	0x03A5FCD0 MOV X1, X22
	0x03A5FCD4 MOV X2, X21
	0x03A5FCD8 BL 0x3A645A0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x984000
	005 Move X20, 0x6F8000
	006 Move W8, [X19+568]
	007 Move X20, [X20+1320]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x6F8000
	013 Move X0, [X0+1320]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+568], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call Object..ctor, X0
	022 Move X8, [X20]
	023 Move X8, [X8+184]
	024 Move [X8], X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 

Method: System.Void .ctor()

Disassembly:
	0x03A5FCDC MOV X0, X24
	0x03A5FCE0 MOV X1, X22

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void <Render>b__20_0(UnityEngine.Rendering.Universal.MotionVectorRenderPass/PassData data, UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphContext context)

Disassembly:
	0x03A5FCE4 MOV X2, X21
	0x03A5FCE8 BL 0x3A64648
	0x03A5FCEC MOV X0, X22
	0x03A5FCF0 MOV X1, X31
	0x03A5FCF4 BL 0x3A93110
	0x03A5FCF8 TBZ X0, 0x0, 0x3A5FD1C
	0x03A5FCFC LDRB W8, [X24 + 0x236]
	0x03A5FD00 CBZ W8, 0x3A5FD1C
	0x03A5FD04 ADRP X8, 0x6F6000
	0x03A5FD08 LDR X8, [X8 + 0xF90]
	0x03A5FD0C MOV X0, X21
	0x03A5FD10 MOV X2, X31
	0x03A5FD14 LDR X1, [X8]
	0x03A5FD18 BL 0x3C14E3C
	0x03A5FD1C ADRP X27, 0x6F4000
	0x03A5FD20 LDR X27, [X27 + 0xFF0]
	0x03A5FD24 MOV X0, X22
	0x03A5FD28 MOV X1, X31
	0x03A5FD2C BL 0x3A9006C
	0x03A5FD30 TBZ X0, 0x0, 0x3A5FD3C
	0x03A5FD34 LDR X8, [X20 + 0x1A8]
	0x03A5FD38 CBZ X8, 0x3A5FF64
	0x03A5FD3C STR W31, [X31 + 0x1AC]
	0x03A5FD40 LDR X0, [X27]
	0x03A5FD44 LDR W8, [X0 + 0xE0]
	0x03A5FD48 CBNZ W8, 0x3A5FD50
	0x03A5FD4C BL 0x1C16DFC
	0x03A5FD50 MOV X0, X20
	0x03A5FD54 MOV X1, X31
	0x03A5FD58 BL 0x3A43B70
	0x03A5FD5C MOV X23, X0
	0x03A5FD60 CBZ X0, 0x3A5FD7C
	0x03A5FD64 MOV X0, X23
	0x03A5FD68 MOV X1, X22
	0x03A5FD6C MOV X2, X31
	0x03A5FD70 BL 0x3A35A68
	0x03A5FD74 AND W27, W0, 0x1
	0x03A5FD78 B 0x3A5FD80
	0x03A5FD7C MOV W27, W31
	0x03A5FD80 LDRB W8, [X24 + 0x23A]
	0x03A5FD84 CBZ W8, 0x3A5FDAC
	0x03A5FD88 LDR X0, [X20 + 0x1D0]
	0x03A5FD8C CBZ X0, 0x3A60430
	0x03A5FD90 LDR X8, [X0]
	0x03A5FD94 MOV X1, X19
	0x03A5FD98 LDP X9, X2, [X8 + 0x1A8]
	0x03A5FD9C BLR X9
	0x03A5FDA0 MOV X26, X0
	0x03A5FDA4 STR X0, [X24 + 0x118]
	0x03A5FDA8 B 0x3A5FDB0
	0x03A5FDAC LDR X26, [X24 + 0x118]
	0x03A5FDB0 LDR W9, [X20 + 0x168]
	0x03A5FDB4 LDRB W8, [X20 + 0x184]
	0x03A5FDB8 CMP W9, 0x1
	0x03A5FDBC B.NE 0x3A5FDD0
	0x03A5FDC0 LDR W9, [X20 + 0x16C]
	0x03A5FDC4 CMP W9, 0x2
	0x03A5FDC8 CSET W28, EQ
	0x03A5FDCC B 0x3A5FDD4
	0x03A5FDD0 MOV W28, W31
	0x03A5FDD4 LDR W29, [X20 + 0x1C4]
	0x03A5FDD8 UBFM W8, W8, 0x1F, 0x1E
	0x03A5FDDC MOV X0, X22
	0x03A5FDE0 MOV X1, X31
	0x03A5FDE4 STR W8, [X31 + 0x1A8]
	0x03A5FDE8 BL 0x3A8F3D4
	0x03A5FDEC TBZ X0, 0x0, 0x3A5FE04
	0x03A5FDF0 LDR V0, [X20 + 0x214]
	0x03A5FDF4 FCMP S0, 0x0

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+128], X30
	003 Move [X31+144], X22
	004 Move [X31+152], X21
	005 Move [X31+160], X20
	006 Move [X31+168], X19
	007 Move X21, 0x984000
	008 Move W8, [X21+569]
	009 Move X20, X2
	010 Move X19, X1
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x6F8000
	016 Move X0, [X0+1248]
	017 Call 0x1C17CF4
	018 Move X0, 0x6F2000
	019 Move X0, [X0+2696]
	020 Call 0x1C17CF4
	021 Move X0, 0x6F8000
	022 Move X0, [X0+1344]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+569], W8
	026 Compare X20, 0
	027 JumpIfEqual {84}
	028 Compare X19, 0
	029 JumpIfEqual {84}
	030 Move X8, 0x6F8000
	031 Move X8, [X8+1248]
	032 Move X22, 0x6F2000
	033 Move X21, [X20+16]
	034 Add X20, X19, 40
	035 Move X0, [X8]
	036 Move W8, [X0+224]
	037 Move X22, [X22+2696]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X21
	042 Move X1, X19
	043 Move X2, X20
	044 Call MotionVectorRenderPass.ExecutePass, X0, X1, X2
	045 Move X0, [X22]
	046 Move X20, [X19+40]
	047 Move X19, [X19+16]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Add X8, X31, 40
	053 Move X0, X19
	054 Move X1, X31
	055 Call TextureHandle.op_Implicit, X0
	056 NotImplemented "Instruction LDUR not yet implemented."
	057 NotImplemented "Instruction LDUR not yet implemented."
	058 Move X8, [X31+72]
	059 Move [X31+80], V0
	060 Move [X31+88], V1
	061 Move [X31+112], X8
	062 Compare X20, 0
	063 JumpIfEqual {84}
	064 Move X8, 0x6F8000
	065 Move X8, [X8+1344]
	066 Move V0, [X31+80]
	067 Move V1, [X31+96]
	068 Move X9, [X31+112]
	069 Add X2, X31, 0
	070 Move X1, [X8]
	071 Move X0, X20
	072 Move X3, X31
	073 Move [X31], V0
	074 Move [X31+8], V1
	075 Move [X31+32], X9
	076 Call CommandBuffer.SetGlobalTexture, X0, X1, X2
	077 Move X20, [X31+160]
	078 Move X19, [X31+168]
	079 Move X22, [X31+144]
	080 Move X21, [X31+152]
	081 Move X30, [X31+128]
	082 Add X31, X31, 176
	083 Return 
	084 Call 0x1C17F20

