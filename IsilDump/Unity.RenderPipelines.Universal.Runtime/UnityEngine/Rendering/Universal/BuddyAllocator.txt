Type: UnityEngine.Rendering.Universal.BuddyAllocator

Method: UnityEngine.Rendering.Universal.BuddyAllocator/Header get_header()

Disassembly:
	0x03A58660 LDR V3, [X31 + 0x4F]
	0x03A58664 STP V0, V1, [X31 + 0x40]
	0x03A58668 STP V2, V3, [X31 + 0x60]
	0x03A5866C LDR W9, [X8 + 0x18]
	0x03A58670 CMP W21, W9
	0x03A58674 B.CS 0x3A588DC
	0x03A58678 LDP V0, V1, [X31 + 0x60]
	0x03A5867C LDP V2, V3, [X31 + 0x40]
	0x03A58680 ADD X8, X8, X22, 0x6, LSL
	0x03A58684 STP V0, V1, [X8 + 0x40]
	0x03A58688 STP V2, V3, [X8 + 0x20]
	0x03A5868C LDR X8, [X20 + 0x10]
	0x03A58690 LDR V0, [X31 + 0x50]
	0x03A58694 LDR V1, [X31 + 0x51]
	0x03A58698 LDR V2, [X31 + 0x52]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x98B000
	005 Move W8, [X20+493]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x6FF000
	012 Move X0, [X0+688]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+493], W8
	016 Move X0, [X19]
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return X0

Method: Unity.Collections.NativeArray`1<System.Int32> get_freeMaskCounts()

Disassembly:
	0x03A5869C LDR V3, [X31 + 0x53]
	0x03A586A0 STR V0, [X31 + 0x48]
	0x03A586A4 STR V1, [X31 + 0x49]
	0x03A586A8 STR V2, [X31 + 0x4A]
	0x03A586AC STR V3, [X31 + 0x4B]
	0x03A586B0 CBZ X8, 0x3A588D8
	0x03A586B4 LDR V0, [X31 + 0x48]
	0x03A586B8 LDR V1, [X31 + 0x49]
	0x03A586BC LDR V2, [X31 + 0x4A]
	0x03A586C0 LDR V3, [X31 + 0x4B]
	0x03A586C4 STP V0, V1, [X31]
	0x03A586C8 STP V2, V3, [X31 + 0x20]
	0x03A586CC LDR W9, [X8 + 0x18]
	0x03A586D0 CMP W21, W9
	0x03A586D4 B.CS 0x3A588DC
	0x03A586D8 LDP V0, V1, [X31 + 0x20]
	0x03A586DC LDP V2, V3, [X31]
	0x03A586E0 ADD X8, X8, X22, 0x6, LSL
	0x03A586E4 STP V0, V1, [X8 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x98B000
	006 Move X20, 0x6FF000
	007 Move W8, [X21+494]
	008 Move X20, [X20+696]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x6FF000
	015 Move X0, [X0+696]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+494], W8
	019 Move W1, [X19+8]
	020 Move W2, [X19+12]
	021 Move X3, [X20]
	022 Move X0, X19
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Call 0x21A1608, X0, X1, X2
	028 Return X0

Method: Unity.Collections.NativeArray`1<System.UInt64> get_freeMasksStorage()

Disassembly:
	0x03A586E8 STP V2, V3, [X8 + 0x20]
	0x03A586EC B 0x3A58878
	0x03A586F0 LDR X9, [X20 + 0x10]
	0x03A586F4 CBZ X9, 0x3A588D8
	0x03A586F8 LDR W10, [X9 + 0x18]
	0x03A586FC CBZ W10, 0x3A588DC
	0x03A58700 LDP V1, V0, [X9 + 0x40]
	0x03A58704 LDP V3, V2, [X9 + 0x20]
	0x03A58708 STR V0, [X31 + 0x4B]
	0x03A5870C STR V1, [X31 + 0x4A]
	0x03A58710 STR V2, [X31 + 0x49]
	0x03A58714 STR V3, [X31 + 0x48]
	0x03A58718 CBZ X8, 0x3A588D8
	0x03A5871C LDR V0, [X31 + 0x48]
	0x03A58720 LDR V1, [X31 + 0x49]
	0x03A58724 LDR V2, [X31 + 0x4A]
	0x03A58728 LDR V3, [X31 + 0x4B]
	0x03A5872C STP V0, V1, [X31 + 0x240]
	0x03A58730 STP V2, V3, [X31 + 0x260]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x98B000
	006 Move X20, 0x6FF000
	007 Move W8, [X21+495]
	008 Move X20, [X20+704]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x6FF000
	015 Move X0, [X0+704]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+495], W8
	019 Move W1, [X19+16]
	020 Move W2, [X19+20]
	021 Move X3, [X20]
	022 Move X0, X19
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Call BuddyAllocator.GetNativeArray, X0, X1, X2
	028 Return X0

Method: Unity.Collections.NativeArray`1<System.UInt64> FreeMasks(System.Int32 level)

Disassembly:
	0x03A58734 LDR W9, [X8 + 0x18]
	0x03A58738 CBZ W9, 0x3A588DC
	0x03A5873C LDP V1, V0, [X31 + 0x260]
	0x03A58740 LDP V3, V2, [X31 + 0x240]
	0x03A58744 FCMP S9, S8
	0x03A58748 STP V1, V0, [X8 + 0x40]
	0x03A5874C STP V3, V2, [X8 + 0x20]
	0x03A58750 LDR X8, [X20 + 0x18]
	0x03A58754 B.EQ 0x3A58780
	0x03A58758 LDR V0, [X31 + 0x4C]
	0x03A5875C LDR V1, [X31 + 0x4D]
	0x03A58760 LDR V2, [X31 + 0x4E]
	0x03A58764 LDR V3, [X31 + 0x4F]
	0x03A58768 STR V0, [X31 + 0x44]
	0x03A5876C STR V1, [X31 + 0x45]
	0x03A58770 STR V2, [X31 + 0x46]
	0x03A58774 STR V3, [X31 + 0x47]
	0x03A58778 CBNZ X8, 0x3A587B0
	0x03A5877C B 0x3A588D8
	0x03A58780 LDR X9, [X20 + 0x10]
	0x03A58784 CBZ X9, 0x3A588D8
	0x03A58788 LDR W10, [X9 + 0x18]
	0x03A5878C CMP W10, 0x1
	0x03A58790 B.LS 0x3A588DC
	0x03A58794 LDP V1, V0, [X9 + 0x80]
	0x03A58798 LDP V3, V2, [X9 + 0x60]
	0x03A5879C STR V0, [X31 + 0x47]
	0x03A587A0 STR V1, [X31 + 0x46]
	0x03A587A4 STR V2, [X31 + 0x45]
	0x03A587A8 STR V3, [X31 + 0x44]
	0x03A587AC CBZ X8, 0x3A588D8
	0x03A587B0 LDR V0, [X31 + 0x44]
	0x03A587B4 LDR V1, [X31 + 0x45]
	0x03A587B8 LDR V2, [X31 + 0x46]
	0x03A587BC LDR V3, [X31 + 0x47]
	0x03A587C0 STP V0, V1, [X31 + 0x200]
	0x03A587C4 STP V2, V3, [X31 + 0x220]
	0x03A587C8 LDR W9, [X8 + 0x18]
	0x03A587CC CMP W9, 0x1
	0x03A587D0 B.LS 0x3A588DC
	0x03A587D4 LDP V1, V0, [X31 + 0x220]
	0x03A587D8 LDP V3, V2, [X31 + 0x200]
	0x03A587DC STP V1, V0, [X8 + 0x80]
	0x03A587E0 STP V3, V2, [X8 + 0x60]
	0x03A587E4 LDR X8, [X20 + 0x10]
	0x03A587E8 LDR V0, [X31 + 0x50]
	0x03A587EC LDR V1, [X31 + 0x51]
	0x03A587F0 LDR V2, [X31 + 0x52]
	0x03A587F4 LDR V3, [X31 + 0x53]
	0x03A587F8 STP V0, V1, [X31 + 0x300]
	0x03A587FC STP V2, V3, [X31 + 0x320]
	0x03A58800 CBZ X8, 0x3A588D8
	0x03A58804 LDP V0, V1, [X31 + 0x300]
	0x03A58808 LDP V2, V3, [X31 + 0x320]
	0x03A5880C STP V0, V1, [X31 + 0x1C0]
	0x03A58810 STP V2, V3, [X31 + 0x1E0]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0x98B000
	008 Move W8, [X21+496]
	009 Move W19, W1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x6FF000
	016 Move X0, [X0+712]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+496], W8
	020 Move X21, 0x6FF000
	021 Move X21, [X21+712]
	022 Move X0, X20
	023 Call BuddyAllocator.get_freeMasksStorage, X0
	024 Move X22, 0x98B000
	025 Move W8, [X22+493]
	026 Move [X31], X0
	027 Move [X31+8], X1
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {37}
	032 Move X0, 0x6FF000
	033 Move X0, [X0+688]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X22+493], W8
	037 Move X8, [X20]
	038 Move W9, 6
	039 Move TEMP, 0
	040 Not TEMP
	041 Move W10, TEMP
	042 Move X3, [X21]
	043 Move W8, [X8]
	044 Add X0, X31, 0
	045 NotImplemented "Instruction SDIV not yet implemented."
	046 Subtract W11, W19, W9
	047 NotImplemented "Instruction BIC not yet implemented."
	048 Multiply W12, W12, W8
	049 NotImplemented "Instruction LSLV not yet implemented."
	050 Add W11, W11, 1
	051 NotImplemented "Instruction LSLV not yet implemented."
	052 NotImplemented "Instruction BIC not yet implemented."
	053 NotImplemented "Instruction ORN not yet implemented."
	054 Multiply W11, W11, W8
	055 NotImplemented "Instruction LSLV not yet implemented."
	056 NotImplemented "Instruction ORN not yet implemented."
	057 NotImplemented "Instruction CSEL not yet implemented."
	058 Move W12, 1
	059 NotImplemented "Instruction SDIV not yet implemented."
	060 Add W1, W8, W9
	061 NotImplemented "Instruction LSLV not yet implemented."
	062 Call NativeArray`1<UInt64>.GetSubArray, X0, X1, X2
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X30, [X31+16]
	068 Add X31, X31, 64
	069 Return X0

Method: Unity.Collections.NativeArray`1<System.Int32> get_freeMaskIndicesStorage()

Disassembly:
	0x03A58874 STP V3, V2, [X8 + 0x60]
	0x03A58878 LDR X23, [X20 + 0x20]
	0x03A5887C MOV X0, X31
	0x03A58880 BL 0x3C3C88C
	0x03A58884 CBZ X23, 0x3A588D8
	0x03A58888 LDR W8, [X23 + 0x18]
	0x03A5888C CMP W21, W8
	0x03A58890 B.CS 0x3A588DC
	0x03A58894 ADD X8, X23, X22, 0x2, LSL
	0x03A58898 STR W0, [X8 + 0x20]
	0x03A5889C LDR X8, [X20 + 0x28]
	0x03A588A0 CBZ X8, 0x3A588D8
	0x03A588A4 LDR W9, [X8 + 0x18]
	0x03A588A8 CMP W21, W9
	0x03A588AC B.CS 0x3A588DC
	0x03A588B0 LDR V0, [X19 + 0x148]
	0x03A588B4 ADD X8, X8, X22, 0x2, LSL
	0x03A588B8 STR S0, [X8 + 0x20]
	0x03A588BC ADD X31, X31, 0x540

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x98B000
	006 Move X20, 0x6FF000
	007 Move W8, [X21+497]
	008 Move X20, [X20+696]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x6FF000
	015 Move X0, [X0+696]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+497], W8
	019 Move W1, [X19+24]
	020 Move W2, [X19+28]
	021 Move X3, [X20]
	022 Move X0, X19
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Call 0x21A1608, X0, X1, X2
	028 Return X0

Method: Unity.Collections.NativeArray`1<System.Int32> FreeMaskIndices(System.Int32 level)

Disassembly:
	0x03A588C0 LDP X20, X19, [X31 + 0x40]
	0x03A588C4 LDP X22, X21, [X31 + 0x30]
	0x03A588C8 LDP X30, X23, [X31 + 0x20]
	0x03A588CC LDR X29, [X31 + 0x10]
	0x03A588D0 LDP D9, D8, [X31], #0x50
	0x03A588D4 RET
	0x03A588D8 BL 0x1C16F20
	0x03A588DC BL 0x1C16F28
	0x03A588E0 STP X30, X19, [X31 - 0x10]!
	0x03A588E4 MOV X19, X0
	0x03A588E8 LDR X0, [X0 + 0x38]
	0x03A588EC CBZ X0, 0x3A58A30
	0x03A588F0 LDR X8, [X0]
	0x03A588F4 LDR X9, [X8 + 0x218]
	0x03A588F8 LDR X1, [X8 + 0x220]
	0x03A588FC BLR X9
	0x03A58900 MOVZ W8, 0x42C80000
	0x03A58904 FMOV S1, W8
	0x03A58908 FCMP S0, S1
	0x03A5890C B.NE 0x3A58A24
	0x03A58910 LDR X0, [X19 + 0x40]
	0x03A58914 CBZ X0, 0x3A58A30
	0x03A58918 LDR X8, [X0]
	0x03A5891C LDR X9, [X8 + 0x218]
	0x03A58920 LDR X1, [X8 + 0x220]
	0x03A58924 BLR X9
	0x03A58928 FCMP S0, 0x0
	0x03A5892C B.NE 0x3A58A24
	0x03A58930 LDR X0, [X19 + 0x48]
	0x03A58934 CBZ X0, 0x3A58A30
	0x03A58938 LDR X8, [X0]
	0x03A5893C LDR X9, [X8 + 0x218]
	0x03A58940 LDR X1, [X8 + 0x220]
	0x03A58944 BLR X9
	0x03A58948 FCMP S0, 0x0
	0x03A5894C B.NE 0x3A58A24
	0x03A58950 LDR X0, [X19 + 0x50]
	0x03A58954 CBZ X0, 0x3A58A30
	0x03A58958 LDR X8, [X0]
	0x03A5895C LDR X9, [X8 + 0x218]
	0x03A58960 LDR X1, [X8 + 0x220]
	0x03A58964 BLR X9
	0x03A58968 FCMP S0, 0x0
	0x03A5896C B.NE 0x3A58A24
	0x03A58970 LDR X0, [X19 + 0x58]
	0x03A58974 CBZ X0, 0x3A58A30
	0x03A58978 LDR X8, [X0]
	0x03A5897C LDR X9, [X8 + 0x218]
	0x03A58980 LDR X1, [X8 + 0x220]
	0x03A58984 BLR X9
	0x03A58988 MOVZ W8, 0x42C80000
	0x03A5898C FMOV S1, W8
	0x03A58990 FCMP S0, S1
	0x03A58994 B.NE 0x3A58A24
	0x03A58998 LDR X0, [X19 + 0x60]
	0x03A5899C CBZ X0, 0x3A58A30

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0x98B000
	008 Move W8, [X21+498]
	009 Move W19, W1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x6FF000
	016 Move X0, [X0+720]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+498], W8
	020 Move X21, 0x6FF000
	021 Move X21, [X21+720]
	022 Move X0, X20
	023 Call BuddyAllocator.get_freeMaskIndicesStorage, X0
	024 Move X22, 0x98B000
	025 Move W8, [X22+493]
	026 Move [X31], X0
	027 Move [X31+8], X1
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {37}
	032 Move X0, 0x6FF000
	033 Move X0, [X0+688]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X22+493], W8
	037 Move X8, [X20]
	038 Move W9, 6
	039 Move TEMP, 0
	040 Not TEMP
	041 Move W10, TEMP
	042 Move X3, [X21]
	043 Move W8, [X8]
	044 Add X0, X31, 0
	045 NotImplemented "Instruction SDIV not yet implemented."
	046 Subtract W11, W19, W9
	047 NotImplemented "Instruction BIC not yet implemented."
	048 Multiply W12, W12, W8
	049 NotImplemented "Instruction LSLV not yet implemented."
	050 Add W11, W11, 1
	051 NotImplemented "Instruction LSLV not yet implemented."
	052 NotImplemented "Instruction BIC not yet implemented."
	053 NotImplemented "Instruction ORN not yet implemented."
	054 Multiply W11, W11, W8
	055 NotImplemented "Instruction LSLV not yet implemented."
	056 NotImplemented "Instruction ORN not yet implemented."
	057 NotImplemented "Instruction CSEL not yet implemented."
	058 Move W12, 1
	059 NotImplemented "Instruction SDIV not yet implemented."
	060 Add W1, W8, W9
	061 NotImplemented "Instruction LSLV not yet implemented."
	062 Call NativeArray`1<Int32>.GetSubArray, X0, X1, X2
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X30, [X31+16]
	068 Add X31, X31, 64
	069 Return X0

Method: System.Int32 get_levelCount()

Disassembly:
	0x03A589A0 LDR X8, [X0]
	0x03A589A4 LDR X9, [X8 + 0x218]
	0x03A589A8 LDR X1, [X8 + 0x220]
	0x03A589AC BLR X9
	0x03A589B0 FCMP S0, 0x0
	0x03A589B4 B.NE 0x3A58A24
	0x03A589B8 LDR X0, [X19 + 0x68]
	0x03A589BC CBZ X0, 0x3A58A30
	0x03A589C0 LDR X8, [X0]
	0x03A589C4 LDR X9, [X8 + 0x218]
	0x03A589C8 LDR X1, [X8 + 0x220]
	0x03A589CC BLR X9
	0x03A589D0 FCMP S0, 0x0
	0x03A589D4 B.NE 0x3A58A24
	0x03A589D8 LDR X0, [X19 + 0x70]
	0x03A589DC CBZ X0, 0x3A58A30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x98B000
	005 Move W8, [X20+493]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x6FF000
	012 Move X0, [X0+688]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+493], W8
	016 Move X8, [X19]
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move W0, [X8+4]
	020 Move X30, [X31+32]
	021 Return X0

Method: System.Void .ctor(System.Int32 levelCount, System.Int32 branchingOrder, Unity.Collections.Allocator allocator = 4)

Disassembly:
	0x03A589E0 LDR X8, [X0]
	0x03A589E4 LDR X9, [X8 + 0x218]
	0x03A589E8 LDR X1, [X8 + 0x220]
	0x03A589EC BLR X9
	0x03A589F0 FCMP S0, 0x0
	0x03A589F4 B.NE 0x3A58A24
	0x03A589F8 LDR X0, [X19 + 0x78]
	0x03A589FC CBZ X0, 0x3A58A30
	0x03A58A00 LDR X8, [X0]
	0x03A58A04 LDR X9, [X8 + 0x218]
	0x03A58A08 LDR X1, [X8 + 0x220]
	0x03A58A0C BLR X9
	0x03A58A10 MOVZ W8, 0x42C80000
	0x03A58A14 FMOV S1, W8
	0x03A58A18 FCMP S0, S1
	0x03A58A1C CSET W0, NE
	0x03A58A20 B 0x3A58A28
	0x03A58A24 MOVZ W0, 0x1
	0x03A58A28 LDP X30, X19, [X31], #0x10
	0x03A58A2C RET
	0x03A58A30 BL 0x1C16F20
	0x03A58A34 MOVZ W0, 0x1
	0x03A58A38 RET
	0x03A58A3C STR D10, [X31 - 0x40]!
	0x03A58A40 STP D9, D8, [X31 + 0x10]
	0x03A58A44 STP X30, X21, [X31 + 0x20]
	0x03A58A48 STP X20, X19, [X31 + 0x30]
	0x03A58A4C ADRP X20, 0x98A000
	0x03A58A50 ADRP X21, 0x6FE000
	0x03A58A54 LDRB W8, [X20 + 0x1F6]
	0x03A58A58 LDR X21, [X21 + 0xA8]
	0x03A58A5C MOV X19, X0
	0x03A58A60 TBNZ X8, 0x0, 0x3A58A78
	0x03A58A64 ADRP X0, 0x6FE000
	0x03A58A68 LDR X0, [X0 + 0xA8]
	0x03A58A6C BL 0x1C16CF4
	0x03A58A70 MOVZ W8, 0x1
	0x03A58A74 STRB W8, [X20 + 0x1F6]
	0x03A58A78 LDR X0, [X21]
	0x03A58A7C BL 0x1C16F10
	0x03A58A80 MOVZ W8, 0x42C80000
	0x03A58A84 MOVZ W9, 0xC3480000
	0x03A58A88 MOVZ W10, 0x43480000
	0x03A58A8C FMOV S10, W8
	0x03A58A90 FMOV S9, W9
	0x03A58A94 FMOV S8, W10
	0x03A58A98 MOV V0.16B, V10.16B
	0x03A58A9C MOV V1.16B, V9.16B
	0x03A58AA0 MOV V2.16B, V8.16B
	0x03A58AA4 MOV W1, W31
	0x03A58AA8 MOV X2, X31
	0x03A58AAC MOV X20, X0
	0x03A58AB0 BL 0x39F30E4
	0x03A58AB4 STR X20, [X19 + 0x38]
	0x03A58AB8 LDR X0, [X21]
	0x03A58ABC BL 0x1C16F10
	0x03A58AC0 FMOV S0, W31
	0x03A58AC4 MOV V1.16B, V9.16B
	0x03A58AC8 MOV V2.16B, V8.16B
	0x03A58ACC MOV W1, W31
	0x03A58AD0 MOV X2, X31
	0x03A58AD4 MOV X20, X0
	0x03A58AD8 BL 0x39F30E4
	0x03A58ADC STR X20, [X19 + 0x40]
	0x03A58AE0 LDR X0, [X21]
	0x03A58AE4 BL 0x1C16F10
	0x03A58AE8 FMOV S0, W31
	0x03A58AEC MOV V1.16B, V9.16B
	0x03A58AF0 MOV V2.16B, V8.16B
	0x03A58AF4 MOV W1, W31
	0x03A58AF8 MOV X2, X31
	0x03A58AFC MOV X20, X0
	0x03A58B00 BL 0x39F30E4
	0x03A58B04 STR X20, [X19 + 0x48]
	0x03A58B08 LDR X0, [X21]
	0x03A58B0C BL 0x1C16F10
	0x03A58B10 FMOV S0, W31
	0x03A58B14 MOV V1.16B, V9.16B
	0x03A58B18 MOV V2.16B, V8.16B
	0x03A58B1C MOV W1, W31
	0x03A58B20 MOV X2, X31
	0x03A58B24 MOV X20, X0
	0x03A58B28 BL 0x39F30E4
	0x03A58B2C STR X20, [X19 + 0x50]
	0x03A58B30 LDR X0, [X21]
	0x03A58B34 BL 0x1C16F10
	0x03A58B38 MOV V0.16B, V10.16B
	0x03A58B3C MOV V1.16B, V9.16B
	0x03A58B40 MOV V2.16B, V8.16B
	0x03A58B44 MOV W1, W31
	0x03A58B48 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x98B000
	011 Move X24, 0x6FF000
	012 Move X23, 0x6FF000
	013 Move W8, [X25+499]
	014 Move X24, [X24+728]
	015 Move X23, [X23+736]
	016 Move W22, W3
	017 Move W21, W2
	018 Move W20, W1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0x6FF000
	025 Move X0, [X0+728]
	026 Call 0x1C17CF4
	027 Move X0, 0x6FF000
	028 Move X0, [X0+736]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X25+499], W8
	032 Move X2, [X24]
	033 Move W8, 16
	034 Add X1, X31, 12
	035 Move W0, W20
	036 Move [X31+12], W8
	037 Call 0x21A1414, X0, X1
	038 Move W8, 6
	039 NotImplemented "Instruction SDIV not yet implemented."
	040 Subtract W10, W20, W8
	041 NotImplemented "Instruction BIC not yet implemented."
	042 Move TEMP, 0
	043 Not TEMP
	044 Move W9, TEMP
	045 Multiply W10, W10, W21
	046 NotImplemented "Instruction LSLV not yet implemented."
	047 Move [X19+8], X0
	048 NotImplemented "Instruction LSLV not yet implemented."
	049 NotImplemented "Instruction ORN not yet implemented."
	050 Move X2, [X23]
	051 NotImplemented "Instruction LSLV not yet implemented."
	052 NotImplemented "Instruction ORN not yet implemented."
	053 NotImplemented "Instruction CSEL not yet implemented."
	054 NotImplemented "Instruction SDIV not yet implemented."
	055 Add W23, W8, W9
	056 Add X1, X31, 12
	057 Move W0, W23
	058 Call BuddyAllocator.AllocateRange, X0, X1
	059 Move [X19+16], X0
	060 Move X2, [X24]
	061 Add X1, X31, 12
	062 Move W0, W23
	063 Call 0x21A1414, X0, X1
	064 Move [X19+24], X0
	065 NotImplemented "Instruction LDRSW not yet implemented."
	066 Move W1, 64
	067 Move W2, W22
	068 Move X3, X31
	069 Call UnsafeUtility.Malloc, X0, X1, X2
	070 Move [X19], X0
	071 NotImplemented "Instruction LDRSW not yet implemented."
	072 Move X2, X31
	073 Call UnsafeUtility.MemClear, X0, X1
	074 Move [X19+32], W22
	075 Move X22, 0x98B000
	076 Move W8, [X22+493]
	077 Move TEMP, X8
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfEqual {86}
	081 Move X0, 0x6FF000
	082 Move X0, [X0+688]
	083 Call 0x1C17CF4
	084 Move W8, 1
	085 Move [X22+493], W8
	086 Move X8, [X19]
	087 Move X0, X19
	088 Move W1, W31
	089 Move [X8], W21
	090 Move [X8+4], W20
	091 Move [X8+8], X31
	092 Call BuddyAllocator.FreeMasks, X0, X1
	093 Move W8, 15
	094 Move [X0], X8
	095 Move X0, X19
	096 Call BuddyAllocator.get_freeMaskCounts, X0
	097 Move X20, [X31+64]
	098 Move X19, [X31+72]
	099 Move X22, [X31+48]
	100 Move X21, [X31+56]
	101 Move X24, [X31+32]
	102 Move X23, [X31+40]
	103 Move X30, [X31+16]
	104 Move X25, [X31+24]
	105 Move W8, 1
	106 Move [X0], W8
	107 Add X31, X31, 80
	108 Return 

Method: System.Boolean TryAllocate(System.Int32 requestedLevel, out UnityEngine.Rendering.Universal.BuddyAllocation allocation)

Disassembly:
	0x03A58B4C MOV X20, X0
	0x03A58B50 BL 0x39F30E4
	0x03A58B54 STR X20, [X19 + 0x58]
	0x03A58B58 LDR X0, [X21]
	0x03A58B5C BL 0x1C16F10
	0x03A58B60 FMOV S0, W31
	0x03A58B64 MOV V1.16B, V9.16B
	0x03A58B68 MOV V2.16B, V8.16B
	0x03A58B6C MOV W1, W31
	0x03A58B70 MOV X2, X31
	0x03A58B74 MOV X20, X0
	0x03A58B78 BL 0x39F30E4
	0x03A58B7C STR X20, [X19 + 0x60]
	0x03A58B80 LDR X0, [X21]
	0x03A58B84 BL 0x1C16F10
	0x03A58B88 FMOV S0, W31
	0x03A58B8C MOV V1.16B, V9.16B
	0x03A58B90 MOV V2.16B, V8.16B
	0x03A58B94 MOV W1, W31
	0x03A58B98 MOV X2, X31
	0x03A58B9C MOV X20, X0
	0x03A58BA0 BL 0x39F30E4
	0x03A58BA4 STR X20, [X19 + 0x68]
	0x03A58BA8 LDR X0, [X21]
	0x03A58BAC BL 0x1C16F10
	0x03A58BB0 FMOV S0, W31
	0x03A58BB4 MOV V1.16B, V9.16B
	0x03A58BB8 MOV V2.16B, V8.16B
	0x03A58BBC MOV W1, W31
	0x03A58BC0 MOV X2, X31
	0x03A58BC4 MOV X20, X0
	0x03A58BC8 BL 0x39F30E4
	0x03A58BCC STR X20, [X19 + 0x70]
	0x03A58BD0 LDR X0, [X21]
	0x03A58BD4 BL 0x1C16F10
	0x03A58BD8 MOV V0.16B, V10.16B
	0x03A58BDC MOV V1.16B, V9.16B
	0x03A58BE0 MOV V2.16B, V8.16B
	0x03A58BE4 MOV W1, W31
	0x03A58BE8 MOV X2, X31
	0x03A58BEC MOV X20, X0
	0x03A58BF0 BL 0x39F30E4
	0x03A58BF4 STR X20, [X19 + 0x78]
	0x03A58BF8 MOV X0, X19
	0x03A58BFC LDP X20, X19, [X31 + 0x30]
	0x03A58C00 LDP X30, X21, [X31 + 0x20]
	0x03A58C04 LDP D9, D8, [X31 + 0x10]
	0x03A58C08 MOV X1, X31
	0x03A58C0C LDR V10, [X31], #0x40
	0x03A58C10 B 0x39F05AC
	0x03A58C14 STR X30, [X31 - 0x10]!
	0x03A58C18 LDR X0, [X0 + 0x38]
	0x03A58C1C CBZ X0, 0x3A58C40
	0x03A58C20 LDR X8, [X0]
	0x03A58C24 LDR X9, [X8 + 0x218]
	0x03A58C28 LDR X1, [X8 + 0x220]
	0x03A58C2C BLR X9
	0x03A58C30 FCMP S0, 0x0
	0x03A58C34 CSET W0, GT
	0x03A58C38 LDR X30, [X31], #0x10
	0x03A58C3C RET
	0x03A58C40 BL 0x1C16F20
	0x03A58C44 MOV W0, W31
	0x03A58C48 RET
	0x03A58C4C STP X30, X21, [X31 - 0x20]!
	0x03A58C50 STP X20, X19, [X31 + 0x10]
	0x03A58C54 ADRP X20, 0x98A000
	0x03A58C58 ADRP X21, 0x6FE000
	0x03A58C5C LDRB W8, [X20 + 0x1F7]
	0x03A58C60 LDR X21, [X21 + 0xA8]
	0x03A58C64 MOV X19, X0
	0x03A58C68 TBNZ X8, 0x0, 0x3A58C80
	0x03A58C6C ADRP X0, 0x6FE000
	0x03A58C70 LDR X0, [X0 + 0xA8]
	0x03A58C74 BL 0x1C16CF4
	0x03A58C78 MOVZ W8, 0x1
	0x03A58C7C STRB W8, [X20 + 0x1F7]
	0x03A58C80 LDR X0, [X21]
	0x03A58C84 BL 0x1C16F10
	0x03A58C88 FMOV S0, W31
	0x03A58C8C FMOV S1, W31
	0x03A58C90 FMOV S2, 1
	0x03A58C94 MOV W1, W31
	0x03A58C98 MOV X2, X31
	0x03A58C9C MOV X20, X0
	0x03A58CA0 BL 0x39F30E4
	0x03A58CA4 STR X20, [X19 + 0x38]
	0x03A58CA8 MOV X0, X19
	0x03A58CAC LDP X20, X19, [X31 + 0x10]
	0x03A58CB0 MOV X1, X31
	0x03A58CB4 LDP X30, X21, [X31], #0x20
	0x03A58CB8 B 0x39F05AC
	0x03A58CBC STR X30, [X31 - 0x20]!
	0x03A58CC0 STP X20, X19, [X31 + 0x10]
	0x03A58CC4 ADRP X20, 0x98A000
	0x03A58CC8 LDRB W8, [X20 + 0x1F8]
	0x03A58CCC MOV X19, X0
	0x03A58CD0 TBNZ X8, 0x0, 0x3A58CF4
	0x03A58CD4 ADRP X0, 0x6FE000
	0x03A58CD8 LDR X0, [X0 + 0x2E8]
	0x03A58CDC BL 0x1C16CF4
	0x03A58CE0 ADRP X0, 0x6FE000
	0x03A58CE4 LDR X0, [X0 + 0x2F0]
	0x03A58CE8 BL 0x1C16CF4
	0x03A58CEC MOVZ W8, 0x1
	0x03A58CF0 STRB W8, [X20 + 0x1F8]
	0x03A58CF4 LDR X0, [X19 + 0x38]
	0x03A58CF8 CBZ X0, 0x3A58DA0
	0x03A58CFC LDR X8, [X0]
	0x03A58D00 LDR X9, [X8 + 0x218]
	0x03A58D04 LDR X1, [X8 + 0x220]
	0x03A58D08 BLR X9
	0x03A58D0C FCMP S0, 0x0
	0x03A58D10 B.NE 0x3A58D78
	0x03A58D14 LDR X0, [X19 + 0x40]
	0x03A58D18 CBZ X0, 0x3A58DA0
	0x03A58D1C LDR X8, [X0]
	0x03A58D20 LDR X9, [X8 + 0x218]
	0x03A58D24 LDR X1, [X8 + 0x220]
	0x03A58D28 BLR X9
	0x03A58D2C FCMP S0, 0x0
	0x03A58D30 B.NE 0x3A58D78
	0x03A58D34 ADRP X8, 0x6FE000
	0x03A58D38 LDR X0, [X19 + 0x48]
	0x03A58D3C LDR X8, [X8 + 0x2F0]
	0x03A58D40 FMOV S0, 1
	0x03A58D44 FMOV S1, 1
	0x03A58D48 FMOV S2, 1
	0x03A58D4C LDR X1, [X8]
	0x03A58D50 FMOV S3, 1
	0x03A58D54 BL 0x2849D08
	0x03A58D58 TBNZ X0, 0x0, 0x3A58D78
	0x03A58D5C ADRP X20, 0x6FE000
	0x03A58D60 LDR X0, [X19 + 0x50]
	0x03A58D64 LDR X20, [X20 + 0x2E8]
	0x03A58D68 FMOV S0, W31
	0x03A58D6C LDR X1, [X20]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X19, X2
	015 Move W21, W1
	016 Move X20, X0
	017 Move [X2], X31
	018 Call BuddyAllocator.get_freeMaskCounts, X0
	019 Move TEMP, X21
	020 And TEMP, TEMP, -2147483648
	021 Compare TEMP, -2147483648
	022 JumpIfEqual {33}
	023 Move X22, X0
	024 Move W25, W21
	025 Move W26, 1
	026 Add W8, W25, W26
	027 Subtract W8, W8, 1
	028 Move W8, [X22]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Subtract X26, X26, 1
	031 Add W8, W25, W26
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W0, W31
	034 Add X8, X26, W21
	035 Subtract X23, X8, 1
	036 Move X0, X20
	037 Move W1, W23
	038 Call BuddyAllocator.FreeMaskIndices, X0, X1
	039 Move W8, [X22]
	040 Move X24, X0
	041 Move W1, W23
	042 Subtract W8, W8, 1
	043 Move [X22], W8
	044 Move W27, [X0]
	045 Move X0, X20
	046 Call BuddyAllocator.FreeMasks, X0, X1
	047 Move X9, [X0]
	048 Move X8, W27
	049 Compare X9, 0
	050 JumpIfEqual {74}
	051 Subtract X10, X31, X9
	052 Move X12, 0xC3300000
	053 And X10, X9, X10
	054 Move D0, X12
	055 Move X12, X10
	056 ShiftRight X12, 32
	057 And X12, X12, 0x7FFFFFFF
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction CSEL not yet implemented."
	060 Move X12, 0x43300000
	061 NotImplemented "Instruction BFM not yet implemented."
	062 Move D1, X12
	063 Move TEMP, 1022
	064 Not TEMP
	065 Move W11, TEMP
	066 Move TEMP, 990
	067 Not TEMP
	068 Move W10, TEMP
	069 Add D0, D1, D0
	070 NotImplemented "Instruction CSEL not yet implemented."
	071 Move X11, D0
	072 NotImplemented "Instruction SBFM not yet implemented."
	073 Add W10, W10, W11
	074 Move W10, 64
	075 Move W11, 1
	076 NotImplemented "Instruction LSLV not yet implemented."
	077 Xor X9, X11, X9
	078 Move [X0], X9
	079 Compare X9, 0
	080 JumpIfEqual {86}
	081 And X8, X23, 0
	082 NotImplemented "Instruction LDRSW not yet implemented."
	083 Add W11, W9, 1
	084 Move [X22], W11
	085 Move [X24], W27
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Add W24, W10, W27
	088 Move [X31+8], X19
	089 Move X27, 0x98B000
	090 Add X28, X22, W21
	091 Move X21, 0x6FF000
	092 Move W8, [X27+493]
	093 Move X21, [X21+688]
	094 Move TEMP, X8
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfEqual {102}
	098 Move X0, X21
	099 Call 0x1C17CF4
	100 Move W8, 1
	101 Move [X27+493], W8
	102 Move X8, [X20]
	103 Add X23, X25, X26
	104 Move X0, X20
	105 Move W1, W23
	106 Move W8, [X8]
	107 NotImplemented "Instruction LSLV not yet implemented."
	108 NotImplemented "Instruction SBFM not yet implemented."
	109 Call BuddyAllocator.FreeMasks, X0, X1
	110 Move X19, [X0]
	111 Move X22, X0
	112 Compare X19, 0
	113 JumpIfNotEqual {121}
	114 Move X0, X20
	115 Move W1, W23
	116 Call BuddyAllocator.FreeMaskIndices, X0, X1
	117 NotImplemented "Instruction LDRSW not yet implemented."
	118 Add W9, W8, 1
	119 Move [X28], W9
	120 Move [X0], W29
	121 Move W8, [X27+493]
	122 Move TEMP, X8
	123 And TEMP, TEMP, 1
	124 Compare TEMP, 1
	125 JumpIfEqual {130}
	126 Move X0, X21
	127 Call 0x1C17CF4
	128 Move W8, 1
	129 Move [X27+493], W8
	130 Move X8, [X20]
	131 And W9, W24, 63
	132 Add X26, X26, 1
	133 NotImplemented "Instruction SBFM not yet implemented."
	134 Move W10, [X8]
	135 Move W8, 1
	136 NotImplemented "Instruction CMP not yet implemented."
	137 And X10, X10, 31
	138 NotImplemented "Instruction LSLV not yet implemented."
	139 NotImplemented "Instruction LSLV not yet implemented."
	140 Subtract X10, X10, 2
	141 NotImplemented "Instruction LSLV not yet implemented."
	142 Or X9, X9, X19
	143 Move [X22], X9
	144 Move X19, [X31+8]
	145 Move W23, W25
	146 Move W0, 1
	147 Move [X19], W23
	148 Move [X19+4], W24
	149 Move X20, [X31+96]
	150 Move X19, [X31+104]
	151 Move X22, [X31+80]
	152 Move X21, [X31+88]
	153 Move X24, [X31+64]
	154 Move X23, [X31+72]
	155 Move X26, [X31+48]
	156 Move X25, [X31+56]
	157 Move X28, [X31+32]
	158 Move X27, [X31+40]
	159 Move X29, [X31+16]
	160 Move X30, [X31+24]
	161 Add X31, X31, 112
	162 Return X0

Method: System.Void Free(UnityEngine.Rendering.Universal.BuddyAllocation allocation)

Disassembly:
	0x03A58D7C MOVZ W0, 0x1
	0x03A58D80 LDR X30, [X31], #0x20
	0x03A58D84 RET
	0x03A58D88 LDR X0, [X19 + 0x58]
	0x03A58D8C LDR X1, [X20]
	0x03A58D90 LDP X20, X19, [X31 + 0x10]
	0x03A58D94 FMOV S0, W31
	0x03A58D98 LDR X30, [X31], #0x20
	0x03A58D9C B 0x284C72C
	0x03A58DA0 BL 0x1C16F20
	0x03A58DA4 MOVZ W0, 0x1
	0x03A58DA8 RET
	0x03A58DAC STP D9, D8, [X31 - 0x40]!
	0x03A58DB0 STP X30, X23, [X31 + 0x10]
	0x03A58DB4 STP X22, X21, [X31 + 0x20]
	0x03A58DB8 STP X20, X19, [X31 + 0x30]
	0x03A58DBC ADRP X20, 0x98A000
	0x03A58DC0 ADRP X23, 0x6FE000
	0x03A58DC4 ADRP X21, 0x6FE000
	0x03A58DC8 ADRP X22, 0x6F9000
	0x03A58DCC LDRB W8, [X20 + 0x1F9]
	0x03A58DD0 LDR X23, [X23 + 0x2F8]
	0x03A58DD4 LDR X21, [X21 + 0xA8]
	0x03A58DD8 LDR X22, [X22 + 0x5B0]
	0x03A58DDC MOV X19, X0
	0x03A58DE0 TBNZ X8, 0x0, 0x3A58E10
	0x03A58DE4 ADRP X0, 0x6FE000
	0x03A58DE8 LDR X0, [X0 + 0xA8]
	0x03A58DEC BL 0x1C16CF4
	0x03A58DF0 ADRP X0, 0x6F9000
	0x03A58DF4 LDR X0, [X0 + 0x5B0]
	0x03A58DF8 BL 0x1C16CF4
	0x03A58DFC ADRP X0, 0x6FE000
	0x03A58E00 LDR X0, [X0 + 0x2F8]
	0x03A58E04 BL 0x1C16CF4
	0x03A58E08 MOVZ W8, 0x1
	0x03A58E0C STRB W8, [X20 + 0x1F9]
	0x03A58E10 LDR X0, [X23]
	0x03A58E14 BL 0x1C16F10
	0x03A58E18 FMOV S0, W31
	0x03A58E1C MOV W1, W31
	0x03A58E20 MOV X2, X31
	0x03A58E24 MOV X20, X0
	0x03A58E28 BL 0x39F2E34
	0x03A58E2C STR X20, [X19 + 0x38]
	0x03A58E30 LDR X0, [X21]
	0x03A58E34 BL 0x1C16F10
	0x03A58E38 MOVZ W8, 0xC2C80000
	0x03A58E3C MOVZ W9, 0x42C80000
	0x03A58E40 FMOV S8, W8
	0x03A58E44 FMOV S9, W9
	0x03A58E48 FMOV S0, W31
	0x03A58E4C MOV V1.16B, V8.16B
	0x03A58E50 MOV V2.16B, V9.16B
	0x03A58E54 MOV W1, W31
	0x03A58E58 MOV X2, X31
	0x03A58E5C MOV X20, X0
	0x03A58E60 BL 0x39F30E4
	0x03A58E64 STR X20, [X19 + 0x40]
	0x03A58E68 LDR X0, [X22]
	0x03A58E6C BL 0x1C16F10
	0x03A58E70 FMOV S0, 1
	0x03A58E74 FMOV S1, 1
	0x03A58E78 FMOV S2, 1
	0x03A58E7C FMOV S3, 1
	0x03A58E80 MOVZ W1, 0x1
	0x03A58E84 MOVZ W3, 0x1
	0x03A58E88 MOV W2, W31
	0x03A58E8C MOV W4, W31
	0x03A58E90 MOV X5, X31
	0x03A58E94 MOV X20, X0
	0x03A58E98 BL 0x39F33BC
	0x03A58E9C STR X20, [X19 + 0x48]
	0x03A58EA0 LDR X0, [X21]
	0x03A58EA4 BL 0x1C16F10
	0x03A58EA8 MOVZ W8, 0xC3340000
	0x03A58EAC MOVZ W9, 0x43340000
	0x03A58EB0 FMOV S0, W31
	0x03A58EB4 FMOV S1, W8
	0x03A58EB8 FMOV S2, W9
	0x03A58EBC MOV W1, W31
	0x03A58EC0 MOV X2, X31
	0x03A58EC4 MOV X20, X0
	0x03A58EC8 BL 0x39F30E4
	0x03A58ECC STR X20, [X19 + 0x50]
	0x03A58ED0 LDR X0, [X21]
	0x03A58ED4 BL 0x1C16F10
	0x03A58ED8 FMOV S0, W31

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move TEMP, X1
	014 And TEMP, TEMP, -2147483648
	015 Compare TEMP, -2147483648
	016 JumpIfEqual {96}
	017 Move X20, X0
	018 Move X21, X1
	019 ShiftRight X21, 32
	020 And X21, X21, 0x7FFFFFFF
	021 Move X19, W1
	022 Move W26, 1
	023 Move X27, 0x98B000
	024 Move X0, X20
	025 Move W1, W19
	026 NotImplemented "Instruction SBFM not yet implemented."
	027 Call BuddyAllocator.FreeMasks, X0, X1
	028 Move X29, [X0]
	029 Move X25, X0
	030 Move X0, X20
	031 Move W1, W19
	032 Call BuddyAllocator.FreeMaskIndices, X0, X1
	033 Move X22, X0
	034 Move X0, X20
	035 Move X24, X1
	036 Call BuddyAllocator.get_freeMaskCounts, X0
	037 Move W8, [X27+493]
	038 Move X23, X0
	039 Move TEMP, X8
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {47}
	043 Move X0, 0x6FF000
	044 Move X0, [X0+688]
	045 Call 0x1C17CF4
	046 Move [X27+493], W26
	047 Move W8, W21
	048 NotImplemented "Instruction SBFM not yet implemented."
	049 NotImplemented "Instruction LSLV not yet implemented."
	050 Or X10, X29, X8
	051 Compare X19, 0
	052 JumpIfEqual {89}
	053 Move X8, [X20]
	054 Move TEMP, 0
	055 Not TEMP
	056 Move W14, TEMP
	057 And W12, W21, 63
	058 Move W11, [X8]
	059 And X13, X11, 31
	060 NotImplemented "Instruction LSLV not yet implemented."
	061 NotImplemented "Instruction LSLV not yet implemented."
	062 Move TEMP, 0
	063 Not TEMP
	064 Move X14, TEMP
	065 NotImplemented "Instruction LSLV not yet implemented."
	066 NotImplemented "Instruction ORN not yet implemented."
	067 And W11, W11, W12
	068 NotImplemented "Instruction LSLV not yet implemented."
	069 NotImplemented "Instruction BICS not yet implemented."
	070 NotImplemented "Instruction BICS not yet implemented."
	071 Move [X25], X10
	072 Compare X29, 0
	073 JumpIfEqual {86}
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X9, X31
	076 Move X10, W24
	077 Move W11, [X22]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Add X9, X9, 1
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move W10, [X23]
	082 Subtract W10, W10, 1
	083 Move [X23], W10
	084 Move W10, [X22]
	085 Move [X22], W10
	086 Move W8, [X8]
	087 Subtract X19, X19, 1
	088 NotImplemented "Instruction ASRV not yet implemented."
	089 Move [X25], X10
	090 Compare X29, 0
	091 JumpIfNotEqual {96}
	092 NotImplemented "Instruction LDRSW not yet implemented."
	093 Add W9, W8, 1
	094 Move [X23], W9
	095 Move [X22], W28
	096 Move X20, [X31+80]
	097 Move X19, [X31+88]
	098 Move X22, [X31+64]
	099 Move X21, [X31+72]
	100 Move X24, [X31+48]
	101 Move X23, [X31+56]
	102 Move X26, [X31+32]
	103 Move X25, [X31+40]
	104 Move X28, [X31+16]
	105 Move X27, [X31+24]
	106 Move X29, [X31+96]
	107 Move X30, [X31+104]
	108 Return 

Method: System.Void Dispose()

Disassembly:
	0x03A58EDC MOV V1.16B, V8.16B
	0x03A58EE0 MOV V2.16B, V9.16B
	0x03A58EE4 MOV W1, W31
	0x03A58EE8 MOV X2, X31
	0x03A58EEC MOV X20, X0
	0x03A58EF0 BL 0x39F30E4
	0x03A58EF4 STR X20, [X19 + 0x58]
	0x03A58EF8 MOV X0, X19
	0x03A58EFC LDP X20, X19, [X31 + 0x30]
	0x03A58F00 LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0]
	005 Move W1, [X19+32]
	006 Move X2, X31
	007 Call UnsafeUtility.Free, X0, X1
	008 Move [X19], X31
	009 Move [X19+32], W31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 

Method: Unity.Collections.NativeArray`1<T> GetNativeArray(System.Int32 offset, System.Int32 length)

Disassembly:
	0x021A1608 ADRP X0, 0x1F7A000
	0x021A160C LDR X0, [X0 + 0x8A0]
	0x021A1610 BL 0x1C16CF4
	0x021A1614 LDR X8, [X19 + 0x38]
	0x021A1618 CBNZ X8, 0x21A1624
	0x021A161C MOV X0, X19
	0x021A1620 BL 0x1C5C6E0
	0x021A1624 LDR X24, [X20 + 0x18]
	0x021A1628 CBNZ X24, 0x21A164C
	0x021A162C ADRP X8, 0x1F7A000
	0x021A1630 LDR X8, [X8 + 0x8A0]
	0x021A1634 LDR X0, [X8]
	0x021A1638 BL 0x1C16F10
	0x021A163C MOV X1, X31
	0x021A1640 MOV X24, X0
	0x021A1644 BL 0x3DA125C
	0x021A1648 STR X24, [X20 + 0x18]
	0x021A164C CBZ X24, 0x21A168C
	0x021A1650 LDR X8, [X19 + 0x38]
	0x021A1654 MOV X0, X24
	0x021A1658 MOV X1, X23
	0x021A165C MOV W2, W22
	0x021A1660 LDR X4, [X8 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+56]
	007 Move X20, X3
	008 Move W19, W2
	009 Move W22, W1
	010 Move X21, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {15}
	013 Move X0, X20
	014 Call 0x1C5D6E0
	015 Move X0, [X21]
	016 Move W1, W22
	017 Move X2, X31
	018 Call BuddyAllocator.PtrAdd, X0, X1
	019 Move X8, [X20+56]
	020 Move W2, [X21+32]
	021 Move W1, W19
	022 Move X20, [X31+32]
	023 Move X19, [X31+40]
	024 Move X3, [X8]
	025 Move X22, [X31+16]
	026 Move X21, [X31+24]
	027 Move X30, [X31+48]
	028 Call NativeArrayUnsafeUtility.ConvertExistingDataToNativeArray, X0, X1, X2
	029 Return X0

Method: System.Int32 LevelOffset(System.Int32 level, System.Int32 branchingOrder)

Disassembly:
	0x03A58F04 LDP X30, X23, [X31 + 0x10]
	0x03A58F08 MOV X1, X31
	0x03A58F0C LDP D9, D8, [X31], #0x40
	0x03A58F10 B 0x39F05AC
	0x03A58F14 MOVZ W0, 0x1
	0x03A58F18 RET
	0x03A58F1C MOVZ W0, 0x1
	0x03A58F20 RET
	0x03A58F24 STR D8, [X31 - 0x50]!

ISIL:
	001 Multiply W8, W1, W0
	002 Move TEMP, 0
	003 Not TEMP
	004 Move W9, TEMP
	005 NotImplemented "Instruction LSLV not yet implemented."
	006 NotImplemented "Instruction LSLV not yet implemented."
	007 NotImplemented "Instruction ORN not yet implemented."
	008 NotImplemented "Instruction LSLV not yet implemented."
	009 NotImplemented "Instruction ORN not yet implemented."
	010 NotImplemented "Instruction SDIV not yet implemented."
	011 Return X0

Method: System.Int32 LevelLength(System.Int32 level, System.Int32 branchingOrder)

Disassembly:
	0x03A58F28 STR X29, [X31 + 0x8]
	0x03A58F2C STP X30, X25, [X31 + 0x10]
	0x03A58F30 STP X24, X23, [X31 + 0x20]
	0x03A58F34 STP X22, X21, [X31 + 0x30]
	0x03A58F38 STP X20, X19, [X31 + 0x40]

ISIL:
	001 Add W8, W0, 1
	002 Multiply W8, W8, W1
	003 Move W9, 1
	004 NotImplemented "Instruction LSLV not yet implemented."
	005 Return X0

Method: System.Int32 LevelOffset64(System.Int32 level, System.Int32 branchingOrder)

Disassembly:
	0x03A58814 LDR W9, [X8 + 0x18]
	0x03A58818 CBZ W9, 0x3A588DC
	0x03A5881C LDP V1, V0, [X31 + 0x1E0]
	0x03A58820 LDP V3, V2, [X31 + 0x1C0]
	0x03A58824 STP V1, V0, [X8 + 0x40]
	0x03A58828 STP V3, V2, [X8 + 0x20]
	0x03A5882C LDR X8, [X20 + 0x10]
	0x03A58830 LDR V0, [X31 + 0x4C]
	0x03A58834 LDR V1, [X31 + 0x4D]
	0x03A58838 LDR V2, [X31 + 0x4E]
	0x03A5883C LDR V3, [X31 + 0x4F]
	0x03A58840 STP V0, V1, [X31 + 0x180]
	0x03A58844 STP V2, V3, [X31 + 0x1A0]
	0x03A58848 CBZ X8, 0x3A588D8
	0x03A5884C LDP V0, V1, [X31 + 0x180]

ISIL:
	001 Move W8, 6
	002 NotImplemented "Instruction SDIV not yet implemented."
	003 Subtract W9, W0, W8
	004 NotImplemented "Instruction BIC not yet implemented."
	005 Move TEMP, 0
	006 Not TEMP
	007 Move W10, TEMP
	008 Multiply W9, W9, W1
	009 NotImplemented "Instruction LSLV not yet implemented."
	010 NotImplemented "Instruction LSLV not yet implemented."
	011 NotImplemented "Instruction ORN not yet implemented."
	012 NotImplemented "Instruction LSLV not yet implemented."
	013 NotImplemented "Instruction ORN not yet implemented."
	014 NotImplemented "Instruction CSEL not yet implemented."
	015 NotImplemented "Instruction SDIV not yet implemented."
	016 Add W0, W8, W9
	017 Return X0

Method: System.Int32 LevelLength64(System.Int32 level, System.Int32 branchingOrder)

Disassembly:
	0x03A58850 LDP V2, V3, [X31 + 0x1A0]
	0x03A58854 STP V0, V1, [X31 + 0x140]
	0x03A58858 STP V2, V3, [X31 + 0x160]
	0x03A5885C LDR W9, [X8 + 0x18]
	0x03A58860 CMP W9, 0x1
	0x03A58864 B.LS 0x3A588DC
	0x03A58868 LDP V1, V0, [X31 + 0x160]
	0x03A5886C LDP V3, V2, [X31 + 0x140]
	0x03A58870 STP V1, V0, [X8 + 0x80]

ISIL:
	001 Move W8, 6
	002 NotImplemented "Instruction SDIV not yet implemented."
	003 Subtract W8, W0, W8
	004 Add W8, W8, 1
	005 NotImplemented "Instruction BIC not yet implemented."
	006 Multiply W8, W8, W1
	007 Move W9, 1
	008 NotImplemented "Instruction LSLV not yet implemented."
	009 Return X0

Method: System.ValueTuple`2<System.Int32, System.Int32> AllocateRange(System.Int32 length, ref System.Int32 dataSize)

Disassembly:
	0x021A1414 ADRP X0, 0x1F52000
	0x021A1418 LDR X0, [X0 + 0x7D0]
	0x021A141C BL 0x1C16D08
	0x021A1420 BL 0x1C16F10
	0x021A1424 MOV X20, X0
	0x021A1428 ADRP X0, 0x1F7A000
	0x021A142C LDR X0, [X0 + 0x890]
	0x021A1430 BL 0x1C16D08
	0x021A1434 MOV X1, X0
	0x021A1438 MOV X0, X20
	0x021A143C MOV X2, X31
	0x021A1440 BL 0x33B2C70
	0x021A1444 MOV X0, X20
	0x021A1448 MOV X1, X19
	0x021A144C BL 0x1C16DEC
	0x021A1450 BL 0x1C16F20
	0x021A1454 STP X30, X21, [X31 - 0x20]!
	0x021A1458 STP X20, X19, [X31 + 0x10]
	0x021A145C LDR X8, [X1 + 0x38]
	0x021A1460 MOV X19, X1
	0x021A1464 MOV X20, X0
	0x021A1468 CBNZ X8, 0x21A1480
	0x021A146C ADRP X0, 0x1F7A000
	0x021A1470 LDR X0, [X0 + 0x898]
	0x021A1474 BL 0x1C16CF4
	0x021A1478 LDR X8, [X19 + 0x38]
	0x021A147C CBZ X8, 0x21A151C
	0x021A1480 CBZ X20, 0x21A1528
	0x021A1484 ADRP X8, 0x1F7A000
	0x021A1488 LDR X8, [X8 + 0x898]
	0x021A148C LDR X9, [X20]
	0x021A1490 LDR X8, [X8]
	0x021A1494 LDRB W11, [X9 + 0x130]
	0x021A1498 LDRB W10, [X8 + 0x130]
	0x021A149C CMP W11, W10
	0x021A14A0 B.CC 0x21A1528
	0x021A14A4 LDR X9, [X9 + 0xC8]
	0x021A14A8 ADD X9, X9, X10, 0x3, LSL
	0x021A14AC LDUR X9, [X9 - 0x8]
	0x021A14B0 CMP X9, X8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X2+56]
	007 Move X19, X1
	008 Move W20, W0
	009 Compare X8, 0
	010 JumpIfNotEqual {21}
	011 Move X0, 0x1F5A000
	012 Move X0, [X0+3400]
	013 Move X21, X2
	014 Call 0x1C17CF4
	015 Move X8, [X21+56]
	016 Compare X8, 0
	017 JumpIfNotEqual {21}
	018 Move X0, X21
	019 Call 0x1C5D6E0
	020 Move X8, [X21+56]
	021 Move X0, [X8]
	022 Move W21, [X19]
	023 Call UnsafeUtility.AlignOf
	024 Move W1, W0
	025 Move W0, W21
	026 Move X2, X31
	027 Call BuddyAllocator.AlignForward, X0, X1
	028 Move [X19], W0
	029 Move X8, 0x1F5A000
	030 Move X8, [X8+3400]
	031 Move W1, W0
	032 Add X0, X31, 8
	033 Move W2, W20
	034 Move X3, [X8]
	035 Move [X31+8], X31
	036 Call ValueTuple`2<Int32, Int32>..ctor, X0, X1, X2
	037 Move W8, [X19]
	038 Move X30, [X31+16]
	039 Move X21, [X31+24]
	040 Add W8, W8, W20
	041 Move [X19], W8
	042 Move X0, [X31+8]
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Add X31, X31, 48
	046 Return X0

Method: System.Int32 AlignForward(System.Int32 offset, System.Int32 alignment)

Disassembly:
	0x03A58F4C LDR X22, [X22 + 0x790]
	0x03A58F50 MOV X19, X0
	0x03A58F54 TBNZ X8, 0x0, 0x3A58F84
	0x03A58F58 ADRP X0, 0x6A2000
	0x03A58F5C LDR X0, [X0 + 0x790]
	0x03A58F60 BL 0x1C16CF4
	0x03A58F64 ADRP X0, 0x6FE000

ISIL:
	001 NotImplemented "Instruction SDIV not yet implemented."
	002 NotImplemented "Instruction MSUB not yet implemented."
	003 Subtract W9, W1, W8
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 Add W0, W8, W0
	007 Return X0

Method: System.Void* PtrAdd(System.Void* ptr, System.Int32 bytes)

Disassembly:
	0x03A58F68 LDR X0, [X0 + 0x300]
	0x03A58F6C BL 0x1C16CF4
	0x03A58F70 ADRP X0, 0x6FA000
	0x03A58F74 LDR X0, [X0 + 0xE78]
	0x03A58F78 BL 0x1C16CF4
	0x03A58F7C MOVZ W8, 0x1
	0x03A58F80 STRB W8, [X20 + 0x1FA]
	0x03A58F84 LDR X0, [X22]
	0x03A58F88 MOVZ W1, 0x2
	0x03A58F8C STR X31, [X31 + 0x208]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, W1
	004 Move X1, X31
	005 Call IntPtr.op_Explicit, X0
	006 Move W1, W19
	007 Move X2, X31
	008 Call IntPtr.op_Addition, X0, X1
	009 Move X1, X31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Call IntPtr.op_Explicit, X0
	013 Return X0

Method: System.Int32 Pow2(System.Int32 n)

Disassembly:
	0x03A58D70 BL 0x284C72C
	0x03A58D74 TBZ X0, 0x0, 0x3A58D88
	0x03A58D78 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W8, 1
	002 NotImplemented "Instruction LSLV not yet implemented."
	003 Return X0

Method: System.Int32 Pow2N(System.Int32 x, System.Int32 n)

Disassembly:
	0x03A58F3C SUB X31, X31, 0x210
	0x03A58F40 ADRP X20, 0x98A000
	0x03A58F44 ADRP X22, 0x6A2000
	0x03A58F48 LDRB W8, [X20 + 0x1FA]

ISIL:
	001 Multiply W8, W1, W0
	002 Move W9, 1
	003 NotImplemented "Instruction LSLV not yet implemented."
	004 Return X0

