Type: UnityEngine.Rendering.Universal.ScreenSpaceShadows

Method: System.Void Create()

Disassembly:
	0x03A6F54C LDR X8, [X21]
	0x03A6F550 LDR X9, [X19]
	0x03A6F554 LDR X8, [X8 + 0xB8]
	0x03A6F558 STR X9, [X8]
	0x03A6F55C LDR X8, [X21]
	0x03A6F560 LDR X0, [X20]
	0x03A6F564 LDR X8, [X8 + 0xB8]
	0x03A6F568 LDR X19, [X8]
	0x03A6F56C BL 0x1C16F10
	0x03A6F570 MOV X1, X19
	0x03A6F574 MOV X2, X31
	0x03A6F578 MOV X20, X0
	0x03A6F57C BL 0x39B19AC
	0x03A6F580 LDR X8, [X21]
	0x03A6F584 MOVZ W0, 0x1
	0x03A6F588 MOV X1, X31
	0x03A6F58C LDR X8, [X8 + 0xB8]
	0x03A6F590 STR X20, [X8 + 0x8]
	0x03A6F594 ADD X8, X31, 0x28
	0x03A6F598 BL 0x3C4B204
	0x03A6F59C LDUR V0, [X31 + 0x28]
	0x03A6F5A0 LDUR V1, [X31 + 0x38]
	0x03A6F5A4 LDR X8, [X31 + 0x48]
	0x03A6F5A8 LDR X0, [X22]
	0x03A6F5AC STP V0, V1, [X31 + 0x50]
	0x03A6F5B0 STR X8, [X31 + 0x70]
	0x03A6F5B4 LDR W8, [X0 + 0xE0]
	0x03A6F5B8 CBNZ W8, 0x3A6F5C0
	0x03A6F5BC BL 0x1C16DFC
	0x03A6F5C0 LDP V0, V1, [X31 + 0x50]
	0x03A6F5C4 LDR X8, [X31 + 0x70]
	0x03A6F5C8 ADD X0, X31, 0x0
	0x03A6F5CC MOV X1, X31
	0x03A6F5D0 STP V0, V1, [X31]
	0x03A6F5D4 STR X8, [X31 + 0x20]
	0x03A6F5D8 BL 0x39D4600
	0x03A6F5DC LDR X8, [X21]
	0x03A6F5E0 LDP X20, X19, [X31 + 0xA0]
	0x03A6F5E4 LDP X22, X21, [X31 + 0x90]
	0x03A6F5E8 LDP X30, X23, [X31 + 0x80]
	0x03A6F5EC LDR X8, [X8 + 0xB8]
	0x03A6F5F0 STR X0, [X8 + 0x10]
	0x03A6F5F4 ADD X31, X31, 0xB0
	0x03A6F5F8 RET
	0x03A6F5FC CMP W1, 0x2
	0x03A6F600 B.LT 0x3A6F610

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x974000
	005 Move W8, [X20+653]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x6E8000
	012 Move X0, [X0+3152]
	013 Call 0x1C17CF4
	014 Move X0, 0x6E8000
	015 Move X0, [X0+3160]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+653], W8
	019 Move X8, [X19+56]
	020 Compare X8, 0
	021 JumpIfNotEqual {29}
	022 Move X8, 0x6E8000
	023 Move X8, [X8+3152]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X20, X0
	027 Call ScreenSpaceShadowsPass..ctor, X0
	028 Move [X19+56], X20
	029 Move X8, [X19+64]
	030 Compare X8, 0
	031 JumpIfNotEqual {39}
	032 Move X8, 0x6E8000
	033 Move X8, [X8+3160]
	034 Move X0, [X8]
	035 Call 0x1C17F10
	036 Move X20, X0
	037 Call ScreenSpaceShadowsPostPass..ctor, X0
	038 Move [X19+64], X20
	039 Move X0, X19
	040 Call ScreenSpaceShadows.LoadMaterial, X0
	041 Move X8, [X19+56]
	042 Compare X8, 0
	043 JumpIfEqual {55}
	044 Move W9, 220
	045 Move [X8+16], W9
	046 Move X8, [X19+64]
	047 Compare X8, 0
	048 JumpIfEqual {55}
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move W9, 450
	052 Move [X8+16], W9
	053 Move X30, [X31+32]
	054 Return 
	055 Call 0x1C17F20

Method: System.Void AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer renderer, ref UnityEngine.Rendering.Universal.RenderingData renderingData)

Disassembly:
	0x03A6F830 LDR W8, [X0 + 0x18]
	0x03A6F834 ADD W9, W8, 0x7
	0x03A6F838 ADD W8, W8, 0xE
	0x03A6F83C CMP W9, 0x0
	0x03A6F840 CSEL W8, W8, W9, LT
	0x03A6F844 SBFM W8, W8, 0x3, 0x1F
	0x03A6F848 CMP W8, 0x4
	0x03A6F84C B.HI 0x3A6F860
	0x03A6F850 ADRP X9, 0xFFFFFFFFFD128000
	0x03A6F854 ADD X9, X9, 0xB1C
	0x03A6F858 LDR W8, [X9, W8, SXTW]
	0x03A6F85C B 0x3A6F864
	0x03A6F860 MOVZ W8, 0x3
	0x03A6F864 LDR W9, [X19]
	0x03A6F868 CMP W9, W8
	0x03A6F86C CSEL W8, W9, W8, GT
	0x03A6F870 STR W8, [X19]
	0x03A6F874 AND W0, W24, 0x1
	0x03A6F878 LDP X20, X19, [X31 + 0x90]
	0x03A6F87C LDP X22, X21, [X31 + 0x80]
	0x03A6F880 LDP X24, X23, [X31 + 0x70]
	0x03A6F884 LDP X26, X25, [X31 + 0x60]
	0x03A6F888 LDP X28, X27, [X31 + 0x50]
	0x03A6F88C LDR X30, [X31 + 0x40]
	0x03A6F890 ADD X31, X31, 0xA0
	0x03A6F894 RET
	0x03A6F898 BL 0x1C16F20
	0x03A6F89C BL 0x1C16F20
	0x03A6F8A0 B 0x3A6F8A8
	0x03A6F8A4 B 0x3A6F8A8
	0x03A6F8A8 MOV X22, X0
	0x03A6F8AC CMP W1, 0x1
	0x03A6F8B0 B.NE 0x3A6F8DC
	0x03A6F8B4 MOV X0, X22
	0x03A6F8B8 BL 0x3EB1AD0
	0x03A6F8BC LDR X23, [X0]
	0x03A6F8C0 BL 0x3EB1AE0
	0x03A6F8C4 LDR X1, [X28]
	0x03A6F8C8 ADD X0, X31, 0x20
	0x03A6F8CC BL 0x2BC434C
	0x03A6F8D0 CBZ X23, 0x3A6F7A8
	0x03A6F8D4 MOV X0, X23
	0x03A6F8D8 BL 0x1C16F18
	0x03A6F8DC MOV X23, X31
	0x03A6F8E0 B 0x3A6F8E8
	0x03A6F8E4 MOV X22, X0
	0x03A6F8E8 LDR X1, [X28]
	0x03A6F8EC ADD X0, X31, 0x20
	0x03A6F8F0 BL 0x2BC434C
	0x03A6F8F4 CBNZ X23, 0x3A6F900
	0x03A6F8F8 MOV X0, X22
	0x03A6F8FC BL 0x1D2C690
	0x03A6F900 MOV X0, X23
	0x03A6F904 BL 0x1C16F18
	0x03A6F908 BL 0x1990590
	0x03A6F90C CMP W0, W1
	0x03A6F910 CSEL W0, W0, W1, GT
	0x03A6F914 RET
	0x03A6F918 ADD W8, W0, 0x7
	0x03A6F91C ADD W9, W0, 0xE
	0x03A6F920 CMP W8, 0x0
	0x03A6F924 CSEL W8, W9, W8, LT
	0x03A6F928 SBFM W8, W8, 0x3, 0x1F
	0x03A6F92C CMP W8, 0x4
	0x03A6F930 B.HI 0x3A6F944
	0x03A6F934 ADRP X9, 0xFFFFFFFFFD128000
	0x03A6F938 ADD X9, X9, 0xB1C
	0x03A6F93C LDR W0, [X9, W8, SXTW]
	0x03A6F940 RET
	0x03A6F944 MOVZ W0, 0x3
	0x03A6F948 RET
	0x03A6F94C SUB X31, X31, 0xA0
	0x03A6F950 STP X29, X30, [X31 + 0x40]
	0x03A6F954 STP X28, X27, [X31 + 0x50]
	0x03A6F958 STP X26, X25, [X31 + 0x60]
	0x03A6F95C STP X24, X23, [X31 + 0x70]
	0x03A6F960 STP X22, X21, [X31 + 0x80]
	0x03A6F964 STP X20, X19, [X31 + 0x90]
	0x03A6F968 ADRP X23, 0x973000
	0x03A6F96C LDRB W8, [X23 + 0x29C]
	0x03A6F970 MOV X19, X4
	0x03A6F974 MOV X20, X3
	0x03A6F978 MOV W21, W2
	0x03A6F97C MOV X24, X1
	0x03A6F980 MOV X22, X0
	0x03A6F984 TBNZ X8, 0x0, 0x3A6F9D8
	0x03A6F988 ADRP X0, 0x68A000
	0x03A6F98C LDR X0, [X0 + 0x690]
	0x03A6F990 BL 0x1C16CF4
	0x03A6F994 ADRP X0, 0x68A000
	0x03A6F998 LDR X0, [X0 + 0x698]
	0x03A6F99C BL 0x1C16CF4
	0x03A6F9A0 ADRP X0, 0x68A000
	0x03A6F9A4 LDR X0, [X0 + 0x6A0]
	0x03A6F9A8 BL 0x1C16CF4
	0x03A6F9AC ADRP X0, 0x68A000
	0x03A6F9B0 LDR X0, [X0 + 0x6B0]
	0x03A6F9B4 BL 0x1C16CF4
	0x03A6F9B8 ADRP X0, 0x684000
	0x03A6F9BC LDR X0, [X0 + 0x598]
	0x03A6F9C0 BL 0x1C16CF4
	0x03A6F9C4 ADRP X0, 0x6E5000
	0x03A6F9C8 LDR X0, [X0 + 0xC50]
	0x03A6F9CC BL 0x1C16CF4
	0x03A6F9D0 MOVZ W8, 0x1
	0x03A6F9D4 STRB W8, [X23 + 0x29C]
	0x03A6F9D8 MOVZ W8, 0x1
	0x03A6F9DC STP X31, X31, [X31 + 0x20]
	0x03A6F9E0 STR X31, [X31 + 0x30]
	0x03A6F9E4 STR X31, [X31 + 0x18]
	0x03A6F9E8 STR W8, [X20]
	0x03A6F9EC STR W31, [X19]
	0x03A6F9F0 CBZ X22, 0x3A6FBCC
	0x03A6F9F4 MOV X0, X22
	0x03A6F9F8 MOV X1, X31
	0x03A6F9FC BL 0x3A82610
	0x03A6FA00 CBZ X24, 0x3A6FBCC
	0x03A6FA04 ADRP X8, 0x68A000
	0x03A6FA08 LDR X8, [X8 + 0x6B0]
	0x03A6FA0C ADRP X29, 0x68A000
	0x03A6FA10 LDR X29, [X29 + 0x698]
	0x03A6FA14 ADRP X26, 0x6E5000
	0x03A6FA18 LDR X1, [X8]
	0x03A6FA1C ADRP X27, 0x684000
	0x03A6FA20 ADRP X28, 0x68A000
	0x03A6FA24 LDR X26, [X26 + 0xC50]
	0x03A6FA28 LDR X27, [X27 + 0x598]
	0x03A6FA2C LDR X28, [X28 + 0x690]
	0x03A6FA30 MOV W23, W0
	0x03A6FA34 ADD X8, X31, 0x0
	0x03A6FA38 MOV X0, X24
	0x03A6FA3C BL 0x301CB58
	0x03A6FA40 LDR V0, [X31]
	0x03A6FA44 LDR X8, [X31 + 0x10]
	0x03A6FA48 MOV W25, W31
	0x03A6FA4C STR V0, [X31 + 0x2]
	0x03A6FA50 STR X8, [X31 + 0x30]
	0x03A6FA54 LDR X1, [X29]
	0x03A6FA58 ADD X0, X31, 0x20
	0x03A6FA5C BL 0x2BC4350
	0x03A6FA60 TBZ X0, 0x0, 0x3A6FAD4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x974000
	008 Move X23, 0x6E5000
	009 Move W8, [X22+654]
	010 Move X23, [X23+4088]
	011 Move X21, X2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0x685000
	019 Move X0, [X0+2600]
	020 Call 0x1C17CF4
	021 Move X0, 0x685000
	022 Move X0, [X0+2512]
	023 Call 0x1C17CF4
	024 Move X0, 0x6E5000
	025 Move X0, [X0+4088]
	026 Call 0x1C17CF4
	027 Move X0, 0x6E8000
	028 Move X0, [X0+3184]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X22+654], W8
	032 Move X0, [X23]
	033 Add X22, X21, 24
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X22
	039 Move X1, X31
	040 Call UniversalRenderer.IsOffscreenDepthTexture, X0
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {52}
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Return 
	052 Move X0, X19
	053 Call ScreenSpaceShadows.LoadMaterial, X0
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {82}
	058 Move W8, [X21+592]
	059 Compare W8, 0
	060 JumpIfEqual {45}
	061 Move W8, [X21+552]
	062 Add W31, W8, 1
	063 Move X0, [X19+56]
	064 Compare X0, 0
	065 JumpIfEqual {177}
	066 Move X1, [X19+40]
	067 Move X2, [X19+48]
	068 Call ScreenSpaceShadowsPass.Setup, X0, X1, X2
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {45}
	073 Compare X20, 0
	074 JumpIfEqual {174}
	075 Move X8, [X23]
	076 Move X9, [X20]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X1, [X19+56]
	079 Compare X1, 0
	080 JumpIfEqual {177}
	081 Move W8, 201
	082 Move X8, 0x685000
	083 Move X8, [X8+2512]
	084 Move W1, 2
	085 Move X0, [X8]
	086 Call 0x1C17D6C
	087 Move X20, X0
	088 Move X0, X19
	089 Move X1, X31
	090 Call "il2cpp_vm_object_is_inst", X0
	091 Compare X0, 0
	092 JumpIfEqual {177}
	093 Move X8, [X0]
	094 Move X9, [X8+424]
	095 Move X1, [X8+432]
	096 NotImplemented "Instruction BLR not yet implemented."
	097 Compare X20, 0
	098 JumpIfEqual {177}
	099 Move X21, X0
	100 Compare X0, 0
	101 JumpIfEqual {108}
	102 Move X8, [X20]
	103 Move X0, X21
	104 Move X1, [X8+64]
	105 Call 0x1C17E00
	106 Compare X0, 0
	107 JumpIfEqual {171}
	108 Move W8, [X20+24]
	109 Compare W8, 0
	110 JumpIfEqual {170}
	111 Move X0, X19
	112 Move X1, X31
	113 Move [X20+32], X21
	114 Call Object.get_name, X0
	115 Move X19, X0
	116 Compare X0, 0
	117 JumpIfEqual {124}
	118 Move X8, [X20]
	119 Move X0, X19
	120 Move X1, [X8+64]
	121 Call 0x1C17E00
	122 Compare X0, 0
	123 JumpIfEqual {171}
	124 Move W8, [X20+24]
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move [X20+40], X19
	127 Move X8, 0x685000
	128 Move X8, [X8+2600]
	129 Move X0, [X8]
	130 Move W8, [X0+224]
	131 Compare W8, 0
	132 JumpIfNotEqual {134}
	133 Call 0x1C17DFC
	134 Move X8, 0x6E8000
	135 Move X8, [X8+3184]
	136 Move X1, X20
	137 Move X20, [X31+32]
	138 Move X19, [X31+40]
	139 Move X22, [X31+16]
	140 Move X21, [X31+24]
	141 Move X0, [X8]
	142 Move X2, X31
	143 Move X30, [X31+48]
	144 Move X23, [X31+56]
	145 Call Debug.LogErrorFormat, X0, X1
	146 Return 
	147 Move W8, [X20+736]
	148 Move X1, [X19+56]
	149 Move W9, 201
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move W8, 220
	152 NotImplemented "Instruction CSEL not yet implemented."
	153 Compare X1, 0
	154 JumpIfEqual {177}
	155 Move X0, X20
	156 Move X2, X31
	157 Move [X1+16], W8
	158 Call ScriptableRenderer.EnqueuePass, X0, X1
	159 Move X1, [X19+64]
	160 Move X0, X20
	161 Move X20, [X31+32]
	162 Move X19, [X31+40]
	163 Move X22, [X31+16]
	164 Move X21, [X31+24]
	165 Move X2, X31
	166 Move X30, [X31+48]
	167 Move X23, [X31+56]
	168 Call ScriptableRenderer.EnqueuePass, X0, X1
	169 Return 
	170 Call 0x1C17F28
	171 Call 0x1C17F44
	172 Move X1, X31
	173 Call 0x1C17DEC
	174 Move X8, [X19+56]
	175 Compare X8, 0
	176 JumpIfNotEqual {178}
	177 Call 0x1C17F20
	178 Move W9, 201
	179 Move [X8+16], W9
	180 Call 0x1C17F20

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x03A6FADC BL 0x2BC434C
	0x03A6FAE0 CMP W21, 0x2
	0x03A6FAE4 B.LT 0x3A6FAF8
	0x03A6FAE8 LDR W8, [X20]
	0x03A6FAEC CMP W8, 0x1
	0x03A6FAF0 B.NE 0x3A6FAF8
	0x03A6FAF4 STR W31, [X20]
	0x03A6FAF8 LDR X0, [X26]
	0x03A6FAFC LDR W8, [X0 + 0xE0]
	0x03A6FB00 CBNZ W8, 0x3A6FB08
	0x03A6FB04 BL 0x1C16DFC
	0x03A6FB08 MOV X0, X31
	0x03A6FB0C BL 0x3A89A38
	0x03A6FB10 LDR X8, [X27]
	0x03A6FB14 MOV X20, X0
	0x03A6FB18 LDR W9, [X8 + 0xE0]
	0x03A6FB1C CBNZ W9, 0x3A6FB28
	0x03A6FB20 MOV X0, X8
	0x03A6FB24 BL 0x1C16DFC
	0x03A6FB28 MOV X0, X20
	0x03A6FB2C MOV X1, X31
	0x03A6FB30 BL 0x3C38948
	0x03A6FB34 TBZ X0, 0x0, 0x3A6FBA4
	0x03A6FB38 LDR X0, [X26]
	0x03A6FB3C LDR W8, [X0 + 0xE0]
	0x03A6FB40 CBNZ W8, 0x3A6FB48
	0x03A6FB44 BL 0x1C16DFC
	0x03A6FB48 MOV X0, X31
	0x03A6FB4C BL 0x3A89A38
	0x03A6FB50 CBZ X0, 0x3A6FBCC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x974000
	005 Move W8, [X20+655]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x6AD000
	012 Move X0, [X0+2296]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+655], W8
	016 Move X20, 0x6AD000
	017 Move X8, [X19+56]
	018 Move X20, [X20+2296]
	019 Compare X8, 0
	020 JumpIfEqual {26}
	021 Move X0, [X8+240]
	022 Compare X0, 0
	023 JumpIfEqual {26}
	024 Move X1, X31
	025 Call RTHandle.Release, X0
	026 Move [X19+56], X31
	027 Move X0, [X20]
	028 Move X19, [X19+48]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X1, X31
	037 Move X30, [X31+32]
	038 Call CoreUtils.Destroy, X0
	039 Return 

Method: System.Boolean LoadMaterial()

Disassembly:
	0x03A6F6E4 ADRP X23, 0x68A000
	0x03A6F6E8 LDR X23, [X23 + 0x698]
	0x03A6F6EC ADRP X25, 0x6E5000
	0x03A6F6F0 LDR X1, [X8]
	0x03A6F6F4 ADRP X26, 0x684000
	0x03A6F6F8 ADRP X28, 0x68A000
	0x03A6F6FC LDR W27, [X22 + 0x74]
	0x03A6F700 LDR X25, [X25 + 0xC50]
	0x03A6F704 LDR X26, [X26 + 0x598]
	0x03A6F708 LDR X28, [X28 + 0x690]
	0x03A6F70C ADD X8, X31, 0x8
	0x03A6F710 BL 0x301CB58
	0x03A6F714 LDUR V0, [X31 + 0x8]
	0x03A6F718 LDR X8, [X31 + 0x18]
	0x03A6F71C MOV W24, W31
	0x03A6F720 STR V0, [X31 + 0x2]
	0x03A6F724 STR X8, [X31 + 0x30]
	0x03A6F728 LDR X1, [X23]
	0x03A6F72C ADD X0, X31, 0x20
	0x03A6F730 BL 0x2BC4350
	0x03A6F734 TBZ X0, 0x0, 0x3A6F79C
	0x03A6F738 LDR X8, [X31 + 0x30]
	0x03A6F73C CBZ X8, 0x3A6F898
	0x03A6F740 LDRB W9, [X8 + 0x18]
	0x03A6F744 CBZ W9, 0x3A6F728
	0x03A6F748 LDR X9, [X8]
	0x03A6F74C LDRB W2, [X22 + 0x80]
	0x03A6F750 CMP W27, 0x1
	0x03A6F754 CSET W1, EQ
	0x03A6F758 LDP X10, X5, [X9 + 0x1D8]
	0x03A6F75C ADD X3, X31, 0x4C
	0x03A6F760 ADD X4, X31, 0x48
	0x03A6F764 MOV X0, X8
	0x03A6F768 BLR X10
	0x03A6F76C LDR W8, [X20]
	0x03A6F770 LDR W9, [X31 + 0x4C]
	0x03A6F774 ORR W24, W24, W0, 0x0
	0x03A6F778 CMP W8, W9
	0x03A6F77C CSEL W8, W8, W9, LT
	0x03A6F780 STR W8, [X20]
	0x03A6F784 LDR W8, [X19]
	0x03A6F788 LDR W9, [X31 + 0x48]
	0x03A6F78C CMP W8, W9
	0x03A6F790 CSEL W8, W8, W9, GT
	0x03A6F794 STR W8, [X19]
	0x03A6F798 B 0x3A6F728
	0x03A6F79C LDR X1, [X28]
	0x03A6F7A0 ADD X0, X31, 0x20
	0x03A6F7A4 BL 0x2BC434C
	0x03A6F7A8 CMP W21, 0x2
	0x03A6F7AC B.LT 0x3A6F7C8
	0x03A6F7B0 CMP W27, 0x1
	0x03A6F7B4 B.EQ 0x3A6F7C8
	0x03A6F7B8 LDR W8, [X20]
	0x03A6F7BC CMP W8, 0x1
	0x03A6F7C0 B.NE 0x3A6F7C8
	0x03A6F7C4 STR W31, [X20]
	0x03A6F7C8 LDR X0, [X25]
	0x03A6F7CC LDR W8, [X0 + 0xE0]
	0x03A6F7D0 CBNZ W8, 0x3A6F7D8
	0x03A6F7D4 BL 0x1C16DFC
	0x03A6F7D8 MOV X0, X31
	0x03A6F7DC BL 0x3A89A38
	0x03A6F7E0 LDR X8, [X26]
	0x03A6F7E4 MOV X20, X0
	0x03A6F7E8 LDR W9, [X8 + 0xE0]
	0x03A6F7EC CBNZ W9, 0x3A6F7F8
	0x03A6F7F0 MOV X0, X8
	0x03A6F7F4 BL 0x1C16DFC
	0x03A6F7F8 MOV X0, X20
	0x03A6F7FC MOV X1, X31
	0x03A6F800 BL 0x3C38948
	0x03A6F804 TBZ X0, 0x0, 0x3A6F874
	0x03A6F808 LDR X0, [X25]
	0x03A6F80C LDR W8, [X0 + 0xE0]
	0x03A6F810 CBNZ W8, 0x3A6F818
	0x03A6F814 BL 0x1C16DFC
	0x03A6F818 MOV X0, X31
	0x03A6F81C BL 0x3A89A38
	0x03A6F820 CBZ X0, 0x3A6F89C
	0x03A6F824 MOV X1, X31
	0x03A6F828 BL 0x3A94AA8
	0x03A6F82C CBZ X0, 0x3A6F89C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x974000
	006 Move X21, 0x685000
	007 Move W8, [X20+656]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x6AD000
	015 Move X0, [X0+2296]
	016 Call 0x1C17CF4
	017 Move X0, 0x685000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x6E8000
	021 Move X0, [X0+3176]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+656], W8
	025 Move X0, [X21]
	026 Move X20, [X19+48]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {45}
	039 Move W0, 1
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return X0
	045 Move X0, [X21]
	046 Move X20, [X19+32]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X20
	052 Move X1, X31
	053 Move X2, X31
	054 Call Object.op_Equality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {80}
	059 Move X8, 0x6E8000
	060 Move X8, [X8+3176]
	061 Move X1, X31
	062 Move X0, [X8]
	063 Call Shader.Find, X0
	064 Move [X19+32], X0
	065 Move X20, X0
	066 Move X0, [X21]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Move X0, X20
	072 Move X1, X31
	073 Move X2, X31
	074 Call Object.op_Equality, X0, X1
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {80}
	079 Move W0, W31
	080 Move X8, 0x6AD000
	081 Move X8, [X8+2296]
	082 Move X20, [X19+32]
	083 Move X0, [X8]
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 Move X0, X20
	089 Move X1, X31
	090 Call CoreUtils.CreateEngineMaterial, X0
	091 Move [X19+48], X0
	092 Move X20, X0
	093 Move X0, [X21]
	094 Move W8, [X0+224]
	095 Compare W8, 0
	096 JumpIfNotEqual {98}
	097 Call 0x1C17DFC
	098 Move X0, X20
	099 Move X20, [X31+16]
	100 Move X19, [X31+24]
	101 Move X1, X31
	102 Move X2, X31
	103 Move X30, [X31+32]
	104 Move X21, [X31+40]
	105 Call Object.op_Inequality, X0, X1
	106 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03A6FB68 ADD W8, W8, 0xE
	0x03A6FB6C CMP W9, 0x0
	0x03A6FB70 CSEL W8, W8, W9, LT
	0x03A6FB74 SBFM W8, W8, 0x3, 0x1F
	0x03A6FB78 CMP W8, 0x4
	0x03A6FB7C B.HI 0x3A6FB90
	0x03A6FB80 ADRP X9, 0xFFFFFFFFFD128000
	0x03A6FB84 ADD X9, X9, 0xB1C
	0x03A6FB88 LDR W8, [X9, W8, SXTW]
	0x03A6FB8C B 0x3A6FB94
	0x03A6FB90 MOVZ W8, 0x3
	0x03A6FB94 LDR W9, [X19]
	0x03A6FB98 CMP W9, W8
	0x03A6FB9C CSEL W8, W9, W8, GT
	0x03A6FBA0 STR W8, [X19]
	0x03A6FBA4 AND W0, W25, 0x1
	0x03A6FBA8 LDP X20, X19, [X31 + 0x90]
	0x03A6FBAC LDP X22, X21, [X31 + 0x80]
	0x03A6FBB0 LDP X24, X23, [X31 + 0x70]
	0x03A6FBB4 LDP X26, X25, [X31 + 0x60]
	0x03A6FBB8 LDP X28, X27, [X31 + 0x50]
	0x03A6FBBC LDP X29, X30, [X31 + 0x40]
	0x03A6FBC0 ADD X31, X31, 0xA0
	0x03A6FBC4 RET
	0x03A6FBC8 BL 0x1C16F20
	0x03A6FBCC BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x974000
	006 Move X21, 0x6E8000
	007 Move W8, [X20+657]
	008 Move X21, [X21+3168]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x6E8000
	015 Move X0, [X0+3168]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+657], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move W8, 1
	025 Move [X19+40], X20
	026 Move [X19+24], W8
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X1, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call ScriptableObject..ctor, X0
	034 Return 

