Type: UnityEngine.Rendering.Universal.Renderer2DData

Method: System.Single get_hdrEmulationScale()

Disassembly:
	0x03A26CE4 STP S3, S2, [X0 + 0x38]
	0x03A26CE8 STR S0, [X0 + 0x40]

ISIL:
	001 Move V0, [X0+76]
	002 Return V0

Method: System.Single get_lightRenderTextureScale()

Disassembly:
	0x03A26CEC B.EQ 0x3A26D24
	0x03A26CF0 STP S3, S1, [X0 + 0x44]

ISIL:
	001 Move V0, [X0+80]
	002 Return V0

Method: UnityEngine.Rendering.Universal.Light2DBlendStyle[] get_lightBlendStyles()

Disassembly:
	0x03A26CF4 STR S0, [X0 + 0x4C]
	0x03A26CF8 STR X0, [X19 + 0x40]

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.Boolean get_useDepthStencilBuffer()

Disassembly:
	0x03A26CFC LDP X20, X19, [X31 + 0x80]
	0x03A26D00 LDP X22, X21, [X31 + 0x70]

ISIL:
	001 Move W0, [X0+96]
	002 Return X0

Method: UnityEngine.Texture2D get_fallOffLookup()

Disassembly:
	0x03A26D04 LDR X30, [X31 + 0x68]
	0x03A26D08 LDP D9, D8, [X31 + 0x58]

ISIL:
	001 Move X0, [X0+232]
	002 Return X0

Method: UnityEngine.Shader get_shapeLightShader()

Disassembly:
	0x03A26D0C LDP D11, D10, [X31 + 0x48]
	0x03A26D10 LDP D13, D12, [X31 + 0x38]

ISIL:
	001 Move X0, [X0+120]
	002 Return X0

Method: UnityEngine.Shader get_shapeLightVolumeShader()

Disassembly:
	0x03A26D14 LDR V14, [X31 + 0x30]
	0x03A26D18 ADD X31, X31, 0x90

ISIL:
	001 Move X0, [X0+128]
	002 Return X0

Method: UnityEngine.Shader get_pointLightShader()

Disassembly:
	0x03A26D1C RET
	0x03A26D20 BL 0x1C16F20

ISIL:
	001 Move X0, [X0+136]
	002 Return X0

Method: UnityEngine.Shader get_pointLightVolumeShader()

Disassembly:
	0x03A26D24 BL 0x1C16F28
	0x03A26D28 SUB X31, X31, 0x40

ISIL:
	001 Move X0, [X0+144]
	002 Return X0

Method: UnityEngine.Shader get_blitShader()

Disassembly:
	0x03A26D2C STP X30, X21, [X31 + 0x20]
	0x03A26D30 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move X0, [X0+152]
	002 Return X0

Method: UnityEngine.Shader get_blitHDROverlay()

Disassembly:
	0x03A26D34 ADRP X21, 0x9BC000
	0x03A26D38 ADRP X20, 0x6CD000

ISIL:
	001 Move X0, [X0+160]
	002 Return X0

Method: UnityEngine.Shader get_coreBlitPS()

Disassembly:
	0x03A26D3C LDRB W8, [X21 + 0x2D]
	0x03A26D40 LDR X20, [X20 + 0x598]

ISIL:
	001 Move X0, [X0+152]
	002 Return X0

Method: UnityEngine.Shader get_coreBlitColorAndDepthPS()

Disassembly:
	0x03A26D44 MOV X19, X0
	0x03A26D48 TBNZ X8, 0x0, 0x3A26D6C

ISIL:
	001 Move X0, [X0+168]
	002 Return X0

Method: UnityEngine.Shader get_samplingShader()

Disassembly:
	0x03A26D4C ADRP X0, 0x6D4000
	0x03A26D50 LDR X0, [X0 + 0x700]

ISIL:
	001 Move X0, [X0+176]
	002 Return X0

Method: UnityEngine.Rendering.Universal.PostProcessData get_postProcessData()

Disassembly:
	0x03A26D54 BL 0x1C16CF4
	0x03A26D58 ADRP X0, 0x6CD000

ISIL:
	001 Move X0, [X0+224]
	002 Return X0

Method: System.Void set_postProcessData(UnityEngine.Rendering.Universal.PostProcessData value)

Disassembly:
	0x03A26D5C LDR X0, [X0 + 0x598]
	0x03A26D60 BL 0x1C16CF4

ISIL:
	001 Move [X0+224], X1
	002 Return 

Method: UnityEngine.Shader get_spriteShadowShader()

Disassembly:
	0x03A26D64 MOVZ W8, 0x1
	0x03A26D68 STRB W8, [X21 + 0x2D]

ISIL:
	001 Move X0, [X0+192]
	002 Return X0

Method: UnityEngine.Shader get_spriteUnshadowShader()

Disassembly:
	0x03A26D6C LDR X0, [X20]
	0x03A26D70 LDR X20, [X19 + 0x50]

ISIL:
	001 Move X0, [X0+200]
	002 Return X0

Method: UnityEngine.Shader get_geometryUnshadowShader()

Disassembly:
	0x03A26D74 LDR W8, [X0 + 0xE0]
	0x03A26D78 CBNZ W8, 0x3A26D80

ISIL:
	001 Move X0, [X0+208]
	002 Return X0

Method: UnityEngine.Shader get_projectedShadowShader()

Disassembly:
	0x03A26D7C BL 0x1C16DFC
	0x03A26D80 MOV X0, X20

ISIL:
	001 Move X0, [X0+184]
	002 Return X0

Method: UnityEngine.TransparencySortMode get_transparencySortMode()

Disassembly:
	0x03A26D84 MOV X1, X31
	0x03A26D88 MOV X2, X31

ISIL:
	001 Move W0, [X0+60]
	002 Return X0

Method: UnityEngine.Vector3 get_transparencySortAxis()

Disassembly:
	0x03A26D8C BL 0x3C3883C
	0x03A26D90 TBNZ X0, 0x0, 0x3A26DAC
	0x03A26D94 LDR W20, [X19 + 0x58]

ISIL:
	001 Move S0, [X0+64]
	002 Move S1, [X0+68]
	003 Move V2, [X0+72]
	004 Return X0

Method: System.UInt32 get_lightRenderTextureMemoryBudget()

Disassembly:
	0x03A26D98 MOV X0, X19
	0x03A26D9C MOV X1, X31

ISIL:
	001 Move W0, [X0+108]
	002 Return X0

Method: System.UInt32 get_shadowRenderTextureMemoryBudget()

Disassembly:
	0x03A26DA0 BL 0x3C385F8
	0x03A26DA4 CMP W20, W0

ISIL:
	001 Move W0, [X0+112]
	002 Return X0

Method: System.Boolean get_useCameraSortingLayerTexture()

Disassembly:
	0x03A26DA8 B.EQ 0x3A26DFC
	0x03A26DAC ADRP X8, 0x6D4000

ISIL:
	001 Move W0, [X0+97]
	002 Return X0

Method: System.Int32 get_cameraSortingLayerTextureBound()

Disassembly:
	0x03A26DB0 LDR X8, [X8 + 0x700]
	0x03A26DB4 LDR X0, [X8]

ISIL:
	001 Move W0, [X0+100]
	002 Return X0

Method: UnityEngine.Rendering.Universal.Downsampling get_cameraSortingLayerDownsamplingMethod()

Disassembly:
	0x03A26DB8 BL 0x1C16F10
	0x03A26DBC MOV X1, X31

ISIL:
	001 Move W0, [X0+104]
	002 Return X0

Method: UnityEngine.Rendering.Universal.ScriptableRenderer Create()

Disassembly:
	0x03A26DC0 MOV X20, X0
	0x03A26DC4 BL 0x3C17028
	0x03A26DC8 LDR X1, [X19 + 0x40]
	0x03A26DCC ADD X8, X31, 0x8
	0x03A26DD0 MOV X0, X20
	0x03A26DD4 STR X20, [X19 + 0x50]
	0x03A26DD8 BL 0x3A26E10
	0x03A26DDC LDR X8, [X31 + 0x18]
	0x03A26DE0 LDUR V0, [X31 + 0x8]
	0x03A26DE4 MOV X0, X19
	0x03A26DE8 MOV X1, X31
	0x03A26DEC STR X8, [X19 + 0x80]
	0x03A26DF0 STR V0, [X19 + 0x7]
	0x03A26DF4 BL 0x3C385F8
	0x03A26DF8 STR W0, [X19 + 0x58]
	0x03A26DFC STR X31, [X19 + 0x60]
	0x03A26E00 LDP X20, X19, [X31 + 0x30]
	0x03A26E04 LDP X30, X21, [X31 + 0x20]
	0x03A26E08 ADD X31, X31, 0x40
	0x03A26E0C RET
	0x03A26E10 SUB X31, X31, 0xD0
	0x03A26E14 STR D10, [X31 + 0x50]
	0x03A26E18 STP D9, D8, [X31 + 0x60]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x9BD000
	006 Move X21, 0x72F000
	007 Move W8, [X20+38]
	008 Move X21, [X21+2336]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x72F000
	015 Move X0, [X0+2336]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+38], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X2, X31
	023 Move X20, X0
	024 Call Renderer2D..ctor, X0, X1
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Void Dispose()

Disassembly:
	0x03A26E1C STP X29, X30, [X31 + 0x70]
	0x03A26E20 STP X28, X27, [X31 + 0x80]
	0x03A26E24 STP X26, X25, [X31 + 0x90]
	0x03A26E28 STP X24, X23, [X31 + 0xA0]
	0x03A26E2C STP X22, X21, [X31 + 0xB0]
	0x03A26E30 STP X20, X19, [X31 + 0xC0]
	0x03A26E34 STP X8, X0, [X31]
	0x03A26E38 ADRP X28, 0x9BC000
	0x03A26E3C ADRP X29, 0x6D1000
	0x03A26E40 ADRP X21, 0x6F9000
	0x03A26E44 ADRP X27, 0x6CE000
	0x03A26E48 ADRP X22, 0x6D1000
	0x03A26E4C ADRP X26, 0x728000
	0x03A26E50 ADRP X23, 0x728000
	0x03A26E54 ADRP X24, 0x727000
	0x03A26E58 ADRP X19, 0x727000
	0x03A26E5C LDR X29, [X29 + 0x3C0]
	0x03A26E60 LDR X21, [X21 + 0x5B8]
	0x03A26E64 LDR X27, [X27 + 0xE30]
	0x03A26E68 LDRB W8, [X28 + 0x53]
	0x03A26E6C LDR X22, [X22 + 0xB70]
	0x03A26E70 LDR X26, [X26 + 0x8]
	0x03A26E74 LDR X23, [X23 + 0x10]
	0x03A26E78 LDR X24, [X24 + 0xC00]
	0x03A26E7C LDR X19, [X19 + 0xC08]
	0x03A26E80 MOV X25, X1
	0x03A26E84 TBNZ X8, 0x0, 0x3A27040
	0x03A26E88 ADRP X0, 0x6F5000
	0x03A26E8C LDR X0, [X0 + 0x5E0]
	0x03A26E90 BL 0x1C16CF4
	0x03A26E94 ADRP X0, 0x72E000
	0x03A26E98 LDR X0, [X0 + 0xA48]
	0x03A26E9C BL 0x1C16CF4
	0x03A26EA0 ADRP X0, 0x72E000
	0x03A26EA4 LDR X0, [X0 + 0xA50]
	0x03A26EA8 BL 0x1C16CF4
	0x03A26EAC ADRP X0, 0x72E000
	0x03A26EB0 LDR X0, [X0 + 0xA58]
	0x03A26EB4 BL 0x1C16CF4
	0x03A26EB8 ADRP X0, 0x72E000
	0x03A26EBC LDR X0, [X0 + 0xA60]
	0x03A26EC0 BL 0x1C16CF4
	0x03A26EC4 ADRP X0, 0x728000
	0x03A26EC8 LDR X0, [X0 + 0x808]
	0x03A26ECC BL 0x1C16CF4
	0x03A26ED0 ADRP X0, 0x728000
	0x03A26ED4 LDR X0, [X0 + 0x460]
	0x03A26ED8 BL 0x1C16CF4
	0x03A26EDC ADRP X0, 0x6CF000
	0x03A26EE0 LDR X0, [X0 + 0x9C8]
	0x03A26EE4 BL 0x1C16CF4
	0x03A26EE8 ADRP X0, 0x728000
	0x03A26EEC LDR X0, [X0 + 0x170]
	0x03A26EF0 BL 0x1C16CF4
	0x03A26EF4 ADRP X0, 0x6CF000
	0x03A26EF8 LDR X0, [X0 + 0x9D0]
	0x03A26EFC BL 0x1C16CF4
	0x03A26F00 ADRP X0, 0x72E000
	0x03A26F04 LDR X0, [X0 + 0xA68]
	0x03A26F08 BL 0x1C16CF4
	0x03A26F0C ADRP X0, 0x72E000
	0x03A26F10 LDR X0, [X0 + 0xA70]
	0x03A26F14 BL 0x1C16CF4
	0x03A26F18 ADRP X0, 0x728000
	0x03A26F1C LDR X0, [X0 + 0x688]
	0x03A26F20 BL 0x1C16CF4
	0x03A26F24 ADRP X0, 0x6F9000
	0x03A26F28 LDR X0, [X0 + 0xD58]
	0x03A26F2C BL 0x1C16CF4
	0x03A26F30 ADRP X0, 0x729000
	0x03A26F34 LDR X0, [X0 + 0x188]
	0x03A26F38 BL 0x1C16CF4
	0x03A26F3C ADRP X0, 0x6FA000
	0x03A26F40 LDR X0, [X0 + 0x758]
	0x03A26F44 BL 0x1C16CF4
	0x03A26F48 ADRP X0, 0x6CE000
	0x03A26F4C LDR X0, [X0 + 0xE18]
	0x03A26F50 BL 0x1C16CF4
	0x03A26F54 ADRP X0, 0x6FA000
	0x03A26F58 LDR X0, [X0 + 0x6C0]
	0x03A26F5C BL 0x1C16CF4
	0x03A26F60 ADRP X0, 0x6F9000
	0x03A26F64 LDR X0, [X0 + 0x5B0]
	0x03A26F68 BL 0x1C16CF4
	0x03A26F6C ADRP X0, 0x6D1000
	0x03A26F70 LDR X0, [X0 + 0xB70]
	0x03A26F74 BL 0x1C16CF4
	0x03A26F78 ADRP X0, 0x728000
	0x03A26F7C LDR X0, [X0 + 0x10]
	0x03A26F80 BL 0x1C16CF4
	0x03A26F84 ADRP X0, 0x72E000
	0x03A26F88 LDR X0, [X0 + 0xA78]
	0x03A26F8C BL 0x1C16CF4
	0x03A26F90 ADRP X0, 0x6F9000
	0x03A26F94 LDR X0, [X0 + 0x5B8]
	0x03A26F98 BL 0x1C16CF4
	0x03A26F9C ADRP X0, 0x727000
	0x03A26FA0 LDR X0, [X0 + 0xC08]
	0x03A26FA4 BL 0x1C16CF4
	0x03A26FA8 ADRP X0, 0x6D1000
	0x03A26FAC LDR X0, [X0 + 0x978]
	0x03A26FB0 BL 0x1C16CF4
	0x03A26FB4 ADRP X0, 0x6CE000
	0x03A26FB8 LDR X0, [X0 + 0xE30]
	0x03A26FBC BL 0x1C16CF4
	0x03A26FC0 ADRP X0, 0x72E000
	0x03A26FC4 LDR X0, [X0 + 0xA80]
	0x03A26FC8 BL 0x1C16CF4
	0x03A26FCC ADRP X0, 0x727000
	0x03A26FD0 LDR X0, [X0 + 0xC00]
	0x03A26FD4 BL 0x1C16CF4
	0x03A26FD8 ADRP X0, 0x6D1000
	0x03A26FDC LDR X0, [X0 + 0x3C0]
	0x03A26FE0 BL 0x1C16CF4
	0x03A26FE4 ADRP X0, 0x728000
	0x03A26FE8 LDR X0, [X0 + 0x8]
	0x03A26FEC BL 0x1C16CF4
	0x03A26FF0 ADRP X0, 0x72E000
	0x03A26FF4 LDR X0, [X0 + 0xA88]
	0x03A26FF8 BL 0x1C16CF4
	0x03A26FFC ADRP X0, 0x72E000
	0x03A27000 LDR X0, [X0 + 0xA90]
	0x03A27004 BL 0x1C16CF4
	0x03A27008 ADRP X0, 0x72D000
	0x03A2700C LDR X0, [X0 + 0xA98]
	0x03A27010 BL 0x1C16CF4
	0x03A27014 ADRP X0, 0x72D000
	0x03A27018 LDR X0, [X0 + 0xAA0]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], X30
	003 Move [X31+56], X27
	004 Move [X31+64], X26
	005 Move [X31+72], X25
	006 Move [X31+80], X24
	007 Move [X31+88], X23
	008 Move [X31+96], X22
	009 Move [X31+104], X21
	010 Move [X31+112], X20
	011 Move [X31+120], X19
	012 Move X20, 0x9BD000
	013 Move W8, [X20+39]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {42}
	019 Move X0, 0x6F6000
	020 Move X0, [X0+2296]
	021 Call 0x1C17CF4
	022 Move X0, 0x72F000
	023 Move X0, [X0+2528]
	024 Call 0x1C17CF4
	025 Move X0, 0x72F000
	026 Move X0, [X0+2536]
	027 Call 0x1C17CF4
	028 Move X0, 0x72F000
	029 Move X0, [X0+2544]
	030 Call 0x1C17CF4
	031 Move X0, 0x72F000
	032 Move X0, [X0+2552]
	033 Call 0x1C17CF4
	034 Move X0, 0x72F000
	035 Move X0, [X0+2560]
	036 Call 0x1C17CF4
	037 Move X0, 0x72F000
	038 Move X0, [X0+2568]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+39], W8
	042 NotImplemented "Instruction MOVI not yet implemented."
	043 Move [X31+32], X31
	044 Move [X31], V0
	045 Move [X31+8], V0
	046 Move X8, [X19+88]
	047 Compare X8, 0
	048 JumpIfEqual {80}
	049 Move X25, 0x72F000
	050 Move X21, 0x72F000
	051 Move X24, 0x6F6000
	052 Move X22, 0x72F000
	053 Move X23, 0x72F000
	054 Move X25, [X25+2536]
	055 Move X21, [X21+2552]
	056 Move X24, [X24+2296]
	057 Move X22, [X22+2528]
	058 Move X23, [X23+2544]
	059 Move X26, X31
	060 Move X20, X31
	061 Move W27, 56
	062 Move W9, [X8+24]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X9, [X8]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction CSEL not yet implemented."
	068 Compare X9, 0
	069 JumpIfEqual {76}
	070 Compare X20, 0
	071 JumpIfEqual {80}
	072 Move X0, X20
	073 Move X1, X31
	074 Call RTHandle.Release, X0
	075 Move X8, [X19+88]
	076 Add X26, X26, 1
	077 Add X27, X27, 32
	078 Compare X8, 0
	079 JumpIfNotEqual {62}
	080 Call 0x1C17F20
	081 Move X0, [X19+240]
	082 Compare X0, 0
	083 JumpIfEqual {80}
	084 Move X1, [X25]
	085 Add X8, X31, 0
	086 Call Dictionary`2<UInt32, Object>.GetEnumerator, X0
	087 Move X1, [X21]
	088 Add X0, X31, 0
	089 Call Enumerator<UInt32, Object>.MoveNext, X0
	090 Move TEMP, X0
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfNotEqual {103}
	094 Move X0, [X24]
	095 Move X20, [X31+24]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Move X0, X20
	101 Move X1, X31
	102 Call CoreUtils.Destroy, X0
	103 Move X1, [X23]
	104 Add X0, X31, 0
	105 Call Enumerator<UInt32, Object>.Dispose, X0
	106 Move X0, [X19+240]
	107 Compare X0, 0
	108 JumpIfEqual {80}
	109 Move X1, [X22]
	110 Call Dictionary`2<UInt32, Object>.Clear, X0
	111 Move X20, [X31+112]
	112 Move X19, [X31+120]
	113 Move X22, [X31+96]
	114 Move X21, [X31+104]
	115 Move X24, [X31+80]
	116 Move X23, [X31+88]
	117 Move X26, [X31+64]
	118 Move X25, [X31+72]
	119 Move X30, [X31+48]
	120 Move X27, [X31+56]
	121 Add X31, X31, 128
	122 Return 
	123 Call 0x1C17F28
	124 Move X21, X0
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move X0, X21
	127 Call 0x3EB2AD0
	128 Move X20, [X0]
	129 Call 0x3EB2AE0
	130 Move X1, [X23]
	131 Add X0, X31, 0
	132 Call Enumerator<UInt32, Object>.Dispose, X0
	133 Compare X20, 0
	134 JumpIfEqual {106}
	135 Move X0, X20
	136 Call 0x1C17F18
	137 Move X20, X31
	138 Move X21, X0
	139 Move X1, [X23]
	140 Add X0, X31, 0
	141 Call Enumerator<UInt32, Object>.Dispose, X0
	142 Compare X20, 0
	143 JumpIfNotEqual {146}
	144 Move X0, X21
	145 Call 0x1D2D690
	146 Move X0, X20
	147 Call 0x1C17F18
	148 Call 0x1991590

Method: System.Void OnEnable()

Disassembly:
	0x03A2701C BL 0x1C16CF4
	0x03A27020 ADRP X0, 0x72D000
	0x03A27024 LDR X0, [X0 + 0xAA8]
	0x03A27028 BL 0x1C16CF4
	0x03A2702C ADRP X0, 0x72D000
	0x03A27030 LDR X0, [X0 + 0xAB0]
	0x03A27034 BL 0x1C16CF4
	0x03A27038 MOVZ W8, 0x1
	0x03A2703C STRB W8, [X28 + 0x53]
	0x03A27040 LDR X0, [X29]
	0x03A27044 BL 0x1C16F10
	0x03A27048 LDR X1, [X21]
	0x03A2704C STR X0, [X31 + 0x20]
	0x03A27050 BL 0x30CB97C
	0x03A27054 LDR X0, [X27]
	0x03A27058 BL 0x1C16F10
	0x03A2705C LDR X1, [X22]
	0x03A27060 STR X0, [X31 + 0x58]
	0x03A27064 BL 0x2FDBF14
	0x03A27068 LDR X0, [X26]
	0x03A2706C BL 0x1C16F10
	0x03A27070 LDR X1, [X23]
	0x03A27074 STR X0, [X31 + 0x10]
	0x03A27078 BL 0x30CE5F4
	0x03A2707C LDR X0, [X24]
	0x03A27080 BL 0x1C16F10
	0x03A27084 LDR X1, [X19]
	0x03A27088 STR X0, [X31 + 0x18]
	0x03A2708C BL 0x2F6CBF8
	0x03A27090 CBZ X25, 0x3A275F0
	0x03A27094 ADRP X8, 0x72D000
	0x03A27098 LDR X8, [X8 + 0xA50]
	0x03A2709C LDR X20, [X25 + 0x18]
	0x03A270A0 LDR X0, [X8]
	0x03A270A4 UBFM W1, W20, 0x1F, 0x1E
	0x03A270A8 BL 0x1C16D6C
	0x03A270AC CMP W20, 0x1
	0x03A270B0 MOV X26, X0
	0x03A270B4 B.LT 0x3A271AC
	0x03A270B8 ADRP X19, 0x6F4000
	0x03A270BC LDR X19, [X19 + 0x5E0]
	0x03A270C0 MOV X22, X31
	0x03A270C4 MOV X8, X31
	0x03A270C8 AND X27, X20, 0x0
	0x03A270CC ADD X28, X25, 0x20
	0x03A270D0 MOVN X29, 0x0
	0x03A270D4 MOVZ W20, 0x18
	0x03A270D8 MOVZ X21, 0x1
	0x03A270DC MOVI V8.2S, 0x3F, 0x18
	0x03A270E0 LDR W9, [X25 + 0x18]
	0x03A270E4 CMP X8, X9
	0x03A270E8 B.CS 0x3A275EC
	0x03A270EC LDP S9, S10, [X28]
	0x03A270F0 LDR X0, [X19]
	0x03A270F4 ADD X23, X8, 0x1
	0x03A270F8 CMP X23, X27
	0x03A270FC ADD X1, X31, 0x28
	0x03A27100 CSEL W24, W31, W23, EQ
	0x03A27104 STP S9, S10, [X31 + 0x28]
	0x03A27108 STP S9, S10, [X31 + 0x30]
	0x03A2710C BL 0x1C16E04
	0x03A27110 CBZ X26, 0x3A275F0
	0x03A27114 LDR W8, [X26 + 0x18]
	0x03A27118 ADD X9, X29, 0x1
	0x03A2711C CMP X9, X8
	0x03A27120 B.CS 0x3A275EC
	0x03A27124 SBFM X8, X22, 0x20, 0x3F
	0x03A27128 MADD X8, X8, X20, X26
	0x03A2712C STP S9, S10, [X8 + 0x20]
	0x03A27130 STP X31, X0, [X8 + 0x28]
	0x03A27134 LDR W8, [X25 + 0x18]
	0x03A27138 SUB X23, X23, 0x1
	0x03A2713C CMP X23, X8
	0x03A27140 B.CS 0x3A275EC
	0x03A27144 CMP W24, W8
	0x03A27148 B.CS 0x3A275EC
	0x03A2714C MOVZ W8, 0xC
	0x03A27150 SMADDL X8, X24, X8, X25
	0x03A27154 LDR V9, [X28], #0xC
	0x03A27158 LDR V10, [X8 + 0x20]
	0x03A2715C LDR X0, [X19]
	0x03A27160 ADD X1, X31, 0x40
	0x03A27164 STP D9, D10, [X31 + 0x40]
	0x03A27168 BL 0x1C16E04
	0x03A2716C LDR W8, [X26 + 0x18]
	0x03A27170 ADD X29, X29, 0x2
	0x03A27174 CMP X29, X8
	0x03A27178 B.CS 0x3A275EC
	0x03A2717C ADD X9, X22, X21
	0x03A27180 MOVZ X8, 0x2
	0x03A27184 ADD X22, X22, X8
	0x03A27188 FADD V0.2S, V9.2S, V10.2S
	0x03A2718C ADD X8, X23, 0x1
	0x03A27190 SBFM X9, X9, 0x20, 0x3F
	0x00000000 INVALID
	0x03A27198 CMP X8, X27
	0x03A2719C MADD X9, X9, X20, X26
	0x03A271A0 STR D0, [X9 + 0x20]
	0x03A271A4 STP X31, X0, [X9 + 0x28]
	0x03A271A8 B.NE 0x3A270E0
	0x03A271AC ADRP X8, 0x72D000
	0x03A271B0 LDR X8, [X8 + 0xA90]
	0x03A271B4 LDR X0, [X8]
	0x03A271B8 BL 0x1C16F10
	0x03A271BC MOV X1, X31
	0x03A271C0 MOV X25, X0
	0x03A271C4 BL 0x3A991E8
	0x03A271C8 CBZ X25, 0x3A275F0
	0x03A271CC ADRP X20, 0x72D000
	0x03A271D0 ADRP X21, 0x72D000
	0x03A271D4 ADRP X19, 0x72D000
	0x03A271D8 LDR X20, [X20 + 0xA48]
	0x03A271DC LDR X21, [X21 + 0xA88]
	0x03A271E0 LDR X19, [X19 + 0xAB0]
	0x03A271E4 MOV X0, X25
	0x03A271E8 MOV X1, X26
	0x03A271EC MOV W2, W31
	0x03A271F0 MOV X3, X31
	0x03A271F4 BL 0x3A9A700
	0x03A271F8 LDR X0, [X20]
	0x03A271FC BL 0x1C16F10
	0x03A27200 LDR X2, [X21]
	0x03A27204 MOV X1, X31
	0x03A27208 MOV X3, X31
	0x03A2720C MOV X26, X0
	0x03A27210 BL 0x3A9AA98
	0x03A27214 MOVZ W3, 0x3
	0x03A27218 MOV X0, X25
	0x03A2721C MOV W1, W31
	0x03A27220 MOV W2, W31
	0x03A27224 MOV X4, X26
	0x03A27228 MOV X5, X31
	0x03A2722C BL 0x3A9A8DC
	0x03A27230 LDR X0, [X19]
	0x03A27234 LDR X26, [X25 + 0x80]
	0x03A27238 LDR W8, [X0 + 0xE0]
	0x03A2723C CBNZ W8, 0x3A27248
	0x03A27240 BL 0x1C16DFC
	0x03A27244 LDR X0, [X19]
	0x03A27248 LDR X8, [X0 + 0xB8]
	0x03A2724C ADRP X21, 0x727000
	0x03A27250 ADRP X20, 0x6CE000
	0x03A27254 LDR X27, [X8 + 0x8]
	0x03A27258 LDR X21, [X21 + 0x808]
	0x03A2725C LDR X20, [X20 + 0x9C8]
	0x03A27260 LDR X29, [X31 + 0x58]
	0x03A27264 CBNZ X27, 0x3A272B8
	0x03A27268 LDR W8, [X0 + 0xE0]
	0x03A2726C CBNZ W8, 0x3A27278
	0x03A27270 BL 0x1C16DFC
	0x03A27274 LDR X0, [X19]
	0x03A27278 ADRP X9, 0x6CE000
	0x03A2727C LDR X8, [X0 + 0xB8]
	0x03A27280 LDR X9, [X9 + 0x9D0]
	0x03A27284 LDR X28, [X8]
	0x03A27288 LDR X0, [X9]
	0x03A2728C BL 0x1C16F10
	0x03A27290 ADRP X8, 0x72D000
	0x03A27294 LDR X8, [X8 + 0xA98]
	0x03A27298 MOV X1, X28
	0x03A2729C MOV X3, X31
	0x03A272A0 MOV X27, X0
	0x03A272A4 LDR X2, [X8]
	0x03A272A8 BL 0x2D2CF74
	0x03A272AC LDR X8, [X19]
	0x03A272B0 LDR X8, [X8 + 0xB8]
	0x03A272B4 STR X27, [X8 + 0x8]
	0x03A272B8 LDR X2, [X21]
	0x03A272BC MOV X0, X26
	0x03A272C0 MOV X1, X27
	0x03A272C4 BL 0x21CD49C
	0x03A272C8 LDR X1, [X20]
	0x03A272CC BL 0x21D54D4
	0x03A272D0 LDR X8, [X19]
	0x03A272D4 LDR X27, [X25 + 0x70]
	0x03A272D8 MOV X26, X0
	0x03A272DC LDR W9, [X8 + 0xE0]
	0x03A272E0 CBNZ W9, 0x3A272F0
	0x03A272E4 MOV X0, X8
	0x03A272E8 BL 0x1C16DFC
	0x03A272EC LDR X8, [X19]
	0x03A272F0 LDR X9, [X8 + 0xB8]
	0x03A272F4 ADRP X21, 0x72D000
	0x03A272F8 ADRP X20, 0x727000

ISIL:
	001 Subtract X31, X31, 384
	002 Move [X31+288], X29
	003 Move [X31+296], X30
	004 Move [X31+304], X28
	005 Move [X31+312], X27
	006 Move [X31+320], X26
	007 Move [X31+328], X25
	008 Move [X31+336], X24
	009 Move [X31+344], X23
	010 Move [X31+352], X22
	011 Move [X31+360], X21
	012 Move [X31+368], X20
	013 Move [X31+376], X19
	014 Move X20, 0x9BC000
	015 Move W8, [X20+40]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {41}
	021 Move X0, 0x6CD000
	022 Move X0, [X0+1880]
	023 Call 0x1C17CF4
	024 Move X0, 0x72A000
	025 Move X0, [X0+2480]
	026 Call 0x1C17CF4
	027 Move X0, 0x72E000
	028 Move X0, [X0+2576]
	029 Call 0x1C17CF4
	030 Move X0, 0x72E000
	031 Move X0, [X0+2584]
	032 Call 0x1C17CF4
	033 Move X0, 0x72E000
	034 Move X0, [X0+2592]
	035 Call 0x1C17CF4
	036 Move X0, 0x72E000
	037 Move X0, [X0+2600]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X20+40], W8
	041 Move X0, X19
	042 Move X1, X31
	043 Call ScriptableRendererData.OnEnable, X0
	044 Move X20, [X19+88]
	045 Compare X20, 0
	046 JumpIfEqual {128}
	047 Move X27, 0x6CD000
	048 Move X29, 0x72E000
	049 Move X25, 0x72A000
	050 Move X24, 0x72E000
	051 Move X23, 0x72E000
	052 Move X27, [X27+1880]
	053 Move X29, [X29+2576]
	054 Move X25, [X25+2480]
	055 Move X24, [X24+2584]
	056 Move X23, [X23+2592]
	057 Move X28, X31
	058 Move X26, X31
	059 Add X21, X31, 200
	060 NotImplemented "Instruction LDRSW not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X0, [X27]
	063 Add X1, X31, 284
	064 Move [X31+284], W26
	065 Call 0x1C17E04
	066 Move X8, [X29]
	067 Move X1, X0
	068 Move X2, X31
	069 Move X0, X8
	070 Call String.Format, X0, X1
	071 Move X1, X31
	072 Call Shader.PropertyToID, X0
	073 Move W8, [X20+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Add X8, X20, X28
	076 Move [X8+52], W0
	077 Move X22, [X19+88]
	078 Compare X22, 0
	079 JumpIfEqual {128}
	080 Move W8, [X22+24]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Add X8, X22, X28
	083 Move W0, [X8+52]
	084 Add X8, X31, 200
	085 Move X1, X31
	086 Call RenderTargetIdentifier.op_Implicit, X0
	087 Move V0, [X21]
	088 Move V1, [X21+16]
	089 Move X8, [X31+232]
	090 Move X0, [X27]
	091 Add X1, X31, 200
	092 Move [X31+240], V0
	093 Move [X31+248], V1
	094 Move [X31+272], X8
	095 Move [X31+200], W26
	096 Call 0x1C17E04
	097 Move X8, [X29]
	098 Move X1, X0
	099 Move X2, X31
	100 Move X0, X8
	101 Call String.Format, X0, X1
	102 Move X8, [X25]
	103 Move X20, X0
	104 Move W9, [X8+224]
	105 Compare W9, 0
	106 JumpIfNotEqual {109}
	107 Move X0, X8
	108 Call 0x1C17DFC
	109 Move V0, [X31+240]
	110 Move V1, [X31+256]
	111 Move X8, [X31+272]
	112 Add X0, X31, 160
	113 Move X1, X20
	114 Move X2, X31
	115 Move [X31+160], V0
	116 Move [X31+168], V1
	117 Move [X31+192], X8
	118 Call RTHandles.Alloc, X0, X1
	119 Move W8, [X22+24]
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Add X8, X22, X28
	122 Move [X8+56], X0
	123 Move X20, [X19+88]
	124 Add X28, X28, 32
	125 Add X26, X26, 1
	126 Compare X20, 0
	127 JumpIfNotEqual {60}
	128 Call 0x1C17F20
	129 Move X0, [X24]
	130 Move X1, X31
	131 Call Shader.PropertyToID, X0
	132 Add X8, X31, 200
	133 Move X1, X31
	134 Move [X19+304], W0
	135 Call RenderTargetIdentifier.op_Implicit, X0
	136 Move V0, [X21]
	137 Move V1, [X21+16]
	138 Move X8, [X31+232]
	139 Move X0, [X25]
	140 Move [X31+240], V0
	141 Move [X31+248], V1
	142 Move [X31+272], X8
	143 Move W8, [X0+224]
	144 Compare W8, 0
	145 JumpIfNotEqual {147}
	146 Call 0x1C17DFC
	147 Move V0, [X31+240]
	148 Move V1, [X31+256]
	149 Move X8, [X31+272]
	150 Move X1, [X24]
	151 Add X0, X31, 112
	152 Move X2, X31
	153 Move [X31+112], V0
	154 Move [X31+120], V1
	155 Move [X31+144], X8
	156 Call RTHandles.Alloc, X0, X1
	157 Move [X19+296], X0
	158 Move X0, [X23]
	159 Move X1, X31
	160 Call Shader.PropertyToID, X0
	161 Add X8, X31, 200
	162 Move X1, X31
	163 Move [X19+320], W0
	164 Call RenderTargetIdentifier.op_Implicit, X0
	165 Move V0, [X21]
	166 Move V1, [X21+16]
	167 Move X8, [X31+232]
	168 Move X1, [X23]
	169 Add X0, X31, 64
	170 Move X2, X31
	171 Move [X31+64], V0
	172 Move [X31+72], V1
	173 Move [X31+96], X8
	174 Call RTHandles.Alloc, X0, X1
	175 Move [X19+312], X0
	176 Move X20, 0x72E000
	177 Move X20, [X20+2600]
	178 Move X1, X31
	179 Move X0, [X20]
	180 Call Shader.PropertyToID, X0
	181 Add X8, X31, 200
	182 Move X1, X31
	183 Move [X19+336], W0
	184 Call RenderTargetIdentifier.op_Implicit, X0
	185 Move V0, [X21]
	186 Move V1, [X21+16]
	187 Move X8, [X31+232]
	188 Move X1, [X20]
	189 Add X0, X31, 16
	190 Move X2, X31
	191 Move [X31+16], V0
	192 Move [X31+24], V1
	193 Move [X31+48], X8
	194 Call RTHandles.Alloc, X0, X1
	195 Move [X19+328], X0
	196 Move [X19+248], X31
	197 Move [X19+256], X31
	198 Move [X19+272], X31
	199 Move [X19+280], X31
	200 Move X20, [X31+368]
	201 Move X19, [X31+376]
	202 Move X22, [X31+352]
	203 Move X21, [X31+360]
	204 Move X24, [X31+336]
	205 Move X23, [X31+344]
	206 Move X26, [X31+320]
	207 Move X25, [X31+328]
	208 Move X28, [X31+304]
	209 Move X27, [X31+312]
	210 Move X29, [X31+288]
	211 Move X30, [X31+296]
	212 Add X31, X31, 384
	213 Return 
	214 Call 0x1C17F28

Method: System.Collections.Generic.Dictionary`2<System.UInt32, UnityEngine.Material> get_lightMaterials()

Disassembly:
	0x03A272FC LDR X28, [X9 + 0x10]
	0x03A27300 LDR X21, [X21 + 0xA60]

ISIL:
	001 Move X0, [X0+240]
	002 Return X0

Method: UnityEngine.Material[] get_spriteSelfShadowMaterial()

Disassembly:
	0x03A27304 LDR X20, [X20 + 0x170]
	0x03A27308 CBNZ X28, 0x3A27364

ISIL:
	001 Move X0, [X0+248]
	002 Return X0

Method: System.Void set_spriteSelfShadowMaterial(UnityEngine.Material[] value)

Disassembly:
	0x03A2730C LDR W9, [X8 + 0xE0]
	0x03A27310 CBNZ W9, 0x3A27320

ISIL:
	001 Move [X0+248], X1
	002 Return 

Method: UnityEngine.Material[] get_spriteUnshadowMaterial()

Disassembly:
	0x03A27314 MOV X0, X8
	0x03A27318 BL 0x1C16DFC

ISIL:
	001 Move X0, [X0+256]
	002 Return X0

Method: System.Void set_spriteUnshadowMaterial(UnityEngine.Material[] value)

Disassembly:
	0x03A2731C LDR X8, [X19]
	0x03A27320 ADRP X9, 0x72D000

ISIL:
	001 Move [X0+256], X1
	002 Return 

Method: UnityEngine.Material[] get_geometryUnshadowMaterial()

Disassembly:
	0x03A27324 LDR X8, [X8 + 0xB8]
	0x03A27328 LDR X9, [X9 + 0xA70]

ISIL:
	001 Move X0, [X0+264]
	002 Return X0

Method: System.Void set_geometryUnshadowMaterial(UnityEngine.Material[] value)

Disassembly:
	0x03A2732C LDR X29, [X8]
	0x03A27330 LDR X0, [X9]

ISIL:
	001 Move [X0+264], X1
	002 Return 

Method: UnityEngine.Material[] get_projectedShadowMaterial()

Disassembly:
	0x03A27334 BL 0x1C16F10
	0x03A27338 ADRP X8, 0x72D000

ISIL:
	001 Move X0, [X0+272]
	002 Return X0

Method: System.Void set_projectedShadowMaterial(UnityEngine.Material[] value)

Disassembly:
	0x03A2733C LDR X8, [X8 + 0xAA0]
	0x03A27340 MOV X1, X29

ISIL:
	001 Move [X0+272], X1
	002 Return 

Method: UnityEngine.Material[] get_stencilOnlyShadowMaterial()

Disassembly:
	0x03A27344 MOV X3, X31
	0x03A27348 MOV X28, X0

ISIL:
	001 Move X0, [X0+280]
	002 Return X0

Method: System.Void set_stencilOnlyShadowMaterial(UnityEngine.Material[] value)

Disassembly:
	0x03A2734C LDR X2, [X8]
	0x03A27350 BL 0x2D2C09C

ISIL:
	001 Move [X0+280], X1
	002 Return 

Method: System.Boolean get_isNormalsRenderTargetValid()

Disassembly:
	0x03A27354 LDR X8, [X19]
	0x03A27358 LDR X29, [X31 + 0x58]

ISIL:
	001 Move W0, [X0+288]
	002 Return X0

Method: System.Void set_isNormalsRenderTargetValid(System.Boolean value)

Disassembly:
	0x03A2735C LDR X8, [X8 + 0xB8]
	0x03A27360 STR X28, [X8 + 0x10]
	0x03A27364 LDR X2, [X21]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+288], W8
	003 Return 

Method: System.Single get_normalsRenderTargetScale()

Disassembly:
	0x03A27368 MOV X0, X27
	0x03A2736C MOV X1, X28

ISIL:
	001 Move V0, [X0+292]
	002 Return V0

Method: System.Void set_normalsRenderTargetScale(System.Single value)

Disassembly:
	0x03A27370 BL 0x21CC4A4
	0x03A27374 LDR X1, [X20]

ISIL:
	001 Move [X0+292], S0
	002 Return 

Method: UnityEngine.Rendering.Universal.ILight2DCullResult get_lightCullResult()

Disassembly:
	0x03A27378 BL 0x21D599C
	0x03A2737C LDR X8, [X19]

ISIL:
	001 Move X0, [X0+344]
	002 Return X0

Method: System.Void set_lightCullResult(UnityEngine.Rendering.Universal.ILight2DCullResult value)

Disassembly:
	0x03A27380 LDR X27, [X25 + 0x70]
	0x03A27384 MOV X25, X0

ISIL:
	001 Move [X0+344], X1
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x03A27388 LDR W9, [X8 + 0xE0]
	0x03A2738C CBNZ W9, 0x3A2739C
	0x03A27390 MOV X0, X8
	0x03A27394 BL 0x1C16DFC
	0x03A27398 LDR X8, [X19]
	0x03A2739C LDR X9, [X8 + 0xB8]
	0x03A273A0 ADRP X21, 0x72D000
	0x03A273A4 ADRP X20, 0x727000
	0x03A273A8 LDR X28, [X9 + 0x18]
	0x03A273AC LDR X21, [X21 + 0xA58]
	0x03A273B0 LDR X20, [X20 + 0x460]
	0x03A273B4 CBNZ X28, 0x3A27410
	0x03A273B8 LDR W9, [X8 + 0xE0]
	0x03A273BC CBNZ W9, 0x3A273CC
	0x03A273C0 MOV X0, X8
	0x03A273C4 BL 0x1C16DFC
	0x03A273C8 LDR X8, [X19]
	0x03A273CC ADRP X9, 0x72D000
	0x03A273D0 LDR X8, [X8 + 0xB8]
	0x03A273D4 LDR X9, [X9 + 0xA68]
	0x03A273D8 LDR X29, [X8]
	0x03A273DC LDR X0, [X9]
	0x03A273E0 BL 0x1C16F10
	0x03A273E4 ADRP X8, 0x72D000
	0x03A273E8 LDR X8, [X8 + 0xAA8]
	0x03A273EC MOV X1, X29
	0x03A273F0 MOV X3, X31
	0x03A273F4 MOV X28, X0
	0x03A273F8 LDR X2, [X8]
	0x03A273FC BL 0x2D2BFD4
	0x03A27400 LDR X8, [X19]
	0x03A27404 LDR X29, [X31 + 0x58]
	0x03A27408 LDR X8, [X8 + 0xB8]
	0x03A2740C STR X28, [X8 + 0x18]
	0x03A27410 LDR X2, [X21]
	0x03A27414 MOV X0, X27
	0x03A27418 MOV X1, X28
	0x03A2741C BL 0x21CC1B0
	0x03A27420 LDR X1, [X20]
	0x03A27424 BL 0x21D533C
	0x03A27428 LDR X28, [X31 + 0x20]
	0x03A2742C CBZ X28, 0x3A275F0
	0x03A27430 ADRP X8, 0x6F8000
	0x03A27434 LDR X8, [X8 + 0xD58]
	0x03A27438 MOV X27, X0
	0x03A2743C MOV X0, X28
	0x03A27440 MOV X1, X25
	0x03A27444 LDR X2, [X8]
	0x03A27448 BL 0x30CC3E4
	0x03A2744C CBZ X29, 0x3A275F0
	0x03A27450 ADRP X8, 0x727000
	0x03A27454 LDR X8, [X8 + 0x688]
	0x03A27458 MOV X0, X29
	0x03A2745C MOV X1, X26
	0x03A27460 LDR X2, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x9BC000
	007 Move W8, [X20+41]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x72E000
	014 Move X0, [X0+2608]
	015 Call 0x1C17CF4
	016 Move X0, 0x72E000
	017 Move X0, [X0+2616]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+41], W8
	021 Move X22, 0x9B2000
	022 Move X21, 0x72E000
	023 Move X20, 0x72E000
	024 Move W8, [X22+1926]
	025 Move X21, [X21+2616]
	026 Move X20, [X20+2608]
	027 Compare W8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, 0x6CD000
	030 Move X0, [X0+1440]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+1926], W8
	034 Move X8, 0x6CD000
	035 Move X8, [X8+1440]
	036 Move X9, -49516544
	037 Move V0, [X9+1264]
	038 Move X8, [X8]
	039 Move X8, [X8+184]
	040 Move V1, [X8+24]
	041 Move V2, [X8+32]
	042 Move X8, -49516544
	043 Move [X19+76], D0
	044 Move V0, [X8+2152]
	045 Move W8, 1
	046 Move [X19+64], D1
	047 Move [X19+96], W8
	048 Move [X19+72], S2
	049 Move [X19+108], D0
	050 Move X0, [X21]
	051 Call 0x1C17F10
	052 Move X1, [X20]
	053 Move X20, X0
	054 Call Dictionary`2<UInt32, Object>..ctor, X0
	055 Move [X19+240], X20
	056 Move X0, X19
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X1, X31
	062 Move X30, [X31+48]
	063 Call ScriptableRendererData..ctor, X0
	064 Return 

