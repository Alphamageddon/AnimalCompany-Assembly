Type: UnityEngine.Rendering.Universal.LightCookieManager/WorkSlice`1

Method: System.Void .ctor(T[] src, System.Int32 srcLen = -1)

Disassembly:
	0x02899EF0 LDR X8, [X8 + 0xC0]
	0x02899EF4 LDR X23, [X8 + 0x18]
	0x02899EF8 LDRB W8, [X23 + 0x135]
	0x02899EFC TBNZ X8, 0x0, 0x2899F0C
	0x02899F00 MOV X0, X23
	0x02899F04 BL 0x1C5C684
	0x02899F08 MOV X23, X0
	0x02899F0C CBZ X24, 0x2899F28
	0x02899F10 MOV X0, X24
	0x02899F14 MOV X1, X23
	0x02899F18 BL 0x1C16E00
	0x02899F1C MOV X1, X0
	0x02899F20 CBNZ X0, 0x2899F2C
	0x02899F24 B 0x2899F58
	0x02899F28 MOV X1, X31
	0x02899F2C MOV X0, X21
	0x02899F30 MOV X2, X22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X3+32]
	006 Move W19, W2
	007 Move X20, X1
	008 Move X21, X0
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {16}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X1, X20
	017 Move W3, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X0, X21
	021 Move W2, W31
	022 Move X30, [X31+32]
	023 Move X21, [X31+40]

Method: System.Void .ctor(T[] src, System.Int32 srcStart, System.Int32 srcLen = -1)

Disassembly:
	0x02899F34 BL 0x1C24138
	0x02899F38 CMP X22, X0
	0x02899F3C MOV X22, X0
	0x02899F40 B.NE 0x2899ED8
	0x02899F44 LDP X20, X19, [X31 + 0x30]
	0x02899F48 LDP X22, X21, [X31 + 0x20]
	0x02899F4C LDP X24, X23, [X31 + 0x10]
	0x02899F50 LDR X30, [X31], #0x40
	0x02899F54 RET
	0x02899F58 MOV X0, X24
	0x02899F5C MOV X1, X23
	0x02899F60 BL 0x1C171E0
	0x02899F64 LDR X0, [X0 + 0x3F0]
	0x02899F68 RET
	0x02899F6C STR X30, [X31 - 0x30]!
	0x02899F70 STP X22, X21, [X31 + 0x10]
	0x02899F74 STP X20, X19, [X31 + 0x20]
	0x02899F78 ADRP X22, 0x1B41000
	0x02899F7C LDRB W8, [X22 + 0xC12]
	0x02899F80 MOV X21, X2
	0x02899F84 MOV X19, X1
	0x02899F88 MOV X20, X0
	0x02899F8C TBNZ X8, 0x0, 0x2899FA4
	0x02899F90 ADRP X0, 0x185A000
	0x02899F94 LDR X0, [X0 + 0xE00]
	0x02899F98 BL 0x1C16CF4
	0x02899F9C MOVZ W8, 0x1
	0x02899FA0 STRB W8, [X22 + 0xC12]
	0x02899FA4 LDR X8, [X20]
	0x02899FA8 MOV X0, X20
	0x02899FAC MOV X1, X19
	0x02899FB0 LDR X9, [X8 + 0x848]
	0x02899FB4 LDR X2, [X8 + 0x850]
	0x02899FB8 BLR X9
	0x02899FBC LDRB W8, [X20 + 0x408]
	0x02899FC0 TBZ X0, 0x0, 0x2899FD0
	0x02899FC4 CBZ W8, 0x289A114

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1B42000
	008 Move W8, [X23+3086]
	009 Move W20, W3
	010 Move W22, W2
	011 Move X21, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x185B000
	018 Move X0, [X0+1448]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+3086], W8
	022 Move [X19], X21
	023 Move [X19+8], W22
	024 Compare X21, 0
	025 JumpIfEqual {50}
	026 Move TEMP, X20
	027 And TEMP, TEMP, -2147483648
	028 Compare TEMP, -2147483648
	029 JumpIfEqual {41}
	030 Move X8, 0x185B000
	031 Move X8, [X8+1448]
	032 Move X0, [X8]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move W1, [X21+24]
	038 Move W0, W20
	039 Move X2, X31
	040 Call Math.Min, X0, X1
	041 Move W0, [X21+24]
	042 Move [X19+12], W0
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X30, [X31+48]
	048 Move X23, [X31+56]
	049 Return 
	050 Call 0x1C17F20

Method: T get_Item(System.Int32 index)

Disassembly:
	0x02899FC8 ADD X22, X21, 0x20
	0x02899FCC B 0x2899FD8
	0x02899FD0 ADD X22, X21, 0x20
	0x02899FD4 CBZ W8, 0x2899FF0
	0x02899FD8 LDR X8, [X20]
	0x02899FDC STRB W31, [X20 + 0x408]
	0x02899FE0 MOV X0, X20
	0x02899FE4 LDR X9, [X8 + 0x878]
	0x02899FE8 LDR X1, [X8 + 0x880]
	0x02899FEC BLR X9
	0x02899FF0 MOV X0, X20
	0x02899FF4 MOV X1, X31
	0x02899FF8 BL 0x3DEC0CC
	0x02899FFC CBZ X0, 0x289A0D4
	0x0289A000 LDR X8, [X20]
	0x0289A004 LDR X21, [X20 + 0x3F0]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Compare X8, 0
	004 JumpIfEqual {17}
	005 Move W9, [X0+8]
	006 Move W10, [X8+24]
	007 Add W9, W9, W1
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X9, W9
	010 Add X8, X8, X9
	011 Move S0, [X8+32]
	012 Move S1, [X8+36]
	013 Move S2, [X8+40]
	014 Move S3, [X8+44]
	015 Move X30, [X31+16]
	016 Return X0
	017 Call 0x1C17F20
	018 Call 0x1C17F28

Method: System.Void set_Item(System.Int32 index, T value)

Disassembly:
	0x0289A008 MOV X0, X20
	0x0289A00C MOV X1, X19
	0x0289A010 LDR X9, [X8 + 0x888]
	0x0289A014 LDR X2, [X8 + 0x890]
	0x0289A018 BLR X9
	0x0289A01C LDR X8, [X22]
	0x0289A020 LDR X19, [X20 + 0x3F0]
	0x0289A024 LDR X8, [X8 + 0xC0]
	0x0289A028 LDR X0, [X8 + 0x50]
	0x0289A02C LDRB W8, [X0 + 0x135]
	0x0289A030 TBNZ X8, 0x0, 0x289A038
	0x0289A034 BL 0x1C5C684
	0x0289A038 LDR W8, [X0 + 0xE0]
	0x0289A03C CBNZ W8, 0x289A044
	0x0289A040 BL 0x1C16DFC
	0x0289A044 LDR X8, [X22]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Compare X8, 0
	004 JumpIfEqual {17}
	005 Move W9, [X0+8]
	006 Move W10, [X8+24]
	007 Add W9, W9, W1
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X9, W9
	010 Add X8, X8, X9
	011 Move [X8+32], S0
	012 Move [X8+40], S1
	013 Move [X8+40], S2
	014 Move [X8+48], S3
	015 Move X30, [X31+16]
	016 Return 
	017 Call 0x1C17F20
	018 Call 0x1C17F28

Method: System.Int32 get_length()

Disassembly:
	0x0289A048 ADRP X22, 0x1859000
	0x0289A04C MOV X0, X21

ISIL:
	001 Move W0, [X0+12]
	002 Return X0

Method: System.Int32 get_capacity()

Disassembly:
	0x0289A050 MOV X1, X19
	0x0289A054 LDR X8, [X8 + 0xC0]
	0x0289A058 LDR X2, [X8 + 0x48]
	0x0289A05C LDR X22, [X22 + 0xE00]
	0x0289A060 BL 0x28F4630
	0x0289A064 MOV X19, X0
	0x0289A068 CBZ X0, 0x289A124

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void Sort(System.Func`3<T, T, System.Int32> compare)

Disassembly:
	0x0289A06C MOV X0, X19
	0x0289A070 MOV X1, X20
	0x0289A074 MOV X2, X31
	0x0289A078 BL 0x3D9C6C8
	0x0289A07C LDR X8, [X20]
	0x0289A080 LDP X9, X2, [X8 + 0x198]
	0x0289A084 MOV X0, X20
	0x0289A088 MOV X1, X19
	0x0289A08C BLR X9
	0x0289A090 MOV X20, X31
	0x0289A094 LDR X8, [X19]
	0x0289A098 LDR X1, [X22]
	0x0289A09C LDRH W9, [X8 + 0x12E]
	0x0289A0A0 CBZ X9, 0x289A0C4
	0x0289A0A4 LDR X10, [X8 + 0xB0]
	0x0289A0A8 ADD X10, X10, 0x8
	0x0289A0AC LDUR X11, [X10 - 0x8]
	0x0289A0B0 CMP X11, X1
	0x0289A0B4 B.EQ 0x289A0F8
	0x0289A0B8 SUBS X9, X9, 0x1
	0x0289A0BC ADD X10, X10, 0x10
	0x0289A0C0 B.NE 0x289A0AC
	0x0289A0C4 MOV X0, X19
	0x0289A0C8 MOV W2, W31
	0x0289A0CC BL 0x1C5C788
	0x0289A0D0 B 0x289A104
	0x0289A0D4 LDR X8, [X20]
	0x0289A0D8 MOV X0, X20
	0x0289A0DC MOV X1, X19
	0x0289A0E0 LDP X20, X19, [X31 + 0x20]
	0x0289A0E4 LDR X3, [X8 + 0x888]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W9, [X0+12]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X20, [X31+32]
	009 Move X19, [X31+40]
	010 Move X22, [X31+16]
	011 Move X21, [X31+24]
	012 Move X30, [X31+48]
	013 Return 
	014 Move X8, [X2+32]
	015 Move W20, [X0+8]
	016 Move X22, [X0]
	017 Move X19, X1
	018 Move W10, [X8+309]
	019 Add W9, W9, W20
	020 Subtract W21, W9, 1
	021 Move TEMP, X10
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {28}
	025 Move X0, X8
	026 Call 0x1C5D684
	027 Move X8, X0
	028 Move X8, [X8+192]
	029 Move X0, X22
	030 Move W1, W20
	031 Move W2, W21
	032 Move X4, [X8+48]
	033 Move X3, X19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Call 0x22B8310, X0, X1, X2, X3
	040 Return 

