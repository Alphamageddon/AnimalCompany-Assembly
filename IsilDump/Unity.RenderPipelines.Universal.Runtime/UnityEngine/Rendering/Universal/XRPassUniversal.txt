Type: UnityEngine.Rendering.Universal.XRPassUniversal

Method: UnityEngine.Experimental.Rendering.XRPass Create(UnityEngine.Experimental.Rendering.XRPassCreateInfo createInfo)

Disassembly:
	0x03A95DB8 STR W31, [X1 + 0x58]
	0x03A95DBC STP X31, X31, [X1 + 0x48]
	0x03A95DC0 STP X0, X31, [X1 + 0x38]
	0x03A95DC4 LDP X30, X19, [X31], #0x10
	0x03A95DC8 RET
	0x03A95DCC BL 0x1C16F20
	0x03A95DD0 STR X30, [X31 - 0x30]!
	0x03A95DD4 STP X22, X21, [X31 + 0x10]
	0x03A95DD8 STP X20, X19, [X31 + 0x20]
	0x03A95DDC ADRP X21, 0x94D000
	0x03A95DE0 ADRP X22, 0x6C2000
	0x03A95DE4 LDRB W8, [X21 + 0x3B2]
	0x03A95DE8 LDR X22, [X22 + 0x5F8]
	0x03A95DEC MOV X20, X1
	0x03A95DF0 MOV X19, X0
	0x03A95DF4 TBNZ X8, 0x0, 0x3A95E0C
	0x03A95DF8 ADRP X0, 0x6C2000
	0x03A95DFC LDR X0, [X0 + 0x5F8]
	0x03A95E00 BL 0x1C16CF4
	0x03A95E04 MOVZ W8, 0x1
	0x03A95E08 STRB W8, [X21 + 0x3B2]
	0x03A95E0C LDR X0, [X22]
	0x03A95E10 BL 0x24A6E1C
	0x03A95E14 CBZ X20, 0x3A95E60
	0x03A95E18 CBZ X0, 0x3A95E60
	0x03A95E1C LDR X8, [X20 + 0x10]
	0x03A95E20 STR X8, [X0 + 0x10]
	0x03A95E24 CBZ X8, 0x3A95E60
	0x03A95E28 STR X0, [X8 + 0x18]
	0x03A95E2C MOV X8, X19
	0x03A95E30 STR X20, [X0 + 0x18]
	0x03A95E34 STR X0, [X20 + 0x10]
	0x03A95E38 STR X19, [X0 + 0x20]
	0x03A95E3C CBZ X8, 0x3A95E60
	0x03A95E40 STR X0, [X8 + 0x40]
	0x03A95E44 LDR X8, [X8 + 0x30]
	0x03A95E48 CMP X8, X19
	0x03A95E4C B.NE 0x3A95E3C
	0x03A95E50 LDP X20, X19, [X31 + 0x20]
	0x03A95E54 LDP X22, X21, [X31 + 0x10]
	0x03A95E58 LDR X30, [X31], #0x30
	0x03A95E5C RET
	0x03A95E60 BL 0x1C16F20
	0x03A95E64 STR X30, [X31 - 0x30]!
	0x03A95E68 STP X22, X21, [X31 + 0x10]
	0x03A95E6C STP X20, X19, [X31 + 0x20]
	0x03A95E70 ADRP X21, 0x94D000
	0x03A95E74 ADRP X22, 0x6C2000
	0x03A95E78 LDRB W8, [X21 + 0x3B3]
	0x03A95E7C LDR X22, [X22 + 0x600]
	0x03A95E80 MOV X20, X1
	0x03A95E84 MOV X19, X0
	0x03A95E88 TBNZ X8, 0x0, 0x3A95EA0
	0x03A95E8C ADRP X0, 0x6C2000
	0x03A95E90 LDR X0, [X0 + 0x600]
	0x03A95E94 BL 0x1C16CF4
	0x03A95E98 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X29
	002 Move [X31-40], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Subtract X31, X31, 3888
	008 NotImplemented "Instruction MRS not yet implemented."
	009 Move X8, [X21+40]
	010 Move X22, 0x94E000
	011 Move X20, 0x6C3000
	012 Move X19, X0
	013 Move [X31+3880], X8
	014 Move W8, [X22+933]
	015 Move X20, [X20+1480]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x6C3000
	021 Move X0, [X0+1488]
	022 Call 0x1C17CF4
	023 Move X0, 0x6C3000
	024 Move X0, [X0+1480]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+933], W8
	028 Move X0, [X20]
	029 Move X20, 0x6C3000
	030 Move W8, [X0+224]
	031 Move X20, [X20+1488]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, [X20]
	036 Call 0x2D56510
	037 Move X20, X0
	038 Add X0, X31, 1944
	039 Move W2, 1936
	040 Move X1, X19
	041 Call 0x3EB2AC0
	042 Compare X20, 0
	043 JumpIfEqual {66}
	044 Add X0, X31, 8
	045 Add X1, X31, 1944
	046 Move W2, 1936
	047 Call 0x3EB2AC0
	048 Add X1, X31, 8
	049 Move X0, X20
	050 Move X2, X31
	051 Call XRPass.InitBase, X0, X1
	052 NotImplemented "Instruction STRH not yet implemented."
	053 Move [X20+1738], W31
	054 Move X8, [X21+40]
	055 Move X9, [X31+3880]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X0, X20
	058 Add X31, X31, 3888
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X29, [X31+48]
	064 Move X30, [X31+56]
	065 Return X0
	066 Call 0x1C17F20
	067 Call 0x3EB2B20

Method: System.Void Release()

Disassembly:
	0x03A95E9C STRB W8, [X21 + 0x3B3]
	0x03A95EA0 LDR X0, [X22]
	0x03A95EA4 BL 0x24A6E1C
	0x03A95EA8 CBZ X20, 0x3A95F00
	0x03A95EAC CBZ X0, 0x3A95F00
	0x03A95EB0 LDR X8, [X20 + 0x10]
	0x03A95EB4 STR X8, [X0 + 0x10]
	0x03A95EB8 CBZ X8, 0x3A95F00
	0x03A95EBC STR X0, [X8 + 0x18]
	0x03A95EC0 STR X20, [X0 + 0x18]
	0x03A95EC4 STR X0, [X20 + 0x10]
	0x03A95EC8 STP X19, X31, [X0 + 0x20]
	0x03A95ECC STRB W31, [X0 + 0x34]
	0x03A95ED0 LDRB W8, [X20 + 0x35]
	0x03A95ED4 STRB W8, [X0 + 0x35]
	0x03A95ED8 MOV X8, X19
	0x03A95EDC CBZ X8, 0x3A95F00
	0x03A95EE0 STR X0, [X8 + 0x48]
	0x03A95EE4 LDR X8, [X8 + 0x38]
	0x03A95EE8 CMP X8, X19
	0x03A95EEC B.NE 0x3A95EDC
	0x03A95EF0 LDP X20, X19, [X31 + 0x20]
	0x03A95EF4 LDP X22, X21, [X31 + 0x10]
	0x03A95EF8 LDR X30, [X31], #0x30
	0x03A95EFC RET
	0x03A95F00 BL 0x1C16F20
	0x03A95F04 STR X30, [X31 - 0x40]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x94E000
	006 Move X20, 0x6C3000
	007 Move W8, [X21+934]
	008 Move X20, [X20+1480]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x6C3000
	015 Move X0, [X0+1496]
	016 Call 0x1C17CF4
	017 Move X0, 0x6C3000
	018 Move X0, [X0+1480]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+934], W8
	022 Move X0, [X20]
	023 Move X20, 0x6C3000
	024 Move W8, [X0+224]
	025 Move X20, [X20+1496]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X1, [X20]
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call 0x2D56650, X0
	036 Return 

Method: System.Boolean get_isLateLatchEnabled()

Disassembly:
	0x03A95F08 STP X24, X23, [X31 + 0x10]
	0x03A95F0C STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move W0, [X0+1736]
	002 Return X0

Method: System.Void set_isLateLatchEnabled(System.Boolean value)

Disassembly:
	0x03A95F10 STP X20, X19, [X31 + 0x30]
	0x03A95F14 CMP X1, X2
	0x03A95F18 B.EQ 0x3A95FB0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+1736], W8
	003 Return 

Method: System.Boolean get_canMarkLateLatch()

Disassembly:
	0x03A95F1C MOV X20, X2
	0x03A95F20 CBZ X2, 0x3A95FC4

ISIL:
	001 Move W0, [X0+1737]
	002 Return X0

Method: System.Void set_canMarkLateLatch(System.Boolean value)

Disassembly:
	0x03A95F24 MOV X19, X1
	0x03A95F28 CBZ X1, 0x3A95FC4
	0x03A95F2C LDR X23, [X20 + 0x40]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+1737], W8
	003 Return 

Method: System.Boolean get_hasMarkedLateLatch()

Disassembly:
	0x03A95F30 LDR X24, [X19 + 0x40]
	0x03A95F34 CMP X23, X24

ISIL:
	001 Move W0, [X0+1738]
	002 Return X0

Method: System.Void set_hasMarkedLateLatch(System.Boolean value)

Disassembly:
	0x03A95F38 B.EQ 0x3A95F48
	0x03A95F3C MOV X0, X23
	0x03A95F40 MOV X1, X24

ISIL:
	001 And W8, W1, 1
	002 Move [X0+1738], W8
	003 Return 

Method: System.Void .ctor()

Disassembly:
	0x03A95F44 BL 0x3A95FC8
	0x03A95F48 LDR X21, [X20 + 0x48]

ISIL:
	001 Move X1, X31
	002 Call XRPass..ctor, X0
	003 Return 

