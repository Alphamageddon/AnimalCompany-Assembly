Type: UnityEngine.Rendering.Universal.UpscalePass

Method: System.Void .ctor(UnityEngine.Rendering.Universal.RenderPassEvent evt, UnityEngine.Material blitMaterial)

Disassembly:
	0x03A1DEC0 ADD X31, X31, 0xC0
	0x03A1DEC4 RET
	0x03A1DEC8 BL 0x1C16F20
	0x03A1DECC STR X30, [X31 - 0x20]!
	0x03A1DED0 STP X20, X19, [X31 + 0x10]
	0x03A1DED4 ADRP X20, 0x9C4000
	0x03A1DED8 ADRP X19, 0x737000
	0x03A1DEDC LDRB W8, [X20 + 0xFEB]
	0x03A1DEE0 LDR X19, [X19 + 0x658]
	0x03A1DEE4 TBNZ X8, 0x0, 0x3A1DEFC
	0x03A1DEE8 ADRP X0, 0x737000
	0x03A1DEEC LDR X0, [X0 + 0x658]
	0x03A1DEF0 BL 0x1C16CF4
	0x03A1DEF4 MOVZ W8, 0x1
	0x03A1DEF8 STRB W8, [X20 + 0xFEB]
	0x03A1DEFC LDR X8, [X19]
	0x03A1DF00 LDR W9, [X8 + 0xE0]
	0x03A1DF04 CBNZ W9, 0x3A1DF14
	0x03A1DF08 MOV X0, X8
	0x03A1DF0C BL 0x1C16DFC
	0x03A1DF10 LDR X8, [X19]
	0x03A1DF14 LDR X9, [X8 + 0xB8]
	0x03A1DF18 LDRB W9, [X9 + 0x6C]
	0x03A1DF1C CBNZ W9, 0x3A1DFAC
	0x03A1DF20 MOVZ W0, 0x4A
	0x03A1DF24 MOVZ W1, 0x5
	0x03A1DF28 MOV X2, X31
	0x03A1DF2C BL 0x3C3C4BC
	0x03A1DF30 TBZ X0, 0x0, 0x3A1DF54
	0x03A1DF34 LDR X8, [X19]
	0x03A1DF38 LDR W9, [X8 + 0xE0]
	0x03A1DF3C CBNZ W9, 0x3A1DF4C
	0x03A1DF40 MOV X0, X8
	0x03A1DF44 BL 0x1C16DFC
	0x03A1DF48 LDR X8, [X19]
	0x03A1DF4C MOVZ W9, 0x4A
	0x03A1DF50 B 0x3A1DF84
	0x03A1DF54 MOVZ W0, 0x30
	0x03A1DF58 MOVZ W1, 0x5
	0x03A1DF5C MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x9C5000
	008 Move X22, 0x737000
	009 Move W8, [X23+4063]
	010 Move X22, [X22+4080]
	011 Move X19, X2
	012 Move W20, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x737000
	019 Move X0, [X0+4080]
	020 Call 0x1C17CF4
	021 Move X0, 0x738000
	022 Move X0, [X0+1848]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+4063], W8
	026 Move X0, [X22]
	027 Move X22, 0x738000
	028 Move W8, [X0+224]
	029 Move X22, [X22+1848]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X21
	034 Move X1, X31
	035 Call ScriptableRenderPass..ctor, X0
	036 Move [X21+16], W20
	037 Move X0, [X22]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move X0, [X22]
	043 Move X8, [X0+184]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move [X8+8], X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+48]
	050 Move X23, [X31+56]
	051 Return 

Method: System.Void Setup(UnityEngine.Rendering.RTHandle colorTargetHandle, System.Int32 width, System.Int32 height, UnityEngine.FilterMode mode, ref UnityEngine.Rendering.Universal.RenderingData renderingData, out UnityEngine.Rendering.RTHandle upscaleHandle)

Disassembly:
	0x03A1DF60 BL 0x3C3C4BC
	0x03A1DF64 LDR X8, [X19]
	0x03A1DF68 TBZ X0, 0x0, 0x3A1DF8C
	0x03A1DF6C LDR W9, [X8 + 0xE0]
	0x03A1DF70 CBNZ W9, 0x3A1DF80
	0x03A1DF74 MOV X0, X8
	0x03A1DF78 BL 0x1C16DFC
	0x03A1DF7C LDR X8, [X19]
	0x03A1DF80 MOVZ W9, 0x30
	0x03A1DF84 LDR X10, [X8 + 0xB8]
	0x03A1DF88 STR W9, [X10 + 0x68]
	0x03A1DF8C LDR W9, [X8 + 0xE0]
	0x03A1DF90 CBNZ W9, 0x3A1DFA0
	0x03A1DF94 MOV X0, X8
	0x03A1DF98 BL 0x1C16DFC
	0x03A1DF9C LDR X8, [X19]
	0x03A1DFA0 LDR X9, [X8 + 0xB8]
	0x03A1DFA4 MOVZ W10, 0x1
	0x03A1DFA8 STRB W10, [X9 + 0x6C]
	0x03A1DFAC LDR W9, [X8 + 0xE0]
	0x03A1DFB0 CBNZ W9, 0x3A1DFC0
	0x03A1DFB4 MOV X0, X8
	0x03A1DFB8 BL 0x1C16DFC
	0x03A1DFBC LDR X8, [X19]
	0x03A1DFC0 LDR X8, [X8 + 0xB8]
	0x03A1DFC4 LDP X20, X19, [X31 + 0x10]
	0x03A1DFC8 LDR W0, [X8 + 0x68]
	0x03A1DFCC LDR X30, [X31], #0x20
	0x03A1DFD0 RET
	0x03A1DFD4 SUB X31, X31, 0x100
	0x03A1DFD8 STR D8, [X31 + 0xC0]
	0x03A1DFDC STP X30, X23, [X31 + 0xD0]
	0x03A1DFE0 STP X22, X21, [X31 + 0xE0]
	0x03A1DFE4 STP X20, X19, [X31 + 0xF0]
	0x03A1DFE8 ADRP X22, 0x9C4000
	0x03A1DFEC LDRB W8, [X22 + 0xFEC]
	0x03A1DFF0 MOV V8.16B, V0.16B
	0x03A1DFF4 MOV X19, X2
	0x03A1DFF8 MOV X21, X1
	0x03A1DFFC MOV X20, X0
	0x03A1E000 TBNZ X8, 0x0, 0x3A1E024
	0x03A1E004 ADRP X0, 0x736000
	0x03A1E008 LDR X0, [X0 + 0x660]
	0x03A1E00C BL 0x1C16CF4
	0x03A1E010 ADRP X0, 0x736000
	0x03A1E014 LDR X0, [X0 + 0x658]
	0x03A1E018 BL 0x1C16CF4
	0x03A1E01C MOVZ W8, 0x1
	0x03A1E020 STRB W8, [X22 + 0xFEC]
	0x03A1E024 MOVI V0.2D, 0x0
	0x03A1E028 STR W31, [X31 + 0xB0]
	0x03A1E02C STP V0, V0, [X31 + 0x90]
	0x03A1E030 STR V0, [X31 + 0x8]
	0x03A1E034 CBZ X20, 0x3A1E410
	0x03A1E038 ADRP X22, 0x736000
	0x03A1E03C LDR X8, [X20]
	0x03A1E040 LDR X22, [X22 + 0x660]
	0x03A1E044 LDRH W9, [X8 + 0x12E]
	0x03A1E048 LDR X1, [X22]
	0x03A1E04C CBZ X9, 0x3A1E070
	0x03A1E050 LDR X10, [X8 + 0xB0]
	0x03A1E054 ADD X10, X10, 0x8
	0x03A1E058 LDUR X11, [X10 - 0x8]
	0x03A1E05C CMP X11, X1

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+64], X30
	003 Move [X31+72], X27
	004 Move [X31+80], X26
	005 Move [X31+88], X25
	006 Move [X31+96], X24
	007 Move [X31+104], X23
	008 Move [X31+112], X22
	009 Move [X31+120], X21
	010 Move [X31+128], X20
	011 Move [X31+136], X19
	012 Move X27, 0x9C5000
	013 Move X26, 0x738000
	014 Move W8, [X27+4064]
	015 Move X26, [X26+16]
	016 Move X19, X6
	017 Move X24, X5
	018 Move W20, W4
	019 Move W22, W3
	020 Move W23, W2
	021 Move X25, X1
	022 Move X21, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {35}
	027 Move X0, 0x738000
	028 Move X0, [X0+16]
	029 Call 0x1C17CF4
	030 Move X0, 0x738000
	031 Move X0, [X0+1856]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X27+4064], W8
	035 Move [X21+224], X25
	036 Move V1, [X24+256]
	037 Move V0, [X24+272]
	038 Move W8, [X24+288]
	039 Move V2, [X24+15]
	040 Move X24, 0x738000
	041 Move X24, [X24+1856]
	042 Add X0, X31, 0
	043 Move W1, W31
	044 Move X2, X31
	045 Move [X31+48], W8
	046 Move [X31+16], V1
	047 Move [X31+24], V0
	048 Move [X31], V2
	049 Move [X31], W23
	050 Move [X31+4], W22
	051 Call RenderTextureDescriptor.set_depthBufferBits, X0, X1
	052 Move X0, [X26]
	053 Add X21, X21, 232
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X6, [X24]
	059 Add X1, X31, 0
	060 Move S0, W31
	061 Move W3, 1
	062 Move W5, 1
	063 Move X0, X21
	064 Move W2, W20
	065 Move W4, W31
	066 Move X7, X31
	067 Call RenderingUtils.ReAllocateIfNeeded, X0, X1, X2, X3, X4, X5, V0, X6
	068 Move X8, [X21]
	069 Move X22, [X31+112]
	070 Move X21, [X31+120]
	071 Move X24, [X31+96]
	072 Move X23, [X31+104]
	073 Move X26, [X31+80]
	074 Move X25, [X31+88]
	075 Move [X19], X8
	076 Move X20, [X31+128]
	077 Move X19, [X31+136]
	078 Move X30, [X31+64]
	079 Move X27, [X31+72]
	080 Add X31, X31, 144
	081 Return 

Method: System.Void Dispose()

Disassembly:
	0x03A1E060 B.EQ 0x3A1E080
	0x03A1E064 SUBS X9, X9, 0x1
	0x03A1E068 ADD X10, X10, 0x10
	0x03A1E06C B.NE 0x3A1E058
	0x03A1E070 MOV X0, X20

ISIL:
	001 Move X0, [X0+232]
	002 Compare X0, 0
	003 JumpIfEqual {7}
	004 Move X1, X31
	005 Call RTHandle.Release, X0
	006 Return 
	007 Return 

Method: System.Void Execute(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.RenderingData renderingData)

Disassembly:
	0x03A1E074 MOV W2, W31
	0x03A1E078 BL 0x1C5C788
	0x03A1E07C B 0x3A1E08C
	0x03A1E080 LDRSW X9, [X10]
	0x03A1E084 ADD X8, X8, X9, 0x4, LSL
	0x03A1E088 ADD X0, X8, 0x138
	0x03A1E08C LDP X8, X1, [X0]
	0x03A1E090 MOV X0, X20
	0x03A1E094 BLR X8
	0x03A1E098 CBZ X0, 0x3A1E410
	0x03A1E09C LDR V0, [X0 + 0x124]
	0x03A1E0A0 FCMP S0, S8
	0x03A1E0A4 B.EQ 0x3A1E3F8
	0x03A1E0A8 LDR X8, [X20]
	0x03A1E0AC LDR X1, [X22]
	0x03A1E0B0 LDRH W9, [X8 + 0x12E]
	0x03A1E0B4 CBZ X9, 0x3A1E0D8
	0x03A1E0B8 LDR X10, [X8 + 0xB0]
	0x03A1E0BC ADD X10, X10, 0x8
	0x03A1E0C0 LDUR X11, [X10 - 0x8]
	0x03A1E0C4 CMP X11, X1
	0x03A1E0C8 B.EQ 0x3A1E0E8
	0x03A1E0CC SUBS X9, X9, 0x1
	0x03A1E0D0 ADD X10, X10, 0x10
	0x03A1E0D4 B.NE 0x3A1E0C0
	0x03A1E0D8 MOV X0, X20
	0x03A1E0DC MOV W2, W31
	0x03A1E0E0 BL 0x1C5C788
	0x03A1E0E4 B 0x3A1E0F4
	0x03A1E0E8 LDRSW X9, [X10]
	0x03A1E0EC ADD X8, X8, X9, 0x4, LSL
	0x03A1E0F0 ADD X0, X8, 0x138
	0x03A1E0F4 LDP X8, X1, [X0]
	0x03A1E0F8 MOV X0, X20
	0x03A1E0FC BLR X8
	0x03A1E100 CBZ X0, 0x3A1E410
	0x03A1E104 LDRB W8, [X0 + 0x120]
	0x03A1E108 CBZ W8, 0x3A1E17C
	0x03A1E10C LDR X8, [X20]
	0x03A1E110 LDR X1, [X22]
	0x03A1E114 LDRH W9, [X8 + 0x12E]
	0x03A1E118 CBZ X9, 0x3A1E13C
	0x03A1E11C LDR X10, [X8 + 0xB0]
	0x03A1E120 ADD X10, X10, 0x8
	0x03A1E124 LDUR X11, [X10 - 0x8]
	0x03A1E128 CMP X11, X1
	0x03A1E12C B.EQ 0x3A1E14C
	0x03A1E130 SUBS X9, X9, 0x1
	0x03A1E134 ADD X10, X10, 0x10
	0x03A1E138 B.NE 0x3A1E124
	0x03A1E13C MOV X0, X20
	0x03A1E140 MOV W2, W31
	0x03A1E144 BL 0x1C5C788
	0x03A1E148 B 0x3A1E158
	0x03A1E14C LDRSW X9, [X10]
	0x03A1E150 ADD X8, X8, X9, 0x4, LSL
	0x03A1E154 ADD X0, X8, 0x138
	0x03A1E158 LDP X8, X1, [X0]
	0x03A1E15C MOV X0, X20
	0x03A1E160 BLR X8
	0x03A1E164 CBZ X0, 0x3A1E410
	0x03A1E168 CBZ X19, 0x3A1E410
	0x03A1E16C LDR W1, [X0 + 0x130]
	0x03A1E170 MOV X0, X19
	0x03A1E174 MOV X2, X31
	0x03A1E178 BL 0x3C4CBB0
	0x03A1E17C LDR X8, [X20]
	0x03A1E180 LDR X1, [X22]
	0x03A1E184 LDRH W9, [X8 + 0x12E]
	0x03A1E188 CBZ X9, 0x3A1E1AC
	0x03A1E18C LDR X10, [X8 + 0xB0]
	0x03A1E190 ADD X10, X10, 0x8
	0x03A1E194 LDUR X11, [X10 - 0x8]
	0x03A1E198 CMP X11, X1
	0x03A1E19C B.EQ 0x3A1E1BC
	0x03A1E1A0 SUBS X9, X9, 0x1
	0x03A1E1A4 ADD X10, X10, 0x10
	0x03A1E1A8 B.NE 0x3A1E194
	0x03A1E1AC MOV X0, X20
	0x03A1E1B0 MOV W2, W31
	0x03A1E1B4 BL 0x1C5C788
	0x03A1E1B8 B 0x3A1E1C8
	0x03A1E1BC LDRSW X9, [X10]
	0x03A1E1C0 ADD X8, X8, X9, 0x4, LSL
	0x03A1E1C4 ADD X0, X8, 0x138
	0x03A1E1C8 LDP X8, X1, [X0]
	0x03A1E1CC MOV X0, X20
	0x03A1E1D0 BLR X8
	0x03A1E1D4 CBZ X0, 0x3A1E410
	0x03A1E1D8 MOVZ W8, 0x1
	0x03A1E1DC STRB W8, [X0 + 0x120]
	0x03A1E1E0 LDR X8, [X20]
	0x03A1E1E4 LDR X1, [X22]
	0x03A1E1E8 LDRH W9, [X8 + 0x12E]
	0x03A1E1EC CBZ X9, 0x3A1E210
	0x03A1E1F0 LDR X10, [X8 + 0xB0]
	0x03A1E1F4 ADD X10, X10, 0x8
	0x03A1E1F8 LDUR X11, [X10 - 0x8]
	0x03A1E1FC CMP X11, X1
	0x03A1E200 B.EQ 0x3A1E220
	0x03A1E204 SUBS X9, X9, 0x1
	0x03A1E208 ADD X10, X10, 0x10
	0x03A1E20C B.NE 0x3A1E1F8

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x9C4000
	009 Move X23, 0x737000
	010 Move W8, [X21+4065]
	011 Move X23, [X23+1848]
	012 Move X20, X2
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x6FE000
	019 Move X0, [X0+2296]
	020 Call 0x1C17CF4
	021 Move X0, 0x737000
	022 Move X0, [X0+1848]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+4065], W8
	026 Move X0, [X23]
	027 Move [X31+8], W31
	028 Move X21, 0x6FE000
	029 Move X20, [X20]
	030 Move W8, [X0+224]
	031 Move X21, [X21+2296]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X23]
	036 Move X8, [X0+184]
	037 Add X0, X31, 8
	038 Move X1, X20
	039 Move X3, X31
	040 Move X2, [X8]
	041 Call ProfilingScope..ctor, X0, X1, X2
	042 Move X0, [X21]
	043 Move X21, [X19+232]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move S0, W31
	049 Move S1, W31
	050 Move S2, W31
	051 Move S3, W31
	052 Move W2, 2
	053 Move TEMP, 0
	054 Not TEMP
	055 Move W6, TEMP
	056 Move TEMP, 0
	057 Not TEMP
	058 Move W7, TEMP
	059 Move X0, X20
	060 Move X1, X21
	061 Move W3, W31
	062 Move W4, W31
	063 Move W5, W31
	064 Move [X31], X31
	065 Call CoreUtils.SetRenderTarget, X0, X1, X2, X3, X4, X5, X6, X7, X8
	066 Move X0, [X23]
	067 Move X22, [X19+224]
	068 Move X21, [X19+232]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {74}
	072 Call 0x1C17DFC
	073 Move X0, [X23]
	074 Move X8, [X0+184]
	075 Move X4, [X8+8]
	076 Move X0, X19
	077 Move X1, X20
	078 Move X2, X22
	079 Move X3, X21
	080 Move W5, W31
	081 Move X6, X31
	082 Call ScriptableRenderPass.Blit, X0, X1, X2, X3, X4, X5
	083 Add X0, X31, 8
	084 Move X1, X31
	085 Call ProfilingScope.Dispose, X0
	086 Move X20, [X31+48]
	087 Move X19, [X31+56]
	088 Move X22, [X31+32]
	089 Move X21, [X31+40]
	090 Move X30, [X31+16]
	091 Move X23, [X31+24]
	092 Add X31, X31, 64
	093 Return 
	094 Move X19, X0
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X0, X19
	097 Call 0x3EB2AD0
	098 Move X20, [X0]
	099 Call 0x3EB2AE0
	100 Add X0, X31, 8
	101 Move X1, X31
	102 Call ProfilingScope.Dispose, X0
	103 Compare X20, 0
	104 JumpIfEqual {86}
	105 Move X0, X20
	106 Call 0x1C17F18
	107 Move X20, X31
	108 Move X19, X0
	109 Add X0, X31, 8
	110 Move X1, X31
	111 Call ProfilingScope.Dispose, X0
	112 Compare X20, 0
	113 JumpIfNotEqual {116}
	114 Move X0, X19
	115 Call 0x1D2D690
	116 Move X0, X20
	117 Call 0x1C17F18
	118 Call 0x1991590

Method: System.Void .cctor()

Disassembly:
	0x03A1E210 MOV X0, X20
	0x03A1E214 MOV W2, W31
	0x03A1E218 BL 0x1C5C788
	0x03A1E21C B 0x3A1E22C
	0x03A1E220 LDRSW X9, [X10]
	0x03A1E224 ADD X8, X8, X9, 0x4, LSL
	0x03A1E228 ADD X0, X8, 0x138
	0x03A1E22C LDP X8, X1, [X0]
	0x03A1E230 MOV X0, X20
	0x03A1E234 BLR X8
	0x03A1E238 CBZ X0, 0x3A1E410
	0x03A1E23C ADRP X23, 0x736000
	0x03A1E240 LDR X23, [X23 + 0x658]
	0x03A1E244 STR S8, [X0 + 0x124]
	0x03A1E248 LDP S0, S1, [X21 + 0xF0]
	0x03A1E24C MOVZ W8, 0x7F800000
	0x03A1E250 FMOV S2, W8
	0x03A1E254 MOVZ W9, 0x80000000
	0x03A1E258 SCVTF S0, S0
	0x03A1E25C SCVTF S1, S1
	0x03A1E260 FMUL S0, S0, S8
	0x03A1E264 FMUL S1, S1, S8
	0x03A1E268 FCVTZS W8, S0
	0x03A1E26C FCMP S0, S2
	0x03A1E270 FCVTZS W10, S1
	0x03A1E274 CSEL W1, W9, W8, EQ
	0x03A1E278 FCMP S1, S2
	0x03A1E27C CSEL W2, W9, W10, EQ
	0x03A1E280 ADD X0, X31, 0x80
	0x03A1E284 MOV X3, X31
	0x03A1E288 BL 0x3C227F4
	0x03A1E28C LDR X0, [X23]
	0x03A1E290 LDR W8, [X0 + 0xE0]
	0x03A1E294 CBNZ W8, 0x3A1E29C
	0x03A1E298 BL 0x1C16DFC
	0x03A1E29C BL 0x3A1DECC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x9C4000
	007 Move X22, 0x733000
	008 Move X19, 0x737000
	009 Move X20, 0x737000
	010 Move W8, [X21+4066]
	011 Move X22, [X22+1432]
	012 Move X19, [X19+1864]
	013 Move X20, [X20+1848]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x733000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move X0, 0x737000
	022 Move X0, [X0+1848]
	023 Call 0x1C17CF4
	024 Move X0, 0x737000
	025 Move X0, [X0+1864]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+4066], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move X2, X31
	033 Move X19, X0
	034 Call ProfilingSampler..ctor, X0, X1
	035 Move X8, [X20]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X8, [X8+184]
	039 Move [X8], X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+48]
	043 Return 

