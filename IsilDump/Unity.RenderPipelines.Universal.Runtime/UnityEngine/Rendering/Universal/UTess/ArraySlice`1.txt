Type: UnityEngine.Rendering.Universal.UTess.ArraySlice`1

Method: System.Void .ctor(Unity.Collections.NativeArray`1<T> array, System.Int32 start, System.Int32 length)

Disassembly:
	0x02B8D120 MOV X0, X1
	0x02B8D124 BL 0x1C5C684
	0x02B8D128 MOV X1, X0
	0x02B8D12C CBZ X20, 0x2B8D1EC
	0x02B8D130 LDR X8, [X20]
	0x02B8D134 LDRH W9, [X8 + 0x12E]
	0x02B8D138 CBZ X9, 0x2B8D15C
	0x02B8D13C LDR X10, [X8 + 0xB0]
	0x02B8D140 ADD X10, X10, 0x8
	0x02B8D144 LDUR X11, [X10 - 0x8]
	0x02B8D148 CMP X11, X1
	0x02B8D14C B.EQ 0x2B8D16C
	0x02B8D150 SUBS X9, X9, 0x1
	0x02B8D154 ADD X10, X10, 0x10
	0x02B8D158 B.NE 0x2B8D144
	0x02B8D15C MOV X0, X20
	0x02B8D160 MOV W2, W31
	0x02B8D164 BL 0x1C5C788
	0x02B8D168 B 0x2B8D178
	0x02B8D16C LDRSW X9, [X10]
	0x02B8D170 ADD X8, X8, X9, 0x4, LSL
	0x02B8D174 ADD X0, X8, 0x138
	0x02B8D178 LDR X8, [X19 + 0x20]
	0x02B8D17C LDR X2, [X0 + 0x8]
	0x02B8D180 LDR X8, [X8 + 0xC0]
	0x02B8D184 LDR X3, [X8 + 0x38]
	0x02B8D188 MOV X0, X24
	0x02B8D18C MOV X1, X20
	0x02B8D190 BL 0x2955F74
	0x02B8D194 LDR X8, [X19 + 0x20]
	0x02B8D198 LDR X8, [X8 + 0xC0]
	0x02B8D19C LDR X0, [X8 + 0x48]
	0x02B8D1A0 LDRB W8, [X0 + 0x135]
	0x02B8D1A4 TBNZ X8, 0x0, 0x2B8D1AC
	0x02B8D1A8 BL 0x1C5C684
	0x02B8D1AC LDR W8, [X0 + 0xE0]
	0x02B8D1B0 CBNZ W8, 0x2B8D1B8
	0x02B8D1B4 BL 0x1C16DFC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X5+32]
	009 Move W19, W4
	010 Move W20, W3
	011 Move X22, X2
	012 Move W9, [X8+309]
	013 Move X23, X1
	014 Move X21, X0
	015 Move TEMP, X9
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {23}
	019 Move X0, X8
	020 Move X24, X5
	021 Call 0x1C5D684
	022 Move X8, [X24+32]
	023 Move W9, 4
	024 Move [X21+8], W9
	025 Move W9, [X8+309]
	026 Move TEMP, X9
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {33}
	030 Move X0, X8
	031 Call 0x1C5D684
	032 Move X8, X0
	033 Move X8, [X8+192]
	034 Move X0, X23
	035 Move X1, X22
	036 Move X2, [X8+24]
	037 Call NativeArrayUnsafeUtility.GetUnsafePtr, X0
	038 Move W8, [X21+8]
	039 Move [X21+12], W19
	040 Move X24, [X31+16]
	041 Move X23, [X31+24]
	042 Multiply W8, W8, W20
	043 Add X8, X0, W8
	044 Move [X21], X8
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X22, [X31+32]
	048 Move X21, [X31+40]
	049 Move X30, [X31+64]
	050 Return 

Method: System.Boolean Equals(UnityEngine.Rendering.Universal.UTess.ArraySlice`1<T> other)

Disassembly:
	0x02B8D1B8 LDR X8, [X19 + 0x20]
	0x02B8D1BC LDR X8, [X8 + 0xC0]
	0x02B8D1C0 LDR X4, [X8 + 0x40]
	0x02B8D1C4 MOV X0, X23
	0x02B8D1C8 MOV W1, W22
	0x02B8D1CC MOV W2, W21
	0x02B8D1D0 MOV X3, X24
	0x02B8D1D4 BL 0x2B8D898
	0x02B8D1D8 LDP X20, X19, [X31 + 0x30]
	0x02B8D1DC LDP X22, X21, [X31 + 0x20]
	0x02B8D1E0 LDP X24, X23, [X31 + 0x10]
	0x02B8D1E4 LDR X30, [X31], #0x40
	0x02B8D1E8 RET

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W8, [X0+8]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move W8, [X0+12]
	006 Move X9, X2
	007 ShiftRight X9, 32
	008 And X9, X9, 0x7FFFFFFF
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CSET not yet implemented."
	011 Return X0
	012 Move W0, W31
	013 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x02B8D1EC BL 0x1C16F20
	0x02B8D1F0 MOV X21, X0
	0x02B8D1F4 MOV X20, X31
	0x02B8D1F8 B 0x2B8D200
	0x02B8D1FC MOV X21, X0
	0x02B8D200 CMP W1, 0x1
	0x02B8D204 B.NE 0x2B8D308
	0x02B8D208 MOV X0, X21
	0x02B8D20C BL 0x3EB1AD0
	0x02B8D210 MOV X21, X0
	0x02B8D214 ADRP X0, 0x1570000
	0x02B8D218 LDR X0, [X0 + 0xF78]
	0x02B8D21C BL 0x1C16D08
	0x02B8D220 LDR X8, [X21]
	0x02B8D224 LDR X1, [X8]
	0x02B8D228 BL 0x1C17270
	0x02B8D22C TBZ X0, 0x0, 0x2B8D250
	0x02B8D230 BL 0x3EB1AE0
	0x02B8D234 MOV X0, X20
	0x02B8D238 LDP X20, X19, [X31 + 0x30]
	0x02B8D23C LDP X22, X21, [X31 + 0x20]
	0x02B8D240 LDP X24, X23, [X31 + 0x10]
	0x02B8D244 MOV X1, X31
	0x02B8D248 LDR X30, [X31], #0x40
	0x02B8D24C B 0x335DD1C
	0x02B8D250 ADRP X0, 0x158F000
	0x02B8D254 LDR X0, [X0 + 0xBB8]
	0x02B8D258 BL 0x1C16D08
	0x02B8D25C LDR X8, [X21]
	0x02B8D260 LDR X1, [X8]
	0x02B8D264 BL 0x1C17270
	0x02B8D268 TBZ X0, 0x0, 0x2B8D27C
	0x02B8D26C LDR X19, [X21]
	0x02B8D270 BL 0x3EB1AE0
	0x02B8D274 MOV X0, X19
	0x02B8D278 BL 0x1C16F18
	0x02B8D27C ADRP X0, 0x1566000
	0x02B8D280 LDR X0, [X0 + 0x7D0]
	0x02B8D284 BL 0x1C16D08
	0x02B8D288 LDR X8, [X21]
	0x02B8D28C LDR X1, [X8]
	0x02B8D290 BL 0x1C17270
	0x02B8D294 TBZ X0, 0x0, 0x2B8D2E0
	0x02B8D298 LDR X20, [X21]
	0x02B8D29C BL 0x3EB1AE0
	0x02B8D2A0 ADRP X0, 0x1566000
	0x02B8D2A4 LDR X0, [X0 + 0x5B0]
	0x02B8D2A8 BL 0x1C16D08
	0x02B8D2AC BL 0x1C16F10
	0x02B8D2B0 MOV X21, X0
	0x02B8D2B4 ADRP X0, 0x158F000
	0x02B8D2B8 LDR X0, [X0 + 0xBC0]
	0x02B8D2BC BL 0x1C16D08
	0x02B8D2C0 MOV X1, X0
	0x02B8D2C4 MOV X0, X21
	0x02B8D2C8 MOV X2, X20
	0x02B8D2CC MOV X3, X31
	0x02B8D2D0 BL 0x337DF40

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {70}
	007 Move X19, X0
	008 Move X0, [X2+32]
	009 Move X20, X2
	010 Move X21, X1
	011 Move W8, [X0+309]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {17}
	016 Call 0x1C5D684
	017 Move X8, [X0+192]
	018 Move X0, [X8+8]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move X8, [X21]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, [X20+32]
	028 Move W8, [X0+309]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {34}
	033 Call 0x1C5D684
	034 Move X8, [X0+192]
	035 Move X1, [X8+8]
	036 Move W8, [X1+309]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {44}
	041 Move X0, X1
	042 Call 0x1C5D684
	043 Move X1, X0
	044 Move X8, [X21]
	045 Move X9, [X1+64]
	046 Move X0, X21
	047 Move X8, [X8+64]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Call 0x1C17E08
	050 Move X8, X0
	051 Move X0, [X20+32]
	052 Move X21, [X8]
	053 Move X20, [X8+8]
	054 Move W9, [X0+309]
	055 Move TEMP, X9
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {60}
	059 Call 0x1C5D684
	060 Move X8, [X19]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move W8, [X19+8]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move W8, [X19+12]
	065 Move X9, X20
	066 ShiftRight X9, 32
	067 And X9, X9, 0x7FFFFFFF
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction CSET not yet implemented."
	070 Move W0, W31
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move X30, [X31+32]
	074 Move X21, [X31+40]
	075 Return X0
	076 Call 0x1C181E0

Method: System.Int32 GetHashCode()

Disassembly:
	0x02B8D2D4 MOV X0, X21
	0x02B8D2D8 MOV X1, X19
	0x02B8D2DC BL 0x1C16DEC
	0x02B8D2E0 MOVZ W0, 0x8
	0x02B8D2E4 BL 0x3EB1AF0
	0x02B8D2E8 LDR X8, [X21]
	0x02B8D2EC STR X8, [X0]
	0x02B8D2F0 ADRP X1, 0x1327000

ISIL:
	001 Move W8, [X0]
	002 Move W9, [X0+8]
	003 Move W10, [X0+12]
	004 Move W11, 397
	005 Multiply W8, W8, W11
	006 Xor W8, W8, W9
	007 Multiply W8, W8, W11
	008 Xor W0, W8, W10
	009 Return X0

Method: System.Boolean op_Equality(UnityEngine.Rendering.Universal.UTess.ArraySlice`1<T> left, UnityEngine.Rendering.Universal.UTess.ArraySlice`1<T> right)

Disassembly:
	0x02B8D2F4 ADD X1, X1, 0xE58
	0x02B8D2F8 MOV X2, X31
	0x02B8D2FC BL 0x3EB1B00
	0x02B8D300 MOV X21, X0
	0x02B8D304 BL 0x3EB1AE0
	0x02B8D308 MOV X0, X21
	0x02B8D30C BL 0x1D2C690
	0x02B8D310 BL 0x1990590
	0x02B8D314 STR X30, [X31 - 0x40]!
	0x02B8D318 STP X24, X23, [X31 + 0x10]
	0x02B8D31C STP X22, X21, [X31 + 0x20]
	0x02B8D320 STP X20, X19, [X31 + 0x30]
	0x02B8D324 MOV X19, X6
	0x02B8D328 MOV X24, X5
	0x02B8D32C MOV X20, X4
	0x02B8D330 MOV W21, W3
	0x02B8D334 MOV W22, W2
	0x02B8D338 MOV X23, X1
	0x02B8D33C CBNZ X5, 0x2B8D354
	0x02B8D340 LDR X8, [X19 + 0x20]
	0x02B8D344 LDR X8, [X8 + 0xC0]
	0x02B8D348 LDR X0, [X8 + 0x8]
	0x02B8D34C BL 0x2900278
	0x02B8D350 MOV X24, X0
	0x02B8D354 LDR X8, [X19 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X4+32]
	007 Move X19, X3
	008 Move X21, X2
	009 Move X20, X1
	010 Move W9, [X8+309]
	011 Move X22, X0
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {18}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move W0, W31
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X8, X20
	022 ShiftRight X8, 32
	023 And X8, X8, 0x7FFFFFFF
	024 Move X9, X19
	025 ShiftRight X9, 32
	026 And X9, X9, 0x7FFFFFFF
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CSET not yet implemented."
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Return X0

Method: System.Boolean op_Inequality(UnityEngine.Rendering.Universal.UTess.ArraySlice`1<T> left, UnityEngine.Rendering.Universal.UTess.ArraySlice`1<T> right)

Disassembly:
	0x02B8D358 LDR X8, [X8 + 0xC0]
	0x02B8D35C LDR X0, [X8 + 0x48]
	0x02B8D360 LDRB W8, [X0 + 0x135]
	0x02B8D364 TBNZ X8, 0x0, 0x2B8D36C
	0x02B8D368 BL 0x1C5C684
	0x02B8D36C LDR W8, [X0 + 0xE0]
	0x02B8D370 CBNZ W8, 0x2B8D378
	0x02B8D374 BL 0x1C16DFC
	0x02B8D378 LDR X8, [X19 + 0x20]
	0x02B8D37C LDR X8, [X8 + 0xC0]
	0x02B8D380 LDR X5, [X8 + 0x58]
	0x02B8D384 MOV X0, X23
	0x02B8D388 MOV W1, W22
	0x02B8D38C MOV W2, W21
	0x02B8D390 MOV X3, X20
	0x02B8D394 MOV X4, X24
	0x02B8D398 BL 0x2B8D63C
	0x02B8D39C LDP X20, X19, [X31 + 0x30]
	0x02B8D3A0 LDP X22, X21, [X31 + 0x20]
	0x02B8D3A4 LDP X24, X23, [X31 + 0x10]
	0x02B8D3A8 LDR X30, [X31], #0x40
	0x02B8D3AC RET
	0x02B8D3B0 B 0x2B8D3B8
	0x02B8D3B4 B 0x2B8D3B8
	0x02B8D3B8 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X4+32]
	007 Move X19, X3
	008 Move X21, X2
	009 Move X20, X1
	010 Move W9, [X8+309]
	011 Move X22, X0
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {18}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move W0, 1
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X8, X20
	022 ShiftRight X8, 32
	023 And X8, X8, 0x7FFFFFFF
	024 Move X9, X19
	025 ShiftRight X9, 32
	026 And X9, X9, 0x7FFFFFFF
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CSET not yet implemented."
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Return X0

Method: UnityEngine.Rendering.Universal.UTess.ArraySlice`1<T> ConvertExistingDataToArraySlice(System.Void* dataPointer, System.Int32 stride, System.Int32 length)

Disassembly:
	0x02B8D3BC CMP W1, 0x1
	0x02B8D3C0 B.NE 0x2B8D488
	0x02B8D3C4 MOV X0, X20
	0x02B8D3C8 BL 0x3EB1AD0
	0x02B8D3CC MOV X20, X0
	0x02B8D3D0 ADRP X0, 0x158F000
	0x02B8D3D4 LDR X0, [X0 + 0xBB8]
	0x02B8D3D8 BL 0x1C16D08
	0x02B8D3DC LDR X8, [X20]
	0x02B8D3E0 LDR X1, [X8]
	0x02B8D3E4 BL 0x1C17270
	0x02B8D3E8 TBZ X0, 0x0, 0x2B8D3FC
	0x02B8D3EC LDR X19, [X20]
	0x02B8D3F0 BL 0x3EB1AE0
	0x02B8D3F4 MOV X0, X19
	0x02B8D3F8 BL 0x1C16F18
	0x02B8D3FC ADRP X0, 0x1566000
	0x02B8D400 LDR X0, [X0 + 0x7D0]
	0x02B8D404 BL 0x1C16D08
	0x02B8D408 LDR X8, [X20]
	0x02B8D40C LDR X1, [X8]
	0x02B8D410 BL 0x1C17270
	0x02B8D414 TBZ X0, 0x0, 0x2B8D460
	0x02B8D418 LDR X20, [X20]
	0x02B8D41C BL 0x3EB1AE0
	0x02B8D420 ADRP X0, 0x1566000
	0x02B8D424 LDR X0, [X0 + 0x5B0]
	0x02B8D428 BL 0x1C16D08
	0x02B8D42C BL 0x1C16F10
	0x02B8D430 MOV X21, X0
	0x02B8D434 ADRP X0, 0x158F000
	0x02B8D438 LDR X0, [X0 + 0xBC0]
	0x02B8D43C BL 0x1C16D08
	0x02B8D440 MOV X1, X0
	0x02B8D444 MOV X0, X21
	0x02B8D448 MOV X2, X20
	0x02B8D44C MOV X3, X31
	0x02B8D450 BL 0x337DF40
	0x02B8D454 MOV X0, X21
	0x02B8D458 MOV X1, X19
	0x02B8D45C BL 0x1C16DEC
	0x02B8D460 MOVZ W0, 0x8
	0x02B8D464 BL 0x3EB1AF0
	0x02B8D468 LDR X8, [X20]
	0x02B8D46C STR X8, [X0]
	0x02B8D470 ADRP X1, 0x1327000
	0x02B8D474 ADD X1, X1, 0xE58
	0x02B8D478 MOV X2, X31
	0x02B8D47C BL 0x3EB1B00
	0x02B8D480 MOV X20, X0
	0x02B8D484 BL 0x3EB1AE0
	0x02B8D488 MOV X0, X20
	0x02B8D48C BL 0x1D2C690
	0x02B8D490 BL 0x1990590
	0x02B8D494 STP X30, X23, [X31 - 0x30]!
	0x02B8D498 STP X22, X21, [X31 + 0x10]
	0x02B8D49C STP X20, X19, [X31 + 0x20]
	0x02B8D4A0 LDR X8, [X4 + 0x20]
	0x02B8D4A4 MOV X19, X4
	0x02B8D4A8 MOV X20, X3
	0x02B8D4AC MOV W21, W2
	0x02B8D4B0 LDRB W9, [X8 + 0x135]
	0x02B8D4B4 MOV W22, W1
	0x02B8D4B8 MOV X23, X0
	0x02B8D4BC TBNZ X9, 0x0, 0x2B8D4CC

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move TEMP, X2
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {22}
	010 Move TEMP, X1
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {44}
	014 Move X20, [X31+32]
	015 Move X19, [X31+40]
	016 Move X30, [X31+16]
	017 Move X21, [X31+24]
	018 Move W1, W1
	019 NotImplemented "Instruction BFM not yet implemented."
	020 Add X31, X31, 48
	021 Return X0
	022 Move [X31+12], W2
	023 Move X0, 0x1567000
	024 Move X0, [X0+1880]
	025 Move X19, X3
	026 Call 0x1C17D08
	027 Add X1, X31, 12
	028 Call 0x1C17E04
	029 Move X20, X0
	030 Move X0, 0x1590000
	031 Move X0, [X0+320]
	032 Call 0x1C17D08
	033 Move X1, X20
	034 Move X2, X31
	035 Call String.Format, X0, X1
	036 Move X20, X0
	037 Move X0, 0x156F000
	038 Move X0, [X0+1400]
	039 Call 0x1C17D08
	040 Call 0x1C17F10
	041 Move X21, X0
	042 Move X0, 0x156F000
	043 Move X0, [X0+1896]
	044 Move [X31+8], W1
	045 Move X0, 0x1567000
	046 Move X0, [X0+1880]
	047 Move X19, X3
	048 Call 0x1C17D08
	049 Add X1, X31, 8
	050 Call 0x1C17E04
	051 Move X20, X0
	052 Move X0, 0x1590000
	053 Move X0, [X0+328]
	054 Call 0x1C17D08
	055 Move X1, X20
	056 Move X2, X31
	057 Call String.Format, X0, X1
	058 Move X20, X0
	059 Move X0, 0x156F000
	060 Move X0, [X0+1400]
	061 Call 0x1C17D08
	062 Call 0x1C17F10
	063 Move X21, X0
	064 Move X0, 0x1590000
	065 Move X0, [X0+336]
	066 Call 0x1C17D08
	067 Move X2, X0
	068 Move X0, X21
	069 Move X1, X20
	070 Move X3, X31
	071 Call ArgumentException..ctor, X0, X1, X2
	072 Move X0, X21
	073 Move X1, X19
	074 Call 0x1C17DEC

Method: T get_Item(System.Int32 index)

Disassembly:
	0x02B8D4C0 MOV X0, X8
	0x02B8D4C4 BL 0x1C5C684
	0x02B8D4C8 MOV X8, X0
	0x02B8D4CC LDR X8, [X8 + 0xC0]
	0x02B8D4D0 LDR X0, [X8 + 0x48]
	0x02B8D4D4 LDRB W8, [X0 + 0x135]
	0x02B8D4D8 TBNZ X8, 0x0, 0x2B8D4E0
	0x02B8D4DC BL 0x1C5C684
	0x02B8D4E0 LDR W8, [X0 + 0xE0]
	0x02B8D4E4 CBNZ W8, 0x2B8D4EC
	0x02B8D4E8 BL 0x1C16DFC
	0x02B8D4EC LDR X0, [X19 + 0x20]
	0x02B8D4F0 LDRB W8, [X0 + 0x135]
	0x02B8D4F4 TBNZ X8, 0x0, 0x2B8D4FC
	0x02B8D4F8 BL 0x1C5C684
	0x02B8D4FC LDR X8, [X0 + 0xC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, X0
	006 Move X0, [X2+32]
	007 Move X20, [X8]
	008 NotImplemented "Instruction LDRSW not yet implemented."
	009 Move W19, W1
	010 Move W9, [X0+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {16}
	015 Call 0x1C5D684
	016 Move X8, W19
	017 Multiply X8, X21, X8
	018 Move W0, [X8]
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 Return X0

Method: System.Void set_Item(System.Int32 index, T value)

Disassembly:
	0x02B8D500 LDR X4, [X8 + 0x40]
	0x02B8D504 MOV X0, X23
	0x02B8D508 MOV W1, W22
	0x02B8D50C MOV W2, W21
	0x02B8D510 MOV X3, X20
	0x02B8D514 BL 0x2B8D898
	0x02B8D518 LDP X20, X19, [X31 + 0x20]
	0x02B8D51C LDP X22, X21, [X31 + 0x10]
	0x02B8D520 LDP X30, X23, [X31], #0x30
	0x02B8D524 RET
	0x02B8D528 CMP W1, 0x1
	0x02B8D52C MOV X21, X0
	0x02B8D530 B.NE 0x2B8D630
	0x02B8D534 MOV X0, X21
	0x02B8D538 BL 0x3EB1AD0
	0x02B8D53C MOV X21, X0
	0x02B8D540 ADRP X0, 0x1570000
	0x02B8D544 LDR X0, [X0 + 0xF78]
	0x02B8D548 BL 0x1C16D08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, X0
	007 Move X0, [X3+32]
	008 Move X21, [X8]
	009 NotImplemented "Instruction LDRSW not yet implemented."
	010 Move W19, W2
	011 Move W9, [X0+309]
	012 Move W20, W1
	013 Move TEMP, X9
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {18}
	017 Call 0x1C5D684
	018 Move X8, W20
	019 Multiply X8, X22, X8
	020 Move [X8], W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 Return 

Method: System.Void* GetUnsafeReadOnlyPtr()

Disassembly:
	0x02B8D54C LDR X8, [X21]
	0x02B8D550 LDR X1, [X8]

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Void CopyTo(T[] array)

Disassembly:
	0x02B8D554 BL 0x1C17270
	0x02B8D558 TBZ X0, 0x0, 0x2B8D578
	0x02B8D55C BL 0x3EB1AE0
	0x02B8D560 MOV X0, X20
	0x02B8D564 LDP X20, X19, [X31 + 0x20]
	0x02B8D568 LDP X22, X21, [X31 + 0x10]
	0x02B8D56C MOV X1, X31
	0x02B8D570 LDP X30, X23, [X31], #0x30
	0x02B8D574 B 0x335DD1C
	0x02B8D578 ADRP X0, 0x158F000
	0x02B8D57C LDR X0, [X0 + 0xBB8]
	0x02B8D580 BL 0x1C16D08
	0x02B8D584 LDR X8, [X21]
	0x02B8D588 LDR X1, [X8]
	0x02B8D58C BL 0x1C17270
	0x02B8D590 TBZ X0, 0x0, 0x2B8D5A4
	0x02B8D594 LDR X19, [X21]
	0x02B8D598 BL 0x3EB1AE0
	0x02B8D59C MOV X0, X19
	0x02B8D5A0 BL 0x1C16F18
	0x02B8D5A4 ADRP X0, 0x1566000
	0x02B8D5A8 LDR X0, [X0 + 0x7D0]
	0x02B8D5AC BL 0x1C16D08
	0x02B8D5B0 LDR X8, [X21]
	0x02B8D5B4 LDR X1, [X8]
	0x02B8D5B8 BL 0x1C17270
	0x02B8D5BC TBZ X0, 0x0, 0x2B8D608
	0x02B8D5C0 LDR X20, [X21]
	0x02B8D5C4 BL 0x3EB1AE0
	0x02B8D5C8 ADRP X0, 0x1566000
	0x02B8D5CC LDR X0, [X0 + 0x5B0]
	0x02B8D5D0 BL 0x1C16D08
	0x02B8D5D4 BL 0x1C16F10
	0x02B8D5D8 MOV X21, X0
	0x02B8D5DC ADRP X0, 0x158F000
	0x02B8D5E0 LDR X0, [X0 + 0xBC0]
	0x02B8D5E4 BL 0x1C16D08
	0x02B8D5E8 MOV X1, X0
	0x02B8D5EC MOV X0, X21
	0x02B8D5F0 MOV X2, X20
	0x02B8D5F4 MOV X3, X31
	0x02B8D5F8 BL 0x337DF40
	0x02B8D5FC MOV X0, X21
	0x02B8D600 MOV X1, X19
	0x02B8D604 BL 0x1C16DEC
	0x02B8D608 MOVZ W0, 0x8
	0x02B8D60C BL 0x3EB1AF0
	0x02B8D610 LDR X8, [X21]
	0x02B8D614 STR X8, [X0]
	0x02B8D618 ADRP X1, 0x1327000
	0x02B8D61C ADD X1, X1, 0xE58

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, X1
	007 Move X20, X2
	008 Move X19, X0
	009 Move W1, 3
	010 Move X0, X8
	011 Move X2, X31
	012 Call GCHandle.Alloc, X0, X1
	013 Move [X31+8], X0
	014 Add X0, X31, 8
	015 Move X1, X31
	016 Call GCHandle.AddrOfPinnedObject, X0
	017 Move X8, [X20+32]
	018 Move X21, X0
	019 Move W9, [X8+309]
	020 Move TEMP, X9
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {26}
	024 Move X0, X8
	025 Call 0x1C5D684
	026 Move X0, X21
	027 Move X1, X31
	028 Call IntPtr.op_Explicit, X0
	029 Move X8, [X20+32]
	030 Move X21, X0
	031 Add X9, X8, 309
	032 NotImplemented "Instruction LDRH not yet implemented."
	033 Move TEMP, X9
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {42}
	037 Move X0, X8
	038 Call 0x1C5D684
	039 Move X8, [X20+32]
	040 Add X9, X8, 309
	041 NotImplemented "Instruction LDRH not yet implemented."
	042 Move X20, [X19]
	043 Move TEMP, X9
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {49}
	047 Move X0, X8
	048 Call 0x1C5D684
	049 Move W3, [X19+8]
	050 Move W5, [X19+12]
	051 Move W1, 4
	052 Move W4, 4
	053 Move X0, X21
	054 Move X2, X20
	055 Move X6, X31
	056 Call UnsafeUtility.MemCpyStride, X0, X1, X2, X3, X4, X5
	057 Add X0, X31, 8
	058 Move X1, X31
	059 Call GCHandle.Free, X0
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X30, [X31+16]
	063 Move X21, [X31+24]
	064 Add X31, X31, 48
	065 Return 

Method: T[] ToArray()

Disassembly:
	0x02B8D620 MOV X2, X31
	0x02B8D624 BL 0x3EB1B00
	0x02B8D628 MOV X21, X0
	0x02B8D62C BL 0x3EB1AE0
	0x02B8D630 MOV X0, X21
	0x02B8D634 BL 0x1D2C690
	0x02B8D638 BL 0x1990590
	0x02B8D63C STR X30, [X31 - 0x50]!
	0x02B8D640 STP X26, X25, [X31 + 0x10]
	0x02B8D644 STP X24, X23, [X31 + 0x20]
	0x02B8D648 STP X22, X21, [X31 + 0x30]
	0x02B8D64C STP X20, X19, [X31 + 0x40]
	0x02B8D650 ADD W8, W1, W2
	0x02B8D654 SUB W26, W8, 0x1
	0x02B8D658 MOV W19, W1
	0x02B8D65C CMP W26, W1
	0x02B8D660 B.GE 0x2B8D684
	0x02B8D664 ORN W24, W31, W19, 0x0
	0x02B8D668 MOV W0, W24
	0x02B8D66C LDP X20, X19, [X31 + 0x40]
	0x02B8D670 LDP X22, X21, [X31 + 0x30]
	0x02B8D674 LDP X24, X23, [X31 + 0x20]
	0x02B8D678 LDP X26, X25, [X31 + 0x10]
	0x02B8D67C LDR X30, [X31], #0x50
	0x02B8D680 RET
	0x02B8D684 MOV X23, X0
	0x02B8D688 CBZ X0, 0x2B8D764
	0x02B8D68C MOV X20, X5
	0x02B8D690 MOV X21, X4
	0x02B8D694 MOV X22, X3
	0x02B8D698 LDR W8, [X23 + 0x18]
	0x02B8D69C SUB W9, W26, W19
	0x02B8D6A0 ADD W24, W19, W9, 0x1, ASR
	0x02B8D6A4 CMP W24, W8
	0x02B8D6A8 B.CS 0x2B8D760
	0x02B8D6AC CBZ X21, 0x2B8D764
	0x02B8D6B0 LDR X0, [X20 + 0x20]
	0x02B8D6B4 ADD X8, X23, W24, 0x3, SXTW
	0x02B8D6B8 LDR X25, [X8 + 0x20]
	0x02B8D6BC LDRB W9, [X0 + 0x135]
	0x02B8D6C0 TBNZ X9, 0x0, 0x2B8D6C8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+32]
	006 Move X20, X1
	007 Move X19, X0
	008 Add X9, X8, 309
	009 NotImplemented "Instruction LDRH not yet implemented."
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, [X20+32]
	017 Add X9, X8, 309
	018 NotImplemented "Instruction LDRH not yet implemented."
	019 Move W21, [X19+12]
	020 Move TEMP, X9
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {27}
	024 Move X0, X8
	025 Call 0x1C5D684
	026 Move X8, X0
	027 Move X8, [X8+192]
	028 Move X0, [X8+104]
	029 Move W8, [X0+309]
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {35}
	034 Call 0x1C5D684
	035 Move W1, W21
	036 Call 0x1C17D6C
	037 Move X8, [X20+32]
	038 Move X20, X0
	039 Move W9, [X8+309]
	040 Move TEMP, X9
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {47}
	044 Move X0, X8
	045 Call 0x1C5D684
	046 Move X8, X0
	047 Move X8, [X8+192]
	048 Move X0, X19
	049 Move X1, X20
	050 Move X2, [X8+112]
	051 Call 0x2B8D554, X0, X1
	052 Move X0, X20
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Return X0

Method: System.Int32 get_Stride()

Disassembly:
	0x02B8D6C4 BL 0x1C5C684
	0x02B8D6C8 LDR X8, [X0 + 0xC0]

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: System.Int32 get_Length()

Disassembly:
	0x02B8D6CC LDR X1, [X8]
	0x02B8D6D0 LDRB W8, [X1 + 0x135]

ISIL:
	001 Move W0, [X0+12]
	002 Return X0

