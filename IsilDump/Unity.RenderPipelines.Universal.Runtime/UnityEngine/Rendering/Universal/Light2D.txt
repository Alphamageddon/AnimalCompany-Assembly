Type: UnityEngine.Rendering.Universal.Light2D

Method: UnityEngine.Rendering.Universal.LightUtility/LightMeshVertex[] get_vertices()

Disassembly:
	0x03A14154 STP X31, X31, [X31 + 0x150]
	0x03A14158 STP X31, X31, [X31 + 0x140]

ISIL:
	001 Move X0, [X0+152]
	002 Return X0

Method: System.Void set_vertices(UnityEngine.Rendering.Universal.LightUtility/LightMeshVertex[] value)

Disassembly:
	0x03A1415C STR X31, [X31 + 0x1F8]
	0x03A14160 STP X31, X31, [X31 + 0x130]

ISIL:
	001 Move [X0+152], X1
	002 Return 

Method: System.UInt16[] get_indices()

Disassembly:
	0x03A14164 STP X31, X31, [X31 + 0xF0]
	0x03A14168 STP X31, X31, [X31 + 0xE0]

ISIL:
	001 Move X0, [X0+160]
	002 Return X0

Method: System.Void set_indices(System.UInt16[] value)

Disassembly:
	0x03A1416C STP V0, V0, [X31 + 0x110]
	0x03A14170 STR V0, [X31 + 0x10]

ISIL:
	001 Move [X0+160], X1
	002 Return 

Method: System.Int32[] get_affectedSortingLayers()

Disassembly:
	0x03A14174 STP V0, V0, [X31 + 0xC0]
	0x03A14178 STR V0, [X31 + 0xB]

ISIL:
	001 Move X0, [X0+80]
	002 Return X0

Method: System.Int32 get_lightCookieSpriteInstanceID()

Disassembly:
	0x03A1417C BL 0x3C3086C
	0x03A14180 MOV X25, X0
	0x03A14184 MOVZ W0, 0xE240
	0x03A14188 MOV X26, X1
	0x03A1418C MOVK W0, 0x10000

ISIL:
	001 Move X0, [X0+88]
	002 Compare X0, 0
	003 JumpIfEqual {7}
	004 Move X1, X31
	005 Call Object.GetInstanceID, X0
	006 Return X0
	007 Return X0

Method: UnityEngine.BoundingSphere get_boundingSphere()

Disassembly:
	0x03A14190 MOV X1, X31
	0x03A14194 BL 0x3C30830
	0x03A14198 CBZ X24, 0x3A14BE0

ISIL:
	001 Move S0, [X0+208]
	002 Move S1, [X0+212]
	003 Move S2, [X0+216]
	004 Move S3, [X0+220]
	005 Return X0

Method: System.Void set_boundingSphere(UnityEngine.BoundingSphere value)

Disassembly:
	0x03A1419C ADRP X19, 0x740000
	0x03A141A0 LDR X19, [X19 + 0x528]
	0x03A141A4 LDR X23, [X24 + 0x18]

ISIL:
	001 Move [X0+208], S0
	002 Move [X0+216], S1
	003 Move [X0+216], S2
	004 Move [X0+224], S3
	005 Return 

Method: UnityEngine.Mesh get_lightMesh()

Disassembly:
	0x03A141A8 ADRP X21, 0x740000
	0x03A141AC ADD X0, X31, 0x180
	0x03A141B0 LDR X4, [X19]
	0x03A141B4 LDR X21, [X21 + 0x530]
	0x03A141B8 MOVZ W2, 0x2
	0x03A141BC MOVZ W3, 0x1
	0x03A141C0 MOV W1, W23
	0x03A141C4 BL 0x23FBF70
	0x03A141C8 LDR X4, [X21]
	0x03A141CC ADD X0, X31, 0x170
	0x03A141D0 MOVZ W2, 0x2
	0x03A141D4 MOVZ W3, 0x1
	0x03A141D8 MOV W1, W23
	0x03A141DC BL 0x23F8534
	0x03A141E0 CMP W23, 0x1
	0x03A141E4 B.LT 0x3A1423C
	0x03A141E8 AND X8, X23, 0x0
	0x03A141EC MOV X11, X31
	0x03A141F0 ADD X9, X24, 0x20
	0x03A141F4 MOVZ X10, 0x1
	0x03A141F8 SUB X12, X8, 0x1
	0x03A141FC MOVZ X13, 0x1
	0x03A14200 LDR X14, [X31 + 0x180]
	0x03A14204 CMP X12, X11
	0x03A14208 CSEL X15, X31, X13, EQ
	0x03A1420C ORR X15, X15, X11, 0x0
	0x03A14210 STR X15, [X14, X11, LSL #3]
	0x03A14214 LDR W14, [X24 + 0x18]
	0x03A14218 CMP X11, X14
	0x03A1421C B.CS 0x3A14BDC
	0x03A14220 LDR V0, [X9], #0xC
	0x03A14224 LDR X14, [X31 + 0x170]
	0x03A14228 ADD X13, X13, X10
	0x03A1422C STR D0, [X14, X11, LSL #3]
	0x03A14230 ADD X11, X11, 0x1
	0x03A14234 CMP X8, X11
	0x03A14238 B.NE 0x3A14200
	0x03A1423C STP X26, X25, [X31 + 0x40]
	0x03A14240 STR X22, [X31 + 0x58]
	0x03A14244 STR X20, [X31 + 0x38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x9CE000
	006 Move X20, 0x6E0000
	007 Move W8, [X21+4020]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x6E7000
	015 Move X0, [X0+1792]
	016 Call 0x1C17CF4
	017 Move X0, 0x6E0000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+4020], W8
	022 Move X0, [X20]
	023 Move X20, [X19+144]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X31
	029 Move X1, X20
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {44}
	036 Move X8, 0x6E7000
	037 Move X8, [X8+1792]
	038 Move X0, [X8]
	039 Call 0x1C17F10
	040 Move X1, X31
	041 Move X20, X0
	042 Call Mesh..ctor, X0
	043 Move [X19+144], X20
	044 Move X20, [X19+144]
	045 Move X0, X20
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Return X0

Method: System.Boolean get_hasCachedMesh()

Disassembly:
	0x03A14248 ADRP X8, 0x709000
	0x03A1424C LDR X8, [X8 + 0x138]
	0x03A14250 ADRP X23, 0x708000
	0x03A14254 LDR X23, [X23 + 0xD8]
	0x03A14258 LDR W9, [X31 + 0x188]
	0x03A1425C LDR X4, [X8]
	0x03A14260 ADRP X22, 0x740000
	0x03A14264 ADRP X20, 0x740000
	0x03A14268 LDR X22, [X22 + 0x168]
	0x03A1426C LDR X20, [X20 + 0x170]
	0x03A14270 UBFM W1, W9, 0x1D, 0x1C
	0x03A14274 ADD X0, X31, 0x160
	0x03A14278 MOVZ W2, 0x2
	0x03A1427C MOVZ W3, 0x1
	0x03A14280 BL 0x23D58AC
	0x03A14284 LDR W8, [X31 + 0x188]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+152]
	003 Compare X8, 0
	004 JumpIfEqual {16}
	005 Move W8, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move W0, W31
	008 Move X8, [X0+160]
	009 Compare X8, 0
	010 JumpIfEqual {16}
	011 Move W8, [X8+24]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 NotImplemented "Instruction CSET not yet implemented."
	014 Move X30, [X31+16]
	015 Return X0
	016 Call 0x1C17F20

Method: UnityEngine.Rendering.Universal.Light2D/LightType get_lightType()

Disassembly:
	0x03A14288 LDR X4, [X21]
	0x03A1428C ADD X0, X31, 0x150

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void set_lightType(UnityEngine.Rendering.Universal.Light2D/LightType value)

Disassembly:
	0x03A14290 MOVZ W2, 0x2
	0x03A14294 UBFM W1, W8, 0x1D, 0x1C
	0x03A14298 MOVZ W3, 0x1
	0x03A1429C BL 0x23F8534
	0x03A142A0 LDR W8, [X31 + 0x188]
	0x03A142A4 LDR X4, [X19]
	0x03A142A8 ADD X0, X31, 0x140
	0x03A142AC MOVZ W2, 0x2
	0x03A142B0 UBFM W1, W8, 0x1D, 0x1C
	0x03A142B4 MOVZ W3, 0x1
	0x03A142B8 ADD X19, X31, 0x140
	0x03A142BC BL 0x23FBF70
	0x03A142C0 LDR X0, [X23]
	0x03A142C4 STR X31, [X31 + 0x1F8]
	0x03A142C8 STR W31, [X31 + 0x13C]
	0x03A142CC LDP X23, X25, [X31 + 0x170]
	0x03A142D0 LDR W8, [X0 + 0xE0]
	0x03A142D4 LDP X26, X27, [X31 + 0x180]
	0x03A142D8 CBNZ W8, 0x3A142E0
	0x03A142DC BL 0x1C16DFC
	0x03A142E0 ADD X8, X31, 0x13C
	0x03A142E4 ADD X9, X31, 0x1F8
	0x03A142E8 ADD X5, X31, 0x150
	0x03A142EC ADD X6, X31, 0x1FC
	0x03A142F0 ADD X7, X31, 0x160
	0x03A142F4 MOVZ W0, 0x2
	0x03A142F8 MOV X1, X23
	0x03A142FC MOV X2, X25
	0x03A14300 MOV X3, X26

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x9CE000
	006 Move W8, [X21+4021]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x741000
	014 Move X0, [X0+1176]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+4021], W8
	018 Move W8, [X19+36]
	019 Move X21, 0x741000
	020 Move X21, [X21+1176]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X0, X19
	023 Move W1, W31
	024 Call Light2D.UpdateMesh, X0, X1
	025 Move [X19+36], W20
	026 Move X0, [X21]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Call Light2DManager.ErrorIfDuplicateGlobalLight, X0
	037 Return 

Method: System.Int32 get_blendStyleIndex()

Disassembly:
	0x03A145F4 LDR X8, [X8 + 0x4E0]
	0x03A145F8 ADRP X19, 0x740000

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_blendStyleIndex(System.Int32 value)

Disassembly:
	0x03A145FC LDR X19, [X19 + 0x520]
	0x03A14600 LDR W9, [X31 + 0x1FC]

ISIL:
	001 Move [X0+40], W1
	002 Return 

Method: System.Single get_shadowIntensity()

Disassembly:
	0x03A14604 LDR X4, [X8]
	0x03A14608 LDR X8, [X31 + 0x50]

ISIL:
	001 Move V0, [X0+128]
	002 Return V0

Method: System.Void set_shadowIntensity(System.Single value)

Disassembly:
	0x03A1460C LDR W10, [X0 + 0x18]
	0x03A14610 LDR W11, [X31 + 0x1F8]
	0x03A14614 MOVZ W12, 0x6
	0x03A14618 ADD W8, W9, W8
	0x03A1461C MOV X26, X0
	0x03A14620 MADD W9, W10, W12, W11
	0x03A14624 ADD W1, W8, W10

ISIL:
	001 Move S1, 1
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction FMIN not yet implemented."
	004 Move S1, W31
	005 NotImplemented "Instruction FCSEL not yet implemented."
	006 Move [X0+128], S0
	007 Return 

Method: System.Boolean get_shadowsEnabled()

Disassembly:
	0x03A14628 ADD X0, X31, 0xF0
	0x03A1462C MOVZ W2, 0x2

ISIL:
	001 Move W0, [X0+125]
	002 Return X0

Method: System.Void set_shadowsEnabled(System.Boolean value)

Disassembly:
	0x03A14630 MOVZ W3, 0x1
	0x03A14634 ADD W27, W9, 0x6
	0x03A14638 BL 0x23FF924

ISIL:
	001 And W8, W1, 1
	002 Move [X0+125], W8
	003 Return 

Method: System.Single get_shadowVolumeIntensity()

Disassembly:
	0x03A1463C LDR X4, [X19]
	0x03A14640 ADD X0, X31, 0xE0

ISIL:
	001 Move V0, [X0+136]
	002 Return V0

Method: System.Void set_shadowVolumeIntensity(System.Single value)

Disassembly:
	0x03A14644 MOVZ W2, 0x2
	0x03A14648 MOVZ W3, 0x1
	0x03A1464C MOV W1, W27
	0x03A14650 BL 0x23EB8B4
	0x03A14654 LDR W29, [X31 + 0x1F8]
	0x03A14658 CMP W29, 0x1
	0x03A1465C B.LT 0x3A1467C

ISIL:
	001 Move S1, 1
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction FMIN not yet implemented."
	004 Move S1, W31
	005 NotImplemented "Instruction FCSEL not yet implemented."
	006 Move [X0+136], S0
	007 Return 

Method: System.Boolean get_volumetricShadowsEnabled()

Disassembly:
	0x03A14660 LDR X8, [X31 + 0x160]
	0x03A14664 LDR X9, [X31 + 0xE0]

ISIL:
	001 Move W0, [X0+132]
	002 Return X0

Method: System.Void set_volumetricShadowsEnabled(System.Boolean value)

Disassembly:
	0x03A14668 MOV X10, X29
	0x03A1466C LDR W11, [X8], #0x4
	0x03A14670 SUBS X10, X10, 0x1

ISIL:
	001 And W8, W1, 1
	002 Move [X0+132], W8
	003 Return 

Method: UnityEngine.Color get_color()

Disassembly:
	0x03A14674 STRH W11, [X9], #0x2
	0x03A14678 B.NE 0x3A1466C
	0x03A1467C LDR W21, [X31 + 0x1FC]

ISIL:
	001 Move S0, [X0+48]
	002 Move S1, [X0+52]
	003 Move S2, [X0+56]
	004 Move S3, [X0+60]
	005 Return X0

Method: System.Void set_color(UnityEngine.Color value)

Disassembly:
	0x03A14680 ADRP X20, 0x70F000
	0x03A14684 LDR X20, [X20 + 0x8D0]
	0x03A14688 ADRP X19, 0xFFFFFFFFFD0D8000

ISIL:
	001 Move [X0+48], S0
	002 Move [X0+56], S1
	003 Move [X0+56], S2
	004 Move [X0+64], S3
	005 Return 

Method: System.Single get_intensity()

Disassembly:
	0x03A1468C CMP W21, 0x1
	0x03A14690 B.LT 0x3A146F8

ISIL:
	001 Move V0, [X0+64]
	002 Return V0

Method: System.Void set_intensity(System.Single value)

Disassembly:
	0x03A14694 LDR V0, [X19 + 0xBB]
	0x03A14698 MOV X23, X31

ISIL:
	001 Move [X0+64], S0
	002 Return 

Method: System.Single get_volumeOpacity()

Disassembly:
	0x03A1469C MOV X25, X31
	0x03A146A0 MOV X27, X31

ISIL:
	001 Move V0, [X0+68]
	002 Return V0

Method: System.Single get_volumeIntensity()

Disassembly:
	0x03A146A4 STR V0, [X31 + 0x6]
	0x03A146A8 LDR X8, [X31 + 0x150]

ISIL:
	001 Move V0, [X0+68]
	002 Return V0

Method: System.Void set_volumeIntensity(System.Single value)

Disassembly:
	0x03A146AC FMOV S2, W31
	0x03A146B0 MOV X0, X31

ISIL:
	001 Move [X0+68], S0
	002 Return 

Method: System.Boolean get_volumeIntensityEnabled()

Disassembly:
	0x03A146B4 ADD X8, X8, X23
	0x03A146B8 LDP S0, S1, [X8]

ISIL:
	001 Move W0, [X0+72]
	002 Return X0

Method: System.Void set_volumeIntensityEnabled(System.Boolean value)

Disassembly:
	0x03A146BC BL 0x3887BE0
	0x03A146C0 LDR X8, [X31 + 0xF0]
	0x03A146C4 ADD X27, X27, 0x1

ISIL:
	001 And W8, W1, 1
	002 Move [X0+72], W8
	003 Return 

Method: UnityEngine.Sprite get_lightCookieSprite()

Disassembly:
	0x03A146C8 ADD X23, X23, 0x8
	0x03A146CC ADD X8, X8, X25
	0x03A146D0 STP S0, S1, [X8]
	0x03A146D4 LDR V0, [X31 + 0x6]
	0x03A146D8 STR S2, [X8 + 0x8]
	0x03A146DC STUR X31, [X8 + 0x1C]
	0x03A146E0 ADD X25, X25, 0x24

ISIL:
	001 Move W8, [X0+36]
	002 Move W9, 88
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W8, 96
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 Move X0, [X0]
	007 Return X0

Method: System.Void set_lightCookieSprite(UnityEngine.Sprite value)

Disassembly:
	0x03A146E4 STUR V0, [X8 + 0xC]
	0x03A146E8 LDRSW X21, [X31 + 0x1FC]

ISIL:
	001 Move [X0+88], X1
	002 Return 

Method: System.Single get_falloffIntensity()

Disassembly:
	0x03A146EC CMP X27, X21
	0x03A146F0 B.LT 0x3A146A8

ISIL:
	001 Move V0, [X0+44]
	002 Return V0

Method: System.Void set_falloffIntensity(System.Single value)

Disassembly:
	0x03A146F4 LDR W29, [X31 + 0x1F8]
	0x03A146F8 LDR X0, [X20]
	0x03A146FC LDR X20, [X31 + 0x50]
	0x03A14700 MOV W1, W20
	0x03A14704 BL 0x1C16D6C
	0x03A14708 CMP W20, 0x1
	0x03A1470C MOV X27, X0

ISIL:
	001 Move S1, 1
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction FMIN not yet implemented."
	004 Move S1, W31
	005 NotImplemented "Instruction FCSEL not yet implemented."
	006 Move [X0+44], S0
	007 Return 

Method: System.Boolean get_alphaBlendOnOverlap()

Disassembly:
	0x03A14710 B.LT 0x3A147A4
	0x03A14714 LDR V0, [X19 + 0xBB]
	0x03A14718 MOV X20, X31
	0x03A1471C ADD X23, X27, 0x20

ISIL:
	001 Move W8, [X0+112]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: UnityEngine.Rendering.Universal.Light2D/OverlapOperation get_overlapOperation()

Disassembly:
	0x03A14720 ADD X19, X24, 0x24
	0x03A14724 MOV W25, W21

ISIL:
	001 Move W0, [X0+112]
	002 Return X0

Method: System.Void set_overlapOperation(UnityEngine.Rendering.Universal.Light2D/OverlapOperation value)

Disassembly:
	0x03A14728 MOVZ W28, 0x24
	0x03A1472C STR V0, [X31 + 0x6]

ISIL:
	001 Move [X0+112], W1
	002 Return 

Method: System.Int32 get_lightOrder()

Disassembly:
	0x03A14730 LDR W8, [X24 + 0x18]
	0x03A14734 CMP X20, X8

ISIL:
	001 Move W0, [X0+104]
	002 Return X0

Method: System.Void set_lightOrder(System.Int32 value)

Disassembly:
	0x03A14738 B.CS 0x3A14BDC
	0x03A1473C LDP S0, S1, [X19 - 0x4]

ISIL:
	001 Move [X0+104], W1
	002 Return 

Method: System.Single get_normalMapDistance()

Disassembly:
	0x03A14740 FMOV S2, W31
	0x03A14744 MOV X0, X31

ISIL:
	001 Move V0, [X0+116]
	002 Return V0

Method: UnityEngine.Rendering.Universal.Light2D/NormalMapQuality get_normalMapQuality()

Disassembly:
	0x03A14748 ADD X22, X25, X20
	0x03A1474C BL 0x3887BE0

ISIL:
	001 Move W0, [X0+120]
	002 Return X0

Method: System.Boolean get_renderVolumetricShadows()

Disassembly:
	0x03A14750 LDR X8, [X31 + 0xF0]
	0x03A14754 NOP
	0x03A14758 SMADDL X8, X22, X28, X8
	0x03A1475C STP S0, S1, [X8]
	0x03A14760 LDR V0, [X31 + 0x6]
	0x03A14764 STR S2, [X8 + 0x8]
	0x03A14768 STUR X31, [X8 + 0x1C]
	0x03A1476C STUR V0, [X8 + 0xC]

ISIL:
	001 Move W8, [X0+132]
	002 Compare W8, 0
	003 JumpIfEqual {8}
	004 Move V0, [X0+136]
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Return X0
	008 Move W0, W31
	009 Return X0

Method: System.Void MarkForUpdate()

Disassembly:
	0x03A14770 CBZ X27, 0x3A14BE0
	0x03A14774 LDR W8, [X27 + 0x18]
	0x03A14778 CMP X20, X8

ISIL:
	001 Move W8, 1
	002 Move [X0+224], W8
	003 Return 

Method: System.Void CacheValues()

Disassembly:
	0x03A1477C B.CS 0x3A14BDC
	0x03A14780 LDR X8, [X31 + 0x78]
	0x03A14784 STRH W22, [X23, X20, LSL #1]
	0x03A14788 ADD X20, X20, 0x1
	0x03A1478C ADD X19, X19, 0xC
	0x03A14790 CMP X8, X20
	0x03A14794 B.NE 0x3A14730
	0x03A14798 ADRP X22, 0x740000
	0x03A1479C LDR X22, [X22 + 0x210]
	0x03A147A0 ADD W21, W21, W20
	0x03A147A4 LDR X2, [X22]
	0x03A147A8 ADD X8, X31, 0x1C0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Component.get_transform, X0
	006 Compare X0, 0
	007 JumpIfEqual {16}
	008 Move X1, X31
	009 Call Transform.get_position, X0
	010 Move [X19+172], S0
	011 Move [X19+180], S1
	012 Move [X19+180], S2
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return 
	016 Call 0x1C17F20

Method: System.Int32 GetTopMostLitLayer()

Disassembly:
	0x03A147AC MOV X0, X26
	0x03A147B0 MOV W1, W31
	0x03A147B4 BL 0x2FE4360
	0x03A147B8 LDR X8, [X31 + 0x1C0]
	0x03A147BC ADDS X31, X8, 0x1
	0x03A147C0 B.EQ 0x3A147E0
	0x03A147C4 LDR X2, [X22]
	0x03A147C8 ADD X8, X31, 0x1C0
	0x03A147CC MOV X0, X26
	0x03A147D0 MOV W1, W31
	0x03A147D4 BL 0x2FE4360
	0x03A147D8 LDR X20, [X31 + 0x1C0]
	0x03A147DC B 0x3A147E4
	0x03A147E0 MOV X20, X31
	0x03A147E4 LDR W8, [X26 + 0x18]
	0x03A147E8 CMP W8, 0x1
	0x03A147EC B.LT 0x3A14940
	0x03A147F0 LDR W22, [X31 + 0x138]
	0x03A147F4 MOV W28, W31
	0x03A147F8 FMOV S8, W31
	0x03A147FC FMOV S10, 1
	0x03A14800 MOV W24, W21
	0x03A14804 MOV W19, W21
	0x03A14808 MOV X23, X26
	0x03A1480C ADRP X8, 0x740000
	0x03A14810 LDR X8, [X8 + 0x210]
	0x03A14814 MOV X0, X23
	0x03A14818 MOV W1, W28
	0x03A1481C LDR X2, [X8]
	0x03A14820 ADD X8, X31, 0x1C0
	0x03A14824 BL 0x2FE4360
	0x03A14828 LDP X8, X9, [X31 + 0x1C8]
	0x03A1482C LDR X10, [X31 + 0x1C0]
	0x03A14830 FMOV S2, W31
	0x03A14834 MOV X0, X31
	0x03A14838 SCVTF S0, X8
	0x03A1483C SCVTF S1, X9
	0x03A14840 ADDS X31, X10, 0x1
	0x03A14844 FDIV S0, S0, S9
	0x03A14848 FDIV S1, S1, S9
	0x03A1484C CSEL X26, X31, X10, EQ
	0x03A14850 BL 0x3887BE0
	0x03A14854 LDR X8, [X31 + 0xF0]
	0x03A14858 CMP W22, W28
	0x03A1485C MOVZ W9, 0x24
	0x03A14860 FCSEL S3, S8, S10, GT
	0x03A14864 CMP X20, X26
	0x03A14868 SMADDL X8, X24, X9, X8
	0x03A1486C ADD W9, W29, 0x1
	0x03A14870 STP S0, S1, [X8]
	0x03A14874 STR S2, [X8 + 0x8]
	0x03A14878 STR W31, [X8 + 0xC]
	0x03A1487C STR X31, [X8 + 0x10]
	0x03A14880 STR S3, [X8 + 0x18]
	0x03A14884 STUR X31, [X8 + 0x1C]
	0x03A14888 B.NE 0x3A14894
	0x03A1488C CBNZ X27, 0x3A148DC
	0x03A14890 B 0x3A14BE0
	0x03A14894 CBZ X27, 0x3A14BE0
	0x03A14898 LDR W10, [X27 + 0x18]
	0x03A1489C CMP W20, W10
	0x03A148A0 B.CS 0x3A14BDC
	0x03A148A4 ADD X8, X27, X20, 0x1, LSL
	0x03A148A8 LDRH W11, [X8 + 0x20]
	0x03A148AC LDR X8, [X31 + 0xE0]
	0x03A148B0 CMP W26, W10
	0x03A148B4 STRH W11, [X8, W29, SXTW]
	0x03A148B8 B.CS 0x3A14BDC
	0x03A148BC ADD X10, X27, X26, 0x1, LSL
	0x03A148C0 LDRH W10, [X10 + 0x20]
	0x03A148C4 ADD W11, W29, 0x2
	0x03A148C8 STRH W10, [X8, W9, SXTW]
	0x03A148CC ADD W10, W29, 0x3
	0x03A148D0 ADD W9, W29, 0x4
	0x03A148D4 STRH W24, [X8, W11, SXTW]
	0x03A148D8 MOV W29, W10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x9CE000
	010 Move X21, 0x741000
	011 Move W8, [X20+4022]
	012 Move X21, [X21+1176]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x741000
	019 Move X0, [X0+1176]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+4022], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call Light2DManager.GetCachedSortingLayer
	029 Move X8, [X19+80]
	030 Compare X8, 0
	031 JumpIfEqual {72}
	032 Move X20, X0
	033 Move X23, X31
	034 Move W24, W31
	035 Move W21, 0x80000000
	036 NotImplemented "Instruction LDRSW not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Compare X20, 0
	039 JumpIfEqual {72}
	040 Move X9, [X20+24]
	041 Subtract W25, W9, 1
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add X8, X20, W25
	045 Add X22, X8, 32
	046 Move X0, X22
	047 Move X1, X31
	048 Call SortingLayer.get_id, X0
	049 Move X8, [X19+80]
	050 Compare X8, 0
	051 JumpIfEqual {72}
	052 Move W9, [X8+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X8, X8, X23
	055 Move W8, [X8+32]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move W8, [X20+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X0, X22
	060 Move X1, X31
	061 Call SortingLayer.get_value, X0
	062 Move W21, W0
	063 Move W24, W25
	064 Subtract W25, W25, 1
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move W8, [X20+24]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X8, [X19+80]
	069 Add X23, X23, 1
	070 Compare X8, 0
	071 JumpIfNotEqual {36}
	072 Call 0x1C17F20
	073 Move W0, W21
	074 Move X20, [X31+48]
	075 Move X19, [X31+56]
	076 Move X22, [X31+32]
	077 Move X21, [X31+40]
	078 Move X24, [X31+16]
	079 Move X23, [X31+24]
	080 Move X30, [X31+64]
	081 Move X25, [X31+72]
	082 Return X0
	083 Call 0x1C17F28

Method: UnityEngine.Bounds UpdateSpriteMesh()

Disassembly:
	0x03A14980 MOV X9, X31
	0x03A14984 ADD X13, X31, 0xE0
	0x03A14988 MOV W21, W10
	0x03A1498C MOV W15, W10
	0x03A14990 B 0x3A149A8
	0x03A14994 CMP W17, W11
	0x03A14998 B.CS 0x3A14BDC
	0x03A1499C ADD X13, X27, W17, 0x1, SXTW
	0x03A149A0 LDRH W15, [X13 + 0x20]
	0x03A149A4 MOV X13, X31
	0x03A149A8 ADD W16, W29, 0x2
	0x03A149AC ADD W22, W29, 0x3
	0x03A149B0 ADD W14, W29, 0x4
	0x03A149B4 STRH W15, [X8, W16, SXTW]
	0x03A149B8 STRH W21, [X8, W22, SXTW]
	0x03A149BC CBZ X0, 0x3A149E4
	0x03A149C0 LDRH W10, [X12]
	0x03A149C4 LDR X12, [X13]
	0x03A149C8 SUB X9, X0, 0x1
	0x03A149CC CMP W9, W11
	0x03A149D0 STRH W10, [X12, W14, SXTW]
	0x03A149D4 B.CS 0x3A14BDC
	0x03A149D8 ADD X9, X27, X9, 0x1, LSL
	0x03A149DC LDRH W19, [X9 + 0x20]
	0x03A149E0 B 0x3A14B48
	0x03A149E4 LDR X9, [X9]
	0x03A149E8 CMP W17, W11
	0x03A149EC STRH W10, [X9, W14, SXTW]
	0x03A149F0 B.CS 0x3A14BDC
	0x03A149F4 ADRP X20, 0x716000
	0x03A149F8 LDR X10, [X31 + 0xF0]
	0x03A149FC LDR X20, [X20 + 0xF58]
	0x03A14A00 SXTW X21, W14
	0x03A14A04 ADD X9, X27, W17, 0x1, SXTW
	0x03A14A08 LDRH W19, [X9 + 0x20]
	0x03A14A0C LDRH W8, [X8, X21, LSL #1]
	0x03A14A10 LDR X0, [X20]
	0x03A14A14 MOVZ W9, 0x24
	0x03A14A18 MUL X11, X19, X9
	0x03A14A1C MUL X8, X8, X9
	0x03A14A20 LDR W9, [X0 + 0xE0]
	0x03A14A24 LDR V9, [X10, X11, LSL]
	0x03A14A28 LDR V10, [X10, X8, LSL]
	0x03A14A2C CBNZ W9, 0x3A14A34
	0x03A14A30 BL 0x1C16DFC
	0x03A14A34 ADRP X8, 0xFFFFFFFFFD0D6000
	0x03A14A38 LDR V8, [X8 + 0x410]
	0x03A14A3C FABD S0, S9, S9
	0x03A14A40 SXTW X22, W22
	0x03A14A44 FCMP S0, S8
	0x03A14A48 B.LE 0x3A14A54
	0x03A14A4C MOVZ W21, 0x1
	0x03A14A50 B 0x3A14A98
	0x03A14A54 LDR X8, [X31 + 0xE0]
	0x03A14A58 LDR X9, [X31 + 0xF0]
	0x03A14A5C LDR X0, [X20]
	0x03A14A60 MOVZ W10, 0x24
	0x03A14A64 LDRH W8, [X8, X21, LSL #1]
	0x03A14A68 NOP
	0x03A14A6C MADD X11, X19, X10, X9
	0x03A14A70 LDR V9, [X11 + 0x4]
	0x03A14A74 NOP
	0x03A14A78 MADD X8, X8, X10, X9
	0x03A14A7C LDR W9, [X0 + 0xE0]
	0x03A14A80 LDR V10, [X8 + 0x4]
	0x03A14A84 CBNZ W9, 0x3A14A8C
	0x03A14A88 BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0x9CE000
	008 Move X21, 0x6E0000
	009 Move X19, X8
	010 Move W8, [X22+4023]
	011 Move X21, [X21+1432]
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x741000
	018 Move X0, [X0+1200]
	019 Call 0x1C17CF4
	020 Move X0, 0x6E0000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move X0, 0x710000
	024 Move X0, [X0+2256]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+4023], W8
	028 Move X0, [X21]
	029 Move X21, [X20+88]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X21
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {64}
	042 Move X8, [X20+152]
	043 Compare X8, 0
	044 JumpIfEqual {79}
	045 Move W8, [X8+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X8, [X20+160]
	048 Compare X8, 0
	049 JumpIfEqual {79}
	050 Move W8, [X8+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X8, 0x741000
	053 Move X8, [X8+1200]
	054 Move W1, 1
	055 Move X0, [X8]
	056 Call 0x1C17D6C
	057 Move [X20+152], X0
	058 Move X8, 0x710000
	059 Move X8, [X8+2256]
	060 Move W1, 1
	061 Move X0, [X8]
	062 Call 0x1C17D6C
	063 Move [X20+160], X0
	064 Move X1, [X20+88]
	065 Add X8, X31, 8
	066 Move X0, X20
	067 Call LightUtility.GenerateSpriteMesh, X0, X1
	068 Move X8, [X31+24]
	069 Move X30, [X31+32]
	070 NotImplemented "Instruction LDUR not yet implemented."
	071 Move X22, [X31+48]
	072 Move X21, [X31+56]
	073 Move [X19+16], X8
	074 Move [X19], V0
	075 Move X20, [X31+64]
	076 Move X19, [X31+72]
	077 Add X31, X31, 80
	078 Return X0
	079 Call 0x1C17F20

Method: System.Void UpdateMesh(System.Boolean forceUpdate = False)

Disassembly:
	0x03A14304 MOV X4, X27
	0x03A14308 STP X8, X31, [X31 + 0x10]
	0x03A1430C STP X9, X19, [X31]
	0x03A14310 BL 0x3A24E68
	0x03A14314 LDR X19, [X24 + 0x18]
	0x03A14318 LDR X0, [X22]
	0x03A1431C AND X8, X19, 0x0
	0x03A14320 STR X8, [X31 + 0x78]
	0x03A14324 BL 0x1C16F10
	0x03A14328 LDR X1, [X20]
	0x03A1432C MOV X26, X0
	0x03A14330 BL 0x2FE3E58
	0x03A14334 SUBS W8, W19, 0x1
	0x03A14338 STR X19, [X31 + 0x50]
	0x03A1433C STR W8, [X31 + 0x34]
	0x03A14340 B.LT 0x3A14490
	0x03A14344 ADRP X21, 0x740000
	0x03A14348 ADRP X8, 0xFFFFFFFFFD0D9000
	0x03A1434C LDR X21, [X21 + 0x310]
	0x03A14350 LDR V9, [X8 + 0xA90]
	0x03A14354 MOV X19, X31
	0x03A14358 ADD X27, X24, 0x24
	0x03A1435C MOVZ X20, 0x7FF00000
	0x03A14360 MOVZ X23, 0x80000000
	0x03A14364 MOVN X28, 0x0
	0x03A14368 LDR W8, [X24 + 0x18]
	0x03A1436C CMP X19, X8
	0x03A14370 B.CS 0x3A14BDC
	0x03A14374 LDP S0, S1, [X27 - 0x4]
	0x03A14378 FMOV D2, X20
	0x03A1437C MOVN W0, 0x9
	0x03A14380 MOVZ W1, 0xA
	0x03A14384 FCVT S0, S0
	0x03A14388 FCVT S1, S1
	0x03A1438C FMUL D0, D0, D9
	0x03A14390 FMUL D1, D1, D9
	0x03A14394 FCVTZS X8, D0
	0x03A14398 FCMP D0, D2
	0x03A1439C FCVTZS X9, D1
	0x03A143A0 CSEL X22, X23, X8, EQ
	0x03A143A4 FCMP D1, D2
	0x03A143A8 MOV X2, X31
	0x03A143AC CSEL X29, X23, X9, EQ
	0x03A143B0 BL 0x3C309A8
	0x03A143B4 MOV W25, W0
	0x03A143B8 MOVN W0, 0x9
	0x03A143BC MOVZ W1, 0xA
	0x03A143C0 MOV X2, X31
	0x03A143C4 BL 0x3C309A8
	0x03A143C8 ADD X1, X22, W25, SXTW
	0x03A143CC ADD X2, X29, W0, SXTW
	0x03A143D0 ADD X0, X31, 0x100
	0x03A143D4 MOV X3, X31
	0x03A143D8 BL 0x3A04370
	0x03A143DC STR X19, [X31 + 0x100]
	0x03A143E0 STR X28, [X31 + 0x118]
	0x03A143E4 LDP V0, V1, [X31 + 0x100]
	0x03A143E8 LDR V2, [X31 + 0x12]
	0x03A143EC STP V0, V1, [X31 + 0x80]
	0x03A143F0 STR V2, [X31 + 0xA]
	0x03A143F4 CBZ X26, 0x3A14BE0
	0x03A143F8 LDP V0, V1, [X31 + 0x80]
	0x03A143FC LDR V2, [X31 + 0xA]
	0x03A14400 LDR X10, [X21]
	0x03A14404 STP V0, V1, [X31 + 0x190]
	0x03A14408 STR V2, [X31 + 0x1B]
	0x03A1440C LDR W9, [X26 + 0x1C]
	0x03A14410 LDR X8, [X26 + 0x10]
	0x03A14414 ADD W9, W9, 0x1
	0x03A14418 STR W9, [X26 + 0x1C]
	0x03A1441C CBZ X8, 0x3A14BE0
	0x03A14420 LDRSW X9, [X26 + 0x18]
	0x03A14424 LDR W11, [X8 + 0x18]
	0x03A14428 CMP W9, W11
	0x03A1442C B.CS 0x3A14454
	0x03A14430 ADD W10, W9, 0x1
	0x03A14434 STR W10, [X26 + 0x18]
	0x03A14438 LDP V1, V0, [X31 + 0x1A0]
	0x03A1443C LDR V2, [X31 + 0x19]
	0x03A14440 MOVZ W10, 0x30
	0x03A14444 MADD X8, X9, X10, X8
	0x03A14448 STP V1, V0, [X8 + 0x30]
	0x03A1444C STR V2, [X8 + 0x2]
	0x03A14450 B 0x3A1447C
	0x03A14454 LDR X8, [X10 + 0x20]
	0x03A14458 LDP V0, V1, [X31 + 0x190]
	0x03A1445C LDR V2, [X31 + 0x1B]
	0x03A14460 ADD X1, X31, 0x1C0
	0x03A14464 LDR X8, [X8 + 0xC0]
	0x03A14468 MOV X0, X26
	0x03A1446C LDR X2, [X8 + 0x70]
	0x03A14470 STP V0, V1, [X31 + 0x1C0]
	0x03A14474 STR V2, [X31 + 0x1E]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D13
	003 Move [X31+40], D12
	004 Move [X31+48], D11
	005 Move [X31+56], D10
	006 Move [X31+64], D9
	007 Move [X31+72], D8
	008 Move [X31+80], X30
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X19, X0
	015 Move X0, [X0+272]
	016 Move W20, W1
	017 Call LightUtility.GetShapePathHash, X0
	018 Move W21, W0
	019 Move S13, [X19+252]
	020 Move S10, [X19+256]
	021 Move V12, [X19+280]
	022 Move V11, [X19+292]
	023 Move W22, [X19+244]
	024 Move W23, [X19+284]
	025 Move V8, [X19+248]
	026 Move V9, [X19+288]
	027 Move X0, [X19+88]
	028 Move [X19+280], S10
	029 Move [X19+292], S13
	030 Move [X19+284], W22
	031 Move [X19+288], S8
	032 Compare X0, 0
	033 JumpIfEqual {36}
	034 Move X1, X31
	035 Call Object.GetInstanceID, X0
	036 Move W11, [X19+168]
	037 Move W10, [X19+296]
	038 Move W8, [X19+36]
	039 Move W9, [X19+300]
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 Move [X19+168], W0
	042 Move [X19+296], W21
	043 Move [X19+300], W8
	044 NotImplemented "Instruction FCMP not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction FCMP not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CMP not yet implemented."
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move TEMP, X20
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {87}
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X9, -48742400
	056 Move W8, W8
	057 Add X9, X9, 2769
	058 NotImplemented "Instruction ADR not yet implemented."
	059 Move W11, [X9]
	060 Add X10, X10, X11
	061 CallNoReturn X10
	062 Move S0, [X19+252]
	063 Move S1, [X19+256]
	064 Move V2, [X19+248]
	065 Move W1, [X19+244]
	066 Add X8, X31, 8
	067 Move X1, [X19+272]
	068 Move V0, [X19+256]
	069 Add X8, X31, 8
	070 Move X0, X19
	071 Call LightUtility.GenerateShapeMesh, X0, X1, V0
	072 Add X8, X31, 8
	073 Move X0, X19
	074 Call Light2D.UpdateSpriteMesh, X0
	075 Move X8, -49451008
	076 Move V0, [X8+636]
	077 Add X8, X31, 8
	078 Move S1, W31
	079 Move S2, W31
	080 Move W1, 4
	081 Move X0, X19
	082 Call LightUtility.GenerateParametricMesh, X0, V0, V1, V2, X1
	083 Move X8, [X31+24]
	084 NotImplemented "Instruction LDUR not yet implemented."
	085 Move [X19+200], X8
	086 Move [X19+184], V0
	087 Move X20, [X31+112]
	088 Move X19, [X31+120]
	089 Move X22, [X31+96]
	090 Move X21, [X31+104]
	091 Move X30, [X31+80]
	092 Move X23, [X31+88]
	093 Move D9, [X31+64]
	094 Move D8, [X31+72]
	095 Move D11, [X31+48]
	096 Move D10, [X31+56]
	097 Move D13, [X31+32]
	098 Move D12, [X31+40]
	099 Add X31, X31, 128
	100 Return 

Method: System.Void UpdateBoundingSphere()

Disassembly:
	0x03A1623C LDR X8, [X0 + 0xB8]
	0x03A16240 LDR X9, [X9 + 0x570]
	0x03A16244 LDR X22, [X8]
	0x03A16248 LDR X0, [X9]
	0x03A1624C BL 0x1C16F10
	0x03A16250 ADRP X8, 0x73E000
	0x03A16254 LDR X8, [X8 + 0x5E0]
	0x03A16258 MOV X1, X22
	0x03A1625C MOV X3, X31
	0x03A16260 MOV X21, X0
	0x03A16264 LDR X2, [X8]
	0x03A16268 BL 0x295A080
	0x03A1626C LDR X8, [X23]
	0x03A16270 LDR X8, [X8 + 0xB8]
	0x03A16274 STR X21, [X8 + 0x8]
	0x03A16278 CBZ X20, 0x3A16628
	0x03A1627C ADRP X8, 0x73E000
	0x03A16280 LDR X8, [X8 + 0x5D8]
	0x03A16284 MOV X0, X20
	0x03A16288 MOV X1, X21
	0x03A1628C LDR X2, [X8]
	0x03A16290 BL 0x301DD30
	0x03A16294 LDR X8, [X19 + 0x18]
	0x03A16298 CBZ X8, 0x3A16628
	0x03A1629C LDP W2, W9, [X8 + 0x18]
	0x03A162A0 ADD W9, W9, 0x1
	0x03A162A4 CMP W2, 0x1
	0x03A162A8 STP W31, W9, [X8 + 0x18]
	0x03A162AC B.LT 0x3A162C0
	0x03A162B0 LDR X0, [X8 + 0x10]
	0x03A162B4 MOV W1, W31
	0x03A162B8 MOV X3, X31
	0x03A162BC BL 0x339FA34
	0x03A162C0 ADRP X20, 0x9CC000
	0x03A162C4 LDRB W8, [X20 + 0xE]
	0x03A162C8 CBNZ W8, 0x3A162E0
	0x03A162CC ADRP X0, 0x73E000
	0x03A162D0 LDR X0, [X0 + 0x5F0]
	0x03A162D4 BL 0x1C16CF4
	0x03A162D8 MOVZ W8, 0x1
	0x03A162DC STRB W8, [X20 + 0xE]
	0x03A162E0 ADRP X8, 0x73E000
	0x03A162E4 LDR X8, [X8 + 0x5F0]
	0x03A162E8 LDR X8, [X8]
	0x03A162EC LDR X8, [X8 + 0xB8]
	0x03A162F0 LDR X0, [X8]
	0x03A162F4 CBZ X0, 0x3A165AC
	0x03A162F8 ADRP X8, 0x73E000
	0x03A162FC LDR X8, [X8 + 0x5C8]
	0x03A16300 LDR X1, [X8]
	0x03A16304 ADD X8, X31, 0x18
	0x03A16308 BL 0x301CB58
	0x03A1630C LDUR V0, [X31 + 0x18]
	0x03A16310 LDR X8, [X31 + 0x28]
	0x03A16314 STR V0, [X31 + 0x5]
	0x03A16318 STR X8, [X31 + 0x60]
	0x03A1631C ADRP X8, 0x73E000
	0x03A16320 LDR X8, [X8 + 0x588]
	0x03A16324 LDR X1, [X8]
	0x03A16328 ADD X0, X31, 0x50
	0x03A1632C BL 0x2BC4350
	0x03A16330 TBZ X0, 0x0, 0x3A16598
	0x03A16334 LDR X21, [X31 + 0x60]
	0x03A16338 CBZ X21, 0x3A1660C
	0x03A1633C LDR X0, [X21 + 0x28]
	0x03A16340 CBZ X0, 0x3A1631C
	0x03A16344 ADRP X8, 0x73E000
	0x03A16348 LDR X8, [X8 + 0x5D0]
	0x03A1634C LDR X1, [X8]
	0x03A16350 ADD X8, X31, 0x18
	0x03A16354 BL 0x301CB58
	0x03A16358 LDUR V0, [X31 + 0x18]
	0x03A1635C LDR X8, [X31 + 0x28]
	0x03A16360 STR V0, [X31 + 0x3]
	0x03A16364 STR X8, [X31 + 0x40]
	0x03A16368 LDR X1, [X25]
	0x03A1636C ADD X0, X31, 0x30
	0x03A16370 BL 0x2BC4350
	0x03A16374 TBZ X0, 0x0, 0x3A164E0
	0x03A16378 LDR X0, [X19 + 0x10]
	0x03A1637C CBZ X0, 0x3A1653C
	0x03A16380 LDR X20, [X31 + 0x40]
	0x03A16384 LDR X1, [X26]
	0x03A16388 ADD X8, X31, 0x18
	0x03A1638C BL 0x301CB58
	0x03A16390 LDUR V0, [X31 + 0x18]
	0x03A16394 LDR X8, [X31 + 0x28]
	0x03A16398 STR V0, [X31 + 0x7]
	0x03A1639C STR X8, [X31 + 0x80]
	0x03A163A0 LDR X1, [X27]
	0x03A163A4 ADD X0, X31, 0x70
	0x03A163A8 BL 0x2BC4350
	0x03A163AC TBZ X0, 0x0, 0x3A16444
	0x03A163B0 CBZ X20, 0x3A16484
	0x03A163B4 LDR X1, [X31 + 0x80]
	0x03A163B8 MOV X0, X20
	0x03A163BC MOV X2, X31
	0x03A163C0 BL 0x3A268E4
	0x03A163C4 TBZ X0, 0x0, 0x3A163A0
	0x03A163C8 LDR X0, [X19 + 0x18]
	0x03A163CC CBZ X0, 0x3A1648C
	0x03A163D0 LDR X2, [X24]
	0x03A163D4 MOV X1, X21
	0x03A163D8 BL 0x301C318
	0x03A163DC TBNZ X0, 0x0, 0x3A163A0
	0x03A163E0 LDR X0, [X19 + 0x18]
	0x03A163E4 CBZ X0, 0x3A16494
	0x03A163E8 ADRP X9, 0x73E000
	0x03A163EC LDR W10, [X0 + 0x1C]
	0x03A163F0 LDR X8, [X0 + 0x10]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D14
	003 Move [X31+24], D13
	004 Move [X31+32], D12
	005 Move [X31+40], D11
	006 Move [X31+48], D10
	007 Move [X31+56], D9
	008 Move [X31+64], D8
	009 Move [X31+72], X30
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move W20, [X0+36]
	013 Move X1, X31
	014 Move X19, X0
	015 Call Component.get_transform, X0
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Compare X0, 0
	018 JumpIfEqual {123}
	019 Move X1, X31
	020 Call Transform.get_position, X0
	021 Move V3, [X19+240]
	022 Move [X31], X31
	023 Move [X31+8], X31
	024 Add X0, X31, 0
	025 Compare X0, 0
	026 JumpIfEqual {123}
	027 Move V1, [X19+192]
	028 Move V3, [X19+204]
	029 Move V0, [X19+184]
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 Add X20, X19, 260
	032 Move V4, [X20]
	033 Move S11, W31
	034 Add S1, S1, S3
	035 Add V0, V0, V2
	036 Add S2, S1, S11
	037 Add V3, V0, V4
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 NotImplemented "Instruction FCSEL not yet implemented."
	040 NotImplemented "Instruction INVALID not yet implemented."
	041 NotImplemented "Instruction INVALID not yet implemented."
	042 Move S1, V0.S[1]
	043 Move X1, X31
	044 Call Transform.TransformPoint, X0, X1
	045 Move X0, X19
	046 Move X1, X31
	047 Move V8, V0
	048 Move V9, V1
	049 Move V10, V2
	050 Call Component.get_transform, X0
	051 Compare X0, 0
	052 JumpIfEqual {123}
	053 Move V0, [X19+184]
	054 NotImplemented "Instruction LDUR not yet implemented."
	055 Move V1, [X19+192]
	056 Move V3, [X19+204]
	057 Move V4, [X20]
	058 Subtract V0, V0, V2
	059 Move X1, X31
	060 Subtract S1, S1, S3
	061 Add V3, V0, V4
	062 Add S2, S1, S11
	063 NotImplemented "Instruction INVALID not yet implemented."
	064 NotImplemented "Instruction FCMP not yet implemented."
	065 NotImplemented "Instruction INVALID not yet implemented."
	066 NotImplemented "Instruction FCSEL not yet implemented."
	067 Move S1, V0.S[1]
	068 Call Transform.TransformPoint, X0, X1
	069 Move X20, 0x9C3000
	070 Move W8, [X20+1925]
	071 Add S0, S8, S0
	072 Add S1, S9, S1
	073 Add S2, S10, S2
	074 Move S3, 0.5
	075 Multiply S13, S0, S3
	076 Multiply S12, S1, S3
	077 Multiply S11, S2, S3
	078 Compare W8, 0
	079 JumpIfNotEqual {85}
	080 Move X0, 0x6DE000
	081 Move X0, [X0+1448]
	082 Call 0x1C17CF4
	083 Move W8, 1
	084 Move [X20+1925], W8
	085 Move X8, 0x6DE000
	086 Move X8, [X8+1448]
	087 Subtract S14, S8, S13
	088 Subtract S9, S9, S12
	089 Subtract S8, S10, S11
	090 Move X0, [X8]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Multiply S0, S14, S14
	096 Multiply S1, S9, S9
	097 Multiply S2, S8, S8
	098 Add S0, S0, S1
	099 Add S0, S2, S0
	100 NotImplemented "Instruction FSQRT not yet implemented."
	101 Add X0, X31, 0
	102 Move V0, V13
	103 Move V1, V12
	104 Move V2, V11
	105 Move [X31], X31
	106 Move [X31+8], X31
	107 Move X1, X31
	108 Call BoundingSphere..ctor, X0, X1, V0
	109 Move V0, [X31]
	110 Move X30, [X31+72]
	111 Move D9, [X31+56]
	112 Move D8, [X31+64]
	113 Move D11, [X31+40]
	114 Move D10, [X31+48]
	115 Move [X19+13], V0
	116 Move X20, [X31+80]
	117 Move X19, [X31+88]
	118 Move D13, [X31+24]
	119 Move D12, [X31+32]
	120 Move V14, [X31+16]
	121 Add X31, X31, 96
	122 Return 
	123 Call 0x1C17F20

Method: System.Boolean IsLitLayer(System.Int32 layer)

Disassembly:
	0x03A16404 CBZ X8, 0x3A1649C
	0x03A16408 LDRSW X10, [X0 + 0x18]
	0x03A1640C LDR W11, [X8 + 0x18]
	0x03A16410 CMP W10, W11
	0x03A16414 B.CS 0x3A16430
	0x03A16418 ADD W9, W10, 0x1
	0x03A1641C ADD X8, X8, X10, 0x3, LSL
	0x03A16420 MOV X23, X31
	0x03A16424 STR W9, [X0 + 0x18]
	0x03A16428 STR X21, [X8 + 0x20]
	0x03A1642C B 0x3A16448
	0x03A16430 LDR X8, [X9 + 0x20]
	0x03A16434 LDR X8, [X8 + 0xC0]
	0x03A16438 LDR X2, [X8 + 0x70]
	0x03A1643C MOV X1, X21
	0x03A16440 BL 0x301BF90
	0x03A16444 MOV X23, X31
	0x03A16448 MOVZ W20, 0x12
	0x03A1644C LDR X1, [X28]
	0x03A16450 ADD X0, X31, 0x70
	0x03A16454 BL 0x2BC434C
	0x03A16458 CBNZ X23, 0x3A16530
	0x03A1645C CMP W20, 0x12

ISIL:
	001 Move [X31-16], X30
	002 Move X10, [X0+80]
	003 Compare X10, 0
	004 JumpIfEqual {16}
	005 Move W8, [X10+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X9, X31
	008 Add X10, X10, 32
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W11, [X10]
	011 Add X9, X9, 1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 NotImplemented "Instruction CSET not yet implemented."
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move W0, W31
	017 Move X30, [X31+16]
	018 Return X0
	019 Call 0x1C17F28

Method: System.Void Awake()

Disassembly:
	0x03A16460 B.EQ 0x3A16468

ISIL:
	001 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03A16464 CBNZ W20, 0x3A164EC
	0x03A16468 LDR X0, [X19 + 0x18]
	0x03A1646C CBZ X0, 0x3A16544
	0x03A16470 LDR X2, [X24]
	0x03A16474 MOV X1, X21
	0x03A16478 BL 0x301C318
	0x03A1647C TBZ X0, 0x0, 0x3A16368
	0x03A16480 B 0x3A164E0
	0x03A16484 BL 0x1C16F20
	0x03A16488 B 0x3A1662C
	0x03A1648C BL 0x1C16F20
	0x03A16490 B 0x3A1662C
	0x03A16494 BL 0x1C16F20
	0x03A16498 B 0x3A1662C
	0x03A1649C BL 0x1C16F20
	0x03A164A0 B 0x3A1662C
	0x03A164A4 B 0x3A164B8
	0x03A164A8 B 0x3A164B8
	0x03A164AC B 0x3A164B8
	0x03A164B0 B 0x3A164B8
	0x03A164B4 B 0x3A164B8
	0x03A164B8 MOV X22, X1
	0x03A164BC MOV X20, X0
	0x03A164C0 CMP W22, 0x1
	0x03A164C4 B.NE 0x3A16518
	0x03A164C8 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x9CC000
	005 Move W8, [X20+4024]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x73F000
	012 Move X0, [X0+1176]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4024], W8
	016 Move X20, 0x73F000
	017 Move X0, [X19+88]
	018 Move X20, [X20+1176]
	019 Compare X0, 0
	020 JumpIfEqual {23}
	021 Move X1, X31
	022 Call Object.GetInstanceID, X0
	023 Move [X19+168], W0
	024 Move X0, [X20]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]

Method: System.Void OnDisable()

Disassembly:
	0x03A165C8 LDP D11, D10, [X31 + 0xB0]
	0x03A165CC LDP D13, D12, [X31 + 0xA0]
	0x03A165D0 LDP D15, D14, [X31 + 0x90]
	0x03A165D4 ADD X31, X31, 0x130
	0x03A165D8 RET
	0x03A165DC MOV X21, X31
	0x03A165E0 ADRP X8, 0x73E000
	0x03A165E4 LDR X8, [X8 + 0x578]
	0x03A165E8 LDR X1, [X8]
	0x03A165EC ADD X0, X31, 0x30
	0x03A165F0 BL 0x2BC434C
	0x03A165F4 CBZ X21, 0x3A16668
	0x03A165F8 MOV X0, X21
	0x03A165FC BL 0x1C16F18
	0x03A16600 BL 0x1C16F20
	0x03A16604 BL 0x1C16F20
	0x03A16608 BL 0x1C16F20
	0x03A1660C BL 0x1C16F20
	0x03A16610 BL 0x1C16F20
	0x03A16614 BL 0x1C16F20
	0x03A16618 MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x9CC000
	006 Move X21, 0x73F000
	007 Move W8, [X20+4025]
	008 Move X21, [X21+1176]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x73F000
	015 Move X0, [X0+1176]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+4025], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]

Method: System.Void LateUpdate()

Disassembly:
	0x03A166CC B 0x3A16700
	0x03A166D0 B 0x3A16700
	0x03A166D4 B 0x3A16700
	0x03A166D8 B 0x3A16700
	0x03A166DC B 0x3A16700
	0x03A166E0 B 0x3A16700
	0x03A166E4 B 0x3A16700
	0x03A166E8 B 0x3A16700
	0x03A166EC B 0x3A16700
	0x03A166F0 B 0x3A16700
	0x03A166F4 B 0x3A16700
	0x03A166F8 B 0x3A16700

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+36]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move W1, [X0+224]
	006 Move X19, X0
	007 Call Light2D.UpdateMesh, X0, X1
	008 Move X0, X19
	009 Call Light2D.UpdateBoundingSphere, X0
	010 Move [X19+224], W31
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Return 

Method: System.Void OnBeforeSerialize()

Disassembly:
	0x03A166FC B 0x3A16700
	0x03A16700 MOV X20, X0
	0x03A16704 CMP W1, 0x1

ISIL:
	001 Move W8, 1
	002 Move [X0+32], W8
	003 Return 

Method: System.Void OnAfterDeserialize()

Disassembly:
	0x03A16708 B.NE 0x3A16734
	0x03A1670C MOV X0, X20
	0x03A16710 BL 0x3EB1AD0
	0x03A16714 LDR X21, [X0]
	0x03A16718 BL 0x3EB1AE0
	0x03A1671C LDR X1, [X28]
	0x03A16720 ADD X0, X31, 0x70
	0x03A16724 BL 0x2BC434C
	0x03A16728 CBZ X21, 0x3A161E8
	0x03A1672C MOV X0, X21
	0x03A16730 BL 0x1C16F18
	0x03A16734 MOV X21, X31
	0x03A16738 B 0x3A16740
	0x03A1673C MOV X20, X0
	0x03A16740 LDR X1, [X28]
	0x03A16744 ADD X0, X31, 0x70
	0x03A16748 BL 0x2BC434C
	0x03A1674C CBNZ X21, 0x3A16758
	0x03A16750 MOV X0, X20
	0x03A16754 BL 0x1D2C690
	0x03A16758 MOV X0, X21
	0x03A1675C BL 0x1C16F18
	0x03A16760 BL 0x1990590
	0x03A16764 STR X30, [X31 - 0x40]!
	0x03A16768 STP X24, X23, [X31 + 0x10]
	0x03A1676C STP X22, X21, [X31 + 0x20]
	0x03A16770 STP X20, X19, [X31 + 0x30]
	0x03A16774 ADRP X23, 0x9CB000
	0x03A16778 ADRP X24, 0x73E000

ISIL:
	001 Move W8, [X0+32]
	002 Compare W8, 0
	003 JumpIfEqual {5}
	004 Return 
	005 Move V0, [X0+136]
	006 Move V1, [X0+128]
	007 Move V2, [X0+68]
	008 Move W8, [X0+124]
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 NotImplemented "Instruction CSET not yet implemented."
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 Move [X0+132], W9
	013 NotImplemented "Instruction CSET not yet implemented."
	014 NotImplemented "Instruction FCMP not yet implemented."
	015 Move [X0+125], W9
	016 NotImplemented "Instruction CSET not yet implemented."
	017 Move [X0+72], W9
	018 Compare W8, 0
	019 JumpIfEqual {21}
	020 Move W8, [X0+120]
	021 Move W8, 2
	022 Move W10, [X0+108]
	023 Move [X0+120], W8
	024 Move W8, 1
	025 Move W9, 1
	026 Compare W10, 0
	027 JumpIfNotEqual {29}
	028 Move W9, [X0+112]
	029 Move [X0+112], W9
	030 Move [X0+32], W8
	031 Return 

Method: System.Single get_pointLightInnerAngle()

Disassembly:
	0x03A1677C ADRP X20, 0x73E000
	0x03A16780 ADRP X22, 0x73E000

ISIL:
	001 Move V0, [X0+228]
	002 Return V0

Method: System.Void set_pointLightInnerAngle(System.Single value)

Disassembly:
	0x03A16784 ADRP X21, 0x73E000
	0x03A16788 LDRB W8, [X23 + 0xFBE]

ISIL:
	001 Move [X0+228], S0
	002 Return 

Method: System.Single get_pointLightOuterAngle()

Disassembly:
	0x03A1678C LDR X24, [X24 + 0x5F8]
	0x03A16790 LDR X20, [X20 + 0x600]

ISIL:
	001 Move V0, [X0+232]
	002 Return V0

Method: System.Void set_pointLightOuterAngle(System.Single value)

Disassembly:
	0x03A16794 LDR X22, [X22 + 0x608]
	0x03A16798 LDR X21, [X21 + 0x610]

ISIL:
	001 Move [X0+232], S0
	002 Return 

Method: System.Single get_pointLightInnerRadius()

Disassembly:
	0x03A1679C MOV X19, X0
	0x03A167A0 TBNZ X8, 0x0, 0x3A167DC

ISIL:
	001 Move V0, [X0+236]
	002 Return V0

Method: System.Void set_pointLightInnerRadius(System.Single value)

Disassembly:
	0x03A167A4 ADRP X0, 0x73E000
	0x03A167A8 LDR X0, [X0 + 0x610]

ISIL:
	001 Move [X0+236], S0
	002 Return 

Method: System.Single get_pointLightOuterRadius()

Disassembly:
	0x03A167AC BL 0x1C16CF4
	0x03A167B0 ADRP X0, 0x73E000

ISIL:
	001 Move V0, [X0+240]
	002 Return V0

Method: System.Void set_pointLightOuterRadius(System.Single value)

Disassembly:
	0x03A167B4 LDR X0, [X0 + 0x600]
	0x03A167B8 BL 0x1C16CF4

ISIL:
	001 Move [X0+240], S0
	002 Return 

Method: System.Single get_pointLightDistance()

Disassembly:
	0x03A167BC ADRP X0, 0x73E000
	0x03A167C0 LDR X0, [X0 + 0x608]

ISIL:
	001 Move V0, [X0+116]
	002 Return V0

Method: UnityEngine.Rendering.Universal.Light2D/NormalMapQuality get_pointLightQuality()

Disassembly:
	0x03A167C4 BL 0x1C16CF4
	0x03A167C8 ADRP X0, 0x73E000

ISIL:
	001 Move W0, [X0+120]
	002 Return X0

Method: System.Boolean get_isPointLight()

Disassembly:
	0x03A163F4 LDR X9, [X9 + 0x5A8]
	0x03A163F8 ADD W10, W10, 0x1
	0x03A163FC LDR X9, [X9]
	0x03A16400 STR W10, [X0 + 0x1C]

ISIL:
	001 Move W8, [X0+36]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Int32 get_shapeLightParametricSides()

Disassembly:
	0x03A167CC LDR X0, [X0 + 0x5F8]
	0x03A167D0 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+244]
	002 Return X0

Method: System.Single get_shapeLightParametricAngleOffset()

Disassembly:
	0x03A167D4 MOVZ W8, 0x1
	0x03A167D8 STRB W8, [X23 + 0xFBE]

ISIL:
	001 Move V0, [X0+248]
	002 Return V0

Method: System.Single get_shapeLightParametricRadius()

Disassembly:
	0x03A167DC LDR X0, [X24]
	0x03A167E0 BL 0x1C16F10

ISIL:
	001 Move V0, [X0+252]
	002 Return V0

Method: System.Void set_shapeLightParametricRadius(System.Single value)

Disassembly:
	0x03A167E4 LDR X1, [X20]
	0x03A167E8 MOV X20, X0

ISIL:
	001 Move [X0+252], S0
	002 Return 

Method: System.Single get_shapeLightFalloffSize()

Disassembly:
	0x03A167EC BL 0x301B7C4
	0x03A167F0 STR X20, [X19 + 0x10]

ISIL:
	001 Move V0, [X0+256]
	002 Return V0

Method: System.Void set_shapeLightFalloffSize(System.Single value)

Disassembly:
	0x03A167F4 LDR X0, [X22]
	0x03A167F8 BL 0x1C16F10
	0x03A167FC LDR X1, [X21]
	0x03A16800 MOV X20, X0

ISIL:
	001 Move S1, W31
	002 NotImplemented "Instruction FMAX not yet implemented."
	003 Move [X0+256], S0
	004 Return 

Method: UnityEngine.Vector3[] get_shapePath()

Disassembly:
	0x03A16804 BL 0x301B7C4
	0x03A16808 STR X20, [X19 + 0x18]

ISIL:
	001 Move X0, [X0+272]
	002 Return X0

Method: System.Void set_shapePath(UnityEngine.Vector3[] value)

Disassembly:
	0x03A1680C MOV X0, X19
	0x03A16810 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X0+272], X1
	002 Return 

Method: System.Void SetShapePath(UnityEngine.Vector3[] path)

Disassembly:
	0x03A16814 LDP X22, X21, [X31 + 0x20]
	0x03A16818 LDP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X0+272], X1
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x03A1681C MOV X1, X31
	0x03A16820 LDR X30, [X31], #0x40
	0x03A16824 B 0x33BDD8C
	0x03A16828 STR X30, [X31 - 0x20]!
	0x03A1682C STP X20, X19, [X31 + 0x10]
	0x03A16830 ADRP X19, 0x9CB000
	0x03A16834 ADRP X20, 0x73E000
	0x03A16838 LDRB W8, [X19 + 0xFBF]
	0x03A1683C LDR X20, [X20 + 0x5E8]
	0x03A16840 TBNZ X8, 0x0, 0x3A16858
	0x03A16844 ADRP X0, 0x73E000
	0x03A16848 LDR X0, [X0 + 0x5E8]
	0x03A1684C BL 0x1C16CF4
	0x03A16850 MOVZ W8, 0x1
	0x03A16854 STRB W8, [X19 + 0xFBF]
	0x03A16858 LDR X0, [X20]
	0x03A1685C BL 0x1C16F10
	0x03A16860 MOV X1, X31
	0x03A16864 MOV X19, X0
	0x03A16868 BL 0x33BDD8C
	0x03A1686C LDR X8, [X20]
	0x03A16870 LDR X8, [X8 + 0xB8]
	0x03A16874 STR X19, [X8]
	0x03A16878 LDP X20, X19, [X31 + 0x10]
	0x03A1687C LDR X30, [X31], #0x20
	0x03A16880 RET
	0x03A16884 MOV X1, X31
	0x03A16888 B 0x33BDD8C
	0x03A1688C STR X30, [X31 - 0x10]!
	0x03A16890 CBZ X1, 0x3A168AC
	0x03A16894 CBZ X2, 0x3A168AC
	0x03A16898 LDR W8, [X1 + 0x68]
	0x03A1689C LDR W9, [X2 + 0x68]
	0x03A168A0 SUB W0, W8, W9
	0x03A168A4 LDR X30, [X31], #0x10
	0x03A168A8 RET
	0x03A168AC BL 0x1C16F20
	0x03A168B0 STR X30, [X31 - 0x20]!
	0x03A168B4 STP X20, X19, [X31 + 0x10]
	0x03A168B8 ADRP X20, 0x9CB000
	0x03A168BC ADRP X19, 0x73E000
	0x03A168C0 LDRB W8, [X20 + 0xFC0]
	0x03A168C4 LDR X19, [X19 + 0x498]
	0x03A168C8 TBNZ X8, 0x0, 0x3A168E0
	0x03A168CC ADRP X0, 0x73E000
	0x03A168D0 LDR X0, [X0 + 0x498]
	0x03A168D4 BL 0x1C16CF4
	0x03A168D8 MOVZ W8, 0x1
	0x03A168DC STRB W8, [X20 + 0xFC0]
	0x03A168E0 LDR X0, [X19]
	0x03A168E4 LDR W8, [X0 + 0xE0]
	0x03A168E8 CBNZ W8, 0x3A168F4
	0x03A168EC BL 0x1C16DFC
	0x03A168F0 LDR X0, [X19]
	0x03A168F4 LDR X8, [X0 + 0xB8]
	0x03A168F8 LDP X20, X19, [X31 + 0x10]
	0x03A168FC LDR X0, [X8 + 0x8]
	0x03A16900 LDR X30, [X31], #0x20
	0x03A16904 RET
	0x03A16908 SUB X31, X31, 0x60
	0x03A1690C STR X30, [X31 + 0x20]
	0x03A16910 STP X24, X23, [X31 + 0x30]
	0x03A16914 STP X22, X21, [X31 + 0x40]
	0x03A16918 STP X20, X19, [X31 + 0x50]
	0x03A1691C ADRP X22, 0x9CB000
	0x03A16920 ADRP X21, 0x73E000
	0x03A16924 LDRB W8, [X22 + 0xFC5]
	0x03A16928 LDR X21, [X21 + 0x498]
	0x03A1692C MOV W19, W1
	0x03A16930 MOV W20, W0
	0x03A16934 TBNZ X8, 0x0, 0x3A1697C
	0x03A16938 ADRP X0, 0x73E000
	0x03A1693C LDR X0, [X0 + 0x550]
	0x03A16940 BL 0x1C16CF4
	0x03A16944 ADRP X0, 0x73E000
	0x03A16948 LDR X0, [X0 + 0x558]
	0x03A1694C BL 0x1C16CF4
	0x03A16950 ADRP X0, 0x73E000
	0x03A16954 LDR X0, [X0 + 0x560]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x9CC000
	007 Move X21, 0x73F000
	008 Move X20, 0x70E000
	009 Move W8, [X22+4026]
	010 Move X21, [X21+1200]
	011 Move X20, [X20+2256]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x73F000
	018 Move X0, [X0+1200]
	019 Call 0x1C17CF4
	020 Move X0, 0x70E000
	021 Move X0, [X0+2256]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+4026], W8
	025 Move X9, -49451008
	026 Move V1, [X9+18]
	027 Move X11, 0x40400000
	028 Move W8, 3
	029 Move V0, 0
	030 Move W10, 0x3F800000
	031 NotImplemented "Instruction MOVK not yet implemented."
	032 Move W12, 0x3F400000
	033 Move [X19+36], W8
	034 Move [X19+60], D0
	035 Move [X19+68], W10
	036 Move [X19+116], X11
	037 Move [X19+128], W12
	038 Move [X19+44], V1
	039 Move [X19+136], W12
	040 Move X0, [X21]
	041 Move W1, 1
	042 Move W21, 1
	043 Call 0x1C17D6C
	044 Move [X19+152], X0
	045 Move X0, [X20]
	046 Move W1, 1
	047 Call 0x1C17D6C
	048 Move X10, -49446912
	049 Move V0, [X10+1264]
	050 Move W8, 0x43B40000
	051 Move X9, 0x3F800000
	052 NotImplemented "Instruction MOVK not yet implemented."
	053 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	054 Move [X19+160], X0
	055 Move [X19+240], X9
	056 Move [X19+228], D1
	057 Move [X19+252], D0
	058 Move X20, 0x9C4000
	059 Move W8, [X20+1935]
	060 Compare W8, 0
	061 JumpIfNotEqual {66}
	062 Move X0, 0x6E6000
	063 Move X0, [X0+3848]
	064 Call 0x1C17CF4
	065 Move [X20+1935], W21
	066 Move X8, 0x6E6000
	067 Move X8, [X8+3848]
	068 Add X9, X19, 260
	069 Move V1, 0
	070 Move TEMP, 0
	071 Not TEMP
	072 Move W10, TEMP
	073 Move X8, [X8]
	074 Move X0, X19
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X1, X31
	078 Move X8, [X8+184]
	079 Move V0, [X8]
	080 Move TEMP, 0xFFFF
	081 Not TEMP
	082 Move X8, TEMP
	083 NotImplemented "Instruction MOVK not yet implemented."
	084 Move [X9], D0
	085 Move [X19+280], X8
	086 Move [X19+288], D1
	087 Move [X19+296], W10
	088 Move X20, [X31+32]
	089 Move X19, [X31+40]
	090 Move X30, [X31+48]
	091 Call Light2DBase..ctor, X0
	092 Return 

