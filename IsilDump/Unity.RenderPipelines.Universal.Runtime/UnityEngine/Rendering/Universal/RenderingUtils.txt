Type: UnityEngine.Rendering.Universal.RenderingUtils

Method: UnityEngine.Rendering.AttachmentDescriptor get_emptyAttachment()

Disassembly:
	0x03A70E6C LDR X0, [X0 + 0x8F8]
	0x03A70E70 BL 0x1C16CF4
	0x03A70E74 ADRP X0, 0x683000
	0x03A70E78 LDR X0, [X0 + 0x598]
	0x03A70E7C BL 0x1C16CF4
	0x03A70E80 MOVZ W8, 0x1
	0x03A70E84 STRB W8, [X21 + 0x2A6]
	0x03A70E88 MOV X0, X26
	0x03A70E8C MOV X1, X31
	0x03A70E90 BL 0x3A8DE34
	0x03A70E94 LDR X8, [X26 + 0x178]
	0x03A70E98 CBZ X8, 0x3A7127C
	0x03A70E9C MOV W27, W0
	0x03A70EA0 MOV X0, X8
	0x03A70EA4 MOV X1, X31
	0x03A70EA8 BL 0x3984C98
	0x03A70EAC TBZ X0, 0x0, 0x3A70F68
	0x03A70EB0 CBZ X23, 0x3A7127C
	0x03A70EB4 LDUR V0, [X23 + 0x28]
	0x03A70EB8 LDR X8, [X23 + 0x48]
	0x03A70EBC LDUR V1, [X23 + 0x38]
	0x03A70EC0 MOVI V2.2D, 0x0
	0x03A70EC4 ADD X0, X31, 0xD0
	0x03A70EC8 ADD X1, X31, 0x1C0
	0x03A70ECC MOVN W3, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x973000
	006 Move X20, 0x6E5000
	007 Move X19, X8
	008 Move W8, [X21+671]
	009 Move X20, [X20+16]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x6E5000
	015 Move X0, [X0+16]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+671], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move W2, 120
	030 Add X1, X8, 8
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call 0x3EB2AC0
	034 Return X0

Method: UnityEngine.Mesh get_fullscreenMesh()

Disassembly:
	0x03A70ED0 MOVN W4, 0x0
	0x03A70ED4 MOV W2, W31
	0x03A70ED8 MOV X5, X31
	0x03A70EDC STR X31, [X31 + 0xF0]
	0x03A70EE0 STR X8, [X31 + 0x1E0]
	0x03A70EE4 STP V0, V1, [X31 + 0x1C0]
	0x03A70EE8 STP V2, V2, [X31 + 0xD0]
	0x03A70EEC BL 0x3C4B098
	0x03A70EF0 LDR X8, [X26 + 0x178]
	0x03A70EF4 CBZ X8, 0x3A7127C
	0x03A70EF8 LDP V1, V0, [X8 + 0x30]
	0x03A70EFC LDR X9, [X8 + 0x50]
	0x03A70F00 ADD X0, X31, 0x190
	0x03A70F04 ADD X1, X31, 0x160
	0x03A70F08 STP V1, V0, [X31 + 0x160]
	0x03A70F0C MOVI V0.2D, 0x0
	0x03A70F10 MOVN W3, 0x0
	0x03A70F14 MOVN W4, 0x0
	0x03A70F18 MOV W2, W31
	0x03A70F1C MOV X5, X31
	0x03A70F20 STR X31, [X31 + 0x1B0]
	0x03A70F24 STR X9, [X31 + 0x180]
	0x03A70F28 STP V0, V0, [X31 + 0x190]
	0x03A70F2C BL 0x3C4B098
	0x03A70F30 LDP V0, V1, [X31 + 0xD0]
	0x03A70F34 LDR X8, [X31 + 0xF0]
	0x03A70F38 LDP V2, V3, [X31 + 0x190]
	0x03A70F3C LDR X9, [X31 + 0x1B0]
	0x03A70F40 ADD X0, X31, 0x130
	0x03A70F44 ADD X1, X31, 0x100
	0x03A70F48 MOV X2, X31
	0x03A70F4C STP V0, V1, [X31 + 0x130]
	0x03A70F50 STR X8, [X31 + 0x150]
	0x03A70F54 STP V2, V3, [X31 + 0x100]
	0x03A70F58 STR X9, [X31 + 0x120]
	0x03A70F5C BL 0x3C4B6D8
	0x03A70F60 MOV W27, W0
	0x03A70F64 B 0x3A70F6C
	0x03A70F68 EOR W27, W27, 0x1
	0x03A70F6C CBZ X20, 0x3A7127C
	0x03A70F70 LDRB W8, [X20 + 0xA8]
	0x03A70F74 CBZ W8, 0x3A70FA4
	0x03A70F78 ADD X8, X31, 0xD0
	0x03A70F7C MOV X0, X20
	0x03A70F80 MOV X1, X31
	0x03A70F84 BL 0x39D48AC
	0x03A70F88 LDR V8, [X31 + 0xF0]
	0x03A70F8C ADD X8, X31, 0xD0
	0x03A70F90 MOV X0, X20
	0x03A70F94 MOV X1, X31
	0x03A70F98 BL 0x39D48AC
	0x03A70F9C LDR V9, [X31 + 0xF4]
	0x03A70FA0 B 0x3A70FD8
	0x03A70FA4 ADRP X21, 0x971000
	0x03A70FA8 LDRB W8, [X21 + 0xA48]
	0x03A70FAC CBNZ W8, 0x3A70FC4
	0x03A70FB0 ADRP X0, 0x68B000
	0x03A70FB4 LDR X0, [X0 + 0xF08]
	0x03A70FB8 BL 0x1C16CF4
	0x03A70FBC MOVZ W8, 0x1
	0x03A70FC0 STRB W8, [X21 + 0xA48]
	0x03A70FC4 ADRP X8, 0x68B000
	0x03A70FC8 LDR X8, [X8 + 0xF08]
	0x03A70FCC LDR X8, [X8]
	0x03A70FD0 LDR X8, [X8 + 0xB8]
	0x03A70FD4 LDP S8, S9, [X8 + 0x8]
	0x03A70FD8 ADRP X21, 0x6AB000
	0x03A70FDC ADRP X8, 0x683000
	0x03A70FE0 LDR X21, [X21 + 0x8F8]
	0x03A70FE4 LDR X8, [X8 + 0x598]
	0x03A70FE8 FMOV S10, W31
	0x03A70FEC TBZ X27, 0x0, 0x3A7104C
	0x03A70FF0 LDR X0, [X8]
	0x03A70FF4 MOV W25, W24
	0x03A70FF8 MOV X24, X22
	0x03A70FFC MOV W22, W28
	0x03A71000 LDR W8, [X0 + 0xE0]
	0x03A71004 LDR X28, [X26 + 0xD0]
	0x03A71008 CBNZ W8, 0x3A71010
	0x03A7100C BL 0x1C16DFC
	0x03A71010 MOV X0, X28
	0x03A71014 MOV X1, X31
	0x03A71018 MOV X2, X31
	0x03A7101C BL 0x3C3883C
	0x03A71020 TBZ X0, 0x0, 0x3A71040
	0x03A71024 MOV X0, X31
	0x03A71028 BL 0x3C3BB1C
	0x03A7102C FNEG S0, S9
	0x03A71030 ANDS W31, W0, 0x1
	0x03A71034 FMOV S1, W31
	0x03A71038 FCSEL S10, S9, S1, NE
	0x03A7103C FCSEL S9, S0, S9, NE
	0x03A71040 MOV W28, W22
	0x03A71044 MOV X22, X24
	0x03A71048 MOV W24, W25
	0x03A7104C LDR X0, [X21]
	0x03A71050 LDR W8, [X0 + 0xE0]
	0x03A71054 CBNZ W8, 0x3A7105C
	0x03A71058 BL 0x1C16DFC
	0x03A7105C FMOV S0, W31
	0x03A71060 FMOV S1, W31
	0x03A71064 FMOV S2, W31
	0x03A71068 FMOV S3, W31
	0x03A7106C MOVN W6, 0x0
	0x03A71070 MOVN W7, 0x0
	0x03A71074 MOV X0, X29
	0x03A71078 MOV X1, X23
	0x03A7107C MOV W2, W19
	0x03A71080 MOV W3, W24
	0x03A71084 MOV W4, W31
	0x03A71088 MOV W5, W31
	0x03A7108C STR X31, [X31]
	0x03A71090 BL 0x39E329C
	0x03A71094 TBZ X27, 0x0, 0x3A710B8
	0x03A71098 CBZ X29, 0x3A7127C
	0x03A7109C LDR V3, [X26 + 0x118]
	0x03A710A0 LDR V2, [X26 + 0x114]
	0x03A710A4 LDR V1, [X26 + 0x110]
	0x03A710A8 LDR V0, [X26 + 0x10C]
	0x03A710AC MOV X0, X29
	0x03A710B0 MOV X1, X31
	0x03A710B4 BL 0x3C4C86C
	0x03A710B8 MOV X0, X31
	0x03A710BC BL 0x3C0FF1C
	0x03A710C0 TBZ X0, 0x0, 0x3A7117C
	0x03A710C4 MOV X0, X26
	0x03A710C8 MOV X1, X31
	0x03A710CC BL 0x3A8DE34
	0x03A710D0 TBZ X0, 0x0, 0x3A7117C
	0x03A710D4 ADD X8, X31, 0x190
	0x03A710D8 MOVZ W0, 0x2
	0x03A710DC MOV X1, X31
	0x03A710E0 BL 0x3C4B204
	0x03A710E4 LDP V0, V1, [X31 + 0x190]
	0x03A710E8 LDR X8, [X31 + 0x1B0]
	0x03A710EC STP V0, V1, [X31 + 0xD0]
	0x03A710F0 STR X8, [X31 + 0xF0]
	0x03A710F4 CBZ X29, 0x3A7127C
	0x03A710F8 LDP V0, V1, [X31 + 0xD0]
	0x03A710FC LDR X8, [X31 + 0xF0]
	0x03A71100 ADD X1, X31, 0xA0
	0x03A71104 MOVZ W4, 0x2
	0x03A71108 MOVZ W5, 0x3
	0x03A7110C MOV X0, X29
	0x03A71110 MOV W2, W19
	0x03A71114 MOV W3, W24
	0x03A71118 MOV X6, X31
	0x03A7111C STP V0, V1, [X31 + 0xA0]
	0x03A71120 STR X8, [X31 + 0xC0]
	0x03A71124 BL 0x3C4DBAC
	0x03A71128 LDR X8, [X20 + 0x48]
	0x03A7112C LDUR V0, [X20 + 0x38]
	0x03A71130 LDUR V1, [X20 + 0x28]
	0x03A71134 STR X8, [X31 + 0x1B0]
	0x03A71138 STP V1, V0, [X31 + 0x190]
	0x03A7113C CBZ X23, 0x3A7127C
	0x03A71140 LDUR V0, [X23 + 0x28]
	0x03A71144 LDUR V1, [X23 + 0x38]
	0x03A71148 LDR X8, [X23 + 0x48]
	0x03A7114C LDP V2, V3, [X31 + 0x190]
	0x03A71150 LDR X9, [X31 + 0x1B0]
	0x03A71154 ADD X1, X31, 0x70
	0x03A71158 ADD X2, X31, 0x40
	0x03A7115C MOV X0, X29
	0x03A71160 MOV X3, X31
	0x03A71164 STR X8, [X31 + 0x60]
	0x03A71168 STP V0, V1, [X31 + 0x40]
	0x03A7116C STP V2, V3, [X31 + 0x70]
	0x03A71170 STR X9, [X31 + 0x90]
	0x03A71174 BL 0x3C4F9D8
	0x03A71178 B 0x3A71254
	0x03A7117C ADRP X8, 0x682000
	0x03A71180 LDR X8, [X8 + 0x598]
	0x03A71184 LDR X23, [X20 + 0x18]
	0x03A71188 LDR X0, [X8]
	0x03A7118C LDR W8, [X0 + 0xE0]
	0x03A71190 CBNZ W8, 0x3A71198
	0x03A71194 BL 0x1C16DFC
	0x03A71198 MOV X0, X23
	0x03A7119C MOV X1, X31
	0x03A711A0 MOV X2, X31
	0x03A711A4 BL 0x3C3883C
	0x03A711A8 TBZ X0, 0x0, 0x3A71214
	0x03A711AC ADRP X9, 0x6E1000
	0x03A711B0 LDUR V0, [X20 + 0x28]
	0x03A711B4 LDR X8, [X20 + 0x48]
	0x03A711B8 LDUR V1, [X20 + 0x38]
	0x03A711BC LDR X9, [X9 + 0xE28]
	0x03A711C0 STR X8, [X31 + 0xF0]
	0x03A711C4 STP V0, V1, [X31 + 0xD0]
	0x03A711C8 LDR X0, [X9]
	0x03A711CC LDR W8, [X0 + 0xE0]
	0x03A711D0 CBNZ W8, 0x3A711D8
	0x03A711D4 BL 0x1C16DFC
	0x03A711D8 LDP V0, V1, [X31 + 0xD0]
	0x03A711DC LDR X8, [X31 + 0xF0]
	0x03A711E0 ADD X1, X31, 0x10
	0x03A711E4 FMOV S2, W31
	0x03A711E8 STP V0, V1, [X31 + 0x10]
	0x03A711EC MOV X0, X29
	0x03A711F0 MOV V0.16B, V8.16B
	0x03A711F4 MOV V1.16B, V9.16B
	0x03A711F8 MOV V3.16B, V10.16B
	0x03A711FC MOV X2, X22
	0x03A71200 MOV W3, W28
	0x03A71204 MOV X4, X31
	0x03A71208 STR X8, [X31 + 0x30]
	0x03A7120C BL 0x39E2800
	0x03A71210 B 0x3A71254
	0x03A71214 ADRP X8, 0x6E1000
	0x03A71218 LDR X8, [X8 + 0xE28]
	0x03A7121C LDR X0, [X8]
	0x03A71220 LDR W8, [X0 + 0xE0]
	0x03A71224 CBNZ W8, 0x3A7122C
	0x03A71228 BL 0x1C16DFC
	0x03A7122C FMOV S2, W31
	0x03A71230 MOV X0, X29
	0x03A71234 MOV X1, X20
	0x03A71238 MOV V0.16B, V8.16B
	0x03A7123C MOV V1.16B, V9.16B
	0x03A71240 MOV V3.16B, V10.16B
	0x03A71244 MOV X2, X22
	0x03A71248 MOV W3, W28
	0x03A7124C MOV X4, X31
	0x03A71250 BL 0x39E23B4
	0x03A71254 ADD X31, X31, 0x1F0
	0x03A71258 LDP X20, X19, [X31 + 0x70]
	0x03A7125C LDP X22, X21, [X31 + 0x60]
	0x03A71260 LDP X24, X23, [X31 + 0x50]
	0x03A71264 LDP X26, X25, [X31 + 0x40]
	0x03A71268 LDP X28, X27, [X31 + 0x30]
	0x03A7126C LDP X29, X30, [X31 + 0x20]
	0x03A71270 LDP D9, D8, [X31 + 0x10]
	0x03A71274 LDR V10, [X31], #0x80
	0x03A71278 RET
	0x03A7127C BL 0x1C16F20
	0x03A71280 STP X29, X30, [X31 - 0x50]!
	0x03A71284 STP X26, X25, [X31 + 0x10]
	0x03A71288 STP X24, X23, [X31 + 0x20]
	0x03A7128C STP X22, X21, [X31 + 0x30]
	0x03A71290 STP X20, X19, [X31 + 0x40]
	0x03A71294 SUB X31, X31, 0x320
	0x03A71298 MRS X24, 0xC000
	0x03A7129C LDR X8, [X24 + 0x28]
	0x03A712A0 ADRP X23, 0x971000
	0x03A712A4 ADRP X25, 0x6E3000
	0x03A712A8 MOV W21, W4
	0x03A712AC STR X8, [X31 + 0x318]
	0x03A712B0 STR X0, [X31 + 0x180]
	0x03A712B4 LDRB W8, [X23 + 0x2A7]
	0x03A712B8 LDR X25, [X25 + 0x10]
	0x03A712BC MOV X19, X3
	0x03A712C0 MOV X22, X2
	0x03A712C4 MOV X20, X1
	0x03A712C8 TBNZ X8, 0x0, 0x3A7131C
	0x03A712CC ADRP X0, 0x6E3000
	0x03A712D0 LDR X0, [X0 + 0xB8]
	0x03A712D4 BL 0x1C16CF4
	0x03A712D8 ADRP X0, 0x6E5000
	0x03A712DC LDR X0, [X0 + 0xCF8]
	0x03A712E0 BL 0x1C16CF4
	0x03A712E4 ADRP X0, 0x6E5000
	0x03A712E8 LDR X0, [X0 + 0xD00]
	0x03A712EC BL 0x1C16CF4
	0x03A712F0 ADRP X0, 0x682000
	0x03A712F4 LDR X0, [X0 + 0x598]
	0x03A712F8 BL 0x1C16CF4
	0x03A712FC ADRP X0, 0x6E3000
	0x03A71300 LDR X0, [X0 + 0x10]
	0x03A71304 BL 0x1C16CF4
	0x03A71308 ADRP X0, 0x6DF000
	0x03A7130C LDR X0, [X0 + 0xC80]
	0x03A71310 BL 0x1C16CF4
	0x03A71314 MOVZ W8, 0x1
	0x03A71318 STRB W8, [X23 + 0x2A7]
	0x03A7131C ADRP X23, 0x682000
	0x03A71320 LDR X23, [X23 + 0x598]
	0x03A71324 ADD X0, X31, 0x250
	0x03A71328 MOVZ W2, 0xC4
	0x03A7132C MOV W1, W31
	0x03A71330 BL 0x3EB1B10
	0x03A71334 MOVI V0.2D, 0x0
	0x03A71338 ADD X0, X31, 0x188
	0x03A7133C MOVZ W2, 0xC4
	0x03A71340 MOV W1, W31
	0x03A71344 STP V0, V0, [X31 + 0x100]
	0x03A71348 STP V0, V0, [X31 + 0xE0]
	0x03A7134C STP V0, V0, [X31 + 0xC0]
	0x03A71350 BL 0x3EB1B10
	0x03A71354 LDR X0, [X25]
	0x03A71358 LDR W8, [X0 + 0xE0]
	0x03A7135C CBNZ W8, 0x3A71364
	0x03A71360 BL 0x1C16DFC
	0x03A71364 BL 0x3A70494
	0x03A71368 LDR X8, [X23]
	0x03A7136C MOV X23, X0
	0x03A71370 LDR W9, [X8 + 0xE0]
	0x03A71374 CBNZ W9, 0x3A71380
	0x03A71378 MOV X0, X8
	0x03A7137C BL 0x1C16DFC
	0x03A71380 MOV X0, X23
	0x03A71384 MOV X1, X31
	0x03A71388 MOV X2, X31
	0x03A7138C BL 0x3C3883C
	0x03A71390 TBNZ X0, 0x0, 0x3A71554
	0x03A71394 ADD X0, X31, 0xC0
	0x03A71398 MOV X1, X22
	0x03A7139C MOV X2, X31
	0x03A713A0 BL 0x3C5AF18
	0x03A713A4 ADD X0, X31, 0xC0
	0x03A713A8 MOV W1, W21
	0x03A713AC MOV X2, X31
	0x03A713B0 BL 0x3C5AFB0
	0x03A713B4 ADD X0, X31, 0x120
	0x03A713B8 ADD X1, X31, 0xC0
	0x03A713BC MOVZ W2, 0x60
	0x03A713C0 BL 0x3EB1AC0
	0x03A713C4 LDR X0, [X25]
	0x03A713C8 LDR W8, [X0 + 0xE0]
	0x03A713CC CBNZ W8, 0x3A713D8
	0x03A713D0 BL 0x1C16DFC
	0x03A713D4 LDR X0, [X25]
	0x03A713D8 LDR X8, [X0 + 0xB8]
	0x03A713DC LDR X0, [X8]
	0x03A713E0 CBZ X0, 0x3A71580
	0x03A713E4 ADRP X23, 0x6E5000
	0x03A713E8 LDR X23, [X23 + 0xD00]
	0x03A713EC MOV W1, W31
	0x03A713F0 LDR X2, [X23]
	0x03A713F4 BL 0x305CF04
	0x03A713F8 AND X21, X0, 0x0
	0x03A713FC ADD X0, X31, 0x60
	0x03A71400 ADD X1, X31, 0x120
	0x03A71404 MOVZ W2, 0x60
	0x03A71408 BL 0x3EB1AC0
	0x03A7140C ADRP X26, 0x6E3000
	0x03A71410 LDR X26, [X26 + 0xB8]
	0x03A71414 LDR X0, [X26]
	0x03A71418 LDR W8, [X0 + 0xE0]
	0x03A7141C CBNZ W8, 0x3A71424
	0x03A71420 BL 0x1C16DFC
	0x03A71424 ADD X0, X31, 0x0
	0x03A71428 ADD X1, X31, 0x60
	0x03A7142C MOVZ W2, 0x60
	0x03A71430 BL 0x3EB1AC0
	0x03A71434 ADD X0, X31, 0x188
	0x03A71438 ADD X2, X31, 0x0
	0x03A7143C MOV X1, X21
	0x03A71440 MOV X3, X31
	0x03A71444 BL 0x3C535C0
	0x03A71448 ADD X0, X31, 0x188
	0x03A7144C MOV W1, W31
	0x03A71450 MOV X2, X31
	0x03A71454 BL 0x3C536B4
	0x03A71458 BL 0x3A70494
	0x03A7145C MOV X1, X0
	0x03A71460 ADD X0, X31, 0x188
	0x03A71464 MOV X2, X31
	0x03A71468 BL 0x3C536EC
	0x03A7146C ADD X0, X31, 0x188
	0x03A71470 MOV W1, W31
	0x03A71474 MOV X2, X31
	0x03A71478 BL 0x3C53744
	0x03A7147C ADD X0, X31, 0x250

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x973000
	007 Move X21, 0x6E5000
	008 Move W8, [X19+672]
	009 Move X21, [X21+16]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {52}
	014 Move X0, 0x685000
	015 Move X0, [X0+3672]
	016 Call 0x1C17CF4
	017 Move X0, 0x688000
	018 Move X0, [X0+952]
	019 Call 0x1C17CF4
	020 Move X0, 0x6DF000
	021 Move X0, [X0+1824]
	022 Call 0x1C17CF4
	023 Move X0, 0x6E0000
	024 Move X0, [X0+3848]
	025 Call 0x1C17CF4
	026 Move X0, 0x6B0000
	027 Move X0, [X0+1464]
	028 Call 0x1C17CF4
	029 Move X0, 0x688000
	030 Move X0, [X0+960]
	031 Call 0x1C17CF4
	032 Move X0, 0x6DF000
	033 Move X0, [X0+1816]
	034 Call 0x1C17CF4
	035 Move X0, 0x68B000
	036 Move X0, [X0+1792]
	037 Call 0x1C17CF4
	038 Move X0, 0x684000
	039 Move X0, [X0+1432]
	040 Call 0x1C17CF4
	041 Move X0, 0x6E5000
	042 Move X0, [X0+16]
	043 Call 0x1C17CF4
	044 Move X0, 0x6E7000
	045 Move X0, [X0+3296]
	046 Call 0x1C17CF4
	047 Move X0, 0x6E7000
	048 Move X0, [X0+3304]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X19+672], W8
	052 Move X0, [X21]
	053 Move X19, 0x684000
	054 Move W8, [X0+224]
	055 Move X19, [X19+1432]
	056 Compare W8, 0
	057 JumpIfNotEqual {60}
	058 Call 0x1C17DFC
	059 Move X0, [X21]
	060 Move X8, [X19]
	061 Move X9, [X0+184]
	062 Move W10, [X8+224]
	063 Move X19, [X9+128]
	064 Compare W10, 0
	065 JumpIfNotEqual {68}
	066 Move X0, X8
	067 Call 0x1C17DFC
	068 Move X0, X19
	069 Move X1, X31
	070 Move X2, X31
	071 Call Object.op_Inequality, X0, X1
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {81}
	076 Move X0, [X21]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {366}
	080 Call 0x1C17DFC
	081 Move X8, 0x68B000
	082 Move X8, [X8+1792]
	083 Move X0, [X8]
	084 Call 0x1C17F10
	085 Move X1, X31
	086 Move X19, X0
	087 Call Mesh..ctor, X0
	088 Compare X19, 0
	089 JumpIfEqual {375}
	090 Move X8, 0x6E6000
	091 Move X8, [X8+3304]
	092 Move X0, X19
	093 Move X2, X31
	094 Move X1, [X8]
	095 Call Object.set_name, X0, X1
	096 Move X0, [X21]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {102}
	100 Call 0x1C17DFC
	101 Move X0, [X21]
	102 Move X8, [X0+184]
	103 Move [X8+128], X19
	104 Move X8, 0x687000
	105 Move X8, [X8+960]
	106 Move X0, [X8]
	107 Call 0x1C17F10
	108 Move X8, 0x6AF000
	109 Move X8, [X8+1464]
	110 Move X20, X0
	111 Move X1, [X8]
	112 Call List`1<Vector3>..ctor, X0
	113 Compare X20, 0
	114 JumpIfEqual {375}
	115 Move X22, 0x687000
	116 Move X22, [X22+952]
	117 Move W9, [X20+28]
	118 Move X8, [X20+16]
	119 Move X10, [X22]
	120 Add W9, W9, 1
	121 Move [X20+28], W9
	122 Compare X8, 0
	123 JumpIfEqual {375}
	124 NotImplemented "Instruction LDRSW not yet implemented."
	125 Move W11, [X8+24]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move W11, 12
	128 Add W10, W9, 1
	129 Move V0, 0
	130 NotImplemented "Instruction MADD not yet implemented."
	131 Move [X20+24], W10
	132 Move [X8+32], D0
	133 Move [X8+40], W31
	134 Move X8, [X10+32]
	135 Move S0, -1
	136 Move S1, -1
	137 Move S2, W31
	138 Move X8, [X8+192]
	139 Move X0, X20
	140 Move X1, [X8+112]
	141 Call List`1<Vector3>.AddWithResize, X0, X1
	142 Move W9, [X20+28]
	143 Move X8, [X20+16]
	144 Move X10, [X22]
	145 Add W9, W9, 1
	146 Move [X20+28], W9
	147 Compare X8, 0
	148 JumpIfEqual {375}
	149 NotImplemented "Instruction LDRSW not yet implemented."
	150 Move W11, [X8+24]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move X11, -49819648
	153 Move V0, [X11+2880]
	154 Move W11, 12
	155 Add W10, W9, 1
	156 NotImplemented "Instruction MADD not yet implemented."
	157 Move [X20+24], W10
	158 Move [X8+32], D0
	159 Move [X8+40], W31
	160 Move X8, [X10+32]
	161 Move S0, -1
	162 Move S1, 1
	163 Move S2, W31
	164 Move X8, [X8+192]
	165 Move X0, X20
	166 Move X1, [X8+112]
	167 Call List`1<Vector3>.AddWithResize, X0, X1
	168 Move W9, [X20+28]
	169 Move X8, [X20+16]
	170 Move X10, [X22]
	171 Add W9, W9, 1
	172 Move [X20+28], W9
	173 Compare X8, 0
	174 JumpIfEqual {375}
	175 NotImplemented "Instruction LDRSW not yet implemented."
	176 Move W11, [X8+24]
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move X11, -49819648
	179 Move V0, [X11+2352]
	180 Move W11, 12
	181 Add W10, W9, 1
	182 NotImplemented "Instruction MADD not yet implemented."
	183 Move [X20+24], W10
	184 Move [X8+32], D0
	185 Move [X8+40], W31
	186 Move X8, [X10+32]
	187 Move S0, 1
	188 Move S1, -1
	189 Move S2, W31
	190 Move X8, [X8+192]
	191 Move X0, X20
	192 Move X1, [X8+112]
	193 Call List`1<Vector3>.AddWithResize, X0, X1
	194 Move W9, [X20+28]
	195 Move X8, [X20+16]
	196 Move X10, [X22]
	197 Add W9, W9, 1
	198 Move [X20+28], W9
	199 Compare X8, 0
	200 JumpIfEqual {375}
	201 NotImplemented "Instruction LDRSW not yet implemented."
	202 Move W11, [X8+24]
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Move W11, 12
	205 Add W10, W9, 1
	206 Move V0, 0
	207 NotImplemented "Instruction MADD not yet implemented."
	208 Move [X20+24], W10
	209 Move [X8+32], D0
	210 Move [X8+40], W31
	211 Move X8, [X10+32]
	212 Move S0, 1
	213 Move S1, 1
	214 Move S2, W31
	215 Move X8, [X8+192]
	216 Move X0, X20
	217 Move X1, [X8+112]
	218 Call List`1<Vector3>.AddWithResize, X0, X1
	219 Move X0, X19
	220 Move X1, X20
	221 Move X2, X31
	222 Call Mesh.SetVertices, X0, X1
	223 Move X8, [X21]
	224 Move X9, 0x6DE000
	225 Move X8, [X8+184]
	226 Move X9, [X9+1816]
	227 Move X19, [X8+128]
	228 Move X0, [X9]
	229 Call 0x1C17F10
	230 Move X8, 0x6DF000
	231 Move X8, [X8+3848]
	232 Move X20, X0
	233 Move X1, [X8]
	234 Call List`1<Vector2>..ctor, X0
	235 Compare X20, 0
	236 JumpIfEqual {375}
	237 Move X22, 0x6DE000
	238 Move X22, [X22+1824]
	239 Move W10, [X20+28]
	240 Move X8, [X20+16]
	241 Move X9, [X22]
	242 Add W10, W10, 1
	243 Move [X20+28], W10
	244 Compare X8, 0
	245 JumpIfEqual {375}
	246 NotImplemented "Instruction LDRSW not yet implemented."
	247 Move W11, [X8+24]
	248 NotImplemented "Instruction CMP not yet implemented."
	249 Add W9, W10, 1
	250 Add X8, X8, X10
	251 Move [X20+24], W9
	252 Move [X8+32], X31
	253 Move X8, [X9+32]
	254 Move S0, W31
	255 Move S1, W31
	256 Move X0, X20
	257 Move X8, [X8+192]
	258 Move X1, [X8+112]
	259 Call List`1<Vector2>.AddWithResize, X0, X1
	260 Move W9, [X20+28]
	261 Move X8, [X20+16]
	262 Move X10, [X22]
	263 Add W9, W9, 1
	264 Move [X20+28], W9
	265 Compare X8, 0
	266 JumpIfEqual {375}
	267 NotImplemented "Instruction LDRSW not yet implemented."
	268 Move W11, [X8+24]
	269 NotImplemented "Instruction CMP not yet implemented."
	270 Move X10, -49815552
	271 Move V0, [X10]
	272 Add W10, W9, 1
	273 Add X8, X8, X9
	274 Move [X20+24], W10
	275 Move [X8+32], D0
	276 Move X8, [X10+32]
	277 Move S0, W31
	278 Move S1, 1
	279 Move X0, X20
	280 Move X8, [X8+192]
	281 Move X1, [X8+112]
	282 Call List`1<Vector2>.AddWithResize, X0, X1
	283 Move W9, [X20+28]
	284 Move X8, [X20+16]
	285 Move X10, [X22]
	286 Add W9, W9, 1
	287 Move [X20+28], W9
	288 Compare X8, 0
	289 JumpIfEqual {375}
	290 NotImplemented "Instruction LDRSW not yet implemented."
	291 Move W11, [X8+24]
	292 NotImplemented "Instruction CMP not yet implemented."
	293 Move X10, -49819648
	294 Move V0, [X10+1608]
	295 Add W10, W9, 1
	296 Add X8, X8, X9
	297 Move [X20+24], W10
	298 Move [X8+32], D0
	299 Move X8, [X10+32]
	300 Move S0, 1
	301 Move S1, W31
	302 Move X0, X20
	303 Move X8, [X8+192]
	304 Move X1, [X8+112]
	305 Call List`1<Vector2>.AddWithResize, X0, X1
	306 Move W10, [X20+28]
	307 Move X8, [X20+16]
	308 Move X9, [X22]
	309 Add W10, W10, 1
	310 Move [X20+28], W10
	311 Compare X8, 0
	312 JumpIfEqual {375}
	313 NotImplemented "Instruction LDRSW not yet implemented."
	314 Move W11, [X8+24]
	315 NotImplemented "Instruction CMP not yet implemented."
	316 Add W9, W10, 1
	317 Add X8, X8, X10
	318 Move V0, 0
	319 Move [X20+24], W9
	320 Move [X8+32], D0
	321 Move X8, [X9+32]
	322 Move S0, 1
	323 Move S1, 1
	324 Move X0, X20
	325 Move X8, [X8+192]
	326 Move X1, [X8+112]
	327 Call List`1<Vector2>.AddWithResize, X0, X1
	328 Compare X19, 0
	329 JumpIfEqual {375}
	330 Move X0, X19
	331 Move W1, W31
	332 Move X2, X20
	333 Move X3, X31
	334 Call Mesh.SetUVs, X0, X1, X2
	335 Move X8, [X21]
	336 Move X9, 0x684000
	337 Move W1, 6
	338 Move X8, [X8+184]
	339 Move X9, [X9+3672]
	340 Move X19, [X8+128]
	341 Move X0, [X9]
	342 Call 0x1C17D6C
	343 Move X8, 0x6E6000
	344 Move X8, [X8+3296]
	345 Move X2, X31
	346 Move X20, X0
	347 Move X1, [X8]
	348 Call RuntimeHelpers.InitializeArray, X0, X1
	349 Compare X19, 0
	350 JumpIfEqual {375}
	351 Move X0, X19
	352 Move X1, X20
	353 Move W2, W31
	354 Move W3, W31
	355 Move W4, W31
	356 Move X5, X31
	357 Call Mesh.SetIndices, X0, X1, X2, X3, X4
	358 Move X8, [X21]
	359 Move X8, [X8+184]
	360 Move X0, [X8+128]
	361 Compare X0, 0
	362 JumpIfEqual {375}
	363 Move W1, 1
	364 Move X2, X31
	365 Call Mesh.UploadMeshData, X0, X1
	366 Move X8, [X21]
	367 Move X20, [X31+32]
	368 Move X19, [X31+40]
	369 Move X22, [X31+16]
	370 Move X21, [X31+24]
	371 Move X8, [X8+184]
	372 Move X0, [X8+128]
	373 Move X30, [X31+48]
	374 Return X0
	375 Call 0x1C17F20

Method: System.Boolean get_useStructuredBuffer()

Disassembly:
	0x03A71480 ADD X1, X31, 0x188
	0x03A71484 MOVZ W2, 0xC4

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Boolean SupportsLightLayers(UnityEngine.Rendering.GraphicsDeviceType type)

Disassembly:
	0x03A71488 BL 0x3EB1AC0
	0x03A7148C MOVZ W21, 0x1
	0x03A71490 LDR X0, [X25]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: UnityEngine.Material get_errorMaterial()

Disassembly:
	0x03A71494 LDR W8, [X0 + 0xE0]
	0x03A71498 CBNZ W8, 0x3A714A4
	0x03A7149C BL 0x1C16DFC
	0x03A714A0 LDR X0, [X25]
	0x03A714A4 LDR X8, [X0 + 0xB8]
	0x03A714A8 LDR X8, [X8]
	0x03A714AC CBZ X8, 0x3A71580
	0x03A714B0 LDR W9, [X8 + 0x18]
	0x03A714B4 CMP W21, W9
	0x03A714B8 B.GE 0x3A7151C
	0x03A714BC LDR W9, [X0 + 0xE0]
	0x03A714C0 CBNZ W9, 0x3A714D8
	0x03A714C4 BL 0x1C16DFC
	0x03A714C8 LDR X8, [X25]
	0x03A714CC LDR X8, [X8 + 0xB8]
	0x03A714D0 LDR X8, [X8]
	0x03A714D4 CBZ X8, 0x3A71580
	0x03A714D8 LDR X2, [X23]
	0x03A714DC MOV X0, X8
	0x03A714E0 MOV W1, W21
	0x03A714E4 BL 0x305CF04
	0x03A714E8 LDR X8, [X26]
	0x03A714EC MOV X22, X0
	0x03A714F0 LDR W9, [X8 + 0xE0]
	0x03A714F4 CBNZ W9, 0x3A71500
	0x03A714F8 MOV X0, X8
	0x03A714FC BL 0x1C16DFC
	0x03A71500 AND X2, X22, 0x0
	0x03A71504 ADD X0, X31, 0x250
	0x03A71508 MOV W1, W21
	0x03A7150C MOV X3, X31
	0x03A71510 BL 0x3C538D4
	0x03A71514 ADD W21, W21, 0x1
	0x03A71518 B 0x3A71490
	0x03A7151C ADRP X8, 0x6DF000
	0x03A71520 LDR X8, [X8 + 0xC80]
	0x03A71524 LDP X21, X20, [X20]
	0x03A71528 LDR X0, [X8]
	0x03A7152C LDR W8, [X0 + 0xE0]
	0x03A71530 CBNZ W8, 0x3A71538
	0x03A71534 BL 0x1C16DFC
	0x03A71538 ADD X0, X31, 0x180
	0x03A7153C ADD X3, X31, 0x250
	0x03A71540 MOV X1, X21
	0x03A71544 MOV X2, X20
	0x03A71548 MOV X4, X19
	0x03A7154C MOV X5, X31
	0x03A71550 BL 0x3C58AC8
	0x03A71554 LDR X8, [X24 + 0x28]
	0x03A71558 LDR X9, [X31 + 0x318]
	0x03A7155C CMP X8, X9
	0x03A71560 B.NE 0x3A71584
	0x03A71564 ADD X31, X31, 0x320
	0x03A71568 LDP X20, X19, [X31 + 0x40]
	0x03A7156C LDP X22, X21, [X31 + 0x30]
	0x03A71570 LDP X24, X23, [X31 + 0x20]
	0x03A71574 LDP X26, X25, [X31 + 0x10]
	0x03A71578 LDP X29, X30, [X31], #0x50
	0x03A7157C RET
	0x03A71580 BL 0x1C16F20
	0x03A71584 BL 0x3EB1B20
	0x03A71588 STR X30, [X31 - 0x20]!
	0x03A7158C STP X20, X19, [X31 + 0x10]
	0x03A71590 ADRP X20, 0x971000
	0x03A71594 ADRP X19, 0x6E3000
	0x03A71598 LDRB W8, [X20 + 0x2A8]
	0x03A7159C LDR X19, [X19 + 0x10]
	0x03A715A0 TBNZ X8, 0x0, 0x3A715D0
	0x03A715A4 ADRP X0, 0x6E5000
	0x03A715A8 LDR X0, [X0 + 0xD08]
	0x03A715AC BL 0x1C16CF4
	0x03A715B0 ADRP X0, 0x6E5000
	0x03A715B4 LDR X0, [X0 + 0xD10]
	0x03A715B8 BL 0x1C16CF4
	0x03A715BC ADRP X0, 0x6E3000
	0x03A715C0 LDR X0, [X0 + 0x10]
	0x03A715C4 BL 0x1C16CF4
	0x03A715C8 MOVZ W8, 0x1
	0x03A715CC STRB W8, [X20 + 0x2A8]
	0x03A715D0 LDR X0, [X19]
	0x03A715D4 LDR W8, [X0 + 0xE0]
	0x03A715D8 CBNZ W8, 0x3A715E4
	0x03A715DC BL 0x1C16DFC
	0x03A715E0 LDR X0, [X19]
	0x03A715E4 LDR X8, [X0 + 0xB8]
	0x03A715E8 LDR X0, [X8 + 0x90]
	0x03A715EC CBZ X0, 0x3A71628
	0x03A715F0 ADRP X8, 0x6E5000
	0x03A715F4 LDR X8, [X8 + 0xD08]
	0x03A715F8 LDR X1, [X8]
	0x03A715FC BL 0x2A35DF8
	0x03A71600 LDR X8, [X19]
	0x03A71604 LDR X8, [X8 + 0xB8]
	0x03A71608 LDR X0, [X8 + 0x98]
	0x03A7160C CBZ X0, 0x3A71628
	0x03A71610 ADRP X8, 0x6E5000
	0x03A71614 LDR X8, [X8 + 0xD10]
	0x03A71618 LDP X20, X19, [X31 + 0x10]
	0x03A7161C LDR X1, [X8]
	0x03A71620 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x972000
	006 Move X21, 0x6E4000
	007 Move W8, [X19+673]
	008 Move X21, [X21+16]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x687000
	014 Move X0, [X0+3232]
	015 Call 0x1C17CF4
	016 Move X0, 0x683000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move X0, 0x6E4000
	020 Move X0, [X0+16]
	021 Call 0x1C17CF4
	022 Move X0, 0x6E6000
	023 Move X0, [X0+3312]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X19+673], W8
	027 Move X0, [X21]
	028 Move X19, 0x683000
	029 Move W8, [X0+224]
	030 Move X19, [X19+1432]
	031 Compare W8, 0
	032 JumpIfNotEqual {35}
	033 Call 0x1C17DFC
	034 Move X0, [X21]
	035 Move X8, [X19]
	036 Move X9, [X0+184]
	037 Move W10, [X8+224]
	038 Move X19, [X9+136]
	039 Compare W10, 0
	040 JumpIfNotEqual {43}
	041 Move X0, X8
	042 Call 0x1C17DFC
	043 Move X0, X19
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Equality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {73}
	051 Move X8, 0x6E6000
	052 Move X8, [X8+3312]
	053 Move X0, [X8]
	054 Move X1, X31
	055 Call Shader.Find, X0
	056 Move X8, 0x687000
	057 Move X8, [X8+3232]
	058 Move X20, X0
	059 Move X0, [X8]
	060 Call 0x1C17F10
	061 Move X19, X0
	062 Move X1, X20
	063 Move X2, X31
	064 Call Material..ctor, X0, X1
	065 Move X0, [X21]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {71}
	069 Call 0x1C17DFC
	070 Move X0, [X21]
	071 Move X8, [X0+184]
	072 Move [X8+136], X19
	073 Move X0, [X21]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {79}
	077 Call 0x1C17DFC
	078 Move X0, [X21]
	079 Move X8, [X0+184]
	080 Move X20, [X31+16]
	081 Move X19, [X31+24]
	082 Move X0, [X8+136]
	083 Move X30, [X31+32]
	084 Move X21, [X31+40]
	085 Return X0
	086 Move X19, X0
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X0, X19
	089 Call 0x3EB2AD0
	090 Move X19, X0
	091 Move X0, 0x689000
	092 Move X0, [X0+3264]
	093 Call 0x1C17D08
	094 Move X8, [X19]
	095 Move X1, [X8]
	096 Call 0x1C18270
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {102}
	101 Call 0x3EB2AE0
	102 Move W0, 8
	103 Call 0x3EB2AF0
	104 Move X8, [X19]
	105 Move [X0], X8
	106 Move X1, 0x444000
	107 Add X1, X1, 3672
	108 Move X2, X31
	109 Call 0x3EB2B00
	110 Move X19, X0
	111 Call 0x3EB2AE0
	112 Move X0, X19
	113 Call 0x1D2D690
	114 Call 0x1991590

Method: System.Void SetViewAndProjectionMatrices(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Matrix4x4 viewMatrix, UnityEngine.Matrix4x4 projectionMatrix, System.Boolean setInverseMatrices)

Disassembly:
	0x03A71624 B 0x2A44FA0
	0x03A71628 BL 0x1C16F20
	0x03A7162C SUB X31, X31, 0x30
	0x03A71630 STP X30, X21, [X31 + 0x10]
	0x03A71634 STP X20, X19, [X31 + 0x20]
	0x03A71638 ADRP X21, 0x971000
	0x03A7163C ADRP X20, 0x6E3000
	0x03A71640 LDRB W8, [X21 + 0x2A9]
	0x03A71644 LDR X20, [X20 + 0x10]
	0x03A71648 MOV W19, W0
	0x03A7164C TBNZ X8, 0x0, 0x3A7167C
	0x03A71650 ADRP X0, 0x6E5000
	0x03A71654 LDR X0, [X0 + 0xD18]
	0x03A71658 BL 0x1C16CF4
	0x03A7165C ADRP X0, 0x6E5000
	0x03A71660 LDR X0, [X0 + 0xD20]
	0x03A71664 BL 0x1C16CF4
	0x03A71668 ADRP X0, 0x6E3000
	0x03A7166C LDR X0, [X0 + 0x10]
	0x03A71670 BL 0x1C16CF4
	0x03A71674 MOVZ W8, 0x1
	0x03A71678 STRB W8, [X21 + 0x2A9]
	0x03A7167C LDR X0, [X20]
	0x03A71680 STRB W31, [X31 + 0xC]
	0x03A71684 LDR W8, [X0 + 0xE0]
	0x03A71688 CBNZ W8, 0x3A71694
	0x03A7168C BL 0x1C16DFC
	0x03A71690 LDR X0, [X20]
	0x03A71694 LDR X8, [X0 + 0xB8]
	0x03A71698 LDR X0, [X8 + 0x90]
	0x03A7169C CBZ X0, 0x3A71720
	0x03A716A0 ADRP X8, 0x6E5000
	0x03A716A4 LDR X8, [X8 + 0xD20]
	0x03A716A8 ADD X2, X31, 0xC
	0x03A716AC MOV W1, W19
	0x03A716B0 LDR X3, [X8]
	0x03A716B4 BL 0x2A37588
	0x03A716B8 TBNZ X0, 0x0, 0x3A7170C
	0x03A716BC MOV W0, W19
	0x03A716C0 MOV X1, X31
	0x03A716C4 BL 0x3C3BFA4
	0x03A716C8 LDR X8, [X20]
	0x03A716CC AND W9, W0, 0x1
	0x03A716D0 STRB W9, [X31 + 0xC]
	0x03A716D4 LDR W9, [X8 + 0xE0]
	0x03A716D8 CBNZ W9, 0x3A716E8
	0x03A716DC MOV X0, X8
	0x03A716E0 BL 0x1C16DFC
	0x03A716E4 LDR X8, [X20]
	0x03A716E8 LDR X8, [X8 + 0xB8]
	0x03A716EC LDR X0, [X8 + 0x90]
	0x03A716F0 CBZ X0, 0x3A71720
	0x03A716F4 ADRP X8, 0x6E5000
	0x03A716F8 LDRB W2, [X31 + 0xC]
	0x03A716FC LDR X8, [X8 + 0xD18]
	0x03A71700 MOV W1, W19
	0x03A71704 LDR X3, [X8]
	0x03A71708 BL 0x2A35C68
	0x03A7170C LDRB W0, [X31 + 0xC]
	0x03A71710 LDP X20, X19, [X31 + 0x20]
	0x03A71714 LDP X30, X21, [X31 + 0x10]
	0x03A71718 ADD X31, X31, 0x30
	0x03A7171C RET
	0x03A71720 BL 0x1C16F20
	0x03A71724 SUB X31, X31, 0xD0
	0x03A71728 STP X30, X21, [X31 + 0xB0]
	0x03A7172C STP X20, X19, [X31 + 0xC0]
	0x03A71730 CBZ X0, 0x3A717D0
	0x03A71734 LDR W8, [X0 + 0x18]
	0x03A71738 MOV X19, X0
	0x03A7173C MOVZ W21, 0x28
	0x03A71740 SUB W8, W8, 0x1
	0x03A71744 MOV W20, W8
	0x03A71748 TBNZ X8, 0x1F, 0x3A717B8
	0x03A7174C LDR W8, [X19 + 0x18]
	0x03A71750 CMP W20, W8
	0x03A71754 B.CS 0x3A717CC
	0x03A71758 UMADDL X8, X20, X21, X19
	0x03A7175C LDR X9, [X8 + 0x40]
	0x03A71760 LDP V1, V0, [X8 + 0x20]
	0x03A71764 ADD X8, X31, 0x58
	0x03A71768 MOV W0, W31
	0x03A7176C MOV X1, X31
	0x03A71770 STR X9, [X31 + 0xA0]
	0x03A71774 STP V1, V0, [X31 + 0x80]
	0x03A71778 BL 0x3C4B258
	0x03A7177C LDUR V0, [X31 + 0x58]
	0x03A71780 LDUR V1, [X31 + 0x68]
	0x03A71784 LDR X8, [X31 + 0x78]
	0x03A71788 LDP V2, V3, [X31 + 0x80]
	0x03A7178C LDR X9, [X31 + 0xA0]
	0x03A71790 ADD X0, X31, 0x30
	0x03A71794 ADD X1, X31, 0x0
	0x03A71798 MOV X2, X31
	0x03A7179C STP V0, V1, [X31]
	0x03A717A0 STR X8, [X31 + 0x20]
	0x03A717A4 STP V2, V3, [X31 + 0x30]
	0x03A717A8 STR X9, [X31 + 0x50]
	0x03A717AC BL 0x3C4B708
	0x03A717B0 SUB W8, W20, 0x1
	0x03A717B4 TBZ X0, 0x0, 0x3A71744
	0x03A717B8 MOV W0, W20
	0x03A717BC LDP X20, X19, [X31 + 0xC0]
	0x03A717C0 LDP X30, X21, [X31 + 0xB0]
	0x03A717C4 ADD X31, X31, 0xD0
	0x03A717C8 RET
	0x03A717CC BL 0x1C16F28
	0x03A717D0 BL 0x1C16F20
	0x03A717D4 SUB X31, X31, 0xE0
	0x03A717D8 STR X30, [X31 + 0xB0]
	0x03A717DC STP X22, X21, [X31 + 0xC0]
	0x03A717E0 STP X20, X19, [X31 + 0xD0]
	0x03A717E4 CBZ X0, 0x3A71884
	0x03A717E8 LDR X8, [X0 + 0x18]
	0x03A717EC MOV X19, X0
	0x03A717F0 CMP W8, 0x1
	0x03A717F4 B.LT 0x3A71884
	0x03A717F8 MOV X21, X31
	0x03A717FC MOV W20, W31
	0x03A71800 AND X8, X8, 0x0
	0x03A71804 ADD X22, X19, 0x20
	0x03A71808 CMP X21, W8, UXTW
	0x03A7180C B.CS 0x3A718A0
	0x03A71810 LDR X8, [X22 + 0x20]
	0x03A71814 LDP V1, V0, [X22]
	0x03A71818 MOV W0, W31
	0x03A7181C MOV X1, X31
	0x03A71820 STR X8, [X31 + 0xA0]
	0x03A71824 ADD X8, X31, 0x58
	0x03A71828 STP V1, V0, [X31 + 0x80]
	0x03A7182C BL 0x3C4B258
	0x03A71830 LDUR V0, [X31 + 0x58]
	0x03A71834 LDUR V1, [X31 + 0x68]
	0x03A71838 LDR X8, [X31 + 0x78]
	0x03A7183C LDP V2, V3, [X31 + 0x80]
	0x03A71840 LDR X9, [X31 + 0xA0]
	0x03A71844 ADD X0, X31, 0x30
	0x03A71848 ADD X1, X31, 0x0
	0x03A7184C MOV X2, X31
	0x03A71850 STP V0, V1, [X31]
	0x03A71854 STR X8, [X31 + 0x20]
	0x03A71858 STP V2, V3, [X31 + 0x30]
	0x03A7185C STR X9, [X31 + 0x50]
	0x03A71860 BL 0x3C4B708
	0x03A71864 LDR W8, [X19 + 0x18]
	0x03A71868 AND W9, W0, 0x1
	0x03A7186C ADD X21, X21, 0x1
	0x03A71870 ADD W20, W20, W9
	0x03A71874 CMP X21, W8, SXTW
	0x03A71878 ADD X22, X22, 0x28
	0x03A7187C B.LT 0x3A71808
	0x03A71880 B 0x3A71888
	0x03A71884 MOV W20, W31
	0x03A71888 MOV W0, W20
	0x03A7188C LDP X20, X19, [X31 + 0xD0]
	0x03A71890 LDP X22, X21, [X31 + 0xC0]
	0x03A71894 LDR X30, [X31 + 0xB0]
	0x03A71898 ADD X31, X31, 0xE0
	0x03A7189C RET
	0x03A718A0 BL 0x1C16F28
	0x03A718A4 SUB X31, X31, 0xE0
	0x03A718A8 STR X30, [X31 + 0xB0]
	0x03A718AC STP X22, X21, [X31 + 0xC0]
	0x03A718B0 STP X20, X19, [X31 + 0xD0]
	0x03A718B4 CBZ X0, 0x3A7195C
	0x03A718B8 LDR X8, [X0 + 0x18]
	0x03A718BC MOV X19, X0
	0x03A718C0 CMP W8, 0x1
	0x03A718C4 B.LT 0x3A7195C
	0x03A718C8 MOV X21, X31
	0x03A718CC MOV W20, W31
	0x03A718D0 AND X8, X8, 0x0
	0x03A718D4 ADD X22, X19, 0x20

ISIL:
	001 Move [X31-64], X29
	002 Move [X31-56], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Subtract X31, X31, 1088
	010 Move X24, 0x972000
	011 Move X23, 0x6E4000
	012 Move W8, [X24+674]
	013 Move X23, [X23+32]
	014 Move W22, W3
	015 Move X20, X2
	016 Move X21, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x6E4000
	023 Move X0, [X0+32]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+674], W8
	027 NotImplemented "Instruction MOVI not yet implemented."
	028 Move [X31+992], V0
	029 Move [X31+1000], V0
	030 Move [X31+960], V0
	031 Move [X31+968], V0
	032 Move [X31+928], V0
	033 Move [X31+936], V0
	034 Move [X31+896], V0
	035 Move [X31+904], V0
	036 Move [X31+864], V0
	037 Move [X31+872], V0
	038 Move [X31+832], V0
	039 Move [X31+840], V0
	040 Move V1, [X20+32]
	041 Move V0, [X20+48]
	042 Move V3, [X20]
	043 Move V2, [X20+16]
	044 Add X8, X31, 768
	045 Add X0, X31, 704
	046 Move [X31+736], V1
	047 Move [X31+744], V0
	048 Move [X31+704], V3
	049 Move [X31+712], V2
	050 Move V1, [X21+32]
	051 Move V0, [X21+48]
	052 Move V3, [X21]
	053 Move V2, [X21+16]
	054 Add X1, X31, 640
	055 Move X2, X31
	056 Move [X31+672], V1
	057 Move [X31+680], V0
	058 Move [X31+640], V3
	059 Move [X31+648], V2
	060 Call Matrix4x4.op_Multiply, X0, X1
	061 Move V0, [X31+768]
	062 Move V1, [X31+784]
	063 Move V2, [X31+800]
	064 Move V3, [X31+816]
	065 Move X0, [X23]
	066 Move [X31+64], V0
	067 Move [X31+65], V1
	068 Move [X31+66], V2
	069 Move [X31+67], V3
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {75}
	073 Call 0x1C17DFC
	074 Move X0, [X23]
	075 Move X8, [X0+184]
	076 Move V0, [X21+32]
	077 Move V1, [X21+48]
	078 Move V2, [X21]
	079 Move V3, [X21+16]
	080 Move W1, [X8+92]
	081 Move [X31+800], V0
	082 Move [X31+808], V1
	083 Move [X31+768], V2
	084 Move [X31+776], V3
	085 Compare X19, 0
	086 JumpIfEqual {258}
	087 Move V0, [X31+768]
	088 Move V1, [X31+784]
	089 Move V2, [X31+800]
	090 Move V3, [X31+816]
	091 Add X2, X31, 576
	092 Move X0, X19
	093 Move X3, X31
	094 Move [X31+576], V0
	095 Move [X31+584], V1
	096 Move [X31+608], V2
	097 Move [X31+616], V3
	098 Call CommandBuffer.SetGlobalMatrix, X0, X1, X2
	099 Move X8, [X23]
	100 Move V0, [X20+32]
	101 Move V1, [X20+48]
	102 Move V3, [X20]
	103 Move V2, [X20+16]
	104 Add X2, X31, 512
	105 Move X8, [X8+184]
	106 Move X0, X19
	107 Move X3, X31
	108 Move W1, [X8+96]
	109 Move [X31+544], V0
	110 Move [X31+552], V1
	111 Move [X31+512], V3
	112 Move [X31+520], V2
	113 Call CommandBuffer.SetGlobalMatrix, X0, X1, X2
	114 Move X8, [X23]
	115 Move V0, [X31+64]
	116 Move V1, [X31+65]
	117 Move V2, [X31+66]
	118 Move X8, [X8+184]
	119 Move V3, [X31+67]
	120 Add X2, X31, 448
	121 Move X0, X19
	122 Move W1, [X8+100]
	123 Move X3, X31
	124 Move [X31+448], V0
	125 Move [X31+456], V1
	126 Move [X31+480], V2
	127 Move [X31+488], V3
	128 Call CommandBuffer.SetGlobalMatrix, X0, X1, X2
	129 Move TEMP, X22
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfNotEqual {248}
	133 Move V1, [X21+32]
	134 Move V0, [X21+48]
	135 Move V3, [X21]
	136 Move V2, [X21+16]
	137 Add X8, X31, 768
	138 Add X0, X31, 384
	139 Move X1, X31
	140 Move [X31+416], V1
	141 Move [X31+424], V0
	142 Move [X31+384], V3
	143 Move [X31+392], V2
	144 Call Matrix4x4.Inverse, X0
	145 Move V0, [X31+768]
	146 Move V1, [X31+784]
	147 Move V2, [X31+800]
	148 Move V3, [X31+816]
	149 Add X8, X31, 768
	150 Add X0, X31, 320
	151 Move [X31+960], V0
	152 Move [X31+968], V1
	153 Move [X31+992], V2
	154 Move [X31+1000], V3
	155 Move V1, [X20+32]
	156 Move V0, [X20+48]
	157 Move V3, [X20]
	158 Move V2, [X20+16]
	159 Move X1, X31
	160 Move [X31+352], V1
	161 Move [X31+360], V0
	162 Move [X31+320], V3
	163 Move [X31+328], V2
	164 Call Matrix4x4.Inverse, X0
	165 Move V2, [X31+960]
	166 Move V3, [X31+976]
	167 Move V1, [X31+800]
	168 Move V0, [X31+816]
	169 Move V5, [X31+768]
	170 Move V4, [X31+784]
	171 Add X8, X31, 768
	172 Move [X31+256], V2
	173 Move [X31+264], V3
	174 Move V2, [X31+992]
	175 Move V3, [X31+1008]
	176 Add X0, X31, 256
	177 Add X1, X31, 192
	178 Move X2, X31
	179 Move [X31+928], V1
	180 Move [X31+936], V0
	181 Move [X31+896], V5
	182 Move [X31+904], V4
	183 Move [X31+288], V2
	184 Move [X31+296], V3
	185 Move [X31+224], V1
	186 Move [X31+232], V0
	187 Move [X31+192], V5
	188 Move [X31+200], V4
	189 Call Matrix4x4.op_Multiply, X0, X1
	190 Move V0, [X31+768]
	191 Move V1, [X31+784]
	192 Move V2, [X31+800]
	193 Move V3, [X31+816]
	194 Move X0, [X23]
	195 Move [X31+832], V0
	196 Move [X31+840], V1
	197 Move [X31+864], V2
	198 Move [X31+872], V3
	199 Move W8, [X0+224]
	200 Compare W8, 0
	201 JumpIfNotEqual {204}
	202 Call 0x1C17DFC
	203 Move X0, [X23]
	204 Move X8, [X0+184]
	205 Move V0, [X31+960]
	206 Move V1, [X31+976]
	207 Move V2, [X31+992]
	208 Move V3, [X31+1008]
	209 Add X2, X31, 128
	210 Move W1, [X8+104]
	211 Move X0, X19
	212 Move X3, X31
	213 Move [X31+128], V0
	214 Move [X31+136], V1
	215 Move [X31+160], V2
	216 Move [X31+168], V3
	217 Call CommandBuffer.SetGlobalMatrix, X0, X1, X2
	218 Move X8, [X23]
	219 Move V0, [X31+896]
	220 Move V1, [X31+912]
	221 Move V2, [X31+928]
	222 Move V3, [X31+944]
	223 Add X2, X31, 64
	224 Move X8, [X8+184]
	225 Move X0, X19
	226 Move X3, X31
	227 Move W1, [X8+108]
	228 Move [X31+64], V0
	229 Move [X31+72], V1
	230 Move [X31+96], V2
	231 Move [X31+104], V3
	232 Call CommandBuffer.SetGlobalMatrix, X0, X1, X2
	233 Move X8, [X23]
	234 Move V0, [X31+832]
	235 Move V1, [X31+848]
	236 Move V2, [X31+864]
	237 Move V3, [X31+880]
	238 Add X2, X31, 0
	239 Move X8, [X8+184]
	240 Move X0, X19
	241 Move X3, X31
	242 Move W1, [X8+112]
	243 Move [X31], V0
	244 Move [X31+8], V1
	245 Move [X31+32], V2
	246 Move [X31+40], V3
	247 Call CommandBuffer.SetGlobalMatrix, X0, X1, X2
	248 Add X31, X31, 1088
	249 Move X20, [X31+48]
	250 Move X19, [X31+56]
	251 Move X22, [X31+32]
	252 Move X21, [X31+40]
	253 Move X24, [X31+16]
	254 Move X23, [X31+24]
	255 Move X29, [X31+64]
	256 Move X30, [X31+72]
	257 Return 
	258 Call 0x1C17F20

Method: System.Void SetScaleBiasRt(UnityEngine.Rendering.CommandBuffer cmd, in UnityEngine.Rendering.Universal.RenderingData renderingData)

Disassembly:
	0x03A718D8 CMP X21, W8, UXTW
	0x03A718DC B.CS 0x3A71978
	0x03A718E0 LDR X9, [X22, X21, LSL #3]
	0x03A718E4 CBZ X9, 0x3A7194C
	0x03A718E8 LDR X8, [X9 + 0x48]
	0x03A718EC LDUR V0, [X9 + 0x38]
	0x03A718F0 LDUR V1, [X9 + 0x28]
	0x03A718F4 MOV W0, W31
	0x03A718F8 STR X8, [X31 + 0xA0]
	0x03A718FC ADD X8, X31, 0x58
	0x03A71900 MOV X1, X31
	0x03A71904 STP V1, V0, [X31 + 0x80]
	0x03A71908 BL 0x3C4B258
	0x03A7190C LDUR V0, [X31 + 0x58]
	0x03A71910 LDUR V1, [X31 + 0x68]
	0x03A71914 LDR X8, [X31 + 0x78]
	0x03A71918 LDP V2, V3, [X31 + 0x80]
	0x03A7191C LDR X9, [X31 + 0xA0]
	0x03A71920 ADD X0, X31, 0x30
	0x03A71924 ADD X1, X31, 0x0
	0x03A71928 MOV X2, X31
	0x03A7192C STP V0, V1, [X31]
	0x03A71930 STR X8, [X31 + 0x20]
	0x03A71934 STP V2, V3, [X31 + 0x30]
	0x03A71938 STR X9, [X31 + 0x50]
	0x03A7193C BL 0x3C4B708
	0x03A71940 LDR W8, [X19 + 0x18]
	0x03A71944 AND W9, W0, 0x1
	0x03A71948 ADD W20, W20, W9
	0x03A7194C ADD X21, X21, 0x1
	0x03A71950 CMP X21, W8, SXTW
	0x03A71954 B.LT 0x3A718D8
	0x03A71958 B 0x3A71960
	0x03A7195C MOV W20, W31
	0x03A71960 MOV W0, W20
	0x03A71964 LDP X20, X19, [X31 + 0xD0]
	0x03A71968 LDP X22, X21, [X31 + 0xC0]
	0x03A7196C LDR X30, [X31 + 0xB0]
	0x03A71970 ADD X31, X31, 0xE0
	0x03A71974 RET
	0x03A71978 BL 0x1C16F28
	0x03A7197C STP X30, X21, [X31 - 0x20]!
	0x03A71980 STP X20, X19, [X31 + 0x10]
	0x03A71984 ADRP X20, 0x971000
	0x03A71988 ADRP X21, 0x6E3000
	0x03A7198C LDRB W8, [X20 + 0x2AB]
	0x03A71990 LDR X21, [X21 + 0x10]
	0x03A71994 MOV X19, X0
	0x03A71998 TBNZ X8, 0x0, 0x3A719B0
	0x03A7199C ADRP X0, 0x6E3000
	0x03A719A0 LDR X0, [X0 + 0x10]
	0x03A719A4 BL 0x1C16CF4
	0x03A719A8 MOVZ W8, 0x1
	0x03A719AC STRB W8, [X20 + 0x2AB]
	0x03A719B0 LDR X0, [X21]
	0x03A719B4 LDR W8, [X0 + 0xE0]
	0x03A719B8 CBNZ W8, 0x3A719C0
	0x03A719BC BL 0x1C16DFC
	0x03A719C0 MOV X0, X19
	0x03A719C4 BL 0x3A717D4
	0x03A719C8 LDP X20, X19, [X31 + 0x10]
	0x03A719CC CMP W0, 0x1
	0x03A719D0 CSET W0, HI
	0x03A719D4 LDP X30, X21, [X31], #0x20
	0x03A719D8 RET
	0x03A719DC STP X30, X21, [X31 - 0x20]!
	0x03A719E0 STP X20, X19, [X31 + 0x10]
	0x03A719E4 ADRP X20, 0x971000
	0x03A719E8 ADRP X21, 0x6E3000
	0x03A719EC LDRB W8, [X20 + 0x2AC]
	0x03A719F0 LDR X21, [X21 + 0x10]
	0x03A719F4 MOV X19, X0
	0x03A719F8 TBNZ X8, 0x0, 0x3A71A10
	0x03A719FC ADRP X0, 0x6E3000
	0x03A71A00 LDR X0, [X0 + 0x10]
	0x03A71A04 BL 0x1C16CF4
	0x03A71A08 MOVZ W8, 0x1
	0x03A71A0C STRB W8, [X20 + 0x2AC]
	0x03A71A10 LDR X0, [X21]
	0x03A71A14 LDR W8, [X0 + 0xE0]
	0x03A71A18 CBNZ W8, 0x3A71A20
	0x03A71A1C BL 0x1C16DFC
	0x03A71A20 MOV X0, X19
	0x03A71A24 BL 0x3A718A4
	0x03A71A28 LDP X20, X19, [X31 + 0x10]
	0x03A71A2C CMP W0, 0x1
	0x03A71A30 CSET W0, HI
	0x03A71A34 LDP X30, X21, [X31], #0x20
	0x03A71A38 RET
	0x03A71A3C SUB X31, X31, 0x90
	0x03A71A40 STP X30, X23, [X31 + 0x60]

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+176], D9
	003 Move [X31+184], D8
	004 Move [X31+192], X30
	005 Move [X31+200], X21
	006 Move [X31+208], X20
	007 Move [X31+216], X19
	008 Move X21, 0x972000
	009 Move W8, [X21+675]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x683000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move X0, 0x6E0000
	020 Move X0, [X0+1472]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+675], W8
	024 Move W8, [X20+384]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X0, [X20+464]
	027 Compare X0, 0
	028 JumpIfEqual {113}
	029 Move X20, [X20+216]
	030 Move X1, X31
	031 Call ScriptableRenderer.get_cameraColorTargetHandle, X0
	032 Compare X0, 0
	033 JumpIfEqual {113}
	034 Move X8, [X0+72]
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction LDUR not yet implemented."
	037 Move W0, 2
	038 Move [X31+160], X8
	039 Add X8, X31, 88
	040 Move X1, X31
	041 Move [X31+128], V1
	042 Move [X31+136], V0
	043 Call RenderTargetIdentifier.op_Implicit, X0
	044 NotImplemented "Instruction LDUR not yet implemented."
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 Move X8, [X31+120]
	047 Move V2, [X31+128]
	048 Move V3, [X31+144]
	049 Move X9, [X31+160]
	050 Add X0, X31, 48
	051 Add X1, X31, 0
	052 Move X2, X31
	053 Move [X31], V0
	054 Move [X31+8], V1
	055 Move [X31+32], X8
	056 Move [X31+48], V2
	057 Move [X31+56], V3
	058 Move [X31+80], X9
	059 Call RenderTargetIdentifier.op_Equality, X0, X1
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {88}
	064 Compare X20, 0
	065 JumpIfEqual {113}
	066 Move X0, X20
	067 Move X1, X31
	068 Call Camera.get_targetTexture, X0
	069 Move X8, 0x683000
	070 Move X8, [X8+1432]
	071 Move X20, X0
	072 Move X8, [X8]
	073 Move W9, [X8+224]
	074 Compare W9, 0
	075 JumpIfNotEqual {78}
	076 Move X0, X8
	077 Call 0x1C17DFC
	078 Move X0, X20
	079 Move X1, X31
	080 Move X2, X31
	081 Call Object.op_Equality, X0, X1
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {88}
	086 Move S8, W31
	087 Move S9, 1
	088 Move S8, 1
	089 Move S9, -1
	090 Move X8, 0x6E0000
	091 Move X8, [X8+1472]
	092 Move X1, X31
	093 Move X0, [X8]
	094 Call Shader.PropertyToID, X0
	095 Compare X19, 0
	096 JumpIfEqual {113}
	097 Move W1, W0
	098 Move S3, 1
	099 Move X0, X19
	100 Move V0, V9
	101 Move V1, V8
	102 Move V2, V9
	103 Move X2, X31
	104 Call CommandBuffer.SetGlobalVector, X0, X1, X2
	105 Move X20, [X31+208]
	106 Move X19, [X31+216]
	107 Move X30, [X31+192]
	108 Move X21, [X31+200]
	109 Move D9, [X31+176]
	110 Move D8, [X31+184]
	111 Add X31, X31, 224
	112 Return 
	113 Call 0x1C17F20

Method: System.Void Blit(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle source, UnityEngine.Rect viewport, UnityEngine.Rendering.RTHandle destination, UnityEngine.Rendering.RenderBufferLoadAction loadAction, UnityEngine.Rendering.RenderBufferStoreAction storeAction, UnityEngine.Rendering.ClearFlag clearFlag, UnityEngine.Color clearColor, UnityEngine.Material material, System.Int32 passIndex = 0)

Disassembly:
	0x03A71A44 STP X22, X21, [X31 + 0x70]
	0x03A71A48 STP X20, X19, [X31 + 0x80]
	0x03A71A4C CBZ X0, 0x3A71AE8
	0x03A71A50 LDR X8, [X0 + 0x18]
	0x03A71A54 MOV X20, X0
	0x03A71A58 CMP W8, 0x0
	0x03A71A5C CSET W21, GT
	0x03A71A60 CMP W8, 0x1
	0x03A71A64 B.LT 0x3A71ACC
	0x03A71A68 MOV X19, X1
	0x03A71A6C MOV X22, X31
	0x03A71A70 AND X8, X8, 0x0
	0x03A71A74 ADD X23, X20, 0x20
	0x03A71A78 CMP X22, W8, UXTW
	0x03A71A7C B.CS 0x3A71AE4
	0x03A71A80 LDR X8, [X23 + 0x20]
	0x03A71A84 LDP V1, V0, [X23]
	0x03A71A88 ADD X0, X31, 0x30
	0x03A71A8C ADD X1, X31, 0x0
	0x03A71A90 STR X8, [X31 + 0x50]
	0x03A71A94 STP V1, V0, [X31 + 0x30]
	0x03A71A98 LDR X8, [X19 + 0x20]
	0x03A71A9C LDP V1, V0, [X19]
	0x03A71AA0 MOV X2, X31
	0x03A71AA4 STR X8, [X31 + 0x20]
	0x03A71AA8 STP V1, V0, [X31]
	0x03A71AAC BL 0x3C4B6D8
	0x03A71AB0 TBNZ X0, 0x0, 0x3A71ACC
	0x03A71AB4 LDR W8, [X20 + 0x18]
	0x03A71AB8 ADD X22, X22, 0x1
	0x03A71ABC ADD X23, X23, 0x28
	0x03A71AC0 CMP X22, W8, SXTW
	0x03A71AC4 CSET W21, LT
	0x03A71AC8 B.LT 0x3A71A78
	0x03A71ACC AND W0, W21, 0x1
	0x03A71AD0 LDP X20, X19, [X31 + 0x80]
	0x03A71AD4 LDP X22, X21, [X31 + 0x70]
	0x03A71AD8 LDP X30, X23, [X31 + 0x60]
	0x03A71ADC ADD X31, X31, 0x90
	0x03A71AE0 RET
	0x03A71AE4 BL 0x1C16F28
	0x03A71AE8 BL 0x1C16F20
	0x03A71AEC SUB X31, X31, 0x90
	0x03A71AF0 STR X30, [X31 + 0x60]
	0x03A71AF4 STP X22, X21, [X31 + 0x70]
	0x03A71AF8 STP X20, X19, [X31 + 0x80]
	0x03A71AFC CBZ X0, 0x3A71B90
	0x03A71B00 LDR X8, [X0 + 0x18]
	0x03A71B04 MOV X21, X0
	0x03A71B08 CMP W8, 0x1
	0x03A71B0C B.LT 0x3A71B70
	0x03A71B10 MOV X20, X1
	0x03A71B14 MOV X19, X31
	0x03A71B18 AND X8, X8, 0x0
	0x03A71B1C ADD X22, X21, 0x20
	0x03A71B20 CMP X19, W8, UXTW
	0x03A71B24 B.CS 0x3A71B8C
	0x03A71B28 LDR X8, [X22 + 0x20]
	0x03A71B2C LDP V1, V0, [X22]
	0x03A71B30 ADD X0, X31, 0x30
	0x03A71B34 ADD X1, X31, 0x0
	0x03A71B38 STR X8, [X31 + 0x50]
	0x03A71B3C STP V1, V0, [X31 + 0x30]
	0x03A71B40 LDR X8, [X20 + 0x20]
	0x03A71B44 LDP V1, V0, [X20]
	0x03A71B48 MOV X2, X31
	0x03A71B4C STR X8, [X31 + 0x20]
	0x03A71B50 STP V1, V0, [X31]
	0x03A71B54 BL 0x3C4B6D8
	0x03A71B58 TBNZ X0, 0x0, 0x3A71B74
	0x03A71B5C LDR W8, [X21 + 0x18]
	0x03A71B60 ADD X19, X19, 0x1
	0x03A71B64 ADD X22, X22, 0x28
	0x03A71B68 CMP X19, W8, SXTW
	0x03A71B6C B.LT 0x3A71B20
	0x03A71B70 MOVN W19, 0x0
	0x03A71B74 MOV W0, W19
	0x03A71B78 LDP X20, X19, [X31 + 0x80]
	0x03A71B7C LDP X22, X21, [X31 + 0x70]
	0x03A71B80 LDR X30, [X31 + 0x60]
	0x03A71B84 ADD X31, X31, 0x90
	0x03A71B88 RET
	0x03A71B8C BL 0x1C16F28
	0x03A71B90 BL 0x1C16F20
	0x03A71B94 SUB X31, X31, 0x150
	0x03A71B98 STR X29, [X31 + 0x110]
	0x03A71B9C STP X30, X23, [X31 + 0x120]
	0x03A71BA0 STP X22, X21, [X31 + 0x130]
	0x03A71BA4 STP X20, X19, [X31 + 0x140]
	0x03A71BA8 CBZ X0, 0x3A71CB0
	0x03A71BAC LDR X8, [X0 + 0x18]
	0x03A71BB0 MOV X20, X0
	0x03A71BB4 CMP W8, 0x1
	0x03A71BB8 B.LT 0x3A71C8C
	0x03A71BBC MOV X19, X1
	0x03A71BC0 MOV W21, W31
	0x03A71BC4 MOV X22, X31
	0x03A71BC8 AND X8, X8, 0x0
	0x03A71BCC ADD X23, X20, 0x20
	0x03A71BD0 CMP X22, W8, UXTW
	0x03A71BD4 B.CS 0x3A71CAC
	0x03A71BD8 LDR X8, [X23 + 0x20]
	0x03A71BDC LDP V1, V0, [X23]
	0x03A71BE0 ADD X0, X31, 0xE0
	0x03A71BE4 ADD X1, X31, 0xB0
	0x03A71BE8 STR X8, [X31 + 0x100]
	0x03A71BEC STP V1, V0, [X31 + 0xE0]
	0x03A71BF0 LDR X8, [X19 + 0x20]
	0x03A71BF4 LDP V1, V0, [X19]
	0x03A71BF8 MOV X2, X31
	0x03A71BFC STR X8, [X31 + 0xD0]
	0x03A71C00 STP V1, V0, [X31 + 0xB0]
	0x03A71C04 BL 0x3C4B708

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+64], D13
	003 Move [X31+72], D12
	004 Move [X31+80], D11
	005 Move [X31+88], D10
	006 Move [X31+96], D9
	007 Move [X31+104], D8
	008 Move [X31+112], X30
	009 Move [X31+120], X27
	010 Move [X31+128], X26
	011 Move [X31+136], X25
	012 Move [X31+144], X24
	013 Move [X31+152], X23
	014 Move [X31+160], X22
	015 Move [X31+168], X21
	016 Move [X31+176], X20
	017 Move [X31+184], X19
	018 Move X26, 0x972000
	019 Move W8, [X26+676]
	020 Move W19, W7
	021 Move X20, X6
	022 Move W23, W4
	023 Move W24, W3
	024 Move X25, X2
	025 Move V8, V3
	026 Move V9, V2
	027 Move V10, V1
	028 Move V11, V0
	029 Move X21, X1
	030 Move X22, X0
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {43}
	035 Move X0, 0x6E2000
	036 Move X0, [X0+3624]
	037 Call 0x1C17CF4
	038 Move X0, 0x6AB000
	039 Move X0, [X0+2296]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X26+676], W8
	043 Compare X21, 0
	044 JumpIfEqual {142}
	045 Move X26, 0x6AB000
	046 Move W8, [X21+168]
	047 Move X26, [X26+2296]
	048 Compare W8, 0
	049 JumpIfEqual {60}
	050 Add X8, X31, 16
	051 Move X0, X21
	052 Move X1, X31
	053 Call RTHandle.get_rtHandleProperties, X0
	054 Move V12, [X31+48]
	055 Add X8, X31, 16
	056 Move X0, X21
	057 Move X1, X31
	058 Call RTHandle.get_rtHandleProperties, X0
	059 Move V13, [X31+52]
	060 Move X27, 0x971000
	061 Move W8, [X27+2632]
	062 Compare W8, 0
	063 JumpIfNotEqual {69}
	064 Move X0, 0x68B000
	065 Move X0, [X0+3848]
	066 Call 0x1C17CF4
	067 Move W8, 1
	068 Move [X27+2632], W8
	069 Move X8, 0x68B000
	070 Move X8, [X8+3848]
	071 Move X8, [X8]
	072 Move X8, [X8+184]
	073 Move S12, [X8+8]
	074 Move S13, [X8+12]
	075 Move X0, [X26]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move S0, W31
	081 Move S1, W31
	082 Move S2, W31
	083 Move S3, W31
	084 Move TEMP, 0
	085 Not TEMP
	086 Move W6, TEMP
	087 Move TEMP, 0
	088 Not TEMP
	089 Move W7, TEMP
	090 Move X0, X22
	091 Move X1, X25
	092 Move W2, W24
	093 Move W3, W23
	094 Move W4, W31
	095 Move W5, W31
	096 Move [X31], X31
	097 Call CoreUtils.SetRenderTarget, X0, X1, X2, X3, X4, X5, X6, X7, X8
	098 Compare X22, 0
	099 JumpIfEqual {142}
	100 Move X23, 0x6E2000
	101 Move X23, [X23+3624]
	102 Move X0, X22
	103 Move V0, V11
	104 Move V1, V10
	105 Move V2, V9
	106 Move V3, V8
	107 Move X1, X31
	108 Call CommandBuffer.SetViewport, X0, X1
	109 Move X0, [X23]
	110 Move W8, [X0+224]
	111 Compare W8, 0
	112 JumpIfNotEqual {114}
	113 Call 0x1C17DFC
	114 Move S2, W31
	115 Move S3, W31
	116 Move X0, X22
	117 Move X1, X21
	118 Move V0, V12
	119 Move V1, V13
	120 Move X2, X20
	121 Move W3, W19
	122 Move X4, X31
	123 Call Blitter.BlitTexture, X0, X1, X2, X3, X4
	124 Move X20, [X31+176]
	125 Move X19, [X31+184]
	126 Move X22, [X31+160]
	127 Move X21, [X31+168]
	128 Move X24, [X31+144]
	129 Move X23, [X31+152]
	130 Move X26, [X31+128]
	131 Move X25, [X31+136]
	132 Move X30, [X31+112]
	133 Move X27, [X31+120]
	134 Move D9, [X31+96]
	135 Move D8, [X31+104]
	136 Move D11, [X31+80]
	137 Move D10, [X31+88]
	138 Move D13, [X31+64]
	139 Move D12, [X31+72]
	140 Add X31, X31, 192
	141 Return 
	142 Call 0x1C17F20

Method: System.Void Blit(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Rendering.RTHandle source, UnityEngine.Rect viewport, UnityEngine.Rendering.RTHandle destinationColor, UnityEngine.Rendering.RenderBufferLoadAction colorLoadAction, UnityEngine.Rendering.RenderBufferStoreAction colorStoreAction, UnityEngine.Rendering.RTHandle destinationDepthStencil, UnityEngine.Rendering.RenderBufferLoadAction depthStencilLoadAction, UnityEngine.Rendering.RenderBufferStoreAction depthStencilStoreAction, UnityEngine.Rendering.ClearFlag clearFlag, UnityEngine.Color clearColor, UnityEngine.Material material, System.Int32 passIndex = 0)

Disassembly:
	0x03A71C08 TBZ X0, 0x0, 0x3A71C74
	0x03A71C0C LDR W8, [X20 + 0x18]
	0x03A71C10 CMP X22, X8
	0x03A71C14 B.CS 0x3A71CAC
	0x03A71C18 LDR X8, [X23 + 0x20]
	0x03A71C1C LDP V1, V0, [X23]
	0x03A71C20 MOV W0, W31
	0x03A71C24 MOV X1, X31
	0x03A71C28 STR X8, [X31 + 0xA0]
	0x03A71C2C ADD X8, X31, 0x58
	0x03A71C30 STP V1, V0, [X31 + 0x80]
	0x03A71C34 BL 0x3C4B258
	0x03A71C38 LDUR V0, [X31 + 0x58]
	0x03A71C3C LDUR V1, [X31 + 0x68]
	0x03A71C40 LDR X8, [X31 + 0x78]
	0x03A71C44 LDP V2, V3, [X31 + 0x80]
	0x03A71C48 LDR X9, [X31 + 0xA0]
	0x03A71C4C ADD X0, X31, 0x30
	0x03A71C50 ADD X1, X31, 0x0
	0x03A71C54 MOV X2, X31
	0x03A71C58 STP V0, V1, [X31]
	0x03A71C5C STR X8, [X31 + 0x20]
	0x03A71C60 STP V2, V3, [X31 + 0x30]
	0x03A71C64 STR X9, [X31 + 0x50]
	0x03A71C68 BL 0x3C4B708
	0x03A71C6C AND W8, W0, 0x1
	0x03A71C70 ADD W21, W21, W8
	0x03A71C74 LDR W8, [X20 + 0x18]
	0x03A71C78 ADD X22, X22, 0x1
	0x03A71C7C ADD X23, X23, 0x28
	0x03A71C80 CMP X22, W8, SXTW
	0x03A71C84 B.LT 0x3A71BD0
	0x03A71C88 B 0x3A71C90
	0x03A71C8C MOV W21, W31
	0x03A71C90 MOV W0, W21
	0x03A71C94 LDP X20, X19, [X31 + 0x140]
	0x03A71C98 LDP X22, X21, [X31 + 0x130]
	0x03A71C9C LDP X30, X23, [X31 + 0x120]
	0x03A71CA0 LDR X29, [X31 + 0x110]
	0x03A71CA4 ADD X31, X31, 0x150
	0x03A71CA8 RET
	0x03A71CAC BL 0x1C16F28
	0x03A71CB0 BL 0x1C16F20
	0x03A71CB4 SUB X31, X31, 0xD0
	0x03A71CB8 STP X30, X21, [X31 + 0xB0]
	0x03A71CBC STP X20, X19, [X31 + 0xC0]
	0x03A71CC0 CBZ X0, 0x3A71D60
	0x03A71CC4 LDR W19, [X0 + 0x18]
	0x03A71CC8 MOV X20, X0
	0x03A71CCC MOVZ W21, 0x28
	0x03A71CD0 SUBS W19, W19, 0x1
	0x03A71CD4 B.MI 0x3A71D44
	0x03A71CD8 LDR W8, [X20 + 0x18]
	0x03A71CDC CMP W19, W8
	0x03A71CE0 B.CS 0x3A71D5C
	0x03A71CE4 UMADDL X8, X19, X21, X20
	0x03A71CE8 LDR X9, [X8 + 0x40]
	0x03A71CEC LDP V1, V0, [X8 + 0x20]
	0x03A71CF0 ADD X8, X31, 0x58
	0x03A71CF4 MOV W0, W31
	0x03A71CF8 MOV X1, X31
	0x03A71CFC STR X9, [X31 + 0xA0]
	0x03A71D00 STP V1, V0, [X31 + 0x80]
	0x03A71D04 BL 0x3C4B258
	0x03A71D08 LDUR V0, [X31 + 0x58]
	0x03A71D0C LDUR V1, [X31 + 0x68]
	0x03A71D10 LDR X8, [X31 + 0x78]
	0x03A71D14 LDP V2, V3, [X31 + 0x80]
	0x03A71D18 LDR X9, [X31 + 0xA0]
	0x03A71D1C ADD X0, X31, 0x30
	0x03A71D20 ADD X1, X31, 0x0
	0x03A71D24 MOV X2, X31
	0x03A71D28 STP V0, V1, [X31]
	0x03A71D2C STR X8, [X31 + 0x20]
	0x03A71D30 STP V2, V3, [X31 + 0x30]
	0x03A71D34 STR X9, [X31 + 0x50]
	0x03A71D38 BL 0x3C4B708
	0x03A71D3C TBZ X0, 0x0, 0x3A71CD0
	0x03A71D40 B 0x3A71D48
	0x03A71D44 MOVN W19, 0x0
	0x03A71D48 MOV W0, W19
	0x03A71D4C LDP X20, X19, [X31 + 0xC0]
	0x03A71D50 LDP X30, X21, [X31 + 0xB0]
	0x03A71D54 ADD X31, X31, 0xD0
	0x03A71D58 RET
	0x03A71D5C BL 0x1C16F28
	0x03A71D60 BL 0x1C16F20
	0x03A71D64 BICS W31, W1, W0, 0x0
	0x03A71D68 CSET W0, EQ
	0x03A71D6C RET
	0x03A71D70 SUB X31, X31, 0xC0
	0x03A71D74 STP X30, X23, [X31 + 0x90]
	0x03A71D78 STP X22, X21, [X31 + 0xA0]
	0x03A71D7C STP X20, X19, [X31 + 0xB0]
	0x03A71D80 CBZ X0, 0x3A71E58
	0x03A71D84 MOV X19, X1
	0x03A71D88 CBZ X1, 0x3A71E58
	0x03A71D8C LDR X8, [X0 + 0x18]
	0x03A71D90 LDR W9, [X19 + 0x18]
	0x03A71D94 MOV X20, X0
	0x03A71D98 CMP W8, W9
	0x03A71D9C B.NE 0x3A71E30
	0x03A71DA0 CMP W8, 0x1
	0x03A71DA4 B.LT 0x3A71E38
	0x03A71DA8 MOV X21, X31
	0x03A71DAC AND X8, X8, 0x0
	0x03A71DB0 ADD X22, X20, 0x20
	0x03A71DB4 ADD X23, X19, 0x20
	0x03A71DB8 CMP X21, W8, UXTW
	0x03A71DBC B.CS 0x3A71E54
	0x03A71DC0 LDR X8, [X22 + 0x20]
	0x03A71DC4 LDP V1, V0, [X22]
	0x03A71DC8 STR X8, [X31 + 0x80]
	0x03A71DCC STP V1, V0, [X31 + 0x60]
	0x03A71DD0 LDR W8, [X19 + 0x18]
	0x03A71DD4 CMP X21, X8
	0x03A71DD8 B.CS 0x3A71E54
	0x03A71DDC LDP V0, V1, [X23]
	0x03A71DE0 LDR X8, [X23 + 0x20]
	0x03A71DE4 LDP V2, V3, [X31 + 0x60]
	0x03A71DE8 LDR X9, [X31 + 0x80]
	0x03A71DEC ADD X0, X31, 0x30
	0x03A71DF0 ADD X1, X31, 0x0
	0x03A71DF4 MOV X2, X31
	0x03A71DF8 STR X8, [X31 + 0x20]
	0x03A71DFC STP V0, V1, [X31]
	0x03A71E00 STP V2, V3, [X31 + 0x30]
	0x03A71E04 STR X9, [X31 + 0x50]
	0x03A71E08 BL 0x3C4B708

ISIL:
	001 Subtract X31, X31, 256
	002 Move [X31+96], D15
	003 Move [X31+104], D14
	004 Move [X31+112], D13
	005 Move [X31+120], D12
	006 Move [X31+128], D11
	007 Move [X31+136], D10
	008 Move [X31+144], D9
	009 Move [X31+152], D8
	010 Move [X31+160], X29
	011 Move [X31+168], X30
	012 Move [X31+176], X28
	013 Move [X31+184], X27
	014 Move [X31+192], X26
	015 Move [X31+200], X25
	016 Move [X31+208], X24
	017 Move [X31+216], X23
	018 Move [X31+224], X22
	019 Move [X31+232], X21
	020 Move [X31+240], X20
	021 Move [X31+248], X19
	022 Move X27, 0x972000
	023 Move W8, [X27+677]
	024 Move V14, V7
	025 Move V15, V6
	026 Move V8, V5
	027 Move V9, V4
	028 Move W21, W7
	029 Move W22, W6
	030 Move X23, X5
	031 Move W24, W4
	032 Move W25, W3
	033 Move X26, X2
	034 Move V10, V3
	035 Move V11, V2
	036 Move V12, V1
	037 Move V13, V0
	038 Move X19, X1
	039 Move X20, X0
	040 Move TEMP, X8
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {52}
	044 Move X0, 0x6E2000
	045 Move X0, [X0+3624]
	046 Call 0x1C17CF4
	047 Move X0, 0x6AB000
	048 Move X0, [X0+2296]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X27+677], W8
	052 Compare X19, 0
	053 JumpIfEqual {162}
	054 Move X28, 0x6AB000
	055 Move W8, [X19+168]
	056 Move W27, [X31+256]
	057 Move X28, [X28+2296]
	058 Move [X31+40], S11
	059 Move [X31+48], S10
	060 Compare W8, 0
	061 JumpIfEqual {72}
	062 Add X8, X31, 48
	063 Move X0, X19
	064 Move X1, X31
	065 Call RTHandle.get_rtHandleProperties, X0
	066 Move V10, [X31+80]
	067 Add X8, X31, 48
	068 Move X0, X19
	069 Move X1, X31
	070 Call RTHandle.get_rtHandleProperties, X0
	071 Move V11, [X31+84]
	072 Move X29, 0x971000
	073 Move W8, [X29+2632]
	074 Compare W8, 0
	075 JumpIfNotEqual {81}
	076 Move X0, 0x68B000
	077 Move X0, [X0+3848]
	078 Call 0x1C17CF4
	079 Move W8, 1
	080 Move [X29+2632], W8
	081 Move X8, 0x68B000
	082 Move X8, [X8+3848]
	083 Move X8, [X8]
	084 Move X8, [X8+184]
	085 Move S10, [X8+8]
	086 Move S11, [X8+12]
	087 Move X0, [X28]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move TEMP, 0
	093 Not TEMP
	094 Move W8, TEMP
	095 Move V0, V9
	096 Move V1, V8
	097 Move V2, V15
	098 Move V3, V14
	099 Move X0, X20
	100 Move X1, X26
	101 Move W2, W25
	102 Move W3, W24
	103 Move X4, X23
	104 Move W5, W22
	105 Move W6, W21
	106 Move W7, W27
	107 Move [X31+24], X31
	108 Move [X31+16], W8
	109 Move [X31+8], W8
	110 Move [X31], W31
	111 Call CoreUtils.SetRenderTarget, X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11
	112 Compare X20, 0
	113 JumpIfEqual {162}
	114 Move X23, 0x6E2000
	115 Move X23, [X23+3624]
	116 Move S2, [X31+40]
	117 Move S3, [X31+44]
	118 Move W21, [X31+272]
	119 Move X22, [X31+264]
	120 Move X0, X20
	121 Move V0, V13
	122 Move V1, V12
	123 Move X1, X31
	124 Call CommandBuffer.SetViewport, X0, X1
	125 Move X0, [X23]
	126 Move W8, [X0+224]
	127 Compare W8, 0
	128 JumpIfNotEqual {130}
	129 Call 0x1C17DFC
	130 Move S2, W31
	131 Move S3, W31
	132 Move X0, X20
	133 Move X1, X19
	134 Move V0, V10
	135 Move V1, V11
	136 Move X2, X22
	137 Move W3, W21
	138 Move X4, X31
	139 Call Blitter.BlitTexture, X0, X1, X2, X3, X4
	140 Move X20, [X31+240]
	141 Move X19, [X31+248]
	142 Move X22, [X31+224]
	143 Move X21, [X31+232]
	144 Move X24, [X31+208]
	145 Move X23, [X31+216]
	146 Move X26, [X31+192]
	147 Move X25, [X31+200]
	148 Move X28, [X31+176]
	149 Move X27, [X31+184]
	150 Move X29, [X31+160]
	151 Move X30, [X31+168]
	152 Move D9, [X31+144]
	153 Move D8, [X31+152]
	154 Move D11, [X31+128]
	155 Move D10, [X31+136]
	156 Move D13, [X31+112]
	157 Move D12, [X31+120]
	158 Move D15, [X31+96]
	159 Move D14, [X31+104]
	160 Add X31, X31, 256
	161 Return 
	162 Call 0x1C17F20

Method: System.Void FinalBlit(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.CameraData cameraData, UnityEngine.Rendering.RTHandle source, UnityEngine.Rendering.RTHandle destination, UnityEngine.Rendering.RenderBufferLoadAction loadAction, UnityEngine.Rendering.RenderBufferStoreAction storeAction, UnityEngine.Material material, System.Int32 passIndex)

Disassembly:
	0x03A71E0C TBNZ X0, 0x0, 0x3A71E28
	0x03A71E10 LDR W8, [X20 + 0x18]
	0x03A71E14 ADD X21, X21, 0x1
	0x03A71E18 ADD X22, X22, 0x28
	0x03A71E1C ADD X23, X23, 0x28
	0x03A71E20 CMP X21, W8, SXTW
	0x03A71E24 B.LT 0x3A71DB8
	0x03A71E28 EOR W8, W0, 0x1
	0x03A71E2C B 0x3A71E3C
	0x03A71E30 MOV W8, W31
	0x03A71E34 B 0x3A71E3C
	0x03A71E38 MOVZ W8, 0x1
	0x03A71E3C LDP X20, X19, [X31 + 0xB0]
	0x03A71E40 LDP X22, X21, [X31 + 0xA0]
	0x03A71E44 LDP X30, X23, [X31 + 0x90]
	0x03A71E48 AND W0, W8, 0x1
	0x03A71E4C ADD X31, X31, 0xC0
	0x03A71E50 RET
	0x03A71E54 BL 0x1C16F28
	0x03A71E58 BL 0x1C16F20
	0x03A71E5C STR X30, [X31 - 0x20]!
	0x03A71E60 STP X20, X19, [X31 + 0x10]
	0x03A71E64 ADRP X20, 0x971000
	0x03A71E68 ADRP X19, 0x682000
	0x03A71E6C LDRB W8, [X20 + 0x2AD]
	0x03A71E70 LDR X19, [X19 + 0x970]
	0x03A71E74 TBNZ X8, 0x0, 0x3A71E8C
	0x03A71E78 ADRP X0, 0x682000
	0x03A71E7C LDR X0, [X0 + 0x970]
	0x03A71E80 BL 0x1C16CF4
	0x03A71E84 MOVZ W8, 0x1
	0x03A71E88 STRB W8, [X20 + 0x2AD]
	0x03A71E8C LDR X0, [X19]
	0x03A71E90 LDR W8, [X0 + 0xE0]
	0x03A71E94 CBNZ W8, 0x3A71E9C
	0x03A71E98 BL 0x1C16DFC
	0x03A71E9C MOV X0, X31
	0x03A71EA0 BL 0x3C01AB0
	0x03A71EA4 CBZ W0, 0x3A71EE4
	0x03A71EA8 LDR X0, [X19]
	0x03A71EAC LDR W8, [X0 + 0xE0]
	0x03A71EB0 CBNZ W8, 0x3A71EB8
	0x03A71EB4 BL 0x1C16DFC
	0x03A71EB8 MOV X0, X31
	0x03A71EBC BL 0x3C01AB0
	0x03A71EC0 CMP W0, 0x1
	0x03A71EC4 B.EQ 0x3A71EE4
	0x03A71EC8 MOV X0, X31
	0x03A71ECC BL 0x3C3C41C
	0x03A71ED0 TBZ X0, 0x0, 0x3A71EE4
	0x03A71ED4 LDP X20, X19, [X31 + 0x10]
	0x03A71ED8 MOV X0, X31
	0x03A71EDC LDR X30, [X31], #0x20
	0x03A71EE0 B 0x3C3C46C
	0x03A71EE4 LDP X20, X19, [X31 + 0x10]
	0x03A71EE8 MOV W0, W31
	0x03A71EEC LDR X30, [X31], #0x20
	0x03A71EF0 RET
	0x03A71EF4 SUB X31, X31, 0xB0
	0x03A71EF8 STR X30, [X31 + 0x80]
	0x03A71EFC STP X22, X21, [X31 + 0x90]
	0x03A71F00 STP X20, X19, [X31 + 0xA0]
	0x03A71F04 ADRP X22, 0x971000
	0x03A71F08 LDRB W8, [X22 + 0x2AE]
	0x03A71F0C MOV W21, W2
	0x03A71F10 MOV X19, X1
	0x03A71F14 MOV X20, X0
	0x03A71F18 TBNZ X8, 0x0, 0x3A71F30
	0x03A71F1C ADRP X0, 0x682000
	0x03A71F20 LDR X0, [X0 + 0x598]
	0x03A71F24 BL 0x1C16CF4
	0x03A71F28 MOVZ W8, 0x1
	0x03A71F2C STRB W8, [X22 + 0x2AE]
	0x03A71F30 MOVI V0.2D, 0x0
	0x03A71F34 STR W31, [X31 + 0x70]
	0x03A71F38 STP V0, V0, [X31 + 0x50]
	0x03A71F3C STR V0, [X31 + 0x4]
	0x03A71F40 CBZ X20, 0x3A72364
	0x03A71F44 ADRP X8, 0x682000
	0x03A71F48 LDR X8, [X8 + 0x598]
	0x03A71F4C LDR X22, [X20 + 0x18]
	0x03A71F50 LDR X0, [X8]
	0x03A71F54 LDR W8, [X0 + 0xE0]
	0x03A71F58 CBNZ W8, 0x3A71F60
	0x03A71F5C BL 0x1C16DFC
	0x03A71F60 MOV X0, X22
	0x03A71F64 MOV X1, X31
	0x03A71F68 MOV X2, X31
	0x03A71F6C BL 0x3C3883C
	0x03A71F70 TBNZ X0, 0x0, 0x3A72364
	0x03A71F74 LDRB W8, [X20 + 0xA8]
	0x03A71F78 AND W9, W21, 0x1
	0x03A71F7C CMP W8, 0x0
	0x03A71F80 CSET W8, EQ
	0x03A71F84 CMP W8, W9
	0x03A71F88 B.EQ 0x3A72364
	0x03A71F8C TBZ X21, 0x0, 0x3A72324
	0x03A71F90 LDR X0, [X20 + 0x18]
	0x03A71F94 CBZ X0, 0x3A72380
	0x03A71F98 ADD X8, X31, 0x8
	0x03A71F9C MOV X1, X31
	0x03A71FA0 BL 0x3C21334
	0x03A71FA4 LDUR V0, [X31 + 0x8]
	0x03A71FA8 LDUR V1, [X31 + 0x18]
	0x03A71FAC LDUR V2, [X31 + 0x28]
	0x03A71FB0 LDR W8, [X31 + 0x38]
	0x03A71FB4 ADD X0, X31, 0x40
	0x03A71FB8 MOV X1, X31
	0x03A71FBC STP V0, V1, [X31 + 0x40]
	0x03A71FC0 STR V2, [X31 + 0x6]
	0x03A71FC4 STR W8, [X31 + 0x70]
	0x03A71FC8 BL 0x3C224C4
	0x03A71FCC LDR W8, [X19 + 0x20]
	0x03A71FD0 CMP W0, W8
	0x03A71FD4 B.NE 0x3A72364
	0x03A71FD8 LDR X0, [X20 + 0x18]
	0x03A71FDC CBZ X0, 0x3A72380
	0x03A71FE0 ADD X8, X31, 0x8
	0x03A71FE4 MOV X1, X31
	0x03A71FE8 BL 0x3C21334
	0x03A71FEC LDUR V0, [X31 + 0x8]
	0x03A71FF0 LDUR V1, [X31 + 0x18]
	0x03A71FF4 LDUR V2, [X31 + 0x28]
	0x03A71FF8 LDR W8, [X31 + 0x38]
	0x03A71FFC ADD X0, X31, 0x40
	0x03A72000 MOV X1, X31
	0x03A72004 STP V0, V1, [X31 + 0x40]
	0x03A72008 STR V2, [X31 + 0x6]
	0x03A7200C STR W8, [X31 + 0x70]
	0x03A72010 BL 0x3C224C4
	0x03A72014 CBNZ W0, 0x3A72068
	0x03A72018 LDRB W8, [X19 + 0x37]
	0x03A7201C CBNZ W8, 0x3A72068
	0x03A72020 LDR X0, [X20 + 0x18]
	0x03A72024 CBZ X0, 0x3A72380
	0x03A72028 ADD X8, X31, 0x8
	0x03A7202C MOV X1, X31
	0x03A72030 BL 0x3C21334
	0x03A72034 LDUR V0, [X31 + 0x8]
	0x03A72038 LDUR V1, [X31 + 0x18]
	0x03A7203C LDUR V2, [X31 + 0x28]
	0x03A72040 LDR W8, [X31 + 0x38]
	0x03A72044 ADD X0, X31, 0x40
	0x03A72048 MOV X1, X31
	0x03A7204C STP V0, V1, [X31 + 0x40]
	0x03A72050 STR V2, [X31 + 0x6]
	0x03A72054 STR W8, [X31 + 0x70]
	0x03A72058 BL 0x3C22060
	0x03A7205C LDR W8, [X19 + 0x24]
	0x03A72060 CMP W0, W8
	0x03A72064 B.NE 0x3A72364
	0x03A72068 LDR X0, [X20 + 0x18]
	0x03A7206C CBZ X0, 0x3A72380
	0x03A72070 ADD X8, X31, 0x8
	0x03A72074 MOV X1, X31
	0x03A72078 BL 0x3C21334
	0x03A7207C LDUR V0, [X31 + 0x28]
	0x03A72080 LDUR V1, [X31 + 0x8]
	0x03A72084 LDUR V2, [X31 + 0x18]
	0x03A72088 LDR W8, [X31 + 0x38]
	0x03A7208C STR V1, [X31 + 0x4]
	0x03A72090 STP V2, V0, [X31 + 0x50]
	0x03A72094 STR W8, [X31 + 0x70]
	0x03A72098 LDR W8, [X31 + 0x60]
	0x03A7209C LDR W9, [X19 + 0x30]
	0x03A720A0 CMP W8, W9
	0x03A720A4 B.NE 0x3A72364
	0x03A720A8 LDR X0, [X20 + 0x18]
	0x03A720AC CBZ X0, 0x3A72380
	0x03A720B0 ADD X8, X31, 0x8
	0x03A720B4 MOV X1, X31
	0x03A720B8 BL 0x3C21334
	0x03A720BC LDUR V0, [X31 + 0x8]
	0x03A720C0 LDUR V1, [X31 + 0x18]
	0x03A720C4 LDUR V2, [X31 + 0x28]
	0x03A720C8 LDR W8, [X31 + 0x38]
	0x03A720CC ADD X0, X31, 0x40
	0x03A720D0 MOV X1, X31
	0x03A720D4 STP V0, V1, [X31 + 0x40]
	0x03A720D8 STR V2, [X31 + 0x6]
	0x03A720DC STR W8, [X31 + 0x70]
	0x03A720E0 BL 0x3C22B64
	0x03A720E4 LDRB W8, [X19 + 0x34]
	0x03A720E8 AND W9, W0, 0x1
	0x03A720EC CMP W8, W9
	0x03A720F0 B.NE 0x3A72364
	0x03A720F4 LDR X0, [X20 + 0x18]
	0x03A720F8 CBZ X0, 0x3A72380
	0x03A720FC ADD X8, X31, 0x8
	0x03A72100 MOV X1, X31
	0x03A72104 BL 0x3C21334
	0x03A72108 LDUR V0, [X31 + 0x8]
	0x03A7210C LDUR V1, [X31 + 0x18]
	0x03A72110 LDUR V2, [X31 + 0x28]
	0x03A72114 LDR W8, [X31 + 0x38]
	0x03A72118 ADD X0, X31, 0x40
	0x03A7211C MOV X1, X31
	0x03A72120 STP V0, V1, [X31 + 0x40]
	0x03A72124 STR V2, [X31 + 0x6]
	0x03A72128 STR W8, [X31 + 0x70]
	0x03A7212C BL 0x3C22B1C
	0x03A72130 LDRB W8, [X19 + 0x35]
	0x03A72134 AND W9, W0, 0x1
	0x03A72138 CMP W8, W9
	0x03A7213C B.NE 0x3A72364
	0x03A72140 LDR X0, [X20 + 0x18]
	0x03A72144 CBZ X0, 0x3A72380
	0x03A72148 ADD X8, X31, 0x8
	0x03A7214C MOV X1, X31
	0x03A72150 BL 0x3C21334
	0x03A72154 LDUR V0, [X31 + 0x8]
	0x03A72158 LDUR V1, [X31 + 0x18]
	0x03A7215C LDUR V2, [X31 + 0x28]
	0x03A72160 LDR W8, [X31 + 0x38]
	0x03A72164 ADD X0, X31, 0x40
	0x03A72168 MOV X1, X31
	0x03A7216C STP V0, V1, [X31 + 0x40]
	0x03A72170 STR V2, [X31 + 0x6]
	0x03A72174 STR W8, [X31 + 0x70]
	0x03A72178 BL 0x3C22B38
	0x03A7217C LDRB W8, [X19 + 0x36]
	0x03A72180 AND W9, W0, 0x1
	0x03A72184 CMP W8, W9
	0x03A72188 B.NE 0x3A72364
	0x03A7218C LDR X0, [X20 + 0x18]
	0x03A72190 CBZ X0, 0x3A72380
	0x03A72194 ADD X8, X31, 0x8
	0x03A72198 MOV X1, X31
	0x03A7219C BL 0x3C21334
	0x03A721A0 LDUR V0, [X31 + 0x8]
	0x03A721A4 LDUR V1, [X31 + 0x18]
	0x03A721A8 LDUR V2, [X31 + 0x28]
	0x03A721AC LDR W8, [X31 + 0x38]
	0x03A721B0 STP V0, V1, [X31 + 0x40]
	0x03A721B4 STR V2, [X31 + 0x6]
	0x03A721B8 STR W8, [X31 + 0x70]
	0x03A721BC LDR W8, [X31 + 0x48]
	0x03A721C0 LDR W9, [X19 + 0x40]
	0x03A721C4 CMP W8, W9
	0x03A721C8 B.NE 0x3A72364
	0x03A721CC LDR X0, [X20 + 0x18]
	0x03A721D0 CBZ X0, 0x3A72380
	0x03A721D4 ADD X8, X31, 0x8
	0x03A721D8 MOV X1, X31
	0x03A721DC BL 0x3C21334
	0x03A721E0 LDUR V0, [X31 + 0x8]
	0x03A721E4 LDUR V1, [X31 + 0x18]
	0x03A721E8 LDUR V2, [X31 + 0x28]
	0x03A721EC LDR W8, [X31 + 0x38]
	0x03A721F0 ADD X0, X31, 0x40
	0x03A721F4 MOV X1, X31
	0x03A721F8 STP V0, V1, [X31 + 0x40]
	0x03A721FC STR V2, [X31 + 0x6]
	0x03A72200 STR W8, [X31 + 0x70]
	0x03A72204 BL 0x3C22B90
	0x03A72208 LDRB W8, [X19 + 0x44]
	0x03A7220C AND W9, W0, 0x1
	0x03A72210 CMP W8, W9
	0x03A72214 B.NE 0x3A72364
	0x03A72218 LDR X0, [X20 + 0x18]
	0x03A7221C CBZ X0, 0x3A72380
	0x03A72220 ADD X8, X31, 0x8
	0x03A72224 MOV X1, X31
	0x03A72228 BL 0x3C21334
	0x03A7222C LDUR V0, [X31 + 0x8]
	0x03A72230 LDUR V1, [X31 + 0x18]
	0x03A72234 LDUR V2, [X31 + 0x28]
	0x03A72238 LDR W8, [X31 + 0x38]
	0x03A7223C ADD X0, X31, 0x40
	0x03A72240 MOV X1, X31
	0x03A72244 STP V0, V1, [X31 + 0x40]
	0x03A72248 STR V2, [X31 + 0x6]
	0x03A7224C STR W8, [X31 + 0x70]
	0x03A72250 BL 0x3C22BBC
	0x03A72254 LDRB W8, [X19 + 0x45]
	0x03A72258 AND W9, W0, 0x1
	0x03A7225C CMP W8, W9
	0x03A72260 B.NE 0x3A72364
	0x03A72264 LDR X0, [X20 + 0x18]
	0x03A72268 CBZ X0, 0x3A72380
	0x03A7226C ADD X8, X31, 0x8
	0x03A72270 MOV X1, X31
	0x03A72274 BL 0x3C21334
	0x03A72278 LDR W8, [X31 + 0x38]
	0x03A7227C LDUR V0, [X31 + 0x8]

ISIL:
	001 Move [X31-128], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X29
	005 Move [X31+40], X30
	006 Move [X31+48], X28
	007 Move [X31+56], X27
	008 Move [X31+64], X26
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Subtract X31, X31, 496
	017 Move X21, 0x972000
	018 Move W8, [X21+678]
	019 Move W28, W7
	020 Move X22, X6
	021 Move W24, W5
	022 Move W19, W4
	023 Move X23, X3
	024 Move X20, X2
	025 Move X26, X1
	026 Move X29, X0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {42}
	031 Move X0, 0x6E2000
	032 Move X0, [X0+3624]
	033 Call 0x1C17CF4
	034 Move X0, 0x6AB000
	035 Move X0, [X0+2296]
	036 Call 0x1C17CF4
	037 Move X0, 0x683000
	038 Move X0, [X0+1432]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X21+678], W8
	042 Move X0, X26
	043 Move X1, X31
	044 Call CameraData.get_isSceneViewCamera, X0
	045 Move X8, [X26+376]
	046 Compare X8, 0
	047 JumpIfEqual {366}
	048 Move W27, W0
	049 Move X0, X8
	050 Move X1, X31
	051 Call XRPass.get_enabled, X0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {120}
	056 Compare X23, 0
	057 JumpIfEqual {366}
	058 NotImplemented "Instruction LDUR not yet implemented."
	059 Move X8, [X23+72]
	060 NotImplemented "Instruction LDUR not yet implemented."
	061 NotImplemented "Instruction MOVI not yet implemented."
	062 Add X0, X31, 208
	063 Add X1, X31, 448
	064 Move TEMP, 0
	065 Not TEMP
	066 Move W3, TEMP
	067 Move TEMP, 0
	068 Not TEMP
	069 Move W4, TEMP
	070 Move W2, W31
	071 Move X5, X31
	072 Move [X31+240], X31
	073 Move [X31+480], X8
	074 Move [X31+448], V0
	075 Move [X31+456], V1
	076 Move [X31+208], V2
	077 Move [X31+216], V2
	078 Call RenderTargetIdentifier..ctor, X0, X1, X2, X3, X4
	079 Move X8, [X26+376]
	080 Compare X8, 0
	081 JumpIfEqual {366}
	082 Move V1, [X8+48]
	083 Move V0, [X8+64]
	084 Move X9, [X8+80]
	085 Add X0, X31, 400
	086 Add X1, X31, 352
	087 Move [X31+352], V1
	088 Move [X31+360], V0
	089 NotImplemented "Instruction MOVI not yet implemented."
	090 Move TEMP, 0
	091 Not TEMP
	092 Move W3, TEMP
	093 Move TEMP, 0
	094 Not TEMP
	095 Move W4, TEMP
	096 Move W2, W31
	097 Move X5, X31
	098 Move [X31+432], X31
	099 Move [X31+384], X9
	100 Move [X31+400], V0
	101 Move [X31+408], V0
	102 Call RenderTargetIdentifier..ctor, X0, X1, X2, X3, X4
	103 Move V0, [X31+208]
	104 Move V1, [X31+224]
	105 Move X8, [X31+240]
	106 Move V2, [X31+400]
	107 Move V3, [X31+416]
	108 Move X9, [X31+432]
	109 Add X0, X31, 304
	110 Add X1, X31, 256
	111 Move X2, X31
	112 Move [X31+304], V0
	113 Move [X31+312], V1
	114 Move [X31+336], X8
	115 Move [X31+256], V2
	116 Move [X31+264], V3
	117 Move [X31+288], X9
	118 Call RenderTargetIdentifier.op_Equality, X0, X1
	119 Move W27, W0
	120 Xor W27, W27, 1
	121 Compare X20, 0
	122 JumpIfEqual {366}
	123 Move W8, [X20+168]
	124 Compare W8, 0
	125 JumpIfEqual {136}
	126 Add X8, X31, 208
	127 Move X0, X20
	128 Move X1, X31
	129 Call RTHandle.get_rtHandleProperties, X0
	130 Move V8, [X31+240]
	131 Add X8, X31, 208
	132 Move X0, X20
	133 Move X1, X31
	134 Call RTHandle.get_rtHandleProperties, X0
	135 Move V9, [X31+244]
	136 Move X21, 0x971000
	137 Move W8, [X21+2632]
	138 Compare W8, 0
	139 JumpIfNotEqual {145}
	140 Move X0, 0x68B000
	141 Move X0, [X0+3848]
	142 Call 0x1C17CF4
	143 Move W8, 1
	144 Move [X21+2632], W8
	145 Move X8, 0x68B000
	146 Move X8, [X8+3848]
	147 Move X8, [X8]
	148 Move X8, [X8+184]
	149 Move S8, [X8+8]
	150 Move S9, [X8+12]
	151 Move X21, 0x6AB000
	152 Move X8, 0x683000
	153 Move X21, [X21+2296]
	154 Move X8, [X8+1432]
	155 Move S10, W31
	156 Move TEMP, X27
	157 And TEMP, TEMP, 1
	158 Compare TEMP, 1
	159 JumpIfNotEqual {187}
	160 Move X0, [X8]
	161 Move W25, W24
	162 Move X24, X22
	163 Move W22, W28
	164 Move W8, [X0+224]
	165 Move X28, [X26+208]
	166 Compare W8, 0
	167 JumpIfNotEqual {169}
	168 Call 0x1C17DFC
	169 Move X0, X28
	170 Move X1, X31
	171 Move X2, X31
	172 Call Object.op_Equality, X0, X1
	173 Move TEMP, X0
	174 And TEMP, TEMP, 1
	175 Compare TEMP, 1
	176 JumpIfNotEqual {184}
	177 Move X0, X31
	178 Call SystemInfo.get_graphicsUVStartsAtTop
	179 NotImplemented "Instruction FNEG not yet implemented."
	180 And W31, W0, 1
	181 Move S1, W31
	182 NotImplemented "Instruction FCSEL not yet implemented."
	183 NotImplemented "Instruction FCSEL not yet implemented."
	184 Move W28, W22
	185 Move X22, X24
	186 Move W24, W25
	187 Move X0, [X21]
	188 Move W8, [X0+224]
	189 Compare W8, 0
	190 JumpIfNotEqual {192}
	191 Call 0x1C17DFC
	192 Move S0, W31
	193 Move S1, W31
	194 Move S2, W31
	195 Move S3, W31
	196 Move TEMP, 0
	197 Not TEMP
	198 Move W6, TEMP
	199 Move TEMP, 0
	200 Not TEMP
	201 Move W7, TEMP
	202 Move X0, X29
	203 Move X1, X23
	204 Move W2, W19
	205 Move W3, W24
	206 Move W4, W31
	207 Move W5, W31
	208 Move [X31], X31
	209 Call CoreUtils.SetRenderTarget, X0, X1, X2, X3, X4, X5, X6, X7, X8
	210 Move TEMP, X27
	211 And TEMP, TEMP, 1
	212 Compare TEMP, 1
	213 JumpIfNotEqual {223}
	214 Compare X29, 0
	215 JumpIfEqual {366}
	216 Move V3, [X26+280]
	217 Move V2, [X26+276]
	218 Move V1, [X26+272]
	219 Move V0, [X26+268]
	220 Move X0, X29
	221 Move X1, X31
	222 Call CommandBuffer.SetViewport, X0, X1
	223 Move X0, X31
	224 Call GL.get_wireframe
	225 Move TEMP, X0
	226 And TEMP, TEMP, 1
	227 Compare TEMP, 1
	228 JumpIfNotEqual {287}
	229 Move X0, X26
	230 Move X1, X31
	231 Call CameraData.get_isSceneViewCamera, X0
	232 Move TEMP, X0
	233 And TEMP, TEMP, 1
	234 Compare TEMP, 1
	235 JumpIfNotEqual {287}
	236 Add X8, X31, 400
	237 Move W0, 2
	238 Move X1, X31
	239 Call RenderTargetIdentifier.op_Implicit, X0
	240 Move V0, [X31+400]
	241 Move V1, [X31+416]
	242 Move X8, [X31+432]
	243 Move [X31+208], V0
	244 Move [X31+216], V1
	245 Move [X31+240], X8
	246 Compare X29, 0
	247 JumpIfEqual {366}
	248 Move V0, [X31+208]
	249 Move V1, [X31+224]
	250 Move X8, [X31+240]
	251 Add X1, X31, 160
	252 Move W4, 2
	253 Move W5, 3
	254 Move X0, X29
	255 Move W2, W19
	256 Move W3, W24
	257 Move X6, X31
	258 Move [X31+160], V0
	259 Move [X31+168], V1
	260 Move [X31+192], X8
	261 Call CommandBuffer.SetRenderTarget, X0, X1, X2, X3, X4, X5
	262 Move X8, [X20+72]
	263 NotImplemented "Instruction LDUR not yet implemented."
	264 NotImplemented "Instruction LDUR not yet implemented."
	265 Move [X31+432], X8
	266 Move [X31+400], V1
	267 Move [X31+408], V0
	268 Compare X23, 0
	269 JumpIfEqual {366}
	270 NotImplemented "Instruction LDUR not yet implemented."
	271 NotImplemented "Instruction LDUR not yet implemented."
	272 Move X8, [X23+72]
	273 Move V2, [X31+400]
	274 Move V3, [X31+416]
	275 Move X9, [X31+432]
	276 Add X1, X31, 112
	277 Add X2, X31, 64
	278 Move X0, X29
	279 Move X3, X31
	280 Move [X31+96], X8
	281 Move [X31+64], V0
	282 Move [X31+72], V1
	283 Move [X31+112], V2
	284 Move [X31+120], V3
	285 Move [X31+144], X9
	286 Call CommandBuffer.Blit, X0, X1, X2
	287 Move X8, 0x682000
	288 Move X8, [X8+1432]
	289 Move X23, [X20+24]
	290 Move X0, [X8]
	291 Move W8, [X0+224]
	292 Compare W8, 0
	293 JumpIfNotEqual {295}
	294 Call 0x1C17DFC
	295 Move X0, X23
	296 Move X1, X31
	297 Move X2, X31
	298 Call Object.op_Equality, X0, X1
	299 Move TEMP, X0
	300 And TEMP, TEMP, 1
	301 Compare TEMP, 1
	302 JumpIfNotEqual {332}
	303 Move X9, 0x6E1000
	304 NotImplemented "Instruction LDUR not yet implemented."
	305 Move X8, [X20+72]
	306 NotImplemented "Instruction LDUR not yet implemented."
	307 Move X9, [X9+3624]
	308 Move [X31+240], X8
	309 Move [X31+208], V0
	310 Move [X31+216], V1
	311 Move X0, [X9]
	312 Move W8, [X0+224]
	313 Compare W8, 0
	314 JumpIfNotEqual {316}
	315 Call 0x1C17DFC
	316 Move V0, [X31+208]
	317 Move V1, [X31+224]
	318 Move X8, [X31+240]
	319 Add X1, X31, 16
	320 Move S2, W31
	321 Move [X31+16], V0
	322 Move [X31+24], V1
	323 Move X0, X29
	324 Move V0, V8
	325 Move V1, V9
	326 Move V3, V10
	327 Move X2, X22
	328 Move W3, W28
	329 Move X4, X31
	330 Move [X31+48], X8
	331 Call Blitter.BlitTexture, X0, X1, X2, X3, X4
	332 Move X8, 0x6E1000
	333 Move X8, [X8+3624]
	334 Move X0, [X8]
	335 Move W8, [X0+224]
	336 Compare W8, 0
	337 JumpIfNotEqual {339}
	338 Call 0x1C17DFC
	339 Move S2, W31
	340 Move X0, X29
	341 Move X1, X20
	342 Move V0, V8
	343 Move V1, V9
	344 Move V3, V10
	345 Move X2, X22
	346 Move W3, W28
	347 Move X4, X31
	348 Call Blitter.BlitTexture, X0, X1, X2, X3, X4
	349 Add X31, X31, 496
	350 Move X20, [X31+112]
	351 Move X19, [X31+120]
	352 Move X22, [X31+96]
	353 Move X21, [X31+104]
	354 Move X24, [X31+80]
	355 Move X23, [X31+88]
	356 Move X26, [X31+64]
	357 Move X25, [X31+72]
	358 Move X28, [X31+48]
	359 Move X27, [X31+56]
	360 Move X29, [X31+32]
	361 Move X30, [X31+40]
	362 Move D9, [X31+16]
	363 Move D8, [X31+24]
	364 Move V10, [X31+128]
	365 Return 
	366 Call 0x1C17F20

Method: System.Void RenderObjectsWithError(UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.CullingResults cullResults, UnityEngine.Camera camera, UnityEngine.Rendering.FilteringSettings filterSettings, UnityEngine.Rendering.SortingCriteria sortFlags)

Disassembly:
	0x03A72280 LDUR V1, [X31 + 0x18]
	0x03A72284 LDUR V2, [X31 + 0x28]
	0x03A72288 STR W8, [X31 + 0x70]
	0x03A7228C STP V0, V1, [X31 + 0x40]
	0x03A72290 STR V2, [X31 + 0x6]
	0x03A72294 LDR W9, [X19 + 0x48]
	0x03A72298 CMP W8, W9
	0x03A7229C B.NE 0x3A72364
	0x03A722A0 LDR X0, [X20 + 0x18]
	0x03A722A4 CBZ X0, 0x3A72380
	0x03A722A8 MOV X1, X31
	0x03A722AC BL 0x3C1AB20
	0x03A722B0 LDR W8, [X19 + 0x28]
	0x03A722B4 CMP W0, W8
	0x03A722B8 B.NE 0x3A72364
	0x03A722BC LDR X0, [X20 + 0x18]
	0x03A722C0 CBZ X0, 0x3A72380
	0x03A722C4 MOV X1, X31
	0x03A722C8 BL 0x3C1A9D4
	0x03A722CC LDR W8, [X19 + 0x2C]
	0x03A722D0 CMP W0, W8
	0x03A722D4 B.NE 0x3A72364
	0x03A722D8 LDR X0, [X20 + 0x18]
	0x03A722DC CBZ X0, 0x3A72380
	0x03A722E0 MOV X1, X31
	0x03A722E4 BL 0x3C1ABA0
	0x03A722E8 LDR W8, [X19 + 0x38]
	0x03A722EC CMP W0, W8
	0x03A722F0 B.NE 0x3A72364
	0x03A722F4 LDR X0, [X20 + 0x18]
	0x03A722F8 CBZ X0, 0x3A72380
	0x03A722FC MOV X1, X31
	0x03A72300 BL 0x3C1AC20
	0x03A72304 LDR V1, [X19 + 0x3C]
	0x03A72308 FCMP S0, S1
	0x03A7230C B.NE 0x3A72364
	0x03A72310 LDR X0, [X20 + 0x58]
	0x03A72314 LDR X1, [X19 + 0x50]
	0x03A72318 MOV X2, X31
	0x03A7231C BL 0x3226EF8
	0x03A72320 B 0x3A72368
	0x03A72324 LDR X0, [X20 + 0x18]
	0x03A72328 CBZ X0, 0x3A72380
	0x03A7232C LDR X8, [X0]
	0x03A72330 LDP X9, X1, [X8 + 0x188]
	0x03A72334 BLR X9
	0x03A72338 LDR W8, [X19 + 0x4]
	0x03A7233C CMP W0, W8
	0x03A72340 B.NE 0x3A72364
	0x03A72344 LDR X0, [X20 + 0x18]
	0x03A72348 CBZ X0, 0x3A72380
	0x03A7234C LDR X8, [X0]
	0x03A72350 LDP X9, X1, [X8 + 0x1A8]
	0x03A72354 BLR X9
	0x03A72358 LDR W8, [X19 + 0x8]
	0x03A7235C CMP W0, W8
	0x03A72360 B.EQ 0x3A71F90
	0x03A72364 MOVZ W0, 0x1
	0x03A72368 LDP X20, X19, [X31 + 0xA0]
	0x03A7236C LDP X22, X21, [X31 + 0x90]
	0x03A72370 LDR X30, [X31 + 0x80]
	0x03A72374 AND W0, W0, 0x1
	0x03A72378 ADD X31, X31, 0xB0
	0x03A7237C RET
	0x03A72380 BL 0x1C16F20
	0x03A72384 SUB X31, X31, 0xF0
	0x03A72388 STR X30, [X31 + 0xC0]
	0x03A7238C STP X22, X21, [X31 + 0xD0]
	0x03A72390 STP X20, X19, [X31 + 0xE0]
	0x03A72394 ADRP X22, 0x970000
	0x03A72398 ADRP X21, 0x681000
	0x03A7239C MOV X19, X8
	0x03A723A0 LDRB W8, [X22 + 0x2AF]
	0x03A723A4 LDR X21, [X21 + 0x598]
	0x03A723A8 MOV X20, X0
	0x03A723AC TBNZ X8, 0x0, 0x3A723C4
	0x03A723B0 ADRP X0, 0x681000
	0x03A723B4 LDR X0, [X0 + 0x598]
	0x03A723B8 BL 0x1C16CF4
	0x03A723BC MOVZ W8, 0x1
	0x03A723C0 STRB W8, [X22 + 0x2AF]
	0x03A723C4 LDR X0, [X21]
	0x03A723C8 MOVI V0.2D, 0x0
	0x03A723CC STR X31, [X31 + 0xB0]
	0x03A723D0 STP V0, V0, [X31 + 0x90]
	0x03A723D4 LDR W8, [X0 + 0xE0]
	0x03A723D8 LDR X21, [X20 + 0xE8]
	0x03A723DC CBNZ W8, 0x3A723E4
	0x03A723E0 BL 0x1C16DFC
	0x03A723E4 MOV X0, X21
	0x03A723E8 MOV X1, X31
	0x03A723EC MOV X2, X31
	0x03A723F0 BL 0x3C354F8
	0x03A723F4 TBZ X0, 0x0, 0x3A72418
	0x03A723F8 LDR X1, [X20 + 0xE8]
	0x03A723FC MOVI V0.2D, 0x0
	0x03A72400 ADD X0, X31, 0x30
	0x03A72404 MOV X2, X31
	0x03A72408 STR X31, [X31 + 0x50]
	0x03A7240C STP V0, V0, [X31 + 0x30]
	0x03A72410 BL 0x3C4B0C4
	0x03A72414 B 0x3A72428
	0x03A72418 ADD X8, X31, 0x30
	0x03A7241C MOVZ W0, 0x2
	0x03A72420 MOV X1, X31
	0x03A72424 BL 0x3C4B204
	0x03A72428 LDP V0, V1, [X31 + 0x30]
	0x03A7242C LDR X8, [X31 + 0x50]
	0x03A72430 STP V0, V1, [X31 + 0x60]
	0x03A72434 LDP V0, V1, [X31 + 0x60]
	0x03A72438 STR X8, [X31 + 0x80]
	0x03A7243C STR X8, [X31 + 0xB0]
	0x03A72440 STP V0, V1, [X31 + 0x90]
	0x03A72444 LDR X0, [X20 + 0x190]
	0x03A72448 CBZ X0, 0x3A724F0
	0x03A7244C MOV X1, X31
	0x03A72450 BL 0x3984C98
	0x03A72454 TBZ X0, 0x0, 0x3A724CC
	0x03A72458 LDR X0, [X20 + 0x190]
	0x03A7245C CBZ X0, 0x3A724F0
	0x03A72460 MOV X1, X31
	0x03A72464 BL 0x3984DE0
	0x03A72468 LDR X8, [X20 + 0x190]
	0x03A7246C CBZ X8, 0x3A724F0
	0x03A72470 TBZ X0, 0x0, 0x3A72488
	0x03A72474 LDR X9, [X8 + 0x50]
	0x03A72478 LDP V1, V0, [X8 + 0x30]
	0x03A7247C STR X9, [X31 + 0xB0]
	0x03A72480 STP V1, V0, [X31 + 0x90]
	0x03A72484 B 0x3A724CC
	0x03A72488 MOV X0, X8
	0x03A7248C MOV W1, W31
	0x03A72490 MOV X2, X31
	0x03A72494 BL 0x39862C0
	0x03A72498 LDR X8, [X20 + 0x190]
	0x03A7249C CBZ X8, 0x3A724F0
	0x03A724A0 LDR X9, [X8 + 0x50]
	0x03A724A4 LDP V1, V0, [X8 + 0x30]
	0x03A724A8 MOV W4, W0
	0x03A724AC ADD X0, X31, 0x90
	0x03A724B0 ADD X1, X31, 0x0
	0x03A724B4 MOVN W3, 0x0
	0x03A724B8 MOV W2, W31
	0x03A724BC MOV X5, X31
	0x03A724C0 STR X9, [X31 + 0x20]
	0x03A724C4 STP V1, V0, [X31]
	0x03A724C8 BL 0x3C4B098
	0x03A724CC LDR X8, [X31 + 0xB0]
	0x03A724D0 LDP V1, V0, [X31 + 0x90]
	0x03A724D4 LDP X22, X21, [X31 + 0xD0]
	0x03A724D8 LDR X30, [X31 + 0xC0]
	0x03A724DC STR X8, [X19 + 0x20]
	0x03A724E0 STP V1, V0, [X19]
	0x03A724E4 LDP X20, X19, [X31 + 0xE0]
	0x03A724E8 ADD X31, X31, 0xF0
	0x03A724EC RET
	0x03A724F0 BL 0x1C16F20
	0x03A724F4 SUB X31, X31, 0xD0
	0x03A724F8 STR D8, [X31 + 0x80]
	0x03A724FC STP X30, X25, [X31 + 0x90]
	0x03A72500 STP X24, X23, [X31 + 0xA0]
	0x03A72504 STP X22, X21, [X31 + 0xB0]
	0x03A72508 STP X20, X19, [X31 + 0xC0]
	0x03A7250C MOV V8.16B, V0.16B
	0x03A72510 MOVI V0.2D, 0x0
	0x03A72514 STR X31, [X31 + 0x70]
	0x03A72518 STP V0, V0, [X31 + 0x50]
	0x03A7251C STP V0, V0, [X31 + 0x30]
	0x03A72520 STP V0, V0, [X31 + 0x10]
	0x03A72524 STR V0, [X31]
	0x03A72528 MOV W22, W2
	0x03A7252C MOV W25, W1
	0x03A72530 LDP W1, W2, [X0]
	0x03A72534 MOV X19, X5
	0x03A72538 MOV W23, W4
	0x03A7253C MOV W24, W3
	0x03A72540 MOV X21, X0
	0x03A72544 ADD X0, X31, 0x0
	0x03A72548 MOV W3, W31
	0x03A7254C MOV W4, W31
	0x03A72550 MOV X5, X31
	0x03A72554 MOV X20, X8
	0x03A72558 BL 0x399A938
	0x03A7255C STR W25, [X31]
	0x03A72560 LDR W8, [X21 + 0xC]
	0x03A72564 MOV X0, X21
	0x03A72568 MOV X1, X31
	0x03A7256C STR W8, [X31 + 0xC]
	0x03A72570 BL 0x3C224C4
	0x03A72574 STR W0, [X31 + 0x20]
	0x03A72578 MOV X0, X21
	0x03A7257C MOV X1, X31
	0x03A72580 BL 0x3C22060
	0x03A72584 STP W0, W24, [X31 + 0x24]

ISIL:
	001 Move [X31-80], X29
	002 Move [X31-72], X30
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Subtract X31, X31, 800
	012 NotImplemented "Instruction MRS not yet implemented."
	013 Move X8, [X24+40]
	014 Move X23, 0x971000
	015 Move X25, 0x6E3000
	016 Move W21, W4
	017 Move [X31+792], X8
	018 Move [X31+384], X0
	019 Move W8, [X23+679]
	020 Move X25, [X25+16]
	021 Move X19, X3
	022 Move X22, X2
	023 Move X20, X1
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {48}
	028 Move X0, 0x6E3000
	029 Move X0, [X0+184]
	030 Call 0x1C17CF4
	031 Move X0, 0x6E5000
	032 Move X0, [X0+3320]
	033 Call 0x1C17CF4
	034 Move X0, 0x6E5000
	035 Move X0, [X0+3328]
	036 Call 0x1C17CF4
	037 Move X0, 0x682000
	038 Move X0, [X0+1432]
	039 Call 0x1C17CF4
	040 Move X0, 0x6E3000
	041 Move X0, [X0+16]
	042 Call 0x1C17CF4
	043 Move X0, 0x6DF000
	044 Move X0, [X0+3200]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X23+679], W8
	048 Move X23, 0x682000
	049 Move X23, [X23+1432]
	050 Add X0, X31, 592
	051 Move W2, 196
	052 Move W1, W31
	053 Call 0x3EB2B10
	054 NotImplemented "Instruction MOVI not yet implemented."
	055 Add X0, X31, 392
	056 Move W2, 196
	057 Move W1, W31
	058 Move [X31+256], V0
	059 Move [X31+264], V0
	060 Move [X31+224], V0
	061 Move [X31+232], V0
	062 Move [X31+192], V0
	063 Move [X31+200], V0
	064 Call 0x3EB2B10
	065 Move X0, [X25]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Call RenderingUtils.get_errorMaterial
	071 Move X8, [X23]
	072 Move X23, X0
	073 Move W9, [X8+224]
	074 Compare W9, 0
	075 JumpIfNotEqual {78}
	076 Move X0, X8
	077 Call 0x1C17DFC
	078 Move X0, X23
	079 Move X1, X31
	080 Move X2, X31
	081 Call Object.op_Equality, X0, X1
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfEqual {206}
	086 Add X0, X31, 192
	087 Move X1, X22
	088 Move X2, X31
	089 Call SortingSettings..ctor, X0, X1
	090 Add X0, X31, 192
	091 Move W1, W21
	092 Move X2, X31
	093 Call SortingSettings.set_criteria, X0, X1
	094 Add X0, X31, 288
	095 Add X1, X31, 192
	096 Move W2, 96
	097 Call 0x3EB2AC0
	098 Move X0, [X25]
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {104}
	102 Call 0x1C17DFC
	103 Move X0, [X25]
	104 Move X8, [X0+184]
	105 Move X0, [X8]
	106 Compare X0, 0
	107 JumpIfEqual {221}
	108 Move X23, 0x6E5000
	109 Move X23, [X23+3328]
	110 Move W1, W31
	111 Move X2, [X23]
	112 Call List`1<ShaderTagId>.get_Item, X0, X1
	113 And X21, X0, 0
	114 Add X0, X31, 96
	115 Add X1, X31, 288
	116 Move W2, 96
	117 Call 0x3EB2AC0
	118 Move X26, 0x6E3000
	119 Move X26, [X26+184]
	120 Move X0, [X26]
	121 Move W8, [X0+224]
	122 Compare W8, 0
	123 JumpIfNotEqual {125}
	124 Call 0x1C17DFC
	125 Add X0, X31, 0
	126 Add X1, X31, 96
	127 Move W2, 96
	128 Call 0x3EB2AC0
	129 Add X0, X31, 392
	130 Add X2, X31, 0
	131 Move X1, X21
	132 Move X3, X31
	133 Call DrawingSettings..ctor, X0, X1, X2
	134 Add X0, X31, 392
	135 Move W1, W31
	136 Move X2, X31
	137 Call DrawingSettings.set_perObjectData, X0, X1
	138 Call RenderingUtils.get_errorMaterial
	139 Move X1, X0
	140 Add X0, X31, 392
	141 Move X2, X31
	142 Call DrawingSettings.set_overrideMaterial, X0, X1
	143 Add X0, X31, 392
	144 Move W1, W31
	145 Move X2, X31
	146 Call DrawingSettings.set_overrideMaterialPassIndex, X0, X1
	147 Add X0, X31, 592
	148 Add X1, X31, 392
	149 Move W2, 196
	150 Call 0x3EB2AC0
	151 Move W21, 1
	152 Move X0, [X25]
	153 Move W8, [X0+224]
	154 Compare W8, 0
	155 JumpIfNotEqual {158}
	156 Call 0x1C17DFC
	157 Move X0, [X25]
	158 Move X8, [X0+184]
	159 Move X8, [X8]
	160 Compare X8, 0
	161 JumpIfEqual {221}
	162 Move W9, [X8+24]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move W9, [X0+224]
	165 Compare W9, 0
	166 JumpIfNotEqual {173}
	167 Call 0x1C17DFC
	168 Move X8, [X25]
	169 Move X8, [X8+184]
	170 Move X8, [X8]
	171 Compare X8, 0
	172 JumpIfEqual {221}
	173 Move X2, [X23]
	174 Move X0, X8
	175 Move W1, W21
	176 Call List`1<ShaderTagId>.get_Item, X0, X1
	177 Move X8, [X26]
	178 Move X22, X0
	179 Move W9, [X8+224]
	180 Compare W9, 0
	181 JumpIfNotEqual {184}
	182 Move X0, X8
	183 Call 0x1C17DFC
	184 And X2, X22, 0
	185 Add X0, X31, 592
	186 Move W1, W21
	187 Move X3, X31
	188 Call DrawingSettings.SetShaderPassName, X0, X1, X2
	189 Add W21, W21, 1
	190 Move X8, 0x6DF000
	191 Move X8, [X8+3200]
	192 Move X21, [X20]
	193 Move X20, [X20+8]
	194 Move X0, [X8]
	195 Move W8, [X0+224]
	196 Compare W8, 0
	197 JumpIfNotEqual {199}
	198 Call 0x1C17DFC
	199 Add X0, X31, 384
	200 Add X3, X31, 592
	201 Move X1, X21
	202 Move X2, X20
	203 Move X4, X19
	204 Move X5, X31
	205 Call ScriptableRenderContext.DrawRenderers, X0, X1, X2, X3
	206 Move X8, [X24+40]
	207 Move X9, [X31+792]
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Add X31, X31, 800
	210 Move X20, [X31+64]
	211 Move X19, [X31+72]
	212 Move X22, [X31+48]
	213 Move X21, [X31+56]
	214 Move X24, [X31+32]
	215 Move X23, [X31+40]
	216 Move X26, [X31+16]
	217 Move X25, [X31+24]
	218 Move X29, [X31+80]
	219 Move X30, [X31+88]
	220 Return 
	221 Call 0x1C17F20
	222 Call 0x3EB2B20

Method: System.Void ClearSystemInfoCache()

Disassembly:
	0x03A72588 LDR W8, [X21 + 0x20]
	0x03A7258C MOV X0, X21
	0x03A72590 MOV X1, X31
	0x03A72594 STP W23, W8, [X31 + 0x2C]
	0x03A72598 BL 0x3C22B64
	0x03A7259C AND W8, W0, 0x1
	0x03A725A0 MOV X0, X21
	0x03A725A4 MOV X1, X31
	0x03A725A8 STRB W8, [X31 + 0x34]
	0x03A725AC BL 0x3C22B1C
	0x03A725B0 AND W8, W0, 0x1
	0x03A725B4 MOV X0, X21
	0x03A725B8 MOV X1, X31
	0x03A725BC STRB W8, [X31 + 0x35]
	0x03A725C0 BL 0x3C22B38
	0x03A725C4 AND W8, W0, 0x1
	0x03A725C8 STRB W8, [X31 + 0x36]
	0x03A725CC LDR W8, [X21 + 0x24]
	0x03A725D0 STR W22, [X31 + 0x38]
	0x03A725D4 STR S8, [X31 + 0x3C]
	0x03A725D8 MOV X0, X21
	0x03A725DC CMP W8, 0x2
	0x03A725E0 CSET W8, NE
	0x03A725E4 STRB W8, [X31 + 0x37]
	0x03A725E8 LDR W8, [X21 + 0x8]
	0x03A725EC MOV X1, X31
	0x03A725F0 STR W8, [X31 + 0x40]
	0x03A725F4 BL 0x3C22B90
	0x03A725F8 AND W8, W0, 0x1
	0x03A725FC MOV X0, X21
	0x03A72600 MOV X1, X31
	0x03A72604 STRB W8, [X31 + 0x44]
	0x03A72608 BL 0x3C22BBC
	0x03A7260C AND W8, W0, 0x1
	0x03A72610 ADD X1, X31, 0x0
	0x03A72614 MOVZ W2, 0x78
	0x03A72618 MOV X0, X20
	0x03A7261C STP X31, X19, [X31 + 0x48]
	0x03A72620 STRB W8, [X31 + 0x45]
	0x03A72624 BL 0x3EB1AC0
	0x03A72628 LDP X20, X19, [X31 + 0xC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x971000
	005 Move X19, 0x6E3000
	006 Move W8, [X20+680]
	007 Move X19, [X19+16]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x6E5000
	013 Move X0, [X0+3336]
	014 Call 0x1C17CF4
	015 Move X0, 0x6E5000
	016 Move X0, [X0+3344]
	017 Call 0x1C17CF4
	018 Move X0, 0x6E3000
	019 Move X0, [X0+16]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+680], W8
	023 Move X0, [X19]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X19]
	029 Move X8, [X0+184]
	030 Move X0, [X8+144]
	031 Compare X0, 0
	032 JumpIfEqual {50}
	033 Move X8, 0x6E5000
	034 Move X8, [X8+3336]
	035 Move X1, [X8]
	036 Call Dictionary`2<Int32Enum, Boolean>.Clear, X0
	037 Move X8, [X19]
	038 Move X8, [X8+184]
	039 Move X0, [X8+152]
	040 Compare X0, 0
	041 JumpIfEqual {50}
	042 Move X8, 0x6E5000
	043 Move X8, [X8+3344]
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X1, [X8]
	047 Move X30, [X31+32]
	048 Call Dictionary`2<Int32Enum, Object>.Clear, X0
	049 Return 
	050 Call 0x1C17F20

Method: System.Boolean SupportsRenderTextureFormat(UnityEngine.RenderTextureFormat format)

Disassembly:
	0x03A7262C LDP X22, X21, [X31 + 0xB0]
	0x03A72630 LDP X24, X23, [X31 + 0xA0]
	0x03A72634 LDP X30, X25, [X31 + 0x90]
	0x03A72638 LDR V8, [X31 + 0x80]
	0x03A7263C ADD X31, X31, 0xD0
	0x03A72640 RET
	0x03A72644 STR X30, [X31 - 0x30]!
	0x03A72648 STP X22, X21, [X31 + 0x10]
	0x03A7264C STP X20, X19, [X31 + 0x20]
	0x03A72650 ADRP X22, 0x970000
	0x03A72654 ADRP X21, 0x6AA000
	0x03A72658 LDRB W8, [X22 + 0x2B4]
	0x03A7265C LDR X21, [X21 + 0x8A8]
	0x03A72660 MOV X19, X1
	0x03A72664 MOV X20, X0
	0x03A72668 TBNZ X8, 0x0, 0x3A7268C
	0x03A7266C ADRP X0, 0x6DE000
	0x03A72670 LDR X0, [X0 + 0x9B0]
	0x03A72674 BL 0x1C16CF4
	0x03A72678 ADRP X0, 0x6AA000
	0x03A7267C LDR X0, [X0 + 0x8A8]
	0x03A72680 BL 0x1C16CF4
	0x03A72684 MOVZ W8, 0x1
	0x03A72688 STRB W8, [X22 + 0x2B4]
	0x03A7268C LDR X0, [X21]
	0x03A72690 LDR W8, [X0 + 0xE0]
	0x03A72694 CBNZ W8, 0x3A726A0
	0x03A72698 BL 0x1C16DFC
	0x03A7269C LDR X0, [X21]
	0x03A726A0 LDR X8, [X0 + 0xB8]
	0x03A726A4 MOV X0, X31
	0x03A726A8 LDR X21, [X8 + 0x10]
	0x03A726AC BL 0x3C3C88C
	0x03A726B0 CBZ X21, 0x3A7270C
	0x03A726B4 MOV W3, W0
	0x03A726B8 MOV X0, X21
	0x03A726BC MOV X1, X20
	0x03A726C0 MOV X2, X19
	0x03A726C4 BL 0x3A731F4
	0x03A726C8 TBZ X0, 0x0, 0x3A726DC
	0x03A726CC LDP X20, X19, [X31 + 0x20]
	0x03A726D0 LDP X22, X21, [X31 + 0x10]
	0x03A726D4 LDR X30, [X31], #0x30
	0x03A726D8 RET
	0x03A726DC ADRP X8, 0x6DE000
	0x03A726E0 LDR X8, [X8 + 0x9B0]
	0x03A726E4 LDR X0, [X8]
	0x03A726E8 LDR W8, [X0 + 0xE0]
	0x03A726EC CBNZ W8, 0x3A726F4
	0x03A726F0 BL 0x1C16DFC
	0x03A726F4 MOV X0, X19
	0x03A726F8 LDP X20, X19, [X31 + 0x20]
	0x03A726FC LDP X22, X21, [X31 + 0x10]
	0x03A72700 MOV X1, X31
	0x03A72704 LDR X30, [X31], #0x30
	0x03A72708 B 0x39CB45C
	0x03A7270C BL 0x1C16F20
	0x03A72710 SUB X31, X31, 0x40
	0x03A72714 STP X30, X23, [X31 + 0x10]
	0x03A72718 STP X22, X21, [X31 + 0x20]
	0x03A7271C STP X20, X19, [X31 + 0x30]
	0x03A72720 ADRP X23, 0x970000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x971000
	007 Move X20, 0x6E3000
	008 Move W8, [X21+681]
	009 Move X20, [X20+16]
	010 Move W19, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x6E5000
	016 Move X0, [X0+3352]
	017 Call 0x1C17CF4
	018 Move X0, 0x6E5000
	019 Move X0, [X0+3360]
	020 Call 0x1C17CF4
	021 Move X0, 0x6E3000
	022 Move X0, [X0+16]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+681], W8
	026 Move X0, [X20]
	027 Move [X31+12], W31
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {33}
	031 Call 0x1C17DFC
	032 Move X0, [X20]
	033 Move X8, [X0+184]
	034 Move X0, [X8+144]
	035 Compare X0, 0
	036 JumpIfEqual {76}
	037 Move X8, 0x6E5000
	038 Move X8, [X8+3360]
	039 Add X2, X31, 12
	040 Move W1, W19
	041 Move X3, [X8]
	042 Call Dictionary`2<Int32Enum, Boolean>.TryGetValue, X0, X1, X2
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {69}
	047 Move W0, W19
	048 Move X1, X31
	049 Call SystemInfo.SupportsRenderTextureFormat, X0
	050 Move X8, [X20]
	051 And W9, W0, 1
	052 Move [X31+12], W9
	053 Move W9, [X8+224]
	054 Compare W9, 0
	055 JumpIfNotEqual {59}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Move X8, [X20]
	059 Move X8, [X8+184]
	060 Move X0, [X8+144]
	061 Compare X0, 0
	062 JumpIfEqual {76}
	063 Move X8, 0x6E5000
	064 Move W2, [X31+12]
	065 Move X8, [X8+3352]
	066 Move W1, W19
	067 Move X3, [X8]
	068 Call Dictionary`2<Int32Enum, Boolean>.Add, X0, X1, X2
	069 Move W0, [X31+12]
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X30, [X31+16]
	073 Move X21, [X31+24]
	074 Add X31, X31, 48
	075 Return X0
	076 Call 0x1C17F20

Method: System.Boolean SupportsGraphicsFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.FormatUsage usage)

Disassembly:
	0x03A6FD54 STP X30, X19, [X31 - 0x10]!
	0x03A6FD58 CMP W0, 0x4
	0x03A6FD5C B.CS 0x3A6FD74
	0x03A6FD60 ADRP X8, 0xFFFFFFFFFD07B000
	0x03A6FD64 ADD X8, X8, 0xE60
	0x03A6FD68 LDR W0, [X8, W0, SXTW]
	0x03A6FD6C LDP X30, X19, [X31], #0x10
	0x03A6FD70 RET
	0x03A6FD74 ADRP X0, 0x68D000
	0x03A6FD78 LDR X0, [X0 + 0x758]
	0x03A6FD7C BL 0x1C16D08
	0x03A6FD80 BL 0x1C16F10
	0x03A6FD84 MOV X1, X31
	0x03A6FD88 MOV X19, X0
	0x03A6FD8C BL 0x3380288
	0x03A6FD90 ADRP X0, 0x6E7000
	0x03A6FD94 LDR X0, [X0 + 0xCD8]
	0x03A6FD98 BL 0x1C16D08
	0x03A6FD9C MOV X1, X0
	0x03A6FDA0 MOV X0, X19
	0x03A6FDA4 BL 0x1C16DEC
	0x03A6FDA8 STP X30, X21, [X31 - 0x20]!
	0x03A6FDAC STP X20, X19, [X31 + 0x10]
	0x03A6FDB0 ADRP X20, 0x973000
	0x03A6FDB4 ADRP X21, 0x6E5000
	0x03A6FDB8 LDRB W8, [X20 + 0x29E]
	0x03A6FDBC LDR X21, [X21 + 0xC50]
	0x03A6FDC0 MOV W19, W0
	0x03A6FDC4 TBNZ X8, 0x0, 0x3A6FDE8
	0x03A6FDC8 ADRP X0, 0x684000
	0x03A6FDCC LDR X0, [X0 + 0x598]
	0x03A6FDD0 BL 0x1C16CF4
	0x03A6FDD4 ADRP X0, 0x6E5000
	0x03A6FDD8 LDR X0, [X0 + 0xC50]
	0x03A6FDDC BL 0x1C16CF4
	0x03A6FDE0 MOVZ W8, 0x1
	0x03A6FDE4 STRB W8, [X20 + 0x29E]
	0x03A6FDE8 LDR X0, [X21]
	0x03A6FDEC ADRP X20, 0x684000
	0x03A6FDF0 LDR W8, [X0 + 0xE0]
	0x03A6FDF4 LDR X20, [X20 + 0x598]
	0x03A6FDF8 CBNZ W8, 0x3A6FE00
	0x03A6FDFC BL 0x1C16DFC
	0x03A6FE00 MOV X0, X31
	0x03A6FE04 BL 0x3A89A38
	0x03A6FE08 LDR X8, [X20]
	0x03A6FE0C MOV X20, X0
	0x03A6FE10 LDR W9, [X8 + 0xE0]
	0x03A6FE14 CBNZ W9, 0x3A6FE20
	0x03A6FE18 MOV X0, X8
	0x03A6FE1C BL 0x1C16DFC
	0x03A6FE20 MOV X0, X20
	0x03A6FE24 MOV X1, X31
	0x03A6FE28 BL 0x3C38948
	0x03A6FE2C TBZ X0, 0x0, 0x3A6FE58
	0x03A6FE30 LDR X0, [X21]
	0x03A6FE34 LDR W8, [X0 + 0xE0]
	0x03A6FE38 CBNZ W8, 0x3A6FE40
	0x03A6FE3C BL 0x1C16DFC
	0x03A6FE40 MOV X0, X31
	0x03A6FE44 BL 0x3A89A38
	0x03A6FE48 CBZ X0, 0x3A6FE68
	0x03A6FE4C MOV X1, X31
	0x03A6FE50 BL 0x3A94AF0
	0x03A6FE54 AND W19, W0, W19, 0x0
	0x03A6FE58 MOV W0, W19
	0x03A6FE5C LDP X20, X19, [X31 + 0x10]
	0x03A6FE60 LDP X30, X21, [X31], #0x20
	0x03A6FE64 RET
	0x03A6FE68 BL 0x1C16F20
	0x03A6FE6C STP X30, X21, [X31 - 0x20]!
	0x03A6FE70 STP X20, X19, [X31 + 0x10]
	0x03A6FE74 ADRP X21, 0x973000
	0x03A6FE78 ADRP X20, 0x6E5000
	0x03A6FE7C MOV X19, X8
	0x03A6FE80 LDRB W8, [X21 + 0x29F]
	0x03A6FE84 LDR X20, [X20 + 0x10]
	0x03A6FE88 TBNZ X8, 0x0, 0x3A6FEA0
	0x03A6FE8C ADRP X0, 0x6E5000
	0x03A6FE90 LDR X0, [X0 + 0x10]
	0x03A6FE94 BL 0x1C16CF4
	0x03A6FE98 MOVZ W8, 0x1
	0x03A6FE9C STRB W8, [X21 + 0x29F]
	0x03A6FEA0 LDR X0, [X20]
	0x03A6FEA4 LDR W8, [X0 + 0xE0]
	0x03A6FEA8 CBNZ W8, 0x3A6FEB4
	0x03A6FEAC BL 0x1C16DFC
	0x03A6FEB0 LDR X0, [X20]
	0x03A6FEB4 LDR X8, [X0 + 0xB8]
	0x03A6FEB8 MOV X0, X19
	0x03A6FEBC LDP X20, X19, [X31 + 0x10]
	0x03A6FEC0 MOVZ W2, 0x78
	0x03A6FEC4 ADD X1, X8, 0x8
	0x03A6FEC8 LDP X30, X21, [X31], #0x20
	0x03A6FECC B 0x3EB1AC0
	0x03A6FED0 STR X30, [X31 - 0x30]!
	0x03A6FED4 STP X22, X21, [X31 + 0x10]
	0x03A6FED8 STP X20, X19, [X31 + 0x20]
	0x03A6FEDC ADRP X19, 0x973000
	0x03A6FEE0 ADRP X21, 0x6E5000
	0x03A6FEE4 LDRB W8, [X19 + 0x2A0]
	0x03A6FEE8 LDR X21, [X21 + 0x10]
	0x03A6FEEC TBNZ X8, 0x0, 0x3A6FF88
	0x03A6FEF0 ADRP X0, 0x685000
	0x03A6FEF4 LDR X0, [X0 + 0xE58]
	0x03A6FEF8 BL 0x1C16CF4
	0x03A6FEFC ADRP X0, 0x688000
	0x03A6FF00 LDR X0, [X0 + 0x3B8]
	0x03A6FF04 BL 0x1C16CF4
	0x03A6FF08 ADRP X0, 0x6DF000
	0x03A6FF0C LDR X0, [X0 + 0x720]
	0x03A6FF10 BL 0x1C16CF4
	0x03A6FF14 ADRP X0, 0x6E0000
	0x03A6FF18 LDR X0, [X0 + 0xF08]
	0x03A6FF1C BL 0x1C16CF4
	0x03A6FF20 ADRP X0, 0x6B0000
	0x03A6FF24 LDR X0, [X0 + 0x5B8]
	0x03A6FF28 BL 0x1C16CF4
	0x03A6FF2C ADRP X0, 0x688000
	0x03A6FF30 LDR X0, [X0 + 0x3C0]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0x974000
	008 Move X22, 0x6E6000
	009 Move W8, [X21+682]
	010 Move X22, [X22+16]
	011 Move W20, W1
	012 Move W19, W0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {40}
	017 Move X0, 0x6E8000
	018 Move X0, [X0+3200]
	019 Call 0x1C17CF4
	020 Move X0, 0x6E8000
	021 Move X0, [X0+3208]
	022 Call 0x1C17CF4
	023 Move X0, 0x6E8000
	024 Move X0, [X0+3216]
	025 Call 0x1C17CF4
	026 Move X0, 0x6E8000
	027 Move X0, [X0+3224]
	028 Call 0x1C17CF4
	029 Move X0, 0x6E8000
	030 Move X0, [X0+3232]
	031 Call 0x1C17CF4
	032 Move X0, 0x6E8000
	033 Move X0, [X0+3240]
	034 Call 0x1C17CF4
	035 Move X0, 0x6E6000
	036 Move X0, [X0+16]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X21+682], W8
	040 Move X0, [X22]
	041 Move [X31+8], X31
	042 Move [X31+28], W31
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {48}
	046 Call 0x1C17DFC
	047 Move X0, [X22]
	048 Move X8, [X0+184]
	049 Move X0, [X8+152]
	050 Compare X0, 0
	051 JumpIfEqual {139}
	052 Move X8, 0x6E8000
	053 Move X8, [X8+3224]
	054 Add X2, X31, 8
	055 Move W1, W19
	056 Move X3, [X8]
	057 Call Dictionary`2<Int32Enum, Object>.TryGetValue, X0, X1, X2
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {90}
	062 Move X0, [X31+8]
	063 Compare X0, 0
	064 JumpIfEqual {139}
	065 Move X8, 0x6E8000
	066 Move X8, [X8+3216]
	067 Add X2, X31, 28
	068 Move W1, W20
	069 Move X3, [X8]
	070 Call Dictionary`2<Int32Enum, Boolean>.TryGetValue, X0, X1, X2
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {131}
	075 Move W0, W19
	076 Move W1, W20
	077 Move X2, X31
	078 Call SystemInfo.IsFormatSupported, X0, X1
	079 Move X8, [X31+8]
	080 And W2, W0, 1
	081 Move [X31+28], W2
	082 Compare X8, 0
	083 JumpIfEqual {139}
	084 Move X9, 0x6E8000
	085 Move X9, [X9+3208]
	086 Move X0, X8
	087 Move W1, W20
	088 Move X3, [X9]
	089 Call Dictionary`2<Int32Enum, Boolean>.Add, X0, X1, X2
	090 Move X8, 0x6E8000
	091 Move X8, [X8+3240]
	092 Move X0, [X8]
	093 Call 0x1C17F10
	094 Move X8, 0x6E8000
	095 Move X8, [X8+3232]
	096 Move X21, X0
	097 Move X1, [X8]
	098 Call Dictionary`2<Int32Enum, Boolean>..ctor, X0
	099 Move W0, W19
	100 Move W1, W20
	101 Move X2, X31
	102 Move [X31+8], X21
	103 Call SystemInfo.IsFormatSupported, X0, X1
	104 Move X8, [X31+8]
	105 And W2, W0, 1
	106 Move [X31+28], W2
	107 Compare X8, 0
	108 JumpIfEqual {139}
	109 Move X9, 0x6E8000
	110 Move X9, [X9+3208]
	111 Move X0, X8
	112 Move W1, W20
	113 Move X3, [X9]
	114 Call Dictionary`2<Int32Enum, Boolean>.Add, X0, X1, X2
	115 Move X0, [X22]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {121}
	119 Call 0x1C17DFC
	120 Move X0, [X22]
	121 Move X8, [X0+184]
	122 Move X0, [X8+152]
	123 Compare X0, 0
	124 JumpIfEqual {139}
	125 Move X8, 0x6E8000
	126 Move X2, [X31+8]
	127 Move X8, [X8+3200]
	128 Move W1, W19
	129 Move X3, [X8]
	130 Call Dictionary`2<Int32Enum, Object>.Add, X0, X1, X2
	131 Move W0, [X31+28]
	132 Move X20, [X31+48]
	133 Move X19, [X31+56]
	134 Move X22, [X31+32]
	135 Move X21, [X31+40]
	136 Move X30, [X31+16]
	137 Add X31, X31, 64
	138 Return X0
	139 Call 0x1C17F20

Method: System.Int32 GetLastValidColorBufferIndex(UnityEngine.Rendering.RenderTargetIdentifier[] colorBuffers)

Disassembly:
	0x03A72724 LDRB W8, [X23 + 0x2C8]
	0x03A72728 MOV W20, W3
	0x03A7272C MOV X19, X2
	0x03A72730 MOV X22, X1
	0x03A72734 MOV X21, X0
	0x03A72738 TBNZ X8, 0x0, 0x3A7278C
	0x03A7273C ADRP X0, 0x6E4000
	0x03A72740 LDR X0, [X0 + 0xD28]
	0x03A72744 BL 0x1C16CF4
	0x03A72748 ADRP X0, 0x6DF000
	0x03A7274C LDR X0, [X0 + 0x80]
	0x03A72750 BL 0x1C16CF4
	0x03A72754 ADRP X0, 0x6E4000
	0x03A72758 LDR X0, [X0 + 0xB98]
	0x03A7275C BL 0x1C16CF4
	0x03A72760 ADRP X0, 0x6E4000
	0x03A72764 LDR X0, [X0 + 0xD30]
	0x03A72768 BL 0x1C16CF4
	0x03A7276C ADRP X0, 0x6DF000
	0x03A72770 LDR X0, [X0 + 0xA0]
	0x03A72774 BL 0x1C16CF4
	0x03A72778 ADRP X0, 0x6DF000
	0x03A7277C LDR X0, [X0 + 0xB0]
	0x03A72780 BL 0x1C16CF4
	0x03A72784 MOVZ W8, 0x1
	0x03A72788 STRB W8, [X23 + 0x2C8]
	0x03A7278C MOV X1, X22
	0x03A72790 STR X31, [X31 + 0x8]
	0x03A72794 BL 0x3A74A40
	0x03A72798 TBZ X20, 0x0, 0x3A72844
	0x03A7279C MOV W1, W0
	0x03A727A0 LDR X0, [X21 + 0x10]
	0x03A727A4 CBZ X0, 0x3A728D4
	0x03A727A8 ADRP X8, 0x6E4000
	0x03A727AC LDR X8, [X8 + 0xD28]
	0x03A727B0 ADD X2, X31, 0x8
	0x03A727B4 LDR X3, [X8]
	0x03A727B8 BL 0x2A150AC
	0x03A727BC TBZ X0, 0x0, 0x3A72844
	0x03A727C0 LDR X0, [X31 + 0x8]
	0x03A727C4 CBZ X0, 0x3A728D4
	0x03A727C8 LDR W8, [X0 + 0x20]
	0x03A727CC CMP W8, 0x1
	0x03A727D0 B.LT 0x3A72844

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+176], X30
	003 Move [X31+184], X21
	004 Move [X31+192], X20
	005 Move [X31+200], X19
	006 Compare X0, 0
	007 JumpIfEqual {59}
	008 Move W8, [X0+24]
	009 Move X19, X0
	010 Move W21, 40
	011 Subtract W8, W8, 1
	012 Move W20, W8
	013 Move TEMP, X8
	014 And TEMP, TEMP, -2147483648
	015 Compare TEMP, -2147483648
	016 JumpIfEqual {51}
	017 Move W8, [X19+24]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction UMADDL not yet implemented."
	020 Move X9, [X8+64]
	021 Move V1, [X8+32]
	022 Move V0, [X8+48]
	023 Add X8, X31, 88
	024 Move W0, W31
	025 Move X1, X31
	026 Move [X31+160], X9
	027 Move [X31+128], V1
	028 Move [X31+136], V0
	029 Call RenderTargetIdentifier.op_Implicit, X0
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 Move X8, [X31+120]
	033 Move V2, [X31+128]
	034 Move V3, [X31+144]
	035 Move X9, [X31+160]
	036 Add X0, X31, 48
	037 Add X1, X31, 0
	038 Move X2, X31
	039 Move [X31], V0
	040 Move [X31+8], V1
	041 Move [X31+32], X8
	042 Move [X31+48], V2
	043 Move [X31+56], V3
	044 Move [X31+80], X9
	045 Call RenderTargetIdentifier.op_Inequality, X0, X1
	046 Subtract W8, W20, 1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {12}
	051 Move W0, W20
	052 Move X20, [X31+192]
	053 Move X19, [X31+200]
	054 Move X30, [X31+176]
	055 Move X21, [X31+184]
	056 Add X31, X31, 208
	057 Return X0
	058 Call 0x1C17F28
	059 Call 0x1C17F20

Method: System.UInt32 GetValidColorBufferCount(UnityEngine.Rendering.RenderTargetIdentifier[] colorBuffers)

Disassembly:
	0x03A727D4 ADRP X8, 0x6DF000
	0x03A727D8 LDR X8, [X8 + 0xB0]
	0x03A727DC LDR X1, [X8]
	0x03A727E0 BL 0x25ED534
	0x03A727E4 LDR X9, [X31 + 0x8]
	0x03A727E8 CBZ X9, 0x3A728D4
	0x03A727EC MOV X20, X0
	0x03A727F0 CBZ X0, 0x3A728D4
	0x03A727F4 ADRP X11, 0x6DF000
	0x03A727F8 LDR X8, [X20]
	0x03A727FC LDR W10, [X9 + 0x20]
	0x03A72800 LDR X11, [X11 + 0x80]
	0x03A72804 LDRH W9, [X8 + 0x12E]
	0x03A72808 SUB W21, W10, 0x1
	0x03A7280C LDR X1, [X11]
	0x03A72810 CBZ X9, 0x3A72834
	0x03A72814 LDR X10, [X8 + 0xB0]
	0x03A72818 ADD X10, X10, 0x8
	0x03A7281C LDUR X11, [X10 - 0x8]
	0x03A72820 CMP X11, X1
	0x03A72824 B.EQ 0x3A72860
	0x03A72828 SUBS X9, X9, 0x1
	0x03A7282C ADD X10, X10, 0x10
	0x03A72830 B.NE 0x3A7281C
	0x03A72834 MOV X0, X20
	0x03A72838 MOV W2, W31
	0x03A7283C BL 0x1C5C788
	0x03A72840 B 0x3A7286C
	0x03A72844 MOV W0, W31
	0x03A72848 STR X31, [X19]
	0x03A7284C LDP X20, X19, [X31 + 0x30]
	0x03A72850 LDP X22, X21, [X31 + 0x20]
	0x03A72854 LDP X30, X23, [X31 + 0x10]
	0x03A72858 ADD X31, X31, 0x40
	0x03A7285C RET
	0x03A72860 LDRSW X9, [X10]
	0x03A72864 ADD X8, X8, X9, 0x4, LSL
	0x03A72868 ADD X0, X8, 0x138
	0x03A7286C LDP X8, X2, [X0]
	0x03A72870 MOV X0, X20
	0x03A72874 MOV W1, W21
	0x03A72878 BLR X8
	0x03A7287C STR X0, [X19]
	0x03A72880 LDR X0, [X31 + 0x8]
	0x03A72884 CBZ X0, 0x3A728D4
	0x03A72888 ADRP X9, 0x6E4000
	0x03A7288C LDR W8, [X0 + 0x20]
	0x03A72890 LDR X9, [X9 + 0xD30]
	0x03A72894 SUB W1, W8, 0x1
	0x03A72898 LDR X2, [X9]
	0x03A7289C BL 0x25EE954
	0x03A728A0 ADRP X19, 0x6E4000

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+176], X30
	003 Move [X31+192], X22
	004 Move [X31+200], X21
	005 Move [X31+208], X20
	006 Move [X31+216], X19
	007 Compare X0, 0
	008 JumpIfEqual {49}
	009 Move X8, [X0+24]
	010 Move X19, X0
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X21, X31
	013 Move W20, W31
	014 And X8, X8, 0
	015 Add X22, X19, 32
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X8, [X22+32]
	018 Move V1, [X22]
	019 Move V0, [X22+16]
	020 Move W0, W31
	021 Move X1, X31
	022 Move [X31+160], X8
	023 Add X8, X31, 88
	024 Move [X31+128], V1
	025 Move [X31+136], V0
	026 Call RenderTargetIdentifier.op_Implicit, X0
	027 NotImplemented "Instruction LDUR not yet implemented."
	028 NotImplemented "Instruction LDUR not yet implemented."
	029 Move X8, [X31+120]
	030 Move V2, [X31+128]
	031 Move V3, [X31+144]
	032 Move X9, [X31+160]
	033 Add X0, X31, 48
	034 Add X1, X31, 0
	035 Move X2, X31
	036 Move [X31], V0
	037 Move [X31+8], V1
	038 Move [X31+32], X8
	039 Move [X31+48], V2
	040 Move [X31+56], V3
	041 Move [X31+80], X9
	042 Call RenderTargetIdentifier.op_Inequality, X0, X1
	043 Move W8, [X19+24]
	044 And W9, W0, 1
	045 Add X21, X21, 1
	046 Add W20, W20, W9
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Add X22, X22, 40
	049 Move W20, W31
	050 Move W0, W20
	051 Move X20, [X31+208]
	052 Move X19, [X31+216]
	053 Move X22, [X31+192]
	054 Move X21, [X31+200]
	055 Move X30, [X31+176]
	056 Add X31, X31, 224
	057 Return X0
	058 Call 0x1C17F28

Method: System.UInt32 GetValidColorBufferCount(UnityEngine.Rendering.RTHandle[] colorBuffers)

Disassembly:
	0x03A728A4 LDR X19, [X19 + 0xB98]
	0x03A728A8 LDR X0, [X19]
	0x03A728AC LDR W8, [X0 + 0xE0]
	0x03A728B0 CBNZ W8, 0x3A728BC
	0x03A728B4 BL 0x1C16DFC
	0x03A728B8 LDR X0, [X19]
	0x03A728BC LDR X8, [X0 + 0xB8]
	0x03A728C0 MOVZ W0, 0x1
	0x03A728C4 LDR W9, [X8]
	0x03A728C8 SUB W9, W9, 0x1
	0x03A728CC STR W9, [X8]
	0x03A728D0 B 0x3A7284C
	0x03A728D4 BL 0x1C16F20
	0x03A728D8 STP D11, D10, [X31 - 0x80]!
	0x03A728DC STP D9, D8, [X31 + 0x10]
	0x03A728E0 STP X29, X30, [X31 + 0x20]
	0x03A728E4 STP X28, X27, [X31 + 0x30]
	0x03A728E8 STP X26, X25, [X31 + 0x40]
	0x03A728EC STP X24, X23, [X31 + 0x50]
	0x03A728F0 STP X22, X21, [X31 + 0x60]
	0x03A728F4 STP X20, X19, [X31 + 0x70]
	0x03A728F8 SUB X31, X31, 0x250
	0x03A728FC ADRP X20, 0x970000
	0x03A72900 LDRB W8, [X20 + 0x2B1]
	0x03A72904 MOV X27, X6
	0x03A72908 MOV V8.16B, V2.16B
	0x03A7290C MOV W21, W5
	0x03A72910 MOV W25, W4
	0x03A72914 MOV W22, W3
	0x03A72918 MOV W23, W2
	0x03A7291C MOV X24, X1
	0x03A72920 MOV V9.16B, V1.16B
	0x03A72924 MOV V10.16B, V0.16B
	0x03A72928 MOV X19, X0
	0x03A7292C ADD X29, X31, 0x90
	0x03A72930 TBNZ X8, 0x0, 0x3A72984
	0x03A72934 ADRP X0, 0x681000
	0x03A72938 LDR X0, [X0 + 0x598]
	0x03A7293C BL 0x1C16CF4
	0x03A72940 ADRP X0, 0x6E4000
	0x03A72944 LDR X0, [X0 + 0xB98]
	0x03A72948 BL 0x1C16CF4
	0x03A7294C ADRP X0, 0x6DE000
	0x03A72950 LDR X0, [X0 + 0x9B0]
	0x03A72954 BL 0x1C16CF4
	0x03A72958 ADRP X0, 0x6E2000
	0x03A7295C LDR X0, [X0 + 0x10]
	0x03A72960 BL 0x1C16CF4
	0x03A72964 ADRP X0, 0x6AA000
	0x03A72968 LDR X0, [X0 + 0x8A8]
	0x03A7296C BL 0x1C16CF4
	0x03A72970 ADRP X0, 0x681000
	0x03A72974 LDR X0, [X0 + 0x988]
	0x03A72978 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+176], X30
	003 Move [X31+192], X22
	004 Move [X31+200], X21
	005 Move [X31+208], X20
	006 Move [X31+216], X19
	007 Compare X0, 0
	008 JumpIfEqual {51}
	009 Move X8, [X0+24]
	010 Move X19, X0
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X21, X31
	013 Move W20, W31
	014 And X8, X8, 0
	015 Add X22, X19, 32
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X9, [X22]
	018 Compare X9, 0
	019 JumpIfEqual {49}
	020 Move X8, [X9+72]
	021 NotImplemented "Instruction LDUR not yet implemented."
	022 NotImplemented "Instruction LDUR not yet implemented."
	023 Move W0, W31
	024 Move [X31+160], X8
	025 Add X8, X31, 88
	026 Move X1, X31
	027 Move [X31+128], V1
	028 Move [X31+136], V0
	029 Call RenderTargetIdentifier.op_Implicit, X0
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 Move X8, [X31+120]
	033 Move V2, [X31+128]
	034 Move V3, [X31+144]
	035 Move X9, [X31+160]
	036 Add X0, X31, 48
	037 Add X1, X31, 0
	038 Move X2, X31
	039 Move [X31], V0
	040 Move [X31+8], V1
	041 Move [X31+32], X8
	042 Move [X31+48], V2
	043 Move [X31+56], V3
	044 Move [X31+80], X9
	045 Call RenderTargetIdentifier.op_Inequality, X0, X1
	046 Move W8, [X19+24]
	047 And W9, W0, 1
	048 Add W20, W20, W9
	049 Add X21, X21, 1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move W20, W31
	052 Move W0, W20
	053 Move X20, [X31+208]
	054 Move X19, [X31+216]
	055 Move X22, [X31+192]
	056 Move X21, [X31+200]
	057 Move X30, [X31+176]
	058 Add X31, X31, 224
	059 Return X0
	060 Call 0x1C17F28

Method: System.Boolean IsMRT(UnityEngine.Rendering.RenderTargetIdentifier[] colorBuffers)

Disassembly:
	0x03A7297C MOVZ W8, 0x1
	0x03A72980 STRB W8, [X20 + 0x2B1]
	0x03A72984 MOVI V0.2D, 0x0
	0x03A72988 STR X31, [X31 + 0x240]
	0x03A7298C STP V0, V0, [X29 + 0x190]
	0x03A72990 STP V0, V0, [X29 + 0x170]
	0x03A72994 STP V0, V0, [X29 + 0x150]
	0x03A72998 STR V0, [X29 + 0x14]
	0x03A7299C ADRP X28, 0x6E4000
	0x03A729A0 LDR X8, [X19]
	0x03A729A4 LDR X28, [X28 + 0xB98]
	0x03A729A8 CBZ X8, 0x3A729E0
	0x03A729AC LDRB W9, [X8 + 0xA8]
	0x03A729B0 CBZ W9, 0x3A729E0
	0x03A729B4 LDP S0, S1, [X8 + 0x94]
	0x03A729B8 ADRP X8, 0xFFFFFFFFFD077000
	0x03A729BC LDR V2, [X8 + 0xF20]
	0x03A729C0 FSUB S0, S0, S10
	0x03A729C4 FSUB S1, S1, S9
	0x03A729C8 FMUL S0, S0, S0
	0x03A729CC FMUL S1, S1, S1
	0x03A729D0 FADD S0, S0, S1
	0x03A729D4 FCMP S0, S2
	0x03A729D8 CSET W26, PL

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x971000
	006 Move X21, 0x6E3000
	007 Move W8, [X20+683]
	008 Move X21, [X21+16]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x6E3000
	015 Move X0, [X0+16]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+683], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call RenderingUtils.GetValidColorBufferCount, X0
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CSET not yet implemented."
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: System.Boolean IsMRT(UnityEngine.Rendering.RTHandle[] colorBuffers)

Disassembly:
	0x03A729DC B 0x3A729E4
	0x03A729E0 MOVZ W26, 0x1
	0x03A729E4 LDP V2, V0, [X24 + 0x10]
	0x03A729E8 LDR W8, [X24 + 0x30]
	0x03A729EC LDR V1, [X24]
	0x03A729F0 LDR X0, [X28]
	0x03A729F4 STP V2, V0, [X29 + 0x50]
	0x03A729F8 STR W8, [X31 + 0x100]
	0x03A729FC STR V1, [X29 + 0x4]
	0x03A72A00 ADRP X20, 0x681000
	0x03A72A04 LDR W8, [X0 + 0xE0]
	0x03A72A08 LDR X20, [X20 + 0x988]
	0x03A72A0C CBNZ W8, 0x3A72A14
	0x03A72A10 BL 0x1C16DFC
	0x03A72A14 LDP V0, V1, [X29 + 0x40]
	0x03A72A18 LDR W8, [X31 + 0x100]
	0x03A72A1C LDR V2, [X29 + 0x6]
	0x03A72A20 LDR X5, [X20]
	0x03A72A24 STP V0, V1, [X29 + 0x100]
	0x03A72A28 STR W8, [X31 + 0x1C0]
	0x03A72A2C ADD X8, X31, 0x1D0
	0x03A72A30 ADD X0, X31, 0x190
	0x03A72A34 FMOV S0, W31
	0x03A72A38 MOVZ W1, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x971000
	006 Move X21, 0x6E3000
	007 Move W8, [X20+684]
	008 Move X21, [X21+16]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x6E3000
	015 Move X0, [X0+16]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+684], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Call RenderingUtils.GetValidColorBufferCount, X0
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CSET not yet implemented."
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: System.Boolean Contains(UnityEngine.Rendering.RenderTargetIdentifier[] source, UnityEngine.Rendering.RenderTargetIdentifier value)

Disassembly:
	0x03A72A3C MOV W2, W21
	0x03A72A40 MOV W3, W23
	0x03A72A44 MOV W4, W22
	0x03A72A48 STR V2, [X29 + 0x12]
	0x03A72A4C BL 0x3A724F4
	0x03A72A50 TBNZ X26, 0x0, 0x3A72A84
	0x03A72A54 ADRP X8, 0x6E2000
	0x03A72A58 LDR X8, [X8 + 0x10]
	0x03A72A5C LDR X26, [X19]
	0x03A72A60 LDR X0, [X8]
	0x03A72A64 LDR W8, [X0 + 0xE0]
	0x03A72A68 CBNZ W8, 0x3A72A70
	0x03A72A6C BL 0x1C16DFC
	0x03A72A70 ADD X1, X31, 0x1D0
	0x03A72A74 MOVZ W2, 0x1
	0x03A72A78 MOV X0, X26
	0x03A72A7C BL 0x3A71EF4
	0x03A72A80 TBZ X0, 0x0, 0x3A72C88
	0x03A72A84 LDR X8, [X19]
	0x03A72A88 CBZ X8, 0x3A72BF8
	0x03A72A8C ADRP X9, 0x681000
	0x03A72A90 LDR X9, [X9 + 0x598]
	0x03A72A94 LDR X26, [X8 + 0x18]
	0x03A72A98 LDR X0, [X9]
	0x03A72A9C LDR W9, [X0 + 0xE0]
	0x03A72AA0 CBNZ W9, 0x3A72AA8
	0x03A72AA4 BL 0x1C16DFC
	0x03A72AA8 MOV X0, X26
	0x03A72AAC MOV X1, X31
	0x03A72AB0 MOV X2, X31
	0x03A72AB4 BL 0x3C354F8
	0x03A72AB8 TBZ X0, 0x0, 0x3A72BF8
	0x03A72ABC LDR X8, [X19]
	0x03A72AC0 CBZ X8, 0x3A72CB8
	0x03A72AC4 LDR X0, [X8 + 0x18]
	0x03A72AC8 CBZ X0, 0x3A72CB8
	0x03A72ACC ADD X8, X31, 0xD0
	0x03A72AD0 MOV X1, X31
	0x03A72AD4 BL 0x3C21334
	0x03A72AD8 LDP V0, V1, [X29 + 0x40]
	0x03A72ADC LDR V2, [X29 + 0x6]
	0x03A72AE0 LDR W8, [X31 + 0x100]
	0x03A72AE4 STP V0, V1, [X29 + 0xC0]
	0x03A72AE8 STR V2, [X29 + 0xE]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+104], X23
	004 Move [X31+112], X22
	005 Move [X31+120], X21
	006 Move [X31+128], X20
	007 Move [X31+136], X19
	008 Compare X0, 0
	009 JumpIfEqual {55}
	010 Move X8, [X0+24]
	011 Move X20, X0
	012 NotImplemented "Instruction CMP not yet implemented."
	013 NotImplemented "Instruction CSET not yet implemented."
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move X19, X1
	016 Move X22, X31
	017 And X8, X8, 0
	018 Add X23, X20, 32
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X8, [X23+32]
	021 Move V1, [X23]
	022 Move V0, [X23+16]
	023 Add X0, X31, 48
	024 Add X1, X31, 0
	025 Move [X31+80], X8
	026 Move [X31+48], V1
	027 Move [X31+56], V0
	028 Move X8, [X19+32]
	029 Move V1, [X19]
	030 Move V0, [X19+16]
	031 Move X2, X31
	032 Move [X31+32], X8
	033 Move [X31], V1
	034 Move [X31+8], V0
	035 Call RenderTargetIdentifier.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {45}
	040 Move W8, [X20+24]
	041 Add X22, X22, 1
	042 Add X23, X23, 40
	043 NotImplemented "Instruction CMP not yet implemented."
	044 NotImplemented "Instruction CSET not yet implemented."
	045 And W0, W21, 1
	046 Move X20, [X31+128]
	047 Move X19, [X31+136]
	048 Move X22, [X31+112]
	049 Move X21, [X31+120]
	050 Move X30, [X31+96]
	051 Move X23, [X31+104]
	052 Add X31, X31, 144
	053 Return X0
	054 Call 0x1C17F28
	055 Call 0x1C17F20

Method: System.Int32 IndexOf(UnityEngine.Rendering.RenderTargetIdentifier[] source, UnityEngine.Rendering.RenderTargetIdentifier value)

Disassembly:
	0x03A72AEC STR W8, [X31 + 0x180]
	0x03A72AF0 LDR X8, [X19]
	0x03A72AF4 CBZ X8, 0x3A72CB8
	0x03A72AF8 LDR X0, [X8 + 0x18]
	0x03A72AFC CBZ X0, 0x3A72CB8
	0x03A72B00 MOV X1, X31
	0x03A72B04 BL 0x3C1ABA0
	0x03A72B08 LDR X8, [X19]
	0x03A72B0C CBZ X8, 0x3A72CB8
	0x03A72B10 MOV W26, W0
	0x03A72B14 LDR X0, [X8 + 0x18]
	0x03A72B18 CBZ X0, 0x3A72CB8
	0x03A72B1C MOV X1, X31
	0x03A72B20 STR W25, [X31 + 0x14]
	0x03A72B24 BL 0x3C1AC20
	0x03A72B28 LDR X8, [X19]
	0x03A72B2C CBZ X8, 0x3A72CB8
	0x03A72B30 LDR X0, [X8 + 0x18]
	0x03A72B34 CBZ X0, 0x3A72CB8
	0x03A72B38 MOV X1, X31
	0x03A72B3C MOV V11.16B, V0.16B
	0x03A72B40 MOV X25, X27
	0x03A72B44 BL 0x3C1AB20
	0x03A72B48 LDR X8, [X19]
	0x03A72B4C CBZ X8, 0x3A72CB8
	0x03A72B50 MOV W27, W0
	0x03A72B54 LDR X0, [X8 + 0x18]
	0x03A72B58 CBZ X0, 0x3A72CB8
	0x03A72B5C MOV X1, X31
	0x03A72B60 BL 0x3C1A9D4
	0x03A72B64 LDR X8, [X28]
	0x03A72B68 MOV W28, W0
	0x03A72B6C LDR W9, [X8 + 0xE0]
	0x03A72B70 CBNZ W9, 0x3A72B7C
	0x03A72B74 MOV X0, X8
	0x03A72B78 BL 0x1C16DFC
	0x03A72B7C LDP V0, V1, [X29 + 0xC0]
	0x03A72B80 LDR W8, [X31 + 0x180]
	0x03A72B84 LDR V2, [X29 + 0xE]
	0x03A72B88 LDR X5, [X20]
	0x03A72B8C STR V0, [X31 + 0x9]
	0x03A72B90 STR W8, [X31 + 0xC0]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+112], X22
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Compare X0, 0
	008 JumpIfEqual {53}
	009 Move X8, [X0+24]
	010 Move X21, X0
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X20, X1
	013 Move X19, X31
	014 And X8, X8, 0
	015 Add X22, X21, 32
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X8, [X22+32]
	018 Move V1, [X22]
	019 Move V0, [X22+16]
	020 Add X0, X31, 48
	021 Add X1, X31, 0
	022 Move [X31+80], X8
	023 Move [X31+48], V1
	024 Move [X31+56], V0
	025 Move X8, [X20+32]
	026 Move V1, [X20]
	027 Move V0, [X20+16]
	028 Move X2, X31
	029 Move [X31+32], X8
	030 Move [X31], V1
	031 Move [X31+8], V0
	032 Call RenderTargetIdentifier.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {44}
	037 Move W8, [X21+24]
	038 Add X19, X19, 1
	039 Add X22, X22, 40
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move TEMP, 0
	042 Not TEMP
	043 Move W19, TEMP
	044 Move W0, W19
	045 Move X20, [X31+128]
	046 Move X19, [X31+136]
	047 Move X22, [X31+112]
	048 Move X21, [X31+120]
	049 Move X30, [X31+96]
	050 Add X31, X31, 144
	051 Return X0
	052 Call 0x1C17F28
	053 Call 0x1C17F20

Method: System.UInt32 CountDistinct(UnityEngine.Rendering.RenderTargetIdentifier[] source, UnityEngine.Rendering.RenderTargetIdentifier value)

Disassembly:
	0x03A72B94 ADD X8, X31, 0xD0
	0x03A72B98 ADD X0, X31, 0x90
	0x03A72B9C MOVZ W1, 0x1
	0x03A72BA0 MOV W2, W26
	0x03A72BA4 MOV V0.16B, V11.16B
	0x03A72BA8 MOV W3, W27
	0x03A72BAC MOV W4, W28
	0x03A72BB0 STP V1, V2, [X29 + 0x10]
	0x03A72BB4 BL 0x3A724F4
	0x03A72BB8 ADRP X8, 0x6E2000
	0x03A72BBC LDR X8, [X8 + 0x10]
	0x03A72BC0 LDR X26, [X19]
	0x03A72BC4 LDR X0, [X8]
	0x03A72BC8 LDR W8, [X0 + 0xE0]
	0x03A72BCC CBNZ W8, 0x3A72BD4
	0x03A72BD0 BL 0x1C16DFC
	0x03A72BD4 ADD X0, X31, 0x18
	0x03A72BD8 ADD X1, X31, 0xD0
	0x03A72BDC MOVZ W2, 0x78
	0x03A72BE0 BL 0x3EB1AC0
	0x03A72BE4 ADD X0, X31, 0x18
	0x03A72BE8 MOV X1, X26
	0x03A72BEC BL 0x3A72644
	0x03A72BF0 MOV X27, X25
	0x03A72BF4 LDR W25, [X31 + 0x14]
	0x03A72BF8 ADRP X20, 0x6AA000
	0x03A72BFC LDR X20, [X20 + 0x8A8]
	0x03A72C00 LDR X0, [X20]
	0x03A72C04 LDR W8, [X0 + 0xE0]
	0x03A72C08 CBNZ W8, 0x3A72C14
	0x03A72C0C BL 0x1C16DFC
	0x03A72C10 LDR X0, [X20]
	0x03A72C14 LDR X8, [X0 + 0xB8]
	0x03A72C18 LDR X0, [X8 + 0x10]
	0x03A72C1C CBZ X0, 0x3A72CB8
	0x03A72C20 ADD X1, X31, 0x1D0
	0x03A72C24 MOVZ W3, 0x1
	0x03A72C28 MOV X2, X19
	0x03A72C2C MOVZ W26, 0x1
	0x03A72C30 BL 0x3A72710
	0x03A72C34 TBNZ X0, 0x0, 0x3A72C8C
	0x03A72C38 ADRP X8, 0x6DE000
	0x03A72C3C LDR X8, [X8 + 0x9B0]
	0x03A72C40 LDR X0, [X8]
	0x03A72C44 LDR W8, [X0 + 0xE0]
	0x03A72C48 CBNZ W8, 0x3A72C50
	0x03A72C4C BL 0x1C16DFC
	0x03A72C50 AND W3, W25, 0x1
	0x03A72C54 MOV V0.16B, V10.16B
	0x03A72C58 MOV V1.16B, V9.16B
	0x03A72C5C MOV X0, X24
	0x03A72C60 MOV W1, W23
	0x03A72C64 MOV W2, W22
	0x03A72C68 MOV W4, W21
	0x03A72C6C MOV V2.16B, V8.16B
	0x03A72C70 MOV X5, X27
	0x03A72C74 MOV X6, X31
	0x03A72C78 BL 0x39D6094
	0x03A72C7C MOVZ W26, 0x1
	0x03A72C80 STR X0, [X19]
	0x03A72C84 B 0x3A72C8C
	0x03A72C88 MOV W26, W31
	0x03A72C8C MOV W0, W26
	0x03A72C90 ADD X31, X31, 0x250
	0x03A72C94 LDP X20, X19, [X31 + 0x70]
	0x03A72C98 LDP X22, X21, [X31 + 0x60]
	0x03A72C9C LDP X24, X23, [X31 + 0x50]
	0x03A72CA0 LDP X26, X25, [X31 + 0x40]
	0x03A72CA4 LDP X28, X27, [X31 + 0x30]
	0x03A72CA8 LDP X29, X30, [X31 + 0x20]
	0x03A72CAC LDP D9, D8, [X31 + 0x10]
	0x03A72CB0 LDP D11, D10, [X31], #0x80

ISIL:
	001 Subtract X31, X31, 336
	002 Move [X31+272], X29
	003 Move [X31+288], X30
	004 Move [X31+296], X23
	005 Move [X31+304], X22
	006 Move [X31+312], X21
	007 Move [X31+320], X20
	008 Move [X31+328], X19
	009 Compare X0, 0
	010 JumpIfEqual {86}
	011 Move X8, [X0+24]
	012 Move X20, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X19, X1
	015 Move W21, W31
	016 Move X22, X31
	017 And X8, X8, 0
	018 Add X23, X20, 32
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X8, [X23+32]
	021 Move V1, [X23]
	022 Move V0, [X23+16]
	023 Add X0, X31, 224
	024 Add X1, X31, 176
	025 Move [X31+256], X8
	026 Move [X31+224], V1
	027 Move [X31+232], V0
	028 Move X8, [X19+32]
	029 Move V1, [X19]
	030 Move V0, [X19+16]
	031 Move X2, X31
	032 Move [X31+208], X8
	033 Move [X31+176], V1
	034 Move [X31+184], V0
	035 Call RenderTargetIdentifier.op_Inequality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {70}
	040 Move W8, [X20+24]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X8, [X23+32]
	043 Move V1, [X23]
	044 Move V0, [X23+16]
	045 Move W0, W31
	046 Move X1, X31
	047 Move [X31+160], X8
	048 Add X8, X31, 88
	049 Move [X31+128], V1
	050 Move [X31+136], V0
	051 Call RenderTargetIdentifier.op_Implicit, X0
	052 NotImplemented "Instruction LDUR not yet implemented."
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 Move X8, [X31+120]
	055 Move V2, [X31+128]
	056 Move V3, [X31+144]
	057 Move X9, [X31+160]
	058 Add X0, X31, 48
	059 Add X1, X31, 0
	060 Move X2, X31
	061 Move [X31], V0
	062 Move [X31+8], V1
	063 Move [X31+32], X8
	064 Move [X31+48], V2
	065 Move [X31+56], V3
	066 Move [X31+80], X9
	067 Call RenderTargetIdentifier.op_Inequality, X0, X1
	068 And W8, W0, 1
	069 Add W21, W21, W8
	070 Move W8, [X20+24]
	071 Add X22, X22, 1
	072 Add X23, X23, 40
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move W21, W31
	075 Move W0, W21
	076 Move X20, [X31+320]
	077 Move X19, [X31+328]
	078 Move X22, [X31+304]
	079 Move X21, [X31+312]
	080 Move X30, [X31+288]
	081 Move X23, [X31+296]
	082 Move X29, [X31+272]
	083 Add X31, X31, 336
	084 Return X0
	085 Call 0x1C17F28
	086 Call 0x1C17F20

Method: System.Int32 LastValid(UnityEngine.Rendering.RenderTargetIdentifier[] source)

Disassembly:
	0x03A72CB4 RET
	0x03A72CB8 BL 0x1C16F20
	0x03A72CBC STP D9, D8, [X31 - 0x70]!
	0x03A72CC0 STP X29, X30, [X31 + 0x10]
	0x03A72CC4 STP X28, X27, [X31 + 0x20]
	0x03A72CC8 STP X26, X25, [X31 + 0x30]
	0x03A72CCC STP X24, X23, [X31 + 0x40]
	0x03A72CD0 STP X22, X21, [X31 + 0x50]
	0x03A72CD4 STP X20, X19, [X31 + 0x60]
	0x03A72CD8 SUB X31, X31, 0x250
	0x03A72CDC ADRP X25, 0x970000
	0x03A72CE0 LDRB W8, [X25 + 0x2B2]
	0x03A72CE4 MOV X28, X7
	0x03A72CE8 MOV V8.16B, V0.16B
	0x03A72CEC MOV W21, W6
	0x03A72CF0 MOV W22, W4
	0x03A72CF4 MOV W23, W3
	0x03A72CF8 MOV X24, X2
	0x03A72CFC MOV X26, X1
	0x03A72D00 MOV X19, X0
	0x03A72D04 ADD X20, X31, 0x90
	0x03A72D08 STR W5, [X31 + 0x14]
	0x03A72D0C TBNZ X8, 0x0, 0x3A72D60
	0x03A72D10 ADRP X0, 0x681000
	0x03A72D14 LDR X0, [X0 + 0x598]
	0x03A72D18 BL 0x1C16CF4
	0x03A72D1C ADRP X0, 0x6E4000
	0x03A72D20 LDR X0, [X0 + 0xB98]
	0x03A72D24 BL 0x1C16CF4
	0x03A72D28 ADRP X0, 0x6DE000
	0x03A72D2C LDR X0, [X0 + 0x9B0]
	0x03A72D30 BL 0x1C16CF4
	0x03A72D34 ADRP X0, 0x6E2000
	0x03A72D38 LDR X0, [X0 + 0x10]
	0x03A72D3C BL 0x1C16CF4
	0x03A72D40 ADRP X0, 0x6AA000
	0x03A72D44 LDR X0, [X0 + 0x8A8]
	0x03A72D48 BL 0x1C16CF4
	0x03A72D4C ADRP X0, 0x681000
	0x03A72D50 LDR X0, [X0 + 0x988]
	0x03A72D54 BL 0x1C16CF4
	0x03A72D58 MOVZ W8, 0x1
	0x03A72D5C STRB W8, [X25 + 0x2B2]
	0x03A72D60 MOVI V0.2D, 0x0

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+176], X30
	003 Move [X31+184], X21
	004 Move [X31+192], X20
	005 Move [X31+200], X19
	006 Compare X0, 0
	007 JumpIfEqual {56}
	008 Move W19, [X0+24]
	009 Move X20, X0
	010 Move W21, 40
	011 Subtract W19, W19, 1
	012 Move W8, [X20+24]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction UMADDL not yet implemented."
	015 Move X9, [X8+64]
	016 Move V1, [X8+32]
	017 Move V0, [X8+48]
	018 Add X8, X31, 88
	019 Move W0, W31
	020 Move X1, X31
	021 Move [X31+160], X9
	022 Move [X31+128], V1
	023 Move [X31+136], V0
	024 Call RenderTargetIdentifier.op_Implicit, X0
	025 NotImplemented "Instruction LDUR not yet implemented."
	026 NotImplemented "Instruction LDUR not yet implemented."
	027 Move X8, [X31+120]
	028 Move V2, [X31+128]
	029 Move V3, [X31+144]
	030 Move X9, [X31+160]
	031 Add X0, X31, 48
	032 Add X1, X31, 0
	033 Move X2, X31
	034 Move [X31], V0
	035 Move [X31+8], V1
	036 Move [X31+32], X8
	037 Move [X31+48], V2
	038 Move [X31+56], V3
	039 Move [X31+80], X9
	040 Call RenderTargetIdentifier.op_Inequality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {11}
	045 Move TEMP, 0
	046 Not TEMP
	047 Move W19, TEMP
	048 Move W0, W19
	049 Move X20, [X31+192]
	050 Move X19, [X31+200]
	051 Move X30, [X31+176]
	052 Move X21, [X31+184]
	053 Add X31, X31, 208
	054 Return X0
	055 Call 0x1C17F28
	056 Call 0x1C17F20

Method: System.Boolean Contains(UnityEngine.Rendering.ClearFlag a, UnityEngine.Rendering.ClearFlag b)

Disassembly:
	0x03A72D64 STR X31, [X31 + 0x240]
	0x03A72D68 STP V0, V0, [X20 + 0x190]
	0x03A72D6C STP V0, V0, [X20 + 0x170]

ISIL:
	001 NotImplemented "Instruction BICS not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

Method: System.Boolean SequenceEqual(UnityEngine.Rendering.RenderTargetIdentifier[] left, UnityEngine.Rendering.RenderTargetIdentifier[] right)

Disassembly:
	0x03A72D70 STP V0, V0, [X20 + 0x150]
	0x03A72D74 STR V0, [X20 + 0x14]
	0x03A72D78 ADRP X29, 0x6E4000
	0x03A72D7C LDR X8, [X19]
	0x03A72D80 LDR X29, [X29 + 0xB98]
	0x03A72D84 CBZ X8, 0x3A72DE8
	0x03A72D88 LDRB W9, [X8 + 0xA8]
	0x03A72D8C CBZ W9, 0x3A72DE8
	0x03A72D90 ADRP X25, 0x967000
	0x03A72D94 LDRB W9, [X25 + 0x78F]
	0x03A72D98 LDUR V9, [X8 + 0x94]
	0x03A72D9C CBNZ W9, 0x3A72DB4
	0x03A72DA0 ADRP X0, 0x689000
	0x03A72DA4 LDR X0, [X0 + 0xF08]
	0x03A72DA8 BL 0x1C16CF4
	0x03A72DAC MOVZ W8, 0x1
	0x03A72DB0 STRB W8, [X25 + 0x78F]
	0x03A72DB4 ADRP X8, 0x689000
	0x03A72DB8 LDR X8, [X8 + 0xF08]
	0x03A72DBC LDR X8, [X8]
	0x03A72DC0 LDR X8, [X8 + 0xB8]
	0x03A72DC4 LDR V0, [X8]
	0x03A72DC8 ADRP X8, 0xFFFFFFFFFD077000
	0x03A72DCC LDR V1, [X8 + 0xF20]
	0x03A72DD0 FSUB V0.2S, V9.2S, V0.2S
	0x00000000 INVALID
	0x03A72DD8 FADDP S0, V0.2S
	0x03A72DDC FCMP S0, S1
	0x03A72DE0 CSET W27, PL
	0x03A72DE4 B 0x3A72DEC
	0x03A72DE8 MOVZ W27, 0x1
	0x03A72DEC LDP V2, V0, [X24 + 0x10]
	0x03A72DF0 LDR W8, [X24 + 0x30]
	0x03A72DF4 LDR V1, [X24]
	0x03A72DF8 LDR X0, [X29]
	0x03A72DFC STP V2, V0, [X20 + 0x50]
	0x03A72E00 STR W8, [X31 + 0x100]
	0x03A72E04 STR V1, [X20 + 0x4]
	0x03A72E08 ADRP X25, 0x681000
	0x03A72E0C LDR W8, [X0 + 0xE0]
	0x03A72E10 LDR X25, [X25 + 0x988]
	0x03A72E14 CBNZ W8, 0x3A72E1C
	0x03A72E18 BL 0x1C16DFC
	0x03A72E1C LDP V0, V1, [X20 + 0x40]
	0x03A72E20 LDR W8, [X31 + 0x100]
	0x03A72E24 LDR V2, [X20 + 0x6]
	0x03A72E28 LDR X5, [X25]
	0x03A72E2C STP V0, V1, [X20 + 0x100]
	0x03A72E30 STR W8, [X31 + 0x1C0]
	0x03A72E34 ADD X8, X31, 0x1D0
	0x03A72E38 ADD X0, X31, 0x190
	0x03A72E3C FMOV S0, W31
	0x03A72E40 MOVZ W1, 0x2
	0x03A72E44 MOV W2, W21
	0x03A72E48 MOV W3, W23
	0x03A72E4C MOV W4, W22
	0x03A72E50 STR V2, [X20 + 0x12]
	0x03A72E54 BL 0x3A724F4
	0x03A72E58 TBNZ X27, 0x0, 0x3A72E8C

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+144], X30
	003 Move [X31+152], X23
	004 Move [X31+160], X22
	005 Move [X31+168], X21
	006 Move [X31+176], X20
	007 Move [X31+184], X19
	008 Compare X0, 0
	009 JumpIfEqual {69}
	010 Move X19, X1
	011 Compare X1, 0
	012 JumpIfEqual {69}
	013 Move X8, [X0+24]
	014 Move W9, [X19+24]
	015 Move X20, X0
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X21, X31
	019 And X8, X8, 0
	020 Add X22, X20, 32
	021 Add X23, X19, 32
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X8, [X22+32]
	024 Move V1, [X22]
	025 Move V0, [X22+16]
	026 Move [X31+128], X8
	027 Move [X31+96], V1
	028 Move [X31+104], V0
	029 Move W8, [X19+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move V0, [X23]
	032 Move V1, [X23+16]
	033 Move X8, [X23+32]
	034 Move V2, [X31+96]
	035 Move V3, [X31+112]
	036 Move X9, [X31+128]
	037 Add X0, X31, 48
	038 Add X1, X31, 0
	039 Move X2, X31
	040 Move [X31+32], X8
	041 Move [X31], V0
	042 Move [X31+8], V1
	043 Move [X31+48], V2
	044 Move [X31+56], V3
	045 Move [X31+80], X9
	046 Call RenderTargetIdentifier.op_Inequality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {56}
	051 Move W8, [X20+24]
	052 Add X21, X21, 1
	053 Add X22, X22, 40
	054 Add X23, X23, 40
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Xor W8, W0, 1
	057 Move W8, W31
	058 Move W8, 1
	059 Move X20, [X31+176]
	060 Move X19, [X31+184]
	061 Move X22, [X31+160]
	062 Move X21, [X31+168]
	063 Move X30, [X31+144]
	064 Move X23, [X31+152]
	065 And W0, W8, 1
	066 Add X31, X31, 192
	067 Return X0
	068 Call 0x1C17F28
	069 Call 0x1C17F20

Method: System.Boolean MultisampleDepthResolveSupported()

Disassembly:
	0x03A72E5C ADRP X8, 0x6E2000
	0x03A72E60 LDR X8, [X8 + 0x10]
	0x03A72E64 LDR X27, [X19]
	0x03A72E68 LDR X0, [X8]
	0x03A72E6C LDR W8, [X0 + 0xE0]
	0x03A72E70 CBNZ W8, 0x3A72E78
	0x03A72E74 BL 0x1C16DFC
	0x03A72E78 ADD X1, X31, 0x1D0
	0x03A72E7C MOVZ W2, 0x1
	0x03A72E80 MOV X0, X27
	0x03A72E84 BL 0x3A71EF4
	0x03A72E88 TBZ X0, 0x0, 0x3A73090
	0x03A72E8C LDR X8, [X19]
	0x03A72E90 CBZ X8, 0x3A73000
	0x03A72E94 ADRP X9, 0x681000
	0x03A72E98 LDR X9, [X9 + 0x598]
	0x03A72E9C LDR X27, [X8 + 0x18]
	0x03A72EA0 LDR X0, [X9]
	0x03A72EA4 LDR W9, [X0 + 0xE0]
	0x03A72EA8 CBNZ W9, 0x3A72EB0
	0x03A72EAC BL 0x1C16DFC
	0x03A72EB0 MOV X0, X27
	0x03A72EB4 MOV X1, X31
	0x03A72EB8 MOV X2, X31
	0x03A72EBC BL 0x3C354F8
	0x03A72EC0 TBZ X0, 0x0, 0x3A73000
	0x03A72EC4 LDR X8, [X19]
	0x03A72EC8 CBZ X8, 0x3A730BC
	0x03A72ECC LDR X0, [X8 + 0x18]
	0x03A72ED0 CBZ X0, 0x3A730BC
	0x03A72ED4 ADD X8, X31, 0xD0
	0x03A72ED8 MOV X1, X31
	0x03A72EDC BL 0x3C21334
	0x03A72EE0 LDP V0, V1, [X20 + 0x40]
	0x03A72EE4 LDR V2, [X20 + 0x6]
	0x03A72EE8 LDR W8, [X31 + 0x100]
	0x03A72EEC STP V0, V1, [X20 + 0xC0]
	0x03A72EF0 STR V2, [X20 + 0xE]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x971000
	005 Move X19, 0x682000
	006 Move W8, [X20+685]
	007 Move X19, [X19+2416]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x682000
	013 Move X0, [X0+2416]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+685], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X0, X31
	023 Call Application.get_platform
	024 Compare W0, 0
	025 JumpIfEqual {46}
	026 Move X0, [X19]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X31
	032 Call Application.get_platform
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X31
	035 Call SystemInfo.get_supportsMultisampleResolveDepth
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {46}
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X0, X31
	043 Move X30, [X31+32]
	044 Call SystemInfo.get_supportsMultisampleResolveStencil
	045 Return X0
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move W0, W31
	049 Move X30, [X31+32]
	050 Return X0

Method: System.Boolean RTHandleNeedsReAlloc(UnityEngine.Rendering.RTHandle handle, in UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc descriptor, System.Boolean scaled)

Disassembly:
	0x03A72EF4 STR W8, [X31 + 0x180]
	0x03A72EF8 LDR X8, [X19]
	0x03A72EFC CBZ X8, 0x3A730BC
	0x03A72F00 LDR X0, [X8 + 0x18]
	0x03A72F04 CBZ X0, 0x3A730BC
	0x03A72F08 MOV X1, X31
	0x03A72F0C BL 0x3C1ABA0
	0x03A72F10 LDR X8, [X19]
	0x03A72F14 CBZ X8, 0x3A730BC
	0x03A72F18 MOV W27, W0
	0x03A72F1C LDR X0, [X8 + 0x18]
	0x03A72F20 CBZ X0, 0x3A730BC
	0x03A72F24 MOV X1, X31
	0x03A72F28 STR X26, [X31 + 0x8]
	0x03A72F2C BL 0x3C1AC20
	0x03A72F30 LDR X8, [X19]
	0x03A72F34 CBZ X8, 0x3A730BC
	0x03A72F38 LDR X0, [X8 + 0x18]
	0x03A72F3C CBZ X0, 0x3A730BC
	0x03A72F40 MOV X1, X31
	0x03A72F44 MOV V9.16B, V0.16B
	0x03A72F48 MOV X26, X28
	0x03A72F4C BL 0x3C1AB20
	0x03A72F50 LDR X8, [X19]
	0x03A72F54 CBZ X8, 0x3A730BC
	0x03A72F58 MOV W28, W0
	0x03A72F5C LDR X0, [X8 + 0x18]
	0x03A72F60 CBZ X0, 0x3A730BC
	0x03A72F64 MOV X1, X31
	0x03A72F68 BL 0x3C1A9D4
	0x03A72F6C LDR X8, [X29]
	0x03A72F70 MOV W29, W0
	0x03A72F74 LDR W9, [X8 + 0xE0]
	0x03A72F78 CBNZ W9, 0x3A72F84
	0x03A72F7C MOV X0, X8
	0x03A72F80 BL 0x1C16DFC
	0x03A72F84 LDP V0, V1, [X20 + 0xC0]
	0x03A72F88 LDR W8, [X31 + 0x180]
	0x03A72F8C LDR V2, [X20 + 0xE]
	0x03A72F90 LDR X5, [X25]
	0x03A72F94 STR V0, [X31 + 0x9]
	0x03A72F98 STR W8, [X31 + 0xC0]
	0x03A72F9C ADD X8, X31, 0xD0
	0x03A72FA0 ADD X0, X31, 0x90
	0x03A72FA4 MOVZ W1, 0x2
	0x03A72FA8 MOV W2, W27
	0x03A72FAC MOV V0.16B, V9.16B
	0x03A72FB0 MOV W3, W28
	0x03A72FB4 MOV W4, W29
	0x03A72FB8 STP V1, V2, [X20 + 0x10]
	0x03A72FBC BL 0x3A724F4
	0x03A72FC0 ADRP X8, 0x6E2000
	0x03A72FC4 LDR X8, [X8 + 0x10]
	0x03A72FC8 LDR X27, [X19]
	0x03A72FCC LDR X0, [X8]
	0x03A72FD0 LDR W8, [X0 + 0xE0]
	0x03A72FD4 CBNZ W8, 0x3A72FDC
	0x03A72FD8 BL 0x1C16DFC
	0x03A72FDC ADD X0, X31, 0x18
	0x03A72FE0 ADD X1, X31, 0xD0
	0x03A72FE4 MOVZ W2, 0x78
	0x03A72FE8 BL 0x3EB1AC0
	0x03A72FEC ADD X0, X31, 0x18
	0x03A72FF0 MOV X1, X27
	0x03A72FF4 BL 0x3A72644
	0x03A72FF8 MOV X28, X26
	0x03A72FFC LDR X26, [X31 + 0x8]
	0x03A73000 ADRP X20, 0x6A9000
	0x03A73004 LDR X20, [X20 + 0x8A8]
	0x03A73008 LDR X0, [X20]
	0x03A7300C LDR W8, [X0 + 0xE0]
	0x03A73010 CBNZ W8, 0x3A7301C
	0x03A73014 BL 0x1C16DFC
	0x03A73018 LDR X0, [X20]
	0x03A7301C LDR X8, [X0 + 0xB8]
	0x03A73020 LDR X0, [X8 + 0x10]
	0x03A73024 CBZ X0, 0x3A730BC
	0x03A73028 ADD X1, X31, 0x1D0
	0x03A7302C MOVZ W3, 0x1
	0x03A73030 MOV X2, X19
	0x03A73034 MOVZ W27, 0x1
	0x03A73038 BL 0x3A72710
	0x03A7303C TBNZ X0, 0x0, 0x3A73094
	0x03A73040 ADRP X8, 0x6DD000
	0x03A73044 LDR X8, [X8 + 0x9B0]
	0x03A73048 LDR X0, [X8]
	0x03A7304C LDR W8, [X0 + 0xE0]
	0x03A73050 CBNZ W8, 0x3A73058
	0x03A73054 BL 0x1C16DFC
	0x03A73058 LDR W8, [X31 + 0x14]
	0x03A7305C MOV X0, X26
	0x03A73060 MOV X1, X24
	0x03A73064 MOV W2, W23
	0x03A73068 AND W4, W8, 0x1
	0x03A7306C MOV W3, W22
	0x03A73070 MOV W5, W21
	0x03A73074 MOV V0.16B, V8.16B
	0x03A73078 MOV X6, X28
	0x03A7307C MOV X7, X31
	0x03A73080 BL 0x39D6590
	0x03A73084 MOVZ W27, 0x1
	0x03A73088 STR X0, [X19]
	0x03A7308C B 0x3A73094
	0x03A73090 MOV W27, W31
	0x03A73094 MOV W0, W27
	0x03A73098 ADD X31, X31, 0x250
	0x03A7309C LDP X20, X19, [X31 + 0x60]
	0x03A730A0 LDP X22, X21, [X31 + 0x50]
	0x03A730A4 LDP X24, X23, [X31 + 0x40]
	0x03A730A8 LDP X26, X25, [X31 + 0x30]
	0x03A730AC LDP X28, X27, [X31 + 0x20]
	0x03A730B0 LDP X29, X30, [X31 + 0x10]
	0x03A730B4 LDP D9, D8, [X31], #0x70
	0x03A730B8 RET
	0x03A730BC BL 0x1C16F20
	0x03A730C0 STP X30, X21, [X31 - 0x20]!
	0x03A730C4 STP X20, X19, [X31 + 0x10]
	0x03A730C8 ADRP X21, 0x96F000
	0x03A730CC ADRP X20, 0x6A9000
	0x03A730D0 LDRB W8, [X21 + 0x2B3]
	0x03A730D4 LDR X20, [X20 + 0x8A8]
	0x03A730D8 MOV W19, W0
	0x03A730DC TBNZ X8, 0x0, 0x3A730F4
	0x03A730E0 ADRP X0, 0x6A9000
	0x03A730E4 LDR X0, [X0 + 0x8A8]
	0x03A730E8 BL 0x1C16CF4
	0x03A730EC MOVZ W8, 0x1
	0x03A730F0 STRB W8, [X21 + 0x2B3]
	0x03A730F4 LDR X0, [X20]
	0x03A730F8 LDR W8, [X0 + 0xE0]
	0x03A730FC CBNZ W8, 0x3A73108
	0x03A73100 BL 0x1C16DFC
	0x03A73104 LDR X0, [X20]
	0x03A73108 LDR X8, [X0 + 0xB8]
	0x03A7310C LDR X21, [X8 + 0x10]
	0x03A73110 CBZ X21, 0x3A73140
	0x03A73114 LDR W9, [X0 + 0xE0]
	0x03A73118 MOV X8, X21
	0x03A7311C CBNZ W9, 0x3A73134
	0x03A73120 BL 0x1C16DFC
	0x03A73124 LDR X8, [X20]
	0x03A73128 LDR X8, [X8 + 0xB8]
	0x03A7312C LDR X8, [X8 + 0x10]
	0x03A73130 CBZ X8, 0x3A73154
	0x03A73134 MOV X0, X8
	0x03A73138 MOV W1, W19
	0x03A7313C BL 0x3A73158
	0x03A73140 LDP X20, X19, [X31 + 0x10]
	0x03A73144 CMP X21, 0x0
	0x03A73148 CSET W0, NE
	0x03A7314C LDP X30, X21, [X31], #0x20
	0x03A73150 RET
	0x03A73154 BL 0x1C16F20
	0x03A73158 STR X30, [X31 - 0x30]!
	0x03A7315C STP X22, X21, [X31 + 0x10]
	0x03A73160 STP X20, X19, [X31 + 0x20]
	0x03A73164 ADRP X22, 0x96F000
	0x03A73168 ADRP X21, 0x6E3000
	0x03A7316C LDRB W8, [X22 + 0x2C6]
	0x03A73170 LDR X21, [X21 + 0xB98]
	0x03A73174 MOV W20, W1
	0x03A73178 MOV X19, X0
	0x03A7317C TBNZ X8, 0x0, 0x3A73194
	0x03A73180 ADRP X0, 0x6E3000
	0x03A73184 LDR X0, [X0 + 0xB98]
	0x03A73188 BL 0x1C16CF4
	0x03A7318C MOVZ W8, 0x1
	0x03A73190 STRB W8, [X22 + 0x2C6]
	0x03A73194 LDR X0, [X21]
	0x03A73198 LDR W8, [X0 + 0xE0]
	0x03A7319C CBNZ W8, 0x3A731A8
	0x03A731A0 BL 0x1C16DFC
	0x03A731A4 LDR X0, [X21]
	0x03A731A8 LDR X8, [X0 + 0xB8]
	0x03A731AC LDR W9, [X8 + 0x8]
	0x03A731B0 CMP W9, W20
	0x03A731B4 B.NE 0x3A731C8
	0x03A731B8 LDP X20, X19, [X31 + 0x20]
	0x03A731BC LDP X22, X21, [X31 + 0x10]
	0x03A731C0 LDR X30, [X31], #0x30
	0x03A731C4 RET
	0x03A731C8 LDR W9, [X0 + 0xE0]
	0x03A731CC CBNZ W9, 0x3A731DC
	0x03A731D0 BL 0x1C16DFC
	0x03A731D4 LDR X8, [X21]
	0x03A731D8 LDR X8, [X8 + 0xB8]
	0x03A731DC STR W20, [X8 + 0x8]
	0x03A731E0 MOV X0, X19
	0x03A731E4 LDP X20, X19, [X31 + 0x20]
	0x03A731E8 LDP X22, X21, [X31 + 0x10]
	0x03A731EC LDR X30, [X31], #0x30
	0x03A731F0 B 0x3A74608
	0x03A731F4 SUB X31, X31, 0x70
	0x03A731F8 STP X30, X27, [X31 + 0x20]
	0x03A731FC STP X26, X25, [X31 + 0x30]
	0x03A73200 STP X24, X23, [X31 + 0x40]
	0x03A73204 STP X22, X21, [X31 + 0x50]
	0x03A73208 STP X20, X19, [X31 + 0x60]
	0x03A7320C ADRP X23, 0x96F000
	0x03A73210 ADRP X25, 0x6E3000
	0x03A73214 LDRB W8, [X23 + 0x2C7]
	0x03A73218 LDR X25, [X25 + 0xB98]
	0x03A7321C MOV W19, W3
	0x03A73220 MOV X20, X2
	0x03A73224 MOV X22, X1
	0x03A73228 MOV X21, X0
	0x03A7322C TBNZ X8, 0x0, 0x3A7328C
	0x03A73230 ADRP X0, 0x6E3000
	0x03A73234 LDR X0, [X0 + 0xD38]
	0x03A73238 BL 0x1C16CF4
	0x03A7323C ADRP X0, 0x6E3000
	0x03A73240 LDR X0, [X0 + 0xD28]
	0x03A73244 BL 0x1C16CF4
	0x03A73248 ADRP X0, 0x6E3000
	0x03A7324C LDR X0, [X0 + 0xB98]
	0x03A73250 BL 0x1C16CF4
	0x03A73254 ADRP X0, 0x6E3000
	0x03A73258 LDR X0, [X0 + 0xD40]
	0x03A7325C BL 0x1C16CF4
	0x03A73260 ADRP X0, 0x6E3000
	0x03A73264 LDR X0, [X0 + 0xD48]
	0x03A73268 BL 0x1C16CF4
	0x03A7326C ADRP X0, 0x6E3000
	0x03A73270 LDR X0, [X0 + 0xD50]
	0x03A73274 BL 0x1C16CF4
	0x03A73278 ADRP X0, 0x6E3000
	0x03A7327C LDR X0, [X0 + 0xD58]
	0x03A73280 BL 0x1C16CF4
	0x03A73284 MOVZ W8, 0x1
	0x03A73288 STRB W8, [X23 + 0x2C7]
	0x03A7328C LDR X0, [X25]
	0x03A73290 STR X31, [X31 + 0x18]
	0x03A73294 LDR W8, [X0 + 0xE0]
	0x03A73298 CBNZ W8, 0x3A732A4
	0x03A7329C BL 0x1C16DFC
	0x03A732A0 LDR X0, [X25]
	0x03A732A4 LDR X8, [X0 + 0xB8]
	0x03A732A8 LDR W26, [X8]
	0x03A732AC LDR W27, [X8 + 0x8]
	0x03A732B0 CMP W26, W27
	0x03A732B4 B.GE 0x3A733D0
	0x03A732B8 MOV X1, X22
	0x03A732BC BL 0x3A74A40
	0x03A732C0 LDR X8, [X21 + 0x10]
	0x03A732C4 CBZ X8, 0x3A733F4
	0x03A732C8 ADRP X9, 0x6E3000
	0x03A732CC LDR X9, [X9 + 0xD28]
	0x03A732D0 MOV W22, W0
	0x03A732D4 ADD X2, X31, 0x18
	0x03A732D8 MOV X0, X8
	0x03A732DC LDR X3, [X9]
	0x03A732E0 MOV W1, W22
	0x03A732E4 BL 0x2A150AC
	0x03A732E8 TBNZ X0, 0x0, 0x3A73354
	0x03A732EC LDR X0, [X25]
	0x03A732F0 LDR W8, [X0 + 0xE0]
	0x03A732F4 CBNZ W8, 0x3A73300
	0x03A732F8 BL 0x1C16DFC
	0x03A732FC LDR X0, [X25]
	0x03A73300 ADRP X9, 0x6E3000
	0x03A73304 LDR X8, [X0 + 0xB8]
	0x03A73308 LDR X9, [X9 + 0xD50]
	0x03A7330C LDR W24, [X8 + 0x8]
	0x03A73310 LDR X0, [X9]
	0x03A73314 BL 0x1C16F10
	0x03A73318 ADRP X8, 0x6E3000
	0x03A7331C LDR X8, [X8 + 0xD48]
	0x03A73320 MOV W1, W24
	0x03A73324 MOV X23, X0
	0x03A73328 LDR X2, [X8]
	0x03A7332C BL 0x25ECCDC
	0x03A73330 STR X23, [X31 + 0x18]
	0x03A73334 LDR X0, [X21 + 0x10]
	0x03A73338 CBZ X0, 0x3A733F4
	0x03A7333C ADRP X8, 0x6E3000
	0x03A73340 LDR X8, [X8 + 0xD38]
	0x03A73344 MOV W1, W22
	0x03A73348 MOV X2, X23
	0x03A7334C LDR X3, [X8]
	0x03A73350 BL 0x2A1368C
	0x03A73354 CBZ X20, 0x3A733F4
	0x03A73358 LDR X21, [X31 + 0x18]
	0x03A7335C MOV X0, X20
	0x03A73360 MOV X1, X31
	0x03A73364 BL 0x39D4A60
	0x03A73368 ADRP X8, 0x6E3000
	0x03A7336C LDR X8, [X8 + 0xD58]
	0x03A73370 MOV W22, W0
	0x03A73374 ADD X0, X31, 0x8
	0x03A73378 MOV X1, X20
	0x03A7337C LDR X3, [X8]
	0x03A73380 MOV W2, W19

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+128], X30
	003 Move [X31+144], X22
	004 Move [X31+152], X21
	005 Move [X31+160], X20
	006 Move [X31+168], X19
	007 Move X22, 0x971000
	008 Move W8, [X22+686]
	009 Move W21, W2
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x682000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+686], W8
	021 NotImplemented "Instruction MOVI not yet implemented."
	022 Move [X31+112], W31
	023 Move [X31+80], V0
	024 Move [X31+88], V0
	025 Move [X31+4], V0
	026 Compare X20, 0
	027 JumpIfEqual {313}
	028 Move X8, 0x682000
	029 Move X8, [X8+1432]
	030 Move X22, [X20+24]
	031 Move X0, [X8]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X22
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Equality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {313}
	044 Move W8, [X20+168]
	045 And W9, W21, 1
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction CSET not yet implemented."
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move TEMP, X21
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {295}
	053 Move X0, [X20+24]
	054 Compare X0, 0
	055 JumpIfEqual {322}
	056 Add X8, X31, 8
	057 Move X1, X31
	058 Call RenderTexture.get_descriptor, X0
	059 NotImplemented "Instruction LDUR not yet implemented."
	060 NotImplemented "Instruction LDUR not yet implemented."
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 Move W8, [X31+56]
	063 Add X0, X31, 64
	064 Move X1, X31
	065 Move [X31+64], V0
	066 Move [X31+72], V1
	067 Move [X31+6], V2
	068 Move [X31+112], W8
	069 Call RenderTextureDescriptor.get_depthBufferBits, X0
	070 Move W8, [X19+32]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X0, [X20+24]
	073 Compare X0, 0
	074 JumpIfEqual {322}
	075 Add X8, X31, 8
	076 Move X1, X31
	077 Call RenderTexture.get_descriptor, X0
	078 NotImplemented "Instruction LDUR not yet implemented."
	079 NotImplemented "Instruction LDUR not yet implemented."
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 Move W8, [X31+56]
	082 Add X0, X31, 64
	083 Move X1, X31
	084 Move [X31+64], V0
	085 Move [X31+72], V1
	086 Move [X31+6], V2
	087 Move [X31+112], W8
	088 Call RenderTextureDescriptor.get_depthBufferBits, X0
	089 Compare W0, 0
	090 JumpIfNotEqual {113}
	091 Move W8, [X19+55]
	092 Compare W8, 0
	093 JumpIfNotEqual {113}
	094 Move X0, [X20+24]
	095 Compare X0, 0
	096 JumpIfEqual {322}
	097 Add X8, X31, 8
	098 Move X1, X31
	099 Call RenderTexture.get_descriptor, X0
	100 NotImplemented "Instruction LDUR not yet implemented."
	101 NotImplemented "Instruction LDUR not yet implemented."
	102 NotImplemented "Instruction LDUR not yet implemented."
	103 Move W8, [X31+56]
	104 Add X0, X31, 64
	105 Move X1, X31
	106 Move [X31+64], V0
	107 Move [X31+72], V1
	108 Move [X31+6], V2
	109 Move [X31+112], W8
	110 Call RenderTextureDescriptor.get_graphicsFormat, X0
	111 Move W8, [X19+36]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X0, [X20+24]
	114 Compare X0, 0
	115 JumpIfEqual {322}
	116 Add X8, X31, 8
	117 Move X1, X31
	118 Call RenderTexture.get_descriptor, X0
	119 NotImplemented "Instruction LDUR not yet implemented."
	120 NotImplemented "Instruction LDUR not yet implemented."
	121 NotImplemented "Instruction LDUR not yet implemented."
	122 Move W8, [X31+56]
	123 Move [X31+4], V1
	124 Move [X31+80], V2
	125 Move [X31+88], V0
	126 Move [X31+112], W8
	127 Move W8, [X31+96]
	128 Move W9, [X19+48]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move X0, [X20+24]
	131 Compare X0, 0
	132 JumpIfEqual {322}
	133 Add X8, X31, 8
	134 Move X1, X31
	135 Call RenderTexture.get_descriptor, X0
	136 NotImplemented "Instruction LDUR not yet implemented."
	137 NotImplemented "Instruction LDUR not yet implemented."
	138 NotImplemented "Instruction LDUR not yet implemented."
	139 Move W8, [X31+56]
	140 Add X0, X31, 64
	141 Move X1, X31
	142 Move [X31+64], V0
	143 Move [X31+72], V1
	144 Move [X31+6], V2
	145 Move [X31+112], W8
	146 Call RenderTextureDescriptor.get_enableRandomWrite, X0
	147 Move W8, [X19+52]
	148 And W9, W0, 1
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move X0, [X20+24]
	151 Compare X0, 0
	152 JumpIfEqual {322}
	153 Add X8, X31, 8
	154 Move X1, X31
	155 Call RenderTexture.get_descriptor, X0
	156 NotImplemented "Instruction LDUR not yet implemented."
	157 NotImplemented "Instruction LDUR not yet implemented."
	158 NotImplemented "Instruction LDUR not yet implemented."
	159 Move W8, [X31+56]
	160 Add X0, X31, 64
	161 Move X1, X31
	162 Move [X31+64], V0
	163 Move [X31+72], V1
	164 Move [X31+6], V2
	165 Move [X31+112], W8
	166 Call RenderTextureDescriptor.get_useMipMap, X0
	167 Move W8, [X19+53]
	168 And W9, W0, 1
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Move X0, [X20+24]
	171 Compare X0, 0
	172 JumpIfEqual {322}
	173 Add X8, X31, 8
	174 Move X1, X31
	175 Call RenderTexture.get_descriptor, X0
	176 NotImplemented "Instruction LDUR not yet implemented."
	177 NotImplemented "Instruction LDUR not yet implemented."
	178 NotImplemented "Instruction LDUR not yet implemented."
	179 Move W8, [X31+56]
	180 Add X0, X31, 64
	181 Move X1, X31
	182 Move [X31+64], V0
	183 Move [X31+72], V1
	184 Move [X31+6], V2
	185 Move [X31+112], W8
	186 Call RenderTextureDescriptor.get_autoGenerateMips, X0
	187 Move W8, [X19+54]
	188 And W9, W0, 1
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move X0, [X20+24]
	191 Compare X0, 0
	192 JumpIfEqual {322}
	193 Add X8, X31, 8
	194 Move X1, X31
	195 Call RenderTexture.get_descriptor, X0
	196 NotImplemented "Instruction LDUR not yet implemented."
	197 NotImplemented "Instruction LDUR not yet implemented."
	198 NotImplemented "Instruction LDUR not yet implemented."
	199 Move W8, [X31+56]
	200 Move [X31+64], V0
	201 Move [X31+72], V1
	202 Move [X31+6], V2
	203 Move [X31+112], W8
	204 Move W8, [X31+72]
	205 Move W9, [X19+64]
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move X0, [X20+24]
	208 Compare X0, 0
	209 JumpIfEqual {322}
	210 Add X8, X31, 8
	211 Move X1, X31
	212 Call RenderTexture.get_descriptor, X0
	213 NotImplemented "Instruction LDUR not yet implemented."
	214 NotImplemented "Instruction LDUR not yet implemented."
	215 NotImplemented "Instruction LDUR not yet implemented."
	216 Move W8, [X31+56]
	217 Add X0, X31, 64
	218 Move X1, X31
	219 Move [X31+64], V0
	220 Move [X31+72], V1
	221 Move [X31+6], V2
	222 Move [X31+112], W8
	223 Call RenderTextureDescriptor.get_bindMS, X0
	224 Move W8, [X19+68]
	225 And W9, W0, 1
	226 NotImplemented "Instruction CMP not yet implemented."
	227 Move X0, [X20+24]
	228 Compare X0, 0
	229 JumpIfEqual {322}
	230 Add X8, X31, 8
	231 Move X1, X31
	232 Call RenderTexture.get_descriptor, X0
	233 NotImplemented "Instruction LDUR not yet implemented."
	234 NotImplemented "Instruction LDUR not yet implemented."
	235 NotImplemented "Instruction LDUR not yet implemented."
	236 Move W8, [X31+56]
	237 Add X0, X31, 64
	238 Move X1, X31
	239 Move [X31+64], V0
	240 Move [X31+72], V1
	241 Move [X31+6], V2
	242 Move [X31+112], W8
	243 Call RenderTextureDescriptor.get_useDynamicScale, X0
	244 Move W8, [X19+69]
	245 And W9, W0, 1
	246 NotImplemented "Instruction CMP not yet implemented."
	247 Move X0, [X20+24]
	248 Compare X0, 0
	249 JumpIfEqual {322}
	250 Add X8, X31, 8
	251 Move X1, X31
	252 Call RenderTexture.get_descriptor, X0
	253 Move W8, [X31+56]
	254 NotImplemented "Instruction LDUR not yet implemented."
	255 NotImplemented "Instruction LDUR not yet implemented."
	256 NotImplemented "Instruction LDUR not yet implemented."
	257 Move [X31+112], W8
	258 Move [X31+64], V0
	259 Move [X31+72], V1
	260 Move [X31+6], V2
	261 Move W9, [X19+72]
	262 NotImplemented "Instruction CMP not yet implemented."
	263 Move X0, [X20+24]
	264 Compare X0, 0
	265 JumpIfEqual {322}
	266 Move X1, X31
	267 Call Texture.get_filterMode, X0
	268 Move W8, [X19+40]
	269 NotImplemented "Instruction CMP not yet implemented."
	270 Move X0, [X20+24]
	271 Compare X0, 0
	272 JumpIfEqual {322}
	273 Move X1, X31
	274 Call Texture.get_wrapMode, X0
	275 Move W8, [X19+44]
	276 NotImplemented "Instruction CMP not yet implemented."
	277 Move X0, [X20+24]
	278 Compare X0, 0
	279 JumpIfEqual {322}
	280 Move X1, X31
	281 Call Texture.get_anisoLevel, X0
	282 Move W8, [X19+56]
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Move X0, [X20+24]
	285 Compare X0, 0
	286 JumpIfEqual {322}
	287 Move X1, X31
	288 Call Texture.get_mipMapBias, X0
	289 Move V1, [X19+60]
	290 NotImplemented "Instruction FCMP not yet implemented."
	291 Move X0, [X20+88]
	292 Move X1, [X19+80]
	293 Move X2, X31
	294 Call String.op_Inequality, X0, X1
	295 Move X0, [X20+24]
	296 Compare X0, 0
	297 JumpIfEqual {322}
	298 Move X8, [X0]
	299 Move X9, [X8+392]
	300 Move X1, [X8+400]
	301 NotImplemented "Instruction BLR not yet implemented."
	302 Move W8, [X19+4]
	303 NotImplemented "Instruction CMP not yet implemented."
	304 Move X0, [X20+24]
	305 Compare X0, 0
	306 JumpIfEqual {322}
	307 Move X8, [X0]
	308 Move X9, [X8+424]
	309 Move X1, [X8+432]
	310 NotImplemented "Instruction BLR not yet implemented."
	311 Move W8, [X19+8]
	312 NotImplemented "Instruction CMP not yet implemented."
	313 Move W0, 1
	314 Move X20, [X31+160]
	315 Move X19, [X31+168]
	316 Move X22, [X31+144]
	317 Move X21, [X31+152]
	318 Move X30, [X31+128]
	319 And W0, W0, 1
	320 Add X31, X31, 176
	321 Return X0
	322 Call 0x1C17F20

Method: UnityEngine.Rendering.RenderTargetIdentifier GetCameraTargetIdentifier(ref UnityEngine.Rendering.Universal.RenderingData renderingData)

Disassembly:
	0x03A73384 STP X31, X31, [X31 + 0x8]
	0x03A73388 BL 0x27AA184
	0x03A7338C CBZ X21, 0x3A733F4
	0x03A73390 ADRP X8, 0x6E3000
	0x03A73394 LDP X2, X3, [X31 + 0x8]
	0x03A73398 LDR X8, [X8 + 0xD40]
	0x03A7339C MOV X0, X21
	0x03A733A0 MOV W1, W22
	0x03A733A4 LDR X4, [X8]
	0x03A733A8 BL 0x25ECDDC
	0x03A733AC LDR X0, [X25]
	0x03A733B0 LDR W8, [X0 + 0xE0]
	0x03A733B4 CBNZ W8, 0x3A733C0
	0x03A733B8 BL 0x1C16DFC
	0x03A733BC LDR X0, [X25]
	0x03A733C0 LDR X8, [X0 + 0xB8]
	0x03A733C4 LDR W9, [X8]
	0x03A733C8 ADD W9, W9, 0x1
	0x03A733CC STR W9, [X8]
	0x03A733D0 CMP W26, W27
	0x03A733D4 LDP X20, X19, [X31 + 0x60]
	0x03A733D8 LDP X22, X21, [X31 + 0x50]
	0x03A733DC LDP X24, X23, [X31 + 0x40]
	0x03A733E0 LDP X26, X25, [X31 + 0x30]
	0x03A733E4 LDP X30, X27, [X31 + 0x20]
	0x03A733E8 CSET W0, LT
	0x03A733EC ADD X31, X31, 0x70
	0x03A733F0 RET
	0x03A733F4 BL 0x1C16F20
	0x03A733F8 STR X29, [X31 - 0x50]!
	0x03A733FC STP X30, X25, [X31 + 0x10]
	0x03A73400 STP X24, X23, [X31 + 0x20]
	0x03A73404 STP X22, X21, [X31 + 0x30]
	0x03A73408 STP X20, X19, [X31 + 0x40]
	0x03A7340C SUB X31, X31, 0x1F0
	0x03A73410 MRS X24, 0xC000
	0x03A73414 MOV X19, X8
	0x03A73418 LDR X8, [X24 + 0x28]
	0x03A7341C ADRP X21, 0x96F000
	0x03A73420 ADRP X25, 0x6E1000
	0x03A73424 MOV W23, W2
	0x03A73428 STR X8, [X31 + 0x1E8]
	0x03A7342C LDRB W8, [X21 + 0x2B5]
	0x03A73430 LDR X25, [X25 + 0xB8]
	0x03A73434 MOV X20, X1
	0x03A73438 MOV X22, X0
	0x03A7343C TBNZ X8, 0x0, 0x3A73454
	0x03A73440 ADRP X0, 0x6E1000
	0x03A73444 LDR X0, [X0 + 0xB8]
	0x03A73448 BL 0x1C16CF4
	0x03A7344C MOVZ W8, 0x1
	0x03A73450 STRB W8, [X21 + 0x2B5]
	0x03A73454 MOVI V0.2D, 0x0
	0x03A73458 ADD X0, X31, 0x120
	0x03A7345C MOVZ W2, 0xC4
	0x03A73460 MOV W1, W31
	0x03A73464 STP V0, V0, [X31 + 0x100]
	0x03A73468 STP V0, V0, [X31 + 0xE0]
	0x03A7346C STP V0, V0, [X31 + 0xC0]
	0x03A73470 BL 0x3EB1B10
	0x03A73474 LDR X21, [X20 + 0xD8]
	0x03A73478 ADD X0, X31, 0xC0
	0x03A7347C MOV X2, X31
	0x03A73480 MOV X1, X21
	0x03A73484 BL 0x3C5AF18
	0x03A73488 ADD X0, X31, 0xC0
	0x03A7348C MOV W1, W23
	0x03A73490 MOV X2, X31
	0x03A73494 BL 0x3C5AFB0
	0x03A73498 ADD X0, X31, 0x60
	0x03A7349C ADD X1, X31, 0xC0
	0x03A734A0 MOVZ W2, 0x60
	0x03A734A4 BL 0x3EB1AC0
	0x03A734A8 LDR X0, [X25]
	0x03A734AC LDR W8, [X0 + 0xE0]
	0x03A734B0 CBNZ W8, 0x3A734B8
	0x03A734B4 BL 0x1C16DFC
	0x03A734B8 ADD X0, X31, 0x0
	0x03A734BC ADD X1, X31, 0x60
	0x03A734C0 MOVZ W2, 0x60
	0x03A734C4 BL 0x3EB1AC0
	0x03A734C8 AND X1, X22, 0x0
	0x03A734CC ADD X0, X31, 0x120
	0x03A734D0 ADD X2, X31, 0x0
	0x03A734D4 MOV X3, X31
	0x03A734D8 BL 0x3C535C0
	0x03A734DC LDR W1, [X20 + 0x2B0]
	0x03A734E0 ADD X0, X31, 0x120
	0x03A734E4 MOV X2, X31
	0x03A734E8 BL 0x3C536B4
	0x03A734EC LDR W1, [X20 + 0x228]
	0x03A734F0 ADD X0, X31, 0x120

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+192], X30
	003 Move [X31+208], X22
	004 Move [X31+216], X21
	005 Move [X31+224], X20
	006 Move [X31+232], X19
	007 Move X22, 0x970000
	008 Move X21, 0x681000
	009 Move X19, X8
	010 Move W8, [X22+687]
	011 Move X21, [X21+1432]
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x681000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+687], W8
	022 Move X0, [X21]
	023 NotImplemented "Instruction MOVI not yet implemented."
	024 Move [X31+176], X31
	025 Move [X31+144], V0
	026 Move [X31+152], V0
	027 Move W8, [X0+224]
	028 Move X21, [X20+232]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X21
	033 Move X1, X31
	034 Move X2, X31
	035 Call Object.op_Inequality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {48}
	040 Move X1, [X20+232]
	041 NotImplemented "Instruction MOVI not yet implemented."
	042 Add X0, X31, 48
	043 Move X2, X31
	044 Move [X31+80], X31
	045 Move [X31+48], V0
	046 Move [X31+56], V0
	047 Call RenderTargetIdentifier..ctor, X0, X1
	048 Add X8, X31, 48
	049 Move W0, 2
	050 Move X1, X31
	051 Call RenderTargetIdentifier.op_Implicit, X0
	052 Move V0, [X31+48]
	053 Move V1, [X31+64]
	054 Move X8, [X31+80]
	055 Move [X31+96], V0
	056 Move [X31+104], V1
	057 Move V0, [X31+96]
	058 Move V1, [X31+112]
	059 Move [X31+128], X8
	060 Move [X31+176], X8
	061 Move [X31+144], V0
	062 Move [X31+152], V1
	063 Move X0, [X20+400]
	064 Compare X0, 0
	065 JumpIfEqual {125}
	066 Move X1, X31
	067 Call XRPass.get_enabled, X0
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {112}
	072 Move X0, [X20+400]
	073 Compare X0, 0
	074 JumpIfEqual {125}
	075 Move X1, X31
	076 Call XRPass.get_singlePassEnabled, X0
	077 Move X8, [X20+400]
	078 Compare X8, 0
	079 JumpIfEqual {125}
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {90}
	084 Move X9, [X8+80]
	085 Move V1, [X8+48]
	086 Move V0, [X8+64]
	087 Move [X31+176], X9
	088 Move [X31+144], V1
	089 Move [X31+152], V0
	090 Move X0, X8
	091 Move W1, W31
	092 Move X2, X31
	093 Call XRPass.GetTextureArraySlice, X0, X1
	094 Move X8, [X20+400]
	095 Compare X8, 0
	096 JumpIfEqual {125}
	097 Move X9, [X8+80]
	098 Move V1, [X8+48]
	099 Move V0, [X8+64]
	100 Move W4, W0
	101 Add X0, X31, 144
	102 Add X1, X31, 0
	103 Move TEMP, 0
	104 Not TEMP
	105 Move W3, TEMP
	106 Move W2, W31
	107 Move X5, X31
	108 Move [X31+32], X9
	109 Move [X31], V1
	110 Move [X31+8], V0
	111 Call RenderTargetIdentifier..ctor, X0, X1, X2, X3, X4
	112 Move X8, [X31+176]
	113 Move V1, [X31+144]
	114 Move V0, [X31+160]
	115 Move X22, [X31+208]
	116 Move X21, [X31+216]
	117 Move X30, [X31+192]
	118 Move [X19+32], X8
	119 Move [X19], V1
	120 Move [X19+8], V0
	121 Move X20, [X31+224]
	122 Move X19, [X31+232]
	123 Add X31, X31, 240
	124 Return X0
	125 Call 0x1C17F20

Method: System.Boolean ReAllocateIfNeeded(ref UnityEngine.Rendering.RTHandle handle, in UnityEngine.RenderTextureDescriptor descriptor, UnityEngine.FilterMode filterMode = 0, UnityEngine.TextureWrapMode wrapMode = 0, System.Boolean isShadowMap = False, System.Int32 anisoLevel = 1, System.Single mipMapBias = 0, System.String name = )

Disassembly:
	0x03A6E184 LDR X0, [X0 + 0xC28]
	0x03A6E188 BL 0x1C16CF4
	0x03A6E18C ADRP X0, 0x6E8000
	0x03A6E190 LDR X0, [X0 + 0xBD8]
	0x03A6E194 BL 0x1C16CF4
	0x03A6E198 ADRP X0, 0x6E8000
	0x03A6E19C LDR X0, [X0 + 0xC30]
	0x03A6E1A0 BL 0x1C16CF4
	0x03A6E1A4 ADRP X0, 0x6E8000
	0x03A6E1A8 LDR X0, [X0 + 0xBE0]
	0x03A6E1AC BL 0x1C16CF4
	0x03A6E1B0 ADRP X0, 0x6E8000
	0x03A6E1B4 LDR X0, [X0 + 0xC38]
	0x03A6E1B8 BL 0x1C16CF4
	0x03A6E1BC ADRP X0, 0x6E8000
	0x03A6E1C0 LDR X0, [X0 + 0xBC8]
	0x03A6E1C4 BL 0x1C16CF4
	0x03A6E1C8 ADRP X0, 0x6E8000
	0x03A6E1CC LDR X0, [X0 + 0xBE8]
	0x03A6E1D0 BL 0x1C16CF4
	0x03A6E1D4 ADRP X0, 0x6E8000
	0x03A6E1D8 LDR X0, [X0 + 0xC40]
	0x03A6E1DC BL 0x1C16CF4
	0x03A6E1E0 ADRP X0, 0x6E8000
	0x03A6E1E4 LDR X0, [X0 + 0xBF8]
	0x03A6E1E8 BL 0x1C16CF4
	0x03A6E1EC ADRP X0, 0x6E8000
	0x03A6E1F0 LDR X0, [X0 + 0xBF0]
	0x03A6E1F4 BL 0x1C16CF4
	0x03A6E1F8 ADRP X0, 0x6E8000
	0x03A6E1FC LDR X0, [X0 + 0xC48]
	0x03A6E200 BL 0x1C16CF4
	0x03A6E204 ADRP X0, 0x6E8000
	0x03A6E208 LDR X0, [X0 + 0xBD0]
	0x03A6E20C BL 0x1C16CF4
	0x03A6E210 MOVZ W8, 0x1
	0x03A6E214 STRB W8, [X29 + 0x28C]
	0x03A6E218 LDR X0, [X23]
	0x03A6E21C MOV X1, X31
	0x03A6E220 BL 0x3C124EC
	0x03A6E224 LDR X8, [X20]
	0x03A6E228 MOV X1, X31
	0x03A6E22C LDR X8, [X8 + 0xB8]
	0x03A6E230 STR W0, [X8]
	0x03A6E234 LDR X0, [X28]
	0x03A6E238 BL 0x3C124EC
	0x03A6E23C LDR X8, [X20]
	0x03A6E240 MOV X1, X31
	0x03A6E244 LDR X8, [X8 + 0xB8]
	0x03A6E248 STR W0, [X8 + 0x4]
	0x03A6E24C LDR X0, [X27]
	0x03A6E250 BL 0x3C124EC
	0x03A6E254 LDR X8, [X20]
	0x03A6E258 MOV X1, X31
	0x03A6E25C LDR X8, [X8 + 0xB8]
	0x03A6E260 STR W0, [X8 + 0x8]
	0x03A6E264 LDR X0, [X26]
	0x03A6E268 BL 0x3C124EC
	0x03A6E26C LDR X8, [X20]
	0x03A6E270 MOV X1, X31
	0x03A6E274 LDR X8, [X8 + 0xB8]
	0x03A6E278 STR W0, [X8 + 0xC]
	0x03A6E27C LDR X0, [X19]
	0x03A6E280 BL 0x3C124EC
	0x03A6E284 LDR X8, [X20]
	0x03A6E288 MOV X1, X31
	0x03A6E28C LDR X8, [X8 + 0xB8]
	0x03A6E290 STR W0, [X8 + 0x10]
	0x03A6E294 LDR X0, [X25]
	0x03A6E298 BL 0x3C124EC
	0x03A6E29C LDR X8, [X20]
	0x03A6E2A0 MOV X1, X31
	0x03A6E2A4 LDR X8, [X8 + 0xB8]
	0x03A6E2A8 STR W0, [X8 + 0x14]
	0x03A6E2AC LDR X0, [X24]
	0x03A6E2B0 BL 0x3C124EC
	0x03A6E2B4 LDR X8, [X20]
	0x03A6E2B8 MOV X1, X31
	0x03A6E2BC LDR X8, [X8 + 0xB8]
	0x03A6E2C0 STR W0, [X8 + 0x18]
	0x03A6E2C4 ADRP X8, 0x6E8000
	0x03A6E2C8 LDR X8, [X8 + 0xC30]
	0x03A6E2CC LDR X0, [X8]
	0x03A6E2D0 BL 0x3C124EC
	0x03A6E2D4 LDR X8, [X20]
	0x03A6E2D8 MOV X1, X31
	0x03A6E2DC LDR X8, [X8 + 0xB8]
	0x03A6E2E0 STR W0, [X8 + 0x1C]
	0x03A6E2E4 ADRP X8, 0x6E8000
	0x03A6E2E8 LDR X8, [X8 + 0xC48]
	0x03A6E2EC LDR X0, [X8]
	0x03A6E2F0 BL 0x3C124EC
	0x03A6E2F4 LDR X8, [X20]
	0x03A6E2F8 MOV X1, X31
	0x03A6E2FC LDR X8, [X8 + 0xB8]
	0x03A6E300 STR W0, [X8 + 0x20]
	0x03A6E304 ADRP X8, 0x6E8000
	0x03A6E308 LDR X8, [X8 + 0xC28]
	0x03A6E30C LDR X0, [X8]
	0x03A6E310 BL 0x3C124EC
	0x03A6E314 LDR X8, [X20]
	0x03A6E318 MOV X1, X31
	0x03A6E31C LDR X8, [X8 + 0xB8]
	0x03A6E320 STR W0, [X8 + 0x24]
	0x03A6E324 ADRP X8, 0x6E8000
	0x03A6E328 LDR X8, [X8 + 0xC38]
	0x03A6E32C LDR X0, [X8]
	0x03A6E330 BL 0x3C124EC
	0x03A6E334 LDR X8, [X20]
	0x03A6E338 MOV X1, X31
	0x03A6E33C LDR X8, [X8 + 0xB8]
	0x03A6E340 STR W0, [X8 + 0x28]
	0x03A6E344 ADRP X8, 0x6E8000
	0x03A6E348 LDR X8, [X8 + 0xC40]
	0x03A6E34C LDR X0, [X8]
	0x03A6E350 BL 0x3C124EC
	0x03A6E354 LDR X8, [X20]
	0x03A6E358 MOVZ W1, 0x4
	0x03A6E35C LDR X8, [X8 + 0xB8]
	0x03A6E360 STR W0, [X8 + 0x2C]
	0x03A6E364 LDR X0, [X22]
	0x03A6E368 BL 0x1C16D6C
	0x03A6E36C ADRP X8, 0x6E8000
	0x03A6E370 LDR X8, [X8 + 0xC18]
	0x03A6E374 MOV X2, X31
	0x03A6E378 MOV X19, X0
	0x03A6E37C LDR X1, [X8]
	0x03A6E380 BL 0x32C5BD8
	0x03A6E384 LDR X8, [X20]
	0x03A6E388 MOVZ W1, 0x3
	0x03A6E38C LDR X8, [X8 + 0xB8]
	0x03A6E390 STR X19, [X8 + 0x30]
	0x03A6E394 LDR X0, [X21]
	0x03A6E398 BL 0x1C16D6C
	0x03A6E39C ADRP X8, 0x6E8000
	0x03A6E3A0 LDR X8, [X8 + 0xC08]
	0x03A6E3A4 MOV X2, X31
	0x03A6E3A8 MOV X19, X0
	0x03A6E3AC LDR X1, [X8]
	0x03A6E3B0 BL 0x32C5BD8
	0x03A6E3B4 LDR X8, [X20]
	0x03A6E3B8 MOVZ W1, 0x3
	0x03A6E3BC LDR X8, [X8 + 0xB8]
	0x03A6E3C0 STR X19, [X8 + 0x38]
	0x03A6E3C4 LDR X0, [X21]
	0x03A6E3C8 BL 0x1C16D6C
	0x03A6E3CC ADRP X8, 0x6E8000
	0x03A6E3D0 LDR X8, [X8 + 0xC10]
	0x03A6E3D4 MOV X2, X31
	0x03A6E3D8 MOV X19, X0
	0x03A6E3DC LDR X1, [X8]
	0x03A6E3E0 BL 0x32C5BD8
	0x03A6E3E4 LDR X8, [X20]
	0x03A6E3E8 MOVZ W1, 0x4
	0x03A6E3EC LDR X8, [X8 + 0xB8]
	0x03A6E3F0 STR X19, [X8 + 0x40]
	0x03A6E3F4 LDR X0, [X22]
	0x03A6E3F8 BL 0x1C16D6C
	0x03A6E3FC ADRP X8, 0x6E8000
	0x03A6E400 LDR X8, [X8 + 0xC20]
	0x03A6E404 MOV X2, X31
	0x03A6E408 MOV X19, X0
	0x03A6E40C LDR X1, [X8]
	0x03A6E410 BL 0x32C5BD8
	0x03A6E414 LDR X8, [X20]
	0x03A6E418 MOVZ W1, 0x2
	0x03A6E41C LDR X8, [X8 + 0xB8]
	0x03A6E420 STR X19, [X8 + 0x48]
	0x03A6E424 LDR X0, [X21]
	0x03A6E428 BL 0x1C16D6C
	0x03A6E42C CBZ X0, 0x3A6E540
	0x03A6E430 LDR W8, [X0 + 0x18]
	0x03A6E434 CBZ W8, 0x3A6E53C
	0x03A6E438 MOVZ W9, 0x5
	0x03A6E43C CMP W8, 0x1
	0x03A6E440 STR W9, [X0 + 0x20]
	0x03A6E444 B.EQ 0x3A6E53C
	0x03A6E448 MOVZ W8, 0x6
	0x03A6E44C STR W8, [X0 + 0x24]
	0x03A6E450 LDR X8, [X20]
	0x03A6E454 MOVZ W1, 0x2
	0x03A6E458 LDR X8, [X8 + 0xB8]
	0x03A6E45C STR X0, [X8 + 0x50]
	0x03A6E460 LDR X0, [X21]
	0x03A6E464 BL 0x1C16D6C
	0x03A6E468 CBZ X0, 0x3A6E540
	0x03A6E46C LDR W8, [X0 + 0x18]
	0x03A6E470 CBZ W8, 0x3A6E53C
	0x03A6E474 MOVZ W9, 0x5
	0x03A6E478 CMP W8, 0x1
	0x03A6E47C STR W9, [X0 + 0x20]
	0x03A6E480 B.EQ 0x3A6E53C
	0x03A6E484 MOVZ W8, 0x7
	0x03A6E488 STR W8, [X0 + 0x24]
	0x03A6E48C LDR X8, [X20]
	0x03A6E490 MOVZ W1, 0x2
	0x03A6E494 LDR X8, [X8 + 0xB8]
	0x03A6E498 STR X0, [X8 + 0x58]
	0x03A6E49C LDR X0, [X22]
	0x03A6E4A0 BL 0x1C16D6C
	0x03A6E4A4 CBZ X0, 0x3A6E540
	0x03A6E4A8 LDR W8, [X0 + 0x18]
	0x03A6E4AC CMP W8, 0x1
	0x03A6E4B0 B.LS 0x3A6E53C
	0x03A6E4B4 MOVZ W8, 0x3
	0x03A6E4B8 STR W8, [X0 + 0x24]
	0x03A6E4BC LDR X8, [X20]
	0x03A6E4C0 MOVZ W1, 0x1
	0x03A6E4C4 LDR X8, [X8 + 0xB8]
	0x03A6E4C8 STR X0, [X8 + 0x60]
	0x03A6E4CC LDR X0, [X21]
	0x03A6E4D0 BL 0x1C16D6C
	0x03A6E4D4 CBZ X0, 0x3A6E540
	0x03A6E4D8 LDR W8, [X0 + 0x18]
	0x03A6E4DC CBZ W8, 0x3A6E53C
	0x03A6E4E0 MOVZ W8, 0x8
	0x03A6E4E4 STR W8, [X0 + 0x20]
	0x03A6E4E8 LDR X8, [X20]
	0x03A6E4EC MOVZ W1, 0x1

ISIL:
	001 Move [X31-112], D9
	002 Move [X31-104], D8
	003 Move [X31+16], X29
	004 Move [X31+24], X30
	005 Move [X31+32], X28
	006 Move [X31+40], X27
	007 Move [X31+48], X26
	008 Move [X31+56], X25
	009 Move [X31+64], X24
	010 Move [X31+72], X23
	011 Move [X31+80], X22
	012 Move [X31+88], X21
	013 Move [X31+96], X20
	014 Move [X31+104], X19
	015 Subtract X31, X31, 592
	016 Move X26, 0x975000
	017 Move X29, 0x6E9000
	018 Move W8, [X26+688]
	019 Move X29, [X29+2968]
	020 Move X20, X6
	021 Move V8, V0
	022 Move W21, W5
	023 Move W28, W4
	024 Move W22, W3
	025 Move W23, W2
	026 Move X24, X1
	027 Move X19, X0
	028 Add X25, X31, 144
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {50}
	033 Move X0, 0x686000
	034 Move X0, [X0+1432]
	035 Call 0x1C17CF4
	036 Move X0, 0x6E9000
	037 Move X0, [X0+2968]
	038 Call 0x1C17CF4
	039 Move X0, 0x6E3000
	040 Move X0, [X0+2480]
	041 Call 0x1C17CF4
	042 Move X0, 0x6E7000
	043 Move X0, [X0+16]
	044 Call 0x1C17CF4
	045 Move X0, 0x6AF000
	046 Move X0, [X0+2216]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X26+688], W8
	050 NotImplemented "Instruction MOVI not yet implemented."
	051 Move [X31+576], X31
	052 Move [X25+400], V0
	053 Move [X25+408], V0
	054 Move [X25+368], V0
	055 Move [X25+376], V0
	056 Move [X25+336], V0
	057 Move [X25+344], V0
	058 Move [X25+20], V0
	059 Move V2, [X24+16]
	060 Move V0, [X24+32]
	061 Move W8, [X24+48]
	062 Move V1, [X24]
	063 Move X0, [X29]
	064 Move [X25+80], V2
	065 Move [X25+88], V0
	066 Move [X31+256], W8
	067 Move [X25+4], V1
	068 Move X27, 0x6E7000
	069 Move W8, [X0+224]
	070 Move X27, [X27+16]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Move V0, [X25+64]
	075 Move V1, [X25+80]
	076 Move W8, [X31+256]
	077 Move V2, [X25+6]
	078 Add X0, X31, 400
	079 Move [X25+256], V0
	080 Move [X25+264], V1
	081 Move [X31+448], W8
	082 Add X8, X31, 464
	083 Move S0, W31
	084 Move W1, W31
	085 Move W2, W21
	086 Move W3, W23
	087 Move W4, W22
	088 Move X5, X20
	089 Move [X25+18], V2
	090 Call RTHandleResourcePool.CreateTextureDesc, X0, X1, X2, V0, X3, X4, X5
	091 Move X0, [X27]
	092 Move X26, [X19]
	093 Move W8, [X0+224]
	094 Compare W8, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1C17DFC
	097 Add X1, X31, 464
	098 Move X0, X26
	099 Move W2, W31
	100 Call RenderingUtils.RTHandleNeedsReAlloc, X0, X1, X2
	101 Move W26, W31
	102 Move TEMP, X0
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfNotEqual {259}
	106 Move X8, [X19]
	107 Compare X8, 0
	108 JumpIfEqual {220}
	109 Move X9, 0x686000
	110 Move X9, [X9+1432]
	111 Move X26, [X8+24]
	112 Move X0, [X9]
	113 Move W9, [X0+224]
	114 Compare W9, 0
	115 JumpIfNotEqual {117}
	116 Call 0x1C17DFC
	117 Move X0, X26
	118 Move X1, X31
	119 Move X2, X31
	120 Call Object.op_Inequality, X0, X1
	121 Move TEMP, X0
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfNotEqual {220}
	125 Move X8, [X19]
	126 Compare X8, 0
	127 JumpIfEqual {276}
	128 Move X0, [X8+24]
	129 Compare X0, 0
	130 JumpIfEqual {276}
	131 Add X8, X31, 208
	132 Move X1, X31
	133 Call RenderTexture.get_descriptor, X0
	134 Move V0, [X25+64]
	135 Move V1, [X25+80]
	136 Move V2, [X25+6]
	137 Move W8, [X31+256]
	138 Move [X25+192], V0
	139 Move [X25+200], V1
	140 Move [X25+14], V2
	141 Move [X31+384], W8
	142 Move X8, [X19]
	143 Compare X8, 0
	144 JumpIfEqual {276}
	145 Move X0, [X8+24]
	146 Compare X0, 0
	147 JumpIfEqual {276}
	148 Move X1, X31
	149 Call Texture.get_anisoLevel, X0
	150 Move X8, [X19]
	151 Compare X8, 0
	152 JumpIfEqual {276}
	153 Move W26, W0
	154 Move X0, [X8+24]
	155 Compare X0, 0
	156 JumpIfEqual {276}
	157 Move X1, X31
	158 Call Texture.get_mipMapBias, X0
	159 Move X8, [X19]
	160 Compare X8, 0
	161 JumpIfEqual {276}
	162 Move X0, [X8+24]
	163 Move [X31+20], W26
	164 Compare X0, 0
	165 JumpIfEqual {276}
	166 Move X1, X31
	167 Move V9, V0
	168 Call Texture.get_filterMode, X0
	169 Move X8, [X19]
	170 Compare X8, 0
	171 JumpIfEqual {276}
	172 Move W26, W0
	173 Move X0, [X8+24]
	174 Move [X31+16], W28
	175 Compare X0, 0
	176 JumpIfEqual {276}
	177 Move X1, X31
	178 Call Texture.get_wrapMode, X0
	179 Move X8, [X19]
	180 Compare X8, 0
	181 JumpIfEqual {276}
	182 Move W28, W0
	183 Move X0, [X29]
	184 Move X29, [X8+88]
	185 Move W9, [X0+224]
	186 Compare W9, 0
	187 JumpIfNotEqual {189}
	188 Call 0x1C17DFC
	189 Move V0, [X25+192]
	190 Move V1, [X25+208]
	191 Move W8, [X31+384]
	192 Move V2, [X25+14]
	193 Move W2, [X31+20]
	194 Move [X31+9], V0
	195 Move [X31+192], W8
	196 Add X8, X31, 208
	197 Add X0, X31, 144
	198 Move W1, W31
	199 Move V0, V9
	200 Move W3, W26
	201 Move W4, W28
	202 Move X5, X29
	203 Move [X25+16], V1
	204 Move [X25+24], V2
	205 Call RTHandleResourcePool.CreateTextureDesc, X0, X1, X2, V0, X3, X4, X5
	206 Move X0, [X27]
	207 Move X26, [X19]
	208 Move W8, [X0+224]
	209 Compare W8, 0
	210 JumpIfNotEqual {212}
	211 Call 0x1C17DFC
	212 Add X0, X31, 24
	213 Add X1, X31, 208
	214 Move W2, 120
	215 Call 0x3EB2AC0
	216 Add X0, X31, 24
	217 Move X1, X26
	218 Call RenderingUtils.AddStaleResourceToPoolOrRelease, X0, X1
	219 Move W28, [X31+16]
	220 Move X25, 0x6AF000
	221 Move X25, [X25+2216]
	222 Move X0, [X25]
	223 Move W8, [X0+224]
	224 Compare W8, 0
	225 JumpIfNotEqual {228}
	226 Call 0x1C17DFC
	227 Move X0, [X25]
	228 Move X8, [X0+184]
	229 Move X0, [X8+16]
	230 Compare X0, 0
	231 JumpIfEqual {276}
	232 Add X1, X31, 464
	233 Move W3, 1
	234 Move X2, X19
	235 Move W26, 1
	236 Call RTHandleResourcePool.TryGetResource, X0, X1, X2, X3
	237 Move TEMP, X0
	238 And TEMP, TEMP, 1
	239 Compare TEMP, 1
	240 JumpIfEqual {259}
	241 Move X8, 0x6E3000
	242 Move X8, [X8+2480]
	243 Move X0, [X8]
	244 Move W8, [X0+224]
	245 Compare W8, 0
	246 JumpIfNotEqual {248}
	247 Call 0x1C17DFC
	248 And W3, W28, 1
	249 Move X0, X24
	250 Move W1, W23
	251 Move W2, W22
	252 Move W4, W21
	253 Move V0, V8
	254 Move X5, X20
	255 Move X6, X31
	256 Call RTHandles.Alloc, X0, X1, X2, X3, X4, V0, X5
	257 Move W26, 1
	258 Move [X19], X0
	259 Move W0, W26
	260 Add X31, X31, 592
	261 Move X20, [X31+96]
	262 Move X19, [X31+104]
	263 Move X22, [X31+80]
	264 Move X21, [X31+88]
	265 Move X24, [X31+64]
	266 Move X23, [X31+72]
	267 Move X26, [X31+48]
	268 Move X25, [X31+56]
	269 Move X28, [X31+32]
	270 Move X27, [X31+40]
	271 Move X29, [X31+16]
	272 Move X30, [X31+24]
	273 Move D9, [X31+112]
	274 Move D8, [X31+120]
	275 Return X0
	276 Call 0x1C17F20

Method: System.Boolean ReAllocateIfNeeded(ref UnityEngine.Rendering.RTHandle handle, UnityEngine.Vector2 scaleFactor, in UnityEngine.RenderTextureDescriptor descriptor, UnityEngine.FilterMode filterMode = 0, UnityEngine.TextureWrapMode wrapMode = 0, System.Boolean isShadowMap = False, System.Int32 anisoLevel = 1, System.Single mipMapBias = 0, System.String name = )

Disassembly:
	0x03A738D8 STR W10, [X19 + 0x1C]
	0x03A738DC CBZ X8, 0x3A73C1C
	0x03A738E0 LDRSW X10, [X19 + 0x18]
	0x03A738E4 LDR W11, [X8 + 0x18]
	0x03A738E8 ADRP X21, 0x6E3000
	0x03A738EC LDR X21, [X21 + 0xD98]
	0x03A738F0 CMP W10, W11
	0x03A738F4 B.CS 0x3A7390C
	0x03A738F8 ADD W9, W10, 0x1
	0x03A738FC ADD X8, X8, X10, 0x2, LSL
	0x03A73900 STR W9, [X19 + 0x18]
	0x03A73904 STR W1, [X8 + 0x20]
	0x03A73908 B 0x3A73920
	0x03A7390C LDR X8, [X9 + 0x20]
	0x03A73910 MOV X0, X19
	0x03A73914 LDR X8, [X8 + 0xC0]
	0x03A73918 LDR X2, [X8 + 0x70]
	0x03A7391C BL 0x305D1F8
	0x03A73920 LDR X1, [X21]
	0x03A73924 ADD X0, X31, 0x98
	0x03A73928 MOV X2, X31
	0x03A7392C STR W31, [X31 + 0x98]
	0x03A73930 BL 0x3C5A49C
	0x03A73934 LDR W10, [X19 + 0x1C]
	0x03A73938 LDR W1, [X31 + 0x98]
	0x03A7393C LDR X8, [X19 + 0x10]
	0x03A73940 LDR X9, [X20]
	0x03A73944 ADD W10, W10, 0x1
	0x03A73948 STR W10, [X19 + 0x1C]
	0x03A7394C CBZ X8, 0x3A73C1C
	0x03A73950 LDRSW X10, [X19 + 0x18]
	0x03A73954 LDR W11, [X8 + 0x18]
	0x03A73958 ADRP X21, 0x6E3000
	0x03A7395C LDR X21, [X21 + 0xDA8]
	0x03A73960 CMP W10, W11
	0x03A73964 B.CS 0x3A7397C
	0x03A73968 ADD W9, W10, 0x1
	0x03A7396C ADD X8, X8, X10, 0x2, LSL
	0x03A73970 STR W9, [X19 + 0x18]
	0x03A73974 STR W1, [X8 + 0x20]
	0x03A73978 B 0x3A73990
	0x03A7397C LDR X8, [X9 + 0x20]
	0x03A73980 MOV X0, X19
	0x03A73984 LDR X8, [X8 + 0xC0]
	0x03A73988 LDR X2, [X8 + 0x70]
	0x03A7398C BL 0x305D1F8
	0x03A73990 LDR X1, [X21]
	0x03A73994 ADD X0, X31, 0x90
	0x03A73998 MOV X2, X31
	0x03A7399C STR W31, [X31 + 0x90]
	0x03A739A0 BL 0x3C5A49C
	0x03A739A4 LDR W10, [X19 + 0x1C]
	0x03A739A8 LDR W1, [X31 + 0x90]
	0x03A739AC LDR X8, [X19 + 0x10]
	0x03A739B0 LDR X9, [X20]
	0x03A739B4 ADD W10, W10, 0x1
	0x03A739B8 STR W10, [X19 + 0x1C]
	0x03A739BC CBZ X8, 0x3A73C1C
	0x03A739C0 LDRSW X10, [X19 + 0x18]
	0x03A739C4 LDR W11, [X8 + 0x18]
	0x03A739C8 ADRP X21, 0x6E3000
	0x03A739CC LDR X21, [X21 + 0xDB8]
	0x03A739D0 CMP W10, W11
	0x03A739D4 B.CS 0x3A739EC
	0x03A739D8 ADD W9, W10, 0x1
	0x03A739DC ADD X8, X8, X10, 0x2, LSL
	0x03A739E0 STR W9, [X19 + 0x18]
	0x03A739E4 STR W1, [X8 + 0x20]
	0x03A739E8 B 0x3A73A00
	0x03A739EC LDR X8, [X9 + 0x20]
	0x03A739F0 MOV X0, X19
	0x03A739F4 LDR X8, [X8 + 0xC0]
	0x03A739F8 LDR X2, [X8 + 0x70]
	0x03A739FC BL 0x305D1F8
	0x03A73A00 LDR X1, [X21]
	0x03A73A04 ADD X0, X31, 0x88
	0x03A73A08 MOV X2, X31
	0x03A73A0C STR W31, [X31 + 0x88]
	0x03A73A10 BL 0x3C5A49C
	0x03A73A14 LDR W10, [X19 + 0x1C]
	0x03A73A18 LDR W1, [X31 + 0x88]
	0x03A73A1C LDR X8, [X19 + 0x10]
	0x03A73A20 LDR X9, [X20]
	0x03A73A24 ADD W10, W10, 0x1
	0x03A73A28 STR W10, [X19 + 0x1C]
	0x03A73A2C CBZ X8, 0x3A73C1C
	0x03A73A30 LDRSW X10, [X19 + 0x18]
	0x03A73A34 LDR W11, [X8 + 0x18]
	0x03A73A38 ADRP X21, 0x6E3000
	0x03A73A3C LDR X21, [X21 + 0xDA0]
	0x03A73A40 CMP W10, W11
	0x03A73A44 B.CS 0x3A73A5C
	0x03A73A48 ADD W9, W10, 0x1
	0x03A73A4C ADD X8, X8, X10, 0x2, LSL
	0x03A73A50 STR W9, [X19 + 0x18]
	0x03A73A54 STR W1, [X8 + 0x20]
	0x03A73A58 B 0x3A73A70
	0x03A73A5C LDR X8, [X9 + 0x20]
	0x03A73A60 MOV X0, X19
	0x03A73A64 LDR X8, [X8 + 0xC0]
	0x03A73A68 LDR X2, [X8 + 0x70]
	0x03A73A6C BL 0x305D1F8
	0x03A73A70 LDR X1, [X21]
	0x03A73A74 ADD X0, X31, 0x80
	0x03A73A78 MOV X2, X31
	0x03A73A7C STR W31, [X31 + 0x80]
	0x03A73A80 BL 0x3C5A49C
	0x03A73A84 LDR W10, [X19 + 0x1C]
	0x03A73A88 LDR W1, [X31 + 0x80]
	0x03A73A8C LDR X8, [X19 + 0x10]
	0x03A73A90 LDR X9, [X20]
	0x03A73A94 ADD W10, W10, 0x1
	0x03A73A98 STR W10, [X19 + 0x1C]
	0x03A73A9C CBZ X8, 0x3A73C1C
	0x03A73AA0 LDRSW X10, [X19 + 0x18]
	0x03A73AA4 LDR W11, [X8 + 0x18]
	0x03A73AA8 ADRP X21, 0x6E3000
	0x03A73AAC LDR X21, [X21 + 0xDB0]
	0x03A73AB0 CMP W10, W11
	0x03A73AB4 B.CS 0x3A73ACC
	0x03A73AB8 ADD W9, W10, 0x1
	0x03A73ABC ADD X8, X8, X10, 0x2, LSL
	0x03A73AC0 STR W9, [X19 + 0x18]
	0x03A73AC4 STR W1, [X8 + 0x20]
	0x03A73AC8 B 0x3A73AE0
	0x03A73ACC LDR X8, [X9 + 0x20]
	0x03A73AD0 MOV X0, X19
	0x03A73AD4 LDR X8, [X8 + 0xC0]
	0x03A73AD8 LDR X2, [X8 + 0x70]
	0x03A73ADC BL 0x305D1F8
	0x03A73AE0 LDR X1, [X21]
	0x03A73AE4 ADD X0, X31, 0x78
	0x03A73AE8 MOV X2, X31
	0x03A73AEC STR W31, [X31 + 0x78]
	0x03A73AF0 BL 0x3C5A49C
	0x03A73AF4 LDR W10, [X19 + 0x1C]
	0x03A73AF8 LDR W1, [X31 + 0x78]
	0x03A73AFC LDR X8, [X19 + 0x10]
	0x03A73B00 LDR X9, [X20]
	0x03A73B04 ADD W10, W10, 0x1
	0x03A73B08 STR W10, [X19 + 0x1C]
	0x03A73B0C CBZ X8, 0x3A73C1C
	0x03A73B10 ADRP X20, 0x6E1000
	0x03A73B14 LDR X20, [X20 + 0x10]
	0x03A73B18 LDRSW X10, [X19 + 0x18]
	0x03A73B1C LDR W11, [X8 + 0x18]
	0x03A73B20 ADRP X24, 0x6E3000
	0x03A73B24 ADRP X23, 0x6E3000
	0x03A73B28 ADRP X22, 0x6E3000
	0x03A73B2C ADRP X21, 0x6E3000
	0x03A73B30 LDR X24, [X24 + 0xD88]
	0x03A73B34 LDR X23, [X23 + 0xD80]
	0x03A73B38 LDR X22, [X22 + 0xD90]
	0x03A73B3C LDR X21, [X21 + 0xD78]
	0x03A73B40 CMP W10, W11
	0x03A73B44 B.CS 0x3A73B5C
	0x03A73B48 ADD W9, W10, 0x1
	0x03A73B4C ADD X8, X8, X10, 0x2, LSL
	0x03A73B50 STR W9, [X19 + 0x18]
	0x03A73B54 STR W1, [X8 + 0x20]
	0x03A73B58 B 0x3A73B70
	0x03A73B5C LDR X8, [X9 + 0x20]
	0x03A73B60 MOV X0, X19
	0x03A73B64 LDR X8, [X8 + 0xC0]
	0x03A73B68 LDR X2, [X8 + 0x70]
	0x03A73B6C BL 0x305D1F8
	0x03A73B70 LDR X8, [X20]
	0x03A73B74 MOVI V0.2D, 0x0
	0x03A73B78 ADD X0, X31, 0x0
	0x03A73B7C MOV W1, W31
	0x03A73B80 LDR X8, [X8 + 0xB8]
	0x03A73B84 MOV X2, X31
	0x03A73B88 STR X19, [X8]
	0x03A73B8C STR X31, [X31 + 0x70]
	0x03A73B90 STP V0, V0, [X31 + 0x50]
	0x03A73B94 STP V0, V0, [X31 + 0x30]
	0x03A73B98 STP V0, V0, [X31 + 0x10]
	0x03A73B9C STR V0, [X31]
	0x03A73BA0 BL 0x3C50848
	0x03A73BA4 LDR X19, [X20]
	0x03A73BA8 ADD X1, X31, 0x0
	0x03A73BAC MOVZ W2, 0x78
	0x03A73BB0 LDR X8, [X19 + 0xB8]
	0x03A73BB4 ADD X0, X8, 0x8
	0x03A73BB8 BL 0x3EB1AC0
	0x03A73BBC LDR X8, [X19 + 0xB8]
	0x03A73BC0 STR X31, [X8 + 0x80]
	0x03A73BC4 LDR X0, [X24]
	0x03A73BC8 BL 0x1C16F10
	0x03A73BCC LDR X1, [X23]
	0x03A73BD0 MOV X19, X0
	0x03A73BD4 BL 0x2A353AC
	0x03A73BD8 LDR X8, [X20]
	0x03A73BDC LDR X8, [X8 + 0xB8]
	0x03A73BE0 STR X19, [X8 + 0x90]
	0x03A73BE4 LDR X0, [X22]
	0x03A73BE8 BL 0x1C16F10
	0x03A73BEC LDR X1, [X21]
	0x03A73BF0 MOV X19, X0
	0x03A73BF4 BL 0x2A44560
	0x03A73BF8 LDR X8, [X20]
	0x03A73BFC LDP X22, X21, [X31 + 0xC0]
	0x03A73C00 LDP X24, X23, [X31 + 0xB0]
	0x03A73C04 LDR X30, [X31 + 0xA0]
	0x03A73C08 LDR X8, [X8 + 0xB8]
	0x03A73C0C STR X19, [X8 + 0x98]
	0x03A73C10 LDP X20, X19, [X31 + 0xD0]
	0x03A73C14 ADD X31, X31, 0xE0
	0x03A73C18 RET
	0x03A73C1C BL 0x1C16F20
	0x03A73C20 STR W1, [X0]
	0x03A73C24 RET
	0x03A73C28 LDR W0, [X0]
	0x03A73C2C RET
	0x03A73C30 LDR X8, [X1 + 0x20]
	0x03A73C34 LDP V1, V0, [X1]
	0x03A73C38 STR X8, [X0 + 0x28]
	0x03A73C3C STUR V0, [X0 + 0x18]
	0x03A73C40 STUR V1, [X0 + 0x8]
	0x03A73C44 RET
	0x03A73C48 LDR X9, [X0 + 0x28]
	0x03A73C4C LDUR V0, [X0 + 0x18]
	0x03A73C50 LDUR V1, [X0 + 0x8]
	0x03A73C54 STR X9, [X8 + 0x20]
	0x03A73C58 STP V1, V0, [X8]
	0x03A73C5C RET
	0x03A73C60 STR X30, [X31 - 0x30]!
	0x03A73C64 STP X22, X21, [X31 + 0x10]
	0x03A73C68 STP X20, X19, [X31 + 0x20]
	0x03A73C6C ADRP X21, 0x96F000
	0x03A73C70 ADRP X22, 0x6E3000
	0x03A73C74 LDRB W8, [X21 + 0x2B8]
	0x03A73C78 LDR X22, [X22 + 0xDC0]
	0x03A73C7C MOV X20, X1
	0x03A73C80 MOV X19, X0
	0x03A73C84 TBNZ X8, 0x0, 0x3A73C9C
	0x03A73C88 ADRP X0, 0x6E3000
	0x03A73C8C LDR X0, [X0 + 0xDC0]
	0x03A73C90 BL 0x1C16CF4
	0x03A73C94 MOVZ W8, 0x1
	0x03A73C98 STRB W8, [X21 + 0x2B8]
	0x03A73C9C LDR X0, [X22]
	0x03A73CA0 LDR W8, [X0 + 0xE0]
	0x03A73CA4 CBNZ W8, 0x3A73CAC
	0x03A73CA8 BL 0x1C16DFC
	0x03A73CAC MOVN W8, 0x1
	0x03A73CB0 STR W8, [X19]
	0x03A73CB4 LDR X8, [X20 + 0x20]
	0x03A73CB8 LDP V1, V0, [X20]

ISIL:
	001 Move [X31-128], D11
	002 Move [X31-120], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X29
	006 Move [X31+40], X30
	007 Move [X31+48], X28
	008 Move [X31+56], X27
	009 Move [X31+64], X26
	010 Move [X31+72], X25
	011 Move [X31+80], X24
	012 Move [X31+88], X23
	013 Move [X31+96], X22
	014 Move [X31+104], X21
	015 Move [X31+112], X20
	016 Move [X31+120], X19
	017 Subtract X31, X31, 592
	018 Move X20, 0x970000
	019 Move W8, [X20+689]
	020 Move X27, X6
	021 Move V8, V2
	022 Move W21, W5
	023 Move W25, W4
	024 Move W22, W3
	025 Move W23, W2
	026 Move X24, X1
	027 Move V9, V1
	028 Move V10, V0
	029 Move X19, X0
	030 Add X29, X31, 144
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {55}
	035 Move X0, 0x681000
	036 Move X0, [X0+1432]
	037 Call 0x1C17CF4
	038 Move X0, 0x6E4000
	039 Move X0, [X0+2968]
	040 Call 0x1C17CF4
	041 Move X0, 0x6DE000
	042 Move X0, [X0+2480]
	043 Call 0x1C17CF4
	044 Move X0, 0x6E2000
	045 Move X0, [X0+16]
	046 Call 0x1C17CF4
	047 Move X0, 0x6AA000
	048 Move X0, [X0+2216]
	049 Call 0x1C17CF4
	050 Move X0, 0x681000
	051 Move X0, [X0+2440]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X20+689], W8
	055 NotImplemented "Instruction MOVI not yet implemented."
	056 Move [X31+576], X31
	057 Move [X29+400], V0
	058 Move [X29+408], V0
	059 Move [X29+368], V0
	060 Move [X29+376], V0
	061 Move [X29+336], V0
	062 Move [X29+344], V0
	063 Move [X29+20], V0
	064 Move X28, 0x6E4000
	065 Move X8, [X19]
	066 Move X28, [X28+2968]
	067 Compare X8, 0
	068 JumpIfEqual {83}
	069 Move W9, [X8+168]
	070 Compare W9, 0
	071 JumpIfEqual {83}
	072 Move S0, [X8+148]
	073 Move S1, [X8+152]
	074 Move X8, -49844224
	075 Move V2, [X8+3872]
	076 Subtract S0, S0, S10
	077 Subtract S1, S1, S9
	078 Multiply S0, S0, S0
	079 Multiply S1, S1, S1
	080 Add S0, S0, S1
	081 NotImplemented "Instruction FCMP not yet implemented."
	082 NotImplemented "Instruction CSET not yet implemented."
	083 Move W26, 1
	084 Move V2, [X24+16]
	085 Move V0, [X24+32]
	086 Move W8, [X24+48]
	087 Move V1, [X24]
	088 Move X0, [X28]
	089 Move [X29+80], V2
	090 Move [X29+88], V0
	091 Move [X31+256], W8
	092 Move [X29+4], V1
	093 Move X20, 0x681000
	094 Move W8, [X0+224]
	095 Move X20, [X20+2440]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move V0, [X29+64]
	100 Move V1, [X29+80]
	101 Move W8, [X31+256]
	102 Move V2, [X29+6]
	103 Move X5, [X20]
	104 Move [X29+256], V0
	105 Move [X29+264], V1
	106 Move [X31+448], W8
	107 Add X8, X31, 464
	108 Add X0, X31, 400
	109 Move S0, W31
	110 Move W1, 1
	111 Move W2, W21
	112 Move W3, W23
	113 Move W4, W22
	114 Move [X29+18], V2
	115 Call RTHandleResourcePool.CreateTextureDesc, X0, X1, X2, V0, X3, X4, X5
	116 Move TEMP, X26
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfEqual {136}
	120 Move X8, 0x6E2000
	121 Move X8, [X8+16]
	122 Move X26, [X19]
	123 Move X0, [X8]
	124 Move W8, [X0+224]
	125 Compare W8, 0
	126 JumpIfNotEqual {128}
	127 Call 0x1C17DFC
	128 Add X1, X31, 464
	129 Move W2, 1
	130 Move X0, X26
	131 Call RenderingUtils.RTHandleNeedsReAlloc, X0, X1, X2
	132 Move TEMP, X0
	133 And TEMP, TEMP, 1
	134 Compare TEMP, 1
	135 JumpIfNotEqual {291}
	136 Move X8, [X19]
	137 Compare X8, 0
	138 JumpIfEqual {250}
	139 Move X9, 0x681000
	140 Move X9, [X9+1432]
	141 Move X26, [X8+24]
	142 Move X0, [X9]
	143 Move W9, [X0+224]
	144 Compare W9, 0
	145 JumpIfNotEqual {147}
	146 Call 0x1C17DFC
	147 Move X0, X26
	148 Move X1, X31
	149 Move X2, X31
	150 Call Object.op_Inequality, X0, X1
	151 Move TEMP, X0
	152 And TEMP, TEMP, 1
	153 Compare TEMP, 1
	154 JumpIfNotEqual {250}
	155 Move X8, [X19]
	156 Compare X8, 0
	157 JumpIfEqual {311}
	158 Move X0, [X8+24]
	159 Compare X0, 0
	160 JumpIfEqual {311}
	161 Add X8, X31, 208
	162 Move X1, X31
	163 Call RenderTexture.get_descriptor, X0
	164 Move V0, [X29+64]
	165 Move V1, [X29+80]
	166 Move V2, [X29+6]
	167 Move W8, [X31+256]
	168 Move [X29+192], V0
	169 Move [X29+200], V1
	170 Move [X29+14], V2
	171 Move [X31+384], W8
	172 Move X8, [X19]
	173 Compare X8, 0
	174 JumpIfEqual {311}
	175 Move X0, [X8+24]
	176 Compare X0, 0
	177 JumpIfEqual {311}
	178 Move X1, X31
	179 Call Texture.get_anisoLevel, X0
	180 Move X8, [X19]
	181 Compare X8, 0
	182 JumpIfEqual {311}
	183 Move W26, W0
	184 Move X0, [X8+24]
	185 Compare X0, 0
	186 JumpIfEqual {311}
	187 Move X1, X31
	188 Move [X31+20], W25
	189 Call Texture.get_mipMapBias, X0
	190 Move X8, [X19]
	191 Compare X8, 0
	192 JumpIfEqual {311}
	193 Move X0, [X8+24]
	194 Compare X0, 0
	195 JumpIfEqual {311}
	196 Move X1, X31
	197 Move V11, V0
	198 Move X25, X27
	199 Call Texture.get_filterMode, X0
	200 Move X8, [X19]
	201 Compare X8, 0
	202 JumpIfEqual {311}
	203 Move W27, W0
	204 Move X0, [X8+24]
	205 Compare X0, 0
	206 JumpIfEqual {311}
	207 Move X1, X31
	208 Call Texture.get_wrapMode, X0
	209 Move X8, [X28]
	210 Move W28, W0
	211 Move W9, [X8+224]
	212 Compare W9, 0
	213 JumpIfNotEqual {216}
	214 Move X0, X8
	215 Call 0x1C17DFC
	216 Move V0, [X29+192]
	217 Move V1, [X29+208]
	218 Move W8, [X31+384]
	219 Move V2, [X29+14]
	220 Move X5, [X20]
	221 Move [X31+9], V0
	222 Move [X31+192], W8
	223 Add X8, X31, 208
	224 Add X0, X31, 144
	225 Move W1, 1
	226 Move W2, W26
	227 Move V0, V11
	228 Move W3, W27
	229 Move W4, W28
	230 Move [X29+16], V1
	231 Move [X29+24], V2
	232 Call RTHandleResourcePool.CreateTextureDesc, X0, X1, X2, V0, X3, X4, X5
	233 Move X8, 0x6E2000
	234 Move X8, [X8+16]
	235 Move X26, [X19]
	236 Move X0, [X8]
	237 Move W8, [X0+224]
	238 Compare W8, 0
	239 JumpIfNotEqual {241}
	240 Call 0x1C17DFC
	241 Add X0, X31, 24
	242 Add X1, X31, 208
	243 Move W2, 120
	244 Call 0x3EB2AC0
	245 Add X0, X31, 24
	246 Move X1, X26
	247 Call RenderingUtils.AddStaleResourceToPoolOrRelease, X0, X1
	248 Move X27, X25
	249 Move W25, [X31+20]
	250 Move X20, 0x6AA000
	251 Move X20, [X20+2216]
	252 Move X0, [X20]
	253 Move W8, [X0+224]
	254 Compare W8, 0
	255 JumpIfNotEqual {258}
	256 Call 0x1C17DFC
	257 Move X0, [X20]
	258 Move X8, [X0+184]
	259 Move X0, [X8+16]
	260 Compare X0, 0
	261 JumpIfEqual {311}
	262 Add X1, X31, 464
	263 Move W3, 1
	264 Move X2, X19
	265 Move W26, 1
	266 Call RTHandleResourcePool.TryGetResource, X0, X1, X2, X3
	267 Move TEMP, X0
	268 And TEMP, TEMP, 1
	269 Compare TEMP, 1
	270 JumpIfEqual {292}
	271 Move X8, 0x6DE000
	272 Move X8, [X8+2480]
	273 Move X0, [X8]
	274 Move W8, [X0+224]
	275 Compare W8, 0
	276 JumpIfNotEqual {278}
	277 Call 0x1C17DFC
	278 And W3, W25, 1
	279 Move V0, V10
	280 Move V1, V9
	281 Move X0, X24
	282 Move W1, W23
	283 Move W2, W22
	284 Move W4, W21
	285 Move V2, V8
	286 Move X5, X27
	287 Move X6, X31
	288 Call RTHandles.Alloc, X0, X1, X2, X3, X4, X5, V0, X6
	289 Move W26, 1
	290 Move [X19], X0
	291 Move W26, W31
	292 Move W0, W26
	293 Add X31, X31, 592
	294 Move X20, [X31+112]
	295 Move X19, [X31+120]
	296 Move X22, [X31+96]
	297 Move X21, [X31+104]
	298 Move X24, [X31+80]
	299 Move X23, [X31+88]
	300 Move X26, [X31+64]
	301 Move X25, [X31+72]
	302 Move X28, [X31+48]
	303 Move X27, [X31+56]
	304 Move X29, [X31+32]
	305 Move X30, [X31+40]
	306 Move D9, [X31+16]
	307 Move D8, [X31+24]
	308 Move D11, [X31+128]
	309 Move D10, [X31+136]
	310 Return X0
	311 Call 0x1C17F20

Method: System.Boolean ReAllocateIfNeeded(ref UnityEngine.Rendering.RTHandle handle, UnityEngine.Rendering.ScaleFunc scaleFunc, in UnityEngine.RenderTextureDescriptor descriptor, UnityEngine.FilterMode filterMode = 0, UnityEngine.TextureWrapMode wrapMode = 0, System.Boolean isShadowMap = False, System.Int32 anisoLevel = 1, System.Single mipMapBias = 0, System.String name = )

Disassembly:
	0x03A73CBC LDP X22, X21, [X31 + 0x10]
	0x03A73CC0 STR X8, [X19 + 0x28]
	0x03A73CC4 STUR V0, [X19 + 0x18]
	0x03A73CC8 STUR V1, [X19 + 0x8]
	0x03A73CCC LDP X20, X19, [X31 + 0x20]
	0x03A73CD0 LDR X30, [X31], #0x30
	0x03A73CD4 RET
	0x03A73CD8 SUB X31, X31, 0x140
	0x03A73CDC STP X29, X30, [X31 + 0x110]
	0x03A73CE0 STP X22, X21, [X31 + 0x120]
	0x03A73CE4 STP X20, X19, [X31 + 0x130]
	0x03A73CE8 ADRP X21, 0x96F000
	0x03A73CEC LDRB W8, [X21 + 0x2B9]
	0x03A73CF0 MOV X20, X1
	0x03A73CF4 MOV X19, X0
	0x03A73CF8 TBNZ X8, 0x0, 0x3A73D1C
	0x03A73CFC ADRP X0, 0x680000
	0x03A73D00 LDR X0, [X0 + 0x598]
	0x03A73D04 BL 0x1C16CF4
	0x03A73D08 ADRP X0, 0x6E3000
	0x03A73D0C LDR X0, [X0 + 0xDC0]
	0x03A73D10 BL 0x1C16CF4
	0x03A73D14 MOVZ W8, 0x1
	0x03A73D18 STRB W8, [X21 + 0x2B9]
	0x03A73D1C CBZ X20, 0x3A73ED4
	0x03A73D20 LDR X8, [X20 + 0x48]
	0x03A73D24 LDUR V0, [X20 + 0x38]
	0x03A73D28 LDUR V1, [X20 + 0x28]
	0x03A73D2C ADRP X22, 0x6E3000
	0x03A73D30 LDR X22, [X22 + 0xDC0]
	0x03A73D34 STR X8, [X31 + 0x100]
	0x03A73D38 ADD X8, X31, 0xB8
	0x03A73D3C MOVZ W0, 0x2
	0x03A73D40 MOV X1, X31
	0x03A73D44 ADD X21, X31, 0xB8
	0x03A73D48 STP V1, V0, [X31 + 0xE0]
	0x03A73D4C BL 0x3C4B204
	0x03A73D50 LDP V0, V1, [X21]
	0x03A73D54 LDR X8, [X31 + 0xD8]
	0x03A73D58 LDP V2, V3, [X31 + 0xE0]
	0x03A73D5C LDR X9, [X31 + 0x100]
	0x03A73D60 ADD X0, X31, 0x90
	0x03A73D64 ADD X1, X31, 0x60
	0x03A73D68 MOV X2, X31
	0x03A73D6C STP V0, V1, [X31 + 0x60]
	0x03A73D70 STR X8, [X31 + 0x80]
	0x03A73D74 STP V2, V3, [X31 + 0x90]
	0x03A73D78 STR X9, [X31 + 0xB0]
	0x03A73D7C BL 0x3C4B6D8
	0x03A73D80 TBZ X0, 0x0, 0x3A73D9C
	0x03A73D84 LDR X0, [X22]
	0x03A73D88 LDR W8, [X0 + 0xE0]
	0x03A73D8C CBNZ W8, 0x3A73D94
	0x03A73D90 BL 0x1C16DFC
	0x03A73D94 MOVN W21, 0x0
	0x03A73D98 B 0x3A73DE4
	0x03A73D9C LDR X0, [X20 + 0x58]
	0x03A73DA0 CBZ X0, 0x3A73ED4
	0x03A73DA4 LDR W8, [X0 + 0x10]
	0x03A73DA8 CBZ W8, 0x3A73DD0
	0x03A73DAC MOV X1, X31
	0x03A73DB0 BL 0x3C124EC
	0x03A73DB4 LDR X8, [X22]
	0x03A73DB8 MOV W21, W0
	0x03A73DBC LDR W9, [X8 + 0xE0]
	0x03A73DC0 CBNZ W9, 0x3A73DE4
	0x03A73DC4 MOV X0, X8
	0x03A73DC8 BL 0x1C16DFC
	0x03A73DCC B 0x3A73DE4
	0x03A73DD0 LDR X0, [X22]
	0x03A73DD4 LDR W8, [X0 + 0xE0]
	0x03A73DD8 CBNZ W8, 0x3A73DE0
	0x03A73DDC BL 0x1C16DFC
	0x03A73DE0 MOVN W21, 0x1
	0x03A73DE4 ADD X8, X20, 0x28
	0x03A73DE8 STR W21, [X19]
	0x03A73DEC LDR X9, [X8 + 0x20]
	0x03A73DF0 LDP V1, V0, [X8]
	0x03A73DF4 LDR X0, [X22]
	0x03A73DF8 ADRP X21, 0x680000
	0x03A73DFC STR X9, [X31 + 0x100]
	0x03A73E00 STP V1, V0, [X31 + 0xE0]
	0x03A73E04 LDR W8, [X0 + 0xE0]
	0x03A73E08 LDR X21, [X21 + 0x598]
	0x03A73E0C CBNZ W8, 0x3A73E14
	0x03A73E10 BL 0x1C16DFC
	0x03A73E14 LDR X8, [X31 + 0x100]
	0x03A73E18 LDP V1, V0, [X31 + 0xE0]
	0x03A73E1C STR X8, [X19 + 0x28]
	0x03A73E20 STUR V0, [X19 + 0x18]
	0x03A73E24 STUR V1, [X19 + 0x8]
	0x03A73E28 LDR X0, [X21]
	0x03A73E2C LDR X20, [X20 + 0x18]
	0x03A73E30 LDR W8, [X0 + 0xE0]
	0x03A73E34 CBNZ W8, 0x3A73E3C
	0x03A73E38 BL 0x1C16DFC
	0x03A73E3C MOV X0, X20
	0x03A73E40 MOV X1, X31
	0x03A73E44 MOV X2, X31
	0x03A73E48 BL 0x3C354F8
	0x03A73E4C TBZ X0, 0x0, 0x3A73EC0
	0x03A73E50 LDR X0, [X22]
	0x03A73E54 ADD X20, X19, 0x8
	0x03A73E58 LDR W8, [X0 + 0xE0]
	0x03A73E5C CBNZ W8, 0x3A73E64
	0x03A73E60 BL 0x1C16DFC
	0x03A73E64 LDR W0, [X19]
	0x03A73E68 ADD X8, X31, 0xE0
	0x03A73E6C MOV X1, X31
	0x03A73E70 BL 0x3C4B258
	0x03A73E74 LDP V0, V1, [X31 + 0xE0]
	0x03A73E78 LDR X8, [X31 + 0x100]
	0x03A73E7C ADD X0, X31, 0x30
	0x03A73E80 ADD X1, X31, 0x0
	0x03A73E84 STP V0, V1, [X31 + 0x30]
	0x03A73E88 STR X8, [X31 + 0x50]
	0x03A73E8C LDR X8, [X20 + 0x20]
	0x03A73E90 LDP V1, V0, [X20]
	0x03A73E94 MOV X2, X31
	0x03A73E98 STR X8, [X31 + 0x20]
	0x03A73E9C STP V1, V0, [X31]
	0x03A73EA0 BL 0x3C4B708
	0x03A73EA4 TBZ X0, 0x0, 0x3A73EC0
	0x03A73EA8 LDR X0, [X22]
	0x03A73EAC LDR W8, [X0 + 0xE0]
	0x03A73EB0 CBNZ W8, 0x3A73EB8
	0x03A73EB4 BL 0x1C16DFC
	0x03A73EB8 MOVN W8, 0x1
	0x03A73EBC STR W8, [X19]
	0x03A73EC0 LDP X20, X19, [X31 + 0x130]
	0x03A73EC4 LDP X22, X21, [X31 + 0x120]
	0x03A73EC8 LDP X29, X30, [X31 + 0x110]
	0x03A73ECC ADD X31, X31, 0x140
	0x03A73ED0 RET
	0x03A73ED4 BL 0x1C16F20
	0x03A73ED8 SUB X31, X31, 0x50
	0x03A73EDC STP X30, X21, [X31 + 0x30]
	0x03A73EE0 STP X20, X19, [X31 + 0x40]
	0x03A73EE4 ADRP X21, 0x96F000
	0x03A73EE8 LDRB W9, [X21 + 0x2BA]
	0x03A73EEC MOV X20, X0
	0x03A73EF0 MOV X19, X8
	0x03A73EF4 TBNZ X9, 0x0, 0x3A73F0C
	0x03A73EF8 ADRP X0, 0x6E3000
	0x03A73EFC LDR X0, [X0 + 0xDC0]
	0x03A73F00 BL 0x1C16CF4
	0x03A73F04 MOVZ W8, 0x1
	0x03A73F08 STRB W8, [X21 + 0x2BA]
	0x03A73F0C LDR X0, [X20 + 0x178]
	0x03A73F10 CBZ X0, 0x3A73F94
	0x03A73F14 MOV X1, X31
	0x03A73F18 BL 0x3984C98
	0x03A73F1C TBZ X0, 0x0, 0x3A73F54
	0x03A73F20 LDR X8, [X20 + 0x178]
	0x03A73F24 CBZ X8, 0x3A73F94
	0x03A73F28 LDR X9, [X8 + 0x50]
	0x03A73F2C LDP V0, V1, [X8 + 0x30]
	0x03A73F30 MOVI V2.2D, 0x0
	0x03A73F34 ADD X1, X31, 0x0
	0x03A73F38 MOV X0, X19
	0x03A73F3C STP V2, V2, [X19 + 0x10]
	0x03A73F40 STR X9, [X31 + 0x20]
	0x03A73F44 STP V0, V1, [X31]
	0x03A73F48 STR V2, [X19]
	0x03A73F4C BL 0x3A73C60
	0x03A73F50 B 0x3A73F84
	0x03A73F54 ADRP X20, 0x6E3000
	0x03A73F58 LDR X20, [X20 + 0xDC0]
	0x03A73F5C LDR X0, [X20]
	0x03A73F60 LDR W8, [X0 + 0xE0]
	0x03A73F64 CBNZ W8, 0x3A73F70
	0x03A73F68 BL 0x1C16DFC
	0x03A73F6C LDR X0, [X20]
	0x03A73F70 LDR X8, [X0 + 0xB8]
	0x03A73F74 LDP V1, V0, [X8 + 0x10]
	0x03A73F78 LDR V2, [X8]
	0x03A73F7C STP V1, V0, [X19 + 0x10]
	0x03A73F80 STR V2, [X19]
	0x03A73F84 LDP X20, X19, [X31 + 0x40]
	0x03A73F88 LDP X30, X21, [X31 + 0x30]
	0x03A73F8C ADD X31, X31, 0x50
	0x03A73F90 RET
	0x03A73F94 BL 0x1C16F20
	0x03A73F98 STR X30, [X31 - 0x30]!
	0x03A73F9C STP X22, X21, [X31 + 0x10]
	0x03A73FA0 STP X20, X19, [X31 + 0x20]
	0x03A73FA4 ADRP X22, 0x96F000
	0x03A73FA8 ADRP X21, 0x6E3000
	0x03A73FAC LDRB W8, [X22 + 0x2BB]
	0x03A73FB0 LDR X21, [X21 + 0xDC0]
	0x03A73FB4 MOV X20, X1
	0x03A73FB8 MOV X19, X0
	0x03A73FBC TBNZ X8, 0x0, 0x3A73FD4
	0x03A73FC0 ADRP X0, 0x6E3000
	0x03A73FC4 LDR X0, [X0 + 0xDC0]
	0x03A73FC8 BL 0x1C16CF4
	0x03A73FCC MOVZ W8, 0x1
	0x03A73FD0 STRB W8, [X22 + 0x2BB]
	0x03A73FD4 MOV X0, X20
	0x03A73FD8 MOV X1, X31
	0x03A73FDC BL 0x3C124EC
	0x03A73FE0 LDR X8, [X21]
	0x03A73FE4 MOV W20, W0
	0x03A73FE8 LDR W9, [X8 + 0xE0]
	0x03A73FEC CBNZ W9, 0x3A73FF8
	0x03A73FF0 MOV X0, X8
	0x03A73FF4 BL 0x1C16DFC
	0x03A73FF8 STR W20, [X19]
	0x03A73FFC LDP X20, X19, [X31 + 0x20]
	0x03A74000 LDP X22, X21, [X31 + 0x10]
	0x03A74004 LDR X30, [X31], #0x30
	0x03A74008 RET
	0x03A7400C STR X30, [X31 - 0x30]!
	0x03A74010 STP X22, X21, [X31 + 0x10]
	0x03A74014 STP X20, X19, [X31 + 0x20]
	0x03A74018 ADRP X21, 0x96E000
	0x03A7401C ADRP X22, 0x6E2000
	0x03A74020 LDRB W8, [X21 + 0x2BC]
	0x03A74024 LDR X22, [X22 + 0xDC0]
	0x03A74028 MOV X20, X1
	0x03A7402C MOV X19, X0
	0x03A74030 TBNZ X8, 0x0, 0x3A74048
	0x03A74034 ADRP X0, 0x6E2000
	0x03A74038 LDR X0, [X0 + 0xDC0]
	0x03A7403C BL 0x1C16CF4
	0x03A74040 MOVZ W8, 0x1
	0x03A74044 STRB W8, [X21 + 0x2BC]
	0x03A74048 LDR X0, [X22]
	0x03A7404C LDR W8, [X0 + 0xE0]
	0x03A74050 CBNZ W8, 0x3A74058
	0x03A74054 BL 0x1C16DFC
	0x03A74058 MOVN W8, 0x1
	0x03A7405C STR W8, [X19]
	0x03A74060 LDR X8, [X20 + 0x20]
	0x03A74064 LDP V1, V0, [X20]
	0x03A74068 LDP X22, X21, [X31 + 0x10]
	0x03A7406C STR X8, [X19 + 0x28]
	0x03A74070 STUR V0, [X19 + 0x18]
	0x03A74074 STUR V1, [X19 + 0x8]
	0x03A74078 LDP X20, X19, [X31 + 0x20]
	0x03A7407C LDR X30, [X31], #0x30
	0x03A74080 RET
	0x03A74084 SUB X31, X31, 0x60
	0x03A74088 STR X30, [X31 + 0x30]
	0x03A7408C STP X22, X21, [X31 + 0x40]
	0x03A74090 STP X20, X19, [X31 + 0x50]
	0x03A74094 ADRP X22, 0x96E000
	0x03A74098 ADRP X21, 0x6E2000
	0x03A7409C MOV X19, X8
	0x03A740A0 LDRB W8, [X22 + 0x2BD]
	0x03A740A4 LDR X21, [X21 + 0xDC0]
	0x03A740A8 MOV X20, X0
	0x03A740AC TBNZ X8, 0x0, 0x3A740C4
	0x03A740B0 ADRP X0, 0x6E2000
	0x03A740B4 LDR X0, [X0 + 0xDC0]
	0x03A740B8 BL 0x1C16CF4
	0x03A740BC MOVZ W8, 0x1

ISIL:
	001 Move [X31-112], D9
	002 Move [X31-104], D8
	003 Move [X31+16], X29
	004 Move [X31+24], X30
	005 Move [X31+32], X28
	006 Move [X31+40], X27
	007 Move [X31+48], X26
	008 Move [X31+56], X25
	009 Move [X31+64], X24
	010 Move [X31+72], X23
	011 Move [X31+80], X22
	012 Move [X31+88], X21
	013 Move [X31+96], X20
	014 Move [X31+104], X19
	015 Subtract X31, X31, 592
	016 Move X25, 0x970000
	017 Move W8, [X25+690]
	018 Move X28, X7
	019 Move V8, V0
	020 Move W21, W6
	021 Move W22, W4
	022 Move W23, W3
	023 Move X24, X2
	024 Move X26, X1
	025 Move X19, X0
	026 Add X20, X31, 144
	027 Move [X31+20], W5
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {52}
	032 Move X0, 0x681000
	033 Move X0, [X0+1432]
	034 Call 0x1C17CF4
	035 Move X0, 0x6E4000
	036 Move X0, [X0+2968]
	037 Call 0x1C17CF4
	038 Move X0, 0x6DE000
	039 Move X0, [X0+2480]
	040 Call 0x1C17CF4
	041 Move X0, 0x6E2000
	042 Move X0, [X0+16]
	043 Call 0x1C17CF4
	044 Move X0, 0x6AA000
	045 Move X0, [X0+2216]
	046 Call 0x1C17CF4
	047 Move X0, 0x681000
	048 Move X0, [X0+2440]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X25+690], W8
	052 NotImplemented "Instruction MOVI not yet implemented."
	053 Move [X31+576], X31
	054 Move [X20+400], V0
	055 Move [X20+408], V0
	056 Move [X20+368], V0
	057 Move [X20+376], V0
	058 Move [X20+336], V0
	059 Move [X20+344], V0
	060 Move [X20+20], V0
	061 Move X29, 0x6E4000
	062 Move X8, [X19]
	063 Move X29, [X29+2968]
	064 Compare X8, 0
	065 JumpIfEqual {91}
	066 Move W9, [X8+168]
	067 Compare W9, 0
	068 JumpIfEqual {91}
	069 Move X25, 0x967000
	070 Move W9, [X25+1935]
	071 NotImplemented "Instruction LDUR not yet implemented."
	072 Compare W9, 0
	073 JumpIfNotEqual {79}
	074 Move X0, 0x689000
	075 Move X0, [X0+3848]
	076 Call 0x1C17CF4
	077 Move W8, 1
	078 Move [X25+1935], W8
	079 Move X8, 0x689000
	080 Move X8, [X8+3848]
	081 Move X8, [X8]
	082 Move X8, [X8+184]
	083 Move V0, [X8]
	084 Move X8, -49844224
	085 Move V1, [X8+3872]
	086 Subtract V0, V9, V0
	087 NotImplemented "Instruction INVALID not yet implemented."
	088 NotImplemented "Instruction FADDP not yet implemented."
	089 NotImplemented "Instruction FCMP not yet implemented."
	090 NotImplemented "Instruction CSET not yet implemented."
	091 Move W27, 1
	092 Move V2, [X24+16]
	093 Move V0, [X24+32]
	094 Move W8, [X24+48]
	095 Move V1, [X24]
	096 Move X0, [X29]
	097 Move [X20+80], V2
	098 Move [X20+88], V0
	099 Move [X31+256], W8
	100 Move [X20+4], V1
	101 Move X25, 0x681000
	102 Move W8, [X0+224]
	103 Move X25, [X25+2440]
	104 Compare W8, 0
	105 JumpIfNotEqual {107}
	106 Call 0x1C17DFC
	107 Move V0, [X20+64]
	108 Move V1, [X20+80]
	109 Move W8, [X31+256]
	110 Move V2, [X20+6]
	111 Move X5, [X25]
	112 Move [X20+256], V0
	113 Move [X20+264], V1
	114 Move [X31+448], W8
	115 Add X8, X31, 464
	116 Add X0, X31, 400
	117 Move S0, W31
	118 Move W1, 2
	119 Move W2, W21
	120 Move W3, W23
	121 Move W4, W22
	122 Move [X20+18], V2
	123 Call RTHandleResourcePool.CreateTextureDesc, X0, X1, X2, V0, X3, X4, X5
	124 Move TEMP, X27
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfEqual {144}
	128 Move X8, 0x6E2000
	129 Move X8, [X8+16]
	130 Move X27, [X19]
	131 Move X0, [X8]
	132 Move W8, [X0+224]
	133 Compare W8, 0
	134 JumpIfNotEqual {136}
	135 Call 0x1C17DFC
	136 Add X1, X31, 464
	137 Move W2, 1
	138 Move X0, X27
	139 Call RenderingUtils.RTHandleNeedsReAlloc, X0, X1, X2
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfNotEqual {299}
	144 Move X8, [X19]
	145 Compare X8, 0
	146 JumpIfEqual {258}
	147 Move X9, 0x681000
	148 Move X9, [X9+1432]
	149 Move X27, [X8+24]
	150 Move X0, [X9]
	151 Move W9, [X0+224]
	152 Compare W9, 0
	153 JumpIfNotEqual {155}
	154 Call 0x1C17DFC
	155 Move X0, X27
	156 Move X1, X31
	157 Move X2, X31
	158 Call Object.op_Inequality, X0, X1
	159 Move TEMP, X0
	160 And TEMP, TEMP, 1
	161 Compare TEMP, 1
	162 JumpIfNotEqual {258}
	163 Move X8, [X19]
	164 Compare X8, 0
	165 JumpIfEqual {317}
	166 Move X0, [X8+24]
	167 Compare X0, 0
	168 JumpIfEqual {317}
	169 Add X8, X31, 208
	170 Move X1, X31
	171 Call RenderTexture.get_descriptor, X0
	172 Move V0, [X20+64]
	173 Move V1, [X20+80]
	174 Move V2, [X20+6]
	175 Move W8, [X31+256]
	176 Move [X20+192], V0
	177 Move [X20+200], V1
	178 Move [X20+14], V2
	179 Move [X31+384], W8
	180 Move X8, [X19]
	181 Compare X8, 0
	182 JumpIfEqual {317}
	183 Move X0, [X8+24]
	184 Compare X0, 0
	185 JumpIfEqual {317}
	186 Move X1, X31
	187 Call Texture.get_anisoLevel, X0
	188 Move X8, [X19]
	189 Compare X8, 0
	190 JumpIfEqual {317}
	191 Move W27, W0
	192 Move X0, [X8+24]
	193 Compare X0, 0
	194 JumpIfEqual {317}
	195 Move X1, X31
	196 Move [X31+8], X26
	197 Call Texture.get_mipMapBias, X0
	198 Move X8, [X19]
	199 Compare X8, 0
	200 JumpIfEqual {317}
	201 Move X0, [X8+24]
	202 Compare X0, 0
	203 JumpIfEqual {317}
	204 Move X1, X31
	205 Move V9, V0
	206 Move X26, X28
	207 Call Texture.get_filterMode, X0
	208 Move X8, [X19]
	209 Compare X8, 0
	210 JumpIfEqual {317}
	211 Move W28, W0
	212 Move X0, [X8+24]
	213 Compare X0, 0
	214 JumpIfEqual {317}
	215 Move X1, X31
	216 Call Texture.get_wrapMode, X0
	217 Move X8, [X29]
	218 Move W29, W0
	219 Move W9, [X8+224]
	220 Compare W9, 0
	221 JumpIfNotEqual {224}
	222 Move X0, X8
	223 Call 0x1C17DFC
	224 Move V0, [X20+192]
	225 Move V1, [X20+208]
	226 Move W8, [X31+384]
	227 Move V2, [X20+14]
	228 Move X5, [X25]
	229 Move [X31+9], V0
	230 Move [X31+192], W8
	231 Add X8, X31, 208
	232 Add X0, X31, 144
	233 Move W1, 2
	234 Move W2, W27
	235 Move V0, V9
	236 Move W3, W28
	237 Move W4, W29
	238 Move [X20+16], V1
	239 Move [X20+24], V2
	240 Call RTHandleResourcePool.CreateTextureDesc, X0, X1, X2, V0, X3, X4, X5
	241 Move X8, 0x6E2000
	242 Move X8, [X8+16]
	243 Move X27, [X19]
	244 Move X0, [X8]
	245 Move W8, [X0+224]
	246 Compare W8, 0
	247 JumpIfNotEqual {249}
	248 Call 0x1C17DFC
	249 Add X0, X31, 24
	250 Add X1, X31, 208
	251 Move W2, 120
	252 Call 0x3EB2AC0
	253 Add X0, X31, 24
	254 Move X1, X27
	255 Call RenderingUtils.AddStaleResourceToPoolOrRelease, X0, X1
	256 Move X28, X26
	257 Move X26, [X31+8]
	258 Move X20, 0x6A9000
	259 Move X20, [X20+2216]
	260 Move X0, [X20]
	261 Move W8, [X0+224]
	262 Compare W8, 0
	263 JumpIfNotEqual {266}
	264 Call 0x1C17DFC
	265 Move X0, [X20]
	266 Move X8, [X0+184]
	267 Move X0, [X8+16]
	268 Compare X0, 0
	269 JumpIfEqual {317}
	270 Add X1, X31, 464
	271 Move W3, 1
	272 Move X2, X19
	273 Move W27, 1
	274 Call RTHandleResourcePool.TryGetResource, X0, X1, X2, X3
	275 Move TEMP, X0
	276 And TEMP, TEMP, 1
	277 Compare TEMP, 1
	278 JumpIfEqual {300}
	279 Move X8, 0x6DD000
	280 Move X8, [X8+2480]
	281 Move X0, [X8]
	282 Move W8, [X0+224]
	283 Compare W8, 0
	284 JumpIfNotEqual {286}
	285 Call 0x1C17DFC
	286 Move W8, [X31+20]
	287 Move X0, X26
	288 Move X1, X24
	289 Move W2, W23
	290 And W4, W8, 1
	291 Move W3, W22
	292 Move W5, W21
	293 Move V0, V8
	294 Move X6, X28
	295 Move X7, X31
	296 Call RTHandles.Alloc, X0, X1, X2, X3, X4, X5, V0, X6
	297 Move W27, 1
	298 Move [X19], X0
	299 Move W27, W31
	300 Move W0, W27
	301 Add X31, X31, 592
	302 Move X20, [X31+96]
	303 Move X19, [X31+104]
	304 Move X22, [X31+80]
	305 Move X21, [X31+88]
	306 Move X24, [X31+64]
	307 Move X23, [X31+72]
	308 Move X26, [X31+48]
	309 Move X25, [X31+56]
	310 Move X28, [X31+32]
	311 Move X27, [X31+40]
	312 Move X29, [X31+16]
	313 Move X30, [X31+24]
	314 Move D9, [X31+112]
	315 Move D8, [X31+120]
	316 Return X0
	317 Call 0x1C17F20

Method: System.Boolean SetMaxRTHandlePoolCapacity(System.Int32 capacity)

Disassembly:
	0x03A740C0 STRB W8, [X22 + 0x2BD]
	0x03A740C4 LDR X0, [X21]
	0x03A740C8 LDR W8, [X0 + 0xE0]
	0x03A740CC CBNZ W8, 0x3A740D4
	0x03A740D0 BL 0x1C16DFC
	0x03A740D4 LDR W8, [X20]
	0x03A740D8 ADDS W31, W8, 0x1
	0x03A740DC B.EQ 0x3A74104
	0x03A740E0 LDR X0, [X21]
	0x03A740E4 LDR W9, [X0 + 0xE0]
	0x03A740E8 CBZ W9, 0x3A7413C
	0x03A740EC ADDS W31, W8, 0x2
	0x03A740F0 B.NE 0x3A7415C
	0x03A740F4 LDR X8, [X20 + 0x28]
	0x03A740F8 LDUR V0, [X20 + 0x18]
	0x03A740FC LDUR V1, [X20 + 0x8]
	0x03A74100 B 0x3A74120
	0x03A74104 ADD X8, X31, 0x8
	0x03A74108 MOVZ W0, 0x2
	0x03A7410C MOV X1, X31
	0x03A74110 BL 0x3C4B204
	0x03A74114 LDR X8, [X31 + 0x28]
	0x03A74118 LDUR V0, [X31 + 0x18]
	0x03A7411C LDUR V1, [X31 + 0x8]
	0x03A74120 STR X8, [X19 + 0x20]
	0x03A74124 STP V1, V0, [X19]
	0x03A74128 LDP X20, X19, [X31 + 0x50]
	0x03A7412C LDP X22, X21, [X31 + 0x40]
	0x03A74130 LDR X30, [X31 + 0x30]
	0x03A74134 ADD X31, X31, 0x60
	0x03A74138 RET
	0x03A7413C BL 0x1C16DFC
	0x03A74140 LDR X0, [X21]
	0x03A74144 LDR W21, [X20]
	0x03A74148 LDR W8, [X0 + 0xE0]
	0x03A7414C CBNZ W8, 0x3A74154
	0x03A74150 BL 0x1C16DFC
	0x03A74154 ADDS W31, W21, 0x2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x96F000
	006 Move X20, 0x6A9000
	007 Move W8, [X21+691]
	008 Move X20, [X20+2216]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x6A9000
	015 Move X0, [X0+2216]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+691], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X21, [X8+16]
	027 Compare X21, 0
	028 JumpIfEqual {42}
	029 Move W9, [X0+224]
	030 Move X8, X21
	031 Compare W9, 0
	032 JumpIfNotEqual {39}
	033 Call 0x1C17DFC
	034 Move X8, [X20]
	035 Move X8, [X8+184]
	036 Move X8, [X8+16]
	037 Compare X8, 0
	038 JumpIfEqual {49}
	039 Move X0, X8
	040 Move W1, W19
	041 Call RTHandleResourcePool.set_staleResourceCapacity, X0, X1
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSET not yet implemented."
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return X0
	049 Call 0x1C17F20

Method: System.Void AddStaleResourceToPoolOrRelease(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc desc, UnityEngine.Rendering.RTHandle handle)

Disassembly:
	0x03A73644 LDR W8, [X21 + 0x18]
	0x03A73648 CBZ W8, 0x3A736FC
	0x03A7364C ADRP X25, 0x6E3000
	0x03A73650 LDR X25, [X25 + 0xD00]
	0x03A73654 MOV X0, X21
	0x03A73658 MOV W1, W31
	0x03A7365C LDR X2, [X25]
	0x03A73660 BL 0x305CF04
	0x03A73664 LDR X8, [X23]
	0x03A73668 AND X23, X0, 0x0
	0x03A7366C LDR W9, [X8 + 0xE0]
	0x03A73670 CBNZ W9, 0x3A7367C
	0x03A73674 MOV X0, X8
	0x03A73678 BL 0x1C16DFC
	0x03A7367C ADD X8, X31, 0xD0
	0x03A73680 MOV X0, X23
	0x03A73684 MOV X1, X22
	0x03A73688 MOV W2, W20
	0x03A7368C BL 0x3A733F8
	0x03A73690 LDR W8, [X21 + 0x18]
	0x03A73694 CMP W8, 0x2
	0x03A73698 B.LT 0x3A736F4
	0x03A7369C ADRP X23, 0x6E1000
	0x03A736A0 LDR X23, [X23 + 0xB8]
	0x03A736A4 MOVZ W20, 0x1
	0x03A736A8 LDR X2, [X25]
	0x03A736AC MOV X0, X21
	0x03A736B0 MOV W1, W20
	0x03A736B4 BL 0x305CF04
	0x03A736B8 LDR X8, [X23]
	0x03A736BC MOV X22, X0
	0x03A736C0 LDR W9, [X8 + 0xE0]
	0x03A736C4 CBNZ W9, 0x3A736D0
	0x03A736C8 MOV X0, X8
	0x03A736CC BL 0x1C16DFC
	0x03A736D0 AND X2, X22, 0x0
	0x03A736D4 ADD X0, X31, 0xD0
	0x03A736D8 MOV W1, W20
	0x03A736DC MOV X3, X31
	0x03A736E0 BL 0x3C538D4
	0x03A736E4 LDR W8, [X21 + 0x18]
	0x03A736E8 ADD W20, W20, 0x1
	0x03A736EC CMP W20, W8
	0x03A736F0 B.LT 0x3A736A8
	0x03A736F4 ADD X1, X31, 0xD0
	0x03A736F8 B 0x3A7376C
	0x03A736FC ADRP X8, 0x680000
	0x03A73700 LDR X8, [X8 + 0xA28]
	0x03A73704 ADRP X25, 0x6E3000
	0x03A73708 ADRP X21, 0x6E3000
	0x03A7370C LDR X0, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x970000
	007 Move X21, 0x6AA000
	008 Move W8, [X22+692]
	009 Move X21, [X21+2216]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x6DE000
	017 Move X0, [X0+2480]
	018 Call 0x1C17CF4
	019 Move X0, 0x6AA000
	020 Move X0, [X0+2216]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+692], W8
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X21]
	030 Move X8, [X0+184]
	031 Move X0, X31
	032 Move X21, [X8+16]
	033 Call Time.get_frameCount
	034 Compare X21, 0
	035 JumpIfEqual {67}
	036 Move W3, W0
	037 Move X0, X21
	038 Move X1, X20
	039 Move X2, X19
	040 Call RTHandleResourcePool.AddResourceToPool, X0, X1, X2, X3
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {51}
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Return 
	051 Move X8, 0x6DE000
	052 Move X8, [X8+2480]
	053 Move X0, [X8]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, X19
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X1, X31
	064 Move X30, [X31+48]
	065 Call RTHandles.Release, X0
	066 Return 
	067 Call 0x1C17F20

Method: UnityEngine.Rendering.DrawingSettings CreateDrawingSettings(UnityEngine.Rendering.ShaderTagId shaderTagId, ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.SortingCriteria sortingCriteria)

Disassembly:
	0x03A743F8 LDR X0, [X0 + 0xDC0]
	0x03A743FC BL 0x1C16CF4
	0x03A74400 MOVZ W8, 0x1
	0x03A74404 STRB W8, [X20 + 0x2C1]
	0x03A74408 LDR X0, [X21]
	0x03A7440C LDR W8, [X0 + 0xE0]
	0x03A74410 CBNZ W8, 0x3A74418
	0x03A74414 BL 0x1C16DFC
	0x03A74418 LDR W0, [X19]
	0x03A7441C LDP X20, X19, [X31 + 0x10]
	0x03A74420 LDP X30, X21, [X31], #0x20
	0x03A74424 RET
	0x03A74428 SUB X31, X31, 0x90
	0x03A7442C STR X30, [X31 + 0x60]
	0x03A74430 STP X22, X21, [X31 + 0x70]
	0x03A74434 STP X20, X19, [X31 + 0x80]
	0x03A74438 ADRP X22, 0x96E000
	0x03A7443C ADRP X21, 0x6E2000
	0x03A74440 LDRB W8, [X22 + 0x2C2]
	0x03A74444 LDR X21, [X21 + 0xDC0]
	0x03A74448 MOV X20, X1
	0x03A7444C MOV X19, X0
	0x03A74450 TBNZ X8, 0x0, 0x3A74468
	0x03A74454 ADRP X0, 0x6E2000
	0x03A74458 LDR X0, [X0 + 0xDC0]
	0x03A7445C BL 0x1C16CF4
	0x03A74460 MOVZ W8, 0x1
	0x03A74464 STRB W8, [X22 + 0x2C2]
	0x03A74468 LDP V1, V0, [X20 + 0x10]
	0x03A7446C LDR V2, [X20]
	0x03A74470 LDR X0, [X21]
	0x03A74474 STP V1, V0, [X31 + 0x40]
	0x03A74478 STR V2, [X31 + 0x3]
	0x03A7447C LDR W8, [X0 + 0xE0]
	0x03A74480 CBNZ W8, 0x3A74488
	0x03A74484 BL 0x1C16DFC
	0x03A74488 LDP V0, V1, [X31 + 0x30]
	0x03A7448C LDR V2, [X31 + 0x5]
	0x03A74490 ADD X1, X31, 0x0
	0x03A74494 MOV X0, X19
	0x03A74498 STP V0, V1, [X31]
	0x03A7449C STR V2, [X31 + 0x2]
	0x03A744A0 BL 0x3A741F0
	0x03A744A4 LDP X20, X19, [X31 + 0x80]
	0x03A744A8 LDP X22, X21, [X31 + 0x70]
	0x03A744AC LDR X30, [X31 + 0x60]
	0x03A744B0 AND W0, W0, 0x1
	0x03A744B4 ADD X31, X31, 0x90
	0x03A744B8 RET
	0x03A744BC SUB X31, X31, 0x90
	0x03A744C0 STR X30, [X31 + 0x60]
	0x03A744C4 STP X22, X21, [X31 + 0x70]
	0x03A744C8 STP X20, X19, [X31 + 0x80]
	0x03A744CC ADRP X22, 0x96E000
	0x03A744D0 ADRP X21, 0x6E2000
	0x03A744D4 LDRB W8, [X22 + 0x2C3]
	0x03A744D8 LDR X21, [X21 + 0xDC0]
	0x03A744DC MOV X20, X1
	0x03A744E0 MOV X19, X0
	0x03A744E4 TBNZ X8, 0x0, 0x3A744FC
	0x03A744E8 ADRP X0, 0x6E2000
	0x03A744EC LDR X0, [X0 + 0xDC0]
	0x03A744F0 BL 0x1C16CF4
	0x03A744F4 MOVZ W8, 0x1
	0x03A744F8 STRB W8, [X22 + 0x2C3]
	0x03A744FC LDP V1, V0, [X20 + 0x10]
	0x03A74500 LDR V2, [X20]
	0x03A74504 LDR X0, [X21]
	0x03A74508 STP V1, V0, [X31 + 0x40]
	0x03A7450C STR V2, [X31 + 0x3]
	0x03A74510 LDR W8, [X0 + 0xE0]
	0x03A74514 CBNZ W8, 0x3A7451C
	0x03A74518 BL 0x1C16DFC
	0x03A7451C LDP V0, V1, [X31 + 0x30]
	0x03A74520 LDR V2, [X31 + 0x5]
	0x03A74524 ADD X1, X31, 0x0
	0x03A74528 MOV X0, X19
	0x03A7452C STP V0, V1, [X31]
	0x03A74530 STR V2, [X31 + 0x2]
	0x03A74534 BL 0x3A741F0
	0x03A74538 LDP X20, X19, [X31 + 0x80]
	0x03A7453C LDP X22, X21, [X31 + 0x70]
	0x03A74540 LDR X30, [X31 + 0x60]
	0x03A74544 ORN W8, W31, W0, 0x0
	0x03A74548 AND W0, W8, 0x1
	0x03A7454C ADD X31, X31, 0x90
	0x03A74550 RET
	0x03A74554 STR X30, [X31 - 0x20]!
	0x03A74558 STP X20, X19, [X31 + 0x10]
	0x03A7455C ADRP X19, 0x96E000
	0x03A74560 ADRP X20, 0x6E2000
	0x03A74564 LDRB W8, [X19 + 0x2C4]
	0x03A74568 LDR X20, [X20 + 0xDC0]
	0x03A7456C TBNZ X8, 0x0, 0x3A74584
	0x03A74570 ADRP X0, 0x6E2000
	0x03A74574 LDR X0, [X0 + 0xDC0]
	0x03A74578 BL 0x1C16CF4
	0x03A7457C MOVZ W8, 0x1
	0x03A74580 STRB W8, [X19 + 0x2C4]
	0x03A74584 LDR X8, [X20]
	0x03A74588 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-80], X29
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Subtract X31, X31, 496
	011 NotImplemented "Instruction MRS not yet implemented."
	012 Move X19, X8
	013 Move X8, [X24+40]
	014 Move X21, 0x96F000
	015 Move X25, 0x6E1000
	016 Move W23, W2
	017 Move [X31+488], X8
	018 Move W8, [X21+693]
	019 Move X25, [X25+184]
	020 Move X20, X1
	021 Move X22, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x6E1000
	027 Move X0, [X0+184]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+693], W8
	031 NotImplemented "Instruction MOVI not yet implemented."
	032 Add X0, X31, 288
	033 Move W2, 196
	034 Move W1, W31
	035 Move [X31+256], V0
	036 Move [X31+264], V0
	037 Move [X31+224], V0
	038 Move [X31+232], V0
	039 Move [X31+192], V0
	040 Move [X31+200], V0
	041 Call 0x3EB2B10
	042 Move X21, [X20+216]
	043 Add X0, X31, 192
	044 Move X2, X31
	045 Move X1, X21
	046 Call SortingSettings..ctor, X0, X1
	047 Add X0, X31, 192
	048 Move W1, W23
	049 Move X2, X31
	050 Call SortingSettings.set_criteria, X0, X1
	051 Add X0, X31, 96
	052 Add X1, X31, 192
	053 Move W2, 96
	054 Call 0x3EB2AC0
	055 Move X0, [X25]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Add X0, X31, 0
	061 Add X1, X31, 96
	062 Move W2, 96
	063 Call 0x3EB2AC0
	064 And X1, X22, 0
	065 Add X0, X31, 288
	066 Add X2, X31, 0
	067 Move X3, X31
	068 Call DrawingSettings..ctor, X0, X1, X2
	069 Move W1, [X20+688]
	070 Add X0, X31, 288
	071 Move X2, X31
	072 Call DrawingSettings.set_perObjectData, X0, X1
	073 Move W1, [X20+552]
	074 Add X0, X31, 288
	075 Move X2, X31
	076 Call DrawingSettings.set_mainLightIndex, X0, X1
	077 Move W1, [X20+684]
	078 Add X0, X31, 288
	079 Move X2, X31
	080 Call DrawingSettings.set_enableDynamicBatching, X0, X1
	081 Compare X21, 0
	082 JumpIfEqual {116}
	083 Move X0, X21
	084 Move X1, X31
	085 Call Camera.get_cameraType, X0
	086 Move X8, [X25]
	087 Move W20, W0
	088 Move W9, [X8+224]
	089 Compare W9, 0
	090 JumpIfNotEqual {93}
	091 Move X0, X8
	092 Call 0x1C17DFC
	093 NotImplemented "Instruction CMP not yet implemented."
	094 NotImplemented "Instruction CSET not yet implemented."
	095 Add X0, X31, 288
	096 Move X2, X31
	097 Call DrawingSettings.set_enableInstancing, X0, X1
	098 Add X1, X31, 288
	099 Move W2, 196
	100 Move X0, X19
	101 Call 0x3EB2AC0
	102 Move X8, [X24+40]
	103 Move X9, [X31+488]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Add X31, X31, 496
	106 Move X20, [X31+64]
	107 Move X19, [X31+72]
	108 Move X22, [X31+48]
	109 Move X21, [X31+56]
	110 Move X24, [X31+32]
	111 Move X23, [X31+40]
	112 Move X30, [X31+16]
	113 Move X25, [X31+24]
	114 Move X29, [X31+80]
	115 Return X0
	116 Call 0x1C17F20
	117 Call 0x3EB2B20

Method: UnityEngine.Rendering.DrawingSettings CreateDrawingSettings(System.Collections.Generic.List`1<UnityEngine.Rendering.ShaderTagId> shaderTagIdList, ref UnityEngine.Rendering.Universal.RenderingData renderingData, UnityEngine.Rendering.SortingCriteria sortingCriteria)

Disassembly:
	0x03A7458C MOVN W9, 0x0
	0x03A74590 MOVI V0.2D, 0x0
	0x03A74594 LDR X8, [X8 + 0xB8]
	0x03A74598 STR W9, [X8]
	0x03A7459C STUR V0, [X8 + 0x4]
	0x03A745A0 STUR V0, [X8 + 0x14]
	0x03A745A4 STR V0, [X8 + 0x2]
	0x03A745A8 LDR X30, [X31], #0x20
	0x03A745AC RET
	0x03A745B0 STR X30, [X31 - 0x20]!
	0x03A745B4 STP X20, X19, [X31 + 0x10]
	0x03A745B8 ADRP X20, 0x96E000
	0x03A745BC ADRP X19, 0x6E2000
	0x03A745C0 LDRB W8, [X20 + 0x2C5]
	0x03A745C4 LDR X19, [X19 + 0xB98]
	0x03A745C8 TBNZ X8, 0x0, 0x3A745E0
	0x03A745CC ADRP X0, 0x6E2000
	0x03A745D0 LDR X0, [X0 + 0xB98]
	0x03A745D4 BL 0x1C16CF4
	0x03A745D8 MOVZ W8, 0x1
	0x03A745DC STRB W8, [X20 + 0x2C5]
	0x03A745E0 LDR X0, [X19]
	0x03A745E4 LDR W8, [X0 + 0xE0]
	0x03A745E8 CBNZ W8, 0x3A745F4
	0x03A745EC BL 0x1C16DFC
	0x03A745F0 LDR X0, [X19]
	0x03A745F4 LDR X8, [X0 + 0xB8]
	0x03A745F8 LDP X20, X19, [X31 + 0x10]
	0x03A745FC LDR W0, [X8 + 0x8]
	0x03A74600 LDR X30, [X31], #0x20
	0x03A74604 RET
	0x03A74608 SUB X31, X31, 0xC0
	0x03A7460C STP X29, X30, [X31 + 0x60]
	0x03A74610 STP X28, X27, [X31 + 0x70]
	0x03A74614 STP X26, X25, [X31 + 0x80]
	0x03A74618 STP X24, X23, [X31 + 0x90]
	0x03A7461C STP X22, X21, [X31 + 0xA0]
	0x03A74620 STP X20, X19, [X31 + 0xB0]
	0x03A74624 ADRP X20, 0x96E000
	0x03A74628 LDRB W8, [X20 + 0x2C9]
	0x03A7462C MOV X19, X0
	0x03A74630 TBNZ X8, 0x0, 0x3A746CC
	0x03A74634 ADRP X0, 0x6E2000
	0x03A74638 LDR X0, [X0 + 0xDC8]
	0x03A7463C BL 0x1C16CF4
	0x03A74640 ADRP X0, 0x6DD000
	0x03A74644 LDR X0, [X0 + 0x60]
	0x03A74648 BL 0x1C16CF4
	0x03A7464C ADRP X0, 0x6DD000
	0x03A74650 LDR X0, [X0 + 0x68]
	0x03A74654 BL 0x1C16CF4
	0x03A74658 ADRP X0, 0x6DD000
	0x03A7465C LDR X0, [X0 + 0x70]
	0x03A74660 BL 0x1C16CF4
	0x03A74664 ADRP X0, 0x6DD000
	0x03A74668 LDR X0, [X0 + 0x78]
	0x03A7466C BL 0x1C16CF4
	0x03A74670 ADRP X0, 0x67F000
	0x03A74674 LDR X0, [X0 + 0xE00]
	0x03A74678 BL 0x1C16CF4
	0x03A7467C ADRP X0, 0x6E2000
	0x03A74680 LDR X0, [X0 + 0xDD0]
	0x03A74684 BL 0x1C16CF4
	0x03A74688 ADRP X0, 0x67F000
	0x03A7468C LDR X0, [X0 + 0xE18]
	0x03A74690 BL 0x1C16CF4
	0x03A74694 ADRP X0, 0x6DD000
	0x03A74698 LDR X0, [X0 + 0x88]
	0x03A7469C BL 0x1C16CF4
	0x03A746A0 ADRP X0, 0x6E2000
	0x03A746A4 LDR X0, [X0 + 0xDD8]
	0x03A746A8 BL 0x1C16CF4
	0x03A746AC ADRP X0, 0x6E2000
	0x03A746B0 LDR X0, [X0 + 0xB98]
	0x03A746B4 BL 0x1C16CF4
	0x03A746B8 ADRP X0, 0x6E2000
	0x03A746BC LDR X0, [X0 + 0xDE0]
	0x03A746C0 BL 0x1C16CF4
	0x03A746C4 MOVZ W8, 0x1
	0x03A746C8 STRB W8, [X20 + 0x2C9]
	0x03A746CC MOVI V0.2D, 0x0
	0x03A746D0 STR X31, [X31 + 0x50]
	0x03A746D4 STP V0, V0, [X31 + 0x30]
	0x03A746D8 LDR X0, [X19 + 0x10]
	0x03A746DC CBZ X0, 0x3A749B4
	0x03A746E0 ADRP X8, 0x6DD000
	0x03A746E4 LDR X8, [X8 + 0x60]
	0x03A746E8 ADRP X28, 0x6DD000
	0x03A746EC ADRP X29, 0x6E2000
	0x03A746F0 ADRP X27, 0x67F000
	0x03A746F4 ADRP X21, 0x67F000
	0x03A746F8 ADRP X23, 0x6E2000
	0x03A746FC LDR X28, [X28 + 0x70]
	0x03A74700 LDR X29, [X29 + 0xDE0]
	0x03A74704 LDR X27, [X27 + 0xE00]
	0x03A74708 LDR X21, [X21 + 0xE18]
	0x03A7470C LDR X23, [X23 + 0xDD0]
	0x03A74710 LDR X1, [X8]
	0x03A74714 ADRP X25, 0x6E2000
	0x03A74718 ADRP X24, 0x6E2000
	0x03A7471C ADRP X26, 0x6DD000
	0x03A74720 LDR X25, [X25 + 0xDC8]
	0x03A74724 LDR X24, [X24 + 0xB98]
	0x03A74728 LDR X26, [X26 + 0x68]
	0x03A7472C ADD X8, X31, 0x8
	0x03A74730 BL 0x2A13AB4
	0x03A74734 LDUR V0, [X31 + 0x8]
	0x03A74738 LDUR V1, [X31 + 0x18]
	0x03A7473C LDR X8, [X31 + 0x28]
	0x03A74740 STP V0, V1, [X31 + 0x30]
	0x03A74744 STR X8, [X31 + 0x50]
	0x03A74748 LDR X1, [X28]
	0x03A7474C ADD X0, X31, 0x30
	0x03A74750 BL 0x2BF5330
	0x03A74754 TBZ X0, 0x0, 0x3A748DC
	0x03A74758 LDR X0, [X31 + 0x48]
	0x03A7475C CBZ X0, 0x3A749B0
	0x03A74760 LDR X1, [X29]
	0x03A74764 BL 0x25EE01C
	0x03A74768 MOV X20, X0
	0x03A7476C CBZ X0, 0x3A748AC
	0x03A74770 LDR X8, [X20]
	0x03A74774 LDR X1, [X21]
	0x03A74778 LDRH W9, [X8 + 0x12E]
	0x03A7477C CBZ X9, 0x3A747A0
	0x03A74780 LDR X10, [X8 + 0xB0]
	0x03A74784 ADD X10, X10, 0x8
	0x03A74788 LDUR X11, [X10 - 0x8]
	0x03A7478C CMP X11, X1
	0x03A74790 B.EQ 0x3A747B0
	0x03A74794 SUBS X9, X9, 0x1
	0x03A74798 ADD X10, X10, 0x10
	0x03A7479C B.NE 0x3A74788
	0x03A747A0 MOV X0, X20
	0x03A747A4 MOV W2, W31

ISIL:
	001 Subtract X31, X31, 496
	002 Move [X31+416], X29
	003 Move [X31+432], X30
	004 Move [X31+440], X25
	005 Move [X31+448], X24
	006 Move [X31+456], X23
	007 Move [X31+464], X22
	008 Move [X31+472], X21
	009 Move [X31+480], X20
	010 Move [X31+488], X19
	011 NotImplemented "Instruction MRS not yet implemented."
	012 Move X9, [X24+40]
	013 Move X23, 0x96F000
	014 Move W20, W2
	015 Move X22, X1
	016 Move [X31+408], X9
	017 Move W9, [X23+694]
	018 Move X21, X0
	019 Move X19, X8
	020 Move TEMP, X9
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {47}
	024 Move X0, 0x680000
	025 Move X0, [X0+2600]
	026 Call 0x1C17CF4
	027 Move X0, 0x6E1000
	028 Move X0, [X0+184]
	029 Call 0x1C17CF4
	030 Move X0, 0x6E3000
	031 Move X0, [X0+3320]
	032 Call 0x1C17CF4
	033 Move X0, 0x6E3000
	034 Move X0, [X0+3328]
	035 Call 0x1C17CF4
	036 Move X0, 0x6E1000
	037 Move X0, [X0+16]
	038 Call 0x1C17CF4
	039 Move X0, 0x6E3000
	040 Move X0, [X0+3424]
	041 Call 0x1C17CF4
	042 Move X0, 0x6E3000
	043 Move X0, [X0+3432]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X23+694], W8
	047 Move X23, 0x6E1000
	048 Move X23, [X23+16]
	049 Add X0, X31, 208
	050 Move W2, 196
	051 Move W1, W31
	052 Call 0x3EB2B10
	053 Compare X21, 0
	054 JumpIfEqual {101}
	055 Move W8, [X21+24]
	056 Compare W8, 0
	057 JumpIfEqual {101}
	058 Move X25, 0x6E3000
	059 Move X25, [X25+3328]
	060 Move X0, X21
	061 Move W1, W31
	062 Move X2, [X25]
	063 Call List`1<ShaderTagId>.get_Item, X0, X1
	064 Move X8, [X23]
	065 And X23, X0, 0
	066 Move W9, [X8+224]
	067 Compare W9, 0
	068 JumpIfNotEqual {71}
	069 Move X0, X8
	070 Call 0x1C17DFC
	071 Add X8, X31, 208
	072 Move X0, X23
	073 Move X1, X22
	074 Move W2, W20
	075 Call RenderingUtils.CreateDrawingSettings, X0, X1, X2
	076 Move W8, [X21+24]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X23, 0x6E1000
	079 Move X23, [X23+184]
	080 Move W20, 1
	081 Move X2, [X25]
	082 Move X0, X21
	083 Move W1, W20
	084 Call List`1<ShaderTagId>.get_Item, X0, X1
	085 Move X8, [X23]
	086 Move X22, X0
	087 Move W9, [X8+224]
	088 Compare W9, 0
	089 JumpIfNotEqual {92}
	090 Move X0, X8
	091 Call 0x1C17DFC
	092 And X2, X22, 0
	093 Add X0, X31, 208
	094 Move W1, W20
	095 Move X3, X31
	096 Call DrawingSettings.SetShaderPassName, X0, X1, X2
	097 Move W8, [X21+24]
	098 Add W20, W20, 1
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Add X1, X31, 208
	101 Move X8, 0x680000
	102 Move X8, [X8+2600]
	103 Move X25, 0x6E3000
	104 Move X21, 0x6E3000
	105 Move X0, [X8]
	106 Move W8, [X0+224]
	107 Move X25, [X25+3424]
	108 Move X21, [X21+3432]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move X0, [X25]
	113 Move X1, X31
	114 Call Debug.LogWarning, X0
	115 Move X1, [X21]
	116 Add X0, X31, 0
	117 Move X2, X31
	118 Move [X31], W31
	119 Call ShaderTagId..ctor, X0, X1
	120 Move X0, [X23]
	121 Move W8, [X0+224]
	122 Compare W8, 0
	123 JumpIfNotEqual {125}
	124 Call 0x1C17DFC
	125 Move W0, [X31]
	126 Add X8, X31, 8
	127 Move X1, X22
	128 Move W2, W20
	129 Call RenderingUtils.CreateDrawingSettings, X0, X1, X2
	130 Add X1, X31, 8
	131 Move W2, 196
	132 Move X0, X19
	133 Call 0x3EB2AC0
	134 Move X8, [X24+40]
	135 Move X9, [X31+408]
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move X20, [X31+480]
	138 Move X19, [X31+488]
	139 Move X22, [X31+464]
	140 Move X21, [X31+472]
	141 Move X24, [X31+448]
	142 Move X23, [X31+456]
	143 Move X30, [X31+432]
	144 Move X25, [X31+440]
	145 Move X29, [X31+416]
	146 Add X31, X31, 496
	147 Return X0
	148 Call 0x3EB2B20

Method: System.Void .cctor()

Disassembly:
	0x03A747A8 BL 0x1C5C788
	0x03A747AC B 0x3A747BC
	0x03A747B0 LDRSW X9, [X10]
	0x03A747B4 ADD X8, X8, X9, 0x4, LSL
	0x03A747B8 ADD X0, X8, 0x138
	0x03A747BC LDP X8, X1, [X0]
	0x03A747C0 MOV X0, X20
	0x03A747C4 BLR X8
	0x03A747C8 TBZ X0, 0x0, 0x3A7483C
	0x03A747CC LDR X8, [X20]
	0x03A747D0 LDR X1, [X23]
	0x03A747D4 LDRH W9, [X8 + 0x12E]
	0x03A747D8 CBZ X9, 0x3A747FC
	0x03A747DC LDR X10, [X8 + 0xB0]
	0x03A747E0 ADD X10, X10, 0x8
	0x03A747E4 LDUR X11, [X10 - 0x8]
	0x03A747E8 CMP X11, X1
	0x03A747EC B.EQ 0x3A7480C
	0x03A747F0 SUBS X9, X9, 0x1
	0x03A747F4 ADD X10, X10, 0x10
	0x03A747F8 B.NE 0x3A747E4
	0x03A747FC MOV X0, X20
	0x03A74800 MOV W2, W31
	0x03A74804 BL 0x1C5C788
	0x03A74808 B 0x3A74818
	0x03A7480C LDRSW X9, [X10]
	0x03A74810 ADD X8, X8, X9, 0x4, LSL
	0x03A74814 ADD X0, X8, 0x138
	0x03A74818 LDP X9, X1, [X0]
	0x03A7481C ADD X8, X31, 0x8
	0x03A74820 MOV X0, X20
	0x03A74824 BLR X9
	0x03A74828 LDR X0, [X31 + 0x10]
	0x03A7482C CBZ X0, 0x3A748A4
	0x03A74830 MOV X1, X31
	0x03A74834 BL 0x39D4B1C
	0x03A74838 B 0x3A74770
	0x03A7483C MOV X22, X31
	0x03A74840 CBZ X20, 0x3A7489C
	0x03A74844 LDR X8, [X20]
	0x03A74848 LDR X1, [X27]
	0x03A7484C LDRH W9, [X8 + 0x12E]
	0x03A74850 CBZ X9, 0x3A74874
	0x03A74854 LDR X10, [X8 + 0xB0]
	0x03A74858 ADD X10, X10, 0x8
	0x03A7485C LDUR X11, [X10 - 0x8]
	0x03A74860 CMP X11, X1
	0x03A74864 B.EQ 0x3A74884
	0x03A74868 SUBS X9, X9, 0x1
	0x03A7486C ADD X10, X10, 0x10
	0x03A74870 B.NE 0x3A7485C
	0x03A74874 MOV X0, X20
	0x03A74878 MOV W2, W31
	0x03A7487C BL 0x1C5C788
	0x03A74880 B 0x3A74890
	0x03A74884 LDRSW X9, [X10]
	0x03A74888 ADD X8, X8, X9, 0x4, LSL
	0x03A7488C ADD X0, X8, 0x138
	0x03A74890 LDP X8, X1, [X0]
	0x03A74894 MOV X0, X20
	0x03A74898 BLR X8
	0x03A7489C CBZ X22, 0x3A74748
	0x03A748A0 B 0x3A749A8
	0x03A748A4 BL 0x1C16F20
	0x03A748A8 B 0x3A749B8
	0x03A748AC BL 0x1C16F20
	0x03A748B0 B 0x3A749B8
	0x03A748B4 B 0x3A748C4
	0x03A748B8 B 0x3A748C4
	0x03A748BC B 0x3A748C4
	0x03A748C0 B 0x3A748C4
	0x03A748C4 CMP W1, 0x1
	0x03A748C8 B.NE 0x3A74934
	0x03A748CC BL 0x3EB1AD0
	0x03A748D0 LDR X22, [X0]
	0x03A748D4 BL 0x3EB1AE0
	0x03A748D8 B 0x3A74840
	0x03A748DC LDR X1, [X26]
	0x03A748E0 ADD X0, X31, 0x30
	0x03A748E4 BL 0x2BF5448
	0x03A748E8 LDR X0, [X19 + 0x10]
	0x03A748EC CBZ X0, 0x3A749B4
	0x03A748F0 LDR X1, [X25]
	0x03A748F4 BL 0x2A13814
	0x03A748F8 LDR X0, [X24]
	0x03A748FC LDR W8, [X0 + 0xE0]
	0x03A74900 CBNZ W8, 0x3A7490C
	0x03A74904 BL 0x1C16DFC
	0x03A74908 LDR X0, [X24]
	0x03A7490C LDR X8, [X0 + 0xB8]
	0x03A74910 LDP X20, X19, [X31 + 0xB0]
	0x03A74914 LDP X22, X21, [X31 + 0xA0]
	0x03A74918 LDP X24, X23, [X31 + 0x90]
	0x03A7491C LDP X26, X25, [X31 + 0x80]
	0x03A74920 LDP X28, X27, [X31 + 0x70]
	0x03A74924 LDP X29, X30, [X31 + 0x60]
	0x03A74928 STR W31, [X8]
	0x03A7492C ADD X31, X31, 0xC0
	0x03A74930 RET
	0x03A74934 MOV X23, X1
	0x03A74938 MOV X21, X0
	0x03A7493C MOV X22, X31
	0x03A74940 CBZ X20, 0x3A7499C
	0x03A74944 LDR X8, [X20]
	0x03A74948 LDR X1, [X27]
	0x03A7494C LDRH W9, [X8 + 0x12E]
	0x03A74950 CBZ X9, 0x3A74974
	0x03A74954 LDR X10, [X8 + 0xB0]
	0x03A74958 ADD X10, X10, 0x8
	0x03A7495C LDUR X11, [X10 - 0x8]
	0x03A74960 CMP X11, X1
	0x03A74964 B.EQ 0x3A74984
	0x03A74968 SUBS X9, X9, 0x1
	0x03A7496C ADD X10, X10, 0x10
	0x03A74970 B.NE 0x3A7495C
	0x03A74974 MOV X0, X20
	0x03A74978 MOV W2, W31
	0x03A7497C BL 0x1C5C788
	0x03A74980 B 0x3A74990
	0x03A74984 LDRSW X9, [X10]
	0x03A74988 ADD X8, X8, X9, 0x4, LSL
	0x03A7498C ADD X0, X8, 0x138
	0x03A74990 LDP X8, X1, [X0]
	0x03A74994 MOV X0, X20
	0x03A74998 BLR X8
	0x03A7499C CBZ X22, 0x3A749E0
	0x03A749A0 MOV X0, X22
	0x03A749A4 BL 0x1C16F18
	0x03A749A8 MOV X0, X22
	0x03A749AC BL 0x1C16F18
	0x03A749B0 BL 0x1C16F20
	0x03A749B4 BL 0x1C16F20
	0x03A749B8 MOV X23, X1
	0x03A749BC MOV X21, X0
	0x03A749C0 CBNZ X20, 0x3A74944
	0x03A749C4 B 0x3A7499C
	0x03A749C8 B 0x3A749D8
	0x03A749CC B 0x3A749D8
	0x03A749D0 B 0x3A749D8
	0x03A749D4 B 0x3A749D8
	0x03A749D8 MOV X23, X1
	0x03A749DC MOV X21, X0
	0x03A749E0 CMP W23, 0x1
	0x03A749E4 B.NE 0x3A74A10
	0x03A749E8 MOV X0, X21
	0x03A749EC BL 0x3EB1AD0
	0x03A749F0 LDR X20, [X0]
	0x03A749F4 BL 0x3EB1AE0
	0x03A749F8 LDR X1, [X26]
	0x03A749FC ADD X0, X31, 0x30
	0x03A74A00 BL 0x2BF5448
	0x03A74A04 CBZ X20, 0x3A748E8
	0x03A74A08 MOV X0, X20
	0x03A74A0C BL 0x1C16F18
	0x03A74A10 MOV X20, X31
	0x03A74A14 B 0x3A74A1C
	0x03A74A18 MOV X21, X0
	0x03A74A1C LDR X1, [X26]
	0x03A74A20 ADD X0, X31, 0x30
	0x03A74A24 BL 0x2BF5448
	0x03A74A28 CBNZ X20, 0x3A74A34
	0x03A74A2C MOV X0, X21
	0x03A74A30 BL 0x1D2C690
	0x03A74A34 MOV X0, X20
	0x03A74A38 BL 0x1C16F18
	0x03A74A3C BL 0x1990590
	0x03A74A40 SUB X31, X31, 0x90
	0x03A74A44 STP X30, X19, [X31 + 0x80]
	0x03A74A48 ADD X0, X31, 0x8
	0x03A74A4C MOVZ W2, 0x78
	0x03A74A50 MOV X19, X1
	0x03A74A54 BL 0x3EB1AC0
	0x03A74A58 ADD X0, X31, 0x8
	0x03A74A5C MOV X1, X31
	0x03A74A60 BL 0x399AA14
	0x03A74A64 LDR X8, [X19 + 0x50]
	0x03A74A68 CBZ X8, 0x3A74A94
	0x03A74A6C LDR X9, [X8]
	0x03A74A70 MOV W19, W0
	0x03A74A74 MOV X0, X8
	0x03A74A78 LDP X10, X1, [X9 + 0x158]
	0x03A74A7C BLR X10
	0x03A74A80 MOVZ W8, 0x17
	0x03A74A84 MADD W0, W19, W8, W0
	0x03A74A88 LDP X30, X19, [X31 + 0x80]
	0x03A74A8C ADD X31, X31, 0x90
	0x03A74A90 RET
	0x03A74A94 BL 0x1C16F20
	0x03A74A98 STR X30, [X31 - 0x30]!
	0x03A74A9C STP X22, X21, [X31 + 0x10]
	0x03A74AA0 STP X20, X19, [X31 + 0x20]
	0x03A74AA4 ADRP X22, 0x96E000
	0x03A74AA8 ADRP X21, 0x6E2000
	0x03A74AAC LDRB W8, [X22 + 0x2CA]
	0x03A74AB0 LDR X21, [X21 + 0xB98]
	0x03A74AB4 MOV W19, W1
	0x03A74AB8 MOV W20, W0
	0x03A74ABC TBNZ X8, 0x0, 0x3A74AD4
	0x03A74AC0 ADRP X0, 0x6E2000
	0x03A74AC4 LDR X0, [X0 + 0xB98]
	0x03A74AC8 BL 0x1C16CF4
	0x03A74ACC MOVZ W8, 0x1
	0x03A74AD0 STRB W8, [X22 + 0x2CA]
	0x03A74AD4 LDR X0, [X21]
	0x03A74AD8 LDR W8, [X0 + 0xE0]
	0x03A74ADC CBNZ W8, 0x3A74AE8
	0x03A74AE0 BL 0x1C16DFC
	0x03A74AE4 LDR X0, [X21]
	0x03A74AE8 LDR X8, [X0 + 0xB8]
	0x03A74AEC LDP X22, X21, [X31 + 0x10]
	0x03A74AF0 LDR W8, [X8 + 0x4]
	0x03A74AF4 ADD W8, W8, W20
	0x03A74AF8 CMP W8, W19
	0x03A74AFC LDP X20, X19, [X31 + 0x20]
	0x03A74B00 CSET W0, LT
	0x03A74B04 LDR X30, [X31], #0x30
	0x03A74B08 RET
	0x03A74B0C SUB X31, X31, 0xE0
	0x03A74B10 STP X29, X30, [X31 + 0x80]
	0x03A74B14 STP X28, X27, [X31 + 0x90]
	0x03A74B18 STP X26, X25, [X31 + 0xA0]
	0x03A74B1C STP X24, X23, [X31 + 0xB0]
	0x03A74B20 STP X22, X21, [X31 + 0xC0]
	0x03A74B24 STP X20, X19, [X31 + 0xD0]
	0x03A74B28 ADRP X20, 0x96E000
	0x03A74B2C LDRB W8, [X20 + 0x2CB]
	0x03A74B30 MOV W19, W1
	0x03A74B34 MOV X27, X0
	0x03A74B38 TBNZ X8, 0x0, 0x3A74C1C
	0x03A74B3C ADRP X0, 0x6DD000
	0x03A74B40 LDR X0, [X0 + 0x60]
	0x03A74B44 BL 0x1C16CF4
	0x03A74B48 ADRP X0, 0x6DD000
	0x03A74B4C LDR X0, [X0 + 0x68]
	0x03A74B50 BL 0x1C16CF4
	0x03A74B54 ADRP X0, 0x6AA000
	0x03A74B58 LDR X0, [X0 + 0xB18]
	0x03A74B5C BL 0x1C16CF4
	0x03A74B60 ADRP X0, 0x6AA000
	0x03A74B64 LDR X0, [X0 + 0xB28]
	0x03A74B68 BL 0x1C16CF4
	0x03A74B6C ADRP X0, 0x6DD000
	0x03A74B70 LDR X0, [X0 + 0x70]
	0x03A74B74 BL 0x1C16CF4
	0x03A74B78 ADRP X0, 0x6DD000
	0x03A74B7C LDR X0, [X0 + 0x78]
	0x03A74B80 BL 0x1C16CF4
	0x03A74B84 ADRP X0, 0x6AA000
	0x03A74B88 LDR X0, [X0 + 0xB38]
	0x03A74B8C BL 0x1C16CF4
	0x03A74B90 ADRP X0, 0x6DD000
	0x03A74B94 LDR X0, [X0 + 0x80]
	0x03A74B98 BL 0x1C16CF4
	0x03A74B9C ADRP X0, 0x6A7000
	0x03A74BA0 LDR X0, [X0 + 0x7A8]
	0x03A74BA4 BL 0x1C16CF4
	0x03A74BA8 ADRP X0, 0x6DD000
	0x03A74BAC LDR X0, [X0 + 0x88]
	0x03A74BB0 BL 0x1C16CF4
	0x03A74BB4 ADRP X0, 0x680000
	0x03A74BB8 LDR X0, [X0 + 0xE10]
	0x03A74BBC BL 0x1C16CF4
	0x03A74BC0 ADRP X0, 0x686000
	0x03A74BC4 LDR X0, [X0 + 0x858]
	0x03A74BC8 BL 0x1C16CF4
	0x03A74BCC ADRP X0, 0x6AA000
	0x03A74BD0 LDR X0, [X0 + 0xB50]
	0x03A74BD4 BL 0x1C16CF4
	0x03A74BD8 ADRP X0, 0x6E2000
	0x03A74BDC LDR X0, [X0 + 0xB98]
	0x03A74BE0 BL 0x1C16CF4
	0x03A74BE4 ADRP X0, 0x6DD000
	0x03A74BE8 LDR X0, [X0 + 0x98]
	0x03A74BEC BL 0x1C16CF4
	0x03A74BF0 ADRP X0, 0x6DD000
	0x03A74BF4 LDR X0, [X0 + 0xA0]
	0x03A74BF8 BL 0x1C16CF4
	0x03A74BFC ADRP X0, 0x6DD000
	0x03A74C00 LDR X0, [X0 + 0xA8]
	0x03A74C04 BL 0x1C16CF4
	0x03A74C08 ADRP X0, 0x6DD000
	0x03A74C0C LDR X0, [X0 + 0xB0]
	0x03A74C10 BL 0x1C16CF4
	0x03A74C14 MOVZ W8, 0x1
	0x03A74C18 STRB W8, [X20 + 0x2CB]
	0x03A74C1C MOVI V0.2D, 0x0

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+160], X30
	003 Move [X31+176], X24
	004 Move [X31+184], X23
	005 Move [X31+192], X22
	006 Move [X31+200], X21
	007 Move [X31+208], X20
	008 Move [X31+216], X19
	009 Move X21, 0x96F000
	010 Move X22, 0x6E1000
	011 Move X19, 0x6E1000
	012 Move X20, 0x6E3000
	013 Move W8, [X21+695]
	014 Move X22, [X22+96]
	015 Move X19, [X19+104]
	016 Move X20, [X20+3440]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {65}
	021 Move X0, 0x6E3000
	022 Move X0, [X0+3448]
	023 Call 0x1C17CF4
	024 Move X0, 0x6E3000
	025 Move X0, [X0+3456]
	026 Call 0x1C17CF4
	027 Move X0, 0x6E3000
	028 Move X0, [X0+3464]
	029 Call 0x1C17CF4
	030 Move X0, 0x6E3000
	031 Move X0, [X0+3472]
	032 Call 0x1C17CF4
	033 Move X0, 0x6E1000
	034 Move X0, [X0+112]
	035 Call 0x1C17CF4
	036 Move X0, 0x6E1000
	037 Move X0, [X0+104]
	038 Call 0x1C17CF4
	039 Move X0, 0x6E1000
	040 Move X0, [X0+96]
	041 Call 0x1C17CF4
	042 Move X0, 0x6E1000
	043 Move X0, [X0+16]
	044 Call 0x1C17CF4
	045 Move X0, 0x6E3000
	046 Move X0, [X0+3480]
	047 Call 0x1C17CF4
	048 Move X0, 0x6E3000
	049 Move X0, [X0+3488]
	050 Call 0x1C17CF4
	051 Move X0, 0x6E3000
	052 Move X0, [X0+3496]
	053 Call 0x1C17CF4
	054 Move X0, 0x6E3000
	055 Move X0, [X0+3504]
	056 Call 0x1C17CF4
	057 Move X0, 0x6E3000
	058 Move X0, [X0+3440]
	059 Call 0x1C17CF4
	060 Move X0, 0x6E3000
	061 Move X0, [X0+3512]
	062 Call 0x1C17CF4
	063 Move W8, 1
	064 Move [X21+695], W8
	065 Move X0, [X22]
	066 Call 0x1C17F10
	067 Move X1, [X19]
	068 Move X19, X0
	069 Call List`1<ShaderTagId>..ctor, X0
	070 Move X1, [X20]
	071 Add X0, X31, 168
	072 Move X2, X31
	073 Move [X31+168], W31
	074 Call ShaderTagId..ctor, X0, X1
	075 Compare X19, 0
	076 JumpIfEqual {293}
	077 Move X20, 0x6E1000
	078 Move X20, [X20+112]
	079 Move W10, [X19+28]
	080 Move W1, [X31+168]
	081 Move X8, [X19+16]
	082 Move X9, [X20]
	083 Add W10, W10, 1
	084 Move [X19+28], W10
	085 Compare X8, 0
	086 JumpIfEqual {293}
	087 NotImplemented "Instruction LDRSW not yet implemented."
	088 Move W11, [X8+24]
	089 Move X21, 0x6E3000
	090 Move X21, [X21+3480]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Add W9, W10, 1
	093 Add X8, X8, X10
	094 Move [X19+24], W9
	095 Move [X8+32], W1
	096 Move X8, [X9+32]
	097 Move X0, X19
	098 Move X8, [X8+192]
	099 Move X2, [X8+112]
	100 Call List`1<ShaderTagId>.AddWithResize, X0, X1
	101 Move X1, [X21]
	102 Add X0, X31, 152
	103 Move X2, X31
	104 Move [X31+152], W31
	105 Call ShaderTagId..ctor, X0, X1
	106 Move W10, [X19+28]
	107 Move W1, [X31+152]
	108 Move X8, [X19+16]
	109 Move X9, [X20]
	110 Add W10, W10, 1
	111 Move [X19+28], W10
	112 Compare X8, 0
	113 JumpIfEqual {293}
	114 NotImplemented "Instruction LDRSW not yet implemented."
	115 Move W11, [X8+24]
	116 Move X21, 0x6E3000
	117 Move X21, [X21+3496]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Add W9, W10, 1
	120 Add X8, X8, X10
	121 Move [X19+24], W9
	122 Move [X8+32], W1
	123 Move X8, [X9+32]
	124 Move X0, X19
	125 Move X8, [X8+192]
	126 Move X2, [X8+112]
	127 Call List`1<ShaderTagId>.AddWithResize, X0, X1
	128 Move X1, [X21]
	129 Add X0, X31, 144
	130 Move X2, X31
	131 Move [X31+144], W31
	132 Call ShaderTagId..ctor, X0, X1
	133 Move W10, [X19+28]
	134 Move W1, [X31+144]
	135 Move X8, [X19+16]
	136 Move X9, [X20]
	137 Add W10, W10, 1
	138 Move [X19+28], W10
	139 Compare X8, 0
	140 JumpIfEqual {293}
	141 NotImplemented "Instruction LDRSW not yet implemented."
	142 Move W11, [X8+24]
	143 Move X21, 0x6E3000
	144 Move X21, [X21+3512]
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Add W9, W10, 1
	147 Add X8, X8, X10
	148 Move [X19+24], W9
	149 Move [X8+32], W1
	150 Move X8, [X9+32]
	151 Move X0, X19
	152 Move X8, [X8+192]
	153 Move X2, [X8+112]
	154 Call List`1<ShaderTagId>.AddWithResize, X0, X1
	155 Move X1, [X21]
	156 Add X0, X31, 136
	157 Move X2, X31
	158 Move [X31+136], W31
	159 Call ShaderTagId..ctor, X0, X1
	160 Move W10, [X19+28]
	161 Move W1, [X31+136]
	162 Move X8, [X19+16]
	163 Move X9, [X20]
	164 Add W10, W10, 1
	165 Move [X19+28], W10
	166 Compare X8, 0
	167 JumpIfEqual {293}
	168 NotImplemented "Instruction LDRSW not yet implemented."
	169 Move W11, [X8+24]
	170 Move X21, 0x6E3000
	171 Move X21, [X21+3488]
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Add W9, W10, 1
	174 Add X8, X8, X10
	175 Move [X19+24], W9
	176 Move [X8+32], W1
	177 Move X8, [X9+32]
	178 Move X0, X19
	179 Move X8, [X8+192]
	180 Move X2, [X8+112]
	181 Call List`1<ShaderTagId>.AddWithResize, X0, X1
	182 Move X1, [X21]
	183 Add X0, X31, 128
	184 Move X2, X31
	185 Move [X31+128], W31
	186 Call ShaderTagId..ctor, X0, X1
	187 Move W10, [X19+28]
	188 Move W1, [X31+128]
	189 Move X8, [X19+16]
	190 Move X9, [X20]
	191 Add W10, W10, 1
	192 Move [X19+28], W10
	193 Compare X8, 0
	194 JumpIfEqual {293}
	195 NotImplemented "Instruction LDRSW not yet implemented."
	196 Move W11, [X8+24]
	197 Move X21, 0x6E3000
	198 Move X21, [X21+3504]
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Add W9, W10, 1
	201 Add X8, X8, X10
	202 Move [X19+24], W9
	203 Move [X8+32], W1
	204 Move X8, [X9+32]
	205 Move X0, X19
	206 Move X8, [X8+192]
	207 Move X2, [X8+112]
	208 Call List`1<ShaderTagId>.AddWithResize, X0, X1
	209 Move X1, [X21]
	210 Add X0, X31, 120
	211 Move X2, X31
	212 Move [X31+120], W31
	213 Call ShaderTagId..ctor, X0, X1
	214 Move W10, [X19+28]
	215 Move W1, [X31+120]
	216 Move X8, [X19+16]
	217 Move X9, [X20]
	218 Add W10, W10, 1
	219 Move [X19+28], W10
	220 Compare X8, 0
	221 JumpIfEqual {293}
	222 Move X20, 0x6E1000
	223 Move X20, [X20+16]
	224 NotImplemented "Instruction LDRSW not yet implemented."
	225 Move W11, [X8+24]
	226 Move X24, 0x6E3000
	227 Move X23, 0x6E3000
	228 Move X22, 0x6E3000
	229 Move X21, 0x6E3000
	230 Move X24, [X24+3464]
	231 Move X23, [X23+3456]
	232 Move X22, [X22+3472]
	233 Move X21, [X21+3448]
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Add W9, W10, 1
	236 Add X8, X8, X10
	237 Move [X19+24], W9
	238 Move [X8+32], W1
	239 Move X8, [X9+32]
	240 Move X0, X19
	241 Move X8, [X8+192]
	242 Move X2, [X8+112]
	243 Call List`1<ShaderTagId>.AddWithResize, X0, X1
	244 Move X8, [X20]
	245 NotImplemented "Instruction MOVI not yet implemented."
	246 Add X0, X31, 0
	247 Move W1, W31
	248 Move X8, [X8+184]
	249 Move X2, X31
	250 Move [X8], X19
	251 Move [X31+112], X31
	252 Move [X31+80], V0
	253 Move [X31+88], V0
	254 Move [X31+48], V0
	255 Move [X31+56], V0
	256 Move [X31+16], V0
	257 Move [X31+24], V0
	258 Move [X31], V0
	259 Call AttachmentDescriptor..ctor, X0, X1
	260 Move X19, [X20]
	261 Add X1, X31, 0
	262 Move W2, 120
	263 Move X8, [X19+184]
	264 Add X0, X8, 8
	265 Call 0x3EB2AC0
	266 Move X8, [X19+184]
	267 Move [X8+128], X31
	268 Move X0, [X24]
	269 Call 0x1C17F10
	270 Move X1, [X23]
	271 Move X19, X0
	272 Call Dictionary`2<Int32Enum, Boolean>..ctor, X0
	273 Move X8, [X20]
	274 Move X8, [X8+184]
	275 Move [X8+144], X19
	276 Move X0, [X22]
	277 Call 0x1C17F10
	278 Move X1, [X21]
	279 Move X19, X0
	280 Call Dictionary`2<Int32Enum, Object>..ctor, X0
	281 Move X8, [X20]
	282 Move X22, [X31+192]
	283 Move X21, [X31+200]
	284 Move X24, [X31+176]
	285 Move X23, [X31+184]
	286 Move X30, [X31+160]
	287 Move X8, [X8+184]
	288 Move [X8+152], X19
	289 Move X20, [X31+208]
	290 Move X19, [X31+216]
	291 Add X31, X31, 224
	292 Return 
	293 Call 0x1C17F20

