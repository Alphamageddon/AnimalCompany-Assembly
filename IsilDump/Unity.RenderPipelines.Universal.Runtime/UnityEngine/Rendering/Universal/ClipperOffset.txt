Type: UnityEngine.Rendering.Universal.ClipperOffset

Method: System.Double get_ArcTolerance()

Disassembly:
	0x03A10774 MOV V0.16B, V10.16B
	0x03A10778 SUBS W22, W22, 0x1

ISIL:
	001 Move V0, [X0+144]
	002 Return V0

Method: System.Void set_ArcTolerance(System.Double value)

Disassembly:
	0x03A1077C B.EQ 0x3A10F04
	0x03A10780 LDP X0, X24, [X19 + 0x18]

ISIL:
	001 Move [X0+144], D0
	002 Return 

Method: System.Void .ctor(System.Double arcTolerance = 0.25)

Disassembly:
	0x03A10784 MOV V10.16B, V0.16B
	0x03A10788 CBNZ X0, 0x3A10620
	0x03A1078C B 0x3A10F70
	0x03A10790 CMP W23, 0x3
	0x03A10794 B.LT 0x3A10F64
	0x03A10798 LDR W8, [X21 + 0x28]
	0x03A1079C CBNZ W8, 0x3A10F64
	0x03A107A0 B 0x3A105D0
	0x03A107A4 LDR X0, [X19 + 0x28]
	0x03A107A8 CBZ X0, 0x3A10F70
	0x03A107AC LDR W8, [X0 + 0x1C]
	0x03A107B0 MOV W1, W23
	0x03A107B4 ADD W8, W8, 0x1
	0x03A107B8 STP W31, W8, [X0 + 0x18]
	0x03A107BC ADRP X8, 0x744000
	0x03A107C0 LDR X8, [X8 + 0x480]
	0x03A107C4 LDR X2, [X8]
	0x03A107C8 BL 0x2FB4520
	0x03A107CC CMP W22, 0x1
	0x03A107D0 B.LT 0x3A108A8
	0x03A107D4 MOVZ W24, 0x1
	0x03A107D8 LDR X0, [X19 + 0x18]
	0x03A107DC CBZ X0, 0x3A10F70
	0x03A107E0 LDR X2, [X28]
	0x03A107E4 LDR X25, [X19 + 0x28]
	0x03A107E8 SUB W1, W24, 0x1
	0x03A107EC ADD X8, X31, 0x120
	0x03A107F0 BL 0x2FE4360
	0x03A107F4 LDP V0, V1, [X31 + 0x120]
	0x03A107F8 LDR V2, [X31 + 0x14]
	0x03A107FC STP V0, V1, [X31 + 0x150]
	0x03A10800 STR V2, [X31 + 0x17]
	0x03A10804 LDR X0, [X19 + 0x18]
	0x03A10808 CBZ X0, 0x3A10F70
	0x03A1080C LDR X2, [X28]
	0x03A10810 ADD X8, X31, 0x120
	0x03A10814 MOV W1, W24
	0x03A10818 BL 0x2FE4360
	0x03A1081C LDP V0, V1, [X31 + 0x120]
	0x03A10820 LDP V2, V3, [X31 + 0x140]
	0x03A10824 LDP V4, V5, [X31 + 0x160]
	0x03A10828 ADD X0, X31, 0xB0
	0x03A1082C ADD X1, X31, 0x80
	0x03A10830 STP V0, V1, [X31 + 0x80]
	0x03A10834 STP V2, V3, [X31 + 0xA0]
	0x03A10838 STP V4, V5, [X31 + 0xC0]
	0x03A1083C BL 0x3A10164
	0x03A10840 CBZ X25, 0x3A10F70
	0x03A10844 ADRP X9, 0x744000

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x9D2000
	009 Move X23, 0x745000
	010 Move X20, 0x745000
	011 Move X21, 0x745000
	012 Move W8, [X22+4006]
	013 Move X23, [X23+1112]
	014 Move X20, [X20+1120]
	015 Move X21, [X21+824]
	016 Move V8, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0x745000
	023 Move X0, [X0+1120]
	024 Call 0x1C17CF4
	025 Move X0, 0x745000
	026 Move X0, [X0+1112]
	027 Call 0x1C17CF4
	028 Move X0, 0x745000
	029 Move X0, [X0+824]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X22+4006], W8
	033 Move X0, [X23]
	034 Call 0x1C17F10
	035 Move X1, [X20]
	036 Move X20, X0
	037 Call List`1<DoublePoint>..ctor, X0
	038 Move [X19+40], X20
	039 Move X0, [X21]
	040 Call 0x1C17F10
	041 Move X1, X31
	042 Move X20, X0
	043 Call PolyNode..ctor, X0
	044 Move X0, X19
	045 Move X1, X31
	046 Move [X19+136], X20
	047 Call Object..ctor, X0
	048 Move TEMP, 0
	049 Not TEMP
	050 Move X8, TEMP
	051 Move [X19+144], D8
	052 Move [X19+96], X8
	053 Move X20, [X31+48]
	054 Move X19, [X31+56]
	055 Move X22, [X31+32]
	056 Move X21, [X31+40]
	057 Move X30, [X31+16]
	058 Move X23, [X31+24]
	059 Move V8, [X31+64]
	060 Return 

Method: System.Void Clear()

Disassembly:
	0x03A10848 LDR W10, [X25 + 0x1C]
	0x03A1084C LDR X8, [X25 + 0x10]
	0x03A10850 LDR X9, [X9 + 0x468]
	0x03A10854 ADD W10, W10, 0x1
	0x03A10858 LDR X9, [X9]
	0x03A1085C STR W10, [X25 + 0x1C]
	0x03A10860 CBZ X8, 0x3A10F70
	0x03A10864 LDRSW X10, [X25 + 0x18]
	0x03A10868 LDR W11, [X8 + 0x18]
	0x03A1086C CMP W10, W11
	0x03A10870 B.CS 0x3A10888
	0x03A10874 ADD W9, W10, 0x1
	0x03A10878 ADD X8, X8, X10, 0x4, LSL
	0x03A1087C STR W9, [X25 + 0x18]
	0x03A10880 STP D0, D1, [X8 + 0x20]
	0x03A10884 B 0x3A1089C
	0x03A10888 LDR X8, [X9 + 0x20]
	0x03A1088C MOV X0, X25
	0x03A10890 LDR X8, [X8 + 0xC0]
	0x03A10894 LDR X1, [X8 + 0x70]
	0x03A10898 BL 0x2FB49A8
	0x03A1089C ADD W24, W24, 0x1
	0x03A108A0 CMP W23, W24
	0x03A108A4 B.NE 0x3A107D8
	0x03A108A8 LDR W8, [X21 + 0x28]
	0x03A108AC LDR X24, [X19 + 0x28]
	0x03A108B0 CMP W8, 0x1
	0x03A108B4 B.HI 0x3A10924
	0x03A108B8 LDR X0, [X19 + 0x18]
	0x03A108BC CBZ X0, 0x3A10F70

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x9D2000
	005 Move W8, [X20+4007]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x745000
	012 Move X0, [X0+312]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4007], W8
	016 Move X8, [X19+136]
	017 Compare X8, 0
	018 JumpIfEqual {40}
	019 Move X8, [X8+48]
	020 Compare X8, 0
	021 JumpIfEqual {40}
	022 Move W2, [X8+24]
	023 Move W9, [X8+28]
	024 Add W9, W9, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move [X8+24], W31
	027 Move [X8+28], W9
	028 Move X0, [X8+16]
	029 Move W1, W31
	030 Move X3, X31
	031 Call Array.Clear, X0, X1, X2
	032 Move TEMP, 0
	033 Not TEMP
	034 Move X8, TEMP
	035 Move [X19+96], X8
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Return 
	040 Call 0x1C17F20

Method: System.Int64 Round(System.Double value)

Disassembly:
	0x03A108C0 LDR X2, [X28]
	0x03A108C4 ADD X8, X31, 0x120
	0x03A108C8 MOV W1, W22
	0x03A108CC BL 0x2FE4360
	0x03A108D0 LDP V0, V1, [X31 + 0x120]
	0x03A108D4 LDR V2, [X31 + 0x14]
	0x03A108D8 STP V0, V1, [X31 + 0x150]
	0x03A108DC STR V2, [X31 + 0x17]
	0x03A108E0 LDR X0, [X19 + 0x18]
	0x03A108E4 CBZ X0, 0x3A10F70
	0x03A108E8 LDR X2, [X28]
	0x03A108EC ADD X8, X31, 0x120
	0x03A108F0 MOV W1, W31

ISIL:
	001 Move D1, -0.5
	002 Move D2, 0.5
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Move X8, 0x7FF00000
	005 Add D1, D0, D1
	006 Add D0, D0, D2
	007 Move D2, X8
	008 NotImplemented "Instruction FCSEL not yet implemented."
	009 NotImplemented "Instruction FCVTZS not yet implemented."
	010 NotImplemented "Instruction FCMP not yet implemented."
	011 Move X9, 0x80000000
	012 NotImplemented "Instruction CSEL not yet implemented."
	013 Return X0

Method: System.Void AddPath(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> path, UnityEngine.Rendering.Universal.JoinType joinType, UnityEngine.Rendering.Universal.EndType endType)

Disassembly:
	0x03A108F4 BL 0x2FE4360
	0x03A108F8 LDP V0, V1, [X31 + 0x120]
	0x03A108FC LDP V2, V3, [X31 + 0x140]
	0x03A10900 LDP V4, V5, [X31 + 0x160]
	0x03A10904 ADD X0, X31, 0x50
	0x03A10908 ADD X1, X31, 0x20
	0x03A1090C STP V0, V1, [X31 + 0x20]
	0x03A10910 STP V2, V3, [X31 + 0x40]
	0x03A10914 STP V4, V5, [X31 + 0x60]
	0x03A10918 BL 0x3A10164
	0x03A1091C CBNZ X24, 0x3A1094C
	0x03A10920 B 0x3A10F70
	0x03A10924 CBZ X24, 0x3A10F70
	0x03A10928 LDR X2, [X29]
	0x03A1092C SUB W1, W23, 0x2
	0x03A10930 MOV X0, X24
	0x03A10934 BL 0x2FB46A4
	0x03A10938 ADD X0, X31, 0x150
	0x03A1093C MOV X1, X31
	0x03A10940 STP X31, X31, [X31 + 0x150]
	0x03A10944 BL 0x3A03AA4
	0x03A10948 LDP D0, D1, [X31 + 0x150]
	0x03A1094C ADRP X9, 0x744000
	0x03A10950 LDR W10, [X24 + 0x1C]
	0x03A10954 LDR X8, [X24 + 0x10]
	0x03A10958 LDR X9, [X9 + 0x468]
	0x03A1095C ADD W10, W10, 0x1
	0x03A10960 LDR X9, [X9]
	0x03A10964 STR W10, [X24 + 0x1C]
	0x03A10968 CBZ X8, 0x3A10F70
	0x03A1096C LDRSW X10, [X24 + 0x18]
	0x03A10970 LDR W11, [X8 + 0x18]
	0x03A10974 CMP W10, W11
	0x03A10978 B.CS 0x3A10990
	0x03A1097C ADD W9, W10, 0x1
	0x03A10980 ADD X8, X8, X10, 0x4, LSL
	0x03A10984 STR W9, [X24 + 0x18]
	0x03A10988 STP D0, D1, [X8 + 0x20]
	0x03A1098C B 0x3A109A4
	0x03A10990 LDR X8, [X9 + 0x20]
	0x03A10994 MOV X0, X24
	0x03A10998 LDR X8, [X8 + 0xC0]
	0x03A1099C LDR X1, [X8 + 0x70]
	0x03A109A0 BL 0x2FB49A8
	0x03A109A4 LDR W8, [X21 + 0x28]
	0x03A109A8 CMP W8, 0x1
	0x03A109AC B.EQ 0x3A10B70
	0x03A109B0 CBNZ W8, 0x3A10BF0
	0x03A109B4 CMP W23, 0x1
	0x03A109B8 STR W22, [X31 + 0x11C]
	0x03A109BC B.LT 0x3A10F04
	0x03A109C0 MOV W22, W31
	0x03A109C4 LDR W3, [X21 + 0x24]
	0x03A109C8 ADD X2, X31, 0x11C
	0x03A109CC MOV X0, X19
	0x03A109D0 MOV W1, W22
	0x03A109D4 BL 0x3A10FA4
	0x03A109D8 ADD W22, W22, 0x1
	0x03A109DC CMP W23, W22
	0x03A109E0 B.NE 0x3A109C4
	0x03A109E4 B 0x3A10F04
	0x03A109E8 FCMP D12, D13
	0x03A109EC MOVZ X23, 0x7FF00000
	0x03A109F0 B.LT 0x3A10F04
	0x03A109F4 LDR X0, [X19 + 0x18]
	0x03A109F8 CBZ X0, 0x3A10F70
	0x03A109FC FMOV D9, 1
	0x03A10A00 FMOV D10, X31
	0x03A10A04 MOVZ W22, 0x2
	0x03A10A08 LDR X2, [X28]
	0x03A10A0C ADD X8, X31, 0x150
	0x03A10A10 MOV W1, W31
	0x03A10A14 BL 0x2FE4360
	0x03A10A18 LDR X0, [X19 + 0x18]
	0x03A10A1C CBZ X0, 0x3A10F70
	0x03A10A20 LDR V0, [X31 + 0x158]
	0x03A10A24 FMUL D1, D9, D8
	0x03A10A28 LDR X2, [X28]
	0x03A10A2C FMOV D11, X23
	0x03A10A30 SCVTF D0, D0
	0x03A10A34 FADD D0, D1, D0
	0x03A10A38 FADD D1, D0, D14
	0x03A10A3C FADD D2, D0, D15
	0x03A10A40 FCMP D0, 0x0
	0x03A10A44 FCSEL D0, D2, D1, MI
	0x03A10A48 FCVTZS X8, D0
	0x03A10A4C FCMP D0, D11
	0x03A10A50 CSEL X21, X27, X8, EQ
	0x03A10A54 ADD X8, X31, 0x150
	0x03A10A58 MOV W1, W31
	0x03A10A5C BL 0x2FE4360
	0x03A10A60 LDR V0, [X31 + 0x160]
	0x03A10A64 FMUL D1, D10, D8
	0x03A10A68 MOVI V3.2D, 0x0
	0x03A10A6C ADD X0, X31, 0xE0
	0x03A10A70 SCVTF D0, D0
	0x03A10A74 FADD D0, D1, D0
	0x03A10A78 FADD D1, D0, D14
	0x03A10A7C FADD D2, D0, D15
	0x03A10A80 FCMP D0, 0x0
	0x03A10A84 FCSEL D0, D2, D1, MI
	0x03A10A88 FCVTZS X8, D0
	0x03A10A8C FCMP D0, D11
	0x03A10A90 CSEL X2, X27, X8, EQ
	0x03A10A94 MOV X1, X21
	0x03A10A98 MOV X3, X31
	0x03A10A9C STP V3, V3, [X31 + 0xF0]
	0x03A10AA0 STR V3, [X31 + 0xE]
	0x03A10AA4 BL 0x3A04370
	0x03A10AA8 CBZ X24, 0x3A10F70
	0x03A10AAC LDP V0, V1, [X31 + 0xE0]
	0x03A10AB0 LDR V2, [X31 + 0x10]
	0x03A10AB4 ADRP X10, 0x744000
	0x03A10AB8 STP V0, V1, [X31 + 0x120]
	0x03A10ABC STR V2, [X31 + 0x14]
	0x03A10AC0 LDR W9, [X24 + 0x1C]
	0x03A10AC4 LDR X8, [X24 + 0x10]
	0x03A10AC8 LDR X10, [X10 + 0x310]
	0x03A10ACC ADD W9, W9, 0x1
	0x03A10AD0 LDR X10, [X10]
	0x03A10AD4 STR W9, [X24 + 0x1C]
	0x03A10AD8 CBZ X8, 0x3A10F70
	0x03A10ADC LDRSW X9, [X24 + 0x18]
	0x03A10AE0 LDR W11, [X8 + 0x18]
	0x03A10AE4 CMP W9, W11
	0x03A10AE8 B.CS 0x3A10B10
	0x03A10AEC ADD W10, W9, 0x1
	0x03A10AF0 STR W10, [X24 + 0x18]
	0x03A10AF4 LDP V1, V0, [X31 + 0x130]
	0x03A10AF8 LDR V2, [X31 + 0x12]
	0x03A10AFC MOVZ W10, 0x30
	0x03A10B00 MADD X8, X9, X10, X8
	0x03A10B04 STP V1, V0, [X8 + 0x30]
	0x03A10B08 STR V2, [X8 + 0x2]
	0x03A10B0C B 0x3A10B38
	0x03A10B10 LDR X8, [X10 + 0x20]
	0x03A10B14 LDP V0, V1, [X31 + 0x120]
	0x03A10B18 LDR V2, [X31 + 0x14]
	0x03A10B1C ADD X1, X31, 0x150
	0x03A10B20 LDR X8, [X8 + 0xC0]
	0x03A10B24 MOV X0, X24
	0x03A10B28 LDR X2, [X8 + 0x70]
	0x03A10B2C STP V0, V1, [X31 + 0x150]
	0x03A10B30 STR V2, [X31 + 0x17]
	0x03A10B34 BL 0x2FE46FC
	0x03A10B38 SCVTF D0, W22
	0x03A10B3C FCMP D12, D0
	0x03A10B40 B.LT 0x3A10F04
	0x03A10B44 LDP D1, D0, [X19 + 0x40]
	0x03A10B48 LDP X0, X24, [X19 + 0x18]
	0x03A10B4C ADD W22, W22, 0x1
	0x03A10B50 FMUL D2, D10, D0
	0x03A10B54 FMUL D3, D9, D1
	0x03A10B58 FMUL D0, D9, D0
	0x03A10B5C FMUL D1, D10, D1
	0x03A10B60 FADD D10, D2, D3
	0x03A10B64 FSUB D9, D0, D1
	0x03A10B68 CBNZ X0, 0x3A10A08
	0x03A10B6C B 0x3A10F70
	0x03A10B70 CMP W23, 0x1
	0x03A10B74 STR W22, [X31 + 0x118]
	0x03A10B78 B.LT 0x3A10BA0
	0x03A10B7C MOV W24, W31
	0x03A10B80 LDR W3, [X21 + 0x24]
	0x03A10B84 ADD X2, X31, 0x118
	0x03A10B88 MOV X0, X19
	0x03A10B8C MOV W1, W24
	0x03A10B90 BL 0x3A10FA4
	0x03A10B94 ADD W24, W24, 0x1
	0x03A10B98 CMP W23, W24
	0x03A10B9C B.NE 0x3A10B80
	0x03A10BA0 LDR X0, [X19 + 0x10]
	0x03A10BA4 CBZ X0, 0x3A10F70
	0x03A10BA8 ADRP X9, 0x744000
	0x03A10BAC LDR X1, [X19 + 0x20]
	0x03A10BB0 LDR W10, [X0 + 0x1C]
	0x03A10BB4 LDR X8, [X0 + 0x10]
	0x03A10BB8 LDR X9, [X9 + 0x308]
	0x03A10BBC ADD W10, W10, 0x1
	0x03A10BC0 LDR X9, [X9]
	0x03A10BC4 STR W10, [X0 + 0x1C]
	0x03A10BC8 CBZ X8, 0x3A10F70
	0x03A10BCC LDRSW X10, [X0 + 0x18]
	0x03A10BD0 LDR W11, [X8 + 0x18]
	0x03A10BD4 CMP W10, W11
	0x03A10BD8 B.CS 0x3A10DC4
	0x03A10BDC ADD W9, W10, 0x1
	0x03A10BE0 ADD X8, X8, X10, 0x3, LSL
	0x03A10BE4 STR W9, [X0 + 0x18]
	0x03A10BE8 STR X1, [X8 + 0x20]
	0x03A10BEC B 0x3A10DD4
	0x03A10BF0 CMP W22, 0x2
	0x03A10BF4 STR W31, [X31 + 0x114]
	0x03A10BF8 B.LT 0x3A10C20
	0x03A10BFC MOVZ W24, 0x2
	0x03A10C00 LDR W3, [X21 + 0x24]
	0x03A10C04 SUB W1, W24, 0x1
	0x03A10C08 ADD X2, X31, 0x114
	0x03A10C0C MOV X0, X19
	0x03A10C10 BL 0x3A10FA4
	0x03A10C14 ADD W24, W24, 0x1
	0x03A10C18 CMP W23, W24
	0x03A10C1C B.NE 0x3A10C00
	0x03A10C20 LDR X24, [X19 + 0x28]
	0x03A10C24 STR X31, [X19 + 0x38]
	0x03A10C28 CBZ X24, 0x3A10F70
	0x03A10C2C LDR X2, [X29]
	0x03A10C30 MOV X0, X24
	0x03A10C34 MOV W1, W22
	0x03A10C38 BL 0x2FB46A4
	0x03A10C3C LDR X0, [X19 + 0x28]
	0x03A10C40 CBZ X0, 0x3A10F70
	0x03A10C44 LDR X2, [X29]
	0x03A10C48 MOV W1, W22
	0x03A10C4C MOV V9.16B, V0.16B
	0x03A10C50 SUB W23, W23, 0x2
	0x03A10C54 BL 0x2FB46A4
	0x03A10C58 FNEG D0, D9
	0x03A10C5C FNEG D1, D1
	0x03A10C60 ADD X0, X31, 0x150
	0x03A10C64 MOV X1, X31
	0x03A10C68 STP X31, X31, [X31 + 0x150]
	0x03A10C6C BL 0x3A03A9C
	0x03A10C70 ADRP X8, 0x744000
	0x03A10C74 LDP D0, D1, [X31 + 0x150]
	0x03A10C78 LDR X8, [X8 + 0x488]
	0x03A10C7C MOV X0, X24
	0x03A10C80 MOV W1, W22
	0x03A10C84 LDR X2, [X8]
	0x03A10C88 BL 0x2FB46FC
	0x03A10C8C MOV X0, X19
	0x03A10C90 MOV W1, W22
	0x03A10C94 MOV W2, W23
	0x03A10C98 BL 0x3A11838
	0x03A10C9C LDR X24, [X19 + 0x28]
	0x03A10CA0 MOV W25, W22
	0x03A10CA4 CBZ X24, 0x3A10F70
	0x03A10CA8 CMP W25, 0x0
	0x03A10CAC B.LE 0x3A10D1C
	0x03A10CB0 LDR X2, [X29]
	0x03A10CB4 SUB W25, W25, 0x1
	0x03A10CB8 MOV X0, X24
	0x03A10CBC MOV W1, W25
	0x03A10CC0 BL 0x2FB46A4
	0x03A10CC4 LDR X0, [X19 + 0x28]
	0x03A10CC8 CBZ X0, 0x3A10F70
	0x03A10CCC LDR X2, [X29]
	0x03A10CD0 MOV W1, W25
	0x03A10CD4 MOV V9.16B, V0.16B
	0x03A10CD8 BL 0x2FB46A4
	0x03A10CDC FNEG D0, D9
	0x03A10CE0 FNEG D1, D1
	0x03A10CE4 ADD X0, X31, 0x150
	0x03A10CE8 MOV X1, X31
	0x03A10CEC STP X31, X31, [X31 + 0x150]
	0x03A10CF0 BL 0x3A03A9C
	0x03A10CF4 ADRP X8, 0x744000
	0x03A10CF8 LDP D0, D1, [X31 + 0x150]
	0x03A10CFC LDR X8, [X8 + 0x488]
	0x03A10D00 ADD W1, W25, 0x1
	0x03A10D04 MOV X0, X24
	0x03A10D08 LDR X2, [X8]
	0x03A10D0C BL 0x2FB46FC
	0x03A10D10 LDR X24, [X19 + 0x28]
	0x03A10D14 CBNZ X24, 0x3A10CA8
	0x03A10D18 B 0x3A10F70
	0x03A10D1C LDR X2, [X29]
	0x03A10D20 MOVZ W1, 0x1
	0x03A10D24 MOV X0, X24
	0x03A10D28 BL 0x2FB46A4
	0x03A10D2C LDR X0, [X19 + 0x28]
	0x03A10D30 CBZ X0, 0x3A10F70
	0x03A10D34 LDR X2, [X29]
	0x03A10D38 MOVZ W1, 0x1
	0x03A10D3C MOV V9.16B, V0.16B
	0x03A10D40 BL 0x2FB46A4
	0x03A10D44 FNEG D0, D9
	0x03A10D48 FNEG D1, D1
	0x03A10D4C ADD X0, X31, 0x150
	0x03A10D50 MOV X1, X31
	0x03A10D54 STP X31, X31, [X31 + 0x150]
	0x03A10D58 BL 0x3A03A9C
	0x03A10D5C ADRP X8, 0x744000
	0x03A10D60 LDP D0, D1, [X31 + 0x150]
	0x03A10D64 LDR X8, [X8 + 0x488]
	0x03A10D68 MOV X0, X24
	0x03A10D6C MOV W1, W31
	0x03A10D70 LDR X2, [X8]
	0x03A10D74 BL 0x2FB46FC
	0x03A10D78 CMP W23, 0x1
	0x03A10D7C STR W22, [X31 + 0x114]
	0x03A10D80 B.LT 0x3A10DA4
	0x03A10D84 LDR W3, [X21 + 0x24]
	0x03A10D88 SUB W22, W22, 0x1
	0x03A10D8C ADD X2, X31, 0x114
	0x03A10D90 MOV X0, X19
	0x03A10D94 MOV W1, W22
	0x03A10D98 BL 0x3A10FA4
	0x03A10D9C CMP W22, 0x1
	0x03A10DA0 B.GT 0x3A10D84
	0x03A10DA4 MOVZ W8, 0x1
	0x03A10DA8 MOVZ W2, 0x1
	0x03A10DAC MOV X0, X19
	0x03A10DB0 MOV W1, W31
	0x03A10DB4 STR W8, [X31 + 0x114]
	0x03A10DB8 STR X31, [X19 + 0x38]
	0x03A10DBC BL 0x3A11838
	0x03A10DC0 B 0x3A10F04
	0x03A10DC4 LDR X8, [X9 + 0x20]
	0x03A10DC8 LDR X8, [X8 + 0xC0]
	0x03A10DCC LDR X2, [X8 + 0x70]
	0x03A10DD0 BL 0x301BF90
	0x03A10DD4 ADRP X8, 0x744000
	0x03A10DD8 LDR X8, [X8 + 0x168]
	0x03A10DDC LDR X0, [X8]
	0x03A10DE0 BL 0x1C16F10
	0x03A10DE4 ADRP X8, 0x744000
	0x03A10DE8 LDR X8, [X8 + 0x170]
	0x03A10DEC MOV X24, X0
	0x03A10DF0 LDR X1, [X8]
	0x03A10DF4 BL 0x2FE3E58
	0x03A10DF8 LDR X0, [X19 + 0x28]
	0x03A10DFC STR X24, [X19 + 0x20]
	0x03A10E00 CBZ X0, 0x3A10F70
	0x03A10E04 LDR X2, [X29]
	0x03A10E08 MOV W1, W22
	0x03A10E0C BL 0x2FB46A4
	0x03A10E10 LDR X24, [X19 + 0x28]
	0x03A10E14 MOV V9.16B, V0.16B
	0x03A10E18 CMP W22, 0x1
	0x03A10E1C MOV V10.16B, V1.16B
	0x03A10E20 B.LT 0x3A10E9C
	0x03A10E24 MOV W25, W23
	0x03A10E28 CBZ X24, 0x3A10F70
	0x03A10E2C LDR X2, [X29]
	0x03A10E30 SUB W26, W25, 0x2
	0x03A10E34 MOV X0, X24
	0x03A10E38 MOV W1, W26
	0x03A10E3C BL 0x2FB46A4
	0x03A10E40 LDR X0, [X19 + 0x28]
	0x03A10E44 CBZ X0, 0x3A10F70
	0x03A10E48 LDR X2, [X29]
	0x03A10E4C MOV W1, W26
	0x03A10E50 MOV V11.16B, V0.16B
	0x03A10E54 SUB W25, W25, 0x1
	0x03A10E58 BL 0x2FB46A4
	0x03A10E5C FNEG D0, D11
	0x03A10E60 FNEG D1, D1
	0x03A10E64 ADD X0, X31, 0x150
	0x03A10E68 MOV X1, X31
	0x03A10E6C STP X31, X31, [X31 + 0x150]
	0x03A10E70 BL 0x3A03A9C
	0x03A10E74 ADRP X8, 0x744000
	0x03A10E78 LDP D0, D1, [X31 + 0x150]
	0x03A10E7C LDR X8, [X8 + 0x488]
	0x03A10E80 MOV X0, X24

ISIL:
	001 Subtract X31, X31, 448
	002 Move [X31+352], X29
	003 Move [X31+360], X30
	004 Move [X31+368], X28
	005 Move [X31+376], X27
	006 Move [X31+384], X26
	007 Move [X31+392], X25
	008 Move [X31+400], X24
	009 Move [X31+408], X23
	010 Move [X31+416], X22
	011 Move [X31+424], X21
	012 Move [X31+432], X20
	013 Move [X31+440], X19
	014 Move X19, 0x9D2000
	015 Move W8, [X19+4008]
	016 Move W21, W3
	017 Move W24, W2
	018 Move X22, X1
	019 Move X25, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {44}
	024 Move X0, 0x745000
	025 Move X0, [X0+784]
	026 Call 0x1C17CF4
	027 Move X0, 0x745000
	028 Move X0, [X0+512]
	029 Call 0x1C17CF4
	030 Move X0, 0x745000
	031 Move X0, [X0+528]
	032 Call 0x1C17CF4
	033 Move X0, 0x745000
	034 Move X0, [X0+336]
	035 Call 0x1C17CF4
	036 Move X0, 0x745000
	037 Move X0, [X0+816]
	038 Call 0x1C17CF4
	039 Move X0, 0x745000
	040 Move X0, [X0+824]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X19+4008], W8
	044 Compare X22, 0
	045 JumpIfEqual {417}
	046 Move W23, [X22+24]
	047 Subtract W28, W23, 1
	048 Move X8, 0x745000
	049 Move X8, [X8+824]
	050 Move X0, [X8]
	051 Call 0x1C17F10
	052 Move X1, X31
	053 Move X20, X0
	054 Call PolyNode..ctor, X0
	055 Compare X20, 0
	056 JumpIfEqual {417}
	057 Move X27, 0x745000
	058 Move X27, [X27+528]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move [X20+36], W24
	061 Move [X20+40], W21
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X2, [X27]
	064 Add X8, X31, 256
	065 Move X0, X22
	066 Move W1, W31
	067 Subtract W23, W23, 1
	068 Call List`1<IntPoint>.get_Item, X0, X1
	069 Move V0, [X31+256]
	070 Move V1, [X31+272]
	071 Move V2, [X31+18]
	072 Move X2, [X27]
	073 Add X8, X31, 256
	074 Move X0, X22
	075 Move W1, W23
	076 Move [X31+304], V0
	077 Move [X31+312], V1
	078 Move [X31+21], V2
	079 Call List`1<IntPoint>.get_Item, X0, X1
	080 Move V0, [X31+256]
	081 Move V1, [X31+272]
	082 Move V2, [X31+288]
	083 Move V3, [X31+304]
	084 Move V4, [X31+320]
	085 Move V5, [X31+336]
	086 Add X0, X31, 208
	087 Add X1, X31, 160
	088 Move X2, X31
	089 Move [X31+160], V0
	090 Move [X31+168], V1
	091 Move [X31+192], V2
	092 Move [X31+200], V3
	093 Move [X31+224], V4
	094 Move [X31+232], V5
	095 Call IntPoint.op_Equality, X0, X1
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {102}
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move W28, W31
	102 Move W28, W23
	103 Move X0, [X20+24]
	104 Compare X0, 0
	105 JumpIfEqual {417}
	106 Move X8, 0x745000
	107 Move X8, [X8+816]
	108 Add W1, W28, 1
	109 Move X2, [X8]
	110 Call List`1<IntPoint>.set_Capacity, X0, X1
	111 Move X2, [X27]
	112 Move X23, [X20+24]
	113 Add X8, X31, 304
	114 Move X0, X22
	115 Move W1, W31
	116 Call List`1<IntPoint>.get_Item, X0, X1
	117 Move V0, [X31+304]
	118 Move V1, [X31+320]
	119 Move V2, [X31+21]
	120 Move [X31+112], V0
	121 Move [X31+120], V1
	122 Move [X31+9], V2
	123 Compare X23, 0
	124 JumpIfEqual {417}
	125 Move V0, [X31+112]
	126 Move V1, [X31+128]
	127 Move V2, [X31+9]
	128 Move X29, 0x745000
	129 Move X29, [X29+784]
	130 Move [X31+256], V0
	131 Move [X31+264], V1
	132 Move [X31+18], V2
	133 Move W9, [X23+28]
	134 Move X8, [X23+16]
	135 Move X10, [X29]
	136 Add W9, W9, 1
	137 Move [X23+28], W9
	138 Compare X8, 0
	139 JumpIfEqual {417}
	140 NotImplemented "Instruction LDRSW not yet implemented."
	141 Move W11, [X8+24]
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Add W10, W9, 1
	144 Move [X23+24], W10
	145 Move V2, [X31+272]
	146 Move V0, [X31+288]
	147 Move V1, [X31+16]
	148 Move W10, 48
	149 NotImplemented "Instruction MADD not yet implemented."
	150 Move [X8+48], V2
	151 Move [X8+56], V0
	152 Move [X8+2], V1
	153 Move X8, [X10+32]
	154 Move V0, [X31+256]
	155 Move V1, [X31+272]
	156 Move V2, [X31+18]
	157 Add X1, X31, 304
	158 Move X8, [X8+192]
	159 Move X0, X23
	160 Move X2, [X8+112]
	161 Move [X31+304], V0
	162 Move [X31+312], V1
	163 Move [X31+21], V2
	164 Call List`1<IntPoint>.AddWithResize, X0, X1
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move [X31+8], X25
	167 Move W24, W31
	168 Move W23, W31
	169 Move W25, 1
	170 Move W19, 48
	171 Move X0, [X20+24]
	172 Compare X0, 0
	173 JumpIfEqual {417}
	174 Move X2, [X27]
	175 Add X8, X31, 256
	176 Move W1, W24
	177 Call List`1<IntPoint>.get_Item, X0, X1
	178 Move V0, [X31+256]
	179 Move V1, [X31+272]
	180 Move V2, [X31+18]
	181 Move X2, [X27]
	182 Add X8, X31, 256
	183 Move X0, X22
	184 Move W1, W25
	185 Move [X31+304], V0
	186 Move [X31+312], V1
	187 Move [X31+21], V2
	188 Call List`1<IntPoint>.get_Item, X0, X1
	189 Move V0, [X31+256]
	190 Move V1, [X31+272]
	191 Move V2, [X31+288]
	192 Move V3, [X31+304]
	193 Move V4, [X31+320]
	194 Move V5, [X31+336]
	195 Add X0, X31, 64
	196 Add X1, X31, 16
	197 Move X2, X31
	198 Move [X31+16], V0
	199 Move [X31+24], V1
	200 Move [X31+48], V2
	201 Move [X31+56], V3
	202 Move [X31+80], V4
	203 Move [X31+88], V5
	204 Call IntPoint.op_Inequality, X0, X1
	205 Move TEMP, X0
	206 And TEMP, TEMP, 1
	207 Compare TEMP, 1
	208 JumpIfNotEqual {308}
	209 Move X2, [X27]
	210 Move X26, [X20+24]
	211 Add X8, X31, 304
	212 Move X0, X22
	213 Move W1, W25
	214 Call List`1<IntPoint>.get_Item, X0, X1
	215 Move V0, [X31+304]
	216 Move V1, [X31+320]
	217 Move V2, [X31+21]
	218 Move [X31+112], V0
	219 Move [X31+120], V1
	220 Move [X31+9], V2
	221 Compare X26, 0
	222 JumpIfEqual {417}
	223 Move V0, [X31+112]
	224 Move V1, [X31+128]
	225 Move V2, [X31+9]
	226 Move X10, [X29]
	227 Move [X31+256], V0
	228 Move [X31+264], V1
	229 Move [X31+18], V2
	230 Move W9, [X26+28]
	231 Move X8, [X26+16]
	232 Add W9, W9, 1
	233 Move [X26+28], W9
	234 Compare X8, 0
	235 JumpIfEqual {417}
	236 NotImplemented "Instruction LDRSW not yet implemented."
	237 Move W11, [X8+24]
	238 NotImplemented "Instruction CMP not yet implemented."
	239 Add W10, W9, 1
	240 Move [X26+24], W10
	241 Move V1, [X31+272]
	242 Move V0, [X31+288]
	243 Move V2, [X31+16]
	244 NotImplemented "Instruction NOP not yet implemented."
	245 NotImplemented "Instruction MADD not yet implemented."
	246 Move [X8+48], V1
	247 Move [X8+56], V0
	248 Move [X8+2], V2
	249 Move X8, [X10+32]
	250 Move V0, [X31+256]
	251 Move V1, [X31+272]
	252 Move V2, [X31+18]
	253 Add X1, X31, 304
	254 Move X8, [X8+192]
	255 Move X0, X26
	256 Move X2, [X8+112]
	257 Move [X31+304], V0
	258 Move [X31+312], V1
	259 Move [X31+21], V2
	260 Call List`1<IntPoint>.AddWithResize, X0, X1
	261 Move X2, [X27]
	262 Add X8, X31, 304
	263 Move X0, X22
	264 Move W1, W25
	265 Call List`1<IntPoint>.get_Item, X0, X1
	266 Move X0, [X20+24]
	267 Compare X0, 0
	268 JumpIfEqual {417}
	269 Move X2, [X27]
	270 Move X26, [X31+320]
	271 Add X8, X31, 304
	272 Move W1, W23
	273 Add W24, W24, 1
	274 Call List`1<IntPoint>.get_Item, X0, X1
	275 Move X8, [X31+320]
	276 NotImplemented "Instruction CMP not yet implemented."
	277 Move W23, W24
	278 Move X2, [X27]
	279 Add X8, X31, 304
	280 Move X0, X22
	281 Move W1, W25
	282 Call List`1<IntPoint>.get_Item, X0, X1
	283 Move X0, [X20+24]
	284 Compare X0, 0
	285 JumpIfEqual {417}
	286 Move X2, [X27]
	287 Move X26, [X31+320]
	288 Add X8, X31, 304
	289 Move W1, W23
	290 Call List`1<IntPoint>.get_Item, X0, X1
	291 Move X8, [X31+320]
	292 NotImplemented "Instruction CMP not yet implemented."
	293 Move X2, [X27]
	294 Add X8, X31, 304
	295 Move X0, X22
	296 Move W1, W25
	297 Call List`1<IntPoint>.get_Item, X0, X1
	298 Move X0, [X20+24]
	299 Compare X0, 0
	300 JumpIfEqual {417}
	301 Move X2, [X27]
	302 Move X26, [X31+312]
	303 Add X8, X31, 304
	304 Move W1, W23
	305 Call List`1<IntPoint>.get_Item, X0, X1
	306 Move X8, [X31+312]
	307 NotImplemented "Instruction CMP not yet implemented."
	308 Add W25, W25, 1
	309 NotImplemented "Instruction CMP not yet implemented."
	310 Move W23, W31
	311 Move W24, W31
	312 NotImplemented "Instruction CMP not yet implemented."
	313 Move X24, [X31+8]
	314 Compare W21, 0
	315 JumpIfEqual {385}
	316 Move X0, [X24+136]
	317 Compare X0, 0
	318 JumpIfEqual {417}
	319 Move X1, X20
	320 Move X2, X31
	321 Call PolyNode.AddChild, X0, X1
	322 Compare W21, 0
	323 JumpIfNotEqual {385}
	324 Move X0, [X24+136]
	325 Compare X0, 0
	326 JumpIfEqual {417}
	327 Move X1, [X24+96]
	328 Add X19, X24, 88
	329 Move TEMP, X1
	330 And TEMP, TEMP, 1
	331 Compare TEMP, 1
	332 JumpIfEqual {367}
	333 Move X0, [X0+48]
	334 Compare X0, 0
	335 JumpIfEqual {417}
	336 Move X8, 0x745000
	337 Move X8, [X8+336]
	338 Move X2, [X8]
	339 Call List`1<Object>.get_Item, X0, X1
	340 Compare X0, 0
	341 JumpIfEqual {417}
	342 Move X0, [X0+24]
	343 Compare X0, 0
	344 JumpIfEqual {417}
	345 Move W1, [X24+104]
	346 Move X2, [X27]
	347 Add X8, X31, 304
	348 Call List`1<IntPoint>.get_Item, X0, X1
	349 Move X0, [X20+24]
	350 Compare X0, 0
	351 JumpIfEqual {417}
	352 Move X2, [X27]
	353 Move X21, [X31+312]
	354 Move X22, [X31+320]
	355 Add X8, X31, 304
	356 Move W1, W23
	357 Call List`1<IntPoint>.get_Item, X0, X1
	358 Move X8, [X31+320]
	359 NotImplemented "Instruction CMP not yet implemented."
	360 Move X0, [X24+136]
	361 Compare X0, 0
	362 JumpIfEqual {417}
	363 Move X1, X31
	364 Call PolyNode.get_ChildCount, X0
	365 NotImplemented "Instruction MOVI not yet implemented."
	366 Subtract W8, W0, 1
	367 Move X1, X31
	368 Call PolyNode.get_ChildCount, X0
	369 NotImplemented "Instruction MOVI not yet implemented."
	370 Subtract W8, W0, 1
	371 Move X1, W8
	372 Move X2, W23
	373 Add X0, X31, 304
	374 Move X3, X31
	375 Move [X31+320], V0
	376 Move [X31+328], V0
	377 Move [X31+19], V0
	378 Call IntPoint..ctor, X0, X1, X2
	379 Move V1, [X31+320]
	380 Move V0, [X31+336]
	381 Move V2, [X31+19]
	382 Move [X19+16], V1
	383 Move [X19+24], V0
	384 Move [X19], V2
	385 Move X20, [X31+432]
	386 Move X19, [X31+440]
	387 Move X22, [X31+416]
	388 Move X21, [X31+424]
	389 Move X24, [X31+400]
	390 Move X23, [X31+408]
	391 Move X26, [X31+384]
	392 Move X25, [X31+392]
	393 Move X28, [X31+368]
	394 Move X27, [X31+376]
	395 Move X29, [X31+352]
	396 Move X30, [X31+360]
	397 Add X31, X31, 448
	398 Return 
	399 Move X0, [X20+24]
	400 Compare X0, 0
	401 JumpIfEqual {417}
	402 Move X2, [X27]
	403 Add X8, X31, 304
	404 Move W1, W23
	405 Call List`1<IntPoint>.get_Item, X0, X1
	406 Move X8, [X31+320]
	407 NotImplemented "Instruction CMP not yet implemented."
	408 Move X0, [X20+24]
	409 Compare X0, 0
	410 JumpIfEqual {417}
	411 Move X2, [X27]
	412 Add X8, X31, 304
	413 Move W1, W23
	414 Call List`1<IntPoint>.get_Item, X0, X1
	415 Move X8, [X31+312]
	416 NotImplemented "Instruction CMP not yet implemented."
	417 Call 0x1C17F20

Method: System.Void AddPaths(System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> paths, UnityEngine.Rendering.Universal.JoinType joinType, UnityEngine.Rendering.Universal.EndType endType)

Disassembly:
	0x03A10E84 MOV W1, W25
	0x03A10E88 LDR X2, [X8]
	0x03A10E8C BL 0x2FB46FC
	0x03A10E90 LDR X24, [X19 + 0x28]
	0x03A10E94 CMP W25, 0x1
	0x03A10E98 B.GT 0x3A10E28
	0x03A10E9C FNEG D0, D9
	0x03A10EA0 FNEG D1, D10
	0x03A10EA4 ADD X0, X31, 0x150
	0x03A10EA8 MOV X1, X31
	0x03A10EAC STP X31, X31, [X31 + 0x150]
	0x03A10EB0 BL 0x3A03A9C
	0x03A10EB4 CBZ X24, 0x3A10F70
	0x03A10EB8 ADRP X8, 0x744000
	0x03A10EBC LDP D0, D1, [X31 + 0x150]
	0x03A10EC0 LDR X8, [X8 + 0x488]
	0x03A10EC4 MOV X0, X24
	0x03A10EC8 MOV W1, W31
	0x03A10ECC LDR X2, [X8]
	0x03A10ED0 BL 0x2FB46FC
	0x03A10ED4 STR W31, [X31 + 0x118]
	0x03A10ED8 ADRP X26, 0x744000
	0x03A10EDC LDR X26, [X26 + 0x150]
	0x03A10EE0 TBNZ X22, 0x1F, 0x3A10F04
	0x03A10EE4 LDR W3, [X21 + 0x24]
	0x03A10EE8 SUB W23, W23, 0x1
	0x03A10EEC ADD X2, X31, 0x118
	0x03A10EF0 MOV X0, X19
	0x03A10EF4 MOV W1, W23
	0x03A10EF8 BL 0x3A10FA4
	0x03A10EFC CMP W23, 0x0
	0x03A10F00 B.GT 0x3A10EE4
	0x03A10F04 LDR X0, [X19 + 0x10]
	0x03A10F08 CBZ X0, 0x3A10F70
	0x03A10F0C ADRP X9, 0x744000
	0x03A10F10 LDR X1, [X19 + 0x20]
	0x03A10F14 LDR W10, [X0 + 0x1C]
	0x03A10F18 LDR X8, [X0 + 0x10]
	0x03A10F1C LDR X9, [X9 + 0x308]
	0x03A10F20 ADD W10, W10, 0x1
	0x03A10F24 LDR X9, [X9]
	0x03A10F28 STR W10, [X0 + 0x1C]
	0x03A10F2C CBZ X8, 0x3A10F70
	0x03A10F30 LDRSW X10, [X0 + 0x18]
	0x03A10F34 LDR W11, [X8 + 0x18]
	0x03A10F38 CMP W10, W11
	0x03A10F3C B.CS 0x3A10F54
	0x03A10F40 ADD W9, W10, 0x1
	0x03A10F44 ADD X8, X8, X10, 0x3, LSL
	0x03A10F48 STR W9, [X0 + 0x18]
	0x03A10F4C STR X1, [X8 + 0x20]
	0x03A10F50 B 0x3A10F64
	0x03A10F54 LDR X8, [X9 + 0x20]
	0x03A10F58 LDR X8, [X8 + 0xC0]
	0x03A10F5C LDR X2, [X8 + 0x70]
	0x03A10F60 BL 0x301BF90
	0x03A10F64 LDR X0, [X19 + 0x88]
	0x03A10F68 ADD W20, W20, 0x1
	0x03A10F6C CBNZ X0, 0x3A10580
	0x03A10F70 BL 0x1C16F20
	0x03A10F74 ADD X31, X31, 0x180
	0x03A10F78 LDP X20, X19, [X31 + 0x90]
	0x03A10F7C LDP X22, X21, [X31 + 0x80]
	0x03A10F80 LDP X24, X23, [X31 + 0x70]
	0x03A10F84 LDP X26, X25, [X31 + 0x60]
	0x03A10F88 LDP X28, X27, [X31 + 0x50]
	0x03A10F8C LDP X29, X30, [X31 + 0x40]
	0x03A10F90 LDP D9, D8, [X31 + 0x30]
	0x03A10F94 LDP D11, D10, [X31 + 0x20]
	0x03A10F98 LDP D13, D12, [X31 + 0x10]
	0x03A10F9C LDP D15, D14, [X31], #0xA0
	0x03A10FA0 RET
	0x03A10FA4 SUB X31, X31, 0x1C0
	0x03A10FA8 STR D10, [X31 + 0x150]
	0x03A10FAC STP D9, D8, [X31 + 0x160]
	0x03A10FB0 STP X29, X30, [X31 + 0x170]
	0x03A10FB4 STP X26, X25, [X31 + 0x180]
	0x03A10FB8 STP X24, X23, [X31 + 0x190]
	0x03A10FBC STP X22, X21, [X31 + 0x1A0]
	0x03A10FC0 STP X20, X19, [X31 + 0x1B0]
	0x03A10FC4 ADRP X23, 0x9D1000
	0x03A10FC8 LDRB W8, [X23 + 0xFAF]
	0x03A10FCC MOV W22, W3
	0x03A10FD0 MOV X20, X2
	0x03A10FD4 MOV W19, W1

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+48], X24
	004 Move [X31+56], X23
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X23, 0x9D2000
	010 Move W8, [X23+4009]
	011 Move W19, W3
	012 Move W20, W2
	013 Move X22, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0x745000
	020 Move X0, [X0+968]
	021 Call 0x1C17CF4
	022 Move X0, 0x745000
	023 Move X0, [X0+976]
	024 Call 0x1C17CF4
	025 Move X0, 0x745000
	026 Move X0, [X0+984]
	027 Call 0x1C17CF4
	028 Move X0, 0x745000
	029 Move X0, [X0+992]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X23+4009], W8
	033 Move [X31+8], X31
	034 Move [X31+16], X31
	035 Move [X31+24], X31
	036 Compare X22, 0
	037 JumpIfEqual {72}
	038 Move X8, 0x745000
	039 Move X8, [X8+992]
	040 Move X24, 0x745000
	041 Move X23, 0x745000
	042 Move X0, X22
	043 Move X1, [X8]
	044 Move X24, [X24+976]
	045 Move X23, [X23+968]
	046 Add X8, X31, 8
	047 Call List`1<Object>.GetEnumerator, X0
	048 Move X1, [X24]
	049 Add X0, X31, 8
	050 Call Enumerator<Object>.MoveNext, X0
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {60}
	055 Move X1, [X31+24]
	056 Move X0, X21
	057 Move W2, W20
	058 Move W3, W19
	059 Call ClipperOffset.AddPath, X0, X1, X2, X3
	060 Move X1, [X23]
	061 Add X0, X31, 8
	062 Call Enumerator<Object>.Dispose, X0
	063 Move X20, [X31+80]
	064 Move X19, [X31+88]
	065 Move X22, [X31+64]
	066 Move X21, [X31+72]
	067 Move X24, [X31+48]
	068 Move X23, [X31+56]
	069 Move X30, [X31+32]
	070 Add X31, X31, 96
	071 Return 
	072 Call 0x1C17F20
	073 Move X20, X0
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X0, X20
	076 Call 0x3EB2AD0
	077 Move X19, [X0]
	078 Call 0x3EB2AE0
	079 Move X1, [X23]
	080 Add X0, X31, 8
	081 Call Enumerator<Object>.Dispose, X0
	082 Compare X19, 0
	083 JumpIfEqual {63}
	084 Move X0, X19
	085 Call 0x1C17F18
	086 Move X19, X31
	087 Move X20, X0
	088 Move X1, [X23]
	089 Add X0, X31, 8
	090 Call Enumerator<Object>.Dispose, X0
	091 Compare X19, 0
	092 JumpIfNotEqual {95}
	093 Move X0, X20
	094 Call 0x1D2D690
	095 Move X0, X19
	096 Call 0x1C17F18
	097 Call 0x1991590

Method: System.Void FixOrientations()

Disassembly:
	0x03A10FD8 MOV X21, X0
	0x03A10FDC TBNZ X8, 0x0, 0x3A11018
	0x03A10FE0 ADRP X0, 0x744000
	0x03A10FE4 LDR X0, [X0 + 0x310]
	0x03A10FE8 BL 0x1C16CF4
	0x03A10FEC ADRP X0, 0x744000
	0x03A10FF0 LDR X0, [X0 + 0x478]
	0x03A10FF4 BL 0x1C16CF4
	0x03A10FF8 ADRP X0, 0x744000
	0x03A10FFC LDR X0, [X0 + 0x210]
	0x03A11000 BL 0x1C16CF4
	0x03A11004 ADRP X0, 0x6E2000
	0x03A11008 LDR X0, [X0 + 0x5A8]
	0x03A1100C BL 0x1C16CF4
	0x03A11010 MOVZ W8, 0x1
	0x03A11014 STRB W8, [X23 + 0xFAF]
	0x03A11018 MOVI V0.2D, 0x0
	0x03A1101C STP V0, V0, [X31 + 0xD0]
	0x03A11020 STP V0, V0, [X31 + 0xB0]
	0x03A11024 STP V0, V0, [X31 + 0x90]
	0x03A11028 LDR X0, [X21 + 0x28]
	0x03A1102C CBZ X0, 0x3A11834
	0x03A11030 ADRP X23, 0x743000
	0x03A11034 LDR X23, [X23 + 0x478]
	0x03A11038 LDR W1, [X20]
	0x03A1103C LDR X2, [X23]
	0x03A11040 BL 0x2FB46A4
	0x03A11044 LDR X0, [X21 + 0x28]
	0x03A11048 CBZ X0, 0x3A11834
	0x03A1104C LDR X2, [X23]
	0x03A11050 MOV W1, W19
	0x03A11054 MOV V8.16B, V0.16B
	0x03A11058 BL 0x2FB46A4
	0x03A1105C LDR X0, [X21 + 0x28]
	0x03A11060 CBZ X0, 0x3A11834
	0x03A11064 LDR X2, [X23]
	0x03A11068 MOV W1, W19
	0x03A1106C MOV V9.16B, V1.16B
	0x03A11070 BL 0x2FB46A4
	0x03A11074 LDR X0, [X21 + 0x28]
	0x03A11078 CBZ X0, 0x3A11834
	0x03A1107C LDR W1, [X20]
	0x03A11080 LDR X2, [X23]
	0x03A11084 ADRP X24, 0x6E2000
	0x03A11088 LDR X24, [X24 + 0x5A8]
	0x03A1108C MOV V10.16B, V0.16B
	0x03A11090 BL 0x2FB46A4
	0x03A11094 FMUL D0, D8, D9
	0x03A11098 FMUL D1, D10, D1
	0x03A1109C FSUB D8, D0, D1
	0x03A110A0 STR D8, [X21 + 0x38]
	0x03A110A4 LDR X0, [X24]
	0x03A110A8 LDR V9, [X21 + 0x30]
	0x03A110AC LDR W8, [X0 + 0xE0]
	0x03A110B0 CBNZ W8, 0x3A110B8
	0x03A110B4 BL 0x1C16DFC
	0x03A110B8 FMUL D0, D9, D8
	0x03A110BC FABS D0, D0
	0x03A110C0 FMOV D1, 1
	0x03A110C4 FCMP D0, D1
	0x03A110C8 B.PL 0x3A112F0
	0x03A110CC LDR X0, [X21 + 0x28]
	0x03A110D0 CBZ X0, 0x3A11834
	0x03A110D4 LDR W1, [X20]
	0x03A110D8 LDR X2, [X23]
	0x03A110DC BL 0x2FB46A4
	0x03A110E0 LDR X0, [X21 + 0x28]
	0x03A110E4 CBZ X0, 0x3A11834
	0x03A110E8 LDR X2, [X23]
	0x03A110EC MOV W1, W19
	0x03A110F0 MOV V8.16B, V0.16B
	0x03A110F4 BL 0x2FB46A4
	0x03A110F8 LDR X0, [X21 + 0x28]
	0x03A110FC CBZ X0, 0x3A11834
	0x03A11100 LDR X2, [X23]
	0x03A11104 MOV W1, W19
	0x03A11108 MOV V9.16B, V0.16B
	0x03A1110C BL 0x2FB46A4
	0x03A11110 LDR X0, [X21 + 0x28]
	0x03A11114 CBZ X0, 0x3A11834
	0x03A11118 LDR W1, [X20]
	0x03A1111C LDR X2, [X23]
	0x03A11120 MOV V10.16B, V1.16B
	0x03A11124 BL 0x2FB46A4
	0x03A11128 FMUL D0, D8, D9
	0x03A1112C FMUL D1, D10, D1
	0x03A11130 FADD D0, D0, D1
	0x03A11134 FCMP D0, 0x0
	0x03A11138 B.LE 0x3A1130C
	0x03A1113C LDR X0, [X21 + 0x18]
	0x03A11140 CBZ X0, 0x3A11834
	0x03A11144 ADRP X24, 0x743000
	0x03A11148 LDR X24, [X24 + 0x210]
	0x03A1114C ADD X8, X31, 0x120
	0x03A11150 MOV W1, W19
	0x03A11154 LDR X2, [X24]
	0x03A11158 BL 0x2FE4360
	0x03A1115C LDR X0, [X21 + 0x28]
	0x03A11160 CBZ X0, 0x3A11834

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x9D2000
	008 Move W8, [X20+4010]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x745000
	015 Move X0, [X0+1000]
	016 Call 0x1C17CF4
	017 Move X0, 0x744000
	018 Move X0, [X0+336]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+4010], W8
	022 Move X22, 0x744000
	023 Move X23, 0x744000
	024 Move X1, [X19+96]
	025 Move X22, [X22+336]
	026 Move X23, [X23+1000]
	027 Move TEMP, X1
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {48}
	031 Move X8, [X19+136]
	032 Compare X8, 0
	033 JumpIfEqual {124}
	034 Move X0, [X8+48]
	035 Compare X0, 0
	036 JumpIfEqual {124}
	037 Move X2, [X22]
	038 Call List`1<Object>.get_Item, X0, X1
	039 Compare X0, 0
	040 JumpIfEqual {124}
	041 Move X0, [X0+24]
	042 Move X1, X31
	043 Call Clipper.Orientation, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {85}
	048 Move X0, [X19+136]
	049 Compare X0, 0
	050 JumpIfEqual {124}
	051 Move W20, W31
	052 Move X1, X31
	053 Call PolyNode.get_ChildCount, X0
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X8, [X19+136]
	056 Compare X8, 0
	057 JumpIfEqual {124}
	058 Move X0, [X8+48]
	059 Compare X0, 0
	060 JumpIfEqual {124}
	061 Move X2, [X22]
	062 Move W1, W20
	063 Call List`1<Object>.get_Item, X0, X1
	064 Compare X0, 0
	065 JumpIfEqual {124}
	066 Move W8, [X0+40]
	067 Move X21, X0
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X0, [X21+24]
	070 Move X1, X31
	071 Call Clipper.Orientation, X0
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {81}
	076 Move X0, [X21+24]
	077 Compare X0, 0
	078 JumpIfEqual {124}
	079 Move X1, [X23]
	080 Call List`1<IntPoint>.Reverse, X0
	081 Move X0, [X19+136]
	082 Add W20, W20, 1
	083 Compare X0, 0
	084 JumpIfNotEqual {52}
	085 Move X0, [X19+136]
	086 Compare X0, 0
	087 JumpIfEqual {124}
	088 Move W20, W31
	089 Move X1, X31
	090 Call PolyNode.get_ChildCount, X0
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X8, [X19+136]
	093 Compare X8, 0
	094 JumpIfEqual {124}
	095 Move X0, [X8+48]
	096 Compare X0, 0
	097 JumpIfEqual {124}
	098 Move X2, [X22]
	099 Move W1, W20
	100 Call List`1<Object>.get_Item, X0, X1
	101 Compare X0, 0
	102 JumpIfEqual {124}
	103 Move W8, [X0+40]
	104 Move X21, X0
	105 Compare W8, 0
	106 JumpIfEqual {115}
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X0, [X21+24]
	109 Move X1, X31
	110 Call Clipper.Orientation, X0
	111 Move TEMP, X0
	112 And TEMP, TEMP, 1
	113 Compare TEMP, 1
	114 JumpIfNotEqual {120}
	115 Move X0, [X21+24]
	116 Compare X0, 0
	117 JumpIfEqual {124}
	118 Move X1, [X23]
	119 Call List`1<IntPoint>.Reverse, X0
	120 Move X0, [X19+136]
	121 Add W20, W20, 1
	122 Compare X0, 0
	123 JumpIfNotEqual {89}
	124 Call 0x1C17F20
	125 Move X20, [X31+32]
	126 Move X19, [X31+40]
	127 Move X22, [X31+16]
	128 Move X21, [X31+24]
	129 Move X30, [X31+48]
	130 Move X23, [X31+56]
	131 Return 

Method: UnityEngine.Rendering.Universal.DoublePoint GetUnitNormal(UnityEngine.Rendering.Universal.IntPoint pt1, UnityEngine.Rendering.Universal.IntPoint pt2)

Disassembly:
	0x03A11164 LDR W1, [X20]
	0x03A11168 LDR X2, [X23]
	0x03A1116C LDR X22, [X31 + 0x128]
	0x03A11170 BL 0x2FB46A4
	0x03A11174 LDR V1, [X21 + 0x30]
	0x03A11178 SCVTF D2, X22
	0x03A1117C MOVZ X8, 0x7FF00000
	0x03A11180 LDR X0, [X21 + 0x18]
	0x03A11184 FMUL D0, D0, D1
	0x03A11188 FMOV D1, 0.5
	0x03A1118C FADD D0, D0, D2
	0x03A11190 FMOV D2, -0.5
	0x03A11194 FADD D1, D0, D1
	0x03A11198 FADD D2, D0, D2
	0x03A1119C FCMP D0, 0x0
	0x03A111A0 FMOV D0, X8
	0x03A111A4 FCSEL D1, D2, D1, MI
	0x03A111A8 FCVTZS X8, D1
	0x03A111AC FCMP D1, D0
	0x03A111B0 MOVZ X9, 0x80000000
	0x03A111B4 CSEL X22, X9, X8, EQ
	0x03A111B8 CBZ X0, 0x3A11834
	0x03A111BC LDR X2, [X24]
	0x03A111C0 ADD X8, X31, 0x120
	0x03A111C4 MOV W1, W19
	0x03A111C8 BL 0x2FE4360
	0x03A111CC LDR X0, [X21 + 0x28]
	0x03A111D0 CBZ X0, 0x3A11834
	0x03A111D4 LDR W1, [X20]
	0x03A111D8 LDR X2, [X23]
	0x03A111DC LDR X24, [X31 + 0x130]
	0x03A111E0 BL 0x2FB46A4
	0x03A111E4 LDR V0, [X21 + 0x30]
	0x03A111E8 SCVTF D2, X24
	0x03A111EC MOVZ X8, 0x7FF00000
	0x03A111F0 MOVZ X9, 0x80000000
	0x03A111F4 FMUL D0, D1, D0
	0x03A111F8 FMOV D1, 0.5
	0x03A111FC FADD D0, D0, D2
	0x03A11200 FMOV D2, -0.5
	0x03A11204 FADD D1, D0, D1
	0x03A11208 FADD D2, D0, D2
	0x03A1120C FCMP D0, 0x0
	0x03A11210 FMOV D0, X8
	0x03A11214 FCSEL D1, D2, D1, MI
	0x03A11218 FCVTZS X8, D1
	0x03A1121C FCMP D1, D0
	0x03A11220 CSEL X2, X9, X8, EQ
	0x03A11224 ADD X0, X31, 0xC0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x9D1000
	009 Move W8, [X21+4011]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x6E3000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+4011], W8
	021 Move X8, [X19+8]
	022 Move X9, [X19+16]
	023 Move X10, [X20+8]
	024 Move X11, [X20+16]
	025 Subtract X8, X8, X10
	026 Subtract X9, X9, X11
	027 Or X10, X9, X8
	028 Compare X10, 0
	029 JumpIfEqual {53}
	030 Move X10, 0x6E3000
	031 Move X10, [X10+1448]
	032 NotImplemented "Instruction SCVTF not yet implemented."
	033 NotImplemented "Instruction SCVTF not yet implemented."
	034 Move X0, [X10]
	035 Move W10, [X0+224]
	036 Compare W10, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Multiply D0, D8, D8
	040 Multiply D1, D9, D9
	041 Add D0, D0, D1
	042 Move D2, 1
	043 NotImplemented "Instruction FSQRT not yet implemented."
	044 NotImplemented "Instruction FDIV not yet implemented."
	045 Multiply D0, D1, D9
	046 NotImplemented "Instruction FNEG not yet implemented."
	047 Multiply D1, D8, D1
	048 Add X0, X31, 0
	049 Move X1, X31
	050 Move [X31], X31
	051 Move [X31+8], X31
	052 Call DoublePoint..ctor, X0, V0, V1
	053 Move [X31], X31
	054 Move [X31+8], X31
	055 Move D0, [X31]
	056 Move D1, [X31+8]
	057 Move X20, [X31+48]
	058 Move X19, [X31+56]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Move D9, [X31+16]
	062 Move D8, [X31+24]
	063 Add X31, X31, 64
	064 Return X0

Method: System.Void DoOffset(System.Double delta)

Disassembly:
	0x03A11228 MOV X1, X22
	0x03A1122C MOV X3, X31
	0x03A11230 BL 0x3A04370
	0x03A11234 LDR X0, [X21 + 0x28]
	0x03A11238 CBZ X0, 0x3A11834
	0x03A1123C LDR W1, [X20]
	0x03A11240 LDR X2, [X23]
	0x03A11244 BL 0x2FB46A4
	0x03A11248 STR D0, [X31 + 0xE0]
	0x03A1124C LDR X0, [X21 + 0x28]
	0x03A11250 CBZ X0, 0x3A11834
	0x03A11254 LDR W1, [X20]
	0x03A11258 LDR X2, [X23]
	0x03A1125C BL 0x2FB46A4
	0x03A11260 SXTW X8, W19
	0x03A11264 MOVZ W9, 0x1
	0x03A11268 STR D1, [X31 + 0xE8]
	0x03A1126C STR X8, [X31 + 0xC0]
	0x03A11270 STR X9, [X31 + 0xD8]
	0x03A11274 LDP V2, V0, [X31 + 0xD0]
	0x03A11278 LDR V1, [X31 + 0xC]
	0x03A1127C LDR X0, [X21 + 0x20]
	0x03A11280 STR V0, [X31 + 0x8]
	0x03A11284 STP V1, V2, [X31 + 0x60]
	0x03A11288 CBZ X0, 0x3A11834
	0x03A1128C LDP V0, V1, [X31 + 0x60]
	0x03A11290 LDR V2, [X31 + 0x8]
	0x03A11294 ADRP X9, 0x743000
	0x03A11298 LDR X9, [X9 + 0x310]
	0x03A1129C STP V0, V1, [X31 + 0xF0]
	0x03A112A0 STR V2, [X31 + 0x11]
	0x03A112A4 LDR W11, [X0 + 0x1C]
	0x03A112A8 LDR X8, [X0 + 0x10]
	0x03A112AC LDR X10, [X9]
	0x03A112B0 ADD W9, W11, 0x1
	0x03A112B4 STR W9, [X0 + 0x1C]
	0x03A112B8 CBZ X8, 0x3A11834
	0x03A112BC LDRSW X9, [X0 + 0x18]
	0x03A112C0 LDR W11, [X8 + 0x18]
	0x03A112C4 CMP W9, W11
	0x03A112C8 B.CS 0x3A1180C
	0x03A112CC ADD W10, W9, 0x1
	0x03A112D0 STR W10, [X0 + 0x18]
	0x03A112D4 LDP V2, V0, [X31 + 0x100]
	0x03A112D8 LDR V1, [X31 + 0xF]
	0x03A112DC MOVZ W10, 0x30
	0x03A112E0 MADD X8, X9, X10, X8
	0x03A112E4 STP V2, V0, [X8 + 0x30]
	0x03A112E8 STR V1, [X8 + 0x2]
	0x03A112EC B 0x3A117E8
	0x03A112F0 LDR V0, [X21 + 0x38]
	0x03A112F4 FCMP D0, D1
	0x03A112F8 B.LE 0x3A11314
	0x03A112FC MOVZ X8, 0x3FF00000
	0x03A11300 STR X8, [X21 + 0x38]
	0x03A11304 FMOV D0, 1
	0x03A11308 B 0x3A1132C
	0x03A1130C LDR V0, [X21 + 0x38]
	0x03A11310 B 0x3A1132C
	0x03A11314 FMOV D1, -1
	0x03A11318 FCMP D0, D1
	0x03A1131C B.PL 0x3A1132C
	0x03A11320 MOVZ X8, 0xBFF00000
	0x03A11324 FMOV D0, -1
	0x03A11328 STR X8, [X21 + 0x38]
	0x03A1132C LDR V1, [X21 + 0x30]
	0x03A11330 FMUL D0, D0, D1
	0x03A11334 FCMP D0, 0x0
	0x03A11338 B.PL 0x3A114E0
	0x03A1133C LDR X0, [X21 + 0x18]
	0x03A11340 CBZ X0, 0x3A11834
	0x03A11344 ADRP X24, 0x743000
	0x03A11348 LDR X24, [X24 + 0x210]
	0x03A1134C ADD X8, X31, 0x120
	0x03A11350 MOV W1, W19
	0x03A11354 LDR X2, [X24]
	0x03A11358 BL 0x2FE4360
	0x03A1135C LDR X0, [X21 + 0x28]
	0x03A11360 CBZ X0, 0x3A11834
	0x03A11364 LDR W1, [X20]
	0x03A11368 LDR X2, [X23]
	0x03A1136C LDR X22, [X31 + 0x128]
	0x03A11370 BL 0x2FB46A4
	0x03A11374 LDR V1, [X21 + 0x30]
	0x03A11378 SCVTF D2, X22
	0x03A1137C MOVZ X8, 0x7FF00000
	0x03A11380 LDR X0, [X21 + 0x18]
	0x03A11384 FMUL D0, D0, D1
	0x03A11388 FMOV D1, 0.5
	0x03A1138C FADD D0, D0, D2
	0x03A11390 FMOV D2, -0.5
	0x03A11394 FADD D1, D0, D1
	0x03A11398 FADD D2, D0, D2
	0x03A1139C FCMP D0, 0x0
	0x03A113A0 FMOV D0, X8
	0x03A113A4 FCSEL D1, D2, D1, MI
	0x03A113A8 FCVTZS X8, D1
	0x03A113AC FCMP D1, D0
	0x03A113B0 MOVZ X9, 0x80000000
	0x03A113B4 CSEL X22, X9, X8, EQ
	0x03A113B8 CBZ X0, 0x3A11834
	0x03A113BC LDR X2, [X24]
	0x03A113C0 ADD X8, X31, 0x120
	0x03A113C4 MOV W1, W19
	0x03A113C8 BL 0x2FE4360
	0x03A113CC LDR X0, [X21 + 0x28]
	0x03A113D0 CBZ X0, 0x3A11834
	0x03A113D4 LDR W1, [X20]
	0x03A113D8 LDR X2, [X23]
	0x03A113DC LDR X25, [X31 + 0x130]
	0x03A113E0 BL 0x2FB46A4
	0x03A113E4 LDR V0, [X21 + 0x30]
	0x03A113E8 SCVTF D2, X25
	0x03A113EC MOVZ X8, 0x7FF00000
	0x03A113F0 MOVZ X9, 0x80000000
	0x03A113F4 FMUL D0, D1, D0
	0x03A113F8 FMOV D1, 0.5
	0x03A113FC FADD D0, D0, D2
	0x03A11400 FMOV D2, -0.5
	0x03A11404 FADD D1, D0, D1
	0x03A11408 FADD D2, D0, D2
	0x03A1140C FCMP D0, 0x0
	0x03A11410 FMOV D0, X8
	0x03A11414 FCSEL D1, D2, D1, MI
	0x03A11418 FCVTZS X8, D1
	0x03A1141C FCMP D1, D0
	0x03A11420 CSEL X2, X9, X8, EQ
	0x03A11424 ADD X0, X31, 0x90
	0x03A11428 MOV X1, X22
	0x03A1142C MOV X3, X31
	0x03A11430 BL 0x3A04370
	0x03A11434 LDR X0, [X21 + 0x28]
	0x03A11438 CBZ X0, 0x3A11834
	0x03A1143C LDR W1, [X20]
	0x03A11440 LDR X2, [X23]
	0x03A11444 BL 0x2FB46A4
	0x03A11448 STR D0, [X31 + 0xB0]
	0x03A1144C LDR X0, [X21 + 0x28]
	0x03A11450 CBZ X0, 0x3A11834
	0x03A11454 LDR W1, [X20]
	0x03A11458 LDR X2, [X23]
	0x03A1145C BL 0x2FB46A4
	0x03A11460 STR D1, [X31 + 0xB8]
	0x03A11464 LDP V0, V1, [X31 + 0x90]
	0x03A11468 LDR X0, [X21 + 0x20]
	0x03A1146C LDR V2, [X31 + 0xB]
	0x03A11470 STP V0, V1, [X31 + 0x60]
	0x03A11474 STR V2, [X31 + 0x8]
	0x03A11478 CBZ X0, 0x3A11834
	0x03A1147C LDP V0, V1, [X31 + 0x60]
	0x03A11480 LDR V2, [X31 + 0x8]
	0x03A11484 ADRP X25, 0x743000
	0x03A11488 LDR X25, [X25 + 0x310]
	0x03A1148C STP V0, V1, [X31 + 0xF0]
	0x03A11490 STR V2, [X31 + 0x11]
	0x03A11494 LDR W9, [X0 + 0x1C]
	0x03A11498 LDR X8, [X0 + 0x10]
	0x03A1149C LDR X10, [X25]
	0x03A114A0 ADD W9, W9, 0x1
	0x03A114A4 STR W9, [X0 + 0x1C]
	0x03A114A8 CBZ X8, 0x3A11834
	0x03A114AC LDRSW X9, [X0 + 0x18]
	0x03A114B0 LDR W11, [X8 + 0x18]
	0x03A114B4 CMP W9, W11
	0x03A114B8 B.CS 0x3A114F8
	0x03A114BC ADD W10, W9, 0x1
	0x03A114C0 STR W10, [X0 + 0x18]
	0x03A114C4 LDP V2, V0, [X31 + 0x100]
	0x03A114C8 LDR V1, [X31 + 0xF]
	0x03A114CC MOVZ W10, 0x30
	0x03A114D0 MADD X8, X9, X10, X8
	0x03A114D4 STP V2, V0, [X8 + 0x30]
	0x03A114D8 STR V1, [X8 + 0x2]
	0x03A114DC B 0x3A1151C
	0x03A114E0 CBNZ W22, 0x3A117E4
	0x03A114E4 LDR W2, [X20]
	0x03A114E8 MOV X0, X21
	0x03A114EC MOV W1, W19
	0x03A114F0 BL 0x3A11838
	0x03A114F4 B 0x3A117E4
	0x03A114F8 LDR X8, [X10 + 0x20]
	0x03A114FC LDP V0, V1, [X31 + 0xF0]
	0x03A11500 LDR V2, [X31 + 0x11]
	0x03A11504 ADD X1, X31, 0x120
	0x03A11508 LDR X8, [X8 + 0xC0]
	0x03A1150C LDR X2, [X8 + 0x70]
	0x03A11510 STP V0, V1, [X31 + 0x120]
	0x03A11514 STR V2, [X31 + 0x14]
	0x03A11518 BL 0x2FE46FC
	0x03A1151C LDR X0, [X21 + 0x18]
	0x03A11520 CBZ X0, 0x3A11834
	0x03A11524 LDR X2, [X24]
	0x03A11528 ADD X8, X31, 0x120
	0x03A1152C MOV W1, W19
	0x03A11530 BL 0x2FE4360
	0x03A11534 LDP V0, V1, [X31 + 0x120]
	0x03A11538 LDR V2, [X31 + 0x14]
	0x03A1153C STP V0, V1, [X31 + 0x90]
	0x03A11540 STR V2, [X31 + 0xB]
	0x03A11544 LDR X0, [X21 + 0x28]
	0x03A11548 CBZ X0, 0x3A11834
	0x03A1154C LDR W1, [X20]
	0x03A11550 LDR X2, [X23]
	0x03A11554 BL 0x2FB46A4
	0x03A11558 STR D0, [X31 + 0xB0]
	0x03A1155C LDR X0, [X21 + 0x28]
	0x03A11560 CBZ X0, 0x3A11834
	0x03A11564 LDR W1, [X20]
	0x03A11568 LDR X2, [X23]
	0x03A1156C BL 0x2FB46A4
	0x03A11570 MOV W8, W19
	0x03A11574 SXTW X26, W8
	0x03A11578 MOVZ W8, 0x1
	0x03A1157C STR D1, [X31 + 0xB8]
	0x03A11580 STR X26, [X31 + 0x90]
	0x03A11584 STR X8, [X31 + 0xA8]
	0x03A11588 LDP V2, V0, [X31 + 0xA0]
	0x03A1158C LDR V1, [X31 + 0x9]
	0x03A11590 LDR X0, [X21 + 0x20]
	0x03A11594 STR V0, [X31 + 0x5]
	0x03A11598 STP V1, V2, [X31 + 0x30]
	0x03A1159C CBZ X0, 0x3A11834
	0x03A115A0 LDP V0, V1, [X31 + 0x30]
	0x03A115A4 LDR V2, [X31 + 0x5]
	0x03A115A8 LDR X10, [X25]
	0x03A115AC STP V0, V1, [X31 + 0xF0]
	0x03A115B0 STR V2, [X31 + 0x11]
	0x03A115B4 LDR W9, [X0 + 0x1C]
	0x03A115B8 LDR X8, [X0 + 0x10]
	0x03A115BC ADD W9, W9, 0x1
	0x03A115C0 STR W9, [X0 + 0x1C]
	0x03A115C4 CBZ X8, 0x3A11834
	0x03A115C8 LDRSW X9, [X0 + 0x18]
	0x03A115CC LDR W11, [X8 + 0x18]
	0x03A115D0 CMP W9, W11
	0x03A115D4 B.CS 0x3A115FC
	0x03A115D8 ADD W10, W9, 0x1
	0x03A115DC STR W10, [X0 + 0x18]
	0x03A115E0 LDP V2, V0, [X31 + 0x100]
	0x03A115E4 LDR V1, [X31 + 0xF]
	0x03A115E8 MOVZ W10, 0x30
	0x03A115EC MADD X8, X9, X10, X8
	0x03A115F0 STP V2, V0, [X8 + 0x30]
	0x03A115F4 STR V1, [X8 + 0x2]
	0x03A115F8 B 0x3A11620
	0x03A115FC LDR X8, [X10 + 0x20]
	0x03A11600 LDP V0, V1, [X31 + 0xF0]
	0x03A11604 LDR V2, [X31 + 0x11]
	0x03A11608 ADD X1, X31, 0x120
	0x03A1160C LDR X8, [X8 + 0xC0]
	0x03A11610 LDR X2, [X8 + 0x70]
	0x03A11614 STP V0, V1, [X31 + 0x120]
	0x03A11618 STR V2, [X31 + 0x14]
	0x03A1161C BL 0x2FE46FC
	0x03A11620 LDR X0, [X21 + 0x18]
	0x03A11624 CBZ X0, 0x3A11834
	0x03A11628 LDR X2, [X24]
	0x03A1162C ADD X8, X31, 0x120
	0x03A11630 MOV W1, W19
	0x03A11634 BL 0x2FE4360
	0x03A11638 LDR X0, [X21 + 0x28]
	0x03A1163C CBZ X0, 0x3A11834
	0x03A11640 LDR X2, [X23]
	0x03A11644 LDR X22, [X31 + 0x128]
	0x03A11648 MOV W1, W19
	0x03A1164C BL 0x2FB46A4
	0x03A11650 LDR V1, [X21 + 0x30]
	0x03A11654 SCVTF D2, X22
	0x03A11658 MOVZ X8, 0x7FF00000
	0x03A1165C LDR X0, [X21 + 0x18]
	0x03A11660 FMUL D0, D0, D1
	0x03A11664 FMOV D1, 0.5
	0x03A11668 FADD D0, D0, D2
	0x03A1166C FMOV D2, -0.5
	0x03A11670 FADD D1, D0, D1
	0x03A11674 FADD D2, D0, D2
	0x03A11678 FCMP D0, 0x0
	0x03A1167C FMOV D0, X8
	0x03A11680 FCSEL D1, D2, D1, MI
	0x03A11684 FCVTZS X8, D1
	0x03A11688 FCMP D1, D0
	0x03A1168C MOVZ X9, 0x80000000
	0x03A11690 CSEL X22, X9, X8, EQ
	0x03A11694 CBZ X0, 0x3A11834
	0x03A11698 LDR X2, [X24]
	0x03A1169C ADD X8, X31, 0x120
	0x03A116A0 MOV W1, W19
	0x03A116A4 BL 0x2FE4360
	0x03A116A8 LDR X0, [X21 + 0x28]
	0x03A116AC CBZ X0, 0x3A11834
	0x03A116B0 LDR X2, [X23]
	0x03A116B4 LDR X24, [X31 + 0x130]
	0x03A116B8 MOV W1, W19
	0x03A116BC BL 0x2FB46A4
	0x03A116C0 LDR V0, [X21 + 0x30]
	0x03A116C4 SCVTF D2, X24
	0x03A116C8 MOVZ X8, 0x7FF00000
	0x03A116CC MOVZ X9, 0x80000000
	0x03A116D0 FMUL D0, D1, D0
	0x03A116D4 FMOV D1, 0.5
	0x03A116D8 FADD D0, D0, D2
	0x03A116DC FMOV D2, -0.5
	0x03A116E0 FADD D1, D0, D1
	0x03A116E4 FADD D2, D0, D2
	0x03A116E8 FCMP D0, 0x0
	0x03A116EC FMOV D0, X8
	0x03A116F0 FCSEL D1, D2, D1, MI
	0x03A116F4 FCVTZS X8, D1
	0x03A116F8 FCMP D1, D0
	0x03A116FC CSEL X2, X9, X8, EQ
	0x03A11700 ADD X0, X31, 0x90
	0x03A11704 MOV X1, X22
	0x03A11708 MOV X3, X31
	0x03A1170C BL 0x3A04370
	0x03A11710 LDR X0, [X21 + 0x28]
	0x03A11714 CBZ X0, 0x3A11834
	0x03A11718 LDR X2, [X23]
	0x03A1171C MOV W1, W19
	0x03A11720 BL 0x2FB46A4
	0x03A11724 STR D0, [X31 + 0xB0]
	0x03A11728 LDR X0, [X21 + 0x28]
	0x03A1172C CBZ X0, 0x3A11834
	0x03A11730 LDR X2, [X23]
	0x03A11734 MOV W1, W19
	0x03A11738 BL 0x2FB46A4
	0x03A1173C MOVZ W8, 0x1
	0x03A11740 STR D1, [X31 + 0xB8]
	0x03A11744 STR X26, [X31 + 0x90]
	0x03A11748 STR X8, [X31 + 0xA8]
	0x03A1174C LDP V2, V0, [X31 + 0xA0]
	0x03A11750 LDR V1, [X31 + 0x9]
	0x03A11754 LDR X0, [X21 + 0x20]
	0x03A11758 STR V0, [X31 + 0x2]
	0x03A1175C STP V1, V2, [X31]
	0x03A11760 CBZ X0, 0x3A11834
	0x03A11764 LDP V0, V1, [X31]
	0x03A11768 LDR V2, [X31 + 0x2]
	0x03A1176C LDR X10, [X25]
	0x03A11770 STP V0, V1, [X31 + 0xF0]
	0x03A11774 STR V2, [X31 + 0x11]
	0x03A11778 LDR W9, [X0 + 0x1C]
	0x03A1177C LDR X8, [X0 + 0x10]
	0x03A11780 ADD W9, W9, 0x1
	0x03A11784 STR W9, [X0 + 0x1C]
	0x03A11788 CBZ X8, 0x3A11834
	0x03A1178C LDRSW X9, [X0 + 0x18]
	0x03A11790 LDR W11, [X8 + 0x18]
	0x03A11794 CMP W9, W11
	0x03A11798 B.CS 0x3A117C0
	0x03A1179C ADD W10, W9, 0x1
	0x03A117A0 STR W10, [X0 + 0x18]
	0x03A117A4 LDP V2, V0, [X31 + 0x100]
	0x03A117A8 LDR V1, [X31 + 0xF]
	0x03A117AC MOVZ W10, 0x30
	0x03A117B0 MADD X8, X9, X10, X8
	0x03A117B4 STP V2, V0, [X8 + 0x30]
	0x03A117B8 STR V1, [X8 + 0x2]
	0x03A117BC B 0x3A117E4
	0x03A117C0 LDR X8, [X10 + 0x20]
	0x03A117C4 LDP V0, V1, [X31 + 0xF0]
	0x03A117C8 LDR V2, [X31 + 0x11]
	0x03A117CC ADD X1, X31, 0x120
	0x03A117D0 LDR X8, [X8 + 0xC0]
	0x03A117D4 LDR X2, [X8 + 0x70]
	0x03A117D8 STP V0, V1, [X31 + 0x120]
	0x03A117DC STR V2, [X31 + 0x14]
	0x03A117E0 BL 0x2FE46FC
	0x03A117E4 STR W19, [X20]
	0x03A117E8 LDP X20, X19, [X31 + 0x1B0]
	0x03A117EC LDP X22, X21, [X31 + 0x1A0]
	0x03A117F0 LDP X24, X23, [X31 + 0x190]
	0x03A117F4 LDP X26, X25, [X31 + 0x180]
	0x03A117F8 LDP X29, X30, [X31 + 0x170]
	0x03A117FC LDP D9, D8, [X31 + 0x160]
	0x03A11800 LDR V10, [X31 + 0x150]
	0x03A11804 ADD X31, X31, 0x1C0
	0x03A11808 RET
	0x03A1180C LDR X8, [X10 + 0x20]
	0x03A11810 LDP V0, V1, [X31 + 0xF0]
	0x03A11814 LDR V2, [X31 + 0x11]
	0x03A11818 ADD X1, X31, 0x120
	0x03A1181C LDR X8, [X8 + 0xC0]
	0x03A11820 LDR X2, [X8 + 0x70]
	0x03A11824 STP V0, V1, [X31 + 0x120]
	0x03A11828 STR V2, [X31 + 0x14]
	0x03A1182C BL 0x2FE46FC
	0x03A11830 B 0x3A117E8
	0x03A11834 BL 0x1C16F20
	0x03A11838 SUB X31, X31, 0x190
	0x03A1183C STR D12, [X31 + 0x100]
	0x03A11840 STP D11, D10, [X31 + 0x110]
	0x03A11844 STP D9, D8, [X31 + 0x120]
	0x03A11848 STP X29, X30, [X31 + 0x130]
	0x03A1184C STP X28, X27, [X31 + 0x140]
	0x03A11850 STP X26, X25, [X31 + 0x150]
	0x03A11854 STP X24, X23, [X31 + 0x160]
	0x03A11858 STP X22, X21, [X31 + 0x170]
	0x03A1185C STP X20, X19, [X31 + 0x180]
	0x03A11860 ADRP X22, 0x9D0000
	0x03A11864 LDRB W8, [X22 + 0xFB2]
	0x03A11868 MOV W21, W2
	0x03A1186C MOV W20, W1
	0x03A11870 MOV X19, X0
	0x03A11874 TBNZ X8, 0x0, 0x3A118B0
	0x03A11878 ADRP X0, 0x743000
	0x03A1187C LDR X0, [X0 + 0x310]
	0x03A11880 BL 0x1C16CF4
	0x03A11884 ADRP X0, 0x743000
	0x03A11888 LDR X0, [X0 + 0x478]
	0x03A1188C BL 0x1C16CF4
	0x03A11890 ADRP X0, 0x743000
	0x03A11894 LDR X0, [X0 + 0x210]
	0x03A11898 BL 0x1C16CF4
	0x03A1189C ADRP X0, 0x6E2000
	0x03A118A0 LDR X0, [X0 + 0x5A8]
	0x03A118A4 BL 0x1C16CF4
	0x03A118A8 MOVZ W8, 0x1
	0x03A118AC STRB W8, [X22 + 0xFB2]
	0x03A118B0 MOVI V0.2D, 0x0
	0x03A118B4 STP V0, V0, [X31 + 0x80]
	0x03A118B8 STP V0, V0, [X31 + 0x60]
	0x03A118BC STP V0, V0, [X31 + 0x40]
	0x03A118C0 LDR X0, [X19 + 0x28]
	0x03A118C4 CBZ X0, 0x3A11D70
	0x03A118C8 ADRP X23, 0x743000
	0x03A118CC LDR X23, [X23 + 0x478]
	0x03A118D0 LDR V8, [X19 + 0x38]
	0x03A118D4 MOV W1, W21
	0x03A118D8 LDR X2, [X23]
	0x03A118DC BL 0x2FB46A4
	0x03A118E0 LDR X0, [X19 + 0x28]
	0x03A118E4 CBZ X0, 0x3A11D70
	0x03A118E8 LDR X2, [X23]
	0x03A118EC MOV W1, W20
	0x03A118F0 MOV V9.16B, V0.16B
	0x03A118F4 BL 0x2FB46A4
	0x03A118F8 LDR X0, [X19 + 0x28]
	0x03A118FC CBZ X0, 0x3A11D70
	0x03A11900 LDR X2, [X23]
	0x03A11904 MOV W1, W21
	0x03A11908 MOV V10.16B, V0.16B
	0x03A1190C BL 0x2FB46A4
	0x03A11910 LDR X0, [X19 + 0x28]
	0x03A11914 CBZ X0, 0x3A11D70
	0x03A11918 LDR X2, [X23]
	0x03A1191C ADRP X22, 0x6E2000
	0x03A11920 LDR X22, [X22 + 0x5A8]
	0x03A11924 MOV W1, W20
	0x03A11928 MOV V11.16B, V1.16B
	0x03A1192C BL 0x2FB46A4
	0x03A11930 LDR X0, [X22]
	0x03A11934 MOV V12.16B, V1.16B
	0x03A11938 LDR W8, [X0 + 0xE0]
	0x03A1193C CBNZ W8, 0x3A11944
	0x03A11940 BL 0x1C16DFC
	0x03A11944 FMUL D0, D9, D10
	0x03A11948 FMUL D1, D11, D12
	0x03A1194C FADD D1, D0, D1
	0x03A11950 MOV V0.16B, V8.16B
	0x03A11954 BL 0x3EB1D80
	0x03A11958 LDR V1, [X19 + 0x50]
	0x03A1195C FABS D0, D0
	0x03A11960 FMOV D2, 0.5
	0x03A11964 FMOV D3, -0.5
	0x03A11968 FMUL D0, D1, D0
	0x03A1196C MOVZ X8, 0x7FF00000
	0x03A11970 FADD D1, D0, D2
	0x03A11974 FADD D2, D0, D3
	0x03A11978 FCMP D0, 0x0
	0x03A1197C FMOV D4, X8
	0x03A11980 FCSEL D0, D2, D1, MI
	0x03A11984 FCVTZS X8, D0
	0x03A11988 FCMP D0, D4
	0x03A1198C CSEL W0, W31, W8, EQ
	0x03A11990 MOVZ W1, 0x1
	0x03A11994 MOV X2, X31
	0x03A11998 BL 0x337EDF0
	0x03A1199C LDR X8, [X19 + 0x28]
	0x03A119A0 CBZ X8, 0x3A11D70
	0x03A119A4 LDR X2, [X23]
	0x03A119A8 MOV W22, W0
	0x03A119AC MOV X0, X8
	0x03A119B0 MOV W1, W21
	0x03A119B4 BL 0x2FB46A4
	0x03A119B8 LDR X0, [X19 + 0x28]
	0x03A119BC CBZ X0, 0x3A11D70
	0x03A119C0 LDR X2, [X23]
	0x03A119C4 MOV W1, W21
	0x03A119C8 MOV V8.16B, V0.16B
	0x03A119CC BL 0x2FB46A4
	0x03A119D0 LDR X0, [X19 + 0x18]
	0x03A119D4 CBZ X0, 0x3A11D70
	0x03A119D8 ADRP X26, 0x743000
	0x03A119DC ADRP X24, 0x743000
	0x03A119E0 LDR X26, [X26 + 0x210]
	0x03A119E4 LDR X24, [X24 + 0x310]
	0x03A119E8 BIC W8, W22, W22, 0x1F
	0x03A119EC MOV V9.16B, V1.16B
	0x03A119F0 SXTW X25, W20
	0x03A119F4 FMOV D10, 0.5
	0x03A119F8 FMOV D11, -0.5
	0x03A119FC MOVZ X22, 0x7FF00000
	0x03A11A00 MOVZ X27, 0x80000000
	0x03A11A04 MOVZ W28, 0x1
	0x03A11A08 ADD W29, W8, 0x1
	0x03A11A0C MOVZ W23, 0x30
	0x03A11A10 SUBS W29, W29, 0x1
	0x03A11A14 B.EQ 0x3A11B80
	0x03A11A18 LDR X2, [X26]
	0x03A11A1C ADD X8, X31, 0xD0
	0x03A11A20 MOV W1, W20
	0x03A11A24 BL 0x2FE4360
	0x03A11A28 LDR X0, [X19 + 0x18]
	0x03A11A2C CBZ X0, 0x3A11D70
	0x03A11A30 LDR V0, [X31 + 0xD8]
	0x03A11A34 LDR V1, [X19 + 0x30]
	0x03A11A38 LDR X2, [X26]
	0x03A11A3C FMOV D12, X22
	0x03A11A40 SCVTF D0, D0
	0x03A11A44 FMUL D1, D8, D1
	0x03A11A48 FADD D0, D1, D0
	0x03A11A4C FADD D1, D0, D10
	0x03A11A50 FADD D2, D0, D11
	0x03A11A54 FCMP D0, 0x0
	0x03A11A58 FCSEL D0, D2, D1, MI
	0x03A11A5C FCVTZS X8, D0
	0x03A11A60 FCMP D0, D12
	0x03A11A64 CSEL X21, X27, X8, EQ
	0x03A11A68 ADD X8, X31, 0xD0
	0x03A11A6C MOV W1, W20
	0x03A11A70 BL 0x2FE4360
	0x03A11A74 LDR V0, [X31 + 0xE0]
	0x03A11A78 LDR V1, [X19 + 0x30]
	0x03A11A7C ADD X0, X31, 0x40
	0x03A11A80 MOV X1, X21
	0x03A11A84 SCVTF D0, D0
	0x03A11A88 FMUL D1, D9, D1
	0x03A11A8C FADD D0, D1, D0
	0x03A11A90 FADD D1, D0, D10
	0x03A11A94 FADD D2, D0, D11
	0x03A11A98 FCMP D0, 0x0
	0x03A11A9C FCSEL D0, D2, D1, MI
	0x03A11AA0 FCVTZS X8, D0
	0x03A11AA4 FCMP D0, D12
	0x03A11AA8 CSEL X2, X27, X8, EQ
	0x03A11AAC MOV X3, X31
	0x03A11AB0 BL 0x3A04370
	0x03A11AB4 STP D8, D9, [X31 + 0x60]
	0x03A11AB8 STR X25, [X31 + 0x40]
	0x03A11ABC STR X28, [X31 + 0x58]
	0x03A11AC0 LDR X0, [X19 + 0x20]
	0x03A11AC4 LDP V0, V1, [X31 + 0x40]
	0x03A11AC8 LDR V2, [X31 + 0x6]
	0x03A11ACC STP V0, V1, [X31 + 0x10]
	0x03A11AD0 STR V2, [X31 + 0x3]
	0x03A11AD4 CBZ X0, 0x3A11D70
	0x03A11AD8 LDP V0, V1, [X31 + 0x10]
	0x03A11ADC LDR V2, [X31 + 0x3]
	0x03A11AE0 LDR X10, [X24]
	0x03A11AE4 STP V0, V1, [X31 + 0xA0]
	0x03A11AE8 STR V2, [X31 + 0xC]
	0x03A11AEC LDR W9, [X0 + 0x1C]
	0x03A11AF0 LDR X8, [X0 + 0x10]
	0x03A11AF4 ADD W9, W9, 0x1
	0x03A11AF8 STR W9, [X0 + 0x1C]
	0x03A11AFC CBZ X8, 0x3A11D70
	0x03A11B00 LDRSW X9, [X0 + 0x18]
	0x03A11B04 LDR W11, [X8 + 0x18]
	0x03A11B08 CMP W9, W11
	0x03A11B0C B.CS 0x3A11B34
	0x03A11B10 ADD W10, W9, 0x1
	0x03A11B14 STR W10, [X0 + 0x18]
	0x03A11B18 LDP V1, V0, [X31 + 0xB0]
	0x03A11B1C LDR V2, [X31 + 0xA]
	0x03A11B20 NOP
	0x03A11B24 MADD X8, X9, X23, X8
	0x03A11B28 STP V1, V0, [X8 + 0x30]
	0x03A11B2C STR V2, [X8 + 0x2]
	0x03A11B30 B 0x3A11B58
	0x03A11B34 LDR X8, [X10 + 0x20]
	0x03A11B38 LDP V0, V1, [X31 + 0xA0]
	0x03A11B3C LDR V2, [X31 + 0xC]
	0x03A11B40 ADD X1, X31, 0xD0
	0x03A11B44 LDR X8, [X8 + 0xC0]
	0x03A11B48 LDR X2, [X8 + 0x70]
	0x03A11B4C STP V0, V1, [X31 + 0xD0]
	0x03A11B50 STR V2, [X31 + 0xF]
	0x03A11B54 BL 0x2FE46FC
	0x03A11B58 LDP D1, D0, [X19 + 0x40]
	0x03A11B5C LDR X0, [X19 + 0x18]
	0x03A11B60 FMUL D2, D8, D0
	0x03A11B64 FMUL D3, D9, D1
	0x03A11B68 FMUL D1, D8, D1
	0x03A11B6C FMUL D0, D9, D0
	0x03A11B70 FSUB D8, D2, D3
	0x03A11B74 FADD D9, D0, D1
	0x03A11B78 CBNZ X0, 0x3A11A10
	0x03A11B7C B 0x3A11D70
	0x03A11B80 LDR X2, [X26]
	0x03A11B84 ADD X8, X31, 0xD0
	0x03A11B88 MOV W1, W20
	0x03A11B8C BL 0x2FE4360
	0x03A11B90 LDR X0, [X19 + 0x28]
	0x03A11B94 CBZ X0, 0x3A11D70
	0x03A11B98 ADRP X23, 0x743000
	0x03A11B9C LDR X21, [X31 + 0xD8]
	0x03A11BA0 LDR X23, [X23 + 0x478]
	0x03A11BA4 MOV W1, W20
	0x03A11BA8 LDR X2, [X23]
	0x03A11BAC BL 0x2FB46A4
	0x03A11BB0 LDR V1, [X19 + 0x30]
	0x03A11BB4 SCVTF D2, X21
	0x03A11BB8 MOVZ X8, 0x7FF00000
	0x03A11BBC LDR X0, [X19 + 0x18]
	0x03A11BC0 FMUL D0, D0, D1
	0x03A11BC4 FMOV D1, 0.5
	0x03A11BC8 FADD D0, D0, D2
	0x03A11BCC FMOV D2, -0.5
	0x03A11BD0 FADD D1, D0, D1
	0x03A11BD4 FADD D2, D0, D2
	0x03A11BD8 FCMP D0, 0x0
	0x03A11BDC FMOV D0, X8
	0x03A11BE0 FCSEL D1, D2, D1, MI
	0x03A11BE4 FCVTZS X8, D1
	0x03A11BE8 FCMP D1, D0
	0x03A11BEC MOVZ X9, 0x80000000
	0x03A11BF0 CSEL X21, X9, X8, EQ
	0x03A11BF4 CBZ X0, 0x3A11D70
	0x03A11BF8 LDR X2, [X26]
	0x03A11BFC ADD X8, X31, 0xD0
	0x03A11C00 MOV W1, W20
	0x03A11C04 BL 0x2FE4360
	0x03A11C08 LDR X0, [X19 + 0x28]
	0x03A11C0C CBZ X0, 0x3A11D70
	0x03A11C10 LDR X2, [X23]
	0x03A11C14 LDR X22, [X31 + 0xE0]
	0x03A11C18 MOV W1, W20
	0x03A11C1C BL 0x2FB46A4
	0x03A11C20 LDR V0, [X19 + 0x30]
	0x03A11C24 SCVTF D2, X22
	0x03A11C28 MOVZ X8, 0x7FF00000
	0x03A11C2C MOVZ X9, 0x80000000
	0x03A11C30 FMUL D0, D1, D0
	0x03A11C34 FMOV D1, 0.5
	0x03A11C38 FADD D0, D0, D2
	0x03A11C3C FMOV D2, -0.5
	0x03A11C40 FADD D1, D0, D1
	0x03A11C44 FADD D2, D0, D2
	0x03A11C48 FCMP D0, 0x0
	0x03A11C4C FMOV D0, X8
	0x03A11C50 FCSEL D1, D2, D1, MI
	0x03A11C54 FCVTZS X8, D1
	0x03A11C58 FCMP D1, D0
	0x03A11C5C CSEL X2, X9, X8, EQ
	0x03A11C60 ADD X0, X31, 0x70
	0x03A11C64 MOV X1, X21
	0x03A11C68 MOV X3, X31
	0x03A11C6C BL 0x3A04370
	0x03A11C70 LDR X0, [X19 + 0x28]
	0x03A11C74 CBZ X0, 0x3A11D70
	0x03A11C78 LDR X2, [X23]
	0x03A11C7C MOV W1, W20
	0x03A11C80 BL 0x2FB46A4
	0x03A11C84 STR D0, [X31 + 0x90]
	0x03A11C88 LDR X0, [X19 + 0x28]
	0x03A11C8C CBZ X0, 0x3A11D70
	0x03A11C90 LDR X2, [X23]
	0x03A11C94 MOV W1, W20
	0x03A11C98 BL 0x2FB46A4
	0x03A11C9C MOVZ W8, 0x1
	0x03A11CA0 STR D1, [X31 + 0x98]
	0x03A11CA4 STR X25, [X31 + 0x70]
	0x03A11CA8 STR X8, [X31 + 0x88]
	0x03A11CAC LDP V2, V0, [X31 + 0x80]
	0x03A11CB0 LDR V1, [X31 + 0x7]
	0x03A11CB4 LDR X0, [X19 + 0x20]
	0x03A11CB8 STR V0, [X31 + 0x3]
	0x03A11CBC STP V1, V2, [X31 + 0x10]
	0x03A11CC0 CBZ X0, 0x3A11D70
	0x03A11CC4 LDP V0, V1, [X31 + 0x10]
	0x03A11CC8 LDR V2, [X31 + 0x3]
	0x03A11CCC LDR X10, [X24]
	0x03A11CD0 STP V0, V1, [X31 + 0xA0]
	0x03A11CD4 STR V2, [X31 + 0xC]
	0x03A11CD8 LDR W9, [X0 + 0x1C]
	0x03A11CDC LDR X8, [X0 + 0x10]
	0x03A11CE0 ADD W9, W9, 0x1
	0x03A11CE4 STR W9, [X0 + 0x1C]
	0x03A11CE8 CBZ X8, 0x3A11D70
	0x03A11CEC LDRSW X9, [X0 + 0x18]
	0x03A11CF0 LDR W11, [X8 + 0x18]
	0x03A11CF4 CMP W9, W11
	0x03A11CF8 B.CS 0x3A11D20
	0x03A11CFC ADD W10, W9, 0x1
	0x03A11D00 STR W10, [X0 + 0x18]
	0x03A11D04 LDP V2, V0, [X31 + 0xB0]
	0x03A11D08 LDR V1, [X31 + 0xA]
	0x03A11D0C MOVZ W10, 0x30
	0x03A11D10 MADD X8, X9, X10, X8
	0x03A11D14 STP V2, V0, [X8 + 0x30]
	0x03A11D18 STR V1, [X8 + 0x2]
	0x03A11D1C B 0x3A11D44
	0x03A11D20 LDR X8, [X10 + 0x20]
	0x03A11D24 LDP V0, V1, [X31 + 0xA0]
	0x03A11D28 LDR V2, [X31 + 0xC]
	0x03A11D2C ADD X1, X31, 0xD0
	0x03A11D30 LDR X8, [X8 + 0xC0]
	0x03A11D34 LDR X2, [X8 + 0x70]
	0x03A11D38 STP V0, V1, [X31 + 0xD0]
	0x03A11D3C STR V2, [X31 + 0xF]
	0x03A11D40 BL 0x2FE46FC
	0x03A11D44 LDP X20, X19, [X31 + 0x180]
	0x03A11D48 LDP X22, X21, [X31 + 0x170]
	0x03A11D4C LDP X24, X23, [X31 + 0x160]
	0x03A11D50 LDP X26, X25, [X31 + 0x150]
	0x03A11D54 LDP X28, X27, [X31 + 0x140]
	0x03A11D58 LDP X29, X30, [X31 + 0x130]
	0x03A11D5C LDP D9, D8, [X31 + 0x120]
	0x03A11D60 LDP D11, D10, [X31 + 0x110]
	0x03A11D64 LDR V12, [X31 + 0x100]
	0x03A11D68 ADD X31, X31, 0x190
	0x03A11D6C RET
	0x03A11D70 BL 0x1C16F20
	0x03A11D74 SUB X31, X31, 0x180
	0x03A11D78 STR D8, [X31 + 0x120]
	0x03A11D7C STP X29, X30, [X31 + 0x130]
	0x03A11D80 STP X26, X25, [X31 + 0x140]
	0x03A11D84 STP X24, X23, [X31 + 0x150]
	0x03A11D88 STP X22, X21, [X31 + 0x160]
	0x03A11D8C STP X20, X19, [X31 + 0x170]
	0x03A11D90 ADRP X20, 0x9D0000
	0x03A11D94 LDRB W8, [X20 + 0xFAD]
	0x03A11D98 MOV W22, W2
	0x03A11D9C MOV V8.16B, V0.16B
	0x03A11DA0 MOV X19, X1
	0x03A11DA4 MOV X21, X0
	0x03A11DA8 TBNZ X8, 0x0, 0x3A11E08
	0x03A11DAC ADRP X0, 0x743000
	0x03A11DB0 LDR X0, [X0 + 0x400]
	0x03A11DB4 BL 0x1C16CF4
	0x03A11DB8 ADRP X0, 0x743000
	0x03A11DBC LDR X0, [X0 + 0x310]
	0x03A11DC0 BL 0x1C16CF4
	0x03A11DC4 ADRP X0, 0x743000
	0x03A11DC8 LDR X0, [X0 + 0x2C8]
	0x03A11DCC BL 0x1C16CF4
	0x03A11DD0 ADRP X0, 0x743000
	0x03A11DD4 LDR X0, [X0 + 0x490]
	0x03A11DD8 BL 0x1C16CF4
	0x03A11DDC ADRP X0, 0x743000
	0x03A11DE0 LDR X0, [X0 + 0x318]
	0x03A11DE4 BL 0x1C16CF4
	0x03A11DE8 ADRP X0, 0x743000
	0x03A11DEC LDR X0, [X0 + 0x238]
	0x03A11DF0 BL 0x1C16CF4
	0x03A11DF4 ADRP X0, 0x743000
	0x03A11DF8 LDR X0, [X0 + 0x168]
	0x03A11DFC BL 0x1C16CF4
	0x03A11E00 MOVZ W8, 0x1
	0x03A11E04 STRB W8, [X20 + 0xFAD]
	0x03A11E08 LDR X8, [X19]
	0x03A11E0C CBZ X8, 0x3A1223C
	0x03A11E10 LDP W2, W9, [X8 + 0x18]
	0x03A11E14 ADRP X20, 0x743000
	0x03A11E18 LDR X20, [X20 + 0x400]
	0x03A11E1C ADD W9, W9, 0x1
	0x03A11E20 CMP W2, 0x1
	0x03A11E24 STP W31, W9, [X8 + 0x18]
	0x03A11E28 B.LT 0x3A11E3C
	0x03A11E2C LDR X0, [X8 + 0x10]
	0x03A11E30 MOV W1, W31
	0x03A11E34 MOV X3, X31
	0x03A11E38 BL 0x339FA34
	0x03A11E3C MOV X0, X21
	0x03A11E40 BL 0x3A0FFD8
	0x03A11E44 MOV X0, X21
	0x03A11E48 MOV V0.16B, V8.16B
	0x03A11E4C BL 0x3A10228
	0x03A11E50 LDR X0, [X20]
	0x03A11E54 BL 0x1C16F10
	0x03A11E58 MOV W1, W31
	0x03A11E5C MOV X2, X31
	0x03A11E60 MOV X20, X0
	0x03A11E64 BL 0x3A0698C
	0x03A11E68 CBZ X20, 0x3A1223C
	0x03A11E6C LDR X1, [X21 + 0x10]
	0x03A11E70 MOVZ W3, 0x1
	0x03A11E74 MOV X0, X20
	0x03A11E78 MOV W2, W31
	0x03A11E7C MOV X4, X31
	0x03A11E80 BL 0x3A06024
	0x03A11E84 SUB W8, W22, 0x1
	0x03A11E88 FCMP D8, 0x0
	0x03A11E8C STR W8, [X20 + 0x8C]
	0x03A11E90 B.LE 0x3A11ECC
	0x03A11E94 LDR X2, [X19]
	0x03A11E98 MOV X0, X20
	0x03A11E9C LDP X20, X19, [X31 + 0x170]
	0x03A11EA0 LDP X22, X21, [X31 + 0x160]
	0x03A11EA4 LDP X24, X23, [X31 + 0x150]
	0x03A11EA8 LDP X26, X25, [X31 + 0x140]
	0x03A11EAC LDP X29, X30, [X31 + 0x130]
	0x03A11EB0 LDR V8, [X31 + 0x120]
	0x03A11EB4 MOVZ W1, 0x1
	0x03A11EB8 MOVZ W3, 0x2
	0x03A11EBC MOVZ W4, 0x2
	0x03A11EC0 MOV X5, X31
	0x03A11EC4 ADD X31, X31, 0x180
	0x03A11EC8 B 0x3A06C28
	0x03A11ECC LDR X0, [X21 + 0x10]
	0x03A11ED0 ADD X8, X31, 0xF0
	0x03A11ED4 MOV X1, X31
	0x03A11ED8 BL 0x3A062A8
	0x03A11EDC ADRP X8, 0x743000
	0x03A11EE0 LDP X22, X26, [X31 + 0xF0]
	0x03A11EE4 LDP X24, X23, [X31 + 0x100]
	0x03A11EE8 LDR X8, [X8 + 0x168]
	0x03A11EEC LDR X0, [X8]
	0x03A11EF0 BL 0x1C16F10
	0x03A11EF4 ADRP X8, 0x743000
	0x03A11EF8 LDR X8, [X8 + 0x318]
	0x03A11EFC MOVZ W1, 0x4
	0x03A11F00 MOV X21, X0
	0x03A11F04 LDR X2, [X8]
	0x03A11F08 BL 0x2FE3EC4
	0x03A11F0C SUB X22, X22, 0xA
	0x03A11F10 ADD X23, X23, 0xA
	0x03A11F14 MOVI V0.2D, 0x0
	0x03A11F18 ADD X0, X31, 0x90
	0x03A11F1C MOV X1, X22
	0x03A11F20 MOV X2, X23
	0x03A11F24 MOV X3, X31
	0x03A11F28 STP V0, V0, [X31 + 0xA0]
	0x03A11F2C STR V0, [X31 + 0x9]
	0x03A11F30 BL 0x3A04370
	0x03A11F34 CBZ X21, 0x3A1223C
	0x03A11F38 LDP V0, V1, [X31 + 0x90]
	0x03A11F3C LDR V2, [X31 + 0xB]
	0x03A11F40 ADRP X25, 0x743000
	0x03A11F44 LDR X25, [X25 + 0x310]
	0x03A11F48 STP V0, V1, [X31 + 0xC0]
	0x03A11F4C STR V2, [X31 + 0xE]
	0x03A11F50 LDR W9, [X21 + 0x1C]
	0x03A11F54 LDR X8, [X21 + 0x10]
	0x03A11F58 LDR X10, [X25]
	0x03A11F5C ADD W9, W9, 0x1
	0x03A11F60 STR W9, [X21 + 0x1C]
	0x03A11F64 CBZ X8, 0x3A1223C
	0x03A11F68 LDRSW X9, [X21 + 0x18]
	0x03A11F6C LDR W11, [X8 + 0x18]
	0x03A11F70 CMP W9, W11
	0x03A11F74 B.CS 0x3A11F9C
	0x03A11F78 ADD W10, W9, 0x1
	0x03A11F7C STR W10, [X21 + 0x18]
	0x03A11F80 LDP V2, V0, [X31 + 0xD0]
	0x03A11F84 LDR V1, [X31 + 0xC]
	0x03A11F88 MOVZ W10, 0x30
	0x03A11F8C MADD X8, X9, X10, X8
	0x03A11F90 STP V2, V0, [X8 + 0x30]
	0x03A11F94 STR V1, [X8 + 0x2]
	0x03A11F98 B 0x3A11FC4
	0x03A11F9C LDR X8, [X10 + 0x20]
	0x03A11FA0 LDP V0, V1, [X31 + 0xC0]

ISIL:
	001 Move [X31-160], D15
	002 Move [X31-152], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+72], X30
	011 Move [X31+80], X28
	012 Move [X31+88], X27
	013 Move [X31+96], X26
	014 Move [X31+104], X25
	015 Move [X31+112], X24
	016 Move [X31+120], X23
	017 Move [X31+128], X22
	018 Move [X31+136], X21
	019 Move [X31+144], X20
	020 Move [X31+152], X19
	021 Subtract X31, X31, 384
	022 Move X22, 0x9D1000
	023 Move X21, 0x744000
	024 Move X20, 0x744000
	025 Move W8, [X22+4012]
	026 Move X21, [X21+1008]
	027 Move X20, [X20+1016]
	028 Move V8, V0
	029 Move X19, X0
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {84}
	034 Move X0, 0x744000
	035 Move X0, [X0+776]
	036 Call 0x1C17CF4
	037 Move X0, 0x744000
	038 Move X0, [X0+1128]
	039 Call 0x1C17CF4
	040 Move X0, 0x744000
	041 Move X0, [X0+784]
	042 Call 0x1C17CF4
	043 Move X0, 0x744000
	044 Move X0, [X0+1136]
	045 Call 0x1C17CF4
	046 Move X0, 0x744000
	047 Move X0, [X0+368]
	048 Call 0x1C17CF4
	049 Move X0, 0x744000
	050 Move X0, [X0+1016]
	051 Call 0x1C17CF4
	052 Move X0, 0x744000
	053 Move X0, [X0+512]
	054 Call 0x1C17CF4
	055 Move X0, 0x744000
	056 Move X0, [X0+1144]
	057 Call 0x1C17CF4
	058 Move X0, 0x744000
	059 Move X0, [X0+528]
	060 Call 0x1C17CF4
	061 Move X0, 0x744000
	062 Move X0, [X0+336]
	063 Call 0x1C17CF4
	064 Move X0, 0x744000
	065 Move X0, [X0+800]
	066 Call 0x1C17CF4
	067 Move X0, 0x744000
	068 Move X0, [X0+1152]
	069 Call 0x1C17CF4
	070 Move X0, 0x744000
	071 Move X0, [X0+1160]
	072 Call 0x1C17CF4
	073 Move X0, 0x744000
	074 Move X0, [X0+360]
	075 Call 0x1C17CF4
	076 Move X0, 0x744000
	077 Move X0, [X0+1008]
	078 Call 0x1C17CF4
	079 Move X0, 0x6E3000
	080 Move X0, [X0+1448]
	081 Call 0x1C17CF4
	082 Move W8, 1
	083 Move [X22+4012], W8
	084 Move X0, [X21]
	085 Move [X31+280], X31
	086 Move [X31+276], W31
	087 Call 0x1C17F10
	088 Move X1, [X20]
	089 Move X20, X0
	090 Call List`1<Object>..ctor, X0
	091 Move V0, V8
	092 Move X0, X31
	093 Move [X19+16], X20
	094 Move [X19+48], D8
	095 Call ClipperBase.near_zero, V0
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {166}
	100 Move X0, [X19+136]
	101 Compare X0, 0
	102 JumpIfEqual {928}
	103 Move X20, [X19+16]
	104 Move X1, X31
	105 Call PolyNode.get_ChildCount, X0
	106 Compare X20, 0
	107 JumpIfEqual {928}
	108 Move X8, 0x744000
	109 Move X8, [X8+800]
	110 Move W1, W0
	111 Move X0, X20
	112 Move X2, [X8]
	113 Call List`1<Object>.set_Capacity, X0, X1
	114 Move X0, [X19+136]
	115 Compare X0, 0
	116 JumpIfEqual {928}
	117 Move X21, 0x744000
	118 Move X22, 0x744000
	119 Move X21, [X21+336]
	120 Move X22, [X22+776]
	121 Move W20, W31
	122 Move X1, X31
	123 Call PolyNode.get_ChildCount, X0
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move X8, [X19+136]
	126 Compare X8, 0
	127 JumpIfEqual {928}
	128 Move X0, [X8+48]
	129 Compare X0, 0
	130 JumpIfEqual {928}
	131 Move X2, [X21]
	132 Move W1, W20
	133 Call List`1<Object>.get_Item, X0, X1
	134 Compare X0, 0
	135 JumpIfEqual {928}
	136 Move W9, [X0+40]
	137 Move X8, X0
	138 Compare W9, 0
	139 JumpIfNotEqual {162}
	140 Move X0, [X19+16]
	141 Compare X0, 0
	142 JumpIfEqual {928}
	143 Move W10, [X0+28]
	144 Move X1, [X8+24]
	145 Move X8, [X0+16]
	146 Move X9, [X22]
	147 Add W10, W10, 1
	148 Move [X0+28], W10
	149 Compare X8, 0
	150 JumpIfEqual {928}
	151 NotImplemented "Instruction LDRSW not yet implemented."
	152 Move W11, [X8+24]
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Add W9, W10, 1
	155 Add X8, X8, X10
	156 Move [X0+24], W9
	157 Move [X8+32], X1
	158 Move X8, [X9+32]
	159 Move X8, [X8+192]
	160 Move X2, [X8+112]
	161 Call List`1<Object>.AddWithResize, X0, X1
	162 Move X0, [X19+136]
	163 Add W20, W20, 1
	164 Compare X0, 0
	165 JumpIfNotEqual {122}
	166 Move V11, [X19+144]
	167 Move X20, 0x6E3000
	168 Move X20, [X20+1448]
	169 Move D10, 0.25
	170 NotImplemented "Instruction FCMP not yet implemented."
	171 NotImplemented "Instruction FABS not yet implemented."
	172 Move X0, [X20]
	173 Move W8, [X0+224]
	174 Compare W8, 0
	175 JumpIfNotEqual {177}
	176 Call 0x1C17DFC
	177 Move D0, 0.25
	178 Multiply D10, D9, D0
	179 NotImplemented "Instruction FCMP not yet implemented."
	180 Move X0, [X20]
	181 Move W8, [X0+224]
	182 Compare W8, 0
	183 JumpIfNotEqual {186}
	184 Call 0x1C17DFC
	185 Move V10, [X19+144]
	186 Move X0, [X20]
	187 Move W8, [X0+224]
	188 Compare W8, 0
	189 JumpIfNotEqual {191}
	190 Call 0x1C17DFC
	191 NotImplemented "Instruction FDIV not yet implemented."
	192 Move D1, 1
	193 Subtract D0, D1, D0
	194 Call 0x3EB2B80
	195 Move X8, -49426432
	196 Move V1, [X8+1208]
	197 Move X8, -49422336
	198 Move V9, [X8+1144]
	199 Add X0, X31, 24
	200 NotImplemented "Instruction FDIV not yet implemented."
	201 Add X1, X31, 16
	202 NotImplemented "Instruction FDIV not yet implemented."
	203 Call 0x3EB2E40
	204 Move D1, [X31+16]
	205 Move D0, [X31+24]
	206 NotImplemented "Instruction FDIV not yet implemented."
	207 NotImplemented "Instruction FCMP not yet implemented."
	208 Move [X19+80], D2
	209 Move [X19+64], D0
	210 Move [X19+72], D1
	211 NotImplemented "Instruction FNEG not yet implemented."
	212 Move [X19+64], D0
	213 Move X0, [X19+136]
	214 Compare X0, 0
	215 JumpIfEqual {928}
	216 Move X20, [X19+16]
	217 Move X1, X31
	218 Call PolyNode.get_ChildCount, X0
	219 Compare X20, 0
	220 JumpIfEqual {928}
	221 Move X8, 0x744000
	222 Move X8, [X8+800]
	223 Move W1, W0
	224 ShiftRight W1, 31
	225 And W1, W1, 0x3FFFFFFF
	226 Move X0, X20
	227 Move X2, [X8]
	228 Call List`1<Object>.set_Capacity, X0, X1
	229 Move X0, [X19+136]
	230 Compare X0, 0
	231 JumpIfEqual {928}
	232 Move X26, 0x744000
	233 Move X28, 0x744000
	234 Move X29, 0x744000
	235 Move X26, [X26+336]
	236 Move X28, [X28+528]
	237 Move X29, [X29+1144]
	238 Move W20, W31
	239 Move D13, 1
	240 Move D14, 0.5
	241 Move D15, -0.5
	242 Move X27, 0x80000000
	243 Move X1, X31
	244 Call PolyNode.get_ChildCount, X0
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move X8, [X19+136]
	247 Compare X8, 0
	248 JumpIfEqual {928}
	249 Move X0, [X8+48]
	250 Compare X0, 0
	251 JumpIfEqual {928}
	252 Move X2, [X26]
	253 Move W1, W20
	254 Call List`1<Object>.get_Item, X0, X1
	255 Compare X0, 0
	256 JumpIfEqual {928}
	257 Move X8, [X0+24]
	258 Move X21, X0
	259 Move [X19+24], X8
	260 Compare X8, 0
	261 JumpIfEqual {928}
	262 Move W23, [X8+24]
	263 Compare W23, 0
	264 JumpIfEqual {924}
	265 NotImplemented "Instruction FCMP not yet implemented."
	266 Move X8, 0x744000
	267 Move X8, [X8+360]
	268 Move X0, [X8]
	269 Call 0x1C17F10
	270 Move X8, 0x744000
	271 Move X8, [X8+368]
	272 Move X24, X0
	273 Move X1, [X8]
	274 Call List`1<IntPoint>..ctor, X0
	275 Subtract W22, W23, 1
	276 Move [X19+32], X24
	277 Move W8, [X21+36]
	278 Compare W8, 0
	279 JumpIfEqual {553}
	280 Move X0, [X19+24]
	281 Move X23, 0x7FF00000
	282 Compare X0, 0
	283 JumpIfEqual {928}
	284 Move D10, -1
	285 Move W22, 4
	286 Move D9, -1
	287 Move X2, [X28]
	288 Add X8, X31, 336
	289 Move W1, W31
	290 Call List`1<IntPoint>.get_Item, X0, X1
	291 Move X0, [X19+24]
	292 Compare X0, 0
	293 JumpIfEqual {928}
	294 Move V0, [X31+344]
	295 Multiply D1, D9, D8
	296 Move X2, [X28]
	297 Move D11, X23
	298 NotImplemented "Instruction SCVTF not yet implemented."
	299 Add D0, D1, D0
	300 Add D1, D0, D14
	301 Add D2, D0, D15
	302 NotImplemented "Instruction FCMP not yet implemented."
	303 NotImplemented "Instruction FCSEL not yet implemented."
	304 NotImplemented "Instruction FCVTZS not yet implemented."
	305 NotImplemented "Instruction FCMP not yet implemented."
	306 NotImplemented "Instruction CSEL not yet implemented."
	307 Add X8, X31, 336
	308 Move W1, W31
	309 Call List`1<IntPoint>.get_Item, X0, X1
	310 Move V0, [X31+352]
	311 Multiply D1, D10, D8
	312 NotImplemented "Instruction MOVI not yet implemented."
	313 Add X0, X31, 224
	314 NotImplemented "Instruction SCVTF not yet implemented."
	315 Add D0, D1, D0
	316 Add D1, D0, D14
	317 Add D2, D0, D15
	318 NotImplemented "Instruction FCMP not yet implemented."
	319 NotImplemented "Instruction FCSEL not yet implemented."
	320 NotImplemented "Instruction FCVTZS not yet implemented."
	321 NotImplemented "Instruction FCMP not yet implemented."
	322 NotImplemented "Instruction CSEL not yet implemented."
	323 Move X1, X21
	324 Move X3, X31
	325 Move [X31+240], V3
	326 Move [X31+248], V3
	327 Move [X31+14], V3
	328 Call IntPoint..ctor, X0, X1, X2
	329 Compare X24, 0
	330 JumpIfEqual {928}
	331 Move V0, [X31+224]
	332 Move V1, [X31+240]
	333 Move V2, [X31+16]
	334 Move X10, 0x744000
	335 Move [X31+288], V0
	336 Move [X31+296], V1
	337 Move [X31+20], V2
	338 Move W9, [X24+28]
	339 Move X8, [X24+16]
	340 Move X10, [X10+784]
	341 Add W9, W9, 1
	342 Move X10, [X10]
	343 Move [X24+28], W9
	344 Compare X8, 0
	345 JumpIfEqual {928}
	346 NotImplemented "Instruction LDRSW not yet implemented."
	347 Move W11, [X8+24]
	348 NotImplemented "Instruction CMP not yet implemented."
	349 Add W10, W9, 1
	350 Move [X24+24], W10
	351 Move V1, [X31+304]
	352 Move V0, [X31+320]
	353 Move V2, [X31+18]
	354 Move W10, 48
	355 NotImplemented "Instruction MADD not yet implemented."
	356 Move [X8+48], V1
	357 Move [X8+56], V0
	358 Move [X8+2], V2
	359 Move X8, [X10+32]
	360 Move V0, [X31+288]
	361 Move V1, [X31+304]
	362 Move V2, [X31+20]
	363 Add X1, X31, 336
	364 Move X8, [X8+192]
	365 Move X0, X24
	366 Move X2, [X8+112]
	367 Move [X31+336], V0
	368 Move [X31+344], V1
	369 Move [X31+23], V2
	370 Call List`1<IntPoint>.AddWithResize, X0, X1
	371 NotImplemented "Instruction FCMP not yet implemented."
	372 Move V0, V10
	373 Move D9, 1
	374 NotImplemented "Instruction FCMP not yet implemented."
	375 Move D0, 1
	376 Move D9, -1
	377 Move V0, V10
	378 Subtract W22, W22, 1
	379 Move X0, [X19+24]
	380 Move X24, [X19+32]
	381 Move V10, V0
	382 Compare X0, 0
	383 JumpIfNotEqual {287}
	384 NotImplemented "Instruction CMP not yet implemented."
	385 Move W8, [X21+40]
	386 Compare W8, 0
	387 JumpIfNotEqual {924}
	388 Move X0, [X19+40]
	389 Compare X0, 0
	390 JumpIfEqual {928}
	391 Move W8, [X0+28]
	392 Move W1, W23
	393 Add W8, W8, 1
	394 Move [X0+24], W31
	395 Move [X0+28], W8
	396 Move X8, 0x744000
	397 Move X8, [X8+1152]
	398 Move X2, [X8]
	399 Call List`1<DoublePoint>.set_Capacity, X0, X1
	400 NotImplemented "Instruction CMP not yet implemented."
	401 Move W24, 1
	402 Move X0, [X19+24]
	403 Compare X0, 0
	404 JumpIfEqual {928}
	405 Move X2, [X28]
	406 Move X25, [X19+40]
	407 Subtract W1, W24, 1
	408 Add X8, X31, 288
	409 Call List`1<IntPoint>.get_Item, X0, X1
	410 Move V0, [X31+288]
	411 Move V1, [X31+304]
	412 Move V2, [X31+20]
	413 Move [X31+336], V0
	414 Move [X31+344], V1
	415 Move [X31+23], V2
	416 Move X0, [X19+24]
	417 Compare X0, 0
	418 JumpIfEqual {928}
	419 Move X2, [X28]
	420 Add X8, X31, 288
	421 Move W1, W24
	422 Call List`1<IntPoint>.get_Item, X0, X1
	423 Move V0, [X31+288]
	424 Move V1, [X31+304]
	425 Move V2, [X31+320]
	426 Move V3, [X31+336]
	427 Move V4, [X31+352]
	428 Move V5, [X31+368]
	429 Add X0, X31, 176
	430 Add X1, X31, 128
	431 Move [X31+128], V0
	432 Move [X31+136], V1
	433 Move [X31+160], V2
	434 Move [X31+168], V3
	435 Move [X31+192], V4
	436 Move [X31+200], V5
	437 Call ClipperOffset.GetUnitNormal, X0, X1
	438 Compare X25, 0
	439 JumpIfEqual {928}
	440 Move X9, 0x744000
	441 Move W10, [X25+28]
	442 Move X8, [X25+16]
	443 Move X9, [X9+1128]
	444 Add W10, W10, 1
	445 Move X9, [X9]
	446 Move [X25+28], W10
	447 Compare X8, 0
	448 JumpIfEqual {928}
	449 NotImplemented "Instruction LDRSW not yet implemented."
	450 Move W11, [X8+24]
	451 NotImplemented "Instruction CMP not yet implemented."
	452 Add W9, W10, 1
	453 Add X8, X8, X10
	454 Move [X25+24], W9
	455 Move [X8+32], D0
	456 Move [X8+40], D1
	457 Move X8, [X9+32]
	458 Move X0, X25
	459 Move X8, [X8+192]
	460 Move X1, [X8+112]
	461 Call List`1<DoublePoint>.AddWithResize, X0, X1
	462 Add W24, W24, 1
	463 NotImplemented "Instruction CMP not yet implemented."
	464 Move W8, [X21+40]
	465 Move X24, [X19+40]
	466 NotImplemented "Instruction CMP not yet implemented."
	467 Move X0, [X19+24]
	468 Compare X0, 0
	469 JumpIfEqual {928}
	470 Move X2, [X28]
	471 Add X8, X31, 288
	472 Move W1, W22
	473 Call List`1<IntPoint>.get_Item, X0, X1
	474 Move V0, [X31+288]
	475 Move V1, [X31+304]
	476 Move V2, [X31+20]
	477 Move [X31+336], V0
	478 Move [X31+344], V1
	479 Move [X31+23], V2
	480 Move X0, [X19+24]
	481 Compare X0, 0
	482 JumpIfEqual {928}
	483 Move X2, [X28]
	484 Add X8, X31, 288
	485 Move W1, W31
	486 Call List`1<IntPoint>.get_Item, X0, X1
	487 Move V0, [X31+288]
	488 Move V1, [X31+304]
	489 Move V2, [X31+320]
	490 Move V3, [X31+336]
	491 Move V4, [X31+352]
	492 Move V5, [X31+368]
	493 Add X0, X31, 80
	494 Add X1, X31, 32
	495 Move [X31+32], V0
	496 Move [X31+40], V1
	497 Move [X31+64], V2
	498 Move [X31+72], V3
	499 Move [X31+96], V4
	500 Move [X31+104], V5
	501 Call ClipperOffset.GetUnitNormal, X0, X1
	502 Compare X24, 0
	503 JumpIfNotEqual {517}
	504 Compare X24, 0
	505 JumpIfEqual {928}
	506 Move X2, [X29]
	507 Subtract W1, W23, 2
	508 Move X0, X24
	509 Call List`1<DoublePoint>.get_Item, X0, X1
	510 Add X0, X31, 336
	511 Move X1, X31
	512 Move [X31+336], X31
	513 Move [X31+344], X31
	514 Call DoublePoint..ctor, X0, X1
	515 Move D0, [X31+336]
	516 Move D1, [X31+344]
	517 Move X9, 0x744000
	518 Move W10, [X24+28]
	519 Move X8, [X24+16]
	520 Move X9, [X9+1128]
	521 Add W10, W10, 1
	522 Move X9, [X9]
	523 Move [X24+28], W10
	524 Compare X8, 0
	525 JumpIfEqual {928}
	526 NotImplemented "Instruction LDRSW not yet implemented."
	527 Move W11, [X8+24]
	528 NotImplemented "Instruction CMP not yet implemented."
	529 Add W9, W10, 1
	530 Add X8, X8, X10
	531 Move [X24+24], W9
	532 Move [X8+32], D0
	533 Move [X8+40], D1
	534 Move X8, [X9+32]
	535 Move X0, X24
	536 Move X8, [X8+192]
	537 Move X1, [X8+112]
	538 Call List`1<DoublePoint>.AddWithResize, X0, X1
	539 Move W8, [X21+40]
	540 NotImplemented "Instruction CMP not yet implemented."
	541 Compare W8, 0
	542 JumpIfNotEqual {690}
	543 NotImplemented "Instruction CMP not yet implemented."
	544 Move [X31+284], W22
	545 Move W22, W31
	546 Move W3, [X21+36]
	547 Add X2, X31, 284
	548 Move X0, X19
	549 Move W1, W22
	550 Call ClipperOffset.OffsetPoint, X0, X1, X2, X3
	551 Add W22, W22, 1
	552 NotImplemented "Instruction CMP not yet implemented."
	553 NotImplemented "Instruction FCMP not yet implemented."
	554 Move X23, 0x7FF00000
	555 Move X0, [X19+24]
	556 Compare X0, 0
	557 JumpIfEqual {928}
	558 Move D9, 1
	559 Move D10, X31
	560 Move W22, 2
	561 Move X2, [X28]
	562 Add X8, X31, 336
	563 Move W1, W31
	564 Call List`1<IntPoint>.get_Item, X0, X1
	565 Move X0, [X19+24]
	566 Compare X0, 0
	567 JumpIfEqual {928}
	568 Move V0, [X31+344]
	569 Multiply D1, D9, D8
	570 Move X2, [X28]
	571 Move D11, X23
	572 NotImplemented "Instruction SCVTF not yet implemented."
	573 Add D0, D1, D0
	574 Add D1, D0, D14
	575 Add D2, D0, D15
	576 NotImplemented "Instruction FCMP not yet implemented."
	577 NotImplemented "Instruction FCSEL not yet implemented."
	578 NotImplemented "Instruction FCVTZS not yet implemented."
	579 NotImplemented "Instruction FCMP not yet implemented."
	580 NotImplemented "Instruction CSEL not yet implemented."
	581 Add X8, X31, 336
	582 Move W1, W31
	583 Call List`1<IntPoint>.get_Item, X0, X1
	584 Move V0, [X31+352]
	585 Multiply D1, D10, D8
	586 NotImplemented "Instruction MOVI not yet implemented."
	587 Add X0, X31, 224
	588 NotImplemented "Instruction SCVTF not yet implemented."
	589 Add D0, D1, D0
	590 Add D1, D0, D14
	591 Add D2, D0, D15
	592 NotImplemented "Instruction FCMP not yet implemented."
	593 NotImplemented "Instruction FCSEL not yet implemented."
	594 NotImplemented "Instruction FCVTZS not yet implemented."
	595 NotImplemented "Instruction FCMP not yet implemented."
	596 NotImplemented "Instruction CSEL not yet implemented."
	597 Move X1, X21
	598 Move X3, X31
	599 Move [X31+240], V3
	600 Move [X31+248], V3
	601 Move [X31+14], V3
	602 Call IntPoint..ctor, X0, X1, X2
	603 Compare X24, 0
	604 JumpIfEqual {928}
	605 Move V0, [X31+224]
	606 Move V1, [X31+240]
	607 Move V2, [X31+16]
	608 Move X10, 0x744000
	609 Move [X31+288], V0
	610 Move [X31+296], V1
	611 Move [X31+20], V2
	612 Move W9, [X24+28]
	613 Move X8, [X24+16]
	614 Move X10, [X10+784]
	615 Add W9, W9, 1
	616 Move X10, [X10]
	617 Move [X24+28], W9
	618 Compare X8, 0
	619 JumpIfEqual {928}
	620 NotImplemented "Instruction LDRSW not yet implemented."
	621 Move W11, [X8+24]
	622 NotImplemented "Instruction CMP not yet implemented."
	623 Add W10, W9, 1
	624 Move [X24+24], W10
	625 Move V1, [X31+304]
	626 Move V0, [X31+320]
	627 Move V2, [X31+18]
	628 Move W10, 48
	629 NotImplemented "Instruction MADD not yet implemented."
	630 Move [X8+48], V1
	631 Move [X8+56], V0
	632 Move [X8+2], V2
	633 Move X8, [X10+32]
	634 Move V0, [X31+288]
	635 Move V1, [X31+304]
	636 Move V2, [X31+20]
	637 Add X1, X31, 336
	638 Move X8, [X8+192]
	639 Move X0, X24
	640 Move X2, [X8+112]
	641 Move [X31+336], V0
	642 Move [X31+344], V1
	643 Move [X31+23], V2
	644 Call List`1<IntPoint>.AddWithResize, X0, X1
	645 NotImplemented "Instruction SCVTF not yet implemented."
	646 NotImplemented "Instruction FCMP not yet implemented."
	647 Move D1, [X19+64]
	648 Move D0, [X19+72]
	649 Move X0, [X19+24]
	650 Move X24, [X19+32]
	651 Add W22, W22, 1
	652 Multiply D2, D10, D0
	653 Multiply D3, D9, D1
	654 Multiply D0, D9, D0
	655 Multiply D1, D10, D1
	656 Add D10, D2, D3
	657 Subtract D9, D0, D1
	658 Compare X0, 0
	659 JumpIfNotEqual {561}
	660 NotImplemented "Instruction CMP not yet implemented."
	661 Move [X31+280], W22
	662 Move W24, W31
	663 Move W3, [X21+36]
	664 Add X2, X31, 280
	665 Move X0, X19
	666 Move W1, W24
	667 Call ClipperOffset.OffsetPoint, X0, X1, X2, X3
	668 Add W24, W24, 1
	669 NotImplemented "Instruction CMP not yet implemented."
	670 Move X0, [X19+16]
	671 Compare X0, 0
	672 JumpIfEqual {928}
	673 Move X9, 0x744000
	674 Move X1, [X19+32]
	675 Move W10, [X0+28]
	676 Move X8, [X0+16]
	677 Move X9, [X9+776]
	678 Add W10, W10, 1
	679 Move X9, [X9]
	680 Move [X0+28], W10
	681 Compare X8, 0
	682 JumpIfEqual {928}
	683 NotImplemented "Instruction LDRSW not yet implemented."
	684 Move W11, [X8+24]
	685 NotImplemented "Instruction CMP not yet implemented."
	686 Add W9, W10, 1
	687 Add X8, X8, X10
	688 Move [X0+24], W9
	689 Move [X8+32], X1
	690 NotImplemented "Instruction CMP not yet implemented."
	691 Move [X31+276], W31
	692 Move W24, 2
	693 Move W3, [X21+36]
	694 Subtract W1, W24, 1
	695 Add X2, X31, 276
	696 Move X0, X19
	697 Call ClipperOffset.OffsetPoint, X0, X1, X2, X3
	698 Add W24, W24, 1
	699 NotImplemented "Instruction CMP not yet implemented."
	700 Move X24, [X19+40]
	701 Move [X19+56], X31
	702 Compare X24, 0
	703 JumpIfEqual {928}
	704 Move X2, [X29]
	705 Move X0, X24
	706 Move W1, W22
	707 Call List`1<DoublePoint>.get_Item, X0, X1
	708 Move X0, [X19+40]
	709 Compare X0, 0
	710 JumpIfEqual {928}
	711 Move X2, [X29]
	712 Move W1, W22
	713 Move V9, V0
	714 Subtract W23, W23, 2
	715 Call List`1<DoublePoint>.get_Item, X0, X1
	716 NotImplemented "Instruction FNEG not yet implemented."
	717 NotImplemented "Instruction FNEG not yet implemented."
	718 Add X0, X31, 336
	719 Move X1, X31
	720 Move [X31+336], X31
	721 Move [X31+344], X31
	722 Call DoublePoint..ctor, X0, V0, V1
	723 Move X8, 0x744000
	724 Move D0, [X31+336]
	725 Move D1, [X31+344]
	726 Move X8, [X8+1160]
	727 Move X0, X24
	728 Move W1, W22
	729 Move X2, [X8]
	730 Call List`1<DoublePoint>.set_Item, X0, X1, X2
	731 Move X0, X19
	732 Move W1, W22
	733 Move W2, W23
	734 Call ClipperOffset.DoRound, X0, X1, X2
	735 Move X24, [X19+40]
	736 Move W25, W22
	737 Compare X24, 0
	738 JumpIfEqual {928}
	739 NotImplemented "Instruction CMP not yet implemented."
	740 Move X2, [X29]
	741 Subtract W25, W25, 1
	742 Move X0, X24
	743 Move W1, W25
	744 Call List`1<DoublePoint>.get_Item, X0, X1
	745 Move X0, [X19+40]
	746 Compare X0, 0
	747 JumpIfEqual {928}
	748 Move X2, [X29]
	749 Move W1, W25
	750 Move V9, V0
	751 Call List`1<DoublePoint>.get_Item, X0, X1
	752 NotImplemented "Instruction FNEG not yet implemented."
	753 NotImplemented "Instruction FNEG not yet implemented."
	754 Add X0, X31, 336
	755 Move X1, X31
	756 Move [X31+336], X31
	757 Move [X31+344], X31
	758 Call DoublePoint..ctor, X0, V0, V1
	759 Move X8, 0x744000
	760 Move D0, [X31+336]
	761 Move D1, [X31+344]
	762 Move X8, [X8+1160]
	763 Add W1, W25, 1
	764 Move X0, X24
	765 Move X2, [X8]
	766 Call List`1<DoublePoint>.set_Item, X0, X1, X2
	767 Move X24, [X19+40]
	768 Compare X24, 0
	769 JumpIfNotEqual {739}
	770 Move X2, [X29]
	771 Move W1, 1
	772 Move X0, X24
	773 Call List`1<DoublePoint>.get_Item, X0, X1
	774 Move X0, [X19+40]
	775 Compare X0, 0
	776 JumpIfEqual {928}
	777 Move X2, [X29]
	778 Move W1, 1
	779 Move V9, V0
	780 Call List`1<DoublePoint>.get_Item, X0, X1
	781 NotImplemented "Instruction FNEG not yet implemented."
	782 NotImplemented "Instruction FNEG not yet implemented."
	783 Add X0, X31, 336
	784 Move X1, X31
	785 Move [X31+336], X31
	786 Move [X31+344], X31
	787 Call DoublePoint..ctor, X0, V0, V1
	788 Move X8, 0x744000
	789 Move D0, [X31+336]
	790 Move D1, [X31+344]
	791 Move X8, [X8+1160]
	792 Move X0, X24
	793 Move W1, W31
	794 Move X2, [X8]
	795 Call List`1<DoublePoint>.set_Item, X0, X1, X2
	796 NotImplemented "Instruction CMP not yet implemented."
	797 Move [X31+276], W22
	798 Move W3, [X21+36]
	799 Subtract W22, W22, 1
	800 Add X2, X31, 276
	801 Move X0, X19
	802 Move W1, W22
	803 Call ClipperOffset.OffsetPoint, X0, X1, X2, X3
	804 NotImplemented "Instruction CMP not yet implemented."
	805 Move W8, 1
	806 Move W2, 1
	807 Move X0, X19
	808 Move W1, W31
	809 Move [X31+276], W8
	810 Move [X19+56], X31
	811 Call ClipperOffset.DoRound, X0, X1, X2
	812 Move X8, [X9+32]
	813 Move X8, [X8+192]
	814 Move X2, [X8+112]
	815 Call List`1<Object>.AddWithResize, X0, X1
	816 Move X8, 0x744000
	817 Move X8, [X8+360]
	818 Move X0, [X8]
	819 Call 0x1C17F10
	820 Move X8, 0x744000
	821 Move X8, [X8+368]
	822 Move X24, X0
	823 Move X1, [X8]
	824 Call List`1<IntPoint>..ctor, X0
	825 Move X0, [X19+40]
	826 Move [X19+32], X24
	827 Compare X0, 0
	828 JumpIfEqual {928}
	829 Move X2, [X29]
	830 Move W1, W22
	831 Call List`1<DoublePoint>.get_Item, X0, X1
	832 Move X24, [X19+40]
	833 Move V9, V0
	834 NotImplemented "Instruction CMP not yet implemented."
	835 Move V10, V1
	836 Move W25, W23
	837 Compare X24, 0
	838 JumpIfEqual {928}
	839 Move X2, [X29]
	840 Subtract W26, W25, 2
	841 Move X0, X24
	842 Move W1, W26
	843 Call List`1<DoublePoint>.get_Item, X0, X1
	844 Move X0, [X19+40]
	845 Compare X0, 0
	846 JumpIfEqual {928}
	847 Move X2, [X29]
	848 Move W1, W26
	849 Move V11, V0
	850 Subtract W25, W25, 1
	851 Call List`1<DoublePoint>.get_Item, X0, X1
	852 NotImplemented "Instruction FNEG not yet implemented."
	853 NotImplemented "Instruction FNEG not yet implemented."
	854 Add X0, X31, 336
	855 Move X1, X31
	856 Move [X31+336], X31
	857 Move [X31+344], X31
	858 Call DoublePoint..ctor, X0, V0, V1
	859 Move X8, 0x744000
	860 Move D0, [X31+336]
	861 Move D1, [X31+344]
	862 Move X8, [X8+1160]
	863 Move X0, X24
	864 Move W1, W25
	865 Move X2, [X8]
	866 Call List`1<DoublePoint>.set_Item, X0, X1, X2
	867 Move X24, [X19+40]
	868 NotImplemented "Instruction CMP not yet implemented."
	869 NotImplemented "Instruction FNEG not yet implemented."
	870 NotImplemented "Instruction FNEG not yet implemented."
	871 Add X0, X31, 336
	872 Move X1, X31
	873 Move [X31+336], X31
	874 Move [X31+344], X31
	875 Call DoublePoint..ctor, X0, V0, V1
	876 Compare X24, 0
	877 JumpIfEqual {928}
	878 Move X8, 0x744000
	879 Move D0, [X31+336]
	880 Move D1, [X31+344]
	881 Move X8, [X8+1160]
	882 Move X0, X24
	883 Move W1, W31
	884 Move X2, [X8]
	885 Call List`1<DoublePoint>.set_Item, X0, X1, X2
	886 Move [X31+280], W31
	887 Move X26, 0x744000
	888 Move X26, [X26+336]
	889 Move TEMP, X22
	890 And TEMP, TEMP, -2147483648
	891 Compare TEMP, -2147483648
	892 JumpIfEqual {900}
	893 Move W3, [X21+36]
	894 Subtract W23, W23, 1
	895 Add X2, X31, 280
	896 Move X0, X19
	897 Move W1, W23
	898 Call ClipperOffset.OffsetPoint, X0, X1, X2, X3
	899 NotImplemented "Instruction CMP not yet implemented."
	900 Move X0, [X19+16]
	901 Compare X0, 0
	902 JumpIfEqual {928}
	903 Move X9, 0x744000
	904 Move X1, [X19+32]
	905 Move W10, [X0+28]
	906 Move X8, [X0+16]
	907 Move X9, [X9+776]
	908 Add W10, W10, 1
	909 Move X9, [X9]
	910 Move [X0+28], W10
	911 Compare X8, 0
	912 JumpIfEqual {928}
	913 NotImplemented "Instruction LDRSW not yet implemented."
	914 Move W11, [X8+24]
	915 NotImplemented "Instruction CMP not yet implemented."
	916 Add W9, W10, 1
	917 Add X8, X8, X10
	918 Move [X0+24], W9
	919 Move [X8+32], X1
	920 Move X8, [X9+32]
	921 Move X8, [X8+192]
	922 Move X2, [X8+112]
	923 Call List`1<Object>.AddWithResize, X0, X1
	924 Move X0, [X19+136]
	925 Add W20, W20, 1
	926 Compare X0, 0
	927 JumpIfNotEqual {243}
	928 Call 0x1C17F20
	929 Add X31, X31, 384
	930 Move X20, [X31+144]
	931 Move X19, [X31+152]
	932 Move X22, [X31+128]
	933 Move X21, [X31+136]
	934 Move X24, [X31+112]
	935 Move X23, [X31+120]
	936 Move X26, [X31+96]
	937 Move X25, [X31+104]
	938 Move X28, [X31+80]
	939 Move X27, [X31+88]
	940 Move X29, [X31+64]
	941 Move X30, [X31+72]
	942 Move D9, [X31+48]
	943 Move D8, [X31+56]
	944 Move D11, [X31+32]
	945 Move D10, [X31+40]
	946 Move D13, [X31+16]
	947 Move D12, [X31+24]
	948 Move D15, [X31+160]
	949 Move D14, [X31+168]
	950 Return 

Method: System.Void Execute(ref System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> solution, System.Double delta, System.Int32 inputSize)

Disassembly:
	0x03A12D74 STR V2, [X31 + 0xB]
	0x03A12D78 LDR W9, [X0 + 0x1C]
	0x03A12D7C LDR X8, [X0 + 0x10]
	0x03A12D80 ADD W9, W9, 0x1
	0x03A12D84 STR W9, [X0 + 0x1C]
	0x03A12D88 CBZ X8, 0x3A12E0C
	0x03A12D8C LDRSW X9, [X0 + 0x18]
	0x03A12D90 LDR W11, [X8 + 0x18]
	0x03A12D94 CMP W9, W11
	0x03A12D98 B.CS 0x3A12DC0
	0x03A12D9C ADD W10, W9, 0x1
	0x03A12DA0 STR W10, [X0 + 0x18]
	0x03A12DA4 LDP V2, V0, [X31 + 0xA0]
	0x03A12DA8 LDR V1, [X31 + 0x9]
	0x03A12DAC MOVZ W10, 0x30
	0x03A12DB0 MADD X8, X9, X10, X8
	0x03A12DB4 STP V2, V0, [X8 + 0x30]
	0x03A12DB8 STR V1, [X8 + 0x2]
	0x03A12DBC B 0x3A12DE4
	0x03A12DC0 LDR X8, [X10 + 0x20]
	0x03A12DC4 LDP V0, V1, [X31 + 0x90]
	0x03A12DC8 LDR V2, [X31 + 0xB]
	0x03A12DCC ADD X1, X31, 0xC0
	0x03A12DD0 LDR X8, [X8 + 0xC0]
	0x03A12DD4 LDR X2, [X8 + 0x70]
	0x03A12DD8 STP V0, V1, [X31 + 0xC0]
	0x03A12DDC STR V2, [X31 + 0xE]
	0x03A12DE0 BL 0x2FE46FC
	0x03A12DE4 LDP X20, X19, [X31 + 0x150]
	0x03A12DE8 LDP X22, X21, [X31 + 0x140]
	0x03A12DEC LDP X24, X23, [X31 + 0x130]
	0x03A12DF0 LDP X30, X25, [X31 + 0x120]
	0x03A12DF4 LDR X29, [X31 + 0x118]
	0x03A12DF8 LDP D9, D8, [X31 + 0x108]
	0x03A12DFC LDP D11, D10, [X31 + 0xF8]
	0x03A12E00 LDR V12, [X31 + 0xF0]
	0x03A12E04 ADD X31, X31, 0x160
	0x03A12E08 RET
	0x03A12E0C BL 0x1C16F20
	0x03A12E10 SUB X31, X31, 0x120
	0x03A12E14 STR D10, [X31 + 0xC0]
	0x03A12E18 STP D9, D8, [X31 + 0xD0]
	0x03A12E1C STP X29, X30, [X31 + 0xE0]
	0x03A12E20 STP X24, X23, [X31 + 0xF0]
	0x03A12E24 STP X22, X21, [X31 + 0x100]
	0x03A12E28 STP X20, X19, [X31 + 0x110]
	0x03A12E2C ADRP X22, 0x9CF000
	0x03A12E30 LDRB W8, [X22 + 0xFB1]
	0x03A12E34 MOV V8.16B, V0.16B
	0x03A12E38 MOV W21, W2
	0x03A12E3C MOV W20, W1
	0x03A12E40 MOV X19, X0
	0x03A12E44 TBNZ X8, 0x0, 0x3A12E74
	0x03A12E48 ADRP X0, 0x742000
	0x03A12E4C LDR X0, [X0 + 0x310]
	0x03A12E50 BL 0x1C16CF4
	0x03A12E54 ADRP X0, 0x742000
	0x03A12E58 LDR X0, [X0 + 0x478]
	0x03A12E5C BL 0x1C16CF4
	0x03A12E60 ADRP X0, 0x742000
	0x03A12E64 LDR X0, [X0 + 0x210]
	0x03A12E68 BL 0x1C16CF4
	0x03A12E6C MOVZ W8, 0x1
	0x03A12E70 STRB W8, [X22 + 0xFB1]
	0x03A12E74 MOVI V0.2D, 0x0
	0x03A12E78 STP V0, V0, [X31 + 0x40]
	0x03A12E7C STR V0, [X31 + 0x3]
	0x03A12E80 LDR X0, [X19 + 0x18]
	0x03A12E84 CBZ X0, 0x3A130E8
	0x03A12E88 ADRP X24, 0x742000
	0x03A12E8C LDR X24, [X24 + 0x210]
	0x03A12E90 LDR V10, [X19 + 0x30]
	0x03A12E94 ADD X8, X31, 0x90
	0x03A12E98 MOV W1, W20
	0x03A12E9C LDR X2, [X24]
	0x03A12EA0 BL 0x2FE4360
	0x03A12EA4 LDR X0, [X19 + 0x28]
	0x03A12EA8 CBZ X0, 0x3A130E8
	0x03A12EAC ADRP X23, 0x742000
	0x03A12EB0 LDR X23, [X23 + 0x478]
	0x03A12EB4 LDR X22, [X31 + 0x98]
	0x03A12EB8 MOV W1, W21
	0x03A12EBC LDR X2, [X23]
	0x03A12EC0 BL 0x2FB46A4
	0x03A12EC4 LDR X0, [X19 + 0x28]
	0x03A12EC8 CBZ X0, 0x3A130E8
	0x03A12ECC LDR X2, [X23]
	0x03A12ED0 MOV W1, W20
	0x03A12ED4 MOV V9.16B, V0.16B
	0x03A12ED8 FDIV D10, D10, D8
	0x03A12EDC BL 0x2FB46A4
	0x03A12EE0 FADD D0, D9, D0
	0x03A12EE4 SCVTF D1, X22
	0x03A12EE8 FMUL D0, D10, D0
	0x03A12EEC FMOV D2, 0.5
	0x03A12EF0 FADD D0, D0, D1
	0x03A12EF4 FMOV D1, -0.5
	0x03A12EF8 MOVZ X8, 0x7FF00000
	0x03A12EFC LDR X0, [X19 + 0x18]
	0x03A12F00 FADD D2, D0, D2
	0x03A12F04 FADD D1, D0, D1
	0x03A12F08 FCMP D0, 0x0
	0x03A12F0C FMOV D0, X8
	0x03A12F10 FCSEL D1, D1, D2, MI
	0x03A12F14 FCVTZS X8, D1
	0x03A12F18 FCMP D1, D0
	0x03A12F1C MOVZ X9, 0x80000000
	0x03A12F20 CSEL X22, X9, X8, EQ
	0x03A12F24 CBZ X0, 0x3A130E8
	0x03A12F28 LDR X2, [X24]
	0x03A12F2C ADD X8, X31, 0x90
	0x03A12F30 MOV W1, W20
	0x03A12F34 BL 0x2FE4360
	0x03A12F38 LDR X0, [X19 + 0x28]
	0x03A12F3C CBZ X0, 0x3A130E8
	0x03A12F40 LDR X2, [X23]
	0x03A12F44 LDR X24, [X31 + 0xA0]
	0x03A12F48 MOV W1, W21
	0x03A12F4C BL 0x2FB46A4
	0x03A12F50 LDR X0, [X19 + 0x28]
	0x03A12F54 CBZ X0, 0x3A130E8
	0x03A12F58 LDR X2, [X23]
	0x03A12F5C MOV W1, W20
	0x03A12F60 MOV V8.16B, V1.16B
	0x03A12F64 BL 0x2FB46A4
	0x03A12F68 FADD D1, D8, D1
	0x03A12F6C SCVTF D0, X24
	0x03A12F70 FMUL D1, D10, D1
	0x03A12F74 FMOV D2, 0.5
	0x03A12F78 FADD D0, D1, D0
	0x03A12F7C FMOV D1, -0.5
	0x03A12F80 MOVZ X8, 0x7FF00000
	0x03A12F84 FADD D2, D0, D2
	0x03A12F88 FADD D1, D0, D1
	0x03A12F8C FCMP D0, 0x0
	0x03A12F90 FMOV D0, X8
	0x03A12F94 FCSEL D1, D1, D2, MI
	0x03A12F98 FCVTZS X8, D1
	0x03A12F9C FCMP D1, D0
	0x03A12FA0 MOVZ X9, 0x80000000
	0x03A12FA4 CSEL X2, X9, X8, EQ
	0x03A12FA8 ADD X0, X31, 0x30
	0x03A12FAC MOV X1, X22
	0x03A12FB0 MOV X3, X31
	0x03A12FB4 BL 0x3A04370
	0x03A12FB8 LDR X0, [X19 + 0x28]
	0x03A12FBC CBZ X0, 0x3A130E8
	0x03A12FC0 LDR X2, [X23]
	0x03A12FC4 MOV W1, W21
	0x03A12FC8 BL 0x2FB46A4
	0x03A12FCC LDR X0, [X19 + 0x28]
	0x03A12FD0 CBZ X0, 0x3A130E8
	0x03A12FD4 LDR X2, [X23]
	0x03A12FD8 MOV W1, W20
	0x03A12FDC MOV V8.16B, V0.16B
	0x03A12FE0 BL 0x2FB46A4
	0x03A12FE4 FADD D0, D8, D0
	0x03A12FE8 FMUL D0, D10, D0
	0x03A12FEC STR D0, [X31 + 0x50]
	0x03A12FF0 LDR X0, [X19 + 0x28]
	0x03A12FF4 CBZ X0, 0x3A130E8
	0x03A12FF8 LDR X2, [X23]
	0x03A12FFC MOV W1, W21
	0x03A13000 BL 0x2FB46A4
	0x03A13004 LDR X0, [X19 + 0x28]
	0x03A13008 CBZ X0, 0x3A130E8
	0x03A1300C LDR X2, [X23]
	0x03A13010 MOV W1, W20
	0x03A13014 MOV V8.16B, V1.16B
	0x03A13018 BL 0x2FB46A4
	0x03A1301C FADD D0, D8, D1
	0x03A13020 FMUL D0, D10, D0
	0x03A13024 STR D0, [X31 + 0x58]
	0x03A13028 LDP V1, V2, [X31 + 0x30]
	0x03A1302C LDR X0, [X19 + 0x20]
	0x03A13030 LDR V0, [X31 + 0x5]
	0x03A13034 STP V1, V2, [X31]
	0x03A13038 STR V0, [X31 + 0x2]
	0x03A1303C CBZ X0, 0x3A130E8
	0x03A13040 LDP V0, V1, [X31]
	0x03A13044 LDR V2, [X31 + 0x2]
	0x03A13048 ADRP X9, 0x741000
	0x03A1304C LDR X9, [X9 + 0x310]
	0x03A13050 STP V0, V1, [X31 + 0x60]
	0x03A13054 STR V2, [X31 + 0x8]
	0x03A13058 LDR W11, [X0 + 0x1C]
	0x03A1305C LDR X8, [X0 + 0x10]
	0x03A13060 LDR X10, [X9]
	0x03A13064 ADD W9, W11, 0x1
	0x03A13068 STR W9, [X0 + 0x1C]
	0x03A1306C CBZ X8, 0x3A130E8
	0x03A13070 LDRSW X9, [X0 + 0x18]
	0x03A13074 LDR W11, [X8 + 0x18]
	0x03A13078 CMP W9, W11
	0x03A1307C B.CS 0x3A130A4
	0x03A13080 ADD W10, W9, 0x1
	0x03A13084 STR W10, [X0 + 0x18]
	0x03A13088 LDP V2, V0, [X31 + 0x70]
	0x03A1308C LDR V1, [X31 + 0x6]
	0x03A13090 MOVZ W10, 0x30
	0x03A13094 MADD X8, X9, X10, X8
	0x03A13098 STP V2, V0, [X8 + 0x30]
	0x03A1309C STR V1, [X8 + 0x2]
	0x03A130A0 B 0x3A130C8
	0x03A130A4 LDR X8, [X10 + 0x20]
	0x03A130A8 LDP V0, V1, [X31 + 0x60]
	0x03A130AC LDR V2, [X31 + 0x8]
	0x03A130B0 ADD X1, X31, 0x90
	0x03A130B4 LDR X8, [X8 + 0xC0]
	0x03A130B8 LDR X2, [X8 + 0x70]
	0x03A130BC STP V0, V1, [X31 + 0x90]
	0x03A130C0 STR V2, [X31 + 0xB]
	0x03A130C4 BL 0x2FE46FC
	0x03A130C8 LDP X20, X19, [X31 + 0x110]
	0x03A130CC LDP X22, X21, [X31 + 0x100]
	0x03A130D0 LDP X24, X23, [X31 + 0xF0]
	0x03A130D4 LDP X29, X30, [X31 + 0xE0]
	0x03A130D8 LDP D9, D8, [X31 + 0xD0]
	0x03A130DC LDR V10, [X31 + 0xC0]
	0x03A130E0 ADD X31, X31, 0x120
	0x03A130E4 RET
	0x03A130E8 BL 0x1C16F20
	0x03A130EC STR X30, [X31 - 0x30]!
	0x03A130F0 STP X22, X21, [X31 + 0x10]
	0x03A130F4 STP X20, X19, [X31 + 0x20]
	0x03A130F8 ADRP X21, 0x9CE000
	0x03A130FC ADRP X22, 0x6E0000
	0x03A13100 LDRB W8, [X21 + 0xFB3]
	0x03A13104 LDR X22, [X22 + 0x7D0]
	0x03A13108 MOV X19, X1
	0x03A1310C MOV X20, X0
	0x03A13110 TBNZ X8, 0x0, 0x3A13128
	0x03A13114 ADRP X0, 0x6E0000
	0x03A13118 LDR X0, [X0 + 0x7D0]
	0x03A1311C BL 0x1C16CF4
	0x03A13120 MOVZ W8, 0x1
	0x03A13124 STRB W8, [X21 + 0xFB3]
	0x03A13128 LDR X0, [X22]
	0x03A1312C LDR W8, [X0 + 0xE0]
	0x03A13130 CBNZ W8, 0x3A13138
	0x03A13134 BL 0x1C16DFC
	0x03A13138 MOV X0, X20
	0x03A1313C MOV X1, X19
	0x03A13140 LDP X20, X19, [X31 + 0x20]
	0x03A13144 LDP X22, X21, [X31 + 0x10]
	0x03A13148 MOV X2, X31
	0x03A1314C LDR X30, [X31], #0x30
	0x03A13150 B 0x33B2C70
	0x03A13154 LDR X0, [X0 + 0x98]
	0x03A13158 RET
	0x03A1315C STR X1, [X0 + 0x98]
	0x03A13160 RET
	0x03A13164 LDR X0, [X0 + 0xA0]
	0x03A13168 RET
	0x03A1316C STR X1, [X0 + 0xA0]
	0x03A13170 RET
	0x03A13174 LDR X0, [X0 + 0x50]
	0x03A13178 RET
	0x03A1317C LDR X0, [X0 + 0x58]
	0x03A13180 CBZ X0, 0x3A1318C
	0x03A13184 MOV X1, X31
	0x03A13188 B 0x3C385F8
	0x03A1318C RET
	0x03A13190 LDP S0, S1, [X0 + 0xD0]
	0x03A13194 LDP S2, S3, [X0 + 0xD8]
	0x03A13198 RET
	0x03A1319C STP S0, S1, [X0 + 0xD0]
	0x03A131A0 STP S2, S3, [X0 + 0xD8]
	0x03A131A4 RET
	0x03A131A8 STP X30, X21, [X31 - 0x20]!
	0x03A131AC STP X20, X19, [X31 + 0x10]
	0x03A131B0 ADRP X21, 0x9CE000
	0x03A131B4 ADRP X20, 0x6E0000
	0x03A131B8 LDRB W8, [X21 + 0xFB4]
	0x03A131BC LDR X20, [X20 + 0x598]
	0x03A131C0 MOV X19, X0
	0x03A131C4 TBNZ X8, 0x0, 0x3A131E8
	0x03A131C8 ADRP X0, 0x6E7000
	0x03A131CC LDR X0, [X0 + 0x700]
	0x03A131D0 BL 0x1C16CF4
	0x03A131D4 ADRP X0, 0x6E0000
	0x03A131D8 LDR X0, [X0 + 0x598]
	0x03A131DC BL 0x1C16CF4
	0x03A131E0 MOVZ W8, 0x1
	0x03A131E4 STRB W8, [X21 + 0xFB4]
	0x03A131E8 LDR X0, [X20]
	0x03A131EC LDR X20, [X19 + 0x90]
	0x03A131F0 LDR W8, [X0 + 0xE0]
	0x03A131F4 CBNZ W8, 0x3A131FC
	0x03A131F8 BL 0x1C16DFC
	0x03A131FC MOV X0, X31
	0x03A13200 MOV X1, X20
	0x03A13204 MOV X2, X31
	0x03A13208 BL 0x3C3883C
	0x03A1320C TBZ X0, 0x0, 0x3A13234
	0x03A13210 ADRP X8, 0x6E7000
	0x03A13214 LDR X8, [X8 + 0x700]
	0x03A13218 LDR X0, [X8]
	0x03A1321C BL 0x1C16F10
	0x03A13220 MOV X1, X31
	0x03A13224 MOV X20, X0
	0x03A13228 BL 0x3C17028
	0x03A1322C STR X20, [X19 + 0x90]
	0x03A13230 B 0x3A13238
	0x03A13234 LDR X20, [X19 + 0x90]
	0x03A13238 MOV X0, X20
	0x03A1323C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 384
	002 Move [X31+288], D8
	003 Move [X31+304], X29
	004 Move [X31+312], X30
	005 Move [X31+320], X26
	006 Move [X31+328], X25
	007 Move [X31+336], X24
	008 Move [X31+344], X23
	009 Move [X31+352], X22
	010 Move [X31+360], X21
	011 Move [X31+368], X20
	012 Move [X31+376], X19
	013 Move X20, 0x9D0000
	014 Move W8, [X20+4013]
	015 Move W22, W2
	016 Move V8, V0
	017 Move X19, X1
	018 Move X21, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {46}
	023 Move X0, 0x743000
	024 Move X0, [X0+1024]
	025 Call 0x1C17CF4
	026 Move X0, 0x743000
	027 Move X0, [X0+784]
	028 Call 0x1C17CF4
	029 Move X0, 0x743000
	030 Move X0, [X0+712]
	031 Call 0x1C17CF4
	032 Move X0, 0x743000
	033 Move X0, [X0+1168]
	034 Call 0x1C17CF4
	035 Move X0, 0x743000
	036 Move X0, [X0+792]
	037 Call 0x1C17CF4
	038 Move X0, 0x743000
	039 Move X0, [X0+568]
	040 Call 0x1C17CF4
	041 Move X0, 0x743000
	042 Move X0, [X0+360]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X20+4013], W8
	046 Move X8, [X19]
	047 Compare X8, 0
	048 JumpIfEqual {355}
	049 Move W2, [X8+24]
	050 Move W9, [X8+28]
	051 Move X20, 0x743000
	052 Move X20, [X20+1024]
	053 Add W9, W9, 1
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move [X8+24], W31
	056 Move [X8+28], W9
	057 Move X0, [X8+16]
	058 Move W1, W31
	059 Move X3, X31
	060 Call Array.Clear, X0, X1, X2
	061 Move X0, X21
	062 Call ClipperOffset.FixOrientations, X0
	063 Move X0, X21
	064 Move V0, V8
	065 Call ClipperOffset.DoOffset, X0, V0
	066 Move X0, [X20]
	067 Call 0x1C17F10
	068 Move W1, W31
	069 Move X2, X31
	070 Move X20, X0
	071 Call Clipper..ctor, X0, X1
	072 Compare X20, 0
	073 JumpIfEqual {355}
	074 Move X1, [X21+16]
	075 Move W3, 1
	076 Move X0, X20
	077 Move W2, W31
	078 Move X4, X31
	079 Call ClipperBase.AddPaths, X0, X1, X2, X3
	080 Subtract W8, W22, 1
	081 NotImplemented "Instruction FCMP not yet implemented."
	082 Move [X20+140], W8
	083 Move X2, [X19]
	084 Move X0, X20
	085 Move X20, [X31+368]
	086 Move X19, [X31+376]
	087 Move X22, [X31+352]
	088 Move X21, [X31+360]
	089 Move X24, [X31+336]
	090 Move X23, [X31+344]
	091 Move X26, [X31+320]
	092 Move X25, [X31+328]
	093 Move X29, [X31+304]
	094 Move X30, [X31+312]
	095 Move V8, [X31+288]
	096 Move W1, 1
	097 Move W3, 2
	098 Move W4, 2
	099 Move X5, X31
	100 Add X31, X31, 384
	101 Call Clipper.Execute, X0, X1, X2, X3, X4
	102 Return 
	103 Move X0, [X21+16]
	104 Add X8, X31, 240
	105 Move X1, X31
	106 Call ClipperBase.GetBounds, X0
	107 Move X8, 0x743000
	108 Move X22, [X31+240]
	109 Move X26, [X31+248]
	110 Move X24, [X31+256]
	111 Move X23, [X31+264]
	112 Move X8, [X8+360]
	113 Move X0, [X8]
	114 Call 0x1C17F10
	115 Move X8, 0x743000
	116 Move X8, [X8+792]
	117 Move W1, 4
	118 Move X21, X0
	119 Move X2, [X8]
	120 Call List`1<IntPoint>..ctor, X0, X1
	121 Subtract X22, X22, 10
	122 Add X23, X23, 10
	123 NotImplemented "Instruction MOVI not yet implemented."
	124 Add X0, X31, 144
	125 Move X1, X22
	126 Move X2, X23
	127 Move X3, X31
	128 Move [X31+160], V0
	129 Move [X31+168], V0
	130 Move [X31+9], V0
	131 Call IntPoint..ctor, X0, X1, X2
	132 Compare X21, 0
	133 JumpIfEqual {355}
	134 Move V0, [X31+144]
	135 Move V1, [X31+160]
	136 Move V2, [X31+11]
	137 Move X25, 0x743000
	138 Move X25, [X25+784]
	139 Move [X31+192], V0
	140 Move [X31+200], V1
	141 Move [X31+14], V2
	142 Move W9, [X21+28]
	143 Move X8, [X21+16]
	144 Move X10, [X25]
	145 Add W9, W9, 1
	146 Move [X21+28], W9
	147 Compare X8, 0
	148 JumpIfEqual {355}
	149 NotImplemented "Instruction LDRSW not yet implemented."
	150 Move W11, [X8+24]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Add W10, W9, 1
	153 Move [X21+24], W10
	154 Move V2, [X31+208]
	155 Move V0, [X31+224]
	156 Move V1, [X31+12]
	157 Move W10, 48
	158 NotImplemented "Instruction MADD not yet implemented."
	159 Move [X8+48], V2
	160 Move [X8+56], V0
	161 Move [X8+2], V1
	162 Move X8, [X10+32]
	163 Move V0, [X31+192]
	164 Move V1, [X31+208]
	165 Move V2, [X31+14]
	166 Add X1, X31, 240
	167 Move X8, [X8+192]
	168 Move X0, X21
	169 Move X2, [X8+112]
	170 Move [X31+240], V0
	171 Move [X31+248], V1
	172 Move [X31+17], V2
	173 Call List`1<IntPoint>.AddWithResize, X0, X1
	174 Add X24, X24, 10
	175 NotImplemented "Instruction MOVI not yet implemented."
	176 Add X0, X31, 96
	177 Move X1, X24
	178 Move X2, X23
	179 Move X3, X31
	180 Move [X31+112], V0
	181 Move [X31+120], V0
	182 Move [X31+6], V0
	183 Call IntPoint..ctor, X0, X1, X2
	184 Move V0, [X31+96]
	185 Move V1, [X31+112]
	186 Move V2, [X31+8]
	187 Move X10, [X25]
	188 Move [X31+192], V0
	189 Move [X31+200], V1
	190 Move [X31+14], V2
	191 Move W9, [X21+28]
	192 Move X8, [X21+16]
	193 Add W9, W9, 1
	194 Move [X21+28], W9
	195 Compare X8, 0
	196 JumpIfEqual {355}
	197 NotImplemented "Instruction LDRSW not yet implemented."
	198 Move W11, [X8+24]
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Add W10, W9, 1
	201 Move [X21+24], W10
	202 Move V2, [X31+208]
	203 Move V0, [X31+224]
	204 Move V1, [X31+12]
	205 Move W10, 48
	206 NotImplemented "Instruction MADD not yet implemented."
	207 Move [X8+48], V2
	208 Move [X8+56], V0
	209 Move [X8+2], V1
	210 Move X8, [X10+32]
	211 Move V0, [X31+192]
	212 Move V1, [X31+208]
	213 Move V2, [X31+14]
	214 Add X1, X31, 240
	215 Move X8, [X8+192]
	216 Move X0, X21
	217 Move X2, [X8+112]
	218 Move [X31+240], V0
	219 Move [X31+248], V1
	220 Move [X31+17], V2
	221 Call List`1<IntPoint>.AddWithResize, X0, X1
	222 Subtract X23, X26, 10
	223 NotImplemented "Instruction MOVI not yet implemented."
	224 Add X0, X31, 48
	225 Move X1, X24
	226 Move X2, X23
	227 Move X3, X31
	228 Move [X31+64], V0
	229 Move [X31+72], V0
	230 Move [X31+3], V0
	231 Call IntPoint..ctor, X0, X1, X2
	232 Move V0, [X31+48]
	233 Move V1, [X31+64]
	234 Move V2, [X31+5]
	235 Move X10, [X25]
	236 Move [X31+192], V0
	237 Move [X31+200], V1
	238 Move [X31+14], V2
	239 Move W9, [X21+28]
	240 Move X8, [X21+16]
	241 Add W9, W9, 1
	242 Move [X21+28], W9
	243 Compare X8, 0
	244 JumpIfEqual {355}
	245 NotImplemented "Instruction LDRSW not yet implemented."
	246 Move W11, [X8+24]
	247 NotImplemented "Instruction CMP not yet implemented."
	248 Add W10, W9, 1
	249 Move [X21+24], W10
	250 Move V2, [X31+208]
	251 Move V0, [X31+224]
	252 Move V1, [X31+12]
	253 Move W10, 48
	254 NotImplemented "Instruction MADD not yet implemented."
	255 Move [X8+48], V2
	256 Move [X8+56], V0
	257 Move [X8+2], V1
	258 Move X8, [X10+32]
	259 Move V0, [X31+192]
	260 Move V1, [X31+208]
	261 Move V2, [X31+14]
	262 Add X1, X31, 240
	263 Move X8, [X8+192]
	264 Move X0, X21
	265 Move X2, [X8+112]
	266 Move [X31+240], V0
	267 Move [X31+248], V1
	268 Move [X31+17], V2
	269 Call List`1<IntPoint>.AddWithResize, X0, X1
	270 NotImplemented "Instruction MOVI not yet implemented."
	271 Add X0, X31, 0
	272 Move X1, X22
	273 Move X2, X23
	274 Move X3, X31
	275 Move [X31+16], V0
	276 Move [X31+24], V0
	277 Move [X31], V0
	278 Call IntPoint..ctor, X0, X1, X2
	279 Move V0, [X31]
	280 Move V1, [X31+16]
	281 Move V2, [X31+2]
	282 Move X10, [X25]
	283 Move [X31+192], V0
	284 Move [X31+200], V1
	285 Move [X31+14], V2
	286 Move W9, [X21+28]
	287 Move X8, [X21+16]
	288 Add W9, W9, 1
	289 Move [X21+28], W9
	290 Compare X8, 0
	291 JumpIfEqual {355}
	292 NotImplemented "Instruction LDRSW not yet implemented."
	293 Move W11, [X8+24]
	294 NotImplemented "Instruction CMP not yet implemented."
	295 Add W10, W9, 1
	296 Move [X21+24], W10
	297 Move V2, [X31+208]
	298 Move V0, [X31+224]
	299 Move V1, [X31+12]
	300 Move W10, 48
	301 NotImplemented "Instruction MADD not yet implemented."
	302 Move [X8+48], V2
	303 Move [X8+56], V0
	304 Move [X8+2], V1
	305 Move X8, [X10+32]
	306 Move V0, [X31+192]
	307 Move V1, [X31+208]
	308 Move V2, [X31+14]
	309 Add X1, X31, 240
	310 Move X8, [X8+192]
	311 Move X0, X21
	312 Move X2, [X8+112]
	313 Move [X31+240], V0
	314 Move [X31+248], V1
	315 Move [X31+17], V2
	316 Call List`1<IntPoint>.AddWithResize, X0, X1
	317 Move W3, 1
	318 Move X0, X20
	319 Move X1, X21
	320 Move W2, W31
	321 Move X4, X31
	322 Move W22, 1
	323 Call ClipperBase.AddPath, X0, X1, X2, X3
	324 Move [X20+144], W22
	325 Move X2, [X19]
	326 Move W1, 1
	327 Move W3, 3
	328 Move W4, 3
	329 Move X0, X20
	330 Move X5, X31
	331 Call Clipper.Execute, X0, X1, X2, X3, X4
	332 Move X0, [X19]
	333 Compare X0, 0
	334 JumpIfEqual {355}
	335 Move W8, [X0+24]
	336 NotImplemented "Instruction CMP not yet implemented."
	337 Move X8, 0x742000
	338 Move X8, [X8+1168]
	339 Move W1, W31
	340 Move X2, [X8]
	341 Call List`1<Object>.RemoveAt, X0, X1
	342 Move X20, [X31+368]
	343 Move X19, [X31+376]
	344 Move X22, [X31+352]
	345 Move X21, [X31+360]
	346 Move X24, [X31+336]
	347 Move X23, [X31+344]
	348 Move X26, [X31+320]
	349 Move X25, [X31+328]
	350 Move X29, [X31+304]
	351 Move X30, [X31+312]
	352 Move V8, [X31+288]
	353 Add X31, X31, 384
	354 Return 
	355 Call 0x1C17F20

Method: System.Void Execute(ref UnityEngine.Rendering.Universal.PolyTree solution, System.Double delta)

Disassembly:
	0x03A13240 LDP X30, X21, [X31], #0x20
	0x03A13244 RET
	0x03A13248 STR X30, [X31 - 0x10]!
	0x03A1324C LDR X8, [X0 + 0x98]
	0x03A13250 CBZ X8, 0x3A13284
	0x03A13254 LDR W8, [X8 + 0x18]
	0x03A13258 CMP W8, 0x2
	0x03A1325C B.GE 0x3A13268
	0x03A13260 MOV W0, W31
	0x03A13264 B 0x3A1327C
	0x03A13268 LDR X8, [X0 + 0xA0]
	0x03A1326C CBZ X8, 0x3A13284
	0x03A13270 LDR W8, [X8 + 0x18]
	0x03A13274 CMP W8, 0x1
	0x03A13278 CSET W0, GT
	0x03A1327C LDR X30, [X31], #0x10
	0x03A13280 RET
	0x03A13284 BL 0x1C16F20
	0x03A13288 LDR W0, [X0 + 0x24]
	0x03A1328C RET
	0x03A13290 STP X30, X21, [X31 - 0x20]!
	0x03A13294 STP X20, X19, [X31 + 0x10]
	0x03A13298 ADRP X21, 0x9CE000
	0x03A1329C LDRB W8, [X21 + 0xFB5]
	0x03A132A0 MOV W20, W1
	0x03A132A4 MOV X19, X0
	0x03A132A8 TBNZ X8, 0x0, 0x3A132C0
	0x03A132AC ADRP X0, 0x741000
	0x03A132B0 LDR X0, [X0 + 0x498]
	0x03A132B4 BL 0x1C16CF4
	0x03A132B8 MOVZ W8, 0x1
	0x03A132BC STRB W8, [X21 + 0xFB5]
	0x03A132C0 LDR W8, [X19 + 0x24]
	0x03A132C4 ADRP X21, 0x741000
	0x03A132C8 LDR X21, [X21 + 0x498]
	0x03A132CC CMP W8, W20
	0x03A132D0 B.EQ 0x3A132E0
	0x03A132D4 MOV X0, X19
	0x03A132D8 MOV W1, W31
	0x03A132DC BL 0x3A13304
	0x03A132E0 STR W20, [X19 + 0x24]
	0x03A132E4 LDR X0, [X21]
	0x03A132E8 LDR W8, [X0 + 0xE0]
	0x03A132EC CBNZ W8, 0x3A132F4
	0x03A132F0 BL 0x1C16DFC
	0x03A132F4 MOV X0, X19
	0x03A132F8 LDP X20, X19, [X31 + 0x10]
	0x03A132FC LDP X30, X21, [X31], #0x20
	0x03A13300 B 0x3A13478
	0x03A13304 SUB X31, X31, 0x80
	0x03A13308 STP D13, D12, [X31 + 0x20]
	0x03A1330C STP D11, D10, [X31 + 0x30]
	0x03A13310 STP D9, D8, [X31 + 0x40]
	0x03A13314 STP X30, X23, [X31 + 0x50]
	0x03A13318 STP X22, X21, [X31 + 0x60]
	0x03A1331C STP X20, X19, [X31 + 0x70]
	0x03A13320 MOV X19, X0
	0x03A13324 LDR X0, [X0 + 0x110]
	0x03A13328 MOV W20, W1
	0x03A1332C BL 0x3A13ED4
	0x03A13330 MOV W21, W0
	0x03A13334 LDP S13, S10, [X19 + 0xFC]
	0x03A13338 LDR V12, [X19 + 0x118]
	0x03A1333C LDR V11, [X19 + 0x124]
	0x03A13340 LDR W22, [X19 + 0xF4]
	0x03A13344 LDR W23, [X19 + 0x11C]
	0x03A13348 LDR V8, [X19 + 0xF8]
	0x03A1334C LDR V9, [X19 + 0x120]
	0x03A13350 LDR X0, [X19 + 0x58]
	0x03A13354 STR S10, [X19 + 0x118]
	0x03A13358 STR S13, [X19 + 0x124]
	0x03A1335C STR W22, [X19 + 0x11C]
	0x03A13360 STR S8, [X19 + 0x120]
	0x03A13364 CBZ X0, 0x3A13370
	0x03A13368 MOV X1, X31
	0x03A1336C BL 0x3C385F8
	0x03A13370 LDR W11, [X19 + 0xA8]
	0x03A13374 LDR W10, [X19 + 0x128]
	0x03A13378 LDR W8, [X19 + 0x24]
	0x03A1337C LDR W9, [X19 + 0x12C]
	0x03A13380 FCMP S12, S10
	0x03A13384 STR W0, [X19 + 0xA8]
	0x03A13388 STR W21, [X19 + 0x128]
	0x03A1338C STR W8, [X19 + 0x12C]
	0x03A13390 B.NE 0x3A133C8
	0x03A13394 FCMP S11, S13
	0x03A13398 B.NE 0x3A133C8
	0x03A1339C CMP W23, W22
	0x03A133A0 B.NE 0x3A133C8
	0x03A133A4 FCMP S9, S8
	0x03A133A8 B.NE 0x3A133C8
	0x03A133AC CMP W11, W0
	0x03A133B0 B.NE 0x3A133C8
	0x03A133B4 CMP W10, W21
	0x03A133B8 B.NE 0x3A133C8
	0x03A133BC CMP W9, W8
	0x03A133C0 B.NE 0x3A133C8
	0x03A133C4 TBZ X20, 0x0, 0x3A13458
	0x03A133C8 CMP W8, 0x3
	0x03A133CC B.HI 0x3A13458
	0x03A133D0 ADRP X9, 0xFFFFFFFFFD184000
	0x03A133D4 MOV W8, W8
	0x03A133D8 ADD X9, X9, 0xAD1
	0x03A133DC ADR X10, 0x10
	0x03A133E0 LDRB W11, [X9, X8, LSL]
	0x03A133E4 ADD X10, X10, X11, 0x2, LSL
	0x03A133E8 BR X10
	0x03A133EC LDP S0, S1, [X19 + 0xFC]
	0x03A133F0 LDR V2, [X19 + 0xF8]
	0x03A133F4 LDR W1, [X19 + 0xF4]
	0x03A133F8 ADD X8, X31, 0x8
	0x03A133FC B 0x3A13440
	0x03A13400 LDR X1, [X19 + 0x110]
	0x03A13404 LDR V0, [X19 + 0x100]
	0x03A13408 ADD X8, X31, 0x8
	0x03A1340C MOV X0, X19
	0x03A13410 BL 0x3A14008
	0x03A13414 B 0x3A13448
	0x03A13418 ADD X8, X31, 0x8
	0x03A1341C MOV X0, X19
	0x03A13420 BL 0x3A13980
	0x03A13424 B 0x3A13448
	0x03A13428 ADRP X8, 0xFFFFFFFFFD0D7000
	0x03A1342C LDR V0, [X8 + 0x27C]
	0x03A13430 ADD X8, X31, 0x8
	0x03A13434 FMOV S1, W31
	0x03A13438 FMOV S2, W31
	0x03A1343C MOVZ W1, 0x4
	0x03A13440 MOV X0, X19
	0x03A13444 BL 0x3A14BE4
	0x03A13448 LDR X8, [X31 + 0x18]
	0x03A1344C LDUR V0, [X31 + 0x8]
	0x03A13450 STR X8, [X19 + 0xC8]
	0x03A13454 STUR V0, [X19 + 0xB8]
	0x03A13458 LDP X20, X19, [X31 + 0x70]
	0x03A1345C LDP X22, X21, [X31 + 0x60]
	0x03A13460 LDP X30, X23, [X31 + 0x50]
	0x03A13464 LDP D9, D8, [X31 + 0x40]
	0x03A13468 LDP D11, D10, [X31 + 0x30]
	0x03A1346C LDP D13, D12, [X31 + 0x20]
	0x03A13470 ADD X31, X31, 0x80
	0x03A13474 RET
	0x03A13478 STR X30, [X31 - 0x60]!
	0x03A1347C STP X28, X27, [X31 + 0x10]
	0x03A13480 STP X26, X25, [X31 + 0x20]
	0x03A13484 STP X24, X23, [X31 + 0x30]
	0x03A13488 STP X22, X21, [X31 + 0x40]
	0x03A1348C STP X20, X19, [X31 + 0x50]
	0x03A13490 ADRP X20, 0x9CE000
	0x03A13494 LDRB W8, [X20 + 0xFC3]
	0x03A13498 MOV X19, X0
	0x03A1349C TBNZ X8, 0x0, 0x3A134D8
	0x03A134A0 ADRP X0, 0x6E0000
	0x03A134A4 LDR X0, [X0 + 0xA28]
	0x03A134A8 BL 0x1C16CF4
	0x03A134AC ADRP X0, 0x741000
	0x03A134B0 LDR X0, [X0 + 0x498]
	0x03A134B4 BL 0x1C16CF4
	0x03A134B8 ADRP X0, 0x741000
	0x03A134BC LDR X0, [X0 + 0x4A0]
	0x03A134C0 BL 0x1C16CF4
	0x03A134C4 ADRP X0, 0x741000
	0x03A134C8 LDR X0, [X0 + 0x4A8]
	0x03A134CC BL 0x1C16CF4
	0x03A134D0 MOVZ W8, 0x1
	0x03A134D4 STRB W8, [X20 + 0xFC3]
	0x03A134D8 STR W31, [X31 + 0xC]
	0x03A134DC CBZ X19, 0x3A135F0
	0x03A134E0 LDR W8, [X19 + 0x24]
	0x03A134E4 CMP W8, 0x4
	0x03A134E8 B.NE 0x3A135D0
	0x03A134EC LDR X22, [X19 + 0x50]
	0x03A134F0 CBZ X22, 0x3A135F0
	0x03A134F4 LDR X8, [X22 + 0x18]
	0x03A134F8 CMP W8, 0x1
	0x03A134FC B.LT 0x3A135D0
	0x03A13500 ADRP X25, 0x741000
	0x03A13504 ADRP X26, 0x741000
	0x03A13508 ADRP X27, 0x741000
	0x03A1350C ADRP X28, 0x6E0000
	0x03A13510 LDR X25, [X25 + 0x498]
	0x03A13514 LDR X26, [X26 + 0x4A0]
	0x03A13518 LDR X27, [X27 + 0x4A8]
	0x03A1351C LDR X28, [X28 + 0xA28]
	0x03A13520 MOV X23, X31
	0x03A13524 AND X8, X8, 0x0
	0x03A13528 ADD X24, X22, 0x20
	0x03A1352C CMP X23, W8, UXTW
	0x03A13530 B.CS 0x3A135EC
	0x03A13534 LDR X0, [X25]
	0x03A13538 LDR W20, [X24, X23, LSL #2]
	0x03A1353C LDR W21, [X19 + 0x28]
	0x03A13540 LDR W8, [X0 + 0xE0]
	0x03A13544 CBNZ W8, 0x3A1354C
	0x03A13548 BL 0x1C16DFC
	0x03A1354C MOV W0, W20
	0x03A13550 MOV W1, W21
	0x03A13554 BL 0x3A16908
	0x03A13558 TBZ X0, 0x0, 0x3A135C0
	0x03A1355C MOV W0, W20
	0x03A13560 MOV X1, X31
	0x03A13564 BL 0x3C00A38
	0x03A13568 LDR W8, [X19 + 0x28]
	0x03A1356C MOV X20, X0
	0x03A13570 ADD X0, X31, 0xC
	0x03A13574 MOV X1, X31
	0x03A13578 STR W8, [X31 + 0xC]
	0x03A1357C BL 0x337B6E0
	0x03A13580 LDR X8, [X26]
	0x03A13584 LDR X2, [X27]
	0x03A13588 MOV X3, X0
	0x03A1358C MOV X1, X20
	0x03A13590 MOV X0, X8
	0x03A13594 MOV X4, X31
	0x03A13598 BL 0x32277C4
	0x03A1359C LDR X8, [X28]
	0x03A135A0 MOV X20, X0
	0x03A135A4 LDR W9, [X8 + 0xE0]
	0x03A135A8 CBNZ W9, 0x3A135B4
	0x03A135AC MOV X0, X8
	0x03A135B0 BL 0x1C16DFC
	0x03A135B4 MOV X0, X20
	0x03A135B8 MOV X1, X31
	0x03A135BC BL 0x3C0649C
	0x03A135C0 LDR W8, [X22 + 0x18]
	0x03A135C4 ADD X23, X23, 0x1
	0x03A135C8 CMP X23, W8, SXTW
	0x03A135CC B.LT 0x3A1352C
	0x03A135D0 LDP X20, X19, [X31 + 0x50]
	0x03A135D4 LDP X22, X21, [X31 + 0x40]
	0x03A135D8 LDP X24, X23, [X31 + 0x30]
	0x03A135DC LDP X26, X25, [X31 + 0x20]
	0x03A135E0 LDP X28, X27, [X31 + 0x10]
	0x03A135E4 LDR X30, [X31], #0x60
	0x03A135E8 RET
	0x03A135EC BL 0x1C16F28
	0x03A135F0 BL 0x1C16F20
	0x03A135F4 LDR W0, [X0 + 0x28]
	0x03A135F8 RET
	0x03A135FC STR W1, [X0 + 0x28]
	0x03A13600 RET
	0x03A13604 LDR V0, [X0 + 0x80]
	0x03A13608 RET
	0x03A1360C FMOV S1, 1
	0x03A13610 FCMP S0, 0x0
	0x03A13614 FMIN S0, S0, S1
	0x03A13618 FMOV S1, W31
	0x03A1361C FCSEL S0, S0, S1, PL
	0x03A13620 STR S0, [X0 + 0x80]
	0x03A13624 RET
	0x03A13628 LDRB W0, [X0 + 0x7D]
	0x03A1362C RET
	0x03A13630 AND W8, W1, 0x1
	0x03A13634 STRB W8, [X0 + 0x7D]
	0x03A13638 RET
	0x03A1363C LDR V0, [X0 + 0x88]
	0x03A13640 RET
	0x03A13644 FMOV S1, 1
	0x03A13648 FCMP S0, 0x0
	0x03A1364C FMIN S0, S0, S1
	0x03A13650 FMOV S1, W31
	0x03A13654 FCSEL S0, S0, S1, PL
	0x03A13658 STR S0, [X0 + 0x88]
	0x03A1365C RET
	0x03A13660 LDRB W0, [X0 + 0x84]
	0x03A13664 RET
	0x03A13668 AND W8, W1, 0x1
	0x03A1366C STRB W8, [X0 + 0x84]
	0x03A13670 RET
	0x03A13674 LDP S0, S1, [X0 + 0x30]
	0x03A13678 LDP S2, S3, [X0 + 0x38]
	0x03A1367C RET
	0x03A13680 STP S0, S1, [X0 + 0x30]
	0x03A13684 STP S2, S3, [X0 + 0x38]
	0x03A13688 RET
	0x03A1368C LDR V0, [X0 + 0x40]
	0x03A13690 RET
	0x03A13694 STR S0, [X0 + 0x40]
	0x03A13698 RET
	0x03A1369C LDR V0, [X0 + 0x44]
	0x03A136A0 RET
	0x03A136A4 LDR V0, [X0 + 0x44]
	0x03A136A8 RET
	0x03A136AC STR S0, [X0 + 0x44]
	0x03A136B0 RET
	0x03A136B4 LDRB W0, [X0 + 0x48]
	0x03A136B8 RET
	0x03A136BC AND W8, W1, 0x1
	0x03A136C0 STRB W8, [X0 + 0x48]
	0x03A136C4 RET
	0x03A136C8 LDR W8, [X0 + 0x24]
	0x03A136CC MOVZ W9, 0x58
	0x03A136D0 CMP W8, 0x3
	0x03A136D4 MOVZ W8, 0x60
	0x03A136D8 CSEL X8, X8, X9, EQ
	0x03A136DC LDR X0, [X0, X8, LSL]
	0x03A136E0 RET
	0x03A136E4 STR X1, [X0 + 0x58]
	0x03A136E8 RET
	0x03A136EC LDR V0, [X0 + 0x2C]
	0x03A136F0 RET
	0x03A136F4 FMOV S1, 1
	0x03A136F8 FCMP S0, 0x0
	0x03A136FC FMIN S0, S0, S1
	0x03A13700 FMOV S1, W31
	0x03A13704 FCSEL S0, S0, S1, PL
	0x03A13708 STR S0, [X0 + 0x2C]
	0x03A1370C RET
	0x03A13710 LDR W8, [X0 + 0x70]
	0x03A13714 CMP W8, 0x1
	0x03A13718 CSET W0, EQ
	0x03A1371C RET
	0x03A13720 LDR W0, [X0 + 0x70]
	0x03A13724 RET
	0x03A13728 STR W1, [X0 + 0x70]
	0x03A1372C RET
	0x03A13730 LDR W0, [X0 + 0x68]
	0x03A13734 RET
	0x03A13738 STR W1, [X0 + 0x68]
	0x03A1373C RET
	0x03A13740 LDR V0, [X0 + 0x74]
	0x03A13744 RET
	0x03A13748 LDR W0, [X0 + 0x78]
	0x03A1374C RET
	0x03A13750 LDRB W8, [X0 + 0x84]
	0x03A13754 CBZ W8, 0x3A13768
	0x03A13758 LDR V0, [X0 + 0x88]
	0x03A1375C FCMP S0, 0x0
	0x03A13760 CSET W0, GT
	0x03A13764 RET
	0x03A13768 MOV W0, W31
	0x03A1376C RET
	0x03A13770 MOVZ W8, 0x1
	0x03A13774 STRB W8, [X0 + 0xE0]
	0x03A13778 RET
	0x03A1377C STP X30, X19, [X31 - 0x10]!
	0x03A13780 MOV X1, X31
	0x03A13784 MOV X19, X0
	0x03A13788 BL 0x3C32E90
	0x03A1378C CBZ X0, 0x3A137A8
	0x03A13790 MOV X1, X31
	0x03A13794 BL 0x3C3F58C
	0x03A13798 STP S0, S1, [X19 + 0xAC]
	0x03A1379C STR S2, [X19 + 0xB4]
	0x03A137A0 LDP X30, X19, [X31], #0x10
	0x03A137A4 RET
	0x03A137A8 BL 0x1C16F20
	0x03A137AC STP X30, X25, [X31 - 0x40]!
	0x03A137B0 STP X24, X23, [X31 + 0x10]
	0x03A137B4 STP X22, X21, [X31 + 0x20]
	0x03A137B8 STP X20, X19, [X31 + 0x30]
	0x03A137BC ADRP X20, 0x9CE000
	0x03A137C0 ADRP X21, 0x741000
	0x03A137C4 LDRB W8, [X20 + 0xFB6]
	0x03A137C8 LDR X21, [X21 + 0x498]
	0x03A137CC MOV X19, X0
	0x03A137D0 TBNZ X8, 0x0, 0x3A137E8
	0x03A137D4 ADRP X0, 0x741000
	0x03A137D8 LDR X0, [X0 + 0x498]
	0x03A137DC BL 0x1C16CF4
	0x03A137E0 MOVZ W8, 0x1
	0x03A137E4 STRB W8, [X20 + 0xFB6]
	0x03A137E8 LDR X0, [X21]
	0x03A137EC LDR W8, [X0 + 0xE0]
	0x03A137F0 CBNZ W8, 0x3A137F8
	0x03A137F4 BL 0x1C16DFC
	0x03A137F8 BL 0x3A138DC
	0x03A137FC LDR X8, [X19 + 0x50]
	0x03A13800 CBZ X8, 0x3A138BC
	0x03A13804 MOV X20, X0
	0x03A13808 MOV X23, X31
	0x03A1380C MOV W24, W31
	0x03A13810 MOVZ W21, 0x80000000
	0x03A13814 LDRSW X9, [X8 + 0x18]
	0x03A13818 CMP X23, X9
	0x03A1381C B.GE 0x3A138C0
	0x03A13820 CBZ X20, 0x3A138BC
	0x03A13824 LDR X9, [X20 + 0x18]
	0x03A13828 SUB W25, W9, 0x1
	0x03A1382C CMP W25, W24
	0x03A13830 B.LT 0x3A138B4
	0x03A13834 CMP W25, W9
	0x03A13838 B.CS 0x3A138D8

ISIL:
	001 Subtract X31, X31, 384
	002 Move [X31+288], D8
	003 Move [X31+304], X29
	004 Move [X31+312], X30
	005 Move [X31+320], X26
	006 Move [X31+328], X25
	007 Move [X31+336], X24
	008 Move [X31+344], X23
	009 Move [X31+352], X22
	010 Move [X31+360], X21
	011 Move [X31+368], X20
	012 Move [X31+376], X19
	013 Move X20, 0x9CF000
	014 Move W8, [X20+4014]
	015 Move V8, V0
	016 Move X19, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {45}
	022 Move X0, 0x742000
	023 Move X0, [X0+1024]
	024 Call 0x1C17CF4
	025 Move X0, 0x742000
	026 Move X0, [X0+784]
	027 Call 0x1C17CF4
	028 Move X0, 0x742000
	029 Move X0, [X0+792]
	030 Call 0x1C17CF4
	031 Move X0, 0x742000
	032 Move X0, [X0+336]
	033 Call 0x1C17CF4
	034 Move X0, 0x742000
	035 Move X0, [X0+808]
	036 Call 0x1C17CF4
	037 Move X0, 0x742000
	038 Move X0, [X0+328]
	039 Call 0x1C17CF4
	040 Move X0, 0x742000
	041 Move X0, [X0+360]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X20+4014], W8
	045 Move X0, [X19]
	046 Compare X0, 0
	047 JumpIfEqual {443}
	048 Move X20, 0x742000
	049 Move X20, [X20+1024]
	050 Move X1, X31
	051 Call PolyTree.Clear, X0
	052 Move X0, X21
	053 Call ClipperOffset.FixOrientations, X0
	054 Move X0, X21
	055 Move V0, V8
	056 Call ClipperOffset.DoOffset, X0, V0
	057 Move X0, [X20]
	058 Call 0x1C17F10
	059 Move W1, W31
	060 Move X2, X31
	061 Move X20, X0
	062 Call Clipper..ctor, X0, X1
	063 Compare X20, 0
	064 JumpIfEqual {443}
	065 Move X1, [X21+16]
	066 Move W3, 1
	067 Move X0, X20
	068 Move W2, W31
	069 Move X4, X31
	070 Call ClipperBase.AddPaths, X0, X1, X2, X3
	071 NotImplemented "Instruction FCMP not yet implemented."
	072 Move X2, [X19]
	073 Move X0, X20
	074 Move X20, [X31+368]
	075 Move X19, [X31+376]
	076 Move X22, [X31+352]
	077 Move X21, [X31+360]
	078 Move X24, [X31+336]
	079 Move X23, [X31+344]
	080 Move X26, [X31+320]
	081 Move X25, [X31+328]
	082 Move X29, [X31+304]
	083 Move X30, [X31+312]
	084 Move V8, [X31+288]
	085 Move W1, 1
	086 Move W3, 2
	087 Move W4, 2
	088 Move X5, X31
	089 Add X31, X31, 384
	090 Call Clipper.Execute, X0, X1, X2, X3, X4
	091 Return 
	092 Move X0, [X21+16]
	093 Add X8, X31, 240
	094 Move X1, X31
	095 Call ClipperBase.GetBounds, X0
	096 Move X8, 0x742000
	097 Move X22, [X31+240]
	098 Move X26, [X31+248]
	099 Move X24, [X31+256]
	100 Move X23, [X31+264]
	101 Move X8, [X8+360]
	102 Move X0, [X8]
	103 Call 0x1C17F10
	104 Move X8, 0x742000
	105 Move X8, [X8+792]
	106 Move W1, 4
	107 Move X21, X0
	108 Move X2, [X8]
	109 Call List`1<IntPoint>..ctor, X0, X1
	110 Subtract X22, X22, 10
	111 Add X23, X23, 10
	112 NotImplemented "Instruction MOVI not yet implemented."
	113 Add X0, X31, 144
	114 Move X1, X22
	115 Move X2, X23
	116 Move X3, X31
	117 Move [X31+160], V0
	118 Move [X31+168], V0
	119 Move [X31+9], V0
	120 Call IntPoint..ctor, X0, X1, X2
	121 Compare X21, 0
	122 JumpIfEqual {443}
	123 Move V0, [X31+144]
	124 Move V1, [X31+160]
	125 Move V2, [X31+11]
	126 Move X25, 0x742000
	127 Move X25, [X25+784]
	128 Move [X31+192], V0
	129 Move [X31+200], V1
	130 Move [X31+14], V2
	131 Move W9, [X21+28]
	132 Move X8, [X21+16]
	133 Move X10, [X25]
	134 Add W9, W9, 1
	135 Move [X21+28], W9
	136 Compare X8, 0
	137 JumpIfEqual {443}
	138 NotImplemented "Instruction LDRSW not yet implemented."
	139 Move W11, [X8+24]
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Add W10, W9, 1
	142 Move [X21+24], W10
	143 Move V2, [X31+208]
	144 Move V0, [X31+224]
	145 Move V1, [X31+12]
	146 Move W10, 48
	147 NotImplemented "Instruction MADD not yet implemented."
	148 Move [X8+48], V2
	149 Move [X8+56], V0
	150 Move [X8+2], V1
	151 Move X8, [X10+32]
	152 Move V0, [X31+192]
	153 Move V1, [X31+208]
	154 Move V2, [X31+14]
	155 Add X1, X31, 240
	156 Move X8, [X8+192]
	157 Move X0, X21
	158 Move X2, [X8+112]
	159 Move [X31+240], V0
	160 Move [X31+248], V1
	161 Move [X31+17], V2
	162 Call List`1<IntPoint>.AddWithResize, X0, X1
	163 Add X24, X24, 10
	164 NotImplemented "Instruction MOVI not yet implemented."
	165 Add X0, X31, 96
	166 Move X1, X24
	167 Move X2, X23
	168 Move X3, X31
	169 Move [X31+112], V0
	170 Move [X31+120], V0
	171 Move [X31+6], V0
	172 Call IntPoint..ctor, X0, X1, X2
	173 Move V0, [X31+96]
	174 Move V1, [X31+112]
	175 Move V2, [X31+8]
	176 Move X10, [X25]
	177 Move [X31+192], V0
	178 Move [X31+200], V1
	179 Move [X31+14], V2
	180 Move W9, [X21+28]
	181 Move X8, [X21+16]
	182 Add W9, W9, 1
	183 Move [X21+28], W9
	184 Compare X8, 0
	185 JumpIfEqual {443}
	186 NotImplemented "Instruction LDRSW not yet implemented."
	187 Move W11, [X8+24]
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Add W10, W9, 1
	190 Move [X21+24], W10
	191 Move V2, [X31+208]
	192 Move V0, [X31+224]
	193 Move V1, [X31+12]
	194 Move W10, 48
	195 NotImplemented "Instruction MADD not yet implemented."
	196 Move [X8+48], V2
	197 Move [X8+56], V0
	198 Move [X8+2], V1
	199 Move X8, [X10+32]
	200 Move V0, [X31+192]
	201 Move V1, [X31+208]
	202 Move V2, [X31+14]
	203 Add X1, X31, 240
	204 Move X8, [X8+192]
	205 Move X0, X21
	206 Move X2, [X8+112]
	207 Move [X31+240], V0
	208 Move [X31+248], V1
	209 Move [X31+17], V2
	210 Call List`1<IntPoint>.AddWithResize, X0, X1
	211 Subtract X23, X26, 10
	212 NotImplemented "Instruction MOVI not yet implemented."
	213 Add X0, X31, 48
	214 Move X1, X24
	215 Move X2, X23
	216 Move X3, X31
	217 Move [X31+64], V0
	218 Move [X31+72], V0
	219 Move [X31+3], V0
	220 Call IntPoint..ctor, X0, X1, X2
	221 Move V0, [X31+48]
	222 Move V1, [X31+64]
	223 Move V2, [X31+5]
	224 Move X10, [X25]
	225 Move [X31+192], V0
	226 Move [X31+200], V1
	227 Move [X31+14], V2
	228 Move W9, [X21+28]
	229 Move X8, [X21+16]
	230 Add W9, W9, 1
	231 Move [X21+28], W9
	232 Compare X8, 0
	233 JumpIfEqual {443}
	234 NotImplemented "Instruction LDRSW not yet implemented."
	235 Move W11, [X8+24]
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Add W10, W9, 1
	238 Move [X21+24], W10
	239 Move V2, [X31+208]
	240 Move V0, [X31+224]
	241 Move V1, [X31+12]
	242 Move W10, 48
	243 NotImplemented "Instruction MADD not yet implemented."
	244 Move [X8+48], V2
	245 Move [X8+56], V0
	246 Move [X8+2], V1
	247 Move X8, [X10+32]
	248 Move V0, [X31+192]
	249 Move V1, [X31+208]
	250 Move V2, [X31+14]
	251 Add X1, X31, 240
	252 Move X8, [X8+192]
	253 Move X0, X21
	254 Move X2, [X8+112]
	255 Move [X31+240], V0
	256 Move [X31+248], V1
	257 Move [X31+17], V2
	258 Call List`1<IntPoint>.AddWithResize, X0, X1
	259 NotImplemented "Instruction MOVI not yet implemented."
	260 Add X0, X31, 0
	261 Move X1, X22
	262 Move X2, X23
	263 Move X3, X31
	264 Move [X31+16], V0
	265 Move [X31+24], V0
	266 Move [X31], V0
	267 Call IntPoint..ctor, X0, X1, X2
	268 Move V0, [X31]
	269 Move V1, [X31+16]
	270 Move V2, [X31+2]
	271 Move X10, [X25]
	272 Move [X31+192], V0
	273 Move [X31+200], V1
	274 Move [X31+14], V2
	275 Move W9, [X21+28]
	276 Move X8, [X21+16]
	277 Add W9, W9, 1
	278 Move [X21+28], W9
	279 Compare X8, 0
	280 JumpIfEqual {443}
	281 NotImplemented "Instruction LDRSW not yet implemented."
	282 Move W11, [X8+24]
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Add W10, W9, 1
	285 Move [X21+24], W10
	286 Move V2, [X31+208]
	287 Move V0, [X31+224]
	288 Move V1, [X31+12]
	289 Move W10, 48
	290 NotImplemented "Instruction MADD not yet implemented."
	291 Move [X8+48], V2
	292 Move [X8+56], V0
	293 Move [X8+2], V1
	294 Move X8, [X10+32]
	295 Move V0, [X31+192]
	296 Move V1, [X31+208]
	297 Move V2, [X31+14]
	298 Add X1, X31, 240
	299 Move X8, [X8+192]
	300 Move X0, X21
	301 Move X2, [X8+112]
	302 Move [X31+240], V0
	303 Move [X31+248], V1
	304 Move [X31+17], V2
	305 Call List`1<IntPoint>.AddWithResize, X0, X1
	306 Move W3, 1
	307 Move X0, X20
	308 Move X1, X21
	309 Move W2, W31
	310 Move X4, X31
	311 Move W22, 1
	312 Call ClipperBase.AddPath, X0, X1, X2, X3
	313 Move [X20+144], W22
	314 Move X2, [X19]
	315 Move W1, 1
	316 Move W3, 3
	317 Move W4, 3
	318 Move X0, X20
	319 Move X5, X31
	320 Call Clipper.Execute, X0, X1, X2, X3, X4
	321 Move X0, [X19]
	322 Compare X0, 0
	323 JumpIfEqual {443}
	324 Move X1, X31
	325 Call PolyNode.get_ChildCount, X0
	326 NotImplemented "Instruction CMP not yet implemented."
	327 Move X8, [X19]
	328 Compare X8, 0
	329 JumpIfEqual {443}
	330 Move X0, [X8+48]
	331 Compare X0, 0
	332 JumpIfEqual {443}
	333 Move X23, 0x742000
	334 Move X23, [X23+336]
	335 Move W1, W31
	336 Move X2, [X23]
	337 Call List`1<Object>.get_Item, X0, X1
	338 Compare X0, 0
	339 JumpIfEqual {443}
	340 Move X1, X31
	341 Call PolyNode.get_ChildCount, X0
	342 NotImplemented "Instruction CMP not yet implemented."
	343 Move X8, [X19]
	344 Compare X8, 0
	345 JumpIfEqual {443}
	346 Move X0, [X8+48]
	347 Compare X0, 0
	348 JumpIfEqual {443}
	349 Move X2, [X23]
	350 Move W1, W31
	351 Call List`1<Object>.get_Item, X0, X1
	352 Move X8, [X19]
	353 Compare X8, 0
	354 JumpIfEqual {443}
	355 Move X20, X0
	356 Compare X0, 0
	357 JumpIfEqual {443}
	358 Move X21, [X8+48]
	359 Move X0, X20
	360 Move X1, X31
	361 Call PolyNode.get_ChildCount, X0
	362 Compare X21, 0
	363 JumpIfEqual {443}
	364 Move X8, 0x742000
	365 Move X8, [X8+808]
	366 Move W1, W0
	367 Move X0, X21
	368 Move X2, [X8]
	369 Call List`1<Object>.set_Capacity, X0, X1
	370 Move X8, [X19]
	371 Compare X8, 0
	372 JumpIfEqual {443}
	373 Move X0, [X20+48]
	374 Compare X0, 0
	375 JumpIfEqual {443}
	376 Move X2, [X23]
	377 Move X21, [X8+48]
	378 Move W1, W31
	379 Call List`1<Object>.get_Item, X0, X1
	380 Compare X21, 0
	381 JumpIfEqual {443}
	382 Move X8, 0x742000
	383 Move X8, [X8+328]
	384 Move X2, X0
	385 Move X0, X21
	386 Move W1, W31
	387 Move X3, [X8]
	388 Call List`1<Object>.set_Item, X0, X1, X2
	389 Move X8, [X19]
	390 Compare X8, 0
	391 JumpIfEqual {443}
	392 Move X0, [X8+48]
	393 Compare X0, 0
	394 JumpIfEqual {443}
	395 Move X2, [X23]
	396 Move W1, W31
	397 Call List`1<Object>.get_Item, X0, X1
	398 Compare X0, 0
	399 JumpIfEqual {443}
	400 Move X8, [X19]
	401 Move X1, X31
	402 Move [X0+16], X8
	403 Move X0, X20
	404 Call PolyNode.get_ChildCount, X0
	405 NotImplemented "Instruction CMP not yet implemented."
	406 Move W21, 1
	407 Move X0, [X20+48]
	408 Compare X0, 0
	409 JumpIfEqual {443}
	410 Move X2, [X23]
	411 Move X22, [X19]
	412 Move W1, W21
	413 Call List`1<Object>.get_Item, X0, X1
	414 Compare X22, 0
	415 JumpIfEqual {443}
	416 Move X1, X0
	417 Move X0, X22
	418 Move X2, X31
	419 Call PolyNode.AddChild, X0, X1
	420 Move X0, X20
	421 Move X1, X31
	422 Add W21, W21, 1
	423 Call PolyNode.get_ChildCount, X0
	424 NotImplemented "Instruction CMP not yet implemented."
	425 Move X0, [X19]
	426 Compare X0, 0
	427 JumpIfEqual {443}
	428 Move X1, X31
	429 Call PolyTree.Clear, X0
	430 Move X20, [X31+368]
	431 Move X19, [X31+376]
	432 Move X22, [X31+352]
	433 Move X21, [X31+360]
	434 Move X24, [X31+336]
	435 Move X23, [X31+344]
	436 Move X26, [X31+320]
	437 Move X25, [X31+328]
	438 Move X29, [X31+304]
	439 Move X30, [X31+312]
	440 Move V8, [X31+288]
	441 Add X31, X31, 384
	442 Return 
	443 Call 0x1C17F20

Method: System.Void OffsetPoint(System.Int32 j, ref System.Int32 k, UnityEngine.Rendering.Universal.JoinType jointype)

Disassembly:
	0x03A11FA4 LDR V2, [X31 + 0xE]
	0x03A11FA8 ADD X1, X31, 0xF0
	0x03A11FAC LDR X8, [X8 + 0xC0]
	0x03A11FB0 MOV X0, X21
	0x03A11FB4 LDR X2, [X8 + 0x70]
	0x03A11FB8 STP V0, V1, [X31 + 0xF0]
	0x03A11FBC STR V2, [X31 + 0x11]
	0x03A11FC0 BL 0x2FE46FC
	0x03A11FC4 ADD X24, X24, 0xA
	0x03A11FC8 MOVI V0.2D, 0x0
	0x03A11FCC ADD X0, X31, 0x60
	0x03A11FD0 MOV X1, X24
	0x03A11FD4 MOV X2, X23
	0x03A11FD8 MOV X3, X31
	0x03A11FDC STP V0, V0, [X31 + 0x70]
	0x03A11FE0 STR V0, [X31 + 0x6]
	0x03A11FE4 BL 0x3A04370
	0x03A11FE8 LDP V0, V1, [X31 + 0x60]
	0x03A11FEC LDR V2, [X31 + 0x8]
	0x03A11FF0 LDR X10, [X25]
	0x03A11FF4 STP V0, V1, [X31 + 0xC0]
	0x03A11FF8 STR V2, [X31 + 0xE]
	0x03A11FFC LDR W9, [X21 + 0x1C]
	0x03A12000 LDR X8, [X21 + 0x10]
	0x03A12004 ADD W9, W9, 0x1
	0x03A12008 STR W9, [X21 + 0x1C]
	0x03A1200C CBZ X8, 0x3A1223C
	0x03A12010 LDRSW X9, [X21 + 0x18]
	0x03A12014 LDR W11, [X8 + 0x18]
	0x03A12018 CMP W9, W11
	0x03A1201C B.CS 0x3A12044
	0x03A12020 ADD W10, W9, 0x1
	0x03A12024 STR W10, [X21 + 0x18]
	0x03A12028 LDP V2, V0, [X31 + 0xD0]
	0x03A1202C LDR V1, [X31 + 0xC]
	0x03A12030 MOVZ W10, 0x30
	0x03A12034 MADD X8, X9, X10, X8
	0x03A12038 STP V2, V0, [X8 + 0x30]
	0x03A1203C STR V1, [X8 + 0x2]
	0x03A12040 B 0x3A1206C
	0x03A12044 LDR X8, [X10 + 0x20]
	0x03A12048 LDP V0, V1, [X31 + 0xC0]
	0x03A1204C LDR V2, [X31 + 0xE]
	0x03A12050 ADD X1, X31, 0xF0
	0x03A12054 LDR X8, [X8 + 0xC0]
	0x03A12058 MOV X0, X21
	0x03A1205C LDR X2, [X8 + 0x70]
	0x03A12060 STP V0, V1, [X31 + 0xF0]
	0x03A12064 STR V2, [X31 + 0x11]
	0x03A12068 BL 0x2FE46FC
	0x03A1206C SUB X23, X26, 0xA
	0x03A12070 MOVI V0.2D, 0x0
	0x03A12074 ADD X0, X31, 0x30
	0x03A12078 MOV X1, X24
	0x03A1207C MOV X2, X23
	0x03A12080 MOV X3, X31
	0x03A12084 STP V0, V0, [X31 + 0x40]
	0x03A12088 STR V0, [X31 + 0x3]
	0x03A1208C BL 0x3A04370
	0x03A12090 LDP V0, V1, [X31 + 0x30]
	0x03A12094 LDR V2, [X31 + 0x5]
	0x03A12098 LDR X10, [X25]
	0x03A1209C STP V0, V1, [X31 + 0xC0]
	0x03A120A0 STR V2, [X31 + 0xE]
	0x03A120A4 LDR W9, [X21 + 0x1C]
	0x03A120A8 LDR X8, [X21 + 0x10]
	0x03A120AC ADD W9, W9, 0x1
	0x03A120B0 STR W9, [X21 + 0x1C]
	0x03A120B4 CBZ X8, 0x3A1223C
	0x03A120B8 LDRSW X9, [X21 + 0x18]
	0x03A120BC LDR W11, [X8 + 0x18]
	0x03A120C0 CMP W9, W11
	0x03A120C4 B.CS 0x3A120EC
	0x03A120C8 ADD W10, W9, 0x1
	0x03A120CC STR W10, [X21 + 0x18]
	0x03A120D0 LDP V2, V0, [X31 + 0xD0]
	0x03A120D4 LDR V1, [X31 + 0xC]
	0x03A120D8 MOVZ W10, 0x30
	0x03A120DC MADD X8, X9, X10, X8
	0x03A120E0 STP V2, V0, [X8 + 0x30]
	0x03A120E4 STR V1, [X8 + 0x2]
	0x03A120E8 B 0x3A12114
	0x03A120EC LDR X8, [X10 + 0x20]
	0x03A120F0 LDP V0, V1, [X31 + 0xC0]
	0x03A120F4 LDR V2, [X31 + 0xE]
	0x03A120F8 ADD X1, X31, 0xF0
	0x03A120FC LDR X8, [X8 + 0xC0]
	0x03A12100 MOV X0, X21
	0x03A12104 LDR X2, [X8 + 0x70]
	0x03A12108 STP V0, V1, [X31 + 0xF0]
	0x03A1210C STR V2, [X31 + 0x11]
	0x03A12110 BL 0x2FE46FC
	0x03A12114 MOVI V0.2D, 0x0
	0x03A12118 ADD X0, X31, 0x0
	0x03A1211C MOV X1, X22
	0x03A12120 MOV X2, X23
	0x03A12124 MOV X3, X31
	0x03A12128 STP V0, V0, [X31 + 0x10]
	0x03A1212C STR V0, [X31]
	0x03A12130 BL 0x3A04370
	0x03A12134 LDP V0, V1, [X31]
	0x03A12138 LDR V2, [X31 + 0x2]
	0x03A1213C LDR X10, [X25]
	0x03A12140 STP V0, V1, [X31 + 0xC0]
	0x03A12144 STR V2, [X31 + 0xE]
	0x03A12148 LDR W9, [X21 + 0x1C]
	0x03A1214C LDR X8, [X21 + 0x10]
	0x03A12150 ADD W9, W9, 0x1
	0x03A12154 STR W9, [X21 + 0x1C]
	0x03A12158 CBZ X8, 0x3A1223C
	0x03A1215C LDRSW X9, [X21 + 0x18]
	0x03A12160 LDR W11, [X8 + 0x18]
	0x03A12164 CMP W9, W11
	0x03A12168 B.CS 0x3A12190
	0x03A1216C ADD W10, W9, 0x1
	0x03A12170 STR W10, [X21 + 0x18]
	0x03A12174 LDP V2, V0, [X31 + 0xD0]
	0x03A12178 LDR V1, [X31 + 0xC]
	0x03A1217C MOVZ W10, 0x30
	0x03A12180 MADD X8, X9, X10, X8
	0x03A12184 STP V2, V0, [X8 + 0x30]
	0x03A12188 STR V1, [X8 + 0x2]
	0x03A1218C B 0x3A121B8
	0x03A12190 LDR X8, [X10 + 0x20]
	0x03A12194 LDP V0, V1, [X31 + 0xC0]
	0x03A12198 LDR V2, [X31 + 0xE]
	0x03A1219C ADD X1, X31, 0xF0
	0x03A121A0 LDR X8, [X8 + 0xC0]
	0x03A121A4 MOV X0, X21
	0x03A121A8 LDR X2, [X8 + 0x70]
	0x03A121AC STP V0, V1, [X31 + 0xF0]
	0x03A121B0 STR V2, [X31 + 0x11]
	0x03A121B4 BL 0x2FE46FC
	0x03A121B8 MOVZ W3, 0x1
	0x03A121BC MOV X0, X20
	0x03A121C0 MOV X1, X21
	0x03A121C4 MOV W2, W31
	0x03A121C8 MOV X4, X31
	0x03A121CC MOVZ W22, 0x1
	0x03A121D0 BL 0x3A05454
	0x03A121D4 STRB W22, [X20 + 0x90]
	0x03A121D8 LDR X2, [X19]
	0x03A121DC MOVZ W1, 0x1
	0x03A121E0 MOVZ W3, 0x3
	0x03A121E4 MOVZ W4, 0x3
	0x03A121E8 MOV X0, X20
	0x03A121EC MOV X5, X31
	0x03A121F0 BL 0x3A06C28
	0x03A121F4 LDR X0, [X19]
	0x03A121F8 CBZ X0, 0x3A1223C
	0x03A121FC LDR W8, [X0 + 0x18]
	0x03A12200 CMP W8, 0x1
	0x03A12204 B.LT 0x3A1221C
	0x03A12208 ADRP X8, 0x742000
	0x03A1220C LDR X8, [X8 + 0x490]
	0x03A12210 MOV W1, W31
	0x03A12214 LDR X2, [X8]
	0x03A12218 BL 0x301DA48
	0x03A1221C LDP X20, X19, [X31 + 0x170]
	0x03A12220 LDP X22, X21, [X31 + 0x160]
	0x03A12224 LDP X24, X23, [X31 + 0x150]
	0x03A12228 LDP X26, X25, [X31 + 0x140]
	0x03A1222C LDP X29, X30, [X31 + 0x130]
	0x03A12230 LDR V8, [X31 + 0x120]
	0x03A12234 ADD X31, X31, 0x180
	0x03A12238 RET
	0x03A1223C BL 0x1C16F20
	0x03A12240 SUB X31, X31, 0x180
	0x03A12244 STR D8, [X31 + 0x120]
	0x03A12248 STP X29, X30, [X31 + 0x130]
	0x03A1224C STP X26, X25, [X31 + 0x140]
	0x03A12250 STP X24, X23, [X31 + 0x150]
	0x03A12254 STP X22, X21, [X31 + 0x160]
	0x03A12258 STP X20, X19, [X31 + 0x170]
	0x03A1225C ADRP X20, 0x9CF000
	0x03A12260 LDRB W8, [X20 + 0xFAE]
	0x03A12264 MOV V8.16B, V0.16B
	0x03A12268 MOV X19, X1
	0x03A1226C MOV X21, X0
	0x03A12270 TBNZ X8, 0x0, 0x3A122D0
	0x03A12274 ADRP X0, 0x742000
	0x03A12278 LDR X0, [X0 + 0x400]
	0x03A1227C BL 0x1C16CF4
	0x03A12280 ADRP X0, 0x742000
	0x03A12284 LDR X0, [X0 + 0x310]
	0x03A12288 BL 0x1C16CF4
	0x03A1228C ADRP X0, 0x742000
	0x03A12290 LDR X0, [X0 + 0x318]
	0x03A12294 BL 0x1C16CF4
	0x03A12298 ADRP X0, 0x742000
	0x03A1229C LDR X0, [X0 + 0x150]
	0x03A122A0 BL 0x1C16CF4
	0x03A122A4 ADRP X0, 0x742000
	0x03A122A8 LDR X0, [X0 + 0x328]
	0x03A122AC BL 0x1C16CF4
	0x03A122B0 ADRP X0, 0x742000
	0x03A122B4 LDR X0, [X0 + 0x148]
	0x03A122B8 BL 0x1C16CF4
	0x03A122BC ADRP X0, 0x742000
	0x03A122C0 LDR X0, [X0 + 0x168]
	0x03A122C4 BL 0x1C16CF4
	0x03A122C8 MOVZ W8, 0x1
	0x03A122CC STRB W8, [X20 + 0xFAE]
	0x03A122D0 LDR X0, [X19]
	0x03A122D4 CBZ X0, 0x3A12838
	0x03A122D8 ADRP X20, 0x742000
	0x03A122DC LDR X20, [X20 + 0x400]
	0x03A122E0 MOV X1, X31
	0x03A122E4 BL 0x3A03AC8
	0x03A122E8 MOV X0, X21
	0x03A122EC BL 0x3A0FFD8
	0x03A122F0 MOV X0, X21
	0x03A122F4 MOV V0.16B, V8.16B
	0x03A122F8 BL 0x3A10228
	0x03A122FC LDR X0, [X20]
	0x03A12300 BL 0x1C16F10
	0x03A12304 MOV W1, W31
	0x03A12308 MOV X2, X31
	0x03A1230C MOV X20, X0
	0x03A12310 BL 0x3A0698C
	0x03A12314 CBZ X20, 0x3A12838
	0x03A12318 LDR X1, [X21 + 0x10]
	0x03A1231C MOVZ W3, 0x1
	0x03A12320 MOV X0, X20
	0x03A12324 MOV W2, W31
	0x03A12328 MOV X4, X31
	0x03A1232C BL 0x3A06024
	0x03A12330 FCMP D8, 0x0
	0x03A12334 B.LE 0x3A12370
	0x03A12338 LDR X2, [X19]
	0x03A1233C MOV X0, X20
	0x03A12340 LDP X20, X19, [X31 + 0x170]
	0x03A12344 LDP X22, X21, [X31 + 0x160]
	0x03A12348 LDP X24, X23, [X31 + 0x150]
	0x03A1234C LDP X26, X25, [X31 + 0x140]
	0x03A12350 LDP X29, X30, [X31 + 0x130]
	0x03A12354 LDR V8, [X31 + 0x120]
	0x03A12358 MOVZ W1, 0x1
	0x03A1235C MOVZ W3, 0x2
	0x03A12360 MOVZ W4, 0x2
	0x03A12364 MOV X5, X31
	0x03A12368 ADD X31, X31, 0x180
	0x03A1236C B 0x3A06DC8
	0x03A12370 LDR X0, [X21 + 0x10]
	0x03A12374 ADD X8, X31, 0xF0
	0x03A12378 MOV X1, X31
	0x03A1237C BL 0x3A062A8
	0x03A12380 ADRP X8, 0x742000
	0x03A12384 LDP X22, X26, [X31 + 0xF0]
	0x03A12388 LDP X24, X23, [X31 + 0x100]
	0x03A1238C LDR X8, [X8 + 0x168]
	0x03A12390 LDR X0, [X8]
	0x03A12394 BL 0x1C16F10
	0x03A12398 ADRP X8, 0x742000
	0x03A1239C LDR X8, [X8 + 0x318]
	0x03A123A0 MOVZ W1, 0x4
	0x03A123A4 MOV X21, X0
	0x03A123A8 LDR X2, [X8]
	0x03A123AC BL 0x2FE3EC4
	0x03A123B0 SUB X22, X22, 0xA
	0x03A123B4 ADD X23, X23, 0xA
	0x03A123B8 MOVI V0.2D, 0x0
	0x03A123BC ADD X0, X31, 0x90
	0x03A123C0 MOV X1, X22
	0x03A123C4 MOV X2, X23
	0x03A123C8 MOV X3, X31
	0x03A123CC STP V0, V0, [X31 + 0xA0]
	0x03A123D0 STR V0, [X31 + 0x9]
	0x03A123D4 BL 0x3A04370
	0x03A123D8 CBZ X21, 0x3A12838
	0x03A123DC LDP V0, V1, [X31 + 0x90]
	0x03A123E0 LDR V2, [X31 + 0xB]
	0x03A123E4 ADRP X25, 0x742000
	0x03A123E8 LDR X25, [X25 + 0x310]
	0x03A123EC STP V0, V1, [X31 + 0xC0]
	0x03A123F0 STR V2, [X31 + 0xE]
	0x03A123F4 LDR W9, [X21 + 0x1C]
	0x03A123F8 LDR X8, [X21 + 0x10]
	0x03A123FC LDR X10, [X25]
	0x03A12400 ADD W9, W9, 0x1
	0x03A12404 STR W9, [X21 + 0x1C]
	0x03A12408 CBZ X8, 0x3A12838
	0x03A1240C LDRSW X9, [X21 + 0x18]
	0x03A12410 LDR W11, [X8 + 0x18]
	0x03A12414 CMP W9, W11
	0x03A12418 B.CS 0x3A12440
	0x03A1241C ADD W10, W9, 0x1
	0x03A12420 STR W10, [X21 + 0x18]
	0x03A12424 LDP V2, V0, [X31 + 0xD0]
	0x03A12428 LDR V1, [X31 + 0xC]
	0x03A1242C MOVZ W10, 0x30
	0x03A12430 MADD X8, X9, X10, X8
	0x03A12434 STP V2, V0, [X8 + 0x30]
	0x03A12438 STR V1, [X8 + 0x2]
	0x03A1243C B 0x3A12468
	0x03A12440 LDR X8, [X10 + 0x20]
	0x03A12444 LDP V0, V1, [X31 + 0xC0]
	0x03A12448 LDR V2, [X31 + 0xE]
	0x03A1244C ADD X1, X31, 0xF0
	0x03A12450 LDR X8, [X8 + 0xC0]
	0x03A12454 MOV X0, X21
	0x03A12458 LDR X2, [X8 + 0x70]
	0x03A1245C STP V0, V1, [X31 + 0xF0]
	0x03A12460 STR V2, [X31 + 0x11]
	0x03A12464 BL 0x2FE46FC
	0x03A12468 ADD X24, X24, 0xA
	0x03A1246C MOVI V0.2D, 0x0
	0x03A12470 ADD X0, X31, 0x60
	0x03A12474 MOV X1, X24
	0x03A12478 MOV X2, X23
	0x03A1247C MOV X3, X31
	0x03A12480 STP V0, V0, [X31 + 0x70]
	0x03A12484 STR V0, [X31 + 0x6]
	0x03A12488 BL 0x3A04370
	0x03A1248C LDP V0, V1, [X31 + 0x60]
	0x03A12490 LDR V2, [X31 + 0x8]
	0x03A12494 LDR X10, [X25]
	0x03A12498 STP V0, V1, [X31 + 0xC0]
	0x03A1249C STR V2, [X31 + 0xE]
	0x03A124A0 LDR W9, [X21 + 0x1C]
	0x03A124A4 LDR X8, [X21 + 0x10]
	0x03A124A8 ADD W9, W9, 0x1
	0x03A124AC STR W9, [X21 + 0x1C]
	0x03A124B0 CBZ X8, 0x3A12838
	0x03A124B4 LDRSW X9, [X21 + 0x18]
	0x03A124B8 LDR W11, [X8 + 0x18]
	0x03A124BC CMP W9, W11
	0x03A124C0 B.CS 0x3A124E8
	0x03A124C4 ADD W10, W9, 0x1
	0x03A124C8 STR W10, [X21 + 0x18]
	0x03A124CC LDP V2, V0, [X31 + 0xD0]
	0x03A124D0 LDR V1, [X31 + 0xC]
	0x03A124D4 MOVZ W10, 0x30
	0x03A124D8 MADD X8, X9, X10, X8
	0x03A124DC STP V2, V0, [X8 + 0x30]
	0x03A124E0 STR V1, [X8 + 0x2]
	0x03A124E4 B 0x3A12510
	0x03A124E8 LDR X8, [X10 + 0x20]
	0x03A124EC LDP V0, V1, [X31 + 0xC0]
	0x03A124F0 LDR V2, [X31 + 0xE]
	0x03A124F4 ADD X1, X31, 0xF0
	0x03A124F8 LDR X8, [X8 + 0xC0]
	0x03A124FC MOV X0, X21
	0x03A12500 LDR X2, [X8 + 0x70]
	0x03A12504 STP V0, V1, [X31 + 0xF0]
	0x03A12508 STR V2, [X31 + 0x11]
	0x03A1250C BL 0x2FE46FC
	0x03A12510 SUB X23, X26, 0xA
	0x03A12514 MOVI V0.2D, 0x0
	0x03A12518 ADD X0, X31, 0x30
	0x03A1251C MOV X1, X24
	0x03A12520 MOV X2, X23
	0x03A12524 MOV X3, X31
	0x03A12528 STP V0, V0, [X31 + 0x40]
	0x03A1252C STR V0, [X31 + 0x3]
	0x03A12530 BL 0x3A04370
	0x03A12534 LDP V0, V1, [X31 + 0x30]
	0x03A12538 LDR V2, [X31 + 0x5]
	0x03A1253C LDR X10, [X25]
	0x03A12540 STP V0, V1, [X31 + 0xC0]
	0x03A12544 STR V2, [X31 + 0xE]
	0x03A12548 LDR W9, [X21 + 0x1C]
	0x03A1254C LDR X8, [X21 + 0x10]
	0x03A12550 ADD W9, W9, 0x1
	0x03A12554 STR W9, [X21 + 0x1C]
	0x03A12558 CBZ X8, 0x3A12838
	0x03A1255C LDRSW X9, [X21 + 0x18]
	0x03A12560 LDR W11, [X8 + 0x18]
	0x03A12564 CMP W9, W11
	0x03A12568 B.CS 0x3A12590
	0x03A1256C ADD W10, W9, 0x1
	0x03A12570 STR W10, [X21 + 0x18]
	0x03A12574 LDP V2, V0, [X31 + 0xD0]
	0x03A12578 LDR V1, [X31 + 0xC]
	0x03A1257C MOVZ W10, 0x30
	0x03A12580 MADD X8, X9, X10, X8
	0x03A12584 STP V2, V0, [X8 + 0x30]
	0x03A12588 STR V1, [X8 + 0x2]
	0x03A1258C B 0x3A125B8
	0x03A12590 LDR X8, [X10 + 0x20]
	0x03A12594 LDP V0, V1, [X31 + 0xC0]
	0x03A12598 LDR V2, [X31 + 0xE]
	0x03A1259C ADD X1, X31, 0xF0
	0x03A125A0 LDR X8, [X8 + 0xC0]
	0x03A125A4 MOV X0, X21
	0x03A125A8 LDR X2, [X8 + 0x70]
	0x03A125AC STP V0, V1, [X31 + 0xF0]
	0x03A125B0 STR V2, [X31 + 0x11]
	0x03A125B4 BL 0x2FE46FC
	0x03A125B8 MOVI V0.2D, 0x0
	0x03A125BC ADD X0, X31, 0x0
	0x03A125C0 MOV X1, X22
	0x03A125C4 MOV X2, X23
	0x03A125C8 MOV X3, X31
	0x03A125CC STP V0, V0, [X31 + 0x10]
	0x03A125D0 STR V0, [X31]
	0x03A125D4 BL 0x3A04370
	0x03A125D8 LDP V0, V1, [X31]
	0x03A125DC LDR V2, [X31 + 0x2]
	0x03A125E0 LDR X10, [X25]
	0x03A125E4 STP V0, V1, [X31 + 0xC0]
	0x03A125E8 STR V2, [X31 + 0xE]
	0x03A125EC LDR W9, [X21 + 0x1C]
	0x03A125F0 LDR X8, [X21 + 0x10]
	0x03A125F4 ADD W9, W9, 0x1
	0x03A125F8 STR W9, [X21 + 0x1C]
	0x03A125FC CBZ X8, 0x3A12838
	0x03A12600 LDRSW X9, [X21 + 0x18]
	0x03A12604 LDR W11, [X8 + 0x18]
	0x03A12608 CMP W9, W11
	0x03A1260C B.CS 0x3A12634
	0x03A12610 ADD W10, W9, 0x1
	0x03A12614 STR W10, [X21 + 0x18]
	0x03A12618 LDP V2, V0, [X31 + 0xD0]
	0x03A1261C LDR V1, [X31 + 0xC]
	0x03A12620 MOVZ W10, 0x30
	0x03A12624 MADD X8, X9, X10, X8
	0x03A12628 STP V2, V0, [X8 + 0x30]
	0x03A1262C STR V1, [X8 + 0x2]
	0x03A12630 B 0x3A1265C
	0x03A12634 LDR X8, [X10 + 0x20]
	0x03A12638 LDP V0, V1, [X31 + 0xC0]
	0x03A1263C LDR V2, [X31 + 0xE]
	0x03A12640 ADD X1, X31, 0xF0
	0x03A12644 LDR X8, [X8 + 0xC0]
	0x03A12648 MOV X0, X21
	0x03A1264C LDR X2, [X8 + 0x70]
	0x03A12650 STP V0, V1, [X31 + 0xF0]
	0x03A12654 STR V2, [X31 + 0x11]
	0x03A12658 BL 0x2FE46FC
	0x03A1265C MOVZ W3, 0x1
	0x03A12660 MOV X0, X20
	0x03A12664 MOV X1, X21
	0x03A12668 MOV W2, W31
	0x03A1266C MOV X4, X31
	0x03A12670 MOVZ W22, 0x1
	0x03A12674 BL 0x3A05454
	0x03A12678 STRB W22, [X20 + 0x90]
	0x03A1267C LDR X2, [X19]
	0x03A12680 MOVZ W1, 0x1
	0x03A12684 MOVZ W3, 0x3
	0x03A12688 MOVZ W4, 0x3
	0x03A1268C MOV X0, X20
	0x03A12690 MOV X5, X31
	0x03A12694 BL 0x3A06DC8
	0x03A12698 LDR X0, [X19]
	0x03A1269C CBZ X0, 0x3A12838
	0x03A126A0 MOV X1, X31
	0x03A126A4 BL 0x3A03E2C
	0x03A126A8 CMP W0, 0x1
	0x03A126AC B.NE 0x3A12808
	0x03A126B0 LDR X8, [X19]
	0x03A126B4 CBZ X8, 0x3A12838
	0x03A126B8 LDR X0, [X8 + 0x30]
	0x03A126BC CBZ X0, 0x3A12838
	0x03A126C0 ADRP X23, 0x742000
	0x03A126C4 LDR X23, [X23 + 0x150]
	0x03A126C8 MOV W1, W31
	0x03A126CC LDR X2, [X23]
	0x03A126D0 BL 0x301BCCC
	0x03A126D4 CBZ X0, 0x3A12838
	0x03A126D8 MOV X1, X31
	0x03A126DC BL 0x3A03E2C
	0x03A126E0 CMP W0, 0x1
	0x03A126E4 B.LT 0x3A12808
	0x03A126E8 LDR X8, [X19]
	0x03A126EC CBZ X8, 0x3A12838
	0x03A126F0 LDR X0, [X8 + 0x30]
	0x03A126F4 CBZ X0, 0x3A12838
	0x03A126F8 LDR X2, [X23]
	0x03A126FC MOV W1, W31
	0x03A12700 BL 0x301BCCC
	0x03A12704 LDR X8, [X19]
	0x03A12708 CBZ X8, 0x3A12838
	0x03A1270C MOV X20, X0
	0x03A12710 CBZ X0, 0x3A12838
	0x03A12714 LDR X21, [X8 + 0x30]
	0x03A12718 MOV X0, X20
	0x03A1271C MOV X1, X31
	0x03A12720 BL 0x3A03E2C
	0x03A12724 CBZ X21, 0x3A12838
	0x03A12728 ADRP X8, 0x742000
	0x03A1272C LDR X8, [X8 + 0x328]
	0x03A12730 MOV W1, W0
	0x03A12734 MOV X0, X21
	0x03A12738 LDR X2, [X8]
	0x03A1273C BL 0x301BB48
	0x03A12740 LDR X8, [X19]
	0x03A12744 CBZ X8, 0x3A12838
	0x03A12748 LDR X0, [X20 + 0x30]
	0x03A1274C CBZ X0, 0x3A12838
	0x03A12750 LDR X2, [X23]
	0x03A12754 LDR X21, [X8 + 0x30]
	0x03A12758 MOV W1, W31
	0x03A1275C BL 0x301BCCC
	0x03A12760 CBZ X21, 0x3A12838
	0x03A12764 ADRP X8, 0x742000
	0x03A12768 LDR X8, [X8 + 0x148]
	0x03A1276C MOV X2, X0
	0x03A12770 MOV X0, X21
	0x03A12774 MOV W1, W31
	0x03A12778 LDR X3, [X8]
	0x03A1277C BL 0x301BD20
	0x03A12780 LDR X8, [X19]
	0x03A12784 CBZ X8, 0x3A12838
	0x03A12788 LDR X0, [X8 + 0x30]
	0x03A1278C CBZ X0, 0x3A12838
	0x03A12790 LDR X2, [X23]
	0x03A12794 MOV W1, W31
	0x03A12798 BL 0x301BCCC
	0x03A1279C CBZ X0, 0x3A12838
	0x03A127A0 LDR X8, [X19]
	0x03A127A4 MOV X1, X31
	0x03A127A8 STR X8, [X0 + 0x10]
	0x03A127AC MOV X0, X20
	0x03A127B0 BL 0x3A03E2C
	0x03A127B4 CMP W0, 0x2
	0x03A127B8 B.LT 0x3A12818
	0x03A127BC MOVZ W21, 0x1
	0x03A127C0 LDR X0, [X20 + 0x30]
	0x03A127C4 CBZ X0, 0x3A12838
	0x03A127C8 LDR X2, [X23]
	0x03A127CC LDR X22, [X19]
	0x03A127D0 MOV W1, W21
	0x03A127D4 BL 0x301BCCC
	0x03A127D8 CBZ X22, 0x3A12838
	0x03A127DC MOV X1, X0
	0x03A127E0 MOV X0, X22
	0x03A127E4 MOV X2, X31
	0x03A127E8 BL 0x3A03E7C
	0x03A127EC MOV X0, X20
	0x03A127F0 MOV X1, X31
	0x03A127F4 ADD W21, W21, 0x1
	0x03A127F8 BL 0x3A03E2C
	0x03A127FC CMP W21, W0
	0x03A12800 B.LT 0x3A127C0
	0x03A12804 B 0x3A12818
	0x03A12808 LDR X0, [X19]
	0x03A1280C CBZ X0, 0x3A12838
	0x03A12810 MOV X1, X31
	0x03A12814 BL 0x3A03AC8
	0x03A12818 LDP X20, X19, [X31 + 0x170]
	0x03A1281C LDP X22, X21, [X31 + 0x160]
	0x03A12820 LDP X24, X23, [X31 + 0x150]
	0x03A12824 LDP X26, X25, [X31 + 0x140]
	0x03A12828 LDP X29, X30, [X31 + 0x130]
	0x03A1282C LDR V8, [X31 + 0x120]
	0x03A12830 ADD X31, X31, 0x180
	0x03A12834 RET

ISIL:
	001 Subtract X31, X31, 448
	002 Move [X31+336], D10
	003 Move [X31+352], D9
	004 Move [X31+360], D8
	005 Move [X31+368], X29
	006 Move [X31+376], X30
	007 Move [X31+384], X26
	008 Move [X31+392], X25
	009 Move [X31+400], X24
	010 Move [X31+408], X23
	011 Move [X31+416], X22
	012 Move [X31+424], X21
	013 Move [X31+432], X20
	014 Move [X31+440], X19
	015 Move X23, 0x9D1000
	016 Move W8, [X23+4015]
	017 Move W22, W3
	018 Move X20, X2
	019 Move W19, W1
	020 Move X21, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0x744000
	026 Move X0, [X0+784]
	027 Call 0x1C17CF4
	028 Move X0, 0x744000
	029 Move X0, [X0+1144]
	030 Call 0x1C17CF4
	031 Move X0, 0x744000
	032 Move X0, [X0+528]
	033 Call 0x1C17CF4
	034 Move X0, 0x6E2000
	035 Move X0, [X0+1448]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X23+4015], W8
	039 NotImplemented "Instruction MOVI not yet implemented."
	040 Move [X31+208], V0
	041 Move [X31+216], V0
	042 Move [X31+176], V0
	043 Move [X31+184], V0
	044 Move [X31+144], V0
	045 Move [X31+152], V0
	046 Move X0, [X21+40]
	047 Compare X0, 0
	048 JumpIfEqual {623}
	049 Move X23, 0x743000
	050 Move X23, [X23+1144]
	051 Move W1, [X20]
	052 Move X2, [X23]
	053 Call List`1<DoublePoint>.get_Item, X0, X1
	054 Move X0, [X21+40]
	055 Compare X0, 0
	056 JumpIfEqual {623}
	057 Move X2, [X23]
	058 Move W1, W19
	059 Move V8, V0
	060 Call List`1<DoublePoint>.get_Item, X0, X1
	061 Move X0, [X21+40]
	062 Compare X0, 0
	063 JumpIfEqual {623}
	064 Move X2, [X23]
	065 Move W1, W19
	066 Move V9, V1
	067 Call List`1<DoublePoint>.get_Item, X0, X1
	068 Move X0, [X21+40]
	069 Compare X0, 0
	070 JumpIfEqual {623}
	071 Move W1, [X20]
	072 Move X2, [X23]
	073 Move X24, 0x6E2000
	074 Move X24, [X24+1448]
	075 Move V10, V0
	076 Call List`1<DoublePoint>.get_Item, X0, X1
	077 Multiply D0, D8, D9
	078 Multiply D1, D10, D1
	079 Subtract D8, D0, D1
	080 Move [X21+56], D8
	081 Move X0, [X24]
	082 Move V9, [X21+48]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Multiply D0, D9, D8
	088 NotImplemented "Instruction FABS not yet implemented."
	089 Move D1, 1
	090 NotImplemented "Instruction FCMP not yet implemented."
	091 Move X0, [X21+40]
	092 Compare X0, 0
	093 JumpIfEqual {623}
	094 Move W1, [X20]
	095 Move X2, [X23]
	096 Call List`1<DoublePoint>.get_Item, X0, X1
	097 Move X0, [X21+40]
	098 Compare X0, 0
	099 JumpIfEqual {623}
	100 Move X2, [X23]
	101 Move W1, W19
	102 Move V8, V0
	103 Call List`1<DoublePoint>.get_Item, X0, X1
	104 Move X0, [X21+40]
	105 Compare X0, 0
	106 JumpIfEqual {623}
	107 Move X2, [X23]
	108 Move W1, W19
	109 Move V9, V0
	110 Call List`1<DoublePoint>.get_Item, X0, X1
	111 Move X0, [X21+40]
	112 Compare X0, 0
	113 JumpIfEqual {623}
	114 Move W1, [X20]
	115 Move X2, [X23]
	116 Move V10, V1
	117 Call List`1<DoublePoint>.get_Item, X0, X1
	118 Multiply D0, D8, D9
	119 Multiply D1, D10, D1
	120 Add D0, D0, D1
	121 NotImplemented "Instruction FCMP not yet implemented."
	122 Move X0, [X21+24]
	123 Compare X0, 0
	124 JumpIfEqual {623}
	125 Move X24, 0x743000
	126 Move X24, [X24+528]
	127 Add X8, X31, 288
	128 Move W1, W19
	129 Move X2, [X24]
	130 Call List`1<IntPoint>.get_Item, X0, X1
	131 Move X0, [X21+40]
	132 Compare X0, 0
	133 JumpIfEqual {623}
	134 Move W1, [X20]
	135 Move X2, [X23]
	136 Move X22, [X31+296]
	137 Call List`1<DoublePoint>.get_Item, X0, X1
	138 Move V1, [X21+48]
	139 NotImplemented "Instruction SCVTF not yet implemented."
	140 Move X8, 0x7FF00000
	141 Move X0, [X21+24]
	142 Multiply D0, D0, D1
	143 Move D1, 0.5
	144 Add D0, D0, D2
	145 Move D2, -0.5
	146 Add D1, D0, D1
	147 Add D2, D0, D2
	148 NotImplemented "Instruction FCMP not yet implemented."
	149 Move D0, X8
	150 NotImplemented "Instruction FCSEL not yet implemented."
	151 NotImplemented "Instruction FCVTZS not yet implemented."
	152 NotImplemented "Instruction FCMP not yet implemented."
	153 Move X9, 0x80000000
	154 NotImplemented "Instruction CSEL not yet implemented."
	155 Compare X0, 0
	156 JumpIfEqual {623}
	157 Move X2, [X24]
	158 Add X8, X31, 288
	159 Move W1, W19
	160 Call List`1<IntPoint>.get_Item, X0, X1
	161 Move X0, [X21+40]
	162 Compare X0, 0
	163 JumpIfEqual {623}
	164 Move W1, [X20]
	165 Move X2, [X23]
	166 Move X24, [X31+304]
	167 Call List`1<DoublePoint>.get_Item, X0, X1
	168 Move V0, [X21+48]
	169 NotImplemented "Instruction SCVTF not yet implemented."
	170 Move X8, 0x7FF00000
	171 Move X9, 0x80000000
	172 Multiply D0, D1, D0
	173 Move D1, 0.5
	174 Add D0, D0, D2
	175 Move D2, -0.5
	176 Add D1, D0, D1
	177 Add D2, D0, D2
	178 NotImplemented "Instruction FCMP not yet implemented."
	179 Move D0, X8
	180 NotImplemented "Instruction FCSEL not yet implemented."
	181 NotImplemented "Instruction FCVTZS not yet implemented."
	182 NotImplemented "Instruction FCMP not yet implemented."
	183 NotImplemented "Instruction CSEL not yet implemented."
	184 Add X0, X31, 192
	185 Move X1, X22
	186 Move X3, X31
	187 Call IntPoint..ctor, X0, X1, X2
	188 Move X0, [X21+40]
	189 Compare X0, 0
	190 JumpIfEqual {623}
	191 Move W1, [X20]
	192 Move X2, [X23]
	193 Call List`1<DoublePoint>.get_Item, X0, X1
	194 Move [X31+224], D0
	195 Move X0, [X21+40]
	196 Compare X0, 0
	197 JumpIfEqual {623}
	198 Move W1, [X20]
	199 Move X2, [X23]
	200 Call List`1<DoublePoint>.get_Item, X0, X1
	201 Move X8, W19
	202 Move W9, 1
	203 Move [X31+232], D1
	204 Move [X31+192], X8
	205 Move [X31+216], X9
	206 Move V2, [X31+208]
	207 Move V0, [X31+224]
	208 Move V1, [X31+12]
	209 Move X0, [X21+32]
	210 Move [X31+8], V0
	211 Move [X31+96], V1
	212 Move [X31+104], V2
	213 Compare X0, 0
	214 JumpIfEqual {623}
	215 Move V0, [X31+96]
	216 Move V1, [X31+112]
	217 Move V2, [X31+8]
	218 Move X9, 0x743000
	219 Move X9, [X9+784]
	220 Move [X31+240], V0
	221 Move [X31+248], V1
	222 Move [X31+17], V2
	223 Move W11, [X0+28]
	224 Move X8, [X0+16]
	225 Move X10, [X9]
	226 Add W9, W11, 1
	227 Move [X0+28], W9
	228 Compare X8, 0
	229 JumpIfEqual {623}
	230 NotImplemented "Instruction LDRSW not yet implemented."
	231 Move W11, [X8+24]
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Add W10, W9, 1
	234 Move [X0+24], W10
	235 Move V2, [X31+256]
	236 Move V0, [X31+272]
	237 Move V1, [X31+15]
	238 Move W10, 48
	239 NotImplemented "Instruction MADD not yet implemented."
	240 Move [X8+48], V2
	241 Move [X8+56], V0
	242 Move [X8+2], V1
	243 Move V0, [X21+56]
	244 NotImplemented "Instruction FCMP not yet implemented."
	245 Move X8, 0x3FF00000
	246 Move [X21+56], X8
	247 Move D0, 1
	248 Move V0, [X21+56]
	249 Move D1, -1
	250 NotImplemented "Instruction FCMP not yet implemented."
	251 Move X8, 0xBFF00000
	252 Move D0, -1
	253 Move [X21+56], X8
	254 Move V1, [X21+48]
	255 Multiply D0, D0, D1
	256 NotImplemented "Instruction FCMP not yet implemented."
	257 Move X0, [X21+24]
	258 Compare X0, 0
	259 JumpIfEqual {623}
	260 Move X24, 0x743000
	261 Move X24, [X24+528]
	262 Add X8, X31, 288
	263 Move W1, W19
	264 Move X2, [X24]
	265 Call List`1<IntPoint>.get_Item, X0, X1
	266 Move X0, [X21+40]
	267 Compare X0, 0
	268 JumpIfEqual {623}
	269 Move W1, [X20]
	270 Move X2, [X23]
	271 Move X22, [X31+296]
	272 Call List`1<DoublePoint>.get_Item, X0, X1
	273 Move V1, [X21+48]
	274 NotImplemented "Instruction SCVTF not yet implemented."
	275 Move X8, 0x7FF00000
	276 Move X0, [X21+24]
	277 Multiply D0, D0, D1
	278 Move D1, 0.5
	279 Add D0, D0, D2
	280 Move D2, -0.5
	281 Add D1, D0, D1
	282 Add D2, D0, D2
	283 NotImplemented "Instruction FCMP not yet implemented."
	284 Move D0, X8
	285 NotImplemented "Instruction FCSEL not yet implemented."
	286 NotImplemented "Instruction FCVTZS not yet implemented."
	287 NotImplemented "Instruction FCMP not yet implemented."
	288 Move X9, 0x80000000
	289 NotImplemented "Instruction CSEL not yet implemented."
	290 Compare X0, 0
	291 JumpIfEqual {623}
	292 Move X2, [X24]
	293 Add X8, X31, 288
	294 Move W1, W19
	295 Call List`1<IntPoint>.get_Item, X0, X1
	296 Move X0, [X21+40]
	297 Compare X0, 0
	298 JumpIfEqual {623}
	299 Move W1, [X20]
	300 Move X2, [X23]
	301 Move X25, [X31+304]
	302 Call List`1<DoublePoint>.get_Item, X0, X1
	303 Move V0, [X21+48]
	304 NotImplemented "Instruction SCVTF not yet implemented."
	305 Move X8, 0x7FF00000
	306 Move X9, 0x80000000
	307 Multiply D0, D1, D0
	308 Move D1, 0.5
	309 Add D0, D0, D2
	310 Move D2, -0.5
	311 Add D1, D0, D1
	312 Add D2, D0, D2
	313 NotImplemented "Instruction FCMP not yet implemented."
	314 Move D0, X8
	315 NotImplemented "Instruction FCSEL not yet implemented."
	316 NotImplemented "Instruction FCVTZS not yet implemented."
	317 NotImplemented "Instruction FCMP not yet implemented."
	318 NotImplemented "Instruction CSEL not yet implemented."
	319 Add X0, X31, 144
	320 Move X1, X22
	321 Move X3, X31
	322 Call IntPoint..ctor, X0, X1, X2
	323 Move X0, [X21+40]
	324 Compare X0, 0
	325 JumpIfEqual {623}
	326 Move W1, [X20]
	327 Move X2, [X23]
	328 Call List`1<DoublePoint>.get_Item, X0, X1
	329 Move [X31+176], D0
	330 Move X0, [X21+40]
	331 Compare X0, 0
	332 JumpIfEqual {623}
	333 Move W1, [X20]
	334 Move X2, [X23]
	335 Call List`1<DoublePoint>.get_Item, X0, X1
	336 Move [X31+184], D1
	337 Move V0, [X31+144]
	338 Move V1, [X31+160]
	339 Move X0, [X21+32]
	340 Move V2, [X31+11]
	341 Move [X31+96], V0
	342 Move [X31+104], V1
	343 Move [X31+8], V2
	344 Compare X0, 0
	345 JumpIfEqual {623}
	346 Move V0, [X31+96]
	347 Move V1, [X31+112]
	348 Move V2, [X31+8]
	349 Move X25, 0x743000
	350 Move X25, [X25+784]
	351 Move [X31+240], V0
	352 Move [X31+248], V1
	353 Move [X31+17], V2
	354 Move W9, [X0+28]
	355 Move X8, [X0+16]
	356 Move X10, [X25]
	357 Add W9, W9, 1
	358 Move [X0+28], W9
	359 Compare X8, 0
	360 JumpIfEqual {623}
	361 NotImplemented "Instruction LDRSW not yet implemented."
	362 Move W11, [X8+24]
	363 NotImplemented "Instruction CMP not yet implemented."
	364 Add W10, W9, 1
	365 Move [X0+24], W10
	366 Move V2, [X31+256]
	367 Move V0, [X31+272]
	368 Move V1, [X31+15]
	369 Move W10, 48
	370 NotImplemented "Instruction MADD not yet implemented."
	371 Move [X8+48], V2
	372 Move [X8+56], V0
	373 Move [X8+2], V1
	374 Compare W22, 0
	375 JumpIfNotEqual {596}
	376 Move W2, [X20]
	377 Move X0, X21
	378 Move W1, W19
	379 Call ClipperOffset.DoRound, X0, X1, X2
	380 Move X8, [X10+32]
	381 Move V0, [X31+240]
	382 Move V1, [X31+256]
	383 Move V2, [X31+17]
	384 Add X1, X31, 288
	385 Move X8, [X8+192]
	386 Move X2, [X8+112]
	387 Move [X31+288], V0
	388 Move [X31+296], V1
	389 Move [X31+20], V2
	390 Call List`1<IntPoint>.AddWithResize, X0, X1
	391 Move X0, [X21+24]
	392 Compare X0, 0
	393 JumpIfEqual {623}
	394 Move X2, [X24]
	395 Add X8, X31, 288
	396 Move W1, W19
	397 Call List`1<IntPoint>.get_Item, X0, X1
	398 Move V0, [X31+288]
	399 Move V1, [X31+304]
	400 Move V2, [X31+20]
	401 Move [X31+144], V0
	402 Move [X31+152], V1
	403 Move [X31+11], V2
	404 Move X0, [X21+40]
	405 Compare X0, 0
	406 JumpIfEqual {623}
	407 Move W1, [X20]
	408 Move X2, [X23]
	409 Call List`1<DoublePoint>.get_Item, X0, X1
	410 Move [X31+176], D0
	411 Move X0, [X21+40]
	412 Compare X0, 0
	413 JumpIfEqual {623}
	414 Move W1, [X20]
	415 Move X2, [X23]
	416 Call List`1<DoublePoint>.get_Item, X0, X1
	417 Move W8, W19
	418 Move X26, W8
	419 Move W8, 1
	420 Move [X31+184], D1
	421 Move [X31+144], X26
	422 Move [X31+168], X8
	423 Move V2, [X31+160]
	424 Move V0, [X31+176]
	425 Move V1, [X31+9]
	426 Move X0, [X21+32]
	427 Move [X31+5], V0
	428 Move [X31+48], V1
	429 Move [X31+56], V2
	430 Compare X0, 0
	431 JumpIfEqual {623}
	432 Move V0, [X31+48]
	433 Move V1, [X31+64]
	434 Move V2, [X31+5]
	435 Move X10, [X25]
	436 Move [X31+240], V0
	437 Move [X31+248], V1
	438 Move [X31+17], V2
	439 Move W9, [X0+28]
	440 Move X8, [X0+16]
	441 Add W9, W9, 1
	442 Move [X0+28], W9
	443 Compare X8, 0
	444 JumpIfEqual {623}
	445 NotImplemented "Instruction LDRSW not yet implemented."
	446 Move W11, [X8+24]
	447 NotImplemented "Instruction CMP not yet implemented."
	448 Add W10, W9, 1
	449 Move [X0+24], W10
	450 Move V2, [X31+256]
	451 Move V0, [X31+272]
	452 Move V1, [X31+15]
	453 Move W10, 48
	454 NotImplemented "Instruction MADD not yet implemented."
	455 Move [X8+48], V2
	456 Move [X8+56], V0
	457 Move [X8+2], V1
	458 Move X8, [X10+32]
	459 Move V0, [X31+240]
	460 Move V1, [X31+256]
	461 Move V2, [X31+17]
	462 Add X1, X31, 288
	463 Move X8, [X8+192]
	464 Move X2, [X8+112]
	465 Move [X31+288], V0
	466 Move [X31+296], V1
	467 Move [X31+20], V2
	468 Call List`1<IntPoint>.AddWithResize, X0, X1
	469 Move X0, [X21+24]
	470 Compare X0, 0
	471 JumpIfEqual {623}
	472 Move X2, [X24]
	473 Add X8, X31, 288
	474 Move W1, W19
	475 Call List`1<IntPoint>.get_Item, X0, X1
	476 Move X0, [X21+40]
	477 Compare X0, 0
	478 JumpIfEqual {623}
	479 Move X2, [X23]
	480 Move X22, [X31+296]
	481 Move W1, W19
	482 Call List`1<DoublePoint>.get_Item, X0, X1
	483 Move V1, [X21+48]
	484 NotImplemented "Instruction SCVTF not yet implemented."
	485 Move X8, 0x7FF00000
	486 Move X0, [X21+24]
	487 Multiply D0, D0, D1
	488 Move D1, 0.5
	489 Add D0, D0, D2
	490 Move D2, -0.5
	491 Add D1, D0, D1
	492 Add D2, D0, D2
	493 NotImplemented "Instruction FCMP not yet implemented."
	494 Move D0, X8
	495 NotImplemented "Instruction FCSEL not yet implemented."
	496 NotImplemented "Instruction FCVTZS not yet implemented."
	497 NotImplemented "Instruction FCMP not yet implemented."
	498 Move X9, 0x80000000
	499 NotImplemented "Instruction CSEL not yet implemented."
	500 Compare X0, 0
	501 JumpIfEqual {623}
	502 Move X2, [X24]
	503 Add X8, X31, 288
	504 Move W1, W19
	505 Call List`1<IntPoint>.get_Item, X0, X1
	506 Move X0, [X21+40]
	507 Compare X0, 0
	508 JumpIfEqual {623}
	509 Move X2, [X23]
	510 Move X24, [X31+304]
	511 Move W1, W19
	512 Call List`1<DoublePoint>.get_Item, X0, X1
	513 Move V0, [X21+48]
	514 NotImplemented "Instruction SCVTF not yet implemented."
	515 Move X8, 0x7FF00000
	516 Move X9, 0x80000000
	517 Multiply D0, D1, D0
	518 Move D1, 0.5
	519 Add D0, D0, D2
	520 Move D2, -0.5
	521 Add D1, D0, D1
	522 Add D2, D0, D2
	523 NotImplemented "Instruction FCMP not yet implemented."
	524 Move D0, X8
	525 NotImplemented "Instruction FCSEL not yet implemented."
	526 NotImplemented "Instruction FCVTZS not yet implemented."
	527 NotImplemented "Instruction FCMP not yet implemented."
	528 NotImplemented "Instruction CSEL not yet implemented."
	529 Add X0, X31, 144
	530 Move X1, X22
	531 Move X3, X31
	532 Call IntPoint..ctor, X0, X1, X2
	533 Move X0, [X21+40]
	534 Compare X0, 0
	535 JumpIfEqual {623}
	536 Move X2, [X23]
	537 Move W1, W19
	538 Call List`1<DoublePoint>.get_Item, X0, X1
	539 Move [X31+176], D0
	540 Move X0, [X21+40]
	541 Compare X0, 0
	542 JumpIfEqual {623}
	543 Move X2, [X23]
	544 Move W1, W19
	545 Call List`1<DoublePoint>.get_Item, X0, X1
	546 Move W8, 1
	547 Move [X31+184], D1
	548 Move [X31+144], X26
	549 Move [X31+168], X8
	550 Move V2, [X31+160]
	551 Move V0, [X31+176]
	552 Move V1, [X31+9]
	553 Move X0, [X21+32]
	554 Move [X31+2], V0
	555 Move [X31], V1
	556 Move [X31+8], V2
	557 Compare X0, 0
	558 JumpIfEqual {623}
	559 Move V0, [X31]
	560 Move V1, [X31+16]
	561 Move V2, [X31+2]
	562 Move X10, [X25]
	563 Move [X31+240], V0
	564 Move [X31+248], V1
	565 Move [X31+17], V2
	566 Move W9, [X0+28]
	567 Move X8, [X0+16]
	568 Add W9, W9, 1
	569 Move [X0+28], W9
	570 Compare X8, 0
	571 JumpIfEqual {623}
	572 NotImplemented "Instruction LDRSW not yet implemented."
	573 Move W11, [X8+24]
	574 NotImplemented "Instruction CMP not yet implemented."
	575 Add W10, W9, 1
	576 Move [X0+24], W10
	577 Move V2, [X31+256]
	578 Move V0, [X31+272]
	579 Move V1, [X31+15]
	580 Move W10, 48
	581 NotImplemented "Instruction MADD not yet implemented."
	582 Move [X8+48], V2
	583 Move [X8+56], V0
	584 Move [X8+2], V1
	585 Move X8, [X10+32]
	586 Move V0, [X31+240]
	587 Move V1, [X31+256]
	588 Move V2, [X31+17]
	589 Add X1, X31, 288
	590 Move X8, [X8+192]
	591 Move X2, [X8+112]
	592 Move [X31+288], V0
	593 Move [X31+296], V1
	594 Move [X31+20], V2
	595 Call List`1<IntPoint>.AddWithResize, X0, X1
	596 Move [X20], W19
	597 Move X20, [X31+432]
	598 Move X19, [X31+440]
	599 Move X22, [X31+416]
	600 Move X21, [X31+424]
	601 Move X24, [X31+400]
	602 Move X23, [X31+408]
	603 Move X26, [X31+384]
	604 Move X25, [X31+392]
	605 Move X29, [X31+368]
	606 Move X30, [X31+376]
	607 Move D9, [X31+352]
	608 Move D8, [X31+360]
	609 Move V10, [X31+336]
	610 Add X31, X31, 448
	611 Return 
	612 Move X8, [X10+32]
	613 Move V0, [X31+240]
	614 Move V1, [X31+256]
	615 Move V2, [X31+17]
	616 Add X1, X31, 288
	617 Move X8, [X8+192]
	618 Move X2, [X8+112]
	619 Move [X31+288], V0
	620 Move [X31+296], V1
	621 Move [X31+20], V2
	622 Call List`1<IntPoint>.AddWithResize, X0, X1
	623 Call 0x1C17F20

Method: System.Void DoSquare(System.Int32 j, System.Int32 k)

Disassembly:
	0x03A1383C ADD X8, X20, W25, 0x2, SXTW
	0x03A13840 ADD X22, X8, 0x20
	0x03A13844 MOV X0, X22
	0x03A13848 MOV X1, X31
	0x03A1384C BL 0x3C008D0
	0x03A13850 LDR X8, [X19 + 0x50]
	0x03A13854 CBZ X8, 0x3A138BC
	0x03A13858 LDR W9, [X8 + 0x18]
	0x03A1385C CMP X23, X9
	0x03A13860 B.CS 0x3A138D8
	0x03A13864 ADD X8, X8, X23, 0x2, LSL
	0x03A13868 LDR W8, [X8 + 0x20]
	0x03A1386C CMP W0, W8
	0x03A13870 B.NE 0x3A13894
	0x03A13874 LDR W8, [X20 + 0x18]
	0x03A13878 CMP W25, W8
	0x03A1387C B.CS 0x3A138D8
	0x03A13880 MOV X0, X22
	0x03A13884 MOV X1, X31
	0x03A13888 BL 0x3C008D8
	0x03A1388C MOV W21, W0
	0x03A13890 MOV W24, W25
	0x03A13894 SUB W25, W25, 0x1
	0x03A13898 CMP W25, W24
	0x03A1389C B.LT 0x3A138B0
	0x03A138A0 LDR W8, [X20 + 0x18]
	0x03A138A4 CMP W25, W8
	0x03A138A8 B.CC 0x3A1383C
	0x03A138AC B 0x3A138D8
	0x03A138B0 LDR X8, [X19 + 0x50]
	0x03A138B4 ADD X23, X23, 0x1
	0x03A138B8 CBNZ X8, 0x3A13814
	0x03A138BC BL 0x1C16F20
	0x03A138C0 MOV W0, W21
	0x03A138C4 LDP X20, X19, [X31 + 0x30]
	0x03A138C8 LDP X22, X21, [X31 + 0x20]
	0x03A138CC LDP X24, X23, [X31 + 0x10]
	0x03A138D0 LDP X30, X25, [X31], #0x40
	0x03A138D4 RET
	0x03A138D8 BL 0x1C16F28
	0x03A138DC STR X30, [X31 - 0x20]!
	0x03A138E0 STP X20, X19, [X31 + 0x10]
	0x03A138E4 ADRP X19, 0x9CE000
	0x03A138E8 ADRP X20, 0x741000
	0x03A138EC LDRB W8, [X19 + 0xFC6]
	0x03A138F0 LDR X20, [X20 + 0x498]
	0x03A138F4 TBNZ X8, 0x0, 0x3A1390C
	0x03A138F8 ADRP X0, 0x741000
	0x03A138FC LDR X0, [X0 + 0x498]
	0x03A13900 BL 0x1C16CF4
	0x03A13904 MOVZ W8, 0x1
	0x03A13908 STRB W8, [X19 + 0xFC6]
	0x03A1390C LDR X0, [X20]
	0x03A13910 LDR W8, [X0 + 0xE0]
	0x03A13914 CBNZ W8, 0x3A13920
	0x03A13918 BL 0x1C16DFC
	0x03A1391C LDR X0, [X20]
	0x03A13920 LDR X8, [X0 + 0xB8]
	0x03A13924 LDR X8, [X8]
	0x03A13928 CBNZ X8, 0x3A1395C
	0x03A1392C MOV X0, X31
	0x03A13930 BL 0x3C00950
	0x03A13934 LDR X8, [X20]
	0x03A13938 MOV X19, X0
	0x03A1393C LDR W9, [X8 + 0xE0]
	0x03A13940 CBNZ W9, 0x3A13950
	0x03A13944 MOV X0, X8
	0x03A13948 BL 0x1C16DFC
	0x03A1394C LDR X8, [X20]
	0x03A13950 LDR X8, [X8 + 0xB8]
	0x03A13954 STR X19, [X8]
	0x03A13958 LDR X0, [X20]
	0x03A1395C LDR W8, [X0 + 0xE0]
	0x03A13960 CBNZ W8, 0x3A1396C
	0x03A13964 BL 0x1C16DFC
	0x03A13968 LDR X0, [X20]
	0x03A1396C LDR X8, [X0 + 0xB8]
	0x03A13970 LDP X20, X19, [X31 + 0x10]
	0x03A13974 LDR X0, [X8]
	0x03A13978 LDR X30, [X31], #0x20
	0x03A1397C RET
	0x03A13980 SUB X31, X31, 0x50
	0x03A13984 STR X30, [X31 + 0x20]
	0x03A13988 STP X22, X21, [X31 + 0x30]
	0x03A1398C STP X20, X19, [X31 + 0x40]
	0x03A13990 ADRP X22, 0x9CE000
	0x03A13994 ADRP X21, 0x6E0000
	0x03A13998 MOV X19, X8
	0x03A1399C LDRB W8, [X22 + 0xFB7]
	0x03A139A0 LDR X21, [X21 + 0x598]
	0x03A139A4 MOV X20, X0
	0x03A139A8 TBNZ X8, 0x0, 0x3A139D8
	0x03A139AC ADRP X0, 0x741000
	0x03A139B0 LDR X0, [X0 + 0x4B0]
	0x03A139B4 BL 0x1C16CF4
	0x03A139B8 ADRP X0, 0x6E0000
	0x03A139BC LDR X0, [X0 + 0x598]
	0x03A139C0 BL 0x1C16CF4
	0x03A139C4 ADRP X0, 0x710000
	0x03A139C8 LDR X0, [X0 + 0x8D0]
	0x03A139CC BL 0x1C16CF4
	0x03A139D0 MOVZ W8, 0x1
	0x03A139D4 STRB W8, [X22 + 0xFB7]
	0x03A139D8 LDR X0, [X21]
	0x03A139DC LDR X21, [X20 + 0x58]
	0x03A139E0 LDR W8, [X0 + 0xE0]
	0x03A139E4 CBNZ W8, 0x3A139EC
	0x03A139E8 BL 0x1C16DFC
	0x03A139EC MOV X0, X21
	0x03A139F0 MOV X1, X31
	0x03A139F4 MOV X2, X31
	0x03A139F8 BL 0x3C3883C
	0x03A139FC TBZ X0, 0x0, 0x3A13A58
	0x03A13A00 LDR X8, [X20 + 0x98]
	0x03A13A04 CBZ X8, 0x3A13A88
	0x03A13A08 LDR W8, [X8 + 0x18]
	0x03A13A0C CMP W8, 0x1
	0x03A13A10 B.NE 0x3A13A28
	0x03A13A14 LDR X8, [X20 + 0xA0]
	0x03A13A18 CBZ X8, 0x3A13A88
	0x03A13A1C LDR W8, [X8 + 0x18]
	0x03A13A20 CMP W8, 0x1
	0x03A13A24 B.EQ 0x3A13A58
	0x03A13A28 ADRP X8, 0x741000
	0x03A13A2C LDR X8, [X8 + 0x4B0]
	0x03A13A30 MOVZ W1, 0x1
	0x03A13A34 LDR X0, [X8]
	0x03A13A38 BL 0x1C16D6C
	0x03A13A3C STR X0, [X20 + 0x98]
	0x03A13A40 ADRP X8, 0x710000
	0x03A13A44 LDR X8, [X8 + 0x8D0]
	0x03A13A48 MOVZ W1, 0x1
	0x03A13A4C LDR X0, [X8]
	0x03A13A50 BL 0x1C16D6C
	0x03A13A54 STR X0, [X20 + 0xA0]
	0x03A13A58 LDR X1, [X20 + 0x58]
	0x03A13A5C ADD X8, X31, 0x8
	0x03A13A60 MOV X0, X20
	0x03A13A64 BL 0x3A13A8C
	0x03A13A68 LDP X8, X30, [X31 + 0x18]
	0x03A13A6C LDUR V0, [X31 + 0x8]
	0x03A13A70 LDP X22, X21, [X31 + 0x30]
	0x03A13A74 STR X8, [X19 + 0x10]
	0x03A13A78 STR V0, [X19]
	0x03A13A7C LDP X20, X19, [X31 + 0x40]
	0x03A13A80 ADD X31, X31, 0x50
	0x03A13A84 RET
	0x03A13A88 BL 0x1C16F20
	0x03A13A8C SUB X31, X31, 0x110
	0x03A13A90 STP D9, D8, [X31 + 0xA0]
	0x03A13A94 STP X29, X30, [X31 + 0xB0]
	0x03A13A98 STP X28, X27, [X31 + 0xC0]
	0x03A13A9C STP X26, X25, [X31 + 0xD0]
	0x03A13AA0 STP X24, X23, [X31 + 0xE0]
	0x03A13AA4 STP X22, X21, [X31 + 0xF0]
	0x03A13AA8 STP X20, X19, [X31 + 0x100]
	0x03A13AAC ADRP X21, 0x9CE000
	0x03A13AB0 LDRB W9, [X21 + 0xFD0]
	0x03A13AB4 MOV X24, X1
	0x03A13AB8 MOV X20, X0
	0x03A13ABC MOV X19, X8
	0x03A13AC0 TBNZ X9, 0x0, 0x3A13B74
	0x03A13AC4 ADRP X0, 0x741000
	0x03A13AC8 LDR X0, [X0 + 0x4B0]
	0x03A13ACC BL 0x1C16CF4
	0x03A13AD0 ADRP X0, 0x741000
	0x03A13AD4 LDR X0, [X0 + 0x4B8]
	0x03A13AD8 BL 0x1C16CF4
	0x03A13ADC ADRP X0, 0x741000
	0x03A13AE0 LDR X0, [X0 + 0x4C0]
	0x03A13AE4 BL 0x1C16CF4
	0x03A13AE8 ADRP X0, 0x741000
	0x03A13AEC LDR X0, [X0 + 0x4C8]
	0x03A13AF0 BL 0x1C16CF4
	0x03A13AF4 ADRP X0, 0x741000
	0x03A13AF8 LDR X0, [X0 + 0x4D0]
	0x03A13AFC BL 0x1C16CF4
	0x03A13B00 ADRP X0, 0x741000
	0x03A13B04 LDR X0, [X0 + 0x4D8]
	0x03A13B08 BL 0x1C16CF4
	0x03A13B0C ADRP X0, 0x741000
	0x03A13B10 LDR X0, [X0 + 0x4E0]
	0x03A13B14 BL 0x1C16CF4
	0x03A13B18 ADRP X0, 0x741000
	0x03A13B1C LDR X0, [X0 + 0x4E8]
	0x03A13B20 BL 0x1C16CF4
	0x03A13B24 ADRP X0, 0x741000
	0x03A13B28 LDR X0, [X0 + 0x4F0]
	0x03A13B2C BL 0x1C16CF4
	0x03A13B30 ADRP X0, 0x741000
	0x03A13B34 LDR X0, [X0 + 0x4F8]
	0x03A13B38 BL 0x1C16CF4
	0x03A13B3C ADRP X0, 0x6E0000
	0x03A13B40 LDR X0, [X0 + 0x598]
	0x03A13B44 BL 0x1C16CF4
	0x03A13B48 ADRP X0, 0x741000
	0x03A13B4C LDR X0, [X0 + 0x500]
	0x03A13B50 BL 0x1C16CF4
	0x03A13B54 ADRP X0, 0x741000
	0x03A13B58 LDR X0, [X0 + 0x508]
	0x03A13B5C BL 0x1C16CF4
	0x03A13B60 ADRP X0, 0x710000
	0x03A13B64 LDR X0, [X0 + 0x8D0]
	0x03A13B68 BL 0x1C16CF4
	0x03A13B6C MOVZ W8, 0x1
	0x03A13B70 STRB W8, [X21 + 0xFD0]
	0x03A13B74 MOVI V0.2D, 0x0
	0x03A13B78 STP X31, X31, [X31 + 0x90]
	0x03A13B7C STP X31, X31, [X31 + 0x80]
	0x03A13B80 STP X31, X31, [X31 + 0x70]
	0x03A13B84 STP V0, V0, [X31 + 0x50]
	0x03A13B88 STR V0, [X31 + 0x4]
	0x03A13B8C CBZ X20, 0x3A13ED0
	0x03A13B90 ADRP X21, 0x6E0000
	0x03A13B94 LDR X21, [X21 + 0x598]
	0x03A13B98 MOV X0, X20
	0x03A13B9C BL 0x3A131A8
	0x03A13BA0 LDR X8, [X21]
	0x03A13BA4 MOV X21, X0
	0x03A13BA8 LDR W9, [X8 + 0xE0]
	0x03A13BAC CBNZ W9, 0x3A13BB8
	0x03A13BB0 MOV X0, X8
	0x03A13BB4 BL 0x1C16DFC
	0x03A13BB8 MOV X0, X24
	0x03A13BBC MOV X1, X31
	0x03A13BC0 MOV X2, X31
	0x03A13BC4 BL 0x3C3883C
	0x03A13BC8 TBZ X0, 0x0, 0x3A13C38
	0x03A13BCC CBZ X21, 0x3A13ED0
	0x03A13BD0 MOV X0, X21
	0x03A13BD4 MOV X1, X31
	0x03A13BD8 BL 0x3C19C94
	0x03A13BDC ADRP X20, 0x9C5000
	0x03A13BE0 LDRB W8, [X20 + 0x783]
	0x03A13BE4 CBNZ W8, 0x3A13BFC
	0x03A13BE8 ADRP X0, 0x6E0000
	0x03A13BEC LDR X0, [X0 + 0x5A0]
	0x03A13BF0 BL 0x1C16CF4
	0x03A13BF4 MOVZ W8, 0x1
	0x03A13BF8 STRB W8, [X20 + 0x783]
	0x03A13BFC ADRP X8, 0x6E0000
	0x03A13C00 LDR X8, [X8 + 0x5A0]
	0x03A13C04 MOVI V2.2S, 0x3F, 0x18
	0x03A13C08 FMOV S3, 0.5
	0x03A13C0C LDR X8, [X8]
	0x03A13C10 LDR X8, [X8 + 0xB8]
	0x03A13C14 LDR V0, [X8]
	0x03A13C18 LDR V1, [X8 + 0x8]
	0x03A13C1C STR D0, [X19]
	0x03A13C20 STR S1, [X19 + 0x8]
	0x00000000 INVALID
	0x03A13C28 FMUL S1, S1, S3
	0x03A13C2C STUR D0, [X19 + 0xC]
	0x03A13C30 STR S1, [X19 + 0x14]
	0x03A13C34 B 0x3A13EAC
	0x03A13C38 CBZ X24, 0x3A13ED0
	0x03A13C3C MOV X0, X24
	0x03A13C40 MOV X1, X31
	0x03A13C44 BL 0x3C41BD0
	0x03A13C48 ADRP X8, 0x741000
	0x03A13C4C LDR X8, [X8 + 0x508]
	0x03A13C50 MOV X0, X24
	0x03A13C54 MOV W1, W31
	0x03A13C58 LDR X2, [X8]
	0x03A13C5C BL 0x225A2F4
	0x03A13C60 ADRP X8, 0x741000
	0x03A13C64 LDR X8, [X8 + 0x500]
	0x03A13C68 STP X0, X1, [X31 + 0x90]
	0x03A13C6C MOVZ W1, 0x4
	0x03A13C70 MOV X0, X24
	0x03A13C74 LDR X2, [X8]
	0x03A13C78 BL 0x225A22C
	0x03A13C7C STP X0, X1, [X31 + 0x80]
	0x03A13C80 MOV X0, X24
	0x03A13C84 MOV X1, X31
	0x03A13C88 BL 0x3C42694
	0x03A13C8C MOV X23, X0
	0x03A13C90 MOV X22, X1
	0x03A13C94 ADD X8, X31, 0x10
	0x03A13C98 MOV X0, X24
	0x03A13C9C MOV X1, X31
	0x03A13CA0 BL 0x3C417AC
	0x03A13CA4 ADD X8, X31, 0x10
	0x03A13CA8 MOV X0, X24
	0x03A13CAC MOV X1, X31
	0x03A13CB0 BL 0x3C417AC
	0x03A13CB4 ADRP X8, 0x741000
	0x03A13CB8 LDR X8, [X8 + 0x4E0]
	0x03A13CBC ADD X0, X31, 0x70
	0x03A13CC0 MOVZ W2, 0x2
	0x03A13CC4 MOVZ W3, 0x1
	0x03A13CC8 LDR X4, [X8]
	0x03A13CCC MOV W1, W22
	0x03A13CD0 BL 0x23FF924
	0x03A13CD4 ADRP X25, 0x741000
	0x03A13CD8 LDR X25, [X25 + 0x4F8]
	0x03A13CDC ADD X0, X31, 0x90
	0x03A13CE0 LDR X1, [X25]
	0x03A13CE4 BL 0x2407DFC
	0x03A13CE8 CMP W0, 0x1
	0x03A13CEC B.LT 0x3A13D78
	0x03A13CF0 ADRP X27, 0x741000
	0x03A13CF4 ADRP X28, 0x741000
	0x03A13CF8 LDR X27, [X27 + 0x4F0]
	0x03A13CFC LDR X28, [X28 + 0x4E8]
	0x03A13D00 MOV X26, X31
	0x03A13D04 MOV X24, X31
	0x03A13D08 MOVZ W29, 0x3F800000
	0x03A13D0C LDR X2, [X27]
	0x03A13D10 ADD X0, X31, 0x90
	0x03A13D14 MOV W1, W24
	0x03A13D18 BL 0x2407B60
	0x03A13D1C LDR X2, [X27]
	0x03A13D20 ADD X0, X31, 0x90
	0x03A13D24 MOV W1, W24
	0x03A13D28 MOV V8.16B, V0.16B
	0x03A13D2C BL 0x2407B60
	0x03A13D30 LDR X2, [X28]
	0x03A13D34 ADD X0, X31, 0x80
	0x03A13D38 MOV W1, W24
	0x03A13D3C MOV V9.16B, V1.16B
	0x03A13D40 BL 0x2407504
	0x03A13D44 LDR X8, [X31 + 0x70]
	0x03A13D48 ADD X0, X31, 0x90
	0x03A13D4C ADD X24, X24, 0x1
	0x03A13D50 ADD X8, X8, X26
	0x03A13D54 STP S8, S9, [X8]
	0x03A13D58 STP X31, X31, [X8 + 0x8]
	0x03A13D5C STR W29, [X8 + 0x18]
	0x03A13D60 STP S0, S1, [X8 + 0x1C]
	0x03A13D64 LDR X1, [X25]
	0x03A13D68 BL 0x2407DFC
	0x03A13D6C CMP X24, W0, SXTW
	0x03A13D70 ADD X26, X26, 0x24
	0x03A13D74 B.LT 0x3A13D0C
	0x03A13D78 ADRP X25, 0x741000
	0x03A13D7C LDR X25, [X25 + 0x4B8]
	0x03A13D80 LDR W24, [X31 + 0x78]
	0x03A13D84 LDR X0, [X25]
	0x03A13D88 LDR W8, [X0 + 0xE0]
	0x03A13D8C CBNZ W8, 0x3A13D94
	0x03A13D90 BL 0x1C16DFC
	0x03A13D94 CBZ X21, 0x3A13ED0
	0x03A13D98 LDR X8, [X25]
	0x03A13D9C MOV X0, X21
	0x03A13DA0 MOV W1, W24
	0x03A13DA4 MOV X3, X31
	0x03A13DA8 LDR X8, [X8 + 0xB8]
	0x03A13DAC LDR X2, [X8]
	0x03A13DB0 BL 0x3C18D00
	0x03A13DB4 ADRP X8, 0x741000
	0x03A13DB8 LDP X1, X2, [X31 + 0x70]
	0x03A13DBC LDR X8, [X8 + 0x4C8]
	0x03A13DC0 MOV X0, X21
	0x03A13DC4 MOV W3, W31
	0x03A13DC8 MOV W4, W31
	0x03A13DCC LDR X8, [X8]
	0x03A13DD0 MOV W5, W2
	0x03A13DD4 MOV W6, W31
	0x03A13DD8 MOV W7, W31
	0x03A13DDC STR X8, [X31]
	0x03A13DE0 BL 0x221B178
	0x03A13DE4 ADRP X8, 0x741000
	0x03A13DE8 LDR X8, [X8 + 0x4C0]
	0x03A13DEC MOVZ W5, 0x1
	0x03A13DF0 MOV X0, X21
	0x03A13DF4 MOV X1, X23
	0x03A13DF8 LDR X7, [X8]
	0x03A13DFC MOV X2, X22
	0x03A13E00 MOV W3, W31
	0x03A13E04 MOV W4, W31
	0x03A13E08 MOV W6, W31
	0x03A13E0C BL 0x221A138

ISIL:
	001 Subtract X31, X31, 352
	002 Move [X31+240], D12
	003 Move [X31+248], D11
	004 Move [X31+256], D10
	005 Move [X31+264], D9
	006 Move [X31+272], D8
	007 Move [X31+280], X29
	008 Move [X31+288], X30
	009 Move [X31+296], X25
	010 Move [X31+304], X24
	011 Move [X31+312], X23
	012 Move [X31+320], X22
	013 Move [X31+328], X21
	014 Move [X31+336], X20
	015 Move [X31+344], X19
	016 Move X22, 0x9CF000
	017 Move W8, [X22+4016]
	018 Move W20, W2
	019 Move W21, W1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0x742000
	026 Move X0, [X0+784]
	027 Call 0x1C17CF4
	028 Move X0, 0x742000
	029 Move X0, [X0+1144]
	030 Call 0x1C17CF4
	031 Move X0, 0x742000
	032 Move X0, [X0+528]
	033 Call 0x1C17CF4
	034 Move X0, 0x6E1000
	035 Move X0, [X0+1448]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X22+4016], W8
	039 NotImplemented "Instruction MOVI not yet implemented."
	040 Move [X31+112], V0
	041 Move [X31+120], V0
	042 Move [X31+6], V0
	043 Move X0, [X19+40]
	044 Compare X0, 0
	045 JumpIfEqual {430}
	046 Move X23, 0x742000
	047 Move X23, [X23+1144]
	048 Move V8, [X19+56]
	049 Move W1, W20
	050 Move X2, [X23]
	051 Call List`1<DoublePoint>.get_Item, X0, X1
	052 Move X0, [X19+40]
	053 Compare X0, 0
	054 JumpIfEqual {430}
	055 Move X2, [X23]
	056 Move W1, W21
	057 Move V9, V0
	058 Call List`1<DoublePoint>.get_Item, X0, X1
	059 Move X0, [X19+40]
	060 Compare X0, 0
	061 JumpIfEqual {430}
	062 Move X2, [X23]
	063 Move W1, W20
	064 Move V10, V0
	065 Call List`1<DoublePoint>.get_Item, X0, X1
	066 Move X0, [X19+40]
	067 Compare X0, 0
	068 JumpIfEqual {430}
	069 Move X2, [X23]
	070 Move X22, 0x6E1000
	071 Move X22, [X22+1448]
	072 Move W1, W21
	073 Move V11, V1
	074 Call List`1<DoublePoint>.get_Item, X0, X1
	075 Move X0, [X22]
	076 Move V12, V1
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {81}
	080 Call 0x1C17DFC
	081 Multiply D0, D9, D10
	082 Multiply D1, D11, D12
	083 Add D1, D0, D1
	084 Move V0, V8
	085 Call 0x3EB2D80
	086 Move D1, 0.25
	087 Multiply D0, D0, D1
	088 Call 0x3EB2DD0
	089 Move X0, [X19+24]
	090 Compare X0, 0
	091 JumpIfEqual {430}
	092 Move X24, 0x742000
	093 Move X24, [X24+528]
	094 Add X8, X31, 192
	095 Move W1, W21
	096 Move V8, V0
	097 Move X2, [X24]
	098 Call List`1<IntPoint>.get_Item, X0, X1
	099 Move X0, [X19+40]
	100 Compare X0, 0
	101 JumpIfEqual {430}
	102 Move X2, [X23]
	103 Move X22, [X31+200]
	104 Move V10, [X19+48]
	105 Move W1, W20
	106 Call List`1<DoublePoint>.get_Item, X0, X1
	107 Move X0, [X19+40]
	108 Compare X0, 0
	109 JumpIfEqual {430}
	110 Move X2, [X23]
	111 Move W1, W20
	112 Move V9, V0
	113 Call List`1<DoublePoint>.get_Item, X0, X1
	114 Multiply D1, D8, D1
	115 Subtract D1, D9, D1
	116 NotImplemented "Instruction SCVTF not yet implemented."
	117 Multiply D1, D10, D1
	118 Move D2, 0.5
	119 Move D3, -0.5
	120 Add D0, D1, D0
	121 Move X8, 0x7FF00000
	122 Move X0, [X19+24]
	123 Add D2, D0, D2
	124 Add D3, D0, D3
	125 NotImplemented "Instruction FCMP not yet implemented."
	126 Move D1, X8
	127 NotImplemented "Instruction FCSEL not yet implemented."
	128 NotImplemented "Instruction FCVTZS not yet implemented."
	129 NotImplemented "Instruction FCMP not yet implemented."
	130 Move X9, 0x80000000
	131 NotImplemented "Instruction CSEL not yet implemented."
	132 Compare X0, 0
	133 JumpIfEqual {430}
	134 Move X2, [X24]
	135 Add X8, X31, 192
	136 Move W1, W21
	137 Call List`1<IntPoint>.get_Item, X0, X1
	138 Move X0, [X19+40]
	139 Compare X0, 0
	140 JumpIfEqual {430}
	141 Move X2, [X23]
	142 Move X25, [X31+208]
	143 Move V10, [X19+48]
	144 Move W1, W20
	145 Call List`1<DoublePoint>.get_Item, X0, X1
	146 Move X0, [X19+40]
	147 Compare X0, 0
	148 JumpIfEqual {430}
	149 Move X2, [X23]
	150 Move W1, W20
	151 Move V9, V1
	152 Call List`1<DoublePoint>.get_Item, X0, X1
	153 Multiply D0, D8, D0
	154 Add D0, D9, D0
	155 NotImplemented "Instruction SCVTF not yet implemented."
	156 Multiply D0, D10, D0
	157 Move D2, 0.5
	158 Move D3, -0.5
	159 Add D0, D0, D1
	160 Move X8, 0x7FF00000
	161 Add D2, D0, D2
	162 Add D3, D0, D3
	163 NotImplemented "Instruction FCMP not yet implemented."
	164 Move D1, X8
	165 NotImplemented "Instruction FCSEL not yet implemented."
	166 NotImplemented "Instruction FCVTZS not yet implemented."
	167 NotImplemented "Instruction FCMP not yet implemented."
	168 Move X9, 0x80000000
	169 NotImplemented "Instruction CSEL not yet implemented."
	170 Add X0, X31, 96
	171 Move X1, X22
	172 Move X3, X31
	173 Call IntPoint..ctor, X0, X1, X2
	174 Move X0, [X19+40]
	175 Compare X0, 0
	176 JumpIfEqual {430}
	177 Move X2, [X23]
	178 Move W1, W20
	179 Call List`1<DoublePoint>.get_Item, X0, X1
	180 Move X0, [X19+40]
	181 Compare X0, 0
	182 JumpIfEqual {430}
	183 Move X2, [X23]
	184 Move W1, W20
	185 Move V9, V0
	186 Call List`1<DoublePoint>.get_Item, X0, X1
	187 Multiply D0, D8, D1
	188 Subtract D0, D9, D0
	189 Move [X31+128], D0
	190 Move X0, [X19+40]
	191 Compare X0, 0
	192 JumpIfEqual {430}
	193 Move X2, [X23]
	194 Move W1, W20
	195 Call List`1<DoublePoint>.get_Item, X0, X1
	196 Move X0, [X19+40]
	197 Compare X0, 0
	198 JumpIfEqual {430}
	199 Move X2, [X23]
	200 Move W1, W20
	201 Move V9, V1
	202 Call List`1<DoublePoint>.get_Item, X0, X1
	203 Multiply D0, D8, D0
	204 Add D0, D9, D0
	205 Move [X31+136], D0
	206 Move V1, [X31+96]
	207 Move V2, [X31+112]
	208 Move X0, [X19+32]
	209 Move V0, [X31+8]
	210 Move [X31+48], V1
	211 Move [X31+56], V2
	212 Move [X31+5], V0
	213 Compare X0, 0
	214 JumpIfEqual {430}
	215 Move V0, [X31+48]
	216 Move V1, [X31+64]
	217 Move V2, [X31+5]
	218 Move X25, 0x742000
	219 Move X25, [X25+784]
	220 Move [X31+144], V0
	221 Move [X31+152], V1
	222 Move [X31+11], V2
	223 Move W9, [X0+28]
	224 Move X8, [X0+16]
	225 Move X10, [X25]
	226 Add W9, W9, 1
	227 Move [X0+28], W9
	228 Compare X8, 0
	229 JumpIfEqual {430}
	230 NotImplemented "Instruction LDRSW not yet implemented."
	231 Move W11, [X8+24]
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Add W10, W9, 1
	234 Move [X0+24], W10
	235 Move V2, [X31+160]
	236 Move V0, [X31+176]
	237 Move V1, [X31+9]
	238 Move W10, 48
	239 NotImplemented "Instruction MADD not yet implemented."
	240 Move [X8+48], V2
	241 Move [X8+56], V0
	242 Move [X8+2], V1
	243 Move X8, [X10+32]
	244 Move V0, [X31+144]
	245 Move V1, [X31+160]
	246 Move V2, [X31+11]
	247 Add X1, X31, 192
	248 Move X8, [X8+192]
	249 Move X2, [X8+112]
	250 Move [X31+192], V0
	251 Move [X31+200], V1
	252 Move [X31+14], V2
	253 Call List`1<IntPoint>.AddWithResize, X0, X1
	254 Move X0, [X19+24]
	255 Compare X0, 0
	256 JumpIfEqual {430}
	257 Move X2, [X24]
	258 Add X8, X31, 192
	259 Move W1, W21
	260 Call List`1<IntPoint>.get_Item, X0, X1
	261 Move X0, [X19+40]
	262 Compare X0, 0
	263 JumpIfEqual {430}
	264 Move X2, [X23]
	265 Move X22, [X31+200]
	266 Move V10, [X19+48]
	267 Move W1, W21
	268 Call List`1<DoublePoint>.get_Item, X0, X1
	269 Move X0, [X19+40]
	270 Compare X0, 0
	271 JumpIfEqual {430}
	272 Move X2, [X23]
	273 Move W1, W21
	274 Move V9, V0
	275 Call List`1<DoublePoint>.get_Item, X0, X1
	276 Multiply D1, D8, D1
	277 Add D1, D9, D1
	278 NotImplemented "Instruction SCVTF not yet implemented."
	279 Multiply D1, D10, D1
	280 Move D2, 0.5
	281 Move D3, -0.5
	282 Add D0, D1, D0
	283 Move X8, 0x7FF00000
	284 Move X0, [X19+24]
	285 Add D2, D0, D2
	286 Add D3, D0, D3
	287 NotImplemented "Instruction FCMP not yet implemented."
	288 Move D1, X8
	289 NotImplemented "Instruction FCSEL not yet implemented."
	290 NotImplemented "Instruction FCVTZS not yet implemented."
	291 NotImplemented "Instruction FCMP not yet implemented."
	292 Move X9, 0x80000000
	293 NotImplemented "Instruction CSEL not yet implemented."
	294 Compare X0, 0
	295 JumpIfEqual {430}
	296 Move X2, [X24]
	297 Add X8, X31, 192
	298 Move W1, W21
	299 Call List`1<IntPoint>.get_Item, X0, X1
	300 Move X0, [X19+40]
	301 Compare X0, 0
	302 JumpIfEqual {430}
	303 Move X2, [X23]
	304 Move X24, [X31+208]
	305 Move V10, [X19+48]
	306 Move W1, W21
	307 Call List`1<DoublePoint>.get_Item, X0, X1
	308 Move X0, [X19+40]
	309 Compare X0, 0
	310 JumpIfEqual {430}
	311 Move X2, [X23]
	312 Move W1, W21
	313 Move V9, V1
	314 Call List`1<DoublePoint>.get_Item, X0, X1
	315 Multiply D0, D8, D0
	316 Subtract D0, D9, D0
	317 NotImplemented "Instruction SCVTF not yet implemented."
	318 Multiply D0, D10, D0
	319 Move D2, 0.5
	320 Move D3, -0.5
	321 Add D0, D0, D1
	322 Move X8, 0x7FF00000
	323 Add D2, D0, D2
	324 Add D3, D0, D3
	325 NotImplemented "Instruction FCMP not yet implemented."
	326 Move D1, X8
	327 NotImplemented "Instruction FCSEL not yet implemented."
	328 NotImplemented "Instruction FCVTZS not yet implemented."
	329 NotImplemented "Instruction FCMP not yet implemented."
	330 Move X9, 0x80000000
	331 NotImplemented "Instruction CSEL not yet implemented."
	332 Add X0, X31, 96
	333 Move X1, X22
	334 Move X3, X31
	335 Call IntPoint..ctor, X0, X1, X2
	336 Move X0, [X19+40]
	337 Compare X0, 0
	338 JumpIfEqual {430}
	339 Move X2, [X23]
	340 Move W1, W20
	341 Call List`1<DoublePoint>.get_Item, X0, X1
	342 Move X0, [X19+40]
	343 Compare X0, 0
	344 JumpIfEqual {430}
	345 Move X2, [X23]
	346 Move W1, W20
	347 Move V9, V0
	348 Call List`1<DoublePoint>.get_Item, X0, X1
	349 Multiply D0, D8, D1
	350 Add D0, D9, D0
	351 Move [X31+128], D0
	352 Move X0, [X19+40]
	353 Compare X0, 0
	354 JumpIfEqual {430}
	355 Move X2, [X23]
	356 Move W1, W20
	357 Call List`1<DoublePoint>.get_Item, X0, X1
	358 Move X0, [X19+40]
	359 Compare X0, 0
	360 JumpIfEqual {430}
	361 Move X2, [X23]
	362 Move W1, W20
	363 Move V9, V1
	364 Call List`1<DoublePoint>.get_Item, X0, X1
	365 Multiply D0, D8, D0
	366 Subtract D0, D9, D0
	367 Move [X31+136], D0
	368 Move V1, [X31+96]
	369 Move V2, [X31+112]
	370 Move X0, [X19+32]
	371 Move V0, [X31+8]
	372 Move [X31], V1
	373 Move [X31+8], V2
	374 Move [X31+2], V0
	375 Compare X0, 0
	376 JumpIfEqual {430}
	377 Move V0, [X31]
	378 Move V1, [X31+16]
	379 Move V2, [X31+2]
	380 Move X10, [X25]
	381 Move [X31+144], V0
	382 Move [X31+152], V1
	383 Move [X31+11], V2
	384 Move W9, [X0+28]
	385 Move X8, [X0+16]
	386 Add W9, W9, 1
	387 Move [X0+28], W9
	388 Compare X8, 0
	389 JumpIfEqual {430}
	390 NotImplemented "Instruction LDRSW not yet implemented."
	391 Move W11, [X8+24]
	392 NotImplemented "Instruction CMP not yet implemented."
	393 Add W10, W9, 1
	394 Move [X0+24], W10
	395 Move V2, [X31+160]
	396 Move V0, [X31+176]
	397 Move V1, [X31+9]
	398 Move W10, 48
	399 NotImplemented "Instruction MADD not yet implemented."
	400 Move [X8+48], V2
	401 Move [X8+56], V0
	402 Move [X8+2], V1
	403 Move X8, [X10+32]
	404 Move V0, [X31+144]
	405 Move V1, [X31+160]
	406 Move V2, [X31+11]
	407 Add X1, X31, 192
	408 Move X8, [X8+192]
	409 Move X2, [X8+112]
	410 Move [X31+192], V0
	411 Move [X31+200], V1
	412 Move [X31+14], V2
	413 Call List`1<IntPoint>.AddWithResize, X0, X1
	414 Move X20, [X31+336]
	415 Move X19, [X31+344]
	416 Move X22, [X31+320]
	417 Move X21, [X31+328]
	418 Move X24, [X31+304]
	419 Move X23, [X31+312]
	420 Move X30, [X31+288]
	421 Move X25, [X31+296]
	422 Move X29, [X31+280]
	423 Move D9, [X31+264]
	424 Move D8, [X31+272]
	425 Move D11, [X31+248]
	426 Move D10, [X31+256]
	427 Move V12, [X31+240]
	428 Add X31, X31, 352
	429 Return 
	430 Call 0x1C17F20

Method: System.Void DoMiter(System.Int32 j, System.Int32 k, System.Double r)

Disassembly:
	0x03A13E10 ADRP X8, 0x741000
	0x03A13E14 LDR W1, [X31 + 0x78]
	0x03A13E18 LDR X8, [X8 + 0x4B0]
	0x03A13E1C LDR X0, [X8]
	0x03A13E20 BL 0x1C16D6C
	0x03A13E24 STR X0, [X20 + 0x98]
	0x03A13E28 ADRP X8, 0x741000
	0x03A13E2C LDR X8, [X8 + 0x4D8]
	0x03A13E30 MOV X2, X0
	0x03A13E34 LDP X0, X1, [X31 + 0x70]
	0x03A13E38 LDR X4, [X8]
	0x03A13E3C MOV W3, W1
	0x03A13E40 BL 0x2400390
	0x03A13E44 ADRP X8, 0x710000
	0x03A13E48 LDR X8, [X8 + 0x8D0]
	0x03A13E4C MOV W1, W22
	0x03A13E50 LDR X0, [X8]
	0x03A13E54 BL 0x1C16D6C
	0x03A13E58 STR X0, [X20 + 0xA0]
	0x03A13E5C ADRP X8, 0x741000
	0x03A13E60 LDR X8, [X8 + 0x4D0]
	0x03A13E64 MOV X2, X0
	0x03A13E68 MOV X0, X23
	0x03A13E6C MOV X1, X22
	0x03A13E70 LDR X4, [X8]
	0x03A13E74 MOV W3, W22
	0x03A13E78 BL 0x23EC284
	0x03A13E7C ADD X8, X31, 0x10
	0x03A13E80 MOV X0, X21
	0x03A13E84 MOV W1, W31
	0x03A13E88 MOV X2, X31
	0x03A13E8C BL 0x3C17698
	0x03A13E90 LDP V1, V0, [X31 + 0x10]
	0x03A13E94 LDR V2, [X31 + 0x3]
	0x03A13E98 STP V1, V0, [X31 + 0x40]
	0x03A13E9C LDR X8, [X31 + 0x50]
	0x03A13EA0 STR V2, [X31 + 0x6]
	0x03A13EA4 STR V1, [X19]
	0x03A13EA8 STR X8, [X19 + 0x10]
	0x03A13EAC LDP X20, X19, [X31 + 0x100]
	0x03A13EB0 LDP X22, X21, [X31 + 0xF0]
	0x03A13EB4 LDP X24, X23, [X31 + 0xE0]
	0x03A13EB8 LDP X26, X25, [X31 + 0xD0]
	0x03A13EBC LDP X28, X27, [X31 + 0xC0]
	0x03A13EC0 LDP X29, X30, [X31 + 0xB0]
	0x03A13EC4 LDP D9, D8, [X31 + 0xA0]
	0x03A13EC8 ADD X31, X31, 0x110
	0x03A13ECC RET
	0x03A13ED0 BL 0x1C16F20
	0x03A13ED4 SUB X31, X31, 0x60
	0x03A13ED8 STP X30, X27, [X31 + 0x10]
	0x03A13EDC STP X26, X25, [X31 + 0x20]
	0x03A13EE0 STP X24, X23, [X31 + 0x30]
	0x03A13EE4 STP X22, X21, [X31 + 0x40]
	0x03A13EE8 STP X20, X19, [X31 + 0x50]
	0x03A13EEC STR W31, [X31 + 0x8]
	0x03A13EF0 STR X31, [X31]
	0x03A13EF4 CBZ X0, 0x3A13F98
	0x03A13EF8 LDR X8, [X0 + 0x18]
	0x03A13EFC MOVZ W20, 0x9DC5
	0x03A13F00 MOV X19, X0
	0x03A13F04 MOVK W20, 0x811C0000
	0x03A13F08 CMP W8, 0x1
	0x03A13F0C B.LT 0x3A13F9C
	0x03A13F10 ADD X9, X31, 0x0
	0x03A13F14 MOVZ W27, 0x193
	0x03A13F18 MOV X25, X31
	0x03A13F1C AND X8, X8, 0x0
	0x03A13F20 ADD X26, X19, 0x28
	0x03A13F24 ORR X21, X9, 0x7
	0x03A13F28 ADD X22, X9, 0x8
	0x03A13F2C MOVK W27, 0x1000000
	0x03A13F30 CMP X25, W8, UXTW
	0x03A13F34 B.CS 0x3A13FBC
	0x03A13F38 LDUR V0, [X26 - 0x8]
	0x03A13F3C LDR V1, [X26], #0xC
	0x03A13F40 ADD X0, X31, 0x0
	0x03A13F44 MOV X1, X31
	0x03A13F48 STR D0, [X31]
	0x03A13F4C STR S1, [X31 + 0x8]
	0x03A13F50 BL 0x338FE0C
	0x03A13F54 MOV W23, W0
	0x03A13F58 MOV X0, X21
	0x03A13F5C MOV X1, X31
	0x03A13F60 BL 0x338FE0C
	0x03A13F64 MOV W24, W0
	0x03A13F68 MOV X0, X22
	0x03A13F6C MOV X1, X31
	0x03A13F70 BL 0x338FE0C
	0x03A13F74 LDR W8, [X19 + 0x18]
	0x03A13F78 MUL W9, W20, W27
	0x03A13F7C EOR W9, W23, W9, 0x0
	0x03A13F80 EOR W9, W9, W24, 0x2
	0x03A13F84 ADD X25, X25, 0x1
	0x03A13F88 EOR W20, W9, W0, 0x2
	0x03A13F8C CMP X25, W8, SXTW
	0x03A13F90 B.LT 0x3A13F30
	0x03A13F94 B 0x3A13F9C
	0x03A13F98 MOV W20, W31
	0x03A13F9C MOV W0, W20
	0x03A13FA0 LDP X20, X19, [X31 + 0x50]
	0x03A13FA4 LDP X22, X21, [X31 + 0x40]
	0x03A13FA8 LDP X24, X23, [X31 + 0x30]
	0x03A13FAC LDP X26, X25, [X31 + 0x20]
	0x03A13FB0 LDP X30, X27, [X31 + 0x10]
	0x03A13FB4 ADD X31, X31, 0x60
	0x03A13FB8 RET
	0x03A13FBC BL 0x1C16F28
	0x03A13FC0 LDR V1, [X0]
	0x03A13FC4 STR S0, [X0]
	0x03A13FC8 FCMP S1, S0
	0x03A13FCC CSET W8, NE
	0x03A13FD0 MOV W0, W8
	0x03A13FD4 RET
	0x03A13FD8 LDR W8, [X1]
	0x03A13FDC STR W0, [X1]
	0x03A13FE0 CMP W8, W0
	0x03A13FE4 CSET W8, NE
	0x03A13FE8 MOV W0, W8
	0x03A13FEC RET
	0x03A13FF0 LDR W8, [X1]
	0x03A13FF4 STR W0, [X1]
	0x03A13FF8 CMP W8, W0
	0x03A13FFC CSET W8, NE
	0x03A14000 MOV W0, W8
	0x03A14004 RET
	0x03A14008 STR D10, [X31 - 0x80]!
	0x03A1400C STP D9, D8, [X31 + 0x10]
	0x03A14010 STP X29, X30, [X31 + 0x20]
	0x03A14014 STP X28, X27, [X31 + 0x30]
	0x03A14018 STP X26, X25, [X31 + 0x40]
	0x03A1401C STP X24, X23, [X31 + 0x50]
	0x03A14020 STP X22, X21, [X31 + 0x60]
	0x03A14024 STP X20, X19, [X31 + 0x70]
	0x03A14028 SUB X31, X31, 0x1F0
	0x03A1402C ADRP X19, 0x9CD000
	0x03A14030 LDRB W9, [X19 + 0xFCE]
	0x03A14034 MOV V8.16B, V0.16B
	0x03A14038 MOV X24, X1
	0x03A1403C MOV X22, X0
	0x03A14040 MOV X20, X8
	0x03A14044 TBNZ X9, 0x0, 0x3A14140
	0x03A14048 ADRP X0, 0x740000
	0x03A1404C LDR X0, [X0 + 0x510]
	0x03A14050 BL 0x1C16CF4
	0x03A14054 ADRP X0, 0x740000
	0x03A14058 LDR X0, [X0 + 0x518]
	0x03A1405C BL 0x1C16CF4
	0x03A14060 ADRP X0, 0x740000
	0x03A14064 LDR X0, [X0 + 0x310]
	0x03A14068 BL 0x1C16CF4
	0x03A1406C ADRP X0, 0x740000
	0x03A14070 LDR X0, [X0 + 0x170]
	0x03A14074 BL 0x1C16CF4
	0x03A14078 ADRP X0, 0x740000
	0x03A1407C LDR X0, [X0 + 0x3F8]
	0x03A14080 BL 0x1C16CF4
	0x03A14084 ADRP X0, 0x740000
	0x03A14088 LDR X0, [X0 + 0x200]
	0x03A1408C BL 0x1C16CF4
	0x03A14090 ADRP X0, 0x740000
	0x03A14094 LDR X0, [X0 + 0x238]
	0x03A14098 BL 0x1C16CF4
	0x03A1409C ADRP X0, 0x740000
	0x03A140A0 LDR X0, [X0 + 0x240]
	0x03A140A4 BL 0x1C16CF4
	0x03A140A8 ADRP X0, 0x740000
	0x03A140AC LDR X0, [X0 + 0x210]
	0x03A140B0 BL 0x1C16CF4
	0x03A140B4 ADRP X0, 0x740000
	0x03A140B8 LDR X0, [X0 + 0x168]
	0x03A140BC BL 0x1C16CF4
	0x03A140C0 ADRP X0, 0x740000
	0x03A140C4 LDR X0, [X0 + 0x3F0]
	0x03A140C8 BL 0x1C16CF4
	0x03A140CC ADRP X0, 0x716000
	0x03A140D0 LDR X0, [X0 + 0xF58]
	0x03A140D4 BL 0x1C16CF4
	0x03A140D8 ADRP X0, 0x6DF000
	0x03A140DC LDR X0, [X0 + 0x5A8]
	0x03A140E0 BL 0x1C16CF4
	0x03A140E4 ADRP X0, 0x708000
	0x03A140E8 LDR X0, [X0 + 0xD8]

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+192], D10
	003 Move [X31+208], D9
	004 Move [X31+216], D8
	005 Move [X31+224], X29
	006 Move [X31+232], X30
	007 Move [X31+240], X24
	008 Move [X31+248], X23
	009 Move [X31+256], X22
	010 Move [X31+264], X21
	011 Move [X31+272], X20
	012 Move [X31+280], X19
	013 Move X22, 0x9CF000
	014 Move W8, [X22+4017]
	015 Move V8, V0
	016 Move W21, W2
	017 Move W20, W1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {34}
	023 Move X0, 0x742000
	024 Move X0, [X0+784]
	025 Call 0x1C17CF4
	026 Move X0, 0x742000
	027 Move X0, [X0+1144]
	028 Call 0x1C17CF4
	029 Move X0, 0x742000
	030 Move X0, [X0+528]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+4017], W8
	034 NotImplemented "Instruction MOVI not yet implemented."
	035 Move [X31+64], V0
	036 Move [X31+72], V0
	037 Move [X31+3], V0
	038 Move X0, [X19+24]
	039 Compare X0, 0
	040 JumpIfEqual {215}
	041 Move X24, 0x742000
	042 Move X24, [X24+528]
	043 Move V10, [X19+48]
	044 Add X8, X31, 144
	045 Move W1, W20
	046 Move X2, [X24]
	047 Call List`1<IntPoint>.get_Item, X0, X1
	048 Move X0, [X19+40]
	049 Compare X0, 0
	050 JumpIfEqual {215}
	051 Move X23, 0x742000
	052 Move X23, [X23+1144]
	053 Move X22, [X31+152]
	054 Move W1, W21
	055 Move X2, [X23]
	056 Call List`1<DoublePoint>.get_Item, X0, X1
	057 Move X0, [X19+40]
	058 Compare X0, 0
	059 JumpIfEqual {215}
	060 Move X2, [X23]
	061 Move W1, W20
	062 Move V9, V0
	063 NotImplemented "Instruction FDIV not yet implemented."
	064 Call List`1<DoublePoint>.get_Item, X0, X1
	065 Add D0, D9, D0
	066 NotImplemented "Instruction SCVTF not yet implemented."
	067 Multiply D0, D10, D0
	068 Move D2, 0.5
	069 Add D0, D0, D1
	070 Move D1, -0.5
	071 Move X8, 0x7FF00000
	072 Move X0, [X19+24]
	073 Add D2, D0, D2
	074 Add D1, D0, D1
	075 NotImplemented "Instruction FCMP not yet implemented."
	076 Move D0, X8
	077 NotImplemented "Instruction FCSEL not yet implemented."
	078 NotImplemented "Instruction FCVTZS not yet implemented."
	079 NotImplemented "Instruction FCMP not yet implemented."
	080 Move X9, 0x80000000
	081 NotImplemented "Instruction CSEL not yet implemented."
	082 Compare X0, 0
	083 JumpIfEqual {215}
	084 Move X2, [X24]
	085 Add X8, X31, 144
	086 Move W1, W20
	087 Call List`1<IntPoint>.get_Item, X0, X1
	088 Move X0, [X19+40]
	089 Compare X0, 0
	090 JumpIfEqual {215}
	091 Move X2, [X23]
	092 Move X24, [X31+160]
	093 Move W1, W21
	094 Call List`1<DoublePoint>.get_Item, X0, X1
	095 Move X0, [X19+40]
	096 Compare X0, 0
	097 JumpIfEqual {215}
	098 Move X2, [X23]
	099 Move W1, W20
	100 Move V8, V1
	101 Call List`1<DoublePoint>.get_Item, X0, X1
	102 Add D1, D8, D1
	103 NotImplemented "Instruction SCVTF not yet implemented."
	104 Multiply D1, D10, D1
	105 Move D2, 0.5
	106 Add D0, D1, D0
	107 Move D1, -0.5
	108 Move X8, 0x7FF00000
	109 Add D2, D0, D2
	110 Add D1, D0, D1
	111 NotImplemented "Instruction FCMP not yet implemented."
	112 Move D0, X8
	113 NotImplemented "Instruction FCSEL not yet implemented."
	114 NotImplemented "Instruction FCVTZS not yet implemented."
	115 NotImplemented "Instruction FCMP not yet implemented."
	116 Move X9, 0x80000000
	117 NotImplemented "Instruction CSEL not yet implemented."
	118 Add X0, X31, 48
	119 Move X1, X22
	120 Move X3, X31
	121 Call IntPoint..ctor, X0, X1, X2
	122 Move X0, [X19+40]
	123 Compare X0, 0
	124 JumpIfEqual {215}
	125 Move X2, [X23]
	126 Move W1, W21
	127 Call List`1<DoublePoint>.get_Item, X0, X1
	128 Move X0, [X19+40]
	129 Compare X0, 0
	130 JumpIfEqual {215}
	131 Move X2, [X23]
	132 Move W1, W20
	133 Move V8, V0
	134 Call List`1<DoublePoint>.get_Item, X0, X1
	135 Add D0, D8, D0
	136 Multiply D0, D10, D0
	137 Move [X31+80], D0
	138 Move X0, [X19+40]
	139 Compare X0, 0
	140 JumpIfEqual {215}
	141 Move X2, [X23]
	142 Move W1, W21
	143 Call List`1<DoublePoint>.get_Item, X0, X1
	144 Move X0, [X19+40]
	145 Compare X0, 0
	146 JumpIfEqual {215}
	147 Move X2, [X23]
	148 Move W1, W20
	149 Move V8, V1
	150 Call List`1<DoublePoint>.get_Item, X0, X1
	151 Add D0, D8, D1
	152 Multiply D0, D10, D0
	153 Move [X31+88], D0
	154 Move V1, [X31+48]
	155 Move V2, [X31+64]
	156 Move X0, [X19+32]
	157 Move V0, [X31+5]
	158 Move [X31], V1
	159 Move [X31+8], V2
	160 Move [X31+2], V0
	161 Compare X0, 0
	162 JumpIfEqual {215}
	163 Move V0, [X31]
	164 Move V1, [X31+16]
	165 Move V2, [X31+2]
	166 Move X9, 0x741000
	167 Move X9, [X9+784]
	168 Move [X31+96], V0
	169 Move [X31+104], V1
	170 Move [X31+8], V2
	171 Move W11, [X0+28]
	172 Move X8, [X0+16]
	173 Move X10, [X9]
	174 Add W9, W11, 1
	175 Move [X0+28], W9
	176 Compare X8, 0
	177 JumpIfEqual {215}
	178 NotImplemented "Instruction LDRSW not yet implemented."
	179 Move W11, [X8+24]
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Add W10, W9, 1
	182 Move [X0+24], W10
	183 Move V2, [X31+112]
	184 Move V0, [X31+128]
	185 Move V1, [X31+6]
	186 Move W10, 48
	187 NotImplemented "Instruction MADD not yet implemented."
	188 Move [X8+48], V2
	189 Move [X8+56], V0
	190 Move [X8+2], V1
	191 Move X8, [X10+32]
	192 Move V0, [X31+96]
	193 Move V1, [X31+112]
	194 Move V2, [X31+8]
	195 Add X1, X31, 144
	196 Move X8, [X8+192]
	197 Move X2, [X8+112]
	198 Move [X31+144], V0
	199 Move [X31+152], V1
	200 Move [X31+11], V2
	201 Call List`1<IntPoint>.AddWithResize, X0, X1
	202 Move X20, [X31+272]
	203 Move X19, [X31+280]
	204 Move X22, [X31+256]
	205 Move X21, [X31+264]
	206 Move X24, [X31+240]
	207 Move X23, [X31+248]
	208 Move X29, [X31+224]
	209 Move X30, [X31+232]
	210 Move D9, [X31+208]
	211 Move D8, [X31+216]
	212 Move V10, [X31+192]
	213 Add X31, X31, 288
	214 Return 
	215 Call 0x1C17F20

Method: System.Void DoRound(System.Int32 j, System.Int32 k)

Disassembly:
	0x03A12838 BL 0x1C16F20
	0x03A1283C SUB X31, X31, 0x160
	0x03A12840 STR D12, [X31 + 0xF0]
	0x03A12844 STP D11, D10, [X31 + 0xF8]
	0x03A12848 STP D9, D8, [X31 + 0x108]
	0x03A1284C STR X29, [X31 + 0x118]
	0x03A12850 STP X30, X25, [X31 + 0x120]
	0x03A12854 STP X24, X23, [X31 + 0x130]
	0x03A12858 STP X22, X21, [X31 + 0x140]
	0x03A1285C STP X20, X19, [X31 + 0x150]
	0x03A12860 ADRP X22, 0x9CF000
	0x03A12864 LDRB W8, [X22 + 0xFB0]
	0x03A12868 MOV W20, W2
	0x03A1286C MOV W21, W1
	0x03A12870 MOV X19, X0
	0x03A12874 TBNZ X8, 0x0, 0x3A128B0
	0x03A12878 ADRP X0, 0x742000
	0x03A1287C LDR X0, [X0 + 0x310]
	0x03A12880 BL 0x1C16CF4
	0x03A12884 ADRP X0, 0x742000
	0x03A12888 LDR X0, [X0 + 0x478]
	0x03A1288C BL 0x1C16CF4
	0x03A12890 ADRP X0, 0x742000
	0x03A12894 LDR X0, [X0 + 0x210]
	0x03A12898 BL 0x1C16CF4
	0x03A1289C ADRP X0, 0x6E1000
	0x03A128A0 LDR X0, [X0 + 0x5A8]
	0x03A128A4 BL 0x1C16CF4
	0x03A128A8 MOVZ W8, 0x1
	0x03A128AC STRB W8, [X22 + 0xFB0]
	0x03A128B0 MOVI V0.2D, 0x0
	0x03A128B4 STP V0, V0, [X31 + 0x70]
	0x03A128B8 STR V0, [X31 + 0x6]
	0x03A128BC LDR X0, [X19 + 0x28]
	0x03A128C0 CBZ X0, 0x3A12E0C
	0x03A128C4 ADRP X23, 0x742000
	0x03A128C8 LDR X23, [X23 + 0x478]
	0x03A128CC LDR V8, [X19 + 0x38]
	0x03A128D0 MOV W1, W20
	0x03A128D4 LDR X2, [X23]
	0x03A128D8 BL 0x2FB46A4
	0x03A128DC LDR X0, [X19 + 0x28]
	0x03A128E0 CBZ X0, 0x3A12E0C
	0x03A128E4 LDR X2, [X23]
	0x03A128E8 MOV W1, W21
	0x03A128EC MOV V9.16B, V0.16B
	0x03A128F0 BL 0x2FB46A4
	0x03A128F4 LDR X0, [X19 + 0x28]
	0x03A128F8 CBZ X0, 0x3A12E0C
	0x03A128FC LDR X2, [X23]
	0x03A12900 MOV W1, W20
	0x03A12904 MOV V10.16B, V0.16B
	0x03A12908 BL 0x2FB46A4
	0x03A1290C LDR X0, [X19 + 0x28]
	0x03A12910 CBZ X0, 0x3A12E0C
	0x03A12914 LDR X2, [X23]
	0x03A12918 ADRP X22, 0x6E1000
	0x03A1291C LDR X22, [X22 + 0x5A8]
	0x03A12920 MOV W1, W21
	0x03A12924 MOV V11.16B, V1.16B
	0x03A12928 BL 0x2FB46A4
	0x03A1292C LDR X0, [X22]
	0x03A12930 MOV V12.16B, V1.16B
	0x03A12934 LDR W8, [X0 + 0xE0]
	0x03A12938 CBNZ W8, 0x3A12940
	0x03A1293C BL 0x1C16DFC
	0x03A12940 FMUL D0, D9, D10
	0x03A12944 FMUL D1, D11, D12
	0x03A12948 FADD D1, D0, D1
	0x03A1294C MOV V0.16B, V8.16B
	0x03A12950 BL 0x3EB1D80
	0x03A12954 FMOV D1, 0.25
	0x03A12958 FMUL D0, D0, D1
	0x03A1295C BL 0x3EB1DD0
	0x03A12960 LDR X0, [X19 + 0x18]
	0x03A12964 CBZ X0, 0x3A12E0C
	0x03A12968 ADRP X24, 0x742000
	0x03A1296C LDR X24, [X24 + 0x210]
	0x03A12970 ADD X8, X31, 0xC0
	0x03A12974 MOV W1, W21
	0x03A12978 MOV V8.16B, V0.16B
	0x03A1297C LDR X2, [X24]
	0x03A12980 BL 0x2FE4360
	0x03A12984 LDR X0, [X19 + 0x28]
	0x03A12988 CBZ X0, 0x3A12E0C
	0x03A1298C LDR X2, [X23]
	0x03A12990 LDR X22, [X31 + 0xC8]
	0x03A12994 LDR V10, [X19 + 0x30]
	0x03A12998 MOV W1, W20
	0x03A1299C BL 0x2FB46A4
	0x03A129A0 LDR X0, [X19 + 0x28]
	0x03A129A4 CBZ X0, 0x3A12E0C
	0x03A129A8 LDR X2, [X23]
	0x03A129AC MOV W1, W20
	0x03A129B0 MOV V9.16B, V0.16B
	0x03A129B4 BL 0x2FB46A4
	0x03A129B8 FMUL D1, D8, D1
	0x03A129BC FSUB D1, D9, D1
	0x03A129C0 SCVTF D0, X22
	0x03A129C4 FMUL D1, D10, D1
	0x03A129C8 FMOV D2, 0.5
	0x03A129CC FMOV D3, -0.5
	0x03A129D0 FADD D0, D1, D0
	0x03A129D4 MOVZ X8, 0x7FF00000
	0x03A129D8 LDR X0, [X19 + 0x18]
	0x03A129DC FADD D2, D0, D2
	0x03A129E0 FADD D3, D0, D3
	0x03A129E4 FCMP D0, 0x0
	0x03A129E8 FMOV D1, X8
	0x03A129EC FCSEL D0, D3, D2, MI
	0x03A129F0 FCVTZS X8, D0
	0x03A129F4 FCMP D0, D1
	0x03A129F8 MOVZ X9, 0x80000000
	0x03A129FC CSEL X22, X9, X8, EQ
	0x03A12A00 CBZ X0, 0x3A12E0C
	0x03A12A04 LDR X2, [X24]
	0x03A12A08 ADD X8, X31, 0xC0
	0x03A12A0C MOV W1, W21
	0x03A12A10 BL 0x2FE4360
	0x03A12A14 LDR X0, [X19 + 0x28]
	0x03A12A18 CBZ X0, 0x3A12E0C
	0x03A12A1C LDR X2, [X23]
	0x03A12A20 LDR X25, [X31 + 0xD0]
	0x03A12A24 LDR V10, [X19 + 0x30]
	0x03A12A28 MOV W1, W20
	0x03A12A2C BL 0x2FB46A4
	0x03A12A30 LDR X0, [X19 + 0x28]
	0x03A12A34 CBZ X0, 0x3A12E0C
	0x03A12A38 LDR X2, [X23]
	0x03A12A3C MOV W1, W20
	0x03A12A40 MOV V9.16B, V1.16B
	0x03A12A44 BL 0x2FB46A4
	0x03A12A48 FMUL D0, D8, D0
	0x03A12A4C FADD D0, D9, D0
	0x03A12A50 SCVTF D1, X25
	0x03A12A54 FMUL D0, D10, D0
	0x03A12A58 FMOV D2, 0.5
	0x03A12A5C FMOV D3, -0.5
	0x03A12A60 FADD D0, D0, D1
	0x03A12A64 MOVZ X8, 0x7FF00000
	0x03A12A68 FADD D2, D0, D2
	0x03A12A6C FADD D3, D0, D3
	0x03A12A70 FCMP D0, 0x0
	0x03A12A74 FMOV D1, X8
	0x03A12A78 FCSEL D0, D3, D2, MI
	0x03A12A7C FCVTZS X8, D0
	0x03A12A80 FCMP D0, D1
	0x03A12A84 MOVZ X9, 0x80000000
	0x03A12A88 CSEL X2, X9, X8, EQ
	0x03A12A8C ADD X0, X31, 0x60
	0x03A12A90 MOV X1, X22
	0x03A12A94 MOV X3, X31
	0x03A12A98 BL 0x3A04370
	0x03A12A9C LDR X0, [X19 + 0x28]
	0x03A12AA0 CBZ X0, 0x3A12E0C
	0x03A12AA4 LDR X2, [X23]
	0x03A12AA8 MOV W1, W20
	0x03A12AAC BL 0x2FB46A4
	0x03A12AB0 LDR X0, [X19 + 0x28]
	0x03A12AB4 CBZ X0, 0x3A12E0C
	0x03A12AB8 LDR X2, [X23]
	0x03A12ABC MOV W1, W20
	0x03A12AC0 MOV V9.16B, V0.16B
	0x03A12AC4 BL 0x2FB46A4
	0x03A12AC8 FMUL D0, D8, D1
	0x03A12ACC FSUB D0, D9, D0
	0x03A12AD0 STR D0, [X31 + 0x80]
	0x03A12AD4 LDR X0, [X19 + 0x28]
	0x03A12AD8 CBZ X0, 0x3A12E0C
	0x03A12ADC LDR X2, [X23]
	0x03A12AE0 MOV W1, W20
	0x03A12AE4 BL 0x2FB46A4
	0x03A12AE8 LDR X0, [X19 + 0x28]
	0x03A12AEC CBZ X0, 0x3A12E0C
	0x03A12AF0 LDR X2, [X23]
	0x03A12AF4 MOV W1, W20
	0x03A12AF8 MOV V9.16B, V1.16B
	0x03A12AFC BL 0x2FB46A4
	0x03A12B00 FMUL D0, D8, D0
	0x03A12B04 FADD D0, D9, D0
	0x03A12B08 STR D0, [X31 + 0x88]
	0x03A12B0C LDP V1, V2, [X31 + 0x60]
	0x03A12B10 LDR X0, [X19 + 0x20]
	0x03A12B14 LDR V0, [X31 + 0x8]
	0x03A12B18 STP V1, V2, [X31 + 0x30]
	0x03A12B1C STR V0, [X31 + 0x5]
	0x03A12B20 CBZ X0, 0x3A12E0C
	0x03A12B24 LDP V0, V1, [X31 + 0x30]
	0x03A12B28 LDR V2, [X31 + 0x5]
	0x03A12B2C ADRP X25, 0x742000
	0x03A12B30 LDR X25, [X25 + 0x310]
	0x03A12B34 STP V0, V1, [X31 + 0x90]
	0x03A12B38 STR V2, [X31 + 0xB]
	0x03A12B3C LDR W9, [X0 + 0x1C]
	0x03A12B40 LDR X8, [X0 + 0x10]
	0x03A12B44 LDR X10, [X25]
	0x03A12B48 ADD W9, W9, 0x1
	0x03A12B4C STR W9, [X0 + 0x1C]
	0x03A12B50 CBZ X8, 0x3A12E0C
	0x03A12B54 LDRSW X9, [X0 + 0x18]
	0x03A12B58 LDR W11, [X8 + 0x18]
	0x03A12B5C CMP W9, W11
	0x03A12B60 B.CS 0x3A12B88
	0x03A12B64 ADD W10, W9, 0x1
	0x03A12B68 STR W10, [X0 + 0x18]
	0x03A12B6C LDP V2, V0, [X31 + 0xA0]
	0x03A12B70 LDR V1, [X31 + 0x9]
	0x03A12B74 MOVZ W10, 0x30
	0x03A12B78 MADD X8, X9, X10, X8
	0x03A12B7C STP V2, V0, [X8 + 0x30]
	0x03A12B80 STR V1, [X8 + 0x2]
	0x03A12B84 B 0x3A12BAC
	0x03A12B88 LDR X8, [X10 + 0x20]
	0x03A12B8C LDP V0, V1, [X31 + 0x90]
	0x03A12B90 LDR V2, [X31 + 0xB]
	0x03A12B94 ADD X1, X31, 0xC0
	0x03A12B98 LDR X8, [X8 + 0xC0]
	0x03A12B9C LDR X2, [X8 + 0x70]
	0x03A12BA0 STP V0, V1, [X31 + 0xC0]
	0x03A12BA4 STR V2, [X31 + 0xE]
	0x03A12BA8 BL 0x2FE46FC
	0x03A12BAC LDR X0, [X19 + 0x18]
	0x03A12BB0 CBZ X0, 0x3A12E0C
	0x03A12BB4 LDR X2, [X24]
	0x03A12BB8 ADD X8, X31, 0xC0
	0x03A12BBC MOV W1, W21
	0x03A12BC0 BL 0x2FE4360
	0x03A12BC4 LDR X0, [X19 + 0x28]
	0x03A12BC8 CBZ X0, 0x3A12E0C
	0x03A12BCC LDR X2, [X23]
	0x03A12BD0 LDR X22, [X31 + 0xC8]
	0x03A12BD4 LDR V10, [X19 + 0x30]
	0x03A12BD8 MOV W1, W21
	0x03A12BDC BL 0x2FB46A4
	0x03A12BE0 LDR X0, [X19 + 0x28]
	0x03A12BE4 CBZ X0, 0x3A12E0C
	0x03A12BE8 LDR X2, [X23]
	0x03A12BEC MOV W1, W21
	0x03A12BF0 MOV V9.16B, V0.16B
	0x03A12BF4 BL 0x2FB46A4
	0x03A12BF8 FMUL D1, D8, D1
	0x03A12BFC FADD D1, D9, D1
	0x03A12C00 SCVTF D0, X22
	0x03A12C04 FMUL D1, D10, D1
	0x03A12C08 FMOV D2, 0.5
	0x03A12C0C FMOV D3, -0.5
	0x03A12C10 FADD D0, D1, D0
	0x03A12C14 MOVZ X8, 0x7FF00000
	0x03A12C18 LDR X0, [X19 + 0x18]
	0x03A12C1C FADD D2, D0, D2
	0x03A12C20 FADD D3, D0, D3
	0x03A12C24 FCMP D0, 0x0
	0x03A12C28 FMOV D1, X8
	0x03A12C2C FCSEL D0, D3, D2, MI
	0x03A12C30 FCVTZS X8, D0
	0x03A12C34 FCMP D0, D1
	0x03A12C38 MOVZ X9, 0x80000000
	0x03A12C3C CSEL X22, X9, X8, EQ
	0x03A12C40 CBZ X0, 0x3A12E0C
	0x03A12C44 LDR X2, [X24]
	0x03A12C48 ADD X8, X31, 0xC0
	0x03A12C4C MOV W1, W21
	0x03A12C50 BL 0x2FE4360
	0x03A12C54 LDR X0, [X19 + 0x28]
	0x03A12C58 CBZ X0, 0x3A12E0C
	0x03A12C5C LDR X2, [X23]
	0x03A12C60 LDR X24, [X31 + 0xD0]
	0x03A12C64 LDR V10, [X19 + 0x30]
	0x03A12C68 MOV W1, W21
	0x03A12C6C BL 0x2FB46A4
	0x03A12C70 LDR X0, [X19 + 0x28]
	0x03A12C74 CBZ X0, 0x3A12E0C
	0x03A12C78 LDR X2, [X23]
	0x03A12C7C MOV W1, W21
	0x03A12C80 MOV V9.16B, V1.16B
	0x03A12C84 BL 0x2FB46A4
	0x03A12C88 FMUL D0, D8, D0
	0x03A12C8C FSUB D0, D9, D0
	0x03A12C90 SCVTF D1, X24
	0x03A12C94 FMUL D0, D10, D0
	0x03A12C98 FMOV D2, 0.5
	0x03A12C9C FMOV D3, -0.5
	0x03A12CA0 FADD D0, D0, D1
	0x03A12CA4 MOVZ X8, 0x7FF00000
	0x03A12CA8 FADD D2, D0, D2
	0x03A12CAC FADD D3, D0, D3
	0x03A12CB0 FCMP D0, 0x0
	0x03A12CB4 FMOV D1, X8
	0x03A12CB8 FCSEL D0, D3, D2, MI
	0x03A12CBC FCVTZS X8, D0
	0x03A12CC0 FCMP D0, D1
	0x03A12CC4 MOVZ X9, 0x80000000
	0x03A12CC8 CSEL X2, X9, X8, EQ
	0x03A12CCC ADD X0, X31, 0x60
	0x03A12CD0 MOV X1, X22
	0x03A12CD4 MOV X3, X31
	0x03A12CD8 BL 0x3A04370
	0x03A12CDC LDR X0, [X19 + 0x28]
	0x03A12CE0 CBZ X0, 0x3A12E0C
	0x03A12CE4 LDR X2, [X23]
	0x03A12CE8 MOV W1, W20
	0x03A12CEC BL 0x2FB46A4
	0x03A12CF0 LDR X0, [X19 + 0x28]
	0x03A12CF4 CBZ X0, 0x3A12E0C
	0x03A12CF8 LDR X2, [X23]
	0x03A12CFC MOV W1, W20
	0x03A12D00 MOV V9.16B, V0.16B
	0x03A12D04 BL 0x2FB46A4
	0x03A12D08 FMUL D0, D8, D1
	0x03A12D0C FADD D0, D9, D0
	0x03A12D10 STR D0, [X31 + 0x80]
	0x03A12D14 LDR X0, [X19 + 0x28]
	0x03A12D18 CBZ X0, 0x3A12E0C
	0x03A12D1C LDR X2, [X23]
	0x03A12D20 MOV W1, W20
	0x03A12D24 BL 0x2FB46A4
	0x03A12D28 LDR X0, [X19 + 0x28]
	0x03A12D2C CBZ X0, 0x3A12E0C
	0x03A12D30 LDR X2, [X23]
	0x03A12D34 MOV W1, W20
	0x03A12D38 MOV V9.16B, V1.16B
	0x03A12D3C BL 0x2FB46A4
	0x03A12D40 FMUL D0, D8, D0
	0x03A12D44 FSUB D0, D9, D0
	0x03A12D48 STR D0, [X31 + 0x88]
	0x03A12D4C LDP V1, V2, [X31 + 0x60]
	0x03A12D50 LDR X0, [X19 + 0x20]
	0x03A12D54 LDR V0, [X31 + 0x8]
	0x03A12D58 STP V1, V2, [X31]
	0x03A12D5C STR V0, [X31 + 0x2]
	0x03A12D60 CBZ X0, 0x3A12E0C
	0x03A12D64 LDP V0, V1, [X31]
	0x03A12D68 LDR V2, [X31 + 0x2]
	0x03A12D6C LDR X10, [X25]
	0x03A12D70 STP V0, V1, [X31 + 0x90]

ISIL:
	001 Subtract X31, X31, 400
	002 Move [X31+256], D12
	003 Move [X31+272], D11
	004 Move [X31+280], D10
	005 Move [X31+288], D9
	006 Move [X31+296], D8
	007 Move [X31+304], X29
	008 Move [X31+312], X30
	009 Move [X31+320], X28
	010 Move [X31+328], X27
	011 Move [X31+336], X26
	012 Move [X31+344], X25
	013 Move [X31+352], X24
	014 Move [X31+360], X23
	015 Move [X31+368], X22
	016 Move [X31+376], X21
	017 Move [X31+384], X20
	018 Move [X31+392], X19
	019 Move X22, 0x9D0000
	020 Move W8, [X22+4018]
	021 Move W21, W2
	022 Move W20, W1
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {42}
	028 Move X0, 0x743000
	029 Move X0, [X0+784]
	030 Call 0x1C17CF4
	031 Move X0, 0x743000
	032 Move X0, [X0+1144]
	033 Call 0x1C17CF4
	034 Move X0, 0x743000
	035 Move X0, [X0+528]
	036 Call 0x1C17CF4
	037 Move X0, 0x6E2000
	038 Move X0, [X0+1448]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X22+4018], W8
	042 NotImplemented "Instruction MOVI not yet implemented."
	043 Move [X31+128], V0
	044 Move [X31+136], V0
	045 Move [X31+96], V0
	046 Move [X31+104], V0
	047 Move [X31+64], V0
	048 Move [X31+72], V0
	049 Move X0, [X19+40]
	050 Compare X0, 0
	051 JumpIfEqual {388}
	052 Move X23, 0x743000
	053 Move X23, [X23+1144]
	054 Move V8, [X19+56]
	055 Move W1, W21
	056 Move X2, [X23]
	057 Call List`1<DoublePoint>.get_Item, X0, X1
	058 Move X0, [X19+40]
	059 Compare X0, 0
	060 JumpIfEqual {388}
	061 Move X2, [X23]
	062 Move W1, W20
	063 Move V9, V0
	064 Call List`1<DoublePoint>.get_Item, X0, X1
	065 Move X0, [X19+40]
	066 Compare X0, 0
	067 JumpIfEqual {388}
	068 Move X2, [X23]
	069 Move W1, W21
	070 Move V10, V0
	071 Call List`1<DoublePoint>.get_Item, X0, X1
	072 Move X0, [X19+40]
	073 Compare X0, 0
	074 JumpIfEqual {388}
	075 Move X2, [X23]
	076 Move X22, 0x6E2000
	077 Move X22, [X22+1448]
	078 Move W1, W20
	079 Move V11, V1
	080 Call List`1<DoublePoint>.get_Item, X0, X1
	081 Move X0, [X22]
	082 Move V12, V1
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Multiply D0, D9, D10
	088 Multiply D1, D11, D12
	089 Add D1, D0, D1
	090 Move V0, V8
	091 Call 0x3EB2D80
	092 Move V1, [X19+80]
	093 NotImplemented "Instruction FABS not yet implemented."
	094 Move D2, 0.5
	095 Move D3, -0.5
	096 Multiply D0, D1, D0
	097 Move X8, 0x7FF00000
	098 Add D1, D0, D2
	099 Add D2, D0, D3
	100 NotImplemented "Instruction FCMP not yet implemented."
	101 Move D4, X8
	102 NotImplemented "Instruction FCSEL not yet implemented."
	103 NotImplemented "Instruction FCVTZS not yet implemented."
	104 NotImplemented "Instruction FCMP not yet implemented."
	105 NotImplemented "Instruction CSEL not yet implemented."
	106 Move W1, 1
	107 Move X2, X31
	108 Call Math.Max, X0, X1
	109 Move X8, [X19+40]
	110 Compare X8, 0
	111 JumpIfEqual {388}
	112 Move X2, [X23]
	113 Move W22, W0
	114 Move X0, X8
	115 Move W1, W21
	116 Call List`1<DoublePoint>.get_Item, X0, X1
	117 Move X0, [X19+40]
	118 Compare X0, 0
	119 JumpIfEqual {388}
	120 Move X2, [X23]
	121 Move W1, W21
	122 Move V8, V0
	123 Call List`1<DoublePoint>.get_Item, X0, X1
	124 Move X0, [X19+24]
	125 Compare X0, 0
	126 JumpIfEqual {388}
	127 Move X26, 0x743000
	128 Move X24, 0x743000
	129 Move X26, [X26+528]
	130 Move X24, [X24+784]
	131 NotImplemented "Instruction BIC not yet implemented."
	132 Move V9, V1
	133 Move X25, W20
	134 Move D10, 0.5
	135 Move D11, -0.5
	136 Move X22, 0x7FF00000
	137 Move X27, 0x80000000
	138 Move W28, 1
	139 Add W29, W8, 1
	140 Move W23, 48
	141 Subtract W29, W29, 1
	142 Move X2, [X26]
	143 Add X8, X31, 208
	144 Move W1, W20
	145 Call List`1<IntPoint>.get_Item, X0, X1
	146 Move X0, [X19+24]
	147 Compare X0, 0
	148 JumpIfEqual {388}
	149 Move V0, [X31+216]
	150 Move V1, [X19+48]
	151 Move X2, [X26]
	152 Move D12, X22
	153 NotImplemented "Instruction SCVTF not yet implemented."
	154 Multiply D1, D8, D1
	155 Add D0, D1, D0
	156 Add D1, D0, D10
	157 Add D2, D0, D11
	158 NotImplemented "Instruction FCMP not yet implemented."
	159 NotImplemented "Instruction FCSEL not yet implemented."
	160 NotImplemented "Instruction FCVTZS not yet implemented."
	161 NotImplemented "Instruction FCMP not yet implemented."
	162 NotImplemented "Instruction CSEL not yet implemented."
	163 Add X8, X31, 208
	164 Move W1, W20
	165 Call List`1<IntPoint>.get_Item, X0, X1
	166 Move V0, [X31+224]
	167 Move V1, [X19+48]
	168 Add X0, X31, 64
	169 Move X1, X21
	170 NotImplemented "Instruction SCVTF not yet implemented."
	171 Multiply D1, D9, D1
	172 Add D0, D1, D0
	173 Add D1, D0, D10
	174 Add D2, D0, D11
	175 NotImplemented "Instruction FCMP not yet implemented."
	176 NotImplemented "Instruction FCSEL not yet implemented."
	177 NotImplemented "Instruction FCVTZS not yet implemented."
	178 NotImplemented "Instruction FCMP not yet implemented."
	179 NotImplemented "Instruction CSEL not yet implemented."
	180 Move X3, X31
	181 Call IntPoint..ctor, X0, X1, X2
	182 Move [X31+96], D8
	183 Move [X31+104], D9
	184 Move [X31+64], X25
	185 Move [X31+88], X28
	186 Move X0, [X19+32]
	187 Move V0, [X31+64]
	188 Move V1, [X31+80]
	189 Move V2, [X31+6]
	190 Move [X31+16], V0
	191 Move [X31+24], V1
	192 Move [X31+3], V2
	193 Compare X0, 0
	194 JumpIfEqual {388}
	195 Move V0, [X31+16]
	196 Move V1, [X31+32]
	197 Move V2, [X31+3]
	198 Move X10, [X24]
	199 Move [X31+160], V0
	200 Move [X31+168], V1
	201 Move [X31+12], V2
	202 Move W9, [X0+28]
	203 Move X8, [X0+16]
	204 Add W9, W9, 1
	205 Move [X0+28], W9
	206 Compare X8, 0
	207 JumpIfEqual {388}
	208 NotImplemented "Instruction LDRSW not yet implemented."
	209 Move W11, [X8+24]
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Add W10, W9, 1
	212 Move [X0+24], W10
	213 Move V1, [X31+176]
	214 Move V0, [X31+192]
	215 Move V2, [X31+10]
	216 NotImplemented "Instruction NOP not yet implemented."
	217 NotImplemented "Instruction MADD not yet implemented."
	218 Move [X8+48], V1
	219 Move [X8+56], V0
	220 Move [X8+2], V2
	221 Move X8, [X10+32]
	222 Move V0, [X31+160]
	223 Move V1, [X31+176]
	224 Move V2, [X31+12]
	225 Add X1, X31, 208
	226 Move X8, [X8+192]
	227 Move X2, [X8+112]
	228 Move [X31+208], V0
	229 Move [X31+216], V1
	230 Move [X31+15], V2
	231 Call List`1<IntPoint>.AddWithResize, X0, X1
	232 Move D1, [X19+64]
	233 Move D0, [X19+72]
	234 Move X0, [X19+24]
	235 Multiply D2, D8, D0
	236 Multiply D3, D9, D1
	237 Multiply D1, D8, D1
	238 Multiply D0, D9, D0
	239 Subtract D8, D2, D3
	240 Add D9, D0, D1
	241 Compare X0, 0
	242 JumpIfNotEqual {141}
	243 Move X2, [X26]
	244 Add X8, X31, 208
	245 Move W1, W20
	246 Call List`1<IntPoint>.get_Item, X0, X1
	247 Move X0, [X19+40]
	248 Compare X0, 0
	249 JumpIfEqual {388}
	250 Move X23, 0x743000
	251 Move X21, [X31+216]
	252 Move X23, [X23+1144]
	253 Move W1, W20
	254 Move X2, [X23]
	255 Call List`1<DoublePoint>.get_Item, X0, X1
	256 Move V1, [X19+48]
	257 NotImplemented "Instruction SCVTF not yet implemented."
	258 Move X8, 0x7FF00000
	259 Move X0, [X19+24]
	260 Multiply D0, D0, D1
	261 Move D1, 0.5
	262 Add D0, D0, D2
	263 Move D2, -0.5
	264 Add D1, D0, D1
	265 Add D2, D0, D2
	266 NotImplemented "Instruction FCMP not yet implemented."
	267 Move D0, X8
	268 NotImplemented "Instruction FCSEL not yet implemented."
	269 NotImplemented "Instruction FCVTZS not yet implemented."
	270 NotImplemented "Instruction FCMP not yet implemented."
	271 Move X9, 0x80000000
	272 NotImplemented "Instruction CSEL not yet implemented."
	273 Compare X0, 0
	274 JumpIfEqual {388}
	275 Move X2, [X26]
	276 Add X8, X31, 208
	277 Move W1, W20
	278 Call List`1<IntPoint>.get_Item, X0, X1
	279 Move X0, [X19+40]
	280 Compare X0, 0
	281 JumpIfEqual {388}
	282 Move X2, [X23]
	283 Move X22, [X31+224]
	284 Move W1, W20
	285 Call List`1<DoublePoint>.get_Item, X0, X1
	286 Move V0, [X19+48]
	287 NotImplemented "Instruction SCVTF not yet implemented."
	288 Move X8, 0x7FF00000
	289 Move X9, 0x80000000
	290 Multiply D0, D1, D0
	291 Move D1, 0.5
	292 Add D0, D0, D2
	293 Move D2, -0.5
	294 Add D1, D0, D1
	295 Add D2, D0, D2
	296 NotImplemented "Instruction FCMP not yet implemented."
	297 Move D0, X8
	298 NotImplemented "Instruction FCSEL not yet implemented."
	299 NotImplemented "Instruction FCVTZS not yet implemented."
	300 NotImplemented "Instruction FCMP not yet implemented."
	301 NotImplemented "Instruction CSEL not yet implemented."
	302 Add X0, X31, 112
	303 Move X1, X21
	304 Move X3, X31
	305 Call IntPoint..ctor, X0, X1, X2
	306 Move X0, [X19+40]
	307 Compare X0, 0
	308 JumpIfEqual {388}
	309 Move X2, [X23]
	310 Move W1, W20
	311 Call List`1<DoublePoint>.get_Item, X0, X1
	312 Move [X31+144], D0
	313 Move X0, [X19+40]
	314 Compare X0, 0
	315 JumpIfEqual {388}
	316 Move X2, [X23]
	317 Move W1, W20
	318 Call List`1<DoublePoint>.get_Item, X0, X1
	319 Move W8, 1
	320 Move [X31+152], D1
	321 Move [X31+112], X25
	322 Move [X31+136], X8
	323 Move V2, [X31+128]
	324 Move V0, [X31+144]
	325 Move V1, [X31+7]
	326 Move X0, [X19+32]
	327 Move [X31+3], V0
	328 Move [X31+16], V1
	329 Move [X31+24], V2
	330 Compare X0, 0
	331 JumpIfEqual {388}
	332 Move V0, [X31+16]
	333 Move V1, [X31+32]
	334 Move V2, [X31+3]
	335 Move X10, [X24]
	336 Move [X31+160], V0
	337 Move [X31+168], V1
	338 Move [X31+12], V2
	339 Move W9, [X0+28]
	340 Move X8, [X0+16]
	341 Add W9, W9, 1
	342 Move [X0+28], W9
	343 Compare X8, 0
	344 JumpIfEqual {388}
	345 NotImplemented "Instruction LDRSW not yet implemented."
	346 Move W11, [X8+24]
	347 NotImplemented "Instruction CMP not yet implemented."
	348 Add W10, W9, 1
	349 Move [X0+24], W10
	350 Move V2, [X31+176]
	351 Move V0, [X31+192]
	352 Move V1, [X31+10]
	353 Move W10, 48
	354 NotImplemented "Instruction MADD not yet implemented."
	355 Move [X8+48], V2
	356 Move [X8+56], V0
	357 Move [X8+2], V1
	358 Move X8, [X10+32]
	359 Move V0, [X31+160]
	360 Move V1, [X31+176]
	361 Move V2, [X31+12]
	362 Add X1, X31, 208
	363 Move X8, [X8+192]
	364 Move X2, [X8+112]
	365 Move [X31+208], V0
	366 Move [X31+216], V1
	367 Move [X31+15], V2
	368 Call List`1<IntPoint>.AddWithResize, X0, X1
	369 Move X20, [X31+384]
	370 Move X19, [X31+392]
	371 Move X22, [X31+368]
	372 Move X21, [X31+376]
	373 Move X24, [X31+352]
	374 Move X23, [X31+360]
	375 Move X26, [X31+336]
	376 Move X25, [X31+344]
	377 Move X28, [X31+320]
	378 Move X27, [X31+328]
	379 Move X29, [X31+304]
	380 Move X30, [X31+312]
	381 Move D9, [X31+288]
	382 Move D8, [X31+296]
	383 Move D11, [X31+272]
	384 Move D10, [X31+280]
	385 Move V12, [X31+256]
	386 Add X31, X31, 400
	387 Return 
	388 Call 0x1C17F20

