Type: UnityEngine.Rendering.Universal.DecalChunk

Method: System.Int32 get_count()

Disassembly:
	0x03A3BF7C ADRP X0, 0x71A000
	0x03A3BF80 LDR X0, [X0 + 0x7F8]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_count(System.Int32 value)

Disassembly:
	0x03A3BF84 BL 0x1C16CF4
	0x03A3BF88 ADRP X0, 0x71A000

ISIL:
	001 Move [X0+16], W1
	002 Return 

Method: System.Int32 get_capacity()

Disassembly:
	0x03A3BF8C LDR X0, [X0 + 0x800]
	0x03A3BF90 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Void set_capacity(System.Int32 value)

Disassembly:
	0x03A3BF94 ADRP X0, 0x71A000
	0x03A3BF98 LDR X0, [X0 + 0x808]

ISIL:
	001 Move [X0+20], W1
	002 Return 

Method: Unity.Jobs.JobHandle get_currentJobHandle()

Disassembly:
	0x03A3BF9C BL 0x1C16CF4
	0x03A3BFA0 ADRP X0, 0x71A000
	0x03A3BFA4 LDR X0, [X0 + 0x810]

ISIL:
	001 Move X8, [X0+24]
	002 Move X1, [X0+32]
	003 Move X0, X8
	004 Return X0

Method: System.Void set_currentJobHandle(Unity.Jobs.JobHandle value)

Disassembly:
	0x03A3BFA8 BL 0x1C16CF4
	0x03A3BFAC ADRP X0, 0x71A000

ISIL:
	001 Move [X0+24], X1
	002 Move [X0+32], X2
	003 Return 

Method: System.Void Push()

Disassembly:
	0x03A3BFB0 LDR X0, [X0 + 0x818]
	0x03A3BFB4 BL 0x1C16CF4
	0x03A3BFB8 ADRP X0, 0x71A000
	0x03A3BFBC LDR X0, [X0 + 0x820]

ISIL:
	001 Move W8, [X0+16]
	002 Add W8, W8, 1
	003 Move [X0+16], W8
	004 Return 

Method: System.Void RemoveAtSwapBack(System.Int32 index)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void SetCapacity(System.Int32 capacity)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void Dispose()

Disassembly:
	0x03A3BFC0 BL 0x1C16CF4

ISIL:
	001 Return 

Method: System.Void ResizeNativeArray(ref UnityEngine.Jobs.TransformAccessArray array, UnityEngine.Rendering.Universal.DecalProjector[] decalProjectors, System.Int32 capacity)

Disassembly:
	0x03A3BFC4 ADRP X0, 0x71A000
	0x03A3BFC8 LDR X0, [X0 + 0x828]
	0x03A3BFCC BL 0x1C16CF4
	0x03A3BFD0 MOVZ W8, 0x1
	0x03A3BFD4 STRB W8, [X19 + 0x13D]
	0x03A3BFD8 LDR X0, [X23 + 0x10]
	0x03A3BFDC CBZ X0, 0x3A3C194
	0x03A3BFE0 BL 0x3A3C3E4
	0x03A3BFE4 LDR X8, [X23]
	0x03A3BFE8 STR X0, [X31 + 0x20]
	0x03A3BFEC MOV X0, X23
	0x03A3BFF0 MOV X1, X25
	0x03A3BFF4 LDP X9, X2, [X8 + 0x178]
	0x03A3BFF8 BLR X9
	0x03A3BFFC STR X0, [X31 + 0x18]
	0x03A3C000 CBZ X21, 0x3A3C194
	0x03A3C004 LDR X0, [X21 + 0x28]
	0x03A3C008 CBZ X0, 0x3A3C194
	0x03A3C00C ADRP X8, 0x719000
	0x03A3C010 LDR X8, [X8 + 0x818]
	0x03A3C014 FMOV S0, 1
	0x03A3C018 FMOV S1, 1
	0x03A3C01C FMOV S2, 1
	0x03A3C020 LDR X1, [X8]
	0x03A3C024 FMOV S3, W31
	0x03A3C028 MOV X2, X31
	0x03A3C02C BL 0x3C126A4
	0x03A3C030 CBZ X29, 0x3A3C194
	0x03A3C034 LDR X8, [X29 + 0x68]
	0x03A3C038 LDR W8, [X8]
	0x03A3C03C CMP W8, 0x1
	0x03A3C040 B.LT 0x3A3C174
	0x03A3C044 ADD X10, X29, 0x28
	0x03A3C048 ADD X9, X29, 0x38
	0x03A3C04C STP X9, X10, [X31 + 0x8]
	0x03A3C050 ADRP X26, 0x719000
	0x03A3C054 ADRP X27, 0x719000
	0x03A3C058 LDR X26, [X26 + 0x808]
	0x03A3C05C LDR X27, [X27 + 0x7F8]
	0x03A3C060 MOV X20, X31
	0x03A3C064 ADD X28, X29, 0x48
	0x03A3C068 UBFM X24, X8, 0x3D, 0x3C
	0x03A3C06C LDR X8, [X29 + 0x58]
	0x03A3C070 LDR X1, [X26]
	0x03A3C074 LDR X0, [X31 + 0x10]
	0x03A3C078 MOV X25, X29
	0x03A3C07C ADD X8, X8, X20
	0x03A3C080 LDP W19, W29, [X8]
	0x03A3C084 BL 0x21337F0
	0x03A3C088 LDR X3, [X23 + 0x18]
	0x03A3C08C LDR X6, [X27]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, X2
	007 Move X19, X1
	008 Add X0, X31, 8
	009 Move TEMP, 0
	010 Not TEMP
	011 Move W2, TEMP
	012 Move W1, W3
	013 Move X3, X31
	014 Move [X31+8], X31
	015 Call TransformAccessArray..ctor, X0, X1, X2
	016 Move X0, X19
	017 Move X1, X31
	018 Call TransformAccessArray.get_isCreated, X0
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {50}
	023 Move X0, X19
	024 Move X1, X31
	025 Call TransformAccessArray.get_length, X0
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Compare X20, 0
	028 JumpIfEqual {59}
	029 Move X21, X31
	030 Add X22, X20, 32
	031 Move W8, [X20+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, [X22]
	034 Compare X0, 0
	035 JumpIfEqual {59}
	036 Move X1, X31
	037 Call Component.get_transform, X0
	038 Move X1, X0
	039 Add X0, X31, 8
	040 Move X2, X31
	041 Call TransformAccessArray.Add, X0, X1
	042 Move X0, X19
	043 Move X1, X31
	044 Call TransformAccessArray.get_length, X0
	045 Add X21, X21, 1
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X0, X19
	048 Move X1, X31
	049 Call TransformAccessArray.Dispose, X0
	050 Move X8, [X31+8]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move [X19], X8
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X30, [X31+48]
	057 Return 
	058 Call 0x1C17F28
	059 Call 0x1C17F20

Method: System.Void RemoveAtSwapBack(ref Unity.Collections.NativeArray`1<T> array, System.Int32 index, System.Int32 count)

Disassembly:
	0x021A9EB4 LDR X8, [X25]
	0x021A9EB8 LDR X10, [X10 + 0xE00]
	0x021A9EBC LDRH W9, [X8 + 0x12E]
	0x021A9EC0 LDR X1, [X10]
	0x021A9EC4 CBZ X9, 0x21A9EE8

ISIL:
	001 Move X8, [X1]
	002 Subtract W9, W3, 1
	003 Move W9, [X8]
	004 Move [X8], W9
	005 Return 

Method: System.Void RemoveAtSwapBack(ref T[] array, System.Int32 index, System.Int32 count)

Disassembly:
	0x021A9EDC SUBS X9, X9, 0x1
	0x021A9EE0 ADD X10, X10, 0x10
	0x021A9EE4 B.NE 0x21A9ED0
	0x021A9EE8 MOV X0, X25
	0x021A9EEC MOV W2, W31
	0x021A9EF0 BL 0x1C5C788
	0x021A9EF4 B 0x21A9F04
	0x021A9EF8 LDRSW X9, [X10]
	0x021A9EFC ADD X8, X8, X9, 0x4, LSL
	0x021A9F00 ADD X0, X8, 0x138
	0x021A9F04 LDP X8, X1, [X0]
	0x021A9F08 MOV X0, X25
	0x021A9F0C BLR X8
	0x021A9F10 CBNZ X26, 0x21AA1D8
	0x021A9F14 CBZ W19, 0x21AA198
	0x021A9F18 ADRP X8, 0x1F72000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X1]
	003 Compare X8, 0
	004 JumpIfEqual {15}
	005 Move W10, [X8+24]
	006 Subtract W9, W3, 1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Add X8, X8, 32
	010 Move V0, [X8]
	011 Move [X8], V0
	012 Move X30, [X31+16]
	013 Return 
	014 Call 0x1C17F28
	015 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03A3C090 SUB W29, W29, W19
	0x03A3C094 MOV W2, W19

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

