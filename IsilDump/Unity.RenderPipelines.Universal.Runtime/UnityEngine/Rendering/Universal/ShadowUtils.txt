Type: UnityEngine.Rendering.Universal.ShadowUtils

Method: System.Void .cctor()

Disassembly:
	0x03A77244 LDR W8, [X0 + 0xE0]
	0x03A77248 CBNZ W8, 0x3A77250
	0x03A7724C BL 0x1C16DFC
	0x03A77250 MOV X0, X19
	0x03A77254 MOV V0.16B, V11.16B
	0x03A77258 MOV V1.16B, V10.16B
	0x03A7725C MOV V2.16B, V9.16B
	0x03A77260 MOV V3.16B, V8.16B
	0x03A77264 BL 0x3A77300
	0x03A77268 ADD X8, X31, 0x0
	0x03A7726C MOV X0, X20
	0x03A77270 MOV X1, X31
	0x03A77274 BL 0x3C5BC90
	0x03A77278 LDP V0, V1, [X31]
	0x03A7727C LDP V2, V3, [X31 + 0x20]
	0x03A77280 ADD X0, X31, 0x40
	0x03A77284 MOVZ W1, 0x2
	0x03A77288 MOV X2, X31
	0x03A7728C STP V0, V1, [X31 + 0x40]
	0x03A77290 STP V2, V3, [X31 + 0x60]
	0x03A77294 BL 0x3C27C24
	0x03A77298 FNEG S0, S0
	0x03A7729C FNEG S1, S1
	0x03A772A0 FNEG S2, S2
	0x03A772A4 MOV X0, X19
	0x03A772A8 BL 0x3A7739C
	0x03A772AC ADD X8, X31, 0x0
	0x03A772B0 MOV X0, X20
	0x03A772B4 MOV X1, X31
	0x03A772B8 BL 0x3C5BC90
	0x03A772BC LDP V0, V1, [X31]
	0x03A772C0 LDP V2, V3, [X31 + 0x20]
	0x03A772C4 ADD X0, X31, 0x40
	0x03A772C8 MOVZ W1, 0x3
	0x03A772CC MOV X2, X31
	0x03A772D0 STP V0, V1, [X31 + 0x40]
	0x03A772D4 STP V2, V3, [X31 + 0x60]
	0x03A772D8 BL 0x3C27C24
	0x03A772DC MOV X0, X19
	0x03A772E0 BL 0x3A77434
	0x03A772E4 LDP X20, X19, [X31 + 0xC0]
	0x03A772E8 LDP X22, X21, [X31 + 0xB0]
	0x03A772EC LDR X30, [X31 + 0xA0]
	0x03A772F0 LDP D9, D8, [X31 + 0x90]
	0x03A772F4 LDP D11, D10, [X31 + 0x80]
	0x03A772F8 ADD X31, X31, 0xD0
	0x03A772FC RET
	0x03A77300 STP D11, D10, [X31 - 0x40]!
	0x03A77304 STP D9, D8, [X31 + 0x10]
	0x03A77308 STP X30, X21, [X31 + 0x20]
	0x03A7730C STP X20, X19, [X31 + 0x30]
	0x03A77310 ADRP X21, 0x96B000
	0x03A77314 ADRP X20, 0x6DD000
	0x03A77318 LDRB W8, [X21 + 0x2E3]
	0x03A7731C LDR X20, [X20 + 0x20]
	0x03A77320 MOV V8.16B, V3.16B
	0x03A77324 MOV V9.16B, V2.16B
	0x03A77328 MOV V10.16B, V1.16B
	0x03A7732C MOV V11.16B, V0.16B
	0x03A77330 MOV X19, X0
	0x03A77334 TBNZ X8, 0x0, 0x3A7734C
	0x03A77338 ADRP X0, 0x6DD000
	0x03A7733C LDR X0, [X0 + 0x20]
	0x03A77340 BL 0x1C16CF4
	0x03A77344 MOVZ W8, 0x1
	0x03A77348 STRB W8, [X21 + 0x2E3]
	0x03A7734C LDR X0, [X20]
	0x03A77350 LDR W8, [X0 + 0xE0]
	0x03A77354 CBNZ W8, 0x3A7735C
	0x03A77358 BL 0x1C16DFC
	0x03A7735C CBZ X19, 0x3A77398
	0x03A77360 LDR X8, [X20]
	0x03A77364 MOV X0, X19
	0x03A77368 MOV V2.16B, V9.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x96C000
	008 Move X23, 0x6E0000
	009 Move X19, 0x6E0000
	010 Move X21, 0x6E0000
	011 Move X20, 0x6DE000
	012 Move W8, [X22+730]
	013 Move X23, [X23+3768]
	014 Move X19, [X19+3776]
	015 Move X21, [X21+3784]
	016 Move X20, [X20+2080]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {38}
	021 Move X0, 0x681000
	022 Move X0, [X0+712]
	023 Call 0x1C17CF4
	024 Move X0, 0x6E0000
	025 Move X0, [X0+3776]
	026 Call 0x1C17CF4
	027 Move X0, 0x6E0000
	028 Move X0, [X0+3768]
	029 Call 0x1C17CF4
	030 Move X0, 0x6DE000
	031 Move X0, [X0+2080]
	032 Call 0x1C17CF4
	033 Move X0, 0x6E0000
	034 Move X0, [X0+3784]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X22+730], W8
	038 Move X0, [X23]
	039 Move X1, X31
	040 Call Shader.PropertyToID, X0
	041 Move X8, [X19]
	042 Move X1, X31
	043 Move X8, [X8+184]
	044 Move [X8+4], W0
	045 Move X0, [X21]
	046 Call Shader.PropertyToID, X0
	047 Move X8, [X19]
	048 Move X1, X31
	049 Move X8, [X8+184]
	050 Move [X8+8], W0
	051 Move X0, [X20]
	052 Call Shader.PropertyToID, X0
	053 Move X8, [X19]
	054 Move X8, [X8+184]
	055 Move [X8+12], W0
	056 Move X0, X31
	057 Call SystemInfo.get_graphicsDeviceType
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X8, 0x681000
	060 Move X8, [X8+712]
	061 Move X0, [X8]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X31
	067 Call Graphics.get_activeTier
	068 Move W1, 6
	069 Move X2, X31
	070 Call GraphicsSettings.HasShaderDefine, X0, X1
	071 Move W0, W31
	072 Move X8, [X19]
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 And W9, W0, 1
	078 Move X8, [X8+184]
	079 Move [X8], W9
	080 Move X30, [X31+48]
	081 Move X23, [X31+56]
	082 Return 

Method: System.Boolean ExtractDirectionalLightMatrix(ref UnityEngine.Rendering.CullingResults cullResults, ref UnityEngine.Rendering.Universal.ShadowData shadowData, System.Int32 shadowLightIndex, System.Int32 cascadeIndex, System.Int32 shadowmapWidth, System.Int32 shadowmapHeight, System.Int32 shadowResolution, System.Single shadowNearPlane, out UnityEngine.Vector4 cascadeSplitDistance, out UnityEngine.Rendering.Universal.ShadowSliceData shadowSliceData, out UnityEngine.Matrix4x4 viewMatrix, out UnityEngine.Matrix4x4 projMatrix)

Disassembly:
	0x03A7736C MOV V3.16B, V8.16B
	0x03A77370 LDR X8, [X8 + 0xB8]
	0x03A77374 LDP X20, X19, [X31 + 0x30]
	0x03A77378 LDP X30, X21, [X31 + 0x20]
	0x03A7737C LDP D9, D8, [X31 + 0x10]
	0x03A77380 LDR W1, [X8 + 0x84]
	0x03A77384 MOV V0.16B, V11.16B
	0x03A77388 MOV V1.16B, V10.16B
	0x03A7738C MOV X2, X31
	0x03A77390 LDP D11, D10, [X31], #0x40
	0x03A77394 B 0x3C4CED8
	0x03A77398 BL 0x1C16F20
	0x03A7739C STR D10, [X31 - 0x40]!
	0x03A773A0 STP D9, D8, [X31 + 0x10]
	0x03A773A4 STP X30, X21, [X31 + 0x20]
	0x03A773A8 STP X20, X19, [X31 + 0x30]
	0x03A773AC ADRP X21, 0x96B000
	0x03A773B0 ADRP X20, 0x6DD000
	0x03A773B4 LDRB W8, [X21 + 0x2E4]
	0x03A773B8 LDR X20, [X20 + 0x20]
	0x03A773BC MOV V8.16B, V2.16B
	0x03A773C0 MOV V9.16B, V1.16B
	0x03A773C4 MOV V10.16B, V0.16B
	0x03A773C8 MOV X19, X0
	0x03A773CC TBNZ X8, 0x0, 0x3A773E4
	0x03A773D0 ADRP X0, 0x6DD000
	0x03A773D4 LDR X0, [X0 + 0x20]
	0x03A773D8 BL 0x1C16CF4
	0x03A773DC MOVZ W8, 0x1
	0x03A773E0 STRB W8, [X21 + 0x2E4]
	0x03A773E4 LDR X0, [X20]
	0x03A773E8 LDR W8, [X0 + 0xE0]
	0x03A773EC CBNZ W8, 0x3A773F4
	0x03A773F0 BL 0x1C16DFC
	0x03A773F4 CBZ X19, 0x3A77430
	0x03A773F8 LDR X8, [X20]
	0x03A773FC MOV X0, X19
	0x03A77400 MOV V1.16B, V9.16B
	0x03A77404 MOV V2.16B, V8.16B
	0x03A77408 LDR X8, [X8 + 0xB8]
	0x03A7740C LDP X20, X19, [X31 + 0x30]
	0x03A77410 LDP X30, X21, [X31 + 0x20]
	0x03A77414 LDP D9, D8, [X31 + 0x10]
	0x03A77418 LDR W1, [X8 + 0x88]
	0x03A7741C FMOV S3, W31
	0x03A77420 MOV V0.16B, V10.16B
	0x03A77424 MOV X2, X31
	0x03A77428 LDR V10, [X31], #0x40
	0x03A7742C B 0x3C4CED8
	0x03A77430 BL 0x1C16F20
	0x03A77434 STR D10, [X31 - 0x40]!
	0x03A77438 STP D9, D8, [X31 + 0x10]
	0x03A7743C STP X30, X21, [X31 + 0x20]
	0x03A77440 STP X20, X19, [X31 + 0x30]
	0x03A77444 ADRP X21, 0x96B000
	0x03A77448 ADRP X20, 0x6DD000
	0x03A7744C LDRB W8, [X21 + 0x2E5]
	0x03A77450 LDR X20, [X20 + 0x20]
	0x03A77454 MOV V8.16B, V2.16B
	0x03A77458 MOV V9.16B, V1.16B
	0x03A7745C MOV V10.16B, V0.16B
	0x03A77460 MOV X19, X0
	0x03A77464 TBNZ X8, 0x0, 0x3A7747C
	0x03A77468 ADRP X0, 0x6DD000
	0x03A7746C LDR X0, [X0 + 0x20]
	0x03A77470 BL 0x1C16CF4
	0x03A77474 MOVZ W8, 0x1
	0x03A77478 STRB W8, [X21 + 0x2E5]
	0x03A7747C LDR X0, [X20]
	0x03A77480 LDR W8, [X0 + 0xE0]
	0x03A77484 CBNZ W8, 0x3A7748C
	0x03A77488 BL 0x1C16DFC
	0x03A7748C CBZ X19, 0x3A774C8
	0x03A77490 LDR X8, [X20]
	0x03A77494 MOV X0, X19
	0x03A77498 MOV V1.16B, V9.16B
	0x03A7749C MOV V2.16B, V8.16B
	0x03A774A0 LDR X8, [X8 + 0xB8]
	0x03A774A4 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D8
	003 Move [X31+32], X29
	004 Move [X31+40], X30
	005 Move [X31+48], X28
	006 Move [X31+56], X27
	007 Move [X31+64], X26
	008 Move [X31+72], X25
	009 Move [X31+80], X24
	010 Move [X31+88], X23
	011 Move [X31+96], X22
	012 Move [X31+104], X21
	013 Move [X31+112], X20
	014 Move [X31+120], X19
	015 Move X8, 0x96C000
	016 Move X10, 0x6E0000
	017 Move X29, [X31+136]
	018 Move X27, [X31+144]
	019 Move W8, [X8+731]
	020 Move X28, [X31+128]
	021 Move X10, [X10+3776]
	022 Move V8, V0
	023 Move W20, W6
	024 Move X25, X1
	025 Move X26, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {52}
	030 Move X0, 0x6E0000
	031 Move X0, [X0+3776]
	032 Move W21, W20
	033 Move X20, X7
	034 Move W22, W5
	035 Move W23, W4
	036 Move W24, W3
	037 Move X19, X25
	038 Move W25, W2
	039 Call 0x1C17CF4
	040 Move X10, 0x6E0000
	041 Move X10, [X10+3776]
	042 Move W2, W25
	043 Move X25, X19
	044 Move W3, W24
	045 Move W4, W23
	046 Move W5, W22
	047 Move X7, X20
	048 Move W20, W21
	049 Move W8, 1
	050 Move X9, 0x96C000
	051 Move [X9+731], W8
	052 Move X0, [X10]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {67}
	056 Move X19, X7
	057 Move W21, W5
	058 Move W22, W4
	059 Move W23, W3
	060 Move W24, W2
	061 Call 0x1C17DFC
	062 Move W2, W24
	063 Move W3, W23
	064 Move W4, W22
	065 Move W5, W21
	066 Move X7, X19
	067 Move X0, X26
	068 Move X1, X25
	069 Move W6, W20
	070 Move V0, V8
	071 Move [X31], X28
	072 Call ShadowUtils.ExtractDirectionalLightMatrix, X0, X1, X2, X3, X4, X5, X6, V0, X7, X8
	073 Move V1, [X28+32]
	074 Move V0, [X28+48]
	075 Move V2, [X28]
	076 Move V3, [X28+16]
	077 Move X20, [X31+112]
	078 Move X19, [X31+120]
	079 Move X22, [X31+96]
	080 Move X21, [X31+104]
	081 Move [X29+32], V1
	082 Move [X29+40], V0
	083 Move [X29], V2
	084 Move [X29+8], V3
	085 Move V0, [X28+96]
	086 Move V1, [X28+112]
	087 Move V2, [X28+64]
	088 Move V3, [X28+80]
	089 Move X24, [X31+80]
	090 Move X23, [X31+88]
	091 Move X26, [X31+64]
	092 Move X25, [X31+72]
	093 Move [X27+32], V0
	094 Move [X27+40], V1
	095 Move [X27], V2
	096 Move [X27+8], V3
	097 Move X28, [X31+48]
	098 Move X27, [X31+56]
	099 Move X29, [X31+32]
	100 Move X30, [X31+40]
	101 Move V8, [X31+16]
	102 And W0, W0, 1
	103 Add X31, X31, 128
	104 Return X0

Method: System.Boolean ExtractDirectionalLightMatrix(ref UnityEngine.Rendering.CullingResults cullResults, ref UnityEngine.Rendering.Universal.ShadowData shadowData, System.Int32 shadowLightIndex, System.Int32 cascadeIndex, System.Int32 shadowmapWidth, System.Int32 shadowmapHeight, System.Int32 shadowResolution, System.Single shadowNearPlane, out UnityEngine.Vector4 cascadeSplitDistance, out UnityEngine.Rendering.Universal.ShadowSliceData shadowSliceData)

Disassembly:
	0x03A774A8 LDP X30, X21, [X31 + 0x20]
	0x03A774AC LDP D9, D8, [X31 + 0x10]
	0x03A774B0 LDR W1, [X8 + 0x8C]
	0x03A774B4 FMOV S3, 1
	0x03A774B8 MOV V0.16B, V10.16B
	0x03A774BC MOV X2, X31
	0x03A774C0 LDR V10, [X31], #0x40
	0x03A774C4 B 0x3C4CED8
	0x03A774C8 BL 0x1C16F20
	0x03A774CC STR D10, [X31 - 0x40]!
	0x03A774D0 STP D9, D8, [X31 + 0x10]
	0x03A774D4 STP X30, X21, [X31 + 0x20]
	0x03A774D8 STP X20, X19, [X31 + 0x30]
	0x03A774DC ADRP X21, 0x96B000
	0x03A774E0 ADRP X20, 0x6DD000
	0x03A774E4 LDRB W8, [X21 + 0x2E6]
	0x03A774E8 LDR X20, [X20 + 0x20]
	0x03A774EC MOV V8.16B, V2.16B
	0x03A774F0 MOV V9.16B, V1.16B
	0x03A774F4 MOV V10.16B, V0.16B
	0x03A774F8 MOV X19, X0
	0x03A774FC TBNZ X8, 0x0, 0x3A77514
	0x03A77500 ADRP X0, 0x6DD000
	0x03A77504 LDR X0, [X0 + 0x20]
	0x03A77508 BL 0x1C16CF4
	0x03A7750C MOVZ W8, 0x1
	0x03A77510 STRB W8, [X21 + 0x2E6]
	0x03A77514 LDR X0, [X20]
	0x03A77518 LDR W8, [X0 + 0xE0]
	0x03A7751C CBNZ W8, 0x3A77524
	0x03A77520 BL 0x1C16DFC
	0x03A77524 CBZ X19, 0x3A77560
	0x03A77528 LDR X8, [X20]
	0x03A7752C MOV X0, X19
	0x03A77530 MOV V1.16B, V9.16B
	0x03A77534 MOV V2.16B, V8.16B
	0x03A77538 LDR X8, [X8 + 0xB8]
	0x03A7753C LDP X20, X19, [X31 + 0x30]
	0x03A77540 LDP X30, X21, [X31 + 0x20]
	0x03A77544 LDP D9, D8, [X31 + 0x10]
	0x03A77548 LDR W1, [X8 + 0x34]
	0x03A7754C FMOV S3, W31
	0x03A77550 MOV V0.16B, V10.16B
	0x03A77554 MOV X2, X31
	0x03A77558 LDR V10, [X31], #0x40
	0x03A7755C B 0x3C4CED8
	0x03A77560 BL 0x1C16F20
	0x03A77564 SUB X31, X31, 0x170
	0x03A77568 STP X29, X30, [X31 + 0x140]
	0x03A7756C STP X22, X21, [X31 + 0x150]
	0x03A77570 STP X20, X19, [X31 + 0x160]
	0x03A77574 ADRP X22, 0x96B000
	0x03A77578 ADRP X21, 0x6DD000
	0x03A7757C LDRB W8, [X22 + 0x2E7]
	0x03A77580 LDR X21, [X21 + 0x20]
	0x03A77584 MOV X20, X1
	0x03A77588 MOV X19, X0
	0x03A7758C TBNZ X8, 0x0, 0x3A775A4
	0x03A77590 ADRP X0, 0x6DD000
	0x03A77594 LDR X0, [X0 + 0x20]
	0x03A77598 BL 0x1C16CF4
	0x03A7759C MOVZ W8, 0x1
	0x03A775A0 STRB W8, [X22 + 0x2E7]
	0x03A775A4 ADD X8, X31, 0x100
	0x03A775A8 FMOV S0, 1
	0x03A775AC FMOV S1, 1
	0x03A775B0 FMOV S2, -1
	0x03A775B4 MOV X0, X31
	0x03A775B8 BL 0x3C28318
	0x03A775BC LDP V0, V1, [X31 + 0x100]
	0x03A775C0 LDP V2, V3, [X31 + 0x120]
	0x03A775C4 ADD X8, X31, 0xC0
	0x03A775C8 ADD X0, X31, 0x80
	0x03A775CC STP V0, V1, [X31 + 0x80]
	0x03A775D0 STP V2, V3, [X31 + 0xA0]
	0x03A775D4 LDP V1, V0, [X20 + 0x20]
	0x03A775D8 LDP V3, V2, [X20]
	0x03A775DC ADD X1, X31, 0x40
	0x03A775E0 MOV X2, X31
	0x03A775E4 STP V1, V0, [X31 + 0x60]
	0x03A775E8 STP V3, V2, [X31 + 0x40]
	0x03A775EC BL 0x3C27F74
	0x03A775F0 LDP V0, V1, [X31 + 0xC0]
	0x03A775F4 LDP V2, V3, [X31 + 0xE0]
	0x03A775F8 LDR X0, [X21]
	0x03A775FC STP V0, V1, [X31 + 0x100]
	0x03A77600 STP V2, V3, [X31 + 0x120]
	0x03A77604 LDR W8, [X0 + 0xE0]
	0x03A77608 CBNZ W8, 0x3A77614
	0x03A7760C BL 0x1C16DFC
	0x03A77610 LDR X0, [X21]
	0x03A77614 LDR X8, [X0 + 0xB8]
	0x03A77618 LDP V0, V1, [X31 + 0x100]
	0x03A7761C LDP V2, V3, [X31 + 0x120]
	0x03A77620 LDR W1, [X8 + 0x7C]
	0x03A77624 STP V0, V1, [X31 + 0xC0]
	0x03A77628 STP V2, V3, [X31 + 0xE0]
	0x03A7762C CBZ X19, 0x3A77664
	0x03A77630 LDP V0, V1, [X31 + 0xC0]
	0x03A77634 LDP V2, V3, [X31 + 0xE0]
	0x03A77638 ADD X2, X31, 0x0
	0x03A7763C MOV X0, X19
	0x03A77640 MOV X3, X31
	0x03A77644 STP V0, V1, [X31]
	0x03A77648 STP V2, V3, [X31 + 0x20]
	0x03A7764C BL 0x3C4D038
	0x03A77650 LDP X20, X19, [X31 + 0x160]
	0x03A77654 LDP X22, X21, [X31 + 0x150]
	0x03A77658 LDP X29, X30, [X31 + 0x140]
	0x03A7765C ADD X31, X31, 0x170
	0x03A77660 RET
	0x03A77664 BL 0x1C16F20
	0x03A77668 SUB X31, X31, 0x80
	0x03A7766C STR X30, [X31 + 0x40]
	0x03A77670 STP X24, X23, [X31 + 0x50]
	0x03A77674 STP X22, X21, [X31 + 0x60]
	0x03A77678 STP X20, X19, [X31 + 0x70]
	0x03A7767C ADRP X24, 0x96B000
	0x03A77680 ADRP X23, 0x6DC000
	0x03A77684 MOV X19, X8
	0x03A77688 LDRB W8, [X24 + 0x2E8]

ISIL:
	001 Subtract X31, X31, 448
	002 Move [X31+336], D8
	003 Move [X31+352], X29
	004 Move [X31+360], X30
	005 Move [X31+368], X28
	006 Move [X31+376], X27
	007 Move [X31+384], X26
	008 Move [X31+392], X25
	009 Move [X31+400], X24
	010 Move [X31+408], X23
	011 Move [X31+416], X22
	012 Move [X31+424], X21
	013 Move [X31+432], X20
	014 Move [X31+440], X19
	015 Move [X31+348], W5
	016 Move [X31+344], W4
	017 Move X19, 0x96C000
	018 Move X20, 0x6E0000
	019 Move W8, [X19+732]
	020 Move X21, [X31+448]
	021 Move X20, [X20+3792]
	022 Move X27, X7
	023 Move V8, V0
	024 Move W25, W6
	025 Move W26, W3
	026 Move W23, W2
	027 Move X22, X1
	028 Move X29, X0
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {41}
	033 Move X0, 0x6E0000
	034 Move X0, [X0+3792]
	035 Call 0x1C17CF4
	036 Move X0, 0x6E0000
	037 Move X0, [X0+3776]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X19+732], W8
	041 Move W3, [X22+12]
	042 Move S0, [X22+16]
	043 Move S1, [X22+20]
	044 Move V2, [X22+24]
	045 Move X19, 0x6E0000
	046 Move X19, [X19+3776]
	047 Add X28, X21, 64
	048 Add X24, X21, 204
	049 Move X0, X29
	050 Move W1, W23
	051 Move W2, W26
	052 Move W4, W25
	053 Move V3, V8
	054 Move X5, X21
	055 Move X6, X28
	056 Move X7, X24
	057 Move [X31], X31
	058 Call CullingResults.ComputeDirectionalShadowMatricesAndCullingPrimitives, X0, X1, X2, X3, X4, X5, V0, X6, X7, X8
	059 Move X8, [X20]
	060 Move W23, W0
	061 Move W9, [X8+224]
	062 Compare W9, 0
	063 JumpIfNotEqual {66}
	064 Move X0, X8
	065 Call 0x1C17DFC
	066 Move X0, X24
	067 Move X1, X31
	068 Call ShadowSplitData.get_cullingSphere, X0
	069 NotImplemented "Instruction CMP not yet implemented."
	070 NotImplemented "Instruction CINC not yet implemented."
	071 NotImplemented "Instruction SBFM not yet implemented."
	072 And W8, W8, 0xFFFFFFFE
	073 Subtract W8, W26, W8
	074 Multiply W9, W9, W25
	075 Multiply W8, W8, W25
	076 Move [X27], S0
	077 Move [X27+8], S1
	078 Move [X27+8], S2
	079 Move [X27+16], S3
	080 Move [X21+192], W8
	081 Move [X21+196], W9
	082 Move [X21+200], W25
	083 Move V1, [X28+32]
	084 Move V0, [X28+48]
	085 Move V3, [X28]
	086 Move V2, [X28+16]
	087 Move X0, [X19]
	088 Move [X31+304], V1
	089 Move [X31+312], V0
	090 Move [X31+272], V3
	091 Move [X31+280], V2
	092 Move V0, [X21+32]
	093 Move V1, [X21+48]
	094 Move V2, [X21]
	095 Move V3, [X21+16]
	096 Move [X31+240], V0
	097 Move [X31+248], V1
	098 Move [X31+208], V2
	099 Move [X31+216], V3
	100 Move W8, [X0+224]
	101 Compare W8, 0
	102 JumpIfNotEqual {104}
	103 Call 0x1C17DFC
	104 Move V0, [X31+272]
	105 Move V1, [X31+288]
	106 Move V2, [X31+304]
	107 Move V3, [X31+320]
	108 Add X8, X31, 144
	109 Add X0, X31, 80
	110 Move [X31+80], V0
	111 Move [X31+88], V1
	112 Move V0, [X31+208]
	113 Move V1, [X31+224]
	114 Move [X31+112], V2
	115 Move [X31+120], V3
	116 Move V2, [X31+240]
	117 Move V3, [X31+256]
	118 Add X1, X31, 16
	119 Move [X31+16], V0
	120 Move [X31+24], V1
	121 Move [X31+48], V2
	122 Move [X31+56], V3
	123 Call ShadowUtils.GetShadowTransform, X0, X1
	124 Move V1, [X31+176]
	125 Move V0, [X31+192]
	126 Move V3, [X31+144]
	127 Move V2, [X31+160]
	128 Move X0, X24
	129 Move X1, X31
	130 Move [X21+160], V1
	131 Move [X21+168], V0
	132 Move S0, 1
	133 Move [X21+128], V3
	134 Move [X21+136], V2
	135 Call ShadowSplitData.set_shadowCascadeBlendCullingFactor, X0, V0
	136 Move W8, [X22+12]
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move X0, [X19]
	139 Move W8, [X0+224]
	140 Compare W8, 0
	141 JumpIfNotEqual {143}
	142 Call 0x1C17DFC
	143 Move W1, [X31+344]
	144 Move W2, [X31+348]
	145 Move X0, X21
	146 Call ShadowUtils.ApplySliceTransform, X0, X1, X2
	147 And W0, W23, 1
	148 Move X20, [X31+432]
	149 Move X19, [X31+440]
	150 Move X22, [X31+416]
	151 Move X21, [X31+424]
	152 Move X24, [X31+400]
	153 Move X23, [X31+408]
	154 Move X26, [X31+384]
	155 Move X25, [X31+392]
	156 Move X28, [X31+368]
	157 Move X27, [X31+376]
	158 Move X29, [X31+352]
	159 Move X30, [X31+360]
	160 Move V8, [X31+336]
	161 Add X31, X31, 448
	162 Return X0

Method: System.Boolean ExtractSpotLightMatrix(ref UnityEngine.Rendering.CullingResults cullResults, ref UnityEngine.Rendering.Universal.ShadowData shadowData, System.Int32 shadowLightIndex, out UnityEngine.Matrix4x4 shadowMatrix, out UnityEngine.Matrix4x4 viewMatrix, out UnityEngine.Matrix4x4 projMatrix, out UnityEngine.Rendering.ShadowSplitData splitData)

Disassembly:
	0x03A77930 MOV W0, W24
	0x03A77934 MOV W1, W23
	0x03A77938 MOV W2, W22
	0x03A7793C BL 0x3A77668
	0x03A77940 LDR X0, [X19 + 0x18]
	0x03A77944 CBZ X0, 0x3A77AA8
	0x03A77948 LDR X8, [X25]
	0x03A7794C MOV X1, X31
	0x03A77950 LDR X8, [X8 + 0xB8]
	0x03A77954 LDRB W22, [X8]
	0x03A77958 BL 0x3C1AB20
	0x03A7795C CBZ W22, 0x3A7798C
	0x03A77960 CBZ W0, 0x3A77994
	0x03A77964 MOVZ W0, 0x1
	0x03A77968 LDP X20, X19, [X31 + 0x1C0]
	0x03A7796C LDP X22, X21, [X31 + 0x1B0]
	0x03A77970 LDP X24, X23, [X31 + 0x1A0]
	0x03A77974 LDP X30, X25, [X31 + 0x190]
	0x03A77978 LDR X29, [X31 + 0x188]
	0x03A7797C LDR V8, [X31 + 0x180]
	0x03A77980 AND W0, W0, 0x1
	0x03A77984 ADD X31, X31, 0x1D0
	0x03A77988 RET
	0x03A7798C CMP W0, 0x1
	0x03A77990 B.NE 0x3A77964
	0x03A77994 LDP V0, V1, [X31 + 0x140]
	0x03A77998 LDR V2, [X31 + 0x16]
	0x03A7799C LDR W8, [X31 + 0x170]
	0x03A779A0 LDR X0, [X25]
	0x03A779A4 STP V0, V1, [X31 + 0x40]
	0x03A779A8 STR V2, [X31 + 0x6]
	0x03A779AC STR W8, [X31 + 0x70]
	0x03A779B0 LDR W8, [X0 + 0xE0]
	0x03A779B4 CBNZ W8, 0x3A779C0
	0x03A779B8 BL 0x1C16DFC
	0x03A779BC LDR X0, [X25]
	0x03A779C0 LDR X8, [X0 + 0xB8]
	0x03A779C4 LDRB W8, [X8]
	0x03A779C8 CBZ W8, 0x3A779F0
	0x03A779CC LDP V0, V1, [X31 + 0x40]
	0x03A779D0 LDR V2, [X31 + 0x6]
	0x03A779D4 LDR W9, [X31 + 0x70]
	0x03A779D8 MOV W22, W31
	0x03A779DC ADD X8, X31, 0x80
	0x03A779E0 STP V0, V1, [X31 + 0x80]
	0x03A779E4 STR V2, [X31 + 0xA]
	0x03A779E8 STR W9, [X31 + 0xB0]
	0x03A779EC B 0x3A77A10
	0x03A779F0 LDP V0, V1, [X31 + 0x40]
	0x03A779F4 LDR V2, [X31 + 0x6]
	0x03A779F8 LDR W9, [X31 + 0x70]
	0x03A779FC ADD X8, X31, 0x80
	0x03A77A00 STP V0, V1, [X31 + 0x80]
	0x03A77A04 STR V2, [X31 + 0xA]
	0x03A77A08 STR W9, [X31 + 0xB0]
	0x03A77A0C MOVZ W22, 0x1
	0x03A77A10 LDP V0, V1, [X8]
	0x03A77A14 LDR W9, [X8 + 0x30]
	0x03A77A18 LDR V2, [X8 + 0x2]
	0x03A77A1C ADRP X8, 0x6DF000
	0x03A77A20 LDR X8, [X8 + 0xB98]
	0x03A77A24 STR W9, [X31 + 0x70]
	0x03A77A28 STP V1, V2, [X31 + 0x50]
	0x03A77A2C STR V0, [X31 + 0x4]
	0x03A77A30 LDR X0, [X8]
	0x03A77A34 LDR W8, [X0 + 0xE0]
	0x03A77A38 CBNZ W8, 0x3A77A40

ISIL:
	001 Subtract X31, X31, 400
	002 Move [X31+320], X29
	003 Move [X31+328], X30
	004 Move [X31+336], X26
	005 Move [X31+344], X25
	006 Move [X31+352], X24
	007 Move [X31+360], X23
	008 Move [X31+368], X22
	009 Move [X31+376], X21
	010 Move [X31+384], X20
	011 Move [X31+392], X19
	012 Move X26, 0x96C000
	013 Move X25, 0x6E0000
	014 Move W8, [X26+733]
	015 Move X25, [X25+3776]
	016 Move X22, X6
	017 Move X21, X5
	018 Move X20, X4
	019 Move X19, X3
	020 Move W23, W2
	021 Move X24, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x6E0000
	027 Move X0, [X0+3776]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X26+733], W8
	031 Move X0, X24
	032 Move W1, W23
	033 Move X2, X20
	034 Move X3, X21
	035 Move X4, X22
	036 Move X5, X31
	037 Call CullingResults.ComputeSpotShadowMatricesAndCullingPrimitives, X0, X1, X2, X3, X4
	038 Move V1, [X21+32]
	039 Move V0, [X21+48]
	040 Move V3, [X21]
	041 Move V2, [X21+16]
	042 Move X8, [X25]
	043 Move [X31+288], V1
	044 Move [X31+296], V0
	045 Move [X31+256], V3
	046 Move [X31+264], V2
	047 Move V0, [X20+32]
	048 Move V1, [X20+48]
	049 Move V2, [X20]
	050 Move V3, [X20+16]
	051 Move W20, W0
	052 Move [X31+224], V0
	053 Move [X31+232], V1
	054 Move [X31+192], V2
	055 Move [X31+200], V3
	056 Move W9, [X8+224]
	057 Compare W9, 0
	058 JumpIfNotEqual {61}
	059 Move X0, X8
	060 Call 0x1C17DFC
	061 Move V0, [X31+256]
	062 Move V1, [X31+272]
	063 Move V2, [X31+288]
	064 Move V3, [X31+304]
	065 Add X8, X31, 128
	066 Add X0, X31, 64
	067 Move [X31+64], V0
	068 Move [X31+72], V1
	069 Move V0, [X31+192]
	070 Move V1, [X31+208]
	071 Move [X31+96], V2
	072 Move [X31+104], V3
	073 Move V2, [X31+224]
	074 Move V3, [X31+240]
	075 Add X1, X31, 0
	076 Move [X31], V0
	077 Move [X31+8], V1
	078 Move [X31+32], V2
	079 Move [X31+40], V3
	080 Call ShadowUtils.GetShadowTransform, X0, X1
	081 Move V0, [X31+160]
	082 Move V1, [X31+176]
	083 Move V2, [X31+128]
	084 Move V3, [X31+144]
	085 And W0, W20, 1
	086 Move X22, [X31+368]
	087 Move X21, [X31+376]
	088 Move [X19+32], V0
	089 Move [X19+40], V1
	090 Move [X19], V2
	091 Move [X19+8], V3
	092 Move X20, [X31+384]
	093 Move X19, [X31+392]
	094 Move X24, [X31+352]
	095 Move X23, [X31+360]
	096 Move X26, [X31+336]
	097 Move X25, [X31+344]
	098 Move X29, [X31+320]
	099 Move X30, [X31+328]
	100 Add X31, X31, 400
	101 Return X0

Method: System.Boolean ExtractPointLightMatrix(ref UnityEngine.Rendering.CullingResults cullResults, ref UnityEngine.Rendering.Universal.ShadowData shadowData, System.Int32 shadowLightIndex, UnityEngine.CubemapFace cubemapFace, System.Single fovBias, out UnityEngine.Matrix4x4 shadowMatrix, out UnityEngine.Matrix4x4 viewMatrix, out UnityEngine.Matrix4x4 projMatrix, out UnityEngine.Rendering.ShadowSplitData splitData)

Disassembly:
	0x03A77A3C BL 0x1C16DFC
	0x03A77A40 LDP V0, V1, [X31 + 0x40]
	0x03A77A44 LDR W8, [X31 + 0x70]
	0x03A77A48 LDR V2, [X31 + 0x6]
	0x03A77A4C ADD X0, X31, 0x0
	0x03A77A50 STP V0, V1, [X31]
	0x03A77A54 STR W8, [X31 + 0x30]
	0x03A77A58 ADD X8, X31, 0xC0
	0x03A77A5C MOVZ W4, 0x1
	0x03A77A60 MOV W1, W31
	0x03A77A64 MOV W2, W21
	0x03A77A68 MOV V0.16B, V8.16B
	0x03A77A6C MOV W3, W22
	0x03A77A70 MOV X5, X20
	0x03A77A74 STR V2, [X31 + 0x2]
	0x03A77A78 BL 0x3A724F4
	0x03A77A7C ADRP X8, 0x6DD000
	0x03A77A80 LDR X8, [X8 + 0x10]
	0x03A77A84 LDR X0, [X8]
	0x03A77A88 LDR W8, [X0 + 0xE0]
	0x03A77A8C CBNZ W8, 0x3A77A94
	0x03A77A90 BL 0x1C16DFC
	0x03A77A94 ADD X1, X31, 0xC0
	0x03A77A98 MOV X0, X19
	0x03A77A9C MOV W2, W31
	0x03A77AA0 BL 0x3A71EF4
	0x03A77AA4 B 0x3A77968
	0x03A77AA8 BL 0x1C16F20
	0x03A77AAC SUB X31, X31, 0x80
	0x03A77AB0 STR X30, [X31 + 0x40]
	0x03A77AB4 STP X24, X23, [X31 + 0x50]
	0x03A77AB8 STP X22, X21, [X31 + 0x60]
	0x03A77ABC STP X20, X19, [X31 + 0x70]
	0x03A77AC0 ADRP X24, 0x96B000
	0x03A77AC4 ADRP X23, 0x6DF000
	0x03A77AC8 LDRB W8, [X24 + 0x2EB]
	0x03A77ACC LDR X23, [X23 + 0xEC0]
	0x03A77AD0 MOV X19, X4
	0x03A77AD4 MOV W20, W2
	0x03A77AD8 MOV W21, W1
	0x03A77ADC MOV W22, W0
	0x03A77AE0 TBNZ X8, 0x0, 0x3A77B04
	0x03A77AE4 ADRP X0, 0x6D9000
	0x03A77AE8 LDR X0, [X0 + 0x9B0]
	0x03A77AEC BL 0x1C16CF4
	0x03A77AF0 ADRP X0, 0x6DF000
	0x03A77AF4 LDR X0, [X0 + 0xEC0]
	0x03A77AF8 BL 0x1C16CF4
	0x03A77AFC MOVZ W8, 0x1
	0x03A77B00 STRB W8, [X24 + 0x2EB]
	0x03A77B04 LDR X0, [X23]
	0x03A77B08 MOVI V0.2D, 0x0
	0x03A77B0C STR W31, [X31 + 0x30]
	0x03A77B10 STP V0, V0, [X31 + 0x10]
	0x03A77B14 STR V0, [X31]
	0x03A77B18 ADRP X24, 0x6D9000
	0x03A77B1C LDR W8, [X0 + 0xE0]
	0x03A77B20 LDR X24, [X24 + 0x9B0]
	0x03A77B24 CBNZ W8, 0x3A77B2C
	0x03A77B28 BL 0x1C16DFC
	0x03A77B2C ADD X8, X31, 0x0
	0x03A77B30 MOV W0, W22
	0x03A77B34 MOV W1, W21
	0x03A77B38 MOV W2, W20
	0x03A77B3C BL 0x3A77668
	0x03A77B40 LDR X8, [X23]
	0x03A77B44 LDR X0, [X24]
	0x03A77B48 LDR X8, [X8 + 0xB8]
	0x03A77B4C LDR W9, [X0 + 0xE0]
	0x03A77B50 LDRB W20, [X8]
	0x03A77B54 CBNZ W9, 0x3A77B5C
	0x03A77B58 BL 0x1C16DFC
	0x03A77B5C EOR W1, W20, 0x1
	0x03A77B60 ADD X0, X31, 0x0
	0x03A77B64 FMOV S0, W31
	0x03A77B68 MOVZ W2, 0x1
	0x03A77B6C MOVZ W3, 0x1
	0x03A77B70 MOVZ W4, 0x1
	0x03A77B74 MOV X5, X19
	0x03A77B78 MOV X6, X31
	0x03A77B7C BL 0x39D59F4
	0x03A77B80 LDP X20, X19, [X31 + 0x70]
	0x03A77B84 LDP X22, X21, [X31 + 0x60]
	0x03A77B88 LDP X24, X23, [X31 + 0x50]
	0x03A77B8C LDR X30, [X31 + 0x40]
	0x03A77B90 ADD X31, X31, 0x80
	0x03A77B94 RET

ISIL:
	001 Subtract X31, X31, 416
	002 Move [X31+320], D8
	003 Move [X31+328], X29
	004 Move [X31+336], X30
	005 Move [X31+344], X27
	006 Move [X31+352], X26
	007 Move [X31+360], X25
	008 Move [X31+368], X24
	009 Move [X31+376], X23
	010 Move [X31+384], X22
	011 Move [X31+392], X21
	012 Move [X31+400], X20
	013 Move [X31+408], X19
	014 Move X27, 0x96C000
	015 Move X26, 0x6E0000
	016 Move W8, [X27+734]
	017 Move X26, [X26+3776]
	018 Move X22, X7
	019 Move X21, X6
	020 Move X20, X5
	021 Move X19, X4
	022 Move V8, V0
	023 Move W23, W3
	024 Move W24, W2
	025 Move X25, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {35}
	030 Move X0, 0x6E0000
	031 Move X0, [X0+3776]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X27+734], W8
	035 Move X0, X25
	036 Move W1, W24
	037 Move W2, W23
	038 Move V0, V8
	039 Move X3, X20
	040 Move X4, X21
	041 Move X5, X22
	042 Move X6, X31
	043 Call CullingResults.ComputePointShadowMatricesAndCullingPrimitives, X0, X1, X2, V0, X3, X4, X5
	044 Move V0, [X20+4]
	045 Move V1, [X20+20]
	046 Move V2, [X20+36]
	047 Move V3, [X20+52]
	048 NotImplemented "Instruction FNEG not yet implemented."
	049 NotImplemented "Instruction FNEG not yet implemented."
	050 NotImplemented "Instruction FNEG not yet implemented."
	051 NotImplemented "Instruction FNEG not yet implemented."
	052 Move [X20+4], S0
	053 Move [X20+20], S1
	054 Move [X20+36], S2
	055 Move [X20+52], S3
	056 Move V1, [X21+32]
	057 Move V0, [X21+48]
	058 Move V3, [X21]
	059 Move V2, [X21+16]
	060 Move X8, [X26]
	061 Move [X31+288], V1
	062 Move [X31+296], V0
	063 Move [X31+256], V3
	064 Move [X31+264], V2
	065 Move V0, [X20+32]
	066 Move V1, [X20+48]
	067 Move V2, [X20]
	068 Move V3, [X20+16]
	069 Move W20, W0
	070 Move [X31+224], V0
	071 Move [X31+232], V1
	072 Move [X31+192], V2
	073 Move [X31+200], V3
	074 Move W9, [X8+224]
	075 Compare W9, 0
	076 JumpIfNotEqual {79}
	077 Move X0, X8
	078 Call 0x1C17DFC
	079 Move V0, [X31+256]
	080 Move V1, [X31+272]
	081 Move V2, [X31+288]
	082 Move V3, [X31+304]
	083 Add X8, X31, 128
	084 Add X0, X31, 64
	085 Move [X31+64], V0
	086 Move [X31+72], V1
	087 Move V0, [X31+192]
	088 Move V1, [X31+208]
	089 Move [X31+96], V2
	090 Move [X31+104], V3
	091 Move V2, [X31+224]
	092 Move V3, [X31+240]
	093 Add X1, X31, 0
	094 Move [X31], V0
	095 Move [X31+8], V1
	096 Move [X31+32], V2
	097 Move [X31+40], V3
	098 Call ShadowUtils.GetShadowTransform, X0, X1
	099 Move V0, [X31+160]
	100 Move V1, [X31+176]
	101 Move V2, [X31+128]
	102 Move V3, [X31+144]
	103 And W0, W20, 1
	104 Move X22, [X31+384]
	105 Move X21, [X31+392]
	106 Move [X19+32], V0
	107 Move [X19+40], V1
	108 Move [X19], V2
	109 Move [X19+8], V3
	110 Move X20, [X31+400]
	111 Move X19, [X31+408]
	112 Move X24, [X31+368]
	113 Move X23, [X31+376]
	114 Move X26, [X31+352]
	115 Move X25, [X31+360]
	116 Move X30, [X31+336]
	117 Move X27, [X31+344]
	118 Move X29, [X31+328]
	119 Move V8, [X31+320]
	120 Add X31, X31, 416
	121 Return X0

Method: System.Void RenderShadowSlice(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.ShadowSliceData shadowSliceData, ref UnityEngine.Rendering.ShadowDrawingSettings settings, UnityEngine.Matrix4x4 proj, UnityEngine.Matrix4x4 view)

Disassembly:
	0x03A77B98 STR D8, [X31 - 0x50]!
	0x03A77B9C STR X30, [X31 + 0x8]
	0x03A77BA0 STP X26, X25, [X31 + 0x10]
	0x03A77BA4 STP X24, X23, [X31 + 0x20]
	0x03A77BA8 STP X22, X21, [X31 + 0x30]
	0x03A77BAC STP X20, X19, [X31 + 0x40]
	0x03A77BB0 ADRP X25, 0x96B000
	0x03A77BB4 ADRP X26, 0x6DF000
	0x03A77BB8 LDRB W8, [X25 + 0x2EC]
	0x03A77BBC LDR X26, [X26 + 0xEC0]
	0x03A77BC0 MOV X19, X5
	0x03A77BC4 MOV V8.16B, V0.16B
	0x03A77BC8 MOV W24, W4
	0x03A77BCC MOV W21, W3
	0x03A77BD0 MOV W22, W2
	0x03A77BD4 MOV W23, W1
	0x03A77BD8 MOV X20, X0
	0x03A77BDC TBNZ X8, 0x0, 0x3A77BF4
	0x03A77BE0 ADRP X0, 0x6DF000
	0x03A77BE4 LDR X0, [X0 + 0xEC0]
	0x03A77BE8 BL 0x1C16CF4
	0x03A77BEC MOVZ W8, 0x1
	0x03A77BF0 STRB W8, [X25 + 0x2EC]
	0x03A77BF4 LDR X0, [X26]
	0x03A77BF8 LDR X25, [X20]
	0x03A77BFC LDR W8, [X0 + 0xE0]
	0x03A77C00 CBNZ W8, 0x3A77C08
	0x03A77C04 BL 0x1C16DFC
	0x03A77C08 MOV X0, X25
	0x03A77C0C MOV W1, W23
	0x03A77C10 MOV W2, W22
	0x03A77C14 MOV W3, W21
	0x03A77C18 MOV W4, W24
	0x03A77C1C MOV V0.16B, V8.16B
	0x03A77C20 MOV X5, X19
	0x03A77C24 BL 0x3A77840
	0x03A77C28 MOV W24, W0
	0x03A77C2C TBZ X0, 0x0, 0x3A77C68
	0x03A77C30 LDR X0, [X20]
	0x03A77C34 CBZ X0, 0x3A77C40
	0x03A77C38 MOV X1, X31
	0x03A77C3C BL 0x39D4B1C
	0x03A77C40 LDR X0, [X26]
	0x03A77C44 LDR W8, [X0 + 0xE0]
	0x03A77C48 CBNZ W8, 0x3A77C50
	0x03A77C4C BL 0x1C16DFC
	0x03A77C50 MOV W0, W23
	0x03A77C54 MOV W1, W22
	0x03A77C58 MOV W2, W21
	0x03A77C5C MOV X4, X19
	0x03A77C60 BL 0x3A77AAC
	0x03A77C64 STR X0, [X20]
	0x03A77C68 AND W0, W24, 0x1
	0x03A77C6C LDP X20, X19, [X31 + 0x40]
	0x03A77C70 LDP X22, X21, [X31 + 0x30]
	0x03A77C74 LDP X24, X23, [X31 + 0x20]
	0x03A77C78 LDP X26, X25, [X31 + 0x10]
	0x03A77C7C LDR X30, [X31 + 0x8]
	0x03A77C80 LDR V8, [X31], #0x50
	0x03A77C84 RET
	0x03A77C88 SUB X31, X31, 0x40
	0x03A77C8C STR D8, [X31 + 0x10]
	0x03A77C90 STP X30, X21, [X31 + 0x20]
	0x03A77C94 STP X20, X19, [X31 + 0x30]
	0x03A77C98 ADRP X21, 0x96B000
	0x03A77C9C LDRB W8, [X21 + 0x2ED]
	0x03A77CA0 MOV W20, W1
	0x03A77CA4 MOV X19, X0
	0x03A77CA8 TBNZ X8, 0x0, 0x3A77CF0
	0x03A77CAC ADRP X0, 0x6DF000
	0x03A77CB0 LDR X0, [X0 + 0x178]
	0x03A77CB4 BL 0x1C16CF4
	0x03A77CB8 ADRP X0, 0x67C000
	0x03A77CBC LDR X0, [X0 + 0x5A8]
	0x03A77CC0 BL 0x1C16CF4
	0x03A77CC4 ADRP X0, 0x6DF000
	0x03A77CC8 LDR X0, [X0 + 0xEE8]
	0x03A77CCC BL 0x1C16CF4
	0x03A77CD0 ADRP X0, 0x6DF000
	0x03A77CD4 LDR X0, [X0 + 0xEF0]
	0x03A77CD8 BL 0x1C16CF4
	0x03A77CDC ADRP X0, 0x6A5000
	0x03A77CE0 LDR X0, [X0 + 0x8A8]
	0x03A77CE4 BL 0x1C16CF4
	0x03A77CE8 MOVZ W8, 0x1
	0x03A77CEC STRB W8, [X21 + 0x2ED]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+128], X30
	003 Move [X31+136], X25
	004 Move [X31+144], X24
	005 Move [X31+152], X23
	006 Move [X31+160], X22
	007 Move [X31+168], X21
	008 Move [X31+176], X20
	009 Move [X31+184], X19
	010 Move X25, 0x96C000
	011 Move W8, [X25+735]
	012 Move X23, X5
	013 Move X22, X4
	014 Move X21, X3
	015 Move X24, X2
	016 Move X20, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x6DA000
	023 Move X0, [X0+3200]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X25+735], W8
	027 Compare X19, 0
	028 JumpIfEqual {108}
	029 Move X25, 0x6DA000
	030 Move X25, [X25+3200]
	031 Move S0, 1
	032 Move S1, 2.5
	033 Move X0, X19
	034 Move X1, X31
	035 Call CommandBuffer.SetGlobalDepthBias, X0, V0, V1
	036 Move V2, [X24+200]
	037 Move S0, [X24+192]
	038 Move S1, [X24+196]
	039 Move X0, X19
	040 Move X1, X31
	041 NotImplemented "Instruction SCVTF not yet implemented."
	042 NotImplemented "Instruction SCVTF not yet implemented."
	043 NotImplemented "Instruction SCVTF not yet implemented."
	044 Move V3, V2
	045 Call CommandBuffer.SetViewport, X0, X1
	046 Move V1, [X23+32]
	047 Move V0, [X23+48]
	048 Move V3, [X23]
	049 Move V2, [X23+16]
	050 Add X1, X31, 64
	051 Add X2, X31, 0
	052 Move [X31+96], V1
	053 Move [X31+104], V0
	054 Move [X31+64], V3
	055 Move [X31+72], V2
	056 Move V1, [X22+32]
	057 Move V0, [X22+48]
	058 Move V3, [X22]
	059 Move V2, [X22+16]
	060 Move X0, X19
	061 Move X3, X31
	062 Move [X31+32], V1
	063 Move [X31+40], V0
	064 Move [X31], V3
	065 Move [X31+8], V2
	066 Call CommandBuffer.SetViewProjectionMatrices, X0, X1, X2
	067 Move X0, [X25]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X0, X20
	073 Move X1, X19
	074 Move X2, X31
	075 Call ScriptableRenderContext.ExecuteCommandBuffer, X0, X1
	076 Move X0, X19
	077 Move X1, X31
	078 Call CommandBuffer.Clear, X0
	079 Move X0, X20
	080 Move X1, X21
	081 Move X2, X31
	082 Call ScriptableRenderContext.DrawShadows, X0, X1
	083 Move X0, X19
	084 Move X1, X31
	085 Call CommandBuffer.DisableScissorRect, X0
	086 Move X0, X20
	087 Move X1, X19
	088 Move X2, X31
	089 Call ScriptableRenderContext.ExecuteCommandBuffer, X0, X1
	090 Move X0, X19
	091 Move X1, X31
	092 Call CommandBuffer.Clear, X0
	093 Move S0, W31
	094 Move S1, W31
	095 Move X0, X19
	096 Move X1, X31
	097 Call CommandBuffer.SetGlobalDepthBias, X0, V0, V1
	098 Move X20, [X31+176]
	099 Move X19, [X31+184]
	100 Move X22, [X31+160]
	101 Move X21, [X31+168]
	102 Move X24, [X31+144]
	103 Move X23, [X31+152]
	104 Move X30, [X31+128]
	105 Move X25, [X31+136]
	106 Add X31, X31, 192
	107 Return 
	108 Call 0x1C17F20

Method: System.Void RenderShadowSlice(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.ScriptableRenderContext context, ref UnityEngine.Rendering.Universal.ShadowSliceData shadowSliceData, ref UnityEngine.Rendering.ShadowDrawingSettings settings)

Disassembly:
	0x03A77CF0 ANDS W31, W20, 0x1
	0x03A77CF4 FMOV S0, W31
	0x03A77CF8 FMOV S1, 1
	0x03A77CFC FCSEL S8, S1, S0, NE
	0x03A77D00 STR X31, [X31 + 0x18]
	0x03A77D04 STR X31, [X31 + 0x8]
	0x03A77D08 CBZ X19, 0x3A77DEC
	0x03A77D0C ADRP X8, 0x6DF000
	0x03A77D10 LDR X8, [X8 + 0x178]
	0x03A77D14 ADD X1, X31, 0x18
	0x03A77D18 MOV X0, X19
	0x03A77D1C LDR X2, [X8]
	0x03A77D20 BL 0x21A4990
	0x03A77D24 TBZ X0, 0x0, 0x3A77DCC
	0x03A77D28 LDR X8, [X31 + 0x18]
	0x03A77D2C CBZ X8, 0x3A77DEC
	0x03A77D30 LDR W1, [X8 + 0x58]
	0x03A77D34 CBNZ W1, 0x3A77D60
	0x03A77D38 ADRP X8, 0x6A5000
	0x03A77D3C LDR X8, [X8 + 0x8A8]
	0x03A77D40 LDR X0, [X8]
	0x03A77D44 LDR W8, [X0 + 0xE0]
	0x03A77D48 CBNZ W8, 0x3A77D50
	0x03A77D4C BL 0x1C16DFC
	0x03A77D50 MOV X0, X31
	0x03A77D54 BL 0x3A8AB60
	0x03A77D58 CBZ X0, 0x3A77DE4
	0x03A77D5C LDR W1, [X0 + 0xDC]
	0x03A77D60 ADRP X8, 0x6DF000
	0x03A77D64 LDR X8, [X8 + 0xEE8]
	0x03A77D68 ADD X0, X31, 0x0
	0x03A77D6C STR X31, [X31]
	0x03A77D70 LDR X2, [X8]
	0x03A77D74 BL 0x24345B8
	0x03A77D78 LDR X8, [X31]
	0x03A77D7C ADRP X9, 0x6DF000
	0x03A77D80 LDR X9, [X9 + 0xEF0]
	0x03A77D84 ADD X0, X31, 0x8
	0x03A77D88 STR X8, [X31 + 0x8]
	0x03A77D8C LDR X1, [X9]
	0x03A77D90 BL 0x24345D0
	0x03A77D94 ADRP X8, 0x67C000
	0x03A77D98 LDR X8, [X8 + 0x5A8]
	0x03A77D9C MOV W19, W0
	0x03A77DA0 LDR X8, [X8]
	0x03A77DA4 LDR W9, [X8 + 0xE0]
	0x03A77DA8 CBNZ W9, 0x3A77DB4
	0x03A77DAC MOV X0, X8
	0x03A77DB0 BL 0x1C16DFC
	0x03A77DB4 MOVZ W1, 0x1
	0x03A77DB8 MOV W0, W19
	0x03A77DBC MOV X2, X31

ISIL:
	001 Subtract X31, X31, 320
	002 Move [X31+256], X29
	003 Move [X31+264], X30
	004 Move [X31+272], X24
	005 Move [X31+280], X23
	006 Move [X31+288], X22
	007 Move [X31+296], X21
	008 Move [X31+304], X20
	009 Move [X31+312], X19
	010 Move X24, 0x96C000
	011 Move X23, 0x6E0000
	012 Move W8, [X24+736]
	013 Move X23, [X23+3776]
	014 Move X19, X3
	015 Move X20, X2
	016 Move X21, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x6E0000
	023 Move X0, [X0+3776]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+736], W8
	027 Move V1, [X20+96]
	028 Move V0, [X20+112]
	029 Move V3, [X20+64]
	030 Move V2, [X20+80]
	031 Move X0, [X23]
	032 Move [X31+224], V1
	033 Move [X31+232], V0
	034 Move [X31+192], V3
	035 Move [X31+200], V2
	036 Move V0, [X20+32]
	037 Move V1, [X20+48]
	038 Move V2, [X20]
	039 Move V3, [X20+16]
	040 Move [X31+160], V0
	041 Move [X31+168], V1
	042 Move [X31+128], V2
	043 Move [X31+136], V3
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move V0, [X31+192]
	049 Move V1, [X31+208]
	050 Move V2, [X31+224]
	051 Move V3, [X31+240]
	052 Add X4, X31, 64
	053 Add X5, X31, 0
	054 Move [X31+64], V0
	055 Move [X31+72], V1
	056 Move V0, [X31+128]
	057 Move V1, [X31+144]
	058 Move [X31+96], V2
	059 Move [X31+104], V3
	060 Move V2, [X31+160]
	061 Move V3, [X31+176]
	062 Move X0, X22
	063 Move X1, X21
	064 Move X2, X20
	065 Move X3, X19
	066 Move [X31], V0
	067 Move [X31+8], V1
	068 Move [X31+32], V2
	069 Move [X31+40], V3
	070 Call ShadowUtils.RenderShadowSlice, X0, X1, X2, X3, X4, X5
	071 Move X20, [X31+304]
	072 Move X19, [X31+312]
	073 Move X22, [X31+288]
	074 Move X21, [X31+296]
	075 Move X24, [X31+272]
	076 Move X23, [X31+280]
	077 Move X29, [X31+256]
	078 Move X30, [X31+264]
	079 Add X31, X31, 320
	080 Return 

Method: System.Int32 GetMaxTileResolutionInAtlas(System.Int32 atlasWidth, System.Int32 atlasHeight, System.Int32 tileCount)

Disassembly:
	0x03A77DC0 BL 0x337EDF0
	0x03A77DC4 SCVTF S0, W0
	0x03A77DC8 FMUL S8, S8, S0
	0x03A77DCC MOV V0.16B, V8.16B
	0x03A77DD0 LDP X20, X19, [X31 + 0x30]
	0x03A77DD4 LDP X30, X21, [X31 + 0x20]
	0x03A77DD8 LDR V8, [X31 + 0x10]
	0x03A77DDC ADD X31, X31, 0x40
	0x03A77DE0 RET
	0x03A77DE4 MOV X8, X31
	0x03A77DE8 B 0x3A77D7C

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W8, W0
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction SDIV not yet implemented."
	005 Multiply W9, W9, W1
	006 NotImplemented "Instruction SDIV not yet implemented."
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction SBFM not yet implemented."
	009 Return X0

Method: System.Void ApplySliceTransform(ref UnityEngine.Rendering.Universal.ShadowSliceData shadowSliceData, System.Int32 atlasWidth, System.Int32 atlasHeight)

Disassembly:
	0x03A77800 MOV X19, X0
	0x03A77804 LDR X8, [X8 + 0xB8]
	0x03A77808 LDRB W8, [X8]
	0x03A7780C EOR W1, W8, 0x1
	0x03A77810 BL 0x3C1AB5C
	0x03A77814 MOVZ W1, 0x1
	0x03A77818 MOV X0, X19
	0x03A7781C MOV X2, X31
	0x03A77820 BL 0x3C1AA10
	0x03A77824 MOV X0, X19
	0x03A77828 LDP X20, X19, [X31 + 0x60]
	0x03A7782C LDP X22, X21, [X31 + 0x50]
	0x03A77830 LDP X30, X23, [X31 + 0x40]
	0x03A77834 ADD X31, X31, 0x70
	0x03A77838 RET
	0x03A7783C BL 0x1C16F20
	0x03A77840 SUB X31, X31, 0x1D0
	0x03A77844 STR D8, [X31 + 0x180]
	0x03A77848 STR X29, [X31 + 0x188]
	0x03A7784C STP X30, X25, [X31 + 0x190]
	0x03A77850 STP X24, X23, [X31 + 0x1A0]
	0x03A77854 STP X22, X21, [X31 + 0x1B0]
	0x03A77858 STP X20, X19, [X31 + 0x1C0]
	0x03A7785C ADRP X25, 0x96B000
	0x03A77860 LDRB W8, [X25 + 0x2EA]
	0x03A77864 MOV X20, X5
	0x03A77868 MOV V8.16B, V0.16B
	0x03A7786C MOV W21, W4
	0x03A77870 MOV W22, W3
	0x03A77874 MOV W23, W2
	0x03A77878 MOV W24, W1
	0x03A7787C MOV X19, X0
	0x03A77880 TBNZ X8, 0x0, 0x3A778BC
	0x03A77884 ADRP X0, 0x67C000
	0x03A77888 LDR X0, [X0 + 0x598]
	0x03A7788C BL 0x1C16CF4
	0x03A77890 ADRP X0, 0x6DF000
	0x03A77894 LDR X0, [X0 + 0xB98]
	0x03A77898 BL 0x1C16CF4
	0x03A7789C ADRP X0, 0x6DD000
	0x03A778A0 LDR X0, [X0 + 0x10]
	0x03A778A4 BL 0x1C16CF4
	0x03A778A8 ADRP X0, 0x6DF000
	0x03A778AC LDR X0, [X0 + 0xEC0]
	0x03A778B0 BL 0x1C16CF4
	0x03A778B4 MOVZ W8, 0x1
	0x03A778B8 STRB W8, [X25 + 0x2EA]
	0x03A778BC MOVI V0.2D, 0x0
	0x03A778C0 STR W31, [X31 + 0x170]
	0x03A778C4 STR X31, [X31 + 0x130]
	0x03A778C8 STP V0, V0, [X31 + 0x150]
	0x03A778CC STR V0, [X31 + 0x14]
	0x03A778D0 STP V0, V0, [X31 + 0x110]
	0x03A778D4 STP V0, V0, [X31 + 0xF0]
	0x03A778D8 STP V0, V0, [X31 + 0xD0]
	0x03A778DC STR V0, [X31 + 0xC]
	0x03A778E0 CBZ X19, 0x3A77964
	0x03A778E4 ADRP X8, 0x67C000
	0x03A778E8 LDR X8, [X8 + 0x598]
	0x03A778EC LDR X25, [X19 + 0x18]
	0x03A778F0 LDR X0, [X8]
	0x03A778F4 LDR W8, [X0 + 0xE0]
	0x03A778F8 CBNZ W8, 0x3A77900
	0x03A778FC BL 0x1C16DFC
	0x03A77900 MOV X0, X25
	0x03A77904 MOV X1, X31
	0x03A77908 MOV X2, X31
	0x03A7790C BL 0x3C3883C
	0x03A77910 TBNZ X0, 0x0, 0x3A77964
	0x03A77914 ADRP X25, 0x6DF000
	0x03A77918 LDR X25, [X25 + 0xEC0]
	0x03A7791C LDR X0, [X25]
	0x03A77920 LDR W8, [X0 + 0xE0]
	0x03A77924 CBNZ W8, 0x3A7792C
	0x03A77928 BL 0x1C16DFC
	0x03A7792C ADD X8, X31, 0x140

ISIL:
	001 Subtract X31, X31, 368
	002 Move [X31+304], X29
	003 Move [X31+320], X30
	004 Move [X31+328], X23
	005 Move [X31+336], X22
	006 Move [X31+344], X21
	007 Move [X31+352], X20
	008 Move [X31+360], X19
	009 Move X23, 0x962000
	010 Move W8, [X23+2752]
	011 Move W20, W2
	012 Move W21, W1
	013 Move X19, X0
	014 Add X22, X31, 192
	015 Compare W8, 0
	016 JumpIfNotEqual {22}
	017 Move X0, 0x681000
	018 Move X0, [X0+624]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+2752], W8
	022 Move X8, 0x681000
	023 Move X8, [X8+624]
	024 Move S0, W21
	025 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	026 Move V1, 0
	027 Move X8, [X8]
	028 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	029 NotImplemented "Instruction INVALID not yet implemented."
	030 Add X0, X31, 64
	031 Move X8, [X8+184]
	032 Add X1, X31, 0
	033 Move X2, X31
	034 Move V4, [X8+80]
	035 Move V2, [X8+96]
	036 Move X9, [X8+112]
	037 Move V3, [X8+4]
	038 Move [X31+208], V4
	039 Move [X31+216], V2
	040 Move [X31+240], X9
	041 Move [X31+12], V3
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 Move X9, [X31+232]
	044 NotImplemented "Instruction LDUR not yet implemented."
	045 Move X8, [X8+120]
	046 Move [X31+18], V1
	047 Move [X31+272], X9
	048 Move [X31+16], V2
	049 Move V3, [X19+160]
	050 Move V4, [X19+176]
	051 Move V1, [X19+200]
	052 Move V2, [X19+192]
	053 Move V5, [X19+128]
	054 Move V6, [X19+144]
	055 Move [X31+32], V3
	056 Move [X31+40], V4
	057 Move V3, [X31+16]
	058 Move V7, [X31+18]
	059 NotImplemented "Instruction SCVTF not yet implemented."
	060 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	061 Move [X31+88], V3
	062 Multiply S3, S1, V0.S[0]
	063 Multiply S1, S1, V0.S[1]
	064 NotImplemented "Instruction INVALID not yet implemented."
	065 Move [X31+120], X8
	066 Add X8, X31, 128
	067 Move [X31], V5
	068 Move [X31+8], V6
	069 Move [X31+68], V7
	070 Move [X31+104], X9
	071 Move [X31+64], S3
	072 Move [X31+84], S1
	073 Move [X31+112], D0
	074 Call Matrix4x4.op_Multiply, X0, X1
	075 Move V1, [X31+160]
	076 Move V0, [X31+176]
	077 Move V3, [X31+128]
	078 Move V2, [X31+144]
	079 Move X22, [X31+336]
	080 Move X21, [X31+344]
	081 Move X30, [X31+320]
	082 Move X23, [X31+328]
	083 Move [X31+224], V1
	084 Move [X31+232], V0
	085 Move [X31+192], V3
	086 Move [X31+200], V2
	087 Move [X19+160], V1
	088 Move [X19+168], V0
	089 Move [X19+128], V3
	090 Move [X19+136], V2
	091 Move X20, [X31+352]
	092 Move X19, [X31+360]
	093 Move X29, [X31+304]
	094 Add X31, X31, 368
	095 Return 

Method: UnityEngine.Vector4 GetShadowBias(ref UnityEngine.Rendering.VisibleLight shadowLight, System.Int32 shadowLightIndex, ref UnityEngine.Rendering.Universal.ShadowData shadowData, UnityEngine.Matrix4x4 lightProjectionMatrix, System.Single shadowResolution)

Disassembly:
	0x03A77DEC BL 0x1C16F20
	0x03A77DF0 STR X30, [X31 - 0x20]!
	0x03A77DF4 STP X20, X19, [X31 + 0x10]
	0x03A77DF8 ADRP X20, 0x96B000
	0x03A77DFC ADRP X19, 0x6DF000
	0x03A77E00 LDRB W8, [X20 + 0x2EE]
	0x03A77E04 LDR X19, [X19 + 0xEF8]
	0x03A77E08 TBNZ X8, 0x0, 0x3A77E20
	0x03A77E0C ADRP X0, 0x6DF000
	0x03A77E10 LDR X0, [X0 + 0xEF8]
	0x03A77E14 BL 0x1C16CF4
	0x03A77E18 MOVZ W8, 0x1
	0x03A77E1C STRB W8, [X20 + 0x2EE]
	0x03A77E20 LDR X0, [X19]
	0x03A77E24 LDR W8, [X0 + 0xE0]
	0x03A77E28 CBNZ W8, 0x3A77E30
	0x03A77E2C BL 0x1C16DFC
	0x03A77E30 ADRP X20, 0x96B000
	0x03A77E34 LDRB W8, [X20 + 0x30A]
	0x03A77E38 CBNZ W8, 0x3A77E50
	0x03A77E3C ADRP X0, 0x6DF000
	0x03A77E40 LDR X0, [X0 + 0xEF8]
	0x03A77E44 BL 0x1C16CF4
	0x03A77E48 MOVZ W8, 0x1
	0x03A77E4C STRB W8, [X20 + 0x30A]
	0x03A77E50 LDR X0, [X19]
	0x03A77E54 LDR W8, [X0 + 0xE0]
	0x03A77E58 CBNZ W8, 0x3A77E64
	0x03A77E5C BL 0x1C16DFC
	0x03A77E60 LDR X0, [X19]
	0x03A77E64 LDR X8, [X0 + 0xB8]
	0x03A77E68 LDP X20, X19, [X31 + 0x10]
	0x03A77E6C LDRB W8, [X8 + 0x8]
	0x03A77E70 CMP W8, 0x0
	0x03A77E74 CSET W0, EQ
	0x03A77E78 LDR X30, [X31], #0x20
	0x03A77E7C RET
	0x03A77E80 STR X30, [X31 - 0x30]!
	0x03A77E84 STP X22, X21, [X31 + 0x10]
	0x03A77E88 STP X20, X19, [X31 + 0x20]
	0x03A77E8C ADRP X21, 0x96B000
	0x03A77E90 ADRP X22, 0x6DF000
	0x03A77E94 LDRB W8, [X21 + 0x2EF]
	0x03A77E98 LDR X22, [X22 + 0xEC0]
	0x03A77E9C MOV W20, W1
	0x03A77EA0 MOV X19, X0
	0x03A77EA4 TBNZ X8, 0x0, 0x3A77ED4
	0x03A77EA8 ADRP X0, 0x6A4000
	0x03A77EAC LDR X0, [X0 + 0x8F8]
	0x03A77EB0 BL 0x1C16CF4
	0x03A77EB4 ADRP X0, 0x6DF000
	0x03A77EB8 LDR X0, [X0 + 0xEC0]
	0x03A77EBC BL 0x1C16CF4
	0x03A77EC0 ADRP X0, 0x6DE000
	0x03A77EC4 LDR X0, [X0 + 0xF80]
	0x03A77EC8 BL 0x1C16CF4
	0x03A77ECC MOVZ W8, 0x1
	0x03A77ED0 STRB W8, [X21 + 0x2EF]
	0x03A77ED4 LDR X0, [X22]
	0x03A77ED8 LDR W8, [X0 + 0xE0]
	0x03A77EDC CBNZ W8, 0x3A77EE4
	0x03A77EE0 BL 0x1C16DFC
	0x03A77EE4 BL 0x3A77DF0
	0x03A77EE8 TBZ X0, 0x0, 0x3A77F2C
	0x03A77EEC ADRP X8, 0x6A4000
	0x03A77EF0 LDR X8, [X8 + 0x8F8]
	0x03A77EF4 ADRP X21, 0x6DE000
	0x03A77EF8 LDR X0, [X8]
	0x03A77EFC LDR W8, [X0 + 0xE0]
	0x03A77F00 LDR X21, [X21 + 0xF80]
	0x03A77F04 CBNZ W8, 0x3A77F0C
	0x03A77F08 BL 0x1C16DFC
	0x03A77F0C LDR X1, [X21]
	0x03A77F10 AND W2, W20, 0x1
	0x03A77F14 MOV X0, X19
	0x03A77F18 LDP X20, X19, [X31 + 0x20]
	0x03A77F1C LDP X22, X21, [X31 + 0x10]
	0x03A77F20 MOV X3, X31
	0x03A77F24 LDR X30, [X31], #0x30
	0x03A77F28 B 0x39E9618
	0x03A77F2C LDP X20, X19, [X31 + 0x20]
	0x03A77F30 LDP X22, X21, [X31 + 0x10]
	0x03A77F34 LDR X30, [X31], #0x30
	0x03A77F38 RET
	0x03A77F3C STR X30, [X31 - 0x40]!
	0x03A77F40 STP X24, X23, [X31 + 0x10]
	0x03A77F44 STP X22, X21, [X31 + 0x20]
	0x03A77F48 STP X20, X19, [X31 + 0x30]
	0x03A77F4C ADRP X21, 0x96B000
	0x03A77F50 ADRP X22, 0x6A4000
	0x03A77F54 LDRB W8, [X21 + 0x2F0]
	0x03A77F58 LDR X22, [X22 + 0x8F8]
	0x03A77F5C MOV X20, X1
	0x03A77F60 MOV X19, X0
	0x03A77F64 TBNZ X8, 0x0, 0x3A77FC4
	0x03A77F68 ADRP X0, 0x6A4000
	0x03A77F6C LDR X0, [X0 + 0x8F8]
	0x03A77F70 BL 0x1C16CF4
	0x03A77F74 ADRP X0, 0x6DF000
	0x03A77F78 LDR X0, [X0 + 0xEC0]
	0x03A77F7C BL 0x1C16CF4
	0x03A77F80 ADRP X0, 0x6A5000
	0x03A77F84 LDR X0, [X0 + 0x8A8]
	0x03A77F88 BL 0x1C16CF4
	0x03A77F8C ADRP X0, 0x6DE000
	0x03A77F90 LDR X0, [X0 + 0xF20]
	0x03A77F94 BL 0x1C16CF4
	0x03A77F98 ADRP X0, 0x6DE000
	0x03A77F9C LDR X0, [X0 + 0xF28]
	0x03A77FA0 BL 0x1C16CF4
	0x03A77FA4 ADRP X0, 0x6DE000
	0x03A77FA8 LDR X0, [X0 + 0xF78]
	0x03A77FAC BL 0x1C16CF4
	0x03A77FB0 ADRP X0, 0x6DE000
	0x03A77FB4 LDR X0, [X0 + 0xF80]
	0x03A77FB8 BL 0x1C16CF4
	0x03A77FBC MOVZ W8, 0x1
	0x03A77FC0 STRB W8, [X21 + 0x2F0]
	0x03A77FC4 LDR X0, [X22]
	0x03A77FC8 ADRP X21, 0x6DE000
	0x03A77FCC ADRP X23, 0x6DF000
	0x03A77FD0 LDRB W24, [X20 + 0x49]
	0x03A77FD4 LDR W8, [X0 + 0xE0]
	0x03A77FD8 LDR X21, [X21 + 0xF80]
	0x03A77FDC LDR X23, [X23 + 0xEC0]
	0x03A77FE0 CBNZ W8, 0x3A77FE8
	0x03A77FE4 BL 0x1C16DFC
	0x03A77FE8 LDR X1, [X21]
	0x03A77FEC CMP W24, 0x0
	0x03A77FF0 CSET W2, NE
	0x03A77FF4 MOV X0, X19
	0x03A77FF8 MOV X3, X31
	0x03A77FFC BL 0x39E9618
	0x03A78000 LDR X0, [X23]
	0x03A78004 LDR W8, [X0 + 0xE0]
	0x03A78008 CBNZ W8, 0x3A78010
	0x03A7800C BL 0x1C16DFC
	0x03A78010 BL 0x3A77DF0
	0x03A78014 TBZ X0, 0x0, 0x3A78070
	0x03A78018 LDR X0, [X22]
	0x03A7801C LDR W8, [X0 + 0xE0]
	0x03A78020 CBNZ W8, 0x3A78028
	0x03A78024 BL 0x1C16DFC
	0x03A78028 ADRP X8, 0x6DD000
	0x03A7802C LDR X8, [X8 + 0xF28]
	0x03A78030 MOV X0, X19
	0x03A78034 MOV W2, W31
	0x03A78038 MOV X3, X31
	0x03A7803C LDR X1, [X8]
	0x03A78040 BL 0x39E9618
	0x03A78044 ADRP X8, 0x6DD000
	0x03A78048 LDR X8, [X8 + 0xF20]
	0x03A7804C MOV X0, X19
	0x03A78050 MOV W2, W31
	0x03A78054 MOV X3, X31
	0x03A78058 LDR X1, [X8]
	0x03A7805C BL 0x39E9618
	0x03A78060 ADRP X8, 0x6DD000
	0x03A78064 LDR X8, [X8 + 0xF78]
	0x03A78068 LDR X1, [X8]
	0x03A7806C B 0x3A78180
	0x03A78070 LDRB W8, [X20 + 0x49]
	0x03A78074 CBZ W8, 0x3A7822C
	0x03A78078 ADRP X23, 0x6A4000
	0x03A7807C LDR X23, [X23 + 0x8A8]
	0x03A78080 LDR X0, [X23]
	0x03A78084 LDR W8, [X0 + 0xE0]
	0x03A78088 CBNZ W8, 0x3A78090
	0x03A7808C BL 0x1C16DFC
	0x03A78090 MOV X0, X31
	0x03A78094 BL 0x3A8AB60
	0x03A78098 CBZ X0, 0x3A780E8
	0x03A7809C LDR W8, [X0 + 0xDC]
	0x03A780A0 CMP W8, 0x1
	0x03A780A4 B.NE 0x3A780E8
	0x03A780A8 LDR X0, [X22]
	0x03A780AC LDR W8, [X0 + 0xE0]
	0x03A780B0 CBNZ W8, 0x3A780B8
	0x03A780B4 BL 0x1C16DFC
	0x03A780B8 ADRP X8, 0x6DD000
	0x03A780BC LDR X8, [X8 + 0xF28]
	0x03A780C0 MOVZ W2, 0x1
	0x03A780C4 MOV X0, X19
	0x03A780C8 MOV X3, X31
	0x03A780CC LDR X1, [X8]
	0x03A780D0 BL 0x39E9618
	0x03A780D4 ADRP X8, 0x6DD000
	0x03A780D8 LDR X8, [X8 + 0xF20]
	0x03A780DC MOV X0, X19
	0x03A780E0 MOV W2, W31
	0x03A780E4 B 0x3A78154
	0x03A780E8 LDRB W8, [X20 + 0x49]
	0x03A780EC CBZ W8, 0x3A7822C
	0x03A780F0 LDR X0, [X23]
	0x03A780F4 LDR W8, [X0 + 0xE0]
	0x03A780F8 CBNZ W8, 0x3A78100
	0x03A780FC BL 0x1C16DFC
	0x03A78100 MOV X0, X31
	0x03A78104 BL 0x3A8AB60
	0x03A78108 CBZ X0, 0x3A781A0
	0x03A7810C LDR W8, [X0 + 0xDC]
	0x03A78110 CMP W8, 0x2
	0x03A78114 B.NE 0x3A781A0
	0x03A78118 LDR X0, [X22]
	0x03A7811C LDR W8, [X0 + 0xE0]
	0x03A78120 CBNZ W8, 0x3A78128
	0x03A78124 BL 0x1C16DFC
	0x03A78128 ADRP X8, 0x6DD000
	0x03A7812C LDR X8, [X8 + 0xF28]
	0x03A78130 MOV X0, X19
	0x03A78134 MOV W2, W31
	0x03A78138 MOV X3, X31
	0x03A7813C LDR X1, [X8]
	0x03A78140 BL 0x39E9618
	0x03A78144 ADRP X8, 0x6DD000
	0x03A78148 LDR X8, [X8 + 0xF20]
	0x03A7814C MOVZ W2, 0x1
	0x03A78150 MOV X0, X19
	0x03A78154 LDR X1, [X8]
	0x03A78158 MOV X3, X31
	0x03A7815C BL 0x39E9618
	0x03A78160 ADRP X8, 0x6DD000
	0x03A78164 LDR X8, [X8 + 0xF78]
	0x03A78168 MOV X0, X19
	0x03A7816C MOV W2, W31
	0x03A78170 LDR X1, [X8]
	0x03A78174 MOV X3, X31
	0x03A78178 BL 0x39E9618
	0x03A7817C LDR X1, [X21]
	0x03A78180 MOV X0, X19
	0x03A78184 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D10
	003 Move [X31+32], D9
	004 Move [X31+40], D8
	005 Move [X31+48], X30
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X23, 0x96C000
	012 Move W8, [X23+737]
	013 Move V8, V0
	014 Move X22, X3
	015 Move X20, X2
	016 Move W21, W1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {48}
	022 Move X0, 0x6E0000
	023 Move X0, [X0+2248]
	024 Call 0x1C17CF4
	025 Move X0, 0x6E0000
	026 Move X0, [X0+376]
	027 Call 0x1C17CF4
	028 Move X0, 0x67D000
	029 Move X0, [X0+2600]
	030 Call 0x1C17CF4
	031 Move X0, 0x67D000
	032 Move X0, [X0+1880]
	033 Call 0x1C17CF4
	034 Move X0, 0x6D8000
	035 Move X0, [X0+48]
	036 Call 0x1C17CF4
	037 Move X0, 0x6D8000
	038 Move X0, [X0+56]
	039 Call 0x1C17CF4
	040 Move X0, 0x6E0000
	041 Move X0, [X0+3800]
	042 Call 0x1C17CF4
	043 Move X0, 0x6E0000
	044 Move X0, [X0+3808]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X23+737], W8
	048 Move X23, 0x67D000
	049 Move X23, [X23+2600]
	050 Move [X31+24], X31
	051 Move TEMP, X21
	052 And TEMP, TEMP, -2147483648
	053 Compare TEMP, -2147483648
	054 JumpIfEqual {67}
	055 Move X8, [X20+56]
	056 Compare X8, 0
	057 JumpIfEqual {255}
	058 Move W8, [X8+24]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X0, X19
	061 Move X1, X31
	062 Call VisibleLight.get_lightType, X0
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move V0, [X22]
	065 Move S1, 2
	066 NotImplemented "Instruction FDIV not yet implemented."
	067 Move X8, 0x67D000
	068 Move X8, [X8+1880]
	069 Move X19, 0x6E0000
	070 Add X1, X31, 12
	071 Move X0, [X8]
	072 Move X19, [X19+3800]
	073 Move [X31+12], W21
	074 Call 0x1C17E04
	075 Move X8, [X19]
	076 Move X1, X0
	077 Move X2, X31
	078 Move X0, X8
	079 Call String.Format, X0, X1
	080 Move X8, [X23]
	081 Move X19, X0
	082 Move W9, [X8+224]
	083 Compare W9, 0
	084 JumpIfNotEqual {87}
	085 Move X0, X8
	086 Call 0x1C17DFC
	087 Move X0, X19
	088 Move X1, X31
	089 Call Debug.LogWarning, X0
	090 Move X19, 0x962000
	091 Move W8, [X19+3674]
	092 Compare W8, 0
	093 JumpIfNotEqual {99}
	094 Move X0, 0x684000
	095 Move X0, [X0+2464]
	096 Call 0x1C17CF4
	097 Move W8, 1
	098 Move [X19+3674], W8
	099 Move X8, 0x684000
	100 Move X8, [X8+2464]
	101 Move X8, [X8]
	102 Move X8, [X8+184]
	103 Move S8, [X8]
	104 Move S10, [X8+4]
	105 Move S9, [X8+8]
	106 Move S3, [X8+12]
	107 Move X0, X19
	108 Move X1, X31
	109 Call VisibleLight.get_lightType, X0
	110 Compare W0, 0
	111 JumpIfEqual {150}
	112 Move X0, X19
	113 Move X1, X31
	114 Call VisibleLight.get_lightType, X0
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X0, X19
	117 Move X1, X31
	118 Call VisibleLight.get_light, X0
	119 Compare X0, 0
	120 JumpIfEqual {255}
	121 Move X1, X31
	122 Call Light.get_shadows, X0
	123 Move X8, 0x6E0000
	124 Move X8, [X8+2248]
	125 Move W22, W0
	126 Move X8, [X8]
	127 Move W9, [X8+224]
	128 Compare W9, 0
	129 JumpIfNotEqual {132}
	130 Move X0, X8
	131 Call 0x1C17DFC
	132 Move W9, 0x7F800000
	133 Move S0, W9
	134 NotImplemented "Instruction FCVTZS not yet implemented."
	135 Move W10, 0x80000000
	136 NotImplemented "Instruction FCMP not yet implemented."
	137 NotImplemented "Instruction CSEL not yet implemented."
	138 NotImplemented "Instruction CMP not yet implemented."
	139 NotImplemented "Instruction CSET not yet implemented."
	140 Move X2, X31
	141 Call AdditionalLightsShadowCasterPass.GetPointLightShadowFrustumFovBiasInDegrees, X0, X1
	142 Move X9, -49856512
	143 Move W8, 0x42B40000
	144 Move V2, [X9+260]
	145 Move S1, W8
	146 Add S0, S0, S1
	147 Move S1, 0.5
	148 Multiply S0, S0, S1
	149 Multiply S0, S0, S2
	150 Move X0, X19
	151 Move X1, X31
	152 Call VisibleLight.get_spotAngle, X0
	153 Move X8, -49860608
	154 Move V1, [X8+260]
	155 Move S2, 0.5
	156 Multiply S0, S0, S2
	157 Multiply S0, S0, S1
	158 Call 0x3EB2E50
	159 Move X0, X19
	160 Move X1, X31
	161 Move V9, V0
	162 Call VisibleLight.get_range, X0
	163 Multiply S9, S9, S0
	164 Move X0, [X23]
	165 Move W8, [X0+224]
	166 Compare W8, 0
	167 JumpIfNotEqual {169}
	168 Call 0x1C17DFC
	169 Move X8, 0x6DF000
	170 Move X8, [X8+3808]
	171 Move X1, X31
	172 Move X0, [X8]
	173 Call Debug.LogWarning, X0
	174 Move S9, W31
	175 Move X0, [X20+56]
	176 Compare X0, 0
	177 JumpIfEqual {255}
	178 Move X22, 0x6D7000
	179 Move X22, [X22+56]
	180 Move W1, W21
	181 Move X2, [X22]
	182 Call List`1<Vector4>.get_Item, X0, X1
	183 Move X0, [X20+56]
	184 Compare X0, 0
	185 JumpIfEqual {255}
	186 Move X2, [X22]
	187 NotImplemented "Instruction FDIV not yet implemented."
	188 NotImplemented "Instruction FNEG not yet implemented."
	189 Move W1, W21
	190 Multiply S8, S9, S0
	191 Call List`1<Vector4>.get_Item, X0, X1
	192 NotImplemented "Instruction FNEG not yet implemented."
	193 Move X0, X19
	194 Move X1, X31
	195 Multiply S10, S9, S0
	196 Call VisibleLight.get_lightType, X0
	197 Move W8, [X20+44]
	198 NotImplemented "Instruction CMP not yet implemented."
	199 Move S9, W31
	200 NotImplemented "Instruction FCSEL not yet implemented."
	201 Compare W8, 0
	202 JumpIfEqual {240}
	203 Move X0, X19
	204 Move X1, X31
	205 Call VisibleLight.get_light, X0
	206 Compare X0, 0
	207 JumpIfEqual {255}
	208 Move X1, X31
	209 Call Light.get_shadows, X0
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move X0, X19
	212 Move X1, X31
	213 Call VisibleLight.get_light, X0
	214 Compare X0, 0
	215 JumpIfEqual {255}
	216 Move X8, 0x6DF000
	217 Move X8, [X8+376]
	218 Add X1, X31, 24
	219 Move X2, [X8]
	220 Call 0x21A5990, X0, X1
	221 Move S0, 2.5
	222 Move TEMP, X0
	223 And TEMP, TEMP, 1
	224 Compare TEMP, 1
	225 JumpIfNotEqual {238}
	226 Move X8, [X31+24]
	227 Compare X8, 0
	228 JumpIfEqual {255}
	229 Move W8, [X8+88]
	230 Move S0, 2.5
	231 Move S1, 3.5
	232 Subtract W8, W8, 1
	233 NotImplemented "Instruction CMP not yet implemented."
	234 NotImplemented "Instruction FCSEL not yet implemented."
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Move S1, 1.5
	237 NotImplemented "Instruction FCSEL not yet implemented."
	238 Multiply S8, S8, S0
	239 Multiply S10, S10, S0
	240 Move S3, W31
	241 Move V0, V8
	242 Move V1, V10
	243 Move V2, V9
	244 Move X20, [X31+80]
	245 Move X19, [X31+88]
	246 Move X22, [X31+64]
	247 Move X21, [X31+72]
	248 Move X30, [X31+48]
	249 Move X23, [X31+56]
	250 Move D9, [X31+32]
	251 Move D8, [X31+40]
	252 Move V10, [X31+16]
	253 Add X31, X31, 96
	254 Return X0
	255 Call 0x1C17F20

Method: System.Void GetScaleAndBiasForLinearDistanceFade(System.Single fadeDistance, System.Single border, out System.Single scale, out System.Single bias)

Disassembly:
	0x03A78188 LDP X22, X21, [X31 + 0x20]
	0x03A7818C LDP X24, X23, [X31 + 0x10]
	0x03A78190 MOV W2, W31
	0x03A78194 MOV X3, X31
	0x03A78198 LDR X30, [X31], #0x40
	0x03A7819C B 0x39E9618
	0x03A781A0 LDRB W8, [X20 + 0x49]
	0x03A781A4 CBZ W8, 0x3A7822C
	0x03A781A8 LDR X0, [X23]
	0x03A781AC LDR W8, [X0 + 0xE0]
	0x03A781B0 CBNZ W8, 0x3A781B8
	0x03A781B4 BL 0x1C16DFC
	0x03A781B8 MOV X0, X31
	0x03A781BC BL 0x3A8AB60
	0x03A781C0 CBZ X0, 0x3A7822C
	0x03A781C4 LDR W8, [X0 + 0xDC]
	0x03A781C8 CMP W8, 0x3
	0x03A781CC B.NE 0x3A7822C
	0x03A781D0 LDR X0, [X22]
	0x03A781D4 LDR W8, [X0 + 0xE0]
	0x03A781D8 CBNZ W8, 0x3A781E0

ISIL:
	001 Move X8, -49864704
	002 Move V2, [X8+3880]
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Move W9, 0xC47A0000
	005 Move W8, 0x447A0000
	006 Move S1, W9
	007 Move [X0], W8
	008 Multiply S0, S0, S1
	009 Move S2, 1
	010 Subtract S1, S2, S1
	011 Multiply S1, S1, S1
	012 Multiply S3, S1, S0
	013 NotImplemented "Instruction FNMUL not yet implemented."
	014 Subtract S0, S0, S3
	015 NotImplemented "Instruction FDIV not yet implemented."
	016 NotImplemented "Instruction FDIV not yet implemented."
	017 Move [X0], S2
	018 Move [X1], S0
	019 Return 

Method: System.Void SetupShadowCasterConstantBuffer(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.VisibleLight shadowLight, UnityEngine.Vector4 shadowBias)

Disassembly:
	0x03A781DC BL 0x1C16DFC
	0x03A781E0 ADRP X8, 0x6DD000
	0x03A781E4 LDR X8, [X8 + 0xF28]
	0x03A781E8 MOV X0, X19
	0x03A781EC MOV W2, W31
	0x03A781F0 MOV X3, X31
	0x03A781F4 LDR X1, [X8]
	0x03A781F8 BL 0x39E9618
	0x03A781FC ADRP X8, 0x6DD000
	0x03A78200 LDR X8, [X8 + 0xF20]
	0x03A78204 MOV X0, X19
	0x03A78208 MOV W2, W31
	0x03A7820C MOV X3, X31
	0x03A78210 LDR X1, [X8]
	0x03A78214 BL 0x39E9618
	0x03A78218 ADRP X8, 0x6DD000
	0x03A7821C LDR X8, [X8 + 0xF78]
	0x03A78220 MOVZ W2, 0x1
	0x03A78224 MOV X0, X19
	0x03A78228 B 0x3A78170
	0x03A7822C LDP X20, X19, [X31 + 0x30]
	0x03A78230 LDP X22, X21, [X31 + 0x20]
	0x03A78234 LDP X24, X23, [X31 + 0x10]
	0x03A78238 LDR X30, [X31], #0x40
	0x03A7823C RET
	0x03A78240 STR D8, [X31 - 0x30]!
	0x03A78244 STP X30, X21, [X31 + 0x10]
	0x03A78248 STP X20, X19, [X31 + 0x20]
	0x03A7824C ADRP X21, 0x96A000
	0x03A78250 LDRB W8, [X21 + 0x2F1]
	0x03A78254 MOV W19, W1
	0x03A78258 MOV X20, X0
	0x03A7825C TBNZ X8, 0x0, 0x3A78280
	0x03A78260 ADRP X0, 0x6DE000
	0x03A78264 LDR X0, [X0 + 0xF00]
	0x03A78268 BL 0x1C16CF4
	0x03A7826C ADRP X0, 0x67B000
	0x03A78270 LDR X0, [X0 + 0x598]
	0x03A78274 BL 0x1C16CF4
	0x03A78278 MOVZ W8, 0x1
	0x03A7827C STRB W8, [X21 + 0x2F1]
	0x03A78280 LDR W8, [X20]
	0x03A78284 CMP W8, W19
	0x03A78288 B.EQ 0x3A78388
	0x03A7828C ADRP X8, 0x6DE000
	0x03A78290 LDP X0, X1, [X20 + 0x10]
	0x03A78294 LDR X8, [X8 + 0xF00]
	0x03A78298 MOV W2, W19
	0x03A7829C LDR X3, [X8]
	0x03A782A0 BL 0x2222228
	0x03A782A4 MOV X1, X31
	0x03A782A8 MOV X19, X0
	0x03A782AC BL 0x3C5BC7C
	0x03A782B0 CMP W0, 0x1
	0x03A782B4 B.EQ 0x3A78388
	0x03A782B8 MOV X0, X19
	0x03A782BC MOV X1, X31
	0x03A782C0 BL 0x3C5BBF0
	0x03A782C4 ADRP X8, 0x67B000
	0x03A782C8 LDR X8, [X8 + 0x598]
	0x03A782CC MOV X19, X0
	0x03A782D0 LDR X8, [X8]
	0x03A782D4 LDR W9, [X8 + 0xE0]
	0x03A782D8 CBNZ W9, 0x3A782E4
	0x03A782DC MOV X0, X8
	0x03A782E0 BL 0x1C16DFC
	0x03A782E4 MOV X0, X19
	0x03A782E8 MOV X1, X31
	0x03A782EC MOV X2, X31
	0x03A782F0 BL 0x3C354F8
	0x03A782F4 TBZ X0, 0x0, 0x3A78388
	0x03A782F8 CBZ X19, 0x3A7839C
	0x03A782FC MOV X0, X19

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+128], D11
	003 Move [X31+136], D10
	004 Move [X31+144], D9
	005 Move [X31+152], D8
	006 Move [X31+160], X30
	007 Move [X31+176], X22
	008 Move [X31+184], X21
	009 Move [X31+192], X20
	010 Move [X31+200], X19
	011 Move X22, 0x96B000
	012 Move X21, 0x6DF000
	013 Move W8, [X22+738]
	014 Move X21, [X21+3776]
	015 Move V8, V3
	016 Move V9, V2
	017 Move V10, V1
	018 Move V11, V0
	019 Move X20, X1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x6DF000
	026 Move X0, [X0+3776]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+738], W8
	030 Move X0, [X21]
	031 NotImplemented "Instruction MOVI not yet implemented."
	032 Move [X31+96], V0
	033 Move [X31+104], V0
	034 Move [X31+64], V0
	035 Move [X31+72], V0
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X19
	041 Move V0, V11
	042 Move V1, V10
	043 Move V2, V9
	044 Move V3, V8
	045 Call ShadowUtils.SetShadowBias, X0, X1
	046 Add X8, X31, 0
	047 Move X0, X20
	048 Move X1, X31
	049 Call VisibleLight.get_localToWorldMatrix, X0
	050 Move V0, [X31]
	051 Move V1, [X31+16]
	052 Move V2, [X31+32]
	053 Move V3, [X31+48]
	054 Add X0, X31, 64
	055 Move W1, 2
	056 Move X2, X31
	057 Move [X31+64], V0
	058 Move [X31+72], V1
	059 Move [X31+96], V2
	060 Move [X31+104], V3
	061 Call Matrix4x4.GetColumn, X0, X1
	062 NotImplemented "Instruction FNEG not yet implemented."
	063 NotImplemented "Instruction FNEG not yet implemented."
	064 NotImplemented "Instruction FNEG not yet implemented."
	065 Move X0, X19
	066 Call ShadowUtils.SetLightDirection, X0, X1
	067 Add X8, X31, 0
	068 Move X0, X20
	069 Move X1, X31
	070 Call VisibleLight.get_localToWorldMatrix, X0
	071 Move V0, [X31]
	072 Move V1, [X31+16]
	073 Move V2, [X31+32]
	074 Move V3, [X31+48]
	075 Add X0, X31, 64
	076 Move W1, 3
	077 Move X2, X31
	078 Move [X31+64], V0
	079 Move [X31+72], V1
	080 Move [X31+96], V2
	081 Move [X31+104], V3
	082 Call Matrix4x4.GetColumn, X0, X1
	083 Move X0, X19
	084 Call ShadowUtils.SetLightPosition, X0, X1
	085 Move X20, [X31+192]
	086 Move X19, [X31+200]
	087 Move X22, [X31+176]
	088 Move X21, [X31+184]
	089 Move X30, [X31+160]
	090 Move D9, [X31+144]
	091 Move D8, [X31+152]
	092 Move D11, [X31+128]
	093 Move D10, [X31+136]
	094 Add X31, X31, 208
	095 Return 

Method: System.Void SetShadowBias(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Vector4 shadowBias)

Disassembly:
	0x03A78300 MOV X1, X31
	0x03A78304 BL 0x3C16B90
	0x03A78308 CBZ W0, 0x3A7838C
	0x03A7830C MOV X0, X19
	0x03A78310 MOV X1, X31
	0x03A78314 BL 0x3C16BCC
	0x03A78318 ADRP X19, 0x961000
	0x03A7831C LDRB W8, [X19 + 0x5AA]
	0x03A78320 MOV V8.16B, V0.16B
	0x03A78324 CBNZ W8, 0x3A7833C
	0x03A78328 ADRP X0, 0x682000
	0x03A7832C LDR X0, [X0 + 0x4B8]
	0x03A78330 BL 0x1C16CF4
	0x03A78334 MOVZ W8, 0x1
	0x03A78338 STRB W8, [X19 + 0x5AA]
	0x03A7833C ADRP X8, 0x682000
	0x03A78340 LDR X8, [X8 + 0x4B8]
	0x03A78344 ADRP X9, 0xFFFFFFFFFD072000
	0x03A78348 LDR V0, [X9 + 0x240]
	0x03A7834C FABS S1, S8
	0x03A78350 LDR X8, [X8]
	0x03A78354 FMOV S2, W31
	0x03A78358 FMAXNM S1, S1, S2
	0x03A7835C FMUL S0, S1, S0
	0x03A78360 LDR X8, [X8 + 0xB8]
	0x03A78364 FMOV S1, 8
	0x03A78368 LDR V3, [X8]
	0x03A7836C FMUL S1, S3, S1
	0x03A78370 FCMP S0, S1
	0x03A78374 FCSEL S0, S0, S1, GT
	0x03A78378 FABD S1, S2, S2
	0x03A7837C FCMP S1, S0
	0x03A78380 CSET W0, PL
	0x03A78384 B 0x3A7838C
	0x03A78388 MOV W0, W31
	0x03A7838C LDP X20, X19, [X31 + 0x20]
	0x03A78390 LDP X30, X21, [X31 + 0x10]
	0x03A78394 LDR V8, [X31], #0x30
	0x03A78398 RET

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x96B000
	010 Move X20, 0x6DD000
	011 Move W8, [X21+739]
	012 Move X20, [X20+32]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x6DD000
	023 Move X0, [X0+32]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+739], W8
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Compare X19, 0
	033 JumpIfEqual {53}
	034 Move X8, [X20]
	035 Move X0, X19
	036 Move V2, V9
	037 Move V3, V8
	038 Move X8, [X8+184]
	039 Move X20, [X31+48]
	040 Move X19, [X31+56]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Move D9, [X31+16]
	044 Move D8, [X31+24]
	045 Move W1, [X8+132]
	046 Move V0, V11
	047 Move V1, V10
	048 Move X2, X31
	049 Move D11, [X31+64]
	050 Move D10, [X31+72]
	051 Call CommandBuffer.SetGlobalVector, X0, X1, X2
	052 Return 
	053 Call 0x1C17F20

Method: System.Void SetLightDirection(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Vector3 lightDirection)

Disassembly:
	0x03A7839C BL 0x1C16F20
	0x03A783A0 LDR W8, [X0]
	0x03A783A4 CBZ W8, 0x3A783B8
	0x03A783A8 CMP W8, 0x2
	0x03A783AC MOVZ W8, 0x6
	0x03A783B0 CSEL W0, W8, W31, EQ
	0x03A783B4 RET
	0x03A783B8 MOVZ W0, 0x1
	0x03A783BC RET
	0x03A783C0 ANDS W31, W0, 0x1
	0x03A783C4 MOVZ W8, 0x8
	0x03A783C8 MOVZ W9, 0x10
	0x03A783CC CSEL W0, W9, W8, NE
	0x03A783D0 RET
	0x03A783D4 AND W8, W0, 0xFFFF
	0x03A783D8 MOV W8, W8
	0x03A783DC AND W8, W8, 0xFF00FF
	0x03A783E0 MOV W8, W8
	0x03A783E4 AND W8, W8, 0xF0F0F0F
	0x03A783E8 MOV W8, W8
	0x03A783EC AND W8, W8, 0x33333333
	0x03A783F0 MOV W8, W8
	0x03A783F4 AND W0, W8, 0x55555555
	0x03A783F8 RET
	0x03A783FC AND W8, W0, 0x55555555
	0x03A78400 MOV W8, W8
	0x03A78404 AND W8, W8, 0x33333333
	0x03A78408 MOV W8, W8
	0x03A7840C AND W8, W8, 0xF0F0F0F
	0x03A78410 MOV W8, W8
	0x03A78414 UBFM W9, W8, 0x8, 0x1F
	0x03A78418 AND W0, W9, 0xFF00
	0x03A7841C BFM W0, W8, 0x0, 0x7
	0x03A78420 RET
	0x03A78424 UBFM X8, X0, 0x20, 0x2F
	0x03A78428 AND W9, W0, 0xFFFF
	0x03A7842C MOV W8, W8
	0x03A78430 MOV W9, W9

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x96B000
	009 Move X20, 0x6DD000
	010 Move W8, [X21+740]
	011 Move X20, [X20+32]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x6DD000
	021 Move X0, [X0+32]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+740], W8
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Compare X19, 0
	031 JumpIfEqual {50}
	032 Move X8, [X20]
	033 Move X0, X19
	034 Move V1, V9
	035 Move V2, V8
	036 Move X8, [X8+184]
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Move D9, [X31+16]
	042 Move D8, [X31+24]
	043 Move W1, [X8+136]
	044 Move S3, W31
	045 Move V0, V10
	046 Move X2, X31
	047 Move V10, [X31+64]
	048 Call CommandBuffer.SetGlobalVector, X0, X1, X2
	049 Return 
	050 Call 0x1C17F20

Method: System.Void SetLightPosition(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Vector3 lightPosition)

Disassembly:
	0x03A78434 AND W8, W8, 0xFF00FF
	0x03A78438 AND W9, W9, 0xFF00FF
	0x03A7843C MOV W8, W8
	0x03A78440 MOV W9, W9
	0x03A78444 AND W8, W8, 0xF0F0F0F
	0x03A78448 AND W9, W9, 0xF0F0F0F
	0x03A7844C MOV W8, W8
	0x03A78450 MOV W9, W9
	0x03A78454 AND W8, W8, 0x33333333
	0x03A78458 AND W9, W9, 0x33333333
	0x03A7845C UBFM W10, W8, 0x1E, 0x1D
	0x03A78460 MOV W9, W9
	0x03A78464 ORR W8, W10, W8, 0x1
	0x03A78468 AND W9, W9, 0x55555555
	0x03A7846C AND W8, W8, 0xAAAAAAAA
	0x03A78470 ORR W0, W8, W9, 0x0
	0x03A78474 RET
	0x03A78478 LDR W9, [X0 + 0x40]
	0x03A7847C LDP V1, V0, [X0 + 0x20]
	0x03A78480 LDR V2, [X0 + 0x1]
	0x03A78484 STR W9, [X8 + 0x30]
	0x03A78488 STP V1, V0, [X8 + 0x10]
	0x03A7848C STR V2, [X8]
	0x03A78490 RET
	0x03A78494 CMP W1, 0x0
	0x03A78498 MOVZ W8, 0x50
	0x03A7849C MOVZ W9, 0x48
	0x03A784A0 CSEL X8, X9, X8, EQ
	0x03A784A4 LDR X0, [X0, X8, LSL]
	0x03A784A8 RET
	0x03A784AC CMP W1, 0x0
	0x03A784B0 MOVZ W8, 0x5C
	0x03A784B4 MOVZ W9, 0x58
	0x03A784B8 CSEL X8, X9, X8, EQ
	0x03A784BC LDR W0, [X0, X8, LSL]
	0x03A784C0 RET
	0x03A784C4 CBZ W1, 0x3A784D0
	0x03A784C8 STR W2, [X0 + 0x5C]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x96B000
	009 Move X20, 0x6DD000
	010 Move W8, [X21+741]
	011 Move X20, [X20+32]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x6DD000
	021 Move X0, [X0+32]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+741], W8
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Compare X19, 0
	031 JumpIfEqual {50}
	032 Move X8, [X20]
	033 Move X0, X19
	034 Move V1, V9
	035 Move V2, V8
	036 Move X8, [X8+184]
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Move D9, [X31+16]
	042 Move D8, [X31+24]
	043 Move W1, [X8+140]
	044 Move S3, 1
	045 Move V0, V10
	046 Move X2, X31
	047 Move V10, [X31+64]
	048 Call CommandBuffer.SetGlobalVector, X0, X1, X2
	049 Return 
	050 Call 0x1C17F20

Method: System.Void SetCameraPosition(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Vector3 worldSpaceCameraPos)

Disassembly:
	0x03A784CC RET
	0x03A784D0 STR W2, [X0 + 0x58]
	0x03A784D4 RET
	0x03A784D8 MOV X1, X31
	0x03A784DC B 0x33BDD8C
	0x03A784E0 SUB X31, X31, 0x90
	0x03A784E4 STR X30, [X31 + 0x40]
	0x03A784E8 STP X26, X25, [X31 + 0x50]
	0x03A784EC STP X24, X23, [X31 + 0x60]
	0x03A784F0 STP X22, X21, [X31 + 0x70]
	0x03A784F4 STP X20, X19, [X31 + 0x80]
	0x03A784F8 ADRP X26, 0x96A000
	0x03A784FC LDRB W8, [X26 + 0x2F2]
	0x03A78500 MOV W21, W6
	0x03A78504 MOV W20, W5
	0x03A78508 MOV W22, W4
	0x03A7850C MOV W23, W3
	0x03A78510 MOV W24, W2
	0x03A78514 MOV W25, W1
	0x03A78518 MOV X19, X0
	0x03A7851C TBNZ X8, 0x0, 0x3A78534
	0x03A78520 ADRP X0, 0x6DE000
	0x03A78524 LDR X0, [X0 + 0xF08]
	0x03A78528 BL 0x1C16CF4
	0x03A7852C MOVZ W8, 0x1
	0x03A78530 STRB W8, [X26 + 0x2F2]
	0x03A78534 MOV X26, X19
	0x03A78538 LDR W8, [X26 + 0x10]!
	0x03A7853C CMP W8, W25
	0x03A78540 B.NE 0x3A78578
	0x03A78544 LDR W8, [X19 + 0x14]
	0x03A78548 CMP W8, W24
	0x03A7854C B.NE 0x3A78578
	0x03A78550 LDR W8, [X19 + 0x1C]
	0x03A78554 CMP W8, W23
	0x03A78558 B.NE 0x3A78578
	0x03A7855C CMP W24, 0x1
	0x03A78560 B.LT 0x3A78678

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x96B000
	009 Move X20, 0x6DD000
	010 Move W8, [X21+742]
	011 Move X20, [X20+32]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x6DD000
	021 Move X0, [X0+32]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+742], W8
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Compare X19, 0
	031 JumpIfEqual {50}
	032 Move X8, [X20]
	033 Move X0, X19
	034 Move V1, V9
	035 Move V2, V8
	036 Move X8, [X8+184]
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Move D9, [X31+16]
	042 Move D8, [X31+24]
	043 Move W1, [X8+52]
	044 Move S3, W31
	045 Move V0, V10
	046 Move X2, X31
	047 Move V10, [X31+64]
	048 Call CommandBuffer.SetGlobalVector, X0, X1, X2
	049 Return 
	050 Call 0x1C17F20

Method: System.Void SetWorldToCameraMatrix(UnityEngine.Rendering.CommandBuffer cmd, UnityEngine.Matrix4x4 viewMatrix)

Disassembly:
	0x03A78564 CMP W25, 0x1
	0x03A78568 B.LT 0x3A78678
	0x03A7856C LDR X8, [X19 + 0x48]
	0x03A78570 CBZ X8, 0x3A78588
	0x03A78574 B 0x3A78678
	0x03A78578 CMP W25, 0x1
	0x03A7857C B.LT 0x3A78678
	0x03A78580 CMP W24, 0x1
	0x03A78584 B.LT 0x3A78678
	0x03A78588 ADRP X8, 0x6DE000
	0x03A7858C LDR X8, [X8 + 0xF08]
	0x03A78590 MOVI V0.2D, 0x0
	0x03A78594 MOVZ W9, 0x1
	0x03A78598 STP W25, W24, [X31 + 0x8]
	0x03A7859C LDR X0, [X8]
	0x03A785A0 STUR V0, [X31 + 0x2C]
	0x03A785A4 STUR V0, [X31 + 0x1C]
	0x03A785A8 STP W9, W23, [X31 + 0x10]
	0x03A785AC STR W31, [X31 + 0x18]
	0x03A785B0 LDR W8, [X0 + 0xE0]
	0x03A785B4 CBNZ W8, 0x3A785BC
	0x03A785B8 BL 0x1C16DFC
	0x03A785BC MOVZ W1, 0x4
	0x03A785C0 MOV W0, W22
	0x03A785C4 BL 0x3A78694
	0x03A785C8 MOV W1, W0
	0x03A785CC ADD X0, X31, 0x8
	0x03A785D0 MOV X2, X31
	0x03A785D4 BL 0x3C2240C
	0x03A785D8 ADD X0, X31, 0x8
	0x03A785DC MOV W1, W31
	0x03A785E0 MOV X2, X31
	0x03A785E4 BL 0x3C226C4
	0x03A785E8 ADD X0, X31, 0x8
	0x03A785EC MOV W1, W31
	0x03A785F0 MOV X2, X31
	0x03A785F4 BL 0x3C22520
	0x03A785F8 ADD X0, X31, 0x8
	0x03A785FC MOV W1, W31
	0x03A78600 MOV X2, X31
	0x03A78604 STR W21, [X31 + 0x28]
	0x03A78608 STR W20, [X31 + 0x30]
	0x03A7860C STR W31, [X31 + 0x38]
	0x03A78610 BL 0x3C22B28
	0x03A78614 ADD X0, X31, 0x8
	0x03A78618 MOV W1, W31
	0x03A7861C MOV X2, X31
	0x03A78620 BL 0x3C22B44
	0x03A78624 ADD X0, X31, 0x8
	0x03A78628 MOV W1, W31
	0x03A7862C MOV X2, X31
	0x03A78630 BL 0x3C22B70
	0x03A78634 ADD X0, X31, 0x8
	0x03A78638 MOV W1, W31
	0x03A7863C MOV X2, X31
	0x03A78640 BL 0x3C22B9C
	0x03A78644 ADD X0, X31, 0x8
	0x03A78648 MOV W1, W31
	0x03A7864C MOV X2, X31
	0x03A78650 BL 0x3C2225C
	0x03A78654 LDR W8, [X31 + 0x38]
	0x03A78658 LDUR V0, [X31 + 0x28]
	0x03A7865C LDUR V1, [X31 + 0x18]
	0x03A78660 LDUR V2, [X31 + 0x8]
	0x03A78664 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 368
	002 Move [X31+320], X29
	003 Move [X31+328], X30
	004 Move [X31+336], X22
	005 Move [X31+344], X21
	006 Move [X31+352], X20
	007 Move [X31+360], X19
	008 Move X22, 0x96B000
	009 Move X21, 0x6DD000
	010 Move W8, [X22+743]
	011 Move X21, [X21+32]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x6DD000
	019 Move X0, [X0+32]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+743], W8
	023 Add X8, X31, 256
	024 Move S0, 1
	025 Move S1, 1
	026 Move S2, -1
	027 Move X0, X31
	028 Call Matrix4x4.Scale, X0
	029 Move V0, [X31+256]
	030 Move V1, [X31+272]
	031 Move V2, [X31+288]
	032 Move V3, [X31+304]
	033 Add X8, X31, 192
	034 Add X0, X31, 128
	035 Move [X31+128], V0
	036 Move [X31+136], V1
	037 Move [X31+160], V2
	038 Move [X31+168], V3
	039 Move V1, [X20+32]
	040 Move V0, [X20+48]
	041 Move V3, [X20]
	042 Move V2, [X20+16]
	043 Add X1, X31, 64
	044 Move X2, X31
	045 Move [X31+96], V1
	046 Move [X31+104], V0
	047 Move [X31+64], V3
	048 Move [X31+72], V2
	049 Call Matrix4x4.op_Multiply, X0, X1
	050 Move V0, [X31+192]
	051 Move V1, [X31+208]
	052 Move V2, [X31+224]
	053 Move V3, [X31+240]
	054 Move X0, [X21]
	055 Move [X31+256], V0
	056 Move [X31+264], V1
	057 Move [X31+288], V2
	058 Move [X31+296], V3
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {64}
	062 Call 0x1C17DFC
	063 Move X0, [X21]
	064 Move X8, [X0+184]
	065 Move V0, [X31+256]
	066 Move V1, [X31+272]
	067 Move V2, [X31+288]
	068 Move V3, [X31+304]
	069 Move W1, [X8+124]
	070 Move [X31+192], V0
	071 Move [X31+200], V1
	072 Move [X31+224], V2
	073 Move [X31+232], V3
	074 Compare X19, 0
	075 JumpIfEqual {96}
	076 Move V0, [X31+192]
	077 Move V1, [X31+208]
	078 Move V2, [X31+224]
	079 Move V3, [X31+240]
	080 Add X2, X31, 0
	081 Move X0, X19
	082 Move X3, X31
	083 Move [X31], V0
	084 Move [X31+8], V1
	085 Move [X31+32], V2
	086 Move [X31+40], V3
	087 Call CommandBuffer.SetGlobalMatrix, X0, X1, X2
	088 Move X20, [X31+352]
	089 Move X19, [X31+360]
	090 Move X22, [X31+336]
	091 Move X21, [X31+344]
	092 Move X29, [X31+320]
	093 Move X30, [X31+328]
	094 Add X31, X31, 368
	095 Return 
	096 Call 0x1C17F20

Method: UnityEngine.RenderTextureDescriptor GetTemporaryShadowTextureDescriptor(System.Int32 width, System.Int32 height, System.Int32 bits)

Disassembly:
	0x03A78668 STR W8, [X26 + 0x30]
	0x03A7866C STP V1, V0, [X26 + 0x10]
	0x03A78670 STR V2, [X26]
	0x03A78674 BL 0x3A78710
	0x03A78678 LDP X20, X19, [X31 + 0x80]
	0x03A7867C LDP X22, X21, [X31 + 0x70]
	0x03A78680 LDP X24, X23, [X31 + 0x60]
	0x03A78684 LDP X26, X25, [X31 + 0x50]
	0x03A78688 LDR X30, [X31 + 0x40]
	0x03A7868C ADD X31, X31, 0x90
	0x03A78690 RET
	0x03A78694 STP X30, X21, [X31 - 0x20]!
	0x03A78698 STP X20, X19, [X31 + 0x10]
	0x03A7869C ADRP X21, 0x96A000
	0x03A786A0 LDRB W8, [X21 + 0x2F5]
	0x03A786A4 MOV W19, W1
	0x03A786A8 MOV W20, W0
	0x03A786AC TBNZ X8, 0x0, 0x3A786C4
	0x03A786B0 ADRP X0, 0x6DE000
	0x03A786B4 LDR X0, [X0 + 0xF08]
	0x03A786B8 BL 0x1C16CF4
	0x03A786BC MOVZ W8, 0x1
	0x03A786C0 STRB W8, [X21 + 0x2F5]
	0x03A786C4 MOV W0, W20
	0x03A786C8 MOV W1, W19
	0x03A786CC MOV X2, X31
	0x03A786D0 BL 0x3C3C4BC
	0x03A786D4 TBZ X0, 0x0, 0x3A786E8
	0x03A786D8 MOV W0, W20
	0x03A786DC LDP X20, X19, [X31 + 0x10]
	0x03A786E0 LDP X30, X21, [X31], #0x20
	0x03A786E4 RET
	0x03A786E8 ADRP X8, 0x6DE000
	0x03A786EC LDR X8, [X8 + 0xF08]
	0x03A786F0 LDR X0, [X8]
	0x03A786F4 LDR W8, [X0 + 0xE0]
	0x03A786F8 CBNZ W8, 0x3A78700
	0x03A786FC BL 0x1C16DFC
	0x03A78700 MOV W0, W19
	0x03A78704 LDP X20, X19, [X31 + 0x10]
	0x03A78708 LDP X30, X21, [X31], #0x20
	0x03A7870C B 0x3A7890C
	0x03A78710 STR X30, [X31 - 0x20]!
	0x03A78714 STP X20, X19, [X31 + 0x10]
	0x03A78718 MOV X20, X0
	0x03A7871C MOV X19, X0
	0x03A78720 LDR X0, [X20 + 0x48]!
	0x03A78724 CBZ X0, 0x3A78730
	0x03A78728 MOV X1, X31
	0x03A7872C BL 0x39D4B1C
	0x03A78730 LDR X0, [X19 + 0x50]
	0x03A78734 CBZ X0, 0x3A78740
	0x03A78738 MOV X1, X31
	0x03A7873C BL 0x39D4B1C
	0x03A78740 MOVI V0.2D, 0xFFFFFFFFFFFFFFFF
	0x03A78744 STP X31, X31, [X20]
	0x03A78748 STR D0, [X19 + 0x58]
	0x03A7874C LDP X20, X19, [X31 + 0x10]
	0x03A78750 LDR X30, [X31], #0x20
	0x03A78754 RET
	0x03A78758 STR X30, [X31 - 0x30]!
	0x03A7875C STP X22, X21, [X31 + 0x10]
	0x03A78760 STP X20, X19, [X31 + 0x20]
	0x03A78764 ADRP X21, 0x96A000
	0x03A78768 LDRB W8, [X21 + 0x2F3]
	0x03A7876C MOV W20, W1
	0x03A78770 MOV X19, X0
	0x03A78774 TBNZ X8, 0x0, 0x3A787A4
	0x03A78778 ADRP X0, 0x6D8000
	0x03A7877C LDR X0, [X0 + 0x9B0]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+80], X24
	004 Move [X31+88], X23
	005 Move [X31+96], X22
	006 Move [X31+104], X21
	007 Move [X31+112], X20
	008 Move [X31+120], X19
	009 Move X24, 0x96B000
	010 Move X23, 0x6DC000
	011 Move X19, X8
	012 Move W8, [X24+744]
	013 Move X23, [X23+144]
	014 Move W22, W2
	015 Move W20, W1
	016 Move W21, W0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x6DC000
	022 Move X0, [X0+144]
	023 Call 0x1C17CF4
	024 Move X0, 0x6DD000
	025 Move X0, [X0+16]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+744], W8
	029 Move X0, [X23]
	030 NotImplemented "Instruction MOVI not yet implemented."
	031 Move [X31+48], W31
	032 Move [X31+16], V0
	033 Move [X31+24], V0
	034 Move [X31], V0
	035 Move X23, 0x6DD000
	036 Move W8, [X0+224]
	037 Move X23, [X23+16]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move W0, W22
	042 Move W1, W31
	043 Move X2, X31
	044 Call GraphicsFormatUtility.GetDepthStencilFormat, X0, X1
	045 Move W4, W0
	046 Add X0, X31, 0
	047 Move W1, W21
	048 Move W2, W20
	049 Move W3, W31
	050 Move X5, X31
	051 Call RenderTextureDescriptor..ctor, X0, X1, X2, X3, X4
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move W0, 3
	058 Call RenderingUtils.SupportsRenderTextureFormat, X0
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {70}
	063 Move X0, X31
	064 Call SystemInfo.get_graphicsDeviceType
	065 NotImplemented "Instruction CMP not yet implemented."
	066 NotImplemented "Instruction CSET not yet implemented."
	067 Move W8, W8
	068 ShiftRight W8, 31
	069 And W8, W8, 0x3FFFFFFF
	070 Move W8, 2
	071 Move [X31+36], W8
	072 Move W8, [X31+48]
	073 Move V1, [X31+16]
	074 Move V0, [X31+32]
	075 Move V2, [X31]
	076 Move X22, [X31+96]
	077 Move X21, [X31+104]
	078 Move [X19+48], W8
	079 Move [X19+16], V1
	080 Move [X19+24], V0
	081 Move [X19], V2
	082 Move X20, [X31+112]
	083 Move X19, [X31+120]
	084 Move X24, [X31+80]
	085 Move X23, [X31+88]
	086 Move X30, [X31+64]
	087 Add X31, X31, 128
	088 Return X0

Method: UnityEngine.RenderTexture GetTemporaryShadowTexture(System.Int32 width, System.Int32 height, System.Int32 bits)

Disassembly:
	0x03A78780 BL 0x1C16CF4
	0x03A78784 ADRP X0, 0x6DE000
	0x03A78788 LDR X0, [X0 + 0xF10]
	0x03A7878C BL 0x1C16CF4
	0x03A78790 ADRP X0, 0x6DE000
	0x03A78794 LDR X0, [X0 + 0xF18]
	0x03A78798 BL 0x1C16CF4
	0x03A7879C MOVZ W8, 0x1
	0x03A787A0 STRB W8, [X21 + 0x2F3]
	0x03A787A4 LDR X8, [X19 + 0x48]
	0x03A787A8 CMP X8, 0x0
	0x03A787AC CSET W21, EQ
	0x03A787B0 CBZ X8, 0x3A787BC
	0x03A787B4 TBNZ X20, 0x0, 0x3A7880C
	0x03A787B8 B 0x3A78864
	0x03A787BC ADRP X8, 0x6D8000
	0x03A787C0 LDR X8, [X8 + 0x9B0]
	0x03A787C4 ADD X22, X19, 0x10
	0x03A787C8 LDR X0, [X8]
	0x03A787CC LDR W8, [X0 + 0xE0]
	0x03A787D0 CBNZ W8, 0x3A787D8
	0x03A787D4 BL 0x1C16DFC
	0x03A787D8 ADRP X8, 0x6DE000
	0x03A787DC LDR X8, [X8 + 0xF18]
	0x03A787E0 FMOV S0, W31
	0x03A787E4 MOVZ W1, 0x1
	0x03A787E8 MOVZ W2, 0x1
	0x03A787EC LDR X5, [X8]
	0x03A787F0 MOVZ W4, 0x1
	0x03A787F4 MOV X0, X22
	0x03A787F8 MOV W3, W31
	0x03A787FC MOV X6, X31
	0x03A78800 BL 0x39D59F4
	0x03A78804 STR X0, [X19 + 0x48]
	0x03A78808 TBZ X20, 0x0, 0x3A78864
	0x03A7880C LDR X8, [X19 + 0x50]
	0x03A78810 CBNZ X8, 0x3A78864
	0x03A78814 ADRP X8, 0x6D8000
	0x03A78818 LDR X8, [X8 + 0x9B0]
	0x03A7881C ADD X20, X19, 0x10
	0x03A78820 LDR X0, [X8]
	0x03A78824 LDR W8, [X0 + 0xE0]
	0x03A78828 CBNZ W8, 0x3A78830
	0x03A7882C BL 0x1C16DFC
	0x03A78830 ADRP X8, 0x6DE000
	0x03A78834 LDR X8, [X8 + 0xF10]
	0x03A78838 FMOV S0, W31
	0x03A7883C MOVZ W1, 0x1

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+72], X23
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move X23, 0x96B000
	009 Move X22, 0x6DF000
	010 Move W8, [X23+745]
	011 Move X22, [X22+3776]
	012 Move W19, W2
	013 Move W20, W1
	014 Move W21, W0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x6DF000
	020 Move X0, [X0+3776]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+745], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Add X8, X31, 8
	030 Move W0, W21
	031 Move W1, W20
	032 Move W2, W19
	033 Call ShadowUtils.GetTemporaryShadowTextureDescriptor, X0, X1, X2
	034 Add X0, X31, 8
	035 Move X1, X31
	036 Call RenderTexture.GetTemporary, X0
	037 Compare X0, 0
	038 JumpIfEqual {59}
	039 Move X8, [X22]
	040 Move X2, X31
	041 Move X19, X0
	042 Move X8, [X8+184]
	043 Move W8, [X8]
	044 Xor W1, W8, 1
	045 Call Texture.set_filterMode, X0, X1
	046 Move W1, 1
	047 Move X0, X19
	048 Move X2, X31
	049 Call Texture.set_wrapMode, X0, X1
	050 Move X0, X19
	051 Move X20, [X31+96]
	052 Move X19, [X31+104]
	053 Move X22, [X31+80]
	054 Move X21, [X31+88]
	055 Move X30, [X31+64]
	056 Move X23, [X31+72]
	057 Add X31, X31, 112
	058 Return X0
	059 Call 0x1C17F20

Method: System.Boolean ShadowRTNeedsReAlloc(UnityEngine.Rendering.RTHandle handle, System.Int32 width, System.Int32 height, System.Int32 bits, System.Int32 anisoLevel, System.Single mipMapBias, System.String name)

Disassembly:
	0x03A78840 MOVZ W2, 0x1
	0x03A78844 LDR X5, [X8]
	0x03A78848 MOVZ W4, 0x1
	0x03A7884C MOV X0, X20
	0x03A78850 MOV W3, W31
	0x03A78854 MOV X6, X31
	0x03A78858 MOVZ W21, 0x1
	0x03A7885C BL 0x39D59F4
	0x03A78860 STR X0, [X19 + 0x50]
	0x03A78864 MOV W0, W21
	0x03A78868 LDP X20, X19, [X31 + 0x20]
	0x03A7886C LDP X22, X21, [X31 + 0x10]
	0x03A78870 LDR X30, [X31], #0x30
	0x03A78874 RET
	0x03A78878 STR X30, [X31 - 0x30]!
	0x03A7887C STP X22, X21, [X31 + 0x10]
	0x03A78880 STP X20, X19, [X31 + 0x20]
	0x03A78884 ADRP X21, 0x96A000
	0x03A78888 ADRP X22, 0x6DC000
	0x03A7888C ADRP X19, 0x6DE000
	0x03A78890 ADRP X20, 0x6DE000
	0x03A78894 LDRB W8, [X21 + 0x2F4]
	0x03A78898 LDR X22, [X22 + 0xC80]
	0x03A7889C LDR X19, [X19 + 0xF20]
	0x03A788A0 LDR X20, [X20 + 0xF08]
	0x03A788A4 TBNZ X8, 0x0, 0x3A788D4
	0x03A788A8 ADRP X0, 0x6DC000
	0x03A788AC LDR X0, [X0 + 0xC80]
	0x03A788B0 BL 0x1C16CF4
	0x03A788B4 ADRP X0, 0x6DE000
	0x03A788B8 LDR X0, [X0 + 0xF08]
	0x03A788BC BL 0x1C16CF4
	0x03A788C0 ADRP X0, 0x6DE000
	0x03A788C4 LDR X0, [X0 + 0xF20]
	0x03A788C8 BL 0x1C16CF4
	0x03A788CC MOVZ W8, 0x1
	0x03A788D0 STRB W8, [X21 + 0x2F4]
	0x03A788D4 LDR X0, [X22]
	0x03A788D8 MOVZ W1, 0x4
	0x03A788DC BL 0x1C16D6C
	0x03A788E0 LDR X1, [X19]
	0x03A788E4 MOV X2, X31
	0x03A788E8 MOV X19, X0
	0x03A788EC BL 0x32C5BD8
	0x03A788F0 LDR X8, [X20]
	0x03A788F4 LDP X22, X21, [X31 + 0x10]
	0x03A788F8 LDR X8, [X8 + 0xB8]
	0x03A788FC STR X19, [X8]
	0x03A78900 LDP X20, X19, [X31 + 0x20]
	0x03A78904 LDR X30, [X31], #0x30
	0x03A78908 RET
	0x03A7890C STP X30, X21, [X31 - 0x20]!
	0x03A78910 STP X20, X19, [X31 + 0x10]
	0x03A78914 ADRP X20, 0x96A000
	0x03A78918 LDRB W8, [X20 + 0x2F6]
	0x03A7891C MOV W19, W0
	0x03A78920 TBNZ X8, 0x0, 0x3A78938
	0x03A78924 ADRP X0, 0x6DE000
	0x03A78928 LDR X0, [X0 + 0xF08]
	0x03A7892C BL 0x1C16CF4
	0x03A78930 MOVZ W8, 0x1
	0x03A78934 STRB W8, [X20 + 0x2F6]
	0x03A78938 ADRP X21, 0x6DE000
	0x03A7893C LDR X21, [X21 + 0xF08]
	0x03A78940 MOV X20, X31
	0x03A78944 LDR X0, [X21]
	0x03A78948 LDR W8, [X0 + 0xE0]
	0x03A7894C CBNZ W8, 0x3A78958
	0x03A78950 BL 0x1C16DFC
	0x03A78954 LDR X0, [X21]
	0x03A78958 LDR X8, [X0 + 0xB8]
	0x03A7895C LDR X8, [X8]
	0x03A78960 CBZ X8, 0x3A78A00
	0x03A78964 LDRSW X9, [X8 + 0x18]
	0x03A78968 CMP X20, X9
	0x03A7896C B.GE 0x3A789B8
	0x03A78970 LDR W9, [X0 + 0xE0]
	0x03A78974 CBNZ W9, 0x3A7898C
	0x03A78978 BL 0x1C16DFC
	0x03A7897C LDR X8, [X21]
	0x03A78980 LDR X8, [X8 + 0xB8]
	0x03A78984 LDR X8, [X8]
	0x03A78988 CBZ X8, 0x3A78A00
	0x03A7898C LDR W9, [X8 + 0x18]
	0x03A78990 CMP X20, X9
	0x03A78994 B.CS 0x3A78A04
	0x03A78998 ADD X8, X8, X20, 0x2, LSL
	0x03A7899C LDR W0, [X8 + 0x20]
	0x03A789A0 MOV W1, W19
	0x03A789A4 MOV X2, X31
	0x03A789A8 BL 0x3C3C4BC
	0x03A789AC TBNZ X0, 0x0, 0x3A789C0
	0x03A789B0 ADD X20, X20, 0x1
	0x03A789B4 B 0x3A78944
	0x03A789B8 MOVZ W0, 0x3B
	0x03A789BC B 0x3A789F4
	0x03A789C0 LDR X0, [X21]
	0x03A789C4 LDR W8, [X0 + 0xE0]
	0x03A789C8 CBNZ W8, 0x3A789D4
	0x03A789CC BL 0x1C16DFC
	0x03A789D0 LDR X0, [X21]
	0x03A789D4 LDR X8, [X0 + 0xB8]
	0x03A789D8 LDR X8, [X8]
	0x03A789DC CBZ X8, 0x3A78A00
	0x03A789E0 LDR W9, [X8 + 0x18]
	0x03A789E4 CMP W20, W9
	0x03A789E8 B.CS 0x3A78A04
	0x03A789EC ADD X8, X8, X20, 0x2, LSL
	0x03A789F0 LDR W0, [X8 + 0x20]
	0x03A789F4 LDP X20, X19, [X31 + 0x10]
	0x03A789F8 LDP X30, X21, [X31], #0x20
	0x03A789FC RET
	0x03A78A00 BL 0x1C16F20
	0x03A78A04 BL 0x1C16F28
	0x03A78A08 SUB X31, X31, 0xD0
	0x03A78A0C STR D8, [X31 + 0x90]
	0x03A78A10 STP X30, X23, [X31 + 0xA0]
	0x03A78A14 STP X22, X21, [X31 + 0xB0]
	0x03A78A18 STP X20, X19, [X31 + 0xC0]
	0x03A78A1C ADRP X21, 0x96A000
	0x03A78A20 LDRB W9, [X21 + 0x2F7]
	0x03A78A24 MOV X20, X0
	0x03A78A28 MOV X19, X8
	0x03A78A2C TBNZ X9, 0x0, 0x3A78A44
	0x03A78A30 ADRP X0, 0x6DE000
	0x03A78A34 LDR X0, [X0 + 0x608]
	0x03A78A38 BL 0x1C16CF4
	0x03A78A3C MOVZ W8, 0x1
	0x03A78A40 STRB W8, [X21 + 0x2F7]
	0x03A78A44 ADRP X21, 0x960000
	0x03A78A48 LDRB W8, [X21 + 0xAC0]
	0x03A78A4C CBNZ W8, 0x3A78A64
	0x03A78A50 ADRP X0, 0x67F000
	0x03A78A54 LDR X0, [X0 + 0x270]
	0x03A78A58 BL 0x1C16CF4
	0x03A78A5C MOVZ W8, 0x1
	0x03A78A60 STRB W8, [X21 + 0xAC0]
	0x03A78A64 ADRP X8, 0x67F000
	0x03A78A68 LDR X8, [X8 + 0x270]
	0x03A78A6C MOV X0, X20
	0x03A78A70 MOV X1, X31
	0x03A78A74 LDR X8, [X8]
	0x03A78A78 LDR X8, [X8 + 0xB8]
	0x03A78A7C LDP V1, V0, [X8 + 0x60]
	0x03A78A80 LDP V2, V3, [X8 + 0x40]
	0x03A78A84 STP V1, V0, [X31 + 0x70]
	0x03A78A88 STP V2, V3, [X31 + 0x50]
	0x03A78A8C BL 0x3A8F3D4
	0x03A78A90 TBZ X0, 0x0, 0x3A78B10
	0x03A78A94 ADRP X23, 0x6DE000
	0x03A78A98 LDR W22, [X20 + 0x204]
	0x03A78A9C LDR X23, [X23 + 0x608]
	0x03A78AA0 MOV X0, X31
	0x03A78AA4 BL 0x3C3C88C
	0x03A78AA8 MOV W21, W0

ISIL:
	001 Subtract X31, X31, 464
	002 Move [X31+384], D8
	003 Move [X31+392], X29
	004 Move [X31+400], X30
	005 Move [X31+408], X25
	006 Move [X31+416], X24
	007 Move [X31+424], X23
	008 Move [X31+432], X22
	009 Move [X31+440], X21
	010 Move [X31+448], X20
	011 Move [X31+456], X19
	012 Move X25, 0x96B000
	013 Move W8, [X25+746]
	014 Move X20, X5
	015 Move V8, V0
	016 Move W21, W4
	017 Move W22, W3
	018 Move W23, W2
	019 Move W24, W1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0x67C000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move X0, 0x6DF000
	029 Move X0, [X0+2968]
	030 Call 0x1C17CF4
	031 Move X0, 0x6DD000
	032 Move X0, [X0+16]
	033 Call 0x1C17CF4
	034 Move X0, 0x6DF000
	035 Move X0, [X0+3776]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X25+746], W8
	039 NotImplemented "Instruction MOVI not yet implemented."
	040 Move [X31+368], W31
	041 Move [X31+304], X31
	042 Move [X31+336], V0
	043 Move [X31+344], V0
	044 Move [X31+20], V0
	045 Move [X31+272], V0
	046 Move [X31+280], V0
	047 Move [X31+240], V0
	048 Move [X31+248], V0
	049 Move [X31+208], V0
	050 Move [X31+216], V0
	051 Move [X31+12], V0
	052 Compare X19, 0
	053 JumpIfEqual {94}
	054 Move X8, 0x67C000
	055 Move X8, [X8+1432]
	056 Move X25, [X19+24]
	057 Move X0, [X8]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X25
	063 Move X1, X31
	064 Move X2, X31
	065 Call Object.op_Equality, X0, X1
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {94}
	070 Move X25, 0x6DF000
	071 Move X25, [X25+3776]
	072 Move X0, [X25]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Add X8, X31, 320
	078 Move W0, W24
	079 Move W1, W23
	080 Move W2, W22
	081 Call ShadowUtils.GetTemporaryShadowTextureDescriptor, X0, X1, X2
	082 Move X0, [X19+24]
	083 Compare X0, 0
	084 JumpIfEqual {190}
	085 Move X8, [X25]
	086 Move X1, X31
	087 Move X8, [X8+184]
	088 Move W22, [X8]
	089 Call Texture.get_filterMode, X0
	090 Compare W22, 0
	091 JumpIfEqual {108}
	092 Compare W0, 0
	093 JumpIfEqual {109}
	094 Move W0, 1
	095 Move X20, [X31+448]
	096 Move X19, [X31+456]
	097 Move X22, [X31+432]
	098 Move X21, [X31+440]
	099 Move X24, [X31+416]
	100 Move X23, [X31+424]
	101 Move X30, [X31+400]
	102 Move X25, [X31+408]
	103 Move X29, [X31+392]
	104 Move V8, [X31+384]
	105 And W0, W0, 1
	106 Add X31, X31, 464
	107 Return X0
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move V0, [X31+320]
	110 Move V1, [X31+336]
	111 Move V2, [X31+22]
	112 Move W8, [X31+368]
	113 Move X0, [X25]
	114 Move [X31+64], V0
	115 Move [X31+72], V1
	116 Move [X31+6], V2
	117 Move [X31+112], W8
	118 Move W8, [X0+224]
	119 Compare W8, 0
	120 JumpIfNotEqual {123}
	121 Call 0x1C17DFC
	122 Move X0, [X25]
	123 Move X8, [X0+184]
	124 Move W8, [X8]
	125 Compare W8, 0
	126 JumpIfEqual {137}
	127 Move V0, [X31+64]
	128 Move V1, [X31+80]
	129 Move V2, [X31+6]
	130 Move W9, [X31+112]
	131 Move W22, W31
	132 Add X8, X31, 128
	133 Move [X31+128], V0
	134 Move [X31+136], V1
	135 Move [X31+10], V2
	136 Move [X31+176], W9
	137 Move V0, [X31+64]
	138 Move V1, [X31+80]
	139 Move V2, [X31+6]
	140 Move W9, [X31+112]
	141 Add X8, X31, 128
	142 Move [X31+128], V0
	143 Move [X31+136], V1
	144 Move [X31+10], V2
	145 Move [X31+176], W9
	146 Move W22, 1
	147 Move V0, [X8]
	148 Move V1, [X8+16]
	149 Move W9, [X8+48]
	150 Move V2, [X8+2]
	151 Move X8, 0x6DF000
	152 Move X8, [X8+2968]
	153 Move [X31+112], W9
	154 Move [X31+80], V1
	155 Move [X31+88], V2
	156 Move [X31+4], V0
	157 Move X0, [X8]
	158 Move W8, [X0+224]
	159 Compare W8, 0
	160 JumpIfNotEqual {162}
	161 Call 0x1C17DFC
	162 Move V0, [X31+64]
	163 Move V1, [X31+80]
	164 Move W8, [X31+112]
	165 Move V2, [X31+6]
	166 Add X0, X31, 0
	167 Move [X31], V0
	168 Move [X31+8], V1
	169 Move [X31+48], W8
	170 Add X8, X31, 192
	171 Move W4, 1
	172 Move W1, W31
	173 Move W2, W21
	174 Move V0, V8
	175 Move W3, W22
	176 Move X5, X20
	177 Move [X31+2], V2
	178 Call RTHandleResourcePool.CreateTextureDesc, X0, X1, X2, V0, X3, X4, X5
	179 Move X8, 0x6DD000
	180 Move X8, [X8+16]
	181 Move X0, [X8]
	182 Move W8, [X0+224]
	183 Compare W8, 0
	184 JumpIfNotEqual {186}
	185 Call 0x1C17DFC
	186 Add X1, X31, 192
	187 Move X0, X19
	188 Move W2, W31
	189 Call RenderingUtils.RTHandleNeedsReAlloc, X0, X1, X2
	190 Call 0x1C17F20

Method: UnityEngine.Rendering.RTHandle AllocShadowRT(System.Int32 width, System.Int32 height, System.Int32 bits, System.Int32 anisoLevel, System.Single mipMapBias, System.String name)

Disassembly:
	0x03A78AAC LDR X0, [X23]
	0x03A78AB0 LDR V0, [X20 + 0xD8]
	0x03A78AB4 LDR V1, [X20 + 0x1F0]
	0x03A78AB8 LDR W8, [X0 + 0xE0]
	0x03A78ABC UNIMPLEMENTED
	0x03A78AC0 STR V1, [X31]
	0x03A78AC4 CBNZ W8, 0x3A78ACC
	0x03A78AC8 BL 0x1C16DFC
	0x03A78ACC ADD W0, W21, W22
	0x03A78AD0 BL 0x3A78B38
	0x03A78AD4 MOVI V2.2S, 0x40, 0x18
	0x03A78AD8 MOV V0.S[1], V1.S[0]
	0x03A78ADC LDR V1, [X31]
	0x03A78AE0 ADD X8, X31, 0x10
	0x03A78AE4 MOV X0, X31
	0x00000000 INVALID
	0x00000000 INVALID
	0x00000000 INVALID
	0x03A78AF4 MOV S1, V0.S[1]
	0x03A78AF8 FMOV S2, W31
	0x03A78AFC BL 0x3C28344
	0x03A78B00 LDP V0, V1, [X31 + 0x10]
	0x03A78B04 LDP V2, V3, [X31 + 0x30]
	0x03A78B08 STP V0, V1, [X31 + 0x50]
	0x03A78B0C STP V2, V3, [X31 + 0x70]
	0x03A78B10 LDP V1, V0, [X31 + 0x70]
	0x03A78B14 LDP V3, V2, [X31 + 0x50]
	0x03A78B18 LDP X22, X21, [X31 + 0xB0]
	0x03A78B1C LDP X30, X23, [X31 + 0xA0]
	0x03A78B20 STP V1, V0, [X19 + 0x20]
	0x03A78B24 STP V3, V2, [X19]
	0x03A78B28 LDP X20, X19, [X31 + 0xC0]
	0x03A78B2C LDR V8, [X31 + 0x90]
	0x03A78B30 ADD X31, X31, 0xD0
	0x03A78B34 RET
	0x03A78B38 STR D8, [X31 - 0x20]!
	0x03A78B3C STP X30, X19, [X31 + 0x10]
	0x03A78B40 AND W8, W0, 0x3FF
	0x03A78B44 ADD W19, W8, 0x1
	0x03A78B48 MOVZ W1, 0x2
	0x03A78B4C MOV W0, W19
	0x03A78B50 MOV X2, X31
	0x03A78B54 BL 0x39EADF4
	0x03A78B58 MOVZ W1, 0x3
	0x03A78B5C MOV W0, W19
	0x03A78B60 MOV X2, X31
	0x03A78B64 MOV V8.16B, V0.16B
	0x03A78B68 BL 0x39EADF4
	0x03A78B6C LDP X30, X19, [X31 + 0x10]
	0x03A78B70 FMOV S2, -0.5
	0x03A78B74 FADD S1, S0, S2
	0x03A78B78 FADD S0, S8, S2
	0x03A78B7C LDR V8, [X31], #0x20
	0x03A78B80 RET
	0x03A78B84 STR D10, [X31 - 0x50]!
	0x03A78B88 STP D9, D8, [X31 + 0x10]
	0x03A78B8C STP X30, X23, [X31 + 0x20]
	0x03A78B90 STP X22, X21, [X31 + 0x30]
	0x03A78B94 STP X20, X19, [X31 + 0x40]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+80], X24
	004 Move [X31+88], X23
	005 Move [X31+96], X22
	006 Move [X31+104], X21
	007 Move [X31+112], X20
	008 Move [X31+120], X19
	009 Move X24, 0x96B000
	010 Move X23, 0x6DF000
	011 Move W8, [X24+747]
	012 Move X23, [X23+3776]
	013 Move X19, X4
	014 Move W20, W2
	015 Move W21, W1
	016 Move W22, W0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x6D9000
	022 Move X0, [X0+2480]
	023 Call 0x1C17CF4
	024 Move X0, 0x6DF000
	025 Move X0, [X0+3776]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+747], W8
	029 Move X0, [X23]
	030 NotImplemented "Instruction MOVI not yet implemented."
	031 Move [X31+48], W31
	032 Move [X31+16], V0
	033 Move [X31+24], V0
	034 Move [X31], V0
	035 Move X24, 0x6D9000
	036 Move W8, [X0+224]
	037 Move X24, [X24+2480]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Add X8, X31, 0
	042 Move W0, W22
	043 Move W1, W21
	044 Move W2, W20
	045 Call ShadowUtils.GetTemporaryShadowTextureDescriptor, X0, X1, X2
	046 Move X8, [X23]
	047 Move X0, [X24]
	048 Move X8, [X8+184]
	049 Move W9, [X0+224]
	050 Move W20, [X8]
	051 Compare W9, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Xor W1, W20, 1
	055 Add X0, X31, 0
	056 Move S0, W31
	057 Move W2, 1
	058 Move W3, 1
	059 Move W4, 1
	060 Move X5, X19
	061 Move X6, X31
	062 Call RTHandles.Alloc, X0, X1, X2, X3, X4, V0, X5
	063 Move X20, [X31+112]
	064 Move X19, [X31+120]
	065 Move X22, [X31+96]
	066 Move X21, [X31+104]
	067 Move X24, [X31+80]
	068 Move X23, [X31+88]
	069 Move X30, [X31+64]
	070 Add X31, X31, 128
	071 Return X0

Method: System.Boolean ShadowRTReAllocateIfNeeded(ref UnityEngine.Rendering.RTHandle handle, System.Int32 width, System.Int32 height, System.Int32 bits, System.Int32 anisoLevel = 1, System.Single mipMapBias = 0, System.String name = )

Disassembly:
	0x03A78B98 ADRP X19, 0x96A000
	0x03A78B9C LDRB W8, [X19 + 0x2F8]
	0x03A78BA0 MOV V8.16B, V0.16B
	0x03A78BA4 TBNZ X8, 0x0, 0x3A78BBC
	0x03A78BA8 ADRP X0, 0x6DE000
	0x03A78BAC LDR X0, [X0 + 0x608]
	0x03A78BB0 BL 0x1C16CF4
	0x03A78BB4 MOVZ W8, 0x1
	0x03A78BB8 STRB W8, [X19 + 0x2F8]
	0x03A78BBC ADRP X8, 0xFFFFFFFFFD072000
	0x03A78BC0 ADRP X20, 0x6DE000
	0x03A78BC4 LDR V10, [X8 + 0x358]
	0x03A78BC8 LDR X20, [X20 + 0x608]
	0x03A78BCC MOV X21, X31
	0x03A78BD0 MOV X22, X31
	0x03A78BD4 FMOV S9, W31
	0x03A78BD8 MOV X0, X31
	0x03A78BDC BL 0x3C3C88C
	0x03A78BE0 LDR X8, [X20]
	0x03A78BE4 MOV W19, W0
	0x03A78BE8 LDR W9, [X8 + 0xE0]
	0x03A78BEC CBNZ W9, 0x3A78BF8
	0x03A78BF0 MOV X0, X8
	0x03A78BF4 BL 0x1C16DFC
	0x03A78BF8 MOV W0, W19
	0x03A78BFC BL 0x3A78B38
	0x03A78C00 LDR X19, [X20]
	0x03A78C04 LDR X8, [X19 + 0xB8]
	0x03A78C08 LDR X9, [X8]
	0x03A78C0C CBZ X9, 0x3A78CE0
	0x03A78C10 LDR W10, [X9 + 0x18]
	0x03A78C14 CMP X22, X10
	0x03A78C18 B.CS 0x3A78CE4
	0x03A78C1C ADD X9, X9, X21
	0x03A78C20 LDP S2, S3, [X9 + 0x20]
	0x03A78C24 FMUL S0, S0, S8
	0x03A78C28 FMUL S1, S1, S8
	0x03A78C2C LDR X23, [X8 + 0x8]
	0x03A78C30 FSUB S1, S3, S1
	0x03A78C34 FSUB S0, S2, S0
	0x03A78C38 FMUL S0, S0, S0
	0x03A78C3C FMUL S1, S1, S1
	0x03A78C40 FADD S0, S0, S1
	0x03A78C44 FMUL S0, S0, S10
	0x03A78C48 BL 0x3EB1E70
	0x03A78C4C CBZ X23, 0x3A78CE0
	0x03A78C50 LDR W8, [X23 + 0x18]
	0x03A78C54 CMP X22, X8
	0x03A78C58 B.CS 0x3A78CE4
	0x03A78C5C ADD X8, X23, X22, 0x2, LSL
	0x03A78C60 ADD X22, X22, 0x1
	0x03A78C64 FADD S9, S9, S0
	0x03A78C68 CMP X22, 0x9
	0x03A78C6C ADD X21, X21, 0x8
	0x03A78C70 STR S0, [X8 + 0x20]
	0x03A78C74 B.NE 0x3A78BD8
	0x03A78C78 MOV X21, X31
	0x03A78C7C LDR W8, [X19 + 0xE0]
	0x03A78C80 CBNZ W8, 0x3A78C90
	0x03A78C84 MOV X0, X19

ISIL:
	001 Move [X31-80], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X25, 0x96B000
	012 Move X26, 0x6DF000
	013 Move W8, [X25+748]
	014 Move X26, [X26+3776]
	015 Move X19, X5
	016 Move V8, V0
	017 Move W24, W4
	018 Move W21, W3
	019 Move W22, W2
	020 Move W23, W1
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x6DF000
	027 Move X0, [X0+3776]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X25+748], W8
	031 Move X0, [X26]
	032 Move X25, [X20]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X25
	038 Move W1, W23
	039 Move W2, W22
	040 Move W3, W21
	041 Move W4, W24
	042 Move V0, V8
	043 Move X5, X19
	044 Call ShadowUtils.ShadowRTNeedsReAlloc, X0, X1, X2, X3, X4, V0, X5
	045 Move W24, W0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {66}
	050 Move X0, [X20]
	051 Compare X0, 0
	052 JumpIfEqual {55}
	053 Move X1, X31
	054 Call RTHandle.Release, X0
	055 Move X0, [X26]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move W0, W23
	061 Move W1, W22
	062 Move W2, W21
	063 Move X4, X19
	064 Call ShadowUtils.AllocShadowRT, X0, X1, X2, X3, V0, X4
	065 Move [X20], X0
	066 And W0, W24, 1
	067 Move X20, [X31+64]
	068 Move X19, [X31+72]
	069 Move X22, [X31+48]
	070 Move X21, [X31+56]
	071 Move X24, [X31+32]
	072 Move X23, [X31+40]
	073 Move X26, [X31+16]
	074 Move X25, [X31+24]
	075 Move X30, [X31+8]
	076 Move V8, [X31+80]
	077 Return X0

Method: UnityEngine.Matrix4x4 GetShadowTransform(UnityEngine.Matrix4x4 proj, UnityEngine.Matrix4x4 view)

Disassembly:
	0x03A7768C LDR X23, [X23 + 0x90]
	0x03A77690 MOV W22, W2
	0x03A77694 MOV W20, W1
	0x03A77698 MOV W21, W0
	0x03A7769C TBNZ X8, 0x0, 0x3A776C0
	0x03A776A0 ADRP X0, 0x6DC000
	0x03A776A4 LDR X0, [X0 + 0x90]
	0x03A776A8 BL 0x1C16CF4
	0x03A776AC ADRP X0, 0x6DD000
	0x03A776B0 LDR X0, [X0 + 0x10]
	0x03A776B4 BL 0x1C16CF4
	0x03A776B8 MOVZ W8, 0x1
	0x03A776BC STRB W8, [X24 + 0x2E8]
	0x03A776C0 LDR X0, [X23]
	0x03A776C4 MOVI V0.2D, 0x0
	0x03A776C8 STR W31, [X31 + 0x30]
	0x03A776CC STP V0, V0, [X31 + 0x10]
	0x03A776D0 STR V0, [X31]
	0x03A776D4 ADRP X23, 0x6DD000
	0x03A776D8 LDR W8, [X0 + 0xE0]
	0x03A776DC LDR X23, [X23 + 0x10]
	0x03A776E0 CBNZ W8, 0x3A776E8
	0x03A776E4 BL 0x1C16DFC
	0x03A776E8 MOV W0, W22
	0x03A776EC MOV W1, W31
	0x03A776F0 MOV X2, X31
	0x03A776F4 BL 0x3C6176C
	0x03A776F8 MOV W4, W0
	0x03A776FC ADD X0, X31, 0x0
	0x03A77700 MOV W1, W21
	0x03A77704 MOV W2, W20
	0x03A77708 MOV W3, W31
	0x03A7770C MOV X5, X31
	0x03A77710 BL 0x3C221A0
	0x03A77714 LDR X0, [X23]
	0x03A77718 LDR W8, [X0 + 0xE0]
	0x03A7771C CBNZ W8, 0x3A77724
	0x03A77720 BL 0x1C16DFC
	0x03A77724 MOVZ W0, 0x3
	0x03A77728 BL 0x3A7162C
	0x03A7772C TBZ X0, 0x0, 0x3A77748
	0x03A77730 MOV X0, X31
	0x03A77734 BL 0x3C3BACC
	0x03A77738 CMP W0, 0x8
	0x03A7773C CSET W8, EQ
	0x03A77740 UBFM W8, W8, 0x1F, 0x1E
	0x03A77744 B 0x3A7774C
	0x03A77748 MOVZ W8, 0x2
	0x03A7774C STR W8, [X31 + 0x24]
	0x03A77750 LDR W8, [X31 + 0x30]
	0x03A77754 LDP V1, V0, [X31 + 0x10]
	0x03A77758 LDR V2, [X31]
	0x03A7775C LDP X22, X21, [X31 + 0x60]
	0x03A77760 STR W8, [X19 + 0x30]
	0x03A77764 STP V1, V0, [X19 + 0x10]
	0x03A77768 STR V2, [X19]
	0x03A7776C LDP X20, X19, [X31 + 0x70]
	0x03A77770 LDP X24, X23, [X31 + 0x50]
	0x03A77774 LDR X30, [X31 + 0x40]
	0x03A77778 ADD X31, X31, 0x80
	0x03A7777C RET
	0x03A77780 SUB X31, X31, 0x70
	0x03A77784 STP X30, X23, [X31 + 0x40]
	0x03A77788 STP X22, X21, [X31 + 0x50]
	0x03A7778C STP X20, X19, [X31 + 0x60]
	0x03A77790 ADRP X23, 0x96B000
	0x03A77794 ADRP X22, 0x6DF000
	0x03A77798 LDRB W8, [X23 + 0x2E9]
	0x03A7779C LDR X22, [X22 + 0xEC0]
	0x03A777A0 MOV W19, W2
	0x03A777A4 MOV W20, W1
	0x03A777A8 MOV W21, W0
	0x03A777AC TBNZ X8, 0x0, 0x3A777C4
	0x03A777B0 ADRP X0, 0x6DF000
	0x03A777B4 LDR X0, [X0 + 0xEC0]
	0x03A777B8 BL 0x1C16CF4
	0x03A777BC MOVZ W8, 0x1
	0x03A777C0 STRB W8, [X23 + 0x2E9]
	0x03A777C4 LDR X0, [X22]
	0x03A777C8 LDR W8, [X0 + 0xE0]
	0x03A777CC CBNZ W8, 0x3A777D4
	0x03A777D0 BL 0x1C16DFC
	0x03A777D4 ADD X8, X31, 0x8
	0x03A777D8 MOV W0, W21
	0x03A777DC MOV W1, W20
	0x03A777E0 MOV W2, W19
	0x03A777E4 BL 0x3A77668
	0x03A777E8 ADD X0, X31, 0x8
	0x03A777EC MOV X1, X31
	0x03A777F0 BL 0x3C22068
	0x03A777F4 CBZ X0, 0x3A7783C
	0x03A777F8 LDR X8, [X22]
	0x03A777FC MOV X2, X31

ISIL:
	001 Subtract X31, X31, 464
	002 Move [X31+416], X29
	003 Move [X31+432], X30
	004 Move [X31+440], X21
	005 Move [X31+448], X20
	006 Move [X31+456], X19
	007 Move X21, X0
	008 Move X0, X31
	009 Move X20, X1
	010 Move X19, X8
	011 Move [X31+336], X31
	012 Move [X31+344], X31
	013 Move [X31+320], X31
	014 Move [X31+328], X31
	015 Call SystemInfo.get_usesReversedZBuffer
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfNotEqual {32}
	020 Move V0, [X21+8]
	021 Move V1, [X21+24]
	022 Move V2, [X21+40]
	023 Move V3, [X21+56]
	024 NotImplemented "Instruction FNEG not yet implemented."
	025 NotImplemented "Instruction FNEG not yet implemented."
	026 NotImplemented "Instruction FNEG not yet implemented."
	027 NotImplemented "Instruction FNEG not yet implemented."
	028 Move [X21+8], S0
	029 Move [X21+24], S1
	030 Move [X21+40], S2
	031 Move [X21+56], S3
	032 Move V1, [X21+32]
	033 Move V0, [X21+48]
	034 Move V3, [X21]
	035 Move V2, [X21+16]
	036 Add X8, X31, 256
	037 Add X0, X31, 192
	038 Move [X31+224], V1
	039 Move [X31+232], V0
	040 Move [X31+192], V3
	041 Move [X31+200], V2
	042 Move V0, [X20+32]
	043 Move V1, [X20+48]
	044 Move V2, [X20]
	045 Move V3, [X20+16]
	046 Add X1, X31, 128
	047 Move X2, X31
	048 Add X20, X31, 256
	049 Move [X31+160], V0
	050 Move [X31+168], V1
	051 Move [X31+128], V2
	052 Move [X31+136], V3
	053 Call Matrix4x4.op_Multiply, X0, X1
	054 Move X21, 0x962000
	055 Move V0, [X31+256]
	056 Move V1, [X31+272]
	057 Move V2, [X31+288]
	058 Move V3, [X31+304]
	059 Move W8, [X21+2752]
	060 Move [X31+352], V0
	061 Move [X31+360], V1
	062 Move [X31+384], V2
	063 Move [X31+392], V3
	064 Compare W8, 0
	065 JumpIfNotEqual {71}
	066 Move X0, 0x681000
	067 Move X0, [X0+624]
	068 Call 0x1C17CF4
	069 Move W8, 1
	070 Move [X21+2752], W8
	071 Move X8, 0x681000
	072 Move X8, [X8+624]
	073 Move V2, [X31+384]
	074 Move V1, [X31+400]
	075 Add X0, X31, 64
	076 Add X1, X31, 0
	077 Move X8, [X8]
	078 Move X2, X31
	079 Move X8, [X8+184]
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 Move V3, [X8+64]
	082 Move V4, [X8+80]
	083 Move [X20+28], V0
	084 Move V5, [X31+352]
	085 Move V0, [X31+368]
	086 Move [X31+256], V3
	087 Move [X31+264], V4
	088 Move V3, [X8+108]
	089 Move V4, [X8+124]
	090 Move [X31], V5
	091 Move [X31+8], V0
	092 NotImplemented "Instruction MOVI not yet implemented."
	093 Move [X31+32], V2
	094 Move [X31+40], V1
	095 NotImplemented "Instruction LDUR not yet implemented."
	096 Move [X31+112], D0
	097 NotImplemented "Instruction LDUR not yet implemented."
	098 Move W8, 0x3F000000
	099 Move [X31+64], W8
	100 Move [X31+84], W8
	101 Move [X31+320], V0
	102 Move [X31+328], V1
	103 Move V1, [X31+320]
	104 Move V0, [X31+336]
	105 Move [X31+104], W8
	106 Move [X31+120], W8
	107 Add X8, X31, 256
	108 Move [X31+108], S3
	109 Move [X31+68], V0
	110 Move [X31+88], V1
	111 Move [X31+124], S4
	112 Call Matrix4x4.op_Multiply, X0, X1
	113 Move V1, [X31+288]
	114 Move V0, [X31+304]
	115 Move V3, [X31+256]
	116 Move V2, [X31+272]
	117 Move X30, [X31+432]
	118 Move X21, [X31+440]
	119 Move X29, [X31+416]
	120 Move [X19+32], V1
	121 Move [X19+40], V0
	122 Move [X19], V3
	123 Move [X19+8], V2
	124 Move X20, [X31+448]
	125 Move X19, [X31+456]
	126 Add X31, X31, 464
	127 Return X0

Method: System.Single SoftShadowQualityToShaderProperty(UnityEngine.Light light, System.Boolean softShadowsEnabled)

Disassembly:
	0x03A78C88 BL 0x1C16DFC
	0x03A78C8C LDR X19, [X20]
	0x03A78C90 LDR X8, [X19 + 0xB8]
	0x03A78C94 CMP X21, 0x9
	0x03A78C98 LDR X0, [X8 + 0x8]
	0x03A78C9C B.EQ 0x3A78CC8
	0x03A78CA0 CBZ X0, 0x3A78CE0
	0x03A78CA4 LDR W8, [X0 + 0x18]
	0x03A78CA8 CMP X21, X8
	0x03A78CAC B.CS 0x3A78CE4
	0x03A78CB0 ADD X8, X0, X21, 0x2, LSL
	0x03A78CB4 LDR V0, [X8 + 0x20]
	0x03A78CB8 ADD X21, X21, 0x1
	0x03A78CBC FDIV S0, S0, S9
	0x03A78CC0 STR S0, [X8 + 0x20]
	0x03A78CC4 B 0x3A78C7C
	0x03A78CC8 LDP X20, X19, [X31 + 0x40]
	0x03A78CCC LDP X22, X21, [X31 + 0x30]
	0x03A78CD0 LDP X30, X23, [X31 + 0x20]
	0x03A78CD4 LDP D9, D8, [X31 + 0x10]
	0x03A78CD8 LDR V10, [X31], #0x50
	0x03A78CDC RET
	0x03A78CE0 BL 0x1C16F20
	0x03A78CE4 BL 0x1C16F28
	0x03A78CE8 STR X30, [X31 - 0x20]!
	0x03A78CEC STP X20, X19, [X31 + 0x10]
	0x03A78CF0 ADRP X20, 0x96A000
	0x03A78CF4 LDRB W8, [X20 + 0x2F9]
	0x03A78CF8 MOV X19, X0
	0x03A78CFC TBNZ X8, 0x0, 0x3A78D74
	0x03A78D00 ADRP X0, 0x6DC000
	0x03A78D04 LDR X0, [X0 + 0x918]
	0x03A78D08 BL 0x1C16CF4
	0x03A78D0C ADRP X0, 0x67B000
	0x03A78D10 LDR X0, [X0 + 0xA28]
	0x03A78D14 BL 0x1C16CF4
	0x03A78D18 ADRP X0, 0x6DE000
	0x03A78D1C LDR X0, [X0 + 0xF28]
	0x03A78D20 BL 0x1C16CF4
	0x03A78D24 ADRP X0, 0x6DE000
	0x03A78D28 LDR X0, [X0 + 0xF30]
	0x03A78D2C BL 0x1C16CF4
	0x03A78D30 ADRP X0, 0x6DE000
	0x03A78D34 LDR X0, [X0 + 0xF38]
	0x03A78D38 BL 0x1C16CF4
	0x03A78D3C ADRP X0, 0x6DE000
	0x03A78D40 LDR X0, [X0 + 0xF40]
	0x03A78D44 BL 0x1C16CF4
	0x03A78D48 ADRP X0, 0x6DE000
	0x03A78D4C LDR X0, [X0 + 0xF48]
	0x03A78D50 BL 0x1C16CF4
	0x03A78D54 ADRP X0, 0x6DE000
	0x03A78D58 LDR X0, [X0 + 0xF50]
	0x03A78D5C BL 0x1C16CF4
	0x03A78D60 ADRP X0, 0x6DE000
	0x03A78D64 LDR X0, [X0 + 0xF58]
	0x03A78D68 BL 0x1C16CF4
	0x03A78D6C MOVZ W8, 0x1
	0x03A78D70 STRB W8, [X20 + 0x2F9]
	0x03A78D74 STR X31, [X31 + 0x8]
	0x03A78D78 LDR X8, [X19 + 0x1E0]
	0x03A78D7C CBNZ X8, 0x3A78D90
	0x03A78D80 ADRP X8, 0x6DE000
	0x03A78D84 LDR X8, [X8 + 0xF48]
	0x03A78D88 LDR X20, [X8]
	0x03A78D8C CBNZ X20, 0x3A78E64
	0x03A78D90 LDR W8, [X19 + 0xE0]
	0x03A78D94 CMP W8, 0x1
	0x03A78D98 B.EQ 0x3A78DCC
	0x03A78D9C LDR X0, [X19 + 0x178]
	0x03A78DA0 CBZ X0, 0x3A78DBC
	0x03A78DA4 MOV X1, X31
	0x03A78DA8 BL 0x3984C98
	0x03A78DAC TBZ X0, 0x0, 0x3A78DBC
	0x03A78DB0 ADRP X8, 0x6DE000
	0x03A78DB4 LDR X8, [X8 + 0xF58]
	0x03A78DB8 B 0x3A78DC4
	0x03A78DBC ADRP X8, 0x6DE000
	0x03A78DC0 LDR X8, [X8 + 0xF38]
	0x03A78DC4 LDR X20, [X8]
	0x03A78DC8 CBNZ X20, 0x3A78E64
	0x03A78DCC LDR X0, [X19 + 0xC0]
	0x03A78DD0 CBZ X0, 0x3A78EC8
	0x03A78DD4 ADRP X8, 0x6DC000
	0x03A78DD8 LDR X8, [X8 + 0x918]
	0x03A78DDC ADD X1, X31, 0x8
	0x03A78DE0 LDR X2, [X8]
	0x03A78DE4 BL 0x21A4990
	0x03A78DE8 TBZ X0, 0x0, 0x3A78E28
	0x03A78DEC LDR X0, [X31 + 0x8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D8
	003 Move [X31+32], X30
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0x96B000
	008 Move W8, [X21+749]
	009 Move W20, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0x6DF000
	016 Move X0, [X0+376]
	017 Call 0x1C17CF4
	018 Move X0, 0x67C000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move X0, 0x6DF000
	022 Move X0, [X0+3816]
	023 Call 0x1C17CF4
	024 Move X0, 0x6DF000
	025 Move X0, [X0+3824]
	026 Call 0x1C17CF4
	027 Move X0, 0x6A5000
	028 Move X0, [X0+2216]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+749], W8
	032 And W31, W20, 1
	033 Move S0, W31
	034 Move S1, 1
	035 NotImplemented "Instruction FCSEL not yet implemented."
	036 Move [X31+24], X31
	037 Move [X31+8], X31
	038 Compare X19, 0
	039 JumpIfEqual {105}
	040 Move X8, 0x6DF000
	041 Move X8, [X8+376]
	042 Add X1, X31, 24
	043 Move X0, X19
	044 Move X2, [X8]
	045 Call 0x21A5990, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {96}
	050 Move X8, [X31+24]
	051 Compare X8, 0
	052 JumpIfEqual {105}
	053 Move W1, [X8+88]
	054 Compare W1, 0
	055 JumpIfNotEqual {68}
	056 Move X8, 0x6A5000
	057 Move X8, [X8+2216]
	058 Move X0, [X8]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X31
	064 Call UniversalRenderPipeline.get_asset
	065 Compare X0, 0
	066 JumpIfEqual {104}
	067 Move W1, [X0+220]
	068 Move X8, 0x6DF000
	069 Move X8, [X8+3816]
	070 Add X0, X31, 0
	071 Move [X31], X31
	072 Move X2, [X8]
	073 Call Nullable`1<Int32Enum>..ctor, X0, X1
	074 Move X8, [X31]
	075 Move X9, 0x6DF000
	076 Move X9, [X9+3824]
	077 Add X0, X31, 8
	078 Move [X31+8], X8
	079 Move X1, [X9]
	080 Call Nullable`1<Int32Enum>.get_Value, X0
	081 Move X8, 0x67C000
	082 Move X8, [X8+1448]
	083 Move W19, W0
	084 Move X8, [X8]
	085 Move W9, [X8+224]
	086 Compare W9, 0
	087 JumpIfNotEqual {90}
	088 Move X0, X8
	089 Call 0x1C17DFC
	090 Move W1, 1
	091 Move W0, W19
	092 Move X2, X31
	093 Call Math.Max, X0, X1
	094 NotImplemented "Instruction SCVTF not yet implemented."
	095 Multiply S8, S8, S0
	096 Move V0, V8
	097 Move X20, [X31+48]
	098 Move X19, [X31+56]
	099 Move X30, [X31+32]
	100 Move X21, [X31+40]
	101 Move V8, [X31+16]
	102 Add X31, X31, 64
	103 Return V0
	104 Move X8, X31
	105 Call 0x1C17F20

Method: System.Boolean SupportsPerLightSoftShadowQuality()

Disassembly:
	0x03A78DF0 CBZ X0, 0x3A78EC8
	0x03A78DF4 LDR W8, [X0 + 0x2C]
	0x03A78DF8 CMP W8, 0x1
	0x03A78DFC B.EQ 0x3A78E18
	0x03A78E00 MOV X1, X31
	0x03A78E04 BL 0x3A8156C
	0x03A78E08 CBZ X0, 0x3A78EC8
	0x03A78E0C LDR W8, [X0 + 0x18]
	0x03A78E10 CMP W8, 0x1
	0x03A78E14 B.LT 0x3A78E28
	0x03A78E18 ADRP X8, 0x6DE000
	0x03A78E1C LDR X8, [X8 + 0xF30]
	0x03A78E20 LDR X20, [X8]
	0x03A78E24 CBNZ X20, 0x3A78E64
	0x03A78E28 LDR X0, [X19 + 0xC0]
	0x03A78E2C CBZ X0, 0x3A78EC8
	0x03A78E30 MOV X1, X31
	0x03A78E34 BL 0x3C03820
	0x03A78E38 ADRP X8, 0x6DE000
	0x03A78E3C LDR X8, [X8 + 0xF40]
	0x03A78E40 LDR X20, [X8]
	0x03A78E44 CBZ X20, 0x3A78E4C
	0x03A78E48 TBNZ X0, 0x0, 0x3A78E64
	0x03A78E4C ADRP X9, 0x6DE000
	0x03A78E50 LDRB W8, [X19 + 0x188]
	0x03A78E54 LDR X9, [X9 + 0xF50]
	0x03A78E58 CMP W8, 0x0
	0x03A78E5C LDR X9, [X9]
	0x03A78E60 CSEL X20, X9, X31, EQ
	0x03A78E64 MOV X0, X31
	0x03A78E68 BL 0x3C3C88C
	0x03A78E6C MOVZ W8, 0xEEEF
	0x03A78E70 MOVZ W9, 0x8888
	0x03A78E74 MOVK W8, 0xEEEE0000
	0x03A78E78 MOVK W9, 0x8880000
	0x03A78E7C MADD W8, W0, W8, W9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x96B000
	005 Move X19, 0x6DF000
	006 Move W8, [X20+750]
	007 Move X19, [X19+3832]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x6DF000
	013 Move X0, [X0+3832]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+750], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, 0x96B000
	023 Move W8, [X20+778]
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0x6DF000
	027 Move X0, [X0+3832]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+778], W8
	031 Move X0, [X19]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X19]
	037 Move X8, [X0+184]
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move W8, [X8+8]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction CSET not yet implemented."
	043 Move X30, [X31+32]
	044 Return X0

Method: System.Void SetPerLightSoftShadowKeyword(UnityEngine.Rendering.CommandBuffer cmd, System.Boolean hasSoftShadows)

Disassembly:
	0x03A78E80 MOVZ W9, 0x4444
	0x03A78E84 EXTR W8, W8, W8, 0x2
	0x03A78E88 MOVK W9, 0x4440000
	0x03A78E8C CMP W8, W9
	0x03A78E90 B.HI 0x3A78EB8
	0x03A78E94 ADRP X8, 0x67B000
	0x03A78E98 LDR X8, [X8 + 0xA28]
	0x03A78E9C LDR X0, [X8]
	0x03A78EA0 LDR W8, [X0 + 0xE0]
	0x03A78EA4 CBNZ W8, 0x3A78EAC
	0x03A78EA8 BL 0x1C16DFC
	0x03A78EAC MOV X0, X20
	0x03A78EB0 MOV X1, X31
	0x03A78EB4 BL 0x3C06A04
	0x03A78EB8 MOV X0, X20
	0x03A78EBC LDP X20, X19, [X31 + 0x10]
	0x03A78EC0 LDR X30, [X31], #0x20
	0x03A78EC4 RET
	0x03A78EC8 BL 0x1C16F20
	0x03A78ECC SUB X31, X31, 0x80
	0x03A78ED0 STR D8, [X31 + 0x10]
	0x03A78ED4 STP X29, X30, [X31 + 0x20]
	0x03A78ED8 STP X28, X27, [X31 + 0x30]
	0x03A78EDC STP X26, X25, [X31 + 0x40]
	0x03A78EE0 STP X24, X23, [X31 + 0x50]
	0x03A78EE4 STP X22, X21, [X31 + 0x60]
	0x03A78EE8 STP X20, X19, [X31 + 0x70]
	0x03A78EEC STR X3, [X31 + 0x8]
	0x03A78EF0 ADRP X24, 0x96A000
	0x03A78EF4 ADRP X23, 0x6DC000
	0x03A78EF8 LDRB W8, [X24 + 0x2FA]
	0x03A78EFC LDR X23, [X23 + 0xA8]
	0x03A78F00 MOV X26, X5
	0x03A78F04 MOV X20, X4
	0x03A78F08 MOV X19, X2
	0x03A78F0C MOV X21, X1
	0x03A78F10 MOV X22, X0
	0x03A78F14 TBNZ X8, 0x0, 0x3A78F5C
	0x03A78F18 ADRP X0, 0x6DA000
	0x03A78F1C LDR X0, [X0 + 0xE28]
	0x03A78F20 BL 0x1C16CF4
	0x03A78F24 ADRP X0, 0x6DC000
	0x03A78F28 LDR X0, [X0 + 0xA8]
	0x03A78F2C BL 0x1C16CF4
	0x03A78F30 ADRP X0, 0x6DE000
	0x03A78F34 LDR X0, [X0 + 0xF60]
	0x03A78F38 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x96B000
	007 Move X22, 0x6DF000
	008 Move W8, [X21+751]
	009 Move X22, [X22+3776]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x6A4000
	017 Move X0, [X0+2296]
	018 Call 0x1C17CF4
	019 Move X0, 0x6DF000
	020 Move X0, [X0+3776]
	021 Call 0x1C17CF4
	022 Move X0, 0x6DE000
	023 Move X0, [X0+3968]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+751], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call ShadowUtils.SupportsPerLightSoftShadowQuality
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {57}
	037 Move X8, 0x6A4000
	038 Move X8, [X8+2296]
	039 Move X21, 0x6DE000
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Move X21, [X21+3968]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X1, [X21]
	047 And W2, W20, 1
	048 Move X0, X19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X3, X31
	054 Move X30, [X31+48]
	055 Call CoreUtils.SetKeyword, X0, X1, X2
	056 Return 
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Return 

Method: System.Void SetSoftShadowQualityShaderKeywords(UnityEngine.Rendering.CommandBuffer cmd, ref UnityEngine.Rendering.Universal.ShadowData shadowData)

Disassembly:
	0x03A78F3C ADRP X0, 0x6DE000
	0x03A78F40 LDR X0, [X0 + 0xF68]
	0x03A78F44 BL 0x1C16CF4
	0x03A78F48 ADRP X0, 0x6DE000
	0x03A78F4C LDR X0, [X0 + 0x608]
	0x03A78F50 BL 0x1C16CF4
	0x03A78F54 MOVZ W8, 0x1
	0x03A78F58 STRB W8, [X24 + 0x2FA]
	0x03A78F5C LDR X1, [X23]
	0x03A78F60 MOVZ W0, 0x15
	0x03A78F64 STRB W31, [X31 + 0x18]
	0x03A78F68 BL 0x2235BC0
	0x03A78F6C MOV X2, X0
	0x03A78F70 ADD X0, X31, 0x18
	0x03A78F74 MOV X1, X22
	0x03A78F78 MOV X3, X31
	0x03A78F7C BL 0x39B1DB0
	0x03A78F80 LDR X9, [X19 + 0x178]
	0x03A78F84 CBZ X9, 0x3A79274
	0x03A78F88 LDR X8, [X19 + 0x1E0]
	0x03A78F8C CBZ X8, 0x3A79278
	0x03A78F90 LDR W28, [X9 + 0x24]
	0x03A78F94 MOVZ W9, 0x5C
	0x03A78F98 MOVZ W10, 0x58
	0x03A78F9C CMP W28, 0x0
	0x03A78FA0 CSEL X9, X10, X9, EQ
	0x03A78FA4 LDR W29, [X8, X9, LSL]
	0x03A78FA8 MOV X0, X31
	0x03A78FAC BL 0x3C3C88C
	0x03A78FB0 LDR X8, [X19 + 0x1E0]
	0x03A78FB4 CBZ X8, 0x3A7927C
	0x03A78FB8 ADRP X23, 0x6DE000
	0x03A78FBC LDR X23, [X23 + 0xF60]
	0x03A78FC0 MOV W25, W0
	0x03A78FC4 CMP W28, 0x0
	0x03A78FC8 MOVZ W9, 0x50
	0x03A78FCC LDR X0, [X23]
	0x03A78FD0 MOVZ W10, 0x48
	0x03A78FD4 CSEL X9, X10, X9, EQ
	0x03A78FD8 LDR X24, [X8, X9, LSL]
	0x03A78FDC LDR W10, [X0 + 0xE0]
	0x03A78FE0 CBNZ W10, 0x3A78FEC
	0x03A78FE4 BL 0x1C16DFC
	0x03A78FE8 LDR X0, [X23]
	0x03A78FEC LDR X8, [X0 + 0xB8]
	0x03A78FF0 LDR W27, [X8]
	0x03A78FF4 MOV X0, X24
	0x03A78FF8 MOV X1, X31
	0x03A78FFC BL 0x39D4944
	0x03A79000 CBZ X21, 0x3A79280
	0x03A79004 MOV X2, X0
	0x03A79008 MOV X0, X21
	0x03A7900C MOV W1, W27
	0x03A79010 MOV X3, X31
	0x03A79014 BL 0x3C14C34
	0x03A79018 LDR X8, [X23]
	0x03A7901C CMP W29, W25
	0x03A79020 LDR X8, [X8 + 0xB8]
	0x03A79024 LDR W27, [X8 + 0x4]
	0x03A79028 B.NE 0x3A79038
	0x03A7902C MOV X0, X31
	0x03A79030 BL 0x3C1B398
	0x03A79034 MOV X26, X0
	0x03A79038 MOV X0, X21
	0x03A7903C MOV W1, W27
	0x03A79040 MOV X2, X26
	0x03A79044 MOV X3, X31
	0x03A79048 BL 0x3C14C34
	0x03A7904C LDR W8, [X19 + 0x200]
	0x03A79050 FMOV S8, 1
	0x03A79054 CBNZ W8, 0x3A7905C
	0x03A79058 LDR V8, [X19 + 0x1EC]
	0x03A7905C LDR X0, [X23]
	0x03A79060 LDR W8, [X0 + 0xE0]
	0x03A79064 CBNZ W8, 0x3A79070
	0x03A79068 BL 0x1C16DFC
	0x03A7906C LDR X0, [X23]
	0x03A79070 LDR X8, [X0 + 0xB8]
	0x03A79074 LDR W1, [X8 + 0xC]
	0x03A79078 MOV X0, X21
	0x03A7907C MOV V0.16B, V8.16B
	0x03A79080 MOV X2, X31
	0x03A79084 BL 0x3C15CD8
	0x03A79088 LDR X8, [X23]
	0x03A7908C LDR V0, [X19 + 0x1F8]
	0x03A79090 LDR X8, [X8 + 0xB8]
	0x03A79094 LDR W1, [X8 + 0x10]
	0x03A79098 MOV X0, X21
	0x03A7909C MOV X2, X31
	0x03A790A0 BL 0x3C15CD8
	0x03A790A4 LDR W8, [X19 + 0x1E8]
	0x03A790A8 CMP W8, 0x4
	0x03A790AC B.NE 0x3A79104
	0x03A790B0 LDR X0, [X23]
	0x03A790B4 LDR W8, [X0 + 0xE0]
	0x03A790B8 CBNZ W8, 0x3A790C4
	0x03A790BC BL 0x1C16DFC
	0x03A790C0 LDR X0, [X23]
	0x03A790C4 ADRP X9, 0x6DD000
	0x03A790C8 LDR X8, [X0 + 0xB8]
	0x03A790CC LDR X9, [X9 + 0x608]
	0x03A790D0 LDR V8, [X19 + 0x1F0]
	0x03A790D4 LDR W26, [X8 + 0x8]
	0x03A790D8 LDR X0, [X9]
	0x03A790DC LDR W8, [X0 + 0xE0]
	0x03A790E0 CBNZ W8, 0x3A790E8
	0x03A790E4 BL 0x1C16DFC
	0x03A790E8 MOV V0.16B, V8.16B
	0x03A790EC BL 0x3A78B84
	0x03A790F0 MOV X2, X0
	0x03A790F4 MOV X0, X21
	0x03A790F8 MOV W1, W26
	0x03A790FC MOV X3, X31
	0x03A79100 BL 0x3C15E54
	0x03A79104 CBZ X24, 0x3A79284
	0x03A79108 LDR X0, [X24 + 0x18]
	0x03A7910C CBZ X0, 0x3A79288
	0x03A79110 MOV X1, X31
	0x03A79114 BL 0x3C201A0
	0x03A79118 ADRP X23, 0x6DD000
	0x03A7911C LDR X23, [X23 + 0xF68]
	0x03A79120 CMP W0, 0x8
	0x03A79124 B.EQ 0x3A79138
	0x03A79128 CMP W0, 0x3B
	0x03A7912C B.EQ 0x3A79138
	0x03A79130 CMP W0, 0x4A
	0x03A79134 B.NE 0x3A79164
	0x03A79138 LDR X0, [X23]
	0x03A7913C LDR W8, [X0 + 0xE0]
	0x03A79140 CBNZ W8, 0x3A7914C
	0x03A79144 BL 0x1C16DFC
	0x03A79148 LDR X0, [X23]
	0x03A7914C LDR X8, [X0 + 0xB8]
	0x03A79150 LDR X1, [X8]
	0x03A79154 MOV X0, X21
	0x03A79158 MOV X2, X31
	0x03A7915C BL 0x3C14E3C
	0x03A79160 B 0x3A7918C
	0x03A79164 LDR X0, [X23]
	0x03A79168 LDR W8, [X0 + 0xE0]
	0x03A7916C CBNZ W8, 0x3A79178
	0x03A79170 BL 0x1C16DFC
	0x03A79174 LDR X0, [X23]
	0x03A79178 LDR X8, [X0 + 0xB8]
	0x03A7917C LDR X1, [X8]
	0x03A79180 MOV X0, X21
	0x03A79184 MOV X2, X31
	0x03A79188 BL 0x3C14E80
	0x03A7918C ADRP X27, 0x6D9000
	0x03A79190 LDR X27, [X27 + 0xE28]
	0x03A79194 LDR W26, [X19 + 0x1E8]
	0x03A79198 LDR X0, [X27]
	0x03A7919C LDR W8, [X0 + 0xE0]
	0x03A791A0 CBNZ W8, 0x3A791A8
	0x03A791A4 BL 0x1C16DFC
	0x03A791A8 LDR X1, [X31 + 0x8]
	0x03A791AC MOVZ W3, 0x2
	0x03A791B0 MOV X0, X22
	0x03A791B4 MOV X2, X20
	0x03A791B8 MOV W4, W31
	0x03A791BC MOV X5, X21
	0x03A791C0 MOV W6, W26
	0x03A791C4 MOV X7, X31
	0x03A791C8 BL 0x39E3120
	0x03A791CC CMP W29, W25
	0x03A791D0 B.EQ 0x3A79244
	0x03A791D4 MOV X0, X21
	0x03A791D8 MOV X1, X31
	0x03A791DC BL 0x3C14714
	0x03A791E0 CBZ X0, 0x3A7928C
	0x03A791E4 MOV X1, X31
	0x03A791E8 BL 0x3C14110
	0x03A791EC MOV W23, W0
	0x03A791F0 LDR X0, [X27]
	0x03A791F4 LDR W8, [X0 + 0xE0]
	0x03A791F8 CBNZ W8, 0x3A79200
	0x03A791FC BL 0x1C16DFC
	0x03A79200 SUB W6, W23, 0x1
	0x03A79204 MOVZ W3, 0x2
	0x03A79208 MOV X0, X22
	0x03A7920C MOV X1, X20
	0x03A79210 MOV X2, X24
	0x03A79214 MOV W4, W31
	0x03A79218 MOV X5, X21
	0x03A7921C MOV X7, X31
	0x03A79220 BL 0x39E3120
	0x03A79224 LDR X19, [X19 + 0x1E0]
	0x03A79228 MOV X0, X31
	0x03A7922C BL 0x3C3C88C
	0x03A79230 CBZ X19, 0x3A79290
	0x03A79234 CBZ W28, 0x3A79240
	0x03A79238 STR W0, [X19 + 0x5C]
	0x03A7923C B 0x3A79244

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x96B000
	009 Move X22, 0x6A4000
	010 Move W8, [X21+752]
	011 Move X22, [X22+2296]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {41}
	018 Move X0, 0x6A4000
	019 Move X0, [X0+2296]
	020 Call 0x1C17CF4
	021 Move X0, 0x6DF000
	022 Move X0, [X0+3776]
	023 Call 0x1C17CF4
	024 Move X0, 0x6A5000
	025 Move X0, [X0+2216]
	026 Call 0x1C17CF4
	027 Move X0, 0x6DE000
	028 Move X0, [X0+3872]
	029 Call 0x1C17CF4
	030 Move X0, 0x6DE000
	031 Move X0, [X0+3880]
	032 Call 0x1C17CF4
	033 Move X0, 0x6DE000
	034 Move X0, [X0+3960]
	035 Call 0x1C17CF4
	036 Move X0, 0x6DE000
	037 Move X0, [X0+3968]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X21+752], W8
	041 Move X0, [X22]
	042 Move X21, 0x6DE000
	043 Move X23, 0x6DF000
	044 Move W24, [X20+73]
	045 Move W8, [X0+224]
	046 Move X21, [X21+3968]
	047 Move X23, [X23+3776]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X1, [X21]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSET not yet implemented."
	054 Move X0, X19
	055 Move X3, X31
	056 Call CoreUtils.SetKeyword, X0, X1, X2
	057 Move X0, [X23]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Call ShadowUtils.SupportsPerLightSoftShadowQuality
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {89}
	067 Move X0, [X22]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X8, 0x6DD000
	073 Move X8, [X8+3880]
	074 Move X0, X19
	075 Move W2, W31
	076 Move X3, X31
	077 Move X1, [X8]
	078 Call CoreUtils.SetKeyword, X0, X1, X2
	079 Move X8, 0x6DD000
	080 Move X8, [X8+3872]
	081 Move X0, X19
	082 Move W2, W31
	083 Move X3, X31
	084 Move X1, [X8]
	085 Call CoreUtils.SetKeyword, X0, X1, X2
	086 Move X8, 0x6DD000
	087 Move X8, [X8+3960]
	088 Move X1, [X8]
	089 Move W8, [X20+73]
	090 Compare W8, 0
	091 JumpIfEqual {211}
	092 Move X23, 0x6A4000
	093 Move X23, [X23+2216]
	094 Move X0, [X23]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move X0, X31
	100 Call UniversalRenderPipeline.get_asset
	101 Compare X0, 0
	102 JumpIfEqual {121}
	103 Move W8, [X0+220]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X0, [X22]
	106 Move W8, [X0+224]
	107 Compare W8, 0
	108 JumpIfNotEqual {110}
	109 Call 0x1C17DFC
	110 Move X8, 0x6DD000
	111 Move X8, [X8+3880]
	112 Move W2, 1
	113 Move X0, X19
	114 Move X3, X31
	115 Move X1, [X8]
	116 Call CoreUtils.SetKeyword, X0, X1, X2
	117 Move X8, 0x6DD000
	118 Move X8, [X8+3872]
	119 Move X0, X19
	120 Move W2, W31
	121 Move W8, [X20+73]
	122 Compare W8, 0
	123 JumpIfEqual {211}
	124 Move X0, [X23]
	125 Move W8, [X0+224]
	126 Compare W8, 0
	127 JumpIfNotEqual {129}
	128 Call 0x1C17DFC
	129 Move X0, X31
	130 Call UniversalRenderPipeline.get_asset
	131 Compare X0, 0
	132 JumpIfEqual {174}
	133 Move W8, [X0+220]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move X0, [X22]
	136 Move W8, [X0+224]
	137 Compare W8, 0
	138 JumpIfNotEqual {140}
	139 Call 0x1C17DFC
	140 Move X8, 0x6DD000
	141 Move X8, [X8+3880]
	142 Move X0, X19
	143 Move W2, W31
	144 Move X3, X31
	145 Move X1, [X8]
	146 Call CoreUtils.SetKeyword, X0, X1, X2
	147 Move X8, 0x6DD000
	148 Move X8, [X8+3872]
	149 Move W2, 1
	150 Move X0, X19
	151 Move X1, [X8]
	152 Move X3, X31
	153 Call CoreUtils.SetKeyword, X0, X1, X2
	154 Move X8, 0x6DD000
	155 Move X8, [X8+3960]
	156 Move X0, X19
	157 Move W2, W31
	158 Move X1, [X8]
	159 Move X3, X31
	160 Call CoreUtils.SetKeyword, X0, X1, X2
	161 Move X1, [X21]
	162 Move X0, X19
	163 Move X20, [X31+48]
	164 Move X19, [X31+56]
	165 Move X22, [X31+32]
	166 Move X21, [X31+40]
	167 Move X24, [X31+16]
	168 Move X23, [X31+24]
	169 Move W2, W31
	170 Move X3, X31
	171 Move X30, [X31+64]
	172 Call CoreUtils.SetKeyword, X0, X1, X2
	173 Return 
	174 Move W8, [X20+73]
	175 Compare W8, 0
	176 JumpIfEqual {211}
	177 Move X0, [X23]
	178 Move W8, [X0+224]
	179 Compare W8, 0
	180 JumpIfNotEqual {182}
	181 Call 0x1C17DFC
	182 Move X0, X31
	183 Call UniversalRenderPipeline.get_asset
	184 Compare X0, 0
	185 JumpIfEqual {211}
	186 Move W8, [X0+220]
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move X0, [X22]
	189 Move W8, [X0+224]
	190 Compare W8, 0
	191 JumpIfNotEqual {193}
	192 Call 0x1C17DFC
	193 Move X8, 0x6DD000
	194 Move X8, [X8+3880]
	195 Move X0, X19
	196 Move W2, W31
	197 Move X3, X31
	198 Move X1, [X8]
	199 Call CoreUtils.SetKeyword, X0, X1, X2
	200 Move X8, 0x6DD000
	201 Move X8, [X8+3872]
	202 Move X0, X19
	203 Move W2, W31
	204 Move X3, X31
	205 Move X1, [X8]
	206 Call CoreUtils.SetKeyword, X0, X1, X2
	207 Move X8, 0x6DD000
	208 Move X8, [X8+3960]
	209 Move W2, 1
	210 Move X0, X19
	211 Move X20, [X31+48]
	212 Move X19, [X31+56]
	213 Move X22, [X31+32]
	214 Move X21, [X31+40]
	215 Move X24, [X31+16]
	216 Move X23, [X31+24]
	217 Move X30, [X31+64]
	218 Return 

Method: System.Boolean IsValidShadowCastingLight(ref UnityEngine.Rendering.Universal.LightData lightData, System.Int32 i)

Disassembly:
	0x03A79240 STR W0, [X19 + 0x58]
	0x03A79244 ADD X0, X31, 0x18
	0x03A79248 MOV X1, X31
	0x03A7924C BL 0x39B1DB4
	0x03A79250 LDP X20, X19, [X31 + 0x70]
	0x03A79254 LDP X22, X21, [X31 + 0x60]
	0x03A79258 LDP X24, X23, [X31 + 0x50]
	0x03A7925C LDP X26, X25, [X31 + 0x40]
	0x03A79260 LDP X28, X27, [X31 + 0x30]
	0x03A79264 LDP X29, X30, [X31 + 0x20]
	0x03A79268 LDR V8, [X31 + 0x10]
	0x03A7926C ADD X31, X31, 0x80
	0x03A79270 RET
	0x03A79274 BL 0x1C16F20
	0x03A79278 BL 0x1C16F20
	0x03A7927C BL 0x1C16F20
	0x03A79280 BL 0x1C16F20
	0x03A79284 BL 0x1C16F20
	0x03A79288 BL 0x1C16F20
	0x03A7928C BL 0x1C16F20
	0x03A79290 BL 0x1C16F20
	0x03A79294 B 0x3A792F8
	0x03A79298 B 0x3A792F8
	0x03A7929C B 0x3A792F8
	0x03A792A0 B 0x3A792F8
	0x03A792A4 B 0x3A792F8
	0x03A792A8 B 0x3A792F8
	0x03A792AC B 0x3A792F8
	0x03A792B0 B 0x3A792F8
	0x03A792B4 B 0x3A792F8
	0x03A792B8 B 0x3A792F8
	0x03A792BC B 0x3A792F8
	0x03A792C0 B 0x3A792F8
	0x03A792C4 B 0x3A792F8
	0x03A792C8 B 0x3A792F8
	0x03A792CC B 0x3A792F8
	0x03A792D0 B 0x3A792F8
	0x03A792D4 B 0x3A792F8
	0x03A792D8 B 0x3A792F8
	0x03A792DC B 0x3A792F8
	0x03A792E0 B 0x3A792F8
	0x03A792E4 B 0x3A792F8
	0x03A792E8 B 0x3A792F8
	0x03A792EC B 0x3A792F8
	0x03A792F0 B 0x3A792F8
	0x03A792F4 B 0x3A792F8
	0x03A792F8 MOV X19, X0
	0x03A792FC CMP W1, 0x1
	0x03A79300 B.NE 0x3A7932C
	0x03A79304 MOV X0, X19
	0x03A79308 BL 0x3EB1AD0
	0x03A7930C LDR X20, [X0]
	0x03A79310 BL 0x3EB1AE0
	0x03A79314 ADD X0, X31, 0x18
	0x03A79318 MOV X1, X31
	0x03A7931C BL 0x39B1DB4
	0x03A79320 CBZ X20, 0x3A79250
	0x03A79324 MOV X0, X20
	0x03A79328 BL 0x1C16F18
	0x03A7932C MOV X20, X31
	0x03A79330 B 0x3A79338
	0x03A79334 MOV X19, X0
	0x03A79338 ADD X0, X31, 0x18
	0x03A7933C MOV X1, X31
	0x03A79340 BL 0x39B1DB4
	0x03A79344 CBNZ X20, 0x3A79350
	0x03A79348 MOV X0, X19
	0x03A7934C BL 0x1D2C690
	0x03A79350 MOV X0, X20
	0x03A79354 BL 0x1C16F18
	0x03A79358 BL 0x1990590
	0x03A7935C SUB X31, X31, 0x100
	0x03A79360 STR D8, [X31 + 0x90]
	0x03A79364 STP X29, X30, [X31 + 0xA0]
	0x03A79368 STP X28, X27, [X31 + 0xB0]
	0x03A7936C STP X26, X25, [X31 + 0xC0]
	0x03A79370 STP X24, X23, [X31 + 0xD0]
	0x03A79374 STP X22, X21, [X31 + 0xE0]
	0x03A79378 STP X20, X19, [X31 + 0xF0]
	0x03A7937C ADRP X22, 0x969000
	0x03A79380 LDRB W8, [X22 + 0x2FB]
	0x03A79384 MOV X27, X5
	0x03A79388 MOV X24, X4
	0x03A7938C MOV X26, X3
	0x03A79390 MOV X23, X2
	0x03A79394 MOV X19, X1
	0x03A79398 MOV X21, X0
	0x03A7939C STR X6, [X31]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x96A000
	007 Move W8, [X21+753]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x6DE000
	015 Move X0, [X0+3840]
	016 Call 0x1C17CF4
	017 Move X0, 0x67B000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+753], W8
	022 Move W8, [X20]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X8, 0x6DE000
	025 Move X0, [X20+16]
	026 Move X1, [X20+24]
	027 Move X8, [X8+3840]
	028 Move W2, W19
	029 Move X3, [X8]
	030 Call 0x2223228, X0, X1
	031 Move X1, X31
	032 Move X19, X0
	033 Call VisibleLight.get_lightType, X0
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X0, X19
	036 Move X1, X31
	037 Call VisibleLight.get_light, X0
	038 Move X8, 0x67B000
	039 Move X8, [X8+1432]
	040 Move X19, X0
	041 Move X8, [X8]
	042 Move W9, [X8+224]
	043 Compare W9, 0
	044 JumpIfNotEqual {47}
	045 Move X0, X8
	046 Call 0x1C17DFC
	047 Move X0, X19
	048 Move X1, X31
	049 Move X2, X31
	050 Call Object.op_Inequality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {93}
	055 Compare X19, 0
	056 JumpIfEqual {100}
	057 Move X0, X19
	058 Move X1, X31
	059 Call Light.get_shadows, X0
	060 Compare W0, 0
	061 JumpIfEqual {94}
	062 Move X0, X19
	063 Move X1, X31
	064 Call Light.get_shadowStrength, X0
	065 Move X19, 0x961000
	066 Move W8, [X19+1450]
	067 Move V8, V0
	068 Compare W8, 0
	069 JumpIfNotEqual {75}
	070 Move X0, 0x682000
	071 Move X0, [X0+1208]
	072 Call 0x1C17CF4
	073 Move W8, 1
	074 Move [X19+1450], W8
	075 Move X8, 0x682000
	076 Move X8, [X8+1208]
	077 Move X9, -49864704
	078 Move V0, [X9+576]
	079 NotImplemented "Instruction FABS not yet implemented."
	080 Move X8, [X8]
	081 Move S2, W31
	082 NotImplemented "Instruction FMAXNM not yet implemented."
	083 Multiply S0, S1, S0
	084 Move X8, [X8+184]
	085 Move S1, 8
	086 Move V3, [X8]
	087 Multiply S1, S3, S1
	088 NotImplemented "Instruction FCMP not yet implemented."
	089 NotImplemented "Instruction FCSEL not yet implemented."
	090 NotImplemented "Instruction FABD not yet implemented."
	091 NotImplemented "Instruction FCMP not yet implemented."
	092 NotImplemented "Instruction CSET not yet implemented."
	093 Move W0, W31
	094 Move X20, [X31+32]
	095 Move X19, [X31+40]
	096 Move X30, [X31+16]
	097 Move X21, [X31+24]
	098 Move V8, [X31+48]
	099 Return X0
	100 Call 0x1C17F20

Method: System.Int32 GetPunctualLightShadowSlicesCount(in UnityEngine.LightType lightType)

Disassembly:
	0x03A793A0 TBNZ X8, 0x0, 0x3A7943C
	0x03A793A4 ADRP X0, 0x6DB000
	0x03A793A8 LDR X0, [X0 + 0xA8]
	0x03A793AC BL 0x1C16CF4
	0x03A793B0 ADRP X0, 0x6D7000
	0x03A793B4 LDR X0, [X0 + 0x598]
	0x03A793B8 BL 0x1C16CF4
	0x03A793BC ADRP X0, 0x6DD000

ISIL:
	001 Move W8, [X0]
	002 Compare W8, 0
	003 JumpIfEqual {8}
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move W8, 6
	006 NotImplemented "Instruction CSEL not yet implemented."
	007 Return X0
	008 Move W0, 1
	009 Return X0

Method: System.Int32 MinimalPunctualLightShadowResolution(System.Boolean softShadow)

Disassembly:
	0x03A793C0 LDR X0, [X0 + 0xF70]
	0x03A793C4 BL 0x1C16CF4
	0x03A793C8 ADRP X0, 0x6DD000
	0x03A793CC LDR X0, [X0 + 0xF78]
	0x03A793D0 BL 0x1C16CF4

ISIL:
	001 And W31, W0, 1
	002 Move W8, 8
	003 Move W9, 16
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 Return X0

