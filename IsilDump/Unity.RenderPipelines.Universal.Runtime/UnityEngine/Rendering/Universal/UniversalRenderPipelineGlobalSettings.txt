Type: UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings

Method: System.Void OnBeforeSerialize()

Disassembly:
	0x03A957F4 FNEG S2, S8

ISIL:
	001 Return 

Method: System.Void OnAfterDeserialize()

Disassembly:
	0x03A957F8 FNEG S3, S0

ISIL:
	001 Return 

Method: UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings get_instance()

Disassembly:
	0x03A8AA38 LDR X8, [X20]
	0x03A8AA3C LDR X8, [X8 + 0xB8]
	0x03A8AA40 LDR W19, [X8 + 0xB8]
	0x03A8AA44 BL 0x3A8AB60
	0x03A8AA48 CBZ X0, 0x3A8AA94
	0x03A8AA4C MOV X1, X31
	0x03A8AA50 BL 0x3A2CC0C
	0x03A8AA54 CBZ X0, 0x3A8AA98
	0x03A8AA58 LDR X1, [X0 + 0x18]
	0x03A8AA5C MOV W0, W19
	0x03A8AA60 MOV X2, X31
	0x03A8AA64 BL 0x3C14390
	0x03A8AA68 ADD X0, X31, 0x8
	0x03A8AA6C MOV X1, X31
	0x03A8AA70 BL 0x39B1DB4
	0x03A8AA74 LDP X20, X19, [X31 + 0x10]
	0x03A8AA78 LDR X30, [X31], #0x20
	0x03A8AA7C RET
	0x03A8AA80 BL 0x1C16F20
	0x03A8AA84 BL 0x1C16F20
	0x03A8AA88 BL 0x1C16F20
	0x03A8AA8C BL 0x1C16F20
	0x03A8AA90 BL 0x1C16F20
	0x03A8AA94 BL 0x1C16F20
	0x03A8AA98 BL 0x1C16F20
	0x03A8AA9C BL 0x1C16F20
	0x03A8AAA0 BL 0x1C16F20
	0x03A8AAA4 BL 0x1C16F20
	0x03A8AAA8 BL 0x1C16F20
	0x03A8AAAC BL 0x1C16F20
	0x03A8AAB0 B 0x3A8AAFC
	0x03A8AAB4 B 0x3A8AAFC
	0x03A8AAB8 B 0x3A8AAFC
	0x03A8AABC B 0x3A8AAFC
	0x03A8AAC0 B 0x3A8AAFC
	0x03A8AAC4 B 0x3A8AAFC
	0x03A8AAC8 B 0x3A8AAFC
	0x03A8AACC B 0x3A8AAFC
	0x03A8AAD0 B 0x3A8AAFC
	0x03A8AAD4 B 0x3A8AAFC
	0x03A8AAD8 B 0x3A8AAFC
	0x03A8AADC B 0x3A8AAFC
	0x03A8AAE0 B 0x3A8AAFC
	0x03A8AAE4 B 0x3A8AAFC
	0x03A8AAE8 B 0x3A8AAFC
	0x03A8AAEC B 0x3A8AAFC
	0x03A8AAF0 B 0x3A8AAFC
	0x03A8AAF4 B 0x3A8AAFC
	0x03A8AAF8 B 0x3A8AAFC
	0x03A8AAFC MOV X19, X0
	0x03A8AB00 CMP W1, 0x1
	0x03A8AB04 B.NE 0x3A8AB30
	0x03A8AB08 MOV X0, X19
	0x03A8AB0C BL 0x3EB1AD0
	0x03A8AB10 LDR X20, [X0]
	0x03A8AB14 BL 0x3EB1AE0
	0x03A8AB18 ADD X0, X31, 0x8
	0x03A8AB1C MOV X1, X31
	0x03A8AB20 BL 0x39B1DB4
	0x03A8AB24 CBZ X20, 0x3A8AA74
	0x03A8AB28 MOV X0, X20
	0x03A8AB2C BL 0x1C16F18
	0x03A8AB30 MOV X20, X31
	0x03A8AB34 B 0x3A8AB3C
	0x03A8AB38 MOV X19, X0
	0x03A8AB3C ADD X0, X31, 0x8
	0x03A8AB40 MOV X1, X31
	0x03A8AB44 BL 0x39B1DB4
	0x03A8AB48 CBNZ X20, 0x3A8AB54
	0x03A8AB4C MOV X0, X19
	0x03A8AB50 BL 0x1D2C690
	0x03A8AB54 MOV X0, X20
	0x03A8AB58 BL 0x1C16F18
	0x03A8AB5C BL 0x1990590
	0x03A8AB60 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x959000
	005 Move X20, 0x6CB000
	006 Move W8, [X19+925]
	007 Move X20, [X20+3152]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x6CE000
	013 Move X0, [X0+688]
	014 Call 0x1C17CF4
	015 Move X0, 0x66A000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move X0, 0x6CB000
	019 Move X0, [X0+3152]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+925], W8
	023 Move X0, [X20]
	024 Move X19, 0x66A000
	025 Move W8, [X0+224]
	026 Move X19, [X19+1432]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X20]
	031 Move X8, [X19]
	032 Move X9, [X0+184]
	033 Move W10, [X8+224]
	034 Move X19, [X9]
	035 Compare W10, 0
	036 JumpIfNotEqual {39}
	037 Move X0, X8
	038 Call 0x1C17DFC
	039 Move X0, X19
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Equality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {75}
	047 Move X8, 0x6CE000
	048 Move X8, [X8+688]
	049 Move X0, [X8]
	050 Call 0x21E8F08
	051 Move X8, [X20]
	052 Move X19, X0
	053 Move W9, [X8+224]
	054 Compare W9, 0
	055 JumpIfEqual {58}
	056 Compare X19, 0
	057 JumpIfNotEqual {63}
	058 Move X0, X8
	059 Call 0x1C17DFC
	060 Move X8, [X20]
	061 Compare X19, 0
	062 JumpIfEqual {67}
	063 Move X9, [X19]
	064 Move W10, [X8+304]
	065 Move W11, [X9+304]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X9, X31
	068 Move X9, [X9+200]
	069 Add X9, X9, X10
	070 NotImplemented "Instruction LDUR not yet implemented."
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CSEL not yet implemented."
	073 Move X8, [X8+184]
	074 Move [X8], X9
	075 Move X0, [X20]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {81}
	079 Call 0x1C17DFC
	080 Move X0, [X20]
	081 Move X8, [X0+184]
	082 Move X20, [X31+16]
	083 Move X19, [X31+24]
	084 Move X0, [X8]
	085 Move X30, [X31+32]
	086 Return X0

Method: System.Void UpdateGraphicsSettings(UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings newSettings)

Disassembly:
	0x03A957FC FCMP S1, 0x0
	0x03A95800 FCSEL S3, S3, S0, MI
	0x03A95804 FCSEL S2, S2, S8, MI
	0x03A95808 CBZ X20, 0x3A95A94
	0x03A9580C CBZ X23, 0x3A95A94
	0x03A95810 LDR V0, [X20 + 0x34]
	0x03A95814 LDR V1, [X23 + 0x34]
	0x03A95818 B 0x3A9588C
	0x03A9581C CBZ X20, 0x3A95A94
	0x03A95820 CBZ X23, 0x3A95A94
	0x03A95824 CBZ X19, 0x3A95A94
	0x03A95828 LDR V0, [X20 + 0x34]
	0x03A9582C LDR V1, [X23 + 0x34]
	0x03A95830 FADD S0, S0, S1
	0x03A95834 FMOV S1, 0.5
	0x03A95838 FMUL S0, S0, S1
	0x03A9583C B 0x3A958F0
	0x03A95840 MOV X0, X22
	0x03A95844 MOV X1, X20
	0x03A95848 MOV X2, X23
	0x03A9584C BL 0x3A95410
	0x03A95850 MOV X0, X22
	0x03A95854 MOV X1, X21
	0x03A95858 MOV X2, X23
	0x03A9585C MOV V8.16B, V0.16B
	0x03A95860 BL 0x3A95410
	0x03A95864 FSUB S2, S8, S0
	0x03A95868 FNEG S1, S0
	0x03A9586C FNEG S4, S8
	0x03A95870 FCMP S2, 0x0
	0x03A95874 FCSEL S3, S0, S1, MI
	0x03A95878 FCSEL S2, S4, S8, MI
	0x03A9587C CBZ X20, 0x3A95A94
	0x03A95880 CBZ X21, 0x3A95A94
	0x03A95884 LDR V0, [X20 + 0x34]
	0x03A95888 LDR V1, [X21 + 0x34]
	0x03A9588C FMOV S4, W31
	0x03A95890 FMAX S2, S2, S4
	0x03A95894 FMAX S3, S3, S4
	0x03A95898 FCMP S2, S3
	0x03A9589C B.LS 0x3A958BC
	0x03A958A0 FADD S2, S2, S3
	0x03A958A4 FSUB S0, S0, S1
	0x03A958A8 FDIV S2, S3, S2
	0x03A958AC FMUL S0, S2, S0
	0x03A958B0 FADD S0, S1, S0
	0x03A958B4 CBNZ X19, 0x3A958F0
	0x03A958B8 B 0x3A95A94
	0x03A958BC FCMP S3, 0x0
	0x03A958C0 B.NE 0x3A958D8
	0x03A958C4 FADD S0, S0, S1
	0x03A958C8 FMOV S1, 0.5
	0x03A958CC FMUL S0, S0, S1
	0x03A958D0 CBNZ X19, 0x3A958F0
	0x03A958D4 B 0x3A95A94
	0x03A958D8 FADD S3, S2, S3
	0x03A958DC FSUB S1, S1, S0
	0x03A958E0 FDIV S2, S2, S3
	0x03A958E4 FMUL S1, S2, S1
	0x03A958E8 FADD S0, S0, S1
	0x03A958EC CBZ X19, 0x3A95A94
	0x03A958F0 MOV X0, X22
	0x03A958F4 MOV X1, X23
	0x03A958F8 STR S0, [X19 + 0x34]
	0x03A958FC BL 0x3A95470
	0x03A95900 ANDS W31, W0, 0x1
	0x03A95904 MOV X0, X20
	0x03A95908 MOV X1, X21
	0x03A9590C CSEL X24, X22, X23, NE
	0x03A95910 CSEL X22, X23, X22, NE
	0x03A95914 BL 0x3A95470
	0x03A95918 ANDS W31, W0, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x94E000
	007 Move X21, 0x6C0000
	008 Move W8, [X20+926]
	009 Move X21, [X21+3152]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x6C3000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move X0, 0x6C3000
	019 Move X0, [X0+1456]
	020 Call 0x1C17CF4
	021 Move X0, 0x65F000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move X0, 0x6C0000
	025 Move X0, [X0+3152]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+926], W8
	029 Move X0, [X21]
	030 Move X22, 0x65F000
	031 Move W8, [X0+224]
	032 Move X22, [X22+1432]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X21]
	037 Move X8, [X22]
	038 Move X9, [X0+184]
	039 Move W10, [X8+224]
	040 Move X20, [X9]
	041 Compare W10, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X0, X19
	046 Move X1, X20
	047 Move X2, X31
	048 Call Object.op_Equality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {83}
	053 Move X0, [X22]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, X19
	059 Move X1, X31
	060 Move X2, X31
	061 Call Object.op_Inequality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {71}
	066 Move X8, 0x6C3000
	067 Move X8, [X8+1448]
	068 Move X0, X19
	069 Move X1, [X8]
	070 Call 0x21E8FD4, X0
	071 Move X8, 0x6C3000
	072 Move X8, [X8+1456]
	073 Move X0, [X8]
	074 Call 0x21E9060
	075 Move X0, [X21]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {81}
	079 Call 0x1C17DFC
	080 Move X0, [X21]
	081 Move X8, [X0+184]
	082 Move [X8], X19
	083 Move X20, [X31+32]
	084 Move X19, [X31+40]
	085 Move X22, [X31+16]
	086 Move X21, [X31+24]
	087 Move X30, [X31+48]
	088 Return 

Method: System.Void Reset()

Disassembly:
	0x03A9591C CSEL X23, X20, X21, NE

ISIL:
No ISIL was generated
Method: System.String[] get_renderingLayerNames()

Disassembly:
	0x03A95A60 STR S0, [X19 + 0x38]
	0x03A95A64 LDP X20, X19, [X31 + 0x40]
	0x03A95A68 LDP X22, X21, [X31 + 0x30]
	0x03A95A6C LDP X24, X23, [X31 + 0x20]
	0x03A95A70 LDP X30, X25, [X31 + 0x10]
	0x03A95A74 LDR V8, [X31], #0x50
	0x03A95A78 RET
	0x03A95A7C FADD S3, S2, S3
	0x03A95A80 FSUB S1, S1, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+32]
	005 Compare X0, 0
	006 JumpIfNotEqual {10}
	007 Move X0, X19
	008 Call UniversalRenderPipelineGlobalSettings.UpdateRenderingLayerNames, X0
	009 Move X0, [X19+32]
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0

Method: System.String[] get_prefixedRenderingLayerNames()

Disassembly:
	0x03A95A84 FDIV S2, S2, S3
	0x03A95A88 FMUL S1, S2, S1
	0x03A95A8C FADD S0, S0, S1
	0x03A95A90 B 0x3A95A60
	0x03A95A94 BL 0x1C16F20
	0x03A95A98 STP X30, X23, [X31 - 0x30]!
	0x03A95A9C STP X22, X21, [X31 + 0x10]
	0x03A95AA0 STP X20, X19, [X31 + 0x20]
	0x03A95AA4 ADRP X22, 0x94D000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+40]
	005 Compare X0, 0
	006 JumpIfNotEqual {10}
	007 Move X0, X19
	008 Call UniversalRenderPipelineGlobalSettings.UpdateRenderingLayerNames, X0
	009 Move X0, [X19+40]
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0

Method: System.String[] get_renderingLayerMaskNames()

Disassembly:
	0x03A95AA8 ADRP X23, 0x6C2000
	0x03A95AAC ADRP X21, 0x6C2000
	0x03A95AB0 ADRP X20, 0x6C2000
	0x03A95AB4 LDRB W8, [X22 + 0x3AC]
	0x03A95AB8 LDR X23, [X23 + 0x5F0]
	0x03A95ABC LDR X21, [X21 + 0x5F8]
	0x03A95AC0 LDR X20, [X20 + 0x600]
	0x03A95AC4 MOV X19, X0
	0x03A95AC8 TBNZ X8, 0x0, 0x3A95AF8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+32]
	005 Compare X0, 0
	006 JumpIfNotEqual {10}
	007 Move X0, X19
	008 Call UniversalRenderPipelineGlobalSettings.UpdateRenderingLayerNames, X0
	009 Move X0, [X19+32]
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0

Method: System.String[] get_prefixedRenderingLayerMaskNames()

Disassembly:
	0x03A95ACC ADRP X0, 0x6C2000
	0x03A95AD0 LDR X0, [X0 + 0x5F8]
	0x03A95AD4 BL 0x1C16CF4
	0x03A95AD8 ADRP X0, 0x6C2000
	0x03A95ADC LDR X0, [X0 + 0x600]
	0x03A95AE0 BL 0x1C16CF4
	0x03A95AE4 ADRP X0, 0x6C2000
	0x03A95AE8 LDR X0, [X0 + 0x5F0]
	0x03A95AEC BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+40]
	005 Compare X0, 0
	006 JumpIfNotEqual {10}
	007 Move X0, X19
	008 Call UniversalRenderPipelineGlobalSettings.UpdateRenderingLayerNames, X0
	009 Move X0, [X19+40]
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0

Method: System.UInt32 get_validRenderingLayers()

Disassembly:
	0x03A95AF0 MOVZ W8, 0x1
	0x03A95AF4 STRB W8, [X22 + 0x3AC]
	0x03A95AF8 LDR X1, [X23]
	0x03A95AFC MOV X0, X19
	0x03A95B00 BL 0x24A706C
	0x03A95B04 LDR X0, [X21]
	0x03A95B08 BL 0x24A6E1C
	0x03A95B0C STR X0, [X19 + 0x10]
	0x03A95B10 MOV X21, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+40]
	004 Move X19, X0
	005 Compare X8, 0
	006 JumpIfNotEqual {9}
	007 Move X0, X19
	008 Call UniversalRenderPipelineGlobalSettings.UpdateRenderingLayerNames, X0
	009 Move W0, [X19+48]
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0

Method: System.Void UpdateRenderingLayerNames()

Disassembly:
	0x03A95920 MOV X0, X24
	0x03A95924 MOV X1, X23
	0x03A95928 CSEL X25, X21, X20, NE
	0x03A9592C BL 0x3A95470
	0x03A95930 TBZ X0, 0x0, 0x3A95948
	0x03A95934 MOV X21, X24
	0x03A95938 MOV X20, X22
	0x03A9593C MOV X24, X23
	0x03A95940 MOV X22, X25
	0x03A95944 B 0x3A95950
	0x03A95948 MOV X21, X23
	0x03A9594C MOV X20, X25
	0x03A95950 MOV X0, X24
	0x03A95954 MOV X1, X20
	0x03A95958 BL 0x3A95470
	0x03A9595C TBZ X0, 0x0, 0x3A959C0
	0x03A95960 MOV X0, X20
	0x03A95964 MOV X1, X22
	0x03A95968 BL 0x3A95470
	0x03A9596C TBZ X0, 0x0, 0x3A959D4
	0x03A95970 MOV X0, X21
	0x03A95974 MOV X1, X24
	0x03A95978 MOV X2, X20
	0x03A9597C BL 0x3A954BC
	0x03A95980 MOV X0, X24
	0x03A95984 MOV X1, X20
	0x03A95988 MOV X2, X22
	0x03A9598C MOV V8.16B, V0.16B
	0x03A95990 BL 0x3A954BC
	0x03A95994 FADD S1, S8, S0
	0x03A95998 FNEG S2, S8
	0x03A9599C FNEG S3, S0
	0x03A959A0 FCMP S1, 0x0
	0x03A959A4 FCSEL S3, S3, S0, MI
	0x03A959A8 FCSEL S2, S2, S8, MI
	0x03A959AC CBZ X24, 0x3A95A94
	0x03A959B0 CBZ X20, 0x3A95A94
	0x03A959B4 LDR V0, [X24 + 0x38]
	0x03A959B8 LDR V1, [X20 + 0x38]
	0x03A959BC B 0x3A95A20
	0x03A959C0 CBZ X24, 0x3A95A94
	0x03A959C4 CBZ X20, 0x3A95A94
	0x03A959C8 LDR V0, [X24 + 0x38]
	0x03A959CC LDR V1, [X20 + 0x38]
	0x03A959D0 B 0x3A95A54
	0x03A959D4 MOV X0, X21
	0x03A959D8 MOV X1, X24
	0x03A959DC MOV X2, X20
	0x03A959E0 BL 0x3A9552C
	0x03A959E4 MOV X0, X21
	0x03A959E8 MOV X1, X22
	0x03A959EC MOV X2, X20
	0x03A959F0 MOV V8.16B, V0.16B
	0x03A959F4 BL 0x3A9552C
	0x03A959F8 FSUB S2, S8, S0
	0x03A959FC FNEG S1, S0
	0x03A95A00 FNEG S4, S8
	0x03A95A04 FCMP S2, 0x0
	0x03A95A08 FCSEL S3, S0, S1, MI
	0x03A95A0C FCSEL S2, S4, S8, MI
	0x03A95A10 CBZ X24, 0x3A95A94
	0x03A95A14 CBZ X22, 0x3A95A94
	0x03A95A18 LDR V0, [X24 + 0x38]
	0x03A95A1C LDR V1, [X22 + 0x38]
	0x03A95A20 FMOV S4, W31
	0x03A95A24 FMAX S2, S2, S4
	0x03A95A28 FMAX S3, S3, S4
	0x03A95A2C FCMP S2, S3
	0x03A95A30 B.LS 0x3A95A4C
	0x03A95A34 FADD S2, S2, S3
	0x03A95A38 FSUB S0, S0, S1
	0x03A95A3C FDIV S2, S3, S2
	0x03A95A40 FMUL S0, S2, S0
	0x03A95A44 FADD S0, S1, S0
	0x03A95A48 B 0x3A95A60
	0x03A95A4C FCMP S3, 0x0
	0x03A95A50 B.NE 0x3A95A7C
	0x03A95A54 FADD S0, S0, S1
	0x03A95A58 FMOV S1, 0.5
	0x03A95A5C FMUL S0, S0, S1

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x94E000
	009 Move W8, [X20+927]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x65F000
	016 Move X0, [X0+1880]
	017 Call 0x1C17CF4
	018 Move X0, 0x65F000
	019 Move X0, [X0+2760]
	020 Call 0x1C17CF4
	021 Move X0, 0x6C3000
	022 Move X0, [X0+1464]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+927], W8
	026 Move X20, [X19+40]
	027 Compare X20, 0
	028 JumpIfNotEqual {38}
	029 Move X8, 0x65F000
	030 Move X8, [X8+2760]
	031 Move W1, 32
	032 Move X0, [X8]
	033 Call 0x1C17D6C
	034 Move X20, X0
	035 Move [X19+40], X0
	036 Compare X0, 0
	037 JumpIfEqual {77}
	038 Move X22, 0x65F000
	039 Move X23, 0x6C3000
	040 Move X22, [X22+1880]
	041 Move X23, [X23+1464]
	042 Move X21, X31
	043 Move W24, 1
	044 Move W8, [X20+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X9, [X19+32]
	047 Compare X9, 0
	048 JumpIfEqual {77}
	049 Move W11, [X19+48]
	050 Move W10, [X9+24]
	051 NotImplemented "Instruction LSLV not yet implemented."
	052 Or W13, W11, W12
	053 NotImplemented "Instruction BIC not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CSEL not yet implemented."
	056 Move [X19+48], W11
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Add X9, X9, X21
	059 Move X0, [X9+32]
	060 Move X0, [X22]
	061 Add X1, X31, 12
	062 Move [X31+12], W21
	063 Call 0x1C17E04
	064 Move X8, [X23]
	065 Move X1, X0
	066 Move X2, X31
	067 Move X0, X8
	068 Call String.Format, X0, X1
	069 Move W8, [X20+24]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Add X8, X20, X21
	072 Move [X8+32], X0
	073 Move X20, [X19+40]
	074 Add X21, X21, 1
	075 Compare X20, 0
	076 JumpIfNotEqual {44}
	077 Call 0x1C17F20
	078 Move X0, X31
	079 Call DecalProjector.UpdateAllDecalProperties
	080 Move X20, [X31+48]
	081 Move X19, [X31+56]
	082 Move X22, [X31+32]
	083 Move X21, [X31+40]
	084 Move X24, [X31+16]
	085 Move X23, [X31+24]
	086 Move X30, [X31+64]
	087 Return 
	088 Call 0x1C17F28

Method: System.String[] get_prefixedLightLayerNames()

Disassembly:
	0x03A95B14 LDR X0, [X20]
	0x03A95B18 BL 0x24A6E1C
	0x03A95B1C MOV X20, X0
	0x03A95B20 STR X0, [X19 + 0x18]
	0x03A95B24 BL 0x3A95B80
	0x03A95B28 STP X0, X1, [X19 + 0x20]
	0x03A95B2C CBZ X21, 0x3A95B7C
	0x03A95B30 STP X21, X21, [X21 + 0x10]
	0x03A95B34 STR X31, [X21 + 0x20]
	0x03A95B38 CBZ X20, 0x3A95B7C
	0x03A95B3C STP X20, X20, [X20 + 0x10]
	0x03A95B40 STP X31, X31, [X20 + 0x20]
	0x03A95B44 STRH W31, [X20 + 0x34]
	0x03A95B48 CBZ X0, 0x3A95B7C
	0x03A95B4C MOVI V0.2D, 0x0
	0x03A95B50 STP X0, X1, [X0 + 0x20]
	0x03A95B54 STP V0, V0, [X0 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x94E000
	005 Move X20, 0x65F000
	006 Move W8, [X19+928]
	007 Move X20, [X20+2760]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x65F000
	013 Move X0, [X0+2760]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+928], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W1, W31
	021 Move X30, [X31+32]
	022 Call 0x1C17D6C
	023 Return X0

Method: System.String[] get_lightLayerNames()

Disassembly:
	0x03A95B58 STUR V0, [X0 + 0x4C]
	0x03A95B5C CBZ X1, 0x3A95B7C
	0x03A95B60 LDP X20, X19, [X31 + 0x20]
	0x03A95B64 LDP X22, X21, [X31 + 0x10]
	0x03A95B68 STP X1, X0, [X1 + 0x20]
	0x03A95B6C STP V0, V0, [X1 + 0x30]
	0x03A95B70 STUR V0, [X1 + 0x4C]
	0x03A95B74 LDP X30, X23, [X31], #0x30
	0x03A95B78 RET
	0x03A95B7C BL 0x1C16F20
	0x03A95B80 STR X30, [X31 - 0x20]!
	0x03A95B84 STP X20, X19, [X31 + 0x10]
	0x03A95B88 ADRP X19, 0x94D000
	0x03A95B8C ADRP X20, 0x6C2000
	0x03A95B90 LDRB W8, [X19 + 0x3BA]
	0x03A95B94 LDR X20, [X20 + 0x608]
	0x03A95B98 TBNZ X8, 0x0, 0x3A95BB0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x94E000
	005 Move X20, 0x65F000
	006 Move W8, [X19+929]
	007 Move X20, [X20+2760]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x65F000
	013 Move X0, [X0+2760]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+929], W8
	017 Move X0, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W1, W31
	021 Move X30, [X31+32]
	022 Call 0x1C17D6C
	023 Return X0

Method: System.Void ResetRenderingLayerNames()

Disassembly:
	0x03A95B9C ADRP X0, 0x6C2000
	0x03A95BA0 LDR X0, [X0 + 0x608]
	0x03A95BA4 BL 0x1C16CF4
	0x03A95BA8 MOVZ W8, 0x1
	0x03A95BAC STRB W8, [X19 + 0x3BA]
	0x03A95BB0 LDR X0, [X20]
	0x03A95BB4 BL 0x24A6E1C
	0x03A95BB8 CBZ X0, 0x3A95BE8
	0x03A95BBC STP X0, X31, [X0 + 0x10]
	0x03A95BC0 MOV X19, X0
	0x03A95BC4 LDR X0, [X20]
	0x03A95BC8 BL 0x24A6E1C
	0x03A95BCC CBZ X0, 0x3A95BE8
	0x03A95BD0 MOV X1, X0
	0x03A95BD4 STP X19, X0, [X0 + 0x10]
	0x03A95BD8 MOV X0, X19
	0x03A95BDC LDP X20, X19, [X31 + 0x10]
	0x03A95BE0 LDR X30, [X31], #0x20
	0x03A95BE4 RET
	0x03A95BE8 BL 0x1C16F20
	0x03A95BEC MOVI V0.2D, 0x0
	0x03A95BF0 STP V0, V0, [X0 + 0x10]
	0x03A95BF4 RET
	0x03A95BF8 STP X30, X21, [X31 - 0x20]!
	0x03A95BFC STP X20, X19, [X31 + 0x10]
	0x03A95C00 ADRP X20, 0x94D000
	0x03A95C04 LDRB W8, [X20 + 0x3AD]
	0x03A95C08 MOV X19, X0
	0x03A95C0C TBNZ X8, 0x0, 0x3A95C3C
	0x03A95C10 ADRP X0, 0x6C2000
	0x03A95C14 LDR X0, [X0 + 0x610]
	0x03A95C18 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x94E000
	006 Move X21, 0x65F000
	007 Move W8, [X20+930]
	008 Move X21, [X21+2760]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x65F000
	015 Move X0, [X0+2760]
	016 Call 0x1C17CF4
	017 Move X0, 0x687000
	018 Move X0, [X0+104]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+930], W8
	022 Move X0, [X21]
	023 Move W1, 1
	024 Call 0x1C17D6C
	025 Compare X0, 0
	026 JumpIfEqual {40}
	027 Move W8, [X0+24]
	028 Compare W8, 0
	029 JumpIfEqual {41}
	030 Move X8, 0x687000
	031 Move X8, [X8+104]
	032 Move X8, [X8]
	033 Move [X0+32], X8
	034 Move [X19+32], X0
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return 
	040 Call 0x1C17F20
	041 Call 0x1C17F28

Method: System.Boolean get_stripDebugVariants()

Disassembly:
	0x03A95C1C ADRP X0, 0x6C2000
	0x03A95C20 LDR X0, [X0 + 0x618]

ISIL:
	001 Move W0, [X0+120]
	002 Return X0

Method: System.Void set_stripDebugVariants(System.Boolean value)

Disassembly:
	0x03A95C24 BL 0x1C16CF4
	0x03A95C28 ADRP X0, 0x6C2000
	0x03A95C2C LDR X0, [X0 + 0x620]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+120], W8
	003 Return 

Method: System.Boolean get_stripUnusedPostProcessingVariants()

Disassembly:
	0x03A95C30 BL 0x1C16CF4
	0x03A95C34 MOVZ W8, 0x1

ISIL:
	001 Move W0, [X0+121]
	002 Return X0

Method: System.Void set_stripUnusedPostProcessingVariants(System.Boolean value)

Disassembly:
	0x03A95C38 STRB W8, [X20 + 0x3AD]
	0x03A95C3C LDR X8, [X19 + 0x18]
	0x03A95C40 CBZ X8, 0x3A95CFC

ISIL:
	001 And W8, W1, 1
	002 Move [X0+121], W8
	003 Return 

Method: System.Boolean get_stripUnusedVariants()

Disassembly:
	0x03A95C44 LDR X0, [X8 + 0x18]
	0x03A95C48 CMP X0, X8

ISIL:
	001 Move W0, [X0+122]
	002 Return X0

Method: System.Void set_stripUnusedVariants(System.Boolean value)

Disassembly:
	0x03A95C4C B.EQ 0x3A95C78
	0x03A95C50 ADRP X20, 0x6C2000
	0x03A95C54 LDR X20, [X20 + 0x620]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+122], W8
	003 Return 

Method: System.Boolean get_stripUnusedLODCrossFadeVariants()

Disassembly:
	0x03A95C58 CBZ X0, 0x3A95CFC
	0x03A95C5C LDR X1, [X20]

ISIL:
	001 Move W0, [X0+123]
	002 Return X0

Method: System.Void set_stripUnusedLODCrossFadeVariants(System.Boolean value)

Disassembly:
	0x03A95C60 LDR X21, [X0 + 0x18]
	0x03A95C64 BL 0x24A6F24
	0x03A95C68 LDR X8, [X19 + 0x18]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+123], W8
	003 Return 

Method: System.Boolean get_stripScreenCoordOverrideVariants()

Disassembly:
	0x03A95C6C MOV X0, X21
	0x03A95C70 CMP X21, X8

ISIL:
	001 Move W0, [X0+124]
	002 Return X0

Method: System.Void set_stripScreenCoordOverrideVariants(System.Boolean value)

Disassembly:
	0x03A95C74 B.NE 0x3A95C58
	0x03A95C78 LDR X8, [X19 + 0x10]
	0x03A95C7C CBZ X8, 0x3A95CFC

ISIL:
	001 And W8, W1, 1
	002 Move [X0+124], W8
	003 Return 

Method: UnityEngine.Rendering.ShaderVariantLogLevel get_shaderVariantLogLevel()

Disassembly:
	0x03A95C80 LDR X0, [X8 + 0x18]
	0x03A95C84 CMP X0, X8

ISIL:
	001 Move W0, [X0+128]
	002 Return X0

Method: System.Void set_shaderVariantLogLevel(UnityEngine.Rendering.ShaderVariantLogLevel value)

Disassembly:
	0x03A95C88 B.EQ 0x3A95CB4
	0x03A95C8C ADRP X20, 0x6C2000

ISIL:
	001 Move [X0+128], W1
	002 Return 

Method: System.Boolean get_exportShaderVariants()

Disassembly:
	0x03A95C90 LDR X20, [X20 + 0x610]
	0x03A95C94 CBZ X0, 0x3A95CFC

ISIL:
	001 Move W0, [X0+132]
	002 Return X0

Method: System.Void set_exportShaderVariants(System.Boolean value)

Disassembly:
	0x03A95C98 LDR X1, [X20]
	0x03A95C9C LDR X21, [X0 + 0x18]
	0x03A95CA0 BL 0x24A6F24

ISIL:
	001 Move W8, 1
	002 Move [X0+132], W8
	003 Return 

Method: System.Void .ctor()

Disassembly:
	0x03A95CA4 LDR X8, [X19 + 0x10]
	0x03A95CA8 MOV X0, X21
	0x03A95CAC CMP X21, X8
	0x03A95CB0 B.NE 0x3A95C94
	0x03A95CB4 LDR X8, [X19 + 0x20]
	0x03A95CB8 CBZ X8, 0x3A95CFC
	0x03A95CBC LDR X0, [X8 + 0x20]
	0x03A95CC0 CMP X0, X8
	0x03A95CC4 B.EQ 0x3A95CF0
	0x03A95CC8 ADRP X20, 0x6C2000
	0x03A95CCC LDR X20, [X20 + 0x618]
	0x03A95CD0 CBZ X0, 0x3A95CFC
	0x03A95CD4 LDR X1, [X20]
	0x03A95CD8 LDR X21, [X0 + 0x20]
	0x03A95CDC BL 0x24A6F24
	0x03A95CE0 LDR X8, [X19 + 0x20]
	0x03A95CE4 MOV X0, X21
	0x03A95CE8 CMP X21, X8
	0x03A95CEC B.NE 0x3A95CD0
	0x03A95CF0 LDP X20, X19, [X31 + 0x10]
	0x03A95CF4 LDP X30, X21, [X31], #0x20
	0x03A95CF8 RET
	0x03A95CFC BL 0x1C16F20
	0x03A95D00 STR X30, [X31 - 0x20]!
	0x03A95D04 STP X20, X19, [X31 + 0x10]
	0x03A95D08 MOV X19, X0
	0x03A95D0C LDR X0, [X0 + 0x20]
	0x03A95D10 BL 0x3A95D50
	0x03A95D14 LDR X1, [X19 + 0x10]
	0x03A95D18 MOV X20, X0
	0x03A95D1C BL 0x3A95DD0
	0x03A95D20 CBZ X20, 0x3A95D4C
	0x03A95D24 LDR X0, [X20 + 0x28]
	0x03A95D28 LDR X1, [X19 + 0x10]
	0x03A95D2C BL 0x3A95DD0
	0x03A95D30 LDR X1, [X19 + 0x18]
	0x03A95D34 MOV X0, X20
	0x03A95D38 BL 0x3A95E64
	0x03A95D3C MOV X0, X20
	0x03A95D40 LDP X20, X19, [X31 + 0x10]
	0x03A95D44 LDR X30, [X31], #0x20
	0x03A95D48 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x94E000
	006 Move X20, 0x65F000
	007 Move W8, [X21+931]
	008 Move X20, [X20+2760]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x65F000
	015 Move X0, [X0+2760]
	016 Call 0x1C17CF4
	017 Move X0, 0x687000
	018 Move X0, [X0+104]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+931], W8
	022 Move W8, 3
	023 Move [X19+24], W8
	024 Move X0, [X20]
	025 Move W1, 1
	026 Call 0x1C17D6C
	027 Compare X0, 0
	028 JumpIfEqual {51}
	029 Move W8, [X0+24]
	030 Compare W8, 0
	031 JumpIfEqual {52}
	032 Move X8, 0x687000
	033 Move X8, [X8+104]
	034 Move W9, 1
	035 Move W10, 257
	036 Move X1, X31
	037 Move X8, [X8]
	038 Move [X0+32], X8
	039 Move [X19+32], X0
	040 Move [X19+120], W9
	041 NotImplemented "Instruction STRH not yet implemented."
	042 Move [X19+124], W9
	043 Move [X19+132], W9
	044 Move X0, X19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call RenderPipelineGlobalSettings..ctor, X0
	050 Return 
	051 Call 0x1C17F20
	052 Call 0x1C17F28

Method: System.Void .cctor()

Disassembly:
	0x03A95D4C BL 0x1C16F20
	0x03A95D50 STP X30, X19, [X31 - 0x10]!
	0x03A95D54 MOV X19, X0
	0x03A95D58 BL 0x3A95B80
	0x03A95D5C CBZ X19, 0x3A95DCC
	0x03A95D60 LDR X8, [X19 + 0x18]
	0x03A95D64 CMP X19, X8
	0x03A95D68 B.NE 0x3A95D74
	0x03A95D6C LDR X19, [X19 + 0x28]
	0x03A95D70 CBZ X19, 0x3A95DCC
	0x03A95D74 LDR X8, [X19 + 0x28]
	0x03A95D78 CBZ X8, 0x3A95DCC
	0x03A95D7C CBZ X1, 0x3A95DCC
	0x03A95D80 LDR X9, [X8 + 0x20]
	0x03A95D84 STR X9, [X1 + 0x20]
	0x03A95D88 CBZ X9, 0x3A95DCC
	0x03A95D8C LDR X9, [X9 + 0x28]
	0x03A95D90 CBZ X9, 0x3A95DCC
	0x03A95D94 STR X0, [X9 + 0x20]
	0x03A95D98 CBZ X0, 0x3A95DCC
	0x03A95D9C STR X19, [X0 + 0x20]
	0x03A95DA0 STR X1, [X8 + 0x20]
	0x03A95DA4 STP X1, X0, [X0 + 0x28]
	0x03A95DA8 STP X1, X31, [X0 + 0x38]
	0x03A95DAC STP X31, X31, [X0 + 0x48]
	0x03A95DB0 STR W31, [X0 + 0x58]
	0x03A95DB4 STP X0, X1, [X1 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x94E000
	006 Move X20, 0x6C0000
	007 Move X19, 0x6C3000
	008 Move W8, [X21+932]
	009 Move X20, [X20+3152]
	010 Move X19, [X19+1472]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x6C0000
	016 Move X0, [X0+3152]
	017 Call 0x1C17CF4
	018 Move X0, 0x6C3000
	019 Move X0, [X0+1472]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+932], W8
	023 Move X8, [X20]
	024 Move X8, [X8+184]
	025 Move [X8], X31
	026 Move X8, [X20]
	027 Move X9, [X19]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X8, [X8+184]
	031 Move [X8+8], X9
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 

