Type: UnityEngine.Rendering.Universal.Clipper

Method: System.Void .ctor(System.Int32 InitOptions = 0)

Disassembly:
	0x03A0798C CBNZ X0, 0x3A0796C
	0x03A07990 B 0x3A07968
	0x03A07994 LDP X20, X19, [X31 + 0xE0]
	0x03A07998 LDP X22, X21, [X31 + 0xD0]
	0x03A0799C LDP X24, X23, [X31 + 0xC0]
	0x03A079A0 LDP X26, X25, [X31 + 0xB0]
	0x03A079A4 LDP X28, X27, [X31 + 0xA0]
	0x03A079A8 LDP X29, X30, [X31 + 0x90]
	0x03A079AC ADD X31, X31, 0xF0
	0x03A079B0 RET
	0x03A079B4 BL 0x1C16F20
	0x03A079B8 STR X30, [X31 - 0x10]!
	0x03A079BC CBZ X1, 0x3A07A0C
	0x03A079C0 LDR X8, [X1 + 0x18]
	0x03A079C4 CBZ X8, 0x3A07A04
	0x03A079C8 LDRB W9, [X1 + 0x14]
	0x03A079CC LDRB W10, [X8 + 0x14]
	0x03A079D0 CMP W9, W10
	0x03A079D4 B.EQ 0x3A079E0
	0x03A079D8 LDR X11, [X8 + 0x20]
	0x03A079DC CBNZ X11, 0x3A07A04
	0x03A079E0 CMP W9, W10, UXTB
	0x03A079E4 B.EQ 0x3A079F0
	0x03A079E8 LDR X10, [X8 + 0x20]
	0x03A079EC CBNZ X10, 0x3A07A00
	0x03A079F0 LDR X8, [X8 + 0x18]
	0x03A079F4 CBZ X8, 0x3A07A00
	0x03A079F8 LDRB W10, [X8 + 0x14]
	0x03A079FC B 0x3A079E0
	0x03A07A00 STR X8, [X1 + 0x18]
	0x03A07A04 LDR X30, [X31], #0x10
	0x03A07A08 RET
	0x03A07A0C BL 0x1C16F20
	0x03A07A10 STR X29, [X31 - 0x50]!
	0x03A07A14 STP X30, X25, [X31 + 0x10]
	0x03A07A18 STP X24, X23, [X31 + 0x20]
	0x03A07A1C STP X22, X21, [X31 + 0x30]
	0x03A07A20 STP X20, X19, [X31 + 0x40]
	0x03A07A24 SUB X31, X31, 0x330
	0x03A07A28 ADRP X21, 0x9DA000
	0x03A07A2C LDRB W8, [X21 + 0xF7D]
	0x03A07A30 MOV X19, X1
	0x03A07A34 MOV X20, X0
	0x03A07A38 TBNZ X8, 0x0, 0x3A07A5C
	0x03A07A3C ADRP X0, 0x74D000
	0x03A07A40 LDR X0, [X0 + 0x340]
	0x03A07A44 BL 0x1C16CF4
	0x03A07A48 ADRP X0, 0x74D000
	0x03A07A4C LDR X0, [X0 + 0x348]
	0x03A07A50 BL 0x1C16CF4
	0x03A07A54 MOVZ W8, 0x1
	0x03A07A58 STRB W8, [X21 + 0xF7D]
	0x03A07A5C LDR X8, [X20 + 0x18]
	0x03A07A60 CBZ X8, 0x3A07EB8
	0x03A07A64 ADRP X25, 0x74D000
	0x03A07A68 LDR X25, [X25 + 0x348]
	0x03A07A6C LDR X9, [X8 + 0x10]
	0x03A07A70 CMP X9, X19
	0x03A07A74 B.NE 0x3A07EB8
	0x03A07A78 LDR X9, [X8 + 0x28]
	0x03A07A7C MOV X0, X20
	0x03A07A80 STR X9, [X20 + 0x18]
	0x03A07A84 LDP X21, X22, [X8 + 0x18]
	0x03A07A88 CBZ X21, 0x3A07AFC
	0x03A07A8C MOV X1, X21
	0x03A07A90 MOV X2, X31
	0x03A07A94 BL 0x3A08FF0
	0x03A07A98 MOV X0, X20
	0x03A07A9C CBZ X22, 0x3A07B50
	0x03A07AA0 MOV X1, X22
	0x03A07AA4 MOV X2, X21
	0x03A07AA8 BL 0x3A08FF0
	0x03A07AAC MOV X0, X20
	0x03A07AB0 MOV X1, X21
	0x03A07AB4 BL 0x3A09098
	0x03A07AB8 LDUR V0, [X21 + 0xE4]
	0x03A07ABC MOV X0, X20
	0x03A07AC0 MOV X1, X21
	0x03A07AC4 STUR D0, [X22 + 0xE4]
	0x03A07AC8 BL 0x3A092E8
	0x03A07ACC TBZ X0, 0x0, 0x3A07B98
	0x03A07AD0 LDP V1, V0, [X21 + 0x20]
	0x03A07AD4 LDR V2, [X21 + 0x1]
	0x03A07AD8 ADD X3, X31, 0x2A0
	0x03A07ADC MOV X0, X20
	0x03A07AE0 MOV X1, X21
	0x03A07AE4 MOV X2, X22
	0x03A07AE8 STP V1, V0, [X31 + 0x2B0]
	0x03A07AEC STR V2, [X31 + 0x2A]
	0x03A07AF0 BL 0x3A09628
	0x03A07AF4 MOV X23, X0
	0x03A07AF8 B 0x3A07B9C
	0x03A07AFC MOV X1, X22
	0x03A07B00 MOV X2, X31
	0x03A07B04 BL 0x3A08FF0
	0x03A07B08 MOV X0, X20
	0x03A07B0C MOV X1, X22
	0x03A07B10 BL 0x3A09098
	0x03A07B14 MOV X0, X20

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X28, 0x9DB000
	013 Move X27, 0x74E000
	014 Move X21, 0x74E000
	015 Move X26, 0x74E000
	016 Move X25, 0x74E000
	017 Move X24, 0x74E000
	018 Move X23, 0x74E000
	019 Move X22, 0x74E000
	020 Move X27, [X27+648]
	021 Move X21, [X21+656]
	022 Move W8, [X28+3958]
	023 Move X26, [X26+664]
	024 Move X25, [X25+672]
	025 Move X24, [X24+680]
	026 Move X23, [X23+688]
	027 Move X22, [X22+696]
	028 Move W20, W1
	029 Move X19, X0
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {57}
	034 Move X0, 0x74E000
	035 Move X0, [X0+656]
	036 Call 0x1C17CF4
	037 Move X0, 0x74E000
	038 Move X0, [X0+680]
	039 Call 0x1C17CF4
	040 Move X0, 0x74E000
	041 Move X0, [X0+696]
	042 Call 0x1C17CF4
	043 Move X0, 0x74E000
	044 Move X0, [X0+648]
	045 Call 0x1C17CF4
	046 Move X0, 0x74E000
	047 Move X0, [X0+688]
	048 Call 0x1C17CF4
	049 Move X0, 0x74E000
	050 Move X0, [X0+672]
	051 Call 0x1C17CF4
	052 Move X0, 0x74E000
	053 Move X0, [X0+664]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X28+3958], W8
	057 Move X0, X19
	058 Call ClipperBase..ctor, X0
	059 Move [X19+40], X31
	060 Move [X19+56], X31
	061 Move [X19+72], X31
	062 Move [X19+80], X31
	063 Move X0, [X27]
	064 Call 0x1C17F10
	065 Move X1, [X21]
	066 Move X21, X0
	067 Call List`1<Object>..ctor, X0
	068 Move [X19+88], X21
	069 Move X0, [X26]
	070 Call 0x1C17F10
	071 Move X1, X31
	072 Move X21, X0
	073 Call Object..ctor, X0
	074 Move [X19+96], X21
	075 Move [X19+104], W31
	076 Move [X19+136], W31
	077 Move X0, [X25]
	078 Call 0x1C17F10
	079 Move X1, [X24]
	080 Move X21, X0
	081 Call List`1<Object>..ctor, X0
	082 Move [X19+48], X21
	083 Move X0, [X23]
	084 Call 0x1C17F10
	085 Move X1, [X22]
	086 Move X21, X0
	087 Call List`1<Object>..ctor, X0
	088 Move [X19+120], X21
	089 Move X0, [X23]
	090 Call 0x1C17F10
	091 Move X1, [X22]
	092 Move X21, X0
	093 Call List`1<Object>..ctor, X0
	094 And W8, W20, 255
	095 And W9, W20, 1
	096 Move [X19+144], W9
	097 Move W9, W8
	098 ShiftRight W9, 1
	099 And W9, W9, 1
	100 Move W8, W8
	101 ShiftRight W8, 2
	102 And W8, W8, 3
	103 Move [X19+128], X21
	104 Move [X19+145], W9
	105 Move [X19+66], W8
	106 Move X20, [X31+80]
	107 Move X19, [X31+88]
	108 Move X22, [X31+64]
	109 Move X21, [X31+72]
	110 Move X24, [X31+48]
	111 Move X23, [X31+56]
	112 Move X26, [X31+32]
	113 Move X25, [X31+40]
	114 Move X28, [X31+16]
	115 Move X27, [X31+24]
	116 Move X30, [X31+96]
	117 Return 

Method: System.Void InsertMaxima(System.Int64 X)

Disassembly:
	0x03A07B18 MOV X1, X22
	0x03A07B1C BL 0x3A092E8
	0x03A07B20 TBZ X0, 0x0, 0x3A07BAC
	0x03A07B24 CBZ X22, 0x3A07ED4
	0x03A07B28 LDP V1, V0, [X22 + 0x20]
	0x03A07B2C LDR V2, [X22 + 0x1]
	0x03A07B30 ADD X2, X31, 0x300
	0x03A07B34 MOV X0, X20
	0x03A07B38 MOV X1, X22
	0x03A07B3C STP V1, V0, [X31 + 0x310]
	0x03A07B40 STR V2, [X31 + 0x30]
	0x03A07B44 BL 0x3A09454
	0x03A07B48 MOV X23, X0
	0x03A07B4C B 0x3A07BB4
	0x03A07B50 MOV X1, X21
	0x03A07B54 BL 0x3A09098
	0x03A07B58 MOV X0, X20
	0x03A07B5C MOV X1, X21
	0x03A07B60 BL 0x3A092E8
	0x03A07B64 TBZ X0, 0x0, 0x3A07B88
	0x03A07B68 LDP V1, V0, [X21 + 0x20]
	0x03A07B6C LDR V2, [X21 + 0x1]
	0x03A07B70 ADD X2, X31, 0x2D0
	0x03A07B74 MOV X0, X20
	0x03A07B78 MOV X1, X21
	0x03A07B7C STP V1, V0, [X31 + 0x2E0]
	0x03A07B80 STR V2, [X31 + 0x2D]
	0x03A07B84 BL 0x3A09454
	0x03A07B88 LDR X1, [X21 + 0x80]
	0x03A07B8C MOV X0, X20
	0x03A07B90 BL 0x3A061A0
	0x03A07B94 B 0x3A07DF8
	0x03A07B98 MOV X23, X31
	0x03A07B9C LDR X1, [X21 + 0x80]
	0x03A07BA0 MOV X0, X20
	0x03A07BA4 BL 0x3A061A0
	0x03A07BA8 B 0x3A07BB4
	0x03A07BAC CBZ X22, 0x3A07DF8
	0x03A07BB0 MOV X23, X31
	0x03A07BB4 LDR X8, [X22 + 0xB0]
	0x03A07BB8 CBZ X8, 0x3A07BD0
	0x03A07BBC LDR X1, [X22 + 0x80]
	0x03A07BC0 MOV X0, X20
	0x03A07BC4 BL 0x3A061A0
	0x03A07BC8 CBNZ X21, 0x3A07BF4
	0x03A07BCC B 0x3A07DF8
	0x03A07BD0 LDR X8, [X22 + 0x100]
	0x03A07BD4 CBZ X8, 0x3A07BE4
	0x03A07BD8 LDR X1, [X8 + 0x80]
	0x03A07BDC MOV X0, X20
	0x03A07BE0 BL 0x3A061A0
	0x03A07BE4 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x9DB000
	007 Move X22, 0x74E000
	008 Move W8, [X19+3959]
	009 Move X22, [X22+704]
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x74E000
	017 Move X0, [X0+704]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+3959], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X19, X0
	025 Call Object..ctor, X0
	026 Compare X19, 0
	027 JumpIfEqual {61}
	028 Move [X19+16], X20
	029 Move X8, [X21+72]
	030 Compare X8, 0
	031 JumpIfEqual {52}
	032 Move X9, [X8+16]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move [X19+24], X8
	035 Move [X19+32], X31
	036 Move [X21+72], X19
	037 Move X9, X8
	038 Move X8, [X8+24]
	039 Compare X8, 0
	040 JumpIfEqual {43}
	041 Move X10, [X8+16]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X10, [X9+16]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move [X19+24], X8
	046 Move [X19+32], X9
	047 Move X8, [X9+24]
	048 Compare X8, 0
	049 JumpIfEqual {51}
	050 Move [X8+32], X19
	051 Move [X9+24], X19
	052 Move [X21+72], X19
	053 Move [X19+24], X31
	054 Move [X19+32], X31
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 Return 
	061 Call 0x1C17F20

Method: System.Int32 get_LastIndex()

Disassembly:
	0x03A07BE8 MOV X1, X22
	0x03A07BEC BL 0x3A09818

ISIL:
	001 Move W0, [X0+140]
	002 Return X0

Method: System.Void set_LastIndex(System.Int32 value)

Disassembly:
	0x03A07BF0 CBZ X21, 0x3A07DF8
	0x03A07BF4 CBZ X23, 0x3A07C00

ISIL:
	001 Move [X0+140], W1
	002 Return 

Method: System.Boolean get_ReverseSolution()

Disassembly:
	0x03A07BF8 LDR X8, [X22 + 0xB0]
	0x03A07BFC CBZ X8, 0x3A07E04

ISIL:
	001 Move W0, [X0+144]
	002 Return X0

Method: System.Void set_ReverseSolution(System.Boolean value)

Disassembly:
	0x03A07C00 LDR W8, [X21 + 0xEC]
	0x03A07C04 TBNZ X8, 0x1F, 0x3A07CDC
	0x03A07C08 LDR X8, [X21 + 0x110]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+144], W8
	003 Return 

Method: System.Boolean get_StrictlySimple()

Disassembly:
	0x03A07C0C CBZ X8, 0x3A07CDC
	0x03A07C10 LDR X9, [X8 + 0x48]

ISIL:
	001 Move W0, [X0+145]
	002 Return X0

Method: System.Void set_StrictlySimple(System.Boolean value)

Disassembly:
	0x03A07C14 LDR X10, [X21 + 0x18]
	0x03A07C18 CMP X9, X10
	0x03A07C1C B.NE 0x3A07CDC

ISIL:
	001 And W8, W1, 1
	002 Move [X0+145], W8
	003 Return 

Method: System.Boolean Execute(UnityEngine.Rendering.Universal.ClipType clipType, System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> solution, UnityEngine.Rendering.Universal.PolyFillType FillType = 0)

Disassembly:
	0x03A07C20 LDR W9, [X8 + 0xEC]
	0x03A07C24 TBNZ X9, 0x1F, 0x3A07CDC

ISIL:
	001 Move W4, W3

Method: System.Boolean Execute(UnityEngine.Rendering.Universal.ClipType clipType, UnityEngine.Rendering.Universal.PolyTree polytree, UnityEngine.Rendering.Universal.PolyFillType FillType = 0)

Disassembly:
	0x03A07DC0 ADD X21, X21, 0x40
	0x03A07DC4 LDP V1, V0, [X21 + 0x10]

ISIL:
	001 Move W4, W3

Method: System.Boolean Execute(UnityEngine.Rendering.Universal.ClipType clipType, System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> solution, UnityEngine.Rendering.Universal.PolyFillType subjFillType, UnityEngine.Rendering.Universal.PolyFillType clipFillType)

Disassembly:
	0x03A07C28 LDP V1, V0, [X8 + 0x50]
	0x03A07C2C LDR V3, [X8 + 0x4]
	0x03A07C30 ADD X0, X31, 0x240
	0x03A07C34 ADD X1, X31, 0x210
	0x03A07C38 STP V1, V0, [X31 + 0x250]
	0x03A07C3C LDP V1, V0, [X8 + 0x80]
	0x03A07C40 LDR V2, [X8 + 0x7]
	0x03A07C44 ADD X2, X31, 0x1E0
	0x03A07C48 ADD X3, X31, 0x1B0
	0x03A07C4C STP V0, V3, [X31 + 0x230]
	0x03A07C50 STP V2, V1, [X31 + 0x210]
	0x03A07C54 LDP V1, V0, [X21 + 0x50]
	0x03A07C58 LDR V3, [X21 + 0x4]
	0x03A07C5C STP V1, V0, [X31 + 0x1F0]
	0x03A07C60 LDP V1, V0, [X21 + 0x80]
	0x03A07C64 LDR V2, [X21 + 0x7]
	0x03A07C68 STP V0, V3, [X31 + 0x1D0]
	0x03A07C6C STP V2, V1, [X31 + 0x1B0]
	0x03A07C70 LDRB W4, [X20 + 0x40]
	0x03A07C74 BL 0x3A04A00
	0x03A07C78 TBZ X0, 0x0, 0x3A07CDC
	0x03A07C7C LDR W8, [X21 + 0xE0]
	0x03A07C80 CBZ W8, 0x3A07CDC
	0x03A07C84 LDR X1, [X21 + 0x110]
	0x03A07C88 CBZ X1, 0x3A07ED4
	0x03A07C8C LDR W8, [X1 + 0xE0]
	0x03A07C90 CBZ W8, 0x3A07CDC
	0x03A07C94 ADD X8, X21, 0x10
	0x03A07C98 LDP V1, V0, [X8 + 0x10]
	0x03A07C9C LDR V2, [X8]
	0x03A07CA0 ADD X2, X31, 0x180
	0x03A07CA4 MOV X0, X20
	0x03A07CA8 ADD X24, X21, 0x70
	0x03A07CAC STP V1, V0, [X31 + 0x190]
	0x03A07CB0 STR V2, [X31 + 0x18]
	0x03A07CB4 BL 0x3A09454
	0x03A07CB8 LDP V0, V1, [X24]
	0x03A07CBC LDR V2, [X24 + 0x2]
	0x03A07CC0 MOV X2, X0
	0x03A07CC4 ADD X3, X31, 0x150
	0x03A07CC8 MOV X0, X20
	0x03A07CCC MOV X1, X23
	0x03A07CD0 STP V0, V1, [X31 + 0x150]
	0x03A07CD4 STR V2, [X31 + 0x17]
	0x03A07CD8 BL 0x3A08DF8
	0x03A07CDC LDR X8, [X21 + 0x108]
	0x03A07CE0 CMP X8, X22
	0x03A07CE4 B.EQ 0x3A07DF8
	0x03A07CE8 LDR W8, [X22 + 0xEC]
	0x03A07CEC TBNZ X8, 0x1F, 0x3A07DB0
	0x03A07CF0 LDR X8, [X22 + 0x110]
	0x03A07CF4 CBZ X8, 0x3A07ED4
	0x03A07CF8 LDR W9, [X8 + 0xEC]
	0x03A07CFC TBNZ X9, 0x1F, 0x3A07DB0
	0x03A07D00 LDP V1, V0, [X8 + 0x50]
	0x03A07D04 LDR V3, [X8 + 0x4]
	0x03A07D08 ADD X0, X31, 0x120
	0x03A07D0C ADD X1, X31, 0xF0
	0x03A07D10 STP V1, V0, [X31 + 0x130]
	0x03A07D14 LDP V1, V0, [X8 + 0x80]
	0x03A07D18 LDR V2, [X8 + 0x7]
	0x03A07D1C ADD X2, X31, 0xC0
	0x03A07D20 ADD X3, X31, 0x90
	0x03A07D24 STP V0, V3, [X31 + 0x110]
	0x03A07D28 STP V2, V1, [X31 + 0xF0]
	0x03A07D2C LDP V1, V0, [X22 + 0x50]
	0x03A07D30 LDR V3, [X22 + 0x4]
	0x03A07D34 STP V1, V0, [X31 + 0xD0]
	0x03A07D38 LDP V1, V0, [X22 + 0x80]
	0x03A07D3C LDR V2, [X22 + 0x7]
	0x03A07D40 STP V0, V3, [X31 + 0xB0]
	0x03A07D44 STP V2, V1, [X31 + 0x90]
	0x03A07D48 LDRB W4, [X20 + 0x40]
	0x03A07D4C BL 0x3A04A00
	0x03A07D50 TBZ X0, 0x0, 0x3A07DB0
	0x03A07D54 LDR W8, [X22 + 0xE0]
	0x03A07D58 CBZ W8, 0x3A07DB0
	0x03A07D5C LDR X1, [X22 + 0x110]
	0x03A07D60 CBZ X1, 0x3A07ED4
	0x03A07D64 LDR W8, [X1 + 0xE0]
	0x03A07D68 CBZ W8, 0x3A07DB0
	0x03A07D6C LDP V1, V0, [X22 + 0x20]
	0x03A07D70 LDR V2, [X22 + 0x1]
	0x03A07D74 ADD X2, X31, 0x60
	0x03A07D78 MOV X0, X20
	0x03A07D7C ADD X24, X22, 0x70
	0x03A07D80 STP V1, V0, [X31 + 0x70]
	0x03A07D84 STR V2, [X31 + 0x6]
	0x03A07D88 BL 0x3A09454
	0x03A07D8C LDP V0, V1, [X24]
	0x03A07D90 LDR V2, [X24 + 0x2]
	0x03A07D94 MOV X2, X0
	0x03A07D98 ADD X3, X31, 0x30
	0x03A07D9C MOV X0, X20
	0x03A07DA0 MOV X1, X23
	0x03A07DA4 STP V0, V1, [X31 + 0x30]
	0x03A07DA8 STR V2, [X31 + 0x5]
	0x03A07DAC BL 0x3A08DF8
	0x03A07DB0 LDR X23, [X21 + 0x108]
	0x03A07DB4 CBZ X23, 0x3A07DF8
	0x03A07DB8 CMP X23, X22
	0x03A07DBC B.EQ 0x3A07DF8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x9DB000
	009 Move W8, [X24+3960]
	010 Move W21, W4
	011 Move W23, W3
	012 Move X20, X2
	013 Move W22, W1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x74E000
	020 Move X0, [X0+712]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X24+3960], W8
	024 Move W8, [X19+104]
	025 Compare W8, 0
	026 JumpIfEqual {28}
	027 Move W21, W31
	028 Move W8, [X19+65]
	029 Compare W8, 0
	030 JumpIfNotEqual {71}
	031 Move W8, 1
	032 Move [X19+104], W8
	033 Compare X20, 0
	034 JumpIfEqual {89}
	035 Move W2, [X20+24]
	036 Move W8, [X20+28]
	037 Add W8, W8, 1
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move [X20+24], W31
	040 Move [X20+28], W8
	041 Move X0, [X20+16]
	042 Move W1, W31
	043 Move X3, X31
	044 Call Array.Clear, X0, X1, X2
	045 Move [X19+108], W21
	046 Move [X19+112], W23
	047 Move [X19+68], W22
	048 Move [X19+136], W31
	049 Move X0, X19
	050 Call Clipper.ExecuteInternal, X0
	051 Move W21, W0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {59}
	056 Move X0, X19
	057 Move X1, X20
	058 Call Clipper.BuildResult, X0, X1
	059 Move X0, X19
	060 Call Clipper.DisposeAllPolyPts, X0
	061 Move [X19+104], W31
	062 And W0, W21, 1
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Return X0
	071 Move X0, 0x74E000
	072 Move X0, [X0+456]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X19, X0
	076 Move X0, 0x74E000
	077 Move X0, [X0+720]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X19
	081 Move X2, X31
	082 Call ClipperException..ctor, X0, X1
	083 Move X0, 0x74E000
	084 Move X0, [X0+728]
	085 Call 0x1C17D08
	086 Move X1, X0
	087 Move X0, X19
	088 Call 0x1C17DEC
	089 Call 0x1C17F20
	090 Move X20, X0
	091 Move W21, 1
	092 Move X20, X0
	093 Move W21, W31
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X0, X20
	096 Call 0x3EB2AD0
	097 Move X22, [X0]
	098 Call 0x3EB2AE0
	099 Move X0, X19
	100 Call Clipper.DisposeAllPolyPts, X0
	101 Move [X19+104], W31
	102 Compare X22, 0
	103 JumpIfEqual {62}
	104 Move X0, X22
	105 Call 0x1C17F18
	106 Move X22, X31
	107 Move X20, X0
	108 Move X0, X19
	109 Call Clipper.DisposeAllPolyPts, X0
	110 Move [X19+104], W31
	111 Compare X22, 0
	112 JumpIfNotEqual {115}
	113 Move X0, X20
	114 Call 0x1D2D690
	115 Move X0, X22
	116 Call 0x1C17F18
	117 Call 0x1991590

Method: System.Boolean Execute(UnityEngine.Rendering.Universal.ClipType clipType, UnityEngine.Rendering.Universal.PolyTree polytree, UnityEngine.Rendering.Universal.PolyFillType subjFillType, UnityEngine.Rendering.Universal.PolyFillType clipFillType)

Disassembly:
	0x03A07DC8 LDR V2, [X21]
	0x03A07DCC ADD X3, X31, 0x0
	0x03A07DD0 MOV X0, X20
	0x03A07DD4 MOV X1, X22
	0x03A07DD8 MOV X2, X23
	0x03A07DDC STP V1, V0, [X31 + 0x10]
	0x03A07DE0 STR V2, [X31]
	0x03A07DE4 BL 0x3A09880
	0x03A07DE8 CBZ X23, 0x3A07ED4
	0x03A07DEC LDR X23, [X23 + 0x108]
	0x03A07DF0 CMP X23, X22
	0x03A07DF4 B.NE 0x3A07DC4
	0x03A07DF8 LDR X8, [X20 + 0x18]
	0x03A07DFC CBNZ X8, 0x3A07A6C
	0x03A07E00 B 0x3A07EB8
	0x03A07E04 LDR X0, [X20 + 0x80]
	0x03A07E08 CBZ X0, 0x3A07ED4
	0x03A07E0C LDR W8, [X0 + 0x18]
	0x03A07E10 CMP W8, 0x1
	0x03A07E14 B.LT 0x3A07C00
	0x03A07E18 LDR W9, [X22 + 0xE0]
	0x03A07E1C CBZ W9, 0x3A07C00
	0x03A07E20 CMP W8, 0x1
	0x03A07E24 B.LT 0x3A07C00
	0x03A07E28 MOV W24, W31
	0x03A07E2C LDR X2, [X25]
	0x03A07E30 MOV W1, W24
	0x03A07E34 BL 0x301BCCC
	0x03A07E38 CBZ X0, 0x3A07ED4
	0x03A07E3C LDR X1, [X0 + 0x10]
	0x03A07E40 CBZ X1, 0x3A07ED4
	0x03A07E44 LDR X8, [X1 + 0x20]
	0x03A07E48 LDR X9, [X0 + 0x28]
	0x03A07E4C LDR X10, [X22 + 0x18]
	0x03A07E50 LDR X11, [X22 + 0x78]
	0x03A07E54 CMP X8, X9
	0x03A07E58 CSEL X12, X9, X8, GT
	0x03A07E5C CSEL X8, X8, X9, GT
	0x03A07E60 CMP X10, X11
	0x03A07E64 CSEL X9, X11, X10, GT
	0x03A07E68 CSEL X10, X10, X11, GT
	0x03A07E6C CMP X12, X10
	0x03A07E70 B.GE 0x3A07E9C
	0x03A07E74 CMP X9, X8
	0x03A07E78 B.GE 0x3A07E9C
	0x03A07E7C LDP V1, V0, [X0 + 0x30]
	0x03A07E80 LDR V2, [X0 + 0x2]
	0x03A07E84 ADD X3, X31, 0x270
	0x03A07E88 MOV X0, X20
	0x03A07E8C MOV X2, X23
	0x03A07E90 STP V1, V0, [X31 + 0x280]
	0x03A07E94 STR V2, [X31 + 0x27]
	0x03A07E98 BL 0x3A08DF8
	0x03A07E9C LDR X0, [X20 + 0x80]
	0x03A07EA0 CBZ X0, 0x3A07ED4
	0x03A07EA4 LDR W8, [X0 + 0x18]
	0x03A07EA8 ADD W24, W24, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W8, [X0+104]
	007 Compare W8, 0
	008 JumpIfEqual {10}
	009 Move W20, W31
	010 Move X21, X2
	011 Move X19, X0
	012 Move W8, 1
	013 Move [X0+108], W4
	014 Move [X0+112], W3
	015 Move [X0+68], W1
	016 Move [X0+104], W8
	017 Move [X0+136], W8
	018 Call Clipper.ExecuteInternal, X0
	019 Move W20, W0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {27}
	024 Move X0, X19
	025 Move X1, X21
	026 Call Clipper.BuildResult2, X0, X1
	027 Move X0, X19
	028 Call Clipper.DisposeAllPolyPts, X0
	029 Move [X19+104], W31
	030 And W0, W20, 1
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Return X0
	037 Move X21, X0
	038 Move W20, 1
	039 Move X21, X0
	040 Move W20, W31
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X0, X21
	043 Call 0x3EB2AD0
	044 Move X22, [X0]
	045 Call 0x3EB2AE0
	046 Move X0, X19
	047 Call Clipper.DisposeAllPolyPts, X0
	048 Move [X19+104], W31
	049 Compare X22, 0
	050 JumpIfEqual {30}
	051 Move X0, X22
	052 Call 0x1C17F18
	053 Move X22, X31
	054 Move X21, X0
	055 Move X0, X19
	056 Call Clipper.DisposeAllPolyPts, X0
	057 Move [X19+104], W31
	058 Compare X22, 0
	059 JumpIfNotEqual {62}
	060 Move X0, X21
	061 Call 0x1D2D690
	062 Move X0, X22
	063 Call 0x1C17F18
	064 Call 0x1991590

Method: System.Void FixHoleLinkage(UnityEngine.Rendering.Universal.OutRec outRec)

Disassembly:
	0x03A089B8 CSET W21, EQ
	0x03A089BC CBZ X23, 0x3A08B2C
	0x03A089C0 MOV X22, X31
	0x03A089C4 MOV X24, X23
	0x03A089C8 LDR X8, [X24 + 0x50]!
	0x03A089CC CMP X8, X23
	0x03A089D0 B.EQ 0x3A08B30
	0x03A089D4 MOV X25, X23
	0x03A089D8 LDR X9, [X25 + 0x48]!
	0x03A089DC CMP X8, X9
	0x03A089E0 B.EQ 0x3A08B30
	0x03A089E4 CBZ X9, 0x3A08B2C
	0x03A089E8 LDR X12, [X9 + 0x20]
	0x03A089EC LDP X11, X10, [X23 + 0x20]
	0x03A089F0 CMP X11, X12
	0x03A089F4 B.NE 0x3A08A04
	0x03A089F8 LDR X12, [X9 + 0x28]
	0x03A089FC CMP X10, X12
	0x03A08A00 B.EQ 0x3A08A78
	0x03A08A04 CBZ X8, 0x3A08B2C
	0x03A08A08 LDR X12, [X8 + 0x20]
	0x03A08A0C CMP X11, X12

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {24}
	004 Move X8, [X1+24]
	005 Compare X8, 0
	006 JumpIfEqual {22}
	007 Move W9, [X1+20]
	008 Move W10, [X8+20]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X11, [X8+32]
	011 Compare X11, 0
	012 JumpIfNotEqual {22}
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X10, [X8+32]
	015 Compare X10, 0
	016 JumpIfNotEqual {21}
	017 Move X8, [X8+24]
	018 Compare X8, 0
	019 JumpIfEqual {21}
	020 Move W10, [X8+20]
	021 Move [X1+24], X8
	022 Move X30, [X31+16]
	023 Return 
	024 Call 0x1C17F20

Method: System.Boolean ExecuteInternal()

Disassembly:
	0x03A07EAC CMP W24, W8
	0x03A07EB0 B.LT 0x3A07E2C
	0x03A07EB4 B 0x3A07C00
	0x03A07EB8 ADD X31, X31, 0x330
	0x03A07EBC LDP X20, X19, [X31 + 0x40]
	0x03A07EC0 LDP X22, X21, [X31 + 0x30]
	0x03A07EC4 LDP X24, X23, [X31 + 0x20]
	0x03A07EC8 LDP X30, X25, [X31 + 0x10]
	0x03A07ECC LDR X29, [X31], #0x50
	0x03A07ED0 RET
	0x03A07ED4 BL 0x1C16F20
	0x03A07ED8 STP X30, X19, [X31 - 0x10]!
	0x03A07EDC LDR X1, [X0 + 0x50]
	0x03A07EE0 CBZ X1, 0x3A07F10
	0x03A07EE4 MOV X19, X0
	0x03A07EE8 LDR X8, [X1 + 0x118]
	0x03A07EEC STR X8, [X19 + 0x50]
	0x03A07EF0 CBZ X8, 0x3A07EF8
	0x03A07EF4 STR X31, [X8 + 0x120]
	0x03A07EF8 ADD X8, X1, 0x118
	0x03A07EFC MOV X0, X19
	0x03A07F00 STP X31, X31, [X8]
	0x03A07F04 BL 0x3A0AC84
	0x03A07F08 LDR X1, [X19 + 0x50]
	0x03A07F0C CBNZ X1, 0x3A07EE8
	0x03A07F10 LDP X30, X19, [X31], #0x10
	0x03A07F14 RET
	0x03A07F18 STP X30, X21, [X31 - 0x20]!
	0x03A07F1C STP X20, X19, [X31 + 0x10]
	0x03A07F20 ADRP X21, 0x9DA000
	0x03A07F24 LDRB W8, [X21 + 0xF87]
	0x03A07F28 MOV X20, X1
	0x03A07F2C MOV X19, X0
	0x03A07F30 TBNZ X8, 0x0, 0x3A07F48
	0x03A07F34 ADRP X0, 0x74D000
	0x03A07F38 LDR X0, [X0 + 0x350]
	0x03A07F3C BL 0x1C16CF4
	0x03A07F40 MOVZ W8, 0x1
	0x03A07F44 STRB W8, [X21 + 0xF87]
	0x03A07F48 LDR X8, [X19 + 0x38]
	0x03A07F4C CBZ X8, 0x3A07F8C
	0x03A07F50 MOV X0, X19
	0x03A07F54 MOV X1, X20
	0x03A07F58 BL 0x3A0B594
	0x03A07F5C LDR X8, [X19 + 0x58]
	0x03A07F60 CBZ X8, 0x3A07FA4
	0x03A07F64 LDR W8, [X8 + 0x18]
	0x03A07F68 CBZ W8, 0x3A07F8C
	0x03A07F6C CMP W8, 0x1
	0x03A07F70 B.EQ 0x3A07F80
	0x03A07F74 MOV X0, X19
	0x03A07F78 BL 0x3A0B770
	0x03A07F7C TBZ X0, 0x0, 0x3A07F9C
	0x03A07F80 MOV X0, X19
	0x03A07F84 BL 0x3A0B974
	0x03A07F88 STR X31, [X19 + 0x50]
	0x03A07F8C MOVZ W0, 0x1
	0x03A07F90 LDP X20, X19, [X31 + 0x10]
	0x03A07F94 LDP X30, X21, [X31], #0x20
	0x03A07F98 RET
	0x03A07F9C MOV W0, W31
	0x03A07FA0 B 0x3A07F90
	0x03A07FA4 BL 0x1C16F20
	0x03A07FA8 B 0x3A07FB4
	0x03A07FAC B 0x3A07FB4
	0x03A07FB0 B 0x3A07FB4
	0x03A07FB4 MOV X20, X0
	0x03A07FB8 CMP W1, 0x1
	0x03A07FBC B.NE 0x3A08084
	0x03A07FC0 MOV X0, X20
	0x03A07FC4 BL 0x3EB1AD0
	0x03A07FC8 MOV X20, X0
	0x03A07FCC ADRP X0, 0x6F2000
	0x03A07FD0 LDR X0, [X0 + 0xCC0]
	0x03A07FD4 BL 0x1C16D08
	0x03A07FD8 LDR X8, [X20]
	0x03A07FDC LDR X1, [X8]
	0x03A07FE0 BL 0x1C17270
	0x03A07FE4 TBZ X0, 0x0, 0x3A0805C
	0x03A07FE8 BL 0x3EB1AE0
	0x03A07FEC LDR X20, [X19 + 0x58]
	0x03A07FF0 STR X31, [X19 + 0x50]
	0x03A07FF4 MOV X0, X20
	0x03A07FF8 BL 0x19903C0
	0x03A07FFC ADRP X0, 0x74D000
	0x03A08000 LDR X0, [X0 + 0x358]
	0x03A08004 BL 0x1C16D08
	0x03A08008 MOV X1, X0
	0x03A0800C MOV X0, X20
	0x03A08010 BL 0x19907E0
	0x03A08014 ADRP X0, 0x74C000
	0x03A08018 LDR X0, [X0 + 0x1C8]
	0x03A0801C BL 0x1C16D08
	0x03A08020 BL 0x1C16F10
	0x03A08024 MOV X19, X0
	0x03A08028 ADRP X0, 0x74C000
	0x03A0802C LDR X0, [X0 + 0x360]
	0x03A08030 BL 0x1C16D08
	0x03A08034 MOV X1, X0
	0x03A08038 MOV X0, X19
	0x03A0803C MOV X2, X31
	0x03A08040 BL 0x3A130EC
	0x03A08044 ADRP X0, 0x74C000
	0x03A08048 LDR X0, [X0 + 0x368]
	0x03A0804C BL 0x1C16D08
	0x03A08050 MOV X1, X0
	0x03A08054 MOV X0, X19
	0x03A08058 BL 0x1C16DEC
	0x03A0805C MOVZ W0, 0x8
	0x03A08060 BL 0x3EB1AF0
	0x03A08064 LDR X8, [X20]
	0x03A08068 STR X8, [X0]
	0x03A0806C ADRP X1, 0x4AC000
	0x03A08070 ADD X1, X1, 0xE58
	0x03A08074 MOV X2, X31
	0x03A08078 BL 0x3EB1B00
	0x03A0807C MOV X20, X0
	0x03A08080 BL 0x3EB1AE0
	0x03A08084 MOV X0, X20
	0x03A08088 BL 0x1D2C690
	0x03A0808C BL 0x1990590
	0x03A08090 STR D10, [X31 - 0x60]!
	0x03A08094 STP D9, D8, [X31 + 0x8]
	0x03A08098 STR X29, [X31 + 0x18]
	0x03A0809C STP X30, X25, [X31 + 0x20]
	0x03A080A0 STP X24, X23, [X31 + 0x30]
	0x03A080A4 STP X22, X21, [X31 + 0x40]
	0x03A080A8 STP X20, X19, [X31 + 0x50]
	0x03A080AC SUB X31, X31, 0x340
	0x03A080B0 LDR X21, [X0 + 0x38]
	0x03A080B4 MOV X19, X0
	0x03A080B8 SCVTF D8, X1
	0x03A080BC STR X21, [X31 + 0x338]
	0x03A080C0 CBZ X21, 0x3A082B0
	0x03A080C4 MOV X20, X1
	0x03A080C8 LDR V0, [X21 + 0x80]
	0x03A080CC SCVTF D0, D0
	0x03A080D0 FCMP D0, D8
	0x03A080D4 B.NE 0x3A080E0
	0x03A080D8 LDR X8, [X21 + 0x100]
	0x03A080DC CBZ X8, 0x3A08204
	0x03A080E0 LDR V0, [X21 + 0x80]
	0x03A080E4 SCVTF D0, D0
	0x03A080E8 FCMP D0, D8
	0x03A080EC B.NE 0x3A08100
	0x03A080F0 LDR X8, [X21 + 0x100]
	0x03A080F4 CBZ X8, 0x3A08100
	0x03A080F8 LDR X8, [X8 + 0xB0]
	0x03A080FC CBZ X8, 0x3A08254
	0x03A08100 MOV X0, X21
	0x03A08104 MOV X1, X20
	0x03A08108 BL 0x3A09F54
	0x03A0810C STR X0, [X21 + 0x48]
	0x03A08110 LDR X8, [X31 + 0x338]
	0x03A08114 CBZ X8, 0x3A082AC
	0x03A08118 STR X20, [X8 + 0x50]
	0x03A0811C LDRB W8, [X19 + 0x91]
	0x03A08120 CBZ W8, 0x3A081EC
	0x03A08124 LDR X8, [X31 + 0x338]
	0x03A08128 CBZ X8, 0x3A082AC
	0x03A0812C LDR W9, [X8 + 0xEC]
	0x03A08130 TBNZ X9, 0x1F, 0x3A081EC
	0x03A08134 LDR X1, [X8 + 0x110]
	0x03A08138 CBZ X1, 0x3A081EC
	0x03A0813C LDR W9, [X8 + 0xE0]
	0x03A08140 CBZ W9, 0x3A081EC
	0x03A08144 LDR W9, [X1 + 0xEC]
	0x03A08148 TBNZ X9, 0x1F, 0x3A081EC
	0x03A0814C LDR X22, [X1 + 0x48]
	0x03A08150 LDR X9, [X8 + 0x48]
	0x03A08154 CMP X22, X9
	0x03A08158 B.NE 0x3A081EC
	0x03A0815C LDR W9, [X1 + 0xE0]
	0x03A08160 CBZ W9, 0x3A081EC
	0x03A08164 LDR X23, [X8 + 0x40]
	0x03A08168 LDP X24, X25, [X8 + 0x50]
	0x03A0816C LDP D9, D10, [X8 + 0x60]
	0x03A08170 ADD X2, X31, 0x2D0
	0x03A08174 MOV X0, X19
	0x03A08178 STR X23, [X31 + 0x2D0]
	0x03A0817C STR X22, [X31 + 0x2D8]
	0x03A08180 STR X24, [X31 + 0x2E0]
	0x03A08184 STR X25, [X31 + 0x2E8]
	0x03A08188 STR D9, [X31 + 0x2F0]
	0x03A0818C STR D10, [X31 + 0x2F8]
	0x03A08190 BL 0x3A09454
	0x03A08194 LDR X1, [X31 + 0x338]
	0x03A08198 MOV X21, X0
	0x03A0819C ADD X2, X31, 0x2A0
	0x03A081A0 MOV X0, X19
	0x03A081A4 STR X23, [X31 + 0x2A0]
	0x03A081A8 STR X22, [X31 + 0x2A8]
	0x03A081AC STR X24, [X31 + 0x2B0]
	0x03A081B0 STR X25, [X31 + 0x2B8]
	0x03A081B4 STR D9, [X31 + 0x2C0]
	0x03A081B8 STR D10, [X31 + 0x2C8]
	0x03A081BC BL 0x3A09454
	0x03A081C0 MOV X2, X0
	0x03A081C4 ADD X3, X31, 0x270
	0x03A081C8 MOV X0, X19
	0x03A081CC MOV X1, X21
	0x03A081D0 STR X23, [X31 + 0x270]
	0x03A081D4 STR X22, [X31 + 0x278]
	0x03A081D8 STR X24, [X31 + 0x280]
	0x03A081DC STR X25, [X31 + 0x288]
	0x03A081E0 STR D9, [X31 + 0x290]
	0x03A081E4 STR D10, [X31 + 0x298]
	0x03A081E8 BL 0x3A08DF8
	0x03A081EC LDR X8, [X31 + 0x338]
	0x03A081F0 CBZ X8, 0x3A082AC
	0x03A081F4 LDR X21, [X8 + 0x108]
	0x03A081F8 STR X21, [X31 + 0x338]
	0x03A081FC CBNZ X21, 0x3A080C8
	0x03A08200 B 0x3A082B0
	0x03A08204 MOV X1, X21
	0x03A08208 BL 0x3A0B558
	0x03A0820C CBZ X0, 0x3A08218
	0x03A08210 LDR X8, [X0 + 0xB0]
	0x03A08214 CBZ X8, 0x3A082A4
	0x03A08218 LDRB W8, [X19 + 0x91]
	0x03A0821C CBZ W8, 0x3A08234
	0x03A08220 LDR X8, [X31 + 0x338]
	0x03A08224 CBZ X8, 0x3A082AC
	0x03A08228 LDR X1, [X8 + 0x78]
	0x03A0822C MOV X0, X19
	0x03A08230 BL 0x3A06B18
	0x03A08234 LDR X1, [X31 + 0x338]
	0x03A08238 CBZ X1, 0x3A082AC
	0x03A0823C LDR X21, [X1 + 0x110]
	0x03A08240 MOV X0, X19
	0x03A08244 BL 0x3A0BEE0
	0x03A08248 CBZ X21, 0x3A0829C
	0x03A0824C LDR X21, [X21 + 0x108]
	0x03A08250 B 0x3A081F8
	0x03A08254 ADD X1, X31, 0x338
	0x03A08258 MOV X0, X19
	0x03A0825C BL 0x3A0676C
	0x03A08260 LDR X1, [X31 + 0x338]
	0x03A08264 CBZ X1, 0x3A082AC
	0x03A08268 LDR W8, [X1 + 0xEC]
	0x03A0826C TBNZ X8, 0x1F, 0x3A08290
	0x03A08270 LDP V1, V0, [X1 + 0x20]
	0x03A08274 LDR V2, [X1 + 0x1]
	0x03A08278 ADD X2, X31, 0x300
	0x03A0827C MOV X0, X19
	0x03A08280 STP V1, V0, [X31 + 0x310]
	0x03A08284 STR V2, [X31 + 0x30]
	0x03A08288 BL 0x3A09454
	0x03A0828C LDR X1, [X31 + 0x338]
	0x03A08290 MOV X0, X19
	0x03A08294 BL 0x3A09818
	0x03A08298 B 0x3A0811C
	0x03A0829C LDR X21, [X19 + 0x38]
	0x03A082A0 B 0x3A081F8
	0x03A082A4 LDR X21, [X31 + 0x338]
	0x03A082A8 CBNZ X21, 0x3A080E0
	0x03A082AC BL 0x1C16F20
	0x03A082B0 MOV X0, X19
	0x03A082B4 BL 0x3A07ED8
	0x03A082B8 LDR X1, [X19 + 0x38]
	0x03A082BC STR X31, [X19 + 0x48]
	0x03A082C0 STR X1, [X31 + 0x338]
	0x03A082C4 CBZ X1, 0x3A08528
	0x03A082C8 LDR V0, [X1 + 0x80]
	0x03A082CC SCVTF D0, D0
	0x03A082D0 FCMP D0, D8
	0x03A082D4 B.NE 0x3A08518
	0x03A082D8 LDR X8, [X1 + 0x100]
	0x03A082DC CBZ X8, 0x3A08518
	0x03A082E0 LDR W8, [X1 + 0xEC]
	0x03A082E4 TBNZ X8, 0x1F, 0x3A0830C
	0x03A082E8 LDP V1, V0, [X1 + 0x80]
	0x03A082EC LDR V2, [X1 + 0x7]
	0x03A082F0 ADD X2, X31, 0x240
	0x03A082F4 MOV X0, X19
	0x03A082F8 STP V1, V0, [X31 + 0x250]
	0x03A082FC STR V2, [X31 + 0x24]
	0x03A08300 BL 0x3A09454
	0x03A08304 MOV X20, X0
	0x03A08308 B 0x3A08310
	0x03A0830C MOV X20, X31
	0x03A08310 ADD X1, X31, 0x338
	0x03A08314 MOV X0, X19
	0x03A08318 BL 0x3A0676C
	0x03A0831C LDR X8, [X31 + 0x338]
	0x03A08320 CBZ X8, 0x3A082AC
	0x03A08324 LDP X21, X22, [X8 + 0x108]
	0x03A08328 CBZ X22, 0x3A08418
	0x03A0832C LDR X9, [X22 + 0x48]
	0x03A08330 LDR X10, [X8 + 0x18]
	0x03A08334 CMP X9, X10
	0x03A08338 B.NE 0x3A08418
	0x03A0833C CBZ X20, 0x3A08418
	0x03A08340 LDR X9, [X22 + 0x50]
	0x03A08344 LDR X10, [X8 + 0x20]
	0x03A08348 CMP X9, X10
	0x03A0834C B.NE 0x3A08418
	0x03A08350 LDR W10, [X22 + 0xEC]
	0x03A08354 TBNZ X10, 0x1F, 0x3A08418
	0x03A08358 LDR X10, [X22 + 0x80]
	0x03A0835C CMP X9, X10
	0x03A08360 B.LE 0x3A08418
	0x03A08364 LDP V1, V0, [X8 + 0x50]
	0x03A08368 LDR V3, [X8 + 0x4]
	0x03A0836C ADD X0, X31, 0x210
	0x03A08370 ADD X1, X31, 0x1E0
	0x03A08374 STP V1, V0, [X31 + 0x220]
	0x03A08378 LDP V1, V0, [X8 + 0x80]
	0x03A0837C LDR V2, [X8 + 0x7]
	0x03A08380 ADD X8, X22, 0x40
	0x03A08384 ADD X2, X31, 0x1B0
	0x03A08388 STP V0, V3, [X31 + 0x200]
	0x03A0838C STP V2, V1, [X31 + 0x1E0]
	0x03A08390 LDP V1, V0, [X8 + 0x10]
	0x03A08394 LDR V3, [X8]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+72], X25
	004 Move [X31+80], X24
	005 Move [X31+88], X23
	006 Move [X31+96], X22
	007 Move [X31+104], X21
	008 Move [X31+112], X20
	009 Move [X31+120], X19
	010 Move X20, 0x9DB000
	011 Move W8, [X20+3961]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0x74E000
	018 Move X0, [X0+736]
	019 Call 0x1C17CF4
	020 Move X0, 0x74E000
	021 Move X0, [X0+744]
	022 Call 0x1C17CF4
	023 Move X0, 0x74E000
	024 Move X0, [X0+752]
	025 Call 0x1C17CF4
	026 Move X0, 0x74E000
	027 Move X0, [X0+760]
	028 Call 0x1C17CF4
	029 Move X0, 0x74E000
	030 Move X0, [X0+768]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+3961], W8
	034 Move [X31+32], X31
	035 Move [X31+40], X31
	036 Move [X31+48], X31
	037 Move X8, [X19]
	038 Move X9, [X8+392]
	039 Move X1, [X8+400]
	040 Move X0, X19
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move X8, [X19+40]
	043 Move [X19+72], X31
	044 Move [X19+80], X31
	045 Compare X8, 0
	046 JumpIfEqual {201}
	047 Move X1, [X8+16]
	048 Move X9, [X8+24]
	049 Move [X19+40], X9
	050 Move X0, X19
	051 Call Clipper.InsertLocalMinimaIntoAEL, X0, X1
	052 Move X8, [X19+40]
	053 Compare X8, 0
	054 JumpIfEqual {58}
	055 Move X20, [X8+16]
	056 Move X9, [X8+24]
	057 Move [X19+40], X9
	058 Move X8, [X19+24]
	059 Compare X8, 0
	060 JumpIfEqual {90}
	061 Move X20, X31
	062 Move X0, X19
	063 Call Clipper.ProcessHorizontals, X0
	064 Move X8, [X19+128]
	065 Compare X8, 0
	066 JumpIfEqual {242}
	067 Move W2, [X8+24]
	068 Move W9, [X8+28]
	069 Add W9, W9, 1
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move [X8+24], W31
	072 Move [X8+28], W9
	073 Move X0, [X8+16]
	074 Move W1, W31
	075 Move X3, X31
	076 Call Array.Clear, X0, X1, X2
	077 Move X0, X19
	078 Move X1, X20
	079 Call Clipper.ProcessIntersections, X0, X1
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {201}
	084 Move X0, X19
	085 Move X1, X20
	086 Call Clipper.ProcessEdgesAtTopOfScanbeam, X0, X1
	087 Move X0, X19
	088 Move X1, X20
	089 Call Clipper.InsertLocalMinimaIntoAEL, X0, X1
	090 Move X0, [X19+48]
	091 Compare X0, 0
	092 JumpIfEqual {249}
	093 Move X24, 0x74E000
	094 Move X24, [X24+768]
	095 Move X1, [X24]
	096 Add X8, X31, 8
	097 Call List`1<Object>.GetEnumerator, X0
	098 NotImplemented "Instruction LDUR not yet implemented."
	099 Move X8, [X31+24]
	100 Move X23, 0x74E000
	101 Move [X31+2], V0
	102 Move [X31+48], X8
	103 Move X23, [X23+744]
	104 Move X1, [X23]
	105 Add X0, X31, 32
	106 Call Enumerator<Object>.MoveNext, X0
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {139}
	111 Move X20, [X31+48]
	112 Compare X20, 0
	113 JumpIfEqual {244}
	114 Move X1, [X20+32]
	115 Compare X1, 0
	116 JumpIfEqual {104}
	117 Move W8, [X20+21]
	118 Compare W8, 0
	119 JumpIfNotEqual {104}
	120 Move W21, [X20+20]
	121 Move W22, [X19+144]
	122 Call Clipper.Area, X0, X1
	123 NotImplemented "Instruction FCMP not yet implemented."
	124 Xor W8, W22, W21
	125 NotImplemented "Instruction CSET not yet implemented."
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move X8, [X20+32]
	128 Compare X8, 0
	129 JumpIfEqual {104}
	130 Move X9, X8
	131 Compare X9, 0
	132 JumpIfEqual {243}
	133 Move X10, [X9+72]
	134 Move X11, [X9+80]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move [X9+72], X11
	137 Move [X9+80], X10
	138 Move X9, X10
	139 Move X20, X31
	140 Move W21, 9
	141 Move X25, 0x74D000
	142 Move X25, [X25+736]
	143 Move X1, [X25]
	144 Add X0, X31, 32
	145 Call Enumerator<Object>.Dispose, X0
	146 Compare X20, 0
	147 JumpIfNotEqual {250}
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Compare W21, 0
	150 JumpIfNotEqual {201}
	151 Move X0, X19
	152 Call Clipper.JoinCommonEdges, X0
	153 Move X0, [X19+48]
	154 Compare X0, 0
	155 JumpIfEqual {252}
	156 Move X1, [X24]
	157 Add X8, X31, 8
	158 Call List`1<Object>.GetEnumerator, X0
	159 NotImplemented "Instruction LDUR not yet implemented."
	160 Move X8, [X31+24]
	161 Move [X31+2], V0
	162 Move [X31+48], X8
	163 Move X1, [X23]
	164 Add X0, X31, 32
	165 Call Enumerator<Object>.MoveNext, X0
	166 Move TEMP, X0
	167 And TEMP, TEMP, 1
	168 Compare TEMP, 1
	169 JumpIfNotEqual {184}
	170 Move X8, [X31+48]
	171 Compare X8, 0
	172 JumpIfEqual {245}
	173 Move X9, [X8+32]
	174 Compare X9, 0
	175 JumpIfEqual {163}
	176 Move W9, [X8+21]
	177 Compare W9, 0
	178 JumpIfEqual {181}
	179 Move X1, X8
	180 Call Clipper.FixupOutPolyline, X0, X1
	181 Move X0, X19
	182 Move X1, X8
	183 Call Clipper.FixupOutPolygon, X0, X1
	184 Move X20, X31
	185 Move W21, 13
	186 Move X1, [X25]
	187 Add X0, X31, 32
	188 Call Enumerator<Object>.Dispose, X0
	189 Compare X20, 0
	190 JumpIfNotEqual {253}
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Compare W21, 0
	193 JumpIfNotEqual {201}
	194 Move W8, [X19+145]
	195 Compare W8, 0
	196 JumpIfEqual {199}
	197 Move X0, X19
	198 Call Clipper.DoSimplePolygons, X0
	199 Move X21, X31
	200 Move W20, 1
	201 Move X21, X31
	202 Move W20, W31
	203 Move X8, [X19+120]
	204 Compare X8, 0
	205 JumpIfEqual {246}
	206 Move W2, [X8+24]
	207 Move W9, [X8+28]
	208 Add W9, W9, 1
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Move [X8+24], W31
	211 Move [X8+28], W9
	212 Move X0, [X8+16]
	213 Move W1, W31
	214 Move X3, X31
	215 Call Array.Clear, X0, X1, X2
	216 Move X8, [X19+128]
	217 Compare X8, 0
	218 JumpIfEqual {246}
	219 Move W2, [X8+24]
	220 Move W9, [X8+28]
	221 Add W9, W9, 1
	222 NotImplemented "Instruction CMP not yet implemented."
	223 Move [X8+24], W31
	224 Move [X8+28], W9
	225 Move X0, [X8+16]
	226 Move W1, W31
	227 Move X3, X31
	228 Call Array.Clear, X0, X1, X2
	229 Compare X21, 0
	230 JumpIfNotEqual {247}
	231 Move W0, W20
	232 Move X20, [X31+112]
	233 Move X19, [X31+120]
	234 Move X22, [X31+96]
	235 Move X21, [X31+104]
	236 Move X24, [X31+80]
	237 Move X23, [X31+88]
	238 Move X30, [X31+64]
	239 Move X25, [X31+72]
	240 Add X31, X31, 128
	241 Return X0
	242 Call 0x1C17F20
	243 Call 0x1C17F20
	244 Call 0x1C17F20
	245 Call 0x1C17F20
	246 Call 0x1C17F20
	247 Move X0, X21
	248 Call 0x1C17F18
	249 Call 0x1C17F20
	250 Move X0, X20
	251 Call 0x1C17F18
	252 Call 0x1C17F20
	253 Move X0, X20
	254 Call 0x1C17F18
	255 Move X21, X1
	256 Move X22, X0
	257 NotImplemented "Instruction CMP not yet implemented."
	258 Move X0, X22
	259 Call 0x3EB2AD0
	260 Move X20, [X0]
	261 Call 0x3EB2AE0
	262 Move W21, W31
	263 Move X20, X31
	264 Move X1, [X25]
	265 Add X0, X31, 32
	266 Call Enumerator<Object>.Dispose, X0
	267 Compare X20, 0
	268 JumpIfEqual {295}
	269 Move X0, X20
	270 Call 0x1C17F18
	271 Move X21, X1
	272 Move X22, X0
	273 Move X21, X1
	274 Move X22, X0
	275 NotImplemented "Instruction CMP not yet implemented."
	276 Move X0, X22
	277 Call 0x3EB2AD0
	278 Move X20, [X0]
	279 Call 0x3EB2AE0
	280 Move W21, W31
	281 Move X20, X31
	282 Move X8, 0x74D000
	283 Move X8, [X8+736]
	284 Move X1, [X8]
	285 Add X0, X31, 32
	286 Call Enumerator<Object>.Dispose, X0
	287 Compare X20, 0
	288 JumpIfEqual {295}
	289 Move X0, X20
	290 Call 0x1C17F18
	291 Move X21, X1
	292 Move X22, X0
	293 Move X21, X1
	294 Move X22, X0
	295 NotImplemented "Instruction CMP not yet implemented."
	296 Move X0, X22
	297 Call 0x3EB2AD0
	298 Move X21, [X0]
	299 Call 0x3EB2AE0
	300 Move X21, X31
	301 Move X22, X0
	302 Move X8, [X19+120]
	303 Compare X8, 0
	304 JumpIfNotEqual {306}
	305 Call 0x1C17F20
	306 Move W2, [X8+24]
	307 Move W9, [X8+28]
	308 Add W9, W9, 1
	309 NotImplemented "Instruction CMP not yet implemented."
	310 Move [X8+24], W31
	311 Move [X8+28], W9
	312 Move X0, [X8+16]
	313 Move W1, W31
	314 Move X3, X31
	315 Call Array.Clear, X0, X1, X2
	316 Move X8, [X19+128]
	317 Compare X8, 0
	318 JumpIfNotEqual {320}
	319 Call 0x1C17F20
	320 Move W2, [X8+24]
	321 Move W9, [X8+28]
	322 Add W9, W9, 1
	323 NotImplemented "Instruction CMP not yet implemented."
	324 Move [X8+24], W31
	325 Move [X8+28], W9
	326 Move X0, [X8+16]
	327 Move W1, W31
	328 Move X3, X31
	329 Call Array.Clear, X0, X1, X2
	330 Compare X21, 0
	331 JumpIfNotEqual {334}
	332 Move X0, X22
	333 Call 0x1D2D690
	334 Move X0, X21
	335 Call 0x1C17F18
	336 Call 0x1991590

Method: System.Void DisposeAllPolyPts()

Disassembly:
	0x03A09D54 LDR W8, [X19 + 0xE8]
	0x03A09D58 SUB W8, W31, W8
	0x03A09D5C B 0x3A09D84
	0x03A09D60 ADRP X8, 0x6EA000
	0x03A09D64 LDR X8, [X8 + 0x5A8]
	0x03A09D68 LDR W24, [X19 + 0xE8]
	0x03A09D6C LDR X0, [X8]
	0x03A09D70 LDR W8, [X0 + 0xE0]
	0x03A09D74 CBNZ W8, 0x3A09D7C
	0x03A09D78 BL 0x1C16DFC
	0x03A09D7C CMP W24, 0x0
	0x03A09D80 CSNEG W8, W24, W24, PL
	0x03A09D84 LDR W9, [X20 + 0xD8]
	0x03A09D88 LDR W10, [X19 + 0xD8]
	0x03A09D8C CMP W9, W10
	0x03A09D90 B.NE 0x3A09DF0
	0x03A09D94 CMP W25, 0x1
	0x03A09D98 B.NE 0x3A09E34
	0x03A09D9C CMP W27, 0x1
	0x03A09DA0 B.NE 0x3A09E34
	0x03A09DA4 LDR W10, [X21 + 0x44]
	0x03A09DA8 CMP W10, 0x3
	0x03A09DAC B.HI 0x3A09E14
	0x03A09DB0 ADRP X11, 0xFFFFFFFFFD18E000
	0x03A09DB4 ADD X11, X11, 0xACD
	0x03A09DB8 ADR X12, 0x10
	0x03A09DBC LDRB W13, [X11, X10, LSL]
	0x03A09DC0 ADD X12, X12, X13, 0x2, LSL
	0x03A09DC4 BR X12
	0x03A09DC8 CMP W23, 0x1
	0x03A09DCC B.LT 0x3A09E14
	0x03A09DD0 CMP W8, 0x1
	0x03A09DD4 B.LT 0x3A09E14
	0x03A09DD8 LDP V1, V0, [X22 + 0x10]
	0x03A09DDC LDR V2, [X22]
	0x03A09DE0 ADD X3, X31, 0x90
	0x03A09DE4 STP V1, V0, [X31 + 0xA0]
	0x03A09DE8 STR V2, [X31 + 0x9]
	0x03A09DEC B 0x3A09E04
	0x03A09DF0 LDP V1, V0, [X22 + 0x10]
	0x03A09DF4 LDR V2, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x9D9000
	005 Move W8, [X20+3962]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x74C000
	012 Move X0, [X0+880]
	013 Call 0x1C17CF4
	014 Move X0, 0x74C000
	015 Move X0, [X0+608]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3962], W8
	019 Move X8, [X19+48]
	020 Compare X8, 0
	021 JumpIfEqual {32}
	022 Move W20, W31
	023 Move W2, [X8+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X19
	026 Move W1, W20
	027 Call ClipperBase.DisposeOutRec, X0, X1
	028 Move X8, [X19+48]
	029 Add W20, W20, 1
	030 Compare X8, 0
	031 JumpIfNotEqual {23}
	032 Call 0x1C17F20
	033 Move W9, [X8+28]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Add W9, W9, 1
	036 Move [X8+24], W31
	037 Move [X8+28], W9
	038 Move X0, [X8+16]
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move W1, W31
	042 Move X3, X31
	043 Move X30, [X31+32]
	044 Call Array.Clear, X0, X1, X2
	045 Return 
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return 

Method: System.Void AddJoin(UnityEngine.Rendering.Universal.OutPt Op1, UnityEngine.Rendering.Universal.OutPt Op2, UnityEngine.Rendering.Universal.IntPoint OffPt)

Disassembly:
	0x03A09DF8 ADD X3, X31, 0xC0
	0x03A09DFC STP V1, V0, [X31 + 0xD0]
	0x03A09E00 STR V2, [X31 + 0xC]
	0x03A09E04 MOV X0, X21
	0x03A09E08 MOV X1, X20
	0x03A09E0C MOV X2, X19
	0x03A09E10 BL 0x3A09628
	0x03A09E14 ADD X31, X31, 0x2A0
	0x03A09E18 LDP X20, X19, [X31 + 0x50]
	0x03A09E1C LDP X22, X21, [X31 + 0x40]
	0x03A09E20 LDP X24, X23, [X31 + 0x30]
	0x03A09E24 LDP X26, X25, [X31 + 0x20]
	0x03A09E28 LDP X28, X27, [X31 + 0x10]
	0x03A09E2C LDP X29, X30, [X31], #0x60
	0x03A09E30 RET
	0x03A09E34 MOV X0, X20
	0x03A09E38 MOV X1, X19
	0x03A09E3C ADD X31, X31, 0x2A0
	0x03A09E40 LDP X20, X19, [X31 + 0x50]
	0x03A09E44 LDP X22, X21, [X31 + 0x40]
	0x03A09E48 LDP X24, X23, [X31 + 0x30]
	0x03A09E4C LDP X26, X25, [X31 + 0x20]
	0x03A09E50 LDP X28, X27, [X31 + 0x10]
	0x03A09E54 LDP X29, X30, [X31], #0x60
	0x03A09E58 B 0x3A0ABE4
	0x03A09E5C CMP W23, 0x0
	0x03A09E60 B.GT 0x3A09E14
	0x03A09E64 CMP W8, 0x0
	0x03A09E68 B.GT 0x3A09E14
	0x03A09E6C LDP V1, V0, [X22 + 0x10]
	0x03A09E70 LDR V2, [X22]
	0x03A09E74 ADD X3, X31, 0x60
	0x03A09E78 STP V1, V0, [X31 + 0x70]
	0x03A09E7C STR V2, [X31 + 0x6]
	0x03A09E80 B 0x3A09E04
	0x03A09E84 CMP W8, 0x1
	0x03A09E88 B.LT 0x3A09ECC
	0x03A09E8C CMP W23, 0x1
	0x03A09E90 B.LT 0x3A09ECC
	0x03A09E94 CMP W9, 0x1
	0x03A09E98 B.NE 0x3A09ECC
	0x03A09E9C LDP V1, V0, [X22 + 0x10]
	0x03A09EA0 LDR V2, [X22]
	0x03A09EA4 ADD X3, X31, 0x30
	0x03A09EA8 STP V1, V0, [X31 + 0x40]
	0x03A09EAC STR V2, [X31 + 0x3]
	0x03A09EB0 B 0x3A09E04
	0x03A09EB4 LDP V1, V0, [X22 + 0x10]
	0x03A09EB8 LDR V2, [X22]
	0x03A09EBC ADD X3, X31, 0x0
	0x03A09EC0 STP V1, V0, [X31 + 0x10]
	0x03A09EC4 STR V2, [X31]
	0x03A09EC8 B 0x3A09E04
	0x03A09ECC CBNZ W9, 0x3A09E14
	0x03A09ED0 CMP W23, 0x0
	0x03A09ED4 B.GT 0x3A09E14
	0x03A09ED8 CMP W8, 0x0
	0x03A09EDC B.LE 0x3A09E9C
	0x03A09EE0 B 0x3A09E14
	0x03A09EE4 BL 0x1C16F20
	0x03A09EE8 STP X30, X19, [X31 - 0x10]!
	0x03A09EEC CBZ X2, 0x3A09F50
	0x03A09EF0 CBZ X1, 0x3A09F50
	0x03A09EF4 LDR X8, [X2 + 0x48]
	0x03A09EF8 LDR X9, [X1 + 0x48]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0x9D9000
	009 Move X24, 0x74C000
	010 Move W8, [X19+3963]
	011 Move X24, [X24+888]
	012 Move X21, X3
	013 Move X22, X2
	014 Move X23, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x74C000
	021 Move X0, [X0+888]
	022 Call 0x1C17CF4
	023 Move X0, 0x74C000
	024 Move X0, [X0+896]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X19+3963], W8
	028 Move X0, [X24]
	029 Call 0x1C17F10
	030 Move X1, X31
	031 Move X19, X0
	032 Call Object..ctor, X0
	033 Compare X19, 0
	034 JumpIfEqual {83}
	035 Move [X19+16], X23
	036 Move [X19+24], X22
	037 Move V1, [X21+16]
	038 Move V0, [X21+32]
	039 Move V2, [X21]
	040 Move [X19+48], V1
	041 Move [X19+56], V0
	042 Move [X19+2], V2
	043 Move X0, [X20+120]
	044 Compare X0, 0
	045 JumpIfEqual {83}
	046 Move X9, 0x74C000
	047 Move X9, [X9+896]
	048 Move W10, [X0+28]
	049 Move X8, [X0+16]
	050 Move X9, [X9]
	051 Add W10, W10, 1
	052 Move [X0+28], W10
	053 Compare X8, 0
	054 JumpIfEqual {83}
	055 NotImplemented "Instruction LDRSW not yet implemented."
	056 Move W11, [X8+24]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Add W9, W10, 1
	059 Add X8, X8, X10
	060 Move [X0+24], W9
	061 Move [X8+32], X19
	062 Move X20, [X31+48]
	063 Move X19, [X31+56]
	064 Move X22, [X31+32]
	065 Move X21, [X31+40]
	066 Move X24, [X31+16]
	067 Move X23, [X31+24]
	068 Move X30, [X31+64]
	069 Return 
	070 Move X8, [X9+32]
	071 Move X1, X19
	072 Move X20, [X31+48]
	073 Move X19, [X31+56]
	074 Move X22, [X31+32]
	075 Move X21, [X31+40]
	076 Move X8, [X8+192]
	077 Move X24, [X31+16]
	078 Move X23, [X31+24]
	079 Move X2, [X8+112]
	080 Move X30, [X31+64]
	081 Call List`1<Object>.AddWithResize, X0, X1
	082 Return 
	083 Call 0x1C17F20

Method: System.Void AddGhostJoin(UnityEngine.Rendering.Universal.OutPt Op, UnityEngine.Rendering.Universal.IntPoint OffPt)

Disassembly:
	0x03A09EFC CMP X8, X9
	0x03A09F00 B.NE 0x3A09F28
	0x03A09F04 LDR X8, [X2 + 0x80]
	0x03A09F08 LDR X9, [X1 + 0x80]
	0x03A09F0C CMP X8, X9
	0x03A09F10 B.LE 0x3A09F30
	0x03A09F14 LDR X19, [X2 + 0x78]
	0x03A09F18 MOV X0, X1
	0x03A09F1C MOV X1, X8
	0x03A09F20 BL 0x3A09F54
	0x03A09F24 CMP X19, X0
	0x03A09F28 CSET W0, LT
	0x03A09F2C B 0x3A09F48
	0x03A09F30 LDR X19, [X1 + 0x78]
	0x03A09F34 MOV X0, X2
	0x03A09F38 MOV X1, X9
	0x03A09F3C BL 0x3A09F54
	0x03A09F40 CMP X19, X0
	0x03A09F44 CSET W0, GT
	0x03A09F48 LDP X30, X19, [X31], #0x10
	0x03A09F4C RET
	0x03A09F50 BL 0x1C16F20
	0x03A09F54 STR X30, [X31 - 0x10]!
	0x03A09F58 CBZ X0, 0x3A09FC0
	0x03A09F5C LDR X8, [X0 + 0x80]
	0x03A09F60 CMP X8, X1
	0x03A09F64 B.NE 0x3A09F70
	0x03A09F68 LDR X0, [X0 + 0x78]
	0x03A09F6C B 0x3A09FB8
	0x03A09F70 LDP X9, X8, [X0 + 0x18]
	0x03A09F74 LDR V0, [X0 + 0xD0]
	0x03A09F78 FMOV D1, 0.5
	0x03A09F7C MOVZ X10, 0x80000000
	0x03A09F80 SUB X8, X1, X8
	0x03A09F84 SCVTF D2, X8
	0x03A09F88 FMUL D0, D0, D2
	0x03A09F8C FMOV D2, -0.5
	0x03A09F90 MOVZ X8, 0x7FF00000
	0x03A09F94 FADD D1, D0, D1
	0x03A09F98 FADD D2, D0, D2
	0x03A09F9C FCMP D0, 0x0
	0x03A09FA0 FMOV D0, X8
	0x03A09FA4 FCSEL D1, D2, D1, MI
	0x03A09FA8 FCVTZS X8, D1
	0x03A09FAC FCMP D1, D0
	0x03A09FB0 CSEL X8, X10, X8, EQ
	0x03A09FB4 ADD X0, X8, X9
	0x03A09FB8 LDR X30, [X31], #0x10
	0x03A09FBC RET
	0x03A09FC0 BL 0x1C16F20
	0x03A09FC4 STR X30, [X31 - 0x10]!
	0x03A09FC8 CBZ X1, 0x3A09FF4
	0x03A09FCC LDR W8, [X1 + 0xD8]
	0x03A09FD0 MOVZ W9, 0x6C
	0x03A09FD4 CMP W8, 0x0
	0x03A09FD8 MOVZ W8, 0x70
	0x03A09FDC CSEL X8, X8, X9, EQ
	0x03A09FE0 LDR W8, [X0, X8, LSL]
	0x03A09FE4 CMP W8, 0x0
	0x03A09FE8 CSET W0, EQ
	0x03A09FEC LDR X30, [X31], #0x10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x9D9000
	008 Move X23, 0x74C000
	009 Move W8, [X19+3964]
	010 Move X23, [X23+888]
	011 Move X21, X2
	012 Move X22, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x74C000
	019 Move X0, [X0+888]
	020 Call 0x1C17CF4
	021 Move X0, 0x74C000
	022 Move X0, [X0+896]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X19+3964], W8
	026 Move X0, [X23]
	027 Call 0x1C17F10
	028 Move X1, X31
	029 Move X19, X0
	030 Call Object..ctor, X0
	031 Compare X19, 0
	032 JumpIfEqual {78}
	033 Move [X19+16], X22
	034 Move V1, [X21+16]
	035 Move V0, [X21+32]
	036 Move V2, [X21]
	037 Move [X19+48], V1
	038 Move [X19+56], V0
	039 Move [X19+2], V2
	040 Move X0, [X20+128]
	041 Compare X0, 0
	042 JumpIfEqual {78}
	043 Move X9, 0x74C000
	044 Move X9, [X9+896]
	045 Move W10, [X0+28]
	046 Move X8, [X0+16]
	047 Move X9, [X9]
	048 Add W10, W10, 1
	049 Move [X0+28], W10
	050 Compare X8, 0
	051 JumpIfEqual {78}
	052 NotImplemented "Instruction LDRSW not yet implemented."
	053 Move W11, [X8+24]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Add W9, W10, 1
	056 Add X8, X8, X10
	057 Move [X0+24], W9
	058 Move [X8+32], X19
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X30, [X31+48]
	064 Move X23, [X31+56]
	065 Return 
	066 Move X8, [X9+32]
	067 Move X1, X19
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move X8, [X8+192]
	073 Move X2, [X8+112]
	074 Move X30, [X31+48]
	075 Move X23, [X31+56]
	076 Call List`1<Object>.AddWithResize, X0, X1
	077 Return 
	078 Call 0x1C17F20

Method: System.Void InsertLocalMinimaIntoAEL(System.Int64 botY)

Disassembly:
	0x03A08A10 B.NE 0x3A08A20
	0x03A08A14 LDR X11, [X8 + 0x28]
	0x03A08A18 CMP X10, X11
	0x03A08A1C B.EQ 0x3A08A7C
	0x03A08A20 LDUR V0, [X8 + 0x38]
	0x03A08A24 LDUR V1, [X8 + 0x28]
	0x03A08A28 LDUR V3, [X8 + 0x18]
	0x03A08A2C ADD X8, X23, 0x18
	0x03A08A30 ADD X0, X31, 0x60
	0x03A08A34 STP V1, V0, [X31 + 0x70]
	0x03A08A38 LDP V1, V0, [X8 + 0x10]
	0x03A08A3C LDR V2, [X8]
	0x03A08A40 ADD X1, X31, 0x30
	0x03A08A44 ADD X2, X31, 0x0
	0x03A08A48 STP V0, V3, [X31 + 0x50]
	0x03A08A4C STP V2, V1, [X31 + 0x30]
	0x03A08A50 LDUR V0, [X9 + 0x38]
	0x03A08A54 LDUR V1, [X9 + 0x28]
	0x03A08A58 LDUR V2, [X9 + 0x18]
	0x03A08A5C STP V1, V0, [X31 + 0x10]
	0x03A08A60 STR V2, [X31]
	0x03A08A64 LDRB W3, [X20 + 0x40]
	0x03A08A68 BL 0x3A04950
	0x03A08A6C TBZ X0, 0x0, 0x3A08B10
	0x03A08A70 LDR X8, [X24]
	0x03A08A74 TBZ X21, 0x0, 0x3A08A98
	0x03A08A78 CBZ X8, 0x3A08B2C
	0x03A08A7C LDR X9, [X25]
	0x03A08A80 STR X9, [X8 + 0x48]
	0x03A08A84 LDR X9, [X25]
	0x03A08A88 CBZ X9, 0x3A08B2C
	0x03A08A8C MOV X22, X31
	0x03A08A90 STR X8, [X9 + 0x50]
	0x03A08A94 B 0x3A08B24
	0x03A08A98 CBZ X8, 0x3A08B2C
	0x03A08A9C LDR X14, [X23 + 0x48]
	0x03A08AA0 CBZ X14, 0x3A08B2C
	0x03A08AA4 LDP X9, X10, [X8 + 0x20]
	0x03A08AA8 LDP X11, X14, [X14 + 0x20]
	0x03A08AAC LDP X12, X13, [X23 + 0x20]
	0x03A08AB0 CMP X9, X11
	0x03A08AB4 B.NE 0x3A08AC0
	0x03A08AB8 CMP X10, X14
	0x03A08ABC B.EQ 0x3A08A7C
	0x03A08AC0 CMP X9, X12
	0x03A08AC4 B.NE 0x3A08AD0
	0x03A08AC8 CMP X10, X13
	0x03A08ACC B.EQ 0x3A08A7C
	0x03A08AD0 CMP X11, X12
	0x03A08AD4 B.NE 0x3A08AE0
	0x03A08AD8 CMP X14, X13
	0x03A08ADC B.EQ 0x3A08A7C
	0x03A08AE0 CMP X9, X11
	0x03A08AE4 B.NE 0x3A08AF8
	0x03A08AE8 CMP X13, X10
	0x03A08AEC CSET W9, LE
	0x03A08AF0 CMP X13, X14
	0x03A08AF4 B 0x3A08B04
	0x03A08AF8 CMP X12, X9
	0x03A08AFC CSET W9, LE
	0x03A08B00 CMP X12, X11
	0x03A08B04 CSET W10, LT
	0x03A08B08 EOR W9, W9, W10, 0x0
	0x03A08B0C TBZ X9, 0x0, 0x3A08A7C
	0x03A08B10 CMP X23, X22
	0x03A08B14 B.EQ 0x3A08B34
	0x03A08B18 CMP X22, 0x0
	0x03A08B1C CSEL X22, X23, X22, EQ
	0x03A08B20 MOV X24, X25
	0x03A08B24 LDR X23, [X24]
	0x03A08B28 CBNZ X23, 0x3A089C4
	0x03A08B2C BL 0x1C16F20
	0x03A08B30 MOV X22, X31
	0x03A08B34 STR X22, [X19 + 0x20]
	0x03A08B38 LDP X20, X19, [X31 + 0xC0]
	0x03A08B3C LDP X22, X21, [X31 + 0xB0]
	0x03A08B40 LDP X24, X23, [X31 + 0xA0]
	0x03A08B44 LDP X30, X25, [X31 + 0x90]
	0x03A08B48 ADD X31, X31, 0xD0
	0x03A08B4C RET
	0x03A08B50 STP X30, X25, [X31 - 0x40]!
	0x03A08B54 STP X24, X23, [X31 + 0x10]
	0x03A08B58 STP X22, X21, [X31 + 0x20]
	0x03A08B5C STP X20, X19, [X31 + 0x30]
	0x03A08B60 ADRP X20, 0x9D9000
	0x03A08B64 LDRB W8, [X20 + 0xF96]
	0x03A08B68 MOV X19, X0
	0x03A08B6C TBNZ X8, 0x0, 0x3A08B90
	0x03A08B70 ADRP X0, 0x74C000
	0x03A08B74 LDR X0, [X0 + 0x260]
	0x03A08B78 BL 0x1C16CF4
	0x03A08B7C ADRP X0, 0x74C000
	0x03A08B80 LDR X0, [X0 + 0x268]
	0x03A08B84 BL 0x1C16CF4
	0x03A08B88 MOVZ W8, 0x1
	0x03A08B8C STRB W8, [X20 + 0xF96]
	0x03A08B90 LDR X0, [X19 + 0x30]
	0x03A08B94 CBZ X0, 0x3A08D3C
	0x03A08B98 ADRP X23, 0x74C000
	0x03A08B9C LDR X23, [X23 + 0x268]
	0x03A08BA0 MOV W20, W31
	0x03A08BA4 LDR W8, [X0 + 0x18]
	0x03A08BA8 CMP W20, W8
	0x03A08BAC B.GE 0x3A08D40
	0x03A08BB0 LDR X2, [X23]
	0x03A08BB4 MOV W1, W20
	0x03A08BB8 BL 0x301BCCC
	0x03A08BBC CBZ X0, 0x3A08D3C
	0x03A08BC0 LDR X8, [X0 + 0x20]
	0x03A08BC4 MOV X21, X0
	0x03A08BC8 CBZ X8, 0x3A08D30
	0x03A08BCC LDRB W9, [X21 + 0x15]
	0x03A08BD0 CBNZ W9, 0x3A08D30
	0x03A08BD4 MOV X24, X8
	0x03A08BD8 CBZ X24, 0x3A08D3C
	0x03A08BDC LDR X25, [X24 + 0x48]
	0x03A08BE0 CMP X25, X8
	0x03A08BE4 B.EQ 0x3A08D24
	0x03A08BE8 CBZ X25, 0x3A08D3C
	0x03A08BEC LDR X8, [X24 + 0x20]
	0x03A08BF0 LDR X9, [X25 + 0x20]
	0x03A08BF4 CMP X8, X9
	0x03A08BF8 B.NE 0x3A08D10
	0x03A08BFC LDR X8, [X24 + 0x28]
	0x03A08C00 LDR X9, [X25 + 0x28]
	0x03A08C04 CMP X8, X9
	0x03A08C08 B.NE 0x3A08D10
	0x03A08C0C LDR X8, [X25 + 0x48]
	0x03A08C10 CMP X8, X24
	0x03A08C14 B.EQ 0x3A08D10
	0x03A08C18 LDR X8, [X25 + 0x50]
	0x03A08C1C CMP X8, X24
	0x03A08C20 B.EQ 0x3A08D10
	0x03A08C24 LDR X9, [X24 + 0x50]
	0x03A08C28 STR X8, [X24 + 0x50]
	0x03A08C2C CBZ X8, 0x3A08D3C
	0x03A08C30 STR X24, [X8 + 0x48]
	0x03A08C34 STR X9, [X25 + 0x50]
	0x03A08C38 CBZ X9, 0x3A08D3C
	0x03A08C3C MOV X0, X19
	0x03A08C40 STR X25, [X9 + 0x48]
	0x03A08C44 STR X24, [X21 + 0x20]
	0x03A08C48 BL 0x3A065DC
	0x03A08C4C CBZ X0, 0x3A08D3C
	0x03A08C50 MOV X1, X0
	0x03A08C54 MOV X22, X0
	0x03A08C58 STR X25, [X0 + 0x20]
	0x03A08C5C BL 0x3A0D794
	0x03A08C60 LDR X0, [X22 + 0x20]
	0x03A08C64 LDR X1, [X21 + 0x20]
	0x03A08C68 BL 0x3A0D208
	0x03A08C6C TBZ X0, 0x0, 0x3A08C9C
	0x03A08C70 LDRB W8, [X21 + 0x14]
	0x03A08C74 STR X21, [X22 + 0x18]
	0x03A08C78 MOV X25, X24
	0x03A08C7C EOR W8, W8, 0x1
	0x03A08C80 STRB W8, [X22 + 0x14]
	0x03A08C84 LDRB W8, [X19 + 0x88]
	0x03A08C88 CBZ W8, 0x3A08D10
	0x03A08C8C MOV X0, X19
	0x03A08C90 MOV X1, X22
	0x03A08C94 MOV X2, X21
	0x03A08C98 B 0x3A08CE0
	0x03A08C9C LDR X0, [X21 + 0x20]
	0x03A08CA0 LDR X1, [X22 + 0x20]
	0x03A08CA4 BL 0x3A0D208
	0x03A08CA8 LDRB W8, [X21 + 0x14]
	0x03A08CAC STRB W8, [X22 + 0x14]
	0x03A08CB0 TBZ X0, 0x0, 0x3A08CE8
	0x03A08CB4 LDR X9, [X21 + 0x18]
	0x03A08CB8 EOR W8, W8, 0x1
	0x03A08CBC STRB W8, [X21 + 0x14]
	0x03A08CC0 MOV X25, X24
	0x03A08CC4 STR X9, [X22 + 0x18]
	0x03A08CC8 STR X22, [X21 + 0x18]
	0x03A08CCC LDRB W8, [X19 + 0x88]
	0x03A08CD0 CBZ W8, 0x3A08D10
	0x03A08CD4 MOV X0, X19
	0x03A08CD8 MOV X1, X21
	0x03A08CDC MOV X2, X22
	0x03A08CE0 BL 0x3A0D428
	0x03A08CE4 B 0x3A08D0C
	0x03A08CE8 LDR X8, [X21 + 0x18]
	0x03A08CEC MOV X25, X24
	0x03A08CF0 STR X8, [X22 + 0x18]
	0x03A08CF4 LDRB W8, [X19 + 0x88]
	0x03A08CF8 CBZ W8, 0x3A08D10
	0x03A08CFC MOV X0, X19
	0x03A08D00 MOV X1, X21
	0x03A08D04 MOV X2, X22
	0x03A08D08 BL 0x3A0D278
	0x03A08D0C MOV X25, X24
	0x03A08D10 LDR X25, [X25 + 0x48]
	0x03A08D14 LDR X8, [X21 + 0x20]
	0x03A08D18 CMP X25, X8
	0x03A08D1C B.NE 0x3A08BE8
	0x03A08D20 LDR X25, [X24 + 0x48]
	0x03A08D24 CMP X25, X8
	0x03A08D28 MOV X24, X25
	0x03A08D2C B.NE 0x3A08BD8
	0x03A08D30 LDR X0, [X19 + 0x30]
	0x03A08D34 ADD W20, W20, 0x1
	0x03A08D38 CBNZ X0, 0x3A08BA4
	0x03A08D3C BL 0x1C16F20
	0x03A08D40 LDP X20, X19, [X31 + 0x30]
	0x03A08D44 LDP X22, X21, [X31 + 0x20]
	0x03A08D48 LDP X24, X23, [X31 + 0x10]
	0x03A08D4C LDP X30, X25, [X31], #0x40
	0x03A08D50 RET
	0x03A08D54 STR X30, [X31 - 0x20]!
	0x03A08D58 STP X20, X19, [X31 + 0x10]
	0x03A08D5C ADRP X20, 0x9D9000
	0x03A08D60 LDRB W8, [X20 + 0xF7A]
	0x03A08D64 MOV X19, X0
	0x03A08D68 TBNZ X8, 0x0, 0x3A08D8C
	0x03A08D6C ADRP X0, 0x74C000
	0x03A08D70 LDR X0, [X0 + 0x370]
	0x03A08D74 BL 0x1C16CF4
	0x03A08D78 ADRP X0, 0x74C000
	0x03A08D7C LDR X0, [X0 + 0x260]
	0x03A08D80 BL 0x1C16CF4
	0x03A08D84 MOVZ W8, 0x1
	0x03A08D88 STRB W8, [X20 + 0xF7A]
	0x03A08D8C LDR X8, [X19 + 0x30]
	0x03A08D90 CBZ X8, 0x3A08DBC
	0x03A08D94 MOV W20, W31
	0x03A08D98 LDR W2, [X8 + 0x18]
	0x03A08D9C CMP W20, W2
	0x03A08DA0 B.GE 0x3A08DC0
	0x03A08DA4 MOV X0, X19
	0x03A08DA8 MOV W1, W20
	0x03A08DAC BL 0x3A066E0
	0x03A08DB0 LDR X8, [X19 + 0x30]
	0x03A08DB4 ADD W20, W20, 0x1
	0x03A08DB8 CBNZ X8, 0x3A08D98
	0x03A08DBC BL 0x1C16F20
	0x03A08DC0 LDR W9, [X8 + 0x1C]
	0x03A08DC4 CMP W2, 0x1
	0x03A08DC8 ADD W9, W9, 0x1
	0x03A08DCC STP W31, W9, [X8 + 0x18]
	0x03A08DD0 B.LT 0x3A08DEC
	0x03A08DD4 LDR X0, [X8 + 0x10]
	0x03A08DD8 LDP X20, X19, [X31 + 0x10]
	0x03A08DDC MOV W1, W31
	0x03A08DE0 MOV X3, X31
	0x03A08DE4 LDR X30, [X31], #0x20
	0x03A08DE8 B 0x339FA34
	0x03A08DEC LDP X20, X19, [X31 + 0x10]
	0x03A08DF0 LDR X30, [X31], #0x20
	0x03A08DF4 RET
	0x03A08DF8 STR X30, [X31 - 0x40]!
	0x03A08DFC STP X24, X23, [X31 + 0x10]
	0x03A08E00 STP X22, X21, [X31 + 0x20]
	0x03A08E04 STP X20, X19, [X31 + 0x30]
	0x03A08E08 ADRP X19, 0x9D9000
	0x03A08E0C ADRP X24, 0x74C000
	0x03A08E10 LDRB W8, [X19 + 0xF7B]
	0x03A08E14 LDR X24, [X24 + 0x378]
	0x03A08E18 MOV X21, X3
	0x03A08E1C MOV X22, X2
	0x03A08E20 MOV X23, X1
	0x03A08E24 MOV X20, X0
	0x03A08E28 TBNZ X8, 0x0, 0x3A08E4C
	0x03A08E2C ADRP X0, 0x74C000
	0x03A08E30 LDR X0, [X0 + 0x378]
	0x03A08E34 BL 0x1C16CF4
	0x03A08E38 ADRP X0, 0x74C000
	0x03A08E3C LDR X0, [X0 + 0x380]
	0x03A08E40 BL 0x1C16CF4
	0x03A08E44 MOVZ W8, 0x1
	0x03A08E48 STRB W8, [X19 + 0xF7B]
	0x03A08E4C LDR X0, [X24]
	0x03A08E50 BL 0x1C16F10
	0x03A08E54 MOV X1, X31
	0x03A08E58 MOV X19, X0
	0x03A08E5C BL 0x33BDD8C
	0x03A08E60 CBZ X19, 0x3A08EF8
	0x03A08E64 STP X23, X22, [X19 + 0x10]
	0x03A08E68 LDP V1, V0, [X21 + 0x10]
	0x03A08E6C LDR V2, [X21]
	0x03A08E70 STP V1, V0, [X19 + 0x30]
	0x03A08E74 STR V2, [X19 + 0x2]
	0x03A08E78 LDR X0, [X20 + 0x78]
	0x03A08E7C CBZ X0, 0x3A08EF8
	0x03A08E80 ADRP X9, 0x74C000
	0x03A08E84 LDR X9, [X9 + 0x380]
	0x03A08E88 LDR W10, [X0 + 0x1C]
	0x03A08E8C LDR X8, [X0 + 0x10]
	0x03A08E90 LDR X9, [X9]
	0x03A08E94 ADD W10, W10, 0x1
	0x03A08E98 STR W10, [X0 + 0x1C]
	0x03A08E9C CBZ X8, 0x3A08EF8
	0x03A08EA0 LDRSW X10, [X0 + 0x18]
	0x03A08EA4 LDR W11, [X8 + 0x18]
	0x03A08EA8 CMP W10, W11
	0x03A08EAC B.CS 0x3A08ED4
	0x03A08EB0 ADD W9, W10, 0x1
	0x03A08EB4 ADD X8, X8, X10, 0x3, LSL
	0x03A08EB8 STR W9, [X0 + 0x18]
	0x03A08EBC STR X19, [X8 + 0x20]
	0x03A08EC0 LDP X20, X19, [X31 + 0x30]
	0x03A08EC4 LDP X22, X21, [X31 + 0x20]
	0x03A08EC8 LDP X24, X23, [X31 + 0x10]
	0x03A08ECC LDR X30, [X31], #0x40
	0x03A08ED0 RET
	0x03A08ED4 LDR X8, [X9 + 0x20]

ISIL:
	001 Move [X31-80], X29
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Subtract X31, X31, 816
	011 Move X21, 0x9DA000
	012 Move W8, [X21+3965]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x74D000
	020 Move X0, [X0+832]
	021 Call 0x1C17CF4
	022 Move X0, 0x74D000
	023 Move X0, [X0+840]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3965], W8
	027 Move X8, [X20+24]
	028 Compare X8, 0
	029 JumpIfEqual {382}
	030 Move X25, 0x74D000
	031 Move X25, [X25+840]
	032 Move X9, [X8+16]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X9, [X8+40]
	035 Move X0, X20
	036 Move [X20+24], X9
	037 Move X21, [X8+24]
	038 Move X22, [X8+32]
	039 Compare X21, 0
	040 JumpIfEqual {74}
	041 Move X1, X21
	042 Move X2, X31
	043 Call Clipper.InsertEdgeIntoAEL, X0, X1, X2
	044 Move X0, X20
	045 Compare X22, 0
	046 JumpIfEqual {100}
	047 Move X1, X22
	048 Move X2, X21
	049 Call Clipper.InsertEdgeIntoAEL, X0, X1, X2
	050 Move X0, X20
	051 Move X1, X21
	052 Call Clipper.SetWindingCount, X0, X1
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 Move X0, X20
	055 Move X1, X21
	056 Move [X22+228], D0
	057 Call Clipper.IsContributing, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {122}
	062 Move V1, [X21+32]
	063 Move V0, [X21+48]
	064 Move V2, [X21+1]
	065 Add X3, X31, 672
	066 Move X0, X20
	067 Move X1, X21
	068 Move X2, X22
	069 Move [X31+688], V1
	070 Move [X31+696], V0
	071 Move [X31+42], V2
	072 Call Clipper.AddLocalMinPoly, X0, X1, X2, X3
	073 Move X23, X0
	074 Move X1, X22
	075 Move X2, X31
	076 Call Clipper.InsertEdgeIntoAEL, X0, X1, X2
	077 Move X0, X20
	078 Move X1, X22
	079 Call Clipper.SetWindingCount, X0, X1
	080 Move X0, X20
	081 Move X1, X22
	082 Call Clipper.IsContributing, X0, X1
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfNotEqual {126}
	087 Compare X22, 0
	088 JumpIfEqual {393}
	089 Move V1, [X22+32]
	090 Move V0, [X22+48]
	091 Move V2, [X22+1]
	092 Add X2, X31, 768
	093 Move X0, X20
	094 Move X1, X22
	095 Move [X31+784], V1
	096 Move [X31+792], V0
	097 Move [X31+48], V2
	098 Call Clipper.AddOutPt, X0, X1, X2
	099 Move X23, X0
	100 Move X1, X21
	101 Call Clipper.SetWindingCount, X0, X1
	102 Move X0, X20
	103 Move X1, X21
	104 Call Clipper.IsContributing, X0, X1
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {119}
	109 Move V1, [X21+32]
	110 Move V0, [X21+48]
	111 Move V2, [X21+1]
	112 Add X2, X31, 720
	113 Move X0, X20
	114 Move X1, X21
	115 Move [X31+736], V1
	116 Move [X31+744], V0
	117 Move [X31+45], V2
	118 Call Clipper.AddOutPt, X0, X1, X2
	119 Move X1, [X21+128]
	120 Move X0, X20
	121 Call ClipperBase.InsertScanbeam, X0, X1
	122 Move X23, X31
	123 Move X1, [X21+128]
	124 Move X0, X20
	125 Call ClipperBase.InsertScanbeam, X0, X1
	126 Compare X22, 0
	127 JumpIfEqual {333}
	128 Move X23, X31
	129 Move X8, [X22+176]
	130 Compare X8, 0
	131 JumpIfEqual {137}
	132 Move X1, [X22+128]
	133 Move X0, X20
	134 Call ClipperBase.InsertScanbeam, X0, X1
	135 Compare X21, 0
	136 JumpIfNotEqual {148}
	137 Move X8, [X22+256]
	138 Compare X8, 0
	139 JumpIfEqual {143}
	140 Move X1, [X8+128]
	141 Move X0, X20
	142 Call ClipperBase.InsertScanbeam, X0, X1
	143 Move X0, X20
	144 Move X1, X22
	145 Call Clipper.AddEdgeToSEL, X0, X1
	146 Compare X21, 0
	147 JumpIfEqual {333}
	148 Compare X23, 0
	149 JumpIfEqual {153}
	150 Move X8, [X22+176]
	151 Compare X8, 0
	152 JumpIfEqual {336}
	153 Move W8, [X21+236]
	154 Move TEMP, X8
	155 And TEMP, TEMP, -2147483648
	156 Compare TEMP, -2147483648
	157 JumpIfEqual {234}
	158 Move X8, [X21+272]
	159 Compare X8, 0
	160 JumpIfEqual {234}
	161 Move X9, [X8+72]
	162 Move X10, [X21+24]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move W9, [X8+236]
	165 Move TEMP, X9
	166 And TEMP, TEMP, -2147483648
	167 Compare TEMP, -2147483648
	168 JumpIfEqual {234}
	169 Move V1, [X8+80]
	170 Move V0, [X8+96]
	171 Move V3, [X8+4]
	172 Add X0, X31, 576
	173 Add X1, X31, 528
	174 Move [X31+592], V1
	175 Move [X31+600], V0
	176 Move V1, [X8+128]
	177 Move V0, [X8+144]
	178 Move V2, [X8+7]
	179 Add X2, X31, 480
	180 Add X3, X31, 432
	181 Move [X31+560], V0
	182 Move [X31+568], V3
	183 Move [X31+528], V2
	184 Move [X31+536], V1
	185 Move V1, [X21+80]
	186 Move V0, [X21+96]
	187 Move V3, [X21+4]
	188 Move [X31+496], V1
	189 Move [X31+504], V0
	190 Move V1, [X21+128]
	191 Move V0, [X21+144]
	192 Move V2, [X21+7]
	193 Move [X31+464], V0
	194 Move [X31+472], V3
	195 Move [X31+432], V2
	196 Move [X31+440], V1
	197 Move W4, [X20+64]
	198 Call ClipperBase.SlopesEqual, X0, X1, X2, X3, X4
	199 Move TEMP, X0
	200 And TEMP, TEMP, 1
	201 Compare TEMP, 1
	202 JumpIfNotEqual {234}
	203 Move W8, [X21+224]
	204 Compare W8, 0
	205 JumpIfEqual {234}
	206 Move X1, [X21+272]
	207 Compare X1, 0
	208 JumpIfEqual {393}
	209 Move W8, [X1+224]
	210 Compare W8, 0
	211 JumpIfEqual {234}
	212 Add X8, X21, 16
	213 Move V1, [X8+16]
	214 Move V0, [X8+32]
	215 Move V2, [X8]
	216 Add X2, X31, 384
	217 Move X0, X20
	218 Add X24, X21, 112
	219 Move [X31+400], V1
	220 Move [X31+408], V0
	221 Move [X31+24], V2
	222 Call Clipper.AddOutPt, X0, X1, X2
	223 Move V0, [X24]
	224 Move V1, [X24+16]
	225 Move V2, [X24+2]
	226 Move X2, X0
	227 Add X3, X31, 336
	228 Move X0, X20
	229 Move X1, X23
	230 Move [X31+336], V0
	231 Move [X31+344], V1
	232 Move [X31+23], V2
	233 Call Clipper.AddJoin, X0, X1, X2, X3
	234 Move X8, [X21+264]
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Move W8, [X22+236]
	237 Move TEMP, X8
	238 And TEMP, TEMP, -2147483648
	239 Compare TEMP, -2147483648
	240 JumpIfEqual {313}
	241 Move X8, [X22+272]
	242 Compare X8, 0
	243 JumpIfEqual {393}
	244 Move W9, [X8+236]
	245 Move TEMP, X9
	246 And TEMP, TEMP, -2147483648
	247 Compare TEMP, -2147483648
	248 JumpIfEqual {313}
	249 Move V1, [X8+80]
	250 Move V0, [X8+96]
	251 Move V3, [X8+4]
	252 Add X0, X31, 288
	253 Add X1, X31, 240
	254 Move [X31+304], V1
	255 Move [X31+312], V0
	256 Move V1, [X8+128]
	257 Move V0, [X8+144]
	258 Move V2, [X8+7]
	259 Add X2, X31, 192
	260 Add X3, X31, 144
	261 Move [X31+272], V0
	262 Move [X31+280], V3
	263 Move [X31+240], V2
	264 Move [X31+248], V1
	265 Move V1, [X22+80]
	266 Move V0, [X22+96]
	267 Move V3, [X22+4]
	268 Move [X31+208], V1
	269 Move [X31+216], V0
	270 Move V1, [X22+128]
	271 Move V0, [X22+144]
	272 Move V2, [X22+7]
	273 Move [X31+176], V0
	274 Move [X31+184], V3
	275 Move [X31+144], V2
	276 Move [X31+152], V1
	277 Move W4, [X20+64]
	278 Call ClipperBase.SlopesEqual, X0, X1, X2, X3, X4
	279 Move TEMP, X0
	280 And TEMP, TEMP, 1
	281 Compare TEMP, 1
	282 JumpIfNotEqual {313}
	283 Move W8, [X22+224]
	284 Compare W8, 0
	285 JumpIfEqual {313}
	286 Move X1, [X22+272]
	287 Compare X1, 0
	288 JumpIfEqual {393}
	289 Move W8, [X1+224]
	290 Compare W8, 0
	291 JumpIfEqual {313}
	292 Move V1, [X22+32]
	293 Move V0, [X22+48]
	294 Move V2, [X22+1]
	295 Add X2, X31, 96
	296 Move X0, X20
	297 Add X24, X22, 112
	298 Move [X31+112], V1
	299 Move [X31+120], V0
	300 Move [X31+6], V2
	301 Call Clipper.AddOutPt, X0, X1, X2
	302 Move V0, [X24]
	303 Move V1, [X24+16]
	304 Move V2, [X24+2]
	305 Move X2, X0
	306 Add X3, X31, 48
	307 Move X0, X20
	308 Move X1, X23
	309 Move [X31+48], V0
	310 Move [X31+56], V1
	311 Move [X31+5], V2
	312 Call Clipper.AddJoin, X0, X1, X2, X3
	313 Move X23, [X21+264]
	314 Compare X23, 0
	315 JumpIfEqual {333}
	316 NotImplemented "Instruction CMP not yet implemented."
	317 Add X21, X21, 64
	318 Move V1, [X21+16]
	319 Move V0, [X21+32]
	320 Move V2, [X21]
	321 Add X3, X31, 0
	322 Move X0, X20
	323 Move X1, X22
	324 Move X2, X23
	325 Move [X31+16], V1
	326 Move [X31+24], V0
	327 Move [X31], V2
	328 Call Clipper.IntersectEdges, X0, X1, X2, X3
	329 Compare X23, 0
	330 JumpIfEqual {393}
	331 Move X23, [X23+264]
	332 NotImplemented "Instruction CMP not yet implemented."
	333 Move X8, [X20+24]
	334 Compare X8, 0
	335 JumpIfNotEqual {32}
	336 Move X0, [X20+128]
	337 Compare X0, 0
	338 JumpIfEqual {393}
	339 Move W8, [X0+24]
	340 NotImplemented "Instruction CMP not yet implemented."
	341 Move W9, [X22+224]
	342 Compare W9, 0
	343 JumpIfEqual {153}
	344 NotImplemented "Instruction CMP not yet implemented."
	345 Move W24, W31
	346 Move X2, [X25]
	347 Move W1, W24
	348 Call List`1<Object>.get_Item, X0, X1
	349 Compare X0, 0
	350 JumpIfEqual {393}
	351 Move X1, [X0+16]
	352 Compare X1, 0
	353 JumpIfEqual {393}
	354 Move X8, [X1+32]
	355 Move X9, [X0+40]
	356 Move X10, [X22+24]
	357 Move X11, [X22+120]
	358 NotImplemented "Instruction CMP not yet implemented."
	359 NotImplemented "Instruction CSEL not yet implemented."
	360 NotImplemented "Instruction CSEL not yet implemented."
	361 NotImplemented "Instruction CMP not yet implemented."
	362 NotImplemented "Instruction CSEL not yet implemented."
	363 NotImplemented "Instruction CSEL not yet implemented."
	364 NotImplemented "Instruction CMP not yet implemented."
	365 NotImplemented "Instruction CMP not yet implemented."
	366 Move V1, [X0+48]
	367 Move V0, [X0+64]
	368 Move V2, [X0+2]
	369 Add X3, X31, 624
	370 Move X0, X20
	371 Move X2, X23
	372 Move [X31+640], V1
	373 Move [X31+648], V0
	374 Move [X31+39], V2
	375 Call Clipper.AddJoin, X0, X1, X2, X3
	376 Move X0, [X20+128]
	377 Compare X0, 0
	378 JumpIfEqual {393}
	379 Move W8, [X0+24]
	380 Add W24, W24, 1
	381 NotImplemented "Instruction CMP not yet implemented."
	382 Add X31, X31, 816
	383 Move X20, [X31+64]
	384 Move X19, [X31+72]
	385 Move X22, [X31+48]
	386 Move X21, [X31+56]
	387 Move X24, [X31+32]
	388 Move X23, [X31+40]
	389 Move X30, [X31+16]
	390 Move X25, [X31+24]
	391 Move X29, [X31+80]
	392 Return 
	393 Call 0x1C17F20

Method: System.Void InsertEdgeIntoAEL(UnityEngine.Rendering.Universal.TEdge edge, UnityEngine.Rendering.Universal.TEdge startEdge)

Disassembly:
	0x03A09FF0 RET
	0x03A09FF4 BL 0x1C16F20
	0x03A09FF8 STR X30, [X31 - 0x10]!
	0x03A09FFC CBZ X1, 0x3A0A028
	0x03A0A000 LDR W8, [X1 + 0xD8]
	0x03A0A004 MOVZ W9, 0x70
	0x03A0A008 CMP W8, 0x0
	0x03A0A00C MOVZ W8, 0x6C
	0x03A0A010 CSEL X8, X8, X9, EQ
	0x03A0A014 LDR W8, [X0, X8, LSL]
	0x03A0A018 CMP W8, 0x0
	0x03A0A01C CSET W0, EQ
	0x03A0A020 LDR X30, [X31], #0x10
	0x03A0A024 RET
	0x03A0A028 BL 0x1C16F20
	0x03A0A02C LDR X8, [X0 + 0x50]
	0x03A0A030 STR X8, [X1]
	0x03A0A034 CBZ X8, 0x3A0A050
	0x03A0A038 LDR X10, [X8 + 0x118]
	0x03A0A03C ADD X9, X8, 0x118
	0x03A0A040 STR X10, [X0 + 0x50]
	0x03A0A044 CBZ X10, 0x3A0A04C
	0x03A0A048 STR X31, [X10 + 0x120]
	0x03A0A04C STP X31, X31, [X9]
	0x03A0A050 CMP X8, 0x0
	0x03A0A054 CSET W0, NE
	0x03A0A058 RET
	0x03A0A05C LDR X8, [X0 + 0x38]
	0x03A0A060 STR X8, [X0 + 0x50]
	0x03A0A064 CBZ X8, 0x3A0A07C
	0x03A0A068 ADD X8, X8, 0x108
	0x03A0A06C LDR V0, [X8]
	0x03A0A070 STR V0, [X8 + 0x1]
	0x03A0A074 FMOV X8, D0
	0x03A0A078 CBNZ X8, 0x3A0A068
	0x03A0A07C RET
	0x03A0A080 STR X30, [X31 - 0x10]!
	0x03A0A084 CBZ X1, 0x3A0A174
	0x03A0A088 LDR X8, [X1 + 0x118]
	0x03A0A08C CBNZ X8, 0x3A0A098
	0x03A0A090 LDR X9, [X1 + 0x120]
	0x03A0A094 CBZ X9, 0x3A0A16C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X0
	006 Add X20, X20, 56
	007 Move X8, [X20]
	008 Move X19, X1
	009 Compare X8, 0
	010 JumpIfEqual {29}
	011 Move X21, X2
	012 Compare X2, 0
	013 JumpIfNotEqual {36}
	014 Move X1, X8
	015 Move X2, X19
	016 Call Clipper.E2InsertsBeforeE1, X0, X1, X2
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {33}
	021 Compare X19, 0
	022 JumpIfEqual {61}
	023 Move [X19+272], X31
	024 Move X8, [X20]
	025 Move [X19+264], X8
	026 Compare X8, 0
	027 JumpIfEqual {61}
	028 Move [X8+272], X19
	029 Compare X19, 0
	030 JumpIfEqual {61}
	031 Move [X19+264], X31
	032 Move [X19+272], X31
	033 Move X21, [X20]
	034 Compare X21, 0
	035 JumpIfEqual {61}
	036 Move X1, [X21+264]
	037 Add X20, X21, 264
	038 Compare X1, 0
	039 JumpIfEqual {46}
	040 Move X2, X19
	041 Call Clipper.E2InsertsBeforeE1, X0, X1, X2
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {33}
	046 Compare X19, 0
	047 JumpIfEqual {61}
	048 Move X8, [X20]
	049 Move [X19+264], X8
	050 Move X8, [X20]
	051 Compare X8, 0
	052 JumpIfEqual {54}
	053 Move [X8+272], X19
	054 Move [X19+272], X21
	055 Move [X20], X19
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 Return 
	061 Call 0x1C17F20

Method: System.Boolean E2InsertsBeforeE1(UnityEngine.Rendering.Universal.TEdge e1, UnityEngine.Rendering.Universal.TEdge e2)

Disassembly:
	0x03A0AEE8 TBNZ X8, 0x1F, 0x3A0AF5C
	0x03A0AEEC LDR X8, [X31 + 0x378]
	0x03A0AEF0 CBZ X8, 0x3A0B3D0
	0x03A0AEF4 LDR X9, [X8 + 0x18]
	0x03A0AEF8 LDR X8, [X8 + 0x78]
	0x03A0AEFC LDR X10, [X25 + 0x18]
	0x03A0AF00 LDR X11, [X25 + 0x78]
	0x03A0AF04 CMP X9, X8
	0x03A0AF08 CSEL X12, X8, X9, GT
	0x03A0AF0C CSEL X8, X9, X8, GT
	0x03A0AF10 CMP X10, X11
	0x03A0AF14 CSEL X9, X11, X10, GT
	0x03A0AF18 CSEL X10, X10, X11, GT
	0x03A0AF1C CMP X12, X10
	0x03A0AF20 B.GE 0x3A0AF5C
	0x03A0AF24 CMP X9, X8
	0x03A0AF28 B.GE 0x3A0AF5C
	0x03A0AF2C MOV X0, X19
	0x03A0AF30 MOV X1, X25
	0x03A0AF34 BL 0x3A0A56C
	0x03A0AF38 LDP V0, V1, [X25 + 0x70]
	0x03A0AF3C LDR V2, [X25 + 0x9]
	0x03A0AF40 MOV X1, X0
	0x03A0AF44 ADD X3, X31, 0x2B0
	0x03A0AF48 MOV X0, X19
	0x03A0AF4C MOV X2, X23
	0x03A0AF50 STP V0, V1, [X31 + 0x2B0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X2, 0
	004 JumpIfEqual {28}
	005 Compare X1, 0
	006 JumpIfEqual {28}
	007 Move X8, [X2+72]
	008 Move X9, [X1+72]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X8, [X2+128]
	011 Move X9, [X1+128]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X19, [X2+120]
	014 Move X0, X1
	015 Move X1, X8
	016 Call Clipper.TopX, X0, X1
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction CSET not yet implemented."
	019 Move X19, [X1+120]
	020 Move X0, X2
	021 Move X1, X9
	022 Call Clipper.TopX, X0, X1
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CSET not yet implemented."
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Return X0
	028 Call 0x1C17F20

Method: System.Boolean IsEvenOddFillType(UnityEngine.Rendering.Universal.TEdge edge)

Disassembly:
	0x03A0AFC4 MOV X1, X2
	0x03A0AFC8 STP X31, X31, [X10]
	0x03A0AFCC STR X20, [X31 + 0x220]
	0x03A0AFD0 STR X8, [X31 + 0x228]
	0x03A0AFD4 STR X9, [X31 + 0x230]
	0x03A0AFD8 STR X31, [X31 + 0x238]
	0x03A0AFDC MOV X2, X24
	0x03A0AFE0 B 0x3A0B004
	0x03A0AFE4 LDR X10, [X31 + 0x18]
	0x03A0AFE8 ADD X3, X31, 0x1F0
	0x03A0AFEC MOV X0, X19
	0x03A0AFF0 MOV X1, X24
	0x03A0AFF4 STP X31, X31, [X10]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {14}
	004 Move W8, [X1+216]
	005 Move W9, 108
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move W8, 112
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 Move W8, [X0]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction CSET not yet implemented."
	012 Move X30, [X31+16]
	013 Return X0
	014 Call 0x1C17F20

Method: System.Boolean IsEvenOddAltFillType(UnityEngine.Rendering.Universal.TEdge edge)

Disassembly:
	0x03A0AFF8 STP X20, X8, [X31 + 0x1F0]
	0x03A0AFFC STR X9, [X31 + 0x200]
	0x03A0B000 STR X31, [X31 + 0x208]
	0x03A0B004 BL 0x3A09880
	0x03A0B008 ANDS W31, W27, 0x1
	0x03A0B00C MOVZ W8, 0x110
	0x03A0B010 MOVZ W9, 0x108
	0x03A0B014 CSEL X8, X9, X8, NE
	0x03A0B018 LDR X1, [X31 + 0x378]
	0x03A0B01C LDR X25, [X24, X8, LSL]
	0x03A0B020 MOV X0, X19
	0x03A0B024 MOV X2, X24
	0x03A0B028 BL 0x3A06868

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {14}
	004 Move W8, [X1+216]
	005 Move W9, 112
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move W8, 108
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 Move W8, [X0]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction CSET not yet implemented."
	012 Move X30, [X31+16]
	013 Return X0
	014 Call 0x1C17F20

Method: System.Boolean IsContributing(UnityEngine.Rendering.Universal.TEdge edge)

Disassembly:
	0x03A0A2E8 CMP X8, X22
	0x03A0A2EC B.EQ 0x3A0A2F4
	0x03A0A2F0 CBNZ X8, 0x3A0A2E0
	0x03A0A2F4 CMP X8, X22
	0x03A0A2F8 B.EQ 0x3A0A320
	0x03A0A2FC MOV X0, X21
	0x03A0A300 MOV X1, X22
	0x03A0A304 MOV X2, X23
	0x03A0A308 BL 0x3A0AA48
	0x03A0A30C CBNZ X22, 0x3A0A328
	0x03A0A310 B 0x3A0A48C
	0x03A0A314 MOV X0, X23
	0x03A0A318 CBNZ X22, 0x3A0A328
	0x03A0A31C B 0x3A0A48C
	0x03A0A320 MOV X0, X22
	0x03A0A324 CBZ X22, 0x3A0A48C
	0x03A0A328 LDR X10, [X22 + 0x20]
	0x03A0A32C CBZ X10, 0x3A0A48C
	0x03A0A330 CBZ X23, 0x3A0A48C
	0x03A0A334 MOV X9, X23
	0x03A0A338 LDR X11, [X10 + 0x50]
	0x03A0A33C LDR X12, [X9 + 0x20]!
	0x03A0A340 CBZ X12, 0x3A0A48C
	0x03A0A344 LDR X13, [X12 + 0x50]
	0x03A0A348 LDR W8, [X20 + 0xDC]
	0x03A0A34C LDR W14, [X19 + 0xDC]
	0x03A0A350 CBZ W8, 0x3A0A394
	0x03A0A354 CMP W14, 0x1
	0x03A0A358 B.NE 0x3A0A3B8
	0x03A0A35C MOV X14, X12
	0x03A0A360 CBZ X14, 0x3A0A48C
	0x03A0A364 LDP X15, X16, [X14 + 0x48]
	0x03A0A368 CMP X15, X12
	0x03A0A36C STP X16, X15, [X14 + 0x48]
	0x03A0A370 MOV X14, X15
	0x03A0A374 B.NE 0x3A0A360
	0x03A0A378 CBZ X11, 0x3A0A48C
	0x03A0A37C STR X13, [X11 + 0x48]
	0x03A0A380 CBZ X13, 0x3A0A48C
	0x03A0A384 STR X11, [X13 + 0x50]
	0x03A0A388 STR X10, [X12 + 0x48]
	0x03A0A38C STR X12, [X10 + 0x50]
	0x03A0A390 B 0x3A0A40C
	0x03A0A394 CBZ W14, 0x3A0A3D4
	0x03A0A398 CBZ X13, 0x3A0A48C
	0x03A0A39C STR X10, [X13 + 0x48]
	0x03A0A3A0 STR X13, [X10 + 0x50]
	0x03A0A3A4 STR X11, [X12 + 0x50]
	0x03A0A3A8 CBZ X11, 0x3A0A48C
	0x03A0A3AC STR X12, [X11 + 0x48]
	0x03A0A3B0 STR X12, [X22 + 0x20]
	0x03A0A3B4 B 0x3A0A40C
	0x03A0A3B8 CBZ X11, 0x3A0A48C
	0x03A0A3BC STR X12, [X11 + 0x48]
	0x03A0A3C0 STR X11, [X12 + 0x50]
	0x03A0A3C4 STR X13, [X10 + 0x50]
	0x03A0A3C8 CBZ X13, 0x3A0A48C
	0x03A0A3CC STR X10, [X13 + 0x48]
	0x03A0A3D0 B 0x3A0A40C
	0x03A0A3D4 MOV X14, X12
	0x03A0A3D8 CBZ X14, 0x3A0A48C
	0x03A0A3DC LDP X15, X16, [X14 + 0x48]
	0x03A0A3E0 CMP X15, X12
	0x03A0A3E4 STP X16, X15, [X14 + 0x48]
	0x03A0A3E8 MOV X14, X15
	0x03A0A3EC B.NE 0x3A0A3D8
	0x03A0A3F0 STR X10, [X12 + 0x48]
	0x03A0A3F4 STR X12, [X10 + 0x50]
	0x03A0A3F8 CBZ X11, 0x3A0A48C
	0x03A0A3FC STR X13, [X11 + 0x48]
	0x03A0A400 CBZ X13, 0x3A0A48C
	0x03A0A404 STR X11, [X13 + 0x50]
	0x03A0A408 STR X13, [X22 + 0x20]
	0x03A0A40C CMP X0, X23
	0x03A0A410 STR X31, [X22 + 0x28]
	0x03A0A414 B.NE 0x3A0A430
	0x03A0A418 LDR X10, [X23 + 0x18]
	0x03A0A41C CMP X10, X22
	0x03A0A420 B.EQ 0x3A0A428
	0x03A0A424 STR X10, [X22 + 0x18]
	0x03A0A428 LDRB W10, [X23 + 0x14]
	0x03A0A42C STRB W10, [X22 + 0x14]
	0x03A0A430 STP X31, X31, [X9]
	0x03A0A434 STR X22, [X23 + 0x18]
	0x03A0A438 MOVN W11, 0x0
	0x03A0A43C LDR W9, [X20 + 0xEC]
	0x03A0A440 LDR W10, [X19 + 0xEC]
	0x03A0A444 STR W11, [X20 + 0xEC]
	0x03A0A448 STR W11, [X19 + 0xEC]
	0x03A0A44C LDR X11, [X21 + 0x38]
	0x03A0A450 CBZ X11, 0x3A0A474

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x9D8000
	007 Move W8, [X21+3966]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x6EA000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3966], W8
	019 Compare X19, 0
	020 JumpIfEqual {90}
	021 Move W8, [X19+216]
	022 Move W9, 112
	023 Move W10, 108
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction CSEL not yet implemented."
	026 Move W8, [X20]
	027 NotImplemented "Instruction CSEL not yet implemented."
	028 Move W21, [X20]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Compare W8, 0
	032 JumpIfNotEqual {63}
	033 Move W8, [X19+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {48}
	036 Move W8, [X19+228]
	037 Move X8, 0x6EA000
	038 Move X8, [X8+1448]
	039 Move W22, [X19+228]
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CSNEG not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move W8, [X20+68]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X9, -48701440
	051 Add X9, X9, 2761
	052 NotImplemented "Instruction ADR not yet implemented."
	053 Move W11, [X9]
	054 Add X10, X10, X11
	055 CallNoReturn X10
	056 Move W8, [X19+216]
	057 Compare W8, 0
	058 JumpIfEqual {70}
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W8, [X19+232]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction CSET not yet implemented."
	063 Move W8, [X19+228]
	064 Add W31, W8, 1
	065 Move W0, W31
	066 Move W8, [X19+224]
	067 Compare W8, 0
	068 JumpIfEqual {70}
	069 Move W0, 1
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move W8, [X19+232]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CSET not yet implemented."
	074 Move W8, [X19+232]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction CSET not yet implemented."
	077 Move W8, [X19+232]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 NotImplemented "Instruction CSET not yet implemented."
	080 NotImplemented "Instruction ORN not yet implemented."
	081 Move W0, W8
	082 ShiftRight W0, 31
	083 And W0, W0, 0x7FFFFFFF
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X22, [X31+16]
	087 Move X21, [X31+24]
	088 Move X30, [X31+48]
	089 Return X0
	090 Call 0x1C17F20

Method: System.Void SetWindingCount(UnityEngine.Rendering.Universal.TEdge edge)

Disassembly:
	0x03A0A098 CBZ X2, 0x3A0A174
	0x03A0A09C LDR X11, [X2 + 0x118]
	0x03A0A0A0 CBZ X11, 0x3A0A0D4
	0x03A0A0A4 CMP X8, X2
	0x03A0A0A8 B.EQ 0x3A0A118
	0x03A0A0AC CMP X11, X1
	0x03A0A0B0 B.EQ 0x3A0A134
	0x03A0A0B4 LDR X9, [X1 + 0x120]
	0x03A0A0B8 STR X11, [X1 + 0x118]
	0x03A0A0BC STR X1, [X11 + 0x120]
	0x03A0A0C0 LDR X10, [X2 + 0x120]
	0x03A0A0C4 ADD X11, X2, 0x120
	0x03A0A0C8 STR X10, [X1 + 0x120]
	0x03A0A0CC CBNZ X10, 0x3A0A0F8
	0x03A0A0D0 B 0x3A0A0FC
	0x03A0A0D4 LDR X10, [X2 + 0x120]
	0x03A0A0D8 CBZ X10, 0x3A0A16C
	0x03A0A0DC CMP X8, X2
	0x03A0A0E0 B.EQ 0x3A0A11C
	0x03A0A0E4 CMP X11, X1
	0x03A0A0E8 B.EQ 0x3A0A134
	0x03A0A0EC LDR X9, [X1 + 0x120]
	0x03A0A0F0 ADD X11, X2, 0x120
	0x03A0A0F4 STP X31, X10, [X1 + 0x118]
	0x03A0A0F8 STR X1, [X10 + 0x118]
	0x03A0A0FC STR X8, [X2 + 0x118]
	0x03A0A100 CBZ X8, 0x3A0A108
	0x03A0A104 STR X2, [X8 + 0x120]
	0x03A0A108 STR X9, [X11]
	0x03A0A10C CBZ X9, 0x3A0A150
	0x03A0A110 STR X2, [X9 + 0x118]
	0x03A0A114 B 0x3A0A150
	0x03A0A118 STR X1, [X11 + 0x120]
	0x03A0A11C LDR X8, [X1 + 0x120]
	0x03A0A120 CBZ X8, 0x3A0A128
	0x03A0A124 STR X2, [X8 + 0x118]
	0x03A0A128 STP X1, X8, [X2 + 0x118]
	0x03A0A12C STP X11, X2, [X1 + 0x118]
	0x03A0A130 B 0x3A0A150
	0x03A0A134 CBZ X8, 0x3A0A13C
	0x03A0A138 STR X2, [X8 + 0x120]
	0x03A0A13C LDR X9, [X2 + 0x120]
	0x03A0A140 CBZ X9, 0x3A0A148
	0x03A0A144 STR X1, [X9 + 0x118]
	0x03A0A148 STP X2, X9, [X1 + 0x118]
	0x03A0A14C STP X8, X1, [X2 + 0x118]
	0x03A0A150 LDR X8, [X1 + 0x120]
	0x03A0A154 CBZ X8, 0x3A0A168
	0x03A0A158 LDR X8, [X2 + 0x120]
	0x03A0A15C CBNZ X8, 0x3A0A16C
	0x03A0A160 STR X2, [X0 + 0x50]
	0x03A0A164 B 0x3A0A16C
	0x03A0A168 STR X1, [X0 + 0x50]
	0x03A0A16C LDR X30, [X31], #0x10
	0x03A0A170 RET
	0x03A0A174 BL 0x1C16F20
	0x03A0A178 SUB X31, X31, 0x90
	0x03A0A17C STR X30, [X31 + 0x60]
	0x03A0A180 STP X22, X21, [X31 + 0x70]
	0x03A0A184 STP X20, X19, [X31 + 0x80]
	0x03A0A188 LDP V1, V0, [X3 + 0x10]
	0x03A0A18C LDR V2, [X3]
	0x03A0A190 MOV X19, X2
	0x03A0A194 ADD X2, X31, 0x30
	0x03A0A198 MOV X22, X3
	0x03A0A19C MOV X20, X1
	0x03A0A1A0 MOV X21, X0
	0x03A0A1A4 STP V1, V0, [X31 + 0x40]
	0x03A0A1A8 STR V2, [X31 + 0x3]
	0x03A0A1AC BL 0x3A09454
	0x03A0A1B0 CBZ X19, 0x3A0A240
	0x03A0A1B4 LDR W8, [X19 + 0xE0]
	0x03A0A1B8 CBNZ W8, 0x3A0A1DC
	0x03A0A1BC LDP V1, V0, [X22 + 0x10]
	0x03A0A1C0 LDR V2, [X22]
	0x03A0A1C4 ADD X2, X31, 0x0
	0x03A0A1C8 MOV X0, X21
	0x03A0A1CC MOV X1, X19
	0x03A0A1D0 STP V1, V0, [X31 + 0x10]
	0x03A0A1D4 STR V2, [X31]
	0x03A0A1D8 BL 0x3A09454
	0x03A0A1DC CBZ X20, 0x3A0A240
	0x03A0A1E0 LDR W8, [X20 + 0xEC]
	0x03A0A1E4 LDR W9, [X19 + 0xEC]
	0x03A0A1E8 CMP W8, W9
	0x03A0A1EC B.NE 0x3A0A210
	0x03A0A1F0 MOVN W8, 0x0
	0x03A0A1F4 STR W8, [X20 + 0xEC]
	0x03A0A1F8 STR W8, [X19 + 0xEC]
	0x03A0A1FC LDP X20, X19, [X31 + 0x80]
	0x03A0A200 LDP X22, X21, [X31 + 0x70]
	0x03A0A204 LDR X30, [X31 + 0x60]
	0x03A0A208 ADD X31, X31, 0x90
	0x03A0A20C RET
	0x03A0A210 MOV X0, X21
	0x03A0A214 B.GE 0x3A0A224
	0x03A0A218 MOV X1, X20
	0x03A0A21C MOV X2, X19
	0x03A0A220 B 0x3A0A22C
	0x03A0A224 MOV X1, X19
	0x03A0A228 MOV X2, X20
	0x03A0A22C LDP X20, X19, [X31 + 0x80]
	0x03A0A230 LDP X22, X21, [X31 + 0x70]
	0x03A0A234 LDR X30, [X31 + 0x60]
	0x03A0A238 ADD X31, X31, 0x90
	0x03A0A23C B 0x3A0A244
	0x03A0A240 BL 0x1C16F20
	0x03A0A244 STP X30, X23, [X31 - 0x30]!
	0x03A0A248 STP X22, X21, [X31 + 0x10]
	0x03A0A24C STP X20, X19, [X31 + 0x20]
	0x03A0A250 ADRP X22, 0x9D7000
	0x03A0A254 LDRB W8, [X22 + 0xF85]
	0x03A0A258 MOV X19, X2
	0x03A0A25C MOV X20, X1
	0x03A0A260 MOV X21, X0
	0x03A0A264 TBNZ X8, 0x0, 0x3A0A27C
	0x03A0A268 ADRP X0, 0x74A000
	0x03A0A26C LDR X0, [X0 + 0x268]
	0x03A0A270 BL 0x1C16CF4
	0x03A0A274 MOVZ W8, 0x1
	0x03A0A278 STRB W8, [X22 + 0xF85]
	0x03A0A27C CBZ X20, 0x3A0A48C
	0x03A0A280 LDR X0, [X21 + 0x30]
	0x03A0A284 CBZ X0, 0x3A0A48C
	0x03A0A288 ADRP X23, 0x74A000
	0x03A0A28C LDR X23, [X23 + 0x268]
	0x03A0A290 LDR W1, [X20 + 0xEC]
	0x03A0A294 LDR X2, [X23]
	0x03A0A298 BL 0x301BCCC
	0x03A0A29C CBZ X19, 0x3A0A48C
	0x03A0A2A0 MOV X22, X0
	0x03A0A2A4 LDR X0, [X21 + 0x30]
	0x03A0A2A8 CBZ X0, 0x3A0A48C
	0x03A0A2AC LDR W1, [X19 + 0xEC]
	0x03A0A2B0 LDR X2, [X23]
	0x03A0A2B4 BL 0x301BCCC
	0x03A0A2B8 MOV X23, X0
	0x03A0A2BC MOV X8, X22
	0x03A0A2C0 CBZ X8, 0x3A0A48C
	0x03A0A2C4 LDR X8, [X8 + 0x18]
	0x03A0A2C8 CMP X8, X23
	0x03A0A2CC B.EQ 0x3A0A2D4
	0x03A0A2D0 CBNZ X8, 0x3A0A2C0
	0x03A0A2D4 CMP X8, X23
	0x03A0A2D8 B.EQ 0x3A0A314
	0x03A0A2DC MOV X8, X23
	0x03A0A2E0 CBZ X8, 0x3A0A48C
	0x03A0A2E4 LDR X8, [X8 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x9D8000
	007 Move W8, [X21+3967]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x6EA000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3967], W8
	019 Compare X19, 0
	020 JumpIfEqual {165}
	021 Move X21, [X19+272]
	022 Compare X21, 0
	023 JumpIfEqual {33}
	024 Move W8, [X19+216]
	025 Move W9, [X21+216]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move W9, [X21+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {51}
	030 Move X21, [X21+272]
	031 Compare X21, 0
	032 JumpIfNotEqual {25}
	033 Move W9, [X19+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {47}
	036 Move W8, [X19+216]
	037 Move W9, 108
	038 Move W10, 112
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CSEL not yet implemented."
	041 Move W8, [X20]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move TEMP, 0
	044 Not TEMP
	045 Move W8, TEMP
	046 NotImplemented "Instruction CSNEG not yet implemented."
	047 Move W8, W31
	048 Move [X19+228], W9
	049 Move [X19+232], W31
	050 Add X9, X20, 56
	051 Move W10, [X19+224]
	052 Compare W10, 0
	053 JumpIfEqual {71}
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W8, 108
	056 Move W11, 112
	057 NotImplemented "Instruction CSEL not yet implemented."
	058 Move W8, [X20]
	059 Compare W8, 0
	060 JumpIfEqual {128}
	061 Move W22, [X21+228]
	062 Multiply W8, W22, W9
	063 Move TEMP, X8
	064 And TEMP, TEMP, -2147483648
	065 Compare TEMP, -2147483648
	066 JumpIfEqual {90}
	067 Multiply W8, W10, W9
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction CSEL not yet implemented."
	070 Add W8, W22, W8
	071 Move W10, [X20+68]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move W10, 108
	075 Move W11, 112
	076 NotImplemented "Instruction CSEL not yet implemented."
	077 Move W10, [X20]
	078 Compare W10, 0
	079 JumpIfEqual {112}
	080 Move W22, [X21+228]
	081 Multiply W8, W22, W9
	082 Move TEMP, X8
	083 And TEMP, TEMP, -2147483648
	084 Compare TEMP, -2147483648
	085 JumpIfEqual {90}
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move W8, 1
	088 NotImplemented "Instruction CSNEG not yet implemented."
	089 Add W8, W8, W22
	090 Move X8, 0x6EA000
	091 Move X8, [X8+1448]
	092 Move X0, [X8]
	093 Move W8, [X0+224]
	094 Compare W8, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1C17DFC
	097 NotImplemented "Instruction CMP not yet implemented."
	098 NotImplemented "Instruction CSNEG not yet implemented."
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move W8, [X19+224]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 NotImplemented "Instruction CSINC not yet implemented."
	103 Move W8, 1
	104 Move W8, [X19+224]
	105 Move W9, [X21+224]
	106 Move W10, [X21+228]
	107 Multiply W9, W8, W9
	108 NotImplemented "Instruction CMP not yet implemented."
	109 NotImplemented "Instruction CSEL not yet implemented."
	110 Add W8, W10, W8
	111 Move [X19+228], W8
	112 Move X10, [X21+272]
	113 Compare X10, 0
	114 JumpIfEqual {125}
	115 Move W9, 1
	116 Move W11, [X10+216]
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move W11, [X10+224]
	119 NotImplemented "Instruction CMP not yet implemented."
	120 NotImplemented "Instruction CSET not yet implemented."
	121 Xor W9, W9, W11
	122 Move X10, [X10+272]
	123 Compare X10, 0
	124 JumpIfNotEqual {116}
	125 Move W9, 1
	126 NotImplemented "Instruction ORN not yet implemented."
	127 And W10, W8, 1
	128 Move [X19+228], W10
	129 Move W8, [X21+232]
	130 Add X9, X21, 264
	131 Move [X19+232], W8
	132 Move W10, [X19+216]
	133 Move W11, 112
	134 Move X9, [X9]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move W10, 108
	137 NotImplemented "Instruction CSEL not yet implemented."
	138 Move W10, [X20]
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Compare W10, 0
	141 Invalid "Jump target not found in method."
	142 Compare X9, 0
	143 JumpIfEqual {165}
	144 Move W10, [X9+224]
	145 Add W8, W10, W8
	146 Move [X19+232], W8
	147 Move X9, [X9+264]
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Compare X9, 0
	150 JumpIfEqual {165}
	151 Move W10, [X9+224]
	152 Compare W10, 0
	153 JumpIfEqual {157}
	154 NotImplemented "Instruction CMP not yet implemented."
	155 NotImplemented "Instruction CSET not yet implemented."
	156 Move [X19+232], W8
	157 Move X9, [X9+264]
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move X20, [X31+32]
	160 Move X19, [X31+40]
	161 Move X22, [X31+16]
	162 Move X21, [X31+24]
	163 Move X30, [X31+48]
	164 Return 
	165 Call 0x1C17F20

Method: System.Void AddEdgeToSEL(UnityEngine.Rendering.Universal.TEdge edge)

Disassembly:
	0x03A0A818 MOV V0.16B, V8.16B
	0x03A0A81C MOV V1.16B, V9.16B
	0x03A0A820 MOV X0, X31
	0x03A0A824 FABS D11, D11
	0x03A0A828 BL 0x337EDC0
	0x03A0A82C MOV V12.16B, V0.16B
	0x03A0A830 MOV V0.16B, V10.16B
	0x03A0A834 MOV V1.16B, V11.16B
	0x03A0A838 MOV X0, X31
	0x03A0A83C BL 0x337EDC0
	0x03A0A840 FCMP D12, D0
	0x03A0A844 B.NE 0x3A0A898
	0x03A0A848 LDR X0, [X21]
	0x03A0A84C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+80]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Compare X1, 0
	006 JumpIfEqual {18}
	007 Move [X1+280], X8
	008 Move [X1+288], X31
	009 Move [X8+288], X1
	010 Move [X0+80], X1
	011 Move [X0+80], X1
	012 Compare X1, 0
	013 JumpIfEqual {18}
	014 Move [X1+280], X31
	015 Move [X1+288], X31
	016 Move X30, [X31+16]
	017 Return 
	018 Call 0x1C17F20

Method: System.Boolean PopEdgeFromSEL(out UnityEngine.Rendering.Universal.TEdge e)

Disassembly:
	0x03A0B02C MOV X24, X25
	0x03A0B030 CBNZ X25, 0x3A0ADB0
	0x03A0B034 LDR X1, [X31 + 0x378]
	0x03A0B038 CBNZ X1, 0x3A0B048
	0x03A0B03C B 0x3A0B3D0
	0x03A0B040 LDR X1, [X31 + 0x38]
	0x03A0B044 CBZ X1, 0x3A0B3D0
	0x03A0B048 LDR X8, [X1 + 0x100]
	0x03A0B04C CBZ X8, 0x3A0B128
	0x03A0B050 LDR X8, [X8 + 0xB0]
	0x03A0B054 CBNZ X8, 0x3A0B128
	0x03A0B058 ADD X1, X31, 0x378

ISIL:
	001 Move X8, [X0+80]
	002 Move [X1], X8
	003 Compare X8, 0
	004 JumpIfEqual {13}
	005 Move X10, [X8+280]
	006 Add X9, X8, 280
	007 Move [X0+80], X10
	008 Compare X10, 0
	009 JumpIfEqual {11}
	010 Move [X10+288], X31
	011 Move [X9], X31
	012 Move [X9+8], X31
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction CSET not yet implemented."
	015 Return X0

Method: System.Void CopyAELToSEL()

Disassembly:
	0x03A0B05C MOV X0, X19
	0x03A0B060 BL 0x3A0676C
	0x03A0B064 LDR X24, [X31 + 0x378]
	0x03A0B068 CBZ X24, 0x3A0B3D0
	0x03A0B06C LDR W8, [X24 + 0xEC]
	0x03A0B070 TBNZ X8, 0x1F, 0x3A0B09C
	0x03A0B074 LDP V1, V0, [X24 + 0x20]
	0x03A0B078 LDR V2, [X24 + 0x1]
	0x03A0B07C ADD X2, X31, 0x1C0

ISIL:
	001 Move X8, [X0+56]
	002 Move [X0+80], X8
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Add X8, X8, 264
	006 Move V0, [X8]
	007 Move [X8+1], V0
	008 Move X8, D0
	009 Compare X8, 0
	010 JumpIfNotEqual {5}
	011 Return 

Method: System.Void SwapPositionsInSEL(UnityEngine.Rendering.Universal.TEdge edge1, UnityEngine.Rendering.Universal.TEdge edge2)

Disassembly:
	0x03A0B080 MOV X0, X19
	0x03A0B084 MOV X1, X24
	0x03A0B088 STP V1, V0, [X31 + 0x1D0]
	0x03A0B08C STR V2, [X31 + 0x1C]
	0x03A0B090 BL 0x3A09454
	0x03A0B094 LDR X24, [X31 + 0x378]
	0x03A0B098 CBZ X24, 0x3A0B3D0
	0x03A0B09C LDR X8, [X24 + 0x18]
	0x03A0B0A0 LDR X9, [X24 + 0x78]
	0x03A0B0A4 CMP X8, X9
	0x03A0B0A8 CSEL X10, X8, X9, LT
	0x03A0B0AC CSEL X8, X9, X8, LT
	0x03A0B0B0 CSET W27, LT
	0x03A0B0B4 STP X8, X10, [X31 + 0x28]
	0x03A0B0B8 B 0x3A0AD94
	0x03A0B0BC LDR X1, [X31 + 0x378]
	0x03A0B0C0 CBZ X1, 0x3A0B3D0
	0x03A0B0C4 LDR W8, [X1 + 0xEC]
	0x03A0B0C8 LDR X20, [X31 + 0x20]
	0x03A0B0CC TBNZ X8, 0x1F, 0x3A0B0F4
	0x03A0B0D0 LDP V1, V0, [X1 + 0x80]
	0x03A0B0D4 LDR V2, [X1 + 0x7]
	0x03A0B0D8 ADD X3, X31, 0x250
	0x03A0B0DC MOV X0, X19
	0x03A0B0E0 MOV X2, X20
	0x03A0B0E4 STP V1, V0, [X31 + 0x260]
	0x03A0B0E8 STR V2, [X31 + 0x25]
	0x03A0B0EC BL 0x3A0A178
	0x03A0B0F0 LDR X1, [X31 + 0x378]
	0x03A0B0F4 MOV X0, X19
	0x03A0B0F8 BL 0x3A0693C
	0x03A0B0FC MOV X0, X19
	0x03A0B100 MOV X1, X20
	0x03A0B104 BL 0x3A0693C
	0x03A0B108 ADD X31, X31, 0x380
	0x03A0B10C LDP X20, X19, [X31 + 0x50]
	0x03A0B110 LDP X22, X21, [X31 + 0x40]
	0x03A0B114 LDP X24, X23, [X31 + 0x30]
	0x03A0B118 LDP X26, X25, [X31 + 0x20]
	0x03A0B11C LDP X28, X27, [X31 + 0x10]
	0x03A0B120 LDP X29, X30, [X31], #0x60
	0x03A0B124 RET
	0x03A0B128 CBNZ X23, 0x3A0B1F8
	0x03A0B12C LDR W8, [X1 + 0xEC]
	0x03A0B130 TBNZ X8, 0x1F, 0x3A0B1F8
	0x03A0B134 MOV X0, X19
	0x03A0B138 BL 0x3A0A56C
	0x03A0B13C LDR X21, [X19 + 0x50]
	0x03A0B140 MOV X20, X0
	0x03A0B144 CBZ X21, 0x3A0B1C8
	0x03A0B148 LDR W8, [X21 + 0xEC]
	0x03A0B14C TBNZ X8, 0x1F, 0x3A0B1C0
	0x03A0B150 LDR X8, [X31 + 0x378]
	0x03A0B154 CBZ X8, 0x3A0B3D0
	0x03A0B158 LDR X9, [X8 + 0x18]
	0x03A0B15C LDR X8, [X8 + 0x78]
	0x03A0B160 LDR X10, [X21 + 0x18]
	0x03A0B164 LDR X11, [X21 + 0x78]
	0x03A0B168 CMP X9, X8
	0x03A0B16C CSEL X12, X8, X9, GT
	0x03A0B170 CSEL X8, X9, X8, GT
	0x03A0B174 CMP X10, X11

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {73}
	004 Move X8, [X1+280]
	005 Compare X8, 0
	006 JumpIfNotEqual {10}
	007 Move X9, [X1+288]
	008 Compare X9, 0
	009 JumpIfEqual {71}
	010 Compare X2, 0
	011 JumpIfEqual {73}
	012 Move X11, [X2+280]
	013 Compare X11, 0
	014 JumpIfEqual {25}
	015 NotImplemented "Instruction CMP not yet implemented."
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X9, [X1+288]
	018 Move [X1+280], X11
	019 Move [X11+288], X1
	020 Move X10, [X2+288]
	021 Add X11, X2, 288
	022 Move [X1+288], X10
	023 Compare X10, 0
	024 JumpIfNotEqual {34}
	025 Move X10, [X2+288]
	026 Compare X10, 0
	027 JumpIfEqual {71}
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X9, [X1+288]
	031 Add X11, X2, 288
	032 Move [X1+280], X31
	033 Move [X1+288], X10
	034 Move [X10+280], X1
	035 Move [X2+280], X8
	036 Compare X8, 0
	037 JumpIfEqual {39}
	038 Move [X8+288], X2
	039 Move [X11], X9
	040 Compare X9, 0
	041 JumpIfEqual {63}
	042 Move [X9+280], X2
	043 Move [X11+288], X1
	044 Move X8, [X1+288]
	045 Compare X8, 0
	046 JumpIfEqual {48}
	047 Move [X8+280], X2
	048 Move [X2+280], X1
	049 Move [X2+288], X8
	050 Move [X1+280], X11
	051 Move [X1+288], X2
	052 Compare X8, 0
	053 JumpIfEqual {55}
	054 Move [X8+288], X2
	055 Move X9, [X2+288]
	056 Compare X9, 0
	057 JumpIfEqual {59}
	058 Move [X9+280], X1
	059 Move [X1+280], X2
	060 Move [X1+288], X9
	061 Move [X2+280], X8
	062 Move [X2+288], X1
	063 Move X8, [X1+288]
	064 Compare X8, 0
	065 JumpIfEqual {70}
	066 Move X8, [X2+288]
	067 Compare X8, 0
	068 JumpIfNotEqual {71}
	069 Move [X0+80], X2
	070 Move [X0+80], X1
	071 Move X30, [X31+16]
	072 Return 
	073 Call 0x1C17F20

Method: System.Void AddLocalMaxPoly(UnityEngine.Rendering.Universal.TEdge e1, UnityEngine.Rendering.Universal.TEdge e2, UnityEngine.Rendering.Universal.IntPoint pt)

Disassembly:
	0x03A0B178 CSEL X9, X11, X10, GT
	0x03A0B17C CSEL X10, X10, X11, GT
	0x03A0B180 CMP X12, X10
	0x03A0B184 B.GE 0x3A0B1C0
	0x03A0B188 CMP X9, X8
	0x03A0B18C B.GE 0x3A0B1C0
	0x03A0B190 MOV X0, X19
	0x03A0B194 MOV X1, X21
	0x03A0B198 BL 0x3A0A56C
	0x03A0B19C LDP V0, V1, [X21 + 0x70]
	0x03A0B1A0 LDR V2, [X21 + 0x9]
	0x03A0B1A4 MOV X1, X0
	0x03A0B1A8 ADD X3, X31, 0x190
	0x03A0B1AC MOV X0, X19
	0x03A0B1B0 MOV X2, X20
	0x03A0B1B4 STP V0, V1, [X31 + 0x190]
	0x03A0B1B8 STR V2, [X31 + 0x1B]
	0x03A0B1BC BL 0x3A08DF8
	0x03A0B1C0 LDR X21, [X21 + 0x118]
	0x03A0B1C4 CBNZ X21, 0x3A0B148
	0x03A0B1C8 LDR X8, [X31 + 0x378]
	0x03A0B1CC CBZ X8, 0x3A0B3D0
	0x03A0B1D0 LDP V1, V0, [X8 + 0x80]
	0x03A0B1D4 LDR V2, [X8 + 0x7]
	0x03A0B1D8 ADD X2, X31, 0x160
	0x03A0B1DC MOV X0, X19
	0x03A0B1E0 MOV X1, X20
	0x03A0B1E4 STP V1, V0, [X31 + 0x170]
	0x03A0B1E8 STR V2, [X31 + 0x16]
	0x03A0B1EC BL 0x3A08EFC
	0x03A0B1F0 LDR X1, [X31 + 0x378]
	0x03A0B1F4 CBZ X1, 0x3A0B3D0
	0x03A0B1F8 LDR X9, [X1 + 0x100]
	0x03A0B1FC LDR W8, [X1 + 0xEC]
	0x03A0B200 CBZ X9, 0x3A0B2E4
	0x03A0B204 TBNZ X8, 0x1F, 0x3A0B3C0
	0x03A0B208 LDP V1, V0, [X1 + 0x80]
	0x03A0B20C LDR V2, [X1 + 0x7]
	0x03A0B210 ADD X2, X31, 0x130
	0x03A0B214 MOV X0, X19
	0x03A0B218 STP V1, V0, [X31 + 0x140]
	0x03A0B21C STR V2, [X31 + 0x13]
	0x03A0B220 BL 0x3A09454
	0x03A0B224 MOV X20, X0
	0x03A0B228 ADD X1, X31, 0x378
	0x03A0B22C MOV X0, X19
	0x03A0B230 BL 0x3A0676C
	0x03A0B234 LDR X0, [X31 + 0x378]
	0x03A0B238 CBZ X0, 0x3A0B3D0
	0x03A0B23C LDR W8, [X0 + 0xE0]
	0x03A0B240 CBZ W8, 0x3A0B108

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+112], X22
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Move V1, [X3+16]
	008 Move V0, [X3+32]
	009 Move V2, [X3]
	010 Move X19, X2
	011 Add X2, X31, 48
	012 Move X22, X3
	013 Move X20, X1
	014 Move X21, X0
	015 Move [X31+64], V1
	016 Move [X31+72], V0
	017 Move [X31+3], V2
	018 Call Clipper.AddOutPt, X0, X1, X2
	019 Compare X19, 0
	020 JumpIfEqual {62}
	021 Move W8, [X19+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {34}
	024 Move V1, [X22+16]
	025 Move V0, [X22+32]
	026 Move V2, [X22]
	027 Add X2, X31, 0
	028 Move X0, X21
	029 Move X1, X19
	030 Move [X31+16], V1
	031 Move [X31+24], V0
	032 Move [X31], V2
	033 Call Clipper.AddOutPt, X0, X1, X2
	034 Compare X20, 0
	035 JumpIfEqual {62}
	036 Move W8, [X20+236]
	037 Move W9, [X19+236]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move TEMP, 0
	040 Not TEMP
	041 Move W8, TEMP
	042 Move [X20+236], W8
	043 Move [X19+236], W8
	044 Move X20, [X31+128]
	045 Move X19, [X31+136]
	046 Move X22, [X31+112]
	047 Move X21, [X31+120]
	048 Move X30, [X31+96]
	049 Add X31, X31, 144
	050 Return 
	051 Move X0, X21
	052 Move X1, X20
	053 Move X2, X19
	054 Move X1, X19
	055 Move X2, X20
	056 Move X20, [X31+128]
	057 Move X19, [X31+136]
	058 Move X22, [X31+112]
	059 Move X21, [X31+120]
	060 Move X30, [X31+96]
	061 Add X31, X31, 144
	062 Call 0x1C17F20

Method: UnityEngine.Rendering.Universal.OutPt AddLocalMinPoly(UnityEngine.Rendering.Universal.TEdge e1, UnityEngine.Rendering.Universal.TEdge e2, UnityEngine.Rendering.Universal.IntPoint pt)

Disassembly:
	0x03A0A628 RET
	0x03A0A62C LDR X9, [X2 + 0x8]
	0x03A0A630 LDR X10, [X1 + 0x8]
	0x03A0A634 SCVTF D1, X8
	0x03A0A638 SUB X9, X9, X10
	0x03A0A63C SCVTF D0, X9
	0x03A0A640 FDIV D0, D0, D1
	0x03A0A644 RET
	0x03A0A648 STR D12, [X31 - 0x50]!
	0x03A0A64C STP D11, D10, [X31 + 0x8]
	0x03A0A650 STP D9, D8, [X31 + 0x18]
	0x03A0A654 STR X30, [X31 + 0x28]
	0x03A0A658 STP X22, X21, [X31 + 0x30]
	0x03A0A65C STP X20, X19, [X31 + 0x40]
	0x03A0A660 ADRP X21, 0x9D7000
	0x03A0A664 LDRB W8, [X21 + 0xF83]
	0x03A0A668 MOV X20, X2
	0x03A0A66C MOV X19, X1
	0x03A0A670 TBNZ X8, 0x0, 0x3A0A688
	0x03A0A674 ADRP X0, 0x6E9000
	0x03A0A678 LDR X0, [X0 + 0x5A8]
	0x03A0A67C BL 0x1C16CF4
	0x03A0A680 MOVZ W8, 0x1
	0x03A0A684 STRB W8, [X21 + 0xF83]
	0x03A0A688 CBZ X19, 0x3A0A8E0
	0x03A0A68C ADRP X21, 0x6E9000
	0x03A0A690 LDR X21, [X21 + 0x5A8]
	0x03A0A694 MOV X8, X19
	0x03A0A698 LDR X8, [X8 + 0x50]
	0x03A0A69C CBZ X8, 0x3A0A8E0
	0x03A0A6A0 LDP X9, X11, [X8 + 0x20]
	0x03A0A6A4 LDP X10, X12, [X19 + 0x20]
	0x03A0A6A8 CMP X8, X19
	0x03A0A6AC B.EQ 0x3A0A6C0
	0x03A0A6B0 CMP X9, X10
	0x03A0A6B4 B.NE 0x3A0A6C0
	0x03A0A6B8 CMP X11, X12
	0x03A0A6BC B.EQ 0x3A0A698
	0x03A0A6C0 SUBS X8, X11, X12
	0x03A0A6C4 ADRP X22, 0xFFFFFFFFFD0E4000
	0x03A0A6C8 B.NE 0x3A0A6D4
	0x03A0A6CC LDR V8, [X22 + 0x530]
	0x03A0A6D0 B 0x3A0A6E4
	0x03A0A6D4 SUB X9, X9, X10
	0x03A0A6D8 SCVTF D0, X9
	0x03A0A6DC SCVTF D1, X8
	0x03A0A6E0 FDIV D8, D0, D1
	0x03A0A6E4 LDR X0, [X21]
	0x03A0A6E8 LDR W8, [X0 + 0xE0]
	0x03A0A6EC CBNZ W8, 0x3A0A6F4
	0x03A0A6F0 BL 0x1C16DFC
	0x03A0A6F4 FABS D8, D8
	0x03A0A6F8 MOV X8, X19
	0x03A0A6FC LDR X8, [X8 + 0x48]
	0x03A0A700 CBZ X8, 0x3A0A8E0
	0x03A0A704 LDP X9, X11, [X8 + 0x20]
	0x03A0A708 LDP X10, X12, [X19 + 0x20]
	0x03A0A70C CMP X8, X19
	0x03A0A710 B.EQ 0x3A0A724
	0x03A0A714 CMP X9, X10
	0x03A0A718 B.NE 0x3A0A724
	0x03A0A71C CMP X11, X12
	0x03A0A720 B.EQ 0x3A0A6FC
	0x03A0A724 SUBS X8, X11, X12
	0x03A0A728 B.NE 0x3A0A734
	0x03A0A72C LDR V9, [X22 + 0x530]
	0x03A0A730 B 0x3A0A744
	0x03A0A734 SUB X9, X9, X10
	0x03A0A738 SCVTF D0, X9
	0x03A0A73C SCVTF D1, X8
	0x03A0A740 FDIV D9, D0, D1
	0x03A0A744 LDR X0, [X21]
	0x03A0A748 LDR W8, [X0 + 0xE0]
	0x03A0A74C CBNZ W8, 0x3A0A754
	0x03A0A750 BL 0x1C16DFC
	0x03A0A754 CBZ X20, 0x3A0A8E0
	0x03A0A758 FABS D9, D9
	0x03A0A75C MOV X8, X20
	0x03A0A760 LDR X8, [X8 + 0x50]
	0x03A0A764 CBZ X8, 0x3A0A8E0
	0x03A0A768 LDP X9, X11, [X8 + 0x20]
	0x03A0A76C LDP X10, X12, [X20 + 0x20]
	0x03A0A770 CMP X8, X20
	0x03A0A774 B.EQ 0x3A0A788
	0x03A0A778 CMP X9, X10
	0x03A0A77C B.NE 0x3A0A788
	0x03A0A780 CMP X11, X12
	0x03A0A784 B.EQ 0x3A0A760
	0x03A0A788 SUBS X8, X11, X12
	0x03A0A78C B.NE 0x3A0A798
	0x03A0A790 LDR V10, [X22 + 0x530]
	0x03A0A794 B 0x3A0A7A8
	0x03A0A798 SUB X9, X9, X10
	0x03A0A79C SCVTF D0, X9
	0x03A0A7A0 SCVTF D1, X8
	0x03A0A7A4 FDIV D10, D0, D1
	0x03A0A7A8 LDR X0, [X21]
	0x03A0A7AC LDR W8, [X0 + 0xE0]
	0x03A0A7B0 CBNZ W8, 0x3A0A7B8
	0x03A0A7B4 BL 0x1C16DFC
	0x03A0A7B8 FABS D10, D10
	0x03A0A7BC MOV X8, X20
	0x03A0A7C0 LDR X8, [X8 + 0x48]
	0x03A0A7C4 CBZ X8, 0x3A0A8E0
	0x03A0A7C8 LDP X9, X11, [X8 + 0x20]
	0x03A0A7CC LDP X10, X12, [X20 + 0x20]
	0x03A0A7D0 CMP X8, X20
	0x03A0A7D4 B.EQ 0x3A0A7E8
	0x03A0A7D8 CMP X9, X10
	0x03A0A7DC B.NE 0x3A0A7E8
	0x03A0A7E0 CMP X11, X12
	0x03A0A7E4 B.EQ 0x3A0A7C0
	0x03A0A7E8 SUBS X8, X11, X12
	0x03A0A7EC B.NE 0x3A0A7F8
	0x03A0A7F0 LDR V11, [X22 + 0x530]
	0x03A0A7F4 B 0x3A0A808
	0x03A0A7F8 SUB X9, X9, X10
	0x03A0A7FC SCVTF D0, X9
	0x03A0A800 SCVTF D1, X8
	0x03A0A804 FDIV D11, D0, D1
	0x03A0A808 LDR X0, [X21]
	0x03A0A80C LDR W8, [X0 + 0xE0]
	0x03A0A810 CBNZ W8, 0x3A0A818
	0x03A0A814 BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 448
	002 Move [X31+384], X29
	003 Move [X31+392], X30
	004 Move [X31+400], X24
	005 Move [X31+408], X23
	006 Move [X31+416], X22
	007 Move [X31+424], X21
	008 Move [X31+432], X20
	009 Move [X31+440], X19
	010 Compare X2, 0
	011 JumpIfEqual {160}
	012 Move X8, [X2+176]
	013 Move X20, X3
	014 Move X22, X2
	015 Move X23, X1
	016 Move X19, X0
	017 Compare X8, 0
	018 JumpIfEqual {24}
	019 Compare X23, 0
	020 JumpIfEqual {160}
	021 Move V0, [X23+208]
	022 Move V1, [X22+208]
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 Move V1, [X20+16]
	025 Move V0, [X20+32]
	026 Move V2, [X20]
	027 Add X2, X31, 336
	028 Move X0, X19
	029 Move X1, X23
	030 Move [X31+352], V1
	031 Move [X31+360], V0
	032 Move [X31+21], V2
	033 Call Clipper.AddOutPt, X0, X1, X2
	034 Compare X23, 0
	035 JumpIfEqual {160}
	036 Move X21, X0
	037 Move W9, W31
	038 Move W8, 1
	039 Move X24, X23
	040 Move X10, X22
	041 Move V1, [X20+16]
	042 Move V0, [X20+32]
	043 Move V2, [X20]
	044 Add X2, X31, 288
	045 Move X0, X19
	046 Move X1, X22
	047 Move [X31+304], V1
	048 Move [X31+312], V0
	049 Move [X31+18], V2
	050 Call Clipper.AddOutPt, X0, X1, X2
	051 Move X21, X0
	052 Move W8, W31
	053 Move W9, 1
	054 Move X24, X22
	055 Move X10, X23
	056 Move W11, [X24+236]
	057 Move [X10+236], W11
	058 Move [X23+220], W9
	059 Move [X22+220], W8
	060 Move X8, [X24+272]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction CSEL not yet implemented."
	063 Move X22, [X8+272]
	064 Compare X22, 0
	065 JumpIfEqual {149}
	066 Move W8, [X22+236]
	067 Move TEMP, X8
	068 And TEMP, TEMP, -2147483648
	069 Compare TEMP, -2147483648
	070 JumpIfEqual {149}
	071 Move X8, [X22+128]
	072 Move X1, [X20+16]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X8, [X24+128]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X0, X22
	077 Call Clipper.TopX, X0, X1
	078 Move X1, [X20+16]
	079 Move X23, X0
	080 Move X0, X24
	081 Call Clipper.TopX, X0, X1
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move W8, [X24+224]
	084 Compare W8, 0
	085 JumpIfEqual {149}
	086 Move W8, [X22+224]
	087 Compare W8, 0
	088 JumpIfEqual {149}
	089 Add X8, X22, 112
	090 Move X9, [X20+16]
	091 Move [X31+272], X31
	092 Move [X31+280], X31
	093 Move V2, [X8+16]
	094 Move V0, [X8+32]
	095 Move V1, [X8]
	096 Move [X31+176], X31
	097 Move [X31+184], X31
	098 Move TEMP, 0
	099 Not TEMP
	100 Move X8, TEMP
	101 Move [X31+208], V2
	102 Move [X31+216], V0
	103 Move [X31+12], V1
	104 Move V0, [X24+112]
	105 Move V1, [X24+128]
	106 Add X0, X31, 240
	107 Add X1, X31, 192
	108 Add X2, X31, 144
	109 Move V2, [X24+2]
	110 Move [X31+96], V0
	111 Move [X31+104], V1
	112 Add X3, X31, 96
	113 Move [X31+8], V2
	114 Move W4, [X19+64]
	115 Move [X31+240], X8
	116 Move [X31+248], X23
	117 Move [X31+256], X9
	118 Move [X31+264], X31
	119 Move [X31+144], X8
	120 Move [X31+152], X23
	121 Move [X31+160], X9
	122 Move [X31+168], X31
	123 Call ClipperBase.SlopesEqual, X0, X1, X2, X3, X4
	124 Move TEMP, X0
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfNotEqual {149}
	128 Move V1, [X20+16]
	129 Move V0, [X20+32]
	130 Move V2, [X20]
	131 Add X2, X31, 48
	132 Move X0, X19
	133 Move X1, X22
	134 Move [X31+64], V1
	135 Move [X31+72], V0
	136 Move [X31+3], V2
	137 Call Clipper.AddOutPt, X0, X1, X2
	138 Move V0, [X24]
	139 Move V1, [X24+16]
	140 Move V2, [X24+2]
	141 Move X2, X0
	142 Add X3, X31, 0
	143 Move X0, X19
	144 Move X1, X21
	145 Move [X31], V0
	146 Move [X31+8], V1
	147 Move [X31+2], V2
	148 Call Clipper.AddJoin, X0, X1, X2, X3
	149 Move X0, X21
	150 Move X20, [X31+432]
	151 Move X19, [X31+440]
	152 Move X22, [X31+416]
	153 Move X21, [X31+424]
	154 Move X24, [X31+400]
	155 Move X23, [X31+408]
	156 Move X29, [X31+384]
	157 Move X30, [X31+392]
	158 Add X31, X31, 448
	159 Return X0
	160 Call 0x1C17F20

Method: UnityEngine.Rendering.Universal.OutPt AddOutPt(UnityEngine.Rendering.Universal.TEdge e, UnityEngine.Rendering.Universal.IntPoint pt)

Disassembly:
	0x03A0A454 LDR W12, [X11 + 0xEC]
	0x03A0A458 CMP W12, W10
	0x03A0A45C B.EQ 0x3A0A46C
	0x03A0A460 LDR X11, [X11 + 0x108]
	0x03A0A464 CBNZ X11, 0x3A0A454
	0x03A0A468 B 0x3A0A474
	0x03A0A46C STR W9, [X11 + 0xEC]
	0x03A0A470 STR W8, [X11 + 0xDC]
	0x03A0A474 LDR W8, [X22 + 0x10]
	0x03A0A478 LDP X20, X19, [X31 + 0x20]
	0x03A0A47C LDP X22, X21, [X31 + 0x10]
	0x03A0A480 STR W8, [X23 + 0x10]
	0x03A0A484 LDP X30, X23, [X31], #0x30
	0x03A0A488 RET
	0x03A0A48C BL 0x1C16F20
	0x03A0A490 STR X30, [X31 - 0x30]!
	0x03A0A494 STP X22, X21, [X31 + 0x10]
	0x03A0A498 STP X20, X19, [X31 + 0x20]
	0x03A0A49C ADRP X22, 0x9D7000
	0x03A0A4A0 LDRB W8, [X22 + 0xF82]
	0x03A0A4A4 MOV X19, X2
	0x03A0A4A8 MOV X21, X1
	0x03A0A4AC MOV X20, X0
	0x03A0A4B0 TBNZ X8, 0x0, 0x3A0A4C8
	0x03A0A4B4 ADRP X0, 0x74A000
	0x03A0A4B8 LDR X0, [X0 + 0x268]
	0x03A0A4BC BL 0x1C16CF4
	0x03A0A4C0 MOVZ W8, 0x1
	0x03A0A4C4 STRB W8, [X22 + 0xF82]
	0x03A0A4C8 CBZ X21, 0x3A0A568
	0x03A0A4CC LDR X8, [X21 + 0x110]
	0x03A0A4D0 CBZ X8, 0x3A0A54C
	0x03A0A4D4 MOV X9, X31
	0x03A0A4D8 LDR W11, [X8 + 0xEC]
	0x03A0A4DC MOV X10, X9
	0x03A0A4E0 TBNZ X11, 0x1F, 0x3A0A504
	0x03A0A4E4 LDR W9, [X8 + 0xE0]
	0x03A0A4E8 CBZ W9, 0x3A0A504
	0x03A0A4EC MOV X9, X8
	0x03A0A4F0 CBZ X10, 0x3A0A508
	0x03A0A4F4 LDR W9, [X10 + 0xEC]
	0x03A0A4F8 CMP W9, W11
	0x03A0A4FC CSEL X9, X31, X10, EQ
	0x03A0A500 B 0x3A0A508
	0x03A0A504 MOV X9, X10
	0x03A0A508 LDR X8, [X8 + 0x110]
	0x03A0A50C CBNZ X8, 0x3A0A4D8
	0x03A0A510 CBZ X9, 0x3A0A54C
	0x03A0A514 LDR X0, [X20 + 0x30]
	0x03A0A518 CBZ X0, 0x3A0A568
	0x03A0A51C ADRP X8, 0x74A000
	0x03A0A520 LDR W1, [X9 + 0xEC]
	0x03A0A524 LDR X8, [X8 + 0x268]
	0x03A0A528 LDR X2, [X8]
	0x03A0A52C BL 0x301BCCC
	0x03A0A530 CBZ X19, 0x3A0A568
	0x03A0A534 STR X0, [X19 + 0x18]
	0x03A0A538 CBZ X0, 0x3A0A568
	0x03A0A53C LDRB W8, [X0 + 0x14]
	0x03A0A540 EOR W8, W8, 0x1
	0x03A0A544 STRB W8, [X19 + 0x14]
	0x03A0A548 B 0x3A0A558
	0x03A0A54C CBZ X19, 0x3A0A568
	0x03A0A550 STR X31, [X19 + 0x18]
	0x03A0A554 STRB W31, [X19 + 0x14]
	0x03A0A558 LDP X20, X19, [X31 + 0x20]
	0x03A0A55C LDP X22, X21, [X31 + 0x10]
	0x03A0A560 LDR X30, [X31], #0x30
	0x03A0A564 RET
	0x03A0A568 BL 0x1C16F20
	0x03A0A56C STP X30, X21, [X31 - 0x20]!
	0x03A0A570 STP X20, X19, [X31 + 0x10]
	0x03A0A574 ADRP X21, 0x9D7000
	0x03A0A578 LDRB W8, [X21 + 0xF81]
	0x03A0A57C MOV X19, X1
	0x03A0A580 MOV X20, X0
	0x03A0A584 TBNZ X8, 0x0, 0x3A0A59C
	0x03A0A588 ADRP X0, 0x74A000
	0x03A0A58C LDR X0, [X0 + 0x268]
	0x03A0A590 BL 0x1C16CF4
	0x03A0A594 MOVZ W8, 0x1
	0x03A0A598 STRB W8, [X21 + 0xF81]
	0x03A0A59C CBZ X19, 0x3A0A5E0
	0x03A0A5A0 LDR X0, [X20 + 0x30]
	0x03A0A5A4 CBZ X0, 0x3A0A5E0
	0x03A0A5A8 ADRP X8, 0x74A000
	0x03A0A5AC LDR X8, [X8 + 0x268]
	0x03A0A5B0 LDR W1, [X19 + 0xEC]
	0x03A0A5B4 LDR X2, [X8]
	0x03A0A5B8 BL 0x301BCCC
	0x03A0A5BC CBZ X0, 0x3A0A5E0
	0x03A0A5C0 LDR W8, [X19 + 0xDC]
	0x03A0A5C4 LDR X0, [X0 + 0x20]
	0x03A0A5C8 CBZ W8, 0x3A0A5D4
	0x03A0A5CC CBZ X0, 0x3A0A5E0
	0x03A0A5D0 LDR X0, [X0 + 0x50]
	0x03A0A5D4 LDP X20, X19, [X31 + 0x10]
	0x03A0A5D8 LDP X30, X21, [X31], #0x20
	0x03A0A5DC RET
	0x03A0A5E0 BL 0x1C16F20
	0x03A0A5E4 LDR V0, [X1]
	0x03A0A5E8 LDP X8, X9, [X1 + 0x10]
	0x03A0A5EC LDP V2, V1, [X2]
	0x03A0A5F0 LDR V3, [X2 + 0x2]
	0x03A0A5F4 LDP D4, D5, [X1 + 0x20]
	0x03A0A5F8 STP V2, V1, [X1]
	0x03A0A5FC STR V3, [X1 + 0x2]
	0x03A0A600 STR V0, [X2]
	0x03A0A604 STP X8, X9, [X2 + 0x10]
	0x03A0A608 STP D4, D5, [X2 + 0x20]
	0x03A0A60C RET
	0x03A0A610 LDR X8, [X1 + 0x10]
	0x03A0A614 LDR X9, [X2 + 0x10]
	0x03A0A618 SUBS X8, X9, X8
	0x03A0A61C B.NE 0x3A0A62C
	0x03A0A620 ADRP X8, 0xFFFFFFFFFD0E4000
	0x03A0A624 LDR V0, [X8 + 0x530]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x9D8000
	008 Move W8, [X21+3968]
	009 Move X19, X2
	010 Move X20, X1
	011 Move X22, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x74B000
	017 Move X0, [X0+616]
	018 Call 0x1C17CF4
	019 Move X0, 0x74B000
	020 Move X0, [X0+904]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3968], W8
	024 Compare X20, 0
	025 JumpIfEqual {138}
	026 Move W1, [X20+236]
	027 Move TEMP, X1
	028 And TEMP, TEMP, -2147483648
	029 Compare TEMP, -2147483648
	030 JumpIfEqual {56}
	031 Move X0, [X22+48]
	032 Compare X0, 0
	033 JumpIfEqual {138}
	034 Move X8, 0x74B000
	035 Move X8, [X8+616]
	036 Move X2, [X8]
	037 Call List`1<Object>.get_Item, X0, X1
	038 Compare X0, 0
	039 JumpIfEqual {138}
	040 Move W20, [X20+220]
	041 Move X23, [X0+32]
	042 Move X22, X0
	043 Compare W20, 0
	044 JumpIfEqual {94}
	045 Compare X23, 0
	046 JumpIfEqual {138}
	047 Move X21, [X23+80]
	048 Compare X21, 0
	049 JumpIfEqual {138}
	050 Move X8, [X19+8]
	051 Move X9, [X21+32]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X8, [X19+16]
	054 Move X9, [X21+40]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X0, X22
	057 Call ClipperBase.CreateOutRec, X0
	058 Compare X0, 0
	059 JumpIfEqual {138}
	060 Move W8, [X20+224]
	061 Move X23, X0
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CSET not yet implemented."
	064 Move [X0+21], W8
	065 Move X8, 0x74B000
	066 Move X8, [X8+904]
	067 Move X0, [X8]
	068 Call 0x1C17F10
	069 Move X1, X31
	070 Move X21, X0
	071 Call Object..ctor, X0
	072 Move [X23+32], X21
	073 Compare X21, 0
	074 JumpIfEqual {138}
	075 Move W8, [X23+16]
	076 Move [X21+16], W8
	077 Move V1, [X19+16]
	078 Move V0, [X19+32]
	079 Move V2, [X19]
	080 Move [X21+72], X21
	081 Move [X21+80], X21
	082 Move [X21+56], V0
	083 Move [X21+40], V1
	084 Move [X21+24], V2
	085 Move W8, [X23+21]
	086 Compare W8, 0
	087 JumpIfNotEqual {92}
	088 Move X0, X22
	089 Move X1, X20
	090 Move X2, X23
	091 Call Clipper.SetHoleState, X0, X1, X2
	092 Move W8, [X23+16]
	093 Move [X20+236], W8
	094 Compare X23, 0
	095 JumpIfEqual {138}
	096 Move X8, [X19+8]
	097 Move X9, [X23+32]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X8, [X19+16]
	100 Move X9, [X23+40]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X21, X23
	103 Move X8, 0x74B000
	104 Move X8, [X8+904]
	105 Move X0, [X8]
	106 Call 0x1C17F10
	107 Move X1, X31
	108 Move X21, X0
	109 Call Object..ctor, X0
	110 Compare X21, 0
	111 JumpIfEqual {138}
	112 Move W8, [X22+16]
	113 Move [X21+16], W8
	114 Move V1, [X19+16]
	115 Move V0, [X19+32]
	116 Move V2, [X19]
	117 Move [X21+72], X23
	118 Move [X21+56], V0
	119 Move [X21+40], V1
	120 Move [X21+24], V2
	121 Move X8, [X23+80]
	122 Move [X21+80], X8
	123 Compare X8, 0
	124 JumpIfEqual {138}
	125 Move [X8+72], X21
	126 Move [X23+80], X21
	127 Compare W20, 0
	128 JumpIfNotEqual {130}
	129 Move [X22+32], X21
	130 Move X0, X21
	131 Move X20, [X31+32]
	132 Move X19, [X31+40]
	133 Move X22, [X31+16]
	134 Move X21, [X31+24]
	135 Move X30, [X31+48]
	136 Move X23, [X31+56]
	137 Return X0
	138 Call 0x1C17F20

Method: UnityEngine.Rendering.Universal.OutPt GetLastOutPt(UnityEngine.Rendering.Universal.TEdge e)

Disassembly:
	0x03A0B56C B.NE 0x3A0B578
	0x03A0B570 MOV X0, X31
	0x03A0B574 B 0x3A0B58C
	0x03A0B578 LDP X8, X9, [X0 + 0x108]
	0x03A0B57C CMP X8, X9
	0x03A0B580 B.NE 0x3A0B58C
	0x03A0B584 LDR X8, [X0 + 0xB0]
	0x03A0B588 CBNZ X8, 0x3A0B570
	0x03A0B58C LDR X30, [X31], #0x10
	0x03A0B590 RET
	0x03A0B594 SUB X31, X31, 0x80
	0x03A0B598 STP X30, X27, [X31 + 0x30]
	0x03A0B59C STP X26, X25, [X31 + 0x40]
	0x03A0B5A0 STP X24, X23, [X31 + 0x50]
	0x03A0B5A4 STP X22, X21, [X31 + 0x60]
	0x03A0B5A8 STP X20, X19, [X31 + 0x70]
	0x03A0B5AC ADRP X21, 0x9D6000
	0x03A0B5B0 LDRB W8, [X21 + 0xF88]
	0x03A0B5B4 MOV X19, X1
	0x03A0B5B8 MOV X20, X0
	0x03A0B5BC TBNZ X8, 0x0, 0x3A0B5E0
	0x03A0B5C0 ADRP X0, 0x749000
	0x03A0B5C4 LDR X0, [X0 + 0x390]
	0x03A0B5C8 BL 0x1C16CF4
	0x03A0B5CC ADRP X0, 0x749000
	0x03A0B5D0 LDR X0, [X0 + 0x398]
	0x03A0B5D4 BL 0x1C16CF4
	0x03A0B5D8 MOVZ W8, 0x1
	0x03A0B5DC STRB W8, [X21 + 0xF88]
	0x03A0B5E0 MOVI V0.2D, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x9D7000
	006 Move W8, [X21+3969]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x74A000
	014 Move X0, [X0+616]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3969], W8
	018 Compare X19, 0
	019 JumpIfEqual {42}
	020 Move X0, [X20+48]
	021 Compare X0, 0
	022 JumpIfEqual {42}
	023 Move X8, 0x74A000
	024 Move X8, [X8+616]
	025 Move W1, [X19+236]
	026 Move X2, [X8]
	027 Call List`1<Object>.get_Item, X0, X1
	028 Compare X0, 0
	029 JumpIfEqual {42}
	030 Move W8, [X19+220]
	031 Move X0, [X0+32]
	032 Compare W8, 0
	033 JumpIfEqual {37}
	034 Compare X0, 0
	035 JumpIfEqual {42}
	036 Move X0, [X0+80]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0
	042 Call 0x1C17F20

Method: System.Void SwapPoints(ref UnityEngine.Rendering.Universal.IntPoint pt1, ref UnityEngine.Rendering.Universal.IntPoint pt2)

Disassembly:
	0x03A0B5E4 STP V0, V0, [X31 + 0x10]
	0x03A0B5E8 STR V0, [X31]
	0x03A0B5EC LDR X21, [X20 + 0x38]
	0x03A0B5F0 CBZ X21, 0x3A0B750
	0x03A0B5F4 ADRP X24, 0x749000
	0x03A0B5F8 ADRP X25, 0x749000
	0x03A0B5FC LDR X24, [X24 + 0x390]
	0x03A0B600 LDR X25, [X25 + 0x398]
	0x03A0B604 STR X21, [X20 + 0x50]
	0x03A0B608 ADD X8, X21, 0x108
	0x03A0B60C LDR V0, [X8]

ISIL:
	001 Move V0, [X1]
	002 Move X8, [X1+16]
	003 Move X9, [X1+24]
	004 Move V2, [X2]
	005 Move V1, [X2+16]
	006 Move V3, [X2+2]
	007 Move D4, [X1+32]
	008 Move D5, [X1+40]
	009 Move [X1], V2
	010 Move [X1+8], V1
	011 Move [X1+2], V3
	012 Move [X2], V0
	013 Move [X2+16], X8
	014 Move [X2+24], X9
	015 Move [X2+32], D4
	016 Move [X2+40], D5
	017 Return 

Method: System.Boolean HorzSegmentsOverlap(System.Int64 seg1a, System.Int64 seg1b, System.Int64 seg2a, System.Int64 seg2b)

Disassembly:
	0x03A0A850 CBNZ W8, 0x3A0A858
	0x03A0A854 BL 0x1C16DFC
	0x03A0A858 MOV V0.16B, V8.16B
	0x03A0A85C MOV V1.16B, V9.16B
	0x03A0A860 MOV X0, X31
	0x03A0A864 BL 0x337EE64
	0x03A0A868 MOV V12.16B, V0.16B
	0x03A0A86C MOV V0.16B, V10.16B
	0x03A0A870 MOV V1.16B, V11.16B
	0x03A0A874 MOV X0, X31
	0x03A0A878 BL 0x337EE64
	0x03A0A87C FCMP D12, D0

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSEL not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 NotImplemented "Instruction CSEL not yet implemented."
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CSET not yet implemented."
	011 And W0, W8, W9
	012 Return X0

Method: System.Void SetHoleState(UnityEngine.Rendering.Universal.TEdge e, UnityEngine.Rendering.Universal.OutRec outRec)

Disassembly:
	0x03A0B490 CMP W2, 0x1
	0x03A0B494 MOVZ W8, 0x110
	0x03A0B498 MOVZ W9, 0x108
	0x03A0B49C CSEL X8, X9, X8, EQ
	0x03A0B4A0 LDR X0, [X1, X8, LSL]
	0x03A0B4A4 LDR X30, [X31], #0x10
	0x03A0B4A8 RET
	0x03A0B4AC BL 0x1C16F20
	0x03A0B4B0 STR X30, [X31 - 0x10]!
	0x03A0B4B4 CBZ X1, 0x3A0B4E4
	0x03A0B4B8 LDR X8, [X1 + 0xF8]
	0x03A0B4BC CBZ X8, 0x3A0B4F0
	0x03A0B4C0 LDR X8, [X8 + 0x100]
	0x03A0B4C4 CMP X8, X1
	0x03A0B4C8 B.EQ 0x3A0B4E4
	0x03A0B4CC LDR X8, [X1 + 0xF0]
	0x03A0B4D0 CBZ X8, 0x3A0B4F0
	0x03A0B4D4 LDR X8, [X8 + 0x100]
	0x03A0B4D8 CMP X8, X1
	0x03A0B4DC CSET W0, NE
	0x03A0B4E0 B 0x3A0B4E8
	0x03A0B4E4 MOV W0, W31
	0x03A0B4E8 LDR X30, [X31], #0x10
	0x03A0B4EC RET
	0x03A0B4F0 BL 0x1C16F20
	0x03A0B4F4 CBZ X1, 0x3A0B518
	0x03A0B4F8 LDR V1, [X1 + 0x80]
	0x03A0B4FC SCVTF D1, D1
	0x03A0B500 FCMP D1, D0
	0x03A0B504 B.NE 0x3A0B518
	0x03A0B508 LDR X8, [X1 + 0x100]
	0x03A0B50C CMP X8, 0x0
	0x03A0B510 CSET W0, EQ
	0x03A0B514 RET
	0x03A0B518 MOV W0, W31
	0x03A0B51C RET
	0x03A0B520 STR X30, [X31 - 0x10]!
	0x03A0B524 CBZ X1, 0x3A0B554
	0x03A0B528 LDR V1, [X1 + 0x80]
	0x03A0B52C SCVTF D1, D1
	0x03A0B530 FCMP D1, D0
	0x03A0B534 B.NE 0x3A0B548
	0x03A0B538 LDR X8, [X1 + 0x100]
	0x03A0B53C CMP X8, 0x0
	0x03A0B540 CSET W0, NE
	0x03A0B544 B 0x3A0B54C
	0x03A0B548 MOV W0, W31
	0x03A0B54C LDR X30, [X31], #0x10
	0x03A0B550 RET
	0x03A0B554 BL 0x1C16F20
	0x03A0B558 STR X30, [X31 - 0x10]!
	0x03A0B55C BL 0x3A0B414
	0x03A0B560 CBZ X0, 0x3A0B58C
	0x03A0B564 LDR W8, [X0 + 0xEC]
	0x03A0B568 ADDS W31, W8, 0x2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x9D7000
	007 Move W8, [X22+3970]
	008 Move X19, X2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x74A000
	016 Move X0, [X0+616]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+3970], W8
	020 Compare X21, 0
	021 JumpIfEqual {73}
	022 Move X8, [X21+272]
	023 Compare X8, 0
	024 JumpIfEqual {63}
	025 Move X9, X31
	026 Move W11, [X8+236]
	027 Move X10, X9
	028 Move TEMP, X11
	029 And TEMP, TEMP, -2147483648
	030 Compare TEMP, -2147483648
	031 JumpIfEqual {41}
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfEqual {41}
	035 Move X9, X8
	036 Compare X10, 0
	037 JumpIfEqual {42}
	038 Move W9, [X10+236]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CSEL not yet implemented."
	041 Move X9, X10
	042 Move X8, [X8+272]
	043 Compare X8, 0
	044 JumpIfNotEqual {26}
	045 Compare X9, 0
	046 JumpIfEqual {63}
	047 Move X0, [X20+48]
	048 Compare X0, 0
	049 JumpIfEqual {73}
	050 Move X8, 0x74A000
	051 Move W1, [X9+236]
	052 Move X8, [X8+616]
	053 Move X2, [X8]
	054 Call List`1<Object>.get_Item, X0, X1
	055 Compare X19, 0
	056 JumpIfEqual {73}
	057 Move [X19+24], X0
	058 Compare X0, 0
	059 JumpIfEqual {73}
	060 Move W8, [X0+20]
	061 Xor W8, W8, 1
	062 Move [X19+20], W8
	063 Compare X19, 0
	064 JumpIfEqual {73}
	065 Move [X19+24], X31
	066 Move [X19+20], W31
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X30, [X31+48]
	072 Return 
	073 Call 0x1C17F20

Method: System.Double GetDx(UnityEngine.Rendering.Universal.IntPoint pt1, UnityEngine.Rendering.Universal.IntPoint pt2)

Disassembly:
	0x03A0B610 MOV X0, X21
	0x03A0B614 MOV X1, X19
	0x03A0B618 STR V0, [X8 + 0x1]
	0x03A0B61C BL 0x3A09F54
	0x03A0B620 STR X0, [X21 + 0x48]
	0x03A0B624 LDR X21, [X21 + 0x108]
	0x03A0B628 CBNZ X21, 0x3A0B608
	0x03A0B62C ADD X8, X31, 0x0
	0x03A0B630 ADD X26, X8, 0x20
	0x03A0B634 MOVN X27, 0x0
	0x03A0B638 LDR X21, [X20 + 0x50]
	0x03A0B63C CBZ X21, 0x3A0B74C
	0x03A0B640 MOVZ W8, 0x1
	0x03A0B644 MOV X22, X21

ISIL:
	001 Move X8, [X1+16]
	002 Move X9, [X2+16]
	003 Subtract X8, X9, X8
	004 Move X8, -49397760
	005 Move V0, [X8+1328]
	006 Return V0
	007 Move X9, [X2+8]
	008 Move X10, [X1+8]
	009 NotImplemented "Instruction SCVTF not yet implemented."
	010 Subtract X9, X9, X10
	011 NotImplemented "Instruction SCVTF not yet implemented."
	012 NotImplemented "Instruction FDIV not yet implemented."
	013 Return V0

Method: System.Boolean FirstIsBottomPt(UnityEngine.Rendering.Universal.OutPt btmPt1, UnityEngine.Rendering.Universal.OutPt btmPt2)

Disassembly:
	0x03A0B648 MOV X21, X22
	0x03A0B64C LDR X22, [X22 + 0x118]
	0x03A0B650 CBZ X22, 0x3A0B73C
	0x03A0B654 LDR X9, [X21 + 0x48]
	0x03A0B658 LDR X10, [X22 + 0x48]
	0x03A0B65C CMP X9, X10
	0x03A0B660 B.LE 0x3A0B648
	0x03A0B664 ADD X3, X31, 0x0
	0x03A0B668 MOV X0, X20
	0x03A0B66C MOV X1, X21
	0x03A0B670 MOV X2, X22
	0x03A0B674 BL 0x3A0BA78
	0x03A0B678 LDR X8, [X31 + 0x10]
	0x03A0B67C CMP X8, X19
	0x03A0B680 B.GE 0x3A0B6A0
	0x03A0B684 MOV X0, X21
	0x03A0B688 MOV X1, X19
	0x03A0B68C BL 0x3A09F54
	0x03A0B690 STP X0, X19, [X31 + 0x8]
	0x03A0B694 STP X31, X31, [X26]
	0x03A0B698 STR X27, [X31]
	0x03A0B69C STR X31, [X31 + 0x18]
	0x03A0B6A0 LDR X0, [X24]
	0x03A0B6A4 BL 0x1C16F10
	0x03A0B6A8 MOV X1, X31
	0x03A0B6AC MOV X23, X0
	0x03A0B6B0 BL 0x33BDD8C
	0x03A0B6B4 CBZ X23, 0x3A0B76C
	0x03A0B6B8 STP X21, X22, [X23 + 0x10]
	0x03A0B6BC LDP V1, V0, [X31 + 0x10]
	0x03A0B6C0 LDR V2, [X31]
	0x03A0B6C4 STP V1, V0, [X23 + 0x30]
	0x03A0B6C8 STR V2, [X23 + 0x2]
	0x03A0B6CC LDR X0, [X20 + 0x58]
	0x03A0B6D0 CBZ X0, 0x3A0B76C
	0x03A0B6D4 LDR W10, [X0 + 0x1C]
	0x03A0B6D8 LDR X8, [X0 + 0x10]
	0x03A0B6DC LDR X9, [X25]
	0x03A0B6E0 ADD W10, W10, 0x1
	0x03A0B6E4 STR W10, [X0 + 0x1C]
	0x03A0B6E8 CBZ X8, 0x3A0B76C
	0x03A0B6EC LDRSW X10, [X0 + 0x18]
	0x03A0B6F0 LDR W11, [X8 + 0x18]
	0x03A0B6F4 CMP W10, W11
	0x03A0B6F8 B.CS 0x3A0B710
	0x03A0B6FC ADD W9, W10, 0x1
	0x03A0B700 ADD X8, X8, X10, 0x3, LSL
	0x03A0B704 STR W9, [X0 + 0x18]
	0x03A0B708 STR X23, [X8 + 0x20]
	0x03A0B70C B 0x3A0B724
	0x03A0B710 LDR X8, [X9 + 0x20]
	0x03A0B714 MOV X1, X23
	0x03A0B718 LDR X8, [X8 + 0xC0]
	0x03A0B71C LDR X2, [X8 + 0x70]
	0x03A0B720 BL 0x301BF90
	0x03A0B724 MOV X0, X20
	0x03A0B728 MOV X1, X21
	0x03A0B72C MOV X2, X22
	0x03A0B730 BL 0x3A0A080
	0x03A0B734 MOV W8, W31
	0x03A0B738 B 0x3A0B644
	0x03A0B73C LDR X9, [X21 + 0x120]
	0x03A0B740 CBZ X9, 0x3A0B74C
	0x03A0B744 STR X31, [X9 + 0x118]
	0x03A0B748 TBZ X8, 0x0, 0x3A0B638
	0x03A0B74C STR X31, [X20 + 0x50]
	0x03A0B750 LDP X20, X19, [X31 + 0x70]
	0x03A0B754 LDP X22, X21, [X31 + 0x60]
	0x03A0B758 LDP X24, X23, [X31 + 0x50]
	0x03A0B75C LDP X26, X25, [X31 + 0x40]
	0x03A0B760 LDP X30, X27, [X31 + 0x30]
	0x03A0B764 ADD X31, X31, 0x80
	0x03A0B768 RET
	0x03A0B76C BL 0x1C16F20
	0x03A0B770 STP X30, X27, [X31 - 0x50]!
	0x03A0B774 STP X26, X25, [X31 + 0x10]
	0x03A0B778 STP X24, X23, [X31 + 0x20]
	0x03A0B77C STP X22, X21, [X31 + 0x30]
	0x03A0B780 STP X20, X19, [X31 + 0x40]
	0x03A0B784 ADRP X20, 0x9D6000
	0x03A0B788 LDRB W8, [X20 + 0xF89]
	0x03A0B78C MOV X19, X0
	0x03A0B790 TBNZ X8, 0x0, 0x3A0B7CC
	0x03A0B794 ADRP X0, 0x749000
	0x03A0B798 LDR X0, [X0 + 0x3A0]
	0x03A0B79C BL 0x1C16CF4
	0x03A0B7A0 ADRP X0, 0x749000
	0x03A0B7A4 LDR X0, [X0 + 0x350]
	0x03A0B7A8 BL 0x1C16CF4
	0x03A0B7AC ADRP X0, 0x749000
	0x03A0B7B0 LDR X0, [X0 + 0x3A8]
	0x03A0B7B4 BL 0x1C16CF4
	0x03A0B7B8 ADRP X0, 0x749000
	0x03A0B7BC LDR X0, [X0 + 0x3B0]
	0x03A0B7C0 BL 0x1C16CF4
	0x03A0B7C4 MOVZ W8, 0x1
	0x03A0B7C8 STRB W8, [X20 + 0xF89]
	0x03A0B7CC LDR X0, [X19 + 0x58]
	0x03A0B7D0 CBZ X0, 0x3A0B94C
	0x03A0B7D4 ADRP X8, 0x749000
	0x03A0B7D8 LDR X8, [X8 + 0x3A0]
	0x03A0B7DC LDR X1, [X19 + 0x60]
	0x03A0B7E0 LDR X2, [X8]
	0x03A0B7E4 BL 0x301DC6C
	0x03A0B7E8 LDR X8, [X19 + 0x38]
	0x03A0B7EC STR X8, [X19 + 0x50]
	0x03A0B7F0 CBZ X8, 0x3A0B808
	0x03A0B7F4 ADD X8, X8, 0x108
	0x03A0B7F8 LDR V0, [X8]
	0x03A0B7FC STR V0, [X8 + 0x1]
	0x03A0B800 FMOV X8, D0
	0x03A0B804 CBNZ X8, 0x3A0B7F4
	0x03A0B808 LDR X0, [X19 + 0x58]
	0x03A0B80C CBZ X0, 0x3A0B94C
	0x03A0B810 LDR W24, [X0 + 0x18]
	0x03A0B814 CMP W24, 0x1
	0x03A0B818 B.LT 0x3A0B950
	0x03A0B81C ADRP X25, 0x749000
	0x03A0B820 ADRP X26, 0x749000
	0x03A0B824 LDR X25, [X25 + 0x3A8]
	0x03A0B828 LDR X26, [X26 + 0x3B0]
	0x03A0B82C MOV W20, W31
	0x03A0B830 MOVZ W27, 0x1
	0x03A0B834 MOVZ W22, 0x1
	0x03A0B838 LDR X2, [X25]
	0x03A0B83C MOV W1, W20
	0x03A0B840 BL 0x301BCCC
	0x03A0B844 MOV X1, X0
	0x03A0B848 BL 0x3A0BE48
	0x03A0B84C TBNZ X0, 0x0, 0x3A0B8E8
	0x03A0B850 MOV W8, W27
	0x03A0B854 MOV W21, W8
	0x03A0B858 CMP W8, W24
	0x03A0B85C B.GE 0x3A0B884
	0x03A0B860 LDR X0, [X19 + 0x58]
	0x03A0B864 CBZ X0, 0x3A0B94C
	0x03A0B868 LDR X2, [X25]
	0x03A0B86C MOV W1, W21
	0x03A0B870 BL 0x301BCCC
	0x03A0B874 MOV X1, X0
	0x03A0B878 BL 0x3A0BE48
	0x03A0B87C ADD W8, W21, 0x1
	0x03A0B880 TBZ X0, 0x0, 0x3A0B854
	0x03A0B884 CMP W24, W21
	0x03A0B888 B.EQ 0x3A0B954
	0x03A0B88C LDR X0, [X19 + 0x58]
	0x03A0B890 CBZ X0, 0x3A0B94C
	0x03A0B894 LDR X2, [X25]
	0x03A0B898 MOV W1, W20
	0x03A0B89C BL 0x301BCCC
	0x03A0B8A0 LDR X23, [X19 + 0x58]
	0x03A0B8A4 CBZ X23, 0x3A0B94C
	0x03A0B8A8 LDR X2, [X25]
	0x03A0B8AC MOV X22, X0
	0x03A0B8B0 MOV X0, X23
	0x03A0B8B4 MOV W1, W21
	0x03A0B8B8 BL 0x301BCCC
	0x03A0B8BC LDR X3, [X26]
	0x03A0B8C0 MOV X2, X0
	0x03A0B8C4 MOV X0, X23
	0x03A0B8C8 MOV W1, W20
	0x03A0B8CC BL 0x301BD20
	0x03A0B8D0 LDR X0, [X19 + 0x58]
	0x03A0B8D4 CBZ X0, 0x3A0B94C
	0x03A0B8D8 LDR X3, [X26]
	0x03A0B8DC MOV W1, W21
	0x03A0B8E0 MOV X2, X22

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x9D7000
	012 Move W8, [X21+3971]
	013 Move X20, X2
	014 Move X19, X1
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x6E9000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3971], W8
	024 Compare X19, 0
	025 JumpIfEqual {171}
	026 Move X21, 0x6E9000
	027 Move X21, [X21+1448]
	028 Move X8, X19
	029 Move X8, [X8+80]
	030 Compare X8, 0
	031 JumpIfEqual {171}
	032 Move X9, [X8+32]
	033 Move X11, [X8+40]
	034 Move X10, [X19+32]
	035 Move X12, [X19+40]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Subtract X8, X11, X12
	040 Move X22, -49397760
	041 Move V8, [X22+1328]
	042 Subtract X9, X9, X10
	043 NotImplemented "Instruction SCVTF not yet implemented."
	044 NotImplemented "Instruction SCVTF not yet implemented."
	045 NotImplemented "Instruction FDIV not yet implemented."
	046 Move X0, [X21]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 NotImplemented "Instruction FABS not yet implemented."
	052 Move X8, X19
	053 Move X8, [X8+72]
	054 Compare X8, 0
	055 JumpIfEqual {171}
	056 Move X9, [X8+32]
	057 Move X11, [X8+40]
	058 Move X10, [X19+32]
	059 Move X12, [X19+40]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Subtract X8, X11, X12
	064 Move V9, [X22+1328]
	065 Subtract X9, X9, X10
	066 NotImplemented "Instruction SCVTF not yet implemented."
	067 NotImplemented "Instruction SCVTF not yet implemented."
	068 NotImplemented "Instruction FDIV not yet implemented."
	069 Move X0, [X21]
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Compare X20, 0
	075 JumpIfEqual {171}
	076 NotImplemented "Instruction FABS not yet implemented."
	077 Move X8, X20
	078 Move X8, [X8+80]
	079 Compare X8, 0
	080 JumpIfEqual {171}
	081 Move X9, [X8+32]
	082 Move X11, [X8+40]
	083 Move X10, [X20+32]
	084 Move X12, [X20+40]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Subtract X8, X11, X12
	089 Move V10, [X22+1328]
	090 Subtract X9, X9, X10
	091 NotImplemented "Instruction SCVTF not yet implemented."
	092 NotImplemented "Instruction SCVTF not yet implemented."
	093 NotImplemented "Instruction FDIV not yet implemented."
	094 Move X0, [X21]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 NotImplemented "Instruction FABS not yet implemented."
	100 Move X8, X20
	101 Move X8, [X8+72]
	102 Compare X8, 0
	103 JumpIfEqual {171}
	104 Move X9, [X8+32]
	105 Move X11, [X8+40]
	106 Move X10, [X20+32]
	107 Move X12, [X20+40]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 NotImplemented "Instruction CMP not yet implemented."
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Subtract X8, X11, X12
	112 Move V11, [X22+1328]
	113 Subtract X9, X9, X10
	114 NotImplemented "Instruction SCVTF not yet implemented."
	115 NotImplemented "Instruction SCVTF not yet implemented."
	116 NotImplemented "Instruction FDIV not yet implemented."
	117 Move X0, [X21]
	118 Move W8, [X0+224]
	119 Compare W8, 0
	120 JumpIfNotEqual {122}
	121 Call 0x1C17DFC
	122 Move V0, V8
	123 Move V1, V9
	124 Move X0, X31
	125 NotImplemented "Instruction FABS not yet implemented."
	126 Call Math.Max, V0, V1
	127 Move V12, V0
	128 Move V0, V10
	129 Move V1, V11
	130 Move X0, X31
	131 Call Math.Max, V0, V1
	132 NotImplemented "Instruction FCMP not yet implemented."
	133 Move X0, [X21]
	134 Move W8, [X0+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {138}
	137 Call 0x1C17DFC
	138 Move V0, V8
	139 Move V1, V9
	140 Move X0, X31
	141 Call Math.Min, V0, V1
	142 Move V12, V0
	143 Move V0, V10
	144 Move V1, V11
	145 Move X0, X31
	146 Call Math.Min, V0, V1
	147 NotImplemented "Instruction FCMP not yet implemented."
	148 Move X1, X19
	149 Call Clipper.Area, X0, X1
	150 NotImplemented "Instruction FCMP not yet implemented."
	151 NotImplemented "Instruction CSET not yet implemented."
	152 NotImplemented "Instruction FCMP not yet implemented."
	153 NotImplemented "Instruction FCMP not yet implemented."
	154 Move W0, 1
	155 NotImplemented "Instruction FCMP not yet implemented."
	156 NotImplemented "Instruction CSET not yet implemented."
	157 NotImplemented "Instruction FCMP not yet implemented."
	158 NotImplemented "Instruction CSET not yet implemented."
	159 And W0, W8, W9
	160 Move X20, [X31+64]
	161 Move X19, [X31+72]
	162 Move X22, [X31+48]
	163 Move X21, [X31+56]
	164 Move X30, [X31+40]
	165 Move D9, [X31+24]
	166 Move D8, [X31+32]
	167 Move D11, [X31+8]
	168 Move D10, [X31+16]
	169 Move V12, [X31+80]
	170 Return X0
	171 Call 0x1C17F20

Method: UnityEngine.Rendering.Universal.OutPt GetBottomPt(UnityEngine.Rendering.Universal.OutPt pp)

Disassembly:
	0x03A0B940 LDR X0, [X19 + 0x58]
	0x03A0B944 ADD W27, W27, 0x1
	0x03A0B948 CBNZ X0, 0x3A0B838
	0x03A0B94C BL 0x1C16F20
	0x03A0B950 MOV W22, W31
	0x03A0B954 ORN W8, W31, W22, 0x0
	0x03A0B958 LDP X20, X19, [X31 + 0x40]
	0x03A0B95C LDP X22, X21, [X31 + 0x30]
	0x03A0B960 LDP X24, X23, [X31 + 0x20]
	0x03A0B964 LDP X26, X25, [X31 + 0x10]
	0x03A0B968 AND W0, W8, 0x1
	0x03A0B96C LDP X30, X27, [X31], #0x50
	0x03A0B970 RET
	0x03A0B974 SUB X31, X31, 0x60
	0x03A0B978 STR X30, [X31 + 0x30]
	0x03A0B97C STP X22, X21, [X31 + 0x40]
	0x03A0B980 STP X20, X19, [X31 + 0x50]
	0x03A0B984 ADRP X20, 0x9D6000
	0x03A0B988 LDRB W8, [X20 + 0xF8A]
	0x03A0B98C MOV X19, X0
	0x03A0B990 TBNZ X8, 0x0, 0x3A0B9C0
	0x03A0B994 ADRP X0, 0x749000
	0x03A0B998 LDR X0, [X0 + 0x358]
	0x03A0B99C BL 0x1C16CF4
	0x03A0B9A0 ADRP X0, 0x749000
	0x03A0B9A4 LDR X0, [X0 + 0x350]
	0x03A0B9A8 BL 0x1C16CF4
	0x03A0B9AC ADRP X0, 0x749000
	0x03A0B9B0 LDR X0, [X0 + 0x3A8]
	0x03A0B9B4 BL 0x1C16CF4
	0x03A0B9B8 MOVZ W8, 0x1
	0x03A0B9BC STRB W8, [X20 + 0xF8A]
	0x03A0B9C0 LDR X0, [X19 + 0x58]
	0x03A0B9C4 CBZ X0, 0x3A0BA2C
	0x03A0B9C8 ADRP X22, 0x749000
	0x03A0B9CC LDR X22, [X22 + 0x3A8]
	0x03A0B9D0 MOV W20, W31
	0x03A0B9D4 LDR W2, [X0 + 0x18]
	0x03A0B9D8 CMP W20, W2
	0x03A0B9DC B.GE 0x3A0BA30
	0x03A0B9E0 LDR X2, [X22]
	0x03A0B9E4 MOV W1, W20
	0x03A0B9E8 BL 0x301BCCC
	0x03A0B9EC CBZ X0, 0x3A0BA2C
	0x03A0B9F0 LDP V2, V0, [X0 + 0x30]
	0x03A0B9F4 LDR V1, [X0 + 0x2]
	0x03A0B9F8 LDP X1, X2, [X0 + 0x10]
	0x03A0B9FC MOV X21, X0
	0x03A0BA00 ADD X3, X31, 0x0
	0x03A0BA04 MOV X0, X19
	0x03A0BA08 STP V2, V0, [X31 + 0x10]
	0x03A0BA0C STR V1, [X31]
	0x03A0BA10 BL 0x3A09880
	0x03A0BA14 LDP X1, X2, [X21 + 0x10]
	0x03A0BA18 MOV X0, X19
	0x03A0BA1C BL 0x3A06868
	0x03A0BA20 LDR X0, [X19 + 0x58]
	0x03A0BA24 ADD W20, W20, 0x1
	0x03A0BA28 CBNZ X0, 0x3A0B9D4
	0x03A0BA2C BL 0x1C16F20
	0x03A0BA30 LDR W8, [X0 + 0x1C]
	0x03A0BA34 CMP W2, 0x1
	0x03A0BA38 ADD W8, W8, 0x1
	0x03A0BA3C STP W31, W8, [X0 + 0x18]
	0x03A0BA40 B.LT 0x3A0BA64
	0x03A0BA44 LDR X0, [X0 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X1, 0
	007 JumpIfEqual {61}
	008 Move X8, [X1+72]
	009 Move X20, X1
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X19, X0
	012 Move X21, X31
	013 Compare X8, 0
	014 JumpIfEqual {61}
	015 Move X9, [X8+40]
	016 Move X10, [X20+40]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X21, X31
	019 Move X20, X8
	020 Move X9, [X8+32]
	021 Move X10, [X20+32]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X9, [X8+72]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X9, [X8+80]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSEL not yet implemented."
	028 Move X8, [X8+72]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Compare X21, 0
	031 JumpIfEqual {53}
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X22, X20
	034 Move X0, X19
	035 Move X1, X20
	036 Move X2, X21
	037 Call Clipper.FirstIsBottomPt, X0, X1, X2
	038 And W31, W0, 1
	039 NotImplemented "Instruction CSEL not yet implemented."
	040 Move X21, [X21+72]
	041 Compare X21, 0
	042 JumpIfEqual {61}
	043 Move X8, [X22+32]
	044 Move X9, [X21+32]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X9, [X21+40]
	047 Move X10, [X22+40]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X21, [X21+72]
	050 Compare X21, 0
	051 JumpIfNotEqual {44}
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X22, X20
	054 Move X0, X22
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 Return X0
	061 Call 0x1C17F20

Method: UnityEngine.Rendering.Universal.OutRec GetLowermostRec(UnityEngine.Rendering.Universal.OutRec outRec1, UnityEngine.Rendering.Universal.OutRec outRec2)

Disassembly:
	0x03A0BA48 LDP X20, X19, [X31 + 0x50]
	0x03A0BA4C LDP X22, X21, [X31 + 0x40]
	0x03A0BA50 LDR X30, [X31 + 0x30]
	0x03A0BA54 MOV W1, W31
	0x03A0BA58 MOV X3, X31
	0x03A0BA5C ADD X31, X31, 0x60
	0x03A0BA60 B 0x339FA34
	0x03A0BA64 LDP X20, X19, [X31 + 0x50]
	0x03A0BA68 LDP X22, X21, [X31 + 0x40]
	0x03A0BA6C LDR X30, [X31 + 0x30]
	0x03A0BA70 ADD X31, X31, 0x60
	0x03A0BA74 RET
	0x03A0BA78 STP D11, D10, [X31 - 0x50]!
	0x03A0BA7C STP D9, D8, [X31 + 0x10]
	0x03A0BA80 STP X30, X23, [X31 + 0x20]
	0x03A0BA84 STP X22, X21, [X31 + 0x30]
	0x03A0BA88 STP X20, X19, [X31 + 0x40]
	0x03A0BA8C ADRP X23, 0x9D6000
	0x03A0BA90 LDRB W8, [X23 + 0xF8B]
	0x03A0BA94 MOV X19, X3
	0x03A0BA98 MOV X21, X2
	0x03A0BA9C MOV X20, X1
	0x03A0BAA0 MOV X22, X0
	0x03A0BAA4 TBNZ X8, 0x0, 0x3A0BABC
	0x03A0BAA8 ADRP X0, 0x6E8000
	0x03A0BAAC LDR X0, [X0 + 0x5A8]
	0x03A0BAB0 BL 0x1C16CF4
	0x03A0BAB4 MOVZ W8, 0x1
	0x03A0BAB8 STRB W8, [X23 + 0xF8B]
	0x03A0BABC MOVI V0.2D, 0x0
	0x03A0BAC0 STP V0, V0, [X19 + 0x10]
	0x03A0BAC4 STR V0, [X19]
	0x03A0BAC8 CBZ X21, 0x3A0BE44
	0x03A0BACC LDR X9, [X21 + 0x40]
	0x03A0BAD0 SUBS X10, X9, 0x1
	0x03A0BAD4 B.LT 0x3A0BB04
	0x03A0BAD8 LDRSW X8, [X22 + 0x8C]
	0x03A0BADC CMP X9, X8
	0x03A0BAE0 B.GE 0x3A0BB04
	0x03A0BAE4 CBZ X20, 0x3A0BE44
	0x03A0BAE8 LDR X11, [X20 + 0x40]
	0x03A0BAEC CMP X11, 0x1
	0x03A0BAF0 CSET W12, LT
	0x03A0BAF4 CMP X11, X8
	0x03A0BAF8 CSET W8, GE
	0x03A0BAFC ORR W8, W12, W8, 0x0
	0x03A0BB00 B 0x3A0BB0C
	0x03A0BB04 CBZ X20, 0x3A0BE44
	0x03A0BB08 MOVZ W8, 0x1
	0x03A0BB0C LDR X11, [X20 + 0x40]
	0x03A0BB10 CMP X11, X9
	0x03A0BB14 B.LE 0x3A0BB3C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {54}
	007 Move X19, X1
	008 Move X1, [X1+40]
	009 Move X20, X2
	010 Move X21, X0
	011 Compare X1, 0
	012 JumpIfNotEqual {18}
	013 Move X1, [X19+32]
	014 Move X0, X21
	015 Call Clipper.GetBottomPt, X0, X1
	016 Move X1, X0
	017 Move [X19+40], X0
	018 Compare X20, 0
	019 JumpIfEqual {54}
	020 Move X2, [X20+40]
	021 Compare X2, 0
	022 JumpIfNotEqual {29}
	023 Move X1, [X20+32]
	024 Move X0, X21
	025 Call Clipper.GetBottomPt, X0, X1
	026 Move [X20+40], X0
	027 Move X1, [X19+40]
	028 Move X2, X0
	029 Compare X1, 0
	030 JumpIfEqual {54}
	031 Compare X2, 0
	032 JumpIfEqual {54}
	033 Move X8, [X1+40]
	034 Move X9, [X2+40]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X19, X20
	037 Move X8, [X1+32]
	038 Move X9, [X2+32]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return X0
	046 Move X8, [X1+72]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X8, [X2+72]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X0, X21
	051 Call Clipper.FirstIsBottomPt, X0, X1, X2
	052 And W31, W0, 1
	053 NotImplemented "Instruction CSEL not yet implemented."
	054 Call 0x1C17F20

Method: System.Boolean OutRec1RightOfOutRec2(UnityEngine.Rendering.Universal.OutRec outRec1, UnityEngine.Rendering.Universal.OutRec outRec2)

Disassembly:
	0x03A0BB18 ADDS X31, X9, 0x1
	0x03A0BB1C CSET W9, EQ
	0x03A0BB20 ORR W10, W9, W8, 0x0
	0x03A0BB24 CSINV X9, X11, X31, EQ
	0x03A0BB28 TBNZ X10, 0x0, 0x3A0BB58
	0x03A0BB2C SUB X9, X11, 0x1
	0x03A0BB30 CMP X11, 0x0
	0x03A0BB34 CSEL X9, X9, X31, GT
	0x03A0BB38 B 0x3A0BB58
	0x03A0BB3C ADDS X31, X11, 0x1
	0x03A0BB40 B.EQ 0x3A0BB50

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {12}
	004 Move X1, [X1+24]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Compare X1, 0
	007 JumpIfNotEqual {2}
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CSET not yet implemented."
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: UnityEngine.Rendering.Universal.OutRec GetOutRec(System.Int32 idx)

Disassembly:
	0x03A0BB44 CMP W8, 0x0
	0x03A0BB48 CSINV X9, X9, X31, EQ
	0x03A0BB4C B 0x3A0BB58
	0x03A0BB50 CMP X9, 0x0
	0x03A0BB54 CSEL X9, X10, X31, GT
	0x03A0BB58 CMP W8, 0x0
	0x03A0BB5C MOVZ W10, 0x2
	0x03A0BB60 CSINV X8, X9, X31, EQ
	0x03A0BB64 STR X10, [X19 + 0x18]
	0x03A0BB68 STR X8, [X19]
	0x03A0BB6C LDR V8, [X20 + 0xD0]
	0x03A0BB70 LDR V0, [X21 + 0xD0]
	0x03A0BB74 FCMP D8, D0
	0x03A0BB78 B.NE 0x3A0BBA8
	0x03A0BB7C LDR X1, [X20 + 0x50]
	0x03A0BB80 STR X1, [X19 + 0x10]
	0x03A0BB84 MOV X0, X20
	0x03A0BB88 BL 0x3A09F54
	0x03A0BB8C STR X0, [X19 + 0x8]
	0x03A0BB90 LDP X20, X19, [X31 + 0x40]
	0x03A0BB94 LDP X22, X21, [X31 + 0x30]
	0x03A0BB98 LDP X30, X23, [X31 + 0x20]
	0x03A0BB9C LDP D9, D8, [X31 + 0x10]
	0x03A0BBA0 LDP D11, D10, [X31], #0x50
	0x03A0BBA4 RET
	0x03A0BBA8 LDR X8, [X20 + 0xA8]
	0x03A0BBAC CBZ X8, 0x3A0BC84
	0x03A0BBB0 LDR X8, [X21 + 0xA8]
	0x03A0BBB4 CBZ X8, 0x3A0BCDC
	0x03A0BBB8 LDP D1, D2, [X20 + 0x18]
	0x03A0BBBC LDP D3, D4, [X21 + 0x18]
	0x03A0BBC0 FSUB D5, D8, D0
	0x03A0BBC4 MOVZ X8, 0x7FF00000
	0x03A0BBC8 SCVTF D2, D2
	0x03A0BBCC SCVTF D1, D1
	0x03A0BBD0 FMUL D2, D8, D2
	0x03A0BBD4 FSUB D10, D1, D2
	0x03A0BBD8 SCVTF D2, D3
	0x03A0BBDC SCVTF D3, D4
	0x03A0BBE0 FMUL D3, D0, D3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x9D7000
	006 Move W8, [X21+3972]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x74A000
	014 Move X0, [X0+616]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3972], W8
	018 Move X0, [X19+48]
	019 Compare X0, 0
	020 JumpIfEqual {45}
	021 Move X21, 0x74A000
	022 Move X21, [X21+616]
	023 Move W1, W20
	024 Move X2, [X21]
	025 Call List`1<Object>.get_Item, X0, X1
	026 Compare X0, 0
	027 JumpIfEqual {45}
	028 Move X20, X0
	029 Move X0, [X19+48]
	030 Compare X0, 0
	031 JumpIfEqual {45}
	032 Move W1, [X20+16]
	033 Move X2, [X21]
	034 Call List`1<Object>.get_Item, X0, X1
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X0, [X19+48]
	037 Compare X0, 0
	038 JumpIfEqual {45}
	039 Move W1, [X20+16]
	040 Move X2, [X21]
	041 Call List`1<Object>.get_Item, X0, X1
	042 Move X20, X0
	043 Compare X0, 0
	044 JumpIfNotEqual {29}
	045 Call 0x1C17F20
	046 Move X0, X20
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0

Method: System.Void AppendPolygon(UnityEngine.Rendering.Universal.TEdge e1, UnityEngine.Rendering.Universal.TEdge e2)

Disassembly:
	0x03A0B244 LDP X21, X22, [X0 + 0x108]
	0x03A0B248 CBZ X22, 0x3A0B310
	0x03A0B24C LDR X8, [X22 + 0x48]
	0x03A0B250 LDR X9, [X0 + 0x18]
	0x03A0B254 CMP X8, X9
	0x03A0B258 B.NE 0x3A0B310
	0x03A0B25C LDR X8, [X22 + 0x50]
	0x03A0B260 LDR X9, [X0 + 0x20]
	0x03A0B264 CMP X8, X9
	0x03A0B268 B.NE 0x3A0B310
	0x03A0B26C LDR W9, [X22 + 0xE0]
	0x03A0B270 CBZ W9, 0x3A0B310
	0x03A0B274 LDR W9, [X22 + 0xEC]
	0x03A0B278 TBNZ X9, 0x1F, 0x3A0B310
	0x03A0B27C LDR X9, [X22 + 0x80]
	0x03A0B280 CMP X8, X9
	0x03A0B284 B.LE 0x3A0B310
	0x03A0B288 LDRB W2, [X19 + 0x40]
	0x03A0B28C MOV X1, X22
	0x03A0B290 BL 0x3A048CC
	0x03A0B294 TBZ X0, 0x0, 0x3A0B310
	0x03A0B298 LDR X8, [X31 + 0x378]
	0x03A0B29C CBZ X8, 0x3A0B3D0
	0x03A0B2A0 LDP V1, V0, [X8 + 0x20]
	0x03A0B2A4 LDR V2, [X8 + 0x1]
	0x03A0B2A8 ADD X2, X31, 0x100
	0x03A0B2AC MOV X0, X19
	0x03A0B2B0 MOV X1, X22
	0x03A0B2B4 STP V1, V0, [X31 + 0x110]
	0x03A0B2B8 STR V2, [X31 + 0x10]
	0x03A0B2BC BL 0x3A09454
	0x03A0B2C0 LDR X8, [X31 + 0x378]
	0x03A0B2C4 CBZ X8, 0x3A0B3D0
	0x03A0B2C8 LDP V1, V0, [X8 + 0x80]
	0x03A0B2CC LDR V2, [X8 + 0x7]
	0x03A0B2D0 MOV X2, X0
	0x03A0B2D4 ADD X3, X31, 0xD0
	0x03A0B2D8 STP V1, V0, [X31 + 0xE0]
	0x03A0B2DC STR V2, [X31 + 0xD]
	0x03A0B2E0 B 0x3A0B3B0
	0x03A0B2E4 TBNZ X8, 0x1F, 0x3A0B308
	0x03A0B2E8 LDP V1, V0, [X1 + 0x80]
	0x03A0B2EC LDR V2, [X1 + 0x7]
	0x03A0B2F0 ADD X2, X31, 0x40
	0x03A0B2F4 MOV X0, X19
	0x03A0B2F8 STP V1, V0, [X31 + 0x50]
	0x03A0B2FC STR V2, [X31 + 0x4]
	0x03A0B300 BL 0x3A09454
	0x03A0B304 LDR X1, [X31 + 0x378]
	0x03A0B308 MOV X0, X19
	0x03A0B30C B 0x3A0B104
	0x03A0B310 CBZ X21, 0x3A0B108
	0x03A0B314 LDR X0, [X31 + 0x378]
	0x03A0B318 CBZ X0, 0x3A0B3D0
	0x03A0B31C LDR X8, [X21 + 0x48]
	0x03A0B320 LDR X9, [X0 + 0x18]
	0x03A0B324 CMP X8, X9
	0x03A0B328 B.NE 0x3A0B108
	0x03A0B32C LDR X8, [X21 + 0x50]
	0x03A0B330 LDR X9, [X0 + 0x20]
	0x03A0B334 CMP X8, X9
	0x03A0B338 B.NE 0x3A0B108
	0x03A0B33C LDR W9, [X21 + 0xE0]
	0x03A0B340 CBZ W9, 0x3A0B108
	0x03A0B344 LDR W9, [X21 + 0xEC]
	0x03A0B348 TBNZ X9, 0x1F, 0x3A0B108
	0x03A0B34C LDR X9, [X21 + 0x80]
	0x03A0B350 CMP X8, X9
	0x03A0B354 B.LE 0x3A0B108
	0x03A0B358 LDRB W2, [X19 + 0x40]
	0x03A0B35C MOV X1, X21
	0x03A0B360 BL 0x3A048CC
	0x03A0B364 TBZ X0, 0x0, 0x3A0B108
	0x03A0B368 LDR X8, [X31 + 0x378]
	0x03A0B36C CBZ X8, 0x3A0B3D0
	0x03A0B370 LDP V1, V0, [X8 + 0x20]
	0x03A0B374 LDR V2, [X8 + 0x1]
	0x03A0B378 ADD X2, X31, 0xA0
	0x03A0B37C MOV X0, X19
	0x03A0B380 MOV X1, X21
	0x03A0B384 STP V1, V0, [X31 + 0xB0]
	0x03A0B388 STR V2, [X31 + 0xA]
	0x03A0B38C BL 0x3A09454
	0x03A0B390 LDR X8, [X31 + 0x378]
	0x03A0B394 CBZ X8, 0x3A0B3D0
	0x03A0B398 LDP V1, V0, [X8 + 0x80]
	0x03A0B39C LDR V2, [X8 + 0x7]
	0x03A0B3A0 MOV X2, X0
	0x03A0B3A4 ADD X3, X31, 0x70
	0x03A0B3A8 STP V1, V0, [X31 + 0x80]
	0x03A0B3AC STR V2, [X31 + 0x7]
	0x03A0B3B0 MOV X0, X19
	0x03A0B3B4 MOV X1, X20
	0x03A0B3B8 BL 0x3A08DF8
	0x03A0B3BC B 0x3A0B108
	0x03A0B3C0 ADD X1, X31, 0x378
	0x03A0B3C4 MOV X0, X19
	0x03A0B3C8 BL 0x3A0676C
	0x03A0B3CC B 0x3A0B108
	0x03A0B3D0 BL 0x1C16F20
	0x03A0B3D4 STR X30, [X31 - 0x10]!
	0x03A0B3D8 CBZ X1, 0x3A0B410
	0x03A0B3DC LDR X8, [X1 + 0x78]!
	0x03A0B3E0 MOV X9, X1
	0x03A0B3E4 LDR X10, [X9 - 0x60]!
	0x03A0B3E8 CMP X10, X8
	0x03A0B3EC CSEL X8, X10, X8, LT
	0x03A0B3F0 CSEL X9, X1, X9, LT
	0x03A0B3F4 STR X8, [X3]
	0x03A0B3F8 LDR X8, [X9]
	0x03A0B3FC CSET W9, LT
	0x03A0B400 STR X8, [X4]
	0x03A0B404 STR W9, [X2]
	0x03A0B408 LDR X30, [X31], #0x10
	0x03A0B40C RET
	0x03A0B410 BL 0x1C16F20
	0x03A0B414 STR X30, [X31 - 0x10]!
	0x03A0B418 CBZ X1, 0x3A0B484
	0x03A0B41C LDR X0, [X1 + 0xF0]
	0x03A0B420 CBZ X0, 0x3A0B484
	0x03A0B424 LDR X10, [X0 + 0x78]
	0x03A0B428 LDP X9, X8, [X1 + 0x78]
	0x03A0B42C CMP X10, X9
	0x03A0B430 B.NE 0x3A0B448
	0x03A0B434 LDR X10, [X0 + 0x80]
	0x03A0B438 CMP X10, X8
	0x03A0B43C B.NE 0x3A0B448
	0x03A0B440 LDR X10, [X0 + 0x100]
	0x03A0B444 CBZ X10, 0x3A0B47C
	0x03A0B448 LDR X10, [X1 + 0xF8]
	0x03A0B44C CBZ X10, 0x3A0B484
	0x03A0B450 LDR X11, [X10 + 0x78]
	0x03A0B454 CMP X11, X9
	0x03A0B458 B.NE 0x3A0B478
	0x03A0B45C LDR X9, [X10 + 0x80]
	0x03A0B460 CMP X9, X8
	0x03A0B464 B.NE 0x3A0B478
	0x03A0B468 LDR X8, [X10 + 0x100]
	0x03A0B46C CMP X8, 0x0
	0x03A0B470 CSEL X0, X10, X31, EQ
	0x03A0B474 B 0x3A0B47C
	0x03A0B478 MOV X0, X31
	0x03A0B47C LDR X30, [X31], #0x10
	0x03A0B480 RET
	0x03A0B484 BL 0x1C16F20
	0x03A0B488 STR X30, [X31 - 0x10]!
	0x03A0B48C CBZ X1, 0x3A0B4AC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x9D7000
	008 Move W8, [X22+3973]
	009 Move X19, X2
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x74A000
	017 Move X0, [X0+616]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3973], W8
	021 Compare X20, 0
	022 JumpIfEqual {176}
	023 Move X0, [X21+48]
	024 Compare X0, 0
	025 JumpIfEqual {176}
	026 Move X23, 0x74A000
	027 Move X23, [X23+616]
	028 Move W1, [X20+236]
	029 Move X2, [X23]
	030 Call List`1<Object>.get_Item, X0, X1
	031 Compare X19, 0
	032 JumpIfEqual {176}
	033 Move X22, X0
	034 Move X0, [X21+48]
	035 Compare X0, 0
	036 JumpIfEqual {176}
	037 Move W1, [X19+236]
	038 Move X2, [X23]
	039 Call List`1<Object>.get_Item, X0, X1
	040 Move X23, X0
	041 Move X8, X22
	042 Compare X8, 0
	043 JumpIfEqual {176}
	044 Move X8, [X8+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Compare X8, 0
	047 JumpIfNotEqual {42}
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X8, X23
	050 Compare X8, 0
	051 JumpIfEqual {176}
	052 Move X8, [X8+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Compare X8, 0
	055 JumpIfNotEqual {50}
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X0, X21
	058 Move X1, X22
	059 Move X2, X23
	060 Call Clipper.GetLowermostRec, X0, X1, X2
	061 Compare X22, 0
	062 JumpIfNotEqual {69}
	063 Move X0, X23
	064 Compare X22, 0
	065 JumpIfNotEqual {69}
	066 Move X0, X22
	067 Compare X22, 0
	068 JumpIfEqual {176}
	069 Move X10, [X22+32]
	070 Compare X10, 0
	071 JumpIfEqual {176}
	072 Compare X23, 0
	073 JumpIfEqual {176}
	074 Move X9, X23
	075 Move X11, [X10+80]
	076 Add X9, X9, 32
	077 Move X12, [X9]
	078 Compare X12, 0
	079 JumpIfEqual {176}
	080 Move X13, [X12+80]
	081 Move W8, [X20+220]
	082 Move W14, [X19+220]
	083 Compare W8, 0
	084 JumpIfEqual {103}
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X14, X12
	087 Compare X14, 0
	088 JumpIfEqual {176}
	089 Move X15, [X14+72]
	090 Move X16, [X14+80]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move [X14+72], X16
	093 Move [X14+80], X15
	094 Move X14, X15
	095 Compare X11, 0
	096 JumpIfEqual {176}
	097 Move [X11+72], X13
	098 Compare X13, 0
	099 JumpIfEqual {176}
	100 Move [X13+80], X11
	101 Move [X12+72], X10
	102 Move [X10+80], X12
	103 Compare W14, 0
	104 JumpIfEqual {122}
	105 Compare X13, 0
	106 JumpIfEqual {176}
	107 Move [X13+72], X10
	108 Move [X10+80], X13
	109 Move [X12+80], X11
	110 Compare X11, 0
	111 JumpIfEqual {176}
	112 Move [X11+72], X12
	113 Move [X22+32], X12
	114 Compare X11, 0
	115 JumpIfEqual {176}
	116 Move [X11+72], X12
	117 Move [X12+80], X11
	118 Move [X10+80], X13
	119 Compare X13, 0
	120 JumpIfEqual {176}
	121 Move [X13+72], X10
	122 Move X14, X12
	123 Compare X14, 0
	124 JumpIfEqual {176}
	125 Move X15, [X14+72]
	126 Move X16, [X14+80]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move [X14+72], X16
	129 Move [X14+80], X15
	130 Move X14, X15
	131 Move [X12+72], X10
	132 Move [X10+80], X12
	133 Compare X11, 0
	134 JumpIfEqual {176}
	135 Move [X11+72], X13
	136 Compare X13, 0
	137 JumpIfEqual {176}
	138 Move [X13+80], X11
	139 Move [X22+32], X13
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move [X22+40], X31
	142 Move X10, [X23+24]
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move [X22+24], X10
	145 Move W10, [X23+20]
	146 Move [X22+20], W10
	147 Move [X9], X31
	148 Move [X9+8], X31
	149 Move [X23+24], X22
	150 Move TEMP, 0
	151 Not TEMP
	152 Move W11, TEMP
	153 Move W9, [X20+236]
	154 Move W10, [X19+236]
	155 Move [X20+236], W11
	156 Move [X19+236], W11
	157 Move X11, [X21+56]
	158 Compare X11, 0
	159 JumpIfEqual {167}
	160 Move W12, [X11+236]
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move X11, [X11+264]
	163 Compare X11, 0
	164 JumpIfNotEqual {160}
	165 Move [X11+236], W9
	166 Move [X11+220], W8
	167 Move W8, [X22+16]
	168 Move X20, [X31+32]
	169 Move X19, [X31+40]
	170 Move X22, [X31+16]
	171 Move X21, [X31+24]
	172 Move [X23+16], W8
	173 Move X30, [X31+48]
	174 Move X23, [X31+56]
	175 Return 
	176 Call 0x1C17F20

Method: System.Void ReversePolyPtLinks(UnityEngine.Rendering.Universal.OutPt pp)

Disassembly:
	0x03A09564 LDRB W8, [X23 + 0x15]
	0x03A09568 CBNZ W8, 0x3A0957C
	0x03A0956C MOV X0, X22
	0x03A09570 MOV X1, X20
	0x03A09574 MOV X2, X23
	0x03A09578 BL 0x3A0A490
	0x03A0957C LDR W8, [X23 + 0x10]
	0x03A09580 STR W8, [X20 + 0xEC]
	0x03A09584 B 0x3A09610
	0x03A09588 CBZ X23, 0x3A09624
	0x03A0958C LDR X8, [X19 + 0x8]
	0x03A09590 LDR X9, [X23 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {13}
	004 Move X8, X1
	005 Compare X8, 0
	006 JumpIfEqual {15}
	007 Move X9, [X8+72]
	008 Move X10, [X8+80]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move [X8+72], X10
	011 Move [X8+80], X9
	012 Move X8, X9
	013 Move X30, [X31+16]
	014 Return 
	015 Call 0x1C17F20

Method: System.Void SwapSides(UnityEngine.Rendering.Universal.TEdge edge1, UnityEngine.Rendering.Universal.TEdge edge2)

Disassembly:
	0x03A0BBE4 FSUB D9, D2, D3
	0x03A0BBE8 FSUB D2, D9, D10
	0x03A0BBEC FMOV D1, -0.5
	0x03A0BBF0 FDIV D11, D2, D5
	0x03A0BBF4 FMOV D2, 0.5
	0x03A0BBF8 FADD D1, D11, D1
	0x03A0BBFC FADD D2, D11, D2
	0x03A0BC00 FCMP D11, 0x0
	0x03A0BC04 FCSEL D1, D1, D2, MI
	0x03A0BC08 FMOV D2, X8

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {12}
	004 Compare X1, 0
	005 JumpIfEqual {12}
	006 Move W8, [X1+220]
	007 Move W9, [X0+220]
	008 Move [X0+220], W8
	009 Move [X1+220], W9
	010 Move X30, [X31+16]
	011 Return 
	012 Call 0x1C17F20

Method: System.Void SwapPolyIndexes(UnityEngine.Rendering.Universal.TEdge edge1, UnityEngine.Rendering.Universal.TEdge edge2)

Disassembly:
	0x03A0BC0C MOVZ X9, 0x80000000
	0x03A0BC10 FCVTZS X8, D1
	0x03A0BC14 FCMP D1, D2
	0x03A0BC18 CSEL X8, X9, X8, EQ
	0x03A0BC1C STR X8, [X19 + 0x10]
	0x03A0BC20 ADRP X8, 0x6E8000
	0x03A0BC24 LDR X8, [X8 + 0x5A8]
	0x03A0BC28 LDR X0, [X8]
	0x03A0BC2C LDR W8, [X0 + 0xE0]
	0x03A0BC30 CBNZ W8, 0x3A0BC3C

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {12}
	004 Compare X1, 0
	005 JumpIfEqual {12}
	006 Move W8, [X1+236]
	007 Move W9, [X0+236]
	008 Move [X0+236], W8
	009 Move [X1+236], W9
	010 Move X30, [X31+16]
	011 Return 
	012 Call 0x1C17F20

Method: System.Void IntersectEdges(UnityEngine.Rendering.Universal.TEdge e1, UnityEngine.Rendering.Universal.TEdge e2, UnityEngine.Rendering.Universal.IntPoint pt)

Disassembly:
	0x03A0A880 B.NE 0x3A0A898
	0x03A0A884 MOV X1, X19
	0x03A0A888 BL 0x3A0A8E4
	0x03A0A88C FCMP D0, 0x0
	0x03A0A890 CSET W0, GT
	0x03A0A894 B 0x3A0A8C4
	0x03A0A898 FCMP D8, D10
	0x03A0A89C B.LT 0x3A0A8B0
	0x03A0A8A0 FCMP D8, D11
	0x03A0A8A4 B.LT 0x3A0A8B0
	0x03A0A8A8 MOVZ W0, 0x1
	0x03A0A8AC B 0x3A0A8C4
	0x03A0A8B0 FCMP D9, D10
	0x03A0A8B4 CSET W8, GE
	0x03A0A8B8 FCMP D9, D11
	0x03A0A8BC CSET W9, GE
	0x03A0A8C0 AND W0, W8, W9, 0x0
	0x03A0A8C4 LDP X20, X19, [X31 + 0x40]
	0x03A0A8C8 LDP X22, X21, [X31 + 0x30]
	0x03A0A8CC LDR X30, [X31 + 0x28]
	0x03A0A8D0 LDP D9, D8, [X31 + 0x18]
	0x03A0A8D4 LDP D11, D10, [X31 + 0x8]
	0x03A0A8D8 LDR V12, [X31], #0x50
	0x03A0A8DC RET
	0x03A0A8E0 BL 0x1C16F20
	0x03A0A8E4 STR X30, [X31 - 0x10]!
	0x03A0A8E8 FMOV D0, X31
	0x03A0A8EC CBZ X1, 0x3A0A934
	0x03A0A8F0 MOV X8, X1
	0x03A0A8F4 CBZ X8, 0x3A0A93C
	0x03A0A8F8 LDR X9, [X8 + 0x50]
	0x03A0A8FC CBZ X9, 0x3A0A93C
	0x03A0A900 LDP X10, X9, [X9 + 0x20]
	0x03A0A904 LDP X11, X12, [X8 + 0x20]
	0x03A0A908 LDR X8, [X8 + 0x48]
	0x03A0A90C ADD X10, X11, X10
	0x03A0A910 SUB X9, X9, X12
	0x03A0A914 SCVTF D1, X10
	0x03A0A918 SCVTF D2, X9
	0x03A0A91C FMUL D1, D1, D2
	0x03A0A920 CMP X8, X1
	0x03A0A924 FADD D0, D0, D1
	0x03A0A928 B.NE 0x3A0A8F4
	0x03A0A92C FMOV D1, 0.5
	0x03A0A930 FMUL D0, D0, D1
	0x03A0A934 LDR X30, [X31], #0x10
	0x03A0A938 RET
	0x03A0A93C BL 0x1C16F20
	0x03A0A940 STR X30, [X31 - 0x30]!
	0x03A0A944 STP X22, X21, [X31 + 0x10]
	0x03A0A948 STP X20, X19, [X31 + 0x20]
	0x03A0A94C CBZ X1, 0x3A0AA44
	0x03A0A950 LDR X8, [X1 + 0x48]
	0x03A0A954 MOV X20, X1
	0x03A0A958 CMP X8, X1
	0x03A0A95C B.EQ 0x3A0AA2C
	0x03A0A960 MOV X19, X0
	0x03A0A964 MOV X21, X31
	0x03A0A968 CBZ X8, 0x3A0AA44
	0x03A0A96C LDR X9, [X8 + 0x28]
	0x03A0A970 LDR X10, [X20 + 0x28]
	0x03A0A974 CMP X9, X10
	0x03A0A978 B.LE 0x3A0A988
	0x03A0A97C MOV X21, X31
	0x03A0A980 MOV X20, X8
	0x03A0A984 B 0x3A0A9B8
	0x03A0A988 B.NE 0x3A0A9B8
	0x03A0A98C LDR X9, [X8 + 0x20]
	0x03A0A990 LDR X10, [X20 + 0x20]
	0x03A0A994 CMP X9, X10
	0x03A0A998 B.GT 0x3A0A9B8
	0x03A0A99C B.LT 0x3A0A97C
	0x03A0A9A0 LDR X9, [X8 + 0x48]
	0x03A0A9A4 CMP X9, X20
	0x03A0A9A8 B.EQ 0x3A0A9B8
	0x03A0A9AC LDR X9, [X8 + 0x50]
	0x03A0A9B0 CMP X9, X20
	0x03A0A9B4 CSEL X21, X21, X8, EQ
	0x03A0A9B8 LDR X8, [X8 + 0x48]
	0x03A0A9BC CMP X8, X20
	0x03A0A9C0 B.NE 0x3A0A968
	0x03A0A9C4 CBZ X21, 0x3A0AA2C
	0x03A0A9C8 CMP X21, X20
	0x03A0A9CC B.EQ 0x3A0AA2C
	0x03A0A9D0 MOV X22, X20
	0x03A0A9D4 MOV X0, X19
	0x03A0A9D8 MOV X1, X20
	0x03A0A9DC MOV X2, X21
	0x03A0A9E0 BL 0x3A0A648
	0x03A0A9E4 ANDS W31, W0, 0x1
	0x03A0A9E8 CSEL X22, X22, X21, NE
	0x03A0A9EC LDR X21, [X21 + 0x48]
	0x03A0A9F0 CBZ X21, 0x3A0AA44
	0x03A0A9F4 LDR X8, [X22 + 0x20]
	0x03A0A9F8 LDR X9, [X21 + 0x20]
	0x03A0A9FC CMP X9, X8
	0x03A0AA00 B.NE 0x3A0AA14
	0x03A0AA04 LDR X9, [X21 + 0x28]
	0x03A0AA08 LDR X10, [X22 + 0x28]
	0x03A0AA0C CMP X9, X10
	0x03A0AA10 B.EQ 0x3A0AA20
	0x03A0AA14 LDR X21, [X21 + 0x48]
	0x03A0AA18 CBNZ X21, 0x3A0A9F8
	0x03A0AA1C B 0x3A0AA44
	0x03A0AA20 CMP X21, X20
	0x03A0AA24 B.NE 0x3A0A9D4
	0x03A0AA28 B 0x3A0AA30
	0x03A0AA2C MOV X22, X20
	0x03A0AA30 MOV X0, X22
	0x03A0AA34 LDP X20, X19, [X31 + 0x20]
	0x03A0AA38 LDP X22, X21, [X31 + 0x10]
	0x03A0AA3C LDR X30, [X31], #0x30
	0x03A0AA40 RET
	0x03A0AA44 BL 0x1C16F20
	0x03A0AA48 STP X30, X21, [X31 - 0x20]!
	0x03A0AA4C STP X20, X19, [X31 + 0x10]
	0x03A0AA50 CBZ X1, 0x3A0AB14
	0x03A0AA54 MOV X19, X1
	0x03A0AA58 LDR X1, [X1 + 0x28]
	0x03A0AA5C MOV X20, X2
	0x03A0AA60 MOV X21, X0
	0x03A0AA64 CBNZ X1, 0x3A0AA7C
	0x03A0AA68 LDR X1, [X19 + 0x20]
	0x03A0AA6C MOV X0, X21
	0x03A0AA70 BL 0x3A0A940
	0x03A0AA74 MOV X1, X0
	0x03A0AA78 STR X0, [X19 + 0x28]
	0x03A0AA7C CBZ X20, 0x3A0AB14
	0x03A0AA80 LDR X2, [X20 + 0x28]
	0x03A0AA84 CBNZ X2, 0x3A0AAA0
	0x03A0AA88 LDR X1, [X20 + 0x20]
	0x03A0AA8C MOV X0, X21
	0x03A0AA90 BL 0x3A0A940
	0x03A0AA94 STR X0, [X20 + 0x28]
	0x03A0AA98 LDR X1, [X19 + 0x28]
	0x03A0AA9C MOV X2, X0
	0x03A0AAA0 CBZ X1, 0x3A0AB14
	0x03A0AAA4 CBZ X2, 0x3A0AB14
	0x03A0AAA8 LDR X8, [X1 + 0x28]
	0x03A0AAAC LDR X9, [X2 + 0x28]
	0x03A0AAB0 CMP X8, X9
	0x03A0AAB4 B.GT 0x3A0AAD4
	0x03A0AAB8 B.GE 0x3A0AAC4
	0x03A0AABC MOV X19, X20
	0x03A0AAC0 B 0x3A0AAD4
	0x03A0AAC4 LDR X8, [X1 + 0x20]
	0x03A0AAC8 LDR X9, [X2 + 0x20]
	0x03A0AACC CMP X8, X9
	0x03A0AAD0 B.GE 0x3A0AAE4
	0x03A0AAD4 MOV X0, X19
	0x03A0AAD8 LDP X20, X19, [X31 + 0x10]
	0x03A0AADC LDP X30, X21, [X31], #0x20
	0x03A0AAE0 RET
	0x03A0AAE4 B.GT 0x3A0AABC
	0x03A0AAE8 LDR X8, [X1 + 0x48]
	0x03A0AAEC CMP X8, X1
	0x03A0AAF0 B.EQ 0x3A0AABC
	0x03A0AAF4 LDR X8, [X2 + 0x48]
	0x03A0AAF8 CMP X8, X2
	0x03A0AAFC B.EQ 0x3A0AAD4
	0x03A0AB00 MOV X0, X21
	0x03A0AB04 BL 0x3A0A648
	0x03A0AB08 ANDS W31, W0, 0x1
	0x03A0AB0C CSEL X0, X19, X20, NE
	0x03A0AB10 B 0x3A0AAD8
	0x03A0AB14 BL 0x1C16F20
	0x03A0AB18 STR X30, [X31 - 0x10]!
	0x03A0AB1C CBZ X1, 0x3A0AB40
	0x03A0AB20 LDR X1, [X1 + 0x18]
	0x03A0AB24 CMP X1, X2
	0x03A0AB28 B.EQ 0x3A0AB30
	0x03A0AB2C CBNZ X1, 0x3A0AB1C
	0x03A0AB30 CMP X1, X2
	0x03A0AB34 CSET W0, EQ
	0x03A0AB38 LDR X30, [X31], #0x10
	0x03A0AB3C RET
	0x03A0AB40 BL 0x1C16F20
	0x03A0AB44 STP X30, X21, [X31 - 0x20]!
	0x03A0AB48 STP X20, X19, [X31 + 0x10]
	0x03A0AB4C ADRP X21, 0x9D7000
	0x03A0AB50 LDRB W8, [X21 + 0xF84]
	0x03A0AB54 MOV W20, W1
	0x03A0AB58 MOV X19, X0
	0x03A0AB5C TBNZ X8, 0x0, 0x3A0AB74
	0x03A0AB60 ADRP X0, 0x74A000
	0x03A0AB64 LDR X0, [X0 + 0x268]
	0x03A0AB68 BL 0x1C16CF4
	0x03A0AB6C MOVZ W8, 0x1
	0x03A0AB70 STRB W8, [X21 + 0xF84]
	0x03A0AB74 LDR X0, [X19 + 0x30]
	0x03A0AB78 CBZ X0, 0x3A0ABD0
	0x03A0AB7C ADRP X21, 0x74A000
	0x03A0AB80 LDR X21, [X21 + 0x268]
	0x03A0AB84 MOV W1, W20
	0x03A0AB88 LDR X2, [X21]
	0x03A0AB8C BL 0x301BCCC
	0x03A0AB90 CBZ X0, 0x3A0ABD0
	0x03A0AB94 MOV X20, X0
	0x03A0AB98 LDR X0, [X19 + 0x30]
	0x03A0AB9C CBZ X0, 0x3A0ABD0
	0x03A0ABA0 LDR W1, [X20 + 0x10]
	0x03A0ABA4 LDR X2, [X21]
	0x03A0ABA8 BL 0x301BCCC
	0x03A0ABAC CMP X20, X0
	0x03A0ABB0 B.EQ 0x3A0ABD4
	0x03A0ABB4 LDR X0, [X19 + 0x30]
	0x03A0ABB8 CBZ X0, 0x3A0ABD0
	0x03A0ABBC LDR W1, [X20 + 0x10]
	0x03A0ABC0 LDR X2, [X21]
	0x03A0ABC4 BL 0x301BCCC
	0x03A0ABC8 MOV X20, X0
	0x03A0ABCC CBNZ X0, 0x3A0AB98
	0x03A0ABD0 BL 0x1C16F20
	0x03A0ABD4 MOV X0, X20
	0x03A0ABD8 LDP X20, X19, [X31 + 0x10]
	0x03A0ABDC LDP X30, X21, [X31], #0x20
	0x03A0ABE0 RET
	0x03A0ABE4 STR X30, [X31 - 0x10]!
	0x03A0ABE8 CBZ X0, 0x3A0AC08
	0x03A0ABEC CBZ X1, 0x3A0AC08
	0x03A0ABF0 LDR W8, [X1 + 0xDC]
	0x03A0ABF4 LDR W9, [X0 + 0xDC]
	0x03A0ABF8 STR W8, [X0 + 0xDC]
	0x03A0ABFC STR W9, [X1 + 0xDC]
	0x03A0AC00 LDR X30, [X31], #0x10
	0x03A0AC04 RET
	0x03A0AC08 BL 0x1C16F20
	0x03A0AC0C STR X30, [X31 - 0x10]!
	0x03A0AC10 CBZ X0, 0x3A0AC30
	0x03A0AC14 CBZ X1, 0x3A0AC30
	0x03A0AC18 LDR W8, [X1 + 0xEC]
	0x03A0AC1C LDR W9, [X0 + 0xEC]
	0x03A0AC20 STR W8, [X0 + 0xEC]
	0x03A0AC24 STR W9, [X1 + 0xEC]
	0x03A0AC28 LDR X30, [X31], #0x10
	0x03A0AC2C RET
	0x03A0AC30 BL 0x1C16F20
	0x03A0AC34 STR X30, [X31 - 0x10]!
	0x03A0AC38 CBZ X1, 0x3A0AC80
	0x03A0AC3C LDP X9, X8, [X1 + 0x118]
	0x03A0AC40 ORR X10, X8, X9, 0x0
	0x03A0AC44 CBNZ X10, 0x3A0AC54
	0x03A0AC48 LDR X10, [X0 + 0x50]
	0x03A0AC4C CMP X1, X10
	0x03A0AC50 B.NE 0x3A0AC78
	0x03A0AC54 ADD X11, X8, 0x118
	0x03A0AC58 ADD X12, X0, 0x50
	0x03A0AC5C CMP X8, 0x0
	0x03A0AC60 ADD X10, X1, 0x118
	0x03A0AC64 CSEL X11, X12, X11, EQ
	0x03A0AC68 STR X9, [X11]
	0x03A0AC6C CBZ X9, 0x3A0AC74
	0x03A0AC70 STR X8, [X9 + 0x120]
	0x03A0AC74 STP X31, X31, [X10]
	0x03A0AC78 LDR X30, [X31], #0x10
	0x03A0AC7C RET
	0x03A0AC80 BL 0x1C16F20
	0x03A0AC84 STP X29, X30, [X31 - 0x60]!
	0x03A0AC88 STP X28, X27, [X31 + 0x10]
	0x03A0AC8C STP X26, X25, [X31 + 0x20]
	0x03A0AC90 STP X24, X23, [X31 + 0x30]
	0x03A0AC94 STP X22, X21, [X31 + 0x40]
	0x03A0AC98 STP X20, X19, [X31 + 0x50]
	0x03A0AC9C SUB X31, X31, 0x380
	0x03A0ACA0 STR X1, [X31 + 0x378]
	0x03A0ACA4 CBZ X1, 0x3A0B3D0
	0x03A0ACA8 LDR X20, [X1 + 0x18]
	0x03A0ACAC LDR X21, [X1 + 0x78]
	0x03A0ACB0 LDR W26, [X1 + 0xE0]
	0x03A0ACB4 MOV X24, X1
	0x03A0ACB8 MOV X19, X0
	0x03A0ACBC CMP X20, X21
	0x03A0ACC0 CSEL X9, X20, X21, LT
	0x03A0ACC4 CSEL X8, X21, X20, LT
	0x03A0ACC8 CSET W27, LT
	0x03A0ACCC STP X8, X9, [X31 + 0x28]
	0x03A0ACD0 MOV X8, X1
	0x03A0ACD4 MOV X22, X8
	0x03A0ACD8 LDR X8, [X8 + 0x100]
	0x03A0ACDC CBZ X8, 0x3A0ACF0
	0x03A0ACE0 LDR X9, [X8 + 0xB0]
	0x03A0ACE4 CBZ X9, 0x3A0ACD4
	0x03A0ACE8 MOV X0, X31
	0x03A0ACEC B 0x3A0ACF8
	0x03A0ACF0 MOV X1, X22
	0x03A0ACF4 BL 0x3A0B414
	0x03A0ACF8 LDR X8, [X19 + 0x48]
	0x03A0ACFC STR X0, [X31 + 0x20]
	0x03A0AD00 CBZ X8, 0x3A0AD24
	0x03A0AD04 CMP X20, X21
	0x03A0AD08 B.GE 0x3A0AD2C
	0x03A0AD0C LDR X9, [X24 + 0x18]
	0x03A0AD10 LDR X10, [X8 + 0x10]
	0x03A0AD14 CMP X10, X9
	0x03A0AD18 B.GT 0x3A0AD5C
	0x03A0AD1C LDR X8, [X8 + 0x18]
	0x03A0AD20 CBNZ X8, 0x3A0AD10
	0x03A0AD24 MOV X21, X31
	0x03A0AD28 B 0x3A0AD68
	0x03A0AD2C MOV X9, X8
	0x03A0AD30 LDR X8, [X8 + 0x18]
	0x03A0AD34 CBZ X8, 0x3A0AD48
	0x03A0AD38 LDR X10, [X8 + 0x10]
	0x03A0AD3C LDR X11, [X24 + 0x18]
	0x03A0AD40 CMP X10, X11
	0x03A0AD44 B.LT 0x3A0AD2C
	0x03A0AD48 LDR X8, [X9 + 0x10]
	0x03A0AD4C LDR X10, [X22 + 0x78]
	0x03A0AD50 CMP X8, X10
	0x03A0AD54 CSEL X21, X9, X31, GT
	0x03A0AD58 B 0x3A0AD68
	0x03A0AD5C LDR X9, [X22 + 0x78]
	0x03A0AD60 CMP X10, X9
	0x03A0AD64 CSEL X21, X8, X31, LT
	0x03A0AD68 ADD X8, X31, 0x318
	0x03A0AD6C ADD X9, X31, 0x348
	0x03A0AD70 ADD X10, X31, 0x1F0
	0x03A0AD74 ADD X11, X31, 0x220
	0x03A0AD78 MOV X23, X31
	0x03A0AD7C ADD X28, X8, 0x20
	0x03A0AD80 ADD X29, X9, 0x20
	0x03A0AD84 ADD X9, X10, 0x20
	0x03A0AD88 ADD X8, X11, 0x20
	0x03A0AD8C MOVN X20, 0x0
	0x03A0AD90 STP X8, X9, [X31 + 0x10]
	0x03A0AD94 ANDS W31, W27, 0x1
	0x03A0AD98 MOVZ W8, 0x110
	0x03A0AD9C MOVZ W9, 0x108
	0x03A0ADA0 CSEL X8, X9, X8, NE
	0x03A0ADA4 STR X24, [X31 + 0x38]
	0x03A0ADA8 LDR X24, [X24, X8, LSL]
	0x03A0ADAC CBZ X24, 0x3A0B040
	0x03A0ADB0 CBZ X21, 0x3A0AE5C
	0x03A0ADB4 TBZ X27, 0x0, 0x3A0AE0C
	0x03A0ADB8 LDR X8, [X21 + 0x10]
	0x03A0ADBC LDR X9, [X24 + 0x48]
	0x03A0ADC0 CMP X8, X9
	0x03A0ADC4 B.GE 0x3A0AE5C
	0x03A0ADC8 LDR X1, [X31 + 0x378]
	0x03A0ADCC CBZ X1, 0x3A0B3D0
	0x03A0ADD0 CBZ W26, 0x3A0AE00
	0x03A0ADD4 LDR W9, [X1 + 0xEC]
	0x03A0ADD8 TBNZ X9, 0x1F, 0x3A0AE00
	0x03A0ADDC LDR X9, [X1 + 0x20]
	0x03A0ADE0 ADD X2, X31, 0x348
	0x03A0ADE4 MOV X0, X19
	0x03A0ADE8 STP X31, X31, [X29]
	0x03A0ADEC STR X20, [X31 + 0x348]
	0x03A0ADF0 STR X8, [X31 + 0x350]
	0x03A0ADF4 STR X9, [X31 + 0x358]
	0x03A0ADF8 STR X31, [X31 + 0x360]
	0x03A0ADFC BL 0x3A09454
	0x03A0AE00 LDR X21, [X21 + 0x18]
	0x03A0AE04 CBNZ X21, 0x3A0ADB8
	0x03A0AE08 B 0x3A0AE5C
	0x03A0AE0C LDR X8, [X21 + 0x10]
	0x03A0AE10 LDR X9, [X24 + 0x48]
	0x03A0AE14 CMP X8, X9
	0x03A0AE18 B.LE 0x3A0AE5C
	0x03A0AE1C LDR X1, [X31 + 0x378]
	0x03A0AE20 CBZ X1, 0x3A0B3D0
	0x03A0AE24 CBZ W26, 0x3A0AE54
	0x03A0AE28 LDR W9, [X1 + 0xEC]
	0x03A0AE2C TBNZ X9, 0x1F, 0x3A0AE54
	0x03A0AE30 LDR X9, [X1 + 0x20]
	0x03A0AE34 ADD X2, X31, 0x318
	0x03A0AE38 MOV X0, X19
	0x03A0AE3C STP X31, X31, [X28]
	0x03A0AE40 STR X20, [X31 + 0x318]
	0x03A0AE44 STR X8, [X31 + 0x320]
	0x03A0AE48 STR X9, [X31 + 0x328]
	0x03A0AE4C STR X31, [X31 + 0x330]
	0x03A0AE50 BL 0x3A09454
	0x03A0AE54 LDR X21, [X21 + 0x20]
	0x03A0AE58 CBNZ X21, 0x3A0AE0C
	0x03A0AE5C LDR X8, [X24 + 0x48]
	0x03A0AE60 TBZ X27, 0x0, 0x3A0AE74
	0x03A0AE64 LDR X9, [X31 + 0x28]
	0x03A0AE68 CMP X8, X9
	0x03A0AE6C B.LE 0x3A0AE80
	0x03A0AE70 B 0x3A0B034
	0x03A0AE74 LDR X9, [X31 + 0x30]
	0x03A0AE78 CMP X8, X9
	0x03A0AE7C B.LT 0x3A0B034
	0x03A0AE80 LDR X1, [X31 + 0x378]
	0x03A0AE84 CBZ X1, 0x3A0B3D0
	0x03A0AE88 LDR X9, [X1 + 0x78]
	0x03A0AE8C CMP X8, X9
	0x03A0AE90 B.NE 0x3A0AEAC
	0x03A0AE94 LDR X8, [X1 + 0x100]
	0x03A0AE98 CBZ X8, 0x3A0AEAC
	0x03A0AE9C LDR V0, [X24 + 0xD0]
	0x03A0AEA0 LDR V1, [X8 + 0xD0]
	0x03A0AEA4 FCMP D0, D1
	0x03A0AEA8 B.MI 0x3A0B034
	0x03A0AEAC CBZ W26, 0x3A0AF8C
	0x03A0AEB0 LDR W8, [X1 + 0xEC]
	0x03A0AEB4 TBNZ X8, 0x1F, 0x3A0AF8C
	0x03A0AEB8 ADD X8, X24, 0x40
	0x03A0AEBC LDP V1, V0, [X8 + 0x10]
	0x03A0AEC0 LDR V2, [X8]
	0x03A0AEC4 ADD X2, X31, 0x2E0
	0x03A0AEC8 MOV X0, X19
	0x03A0AECC STP V1, V0, [X31 + 0x2F0]
	0x03A0AED0 STR V2, [X31 + 0x2E]
	0x03A0AED4 BL 0x3A09454
	0x03A0AED8 LDR X25, [X19 + 0x50]
	0x03A0AEDC MOV X23, X0
	0x03A0AEE0 CBZ X25, 0x3A0AF64
	0x03A0AEE4 LDR W8, [X25 + 0xEC]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 672
	014 Move X23, 0x9D8000
	015 Move W8, [X23+3974]
	016 Move X22, X3
	017 Move X19, X2
	018 Move X20, X1
	019 Move X21, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x6EA000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X23+3974], W8
	029 Compare X20, 0
	030 JumpIfEqual {450}
	031 Compare X19, 0
	032 JumpIfEqual {450}
	033 Move W24, [X20+236]
	034 Move W23, [X19+236]
	035 Move W10, [X20+224]
	036 Move W11, [X19+224]
	037 Compare W10, 0
	038 JumpIfEqual {62}
	039 Move W9, [X20+216]
	040 Move W8, [X19+216]
	041 Compare W11, 0
	042 JumpIfEqual {90}
	043 NotImplemented "Instruction CMP not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move W12, 108
	046 Move W13, 112
	047 NotImplemented "Instruction CSEL not yet implemented."
	048 Move W14, [X21]
	049 Move W13, [X20+228]
	050 Add X12, X21, 112
	051 Add X15, X21, 108
	052 NotImplemented "Instruction CSEL not yet implemented."
	053 Compare W14, 0
	054 JumpIfEqual {166}
	055 Add W11, W13, W11
	056 NotImplemented "Instruction CSNEG not yet implemented."
	057 Move [X20+228], W11
	058 Move W11, [X19+228]
	059 Subtract W10, W11, W10
	060 Subtract W10, W31, W11
	061 Move [X19+228], W10
	062 Compare W11, 0
	063 JumpIfEqual {389}
	064 Move W8, [X20+216]
	065 Move W9, [X19+216]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X8, 0x6EA000
	068 Move X8, [X8+1448]
	069 Move W25, [X19+228]
	070 Move X0, [X8]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction CSNEG not yet implemented."
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move W8, [X21+68]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move W8, [X19+232]
	081 Compare W8, 0
	082 JumpIfNotEqual {129}
	083 Move V1, [X22+16]
	084 Move V0, [X22+32]
	085 Move V2, [X22]
	086 Add X2, X31, 528
	087 Move [X31+544], V1
	088 Move [X31+552], V0
	089 Move [X31+33], V2
	090 NotImplemented "Instruction CMP not yet implemented."
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move W8, [X21+68]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Compare W10, 0
	095 JumpIfEqual {302}
	096 Move TEMP, X24
	097 And TEMP, TEMP, -2147483648
	098 Compare TEMP, -2147483648
	099 JumpIfEqual {389}
	100 Move V1, [X22+16]
	101 Move V0, [X22+32]
	102 Move V2, [X22]
	103 Add X2, X31, 576
	104 Move [X31+592], V1
	105 Move [X31+600], V0
	106 Move [X31+36], V2
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move W12, 108
	109 Move W14, 112
	110 Move W13, [X20+232]
	111 NotImplemented "Instruction CSEL not yet implemented."
	112 Move W15, [X21]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Add W11, W13, W11
	115 NotImplemented "Instruction CSET not yet implemented."
	116 NotImplemented "Instruction CMP not yet implemented."
	117 NotImplemented "Instruction CSEL not yet implemented."
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move [X20+232], W11
	120 NotImplemented "Instruction CSEL not yet implemented."
	121 Move W13, [X21]
	122 Move W11, [X19+232]
	123 Add X12, X21, 112
	124 Add X14, X21, 108
	125 NotImplemented "Instruction CSEL not yet implemented."
	126 Compare W13, 0
	127 JumpIfEqual {169}
	128 Subtract W10, W11, W10
	129 Move W8, [X19+224]
	130 Compare W8, 0
	131 JumpIfNotEqual {389}
	132 Move X8, 0x6EA000
	133 Move X8, [X8+1448]
	134 Move W24, [X20+228]
	135 Move X0, [X8]
	136 Move W8, [X0+224]
	137 Compare W8, 0
	138 JumpIfNotEqual {140}
	139 Call 0x1C17DFC
	140 NotImplemented "Instruction CMP not yet implemented."
	141 NotImplemented "Instruction CSNEG not yet implemented."
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move W8, [X21+68]
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move W8, [X20+232]
	146 Compare W8, 0
	147 JumpIfNotEqual {389}
	148 Move V1, [X22+16]
	149 Move V0, [X22+32]
	150 Move V2, [X22]
	151 Add X2, X31, 480
	152 Move [X31+496], V1
	153 Move [X31+504], V0
	154 Move [X31+30], V2
	155 Move X0, X21
	156 Move X1, X19
	157 Call Clipper.AddOutPt, X0, X1, X2
	158 Move TEMP, X23
	159 And TEMP, TEMP, -2147483648
	160 Compare TEMP, -2147483648
	161 JumpIfEqual {389}
	162 Move TEMP, 0
	163 Not TEMP
	164 Move W8, TEMP
	165 Move [X19+236], W8
	166 Move W10, [X19+228]
	167 Move [X20+228], W10
	168 Move [X19+228], W13
	169 NotImplemented "Instruction CMP not yet implemented."
	170 NotImplemented "Instruction CSET not yet implemented."
	171 Move [X19+232], W10
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Move W10, 112
	174 Move W11, 108
	175 Move W9, [X12]
	176 NotImplemented "Instruction CSEL not yet implemented."
	177 NotImplemented "Instruction CMP not yet implemented."
	178 NotImplemented "Instruction CSEL not yet implemented."
	179 NotImplemented "Instruction CSEL not yet implemented."
	180 Move W28, [X21]
	181 Move W27, [X21]
	182 Move W26, [X21]
	183 NotImplemented "Instruction CMP not yet implemented."
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Move W25, [X20+228]
	186 Move W8, [X20+228]
	187 Subtract W25, W31, W8
	188 Move X8, 0x6EA000
	189 Move X8, [X8+1448]
	190 Move W25, [X20+228]
	191 Move X0, [X8]
	192 Move W8, [X0+224]
	193 Compare W8, 0
	194 JumpIfNotEqual {196}
	195 Call 0x1C17DFC
	196 NotImplemented "Instruction CMP not yet implemented."
	197 NotImplemented "Instruction CSNEG not yet implemented."
	198 NotImplemented "Instruction CMP not yet implemented."
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Move W27, [X19+228]
	201 Move W8, [X19+228]
	202 Subtract W27, W31, W8
	203 Move X8, 0x6EA000
	204 Move X8, [X8+1448]
	205 Move W27, [X19+228]
	206 Move X0, [X8]
	207 Move W8, [X0+224]
	208 Compare W8, 0
	209 JumpIfNotEqual {211}
	210 Call 0x1C17DFC
	211 NotImplemented "Instruction CMP not yet implemented."
	212 NotImplemented "Instruction CSNEG not yet implemented."
	213 Or W8, W23, W24
	214 Move TEMP, X8
	215 And TEMP, TEMP, -2147483648
	216 Compare TEMP, -2147483648
	217 JumpIfEqual {255}
	218 Or W8, W27, W25
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move W8, [X20+216]
	221 Move W9, [X19+216]
	222 NotImplemented "Instruction CMP not yet implemented."
	223 Move W8, [X21+68]
	224 NotImplemented "Instruction CMP not yet implemented."
	225 Move V1, [X22+16]
	226 Move V0, [X22+32]
	227 Move V2, [X22]
	228 Add X2, X31, 384
	229 Move X0, X21
	230 Move X1, X20
	231 Move [X31+400], V1
	232 Move [X31+408], V0
	233 Move [X31+24], V2
	234 Call Clipper.AddOutPt, X0, X1, X2
	235 Move V0, [X22]
	236 Move V1, [X22+16]
	237 Move V2, [X22+2]
	238 Add X2, X31, 336
	239 Move [X31+336], V0
	240 Move [X31+344], V1
	241 Move [X31+23], V2
	242 Move X0, X21
	243 Move X1, X19
	244 Move V1, [X22+16]
	245 Move V0, [X22+32]
	246 Move V2, [X22]
	247 Add X3, X31, 432
	248 Move X0, X21
	249 Move X1, X20
	250 Move X2, X19
	251 Move [X31+448], V1
	252 Move [X31+456], V0
	253 Move [X31+27], V2
	254 Call Clipper.AddLocalMaxPoly, X0, X1, X2, X3
	255 Move TEMP, X24
	256 And TEMP, TEMP, -2147483648
	257 Compare TEMP, -2147483648
	258 JumpIfEqual {290}
	259 NotImplemented "Instruction CMP not yet implemented."
	260 Move V1, [X22+16]
	261 Move V0, [X22+32]
	262 Move V2, [X22]
	263 Add X2, X31, 288
	264 Move X0, X21
	265 Move [X31+304], V1
	266 Move [X31+312], V0
	267 Move [X31+18], V2
	268 Move X1, X20
	269 Call Clipper.AddOutPt, X0, X1, X2
	270 Move X0, X20
	271 Move X1, X19
	272 Call Clipper.SwapSides, X0, X1
	273 Move X0, X20
	274 Move X1, X19
	275 Add X31, X31, 672
	276 Move X20, [X31+80]
	277 Move X19, [X31+88]
	278 Move X22, [X31+64]
	279 Move X21, [X31+72]
	280 Move X24, [X31+48]
	281 Move X23, [X31+56]
	282 Move X26, [X31+32]
	283 Move X25, [X31+40]
	284 Move X28, [X31+16]
	285 Move X27, [X31+24]
	286 Move X29, [X31+96]
	287 Move X30, [X31+104]
	288 Call Clipper.SwapPolyIndexes, X0, X1
	289 Return 
	290 Move TEMP, X23
	291 And TEMP, TEMP, -2147483648
	292 Compare TEMP, -2147483648
	293 JumpIfEqual {324}
	294 NotImplemented "Instruction CMP not yet implemented."
	295 Move V1, [X22+16]
	296 Move V0, [X22+32]
	297 Move V2, [X22]
	298 Add X2, X31, 240
	299 Move [X31+256], V1
	300 Move [X31+264], V0
	301 Move [X31+15], V2
	302 Move TEMP, X23
	303 And TEMP, TEMP, -2147483648
	304 Compare TEMP, -2147483648
	305 JumpIfEqual {389}
	306 Move V1, [X22+16]
	307 Move V0, [X22+32]
	308 Move V2, [X22]
	309 Add X2, X31, 624
	310 Move [X31+640], V1
	311 Move [X31+648], V0
	312 Move [X31+39], V2
	313 Move X0, X21
	314 Move X1, X20
	315 Call Clipper.AddOutPt, X0, X1, X2
	316 Move TEMP, X24
	317 And TEMP, TEMP, -2147483648
	318 Compare TEMP, -2147483648
	319 JumpIfEqual {389}
	320 Move TEMP, 0
	321 Not TEMP
	322 Move W8, TEMP
	323 Move [X20+236], W8
	324 Or W8, W25, W27
	325 NotImplemented "Instruction CMP not yet implemented."
	326 NotImplemented "Instruction CMP not yet implemented."
	327 NotImplemented "Instruction CMP not yet implemented."
	328 Move W23, [X20+232]
	329 Move W8, [X20+232]
	330 Subtract W23, W31, W8
	331 Move X8, 0x6EA000
	332 Move X8, [X8+1448]
	333 Move W23, [X20+232]
	334 Move X0, [X8]
	335 Move W8, [X0+224]
	336 Compare W8, 0
	337 JumpIfNotEqual {339}
	338 Call 0x1C17DFC
	339 NotImplemented "Instruction CMP not yet implemented."
	340 NotImplemented "Instruction CSNEG not yet implemented."
	341 NotImplemented "Instruction CMP not yet implemented."
	342 NotImplemented "Instruction CMP not yet implemented."
	343 Move W8, [X19+232]
	344 Move W8, [X19+232]
	345 Subtract W8, W31, W8
	346 Move X8, 0x6EA000
	347 Move X8, [X8+1448]
	348 Move W24, [X19+232]
	349 Move X0, [X8]
	350 Move W8, [X0+224]
	351 Compare W8, 0
	352 JumpIfNotEqual {354}
	353 Call 0x1C17DFC
	354 NotImplemented "Instruction CMP not yet implemented."
	355 NotImplemented "Instruction CSNEG not yet implemented."
	356 Move W9, [X20+216]
	357 Move W10, [X19+216]
	358 NotImplemented "Instruction CMP not yet implemented."
	359 NotImplemented "Instruction CMP not yet implemented."
	360 NotImplemented "Instruction CMP not yet implemented."
	361 Move W10, [X21+68]
	362 NotImplemented "Instruction CMP not yet implemented."
	363 Move X11, -48701440
	364 Add X11, X11, 2765
	365 NotImplemented "Instruction ADR not yet implemented."
	366 Move W13, [X11]
	367 Add X12, X12, X13
	368 CallNoReturn X12
	369 NotImplemented "Instruction CMP not yet implemented."
	370 NotImplemented "Instruction CMP not yet implemented."
	371 Move V1, [X22+16]
	372 Move V0, [X22+32]
	373 Move V2, [X22]
	374 Add X3, X31, 144
	375 Move [X31+160], V1
	376 Move [X31+168], V0
	377 Move [X31+9], V2
	378 Move V1, [X22+16]
	379 Move V0, [X22+32]
	380 Move V2, [X22]
	381 Add X3, X31, 192
	382 Move [X31+208], V1
	383 Move [X31+216], V0
	384 Move [X31+12], V2
	385 Move X0, X21
	386 Move X1, X20
	387 Move X2, X19
	388 Call Clipper.AddLocalMinPoly, X0, X1, X2, X3
	389 Add X31, X31, 672
	390 Move X20, [X31+80]
	391 Move X19, [X31+88]
	392 Move X22, [X31+64]
	393 Move X21, [X31+72]
	394 Move X24, [X31+48]
	395 Move X23, [X31+56]
	396 Move X26, [X31+32]
	397 Move X25, [X31+40]
	398 Move X28, [X31+16]
	399 Move X27, [X31+24]
	400 Move X29, [X31+96]
	401 Move X30, [X31+104]
	402 Return 
	403 Move X0, X20
	404 Move X1, X19
	405 Add X31, X31, 672
	406 Move X20, [X31+80]
	407 Move X19, [X31+88]
	408 Move X22, [X31+64]
	409 Move X21, [X31+72]
	410 Move X24, [X31+48]
	411 Move X23, [X31+56]
	412 Move X26, [X31+32]
	413 Move X25, [X31+40]
	414 Move X28, [X31+16]
	415 Move X27, [X31+24]
	416 Move X29, [X31+96]
	417 Move X30, [X31+104]
	418 Call Clipper.SwapSides, X0, X1
	419 Return 
	420 NotImplemented "Instruction CMP not yet implemented."
	421 NotImplemented "Instruction CMP not yet implemented."
	422 Move V1, [X22+16]
	423 Move V0, [X22+32]
	424 Move V2, [X22]
	425 Add X3, X31, 96
	426 Move [X31+112], V1
	427 Move [X31+120], V0
	428 Move [X31+6], V2
	429 NotImplemented "Instruction CMP not yet implemented."
	430 NotImplemented "Instruction CMP not yet implemented."
	431 NotImplemented "Instruction CMP not yet implemented."
	432 Move V1, [X22+16]
	433 Move V0, [X22+32]
	434 Move V2, [X22]
	435 Add X3, X31, 48
	436 Move [X31+64], V1
	437 Move [X31+72], V0
	438 Move [X31+3], V2
	439 Move V1, [X22+16]
	440 Move V0, [X22+32]
	441 Move V2, [X22]
	442 Add X3, X31, 0
	443 Move [X31+16], V1
	444 Move [X31+24], V0
	445 Move [X31], V2
	446 Compare W9, 0
	447 JumpIfNotEqual {389}
	448 NotImplemented "Instruction CMP not yet implemented."
	449 NotImplemented "Instruction CMP not yet implemented."
	450 Call 0x1C17F20

Method: System.Void DeleteFromSEL(UnityEngine.Rendering.Universal.TEdge e)

Disassembly:
	0x03A0BC34 BL 0x1C16DFC
	0x03A0BC38 LDR V0, [X21 + 0xD0]
	0x03A0BC3C FABS D1, D8
	0x03A0BC40 FABS D2, D0
	0x03A0BC44 FCMP D1, D2
	0x03A0BC48 B.PL 0x3A0BD48
	0x03A0BC4C LDR V1, [X20 + 0xD0]
	0x03A0BC50 FMOV D2, 0.5
	0x03A0BC54 FMOV D3, -0.5
	0x03A0BC58 MOVZ X8, 0x7FF00000
	0x03A0BC5C FMUL D1, D11, D1
	0x03A0BC60 FADD D1, D10, D1
	0x03A0BC64 FADD D2, D1, D2
	0x03A0BC68 FADD D3, D1, D3
	0x03A0BC6C FCMP D1, 0x0
	0x03A0BC70 FMOV D1, X8
	0x03A0BC74 FCSEL D2, D3, D2, MI
	0x03A0BC78 FCVTZS X8, D2
	0x03A0BC7C FCMP D2, D1
	0x03A0BC80 B 0x3A0BD78

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {24}
	004 Move X9, [X1+280]
	005 Move X8, [X1+288]
	006 Or X10, X8, X9
	007 Compare X10, 0
	008 JumpIfNotEqual {11}
	009 Move X10, [X0+80]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X11, X8, 280
	012 Add X12, X0, 80
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Add X10, X1, 280
	015 NotImplemented "Instruction CSEL not yet implemented."
	016 Move [X11], X9
	017 Compare X9, 0
	018 JumpIfEqual {20}
	019 Move [X9+288], X8
	020 Move [X10], X31
	021 Move [X10+8], X31
	022 Move X30, [X31+16]
	023 Return 
	024 Call 0x1C17F20

Method: System.Void ProcessHorizontals()

Disassembly:
	0x03A08ED8 MOV X1, X19
	0x03A08EDC LDP X20, X19, [X31 + 0x30]
	0x03A08EE0 LDP X22, X21, [X31 + 0x20]
	0x03A08EE4 LDR X8, [X8 + 0xC0]
	0x03A08EE8 LDP X24, X23, [X31 + 0x10]
	0x03A08EEC LDR X2, [X8 + 0x70]
	0x03A08EF0 LDR X30, [X31], #0x40
	0x03A08EF4 B 0x301BF90
	0x03A08EF8 BL 0x1C16F20
	0x03A08EFC STP X30, X23, [X31 - 0x30]!
	0x03A08F00 STP X22, X21, [X31 + 0x10]
	0x03A08F04 STP X20, X19, [X31 + 0x20]
	0x03A08F08 ADRP X19, 0x9D9000
	0x03A08F0C ADRP X23, 0x74C000
	0x03A08F10 LDRB W8, [X19 + 0xF7C]
	0x03A08F14 LDR X23, [X23 + 0x378]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, [X0+80]
	004 Compare X1, 0
	005 JumpIfEqual {20}
	006 Move X19, X0
	007 Move X8, [X1+280]
	008 Move [X19+80], X8
	009 Compare X8, 0
	010 JumpIfEqual {12}
	011 Move [X8+288], X31
	012 Add X8, X1, 280
	013 Move X0, X19
	014 Move [X8], X31
	015 Move [X8+8], X31
	016 Call Clipper.ProcessHorizontal, X0, X1
	017 Move X1, [X19+80]
	018 Compare X1, 0
	019 JumpIfNotEqual {7}
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 

Method: System.Void GetHorzDirection(UnityEngine.Rendering.Universal.TEdge HorzEdge, out UnityEngine.Rendering.Universal.Direction Dir, out System.Int64 Left, out System.Int64 Right)

Disassembly:
	0x03A0C3D4 MOV X20, X1
	0x03A0C3D8 TBNZ X8, 0x0, 0x3A0C3F0
	0x03A0C3DC ADRP X0, 0x748000
	0x03A0C3E0 LDR X0, [X0 + 0x388]
	0x03A0C3E4 BL 0x1C16CF4
	0x03A0C3E8 MOVZ W8, 0x1
	0x03A0C3EC STRB W8, [X19 + 0xF8F]
	0x03A0C3F0 LDR X0, [X22]
	0x03A0C3F4 BL 0x1C16F10
	0x03A0C3F8 MOV X1, X31
	0x03A0C3FC MOV X19, X0
	0x03A0C400 BL 0x33BDD8C
	0x03A0C404 CBZ X20, 0x3A0C490
	0x03A0C408 LDUR V0, [X20 + 0x38]
	0x03A0C40C LDUR V1, [X20 + 0x28]
	0x03A0C410 LDUR V2, [X20 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {19}
	004 Add X1, X1, 120
	005 Move X8, [X1]
	006 Move X9, X1
	007 Add X9, X9, -96
	008 Move X10, [X9]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CSEL not yet implemented."
	011 NotImplemented "Instruction CSEL not yet implemented."
	012 Move [X3], X8
	013 Move X8, [X9]
	014 NotImplemented "Instruction CSET not yet implemented."
	015 Move [X4], X8
	016 Move [X2], W9
	017 Move X30, [X31+16]
	018 Return 
	019 Call 0x1C17F20

Method: System.Void ProcessHorizontal(UnityEngine.Rendering.Universal.TEdge horzEdge)

Disassembly:
	0x03A0BC84 LDR X8, [X20 + 0x18]
	0x03A0BC88 STR X8, [X19 + 0x8]
	0x03A0BC8C LDR X10, [X21 + 0xB0]
	0x03A0BC90 LDR X9, [X21 + 0x20]
	0x03A0BC94 CBZ X10, 0x3A0BD88
	0x03A0BC98 LDR V1, [X21 + 0x18]
	0x03A0BC9C SCVTF D2, X9
	0x03A0BCA0 SCVTF D3, X8
	0x03A0BCA4 FDIV D3, D3, D0
	0x03A0BCA8 SCVTF D1, D1
	0x03A0BCAC FDIV D1, D1, D0
	0x03A0BCB0 FSUB D1, D2, D1
	0x03A0BCB4 FMOV D2, 0.5
	0x03A0BCB8 FADD D1, D3, D1
	0x03A0BCBC FMOV D3, -0.5
	0x03A0BCC0 MOVZ X8, 0x7FF00000
	0x03A0BCC4 FADD D2, D1, D2
	0x03A0BCC8 FADD D3, D1, D3
	0x03A0BCCC FCMP D1, 0x0
	0x03A0BCD0 FMOV D1, X8
	0x03A0BCD4 FCSEL D2, D3, D2, MI
	0x03A0BCD8 B 0x3A0BD30
	0x03A0BCDC LDR X9, [X21 + 0x18]
	0x03A0BCE0 STR X9, [X19 + 0x8]
	0x03A0BCE4 LDR X10, [X20 + 0xB0]
	0x03A0BCE8 LDR X8, [X20 + 0x20]
	0x03A0BCEC CBZ X10, 0x3A0BD40
	0x03A0BCF0 LDR V1, [X20 + 0x18]
	0x03A0BCF4 SCVTF D2, X9
	0x03A0BCF8 SCVTF D3, X8
	0x03A0BCFC FDIV D2, D2, D8
	0x03A0BD00 SCVTF D1, D1
	0x03A0BD04 FDIV D1, D1, D8
	0x03A0BD08 FSUB D1, D3, D1
	0x03A0BD0C FMOV D3, 0.5
	0x03A0BD10 FADD D1, D2, D1
	0x03A0BD14 FMOV D2, -0.5
	0x03A0BD18 MOVZ X8, 0x7FF00000
	0x03A0BD1C FADD D3, D1, D3
	0x03A0BD20 FADD D2, D1, D2
	0x03A0BD24 FCMP D1, 0x0
	0x03A0BD28 FMOV D1, X8
	0x03A0BD2C FCSEL D2, D2, D3, MI
	0x03A0BD30 FCVTZS X8, D2
	0x03A0BD34 FCMP D2, D1
	0x03A0BD38 MOVZ X9, 0x80000000
	0x03A0BD3C CSEL X8, X9, X8, EQ
	0x03A0BD40 STR X8, [X19 + 0x10]
	0x03A0BD44 B 0x3A0BD8C
	0x03A0BD48 FMUL D1, D11, D0
	0x03A0BD4C FMOV D2, 0.5
	0x03A0BD50 FMOV D3, -0.5
	0x03A0BD54 FADD D1, D9, D1
	0x03A0BD58 MOVZ X8, 0x7FF00000
	0x03A0BD5C FADD D2, D1, D2
	0x03A0BD60 FADD D3, D1, D3
	0x03A0BD64 FCMP D1, 0x0
	0x03A0BD68 FMOV D4, X8
	0x03A0BD6C FCSEL D1, D3, D2, MI
	0x03A0BD70 FCVTZS X8, D1
	0x03A0BD74 FCMP D1, D4
	0x03A0BD78 MOVZ X9, 0x80000000
	0x03A0BD7C CSEL X8, X9, X8, EQ
	0x03A0BD80 STR X8, [X19 + 0x8]
	0x03A0BD84 B 0x3A0BD8C
	0x03A0BD88 STR X9, [X19 + 0x10]
	0x03A0BD8C LDR X10, [X19 + 0x10]
	0x03A0BD90 LDR X8, [X20 + 0x80]
	0x03A0BD94 LDR X9, [X21 + 0x80]
	0x03A0BD98 CMP X10, X8
	0x03A0BD9C B.LT 0x3A0BDA8
	0x03A0BDA0 CMP X10, X9
	0x03A0BDA4 B.GE 0x3A0BDF4
	0x03A0BDA8 CMP X8, X9
	0x03A0BDAC CSEL X8, X20, X21, GT
	0x03A0BDB0 LDR X1, [X8 + 0x80]
	0x03A0BDB4 ADRP X8, 0x6E8000
	0x03A0BDB8 STR X1, [X19 + 0x10]
	0x03A0BDBC LDR X8, [X8 + 0x5A8]
	0x03A0BDC0 LDR V8, [X20 + 0xD0]
	0x03A0BDC4 LDR X0, [X8]
	0x03A0BDC8 LDR W8, [X0 + 0xE0]
	0x03A0BDCC CBNZ W8, 0x3A0BDDC
	0x03A0BDD0 BL 0x1C16DFC
	0x03A0BDD4 LDR V0, [X21 + 0xD0]
	0x03A0BDD8 LDR X1, [X19 + 0x10]
	0x03A0BDDC FABS D1, D8
	0x03A0BDE0 FABS D0, D0
	0x03A0BDE4 FCMP D1, D0
	0x03A0BDE8 CSEL X0, X20, X21, MI
	0x03A0BDEC BL 0x3A09F54
	0x03A0BDF0 STR X0, [X19 + 0x8]
	0x03A0BDF4 LDR X8, [X19 + 0x10]
	0x03A0BDF8 LDR X1, [X20 + 0x50]
	0x03A0BDFC CMP X8, X1
	0x03A0BE00 B.LE 0x3A0BB90
	0x03A0BE04 STR X1, [X19 + 0x10]
	0x03A0BE08 ADRP X8, 0x6E8000
	0x03A0BE0C LDR X8, [X8 + 0x5A8]
	0x03A0BE10 LDR V8, [X20 + 0xD0]
	0x03A0BE14 LDR X0, [X8]
	0x03A0BE18 LDR W8, [X0 + 0xE0]
	0x03A0BE1C CBNZ W8, 0x3A0BE28
	0x03A0BE20 BL 0x1C16DFC
	0x03A0BE24 LDR X1, [X19 + 0x10]
	0x03A0BE28 LDR V0, [X21 + 0xD0]
	0x03A0BE2C FABS D1, D8
	0x03A0BE30 FABS D0, D0
	0x03A0BE34 FCMP D1, D0
	0x03A0BE38 B.LE 0x3A0BB84
	0x03A0BE3C MOV X0, X21
	0x03A0BE40 B 0x3A0BB88
	0x03A0BE44 BL 0x1C16F20
	0x03A0BE48 STR X30, [X31 - 0x10]!
	0x03A0BE4C CBZ X1, 0x3A0BE84
	0x03A0BE50 LDR X8, [X1 + 0x10]
	0x03A0BE54 CBZ X8, 0x3A0BE84
	0x03A0BE58 LDR X10, [X8 + 0x118]
	0x03A0BE5C LDR X9, [X1 + 0x18]
	0x03A0BE60 CMP X10, X9
	0x03A0BE64 B.EQ 0x3A0BE78
	0x03A0BE68 LDR X8, [X8 + 0x120]
	0x03A0BE6C CMP X8, X9
	0x03A0BE70 CSET W0, EQ
	0x03A0BE74 B 0x3A0BE7C
	0x03A0BE78 MOVZ W0, 0x1
	0x03A0BE7C LDR X30, [X31], #0x10
	0x03A0BE80 RET
	0x03A0BE84 BL 0x1C16F20
	0x03A0BE88 STR X30, [X31 - 0x10]!
	0x03A0BE8C CBZ X1, 0x3A0BEA8
	0x03A0BE90 CBZ X0, 0x3A0BEA8
	0x03A0BE94 LDR W8, [X1 + 0x30]
	0x03A0BE98 LDR W9, [X0 + 0x30]
	0x03A0BE9C SUB W0, W8, W9
	0x03A0BEA0 LDR X30, [X31], #0x10
	0x03A0BEA4 RET
	0x03A0BEA8 BL 0x1C16F20
	0x03A0BEAC FMOV D1, -0.5
	0x03A0BEB0 FMOV D2, 0.5
	0x03A0BEB4 FCMP D0, 0x0
	0x03A0BEB8 MOVZ X8, 0x7FF00000
	0x03A0BEBC FADD D1, D0, D1
	0x03A0BEC0 FADD D0, D0, D2
	0x03A0BEC4 FMOV D2, X8
	0x03A0BEC8 FCSEL D0, D1, D0, MI
	0x03A0BECC FCVTZS X8, D0
	0x03A0BED0 FCMP D0, D2
	0x03A0BED4 MOVZ X9, 0x80000000
	0x03A0BED8 CSEL X0, X9, X8, EQ
	0x03A0BEDC RET
	0x03A0BEE0 SUB X31, X31, 0x130
	0x03A0BEE4 STR X29, [X31 + 0xF0]
	0x03A0BEE8 STP X30, X23, [X31 + 0x100]
	0x03A0BEEC STP X22, X21, [X31 + 0x110]
	0x03A0BEF0 STP X20, X19, [X31 + 0x120]
	0x03A0BEF4 MOV X20, X1
	0x03A0BEF8 MOV X19, X0
	0x03A0BEFC BL 0x3A0B558
	0x03A0BF00 CBZ X20, 0x3A0C0D0
	0x03A0BF04 MOV X21, X0
	0x03A0BF08 CBZ X0, 0x3A0BFA4
	0x03A0BF0C LDR X22, [X20 + 0x108]
	0x03A0BF10 CBZ X22, 0x3A0BF64
	0x03A0BF14 CMP X22, X21
	0x03A0BF18 B.EQ 0x3A0BF64
	0x03A0BF1C ADD X23, X20, 0x70
	0x03A0BF20 LDP V1, V0, [X23 + 0x10]
	0x03A0BF24 LDR V2, [X23]
	0x03A0BF28 ADD X3, X31, 0x90
	0x03A0BF2C MOV X0, X19
	0x03A0BF30 MOV X1, X20
	0x03A0BF34 MOV X2, X22
	0x03A0BF38 STP V1, V0, [X31 + 0xA0]
	0x03A0BF3C STR V2, [X31 + 0x9]
	0x03A0BF40 BL 0x3A09880
	0x03A0BF44 MOV X0, X19
	0x03A0BF48 MOV X1, X20
	0x03A0BF4C MOV X2, X22
	0x03A0BF50 BL 0x3A06868
	0x03A0BF54 LDR X22, [X20 + 0x108]
	0x03A0BF58 CBZ X22, 0x3A0BF64
	0x03A0BF5C CMP X22, X21
	0x03A0BF60 B.NE 0x3A0BF20
	0x03A0BF64 LDR W8, [X20 + 0xEC]
	0x03A0BF68 ADDS W31, W8, 0x1
	0x03A0BF6C B.EQ 0x3A0BFD8
	0x03A0BF70 TBNZ X8, 0x1F, 0x3A0BFE4
	0x03A0BF74 LDR W8, [X21 + 0xEC]
	0x03A0BF78 TBNZ X8, 0x1F, 0x3A0C044
	0x03A0BF7C LDP V1, V0, [X20 + 0x80]
	0x03A0BF80 LDR V2, [X20 + 0x7]
	0x03A0BF84 ADD X3, X31, 0x60
	0x03A0BF88 MOV X0, X19
	0x03A0BF8C MOV X1, X20
	0x03A0BF90 MOV X2, X21
	0x03A0BF94 STP V1, V0, [X31 + 0x70]
	0x03A0BF98 STR V2, [X31 + 0x6]
	0x03A0BF9C BL 0x3A0A178
	0x03A0BFA0 B 0x3A0C034
	0x03A0BFA4 LDR W8, [X20 + 0xEC]
	0x03A0BFA8 TBNZ X8, 0x1F, 0x3A0BFCC
	0x03A0BFAC LDP V1, V0, [X20 + 0x80]
	0x03A0BFB0 LDR V2, [X20 + 0x7]
	0x03A0BFB4 ADD X2, X31, 0xC0
	0x03A0BFB8 MOV X0, X19
	0x03A0BFBC MOV X1, X20
	0x03A0BFC0 STP V1, V0, [X31 + 0xD0]
	0x03A0BFC4 STR V2, [X31 + 0xC]
	0x03A0BFC8 BL 0x3A09454
	0x03A0BFCC MOV X0, X19
	0x03A0BFD0 MOV X1, X20
	0x03A0BFD4 B 0x3A0C0B8
	0x03A0BFD8 LDR W8, [X21 + 0xEC]
	0x03A0BFDC ADDS W31, W8, 0x1
	0x03A0BFE0 B.EQ 0x3A0C034
	0x03A0BFE4 LDR W8, [X20 + 0xE0]
	0x03A0BFE8 CBZ W8, 0x3A0C074
	0x03A0BFEC ADRP X0, 0x749000
	0x03A0BFF0 LDR X0, [X0 + 0x1C8]
	0x03A0BFF4 BL 0x1C16D08
	0x03A0BFF8 BL 0x1C16F10
	0x03A0BFFC MOV X19, X0
	0x03A0C000 ADRP X0, 0x748000
	0x03A0C004 LDR X0, [X0 + 0x3B8]
	0x03A0C008 BL 0x1C16D08
	0x03A0C00C MOV X1, X0
	0x03A0C010 MOV X0, X19
	0x03A0C014 MOV X2, X31
	0x03A0C018 BL 0x3A130EC
	0x03A0C01C ADRP X0, 0x748000
	0x03A0C020 LDR X0, [X0 + 0x3C0]
	0x03A0C024 BL 0x1C16D08
	0x03A0C028 MOV X1, X0
	0x03A0C02C MOV X0, X19
	0x03A0C030 BL 0x1C16DEC
	0x03A0C034 MOV X0, X19
	0x03A0C038 MOV X1, X20
	0x03A0C03C BL 0x3A0693C
	0x03A0C040 B 0x3A0C0B0
	0x03A0C044 LDR W8, [X20 + 0xE0]
	0x03A0C048 CBNZ W8, 0x3A0BFEC
	0x03A0C04C LDP V1, V0, [X20 + 0x80]
	0x03A0C050 LDR V2, [X20 + 0x7]
	0x03A0C054 ADD X2, X31, 0x30
	0x03A0C058 MOV X0, X19
	0x03A0C05C MOV X1, X20
	0x03A0C060 STP V1, V0, [X31 + 0x40]
	0x03A0C064 STR V2, [X31 + 0x3]
	0x03A0C068 BL 0x3A09454
	0x03A0C06C MOVN W8, 0x0
	0x03A0C070 STR W8, [X20 + 0xEC]
	0x03A0C074 MOV X0, X19
	0x03A0C078 MOV X1, X20
	0x03A0C07C BL 0x3A0693C
	0x03A0C080 LDR W8, [X21 + 0xEC]
	0x03A0C084 TBNZ X8, 0x1F, 0x3A0C0B0
	0x03A0C088 LDP V1, V0, [X20 + 0x80]
	0x03A0C08C LDR V2, [X20 + 0x7]
	0x03A0C090 ADD X2, X31, 0x0
	0x03A0C094 MOV X0, X19
	0x03A0C098 MOV X1, X21
	0x03A0C09C STP V1, V0, [X31 + 0x10]
	0x03A0C0A0 STR V2, [X31]
	0x03A0C0A4 BL 0x3A09454
	0x03A0C0A8 MOVN W8, 0x0
	0x03A0C0AC STR W8, [X21 + 0xEC]
	0x03A0C0B0 MOV X0, X19
	0x03A0C0B4 MOV X1, X21
	0x03A0C0B8 LDP X20, X19, [X31 + 0x120]
	0x03A0C0BC LDP X22, X21, [X31 + 0x110]
	0x03A0C0C0 LDP X30, X23, [X31 + 0x100]
	0x03A0C0C4 LDR X29, [X31 + 0xF0]
	0x03A0C0C8 ADD X31, X31, 0x130
	0x03A0C0CC B 0x3A0693C
	0x03A0C0D0 BL 0x1C16F20
	0x03A0C0D4 SUB X31, X31, 0x50
	0x03A0C0D8 STR X30, [X31 + 0x20]
	0x03A0C0DC STP X22, X21, [X31 + 0x30]
	0x03A0C0E0 STP X20, X19, [X31 + 0x40]
	0x03A0C0E4 ADRP X20, 0x9D5000
	0x03A0C0E8 LDRB W8, [X20 + 0xF8C]
	0x03A0C0EC MOV X19, X0
	0x03A0C0F0 TBNZ X8, 0x0, 0x3A0C138
	0x03A0C0F4 ADRP X0, 0x748000
	0x03A0C0F8 LDR X0, [X0 + 0x3C8]
	0x03A0C0FC BL 0x1C16CF4
	0x03A0C100 ADRP X0, 0x748000
	0x03A0C104 LDR X0, [X0 + 0x3D0]
	0x03A0C108 BL 0x1C16CF4
	0x03A0C10C ADRP X0, 0x748000
	0x03A0C110 LDR X0, [X0 + 0x3D8]
	0x03A0C114 BL 0x1C16CF4
	0x03A0C118 ADRP X0, 0x748000
	0x03A0C11C LDR X0, [X0 + 0x3E0]
	0x03A0C120 BL 0x1C16CF4
	0x03A0C124 ADRP X0, 0x748000
	0x03A0C128 LDR X0, [X0 + 0x3E8]
	0x03A0C12C BL 0x1C16CF4
	0x03A0C130 MOVZ W8, 0x1
	0x03A0C134 STRB W8, [X20 + 0xF8C]
	0x03A0C138 STP X31, X31, [X31 + 0x8]
	0x03A0C13C STR X31, [X31 + 0x18]
	0x03A0C140 CBZ X19, 0x3A0C1BC
	0x03A0C144 ADRP X8, 0x748000
	0x03A0C148 LDR X8, [X8 + 0x3E0]
	0x03A0C14C ADRP X21, 0x748000
	0x03A0C150 ADRP X22, 0x748000
	0x03A0C154 ADRP X20, 0x748000
	0x03A0C158 LDR X1, [X8]
	0x03A0C15C LDR X21, [X21 + 0x3D0]
	0x03A0C160 LDR X22, [X22 + 0x3E8]
	0x03A0C164 LDR X20, [X20 + 0x3C8]
	0x03A0C168 ADD X8, X31, 0x8
	0x03A0C16C MOV X0, X19
	0x03A0C170 BL 0x301CB58
	0x03A0C174 LDR X1, [X21]
	0x03A0C178 ADD X0, X31, 0x8
	0x03A0C17C BL 0x2BC4350
	0x03A0C180 TBZ X0, 0x0, 0x3A0C198
	0x03A0C184 LDR X0, [X31 + 0x18]
	0x03A0C188 CBZ X0, 0x3A0C1B8
	0x03A0C18C LDR X1, [X22]
	0x03A0C190 BL 0x2FE67C8
	0x03A0C194 B 0x3A0C174
	0x03A0C198 LDR X1, [X20]
	0x03A0C19C ADD X0, X31, 0x8
	0x03A0C1A0 BL 0x2BC434C
	0x03A0C1A4 LDP X20, X19, [X31 + 0x40]
	0x03A0C1A8 LDP X22, X21, [X31 + 0x30]
	0x03A0C1AC LDR X30, [X31 + 0x20]
	0x03A0C1B0 ADD X31, X31, 0x50
	0x03A0C1B4 RET
	0x03A0C1B8 BL 0x1C16F20
	0x03A0C1BC BL 0x1C16F20
	0x03A0C1C0 B 0x3A0C1C8
	0x03A0C1C4 B 0x3A0C1C8
	0x03A0C1C8 MOV X19, X0
	0x03A0C1CC CMP W1, 0x1
	0x03A0C1D0 B.NE 0x3A0C204
	0x03A0C1D4 MOV X0, X19
	0x03A0C1D8 BL 0x3EB1AD0
	0x03A0C1DC LDR X20, [X0]
	0x03A0C1E0 BL 0x3EB1AE0
	0x03A0C1E4 ADRP X8, 0x748000
	0x03A0C1E8 LDR X8, [X8 + 0x3C8]
	0x03A0C1EC ADD X0, X31, 0x8
	0x03A0C1F0 LDR X1, [X8]
	0x03A0C1F4 BL 0x2BC434C
	0x03A0C1F8 CBZ X20, 0x3A0C1A4
	0x03A0C1FC MOV X0, X20
	0x03A0C200 BL 0x1C16F18
	0x03A0C204 MOV X20, X31
	0x03A0C208 B 0x3A0C210
	0x03A0C20C MOV X19, X0
	0x03A0C210 ADRP X8, 0x748000
	0x03A0C214 LDR X8, [X8 + 0x3C8]
	0x03A0C218 LDR X1, [X8]
	0x03A0C21C ADD X0, X31, 0x8
	0x03A0C220 BL 0x2BC434C
	0x03A0C224 CBNZ X20, 0x3A0C230
	0x03A0C228 MOV X0, X19
	0x03A0C22C BL 0x1D2C690
	0x03A0C230 MOV X0, X20
	0x03A0C234 BL 0x1C16F18
	0x03A0C238 BL 0x1990590
	0x03A0C23C STR X30, [X31 - 0x10]!
	0x03A0C240 BL 0x3A0C254
	0x03A0C244 FCMP D0, 0x0
	0x03A0C248 CSET W0, GE
	0x03A0C24C LDR X30, [X31], #0x10
	0x03A0C250 RET
	0x03A0C254 SUB X31, X31, 0x80
	0x03A0C258 STP D11, D10, [X31 + 0x30]
	0x03A0C25C STP D9, D8, [X31 + 0x40]
	0x03A0C260 STP X30, X23, [X31 + 0x50]
	0x03A0C264 STP X22, X21, [X31 + 0x60]
	0x03A0C268 STP X20, X19, [X31 + 0x70]
	0x03A0C26C ADRP X20, 0x9D5000
	0x03A0C270 LDRB W8, [X20 + 0xF97]
	0x03A0C274 MOV X19, X0
	0x03A0C278 TBNZ X8, 0x0, 0x3A0C29C
	0x03A0C27C ADRP X0, 0x748000
	0x03A0C280 LDR X0, [X0 + 0x200]
	0x03A0C284 BL 0x1C16CF4
	0x03A0C288 ADRP X0, 0x748000
	0x03A0C28C LDR X0, [X0 + 0x210]
	0x03A0C290 BL 0x1C16CF4
	0x03A0C294 MOVZ W8, 0x1
	0x03A0C298 STRB W8, [X20 + 0xF97]
	0x03A0C29C CBZ X19, 0x3A0C37C
	0x03A0C2A0 LDR W22, [X19 + 0x18]
	0x03A0C2A4 FMOV D0, X31
	0x03A0C2A8 CMP W22, 0x3
	0x03A0C2AC B.LT 0x3A0C360
	0x03A0C2B0 ADRP X23, 0x748000
	0x03A0C2B4 LDR X23, [X23 + 0x210]
	0x03A0C2B8 MOV W8, W31
	0x03A0C2BC SUB W20, W22, 0x1
	0x03A0C2C0 FMOV D8, X31
	0x03A0C2C4 LDR X2, [X23]
	0x03A0C2C8 MOV W21, W8
	0x03A0C2CC ADD X8, X31, 0x0
	0x03A0C2D0 MOV X0, X19
	0x03A0C2D4 MOV W1, W20
	0x03A0C2D8 BL 0x2FE4360
	0x03A0C2DC LDR X2, [X23]
	0x03A0C2E0 LDR V9, [X31 + 0x8]
	0x03A0C2E4 ADD X8, X31, 0x0
	0x03A0C2E8 MOV X0, X19
	0x03A0C2EC MOV W1, W21
	0x03A0C2F0 BL 0x2FE4360
	0x03A0C2F4 LDR X2, [X23]
	0x03A0C2F8 LDR V10, [X31 + 0x8]
	0x03A0C2FC ADD X8, X31, 0x0
	0x03A0C300 MOV X0, X19
	0x03A0C304 MOV W1, W20
	0x03A0C308 BL 0x2FE4360
	0x03A0C30C LDR X2, [X23]
	0x03A0C310 LDR V11, [X31 + 0x10]
	0x03A0C314 ADD X8, X31, 0x0
	0x03A0C318 MOV X0, X19
	0x03A0C31C MOV W1, W21
	0x03A0C320 BL 0x2FE4360
	0x03A0C324 LDR V0, [X31 + 0x10]
	0x03A0C328 SCVTF D1, D9
	0x03A0C32C SCVTF D2, D10
	0x03A0C330 SCVTF D3, D11
	0x03A0C334 SCVTF D0, D0
	0x03A0C338 FADD D1, D1, D2
	0x03A0C33C FSUB D0, D3, D0
	0x03A0C340 ADD W8, W21, 0x1
	0x03A0C344 FMUL D0, D1, D0
	0x03A0C348 CMP W22, W8
	0x03A0C34C FADD D8, D8, D0
	0x03A0C350 MOV W20, W21
	0x03A0C354 B.NE 0x3A0C2C4
	0x03A0C358 FMOV D0, -0.5
	0x03A0C35C FMUL D0, D8, D0
	0x03A0C360 LDP X20, X19, [X31 + 0x70]
	0x03A0C364 LDP X22, X21, [X31 + 0x60]
	0x03A0C368 LDP X30, X23, [X31 + 0x50]
	0x03A0C36C LDP D9, D8, [X31 + 0x40]
	0x03A0C370 LDP D11, D10, [X31 + 0x30]
	0x03A0C374 ADD X31, X31, 0x80
	0x03A0C378 RET
	0x03A0C37C BL 0x1C16F20
	0x03A0C380 STR X30, [X31 - 0x10]!
	0x03A0C384 MOV W0, W31
	0x03A0C388 CBZ X1, 0x3A0C3A4
	0x03A0C38C MOV X8, X1
	0x03A0C390 CBZ X8, 0x3A0C3AC
	0x03A0C394 LDR X8, [X8 + 0x48]
	0x03A0C398 ADD W0, W0, 0x1
	0x03A0C39C CMP X8, X1
	0x03A0C3A0 B.NE 0x3A0C390
	0x03A0C3A4 LDR X30, [X31], #0x10
	0x03A0C3A8 RET
	0x03A0C3AC BL 0x1C16F20
	0x03A0C3B0 SUB X31, X31, 0x60
	0x03A0C3B4 STR X30, [X31 + 0x30]
	0x03A0C3B8 STP X22, X21, [X31 + 0x40]
	0x03A0C3BC STP X20, X19, [X31 + 0x50]
	0x03A0C3C0 ADRP X19, 0x9D5000
	0x03A0C3C4 ADRP X22, 0x748000
	0x03A0C3C8 LDRB W8, [X19 + 0xF8F]
	0x03A0C3CC LDR X22, [X22 + 0x388]
	0x03A0C3D0 MOV W21, W2

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 896
	014 Move [X31+888], X1
	015 Compare X1, 0
	016 JumpIfEqual {583}
	017 Move X20, [X1+24]
	018 Move X21, [X1+120]
	019 Move W26, [X1+224]
	020 Move X24, X1
	021 Move X19, X0
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CSEL not yet implemented."
	024 NotImplemented "Instruction CSEL not yet implemented."
	025 NotImplemented "Instruction CSET not yet implemented."
	026 Move [X31+40], X8
	027 Move [X31+48], X9
	028 Move X8, X1
	029 Move X22, X8
	030 Move X8, [X8+256]
	031 Compare X8, 0
	032 JumpIfEqual {37}
	033 Move X9, [X8+176]
	034 Compare X9, 0
	035 JumpIfEqual {29}
	036 Move X0, X31
	037 Move X1, X22
	038 Call Clipper.GetMaximaPair, X0, X1
	039 Move X8, [X19+72]
	040 Move [X31+32], X0
	041 Compare X8, 0
	042 JumpIfEqual {50}
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X9, [X24+24]
	045 Move X10, [X8+16]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X8, [X8+24]
	048 Compare X8, 0
	049 JumpIfNotEqual {45}
	050 Move X21, X31
	051 Move X9, X8
	052 Move X8, [X8+24]
	053 Compare X8, 0
	054 JumpIfEqual {58}
	055 Move X10, [X8+16]
	056 Move X11, [X24+24]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X8, [X9+16]
	059 Move X10, [X22+120]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 NotImplemented "Instruction CSEL not yet implemented."
	062 Move X9, [X22+120]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CSEL not yet implemented."
	065 Add X8, X31, 792
	066 Add X9, X31, 840
	067 Add X10, X31, 496
	068 Add X11, X31, 544
	069 Move X23, X31
	070 Add X28, X8, 32
	071 Add X29, X9, 32
	072 Add X9, X10, 32
	073 Add X8, X11, 32
	074 Move TEMP, 0
	075 Not TEMP
	076 Move X20, TEMP
	077 Move [X31+16], X8
	078 Move [X31+24], X9
	079 And W31, W27, 1
	080 Move W8, 272
	081 Move W9, 264
	082 NotImplemented "Instruction CSEL not yet implemented."
	083 Move [X31+56], X24
	084 Move X24, [X24]
	085 Compare X24, 0
	086 JumpIfEqual {286}
	087 Compare X21, 0
	088 JumpIfEqual {145}
	089 Move TEMP, X27
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {119}
	093 Move X8, [X21+16]
	094 Move X9, [X24+72]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X1, [X31+888]
	097 Compare X1, 0
	098 JumpIfEqual {583}
	099 Compare W26, 0
	100 JumpIfEqual {116}
	101 Move W9, [X1+236]
	102 Move TEMP, X9
	103 And TEMP, TEMP, -2147483648
	104 Compare TEMP, -2147483648
	105 JumpIfEqual {116}
	106 Move X9, [X1+32]
	107 Add X2, X31, 840
	108 Move X0, X19
	109 Move [X29], X31
	110 Move [X29+8], X31
	111 Move [X31+840], X20
	112 Move [X31+848], X8
	113 Move [X31+856], X9
	114 Move [X31+864], X31
	115 Call Clipper.AddOutPt, X0, X1, X2
	116 Move X21, [X21+24]
	117 Compare X21, 0
	118 JumpIfNotEqual {93}
	119 Move X8, [X21+16]
	120 Move X9, [X24+72]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move X1, [X31+888]
	123 Compare X1, 0
	124 JumpIfEqual {583}
	125 Compare W26, 0
	126 JumpIfEqual {142}
	127 Move W9, [X1+236]
	128 Move TEMP, X9
	129 And TEMP, TEMP, -2147483648
	130 Compare TEMP, -2147483648
	131 JumpIfEqual {142}
	132 Move X9, [X1+32]
	133 Add X2, X31, 792
	134 Move X0, X19
	135 Move [X28], X31
	136 Move [X28+8], X31
	137 Move [X31+792], X20
	138 Move [X31+800], X8
	139 Move [X31+808], X9
	140 Move [X31+816], X31
	141 Call Clipper.AddOutPt, X0, X1, X2
	142 Move X21, [X21+32]
	143 Compare X21, 0
	144 JumpIfNotEqual {119}
	145 Move X8, [X24+72]
	146 Move TEMP, X27
	147 And TEMP, TEMP, 1
	148 Compare TEMP, 1
	149 JumpIfNotEqual {152}
	150 Move X9, [X31+40]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move X9, [X31+48]
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Move X1, [X31+888]
	155 Compare X1, 0
	156 JumpIfEqual {583}
	157 Move X9, [X1+120]
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move X8, [X1+256]
	160 Compare X8, 0
	161 JumpIfEqual {165}
	162 Move V0, [X24+208]
	163 Move V1, [X8+208]
	164 NotImplemented "Instruction FCMP not yet implemented."
	165 Compare W26, 0
	166 JumpIfEqual {236}
	167 Move W8, [X1+236]
	168 Move TEMP, X8
	169 And TEMP, TEMP, -2147483648
	170 Compare TEMP, -2147483648
	171 JumpIfEqual {236}
	172 Add X8, X24, 64
	173 Move V1, [X8+16]
	174 Move V0, [X8+32]
	175 Move V2, [X8]
	176 Add X2, X31, 736
	177 Move X0, X19
	178 Move [X31+752], V1
	179 Move [X31+760], V0
	180 Move [X31+46], V2
	181 Call Clipper.AddOutPt, X0, X1, X2
	182 Move X25, [X19+80]
	183 Move X23, X0
	184 Compare X25, 0
	185 JumpIfEqual {223}
	186 Move W8, [X25+236]
	187 Move TEMP, X8
	188 And TEMP, TEMP, -2147483648
	189 Compare TEMP, -2147483648
	190 JumpIfEqual {220}
	191 Move X8, [X31+888]
	192 Compare X8, 0
	193 JumpIfEqual {583}
	194 Move X9, [X8+24]
	195 Move X8, [X8+120]
	196 Move X10, [X25+24]
	197 Move X11, [X25+120]
	198 NotImplemented "Instruction CMP not yet implemented."
	199 NotImplemented "Instruction CSEL not yet implemented."
	200 NotImplemented "Instruction CSEL not yet implemented."
	201 NotImplemented "Instruction CMP not yet implemented."
	202 NotImplemented "Instruction CSEL not yet implemented."
	203 NotImplemented "Instruction CSEL not yet implemented."
	204 NotImplemented "Instruction CMP not yet implemented."
	205 NotImplemented "Instruction CMP not yet implemented."
	206 Move X0, X19
	207 Move X1, X25
	208 Call Clipper.GetLastOutPt, X0, X1
	209 Move V0, [X25+112]
	210 Move V1, [X25+128]
	211 Move V2, [X25+9]
	212 Move X1, X0
	213 Add X3, X31, 688
	214 Move X0, X19
	215 Move X2, X23
	216 Move [X31+688], V0
	217 Move [X31+696], V1
	218 Move [X31+45], V2
	219 Call Clipper.AddJoin, X0, X1, X2, X3
	220 Move X25, [X25+280]
	221 Compare X25, 0
	222 JumpIfNotEqual {186}
	223 Move X8, [X31+888]
	224 Compare X8, 0
	225 JumpIfEqual {583}
	226 Move V1, [X8+32]
	227 Move V0, [X8+48]
	228 Move V2, [X8+1]
	229 Add X2, X31, 640
	230 Move X0, X19
	231 Move X1, X23
	232 Move [X31+656], V1
	233 Move [X31+664], V0
	234 Move [X31+40], V2
	235 Call Clipper.AddGhostJoin, X0, X1, X2
	236 Move X8, [X31+56]
	237 NotImplemented "Instruction CMP not yet implemented."
	238 Move X8, [X31+32]
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Move X2, [X31+888]
	241 Compare X2, 0
	242 JumpIfEqual {583}
	243 Move X8, [X24+72]
	244 Move X9, [X2+80]
	245 Move TEMP, X27
	246 And TEMP, TEMP, 1
	247 Compare TEMP, 1
	248 JumpIfNotEqual {260}
	249 Move X10, [X31+16]
	250 Add X3, X31, 544
	251 Move X0, X19
	252 Move X1, X2
	253 Move [X10], X31
	254 Move [X10+8], X31
	255 Move [X31+544], X20
	256 Move [X31+552], X8
	257 Move [X31+560], X9
	258 Move [X31+568], X31
	259 Move X2, X24
	260 Move X10, [X31+24]
	261 Add X3, X31, 496
	262 Move X0, X19
	263 Move X1, X24
	264 Move [X10], X31
	265 Move [X10+8], X31
	266 Move [X31+496], X20
	267 Move [X31+504], X8
	268 Move [X31+512], X9
	269 Move [X31+520], X31
	270 Call Clipper.IntersectEdges, X0, X1, X2, X3
	271 And W31, W27, 1
	272 Move W8, 272
	273 Move W9, 264
	274 NotImplemented "Instruction CSEL not yet implemented."
	275 Move X1, [X31+888]
	276 Move X25, [X24]
	277 Move X0, X19
	278 Move X2, X24
	279 Call ClipperBase.SwapPositionsInAEL, X0, X1, X2
	280 Move X24, X25
	281 Compare X25, 0
	282 JumpIfNotEqual {87}
	283 Move X1, [X31+888]
	284 Compare X1, 0
	285 JumpIfNotEqual {289}
	286 Move X1, [X31+56]
	287 Compare X1, 0
	288 JumpIfEqual {583}
	289 Move X8, [X1+256]
	290 Compare X8, 0
	291 JumpIfEqual {366}
	292 Move X8, [X8+176]
	293 Compare X8, 0
	294 JumpIfNotEqual {366}
	295 Add X1, X31, 888
	296 Move X0, X19
	297 Call ClipperBase.UpdateEdgeIntoAEL, X0, X1
	298 Move X24, [X31+888]
	299 Compare X24, 0
	300 JumpIfEqual {583}
	301 Move W8, [X24+236]
	302 Move TEMP, X8
	303 And TEMP, TEMP, -2147483648
	304 Compare TEMP, -2147483648
	305 JumpIfEqual {319}
	306 Move V1, [X24+32]
	307 Move V0, [X24+48]
	308 Move V2, [X24+1]
	309 Add X2, X31, 448
	310 Move X0, X19
	311 Move X1, X24
	312 Move [X31+464], V1
	313 Move [X31+472], V0
	314 Move [X31+28], V2
	315 Call Clipper.AddOutPt, X0, X1, X2
	316 Move X24, [X31+888]
	317 Compare X24, 0
	318 JumpIfEqual {583}
	319 Move X8, [X24+24]
	320 Move X9, [X24+120]
	321 NotImplemented "Instruction CMP not yet implemented."
	322 NotImplemented "Instruction CSEL not yet implemented."
	323 NotImplemented "Instruction CSEL not yet implemented."
	324 NotImplemented "Instruction CSET not yet implemented."
	325 Move [X31+40], X8
	326 Move [X31+48], X10
	327 Move X1, [X31+888]
	328 Compare X1, 0
	329 JumpIfEqual {583}
	330 Move W8, [X1+236]
	331 Move X20, [X31+32]
	332 Move TEMP, X8
	333 And TEMP, TEMP, -2147483648
	334 Compare TEMP, -2147483648
	335 JumpIfEqual {347}
	336 Move V1, [X1+128]
	337 Move V0, [X1+144]
	338 Move V2, [X1+7]
	339 Add X3, X31, 592
	340 Move X0, X19
	341 Move X2, X20
	342 Move [X31+608], V1
	343 Move [X31+616], V0
	344 Move [X31+37], V2
	345 Call Clipper.AddLocalMaxPoly, X0, X1, X2, X3
	346 Move X1, [X31+888]
	347 Move X0, X19
	348 Call ClipperBase.DeleteFromAEL, X0, X1
	349 Move X0, X19
	350 Move X1, X20
	351 Call ClipperBase.DeleteFromAEL, X0, X1
	352 Add X31, X31, 896
	353 Move X20, [X31+80]
	354 Move X19, [X31+88]
	355 Move X22, [X31+64]
	356 Move X21, [X31+72]
	357 Move X24, [X31+48]
	358 Move X23, [X31+56]
	359 Move X26, [X31+32]
	360 Move X25, [X31+40]
	361 Move X28, [X31+16]
	362 Move X27, [X31+24]
	363 Move X29, [X31+96]
	364 Move X30, [X31+104]
	365 Return 
	366 Compare X23, 0
	367 JumpIfNotEqual {432}
	368 Move W8, [X1+236]
	369 Move TEMP, X8
	370 And TEMP, TEMP, -2147483648
	371 Compare TEMP, -2147483648
	372 JumpIfEqual {432}
	373 Move X0, X19
	374 Call Clipper.GetLastOutPt, X0, X1
	375 Move X21, [X19+80]
	376 Move X20, X0
	377 Compare X21, 0
	378 JumpIfEqual {416}
	379 Move W8, [X21+236]
	380 Move TEMP, X8
	381 And TEMP, TEMP, -2147483648
	382 Compare TEMP, -2147483648
	383 JumpIfEqual {413}
	384 Move X8, [X31+888]
	385 Compare X8, 0
	386 JumpIfEqual {583}
	387 Move X9, [X8+24]
	388 Move X8, [X8+120]
	389 Move X10, [X21+24]
	390 Move X11, [X21+120]
	391 NotImplemented "Instruction CMP not yet implemented."
	392 NotImplemented "Instruction CSEL not yet implemented."
	393 NotImplemented "Instruction CSEL not yet implemented."
	394 NotImplemented "Instruction CMP not yet implemented."
	395 NotImplemented "Instruction CSEL not yet implemented."
	396 NotImplemented "Instruction CSEL not yet implemented."
	397 NotImplemented "Instruction CMP not yet implemented."
	398 NotImplemented "Instruction CMP not yet implemented."
	399 Move X0, X19
	400 Move X1, X21
	401 Call Clipper.GetLastOutPt, X0, X1
	402 Move V0, [X21+112]
	403 Move V1, [X21+128]
	404 Move V2, [X21+9]
	405 Move X1, X0
	406 Add X3, X31, 400
	407 Move X0, X19
	408 Move X2, X20
	409 Move [X31+400], V0
	410 Move [X31+408], V1
	411 Move [X31+27], V2
	412 Call Clipper.AddJoin, X0, X1, X2, X3
	413 Move X21, [X21+280]
	414 Compare X21, 0
	415 JumpIfNotEqual {379}
	416 Move X8, [X31+888]
	417 Compare X8, 0
	418 JumpIfEqual {583}
	419 Move V1, [X8+128]
	420 Move V0, [X8+144]
	421 Move V2, [X8+7]
	422 Add X2, X31, 352
	423 Move X0, X19
	424 Move X1, X20
	425 Move [X31+368], V1
	426 Move [X31+376], V0
	427 Move [X31+22], V2
	428 Call Clipper.AddGhostJoin, X0, X1, X2
	429 Move X1, [X31+888]
	430 Compare X1, 0
	431 JumpIfEqual {583}
	432 Move X9, [X1+256]
	433 Move W8, [X1+236]
	434 Compare X9, 0
	435 JumpIfEqual {510}
	436 Move TEMP, X8
	437 And TEMP, TEMP, -2147483648
	438 Compare TEMP, -2147483648
	439 JumpIfEqual {580}
	440 Move V1, [X1+128]
	441 Move V0, [X1+144]
	442 Move V2, [X1+7]
	443 Add X2, X31, 304
	444 Move X0, X19
	445 Move [X31+320], V1
	446 Move [X31+328], V0
	447 Move [X31+19], V2
	448 Call Clipper.AddOutPt, X0, X1, X2
	449 Move X20, X0
	450 Add X1, X31, 888
	451 Move X0, X19
	452 Call ClipperBase.UpdateEdgeIntoAEL, X0, X1
	453 Move X0, [X31+888]
	454 Compare X0, 0
	455 JumpIfEqual {583}
	456 Move W8, [X0+224]
	457 Compare W8, 0
	458 JumpIfEqual {352}
	459 Move X21, [X0+264]
	460 Move X22, [X0+272]
	461 Compare X22, 0
	462 JumpIfEqual {525}
	463 Move X8, [X22+72]
	464 Move X9, [X0+24]
	465 NotImplemented "Instruction CMP not yet implemented."
	466 Move X8, [X22+80]
	467 Move X9, [X0+32]
	468 NotImplemented "Instruction CMP not yet implemented."
	469 Move W9, [X22+224]
	470 Compare W9, 0
	471 JumpIfEqual {525}
	472 Move W9, [X22+236]
	473 Move TEMP, X9
	474 And TEMP, TEMP, -2147483648
	475 Compare TEMP, -2147483648
	476 JumpIfEqual {525}
	477 Move X9, [X22+128]
	478 NotImplemented "Instruction CMP not yet implemented."
	479 Move W2, [X19+64]
	480 Move X1, X22
	481 Call ClipperBase.SlopesEqual, X0, X1, X2
	482 Move TEMP, X0
	483 And TEMP, TEMP, 1
	484 Compare TEMP, 1
	485 JumpIfNotEqual {525}
	486 Move X8, [X31+888]
	487 Compare X8, 0
	488 JumpIfEqual {583}
	489 Move V1, [X8+32]
	490 Move V0, [X8+48]
	491 Move V2, [X8+1]
	492 Add X2, X31, 256
	493 Move X0, X19
	494 Move X1, X22
	495 Move [X31+272], V1
	496 Move [X31+280], V0
	497 Move [X31+16], V2
	498 Call Clipper.AddOutPt, X0, X1, X2
	499 Move X8, [X31+888]
	500 Compare X8, 0
	501 JumpIfEqual {583}
	502 Move V1, [X8+128]
	503 Move V0, [X8+144]
	504 Move V2, [X8+7]
	505 Move X2, X0
	506 Add X3, X31, 208
	507 Move [X31+224], V1
	508 Move [X31+232], V0
	509 Move [X31+13], V2
	510 Move TEMP, X8
	511 And TEMP, TEMP, -2147483648
	512 Compare TEMP, -2147483648
	513 JumpIfEqual {524}
	514 Move V1, [X1+128]
	515 Move V0, [X1+144]
	516 Move V2, [X1+7]
	517 Add X2, X31, 64
	518 Move X0, X19
	519 Move [X31+80], V1
	520 Move [X31+88], V0
	521 Move [X31+4], V2
	522 Call Clipper.AddOutPt, X0, X1, X2
	523 Move X1, [X31+888]
	524 Move X0, X19
	525 Compare X21, 0
	526 JumpIfEqual {352}
	527 Move X0, [X31+888]
	528 Compare X0, 0
	529 JumpIfEqual {583}
	530 Move X8, [X21+72]
	531 Move X9, [X0+24]
	532 NotImplemented "Instruction CMP not yet implemented."
	533 Move X8, [X21+80]
	534 Move X9, [X0+32]
	535 NotImplemented "Instruction CMP not yet implemented."
	536 Move W9, [X21+224]
	537 Compare W9, 0
	538 JumpIfEqual {352}
	539 Move W9, [X21+236]
	540 Move TEMP, X9
	541 And TEMP, TEMP, -2147483648
	542 Compare TEMP, -2147483648
	543 JumpIfEqual {352}
	544 Move X9, [X21+128]
	545 NotImplemented "Instruction CMP not yet implemented."
	546 Move W2, [X19+64]
	547 Move X1, X21
	548 Call ClipperBase.SlopesEqual, X0, X1, X2
	549 Move TEMP, X0
	550 And TEMP, TEMP, 1
	551 Compare TEMP, 1
	552 JumpIfNotEqual {352}
	553 Move X8, [X31+888]
	554 Compare X8, 0
	555 JumpIfEqual {583}
	556 Move V1, [X8+32]
	557 Move V0, [X8+48]
	558 Move V2, [X8+1]
	559 Add X2, X31, 160
	560 Move X0, X19
	561 Move X1, X21
	562 Move [X31+176], V1
	563 Move [X31+184], V0
	564 Move [X31+10], V2
	565 Call Clipper.AddOutPt, X0, X1, X2
	566 Move X8, [X31+888]
	567 Compare X8, 0
	568 JumpIfEqual {583}
	569 Move V1, [X8+128]
	570 Move V0, [X8+144]
	571 Move V2, [X8+7]
	572 Move X2, X0
	573 Add X3, X31, 112
	574 Move [X31+128], V1
	575 Move [X31+136], V0
	576 Move [X31+7], V2
	577 Move X0, X19
	578 Move X1, X20
	579 Call Clipper.AddJoin, X0, X1, X2, X3
	580 Add X1, X31, 888
	581 Move X0, X19
	582 Call ClipperBase.UpdateEdgeIntoAEL, X0, X1
	583 Call 0x1C17F20

Method: UnityEngine.Rendering.Universal.TEdge GetNextInAEL(UnityEngine.Rendering.Universal.TEdge e, UnityEngine.Rendering.Universal.Direction Direction)

Disassembly:
	0x03A0C488 ADD X31, X31, 0x60
	0x03A0C48C RET
	0x03A0C490 BL 0x1C16F20
	0x03A0C494 STR X30, [X31 - 0x50]!
	0x03A0C498 STP X26, X25, [X31 + 0x10]
	0x03A0C49C STP X24, X23, [X31 + 0x20]
	0x03A0C4A0 STP X22, X21, [X31 + 0x30]
	0x03A0C4A4 STP X20, X19, [X31 + 0x40]
	0x03A0C4A8 ADRP X25, 0x9D5000
	0x03A0C4AC ADRP X26, 0x6E7000

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {11}
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move W8, 272
	006 Move W9, 264
	007 NotImplemented "Instruction CSEL not yet implemented."
	008 Move X0, [X1]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Boolean IsMinima(UnityEngine.Rendering.Universal.TEdge e)

Disassembly:
	0x03A0C4B0 LDRB W8, [X25 + 0xF90]
	0x03A0C4B4 LDR X26, [X26 + 0x5A8]
	0x03A0C4B8 MOV X20, X6
	0x03A0C4BC MOV X19, X5
	0x03A0C4C0 MOV X21, X4
	0x03A0C4C4 MOV X22, X3
	0x03A0C4C8 MOV X23, X2
	0x03A0C4CC MOV X24, X1
	0x03A0C4D0 TBNZ X8, 0x0, 0x3A0C4E8
	0x03A0C4D4 ADRP X0, 0x6E7000
	0x03A0C4D8 LDR X0, [X0 + 0x5A8]
	0x03A0C4DC BL 0x1C16CF4
	0x03A0C4E0 MOVZ W8, 0x1
	0x03A0C4E4 STRB W8, [X25 + 0xF90]
	0x03A0C4E8 LDR X0, [X26]
	0x03A0C4EC LDR W8, [X0 + 0xE0]
	0x03A0C4F0 CBNZ W8, 0x3A0C4F8

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {15}
	004 Move X8, [X1+248]
	005 Compare X8, 0
	006 JumpIfEqual {18}
	007 Move X8, [X8+256]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X8, [X1+240]
	010 Compare X8, 0
	011 JumpIfEqual {18}
	012 Move X8, [X8+256]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction CSET not yet implemented."
	015 Move W0, W31
	016 Move X30, [X31+16]
	017 Return X0
	018 Call 0x1C17F20

Method: System.Boolean IsMaxima(UnityEngine.Rendering.Universal.TEdge e, System.Double Y)

Disassembly:
	0x03A0C4F4 BL 0x1C16DFC
	0x03A0C4F8 CMP X24, X23
	0x03A0C4FC B.GE 0x3A0C524
	0x03A0C500 MOV X0, X24
	0x03A0C504 CMP X22, X21
	0x03A0C508 B.GE 0x3A0C54C
	0x03A0C50C MOV X1, X22
	0x03A0C510 MOV X2, X31
	0x03A0C514 BL 0x337EDFC
	0x03A0C518 STR X0, [X19]
	0x03A0C51C MOV X0, X23

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {10}
	003 Move V1, [X1+128]
	004 NotImplemented "Instruction SCVTF not yet implemented."
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 Move X8, [X1+256]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Return X0
	010 Move W0, W31
	011 Return X0

Method: System.Boolean IsIntermediate(UnityEngine.Rendering.Universal.TEdge e, System.Double Y)

Disassembly:
	0x03A0C520 B 0x3A0C544
	0x03A0C524 MOV X0, X23
	0x03A0C528 CMP X22, X21
	0x03A0C52C B.GE 0x3A0C564
	0x03A0C530 MOV X1, X22
	0x03A0C534 MOV X2, X31
	0x03A0C538 BL 0x337EDFC
	0x03A0C53C STR X0, [X19]
	0x03A0C540 MOV X0, X24
	0x03A0C544 MOV X1, X21
	0x03A0C548 B 0x3A0C57C
	0x03A0C54C MOV X1, X21
	0x03A0C550 MOV X2, X31
	0x03A0C554 BL 0x337EDFC

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {13}
	004 Move V1, [X1+128]
	005 NotImplemented "Instruction SCVTF not yet implemented."
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 Move X8, [X1+256]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CSET not yet implemented."
	010 Move W0, W31
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: UnityEngine.Rendering.Universal.TEdge GetMaximaPair(UnityEngine.Rendering.Universal.TEdge e)

Disassembly:
	0x03A0C414 STP V1, V0, [X31 + 0x10]
	0x03A0C418 STR V2, [X31]
	0x03A0C41C CBZ X19, 0x3A0C490
	0x03A0C420 LDP V1, V0, [X31 + 0x10]
	0x03A0C424 LDR V2, [X31]
	0x03A0C428 STUR V0, [X19 + 0x38]
	0x03A0C42C STUR V1, [X19 + 0x28]
	0x03A0C430 STUR V2, [X19 + 0x18]
	0x03A0C434 LDR W8, [X20 + 0x10]
	0x03A0C438 STR W8, [X19 + 0x10]
	0x03A0C43C MOV X8, X20
	0x03A0C440 TBZ X21, 0x0, 0x3A0C45C
	0x03A0C444 LDR X9, [X8 + 0x48]!
	0x03A0C448 STP X9, X20, [X19 + 0x48]
	0x03A0C44C LDR X9, [X8]
	0x03A0C450 CBZ X9, 0x3A0C490
	0x03A0C454 ADD X9, X9, 0x50
	0x03A0C458 B 0x3A0C470
	0x03A0C45C LDR X9, [X8 + 0x50]!
	0x03A0C460 STP X20, X9, [X19 + 0x48]
	0x03A0C464 LDR X9, [X8]
	0x03A0C468 CBZ X9, 0x3A0C490
	0x03A0C46C ADD X9, X9, 0x48
	0x03A0C470 STR X19, [X9]
	0x03A0C474 STR X19, [X8]
	0x03A0C478 MOV X0, X19
	0x03A0C47C LDP X20, X19, [X31 + 0x50]
	0x03A0C480 LDP X22, X21, [X31 + 0x40]
	0x03A0C484 LDR X30, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {29}
	004 Move X0, [X1+240]
	005 Compare X0, 0
	006 JumpIfEqual {29}
	007 Move X10, [X0+120]
	008 Move X9, [X1+120]
	009 Move X8, [X1+128]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X10, [X0+128]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X10, [X0+256]
	014 Compare X10, 0
	015 JumpIfEqual {27}
	016 Move X10, [X1+248]
	017 Compare X10, 0
	018 JumpIfEqual {29}
	019 Move X11, [X10+120]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X9, [X10+128]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X8, [X10+256]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction CSEL not yet implemented."
	026 Move X0, X31
	027 Move X30, [X31+16]
	028 Return X0
	029 Call 0x1C17F20

Method: UnityEngine.Rendering.Universal.TEdge GetMaximaPairEx(UnityEngine.Rendering.Universal.TEdge e)

Disassembly:
	0x03A0C558 STR X0, [X19]
	0x03A0C55C MOV X0, X23
	0x03A0C560 B 0x3A0C578
	0x03A0C564 MOV X1, X21
	0x03A0C568 MOV X2, X31
	0x03A0C56C BL 0x337EDFC
	0x03A0C570 STR X0, [X19]
	0x03A0C574 MOV X0, X24
	0x03A0C578 MOV X1, X22
	0x03A0C57C MOV X2, X31
	0x03A0C580 BL 0x337EEA0
	0x03A0C584 STR X0, [X20]
	0x03A0C588 LDR X8, [X19]
	0x03A0C58C LDP X20, X19, [X31 + 0x40]
	0x03A0C590 LDP X22, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Call Clipper.GetMaximaPair, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {14}
	005 Move W8, [X0+236]
	006 Add W31, W8, 2
	007 Move X0, X31
	008 Move X8, [X0+264]
	009 Move X9, [X0+272]
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X8, [X0+176]
	012 Compare X8, 0
	013 JumpIfNotEqual {7}
	014 Move X30, [X31+16]
	015 Return X0

Method: System.Boolean ProcessIntersections(System.Int64 topY)

Disassembly:
	0x03A08F18 MOV X21, X2
	0x03A08F1C MOV X22, X1
	0x03A08F20 MOV X20, X0
	0x03A08F24 TBNZ X8, 0x0, 0x3A08F48
	0x03A08F28 ADRP X0, 0x74C000
	0x03A08F2C LDR X0, [X0 + 0x378]
	0x03A08F30 BL 0x1C16CF4
	0x03A08F34 ADRP X0, 0x74C000
	0x03A08F38 LDR X0, [X0 + 0x380]
	0x03A08F3C BL 0x1C16CF4
	0x03A08F40 MOVZ W8, 0x1
	0x03A08F44 STRB W8, [X19 + 0xF7C]
	0x03A08F48 LDR X0, [X23]
	0x03A08F4C BL 0x1C16F10
	0x03A08F50 MOV X1, X31
	0x03A08F54 MOV X19, X0
	0x03A08F58 BL 0x33BDD8C
	0x03A08F5C CBZ X19, 0x3A08FEC
	0x03A08F60 STR X22, [X19 + 0x10]
	0x03A08F64 LDP V1, V0, [X21 + 0x10]
	0x03A08F68 LDR V2, [X21]
	0x03A08F6C STP V1, V0, [X19 + 0x30]
	0x03A08F70 STR V2, [X19 + 0x2]
	0x03A08F74 LDR X0, [X20 + 0x80]
	0x03A08F78 CBZ X0, 0x3A08FEC
	0x03A08F7C ADRP X9, 0x74C000
	0x03A08F80 LDR X9, [X9 + 0x380]
	0x03A08F84 LDR W10, [X0 + 0x1C]
	0x03A08F88 LDR X8, [X0 + 0x10]
	0x03A08F8C LDR X9, [X9]
	0x03A08F90 ADD W10, W10, 0x1
	0x03A08F94 STR W10, [X0 + 0x1C]
	0x03A08F98 CBZ X8, 0x3A08FEC
	0x03A08F9C LDRSW X10, [X0 + 0x18]
	0x03A08FA0 LDR W11, [X8 + 0x18]
	0x03A08FA4 CMP W10, W11
	0x03A08FA8 B.CS 0x3A08FCC
	0x03A08FAC ADD W9, W10, 0x1
	0x03A08FB0 ADD X8, X8, X10, 0x3, LSL
	0x03A08FB4 STR W9, [X0 + 0x18]
	0x03A08FB8 STR X19, [X8 + 0x20]
	0x03A08FBC LDP X20, X19, [X31 + 0x20]
	0x03A08FC0 LDP X22, X21, [X31 + 0x10]
	0x03A08FC4 LDP X30, X23, [X31], #0x30
	0x03A08FC8 RET
	0x03A08FCC LDR X8, [X9 + 0x20]
	0x03A08FD0 MOV X1, X19
	0x03A08FD4 LDP X20, X19, [X31 + 0x20]
	0x03A08FD8 LDP X22, X21, [X31 + 0x10]
	0x03A08FDC LDR X8, [X8 + 0xC0]
	0x03A08FE0 LDR X2, [X8 + 0x70]
	0x03A08FE4 LDP X30, X23, [X31], #0x30
	0x03A08FE8 B 0x301BF90
	0x03A08FEC BL 0x1C16F20
	0x03A08FF0 STP X30, X21, [X31 - 0x20]!
	0x03A08FF4 STP X20, X19, [X31 + 0x10]
	0x03A08FF8 MOV X20, X0
	0x03A08FFC LDR X8, [X20 + 0x38]!
	0x03A09000 MOV X19, X1
	0x03A09004 CBZ X8, 0x3A0903C
	0x03A09008 MOV X21, X2
	0x03A0900C CBNZ X2, 0x3A09050
	0x03A09010 MOV X1, X8
	0x03A09014 MOV X2, X19
	0x03A09018 BL 0x3A09EE8
	0x03A0901C TBZ X0, 0x0, 0x3A09048
	0x03A09020 CBZ X19, 0x3A09094
	0x03A09024 STR X31, [X19 + 0x110]
	0x03A09028 LDR X8, [X20]
	0x03A0902C STR X8, [X19 + 0x108]
	0x03A09030 CBZ X8, 0x3A09094
	0x03A09034 STR X19, [X8 + 0x110]
	0x03A09038 B 0x3A09084
	0x03A0903C CBZ X19, 0x3A09094
	0x03A09040 STP X31, X31, [X19 + 0x108]
	0x03A09044 B 0x3A09084
	0x03A09048 LDR X21, [X20]
	0x03A0904C CBZ X21, 0x3A09094
	0x03A09050 LDR X1, [X21 + 0x108]
	0x03A09054 ADD X20, X21, 0x108
	0x03A09058 CBZ X1, 0x3A09068
	0x03A0905C MOV X2, X19
	0x03A09060 BL 0x3A09EE8
	0x03A09064 TBZ X0, 0x0, 0x3A09048
	0x03A09068 CBZ X19, 0x3A09094
	0x03A0906C LDR X8, [X20]
	0x03A09070 STR X8, [X19 + 0x108]
	0x03A09074 LDR X8, [X20]
	0x03A09078 CBZ X8, 0x3A09080
	0x03A0907C STR X19, [X8 + 0x110]
	0x03A09080 STR X21, [X19 + 0x110]
	0x03A09084 STR X19, [X20]
	0x03A09088 LDP X20, X19, [X31 + 0x10]
	0x03A0908C LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x9DA000
	006 Move W8, [X21+3975]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x74D000
	014 Move X0, [X0+848]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3975], W8
	018 Move X8, [X19+56]
	019 Compare X8, 0
	020 JumpIfEqual {40}
	021 Move X0, X19
	022 Move X1, X20
	023 Call Clipper.BuildIntersectList, X0, X1
	024 Move X8, [X19+88]
	025 Compare X8, 0
	026 JumpIfEqual {47}
	027 Move W8, [X8+24]
	028 Compare W8, 0
	029 JumpIfEqual {40}
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X19
	032 Call Clipper.FixupIntersectionOrder, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {46}
	037 Move X0, X19
	038 Call Clipper.ProcessIntersectList, X0
	039 Move [X19+80], X31
	040 Move W0, 1
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return X0
	046 Move W0, W31
	047 Call 0x1C17F20
	048 Move X20, X0
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X0, X20
	051 Call 0x3EB2AD0
	052 Move X20, X0
	053 Move X0, 0x6F2000
	054 Move X0, [X0+3264]
	055 Call 0x1C17D08
	056 Move X8, [X20]
	057 Move X1, [X8]
	058 Call 0x1C18270
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {92}
	063 Call 0x3EB2AE0
	064 Move X20, [X19+88]
	065 Move [X19+80], X31
	066 Move X0, X20
	067 Call 0x19913C0
	068 Move X0, 0x74D000
	069 Move X0, [X0+856]
	070 Call 0x1C17D08
	071 Move X1, X0
	072 Move X0, X20
	073 Call 0x19917E0
	074 Move X0, 0x74C000
	075 Move X0, [X0+456]
	076 Call 0x1C17D08
	077 Call 0x1C17F10
	078 Move X19, X0
	079 Move X0, 0x74C000
	080 Move X0, [X0+864]
	081 Call 0x1C17D08
	082 Move X1, X0
	083 Move X0, X19
	084 Move X2, X31
	085 Call ClipperException..ctor, X0, X1
	086 Move X0, 0x74C000
	087 Move X0, [X0+872]
	088 Call 0x1C17D08
	089 Move X1, X0
	090 Move X0, X19
	091 Call 0x1C17DEC
	092 Move W0, 8
	093 Call 0x3EB2AF0
	094 Move X8, [X20]
	095 Move [X0], X8
	096 Move X1, 0x4AC000
	097 Add X1, X1, 3672
	098 Move X2, X31
	099 Call 0x3EB2B00
	100 Move X20, X0
	101 Call 0x3EB2AE0
	102 Move X0, X20
	103 Call 0x1D2D690
	104 Call 0x1991590

Method: System.Void BuildIntersectList(System.Int64 topY)

Disassembly:
	0x03A0C594 LDP X24, X23, [X31 + 0x20]
	0x03A0C598 LDP X26, X25, [X31 + 0x10]
	0x03A0C59C CMP X8, X0
	0x03A0C5A0 CSET W0, LT
	0x03A0C5A4 LDR X30, [X31], #0x50
	0x03A0C5A8 RET
	0x03A0C5AC SUB X31, X31, 0x70
	0x03A0C5B0 STP X29, X30, [X31 + 0x10]
	0x03A0C5B4 STP X28, X27, [X31 + 0x20]
	0x03A0C5B8 STP X26, X25, [X31 + 0x30]
	0x03A0C5BC STP X24, X23, [X31 + 0x40]
	0x03A0C5C0 STP X22, X21, [X31 + 0x50]
	0x03A0C5C4 STP X20, X19, [X31 + 0x60]
	0x03A0C5C8 CBZ X1, 0x3A0C910
	0x03A0C5CC CBZ X2, 0x3A0C910
	0x03A0C5D0 MOV X21, X3
	0x03A0C5D4 CBZ X3, 0x3A0C910
	0x03A0C5D8 CBZ X4, 0x3A0C910
	0x03A0C5DC LDR X27, [X1 + 0x20]
	0x03A0C5E0 LDR X28, [X2 + 0x20]
	0x03A0C5E4 LDR X29, [X21 + 0x20]
	0x03A0C5E8 LDR X25, [X4 + 0x20]
	0x03A0C5EC CMP X27, X28
	0x03A0C5F0 CSET W23, GT
	0x03A0C5F4 CMP X29, X25
	0x03A0C5F8 CSET W26, GT
	0x03A0C5FC CMP W23, W26
	0x03A0C600 B.EQ 0x3A0C8EC
	0x03A0C604 MOV W19, W6
	0x03A0C608 MOV X20, X5
	0x03A0C60C CMP X27, X28
	0x03A0C610 STR W23, [X31 + 0xC]
	0x03A0C614 B.LE 0x3A0C6A8
	0x03A0C618 MOV X24, X1
	0x03A0C61C LDR X1, [X1 + 0x48]
	0x03A0C620 CBZ X1, 0x3A0C910
	0x03A0C624 LDR X9, [X1 + 0x20]
	0x03A0C628 LDR X8, [X20 + 0x8]
	0x03A0C62C CMP X9, X8
	0x03A0C630 B.LT 0x3A0C650
	0x03A0C634 LDR X10, [X24 + 0x20]
	0x03A0C638 CMP X9, X10
	0x03A0C63C B.GT 0x3A0C650
	0x03A0C640 LDR X9, [X1 + 0x28]
	0x03A0C644 LDR X10, [X20 + 0x10]
	0x03A0C648 CMP X9, X10
	0x03A0C64C B.EQ 0x3A0C618
	0x03A0C650 TBNZ X19, 0x0, 0x3A0C660
	0x03A0C654 LDR X9, [X24 + 0x20]
	0x03A0C658 CMP X9, X8
	0x03A0C65C CSEL X24, X24, X1, EQ
	0x03A0C660 AND W2, W19, 0x1
	0x03A0C664 MOV X1, X24
	0x03A0C668 BL 0x3A0C3B0
	0x03A0C66C CBZ X0, 0x3A0C910
	0x03A0C670 LDR X8, [X0 + 0x20]
	0x03A0C674 LDR X9, [X20 + 0x8]
	0x03A0C678 MOV X22, X0
	0x03A0C67C CMP X8, X9
	0x03A0C680 B.NE 0x3A0C694
	0x03A0C684 LDR X8, [X20 + 0x10]
	0x03A0C688 LDR X9, [X22 + 0x28]
	0x03A0C68C CMP X9, X8
	0x03A0C690 B.EQ 0x3A0C728
	0x03A0C694 LDP V1, V0, [X20 + 0x10]
	0x03A0C698 LDR V2, [X20]
	0x03A0C69C ADD X8, X22, 0x18
	0x03A0C6A0 AND W2, W19, 0x1
	0x03A0C6A4 B 0x3A0C744
	0x03A0C6A8 MOV X24, X1
	0x03A0C6AC LDR X1, [X1 + 0x48]
	0x03A0C6B0 CBZ X1, 0x3A0C910
	0x03A0C6B4 LDR X9, [X1 + 0x20]
	0x03A0C6B8 LDR X8, [X20 + 0x8]
	0x03A0C6BC CMP X9, X8
	0x03A0C6C0 B.GT 0x3A0C6E0
	0x03A0C6C4 LDR X10, [X24 + 0x20]
	0x03A0C6C8 CMP X9, X10
	0x03A0C6CC B.LT 0x3A0C6E0
	0x03A0C6D0 LDR X9, [X1 + 0x28]
	0x03A0C6D4 LDR X10, [X20 + 0x10]
	0x03A0C6D8 CMP X9, X10
	0x03A0C6DC B.EQ 0x3A0C6A8
	0x03A0C6E0 TBZ X19, 0x0, 0x3A0C6F0
	0x03A0C6E4 LDR X9, [X24 + 0x20]
	0x03A0C6E8 CMP X9, X8
	0x03A0C6EC CSEL X24, X24, X1, EQ
	0x03A0C6F0 EOR W23, W19, 0x1
	0x03A0C6F4 AND W2, W23, 0x1
	0x03A0C6F8 MOV X1, X24
	0x03A0C6FC BL 0x3A0C3B0
	0x03A0C700 CBZ X0, 0x3A0C910
	0x03A0C704 LDR X8, [X0 + 0x20]
	0x03A0C708 LDR X9, [X20 + 0x8]
	0x03A0C70C MOV X22, X0
	0x03A0C710 CMP X8, X9
	0x03A0C714 B.NE 0x3A0C734
	0x03A0C718 LDR X8, [X20 + 0x10]
	0x03A0C71C LDR X9, [X22 + 0x28]
	0x03A0C720 CMP X9, X8
	0x03A0C724 B.NE 0x3A0C734
	0x03A0C728 MOV X23, X22
	0x03A0C72C MOV X22, X24
	0x03A0C730 B 0x3A0C758
	0x03A0C734 LDP V1, V0, [X20 + 0x10]
	0x03A0C738 LDR V2, [X20]
	0x03A0C73C ADD X8, X22, 0x18
	0x03A0C740 AND W2, W23, 0x1
	0x03A0C744 STP V1, V0, [X8 + 0x10]
	0x03A0C748 STR V2, [X8]
	0x03A0C74C MOV X1, X22
	0x03A0C750 BL 0x3A0C3B0
	0x03A0C754 MOV X23, X0
	0x03A0C758 CMP X29, X25
	0x03A0C75C B.LE 0x3A0C7F0
	0x03A0C760 MOV X24, X21
	0x03A0C764 LDR X21, [X21 + 0x48]
	0x03A0C768 CBZ X21, 0x3A0C910
	0x03A0C76C LDR X9, [X21 + 0x20]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], X30
	003 Move [X31+56], X27
	004 Move [X31+64], X26
	005 Move [X31+72], X25
	006 Move [X31+80], X24
	007 Move [X31+88], X23
	008 Move [X31+96], X22
	009 Move [X31+104], X21
	010 Move [X31+112], X20
	011 Move [X31+120], X19
	012 Move X21, 0x9D6000
	013 Move W8, [X21+3976]
	014 Move X19, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x749000
	021 Move X0, [X0+912]
	022 Call 0x1C17CF4
	023 Move X0, 0x749000
	024 Move X0, [X0+920]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3976], W8
	028 NotImplemented "Instruction MOVI not yet implemented."
	029 Move [X31+16], V0
	030 Move [X31+24], V0
	031 Move [X31], V0
	032 Move X21, [X20+56]
	033 Compare X21, 0
	034 JumpIfEqual {134}
	035 Move X24, 0x749000
	036 Move X25, 0x749000
	037 Move X24, [X24+912]
	038 Move X25, [X25+920]
	039 Move [X20+80], X21
	040 Add X8, X21, 264
	041 Move V0, [X8]
	042 Move X0, X21
	043 Move X1, X19
	044 Move [X8+1], V0
	045 Call Clipper.TopX, X0, X1
	046 Move [X21+72], X0
	047 Move X21, [X21+264]
	048 Compare X21, 0
	049 JumpIfNotEqual {40}
	050 Add X8, X31, 0
	051 Add X26, X8, 32
	052 Move TEMP, 0
	053 Not TEMP
	054 Move X27, TEMP
	055 Move X21, [X20+80]
	056 Compare X21, 0
	057 JumpIfEqual {133}
	058 Move W8, 1
	059 Move X22, X21
	060 Move X21, X22
	061 Move X22, [X22+280]
	062 Compare X22, 0
	063 JumpIfEqual {125}
	064 Move X9, [X21+72]
	065 Move X10, [X22+72]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add X3, X31, 0
	068 Move X0, X20
	069 Move X1, X21
	070 Move X2, X22
	071 Call Clipper.IntersectPoint, X0, X1, X2, X3
	072 Move X8, [X31+16]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X0, X21
	075 Move X1, X19
	076 Call Clipper.TopX, X0, X1
	077 Move [X31+8], X0
	078 Move [X31+16], X19
	079 Move [X26], X31
	080 Move [X26+8], X31
	081 Move [X31], X27
	082 Move [X31+24], X31
	083 Move X0, [X24]
	084 Call 0x1C17F10
	085 Move X1, X31
	086 Move X23, X0
	087 Call Object..ctor, X0
	088 Compare X23, 0
	089 JumpIfEqual {146}
	090 Move [X23+16], X21
	091 Move [X23+24], X22
	092 Move V1, [X31+16]
	093 Move V0, [X31+32]
	094 Move V2, [X31]
	095 Move [X23+48], V1
	096 Move [X23+56], V0
	097 Move [X23+2], V2
	098 Move X0, [X20+88]
	099 Compare X0, 0
	100 JumpIfEqual {146}
	101 Move W10, [X0+28]
	102 Move X8, [X0+16]
	103 Move X9, [X25]
	104 Add W10, W10, 1
	105 Move [X0+28], W10
	106 Compare X8, 0
	107 JumpIfEqual {146}
	108 NotImplemented "Instruction LDRSW not yet implemented."
	109 Move W11, [X8+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Add W9, W10, 1
	112 Add X8, X8, X10
	113 Move [X0+24], W9
	114 Move [X8+32], X23
	115 Move X8, [X9+32]
	116 Move X1, X23
	117 Move X8, [X8+192]
	118 Move X2, [X8+112]
	119 Call List`1<Object>.AddWithResize, X0, X1
	120 Move X0, X20
	121 Move X1, X21
	122 Move X2, X22
	123 Call Clipper.SwapPositionsInSEL, X0, X1, X2
	124 Move W8, W31
	125 Move X9, [X21+288]
	126 Compare X9, 0
	127 JumpIfEqual {133}
	128 Move [X9+280], X31
	129 Move TEMP, X8
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfNotEqual {55}
	133 Move [X20+80], X31
	134 Move X20, [X31+112]
	135 Move X19, [X31+120]
	136 Move X22, [X31+96]
	137 Move X21, [X31+104]
	138 Move X24, [X31+80]
	139 Move X23, [X31+88]
	140 Move X26, [X31+64]
	141 Move X25, [X31+72]
	142 Move X30, [X31+48]
	143 Move X27, [X31+56]
	144 Add X31, X31, 128
	145 Return 
	146 Call 0x1C17F20

Method: System.Boolean EdgesAdjacent(UnityEngine.Rendering.Universal.IntersectNode inode)

Disassembly:
	0x03A0CE48 B.EQ 0x3A0CE6C
	0x03A0CE4C CBZ X11, 0x3A0CF4C
	0x03A0CE50 LDR X12, [X11 + 0x20]
	0x03A0CE54 CMP X12, X9
	0x03A0CE58 B.NE 0x3A0CE70
	0x03A0CE5C LDR X12, [X11 + 0x28]
	0x03A0CE60 CMP X12, X8
	0x03A0CE64 B.EQ 0x3A0CE40
	0x03A0CE68 B 0x3A0CE70
	0x03A0CE6C MOV X11, X20
	0x03A0CE70 LDR X9, [X11 + 0x28]
	0x03A0CE74 CMP X10, X8
	0x03A0CE78 CSET W11, GT
	0x03A0CE7C CMP X9, X8
	0x03A0CE80 CSET W9, GT
	0x03A0CE84 CMP W11, W9

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {16}
	004 Move X8, [X1+16]
	005 Compare X8, 0
	006 JumpIfEqual {16}
	007 Move X10, [X8+280]
	008 Move X9, [X1+24]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X8, [X8+288]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CSET not yet implemented."
	013 Move W0, 1
	014 Move X30, [X31+16]
	015 Return X0
	016 Call 0x1C17F20

Method: System.Int32 IntersectNodeSort(UnityEngine.Rendering.Universal.IntersectNode node1, UnityEngine.Rendering.Universal.IntersectNode node2)

Disassembly:
	0x03A0CE88 B.EQ 0x3A0CED4
	0x03A0CE8C CMP X10, X8
	0x03A0CE90 B.LE 0x3A0CD98
	0x03A0CE94 MOV X1, X21
	0x03A0CE98 MOV W2, W31
	0x03A0CE9C BL 0x3A0C3B0
	0x03A0CEA0 MOVZ W2, 0x1
	0x03A0CEA4 MOV X1, X20
	0x03A0CEA8 MOV X22, X0

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {11}
	004 Compare X0, 0
	005 JumpIfEqual {11}
	006 Move W8, [X1+48]
	007 Move W9, [X0+48]
	008 Subtract W0, W8, W9
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: System.Boolean FixupIntersectionOrder()

Disassembly:
	0x03A0C770 LDR X8, [X20 + 0x8]
	0x03A0C774 CMP X9, X8
	0x03A0C778 B.LT 0x3A0C798
	0x03A0C77C LDR X10, [X24 + 0x20]
	0x03A0C780 CMP X9, X10
	0x03A0C784 B.GT 0x3A0C798
	0x03A0C788 LDR X9, [X21 + 0x28]
	0x03A0C78C LDR X10, [X20 + 0x10]
	0x03A0C790 CMP X9, X10
	0x03A0C794 B.EQ 0x3A0C760
	0x03A0C798 TBNZ X19, 0x0, 0x3A0C7A8
	0x03A0C79C LDR X9, [X24 + 0x20]
	0x03A0C7A0 CMP X9, X8
	0x03A0C7A4 CSEL X24, X24, X21, EQ
	0x03A0C7A8 AND W2, W19, 0x1
	0x03A0C7AC MOV X1, X24
	0x03A0C7B0 BL 0x3A0C3B0
	0x03A0C7B4 CBZ X0, 0x3A0C910
	0x03A0C7B8 LDR X8, [X0 + 0x20]
	0x03A0C7BC LDR X9, [X20 + 0x8]
	0x03A0C7C0 MOV X21, X0
	0x03A0C7C4 CMP X8, X9
	0x03A0C7C8 B.NE 0x3A0C7DC
	0x03A0C7CC LDR X8, [X20 + 0x10]
	0x03A0C7D0 LDR X9, [X21 + 0x28]
	0x03A0C7D4 CMP X9, X8
	0x03A0C7D8 B.EQ 0x3A0C870
	0x03A0C7DC LDP V1, V0, [X20 + 0x10]
	0x03A0C7E0 LDR V2, [X20]
	0x03A0C7E4 ADD X8, X21, 0x18
	0x03A0C7E8 AND W2, W19, 0x1
	0x03A0C7EC B 0x3A0C88C
	0x03A0C7F0 MOV X24, X21
	0x03A0C7F4 LDR X21, [X21 + 0x48]
	0x03A0C7F8 CBZ X21, 0x3A0C910
	0x03A0C7FC LDR X9, [X21 + 0x20]
	0x03A0C800 LDR X8, [X20 + 0x8]
	0x03A0C804 CMP X9, X8
	0x03A0C808 B.GT 0x3A0C828
	0x03A0C80C LDR X10, [X24 + 0x20]
	0x03A0C810 CMP X9, X10
	0x03A0C814 B.LT 0x3A0C828
	0x03A0C818 LDR X9, [X21 + 0x28]
	0x03A0C81C LDR X10, [X20 + 0x10]
	0x03A0C820 CMP X9, X10
	0x03A0C824 B.EQ 0x3A0C7F0
	0x03A0C828 TBZ X19, 0x0, 0x3A0C838
	0x03A0C82C LDR X9, [X24 + 0x20]
	0x03A0C830 CMP X9, X8
	0x03A0C834 CSEL X24, X24, X21, EQ
	0x03A0C838 EOR W25, W19, 0x1
	0x03A0C83C AND W2, W25, 0x1
	0x03A0C840 MOV X1, X24
	0x03A0C844 BL 0x3A0C3B0
	0x03A0C848 CBZ X0, 0x3A0C910
	0x03A0C84C LDR X8, [X0 + 0x20]
	0x03A0C850 LDR X9, [X20 + 0x8]
	0x03A0C854 MOV X21, X0
	0x03A0C858 CMP X8, X9
	0x03A0C85C B.NE 0x3A0C87C
	0x03A0C860 LDR X8, [X20 + 0x10]
	0x03A0C864 LDR X9, [X21 + 0x28]
	0x03A0C868 CMP X9, X8
	0x03A0C86C B.NE 0x3A0C87C
	0x03A0C870 MOV X0, X21
	0x03A0C874 MOV X21, X24
	0x03A0C878 B 0x3A0C89C
	0x03A0C87C LDP V1, V0, [X20 + 0x10]
	0x03A0C880 LDR V2, [X20]
	0x03A0C884 ADD X8, X21, 0x18
	0x03A0C888 AND W2, W25, 0x1
	0x03A0C88C STP V1, V0, [X8 + 0x10]
	0x03A0C890 STR V2, [X8]
	0x03A0C894 MOV X1, X21
	0x03A0C898 BL 0x3A0C3B0
	0x03A0C89C CMP X27, X28
	0x03A0C8A0 CSET W8, GT
	0x03A0C8A4 AND W9, W19, 0x1
	0x03A0C8A8 CMP W8, W9
	0x03A0C8AC B.EQ 0x3A0C8CC
	0x03A0C8B0 STR X21, [X22 + 0x50]
	0x03A0C8B4 STR X22, [X21 + 0x48]
	0x03A0C8B8 CBZ X23, 0x3A0C910
	0x03A0C8BC STR X0, [X23 + 0x48]
	0x03A0C8C0 CBZ X0, 0x3A0C910
	0x03A0C8C4 ADD X8, X0, 0x50
	0x03A0C8C8 B 0x3A0C8E4
	0x03A0C8CC STR X21, [X22 + 0x48]
	0x03A0C8D0 STR X22, [X21 + 0x50]
	0x03A0C8D4 CBZ X23, 0x3A0C910
	0x03A0C8D8 STR X0, [X23 + 0x50]
	0x03A0C8DC CBZ X0, 0x3A0C910
	0x03A0C8E0 ADD X8, X0, 0x48
	0x03A0C8E4 STR X23, [X8]
	0x03A0C8E8 LDR W23, [X31 + 0xC]
	0x03A0C8EC EOR W0, W23, W26, 0x0
	0x03A0C8F0 LDP X20, X19, [X31 + 0x60]
	0x03A0C8F4 LDP X22, X21, [X31 + 0x50]
	0x03A0C8F8 LDP X24, X23, [X31 + 0x40]
	0x03A0C8FC LDP X26, X25, [X31 + 0x30]
	0x03A0C900 LDP X28, X27, [X31 + 0x20]
	0x03A0C904 LDP X29, X30, [X31 + 0x10]
	0x03A0C908 ADD X31, X31, 0x70
	0x03A0C90C RET
	0x03A0C910 BL 0x1C16F20
	0x03A0C914 STP X29, X30, [X31 - 0x60]!
	0x03A0C918 STP X28, X27, [X31 + 0x10]
	0x03A0C91C STP X26, X25, [X31 + 0x20]
	0x03A0C920 STP X24, X23, [X31 + 0x30]
	0x03A0C924 STP X22, X21, [X31 + 0x40]
	0x03A0C928 STP X20, X19, [X31 + 0x50]
	0x03A0C92C SUB X31, X31, 0x2C0
	0x03A0C930 STR X31, [X31 + 0x2B8]
	0x03A0C934 STR X31, [X31 + 0x2B0]
	0x03A0C938 CBZ X1, 0x3A0CF4C
	0x03A0C93C LDR X21, [X1 + 0x10]
	0x03A0C940 MOV X19, X1
	0x03A0C944 CBZ X21, 0x3A0CF4C
	0x03A0C948 LDR X8, [X21 + 0x28]
	0x03A0C94C LDR X9, [X19 + 0x30]
	0x03A0C950 LDR X20, [X19 + 0x18]
	0x03A0C954 MOV X22, X3
	0x03A0C958 MOV X23, X2
	0x03A0C95C CMP X8, X9
	0x03A0C960 B.NE 0x3A0CB10
	0x03A0C964 LDR X9, [X19 + 0x28]
	0x03A0C968 LDR X10, [X21 + 0x20]
	0x03A0C96C CMP X9, X10
	0x03A0C970 MOV X10, X21

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x9D6000
	012 Move W8, [X20+3977]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0x749000
	019 Move X0, [X0+928]
	020 Call 0x1C17CF4
	021 Move X0, 0x749000
	022 Move X0, [X0+848]
	023 Call 0x1C17CF4
	024 Move X0, 0x749000
	025 Move X0, [X0+936]
	026 Call 0x1C17CF4
	027 Move X0, 0x749000
	028 Move X0, [X0+944]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+3977], W8
	032 Move X0, [X19+88]
	033 Compare X0, 0
	034 JumpIfEqual {143}
	035 Move X8, 0x749000
	036 Move X8, [X8+928]
	037 Move X1, [X19+96]
	038 Move X2, [X8]
	039 Call List`1<Object>.Sort, X0, X1
	040 Move X8, [X19+56]
	041 Move [X19+80], X8
	042 Compare X8, 0
	043 JumpIfEqual {50}
	044 Add X8, X8, 264
	045 Move V0, [X8]
	046 Move [X8+1], V0
	047 Move X8, D0
	048 Compare X8, 0
	049 JumpIfNotEqual {44}
	050 Move X0, [X19+88]
	051 Compare X0, 0
	052 JumpIfEqual {143}
	053 Move W24, [X0+24]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X25, 0x749000
	056 Move X26, 0x749000
	057 Move X25, [X25+936]
	058 Move X26, [X26+944]
	059 Move W20, W31
	060 Move W27, 1
	061 Move W22, 1
	062 Move X2, [X25]
	063 Move W1, W20
	064 Call List`1<Object>.get_Item, X0, X1
	065 Move X1, X0
	066 Call Clipper.EdgesAdjacent, X0, X1
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfEqual {114}
	071 Move W8, W27
	072 Move W21, W8
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X0, [X19+88]
	075 Compare X0, 0
	076 JumpIfEqual {143}
	077 Move X2, [X25]
	078 Move W1, W21
	079 Call List`1<Object>.get_Item, X0, X1
	080 Move X1, X0
	081 Call Clipper.EdgesAdjacent, X0, X1
	082 Add W8, W21, 1
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfNotEqual {72}
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X0, [X19+88]
	089 Compare X0, 0
	090 JumpIfEqual {143}
	091 Move X2, [X25]
	092 Move W1, W20
	093 Call List`1<Object>.get_Item, X0, X1
	094 Move X23, [X19+88]
	095 Compare X23, 0
	096 JumpIfEqual {143}
	097 Move X2, [X25]
	098 Move X22, X0
	099 Move X0, X23
	100 Move W1, W21
	101 Call List`1<Object>.get_Item, X0, X1
	102 Move X3, [X26]
	103 Move X2, X0
	104 Move X0, X23
	105 Move W1, W20
	106 Call List`1<Object>.set_Item, X0, X1, X2
	107 Move X0, [X19+88]
	108 Compare X0, 0
	109 JumpIfEqual {143}
	110 Move X3, [X26]
	111 Move W1, W21
	112 Move X2, X22
	113 Call List`1<Object>.set_Item, X0, X1, X2
	114 Move X0, [X19+88]
	115 Compare X0, 0
	116 JumpIfEqual {143}
	117 Move X2, [X25]
	118 Move W1, W20
	119 Call List`1<Object>.get_Item, X0, X1
	120 Compare X0, 0
	121 JumpIfEqual {143}
	122 Move X8, [X19+88]
	123 Compare X8, 0
	124 JumpIfEqual {143}
	125 Move X2, [X25]
	126 Move X21, [X0+16]
	127 Move X0, X8
	128 Move W1, W20
	129 Call List`1<Object>.get_Item, X0, X1
	130 Compare X0, 0
	131 JumpIfEqual {143}
	132 Move X2, [X0+24]
	133 Move X0, X19
	134 Move X1, X21
	135 Call Clipper.SwapPositionsInSEL, X0, X1, X2
	136 Add W20, W20, 1
	137 NotImplemented "Instruction CMP not yet implemented."
	138 NotImplemented "Instruction CSET not yet implemented."
	139 Move X0, [X19+88]
	140 Add W27, W27, 1
	141 Compare X0, 0
	142 JumpIfNotEqual {62}
	143 Call 0x1C17F20
	144 Move W22, W31
	145 NotImplemented "Instruction ORN not yet implemented."
	146 Move X20, [X31+64]
	147 Move X19, [X31+72]
	148 Move X22, [X31+48]
	149 Move X21, [X31+56]
	150 Move X24, [X31+32]
	151 Move X23, [X31+40]
	152 Move X26, [X31+16]
	153 Move X25, [X31+24]
	154 And W0, W8, 1
	155 Move X30, [X31+80]
	156 Move X27, [X31+88]
	157 Return X0

Method: System.Void ProcessIntersectList()

Disassembly:
	0x03A0C974 B.NE 0x3A0C9D4
	0x03A0C978 CBZ X20, 0x3A0CF4C
	0x03A0C97C LDR X10, [X20 + 0x20]
	0x03A0C980 CMP X9, X10
	0x03A0C984 MOV X10, X21
	0x03A0C988 B.NE 0x3A0C9D4
	0x03A0C98C LDR X10, [X20 + 0x28]
	0x03A0C990 CMP X8, X10
	0x03A0C994 MOV X10, X21
	0x03A0C998 B.NE 0x3A0C9D4
	0x03A0C99C CMP X23, X22
	0x03A0C9A0 B.NE 0x3A0CED4
	0x03A0C9A4 MOV X10, X21
	0x03A0C9A8 LDR X10, [X10 + 0x48]
	0x03A0C9AC CMP X10, X21
	0x03A0C9B0 B.EQ 0x3A0CE34
	0x03A0C9B4 CBZ X10, 0x3A0CF4C
	0x03A0C9B8 LDR X11, [X10 + 0x20]
	0x03A0C9BC CMP X11, X9
	0x03A0C9C0 B.NE 0x3A0CE38
	0x03A0C9C4 LDR X11, [X10 + 0x28]
	0x03A0C9C8 CMP X11, X8
	0x03A0C9CC B.EQ 0x3A0C9A8
	0x03A0C9D0 B 0x3A0CE38
	0x03A0C9D4 MOV X22, X10
	0x03A0C9D8 LDR X10, [X10 + 0x50]
	0x03A0C9DC CBZ X10, 0x3A0CF4C
	0x03A0C9E0 LDR X9, [X10 + 0x28]
	0x03A0C9E4 CMP X9, X8
	0x03A0C9E8 B.NE 0x3A0C9FC
	0x03A0C9EC CMP X10, X21
	0x03A0C9F0 B.EQ 0x3A0C9FC
	0x03A0C9F4 CMP X10, X20
	0x03A0C9F8 B.NE 0x3A0C9D4
	0x03A0C9FC ADD X25, X22, 0x18
	0x03A0CA00 MOV X23, X21
	0x03A0CA04 LDR X21, [X21 + 0x48]
	0x03A0CA08 CBZ X21, 0x3A0CF4C
	0x03A0CA0C LDR X9, [X21 + 0x28]
	0x03A0CA10 CMP X9, X8
	0x03A0CA14 B.NE 0x3A0CA28
	0x03A0CA18 CMP X21, X22
	0x03A0CA1C B.EQ 0x3A0CA28
	0x03A0CA20 CMP X21, X20
	0x03A0CA24 B.NE 0x3A0CA00
	0x03A0CA28 CMP X21, X22
	0x03A0CA2C MOV W0, W31
	0x03A0CA30 B.EQ 0x3A0CED8
	0x03A0CA34 CMP X21, X20
	0x03A0CA38 B.EQ 0x3A0CED8
	0x03A0CA3C ADD X26, X23, 0x18
	0x03A0CA40 MOV X8, X20
	0x03A0CA44 CBZ X8, 0x3A0CF4C
	0x03A0CA48 MOV X21, X8
	0x03A0CA4C LDR X8, [X8 + 0x50]
	0x03A0CA50 CBZ X8, 0x3A0CF4C
	0x03A0CA54 LDR X9, [X8 + 0x28]
	0x03A0CA58 LDR X10, [X21 + 0x28]
	0x03A0CA5C CMP X9, X10
	0x03A0CA60 B.NE 0x3A0CA74
	0x03A0CA64 CMP X8, X20
	0x03A0CA68 B.EQ 0x3A0CA74
	0x03A0CA6C CMP X8, X23
	0x03A0CA70 B.NE 0x3A0CA44
	0x03A0CA74 ADD X27, X21, 0x18

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X20, 0x9D6000
	008 Move W8, [X20+3978]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x749000
	015 Move X0, [X0+856]
	016 Call 0x1C17CF4
	017 Move X0, 0x749000
	018 Move X0, [X0+848]
	019 Call 0x1C17CF4
	020 Move X0, 0x749000
	021 Move X0, [X0+936]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3978], W8
	025 Move X0, [X19+88]
	026 Compare X0, 0
	027 JumpIfEqual {58}
	028 Move X22, 0x749000
	029 Move X22, [X22+936]
	030 Move W20, W31
	031 Move W2, [X0+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X2, [X22]
	034 Move W1, W20
	035 Call List`1<Object>.get_Item, X0, X1
	036 Compare X0, 0
	037 JumpIfEqual {58}
	038 Move V2, [X0+48]
	039 Move V0, [X0+64]
	040 Move V1, [X0+2]
	041 Move X1, [X0+16]
	042 Move X2, [X0+24]
	043 Move X21, X0
	044 Add X3, X31, 0
	045 Move X0, X19
	046 Move [X31+16], V2
	047 Move [X31+24], V0
	048 Move [X31], V1
	049 Call Clipper.IntersectEdges, X0, X1, X2, X3
	050 Move X1, [X21+16]
	051 Move X2, [X21+24]
	052 Move X0, X19
	053 Call ClipperBase.SwapPositionsInAEL, X0, X1, X2
	054 Move X0, [X19+88]
	055 Add W20, W20, 1
	056 Compare X0, 0
	057 JumpIfNotEqual {31}
	058 Call 0x1C17F20
	059 Move W8, [X0+28]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Add W8, W8, 1
	062 Move [X0+24], W31
	063 Move [X0+28], W8
	064 Move X0, [X0+16]
	065 Move X20, [X31+80]
	066 Move X19, [X31+88]
	067 Move X22, [X31+64]
	068 Move X21, [X31+72]
	069 Move X30, [X31+48]
	070 Move W1, W31
	071 Move X3, X31
	072 Add X31, X31, 96
	073 Call Array.Clear, X0, X1, X2
	074 Return 
	075 Move X20, [X31+80]
	076 Move X19, [X31+88]
	077 Move X22, [X31+64]
	078 Move X21, [X31+72]
	079 Move X30, [X31+48]
	080 Add X31, X31, 96
	081 Return 

Method: System.Int64 Round(System.Double value)

Disassembly:
	0x03A0CEAC BL 0x3A0C3B0
	0x03A0CEB0 STR X20, [X21 + 0x50]
	0x03A0CEB4 STR X21, [X20 + 0x48]
	0x03A0CEB8 CBZ X22, 0x3A0CF4C
	0x03A0CEBC STR X0, [X22 + 0x48]
	0x03A0CEC0 CBZ X0, 0x3A0CF4C
	0x03A0CEC4 STR X22, [X0 + 0x50]
	0x03A0CEC8 MOVZ W0, 0x1
	0x03A0CECC STP X21, X22, [X19 + 0x10]
	0x03A0CED0 B 0x3A0CED8
	0x03A0CED4 MOV W0, W31
	0x03A0CED8 AND W0, W0, 0x1
	0x03A0CEDC ADD X31, X31, 0x2C0

ISIL:
	001 Move D1, -0.5
	002 Move D2, 0.5
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Move X8, 0x7FF00000
	005 Add D1, D0, D1
	006 Add D0, D0, D2
	007 Move D2, X8
	008 NotImplemented "Instruction FCSEL not yet implemented."
	009 NotImplemented "Instruction FCVTZS not yet implemented."
	010 NotImplemented "Instruction FCMP not yet implemented."
	011 Move X9, 0x80000000
	012 NotImplemented "Instruction CSEL not yet implemented."
	013 Return X0

Method: System.Int64 TopX(UnityEngine.Rendering.Universal.TEdge edge, System.Int64 currentY)

Disassembly:
	0x03A0AF54 STR V2, [X31 + 0x2D]
	0x03A0AF58 BL 0x3A08DF8
	0x03A0AF5C LDR X25, [X25 + 0x118]
	0x03A0AF60 CBNZ X25, 0x3A0AEE4
	0x03A0AF64 LDR X8, [X31 + 0x378]
	0x03A0AF68 CBZ X8, 0x3A0B3D0
	0x03A0AF6C LDP V1, V0, [X8 + 0x20]
	0x03A0AF70 LDR V2, [X8 + 0x1]
	0x03A0AF74 ADD X2, X31, 0x280
	0x03A0AF78 MOV X0, X19
	0x03A0AF7C MOV X1, X23
	0x03A0AF80 STP V1, V0, [X31 + 0x290]
	0x03A0AF84 STR V2, [X31 + 0x28]
	0x03A0AF88 BL 0x3A08EFC
	0x03A0AF8C LDR X8, [X31 + 0x38]
	0x03A0AF90 CMP X8, X22
	0x03A0AF94 B.NE 0x3A0AFA4
	0x03A0AF98 LDR X8, [X31 + 0x20]
	0x03A0AF9C CMP X24, X8
	0x03A0AFA0 B.EQ 0x3A0B0BC
	0x03A0AFA4 LDR X2, [X31 + 0x378]
	0x03A0AFA8 CBZ X2, 0x3A0B3D0
	0x03A0AFAC LDR X8, [X24 + 0x48]
	0x03A0AFB0 LDR X9, [X2 + 0x50]
	0x03A0AFB4 TBZ X27, 0x0, 0x3A0AFE4
	0x03A0AFB8 LDR X10, [X31 + 0x10]
	0x03A0AFBC ADD X3, X31, 0x220
	0x03A0AFC0 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {28}
	004 Move X8, [X0+128]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X0, [X0+120]
	007 Move X9, [X0+24]
	008 Move X8, [X0+32]
	009 Move V0, [X0+208]
	010 Move D1, 0.5
	011 Move X10, 0x80000000
	012 Subtract X8, X1, X8
	013 NotImplemented "Instruction SCVTF not yet implemented."
	014 Multiply D0, D0, D2
	015 Move D2, -0.5
	016 Move X8, 0x7FF00000
	017 Add D1, D0, D1
	018 Add D2, D0, D2
	019 NotImplemented "Instruction FCMP not yet implemented."
	020 Move D0, X8
	021 NotImplemented "Instruction FCSEL not yet implemented."
	022 NotImplemented "Instruction FCVTZS not yet implemented."
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 NotImplemented "Instruction CSEL not yet implemented."
	025 Add X0, X8, X9
	026 Move X30, [X31+16]
	027 Return X0
	028 Call 0x1C17F20

Method: System.Void IntersectPoint(UnityEngine.Rendering.Universal.TEdge edge1, UnityEngine.Rendering.Universal.TEdge edge2, out UnityEngine.Rendering.Universal.IntPoint ip)

Disassembly:
	0x03A0CA78 CBZ X20, 0x3A0CF4C
	0x03A0CA7C MOV X24, X20
	0x03A0CA80 LDR X20, [X20 + 0x48]
	0x03A0CA84 CBZ X20, 0x3A0CF4C
	0x03A0CA88 LDR X8, [X20 + 0x28]
	0x03A0CA8C LDR X9, [X24 + 0x28]
	0x03A0CA90 CMP X8, X9
	0x03A0CA94 B.NE 0x3A0CAA8
	0x03A0CA98 CMP X20, X21
	0x03A0CA9C B.EQ 0x3A0CAA8
	0x03A0CAA0 CMP X20, X22
	0x03A0CAA4 B.NE 0x3A0CA78
	0x03A0CAA8 CMP X20, X21
	0x03A0CAAC MOV W0, W31
	0x03A0CAB0 B.EQ 0x3A0CED8
	0x03A0CAB4 CMP X20, X22
	0x03A0CAB8 B.EQ 0x3A0CED8
	0x03A0CABC LDR X1, [X22 + 0x20]
	0x03A0CAC0 LDR X2, [X23 + 0x20]
	0x03A0CAC4 LDR X3, [X21 + 0x20]
	0x03A0CAC8 LDR X4, [X24 + 0x20]
	0x03A0CACC ADD X5, X31, 0x2B8
	0x03A0CAD0 ADD X6, X31, 0x2B0
	0x03A0CAD4 BL 0x3A0C494
	0x03A0CAD8 TBZ X0, 0x0, 0x3A0CED4
	0x03A0CADC LDR X8, [X22 + 0x20]
	0x03A0CAE0 LDR X11, [X31 + 0x2B8]
	0x03A0CAE4 LDR X10, [X31 + 0x2B0]
	0x03A0CAE8 CMP X8, X11
	0x03A0CAEC B.LT 0x3A0CDD8
	0x03A0CAF0 CMP X8, X10
	0x03A0CAF4 B.GT 0x3A0CDD8
	0x03A0CAF8 LDP V1, V0, [X25 + 0x10]
	0x03A0CAFC LDR V2, [X25]
	0x03A0CB00 STP V1, V0, [X31 + 0x290]
	0x03A0CB04 STR V2, [X31 + 0x28]
	0x03A0CB08 LDR X9, [X23 + 0x20]
	0x03A0CB0C B 0x3A0CF14
	0x03A0CB10 LDR X25, [X21 + 0x48]
	0x03A0CB14 CBZ X25, 0x3A0CF4C
	0x03A0CB18 LDR X9, [X21 + 0x20]
	0x03A0CB1C MOV X24, X0
	0x03A0CB20 ADD X26, X19, 0x20
	0x03A0CB24 LDR X10, [X25 + 0x28]
	0x03A0CB28 CMP X25, X21
	0x03A0CB2C B.EQ 0x3A0CB50
	0x03A0CB30 CMP X10, X8
	0x03A0CB34 B.NE 0x3A0CB50
	0x03A0CB38 LDR X11, [X25 + 0x20]
	0x03A0CB3C CMP X11, X9
	0x03A0CB40 B.NE 0x3A0CB50
	0x03A0CB44 LDR X25, [X25 + 0x48]
	0x03A0CB48 CBNZ X25, 0x3A0CB24
	0x03A0CB4C B 0x3A0CF4C
	0x03A0CB50 CMP X10, X8
	0x03A0CB54 ADD X27, X21, 0x18
	0x03A0CB58 B.GT 0x3A0CBB4
	0x03A0CB5C LDP V1, V0, [X27 + 0x10]
	0x03A0CB60 LDR V3, [X27]
	0x03A0CB64 ADD X0, X31, 0x220
	0x03A0CB68 ADD X1, X31, 0x1F0
	0x03A0CB6C STP V1, V0, [X31 + 0x230]
	0x03A0CB70 LDUR V0, [X25 + 0x38]
	0x03A0CB74 LDUR V1, [X25 + 0x28]
	0x03A0CB78 LDUR V2, [X25 + 0x18]
	0x03A0CB7C ADD X2, X31, 0x1C0
	0x03A0CB80 STP V0, V3, [X31 + 0x210]
	0x03A0CB84 STP V2, V1, [X31 + 0x1F0]
	0x03A0CB88 LDP V1, V0, [X26 + 0x10]
	0x03A0CB8C LDR V2, [X26]
	0x03A0CB90 STP V1, V0, [X31 + 0x1D0]
	0x03A0CB94 STR V2, [X31 + 0x1C]
	0x03A0CB98 LDRB W3, [X24 + 0x40]
	0x03A0CB9C BL 0x3A04950
	0x03A0CBA0 TBZ X0, 0x0, 0x3A0CBB4
	0x03A0CBA4 MOV W12, W31
	0x03A0CBA8 MOVZ W27, 0x1
	0x03A0CBAC CBNZ X20, 0x3A0CC44
	0x03A0CBB0 B 0x3A0CF4C
	0x03A0CBB4 MOV X25, X21
	0x03A0CBB8 LDR X25, [X25 + 0x50]
	0x03A0CBBC CBZ X25, 0x3A0CF4C
	0x03A0CBC0 LDR X8, [X25 + 0x28]
	0x03A0CBC4 LDR X9, [X21 + 0x28]
	0x03A0CBC8 CMP X25, X21
	0x03A0CBCC B.EQ 0x3A0CBE8
	0x03A0CBD0 LDR X10, [X25 + 0x20]
	0x03A0CBD4 LDR X11, [X21 + 0x20]
	0x03A0CBD8 CMP X10, X11
	0x03A0CBDC B.NE 0x3A0CBE8
	0x03A0CBE0 CMP X8, X9
	0x03A0CBE4 B.EQ 0x3A0CBB8
	0x03A0CBE8 CMP X8, X9
	0x03A0CBEC B.GT 0x3A0CED4
	0x03A0CBF0 LDP V1, V0, [X27 + 0x10]
	0x03A0CBF4 LDR V3, [X27]
	0x03A0CBF8 ADD X0, X31, 0x190
	0x03A0CBFC ADD X1, X31, 0x160
	0x03A0CC00 STP V1, V0, [X31 + 0x1A0]
	0x03A0CC04 LDUR V0, [X25 + 0x38]
	0x03A0CC08 LDUR V1, [X25 + 0x28]
	0x03A0CC0C LDUR V2, [X25 + 0x18]
	0x03A0CC10 ADD X2, X31, 0x130
	0x03A0CC14 STP V0, V3, [X31 + 0x180]
	0x03A0CC18 STP V2, V1, [X31 + 0x160]
	0x03A0CC1C LDP V1, V0, [X26 + 0x10]
	0x03A0CC20 LDR V2, [X26]
	0x03A0CC24 STP V1, V0, [X31 + 0x140]
	0x03A0CC28 STR V2, [X31 + 0x13]
	0x03A0CC2C LDRB W3, [X24 + 0x40]
	0x03A0CC30 BL 0x3A04950
	0x03A0CC34 MOV W27, W31
	0x03A0CC38 TBZ X0, 0x0, 0x3A0CDD0
	0x03A0CC3C MOVZ W12, 0x1
	0x03A0CC40 CBZ X20, 0x3A0CF4C
	0x03A0CC44 LDR X29, [X20 + 0x48]
	0x03A0CC48 CBZ X29, 0x3A0CF4C
	0x03A0CC4C LDP X9, X8, [X20 + 0x20]
	0x03A0CC50 LDR X10, [X29 + 0x28]
	0x03A0CC54 CMP X29, X20
	0x03A0CC58 B.EQ 0x3A0CC7C
	0x03A0CC5C LDR X11, [X29 + 0x20]
	0x03A0CC60 CMP X11, X9
	0x03A0CC64 B.NE 0x3A0CC7C
	0x03A0CC68 CMP X10, X8
	0x03A0CC6C B.NE 0x3A0CC7C
	0x03A0CC70 LDR X29, [X29 + 0x48]
	0x03A0CC74 CBNZ X29, 0x3A0CC50
	0x03A0CC78 B 0x3A0CF4C
	0x03A0CC7C CMP X10, X8
	0x03A0CC80 ADD X28, X20, 0x18
	0x03A0CC84 STR W12, [X31 + 0xC]
	0x03A0CC88 B.GT 0x3A0CCDC
	0x03A0CC8C LDP V1, V0, [X28 + 0x10]
	0x03A0CC90 LDR V3, [X28]
	0x03A0CC94 ADD X0, X31, 0x100
	0x03A0CC98 ADD X1, X31, 0xD0
	0x03A0CC9C STP V1, V0, [X31 + 0x110]
	0x03A0CCA0 LDUR V0, [X29 + 0x38]
	0x03A0CCA4 LDUR V1, [X29 + 0x28]
	0x03A0CCA8 LDUR V2, [X29 + 0x18]
	0x03A0CCAC ADD X2, X31, 0xA0
	0x03A0CCB0 STP V0, V3, [X31 + 0xF0]
	0x03A0CCB4 STP V2, V1, [X31 + 0xD0]
	0x03A0CCB8 LDP V1, V0, [X26 + 0x10]
	0x03A0CCBC LDR V2, [X26]
	0x03A0CCC0 STP V1, V0, [X31 + 0xB0]
	0x03A0CCC4 STR V2, [X31 + 0xA]
	0x03A0CCC8 LDRB W3, [X24 + 0x40]
	0x03A0CCCC BL 0x3A04950
	0x03A0CCD0 TBZ X0, 0x0, 0x3A0CCDC
	0x03A0CCD4 MOV W8, W31
	0x03A0CCD8 B 0x3A0CD64
	0x03A0CCDC MOV X29, X20
	0x03A0CCE0 LDR X29, [X29 + 0x50]
	0x03A0CCE4 CBZ X29, 0x3A0CF4C
	0x03A0CCE8 LDR X8, [X29 + 0x28]
	0x03A0CCEC LDR X9, [X20 + 0x28]
	0x03A0CCF0 CMP X29, X20
	0x03A0CCF4 B.EQ 0x3A0CD10
	0x03A0CCF8 LDR X10, [X29 + 0x20]
	0x03A0CCFC LDR X11, [X20 + 0x20]
	0x03A0CD00 CMP X10, X11
	0x03A0CD04 B.NE 0x3A0CD10
	0x03A0CD08 CMP X8, X9
	0x03A0CD0C B.EQ 0x3A0CCE0
	0x03A0CD10 CMP X8, X9
	0x03A0CD14 B.GT 0x3A0CED4
	0x03A0CD18 LDP V1, V0, [X28 + 0x10]
	0x03A0CD1C LDR V3, [X28]
	0x03A0CD20 ADD X0, X31, 0x70
	0x03A0CD24 ADD X1, X31, 0x40
	0x03A0CD28 STP V1, V0, [X31 + 0x80]
	0x03A0CD2C LDUR V0, [X29 + 0x38]
	0x03A0CD30 LDUR V1, [X29 + 0x28]
	0x03A0CD34 LDUR V2, [X29 + 0x18]
	0x03A0CD38 ADD X2, X31, 0x10
	0x03A0CD3C STP V0, V3, [X31 + 0x60]
	0x03A0CD40 STP V2, V1, [X31 + 0x40]
	0x03A0CD44 LDP V1, V0, [X26 + 0x10]
	0x03A0CD48 LDR V2, [X26]
	0x03A0CD4C STP V1, V0, [X31 + 0x20]
	0x03A0CD50 STR V2, [X31 + 0x1]
	0x03A0CD54 LDRB W3, [X24 + 0x40]
	0x03A0CD58 BL 0x3A04950
	0x03A0CD5C TBZ X0, 0x0, 0x3A0CED4
	0x03A0CD60 MOVZ W8, 0x1
	0x03A0CD64 CMP X25, X29
	0x03A0CD68 MOV W0, W31
	0x03A0CD6C B.EQ 0x3A0CED8
	0x03A0CD70 CMP X25, X21
	0x03A0CD74 B.EQ 0x3A0CED8
	0x03A0CD78 CMP X29, X20
	0x03A0CD7C B.EQ 0x3A0CED8
	0x03A0CD80 CMP X23, X22
	0x03A0CD84 B.NE 0x3A0CD94
	0x03A0CD88 LDR W9, [X31 + 0xC]
	0x03A0CD8C CMP W9, W8
	0x03A0CD90 B.EQ 0x3A0CED4
	0x03A0CD94 TBZ X27, 0x0, 0x3A0CE94
	0x03A0CD98 MOVZ W2, 0x1
	0x03A0CD9C MOV X1, X21
	0x03A0CDA0 BL 0x3A0C3B0
	0x03A0CDA4 MOV X1, X20
	0x03A0CDA8 MOV W2, W31
	0x03A0CDAC MOV X22, X0
	0x03A0CDB0 BL 0x3A0C3B0
	0x03A0CDB4 STR X20, [X21 + 0x48]
	0x03A0CDB8 STR X21, [X20 + 0x50]
	0x03A0CDBC CBZ X22, 0x3A0CF4C
	0x03A0CDC0 STR X0, [X22 + 0x50]
	0x03A0CDC4 CBZ X0, 0x3A0CF4C
	0x03A0CDC8 STR X22, [X0 + 0x48]
	0x03A0CDCC B 0x3A0CEC8
	0x03A0CDD0 MOV W0, W27
	0x03A0CDD4 B 0x3A0CED8
	0x03A0CDD8 LDR X9, [X21 + 0x20]
	0x03A0CDDC CMP X9, X11
	0x03A0CDE0 B.LT 0x3A0CE08
	0x03A0CDE4 CMP X9, X10
	0x03A0CDE8 B.GT 0x3A0CE08
	0x03A0CDEC LDP V1, V0, [X27 + 0x10]
	0x03A0CDF0 LDR V2, [X27]
	0x03A0CDF4 STP V1, V0, [X31 + 0x290]
	0x03A0CDF8 STR V2, [X31 + 0x28]
	0x03A0CDFC LDR X8, [X24 + 0x20]
	0x03A0CE00 CMP X9, X8
	0x03A0CE04 B 0x3A0CF18
	0x03A0CE08 LDR X12, [X23 + 0x20]
	0x03A0CE0C CMP X12, X11
	0x03A0CE10 B.LT 0x3A0CEFC
	0x03A0CE14 CMP X12, X10
	0x03A0CE18 B.GT 0x3A0CEFC
	0x03A0CE1C LDP V1, V0, [X26 + 0x10]
	0x03A0CE20 LDR V2, [X26]
	0x03A0CE24 CMP X12, X8
	0x03A0CE28 STP V1, V0, [X31 + 0x290]
	0x03A0CE2C STR V2, [X31 + 0x28]
	0x03A0CE30 B 0x3A0CF18
	0x03A0CE34 MOV X10, X21
	0x03A0CE38 LDR X10, [X10 + 0x28]
	0x03A0CE3C MOV X11, X20
	0x03A0CE40 LDR X11, [X11 + 0x48]
	0x03A0CE44 CMP X11, X20

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X23, 0x9D6000
	012 Move W8, [X23+3979]
	013 Move X19, X3
	014 Move X21, X2
	015 Move X20, X1
	016 Move X22, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x6E8000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+3979], W8
	026 NotImplemented "Instruction MOVI not yet implemented."
	027 Move [X19+16], V0
	028 Move [X19+24], V0
	029 Move [X19], V0
	030 Compare X21, 0
	031 JumpIfEqual {255}
	032 Move X9, [X21+64]
	033 Subtract X10, X9, 1
	034 NotImplemented "Instruction LDRSW not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Compare X20, 0
	037 JumpIfEqual {255}
	038 Move X11, [X20+64]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CSET not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction CSET not yet implemented."
	043 Or W8, W12, W8
	044 Compare X20, 0
	045 JumpIfEqual {255}
	046 Move W8, 1
	047 Move X11, [X20+64]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Add X31, X9, 1
	050 NotImplemented "Instruction CSET not yet implemented."
	051 Or W10, W9, W8
	052 NotImplemented "Instruction CSINV not yet implemented."
	053 Move TEMP, X10
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {65}
	057 Subtract X9, X11, 1
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction CSEL not yet implemented."
	060 Add X31, X11, 1
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction CSINV not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CSEL not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move W10, 2
	067 NotImplemented "Instruction CSINV not yet implemented."
	068 Move [X19+24], X10
	069 Move [X19], X8
	070 Move V8, [X20+208]
	071 Move V0, [X21+208]
	072 NotImplemented "Instruction FCMP not yet implemented."
	073 Move X1, [X20+80]
	074 Move [X19+16], X1
	075 Move X0, X20
	076 Call Clipper.TopX, X0, X1
	077 Move [X19+8], X0
	078 Move X20, [X31+64]
	079 Move X19, [X31+72]
	080 Move X22, [X31+48]
	081 Move X21, [X31+56]
	082 Move X30, [X31+32]
	083 Move X23, [X31+40]
	084 Move D9, [X31+16]
	085 Move D8, [X31+24]
	086 Move D11, [X31+80]
	087 Move D10, [X31+88]
	088 Return 
	089 Move X8, [X20+168]
	090 Compare X8, 0
	091 JumpIfEqual {147}
	092 Move X8, [X21+168]
	093 Compare X8, 0
	094 JumpIfEqual {169}
	095 Move D1, [X20+24]
	096 Move D2, [X20+32]
	097 Move D3, [X21+24]
	098 Move D4, [X21+32]
	099 Subtract D5, D8, D0
	100 Move X8, 0x7FF00000
	101 NotImplemented "Instruction SCVTF not yet implemented."
	102 NotImplemented "Instruction SCVTF not yet implemented."
	103 Multiply D2, D8, D2
	104 Subtract D10, D1, D2
	105 NotImplemented "Instruction SCVTF not yet implemented."
	106 NotImplemented "Instruction SCVTF not yet implemented."
	107 Multiply D3, D0, D3
	108 Subtract D9, D2, D3
	109 Subtract D2, D9, D10
	110 Move D1, -0.5
	111 NotImplemented "Instruction FDIV not yet implemented."
	112 Move D2, 0.5
	113 Add D1, D11, D1
	114 Add D2, D11, D2
	115 NotImplemented "Instruction FCMP not yet implemented."
	116 NotImplemented "Instruction FCSEL not yet implemented."
	117 Move D2, X8
	118 Move X9, 0x80000000
	119 NotImplemented "Instruction FCVTZS not yet implemented."
	120 NotImplemented "Instruction FCMP not yet implemented."
	121 NotImplemented "Instruction CSEL not yet implemented."
	122 Move [X19+16], X8
	123 Move X8, 0x6E8000
	124 Move X8, [X8+1448]
	125 Move X0, [X8]
	126 Move W8, [X0+224]
	127 Compare W8, 0
	128 JumpIfNotEqual {131}
	129 Call 0x1C17DFC
	130 Move V0, [X21+208]
	131 NotImplemented "Instruction FABS not yet implemented."
	132 NotImplemented "Instruction FABS not yet implemented."
	133 NotImplemented "Instruction FCMP not yet implemented."
	134 Move V1, [X20+208]
	135 Move D2, 0.5
	136 Move D3, -0.5
	137 Move X8, 0x7FF00000
	138 Multiply D1, D11, D1
	139 Add D1, D10, D1
	140 Add D2, D1, D2
	141 Add D3, D1, D3
	142 NotImplemented "Instruction FCMP not yet implemented."
	143 Move D1, X8
	144 NotImplemented "Instruction FCSEL not yet implemented."
	145 NotImplemented "Instruction FCVTZS not yet implemented."
	146 NotImplemented "Instruction FCMP not yet implemented."
	147 Move X8, [X20+24]
	148 Move [X19+8], X8
	149 Move X10, [X21+176]
	150 Move X9, [X21+32]
	151 Compare X10, 0
	152 JumpIfEqual {211}
	153 Move V1, [X21+24]
	154 NotImplemented "Instruction SCVTF not yet implemented."
	155 NotImplemented "Instruction SCVTF not yet implemented."
	156 NotImplemented "Instruction FDIV not yet implemented."
	157 NotImplemented "Instruction SCVTF not yet implemented."
	158 NotImplemented "Instruction FDIV not yet implemented."
	159 Subtract D1, D2, D1
	160 Move D2, 0.5
	161 Add D1, D3, D1
	162 Move D3, -0.5
	163 Move X8, 0x7FF00000
	164 Add D2, D1, D2
	165 Add D3, D1, D3
	166 NotImplemented "Instruction FCMP not yet implemented."
	167 Move D1, X8
	168 NotImplemented "Instruction FCSEL not yet implemented."
	169 Move X9, [X21+24]
	170 Move [X19+8], X9
	171 Move X10, [X20+176]
	172 Move X8, [X20+32]
	173 Compare X10, 0
	174 JumpIfEqual {195}
	175 Move V1, [X20+24]
	176 NotImplemented "Instruction SCVTF not yet implemented."
	177 NotImplemented "Instruction SCVTF not yet implemented."
	178 NotImplemented "Instruction FDIV not yet implemented."
	179 NotImplemented "Instruction SCVTF not yet implemented."
	180 NotImplemented "Instruction FDIV not yet implemented."
	181 Subtract D1, D3, D1
	182 Move D3, 0.5
	183 Add D1, D2, D1
	184 Move D2, -0.5
	185 Move X8, 0x7FF00000
	186 Add D3, D1, D3
	187 Add D2, D1, D2
	188 NotImplemented "Instruction FCMP not yet implemented."
	189 Move D1, X8
	190 NotImplemented "Instruction FCSEL not yet implemented."
	191 NotImplemented "Instruction FCVTZS not yet implemented."
	192 NotImplemented "Instruction FCMP not yet implemented."
	193 Move X9, 0x80000000
	194 NotImplemented "Instruction CSEL not yet implemented."
	195 Move [X19+16], X8
	196 Multiply D1, D11, D0
	197 Move D2, 0.5
	198 Move D3, -0.5
	199 Add D1, D9, D1
	200 Move X8, 0x7FF00000
	201 Add D2, D1, D2
	202 Add D3, D1, D3
	203 NotImplemented "Instruction FCMP not yet implemented."
	204 Move D4, X8
	205 NotImplemented "Instruction FCSEL not yet implemented."
	206 NotImplemented "Instruction FCVTZS not yet implemented."
	207 NotImplemented "Instruction FCMP not yet implemented."
	208 Move X9, 0x80000000
	209 NotImplemented "Instruction CSEL not yet implemented."
	210 Move [X19+8], X8
	211 Move [X19+16], X9
	212 Move X10, [X19+16]
	213 Move X8, [X20+128]
	214 Move X9, [X21+128]
	215 NotImplemented "Instruction CMP not yet implemented."
	216 NotImplemented "Instruction CMP not yet implemented."
	217 NotImplemented "Instruction CMP not yet implemented."
	218 NotImplemented "Instruction CSEL not yet implemented."
	219 Move X1, [X8+128]
	220 Move X8, 0x6E8000
	221 Move [X19+16], X1
	222 Move X8, [X8+1448]
	223 Move V8, [X20+208]
	224 Move X0, [X8]
	225 Move W8, [X0+224]
	226 Compare W8, 0
	227 JumpIfNotEqual {231}
	228 Call 0x1C17DFC
	229 Move V0, [X21+208]
	230 Move X1, [X19+16]
	231 NotImplemented "Instruction FABS not yet implemented."
	232 NotImplemented "Instruction FABS not yet implemented."
	233 NotImplemented "Instruction FCMP not yet implemented."
	234 NotImplemented "Instruction CSEL not yet implemented."
	235 Call Clipper.TopX, X0, X1
	236 Move [X19+8], X0
	237 Move X8, [X19+16]
	238 Move X1, [X20+80]
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Move [X19+16], X1
	241 Move X8, 0x6E8000
	242 Move X8, [X8+1448]
	243 Move V8, [X20+208]
	244 Move X0, [X8]
	245 Move W8, [X0+224]
	246 Compare W8, 0
	247 JumpIfNotEqual {250}
	248 Call 0x1C17DFC
	249 Move X1, [X19+16]
	250 Move V0, [X21+208]
	251 NotImplemented "Instruction FABS not yet implemented."
	252 NotImplemented "Instruction FABS not yet implemented."
	253 NotImplemented "Instruction FCMP not yet implemented."
	254 Move X0, X21
	255 Call 0x1C17F20

Method: System.Void ProcessEdgesAtTopOfScanbeam(System.Int64 topY)

Disassembly:
	0x03A09090 RET
	0x03A09094 BL 0x1C16F20
	0x03A09098 STR X30, [X31 - 0x30]!
	0x03A0909C STP X22, X21, [X31 + 0x10]
	0x03A090A0 STP X20, X19, [X31 + 0x20]
	0x03A090A4 ADRP X21, 0x9D8000
	0x03A090A8 LDRB W8, [X21 + 0xF7F]
	0x03A090AC MOV X19, X1
	0x03A090B0 MOV X20, X0
	0x03A090B4 TBNZ X8, 0x0, 0x3A090CC
	0x03A090B8 ADRP X0, 0x6EA000
	0x03A090BC LDR X0, [X0 + 0x5A8]
	0x03A090C0 BL 0x1C16CF4
	0x03A090C4 MOVZ W8, 0x1
	0x03A090C8 STRB W8, [X21 + 0xF7F]
	0x03A090CC CBZ X19, 0x3A092E4
	0x03A090D0 LDR X21, [X19 + 0x110]
	0x03A090D4 CBZ X21, 0x3A090F8
	0x03A090D8 LDR W8, [X19 + 0xD8]
	0x03A090DC LDR W9, [X21 + 0xD8]
	0x03A090E0 CMP W9, W8
	0x03A090E4 B.NE 0x3A090F0
	0x03A090E8 LDR W9, [X21 + 0xE0]
	0x03A090EC CBNZ W9, 0x3A09134
	0x03A090F0 LDR X21, [X21 + 0x110]
	0x03A090F4 CBNZ X21, 0x3A090DC
	0x03A090F8 LDR W9, [X19 + 0xE0]
	0x03A090FC CBNZ W9, 0x3A09124
	0x03A09100 LDR W8, [X19 + 0xD8]
	0x03A09104 MOVZ W9, 0x6C
	0x03A09108 MOVZ W10, 0x70
	0x03A0910C CMP W8, 0x0
	0x03A09110 CSEL X8, X10, X9, EQ
	0x03A09114 LDR W8, [X20, X8, LSL]
	0x03A09118 CMP W8, 0x3
	0x03A0911C MOVN W8, 0x0
	0x03A09120 CSNEG W9, W8, W8, EQ
	0x03A09124 MOV W8, W31
	0x03A09128 STP W9, W31, [X19 + 0xE4]
	0x03A0912C ADD X9, X20, 0x38
	0x03A09130 B 0x3A09268
	0x03A09134 LDR W10, [X19 + 0xE0]
	0x03A09138 CBZ W10, 0x3A09174
	0x03A0913C CMP W8, 0x0
	0x03A09140 MOVZ W8, 0x6C
	0x03A09144 MOVZ W11, 0x70
	0x03A09148 CSEL X8, X11, X8, EQ
	0x03A0914C LDR W8, [X20, X8, LSL]
	0x03A09150 CBZ W8, 0x3A09258
	0x03A09154 LDR W22, [X21 + 0xE4]
	0x03A09158 MUL W8, W22, W9
	0x03A0915C TBNZ X8, 0x1F, 0x3A091B8
	0x03A09160 MUL W8, W10, W9
	0x03A09164 CMP W8, 0x0
	0x03A09168 CSEL W8, W31, W10, LT
	0x03A0916C ADD W8, W22, W8
	0x03A09170 B 0x3A09210
	0x03A09174 LDR W10, [X20 + 0x44]
	0x03A09178 CMP W10, 0x1
	0x03A0917C B.NE 0x3A091F0
	0x03A09180 CMP W8, 0x0
	0x03A09184 MOVZ W10, 0x6C
	0x03A09188 MOVZ W11, 0x70
	0x03A0918C CSEL X10, X11, X10, EQ
	0x03A09190 LDR W10, [X20, X10, LSL]
	0x03A09194 CBZ W10, 0x3A09218
	0x03A09198 LDR W22, [X21 + 0xE4]
	0x03A0919C MUL W8, W22, W9
	0x03A091A0 TBNZ X8, 0x1F, 0x3A091B8
	0x03A091A4 CMP W22, 0x0
	0x03A091A8 MOVZ W8, 0x1
	0x03A091AC CSNEG W8, W8, W8, GE
	0x03A091B0 ADD W8, W8, W22
	0x03A091B4 B 0x3A09210
	0x03A091B8 ADRP X8, 0x6EA000
	0x03A091BC LDR X8, [X8 + 0x5A8]
	0x03A091C0 LDR X0, [X8]
	0x03A091C4 LDR W8, [X0 + 0xE0]
	0x03A091C8 CBNZ W8, 0x3A091D0
	0x03A091CC BL 0x1C16DFC
	0x03A091D0 CMP W22, 0x0
	0x03A091D4 CSNEG W8, W22, W22, PL
	0x03A091D8 CMP W8, 0x2
	0x03A091DC B.CS 0x3A091F8
	0x03A091E0 LDR W8, [X19 + 0xE0]
	0x03A091E4 CMP W8, 0x0
	0x03A091E8 CSINC W8, W8, W31, NE
	0x03A091EC B 0x3A09210
	0x03A091F0 MOVZ W8, 0x1
	0x03A091F4 B 0x3A09210
	0x03A091F8 LDR W8, [X19 + 0xE0]
	0x03A091FC LDP W9, W10, [X21 + 0xE0]
	0x03A09200 MUL W9, W8, W9
	0x03A09204 CMP W9, 0x0
	0x03A09208 CSEL W8, W31, W8, LT
	0x03A0920C ADD W8, W10, W8
	0x03A09210 STR W8, [X19 + 0xE4]
	0x03A09214 B 0x3A0925C
	0x03A09218 LDR X10, [X21 + 0x110]
	0x03A0921C CBZ X10, 0x3A0924C
	0x03A09220 MOVZ W9, 0x1
	0x03A09224 LDR W11, [X10 + 0xD8]
	0x03A09228 CMP W11, W8
	0x03A0922C B.NE 0x3A09240
	0x03A09230 LDR W11, [X10 + 0xE0]
	0x03A09234 CMP W11, 0x0
	0x03A09238 CSET W11, NE
	0x03A0923C EOR W9, W9, W11, 0x0
	0x03A09240 LDR X10, [X10 + 0x110]
	0x03A09244 CBNZ X10, 0x3A09224
	0x03A09248 B 0x3A09250
	0x03A0924C MOVZ W9, 0x1
	0x03A09250 ORN W8, W31, W9, 0x0
	0x03A09254 AND W10, W8, 0x1
	0x03A09258 STR W10, [X19 + 0xE4]
	0x03A0925C LDR W8, [X21 + 0xE8]
	0x03A09260 ADD X9, X21, 0x108
	0x03A09264 STR W8, [X19 + 0xE8]
	0x03A09268 LDR W10, [X19 + 0xD8]
	0x03A0926C MOVZ W11, 0x70
	0x03A09270 LDR X9, [X9]
	0x03A09274 CMP W10, 0x0
	0x03A09278 MOVZ W10, 0x6C
	0x03A0927C CSEL X10, X10, X11, EQ
	0x03A09280 LDR W10, [X20, X10, LSL]
	0x03A09284 CMP X9, X19
	0x03A09288 CBZ W10, 0x3A092D0
	0x03A0928C B.EQ 0x3A092D4
	0x03A09290 CBZ X9, 0x3A092E4
	0x03A09294 LDR W10, [X9 + 0xE0]
	0x03A09298 ADD W8, W10, W8
	0x03A0929C STR W8, [X19 + 0xE8]
	0x03A092A0 LDR X9, [X9 + 0x108]
	0x03A092A4 CMP X9, X19
	0x03A092A8 B.NE 0x3A09290
	0x03A092AC B 0x3A092D4
	0x03A092B0 CBZ X9, 0x3A092E4
	0x03A092B4 LDR W10, [X9 + 0xE0]
	0x03A092B8 CBZ W10, 0x3A092C8
	0x03A092BC CMP W8, 0x0
	0x03A092C0 CSET W8, EQ
	0x03A092C4 STR W8, [X19 + 0xE8]
	0x03A092C8 LDR X9, [X9 + 0x108]
	0x03A092CC CMP X9, X19
	0x03A092D0 B.NE 0x3A092B0
	0x03A092D4 LDP X20, X19, [X31 + 0x20]
	0x03A092D8 LDP X22, X21, [X31 + 0x10]
	0x03A092DC LDR X30, [X31], #0x30
	0x03A092E0 RET
	0x03A092E4 BL 0x1C16F20
	0x03A092E8 STR X30, [X31 - 0x30]!
	0x03A092EC STP X22, X21, [X31 + 0x10]
	0x03A092F0 STP X20, X19, [X31 + 0x20]
	0x03A092F4 ADRP X21, 0x9D8000
	0x03A092F8 LDRB W8, [X21 + 0xF7E]
	0x03A092FC MOV X19, X1
	0x03A09300 MOV X20, X0
	0x03A09304 TBNZ X8, 0x0, 0x3A0931C
	0x03A09308 ADRP X0, 0x6EA000
	0x03A0930C LDR X0, [X0 + 0x5A8]
	0x03A09310 BL 0x1C16CF4
	0x03A09314 MOVZ W8, 0x1
	0x03A09318 STRB W8, [X21 + 0xF7E]
	0x03A0931C CBZ X19, 0x3A09450
	0x03A09320 LDR W8, [X19 + 0xD8]
	0x03A09324 MOVZ W9, 0x70
	0x03A09328 MOVZ W10, 0x6C
	0x03A0932C CMP W8, 0x0
	0x03A09330 CSEL X8, X9, X10, EQ
	0x03A09334 LDR W8, [X20, X8, LSL]
	0x03A09338 CSEL X9, X10, X9, EQ
	0x03A0933C LDR W21, [X20, X9, LSL]
	0x03A09340 CMP W8, 0x2
	0x03A09344 B.EQ 0x3A0935C
	0x03A09348 CMP W8, 0x1
	0x03A0934C B.EQ 0x3A09364
	0x03A09350 CBNZ W8, 0x3A093D8
	0x03A09354 LDR W8, [X19 + 0xE0]
	0x03A09358 CBNZ W8, 0x3A09390
	0x03A0935C LDR W8, [X19 + 0xE4]
	0x03A09360 B 0x3A09388
	0x03A09364 ADRP X8, 0x6EA000
	0x03A09368 LDR X8, [X8 + 0x5A8]
	0x03A0936C LDR W22, [X19 + 0xE4]
	0x03A09370 LDR X0, [X8]
	0x03A09374 LDR W8, [X0 + 0xE0]
	0x03A09378 CBNZ W8, 0x3A09380
	0x03A0937C BL 0x1C16DFC
	0x03A09380 CMP W22, 0x0
	0x03A09384 CSNEG W8, W22, W22, PL
	0x03A09388 CMP W8, 0x1
	0x03A0938C B.NE 0x3A093E4
	0x03A09390 LDR W8, [X20 + 0x44]
	0x03A09394 CMP W8, 0x3
	0x03A09398 B.HI 0x3A093F4
	0x03A0939C ADRP X9, 0xFFFFFFFFFD18E000
	0x03A093A0 ADD X9, X9, 0xAC9
	0x03A093A4 ADR X10, 0x10
	0x03A093A8 LDRB W11, [X9, X8, LSL]
	0x03A093AC ADD X10, X10, X11, 0x2, LSL
	0x03A093B0 BR X10
	0x03A093B4 LDR W8, [X19 + 0xD8]
	0x03A093B8 CBZ W8, 0x3A093FC
	0x03A093BC CMP W21, 0x2
	0x03A093C0 B.CC 0x3A09428
	0x03A093C4 LDR W8, [X19 + 0xE8]
	0x03A093C8 B.NE 0x3A0943C
	0x03A093CC CMP W8, 0x0
	0x03A093D0 CSET W0, GT
	0x03A093D4 B 0x3A09440
	0x03A093D8 LDR W8, [X19 + 0xE4]
	0x03A093DC ADDS W31, W8, 0x1
	0x03A093E0 B.EQ 0x3A09390
	0x03A093E4 MOV W0, W31
	0x03A093E8 B 0x3A09440
	0x03A093EC LDR W8, [X19 + 0xE0]
	0x03A093F0 CBZ W8, 0x3A093FC
	0x03A093F4 MOVZ W0, 0x1
	0x03A093F8 B 0x3A09440
	0x03A093FC CMP W21, 0x2
	0x03A09400 B.CC 0x3A09418
	0x03A09404 LDR W8, [X19 + 0xE8]
	0x03A09408 B.NE 0x3A09438
	0x03A0940C CMP W8, 0x1
	0x03A09410 CSET W0, LT
	0x03A09414 B 0x3A09440
	0x03A09418 LDR W8, [X19 + 0xE8]
	0x03A0941C CMP W8, 0x0
	0x03A09420 CSET W0, EQ
	0x03A09424 B 0x3A09440
	0x03A09428 LDR W8, [X19 + 0xE8]
	0x03A0942C CMP W8, 0x0
	0x03A09430 CSET W0, NE
	0x03A09434 B 0x3A09440
	0x03A09438 ORN W8, W31, W8, 0x0
	0x03A0943C UBFM W0, W8, 0x1F, 0x1F
	0x03A09440 LDP X20, X19, [X31 + 0x20]
	0x03A09444 LDP X22, X21, [X31 + 0x10]
	0x03A09448 LDR X30, [X31], #0x30
	0x03A0944C RET
	0x03A09450 BL 0x1C16F20
	0x03A09454 STP X30, X23, [X31 - 0x30]!
	0x03A09458 STP X22, X21, [X31 + 0x10]
	0x03A0945C STP X20, X19, [X31 + 0x20]
	0x03A09460 ADRP X21, 0x9D8000
	0x03A09464 LDRB W8, [X21 + 0xF80]
	0x03A09468 MOV X19, X2
	0x03A0946C MOV X20, X1
	0x03A09470 MOV X22, X0
	0x03A09474 TBNZ X8, 0x0, 0x3A09498
	0x03A09478 ADRP X0, 0x74B000
	0x03A0947C LDR X0, [X0 + 0x268]
	0x03A09480 BL 0x1C16CF4
	0x03A09484 ADRP X0, 0x74B000
	0x03A09488 LDR X0, [X0 + 0x388]
	0x03A0948C BL 0x1C16CF4
	0x03A09490 MOVZ W8, 0x1
	0x03A09494 STRB W8, [X21 + 0xF80]
	0x03A09498 CBZ X20, 0x3A09624
	0x03A0949C LDR W1, [X20 + 0xEC]
	0x03A094A0 TBNZ X1, 0x1F, 0x3A09500
	0x03A094A4 LDR X0, [X22 + 0x30]
	0x03A094A8 CBZ X0, 0x3A09624
	0x03A094AC ADRP X8, 0x74B000
	0x03A094B0 LDR X8, [X8 + 0x268]
	0x03A094B4 LDR X2, [X8]
	0x03A094B8 BL 0x301BCCC
	0x03A094BC CBZ X0, 0x3A09624
	0x03A094C0 LDR W20, [X20 + 0xDC]
	0x03A094C4 LDR X23, [X0 + 0x20]
	0x03A094C8 MOV X22, X0
	0x03A094CC CBZ W20, 0x3A09588
	0x03A094D0 CBZ X23, 0x3A09624
	0x03A094D4 LDR X21, [X23 + 0x50]
	0x03A094D8 CBZ X21, 0x3A09624
	0x03A094DC LDR X8, [X19 + 0x8]
	0x03A094E0 LDR X9, [X21 + 0x20]
	0x03A094E4 CMP X8, X9
	0x03A094E8 B.NE 0x3A095B4
	0x03A094EC LDR X8, [X19 + 0x10]
	0x03A094F0 LDR X9, [X21 + 0x28]
	0x03A094F4 CMP X8, X9
	0x03A094F8 B.NE 0x3A095B4
	0x03A094FC B 0x3A09610
	0x03A09500 MOV X0, X22
	0x03A09504 BL 0x3A065DC
	0x03A09508 CBZ X0, 0x3A09624
	0x03A0950C LDR W8, [X20 + 0xE0]
	0x03A09510 MOV X23, X0
	0x03A09514 CMP W8, 0x0
	0x03A09518 CSET W8, EQ
	0x03A0951C STRB W8, [X0 + 0x15]
	0x03A09520 ADRP X8, 0x74B000
	0x03A09524 LDR X8, [X8 + 0x388]
	0x03A09528 LDR X0, [X8]
	0x03A0952C BL 0x1C16F10
	0x03A09530 MOV X1, X31
	0x03A09534 MOV X21, X0
	0x03A09538 BL 0x33BDD8C
	0x03A0953C STR X21, [X23 + 0x20]
	0x03A09540 CBZ X21, 0x3A09624
	0x03A09544 LDR W8, [X23 + 0x10]
	0x03A09548 STR W8, [X21 + 0x10]

ISIL:
	001 Move [X31-96], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X29
	005 Move [X31+32], X30
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 832
	014 Move X21, [X0+56]
	015 Move X19, X0
	016 NotImplemented "Instruction SCVTF not yet implemented."
	017 Move [X31+824], X21
	018 Compare X21, 0
	019 JumpIfEqual {168}
	020 Move X20, X1
	021 Move V0, [X21+128]
	022 NotImplemented "Instruction SCVTF not yet implemented."
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 Move X8, [X21+256]
	025 Compare X8, 0
	026 JumpIfEqual {115}
	027 Move V0, [X21+128]
	028 NotImplemented "Instruction SCVTF not yet implemented."
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 Move X8, [X21+256]
	031 Compare X8, 0
	032 JumpIfEqual {36}
	033 Move X8, [X8+176]
	034 Compare X8, 0
	035 JumpIfEqual {140}
	036 Move X0, X21
	037 Move X1, X20
	038 Call Clipper.TopX, X0, X1
	039 Move [X21+72], X0
	040 Move X8, [X31+824]
	041 Compare X8, 0
	042 JumpIfEqual {167}
	043 Move [X8+80], X20
	044 Move W8, [X19+145]
	045 Compare W8, 0
	046 JumpIfEqual {108}
	047 Move X8, [X31+824]
	048 Compare X8, 0
	049 JumpIfEqual {167}
	050 Move W9, [X8+236]
	051 Move TEMP, X9
	052 And TEMP, TEMP, -2147483648
	053 Compare TEMP, -2147483648
	054 JumpIfEqual {108}
	055 Move X1, [X8+272]
	056 Compare X1, 0
	057 JumpIfEqual {108}
	058 Move W9, [X8+224]
	059 Compare W9, 0
	060 JumpIfEqual {108}
	061 Move W9, [X1+236]
	062 Move TEMP, X9
	063 And TEMP, TEMP, -2147483648
	064 Compare TEMP, -2147483648
	065 JumpIfEqual {108}
	066 Move X22, [X1+72]
	067 Move X9, [X8+72]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W9, [X1+224]
	070 Compare W9, 0
	071 JumpIfEqual {108}
	072 Move X23, [X8+64]
	073 Move X24, [X8+80]
	074 Move X25, [X8+88]
	075 Move D9, [X8+96]
	076 Move D10, [X8+104]
	077 Add X2, X31, 720
	078 Move X0, X19
	079 Move [X31+720], X23
	080 Move [X31+728], X22
	081 Move [X31+736], X24
	082 Move [X31+744], X25
	083 Move [X31+752], D9
	084 Move [X31+760], D10
	085 Call Clipper.AddOutPt, X0, X1, X2
	086 Move X1, [X31+824]
	087 Move X21, X0
	088 Add X2, X31, 672
	089 Move X0, X19
	090 Move [X31+672], X23
	091 Move [X31+680], X22
	092 Move [X31+688], X24
	093 Move [X31+696], X25
	094 Move [X31+704], D9
	095 Move [X31+712], D10
	096 Call Clipper.AddOutPt, X0, X1, X2
	097 Move X2, X0
	098 Add X3, X31, 624
	099 Move X0, X19
	100 Move X1, X21
	101 Move [X31+624], X23
	102 Move [X31+632], X22
	103 Move [X31+640], X24
	104 Move [X31+648], X25
	105 Move [X31+656], D9
	106 Move [X31+664], D10
	107 Call Clipper.AddJoin, X0, X1, X2, X3
	108 Move X8, [X31+824]
	109 Compare X8, 0
	110 JumpIfEqual {167}
	111 Move X21, [X8+264]
	112 Move [X31+824], X21
	113 Compare X21, 0
	114 JumpIfNotEqual {21}
	115 Move X1, X21
	116 Call Clipper.GetMaximaPairEx, X0, X1
	117 Compare X0, 0
	118 JumpIfEqual {122}
	119 Move X8, [X0+176]
	120 Compare X8, 0
	121 JumpIfEqual {164}
	122 Move W8, [X19+145]
	123 Compare W8, 0
	124 JumpIfEqual {131}
	125 Move X8, [X31+824]
	126 Compare X8, 0
	127 JumpIfEqual {167}
	128 Move X1, [X8+120]
	129 Move X0, X19
	130 Call Clipper.InsertMaxima, X0, X1
	131 Move X1, [X31+824]
	132 Compare X1, 0
	133 JumpIfEqual {167}
	134 Move X21, [X1+272]
	135 Move X0, X19
	136 Call Clipper.DoMaxima, X0, X1
	137 Compare X21, 0
	138 JumpIfEqual {163}
	139 Move X21, [X21+264]
	140 Add X1, X31, 824
	141 Move X0, X19
	142 Call ClipperBase.UpdateEdgeIntoAEL, X0, X1
	143 Move X1, [X31+824]
	144 Compare X1, 0
	145 JumpIfEqual {167}
	146 Move W8, [X1+236]
	147 Move TEMP, X8
	148 And TEMP, TEMP, -2147483648
	149 Compare TEMP, -2147483648
	150 JumpIfEqual {161}
	151 Move V1, [X1+32]
	152 Move V0, [X1+48]
	153 Move V2, [X1+1]
	154 Add X2, X31, 768
	155 Move X0, X19
	156 Move [X31+784], V1
	157 Move [X31+792], V0
	158 Move [X31+48], V2
	159 Call Clipper.AddOutPt, X0, X1, X2
	160 Move X1, [X31+824]
	161 Move X0, X19
	162 Call Clipper.AddEdgeToSEL, X0, X1
	163 Move X21, [X19+56]
	164 Move X21, [X31+824]
	165 Compare X21, 0
	166 JumpIfNotEqual {27}
	167 Call 0x1C17F20
	168 Move X0, X19
	169 Call Clipper.ProcessHorizontals, X0
	170 Move X1, [X19+56]
	171 Move [X19+72], X31
	172 Move [X31+824], X1
	173 Compare X1, 0
	174 JumpIfEqual {379}
	175 Move V0, [X1+128]
	176 NotImplemented "Instruction SCVTF not yet implemented."
	177 NotImplemented "Instruction FCMP not yet implemented."
	178 Move X8, [X1+256]
	179 Compare X8, 0
	180 JumpIfEqual {375}
	181 Move W8, [X1+236]
	182 Move TEMP, X8
	183 And TEMP, TEMP, -2147483648
	184 Compare TEMP, -2147483648
	185 JumpIfEqual {196}
	186 Move V1, [X1+128]
	187 Move V0, [X1+144]
	188 Move V2, [X1+7]
	189 Add X2, X31, 576
	190 Move X0, X19
	191 Move [X31+592], V1
	192 Move [X31+600], V0
	193 Move [X31+36], V2
	194 Call Clipper.AddOutPt, X0, X1, X2
	195 Move X20, X0
	196 Move X20, X31
	197 Add X1, X31, 824
	198 Move X0, X19
	199 Call ClipperBase.UpdateEdgeIntoAEL, X0, X1
	200 Move X8, [X31+824]
	201 Compare X8, 0
	202 JumpIfEqual {167}
	203 Move X21, [X8+264]
	204 Move X22, [X8+272]
	205 Compare X22, 0
	206 JumpIfEqual {287}
	207 Move X9, [X22+72]
	208 Move X10, [X8+24]
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Compare X20, 0
	211 JumpIfEqual {287}
	212 Move X9, [X22+80]
	213 Move X10, [X8+32]
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move W10, [X22+236]
	216 Move TEMP, X10
	217 And TEMP, TEMP, -2147483648
	218 Compare TEMP, -2147483648
	219 JumpIfEqual {287}
	220 Move X10, [X22+128]
	221 NotImplemented "Instruction CMP not yet implemented."
	222 Move V1, [X8+80]
	223 Move V0, [X8+96]
	224 Move V3, [X8+4]
	225 Add X0, X31, 528
	226 Add X1, X31, 480
	227 Move [X31+544], V1
	228 Move [X31+552], V0
	229 Move V1, [X8+128]
	230 Move V0, [X8+144]
	231 Move V2, [X8+7]
	232 Add X8, X22, 64
	233 Add X2, X31, 432
	234 Move [X31+512], V0
	235 Move [X31+520], V3
	236 Move [X31+480], V2
	237 Move [X31+488], V1
	238 Move V1, [X8+16]
	239 Move V0, [X8+32]
	240 Move V3, [X8]
	241 Add X3, X31, 384
	242 Move [X31+448], V1
	243 Move [X31+456], V0
	244 Move V1, [X22+128]
	245 Move V0, [X22+144]
	246 Move V2, [X22+7]
	247 Move [X31+416], V0
	248 Move [X31+424], V3
	249 Move [X31+384], V2
	250 Move [X31+392], V1
	251 Move W4, [X19+64]
	252 Call ClipperBase.SlopesEqual, X0, X1, X2, X3, X4
	253 Move TEMP, X0
	254 And TEMP, TEMP, 1
	255 Compare TEMP, 1
	256 JumpIfNotEqual {287}
	257 Move X8, [X31+824]
	258 Compare X8, 0
	259 JumpIfEqual {167}
	260 Move W9, [X8+224]
	261 Compare W9, 0
	262 JumpIfEqual {287}
	263 Move W9, [X22+224]
	264 Compare W9, 0
	265 JumpIfEqual {287}
	266 Move V1, [X8+32]
	267 Move V0, [X8+48]
	268 Move V2, [X8+1]
	269 Add X2, X31, 336
	270 Move X0, X19
	271 Move X1, X22
	272 Move [X31+352], V1
	273 Move [X31+360], V0
	274 Move [X31+21], V2
	275 Call Clipper.AddOutPt, X0, X1, X2
	276 Move X8, [X31+824]
	277 Compare X8, 0
	278 JumpIfEqual {167}
	279 Move V1, [X8+128]
	280 Move V0, [X8+144]
	281 Move V2, [X8+7]
	282 Move X2, X0
	283 Add X3, X31, 288
	284 Move [X31+304], V1
	285 Move [X31+312], V0
	286 Move [X31+18], V2
	287 Compare X21, 0
	288 JumpIfEqual {375}
	289 Move X8, [X31+824]
	290 Compare X8, 0
	291 JumpIfEqual {167}
	292 Move X9, [X21+72]
	293 Move X10, [X8+24]
	294 NotImplemented "Instruction CMP not yet implemented."
	295 Compare X20, 0
	296 JumpIfEqual {375}
	297 Move X9, [X21+80]
	298 Move X10, [X8+32]
	299 NotImplemented "Instruction CMP not yet implemented."
	300 Move W10, [X21+236]
	301 Move TEMP, X10
	302 And TEMP, TEMP, -2147483648
	303 Compare TEMP, -2147483648
	304 JumpIfEqual {375}
	305 Move X10, [X21+128]
	306 NotImplemented "Instruction CMP not yet implemented."
	307 Move V1, [X8+80]
	308 Move V0, [X8+96]
	309 Move V3, [X8+4]
	310 Add X0, X31, 240
	311 Add X1, X31, 192
	312 Move [X31+256], V1
	313 Move [X31+264], V0
	314 Move V1, [X8+128]
	315 Move V0, [X8+144]
	316 Move V2, [X8+7]
	317 Add X8, X21, 64
	318 Add X2, X31, 144
	319 Move [X31+224], V0
	320 Move [X31+232], V3
	321 Move [X31+192], V2
	322 Move [X31+200], V1
	323 Move V1, [X8+16]
	324 Move V0, [X8+32]
	325 Move V3, [X8]
	326 Add X3, X31, 96
	327 Move [X31+160], V1
	328 Move [X31+168], V0
	329 Move V1, [X21+128]
	330 Move V0, [X21+144]
	331 Move V2, [X21+7]
	332 Move [X31+128], V0
	333 Move [X31+136], V3
	334 Move [X31+96], V2
	335 Move [X31+104], V1
	336 Move W4, [X19+64]
	337 Call ClipperBase.SlopesEqual, X0, X1, X2, X3, X4
	338 Move TEMP, X0
	339 And TEMP, TEMP, 1
	340 Compare TEMP, 1
	341 JumpIfNotEqual {375}
	342 Move X8, [X31+824]
	343 Compare X8, 0
	344 JumpIfEqual {167}
	345 Move W9, [X8+224]
	346 Compare W9, 0
	347 JumpIfEqual {375}
	348 Move W9, [X21+224]
	349 Compare W9, 0
	350 JumpIfEqual {375}
	351 Move V1, [X8+32]
	352 Move V0, [X8+48]
	353 Move V2, [X8+1]
	354 Add X2, X31, 48
	355 Move X0, X19
	356 Move X1, X21
	357 Move [X31+64], V1
	358 Move [X31+72], V0
	359 Move [X31+3], V2
	360 Call Clipper.AddOutPt, X0, X1, X2
	361 Move X8, [X31+824]
	362 Compare X8, 0
	363 JumpIfEqual {167}
	364 Move V1, [X8+128]
	365 Move V0, [X8+144]
	366 Move V2, [X8+7]
	367 Move X2, X0
	368 Add X3, X31, 0
	369 Move [X31+16], V1
	370 Move [X31+24], V0
	371 Move [X31], V2
	372 Move X0, X19
	373 Move X1, X20
	374 Call Clipper.AddJoin, X0, X1, X2, X3
	375 Move X8, [X31+824]
	376 Compare X8, 0
	377 JumpIfEqual {167}
	378 Move X1, [X8+264]
	379 Add X31, X31, 832
	380 Move X20, [X31+80]
	381 Move X19, [X31+88]
	382 Move X22, [X31+64]
	383 Move X21, [X31+72]
	384 Move X24, [X31+48]
	385 Move X23, [X31+56]
	386 Move X30, [X31+32]
	387 Move X25, [X31+40]
	388 Move X29, [X31+24]
	389 Move D9, [X31+8]
	390 Move D8, [X31+16]
	391 Move V10, [X31+96]
	392 Return 

Method: System.Void DoMaxima(UnityEngine.Rendering.Universal.TEdge e)

Disassembly:
	0x03A0CEE0 LDP X20, X19, [X31 + 0x50]
	0x03A0CEE4 LDP X22, X21, [X31 + 0x40]
	0x03A0CEE8 LDP X24, X23, [X31 + 0x30]
	0x03A0CEEC LDP X26, X25, [X31 + 0x20]
	0x03A0CEF0 LDP X28, X27, [X31 + 0x10]
	0x03A0CEF4 LDP X29, X30, [X31], #0x60
	0x03A0CEF8 RET
	0x03A0CEFC ADD X8, X24, 0x18
	0x03A0CF00 LDP V1, V0, [X8 + 0x10]
	0x03A0CF04 LDR V2, [X8]
	0x03A0CF08 STP V1, V0, [X31 + 0x290]
	0x03A0CF0C STR V2, [X31 + 0x28]
	0x03A0CF10 LDR X8, [X24 + 0x20]
	0x03A0CF14 CMP X8, X9
	0x03A0CF18 STP X22, X21, [X19 + 0x10]
	0x03A0CF1C LDP V0, V1, [X31 + 0x280]
	0x03A0CF20 LDR V2, [X31 + 0x2A]
	0x03A0CF24 CSET W6, GT
	0x03A0CF28 ADD X5, X31, 0x250
	0x03A0CF2C MOV X1, X22
	0x03A0CF30 MOV X2, X23
	0x03A0CF34 MOV X3, X21
	0x03A0CF38 MOV X4, X24
	0x03A0CF3C STP V0, V1, [X31 + 0x250]
	0x03A0CF40 STR V2, [X31 + 0x27]
	0x03A0CF44 BL 0x3A0C5AC
	0x03A0CF48 B 0x3A0CED8
	0x03A0CF4C BL 0x1C16F20
	0x03A0CF50 SUB X31, X31, 0x80
	0x03A0CF54 STP X30, X27, [X31 + 0x30]
	0x03A0CF58 STP X26, X25, [X31 + 0x40]
	0x03A0CF5C STP X24, X23, [X31 + 0x50]
	0x03A0CF60 STP X22, X21, [X31 + 0x60]
	0x03A0CF64 STP X20, X19, [X31 + 0x70]
	0x03A0CF68 ADRP X21, 0x9D5000
	0x03A0CF6C LDRB W8, [X21 + 0xF91]
	0x03A0CF70 MOV X19, X1
	0x03A0CF74 MOV X20, X0
	0x03A0CF78 TBNZ X8, 0x0, 0x3A0CF9C
	0x03A0CF7C ADRP X0, 0x748000
	0x03A0CF80 LDR X0, [X0 + 0x200]
	0x03A0CF84 BL 0x1C16CF4
	0x03A0CF88 ADRP X0, 0x748000
	0x03A0CF8C LDR X0, [X0 + 0x210]
	0x03A0CF90 BL 0x1C16CF4
	0x03A0CF94 MOVZ W8, 0x1
	0x03A0CF98 STRB W8, [X21 + 0xF91]
	0x03A0CF9C CBZ X19, 0x3A0D108
	0x03A0CFA0 LDR W23, [X19 + 0x18]
	0x03A0CFA4 CMP W23, 0x3
	0x03A0CFA8 B.LT 0x3A0D0DC
	0x03A0CFAC ADRP X24, 0x748000
	0x03A0CFB0 LDR X24, [X24 + 0x210]
	0x03A0CFB4 ADD X8, X31, 0x0
	0x03A0CFB8 MOV X0, X19
	0x03A0CFBC MOV W1, W31
	0x03A0CFC0 LDR X2, [X24]
	0x03A0CFC4 BL 0x2FE4360
	0x03A0CFC8 LDP X8, X9, [X31 + 0x8]
	0x03A0CFCC MOV W21, W31
	0x03A0CFD0 MOVZ W25, 0x1
	0x03A0CFD4 MOVZ W22, 0x1
	0x03A0CFD8 CMP W23, W22
	0x03A0CFDC MOV X26, X9
	0x03A0CFE0 MOV X27, X8
	0x03A0CFE4 B.NE 0x3A0CFFC
	0x03A0CFE8 LDR X2, [X24]
	0x03A0CFEC ADD X8, X31, 0x0
	0x03A0CFF0 MOV X0, X19
	0x03A0CFF4 MOV W1, W31
	0x03A0CFF8 B 0x3A0D00C
	0x03A0CFFC LDR X2, [X24]
	0x03A0D000 ADD X8, X31, 0x0
	0x03A0D004 MOV X0, X19
	0x03A0D008 MOV W1, W22
	0x03A0D00C BL 0x2FE4360
	0x03A0D010 LDP X8, X9, [X31 + 0x8]
	0x03A0D014 LDR X11, [X20 + 0x10]
	0x03A0D018 CMP X9, X11
	0x03A0D01C B.NE 0x3A0D04C
	0x03A0D020 LDR X10, [X20 + 0x8]
	0x03A0D024 CMP X8, X10
	0x03A0D028 B.EQ 0x3A0D0E4
	0x03A0D02C CMP X26, X9
	0x03A0D030 B.NE 0x3A0D04C
	0x03A0D034 CMP X8, X10
	0x03A0D038 CSET W12, GT
	0x03A0D03C CMP X27, X10
	0x03A0D040 CSET W10, LT
	0x03A0D044 CMP W12, W10
	0x03A0D048 B.EQ 0x3A0D0E4
	0x03A0D04C SUBS X10, X26, X11
	0x03A0D050 CSET W12, GE
	0x03A0D054 SUBS X11, X9, X11
	0x03A0D058 CSET W13, LT
	0x03A0D05C EOR W12, W12, W13, 0x0
	0x03A0D060 TBNZ X12, 0x0, 0x3A0D0CC
	0x03A0D064 LDR X13, [X20 + 0x8]
	0x03A0D068 SUBS X12, X27, X13
	0x03A0D06C B.GE 0x3A0D07C
	0x03A0D070 SUBS X13, X8, X13
	0x03A0D074 B.GT 0x3A0D08C
	0x03A0D078 B 0x3A0D0CC
	0x03A0D07C SUBS X13, X8, X13
	0x03A0D080 B.LE 0x3A0D08C
	0x03A0D084 SUB W21, W25, W21
	0x03A0D088 B 0x3A0D0CC
	0x03A0D08C SCVTF D0, X12
	0x03A0D090 SCVTF D1, X11
	0x03A0D094 SCVTF D2, X13
	0x03A0D098 SCVTF D3, X10
	0x03A0D09C FMUL D0, D1, D0
	0x03A0D0A0 FMUL D1, D3, D2
	0x03A0D0A4 FSUB D0, D0, D1
	0x03A0D0A8 FCMP D0, 0x0
	0x03A0D0AC B.EQ 0x3A0D0E4
	0x03A0D0B0 CSET W10, LE
	0x03A0D0B4 CMP X9, X26
	0x03A0D0B8 CSET W11, GT
	0x03A0D0BC EOR W10, W11, W10, 0x0
	0x03A0D0C0 SUB W11, W25, W21
	0x03A0D0C4 CMP W10, 0x0
	0x03A0D0C8 CSEL W21, W11, W21, NE
	0x03A0D0CC ADD W22, W22, 0x1
	0x03A0D0D0 CMP W22, W23

ISIL:
	001 Subtract X31, X31, 304
	002 Move [X31+240], X29
	003 Move [X31+256], X30
	004 Move [X31+264], X23
	005 Move [X31+272], X22
	006 Move [X31+280], X21
	007 Move [X31+288], X20
	008 Move [X31+296], X19
	009 Move X20, X1
	010 Move X19, X0
	011 Call Clipper.GetMaximaPairEx, X0, X1
	012 Compare X20, 0
	013 JumpIfEqual {157}
	014 Move X21, X0
	015 Compare X0, 0
	016 JumpIfEqual {63}
	017 Move X22, [X20+264]
	018 Compare X22, 0
	019 JumpIfEqual {41}
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Add X23, X20, 112
	022 Move V1, [X23+16]
	023 Move V0, [X23+32]
	024 Move V2, [X23]
	025 Add X3, X31, 144
	026 Move X0, X19
	027 Move X1, X20
	028 Move X2, X22
	029 Move [X31+160], V1
	030 Move [X31+168], V0
	031 Move [X31+9], V2
	032 Call Clipper.IntersectEdges, X0, X1, X2, X3
	033 Move X0, X19
	034 Move X1, X20
	035 Move X2, X22
	036 Call ClipperBase.SwapPositionsInAEL, X0, X1, X2
	037 Move X22, [X20+264]
	038 Compare X22, 0
	039 JumpIfEqual {41}
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W8, [X20+236]
	042 Add W31, W8, 1
	043 Move TEMP, X8
	044 And TEMP, TEMP, -2147483648
	045 Compare TEMP, -2147483648
	046 JumpIfEqual {82}
	047 Move W8, [X21+236]
	048 Move TEMP, X8
	049 And TEMP, TEMP, -2147483648
	050 Compare TEMP, -2147483648
	051 JumpIfEqual {106}
	052 Move V1, [X20+128]
	053 Move V0, [X20+144]
	054 Move V2, [X20+7]
	055 Add X3, X31, 96
	056 Move X0, X19
	057 Move X1, X20
	058 Move X2, X21
	059 Move [X31+112], V1
	060 Move [X31+120], V0
	061 Move [X31+6], V2
	062 Call Clipper.AddLocalMaxPoly, X0, X1, X2, X3
	063 Move W8, [X20+236]
	064 Move TEMP, X8
	065 And TEMP, TEMP, -2147483648
	066 Compare TEMP, -2147483648
	067 JumpIfEqual {78}
	068 Move V1, [X20+128]
	069 Move V0, [X20+144]
	070 Move V2, [X20+7]
	071 Add X2, X31, 192
	072 Move X0, X19
	073 Move X1, X20
	074 Move [X31+208], V1
	075 Move [X31+216], V0
	076 Move [X31+12], V2
	077 Call Clipper.AddOutPt, X0, X1, X2
	078 Move X0, X19
	079 Move X1, X20
	080 Move W8, [X21+236]
	081 Add W31, W8, 1
	082 Move W8, [X20+224]
	083 Compare W8, 0
	084 JumpIfEqual {123}
	085 Move X0, 0x749000
	086 Move X0, [X0+456]
	087 Call 0x1C17D08
	088 Call 0x1C17F10
	089 Move X19, X0
	090 Move X0, 0x748000
	091 Move X0, [X0+952]
	092 Call 0x1C17D08
	093 Move X1, X0
	094 Move X0, X19
	095 Move X2, X31
	096 Call ClipperException..ctor, X0, X1
	097 Move X0, 0x748000
	098 Move X0, [X0+960]
	099 Call 0x1C17D08
	100 Move X1, X0
	101 Move X0, X19
	102 Call 0x1C17DEC
	103 Move X0, X19
	104 Move X1, X20
	105 Call ClipperBase.DeleteFromAEL, X0, X1
	106 Move W8, [X20+224]
	107 Compare W8, 0
	108 JumpIfNotEqual {85}
	109 Move V1, [X20+128]
	110 Move V0, [X20+144]
	111 Move V2, [X20+7]
	112 Add X2, X31, 48
	113 Move X0, X19
	114 Move X1, X20
	115 Move [X31+64], V1
	116 Move [X31+72], V0
	117 Move [X31+3], V2
	118 Call Clipper.AddOutPt, X0, X1, X2
	119 Move TEMP, 0
	120 Not TEMP
	121 Move W8, TEMP
	122 Move [X20+236], W8
	123 Move X0, X19
	124 Move X1, X20
	125 Call ClipperBase.DeleteFromAEL, X0, X1
	126 Move W8, [X21+236]
	127 Move TEMP, X8
	128 And TEMP, TEMP, -2147483648
	129 Compare TEMP, -2147483648
	130 JumpIfEqual {145}
	131 Move V1, [X20+128]
	132 Move V0, [X20+144]
	133 Move V2, [X20+7]
	134 Add X2, X31, 0
	135 Move X0, X19
	136 Move X1, X21
	137 Move [X31+16], V1
	138 Move [X31+24], V0
	139 Move [X31], V2
	140 Call Clipper.AddOutPt, X0, X1, X2
	141 Move TEMP, 0
	142 Not TEMP
	143 Move W8, TEMP
	144 Move [X21+236], W8
	145 Move X0, X19
	146 Move X1, X21
	147 Move X20, [X31+288]
	148 Move X19, [X31+296]
	149 Move X22, [X31+272]
	150 Move X21, [X31+280]
	151 Move X30, [X31+256]
	152 Move X23, [X31+264]
	153 Move X29, [X31+240]
	154 Add X31, X31, 304
	155 Call ClipperBase.DeleteFromAEL, X0, X1
	156 Return 
	157 Call 0x1C17F20

Method: System.Void ReversePaths(System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> polys)

Disassembly:
	0x03A0D0D4 B.LE 0x3A0CFD8
	0x03A0D0D8 B 0x3A0D0E8
	0x03A0D0DC MOV W21, W31
	0x03A0D0E0 B 0x3A0D0E8
	0x03A0D0E4 MOVN W21, 0x0
	0x03A0D0E8 MOV W0, W21
	0x03A0D0EC LDP X20, X19, [X31 + 0x70]
	0x03A0D0F0 LDP X22, X21, [X31 + 0x60]
	0x03A0D0F4 LDP X24, X23, [X31 + 0x50]
	0x03A0D0F8 LDP X26, X25, [X31 + 0x40]
	0x03A0D0FC LDP X30, X27, [X31 + 0x30]
	0x03A0D100 ADD X31, X31, 0x80
	0x03A0D104 RET
	0x03A0D108 BL 0x1C16F20
	0x03A0D10C STR X30, [X31 - 0x10]!
	0x03A0D110 CBZ X1, 0x3A0D204
	0x03A0D114 MOV X8, X0
	0x03A0D118 LDP X9, X8, [X8 + 0x8]
	0x03A0D11C LDP X15, X14, [X1 + 0x20]
	0x03A0D120 MOV W0, W31
	0x03A0D124 MOVZ W10, 0x1
	0x03A0D128 MOV X11, X1
	0x03A0D12C LDR X11, [X11 + 0x48]
	0x03A0D130 CBZ X11, 0x3A0D204
	0x03A0D134 LDP X12, X13, [X11 + 0x20]
	0x03A0D138 CMP X13, X8
	0x03A0D13C B.NE 0x3A0D168
	0x03A0D140 CMP X12, X9
	0x03A0D144 B.EQ 0x3A0D1F8
	0x03A0D148 CMP X14, X8
	0x03A0D14C B.NE 0x3A0D168
	0x03A0D150 CMP X12, X9
	0x03A0D154 CSET W16, GT
	0x03A0D158 CMP X15, X9
	0x03A0D15C CSET W17, LT
	0x03A0D160 CMP W17, W16
	0x03A0D164 B.EQ 0x3A0D1F8
	0x03A0D168 SUBS X16, X14, X8
	0x03A0D16C CSET W2, GE
	0x03A0D170 SUBS X17, X13, X8
	0x03A0D174 CSET W3, LT
	0x03A0D178 EOR W2, W2, W3, 0x0
	0x03A0D17C TBNZ X2, 0x0, 0x3A0D1E4
	0x03A0D180 SUBS X15, X15, X9
	0x03A0D184 B.GE 0x3A0D194
	0x03A0D188 SUBS X2, X12, X9
	0x03A0D18C B.GT 0x3A0D1A4
	0x03A0D190 B 0x3A0D1E4
	0x03A0D194 SUBS X2, X12, X9
	0x03A0D198 B.LE 0x3A0D1A4
	0x03A0D19C SUB W0, W10, W0
	0x03A0D1A0 B 0x3A0D1E4
	0x03A0D1A4 SCVTF D0, X15
	0x03A0D1A8 SCVTF D1, X17
	0x03A0D1AC SCVTF D2, X2
	0x03A0D1B0 SCVTF D3, X16
	0x03A0D1B4 FMUL D0, D0, D1
	0x03A0D1B8 FMUL D1, D3, D2
	0x03A0D1BC FSUB D0, D0, D1
	0x03A0D1C0 FCMP D0, 0x0
	0x03A0D1C4 B.EQ 0x3A0D1F8
	0x03A0D1C8 CSET W15, LE
	0x03A0D1CC CMP X13, X14
	0x03A0D1D0 CSET W14, GT
	0x03A0D1D4 EOR W14, W14, W15, 0x0
	0x03A0D1D8 SUB W15, W10, W0
	0x03A0D1DC CMP W14, 0x0
	0x03A0D1E0 CSEL W0, W15, W0, NE
	0x03A0D1E4 CMP X11, X1
	0x03A0D1E8 MOV X14, X13
	0x03A0D1EC MOV X15, X12
	0x03A0D1F0 B.NE 0x3A0D12C
	0x03A0D1F4 B 0x3A0D1FC
	0x03A0D1F8 MOVN W0, 0x0
	0x03A0D1FC LDR X30, [X31], #0x10
	0x03A0D200 RET
	0x03A0D204 BL 0x1C16F20
	0x03A0D208 SUB X31, X31, 0x50
	0x03A0D20C STP X30, X21, [X31 + 0x30]
	0x03A0D210 STP X20, X19, [X31 + 0x40]
	0x03A0D214 MOV X19, X1
	0x03A0D218 MOV X20, X0
	0x03A0D21C MOV X21, X0
	0x03A0D220 CBZ X21, 0x3A0D274
	0x03A0D224 LDUR V0, [X21 + 0x38]
	0x03A0D228 LDUR V1, [X21 + 0x28]
	0x03A0D22C LDUR V2, [X21 + 0x18]
	0x03A0D230 ADD X0, X31, 0x0
	0x03A0D234 MOV X1, X19
	0x03A0D238 STP V1, V0, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X20, 0x9D5000
	008 Move W8, [X20+3980]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x748000
	015 Move X0, [X0+968]
	016 Call 0x1C17CF4
	017 Move X0, 0x748000
	018 Move X0, [X0+976]
	019 Call 0x1C17CF4
	020 Move X0, 0x748000
	021 Move X0, [X0+984]
	022 Call 0x1C17CF4
	023 Move X0, 0x748000
	024 Move X0, [X0+992]
	025 Call 0x1C17CF4
	026 Move X0, 0x748000
	027 Move X0, [X0+1000]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3980], W8
	031 Move [X31+8], X31
	032 Move [X31+16], X31
	033 Move [X31+24], X31
	034 Compare X19, 0
	035 JumpIfEqual {71}
	036 Move X8, 0x748000
	037 Move X8, [X8+992]
	038 Move X21, 0x748000
	039 Move X22, 0x748000
	040 Move X20, 0x748000
	041 Move X1, [X8]
	042 Move X21, [X21+976]
	043 Move X22, [X22+1000]
	044 Move X20, [X20+968]
	045 Add X8, X31, 8
	046 Move X0, X19
	047 Call List`1<Object>.GetEnumerator, X0
	048 Move X1, [X21]
	049 Add X0, X31, 8
	050 Call Enumerator<Object>.MoveNext, X0
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {60}
	055 Move X0, [X31+24]
	056 Compare X0, 0
	057 JumpIfEqual {70}
	058 Move X1, [X22]
	059 Call List`1<IntPoint>.Reverse, X0
	060 Move X1, [X20]
	061 Add X0, X31, 8
	062 Call Enumerator<Object>.Dispose, X0
	063 Move X20, [X31+64]
	064 Move X19, [X31+72]
	065 Move X22, [X31+48]
	066 Move X21, [X31+56]
	067 Move X30, [X31+32]
	068 Add X31, X31, 80
	069 Return 
	070 Call 0x1C17F20
	071 Call 0x1C17F20
	072 Move X19, X0
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X0, X19
	075 Call 0x3EB2AD0
	076 Move X20, [X0]
	077 Call 0x3EB2AE0
	078 Move X8, 0x748000
	079 Move X8, [X8+968]
	080 Add X0, X31, 8
	081 Move X1, [X8]
	082 Call Enumerator<Object>.Dispose, X0
	083 Compare X20, 0
	084 JumpIfEqual {63}
	085 Move X0, X20
	086 Call 0x1C17F18
	087 Move X20, X31
	088 Move X19, X0
	089 Move X8, 0x748000
	090 Move X8, [X8+968]
	091 Move X1, [X8]
	092 Add X0, X31, 8
	093 Call Enumerator<Object>.Dispose, X0
	094 Compare X20, 0
	095 JumpIfNotEqual {98}
	096 Move X0, X19
	097 Call 0x1D2D690
	098 Move X0, X20
	099 Call 0x1C17F18
	100 Call 0x1991590

Method: System.Boolean Orientation(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> poly)

Disassembly:
	0x03A0D23C STR V2, [X31]
	0x03A0D240 BL 0x3A0D10C
	0x03A0D244 TBZ X0, 0x1F, 0x3A0D25C
	0x03A0D248 LDR X21, [X21 + 0x48]
	0x03A0D24C CMP X21, X20
	0x03A0D250 B.NE 0x3A0D220

ISIL:
	001 Move [X31-16], X30
	002 Call Clipper.Area, X0
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Move X30, [X31+16]
	006 Return X0

Method: System.Int32 PointCount(UnityEngine.Rendering.Universal.OutPt pts)

Disassembly:
	0x03A0D380 LDP X20, X19, [X31 + 0x60]
	0x03A0D384 LDP X22, X21, [X31 + 0x50]
	0x03A0D388 LDP X30, X23, [X31 + 0x40]
	0x03A0D38C ADD X31, X31, 0x70
	0x03A0D390 RET
	0x03A0D394 BL 0x1C16F20
	0x03A0D398 BL 0x1C16F20
	0x03A0D39C BL 0x1C16F20
	0x03A0D3A0 B 0x3A0D3AC
	0x03A0D3A4 B 0x3A0D3AC
	0x03A0D3A8 B 0x3A0D3AC
	0x03A0D3AC MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move W0, W31
	003 Compare X1, 0
	004 JumpIfEqual {11}
	005 Move X8, X1
	006 Compare X8, 0
	007 JumpIfEqual {13}
	008 Move X8, [X8+72]
	009 Add W0, W0, 1
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.Void BuildResult(System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> polyg)

Disassembly:
	0x03A08398 ADD X3, X31, 0x180
	0x03A0839C STP V1, V0, [X31 + 0x1C0]
	0x03A083A0 LDP V1, V0, [X22 + 0x80]
	0x03A083A4 LDR V2, [X22 + 0x7]
	0x03A083A8 STP V0, V3, [X31 + 0x1A0]
	0x03A083AC STP V2, V1, [X31 + 0x180]
	0x03A083B0 LDRB W4, [X19 + 0x40]
	0x03A083B4 BL 0x3A04A00
	0x03A083B8 TBZ X0, 0x0, 0x3A08418
	0x03A083BC LDR X8, [X31 + 0x338]
	0x03A083C0 CBZ X8, 0x3A082AC
	0x03A083C4 LDR W9, [X8 + 0xE0]
	0x03A083C8 CBZ W9, 0x3A08418
	0x03A083CC LDR W9, [X22 + 0xE0]
	0x03A083D0 CBZ W9, 0x3A08418
	0x03A083D4 LDP V1, V0, [X8 + 0x20]
	0x03A083D8 LDR V2, [X8 + 0x1]
	0x03A083DC ADD X2, X31, 0x150
	0x03A083E0 MOV X0, X19
	0x03A083E4 MOV X1, X22
	0x03A083E8 STP V1, V0, [X31 + 0x160]
	0x03A083EC STR V2, [X31 + 0x15]
	0x03A083F0 BL 0x3A09454
	0x03A083F4 LDR X8, [X31 + 0x338]
	0x03A083F8 CBZ X8, 0x3A082AC
	0x03A083FC LDP V1, V0, [X8 + 0x80]
	0x03A08400 LDR V2, [X8 + 0x7]
	0x03A08404 MOV X2, X0
	0x03A08408 ADD X3, X31, 0x120
	0x03A0840C STP V1, V0, [X31 + 0x130]
	0x03A08410 STR V2, [X31 + 0x12]
	0x03A08414 B 0x3A0850C
	0x03A08418 CBZ X21, 0x3A08518
	0x03A0841C LDR X8, [X31 + 0x338]
	0x03A08420 CBZ X8, 0x3A082AC
	0x03A08424 LDR X9, [X21 + 0x48]
	0x03A08428 LDR X10, [X8 + 0x18]
	0x03A0842C CMP X9, X10
	0x03A08430 B.NE 0x3A08518
	0x03A08434 CBZ X20, 0x3A08518
	0x03A08438 LDR X9, [X21 + 0x50]
	0x03A0843C LDR X10, [X8 + 0x20]
	0x03A08440 CMP X9, X10
	0x03A08444 B.NE 0x3A08518
	0x03A08448 LDR W10, [X21 + 0xEC]
	0x03A0844C TBNZ X10, 0x1F, 0x3A08518
	0x03A08450 LDR X10, [X21 + 0x80]
	0x03A08454 CMP X9, X10
	0x03A08458 B.LE 0x3A08518
	0x03A0845C LDP V1, V0, [X8 + 0x50]
	0x03A08460 LDR V3, [X8 + 0x4]
	0x03A08464 ADD X0, X31, 0xF0
	0x03A08468 ADD X1, X31, 0xC0
	0x03A0846C STP V1, V0, [X31 + 0x100]
	0x03A08470 LDP V1, V0, [X8 + 0x80]
	0x03A08474 LDR V2, [X8 + 0x7]
	0x03A08478 ADD X8, X21, 0x40
	0x03A0847C ADD X2, X31, 0x90
	0x03A08480 STP V0, V3, [X31 + 0xE0]
	0x03A08484 STP V2, V1, [X31 + 0xC0]
	0x03A08488 LDP V1, V0, [X8 + 0x10]
	0x03A0848C LDR V3, [X8]
	0x03A08490 ADD X3, X31, 0x60
	0x03A08494 STP V1, V0, [X31 + 0xA0]
	0x03A08498 LDP V1, V0, [X21 + 0x80]
	0x03A0849C LDR V2, [X21 + 0x7]
	0x03A084A0 STP V0, V3, [X31 + 0x80]
	0x03A084A4 STP V2, V1, [X31 + 0x60]
	0x03A084A8 LDRB W4, [X19 + 0x40]
	0x03A084AC BL 0x3A04A00
	0x03A084B0 TBZ X0, 0x0, 0x3A08518
	0x03A084B4 LDR X8, [X31 + 0x338]
	0x03A084B8 CBZ X8, 0x3A082AC
	0x03A084BC LDR W9, [X8 + 0xE0]
	0x03A084C0 CBZ W9, 0x3A08518
	0x03A084C4 LDR W9, [X21 + 0xE0]
	0x03A084C8 CBZ W9, 0x3A08518
	0x03A084CC LDP V1, V0, [X8 + 0x20]
	0x03A084D0 LDR V2, [X8 + 0x1]
	0x03A084D4 ADD X2, X31, 0x30
	0x03A084D8 MOV X0, X19
	0x03A084DC MOV X1, X21
	0x03A084E0 STP V1, V0, [X31 + 0x40]
	0x03A084E4 STR V2, [X31 + 0x3]
	0x03A084E8 BL 0x3A09454
	0x03A084EC LDR X8, [X31 + 0x338]
	0x03A084F0 CBZ X8, 0x3A082AC
	0x03A084F4 LDP V1, V0, [X8 + 0x80]
	0x03A084F8 LDR V2, [X8 + 0x7]
	0x03A084FC MOV X2, X0
	0x03A08500 ADD X3, X31, 0x0
	0x03A08504 STP V1, V0, [X31 + 0x10]
	0x03A08508 STR V2, [X31]
	0x03A0850C MOV X0, X19
	0x03A08510 MOV X1, X20
	0x03A08514 BL 0x3A08DF8
	0x03A08518 LDR X8, [X31 + 0x338]
	0x03A0851C CBZ X8, 0x3A082AC
	0x03A08520 LDR X1, [X8 + 0x108]
	0x03A08524 B 0x3A082C0
	0x03A08528 ADD X31, X31, 0x340
	0x03A0852C LDP X20, X19, [X31 + 0x50]
	0x03A08530 LDP X22, X21, [X31 + 0x40]
	0x03A08534 LDP X24, X23, [X31 + 0x30]
	0x03A08538 LDP X30, X25, [X31 + 0x20]
	0x03A0853C LDR X29, [X31 + 0x18]
	0x03A08540 LDP D9, D8, [X31 + 0x8]
	0x03A08544 LDR V10, [X31], #0x60
	0x03A08548 RET
	0x03A0854C STR X30, [X31 - 0x10]!
	0x03A08550 CBZ X1, 0x3A08560
	0x03A08554 LDR X1, [X1 + 0x20]
	0x03A08558 LDR X30, [X31], #0x10
	0x03A0855C B 0x3A0A8E4
	0x03A08560 BL 0x1C16F20
	0x03A08564 STR X30, [X31 - 0x10]!
	0x03A08568 CBZ X1, 0x3A08588
	0x03A0856C MOV X8, X1
	0x03A08570 CBZ X8, 0x3A08590
	0x03A08574 LDP X9, X10, [X8 + 0x48]
	0x03A08578 CMP X9, X1
	0x03A0857C STP X10, X9, [X8 + 0x48]
	0x03A08580 MOV X8, X9
	0x03A08584 B.NE 0x3A08570
	0x03A08588 LDR X30, [X31], #0x10
	0x03A0858C RET
	0x03A08590 BL 0x1C16F20
	0x03A08594 STR X30, [X31 - 0x50]!
	0x03A08598 STP X26, X25, [X31 + 0x10]
	0x03A0859C STP X24, X23, [X31 + 0x20]
	0x03A085A0 STP X22, X21, [X31 + 0x30]
	0x03A085A4 STP X20, X19, [X31 + 0x40]
	0x03A085A8 ADRP X20, 0x9D9000
	0x03A085AC LDRB W8, [X20 + 0xF95]
	0x03A085B0 MOV X19, X0
	0x03A085B4 TBNZ X8, 0x0, 0x3A085D8
	0x03A085B8 ADRP X0, 0x74C000
	0x03A085BC LDR X0, [X0 + 0x340]
	0x03A085C0 BL 0x1C16CF4
	0x03A085C4 ADRP X0, 0x74C000
	0x03A085C8 LDR X0, [X0 + 0x348]
	0x03A085CC BL 0x1C16CF4
	0x03A085D0 MOVZ W8, 0x1
	0x03A085D4 STRB W8, [X20 + 0xF95]
	0x03A085D8 LDR X0, [X19 + 0x78]
	0x03A085DC CBZ X0, 0x3A088CC
	0x03A085E0 ADRP X25, 0x74C000
	0x03A085E4 LDR X25, [X25 + 0x348]
	0x03A085E8 MOV W20, W31
	0x03A085EC LDR W8, [X0 + 0x18]
	0x03A085F0 CMP W20, W8
	0x03A085F4 B.GE 0x3A088B4
	0x03A085F8 LDR X2, [X25]
	0x03A085FC MOV W1, W20
	0x03A08600 BL 0x301BCCC
	0x03A08604 CBZ X0, 0x3A088CC
	0x03A08608 LDR X8, [X0 + 0x10]
	0x03A0860C MOV X22, X0
	0x03A08610 CBZ X8, 0x3A088CC
	0x03A08614 LDR W1, [X8 + 0x10]
	0x03A08618 MOV X0, X19
	0x03A0861C BL 0x3A0AB44
	0x03A08620 LDR X8, [X22 + 0x18]
	0x03A08624 CBZ X8, 0x3A088CC
	0x03A08628 LDR W1, [X8 + 0x10]
	0x03A0862C MOV X21, X0
	0x03A08630 MOV X0, X19
	0x03A08634 BL 0x3A0AB44
	0x03A08638 CBZ X21, 0x3A088CC
	0x03A0863C LDR X8, [X21 + 0x20]
	0x03A08640 CBZ X8, 0x3A08668
	0x03A08644 MOV X23, X0
	0x03A08648 CBZ X0, 0x3A088CC
	0x03A0864C MOV X26, X23
	0x03A08650 LDR X8, [X26 + 0x20]!
	0x03A08654 CBZ X8, 0x3A08668

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+144], X29
	003 Move [X31+152], X30
	004 Move [X31+160], X28
	005 Move [X31+168], X27
	006 Move [X31+176], X26
	007 Move [X31+184], X25
	008 Move [X31+192], X24
	009 Move [X31+200], X23
	010 Move [X31+208], X22
	011 Move [X31+216], X21
	012 Move [X31+224], X20
	013 Move [X31+232], X19
	014 Move X21, 0x9DA000
	015 Move W8, [X21+3981]
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {48}
	022 Move X0, 0x74D000
	023 Move X0, [X0+776]
	024 Call 0x1C17CF4
	025 Move X0, 0x74D000
	026 Move X0, [X0+784]
	027 Call 0x1C17CF4
	028 Move X0, 0x74D000
	029 Move X0, [X0+712]
	030 Call 0x1C17CF4
	031 Move X0, 0x74D000
	032 Move X0, [X0+792]
	033 Call 0x1C17CF4
	034 Move X0, 0x74D000
	035 Move X0, [X0+608]
	036 Call 0x1C17CF4
	037 Move X0, 0x74D000
	038 Move X0, [X0+616]
	039 Call 0x1C17CF4
	040 Move X0, 0x74D000
	041 Move X0, [X0+800]
	042 Call 0x1C17CF4
	043 Move X0, 0x74D000
	044 Move X0, [X0+360]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X21+3981], W8
	048 Compare X19, 0
	049 JumpIfEqual {191}
	050 Move W2, [X19+24]
	051 Move W8, [X19+28]
	052 Add W8, W8, 1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move [X19+24], W31
	055 Move [X19+28], W8
	056 Move X0, [X19+16]
	057 Move W1, W31
	058 Move X3, X31
	059 Call Array.Clear, X0, X1, X2
	060 Move X8, [X20+48]
	061 Compare X8, 0
	062 JumpIfEqual {191}
	063 Move X9, 0x74D000
	064 Move X9, [X9+800]
	065 Move W1, [X8+24]
	066 Move X0, X19
	067 Move X2, [X9]
	068 Call List`1<Object>.set_Capacity, X0, X1
	069 Move X0, [X20+48]
	070 Compare X0, 0
	071 JumpIfEqual {191}
	072 Move X24, 0x74D000
	073 Move X27, 0x74D000
	074 Move X28, 0x74D000
	075 Move X24, [X24+616]
	076 Move X27, [X27+784]
	077 Move X28, [X28+776]
	078 Move W21, W31
	079 Move W29, 48
	080 Move W8, [X0+24]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X2, [X24]
	083 Move W1, W21
	084 Call List`1<Object>.get_Item, X0, X1
	085 Compare X0, 0
	086 JumpIfEqual {191}
	087 Move X8, [X0+32]
	088 Compare X8, 0
	089 JumpIfEqual {187}
	090 Move X25, [X8+80]
	091 Compare X25, 0
	092 JumpIfEqual {187}
	093 Move TEMP, 0
	094 Not TEMP
	095 Move W8, TEMP
	096 Move W10, 1
	097 Move X9, X25
	098 Compare X9, 0
	099 JumpIfEqual {191}
	100 Move X9, [X9+72]
	101 Move W26, W10
	102 Add W8, W8, 1
	103 Add W10, W10, 1
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Add W23, W8, 1
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Move X8, 0x74D000
	108 Move X8, [X8+360]
	109 Move X0, [X8]
	110 Call 0x1C17F10
	111 Move X8, 0x74D000
	112 Move X8, [X8+792]
	113 Move W1, W23
	114 Move X22, X0
	115 Move X2, [X8]
	116 Call List`1<IntPoint>..ctor, X0, X1
	117 Compare X25, 0
	118 JumpIfEqual {191}
	119 NotImplemented "Instruction LDUR not yet implemented."
	120 NotImplemented "Instruction LDUR not yet implemented."
	121 NotImplemented "Instruction LDUR not yet implemented."
	122 Move [X31+16], V1
	123 Move [X31+24], V0
	124 Move [X31], V2
	125 Compare X22, 0
	126 JumpIfEqual {191}
	127 Move V0, [X31]
	128 Move V1, [X31+16]
	129 Move V2, [X31+2]
	130 Move X10, [X27]
	131 Move [X31+48], V0
	132 Move [X31+56], V1
	133 Move [X31+5], V2
	134 Move W9, [X22+28]
	135 Move X8, [X22+16]
	136 Add W9, W9, 1
	137 Move [X22+28], W9
	138 Compare X8, 0
	139 JumpIfEqual {191}
	140 NotImplemented "Instruction LDRSW not yet implemented."
	141 Move W11, [X8+24]
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Add W10, W9, 1
	144 Move [X22+24], W10
	145 Move V1, [X31+64]
	146 Move V0, [X31+80]
	147 Move V2, [X31+3]
	148 NotImplemented "Instruction NOP not yet implemented."
	149 NotImplemented "Instruction MADD not yet implemented."
	150 Move [X8+48], V1
	151 Move [X8+56], V0
	152 Move [X8+2], V2
	153 Move X8, [X10+32]
	154 Move V0, [X31+48]
	155 Move V1, [X31+64]
	156 Move V2, [X31+5]
	157 Add X1, X31, 96
	158 Move X8, [X8+192]
	159 Move X0, X22
	160 Move X2, [X8+112]
	161 Move [X31+96], V0
	162 Move [X31+104], V1
	163 Move [X31+8], V2
	164 Call List`1<IntPoint>.AddWithResize, X0, X1
	165 Move X25, [X25+80]
	166 Subtract W26, W26, 1
	167 Move W10, [X19+28]
	168 Move X8, [X19+16]
	169 Move X9, [X28]
	170 Add W10, W10, 1
	171 Move [X19+28], W10
	172 Compare X8, 0
	173 JumpIfEqual {191}
	174 NotImplemented "Instruction LDRSW not yet implemented."
	175 Move W11, [X8+24]
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Add W9, W10, 1
	178 Add X8, X8, X10
	179 Move [X19+24], W9
	180 Move [X8+32], X22
	181 Move X8, [X9+32]
	182 Move X0, X19
	183 Move X1, X22
	184 Move X8, [X8+192]
	185 Move X2, [X8+112]
	186 Call List`1<Object>.AddWithResize, X0, X1
	187 Move X0, [X20+48]
	188 Add W21, W21, 1
	189 Compare X0, 0
	190 JumpIfNotEqual {80}
	191 Call 0x1C17F20
	192 Move X20, [X31+224]
	193 Move X19, [X31+232]
	194 Move X22, [X31+208]
	195 Move X21, [X31+216]
	196 Move X24, [X31+192]
	197 Move X23, [X31+200]
	198 Move X26, [X31+176]
	199 Move X25, [X31+184]
	200 Move X28, [X31+160]
	201 Move X27, [X31+168]
	202 Move X29, [X31+144]
	203 Move X30, [X31+152]
	204 Add X31, X31, 240
	205 Return 

Method: System.Void BuildResult2(UnityEngine.Rendering.Universal.PolyTree polytree)

Disassembly:
	0x03A08658 LDRB W8, [X21 + 0x15]
	0x03A0865C CBNZ W8, 0x3A08668
	0x03A08660 LDRB W8, [X23 + 0x15]
	0x03A08664 CBZ W8, 0x3A08678
	0x03A08668 LDR X0, [X19 + 0x78]
	0x03A0866C ADD W20, W20, 0x1
	0x03A08670 CBNZ X0, 0x3A085EC
	0x03A08674 B 0x3A088CC
	0x03A08678 CMP X21, X23
	0x03A0867C B.EQ 0x3A08738
	0x03A08680 MOV X8, X21
	0x03A08684 LDR X8, [X8 + 0x18]
	0x03A08688 CMP X8, X23
	0x03A0868C B.EQ 0x3A08694
	0x03A08690 CBNZ X8, 0x3A08684
	0x03A08694 CMP X8, X23
	0x03A08698 MOV X24, X23
	0x03A0869C B.EQ 0x3A086D8
	0x03A086A0 MOV X8, X23
	0x03A086A4 CBZ X8, 0x3A088CC
	0x03A086A8 LDR X8, [X8 + 0x18]
	0x03A086AC CMP X8, X21
	0x03A086B0 B.EQ 0x3A086B8
	0x03A086B4 CBNZ X8, 0x3A086A4
	0x03A086B8 CMP X8, X21
	0x03A086BC MOV X24, X21
	0x03A086C0 B.EQ 0x3A086D8
	0x03A086C4 MOV X0, X19
	0x03A086C8 MOV X1, X21
	0x03A086CC MOV X2, X23
	0x03A086D0 BL 0x3A0AA48
	0x03A086D4 MOV X24, X0
	0x03A086D8 MOV X0, X19
	0x03A086DC MOV X1, X22
	0x03A086E0 MOV X2, X21
	0x03A086E4 MOV X3, X23
	0x03A086E8 BL 0x3A0C914
	0x03A086EC TBZ X0, 0x0, 0x3A08668
	0x03A086F0 STP X31, X31, [X26]
	0x03A086F4 LDR W8, [X21 + 0x10]
	0x03A086F8 STR W8, [X23 + 0x10]
	0x03A086FC CBZ X24, 0x3A088CC
	0x03A08700 LDRB W8, [X24 + 0x14]
	0x03A08704 CMP X24, X23
	0x03A08708 STRB W8, [X21 + 0x14]
	0x03A0870C B.NE 0x3A08718
	0x03A08710 LDR X8, [X23 + 0x18]
	0x03A08714 STR X8, [X21 + 0x18]
	0x03A08718 STR X21, [X23 + 0x18]
	0x03A0871C LDRB W8, [X19 + 0x88]
	0x03A08720 CBZ W8, 0x3A08668
	0x03A08724 MOV X0, X19
	0x03A08728 MOV X1, X23
	0x03A0872C MOV X2, X21
	0x03A08730 BL 0x3A0D628
	0x03A08734 B 0x3A08668
	0x03A08738 MOV X0, X19
	0x03A0873C MOV X1, X22
	0x03A08740 MOV X2, X21
	0x03A08744 MOV X3, X21
	0x03A08748 BL 0x3A0C914
	0x03A0874C TBZ X0, 0x0, 0x3A08668
	0x03A08750 LDR X8, [X22 + 0x10]
	0x03A08754 MOV X0, X19
	0x03A08758 STP X8, X31, [X21 + 0x20]
	0x03A0875C BL 0x3A065DC
	0x03A08760 CBZ X0, 0x3A088CC
	0x03A08764 LDR X8, [X22 + 0x18]
	0x03A08768 MOV X1, X0
	0x03A0876C MOV X23, X0
	0x03A08770 STR X8, [X0 + 0x20]
	0x03A08774 BL 0x3A0D794
	0x03A08778 LDR X0, [X23 + 0x20]
	0x03A0877C LDR X1, [X21 + 0x20]
	0x03A08780 BL 0x3A0D208
	0x03A08784 TBZ X0, 0x0, 0x3A08800
	0x03A08788 LDRB W8, [X21 + 0x14]
	0x03A0878C STR X21, [X23 + 0x18]
	0x03A08790 EOR W22, W8, 0x1
	0x03A08794 STRB W22, [X23 + 0x14]
	0x03A08798 LDRB W8, [X19 + 0x88]
	0x03A0879C CBZ W8, 0x3A087B4
	0x03A087A0 MOV X0, X19
	0x03A087A4 MOV X1, X23
	0x03A087A8 MOV X2, X21
	0x03A087AC BL 0x3A0D428
	0x03A087B0 LDRB W22, [X23 + 0x14]
	0x03A087B4 LDR X1, [X23 + 0x20]
	0x03A087B8 LDRB W21, [X19 + 0x90]
	0x03A087BC BL 0x3A0A8E4
	0x03A087C0 AND W8, W22, 0xFF
	0x03A087C4 FCMP D0, 0x0
	0x03A087C8 EOR W8, W21, W8, 0x0
	0x03A087CC CSET W9, GT
	0x03A087D0 CMP W8, W9
	0x03A087D4 B.NE 0x3A08668
	0x03A087D8 LDR X8, [X23 + 0x20]
	0x03A087DC CBZ X8, 0x3A08668
	0x03A087E0 MOV X9, X8
	0x03A087E4 CBZ X9, 0x3A088CC
	0x03A087E8 LDP X10, X11, [X9 + 0x48]
	0x03A087EC CMP X10, X8
	0x03A087F0 STP X11, X10, [X9 + 0x48]
	0x03A087F4 MOV X9, X10
	0x03A087F8 B.NE 0x3A087E4
	0x03A087FC B 0x3A08668
	0x03A08800 LDR X0, [X21 + 0x20]
	0x03A08804 LDR X1, [X23 + 0x20]
	0x03A08808 BL 0x3A0D208
	0x03A0880C LDRB W8, [X21 + 0x14]
	0x03A08810 STRB W8, [X23 + 0x14]
	0x03A08814 TBZ X0, 0x0, 0x3A08890
	0x03A08818 LDR X9, [X21 + 0x18]
	0x03A0881C EOR W22, W8, 0x1
	0x03A08820 STRB W22, [X21 + 0x14]
	0x03A08824 STR X9, [X23 + 0x18]
	0x03A08828 STR X23, [X21 + 0x18]
	0x03A0882C LDRB W8, [X19 + 0x88]
	0x03A08830 CBZ W8, 0x3A08848
	0x03A08834 MOV X0, X19
	0x03A08838 MOV X1, X21
	0x03A0883C MOV X2, X23
	0x03A08840 BL 0x3A0D428
	0x03A08844 LDRB W22, [X21 + 0x14]
	0x03A08848 LDR X1, [X21 + 0x20]
	0x03A0884C LDRB W23, [X19 + 0x90]
	0x03A08850 BL 0x3A0A8E4
	0x03A08854 FCMP D0, 0x0
	0x03A08858 EOR W8, W23, W22, 0x0
	0x03A0885C CSET W9, GT
	0x03A08860 CMP W8, W9
	0x03A08864 B.NE 0x3A08668
	0x03A08868 LDR X8, [X21 + 0x20]
	0x03A0886C CBZ X8, 0x3A08668
	0x03A08870 MOV X9, X8
	0x03A08874 CBZ X9, 0x3A088CC
	0x03A08878 LDP X10, X11, [X9 + 0x48]
	0x03A0887C CMP X10, X8
	0x03A08880 STP X11, X10, [X9 + 0x48]
	0x03A08884 MOV X9, X10
	0x03A08888 B.NE 0x3A08874
	0x03A0888C B 0x3A08668
	0x03A08890 LDR X8, [X21 + 0x18]
	0x03A08894 STR X8, [X23 + 0x18]
	0x03A08898 LDRB W8, [X19 + 0x88]
	0x03A0889C CBZ W8, 0x3A08668
	0x03A088A0 MOV X0, X19
	0x03A088A4 MOV X1, X21
	0x03A088A8 MOV X2, X23
	0x03A088AC BL 0x3A0D278
	0x03A088B0 B 0x3A08668
	0x03A088B4 LDP X20, X19, [X31 + 0x40]
	0x03A088B8 LDP X22, X21, [X31 + 0x30]
	0x03A088BC LDP X24, X23, [X31 + 0x20]
	0x03A088C0 LDP X26, X25, [X31 + 0x10]
	0x03A088C4 LDR X30, [X31], #0x50
	0x03A088C8 RET
	0x03A088CC BL 0x1C16F20
	0x03A088D0 STR X30, [X31 - 0x10]!
	0x03A088D4 CBZ X1, 0x3A08970
	0x03A088D8 LDR X8, [X1 + 0x20]
	0x03A088DC CBZ X8, 0x3A08970
	0x03A088E0 LDR X9, [X8 + 0x50]
	0x03A088E4 CMP X8, X9
	0x03A088E8 B.EQ 0x3A08958
	0x03A088EC MOV X10, X8
	0x03A088F0 LDR X10, [X10 + 0x48]
	0x03A088F4 CBZ X10, 0x3A08970
	0x03A088F8 LDR X8, [X10 + 0x50]
	0x03A088FC CBZ X8, 0x3A08970
	0x03A08900 LDR X11, [X10 + 0x20]
	0x03A08904 LDR X12, [X8 + 0x20]
	0x03A08908 CMP X11, X12
	0x03A0890C B.NE 0x3A08920
	0x03A08910 LDR X11, [X10 + 0x28]
	0x03A08914 LDR X12, [X8 + 0x28]
	0x03A08918 CMP X11, X12
	0x03A0891C B.EQ 0x3A0892C
	0x03A08920 CMP X10, X9
	0x03A08924 B.NE 0x3A088F0
	0x03A08928 B 0x3A08954
	0x03A0892C LDR X11, [X10 + 0x48]
	0x03A08930 STR X11, [X8 + 0x48]
	0x03A08934 LDR X11, [X10 + 0x48]
	0x03A08938 CBZ X11, 0x3A08970
	0x03A0893C CMP X10, X9
	0x03A08940 CSEL X9, X8, X9, EQ
	0x03A08944 CMP X8, X9
	0x03A08948 STR X8, [X11 + 0x50]
	0x03A0894C B.NE 0x3A088EC
	0x03A08950 B 0x3A08958
	0x03A08954 MOV X8, X9
	0x03A08958 LDR X9, [X8 + 0x50]
	0x03A0895C CMP X8, X9
	0x03A08960 B.NE 0x3A08968
	0x03A08964 STR X31, [X1 + 0x20]
	0x03A08968 LDR X30, [X31], #0x10
	0x03A0896C RET
	0x03A08970 BL 0x1C16F20
	0x03A08974 SUB X31, X31, 0xD0
	0x03A08978 STP X30, X25, [X31 + 0x90]
	0x03A0897C STP X24, X23, [X31 + 0xA0]
	0x03A08980 STP X22, X21, [X31 + 0xB0]
	0x03A08984 STP X20, X19, [X31 + 0xC0]
	0x03A08988 CBZ X1, 0x3A08B2C
	0x03A0898C STR X31, [X1 + 0x28]
	0x03A08990 LDRB W8, [X0 + 0x42]
	0x03A08994 LDR X23, [X1 + 0x20]
	0x03A08998 MOV X19, X1
	0x03A0899C MOV X20, X0
	0x03A089A0 CBZ W8, 0x3A089B0
	0x03A089A4 MOV W21, W31
	0x03A089A8 CBNZ X23, 0x3A089C0
	0x03A089AC B 0x3A08B2C
	0x03A089B0 LDRB W8, [X20 + 0x91]
	0x03A089B4 CMP W8, 0x0

ISIL:
	001 Subtract X31, X31, 240
	002 Move [X31+144], X29
	003 Move [X31+152], X30
	004 Move [X31+160], X28
	005 Move [X31+168], X27
	006 Move [X31+176], X26
	007 Move [X31+184], X25
	008 Move [X31+192], X24
	009 Move [X31+200], X23
	010 Move [X31+208], X22
	011 Move [X31+216], X21
	012 Move [X31+224], X20
	013 Move [X31+232], X19
	014 Move X21, 0x9DA000
	015 Move W8, [X21+3982]
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {45}
	022 Move X0, 0x74D000
	023 Move X0, [X0+376]
	024 Call 0x1C17CF4
	025 Move X0, 0x74D000
	026 Move X0, [X0+784]
	027 Call 0x1C17CF4
	028 Move X0, 0x74D000
	029 Move X0, [X0+608]
	030 Call 0x1C17CF4
	031 Move X0, 0x74D000
	032 Move X0, [X0+616]
	033 Call 0x1C17CF4
	034 Move X0, 0x74D000
	035 Move X0, [X0+808]
	036 Call 0x1C17CF4
	037 Move X0, 0x74D000
	038 Move X0, [X0+816]
	039 Call 0x1C17CF4
	040 Move X0, 0x74D000
	041 Move X0, [X0+824]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X21+3982], W8
	045 Compare X19, 0
	046 JumpIfEqual {249}
	047 Move X0, X19
	048 Call PolyTree.Clear, X0
	049 Move X8, [X20+48]
	050 Compare X8, 0
	051 JumpIfEqual {249}
	052 Move X0, [X19+64]
	053 Compare X0, 0
	054 JumpIfEqual {249}
	055 Move X9, 0x74D000
	056 Move X9, [X9+808]
	057 Move W1, [X8+24]
	058 Move X2, [X9]
	059 Call List`1<Object>.set_Capacity, X0, X1
	060 Move X0, [X20+48]
	061 Compare X0, 0
	062 JumpIfEqual {249}
	063 Move X25, 0x74D000
	064 Move X28, 0x74D000
	065 Move X29, 0x74D000
	066 Move X26, 0x74D000
	067 Move X25, [X25+616]
	068 Move X28, [X28+376]
	069 Move X29, [X29+816]
	070 Move X26, [X26+784]
	071 Move W21, W31
	072 Move W27, 48
	073 Move W1, [X0+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X2, [X25]
	076 Move W1, W21
	077 Call List`1<Object>.get_Item, X0, X1
	078 Compare X0, 0
	079 JumpIfEqual {249}
	080 Move X8, [X0+32]
	081 Move X24, X0
	082 Compare X8, 0
	083 JumpIfEqual {91}
	084 Move W22, W31
	085 Move X9, X8
	086 Compare X9, 0
	087 JumpIfEqual {249}
	088 Move X9, [X9+72]
	089 Add W22, W22, 1
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move W22, W31
	092 Move W8, [X24+21]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Compare W8, 0
	095 JumpIfNotEqual {193}
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Compare W8, 0
	098 JumpIfEqual {193}
	099 Move X1, X24
	100 Call Clipper.FixHoleLinkage, X0, X1
	101 Move X8, 0x74D000
	102 Move X8, [X8+824]
	103 Move X0, [X8]
	104 Call 0x1C17F10
	105 Move X23, X0
	106 Call PolyNode..ctor, X0
	107 Move X0, [X19+64]
	108 Compare X0, 0
	109 JumpIfEqual {249}
	110 Move W10, [X0+28]
	111 Move X8, [X0+16]
	112 Move X9, [X28]
	113 Add W10, W10, 1
	114 Move [X0+28], W10
	115 Compare X8, 0
	116 JumpIfEqual {249}
	117 NotImplemented "Instruction LDRSW not yet implemented."
	118 Move W11, [X8+24]
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Add W9, W10, 1
	121 Add X8, X8, X10
	122 Move [X0+24], W9
	123 Move [X8+32], X23
	124 Move X8, [X9+32]
	125 Move X1, X23
	126 Move X8, [X8+192]
	127 Move X2, [X8+112]
	128 Call List`1<Object>.AddWithResize, X0, X1
	129 Move [X24+48], X23
	130 Compare X23, 0
	131 JumpIfEqual {249}
	132 Move X0, [X23+24]
	133 Compare X0, 0
	134 JumpIfEqual {249}
	135 Move X2, [X29]
	136 Move W1, W22
	137 Call List`1<IntPoint>.set_Capacity, X0, X1
	138 Move X8, [X24+32]
	139 Compare X8, 0
	140 JumpIfEqual {249}
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move X24, [X8+80]
	143 Compare X24, 0
	144 JumpIfEqual {249}
	145 Move X0, [X23+24]
	146 NotImplemented "Instruction LDUR not yet implemented."
	147 NotImplemented "Instruction LDUR not yet implemented."
	148 NotImplemented "Instruction LDUR not yet implemented."
	149 Move [X31+16], V1
	150 Move [X31+24], V0
	151 Move [X31], V2
	152 Compare X0, 0
	153 JumpIfEqual {249}
	154 Move V0, [X31]
	155 Move V1, [X31+16]
	156 Move V2, [X31+2]
	157 Move X10, [X26]
	158 Move [X31+48], V0
	159 Move [X31+56], V1
	160 Move [X31+5], V2
	161 Move W9, [X0+28]
	162 Move X8, [X0+16]
	163 Add W9, W9, 1
	164 Move [X0+28], W9
	165 Compare X8, 0
	166 JumpIfEqual {249}
	167 NotImplemented "Instruction LDRSW not yet implemented."
	168 Move W11, [X8+24]
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Add W10, W9, 1
	171 Move [X0+24], W10
	172 Move V1, [X31+64]
	173 Move V0, [X31+80]
	174 Move V2, [X31+3]
	175 NotImplemented "Instruction NOP not yet implemented."
	176 NotImplemented "Instruction MADD not yet implemented."
	177 Move [X8+48], V1
	178 Move [X8+56], V0
	179 Move [X8+2], V2
	180 Move X8, [X10+32]
	181 Move V0, [X31+48]
	182 Move V1, [X31+64]
	183 Move V2, [X31+5]
	184 Add X1, X31, 96
	185 Move X8, [X8+192]
	186 Move X2, [X8+112]
	187 Move [X31+96], V0
	188 Move [X31+104], V1
	189 Move [X31+8], V2
	190 Call List`1<IntPoint>.AddWithResize, X0, X1
	191 Move X24, [X24+80]
	192 Subtract W22, W22, 1
	193 Move X0, [X20+48]
	194 Add W21, W21, 1
	195 Compare X0, 0
	196 JumpIfNotEqual {73}
	197 Move X0, [X19+48]
	198 Compare X0, 0
	199 JumpIfEqual {249}
	200 Move X8, 0x74D000
	201 Move X8, [X8+808]
	202 Move X2, [X8]
	203 Call List`1<Object>.set_Capacity, X0, X1
	204 Move X0, [X20+48]
	205 Compare X0, 0
	206 JumpIfEqual {249}
	207 Move W21, W31
	208 Move W22, 1
	209 Move W8, [X0+24]
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move X2, [X25]
	212 Move W1, W21
	213 Call List`1<Object>.get_Item, X0, X1
	214 Compare X0, 0
	215 JumpIfEqual {249}
	216 Move X1, [X0+48]
	217 Compare X1, 0
	218 JumpIfEqual {225}
	219 Move W8, [X0+21]
	220 Compare W8, 0
	221 JumpIfEqual {229}
	222 Move [X1+56], W22
	223 Move X0, X19
	224 Call PolyNode.AddChild, X0, X1
	225 Move X0, [X20+48]
	226 Add W21, W21, 1
	227 Compare X0, 0
	228 JumpIfNotEqual {209}
	229 Move X8, [X0+24]
	230 Compare X8, 0
	231 JumpIfEqual {223}
	232 Move X0, [X8+48]
	233 Compare X0, 0
	234 JumpIfNotEqual {224}
	235 Move X20, [X31+224]
	236 Move X19, [X31+232]
	237 Move X22, [X31+208]
	238 Move X21, [X31+216]
	239 Move X24, [X31+192]
	240 Move X23, [X31+200]
	241 Move X26, [X31+176]
	242 Move X25, [X31+184]
	243 Move X28, [X31+160]
	244 Move X27, [X31+168]
	245 Move X29, [X31+144]
	246 Move X30, [X31+152]
	247 Add X31, X31, 240
	248 Return 
	249 Call 0x1C17F20

Method: System.Void FixupOutPolyline(UnityEngine.Rendering.Universal.OutRec outrec)

Disassembly:
	0x03A098D0 CBZ X19, 0x3A09EE4
	0x03A098D4 LDR W24, [X20 + 0xEC]
	0x03A098D8 LDR W23, [X19 + 0xEC]
	0x03A098DC LDR W10, [X20 + 0xE0]
	0x03A098E0 LDR W11, [X19 + 0xE0]
	0x03A098E4 CBZ W10, 0x3A09948
	0x03A098E8 LDR W9, [X20 + 0xD8]
	0x03A098EC LDR W8, [X19 + 0xD8]
	0x03A098F0 CBZ W11, 0x3A099B4
	0x03A098F4 CMP W9, W8
	0x03A098F8 B.NE 0x3A099F0
	0x03A098FC CMP W9, 0x0
	0x03A09900 MOVZ W12, 0x6C
	0x03A09904 MOVZ W13, 0x70
	0x03A09908 CSEL X12, X13, X12, EQ
	0x03A0990C LDR W14, [X21, X12, LSL]
	0x03A09910 LDR W13, [X20 + 0xE4]
	0x03A09914 ADD X12, X21, 0x70
	0x03A09918 ADD X15, X21, 0x6C
	0x03A0991C CSEL X12, X12, X15, EQ
	0x03A09920 CBZ W14, 0x3A09AC0
	0x03A09924 ADDS W11, W13, W11
	0x03A09928 CSNEG W11, W11, W13, NE
	0x03A0992C STR W11, [X20 + 0xE4]
	0x03A09930 LDR W11, [X19 + 0xE4]
	0x03A09934 SUBS W10, W11, W10
	0x03A09938 B.NE 0x3A09940
	0x03A0993C SUB W10, W31, W11
	0x03A09940 STR W10, [X19 + 0xE4]
	0x03A09944 B 0x3A09ADC
	0x03A09948 CBZ W11, 0x3A09E14
	0x03A0994C LDR W8, [X20 + 0xD8]
	0x03A09950 LDR W9, [X19 + 0xD8]
	0x03A09954 CMP W8, W9
	0x03A09958 B.EQ 0x3A099BC
	0x03A0995C ADRP X8, 0x6EA000
	0x03A09960 LDR X8, [X8 + 0x5A8]
	0x03A09964 LDR W25, [X19 + 0xE4]
	0x03A09968 LDR X0, [X8]
	0x03A0996C LDR W8, [X0 + 0xE0]
	0x03A09970 CBNZ W8, 0x3A09978

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {38}
	004 Move X8, [X1+32]
	005 Compare X8, 0
	006 JumpIfEqual {38}
	007 Move X9, [X8+80]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X10, X8
	010 Move X10, [X10+72]
	011 Compare X10, 0
	012 JumpIfEqual {38}
	013 Move X8, [X10+80]
	014 Compare X8, 0
	015 JumpIfEqual {38}
	016 Move X11, [X10+32]
	017 Move X12, [X8+32]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X11, [X10+40]
	020 Move X12, [X8+40]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X11, [X10+72]
	024 Move [X8+72], X11
	025 Move X11, [X10+72]
	026 Compare X11, 0
	027 JumpIfEqual {38}
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CSEL not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move [X11+80], X8
	032 Move X8, X9
	033 Move X9, [X8+80]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move [X1+32], X31
	036 Move X30, [X31+16]
	037 Return 
	038 Call 0x1C17F20

Method: System.Void FixupOutPolygon(UnityEngine.Rendering.Universal.OutRec outRec)

Disassembly:
	0x03A09974 BL 0x1C16DFC
	0x03A09978 CMP W25, 0x0
	0x03A0997C CSNEG W8, W25, W25, PL
	0x03A09980 CMP W8, 0x1
	0x03A09984 B.NE 0x3A09A48
	0x03A09988 LDR W8, [X21 + 0x44]
	0x03A0998C CMP W8, 0x1
	0x03A09990 B.NE 0x3A0999C
	0x03A09994 LDR W8, [X19 + 0xE8]
	0x03A09998 CBNZ W8, 0x3A09A48
	0x03A0999C LDP V1, V0, [X22 + 0x10]
	0x03A099A0 LDR V2, [X22]
	0x03A099A4 ADD X2, X31, 0x210
	0x03A099A8 STP V1, V0, [X31 + 0x220]
	0x03A099AC STR V2, [X31 + 0x21]
	0x03A099B0 B 0x3A09CCC
	0x03A099B4 CMP W9, W8
	0x03A099B8 B.NE 0x3A09A48
	0x03A099BC CMP W10, W11
	0x03A099C0 B.EQ 0x3A09E14
	0x03A099C4 LDR W8, [X21 + 0x44]
	0x03A099C8 CMP W8, 0x1
	0x03A099CC B.NE 0x3A09E14
	0x03A099D0 CBZ W10, 0x3A09CB4
	0x03A099D4 TBNZ X24, 0x1F, 0x3A09E14
	0x03A099D8 LDP V1, V0, [X22 + 0x10]
	0x03A099DC LDR V2, [X22]
	0x03A099E0 ADD X2, X31, 0x240
	0x03A099E4 STP V1, V0, [X31 + 0x250]
	0x03A099E8 STR V2, [X31 + 0x24]
	0x03A099EC B 0x3A09AA4
	0x03A099F0 CMP W8, 0x0
	0x03A099F4 MOVZ W12, 0x6C
	0x03A099F8 MOVZ W14, 0x70
	0x03A099FC LDR W13, [X20 + 0xE8]
	0x03A09A00 CSEL X15, X14, X12, EQ
	0x03A09A04 LDR W15, [X21, X15, LSL]
	0x03A09A08 CMP W13, 0x0
	0x03A09A0C ADD W11, W13, W11
	0x03A09A10 CSET W13, EQ
	0x03A09A14 CMP W15, 0x0
	0x03A09A18 CSEL W11, W13, W11, EQ
	0x03A09A1C CMP W9, 0x0
	0x03A09A20 STR W11, [X20 + 0xE8]
	0x03A09A24 CSEL X11, X14, X12, EQ
	0x03A09A28 LDR W13, [X21, X11, LSL]
	0x03A09A2C LDR W11, [X19 + 0xE8]
	0x03A09A30 ADD X12, X21, 0x70
	0x03A09A34 ADD X14, X21, 0x6C
	0x03A09A38 CSEL X12, X12, X14, EQ
	0x03A09A3C CBZ W13, 0x3A09AD0
	0x03A09A40 SUB W10, W11, W10
	0x03A09A44 B 0x3A09AD8
	0x03A09A48 LDR W8, [X19 + 0xE0]
	0x03A09A4C CBNZ W8, 0x3A09E14
	0x03A09A50 ADRP X8, 0x6EA000
	0x03A09A54 LDR X8, [X8 + 0x5A8]
	0x03A09A58 LDR W24, [X20 + 0xE4]
	0x03A09A5C LDR X0, [X8]
	0x03A09A60 LDR W8, [X0 + 0xE0]
	0x03A09A64 CBNZ W8, 0x3A09A6C
	0x03A09A68 BL 0x1C16DFC
	0x03A09A6C CMP W24, 0x0
	0x03A09A70 CSNEG W8, W24, W24, PL
	0x03A09A74 CMP W8, 0x1
	0x03A09A78 B.NE 0x3A09E14
	0x03A09A7C LDR W8, [X21 + 0x44]
	0x03A09A80 CMP W8, 0x1
	0x03A09A84 B.NE 0x3A09A90
	0x03A09A88 LDR W8, [X20 + 0xE8]
	0x03A09A8C CBNZ W8, 0x3A09E14
	0x03A09A90 LDP V1, V0, [X22 + 0x10]
	0x03A09A94 LDR V2, [X22]
	0x03A09A98 ADD X2, X31, 0x1E0
	0x03A09A9C STP V1, V0, [X31 + 0x1F0]
	0x03A09AA0 STR V2, [X31 + 0x1E]
	0x03A09AA4 MOV X0, X21
	0x03A09AA8 MOV X1, X19
	0x03A09AAC BL 0x3A09454
	0x03A09AB0 TBNZ X23, 0x1F, 0x3A09E14
	0x03A09AB4 MOVN W8, 0x0
	0x03A09AB8 STR W8, [X19 + 0xEC]
	0x03A09ABC B 0x3A09E14
	0x03A09AC0 LDR W10, [X19 + 0xE4]
	0x03A09AC4 STR W10, [X20 + 0xE4]
	0x03A09AC8 STR W13, [X19 + 0xE4]
	0x03A09ACC B 0x3A09ADC
	0x03A09AD0 CMP W11, 0x0
	0x03A09AD4 CSET W10, EQ
	0x03A09AD8 STR W10, [X19 + 0xE8]
	0x03A09ADC CMP W9, 0x0
	0x03A09AE0 MOVZ W10, 0x70
	0x03A09AE4 MOVZ W11, 0x6C
	0x03A09AE8 LDR W9, [X12]
	0x03A09AEC CSEL X12, X11, X10, EQ
	0x03A09AF0 CMP W8, 0x0
	0x03A09AF4 CSEL X8, X11, X10, EQ
	0x03A09AF8 CSEL X10, X10, X11, EQ
	0x03A09AFC LDR W28, [X21, X12, LSL]
	0x03A09B00 LDR W27, [X21, X10, LSL]
	0x03A09B04 LDR W26, [X21, X8, LSL]
	0x03A09B08 CMP W9, 0x3
	0x03A09B0C B.EQ 0x3A09B20
	0x03A09B10 CMP W9, 0x2
	0x03A09B14 B.NE 0x3A09B2C
	0x03A09B18 LDR W25, [X20 + 0xE4]
	0x03A09B1C B 0x3A09B50
	0x03A09B20 LDR W8, [X20 + 0xE4]
	0x03A09B24 SUB W25, W31, W8
	0x03A09B28 B 0x3A09B50
	0x03A09B2C ADRP X8, 0x6EA000
	0x03A09B30 LDR X8, [X8 + 0x5A8]
	0x03A09B34 LDR W25, [X20 + 0xE4]
	0x03A09B38 LDR X0, [X8]
	0x03A09B3C LDR W8, [X0 + 0xE0]
	0x03A09B40 CBNZ W8, 0x3A09B48
	0x03A09B44 BL 0x1C16DFC
	0x03A09B48 CMP W25, 0x0
	0x03A09B4C CSNEG W25, W25, W25, PL

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+144], X30
	003 Move [X31+152], X25
	004 Move [X31+160], X24
	005 Move [X31+168], X23
	006 Move [X31+176], X22
	007 Move [X31+184], X21
	008 Move [X31+192], X20
	009 Move [X31+200], X19
	010 Compare X1, 0
	011 JumpIfEqual {129}
	012 Move [X1+40], X31
	013 Move W8, [X0+66]
	014 Move X23, [X1+32]
	015 Move X19, X1
	016 Move X20, X0
	017 Compare W8, 0
	018 JumpIfEqual {22}
	019 Move W21, W31
	020 Compare X23, 0
	021 JumpIfNotEqual {27}
	022 Move W8, [X20+145]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CSET not yet implemented."
	025 Compare X23, 0
	026 JumpIfEqual {129}
	027 Move X22, X31
	028 Move X24, X23
	029 Add X24, X24, 80
	030 Move X8, [X24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X25, X23
	033 Add X25, X25, 72
	034 Move X9, [X25]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Compare X9, 0
	037 JumpIfEqual {129}
	038 Move X12, [X9+32]
	039 Move X11, [X23+32]
	040 Move X10, [X23+40]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X12, [X9+40]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Compare X8, 0
	045 JumpIfEqual {129}
	046 Move X12, [X8+32]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X11, [X8+40]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction LDUR not yet implemented."
	051 NotImplemented "Instruction LDUR not yet implemented."
	052 NotImplemented "Instruction LDUR not yet implemented."
	053 Add X8, X23, 24
	054 Add X0, X31, 96
	055 Move [X31+112], V1
	056 Move [X31+120], V0
	057 Move V1, [X8+16]
	058 Move V0, [X8+32]
	059 Move V2, [X8]
	060 Add X1, X31, 48
	061 Add X2, X31, 0
	062 Move [X31+80], V0
	063 Move [X31+88], V3
	064 Move [X31+48], V2
	065 Move [X31+56], V1
	066 NotImplemented "Instruction LDUR not yet implemented."
	067 NotImplemented "Instruction LDUR not yet implemented."
	068 NotImplemented "Instruction LDUR not yet implemented."
	069 Move [X31+16], V1
	070 Move [X31+24], V0
	071 Move [X31], V2
	072 Move W3, [X20+64]
	073 Call ClipperBase.SlopesEqual, X0, X1, X2, X3
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {122}
	078 Move X8, [X24]
	079 Move TEMP, X21
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {92}
	083 Compare X8, 0
	084 JumpIfEqual {129}
	085 Move X9, [X25]
	086 Move [X8+72], X9
	087 Move X9, [X25]
	088 Compare X9, 0
	089 JumpIfEqual {129}
	090 Move X22, X31
	091 Move [X9+80], X8
	092 Compare X8, 0
	093 JumpIfEqual {129}
	094 Move X14, [X23+72]
	095 Compare X14, 0
	096 JumpIfEqual {129}
	097 Move X9, [X8+32]
	098 Move X10, [X8+40]
	099 Move X11, [X14+32]
	100 Move X14, [X14+40]
	101 Move X12, [X23+32]
	102 Move X13, [X23+40]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 NotImplemented "Instruction CMP not yet implemented."
	105 NotImplemented "Instruction CMP not yet implemented."
	106 NotImplemented "Instruction CMP not yet implemented."
	107 NotImplemented "Instruction CMP not yet implemented."
	108 NotImplemented "Instruction CMP not yet implemented."
	109 NotImplemented "Instruction CMP not yet implemented."
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction CSET not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 NotImplemented "Instruction CMP not yet implemented."
	114 NotImplemented "Instruction CSET not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 NotImplemented "Instruction CSET not yet implemented."
	117 Xor W9, W9, W10
	118 Move TEMP, X9
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfNotEqual {85}
	122 NotImplemented "Instruction CMP not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 NotImplemented "Instruction CSEL not yet implemented."
	125 Move X24, X25
	126 Move X23, [X24]
	127 Compare X23, 0
	128 JumpIfNotEqual {28}
	129 Call 0x1C17F20
	130 Move X22, X31
	131 Move [X19+32], X22
	132 Move X20, [X31+192]
	133 Move X19, [X31+200]
	134 Move X22, [X31+176]
	135 Move X21, [X31+184]
	136 Move X24, [X31+160]
	137 Move X23, [X31+168]
	138 Move X30, [X31+144]
	139 Move X25, [X31+152]
	140 Add X31, X31, 208
	141 Return 

Method: UnityEngine.Rendering.Universal.OutPt DupOutPt(UnityEngine.Rendering.Universal.OutPt outPt, System.Boolean InsertAfter)

Disassembly:
	0x03A0D3B0 CMP W1, 0x1
	0x03A0D3B4 B.NE 0x3A0D3E0
	0x03A0D3B8 MOV X0, X19
	0x03A0D3BC BL 0x3EB1AD0
	0x03A0D3C0 LDR X20, [X0]
	0x03A0D3C4 BL 0x3EB1AE0
	0x03A0D3C8 LDR X1, [X21]
	0x03A0D3CC ADD X0, X31, 0x20
	0x03A0D3D0 BL 0x2BC434C
	0x03A0D3D4 CBZ X20, 0x3A0D380
	0x03A0D3D8 MOV X0, X20
	0x03A0D3DC BL 0x1C16F18
	0x03A0D3E0 MOV X20, X31
	0x03A0D3E4 B 0x3A0D3EC
	0x03A0D3E8 MOV X19, X0
	0x03A0D3EC LDR X1, [X21]
	0x03A0D3F0 ADD X0, X31, 0x20
	0x03A0D3F4 BL 0x2BC434C
	0x03A0D3F8 CBNZ X20, 0x3A0D404
	0x03A0D3FC MOV X0, X19
	0x03A0D400 BL 0x1D2C690
	0x03A0D404 MOV X0, X20
	0x03A0D408 BL 0x1C16F18
	0x03A0D40C BL 0x1990590
	0x03A0D410 CBZ X0, 0x3A0D424
	0x03A0D414 LDR X8, [X0 + 0x20]
	0x03A0D418 CBNZ X8, 0x3A0D424
	0x03A0D41C LDR X0, [X0 + 0x18]
	0x03A0D420 CBNZ X0, 0x3A0D414
	0x03A0D424 RET
	0x03A0D428 SUB X31, X31, 0x80
	0x03A0D42C STR X30, [X31 + 0x40]
	0x03A0D430 STP X24, X23, [X31 + 0x50]
	0x03A0D434 STP X22, X21, [X31 + 0x60]
	0x03A0D438 STP X20, X19, [X31 + 0x70]
	0x03A0D43C ADRP X22, 0x9D4000
	0x03A0D440 LDRB W8, [X22 + 0xF93]
	0x03A0D444 MOV X19, X2
	0x03A0D448 MOV X20, X1
	0x03A0D44C MOV X21, X0
	0x03A0D450 TBNZ X8, 0x0, 0x3A0D48C
	0x03A0D454 ADRP X0, 0x747000
	0x03A0D458 LDR X0, [X0 + 0x2E0]
	0x03A0D45C BL 0x1C16CF4
	0x03A0D460 ADRP X0, 0x747000
	0x03A0D464 LDR X0, [X0 + 0x2E8]
	0x03A0D468 BL 0x1C16CF4
	0x03A0D46C ADRP X0, 0x747000
	0x03A0D470 LDR X0, [X0 + 0x2F0]
	0x03A0D474 BL 0x1C16CF4
	0x03A0D478 ADRP X0, 0x747000
	0x03A0D47C LDR X0, [X0 + 0x300]
	0x03A0D480 BL 0x1C16CF4
	0x03A0D484 MOVZ W8, 0x1
	0x03A0D488 STRB W8, [X22 + 0xF93]
	0x03A0D48C STP X31, X31, [X31 + 0x20]
	0x03A0D490 STR X31, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X19, 0x9D5000
	008 Move X22, 0x748000
	009 Move W8, [X19+3983]
	010 Move X22, [X22+904]
	011 Move W21, W2
	012 Move X20, X1
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x748000
	018 Move X0, [X0+904]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X19+3983], W8
	022 Move X0, [X22]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X19, X0
	026 Call Object..ctor, X0
	027 Compare X20, 0
	028 JumpIfEqual {76}
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 Move [X31+16], V1
	033 Move [X31+24], V0
	034 Move [X31], V2
	035 Compare X19, 0
	036 JumpIfEqual {76}
	037 Move V1, [X31+16]
	038 Move V0, [X31+32]
	039 Move V2, [X31]
	040 Move [X19+56], V0
	041 Move [X19+40], V1
	042 Move [X19+24], V2
	043 Move W8, [X20+16]
	044 Move [X19+16], W8
	045 Move X8, X20
	046 Move TEMP, X21
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {58}
	050 Add X8, X8, 72
	051 Move X9, [X8]
	052 Move [X19+72], X9
	053 Move [X19+80], X20
	054 Move X9, [X8]
	055 Compare X9, 0
	056 JumpIfEqual {76}
	057 Add X9, X9, 80
	058 Add X8, X8, 80
	059 Move X9, [X8]
	060 Move [X19+72], X20
	061 Move [X19+80], X9
	062 Move X9, [X8]
	063 Compare X9, 0
	064 JumpIfEqual {76}
	065 Add X9, X9, 72
	066 Move [X9], X19
	067 Move [X8], X19
	068 Move X0, X19
	069 Move X20, [X31+80]
	070 Move X19, [X31+88]
	071 Move X22, [X31+64]
	072 Move X21, [X31+72]
	073 Move X30, [X31+48]
	074 Add X31, X31, 96
	075 Return X0
	076 Call 0x1C17F20

Method: System.Boolean GetOverlap(System.Int64 a1, System.Int64 a2, System.Int64 b1, System.Int64 b2, out System.Int64 Left, out System.Int64 Right)

Disassembly:
	0x03A0D494 CBZ X19, 0x3A0D5B0
	0x03A0D498 LDR X0, [X21 + 0x30]
	0x03A0D49C CBZ X0, 0x3A0D5B0
	0x03A0D4A0 ADRP X8, 0x747000
	0x03A0D4A4 LDR X8, [X8 + 0x300]
	0x03A0D4A8 ADRP X23, 0x747000
	0x03A0D4AC ADRP X21, 0x747000
	0x03A0D4B0 LDR X22, [X19 + 0x18]
	0x03A0D4B4 LDR X1, [X8]
	0x03A0D4B8 LDR X23, [X23 + 0x2E8]
	0x03A0D4BC LDR X21, [X21 + 0x2E0]
	0x03A0D4C0 ADD X8, X31, 0x8
	0x03A0D4C4 BL 0x301CB58
	0x03A0D4C8 LDUR V0, [X31 + 0x8]
	0x03A0D4CC LDR X8, [X31 + 0x18]
	0x03A0D4D0 STR V0, [X31 + 0x2]
	0x03A0D4D4 STR X8, [X31 + 0x30]
	0x03A0D4D8 LDR X1, [X23]
	0x03A0D4DC ADD X0, X31, 0x20
	0x03A0D4E0 BL 0x2BC4350
	0x03A0D4E4 TBZ X0, 0x0, 0x3A0D584
	0x03A0D4E8 LDR X24, [X31 + 0x30]
	0x03A0D4EC CBZ X24, 0x3A0D5A8
	0x03A0D4F0 LDR X0, [X24 + 0x20]
	0x03A0D4F4 CBZ X0, 0x3A0D4D8
	0x03A0D4F8 CMP X24, X19
	0x03A0D4FC B.EQ 0x3A0D4D8
	0x03A0D500 CMP X24, X20
	0x03A0D504 B.EQ 0x3A0D4D8
	0x03A0D508 LDR X8, [X24 + 0x18]
	0x03A0D50C CBZ X8, 0x3A0D520
	0x03A0D510 LDR X9, [X8 + 0x20]
	0x03A0D514 CBNZ X9, 0x3A0D520
	0x03A0D518 LDR X8, [X8 + 0x18]
	0x03A0D51C CBNZ X8, 0x3A0D510
	0x03A0D520 CMP X8, X19
	0x03A0D524 B.EQ 0x3A0D538
	0x03A0D528 CMP X8, X22
	0x03A0D52C B.EQ 0x3A0D538
	0x03A0D530 CMP X8, X20
	0x03A0D534 B.NE 0x3A0D4D8
	0x03A0D538 CBZ X20, 0x3A0D5AC
	0x03A0D53C LDR X1, [X20 + 0x20]
	0x03A0D540 BL 0x3A0D208
	0x03A0D544 TBZ X0, 0x0, 0x3A0D550
	0x03A0D548 STR X20, [X24 + 0x18]
	0x03A0D54C B 0x3A0D4D8
	0x03A0D550 LDR X0, [X24 + 0x20]
	0x03A0D554 LDR X1, [X19 + 0x20]
	0x03A0D558 BL 0x3A0D208
	0x03A0D55C TBZ X0, 0x0, 0x3A0D568
	0x03A0D560 STR X19, [X24 + 0x18]
	0x03A0D564 B 0x3A0D4D8
	0x03A0D568 LDR X8, [X24 + 0x18]
	0x03A0D56C CMP X8, X20
	0x03A0D570 B.EQ 0x3A0D57C
	0x03A0D574 CMP X8, X19
	0x03A0D578 B.NE 0x3A0D4D8
	0x03A0D57C STR X22, [X24 + 0x18]
	0x03A0D580 B 0x3A0D4D8
	0x03A0D584 LDR X1, [X21]
	0x03A0D588 ADD X0, X31, 0x20
	0x03A0D58C BL 0x2BC434C
	0x03A0D590 LDP X20, X19, [X31 + 0x70]
	0x03A0D594 LDP X22, X21, [X31 + 0x60]
	0x03A0D598 LDP X24, X23, [X31 + 0x50]
	0x03A0D59C LDR X30, [X31 + 0x40]
	0x03A0D5A0 ADD X31, X31, 0x80
	0x03A0D5A4 RET
	0x03A0D5A8 BL 0x1C16F20

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x9D5000
	011 Move X26, 0x6E7000
	012 Move W8, [X25+3984]
	013 Move X26, [X26+1448]
	014 Move X20, X6
	015 Move X19, X5
	016 Move X21, X4
	017 Move X22, X3
	018 Move X23, X2
	019 Move X24, X1
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x6E7000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X25+3984], W8
	029 Move X0, [X26]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X0, X24
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X1, X22
	038 Move X2, X31
	039 Call Math.Max, X0, X1
	040 Move [X19], X0
	041 Move X0, X23
	042 Move X0, X23
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X1, X22
	045 Move X2, X31
	046 Call Math.Max, X0, X1
	047 Move [X19], X0
	048 Move X0, X24
	049 Move X1, X21
	050 Move X1, X21
	051 Move X2, X31
	052 Call Math.Max, X0, X1
	053 Move [X19], X0
	054 Move X0, X23
	055 Move X1, X21
	056 Move X2, X31
	057 Call Math.Max, X0, X1
	058 Move [X19], X0
	059 Move X0, X24
	060 Move X1, X22
	061 Move X2, X31
	062 Call Math.Min, X0, X1
	063 Move [X20], X0
	064 Move X8, [X19]
	065 Move X20, [X31+64]
	066 Move X19, [X31+72]
	067 Move X22, [X31+48]
	068 Move X21, [X31+56]
	069 Move X24, [X31+32]
	070 Move X23, [X31+40]
	071 Move X26, [X31+16]
	072 Move X25, [X31+24]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CSET not yet implemented."
	075 Move X30, [X31+80]
	076 Return X0

Method: System.Boolean JoinHorz(UnityEngine.Rendering.Universal.OutPt op1, UnityEngine.Rendering.Universal.OutPt op1b, UnityEngine.Rendering.Universal.OutPt op2, UnityEngine.Rendering.Universal.OutPt op2b, UnityEngine.Rendering.Universal.IntPoint Pt, System.Boolean DiscardLeft)

Disassembly:
	0x03A0D5AC BL 0x1C16F20
	0x03A0D5B0 BL 0x1C16F20
	0x03A0D5B4 B 0x3A0D5C4
	0x03A0D5B8 B 0x3A0D5C4
	0x03A0D5BC B 0x3A0D5C4
	0x03A0D5C0 B 0x3A0D5C4
	0x03A0D5C4 MOV X19, X0
	0x03A0D5C8 CMP W1, 0x1
	0x03A0D5CC B.NE 0x3A0D5F8
	0x03A0D5D0 MOV X0, X19
	0x03A0D5D4 BL 0x3EB1AD0
	0x03A0D5D8 LDR X20, [X0]
	0x03A0D5DC BL 0x3EB1AE0
	0x03A0D5E0 LDR X1, [X21]
	0x03A0D5E4 ADD X0, X31, 0x20
	0x03A0D5E8 BL 0x2BC434C
	0x03A0D5EC CBZ X20, 0x3A0D590
	0x03A0D5F0 MOV X0, X20
	0x03A0D5F4 BL 0x1C16F18
	0x03A0D5F8 MOV X20, X31
	0x03A0D5FC B 0x3A0D604
	0x03A0D600 MOV X19, X0
	0x03A0D604 LDR X1, [X21]
	0x03A0D608 ADD X0, X31, 0x20
	0x03A0D60C BL 0x2BC434C
	0x03A0D610 CBNZ X20, 0x3A0D61C
	0x03A0D614 MOV X0, X19
	0x03A0D618 BL 0x1D2C690
	0x03A0D61C MOV X0, X20
	0x03A0D620 BL 0x1C16F18
	0x03A0D624 BL 0x1990590
	0x03A0D628 SUB X31, X31, 0x50
	0x03A0D62C STR X30, [X31 + 0x20]
	0x03A0D630 STP X22, X21, [X31 + 0x30]
	0x03A0D634 STP X20, X19, [X31 + 0x40]
	0x03A0D638 ADRP X22, 0x9D4000
	0x03A0D63C LDRB W8, [X22 + 0xF94]
	0x03A0D640 MOV X19, X2
	0x03A0D644 MOV X20, X1
	0x03A0D648 MOV X21, X0
	0x03A0D64C TBNZ X8, 0x0, 0x3A0D688
	0x03A0D650 ADRP X0, 0x747000
	0x03A0D654 LDR X0, [X0 + 0x2E0]
	0x03A0D658 BL 0x1C16CF4
	0x03A0D65C ADRP X0, 0x747000
	0x03A0D660 LDR X0, [X0 + 0x2E8]
	0x03A0D664 BL 0x1C16CF4
	0x03A0D668 ADRP X0, 0x747000
	0x03A0D66C LDR X0, [X0 + 0x2F0]
	0x03A0D670 BL 0x1C16CF4
	0x03A0D674 ADRP X0, 0x747000
	0x03A0D678 LDR X0, [X0 + 0x300]
	0x03A0D67C BL 0x1C16CF4
	0x03A0D680 MOVZ W8, 0x1
	0x03A0D684 STRB W8, [X22 + 0xF94]
	0x03A0D688 STP X31, X31, [X31 + 0x8]
	0x03A0D68C STR X31, [X31 + 0x18]
	0x03A0D690 LDR X0, [X21 + 0x30]
	0x03A0D694 CBZ X0, 0x3A0D728
	0x03A0D698 ADRP X8, 0x747000
	0x03A0D69C LDR X8, [X8 + 0x300]
	0x03A0D6A0 ADRP X22, 0x747000
	0x03A0D6A4 ADRP X21, 0x747000
	0x03A0D6A8 LDR X1, [X8]
	0x03A0D6AC LDR X22, [X22 + 0x2E8]
	0x03A0D6B0 LDR X21, [X21 + 0x2E0]
	0x03A0D6B4 ADD X8, X31, 0x8
	0x03A0D6B8 BL 0x301CB58
	0x03A0D6BC LDR X1, [X22]
	0x03A0D6C0 ADD X0, X31, 0x8
	0x03A0D6C4 BL 0x2BC4350
	0x03A0D6C8 TBZ X0, 0x0, 0x3A0D704
	0x03A0D6CC LDR X8, [X31 + 0x18]
	0x03A0D6D0 CBZ X8, 0x3A0D724
	0x03A0D6D4 LDR X9, [X8 + 0x18]
	0x03A0D6D8 CBZ X9, 0x3A0D6EC
	0x03A0D6DC LDR X10, [X9 + 0x20]
	0x03A0D6E0 CBNZ X10, 0x3A0D6EC
	0x03A0D6E4 LDR X9, [X9 + 0x18]
	0x03A0D6E8 CBNZ X9, 0x3A0D6DC
	0x03A0D6EC CMP X9, X20
	0x03A0D6F0 B.NE 0x3A0D6BC
	0x03A0D6F4 LDR X9, [X8 + 0x20]
	0x03A0D6F8 CBZ X9, 0x3A0D6BC
	0x03A0D6FC STR X19, [X8 + 0x18]
	0x03A0D700 B 0x3A0D6BC
	0x03A0D704 LDR X1, [X21]
	0x03A0D708 ADD X0, X31, 0x8
	0x03A0D70C BL 0x2BC434C
	0x03A0D710 LDP X20, X19, [X31 + 0x40]
	0x03A0D714 LDP X22, X21, [X31 + 0x30]
	0x03A0D718 LDR X30, [X31 + 0x20]
	0x03A0D71C ADD X31, X31, 0x50
	0x03A0D720 RET
	0x03A0D724 BL 0x1C16F20
	0x03A0D728 BL 0x1C16F20
	0x03A0D72C B 0x3A0D730
	0x03A0D730 MOV X20, X0
	0x03A0D734 CMP W1, 0x1
	0x03A0D738 B.NE 0x3A0D764
	0x03A0D73C MOV X0, X20
	0x03A0D740 BL 0x3EB1AD0
	0x03A0D744 LDR X19, [X0]
	0x03A0D748 BL 0x3EB1AE0
	0x03A0D74C LDR X1, [X21]
	0x03A0D750 ADD X0, X31, 0x8
	0x03A0D754 BL 0x2BC434C
	0x03A0D758 CBZ X19, 0x3A0D710
	0x03A0D75C MOV X0, X19
	0x03A0D760 BL 0x1C16F18
	0x03A0D764 MOV X19, X31
	0x03A0D768 B 0x3A0D770
	0x03A0D76C MOV X20, X0
	0x03A0D770 LDR X1, [X21]
	0x03A0D774 ADD X0, X31, 0x8
	0x03A0D778 BL 0x2BC434C
	0x03A0D77C CBNZ X19, 0x3A0D788
	0x03A0D780 MOV X0, X20
	0x03A0D784 BL 0x1D2C690
	0x03A0D788 MOV X0, X19
	0x03A0D78C BL 0x1C16F18
	0x03A0D790 BL 0x1990590
	0x03A0D794 STR X30, [X31 - 0x10]!
	0x03A0D798 CBZ X1, 0x3A0D7C4
	0x03A0D79C LDR X8, [X1 + 0x20]
	0x03A0D7A0 MOV X9, X8
	0x03A0D7A4 CBZ X9, 0x3A0D7C4
	0x03A0D7A8 LDR W10, [X1 + 0x10]
	0x03A0D7AC STR W10, [X9 + 0x10]
	0x03A0D7B0 LDR X9, [X9 + 0x50]
	0x03A0D7B4 CMP X9, X8
	0x03A0D7B8 B.NE 0x3A0D7A4
	0x03A0D7BC LDR X30, [X31], #0x10
	0x03A0D7C0 RET
	0x03A0D7C4 BL 0x1C16F20
	0x03A0D7C8 STR X30, [X31 - 0x40]!
	0x03A0D7CC STP X24, X23, [X31 + 0x10]
	0x03A0D7D0 STP X22, X21, [X31 + 0x20]
	0x03A0D7D4 STP X20, X19, [X31 + 0x30]
	0x03A0D7D8 ADRP X23, 0x9D4000
	0x03A0D7DC ADRP X24, 0x747000
	0x03A0D7E0 ADRP X21, 0x747000
	0x03A0D7E4 ADRP X22, 0x747000
	0x03A0D7E8 LDRB W8, [X23 + 0xF98]
	0x03A0D7EC LDR X24, [X24 + 0x3F0]
	0x03A0D7F0 LDR X21, [X21 + 0x3F8]
	0x03A0D7F4 LDR X22, [X22 + 0x400]
	0x03A0D7F8 MOV W19, W1
	0x03A0D7FC MOV X20, X0
	0x03A0D800 TBNZ X8, 0x0, 0x3A0D830
	0x03A0D804 ADRP X0, 0x747000
	0x03A0D808 LDR X0, [X0 + 0x400]
	0x03A0D80C BL 0x1C16CF4
	0x03A0D810 ADRP X0, 0x747000
	0x03A0D814 LDR X0, [X0 + 0x3F8]
	0x03A0D818 BL 0x1C16CF4
	0x03A0D81C ADRP X0, 0x747000
	0x03A0D820 LDR X0, [X0 + 0x3F0]
	0x03A0D824 BL 0x1C16CF4
	0x03A0D828 MOVZ W8, 0x1
	0x03A0D82C STRB W8, [X23 + 0xF98]
	0x03A0D830 LDR X0, [X24]
	0x03A0D834 BL 0x1C16F10
	0x03A0D838 LDR X1, [X21]
	0x03A0D83C MOV X21, X0
	0x03A0D840 BL 0x301B7C4
	0x03A0D844 LDR X0, [X22]
	0x03A0D848 BL 0x1C16F10
	0x03A0D84C MOV W1, W31
	0x03A0D850 MOV X22, X0
	0x03A0D854 BL 0x3A0698C
	0x03A0D858 CBZ X22, 0x3A0D8A8
	0x03A0D85C MOVZ W8, 0x1
	0x03A0D860 MOVZ W3, 0x1
	0x03A0D864 MOV X0, X22
	0x03A0D868 MOV X1, X20
	0x03A0D86C MOV W2, W31
	0x03A0D870 STRB W8, [X22 + 0x91]
	0x03A0D874 BL 0x3A05454
	0x03A0D878 MOVZ W1, 0x1
	0x03A0D87C MOV X0, X22
	0x03A0D880 MOV X2, X21
	0x03A0D884 MOV W3, W19
	0x03A0D888 MOV W4, W19
	0x03A0D88C BL 0x3A06C28
	0x03A0D890 MOV X0, X21
	0x03A0D894 LDP X20, X19, [X31 + 0x30]
	0x03A0D898 LDP X22, X21, [X31 + 0x20]
	0x03A0D89C LDP X24, X23, [X31 + 0x10]
	0x03A0D8A0 LDR X30, [X31], #0x40
	0x03A0D8A4 RET
	0x03A0D8A8 BL 0x1C16F20
	0x03A0D8AC STR X30, [X31 - 0x40]!
	0x03A0D8B0 STP X24, X23, [X31 + 0x10]
	0x03A0D8B4 STP X22, X21, [X31 + 0x20]
	0x03A0D8B8 STP X20, X19, [X31 + 0x30]
	0x03A0D8BC ADRP X23, 0x9D4000
	0x03A0D8C0 ADRP X24, 0x747000
	0x03A0D8C4 ADRP X21, 0x747000
	0x03A0D8C8 ADRP X22, 0x747000
	0x03A0D8CC LDRB W8, [X23 + 0xF99]
	0x03A0D8D0 LDR X24, [X24 + 0x3F0]
	0x03A0D8D4 LDR X21, [X21 + 0x3F8]
	0x03A0D8D8 LDR X22, [X22 + 0x400]
	0x03A0D8DC MOV W19, W1
	0x03A0D8E0 MOV X20, X0
	0x03A0D8E4 TBNZ X8, 0x0, 0x3A0D914
	0x03A0D8E8 ADRP X0, 0x747000
	0x03A0D8EC LDR X0, [X0 + 0x400]
	0x03A0D8F0 BL 0x1C16CF4
	0x03A0D8F4 ADRP X0, 0x747000
	0x03A0D8F8 LDR X0, [X0 + 0x3F8]
	0x03A0D8FC BL 0x1C16CF4
	0x03A0D900 ADRP X0, 0x747000
	0x03A0D904 LDR X0, [X0 + 0x3F0]
	0x03A0D908 BL 0x1C16CF4
	0x03A0D90C MOVZ W8, 0x1
	0x03A0D910 STRB W8, [X23 + 0xF99]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Compare X1, 0
	015 JumpIfEqual {235}
	016 Compare X2, 0
	017 JumpIfEqual {235}
	018 Move X21, X3
	019 Compare X3, 0
	020 JumpIfEqual {235}
	021 Compare X4, 0
	022 JumpIfEqual {235}
	023 Move X27, [X1+32]
	024 Move X28, [X2+32]
	025 Move X29, [X21+32]
	026 Move X25, [X4+32]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CSET not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CSET not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move W19, W6
	033 Move X20, X5
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move [X31+12], W23
	036 Move X24, X1
	037 Move X1, [X1+72]
	038 Compare X1, 0
	039 JumpIfEqual {235}
	040 Move X9, [X1+32]
	041 Move X8, [X20+8]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X10, [X24+32]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X9, [X1+40]
	046 Move X10, [X20+16]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move TEMP, X19
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {55}
	052 Move X9, [X24+32]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction CSEL not yet implemented."
	055 And W2, W19, 1
	056 Move X1, X24
	057 Call Clipper.DupOutPt, X0, X1, X2
	058 Compare X0, 0
	059 JumpIfEqual {235}
	060 Move X8, [X0+32]
	061 Move X9, [X20+8]
	062 Move X22, X0
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X8, [X20+16]
	065 Move X9, [X22+40]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move V1, [X20+16]
	068 Move V0, [X20+32]
	069 Move V2, [X20]
	070 Add X8, X22, 24
	071 And W2, W19, 1
	072 Move X24, X1
	073 Move X1, [X1+72]
	074 Compare X1, 0
	075 JumpIfEqual {235}
	076 Move X9, [X1+32]
	077 Move X8, [X20+8]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X10, [X24+32]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X9, [X1+40]
	082 Move X10, [X20+16]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move TEMP, X19
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {91}
	088 Move X9, [X24+32]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CSEL not yet implemented."
	091 Xor W23, W19, 1
	092 And W2, W23, 1
	093 Move X1, X24
	094 Call Clipper.DupOutPt, X0, X1, X2
	095 Compare X0, 0
	096 JumpIfEqual {235}
	097 Move X8, [X0+32]
	098 Move X9, [X20+8]
	099 Move X22, X0
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X8, [X20+16]
	102 Move X9, [X22+40]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Move X23, X22
	105 Move X22, X24
	106 Move V1, [X20+16]
	107 Move V0, [X20+32]
	108 Move V2, [X20]
	109 Add X8, X22, 24
	110 And W2, W23, 1
	111 Move [X8+16], V1
	112 Move [X8+24], V0
	113 Move [X8], V2
	114 Move X1, X22
	115 Call Clipper.DupOutPt, X0, X1, X2
	116 Move X23, X0
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move X24, X21
	119 Move X21, [X21+72]
	120 Compare X21, 0
	121 JumpIfEqual {235}
	122 Move X9, [X21+32]
	123 Move X8, [X20+8]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move X10, [X24+32]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move X9, [X21+40]
	128 Move X10, [X20+16]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move TEMP, X19
	131 And TEMP, TEMP, 1
	132 Compare TEMP, 1
	133 JumpIfEqual {137}
	134 Move X9, [X24+32]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 NotImplemented "Instruction CSEL not yet implemented."
	137 And W2, W19, 1
	138 Move X1, X24
	139 Call Clipper.DupOutPt, X0, X1, X2
	140 Compare X0, 0
	141 JumpIfEqual {235}
	142 Move X8, [X0+32]
	143 Move X9, [X20+8]
	144 Move X21, X0
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move X8, [X20+16]
	147 Move X9, [X21+40]
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Move V1, [X20+16]
	150 Move V0, [X20+32]
	151 Move V2, [X20]
	152 Add X8, X21, 24
	153 And W2, W19, 1
	154 Move X24, X21
	155 Move X21, [X21+72]
	156 Compare X21, 0
	157 JumpIfEqual {235}
	158 Move X9, [X21+32]
	159 Move X8, [X20+8]
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move X10, [X24+32]
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move X9, [X21+40]
	164 Move X10, [X20+16]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move TEMP, X19
	167 And TEMP, TEMP, 1
	168 Compare TEMP, 1
	169 JumpIfNotEqual {173}
	170 Move X9, [X24+32]
	171 NotImplemented "Instruction CMP not yet implemented."
	172 NotImplemented "Instruction CSEL not yet implemented."
	173 Xor W25, W19, 1
	174 And W2, W25, 1
	175 Move X1, X24
	176 Call Clipper.DupOutPt, X0, X1, X2
	177 Compare X0, 0
	178 JumpIfEqual {235}
	179 Move X8, [X0+32]
	180 Move X9, [X20+8]
	181 Move X21, X0
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Move X8, [X20+16]
	184 Move X9, [X21+40]
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Move X0, X21
	187 Move X21, X24
	188 Move V1, [X20+16]
	189 Move V0, [X20+32]
	190 Move V2, [X20]
	191 Add X8, X21, 24
	192 And W2, W25, 1
	193 Move [X8+16], V1
	194 Move [X8+24], V0
	195 Move [X8], V2
	196 Move X1, X21
	197 Call Clipper.DupOutPt, X0, X1, X2
	198 NotImplemented "Instruction CMP not yet implemented."
	199 NotImplemented "Instruction CSET not yet implemented."
	200 And W9, W19, 1
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Move [X22+80], X21
	203 Move [X21+72], X22
	204 Compare X23, 0
	205 JumpIfEqual {235}
	206 Move [X23+72], X0
	207 Compare X0, 0
	208 JumpIfEqual {235}
	209 Add X8, X0, 80
	210 Move [X22+72], X21
	211 Move [X21+80], X22
	212 Compare X23, 0
	213 JumpIfEqual {235}
	214 Move [X23+80], X0
	215 Compare X0, 0
	216 JumpIfEqual {235}
	217 Add X8, X0, 72
	218 Move [X8], X23
	219 Move W23, [X31+12]
	220 Xor W0, W23, W26
	221 Move X20, [X31+96]
	222 Move X19, [X31+104]
	223 Move X22, [X31+80]
	224 Move X21, [X31+88]
	225 Move X24, [X31+64]
	226 Move X23, [X31+72]
	227 Move X26, [X31+48]
	228 Move X25, [X31+56]
	229 Move X28, [X31+32]
	230 Move X27, [X31+40]
	231 Move X29, [X31+16]
	232 Move X30, [X31+24]
	233 Add X31, X31, 112
	234 Return X0
	235 Call 0x1C17F20

Method: System.Boolean JoinPoints(UnityEngine.Rendering.Universal.Join j, UnityEngine.Rendering.Universal.OutRec outRec1, UnityEngine.Rendering.Universal.OutRec outRec2)

Disassembly:
	0x03A0D914 LDR X0, [X24]
	0x03A0D918 BL 0x1C16F10
	0x03A0D91C LDR X1, [X21]
	0x03A0D920 MOV X21, X0
	0x03A0D924 BL 0x301B7C4
	0x03A0D928 LDR X0, [X22]
	0x03A0D92C BL 0x1C16F10
	0x03A0D930 MOV W1, W31
	0x03A0D934 MOV X22, X0
	0x03A0D938 BL 0x3A0698C
	0x03A0D93C CBZ X22, 0x3A0D98C
	0x03A0D940 MOVZ W8, 0x1
	0x03A0D944 MOVZ W3, 0x1
	0x03A0D948 MOV X0, X22
	0x03A0D94C MOV X1, X20
	0x03A0D950 MOV W2, W31
	0x03A0D954 STRB W8, [X22 + 0x91]
	0x03A0D958 BL 0x3A06024
	0x03A0D95C MOVZ W1, 0x1
	0x03A0D960 MOV X0, X22
	0x03A0D964 MOV X2, X21
	0x03A0D968 MOV W3, W19
	0x03A0D96C MOV W4, W19
	0x03A0D970 BL 0x3A06C28
	0x03A0D974 MOV X0, X21
	0x03A0D978 LDP X20, X19, [X31 + 0x30]
	0x03A0D97C LDP X22, X21, [X31 + 0x20]
	0x03A0D980 LDP X24, X23, [X31 + 0x10]
	0x03A0D984 LDR X30, [X31], #0x40
	0x03A0D988 RET
	0x03A0D98C BL 0x1C16F20
	0x03A0D990 LDUR V0, [X0 + 0x8]
	0x03A0D994 LDUR V1, [X1 + 0x8]
	0x03A0D998 UNIMPLEMENTED
	0x03A0D99C UNIMPLEMENTED
	0x03A0D9A0 FSUB V0.2D, V0.2D, V1.2D
	0x00000000 INVALID
	0x03A0D9A8 FADDP D0, V0.2D
	0x03A0D9AC RET
	0x03A0D9B0 LDP X9, X8, [X2 + 0x8]
	0x03A0D9B4 LDP X11, X10, [X1 + 0x8]
	0x03A0D9B8 LDP D0, D1, [X0 + 0x8]
	0x03A0D9BC SUB X8, X10, X8
	0x03A0D9C0 SUB X9, X9, X11
	0x03A0D9C4 SCVTF D2, X11
	0x03A0D9C8 SCVTF D3, X10
	0x03A0D9CC SCVTF D4, X8
	0x03A0D9D0 SCVTF D5, X9
	0x03A0D9D4 SCVTF D0, D0
	0x03A0D9D8 SCVTF D1, D1
	0x03A0D9DC FMUL D2, D4, D2
	0x03A0D9E0 FMUL D3, D3, D5
	0x03A0D9E4 FMUL D0, D4, D0
	0x03A0D9E8 FMUL D1, D5, D1
	0x03A0D9EC FADD D2, D2, D3
	0x03A0D9F0 FADD D0, D0, D1
	0x03A0D9F4 FMUL D3, D4, D4
	0x03A0D9F8 FMUL D4, D5, D5
	0x03A0D9FC FSUB D0, D0, D2
	0x03A0DA00 FMUL D0, D0, D0
	0x03A0DA04 FADD D1, D3, D4
	0x03A0DA08 FDIV D0, D0, D1
	0x03A0DA0C RET
	0x03A0DA10 STR D8, [X31 - 0x40]!
	0x03A0DA14 STP X30, X23, [X31 + 0x10]
	0x03A0DA18 STP X22, X21, [X31 + 0x20]
	0x03A0DA1C STP X20, X19, [X31 + 0x30]
	0x03A0DA20 ADRP X23, 0x9D4000
	0x03A0DA24 ADRP X22, 0x6E6000
	0x03A0DA28 LDRB W8, [X23 + 0xF9A]
	0x03A0DA2C LDR X22, [X22 + 0x5A8]
	0x03A0DA30 MOV V8.16B, V0.16B
	0x03A0DA34 MOV X19, X2
	0x03A0DA38 MOV X20, X1
	0x03A0DA3C MOV X21, X0
	0x03A0DA40 TBNZ X8, 0x0, 0x3A0DA58
	0x03A0DA44 ADRP X0, 0x6E6000
	0x03A0DA48 LDR X0, [X0 + 0x5A8]
	0x03A0DA4C BL 0x1C16CF4
	0x03A0DA50 MOVZ W8, 0x1
	0x03A0DA54 STRB W8, [X23 + 0xF9A]
	0x03A0DA58 LDR X0, [X22]
	0x03A0DA5C LDR X22, [X21 + 0x8]
	0x03A0DA60 LDR X23, [X20 + 0x8]
	0x03A0DA64 LDR W8, [X0 + 0xE0]
	0x03A0DA68 CBNZ W8, 0x3A0DA70
	0x03A0DA6C BL 0x1C16DFC
	0x03A0DA70 LDR X8, [X21 + 0x10]
	0x03A0DA74 LDR X9, [X20 + 0x10]
	0x03A0DA78 SUBS X10, X22, X23
	0x03A0DA7C CSNEG X11, X10, X10, PL
	0x03A0DA80 SUBS X10, X8, X9
	0x03A0DA84 CSNEG X12, X10, X10, PL
	0x03A0DA88 CMP X11, X12
	0x03A0DA8C B.LS 0x3A0DB04
	0x03A0DA90 LDR X11, [X21 + 0x8]
	0x03A0DA94 LDR X12, [X20 + 0x8]
	0x03A0DA98 LDR X13, [X19 + 0x8]
	0x03A0DA9C CMP X12, X11
	0x03A0DAA0 CSET W15, GE
	0x03A0DAA4 SUBS X14, X13, X11
	0x03A0DAA8 CSET W16, GT
	0x03A0DAAC CMP W15, W16
	0x03A0DAB0 B.EQ 0x3A0DB70
	0x03A0DAB4 LDR X10, [X19 + 0x10]
	0x03A0DAB8 SUB X13, X13, X12
	0x03A0DABC SCVTF D1, X9
	0x03A0DAC0 SCVTF D0, X12
	0x03A0DAC4 SUB X9, X9, X10
	0x03A0DAC8 SCVTF D3, X13
	0x03A0DACC SCVTF D4, X9
	0x03A0DAD0 FMUL D1, D1, D3
	0x03A0DAD4 FMUL D0, D0, D4
	0x03A0DAD8 SCVTF D2, X11
	0x03A0DADC FADD D0, D1, D0
	0x03A0DAE0 SCVTF D1, X8
	0x03A0DAE4 FMUL D5, D1, D3
	0x03A0DAE8 FMUL D2, D2, D4
	0x03A0DAEC FADD D2, D5, D2
	0x03A0DAF0 FSUB D0, D2, D0
	0x03A0DAF4 FMUL D1, D4, D4
	0x03A0DAF8 FMUL D2, D0, D0
	0x03A0DAFC FMUL D0, D3, D3
	0x03A0DB00 B 0x3A0DCB4
	0x03A0DB04 LDR X11, [X19 + 0x10]
	0x03A0DB08 CMP X8, X9
	0x03A0DB0C CSET W13, LE
	0x03A0DB10 SUBS X12, X8, X11
	0x03A0DB14 CSET W14, LT
	0x03A0DB18 CMP W13, W14
	0x03A0DB1C B.EQ 0x3A0DBD4
	0x03A0DB20 LDR X10, [X20 + 0x8]
	0x03A0DB24 LDR X12, [X19 + 0x8]
	0x03A0DB28 LDR V1, [X21 + 0x8]
	0x03A0DB2C SUB X11, X9, X11
	0x03A0DB30 SCVTF D0, X9
	0x03A0DB34 SUB X9, X12, X10
	0x03A0DB38 SCVTF D2, X11
	0x03A0DB3C SCVTF D3, X10
	0x03A0DB40 SCVTF D4, X9
	0x03A0DB44 FMUL D3, D2, D3
	0x03A0DB48 FMUL D0, D0, D4
	0x03A0DB4C FADD D3, D3, D0
	0x03A0DB50 SCVTF D5, X8
	0x03A0DB54 SCVTF D0, D1
	0x03A0DB58 FMUL D1, D2, D0
	0x03A0DB5C FMUL D0, D2, D2
	0x03A0DB60 FMUL D2, D5, D4
	0x03A0DB64 FADD D1, D1, D2
	0x03A0DB68 FSUB D1, D1, D3
	0x03A0DB6C B 0x3A0DCAC
	0x03A0DB70 SUBS X16, X12, X11
	0x03A0DB74 LDR X15, [X19 + 0x10]
	0x03A0DB78 CSET W17, LE
	0x03A0DB7C CMP X13, X12
	0x03A0DB80 CSET W0, GT
	0x03A0DB84 CMP W17, W0
	0x03A0DB88 B.EQ 0x3A0DC20
	0x03A0DB8C SUB X10, X8, X15
	0x03A0DB90 SCVTF D0, X14
	0x03A0DB94 SCVTF D1, X11
	0x03A0DB98 SCVTF D2, X8
	0x03A0DB9C SCVTF D4, X10
	0x03A0DBA0 FMUL D2, D2, D0
	0x03A0DBA4 FMUL D1, D1, D4
	0x03A0DBA8 SCVTF D3, X12
	0x03A0DBAC FADD D2, D2, D1
	0x03A0DBB0 SCVTF D1, X9
	0x03A0DBB4 FMUL D5, D1, D0
	0x03A0DBB8 FMUL D3, D3, D4
	0x03A0DBBC FADD D3, D5, D3
	0x03A0DBC0 FSUB D2, D3, D2
	0x03A0DBC4 FMUL D1, D4, D4
	0x03A0DBC8 FMUL D2, D2, D2
	0x03A0DBCC FMUL D0, D0, D0
	0x03A0DBD0 B 0x3A0DCB4
	0x03A0DBD4 CMP X8, X9
	0x03A0DBD8 CSET W13, GE
	0x03A0DBDC CMP X9, X11
	0x03A0DBE0 CSET W14, LT
	0x03A0DBE4 CMP W13, W14
	0x03A0DBE8 B.EQ 0x3A0DC64
	0x03A0DBEC LDR X10, [X21 + 0x8]
	0x03A0DBF0 LDR X11, [X19 + 0x8]
	0x03A0DBF4 SCVTF D1, X8
	0x03A0DBF8 LDR V2, [X20 + 0x8]
	0x03A0DBFC SCVTF D0, X12
	0x03A0DC00 SUB X8, X11, X10
	0x03A0DC04 SCVTF D3, X10
	0x03A0DC08 SCVTF D4, X8
	0x03A0DC0C FMUL D3, D0, D3
	0x03A0DC10 FMUL D1, D1, D4
	0x03A0DC14 FADD D1, D3, D1
	0x03A0DC18 SCVTF D3, X9
	0x03A0DC1C B 0x3A0DC94
	0x03A0DC20 SCVTF D0, X10
	0x03A0DC24 SCVTF D1, X16
	0x03A0DC28 SCVTF D2, X11
	0x03A0DC2C SCVTF D3, X8
	0x03A0DC30 FMUL D2, D0, D2
	0x03A0DC34 FMUL D3, D3, D1
	0x03A0DC38 SCVTF D4, X13
	0x03A0DC3C FADD D2, D2, D3
	0x03A0DC40 SCVTF D3, X15
	0x03A0DC44 FMUL D4, D0, D4
	0x03A0DC48 FMUL D3, D1, D3
	0x03A0DC4C FADD D3, D4, D3
	0x03A0DC50 FSUB D2, D3, D2
	0x03A0DC54 FMUL D0, D0, D0
	0x03A0DC58 FMUL D2, D2, D2
	0x03A0DC5C FMUL D1, D1, D1
	0x03A0DC60 B 0x3A0DCB4
	0x03A0DC64 LDR X9, [X21 + 0x8]
	0x03A0DC68 LDR X12, [X20 + 0x8]
	0x03A0DC6C SCVTF D1, X8
	0x03A0DC70 LDR V2, [X19 + 0x8]
	0x03A0DC74 SCVTF D0, X10
	0x03A0DC78 SUB X8, X12, X9
	0x03A0DC7C SCVTF D3, X9
	0x03A0DC80 SCVTF D4, X8
	0x03A0DC84 FMUL D3, D0, D3
	0x03A0DC88 FMUL D1, D1, D4
	0x03A0DC8C FADD D1, D3, D1
	0x03A0DC90 SCVTF D3, X11
	0x03A0DC94 SCVTF D2, D2
	0x03A0DC98 FMUL D2, D0, D2
	0x03A0DC9C FMUL D3, D3, D4
	0x03A0DCA0 FADD D2, D2, D3
	0x03A0DCA4 FMUL D0, D0, D0
	0x03A0DCA8 FSUB D1, D2, D1
	0x03A0DCAC FMUL D2, D1, D1
	0x03A0DCB0 FMUL D1, D4, D4
	0x03A0DCB4 FADD D0, D0, D1
	0x03A0DCB8 LDP X20, X19, [X31 + 0x30]
	0x03A0DCBC LDP X22, X21, [X31 + 0x20]
	0x03A0DCC0 LDP X30, X23, [X31 + 0x10]
	0x03A0DCC4 FDIV D0, D2, D0
	0x03A0DCC8 FCMP D0, D8
	0x03A0DCCC CSET W0, MI
	0x03A0DCD0 LDR V8, [X31], #0x40
	0x03A0DCD4 RET
	0x03A0DCD8 LDUR V1, [X0 + 0x8]
	0x03A0DCDC LDUR V2, [X1 + 0x8]
	0x03A0DCE0 UNIMPLEMENTED
	0x03A0DCE4 UNIMPLEMENTED
	0x03A0DCE8 FSUB V1.2D, V1.2D, V2.2D
	0x00000000 INVALID
	0x03A0DCF0 FADDP D1, V1.2D
	0x03A0DCF4 FCMP D1, D0
	0x03A0DCF8 CSET W0, LS
	0x03A0DCFC RET
	0x03A0DD00 STR X30, [X31 - 0x10]!
	0x03A0DD04 CBZ X0, 0x3A0DD34
	0x03A0DD08 MOV X8, X0
	0x03A0DD0C LDR X0, [X0 + 0x50]
	0x03A0DD10 CBZ X0, 0x3A0DD34
	0x03A0DD14 LDR X9, [X8 + 0x48]
	0x03A0DD18 STR X9, [X0 + 0x48]
	0x03A0DD1C LDR X8, [X8 + 0x48]
	0x03A0DD20 CBZ X8, 0x3A0DD34
	0x03A0DD24 STR X0, [X8 + 0x50]
	0x03A0DD28 STR W31, [X0 + 0x10]
	0x03A0DD2C LDR X30, [X31], #0x10
	0x03A0DD30 RET
	0x03A0DD34 BL 0x1C16F20
	0x03A0DD38 SUB X31, X31, 0x190
	0x03A0DD3C STR D8, [X31 + 0x120]
	0x03A0DD40 STP X29, X30, [X31 + 0x130]
	0x03A0DD44 STP X28, X27, [X31 + 0x140]
	0x03A0DD48 STP X26, X25, [X31 + 0x150]
	0x03A0DD4C STP X24, X23, [X31 + 0x160]
	0x03A0DD50 STP X22, X21, [X31 + 0x170]
	0x03A0DD54 STP X20, X19, [X31 + 0x180]
	0x03A0DD58 ADRP X19, 0x9D4000
	0x03A0DD5C LDRB W8, [X19 + 0xF9B]
	0x03A0DD60 MOV V8.16B, V0.16B
	0x03A0DD64 MOV X20, X0
	0x03A0DD68 TBNZ X8, 0x0, 0x3A0DDD4
	0x03A0DD6C ADRP X0, 0x747000
	0x03A0DD70 LDR X0, [X0 + 0x310]
	0x03A0DD74 BL 0x1C16CF4
	0x03A0DD78 ADRP X0, 0x747000
	0x03A0DD7C LDR X0, [X0 + 0x170]
	0x03A0DD80 BL 0x1C16CF4
	0x03A0DD84 ADRP X0, 0x747000
	0x03A0DD88 LDR X0, [X0 + 0x318]
	0x03A0DD8C BL 0x1C16CF4
	0x03A0DD90 ADRP X0, 0x747000
	0x03A0DD94 LDR X0, [X0 + 0x200]
	0x03A0DD98 BL 0x1C16CF4
	0x03A0DD9C ADRP X0, 0x747000
	0x03A0DDA0 LDR X0, [X0 + 0x210]
	0x03A0DDA4 BL 0x1C16CF4
	0x03A0DDA8 ADRP X0, 0x747000
	0x03A0DDAC LDR X0, [X0 + 0x168]
	0x03A0DDB0 BL 0x1C16CF4
	0x03A0DDB4 ADRP X0, 0x747000
	0x03A0DDB8 LDR X0, [X0 + 0x408]
	0x03A0DDBC BL 0x1C16CF4
	0x03A0DDC0 ADRP X0, 0x747000
	0x03A0DDC4 LDR X0, [X0 + 0x388]
	0x03A0DDC8 BL 0x1C16CF4
	0x03A0DDCC MOVZ W8, 0x1
	0x03A0DDD0 STRB W8, [X19 + 0xF9B]
	0x03A0DDD4 CBZ X20, 0x3A0E058
	0x03A0DDD8 ADRP X23, 0x747000
	0x03A0DDDC LDR W19, [X20 + 0x18]
	0x03A0DDE0 LDR X23, [X23 + 0x168]
	0x03A0DDE4 CBZ W19, 0x3A0DF34
	0x03A0DDE8 ADRP X8, 0x747000
	0x03A0DDEC LDR X8, [X8 + 0x408]
	0x03A0DDF0 MOV W1, W19
	0x03A0DDF4 LDR X0, [X8]
	0x03A0DDF8 BL 0x1C16D6C
	0x03A0DDFC CMP W19, 0x1
	0x03A0DE00 MOV X21, X0
	0x03A0DE04 B.LT 0x3A0DF54
	0x03A0DE08 ADRP X26, 0x747000
	0x03A0DE0C LDR X26, [X26 + 0x388]
	0x03A0DE10 MOV X24, X31
	0x03A0DE14 ADD X25, X21, 0x20
	0x03A0DE18 LDR X0, [X26]
	0x03A0DE1C BL 0x1C16F10
	0x03A0DE20 MOV X1, X31
	0x03A0DE24 MOV X22, X0
	0x03A0DE28 BL 0x33BDD8C
	0x03A0DE2C CBZ X21, 0x3A0E058
	0x03A0DE30 CBZ X22, 0x3A0DE48
	0x03A0DE34 LDR X8, [X21]
	0x03A0DE38 MOV X0, X22
	0x03A0DE3C LDR X1, [X8 + 0x40]
	0x03A0DE40 BL 0x1C16E00
	0x03A0DE44 CBZ X0, 0x3A0E168
	0x03A0DE48 LDR W8, [X21 + 0x18]
	0x03A0DE4C CMP X24, X8
	0x03A0DE50 B.CS 0x3A0E164
	0x03A0DE54 STR X22, [X25, X24, LSL #3]
	0x03A0DE58 ADD X24, X24, 0x1
	0x03A0DE5C CMP X19, X24
	0x03A0DE60 B.NE 0x3A0DE18
	0x03A0DE64 CMP W19, 0x1
	0x03A0DE68 B.LT 0x3A0DF58
	0x03A0DE6C ADRP X26, 0x747000
	0x03A0DE70 LDR X8, [X21 + 0x18]
	0x03A0DE74 LDR X26, [X26 + 0x210]
	0x03A0DE78 SUB W24, W31, W19
	0x03A0DE7C MOVZ W25, 0x1
	0x03A0DE80 SUB W22, W25, 0x1
	0x03A0DE84 CMP W22, W8
	0x03A0DE88 B.CS 0x3A0E164
	0x03A0DE8C ADD X27, X21, W22, 0x3, SXTW
	0x03A0DE90 LDR X28, [X27 + 0x20]!
	0x03A0DE94 LDR X2, [X26]
	0x03A0DE98 ADD X8, X31, 0xC0
	0x03A0DE9C MOV X0, X20
	0x03A0DEA0 MOV W1, W22
	0x03A0DEA4 BL 0x2FE4360
	0x03A0DEA8 LDP V0, V1, [X31 + 0xC0]
	0x03A0DEAC LDR V2, [X31 + 0xE]
	0x03A0DEB0 STP V0, V1, [X31 + 0xF0]
	0x03A0DEB4 STR V2, [X31 + 0x11]
	0x03A0DEB8 CBZ X28, 0x3A0E058
	0x03A0DEBC LDP V1, V0, [X31 + 0x100]
	0x03A0DEC0 LDR V2, [X31 + 0xF]
	0x03A0DEC4 STUR V0, [X28 + 0x38]
	0x03A0DEC8 STUR V1, [X28 + 0x28]
	0x03A0DECC STUR V2, [X28 + 0x18]
	0x03A0DED0 LDR X8, [X21 + 0x18]
	0x03A0DED4 CMP W22, W8
	0x03A0DED8 B.CS 0x3A0E164
	0x03A0DEDC ADDS W31, W24, W25
	0x03A0DEE0 CSEL W9, W31, W25, EQ
	0x03A0DEE4 CMP W9, W8
	0x03A0DEE8 B.CS 0x3A0E164
	0x03A0DEEC LDR X10, [X27]
	0x03A0DEF0 CBZ X10, 0x3A0E058
	0x03A0DEF4 ADD X9, X21, W9, 0x3, SXTW
	0x03A0DEF8 LDR X9, [X9 + 0x20]
	0x03A0DEFC STR X9, [X10 + 0x48]
	0x03A0DF00 LDR X9, [X27]
	0x03A0DF04 CBZ X9, 0x3A0E058
	0x03A0DF08 LDR X10, [X9 + 0x48]
	0x03A0DF0C CBZ X10, 0x3A0E058
	0x03A0DF10 STR X9, [X10 + 0x50]
	0x03A0DF14 LDR X9, [X27]
	0x03A0DF18 CBZ X9, 0x3A0E058
	0x03A0DF1C ADD W25, W25, 0x1
	0x03A0DF20 ADD W10, W24, W25
	0x03A0DF24 CMP W10, 0x1
	0x03A0DF28 STR W31, [X9 + 0x10]
	0x03A0DF2C B.NE 0x3A0DE80
	0x03A0DF30 B 0x3A0DF58
	0x03A0DF34 LDR X0, [X23]
	0x03A0DF38 BL 0x1C16F10
	0x03A0DF3C ADRP X8, 0x747000
	0x03A0DF40 LDR X8, [X8 + 0x170]
	0x03A0DF44 MOV X19, X0
	0x03A0DF48 LDR X1, [X8]
	0x03A0DF4C BL 0x2FE3E58

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 704
	014 Move [X31+696], X31
	015 Move [X31+688], X31
	016 Compare X1, 0
	017 JumpIfEqual {420}
	018 Move X21, [X1+16]
	019 Move X19, X1
	020 Compare X21, 0
	021 JumpIfEqual {420}
	022 Move X8, [X21+40]
	023 Move X9, [X19+48]
	024 Move X20, [X19+24]
	025 Move X22, X3
	026 Move X23, X2
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X9, [X19+40]
	029 Move X10, [X21+32]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X10, X21
	032 Compare X20, 0
	033 JumpIfEqual {420}
	034 Move X10, [X20+32]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X10, X21
	037 Move X10, [X20+40]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X10, X21
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X10, X21
	042 Move X10, [X10+72]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Compare X10, 0
	045 JumpIfEqual {420}
	046 Move X11, [X10+32]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X11, [X10+40]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X22, X10
	051 Move X10, [X10+80]
	052 Compare X10, 0
	053 JumpIfEqual {420}
	054 Move X9, [X10+40]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Add X25, X22, 24
	059 Move X23, X21
	060 Move X21, [X21+72]
	061 Compare X21, 0
	062 JumpIfEqual {420}
	063 Move X9, [X21+40]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W0, W31
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Add X26, X23, 24
	071 Move X8, X20
	072 Compare X8, 0
	073 JumpIfEqual {420}
	074 Move X21, X8
	075 Move X8, [X8+80]
	076 Compare X8, 0
	077 JumpIfEqual {420}
	078 Move X9, [X8+40]
	079 Move X10, [X21+40]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Add X27, X21, 24
	084 Compare X20, 0
	085 JumpIfEqual {420}
	086 Move X24, X20
	087 Move X20, [X20+72]
	088 Compare X20, 0
	089 JumpIfEqual {420}
	090 Move X8, [X20+40]
	091 Move X9, [X24+40]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move W0, W31
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X1, [X22+32]
	099 Move X2, [X23+32]
	100 Move X3, [X21+32]
	101 Move X4, [X24+32]
	102 Add X5, X31, 696
	103 Add X6, X31, 688
	104 Call Clipper.GetOverlap, X0, X1, X2, X3, X4, X5, X6
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {380}
	109 Move X8, [X22+32]
	110 Move X11, [X31+696]
	111 Move X10, [X31+688]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move V1, [X25+16]
	115 Move V0, [X25+32]
	116 Move V2, [X25]
	117 Move [X31+656], V1
	118 Move [X31+664], V0
	119 Move [X31+40], V2
	120 Move X9, [X23+32]
	121 Move X25, [X21+72]
	122 Compare X25, 0
	123 JumpIfEqual {420}
	124 Move X9, [X21+32]
	125 Move X24, X0
	126 Add X26, X19, 32
	127 Move X10, [X25+40]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move X11, [X25+32]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X25, [X25+72]
	133 Compare X25, 0
	134 JumpIfNotEqual {127}
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Add X27, X21, 24
	137 Move V1, [X27+16]
	138 Move V0, [X27+32]
	139 Move V3, [X27]
	140 Add X0, X31, 544
	141 Add X1, X31, 496
	142 Move [X31+560], V1
	143 Move [X31+568], V0
	144 NotImplemented "Instruction LDUR not yet implemented."
	145 NotImplemented "Instruction LDUR not yet implemented."
	146 NotImplemented "Instruction LDUR not yet implemented."
	147 Add X2, X31, 448
	148 Move [X31+528], V0
	149 Move [X31+536], V3
	150 Move [X31+496], V2
	151 Move [X31+504], V1
	152 Move V1, [X26+16]
	153 Move V0, [X26+32]
	154 Move V2, [X26]
	155 Move [X31+464], V1
	156 Move [X31+472], V0
	157 Move [X31+28], V2
	158 Move W3, [X24+64]
	159 Call ClipperBase.SlopesEqual, X0, X1, X2, X3
	160 Move TEMP, X0
	161 And TEMP, TEMP, 1
	162 Compare TEMP, 1
	163 JumpIfNotEqual {168}
	164 Move W12, W31
	165 Move W27, 1
	166 Compare X20, 0
	167 JumpIfNotEqual {211}
	168 Move X25, X21
	169 Move X25, [X25+80]
	170 Compare X25, 0
	171 JumpIfEqual {420}
	172 Move X8, [X25+40]
	173 Move X9, [X21+40]
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Move X10, [X25+32]
	176 Move X11, [X21+32]
	177 NotImplemented "Instruction CMP not yet implemented."
	178 NotImplemented "Instruction CMP not yet implemented."
	179 NotImplemented "Instruction CMP not yet implemented."
	180 Move V1, [X27+16]
	181 Move V0, [X27+32]
	182 Move V3, [X27]
	183 Add X0, X31, 400
	184 Add X1, X31, 352
	185 Move [X31+416], V1
	186 Move [X31+424], V0
	187 NotImplemented "Instruction LDUR not yet implemented."
	188 NotImplemented "Instruction LDUR not yet implemented."
	189 NotImplemented "Instruction LDUR not yet implemented."
	190 Add X2, X31, 304
	191 Move [X31+384], V0
	192 Move [X31+392], V3
	193 Move [X31+352], V2
	194 Move [X31+360], V1
	195 Move V1, [X26+16]
	196 Move V0, [X26+32]
	197 Move V2, [X26]
	198 Move [X31+320], V1
	199 Move [X31+328], V0
	200 Move [X31+19], V2
	201 Move W3, [X24+64]
	202 Call ClipperBase.SlopesEqual, X0, X1, X2, X3
	203 Move W27, W31
	204 Move TEMP, X0
	205 And TEMP, TEMP, 1
	206 Compare TEMP, 1
	207 JumpIfNotEqual {321}
	208 Move W12, 1
	209 Compare X20, 0
	210 JumpIfEqual {420}
	211 Move X29, [X20+72]
	212 Compare X29, 0
	213 JumpIfEqual {420}
	214 Move X9, [X20+32]
	215 Move X8, [X20+40]
	216 Move X10, [X29+40]
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Move X11, [X29+32]
	219 NotImplemented "Instruction CMP not yet implemented."
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Move X29, [X29+72]
	222 Compare X29, 0
	223 JumpIfNotEqual {216}
	224 NotImplemented "Instruction CMP not yet implemented."
	225 Add X28, X20, 24
	226 Move [X31+12], W12
	227 Move V1, [X28+16]
	228 Move V0, [X28+32]
	229 Move V3, [X28]
	230 Add X0, X31, 256
	231 Add X1, X31, 208
	232 Move [X31+272], V1
	233 Move [X31+280], V0
	234 NotImplemented "Instruction LDUR not yet implemented."
	235 NotImplemented "Instruction LDUR not yet implemented."
	236 NotImplemented "Instruction LDUR not yet implemented."
	237 Add X2, X31, 160
	238 Move [X31+240], V0
	239 Move [X31+248], V3
	240 Move [X31+208], V2
	241 Move [X31+216], V1
	242 Move V1, [X26+16]
	243 Move V0, [X26+32]
	244 Move V2, [X26]
	245 Move [X31+176], V1
	246 Move [X31+184], V0
	247 Move [X31+10], V2
	248 Move W3, [X24+64]
	249 Call ClipperBase.SlopesEqual, X0, X1, X2, X3
	250 Move TEMP, X0
	251 And TEMP, TEMP, 1
	252 Compare TEMP, 1
	253 JumpIfNotEqual {255}
	254 Move W8, W31
	255 Move X29, X20
	256 Move X29, [X29+80]
	257 Compare X29, 0
	258 JumpIfEqual {420}
	259 Move X8, [X29+40]
	260 Move X9, [X20+40]
	261 NotImplemented "Instruction CMP not yet implemented."
	262 Move X10, [X29+32]
	263 Move X11, [X20+32]
	264 NotImplemented "Instruction CMP not yet implemented."
	265 NotImplemented "Instruction CMP not yet implemented."
	266 NotImplemented "Instruction CMP not yet implemented."
	267 Move V1, [X28+16]
	268 Move V0, [X28+32]
	269 Move V3, [X28]
	270 Add X0, X31, 112
	271 Add X1, X31, 64
	272 Move [X31+128], V1
	273 Move [X31+136], V0
	274 NotImplemented "Instruction LDUR not yet implemented."
	275 NotImplemented "Instruction LDUR not yet implemented."
	276 NotImplemented "Instruction LDUR not yet implemented."
	277 Add X2, X31, 16
	278 Move [X31+96], V0
	279 Move [X31+104], V3
	280 Move [X31+64], V2
	281 Move [X31+72], V1
	282 Move V1, [X26+16]
	283 Move V0, [X26+32]
	284 Move V2, [X26]
	285 Move [X31+32], V1
	286 Move [X31+40], V0
	287 Move [X31+1], V2
	288 Move W3, [X24+64]
	289 Call ClipperBase.SlopesEqual, X0, X1, X2, X3
	290 Move TEMP, X0
	291 And TEMP, TEMP, 1
	292 Compare TEMP, 1
	293 JumpIfNotEqual {380}
	294 Move W8, 1
	295 NotImplemented "Instruction CMP not yet implemented."
	296 Move W0, W31
	297 NotImplemented "Instruction CMP not yet implemented."
	298 NotImplemented "Instruction CMP not yet implemented."
	299 NotImplemented "Instruction CMP not yet implemented."
	300 Move W9, [X31+12]
	301 NotImplemented "Instruction CMP not yet implemented."
	302 Move TEMP, X27
	303 And TEMP, TEMP, 1
	304 Compare TEMP, 1
	305 JumpIfNotEqual {362}
	306 Move W2, 1
	307 Move X1, X21
	308 Call Clipper.DupOutPt, X0, X1, X2
	309 Move X1, X20
	310 Move W2, W31
	311 Move X22, X0
	312 Call Clipper.DupOutPt, X0, X1, X2
	313 Move [X21+72], X20
	314 Move [X20+80], X21
	315 Compare X22, 0
	316 JumpIfEqual {420}
	317 Move [X22+80], X0
	318 Compare X0, 0
	319 JumpIfEqual {420}
	320 Move [X0+72], X22
	321 Move W0, W27
	322 Move X9, [X21+32]
	323 NotImplemented "Instruction CMP not yet implemented."
	324 NotImplemented "Instruction CMP not yet implemented."
	325 Move V1, [X27+16]
	326 Move V0, [X27+32]
	327 Move V2, [X27]
	328 Move [X31+656], V1
	329 Move [X31+664], V0
	330 Move [X31+40], V2
	331 Move X8, [X24+32]
	332 NotImplemented "Instruction CMP not yet implemented."
	333 Move X12, [X23+32]
	334 NotImplemented "Instruction CMP not yet implemented."
	335 NotImplemented "Instruction CMP not yet implemented."
	336 Move V1, [X26+16]
	337 Move V0, [X26+32]
	338 Move V2, [X26]
	339 NotImplemented "Instruction CMP not yet implemented."
	340 Move [X31+656], V1
	341 Move [X31+664], V0
	342 Move [X31+40], V2
	343 Move X10, X21
	344 Move X10, [X10+40]
	345 Move X11, X20
	346 Move X11, [X11+72]
	347 NotImplemented "Instruction CMP not yet implemented."
	348 Compare X11, 0
	349 JumpIfEqual {420}
	350 Move X12, [X11+32]
	351 NotImplemented "Instruction CMP not yet implemented."
	352 Move X12, [X11+40]
	353 NotImplemented "Instruction CMP not yet implemented."
	354 Move X11, X20
	355 Move X9, [X11+40]
	356 NotImplemented "Instruction CMP not yet implemented."
	357 NotImplemented "Instruction CSET not yet implemented."
	358 NotImplemented "Instruction CMP not yet implemented."
	359 NotImplemented "Instruction CSET not yet implemented."
	360 NotImplemented "Instruction CMP not yet implemented."
	361 NotImplemented "Instruction CMP not yet implemented."
	362 Move X1, X21
	363 Move W2, W31
	364 Call Clipper.DupOutPt, X0, X1, X2
	365 Move W2, 1
	366 Move X1, X20
	367 Move X22, X0
	368 Call Clipper.DupOutPt, X0, X1, X2
	369 Move [X21+80], X20
	370 Move [X20+72], X21
	371 Compare X22, 0
	372 JumpIfEqual {420}
	373 Move [X22+72], X0
	374 Compare X0, 0
	375 JumpIfEqual {420}
	376 Move [X0+80], X22
	377 Move W0, 1
	378 Move [X19+16], X21
	379 Move [X19+24], X22
	380 Move W0, W31
	381 And W0, W0, 1
	382 Add X31, X31, 704
	383 Move X20, [X31+80]
	384 Move X19, [X31+88]
	385 Move X22, [X31+64]
	386 Move X21, [X31+72]
	387 Move X24, [X31+48]
	388 Move X23, [X31+56]
	389 Move X26, [X31+32]
	390 Move X25, [X31+40]
	391 Move X28, [X31+16]
	392 Move X27, [X31+24]
	393 Move X29, [X31+96]
	394 Move X30, [X31+104]
	395 Return X0
	396 Add X8, X24, 24
	397 Move V1, [X8+16]
	398 Move V0, [X8+32]
	399 Move V2, [X8]
	400 Move [X31+656], V1
	401 Move [X31+664], V0
	402 Move [X31+40], V2
	403 Move X8, [X24+32]
	404 NotImplemented "Instruction CMP not yet implemented."
	405 Move [X19+16], X22
	406 Move [X19+24], X21
	407 Move V0, [X31+640]
	408 Move V1, [X31+656]
	409 Move V2, [X31+42]
	410 NotImplemented "Instruction CSET not yet implemented."
	411 Add X5, X31, 592
	412 Move X1, X22
	413 Move X2, X23
	414 Move X3, X21
	415 Move X4, X24
	416 Move [X31+592], V0
	417 Move [X31+600], V1
	418 Move [X31+39], V2
	419 Call Clipper.JoinHorz, X0, X1, X2, X3, X4, X5, X6
	420 Call 0x1C17F20

Method: System.Int32 PointInPolygon(UnityEngine.Rendering.Universal.IntPoint pt, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> path)

Disassembly:
	0x03A0DF50 B 0x3A0E13C
	0x03A0DF54 CBZ X21, 0x3A0E058
	0x03A0DF58 LDR W8, [X21 + 0x18]
	0x03A0DF5C CBZ W8, 0x3A0E164
	0x03A0DF60 LDR X20, [X21 + 0x20]
	0x03A0DF64 CBZ X20, 0x3A0E058
	0x03A0DF68 ADRP X22, 0x747000
	0x03A0DF6C LDR X22, [X22 + 0x318]
	0x03A0DF70 FMUL D8, D8, D8
	0x03A0DF74 MOVZ W21, 0x1
	0x03A0DF78 LDR W8, [X20 + 0x10]
	0x03A0DF7C CBNZ W8, 0x3A0E05C
	0x03A0DF80 LDP X0, X8, [X20 + 0x48]
	0x03A0DF84 CMP X0, X8
	0x03A0DF88 B.EQ 0x3A0E05C
	0x03A0DF8C CBZ X8, 0x3A0E058
	0x03A0DF90 LDR V0, [X8 + 0x2]
	0x03A0DF94 LDR V1, [X20 + 0x2]
	0x03A0DF98 UNIMPLEMENTED
	0x03A0DF9C UNIMPLEMENTED
	0x03A0DFA0 FSUB V1.2D, V1.2D, V0.2D
	0x00000000 INVALID
	0x03A0DFA8 FADDP D1, V1.2D
	0x03A0DFAC FCMP D1, D8
	0x03A0DFB0 B.LS 0x3A0E034
	0x03A0DFB4 CBZ X0, 0x3A0E058
	0x03A0DFB8 LDR V1, [X0 + 0x2]
	0x03A0DFBC UNIMPLEMENTED
	0x03A0DFC0 FSUB V0.2D, V0.2D, V1.2D
	0x00000000 INVALID
	0x03A0DFC8 FADDP D0, V0.2D
	0x03A0DFCC FCMP D0, D8
	0x03A0DFD0 B.LS 0x3A0E03C
	0x03A0DFD4 LDUR V0, [X8 + 0x38]
	0x03A0DFD8 LDUR V1, [X8 + 0x28]
	0x03A0DFDC LDUR V3, [X8 + 0x18]
	0x03A0DFE0 ADD X8, X20, 0x18
	0x03A0DFE4 ADD X1, X31, 0x60
	0x03A0DFE8 STP V1, V0, [X31 + 0xA0]
	0x03A0DFEC LDP V1, V0, [X8 + 0x10]
	0x03A0DFF0 LDR V2, [X8]
	0x03A0DFF4 ADD X2, X31, 0x30
	0x03A0DFF8 STP V0, V3, [X31 + 0x80]
	0x03A0DFFC STP V2, V1, [X31 + 0x60]
	0x03A0E000 LDUR V0, [X0 + 0x38]
	0x03A0E004 LDUR V1, [X0 + 0x28]
	0x03A0E008 LDUR V2, [X0 + 0x18]
	0x03A0E00C ADD X0, X31, 0x90
	0x03A0E010 STP V1, V0, [X31 + 0x40]
	0x03A0E014 MOV V0.16B, V8.16B
	0x03A0E018 STR V2, [X31 + 0x3]
	0x03A0E01C BL 0x3A0DA10
	0x03A0E020 TBNZ X0, 0x0, 0x3A0E034
	0x03A0E024 STR W21, [X20 + 0x10]
	0x03A0E028 LDR X20, [X20 + 0x48]
	0x03A0E02C CBNZ X20, 0x3A0DF78
	0x03A0E030 B 0x3A0E058
	0x03A0E034 MOVN W24, 0x0
	0x03A0E038 B 0x3A0E044
	0x03A0E03C BL 0x3A0DD00
	0x03A0E040 MOVN W24, 0x1
	0x03A0E044 MOV X0, X20
	0x03A0E048 BL 0x3A0DD00
	0x03A0E04C MOV X20, X0
	0x03A0E050 ADD W19, W19, W24
	0x03A0E054 CBNZ X0, 0x3A0DF78
	0x03A0E058 BL 0x1C16F20
	0x03A0E05C LDR X0, [X23]
	0x03A0E060 CMP W19, 0x2
	0x03A0E064 CSEL W21, W19, W31, GT
	0x03A0E068 BL 0x1C16F10
	0x03A0E06C LDR X2, [X22]
	0x03A0E070 MOV W1, W21
	0x03A0E074 MOV X19, X0
	0x03A0E078 BL 0x2FE3EC4
	0x03A0E07C CMP W21, 0x1
	0x03A0E080 B.LT 0x3A0E13C
	0x03A0E084 ADRP X22, 0x746000
	0x03A0E088 LDR X22, [X22 + 0x310]
	0x03A0E08C MOVZ W23, 0x30
	0x03A0E090 CBZ X20, 0x3A0E058
	0x03A0E094 LDUR V0, [X20 + 0x38]
	0x03A0E098 LDUR V1, [X20 + 0x28]
	0x03A0E09C LDUR V2, [X20 + 0x18]
	0x03A0E0A0 STP V1, V0, [X31 + 0x10]
	0x03A0E0A4 STR V2, [X31]
	0x03A0E0A8 CBZ X19, 0x3A0E058
	0x03A0E0AC LDP V0, V1, [X31]
	0x03A0E0B0 LDR V2, [X31 + 0x2]
	0x03A0E0B4 LDR X10, [X22]
	0x03A0E0B8 STP V0, V1, [X31 + 0xC0]
	0x03A0E0BC STR V2, [X31 + 0xE]
	0x03A0E0C0 LDR W9, [X19 + 0x1C]
	0x03A0E0C4 LDR X8, [X19 + 0x10]
	0x03A0E0C8 ADD W9, W9, 0x1
	0x03A0E0CC STR W9, [X19 + 0x1C]
	0x03A0E0D0 CBZ X8, 0x3A0E058
	0x03A0E0D4 LDRSW X9, [X19 + 0x18]
	0x03A0E0D8 LDR W11, [X8 + 0x18]
	0x03A0E0DC CMP W9, W11
	0x03A0E0E0 B.CS 0x3A0E108
	0x03A0E0E4 ADD W10, W9, 0x1
	0x03A0E0E8 STR W10, [X19 + 0x18]
	0x03A0E0EC LDP V1, V0, [X31 + 0xD0]
	0x03A0E0F0 LDR V2, [X31 + 0xC]
	0x03A0E0F4 NOP
	0x03A0E0F8 MADD X8, X9, X23, X8
	0x03A0E0FC STP V1, V0, [X8 + 0x30]
	0x03A0E100 STR V2, [X8 + 0x2]
	0x03A0E104 B 0x3A0E130
	0x03A0E108 LDR X8, [X10 + 0x20]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], X30
	003 Move [X31+56], X27
	004 Move [X31+64], X26
	005 Move [X31+72], X25
	006 Move [X31+80], X24
	007 Move [X31+88], X23
	008 Move [X31+96], X22
	009 Move [X31+104], X21
	010 Move [X31+112], X20
	011 Move [X31+120], X19
	012 Move X21, 0x9D5000
	013 Move W8, [X21+3985]
	014 Move X19, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x748000
	021 Move X0, [X0+512]
	022 Call 0x1C17CF4
	023 Move X0, 0x748000
	024 Move X0, [X0+528]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3985], W8
	028 Compare X19, 0
	029 JumpIfEqual {116}
	030 Move W23, [X19+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X24, 0x748000
	033 Move X24, [X24+528]
	034 Add X8, X31, 0
	035 Move X0, X19
	036 Move W1, W31
	037 Move X2, [X24]
	038 Call List`1<IntPoint>.get_Item, X0, X1
	039 Move X8, [X31+8]
	040 Move X9, [X31+16]
	041 Move W21, W31
	042 Move W25, 1
	043 Move W22, 1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X26, X9
	046 Move X27, X8
	047 Move X2, [X24]
	048 Add X8, X31, 0
	049 Move X0, X19
	050 Move W1, W31
	051 Move X2, [X24]
	052 Add X8, X31, 0
	053 Move X0, X19
	054 Move W1, W22
	055 Call List`1<IntPoint>.get_Item, X0, X1
	056 Move X8, [X31+8]
	057 Move X9, [X31+16]
	058 Move X11, [X20+16]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X10, [X20+8]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CSET not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 NotImplemented "Instruction CSET not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Subtract X10, X26, X11
	069 NotImplemented "Instruction CSET not yet implemented."
	070 Subtract X11, X9, X11
	071 NotImplemented "Instruction CSET not yet implemented."
	072 Xor W12, W12, W13
	073 Move TEMP, X12
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfEqual {97}
	077 Move X13, [X20+8]
	078 Subtract X12, X27, X13
	079 Subtract X13, X8, X13
	080 Subtract X13, X8, X13
	081 Subtract W21, W25, W21
	082 NotImplemented "Instruction SCVTF not yet implemented."
	083 NotImplemented "Instruction SCVTF not yet implemented."
	084 NotImplemented "Instruction SCVTF not yet implemented."
	085 NotImplemented "Instruction SCVTF not yet implemented."
	086 Multiply D0, D1, D0
	087 Multiply D1, D3, D2
	088 Subtract D0, D0, D1
	089 NotImplemented "Instruction FCMP not yet implemented."
	090 NotImplemented "Instruction CSET not yet implemented."
	091 NotImplemented "Instruction CMP not yet implemented."
	092 NotImplemented "Instruction CSET not yet implemented."
	093 Xor W10, W11, W10
	094 Subtract W11, W25, W21
	095 NotImplemented "Instruction CMP not yet implemented."
	096 NotImplemented "Instruction CSEL not yet implemented."
	097 Add W22, W22, 1
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move W21, W31
	100 Move TEMP, 0
	101 Not TEMP
	102 Move W21, TEMP
	103 Move W0, W21
	104 Move X20, [X31+112]
	105 Move X19, [X31+120]
	106 Move X22, [X31+96]
	107 Move X21, [X31+104]
	108 Move X24, [X31+80]
	109 Move X23, [X31+88]
	110 Move X26, [X31+64]
	111 Move X25, [X31+72]
	112 Move X30, [X31+48]
	113 Move X27, [X31+56]
	114 Add X31, X31, 128
	115 Return X0
	116 Call 0x1C17F20

Method: System.Int32 PointInPolygon(UnityEngine.Rendering.Universal.IntPoint pt, UnityEngine.Rendering.Universal.OutPt op)

Disassembly:
	0x03A0E10C LDP V0, V1, [X31 + 0xC0]
	0x03A0E110 LDR V2, [X31 + 0xE]
	0x03A0E114 ADD X1, X31, 0xF0
	0x03A0E118 LDR X8, [X8 + 0xC0]
	0x03A0E11C MOV X0, X19
	0x03A0E120 LDR X2, [X8 + 0x70]
	0x03A0E124 STP V0, V1, [X31 + 0xF0]
	0x03A0E128 STR V2, [X31 + 0x11]
	0x03A0E12C BL 0x2FE46FC
	0x03A0E130 LDR X20, [X20 + 0x48]
	0x03A0E134 SUBS W21, W21, 0x1
	0x03A0E138 B.NE 0x3A0E090
	0x03A0E13C MOV X0, X19
	0x03A0E140 LDP X20, X19, [X31 + 0x180]
	0x03A0E144 LDP X22, X21, [X31 + 0x170]
	0x03A0E148 LDP X24, X23, [X31 + 0x160]
	0x03A0E14C LDP X26, X25, [X31 + 0x150]
	0x03A0E150 LDP X28, X27, [X31 + 0x140]
	0x03A0E154 LDP X29, X30, [X31 + 0x130]
	0x03A0E158 LDR V8, [X31 + 0x120]
	0x03A0E15C ADD X31, X31, 0x190
	0x03A0E160 RET
	0x03A0E164 BL 0x1C16F28
	0x03A0E168 BL 0x1C16F44
	0x03A0E16C MOV X1, X31
	0x03A0E170 BL 0x1C16DEC
	0x03A0E174 STR D8, [X31 - 0x40]!
	0x03A0E178 STP X30, X23, [X31 + 0x10]
	0x03A0E17C STP X22, X21, [X31 + 0x20]
	0x03A0E180 STP X20, X19, [X31 + 0x30]
	0x03A0E184 ADRP X20, 0x9D3000
	0x03A0E188 LDRB W8, [X20 + 0xF9C]
	0x03A0E18C MOV V8.16B, V0.16B
	0x03A0E190 MOV X19, X0
	0x03A0E194 TBNZ X8, 0x0, 0x3A0E1DC
	0x03A0E198 ADRP X0, 0x746000
	0x03A0E19C LDR X0, [X0 + 0x308]
	0x03A0E1A0 BL 0x1C16CF4
	0x03A0E1A4 ADRP X0, 0x746000
	0x03A0E1A8 LDR X0, [X0 + 0x410]
	0x03A0E1AC BL 0x1C16CF4
	0x03A0E1B0 ADRP X0, 0x746000
	0x03A0E1B4 LDR X0, [X0 + 0x238]
	0x03A0E1B8 BL 0x1C16CF4
	0x03A0E1BC ADRP X0, 0x746000
	0x03A0E1C0 LDR X0, [X0 + 0x240]
	0x03A0E1C4 BL 0x1C16CF4
	0x03A0E1C8 ADRP X0, 0x746000
	0x03A0E1CC LDR X0, [X0 + 0x3F0]
	0x03A0E1D0 BL 0x1C16CF4
	0x03A0E1D4 MOVZ W8, 0x1
	0x03A0E1D8 STRB W8, [X20 + 0xF9C]
	0x03A0E1DC CBZ X19, 0x3A0E2C4
	0x03A0E1E0 ADRP X8, 0x746000
	0x03A0E1E4 LDR X8, [X8 + 0x3F0]
	0x03A0E1E8 ADRP X20, 0x746000
	0x03A0E1EC LDR W21, [X19 + 0x18]
	0x03A0E1F0 LDR X0, [X8]
	0x03A0E1F4 LDR X20, [X20 + 0x410]
	0x03A0E1F8 BL 0x1C16F10
	0x03A0E1FC LDR X2, [X20]
	0x03A0E200 MOV W1, W21
	0x03A0E204 MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {61}
	004 Move X8, X0
	005 Move X9, [X8+8]
	006 Move X8, [X8+16]
	007 Move X15, [X1+32]
	008 Move X14, [X1+40]
	009 Move W0, W31
	010 Move W10, 1
	011 Move X11, X1
	012 Move X11, [X11+72]
	013 Compare X11, 0
	014 JumpIfEqual {61}
	015 Move X12, [X11+32]
	016 Move X13, [X11+40]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 NotImplemented "Instruction CMP not yet implemented."
	021 NotImplemented "Instruction CSET not yet implemented."
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CSET not yet implemented."
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Subtract X16, X14, X8
	026 NotImplemented "Instruction CSET not yet implemented."
	027 Subtract X17, X13, X8
	028 NotImplemented "Instruction CSET not yet implemented."
	029 Xor W2, W2, W3
	030 Move TEMP, X2
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {53}
	034 Subtract X15, X15, X9
	035 Subtract X2, X12, X9
	036 Subtract X2, X12, X9
	037 Subtract W0, W10, W0
	038 NotImplemented "Instruction SCVTF not yet implemented."
	039 NotImplemented "Instruction SCVTF not yet implemented."
	040 NotImplemented "Instruction SCVTF not yet implemented."
	041 NotImplemented "Instruction SCVTF not yet implemented."
	042 Multiply D0, D0, D1
	043 Multiply D1, D3, D2
	044 Subtract D0, D0, D1
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CSET not yet implemented."
	049 Xor W14, W14, W15
	050 Subtract W15, W10, W0
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction CSEL not yet implemented."
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X14, X13
	055 Move X15, X12
	056 Move TEMP, 0
	057 Not TEMP
	058 Move W0, TEMP
	059 Move X30, [X31+16]
	060 Return X0
	061 Call 0x1C17F20

Method: System.Boolean Poly2ContainsPoly1(UnityEngine.Rendering.Universal.OutPt outPt1, UnityEngine.Rendering.Universal.OutPt outPt2)

Disassembly:
	0x03A0E208 BL 0x301B830
	0x03A0E20C LDR W8, [X19 + 0x18]
	0x03A0E210 CMP W8, 0x1
	0x03A0E214 B.LT 0x3A0E2AC
	0x03A0E218 ADRP X22, 0x746000
	0x03A0E21C ADRP X23, 0x746000
	0x03A0E220 LDR X22, [X22 + 0x240]
	0x03A0E224 LDR X23, [X23 + 0x308]
	0x03A0E228 MOV W21, W31
	0x03A0E22C LDR X2, [X22]
	0x03A0E230 MOV X0, X19
	0x03A0E234 MOV W1, W21
	0x03A0E238 BL 0x301BCCC
	0x03A0E23C MOV V0.16B, V8.16B
	0x03A0E240 BL 0x3A0DD38
	0x03A0E244 CBZ X20, 0x3A0E2C4
	0x03A0E248 LDR W10, [X20 + 0x1C]
	0x03A0E24C LDR X8, [X20 + 0x10]
	0x03A0E250 LDR X9, [X23]
	0x03A0E254 ADD W10, W10, 0x1
	0x03A0E258 STR W10, [X20 + 0x1C]
	0x03A0E25C CBZ X8, 0x3A0E2C4
	0x03A0E260 LDRSW X10, [X20 + 0x18]
	0x03A0E264 LDR W11, [X8 + 0x18]
	0x03A0E268 MOV X1, X0
	0x03A0E26C CMP W10, W11
	0x03A0E270 B.CS 0x3A0E288
	0x03A0E274 ADD W9, W10, 0x1

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+56], X21
	004 Move [X31+64], X20
	005 Move [X31+72], X19
	006 Move X19, X1
	007 Move X20, X0
	008 Move X21, X0
	009 Compare X21, 0
	010 JumpIfEqual {35}
	011 NotImplemented "Instruction LDUR not yet implemented."
	012 NotImplemented "Instruction LDUR not yet implemented."
	013 NotImplemented "Instruction LDUR not yet implemented."
	014 Add X0, X31, 0
	015 Move X1, X19
	016 Move [X31+16], V1
	017 Move [X31+24], V0
	018 Move [X31], V2
	019 Call Clipper.PointInPolygon, X0, X1
	020 Move TEMP, X0
	021 And TEMP, TEMP, -2147483648
	022 Compare TEMP, -2147483648
	023 JumpIfNotEqual {27}
	024 Move X21, [X21+72]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, 1
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CSET not yet implemented."
	029 Move X20, [X31+64]
	030 Move X19, [X31+72]
	031 Move X30, [X31+48]
	032 Move X21, [X31+56]
	033 Add X31, X31, 80
	034 Return X0
	035 Call 0x1C17F20

Method: System.Void FixupFirstLefts1(UnityEngine.Rendering.Universal.OutRec OldOutRec, UnityEngine.Rendering.Universal.OutRec NewOutRec)

Disassembly:
	0x03A0E278 ADD X8, X8, X10, 0x3, LSL
	0x03A0E27C STR W9, [X20 + 0x18]
	0x03A0E280 STR X1, [X8 + 0x20]
	0x03A0E284 B 0x3A0E29C
	0x03A0E288 LDR X8, [X9 + 0x20]
	0x03A0E28C MOV X0, X20
	0x03A0E290 LDR X8, [X8 + 0xC0]
	0x03A0E294 LDR X2, [X8 + 0x70]
	0x03A0E298 BL 0x301BF90
	0x03A0E29C LDR W8, [X19 + 0x18]
	0x03A0E2A0 ADD W21, W21, 0x1
	0x03A0E2A4 CMP W21, W8
	0x03A0E2A8 B.LT 0x3A0E22C
	0x03A0E2AC MOV X0, X20
	0x03A0E2B0 LDP X20, X19, [X31 + 0x30]
	0x03A0E2B4 LDP X22, X21, [X31 + 0x20]
	0x03A0E2B8 LDP X30, X23, [X31 + 0x10]
	0x03A0E2BC LDR V8, [X31], #0x40
	0x03A0E2C0 RET
	0x03A0E2C4 BL 0x1C16F20
	0x03A0E2C8 STP X29, X30, [X31 - 0x60]!
	0x03A0E2CC STP X28, X27, [X31 + 0x10]
	0x03A0E2D0 STP X26, X25, [X31 + 0x20]
	0x03A0E2D4 STP X24, X23, [X31 + 0x30]
	0x03A0E2D8 STP X22, X21, [X31 + 0x40]
	0x03A0E2DC STP X20, X19, [X31 + 0x50]
	0x03A0E2E0 SUB X31, X31, 0x1D0
	0x03A0E2E4 ADRP X19, 0x9D3000
	0x03A0E2E8 LDRB W8, [X19 + 0xF9D]
	0x03A0E2EC MOV W20, W3
	0x03A0E2F0 MOV W25, W2
	0x03A0E2F4 MOV X23, X1
	0x03A0E2F8 STR X0, [X31 + 0x10]
	0x03A0E2FC TBNZ X8, 0x0, 0x3A0E3B0
	0x03A0E300 ADRP X0, 0x746000
	0x03A0E304 LDR X0, [X0 + 0x418]
	0x03A0E308 BL 0x1C16CF4
	0x03A0E30C ADRP X0, 0x746000
	0x03A0E310 LDR X0, [X0 + 0x420]
	0x03A0E314 BL 0x1C16CF4
	0x03A0E318 ADRP X0, 0x746000
	0x03A0E31C LDR X0, [X0 + 0x428]
	0x03A0E320 BL 0x1C16CF4
	0x03A0E324 ADRP X0, 0x746000
	0x03A0E328 LDR X0, [X0 + 0x308]
	0x03A0E32C BL 0x1C16CF4
	0x03A0E330 ADRP X0, 0x746000
	0x03A0E334 LDR X0, [X0 + 0x310]
	0x03A0E338 BL 0x1C16CF4
	0x03A0E33C ADRP X0, 0x746000
	0x03A0E340 LDR X0, [X0 + 0x430]
	0x03A0E344 BL 0x1C16CF4
	0x03A0E348 ADRP X0, 0x746000
	0x03A0E34C LDR X0, [X0 + 0x3E8]
	0x03A0E350 BL 0x1C16CF4
	0x03A0E354 ADRP X0, 0x746000
	0x03A0E358 LDR X0, [X0 + 0x410]
	0x03A0E35C BL 0x1C16CF4
	0x03A0E360 ADRP X0, 0x746000
	0x03A0E364 LDR X0, [X0 + 0x318]
	0x03A0E368 BL 0x1C16CF4
	0x03A0E36C ADRP X0, 0x746000
	0x03A0E370 LDR X0, [X0 + 0x200]
	0x03A0E374 BL 0x1C16CF4
	0x03A0E378 ADRP X0, 0x746000
	0x03A0E37C LDR X0, [X0 + 0x240]
	0x03A0E380 BL 0x1C16CF4
	0x03A0E384 ADRP X0, 0x746000
	0x03A0E388 LDR X0, [X0 + 0x210]
	0x03A0E38C BL 0x1C16CF4
	0x03A0E390 ADRP X0, 0x746000
	0x03A0E394 LDR X0, [X0 + 0x168]
	0x03A0E398 BL 0x1C16CF4
	0x03A0E39C ADRP X0, 0x746000
	0x03A0E3A0 LDR X0, [X0 + 0x3F0]
	0x03A0E3A4 BL 0x1C16CF4
	0x03A0E3A8 MOVZ W8, 0x1
	0x03A0E3AC STRB W8, [X19 + 0xF9D]
	0x03A0E3B0 LDR X8, [X31 + 0x10]
	0x03A0E3B4 MOVI V0.2D, 0x0
	0x03A0E3B8 STP V0, V0, [X31 + 0x140]
	0x03A0E3BC STP V0, V0, [X31 + 0x120]
	0x03A0E3C0 CBZ X8, 0x3A0ED00
	0x03A0E3C4 CBZ X23, 0x3A0ED00
	0x03A0E3C8 STR W20, [X31 + 0xC]
	0x03A0E3CC ADRP X9, 0x746000
	0x03A0E3D0 ADRP X20, 0x746000
	0x03A0E3D4 LDR X9, [X9 + 0x3F0]
	0x03A0E3D8 LDR X20, [X20 + 0x410]
	0x03A0E3DC LDR X8, [X31 + 0x10]
	0x03A0E3E0 LDR W19, [X23 + 0x18]
	0x03A0E3E4 LDR X0, [X9]
	0x03A0E3E8 LDR W8, [X8 + 0x18]
	0x03A0E3EC STR W8, [X31 + 0x18]
	0x03A0E3F0 BL 0x1C16F10
	0x03A0E3F4 LDR X2, [X20]
	0x03A0E3F8 MOV W1, W19
	0x03A0E3FC MOV X21, X0
	0x03A0E400 BL 0x301B830
	0x03A0E404 CMP W19, 0x1
	0x03A0E408 STR W19, [X31 + 0x1C]
	0x03A0E40C TBZ X25, 0x0, 0x3A0E638

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+72], X23
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move X22, 0x9D4000
	009 Move W8, [X22+3986]
	010 Move X19, X2
	011 Move X20, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0x747000
	018 Move X0, [X0+736]
	019 Call 0x1C17CF4
	020 Move X0, 0x747000
	021 Move X0, [X0+744]
	022 Call 0x1C17CF4
	023 Move X0, 0x747000
	024 Move X0, [X0+752]
	025 Call 0x1C17CF4
	026 Move X0, 0x747000
	027 Move X0, [X0+768]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+3986], W8
	031 Move [X31+32], X31
	032 Move [X31+40], X31
	033 Move [X31+48], X31
	034 Move X0, [X21+48]
	035 Compare X0, 0
	036 JumpIfEqual {95}
	037 Move X8, 0x747000
	038 Move X8, [X8+768]
	039 Move X22, 0x747000
	040 Move X21, 0x747000
	041 Move X1, [X8]
	042 Move X22, [X22+744]
	043 Move X21, [X21+736]
	044 Add X8, X31, 8
	045 Call List`1<Object>.GetEnumerator, X0
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 Move X8, [X31+24]
	048 Move [X31+2], V0
	049 Move [X31+48], X8
	050 Move X1, [X22]
	051 Add X0, X31, 32
	052 Call Enumerator<Object>.MoveNext, X0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {82}
	057 Move X23, [X31+48]
	058 Compare X23, 0
	059 JumpIfEqual {93}
	060 Move X8, [X23+24]
	061 Compare X8, 0
	062 JumpIfEqual {69}
	063 Move X9, [X8+32]
	064 Compare X9, 0
	065 JumpIfNotEqual {69}
	066 Move X8, [X8+24]
	067 Compare X8, 0
	068 JumpIfNotEqual {63}
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X0, [X23+32]
	071 Compare X0, 0
	072 JumpIfEqual {50}
	073 Compare X19, 0
	074 JumpIfEqual {94}
	075 Move X1, [X19+32]
	076 Call Clipper.Poly2ContainsPoly1, X0, X1
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {50}
	081 Move [X23+24], X19
	082 Move X1, [X21]
	083 Add X0, X31, 32
	084 Call Enumerator<Object>.Dispose, X0
	085 Move X20, [X31+96]
	086 Move X19, [X31+104]
	087 Move X22, [X31+80]
	088 Move X21, [X31+88]
	089 Move X30, [X31+64]
	090 Move X23, [X31+72]
	091 Add X31, X31, 112
	092 Return 
	093 Call 0x1C17F20
	094 Call 0x1C17F20
	095 Call 0x1C17F20
	096 Move X19, X0
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X0, X19
	099 Call 0x3EB2AD0
	100 Move X20, [X0]
	101 Call 0x3EB2AE0
	102 Move X1, [X21]
	103 Add X0, X31, 32
	104 Call Enumerator<Object>.Dispose, X0
	105 Compare X20, 0
	106 JumpIfEqual {85}
	107 Move X0, X20
	108 Call 0x1C17F18
	109 Move X20, X31
	110 Move X19, X0
	111 Move X1, [X21]
	112 Add X0, X31, 32
	113 Call Enumerator<Object>.Dispose, X0
	114 Compare X20, 0
	115 JumpIfNotEqual {118}
	116 Move X0, X19
	117 Call 0x1D2D690
	118 Move X0, X20
	119 Call 0x1C17F18
	120 Call 0x1991590

Method: System.Void FixupFirstLefts2(UnityEngine.Rendering.Universal.OutRec innerOutRec, UnityEngine.Rendering.Universal.OutRec outerOutRec)

Disassembly:
	0x03A0E428 MOV W25, W31
	0x03A0E42C MOVN X22, 0x0
	0x03A0E430 ADD X29, X8, 0x20
	0x03A0E434 ADRP X8, 0x746000
	0x03A0E438 LDR X8, [X8 + 0x168]
	0x03A0E43C LDR X0, [X8]
	0x03A0E440 BL 0x1C16F10
	0x03A0E444 ADRP X8, 0x746000
	0x03A0E448 LDR X8, [X8 + 0x318]
	0x03A0E44C LDR W1, [X31 + 0x18]
	0x03A0E450 MOV X26, X0
	0x03A0E454 LDR X2, [X8]
	0x03A0E458 BL 0x2FE3EC4
	0x03A0E45C ADRP X8, 0x746000
	0x03A0E460 LDR X8, [X8 + 0x430]
	0x03A0E464 LDR X0, [X31 + 0x10]
	0x03A0E468 LDR X1, [X8]
	0x03A0E46C ADD X8, X31, 0xE0
	0x03A0E470 BL 0x2FE558C
	0x03A0E474 LDP V0, V1, [X31 + 0xE0]
	0x03A0E478 LDP V2, V3, [X31 + 0x100]
	0x03A0E47C STP V0, V1, [X31 + 0x120]
	0x03A0E480 STP V2, V3, [X31 + 0x140]
	0x03A0E484 LDR X1, [X27]
	0x03A0E488 ADD X0, X31, 0x120
	0x03A0E48C BL 0x2BBF168
	0x03A0E490 TBZ X0, 0x0, 0x3A0E560
	0x03A0E494 LDP X20, X19, [X31 + 0x138]
	0x03A0E498 LDR X2, [X28]
	0x03A0E49C ADD X8, X31, 0xE0
	0x03A0E4A0 MOV X0, X23
	0x03A0E4A4 MOV W1, W25
	0x03A0E4A8 BL 0x2FE4360
	0x03A0E4AC LDR X24, [X31 + 0xE8]
	0x03A0E4B0 LDR X2, [X28]
	0x03A0E4B4 ADD X8, X31, 0xE0
	0x03A0E4B8 MOV X0, X23
	0x03A0E4BC MOV W1, W25
	0x03A0E4C0 BL 0x2FE4360
	0x03A0E4C4 LDR X8, [X31 + 0xF0]
	0x03A0E4C8 STP X31, X31, [X31 + 0xE0]
	0x03A0E4CC CBZ X26, 0x3A0E5E8
	0x03A0E4D0 LDR V0, [X31 + 0xE]
	0x03A0E4D4 ADRP X11, 0x746000
	0x03A0E4D8 STR V0, [X31 + 0x16]
	0x03A0E4DC LDR W9, [X26 + 0x1C]
	0x03A0E4E0 LDR X10, [X26 + 0x10]
	0x03A0E4E4 LDR X11, [X11 + 0x310]
	0x03A0E4E8 ADD W9, W9, 0x1
	0x03A0E4EC LDR X11, [X11]
	0x03A0E4F0 STR W9, [X26 + 0x1C]
	0x03A0E4F4 CBZ X10, 0x3A0E5F0
	0x03A0E4F8 LDRSW X12, [X26 + 0x18]
	0x03A0E4FC LDR W13, [X10 + 0x18]
	0x03A0E500 ADD X9, X24, X20
	0x03A0E504 ADD X8, X8, X19
	0x03A0E508 CMP W12, W13
	0x03A0E50C B.CS 0x3A0E534
	0x03A0E510 MOVZ W13, 0x30
	0x03A0E514 ADD W11, W12, 0x1
	0x03A0E518 MADD X10, X12, X13, X10
	0x03A0E51C STR W11, [X26 + 0x18]
	0x03A0E520 STP X22, X9, [X10 + 0x20]
	0x03A0E524 STP X8, X31, [X10 + 0x30]
	0x03A0E528 LDR V0, [X31 + 0x16]
	0x03A0E52C STR V0, [X10 + 0x4]
	0x03A0E530 B 0x3A0E484
	0x03A0E534 LDR X10, [X11 + 0x20]
	0x03A0E538 LDR V0, [X31 + 0x16]
	0x03A0E53C LDR X10, [X10 + 0xC0]
	0x03A0E540 LDR X2, [X10 + 0x70]
	0x03A0E544 STP X22, X9, [X31 + 0x170]
	0x03A0E548 STP X8, X31, [X31 + 0x180]
	0x03A0E54C STR V0, [X29]
	0x03A0E550 ADD X1, X31, 0x170
	0x03A0E554 MOV X0, X26
	0x03A0E558 BL 0x2FE46FC
	0x03A0E55C B 0x3A0E484
	0x03A0E560 ADRP X8, 0x746000
	0x03A0E564 LDR X8, [X8 + 0x418]
	0x03A0E568 ADD X0, X31, 0x120
	0x03A0E56C LDR X1, [X8]
	0x03A0E570 BL 0x2BBF164
	0x03A0E574 CBZ X21, 0x3A0ED00
	0x03A0E578 ADRP X9, 0x746000
	0x03A0E57C LDR W10, [X21 + 0x1C]
	0x03A0E580 LDR X8, [X21 + 0x10]
	0x03A0E584 LDR X9, [X9 + 0x308]
	0x03A0E588 ADD W10, W10, 0x1
	0x03A0E58C LDR X9, [X9]
	0x03A0E590 STR W10, [X21 + 0x1C]
	0x03A0E594 CBZ X8, 0x3A0ED00
	0x03A0E598 LDRSW X10, [X21 + 0x18]
	0x03A0E59C LDR W11, [X8 + 0x18]
	0x03A0E5A0 CMP W10, W11
	0x03A0E5A4 B.CS 0x3A0E5BC
	0x03A0E5A8 ADD W9, W10, 0x1
	0x03A0E5AC ADD X8, X8, X10, 0x3, LSL
	0x03A0E5B0 STR W9, [X21 + 0x18]
	0x03A0E5B4 STR X26, [X8 + 0x20]
	0x03A0E5B8 B 0x3A0E5D4
	0x03A0E5BC LDR X8, [X9 + 0x20]
	0x03A0E5C0 MOV X0, X21
	0x03A0E5C4 MOV X1, X26
	0x03A0E5C8 LDR X8, [X8 + 0xC0]
	0x03A0E5CC LDR X2, [X8 + 0x70]
	0x03A0E5D0 BL 0x301BF90
	0x03A0E5D4 LDR W8, [X31 + 0x1C]
	0x03A0E5D8 ADD W25, W25, 0x1
	0x03A0E5DC CMP W25, W8
	0x03A0E5E0 B.NE 0x3A0E434
	0x03A0E5E4 B 0x3A0E864
	0x03A0E5E8 BL 0x1C16F20
	0x03A0E5EC B 0x3A0ED1C
	0x03A0E5F0 BL 0x1C16F20
	0x03A0E5F4 B 0x3A0ED1C
	0x03A0E5F8 B 0x3A0E608
	0x03A0E5FC B 0x3A0E608
	0x03A0E600 B 0x3A0E608
	0x03A0E604 B 0x3A0E608
	0x03A0E608 CMP W1, 0x1
	0x03A0E60C B.NE 0x3A0ED04
	0x03A0E610 BL 0x3EB1AD0
	0x03A0E614 LDR X20, [X0]
	0x03A0E618 BL 0x3EB1AE0
	0x03A0E61C ADRP X8, 0x746000
	0x03A0E620 LDR X8, [X8 + 0x418]
	0x03A0E624 ADD X0, X31, 0x120

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+80], X24
	004 Move [X31+88], X23
	005 Move [X31+96], X22
	006 Move [X31+104], X21
	007 Move [X31+112], X20
	008 Move [X31+120], X19
	009 Move X22, 0x9D4000
	010 Move W8, [X22+3987]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0x747000
	019 Move X0, [X0+736]
	020 Call 0x1C17CF4
	021 Move X0, 0x747000
	022 Move X0, [X0+744]
	023 Call 0x1C17CF4
	024 Move X0, 0x747000
	025 Move X0, [X0+752]
	026 Call 0x1C17CF4
	027 Move X0, 0x747000
	028 Move X0, [X0+768]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X22+3987], W8
	032 Move [X31+32], X31
	033 Move [X31+40], X31
	034 Move [X31+48], X31
	035 Compare X19, 0
	036 JumpIfEqual {116}
	037 Move X0, [X21+48]
	038 Compare X0, 0
	039 JumpIfEqual {116}
	040 Move X8, 0x747000
	041 Move X8, [X8+768]
	042 Move X23, 0x747000
	043 Move X21, 0x747000
	044 Move X22, [X19+24]
	045 Move X1, [X8]
	046 Move X23, [X23+744]
	047 Move X21, [X21+736]
	048 Add X8, X31, 8
	049 Call List`1<Object>.GetEnumerator, X0
	050 NotImplemented "Instruction LDUR not yet implemented."
	051 Move X8, [X31+24]
	052 Move [X31+2], V0
	053 Move [X31+48], X8
	054 Move X1, [X23]
	055 Add X0, X31, 32
	056 Call Enumerator<Object>.MoveNext, X0
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {102}
	061 Move X24, [X31+48]
	062 Compare X24, 0
	063 JumpIfEqual {114}
	064 Move X0, [X24+32]
	065 Compare X0, 0
	066 JumpIfEqual {54}
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X8, [X24+24]
	070 Compare X8, 0
	071 JumpIfEqual {78}
	072 Move X9, [X8+32]
	073 Compare X9, 0
	074 JumpIfNotEqual {78}
	075 Move X8, [X8+24]
	076 Compare X8, 0
	077 JumpIfNotEqual {72}
	078 NotImplemented "Instruction CMP not yet implemented."
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Compare X20, 0
	082 JumpIfEqual {115}
	083 Move X1, [X20+32]
	084 Call Clipper.Poly2ContainsPoly1, X0, X1
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {90}
	089 Move [X24+24], X20
	090 Move X0, [X24+32]
	091 Move X1, [X19+32]
	092 Call Clipper.Poly2ContainsPoly1, X0, X1
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {98}
	097 Move [X24+24], X19
	098 Move X8, [X24+24]
	099 NotImplemented "Instruction CMP not yet implemented."
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move [X24+24], X22
	102 Move X1, [X21]
	103 Add X0, X31, 32
	104 Call Enumerator<Object>.Dispose, X0
	105 Move X20, [X31+112]
	106 Move X19, [X31+120]
	107 Move X22, [X31+96]
	108 Move X21, [X31+104]
	109 Move X24, [X31+80]
	110 Move X23, [X31+88]
	111 Move X30, [X31+64]
	112 Add X31, X31, 128
	113 Return 
	114 Call 0x1C17F20
	115 Call 0x1C17F20
	116 Call 0x1C17F20
	117 Move X19, X0
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move X0, X19
	120 Call 0x3EB2AD0
	121 Move X20, [X0]
	122 Call 0x3EB2AE0
	123 Move X1, [X21]
	124 Add X0, X31, 32
	125 Call Enumerator<Object>.Dispose, X0
	126 Compare X20, 0
	127 JumpIfEqual {105}
	128 Move X0, X20
	129 Call 0x1C17F18
	130 Move X20, X31
	131 Move X19, X0
	132 Move X1, [X21]
	133 Add X0, X31, 32
	134 Call Enumerator<Object>.Dispose, X0
	135 Compare X20, 0
	136 JumpIfNotEqual {139}
	137 Move X0, X19
	138 Call 0x1D2D690
	139 Move X0, X20
	140 Call 0x1C17F18
	141 Call 0x1991590

Method: System.Void FixupFirstLefts3(UnityEngine.Rendering.Universal.OutRec OldOutRec, UnityEngine.Rendering.Universal.OutRec NewOutRec)

Disassembly:
	0x03A0E628 LDR X1, [X8]
	0x03A0E62C BL 0x2BBF164
	0x03A0E630 CBZ X20, 0x3A0E574
	0x03A0E634 B 0x3A0E85C
	0x03A0E638 B.LT 0x3A0E864
	0x03A0E63C ADRP X27, 0x746000
	0x03A0E640 ADRP X28, 0x746000
	0x03A0E644 LDR X27, [X27 + 0x420]
	0x03A0E648 LDR X28, [X28 + 0x210]
	0x03A0E64C ADD X8, X31, 0x170
	0x03A0E650 MOV W25, W31
	0x03A0E654 MOVN X29, 0x0
	0x03A0E658 ADD X22, X8, 0x20
	0x03A0E65C ADRP X8, 0x746000
	0x03A0E660 LDR X8, [X8 + 0x168]
	0x03A0E664 LDR X0, [X8]
	0x03A0E668 BL 0x1C16F10
	0x03A0E66C ADRP X8, 0x746000
	0x03A0E670 LDR X8, [X8 + 0x318]
	0x03A0E674 LDR W1, [X31 + 0x18]
	0x03A0E678 MOV X26, X0
	0x03A0E67C LDR X2, [X8]
	0x03A0E680 BL 0x2FE3EC4
	0x03A0E684 ADRP X8, 0x746000
	0x03A0E688 LDR X8, [X8 + 0x430]
	0x03A0E68C LDR X0, [X31 + 0x10]
	0x03A0E690 LDR X1, [X8]
	0x03A0E694 ADD X8, X31, 0xE0
	0x03A0E698 BL 0x2FE558C
	0x03A0E69C LDP V0, V1, [X31 + 0xE0]
	0x03A0E6A0 LDP V2, V3, [X31 + 0x100]
	0x03A0E6A4 STP V0, V1, [X31 + 0x120]
	0x03A0E6A8 STP V2, V3, [X31 + 0x140]
	0x03A0E6AC LDR X1, [X27]
	0x03A0E6B0 ADD X0, X31, 0x120
	0x03A0E6B4 BL 0x2BBF168
	0x03A0E6B8 TBZ X0, 0x0, 0x3A0E788
	0x03A0E6BC LDP X20, X19, [X31 + 0x138]
	0x03A0E6C0 LDR X2, [X28]
	0x03A0E6C4 ADD X8, X31, 0xE0
	0x03A0E6C8 MOV X0, X23
	0x03A0E6CC MOV W1, W25
	0x03A0E6D0 BL 0x2FE4360
	0x03A0E6D4 LDR X24, [X31 + 0xE8]
	0x03A0E6D8 LDR X2, [X28]
	0x03A0E6DC ADD X8, X31, 0xE0
	0x03A0E6E0 MOV X0, X23
	0x03A0E6E4 MOV W1, W25
	0x03A0E6E8 BL 0x2FE4360
	0x03A0E6EC LDR X8, [X31 + 0xF0]
	0x03A0E6F0 STP X31, X31, [X31 + 0xE0]
	0x03A0E6F4 CBZ X26, 0x3A0E810
	0x03A0E6F8 LDR V0, [X31 + 0xE]
	0x03A0E6FC ADRP X11, 0x746000
	0x03A0E700 STR V0, [X31 + 0x16]
	0x03A0E704 LDR W9, [X26 + 0x1C]
	0x03A0E708 LDR X10, [X26 + 0x10]
	0x03A0E70C LDR X11, [X11 + 0x310]
	0x03A0E710 ADD W9, W9, 0x1
	0x03A0E714 LDR X11, [X11]
	0x03A0E718 STR W9, [X26 + 0x1C]
	0x03A0E71C CBZ X10, 0x3A0E818
	0x03A0E720 LDRSW X12, [X26 + 0x18]
	0x03A0E724 LDR W13, [X10 + 0x18]
	0x03A0E728 SUB X9, X24, X20
	0x03A0E72C SUB X8, X8, X19
	0x03A0E730 CMP W12, W13
	0x03A0E734 B.CS 0x3A0E75C
	0x03A0E738 MOVZ W13, 0x30
	0x03A0E73C ADD W11, W12, 0x1
	0x03A0E740 MADD X10, X12, X13, X10
	0x03A0E744 STR W11, [X26 + 0x18]
	0x03A0E748 STP X29, X9, [X10 + 0x20]
	0x03A0E74C STP X8, X31, [X10 + 0x30]
	0x03A0E750 LDR V0, [X31 + 0x16]
	0x03A0E754 STR V0, [X10 + 0x4]
	0x03A0E758 B 0x3A0E6AC
	0x03A0E75C LDR X10, [X11 + 0x20]
	0x03A0E760 LDR V0, [X31 + 0x16]
	0x03A0E764 LDR X10, [X10 + 0xC0]
	0x03A0E768 LDR X2, [X10 + 0x70]
	0x03A0E76C STP X29, X9, [X31 + 0x170]
	0x03A0E770 STP X8, X31, [X31 + 0x180]
	0x03A0E774 STR V0, [X22]
	0x03A0E778 ADD X1, X31, 0x170
	0x03A0E77C MOV X0, X26
	0x03A0E780 BL 0x2FE46FC
	0x03A0E784 B 0x3A0E6AC
	0x03A0E788 ADRP X8, 0x746000
	0x03A0E78C LDR X8, [X8 + 0x418]
	0x03A0E790 ADD X0, X31, 0x120

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0x9D4000
	008 Move W8, [X22+3988]
	009 Move X19, X2
	010 Move X20, X1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x747000
	017 Move X0, [X0+736]
	018 Call 0x1C17CF4
	019 Move X0, 0x747000
	020 Move X0, [X0+744]
	021 Call 0x1C17CF4
	022 Move X0, 0x747000
	023 Move X0, [X0+752]
	024 Call 0x1C17CF4
	025 Move X0, 0x747000
	026 Move X0, [X0+768]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+3988], W8
	030 Move [X31+8], X31
	031 Move [X31+16], X31
	032 Move [X31+24], X31
	033 Move X0, [X21+48]
	034 Compare X0, 0
	035 JumpIfEqual {80}
	036 Move X8, 0x747000
	037 Move X8, [X8+768]
	038 Move X22, 0x747000
	039 Move X21, 0x747000
	040 Move X1, [X8]
	041 Move X22, [X22+744]
	042 Move X21, [X21+736]
	043 Add X8, X31, 8
	044 Call List`1<Object>.GetEnumerator, X0
	045 Move X1, [X22]
	046 Add X0, X31, 8
	047 Call Enumerator<Object>.MoveNext, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {69}
	052 Move X8, [X31+24]
	053 Compare X8, 0
	054 JumpIfEqual {79}
	055 Move X9, [X8+24]
	056 Compare X9, 0
	057 JumpIfEqual {64}
	058 Move X10, [X9+32]
	059 Compare X10, 0
	060 JumpIfNotEqual {64}
	061 Move X9, [X9+24]
	062 Compare X9, 0
	063 JumpIfNotEqual {58}
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X9, [X8+32]
	066 Compare X9, 0
	067 JumpIfEqual {45}
	068 Move [X8+24], X19
	069 Move X1, [X21]
	070 Add X0, X31, 8
	071 Call Enumerator<Object>.Dispose, X0
	072 Move X20, [X31+64]
	073 Move X19, [X31+72]
	074 Move X22, [X31+48]
	075 Move X21, [X31+56]
	076 Move X30, [X31+32]
	077 Add X31, X31, 80
	078 Return 
	079 Call 0x1C17F20
	080 Call 0x1C17F20
	081 Move X20, X0
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X0, X20
	084 Call 0x3EB2AD0
	085 Move X19, [X0]
	086 Call 0x3EB2AE0
	087 Move X1, [X21]
	088 Add X0, X31, 8
	089 Call Enumerator<Object>.Dispose, X0
	090 Compare X19, 0
	091 JumpIfEqual {72}
	092 Move X0, X19
	093 Call 0x1C17F18
	094 Move X19, X31
	095 Move X20, X0
	096 Move X1, [X21]
	097 Add X0, X31, 8
	098 Call Enumerator<Object>.Dispose, X0
	099 Compare X19, 0
	100 JumpIfNotEqual {103}
	101 Move X0, X20
	102 Call 0x1D2D690
	103 Move X0, X19
	104 Call 0x1C17F18
	105 Call 0x1991590

Method: UnityEngine.Rendering.Universal.OutRec ParseFirstLeft(UnityEngine.Rendering.Universal.OutRec FirstLeft)

Disassembly:
	0x03A0E410 B.LT 0x3A0E864
	0x03A0E414 ADRP X27, 0x746000
	0x03A0E418 ADRP X28, 0x746000
	0x03A0E41C LDR X27, [X27 + 0x420]
	0x03A0E420 LDR X28, [X28 + 0x210]
	0x03A0E424 ADD X8, X31, 0x170

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {9}
	003 Move X8, [X0+32]
	004 Compare X8, 0
	005 JumpIfNotEqual {9}
	006 Move X0, [X0+24]
	007 Compare X0, 0
	008 JumpIfNotEqual {3}
	009 Return X0

Method: System.Void JoinCommonEdges()

Disassembly:
	0x03A09594 CMP X8, X9
	0x03A09598 B.NE 0x3A095B4
	0x03A0959C LDR X8, [X19 + 0x10]
	0x03A095A0 LDR X9, [X23 + 0x28]
	0x03A095A4 CMP X8, X9
	0x03A095A8 B.NE 0x3A095B4
	0x03A095AC MOV X21, X23
	0x03A095B0 B 0x3A09610
	0x03A095B4 ADRP X8, 0x74B000
	0x03A095B8 LDR X8, [X8 + 0x388]
	0x03A095BC LDR X0, [X8]
	0x03A095C0 BL 0x1C16F10
	0x03A095C4 MOV X1, X31
	0x03A095C8 MOV X21, X0
	0x03A095CC BL 0x33BDD8C
	0x03A095D0 CBZ X21, 0x3A09624
	0x03A095D4 LDR W8, [X22 + 0x10]
	0x03A095D8 STR W8, [X21 + 0x10]
	0x03A095DC LDP V1, V0, [X19 + 0x10]
	0x03A095E0 LDR V2, [X19]
	0x03A095E4 STR X23, [X21 + 0x48]
	0x03A095E8 STUR V0, [X21 + 0x38]
	0x03A095EC STUR V1, [X21 + 0x28]
	0x03A095F0 STUR V2, [X21 + 0x18]
	0x03A095F4 LDR X8, [X23 + 0x50]
	0x03A095F8 STR X8, [X21 + 0x50]
	0x03A095FC CBZ X8, 0x3A09624
	0x03A09600 STR X21, [X8 + 0x48]
	0x03A09604 STR X21, [X23 + 0x50]
	0x03A09608 CBNZ W20, 0x3A09610
	0x03A0960C STR X21, [X22 + 0x20]
	0x03A09610 MOV X0, X21
	0x03A09614 LDP X20, X19, [X31 + 0x20]
	0x03A09618 LDP X22, X21, [X31 + 0x10]
	0x03A0961C LDP X30, X23, [X31], #0x30
	0x03A09620 RET
	0x03A09624 BL 0x1C16F20
	0x03A09628 SUB X31, X31, 0x1C0
	0x03A0962C STP X29, X30, [X31 + 0x180]
	0x03A09630 STP X24, X23, [X31 + 0x190]
	0x03A09634 STP X22, X21, [X31 + 0x1A0]
	0x03A09638 STP X20, X19, [X31 + 0x1B0]
	0x03A0963C CBZ X2, 0x3A09814
	0x03A09640 LDR X8, [X2 + 0xB0]
	0x03A09644 MOV X20, X3
	0x03A09648 MOV X22, X2
	0x03A0964C MOV X23, X1
	0x03A09650 MOV X19, X0
	0x03A09654 CBZ X8, 0x3A0966C
	0x03A09658 CBZ X23, 0x3A09814
	0x03A0965C LDR V0, [X23 + 0xD0]
	0x03A09660 LDR V1, [X22 + 0xD0]
	0x03A09664 FCMP D0, D1
	0x03A09668 B.LE 0x3A096A8
	0x03A0966C LDP V1, V0, [X20 + 0x10]
	0x03A09670 LDR V2, [X20]
	0x03A09674 ADD X2, X31, 0x150
	0x03A09678 MOV X0, X19
	0x03A0967C MOV X1, X23
	0x03A09680 STP V1, V0, [X31 + 0x160]
	0x03A09684 STR V2, [X31 + 0x15]
	0x03A09688 BL 0x3A09454
	0x03A0968C CBZ X23, 0x3A09814
	0x03A09690 MOV X21, X0
	0x03A09694 MOV W9, W31
	0x03A09698 MOVZ W8, 0x1
	0x03A0969C MOV X24, X23
	0x03A096A0 MOV X10, X22
	0x03A096A4 B 0x3A096DC
	0x03A096A8 LDP V1, V0, [X20 + 0x10]
	0x03A096AC LDR V2, [X20]
	0x03A096B0 ADD X2, X31, 0x120
	0x03A096B4 MOV X0, X19
	0x03A096B8 MOV X1, X22
	0x03A096BC STP V1, V0, [X31 + 0x130]
	0x03A096C0 STR V2, [X31 + 0x12]
	0x03A096C4 BL 0x3A09454
	0x03A096C8 MOV X21, X0
	0x03A096CC MOV W8, W31
	0x03A096D0 MOVZ W9, 0x1
	0x03A096D4 MOV X24, X22
	0x03A096D8 MOV X10, X23
	0x03A096DC LDR W11, [X24 + 0xEC]
	0x03A096E0 STR W11, [X10 + 0xEC]
	0x03A096E4 STR W9, [X23 + 0xDC]
	0x03A096E8 STR W8, [X22 + 0xDC]
	0x03A096EC LDR X8, [X24 + 0x110]
	0x03A096F0 CMP X8, X10
	0x03A096F4 CSEL X8, X10, X24, EQ
	0x03A096F8 LDR X22, [X8 + 0x110]
	0x03A096FC CBZ X22, 0x3A097F8
	0x03A09700 LDR W8, [X22 + 0xEC]
	0x03A09704 TBNZ X8, 0x1F, 0x3A097F8
	0x03A09708 LDR X8, [X22 + 0x80]
	0x03A0970C LDR X1, [X20 + 0x10]
	0x03A09710 CMP X8, X1
	0x03A09714 B.GE 0x3A097F8
	0x03A09718 LDR X8, [X24 + 0x80]
	0x03A0971C CMP X8, X1
	0x03A09720 B.GE 0x3A097F8
	0x03A09724 MOV X0, X22
	0x03A09728 BL 0x3A09F54
	0x03A0972C LDR X1, [X20 + 0x10]
	0x03A09730 MOV X23, X0
	0x03A09734 MOV X0, X24
	0x03A09738 BL 0x3A09F54
	0x03A0973C CMP X23, X0
	0x03A09740 B.NE 0x3A097F8
	0x03A09744 LDR W8, [X24 + 0xE0]
	0x03A09748 CBZ W8, 0x3A097F8
	0x03A0974C LDR W8, [X22 + 0xE0]
	0x03A09750 CBZ W8, 0x3A097F8
	0x03A09754 ADD X8, X22, 0x70
	0x03A09758 LDR X9, [X20 + 0x10]
	0x03A0975C STP X31, X31, [X31 + 0x110]
	0x03A09760 LDP V2, V0, [X8 + 0x10]
	0x03A09764 LDR V1, [X8]
	0x03A09768 STP X31, X31, [X31 + 0xB0]
	0x03A0976C MOVN X8, 0x0
	0x03A09770 STP V2, V0, [X31 + 0xD0]
	0x03A09774 STR V1, [X31 + 0xC]
	0x03A09778 LDP V0, V1, [X24 + 0x70]!
	0x03A0977C ADD X0, X31, 0xF0
	0x03A09780 ADD X1, X31, 0xC0
	0x03A09784 ADD X2, X31, 0x90
	0x03A09788 LDR V2, [X24 + 0x2]
	0x03A0978C STP V0, V1, [X31 + 0x60]
	0x03A09790 ADD X3, X31, 0x60
	0x03A09794 STR V2, [X31 + 0x8]
	0x03A09798 LDRB W4, [X19 + 0x40]
	0x03A0979C STP X8, X23, [X31 + 0xF0]
	0x03A097A0 STP X9, X31, [X31 + 0x100]
	0x03A097A4 STP X8, X23, [X31 + 0x90]
	0x03A097A8 STP X9, X31, [X31 + 0xA0]
	0x03A097AC BL 0x3A04A00
	0x03A097B0 TBZ X0, 0x0, 0x3A097F8
	0x03A097B4 LDP V1, V0, [X20 + 0x10]
	0x03A097B8 LDR V2, [X20]
	0x03A097BC ADD X2, X31, 0x30
	0x03A097C0 MOV X0, X19
	0x03A097C4 MOV X1, X22
	0x03A097C8 STP V1, V0, [X31 + 0x40]
	0x03A097CC STR V2, [X31 + 0x3]
	0x03A097D0 BL 0x3A09454
	0x03A097D4 LDP V0, V1, [X24]
	0x03A097D8 LDR V2, [X24 + 0x2]
	0x03A097DC MOV X2, X0
	0x03A097E0 ADD X3, X31, 0x0
	0x03A097E4 MOV X0, X19
	0x03A097E8 MOV X1, X21
	0x03A097EC STP V0, V1, [X31]
	0x03A097F0 STR V2, [X31 + 0x2]
	0x03A097F4 BL 0x3A08DF8
	0x03A097F8 MOV X0, X21
	0x03A097FC LDP X20, X19, [X31 + 0x1B0]
	0x03A09800 LDP X22, X21, [X31 + 0x1A0]
	0x03A09804 LDP X24, X23, [X31 + 0x190]
	0x03A09808 LDP X29, X30, [X31 + 0x180]
	0x03A0980C ADD X31, X31, 0x1C0
	0x03A09810 RET
	0x03A09814 BL 0x1C16F20
	0x03A09818 STR X30, [X31 - 0x10]!
	0x03A0981C LDR X8, [X0 + 0x50]
	0x03A09820 CBZ X8, 0x3A09838
	0x03A09824 CBZ X1, 0x3A0984C
	0x03A09828 STP X8, X31, [X1 + 0x118]
	0x03A0982C STR X1, [X8 + 0x120]
	0x03A09830 STR X1, [X0 + 0x50]
	0x03A09834 B 0x3A09844
	0x03A09838 STR X1, [X0 + 0x50]
	0x03A0983C CBZ X1, 0x3A0984C
	0x03A09840 STP X31, X31, [X1 + 0x118]
	0x03A09844 LDR X30, [X31], #0x10
	0x03A09848 RET
	0x03A0984C BL 0x1C16F20
	0x03A09850 CMP X1, X2
	0x03A09854 CSEL X8, X2, X1, GT
	0x03A09858 CSEL X9, X1, X2, GT
	0x03A0985C CMP X3, X4
	0x03A09860 CSEL X11, X3, X4, GT
	0x03A09864 CSEL X10, X4, X3, GT
	0x03A09868 CMP X8, X11
	0x03A0986C CSET W8, LT
	0x03A09870 CMP X10, X9
	0x03A09874 CSET W9, LT
	0x03A09878 AND W0, W8, W9, 0x0
	0x03A0987C RET
	0x03A09880 STP X29, X30, [X31 - 0x60]!
	0x03A09884 STP X28, X27, [X31 + 0x10]
	0x03A09888 STP X26, X25, [X31 + 0x20]
	0x03A0988C STP X24, X23, [X31 + 0x30]
	0x03A09890 STP X22, X21, [X31 + 0x40]
	0x03A09894 STP X20, X19, [X31 + 0x50]
	0x03A09898 SUB X31, X31, 0x2A0
	0x03A0989C ADRP X23, 0x9D8000
	0x03A098A0 LDRB W8, [X23 + 0xF86]
	0x03A098A4 MOV X22, X3
	0x03A098A8 MOV X19, X2
	0x03A098AC MOV X20, X1
	0x03A098B0 MOV X21, X0
	0x03A098B4 TBNZ X8, 0x0, 0x3A098CC
	0x03A098B8 ADRP X0, 0x6EA000
	0x03A098BC LDR X0, [X0 + 0x5A8]
	0x03A098C0 BL 0x1C16CF4
	0x03A098C4 MOVZ W8, 0x1
	0x03A098C8 STRB W8, [X23 + 0xF86]
	0x03A098CC CBZ X20, 0x3A09EE4

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x9D9000
	011 Move W8, [X20+3989]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x74C000
	018 Move X0, [X0+832]
	019 Call 0x1C17CF4
	020 Move X0, 0x74C000
	021 Move X0, [X0+840]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3989], W8
	025 Move X0, [X19+120]
	026 Compare X0, 0
	027 JumpIfEqual {245}
	028 Move X25, 0x74C000
	029 Move X25, [X25+840]
	030 Move W20, W31
	031 Move W8, [X0+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X2, [X25]
	034 Move W1, W20
	035 Call List`1<Object>.get_Item, X0, X1
	036 Compare X0, 0
	037 JumpIfEqual {245}
	038 Move X8, [X0+16]
	039 Move X22, X0
	040 Compare X8, 0
	041 JumpIfEqual {245}
	042 Move W1, [X8+16]
	043 Move X0, X19
	044 Call Clipper.GetOutRec, X0, X1
	045 Move X8, [X22+24]
	046 Compare X8, 0
	047 JumpIfEqual {245}
	048 Move W1, [X8+16]
	049 Move X21, X0
	050 Move X0, X19
	051 Call Clipper.GetOutRec, X0, X1
	052 Compare X21, 0
	053 JumpIfEqual {245}
	054 Move X8, [X21+32]
	055 Compare X8, 0
	056 JumpIfEqual {71}
	057 Move X23, X0
	058 Compare X0, 0
	059 JumpIfEqual {245}
	060 Move X26, X23
	061 Add X26, X26, 32
	062 Move X8, [X26]
	063 Compare X8, 0
	064 JumpIfEqual {71}
	065 Move W8, [X21+21]
	066 Compare W8, 0
	067 JumpIfNotEqual {71}
	068 Move W8, [X23+21]
	069 Compare W8, 0
	070 JumpIfEqual {75}
	071 Move X0, [X19+120]
	072 Add W20, W20, 1
	073 Compare X0, 0
	074 JumpIfNotEqual {31}
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X8, X21
	077 Move X8, [X8+24]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Compare X8, 0
	080 JumpIfNotEqual {77}
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X24, X23
	083 Move X8, X23
	084 Compare X8, 0
	085 JumpIfEqual {245}
	086 Move X8, [X8+24]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Compare X8, 0
	089 JumpIfNotEqual {84}
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X24, X21
	092 Move X0, X19
	093 Move X1, X21
	094 Move X2, X23
	095 Call Clipper.GetLowermostRec, X0, X1, X2
	096 Move X24, X0
	097 Move X0, X19
	098 Move X1, X22
	099 Move X2, X21
	100 Move X3, X23
	101 Call Clipper.JoinPoints, X0, X1, X2, X3
	102 Move TEMP, X0
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfNotEqual {71}
	106 Move [X26], X31
	107 Move [X26+8], X31
	108 Move W8, [X21+16]
	109 Move [X23+16], W8
	110 Compare X24, 0
	111 JumpIfEqual {245}
	112 Move W8, [X24+20]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move [X21+20], W8
	115 Move X8, [X23+24]
	116 Move [X21+24], X8
	117 Move [X23+24], X21
	118 Move W8, [X19+136]
	119 Compare W8, 0
	120 JumpIfEqual {71}
	121 Move X0, X19
	122 Move X1, X23
	123 Move X2, X21
	124 Call Clipper.FixupFirstLefts3, X0, X1, X2
	125 Move X0, X19
	126 Move X1, X22
	127 Move X2, X21
	128 Move X3, X21
	129 Call Clipper.JoinPoints, X0, X1, X2, X3
	130 Move TEMP, X0
	131 And TEMP, TEMP, 1
	132 Compare TEMP, 1
	133 JumpIfNotEqual {71}
	134 Move X8, [X22+16]
	135 Move X0, X19
	136 Move [X21+32], X8
	137 Move [X21+40], X31
	138 Call ClipperBase.CreateOutRec, X0
	139 Compare X0, 0
	140 JumpIfEqual {245}
	141 Move X8, [X22+24]
	142 Move X1, X0
	143 Move X23, X0
	144 Move [X0+32], X8
	145 Call Clipper.UpdateOutPtIdxs, X0, X1
	146 Move X0, [X23+32]
	147 Move X1, [X21+32]
	148 Call Clipper.Poly2ContainsPoly1, X0, X1
	149 Move TEMP, X0
	150 And TEMP, TEMP, 1
	151 Compare TEMP, 1
	152 JumpIfNotEqual {185}
	153 Move W8, [X21+20]
	154 Move [X23+24], X21
	155 Xor W22, W8, 1
	156 Move [X23+20], W22
	157 Move W8, [X19+136]
	158 Compare W8, 0
	159 JumpIfEqual {165}
	160 Move X0, X19
	161 Move X1, X23
	162 Move X2, X21
	163 Call Clipper.FixupFirstLefts2, X0, X1, X2
	164 Move W22, [X23+20]
	165 Move X1, [X23+32]
	166 Move W21, [X19+144]
	167 Call Clipper.Area, X0, X1
	168 And W8, W22, 255
	169 NotImplemented "Instruction FCMP not yet implemented."
	170 Xor W8, W21, W8
	171 NotImplemented "Instruction CSET not yet implemented."
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Move X8, [X23+32]
	174 Compare X8, 0
	175 JumpIfEqual {71}
	176 Move X9, X8
	177 Compare X9, 0
	178 JumpIfEqual {245}
	179 Move X10, [X9+72]
	180 Move X11, [X9+80]
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move [X9+72], X11
	183 Move [X9+80], X10
	184 Move X9, X10
	185 Move X0, [X21+32]
	186 Move X1, [X23+32]
	187 Call Clipper.Poly2ContainsPoly1, X0, X1
	188 Move W8, [X21+20]
	189 Move [X23+20], W8
	190 Move TEMP, X0
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfNotEqual {226}
	194 Move X9, [X21+24]
	195 Xor W22, W8, 1
	196 Move [X21+20], W22
	197 Move [X23+24], X9
	198 Move [X21+24], X23
	199 Move W8, [X19+136]
	200 Compare W8, 0
	201 JumpIfEqual {207}
	202 Move X0, X19
	203 Move X1, X21
	204 Move X2, X23
	205 Call Clipper.FixupFirstLefts2, X0, X1, X2
	206 Move W22, [X21+20]
	207 Move X1, [X21+32]
	208 Move W23, [X19+144]
	209 Call Clipper.Area, X0, X1
	210 NotImplemented "Instruction FCMP not yet implemented."
	211 Xor W8, W23, W22
	212 NotImplemented "Instruction CSET not yet implemented."
	213 NotImplemented "Instruction CMP not yet implemented."
	214 Move X8, [X21+32]
	215 Compare X8, 0
	216 JumpIfEqual {71}
	217 Move X9, X8
	218 Compare X9, 0
	219 JumpIfEqual {245}
	220 Move X10, [X9+72]
	221 Move X11, [X9+80]
	222 NotImplemented "Instruction CMP not yet implemented."
	223 Move [X9+72], X11
	224 Move [X9+80], X10
	225 Move X9, X10
	226 Move X8, [X21+24]
	227 Move [X23+24], X8
	228 Move W8, [X19+136]
	229 Compare W8, 0
	230 JumpIfEqual {71}
	231 Move X0, X19
	232 Move X1, X21
	233 Move X2, X23
	234 Call Clipper.FixupFirstLefts1, X0, X1, X2
	235 Move X20, [X31+64]
	236 Move X19, [X31+72]
	237 Move X22, [X31+48]
	238 Move X21, [X31+56]
	239 Move X24, [X31+32]
	240 Move X23, [X31+40]
	241 Move X26, [X31+16]
	242 Move X25, [X31+24]
	243 Move X30, [X31+80]
	244 Return 
	245 Call 0x1C17F20

Method: System.Void UpdateOutPtIdxs(UnityEngine.Rendering.Universal.OutRec outrec)

Disassembly:
	0x03A0E794 LDR X1, [X8]
	0x03A0E798 BL 0x2BBF164
	0x03A0E79C CBZ X21, 0x3A0ED00
	0x03A0E7A0 ADRP X9, 0x746000
	0x03A0E7A4 LDR W10, [X21 + 0x1C]
	0x03A0E7A8 LDR X8, [X21 + 0x10]
	0x03A0E7AC LDR X9, [X9 + 0x308]
	0x03A0E7B0 ADD W10, W10, 0x1
	0x03A0E7B4 LDR X9, [X9]
	0x03A0E7B8 STR W10, [X21 + 0x1C]
	0x03A0E7BC CBZ X8, 0x3A0ED00
	0x03A0E7C0 LDRSW X10, [X21 + 0x18]
	0x03A0E7C4 LDR W11, [X8 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {14}
	004 Move X8, [X1+32]
	005 Move X9, X8
	006 Compare X9, 0
	007 JumpIfEqual {14}
	008 Move W10, [X1+16]
	009 Move [X9+16], W10
	010 Move X9, [X9+80]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X30, [X31+16]
	013 Return 
	014 Call 0x1C17F20

Method: System.Void DoSimplePolygons()

Disassembly:
	0x03A09B50 CMP W27, 0x3
	0x03A09B54 B.EQ 0x3A09B68
	0x03A09B58 CMP W27, 0x2
	0x03A09B5C B.NE 0x3A09B74
	0x03A09B60 LDR W27, [X19 + 0xE4]
	0x03A09B64 B 0x3A09B98
	0x03A09B68 LDR W8, [X19 + 0xE4]
	0x03A09B6C SUB W27, W31, W8
	0x03A09B70 B 0x3A09B98
	0x03A09B74 ADRP X8, 0x6EA000
	0x03A09B78 LDR X8, [X8 + 0x5A8]
	0x03A09B7C LDR W27, [X19 + 0xE4]
	0x03A09B80 LDR X0, [X8]
	0x03A09B84 LDR W8, [X0 + 0xE0]
	0x03A09B88 CBNZ W8, 0x3A09B90
	0x03A09B8C BL 0x1C16DFC
	0x03A09B90 CMP W27, 0x0
	0x03A09B94 CSNEG W27, W27, W27, PL
	0x03A09B98 ORR W8, W23, W24, 0x0
	0x03A09B9C TBNZ X8, 0x1F, 0x3A09C30
	0x03A09BA0 ORR W8, W27, W25, 0x0
	0x03A09BA4 CMP W8, 0x1
	0x03A09BA8 B.HI 0x3A09C08
	0x03A09BAC LDR W8, [X20 + 0xD8]
	0x03A09BB0 LDR W9, [X19 + 0xD8]
	0x03A09BB4 CMP W8, W9
	0x03A09BB8 B.EQ 0x3A09BC8
	0x03A09BBC LDR W8, [X21 + 0x44]
	0x03A09BC0 CMP W8, 0x3
	0x03A09BC4 B.NE 0x3A09C08
	0x03A09BC8 LDP V1, V0, [X22 + 0x10]
	0x03A09BCC LDR V2, [X22]
	0x03A09BD0 ADD X2, X31, 0x180
	0x03A09BD4 MOV X0, X21
	0x03A09BD8 MOV X1, X20
	0x03A09BDC STP V1, V0, [X31 + 0x190]
	0x03A09BE0 STR V2, [X31 + 0x18]
	0x03A09BE4 BL 0x3A09454
	0x03A09BE8 LDP V0, V1, [X22]
	0x03A09BEC LDR V2, [X22 + 0x2]
	0x03A09BF0 ADD X2, X31, 0x150
	0x03A09BF4 STP V0, V1, [X31 + 0x150]
	0x03A09BF8 STR V2, [X31 + 0x17]
	0x03A09BFC MOV X0, X21
	0x03A09C00 MOV X1, X19
	0x03A09C04 B 0x3A09C58
	0x03A09C08 LDP V1, V0, [X22 + 0x10]
	0x03A09C0C LDR V2, [X22]
	0x03A09C10 ADD X3, X31, 0x1B0
	0x03A09C14 MOV X0, X21
	0x03A09C18 MOV X1, X20
	0x03A09C1C MOV X2, X19
	0x03A09C20 STP V1, V0, [X31 + 0x1C0]
	0x03A09C24 STR V2, [X31 + 0x1B]
	0x03A09C28 BL 0x3A0A178
	0x03A09C2C B 0x3A09E14
	0x03A09C30 TBNZ X24, 0x1F, 0x3A09C90
	0x03A09C34 CMP W27, 0x1
	0x03A09C38 B.HI 0x3A09E14
	0x03A09C3C LDP V1, V0, [X22 + 0x10]
	0x03A09C40 LDR V2, [X22]
	0x03A09C44 ADD X2, X31, 0x120
	0x03A09C48 MOV X0, X21
	0x03A09C4C STP V1, V0, [X31 + 0x130]
	0x03A09C50 STR V2, [X31 + 0x12]
	0x03A09C54 MOV X1, X20
	0x03A09C58 BL 0x3A09454
	0x03A09C5C MOV X0, X20
	0x03A09C60 MOV X1, X19
	0x03A09C64 BL 0x3A0ABE4
	0x03A09C68 MOV X0, X20
	0x03A09C6C MOV X1, X19
	0x03A09C70 ADD X31, X31, 0x2A0
	0x03A09C74 LDP X20, X19, [X31 + 0x50]
	0x03A09C78 LDP X22, X21, [X31 + 0x40]
	0x03A09C7C LDP X24, X23, [X31 + 0x30]
	0x03A09C80 LDP X26, X25, [X31 + 0x20]
	0x03A09C84 LDP X28, X27, [X31 + 0x10]
	0x03A09C88 LDP X29, X30, [X31], #0x60
	0x03A09C8C B 0x3A0AC0C
	0x03A09C90 TBNZ X23, 0x1F, 0x3A09CE8
	0x03A09C94 CMP W25, 0x1
	0x03A09C98 B.HI 0x3A09E14
	0x03A09C9C LDP V1, V0, [X22 + 0x10]
	0x03A09CA0 LDR V2, [X22]
	0x03A09CA4 ADD X2, X31, 0xF0
	0x03A09CA8 STP V1, V0, [X31 + 0x100]
	0x03A09CAC STR V2, [X31 + 0xF]
	0x03A09CB0 B 0x3A09BFC
	0x03A09CB4 TBNZ X23, 0x1F, 0x3A09E14
	0x03A09CB8 LDP V1, V0, [X22 + 0x10]
	0x03A09CBC LDR V2, [X22]
	0x03A09CC0 ADD X2, X31, 0x270
	0x03A09CC4 STP V1, V0, [X31 + 0x280]
	0x03A09CC8 STR V2, [X31 + 0x27]
	0x03A09CCC MOV X0, X21
	0x03A09CD0 MOV X1, X20
	0x03A09CD4 BL 0x3A09454
	0x03A09CD8 TBNZ X24, 0x1F, 0x3A09E14
	0x03A09CDC MOVN W8, 0x0
	0x03A09CE0 STR W8, [X20 + 0xEC]
	0x03A09CE4 B 0x3A09E14
	0x03A09CE8 ORR W8, W25, W27, 0x0
	0x03A09CEC CMP W8, 0x1
	0x03A09CF0 B.HI 0x3A09E14
	0x03A09CF4 CMP W28, 0x3
	0x03A09CF8 B.EQ 0x3A09D0C
	0x03A09CFC CMP W28, 0x2
	0x03A09D00 B.NE 0x3A09D18
	0x03A09D04 LDR W23, [X20 + 0xE8]
	0x03A09D08 B 0x3A09D3C
	0x03A09D0C LDR W8, [X20 + 0xE8]
	0x03A09D10 SUB W23, W31, W8
	0x03A09D14 B 0x3A09D3C
	0x03A09D18 ADRP X8, 0x6EA000
	0x03A09D1C LDR X8, [X8 + 0x5A8]
	0x03A09D20 LDR W23, [X20 + 0xE8]
	0x03A09D24 LDR X0, [X8]
	0x03A09D28 LDR W8, [X0 + 0xE0]
	0x03A09D2C CBNZ W8, 0x3A09D34
	0x03A09D30 BL 0x1C16DFC
	0x03A09D34 CMP W23, 0x0
	0x03A09D38 CSNEG W23, W23, W23, PL
	0x03A09D3C CMP W26, 0x3
	0x03A09D40 B.EQ 0x3A09D54
	0x03A09D44 CMP W26, 0x2
	0x03A09D48 B.NE 0x3A09D60
	0x03A09D4C LDR W8, [X19 + 0xE8]
	0x03A09D50 B 0x3A09D84

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x9D9000
	010 Move W8, [X20+3990]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x74C000
	017 Move X0, [X0+608]
	018 Call 0x1C17CF4
	019 Move X0, 0x74C000
	020 Move X0, [X0+616]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3990], W8
	024 Move X0, [X19+48]
	025 Compare X0, 0
	026 JumpIfEqual {140}
	027 Move X23, 0x74C000
	028 Move X23, [X23+616]
	029 Move W20, W31
	030 Move W8, [X0+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X2, [X23]
	033 Move W1, W20
	034 Call List`1<Object>.get_Item, X0, X1
	035 Compare X0, 0
	036 JumpIfEqual {140}
	037 Move X8, [X0+32]
	038 Move X21, X0
	039 Compare X8, 0
	040 JumpIfEqual {136}
	041 Move W9, [X21+21]
	042 Compare W9, 0
	043 JumpIfNotEqual {136}
	044 Move X24, X8
	045 Compare X24, 0
	046 JumpIfEqual {140}
	047 Move X25, [X24+72]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Compare X25, 0
	050 JumpIfEqual {140}
	051 Move X8, [X24+32]
	052 Move X9, [X25+32]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X8, [X24+40]
	055 Move X9, [X25+40]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X8, [X25+72]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X8, [X25+80]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X9, [X24+80]
	062 Move [X24+80], X8
	063 Compare X8, 0
	064 JumpIfEqual {140}
	065 Move [X8+72], X24
	066 Move [X25+80], X9
	067 Compare X9, 0
	068 JumpIfEqual {140}
	069 Move X0, X19
	070 Move [X9+72], X25
	071 Move [X21+32], X24
	072 Call ClipperBase.CreateOutRec, X0
	073 Compare X0, 0
	074 JumpIfEqual {140}
	075 Move X1, X0
	076 Move X22, X0
	077 Move [X0+32], X25
	078 Call Clipper.UpdateOutPtIdxs, X0, X1
	079 Move X0, [X22+32]
	080 Move X1, [X21+32]
	081 Call Clipper.Poly2ContainsPoly1, X0, X1
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {97}
	086 Move W8, [X21+20]
	087 Move [X22+24], X21
	088 Move X25, X24
	089 Xor W8, W8, 1
	090 Move [X22+20], W8
	091 Move W8, [X19+136]
	092 Compare W8, 0
	093 JumpIfEqual {130}
	094 Move X0, X19
	095 Move X1, X22
	096 Move X2, X21
	097 Move X0, [X21+32]
	098 Move X1, [X22+32]
	099 Call Clipper.Poly2ContainsPoly1, X0, X1
	100 Move W8, [X21+20]
	101 Move [X22+20], W8
	102 Move TEMP, X0
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfNotEqual {119}
	106 Move X9, [X21+24]
	107 Xor W8, W8, 1
	108 Move [X21+20], W8
	109 Move X25, X24
	110 Move [X22+24], X9
	111 Move [X21+24], X22
	112 Move W8, [X19+136]
	113 Compare W8, 0
	114 JumpIfEqual {130}
	115 Move X0, X19
	116 Move X1, X21
	117 Move X2, X22
	118 Call Clipper.FixupFirstLefts2, X0, X1, X2
	119 Move X8, [X21+24]
	120 Move X25, X24
	121 Move [X22+24], X8
	122 Move W8, [X19+136]
	123 Compare W8, 0
	124 JumpIfEqual {130}
	125 Move X0, X19
	126 Move X1, X21
	127 Move X2, X22
	128 Call Clipper.FixupFirstLefts1, X0, X1, X2
	129 Move X25, X24
	130 Move X25, [X25+72]
	131 Move X8, [X21+32]
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move X25, [X24+72]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move X24, X25
	136 Move X0, [X19+48]
	137 Add W20, W20, 1
	138 Compare X0, 0
	139 JumpIfNotEqual {30}
	140 Call 0x1C17F20
	141 Move X20, [X31+48]
	142 Move X19, [X31+56]
	143 Move X22, [X31+32]
	144 Move X21, [X31+40]
	145 Move X24, [X31+16]
	146 Move X23, [X31+24]
	147 Move X30, [X31+64]
	148 Move X25, [X31+72]
	149 Return 

Method: System.Double Area(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> poly)

Disassembly:
	0x03A0D254 MOVZ W0, 0x1
	0x03A0D258 B 0x3A0D264
	0x03A0D25C CMP W0, 0x0
	0x03A0D260 CSET W0, NE
	0x03A0D264 LDP X20, X19, [X31 + 0x40]
	0x03A0D268 LDP X30, X21, [X31 + 0x30]
	0x03A0D26C ADD X31, X31, 0x50
	0x03A0D270 RET
	0x03A0D274 BL 0x1C16F20
	0x03A0D278 SUB X31, X31, 0x70
	0x03A0D27C STP X30, X23, [X31 + 0x40]
	0x03A0D280 STP X22, X21, [X31 + 0x50]
	0x03A0D284 STP X20, X19, [X31 + 0x60]
	0x03A0D288 ADRP X22, 0x9D4000
	0x03A0D28C LDRB W8, [X22 + 0xF92]
	0x03A0D290 MOV X19, X2
	0x03A0D294 MOV X20, X1
	0x03A0D298 MOV X21, X0
	0x03A0D29C TBNZ X8, 0x0, 0x3A0D2D8
	0x03A0D2A0 ADRP X0, 0x747000
	0x03A0D2A4 LDR X0, [X0 + 0x2E0]
	0x03A0D2A8 BL 0x1C16CF4
	0x03A0D2AC ADRP X0, 0x747000
	0x03A0D2B0 LDR X0, [X0 + 0x2E8]
	0x03A0D2B4 BL 0x1C16CF4
	0x03A0D2B8 ADRP X0, 0x747000
	0x03A0D2BC LDR X0, [X0 + 0x2F0]
	0x03A0D2C0 BL 0x1C16CF4
	0x03A0D2C4 ADRP X0, 0x747000
	0x03A0D2C8 LDR X0, [X0 + 0x300]
	0x03A0D2CC BL 0x1C16CF4
	0x03A0D2D0 MOVZ W8, 0x1
	0x03A0D2D4 STRB W8, [X22 + 0xF92]
	0x03A0D2D8 STP X31, X31, [X31 + 0x20]
	0x03A0D2DC STR X31, [X31 + 0x30]
	0x03A0D2E0 LDR X0, [X21 + 0x30]
	0x03A0D2E4 CBZ X0, 0x3A0D39C
	0x03A0D2E8 ADRP X8, 0x747000
	0x03A0D2EC LDR X8, [X8 + 0x300]
	0x03A0D2F0 ADRP X22, 0x747000
	0x03A0D2F4 ADRP X21, 0x747000
	0x03A0D2F8 LDR X1, [X8]
	0x03A0D2FC LDR X22, [X22 + 0x2E8]
	0x03A0D300 LDR X21, [X21 + 0x2E0]
	0x03A0D304 ADD X8, X31, 0x8
	0x03A0D308 BL 0x301CB58
	0x03A0D30C LDUR V0, [X31 + 0x8]
	0x03A0D310 LDR X8, [X31 + 0x18]
	0x03A0D314 STR V0, [X31 + 0x2]
	0x03A0D318 STR X8, [X31 + 0x30]
	0x03A0D31C LDR X1, [X22]
	0x03A0D320 ADD X0, X31, 0x20
	0x03A0D324 BL 0x2BC4350
	0x03A0D328 TBZ X0, 0x0, 0x3A0D374
	0x03A0D32C LDR X23, [X31 + 0x30]
	0x03A0D330 CBZ X23, 0x3A0D394
	0x03A0D334 LDR X8, [X23 + 0x18]
	0x03A0D338 CBZ X8, 0x3A0D34C
	0x03A0D33C LDR X9, [X8 + 0x20]
	0x03A0D340 CBNZ X9, 0x3A0D34C
	0x03A0D344 LDR X8, [X8 + 0x18]
	0x03A0D348 CBNZ X8, 0x3A0D33C
	0x03A0D34C CMP X8, X20
	0x03A0D350 B.NE 0x3A0D31C
	0x03A0D354 LDR X0, [X23 + 0x20]
	0x03A0D358 CBZ X0, 0x3A0D31C
	0x03A0D35C CBZ X19, 0x3A0D398
	0x03A0D360 LDR X1, [X19 + 0x20]
	0x03A0D364 BL 0x3A0D208
	0x03A0D368 TBZ X0, 0x0, 0x3A0D31C
	0x03A0D36C STR X19, [X23 + 0x18]
	0x03A0D370 B 0x3A0D31C
	0x03A0D374 LDR X1, [X21]
	0x03A0D378 ADD X0, X31, 0x20
	0x03A0D37C BL 0x2BC434C

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+48], D11
	003 Move [X31+56], D10
	004 Move [X31+64], D9
	005 Move [X31+72], D8
	006 Move [X31+80], X30
	007 Move [X31+88], X23
	008 Move [X31+96], X22
	009 Move [X31+104], X21
	010 Move [X31+112], X20
	011 Move [X31+120], X19
	012 Move X20, 0x9D5000
	013 Move W8, [X20+3991]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x748000
	020 Move X0, [X0+512]
	021 Call 0x1C17CF4
	022 Move X0, 0x748000
	023 Move X0, [X0+528]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3991], W8
	027 Compare X19, 0
	028 JumpIfEqual {87}
	029 Move W22, [X19+24]
	030 Move D0, X31
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X23, 0x748000
	033 Move X23, [X23+528]
	034 Move W8, W31
	035 Subtract W20, W22, 1
	036 Move D8, X31
	037 Move X2, [X23]
	038 Move W21, W8
	039 Add X8, X31, 0
	040 Move X0, X19
	041 Move W1, W20
	042 Call List`1<IntPoint>.get_Item, X0, X1
	043 Move X2, [X23]
	044 Move V9, [X31+8]
	045 Add X8, X31, 0
	046 Move X0, X19
	047 Move W1, W21
	048 Call List`1<IntPoint>.get_Item, X0, X1
	049 Move X2, [X23]
	050 Move V10, [X31+8]
	051 Add X8, X31, 0
	052 Move X0, X19
	053 Move W1, W20
	054 Call List`1<IntPoint>.get_Item, X0, X1
	055 Move X2, [X23]
	056 Move V11, [X31+16]
	057 Add X8, X31, 0
	058 Move X0, X19
	059 Move W1, W21
	060 Call List`1<IntPoint>.get_Item, X0, X1
	061 Move V0, [X31+16]
	062 NotImplemented "Instruction SCVTF not yet implemented."
	063 NotImplemented "Instruction SCVTF not yet implemented."
	064 NotImplemented "Instruction SCVTF not yet implemented."
	065 NotImplemented "Instruction SCVTF not yet implemented."
	066 Add D1, D1, D2
	067 Subtract D0, D3, D0
	068 Add W8, W21, 1
	069 Multiply D0, D1, D0
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Add D8, D8, D0
	072 Move W20, W21
	073 Move D0, -0.5
	074 Multiply D0, D8, D0
	075 Move X20, [X31+112]
	076 Move X19, [X31+120]
	077 Move X22, [X31+96]
	078 Move X21, [X31+104]
	079 Move X30, [X31+80]
	080 Move X23, [X31+88]
	081 Move D9, [X31+64]
	082 Move D8, [X31+72]
	083 Move D11, [X31+48]
	084 Move D10, [X31+56]
	085 Add X31, X31, 128
	086 Return V0
	087 Call 0x1C17F20

Method: System.Double Area(UnityEngine.Rendering.Universal.OutRec outRec)

Disassembly:
	0x03A0954C LDP V1, V0, [X19 + 0x10]
	0x03A09550 LDR V2, [X19]
	0x03A09554 STP X21, X21, [X21 + 0x48]
	0x03A09558 STUR V0, [X21 + 0x38]
	0x03A0955C STUR V1, [X21 + 0x28]
	0x03A09560 STUR V2, [X21 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {8}
	004 Move X1, [X1+32]
	005 Move X30, [X31+16]
	006 Call Clipper.Area, X0, X1
	007 Return V0
	008 Call 0x1C17F20

Method: System.Double Area(UnityEngine.Rendering.Universal.OutPt op)

Disassembly:
	0x03A0B8E4 BL 0x301BD20
	0x03A0B8E8 LDR X0, [X19 + 0x58]
	0x03A0B8EC CBZ X0, 0x3A0B94C
	0x03A0B8F0 LDR X2, [X25]
	0x03A0B8F4 MOV W1, W20
	0x03A0B8F8 BL 0x301BCCC
	0x03A0B8FC CBZ X0, 0x3A0B94C
	0x03A0B900 LDR X8, [X19 + 0x58]
	0x03A0B904 CBZ X8, 0x3A0B94C
	0x03A0B908 LDR X2, [X25]
	0x03A0B90C LDR X21, [X0 + 0x10]
	0x03A0B910 MOV X0, X8
	0x03A0B914 MOV W1, W20
	0x03A0B918 BL 0x301BCCC
	0x03A0B91C CBZ X0, 0x3A0B94C
	0x03A0B920 LDR X2, [X0 + 0x18]
	0x03A0B924 MOV X0, X19
	0x03A0B928 MOV X1, X21
	0x03A0B92C BL 0x3A0A080
	0x03A0B930 ADD W20, W20, 0x1
	0x03A0B934 CMP W20, W24
	0x03A0B938 CSET W22, LT
	0x03A0B93C B.EQ 0x3A0B954

ISIL:
	001 Move [X31-16], X30
	002 Move D0, X31
	003 Compare X1, 0
	004 JumpIfEqual {25}
	005 Move X8, X1
	006 Compare X8, 0
	007 JumpIfEqual {27}
	008 Move X9, [X8+80]
	009 Compare X9, 0
	010 JumpIfEqual {27}
	011 Move X10, [X9+32]
	012 Move X9, [X9+40]
	013 Move X11, [X8+32]
	014 Move X12, [X8+40]
	015 Move X8, [X8+72]
	016 Add X10, X11, X10
	017 Subtract X9, X9, X12
	018 NotImplemented "Instruction SCVTF not yet implemented."
	019 NotImplemented "Instruction SCVTF not yet implemented."
	020 Multiply D1, D1, D2
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Add D0, D0, D1
	023 Move D1, 0.5
	024 Multiply D0, D0, D1
	025 Move X30, [X31+16]
	026 Return V0
	027 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> SimplifyPolygon(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> poly, UnityEngine.Rendering.Universal.PolyFillType fillType = 0)

Disassembly:
	0x03A0E7C8 CMP W10, W11
	0x03A0E7CC B.CS 0x3A0E7E4
	0x03A0E7D0 ADD W9, W10, 0x1
	0x03A0E7D4 ADD X8, X8, X10, 0x3, LSL
	0x03A0E7D8 STR W9, [X21 + 0x18]
	0x03A0E7DC STR X26, [X8 + 0x20]
	0x03A0E7E0 B 0x3A0E7FC
	0x03A0E7E4 LDR X8, [X9 + 0x20]
	0x03A0E7E8 MOV X0, X21
	0x03A0E7EC MOV X1, X26
	0x03A0E7F0 LDR X8, [X8 + 0xC0]
	0x03A0E7F4 LDR X2, [X8 + 0x70]
	0x03A0E7F8 BL 0x301BF90
	0x03A0E7FC LDR W8, [X31 + 0x1C]
	0x03A0E800 ADD W25, W25, 0x1
	0x03A0E804 CMP W25, W8
	0x03A0E808 B.NE 0x3A0E65C
	0x03A0E80C B 0x3A0E864
	0x03A0E810 BL 0x1C16F20
	0x03A0E814 B 0x3A0ED1C
	0x03A0E818 BL 0x1C16F20
	0x03A0E81C B 0x3A0ED1C
	0x03A0E820 B 0x3A0E830
	0x03A0E824 B 0x3A0E830
	0x03A0E828 B 0x3A0E830
	0x03A0E82C B 0x3A0E830
	0x03A0E830 CMP W1, 0x1
	0x03A0E834 B.NE 0x3A0ED10
	0x03A0E838 BL 0x3EB1AD0
	0x03A0E83C LDR X20, [X0]
	0x03A0E840 BL 0x3EB1AE0
	0x03A0E844 ADRP X8, 0x746000
	0x03A0E848 LDR X8, [X8 + 0x418]
	0x03A0E84C ADD X0, X31, 0x120
	0x03A0E850 LDR X1, [X8]
	0x03A0E854 BL 0x2BBF164
	0x03A0E858 CBZ X20, 0x3A0E79C
	0x03A0E85C MOV X0, X20
	0x03A0E860 BL 0x1C16F18
	0x03A0E864 ADRP X8, 0x746000
	0x03A0E868 LDR X8, [X8 + 0x3F0]
	0x03A0E86C LDR X0, [X8]
	0x03A0E870 LDR W8, [X31 + 0xC]
	0x03A0E874 AND W19, W8, 0x1
	0x03A0E878 BL 0x1C16F10
	0x03A0E87C ADRP X8, 0x746000
	0x03A0E880 LDR X8, [X8 + 0x410]
	0x03A0E884 MOV X22, X0
	0x03A0E888 LDR X2, [X8]
	0x03A0E88C LDR W8, [X31 + 0x1C]
	0x03A0E890 ADD W19, W8, W19
	0x03A0E894 LDR W8, [X31 + 0x18]
	0x03A0E898 ADD W8, W8, 0x1
	0x03A0E89C MUL W1, W19, W8
	0x03A0E8A0 BL 0x301B830
	0x03A0E8A4 SUB W8, W19, 0x1
	0x03A0E8A8 CMP W8, 0x1

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x9D4000
	009 Move X24, 0x747000
	010 Move X21, 0x747000
	011 Move X22, 0x747000
	012 Move W8, [X23+3992]
	013 Move X24, [X24+1008]
	014 Move X21, [X21+1016]
	015 Move X22, [X22+1024]
	016 Move W19, W1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0x747000
	023 Move X0, [X0+1024]
	024 Call 0x1C17CF4
	025 Move X0, 0x747000
	026 Move X0, [X0+1016]
	027 Call 0x1C17CF4
	028 Move X0, 0x747000
	029 Move X0, [X0+1008]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X23+3992], W8
	033 Move X0, [X24]
	034 Call 0x1C17F10
	035 Move X1, [X21]
	036 Move X21, X0
	037 Call List`1<Object>..ctor, X0
	038 Move X0, [X22]
	039 Call 0x1C17F10
	040 Move W1, W31
	041 Move X22, X0
	042 Call Clipper..ctor, X0, X1
	043 Compare X22, 0
	044 JumpIfEqual {67}
	045 Move W8, 1
	046 Move W3, 1
	047 Move X0, X22
	048 Move X1, X20
	049 Move W2, W31
	050 Move [X22+145], W8
	051 Call ClipperBase.AddPath, X0, X1, X2, X3
	052 Move W1, 1
	053 Move X0, X22
	054 Move X2, X21
	055 Move W3, W19
	056 Move W4, W19
	057 Call Clipper.Execute, X0, X1, X2, X3, X4
	058 Move X0, X21
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move X22, [X31+32]
	062 Move X21, [X31+40]
	063 Move X24, [X31+16]
	064 Move X23, [X31+24]
	065 Move X30, [X31+64]
	066 Return X0
	067 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> SimplifyPolygons(System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> polys, UnityEngine.Rendering.Universal.PolyFillType fillType = 0)

Disassembly:
	0x03A0E8AC STR W8, [X31 + 0x10]
	0x03A0E8B0 B.LT 0x3A0ECDC
	0x03A0E8B4 ADRP X29, 0x746000
	0x03A0E8B8 LDR X29, [X29 + 0x240]
	0x03A0E8BC LDR W8, [X31 + 0x18]
	0x03A0E8C0 MOV W27, W31
	0x03A0E8C4 SUB W19, W31, W8
	0x03A0E8C8 LDR W8, [X31 + 0x18]
	0x03A0E8CC ADD W28, W27, 0x1
	0x03A0E8D0 CMP W8, 0x1
	0x03A0E8D4 B.LT 0x3A0ECCC
	0x03A0E8D8 MOVZ W20, 0x1
	0x03A0E8DC ADRP X8, 0x746000
	0x03A0E8E0 LDR X8, [X8 + 0x168]
	0x03A0E8E4 LDR X0, [X8]
	0x03A0E8E8 BL 0x1C16F10
	0x03A0E8EC ADRP X8, 0x746000
	0x03A0E8F0 LDR X8, [X8 + 0x318]
	0x03A0E8F4 MOVZ W1, 0x4
	0x03A0E8F8 MOV X23, X0
	0x03A0E8FC LDR X2, [X8]
	0x03A0E900 BL 0x2FE3EC4
	0x03A0E904 CBZ X21, 0x3A0ED00
	0x03A0E908 LDR W9, [X31 + 0x1C]
	0x03A0E90C LDR X2, [X29]
	0x03A0E910 MOV X0, X21
	0x03A0E914 SDIV W8, W27, W9
	0x03A0E918 MSUB W24, W8, W9, W27
	0x03A0E91C MOV W1, W24
	0x03A0E920 BL 0x301BCCC
	0x03A0E924 CBZ X0, 0x3A0ED00
	0x03A0E928 ADRP X8, 0x746000
	0x03A0E92C LDR X8, [X8 + 0x210]
	0x03A0E930 SUB W25, W20, 0x1
	0x03A0E934 MOV W1, W25
	0x03A0E938 LDR X2, [X8]
	0x03A0E93C ADD X8, X31, 0xE0
	0x03A0E940 BL 0x2FE4360
	0x03A0E944 LDP V0, V1, [X31 + 0xE0]
	0x03A0E948 LDR V2, [X31 + 0x10]
	0x03A0E94C STP V0, V1, [X31 + 0xB0]
	0x03A0E950 STR V2, [X31 + 0xD]
	0x03A0E954 CBZ X23, 0x3A0ED00
	0x03A0E958 LDP V0, V1, [X31 + 0xB0]
	0x03A0E95C LDR V2, [X31 + 0xD]
	0x03A0E960 ADRP X10, 0x746000
	0x03A0E964 STP V0, V1, [X31 + 0x1A0]
	0x03A0E968 STR V2, [X31 + 0x1C]
	0x03A0E96C LDR W9, [X23 + 0x1C]
	0x03A0E970 LDR X8, [X23 + 0x10]
	0x03A0E974 LDR X10, [X10 + 0x310]
	0x03A0E978 ADD W9, W9, 0x1
	0x03A0E97C LDR X10, [X10]
	0x03A0E980 STR W9, [X23 + 0x1C]
	0x03A0E984 CBZ X8, 0x3A0ED00
	0x03A0E988 LDRSW X9, [X23 + 0x18]
	0x03A0E98C LDR W11, [X8 + 0x18]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x9D4000
	009 Move X24, 0x747000
	010 Move X21, 0x747000
	011 Move X22, 0x747000
	012 Move W8, [X23+3993]
	013 Move X24, [X24+1008]
	014 Move X21, [X21+1016]
	015 Move X22, [X22+1024]
	016 Move W19, W1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0x747000
	023 Move X0, [X0+1024]
	024 Call 0x1C17CF4
	025 Move X0, 0x747000
	026 Move X0, [X0+1016]
	027 Call 0x1C17CF4
	028 Move X0, 0x747000
	029 Move X0, [X0+1008]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X23+3993], W8
	033 Move X0, [X24]
	034 Call 0x1C17F10
	035 Move X1, [X21]
	036 Move X21, X0
	037 Call List`1<Object>..ctor, X0
	038 Move X0, [X22]
	039 Call 0x1C17F10
	040 Move W1, W31
	041 Move X22, X0
	042 Call Clipper..ctor, X0, X1
	043 Compare X22, 0
	044 JumpIfEqual {67}
	045 Move W8, 1
	046 Move W3, 1
	047 Move X0, X22
	048 Move X1, X20
	049 Move W2, W31
	050 Move [X22+145], W8
	051 Call ClipperBase.AddPaths, X0, X1, X2, X3
	052 Move W1, 1
	053 Move X0, X22
	054 Move X2, X21
	055 Move W3, W19
	056 Move W4, W19
	057 Call Clipper.Execute, X0, X1, X2, X3, X4
	058 Move X0, X21
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move X22, [X31+32]
	062 Move X21, [X31+40]
	063 Move X24, [X31+16]
	064 Move X23, [X31+24]
	065 Move X30, [X31+64]
	066 Return X0
	067 Call 0x1C17F20

Method: System.Double DistanceSqrd(UnityEngine.Rendering.Universal.IntPoint pt1, UnityEngine.Rendering.Universal.IntPoint pt2)

Disassembly:
	0x03A0E990 CMP W9, W11
	0x03A0E994 B.CS 0x3A0E9BC
	0x03A0E998 ADD W10, W9, 0x1
	0x03A0E99C STR W10, [X23 + 0x18]
	0x03A0E9A0 LDP V1, V0, [X31 + 0x1B0]
	0x03A0E9A4 LDR V2, [X31 + 0x1A]
	0x03A0E9A8 MOVZ W10, 0x30
	0x03A0E9AC MADD X8, X9, X10, X8

ISIL:
	001 NotImplemented "Instruction LDUR not yet implemented."
	002 NotImplemented "Instruction LDUR not yet implemented."
	003 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	004 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	005 Subtract V0, V0, V1
	006 NotImplemented "Instruction INVALID not yet implemented."
	007 NotImplemented "Instruction FADDP not yet implemented."
	008 Return V0

Method: System.Double DistanceFromLineSqrd(UnityEngine.Rendering.Universal.IntPoint pt, UnityEngine.Rendering.Universal.IntPoint ln1, UnityEngine.Rendering.Universal.IntPoint ln2)

Disassembly:
	0x03A0E9B0 STP V1, V0, [X8 + 0x30]
	0x03A0E9B4 STR V2, [X8 + 0x2]
	0x03A0E9B8 B 0x3A0E9E4
	0x03A0E9BC LDR X8, [X10 + 0x20]
	0x03A0E9C0 LDP V0, V1, [X31 + 0x1A0]
	0x03A0E9C4 LDR V2, [X31 + 0x1C]
	0x03A0E9C8 ADD X1, X31, 0xE0
	0x03A0E9CC LDR X8, [X8 + 0xC0]
	0x03A0E9D0 MOV X0, X23
	0x03A0E9D4 LDR X2, [X8 + 0x70]
	0x03A0E9D8 STP V0, V1, [X31 + 0xE0]
	0x03A0E9DC STR V2, [X31 + 0x10]
	0x03A0E9E0 BL 0x2FE46FC
	0x03A0E9E4 LDR W9, [X31 + 0x1C]
	0x03A0E9E8 LDR X2, [X29]
	0x03A0E9EC MOV X0, X21
	0x03A0E9F0 SDIV W8, W28, W9
	0x03A0E9F4 MSUB W26, W8, W9, W28
	0x03A0E9F8 MOV W1, W26
	0x03A0E9FC BL 0x301BCCC
	0x03A0EA00 CBZ X0, 0x3A0ED00
	0x03A0EA04 ADRP X8, 0x746000
	0x03A0EA08 LDR X8, [X8 + 0x210]
	0x03A0EA0C MOV W1, W25

ISIL:
	001 Move X9, [X2+8]
	002 Move X8, [X2+16]
	003 Move X11, [X1+8]
	004 Move X10, [X1+16]
	005 Move D0, [X0+8]
	006 Move D1, [X0+16]
	007 Subtract X8, X10, X8
	008 Subtract X9, X9, X11
	009 NotImplemented "Instruction SCVTF not yet implemented."
	010 NotImplemented "Instruction SCVTF not yet implemented."
	011 NotImplemented "Instruction SCVTF not yet implemented."
	012 NotImplemented "Instruction SCVTF not yet implemented."
	013 NotImplemented "Instruction SCVTF not yet implemented."
	014 NotImplemented "Instruction SCVTF not yet implemented."
	015 Multiply D2, D4, D2
	016 Multiply D3, D3, D5
	017 Multiply D0, D4, D0
	018 Multiply D1, D5, D1
	019 Add D2, D2, D3
	020 Add D0, D0, D1
	021 Multiply D3, D4, D4
	022 Multiply D4, D5, D5
	023 Subtract D0, D0, D2
	024 Multiply D0, D0, D0
	025 Add D1, D3, D4
	026 NotImplemented "Instruction FDIV not yet implemented."
	027 Return V0

Method: System.Boolean SlopesNearCollinear(UnityEngine.Rendering.Universal.IntPoint pt1, UnityEngine.Rendering.Universal.IntPoint pt2, UnityEngine.Rendering.Universal.IntPoint pt3, System.Double distSqrd)

Disassembly:
	0x03A0EA10 LDR X2, [X8]
	0x03A0EA14 ADD X8, X31, 0xE0
	0x03A0EA18 BL 0x2FE4360
	0x03A0EA1C LDP V1, V0, [X31 + 0xF0]
	0x03A0EA20 LDR V2, [X31 + 0xE]
	0x03A0EA24 ADRP X10, 0x746000
	0x03A0EA28 STP V1, V0, [X31 + 0x90]
	0x03A0EA2C STR V2, [X31 + 0x8]
	0x03A0EA30 STP V2, V1, [X31 + 0x1A0]
	0x03A0EA34 STR V0, [X31 + 0x1C]
	0x03A0EA38 LDR W9, [X23 + 0x1C]
	0x03A0EA3C LDR X8, [X23 + 0x10]
	0x03A0EA40 LDR X10, [X10 + 0x310]
	0x03A0EA44 ADD W9, W9, 0x1
	0x03A0EA48 LDR X10, [X10]
	0x03A0EA4C STR W9, [X23 + 0x1C]
	0x03A0EA50 CBZ X8, 0x3A0ED00
	0x03A0EA54 LDRSW X9, [X23 + 0x18]
	0x03A0EA58 LDR W11, [X8 + 0x18]
	0x03A0EA5C CMP W9, W11
	0x03A0EA60 B.CS 0x3A0EA88
	0x03A0EA64 ADD W10, W9, 0x1
	0x03A0EA68 STR W10, [X23 + 0x18]
	0x03A0EA6C LDP V1, V0, [X31 + 0x1B0]
	0x03A0EA70 LDR V2, [X31 + 0x1A]
	0x03A0EA74 MOVZ W10, 0x30
	0x03A0EA78 MADD X8, X9, X10, X8
	0x03A0EA7C STP V1, V0, [X8 + 0x30]
	0x03A0EA80 STR V2, [X8 + 0x2]
	0x03A0EA84 B 0x3A0EAB0
	0x03A0EA88 LDR X8, [X10 + 0x20]
	0x03A0EA8C LDP V0, V1, [X31 + 0x1A0]
	0x03A0EA90 LDR V2, [X31 + 0x1C]
	0x03A0EA94 ADD X1, X31, 0xE0
	0x03A0EA98 LDR X8, [X8 + 0xC0]
	0x03A0EA9C MOV X0, X23
	0x03A0EAA0 LDR X2, [X8 + 0x70]
	0x03A0EAA4 STP V0, V1, [X31 + 0xE0]
	0x03A0EAA8 STR V2, [X31 + 0x10]
	0x03A0EAAC BL 0x2FE46FC
	0x03A0EAB0 LDR X2, [X29]
	0x03A0EAB4 MOV X0, X21
	0x03A0EAB8 MOV W1, W26
	0x03A0EABC BL 0x301BCCC
	0x03A0EAC0 CBZ X0, 0x3A0ED00
	0x03A0EAC4 ADRP X8, 0x746000
	0x03A0EAC8 LDR X8, [X8 + 0x210]
	0x03A0EACC ADDS W31, W19, W20
	0x03A0EAD0 CSEL W25, W31, W20, EQ
	0x03A0EAD4 MOV W1, W25
	0x03A0EAD8 LDR X2, [X8]
	0x03A0EADC ADD X8, X31, 0xE0
	0x03A0EAE0 BL 0x2FE4360
	0x03A0EAE4 LDP V1, V0, [X31 + 0xF0]
	0x03A0EAE8 LDR V2, [X31 + 0xE]
	0x03A0EAEC ADRP X10, 0x746000
	0x03A0EAF0 STP V1, V0, [X31 + 0x60]
	0x03A0EAF4 STR V2, [X31 + 0x5]
	0x03A0EAF8 STP V2, V1, [X31 + 0x1A0]
	0x03A0EAFC STR V0, [X31 + 0x1C]
	0x03A0EB00 LDR W9, [X23 + 0x1C]
	0x03A0EB04 LDR X8, [X23 + 0x10]
	0x03A0EB08 LDR X10, [X10 + 0x310]
	0x03A0EB0C ADD W9, W9, 0x1
	0x03A0EB10 LDR X10, [X10]
	0x03A0EB14 STR W9, [X23 + 0x1C]
	0x03A0EB18 CBZ X8, 0x3A0ED00
	0x03A0EB1C LDRSW X9, [X23 + 0x18]
	0x03A0EB20 LDR W11, [X8 + 0x18]
	0x03A0EB24 CMP W9, W11
	0x03A0EB28 B.CS 0x3A0EB50
	0x03A0EB2C ADD W10, W9, 0x1
	0x03A0EB30 STR W10, [X23 + 0x18]
	0x03A0EB34 LDP V1, V0, [X31 + 0x1B0]
	0x03A0EB38 LDR V2, [X31 + 0x1A]
	0x03A0EB3C MOVZ W10, 0x30
	0x03A0EB40 MADD X8, X9, X10, X8
	0x03A0EB44 STP V1, V0, [X8 + 0x30]
	0x03A0EB48 STR V2, [X8 + 0x2]
	0x03A0EB4C B 0x3A0EB78
	0x03A0EB50 LDR X8, [X10 + 0x20]
	0x03A0EB54 LDP V0, V1, [X31 + 0x1A0]
	0x03A0EB58 LDR V2, [X31 + 0x1C]
	0x03A0EB5C ADD X1, X31, 0xE0
	0x03A0EB60 LDR X8, [X8 + 0xC0]
	0x03A0EB64 MOV X0, X23
	0x03A0EB68 LDR X2, [X8 + 0x70]
	0x03A0EB6C STP V0, V1, [X31 + 0xE0]
	0x03A0EB70 STR V2, [X31 + 0x10]
	0x03A0EB74 BL 0x2FE46FC
	0x03A0EB78 LDR X2, [X29]
	0x03A0EB7C MOV X0, X21
	0x03A0EB80 MOV W1, W24
	0x03A0EB84 BL 0x301BCCC
	0x03A0EB88 CBZ X0, 0x3A0ED00
	0x03A0EB8C ADRP X8, 0x746000
	0x03A0EB90 LDR X8, [X8 + 0x210]
	0x03A0EB94 MOV W1, W25
	0x03A0EB98 LDR X2, [X8]
	0x03A0EB9C ADD X8, X31, 0xE0
	0x03A0EBA0 BL 0x2FE4360
	0x03A0EBA4 LDP V1, V0, [X31 + 0xF0]
	0x03A0EBA8 LDR V2, [X31 + 0xE]
	0x03A0EBAC ADRP X10, 0x746000
	0x03A0EBB0 STP V1, V0, [X31 + 0x30]
	0x03A0EBB4 STR V2, [X31 + 0x2]
	0x03A0EBB8 STP V2, V1, [X31 + 0x1A0]
	0x03A0EBBC STR V0, [X31 + 0x1C]
	0x03A0EBC0 LDR W9, [X23 + 0x1C]
	0x03A0EBC4 LDR X8, [X23 + 0x10]
	0x03A0EBC8 LDR X10, [X10 + 0x310]
	0x03A0EBCC ADD W9, W9, 0x1
	0x03A0EBD0 LDR X10, [X10]
	0x03A0EBD4 STR W9, [X23 + 0x1C]
	0x03A0EBD8 CBZ X8, 0x3A0ED00
	0x03A0EBDC LDRSW X9, [X23 + 0x18]
	0x03A0EBE0 LDR W11, [X8 + 0x18]
	0x03A0EBE4 CMP W9, W11
	0x03A0EBE8 B.CS 0x3A0EC10
	0x03A0EBEC ADD W10, W9, 0x1
	0x03A0EBF0 STR W10, [X23 + 0x18]
	0x03A0EBF4 LDP V1, V0, [X31 + 0x1B0]
	0x03A0EBF8 LDR V2, [X31 + 0x1A]
	0x03A0EBFC MOVZ W10, 0x30
	0x03A0EC00 MADD X8, X9, X10, X8
	0x03A0EC04 STP V1, V0, [X8 + 0x30]
	0x03A0EC08 STR V2, [X8 + 0x2]
	0x03A0EC0C B 0x3A0EC38
	0x03A0EC10 LDR X8, [X10 + 0x20]
	0x03A0EC14 LDP V0, V1, [X31 + 0x1A0]
	0x03A0EC18 LDR V2, [X31 + 0x1C]
	0x03A0EC1C ADD X1, X31, 0xE0
	0x03A0EC20 LDR X8, [X8 + 0xC0]
	0x03A0EC24 MOV X0, X23
	0x03A0EC28 LDR X2, [X8 + 0x70]
	0x03A0EC2C STP V0, V1, [X31 + 0xE0]
	0x03A0EC30 STR V2, [X31 + 0x10]
	0x03A0EC34 BL 0x2FE46FC
	0x03A0EC38 MOV X0, X23
	0x03A0EC3C BL 0x3A0C254
	0x03A0EC40 FCMP D0, 0x0
	0x03A0EC44 B.GE 0x3A0EC5C
	0x03A0EC48 ADRP X8, 0x746000
	0x03A0EC4C LDR X8, [X8 + 0x3E8]
	0x03A0EC50 MOV X0, X23
	0x03A0EC54 LDR X1, [X8]
	0x03A0EC58 BL 0x2FE67C8
	0x03A0EC5C CBZ X22, 0x3A0ED00
	0x03A0EC60 ADRP X9, 0x746000
	0x03A0EC64 LDR W10, [X22 + 0x1C]
	0x03A0EC68 LDR X8, [X22 + 0x10]
	0x03A0EC6C LDR X9, [X9 + 0x308]
	0x03A0EC70 ADD W10, W10, 0x1
	0x03A0EC74 LDR X9, [X9]
	0x03A0EC78 STR W10, [X22 + 0x1C]
	0x03A0EC7C CBZ X8, 0x3A0ED00
	0x03A0EC80 LDRSW X10, [X22 + 0x18]
	0x03A0EC84 LDR W11, [X8 + 0x18]
	0x03A0EC88 CMP W10, W11
	0x03A0EC8C B.CS 0x3A0ECA4
	0x03A0EC90 ADD W9, W10, 0x1
	0x03A0EC94 ADD X8, X8, X10, 0x3, LSL
	0x03A0EC98 STR W9, [X22 + 0x18]
	0x03A0EC9C STR X23, [X8 + 0x20]
	0x03A0ECA0 B 0x3A0ECBC
	0x03A0ECA4 LDR X8, [X9 + 0x20]
	0x03A0ECA8 MOV X0, X22
	0x03A0ECAC MOV X1, X23
	0x03A0ECB0 LDR X8, [X8 + 0xC0]
	0x03A0ECB4 LDR X2, [X8 + 0x70]
	0x03A0ECB8 BL 0x301BF90
	0x03A0ECBC ADD W20, W20, 0x1
	0x03A0ECC0 ADD W8, W19, W20
	0x03A0ECC4 CMP W8, 0x1
	0x03A0ECC8 B.NE 0x3A0E8DC
	0x03A0ECCC LDR W8, [X31 + 0x10]
	0x03A0ECD0 MOV W27, W28
	0x03A0ECD4 CMP W28, W8

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x9D4000
	009 Move X22, 0x6E6000
	010 Move W8, [X23+3994]
	011 Move X22, [X22+1448]
	012 Move V8, V0
	013 Move X19, X2
	014 Move X20, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x6E6000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+3994], W8
	025 Move X0, [X22]
	026 Move X22, [X21+8]
	027 Move X23, [X20+8]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X8, [X21+16]
	033 Move X9, [X20+16]
	034 Subtract X10, X22, X23
	035 NotImplemented "Instruction CSNEG not yet implemented."
	036 Subtract X10, X8, X9
	037 NotImplemented "Instruction CSNEG not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X11, [X21+8]
	040 Move X12, [X20+8]
	041 Move X13, [X19+8]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSET not yet implemented."
	044 Subtract X14, X13, X11
	045 NotImplemented "Instruction CSET not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X10, [X19+16]
	048 Subtract X13, X13, X12
	049 NotImplemented "Instruction SCVTF not yet implemented."
	050 NotImplemented "Instruction SCVTF not yet implemented."
	051 Subtract X9, X9, X10
	052 NotImplemented "Instruction SCVTF not yet implemented."
	053 NotImplemented "Instruction SCVTF not yet implemented."
	054 Multiply D1, D1, D3
	055 Multiply D0, D0, D4
	056 NotImplemented "Instruction SCVTF not yet implemented."
	057 Add D0, D1, D0
	058 NotImplemented "Instruction SCVTF not yet implemented."
	059 Multiply D5, D1, D3
	060 Multiply D2, D2, D4
	061 Add D2, D5, D2
	062 Subtract D0, D2, D0
	063 Multiply D1, D4, D4
	064 Multiply D2, D0, D0
	065 Multiply D0, D3, D3
	066 Move X11, [X19+16]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction CSET not yet implemented."
	069 Subtract X12, X8, X11
	070 NotImplemented "Instruction CSET not yet implemented."
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X10, [X20+8]
	073 Move X12, [X19+8]
	074 Move V1, [X21+8]
	075 Subtract X11, X9, X11
	076 NotImplemented "Instruction SCVTF not yet implemented."
	077 Subtract X9, X12, X10
	078 NotImplemented "Instruction SCVTF not yet implemented."
	079 NotImplemented "Instruction SCVTF not yet implemented."
	080 NotImplemented "Instruction SCVTF not yet implemented."
	081 Multiply D3, D2, D3
	082 Multiply D0, D0, D4
	083 Add D3, D3, D0
	084 NotImplemented "Instruction SCVTF not yet implemented."
	085 NotImplemented "Instruction SCVTF not yet implemented."
	086 Multiply D1, D2, D0
	087 Multiply D0, D2, D2
	088 Multiply D2, D5, D4
	089 Add D1, D1, D2
	090 Subtract D1, D1, D3
	091 Subtract X16, X12, X11
	092 Move X15, [X19+16]
	093 NotImplemented "Instruction CSET not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 NotImplemented "Instruction CSET not yet implemented."
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Subtract X10, X8, X15
	098 NotImplemented "Instruction SCVTF not yet implemented."
	099 NotImplemented "Instruction SCVTF not yet implemented."
	100 NotImplemented "Instruction SCVTF not yet implemented."
	101 NotImplemented "Instruction SCVTF not yet implemented."
	102 Multiply D2, D2, D0
	103 Multiply D1, D1, D4
	104 NotImplemented "Instruction SCVTF not yet implemented."
	105 Add D2, D2, D1
	106 NotImplemented "Instruction SCVTF not yet implemented."
	107 Multiply D5, D1, D0
	108 Multiply D3, D3, D4
	109 Add D3, D5, D3
	110 Subtract D2, D3, D2
	111 Multiply D1, D4, D4
	112 Multiply D2, D2, D2
	113 Multiply D0, D0, D0
	114 NotImplemented "Instruction CMP not yet implemented."
	115 NotImplemented "Instruction CSET not yet implemented."
	116 NotImplemented "Instruction CMP not yet implemented."
	117 NotImplemented "Instruction CSET not yet implemented."
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move X10, [X21+8]
	120 Move X11, [X19+8]
	121 NotImplemented "Instruction SCVTF not yet implemented."
	122 Move V2, [X20+8]
	123 NotImplemented "Instruction SCVTF not yet implemented."
	124 Subtract X8, X11, X10
	125 NotImplemented "Instruction SCVTF not yet implemented."
	126 NotImplemented "Instruction SCVTF not yet implemented."
	127 Multiply D3, D0, D3
	128 Multiply D1, D1, D4
	129 Add D1, D3, D1
	130 NotImplemented "Instruction SCVTF not yet implemented."
	131 NotImplemented "Instruction SCVTF not yet implemented."
	132 NotImplemented "Instruction SCVTF not yet implemented."
	133 NotImplemented "Instruction SCVTF not yet implemented."
	134 NotImplemented "Instruction SCVTF not yet implemented."
	135 Multiply D2, D0, D2
	136 Multiply D3, D3, D1
	137 NotImplemented "Instruction SCVTF not yet implemented."
	138 Add D2, D2, D3
	139 NotImplemented "Instruction SCVTF not yet implemented."
	140 Multiply D4, D0, D4
	141 Multiply D3, D1, D3
	142 Add D3, D4, D3
	143 Subtract D2, D3, D2
	144 Multiply D0, D0, D0
	145 Multiply D2, D2, D2
	146 Multiply D1, D1, D1
	147 Move X9, [X21+8]
	148 Move X12, [X20+8]
	149 NotImplemented "Instruction SCVTF not yet implemented."
	150 Move V2, [X19+8]
	151 NotImplemented "Instruction SCVTF not yet implemented."
	152 Subtract X8, X12, X9
	153 NotImplemented "Instruction SCVTF not yet implemented."
	154 NotImplemented "Instruction SCVTF not yet implemented."
	155 Multiply D3, D0, D3
	156 Multiply D1, D1, D4
	157 Add D1, D3, D1
	158 NotImplemented "Instruction SCVTF not yet implemented."
	159 NotImplemented "Instruction SCVTF not yet implemented."
	160 Multiply D2, D0, D2
	161 Multiply D3, D3, D4
	162 Add D2, D2, D3
	163 Multiply D0, D0, D0
	164 Subtract D1, D2, D1
	165 Multiply D2, D1, D1
	166 Multiply D1, D4, D4
	167 Add D0, D0, D1
	168 Move X20, [X31+48]
	169 Move X19, [X31+56]
	170 Move X22, [X31+32]
	171 Move X21, [X31+40]
	172 Move X30, [X31+16]
	173 Move X23, [X31+24]
	174 NotImplemented "Instruction FDIV not yet implemented."
	175 NotImplemented "Instruction FCMP not yet implemented."
	176 NotImplemented "Instruction CSET not yet implemented."
	177 Move V8, [X31+64]
	178 Return X0

Method: System.Boolean PointsAreClose(UnityEngine.Rendering.Universal.IntPoint pt1, UnityEngine.Rendering.Universal.IntPoint pt2, System.Double distSqrd)

Disassembly:
	0x03A0ECD8 B.NE 0x3A0E8C8
	0x03A0ECDC MOV X0, X22
	0x03A0ECE0 ADD X31, X31, 0x1D0
	0x03A0ECE4 LDP X20, X19, [X31 + 0x50]
	0x03A0ECE8 LDP X22, X21, [X31 + 0x40]
	0x03A0ECEC LDP X24, X23, [X31 + 0x30]
	0x03A0ECF0 LDP X26, X25, [X31 + 0x20]
	0x03A0ECF4 LDP X28, X27, [X31 + 0x10]
	0x03A0ECF8 LDP X29, X30, [X31], #0x60
	0x03A0ECFC RET

ISIL:
	001 NotImplemented "Instruction LDUR not yet implemented."
	002 NotImplemented "Instruction LDUR not yet implemented."
	003 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	004 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	005 Subtract V1, V1, V2
	006 NotImplemented "Instruction INVALID not yet implemented."
	007 NotImplemented "Instruction FADDP not yet implemented."
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 NotImplemented "Instruction CSET not yet implemented."
	010 Return X0

Method: UnityEngine.Rendering.Universal.OutPt ExcludeOp(UnityEngine.Rendering.Universal.OutPt op)

Disassembly:
	0x03A0ED00 BL 0x1C16F20
	0x03A0ED04 MOV X19, X0
	0x03A0ED08 MOV X20, X31
	0x03A0ED0C B 0x3A0ED44
	0x03A0ED10 MOV X19, X0
	0x03A0ED14 MOV X20, X31
	0x03A0ED18 B 0x3A0ED20
	0x03A0ED1C MOV X19, X0
	0x03A0ED20 ADRP X8, 0x746000
	0x03A0ED24 LDR X8, [X8 + 0x418]
	0x03A0ED28 LDR X1, [X8]
	0x03A0ED2C ADD X0, X31, 0x120
	0x03A0ED30 BL 0x2BBF164
	0x03A0ED34 CBZ X20, 0x3A0ED5C

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {17}
	004 Move X8, X0
	005 Move X0, [X0+80]
	006 Compare X0, 0
	007 JumpIfEqual {17}
	008 Move X9, [X8+72]
	009 Move [X0+72], X9
	010 Move X8, [X8+72]
	011 Compare X8, 0
	012 JumpIfEqual {17}
	013 Move [X8+80], X0
	014 Move [X0+16], W31
	015 Move X30, [X31+16]
	016 Return X0
	017 Call 0x1C17F20

Method: System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> CleanPolygon(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> path, System.Double distance = 1.415)

Disassembly:
	0x03A0ED38 MOV X0, X20
	0x03A0ED3C BL 0x1C16F18
	0x03A0ED40 MOV X19, X0
	0x03A0ED44 ADRP X8, 0x746000
	0x03A0ED48 LDR X8, [X8 + 0x418]
	0x03A0ED4C LDR X1, [X8]
	0x03A0ED50 ADD X0, X31, 0x120
	0x03A0ED54 BL 0x2BBF164
	0x03A0ED58 CBNZ X20, 0x3A0ED64
	0x03A0ED5C MOV X0, X19
	0x03A0ED60 BL 0x1D2C690
	0x03A0ED64 MOV X0, X20
	0x03A0ED68 BL 0x1C16F18
	0x03A0ED6C BL 0x1990590
	0x03A0ED70 STP X30, X23, [X31 - 0x30]!
	0x03A0ED74 STP X22, X21, [X31 + 0x10]
	0x03A0ED78 STP X20, X19, [X31 + 0x20]
	0x03A0ED7C ADRP X23, 0x9D3000
	0x03A0ED80 ADRP X22, 0x746000
	0x03A0ED84 LDRB W8, [X23 + 0xF9E]
	0x03A0ED88 LDR X22, [X22 + 0x400]
	0x03A0ED8C MOV W21, W2
	0x03A0ED90 MOV X19, X1
	0x03A0ED94 MOV X20, X0
	0x03A0ED98 TBNZ X8, 0x0, 0x3A0EDB0
	0x03A0ED9C ADRP X0, 0x746000
	0x03A0EDA0 LDR X0, [X0 + 0x400]
	0x03A0EDA4 BL 0x1C16CF4
	0x03A0EDA8 MOVZ W8, 0x1
	0x03A0EDAC STRB W8, [X23 + 0xF9E]
	0x03A0EDB0 AND W3, W21, 0x1
	0x03A0EDB4 MOVZ W2, 0x1
	0x03A0EDB8 MOV X0, X20
	0x03A0EDBC MOV X1, X19
	0x03A0EDC0 BL 0x3A0E2C8
	0x03A0EDC4 LDR X8, [X22]
	0x03A0EDC8 MOV X19, X0
	0x03A0EDCC MOV X0, X8
	0x03A0EDD0 BL 0x1C16F10
	0x03A0EDD4 MOV W1, W31
	0x03A0EDD8 MOV X20, X0
	0x03A0EDDC BL 0x3A0698C
	0x03A0EDE0 CBZ X20, 0x3A0EE24
	0x03A0EDE4 MOVZ W3, 0x1
	0x03A0EDE8 MOV X0, X20
	0x03A0EDEC MOV X1, X19
	0x03A0EDF0 MOV W2, W31
	0x03A0EDF4 BL 0x3A06024
	0x03A0EDF8 MOVZ W1, 0x1
	0x03A0EDFC MOVZ W3, 0x1
	0x03A0EE00 MOVZ W4, 0x1
	0x03A0EE04 MOV X0, X20
	0x03A0EE08 MOV X2, X19
	0x03A0EE0C BL 0x3A06C28
	0x03A0EE10 MOV X0, X19
	0x03A0EE14 LDP X20, X19, [X31 + 0x20]
	0x03A0EE18 LDP X22, X21, [X31 + 0x10]
	0x03A0EE1C LDP X30, X23, [X31], #0x30
	0x03A0EE20 RET
	0x03A0EE24 BL 0x1C16F20
	0x03A0EE28 SUB X31, X31, 0xB0
	0x03A0EE2C STP X29, X30, [X31 + 0x50]
	0x03A0EE30 STP X28, X27, [X31 + 0x60]
	0x03A0EE34 STP X26, X25, [X31 + 0x70]
	0x03A0EE38 STP X24, X23, [X31 + 0x80]
	0x03A0EE3C STP X22, X21, [X31 + 0x90]
	0x03A0EE40 STP X20, X19, [X31 + 0xA0]
	0x03A0EE44 ADRP X21, 0x9D3000
	0x03A0EE48 LDRB W8, [X21 + 0xF9F]
	0x03A0EE4C MOV X19, X1
	0x03A0EE50 MOV X20, X0
	0x03A0EE54 TBNZ X8, 0x0, 0x3A0EE9C
	0x03A0EE58 ADRP X0, 0x746000
	0x03A0EE5C LDR X0, [X0 + 0x310]
	0x03A0EE60 BL 0x1C16CF4
	0x03A0EE64 ADRP X0, 0x746000
	0x03A0EE68 LDR X0, [X0 + 0x318]
	0x03A0EE6C BL 0x1C16CF4
	0x03A0EE70 ADRP X0, 0x746000
	0x03A0EE74 LDR X0, [X0 + 0x200]
	0x03A0EE78 BL 0x1C16CF4
	0x03A0EE7C ADRP X0, 0x746000
	0x03A0EE80 LDR X0, [X0 + 0x210]
	0x03A0EE84 BL 0x1C16CF4
	0x03A0EE88 ADRP X0, 0x746000
	0x03A0EE8C LDR X0, [X0 + 0x168]
	0x03A0EE90 BL 0x1C16CF4
	0x03A0EE94 MOVZ W8, 0x1
	0x03A0EE98 STRB W8, [X21 + 0xF9F]
	0x03A0EE9C CBZ X20, 0x3A0EFF0
	0x03A0EEA0 ADRP X8, 0x746000
	0x03A0EEA4 LDR X8, [X8 + 0x168]
	0x03A0EEA8 ADRP X21, 0x746000
	0x03A0EEAC LDR W22, [X20 + 0x18]
	0x03A0EEB0 LDR X0, [X8]
	0x03A0EEB4 LDR X21, [X21 + 0x318]
	0x03A0EEB8 BL 0x1C16F10
	0x03A0EEBC LDR X2, [X21]
	0x03A0EEC0 MOV W1, W22
	0x03A0EEC4 MOV X21, X0
	0x03A0EEC8 BL 0x2FE3EC4
	0x03A0EECC LDR W8, [X20 + 0x18]
	0x03A0EED0 CMP W8, 0x1
	0x03A0EED4 B.LT 0x3A0EFCC
	0x03A0EED8 ADRP X23, 0x746000
	0x03A0EEDC ADRP X24, 0x746000
	0x03A0EEE0 LDR X23, [X23 + 0x210]
	0x03A0EEE4 LDR X24, [X24 + 0x310]
	0x03A0EEE8 ADD X8, X31, 0x20
	0x03A0EEEC MOV W22, W31
	0x03A0EEF0 MOVZ W25, 0x30
	0x03A0EEF4 ADD X26, X8, 0x20
	0x03A0EEF8 MOVN X27, 0x0
	0x03A0EEFC LDR X2, [X23]
	0x03A0EF00 ADD X8, X31, 0x20
	0x03A0EF04 MOV X0, X20
	0x03A0EF08 MOV W1, W22
	0x03A0EF0C BL 0x2FE4360
	0x03A0EF10 LDR X2, [X23]
	0x03A0EF14 LDR X28, [X31 + 0x28]
	0x03A0EF18 LDR X29, [X19 + 0x8]
	0x03A0EF1C ADD X8, X31, 0x20
	0x03A0EF20 MOV X0, X20
	0x03A0EF24 MOV W1, W22
	0x03A0EF28 BL 0x2FE4360
	0x03A0EF2C LDR X8, [X31 + 0x30]
	0x03A0EF30 LDR X9, [X19 + 0x10]
	0x03A0EF34 STP X31, X31, [X31]
	0x03A0EF38 CBZ X21, 0x3A0EFF0
	0x03A0EF3C LDR V0, [X31]
	0x03A0EF40 LDR X12, [X24]
	0x03A0EF44 STR V0, [X31 + 0x1]
	0x03A0EF48 LDR W10, [X21 + 0x1C]
	0x03A0EF4C LDR X11, [X21 + 0x10]
	0x03A0EF50 ADD W10, W10, 0x1
	0x03A0EF54 STR W10, [X21 + 0x1C]
	0x03A0EF58 CBZ X11, 0x3A0EFF0
	0x03A0EF5C LDRSW X13, [X21 + 0x18]
	0x03A0EF60 LDR W14, [X11 + 0x18]
	0x03A0EF64 ADD X10, X29, X28
	0x03A0EF68 ADD X8, X9, X8
	0x03A0EF6C CMP W13, W14
	0x03A0EF70 B.CS 0x3A0EF94
	0x03A0EF74 ADD W9, W13, 0x1
	0x03A0EF78 MADD X11, X13, X25, X11
	0x03A0EF7C STR W9, [X21 + 0x18]
	0x03A0EF80 STP X27, X10, [X11 + 0x20]
	0x03A0EF84 STP X8, X31, [X11 + 0x30]
	0x03A0EF88 LDR V0, [X31 + 0x1]
	0x03A0EF8C STR V0, [X11 + 0x4]
	0x03A0EF90 B 0x3A0EFBC
	0x03A0EF94 LDR X9, [X12 + 0x20]
	0x03A0EF98 LDR V0, [X31 + 0x1]
	0x03A0EF9C ADD X1, X31, 0x20
	0x03A0EFA0 MOV X0, X21
	0x03A0EFA4 LDR X9, [X9 + 0xC0]
	0x03A0EFA8 LDR X2, [X9 + 0x70]
	0x03A0EFAC STP X27, X10, [X31 + 0x20]
	0x03A0EFB0 STP X8, X31, [X31 + 0x30]
	0x03A0EFB4 STR V0, [X26]
	0x03A0EFB8 BL 0x2FE46FC
	0x03A0EFBC LDR W8, [X20 + 0x18]
	0x03A0EFC0 ADD W22, W22, 0x1
	0x03A0EFC4 CMP W22, W8
	0x03A0EFC8 B.LT 0x3A0EEFC
	0x03A0EFCC MOV X0, X21
	0x03A0EFD0 LDP X20, X19, [X31 + 0xA0]
	0x03A0EFD4 LDP X22, X21, [X31 + 0x90]
	0x03A0EFD8 LDP X24, X23, [X31 + 0x80]
	0x03A0EFDC LDP X26, X25, [X31 + 0x70]
	0x03A0EFE0 LDP X28, X27, [X31 + 0x60]
	0x03A0EFE4 LDP X29, X30, [X31 + 0x50]
	0x03A0EFE8 ADD X31, X31, 0xB0
	0x03A0EFEC RET
	0x03A0EFF0 BL 0x1C16F20
	0x03A0EFF4 SUB X31, X31, 0xB0
	0x03A0EFF8 STP X30, X27, [X31 + 0x60]
	0x03A0EFFC STP X26, X25, [X31 + 0x70]
	0x03A0F000 STP X24, X23, [X31 + 0x80]
	0x03A0F004 STP X22, X21, [X31 + 0x90]
	0x03A0F008 STP X20, X19, [X31 + 0xA0]
	0x03A0F00C ADRP X24, 0x9D2000
	0x03A0F010 ADRP X25, 0x745000
	0x03A0F014 ADRP X22, 0x745000
	0x03A0F018 ADRP X23, 0x745000
	0x03A0F01C LDRB W8, [X24 + 0xFA0]
	0x03A0F020 LDR X25, [X25 + 0x3F0]
	0x03A0F024 LDR X22, [X22 + 0x3F8]
	0x03A0F028 LDR X23, [X23 + 0x400]
	0x03A0F02C MOV W19, W2
	0x03A0F030 MOV X20, X1
	0x03A0F034 MOV X21, X0
	0x03A0F038 TBNZ X8, 0x0, 0x3A0F08C
	0x03A0F03C ADRP X0, 0x745000
	0x03A0F040 LDR X0, [X0 + 0x400]
	0x03A0F044 BL 0x1C16CF4
	0x03A0F048 ADRP X0, 0x745000
	0x03A0F04C LDR X0, [X0 + 0x3F8]
	0x03A0F050 BL 0x1C16CF4
	0x03A0F054 ADRP X0, 0x745000
	0x03A0F058 LDR X0, [X0 + 0x238]
	0x03A0F05C BL 0x1C16CF4
	0x03A0F060 ADRP X0, 0x745000
	0x03A0F064 LDR X0, [X0 + 0x240]
	0x03A0F068 BL 0x1C16CF4
	0x03A0F06C ADRP X0, 0x745000
	0x03A0F070 LDR X0, [X0 + 0x210]
	0x03A0F074 BL 0x1C16CF4
	0x03A0F078 ADRP X0, 0x745000
	0x03A0F07C LDR X0, [X0 + 0x3F0]
	0x03A0F080 BL 0x1C16CF4
	0x03A0F084 MOVZ W8, 0x1
	0x03A0F088 STRB W8, [X24 + 0xFA0]
	0x03A0F08C LDR X0, [X25]
	0x03A0F090 BL 0x1C16F10
	0x03A0F094 LDR X1, [X22]
	0x03A0F098 MOV X22, X0
	0x03A0F09C BL 0x301B7C4
	0x03A0F0A0 LDR X0, [X23]
	0x03A0F0A4 BL 0x1C16F10
	0x03A0F0A8 MOV W1, W31
	0x03A0F0AC MOV X23, X0
	0x03A0F0B0 BL 0x3A0698C
	0x03A0F0B4 CBZ X20, 0x3A0F1C0
	0x03A0F0B8 LDR W8, [X20 + 0x18]
	0x03A0F0BC CMP W8, 0x1
	0x03A0F0C0 B.LT 0x3A0F184
	0x03A0F0C4 ADRP X26, 0x745000
	0x03A0F0C8 ADRP X27, 0x745000
	0x03A0F0CC LDR X26, [X26 + 0x240]
	0x03A0F0D0 LDR X27, [X27 + 0x210]
	0x03A0F0D4 MOV W24, W31
	0x03A0F0D8 LDR X2, [X26]
	0x03A0F0DC MOV X0, X20
	0x03A0F0E0 MOV W1, W24
	0x03A0F0E4 BL 0x301BCCC
	0x03A0F0E8 MOV X1, X0
	0x03A0F0EC AND W3, W19, 0x1
	0x03A0F0F0 MOVZ W2, 0x1
	0x03A0F0F4 MOV X0, X21
	0x03A0F0F8 BL 0x3A0E2C8
	0x03A0F0FC CBZ X23, 0x3A0F1C0
	0x03A0F100 MOV X1, X0
	0x03A0F104 MOVZ W3, 0x1
	0x03A0F108 MOV X0, X23
	0x03A0F10C MOV W2, W31
	0x03A0F110 BL 0x3A06024
	0x03A0F114 TBZ X19, 0x0, 0x3A0F174
	0x03A0F118 LDR X2, [X26]
	0x03A0F11C MOV X0, X20
	0x03A0F120 MOV W1, W24
	0x03A0F124 BL 0x301BCCC
	0x03A0F128 CBZ X21, 0x3A0F1C0
	0x03A0F12C LDR X2, [X27]
	0x03A0F130 MOV X25, X0
	0x03A0F134 ADD X8, X31, 0x30
	0x03A0F138 MOV X0, X21
	0x03A0F13C MOV W1, W31
	0x03A0F140 BL 0x2FE4360
	0x03A0F144 LDP V0, V1, [X31 + 0x30]
	0x03A0F148 LDR V2, [X31 + 0x5]
	0x03A0F14C ADD X1, X31, 0x0
	0x03A0F150 MOV X0, X25
	0x03A0F154 STP V0, V1, [X31]
	0x03A0F158 STR V2, [X31 + 0x2]
	0x03A0F15C BL 0x3A0EE28
	0x03A0F160 MOV X1, X0
	0x03A0F164 MOVZ W2, 0x1
	0x03A0F168 MOVZ W3, 0x1
	0x03A0F16C MOV X0, X23
	0x03A0F170 BL 0x3A05454

ISIL:
	001 Subtract X31, X31, 400
	002 Move [X31+288], D8
	003 Move [X31+304], X29
	004 Move [X31+312], X30
	005 Move [X31+320], X28
	006 Move [X31+328], X27
	007 Move [X31+336], X26
	008 Move [X31+344], X25
	009 Move [X31+352], X24
	010 Move [X31+360], X23
	011 Move [X31+368], X22
	012 Move [X31+376], X21
	013 Move [X31+384], X20
	014 Move [X31+392], X19
	015 Move X19, 0x9D4000
	016 Move W8, [X19+3995]
	017 Move V8, V0
	018 Move X20, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {49}
	023 Move X0, 0x747000
	024 Move X0, [X0+784]
	025 Call 0x1C17CF4
	026 Move X0, 0x747000
	027 Move X0, [X0+368]
	028 Call 0x1C17CF4
	029 Move X0, 0x747000
	030 Move X0, [X0+792]
	031 Call 0x1C17CF4
	032 Move X0, 0x747000
	033 Move X0, [X0+512]
	034 Call 0x1C17CF4
	035 Move X0, 0x747000
	036 Move X0, [X0+528]
	037 Call 0x1C17CF4
	038 Move X0, 0x747000
	039 Move X0, [X0+360]
	040 Call 0x1C17CF4
	041 Move X0, 0x747000
	042 Move X0, [X0+1032]
	043 Call 0x1C17CF4
	044 Move X0, 0x747000
	045 Move X0, [X0+904]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X19+3995], W8
	049 Compare X20, 0
	050 JumpIfEqual {230}
	051 Move X23, 0x747000
	052 Move W19, [X20+24]
	053 Move X23, [X23+360]
	054 Compare W19, 0
	055 JumpIfEqual {142}
	056 Move X8, 0x747000
	057 Move X8, [X8+1032]
	058 Move W1, W19
	059 Move X0, [X8]
	060 Call 0x1C17D6C
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X21, X0
	063 Move X26, 0x747000
	064 Move X26, [X26+904]
	065 Move X24, X31
	066 Add X25, X21, 32
	067 Move X0, [X26]
	068 Call 0x1C17F10
	069 Move X1, X31
	070 Move X22, X0
	071 Call Object..ctor, X0
	072 Compare X21, 0
	073 JumpIfEqual {230}
	074 Compare X22, 0
	075 JumpIfEqual {82}
	076 Move X8, [X21]
	077 Move X0, X22
	078 Move X1, [X8+64]
	079 Call 0x1C17E00
	080 Compare X0, 0
	081 JumpIfEqual {310}
	082 Move W8, [X21+24]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move [X25], X22
	085 Add X24, X24, 1
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X26, 0x747000
	089 Move X8, [X21+24]
	090 Move X26, [X26+528]
	091 Subtract W24, W31, W19
	092 Move W25, 1
	093 Subtract W22, W25, 1
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Add X27, X21, W22
	096 Add X27, X27, 32
	097 Move X28, [X27]
	098 Move X2, [X26]
	099 Add X8, X31, 192
	100 Move X0, X20
	101 Move W1, W22
	102 Call List`1<IntPoint>.get_Item, X0, X1
	103 Move V0, [X31+192]
	104 Move V1, [X31+208]
	105 Move V2, [X31+14]
	106 Move [X31+240], V0
	107 Move [X31+248], V1
	108 Move [X31+17], V2
	109 Compare X28, 0
	110 JumpIfEqual {230}
	111 Move V1, [X31+256]
	112 Move V0, [X31+272]
	113 Move V2, [X31+15]
	114 Move [X28+56], V0
	115 Move [X28+40], V1
	116 Move [X28+24], V2
	117 Move X8, [X21+24]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Add W31, W24, W25
	120 NotImplemented "Instruction CSEL not yet implemented."
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move X10, [X27]
	123 Compare X10, 0
	124 JumpIfEqual {230}
	125 Add X9, X21, W9
	126 Move X9, [X9+32]
	127 Move [X10+72], X9
	128 Move X9, [X27]
	129 Compare X9, 0
	130 JumpIfEqual {230}
	131 Move X10, [X9+72]
	132 Compare X10, 0
	133 JumpIfEqual {230}
	134 Move [X10+80], X9
	135 Move X9, [X27]
	136 Compare X9, 0
	137 JumpIfEqual {230}
	138 Add W25, W25, 1
	139 Add W10, W24, W25
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move [X9+16], W31
	142 Move X0, [X23]
	143 Call 0x1C17F10
	144 Move X8, 0x747000
	145 Move X8, [X8+368]
	146 Move X19, X0
	147 Move X1, [X8]
	148 Call List`1<IntPoint>..ctor, X0
	149 Compare X21, 0
	150 JumpIfEqual {230}
	151 Move W8, [X21+24]
	152 Compare W8, 0
	153 JumpIfEqual {309}
	154 Move X20, [X21+32]
	155 Compare X20, 0
	156 JumpIfEqual {230}
	157 Move X22, 0x747000
	158 Move X22, [X22+792]
	159 Multiply D8, D8, D8
	160 Move W21, 1
	161 Move W8, [X20+16]
	162 Compare W8, 0
	163 JumpIfNotEqual {231}
	164 Move X0, [X20+72]
	165 Move X8, [X20+80]
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Compare X8, 0
	168 JumpIfEqual {230}
	169 Move V0, [X8+2]
	170 Move V1, [X20+2]
	171 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	172 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	173 Subtract V1, V1, V0
	174 NotImplemented "Instruction INVALID not yet implemented."
	175 NotImplemented "Instruction FADDP not yet implemented."
	176 NotImplemented "Instruction FCMP not yet implemented."
	177 Compare X0, 0
	178 JumpIfEqual {230}
	179 Move V1, [X0+2]
	180 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	181 Subtract V0, V0, V1
	182 NotImplemented "Instruction INVALID not yet implemented."
	183 NotImplemented "Instruction FADDP not yet implemented."
	184 NotImplemented "Instruction FCMP not yet implemented."
	185 NotImplemented "Instruction LDUR not yet implemented."
	186 NotImplemented "Instruction LDUR not yet implemented."
	187 NotImplemented "Instruction LDUR not yet implemented."
	188 Add X8, X20, 24
	189 Add X1, X31, 96
	190 Move [X31+160], V1
	191 Move [X31+168], V0
	192 Move V1, [X8+16]
	193 Move V0, [X8+32]
	194 Move V2, [X8]
	195 Add X2, X31, 48
	196 Move [X31+128], V0
	197 Move [X31+136], V3
	198 Move [X31+96], V2
	199 Move [X31+104], V1
	200 NotImplemented "Instruction LDUR not yet implemented."
	201 NotImplemented "Instruction LDUR not yet implemented."
	202 NotImplemented "Instruction LDUR not yet implemented."
	203 Add X0, X31, 144
	204 Move [X31+64], V1
	205 Move [X31+72], V0
	206 Move V0, V8
	207 Move [X31+3], V2
	208 Call Clipper.SlopesNearCollinear, X0, X1, X2, V0
	209 Move TEMP, X0
	210 And TEMP, TEMP, 1
	211 Compare TEMP, 1
	212 JumpIfEqual {217}
	213 Move [X20+16], W21
	214 Move X20, [X20+72]
	215 Compare X20, 0
	216 JumpIfNotEqual {161}
	217 Move TEMP, 0
	218 Not TEMP
	219 Move W24, TEMP
	220 Call Clipper.ExcludeOp, X0
	221 Move TEMP, 1
	222 Not TEMP
	223 Move W24, TEMP
	224 Move X0, X20
	225 Call Clipper.ExcludeOp, X0
	226 Move X20, X0
	227 Add W19, W19, W24
	228 Compare X0, 0
	229 JumpIfNotEqual {161}
	230 Call 0x1C17F20
	231 Move X0, [X23]
	232 NotImplemented "Instruction CMP not yet implemented."
	233 NotImplemented "Instruction CSEL not yet implemented."
	234 Call 0x1C17F10
	235 Move X2, [X22]
	236 Move W1, W21
	237 Move X19, X0
	238 Call List`1<IntPoint>..ctor, X0, X1
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Move X22, 0x746000
	241 Move X22, [X22+784]
	242 Move W23, 48
	243 Compare X20, 0
	244 JumpIfEqual {230}
	245 NotImplemented "Instruction LDUR not yet implemented."
	246 NotImplemented "Instruction LDUR not yet implemented."
	247 NotImplemented "Instruction LDUR not yet implemented."
	248 Move [X31+16], V1
	249 Move [X31+24], V0
	250 Move [X31], V2
	251 Compare X19, 0
	252 JumpIfEqual {230}
	253 Move V0, [X31]
	254 Move V1, [X31+16]
	255 Move V2, [X31+2]
	256 Move X10, [X22]
	257 Move [X31+192], V0
	258 Move [X31+200], V1
	259 Move [X31+14], V2
	260 Move W9, [X19+28]
	261 Move X8, [X19+16]
	262 Add W9, W9, 1
	263 Move [X19+28], W9
	264 Compare X8, 0
	265 JumpIfEqual {230}
	266 NotImplemented "Instruction LDRSW not yet implemented."
	267 Move W11, [X8+24]
	268 NotImplemented "Instruction CMP not yet implemented."
	269 Add W10, W9, 1
	270 Move [X19+24], W10
	271 Move V1, [X31+208]
	272 Move V0, [X31+224]
	273 Move V2, [X31+12]
	274 NotImplemented "Instruction NOP not yet implemented."
	275 NotImplemented "Instruction MADD not yet implemented."
	276 Move [X8+48], V1
	277 Move [X8+56], V0
	278 Move [X8+2], V2
	279 Move X8, [X10+32]
	280 Move V0, [X31+192]
	281 Move V1, [X31+208]
	282 Move V2, [X31+14]
	283 Add X1, X31, 240
	284 Move X8, [X8+192]
	285 Move X0, X19
	286 Move X2, [X8+112]
	287 Move [X31+240], V0
	288 Move [X31+248], V1
	289 Move [X31+17], V2
	290 Call List`1<IntPoint>.AddWithResize, X0, X1
	291 Move X20, [X20+72]
	292 Subtract W21, W21, 1
	293 Move X0, X19
	294 Move X20, [X31+384]
	295 Move X19, [X31+392]
	296 Move X22, [X31+368]
	297 Move X21, [X31+376]
	298 Move X24, [X31+352]
	299 Move X23, [X31+360]
	300 Move X26, [X31+336]
	301 Move X25, [X31+344]
	302 Move X28, [X31+320]
	303 Move X27, [X31+328]
	304 Move X29, [X31+304]
	305 Move X30, [X31+312]
	306 Move V8, [X31+288]
	307 Add X31, X31, 400
	308 Return X0
	309 Call 0x1C17F28
	310 Call 0x1C17F44
	311 Move X1, X31
	312 Call 0x1C17DEC

Method: System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> CleanPolygons(System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> polys, System.Double distance = 1.415)

Disassembly:
	0x03A0F174 LDR W8, [X20 + 0x18]
	0x03A0F178 ADD W24, W24, 0x1
	0x03A0F17C CMP W24, W8
	0x03A0F180 B.LT 0x3A0F0D8
	0x03A0F184 CBZ X23, 0x3A0F1C0
	0x03A0F188 MOVZ W1, 0x1
	0x03A0F18C MOVZ W3, 0x1
	0x03A0F190 MOVZ W4, 0x1
	0x03A0F194 MOV X0, X23
	0x03A0F198 MOV X2, X22
	0x03A0F19C BL 0x3A06C28
	0x03A0F1A0 MOV X0, X22
	0x03A0F1A4 LDP X20, X19, [X31 + 0xA0]
	0x03A0F1A8 LDP X22, X21, [X31 + 0x90]
	0x03A0F1AC LDP X24, X23, [X31 + 0x80]
	0x03A0F1B0 LDP X26, X25, [X31 + 0x70]
	0x03A0F1B4 LDP X30, X27, [X31 + 0x60]
	0x03A0F1B8 ADD X31, X31, 0xB0
	0x03A0F1BC RET
	0x03A0F1C0 BL 0x1C16F20
	0x03A0F1C4 STR X30, [X31 - 0x30]!
	0x03A0F1C8 STP X22, X21, [X31 + 0x10]
	0x03A0F1CC STP X20, X19, [X31 + 0x20]
	0x03A0F1D0 ADRP X22, 0x9D2000
	0x03A0F1D4 ADRP X21, 0x745000
	0x03A0F1D8 LDRB W8, [X22 + 0xFA1]
	0x03A0F1DC LDR X21, [X21 + 0x400]
	0x03A0F1E0 MOV X19, X1
	0x03A0F1E4 MOV X20, X0
	0x03A0F1E8 TBNZ X8, 0x0, 0x3A0F200
	0x03A0F1EC ADRP X0, 0x745000
	0x03A0F1F0 LDR X0, [X0 + 0x400]
	0x03A0F1F4 BL 0x1C16CF4
	0x03A0F1F8 MOVZ W8, 0x1
	0x03A0F1FC STRB W8, [X22 + 0xFA1]
	0x03A0F200 MOVZ W3, 0x1
	0x03A0F204 MOV X0, X20
	0x03A0F208 MOV X1, X19
	0x03A0F20C MOV W2, W31
	0x03A0F210 BL 0x3A0E2C8
	0x03A0F214 LDR X8, [X21]
	0x03A0F218 MOV X19, X0
	0x03A0F21C MOV X0, X8
	0x03A0F220 BL 0x1C16F10
	0x03A0F224 MOV W1, W31
	0x03A0F228 MOV X20, X0
	0x03A0F22C BL 0x3A0698C
	0x03A0F230 CBZ X20, 0x3A0F274
	0x03A0F234 MOVZ W3, 0x1
	0x03A0F238 MOV X0, X20
	0x03A0F23C MOV X1, X19
	0x03A0F240 MOV W2, W31
	0x03A0F244 BL 0x3A06024
	0x03A0F248 MOVZ W1, 0x1
	0x03A0F24C MOVZ W3, 0x1
	0x03A0F250 MOVZ W4, 0x1
	0x03A0F254 MOV X0, X20
	0x03A0F258 MOV X2, X19
	0x03A0F25C BL 0x3A06C28
	0x03A0F260 MOV X0, X19
	0x03A0F264 LDP X20, X19, [X31 + 0x20]
	0x03A0F268 LDP X22, X21, [X31 + 0x10]
	0x03A0F26C LDR X30, [X31], #0x30
	0x03A0F270 RET
	0x03A0F274 BL 0x1C16F20
	0x03A0F278 STR X30, [X31 - 0x30]!
	0x03A0F27C STP X22, X21, [X31 + 0x10]
	0x03A0F280 STP X20, X19, [X31 + 0x20]
	0x03A0F284 ADRP X21, 0x9D2000
	0x03A0F288 ADRP X22, 0x745000
	0x03A0F28C ADRP X20, 0x745000
	0x03A0F290 LDRB W8, [X21 + 0xFA2]
	0x03A0F294 LDR X22, [X22 + 0x3F0]
	0x03A0F298 LDR X20, [X20 + 0x3F8]
	0x03A0F29C MOV X19, X0
	0x03A0F2A0 TBNZ X8, 0x0, 0x3A0F2D0
	0x03A0F2A4 ADRP X0, 0x745000
	0x03A0F2A8 LDR X0, [X0 + 0x3F8]
	0x03A0F2AC BL 0x1C16CF4
	0x03A0F2B0 ADRP X0, 0x745000
	0x03A0F2B4 LDR X0, [X0 + 0x320]
	0x03A0F2B8 BL 0x1C16CF4
	0x03A0F2BC ADRP X0, 0x745000
	0x03A0F2C0 LDR X0, [X0 + 0x3F0]
	0x03A0F2C4 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x9D3000
	009 Move W8, [X20+3996]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x746000
	017 Move X0, [X0+776]
	018 Call 0x1C17CF4
	019 Move X0, 0x746000
	020 Move X0, [X0+1040]
	021 Call 0x1C17CF4
	022 Move X0, 0x746000
	023 Move X0, [X0+568]
	024 Call 0x1C17CF4
	025 Move X0, 0x746000
	026 Move X0, [X0+576]
	027 Call 0x1C17CF4
	028 Move X0, 0x746000
	029 Move X0, [X0+1008]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+3996], W8
	033 Compare X19, 0
	034 JumpIfEqual {93}
	035 Move X8, 0x746000
	036 Move X8, [X8+1008]
	037 Move X20, 0x746000
	038 Move W21, [X19+24]
	039 Move X0, [X8]
	040 Move X20, [X20+1040]
	041 Call 0x1C17F10
	042 Move X2, [X20]
	043 Move W1, W21
	044 Move X20, X0
	045 Call List`1<Object>..ctor, X0, X1
	046 Move W8, [X19+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X22, 0x746000
	049 Move X23, 0x746000
	050 Move X22, [X22+576]
	051 Move X23, [X23+776]
	052 Move W21, W31
	053 Move X2, [X22]
	054 Move X0, X19
	055 Move W1, W21
	056 Call List`1<Object>.get_Item, X0, X1
	057 Move V0, V8
	058 Call Clipper.CleanPolygon, X0, V0
	059 Compare X20, 0
	060 JumpIfEqual {93}
	061 Move W10, [X20+28]
	062 Move X8, [X20+16]
	063 Move X9, [X23]
	064 Add W10, W10, 1
	065 Move [X20+28], W10
	066 Compare X8, 0
	067 JumpIfEqual {93}
	068 NotImplemented "Instruction LDRSW not yet implemented."
	069 Move W11, [X8+24]
	070 Move X1, X0
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Add W9, W10, 1
	073 Add X8, X8, X10
	074 Move [X20+24], W9
	075 Move [X8+32], X1
	076 Move X8, [X9+32]
	077 Move X0, X20
	078 Move X8, [X8+192]
	079 Move X2, [X8+112]
	080 Call List`1<Object>.AddWithResize, X0, X1
	081 Move W8, [X19+24]
	082 Add W21, W21, 1
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X0, X20
	085 Move X20, [X31+48]
	086 Move X19, [X31+56]
	087 Move X22, [X31+32]
	088 Move X21, [X31+40]
	089 Move X30, [X31+16]
	090 Move X23, [X31+24]
	091 Move V8, [X31+64]
	092 Return X0
	093 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> Minkowski(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> pattern, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> path, System.Boolean IsSum, System.Boolean IsClosed)

Disassembly:
	0x03A0F2C8 MOVZ W8, 0x1
	0x03A0F2CC STRB W8, [X21 + 0xFA2]
	0x03A0F2D0 LDR X0, [X22]
	0x03A0F2D4 BL 0x1C16F10
	0x03A0F2D8 LDR X1, [X20]
	0x03A0F2DC MOV X20, X0
	0x03A0F2E0 BL 0x301B7C4
	0x03A0F2E4 CBZ X19, 0x3A0F330
	0x03A0F2E8 MOV X0, X19
	0x03A0F2EC BL 0x3A03C2C
	0x03A0F2F0 CBZ X20, 0x3A0F330
	0x03A0F2F4 ADRP X8, 0x745000
	0x03A0F2F8 LDR X8, [X8 + 0x320]
	0x03A0F2FC MOV W1, W0
	0x03A0F300 MOV X0, X20
	0x03A0F304 LDR X2, [X8]
	0x03A0F308 BL 0x301BB48
	0x03A0F30C MOV X0, X19
	0x03A0F310 MOV W1, W31
	0x03A0F314 MOV X2, X20
	0x03A0F318 BL 0x3A0F334
	0x03A0F31C MOV X0, X20
	0x03A0F320 LDP X20, X19, [X31 + 0x20]
	0x03A0F324 LDP X22, X21, [X31 + 0x10]
	0x03A0F328 LDR X30, [X31], #0x30
	0x03A0F32C RET
	0x03A0F330 BL 0x1C16F20
	0x03A0F334 SUB X31, X31, 0x50
	0x03A0F338 STR X30, [X31 + 0x20]
	0x03A0F33C STP X22, X21, [X31 + 0x30]
	0x03A0F340 STP X20, X19, [X31 + 0x40]
	0x03A0F344 ADRP X22, 0x9D2000
	0x03A0F348 LDRB W8, [X22 + 0xFA3]
	0x03A0F34C MOV X19, X2
	0x03A0F350 MOV W20, W1
	0x03A0F354 MOV X21, X0
	0x03A0F358 TBNZ X8, 0x0, 0x3A0F3AC
	0x03A0F35C ADRP X0, 0x745000
	0x03A0F360 LDR X0, [X0 + 0x438]
	0x03A0F364 BL 0x1C16CF4
	0x03A0F368 ADRP X0, 0x745000
	0x03A0F36C LDR X0, [X0 + 0x440]
	0x03A0F370 BL 0x1C16CF4
	0x03A0F374 ADRP X0, 0x745000
	0x03A0F378 LDR X0, [X0 + 0x448]
	0x03A0F37C BL 0x1C16CF4
	0x03A0F380 ADRP X0, 0x745000
	0x03A0F384 LDR X0, [X0 + 0x308]
	0x03A0F388 BL 0x1C16CF4
	0x03A0F38C ADRP X0, 0x745000
	0x03A0F390 LDR X0, [X0 + 0x450]
	0x03A0F394 BL 0x1C16CF4
	0x03A0F398 ADRP X0, 0x745000
	0x03A0F39C LDR X0, [X0 + 0x200]
	0x03A0F3A0 BL 0x1C16CF4
	0x03A0F3A4 MOVZ W8, 0x1
	0x03A0F3A8 STRB W8, [X22 + 0xFA3]
	0x03A0F3AC CMP W20, 0x1
	0x03A0F3B0 STP X31, X31, [X31 + 0x8]
	0x03A0F3B4 STR X31, [X31 + 0x18]
	0x03A0F3B8 B.EQ 0x3A0F4B0
	0x03A0F3BC CMP W20, 0x2
	0x03A0F3C0 B.NE 0x3A0F3D4
	0x03A0F3C4 CBZ X21, 0x3A0F4C4
	0x03A0F3C8 LDRB W8, [X21 + 0x38]
	0x03A0F3CC EOR W8, W8, 0x1
	0x03A0F3D0 B 0x3A0F3DC
	0x03A0F3D4 CBZ X21, 0x3A0F4C4
	0x03A0F3D8 MOVZ W8, 0x1
	0x03A0F3DC LDR X1, [X21 + 0x18]
	0x03A0F3E0 CBZ X1, 0x3A0F4C4
	0x03A0F3E4 LDR W9, [X1 + 0x18]
	0x03A0F3E8 CMP W9, 0x0
	0x03A0F3EC CSET W9, GT
	0x03A0F3F0 ANDS W31, W8, W9, 0x0
	0x03A0F3F4 B.EQ 0x3A0F454
	0x03A0F3F8 CBZ X19, 0x3A0F4C4
	0x03A0F3FC ADRP X9, 0x745000
	0x03A0F400 LDR X9, [X9 + 0x308]
	0x03A0F404 LDR W10, [X19 + 0x1C]
	0x03A0F408 LDR X8, [X19 + 0x10]
	0x03A0F40C LDR X9, [X9]
	0x03A0F410 ADD W10, W10, 0x1
	0x03A0F414 STR W10, [X19 + 0x1C]
	0x03A0F418 CBZ X8, 0x3A0F4C4
	0x03A0F41C LDRSW X10, [X19 + 0x18]
	0x03A0F420 LDR W11, [X8 + 0x18]
	0x03A0F424 CMP W10, W11
	0x03A0F428 B.CS 0x3A0F440
	0x03A0F42C ADD W9, W10, 0x1
	0x03A0F430 ADD X8, X8, X10, 0x3, LSL
	0x03A0F434 STR W9, [X19 + 0x18]
	0x03A0F438 STR X1, [X8 + 0x20]
	0x03A0F43C B 0x3A0F454
	0x03A0F440 LDR X8, [X9 + 0x20]
	0x03A0F444 MOV X0, X19
	0x03A0F448 LDR X8, [X8 + 0xC0]
	0x03A0F44C LDR X2, [X8 + 0x70]
	0x03A0F450 BL 0x301BF90
	0x03A0F454 LDR X0, [X21 + 0x30]
	0x03A0F458 CBZ X0, 0x3A0F4C4
	0x03A0F45C ADRP X8, 0x745000
	0x03A0F460 LDR X8, [X8 + 0x450]
	0x03A0F464 ADRP X22, 0x745000
	0x03A0F468 ADRP X21, 0x745000
	0x03A0F46C LDR X1, [X8]
	0x03A0F470 LDR X22, [X22 + 0x440]
	0x03A0F474 LDR X21, [X21 + 0x438]
	0x03A0F478 ADD X8, X31, 0x8
	0x03A0F47C BL 0x301CB58
	0x03A0F480 LDR X1, [X22]
	0x03A0F484 ADD X0, X31, 0x8
	0x03A0F488 BL 0x2BC4350
	0x03A0F48C TBZ X0, 0x0, 0x3A0F4A4
	0x03A0F490 LDR X0, [X31 + 0x18]
	0x03A0F494 MOV W1, W20
	0x03A0F498 MOV X2, X19
	0x03A0F49C BL 0x3A0F334
	0x03A0F4A0 B 0x3A0F480
	0x03A0F4A4 LDR X1, [X21]
	0x03A0F4A8 ADD X0, X31, 0x8
	0x03A0F4AC BL 0x2BC434C
	0x03A0F4B0 LDP X20, X19, [X31 + 0x40]
	0x03A0F4B4 LDP X22, X21, [X31 + 0x30]
	0x03A0F4B8 LDR X30, [X31 + 0x20]
	0x03A0F4BC ADD X31, X31, 0x50
	0x03A0F4C0 RET
	0x03A0F4C4 BL 0x1C16F20
	0x03A0F4C8 B 0x3A0F4CC
	0x03A0F4CC MOV X20, X0
	0x03A0F4D0 CMP W1, 0x1
	0x03A0F4D4 B.NE 0x3A0F500
	0x03A0F4D8 MOV X0, X20
	0x03A0F4DC BL 0x3EB1AD0
	0x03A0F4E0 LDR X19, [X0]
	0x03A0F4E4 BL 0x3EB1AE0
	0x03A0F4E8 LDR X1, [X21]
	0x03A0F4EC ADD X0, X31, 0x8
	0x03A0F4F0 BL 0x2BC434C
	0x03A0F4F4 CBZ X19, 0x3A0F4B0
	0x03A0F4F8 MOV X0, X19
	0x03A0F4FC BL 0x1C16F18
	0x03A0F500 MOV X19, X31
	0x03A0F504 B 0x3A0F50C
	0x03A0F508 MOV X20, X0
	0x03A0F50C LDR X1, [X21]
	0x03A0F510 ADD X0, X31, 0x8
	0x03A0F514 BL 0x2BC434C
	0x03A0F518 CBNZ X19, 0x3A0F524
	0x03A0F51C MOV X0, X20
	0x03A0F520 BL 0x1D2C690
	0x03A0F524 MOV X0, X19
	0x03A0F528 BL 0x1C16F18
	0x03A0F52C BL 0x1990590
	0x03A0F530 STP X30, X23, [X31 - 0x30]!
	0x03A0F534 STP X22, X21, [X31 + 0x10]
	0x03A0F538 STP X20, X19, [X31 + 0x20]
	0x03A0F53C ADRP X21, 0x9D2000
	0x03A0F540 ADRP X22, 0x745000
	0x03A0F544 ADRP X20, 0x745000
	0x03A0F548 LDRB W8, [X21 + 0xFA4]
	0x03A0F54C LDR X22, [X22 + 0x3F0]
	0x03A0F550 LDR X20, [X20 + 0x3F8]
	0x03A0F554 MOV X19, X0
	0x03A0F558 TBNZ X8, 0x0, 0x3A0F5A0
	0x03A0F55C ADRP X0, 0x745000
	0x03A0F560 LDR X0, [X0 + 0x308]
	0x03A0F564 BL 0x1C16CF4
	0x03A0F568 ADRP X0, 0x745000
	0x03A0F56C LDR X0, [X0 + 0x3F8]
	0x03A0F570 BL 0x1C16CF4
	0x03A0F574 ADRP X0, 0x745000
	0x03A0F578 LDR X0, [X0 + 0x150]
	0x03A0F57C BL 0x1C16CF4
	0x03A0F580 ADRP X0, 0x745000
	0x03A0F584 LDR X0, [X0 + 0x320]
	0x03A0F588 BL 0x1C16CF4
	0x03A0F58C ADRP X0, 0x745000
	0x03A0F590 LDR X0, [X0 + 0x3F0]
	0x03A0F594 BL 0x1C16CF4
	0x03A0F598 MOVZ W8, 0x1
	0x03A0F59C STRB W8, [X21 + 0xFA4]
	0x03A0F5A0 LDR X0, [X22]
	0x03A0F5A4 BL 0x1C16F10
	0x03A0F5A8 LDR X1, [X20]
	0x03A0F5AC MOV X20, X0
	0x03A0F5B0 BL 0x301B7C4
	0x03A0F5B4 CBZ X19, 0x3A0F6B4
	0x03A0F5B8 MOV X0, X19
	0x03A0F5BC BL 0x3A03E2C
	0x03A0F5C0 CBZ X20, 0x3A0F6B4
	0x03A0F5C4 ADRP X8, 0x745000
	0x03A0F5C8 LDR X8, [X8 + 0x320]
	0x03A0F5CC MOV W1, W0
	0x03A0F5D0 MOV X0, X20
	0x03A0F5D4 LDR X2, [X8]
	0x03A0F5D8 BL 0x301BB48
	0x03A0F5DC MOV X0, X19
	0x03A0F5E0 BL 0x3A03E2C
	0x03A0F5E4 CMP W0, 0x1
	0x03A0F5E8 B.LT 0x3A0F6A0
	0x03A0F5EC ADRP X22, 0x745000
	0x03A0F5F0 ADRP X23, 0x745000
	0x03A0F5F4 LDR X22, [X22 + 0x150]
	0x03A0F5F8 LDR X23, [X23 + 0x308]
	0x03A0F5FC MOV W21, W31
	0x03A0F600 LDR X0, [X19 + 0x30]
	0x03A0F604 CBZ X0, 0x3A0F6B4
	0x03A0F608 LDR X2, [X22]
	0x03A0F60C MOV W1, W21
	0x03A0F610 BL 0x301BCCC
	0x03A0F614 CBZ X0, 0x3A0F6B4
	0x03A0F618 LDRB W8, [X0 + 0x38]
	0x03A0F61C CBZ W8, 0x3A0F68C
	0x03A0F620 LDR X0, [X19 + 0x30]
	0x03A0F624 CBZ X0, 0x3A0F6B4
	0x03A0F628 LDR X2, [X22]
	0x03A0F62C MOV W1, W21
	0x03A0F630 BL 0x301BCCC
	0x03A0F634 CBZ X0, 0x3A0F6B4
	0x03A0F638 LDR W10, [X20 + 0x1C]
	0x03A0F63C LDR X1, [X0 + 0x18]
	0x03A0F640 LDR X8, [X20 + 0x10]
	0x03A0F644 LDR X9, [X23]
	0x03A0F648 ADD W10, W10, 0x1
	0x03A0F64C STR W10, [X20 + 0x1C]
	0x03A0F650 CBZ X8, 0x3A0F6B4
	0x03A0F654 LDRSW X10, [X20 + 0x18]
	0x03A0F658 LDR W11, [X8 + 0x18]
	0x03A0F65C CMP W10, W11
	0x03A0F660 B.CS 0x3A0F678
	0x03A0F664 ADD W9, W10, 0x1
	0x03A0F668 ADD X8, X8, X10, 0x3, LSL
	0x03A0F66C STR W9, [X20 + 0x18]
	0x03A0F670 STR X1, [X8 + 0x20]
	0x03A0F674 B 0x3A0F68C
	0x03A0F678 LDR X8, [X9 + 0x20]
	0x03A0F67C MOV X0, X20
	0x03A0F680 LDR X8, [X8 + 0xC0]
	0x03A0F684 LDR X2, [X8 + 0x70]
	0x03A0F688 BL 0x301BF90
	0x03A0F68C MOV X0, X19
	0x03A0F690 ADD W21, W21, 0x1
	0x03A0F694 BL 0x3A03E2C
	0x03A0F698 CMP W21, W0
	0x03A0F69C B.LT 0x3A0F600
	0x03A0F6A0 MOV X0, X20
	0x03A0F6A4 LDP X20, X19, [X31 + 0x20]
	0x03A0F6A8 LDP X22, X21, [X31 + 0x10]
	0x03A0F6AC LDP X30, X23, [X31], #0x30
	0x03A0F6B0 RET
	0x03A0F6B4 BL 0x1C16F20
	0x03A0F6B8 STR X30, [X31 - 0x30]!
	0x03A0F6BC STP X22, X21, [X31 + 0x10]
	0x03A0F6C0 STP X20, X19, [X31 + 0x20]
	0x03A0F6C4 ADRP X21, 0x9D2000
	0x03A0F6C8 ADRP X22, 0x745000
	0x03A0F6CC ADRP X20, 0x745000
	0x03A0F6D0 LDRB W8, [X21 + 0xFA5]
	0x03A0F6D4 LDR X22, [X22 + 0x3F0]
	0x03A0F6D8 LDR X20, [X20 + 0x3F8]
	0x03A0F6DC MOV X19, X0
	0x03A0F6E0 TBNZ X8, 0x0, 0x3A0F710
	0x03A0F6E4 ADRP X0, 0x745000
	0x03A0F6E8 LDR X0, [X0 + 0x3F8]
	0x03A0F6EC BL 0x1C16CF4
	0x03A0F6F0 ADRP X0, 0x745000
	0x03A0F6F4 LDR X0, [X0 + 0x320]
	0x03A0F6F8 BL 0x1C16CF4
	0x03A0F6FC ADRP X0, 0x745000
	0x03A0F700 LDR X0, [X0 + 0x3F0]
	0x03A0F704 BL 0x1C16CF4
	0x03A0F708 MOVZ W8, 0x1
	0x03A0F70C STRB W8, [X21 + 0xFA5]
	0x03A0F710 LDR X0, [X22]
	0x03A0F714 BL 0x1C16F10
	0x03A0F718 LDR X1, [X20]
	0x03A0F71C MOV X20, X0
	0x03A0F720 BL 0x301B7C4
	0x03A0F724 CBZ X19, 0x3A0F770
	0x03A0F728 MOV X0, X19
	0x03A0F72C BL 0x3A03C2C
	0x03A0F730 CBZ X20, 0x3A0F770
	0x03A0F734 ADRP X8, 0x745000
	0x03A0F738 LDR X8, [X8 + 0x320]
	0x03A0F73C MOV W1, W0
	0x03A0F740 MOV X0, X20
	0x03A0F744 LDR X2, [X8]
	0x03A0F748 BL 0x301BB48
	0x03A0F74C MOVZ W1, 0x2
	0x03A0F750 MOV X0, X19
	0x03A0F754 MOV X2, X20
	0x03A0F758 BL 0x3A0F334
	0x03A0F75C MOV X0, X20
	0x03A0F760 LDP X20, X19, [X31 + 0x20]
	0x03A0F764 LDP X22, X21, [X31 + 0x10]
	0x03A0F768 LDR X30, [X31], #0x30
	0x03A0F76C RET
	0x03A0F770 BL 0x1C16F20
	0x03A0F774 LDR V0, [X0 + 0x90]
	0x03A0F778 RET
	0x03A0F77C STR D0, [X0 + 0x90]
	0x03A0F780 RET
	0x03A0F784 STR D8, [X31 - 0x40]!
	0x03A0F788 STP X30, X23, [X31 + 0x10]
	0x03A0F78C STP X22, X21, [X31 + 0x20]
	0x03A0F790 STP X20, X19, [X31 + 0x30]
	0x03A0F794 ADRP X22, 0x9D2000
	0x03A0F798 ADRP X23, 0x745000
	0x03A0F79C ADRP X20, 0x745000
	0x03A0F7A0 ADRP X21, 0x745000
	0x03A0F7A4 LDRB W8, [X22 + 0xFA6]
	0x03A0F7A8 LDR X23, [X23 + 0x458]
	0x03A0F7AC LDR X20, [X20 + 0x460]
	0x03A0F7B0 LDR X21, [X21 + 0x338]
	0x03A0F7B4 MOV V8.16B, V0.16B
	0x03A0F7B8 MOV X19, X0
	0x03A0F7BC TBNZ X8, 0x0, 0x3A0F7EC
	0x03A0F7C0 ADRP X0, 0x745000
	0x03A0F7C4 LDR X0, [X0 + 0x460]
	0x03A0F7C8 BL 0x1C16CF4
	0x03A0F7CC ADRP X0, 0x745000
	0x03A0F7D0 LDR X0, [X0 + 0x458]
	0x03A0F7D4 BL 0x1C16CF4
	0x03A0F7D8 ADRP X0, 0x745000
	0x03A0F7DC LDR X0, [X0 + 0x338]
	0x03A0F7E0 BL 0x1C16CF4
	0x03A0F7E4 MOVZ W8, 0x1
	0x03A0F7E8 STRB W8, [X22 + 0xFA6]
	0x03A0F7EC LDR X0, [X23]
	0x03A0F7F0 BL 0x1C16F10
	0x03A0F7F4 LDR X1, [X20]
	0x03A0F7F8 MOV X20, X0
	0x03A0F7FC BL 0x2FB419C
	0x03A0F800 STR X20, [X19 + 0x28]
	0x03A0F804 LDR X0, [X21]
	0x03A0F808 BL 0x1C16F10
	0x03A0F80C MOV X1, X31
	0x03A0F810 MOV X20, X0
	0x03A0F814 BL 0x3A03D4C
	0x03A0F818 MOV X0, X19
	0x03A0F81C MOV X1, X31
	0x03A0F820 STR X20, [X19 + 0x88]
	0x03A0F824 BL 0x33BDD8C
	0x03A0F828 MOVN X8, 0x0
	0x03A0F82C STR D8, [X19 + 0x90]
	0x03A0F830 STR X8, [X19 + 0x60]
	0x03A0F834 LDP X20, X19, [X31 + 0x30]
	0x03A0F838 LDP X22, X21, [X31 + 0x20]
	0x03A0F83C LDP X30, X23, [X31 + 0x10]
	0x03A0F840 LDR V8, [X31], #0x40
	0x03A0F844 RET
	0x03A0F848 STR X30, [X31 - 0x20]!
	0x03A0F84C STP X20, X19, [X31 + 0x10]
	0x03A0F850 ADRP X20, 0x9D2000
	0x03A0F854 LDRB W8, [X20 + 0xFA7]
	0x03A0F858 MOV X19, X0
	0x03A0F85C TBNZ X8, 0x0, 0x3A0F874
	0x03A0F860 ADRP X0, 0x745000
	0x03A0F864 LDR X0, [X0 + 0x138]
	0x03A0F868 BL 0x1C16CF4
	0x03A0F86C MOVZ W8, 0x1
	0x03A0F870 STRB W8, [X20 + 0xFA7]
	0x03A0F874 LDR X8, [X19 + 0x88]
	0x03A0F878 CBZ X8, 0x3A0F8BC
	0x03A0F87C LDR X8, [X8 + 0x30]
	0x03A0F880 CBZ X8, 0x3A0F8BC
	0x03A0F884 LDP W2, W9, [X8 + 0x18]
	0x03A0F888 ADD W9, W9, 0x1
	0x03A0F88C CMP W2, 0x1
	0x03A0F890 STP W31, W9, [X8 + 0x18]
	0x03A0F894 B.LT 0x3A0F8A8
	0x03A0F898 LDR X0, [X8 + 0x10]
	0x03A0F89C MOV W1, W31
	0x03A0F8A0 MOV X3, X31
	0x03A0F8A4 BL 0x339FA34
	0x03A0F8A8 MOVN X8, 0x0
	0x03A0F8AC STR X8, [X19 + 0x60]
	0x03A0F8B0 LDP X20, X19, [X31 + 0x10]
	0x03A0F8B4 LDR X30, [X31], #0x20
	0x03A0F8B8 RET
	0x03A0F8BC BL 0x1C16F20
	0x03A0F8C0 FMOV D1, -0.5
	0x03A0F8C4 FMOV D2, 0.5
	0x03A0F8C8 FCMP D0, 0x0
	0x03A0F8CC MOVZ X8, 0x7FF00000
	0x03A0F8D0 FADD D1, D0, D1
	0x03A0F8D4 FADD D0, D0, D2
	0x03A0F8D8 FMOV D2, X8
	0x03A0F8DC FCSEL D0, D1, D0, MI
	0x03A0F8E0 FCVTZS X8, D0
	0x03A0F8E4 FCMP D0, D2
	0x03A0F8E8 MOVZ X9, 0x80000000
	0x03A0F8EC CSEL X0, X9, X8, EQ
	0x03A0F8F0 RET
	0x03A0F8F4 SUB X31, X31, 0x1C0
	0x03A0F8F8 STP X29, X30, [X31 + 0x160]
	0x03A0F8FC STP X28, X27, [X31 + 0x170]
	0x03A0F900 STP X26, X25, [X31 + 0x180]
	0x03A0F904 STP X24, X23, [X31 + 0x190]
	0x03A0F908 STP X22, X21, [X31 + 0x1A0]
	0x03A0F90C STP X20, X19, [X31 + 0x1B0]
	0x03A0F910 ADRP X19, 0x9D2000
	0x03A0F914 LDRB W8, [X19 + 0xFA8]
	0x03A0F918 MOV W21, W3
	0x03A0F91C MOV W24, W2
	0x03A0F920 MOV X22, X1
	0x03A0F924 MOV X25, X0
	0x03A0F928 TBNZ X8, 0x0, 0x3A0F97C
	0x03A0F92C ADRP X0, 0x745000
	0x03A0F930 LDR X0, [X0 + 0x310]
	0x03A0F934 BL 0x1C16CF4
	0x03A0F938 ADRP X0, 0x745000
	0x03A0F93C LDR X0, [X0 + 0x200]
	0x03A0F940 BL 0x1C16CF4
	0x03A0F944 ADRP X0, 0x745000
	0x03A0F948 LDR X0, [X0 + 0x210]
	0x03A0F94C BL 0x1C16CF4
	0x03A0F950 ADRP X0, 0x745000
	0x03A0F954 LDR X0, [X0 + 0x150]
	0x03A0F958 BL 0x1C16CF4
	0x03A0F95C ADRP X0, 0x745000
	0x03A0F960 LDR X0, [X0 + 0x330]
	0x03A0F964 BL 0x1C16CF4
	0x03A0F968 ADRP X0, 0x745000
	0x03A0F96C LDR X0, [X0 + 0x338]
	0x03A0F970 BL 0x1C16CF4
	0x03A0F974 MOVZ W8, 0x1
	0x03A0F978 STRB W8, [X19 + 0xFA8]
	0x03A0F97C CBZ X22, 0x3A0FE80
	0x03A0F980 LDR W23, [X22 + 0x18]
	0x03A0F984 SUBS W28, W23, 0x1
	0x03A0F988 B.MI 0x3A0FE14
	0x03A0F98C ADRP X8, 0x745000
	0x03A0F990 LDR X8, [X8 + 0x338]
	0x03A0F994 LDR X0, [X8]
	0x03A0F998 BL 0x1C16F10
	0x03A0F99C MOV X1, X31
	0x03A0F9A0 MOV X20, X0
	0x03A0F9A4 BL 0x3A03D4C
	0x03A0F9A8 CBZ X20, 0x3A0FE80
	0x03A0F9AC ADRP X27, 0x745000
	0x03A0F9B0 LDR X27, [X27 + 0x210]
	0x03A0F9B4 CMP W21, 0x1
	0x03A0F9B8 STP W24, W21, [X20 + 0x24]
	0x03A0F9BC B.HI 0x3A0FA44
	0x03A0F9C0 CMP W28, 0x1
	0x03A0F9C4 B.LT 0x3A0FA44
	0x03A0F9C8 LDR X2, [X27]
	0x03A0F9CC ADD X8, X31, 0x100
	0x03A0F9D0 MOV X0, X22
	0x03A0F9D4 MOV W1, W31
	0x03A0F9D8 SUB W23, W23, 0x1
	0x03A0F9DC BL 0x2FE4360
	0x03A0F9E0 LDP V0, V1, [X31 + 0x100]
	0x03A0F9E4 LDR V2, [X31 + 0x12]
	0x03A0F9E8 LDR X2, [X27]
	0x03A0F9EC ADD X8, X31, 0x100
	0x03A0F9F0 MOV X0, X22
	0x03A0F9F4 MOV W1, W23
	0x03A0F9F8 STP V0, V1, [X31 + 0x130]
	0x03A0F9FC STR V2, [X31 + 0x15]
	0x03A0FA00 BL 0x2FE4360
	0x03A0FA04 LDP V0, V1, [X31 + 0x100]
	0x03A0FA08 LDP V2, V3, [X31 + 0x120]
	0x03A0FA0C LDP V4, V5, [X31 + 0x140]
	0x03A0FA10 ADD X0, X31, 0xD0
	0x03A0FA14 ADD X1, X31, 0xA0
	0x03A0FA18 MOV X2, X31
	0x03A0FA1C STP V0, V1, [X31 + 0xA0]
	0x03A0FA20 STP V2, V3, [X31 + 0xC0]
	0x03A0FA24 STP V4, V5, [X31 + 0xE0]
	0x03A0FA28 BL 0x3A043F0
	0x03A0FA2C TBZ X0, 0x0, 0x3A0FA40
	0x03A0FA30 CMP W23, 0x2
	0x03A0FA34 B.GE 0x3A0F9C8
	0x03A0FA38 MOV W28, W31
	0x03A0FA3C B 0x3A0FA44
	0x03A0FA40 MOV W28, W23
	0x03A0FA44 LDR X0, [X20 + 0x18]
	0x03A0FA48 CBZ X0, 0x3A0FE80
	0x03A0FA4C ADRP X8, 0x745000
	0x03A0FA50 LDR X8, [X8 + 0x330]
	0x03A0FA54 ADD W1, W28, 0x1
	0x03A0FA58 LDR X2, [X8]
	0x03A0FA5C BL 0x2FE41DC
	0x03A0FA60 LDR X2, [X27]
	0x03A0FA64 LDR X23, [X20 + 0x18]
	0x03A0FA68 ADD X8, X31, 0x130
	0x03A0FA6C MOV X0, X22
	0x03A0FA70 MOV W1, W31
	0x03A0FA74 BL 0x2FE4360
	0x03A0FA78 LDP V0, V1, [X31 + 0x130]
	0x03A0FA7C LDR V2, [X31 + 0x15]
	0x03A0FA80 STP V0, V1, [X31 + 0x70]
	0x03A0FA84 STR V2, [X31 + 0x9]
	0x03A0FA88 CBZ X23, 0x3A0FE80
	0x03A0FA8C LDP V0, V1, [X31 + 0x70]
	0x03A0FA90 LDR V2, [X31 + 0x9]
	0x03A0FA94 ADRP X29, 0x745000
	0x03A0FA98 LDR X29, [X29 + 0x310]
	0x03A0FA9C STP V0, V1, [X31 + 0x100]
	0x03A0FAA0 STR V2, [X31 + 0x12]
	0x03A0FAA4 LDR W9, [X23 + 0x1C]
	0x03A0FAA8 LDR X8, [X23 + 0x10]
	0x03A0FAAC LDR X10, [X29]
	0x03A0FAB0 ADD W9, W9, 0x1
	0x03A0FAB4 STR W9, [X23 + 0x1C]
	0x03A0FAB8 CBZ X8, 0x3A0FE80
	0x03A0FABC LDRSW X9, [X23 + 0x18]
	0x03A0FAC0 LDR W11, [X8 + 0x18]
	0x03A0FAC4 CMP W9, W11
	0x03A0FAC8 B.CS 0x3A0FAF0
	0x03A0FACC ADD W10, W9, 0x1
	0x03A0FAD0 STR W10, [X23 + 0x18]
	0x03A0FAD4 LDP V2, V0, [X31 + 0x110]
	0x03A0FAD8 LDR V1, [X31 + 0x10]
	0x03A0FADC MOVZ W10, 0x30
	0x03A0FAE0 MADD X8, X9, X10, X8
	0x03A0FAE4 STP V2, V0, [X8 + 0x30]
	0x03A0FAE8 STR V1, [X8 + 0x2]
	0x03A0FAEC B 0x3A0FB18
	0x03A0FAF0 LDR X8, [X10 + 0x20]
	0x03A0FAF4 LDP V0, V1, [X31 + 0x100]
	0x03A0FAF8 LDR V2, [X31 + 0x12]
	0x03A0FAFC ADD X1, X31, 0x130
	0x03A0FB00 LDR X8, [X8 + 0xC0]
	0x03A0FB04 MOV X0, X23
	0x03A0FB08 LDR X2, [X8 + 0x70]
	0x03A0FB0C STP V0, V1, [X31 + 0x130]
	0x03A0FB10 STR V2, [X31 + 0x15]
	0x03A0FB14 BL 0x2FE46FC
	0x03A0FB18 CMP W28, 0x1
	0x03A0FB1C STR X25, [X31 + 0x8]
	0x03A0FB20 B.LT 0x3A0FD1C
	0x03A0FB24 MOV W24, W31
	0x03A0FB28 MOV W23, W31
	0x03A0FB2C MOVZ W25, 0x1
	0x03A0FB30 MOVZ W19, 0x30
	0x03A0FB34 LDR X0, [X20 + 0x18]
	0x03A0FB38 CBZ X0, 0x3A0FE80
	0x03A0FB3C LDR X2, [X27]
	0x03A0FB40 ADD X8, X31, 0x100
	0x03A0FB44 MOV W1, W24
	0x03A0FB48 BL 0x2FE4360
	0x03A0FB4C LDP V0, V1, [X31 + 0x100]
	0x03A0FB50 LDR V2, [X31 + 0x12]
	0x03A0FB54 LDR X2, [X27]
	0x03A0FB58 ADD X8, X31, 0x100
	0x03A0FB5C MOV X0, X22
	0x03A0FB60 MOV W1, W25
	0x03A0FB64 STP V0, V1, [X31 + 0x130]
	0x03A0FB68 STR V2, [X31 + 0x15]
	0x03A0FB6C BL 0x2FE4360
	0x03A0FB70 LDP V0, V1, [X31 + 0x100]
	0x03A0FB74 LDP V2, V3, [X31 + 0x120]
	0x03A0FB78 LDP V4, V5, [X31 + 0x140]
	0x03A0FB7C ADD X0, X31, 0x40
	0x03A0FB80 ADD X1, X31, 0x10
	0x03A0FB84 MOV X2, X31
	0x03A0FB88 STP V0, V1, [X31 + 0x10]
	0x03A0FB8C STP V2, V3, [X31 + 0x30]
	0x03A0FB90 STP V4, V5, [X31 + 0x50]
	0x03A0FB94 BL 0x3A0441C
	0x03A0FB98 TBZ X0, 0x0, 0x3A0FD0C
	0x03A0FB9C LDR X2, [X27]
	0x03A0FBA0 LDR X26, [X20 + 0x18]
	0x03A0FBA4 ADD X8, X31, 0x130
	0x03A0FBA8 MOV X0, X22
	0x03A0FBAC MOV W1, W25
	0x03A0FBB0 BL 0x2FE4360
	0x03A0FBB4 LDP V0, V1, [X31 + 0x130]
	0x03A0FBB8 LDR V2, [X31 + 0x15]
	0x03A0FBBC STP V0, V1, [X31 + 0x70]
	0x03A0FBC0 STR V2, [X31 + 0x9]
	0x03A0FBC4 CBZ X26, 0x3A0FE80
	0x03A0FBC8 LDP V0, V1, [X31 + 0x70]
	0x03A0FBCC LDR V2, [X31 + 0x9]
	0x03A0FBD0 LDR X10, [X29]
	0x03A0FBD4 STP V0, V1, [X31 + 0x100]
	0x03A0FBD8 STR V2, [X31 + 0x12]
	0x03A0FBDC LDR W9, [X26 + 0x1C]
	0x03A0FBE0 LDR X8, [X26 + 0x10]
	0x03A0FBE4 ADD W9, W9, 0x1
	0x03A0FBE8 STR W9, [X26 + 0x1C]
	0x03A0FBEC CBZ X8, 0x3A0FE80
	0x03A0FBF0 LDRSW X9, [X26 + 0x18]
	0x03A0FBF4 LDR W11, [X8 + 0x18]
	0x03A0FBF8 CMP W9, W11
	0x03A0FBFC B.CS 0x3A0FC24
	0x03A0FC00 ADD W10, W9, 0x1
	0x03A0FC04 STR W10, [X26 + 0x18]
	0x03A0FC08 LDP V1, V0, [X31 + 0x110]
	0x03A0FC0C LDR V2, [X31 + 0x10]
	0x03A0FC10 NOP
	0x03A0FC14 MADD X8, X9, X19, X8
	0x03A0FC18 STP V1, V0, [X8 + 0x30]
	0x03A0FC1C STR V2, [X8 + 0x2]
	0x03A0FC20 B 0x3A0FC4C
	0x03A0FC24 LDR X8, [X10 + 0x20]
	0x03A0FC28 LDP V0, V1, [X31 + 0x100]
	0x03A0FC2C LDR V2, [X31 + 0x12]
	0x03A0FC30 ADD X1, X31, 0x130
	0x03A0FC34 LDR X8, [X8 + 0xC0]
	0x03A0FC38 MOV X0, X26
	0x03A0FC3C LDR X2, [X8 + 0x70]
	0x03A0FC40 STP V0, V1, [X31 + 0x130]
	0x03A0FC44 STR V2, [X31 + 0x15]
	0x03A0FC48 BL 0x2FE46FC
	0x03A0FC4C LDR X2, [X27]
	0x03A0FC50 ADD X8, X31, 0x130
	0x03A0FC54 MOV X0, X22
	0x03A0FC58 MOV W1, W25
	0x03A0FC5C BL 0x2FE4360
	0x03A0FC60 LDR X0, [X20 + 0x18]
	0x03A0FC64 CBZ X0, 0x3A0FE80
	0x03A0FC68 LDR X2, [X27]
	0x03A0FC6C LDR X26, [X31 + 0x140]
	0x03A0FC70 ADD X8, X31, 0x130
	0x03A0FC74 MOV W1, W23
	0x03A0FC78 ADD W24, W24, 0x1
	0x03A0FC7C BL 0x2FE4360
	0x03A0FC80 LDR X8, [X31 + 0x140]
	0x03A0FC84 CMP X26, X8
	0x03A0FC88 B.LE 0x3A0FC94
	0x03A0FC8C MOV W23, W24
	0x03A0FC90 B 0x3A0FD0C
	0x03A0FC94 LDR X2, [X27]
	0x03A0FC98 ADD X8, X31, 0x130
	0x03A0FC9C MOV X0, X22
	0x03A0FCA0 MOV W1, W25
	0x03A0FCA4 BL 0x2FE4360
	0x03A0FCA8 LDR X0, [X20 + 0x18]
	0x03A0FCAC CBZ X0, 0x3A0FE80
	0x03A0FCB0 LDR X2, [X27]
	0x03A0FCB4 LDR X26, [X31 + 0x140]
	0x03A0FCB8 ADD X8, X31, 0x130
	0x03A0FCBC MOV W1, W23
	0x03A0FCC0 BL 0x2FE4360
	0x03A0FCC4 LDR X8, [X31 + 0x140]
	0x03A0FCC8 CMP X26, X8
	0x03A0FCCC B.NE 0x3A0FD0C
	0x03A0FCD0 LDR X2, [X27]
	0x03A0FCD4 ADD X8, X31, 0x130
	0x03A0FCD8 MOV X0, X22
	0x03A0FCDC MOV W1, W25
	0x03A0FCE0 BL 0x2FE4360
	0x03A0FCE4 LDR X0, [X20 + 0x18]
	0x03A0FCE8 CBZ X0, 0x3A0FE80
	0x03A0FCEC LDR X2, [X27]
	0x03A0FCF0 LDR X26, [X31 + 0x138]
	0x03A0FCF4 ADD X8, X31, 0x130
	0x03A0FCF8 MOV W1, W23
	0x03A0FCFC BL 0x2FE4360
	0x03A0FD00 LDR X8, [X31 + 0x138]
	0x03A0FD04 CMP X26, X8
	0x03A0FD08 B.LT 0x3A0FC8C
	0x03A0FD0C ADD W25, W25, 0x1
	0x03A0FD10 CMP W25, W28
	0x03A0FD14 B.LE 0x3A0FB34
	0x03A0FD18 B 0x3A0FD24
	0x03A0FD1C MOV W23, W31
	0x03A0FD20 MOV W24, W31
	0x03A0FD24 CMP W24, 0x1
	0x03A0FD28 LDR X24, [X31 + 0x8]
	0x03A0FD2C B.GT 0x3A0FD34
	0x03A0FD30 CBZ W21, 0x3A0FE14
	0x03A0FD34 LDR X0, [X24 + 0x88]
	0x03A0FD38 CBZ X0, 0x3A0FE80
	0x03A0FD3C MOV X1, X20
	0x03A0FD40 MOV X2, X31
	0x03A0FD44 BL 0x3A03E7C
	0x03A0FD48 CBNZ W21, 0x3A0FE14
	0x03A0FD4C LDR X0, [X24 + 0x88]
	0x03A0FD50 CBZ X0, 0x3A0FE80
	0x03A0FD54 LDR X1, [X24 + 0x60]
	0x03A0FD58 ADD X19, X24, 0x58
	0x03A0FD5C TBNZ X1, 0x0, 0x3A0FDD8
	0x03A0FD60 LDR X0, [X0 + 0x30]
	0x03A0FD64 CBZ X0, 0x3A0FE80
	0x03A0FD68 ADRP X8, 0x745000
	0x03A0FD6C LDR X8, [X8 + 0x150]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 464
	014 Move X19, 0x9D3000
	015 Move W8, [X19+3997]
	016 Move W20, W3
	017 Move W25, W2
	018 Move X23, X1
	019 Move [X31+16], X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {68}
	024 Move X0, 0x746000
	025 Move X0, [X0+1048]
	026 Call 0x1C17CF4
	027 Move X0, 0x746000
	028 Move X0, [X0+1056]
	029 Call 0x1C17CF4
	030 Move X0, 0x746000
	031 Move X0, [X0+1064]
	032 Call 0x1C17CF4
	033 Move X0, 0x746000
	034 Move X0, [X0+776]
	035 Call 0x1C17CF4
	036 Move X0, 0x746000
	037 Move X0, [X0+784]
	038 Call 0x1C17CF4
	039 Move X0, 0x746000
	040 Move X0, [X0+1072]
	041 Call 0x1C17CF4
	042 Move X0, 0x746000
	043 Move X0, [X0+1000]
	044 Call 0x1C17CF4
	045 Move X0, 0x746000
	046 Move X0, [X0+1040]
	047 Call 0x1C17CF4
	048 Move X0, 0x746000
	049 Move X0, [X0+792]
	050 Call 0x1C17CF4
	051 Move X0, 0x746000
	052 Move X0, [X0+512]
	053 Call 0x1C17CF4
	054 Move X0, 0x746000
	055 Move X0, [X0+576]
	056 Call 0x1C17CF4
	057 Move X0, 0x746000
	058 Move X0, [X0+528]
	059 Call 0x1C17CF4
	060 Move X0, 0x746000
	061 Move X0, [X0+360]
	062 Call 0x1C17CF4
	063 Move X0, 0x746000
	064 Move X0, [X0+1008]
	065 Call 0x1C17CF4
	066 Move W8, 1
	067 Move [X19+3997], W8
	068 Move X8, [X31+16]
	069 NotImplemented "Instruction MOVI not yet implemented."
	070 Move [X31+320], V0
	071 Move [X31+328], V0
	072 Move [X31+288], V0
	073 Move [X31+296], V0
	074 Compare X8, 0
	075 JumpIfEqual {712}
	076 Compare X23, 0
	077 JumpIfEqual {712}
	078 Move [X31+12], W20
	079 Move X9, 0x746000
	080 Move X20, 0x746000
	081 Move X9, [X9+1008]
	082 Move X20, [X20+1040]
	083 Move X8, [X31+16]
	084 Move W19, [X23+24]
	085 Move X0, [X9]
	086 Move W8, [X8+24]
	087 Move [X31+24], W8
	088 Call 0x1C17F10
	089 Move X2, [X20]
	090 Move W1, W19
	091 Move X21, X0
	092 Call List`1<Object>..ctor, X0, X1
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move [X31+28], W19
	095 Move TEMP, X25
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 Invalid "Jump target not found in method."
	099 Move X27, 0x746000
	100 Move X28, 0x746000
	101 Move X27, [X27+1056]
	102 Move X28, [X28+528]
	103 Add X8, X31, 368
	104 Move W25, W31
	105 Move TEMP, 0
	106 Not TEMP
	107 Move X22, TEMP
	108 Add X29, X8, 32
	109 Move X8, 0x746000
	110 Move X8, [X8+360]
	111 Move X0, [X8]
	112 Call 0x1C17F10
	113 Move X8, 0x746000
	114 Move X8, [X8+792]
	115 Move W1, [X31+24]
	116 Move X26, X0
	117 Move X2, [X8]
	118 Call List`1<IntPoint>..ctor, X0, X1
	119 Move X8, 0x746000
	120 Move X8, [X8+1072]
	121 Move X0, [X31+16]
	122 Move X1, [X8]
	123 Add X8, X31, 224
	124 Call List`1<IntPoint>.GetEnumerator, X0
	125 Move V0, [X31+224]
	126 Move V1, [X31+240]
	127 Move V2, [X31+256]
	128 Move V3, [X31+272]
	129 Move [X31+288], V0
	130 Move [X31+296], V1
	131 Move [X31+320], V2
	132 Move [X31+328], V3
	133 Move X1, [X27]
	134 Add X0, X31, 288
	135 Call Enumerator<IntPoint>.MoveNext, X0
	136 Move TEMP, X0
	137 And TEMP, TEMP, 1
	138 Compare TEMP, 1
	139 JumpIfNotEqual {196}
	140 Move X20, [X31+312]
	141 Move X19, [X31+320]
	142 Move X2, [X28]
	143 Add X8, X31, 224
	144 Move X0, X23
	145 Move W1, W25
	146 Call List`1<IntPoint>.get_Item, X0, X1
	147 Move X24, [X31+232]
	148 Move X2, [X28]
	149 Add X8, X31, 224
	150 Move X0, X23
	151 Move W1, W25
	152 Call List`1<IntPoint>.get_Item, X0, X1
	153 Move X8, [X31+240]
	154 Move [X31+224], X31
	155 Move [X31+232], X31
	156 Compare X26, 0
	157 JumpIfEqual {228}
	158 Move V0, [X31+14]
	159 Move X11, 0x746000
	160 Move [X31+22], V0
	161 Move W9, [X26+28]
	162 Move X10, [X26+16]
	163 Move X11, [X11+784]
	164 Add W9, W9, 1
	165 Move X11, [X11]
	166 Move [X26+28], W9
	167 Compare X10, 0
	168 JumpIfEqual {229}
	169 NotImplemented "Instruction LDRSW not yet implemented."
	170 Move W13, [X10+24]
	171 Add X9, X24, X20
	172 Add X8, X8, X19
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Move W13, 48
	175 Add W11, W12, 1
	176 NotImplemented "Instruction MADD not yet implemented."
	177 Move [X26+24], W11
	178 Move [X10+32], X22
	179 Move [X10+40], X9
	180 Move [X10+48], X8
	181 Move [X10+56], X31
	182 Move V0, [X31+22]
	183 Move [X10+4], V0
	184 Move X10, [X11+32]
	185 Move V0, [X31+22]
	186 Move X10, [X10+192]
	187 Move X2, [X10+112]
	188 Move [X31+368], X22
	189 Move [X31+376], X9
	190 Move [X31+384], X8
	191 Move [X31+392], X31
	192 Move [X29], V0
	193 Add X1, X31, 368
	194 Move X0, X26
	195 Call List`1<IntPoint>.AddWithResize, X0, X1
	196 Move X8, 0x746000
	197 Move X8, [X8+1048]
	198 Add X0, X31, 288
	199 Move X1, [X8]
	200 Call Enumerator<IntPoint>.Dispose, X0
	201 Compare X21, 0
	202 JumpIfEqual {712}
	203 Move X9, 0x746000
	204 Move W10, [X21+28]
	205 Move X8, [X21+16]
	206 Move X9, [X9+776]
	207 Add W10, W10, 1
	208 Move X9, [X9]
	209 Move [X21+28], W10
	210 Compare X8, 0
	211 JumpIfEqual {712}
	212 NotImplemented "Instruction LDRSW not yet implemented."
	213 Move W11, [X8+24]
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Add W9, W10, 1
	216 Add X8, X8, X10
	217 Move [X21+24], W9
	218 Move [X8+32], X26
	219 Move X8, [X9+32]
	220 Move X0, X21
	221 Move X1, X26
	222 Move X8, [X8+192]
	223 Move X2, [X8+112]
	224 Call List`1<Object>.AddWithResize, X0, X1
	225 Move W8, [X31+28]
	226 Add W25, W25, 1
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Call 0x1C17F20
	229 Call 0x1C17F20
	230 NotImplemented "Instruction CMP not yet implemented."
	231 Call 0x3EB2AD0
	232 Move X20, [X0]
	233 Call 0x3EB2AE0
	234 Move X8, 0x746000
	235 Move X8, [X8+1048]
	236 Add X0, X31, 288
	237 Move X1, [X8]
	238 Call Enumerator<IntPoint>.Dispose, X0
	239 Compare X20, 0
	240 JumpIfEqual {201}
	241 Move X27, 0x746000
	242 Move X28, 0x746000
	243 Move X27, [X27+1056]
	244 Move X28, [X28+528]
	245 Add X8, X31, 368
	246 Move W25, W31
	247 Move TEMP, 0
	248 Not TEMP
	249 Move X29, TEMP
	250 Add X22, X8, 32
	251 Move X8, 0x746000
	252 Move X8, [X8+360]
	253 Move X0, [X8]
	254 Call 0x1C17F10
	255 Move X8, 0x746000
	256 Move X8, [X8+792]
	257 Move W1, [X31+24]
	258 Move X26, X0
	259 Move X2, [X8]
	260 Call List`1<IntPoint>..ctor, X0, X1
	261 Move X8, 0x746000
	262 Move X8, [X8+1072]
	263 Move X0, [X31+16]
	264 Move X1, [X8]
	265 Add X8, X31, 224
	266 Call List`1<IntPoint>.GetEnumerator, X0
	267 Move V0, [X31+224]
	268 Move V1, [X31+240]
	269 Move V2, [X31+256]
	270 Move V3, [X31+272]
	271 Move [X31+288], V0
	272 Move [X31+296], V1
	273 Move [X31+320], V2
	274 Move [X31+328], V3
	275 Move X1, [X27]
	276 Add X0, X31, 288
	277 Call Enumerator<IntPoint>.MoveNext, X0
	278 Move TEMP, X0
	279 And TEMP, TEMP, 1
	280 Compare TEMP, 1
	281 JumpIfNotEqual {338}
	282 Move X20, [X31+312]
	283 Move X19, [X31+320]
	284 Move X2, [X28]
	285 Add X8, X31, 224
	286 Move X0, X23
	287 Move W1, W25
	288 Call List`1<IntPoint>.get_Item, X0, X1
	289 Move X24, [X31+232]
	290 Move X2, [X28]
	291 Add X8, X31, 224
	292 Move X0, X23
	293 Move W1, W25
	294 Call List`1<IntPoint>.get_Item, X0, X1
	295 Move X8, [X31+240]
	296 Move [X31+224], X31
	297 Move [X31+232], X31
	298 Compare X26, 0
	299 JumpIfEqual {370}
	300 Move V0, [X31+14]
	301 Move X11, 0x746000
	302 Move [X31+22], V0
	303 Move W9, [X26+28]
	304 Move X10, [X26+16]
	305 Move X11, [X11+784]
	306 Add W9, W9, 1
	307 Move X11, [X11]
	308 Move [X26+28], W9
	309 Compare X10, 0
	310 JumpIfEqual {371}
	311 NotImplemented "Instruction LDRSW not yet implemented."
	312 Move W13, [X10+24]
	313 Subtract X9, X24, X20
	314 Subtract X8, X8, X19
	315 NotImplemented "Instruction CMP not yet implemented."
	316 Move W13, 48
	317 Add W11, W12, 1
	318 NotImplemented "Instruction MADD not yet implemented."
	319 Move [X26+24], W11
	320 Move [X10+32], X29
	321 Move [X10+40], X9
	322 Move [X10+48], X8
	323 Move [X10+56], X31
	324 Move V0, [X31+22]
	325 Move [X10+4], V0
	326 Move X10, [X11+32]
	327 Move V0, [X31+22]
	328 Move X10, [X10+192]
	329 Move X2, [X10+112]
	330 Move [X31+368], X29
	331 Move [X31+376], X9
	332 Move [X31+384], X8
	333 Move [X31+392], X31
	334 Move [X22], V0
	335 Add X1, X31, 368
	336 Move X0, X26
	337 Call List`1<IntPoint>.AddWithResize, X0, X1
	338 Move X8, 0x746000
	339 Move X8, [X8+1048]
	340 Add X0, X31, 288
	341 Move X1, [X8]
	342 Call Enumerator<IntPoint>.Dispose, X0
	343 Compare X21, 0
	344 JumpIfEqual {712}
	345 Move X9, 0x746000
	346 Move W10, [X21+28]
	347 Move X8, [X21+16]
	348 Move X9, [X9+776]
	349 Add W10, W10, 1
	350 Move X9, [X9]
	351 Move [X21+28], W10
	352 Compare X8, 0
	353 JumpIfEqual {712}
	354 NotImplemented "Instruction LDRSW not yet implemented."
	355 Move W11, [X8+24]
	356 NotImplemented "Instruction CMP not yet implemented."
	357 Add W9, W10, 1
	358 Add X8, X8, X10
	359 Move [X21+24], W9
	360 Move [X8+32], X26
	361 Move X8, [X9+32]
	362 Move X0, X21
	363 Move X1, X26
	364 Move X8, [X8+192]
	365 Move X2, [X8+112]
	366 Call List`1<Object>.AddWithResize, X0, X1
	367 Move W8, [X31+28]
	368 Add W25, W25, 1
	369 NotImplemented "Instruction CMP not yet implemented."
	370 Call 0x1C17F20
	371 Call 0x1C17F20
	372 NotImplemented "Instruction CMP not yet implemented."
	373 Call 0x3EB2AD0
	374 Move X20, [X0]
	375 Call 0x3EB2AE0
	376 Move X8, 0x746000
	377 Move X8, [X8+1048]
	378 Add X0, X31, 288
	379 Move X1, [X8]
	380 Call Enumerator<IntPoint>.Dispose, X0
	381 Compare X20, 0
	382 JumpIfEqual {343}
	383 Move X0, X20
	384 Call 0x1C17F18
	385 Move X8, 0x746000
	386 Move X8, [X8+1008]
	387 Move X0, [X8]
	388 Move W8, [X31+12]
	389 And W19, W8, 1
	390 Call 0x1C17F10
	391 Move X8, 0x746000
	392 Move X8, [X8+1040]
	393 Move X22, X0
	394 Move X2, [X8]
	395 Move W8, [X31+28]
	396 Add W19, W8, W19
	397 Move W8, [X31+24]
	398 Add W8, W8, 1
	399 Multiply W1, W19, W8
	400 Call List`1<Object>..ctor, X0, X1
	401 Subtract W8, W19, 1
	402 NotImplemented "Instruction CMP not yet implemented."
	403 Move [X31+16], W8
	404 Move X29, 0x746000
	405 Move X29, [X29+576]
	406 Move W8, [X31+24]
	407 Move W27, W31
	408 Subtract W19, W31, W8
	409 Move W8, [X31+24]
	410 Add W28, W27, 1
	411 NotImplemented "Instruction CMP not yet implemented."
	412 Move W20, 1
	413 Move X8, 0x746000
	414 Move X8, [X8+360]
	415 Move X0, [X8]
	416 Call 0x1C17F10
	417 Move X8, 0x746000
	418 Move X8, [X8+792]
	419 Move W1, 4
	420 Move X23, X0
	421 Move X2, [X8]
	422 Call List`1<IntPoint>..ctor, X0, X1
	423 Compare X21, 0
	424 JumpIfEqual {712}
	425 Move W9, [X31+28]
	426 Move X2, [X29]
	427 Move X0, X21
	428 NotImplemented "Instruction SDIV not yet implemented."
	429 NotImplemented "Instruction MSUB not yet implemented."
	430 Move W1, W24
	431 Call List`1<Object>.get_Item, X0, X1
	432 Compare X0, 0
	433 JumpIfEqual {712}
	434 Move X8, 0x746000
	435 Move X8, [X8+528]
	436 Subtract W25, W20, 1
	437 Move W1, W25
	438 Move X2, [X8]
	439 Add X8, X31, 224
	440 Call List`1<IntPoint>.get_Item, X0, X1
	441 Move V0, [X31+224]
	442 Move V1, [X31+240]
	443 Move V2, [X31+16]
	444 Move [X31+176], V0
	445 Move [X31+184], V1
	446 Move [X31+13], V2
	447 Compare X23, 0
	448 JumpIfEqual {712}
	449 Move V0, [X31+176]
	450 Move V1, [X31+192]
	451 Move V2, [X31+13]
	452 Move X10, 0x746000
	453 Move [X31+416], V0
	454 Move [X31+424], V1
	455 Move [X31+28], V2
	456 Move W9, [X23+28]
	457 Move X8, [X23+16]
	458 Move X10, [X10+784]
	459 Add W9, W9, 1
	460 Move X10, [X10]
	461 Move [X23+28], W9
	462 Compare X8, 0
	463 JumpIfEqual {712}
	464 NotImplemented "Instruction LDRSW not yet implemented."
	465 Move W11, [X8+24]
	466 NotImplemented "Instruction CMP not yet implemented."
	467 Add W10, W9, 1
	468 Move [X23+24], W10
	469 Move V1, [X31+432]
	470 Move V0, [X31+448]
	471 Move V2, [X31+26]
	472 Move W10, 48
	473 NotImplemented "Instruction MADD not yet implemented."
	474 Move [X8+48], V1
	475 Move [X8+56], V0
	476 Move [X8+2], V2
	477 Move X8, [X10+32]
	478 Move V0, [X31+416]
	479 Move V1, [X31+432]
	480 Move V2, [X31+28]
	481 Add X1, X31, 224
	482 Move X8, [X8+192]
	483 Move X0, X23
	484 Move X2, [X8+112]
	485 Move [X31+224], V0
	486 Move [X31+232], V1
	487 Move [X31+16], V2
	488 Call List`1<IntPoint>.AddWithResize, X0, X1
	489 Move W9, [X31+28]
	490 Move X2, [X29]
	491 Move X0, X21
	492 NotImplemented "Instruction SDIV not yet implemented."
	493 NotImplemented "Instruction MSUB not yet implemented."
	494 Move W1, W26
	495 Call List`1<Object>.get_Item, X0, X1
	496 Compare X0, 0
	497 JumpIfEqual {712}
	498 Move X8, 0x746000
	499 Move X8, [X8+528]
	500 Move W1, W25
	501 Move X2, [X8]
	502 Add X8, X31, 224
	503 Call List`1<IntPoint>.get_Item, X0, X1
	504 Move V1, [X31+240]
	505 Move V0, [X31+256]
	506 Move V2, [X31+14]
	507 Move X10, 0x746000
	508 Move [X31+144], V1
	509 Move [X31+152], V0
	510 Move [X31+8], V2
	511 Move [X31+416], V2
	512 Move [X31+424], V1
	513 Move [X31+28], V0
	514 Move W9, [X23+28]
	515 Move X8, [X23+16]
	516 Move X10, [X10+784]
	517 Add W9, W9, 1
	518 Move X10, [X10]
	519 Move [X23+28], W9
	520 Compare X8, 0
	521 JumpIfEqual {712}
	522 NotImplemented "Instruction LDRSW not yet implemented."
	523 Move W11, [X8+24]
	524 NotImplemented "Instruction CMP not yet implemented."
	525 Add W10, W9, 1
	526 Move [X23+24], W10
	527 Move V1, [X31+432]
	528 Move V0, [X31+448]
	529 Move V2, [X31+26]
	530 Move W10, 48
	531 NotImplemented "Instruction MADD not yet implemented."
	532 Move [X8+48], V1
	533 Move [X8+56], V0
	534 Move [X8+2], V2
	535 Move X8, [X10+32]
	536 Move V0, [X31+416]
	537 Move V1, [X31+432]
	538 Move V2, [X31+28]
	539 Add X1, X31, 224
	540 Move X8, [X8+192]
	541 Move X0, X23
	542 Move X2, [X8+112]
	543 Move [X31+224], V0
	544 Move [X31+232], V1
	545 Move [X31+16], V2
	546 Call List`1<IntPoint>.AddWithResize, X0, X1
	547 Move X2, [X29]
	548 Move X0, X21
	549 Move W1, W26
	550 Call List`1<Object>.get_Item, X0, X1
	551 Compare X0, 0
	552 JumpIfEqual {712}
	553 Move X8, 0x746000
	554 Move X8, [X8+528]
	555 Add W31, W19, W20
	556 NotImplemented "Instruction CSEL not yet implemented."
	557 Move W1, W25
	558 Move X2, [X8]
	559 Add X8, X31, 224
	560 Call List`1<IntPoint>.get_Item, X0, X1
	561 Move V1, [X31+240]
	562 Move V0, [X31+256]
	563 Move V2, [X31+14]
	564 Move X10, 0x746000
	565 Move [X31+96], V1
	566 Move [X31+104], V0
	567 Move [X31+5], V2
	568 Move [X31+416], V2
	569 Move [X31+424], V1
	570 Move [X31+28], V0
	571 Move W9, [X23+28]
	572 Move X8, [X23+16]
	573 Move X10, [X10+784]
	574 Add W9, W9, 1
	575 Move X10, [X10]
	576 Move [X23+28], W9
	577 Compare X8, 0
	578 JumpIfEqual {712}
	579 NotImplemented "Instruction LDRSW not yet implemented."
	580 Move W11, [X8+24]
	581 NotImplemented "Instruction CMP not yet implemented."
	582 Add W10, W9, 1
	583 Move [X23+24], W10
	584 Move V1, [X31+432]
	585 Move V0, [X31+448]
	586 Move V2, [X31+26]
	587 Move W10, 48
	588 NotImplemented "Instruction MADD not yet implemented."
	589 Move [X8+48], V1
	590 Move [X8+56], V0
	591 Move [X8+2], V2
	592 Move X8, [X10+32]
	593 Move V0, [X31+416]
	594 Move V1, [X31+432]
	595 Move V2, [X31+28]
	596 Add X1, X31, 224
	597 Move X8, [X8+192]
	598 Move X0, X23
	599 Move X2, [X8+112]
	600 Move [X31+224], V0
	601 Move [X31+232], V1
	602 Move [X31+16], V2
	603 Call List`1<IntPoint>.AddWithResize, X0, X1
	604 Move X2, [X29]
	605 Move X0, X21
	606 Move W1, W24
	607 Call List`1<Object>.get_Item, X0, X1
	608 Compare X0, 0
	609 JumpIfEqual {712}
	610 Move X8, 0x746000
	611 Move X8, [X8+528]
	612 Move W1, W25
	613 Move X2, [X8]
	614 Add X8, X31, 224
	615 Call List`1<IntPoint>.get_Item, X0, X1
	616 Move V1, [X31+240]
	617 Move V0, [X31+256]
	618 Move V2, [X31+14]
	619 Move X10, 0x746000
	620 Move [X31+48], V1
	621 Move [X31+56], V0
	622 Move [X31+2], V2
	623 Move [X31+416], V2
	624 Move [X31+424], V1
	625 Move [X31+28], V0
	626 Move W9, [X23+28]
	627 Move X8, [X23+16]
	628 Move X10, [X10+784]
	629 Add W9, W9, 1
	630 Move X10, [X10]
	631 Move [X23+28], W9
	632 Compare X8, 0
	633 JumpIfEqual {712}
	634 NotImplemented "Instruction LDRSW not yet implemented."
	635 Move W11, [X8+24]
	636 NotImplemented "Instruction CMP not yet implemented."
	637 Add W10, W9, 1
	638 Move [X23+24], W10
	639 Move V1, [X31+432]
	640 Move V0, [X31+448]
	641 Move V2, [X31+26]
	642 Move W10, 48
	643 NotImplemented "Instruction MADD not yet implemented."
	644 Move [X8+48], V1
	645 Move [X8+56], V0
	646 Move [X8+2], V2
	647 Move X8, [X10+32]
	648 Move V0, [X31+416]
	649 Move V1, [X31+432]
	650 Move V2, [X31+28]
	651 Add X1, X31, 224
	652 Move X8, [X8+192]
	653 Move X0, X23
	654 Move X2, [X8+112]
	655 Move [X31+224], V0
	656 Move [X31+232], V1
	657 Move [X31+16], V2
	658 Call List`1<IntPoint>.AddWithResize, X0, X1
	659 Move X0, X23
	660 Call Clipper.Area, X0
	661 NotImplemented "Instruction FCMP not yet implemented."
	662 Move X8, 0x746000
	663 Move X8, [X8+1000]
	664 Move X0, X23
	665 Move X1, [X8]
	666 Call List`1<IntPoint>.Reverse, X0
	667 Compare X22, 0
	668 JumpIfEqual {712}
	669 Move X9, 0x746000
	670 Move W10, [X22+28]
	671 Move X8, [X22+16]
	672 Move X9, [X9+776]
	673 Add W10, W10, 1
	674 Move X9, [X9]
	675 Move [X22+28], W10
	676 Compare X8, 0
	677 JumpIfEqual {712}
	678 NotImplemented "Instruction LDRSW not yet implemented."
	679 Move W11, [X8+24]
	680 NotImplemented "Instruction CMP not yet implemented."
	681 Add W9, W10, 1
	682 Add X8, X8, X10
	683 Move [X22+24], W9
	684 Move [X8+32], X23
	685 Move X8, [X9+32]
	686 Move X0, X22
	687 Move X1, X23
	688 Move X8, [X8+192]
	689 Move X2, [X8+112]
	690 Call List`1<Object>.AddWithResize, X0, X1
	691 Add W20, W20, 1
	692 Add W8, W19, W20
	693 NotImplemented "Instruction CMP not yet implemented."
	694 Move W8, [X31+16]
	695 Move W27, W28
	696 NotImplemented "Instruction CMP not yet implemented."
	697 Move X0, X22
	698 Add X31, X31, 464
	699 Move X20, [X31+80]
	700 Move X19, [X31+88]
	701 Move X22, [X31+64]
	702 Move X21, [X31+72]
	703 Move X24, [X31+48]
	704 Move X23, [X31+56]
	705 Move X26, [X31+32]
	706 Move X25, [X31+40]
	707 Move X28, [X31+16]
	708 Move X27, [X31+24]
	709 Move X29, [X31+96]
	710 Move X30, [X31+104]
	711 Return X0
	712 Call 0x1C17F20
	713 Move X19, X0
	714 Move X20, X31
	715 Move X19, X0
	716 Move X20, X31
	717 Move X19, X0
	718 Move X8, 0x746000
	719 Move X8, [X8+1048]
	720 Move X1, [X8]
	721 Add X0, X31, 288
	722 Call Enumerator<IntPoint>.Dispose, X0
	723 Compare X20, 0
	724 JumpIfEqual {735}
	725 Move X0, X20
	726 Call 0x1C17F18
	727 Move X19, X0
	728 Move X8, 0x746000
	729 Move X8, [X8+1048]
	730 Move X1, [X8]
	731 Add X0, X31, 288
	732 Call Enumerator<IntPoint>.Dispose, X0
	733 Compare X20, 0
	734 JumpIfNotEqual {737}
	735 Move X0, X19
	736 Call 0x1D2D690
	737 Move X0, X20
	738 Call 0x1C17F18
	739 Call 0x1991590

Method: System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> MinkowskiSum(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> pattern, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> path, System.Boolean pathIsClosed)

Disassembly:
	0x03A0FD70 LDR X2, [X8]
	0x03A0FD74 BL 0x301BCCC
	0x03A0FD78 CBZ X0, 0x3A0FE80
	0x03A0FD7C LDR X0, [X0 + 0x18]
	0x03A0FD80 CBZ X0, 0x3A0FE80
	0x03A0FD84 LDR W1, [X24 + 0x68]
	0x03A0FD88 LDR X2, [X27]
	0x03A0FD8C ADD X8, X31, 0x130
	0x03A0FD90 BL 0x2FE4360
	0x03A0FD94 LDR X0, [X20 + 0x18]
	0x03A0FD98 CBZ X0, 0x3A0FE80
	0x03A0FD9C LDR X2, [X27]
	0x03A0FDA0 LDP X21, X22, [X31 + 0x138]
	0x03A0FDA4 ADD X8, X31, 0x130
	0x03A0FDA8 MOV W1, W23
	0x03A0FDAC BL 0x2FE4360
	0x03A0FDB0 LDR X8, [X31 + 0x140]
	0x03A0FDB4 CMP X8, X22
	0x03A0FDB8 B.LE 0x3A0FE34
	0x03A0FDBC LDR X0, [X24 + 0x88]
	0x03A0FDC0 CBZ X0, 0x3A0FE80
	0x03A0FDC4 MOV X1, X31
	0x03A0FDC8 BL 0x3A03E2C
	0x03A0FDCC MOVI V0.2D, 0x0
	0x03A0FDD0 SUB W8, W0, 0x1
	0x03A0FDD4 B 0x3A0FDE8
	0x03A0FDD8 MOV X1, X31
	0x03A0FDDC BL 0x3A03E2C
	0x03A0FDE0 MOVI V0.2D, 0x0
	0x03A0FDE4 SUB W8, W0, 0x1
	0x03A0FDE8 SXTW X1, W8
	0x03A0FDEC SXTW X2, W23
	0x03A0FDF0 ADD X0, X31, 0x130
	0x03A0FDF4 MOV X3, X31
	0x03A0FDF8 STP V0, V0, [X31 + 0x140]
	0x03A0FDFC STR V0, [X31 + 0x13]
	0x03A0FE00 BL 0x3A04370
	0x03A0FE04 LDP V1, V0, [X31 + 0x140]
	0x03A0FE08 LDR V2, [X31 + 0x13]
	0x03A0FE0C STP V1, V0, [X19 + 0x10]
	0x03A0FE10 STR V2, [X19]
	0x03A0FE14 LDP X20, X19, [X31 + 0x1B0]
	0x03A0FE18 LDP X22, X21, [X31 + 0x1A0]
	0x03A0FE1C LDP X24, X23, [X31 + 0x190]
	0x03A0FE20 LDP X26, X25, [X31 + 0x180]
	0x03A0FE24 LDP X28, X27, [X31 + 0x170]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x9D3000
	008 Move X22, 0x746000
	009 Move W8, [X23+3998]
	010 Move X22, [X22+1024]
	011 Move W21, W2
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x746000
	019 Move X0, [X0+1024]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+3998], W8
	023 And W3, W21, 1
	024 Move W2, 1
	025 Move X0, X20
	026 Move X1, X19
	027 Call Clipper.Minkowski, X0, X1, X2, X3
	028 Move X8, [X22]
	029 Move X19, X0
	030 Move X0, X8
	031 Call 0x1C17F10
	032 Move W1, W31
	033 Move X20, X0
	034 Call Clipper..ctor, X0, X1
	035 Compare X20, 0
	036 JumpIfEqual {56}
	037 Move W3, 1
	038 Move X0, X20
	039 Move X1, X19
	040 Move W2, W31
	041 Call ClipperBase.AddPaths, X0, X1, X2, X3
	042 Move W1, 1
	043 Move W3, 1
	044 Move W4, 1
	045 Move X0, X20
	046 Move X2, X19
	047 Call Clipper.Execute, X0, X1, X2, X3, X4
	048 Move X0, X19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Move X23, [X31+56]
	055 Return X0
	056 Call 0x1C17F20

Method: System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> TranslatePath(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> path, UnityEngine.Rendering.Universal.IntPoint delta)

Disassembly:
	0x03A0FE28 LDP X29, X30, [X31 + 0x160]
	0x03A0FE2C ADD X31, X31, 0x1C0
	0x03A0FE30 RET
	0x03A0FE34 LDR X0, [X20 + 0x18]
	0x03A0FE38 CBZ X0, 0x3A0FE80
	0x03A0FE3C LDR X2, [X27]
	0x03A0FE40 ADD X8, X31, 0x130
	0x03A0FE44 MOV W1, W23
	0x03A0FE48 BL 0x2FE4360
	0x03A0FE4C LDR X8, [X31 + 0x140]
	0x03A0FE50 CMP X8, X22
	0x03A0FE54 B.NE 0x3A0FE14
	0x03A0FE58 LDR X0, [X20 + 0x18]
	0x03A0FE5C CBZ X0, 0x3A0FE80
	0x03A0FE60 LDR X2, [X27]
	0x03A0FE64 ADD X8, X31, 0x130
	0x03A0FE68 MOV W1, W23
	0x03A0FE6C BL 0x2FE4360
	0x03A0FE70 LDR X8, [X31 + 0x138]
	0x03A0FE74 CMP X8, X21
	0x03A0FE78 B.LT 0x3A0FDBC
	0x03A0FE7C B 0x3A0FE14
	0x03A0FE80 BL 0x1C16F20
	0x03A0FE84 SUB X31, X31, 0x60
	0x03A0FE88 STR X30, [X31 + 0x20]
	0x03A0FE8C STP X24, X23, [X31 + 0x30]
	0x03A0FE90 STP X22, X21, [X31 + 0x40]
	0x03A0FE94 STP X20, X19, [X31 + 0x50]
	0x03A0FE98 ADRP X23, 0x9D2000
	0x03A0FE9C LDRB W8, [X23 + 0xFA9]
	0x03A0FEA0 MOV W19, W3
	0x03A0FEA4 MOV W20, W2
	0x03A0FEA8 MOV X22, X1
	0x03A0FEAC MOV X21, X0
	0x03A0FEB0 TBNZ X8, 0x0, 0x3A0FEEC
	0x03A0FEB4 ADRP X0, 0x745000
	0x03A0FEB8 LDR X0, [X0 + 0x3C8]
	0x03A0FEBC BL 0x1C16CF4
	0x03A0FEC0 ADRP X0, 0x745000
	0x03A0FEC4 LDR X0, [X0 + 0x3D0]
	0x03A0FEC8 BL 0x1C16CF4
	0x03A0FECC ADRP X0, 0x745000
	0x03A0FED0 LDR X0, [X0 + 0x3D8]
	0x03A0FED4 BL 0x1C16CF4
	0x03A0FED8 ADRP X0, 0x745000
	0x03A0FEDC LDR X0, [X0 + 0x3E0]
	0x03A0FEE0 BL 0x1C16CF4
	0x03A0FEE4 MOVZ W8, 0x1
	0x03A0FEE8 STRB W8, [X23 + 0xFA9]
	0x03A0FEEC STP X31, X31, [X31 + 0x8]
	0x03A0FEF0 STR X31, [X31 + 0x18]
	0x03A0FEF4 CBZ X22, 0x3A0FF6C
	0x03A0FEF8 ADRP X8, 0x745000
	0x03A0FEFC LDR X8, [X8 + 0x3E0]
	0x03A0FF00 ADRP X24, 0x745000
	0x03A0FF04 ADRP X23, 0x745000
	0x03A0FF08 MOV X0, X22
	0x03A0FF0C LDR X1, [X8]
	0x03A0FF10 LDR X24, [X24 + 0x3D0]
	0x03A0FF14 LDR X23, [X23 + 0x3C8]
	0x03A0FF18 ADD X8, X31, 0x8
	0x03A0FF1C BL 0x301CB58
	0x03A0FF20 LDR X1, [X24]
	0x03A0FF24 ADD X0, X31, 0x8
	0x03A0FF28 BL 0x2BC4350
	0x03A0FF2C TBZ X0, 0x0, 0x3A0FF48
	0x03A0FF30 LDR X1, [X31 + 0x18]
	0x03A0FF34 MOV X0, X21
	0x03A0FF38 MOV W2, W20
	0x03A0FF3C MOV W3, W19
	0x03A0FF40 BL 0x3A0F8F4
	0x03A0FF44 B 0x3A0FF20
	0x03A0FF48 LDR X1, [X23]
	0x03A0FF4C ADD X0, X31, 0x8
	0x03A0FF50 BL 0x2BC434C
	0x03A0FF54 LDP X20, X19, [X31 + 0x50]
	0x03A0FF58 LDP X22, X21, [X31 + 0x40]
	0x03A0FF5C LDP X24, X23, [X31 + 0x30]
	0x03A0FF60 LDR X30, [X31 + 0x20]
	0x03A0FF64 ADD X31, X31, 0x60
	0x03A0FF68 RET
	0x03A0FF6C BL 0x1C16F20
	0x03A0FF70 B 0x3A0FF74
	0x03A0FF74 MOV X20, X0
	0x03A0FF78 CMP W1, 0x1
	0x03A0FF7C B.NE 0x3A0FFA8
	0x03A0FF80 MOV X0, X20
	0x03A0FF84 BL 0x3EB1AD0
	0x03A0FF88 LDR X19, [X0]
	0x03A0FF8C BL 0x3EB1AE0
	0x03A0FF90 LDR X1, [X23]
	0x03A0FF94 ADD X0, X31, 0x8
	0x03A0FF98 BL 0x2BC434C
	0x03A0FF9C CBZ X19, 0x3A0FF54
	0x03A0FFA0 MOV X0, X19
	0x03A0FFA4 BL 0x1C16F18
	0x03A0FFA8 MOV X19, X31
	0x03A0FFAC B 0x3A0FFB4
	0x03A0FFB0 MOV X20, X0
	0x03A0FFB4 LDR X1, [X23]
	0x03A0FFB8 ADD X0, X31, 0x8
	0x03A0FFBC BL 0x2BC434C
	0x03A0FFC0 CBNZ X19, 0x3A0FFCC
	0x03A0FFC4 MOV X0, X20
	0x03A0FFC8 BL 0x1D2C690
	0x03A0FFCC MOV X0, X19
	0x03A0FFD0 BL 0x1C16F18
	0x03A0FFD4 BL 0x1990590
	0x03A0FFD8 STP X30, X23, [X31 - 0x30]!
	0x03A0FFDC STP X22, X21, [X31 + 0x10]
	0x03A0FFE0 STP X20, X19, [X31 + 0x20]
	0x03A0FFE4 ADRP X20, 0x9D2000
	0x03A0FFE8 LDRB W8, [X20 + 0xFAA]
	0x03A0FFEC MOV X19, X0
	0x03A0FFF0 TBNZ X8, 0x0, 0x3A10014

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+80], X29
	003 Move [X31+88], X30
	004 Move [X31+96], X28
	005 Move [X31+104], X27
	006 Move [X31+112], X26
	007 Move [X31+120], X25
	008 Move [X31+128], X24
	009 Move [X31+136], X23
	010 Move [X31+144], X22
	011 Move [X31+152], X21
	012 Move [X31+160], X20
	013 Move [X31+168], X19
	014 Move X21, 0x9D3000
	015 Move W8, [X21+3999]
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {39}
	022 Move X0, 0x746000
	023 Move X0, [X0+784]
	024 Call 0x1C17CF4
	025 Move X0, 0x746000
	026 Move X0, [X0+792]
	027 Call 0x1C17CF4
	028 Move X0, 0x746000
	029 Move X0, [X0+512]
	030 Call 0x1C17CF4
	031 Move X0, 0x746000
	032 Move X0, [X0+528]
	033 Call 0x1C17CF4
	034 Move X0, 0x746000
	035 Move X0, [X0+360]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X21+3999], W8
	039 Compare X20, 0
	040 JumpIfEqual {136}
	041 Move X8, 0x746000
	042 Move X8, [X8+360]
	043 Move X21, 0x746000
	044 Move W22, [X20+24]
	045 Move X0, [X8]
	046 Move X21, [X21+792]
	047 Call 0x1C17F10
	048 Move X2, [X21]
	049 Move W1, W22
	050 Move X21, X0
	051 Call List`1<IntPoint>..ctor, X0, X1
	052 Move W8, [X20+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X23, 0x746000
	055 Move X24, 0x746000
	056 Move X23, [X23+528]
	057 Move X24, [X24+784]
	058 Add X8, X31, 32
	059 Move W22, W31
	060 Move W25, 48
	061 Add X26, X8, 32
	062 Move TEMP, 0
	063 Not TEMP
	064 Move X27, TEMP
	065 Move X2, [X23]
	066 Add X8, X31, 32
	067 Move X0, X20
	068 Move W1, W22
	069 Call List`1<IntPoint>.get_Item, X0, X1
	070 Move X2, [X23]
	071 Move X28, [X31+40]
	072 Move X29, [X19+8]
	073 Add X8, X31, 32
	074 Move X0, X20
	075 Move W1, W22
	076 Call List`1<IntPoint>.get_Item, X0, X1
	077 Move X8, [X31+48]
	078 Move X9, [X19+16]
	079 Move [X31], X31
	080 Move [X31+8], X31
	081 Compare X21, 0
	082 JumpIfEqual {136}
	083 Move V0, [X31]
	084 Move X12, [X24]
	085 Move [X31+1], V0
	086 Move W10, [X21+28]
	087 Move X11, [X21+16]
	088 Add W10, W10, 1
	089 Move [X21+28], W10
	090 Compare X11, 0
	091 JumpIfEqual {136}
	092 NotImplemented "Instruction LDRSW not yet implemented."
	093 Move W14, [X11+24]
	094 Add X10, X29, X28
	095 Add X8, X9, X8
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Add W9, W13, 1
	098 NotImplemented "Instruction MADD not yet implemented."
	099 Move [X21+24], W9
	100 Move [X11+32], X27
	101 Move [X11+40], X10
	102 Move [X11+48], X8
	103 Move [X11+56], X31
	104 Move V0, [X31+1]
	105 Move [X11+4], V0
	106 Move X9, [X12+32]
	107 Move V0, [X31+1]
	108 Add X1, X31, 32
	109 Move X0, X21
	110 Move X9, [X9+192]
	111 Move X2, [X9+112]
	112 Move [X31+32], X27
	113 Move [X31+40], X10
	114 Move [X31+48], X8
	115 Move [X31+56], X31
	116 Move [X26], V0
	117 Call List`1<IntPoint>.AddWithResize, X0, X1
	118 Move W8, [X20+24]
	119 Add W22, W22, 1
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X0, X21
	122 Move X20, [X31+160]
	123 Move X19, [X31+168]
	124 Move X22, [X31+144]
	125 Move X21, [X31+152]
	126 Move X24, [X31+128]
	127 Move X23, [X31+136]
	128 Move X26, [X31+112]
	129 Move X25, [X31+120]
	130 Move X28, [X31+96]
	131 Move X27, [X31+104]
	132 Move X29, [X31+80]
	133 Move X30, [X31+88]
	134 Add X31, X31, 176
	135 Return X0
	136 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> MinkowskiSum(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> pattern, System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> paths, System.Boolean pathIsClosed)

Disassembly:
	0x03A0FFF4 ADRP X0, 0x745000
	0x03A0FFF8 LDR X0, [X0 + 0x3E8]
	0x03A0FFFC BL 0x1C16CF4
	0x03A10000 ADRP X0, 0x744000
	0x03A10004 LDR X0, [X0 + 0x150]
	0x03A10008 BL 0x1C16CF4
	0x03A1000C MOVZ W8, 0x1
	0x03A10010 STRB W8, [X20 + 0xFAA]
	0x03A10014 ADRP X22, 0x744000
	0x03A10018 ADRP X23, 0x744000
	0x03A1001C LDR X1, [X19 + 0x60]
	0x03A10020 LDR X22, [X22 + 0x150]
	0x03A10024 LDR X23, [X23 + 0x3E8]
	0x03A10028 TBNZ X1, 0x0, 0x3A10058
	0x03A1002C LDR X8, [X19 + 0x88]
	0x03A10030 CBZ X8, 0x3A10150
	0x03A10034 LDR X0, [X8 + 0x30]
	0x03A10038 CBZ X0, 0x3A10150
	0x03A1003C LDR X2, [X22]
	0x03A10040 BL 0x301BCCC
	0x03A10044 CBZ X0, 0x3A10150
	0x03A10048 LDR X0, [X0 + 0x18]
	0x03A1004C MOV X1, X31
	0x03A10050 BL 0x3A0C23C
	0x03A10054 TBZ X0, 0x0, 0x3A100D4
	0x03A10058 LDR X0, [X19 + 0x88]
	0x03A1005C CBZ X0, 0x3A10150
	0x03A10060 MOV W20, W31
	0x03A10064 MOV X1, X31
	0x03A10068 BL 0x3A03E2C
	0x03A1006C CMP W20, W0
	0x03A10070 B.GE 0x3A10154
	0x03A10074 LDR X8, [X19 + 0x88]
	0x03A10078 CBZ X8, 0x3A10150
	0x03A1007C LDR X0, [X8 + 0x30]
	0x03A10080 CBZ X0, 0x3A10150
	0x03A10084 LDR X2, [X22]
	0x03A10088 MOV W1, W20
	0x03A1008C BL 0x301BCCC
	0x03A10090 CBZ X0, 0x3A10150
	0x03A10094 LDR W8, [X0 + 0x28]
	0x03A10098 MOV X21, X0
	0x03A1009C CMP W8, 0x1
	0x03A100A0 B.NE 0x3A100C4
	0x03A100A4 LDR X0, [X21 + 0x18]
	0x03A100A8 MOV X1, X31
	0x03A100AC BL 0x3A0C23C
	0x03A100B0 TBNZ X0, 0x0, 0x3A100C4
	0x03A100B4 LDR X0, [X21 + 0x18]
	0x03A100B8 CBZ X0, 0x3A10150
	0x03A100BC LDR X1, [X23]
	0x03A100C0 BL 0x2FE67C8
	0x03A100C4 LDR X0, [X19 + 0x88]
	0x03A100C8 ADD W20, W20, 0x1
	0x03A100CC CBNZ X0, 0x3A10064
	0x03A100D0 B 0x3A10150
	0x03A100D4 LDR X0, [X19 + 0x88]
	0x03A100D8 CBZ X0, 0x3A10150
	0x03A100DC MOV W20, W31
	0x03A100E0 MOV X1, X31
	0x03A100E4 BL 0x3A03E2C
	0x03A100E8 CMP W20, W0
	0x03A100EC B.GE 0x3A10154
	0x03A100F0 LDR X8, [X19 + 0x88]
	0x03A100F4 CBZ X8, 0x3A10150
	0x03A100F8 LDR X0, [X8 + 0x30]
	0x03A100FC CBZ X0, 0x3A10150
	0x03A10100 LDR X2, [X22]
	0x03A10104 MOV W1, W20
	0x03A10108 BL 0x301BCCC
	0x03A1010C CBZ X0, 0x3A10150
	0x03A10110 LDR W8, [X0 + 0x28]
	0x03A10114 MOV X21, X0
	0x03A10118 CBZ W8, 0x3A10134
	0x03A1011C CMP W8, 0x1
	0x03A10120 B.NE 0x3A10144
	0x03A10124 LDR X0, [X21 + 0x18]
	0x03A10128 MOV X1, X31
	0x03A1012C BL 0x3A0C23C
	0x03A10130 TBZ X0, 0x0, 0x3A10144
	0x03A10134 LDR X0, [X21 + 0x18]
	0x03A10138 CBZ X0, 0x3A10150
	0x03A1013C LDR X1, [X23]
	0x03A10140 BL 0x2FE67C8
	0x03A10144 LDR X0, [X19 + 0x88]
	0x03A10148 ADD W20, W20, 0x1
	0x03A1014C CBNZ X0, 0x3A100E0
	0x03A10150 BL 0x1C16F20
	0x03A10154 LDP X20, X19, [X31 + 0x20]
	0x03A10158 LDP X22, X21, [X31 + 0x10]
	0x03A1015C LDP X30, X23, [X31], #0x30
	0x03A10160 RET
	0x03A10164 SUB X31, X31, 0x40
	0x03A10168 STP D9, D8, [X31 + 0x10]
	0x03A1016C STP X30, X21, [X31 + 0x20]
	0x03A10170 STP X20, X19, [X31 + 0x30]
	0x03A10174 ADRP X21, 0x9D1000
	0x03A10178 LDRB W8, [X21 + 0xFAB]
	0x03A1017C MOV X19, X1
	0x03A10180 MOV X20, X0
	0x03A10184 TBNZ X8, 0x0, 0x3A1019C
	0x03A10188 ADRP X0, 0x6E3000
	0x03A1018C LDR X0, [X0 + 0x5A8]
	0x03A10190 BL 0x1C16CF4
	0x03A10194 MOVZ W8, 0x1
	0x03A10198 STRB W8, [X21 + 0xFAB]
	0x03A1019C LDP X8, X9, [X19 + 0x8]
	0x03A101A0 LDP X10, X11, [X20 + 0x8]
	0x03A101A4 SUB X8, X8, X10
	0x03A101A8 SUB X9, X9, X11
	0x03A101AC ORR X10, X9, X8, 0x0
	0x03A101B0 CBZ X10, 0x3A1020C
	0x03A101B4 ADRP X10, 0x6E3000
	0x03A101B8 LDR X10, [X10 + 0x5A8]
	0x03A101BC SCVTF D8, X8
	0x03A101C0 SCVTF D9, X9

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+96], X30
	003 Move [X31+104], X27
	004 Move [X31+112], X26
	005 Move [X31+120], X25
	006 Move [X31+128], X24
	007 Move [X31+136], X23
	008 Move [X31+144], X22
	009 Move [X31+152], X21
	010 Move [X31+160], X20
	011 Move [X31+168], X19
	012 Move X24, 0x9D2000
	013 Move X25, 0x745000
	014 Move X22, 0x745000
	015 Move X23, 0x745000
	016 Move W8, [X24+4000]
	017 Move X25, [X25+1008]
	018 Move X22, [X22+1016]
	019 Move X23, [X23+1024]
	020 Move W19, W2
	021 Move X20, X1
	022 Move X21, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {47}
	027 Move X0, 0x745000
	028 Move X0, [X0+1024]
	029 Call 0x1C17CF4
	030 Move X0, 0x745000
	031 Move X0, [X0+1016]
	032 Call 0x1C17CF4
	033 Move X0, 0x745000
	034 Move X0, [X0+568]
	035 Call 0x1C17CF4
	036 Move X0, 0x745000
	037 Move X0, [X0+576]
	038 Call 0x1C17CF4
	039 Move X0, 0x745000
	040 Move X0, [X0+528]
	041 Call 0x1C17CF4
	042 Move X0, 0x745000
	043 Move X0, [X0+1008]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X24+4000], W8
	047 Move X0, [X25]
	048 Call 0x1C17F10
	049 Move X1, [X22]
	050 Move X22, X0
	051 Call List`1<Object>..ctor, X0
	052 Move X0, [X23]
	053 Call 0x1C17F10
	054 Move W1, W31
	055 Move X23, X0
	056 Call Clipper..ctor, X0, X1
	057 Compare X20, 0
	058 JumpIfEqual {136}
	059 Move W8, [X20+24]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X26, 0x745000
	062 Move X27, 0x745000
	063 Move X26, [X26+576]
	064 Move X27, [X27+528]
	065 Move W24, W31
	066 Move X2, [X26]
	067 Move X0, X20
	068 Move W1, W24
	069 Call List`1<Object>.get_Item, X0, X1
	070 Move X1, X0
	071 And W3, W19, 1
	072 Move W2, 1
	073 Move X0, X21
	074 Call Clipper.Minkowski, X0, X1, X2, X3
	075 Compare X23, 0
	076 JumpIfEqual {136}
	077 Move X1, X0
	078 Move W3, 1
	079 Move X0, X23
	080 Move W2, W31
	081 Call ClipperBase.AddPaths, X0, X1, X2, X3
	082 Move TEMP, X19
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {112}
	086 Move X2, [X26]
	087 Move X0, X20
	088 Move W1, W24
	089 Call List`1<Object>.get_Item, X0, X1
	090 Compare X21, 0
	091 JumpIfEqual {136}
	092 Move X2, [X27]
	093 Move X25, X0
	094 Add X8, X31, 48
	095 Move X0, X21
	096 Move W1, W31
	097 Call List`1<IntPoint>.get_Item, X0, X1
	098 Move V0, [X31+48]
	099 Move V1, [X31+64]
	100 Move V2, [X31+5]
	101 Add X1, X31, 0
	102 Move X0, X25
	103 Move [X31], V0
	104 Move [X31+8], V1
	105 Move [X31+2], V2
	106 Call Clipper.TranslatePath, X0, X1
	107 Move X1, X0
	108 Move W2, 1
	109 Move W3, 1
	110 Move X0, X23
	111 Call ClipperBase.AddPath, X0, X1, X2, X3
	112 Move W8, [X20+24]
	113 Add W24, W24, 1
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Compare X23, 0
	116 JumpIfEqual {136}
	117 Move W1, 1
	118 Move W3, 1
	119 Move W4, 1
	120 Move X0, X23
	121 Move X2, X22
	122 Call Clipper.Execute, X0, X1, X2, X3, X4
	123 Move X0, X22
	124 Move X20, [X31+160]
	125 Move X19, [X31+168]
	126 Move X22, [X31+144]
	127 Move X21, [X31+152]
	128 Move X24, [X31+128]
	129 Move X23, [X31+136]
	130 Move X26, [X31+112]
	131 Move X25, [X31+120]
	132 Move X30, [X31+96]
	133 Move X27, [X31+104]
	134 Add X31, X31, 176
	135 Return X0
	136 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> MinkowskiDiff(System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> poly1, System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint> poly2)

Disassembly:
	0x03A101C4 LDR X0, [X10]
	0x03A101C8 LDR W10, [X0 + 0xE0]
	0x03A101CC CBNZ W10, 0x3A101D4
	0x03A101D0 BL 0x1C16DFC
	0x03A101D4 FMUL D0, D8, D8
	0x03A101D8 FMUL D1, D9, D9
	0x03A101DC FADD D0, D0, D1
	0x03A101E0 FMOV D2, 1
	0x03A101E4 FSQRT D0, D0
	0x03A101E8 FDIV D1, D2, D0
	0x03A101EC FMUL D0, D1, D9
	0x03A101F0 FNEG D1, D1
	0x03A101F4 FMUL D1, D8, D1
	0x03A101F8 ADD X0, X31, 0x0
	0x03A101FC MOV X1, X31
	0x03A10200 STP X31, X31, [X31]
	0x03A10204 BL 0x3A03A9C
	0x03A10208 B 0x3A10210
	0x03A1020C STP X31, X31, [X31]
	0x03A10210 LDP D0, D1, [X31]
	0x03A10214 LDP X20, X19, [X31 + 0x30]
	0x03A10218 LDP X30, X21, [X31 + 0x20]
	0x03A1021C LDP D9, D8, [X31 + 0x10]
	0x03A10220 ADD X31, X31, 0x40
	0x03A10224 RET
	0x03A10228 STP D15, D14, [X31 - 0xA0]!
	0x03A1022C STP D13, D12, [X31 + 0x10]
	0x03A10230 STP D11, D10, [X31 + 0x20]
	0x03A10234 STP D9, D8, [X31 + 0x30]
	0x03A10238 STP X29, X30, [X31 + 0x40]
	0x03A1023C STP X28, X27, [X31 + 0x50]
	0x03A10240 STP X26, X25, [X31 + 0x60]
	0x03A10244 STP X24, X23, [X31 + 0x70]
	0x03A10248 STP X22, X21, [X31 + 0x80]
	0x03A1024C STP X20, X19, [X31 + 0x90]
	0x03A10250 SUB X31, X31, 0x180
	0x03A10254 ADRP X22, 0x9D1000
	0x03A10258 ADRP X21, 0x744000
	0x03A1025C ADRP X20, 0x744000
	0x03A10260 LDRB W8, [X22 + 0xFAC]
	0x03A10264 LDR X21, [X21 + 0x3F0]
	0x03A10268 LDR X20, [X20 + 0x3F8]
	0x03A1026C MOV V8.16B, V0.16B
	0x03A10270 MOV X19, X0
	0x03A10274 TBNZ X8, 0x0, 0x3A10340

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x9D2000
	007 Move X21, 0x745000
	008 Move W8, [X22+4001]
	009 Move X21, [X21+1024]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x745000
	017 Move X0, [X0+1024]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+4001], W8
	021 Move W3, 1
	022 Move X0, X20
	023 Move X1, X19
	024 Move W2, W31
	025 Call Clipper.Minkowski, X0, X1, X2, X3
	026 Move X8, [X21]
	027 Move X19, X0
	028 Move X0, X8
	029 Call 0x1C17F10
	030 Move W1, W31
	031 Move X20, X0
	032 Call Clipper..ctor, X0, X1
	033 Compare X20, 0
	034 JumpIfEqual {53}
	035 Move W3, 1
	036 Move X0, X20
	037 Move X1, X19
	038 Move W2, W31
	039 Call ClipperBase.AddPaths, X0, X1, X2, X3
	040 Move W1, 1
	041 Move W3, 1
	042 Move W4, 1
	043 Move X0, X20
	044 Move X2, X19
	045 Call Clipper.Execute, X0, X1, X2, X3, X4
	046 Move X0, X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Return X0
	053 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> PolyTreeToPaths(UnityEngine.Rendering.Universal.PolyTree polytree)

Disassembly:
	0x03A10278 ADRP X0, 0x744000
	0x03A1027C LDR X0, [X0 + 0x308]
	0x03A10280 BL 0x1C16CF4
	0x03A10284 ADRP X0, 0x744000
	0x03A10288 LDR X0, [X0 + 0x468]
	0x03A1028C BL 0x1C16CF4
	0x03A10290 ADRP X0, 0x744000
	0x03A10294 LDR X0, [X0 + 0x310]
	0x03A10298 BL 0x1C16CF4
	0x03A1029C ADRP X0, 0x744000
	0x03A102A0 LDR X0, [X0 + 0x470]
	0x03A102A4 BL 0x1C16CF4
	0x03A102A8 ADRP X0, 0x744000
	0x03A102AC LDR X0, [X0 + 0x170]
	0x03A102B0 BL 0x1C16CF4
	0x03A102B4 ADRP X0, 0x744000
	0x03A102B8 LDR X0, [X0 + 0x3F8]
	0x03A102BC BL 0x1C16CF4
	0x03A102C0 ADRP X0, 0x744000
	0x03A102C4 LDR X0, [X0 + 0x200]
	0x03A102C8 BL 0x1C16CF4
	0x03A102CC ADRP X0, 0x744000
	0x03A102D0 LDR X0, [X0 + 0x478]
	0x03A102D4 BL 0x1C16CF4
	0x03A102D8 ADRP X0, 0x744000
	0x03A102DC LDR X0, [X0 + 0x210]
	0x03A102E0 BL 0x1C16CF4
	0x03A102E4 ADRP X0, 0x744000
	0x03A102E8 LDR X0, [X0 + 0x150]
	0x03A102EC BL 0x1C16CF4
	0x03A102F0 ADRP X0, 0x744000
	0x03A102F4 LDR X0, [X0 + 0x320]
	0x03A102F8 BL 0x1C16CF4
	0x03A102FC ADRP X0, 0x744000
	0x03A10300 LDR X0, [X0 + 0x480]
	0x03A10304 BL 0x1C16CF4
	0x03A10308 ADRP X0, 0x744000
	0x03A1030C LDR X0, [X0 + 0x488]
	0x03A10310 BL 0x1C16CF4
	0x03A10314 ADRP X0, 0x744000
	0x03A10318 LDR X0, [X0 + 0x168]
	0x03A1031C BL 0x1C16CF4
	0x03A10320 ADRP X0, 0x744000
	0x03A10324 LDR X0, [X0 + 0x3F0]
	0x03A10328 BL 0x1C16CF4
	0x03A1032C ADRP X0, 0x6E3000
	0x03A10330 LDR X0, [X0 + 0x5A8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x9D2000
	007 Move X22, 0x745000
	008 Move X20, 0x745000
	009 Move W8, [X21+4002]
	010 Move X22, [X22+1008]
	011 Move X20, [X20+1016]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x745000
	018 Move X0, [X0+1016]
	019 Call 0x1C17CF4
	020 Move X0, 0x745000
	021 Move X0, [X0+800]
	022 Call 0x1C17CF4
	023 Move X0, 0x745000
	024 Move X0, [X0+1008]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+4002], W8
	028 Move X0, [X22]
	029 Call 0x1C17F10
	030 Move X1, [X20]
	031 Move X20, X0
	032 Call List`1<Object>..ctor, X0
	033 Compare X19, 0
	034 JumpIfEqual {56}
	035 Move X0, X19
	036 Call PolyTree.get_Total, X0
	037 Compare X20, 0
	038 JumpIfEqual {56}
	039 Move X8, 0x745000
	040 Move X8, [X8+800]
	041 Move W1, W0
	042 Move X0, X20
	043 Move X2, [X8]
	044 Call List`1<Object>.set_Capacity, X0, X1
	045 Move X0, X19
	046 Move W1, W31
	047 Move X2, X20
	048 Call Clipper.AddPolyNodeToPaths, X0, X1, X2
	049 Move X0, X20
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Return X0
	056 Call 0x1C17F20

Method: System.Void AddPolyNodeToPaths(UnityEngine.Rendering.Universal.PolyNode polynode, UnityEngine.Rendering.Universal.Clipper/NodeType nt, System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> paths)

Disassembly:
	0x03A10334 BL 0x1C16CF4
	0x03A10338 MOVZ W8, 0x1
	0x03A1033C STRB W8, [X22 + 0xFAC]
	0x03A10340 LDR X0, [X21]
	0x03A10344 STR X31, [X31 + 0x118]
	0x03A10348 STR W31, [X31 + 0x114]
	0x03A1034C BL 0x1C16F10
	0x03A10350 LDR X1, [X20]
	0x03A10354 MOV X20, X0
	0x03A10358 BL 0x301B7C4
	0x03A1035C MOV V0.16B, V8.16B
	0x03A10360 MOV X0, X31
	0x03A10364 STR X20, [X19 + 0x10]
	0x03A10368 STR D8, [X19 + 0x30]
	0x03A1036C BL 0x3A045EC
	0x03A10370 TBZ X0, 0x0, 0x3A10464
	0x03A10374 LDR X0, [X19 + 0x88]
	0x03A10378 CBZ X0, 0x3A10F70
	0x03A1037C LDR X20, [X19 + 0x10]
	0x03A10380 MOV X1, X31
	0x03A10384 BL 0x3A03E2C
	0x03A10388 CBZ X20, 0x3A10F70
	0x03A1038C ADRP X8, 0x744000
	0x03A10390 LDR X8, [X8 + 0x320]
	0x03A10394 MOV W1, W0
	0x03A10398 MOV X0, X20
	0x03A1039C LDR X2, [X8]
	0x03A103A0 BL 0x301BB48
	0x03A103A4 LDR X0, [X19 + 0x88]
	0x03A103A8 CBZ X0, 0x3A10F70
	0x03A103AC ADRP X21, 0x744000
	0x03A103B0 ADRP X22, 0x744000
	0x03A103B4 LDR X21, [X21 + 0x150]
	0x03A103B8 LDR X22, [X22 + 0x308]
	0x03A103BC MOV W20, W31
	0x03A103C0 MOV X1, X31
	0x03A103C4 BL 0x3A03E2C
	0x03A103C8 CMP W20, W0
	0x03A103CC B.GE 0x3A10F74
	0x03A103D0 LDR X8, [X19 + 0x88]
	0x03A103D4 CBZ X8, 0x3A10F70
	0x03A103D8 LDR X0, [X8 + 0x30]
	0x03A103DC CBZ X0, 0x3A10F70
	0x03A103E0 LDR X2, [X21]
	0x03A103E4 MOV W1, W20
	0x03A103E8 BL 0x301BCCC
	0x03A103EC CBZ X0, 0x3A10F70
	0x03A103F0 LDR W9, [X0 + 0x28]
	0x03A103F4 MOV X8, X0
	0x03A103F8 CBNZ W9, 0x3A10454
	0x03A103FC LDR X0, [X19 + 0x10]
	0x03A10400 CBZ X0, 0x3A10F70
	0x03A10404 LDR W10, [X0 + 0x1C]
	0x03A10408 LDR X1, [X8 + 0x18]
	0x03A1040C LDR X8, [X0 + 0x10]
	0x03A10410 LDR X9, [X22]
	0x03A10414 ADD W10, W10, 0x1
	0x03A10418 STR W10, [X0 + 0x1C]
	0x03A1041C CBZ X8, 0x3A10F70
	0x03A10420 LDRSW X10, [X0 + 0x18]
	0x03A10424 LDR W11, [X8 + 0x18]
	0x03A10428 CMP W10, W11
	0x03A1042C B.CS 0x3A10444
	0x03A10430 ADD W9, W10, 0x1
	0x03A10434 ADD X8, X8, X10, 0x3, LSL
	0x03A10438 STR W9, [X0 + 0x18]
	0x03A1043C STR X1, [X8 + 0x20]
	0x03A10440 B 0x3A10454
	0x03A10444 LDR X8, [X9 + 0x20]
	0x03A10448 LDR X8, [X8 + 0xC0]
	0x03A1044C LDR X2, [X8 + 0x70]
	0x03A10450 BL 0x301BF90
	0x03A10454 LDR X0, [X19 + 0x88]
	0x03A10458 ADD W20, W20, 0x1
	0x03A1045C CBNZ X0, 0x3A103C0
	0x03A10460 B 0x3A10F70
	0x03A10464 LDR V11, [X19 + 0x90]
	0x03A10468 ADRP X20, 0x6E3000
	0x03A1046C LDR X20, [X20 + 0x5A8]
	0x03A10470 FMOV D10, 0.25
	0x03A10474 FCMP D11, 0x0
	0x03A10478 FABS D9, D8
	0x03A1047C B.LS 0x3A104B8
	0x03A10480 LDR X0, [X20]
	0x03A10484 LDR W8, [X0 + 0xE0]
	0x03A10488 CBNZ W8, 0x3A10490
	0x03A1048C BL 0x1C16DFC
	0x03A10490 FMOV D0, 0.25
	0x03A10494 FMUL D10, D9, D0
	0x03A10498 FCMP D11, D10
	0x03A1049C B.LE 0x3A104B4
	0x03A104A0 LDR X0, [X20]
	0x03A104A4 LDR W8, [X0 + 0xE0]
	0x03A104A8 CBNZ W8, 0x3A104B8
	0x03A104AC BL 0x1C16DFC
	0x03A104B0 B 0x3A104B8
	0x03A104B4 LDR V10, [X19 + 0x90]
	0x03A104B8 LDR X0, [X20]
	0x03A104BC LDR W8, [X0 + 0xE0]
	0x03A104C0 CBNZ W8, 0x3A104C8
	0x03A104C4 BL 0x1C16DFC
	0x03A104C8 FDIV D0, D10, D9
	0x03A104CC FMOV D1, 1
	0x03A104D0 FSUB D0, D1, D0
	0x03A104D4 BL 0x3EB1B80
	0x03A104D8 ADRP X8, 0xFFFFFFFFFD0DD000
	0x03A104DC LDR V1, [X8 + 0x4B8]
	0x03A104E0 ADRP X8, 0xFFFFFFFFFD0DE000
	0x03A104E4 LDR V9, [X8 + 0x478]
	0x03A104E8 ADD X0, X31, 0x18
	0x03A104EC FDIV D12, D1, D0
	0x03A104F0 ADD X1, X31, 0x10
	0x03A104F4 FDIV D0, D9, D12
	0x03A104F8 BL 0x3EB1E40
	0x03A104FC LDP D1, D0, [X31 + 0x10]
	0x03A10500 FDIV D2, D12, D9
	0x03A10504 FCMP D8, 0x0
	0x03A10508 STR D2, [X19 + 0x50]
	0x03A1050C STP D0, D1, [X19 + 0x40]
	0x03A10510 B.PL 0x3A1051C
	0x03A10514 FNEG D0, D0
	0x03A10518 STR D0, [X19 + 0x40]
	0x03A1051C LDR X0, [X19 + 0x88]
	0x03A10520 CBZ X0, 0x3A10F70
	0x03A10524 LDR X20, [X19 + 0x10]
	0x03A10528 MOV X1, X31
	0x03A1052C BL 0x3A03E2C

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0x9D2000
	008 Move W8, [X22+4003]
	009 Move X19, X2
	010 Move W20, W1
	011 Move X21, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0x745000
	017 Move X0, [X0+1080]
	018 Call 0x1C17CF4
	019 Move X0, 0x745000
	020 Move X0, [X0+1088]
	021 Call 0x1C17CF4
	022 Move X0, 0x745000
	023 Move X0, [X0+1096]
	024 Call 0x1C17CF4
	025 Move X0, 0x745000
	026 Move X0, [X0+776]
	027 Call 0x1C17CF4
	028 Move X0, 0x745000
	029 Move X0, [X0+1104]
	030 Call 0x1C17CF4
	031 Move X0, 0x745000
	032 Move X0, [X0+512]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X22+4003], W8
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move [X31+8], X31
	038 Move [X31+16], X31
	039 Move [X31+24], X31
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Compare X21, 0
	042 JumpIfEqual {111}
	043 Move W8, [X21+56]
	044 Xor W8, W8, 1
	045 Compare X21, 0
	046 JumpIfEqual {111}
	047 Move W8, 1
	048 Move X1, [X21+24]
	049 Compare X1, 0
	050 JumpIfEqual {111}
	051 Move W9, [X1+24]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSET not yet implemented."
	054 And W31, W8, W9
	055 Compare X19, 0
	056 JumpIfEqual {111}
	057 Move X9, 0x745000
	058 Move X9, [X9+776]
	059 Move W10, [X19+28]
	060 Move X8, [X19+16]
	061 Move X9, [X9]
	062 Add W10, W10, 1
	063 Move [X19+28], W10
	064 Compare X8, 0
	065 JumpIfEqual {111}
	066 NotImplemented "Instruction LDRSW not yet implemented."
	067 Move W11, [X8+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Add W9, W10, 1
	070 Add X8, X8, X10
	071 Move [X19+24], W9
	072 Move [X8+32], X1
	073 Move X8, [X9+32]
	074 Move X0, X19
	075 Move X8, [X8+192]
	076 Move X2, [X8+112]
	077 Call List`1<Object>.AddWithResize, X0, X1
	078 Move X0, [X21+48]
	079 Compare X0, 0
	080 JumpIfEqual {111}
	081 Move X8, 0x745000
	082 Move X8, [X8+1104]
	083 Move X22, 0x745000
	084 Move X21, 0x745000
	085 Move X1, [X8]
	086 Move X22, [X22+1088]
	087 Move X21, [X21+1080]
	088 Add X8, X31, 8
	089 Call List`1<Object>.GetEnumerator, X0
	090 Move X1, [X22]
	091 Add X0, X31, 8
	092 Call Enumerator<Object>.MoveNext, X0
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {101}
	097 Move X0, [X31+24]
	098 Move W1, W20
	099 Move X2, X19
	100 Call Clipper.AddPolyNodeToPaths, X0, X1, X2
	101 Move X1, [X21]
	102 Add X0, X31, 8
	103 Call Enumerator<Object>.Dispose, X0
	104 Move X20, [X31+64]
	105 Move X19, [X31+72]
	106 Move X22, [X31+48]
	107 Move X21, [X31+56]
	108 Move X30, [X31+32]
	109 Add X31, X31, 80
	110 Return 
	111 Call 0x1C17F20
	112 Move X20, X0
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X0, X20
	115 Call 0x3EB2AD0
	116 Move X19, [X0]
	117 Call 0x3EB2AE0
	118 Move X1, [X21]
	119 Add X0, X31, 8
	120 Call Enumerator<Object>.Dispose, X0
	121 Compare X19, 0
	122 JumpIfEqual {104}
	123 Move X0, X19
	124 Call 0x1C17F18
	125 Move X19, X31
	126 Move X20, X0
	127 Move X1, [X21]
	128 Add X0, X31, 8
	129 Call Enumerator<Object>.Dispose, X0
	130 Compare X19, 0
	131 JumpIfNotEqual {134}
	132 Move X0, X20
	133 Call 0x1D2D690
	134 Move X0, X19
	135 Call 0x1C17F18
	136 Call 0x1991590

Method: System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> OpenPathsFromPolyTree(UnityEngine.Rendering.Universal.PolyTree polytree)

Disassembly:
	0x03A10530 CBZ X20, 0x3A10F70
	0x03A10534 ADRP X8, 0x744000
	0x03A10538 LDR X8, [X8 + 0x320]
	0x03A1053C UBFM W1, W0, 0x1F, 0x1E
	0x03A10540 MOV X0, X20
	0x03A10544 LDR X2, [X8]
	0x03A10548 BL 0x301BB48
	0x03A1054C LDR X0, [X19 + 0x88]
	0x03A10550 CBZ X0, 0x3A10F70
	0x03A10554 ADRP X26, 0x744000
	0x03A10558 ADRP X28, 0x744000
	0x03A1055C ADRP X29, 0x744000
	0x03A10560 LDR X26, [X26 + 0x150]
	0x03A10564 LDR X28, [X28 + 0x210]
	0x03A10568 LDR X29, [X29 + 0x478]
	0x03A1056C MOV W20, W31
	0x03A10570 FMOV D13, 1
	0x03A10574 FMOV D14, 0.5
	0x03A10578 FMOV D15, -0.5
	0x03A1057C MOVZ X27, 0x80000000
	0x03A10580 MOV X1, X31
	0x03A10584 BL 0x3A03E2C
	0x03A10588 CMP W20, W0
	0x03A1058C B.GE 0x3A10F74
	0x03A10590 LDR X8, [X19 + 0x88]
	0x03A10594 CBZ X8, 0x3A10F70
	0x03A10598 LDR X0, [X8 + 0x30]
	0x03A1059C CBZ X0, 0x3A10F70
	0x03A105A0 LDR X2, [X26]
	0x03A105A4 MOV W1, W20
	0x03A105A8 BL 0x301BCCC
	0x03A105AC CBZ X0, 0x3A10F70
	0x03A105B0 LDR X8, [X0 + 0x18]
	0x03A105B4 MOV X21, X0
	0x03A105B8 STR X8, [X19 + 0x18]
	0x03A105BC CBZ X8, 0x3A10F70
	0x03A105C0 LDR W23, [X8 + 0x18]
	0x03A105C4 CBZ W23, 0x3A10F64
	0x03A105C8 FCMP D8, 0x0
	0x03A105CC B.LS 0x3A10790
	0x03A105D0 ADRP X8, 0x744000
	0x03A105D4 LDR X8, [X8 + 0x168]
	0x03A105D8 LDR X0, [X8]
	0x03A105DC BL 0x1C16F10
	0x03A105E0 ADRP X8, 0x744000
	0x03A105E4 LDR X8, [X8 + 0x170]
	0x03A105E8 MOV X24, X0
	0x03A105EC LDR X1, [X8]
	0x03A105F0 BL 0x2FE3E58
	0x03A105F4 SUBS W22, W23, 0x1
	0x03A105F8 STR X24, [X19 + 0x20]
	0x03A105FC B.NE 0x3A107A4
	0x03A10600 LDR W8, [X21 + 0x24]
	0x03A10604 CBZ W8, 0x3A109E8
	0x03A10608 LDR X0, [X19 + 0x18]
	0x03A1060C MOVZ X23, 0x7FF00000
	0x03A10610 CBZ X0, 0x3A10F70
	0x03A10614 FMOV D10, -1
	0x03A10618 MOVZ W22, 0x4
	0x03A1061C FMOV D9, -1
	0x03A10620 LDR X2, [X28]
	0x03A10624 ADD X8, X31, 0x150
	0x03A10628 MOV W1, W31
	0x03A1062C BL 0x2FE4360
	0x03A10630 LDR X0, [X19 + 0x18]
	0x03A10634 CBZ X0, 0x3A10F70
	0x03A10638 LDR V0, [X31 + 0x158]
	0x03A1063C FMUL D1, D9, D8
	0x03A10640 LDR X2, [X28]
	0x03A10644 FMOV D11, X23
	0x03A10648 SCVTF D0, D0
	0x03A1064C FADD D0, D1, D0
	0x03A10650 FADD D1, D0, D14
	0x03A10654 FADD D2, D0, D15
	0x03A10658 FCMP D0, 0x0
	0x03A1065C FCSEL D0, D2, D1, MI
	0x03A10660 FCVTZS X8, D0
	0x03A10664 FCMP D0, D11
	0x03A10668 CSEL X21, X27, X8, EQ
	0x03A1066C ADD X8, X31, 0x150
	0x03A10670 MOV W1, W31
	0x03A10674 BL 0x2FE4360
	0x03A10678 LDR V0, [X31 + 0x160]
	0x03A1067C FMUL D1, D10, D8
	0x03A10680 MOVI V3.2D, 0x0
	0x03A10684 ADD X0, X31, 0xE0
	0x03A10688 SCVTF D0, D0
	0x03A1068C FADD D0, D1, D0
	0x03A10690 FADD D1, D0, D14
	0x03A10694 FADD D2, D0, D15
	0x03A10698 FCMP D0, 0x0
	0x03A1069C FCSEL D0, D2, D1, MI
	0x03A106A0 FCVTZS X8, D0
	0x03A106A4 FCMP D0, D11
	0x03A106A8 CSEL X2, X27, X8, EQ
	0x03A106AC MOV X1, X21
	0x03A106B0 MOV X3, X31
	0x03A106B4 STP V3, V3, [X31 + 0xF0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x9D2000
	008 Move X22, 0x745000
	009 Move X20, 0x745000
	010 Move W8, [X21+4004]
	011 Move X22, [X22+1008]
	012 Move X20, [X20+1016]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0x745000
	019 Move X0, [X0+776]
	020 Call 0x1C17CF4
	021 Move X0, 0x745000
	022 Move X0, [X0+1016]
	023 Call 0x1C17CF4
	024 Move X0, 0x745000
	025 Move X0, [X0+336]
	026 Call 0x1C17CF4
	027 Move X0, 0x745000
	028 Move X0, [X0+800]
	029 Call 0x1C17CF4
	030 Move X0, 0x745000
	031 Move X0, [X0+1008]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+4004], W8
	035 Move X0, [X22]
	036 Call 0x1C17F10
	037 Move X1, [X20]
	038 Move X20, X0
	039 Call List`1<Object>..ctor, X0
	040 Compare X19, 0
	041 JumpIfEqual {111}
	042 Move X0, X19
	043 Call PolyNode.get_ChildCount, X0
	044 Compare X20, 0
	045 JumpIfEqual {111}
	046 Move X8, 0x745000
	047 Move X8, [X8+800]
	048 Move W1, W0
	049 Move X0, X20
	050 Move X2, [X8]
	051 Call List`1<Object>.set_Capacity, X0, X1
	052 Move X0, X19
	053 Call PolyNode.get_ChildCount, X0
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X22, 0x745000
	056 Move X23, 0x745000
	057 Move X22, [X22+336]
	058 Move X23, [X23+776]
	059 Move W21, W31
	060 Move X0, [X19+48]
	061 Compare X0, 0
	062 JumpIfEqual {111}
	063 Move X2, [X22]
	064 Move W1, W21
	065 Call List`1<Object>.get_Item, X0, X1
	066 Compare X0, 0
	067 JumpIfEqual {111}
	068 Move W8, [X0+56]
	069 Compare W8, 0
	070 JumpIfEqual {99}
	071 Move X0, [X19+48]
	072 Compare X0, 0
	073 JumpIfEqual {111}
	074 Move X2, [X22]
	075 Move W1, W21
	076 Call List`1<Object>.get_Item, X0, X1
	077 Compare X0, 0
	078 JumpIfEqual {111}
	079 Move W10, [X20+28]
	080 Move X1, [X0+24]
	081 Move X8, [X20+16]
	082 Move X9, [X23]
	083 Add W10, W10, 1
	084 Move [X20+28], W10
	085 Compare X8, 0
	086 JumpIfEqual {111}
	087 NotImplemented "Instruction LDRSW not yet implemented."
	088 Move W11, [X8+24]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Add W9, W10, 1
	091 Add X8, X8, X10
	092 Move [X20+24], W9
	093 Move [X8+32], X1
	094 Move X8, [X9+32]
	095 Move X0, X20
	096 Move X8, [X8+192]
	097 Move X2, [X8+112]
	098 Call List`1<Object>.AddWithResize, X0, X1
	099 Move X0, X19
	100 Add W21, W21, 1
	101 Call PolyNode.get_ChildCount, X0
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X0, X20
	104 Move X20, [X31+32]
	105 Move X19, [X31+40]
	106 Move X22, [X31+16]
	107 Move X21, [X31+24]
	108 Move X30, [X31+48]
	109 Move X23, [X31+56]
	110 Return X0
	111 Call 0x1C17F20

Method: System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Rendering.Universal.IntPoint>> ClosedPathsFromPolyTree(UnityEngine.Rendering.Universal.PolyTree polytree)

Disassembly:
	0x03A106B8 STR V3, [X31 + 0xE]
	0x03A106BC BL 0x3A04370
	0x03A106C0 CBZ X24, 0x3A10F70
	0x03A106C4 LDP V0, V1, [X31 + 0xE0]
	0x03A106C8 LDR V2, [X31 + 0x10]
	0x03A106CC ADRP X10, 0x744000
	0x03A106D0 STP V0, V1, [X31 + 0x120]
	0x03A106D4 STR V2, [X31 + 0x14]
	0x03A106D8 LDR W9, [X24 + 0x1C]
	0x03A106DC LDR X8, [X24 + 0x10]
	0x03A106E0 LDR X10, [X10 + 0x310]
	0x03A106E4 ADD W9, W9, 0x1
	0x03A106E8 LDR X10, [X10]
	0x03A106EC STR W9, [X24 + 0x1C]
	0x03A106F0 CBZ X8, 0x3A10F70
	0x03A106F4 LDRSW X9, [X24 + 0x18]
	0x03A106F8 LDR W11, [X8 + 0x18]
	0x03A106FC CMP W9, W11
	0x03A10700 B.CS 0x3A10728
	0x03A10704 ADD W10, W9, 0x1
	0x03A10708 STR W10, [X24 + 0x18]
	0x03A1070C LDP V1, V0, [X31 + 0x130]
	0x03A10710 LDR V2, [X31 + 0x12]
	0x03A10714 MOVZ W10, 0x30
	0x03A10718 MADD X8, X9, X10, X8
	0x03A1071C STP V1, V0, [X8 + 0x30]
	0x03A10720 STR V2, [X8 + 0x2]
	0x03A10724 B 0x3A10750
	0x03A10728 LDR X8, [X10 + 0x20]
	0x03A1072C LDP V0, V1, [X31 + 0x120]
	0x03A10730 LDR V2, [X31 + 0x14]
	0x03A10734 ADD X1, X31, 0x150
	0x03A10738 LDR X8, [X8 + 0xC0]
	0x03A1073C MOV X0, X24
	0x03A10740 LDR X2, [X8 + 0x70]
	0x03A10744 STP V0, V1, [X31 + 0x150]
	0x03A10748 STR V2, [X31 + 0x17]
	0x03A1074C BL 0x2FE46FC
	0x03A10750 FCMP D9, 0x0
	0x03A10754 B.PL 0x3A10764
	0x03A10758 MOV V0.16B, V10.16B
	0x03A1075C FMOV D9, 1
	0x03A10760 B 0x3A10778
	0x03A10764 FCMP D10, 0x0
	0x03A10768 FMOV D0, 1
	0x03A1076C B.MI 0x3A10778
	0x03A10770 FMOV D9, -1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x9D2000
	007 Move X22, 0x745000
	008 Move X20, 0x745000
	009 Move W8, [X21+4005]
	010 Move X22, [X22+1008]
	011 Move X20, [X20+1016]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x745000
	018 Move X0, [X0+1016]
	019 Call 0x1C17CF4
	020 Move X0, 0x745000
	021 Move X0, [X0+800]
	022 Call 0x1C17CF4
	023 Move X0, 0x745000
	024 Move X0, [X0+1008]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+4005], W8
	028 Move X0, [X22]
	029 Call 0x1C17F10
	030 Move X1, [X20]
	031 Move X20, X0
	032 Call List`1<Object>..ctor, X0
	033 Compare X19, 0
	034 JumpIfEqual {56}
	035 Move X0, X19
	036 Call PolyTree.get_Total, X0
	037 Compare X20, 0
	038 JumpIfEqual {56}
	039 Move X8, 0x745000
	040 Move X8, [X8+800]
	041 Move W1, W0
	042 Move X0, X20
	043 Move X2, [X8]
	044 Call List`1<Object>.set_Capacity, X0, X1
	045 Move W1, 2
	046 Move X0, X19
	047 Move X2, X20
	048 Call Clipper.AddPolyNodeToPaths, X0, X1, X2
	049 Move X0, X20
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Return X0
	056 Call 0x1C17F20

