Type: UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera

Method: UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera/CropFrame get_cropFrame()

Disassembly:
	0x03A02808 STP X31, X31, [X31 + 0x10]
	0x03A0280C STR X31, [X31 + 0x20]

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Void set_cropFrame(UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera/CropFrame value)

Disassembly:
	0x03A02810 BL 0x3C53F40
	0x03A02814 LDR X8, [X31 + 0x20]

ISIL:
	001 Move [X0+44], W1
	002 Return 

Method: UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera/GridSnapping get_gridSnapping()

Disassembly:
	0x03A02818 LDR V0, [X31 + 0x1]
	0x03A0281C STUR X8, [X20 + 0xF4]

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_gridSnapping(UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera/GridSnapping value)

Disassembly:
	0x03A02820 STUR V0, [X20 + 0xE4]
	0x03A02824 CBZ X21, 0x3A028CC

ISIL:
	001 Move [X0+48], W1
	002 Return 

Method: System.Single get_orthographicSize()

Disassembly:
	0x03A02828 LDR X8, [X21 + 0x18]
	0x03A0282C CBZ X8, 0x3A028CC
	0x03A02830 CMP W8, 0x1
	0x03A02834 B.LT 0x3A02A34
	0x03A02838 MOV X24, X31
	0x03A0283C ADD X25, X21, 0x20
	0x03A02840 CMP X24, W8, UXTW

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+64]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move V0, [X8+72]
	006 Move X30, [X31+16]
	007 Return V0
	008 Call 0x1C17F20

Method: System.Int32 get_assetsPPU()

Disassembly:
	0x03A02844 B.CS 0x3A02A94
	0x03A02848 LDR X1, [X25, X24, LSL #3]

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_assetsPPU(System.Int32 value)

Disassembly:
	0x03A0284C LDR X22, [X20 + 0x138]
	0x03A02850 ADD X0, X31, 0x10
	0x03A02854 MOV X2, X31
	0x03A02858 STR W31, [X31 + 0x10]
	0x03A0285C BL 0x3C5A49C
	0x03A02860 CBZ X22, 0x3A02A90
	0x03A02864 LDR W10, [X22 + 0x1C]
	0x03A02868 LDR W1, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {9}
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSINC not yet implemented."
	006 Move [X0+32], W8
	007 Move X30, [X31+16]
	008 Return 
	009 Call 0x1C17F20

Method: System.Int32 get_refResolutionX()

Disassembly:
	0x03A0286C LDR X8, [X22 + 0x10]
	0x03A02870 LDR X9, [X23]

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void set_refResolutionX(System.Int32 value)

Disassembly:
	0x03A02874 ADD W10, W10, 0x1
	0x03A02878 STR W10, [X22 + 0x1C]
	0x03A0287C CBZ X8, 0x3A02A90
	0x03A02880 LDRSW X10, [X22 + 0x18]
	0x03A02884 LDR W11, [X8 + 0x18]
	0x03A02888 CMP W10, W11
	0x03A0288C B.CS 0x3A028A4
	0x03A02890 ADD W9, W10, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {9}
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSINC not yet implemented."
	006 Move [X0+36], W8
	007 Move X30, [X31+16]
	008 Return 
	009 Call 0x1C17F20

Method: System.Int32 get_refResolutionY()

Disassembly:
	0x03A02894 ADD X8, X8, X10, 0x2, LSL
	0x03A02898 STR W9, [X22 + 0x18]

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_refResolutionY(System.Int32 value)

Disassembly:
	0x03A0289C STR W1, [X8 + 0x20]
	0x03A028A0 B 0x3A028B8
	0x03A028A4 LDR X8, [X9 + 0x20]
	0x03A028A8 MOV X0, X22
	0x03A028AC LDR X8, [X8 + 0xC0]
	0x03A028B0 LDR X2, [X8 + 0x70]
	0x03A028B4 BL 0x305D1F8
	0x03A028B8 LDR W8, [X21 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {9}
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSINC not yet implemented."
	006 Move [X0+40], W8
	007 Move X30, [X31+16]
	008 Return 
	009 Call 0x1C17F20

Method: System.Boolean get_upscaleRT()

Disassembly:
	0x03A028BC ADD X24, X24, 0x1
	0x03A028C0 CMP X24, W8, SXTW
	0x03A028C4 B.LT 0x3A02840
	0x03A028C8 B 0x3A02A34

ISIL:
	001 Move W8, [X0+48]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void set_upscaleRT(System.Boolean value)

Disassembly:
	0x03A028CC ADRP X8, 0x752000
	0x03A028D0 LDR X8, [X8 + 0x90]
	0x03A028D4 LDR X21, [X20 + 0x138]
	0x03A028D8 ADD X0, X31, 0x10
	0x03A028DC MOV X2, X31
	0x03A028E0 LDR X1, [X8]
	0x03A028E4 STR W31, [X31 + 0x10]
	0x03A028E8 BL 0x3C5A49C
	0x03A028EC CBZ X21, 0x3A02A90

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {10}
	004 And W31, W1, 1
	005 Move W8, 2
	006 NotImplemented "Instruction CSEL not yet implemented."
	007 Move [X0+48], W8
	008 Move X30, [X31+16]
	009 Return 
	010 Call 0x1C17F20

Method: System.Boolean get_pixelSnapping()

Disassembly:
	0x03A028F0 LDR W10, [X21 + 0x1C]
	0x03A028F4 LDR W1, [X31 + 0x10]
	0x03A028F8 LDR X8, [X21 + 0x10]
	0x03A028FC LDR X9, [X23]

ISIL:
	001 Move W8, [X0+48]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void set_pixelSnapping(System.Boolean value)

Disassembly:
	0x03A02900 ADD W10, W10, 0x1
	0x03A02904 STR W10, [X21 + 0x1C]
	0x03A02908 CBZ X8, 0x3A02A90
	0x03A0290C LDRSW X10, [X21 + 0x18]
	0x03A02910 LDR W11, [X8 + 0x18]
	0x03A02914 ADRP X19, 0x752000
	0x03A02918 LDR X19, [X19 + 0x88]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 And W8, W1, 1
	005 Move [X0+48], W8
	006 Move X30, [X31+16]
	007 Return 
	008 Call 0x1C17F20

Method: System.Boolean get_cropFrameX()

Disassembly:
	0x03A0291C CMP W10, W11
	0x03A02920 B.CS 0x3A02938
	0x03A02924 ADD W9, W10, 0x1
	0x03A02928 ADD X8, X8, X10, 0x2, LSL
	0x03A0292C STR W9, [X21 + 0x18]
	0x03A02930 STR W1, [X8 + 0x20]
	0x03A02934 B 0x3A0294C
	0x03A02938 LDR X8, [X9 + 0x20]
	0x03A0293C MOV X0, X21
	0x03A02940 LDR X8, [X8 + 0xC0]
	0x03A02944 LDR X2, [X8 + 0x70]

ISIL:
	001 Move W8, [X0+44]
	002 Subtract W8, W8, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 And X8, X8, 15
	005 Move W9, 13
	006 NotImplemented "Instruction LSRV not yet implemented."
	007 And W0, W8, 1
	008 Return X0
	009 Move W0, W31
	010 Return X0

Method: System.Void set_cropFrameX(System.Boolean value)

Disassembly:
	0x03A02948 BL 0x305D1F8
	0x03A0294C LDR X1, [X19]
	0x03A02950 LDR X21, [X20 + 0x138]
	0x03A02954 ADD X0, X31, 0x90
	0x03A02958 MOV X2, X31
	0x03A0295C STR W31, [X31 + 0x90]
	0x03A02960 BL 0x3C5A49C
	0x03A02964 CBZ X21, 0x3A02A90
	0x03A02968 LDR W10, [X21 + 0x1C]
	0x03A0296C LDR W1, [X31 + 0x90]
	0x03A02970 LDR X8, [X21 + 0x10]
	0x03A02974 LDR X9, [X23]
	0x03A02978 ADD W10, W10, 0x1
	0x03A0297C STR W10, [X21 + 0x1C]
	0x03A02980 CBZ X8, 0x3A02A90
	0x03A02984 LDRSW X10, [X21 + 0x18]
	0x03A02988 LDR W11, [X8 + 0x18]
	0x03A0298C ADRP X19, 0x752000
	0x03A02990 LDR X19, [X19 + 0x98]

ISIL:
	001 Move W8, [X0+44]
	002 Move TEMP, X1
	003 And TEMP, TEMP, 1
	004 Compare TEMP, 1
	005 JumpIfNotEqual {10}
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Compare W8, 0
	008 JumpIfNotEqual {18}
	009 Move W8, 1
	010 Subtract W9, W8, 3
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W8, 2
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move [X0+44], W31
	015 Return 
	016 Move W8, 3
	017 Move [X0+44], W8
	018 Return 

Method: System.Boolean get_cropFrameY()

Disassembly:
	0x03A02994 CMP W10, W11
	0x03A02998 B.CS 0x3A029B0
	0x03A0299C ADD W9, W10, 0x1
	0x03A029A0 ADD X8, X8, X10, 0x2, LSL
	0x03A029A4 STR W9, [X21 + 0x18]

ISIL:
	001 Move W8, [X0+44]
	002 Subtract W8, W8, 2
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: System.Void set_cropFrameY(System.Boolean value)

Disassembly:
	0x03A029A8 STR W1, [X8 + 0x20]
	0x03A029AC B 0x3A029C4
	0x03A029B0 LDR X8, [X9 + 0x20]
	0x03A029B4 MOV X0, X21
	0x03A029B8 LDR X8, [X8 + 0xC0]
	0x03A029BC LDR X2, [X8 + 0x70]
	0x03A029C0 BL 0x305D1F8
	0x03A029C4 LDR X1, [X19]
	0x03A029C8 LDR X21, [X20 + 0x138]
	0x03A029CC ADD X0, X31, 0x88
	0x03A029D0 MOV X2, X31
	0x03A029D4 STR W31, [X31 + 0x88]
	0x03A029D8 BL 0x3C5A49C
	0x03A029DC CBZ X21, 0x3A02A90
	0x03A029E0 LDR W10, [X21 + 0x1C]
	0x03A029E4 LDR W1, [X31 + 0x88]
	0x03A029E8 LDR X8, [X21 + 0x10]
	0x03A029EC LDR X9, [X23]
	0x03A029F0 ADD W10, W10, 0x1

ISIL:
	001 Move W8, [X0+44]
	002 Move TEMP, X1
	003 And TEMP, TEMP, 1
	004 Compare TEMP, 1
	005 JumpIfNotEqual {10}
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Compare W8, 0
	008 JumpIfNotEqual {18}
	009 Move W8, 2
	010 Subtract W9, W8, 3
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W8, 1
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move [X0+44], W31
	015 Return 
	016 Move W8, 3
	017 Move [X0+44], W8
	018 Return 

Method: System.Boolean get_stretchFill()

Disassembly:
	0x03A029F4 STR W10, [X21 + 0x1C]
	0x03A029F8 CBZ X8, 0x3A02A90
	0x03A029FC LDRSW X10, [X21 + 0x18]
	0x03A02A00 LDR W11, [X8 + 0x18]

ISIL:
	001 Move W8, [X0+44]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void set_stretchFill(System.Boolean value)

Disassembly:
	0x03A02A04 CMP W10, W11
	0x03A02A08 B.CS 0x3A02A20
	0x03A02A0C ADD W9, W10, 0x1
	0x03A02A10 ADD X8, X8, X10, 0x2, LSL
	0x03A02A14 STR W9, [X21 + 0x18]

ISIL:
	001 And W31, W1, 1
	002 Move W8, 3
	003 NotImplemented "Instruction CINC not yet implemented."
	004 Move [X0+44], W8
	005 Return 

Method: System.Int32 get_pixelRatio()

Disassembly:
	0x03A02A18 STR W1, [X8 + 0x20]
	0x03A02A1C B 0x3A02A34
	0x03A02A20 LDR X8, [X9 + 0x20]
	0x03A02A24 MOV X0, X21
	0x03A02A28 LDR X8, [X8 + 0xC0]
	0x03A02A2C LDR X2, [X8 + 0x70]
	0x03A02A30 BL 0x305D1F8
	0x03A02A34 MOVI V0.2D, 0x0
	0x03A02A38 ADD X0, X31, 0x10
	0x03A02A3C MOV W1, W31
	0x03A02A40 MOV X2, X31
	0x03A02A44 STUR V0, [X31 + 0x6C]
	0x03A02A48 STP V0, V0, [X31 + 0x50]
	0x03A02A4C STP V0, V0, [X31 + 0x30]
	0x03A02A50 STP V0, V0, [X31 + 0x10]
	0x03A02A54 BL 0x3C56240
	0x03A02A58 ADD X0, X20, 0x140
	0x03A02A5C ADD X1, X31, 0x10
	0x03A02A60 MOVZ W2, 0x6C

ISIL:
	001 Move [X31-16], X30
	002 Move W9, [X0+72]
	003 Move X8, [X0+64]
	004 Compare W9, 0
	005 JumpIfEqual {13}
	006 Compare X8, 0
	007 JumpIfEqual {19}
	008 Move W9, [X0+48]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W9, [X8+40]
	011 Move W8, [X8+80]
	012 Multiply W0, W8, W9
	013 Compare X8, 0
	014 JumpIfEqual {19}
	015 Move W0, [X8+40]
	016 Move W0, [X8+80]
	017 Move X30, [X31+16]
	018 Return X0
	019 Call 0x1C17F20

Method: System.Boolean get_requiresUpscalePass()

Disassembly:
	0x03A02A64 BL 0x3EB1AC0
	0x03A02A68 LDR X8, [X31 + 0x8]
	0x03A02A6C LDP X22, X21, [X31 + 0xE0]
	0x03A02A70 LDP X24, X23, [X31 + 0xD0]
	0x03A02A74 LDP X26, X25, [X31 + 0xC0]
	0x03A02A78 STR X8, [X20 + 0x100]
	0x03A02A7C LDP X20, X19, [X31 + 0xF0]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+64]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+84]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: UnityEngine.Vector3 RoundToPixel(UnityEngine.Vector3 position)

Disassembly:
	0x03A02A80 LDP X28, X27, [X31 + 0xB0]
	0x03A02A84 LDP X29, X30, [X31 + 0xA0]
	0x03A02A88 ADD X31, X31, 0x100
	0x03A02A8C RET
	0x03A02A90 BL 0x1C16F20
	0x03A02A94 BL 0x1C16F28
	0x03A02A98 SUB X31, X31, 0x60
	0x03A02A9C STP X30, X27, [X31 + 0x10]
	0x03A02AA0 STP X26, X25, [X31 + 0x20]
	0x03A02AA4 STP X24, X23, [X31 + 0x30]
	0x03A02AA8 STP X22, X21, [X31 + 0x40]
	0x03A02AAC STP X20, X19, [X31 + 0x50]
	0x03A02AB0 ADRP X27, 0x9DF000
	0x03A02AB4 ADRP X26, 0x752000
	0x03A02AB8 LDRB W8, [X27 + 0xF56]
	0x03A02ABC LDR X26, [X26 + 0xA0]
	0x03A02AC0 MOV X21, X6
	0x03A02AC4 MOV W22, W5
	0x03A02AC8 MOV W23, W4
	0x03A02ACC MOV X24, X3
	0x03A02AD0 MOV W25, W2
	0x03A02AD4 MOV W20, W1
	0x03A02AD8 MOV X19, X0
	0x03A02ADC TBNZ X8, 0x0, 0x3A02B00
	0x03A02AE0 ADRP X0, 0x752000
	0x03A02AE4 LDR X0, [X0 + 0xA8]
	0x03A02AE8 BL 0x1C16CF4
	0x03A02AEC ADRP X0, 0x752000
	0x03A02AF0 LDR X0, [X0 + 0xA0]
	0x03A02AF4 BL 0x1C16CF4
	0x03A02AF8 MOVZ W8, 0x1
	0x03A02AFC STRB W8, [X27 + 0xF56]
	0x03A02B00 LDR X0, [X26]
	0x03A02B04 ADD X1, X31, 0xC
	0x03A02B08 STR W20, [X31 + 0xC]
	0x03A02B0C BL 0x1C16E04
	0x03A02B10 MOV X1, X31
	0x03A02B14 BL 0x33BE520
	0x03A02B18 CBZ X0, 0x3A02B7C
	0x03A02B1C LDR X8, [X0]
	0x03A02B20 ADRP X26, 0x752000
	0x03A02B24 LDP X9, X1, [X8 + 0x1A8]
	0x03A02B28 LDR X26, [X26 + 0xA8]
	0x03A02B2C BLR X9
	0x03A02B30 MOV X1, X0
	0x03A02B34 MOV X0, X19
	0x03A02B38 MOV W2, W25
	0x03A02B3C MOV X3, X24
	0x03A02B40 MOV W4, W23
	0x03A02B44 MOV W5, W22
	0x03A02B48 MOV X6, X21
	0x03A02B4C BL 0x3A02618
	0x03A02B50 LDR X1, [X26]
	0x03A02B54 MOV W0, W20
	0x03A02B58 BL 0x2235BC0
	0x03A02B5C STR X0, [X19 + 0x110]
	0x03A02B60 LDP X20, X19, [X31 + 0x50]
	0x03A02B64 LDP X22, X21, [X31 + 0x40]
	0x03A02B68 LDP X24, X23, [X31 + 0x30]
	0x03A02B6C LDP X26, X25, [X31 + 0x20]
	0x03A02B70 LDP X30, X27, [X31 + 0x10]
	0x03A02B74 ADD X31, X31, 0x60
	0x03A02B78 RET
	0x03A02B7C BL 0x1C16F20
	0x03A02B80 STP D11, D10, [X31 - 0x80]!
	0x03A02B84 STP D9, D8, [X31 + 0x10]
	0x03A02B88 STP X29, X30, [X31 + 0x20]
	0x03A02B8C STP X28, X27, [X31 + 0x30]
	0x03A02B90 STP X26, X25, [X31 + 0x40]
	0x03A02B94 STP X24, X23, [X31 + 0x50]
	0x03A02B98 STP X22, X21, [X31 + 0x60]
	0x03A02B9C STP X20, X19, [X31 + 0x70]
	0x03A02BA0 SUB X31, X31, 0x400
	0x03A02BA4 MRS X27, 0xC000
	0x03A02BA8 LDR X8, [X27 + 0x28]
	0x03A02BAC ADRP X21, 0x9DF000
	0x03A02BB0 MOV X19, X2
	0x03A02BB4 MOV X20, X0
	0x03A02BB8 STR X8, [X31 + 0x3F8]
	0x03A02BBC LDRB W8, [X21 + 0xF57]
	0x03A02BC0 STR X1, [X31 + 0x258]
	0x03A02BC4 TBNZ X8, 0x0, 0x3A02C3C
	0x03A02BC8 ADRP X0, 0x6F1000
	0x03A02BCC LDR X0, [X0 + 0xA28]
	0x03A02BD0 BL 0x1C16CF4
	0x03A02BD4 ADRP X0, 0x752000
	0x03A02BD8 LDR X0, [X0 + 0xB0]
	0x03A02BDC BL 0x1C16CF4
	0x03A02BE0 ADRP X0, 0x752000
	0x03A02BE4 LDR X0, [X0 + 0xB8]
	0x03A02BE8 BL 0x1C16CF4
	0x03A02BEC ADRP X0, 0x752000
	0x03A02BF0 LDR X0, [X0 + 0x10]
	0x03A02BF4 BL 0x1C16CF4
	0x03A02BF8 ADRP X0, 0x74E000
	0x03A02BFC LDR X0, [X0 + 0xC80]
	0x03A02C00 BL 0x1C16CF4
	0x03A02C04 ADRP X0, 0x751000
	0x03A02C08 LDR X0, [X0 + 0xFF0]
	0x03A02C0C BL 0x1C16CF4
	0x03A02C10 ADRP X0, 0x752000
	0x03A02C14 LDR X0, [X0 + 0xC0]
	0x03A02C18 BL 0x1C16CF4
	0x03A02C1C ADRP X0, 0x752000
	0x03A02C20 LDR X0, [X0 + 0xC8]
	0x03A02C24 BL 0x1C16CF4
	0x03A02C28 ADRP X0, 0x752000
	0x03A02C2C LDR X0, [X0 + 0xD0]
	0x03A02C30 BL 0x1C16CF4
	0x03A02C34 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move X8, [X0+64]
	007 Compare X8, 0
	008 JumpIfEqual {96}
	009 Move V10, [X8+76]
	010 Move V8, V2
	011 Move V9, V1
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 NotImplemented "Instruction FDIV not yet implemented."
	014 NotImplemented "Instruction FCVT not yet implemented."
	015 Add X0, X31, 40
	016 Call 0x3EB2C00
	017 NotImplemented "Instruction FCMP not yet implemented."
	018 Move D1, -0.5
	019 NotImplemented "Instruction FCMP not yet implemented."
	020 Move V0, [X31+40]
	021 Move S1, -1
	022 Move D1, 0.5
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 Move V0, [X31+40]
	025 Move S1, 1
	026 NotImplemented "Instruction FCVTZS not yet implemented."
	027 NotImplemented "Instruction INVALID not yet implemented."
	028 Add S1, S0, S1
	029 And X31, X8, 1
	030 NotImplemented "Instruction FCSEL not yet implemented."
	031 Move S0, -0.5
	032 Add S0, S11, S0
	033 NotImplemented "Instruction FRINTP not yet implemented."
	034 Move S0, 0.5
	035 Add S0, S11, S0
	036 NotImplemented "Instruction FRINTM not yet implemented."
	037 NotImplemented "Instruction FDIV not yet implemented."
	038 NotImplemented "Instruction FCVT not yet implemented."
	039 Add X0, X31, 40
	040 Call 0x3EB2C00
	041 NotImplemented "Instruction FCMP not yet implemented."
	042 Move D1, -0.5
	043 NotImplemented "Instruction FCMP not yet implemented."
	044 Move V0, [X31+40]
	045 Move S1, -1
	046 Move D1, 0.5
	047 NotImplemented "Instruction FCMP not yet implemented."
	048 Move V0, [X31+40]
	049 Move S1, 1
	050 NotImplemented "Instruction FCVTZS not yet implemented."
	051 NotImplemented "Instruction INVALID not yet implemented."
	052 Add S1, S0, S1
	053 And X31, X8, 1
	054 NotImplemented "Instruction FCSEL not yet implemented."
	055 Move S0, -0.5
	056 Add S0, S9, S0
	057 NotImplemented "Instruction FRINTP not yet implemented."
	058 Move S0, 0.5
	059 Add S0, S9, S0
	060 NotImplemented "Instruction FRINTM not yet implemented."
	061 NotImplemented "Instruction FDIV not yet implemented."
	062 NotImplemented "Instruction FCVT not yet implemented."
	063 Add X0, X31, 40
	064 Call 0x3EB2C00
	065 NotImplemented "Instruction FCMP not yet implemented."
	066 Move D1, -0.5
	067 NotImplemented "Instruction FCMP not yet implemented."
	068 Move V0, [X31+40]
	069 Move S1, -1
	070 Move D1, 0.5
	071 NotImplemented "Instruction FCMP not yet implemented."
	072 Move V0, [X31+40]
	073 Move S1, 1
	074 NotImplemented "Instruction FCVTZS not yet implemented."
	075 NotImplemented "Instruction INVALID not yet implemented."
	076 Add S1, S0, S1
	077 And X31, X8, 1
	078 NotImplemented "Instruction FCSEL not yet implemented."
	079 Move S0, -0.5
	080 Add S0, S8, S0
	081 NotImplemented "Instruction FRINTP not yet implemented."
	082 Move S0, 0.5
	083 Add S0, S8, S0
	084 NotImplemented "Instruction FRINTM not yet implemented."
	085 Multiply S0, S10, S11
	086 Multiply S9, S10, S9
	087 Multiply S8, S10, S1
	088 Move V1, V9
	089 Move V2, V8
	090 Move X30, [X31+32]
	091 Move D9, [X31+16]
	092 Move D8, [X31+24]
	093 Move D11, [X31+48]
	094 Move D10, [X31+56]
	095 Return X0
	096 Call 0x1C17F20

Method: System.Single CorrectCinemachineOrthoSize(System.Single targetOrthoSize)

Disassembly:
	0x03A02C38 STRB W8, [X21 + 0xF57]
	0x03A02C3C ADRP X21, 0x752000
	0x03A02C40 LDR X21, [X21 + 0xB8]
	0x03A02C44 ADD X0, X31, 0x330
	0x03A02C48 MOVZ W2, 0xC4
	0x03A02C4C MOV W1, W31
	0x03A02C50 BL 0x3EB1B10
	0x03A02C54 MOVI V0.2D, 0x0

ISIL:
	001 Move X8, X0
	002 Move X0, [X0+64]
	003 Move W9, 1
	004 Move [X8+72], W9
	005 Compare X0, 0
	006 JumpIfEqual {10}
	007 Move X1, X31
	008 Call PixelPerfectCameraInternal.CorrectCinemachineOrthoSize, X0, V0
	009 Return V0
	010 Return V0

Method: UnityEngine.FilterMode get_finalBlitFilterMode()

Disassembly:
	0x03A02C58 STRB W31, [X31 + 0x250]
	0x03A02C5C STP V0, V0, [X31 + 0x230]
	0x03A02C60 STP V0, V0, [X31 + 0x210]
	0x03A02C64 STP V0, V0, [X31 + 0x1F0]

ISIL:
	001 Move W8, [X0+52]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: UnityEngine.Vector2Int get_offscreenRTSize()

Disassembly:
	0x03A02C68 STP V0, V0, [X31 + 0x1D0]
	0x03A02C6C LDR W8, [X20 + 0xE0]
	0x03A02C70 CMP W8, 0x1
	0x03A02C74 B.NE 0x3A02C80
	0x03A02C78 MOVZ W3, 0x17
	0x03A02C7C B 0x3A02C84
	0x03A02C80 LDR W3, [X19 + 0x18C]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+64]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move X0, [X8+48]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: UnityEngine.Vector2Int get_cameraRTSize()

Disassembly:
	0x03A02C84 LDR X1, [X20 + 0x138]
	0x03A02C88 ADD X8, X31, 0x260
	0x03A02C8C MOV X0, X20
	0x03A02C90 MOV X2, X19
	0x03A02C94 MOV X4, X31
	0x03A02C98 BL 0x3A42FD4
	0x03A02C9C ADD X0, X31, 0x330
	0x03A02CA0 ADD X1, X31, 0x260
	0x03A02CA4 MOVZ W2, 0xC4
	0x03A02CA8 BL 0x3EB1AC0
	0x03A02CAC LDR X0, [X21]
	0x03A02CB0 LDR X21, [X20 + 0x118]
	0x03A02CB4 LDR W8, [X0 + 0xE0]
	0x03A02CB8 CBNZ W8, 0x3A02CC0
	0x03A02CBC BL 0x1C16DFC
	0x03A02CC0 ADD X0, X31, 0x330
	0x03A02CC4 MOV X1, X21
	0x03A02CC8 MOV X2, X31
	0x03A02CCC BL 0x3C536EC
	0x03A02CD0 LDR W1, [X20 + 0x120]
	0x03A02CD4 ADD X0, X31, 0x330
	0x03A02CD8 MOV X2, X31
	0x03A02CDC BL 0x3C53744
	0x03A02CE0 LDR X1, [X20 + 0x128]
	0x03A02CE4 ADD X0, X31, 0x330
	0x03A02CE8 MOV X2, X31
	0x03A02CEC BL 0x3C53718
	0x03A02CF0 LDR W1, [X20 + 0x130]
	0x03A02CF4 ADD X0, X31, 0x330
	0x03A02CF8 MOV X2, X31
	0x03A02CFC BL 0x3C5374C
	0x03A02D00 LDR X21, [X19]
	0x03A02D04 LDR X2, [X20 + 0x110]
	0x03A02D08 LDR X23, [X19 + 0xD8]
	0x03A02D0C LDR V10, [X19 + 0x12C]
	0x03A02D10 LDR V11, [X19 + 0x130]
	0x03A02D14 ADD X0, X31, 0x250
	0x03A02D18 MOV X1, X21
	0x03A02D1C MOV X3, X31
	0x03A02D20 BL 0x39B1DB0
	0x03A02D24 LDR X8, [X20 + 0x100]
	0x03A02D28 CBZ X8, 0x3A03128
	0x03A02D2C LDRB W8, [X8 + 0x10]
	0x03A02D30 ADD X22, X19, 0x18
	0x03A02D34 CBZ W8, 0x3A02EF0
	0x03A02D38 LDR X0, [X19 + 0x190]
	0x03A02D3C CBZ X0, 0x3A03130
	0x03A02D40 MOV X1, X31
	0x03A02D44 BL 0x3984C98
	0x03A02D48 TBZ X0, 0x0, 0x3A02D7C
	0x03A02D4C ADRP X8, 0x6F1000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x9E0000
	005 Move W8, [X20+3919]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x6F2000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3919], W8
	016 Move X0, [X19+56]
	017 Compare X0, 0
	018 JumpIfEqual {63}
	019 Move X19, 0x6F2000
	020 Move X19, [X19+1432]
	021 Move X1, X31
	022 Call Camera.get_targetTexture, X0
	023 Move X8, [X19]
	024 Move X19, X0
	025 Move W9, [X8+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {30}
	028 Move X0, X8
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {43}
	038 Move X0, X31
	039 Call Screen.get_width
	040 Move W20, W0
	041 Move X0, X31
	042 Call Screen.get_height
	043 Compare X19, 0
	044 JumpIfEqual {63}
	045 Move X8, [X19]
	046 Move X0, X19
	047 Move X9, [X8+392]
	048 Move X1, [X8+400]
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Move X8, [X19]
	051 Move W20, W0
	052 Move X0, X19
	053 Move X9, [X8+424]
	054 Move X1, [X8+432]
	055 NotImplemented "Instruction BLR not yet implemented."
	056 Move W8, W20
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 NotImplemented "Instruction BFM not yet implemented."
	060 Move X0, X8
	061 Move X30, [X31+32]
	062 Return X0
	063 Call 0x1C17F20

Method: System.Void PixelSnap()

Disassembly:
	0x03A02D50 LDR X8, [X8 + 0xA28]
	0x03A02D54 LDR X0, [X8]
	0x03A02D58 LDR W8, [X0 + 0xE0]
	0x03A02D5C CBNZ W8, 0x3A02D64
	0x03A02D60 BL 0x1C16DFC
	0x03A02D64 ADRP X8, 0x752000
	0x03A02D68 LDR X8, [X8 + 0xD0]
	0x03A02D6C LDR X0, [X8]
	0x03A02D70 MOV X1, X31
	0x03A02D74 BL 0x3C06A04
	0x03A02D78 B 0x3A02EF0
	0x03A02D7C LDR X8, [X20 + 0x100]
	0x03A02D80 CBZ X8, 0x3A0313C
	0x03A02D84 CBZ X23, 0x3A03140
	0x03A02D88 LDR V8, [X8 + 0x24]
	0x03A02D8C MOV X0, X23
	0x03A02D90 MOV X1, X31
	0x03A02D94 BL 0x3C035DC
	0x03A02D98 MOV V9.16B, V0.16B
	0x03A02D9C MOV X0, X23
	0x03A02DA0 MOV X1, X31
	0x03A02DA4 BL 0x3C03618
	0x03A02DA8 MOV V3.16B, V0.16B
	0x03A02DAC FDIV S1, S10, S11
	0x03A02DB0 ADD X8, X31, 0x260
	0x03A02DB4 MOV V0.16B, V8.16B
	0x03A02DB8 MOV V2.16B, V9.16B
	0x03A02DBC MOV X0, X31
	0x03A02DC0 BL 0x3C274AC
	0x03A02DC4 LDP V0, V1, [X31 + 0x260]
	0x03A02DC8 LDP V2, V3, [X31 + 0x280]
	0x03A02DCC STP V0, V1, [X31 + 0x210]
	0x03A02DD0 STP V2, V3, [X31 + 0x230]
	0x03A02DD4 STP V0, V1, [X31 + 0x260]
	0x03A02DD8 STP V2, V3, [X31 + 0x280]
	0x03A02DDC MOV X0, X22
	0x03A02DE0 MOV X1, X31
	0x03A02DE4 BL 0x3A92DE8
	0x03A02DE8 LDP V0, V1, [X31 + 0x260]
	0x03A02DEC LDP V2, V3, [X31 + 0x280]
	0x03A02DF0 STP V0, V1, [X31 + 0x150]
	0x03A02DF4 STP V2, V3, [X31 + 0x170]
	0x03A02DF8 AND W1, W0, 0x1
	0x03A02DFC ADD X8, X31, 0x190
	0x03A02E00 ADD X0, X31, 0x150
	0x03A02E04 MOV X2, X31
	0x03A02E08 BL 0x3C1015C
	0x03A02E0C LDP V0, V1, [X31 + 0x190]
	0x03A02E10 LDP V2, V3, [X31 + 0x1B0]
	0x03A02E14 STP V0, V1, [X31 + 0x210]
	0x03A02E18 STP V2, V3, [X31 + 0x230]
	0x03A02E1C ADD X8, X31, 0x190
	0x03A02E20 MOV X0, X22
	0x03A02E24 MOV W1, W31
	0x03A02E28 MOV X2, X31
	0x03A02E2C BL 0x3A92B70
	0x03A02E30 LDP V0, V1, [X31 + 0x190]
	0x03A02E34 LDP V2, V3, [X31 + 0x1B0]
	0x03A02E38 STP V0, V1, [X31 + 0x1D0]
	0x03A02E3C STP V2, V3, [X31 + 0x1F0]
	0x03A02E40 ADD X0, X31, 0x1D0
	0x03A02E44 MOVZ W1, 0x3
	0x03A02E48 MOV X2, X31
	0x03A02E4C BL 0x3C27C24
	0x03A02E50 LDR X8, [X20 + 0x100]
	0x03A02E54 CBZ X8, 0x3A03144
	0x03A02E58 LDP S4, S5, [X8 + 0x14]
	0x03A02E5C LDP S6, S7, [X8 + 0x1C]
	0x03A02E60 FADD S0, S0, S4
	0x03A02E64 FADD S1, S1, S5
	0x03A02E68 FADD S2, S2, S6
	0x03A02E6C FADD S3, S3, S7
	0x03A02E70 ADD X0, X31, 0x1D0
	0x03A02E74 MOVZ W1, 0x3
	0x03A02E78 MOV X2, X31
	0x03A02E7C BL 0x3C28180
	0x03A02E80 LDP V0, V1, [X31 + 0x1D0]
	0x03A02E84 LDP V2, V3, [X31 + 0x1F0]
	0x03A02E88 ADRP X8, 0x752000
	0x03A02E8C STP V0, V1, [X31 + 0x190]
	0x03A02E90 STP V2, V3, [X31 + 0x1B0]
	0x03A02E94 LDP V0, V1, [X31 + 0x210]
	0x03A02E98 LDP V2, V3, [X31 + 0x230]
	0x03A02E9C LDR X8, [X8 + 0x10]
	0x03A02EA0 STP V0, V1, [X31 + 0x110]
	0x03A02EA4 STP V2, V3, [X31 + 0x130]
	0x03A02EA8 LDR X0, [X8]
	0x03A02EAC LDR W8, [X0 + 0xE0]
	0x03A02EB0 CBNZ W8, 0x3A02EB8
	0x03A02EB4 BL 0x1C16DFC
	0x03A02EB8 LDP V0, V1, [X31 + 0x190]
	0x03A02EBC LDP V2, V3, [X31 + 0x1B0]
	0x03A02EC0 STP V0, V1, [X31 + 0xD0]
	0x03A02EC4 LDP V0, V1, [X31 + 0x110]
	0x03A02EC8 STP V2, V3, [X31 + 0xF0]
	0x03A02ECC LDP V2, V3, [X31 + 0x130]
	0x03A02ED0 STP V0, V1, [X31 + 0x90]
	0x03A02ED4 STP V2, V3, [X31 + 0xB0]
	0x03A02ED8 ADD X1, X31, 0xD0
	0x03A02EDC ADD X2, X31, 0x90
	0x03A02EE0 MOV X0, X21
	0x03A02EE4 MOV W3, W31
	0x03A02EE8 MOV X4, X31
	0x03A02EEC BL 0x3A70624
	0x03A02EF0 ADRP X8, 0x751000
	0x03A02EF4 LDR X8, [X8 + 0xFF0]
	0x03A02EF8 LDR X0, [X8]
	0x03A02EFC LDR W8, [X0 + 0xE0]
	0x03A02F00 CBNZ W8, 0x3A02F08
	0x03A02F04 BL 0x1C16DFC
	0x03A02F08 MOV X0, X19
	0x03A02F0C MOV X1, X31
	0x03A02F10 BL 0x3A43B70
	0x03A02F14 MOV X23, X0
	0x03A02F18 CBZ X0, 0x3A02FCC
	0x03A02F1C ADRP X28, 0x752000
	0x03A02F20 LDR X28, [X28 + 0xC8]
	0x03A02F24 LDR X24, [X31 + 0x258]
	0x03A02F28 LDR X8, [X28]
	0x03A02F2C LDR W9, [X8 + 0xE0]
	0x03A02F30 CBNZ W9, 0x3A02F40
	0x03A02F34 MOV X0, X8
	0x03A02F38 BL 0x1C16DFC
	0x03A02F3C LDR X8, [X28]
	0x03A02F40 LDR X9, [X8 + 0xB8]
	0x03A02F44 LDR X25, [X9 + 0x8]
	0x03A02F48 CBNZ X25, 0x3A02FA0
	0x03A02F4C LDR W9, [X8 + 0xE0]
	0x03A02F50 CBNZ W9, 0x3A02F60
	0x03A02F54 MOV X0, X8
	0x03A02F58 BL 0x1C16DFC
	0x03A02F5C LDR X8, [X28]
	0x03A02F60 ADRP X9, 0x752000
	0x03A02F64 LDR X8, [X8 + 0xB8]
	0x03A02F68 LDR X9, [X9 + 0xB0]
	0x03A02F6C LDR X26, [X8]
	0x03A02F70 LDR X0, [X9]
	0x03A02F74 BL 0x1C16F10
	0x03A02F78 ADRP X8, 0x752000
	0x03A02F7C LDR X8, [X8 + 0xC0]
	0x03A02F80 MOV X25, X0
	0x03A02F84 LDR X2, [X8]
	0x03A02F88 MOV X1, X26
	0x03A02F8C MOV X3, X31
	0x03A02F90 BL 0x3A37934
	0x03A02F94 LDR X8, [X28]
	0x03A02F98 LDR X8, [X8 + 0xB8]
	0x03A02F9C STR X25, [X8 + 0x8]
	0x03A02FA0 ADD X5, X20, 0xE4
	0x03A02FA4 ADD X6, X20, 0x140
	0x03A02FA8 ADD X4, X31, 0x330
	0x03A02FAC MOV X0, X23
	0x03A02FB0 MOV X1, X24
	0x03A02FB4 MOV X2, X21
	0x03A02FB8 MOV X3, X19
	0x03A02FBC MOV X7, X25
	0x03A02FC0 STR X31, [X31]
	0x03A02FC4 BL 0x3A36908
	0x03A02FC8 B 0x3A03020
	0x03A02FCC ADRP X8, 0x74E000
	0x03A02FD0 LDR X8, [X8 + 0xC80]
	0x03A02FD4 LDR X0, [X8]
	0x03A02FD8 LDR W8, [X0 + 0xE0]
	0x03A02FDC CBNZ W8, 0x3A02FE4
	0x03A02FE0 BL 0x1C16DFC
	0x03A02FE4 ADD X0, X31, 0x258

ISIL:
	001 Move [X31-96], D15
	002 Move [X31-88], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+72], X30
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 720
	014 NotImplemented "Instruction MOVI not yet implemented."
	015 Move [X31+624], V0
	016 Move [X31+632], V0
	017 Move [X31+592], V0
	018 Move [X31+600], V0
	019 Move [X31+560], V0
	020 Move [X31+568], V0
	021 Move [X31+528], V0
	022 Move [X31+536], V0
	023 Move [X31+496], V0
	024 Move [X31+504], V0
	025 Move [X31+464], V0
	026 Move [X31+472], V0
	027 Move X19, X0
	028 Move X0, [X0+56]
	029 Compare X0, 0
	030 JumpIfEqual {235}
	031 Move X1, X31
	032 Call Component.get_transform, X0
	033 Compare X0, 0
	034 JumpIfEqual {235}
	035 Move X1, X31
	036 Call Transform.get_position, X0
	037 Move X0, X19
	038 Move V8, V0
	039 Move V9, V1
	040 Move V10, V2
	041 Call PixelPerfectCamera.RoundToPixel, X0, X1
	042 Move X20, 0x9D7000
	043 Move W8, [X20+1939]
	044 Subtract S15, S0, S8
	045 Subtract S11, S1, S9
	046 Subtract S12, S2, S10
	047 Compare W8, 0
	048 JumpIfNotEqual {54}
	049 Move X0, 0x6F3000
	050 Move X0, [X0+1448]
	051 Call 0x1C17CF4
	052 Move W8, 1
	053 Move [X20+1939], W8
	054 Move X8, 0x6F3000
	055 Move X8, [X8+1448]
	056 Move X20, 0x9D7000
	057 Move W9, [X20+2139]
	058 Add S15, S8, S15
	059 Move X8, [X8]
	060 Add S9, S9, S11
	061 Subtract S8, S10, S12
	062 Move X8, [X8+184]
	063 Move S14, [X8]
	064 Move S13, [X8+4]
	065 Move S5, [X8+8]
	066 Move S6, [X8+12]
	067 Compare W9, 0
	068 JumpIfNotEqual {78}
	069 Move X0, 0x6F2000
	070 Move X0, [X0+1440]
	071 Move V10, V6
	072 Move V11, V5
	073 Call 0x1C17CF4
	074 Move V5, V11
	075 Move V6, V10
	076 Move W8, 1
	077 Move [X20+2139], W8
	078 Move X8, 0x6F2000
	079 Move X8, [X8+1440]
	080 Move V1, V9
	081 Move V2, V8
	082 Move V3, V14
	083 Move X8, [X8]
	084 Move V4, V13
	085 Move X0, X31
	086 Move X8, [X8+184]
	087 Move V0, [X8+20]
	088 NotImplemented "Instruction LDUR not yet implemented."
	089 Add X8, X31, 656
	090 Move [X31+8], S0
	091 Move V0, V15
	092 Move [X31], X9
	093 Call Matrix4x4.TRS, X0, X1, X2
	094 Move V0, [X31+656]
	095 Move V1, [X31+672]
	096 Move V2, [X31+688]
	097 Move V3, [X31+704]
	098 Add X8, X31, 400
	099 Add X0, X31, 464
	100 Move X1, X31
	101 Move [X31+464], V0
	102 Move [X31+472], V1
	103 Move [X31+496], V2
	104 Move [X31+504], V3
	105 Call Matrix4x4.get_inverse, X0
	106 Move V0, [X31+400]
	107 Move V1, [X31+416]
	108 Move V2, [X31+432]
	109 Move V3, [X31+448]
	110 Move [X31+656], V0
	111 Move [X31+664], V1
	112 Move [X31+688], V2
	113 Move [X31+696], V3
	114 Move X0, [X19+56]
	115 Compare X0, 0
	116 JumpIfEqual {235}
	117 Move X1, X31
	118 Call Component.get_transform, X0
	119 Compare X0, 0
	120 JumpIfEqual {235}
	121 Move X1, X31
	122 Call Transform.get_rotation, X0
	123 Add X8, X31, 400
	124 Move X0, X31
	125 Call Matrix4x4.Rotate, X0
	126 Move V0, [X31+400]
	127 Move V1, [X31+416]
	128 Move V2, [X31+432]
	129 Move V3, [X31+448]
	130 Add X8, X31, 400
	131 Add X0, X31, 464
	132 Move X1, X31
	133 Move [X31+464], V0
	134 Move [X31+472], V1
	135 Move [X31+496], V2
	136 Move [X31+504], V3
	137 Call Matrix4x4.get_inverse, X0
	138 Move V0, [X31+400]
	139 Move V1, [X31+416]
	140 Move V2, [X31+432]
	141 Move V3, [X31+448]
	142 Add X8, X31, 400
	143 Move X0, X31
	144 Move [X31+592], V0
	145 Move [X31+600], V1
	146 Move [X31+624], V2
	147 Move [X31+632], V3
	148 Move S0, 1
	149 Move S1, 1
	150 Move S2, -1
	151 Call Matrix4x4.Scale, X0
	152 Move V1, [X31+432]
	153 Move V0, [X31+448]
	154 Move V2, [X31+400]
	155 Move V3, [X31+416]
	156 Add X8, X31, 400
	157 Add X0, X31, 336
	158 Move [X31+560], V1
	159 Move [X31+568], V0
	160 Move [X31+528], V2
	161 Move [X31+536], V3
	162 Move X19, [X19+56]
	163 Move [X31+336], V2
	164 Move [X31+344], V3
	165 Move V2, [X31+592]
	166 Move V3, [X31+608]
	167 Move [X31+368], V1
	168 Move [X31+376], V0
	169 Move V0, [X31+624]
	170 Move V1, [X31+640]
	171 Add X1, X31, 272
	172 Move X2, X31
	173 Move [X31+272], V2
	174 Move [X31+280], V3
	175 Move [X31+304], V0
	176 Move [X31+312], V1
	177 Call Matrix4x4.op_Multiply, X0, X1
	178 Move V0, [X31+400]
	179 Move V1, [X31+416]
	180 Move V2, [X31+432]
	181 Move V3, [X31+448]
	182 Add X8, X31, 208
	183 Add X0, X31, 144
	184 Move [X31+144], V0
	185 Move [X31+152], V1
	186 Move V0, [X31+656]
	187 Move V1, [X31+672]
	188 Move [X31+176], V2
	189 Move [X31+184], V3
	190 Move V2, [X31+688]
	191 Move V3, [X31+704]
	192 Add X1, X31, 80
	193 Move X2, X31
	194 Move [X31+80], V0
	195 Move [X31+88], V1
	196 Move [X31+112], V2
	197 Move [X31+120], V3
	198 Call Matrix4x4.op_Multiply, X0, X1
	199 Move V0, [X31+208]
	200 Move V1, [X31+224]
	201 Move V2, [X31+240]
	202 Move V3, [X31+256]
	203 Move [X31+400], V0
	204 Move [X31+408], V1
	205 Move [X31+432], V2
	206 Move [X31+440], V3
	207 Compare X19, 0
	208 JumpIfEqual {235}
	209 Move V0, [X31+400]
	210 Move V1, [X31+416]
	211 Move V2, [X31+432]
	212 Move V3, [X31+448]
	213 Add X1, X31, 16
	214 Move X0, X19
	215 Move X2, X31
	216 Move [X31+16], V0
	217 Move [X31+24], V1
	218 Move [X31+48], V2
	219 Move [X31+56], V3
	220 Call Camera.set_worldToCameraMatrix, X0, X1
	221 Add X31, X31, 720
	222 Move X20, [X31+80]
	223 Move X19, [X31+88]
	224 Move X29, [X31+64]
	225 Move X30, [X31+72]
	226 Move D9, [X31+48]
	227 Move D8, [X31+56]
	228 Move D11, [X31+32]
	229 Move D10, [X31+40]
	230 Move D13, [X31+16]
	231 Move D12, [X31+24]
	232 Move D15, [X31+96]
	233 Move D14, [X31+104]
	234 Return 
	235 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x03A02FE8 MOV X1, X21
	0x03A02FEC MOV X2, X31
	0x03A02FF0 BL 0x3C58FE4
	0x03A02FF4 CBZ X21, 0x3A03138
	0x03A02FF8 MOV X0, X21
	0x03A02FFC MOV X1, X31
	0x03A03000 BL 0x3C4C310
	0x03A03004 LDP X1, X2, [X19 + 0x8]
	0x03A03008 ADD X4, X20, 0xE4
	0x03A0300C ADD X5, X20, 0x140
	0x03A03010 ADD X0, X31, 0x258
	0x03A03014 ADD X3, X31, 0x330
	0x03A03018 MOV X6, X31
	0x03A0301C BL 0x3C58B84
	0x03A03020 LDR X8, [X20 + 0x100]
	0x03A03024 CBZ X8, 0x3A0312C
	0x03A03028 LDRB W9, [X8 + 0x10]
	0x03A0302C CBZ W9, 0x3A030E4
	0x03A03030 LDRB W8, [X8 + 0x11]
	0x03A03034 CBZ W8, 0x3A030E4
	0x03A03038 LDR X0, [X19 + 0x190]
	0x03A0303C CBZ X0, 0x3A03134
	0x03A03040 MOV X1, X31
	0x03A03044 BL 0x3984C98
	0x03A03048 TBNZ X0, 0x0, 0x3A030E4
	0x03A0304C ADD X8, X31, 0x190
	0x03A03050 MOV X0, X22
	0x03A03054 MOV W1, W31
	0x03A03058 MOV X2, X31
	0x03A0305C BL 0x3A92B70
	0x03A03060 LDP V0, V1, [X31 + 0x190]
	0x03A03064 LDP V2, V3, [X31 + 0x1B0]
	0x03A03068 STP V0, V1, [X31 + 0x260]
	0x03A0306C STP V2, V3, [X31 + 0x280]
	0x03A03070 ADD X8, X31, 0x110

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x9E0000
	007 Move X22, 0x71A000
	008 Move X20, 0x753000
	009 Move W8, [X21+3920]
	010 Move X22, [X22+712]
	011 Call 0x3EB2964
	012 Return 
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x719000
	019 Move X0, [X0+712]
	020 Call 0x1C17CF4
	021 Move X0, 0x752000
	022 Move X0, [X0+56]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3920], W8
	026 Move X1, [X22]
	027 Move X0, X19
	028 Call 0x21A4894, X0
	029 Move [X19+56], X0
	030 Move X0, [X20]
	031 Call 0x1C17F10
	032 Move X1, X19
	033 Move X2, X31
	034 Move X20, X0
	035 Call PixelPerfectCameraInternal..ctor, X0, X1
	036 Move [X19+64], X20
	037 Move X0, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X30, [X31+48]

Method: System.Void UpdateCameraProperties()

Disassembly:
	0x03A03074 MOV X0, X22
	0x03A03078 MOV W1, W31
	0x03A0307C MOV X2, X31
	0x03A03080 BL 0x3A92D4C
	0x03A03084 ADRP X8, 0x751000
	0x03A03088 LDP V0, V1, [X31 + 0x110]
	0x03A0308C LDP V2, V3, [X31 + 0x130]
	0x03A03090 LDR X8, [X8 + 0x10]
	0x03A03094 STP V0, V1, [X31 + 0x190]
	0x03A03098 STP V2, V3, [X31 + 0x1B0]
	0x03A0309C LDR X0, [X8]
	0x03A030A0 LDR W8, [X0 + 0xE0]
	0x03A030A4 CBNZ W8, 0x3A030AC
	0x03A030A8 BL 0x1C16DFC
	0x03A030AC LDP V0, V1, [X31 + 0x260]
	0x03A030B0 LDP V2, V3, [X31 + 0x280]
	0x03A030B4 STP V0, V1, [X31 + 0x50]
	0x03A030B8 LDP V0, V1, [X31 + 0x190]
	0x03A030BC STP V2, V3, [X31 + 0x70]
	0x03A030C0 LDP V2, V3, [X31 + 0x1B0]
	0x03A030C4 STP V0, V1, [X31 + 0x10]
	0x03A030C8 STP V2, V3, [X31 + 0x30]
	0x03A030CC ADD X1, X31, 0x50
	0x03A030D0 ADD X2, X31, 0x10
	0x03A030D4 MOV X0, X21
	0x03A030D8 MOV W3, W31
	0x03A030DC MOV X4, X31
	0x03A030E0 BL 0x3A70624
	0x03A030E4 ADD X0, X31, 0x250
	0x03A030E8 MOV X1, X31
	0x03A030EC BL 0x39B1DB4
	0x03A030F0 LDR X8, [X27 + 0x28]
	0x03A030F4 LDR X9, [X31 + 0x3F8]
	0x03A030F8 CMP X8, X9
	0x03A030FC B.NE 0x3A03148
	0x03A03100 ADD X31, X31, 0x400
	0x03A03104 LDP X20, X19, [X31 + 0x70]
	0x03A03108 LDP X22, X21, [X31 + 0x60]
	0x03A0310C LDP X24, X23, [X31 + 0x50]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Call PixelPerfectCamera.get_cameraRTSize, X0
	007 Move X8, [X19+64]
	008 Compare X8, 0
	009 JumpIfEqual {54}
	010 Move X20, X0
	011 Move X21, X0
	012 ShiftRight X21, 32
	013 And X21, X21, 0x7FFFFFFF
	014 Move X0, X8
	015 Move W1, W20
	016 Move W2, W21
	017 Move X3, X31
	018 Call PixelPerfectCameraInternal.CalculateCameraProperties, X0, X1, X2
	019 Move X0, [X19+64]
	020 Compare X0, 0
	021 JumpIfEqual {54}
	022 Move W8, [X0+44]
	023 Move X19, [X19+56]
	024 Compare W8, 0
	025 JumpIfEqual {40}
	026 Move W1, W20
	027 Move W2, W21
	028 Move X3, X31
	029 Call PixelPerfectCameraInternal.CalculateFinalBlitPixelRect, X0, X1, X2
	030 Compare X19, 0
	031 JumpIfEqual {54}
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X1, X31
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Call Camera.set_pixelRect, X0, X1
	039 Return 
	040 Compare X19, 0
	041 JumpIfEqual {54}
	042 Move X0, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move S0, W31
	046 Move S1, W31
	047 Move S2, 1
	048 Move S3, 1
	049 Move X1, X31
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Call Camera.set_rect, X0, X1
	053 Return 
	054 Call 0x1C17F20

Method: System.Void OnBeginCameraRendering(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera camera)

Disassembly:
	0x03A03110 LDP X26, X25, [X31 + 0x40]
	0x03A03114 LDP X28, X27, [X31 + 0x30]
	0x03A03118 LDP X29, X30, [X31 + 0x20]
	0x03A0311C LDP D9, D8, [X31 + 0x10]
	0x03A03120 LDP D11, D10, [X31], #0x80
	0x03A03124 RET
	0x03A03128 BL 0x1C16F20
	0x03A0312C BL 0x1C16F20
	0x03A03130 BL 0x1C16F20
	0x03A03134 BL 0x1C16F20
	0x03A03138 BL 0x1C16F20
	0x03A0313C BL 0x1C16F20
	0x03A03140 BL 0x1C16F20
	0x03A03144 BL 0x1C16F20
	0x03A03148 BL 0x3EB1B20
	0x03A0314C B 0x3A031BC
	0x03A03150 B 0x3A031BC
	0x03A03154 B 0x3A031BC
	0x03A03158 B 0x3A031BC
	0x03A0315C B 0x3A031BC
	0x03A03160 B 0x3A031BC
	0x03A03164 B 0x3A031BC
	0x03A03168 B 0x3A031BC
	0x03A0316C B 0x3A031BC
	0x03A03170 B 0x3A031BC
	0x03A03174 B 0x3A031BC
	0x03A03178 B 0x3A031BC
	0x03A0317C B 0x3A031BC
	0x03A03180 B 0x3A031BC
	0x03A03184 B 0x3A031BC
	0x03A03188 B 0x3A031BC
	0x03A0318C B 0x3A031BC
	0x03A03190 B 0x3A031BC
	0x03A03194 B 0x3A031BC
	0x03A03198 B 0x3A031BC
	0x03A0319C B 0x3A031BC
	0x03A031A0 B 0x3A031BC
	0x03A031A4 B 0x3A031BC
	0x03A031A8 B 0x3A031BC
	0x03A031AC B 0x3A031BC
	0x03A031B0 B 0x3A031BC
	0x03A031B4 B 0x3A031BC
	0x03A031B8 B 0x3A031BC
	0x03A031BC MOV X19, X0
	0x03A031C0 CMP W1, 0x1
	0x03A031C4 B.NE 0x3A031F0
	0x03A031C8 MOV X0, X19
	0x03A031CC BL 0x3EB1AD0
	0x03A031D0 LDR X20, [X0]
	0x03A031D4 BL 0x3EB1AE0
	0x03A031D8 ADD X0, X31, 0x250

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x9DF000
	007 Move X21, 0x6F1000
	008 Move W8, [X22+3921]
	009 Move X21, [X21+1432]
	010 Move X20, X2
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x6F1000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3921], W8
	021 Move X0, [X21]
	022 Move X21, [X19+56]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X21
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {63}
	035 Move X0, X19
	036 Call PixelPerfectCamera.UpdateCameraProperties, X0
	037 Move X0, X19
	038 Call PixelPerfectCamera.PixelSnap, X0
	039 Move W8, [X19+72]
	040 Compare W8, 0
	041 JumpIfNotEqual {51}
	042 Move X8, [X19+64]
	043 Compare X8, 0
	044 JumpIfEqual {69}
	045 Move X0, [X19+56]
	046 Compare X0, 0
	047 JumpIfEqual {69}
	048 Move V0, [X8+72]
	049 Move X1, X31
	050 Call Camera.set_orthographicSize, X0, V0
	051 Move X8, [X19+64]
	052 Compare X8, 0
	053 JumpIfEqual {69}
	054 Move V0, [X8+76]
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X0, X31
	060 Move X30, [X31+48]
	061 Call PixelPerfectRendering.set_pixelSnapSpacing, V0
	062 Return 
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move X30, [X31+48]
	068 Return 
	069 Call 0x1C17F20

Method: System.Void OnEndCameraRendering(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera camera)

Disassembly:
	0x03A031DC MOV X1, X31
	0x03A031E0 BL 0x39B1DB4
	0x03A031E4 CBZ X20, 0x3A030F0
	0x03A031E8 MOV X0, X20
	0x03A031EC BL 0x1C16F18
	0x03A031F0 MOV X20, X31
	0x03A031F4 B 0x3A031FC
	0x03A031F8 MOV X19, X0
	0x03A031FC ADD X0, X31, 0x250
	0x03A03200 MOV X1, X31
	0x03A03204 BL 0x39B1DB4
	0x03A03208 CBNZ X20, 0x3A03214
	0x03A0320C MOV X0, X19
	0x03A03210 BL 0x1D2C690
	0x03A03214 MOV X0, X20
	0x03A03218 BL 0x1C16F18
	0x03A0321C BL 0x1990590
	0x03A03220 SUB X31, X31, 0x80
	0x03A03224 STP X30, X23, [X31 + 0x50]
	0x03A03228 STP X22, X21, [X31 + 0x60]
	0x03A0322C STP X20, X19, [X31 + 0x70]
	0x03A03230 ADRP X21, 0x9DE000
	0x03A03234 LDRB W8, [X21 + 0xF58]
	0x03A03238 MOV X19, X2
	0x03A0323C MOV X22, X1
	0x03A03240 MOV X20, X0
	0x03A03244 TBNZ X8, 0x0, 0x3A032A4
	0x03A03248 ADRP X0, 0x751000
	0x03A0324C LDR X0, [X0 + 0xD8]
	0x03A03250 BL 0x1C16CF4
	0x03A03254 ADRP X0, 0x751000
	0x03A03258 LDR X0, [X0 + 0xE0]
	0x03A0325C BL 0x1C16CF4
	0x03A03260 ADRP X0, 0x751000
	0x03A03264 LDR X0, [X0 + 0xE8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x9DF000
	007 Move X21, 0x6F1000
	008 Move W8, [X22+3922]
	009 Move X21, [X21+1432]
	010 Move X19, X2
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x6F1000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3922], W8
	021 Move X0, [X21]
	022 Move X20, [X20+56]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Move X1, X20
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {44}
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move S0, W31
	040 Move X0, X31
	041 Move X30, [X31+48]
	042 Call PixelPerfectRendering.set_pixelSnapSpacing, V0
	043 Return 
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03A03268 BL 0x1C16CF4
	0x03A0326C ADRP X0, 0x751000
	0x03A03270 LDR X0, [X0 + 0xF0]
	0x03A03274 BL 0x1C16CF4
	0x03A03278 ADRP X0, 0x751000
	0x03A0327C LDR X0, [X0 + 0xC8]
	0x03A03280 BL 0x1C16CF4
	0x03A03284 ADRP X0, 0x750000
	0x03A03288 LDR X0, [X0 + 0xFF8]
	0x03A0328C BL 0x1C16CF4
	0x03A03290 ADRP X0, 0x751000
	0x03A03294 LDR X0, [X0 + 0xF8]
	0x03A03298 BL 0x1C16CF4
	0x03A0329C MOVZ W8, 0x1
	0x03A032A0 STRB W8, [X21 + 0xF58]
	0x03A032A4 MOVI V0.2D, 0x0
	0x03A032A8 STP X31, X31, [X31 + 0x20]
	0x03A032AC STP V0, V0, [X31 + 0x30]
	0x03A032B0 ADRP X23, 0x750000
	0x03A032B4 LDR X21, [X19 + 0x1D0]
	0x03A032B8 LDR X23, [X23 + 0xFF8]
	0x03A032BC CBZ X21, 0x3A032D0
	0x03A032C0 LDR X1, [X23]
	0x03A032C4 LDR X8, [X21]
	0x03A032C8 CMP X8, X1
	0x03A032CC B.NE 0x3A03468
	0x03A032D0 CBZ X22, 0x3A03458
	0x03A032D4 ADRP X8, 0x751000
	0x03A032D8 ADRP X9, 0x751000
	0x03A032DC LDR X8, [X8 + 0xF8]
	0x03A032E0 LDR X9, [X9 + 0xE8]
	0x03A032E4 LDR X3, [X20 + 0x110]
	0x03A032E8 ADD X2, X31, 0x28
	0x03A032EC LDR X1, [X8]
	0x03A032F0 LDR X4, [X9]
	0x03A032F4 ADD X8, X31, 0x0
	0x03A032F8 MOV X0, X22
	0x03A032FC BL 0x2240F24
	0x03A03300 LDP V0, V1, [X31]
	0x03A03304 LDR X0, [X23]
	0x03A03308 STP V0, V1, [X31 + 0x30]
	0x03A0330C LDR W8, [X0 + 0xE0]
	0x03A03310 CBNZ W8, 0x3A0331C
	0x03A03314 BL 0x1C16DFC
	0x03A03318 LDR X0, [X23]
	0x03A0331C LDR X8, [X0 + 0xB8]
	0x03A03320 LDR X8, [X8 + 0x18]
	0x03A03324 STR X8, [X31 + 0x20]
	0x03A03328 ADD X0, X31, 0x30
	0x03A0332C ADD X1, X31, 0x20
	0x03A03330 MOV W2, W31
	0x03A03334 MOV X3, X31
	0x03A03338 BL 0x3996828
	0x03A0333C LDR X8, [X23]
	0x03A03340 LDR X8, [X8 + 0xB8]
	0x03A03344 ADD X1, X8, 0x20
	0x03A03348 ADD X0, X31, 0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x9DF000
	008 Move X21, 0x752000
	009 Move X20, 0x752000
	010 Move X22, 0x752000
	011 Move W8, [X23+3923]
	012 Move X21, [X21+64]
	013 Move X20, [X20+72]
	014 Move X22, [X22+80]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move X0, 0x752000
	021 Move X0, [X0+64]
	022 Call 0x1C17CF4
	023 Move X0, 0x752000
	024 Move X0, [X0+72]
	025 Call 0x1C17CF4
	026 Move X0, 0x752000
	027 Move X0, [X0+88]
	028 Call 0x1C17CF4
	029 Move X0, 0x752000
	030 Move X0, [X0+80]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X23+3923], W8
	034 Move [X19+72], W31
	035 Move X0, [X21]
	036 Move X23, 0x752000
	037 Move X23, [X23+88]
	038 Call 0x1C17F10
	039 Move X2, [X20]
	040 Move X1, X19
	041 Move X3, X31
	042 Move X20, X0
	043 Call Action`2<ScriptableRenderContext, Object>..ctor, X0, X1, X2
	044 Move X0, [X22]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Call RenderPipelineManager.add_beginCameraRendering, X0
	052 Move X0, [X21]
	053 Call 0x1C17F10
	054 Move X2, [X23]
	055 Move X1, X19
	056 Move X3, X31
	057 Move X20, X0
	058 Call Action`2<ScriptableRenderContext, Object>..ctor, X0, X1, X2
	059 Move X0, X20
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X1, X31
	065 Move X30, [X31+48]
	066 Move X23, [X31+56]
	067 Call RenderPipelineManager.add_endCameraRendering, X0
	068 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03A0334C MOVZ W2, 0x2
	0x03A03350 MOV X3, X31
	0x03A03354 BL 0x3996A00
	0x03A03358 CBZ X21, 0x3A0345C
	0x03A0335C LDR X8, [X21 + 0x390]
	0x03A03360 CBZ X8, 0x3A03460
	0x03A03364 ADD X1, X8, 0x28
	0x03A03368 ADD X0, X31, 0x30
	0x03A0336C MOV X2, X31
	0x03A03370 BL 0x3996BA8
	0x03A03374 ADD X0, X31, 0x30
	0x03A03378 MOV W1, W31
	0x03A0337C MOV X2, X31
	0x03A03380 BL 0x398E404
	0x03A03384 LDR X8, [X31 + 0x28]
	0x03A03388 CBZ X8, 0x3A03464
	0x03A0338C ADRP X21, 0x751000
	0x03A03390 LDR X21, [X21 + 0xC8]
	0x03A03394 ADD X0, X8, 0x18
	0x03A03398 MOVZ W2, 0x2B8
	0x03A0339C MOV X1, X19
	0x03A033A0 STR X20, [X8 + 0x10]
	0x03A033A4 BL 0x3EB1B30
	0x03A033A8 LDR X8, [X21]
	0x03A033AC LDR W9, [X8 + 0xE0]
	0x03A033B0 CBNZ W9, 0x3A033C0
	0x03A033B4 MOV X0, X8
	0x03A033B8 BL 0x1C16DFC
	0x03A033BC LDR X8, [X21]
	0x03A033C0 LDR X9, [X8 + 0xB8]
	0x03A033C4 LDR X19, [X9 + 0x10]
	0x03A033C8 CBNZ X19, 0x3A03420
	0x03A033CC LDR W9, [X8 + 0xE0]
	0x03A033D0 CBNZ W9, 0x3A033E0
	0x03A033D4 MOV X0, X8
	0x03A033D8 BL 0x1C16DFC
	0x03A033DC LDR X8, [X21]
	0x03A033E0 ADRP X9, 0x751000
	0x03A033E4 LDR X8, [X8 + 0xB8]
	0x03A033E8 LDR X9, [X9 + 0xD8]
	0x03A033EC LDR X20, [X8]
	0x03A033F0 LDR X0, [X9]
	0x03A033F4 BL 0x1C16F10
	0x03A033F8 ADRP X8, 0x751000
	0x03A033FC LDR X8, [X8 + 0xF0]
	0x03A03400 MOV X19, X0
	0x03A03404 LDR X2, [X8]
	0x03A03408 MOV X1, X20
	0x03A0340C MOV X3, X31
	0x03A03410 BL 0x25C78AC
	0x03A03414 LDR X8, [X21]
	0x03A03418 LDR X8, [X8 + 0xB8]
	0x03A0341C STR X19, [X8 + 0x10]
	0x03A03420 ADRP X8, 0x751000
	0x03A03424 LDR X8, [X8 + 0xE0]
	0x03A03428 LDR X2, [X8]
	0x03A0342C ADD X0, X31, 0x30
	0x03A03430 MOV X1, X19
	0x03A03434 BL 0x224107C
	0x03A03438 ADD X0, X31, 0x30
	0x03A0343C MOV X1, X31
	0x03A03440 BL 0x39972C0
	0x03A03444 LDP X20, X19, [X31 + 0x70]
	0x03A03448 LDP X22, X21, [X31 + 0x60]
	0x03A0344C LDP X30, X23, [X31 + 0x50]
	0x03A03450 ADD X31, X31, 0x80
	0x03A03454 RET
	0x03A03458 BL 0x1C16F20
	0x03A0345C BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x9DF000
	008 Move X21, 0x752000
	009 Move X20, 0x752000
	010 Move X22, 0x752000
	011 Move W8, [X23+3924]
	012 Move X21, [X21+64]
	013 Move X20, [X20+72]
	014 Move X22, [X22+80]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move X0, 0x752000
	021 Move X0, [X0+64]
	022 Call 0x1C17CF4
	023 Move X0, 0x752000
	024 Move X0, [X0+72]
	025 Call 0x1C17CF4
	026 Move X0, 0x752000
	027 Move X0, [X0+88]
	028 Call 0x1C17CF4
	029 Move X0, 0x752000
	030 Move X0, [X0+80]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X23+3924], W8
	034 Move X0, [X21]
	035 Move X23, 0x752000
	036 Move X23, [X23+88]
	037 Call 0x1C17F10
	038 Move X2, [X20]
	039 Move X1, X19
	040 Move X3, X31
	041 Move X20, X0
	042 Call Action`2<ScriptableRenderContext, Object>..ctor, X0, X1, X2
	043 Move X0, [X22]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Move X1, X31
	050 Call RenderPipelineManager.remove_beginCameraRendering, X0
	051 Move X0, [X21]
	052 Call 0x1C17F10
	053 Move X2, [X23]
	054 Move X1, X19
	055 Move X3, X31
	056 Move X20, X0
	057 Call Action`2<ScriptableRenderContext, Object>..ctor, X0, X1, X2
	058 Move X0, X20
	059 Move X1, X31
	060 Call RenderPipelineManager.remove_endCameraRendering, X0
	061 Move X0, [X19+56]
	062 Compare X0, 0
	063 JumpIfEqual {82}
	064 Move S0, W31
	065 Move S1, W31
	066 Move S2, 1
	067 Move S3, 1
	068 Move X1, X31
	069 Call Camera.set_rect, X0, X1
	070 Move X0, [X19+56]
	071 Compare X0, 0
	072 JumpIfEqual {82}
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X1, X31
	078 Move X30, [X31+48]
	079 Move X23, [X31+56]
	080 Call Camera.ResetWorldToCameraMatrix, X0
	081 Return 
	082 Call 0x1C17F20

Method: System.Void OnBeforeSerialize()

Disassembly:
	0x03A03460 BL 0x1C16F20

ISIL:
	001 Return 

Method: System.Void OnAfterDeserialize()

Disassembly:
	0x03A03464 BL 0x1C16F20

ISIL:
	001 Return 

Method: System.Void .ctor()

Disassembly:
	0x03A03468 MOV X0, X21
	0x03A0346C BL 0x1C171E0
	0x03A03470 B 0x3A03494
	0x03A03474 B 0x3A03494
	0x03A03478 B 0x3A03494
	0x03A0347C B 0x3A03494
	0x03A03480 B 0x3A03494

ISIL:
	001 Move X8, -49369088
	002 Move V0, [X8+4024]
	003 Move W8, 180
	004 Move X1, X31
	005 Move [X0+40], W8
	006 Move [X0+32], D0
	007 Call MonoBehaviour..ctor, X0
	008 Return 

