Type: UnityEngine.ProBuilder.Poly2Tri.TriangulationPoint

Method: System.Collections.Generic.List`1<UnityEngine.ProBuilder.Poly2Tri.DTSweepConstraint> get_Edges()

Disassembly:
	0x038F64F8 BL 0x32C5BD8
	0x038F64FC ADRP X8, 0xFFFFFFFFFD1F8000

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_Edges(System.Collections.Generic.List`1<UnityEngine.ProBuilder.Poly2Tri.DTSweepConstraint> value)

Disassembly:
	0x038F6500 LDR V0, [X8 + 0xF8]
	0x038F6504 STP X20, X21, [X19]

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Void .ctor(System.Double x, System.Double y, System.Int32 index = -1)

Disassembly:
	0x038F00DC ADD W1, W22, W29
	0x038F00E0 MOV X0, X21
	0x038F00E4 BL 0x2D1F64C
	0x038F00E8 CBZ X19, 0x38F0128
	0x038F00EC MOV X2, X0
	0x038F00F0 MOV X0, X19
	0x038F00F4 MOV X1, X23
	0x038F00F8 BL 0x38F0008
	0x038F00FC CMP W28, 0x3
	0x038F0100 ADD W27, W27, 0x1
	0x038F0104 MOV W22, W28
	0x038F0108 B.NE 0x38F009C
	0x038F010C LDP X20, X19, [X31 + 0x50]
	0x038F0110 LDP X22, X21, [X31 + 0x40]
	0x038F0114 LDP X24, X23, [X31 + 0x30]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W19, W1
	007 Move X1, X31
	008 Move V8, V1
	009 Move V9, V0
	010 Move X20, X0
	011 Call Object..ctor, X0
	012 Move [X20+24], D9
	013 Move [X20+32], D8
	014 Move [X20+40], W19
	015 Move X20, [X31+32]
	016 Move X19, [X31+40]
	017 Move X30, [X31+16]
	018 Move D9, [X31+48]
	019 Move D8, [X31+56]
	020 Return 

Method: System.String ToString()

Disassembly:
	0x038F6508 STRB W31, [X19 + 0x18]
	0x038F650C STUR W31, [X19 + 0x19]
	0x038F6510 STR D0, [X19 + 0x10]
	0x038F6514 STR W31, [X19 + 0x1C]
	0x038F6518 LDP X20, X19, [X31 + 0x20]
	0x038F651C LDP X22, X21, [X31 + 0x10]
	0x038F6520 LDP X30, X23, [X31], #0x30
	0x038F6524 RET
	0x038F6528 MOV X1, X31
	0x038F652C B 0x33BDD8C
	0x038F6530 LDR W0, [X0 + 0x10]
	0x038F6534 RET
	0x038F6538 STR W1, [X0 + 0x10]
	0x038F653C RET
	0x038F6540 LDR X0, [X0 + 0x18]
	0x038F6544 RET
	0x038F6548 STR X1, [X0 + 0x18]
	0x038F654C RET
	0x038F6550 STP X30, X21, [X31 - 0x20]!
	0x038F6554 STP X20, X19, [X31 + 0x10]
	0x038F6558 MOV W20, W1
	0x038F655C MOV X1, X31
	0x038F6560 MOV X19, X2
	0x038F6564 MOV X21, X0
	0x038F6568 BL 0x33BDD8C
	0x038F656C STR W20, [X21 + 0x10]
	0x038F6570 STR X19, [X21 + 0x18]
	0x038F6574 LDP X20, X19, [X31 + 0x10]
	0x038F6578 LDP X30, X21, [X31], #0x20
	0x038F657C RET
	0x038F6580 CBZ X0, 0x38F6590
	0x038F6584 LDR W8, [X0 + 0x10]
	0x038F6588 CMP W8, 0x0
	0x038F658C CSET W0, EQ
	0x038F6590 RET
	0x038F6594 LDR W8, [X0 + 0x10]
	0x038F6598 CMP W8, 0x0
	0x038F659C CSET W0, EQ
	0x038F65A0 RET
	0x038F65A4 STR X30, [X31 - 0x20]!
	0x038F65A8 STP X20, X19, [X31 + 0x10]
	0x038F65AC ADRP X20, 0xAEB000
	0x038F65B0 LDRB W8, [X20 + 0x756]
	0x038F65B4 MOV W19, W0
	0x038F65B8 TBNZ X8, 0x0, 0x38F65DC
	0x038F65BC ADRP X0, 0x857000
	0x038F65C0 LDR X0, [X0 + 0x9D8]
	0x038F65C4 BL 0x1C16CF4
	0x038F65C8 ADRP X0, 0x857000
	0x038F65CC LDR X0, [X0 + 0x9E0]
	0x038F65D0 BL 0x1C16CF4
	0x038F65D4 MOVZ W8, 0x1
	0x038F65D8 STRB W8, [X20 + 0x756]
	0x038F65DC TBZ X19, 0x0, 0x38F65F0
	0x038F65E0 BL 0x38F663C
	0x038F65E4 MOV X19, X0
	0x038F65E8 CBNZ X0, 0x38F6624
	0x038F65EC B 0x38F6630
	0x038F65F0 ADRP X8, 0x857000
	0x038F65F4 LDR X8, [X8 + 0x9D8]
	0x038F65F8 ADRP X19, 0x857000
	0x038F65FC LDR X0, [X8]
	0x038F6600 LDR X19, [X19 + 0x9E0]
	0x038F6604 BL 0x1C16F10
	0x038F6608 LDR X20, [X19]
	0x038F660C MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xAEC000
	006 Move X21, 0x7FE000
	007 Move W8, [X20+1862]
	008 Move X21, [X21+2760]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x7FE000
	015 Move X0, [X0+2760]
	016 Call 0x1C17CF4
	017 Move X0, 0x800000
	018 Move X0, [X0+928]
	019 Call 0x1C17CF4
	020 Move X0, 0x7FE000
	021 Move X0, [X0+3784]
	022 Call 0x1C17CF4
	023 Move X0, 0x7FE000
	024 Move X0, [X0+2120]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+1862], W8
	028 Move X0, [X21]
	029 Move W1, 5
	030 Call 0x1C17D6C
	031 Compare X0, 0
	032 JumpIfEqual {72}
	033 Move W8, [X0+24]
	034 Move X20, X0
	035 Compare W8, 0
	036 JumpIfEqual {71}
	037 Move X8, 0x7FE000
	038 Move X8, [X8+3784]
	039 Add X0, X19, 24
	040 Move X1, X31
	041 Move X8, [X8]
	042 Move [X20+32], X8
	043 Call Double.ToString, X0
	044 Move W8, [X20+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move [X20+40], X0
	048 Move X8, 0x800000
	049 Move X8, [X8+928]
	050 Add X0, X19, 32
	051 Move X1, X31
	052 Move X8, [X8]
	053 Move [X20+48], X8
	054 Call Double.ToString, X0
	055 Move W8, [X20+24]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move [X20+56], X0
	059 Move X8, 0x7FE000
	060 Move X8, [X8+2120]
	061 Move X0, X20
	062 Move X1, X31
	063 Move X8, [X8]
	064 Move [X20+64], X8
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X30, [X31+32]
	068 Move X21, [X31+40]
	069 Call String.Concat, X0
	070 Return X0
	071 Call 0x1C17F28
	072 Call 0x1C17F20

Method: System.Single get_Xf()

Disassembly:
	0x038F6610 MOV X19, X0
	0x038F6614 BL 0x33BDD8C
	0x038F6618 MOVZ W8, 0x1

ISIL:
	001 Move V0, [X0+24]
	002 NotImplemented "Instruction INVALID not yet implemented."
	003 Return V0

Method: System.Void set_Xf(System.Single value)

Disassembly:
	0x038F661C STR W8, [X19 + 0x10]
	0x038F6620 STR X20, [X19 + 0x18]
	0x038F6624 LDR W8, [X19 + 0x10]

ISIL:
	001 NotImplemented "Instruction FCVT not yet implemented."
	002 Move [X0+24], D0
	003 Return 

Method: System.Single get_Yf()

Disassembly:
	0x038F6628 CMP W8, 0x0
	0x038F662C CSET W0, EQ
	0x038F6630 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move V0, [X0+32]
	002 NotImplemented "Instruction INVALID not yet implemented."
	003 Return V0

Method: System.Void set_Yf(System.Single value)

Disassembly:
	0x038F6634 LDR X30, [X31], #0x20
	0x038F6638 RET
	0x038F663C STP X30, X21, [X31 - 0x20]!

ISIL:
	001 NotImplemented "Instruction FCVT not yet implemented."
	002 Move [X0+32], D0
	003 Return 

Method: System.Void AddEdge(UnityEngine.ProBuilder.Poly2Tri.DTSweepConstraint e)

Disassembly:
	0x038F51D8 BL 0x1C5C788
	0x038F51DC B 0x38F51EC
	0x038F51E0 LDRSW X9, [X10]
	0x038F51E4 ADD X8, X8, X9, 0x4, LSL
	0x038F51E8 ADD X0, X8, 0x138
	0x038F51EC LDP X8, X1, [X0]
	0x038F51F0 MOV X0, X19
	0x038F51F4 BLR X8
	0x038F51F8 TBZ X0, 0x0, 0x38F52C4
	0x038F51FC LDR X8, [X19]
	0x038F5200 LDR X1, [X25]
	0x038F5204 LDRH W9, [X8 + 0x12E]
	0x038F5208 CBZ X9, 0x38F522C
	0x038F520C LDR X10, [X8 + 0xB0]
	0x038F5210 ADD X10, X10, 0x8
	0x038F5214 LDUR X11, [X10 - 0x8]
	0x038F5218 CMP X11, X1
	0x038F521C B.EQ 0x38F523C
	0x038F5220 SUBS X9, X9, 0x1
	0x038F5224 ADD X10, X10, 0x10
	0x038F5228 B.NE 0x38F5214
	0x038F522C MOV X0, X19
	0x038F5230 MOV W2, W31
	0x038F5234 BL 0x1C5C788
	0x038F5238 B 0x38F5248
	0x038F523C LDRSW X9, [X10]
	0x038F5240 ADD X8, X8, X9, 0x4, LSL
	0x038F5244 ADD X0, X8, 0x138
	0x038F5248 LDP X8, X1, [X0]
	0x038F524C MOV X0, X19
	0x038F5250 BLR X8
	0x038F5254 LDR X22, [X20 + 0x18]
	0x038F5258 CBZ X22, 0x38F5340
	0x038F525C LDR X8, [X22]
	0x038F5260 LDR X1, [X26]
	0x038F5264 MOV X21, X0
	0x038F5268 LDRH W9, [X8 + 0x12E]
	0x038F526C CBZ X9, 0x38F5290
	0x038F5270 LDR X10, [X8 + 0xB0]
	0x038F5274 ADD X10, X10, 0x8
	0x038F5278 LDUR X11, [X10 - 0x8]
	0x038F527C CMP X11, X1
	0x038F5280 B.EQ 0x38F52A0
	0x038F5284 SUBS X9, X9, 0x1
	0x038F5288 ADD X10, X10, 0x10
	0x038F528C B.NE 0x38F5278
	0x038F5290 MOVZ W2, 0x2
	0x038F5294 MOV X0, X22
	0x038F5298 BL 0x1C5C788
	0x038F529C B 0x38F52B0
	0x038F52A0 LDR W9, [X10]
	0x038F52A4 ADD W9, W9, 0x2
	0x038F52A8 ADD X8, X8, W9, 0x4, SXTW
	0x038F52AC ADD X0, X8, 0x138
	0x038F52B0 LDP X8, X2, [X0]
	0x038F52B4 MOV X0, X22
	0x038F52B8 MOV X1, X21
	0x038F52BC BLR X8
	0x038F52C0 B 0x38F51A0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xAED000
	006 Move W8, [X20+1863]
	007 Move X19, X1
	008 Move X21, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x859000
	014 Move X0, [X0+2320]
	015 Call 0x1C17CF4
	016 Move X0, 0x859000
	017 Move X0, [X0+2328]
	018 Call 0x1C17CF4
	019 Move X0, 0x859000
	020 Move X0, [X0+2336]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+1863], W8
	024 Move X20, [X21+16]
	025 Compare X20, 0
	026 JumpIfNotEqual {39}
	027 Move X8, 0x859000
	028 Move X8, [X8+2336]
	029 Move X0, [X8]
	030 Call 0x1C17F10
	031 Move X8, 0x859000
	032 Move X8, [X8+2328]
	033 Move X20, X0
	034 Move X1, [X8]
	035 Call List`1<Object>..ctor, X0
	036 Move [X21+16], X20
	037 Compare X20, 0
	038 JumpIfEqual {71}
	039 Move X9, 0x859000
	040 Move X9, [X9+2320]
	041 Move W10, [X20+28]
	042 Move X8, [X20+16]
	043 Move X9, [X9]
	044 Add W10, W10, 1
	045 Move [X20+28], W10
	046 Compare X8, 0
	047 JumpIfEqual {71}
	048 NotImplemented "Instruction LDRSW not yet implemented."
	049 Move W11, [X8+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add W9, W10, 1
	052 Add X8, X8, X10
	053 Move [X20+24], W9
	054 Move [X8+32], X19
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 Return 
	060 Move X8, [X9+32]
	061 Move X0, X20
	062 Move X1, X19
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X8, [X8+192]
	066 Move X2, [X8+112]
	067 Move X30, [X31+32]
	068 Move X21, [X31+40]
	069 Call List`1<Object>.AddWithResize, X0, X1
	070 Return 
	071 Call 0x1C17F20

Method: System.Boolean get_HasEdges()

Disassembly:
	0x038F2428 MOV X0, X20
	0x038F242C MOV X1, X19
	0x038F2430 LDP X20, X19, [X31 + 0x20]
	0x038F2434 LDP X30, X21, [X31 + 0x10]

ISIL:
	001 Move X8, [X0+16]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

