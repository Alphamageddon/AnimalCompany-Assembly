Type: UnityEngine.ProBuilder.Poly2Tri.DTSweepContext

Method: UnityEngine.ProBuilder.Poly2Tri.TriangulationPoint get_Head()

Disassembly:
	0x038F52C4 MOV X20, X31
	0x038F52C8 CBZ X19, 0x38F5324

ISIL:
	001 Move X0, [X0+80]
	002 Return X0

Method: System.Void set_Head(UnityEngine.ProBuilder.Poly2Tri.TriangulationPoint value)

Disassembly:
	0x038F52CC LDR X8, [X19]
	0x038F52D0 LDR X1, [X23]

ISIL:
	001 Move [X0+80], X1
	002 Return 

Method: UnityEngine.ProBuilder.Poly2Tri.TriangulationPoint get_Tail()

Disassembly:
	0x038F52D4 LDRH W9, [X8 + 0x12E]
	0x038F52D8 CBZ X9, 0x38F52FC

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.Void set_Tail(UnityEngine.ProBuilder.Poly2Tri.TriangulationPoint value)

Disassembly:
	0x038F52DC LDR X10, [X8 + 0xB0]
	0x038F52E0 ADD X10, X10, 0x8

ISIL:
	001 Move [X0+88], X1
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x038EEC88 CMP W2, 0x1
	0x038EEC8C STP W31, W9, [X8 + 0x18]
	0x038EEC90 B.LT 0x38EECAC
	0x038EEC94 LDR X0, [X8 + 0x10]
	0x038EEC98 LDP X20, X19, [X31 + 0x10]
	0x038EEC9C MOV W1, W31
	0x038EECA0 MOV X3, X31
	0x038EECA4 LDR X30, [X31], #0x20
	0x038EECA8 B 0x339FA34
	0x038EECAC LDP X20, X19, [X31 + 0x10]
	0x038EECB0 LDR X30, [X31], #0x20
	0x038EECB4 RET
	0x038EECB8 SUB X31, X31, 0x90
	0x038EECBC STP X30, X27, [X31 + 0x40]
	0x038EECC0 STP X26, X25, [X31 + 0x50]
	0x038EECC4 STP X24, X23, [X31 + 0x60]
	0x038EECC8 STP X22, X21, [X31 + 0x70]
	0x038EECCC STP X20, X19, [X31 + 0x80]
	0x038EECD0 ADRP X21, 0xAF3000
	0x038EECD4 LDRB W8, [X21 + 0x6FC]
	0x038EECD8 MOV X19, X1
	0x038EECDC MOV X20, X0
	0x038EECE0 TBNZ X8, 0x0, 0x38EED64
	0x038EECE4 ADRP X0, 0x85F000
	0x038EECE8 LDR X0, [X0 + 0x738]
	0x038EECEC BL 0x1C16CF4
	0x038EECF0 ADRP X0, 0x85F000
	0x038EECF4 LDR X0, [X0 + 0x740]
	0x038EECF8 BL 0x1C16CF4
	0x038EECFC ADRP X0, 0x85F000
	0x038EED00 LDR X0, [X0 + 0x748]
	0x038EED04 BL 0x1C16CF4
	0x038EED08 ADRP X0, 0x85F000
	0x038EED0C LDR X0, [X0 + 0x680]
	0x038EED10 BL 0x1C16CF4
	0x038EED14 ADRP X0, 0x85F000
	0x038EED18 LDR X0, [X0 + 0x730]
	0x038EED1C BL 0x1C16CF4
	0x038EED20 ADRP X0, 0x85F000
	0x038EED24 LDR X0, [X0 + 0x750]
	0x038EED28 BL 0x1C16CF4
	0x038EED2C ADRP X0, 0x85F000
	0x038EED30 LDR X0, [X0 + 0x758]
	0x038EED34 BL 0x1C16CF4
	0x038EED38 ADRP X0, 0x85F000
	0x038EED3C LDR X0, [X0 + 0x760]
	0x038EED40 BL 0x1C16CF4
	0x038EED44 ADRP X0, 0x85F000
	0x038EED48 LDR X0, [X0 + 0x708]
	0x038EED4C BL 0x1C16CF4
	0x038EED50 ADRP X0, 0x85F000
	0x038EED54 LDR X0, [X0 + 0x768]
	0x038EED58 BL 0x1C16CF4
	0x038EED5C MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xAF4000
	008 Move X20, 0x860000
	009 Move X22, 0x860000
	010 Move X21, 0x860000
	011 Move W8, [X23+1837]
	012 Move X20, [X20+1600]
	013 Move X22, [X22+1608]
	014 Move X21, [X21+1616]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x860000
	021 Move X0, [X0+1600]
	022 Call 0x1C17CF4
	023 Move X0, 0x860000
	024 Move X0, [X0+1608]
	025 Call 0x1C17CF4
	026 Move X0, 0x860000
	027 Move X0, [X0+1616]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+1837], W8
	031 Move W8, 0x999A
	032 NotImplemented "Instruction MOVK not yet implemented."
	033 Move [X19+64], W8
	034 Move X0, [X20]
	035 Call 0x1C17F10
	036 Move X1, X31
	037 Move X20, X0
	038 Call Object..ctor, X0
	039 Move [X19+96], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X1, X31
	043 Move X20, X0
	044 Call Object..ctor, X0
	045 Move [X19+104], X20
	046 Move X0, [X21]
	047 Call 0x1C17F10
	048 Move X1, X31
	049 Move X20, X0
	050 Call Object..ctor, X0
	051 Move X0, X19
	052 Move [X19+112], X20
	053 Call TriangulationContext..ctor, X0
	054 Move X8, [X19]
	055 Move X0, X19
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X2, [X8+424]
	061 Move X1, [X8+432]
	062 Move X30, [X31+48]
	063 Move X23, [X31+56]
	064 CallNoReturn X2

Method: System.Boolean get_IsDebugEnabled()

Disassembly:
	0x038F53B8 ADD X10, X10, 0x10
	0x038F53BC B.NE 0x38F53A8

ISIL:
	001 Move W0, [X0+60]
	002 Return X0

Method: System.Void set_IsDebugEnabled(System.Boolean value)

Disassembly:
	0x038F53C0 MOV X0, X19
	0x038F53C4 MOV W2, W31
	0x038F53C8 BL 0x1C5C788
	0x038F53CC B 0x38F53DC
	0x038F53D0 LDRSW X9, [X10]
	0x038F53D4 ADD X8, X8, X9, 0x4, LSL
	0x038F53D8 ADD X0, X8, 0x138
	0x038F53DC LDP X8, X1, [X0]
	0x038F53E0 MOV X0, X19
	0x038F53E4 BLR X8
	0x038F53E8 CBNZ X20, 0x38F53F4
	0x038F53EC LDR X0, [X31 + 0x8]
	0x038F53F0 BL 0x1D2C690
	0x038F53F4 MOV X0, X20
	0x038F53F8 BL 0x1C16F18
	0x038F53FC BL 0x1990590
	0x038F5400 STR X30, [X31 - 0x20]!
	0x038F5404 STP X20, X19, [X31 + 0x10]
	0x038F5408 ADRP X20, 0xAEC000
	0x038F540C LDRB W8, [X20 + 0x740]
	0x038F5410 MOV X19, X0
	0x038F5414 TBNZ X8, 0x0, 0x38F542C
	0x038F5418 ADRP X0, 0x858000
	0x038F541C LDR X0, [X0 + 0x970]
	0x038F5420 BL 0x1C16CF4
	0x038F5424 MOVZ W8, 0x1
	0x038F5428 STRB W8, [X20 + 0x740]
	0x038F542C LDR X19, [X19 + 0x18]
	0x038F5430 CBZ X19, 0x38F54A0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xAED000
	006 Move W8, [X21+1838]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x859000
	014 Move X0, [X0+2136]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1838], W8
	018 Move TEMP, X19
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {34}
	022 Move X8, [X20+16]
	023 Compare X8, 0
	024 JumpIfNotEqual {34}
	025 Move X8, 0x859000
	026 Move X8, [X8+2136]
	027 Move X0, [X8]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X21, X0
	031 Call Object..ctor, X0
	032 Move [X21+16], X20
	033 Move [X20+16], X21
	034 And W8, W19, 1
	035 Move [X20+60], W8
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return 

Method: System.Void RemoveFromList(UnityEngine.ProBuilder.Poly2Tri.DelaunayTriangle triangle)

Disassembly:
	0x038F2D88 LDR X0, [X22]
	0x038F2D8C LDR X23, [X8 + 0x28]
	0x038F2D90 LDP X24, X25, [X19 + 0x10]
	0x038F2D94 LDR W8, [X0 + 0xE0]
	0x038F2D98 CBNZ W8, 0x38F2DA0
	0x038F2D9C BL 0x1C16DFC
	0x038F2DA0 MOV X0, X25
	0x038F2DA4 MOV X1, X23
	0x038F2DA8 MOV X2, X24
	0x038F2DAC BL 0x38F1F1C
	0x038F2DB0 CMP W0, 0x1
	0x038F2DB4 B.NE 0x38F2DE4
	0x038F2DB8 LDR X20, [X20 + 0x10]
	0x038F2DBC B 0x38F2D10
	0x038F2DC0 LDR X2, [X20 + 0x10]
	0x038F2DC4 MOV X0, X21
	0x038F2DC8 MOV X1, X19
	0x038F2DCC LDP X20, X19, [X31 + 0x40]
	0x038F2DD0 LDP X22, X21, [X31 + 0x30]
	0x038F2DD4 LDP X24, X23, [X31 + 0x20]
	0x038F2DD8 LDP X26, X25, [X31 + 0x10]
	0x038F2DDC LDP X30, X27, [X31], #0x50

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xAF0000
	006 Move W8, [X21+1839]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x85C000
	014 Move X0, [X0+2160]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1839], W8
	018 Move X0, [X20+24]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0x85C000
	022 Move X8, [X8+2160]
	023 Move X1, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call List`1<Object>.Remove, X0, X1
	030 Return 
	031 Call 0x1C17F20

Method: System.Void MeshClean(UnityEngine.ProBuilder.Poly2Tri.DelaunayTriangle triangle)

Disassembly:
	0x038F317C CBZ X21, 0x38F325C

ISIL:
	001 Call DTSweepContext.MeshCleanReq, X0, X1
	002 Return 

Method: System.Void MeshCleanReq(UnityEngine.ProBuilder.Poly2Tri.DelaunayTriangle triangle)

Disassembly:
	0x038F545C B.EQ 0x38F547C
	0x038F5460 SUBS X9, X9, 0x1
	0x038F5464 ADD X10, X10, 0x10
	0x038F5468 B.NE 0x38F5454
	0x038F546C MOVZ W2, 0x3
	0x038F5470 MOV X0, X19
	0x038F5474 BL 0x1C5C788
	0x038F5478 B 0x38F548C
	0x038F547C LDR W9, [X10]
	0x038F5480 ADD W9, W9, 0x3
	0x038F5484 ADD X8, X8, W9, 0x4, SXTW
	0x038F5488 ADD X0, X8, 0x138
	0x038F548C LDP X2, X1, [X0]
	0x038F5490 MOV X0, X19
	0x038F5494 LDP X20, X19, [X31 + 0x10]
	0x038F5498 LDR X30, [X31], #0x20
	0x038F549C BR X2
	0x038F54A0 BL 0x1C16F20
	0x038F54A4 LDR X0, [X0 + 0x10]
	0x038F54A8 RET
	0x038F54AC STR X1, [X0 + 0x10]
	0x038F54B0 RET
	0x038F54B4 LDR W0, [X0 + 0x28]
	0x038F54B8 RET
	0x038F54BC STR W1, [X0 + 0x28]
	0x038F54C0 RET
	0x038F54C4 LDR X0, [X0 + 0x30]
	0x038F54C8 RET
	0x038F54CC STR X1, [X0 + 0x30]
	0x038F54D0 RET
	0x038F54D4 LDR W0, [X0 + 0x38]
	0x038F54D8 RET
	0x038F54DC STR W1, [X0 + 0x38]
	0x038F54E0 RET
	0x038F54E4 LDRB W0, [X0 + 0x3C]
	0x038F54E8 RET
	0x038F54EC AND W8, W1, 0x1
	0x038F54F0 STRB W8, [X0 + 0x3C]
	0x038F54F4 RET
	0x038F54F8 LDR X0, [X0 + 0x10]
	0x038F54FC RET
	0x038F5500 STR X1, [X0 + 0x10]
	0x038F5504 RET
	0x038F5508 STP X30, X21, [X31 - 0x20]!
	0x038F550C STP X20, X19, [X31 + 0x10]
	0x038F5510 ADRP X20, 0xAEC000
	0x038F5514 ADRP X21, 0x7FE000
	0x038F5518 LDRB W8, [X20 + 0x746]
	0x038F551C LDR X21, [X21 + 0xAC8]
	0x038F5520 MOV X19, X0
	0x038F5524 TBNZ X8, 0x0, 0x38F5560
	0x038F5528 ADRP X0, 0x7FE000
	0x038F552C LDR X0, [X0 + 0xAC8]
	0x038F5530 BL 0x1C16CF4
	0x038F5534 ADRP X0, 0x800000
	0x038F5538 LDR X0, [X0 + 0x3A0]
	0x038F553C BL 0x1C16CF4
	0x038F5540 ADRP X0, 0x7FE000
	0x038F5544 LDR X0, [X0 + 0xEC8]
	0x038F5548 BL 0x1C16CF4
	0x038F554C ADRP X0, 0x7FE000
	0x038F5550 LDR X0, [X0 + 0x848]
	0x038F5554 BL 0x1C16CF4
	0x038F5558 MOVZ W8, 0x1
	0x038F555C STRB W8, [X20 + 0x746]
	0x038F5560 LDR X0, [X21]
	0x038F5564 MOVZ W1, 0x5
	0x038F5568 BL 0x1C16D6C
	0x038F556C CBZ X0, 0x38F560C
	0x038F5570 LDR W8, [X0 + 0x18]
	0x038F5574 MOV X20, X0
	0x038F5578 CBZ W8, 0x38F5608
	0x038F557C ADRP X8, 0x7FE000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xAED000
	008 Move W8, [X21+1840]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x859000
	016 Move X0, [X0+1992]
	017 Call 0x1C17CF4
	018 Move X0, 0x859000
	019 Move X0, [X0+2168]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+1840], W8
	023 Compare X20, 0
	024 JumpIfEqual {79}
	025 Move W8, [X20+70]
	026 Compare W8, 0
	027 JumpIfNotEqual {79}
	028 Move W8, 1
	029 Move [X20+70], W8
	030 Move X21, [X19+48]
	031 Compare X21, 0
	032 JumpIfEqual {86}
	033 Move X10, 0x859000
	034 Move X8, [X21]
	035 Move X10, [X10+2168]
	036 NotImplemented "Instruction LDRH not yet implemented."
	037 Move X1, [X10]
	038 Compare X9, 0
	039 JumpIfEqual {46}
	040 Move X10, [X8+176]
	041 Add X10, X10, 8
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Subtract X9, X9, 1
	045 Add X10, X10, 16
	046 Move W2, 3
	047 Move X0, X21
	048 Call 0x1C5D788
	049 Move W9, [X10]
	050 Add W9, W9, 3
	051 Add X8, X8, W9
	052 Add X0, X8, 312
	053 Move X8, [X0]
	054 Move X2, [X0+8]
	055 Move X0, X21
	056 Move X1, X20
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move X23, 0x859000
	059 Move X23, [X23+1992]
	060 Move W21, W31
	061 Add X22, X20, 64
	062 Add X20, X20, 40
	063 Move X0, X22
	064 Move W1, W21
	065 Call FixedBitArray3.get_Item, X0, X1
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {77}
	070 Move X2, [X23]
	071 Move X0, X20
	072 Move W1, W21
	073 Call 0x2D2064C, X0, X1
	074 Move X1, X0
	075 Move X0, X19
	076 Call DTSweepContext.MeshCleanReq, X0, X1
	077 Add W21, W21, 1
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Move X23, [X31+56]
	085 Return 
	086 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x038F5580 LDR X8, [X8 + 0xEC8]
	0x038F5584 ADD X0, X19, 0x18
	0x038F5588 MOV X1, X31
	0x038F558C LDR X8, [X8]
	0x038F5590 STR X8, [X20 + 0x20]
	0x038F5594 BL 0x33661DC
	0x038F5598 LDR W8, [X20 + 0x18]
	0x038F559C CMP W8, 0x1
	0x038F55A0 B.LS 0x38F5608
	0x038F55A4 CMP W8, 0x2
	0x038F55A8 STR X0, [X20 + 0x28]
	0x038F55AC B.EQ 0x38F5608
	0x038F55B0 ADRP X8, 0x800000
	0x038F55B4 LDR X8, [X8 + 0x3A0]
	0x038F55B8 ADD X0, X19, 0x20
	0x038F55BC MOV X1, X31
	0x038F55C0 LDR X8, [X8]
	0x038F55C4 STR X8, [X20 + 0x30]
	0x038F55C8 BL 0x33661DC
	0x038F55CC LDR W8, [X20 + 0x18]
	0x038F55D0 CMP W8, 0x3
	0x038F55D4 B.LS 0x38F5608
	0x038F55D8 CMP W8, 0x4
	0x038F55DC STR X0, [X20 + 0x38]
	0x038F55E0 B.EQ 0x38F5608
	0x038F55E4 ADRP X8, 0x7FE000
	0x038F55E8 LDR X8, [X8 + 0x848]
	0x038F55EC MOV X0, X20
	0x038F55F0 MOV X1, X31
	0x038F55F4 LDR X8, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xAED000
	005 Move W8, [X20+1841]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x859000
	012 Move X0, [X0+1840]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1841], W8
	016 Move X0, X19
	017 Call TriangulationContext.Clear, X0
	018 Move X8, [X19+24]
	019 Compare X8, 0
	020 JumpIfEqual {39}
	021 Move W2, [X8+24]
	022 Move W9, [X8+28]
	023 Add W9, W9, 1
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move [X8+24], W31
	026 Move [X8+28], W9
	027 Move X0, [X8+16]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move W1, W31
	031 Move X3, X31
	032 Move X30, [X31+32]
	033 Call Array.Clear, X0, X1, X2
	034 Return 
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return 
	039 Call 0x1C17F20

Method: System.Void AddNode(UnityEngine.ProBuilder.Poly2Tri.AdvancingFrontNode node)

Disassembly:
	0x038F3340 CBZ X19, 0x38F361C
	0x038F3344 LDR X8, [X19]
	0x038F3348 MOV X24, X0
	0x038F334C MOV X0, X19
	0x038F3350 LDP X9, X1, [X8 + 0x1B8]
	0x038F3354 BLR X9

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+72]
	003 Compare X8, 0
	004 JumpIfEqual {7}
	005 Move X30, [X31+16]
	006 Return 
	007 Call 0x1C17F20

Method: System.Void RemoveNode(UnityEngine.ProBuilder.Poly2Tri.AdvancingFrontNode node)

Disassembly:
	0x038F50B4 STP X22, X21, [X31 + 0x30]
	0x038F50B8 STP X20, X19, [X31 + 0x40]
	0x038F50BC ADRP X21, 0xAEC000
	0x038F50C0 LDRB W8, [X21 + 0x73F]
	0x038F50C4 MOV X19, X1
	0x038F50C8 MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+72]
	003 Compare X8, 0
	004 JumpIfEqual {7}
	005 Move X30, [X31+16]
	006 Return 
	007 Call 0x1C17F20

Method: UnityEngine.ProBuilder.Poly2Tri.AdvancingFrontNode LocateNode(UnityEngine.ProBuilder.Poly2Tri.TriangulationPoint point)

Disassembly:
	0x038F3180 LDR X8, [X21]
	0x038F3184 MOV X0, X21
	0x038F3188 LDP X9, X1, [X8 + 0x1B8]
	0x038F318C BLR X9
	0x038F3190 TBZ X0, 0x0, 0x38F31A8
	0x038F3194 MOV X0, X21
	0x038F3198 BL 0x38F1438
	0x038F319C CBZ X0, 0x38F325C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Compare X1, 0
	006 JumpIfEqual {11}
	007 Move V0, [X1+24]
	008 Move X30, [X31+16]
	009 Call AdvancingFront.LocateNode, X0, V0
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void CreateAdvancingFront()

Disassembly:
	0x038F1BAC BL 0x38F0354
	0x038F1BB0 MOV X0, X20
	0x038F1BB4 MOV X1, X25
	0x038F1BB8 BL 0x38EF414
	0x038F1BBC ADD W8, W0, 0x2
	0x038F1BC0 SMADDL X9, X8, X28, X31
	0x038F1BC4 UBFM X10, X9, 0x3F, 0x3F
	0x038F1BC8 UBFM X9, X9, 0x20, 0x3F
	0x038F1BCC ADD W9, W9, W10
	0x038F1BD0 ADD W9, W9, W9, 0x1, LSL
	0x038F1BD4 SUB W1, W8, W9
	0x038F1BD8 LDR W8, [X31 + 0xC]
	0x038F1BDC MOV X0, X21
	0x038F1BE0 AND W2, W8, 0x1
	0x038F1BE4 BL 0x38F0354
	0x038F1BE8 MOV X0, X19
	0x038F1BEC MOV X1, X25
	0x038F1BF0 BL 0x38EF414
	0x038F1BF4 ADD W8, W0, 0x1
	0x038F1BF8 SMADDL X9, X8, X28, X31
	0x038F1BFC UBFM X10, X9, 0x3F, 0x3F
	0x038F1C00 UBFM X9, X9, 0x20, 0x3F
	0x038F1C04 ADD W9, W9, W10
	0x038F1C08 ADD W9, W9, W9, 0x1, LSL
	0x038F1C0C SUB W1, W8, W9
	0x038F1C10 LDR W8, [X31 + 0x14]
	0x038F1C14 MOV X0, X22
	0x038F1C18 AND W2, W8, 0x1
	0x038F1C1C BL 0x38F0354
	0x038F1C20 ADRP X21, 0x85C000
	0x038F1C24 LDR X21, [X21 + 0x868]
	0x038F1C28 ADD X0, X20, 0x28
	0x038F1C2C LDR X1, [X21]
	0x038F1C30 BL 0x2D1F7F4
	0x038F1C34 LDR X1, [X21]
	0x038F1C38 ADD X0, X19, 0x28
	0x038F1C3C BL 0x2D1F7F4
	0x038F1C40 LDR X1, [X31 + 0x30]
	0x038F1C44 CBZ X1, 0x38F1C50
	0x038F1C48 MOV X0, X19
	0x038F1C4C BL 0x38EF72C
	0x038F1C50 LDR X1, [X31 + 0x38]
	0x038F1C54 CBZ X1, 0x38F1C60
	0x038F1C58 MOV X0, X20
	0x038F1C5C BL 0x38EF72C
	0x038F1C60 LDR X1, [X31 + 0x20]
	0x038F1C64 CBZ X1, 0x38F1C70
	0x038F1C68 MOV X0, X20
	0x038F1C6C BL 0x38EF72C
	0x038F1C70 LDR X1, [X31 + 0x28]
	0x038F1C74 CBZ X1, 0x38F1C80
	0x038F1C78 MOV X0, X19
	0x038F1C7C BL 0x38EF72C
	0x038F1C80 MOV X0, X20
	0x038F1C84 MOV X1, X19
	0x038F1C88 LDP X20, X19, [X31 + 0x90]
	0x038F1C8C LDP X22, X21, [X31 + 0x80]
	0x038F1C90 LDP X24, X23, [X31 + 0x70]
	0x038F1C94 LDP X26, X25, [X31 + 0x60]
	0x038F1C98 LDP X28, X27, [X31 + 0x50]
	0x038F1C9C LDP X29, X30, [X31 + 0x40]
	0x038F1CA0 ADD X31, X31, 0xA0
	0x038F1CA4 B 0x38EF72C
	0x038F1CA8 BL 0x1C16F20
	0x038F1CAC STR X30, [X31 - 0x50]!
	0x038F1CB0 STP X26, X25, [X31 + 0x10]
	0x038F1CB4 STP X24, X23, [X31 + 0x20]
	0x038F1CB8 STP X22, X21, [X31 + 0x30]
	0x038F1CBC STP X20, X19, [X31 + 0x40]
	0x038F1CC0 ADRP X21, 0xAF0000
	0x038F1CC4 LDRB W8, [X21 + 0x733]
	0x038F1CC8 MOV X19, X1
	0x038F1CCC MOV X20, X0
	0x038F1CD0 TBNZ X8, 0x0, 0x38F1CF4
	0x038F1CD4 ADRP X0, 0x85C000
	0x038F1CD8 LDR X0, [X0 + 0x7C8]
	0x038F1CDC BL 0x1C16CF4
	0x038F1CE0 ADRP X0, 0x85C000
	0x038F1CE4 LDR X0, [X0 + 0x7B0]
	0x038F1CE8 BL 0x1C16CF4
	0x038F1CEC MOVZ W8, 0x1
	0x038F1CF0 STRB W8, [X21 + 0x733]
	0x038F1CF4 CBZ X19, 0x38F1D84
	0x038F1CF8 ADRP X25, 0x85C000
	0x038F1CFC ADRP X26, 0x85C000
	0x038F1D00 LDR X25, [X25 + 0x7C8]
	0x038F1D04 LDR X26, [X26 + 0x7B0]
	0x038F1D08 MOV W21, W31
	0x038F1D0C ADD X22, X19, 0x28
	0x038F1D10 ADD X23, X19, 0x10
	0x038F1D14 LDR X2, [X25]
	0x038F1D18 MOV X0, X22
	0x038F1D1C MOV W1, W21
	0x038F1D20 BL 0x2D1F64C
	0x038F1D24 CBNZ X0, 0x38F1D60
	0x038F1D28 LDR X2, [X26]
	0x038F1D2C LDR X24, [X20 + 0x48]
	0x038F1D30 MOV X0, X23
	0x038F1D34 MOV W1, W21
	0x038F1D38 BL 0x2D1F64C
	0x038F1D3C MOV X1, X0
	0x038F1D40 MOV X0, X19
	0x038F1D44 BL 0x38EF900
	0x038F1D48 CBZ X24, 0x38F1D84
	0x038F1D4C MOV X1, X0
	0x038F1D50 MOV X0, X24
	0x038F1D54 BL 0x38F0A64
	0x038F1D58 CBZ X0, 0x38F1D60
	0x038F1D5C STR X19, [X0 + 0x30]
	0x038F1D60 ADD W21, W21, 0x1
	0x038F1D64 CMP W21, 0x3
	0x038F1D68 B.NE 0x38F1D14
	0x038F1D6C LDP X20, X19, [X31 + 0x40]
	0x038F1D70 LDP X22, X21, [X31 + 0x30]
	0x038F1D74 LDP X24, X23, [X31 + 0x20]
	0x038F1D78 LDP X26, X25, [X31 + 0x10]
	0x038F1D7C LDR X30, [X31], #0x50
	0x038F1D80 RET
	0x038F1D84 BL 0x1C16F20
	0x038F1D88 STP X30, X21, [X31 - 0x20]!
	0x038F1D8C STP X20, X19, [X31 + 0x10]
	0x038F1D90 ADRP X21, 0xAF0000
	0x038F1D94 LDRB W8, [X21 + 0x72F]
	0x038F1D98 MOV X19, X1
	0x038F1D9C MOV X20, X0
	0x038F1DA0 TBNZ X8, 0x0, 0x38F1DB8
	0x038F1DA4 ADRP X0, 0x85C000
	0x038F1DA8 LDR X0, [X0 + 0x870]
	0x038F1DAC BL 0x1C16CF4
	0x038F1DB0 MOVZ W8, 0x1
	0x038F1DB4 STRB W8, [X21 + 0x72F]
	0x038F1DB8 LDR X0, [X20 + 0x18]
	0x038F1DBC CBZ X0, 0x38F1DDC
	0x038F1DC0 ADRP X8, 0x85C000
	0x038F1DC4 LDR X8, [X8 + 0x870]
	0x038F1DC8 MOV X1, X19

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xAF1000
	011 Move W8, [X20+1842]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {37}
	017 Move X0, 0x85D000
	018 Move X0, [X0+2072]
	019 Call 0x1C17CF4
	020 Move X0, 0x85D000
	021 Move X0, [X0+2080]
	022 Call 0x1C17CF4
	023 Move X0, 0x85D000
	024 Move X0, [X0+2088]
	025 Call 0x1C17CF4
	026 Move X0, 0x85D000
	027 Move X0, [X0+1968]
	028 Call 0x1C17CF4
	029 Move X0, 0x85D000
	030 Move X0, [X0+1824]
	031 Call 0x1C17CF4
	032 Move X0, 0x85D000
	033 Move X0, [X0+1800]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+1842], W8
	037 Move X0, [X19+32]
	038 Compare X0, 0
	039 JumpIfEqual {155}
	040 Move X8, 0x85D000
	041 Move X8, [X8+1800]
	042 Move X20, 0x85D000
	043 Move W1, W31
	044 Move X2, [X8]
	045 Move X20, [X20+2088]
	046 Call List`1<Object>.get_Item, X0, X1
	047 Move X8, [X20]
	048 Move X22, [X19+80]
	049 Move X21, [X19+88]
	050 Move X23, X0
	051 Move X0, X8
	052 Call 0x1C17F10
	053 Move X1, X23
	054 Move X2, X21
	055 Move X3, X22
	056 Move X20, X0
	057 Call DelaunayTriangle..ctor, X0, X1, X2, X3
	058 Move X0, [X19+24]
	059 Compare X0, 0
	060 JumpIfEqual {155}
	061 Move X9, 0x85D000
	062 Move X9, [X9+1824]
	063 Move W10, [X0+28]
	064 Move X8, [X0+16]
	065 Move X9, [X9]
	066 Add W10, W10, 1
	067 Move [X0+28], W10
	068 Compare X8, 0
	069 JumpIfEqual {155}
	070 NotImplemented "Instruction LDRSW not yet implemented."
	071 Move W11, [X8+24]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Add W9, W10, 1
	074 Add X8, X8, X10
	075 Move [X0+24], W9
	076 Move [X8+32], X20
	077 Move X8, [X9+32]
	078 Move X1, X20
	079 Move X8, [X8+192]
	080 Move X2, [X8+112]
	081 Call List`1<Object>.AddWithResize, X0, X1
	082 Compare X20, 0
	083 JumpIfEqual {155}
	084 Move X26, 0x85D000
	085 Move X26, [X26+1968]
	086 Move X25, 0x85D000
	087 Add X22, X20, 16
	088 Move W1, 1
	089 Move X2, [X26]
	090 Move X25, [X25+2072]
	091 Move X0, X22
	092 Call 0x2D2064C, X0, X1
	093 Move X8, [X25]
	094 Move X23, X0
	095 Move X0, X8
	096 Call 0x1C17F10
	097 Move X1, X23
	098 Move X21, X0
	099 Call AdvancingFrontNode..ctor, X0, X1
	100 Compare X21, 0
	101 JumpIfEqual {155}
	102 Move [X21+48], X20
	103 Move X2, [X26]
	104 Move X0, X22
	105 Move W1, W31
	106 Call 0x2D2064C, X0, X1
	107 Move X8, [X25]
	108 Move X24, X0
	109 Move X0, X8
	110 Call 0x1C17F10
	111 Move X1, X24
	112 Move X23, X0
	113 Call AdvancingFrontNode..ctor, X0, X1
	114 Compare X23, 0
	115 JumpIfEqual {155}
	116 Move [X23+48], X20
	117 Move X2, [X26]
	118 Move X24, 0x85D000
	119 Move X24, [X24+2080]
	120 Move W1, 2
	121 Move X0, X22
	122 Call 0x2D2064C, X0, X1
	123 Move X8, [X25]
	124 Move X22, X0
	125 Move X0, X8
	126 Call 0x1C17F10
	127 Move X1, X22
	128 Move X20, X0
	129 Call AdvancingFrontNode..ctor, X0, X1
	130 Move X0, [X24]
	131 Call 0x1C17F10
	132 Move X1, X31
	133 Move X22, X0
	134 Call Object..ctor, X0
	135 Move [X22+16], X21
	136 Move [X22+24], X20
	137 Move [X22+32], X21
	138 Move [X19+72], X22
	139 Move [X21+16], X23
	140 Move [X23+16], X20
	141 Move [X23+24], X21
	142 Compare X20, 0
	143 JumpIfEqual {155}
	144 Move [X20+24], X23
	145 Move X20, [X31+64]
	146 Move X19, [X31+72]
	147 Move X22, [X31+48]
	148 Move X21, [X31+56]
	149 Move X24, [X31+32]
	150 Move X23, [X31+40]
	151 Move X26, [X31+16]
	152 Move X25, [X31+24]
	153 Move X30, [X31+80]
	154 Return 
	155 Call 0x1C17F20

Method: System.Void MapTriangleToNodes(UnityEngine.ProBuilder.Poly2Tri.DelaunayTriangle t)

Disassembly:
	0x038F2CAC MOV X0, X25
	0x038F2CB0 MOV X1, X23
	0x038F2CB4 MOV X2, X24
	0x038F2CB8 BL 0x38F1F1C
	0x038F2CBC CMP W0, 0x1
	0x038F2CC0 B.EQ 0x38F2C14
	0x038F2CC4 LDP X20, X19, [X31 + 0x40]
	0x038F2CC8 LDP X22, X21, [X31 + 0x30]
	0x038F2CCC LDP X24, X23, [X31 + 0x20]
	0x038F2CD0 LDP X26, X25, [X31 + 0x10]
	0x038F2CD4 LDP X30, X27, [X31], #0x50
	0x038F2CD8 RET
	0x038F2CDC BL 0x1C16F20
	0x038F2CE0 STP X30, X27, [X31 - 0x50]!
	0x038F2CE4 STP X26, X25, [X31 + 0x10]
	0x038F2CE8 STP X24, X23, [X31 + 0x20]
	0x038F2CEC STP X22, X21, [X31 + 0x30]
	0x038F2CF0 STP X20, X19, [X31 + 0x40]
	0x038F2CF4 ADRP X22, 0x85B000
	0x038F2CF8 LDR X22, [X22 + 0x850]
	0x038F2CFC MOV X20, X2
	0x038F2D00 MOV X19, X1
	0x038F2D04 MOV X21, X0
	0x038F2D08 ADRP X26, 0xAEF000
	0x038F2D0C MOVZ W27, 0x1
	0x038F2D10 LDRB W8, [X26 + 0x719]
	0x038F2D14 TBNZ X8, 0x0, 0x38F2D24
	0x038F2D18 MOV X0, X22
	0x038F2D1C BL 0x1C16CF4
	0x038F2D20 STRB W27, [X26 + 0x719]
	0x038F2D24 CBZ X20, 0x38F2DFC
	0x038F2D28 LDR X8, [X20 + 0x10]
	0x038F2D2C CBZ X8, 0x38F2DFC
	0x038F2D30 LDR X9, [X8 + 0x10]
	0x038F2D34 CBZ X9, 0x38F2DFC
	0x038F2D38 LDR X10, [X9 + 0x10]
	0x038F2D3C CBZ X10, 0x38F2DFC
	0x038F2D40 LDR X0, [X22]
	0x038F2D44 LDR X25, [X8 + 0x28]
	0x038F2D48 LDR X23, [X9 + 0x28]
	0x038F2D4C LDR X24, [X10 + 0x28]
	0x038F2D50 LDR W8, [X0 + 0xE0]
	0x038F2D54 CBNZ W8, 0x38F2D5C
	0x038F2D58 BL 0x1C16DFC
	0x038F2D5C MOV X0, X25
	0x038F2D60 MOV X1, X23
	0x038F2D64 MOV X2, X24
	0x038F2D68 BL 0x38F1F1C
	0x038F2D6C CMP W0, 0x1
	0x038F2D70 B.EQ 0x38F2DC0
	0x038F2D74 CBZ X19, 0x38F2DFC
	0x038F2D78 LDR X8, [X20 + 0x10]
	0x038F2D7C CBZ X8, 0x38F2DFC
	0x038F2D80 LDR X8, [X8 + 0x10]
	0x038F2D84 CBZ X8, 0x38F2DFC

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0xAF0000
	011 Move W8, [X21+1843]
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x85C000
	019 Move X0, [X0+1992]
	020 Call 0x1C17CF4
	021 Move X0, 0x85C000
	022 Move X0, [X0+1968]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+1843], W8
	026 Compare X19, 0
	027 JumpIfEqual {69}
	028 Move X25, 0x85C000
	029 Move X26, 0x85C000
	030 Move X25, [X25+1992]
	031 Move X26, [X26+1968]
	032 Move W21, W31
	033 Add X22, X19, 40
	034 Add X23, X19, 16
	035 Move X2, [X25]
	036 Move X0, X22
	037 Move W1, W21
	038 Call 0x2D2064C, X0, X1
	039 Compare X0, 0
	040 JumpIfNotEqual {57}
	041 Move X2, [X26]
	042 Move X24, [X20+72]
	043 Move X0, X23
	044 Move W1, W21
	045 Call 0x2D2064C, X0, X1
	046 Move X1, X0
	047 Move X0, X19
	048 Call DelaunayTriangle.PointCWFrom, X0, X1
	049 Compare X24, 0
	050 JumpIfEqual {69}
	051 Move X1, X0
	052 Move X0, X24
	053 Call AdvancingFront.LocatePoint, X0, X1
	054 Compare X0, 0
	055 JumpIfEqual {57}
	056 Move [X0+48], X19
	057 Add W21, W21, 1
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X20, [X31+64]
	060 Move X19, [X31+72]
	061 Move X22, [X31+48]
	062 Move X21, [X31+56]
	063 Move X24, [X31+32]
	064 Move X23, [X31+40]
	065 Move X26, [X31+16]
	066 Move X25, [X31+24]
	067 Move X30, [X31+80]
	068 Return 
	069 Call 0x1C17F20

Method: System.Void PrepareTriangulation(UnityEngine.ProBuilder.Poly2Tri.Triangulatable t)

Disassembly:
	0x038F5678 LDR X8, [X20]
	0x038F567C MOVZ X9, 0xEA11
	0x038F5680 MOVK X9, 0x812D0000
	0x038F5684 LDP X20, X19, [X31 + 0x10]
	0x038F5688 LDR X8, [X8 + 0xB8]
	0x038F568C MOVK X9, 0x9799
	0x038F5690 MOVK X9, 0x3D710000
	0x038F5694 STR X9, [X8]
	0x038F5698 LDR X30, [X31], #0x20
	0x038F569C RET
	0x038F56A0 STP D11, D10, [X31 - 0x60]!
	0x038F56A4 STP D9, D8, [X31 + 0x10]
	0x038F56A8 STP X30, X25, [X31 + 0x20]
	0x038F56AC STP X24, X23, [X31 + 0x30]
	0x038F56B0 STP X22, X21, [X31 + 0x40]
	0x038F56B4 STP X20, X19, [X31 + 0x50]
	0x038F56B8 ADRP X21, 0xAEC000
	0x038F56BC ADRP X22, 0x858000
	0x038F56C0 ADRP X20, 0x858000
	0x038F56C4 LDRB W8, [X21 + 0x74A]
	0x038F56C8 LDR X22, [X22 + 0x658]
	0x038F56CC LDR X20, [X20 + 0x660]
	0x038F56D0 MOV V8.16B, V0.16B
	0x038F56D4 MOV W19, W0
	0x038F56D8 TBNZ X8, 0x0, 0x38F5720
	0x038F56DC ADRP X0, 0x858000
	0x038F56E0 LDR X0, [X0 + 0x6A8]
	0x038F56E4 BL 0x1C16CF4
	0x038F56E8 ADRP X0, 0x858000
	0x038F56EC LDR X0, [X0 + 0x660]
	0x038F56F0 BL 0x1C16CF4
	0x038F56F4 ADRP X0, 0x858000
	0x038F56F8 LDR X0, [X0 + 0x658]
	0x038F56FC BL 0x1C16CF4
	0x038F5700 ADRP X0, 0x858000
	0x038F5704 LDR X0, [X0 + 0x990]
	0x038F5708 BL 0x1C16CF4
	0x038F570C ADRP X0, 0x858000
	0x038F5710 LDR X0, [X0 + 0x800]
	0x038F5714 BL 0x1C16CF4
	0x038F5718 MOVZ W8, 0x1
	0x038F571C STRB W8, [X21 + 0x74A]
	0x038F5720 LDR X0, [X22]
	0x038F5724 BL 0x1C16F10
	0x038F5728 LDR X1, [X20]
	0x038F572C MOV X20, X0
	0x038F5730 BL 0x301B7C4
	0x038F5734 CMP W19, 0x1
	0x038F5738 B.LT 0x38F583C
	0x038F573C ADRP X23, 0x858000
	0x038F5740 ADRP X24, 0x858000
	0x038F5744 ADRP X25, 0x858000
	0x038F5748 LDR X23, [X23 + 0x990]
	0x038F574C LDR X24, [X24 + 0x800]
	0x038F5750 LDR X25, [X25 + 0x6A8]
	0x038F5754 MOV W22, W31
	0x038F5758 FMOV D11, 0.5
	0x038F575C LDR X0, [X23]
	0x038F5760 LDR W8, [X0 + 0xE0]
	0x038F5764 CBNZ W8, 0x38F5770
	0x038F5768 BL 0x1C16DFC
	0x038F576C LDR X0, [X23]
	0x038F5770 LDR X8, [X0 + 0xB8]
	0x038F5774 LDR X0, [X8]
	0x038F5778 CBZ X0, 0x38F585C
	0x038F577C LDR X8, [X0]
	0x038F5780 LDP X9, X1, [X8 + 0x1B8]
	0x038F5784 BLR X9
	0x038F5788 LDR X8, [X23]
	0x038F578C LDR X8, [X8 + 0xB8]
	0x038F5790 LDR X0, [X8]
	0x038F5794 CBZ X0, 0x38F585C
	0x038F5798 LDR X8, [X0]
	0x038F579C MOV V9.16B, V0.16B
	0x038F57A0 LDP X9, X1, [X8 + 0x1B8]
	0x038F57A4 BLR X9
	0x038F57A8 LDR X0, [X24]
	0x038F57AC MOV V10.16B, V0.16B
	0x038F57B0 BL 0x1C16F10
	0x038F57B4 FSUB D0, D11, D9
	0x038F57B8 FSUB D1, D11, D10
	0x038F57BC MOV X1, X31
	0x038F57C0 MOV X21, X0
	0x038F57C4 FMUL D9, D0, D8
	0x038F57C8 FMUL D10, D1, D8
	0x038F57CC BL 0x33BDD8C
	0x038F57D0 STP D9, D10, [X21 + 0x18]
	0x038F57D4 STR W22, [X21 + 0x28]
	0x038F57D8 CBZ X20, 0x38F585C
	0x038F57DC LDR W10, [X20 + 0x1C]
	0x038F57E0 LDR X8, [X20 + 0x10]
	0x038F57E4 LDR X9, [X25]
	0x038F57E8 ADD W10, W10, 0x1
	0x038F57EC STR W10, [X20 + 0x1C]
	0x038F57F0 CBZ X8, 0x38F585C
	0x038F57F4 LDRSW X10, [X20 + 0x18]
	0x038F57F8 LDR W11, [X8 + 0x18]
	0x038F57FC CMP W10, W11
	0x038F5800 B.CS 0x38F5818
	0x038F5804 ADD W9, W10, 0x1
	0x038F5808 ADD X8, X8, X10, 0x3, LSL
	0x038F580C STR W9, [X20 + 0x18]
	0x038F5810 STR X21, [X8 + 0x20]
	0x038F5814 B 0x38F5830
	0x038F5818 LDR X8, [X9 + 0x20]
	0x038F581C MOV X0, X20
	0x038F5820 MOV X1, X21
	0x038F5824 LDR X8, [X8 + 0xC0]
	0x038F5828 LDR X2, [X8 + 0x70]
	0x038F582C BL 0x301BF90
	0x038F5830 ADD W22, W22, 0x1
	0x038F5834 CMP W19, W22
	0x038F5838 B.NE 0x38F575C
	0x038F583C MOV X0, X20
	0x038F5840 LDP X20, X19, [X31 + 0x50]
	0x038F5844 LDP X22, X21, [X31 + 0x40]
	0x038F5848 LDP X24, X23, [X31 + 0x30]
	0x038F584C LDP X30, X25, [X31 + 0x20]
	0x038F5850 LDP D9, D8, [X31 + 0x10]
	0x038F5854 LDP D11, D10, [X31], #0x60
	0x038F5858 RET
	0x038F585C BL 0x1C16F20
	0x038F5860 STP D11, D10, [X31 - 0x70]!
	0x038F5864 STP D9, D8, [X31 + 0x10]
	0x038F5868 STR X30, [X31 + 0x20]
	0x038F586C STP X26, X25, [X31 + 0x30]
	0x038F5870 STP X24, X23, [X31 + 0x40]
	0x038F5874 STP X22, X21, [X31 + 0x50]
	0x038F5878 STP X20, X19, [X31 + 0x60]
	0x038F587C ADRP X21, 0xAEC000
	0x038F5880 ADRP X22, 0x858000
	0x038F5884 ADRP X20, 0x858000
	0x038F5888 LDRB W8, [X21 + 0x74B]
	0x038F588C LDR X22, [X22 + 0x658]
	0x038F5890 LDR X20, [X20 + 0x660]
	0x038F5894 MOV V8.16B, V0.16B
	0x038F5898 MOV W19, W0
	0x038F589C TBNZ X8, 0x0, 0x38F58D8
	0x038F58A0 ADRP X0, 0x858000
	0x038F58A4 LDR X0, [X0 + 0x6A8]
	0x038F58A8 BL 0x1C16CF4
	0x038F58AC ADRP X0, 0x858000
	0x038F58B0 LDR X0, [X0 + 0x660]
	0x038F58B4 BL 0x1C16CF4
	0x038F58B8 ADRP X0, 0x858000
	0x038F58BC LDR X0, [X0 + 0x658]
	0x038F58C0 BL 0x1C16CF4
	0x038F58C4 ADRP X0, 0x858000
	0x038F58C8 LDR X0, [X0 + 0x800]
	0x038F58CC BL 0x1C16CF4
	0x038F58D0 MOVZ W8, 0x1
	0x038F58D4 STRB W8, [X21 + 0x74B]
	0x038F58D8 LDR X0, [X22]
	0x038F58DC BL 0x1C16F10
	0x038F58E0 LDR X1, [X20]
	0x038F58E4 MOV X20, X0
	0x038F58E8 BL 0x301B7C4
	0x038F58EC ADD W22, W19, 0x1
	0x038F58F0 CMP W22, 0x1
	0x038F58F4 B.LT 0x38F59C4
	0x038F58F8 ADRP X24, 0x858000
	0x038F58FC ADRP X25, 0x858000
	0x038F5900 LDR X24, [X24 + 0x800]
	0x038F5904 LDR X25, [X25 + 0x6A8]
	0x038F5908 SCVTF D0, W19
	0x038F590C FMOV D1, 0.5
	0x038F5910 MOV W23, W31

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D12
	003 Move [X31+40], D11
	004 Move [X31+48], D10
	005 Move [X31+56], D9
	006 Move [X31+64], D8
	007 Move [X31+72], X30
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X21, 0xAED000
	015 Move W8, [X21+1844]
	016 Move X20, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {45}
	022 Move X0, 0x859000
	023 Move X0, [X0+2352]
	024 Call 0x1C17CF4
	025 Move X0, 0x859000
	026 Move X0, [X0+2360]
	027 Call 0x1C17CF4
	028 Move X0, 0x859000
	029 Move X0, [X0+2368]
	030 Call 0x1C17CF4
	031 Move X0, 0x859000
	032 Move X0, [X0+2376]
	033 Call 0x1C17CF4
	034 Move X0, 0x859000
	035 Move X0, [X0+2384]
	036 Call 0x1C17CF4
	037 Move X0, 0x859000
	038 Move X0, [X0+1800]
	039 Call 0x1C17CF4
	040 Move X0, 0x859000
	041 Move X0, [X0+2048]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X21+1844], W8
	045 Move X0, X19
	046 Move X1, X20
	047 Move [X31+8], X31
	048 Move [X31+16], X31
	049 Move [X31+24], X31
	050 Call TriangulationContext.PrepareTriangulation, X0, X1
	051 Move X0, [X19+32]
	052 Compare X0, 0
	053 JumpIfEqual {165}
	054 Move X20, 0x859000
	055 Move X20, [X20+1800]
	056 Move W1, W31
	057 Move X2, [X20]
	058 Call List`1<Object>.get_Item, X0, X1
	059 Compare X0, 0
	060 JumpIfEqual {165}
	061 Move X8, X0
	062 Move X0, [X19+32]
	063 Compare X0, 0
	064 JumpIfEqual {165}
	065 Move X2, [X20]
	066 Move V8, [X8+24]
	067 Move W1, W31
	068 Call List`1<Object>.get_Item, X0, X1
	069 Compare X0, 0
	070 JumpIfEqual {165}
	071 Move X8, X0
	072 Move X0, [X19+32]
	073 Compare X0, 0
	074 JumpIfEqual {165}
	075 Move X9, 0x859000
	076 Move X9, [X9+2376]
	077 Move X20, 0x859000
	078 Move X20, [X20+2360]
	079 Move X23, 0x859000
	080 Move X1, [X9]
	081 Move X22, 0x859000
	082 Move X21, 0x859000
	083 Move V12, [X8+32]
	084 Move X23, [X23+2048]
	085 Move X22, [X22+2384]
	086 Move X21, [X21+2352]
	087 Add X8, X31, 8
	088 Call List`1<Object>.GetEnumerator, X0
	089 Move V11, V12
	090 Move V9, V8
	091 Move V10, V12
	092 Move X1, [X20]
	093 Add X0, X31, 8
	094 Call Enumerator<Object>.MoveNext, X0
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfNotEqual {111}
	099 Move X8, [X31+24]
	100 Compare X8, 0
	101 JumpIfEqual {164}
	102 Move D0, [X8+24]
	103 Move D12, [X8+32]
	104 NotImplemented "Instruction FCMP not yet implemented."
	105 NotImplemented "Instruction FCSEL not yet implemented."
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 NotImplemented "Instruction FCSEL not yet implemented."
	108 NotImplemented "Instruction FCMP not yet implemented."
	109 NotImplemented "Instruction FCSEL not yet implemented."
	110 NotImplemented "Instruction FCMP not yet implemented."
	111 Move X1, [X21]
	112 Add X0, X31, 8
	113 Call Enumerator<Object>.Dispose, X0
	114 Move V0, [X19+64]
	115 Move X0, [X23]
	116 Subtract D1, D9, D8
	117 Subtract D2, D11, D10
	118 NotImplemented "Instruction FCVT not yet implemented."
	119 Multiply D11, D1, D0
	120 Multiply D12, D2, D0
	121 Call 0x1C17F10
	122 Move X1, X31
	123 Move X20, X0
	124 Add D9, D9, D11
	125 Subtract D10, D10, D12
	126 Call Object..ctor, X0
	127 Move TEMP, 0
	128 Not TEMP
	129 Move W24, TEMP
	130 Move [X20+24], D9
	131 Move [X20+32], D10
	132 Move [X20+40], W24
	133 Move X0, [X23]
	134 Call 0x1C17F10
	135 Move X1, X31
	136 Move X21, X0
	137 Subtract D8, D8, D11
	138 Call Object..ctor, X0
	139 Move [X21+24], D8
	140 Move [X21+32], D10
	141 Move [X21+40], W24
	142 Move X0, [X19+32]
	143 Move [X19+80], X20
	144 Move [X19+88], X21
	145 Compare X0, 0
	146 JumpIfEqual {165}
	147 Move X1, [X19+112]
	148 Move X2, [X22]
	149 Call List`1<Object>.Sort, X0, X1
	150 Move X20, [X31+112]
	151 Move X19, [X31+120]
	152 Move X22, [X31+96]
	153 Move X21, [X31+104]
	154 Move X24, [X31+80]
	155 Move X23, [X31+88]
	156 Move X30, [X31+72]
	157 Move D9, [X31+56]
	158 Move D8, [X31+64]
	159 Move D11, [X31+40]
	160 Move D10, [X31+48]
	161 Move V12, [X31+32]
	162 Add X31, X31, 128
	163 Return 
	164 Call 0x1C17F20
	165 Call 0x1C17F20
	166 Move X21, X0
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move X0, X21
	169 Call 0x3EB2AD0
	170 Move X20, [X0]
	171 Call 0x3EB2AE0
	172 Move X8, 0x859000
	173 Move X8, [X8+2352]
	174 Add X0, X31, 8
	175 Move X1, [X8]
	176 Call Enumerator<Object>.Dispose, X0
	177 Compare X20, 0
	178 JumpIfEqual {114}
	179 Move X0, X20
	180 Call 0x1C17F18
	181 Move X20, X31
	182 Move X21, X0
	183 Move X8, 0x859000
	184 Move X8, [X8+2352]
	185 Move X1, [X8]
	186 Add X0, X31, 8
	187 Call Enumerator<Object>.Dispose, X0
	188 Compare X20, 0
	189 JumpIfNotEqual {192}
	190 Move X0, X21
	191 Call 0x1D2D690
	192 Move X0, X20
	193 Call 0x1C17F18
	194 Call 0x1991590

Method: System.Void FinalizeTriangulation()

Disassembly:
	0x038F2DE0 B 0x38F2BE4
	0x038F2DE4 LDP X20, X19, [X31 + 0x40]
	0x038F2DE8 LDP X22, X21, [X31 + 0x30]
	0x038F2DEC LDP X24, X23, [X31 + 0x20]
	0x038F2DF0 LDP X26, X25, [X31 + 0x10]
	0x038F2DF4 LDP X30, X27, [X31], #0x50
	0x038F2DF8 RET
	0x038F2DFC BL 0x1C16F20
	0x038F2E00 STP X30, X27, [X31 - 0x50]!
	0x038F2E04 STP X26, X25, [X31 + 0x10]
	0x038F2E08 STP X24, X23, [X31 + 0x20]
	0x038F2E0C STP X22, X21, [X31 + 0x30]
	0x038F2E10 STP X20, X19, [X31 + 0x40]
	0x038F2E14 ADRP X22, 0x85B000
	0x038F2E18 LDR X22, [X22 + 0x850]
	0x038F2E1C MOV X19, X2
	0x038F2E20 MOV X20, X1
	0x038F2E24 MOV X21, X0
	0x038F2E28 ADRP X26, 0xAEF000
	0x038F2E2C MOVZ W27, 0x1
	0x038F2E30 LDRB W8, [X26 + 0x71A]
	0x038F2E34 TBNZ X8, 0x0, 0x38F2E44
	0x038F2E38 MOV X0, X22
	0x038F2E3C BL 0x1C16CF4
	0x038F2E40 STRB W27, [X26 + 0x71A]
	0x038F2E44 CBZ X21, 0x38F2F28
	0x038F2E48 LDR X8, [X21]
	0x038F2E4C MOV X0, X21
	0x038F2E50 LDP X9, X1, [X8 + 0x1B8]
	0x038F2E54 BLR X9
	0x038F2E58 TBZ X0, 0x0, 0x38F2E70
	0x038F2E5C MOV X0, X21
	0x038F2E60 BL 0x38F1438
	0x038F2E64 CBZ X0, 0x38F2F28
	0x038F2E68 MOV X1, X19
	0x038F2E6C BL 0x38F1ED0
	0x038F2E70 CBZ X19, 0x38F2F28
	0x038F2E74 LDR X23, [X19 + 0x28]
	0x038F2E78 CBZ X23, 0x38F2F28
	0x038F2E7C CBZ X20, 0x38F2F28
	0x038F2E80 LDR X8, [X20 + 0x10]
	0x038F2E84 CBZ X8, 0x38F2F28
	0x038F2E88 LDR V0, [X23 + 0x18]
	0x038F2E8C LDR V1, [X8 + 0x18]
	0x038F2E90 FCMP D0, D1
	0x038F2E94 B.PL 0x38F2EEC
	0x038F2E98 LDR X8, [X19 + 0x10]
	0x038F2E9C CBZ X8, 0x38F2F28
	0x038F2EA0 LDR X9, [X8 + 0x10]
	0x038F2EA4 CBZ X9, 0x38F2F28
	0x038F2EA8 LDR X0, [X22]
	0x038F2EAC LDR X24, [X8 + 0x28]
	0x038F2EB0 LDR X25, [X9 + 0x28]
	0x038F2EB4 LDR W8, [X0 + 0xE0]
	0x038F2EB8 CBNZ W8, 0x38F2EC0
	0x038F2EBC BL 0x1C16DFC
	0x038F2EC0 MOV X0, X23
	0x038F2EC4 MOV X1, X24
	0x038F2EC8 MOV X2, X25
	0x038F2ECC BL 0x38F1F1C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xAF0000
	006 Move W8, [X20+1845]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x85C000
	013 Move X0, [X0+1840]
	014 Call 0x1C17CF4
	015 Move X0, 0x85C000
	016 Move X0, [X0+2168]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1845], W8
	020 Move X20, [X19+48]
	021 Compare X20, 0
	022 JumpIfEqual {72}
	023 Move X10, 0x85C000
	024 Move X8, [X20]
	025 Move X10, [X10+2168]
	026 Move X21, [X19+24]
	027 NotImplemented "Instruction LDRH not yet implemented."
	028 Move X1, [X10]
	029 Compare X9, 0
	030 JumpIfEqual {37}
	031 Move X10, [X8+176]
	032 Add X10, X10, 8
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Subtract X9, X9, 1
	036 Add X10, X10, 16
	037 Move W2, 4
	038 Move X0, X20
	039 Call 0x1C5D788
	040 Move W9, [X10]
	041 Add W9, W9, 4
	042 Add X8, X8, W9
	043 Add X0, X8, 312
	044 Move X8, [X0]
	045 Move X2, [X0+8]
	046 Move X0, X20
	047 Move X1, X21
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move X8, [X19+24]
	050 Compare X8, 0
	051 JumpIfEqual {72}
	052 Move W2, [X8+24]
	053 Move W9, [X8+28]
	054 Add W9, W9, 1
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move [X8+24], W31
	057 Move [X8+28], W9
	058 Move X0, [X8+16]
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move W1, W31
	062 Move X3, X31
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Call Array.Clear, X0, X1, X2
	066 Return 
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Move X21, [X31+40]
	071 Return 
	072 Call 0x1C17F20

Method: UnityEngine.ProBuilder.Poly2Tri.TriangulationConstraint NewConstraint(UnityEngine.ProBuilder.Poly2Tri.TriangulationPoint a, UnityEngine.ProBuilder.Poly2Tri.TriangulationPoint b)

Disassembly:
	0x038F5A1C LDR X0, [X0 + 0x990]
	0x038F5A20 BL 0x1C16CF4
	0x038F5A24 ADRP X0, 0x805000
	0x038F5A28 LDR X0, [X0 + 0x2E8]
	0x038F5A2C BL 0x1C16CF4
	0x038F5A30 MOVZ W8, 0x1
	0x038F5A34 STRB W8, [X19 + 0x74C]
	0x038F5A38 LDR X0, [X21]
	0x038F5A3C BL 0x1C16F10
	0x038F5A40 MOV X1, X31
	0x038F5A44 MOV X19, X0
	0x038F5A48 BL 0x338E3CC
	0x038F5A4C LDR X8, [X20]
	0x038F5A50 LDR X8, [X8 + 0xB8]
	0x038F5A54 STR X19, [X8]
	0x038F5A58 LDP X20, X19, [X31 + 0x10]
	0x038F5A5C LDP X30, X21, [X31], #0x20
	0x038F5A60 RET
	0x038F5A64 SUB X31, X31, 0xC0
	0x038F5A68 STP D15, D14, [X31 + 0x20]
	0x038F5A6C STP D13, D12, [X31 + 0x30]
	0x038F5A70 STP D11, D10, [X31 + 0x40]
	0x038F5A74 STP D9, D8, [X31 + 0x50]
	0x038F5A78 STP X29, X30, [X31 + 0x60]
	0x038F5A7C STP X28, X27, [X31 + 0x70]
	0x038F5A80 STP X26, X25, [X31 + 0x80]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xAED000
	007 Move X22, 0x859000
	008 Move W8, [X21+1846]
	009 Move X22, [X22+2248]
	010 Move X19, X2
	011 Move X20, X1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x859000
	017 Move X0, [X0+2248]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1846], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X20
	024 Move X2, X19
	025 Move X21, X0
	026 Call DTSweepConstraint..ctor, X0, X1, X2
	027 Move X0, X21
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Return X0

Method: UnityEngine.ProBuilder.Poly2Tri.TriangulationAlgorithm get_Algorithm()

Disassembly:
	0x038F5A84 STP X24, X23, [X31 + 0x90]
	0x038F5A88 STP X22, X21, [X31 + 0xA0]

ISIL:
	001 Move W0, W31
	002 Return X0

