Type: UnityEngine.ProBuilder.Poly2Tri.ConstrainedPointSet

Method: System.Int32[] get_EdgeIndex()

Disassembly:
	0x038F5BC8 FCSEL D0, D1, D0, NE
	0x038F5BCC B 0x38F5BFC

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_EdgeIndex(System.Int32[] value)

Disassembly:
	0x038F5BD0 CBNZ W8, 0x38F5BDC
	0x038F5BD4 BL 0x1C16DFC

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Void .ctor(System.Collections.Generic.List`1<UnityEngine.ProBuilder.Poly2Tri.TriangulationPoint> points, System.Int32[] index)

Disassembly:
	0x038F5BD8 LDR X0, [X22]
	0x038F5BDC LDR X8, [X0 + 0xB8]
	0x038F5BE0 LDR X0, [X8]
	0x038F5BE4 CBZ X0, 0x38F5D3C
	0x038F5BE8 LDR X8, [X0]
	0x038F5BEC LDP X9, X1, [X8 + 0x1B8]
	0x038F5BF0 BLR X9
	0x038F5BF4 FSUB D0, D11, D0
	0x038F5BF8 FMUL D0, D13, D0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X2
	005 Move X20, X0
	006 Call PointSet..ctor, X0, X1
	007 Move [X20+32], X19
	008 Move X20, [X31+16]
	009 Move X19, [X31+24]
	010 Move X30, [X31+32]
	011 Return 

Method: UnityEngine.ProBuilder.Poly2Tri.TriangulationMode get_TriangulationMode()

Disassembly:
	0x038F5C84 BL 0x3EB1C30
	0x038F5C88 LDR X0, [X24]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Void Prepare(UnityEngine.ProBuilder.Poly2Tri.TriangulationContext tcx)

Disassembly:
	0x038F5C8C MOV V9.16B, V0.16B
	0x038F5C90 BL 0x1C16F10
	0x038F5C94 LDR V0, [X31 + 0x18]
	0x038F5C98 MOV X1, X31
	0x038F5C9C MOV X20, X0
	0x038F5CA0 FMUL D9, D10, D9
	0x038F5CA4 FMUL D8, D10, D0
	0x038F5CA8 BL 0x33BDD8C
	0x038F5CAC STP D8, D9, [X20 + 0x18]
	0x038F5CB0 STR W21, [X20 + 0x28]
	0x038F5CB4 CBZ X19, 0x38F5D3C
	0x038F5CB8 LDR X8, [X19]
	0x038F5CBC MOV X0, X20
	0x038F5CC0 LDR X1, [X8 + 0x40]
	0x038F5CC4 BL 0x1C16E00
	0x038F5CC8 CBZ X0, 0x38F5D40
	0x038F5CCC LDR W8, [X19 + 0x18]
	0x038F5CD0 CMP X21, X8
	0x038F5CD4 B.CS 0x38F5D4C
	0x038F5CD8 ADD X8, X19, X21, 0x3, LSL
	0x038F5CDC ADD X21, X21, 0x1
	0x038F5CE0 CMP X21, X25
	0x038F5CE4 STR X20, [X8 + 0x20]
	0x038F5CE8 B.NE 0x38F5B6C
	0x038F5CEC ADRP X8, 0x858000
	0x038F5CF0 LDR X8, [X8 + 0x9A8]
	0x038F5CF4 LDR X0, [X8]
	0x038F5CF8 BL 0x1C16F10
	0x038F5CFC MOV X1, X19
	0x038F5D00 MOV X20, X0
	0x038F5D04 BL 0x38EDDB0
	0x038F5D08 MOV X0, X20
	0x038F5D0C LDP X20, X19, [X31 + 0xB0]
	0x038F5D10 LDP X22, X21, [X31 + 0xA0]
	0x038F5D14 LDP X24, X23, [X31 + 0x90]
	0x038F5D18 LDP X26, X25, [X31 + 0x80]
	0x038F5D1C LDP X28, X27, [X31 + 0x70]
	0x038F5D20 LDP X29, X30, [X31 + 0x60]
	0x038F5D24 LDP D9, D8, [X31 + 0x50]
	0x038F5D28 LDP D11, D10, [X31 + 0x40]
	0x038F5D2C LDP D13, D12, [X31 + 0x30]
	0x038F5D30 LDP D15, D14, [X31 + 0x20]
	0x038F5D34 ADD X31, X31, 0xC0
	0x038F5D38 RET
	0x038F5D3C BL 0x1C16F20
	0x038F5D40 BL 0x1C16F44
	0x038F5D44 MOV X1, X31
	0x038F5D48 BL 0x1C16DEC
	0x038F5D4C BL 0x1C16F28
	0x038F5D50 SUB X31, X31, 0x90
	0x038F5D54 STP D15, D14, [X31 + 0x10]
	0x038F5D58 STP D13, D12, [X31 + 0x20]
	0x038F5D5C STP D11, D10, [X31 + 0x30]
	0x038F5D60 STP D9, D8, [X31 + 0x40]
	0x038F5D64 STP X30, X25, [X31 + 0x50]
	0x038F5D68 STP X24, X23, [X31 + 0x60]
	0x038F5D6C STP X22, X21, [X31 + 0x70]
	0x038F5D70 STP X20, X19, [X31 + 0x80]
	0x038F5D74 ADRP X19, 0xAEC000
	0x038F5D78 ADRP X21, 0x858000
	0x038F5D7C LDRB W8, [X19 + 0x74E]
	0x038F5D80 LDR X21, [X21 + 0x998]
	0x038F5D84 MOV W20, W0
	0x038F5D88 MOV V8.16B, V0.16B
	0x038F5D8C TBNZ X8, 0x0, 0x38F5DD4
	0x038F5D90 ADRP X0, 0x7FE000
	0x038F5D94 LDR X0, [X0 + 0x5A8]
	0x038F5D98 BL 0x1C16CF4
	0x038F5D9C ADRP X0, 0x858000
	0x038F5DA0 LDR X0, [X0 + 0x9A0]
	0x038F5DA4 BL 0x1C16CF4
	0x038F5DA8 ADRP X0, 0x858000
	0x038F5DAC LDR X0, [X0 + 0x998]
	0x038F5DB0 BL 0x1C16CF4
	0x038F5DB4 ADRP X0, 0x858000
	0x038F5DB8 LDR X0, [X0 + 0x710]
	0x038F5DBC BL 0x1C16CF4
	0x038F5DC0 ADRP X0, 0x858000
	0x038F5DC4 LDR X0, [X0 + 0x9A8]
	0x038F5DC8 BL 0x1C16CF4
	0x038F5DCC MOVZ W8, 0x1
	0x038F5DD0 STRB W8, [X19 + 0x74E]
	0x038F5DD4 LDR X0, [X21]
	0x038F5DD8 MOV W1, W20
	0x038F5DDC BL 0x1C16D6C
	0x038F5DE0 CMP W20, 0x1
	0x038F5DE4 MOV X19, X0
	0x038F5DE8 B.LT 0x38F5F48
	0x038F5DEC ADRP X22, 0x858000
	0x038F5DF0 ADRP X23, 0x7FE000
	0x038F5DF4 ADRP X24, 0x858000
	0x038F5DF8 LDR X22, [X22 + 0x9A0]
	0x038F5DFC LDR X23, [X23 + 0x5A8]
	0x038F5E00 LDR X24, [X24 + 0x710]
	0x038F5E04 FMOV D0, 0.25
	0x038F5E08 FMOV D1, 4.000000000232831
	0x038F5E0C FMOV D10, 0.5
	0x038F5E10 FMOV D2, 8.000000000465661
	0x038F5E14 MOV X21, X31
	0x038F5E18 SCVTF D3, W20
	0x038F5E1C FMUL D15, D8, D0
	0x038F5E20 FDIV D12, D8, D1
	0x038F5E24 FMUL D13, D8, D10
	0x038F5E28 FDIV D14, D8, D2
	0x038F5E2C MOV W25, W20

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0xAED000
	010 Move W8, [X21+1852]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x859000
	018 Move X0, [X0+2408]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1852], W8
	022 Move X0, X20
	023 Move X1, X19
	024 Call PointSet.Prepare, X0, X1
	025 Move X8, [X20+32]
	026 Compare X8, 0
	027 JumpIfEqual {108}
	028 Move X25, 0x859000
	029 Move X25, [X25+2408]
	030 Move W24, W31
	031 Move W9, [X8+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X21, [X20+16]
	034 Compare X21, 0
	035 JumpIfEqual {108}
	036 Move X9, [X21]
	037 Add X8, X8, W24
	038 Move W22, [X8+32]
	039 Move X1, [X25]
	040 NotImplemented "Instruction LDRH not yet implemented."
	041 Compare X8, 0
	042 JumpIfEqual {49}
	043 Move X10, [X9+176]
	044 Add X10, X10, 8
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Subtract X8, X8, 1
	048 Add X10, X10, 16
	049 Move X0, X21
	050 Move W2, W31
	051 Call 0x1C5D788
	052 NotImplemented "Instruction LDRSW not yet implemented."
	053 Add X8, X9, X8
	054 Add X0, X8, 312
	055 Move X8, [X0]
	056 Move X2, [X0+8]
	057 Move X0, X21
	058 Move W1, W22
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X9, [X20+32]
	061 Compare X9, 0
	062 JumpIfEqual {108}
	063 Move W8, [X9+24]
	064 Move X10, W24
	065 Or X10, X10, 1
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X22, [X20+16]
	068 Compare X22, 0
	069 JumpIfEqual {108}
	070 Move X8, [X22]
	071 Add X9, X9, X10
	072 Move W23, [X9+32]
	073 Move X1, [X25]
	074 NotImplemented "Instruction LDRH not yet implemented."
	075 Move X21, X0
	076 Compare X9, 0
	077 JumpIfEqual {84}
	078 Move X10, [X8+176]
	079 Add X10, X10, 8
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Subtract X9, X9, 1
	083 Add X10, X10, 16
	084 Move X0, X22
	085 Move W2, W31
	086 Call 0x1C5D788
	087 NotImplemented "Instruction LDRSW not yet implemented."
	088 Add X8, X8, X9
	089 Add X0, X8, 312
	090 Move X8, [X0]
	091 Move X2, [X0+8]
	092 Move X0, X22
	093 Move W1, W23
	094 NotImplemented "Instruction BLR not yet implemented."
	095 Compare X19, 0
	096 JumpIfEqual {108}
	097 Move X8, [X19]
	098 Move X2, X0
	099 Move X0, X19
	100 Move X1, X21
	101 Move X9, [X8+408]
	102 Move X3, [X8+416]
	103 NotImplemented "Instruction BLR not yet implemented."
	104 Move X8, [X20+32]
	105 Add W24, W24, 2
	106 Compare X8, 0
	107 JumpIfNotEqual {31}
	108 Call 0x1C17F20
	109 Move X20, [X31+48]
	110 Move X19, [X31+56]
	111 Move X22, [X31+32]
	112 Move X21, [X31+40]
	113 Move X24, [X31+16]
	114 Move X23, [X31+24]
	115 Move X30, [X31+64]
	116 Move X25, [X31+72]
	117 Return 
	118 Call 0x1C17F28

