Type: Mono.Math.BigInteger

Method: System.Void .ctor(Mono.Math.BigInteger/Sign sign, System.UInt32 len)

Disassembly:
	0x032069AC CBNZ X9, 0x32069DC
	0x032069B0 MOV X0, X31
	0x032069B4 BL 0x3256158
	0x032069B8 LDR X8, [X20]
	0x032069BC MOV X19, X0
	0x032069C0 LDR W9, [X8 + 0xE0]
	0x032069C4 CBNZ W9, 0x32069D4
	0x032069C8 MOV X0, X8
	0x032069CC BL 0x1C16DFC
	0x032069D0 LDR X8, [X20]
	0x032069D4 LDR X9, [X8 + 0xB8]
	0x032069D8 STR X19, [X9 + 0x8]
	0x032069DC LDR W9, [X8 + 0xE0]
	0x032069E0 CBNZ W9, 0x32069F0
	0x032069E4 MOV X0, X8
	0x032069E8 BL 0x1C16DFC
	0x032069EC LDR X8, [X20]
	0x032069F0 LDR X8, [X8 + 0xB8]
	0x032069F4 LDP X20, X19, [X31 + 0x10]
	0x032069F8 LDR X0, [X8 + 0x8]
	0x032069FC LDR X30, [X31], #0x20
	0x03206A00 RET
	0x03206A04 STR X30, [X31 - 0x40]!
	0x03206A08 STP X24, X23, [X31 + 0x10]
	0x03206A0C STP X22, X21, [X31 + 0x20]
	0x03206A10 STP X20, X19, [X31 + 0x30]
	0x03206A14 ADRP X23, 0x11D6000
	0x03206A18 ADRP X22, 0xF1B000
	0x03206A1C ADRP X21, 0xEED000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11D7000
	007 Move X21, 0xF17000
	008 Move W8, [X22+577]
	009 Move X21, [X21+3336]
	010 Move W19, W2
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF17000
	017 Move X0, [X0+3336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+577], W8
	021 Move W8, 1
	022 Move X0, X20
	023 Move X1, X31
	024 Move [X20+16], W8
	025 Call Object..ctor, X0
	026 Move X0, [X21]
	027 Move W1, W19
	028 Call 0x1C17D6C
	029 Move [X20+24], X0
	030 Move [X20+16], W19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Return 

Method: System.Void .ctor(Mono.Math.BigInteger bi)

Disassembly:
	0x03206A20 LDRB W8, [X23 + 0x24B]
	0x03206A24 LDR X22, [X22 + 0x530]
	0x03206A28 LDR X21, [X21 + 0x618]
	0x03206A2C MOV X20, X1
	0x03206A30 MOV W19, W0
	0x03206A34 TBNZ X8, 0x0, 0x3206A58
	0x03206A38 ADRP X0, 0xF1B000
	0x03206A3C LDR X0, [X0 + 0x530]
	0x03206A40 BL 0x1C16CF4
	0x03206A44 ADRP X0, 0xEED000
	0x03206A48 LDR X0, [X0 + 0x618]
	0x03206A4C BL 0x1C16CF4
	0x03206A50 MOVZ W8, 0x1
	0x03206A54 STRB W8, [X23 + 0x24B]
	0x03206A58 LDR X0, [X22]
	0x03206A5C SBFM W8, W19, 0x5, 0x1F
	0x03206A60 ANDS W23, W19, 0x1F
	0x03206A64 CINC W24, W8, NE
	0x03206A68 BL 0x1C16F10
	0x03206A6C ADD W2, W24, 0x1
	0x03206A70 MOV X19, X0
	0x03206A74 BL 0x32059AC
	0x03206A78 LDR X0, [X21]
	0x03206A7C UBFM W21, W24, 0x1E, 0x1D
	0x03206A80 MOV W1, W21
	0x03206A84 BL 0x1C16D6C
	0x03206A88 CBZ X20, 0x3206B5C
	0x03206A8C LDR X8, [X20]
	0x03206A90 MOV X22, X0
	0x03206A94 MOV X0, X20
	0x03206A98 MOV X1, X22
	0x03206A9C LDP X9, X2, [X8 + 0x198]
	0x03206AA0 BLR X9
	0x03206AA4 CBZ X19, 0x3206B5C
	0x03206AA8 LDR X2, [X19 + 0x18]
	0x03206AAC MOV X0, X22
	0x03206AB0 MOV W1, W31
	0x03206AB4 MOV W3, W31
	0x03206AB8 MOV W4, W21
	0x03206ABC MOV X5, X31
	0x03206AC0 BL 0x33A8A9C
	0x03206AC4 CBZ W23, 0x3206B10
	0x03206AC8 LDR X8, [X19 + 0x18]
	0x03206ACC CBZ X8, 0x3206B5C
	0x03206AD0 LDR W10, [X8 + 0x18]
	0x03206AD4 SXTW X9, W24
	0x03206AD8 SUB X9, X9, 0x1
	0x03206ADC CMP W9, W10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x11D7000
	008 Move W8, [X21+578]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF17000
	016 Move X0, [X0+3336]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+578], W8
	020 Move W8, 1
	021 Move X0, X20
	022 Move X1, X31
	023 Move [X20+16], W8
	024 Call Object..ctor, X0
	025 Compare X19, 0
	026 JumpIfEqual {62}
	027 Move X0, [X19+24]
	028 Compare X0, 0
	029 JumpIfEqual {62}
	030 Move X1, X31
	031 Call Array.Clone, X0
	032 Compare X0, 0
	033 JumpIfEqual {52}
	034 Move X23, 0xF17000
	035 Move X23, [X23+3336]
	036 Move X21, X0
	037 Move X22, [X23]
	038 Move X1, X22
	039 Call 0x1C17E00
	040 Compare X0, 0
	041 JumpIfEqual {49}
	042 Move [X20+24], X0
	043 Move X22, [X23]
	044 Move X0, X21
	045 Move X1, X22
	046 Call 0x1C17E00
	047 Compare X0, 0
	048 JumpIfNotEqual {53}
	049 Move X0, X21
	050 Move X1, X22
	051 Call 0x1C181E0
	052 Move [X20+24], X31
	053 Move W8, [X19+16]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move [X20+16], W8
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return 
	062 Call 0x1C17F20

Method: System.Void .ctor(Mono.Math.BigInteger bi, System.UInt32 len)

Disassembly:
	0x03206AE0 B.CS 0x3206B60
	0x03206AE4 ADD X8, X8, X9, 0x2, LSL
	0x03206AE8 LDR W9, [X8 + 0x20]
	0x03206AEC SUB W10, W23, 0x1
	0x03206AF0 MOVZ W11, 0x1
	0x03206AF4 SUB W12, W31, W23
	0x03206AF8 MOVN W13, 0x0
	0x03206AFC LSLV W10, W11, W10
	0x03206B00 ORR W9, W9, W10, 0x0
	0x03206B04 LSRV W10, W13, W12
	0x03206B08 AND W9, W9, W10, 0x0
	0x03206B0C B 0x3206B38
	0x03206B10 LDR X8, [X19 + 0x18]
	0x03206B14 CBZ X8, 0x3206B5C
	0x03206B18 LDR W10, [X8 + 0x18]
	0x03206B1C SXTW X9, W24
	0x03206B20 SUB X9, X9, 0x1
	0x03206B24 CMP W9, W10
	0x03206B28 B.CS 0x3206B60
	0x03206B2C ADD X8, X8, X9, 0x2, LSL
	0x03206B30 LDR W9, [X8 + 0x20]
	0x03206B34 ORR W9, W9, 0x80000000
	0x03206B38 MOV X0, X19
	0x03206B3C STR W9, [X8 + 0x20]
	0x03206B40 BL 0x3205BB4
	0x03206B44 MOV X0, X19
	0x03206B48 LDP X20, X19, [X31 + 0x30]
	0x03206B4C LDP X22, X21, [X31 + 0x20]
	0x03206B50 LDP X24, X23, [X31 + 0x10]
	0x03206B54 LDR X30, [X31], #0x40
	0x03206B58 RET
	0x03206B5C BL 0x1C16F20
	0x03206B60 BL 0x1C16F28
	0x03206B64 STP X30, X21, [X31 - 0x20]!
	0x03206B68 STP X20, X19, [X31 + 0x10]
	0x03206B6C ADRP X20, 0x11D6000
	0x03206B70 ADRP X21, 0xF1B000
	0x03206B74 LDRB W8, [X20 + 0x24C]
	0x03206B78 LDR X21, [X21 + 0x530]
	0x03206B7C MOV W19, W0
	0x03206B80 TBNZ X8, 0x0, 0x3206B98
	0x03206B84 ADRP X0, 0xF1B000
	0x03206B88 LDR X0, [X0 + 0x530]
	0x03206B8C BL 0x1C16CF4
	0x03206B90 MOVZ W8, 0x1
	0x03206B94 STRB W8, [X20 + 0x24C]
	0x03206B98 LDR X0, [X21]
	0x03206B9C LDR W8, [X0 + 0xE0]
	0x03206BA0 CBNZ W8, 0x3206BA8
	0x03206BA4 BL 0x1C16DFC
	0x03206BA8 BL 0x320695C
	0x03206BAC MOV X1, X0
	0x03206BB0 MOV W0, W19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x11D7000
	008 Move X22, 0xF17000
	009 Move W8, [X23+579]
	010 Move X22, [X22+3336]
	011 Move W21, W2
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF17000
	019 Move X0, [X0+3336]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+579], W8
	023 Move W8, 1
	024 Move X0, X19
	025 Move X1, X31
	026 Move [X19+16], W8
	027 Call Object..ctor, X0
	028 Move X0, [X22]
	029 Move W1, W21
	030 Call 0x1C17D6C
	031 Move [X19+24], X0
	032 Compare X20, 0
	033 JumpIfEqual {62}
	034 Move W12, [X20+16]
	035 Compare W12, 0
	036 JumpIfEqual {54}
	037 Move X9, [X20+24]
	038 Move X8, X31
	039 Add X10, X0, 32
	040 Add X11, X9, 32
	041 Compare X9, 0
	042 JumpIfEqual {62}
	043 Move W12, [X9+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Compare X0, 0
	046 JumpIfEqual {62}
	047 Move W12, [X0+24]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W12, [X11]
	050 Move [X10], W12
	051 Move W12, [X20+16]
	052 Add X8, X8, 1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move [X19+16], W12
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return 
	062 Call 0x1C17F20
	063 Call 0x1C17F28

Method: System.Void .ctor(System.Byte[] inData)

Disassembly:
	0x03202F94 LDR X1, [X8]
	0x03202F98 MOV X0, X25
	0x03202F9C MOV X2, X31
	0x03202FA0 BL 0x32333E0
	0x03202FA4 ADRP X8, 0xF1F000
	0x03202FA8 LDR X8, [X8 + 0x5D0]
	0x03202FAC LDR X1, [X8]
	0x03202FB0 MOV X0, X25
	0x03202FB4 MOV X2, X31
	0x03202FB8 BL 0x32333E0
	0x03202FBC MOV X0, X27
	0x03202FC0 MOV X1, X31
	0x03202FC4 BL 0x33225A0
	0x03202FC8 MOV X1, X0
	0x03202FCC MOV X0, X25
	0x03202FD0 MOV X2, X31
	0x03202FD4 BL 0x32333E0
	0x03202FD8 ADRP X8, 0xF1F000
	0x03202FDC LDR X8, [X8 + 0x620]
	0x03202FE0 LDR X1, [X8]
	0x03202FE4 MOV X0, X25
	0x03202FE8 MOV X2, X31
	0x03202FEC BL 0x32333E0
	0x03202FF0 TBZ X26, 0x0, 0x3203230
	0x03202FF4 CBZ X24, 0x3203054
	0x03202FF8 ADRP X8, 0xF1F000
	0x03202FFC LDR X8, [X8 + 0x610]
	0x03203000 LDR X1, [X8]
	0x03203004 MOV X0, X25
	0x03203008 MOV X2, X31
	0x0320300C BL 0x32333E0
	0x03203010 LDR X0, [X29]
	0x03203014 LDR W8, [X0 + 0xE0]
	0x03203018 CBNZ W8, 0x3203020
	0x0320301C BL 0x1C16DFC
	0x03203020 MOV X0, X24
	0x03203024 MOV X1, X31
	0x03203028 BL 0x33225A0
	0x0320302C MOV X1, X0
	0x03203030 MOV X0, X25
	0x03203034 MOV X2, X31
	0x03203038 BL 0x32333E0
	0x0320303C ADRP X8, 0xF1E000
	0x03203040 LDR X8, [X8 + 0x608]
	0x03203044 LDR X1, [X8]
	0x03203048 MOV X0, X25
	0x0320304C MOV X2, X31
	0x03203050 BL 0x32333E0
	0x03203054 CBZ X23, 0x32030B4
	0x03203058 ADRP X8, 0xF1E000
	0x0320305C LDR X8, [X8 + 0x648]
	0x03203060 LDR X1, [X8]
	0x03203064 MOV X0, X25
	0x03203068 MOV X2, X31
	0x0320306C BL 0x32333E0
	0x03203070 LDR X0, [X29]
	0x03203074 LDR W8, [X0 + 0xE0]
	0x03203078 CBNZ W8, 0x3203080
	0x0320307C BL 0x1C16DFC
	0x03203080 MOV X0, X23
	0x03203084 MOV X1, X31
	0x03203088 BL 0x33225A0
	0x0320308C MOV X1, X0
	0x03203090 MOV X0, X25
	0x03203094 MOV X2, X31
	0x03203098 BL 0x32333E0
	0x0320309C ADRP X8, 0xF1E000
	0x032030A0 LDR X8, [X8 + 0x618]
	0x032030A4 LDR X1, [X8]
	0x032030A8 MOV X0, X25
	0x032030AC MOV X2, X31
	0x032030B0 BL 0x32333E0
	0x032030B4 CBZ X22, 0x3203114
	0x032030B8 ADRP X8, 0xF1E000
	0x032030BC LDR X8, [X8 + 0x638]
	0x032030C0 LDR X1, [X8]
	0x032030C4 MOV X0, X25
	0x032030C8 MOV X2, X31
	0x032030CC BL 0x32333E0
	0x032030D0 LDR X0, [X29]
	0x032030D4 LDR W8, [X0 + 0xE0]
	0x032030D8 CBNZ W8, 0x32030E0
	0x032030DC BL 0x1C16DFC
	0x032030E0 MOV X0, X22
	0x032030E4 MOV X1, X31
	0x032030E8 BL 0x33225A0
	0x032030EC MOV X1, X0
	0x032030F0 MOV X0, X25
	0x032030F4 MOV X2, X31
	0x032030F8 BL 0x32333E0
	0x032030FC ADRP X8, 0xF1E000
	0x03203100 LDR X8, [X8 + 0x658]
	0x03203104 LDR X1, [X8]
	0x03203108 MOV X0, X25
	0x0320310C MOV X2, X31
	0x03203110 BL 0x32333E0
	0x03203114 CBZ X21, 0x3203174
	0x03203118 ADRP X8, 0xF1E000
	0x0320311C LDR X8, [X8 + 0x628]
	0x03203120 LDR X1, [X8]
	0x03203124 MOV X0, X25
	0x03203128 MOV X2, X31
	0x0320312C BL 0x32333E0
	0x03203130 LDR X0, [X29]
	0x03203134 LDR W8, [X0 + 0xE0]
	0x03203138 CBNZ W8, 0x3203140
	0x0320313C BL 0x1C16DFC
	0x03203140 MOV X0, X21
	0x03203144 MOV X1, X31
	0x03203148 BL 0x33225A0
	0x0320314C MOV X1, X0
	0x03203150 MOV X0, X25
	0x03203154 MOV X2, X31
	0x03203158 BL 0x32333E0
	0x0320315C ADRP X8, 0xF1E000
	0x03203160 LDR X8, [X8 + 0x5E0]
	0x03203164 LDR X1, [X8]
	0x03203168 MOV X0, X25
	0x0320316C MOV X2, X31
	0x03203170 BL 0x32333E0
	0x03203174 CBZ X20, 0x32031D4
	0x03203178 ADRP X8, 0xF1E000
	0x0320317C LDR X8, [X8 + 0x5D8]
	0x03203180 LDR X1, [X8]
	0x03203184 MOV X0, X25
	0x03203188 MOV X2, X31
	0x0320318C BL 0x32333E0
	0x03203190 LDR X0, [X29]
	0x03203194 LDR W8, [X0 + 0xE0]
	0x03203198 CBNZ W8, 0x32031A0
	0x0320319C BL 0x1C16DFC
	0x032031A0 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11DB000
	006 Move W8, [X21+580]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xEF2000
	014 Move X0, [X0+1560]
	015 Call 0x1C17CF4
	016 Move X0, 0xF1B000
	017 Move X0, [X0+3336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+580], W8
	021 Move W8, 1
	022 Move X0, X19
	023 Move X1, X31
	024 Move [X19+16], W8
	025 Call Object..ctor, X0
	026 Compare X20, 0
	027 JumpIfEqual {138}
	028 Move X8, [X20+24]
	029 Compare X8, 0
	030 JumpIfNotEqual {39}
	031 Move X8, 0xEF2000
	032 Move X8, [X8+1560]
	033 Move W1, 1
	034 Move X0, [X8]
	035 Call 0x1C17D6C
	036 Move X20, X0
	037 Compare X0, 0
	038 JumpIfEqual {138}
	039 Move W8, [X20+24]
	040 Move X9, 0xF1A000
	041 Move X9, [X9+3336]
	042 Move W10, W8
	043 ShiftRight W10, 2
	044 And W10, W10, 0x7FFFFFFF
	045 And W21, W8, 3
	046 NotImplemented "Instruction CINC not yet implemented."
	047 Move [X19+16], W1
	048 Move X0, [X9]
	049 Call 0x1C17D6C
	050 Move [X19+24], X0
	051 Move X8, [X20+24]
	052 Subtract W11, W8, 1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X9, X31
	055 And X10, X8, 0
	056 Move W12, W11
	057 Add X11, X0, 32
	058 Subtract X13, X12, 3
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Subtract X13, X12, 2
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Subtract X13, X12, 1
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Compare X0, 0
	066 JumpIfEqual {138}
	067 Move W13, [X0+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Add X13, X20, X12
	070 Move W14, [X13+29]
	071 Move W13, [X13+30]
	072 Add X15, X20, X12
	073 Move W15, [X15+31]
	074 Move W14, W14
	075 ShiftRight W14, 8
	076 And W14, W14, 127
	077 NotImplemented "Instruction BFM not yet implemented."
	078 Add X13, X20, X12
	079 Move W13, [X13+32]
	080 NotImplemented "Instruction BFM not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Subtract X12, X12, 4
	083 Or W13, W14, W13
	084 Move [X11], W13
	085 Add X9, X9, 1
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Compare W8, 0
	090 JumpIfEqual {137}
	091 Compare X0, 0
	092 JumpIfEqual {138}
	093 Move W8, [X19+16]
	094 Move W9, [X0+24]
	095 Subtract W8, W8, 1
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move W9, [X20+32]
	098 Compare W8, 0
	099 JumpIfEqual {137}
	100 NotImplemented "Instruction CMP not yet implemented."
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Compare X0, 0
	103 JumpIfEqual {138}
	104 Move W8, [X19+16]
	105 Move W9, [X0+24]
	106 Subtract W8, W8, 1
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move W9, [X20+32]
	109 Move W10, [X20+33]
	110 Move W11, [X20+34]
	111 Move W9, W9
	112 ShiftRight W9, 16
	113 And W9, W9, 0x7FFF
	114 NotImplemented "Instruction BFM not yet implemented."
	115 Or W9, W9, W11
	116 Compare W8, 0
	117 JumpIfEqual {137}
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Compare X0, 0
	120 JumpIfEqual {138}
	121 Move W8, [X19+16]
	122 Move W9, [X0+24]
	123 Subtract W8, W8, 1
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move W10, [X20+32]
	126 Move W9, [X20+33]
	127 NotImplemented "Instruction BFM not yet implemented."
	128 Add X8, X0, W8
	129 Move [X8+32], W9
	130 Move X0, X19
	131 Move X20, [X31+16]
	132 Move X19, [X31+24]
	133 Move X30, [X31+32]
	134 Move X21, [X31+40]
	135 Call BigInteger.Normalize, X0
	136 Return 
	137 Call 0x1C17F28
	138 Call 0x1C17F20

Method: System.Void .ctor(System.UInt32 ui)

Disassembly:
	0x03206C0C BL 0x1C16D08
	0x03206C10 BL 0x1C16F10
	0x03206C14 MOV X19, X0
	0x03206C18 ADRP X0, 0xF1B000
	0x03206C1C LDR X0, [X0 + 0x700]
	0x03206C20 BL 0x1C16D08
	0x03206C24 MOV X1, X0
	0x03206C28 MOV X0, X19
	0x03206C2C MOV X2, X31
	0x03206C30 BL 0x3379B6C
	0x03206C34 ADRP X0, 0xF1B000
	0x03206C38 LDR X0, [X0 + 0x708]
	0x03206C3C BL 0x1C16D08
	0x03206C40 MOV X1, X0
	0x03206C44 MOV X0, X19
	0x03206C48 BL 0x1C16DEC
	0x03206C4C BL 0x1C16F20
	0x03206C50 BL 0x1C16F28
	0x03206C54 MOVZ W2, 0x1
	0x03206C58 B 0x3206C5C
	0x03206C5C STR X30, [X31 - 0x10]!
	0x03206C60 LDR W9, [X0 + 0x10]
	0x03206C64 UBFM W8, W1, 0x5, 0x1F
	0x03206C68 CMP W8, W9
	0x03206C6C B.CS 0x3206CA8
	0x03206C70 LDR X9, [X0 + 0x18]
	0x03206C74 CBZ X9, 0x3206CB0
	0x03206C78 LDR W10, [X9 + 0x18]
	0x03206C7C CMP W8, W10
	0x03206C80 B.CS 0x3206CB4
	0x03206C84 ADD X8, X9, W8, 0x2, UXTW
	0x03206C88 LDR W9, [X8 + 0x20]
	0x03206C8C MOVZ W10, 0x1
	0x03206C90 LSLV W10, W10, W1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11D7000
	007 Move X21, 0xF17000
	008 Move W8, [X22+581]
	009 Move X21, [X21+3336]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF17000
	017 Move X0, [X0+3336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+581], W8
	021 Move W8, 1
	022 Move X0, X19
	023 Move X1, X31
	024 Move [X19+16], W8
	025 Call Object..ctor, X0
	026 Move X0, [X21]
	027 Move W1, 1
	028 Call 0x1C17D6C
	029 Compare X0, 0
	030 JumpIfEqual {42}
	031 Move W8, [X0+24]
	032 Compare W8, 0
	033 JumpIfEqual {43}
	034 Move [X0+32], W20
	035 Move [X19+24], X0
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Return 
	042 Call 0x1C17F20
	043 Call 0x1C17F28

Method: Mono.Math.BigInteger op_Implicit(System.UInt32 value)

Disassembly:
	0x032026C0 MOV X0, X19
	0x032026C4 BL 0x32019E0
	0x032026C8 LDR X8, [X20]
	0x032026CC SBFM W9, W0, 0x3, 0x1F
	0x032026D0 ANDS W31, W0, 0x7
	0x032026D4 CINC W20, W9, NE
	0x032026D8 MOV X0, X8
	0x032026DC MOV W1, W20
	0x032026E0 BL 0x1C16D6C
	0x032026E4 LDR W8, [X19 + 0x10]
	0x032026E8 SUBS W8, W8, 0x1
	0x032026EC B.MI 0x3202764
	0x032026F0 ANDS W10, W20, 0x3
	0x032026F4 MOVZ W11, 0x4
	0x032026F8 MOV W9, W31
	0x032026FC CSEL W10, W11, W10, EQ
	0x03202700 LDR X11, [X19 + 0x18]
	0x03202704 CBZ X11, 0x3202774
	0x03202708 LDR W12, [X11 + 0x18]
	0x0320270C CMP W8, W12
	0x03202710 B.CS 0x3202770
	0x03202714 CBZ X0, 0x3202774

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11DB000
	006 Move X21, 0xF20000
	007 Move W8, [X20+582]
	008 Move X21, [X21+1328]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF20000
	015 Move X0, [X0+1328]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+582], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move W1, W19
	022 Move X20, X0
	023 Call BigInteger..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: Mono.Math.BigInteger op_Implicit(System.Int32 value)

Disassembly:
	0x03202A60 BL 0x3201DDC
	0x03202A64 TBNZ X0, 0x0, 0x3202998
	0x03202A68 LDRB W8, [X19 + 0x20]
	0x03202A6C CBZ W8, 0x3202B0C
	0x03202A70 LDR X0, [X24]
	0x03202A74 LDR X23, [X19 + 0x40]
	0x03202A78 LDR W8, [X0 + 0xE0]
	0x03202A7C CBNZ W8, 0x3202A84
	0x03202A80 BL 0x1C16DFC
	0x03202A84 MOV X0, X22
	0x03202A88 MOV X1, X21
	0x03202A8C BL 0x3201C74
	0x03202A90 MOV X1, X0
	0x03202A94 MOV X0, X23
	0x03202A98 BL 0x3201DDC
	0x03202A9C TBZ X0, 0x0, 0x3202B0C
	0x03202AA0 LDR X0, [X24]
	0x03202AA4 LDR X21, [X19 + 0x48]
	0x03202AA8 LDR W8, [X0 + 0xE0]
	0x03202AAC CBNZ W8, 0x3202AB4
	0x03202AB0 BL 0x1C16DFC
	0x03202AB4 MOV X0, X22
	0x03202AB8 MOV X1, X20
	0x03202ABC BL 0x3201C74
	0x03202AC0 MOV X1, X0
	0x03202AC4 MOV X0, X21
	0x03202AC8 BL 0x3201DDC
	0x03202ACC TBZ X0, 0x0, 0x3202B0C
	0x03202AD0 LDR X0, [X19 + 0x38]
	0x03202AD4 CBZ X0, 0x3202BB0
	0x03202AD8 LDR X1, [X19 + 0x30]
	0x03202ADC LDR X20, [X19 + 0x50]
	0x03202AE0 BL 0x3207288
	0x03202AE4 LDR X8, [X24]
	0x03202AE8 MOV X19, X0
	0x03202AEC LDR W9, [X8 + 0xE0]
	0x03202AF0 CBNZ W9, 0x3202AFC
	0x03202AF4 MOV X0, X8
	0x03202AF8 BL 0x1C16DFC
	0x03202AFC MOV X0, X20
	0x03202B00 MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11DB000
	005 Move W8, [X20+583]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF20000
	012 Move X0, [X0+1328]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+583], W8
	016 Move TEMP, X19
	017 And TEMP, TEMP, -2147483648
	018 Compare TEMP, -2147483648
	019 JumpIfEqual {32}
	020 Move X8, 0xF20000
	021 Move X8, [X8+1328]
	022 Move X0, [X8]
	023 Call 0x1C17F10
	024 Move W1, W19
	025 Move X20, X0
	026 Call BigInteger..ctor, X0, X1
	027 Move X0, X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return X0
	032 Move X0, 0xEFA000
	033 Move X0, [X0+1888]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X19, X0
	037 Move X0, 0xEFC000
	038 Move X0, [X0+3784]
	039 Call 0x1C17D08
	040 Move X1, X0
	041 Move X0, X19
	042 Move X2, X31
	043 Call ArgumentOutOfRangeException..ctor, X0, X1
	044 Move X0, 0xF20000
	045 Move X0, [X0+1368]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Call 0x1C17DEC

Method: Mono.Math.BigInteger op_Subtraction(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x03202B04 BL 0x3201DDC
	0x03202B08 TBNZ X0, 0x0, 0x3202998
	0x03202B0C ADRP X0, 0xF1F000
	0x03202B10 LDR X0, [X0 + 0x5B0]
	0x03202B14 B 0x3202B68
	0x03202B18 ADRP X0, 0xF1F000
	0x03202B1C LDR X0, [X0 + 0x578]
	0x03202B20 BL 0x1C16D08
	0x03202B24 MOV X1, X31
	0x03202B28 BL 0x31E79DC
	0x03202B2C MOV X19, X0
	0x03202B30 ADRP X0, 0xF1A000
	0x03202B34 LDR X0, [X0 + 0x4B8]
	0x03202B38 BL 0x1C16D08
	0x03202B3C BL 0x1C16F10
	0x03202B40 MOV X1, X19
	0x03202B44 MOV X2, X31
	0x03202B48 MOV X20, X0
	0x03202B4C BL 0x338C448
	0x03202B50 B 0x3202B98
	0x03202B54 ADRP X0, 0xF1F000
	0x03202B58 LDR X0, [X0 + 0x5B8]
	0x03202B5C B 0x3202B68
	0x03202B60 ADRP X0, 0xF1F000
	0x03202B64 LDR X0, [X0 + 0x5C0]
	0x03202B68 BL 0x1C16D08
	0x03202B6C MOV X1, X31
	0x03202B70 BL 0x31E79DC
	0x03202B74 MOV X19, X0
	0x03202B78 ADRP X0, 0xF1E000
	0x03202B7C LDR X0, [X0 + 0xCE0]
	0x03202B80 BL 0x1C16D08
	0x03202B84 BL 0x1C16F10
	0x03202B88 MOV X1, X19
	0x03202B8C MOV X2, X31
	0x03202B90 MOV X20, X0
	0x03202B94 BL 0x3252170
	0x03202B98 ADRP X0, 0xF1F000
	0x03202B9C LDR X0, [X0 + 0x5C8]
	0x03202BA0 BL 0x1C16D08
	0x03202BA4 MOV X1, X0
	0x03202BA8 MOV X0, X20
	0x03202BAC BL 0x1C16DEC
	0x03202BB0 BL 0x1C16F20
	0x03202BB4 STR X30, [X31 - 0x30]!
	0x03202BB8 STP X22, X21, [X31 + 0x10]
	0x03202BBC STP X20, X19, [X31 + 0x20]
	0x03202BC0 ADRP X21, 0x11DA000
	0x03202BC4 LDRB W8, [X21 + 0x234]
	0x03202BC8 MOV W20, W1
	0x03202BCC MOV X19, X0
	0x03202BD0 TBNZ X8, 0x0, 0x3202BE8
	0x03202BD4 ADRP X0, 0xF1F000
	0x03202BD8 LDR X0, [X0 + 0x530]
	0x03202BDC BL 0x1C16CF4
	0x03202BE0 MOVZ W8, 0x1
	0x03202BE4 STRB W8, [X21 + 0x234]
	0x03202BE8 LDRB W8, [X19 + 0x23]
	0x03202BEC CBNZ W8, 0x3202D9C
	0x03202BF0 ADRP X22, 0xF1F000
	0x03202BF4 LDR X22, [X22 + 0x530]
	0x03202BF8 LDR X21, [X19 + 0x28]
	0x03202BFC LDR X0, [X22]
	0x03202C00 LDR W8, [X0 + 0xE0]
	0x03202C04 CBNZ W8, 0x3202C0C
	0x03202C08 BL 0x1C16DFC
	0x03202C0C MOV X0, X21
	0x03202C10 MOV X1, X31
	0x03202C14 BL 0x3201788
	0x03202C18 TBZ X0, 0x0, 0x3202C2C
	0x03202C1C LDR X0, [X19 + 0x28]
	0x03202C20 CBZ X0, 0x3202DB4
	0x03202C24 BL 0x32022CC
	0x03202C28 STR X31, [X19 + 0x28]
	0x03202C2C LDR X0, [X22]
	0x03202C30 LDR X21, [X19 + 0x30]
	0x03202C34 LDR W8, [X0 + 0xE0]
	0x03202C38 CBNZ W8, 0x3202C40
	0x03202C3C BL 0x1C16DFC
	0x03202C40 MOV X0, X21
	0x03202C44 MOV X1, X31
	0x03202C48 BL 0x3201788
	0x03202C4C TBZ X0, 0x0, 0x3202C60
	0x03202C50 LDR X0, [X19 + 0x30]
	0x03202C54 CBZ X0, 0x3202DB4
	0x03202C58 BL 0x32022CC
	0x03202C5C STR X31, [X19 + 0x30]
	0x03202C60 LDR X0, [X22]
	0x03202C64 LDR X21, [X19 + 0x38]
	0x03202C68 LDR W8, [X0 + 0xE0]
	0x03202C6C CBNZ W8, 0x3202C74

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11DB000
	007 Move X21, 0xF20000
	008 Move W8, [X22+584]
	009 Move X21, [X21+1328]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF20000
	017 Move X0, [X0+1328]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+584], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move W1, W31
	028 Call BigInteger.op_Equality, X0, X1
	029 Move X8, [X21]
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {46}
	034 Move X0, X8
	035 Call 0x1C17F10
	036 Move X1, X19
	037 Move X20, X0
	038 Call BigInteger..ctor, X0, X1
	039 Move X0, X20
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Return X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {51}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X0, X19
	052 Move W1, W31
	053 Call BigInteger.op_Equality, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfEqual {87}
	058 Move X0, X19
	059 Move X1, X20
	060 Call Kernel.Compare, X0, X1
	061 Compare W0, 0
	062 JumpIfEqual {73}
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X0, X19
	065 Move X1, X20
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Call Kernel.Subtract, X0, X1
	072 Return X0
	073 Move X0, [X21]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move W0, W31
	083 Move X30, [X31+48]
	084 Call BigInteger.op_Implicit, X0
	085 Return X0
	086 Add W31, W0, 1
	087 Move X0, 0xF20000
	088 Move X0, [X0+1376]
	089 Call 0x1C17D08
	090 Call 0x1C17F10
	091 Move X19, X0
	092 Move X0, 0xF20000
	093 Move X0, [X0+1384]
	094 Call 0x1C17D08
	095 Move X1, X0
	096 Move X0, X19
	097 Move X2, X31
	098 Call ArithmeticException..ctor, X0, X1
	099 Move X0, 0xEF2000
	100 Move X0, [X0+2000]
	101 Call 0x1C17D08
	102 Call 0x1C17F10
	103 Move X1, X31
	104 Move X19, X0
	105 Call Exception..ctor, X0
	106 Move X0, 0xF20000
	107 Move X0, [X0+1392]
	108 Call 0x1C17D08
	109 Move X1, X0
	110 Move X0, X19
	111 Call 0x1C17DEC

Method: System.UInt32 op_Modulus(Mono.Math.BigInteger bi, System.UInt32 ui)

Disassembly:
	0x03202784 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Call Kernel.DwordMod, X0, X1
	002 Return X0

Method: Mono.Math.BigInteger op_Modulus(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x03202C74 MOV X0, X21
	0x03202C78 MOV X1, X31
	0x03202C7C BL 0x3201788
	0x03202C80 TBZ X0, 0x0, 0x3202C94
	0x03202C84 LDR X0, [X19 + 0x38]
	0x03202C88 CBZ X0, 0x3202DB4
	0x03202C8C BL 0x32022CC
	0x03202C90 STR X31, [X19 + 0x38]
	0x03202C94 LDR X0, [X22]
	0x03202C98 LDR X21, [X19 + 0x40]
	0x03202C9C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Call Kernel.multiByteDivide, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move W8, [X0+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, [X0+40]
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20
	011 Call 0x1C17F28

Method: Mono.Math.BigInteger op_Division(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x032074D4 LDR W8, [X19 + 0x18]
	0x032074D8 CBZ W8, 0x3207724
	0x032074DC CMP W8, 0x1
	0x032074E0 B.EQ 0x3207724
	0x032074E4 CBZ X20, 0x3207734
	0x032074E8 LDR W8, [X20 + 0x18]
	0x032074EC CBZ W8, 0x3207724
	0x032074F0 LDR X0, [X28]
	0x032074F4 LDP X25, X26, [X19 + 0x20]
	0x032074F8 LDR X27, [X20 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Call Kernel.multiByteDivide, X0, X1
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move W8, [X0+24]
	006 Compare W8, 0
	007 JumpIfEqual {12}
	008 Move X0, [X0+32]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20
	012 Call 0x1C17F28

Method: Mono.Math.BigInteger op_Multiply(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x03202838 CBZ X21, 0x3202854
	0x0320283C LDR X0, [X24]
	0x03202840 BL 0x1C16F10
	0x03202844 MOV X1, X21
	0x03202848 MOV X22, X0
	0x0320284C BL 0x3201F94
	0x03202850 STR X22, [X19 + 0x40]
	0x03202854 LDR X21, [X20 + 0x28]
	0x03202858 CBZ X21, 0x3202874
	0x0320285C LDR X0, [X24]
	0x03202860 BL 0x1C16F10
	0x03202864 MOV X1, X21
	0x03202868 MOV X22, X0
	0x0320286C BL 0x3201F94
	0x03202870 STR X22, [X19 + 0x48]
	0x03202874 LDR X21, [X20 + 0x30]
	0x03202878 CBZ X21, 0x3202894
	0x0320287C LDR X0, [X24]
	0x03202880 BL 0x1C16F10
	0x03202884 MOV X1, X21
	0x03202888 MOV X22, X0
	0x0320288C BL 0x3201F94
	0x03202890 STR X22, [X19 + 0x50]
	0x03202894 LDR X21, [X20 + 0x10]
	0x03202898 CBZ X21, 0x32028B4
	0x0320289C LDR X0, [X24]
	0x032028A0 BL 0x1C16F10
	0x032028A4 MOV X1, X21
	0x032028A8 MOV X22, X0
	0x032028AC BL 0x3201F94
	0x032028B0 STR X22, [X19 + 0x30]
	0x032028B4 LDR X20, [X20 + 0x18]
	0x032028B8 CBZ X20, 0x32028D4
	0x032028BC LDR X0, [X24]
	0x032028C0 BL 0x1C16F10
	0x032028C4 MOV X1, X20
	0x032028C8 MOV X21, X0
	0x032028CC BL 0x3201F94
	0x032028D0 STR X21, [X19 + 0x38]
	0x032028D4 MOVZ W8, 0x1
	0x032028D8 STRB W8, [X19 + 0x22]
	0x032028DC LDR X0, [X24]
	0x032028E0 LDR X20, [X19 + 0x30]
	0x032028E4 LDR W8, [X0 + 0xE0]
	0x032028E8 CBNZ W8, 0x32028F0
	0x032028EC BL 0x1C16DFC
	0x032028F0 MOV X0, X20
	0x032028F4 MOV X1, X31
	0x032028F8 BL 0x3201788
	0x032028FC TBZ X0, 0x0, 0x3202994
	0x03202900 LDR X0, [X24]
	0x03202904 LDR X20, [X19 + 0x38]
	0x03202908 LDR W8, [X0 + 0xE0]
	0x0320290C CBNZ W8, 0x3202914
	0x03202910 BL 0x1C16DFC
	0x03202914 MOV X0, X20
	0x03202918 MOV X1, X31
	0x0320291C BL 0x3201788
	0x03202920 TBZ X0, 0x0, 0x3202994
	0x03202924 LDR X0, [X24]
	0x03202928 LDR X20, [X19 + 0x40]
	0x0320292C LDR W8, [X0 + 0xE0]
	0x03202930 CBNZ W8, 0x3202938
	0x03202934 BL 0x1C16DFC
	0x03202938 MOV X0, X20
	0x0320293C MOV X1, X31
	0x03202940 BL 0x3201788
	0x03202944 TBZ X0, 0x0, 0x3202994
	0x03202948 LDR X0, [X24]
	0x0320294C LDR X20, [X19 + 0x48]
	0x03202950 LDR W8, [X0 + 0xE0]
	0x03202954 CBNZ W8, 0x320295C
	0x03202958 BL 0x1C16DFC
	0x0320295C MOV X0, X20
	0x03202960 MOV X1, X31
	0x03202964 BL 0x3201788
	0x03202968 TBZ X0, 0x0, 0x32029AC
	0x0320296C LDR X0, [X24]
	0x03202970 LDR X20, [X19 + 0x50]
	0x03202974 LDR W8, [X0 + 0xE0]
	0x03202978 CBNZ W8, 0x3202980
	0x0320297C BL 0x1C16DFC
	0x03202980 MOV X0, X20
	0x03202984 MOV X1, X31
	0x03202988 BL 0x3201788
	0x0320298C AND W8, W0, 0x1
	0x03202990 B 0x32029B0
	0x03202994 STRB W31, [X19 + 0x20]
	0x03202998 LDP X20, X19, [X31 + 0x30]
	0x0320299C LDP X22, X21, [X31 + 0x20]
	0x032029A0 LDP X24, X23, [X31 + 0x10]
	0x032029A4 LDR X30, [X31], #0x40
	0x032029A8 RET
	0x032029AC MOV W8, W31
	0x032029B0 STRB W8, [X19 + 0x20]
	0x032029B4 LDR X0, [X24]
	0x032029B8 LDR X20, [X19 + 0x58]
	0x032029BC LDP X22, X21, [X19 + 0x30]
	0x032029C0 LDR W8, [X0 + 0xE0]
	0x032029C4 CBNZ W8, 0x32029CC
	0x032029C8 BL 0x1C16DFC
	0x032029CC MOV X0, X22
	0x032029D0 MOV X1, X21
	0x032029D4 BL 0x3201838
	0x032029D8 MOV X1, X0
	0x032029DC MOV X0, X20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x11DB000
	009 Move X21, 0xF20000
	010 Move W8, [X22+585]
	011 Move X21, [X21+1328]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF20000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+585], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move W1, W31
	030 Call BigInteger.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {47}
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move W1, W31
	042 Call BigInteger.op_Equality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {62}
	047 Move X0, [X21]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X22, [X31+32]
	055 Move X21, [X31+40]
	056 Move X30, [X31+16]
	057 Move X23, [X31+24]
	058 Move W0, W31
	059 Add X31, X31, 64
	060 Call BigInteger.op_Implicit, X0
	061 Return X0
	062 Compare X19, 0
	063 JumpIfEqual {105}
	064 Move X8, [X19+24]
	065 Compare X8, 0
	066 JumpIfEqual {105}
	067 Move W22, [X19+16]
	068 NotImplemented "Instruction LDRSW not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Compare X20, 0
	071 JumpIfEqual {105}
	072 Move X8, [X20+24]
	073 Compare X8, 0
	074 JumpIfEqual {105}
	075 Move W23, [X20+16]
	076 NotImplemented "Instruction LDRSW not yet implemented."
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X0, [X21]
	079 Call 0x1C17F10
	080 Add W2, W23, W22
	081 Move X21, X0
	082 Call BigInteger..ctor, X0, X1, X2
	083 Compare X21, 0
	084 JumpIfEqual {105}
	085 Move W5, [X20+16]
	086 Move X3, [X20+24]
	087 Move W2, [X19+16]
	088 Move X0, [X19+24]
	089 Move X6, [X21+24]
	090 Move W1, W31
	091 Move W4, W31
	092 Move W7, W31
	093 Call Kernel.Multiply, X0, X1, X2, X3, X4, X5, X6, X7
	094 Move X0, X21
	095 Call BigInteger.Normalize, X0
	096 Move X0, X21
	097 Move X20, [X31+48]
	098 Move X19, [X31+56]
	099 Move X22, [X31+32]
	100 Move X21, [X31+40]
	101 Move X30, [X31+16]
	102 Move X23, [X31+24]
	103 Add X31, X31, 64
	104 Return X0
	105 Call 0x1C17F20
	106 Move X0, 0xEFC000
	107 Move X0, [X0+3960]
	108 Call 0x1C17D08
	109 Call 0x1C17F10
	110 Move X19, X0
	111 Move X0, 0xF20000
	112 Move X0, [X0+1344]
	113 Move X0, 0xEFC000
	114 Move X0, [X0+3960]
	115 Call 0x1C17D08
	116 Call 0x1C17F10
	117 Move X19, X0
	118 Move X0, 0xF20000
	119 Move X0, [X0+1352]
	120 Call 0x1C17D08
	121 Move X1, X0
	122 Move X0, X19
	123 Move X2, X31
	124 Call IndexOutOfRangeException..ctor, X0, X1
	125 Move X0, 0xF20000
	126 Move X0, [X0+1360]
	127 Call 0x1C17D08
	128 Move X1, X0
	129 Move X0, X19
	130 Call 0x1C17DEC

Method: Mono.Math.BigInteger op_LeftShift(Mono.Math.BigInteger bi1, System.Int32 shiftVal)

Disassembly:
	0x032075F8 CMP W8, 0x1

ISIL:
No ISIL was generated
Method: Mono.Math.BigInteger op_RightShift(Mono.Math.BigInteger bi1, System.Int32 shiftVal)

Disassembly:
	0x032077E0 BFM W2, W22, 0x1F, 0x1E

ISIL:
No ISIL was generated
Method: System.Security.Cryptography.RandomNumberGenerator get_Rng()

Disassembly:
	0x0320795C B 0x33BDD8C
	0x03207960 STR X30, [X31 - 0x10]!
	0x03207964 LDR X8, [X0 + 0x18]
	0x03207968 CBZ X8, 0x32079E4
	0x0320796C LDR W9, [X8 + 0x18]
	0x03207970 CBZ W9, 0x32079E0
	0x03207974 LDR W10, [X8 + 0x20]
	0x03207978 ADD W11, W10, 0x2
	0x0320797C ADDS W31, W10, 0x2
	0x03207980 STR W11, [X8 + 0x20]
	0x03207984 B.CC 0x32079D8
	0x03207988 CMP W9, 0x1
	0x0320798C B.LS 0x32079E0
	0x03207990 LDR W10, [X8 + 0x24]
	0x03207994 ADDS W10, W10, 0x1
	0x03207998 STR W10, [X8 + 0x24]
	0x0320799C MOVZ W10, 0x2
	0x032079A0 B.CC 0x32079C4
	0x032079A4 CMP W9, W10
	0x032079A8 B.EQ 0x32079E0
	0x032079AC ADD X11, X8, W10, 0x2, SXTW
	0x032079B0 LDR W12, [X11 + 0x20]
	0x032079B4 ADD W10, W10, 0x1
	0x032079B8 ADDS W12, W12, 0x1
	0x032079BC STR W12, [X11 + 0x20]
	0x032079C0 B.CS 0x32079A4
	0x032079C4 LDR W8, [X0 + 0x10]
	0x032079C8 CMP W8, W10
	0x032079CC B.NE 0x32079D8
	0x032079D0 ADD W8, W10, 0x1
	0x032079D4 STR W8, [X0 + 0x10]
	0x032079D8 LDR X30, [X31], #0x10
	0x032079DC RET
	0x032079E0 BL 0x1C16F28
	0x032079E4 BL 0x1C16F20
	0x032079E8 STR X30, [X31 - 0x30]!
	0x032079EC STP X22, X21, [X31 + 0x10]
	0x032079F0 STP X20, X19, [X31 + 0x20]
	0x032079F4 ADRP X21, 0x11D5000
	0x032079F8 ADRP X22, 0xF15000
	0x032079FC ADRP X19, 0xF1A000
	0x03207A00 ADRP X20, 0xF1A000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x11D6000
	005 Move X20, 0xF1B000
	006 Move W8, [X19+586]
	007 Move X20, [X20+1328]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF1B000
	013 Move X0, [X0+1328]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+586], W8
	017 Move X8, [X20]
	018 Move W9, [X8+224]
	019 Compare W9, 0
	020 JumpIfNotEqual {24}
	021 Move X0, X8
	022 Call 0x1C17DFC
	023 Move X8, [X20]
	024 Move X9, [X8+184]
	025 Move X9, [X9+8]
	026 Compare X9, 0
	027 JumpIfNotEqual {40}
	028 Move X0, X31
	029 Call RandomNumberGenerator.Create
	030 Move X8, [X20]
	031 Move X19, X0
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {38}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Move X8, [X20]
	038 Move X9, [X8+184]
	039 Move [X9+8], X19
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {46}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X8, [X20]
	046 Move X8, [X8+184]
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X0, [X8+8]
	050 Move X30, [X31+32]
	051 Return X0

Method: Mono.Math.BigInteger GenerateRandom(System.Int32 bits, System.Security.Cryptography.RandomNumberGenerator rng)

Disassembly:
	0x03207A04 LDRB W8, [X21 + 0x256]
	0x03207A08 LDR X22, [X22 + 0xD08]
	0x03207A0C LDR X19, [X19 + 0x750]
	0x03207A10 LDR X20, [X20 + 0x530]
	0x03207A14 TBNZ X8, 0x0, 0x3207A44
	0x03207A18 ADRP X0, 0xF1A000
	0x03207A1C LDR X0, [X0 + 0x530]
	0x03207A20 BL 0x1C16CF4
	0x03207A24 ADRP X0, 0xF1A000
	0x03207A28 LDR X0, [X0 + 0x750]
	0x03207A2C BL 0x1C16CF4
	0x03207A30 ADRP X0, 0xF15000
	0x03207A34 LDR X0, [X0 + 0xD08]
	0x03207A38 BL 0x1C16CF4
	0x03207A3C MOVZ W8, 0x1
	0x03207A40 STRB W8, [X21 + 0x256]
	0x03207A44 LDR X0, [X22]
	0x03207A48 MOVZ W1, 0x30F
	0x03207A4C BL 0x1C16D6C
	0x03207A50 LDR X1, [X19]
	0x03207A54 MOV X2, X31
	0x03207A58 MOV X19, X0
	0x03207A5C BL 0x32C5BD8
	0x03207A60 LDR X8, [X20]
	0x03207A64 LDP X22, X21, [X31 + 0x10]
	0x03207A68 LDR X8, [X8 + 0xB8]
	0x03207A6C STR X19, [X8]
	0x03207A70 LDP X20, X19, [X31 + 0x20]
	0x03207A74 LDR X30, [X31], #0x30
	0x03207A78 RET
	0x03207A7C SUB X31, X31, 0x60
	0x03207A80 STR X30, [X31 + 0x10]
	0x03207A84 STP X26, X25, [X31 + 0x20]
	0x03207A88 STP X24, X23, [X31 + 0x30]
	0x03207A8C STP X22, X21, [X31 + 0x40]
	0x03207A90 STP X20, X19, [X31 + 0x50]
	0x03207A94 ADRP X20, 0x11D5000
	0x03207A98 LDRB W8, [X20 + 0x258]
	0x03207A9C MOV X19, X1
	0x03207AA0 MOV X21, X0
	0x03207AA4 TBNZ X8, 0x0, 0x3207ABC
	0x03207AA8 ADRP X0, 0xF1A000
	0x03207AAC LDR X0, [X0 + 0x530]
	0x03207AB0 BL 0x1C16CF4
	0x03207AB4 MOVZ W8, 0x1
	0x03207AB8 STRB W8, [X20 + 0x258]
	0x03207ABC LDR X20, [X21 + 0x10]
	0x03207AC0 CBZ X20, 0x3207C3C
	0x03207AC4 CBZ X19, 0x3207C3C
	0x03207AC8 LDR W25, [X20 + 0x10]
	0x03207ACC LDR W22, [X19 + 0x10]
	0x03207AD0 CMP W22, W25
	0x03207AD4 B.CC 0x3207CB8
	0x03207AD8 LDR X8, [X19 + 0x18]
	0x03207ADC CBZ X8, 0x3207C3C
	0x03207AE0 LDRSW X8, [X8 + 0x18]
	0x03207AE4 CMP X8, X22
	0x03207AE8 B.LT 0x3207C40
	0x03207AEC LDR X8, [X21 + 0x18]
	0x03207AF0 CBZ X8, 0x3207C3C
	0x03207AF4 ADRP X24, 0xF1A000
	0x03207AF8 LDR X24, [X24 + 0x530]
	0x03207AFC LDR W26, [X8 + 0x10]
	0x03207B00 LDR X0, [X24]
	0x03207B04 BL 0x1C16F10
	0x03207B08 SUB W8, W22, W25
	0x03207B0C ADD W8, W8, W26
	0x03207B10 ADD W2, W8, 0x1
	0x03207B14 MOV X23, X0
	0x03207B18 BL 0x32059AC
	0x03207B1C LDR X8, [X21 + 0x18]
	0x03207B20 CBZ X8, 0x3207C3C
	0x03207B24 CBZ X23, 0x3207C3C
	0x03207B28 LDR W9, [X19 + 0x10]
	0x03207B2C LDR X0, [X19 + 0x18]
	0x03207B30 LDR W5, [X8 + 0x10]
	0x03207B34 LDR X3, [X8 + 0x18]
	0x03207B38 LDR X6, [X23 + 0x18]
	0x03207B3C SUB W1, W25, 0x1
	0x03207B40 SUB W2, W9, W1
	0x03207B44 MOV W4, W31
	0x03207B48 MOV W7, W31
	0x03207B4C ADD W21, W25, 0x1
	0x03207B50 BL 0x32064FC
	0x03207B54 LDR W8, [X19 + 0x10]
	0x03207B58 MOV X0, X19
	0x03207B5C CMP W8, W21
	0x03207B60 CSEL W8, W21, W8, HI

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x11D6000
	009 Move X22, 0xF1B000
	010 Move X21, 0xEED000
	011 Move W8, [X23+587]
	012 Move X22, [X22+1328]
	013 Move X21, [X21+1560]
	014 Move X20, X1
	015 Move W19, W0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xF1B000
	021 Move X0, [X0+1328]
	022 Call 0x1C17CF4
	023 Move X0, 0xEED000
	024 Move X0, [X0+1560]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+587], W8
	028 Move X0, [X22]
	029 NotImplemented "Instruction SBFM not yet implemented."
	030 And W23, W19, 31
	031 NotImplemented "Instruction CINC not yet implemented."
	032 Call 0x1C17F10
	033 Add W2, W24, 1
	034 Move X19, X0
	035 Call BigInteger..ctor, X0, X1, X2
	036 Move X0, [X21]
	037 Move W21, W24
	038 ShiftRight W21, 30
	039 And W21, W21, 0x1FFFFFFF
	040 Move W1, W21
	041 Call 0x1C17D6C
	042 Compare X20, 0
	043 JumpIfEqual {103}
	044 Move X8, [X20]
	045 Move X22, X0
	046 Move X0, X20
	047 Move X1, X22
	048 Move X9, [X8+408]
	049 Move X2, [X8+416]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Compare X19, 0
	052 JumpIfEqual {103}
	053 Move X2, [X19+24]
	054 Move X0, X22
	055 Move W1, W31
	056 Move W3, W31
	057 Move W4, W21
	058 Move X5, X31
	059 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	060 Compare W23, 0
	061 JumpIfEqual {81}
	062 Move X8, [X19+24]
	063 Compare X8, 0
	064 JumpIfEqual {103}
	065 Move W10, [X8+24]
	066 Move X9, W24
	067 Subtract X9, X9, 1
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Add X8, X8, X9
	070 Move W9, [X8+32]
	071 Subtract W10, W23, 1
	072 Move W11, 1
	073 Subtract W12, W31, W23
	074 Move TEMP, 0
	075 Not TEMP
	076 Move W13, TEMP
	077 NotImplemented "Instruction LSLV not yet implemented."
	078 Or W9, W9, W10
	079 NotImplemented "Instruction LSRV not yet implemented."
	080 And W9, W9, W10
	081 Move X8, [X19+24]
	082 Compare X8, 0
	083 JumpIfEqual {103}
	084 Move W10, [X8+24]
	085 Move X9, W24
	086 Subtract X9, X9, 1
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Add X8, X8, X9
	089 Move W9, [X8+32]
	090 Or W9, W9, 0x80000000
	091 Move X0, X19
	092 Move [X8+32], W9
	093 Call BigInteger.Normalize, X0
	094 Move X0, X19
	095 Move X20, [X31+48]
	096 Move X19, [X31+56]
	097 Move X22, [X31+32]
	098 Move X21, [X31+40]
	099 Move X24, [X31+16]
	100 Move X23, [X31+24]
	101 Move X30, [X31+64]
	102 Return X0
	103 Call 0x1C17F20
	104 Call 0x1C17F28

Method: Mono.Math.BigInteger GenerateRandom(System.Int32 bits)

Disassembly:
	0x03207B64 STR W8, [X19 + 0x10]
	0x03207B68 BL 0x3205BB4
	0x03207B6C LDR X0, [X24]
	0x03207B70 BL 0x1C16F10
	0x03207B74 MOV W2, W21
	0x03207B78 MOV X22, X0
	0x03207B7C BL 0x32059AC
	0x03207B80 CBZ X22, 0x3207C3C
	0x03207B84 LDR W8, [X23 + 0x10]
	0x03207B88 LDR W5, [X20 + 0x10]
	0x03207B8C LDR X3, [X20 + 0x18]
	0x03207B90 LDR X0, [X23 + 0x18]
	0x03207B94 LDR X6, [X22 + 0x18]
	0x03207B98 SUB W2, W8, W21
	0x03207B9C MOV W1, W21
	0x03207BA0 MOV W4, W31
	0x03207BA4 MOV W7, W31
	0x03207BA8 STR W21, [X31]
	0x03207BAC BL 0x3207CD4
	0x03207BB0 MOV X0, X22
	0x03207BB4 BL 0x3205BB4
	0x03207BB8 LDR X0, [X24]
	0x03207BBC LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11D6000
	006 Move X21, 0xF1B000
	007 Move W8, [X20+588]
	008 Move X21, [X21+1328]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF1B000
	015 Move X0, [X0+1328]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+588], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Call BigInteger.get_Rng
	025 Move X1, X0
	026 Move W0, W19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call BigInteger.GenerateRandom, X0, X1
	032 Return X0

Method: System.Int32 BitCount()

Disassembly:
	0x032029E0 BL 0x3201DDC
	0x032029E4 TBZ X0, 0x0, 0x3202B0C
	0x032029E8 LDR X0, [X24]
	0x032029EC LDR X20, [X19 + 0x30]
	0x032029F0 LDR W8, [X0 + 0xE0]
	0x032029F4 CBNZ W8, 0x32029FC
	0x032029F8 BL 0x1C16DFC
	0x032029FC MOVZ W0, 0x1
	0x03202A00 BL 0x3201A60
	0x03202A04 MOV X1, X0
	0x03202A08 MOV X0, X20
	0x03202A0C BL 0x3201B04
	0x03202A10 LDR X20, [X19 + 0x38]
	0x03202A14 MOV X21, X0
	0x03202A18 MOVZ W0, 0x1
	0x03202A1C BL 0x3201A60
	0x03202A20 MOV X1, X0
	0x03202A24 MOV X0, X20
	0x03202A28 BL 0x3201B04
	0x03202A2C MOV X20, X0
	0x03202A30 MOV X0, X21
	0x03202A34 MOV X1, X20
	0x03202A38 BL 0x3201838
	0x03202A3C LDR X8, [X19 + 0x60]
	0x03202A40 CBZ X8, 0x3202BB0
	0x03202A44 MOV X1, X0
	0x03202A48 MOV X0, X8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call BigInteger.Normalize, X0
	005 Move X9, [X19+24]
	006 Compare X9, 0
	007 JumpIfEqual {32}
	008 Move W8, [X19+16]
	009 Move W10, [X9+24]
	010 Subtract W8, W8, 1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X9, X9, W8
	013 Move W10, [X9+32]
	014 Move TEMP, X10
	015 And TEMP, TEMP, -2147483648
	016 Compare TEMP, -2147483648
	017 JumpIfEqual {27}
	018 Move W9, 32
	019 Move W11, 0x80000000
	020 Subtract W9, W9, 1
	021 And W12, W10, W11
	022 Move W11, W11
	023 ShiftRight W11, 1
	024 And W11, W11, 0x7FFFFFFF
	025 Compare W12, 0
	026 JumpIfEqual {20}
	027 Move W9, 32
	028 Add W0, W9, W8
	029 Move X30, [X31+16]
	030 Move X19, [X31+24]
	031 Return X0
	032 Call 0x1C17F20
	033 Call 0x1C17F28

Method: System.Boolean TestBit(System.Int32 bitNum)

Disassembly:
	0x03207BC0 CBNZ W8, 0x3207BC8
	0x03207BC4 BL 0x1C16DFC
	0x03207BC8 MOV X0, X22
	0x03207BCC MOV X1, X19
	0x03207BD0 BL 0x3205D00
	0x03207BD4 CMP W0, 0x0
	0x03207BD8 B.LE 0x3207C30
	0x03207BDC LDR X0, [X24]
	0x03207BE0 BL 0x1C16F10
	0x03207BE4 ADD W2, W25, 0x2
	0x03207BE8 MOV X23, X0
	0x03207BEC BL 0x32059AC
	0x03207BF0 CBZ X23, 0x3207C3C
	0x03207BF4 LDR X8, [X23 + 0x18]
	0x03207BF8 CBZ X8, 0x3207C3C
	0x03207BFC LDR W9, [X8 + 0x18]
	0x03207C00 CMP W21, W9
	0x03207C04 B.CS 0x3207C88
	0x03207C08 ADD X8, X8, W21, 0x2, UXTW
	0x03207C0C MOVZ W9, 0x1
	0x03207C10 MOV X0, X23
	0x03207C14 MOV X1, X22
	0x03207C18 STR W9, [X8 + 0x20]
	0x03207C1C BL 0x3207E10
	0x03207C20 MOV X0, X19
	0x03207C24 MOV X1, X23
	0x03207C28 BL 0x3207F40
	0x03207C2C B 0x3207C98
	0x03207C30 MOV X0, X19
	0x03207C34 MOV X1, X22
	0x03207C38 B 0x3207C94
	0x03207C3C BL 0x1C16F20
	0x03207C40 ADRP X0, 0xEF6000
	0x03207C44 LDR X0, [X0 + 0xF78]
	0x03207C48 BL 0x1C16D08
	0x03207C4C BL 0x1C16F10
	0x03207C50 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move TEMP, X1
	004 And TEMP, TEMP, -2147483648
	005 Compare TEMP, -2147483648
	006 JumpIfEqual {25}
	007 Move X8, [X0+24]
	008 Compare X8, 0
	009 JumpIfEqual {43}
	010 Move W10, [X8+24]
	011 Move W9, W1
	012 ShiftRight W9, 5
	013 And W9, W9, 0x7FFFFFFF
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Add X8, X8, W9
	016 Move W8, [X8+32]
	017 Move W9, 1
	018 NotImplemented "Instruction LSLV not yet implemented."
	019 Or W9, W8, W9
	020 NotImplemented "Instruction CMP not yet implemented."
	021 NotImplemented "Instruction CSET not yet implemented."
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Return X0
	025 Move X0, 0xEF7000
	026 Move X0, [X0+3960]
	027 Call 0x1C17D08
	028 Call 0x1C17F10
	029 Move X19, X0
	030 Move X0, 0xF1B000
	031 Move X0, [X0+1792]
	032 Call 0x1C17D08
	033 Move X1, X0
	034 Move X0, X19
	035 Move X2, X31
	036 Call IndexOutOfRangeException..ctor, X0, X1
	037 Move X0, 0xF1B000
	038 Move X0, [X0+1800]
	039 Call 0x1C17D08
	040 Move X1, X0
	041 Move X0, X19
	042 Call 0x1C17DEC
	043 Call 0x1C17F20
	044 Call 0x1C17F28

Method: System.Void SetBit(System.UInt32 bitNum)

Disassembly:
	0x03207C54 ADRP X0, 0xF1A000
	0x03207C58 LDR X0, [X0 + 0x758]

ISIL:
	001 Move W2, 1

Method: System.Void SetBit(System.UInt32 bitNum, System.Boolean value)

Disassembly:
	0x03207C5C BL 0x1C16D08
	0x03207C60 MOV X1, X0
	0x03207C64 MOV X0, X19
	0x03207C68 MOV X2, X31
	0x03207C6C BL 0x3379B6C
	0x03207C70 ADRP X0, 0xF1A000
	0x03207C74 LDR X0, [X0 + 0x760]
	0x03207C78 BL 0x1C16D08
	0x03207C7C MOV X1, X0
	0x03207C80 MOV X0, X19
	0x03207C84 BL 0x1C16DEC
	0x03207C88 BL 0x1C16F28
	0x03207C8C MOV X0, X19
	0x03207C90 MOV X1, X20
	0x03207C94 BL 0x3207E10
	0x03207C98 LDR X0, [X24]
	0x03207C9C LDR W8, [X0 + 0xE0]
	0x03207CA0 CBNZ W8, 0x3207CA8
	0x03207CA4 BL 0x1C16DFC
	0x03207CA8 MOV X0, X19
	0x03207CAC MOV X1, X20
	0x03207CB0 BL 0x3205D00
	0x03207CB4 TBZ X0, 0x1F, 0x3207C8C

ISIL:
	001 Move [X31-16], X30
	002 Move W9, [X0+16]
	003 Move W8, W1
	004 ShiftRight W8, 5
	005 And W8, W8, 0x7FFFFFFF
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X9, [X0+24]
	008 Compare X9, 0
	009 JumpIfEqual {23}
	010 Move W10, [X9+24]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X8, X9, W8
	013 Move W9, [X8+32]
	014 Move W10, 1
	015 NotImplemented "Instruction LSLV not yet implemented."
	016 And W31, W2, 1
	017 NotImplemented "Instruction BIC not yet implemented."
	018 Or W9, W9, W10
	019 NotImplemented "Instruction CSEL not yet implemented."
	020 Move [X8+32], W9
	021 Move X30, [X31+16]
	022 Return 
	023 Call 0x1C17F20
	024 Call 0x1C17F28

Method: System.Int32 LowestSetBit()

Disassembly:
	0x03207CB8 LDP X20, X19, [X31 + 0x50]
	0x03207CBC LDP X22, X21, [X31 + 0x40]
	0x03207CC0 LDP X24, X23, [X31 + 0x30]
	0x03207CC4 LDP X26, X25, [X31 + 0x20]
	0x03207CC8 LDR X30, [X31 + 0x10]
	0x03207CCC ADD X31, X31, 0x60
	0x03207CD0 RET
	0x03207CD4 CBZ X0, 0x3207CEC
	0x03207CD8 LDR W8, [X0 + 0x18]
	0x03207CDC CBZ W8, 0x3207CEC
	0x03207CE0 ADD X8, X0, 0x20
	0x03207CE4 CBNZ X3, 0x3207CF4
	0x03207CE8 B 0x3207D08
	0x03207CEC MOV X8, X31
	0x03207CF0 CBZ X3, 0x3207D08
	0x03207CF4 LDR W9, [X3 + 0x18]
	0x03207CF8 CBZ W9, 0x3207D08
	0x03207CFC ADD X15, X3, 0x20
	0x03207D00 CBNZ X6, 0x3207D10
	0x03207D04 B 0x3207D20
	0x03207D08 MOV X15, X31
	0x03207D0C CBZ X6, 0x3207D20
	0x03207D10 LDR W9, [X6 + 0x18]
	0x03207D14 CBZ W9, 0x3207D20
	0x03207D18 ADD X11, X6, 0x20
	0x03207D1C B 0x3207D24
	0x03207D20 MOV X11, X31
	0x03207D24 ADD X8, X8, W1, 0x2, SXTW
	0x03207D28 ADD X9, X8, W2, 0x2, SXTW
	0x03207D2C CMP X8, X9
	0x03207D30 B.CS 0x3207E0C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11D6000
	006 Move X21, 0xF1B000
	007 Move W8, [X20+589]
	008 Move X21, [X21+1328]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF1B000
	015 Move X0, [X0+1328]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+589], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move W1, W31
	026 Call BigInteger.op_Equality, X0, X1
	027 Move TEMP, 0
	028 Not TEMP
	029 Move W20, TEMP
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {42}
	034 Add W20, W20, 1
	035 Move X0, X19
	036 Move W1, W20
	037 Call BigInteger.TestBit, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {34}
	042 Move W0, W20
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: System.Byte[] GetBytes()

Disassembly:
	0x03203644 BL 0x19980B4
	0x03203648 MOV X0, X19
	0x0320364C MOV X1, X31
	0x03203650 MOV X2, X20
	0x03203654 BL 0x1993444
	0x03203658 ADRP X0, 0xF1E000
	0x0320365C LDR X0, [X0 + 0x660]
	0x03203660 BL 0x1C16D08
	0x03203664 MOV X1, X19
	0x03203668 MOV X2, X31
	0x0320366C BL 0x31E79E0
	0x03203670 MOV X19, X0
	0x03203674 ADRP X0, 0xEF0000
	0x03203678 LDR X0, [X0 + 0xB40]
	0x0320367C BL 0x1C16D08
	0x03203680 BL 0x1C16F10
	0x03203684 MOV X1, X19
	0x03203688 MOV X2, X31
	0x0320368C MOV X20, X0
	0x03203690 BL 0x3379A44
	0x03203694 ADRP X0, 0xF1E000
	0x03203698 LDR X0, [X0 + 0x668]
	0x0320369C BL 0x1C16D08
	0x032036A0 MOV X1, X0
	0x032036A4 MOV X0, X20
	0x032036A8 BL 0x1C16DEC
	0x032036AC STP X30, X21, [X31 - 0x20]!
	0x032036B0 STP X20, X19, [X31 + 0x10]
	0x032036B4 ADRP X21, 0x11D9000
	0x032036B8 LDRB W8, [X21 + 0x238]
	0x032036BC MOV X20, X1
	0x032036C0 MOV X19, X0
	0x032036C4 TBNZ X8, 0x0, 0x32036DC
	0x032036C8 ADRP X0, 0xF1E000
	0x032036CC LDR X0, [X0 + 0x670]
	0x032036D0 BL 0x1C16CF4
	0x032036D4 MOVZ W8, 0x1
	0x032036D8 STRB W8, [X21 + 0x238]
	0x032036DC ADRP X21, 0xF1E000
	0x032036E0 LDR X0, [X19 + 0x18]
	0x032036E4 LDR X21, [X21 + 0x670]
	0x032036E8 CBZ X0, 0x3203700
	0x032036EC LDR X8, [X0]
	0x032036F0 LDR X9, [X8 + 0x278]
	0x032036F4 LDR X1, [X8 + 0x280]
	0x032036F8 BLR X9
	0x032036FC STR X31, [X19 + 0x18]
	0x03203700 LDR X0, [X21]
	0x03203704 BL 0x1C16F10
	0x03203708 MOVZ W2, 0x3
	0x0320370C MOVZ W3, 0x1
	0x03203710 MOVZ W4, 0x1
	0x03203714 MOV X1, X20
	0x03203718 MOV X5, X31
	0x0320371C MOV X21, X0
	0x03203720 BL 0x32F82DC
	0x03203724 STR X21, [X19 + 0x18]
	0x03203728 STR W31, [X19 + 0x20]
	0x0320372C LDP X20, X19, [X31 + 0x10]
	0x03203730 LDP X30, X21, [X31], #0x20
	0x03203734 RET
	0x03203738 STP X30, X19, [X31 - 0x10]!
	0x0320373C MOV X19, X0
	0x03203740 LDR X0, [X0 + 0x18]
	0x03203744 CBZ X0, 0x320375C
	0x03203748 LDR X8, [X0]
	0x0320374C LDR X9, [X8 + 0x278]
	0x03203750 LDR X1, [X8 + 0x280]
	0x03203754 BLR X9
	0x03203758 STR X31, [X19 + 0x18]
	0x0320375C LDP X30, X19, [X31], #0x10
	0x03203760 RET
	0x03203764 STP X30, X21, [X31 - 0x20]!
	0x03203768 STP X20, X19, [X31 + 0x10]
	0x0320376C ADRP X21, 0x11D9000
	0x03203770 LDRB W8, [X21 + 0x239]
	0x03203774 MOV X20, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11DA000
	006 Move X21, 0xF1F000
	007 Move W8, [X20+590]
	008 Move X21, [X21+1328]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xF1F000
	015 Move X0, [X0+1328]
	016 Call 0x1C17CF4
	017 Move X0, 0xEF1000
	018 Move X0, [X0+1560]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+590], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X20, 0xEF1000
	028 Move X20, [X20+1560]
	029 Move X0, X19
	030 Move W1, W31
	031 Call BigInteger.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {44}
	036 Move X0, [X20]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move W1, 1
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call 0x1C17D6C
	043 Return X0
	044 Move X0, X19
	045 Call BigInteger.BitCount, X0
	046 Move X8, [X20]
	047 NotImplemented "Instruction SBFM not yet implemented."
	048 And W31, W0, 7
	049 NotImplemented "Instruction CINC not yet implemented."
	050 Move X0, X8
	051 Move W1, W20
	052 Call 0x1C17D6C
	053 Move W8, [X19+16]
	054 Subtract W8, W8, 1
	055 And W10, W20, 3
	056 Move W11, 4
	057 Move W9, W31
	058 NotImplemented "Instruction CSEL not yet implemented."
	059 Move X11, [X19+24]
	060 Compare X11, 0
	061 JumpIfEqual {90}
	062 Move W12, [X11+24]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Compare X0, 0
	065 JumpIfEqual {90}
	066 Add X11, X11, W8
	067 Move W11, [X11+32]
	068 Move W12, W10
	069 Subtract W13, W9, 1
	070 Move W15, [X0+24]
	071 Add X14, X13, X12
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Subtract X12, X12, 1
	074 Add X14, X0, W14
	075 Move [X14+32], W11
	076 Add X14, X12, 1
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move W11, W11
	079 ShiftRight W11, 8
	080 And W11, W11, 0x7FFFFFFF
	081 Add W9, W10, W9
	082 Subtract W8, W8, 1
	083 Move W10, 4
	084 Move X20, [X31+16]
	085 Move X19, [X31+24]
	086 Move X30, [X31+32]
	087 Move X21, [X31+40]
	088 Return X0
	089 Call 0x1C17F28
	090 Call 0x1C17F20

Method: System.Boolean op_Equality(Mono.Math.BigInteger bi1, System.UInt32 ui)

Disassembly:
	0x03206C94 ANDS W31, W2, 0x1
	0x03206C98 BIC W11, W9, W10, 0x0
	0x03206C9C ORR W9, W9, W10, 0x0
	0x03206CA0 CSEL W9, W9, W11, NE
	0x03206CA4 STR W9, [X8 + 0x20]
	0x03206CA8 LDR X30, [X31], #0x10
	0x03206CAC RET
	0x03206CB0 BL 0x1C16F20
	0x03206CB4 BL 0x1C16F28
	0x03206CB8 STP X30, X21, [X31 - 0x20]!
	0x03206CBC STP X20, X19, [X31 + 0x10]
	0x03206CC0 ADRP X20, 0x11D6000
	0x03206CC4 ADRP X21, 0xF1B000
	0x03206CC8 LDRB W8, [X20 + 0x24D]
	0x03206CCC LDR X21, [X21 + 0x530]
	0x03206CD0 MOV X19, X0
	0x03206CD4 TBNZ X8, 0x0, 0x3206CEC
	0x03206CD8 ADRP X0, 0xF1B000
	0x03206CDC LDR X0, [X0 + 0x530]
	0x03206CE0 BL 0x1C16CF4
	0x03206CE4 MOVZ W8, 0x1
	0x03206CE8 STRB W8, [X20 + 0x24D]
	0x03206CEC LDR X0, [X21]
	0x03206CF0 LDR W8, [X0 + 0xE0]
	0x03206CF4 CBNZ W8, 0x3206CFC
	0x03206CF8 BL 0x1C16DFC
	0x03206CFC MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {28}
	006 Move W8, [X0+16]
	007 Move W19, W1
	008 Move X20, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X0, X20
	011 Call BigInteger.Normalize, X0
	012 Move W8, [X20+16]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X8, [X20+24]
	015 Compare X8, 0
	016 JumpIfEqual {28}
	017 Move W9, [X8+24]
	018 Compare W9, 0
	019 JumpIfEqual {29}
	020 Move W8, [X8+32]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CSET not yet implemented."
	023 Move W0, W31
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0
	028 Call 0x1C17F20
	029 Call 0x1C17F28

Method: System.Boolean op_Inequality(Mono.Math.BigInteger bi1, System.UInt32 ui)

Disassembly:
	0x03207D34 LDR W14, [X31]
	0x03207D38 SBFM X16, X4, 0x3E, 0x1F
	0x03207D3C ADD X10, X15, W4, 0x2, SXTW
	0x03207D40 ADD X11, X11, W7, 0x2, SXTW
	0x03207D44 ADD X12, X10, W5, 0x2, SXTW
	0x03207D48 ADD X13, X10, 0x4
	0x03207D4C ADD X14, X11, W14, 0x2, SXTW
	0x03207D50 ADD X15, X15, X16
	0x03207D54 LDR W16, [X8]
	0x03207D58 CBZ W16, 0x3207DFC
	0x03207D5C CMP X10, X12
	0x03207D60 B.CS 0x3207DFC
	0x03207D64 CMP X11, X14
	0x03207D68 B.CS 0x3207DFC
	0x03207D6C LDR W17, [X10]
	0x03207D70 LDR W1, [X11]
	0x03207D74 MOV X0, X11
	0x03207D78 MADD X16, X17, X16, X1
	0x03207D7C STR W16, [X0], #0x4
	0x03207D80 CMP X0, X14
	0x03207D84 CSET W17, CC
	0x03207D88 CMP X13, X12
	0x03207D8C UBFM X16, X16, 0x20, 0x3F
	0x03207D90 B.CS 0x3207DF0
	0x03207D94 CMP X0, X14
	0x03207D98 B.CS 0x3207DF0
	0x03207D9C MOV X0, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {28}
	006 Move W8, [X0+16]
	007 Move W19, W1
	008 Move X20, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X0, X20
	011 Call BigInteger.Normalize, X0
	012 Move W8, [X20+16]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X8, [X20+24]
	015 Compare X8, 0
	016 JumpIfEqual {28}
	017 Move W9, [X8+24]
	018 Compare W9, 0
	019 JumpIfEqual {29}
	020 Move W8, [X8+32]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CSET not yet implemented."
	023 Move W0, 1
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0
	028 Call 0x1C17F20
	029 Call 0x1C17F28

Method: System.Boolean op_Equality(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x03202DDC LDRB W8, [X20 + 0x235]
	0x03202DE0 LDR X21, [X21 + 0x8F0]
	0x03202DE4 MOV W26, W1
	0x03202DE8 MOV X19, X0
	0x03202DEC TBNZ X8, 0x0, 0x3202EE8
	0x03202DF0 ADRP X0, 0xEFA000
	0x03202DF4 LDR X0, [X0 + 0x9E8]
	0x03202DF8 BL 0x1C16CF4
	0x03202DFC ADRP X0, 0xEF1000
	0x03202E00 LDR X0, [X0 + 0x8F0]
	0x03202E04 BL 0x1C16CF4
	0x03202E08 ADRP X0, 0xF1F000
	0x03202E0C LDR X0, [X0 + 0x5D0]
	0x03202E10 BL 0x1C16CF4
	0x03202E14 ADRP X0, 0xF1F000
	0x03202E18 LDR X0, [X0 + 0x5D8]
	0x03202E1C BL 0x1C16CF4
	0x03202E20 ADRP X0, 0xF1F000
	0x03202E24 LDR X0, [X0 + 0x5E0]
	0x03202E28 BL 0x1C16CF4
	0x03202E2C ADRP X0, 0xF1F000
	0x03202E30 LDR X0, [X0 + 0x5E8]
	0x03202E34 BL 0x1C16CF4
	0x03202E38 ADRP X0, 0xF1F000
	0x03202E3C LDR X0, [X0 + 0x5F0]
	0x03202E40 BL 0x1C16CF4
	0x03202E44 ADRP X0, 0xF1F000
	0x03202E48 LDR X0, [X0 + 0x5F8]
	0x03202E4C BL 0x1C16CF4
	0x03202E50 ADRP X0, 0xF1F000
	0x03202E54 LDR X0, [X0 + 0x600]
	0x03202E58 BL 0x1C16CF4
	0x03202E5C ADRP X0, 0xF1F000
	0x03202E60 LDR X0, [X0 + 0x608]
	0x03202E64 BL 0x1C16CF4
	0x03202E68 ADRP X0, 0xF1F000
	0x03202E6C LDR X0, [X0 + 0x610]
	0x03202E70 BL 0x1C16CF4
	0x03202E74 ADRP X0, 0xF1F000
	0x03202E78 LDR X0, [X0 + 0x618]
	0x03202E7C BL 0x1C16CF4
	0x03202E80 ADRP X0, 0xF1F000
	0x03202E84 LDR X0, [X0 + 0x620]
	0x03202E88 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11DB000
	006 Move W8, [X21+591]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF20000
	014 Move X0, [X0+1328]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+591], W8
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X21, 0xF20000
	020 Move X21, [X21+1328]
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X31
	027 Move X1, X20
	028 Call BigInteger.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {45}
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X31
	039 Move X1, X19
	040 Call BigInteger.op_Equality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {47}
	045 Move W0, W31
	046 Move W0, 1
	047 Move X0, X20
	048 Move X1, X19
	049 Call Kernel.Compare, X0, X1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSET not yet implemented."
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return X0

Method: System.Boolean op_Inequality(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x03202788 ADRP X21, 0x11DA000
	0x0320278C LDRB W8, [X21 + 0x233]
	0x03202790 MOV X20, X1
	0x03202794 MOV X19, X0
	0x03202798 TBNZ X8, 0x0, 0x32027B0
	0x0320279C ADRP X0, 0xF1F000
	0x032027A0 LDR X0, [X0 + 0x530]
	0x032027A4 BL 0x1C16CF4
	0x032027A8 MOVZ W8, 0x1
	0x032027AC STRB W8, [X21 + 0x233]
	0x032027B0 LDRB W8, [X19 + 0x23]
	0x032027B4 CBNZ W8, 0x3202B18
	0x032027B8 LDR X21, [X20]
	0x032027BC CBZ X21, 0x3202B54
	0x032027C0 LDR X8, [X20 + 0x8]
	0x032027C4 CBZ X8, 0x3202B60
	0x032027C8 ADRP X24, 0xF1F000
	0x032027CC LDR X24, [X24 + 0x530]
	0x032027D0 LDR X0, [X24]
	0x032027D4 BL 0x1C16F10
	0x032027D8 MOV X1, X21
	0x032027DC MOV X22, X0
	0x032027E0 BL 0x3201F94
	0x032027E4 STR X22, [X19 + 0x60]
	0x032027E8 LDR X0, [X24]
	0x032027EC LDR X21, [X20 + 0x8]
	0x032027F0 BL 0x1C16F10
	0x032027F4 MOV X1, X21
	0x032027F8 MOV X22, X0
	0x032027FC BL 0x3201F94
	0x03202800 MOVI V0.2D, 0x0
	0x03202804 MOV X23, X19
	0x03202808 STR V0, [X23 + 0x28]!
	0x0320280C STR X22, [X23 + 0x30]
	0x03202810 STP V0, V0, [X23 + 0x10]
	0x03202814 LDR X21, [X20 + 0x38]
	0x03202818 CBZ X21, 0x3202834
	0x0320281C LDR X0, [X24]
	0x03202820 BL 0x1C16F10
	0x03202824 MOV X1, X21
	0x03202828 MOV X22, X0
	0x0320282C BL 0x3201F94
	0x03202830 STR X22, [X23]
	0x03202834 LDR X21, [X20 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11DB000
	006 Move W8, [X21+592]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF20000
	014 Move X0, [X0+1328]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+592], W8
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X21, 0xF20000
	020 Move X21, [X21+1328]
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X31
	027 Move X1, X20
	028 Call BigInteger.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {45}
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X31
	039 Move X1, X19
	040 Call BigInteger.op_Equality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {47}
	045 Move W0, 1
	046 Move W0, W31
	047 Move X0, X20
	048 Move X1, X19
	049 Call Kernel.Compare, X0, X1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSET not yet implemented."
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return X0

Method: System.Boolean op_GreaterThan(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x03207DA0 ADD X2, X11, X0
	0x03207DA4 ADD X17, X15, X0
	0x03207DA8 LDR W5, [X2 + 0x4]
	0x03207DAC LDR W3, [X8]
	0x03207DB0 LDR W4, [X17 + 0x4]
	0x03207DB4 ADD X1, X2, 0x8

ISIL:
	001 Move [X31-16], X30
	002 Call Kernel.Compare, X0, X1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Move X30, [X31+16]
	006 Return X0

Method: System.Boolean op_LessThan(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x03202A4C BL 0x3207288
	0x03202A50 LDR X8, [X23]
	0x03202A54 MOV X22, X0
	0x03202A58 MOV X1, X22
	0x03202A5C MOV X0, X8

ISIL:
	001 Move [X31-16], X30
	002 Call Kernel.Compare, X0, X1
	003 Move W0, W0
	004 ShiftRight W0, 31
	005 And W0, W0, 0x7FFFFFFF
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Boolean op_GreaterThanOrEqual(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x03207DB8 ADD X16, X16, X5
	0x03207DBC ADD X6, X17, 0x8
	0x03207DC0 CMP X1, X14
	0x03207DC4 MADD X16, X4, X3, X16
	0x03207DC8 CSET W17, CC
	0x03207DCC CMP X6, X12

ISIL:
	001 Move [X31-16], X30
	002 Call Kernel.Compare, X0, X1
	003 NotImplemented "Instruction ORN not yet implemented."
	004 Move W0, W8
	005 ShiftRight W0, 31
	006 And W0, W0, 0x7FFFFFFF
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Boolean op_LessThanOrEqual(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2)

Disassembly:
	0x03207DD0 STR W16, [X2 + 0x4]
	0x03207DD4 UBFM X16, X16, 0x20, 0x3F
	0x03207DD8 ADD X0, X0, 0x4
	0x03207DDC B.CS 0x3207DE8
	0x03207DE0 CMP X1, X14
	0x03207DE4 B.CC 0x3207DA0

ISIL:
	001 Move [X31-16], X30
	002 Call Kernel.Compare, X0, X1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Move X30, [X31+16]
	006 Return X0

Method: System.String ToString(System.UInt32 radix)

Disassembly:
	0x03207DE8 ADD X0, X11, X0
	0x03207DEC ADD X0, X0, 0x4
	0x03207DF0 CBZ W17, 0x3207DFC
	0x03207DF4 CBZ X16, 0x3207DFC
	0x03207DF8 STR W16, [X0]
	0x03207DFC ADD X8, X8, 0x4
	0x03207E00 CMP X8, X9
	0x03207E04 ADD X11, X11, 0x4
	0x03207E08 B.CC 0x3207D54
	0x03207E0C RET
	0x03207E10 STR X30, [X31 - 0x10]!
	0x03207E14 CBZ X0, 0x3207F3C
	0x03207E18 CBZ X1, 0x3207F3C
	0x03207E1C LDR X9, [X1 + 0x18]
	0x03207E20 CBZ X9, 0x3207F3C
	0x03207E24 LDR X8, [X0 + 0x18]
	0x03207E28 LDR W11, [X9 + 0x18]
	0x03207E2C MOV X10, X31
	0x03207E30 MOV W16, W31
	0x03207E34 ADD X12, X9, 0x20
	0x03207E38 ADD X13, X8, 0x20
	0x03207E3C CMP X10, X11

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11D6000
	007 Move X22, 0xF1B000
	008 Move W8, [X21+593]
	009 Move X22, [X22+1808]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF1B000
	017 Move X0, [X0+1808]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+593], W8
	021 Move X2, [X22]
	022 Move X0, X20
	023 Move W1, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]

Method: System.String ToString(System.UInt32 radix, System.String characterSet)

Disassembly:
	0x03207E40 B.CS 0x3207F38
	0x03207E44 CBZ X8, 0x3207F3C
	0x03207E48 LDR X9, [X8 + 0x18]
	0x03207E4C CMP X10, W9, UXTW
	0x03207E50 B.CS 0x3207F38
	0x03207E54 LDR W15, [X12, X10, LSL #2]
	0x03207E58 MOV W14, W16
	0x03207E5C LDR W16, [X13, X10, LSL #2]
	0x03207E60 ADD W15, W15, W14
	0x03207E64 CMP W15, W14
	0x03207E68 SUB W17, W16, W15
	0x03207E6C STR W17, [X13, X10, LSL #2]
	0x03207E70 LDR W3, [X1 + 0x10]
	0x03207E74 ORN W2, W31, W15, 0x0
	0x03207E78 CSET W16, CC
	0x03207E7C CMP W17, W2
	0x03207E80 CSET W4, HI
	0x03207E84 ADD X10, X10, 0x1
	0x03207E88 CMP X10, X3
	0x03207E8C ORR W16, W16, W4, 0x0
	0x03207E90 B.CC 0x3207E3C
	0x03207E94 LDR W13, [X0 + 0x10]
	0x03207E98 CMP W17, W2
	0x03207E9C CSET W11, HI
	0x03207EA0 CMP W15, W14
	0x03207EA4 CSET W12, CC
	0x03207EA8 CMP W13, W10
	0x03207EAC B.EQ 0x3207EF8
	0x03207EB0 ORR W11, W12, W11, 0x0
	0x03207EB4 CBZ W11, 0x3207EF8
	0x03207EB8 CMP W10, W9
	0x03207EBC CSEL X11, X10, X9, HI
	0x03207EC0 AND X11, X11, 0x0
	0x03207EC4 ADD X12, X8, 0x20
	0x03207EC8 CMP X11, X10
	0x03207ECC B.EQ 0x3207F38
	0x03207ED0 LDR W13, [X12, X10, LSL #2]
	0x03207ED4 SUBS W13, W13, 0x1
	0x03207ED8 STR W13, [X12, X10, LSL #2]
	0x03207EDC LDR W13, [X0 + 0x10]
	0x03207EE0 B.NE 0x3207EF0
	0x03207EE4 ADD X10, X10, 0x1
	0x03207EE8 CMP X10, X13
	0x03207EEC B.CC 0x3207EC8
	0x03207EF0 CBNZ W13, 0x3207EFC
	0x03207EF4 B 0x3207F28
	0x03207EF8 CBZ W13, 0x3207F28
	0x03207EFC SUB W10, W13, 0x1
	0x03207F00 MOV W11, W10
	0x03207F04 CMP W10, W9
	0x03207F08 B.CS 0x3207F38
	0x03207F0C ADD X12, X8, W11, 0x2, SXTW
	0x03207F10 LDR W12, [X12 + 0x20]
	0x03207F14 CBNZ W12, 0x3207F30
	0x03207F18 STR W11, [X0 + 0x10]
	0x03207F1C SUB W11, W11, 0x1
	0x03207F20 ADDS W31, W11, 0x1
	0x03207F24 B.NE 0x3207F04
	0x03207F28 MOVZ W8, 0x1
	0x03207F2C STR W8, [X0 + 0x10]
	0x03207F30 LDR X30, [X31], #0x10
	0x03207F34 RET
	0x03207F38 BL 0x1C16F28
	0x03207F3C BL 0x1C16F20
	0x03207F40 STR X30, [X31 - 0x10]!
	0x03207F44 CBZ X0, 0x32080CC
	0x03207F48 CBZ X1, 0x32080CC
	0x03207F4C LDR W12, [X0 + 0x10]
	0x03207F50 LDR W14, [X1 + 0x10]
	0x03207F54 CMP W12, W14
	0x03207F58 CSEL X8, X1, X0, CC
	0x03207F5C LDR X9, [X8 + 0x18]
	0x03207F60 CSEL W8, W14, W12, CC
	0x03207F64 CSEL X10, X0, X1, CC
	0x03207F68 CBZ X9, 0x32080CC
	0x03207F6C LDR W11, [X10 + 0x10]
	0x03207F70 LDR X17, [X10 + 0x18]
	0x03207F74 LDR X10, [X0 + 0x18]
	0x03207F78 LDR W13, [X9 + 0x18]
	0x03207F7C CMP W11, 0x1
	0x03207F80 MOV X16, X31
	0x03207F84 MOV X1, X31
	0x03207F88 ADD X2, X9, 0x20
	0x03207F8C ADD X3, X17, 0x20
	0x03207F90 CSINC W11, W11, W31, HI
	0x03207F94 ADD X4, X10, 0x20
	0x03207F98 CMP X16, X13
	0x03207F9C B.CS 0x32080C8
	0x03207FA0 CBZ X17, 0x32080CC
	0x03207FA4 LDR W15, [X17 + 0x18]
	0x03207FA8 CMP X16, X15
	0x03207FAC B.CS 0x32080C8
	0x03207FB0 CBZ X10, 0x32080CC
	0x03207FB4 LDR W15, [X10 + 0x18]
	0x03207FB8 CMP X16, X15
	0x03207FBC B.CS 0x32080C8
	0x03207FC0 LDR W5, [X2, X16, LSL #2]
	0x03207FC4 LDR W6, [X3, X16, LSL #2]
	0x03207FC8 ADD X1, X1, X5
	0x03207FCC ADD X1, X1, X6
	0x03207FD0 STR W1, [X4, X16, LSL #2]
	0x03207FD4 ADD X16, X16, 0x1
	0x03207FD8 CMP X11, X16
	0x03207FDC UBFM X1, X1, 0x20, 0x3F
	0x03207FE0 B.NE 0x3207F98
	0x03207FE4 CBZ X1, 0x320803C
	0x03207FE8 CMP W11, W8
	0x03207FEC B.CS 0x32080A4
	0x03207FF0 CMP W11, W13
	0x03207FF4 CSEL W1, W11, W13, HI
	0x03207FF8 CMP W11, W15
	0x03207FFC MOV W16, W8
	0x03208000 ADD X17, X9, 0x20
	0x03208004 CSEL W2, W11, W15, HI
	0x03208008 ADD X3, X10, 0x20
	0x0320800C CMP X1, X11
	0x03208010 B.EQ 0x32080C8
	0x03208014 CMP X2, X11
	0x03208018 B.EQ 0x32080C8
	0x0320801C LDR W4, [X17, X11, LSL #2]
	0x03208020 ADD W4, W4, 0x1
	0x03208024 STR W4, [X3, X11, LSL #2]
	0x03208028 ADD X11, X11, 0x1
	0x0320802C CMP X11, X16
	0x03208030 B.CS 0x3208038
	0x03208034 CBZ W4, 0x320800C
	0x03208038 CBZ W4, 0x32080A4
	0x0320803C CMP W12, W14
	0x03208040 B.CS 0x3208094
	0x03208044 SUB W12, W8, 0x1
	0x03208048 CMP W11, W12
	0x0320804C B.CS 0x3208094
	0x03208050 CMP W11, W13
	0x03208054 CSEL W13, W11, W13, HI
	0x03208058 CMP W11, W15
	0x0320805C MOV W12, W11
	0x03208060 MOV W14, W8
	0x03208064 ADD X10, X10, 0x20
	0x03208068 CSEL W11, W11, W15, HI

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x11D6000
	009 Move W8, [X22+594]
	010 Move X19, X2
	011 Move W20, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF1B000
	018 Move X0, [X0+1328]
	019 Call 0x1C17CF4
	020 Move X0, 0xEEF000
	021 Move X0, [X0+368]
	022 Call 0x1C17CF4
	023 Move X0, 0xEED000
	024 Move X0, [X0+2440]
	025 Call 0x1C17CF4
	026 Move X0, 0xF11000
	027 Move X0, [X0+3776]
	028 Call 0x1C17CF4
	029 Move X0, 0xEEF000
	030 Move X0, [X0+1200]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+594], W8
	034 NotImplemented "Instruction STRH not yet implemented."
	035 Compare X19, 0
	036 JumpIfEqual {123}
	037 NotImplemented "Instruction LDRSW not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X24, 0xF1B000
	041 Move X24, [X24+1328]
	042 Move X0, [X24]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X21
	048 Move W1, W31
	049 Call BigInteger.op_Equality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {56}
	054 Move X8, 0xEEF000
	055 Move X8, [X8+1200]
	056 Move X0, [X24]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move W1, 1
	062 Move X0, X21
	063 Call BigInteger.op_Equality, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {80}
	068 Move X8, 0xF11000
	069 Move X8, [X8+3776]
	070 Move X22, [X8]
	071 Move X0, X22
	072 Move X20, [X31+48]
	073 Move X19, [X31+56]
	074 Move X22, [X31+32]
	075 Move X21, [X31+40]
	076 Move X24, [X31+16]
	077 Move X23, [X31+24]
	078 Move X30, [X31+64]
	079 Return X0
	080 Move X8, 0xEED000
	081 Move X8, [X8+2440]
	082 Move X0, [X24]
	083 Move X22, [X8]
	084 Call 0x1C17F10
	085 Move X1, X21
	086 Move X23, X0
	087 Call BigInteger..ctor, X0, X1
	088 Move X21, 0xEEF000
	089 Move X21, [X21+368]
	090 Move X0, [X24]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X0, X23
	096 Move W1, W31
	097 Call BigInteger.op_Inequality, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {71}
	102 Move X0, X23
	103 Move W1, W20
	104 Call Kernel.SingleByteDivideInPlace, X0, X1
	105 Move W1, W0
	106 Move X0, X19
	107 Move X2, X31
	108 Call String.get_Chars, X0, X1
	109 Move X8, [X21]
	110 NotImplemented "Instruction STRH not yet implemented."
	111 Move W9, [X8+224]
	112 Compare W9, 0
	113 JumpIfNotEqual {116}
	114 Move X0, X8
	115 Call 0x1C17DFC
	116 Add X0, X31, 12
	117 Move X1, X31
	118 Call Char.ToString, X0
	119 Move X1, X22
	120 Move X2, X31
	121 Call String.Concat, X0, X1
	122 Move X22, X0
	123 Call 0x1C17F20
	124 Move X0, 0xEF5000
	125 Move X0, [X0+1400]
	126 Call 0x1C17D08
	127 Call 0x1C17F10
	128 Move X19, X0
	129 Move X0, 0xF1B000
	130 Move X0, [X0+1816]
	131 Call 0x1C17D08
	132 Move X20, X0
	133 Move X0, 0xF1A000
	134 Move X0, [X0+1824]
	135 Move X0, 0xEF4000
	136 Move X0, [X0+1400]
	137 Call 0x1C17D08
	138 Call 0x1C17F10
	139 Move X19, X0
	140 Move X0, 0xF1A000
	141 Move X0, [X0+1832]
	142 Call 0x1C17D08
	143 Move X20, X0
	144 Move X0, 0xF1A000
	145 Move X0, [X0+1840]
	146 Call 0x1C17D08
	147 Move X2, X0
	148 Move X0, X19
	149 Move X1, X20
	150 Move X3, X31
	151 Call ArgumentException..ctor, X0, X1, X2
	152 Move X0, 0xF1A000
	153 Move X0, [X0+1848]
	154 Call 0x1C17D08
	155 Move X1, X0
	156 Move X0, X19
	157 Call 0x1C17DEC

Method: System.Void Normalize()

Disassembly:
	0x03206BB4 LDP X20, X19, [X31 + 0x10]
	0x03206BB8 LDP X30, X21, [X31], #0x20
	0x03206BBC B 0x3206A04
	0x03206BC0 STP X30, X19, [X31 - 0x10]!
	0x03206BC4 TBNZ X1, 0x1F, 0x3206C04
	0x03206BC8 LDR X8, [X0 + 0x18]
	0x03206BCC CBZ X8, 0x3206C4C
	0x03206BD0 LDR W10, [X8 + 0x18]
	0x03206BD4 UBFM W9, W1, 0x5, 0x1F
	0x03206BD8 CMP W9, W10
	0x03206BDC B.CS 0x3206C50
	0x03206BE0 ADD X8, X8, W9, 0x2, UXTW
	0x03206BE4 LDR W8, [X8 + 0x20]
	0x03206BE8 MOVZ W9, 0x1
	0x03206BEC LSLV W9, W9, W1
	0x03206BF0 ORR W9, W8, W9, 0x0
	0x03206BF4 CMP W9, W8
	0x03206BF8 CSET W0, EQ
	0x03206BFC LDP X30, X19, [X31], #0x10
	0x03206C00 RET
	0x03206C04 ADRP X0, 0xEF7000
	0x03206C08 LDR X0, [X0 + 0xF78]

ISIL:
	001 Move [X31-16], X30
	002 Move W10, [X0+16]
	003 Compare W10, 0
	004 JumpIfEqual {18}
	005 Move X8, [X0+24]
	006 Compare X8, 0
	007 JumpIfEqual {23}
	008 Move W9, [X8+24]
	009 Subtract W10, W10, 1
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X11, X8, W10
	012 Move W11, [X11+32]
	013 Compare W11, 0
	014 JumpIfNotEqual {20}
	015 Move [X0+16], W10
	016 Subtract W10, W10, 1
	017 Add W31, W10, 1
	018 Move W8, 1
	019 Move [X0+16], W8
	020 Move X30, [X31+16]
	021 Return 
	022 Call 0x1C17F28
	023 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x032032CC B 0x3203320
	0x032032D0 B 0x3203320
	0x032032D4 B 0x3203320
	0x032032D8 B 0x3203320
	0x032032DC B 0x3203320
	0x032032E0 B 0x3203320
	0x032032E4 B 0x3203320
	0x032032E8 B 0x3203320
	0x032032EC B 0x3203320
	0x032032F0 B 0x3203320
	0x032032F4 B 0x3203320
	0x032032F8 B 0x3203320
	0x032032FC B 0x3203320
	0x03203300 B 0x3203320
	0x03203304 B 0x3203320
	0x03203308 B 0x3203320
	0x0320330C B 0x3203320
	0x03203310 B 0x3203320
	0x03203314 B 0x3203320
	0x03203318 B 0x3203320

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+16]
	003 Compare W8, 0
	004 JumpIfEqual {17}
	005 Move X8, [X0+24]
	006 Compare X8, 0
	007 JumpIfEqual {20}
	008 Move W9, [X8+24]
	009 Move X10, X31
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X11, X8, X10
	012 Move [X11+32], W31
	013 Move W11, [X0+16]
	014 Add W10, W10, 1
	015 Move X10, W10
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X30, [X31+16]
	018 Return 
	019 Call 0x1C17F28
	020 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x032080E0 ADRP X23, 0xF19000
	0x032080E4 LDRB W8, [X22 + 0x259]
	0x032080E8 LDR X23, [X23 + 0x530]
	0x032080EC MOV X20, X2
	0x032080F0 MOV X21, X1
	0x032080F4 MOV X19, X0
	0x032080F8 TBNZ X8, 0x0, 0x3208110
	0x032080FC ADRP X0, 0xF19000
	0x03208100 LDR X0, [X0 + 0x530]
	0x03208104 BL 0x1C16CF4
	0x03208108 MOVZ W8, 0x1
	0x0320810C STRB W8, [X22 + 0x259]
	0x03208110 LDR X0, [X23]
	0x03208114 LDR W8, [X0 + 0xE0]
	0x03208118 CBNZ W8, 0x3208120
	0x0320811C BL 0x1C16DFC
	0x03208120 MOV X0, X21
	0x03208124 MOV W1, W31
	0x03208128 BL 0x3205C94
	0x0320812C TBNZ X0, 0x0, 0x3208150
	0x03208130 LDR X0, [X23]
	0x03208134 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+16]
	003 Compare W8, 0
	004 JumpIfEqual {17}
	005 Move X11, [X0+24]
	006 Compare X11, 0
	007 JumpIfEqual {21}
	008 Move W10, [X11+24]
	009 Move X9, X31
	010 Move W0, W31
	011 Add X11, X11, 32
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W12, [X11]
	014 Add X9, X9, 1
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Xor W0, W12, W0
	017 Move W0, W31
	018 Move X30, [X31+16]
	019 Return X0
	020 Call 0x1C17F28
	021 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x03208138 CBNZ W8, 0x3208140
	0x0320813C BL 0x1C16DFC

ISIL:
	001 Move W1, 10
	002 Call BigInteger.ToString, X0, X1
	003 Return X0

Method: System.Boolean Equals(System.Object o)

Disassembly:
	0x03208140 MOV X0, X20
	0x03208144 MOV W1, W31
	0x03208148 BL 0x3205C94
	0x0320814C TBZ X0, 0x0, 0x3208174
	0x03208150 LDR X0, [X23]
	0x03208154 LDR W8, [X0 + 0xE0]
	0x03208158 CBNZ W8, 0x3208160
	0x0320815C BL 0x1C16DFC
	0x03208160 LDP X20, X19, [X31 + 0x20]
	0x03208164 LDP X22, X21, [X31 + 0x10]
	0x03208168 MOV W0, W31
	0x0320816C LDP X30, X23, [X31], #0x30
	0x03208170 B 0x3201A60
	0x03208174 LDR X0, [X23]
	0x03208178 LDR X22, [X19 + 0x10]
	0x0320817C LDR W8, [X0 + 0xE0]
	0x03208180 CBNZ W8, 0x3208188
	0x03208184 BL 0x1C16DFC
	0x03208188 MOV X0, X21
	0x0320818C MOV X1, X22
	0x03208190 BL 0x3205D00
	0x03208194 CMP W0, 0x1
	0x03208198 B.LT 0x32081C0
	0x0320819C LDR X0, [X23]
	0x032081A0 LDR X22, [X19 + 0x10]
	0x032081A4 LDR W8, [X0 + 0xE0]
	0x032081A8 CBNZ W8, 0x32081B0
	0x032081AC BL 0x1C16DFC
	0x032081B0 MOV X0, X21
	0x032081B4 MOV X1, X22
	0x032081B8 BL 0x3201C74
	0x032081BC MOV X21, X0
	0x032081C0 LDR X0, [X23]
	0x032081C4 LDR X22, [X19 + 0x10]
	0x032081C8 LDR W8, [X0 + 0xE0]
	0x032081CC CBNZ W8, 0x32081D4
	0x032081D0 BL 0x1C16DFC
	0x032081D4 MOV X0, X20
	0x032081D8 MOV X1, X22
	0x032081DC BL 0x3205D00
	0x032081E0 CMP W0, 0x1
	0x032081E4 B.LT 0x320820C
	0x032081E8 LDR X0, [X23]
	0x032081EC LDR X22, [X19 + 0x10]
	0x032081F0 LDR W8, [X0 + 0xE0]
	0x032081F4 CBNZ W8, 0x32081FC
	0x032081F8 BL 0x1C16DFC
	0x032081FC MOV X0, X20
	0x03208200 MOV X1, X22
	0x03208204 BL 0x3201C74
	0x03208208 MOV X20, X0
	0x0320820C LDR X0, [X23]
	0x03208210 LDR W8, [X0 + 0xE0]
	0x03208214 CBNZ W8, 0x320821C
	0x03208218 BL 0x1C16DFC
	0x0320821C MOV X0, X21
	0x03208220 MOV X1, X20
	0x03208224 BL 0x3201838
	0x03208228 MOV X20, X0
	0x0320822C MOV X0, X19
	0x03208230 MOV X1, X20
	0x03208234 BL 0x3207A7C
	0x03208238 MOV X0, X20
	0x0320823C LDP X20, X19, [X31 + 0x20]
	0x03208240 LDP X22, X21, [X31 + 0x10]
	0x03208244 LDP X30, X23, [X31], #0x30
	0x03208248 RET
	0x0320824C STP X30, X23, [X31 - 0x30]!
	0x03208250 STP X22, X21, [X31 + 0x10]
	0x03208254 STP X20, X19, [X31 + 0x20]
	0x03208258 ADRP X20, 0x11D4000
	0x0320825C LDRB W8, [X20 + 0x25A]
	0x03208260 MOV X21, X2
	0x03208264 MOV X22, X1
	0x03208268 MOV X19, X0
	0x0320826C TBNZ X8, 0x0, 0x3208284
	0x03208270 ADRP X0, 0xF19000
	0x03208274 LDR X0, [X0 + 0x530]
	0x03208278 BL 0x1C16CF4
	0x0320827C MOVZ W8, 0x1
	0x03208280 STRB W8, [X20 + 0x25A]
	0x03208284 ADRP X23, 0xF19000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11D5000
	006 Move W8, [X21+595]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xF1A000
	014 Move X0, [X0+1328]
	015 Call 0x1C17CF4
	016 Move X0, 0xEEC000
	017 Move X0, [X0+1880]
	018 Call 0x1C17CF4
	019 Move X0, 0xEF4000
	020 Move X0, [X0+1824]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+595], W8
	024 Compare X20, 0
	025 JumpIfEqual {85}
	026 Move X8, 0xEEC000
	027 Move X8, [X8+1880]
	028 Move X9, [X8]
	029 Move X8, [X20]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, 0xF1A000
	032 Move X9, [X9+1328]
	033 Move W10, [X8+304]
	034 Move X0, [X9]
	035 Move W9, [X0+304]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X20, X31
	038 Move X0, X20
	039 Call 0x1C17E08
	040 Move W8, [X0]
	041 Move TEMP, X8
	042 And TEMP, TEMP, -2147483648
	043 Compare TEMP, -2147483648
	044 JumpIfEqual {85}
	045 Move X8, 0xF1A000
	046 Move X8, [X8+1328]
	047 Move X0, [X8]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X8, 0xEF4000
	053 Move X8, [X8+1824]
	054 Move X9, [X20]
	055 Move X0, X20
	056 Move X1, [X8]
	057 Move X8, [X9+64]
	058 Move X9, [X1+64]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Call 0x1C17E08
	061 Move W1, [X0]
	062 Move X0, X19
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Call BigInteger.op_Equality, X0, X1
	068 Return X0
	069 Move X8, [X8+200]
	070 Add X8, X8, X9
	071 NotImplemented "Instruction LDUR not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CSEL not yet implemented."
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X0, X20
	079 Move X1, X31
	080 Call BigInteger.op_Equality, X0, X1
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {86}
	085 Move W0, W31
	086 Move X0, X19
	087 Move X1, X20
	088 Call Kernel.Compare, X0, X1
	089 NotImplemented "Instruction CMP not yet implemented."
	090 NotImplemented "Instruction CSET not yet implemented."
	091 Move X20, [X31+16]
	092 Move X19, [X31+24]
	093 Move X30, [X31+32]
	094 Move X21, [X31+40]
	095 Return X0
	096 Call 0x1C181E0

Method: Mono.Math.BigInteger ModInverse(Mono.Math.BigInteger modulus)

Disassembly:
	0x03202C70 BL 0x1C16DFC

ISIL:
	001 Call Kernel.modInverse, X0, X1
	002 Return X0

Method: Mono.Math.BigInteger ModPow(Mono.Math.BigInteger exp, Mono.Math.BigInteger n)

Disassembly:
	0x032031A4 MOV X1, X31
	0x032031A8 BL 0x33225A0
	0x032031AC MOV X1, X0
	0x032031B0 MOV X0, X25
	0x032031B4 MOV X2, X31
	0x032031B8 BL 0x32333E0
	0x032031BC ADRP X8, 0xF1E000
	0x032031C0 LDR X8, [X8 + 0x5F8]
	0x032031C4 LDR X1, [X8]
	0x032031C8 MOV X0, X25
	0x032031CC MOV X2, X31
	0x032031D0 BL 0x32333E0
	0x032031D4 ADRP X8, 0xF1E000
	0x032031D8 LDR X8, [X8 + 0x600]
	0x032031DC LDR X1, [X8]
	0x032031E0 MOV X0, X25
	0x032031E4 MOV X2, X31
	0x032031E8 BL 0x32333E0
	0x032031EC LDR X0, [X29]
	0x032031F0 LDR W8, [X0 + 0xE0]
	0x032031F4 CBNZ W8, 0x32031FC
	0x032031F8 BL 0x1C16DFC
	0x032031FC MOV X0, X19
	0x03203200 MOV X1, X31
	0x03203204 BL 0x33225A0
	0x03203208 MOV X1, X0
	0x0320320C MOV X0, X25
	0x03203210 MOV X2, X31
	0x03203214 BL 0x32333E0
	0x03203218 ADRP X8, 0xF1E000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x11DA000
	008 Move X23, 0xF1F000
	009 Move W8, [X22+596]
	010 Move X23, [X23+1432]
	011 Move X21, X2
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF1F000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+596], W8
	023 Move X0, [X23]
	024 Call 0x1C17F10
	025 Move X1, X21
	026 Move X22, X0
	027 Call ModulusRing..ctor, X0, X1
	028 Compare X22, 0
	029 JumpIfEqual {41}
	030 Move X0, X22
	031 Move X1, X20
	032 Move X2, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Move X23, [X31+56]
	039 Call ModulusRing.Pow, X0, X1, X2
	040 Return X0
	041 Call 0x1C17F20

Method: Mono.Math.BigInteger GeneratePseudoPrime(System.Int32 bits)

Disassembly:
	0x03202718 ADD X11, X11, W8, 0x2, UXTW
	0x0320271C LDR W11, [X11 + 0x20]
	0x03202720 MOV W12, W10
	0x03202724 SUB W13, W9, 0x1
	0x03202728 LDR W15, [X0 + 0x18]
	0x0320272C ADD X14, X13, X12
	0x03202730 CMP W14, W15
	0x03202734 B.CS 0x3202770
	0x03202738 SUB X12, X12, 0x1
	0x0320273C ADD X14, X0, W14, SXTW
	0x03202740 STRB W11, [X14 + 0x20]
	0x03202744 ADD X14, X12, 0x1
	0x03202748 CMP X14, 0x1
	0x0320274C UBFM W11, W11, 0x8, 0x1F
	0x03202750 B.GT 0x3202728
	0x03202754 ADD W9, W10, W9
	0x03202758 SUBS W8, W8, 0x1
	0x0320275C MOVZ W10, 0x4
	0x03202760 B.PL 0x3202700
	0x03202764 LDP X20, X19, [X31 + 0x10]
	0x03202768 LDP X30, X21, [X31], #0x20
	0x0320276C RET
	0x03202770 BL 0x1C16F28
	0x03202774 BL 0x1C16F20
	0x03202778 STR X30, [X31 - 0x40]!
	0x0320277C STP X24, X23, [X31 + 0x10]
	0x03202780 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11DB000
	006 Move X21, 0xF20000
	007 Move W8, [X20+597]
	008 Move X21, [X21+1336]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF20000
	015 Move X0, [X0+1336]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+597], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Compare X20, 0
	025 JumpIfEqual {36}
	026 Move X8, [X20]
	027 Move X0, X20
	028 Move W1, W19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X3, [X8+424]
	032 Move X2, [X8+432]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 CallNoReturn X3
	036 Call 0x1C17F20

Method: System.Void Incr2()

Disassembly:
	0x03208960 STP X28, X27, [X31 + 0x10]
	0x03208964 STP X26, X25, [X31 + 0x20]
	0x03208968 STP X24, X23, [X31 + 0x30]
	0x0320896C STP X22, X21, [X31 + 0x40]
	0x03208970 STP X20, X19, [X31 + 0x50]
	0x03208974 ADRP X19, 0x11D4000
	0x03208978 LDRB W8, [X19 + 0x264]
	0x0320897C MOV W20, W1
	0x03208980 MOV X25, X0
	0x03208984 TBNZ X8, 0x0, 0x32089A8
	0x03208988 ADRP X0, 0xF19000
	0x0320898C LDR X0, [X0 + 0x530]
	0x03208990 BL 0x1C16CF4
	0x03208994 ADRP X0, 0xF19000
	0x03208998 LDR X0, [X0 + 0x598]
	0x0320899C BL 0x1C16CF4
	0x032089A0 MOVZ W8, 0x1
	0x032089A4 STRB W8, [X19 + 0x264]
	0x032089A8 CBZ X25, 0x3208BF0
	0x032089AC ADRP X26, 0xF19000
	0x032089B0 LDR X26, [X26 + 0x530]
	0x032089B4 MOV X0, X25
	0x032089B8 BL 0x32019E0
	0x032089BC LDR X8, [X26]
	0x032089C0 MOV W19, W0
	0x032089C4 LDR W9, [X8 + 0xE0]
	0x032089C8 CBNZ W9, 0x32089D4
	0x032089CC MOV X0, X8
	0x032089D0 BL 0x1C16DFC
	0x032089D4 MOV W0, W19
	0x032089D8 BL 0x3201A60
	0x032089DC MOV W1, W20
	0x032089E0 BL 0x32087D0
	0x032089E4 MOV W20, W0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {30}
	005 Move W9, [X8+24]
	006 Compare W9, 0
	007 JumpIfEqual {29}
	008 Move W10, [X8+32]
	009 Add W11, W10, 2
	010 Add W31, W10, 2
	011 Move [X8+32], W11
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W10, [X8+36]
	014 Add W10, W10, 1
	015 Move [X8+36], W10
	016 Move W10, 2
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Add X11, X8, W10
	019 Move W12, [X11+32]
	020 Add W10, W10, 1
	021 Add W12, W12, 1
	022 Move [X11+32], W12
	023 Move W8, [X0+16]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Add W8, W10, 1
	026 Move [X0+16], W8
	027 Move X30, [X31+16]
	028 Return 
	029 Call 0x1C17F28
	030 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x032089E8 MOVZ W0, 0x1
	0x032089EC BL 0x3201A60
	0x032089F0 MOV X1, X0
	0x032089F4 MOV X0, X25
	0x032089F8 BL 0x3201B04
	0x032089FC CBZ X0, 0x3208BF0
	0x03208A00 ADRP X23, 0xF19000
	0x03208A04 LDR X23, [X23 + 0x598]
	0x03208A08 MOV X21, X0
	0x03208A0C BL 0x3206CB8
	0x03208A10 MOV W22, W0
	0x03208A14 MOV X0, X21
	0x03208A18 MOV W1, W22
	0x03208A1C BL 0x32067E4
	0x03208A20 LDR X8, [X23]
	0x03208A24 MOV X23, X0
	0x03208A28 MOV X0, X8
	0x03208A2C BL 0x1C16F10
	0x03208A30 MOV X1, X25
	0x03208A34 MOV X24, X0
	0x03208A38 BL 0x3207780
	0x03208A3C MOV X0, X25
	0x03208A40 BL 0x32019E0
	0x03208A44 CMP W0, 0x65
	0x03208A48 B.GE 0x3208A54
	0x03208A4C MOV X25, X31
	0x03208A50 B 0x3208A6C
	0x03208A54 CBZ X24, 0x3208BF0
	0x03208A58 MOVZ W1, 0x2
	0x03208A5C MOV X0, X24
	0x03208A60 MOV X2, X23
	0x03208A64 BL 0x3208400
	0x03208A68 MOV X25, X0
	0x03208A6C CMP W20, 0x1
	0x03208A70 B.LT 0x3208BC8
	0x03208A74 MOV W27, W31
	0x03208A78 CBNZ W27, 0x3208A9C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11D5000
	007 Move X22, 0xF15000
	008 Move X19, 0xF1A000
	009 Move X20, 0xF1A000
	010 Move W8, [X21+598]
	011 Move X22, [X22+3336]
	012 Move X19, [X19+1872]
	013 Move X20, [X20+1328]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xF1A000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move X0, 0xF1A000
	022 Move X0, [X0+1872]
	023 Call 0x1C17CF4
	024 Move X0, 0xF15000
	025 Move X0, [X0+3336]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+598], W8
	029 Move X0, [X22]
	030 Move W1, 783
	031 Call 0x1C17D6C
	032 Move X1, [X19]
	033 Move X2, X31
	034 Move X19, X0
	035 Call RuntimeHelpers.InitializeArray, X0, X1
	036 Move X8, [X20]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X8, [X8+184]
	040 Move [X8], X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+48]
	044 Return 

