Type: Mono.Math.BigInteger/ModulusRing

Method: System.Void .ctor(Mono.Math.BigInteger modulus)

Disassembly:
	0x03208780 ADD X8, X8, 0x884
	0x03208784 STR X8, [X19 + 0x18]
	0x03208788 ADRP X8, 0xFFFFFFFFFE9AB000
	0x0320878C ADD X8, X8, 0x7E8
	0x03208790 STR X8, [X19 + 0x38]
	0x03208794 LDP X20, X19, [X31 + 0x20]
	0x03208798 LDP X22, X21, [X31 + 0x10]
	0x0320879C LDR X30, [X31], #0x30
	0x032087A0 RET
	0x032087A4 ADRP X1, 0xFFFFFFFFFD913000
	0x032087A8 ADD X1, X1, 0xEE3
	0x032087AC MOV X0, X31
	0x032087B0 BL 0x1C16F3C
	0x032087B4 MOV X1, X31
	0x032087B8 BL 0x1C16DEC
	0x032087BC LDR X8, [X0 + 0x40]
	0x032087C0 LDR X4, [X0 + 0x18]
	0x032087C4 LDR X3, [X0 + 0x28]
	0x032087C8 MOV X0, X8
	0x032087CC BR X4
	0x032087D0 STP X30, X19, [X31 - 0x10]!
	0x032087D4 CBZ X0, 0x32088DC
	0x032087D8 MOV W19, W1
	0x032087DC BL 0x32019E0
	0x032087E0 CMP W0, 0x65
	0x032087E4 B.LT 0x3208840
	0x032087E8 CMP W0, 0x97
	0x032087EC B.LT 0x3208848
	0x032087F0 CMP W0, 0xC9
	0x032087F4 B.LT 0x3208850
	0x032087F8 CMP W0, 0xFB
	0x032087FC B.LT 0x3208858
	0x03208800 CMP W0, 0x12D
	0x03208804 B.LT 0x3208860
	0x03208808 CMP W0, 0x15F
	0x0320880C B.LT 0x3208868
	0x03208810 CMP W0, 0x191
	0x03208814 B.LT 0x3208870
	0x03208818 CMP W0, 0x1F5
	0x0320881C B.LT 0x3208878
	0x03208820 CMP W0, 0x259
	0x03208824 B.LT 0x3208880
	0x03208828 CMP W0, 0x321
	0x0320882C B.LT 0x3208888
	0x03208830 CMP W0, 0x4E2
	0x03208834 MOVZ W8, 0x2
	0x03208838 CINC W0, W8, LE
	0x0320883C B 0x320888C
	0x03208840 MOVZ W0, 0x1B
	0x03208844 B 0x320888C
	0x03208848 MOVZ W0, 0x12
	0x0320884C B 0x320888C
	0x03208850 MOVZ W0, 0xF

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11D5000
	007 Move W8, [X21+599]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF1A000
	015 Move X0, [X0+1328]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+599], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move [X19+16], X20
	023 Compare X20, 0
	024 JumpIfEqual {64}
	025 Move X21, 0xF1A000
	026 Move X21, [X21+1328]
	027 Move W22, [X20+16]
	028 Move X0, [X21]
	029 Call 0x1C17F10
	030 Move W2, 1
	031 NotImplemented "Instruction BFM not yet implemented."
	032 Move X20, X0
	033 Call BigInteger..ctor, X0, X1, X2
	034 Move [X19+24], X20
	035 Compare X20, 0
	036 JumpIfEqual {64}
	037 Move X8, [X20+24]
	038 Compare X8, 0
	039 JumpIfEqual {64}
	040 Move W10, [X8+24]
	041 Move W9, W22
	042 ShiftRight W9, 31
	043 And W9, W9, 0x3FFFFFFF
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Add X8, X8, W9
	046 Move W9, 1
	047 Move [X8+32], W9
	048 Move X0, [X21]
	049 Move X21, [X19+16]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X20
	055 Move X1, X21
	056 Call BigInteger.op_Division, X0, X1
	057 Move [X19+24], X0
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X30, [X31+48]
	063 Return 
	064 Call 0x1C17F20
	065 Call 0x1C17F28

Method: System.Void BarrettReduction(Mono.Math.BigInteger x)

Disassembly:
	0x03208A7C LDR X0, [X26]
	0x03208A80 LDR W8, [X0 + 0xE0]
	0x03208A84 CBNZ W8, 0x3208A8C
	0x03208A88 BL 0x1C16DFC
	0x03208A8C MOV X0, X25
	0x03208A90 MOV X1, X31
	0x03208A94 BL 0x3201DDC
	0x03208A98 TBZ X0, 0x0, 0x3208B0C
	0x03208A9C LDR X0, [X26]
	0x03208AA0 LDR W8, [X0 + 0xE0]
	0x03208AA4 CBNZ W8, 0x3208AAC
	0x03208AA8 BL 0x1C16DFC
	0x03208AAC MOV W0, W19
	0x03208AB0 BL 0x3206B64
	0x03208AB4 MOV X25, X0
	0x03208AB8 MOVZ W0, 0x2
	0x03208ABC BL 0x3201A60
	0x03208AC0 MOV X1, X0
	0x03208AC4 MOV X0, X25
	0x03208AC8 BL 0x3205D00
	0x03208ACC CMP W0, 0x0
	0x03208AD0 B.GT 0x3208AF4
	0x03208AD4 LDR X0, [X26]
	0x03208AD8 LDR W8, [X0 + 0xE0]
	0x03208ADC CBNZ W8, 0x3208AE4
	0x03208AE0 BL 0x1C16DFC
	0x03208AE4 MOV X0, X25
	0x03208AE8 MOV X1, X21
	0x03208AEC BL 0x3205D00
	0x03208AF0 TBZ X0, 0x1F, 0x3208A9C
	0x03208AF4 CBZ X24, 0x3208BF0
	0x03208AF8 MOV X0, X24
	0x03208AFC MOV X1, X25
	0x03208B00 MOV X2, X23
	0x03208B04 BL 0x3207854
	0x03208B08 MOV X25, X0
	0x03208B0C LDR X0, [X26]
	0x03208B10 LDR W8, [X0 + 0xE0]
	0x03208B14 CBNZ W8, 0x3208B1C
	0x03208B18 BL 0x1C16DFC
	0x03208B1C MOVZ W1, 0x1
	0x03208B20 MOV X0, X25
	0x03208B24 BL 0x3205C94
	0x03208B28 TBNZ X0, 0x0, 0x3208BBC
	0x03208B2C CMP W22, 0x1
	0x03208B30 MOV W28, W22
	0x03208B34 B.LT 0x3208B9C
	0x03208B38 LDR X0, [X26]
	0x03208B3C LDR W8, [X0 + 0xE0]
	0x03208B40 CBNZ W8, 0x3208B48
	0x03208B44 BL 0x1C16DFC
	0x03208B48 MOV X0, X25
	0x03208B4C MOV X1, X21
	0x03208B50 BL 0x3201788
	0x03208B54 TBZ X0, 0x0, 0x3208B9C
	0x03208B58 LDR X0, [X26]
	0x03208B5C LDR W8, [X0 + 0xE0]
	0x03208B60 CBNZ W8, 0x3208B68
	0x03208B64 BL 0x1C16DFC
	0x03208B68 MOVZ W0, 0x2
	0x03208B6C BL 0x3201A60
	0x03208B70 CBZ X24, 0x3208BF0
	0x03208B74 MOV X2, X0
	0x03208B78 MOV X0, X24
	0x03208B7C MOV X1, X25
	0x03208B80 BL 0x3207854
	0x03208B84 MOVZ W1, 0x1
	0x03208B88 MOV X25, X0
	0x03208B8C BL 0x3205C94
	0x03208B90 TBNZ X0, 0x0, 0x3208BD0
	0x03208B94 SUBS W28, W28, 0x1
	0x03208B98 B.NE 0x3208B38
	0x03208B9C LDR X0, [X26]
	0x03208BA0 LDR W8, [X0 + 0xE0]
	0x03208BA4 CBNZ W8, 0x3208BAC
	0x03208BA8 BL 0x1C16DFC
	0x03208BAC MOV X0, X25
	0x03208BB0 MOV X1, X21
	0x03208BB4 BL 0x3201788
	0x03208BB8 TBNZ X0, 0x0, 0x3208BD0
	0x03208BBC ADD W27, W27, 0x1
	0x03208BC0 CMP W27, W20
	0x03208BC4 B.NE 0x3208A78
	0x03208BC8 MOVZ W0, 0x1
	0x03208BCC B 0x3208BD4
	0x03208BD0 MOV W0, W31
	0x03208BD4 LDP X20, X19, [X31 + 0x50]
	0x03208BD8 LDP X22, X21, [X31 + 0x40]
	0x03208BDC LDP X24, X23, [X31 + 0x30]
	0x03208BE0 LDP X26, X25, [X31 + 0x20]
	0x03208BE4 LDP X28, X27, [X31 + 0x10]
	0x03208BE8 LDR X30, [X31], #0x60
	0x03208BEC RET
	0x03208BF0 BL 0x1C16F20
	0x03208BF4 MOVZ W0, 0x2
	0x03208BF8 RET
	0x03208BFC STP X30, X21, [X31 - 0x20]!
	0x03208C00 STP X20, X19, [X31 + 0x10]
	0x03208C04 ADRP X20, 0x11D4000
	0x03208C08 ADRP X21, 0xF19000
	0x03208C0C ADRP X19, 0xF19000
	0x03208C10 LDRB W8, [X20 + 0x265]
	0x03208C14 LDR X21, [X21 + 0x788]
	0x03208C18 LDR X19, [X19 + 0x790]
	0x03208C1C TBNZ X8, 0x0, 0x3208C40
	0x03208C20 ADRP X0, 0xF19000
	0x03208C24 LDR X0, [X0 + 0x788]
	0x03208C28 BL 0x1C16CF4
	0x03208C2C ADRP X0, 0xF19000
	0x03208C30 LDR X0, [X0 + 0x790]
	0x03208C34 BL 0x1C16CF4
	0x03208C38 MOVZ W8, 0x1
	0x03208C3C STRB W8, [X20 + 0x265]
	0x03208C40 LDR X0, [X21]
	0x03208C44 BL 0x1C16F10
	0x03208C48 LDR X2, [X19]
	0x03208C4C MOV X1, X31
	0x03208C50 MOV X19, X0
	0x03208C54 BL 0x32086B8
	0x03208C58 MOV X0, X19
	0x03208C5C LDP X20, X19, [X31 + 0x10]
	0x03208C60 LDP X30, X21, [X31], #0x20
	0x03208C64 RET
	0x03208C68 MOVZ W0, 0xFA0
	0x03208C6C RET
	0x03208C70 MOV X1, X31
	0x03208C74 B 0x33BDD8C
	0x03208C78 STP X30, X21, [X31 - 0x20]!
	0x03208C7C STP X20, X19, [X31 + 0x10]
	0x03208C80 ADRP X20, 0x11D4000
	0x03208C84 ADRP X21, 0xF19000
	0x03208C88 LDRB W8, [X20 + 0x266]
	0x03208C8C LDR X21, [X21 + 0x530]
	0x03208C90 MOV W19, W1
	0x03208C94 TBNZ X8, 0x0, 0x3208CAC
	0x03208C98 ADRP X0, 0xF19000
	0x03208C9C LDR X0, [X0 + 0x530]
	0x03208CA0 BL 0x1C16CF4
	0x03208CA4 MOVZ W8, 0x1
	0x03208CA8 STRB W8, [X20 + 0x266]
	0x03208CAC LDR X0, [X21]
	0x03208CB0 LDR W8, [X0 + 0xE0]
	0x03208CB4 CBNZ W8, 0x3208CBC
	0x03208CB8 BL 0x1C16DFC
	0x03208CBC MOV W0, W19
	0x03208CC0 BL 0x3206B64
	0x03208CC4 CBZ X0, 0x3208CE8
	0x03208CC8 MOVZ W2, 0x1
	0x03208CCC MOV W1, W31
	0x03208CD0 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X20, 0x11D5000
	012 Move W8, [X20+600]
	013 Move X19, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF1A000
	020 Move X0, [X0+1328]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+600], W8
	024 Move X20, [X21+16]
	025 Compare X20, 0
	026 JumpIfEqual {124}
	027 Compare X19, 0
	028 JumpIfEqual {124}
	029 Move W25, [X20+16]
	030 Move W22, [X19+16]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X8, [X19+24]
	033 Compare X8, 0
	034 JumpIfEqual {124}
	035 NotImplemented "Instruction LDRSW not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X8, [X21+24]
	038 Compare X8, 0
	039 JumpIfEqual {124}
	040 Move X24, 0xF1A000
	041 Move X24, [X24+1328]
	042 Move W26, [X8+16]
	043 Move X0, [X24]
	044 Call 0x1C17F10
	045 Subtract W8, W22, W25
	046 Add W8, W8, W26
	047 Add W2, W8, 1
	048 Move X23, X0
	049 Call BigInteger..ctor, X0, X1, X2
	050 Move X8, [X21+24]
	051 Compare X8, 0
	052 JumpIfEqual {124}
	053 Compare X23, 0
	054 JumpIfEqual {124}
	055 Move W9, [X19+16]
	056 Move X0, [X19+24]
	057 Move W5, [X8+16]
	058 Move X3, [X8+24]
	059 Move X6, [X23+24]
	060 Subtract W1, W25, 1
	061 Subtract W2, W9, W1
	062 Move W4, W31
	063 Move W7, W31
	064 Add W21, W25, 1
	065 Call Kernel.Multiply, X0, X1, X2, X3, X4, X5, X6, X7
	066 Move W8, [X19+16]
	067 Move X0, X19
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction CSEL not yet implemented."
	070 Move [X19+16], W8
	071 Call BigInteger.Normalize, X0
	072 Move X0, [X24]
	073 Call 0x1C17F10
	074 Move W2, W21
	075 Move X22, X0
	076 Call BigInteger..ctor, X0, X1, X2
	077 Compare X22, 0
	078 JumpIfEqual {124}
	079 Move W8, [X23+16]
	080 Move W5, [X20+16]
	081 Move X3, [X20+24]
	082 Move X0, [X23+24]
	083 Move X6, [X22+24]
	084 Subtract W2, W8, W21
	085 Move W1, W21
	086 Move W4, W31
	087 Move W7, W31
	088 Move [X31], W21
	089 Call Kernel.MultiplyMod2p32pmod, X0, X1, X2, X3, X4, X5, X6, X7, X8
	090 Move X0, X22
	091 Call BigInteger.Normalize, X0
	092 Move X0, [X24]
	093 Move W8, [X0+224]
	094 Compare W8, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1C17DFC
	097 Move X0, X22
	098 Move X1, X19
	099 Call Kernel.Compare, X0, X1
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X0, [X24]
	102 Call 0x1C17F10
	103 Add W2, W25, 2
	104 Move X23, X0
	105 Call BigInteger..ctor, X0, X1, X2
	106 Compare X23, 0
	107 JumpIfEqual {124}
	108 Move X8, [X23+24]
	109 Compare X8, 0
	110 JumpIfEqual {124}
	111 Move W9, [X8+24]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Add X8, X8, W21
	114 Move W9, 1
	115 Move X0, X23
	116 Move X1, X22
	117 Move [X8+32], W9
	118 Call Kernel.MinusEq, X0, X1
	119 Move X0, X19
	120 Move X1, X23
	121 Call Kernel.PlusEq, X0, X1
	122 Move X0, X19
	123 Move X1, X22
	124 Call 0x1C17F20
	125 Move X0, 0xEF6000
	126 Move X0, [X0+3960]
	127 Call 0x1C17D08
	128 Call 0x1C17F10
	129 Move X19, X0
	130 Move X0, 0xF1A000
	131 Move X0, [X0+1880]
	132 Call 0x1C17D08
	133 Move X1, X0
	134 Move X0, X19
	135 Move X2, X31
	136 Call IndexOutOfRangeException..ctor, X0, X1
	137 Move X0, 0xF1A000
	138 Move X0, [X0+1888]
	139 Call 0x1C17D08
	140 Move X1, X0
	141 Move X0, X19
	142 Call 0x1C17DEC
	143 Call 0x1C17F28
	144 Move X0, X19
	145 Move X1, X20
	146 Call Kernel.MinusEq, X0, X1
	147 Move X0, [X24]
	148 Move W8, [X0+224]
	149 Compare W8, 0
	150 JumpIfNotEqual {152}
	151 Call 0x1C17DFC
	152 Move X0, X19
	153 Move X1, X20
	154 Call Kernel.Compare, X0, X1
	155 Move TEMP, X0
	156 And TEMP, TEMP, -2147483648
	157 Compare TEMP, -2147483648
	158 JumpIfNotEqual {144}
	159 Move X20, [X31+80]
	160 Move X19, [X31+88]
	161 Move X22, [X31+64]
	162 Move X21, [X31+72]
	163 Move X24, [X31+48]
	164 Move X23, [X31+56]
	165 Move X26, [X31+32]
	166 Move X25, [X31+40]
	167 Move X30, [X31+16]
	168 Add X31, X31, 96
	169 Return 

Method: Mono.Math.BigInteger Multiply(Mono.Math.BigInteger a, Mono.Math.BigInteger b)

Disassembly:
	0x032090D0 ADRP X0, 0xF18000
	0x032090D4 LDR X0, [X0 + 0x800]
	0x032090D8 BL 0x1C16CF4
	0x032090DC ADRP X0, 0xF18000
	0x032090E0 LDR X0, [X0 + 0x808]
	0x032090E4 BL 0x1C16CF4
	0x032090E8 ADRP X0, 0xF18000
	0x032090EC LDR X0, [X0 + 0x810]
	0x032090F0 BL 0x1C16CF4
	0x032090F4 ADRP X0, 0xF18000
	0x032090F8 LDR X0, [X0 + 0x818]
	0x032090FC BL 0x1C16CF4
	0x03209100 MOVZ W8, 0x1
	0x03209104 STRB W8, [X22 + 0x268]
	0x03209108 MOVZ W8, 0x6
	0x0320910C MOVK W8, 0x10000
	0x03209110 ADD W9, W8, 0x5
	0x03209114 CMP W20, W9
	0x03209118 B.LE 0x3209190
	0x0320911C ADD W8, W8, 0x10
	0x03209120 CMP W20, W8
	0x03209124 B.LE 0x32091D8
	0x03209128 MOVZ W8, 0x25
	0x0320912C MOVK W8, 0x10000
	0x03209130 CMP W20, W8
	0x03209134 B.EQ 0x3209340
	0x03209138 MOVZ W8, 0x42
	0x0320913C MOVK W8, 0x10000
	0x03209140 CMP W20, W8
	0x03209144 B.EQ 0x3209298
	0x03209148 MOVZ W8, 0x2D
	0x0320914C MOVK W8, 0x10000
	0x03209150 CMP W20, W8
	0x03209154 B.NE 0x320932C
	0x03209158 MOV X0, X19
	0x0320915C MOV X1, X31
	0x03209160 BL 0x32277A8
	0x03209164 TBZ X21, 0x0, 0x3209410
	0x03209168 TBZ X0, 0x0, 0x3209440
	0x0320916C ADRP X8, 0xF18000
	0x03209170 LDR X8, [X8 + 0x798]
	0x03209174 LDR X0, [X8]
	0x03209178 BL 0x1C16F10
	0x0320917C ADRP X8, 0xF18000
	0x03209180 LDR X8, [X8 + 0x7D8]
	0x03209184 MOV X20, X0
	0x03209188 LDR X1, [X8]
	0x0320918C B 0x3209474
	0x03209190 CMP W20, W8
	0x03209194 B.LE 0x3209230
	0x03209198 MOVZ W8, 0x8
	0x0320919C MOVK W8, 0x10000
	0x032091A0 CMP W20, W8
	0x032091A4 B.EQ 0x3209298
	0x032091A8 MOVZ W8, 0xB
	0x032091AC MOVK W8, 0x10000
	0x032091B0 CMP W20, W8
	0x032091B4 B.NE 0x320932C
	0x032091B8 ADRP X8, 0xEF2000
	0x032091BC LDR X8, [X8 + 0x8A8]
	0x032091C0 LDR X0, [X8]
	0x032091C4 BL 0x1C16F10
	0x032091C8 MOV X1, X31
	0x032091CC MOV X20, X0
	0x032091D0 BL 0x338C880
	0x032091D4 B 0x32094C0
	0x032091D8 MOVZ W8, 0x14
	0x032091DC MOVK W8, 0x10000
	0x032091E0 CMP W20, W8
	0x032091E4 B.EQ 0x320931C
	0x032091E8 MOVZ W8, 0x16
	0x032091EC MOVK W8, 0x10000
	0x032091F0 CMP W20, W8
	0x032091F4 B.NE 0x320932C
	0x032091F8 ADRP X8, 0xEF2000
	0x032091FC LDR X8, [X8 + 0x760]
	0x03209200 LDR X0, [X8]
	0x03209204 BL 0x1C16F10
	0x03209208 ADRP X8, 0xEF4000
	0x0320920C ADRP X9, 0xF18000
	0x03209210 LDR X8, [X8 + 0xEC8]
	0x03209214 LDR X9, [X9 + 0x7F8]
	0x03209218 MOV X3, X31
	0x0320921C MOV X20, X0
	0x03209220 LDR X1, [X8]
	0x03209224 LDR X2, [X9]
	0x03209228 BL 0x3311888
	0x0320922C B 0x32094C0
	0x03209230 MOVZ W8, 0x2
	0x03209234 MOVK W8, 0x10000
	0x03209238 CMP W20, W8
	0x0320923C B.EQ 0x3209298
	0x03209240 MOVZ W8, 0x6
	0x03209244 MOVK W8, 0x10000
	0x03209248 CMP W20, W8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x11D4000
	008 Move X23, 0xF19000
	009 Move W8, [X22+601]
	010 Move X23, [X23+1328]
	011 Move X20, X2
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF19000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+601], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X21
	029 Move W1, W31
	030 Call BigInteger.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {47}
	035 Move X0, [X23]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move W1, W31
	042 Call BigInteger.op_Equality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {61}
	047 Move X0, [X23]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move W0, W31
	057 Move X30, [X31+48]
	058 Move X23, [X31+56]
	059 Call BigInteger.op_Implicit, X0
	060 Return X0
	061 Move X0, [X23]
	062 Move X22, [X19+16]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, X21
	068 Move X1, X22
	069 Call Kernel.Compare, X0, X1
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X0, [X23]
	072 Move X22, [X19+16]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move X0, X21
	078 Move X1, X22
	079 Call BigInteger.op_Modulus, X0, X1
	080 Move X21, X0
	081 Move X0, [X23]
	082 Move X22, [X19+16]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Move X0, X20
	088 Move X1, X22
	089 Call Kernel.Compare, X0, X1
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X0, [X23]
	092 Move X22, [X19+16]
	093 Move W8, [X0+224]
	094 Compare W8, 0
	095 JumpIfNotEqual {97}
	096 Call 0x1C17DFC
	097 Move X0, X20
	098 Move X1, X22
	099 Call BigInteger.op_Modulus, X0, X1
	100 Move X20, X0
	101 Move X0, [X23]
	102 Move W8, [X0+224]
	103 Compare W8, 0
	104 JumpIfNotEqual {106}
	105 Call 0x1C17DFC
	106 Move X0, X21
	107 Move X1, X20
	108 Call BigInteger.op_Multiply, X0, X1
	109 Move X20, X0
	110 Move X0, X19
	111 Move X1, X20
	112 Call ModulusRing.BarrettReduction, X0, X1
	113 Move X0, X20
	114 Move X20, [X31+32]
	115 Move X19, [X31+40]
	116 Move X22, [X31+16]
	117 Move X21, [X31+24]
	118 Move X30, [X31+48]
	119 Move X23, [X31+56]
	120 Return X0

Method: Mono.Math.BigInteger Difference(Mono.Math.BigInteger a, Mono.Math.BigInteger b)

Disassembly:
	0x0320924C B.NE 0x320932C
	0x03209250 MOV X0, X19
	0x03209254 MOV X1, X31
	0x03209258 BL 0x32277A8
	0x0320925C TBZ X0, 0x0, 0x3209374
	0x03209260 ADD X0, X31, 0x8
	0x03209264 BL 0x32095C8
	0x03209268 ADRP X8, 0xF18000
	0x0320926C LDR X8, [X8 + 0x7A8]
	0x03209270 MOV W19, W0
	0x03209274 LDR X8, [X8]
	0x03209278 MOV X0, X8
	0x0320927C BL 0x1C16F10
	0x03209280 ADRP X8, 0xF18000
	0x03209284 LDR X8, [X8 + 0x7D0]
	0x03209288 MOV X20, X0
	0x0320928C MOV W2, W19
	0x03209290 LDR X1, [X8]
	0x03209294 B 0x32093C4
	0x03209298 MOV X0, X20
	0x0320929C BL 0x3209544
	0x032092A0 MOV X21, X0
	0x032092A4 MOV X0, X19
	0x032092A8 MOV X1, X31
	0x032092AC BL 0x32277A8
	0x032092B0 TBZ X0, 0x0, 0x32092D8
	0x032092B4 ADRP X8, 0xF18000
	0x032092B8 LDR X8, [X8 + 0x7B8]
	0x032092BC LDR X0, [X8]
	0x032092C0 BL 0x1C16F10
	0x032092C4 ADRP X8, 0xF18000
	0x032092C8 LDR X8, [X8 + 0x7E0]
	0x032092CC MOV X20, X0
	0x032092D0 LDR X1, [X8]
	0x032092D4 B 0x320930C
	0x032092D8 ADRP X8, 0xF18000
	0x032092DC LDR X8, [X8 + 0x800]
	0x032092E0 MOV X1, X19
	0x032092E4 LDR X0, [X8]
	0x032092E8 BL 0x32094D4
	0x032092EC ADRP X8, 0xF18000
	0x032092F0 LDR X8, [X8 + 0x7B8]
	0x032092F4 MOV X19, X0
	0x032092F8 LDR X8, [X8]
	0x032092FC MOV X0, X8
	0x03209300 BL 0x1C16F10
	0x03209304 MOV X20, X0
	0x03209308 MOV X1, X19
	0x0320930C MOV X2, X21
	0x03209310 MOV X3, X31
	0x03209314 BL 0x339B6CC
	0x03209318 B 0x32094C0
	0x0320931C MOV X0, X19
	0x03209320 MOV X1, X31
	0x03209324 BL 0x32277A8
	0x03209328 TBZ X0, 0x0, 0x3209380
	0x0320932C MOV X0, X20
	0x03209330 LDP X20, X19, [X31 + 0x20]
	0x03209334 LDP X22, X21, [X31 + 0x10]
	0x03209338 LDR X30, [X31], #0x30
	0x0320933C B 0x3209544
	0x03209340 MOV X0, X19
	0x03209344 MOV X1, X31
	0x03209348 BL 0x32277A8
	0x0320934C TBZ X0, 0x0, 0x32093D0
	0x03209350 ADRP X8, 0xF18000
	0x03209354 LDR X8, [X8 + 0x7B0]
	0x03209358 LDR X0, [X8]
	0x0320935C BL 0x1C16F10
	0x03209360 ADRP X8, 0xF18000
	0x03209364 LDR X8, [X8 + 0x7F0]
	0x03209368 MOV X20, X0
	0x0320936C LDR X1, [X8]
	0x03209370 B 0x3209404
	0x03209374 ADRP X8, 0xF18000
	0x03209378 LDR X8, [X8 + 0x7C8]
	0x0320937C B 0x3209388
	0x03209380 ADRP X8, 0xF18000
	0x03209384 LDR X8, [X8 + 0x818]
	0x03209388 LDR X0, [X8]
	0x0320938C MOV X1, X19
	0x03209390 BL 0x32094D4
	0x03209394 MOV X19, X0
	0x03209398 ADD X0, X31, 0x8
	0x0320939C BL 0x32095C8
	0x032093A0 ADRP X8, 0xF18000
	0x032093A4 LDR X8, [X8 + 0x7A8]
	0x032093A8 MOV W21, W0
	0x032093AC LDR X8, [X8]
	0x032093B0 MOV X0, X8
	0x032093B4 BL 0x1C16F10
	0x032093B8 MOV X20, X0
	0x032093BC MOV X1, X19
	0x032093C0 MOV W2, W21
	0x032093C4 MOV X3, X31
	0x032093C8 BL 0x32E2368
	0x032093CC B 0x32094C0
	0x032093D0 ADRP X8, 0xF18000
	0x032093D4 LDR X8, [X8 + 0x808]
	0x032093D8 MOV X1, X19
	0x032093DC LDR X0, [X8]
	0x032093E0 BL 0x32094D4
	0x032093E4 ADRP X8, 0xF18000
	0x032093E8 LDR X8, [X8 + 0x7B0]
	0x032093EC MOV X19, X0
	0x032093F0 LDR X8, [X8]
	0x032093F4 MOV X0, X8
	0x032093F8 BL 0x1C16F10
	0x032093FC MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x11D4000
	008 Move W8, [X20+602]
	009 Move X21, X2
	010 Move X22, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF19000
	017 Move X0, [X0+1328]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+602], W8
	021 Move X23, 0xF19000
	022 Move X23, [X23+1328]
	023 Move X0, X22
	024 Move X1, X21
	025 Call Kernel.Compare, X0, X1
	026 Move W20, W0
	027 Add W31, W0, 1
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Compare W20, 0
	030 JumpIfNotEqual {120}
	031 Move X0, [X23]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move W0, W31
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Call BigInteger.op_Implicit, X0
	044 Return X0
	045 Move X0, [X23]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X21
	051 Move X1, X22
	052 Move X0, [X23]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X22
	058 Move X1, X21
	059 Call BigInteger.op_Subtraction, X0, X1
	060 Move X21, X0
	061 Move X0, [X23]
	062 Move X22, [X19+16]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, X21
	068 Move X1, X22
	069 Call Kernel.Compare, X0, X1
	070 Move TEMP, X0
	071 And TEMP, TEMP, -2147483648
	072 Compare TEMP, -2147483648
	073 JumpIfEqual {94}
	074 Compare X21, 0
	075 JumpIfEqual {119}
	076 Move X22, [X19+16]
	077 Compare X22, 0
	078 JumpIfEqual {119}
	079 Move W8, [X21+16]
	080 Move W9, [X22+16]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X0, X19
	083 Move X1, X21
	084 Call ModulusRing.BarrettReduction, X0, X1
	085 Move X0, [X23]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X0, X21
	091 Move X1, X22
	092 Call BigInteger.op_Modulus, X0, X1
	093 Move X21, X0
	094 Add W31, W20, 1
	095 Move X0, X21
	096 Move X20, [X31+32]
	097 Move X19, [X31+40]
	098 Move X22, [X31+16]
	099 Move X21, [X31+24]
	100 Move X30, [X31+48]
	101 Move X23, [X31+56]
	102 Return X0
	103 Move X0, [X23]
	104 Move X19, [X19+16]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 Move X0, X19
	110 Move X1, X21
	111 Move X20, [X31+32]
	112 Move X19, [X31+40]
	113 Move X22, [X31+16]
	114 Move X21, [X31+24]
	115 Move X30, [X31+48]
	116 Move X23, [X31+56]
	117 Call BigInteger.op_Subtraction, X0, X1
	118 Return X0
	119 Call 0x1C17F20
	120 Move X0, 0xEEB000
	121 Move X0, [X0+2000]
	122 Call 0x1C17D08
	123 Call 0x1C17F10
	124 Move X1, X31
	125 Move X19, X0
	126 Call Exception..ctor, X0
	127 Move X0, 0xF19000
	128 Move X0, [X0+1896]
	129 Call 0x1C17D08
	130 Move X1, X0
	131 Move X0, X19
	132 Call 0x1C17DEC

Method: Mono.Math.BigInteger Pow(Mono.Math.BigInteger a, Mono.Math.BigInteger k)

Disassembly:
	0x03208854 B 0x320888C
	0x03208858 MOVZ W0, 0xC
	0x0320885C B 0x320888C
	0x03208860 MOVZ W0, 0x9
	0x03208864 B 0x320888C
	0x03208868 MOVZ W0, 0x8
	0x0320886C B 0x320888C
	0x03208870 MOVZ W0, 0x7
	0x03208874 B 0x320888C
	0x03208878 MOVZ W0, 0x6
	0x0320887C B 0x320888C
	0x03208880 MOVZ W0, 0x5
	0x03208884 B 0x320888C
	0x03208888 MOVZ W0, 0x4
	0x0320888C CMP W19, 0x5
	0x03208890 B.HI 0x32088E0
	0x03208894 ADRP X9, 0xFFFFFFFFFD98E000
	0x03208898 MOV W8, W19
	0x0320889C ADD X9, X9, 0x41D
	0x032088A0 ADR X10, 0x10
	0x032088A4 LDRB W11, [X9, X8, LSL]
	0x032088A8 ADD X10, X10, X11, 0x2, LSL
	0x032088AC BR X10
	0x032088B0 UBFM W8, W0, 0x2, 0x1F
	0x032088B4 CMP W8, 0x0
	0x032088B8 CSINC W0, W8, W31, NE
	0x032088BC B 0x32088D4
	0x032088C0 UBFM W0, W0, 0x1, 0x1F
	0x032088C4 B 0x32088D4
	0x032088C8 UBFM W0, W0, 0x1F, 0x1E
	0x032088CC B 0x32088D4
	0x032088D0 UBFM W0, W0, 0x1E, 0x1D
	0x032088D4 LDP X30, X19, [X31], #0x10
	0x032088D8 RET
	0x032088DC BL 0x1C16F20
	0x032088E0 ADRP X0, 0xEF3000
	0x032088E4 LDR X0, [X0 + 0x760]
	0x032088E8 BL 0x1C16D08
	0x032088EC BL 0x1C16F10
	0x032088F0 MOV X19, X0
	0x032088F4 ADRP X0, 0xF19000
	0x032088F8 LDR X0, [X0 + 0x770]
	0x032088FC BL 0x1C16D08
	0x03208900 MOV X1, X0
	0x03208904 MOV X0, X19
	0x03208908 MOV X2, X31
	0x0320890C BL 0x3316014
	0x03208910 B 0x3208944
	0x03208914 ADRP X0, 0xEEB000
	0x03208918 LDR X0, [X0 + 0x7D0]
	0x0320891C BL 0x1C16D08
	0x03208920 BL 0x1C16F10
	0x03208924 MOV X19, X0
	0x03208928 ADRP X0, 0xF19000
	0x0320892C LDR X0, [X0 + 0x778]
	0x03208930 BL 0x1C16D08
	0x03208934 MOV X1, X0
	0x03208938 MOV X0, X19
	0x0320893C MOV X2, X31
	0x03208940 BL 0x33B2C70
	0x03208944 ADRP X0, 0xF19000
	0x03208948 LDR X0, [X0 + 0x780]
	0x0320894C BL 0x1C16D08
	0x03208950 MOV X1, X0
	0x03208954 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x11D5000
	008 Move X23, 0xF1A000
	009 Move W8, [X22+603]
	010 Move X23, [X23+1328]
	011 Move X19, X2
	012 Move X21, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF1A000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+603], W8
	023 Move X0, [X23]
	024 Call 0x1C17F10
	025 Move W1, 1
	026 Move X22, X0
	027 Call BigInteger..ctor, X0, X1
	028 Move X0, [X23]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X19
	034 Move W1, W31
	035 Call BigInteger.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {72}
	040 Compare X19, 0
	041 JumpIfEqual {80}
	042 Move X0, X19
	043 Move W1, W31
	044 Call BigInteger.TestBit, X0, X1
	045 And W31, W0, 1
	046 Move X0, X19
	047 NotImplemented "Instruction CSEL not yet implemented."
	048 Call BigInteger.BitCount, X0
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W23, 1
	051 Move X0, X20
	052 Move X1, X21
	053 Move X2, X21
	054 Call ModulusRing.Multiply, X0, X1, X2
	055 Move X21, X0
	056 Move X0, X19
	057 Move W1, W23
	058 Call BigInteger.TestBit, X0, X1
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {68}
	063 Move X0, X20
	064 Move X1, X21
	065 Move X2, X22
	066 Call ModulusRing.Multiply, X0, X1, X2
	067 Move X22, X0
	068 Move X0, X19
	069 Add W23, W23, 1
	070 Call BigInteger.BitCount, X0
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X0, X22
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X30, [X31+48]
	078 Move X23, [X31+56]
	079 Return X0
	080 Call 0x1C17F20

Method: Mono.Math.BigInteger Pow(System.UInt32 b, Mono.Math.BigInteger exp)

Disassembly:
	0x03209400 MOV X1, X19
	0x03209404 MOV X2, X31
	0x03209408 BL 0x32E5A1C
	0x0320940C B 0x32094C0
	0x03209410 TBZ X0, 0x0, 0x3209480
	0x03209414 ADRP X8, 0xF18000
	0x03209418 LDR X8, [X8 + 0x7A0]
	0x0320941C LDR X0, [X8]
	0x03209420 BL 0x1C16F10
	0x03209424 ADRP X8, 0xF18000
	0x03209428 LDR X8, [X8 + 0x7E8]
	0x0320942C MOV X2, X31
	0x03209430 MOV X20, X0
	0x03209434 LDR X1, [X8]
	0x03209438 BL 0x32E1E68
	0x0320943C B 0x32094C0
	0x03209440 ADRP X8, 0xF18000
	0x03209444 LDR X8, [X8 + 0x810]
	0x03209448 MOV X1, X19
	0x0320944C LDR X0, [X8]
	0x03209450 BL 0x32094D4
	0x03209454 ADRP X8, 0xF18000
	0x03209458 LDR X8, [X8 + 0x798]
	0x0320945C MOV X19, X0
	0x03209460 LDR X8, [X8]
	0x03209464 MOV X0, X8
	0x03209468 BL 0x1C16F10
	0x0320946C MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x11D4000
	008 Move X23, 0xF19000
	009 Move W8, [X22+604]
	010 Move X23, [X23+1328]
	011 Move X19, X2
	012 Move W21, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF19000
	019 Move X0, [X0+1328]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+604], W8
	023 Move X0, [X23]
	024 Call 0x1C17F10
	025 Move W1, W21
	026 Move X22, X0
	027 Call BigInteger..ctor, X0, X1
	028 Move X0, X20
	029 Move X1, X22
	030 Move X2, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]
	037 Call ModulusRing.Pow, X0, X1, X2
	038 Return X0

