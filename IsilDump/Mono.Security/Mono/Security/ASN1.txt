Type: Mono.Security.ASN1

Method: System.Void .ctor(System.Byte tag)

Disassembly:
	0x031E89E8 BL 0x1C16CF4
	0x031E89EC ADRP X0, 0xF38000
	0x031E89F0 LDR X0, [X0 + 0xBB8]
	0x031E89F4 BL 0x1C16CF4
	0x031E89F8 ADRP X0, 0xF38000
	0x031E89FC LDR X0, [X0 + 0xBC0]
	0x031E8A00 BL 0x1C16CF4
	0x031E8A04 ADRP X0, 0xF38000
	0x031E8A08 LDR X0, [X0 + 0xBC8]
	0x031E8A0C BL 0x1C16CF4
	0x031E8A10 ADRP X0, 0xF38000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move [X20+24], X31
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move X30, [X31+32]
	013 Return 

Method: System.Void .ctor(System.Byte tag, System.Byte[] data)

Disassembly:
	0x031E8A14 LDR X0, [X0 + 0xBA8]
	0x031E8A18 BL 0x1C16CF4
	0x031E8A1C MOVZ W8, 0x1
	0x031E8A20 STRB W8, [X20 + 0x166]
	0x031E8A24 LDR X0, [X21]
	0x031E8A28 BL 0x1C16F10
	0x031E8A2C MOV X1, X31
	0x031E8A30 MOV X20, X0
	0x031E8A34 BL 0x3231AC4
	0x031E8A38 LDR X1, [X23]
	0x031E8A3C ADD X0, X19, 0x10
	0x031E8A40 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W20, W1
	006 Move X1, X31
	007 Move X19, X2
	008 Move X21, X0
	009 Call Object..ctor, X0
	010 Move [X21+16], W20
	011 Move [X21+24], X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Move X21, [X31+40]
	016 Return 

Method: System.Void .ctor(System.Byte[] data)

Disassembly:
	0x031E8A44 BL 0x3319C4C
	0x031E8A48 MOV X21, X0
	0x031E8A4C MOV X0, X31
	0x031E8A50 BL 0x33C1548
	0x031E8A54 CBZ X20, 0x31E8BEC
	0x031E8A58 ADRP X8, 0xF38000
	0x031E8A5C LDR X8, [X8 + 0xBB0]
	0x031E8A60 MOV X3, X0
	0x031E8A64 MOV X0, X20
	0x031E8A68 MOV X2, X21
	0x031E8A6C LDR X1, [X8]
	0x031E8A70 MOV X4, X31
	0x031E8A74 BL 0x3234D98
	0x031E8A78 MOV X0, X19
	0x031E8A7C BL 0x31E7D00
	0x031E8A80 CBZ X0, 0x31E8BEC
	0x031E8A84 ADRP X8, 0xF0B000
	0x031E8A88 LDR X8, [X8 + 0x758]
	0x031E8A8C LDR X9, [X0 + 0x18]
	0x031E8A90 ADRP X22, 0xF38000
	0x031E8A94 ADRP X24, 0xF38000
	0x031E8A98 LDR X0, [X8]
	0x031E8A9C LDR X22, [X22 + 0xBC0]
	0x031E8AA0 LDR X24, [X24 + 0xBB8]
	0x031E8AA4 ADD X1, X31, 0xC
	0x031E8AA8 STR W9, [X31 + 0xC]
	0x031E8AAC BL 0x1C16E04
	0x031E8AB0 MOV X21, X0
	0x031E8AB4 MOV X0, X31
	0x031E8AB8 BL 0x33C1548
	0x031E8ABC LDR X1, [X22]
	0x031E8AC0 MOV X3, X0
	0x031E8AC4 MOV X0, X20
	0x031E8AC8 MOV X2, X21
	0x031E8ACC MOV X4, X31
	0x031E8AD0 BL 0x3234D98
	0x031E8AD4 LDR X1, [X24]
	0x031E8AD8 MOV X0, X20
	0x031E8ADC MOV X2, X31
	0x031E8AE0 BL 0x32333E0
	0x031E8AE4 MOV X0, X31
	0x031E8AE8 BL 0x33C1548
	0x031E8AEC MOV X1, X0
	0x031E8AF0 MOV X0, X20
	0x031E8AF4 MOV X2, X31
	0x031E8AF8 BL 0x32333E0
	0x031E8AFC MOV X0, X19
	0x031E8B00 BL 0x31E7D00
	0x031E8B04 CBZ X0, 0x31E8BEC
	0x031E8B08 ADRP X25, 0xF38000
	0x031E8B0C ADRP X26, 0xF0B000
	0x031E8B10 LDR X25, [X25 + 0xBC8]
	0x031E8B14 LDR X26, [X26 + 0x9C8]
	0x031E8B18 MOV X24, X31
	0x031E8B1C LDRSW X8, [X0 + 0x18]
	0x031E8B20 CMP X24, X8
	0x031E8B24 B.GE 0x31E8BF0
	0x031E8B28 MOV X0, X19
	0x031E8B2C BL 0x31E7D00
	0x031E8B30 CBZ X0, 0x31E8BEC
	0x031E8B34 LDR W8, [X0 + 0x18]
	0x031E8B38 CMP X24, X8
	0x031E8B3C B.CS 0x31E8C18
	0x031E8B40 LDR X1, [X23]
	0x031E8B44 ADD X8, X0, X24
	0x031E8B48 ADD X0, X8, 0x20
	0x031E8B4C MOV X2, X31
	0x031E8B50 BL 0x3319C4C
	0x031E8B54 LDR X1, [X25]
	0x031E8B58 MOV X2, X0
	0x031E8B5C MOV X0, X20
	0x031E8B60 MOV X3, X31
	0x031E8B64 BL 0x3234224
	0x031E8B68 ADD X24, X24, 0x1
	0x031E8B6C ANDS X31, X24, 0xF
	0x031E8B70 B.NE 0x31E8BE0
	0x031E8B74 MOV X0, X31
	0x031E8B78 BL 0x33C1548
	0x031E8B7C LDR X22, [X26]
	0x031E8B80 MOV X21, X0
	0x031E8B84 LDR X8, [X22 + 0x38]
	0x031E8B88 CBNZ X8, 0x31E8B98
	0x031E8B8C MOV X0, X22
	0x031E8B90 BL 0x1C5C6E0
	0x031E8B94 LDR X8, [X22 + 0x38]
	0x031E8B98 LDR X0, [X8 + 0x10]
	0x031E8B9C LDRB W8, [X0 + 0x135]
	0x031E8BA0 TBNZ X8, 0x0, 0x31E8BA8
	0x031E8BA4 BL 0x1C5C684

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11F5000
	007 Move W8, [X21+349]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF0C000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+349], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Compare X20, 0
	023 JumpIfEqual {78}
	024 Move W11, [X20+24]
	025 Compare W11, 0
	026 JumpIfEqual {77}
	027 Move W8, [X20+32]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move [X19+16], W8
	030 Move W8, [X20+33]
	031 Subtract W9, W8, 129
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W22, 2
	034 Move W21, W8
	035 Move W21, W31
	036 Subtract X10, X8, 128
	037 Subtract W11, W11, 2
	038 Add X12, X20, 34
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W13, [X12+1]
	041 Subtract X10, X10, 1
	042 NotImplemented "Instruction BFM not yet implemented."
	043 Move W21, W13
	044 Subtract W22, W8, 126
	045 Move X8, 0xF0C000
	046 Move X8, [X8+1560]
	047 Move W1, W21
	048 Move X0, [X8]
	049 Call 0x1C17D6C
	050 Move X2, X0
	051 Move [X19+24], X0
	052 Move X0, X20
	053 Move W1, W22
	054 Move W3, W31
	055 Move W4, W21
	056 Move X5, X31
	057 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	058 Move W8, [X19+16]
	059 Move TEMP, X8
	060 And TEMP, TEMP, 32
	061 Compare TEMP, 32
	062 JumpIfNotEqual {71}
	063 Move [X31+12], W31
	064 Move X1, [X19+24]
	065 Compare X1, 0
	066 JumpIfEqual {78}
	067 Move W3, [X1+24]
	068 Add X2, X31, 12
	069 Move X0, X19
	070 Call ASN1.Decode, X0, X1, X2, X3
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X22, [X31+16]
	074 Move X21, [X31+24]
	075 Move X30, [X31+48]
	076 Return 
	077 Call 0x1C17F28
	078 Call 0x1C17F20
	079 Move X0, 0xF0C000
	080 Move X0, [X0+2880]
	081 Call 0x1C17D08
	082 Call 0x1C17F10
	083 Move X19, X0
	084 Move X0, 0xF39000
	085 Move X0, [X0+2952]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X19
	089 Move X2, X31
	090 Call NotSupportedException..ctor, X0, X1
	091 Move X0, 0xF39000
	092 Move X0, [X0+2960]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Call 0x1C17DEC

Method: System.Int32 get_Count()

Disassembly:
	0x031E8CC4 ADRP X8, 0xF38000
	0x031E8CC8 LDR X8, [X8 + 0xB98]
	0x031E8CCC LDR X0, [X8]
	0x031E8CD0 BL 0x1C16F10
	0x031E8CD4 MOV X1, X31
	0x031E8CD8 MOV X21, X0
	0x031E8CDC BL 0x33BDD8C

ISIL:
	001 Move X0, [X0+32]
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 Move X8, [X0]
	005 Move X2, [X8+664]
	006 Move X1, [X8+672]
	007 CallNoReturn X2
	008 Return X0

Method: System.Byte get_Tag()

Disassembly:
	0x031E8CE0 MOVZ W8, 0x2
	0x031E8CE4 CMP W20, 0x4

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Int32 get_Length()

Disassembly:
	0x031E8CE8 STRB W8, [X21 + 0x10]
	0x031E8CEC STR X31, [X21 + 0x18]
	0x031E8CF0 B.EQ 0x31E8D04
	0x031E8CF4 CBNZ W20, 0x31E8D24
	0x031E8CF8 MOV X0, X21
	0x031E8CFC MOV X1, X19

ISIL:
	001 Move X8, [X0+24]
	002 Compare X8, 0
	003 JumpIfEqual {6}
	004 Move W0, [X8+24]
	005 Return X0
	006 Move W0, W31
	007 Return X0

Method: System.Byte[] get_Value()

Disassembly:
	0x031E8D00 B 0x31E8D68
	0x031E8D04 ADRP X8, 0xF0B000
	0x031E8D08 LDR X8, [X8 + 0x618]
	0x031E8D0C MOVZ W1, 0x1
	0x031E8D10 LDR X0, [X8]
	0x031E8D14 BL 0x1C16D6C
	0x031E8D18 MOV X1, X0
	0x031E8D1C MOV X0, X21
	0x031E8D20 B 0x31E8D68
	0x031E8D24 ADRP X8, 0xF0B000
	0x031E8D28 LDR X8, [X8 + 0x618]
	0x031E8D2C LDR X0, [X8]
	0x031E8D30 MOVZ W8, 0x4
	0x031E8D34 SUB W1, W8, W20
	0x031E8D38 BL 0x1C16D6C
	0x031E8D3C CBZ X0, 0x31E8D84
	0x031E8D40 LDR W4, [X0 + 0x18]
	0x031E8D44 MOV X22, X0
	0x031E8D48 MOV X0, X19
	0x031E8D4C MOV W1, W20
	0x031E8D50 MOV X2, X22
	0x031E8D54 MOV W3, W31
	0x031E8D58 MOV X5, X31
	0x031E8D5C BL 0x33A8A9C
	0x031E8D60 MOV X0, X21
	0x031E8D64 MOV X1, X22
	0x031E8D68 BL 0x31E7D90
	0x031E8D6C MOV X0, X21
	0x031E8D70 LDP X20, X19, [X31 + 0x20]
	0x031E8D74 LDP X22, X21, [X31 + 0x10]
	0x031E8D78 LDR X30, [X31], #0x30
	0x031E8D7C RET
	0x031E8D80 BL 0x1C16F28
	0x031E8D84 BL 0x1C16F20
	0x031E8D88 STR X30, [X31 - 0x10]!
	0x031E8D8C STR W0, [X31 + 0xC]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11F5000
	005 Move W8, [X20+350]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF0C000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+350], W8
	016 Move X0, [X19+24]
	017 Compare X0, 0
	018 JumpIfNotEqual {25}
	019 Move X8, [X19]
	020 Move X0, X19
	021 Move X9, [X8+376]
	022 Move X1, [X8+384]
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move X0, [X19+24]
	025 Compare X0, 0
	026 JumpIfEqual {43}
	027 Move X1, X31
	028 Call Array.Clone, X0
	029 Compare X0, 0
	030 JumpIfEqual {39}
	031 Move X8, 0xF0C000
	032 Move X8, [X8+1560]
	033 Move X19, X0
	034 Move X20, [X8]
	035 Move X1, X20
	036 Call 0x1C17E00
	037 Compare X0, 0
	038 JumpIfEqual {44}
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return X0
	043 Call 0x1C17F20
	044 Move X0, X19
	045 Move X1, X20
	046 Call 0x1C181E0

Method: System.Void set_Value(System.Byte[] value)

Disassembly:
	0x031E8D90 ADD X0, X31, 0xC
	0x031E8D94 BL 0x31E9894
	0x031E8D98 LDR X30, [X31], #0x10
	0x031E8D9C RET
	0x031E8DA0 STR X30, [X31 - 0x20]!
	0x031E8DA4 STP X20, X19, [X31 + 0x10]
	0x031E8DA8 ADRP X20, 0x11F4000
	0x031E8DAC LDRB W8, [X20 + 0x168]
	0x031E8DB0 MOV X19, X0
	0x031E8DB4 TBNZ X8, 0x0, 0x31E8DD8
	0x031E8DB8 ADRP X0, 0xF38000
	0x031E8DBC LDR X0, [X0 + 0xB98]
	0x031E8DC0 BL 0x1C16CF4
	0x031E8DC4 ADRP X0, 0xF38000
	0x031E8DC8 LDR X0, [X0 + 0xBD8]
	0x031E8DCC BL 0x1C16CF4
	0x031E8DD0 MOVZ W8, 0x1
	0x031E8DD4 STRB W8, [X20 + 0x168]
	0x031E8DD8 CBZ X19, 0x31E8E34
	0x031E8DDC ADRP X8, 0xF38000
	0x031E8DE0 LDR X8, [X8 + 0xBD8]
	0x031E8DE4 ADRP X20, 0xF38000
	0x031E8DE8 LDR X0, [X8]
	0x031E8DEC LDR W8, [X0 + 0xE0]
	0x031E8DF0 LDR X20, [X20 + 0xB98]
	0x031E8DF4 CBNZ W8, 0x31E8DFC
	0x031E8DF8 BL 0x1C16DFC
	0x031E8DFC MOV X0, X19
	0x031E8E00 MOV X1, X31
	0x031E8E04 BL 0x3264FF4
	0x031E8E08 LDR X8, [X20]
	0x031E8E0C MOV X19, X0
	0x031E8E10 MOV X0, X8
	0x031E8E14 BL 0x1C16F10
	0x031E8E18 MOV X1, X19
	0x031E8E1C MOV X20, X0
	0x031E8E20 BL 0x31E7A44
	0x031E8E24 MOV X0, X20
	0x031E8E28 LDP X20, X19, [X31 + 0x10]
	0x031E8E2C LDR X30, [X31], #0x20
	0x031E8E30 RET
	0x031E8E34 ADRP X0, 0xF10000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11F5000
	007 Move W8, [X21+351]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF0C000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+351], W8
	019 Compare X20, 0
	020 JumpIfEqual {45}
	021 Move X0, X20
	022 Move X1, X31
	023 Call Array.Clone, X0
	024 Compare X0, 0
	025 JumpIfEqual {44}
	026 Move X22, 0xF0C000
	027 Move X22, [X22+1560]
	028 Move X20, X0
	029 Move X21, [X22]
	030 Move X1, X21
	031 Call 0x1C17E00
	032 Compare X0, 0
	033 JumpIfEqual {51}
	034 Move [X19+24], X0
	035 Move X19, [X22]
	036 Move X0, X20
	037 Move X1, X19
	038 Call 0x1C17E00
	039 Compare X0, 0
	040 JumpIfNotEqual {45}
	041 Move X0, X20
	042 Move X1, X19
	043 Call 0x1C181E0
	044 Move [X19+24], X31
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Return 
	051 Move X0, X20
	052 Move X1, X21
	053 Call 0x1C181E0

Method: System.Boolean CompareArray(System.Byte[] array1, System.Byte[] array2)

Disassembly:
	0x031E8E38 LDR X0, [X0 + 0x528]
	0x031E8E3C BL 0x1C16D08
	0x031E8E40 BL 0x1C16F10
	0x031E8E44 MOV X19, X0
	0x031E8E48 ADRP X0, 0xF38000
	0x031E8E4C LDR X0, [X0 + 0xBE0]
	0x031E8E50 BL 0x1C16D08
	0x031E8E54 MOV X1, X0
	0x031E8E58 MOV X0, X19
	0x031E8E5C MOV X2, X31
	0x031E8E60 BL 0x330E100
	0x031E8E64 ADRP X0, 0xF38000
	0x031E8E68 LDR X0, [X0 + 0xBE8]
	0x031E8E6C BL 0x1C16D08
	0x031E8E70 MOV X1, X0
	0x031E8E74 MOV X0, X19
	0x031E8E78 BL 0x1C16DEC
	0x031E8E7C STR X30, [X31 - 0x30]!
	0x031E8E80 STP X22, X21, [X31 + 0x10]
	0x031E8E84 STP X20, X19, [X31 + 0x20]
	0x031E8E88 ADRP X20, 0x11F4000
	0x031E8E8C LDRB W8, [X20 + 0x169]
	0x031E8E90 MOV X19, X0
	0x031E8E94 TBNZ X8, 0x0, 0x31E8EB8
	0x031E8E98 ADRP X0, 0xF38000
	0x031E8E9C LDR X0, [X0 + 0xB98]
	0x031E8EA0 BL 0x1C16CF4
	0x031E8EA4 ADRP X0, 0xF0B000
	0x031E8EA8 LDR X0, [X0 + 0x618]
	0x031E8EAC BL 0x1C16CF4
	0x031E8EB0 MOVZ W8, 0x1
	0x031E8EB4 STRB W8, [X20 + 0x169]
	0x031E8EB8 CBZ X19, 0x31E8F40
	0x031E8EBC LDR W20, [X19 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {29}
	004 Compare X2, 0
	005 JumpIfEqual {29}
	006 Move W8, [X1+24]
	007 Move W9, [X2+24]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W9, W31
	011 Subtract W8, W31, W8
	012 Add W31, W8, W9
	013 Move X9, W9
	014 Add X10, X1, X9
	015 Add X11, X2, X9
	016 Move W10, [X10+32]
	017 Move W11, [X11+32]
	018 Add W12, W8, W9
	019 NotImplemented "Instruction CMP not yet implemented."
	020 NotImplemented "Instruction CSET not yet implemented."
	021 Add W31, W12, 1
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Add W9, W9, 1
	024 Move W0, W31
	025 Move W0, 1
	026 Move X30, [X31+16]
	027 Return X0
	028 Call 0x1C17F28
	029 Call 0x1C17F20

Method: System.Boolean CompareValue(System.Byte[] value)

Disassembly:
	0x031E8EC0 CBZ W20, 0x31E8F88
	0x031E8EC4 ADRP X22, 0xF38000
	0x00000000 INVALID
	0x031E8ECC LDR X22, [X22 + 0xB98]

ISIL:
	001 Move X8, [X0+24]
	002 Move X2, X1
	003 Move X1, X8
	004 Call ASN1.CompareArray, X0, X1, X2
	005 Return X0

Method: Mono.Security.ASN1 Add(Mono.Security.ASN1 asn1)

Disassembly:
	0x031E8ED0 TBZ X8, 0x1F, 0x31E8F0C
	0x031E8ED4 ADRP X8, 0xF0B000
	0x031E8ED8 LDR X8, [X8 + 0x618]
	0x031E8EDC ADD W1, W20, 0x1
	0x031E8EE0 LDR X0, [X8]
	0x031E8EE4 BL 0x1C16D6C
	0x031E8EE8 MOV X21, X0
	0x031E8EEC MOVZ W3, 0x1
	0x031E8EF0 MOV X0, X19
	0x031E8EF4 MOV W1, W31
	0x031E8EF8 MOV X2, X21
	0x031E8EFC MOV W4, W20
	0x031E8F00 MOV X5, X31
	0x031E8F04 BL 0x33A8A9C
	0x031E8F08 MOV X19, X21
	0x031E8F0C LDR X0, [X22]
	0x031E8F10 BL 0x1C16F10
	0x031E8F14 MOV X1, X31
	0x031E8F18 MOV X20, X0
	0x031E8F1C BL 0x33BDD8C
	0x031E8F20 MOVZ W8, 0x2
	0x031E8F24 STRB W8, [X20 + 0x10]
	0x031E8F28 STR X19, [X20 + 0x18]
	0x031E8F2C MOV X0, X20
	0x031E8F30 LDP X20, X19, [X31 + 0x20]
	0x031E8F34 LDP X22, X21, [X31 + 0x10]
	0x031E8F38 LDR X30, [X31], #0x30
	0x031E8F3C RET
	0x031E8F40 ADRP X0, 0xF10000
	0x031E8F44 LDR X0, [X0 + 0x528]
	0x031E8F48 BL 0x1C16D08
	0x031E8F4C BL 0x1C16F10
	0x031E8F50 MOV X19, X0
	0x031E8F54 ADRP X0, 0xF38000
	0x031E8F58 LDR X0, [X0 + 0xBF0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11F5000
	006 Move W8, [X21+352]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF39000
	014 Move X0, [X0+2976]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+352], W8
	018 Compare X19, 0
	019 JumpIfEqual {39}
	020 Move X21, [X20+32]
	021 Compare X21, 0
	022 JumpIfNotEqual {33}
	023 Move X8, 0xF39000
	024 Move X8, [X8+2976]
	025 Move X0, [X8]
	026 Call 0x1C17F10
	027 Move X1, X31
	028 Move X21, X0
	029 Call ArrayList..ctor, X0
	030 Move [X20+32], X21
	031 Compare X21, 0
	032 JumpIfEqual {45}
	033 Move X8, [X21]
	034 Move X0, X21
	035 Move X1, X19
	036 Move X9, [X8+776]
	037 Move X2, [X8+784]
	038 NotImplemented "Instruction BLR not yet implemented."
	039 Move X0, X19
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return X0
	045 Call 0x1C17F20

Method: System.Byte[] GetBytes()

Disassembly:
	0x031E8F5C BL 0x1C16D08
	0x031E8F60 MOV X1, X0
	0x031E8F64 MOV X0, X19
	0x031E8F68 MOV X2, X31
	0x031E8F6C BL 0x330E100
	0x031E8F70 ADRP X0, 0xF38000
	0x031E8F74 LDR X0, [X0 + 0xBF8]
	0x031E8F78 BL 0x1C16D08
	0x031E8F7C MOV X1, X0
	0x031E8F80 MOV X0, X19
	0x031E8F84 BL 0x1C16DEC
	0x031E8F88 BL 0x1C16F28
	0x031E8F8C STR X30, [X31 - 0x30]!
	0x031E8F90 STP X22, X21, [X31 + 0x10]
	0x031E8F94 STP X20, X19, [X31 + 0x20]
	0x031E8F98 CBZ X0, 0x31E9020
	0x031E8F9C LDRB W8, [X0 + 0x10]
	0x031E8FA0 MOV X19, X0
	0x031E8FA4 CMP W8, 0x2
	0x031E8FA8 B.NE 0x31E9054
	0x031E8FAC MOV X0, X19
	0x031E8FB0 BL 0x31E7D00
	0x031E8FB4 CBZ X0, 0x31E9004
	0x031E8FB8 MOV X21, X31
	0x031E8FBC MOV W20, W31
	0x031E8FC0 LDRSW X8, [X0 + 0x18]
	0x031E8FC4 CMP X21, X8
	0x031E8FC8 B.GE 0x31E9008
	0x031E8FCC MOV X0, X19
	0x031E8FD0 BL 0x31E7D00
	0x031E8FD4 CBZ X0, 0x31E9004
	0x031E8FD8 LDR W8, [X0 + 0x18]
	0x031E8FDC CMP X21, X8
	0x031E8FE0 B.CS 0x31E901C
	0x031E8FE4 ADD X8, X0, X21
	0x031E8FE8 LDRB W22, [X8 + 0x20]
	0x031E8FEC MOV X0, X19
	0x031E8FF0 ADD X21, X21, 0x1
	0x031E8FF4 BFM W22, W20, 0x18, 0x17
	0x031E8FF8 BL 0x31E7D00
	0x031E8FFC MOV W20, W22
	0x031E9000 CBNZ X0, 0x31E8FC0
	0x031E9004 BL 0x1C16F20
	0x031E9008 MOV W0, W20
	0x031E900C LDP X20, X19, [X31 + 0x20]
	0x031E9010 LDP X22, X21, [X31 + 0x10]
	0x031E9014 LDR X30, [X31], #0x30
	0x031E9018 RET
	0x031E901C BL 0x1C16F28
	0x031E9020 ADRP X0, 0xF0F000
	0x031E9024 LDR X0, [X0 + 0x528]
	0x031E9028 BL 0x1C16D08
	0x031E902C BL 0x1C16F10
	0x031E9030 MOV X19, X0
	0x031E9034 ADRP X0, 0xF37000
	0x031E9038 LDR X0, [X0 + 0xC00]
	0x031E903C BL 0x1C16D08
	0x031E9040 MOV X1, X0
	0x031E9044 MOV X0, X19
	0x031E9048 MOV X2, X31
	0x031E904C BL 0x330E100
	0x031E9050 B 0x31E9084
	0x031E9054 ADRP X0, 0xF37000
	0x031E9058 LDR X0, [X0 + 0xC08]
	0x031E905C BL 0x1C16D08
	0x031E9060 BL 0x1C16F10
	0x031E9064 MOV X19, X0
	0x031E9068 ADRP X0, 0xF37000
	0x031E906C LDR X0, [X0 + 0xC10]
	0x031E9070 BL 0x1C16D08
	0x031E9074 MOV X1, X0
	0x031E9078 MOV X0, X19
	0x031E907C MOV X2, X31
	0x031E9080 BL 0x33674A0
	0x031E9084 ADRP X0, 0xF37000
	0x031E9088 LDR X0, [X0 + 0xC18]
	0x031E908C BL 0x1C16D08
	0x031E9090 MOV X1, X0
	0x031E9094 MOV X0, X19
	0x031E9098 BL 0x1C16DEC
	0x031E909C SUB X31, X31, 0x40
	0x031E90A0 STR X30, [X31 + 0x10]
	0x031E90A4 STP X22, X21, [X31 + 0x20]
	0x031E90A8 STP X20, X19, [X31 + 0x30]
	0x031E90AC ADRP X20, 0x11F3000
	0x031E90B0 LDRB W8, [X20 + 0x16A]
	0x031E90B4 MOV X19, X0
	0x031E90B8 TBNZ X8, 0x0, 0x31E90E8
	0x031E90BC ADRP X0, 0xF0C000
	0x031E90C0 LDR X0, [X0 + 0xC48]
	0x031E90C4 BL 0x1C16CF4
	0x031E90C8 ADRP X0, 0xF0A000
	0x031E90CC LDR X0, [X0 + 0x8F0]
	0x031E90D0 BL 0x1C16CF4
	0x031E90D4 ADRP X0, 0xF13000
	0x031E90D8 LDR X0, [X0 + 0x790]
	0x031E90DC BL 0x1C16CF4
	0x031E90E0 MOVZ W8, 0x1
	0x031E90E4 STRB W8, [X20 + 0x16A]
	0x031E90E8 STRB W31, [X31 + 0x1C]
	0x031E90EC STRB W31, [X31 + 0x18]
	0x031E90F0 STR X31, [X31 + 0x8]
	0x031E90F4 CBZ X19, 0x31E92DC
	0x031E90F8 ADRP X20, 0xF0A000
	0x031E90FC LDR X20, [X20 + 0x8F0]
	0x031E9100 MOV X0, X19
	0x031E9104 BL 0x31E7D00
	0x031E9108 LDR X8, [X20]
	0x031E910C MOV X20, X0
	0x031E9110 MOV X0, X8
	0x031E9114 BL 0x1C16F10
	0x031E9118 MOV X1, X31
	0x031E911C MOV X19, X0
	0x031E9120 BL 0x3231AC4
	0x031E9124 CBZ X20, 0x31E92D8
	0x031E9128 LDR W8, [X20 + 0x18]
	0x031E912C CBZ W8, 0x31E92D4
	0x031E9130 LDRB W11, [X20 + 0x20]
	0x031E9134 MOVZ W10, 0xCCCD
	0x031E9138 MOVK W10, 0xCCCC0000
	0x031E913C ADRP X21, 0xF0C000
	0x031E9140 UMADDL X8, X11, X10, X31
	0x031E9144 UBFM X8, X8, 0x25, 0x3F
	0x031E9148 STRB W8, [X31 + 0x1C]
	0x031E914C LDRB W12, [X20 + 0x20]
	0x031E9150 LDR X21, [X21 + 0xC48]
	0x031E9154 MOVZ W9, 0x28
	0x031E9158 CMP W11, 0x78
	0x031E915C UMADDL X10, X12, X10, X31
	0x031E9160 UBFM X10, X10, 0x25, 0x3F
	0x031E9164 MSUB W10, W10, W9, W12
	0x031E9168 STRB W10, [X31 + 0x18]
	0x031E916C B.CC 0x31E9184
	0x031E9170 MADD W8, W8, W9, W10
	0x031E9174 MOVZ W9, 0x2
	0x031E9178 SUB W8, W8, 0x50
	0x031E917C STRB W8, [X31 + 0x18]
	0x031E9180 STRB W9, [X31 + 0x1C]
	0x031E9184 LDR X0, [X21]
	0x031E9188 LDR W8, [X0 + 0xE0]
	0x031E918C CBNZ W8, 0x31E9194
	0x031E9190 BL 0x1C16DFC
	0x031E9194 MOV X0, X31
	0x031E9198 BL 0x3338524
	0x031E919C MOV X1, X0
	0x031E91A0 ADD X0, X31, 0x1C
	0x031E91A4 MOV X2, X31
	0x031E91A8 BL 0x3319D00
	0x031E91AC CBZ X19, 0x31E92D8
	0x031E91B0 ADRP X22, 0xF13000
	0x031E91B4 LDR X22, [X22 + 0x790]
	0x031E91B8 MOV X1, X0
	0x031E91BC MOV X0, X19
	0x031E91C0 MOV X2, X31
	0x031E91C4 BL 0x32333E0
	0x031E91C8 LDR X1, [X22]
	0x031E91CC MOV X0, X19
	0x031E91D0 MOV X2, X31
	0x031E91D4 BL 0x32333E0
	0x031E91D8 MOV X0, X31
	0x031E91DC BL 0x3338524
	0x031E91E0 MOV X1, X0
	0x031E91E4 ADD X0, X31, 0x18
	0x031E91E8 MOV X2, X31
	0x031E91EC BL 0x3319D00
	0x031E91F0 MOV X1, X0
	0x031E91F4 MOV X0, X19
	0x031E91F8 MOV X2, X31
	0x031E91FC BL 0x32333E0
	0x031E9200 MOVZ W8, 0x1
	0x031E9204 STR X31, [X31 + 0x8]
	0x031E9208 STRB W8, [X31 + 0x1C]
	0x031E920C LDR X8, [X20 + 0x18]
	0x031E9210 CMP W8, 0x2
	0x031E9214 B.LT 0x31E92B0
	0x031E9218 MOV X10, X31
	0x031E921C MOVZ W9, 0x1
	0x031E9220 CMP W8, W9, UXTB
	0x031E9224 B.LS 0x31E92D4
	0x031E9228 ADD X12, X20, W9, UXTB
	0x031E922C LDRB W11, [X12 + 0x20]
	0x031E9230 BFM X11, X10, 0x39, 0x38
	0x031E9234 STR X11, [X31 + 0x8]
	0x00000000 INVALID
	0x031E923C TBNZ X10, 0x1F, 0x31E929C
	0x031E9240 LDR X1, [X22]
	0x031E9244 MOV X0, X19
	0x031E9248 MOV X2, X31
	0x031E924C BL 0x32333E0
	0x031E9250 LDR X0, [X21]
	0x031E9254 LDR W8, [X0 + 0xE0]
	0x031E9258 CBNZ W8, 0x31E9260
	0x031E925C BL 0x1C16DFC
	0x031E9260 MOV X0, X31
	0x031E9264 BL 0x3338524
	0x031E9268 MOV X1, X0
	0x031E926C ADD X0, X31, 0x8
	0x031E9270 MOV X2, X31
	0x031E9274 BL 0x339AA00
	0x031E9278 MOV X1, X0
	0x031E927C MOV X0, X19
	0x031E9280 MOV X2, X31
	0x031E9284 BL 0x32333E0
	0x031E9288 STR X31, [X31 + 0x8]
	0x031E928C LDRB W9, [X31 + 0x1C]
	0x031E9290 LDR X8, [X20 + 0x18]
	0x031E9294 MOV X10, X31
	0x031E9298 B 0x31E92A0
	0x031E929C MOV X10, X11
	0x031E92A0 ADD W9, W9, 0x1
	0x031E92A4 CMP W8, W9, UXTB
	0x031E92A8 STRB W9, [X31 + 0x1C]
	0x031E92AC B.GT 0x31E9220
	0x031E92B0 LDR X8, [X19]
	0x031E92B4 MOV X0, X19
	0x031E92B8 LDP X9, X1, [X8 + 0x168]
	0x031E92BC BLR X9
	0x031E92C0 LDP X20, X19, [X31 + 0x30]
	0x031E92C4 LDP X22, X21, [X31 + 0x20]
	0x031E92C8 LDR X30, [X31 + 0x10]
	0x031E92CC ADD X31, X31, 0x40
	0x031E92D0 RET
	0x031E92D4 BL 0x1C16F28
	0x031E92D8 BL 0x1C16F20
	0x031E92DC ADRP X0, 0xF0F000
	0x031E92E0 LDR X0, [X0 + 0x528]
	0x031E92E4 BL 0x1C16D08
	0x031E92E8 BL 0x1C16F10
	0x031E92EC MOV X19, X0
	0x031E92F0 ADRP X0, 0xF37000
	0x031E92F4 LDR X0, [X0 + 0xC00]
	0x031E92F8 BL 0x1C16D08
	0x031E92FC MOV X1, X0
	0x031E9300 MOV X0, X19
	0x031E9304 MOV X2, X31
	0x031E9308 BL 0x330E100
	0x031E930C ADRP X0, 0xF37000
	0x031E9310 LDR X0, [X0 + 0xC20]
	0x031E9314 BL 0x1C16D08
	0x031E9318 MOV X1, X0
	0x031E931C MOV X0, X19
	0x031E9320 BL 0x1C16DEC
	0x031E9324 SUB X31, X31, 0x50
	0x031E9328 STR X30, [X31 + 0x10]
	0x031E932C STP X24, X23, [X31 + 0x20]
	0x031E9330 STP X22, X21, [X31 + 0x30]
	0x031E9334 STP X20, X19, [X31 + 0x40]
	0x031E9338 ADRP X20, 0x11F3000
	0x031E933C LDRB W8, [X20 + 0x16B]
	0x031E9340 MOV X19, X0
	0x031E9344 TBNZ X8, 0x0, 0x31E93D4
	0x031E9348 ADRP X0, 0xF0C000
	0x031E934C LDR X0, [X0 + 0x170]
	0x031E9350 BL 0x1C16CF4
	0x031E9354 ADRP X0, 0xF13000
	0x031E9358 LDR X0, [X0 + 0x9E8]
	0x031E935C BL 0x1C16CF4
	0x031E9360 ADRP X0, 0xF0C000
	0x031E9364 LDR X0, [X0 + 0xC48]
	0x031E9368 BL 0x1C16CF4
	0x031E936C ADRP X0, 0xF0B000
	0x031E9370 LDR X0, [X0 + 0x9F0]
	0x031E9374 BL 0x1C16CF4
	0x031E9378 ADRP X0, 0xF0A000
	0x031E937C LDR X0, [X0 + 0x9D0]
	0x031E9380 BL 0x1C16CF4
	0x031E9384 ADRP X0, 0xF11000
	0x031E9388 LDR X0, [X0 + 0xFA0]
	0x031E938C BL 0x1C16CF4
	0x031E9390 ADRP X0, 0xF37000
	0x031E9394 LDR X0, [X0 + 0xC28]
	0x031E9398 BL 0x1C16CF4
	0x031E939C ADRP X0, 0xF37000
	0x031E93A0 LDR X0, [X0 + 0xC30]
	0x031E93A4 BL 0x1C16CF4
	0x031E93A8 ADRP X0, 0xF37000
	0x031E93AC LDR X0, [X0 + 0xC38]
	0x031E93B0 BL 0x1C16CF4
	0x031E93B4 ADRP X0, 0xF12000
	0x031E93B8 LDR X0, [X0 + 0x240]
	0x031E93BC BL 0x1C16CF4
	0x031E93C0 ADRP X0, 0xF37000
	0x031E93C4 LDR X0, [X0 + 0xC40]
	0x031E93C8 BL 0x1C16CF4
	0x031E93CC MOVZ W8, 0x1
	0x031E93D0 STRB W8, [X20 + 0x16B]
	0x031E93D4 CBZ X19, 0x31E9840
	0x031E93D8 MOV X0, X31
	0x031E93DC BL 0x3242EC8
	0x031E93E0 MOV X20, X0
	0x031E93E4 MOV X0, X19
	0x031E93E8 BL 0x31E7D00
	0x031E93EC CBZ X20, 0x31E9838
	0x031E93F0 LDR X8, [X20]
	0x031E93F4 MOV X1, X0
	0x031E93F8 MOV X0, X20
	0x031E93FC LDR X9, [X8 + 0x378]
	0x031E9400 LDR X2, [X8 + 0x380]
	0x031E9404 BLR X9
	0x031E9408 CBZ X0, 0x31E9838
	0x031E940C LDR W8, [X0 + 0x10]
	0x031E9410 ADRP X22, 0xF0C000
	0x031E9414 LDR X22, [X22 + 0xC48]
	0x031E9418 MOV X19, X0
	0x031E941C SUB W8, W8, 0xB
	0x031E9420 MOV X20, X31
	0x031E9424 CMP W8, 0x6
	0x031E9428 B.HI 0x31E97D0
	0x031E942C ADRP X9, 0xFFFFFFFFFD9AD000
	0x031E9430 ADD X9, X9, 0x412
	0x031E9434 ADR X10, 0x10
	0x031E9438 LDRB W11, [X9, X8, LSL]
	0x031E943C ADD X10, X10, X11, 0x2, LSL
	0x031E9440 BR X10
	0x031E9444 ADRP X8, 0xF37000
	0x031E9448 LDR X8, [X8 + 0xC40]
	0x031E944C B 0x31E94F4
	0x031E9450 MOVZ W2, 0x2
	0x031E9454 MOV X0, X19
	0x031E9458 MOV W1, W31
	0x031E945C MOV X3, X31
	0x031E9460 BL 0x3228DE4
	0x031E9464 LDR X8, [X22]
	0x031E9468 MOV X20, X0
	0x031E946C LDR W9, [X8 + 0xE0]
	0x031E9470 CBNZ W9, 0x31E947C
	0x031E9474 MOV X0, X8
	0x031E9478 BL 0x1C16DFC
	0x031E947C MOV X0, X31
	0x031E9480 BL 0x3338524
	0x031E9484 ADRP X8, 0xF13000
	0x031E9488 LDR X8, [X8 + 0x9E8]
	0x031E948C MOV X21, X0
	0x031E9490 LDR X8, [X8]
	0x031E9494 LDR W9, [X8 + 0xE0]
	0x031E9498 CBNZ W9, 0x31E94A4
	0x031E949C MOV X0, X8
	0x031E94A0 BL 0x1C16DFC
	0x031E94A4 MOV X0, X20
	0x031E94A8 MOV X1, X21
	0x031E94AC MOV X2, X31
	0x031E94B0 BL 0x331FC30
	0x031E94B4 ADRP X9, 0xF11000
	0x031E94B8 ADRP X10, 0xF12000
	0x031E94BC LDR X9, [X9 + 0xFA0]
	0x031E94C0 LDR X10, [X10 + 0x240]
	0x031E94C4 SXTH W8, W0
	0x031E94C8 CMP W8, 0x32
	0x031E94CC MOV X1, X19
	0x031E94D0 CSEL X8, X9, X10, LT
	0x031E94D4 LDR X0, [X8]
	0x031E94D8 MOV X2, X31
	0x031E94DC BL 0x321B938
	0x031E94E0 ADRP X8, 0xF37000
	0x031E94E4 LDR X8, [X8 + 0xC38]
	0x031E94E8 B 0x31E97C8
	0x031E94EC ADRP X8, 0xF37000
	0x031E94F0 LDR X8, [X8 + 0xC38]
	0x031E94F4 LDR X20, [X8]
	0x031E94F8 B 0x31E97D0
	0x031E94FC MOVZ W2, 0x2
	0x031E9500 MOV X0, X19
	0x031E9504 MOV W1, W31
	0x031E9508 MOV X3, X31
	0x031E950C BL 0x3228DE4
	0x031E9510 LDR X8, [X22]
	0x031E9514 MOV X20, X0
	0x031E9518 LDR W9, [X8 + 0xE0]
	0x031E951C CBNZ W9, 0x31E9528
	0x031E9520 MOV X0, X8
	0x031E9524 BL 0x1C16DFC
	0x031E9528 MOV X0, X31
	0x031E952C BL 0x3338524
	0x031E9530 ADRP X8, 0xF13000
	0x031E9534 LDR X8, [X8 + 0x9E8]
	0x031E9538 MOV X21, X0
	0x031E953C LDR X8, [X8]
	0x031E9540 LDR W9, [X8 + 0xE0]
	0x031E9544 CBNZ W9, 0x31E9550
	0x031E9548 MOV X0, X8
	0x031E954C BL 0x1C16DFC
	0x031E9550 MOV X0, X20
	0x031E9554 MOV X1, X21
	0x031E9558 MOV X2, X31
	0x031E955C BL 0x331FC30
	0x031E9560 ADRP X9, 0xF12000
	0x031E9564 ADRP X10, 0xF11000
	0x031E9568 LDR X9, [X9 + 0x240]
	0x031E956C LDR X10, [X10 + 0xFA0]
	0x031E9570 SXTH W8, W0
	0x031E9574 CMP W8, 0x31
	0x031E9578 MOVZ W1, 0xC
	0x031E957C CSEL X8, X9, X10, GT
	0x031E9580 LDR X21, [X8]
	0x031E9584 MOV X0, X19
	0x031E9588 MOV X2, X31
	0x031E958C BL 0x3222A1C
	0x031E9590 ADRP X9, 0xF0A000
	0x031E9594 LDR X9, [X9 + 0x9D0]
	0x031E9598 AND W8, W0, 0xFFFF
	0x031E959C CMP W8, 0x2B
	0x031E95A0 MOVZ W8, 0x2B
	0x031E95A4 LDR X0, [X9]
	0x031E95A8 MOVZ W9, 0x2D
	0x031E95AC MOVZ W1, 0x7
	0x031E95B0 CSEL W24, W9, W8, EQ
	0x031E95B4 BL 0x1C16D6C
	0x031E95B8 CBZ X0, 0x31E9838
	0x031E95BC MOV X20, X0
	0x031E95C0 CBZ X21, 0x31E95D8
	0x031E95C4 LDR X8, [X20]
	0x031E95C8 MOV X0, X21
	0x031E95CC LDR X1, [X8 + 0x40]
	0x031E95D0 BL 0x1C16E00
	0x031E95D4 CBZ X0, 0x31E9888
	0x031E95D8 LDR W8, [X20 + 0x18]
	0x031E95DC CBZ W8, 0x31E983C

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x11F5000
	012 Move W8, [X20+353]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0xF39000
	019 Move X0, [X0+2968]
	020 Call 0x1C17CF4
	021 Move X0, 0xF39000
	022 Move X0, [X0+2976]
	023 Call 0x1C17CF4
	024 Move X0, 0xF0C000
	025 Move X0, [X0+1560]
	026 Call 0x1C17CF4
	027 Move X0, 0xF0C000
	028 Move X0, [X0+3584]
	029 Call 0x1C17CF4
	030 Move X0, 0xF0C000
	031 Move X0, [X0+3608]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+353], W8
	035 Move X0, [X19+32]
	036 Compare X0, 0
	037 JumpIfEqual {139}
	038 Move X8, [X0]
	039 Move X9, [X8+664]
	040 Move X1, [X8+672]
	041 NotImplemented "Instruction BLR not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X8, 0xF39000
	044 Move X8, [X8+2976]
	045 Move X0, [X8]
	046 Call 0x1C17F10
	047 Move X1, X31
	048 Move X20, X0
	049 Call ArrayList..ctor, X0
	050 Move X0, [X19+32]
	051 Compare X0, 0
	052 JumpIfEqual {301}
	053 Move X8, [X0]
	054 Move X9, [X8+904]
	055 Move X1, [X8+912]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move X22, X0
	058 Compare X0, 0
	059 JumpIfEqual {383}
	060 Move X24, 0xF0B000
	061 Move X25, 0xF38000
	062 Move X24, [X24+3608]
	063 Move X25, [X25+2968]
	064 Move W21, W31
	065 Move X8, [X22]
	066 Move X1, [X24]
	067 NotImplemented "Instruction LDRH not yet implemented."
	068 Compare X9, 0
	069 JumpIfEqual {76}
	070 Move X10, [X8+176]
	071 Add X10, X10, 8
	072 NotImplemented "Instruction LDUR not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Subtract X9, X9, 1
	075 Add X10, X10, 16
	076 Move X0, X22
	077 Move W2, W31
	078 Call 0x1C5D788
	079 NotImplemented "Instruction LDRSW not yet implemented."
	080 Add X8, X8, X9
	081 Add X0, X8, 312
	082 Move X8, [X0]
	083 Move X1, [X0+8]
	084 Move X0, X22
	085 NotImplemented "Instruction BLR not yet implemented."
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {157}
	090 Move X8, [X22]
	091 Move X1, [X24]
	092 NotImplemented "Instruction LDRH not yet implemented."
	093 Compare X9, 0
	094 JumpIfEqual {101}
	095 Move X10, [X8+176]
	096 Add X10, X10, 8
	097 NotImplemented "Instruction LDUR not yet implemented."
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Subtract X9, X9, 1
	100 Add X10, X10, 16
	101 Move W2, 1
	102 Move X0, X22
	103 Call 0x1C5D788
	104 Move W9, [X10]
	105 Add W9, W9, 1
	106 Add X8, X8, W9
	107 Add X0, X8, 312
	108 Move X8, [X0]
	109 Move X1, [X0+8]
	110 Move X0, X22
	111 NotImplemented "Instruction BLR not yet implemented."
	112 Compare X0, 0
	113 JumpIfEqual {377}
	114 Move X8, [X0]
	115 Move X1, [X25]
	116 Move W10, [X8+304]
	117 Move W9, [X1+304]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move X10, [X8+200]
	120 Add X9, X10, X9
	121 NotImplemented "Instruction LDUR not yet implemented."
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move X9, [X8+376]
	124 Move X1, [X8+384]
	125 NotImplemented "Instruction BLR not yet implemented."
	126 Compare X20, 0
	127 JumpIfEqual {378}
	128 Move X8, [X20]
	129 Move X23, X0
	130 Move X9, [X8+776]
	131 Move X2, [X8+784]
	132 Move X0, X20
	133 Move X1, X23
	134 NotImplemented "Instruction BLR not yet implemented."
	135 Compare X23, 0
	136 JumpIfEqual {376}
	137 Move W8, [X23+24]
	138 Add W21, W21, W8
	139 Move X21, [X19+24]
	140 Compare X21, 0
	141 JumpIfEqual {181}
	142 Move X20, [X21+24]
	143 Move X8, 0xF0B000
	144 Move X8, [X8+1560]
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move X0, [X8]
	147 Add W1, W20, 2
	148 Call 0x1C17D6C
	149 Move X22, X0
	150 Move W3, 2
	151 Move X0, X21
	152 Move W1, W31
	153 Move X2, X22
	154 Move W4, W20
	155 Move X5, X31
	156 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	157 Move X23, X31
	158 Move W24, 5
	159 Move X25, 0xF0B000
	160 Move X25, [X25+3584]
	161 Move X0, X22
	162 Move X1, [X25]
	163 Call 0x1C17E00
	164 Compare X0, 0
	165 JumpIfEqual {250}
	166 Move X8, [X0]
	167 Move X1, [X25]
	168 Move X22, X0
	169 NotImplemented "Instruction LDRH not yet implemented."
	170 Compare X9, 0
	171 JumpIfEqual {178}
	172 Move X10, [X8+176]
	173 Add X10, X10, 8
	174 NotImplemented "Instruction LDUR not yet implemented."
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Subtract X9, X9, 1
	177 Add X10, X10, 16
	178 Move X0, X22
	179 Move W2, W31
	180 Call 0x1C5D788
	181 Move X8, 0xF0B000
	182 Move X8, [X8+1560]
	183 Move W1, 2
	184 Move X0, [X8]
	185 Call 0x1C17D6C
	186 Move X22, X0
	187 Move W20, W31
	188 NotImplemented "Instruction CMP not yet implemented."
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move X0, [X8]
	191 Move TEMP, 0xFF000000
	192 Not TEMP
	193 Move W8, TEMP
	194 NotImplemented "Instruction CMP not yet implemented."
	195 Add W1, W20, 6
	196 Call 0x1C17D6C
	197 Move X22, X0
	198 Move W3, 6
	199 Move X0, X21
	200 Move W1, W31
	201 Move X2, X22
	202 Move W4, W20
	203 Move X5, X31
	204 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	205 Compare X22, 0
	206 JumpIfEqual {301}
	207 Move W8, [X22+24]
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Move X9, X20
	210 ShiftRight X9, 24
	211 And X9, X9, 0x7FFFFFFF
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move [X22+34], W9
	214 Move X9, X20
	215 ShiftRight X9, 16
	216 And X9, X9, 0x7FFFFFFF
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Move [X22+35], W9
	219 Move X9, X20
	220 ShiftRight X9, 8
	221 And X9, X9, 0x7FFFFFFF
	222 NotImplemented "Instruction CMP not yet implemented."
	223 Move [X22+36], W9
	224 Move [X22+37], W20
	225 Move W20, 132
	226 Move X0, [X8]
	227 Add W1, W20, 3
	228 Call 0x1C17D6C
	229 Move X22, X0
	230 Move W3, 3
	231 Move X0, X21
	232 Move W1, W31
	233 Move X2, X22
	234 Move W4, W20
	235 Move X5, X31
	236 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	237 Compare X22, 0
	238 JumpIfEqual {301}
	239 Move W8, [X22+24]
	240 NotImplemented "Instruction CMP not yet implemented."
	241 Move [X22+34], W20
	242 Move W20, 129
	243 NotImplemented "Instruction LDRSW not yet implemented."
	244 Add X8, X8, X9
	245 Add X0, X8, 312
	246 Move X8, [X0]
	247 Move X1, [X0+8]
	248 Move X0, X22
	249 NotImplemented "Instruction BLR not yet implemented."
	250 Compare X23, 0
	251 JumpIfNotEqual {384}
	252 NotImplemented "Instruction CMP not yet implemented."
	253 Compare W24, 0
	254 JumpIfNotEqual {363}
	255 Move X27, 0xF0B000
	256 Move X27, [X27+1560]
	257 Move W1, W21
	258 Move X0, [X27]
	259 Call 0x1C17D6C
	260 Move X8, [X19+32]
	261 Compare X8, 0
	262 JumpIfEqual {301}
	263 Move X21, X0
	264 Move W22, W31
	265 Move W23, W31
	266 Move X9, [X8]
	267 Move X0, X8
	268 Move X10, [X9+664]
	269 Move X1, [X9+672]
	270 NotImplemented "Instruction BLR not yet implemented."
	271 NotImplemented "Instruction CMP not yet implemented."
	272 Compare X20, 0
	273 JumpIfEqual {301}
	274 Move X8, [X20]
	275 Move X0, X20
	276 Move W1, W23
	277 Move X9, [X8+744]
	278 Move X2, [X8+752]
	279 NotImplemented "Instruction BLR not yet implemented."
	280 Compare X0, 0
	281 JumpIfEqual {301}
	282 Move X26, [X27]
	283 Move X24, X0
	284 Move X1, X26
	285 Call 0x1C17E00
	286 Compare X0, 0
	287 JumpIfEqual {379}
	288 Move W4, [X0+24]
	289 Move W1, W31
	290 Move X2, X21
	291 Move W3, W22
	292 Move X5, X31
	293 Move X25, X0
	294 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	295 Move W9, [X25+24]
	296 Move X8, [X19+32]
	297 Add W23, W23, 1
	298 Add W22, W22, W9
	299 Compare X8, 0
	300 JumpIfNotEqual {266}
	301 Call 0x1C17F20
	302 Move X0, [X8]
	303 Add W1, W20, 4
	304 Call 0x1C17D6C
	305 Move X22, X0
	306 Move W3, 4
	307 Move X0, X21
	308 Move W1, W31
	309 Move X2, X22
	310 Move W4, W20
	311 Move X5, X31
	312 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	313 Compare X22, 0
	314 JumpIfEqual {301}
	315 Move W8, [X22+24]
	316 NotImplemented "Instruction CMP not yet implemented."
	317 Move X9, X20
	318 ShiftRight X9, 8
	319 And X9, X9, 0x7FFFFFFF
	320 NotImplemented "Instruction CMP not yet implemented."
	321 Move [X22+34], W9
	322 Move [X22+35], W20
	323 Move W20, 130
	324 Add W1, W20, 5
	325 Call 0x1C17D6C
	326 Move X22, X0
	327 Move W3, 5
	328 Move X0, X21
	329 Move W1, W31
	330 Move X2, X22
	331 Move W4, W20
	332 Move X5, X31
	333 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	334 Compare X22, 0
	335 JumpIfEqual {301}
	336 Move W8, [X22+24]
	337 NotImplemented "Instruction CMP not yet implemented."
	338 Move X9, X20
	339 ShiftRight X9, 16
	340 And X9, X9, 0x7FFFFFFF
	341 NotImplemented "Instruction CMP not yet implemented."
	342 Move [X22+34], W9
	343 Move X9, X20
	344 ShiftRight X9, 8
	345 And X9, X9, 0x7FFFFFFF
	346 NotImplemented "Instruction CMP not yet implemented."
	347 Move [X22+35], W9
	348 Move [X22+36], W20
	349 Move W20, 131
	350 Move X8, [X19+24]
	351 Compare X8, 0
	352 JumpIfNotEqual {354}
	353 Move [X19+24], X21
	354 Compare X22, 0
	355 JumpIfEqual {301}
	356 Move W8, [X22+24]
	357 Compare W8, 0
	358 JumpIfEqual {382}
	359 Move W9, [X19+16]
	360 NotImplemented "Instruction CMP not yet implemented."
	361 Move [X22+32], W9
	362 Move [X22+33], W20
	363 Move X0, X22
	364 Move X20, [X31+64]
	365 Move X19, [X31+72]
	366 Move X22, [X31+48]
	367 Move X21, [X31+56]
	368 Move X24, [X31+32]
	369 Move X23, [X31+40]
	370 Move X26, [X31+16]
	371 Move X25, [X31+24]
	372 Move X30, [X31+80]
	373 Move X27, [X31+88]
	374 Return X0
	375 Call 0x1C181E0
	376 Call 0x1C17F20
	377 Call 0x1C17F20
	378 Call 0x1C17F20
	379 Move X0, X24
	380 Move X1, X26
	381 Call 0x1C181E0
	382 Call 0x1C17F28
	383 Call 0x1C17F20
	384 Move X0, X23
	385 Call 0x1C17F18
	386 Move X24, X0
	387 Move W21, W31
	388 Move X24, X0
	389 NotImplemented "Instruction CMP not yet implemented."
	390 Move X0, X24
	391 Call 0x3EB2AD0
	392 Move X23, [X0]
	393 Call 0x3EB2AE0
	394 Move W24, W31
	395 Move X23, X31
	396 Move X24, X0
	397 Move X20, 0xF0B000
	398 Move X20, [X20+3584]
	399 Move X1, [X20]
	400 Move X0, X22
	401 Call 0x1C17E00
	402 Move X19, X0
	403 Compare X0, 0
	404 JumpIfEqual {426}
	405 Move X8, [X19]
	406 Move X1, [X20]
	407 NotImplemented "Instruction LDRH not yet implemented."
	408 Compare X9, 0
	409 JumpIfEqual {416}
	410 Move X10, [X8+176]
	411 Add X10, X10, 8
	412 NotImplemented "Instruction LDUR not yet implemented."
	413 NotImplemented "Instruction CMP not yet implemented."
	414 Subtract X9, X9, 1
	415 Add X10, X10, 16
	416 Move X0, X19
	417 Move W2, W31
	418 Call 0x1C5D788
	419 NotImplemented "Instruction LDRSW not yet implemented."
	420 Add X8, X8, X9
	421 Add X0, X8, 312
	422 Move X8, [X0]
	423 Move X1, [X0+8]
	424 Move X0, X19
	425 NotImplemented "Instruction BLR not yet implemented."
	426 Compare X23, 0
	427 JumpIfNotEqual {430}
	428 Move X0, X24
	429 Call 0x1D2D690
	430 Move X0, X23
	431 Call 0x1C17F18
	432 Call 0x1991590

Method: System.Void Decode(System.Byte[] asn1, ref System.Int32 anPos, System.Int32 anLength)

Disassembly:
	0x031E8BA8 LDR W8, [X0 + 0xE0]
	0x031E8BAC CBNZ W8, 0x31E8BB4
	0x031E8BB0 BL 0x1C16DFC
	0x031E8BB4 LDR X8, [X22 + 0x38]
	0x031E8BB8 LDR X0, [X8 + 0x10]
	0x031E8BBC LDRB W8, [X0 + 0x135]
	0x031E8BC0 TBNZ X8, 0x0, 0x31E8BC8
	0x031E8BC4 BL 0x1C5C684
	0x031E8BC8 LDR X8, [X0 + 0xB8]
	0x031E8BCC MOV X0, X20
	0x031E8BD0 MOV X1, X21
	0x031E8BD4 MOV X3, X31
	0x031E8BD8 LDR X2, [X8]
	0x031E8BDC BL 0x3234E54
	0x031E8BE0 MOV X0, X19
	0x031E8BE4 BL 0x31E7D00
	0x031E8BE8 CBNZ X0, 0x31E8B1C
	0x031E8BEC BL 0x1C16F20
	0x031E8BF0 LDR X8, [X20]
	0x031E8BF4 MOV X0, X20
	0x031E8BF8 LDP X9, X1, [X8 + 0x168]
	0x031E8BFC BLR X9
	0x031E8C00 LDP X20, X19, [X31 + 0x40]
	0x031E8C04 LDP X22, X21, [X31 + 0x30]
	0x031E8C08 LDP X24, X23, [X31 + 0x20]
	0x031E8C0C LDP X26, X25, [X31 + 0x10]
	0x031E8C10 LDR X30, [X31], #0x50
	0x031E8C14 RET
	0x031E8C18 BL 0x1C16F28
	0x031E8C1C STR X30, [X31 - 0x30]!
	0x031E8C20 STP X22, X21, [X31 + 0x10]
	0x031E8C24 STP X20, X19, [X31 + 0x20]
	0x031E8C28 ADRP X21, 0x11F4000
	0x031E8C2C ADRP X20, 0xF38000
	0x031E8C30 LDRB W8, [X21 + 0x167]
	0x031E8C34 LDR X20, [X20 + 0xBD0]
	0x031E8C38 MOV W19, W0
	0x031E8C3C TBNZ X8, 0x0, 0x31E8C6C
	0x031E8C40 ADRP X0, 0xF38000
	0x031E8C44 LDR X0, [X0 + 0xB98]
	0x031E8C48 BL 0x1C16CF4
	0x031E8C4C ADRP X0, 0xF38000
	0x031E8C50 LDR X0, [X0 + 0xBD0]
	0x031E8C54 BL 0x1C16CF4
	0x031E8C58 ADRP X0, 0xF0B000
	0x031E8C5C LDR X0, [X0 + 0x618]
	0x031E8C60 BL 0x1C16CF4
	0x031E8C64 MOVZ W8, 0x1
	0x031E8C68 STRB W8, [X21 + 0x167]
	0x031E8C6C ADD X0, X31, 0xC
	0x031E8C70 STR W19, [X31 + 0xC]
	0x031E8C74 BL 0x31E9894
	0x031E8C78 LDR X1, [X20]
	0x031E8C7C MOV X19, X0
	0x031E8C80 BL 0x21465E8
	0x031E8C84 CBZ X19, 0x31E8D84
	0x031E8C88 LDR W8, [X19 + 0x18]
	0x031E8C8C CMP W8, 0x1
	0x031E8C90 BIC W20, W8, W8, 0x1F
	0x031E8C94 B.LT 0x31E8CC4
	0x031E8C98 MOV W9, W31
	0x031E8C9C CMP W8, W9
	0x031E8CA0 B.EQ 0x31E8D80
	0x031E8CA4 ADD X10, X19, W9, SXTW
	0x031E8CA8 LDRB W10, [X10 + 0x20]
	0x031E8CAC CBNZ W10, 0x31E8CC0
	0x031E8CB0 ADD W9, W9, 0x1
	0x031E8CB4 CMP W20, W9
	0x031E8CB8 B.NE 0x31E8C9C
	0x031E8CBC B 0x31E8CC4
	0x031E8CC0 MOV W20, W9

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X23, 0x11F5000
	012 Move W8, [X23+354]
	013 Move W22, W3
	014 Move X19, X2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xF39000
	022 Move X0, [X0+2968]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+354], W8
	026 Move [X31+28], W31
	027 Move [X31+24], W31
	028 Move [X31+8], X31
	029 Move W8, [X19]
	030 Subtract W23, W22, 1
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X24, 0xF39000
	033 Move X24, [X24+2968]
	034 Add X3, X31, 28
	035 Add X4, X31, 24
	036 Add X5, X31, 8
	037 Move X1, X20
	038 Move X2, X19
	039 Call ASN1.DecodeTLV, X0, X1, X2, X3, X4, X5
	040 Move W25, [X31+28]
	041 Compare W25, 0
	042 JumpIfEqual {59}
	043 Move X0, [X24]
	044 Move X26, [X31+8]
	045 Call 0x1C17F10
	046 Move X1, X31
	047 Move X22, X0
	048 Call Object..ctor, X0
	049 Move X0, X21
	050 Move X1, X22
	051 Move [X22+16], W25
	052 Move [X22+24], X26
	053 Call ASN1.Add, X0, X1
	054 Move TEMP, X25
	055 And TEMP, TEMP, 32
	056 Compare TEMP, 32
	057 JumpIfEqual {60}
	058 Move W25, [X31+24]
	059 Move W8, [X19]
	060 Move W8, [X19]
	061 Move W25, [X31+24]
	062 Add X2, X31, 4
	063 Move X0, X22
	064 Move X1, X20
	065 Add W3, W25, W8
	066 Move [X31+4], W8
	067 Call ASN1.Decode, X0, X1, X2, X3
	068 Move W8, [X19]
	069 Add W8, W25, W8
	070 Move [X19], W8
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X20, [X31+80]
	073 Move X19, [X31+88]
	074 Move X22, [X31+64]
	075 Move X21, [X31+72]
	076 Move X24, [X31+48]
	077 Move X23, [X31+56]
	078 Move X26, [X31+32]
	079 Move X25, [X31+40]
	080 Move X30, [X31+16]
	081 Add X31, X31, 96
	082 Return 

Method: System.Void DecodeTLV(System.Byte[] asn1, ref System.Int32 pos, out System.Byte tag, out System.Int32 length, out System.Byte[] content)

Disassembly:
	0x031E95E0 MOVZ W2, 0xC
	0x031E95E4 MOV X0, X19
	0x031E95E8 MOV W1, W31
	0x031E95EC MOV X3, X31
	0x031E95F0 STR X21, [X20 + 0x20]
	0x031E95F4 BL 0x3228DE4
	0x031E95F8 MOV X21, X0
	0x031E95FC CBZ X0, 0x31E9614
	0x031E9600 LDR X8, [X20]
	0x031E9604 MOV X0, X21
	0x031E9608 LDR X1, [X8 + 0x40]
	0x031E960C BL 0x1C16E00
	0x031E9610 CBZ X0, 0x31E9888
	0x031E9614 LDR W8, [X20 + 0x18]
	0x031E9618 CMP W8, 0x1
	0x031E961C B.LS 0x31E983C
	0x031E9620 STR X21, [X20 + 0x28]
	0x031E9624 ADRP X23, 0xF0C000
	0x031E9628 LDR X23, [X23 + 0x170]
	0x031E962C ADD X1, X31, 0x1C
	0x031E9630 STRH W24, [X31 + 0x1C]
	0x031E9634 LDR X0, [X23]
	0x031E9638 BL 0x1C16E04
	0x031E963C MOV X21, X0
	0x031E9640 CBZ X0, 0x31E9658
	0x031E9644 LDR X8, [X20]
	0x031E9648 MOV X0, X21
	0x031E964C LDR X1, [X8 + 0x40]
	0x031E9650 BL 0x1C16E00
	0x031E9654 CBZ X0, 0x31E9888
	0x031E9658 LDR W8, [X20 + 0x18]
	0x031E965C CMP W8, 0x2
	0x031E9660 B.LS 0x31E983C
	0x031E9664 MOVZ W1, 0xD
	0x031E9668 MOV X0, X19
	0x031E966C MOV X2, X31
	0x031E9670 STR X21, [X20 + 0x30]
	0x031E9674 BL 0x3222A1C
	0x031E9678 LDR X8, [X23]
	0x031E967C STRH W0, [X31 + 0x18]
	0x031E9680 ADD X1, X31, 0x18
	0x031E9684 MOV X0, X8
	0x031E9688 BL 0x1C16E04
	0x031E968C MOV X21, X0
	0x031E9690 CBZ X0, 0x31E96A8
	0x031E9694 LDR X8, [X20]
	0x031E9698 MOV X0, X21
	0x031E969C LDR X1, [X8 + 0x40]
	0x031E96A0 BL 0x1C16E00
	0x031E96A4 CBZ X0, 0x31E9888
	0x031E96A8 LDR W8, [X20 + 0x18]
	0x031E96AC CMP W8, 0x3
	0x031E96B0 B.LS 0x31E983C
	0x031E96B4 MOVZ W1, 0xE
	0x031E96B8 MOV X0, X19
	0x031E96BC MOV X2, X31
	0x031E96C0 STR X21, [X20 + 0x38]
	0x031E96C4 BL 0x3222A1C
	0x031E96C8 LDR X8, [X23]
	0x031E96CC STRH W0, [X31 + 0xC]
	0x031E96D0 ADD X1, X31, 0xC
	0x031E96D4 MOV X0, X8
	0x031E96D8 BL 0x1C16E04
	0x031E96DC MOV X21, X0
	0x031E96E0 CBZ X0, 0x31E96F8
	0x031E96E4 LDR X8, [X20]
	0x031E96E8 MOV X0, X21
	0x031E96EC LDR X1, [X8 + 0x40]
	0x031E96F0 BL 0x1C16E00
	0x031E96F4 CBZ X0, 0x31E9888
	0x031E96F8 LDR W8, [X20 + 0x18]
	0x031E96FC CMP W8, 0x4
	0x031E9700 B.LS 0x31E983C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x11F4000
	009 Move W8, [X24+355]
	010 Move X20, X5
	011 Move X19, X4
	012 Move X23, X3
	013 Move X22, X2
	014 Move X21, X1
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF0B000
	020 Move X0, [X0+1560]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X24+355], W8
	024 NotImplemented "Instruction LDRSW not yet implemented."
	025 Add W9, W8, 1
	026 Move [X22], W9
	027 Compare X21, 0
	028 JumpIfEqual {81}
	029 Move W9, [X21+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Add X8, X21, X8
	032 Move W8, [X8+32]
	033 Move [X23], W8
	034 NotImplemented "Instruction LDRSW not yet implemented."
	035 Add W8, W9, 1
	036 Move [X22], W8
	037 Move W8, [X21+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Add X9, X21, X9
	040 Move W1, [X9+32]
	041 Move [X19], W1
	042 Move TEMP, X1
	043 And TEMP, TEMP, 128
	044 Compare TEMP, 128
	045 JumpIfNotEqual {60}
	046 And W9, W1, 127
	047 Move [X19], W31
	048 Move W10, W31
	049 NotImplemented "Instruction LDRSW not yet implemented."
	050 Add W12, W11, 1
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move [X22], W12
	053 Add X11, X21, X11
	054 Move W1, [X11+32]
	055 Subtract W9, W9, 1
	056 NotImplemented "Instruction BFM not yet implemented."
	057 Move W10, W1
	058 Move [X19], W1
	059 Move W1, W31
	060 Move X8, 0xF0B000
	061 Move X8, [X8+1560]
	062 Move X0, [X8]
	063 Call 0x1C17D6C
	064 Move [X20], X0
	065 Move X2, X0
	066 Move W1, [X22]
	067 Move W4, [X19]
	068 Move X0, X21
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X24, [X31+16]
	074 Move X23, [X31+24]
	075 Move W3, W31
	076 Move X5, X31
	077 Move X30, [X31+64]
	078 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	079 Return 
	080 Call 0x1C17F28
	081 Call 0x1C17F20

Method: Mono.Security.ASN1 get_Item(System.Int32 index)

Disassembly:
	0x031E9704 MOVZ W1, 0xF
	0x031E9708 MOV X0, X19
	0x031E970C MOV X2, X31
	0x031E9710 STR X21, [X20 + 0x40]
	0x031E9714 BL 0x3222A1C
	0x031E9718 LDR X8, [X23]
	0x031E971C STRH W0, [X31 + 0x8]
	0x031E9720 ADD X1, X31, 0x8
	0x031E9724 MOV X0, X8
	0x031E9728 BL 0x1C16E04
	0x031E972C MOV X21, X0
	0x031E9730 CBZ X0, 0x31E9748
	0x031E9734 LDR X8, [X20]
	0x031E9738 MOV X0, X21
	0x031E973C LDR X1, [X8 + 0x40]
	0x031E9740 BL 0x1C16E00
	0x031E9744 CBZ X0, 0x31E9888
	0x031E9748 LDR W8, [X20 + 0x18]
	0x031E974C CMP W8, 0x5
	0x031E9750 B.LS 0x31E983C
	0x031E9754 MOVZ W1, 0x10
	0x031E9758 MOV X0, X19
	0x031E975C MOV X2, X31
	0x031E9760 STR X21, [X20 + 0x48]
	0x031E9764 BL 0x3222A1C
	0x031E9768 LDR X8, [X23]
	0x031E976C STRH W0, [X31 + 0x4]
	0x031E9770 ADD X1, X31, 0x4
	0x031E9774 MOV X0, X8
	0x031E9778 BL 0x1C16E04
	0x031E977C MOV X19, X0
	0x031E9780 CBZ X0, 0x31E9798
	0x031E9784 LDR X8, [X20]
	0x031E9788 MOV X0, X19
	0x031E978C LDR X1, [X8 + 0x40]
	0x031E9790 BL 0x1C16E00
	0x031E9794 CBZ X0, 0x31E9888
	0x031E9798 LDR W8, [X20 + 0x18]
	0x031E979C CMP W8, 0x6
	0x031E97A0 B.LS 0x31E983C
	0x031E97A4 STR X19, [X20 + 0x50]
	0x031E97A8 ADRP X8, 0xF37000
	0x031E97AC LDR X8, [X8 + 0xC30]
	0x031E97B0 MOV X1, X20
	0x031E97B4 MOV X2, X31
	0x031E97B8 LDR X0, [X8]
	0x031E97BC BL 0x3227C5C
	0x031E97C0 ADRP X8, 0xF37000
	0x031E97C4 LDR X8, [X8 + 0xC28]
	0x031E97C8 LDR X20, [X8]
	0x031E97CC MOV X19, X0
	0x031E97D0 LDR X0, [X22]
	0x031E97D4 ADRP X21, 0xF0B000
	0x031E97D8 LDR W8, [X0 + 0xE0]
	0x031E97DC LDR X21, [X21 + 0x9F0]
	0x031E97E0 CBNZ W8, 0x31E97E8
	0x031E97E4 BL 0x1C16DFC
	0x031E97E8 MOV X0, X31
	0x031E97EC BL 0x3338524
	0x031E97F0 LDR X8, [X21]
	0x031E97F4 MOV X21, X0
	0x031E97F8 LDR W9, [X8 + 0xE0]
	0x031E97FC CBNZ W9, 0x31E9808
	0x031E9800 MOV X0, X8
	0x031E9804 BL 0x1C16DFC
	0x031E9808 MOVZ W3, 0x10
	0x031E980C MOV X0, X19
	0x031E9810 MOV X1, X20
	0x031E9814 MOV X2, X21
	0x031E9818 MOV X4, X31
	0x031E981C BL 0x3361CB8
	0x031E9820 LDP X20, X19, [X31 + 0x40]
	0x031E9824 LDP X22, X21, [X31 + 0x30]
	0x031E9828 LDP X24, X23, [X31 + 0x20]
	0x031E982C LDR X30, [X31 + 0x10]
	0x031E9830 ADD X31, X31, 0x50

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11F4000
	006 Move W8, [X21+356]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF38000
	014 Move X0, [X0+2968]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+356], W8
	018 Move X0, [X20+32]
	019 Compare X0, 0
	020 JumpIfEqual {66}
	021 Move X8, [X0]
	022 Move X1, [X8+672]
	023 Move X9, [X8+664]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X0, [X20+32]
	027 Compare X0, 0
	028 JumpIfEqual {48}
	029 Move X8, [X0]
	030 Move X9, [X8+744]
	031 Move X2, [X8+752]
	032 Move W1, W19
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Compare X0, 0
	035 JumpIfEqual {66}
	036 Move X9, 0xF38000
	037 Move X9, [X9+2968]
	038 Move X8, [X0]
	039 Move X1, [X9]
	040 Move W10, [X8+304]
	041 Move W9, [X1+304]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X8, [X8+200]
	044 Add X8, X8, X9
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Call 0x1C181E0
	048 Call 0x1C17F20
	049 Move X19, X0
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X0, X19
	052 Call 0x3EB2AD0
	053 Move X19, X0
	054 Move X0, 0xF13000
	055 Move X0, [X0+1888]
	056 Call 0x1C17D08
	057 Move X8, [X19]
	058 Move X1, [X8]
	059 Call 0x1C18270
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {71}
	064 Call 0x3EB2AE0
	065 Move X0, X31
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move X30, [X31+32]
	069 Move X21, [X31+40]
	070 Return X0
	071 Move W0, 8
	072 Call 0x3EB2AF0
	073 Move X8, [X19]
	074 Move [X0], X8
	075 Move X1, 0xCCC000
	076 Add X1, X1, 3672
	077 Move X2, X31
	078 Call 0x3EB2B00
	079 Move X19, X0
	080 Call 0x3EB2AE0
	081 Move X0, X19
	082 Call 0x1D2D690
	083 Call 0x1991590

Method: Mono.Security.ASN1 Element(System.Int32 index, System.Byte anTag)

Disassembly:
	0x031E9834 RET
	0x031E9838 BL 0x1C16F20
	0x031E983C BL 0x1C16F28
	0x031E9840 ADRP X0, 0xF0F000
	0x031E9844 LDR X0, [X0 + 0x528]
	0x031E9848 BL 0x1C16D08
	0x031E984C BL 0x1C16F10
	0x031E9850 MOV X19, X0
	0x031E9854 ADRP X0, 0xF37000
	0x031E9858 LDR X0, [X0 + 0x18]
	0x031E985C BL 0x1C16D08
	0x031E9860 MOV X1, X0
	0x031E9864 MOV X0, X19
	0x031E9868 MOV X2, X31
	0x031E986C BL 0x330E100
	0x031E9870 ADRP X0, 0xF37000
	0x031E9874 LDR X0, [X0 + 0xC48]
	0x031E9878 BL 0x1C16D08
	0x031E987C MOV X1, X0
	0x031E9880 MOV X0, X19
	0x031E9884 BL 0x1C16DEC
	0x031E9888 BL 0x1C16F44
	0x031E988C MOV X1, X31
	0x031E9890 BL 0x1C16DEC
	0x031E9894 STP X30, X21, [X31 - 0x20]!
	0x031E9898 STP X20, X19, [X31 + 0x10]
	0x031E989C ADRP X20, 0x11F3000
	0x031E98A0 ADRP X21, 0xF0A000
	0x031E98A4 LDRB W8, [X20 + 0x16C]
	0x031E98A8 LDR X21, [X21 + 0x618]
	0x031E98AC MOV X19, X0
	0x031E98B0 TBNZ X8, 0x0, 0x31E98C8
	0x031E98B4 ADRP X0, 0xF0A000
	0x031E98B8 LDR X0, [X0 + 0x618]
	0x031E98BC BL 0x1C16CF4
	0x031E98C0 MOVZ W8, 0x1
	0x031E98C4 STRB W8, [X20 + 0x16C]
	0x031E98C8 LDR X0, [X21]
	0x031E98CC MOVZ W1, 0x4
	0x031E98D0 BL 0x1C16D6C
	0x031E98D4 CBZ X0, 0x31E9928
	0x031E98D8 LDR W8, [X0 + 0x18]
	0x031E98DC CBZ W8, 0x31E9924
	0x031E98E0 LDRB W9, [X19]
	0x031E98E4 CMP W8, 0x1
	0x031E98E8 STRB W9, [X0 + 0x20]
	0x031E98EC B.EQ 0x31E9924
	0x031E98F0 LDRB W9, [X19 + 0x1]
	0x031E98F4 CMP W8, 0x2
	0x031E98F8 STRB W9, [X0 + 0x21]
	0x031E98FC B.LS 0x31E9924
	0x031E9900 LDRB W9, [X19 + 0x2]
	0x031E9904 CMP W8, 0x3
	0x031E9908 STRB W9, [X0 + 0x22]
	0x031E990C B.EQ 0x31E9924
	0x031E9910 LDRB W8, [X19 + 0x3]
	0x031E9914 LDP X20, X19, [X31 + 0x10]
	0x031E9918 STRB W8, [X0 + 0x23]
	0x031E991C LDP X30, X21, [X31], #0x20
	0x031E9920 RET
	0x031E9924 BL 0x1C16F28
	0x031E9928 BL 0x1C16F20
	0x031E992C STP X30, X21, [X31 - 0x20]!
	0x031E9930 STP X20, X19, [X31 + 0x10]
	0x031E9934 ADRP X20, 0x11F3000
	0x031E9938 ADRP X21, 0xF0A000
	0x031E993C LDRB W8, [X20 + 0x16D]
	0x031E9940 LDR X21, [X21 + 0x618]
	0x031E9944 MOV X19, X0
	0x031E9948 TBNZ X8, 0x0, 0x31E9960
	0x031E994C ADRP X0, 0xF0A000
	0x031E9950 LDR X0, [X0 + 0x618]
	0x031E9954 BL 0x1C16CF4
	0x031E9958 MOVZ W8, 0x1
	0x031E995C STRB W8, [X20 + 0x16D]
	0x031E9960 LDR X0, [X21]
	0x031E9964 MOVZ W1, 0x8
	0x031E9968 BL 0x1C16D6C
	0x031E996C CBZ X0, 0x31E9A00
	0x031E9970 LDR W8, [X0 + 0x18]
	0x031E9974 CBZ W8, 0x31E99FC
	0x031E9978 LDRB W9, [X19]
	0x031E997C CMP W8, 0x1
	0x031E9980 STRB W9, [X0 + 0x20]
	0x031E9984 B.EQ 0x31E99FC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11F4000
	007 Move W8, [X22+357]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF38000
	016 Move X0, [X0+2968]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+357], W8
	020 Move X0, [X21+32]
	021 Compare X0, 0
	022 JumpIfEqual {72}
	023 Move X8, [X0]
	024 Move X1, [X8+672]
	025 Move X9, [X8+664]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, [X21+32]
	029 Compare X0, 0
	030 JumpIfEqual {53}
	031 Move X8, [X0]
	032 Move X9, [X8+744]
	033 Move X2, [X8+752]
	034 Move W1, W20
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Compare X0, 0
	037 JumpIfEqual {54}
	038 Move X9, 0xF38000
	039 Move X9, [X9+2968]
	040 Move X8, [X0]
	041 Move X1, [X9]
	042 Move W10, [X8+304]
	043 Move W9, [X1+304]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X8, [X8+200]
	046 Add X8, X8, X9
	047 NotImplemented "Instruction LDUR not yet implemented."
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W8, [X0+16]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CSEL not yet implemented."
	052 Call 0x1C181E0
	053 Call 0x1C17F20
	054 Call 0x1C17F20
	055 Move X19, X0
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X0, X19
	058 Call 0x3EB2AD0
	059 Move X19, X0
	060 Move X0, 0xF13000
	061 Move X0, [X0+1888]
	062 Call 0x1C17D08
	063 Move X8, [X19]
	064 Move X1, [X8]
	065 Call 0x1C18270
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {78}
	070 Call 0x3EB2AE0
	071 Move X0, X31
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X30, [X31+48]
	077 Return X0
	078 Move W0, 8
	079 Call 0x3EB2AF0
	080 Move X8, [X19]
	081 Move [X0], X8
	082 Move X1, 0xCCC000
	083 Add X1, X1, 3672
	084 Move X2, X31
	085 Call 0x3EB2B00
	086 Move X19, X0
	087 Call 0x3EB2AE0
	088 Move X0, X19
	089 Call 0x1D2D690
	090 Call 0x1991590

Method: System.String ToString()

Disassembly:
	0x031E9988 LDRB W9, [X19 + 0x1]
	0x031E998C CMP W8, 0x2
	0x031E9990 STRB W9, [X0 + 0x21]
	0x031E9994 B.LS 0x31E99FC
	0x031E9998 LDRB W9, [X19 + 0x2]
	0x031E999C CMP W8, 0x3
	0x031E99A0 STRB W9, [X0 + 0x22]
	0x031E99A4 B.EQ 0x31E99FC
	0x031E99A8 LDRB W9, [X19 + 0x3]
	0x031E99AC CMP W8, 0x4
	0x031E99B0 STRB W9, [X0 + 0x23]
	0x031E99B4 B.LS 0x31E99FC
	0x031E99B8 LDRB W9, [X19 + 0x4]
	0x031E99BC CMP W8, 0x5
	0x031E99C0 STRB W9, [X0 + 0x24]
	0x031E99C4 B.EQ 0x31E99FC
	0x031E99C8 LDRB W9, [X19 + 0x5]
	0x031E99CC CMP W8, 0x6
	0x031E99D0 STRB W9, [X0 + 0x25]
	0x031E99D4 B.LS 0x31E99FC
	0x031E99D8 LDRB W9, [X19 + 0x6]
	0x031E99DC CMP W8, 0x7
	0x031E99E0 STRB W9, [X0 + 0x26]
	0x031E99E4 B.EQ 0x31E99FC
	0x031E99E8 LDRB W8, [X19 + 0x7]
	0x031E99EC LDP X20, X19, [X31 + 0x10]
	0x031E99F0 STRB W8, [X0 + 0x27]
	0x031E99F4 LDP X30, X21, [X31], #0x20
	0x031E99F8 RET
	0x031E99FC BL 0x1C16F28
	0x031E9A00 BL 0x1C16F20
	0x031E9A04 STR X30, [X31 - 0x10]!
	0x031E9A08 STR X0, [X31 + 0x8]
	0x031E9A0C ADD X0, X31, 0x8
	0x031E9A10 BL 0x31E992C
	0x031E9A14 LDR X30, [X31], #0x10
	0x031E9A18 RET
	0x031E9A1C STR X30, [X31 - 0x10]!
	0x031E9A20 CBZ X1, 0x31E9A64
	0x031E9A24 LDR W8, [X1 + 0x18]
	0x031E9A28 CMP W8, W2
	0x031E9A2C B.LS 0x31E9A60
	0x031E9A30 ADD X8, X1, W2, SXTW
	0x031E9A34 LDRB W8, [X8 + 0x20]
	0x031E9A38 STRB W8, [X0]
	0x031E9A3C LDR W9, [X1 + 0x18]
	0x031E9A40 ADD W8, W2, 0x1
	0x031E9A44 CMP W8, W9
	0x031E9A48 B.CS 0x31E9A60
	0x031E9A4C ADD X8, X1, W8, SXTW
	0x031E9A50 LDRB W8, [X8 + 0x20]
	0x031E9A54 STRB W8, [X0 + 0x1]
	0x031E9A58 LDR X30, [X31], #0x10
	0x031E9A5C RET
	0x031E9A60 BL 0x1C16F28
	0x031E9A64 BL 0x1C16F20
	0x031E9A68 STR X30, [X31 - 0x10]!
	0x031E9A6C CBZ X1, 0x31E9AE8
	0x031E9A70 LDR W8, [X1 + 0x18]
	0x031E9A74 CMP W8, W2
	0x031E9A78 B.LS 0x31E9AE4
	0x031E9A7C ADD X8, X1, W2, SXTW
	0x031E9A80 LDRB W8, [X8 + 0x20]
	0x031E9A84 STRB W8, [X0]
	0x031E9A88 LDR W9, [X1 + 0x18]
	0x031E9A8C ADD W8, W2, 0x1
	0x031E9A90 CMP W8, W9
	0x031E9A94 B.CS 0x31E9AE4
	0x031E9A98 ADD X8, X1, W8, SXTW
	0x031E9A9C LDRB W8, [X8 + 0x20]
	0x031E9AA0 STRB W8, [X0 + 0x1]
	0x031E9AA4 LDR W9, [X1 + 0x18]
	0x031E9AA8 ADD W8, W2, 0x2
	0x031E9AAC CMP W8, W9
	0x031E9AB0 B.CS 0x31E9AE4
	0x031E9AB4 ADD X8, X1, W8, SXTW
	0x031E9AB8 LDRB W8, [X8 + 0x20]
	0x031E9ABC STRB W8, [X0 + 0x2]
	0x031E9AC0 LDR W9, [X1 + 0x18]
	0x031E9AC4 ADD W8, W2, 0x3
	0x031E9AC8 CMP W8, W9
	0x031E9ACC B.CS 0x31E9AE4
	0x031E9AD0 ADD X8, X1, W8, SXTW
	0x031E9AD4 LDRB W8, [X8 + 0x20]
	0x031E9AD8 STRB W8, [X0 + 0x3]
	0x031E9ADC LDR X30, [X31], #0x10
	0x031E9AE0 RET
	0x031E9AE4 BL 0x1C16F28
	0x031E9AE8 BL 0x1C16F20
	0x031E9AEC STR X30, [X31 - 0x10]!
	0x031E9AF0 MOV W2, W1
	0x031E9AF4 MOV X1, X0
	0x031E9AF8 ADD X0, X31, 0xC
	0x031E9AFC STR W31, [X31 + 0xC]
	0x031E9B00 BL 0x31E9A68
	0x031E9B04 LDR W0, [X31 + 0xC]
	0x031E9B08 LDR X30, [X31], #0x10
	0x031E9B0C RET
	0x031E9B10 STR X30, [X31 - 0x10]!
	0x031E9B14 MOV W2, W1
	0x031E9B18 MOV X1, X0
	0x031E9B1C ADD X0, X31, 0xC
	0x031E9B20 STRH W31, [X31 + 0xC]
	0x031E9B24 BL 0x31E9A1C
	0x031E9B28 LDRH W0, [X31 + 0xC]
	0x031E9B2C LDR X30, [X31], #0x10
	0x031E9B30 RET
	0x031E9B34 STR X30, [X31 - 0x10]!
	0x031E9B38 MOV W2, W1
	0x031E9B3C MOV X1, X0
	0x031E9B40 ADD X0, X31, 0xC
	0x031E9B44 STR W31, [X31 + 0xC]
	0x031E9B48 BL 0x31E9A68
	0x031E9B4C LDR W0, [X31 + 0xC]
	0x031E9B50 LDR X30, [X31], #0x10
	0x031E9B54 RET
	0x031E9B58 STP X30, X21, [X31 - 0x20]!
	0x031E9B5C STP X20, X19, [X31 + 0x10]
	0x031E9B60 ADRP X21, 0x11F3000
	0x031E9B64 ADRP X20, 0xF37000
	0x031E9B68 LDRB W8, [X21 + 0x16E]
	0x031E9B6C LDR X20, [X20 + 0xB98]
	0x031E9B70 MOV X19, X0
	0x031E9B74 TBNZ X8, 0x0, 0x31E9B8C
	0x031E9B78 ADRP X0, 0xF37000
	0x031E9B7C LDR X0, [X0 + 0xB98]
	0x031E9B80 BL 0x1C16CF4
	0x031E9B84 MOVZ W8, 0x1
	0x031E9B88 STRB W8, [X21 + 0x16E]
	0x031E9B8C MOV X0, X19
	0x031E9B90 MOV X1, X31
	0x031E9B94 BL 0x33BDD8C
	0x031E9B98 LDR X0, [X20]
	0x031E9B9C BL 0x1C16F10
	0x031E9BA0 MOV X1, X31
	0x031E9BA4 MOV X20, X0
	0x031E9BA8 BL 0x33BDD8C
	0x031E9BAC MOVZ W8, 0xA0
	0x031E9BB0 STR X31, [X20 + 0x18]
	0x031E9BB4 STRB W8, [X20 + 0x10]
	0x031E9BB8 STR X20, [X19 + 0x18]
	0x031E9BBC LDP X20, X19, [X31 + 0x10]
	0x031E9BC0 LDP X30, X21, [X31], #0x20
	0x031E9BC4 RET
	0x031E9BC8 STR X30, [X31 - 0x20]!
	0x031E9BCC STP X20, X19, [X31 + 0x10]
	0x031E9BD0 MOV X19, X1
	0x031E9BD4 MOV X20, X0
	0x031E9BD8 BL 0x31E9B58
	0x031E9BDC STR X19, [X20 + 0x10]
	0x031E9BE0 LDP X20, X19, [X31 + 0x10]
	0x031E9BE4 LDR X30, [X31], #0x20
	0x031E9BE8 RET
	0x031E9BEC STR X30, [X31 - 0x30]!
	0x031E9BF0 STP X22, X21, [X31 + 0x10]
	0x031E9BF4 STP X20, X19, [X31 + 0x20]
	0x031E9BF8 ADRP X21, 0x11F3000
	0x031E9BFC ADRP X22, 0xF37000
	0x031E9C00 LDRB W8, [X21 + 0x16F]
	0x031E9C04 LDR X22, [X22 + 0xB98]
	0x031E9C08 MOV X20, X1
	0x031E9C0C MOV X19, X0
	0x031E9C10 TBNZ X8, 0x0, 0x31E9C28
	0x031E9C14 ADRP X0, 0xF37000
	0x031E9C18 LDR X0, [X0 + 0xB98]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x11F4000
	011 Move X21, 0xF0B000
	012 Move X23, 0xF38000
	013 Move W8, [X20+358]
	014 Move X21, [X21+2288]
	015 Move X23, [X23+2984]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {47}
	021 Move X0, 0xF0B000
	022 Move X0, [X0+2504]
	023 Call 0x1C17CF4
	024 Move X0, 0xF0B000
	025 Move X0, [X0+1880]
	026 Call 0x1C17CF4
	027 Move X0, 0xF0B000
	028 Move X0, [X0+2288]
	029 Call 0x1C17CF4
	030 Move X0, 0xF38000
	031 Move X0, [X0+2992]
	032 Call 0x1C17CF4
	033 Move X0, 0xF38000
	034 Move X0, [X0+3000]
	035 Call 0x1C17CF4
	036 Move X0, 0xF38000
	037 Move X0, [X0+3008]
	038 Call 0x1C17CF4
	039 Move X0, 0xF38000
	040 Move X0, [X0+3016]
	041 Call 0x1C17CF4
	042 Move X0, 0xF38000
	043 Move X0, [X0+2984]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X20+358], W8
	047 Move X0, [X21]
	048 Call 0x1C17F10
	049 Move X1, X31
	050 Move X20, X0
	051 Call StringBuilder..ctor, X0
	052 Move X1, [X23]
	053 Add X0, X19, 16
	054 Move X2, X31
	055 Call Byte.ToString, X0, X1
	056 Move X21, X0
	057 Move X0, X31
	058 Call Environment.get_NewLine
	059 Compare X20, 0
	060 JumpIfEqual {171}
	061 Move X8, 0xF38000
	062 Move X8, [X8+2992]
	063 Move X3, X0
	064 Move X0, X20
	065 Move X2, X21
	066 Move X1, [X8]
	067 Move X4, X31
	068 Call StringBuilder.AppendFormat, X0, X1, X2, X3
	069 Move X0, X19
	070 Call ASN1.get_Value, X0
	071 Compare X0, 0
	072 JumpIfEqual {171}
	073 Move X8, 0xF0B000
	074 Move X8, [X8+1880]
	075 Move X9, [X0+24]
	076 Move X22, 0xF38000
	077 Move X24, 0xF38000
	078 Move X0, [X8]
	079 Move X22, [X22+3008]
	080 Move X24, [X24+3000]
	081 Add X1, X31, 12
	082 Move [X31+12], W9
	083 Call 0x1C17E04
	084 Move X21, X0
	085 Move X0, X31
	086 Call Environment.get_NewLine
	087 Move X1, [X22]
	088 Move X3, X0
	089 Move X0, X20
	090 Move X2, X21
	091 Move X4, X31
	092 Call StringBuilder.AppendFormat, X0, X1, X2, X3
	093 Move X1, [X24]
	094 Move X0, X20
	095 Move X2, X31
	096 Call StringBuilder.Append, X0, X1
	097 Move X0, X31
	098 Call Environment.get_NewLine
	099 Move X1, X0
	100 Move X0, X20
	101 Move X2, X31
	102 Call StringBuilder.Append, X0, X1
	103 Move X0, X19
	104 Call ASN1.get_Value, X0
	105 Compare X0, 0
	106 JumpIfEqual {171}
	107 Move X25, 0xF38000
	108 Move X26, 0xF0B000
	109 Move X25, [X25+3016]
	110 Move X26, [X26+2504]
	111 Move X24, X31
	112 NotImplemented "Instruction LDRSW not yet implemented."
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X0, X19
	115 Call ASN1.get_Value, X0
	116 Compare X0, 0
	117 JumpIfEqual {171}
	118 Move W8, [X0+24]
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move X1, [X23]
	121 Add X8, X0, X24
	122 Add X0, X8, 32
	123 Move X2, X31
	124 Call Byte.ToString, X0, X1
	125 Move X1, [X25]
	126 Move X2, X0
	127 Move X0, X20
	128 Move X3, X31
	129 Call StringBuilder.AppendFormat, X0, X1, X2
	130 Add X24, X24, 1
	131 And X31, X24, 15
	132 Move X0, X31
	133 Call Environment.get_NewLine
	134 Move X22, [X26]
	135 Move X21, X0
	136 Move X8, [X22+56]
	137 Compare X8, 0
	138 JumpIfNotEqual {142}
	139 Move X0, X22
	140 Call 0x1C5D6E0
	141 Move X8, [X22+56]
	142 Move X0, [X8+16]
	143 Move W8, [X0+309]
	144 Move TEMP, X8
	145 And TEMP, TEMP, 1
	146 Compare TEMP, 1
	147 JumpIfEqual {149}
	148 Call 0x1C5D684
	149 Move W8, [X0+224]
	150 Compare W8, 0
	151 JumpIfNotEqual {153}
	152 Call 0x1C17DFC
	153 Move X8, [X22+56]
	154 Move X0, [X8+16]
	155 Move W8, [X0+309]
	156 Move TEMP, X8
	157 And TEMP, TEMP, 1
	158 Compare TEMP, 1
	159 JumpIfEqual {161}
	160 Call 0x1C5D684
	161 Move X8, [X0+184]
	162 Move X0, X20
	163 Move X1, X21
	164 Move X3, X31
	165 Move X2, [X8]
	166 Call StringBuilder.AppendFormat, X0, X1, X2
	167 Move X0, X19
	168 Call ASN1.get_Value, X0
	169 Compare X0, 0
	170 JumpIfNotEqual {112}
	171 Call 0x1C17F20
	172 Move X8, [X20]
	173 Move X0, X20
	174 Move X9, [X8+360]
	175 Move X1, [X8+368]
	176 NotImplemented "Instruction BLR not yet implemented."
	177 Move X20, [X31+64]
	178 Move X19, [X31+72]
	179 Move X22, [X31+48]
	180 Move X21, [X31+56]
	181 Move X24, [X31+32]
	182 Move X23, [X31+40]
	183 Move X26, [X31+16]
	184 Move X25, [X31+24]
	185 Move X30, [X31+80]
	186 Return X0
	187 Call 0x1C17F28

