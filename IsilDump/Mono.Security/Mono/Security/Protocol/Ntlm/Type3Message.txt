Type: Mono.Security.Protocol.Ntlm.Type3Message

Method: System.Void .ctor(Mono.Security.Protocol.Ntlm.Type2Message type2)

Disassembly:
	0x031FD59C BL 0x1C16DEC
	0x031FD5A0 LDR X8, [X0 + 0x40]
	0x031FD5A4 LDR X6, [X0 + 0x18]
	0x031FD5A8 LDR X5, [X0 + 0x28]
	0x031FD5AC MOV X0, X8
	0x031FD5B0 BR X6
	0x031FD5B4 STP X30, X21, [X31 - 0x20]!
	0x031FD5B8 STP X20, X19, [X31 + 0x10]
	0x031FD5BC LDR X8, [X2 + 0x8]
	0x031FD5C0 STP X1, X2, [X0 + 0x20]
	0x031FD5C4 MOV X19, X0
	0x031FD5C8 MOV X20, X1
	0x031FD5CC STR X8, [X0 + 0x10]
	0x031FD5D0 LDRB W21, [X2 + 0x52]
	0x031FD5D4 STR X0, [X0 + 0x40]
	0x031FD5D8 MOV X0, X2
	0x031FD5DC BL 0x1C16D84
	0x031FD5E0 TBZ X0, 0x0, 0x31FD5F8
	0x031FD5E4 CMP W21, 0x4
	0x031FD5E8 B.NE 0x31FD614
	0x031FD5EC ADRP X8, 0xFFFFFFFFFE9B6000
	0x031FD5F0 ADD X8, X8, 0x5A0
	0x031FD5F4 B 0x31FD608
	0x031FD5F8 CMP W21, 0x3
	0x031FD5FC B.NE 0x31FD610
	0x031FD600 ADRP X8, 0xFFFFFFFFFE9B6000
	0x031FD604 ADD X8, X8, 0x574
	0x031FD608 STR X8, [X19 + 0x18]
	0x031FD60C B 0x31FD624
	0x031FD610 CBZ X20, 0x31FD63C
	0x031FD614 LDR X8, [X19 + 0x10]
	0x031FD618 LDR X9, [X19 + 0x20]
	0x031FD61C STR X8, [X19 + 0x18]
	0x031FD620 STR X9, [X19 + 0x40]
	0x031FD624 ADRP X8, 0xFFFFFFFFFE9B6000
	0x031FD628 ADD X8, X8, 0x4FC
	0x031FD62C STR X8, [X19 + 0x38]
	0x031FD630 LDP X20, X19, [X31 + 0x10]
	0x031FD634 LDP X30, X21, [X31], #0x20
	0x031FD638 RET
	0x031FD63C ADRP X1, 0xFFFFFFFFFD91E000
	0x031FD640 ADD X1, X1, 0xEE3
	0x031FD644 MOV X0, X31
	0x031FD648 BL 0x1C16F3C
	0x031FD64C MOV X1, X31
	0x031FD650 BL 0x1C16DEC
	0x031FD654 LDR X8, [X0 + 0x40]
	0x031FD658 LDR X6, [X0 + 0x18]
	0x031FD65C LDR X5, [X0 + 0x28]
	0x031FD660 MOV X0, X8
	0x031FD664 BR X6
	0x031FD668 MOV X1, X31
	0x031FD66C B 0x33BDD8C
	0x031FD670 STP X30, X19, [X31 - 0x10]!
	0x031FD674 ADRP X19, 0x11DF000
	0x031FD678 LDRB W8, [X19 + 0x208]
	0x031FD67C TBNZ X8, 0x0, 0x31FD694
	0x031FD680 ADRP X0, 0xF24000
	0x031FD684 LDR X0, [X0 + 0x3F0]
	0x031FD688 BL 0x1C16CF4
	0x031FD68C MOVZ W8, 0x1
	0x031FD690 STRB W8, [X19 + 0x208]
	0x031FD694 MOV X0, X31
	0x031FD698 BL 0x35EFB6C
	0x031FD69C CBZ X0, 0x31FD6D4
	0x031FD6A0 ADRP X9, 0xF24000
	0x031FD6A4 LDR X9, [X9 + 0x3F0]
	0x031FD6A8 LDR X8, [X0]
	0x031FD6AC LDR X1, [X9]
	0x031FD6B0 LDRB W10, [X8 + 0x130]
	0x031FD6B4 LDRB W9, [X1 + 0x130]
	0x031FD6B8 CMP W10, W9
	0x031FD6BC B.CC 0x31FD6DC
	0x031FD6C0 LDR X8, [X8 + 0xC8]
	0x031FD6C4 ADD X8, X8, X9, 0x3, LSL
	0x031FD6C8 LDUR X8, [X8 - 0x8]
	0x031FD6CC CMP X8, X1
	0x031FD6D0 B.NE 0x31FD6DC
	0x031FD6D4 LDP X30, X19, [X31], #0x10
	0x031FD6D8 RET
	0x031FD6DC BL 0x1C171E0
	0x031FD6E0 LDR X0, [X0 + 0x10]
	0x031FD6E4 RET
	0x031FD6E8 STR X1, [X0 + 0x10]
	0x031FD6EC RET
	0x031FD6F0 LDR X0, [X0 + 0x18]
	0x031FD6F4 RET
	0x031FD6F8 STR X1, [X0 + 0x18]
	0x031FD6FC RET
	0x031FD700 LDURH W0, [X0 + 0x73]
	0x031FD704 RET
	0x031FD708 STURH W1, [X0 + 0x73]
	0x031FD70C RET
	0x031FD710 LDRB W0, [X0 + 0x76]
	0x031FD714 RET
	0x031FD718 LDP X8, X1, [X0 + 0x20]
	0x031FD71C MOV X0, X8
	0x031FD720 RET
	0x031FD724 STP X1, X2, [X0 + 0x20]
	0x031FD728 RET
	0x031FD72C LDR X0, [X0 + 0x30]
	0x031FD730 RET
	0x031FD734 STR X1, [X0 + 0x30]
	0x031FD738 RET
	0x031FD73C LDR X0, [X0 + 0x38]
	0x031FD740 RET
	0x031FD744 STR X1, [X0 + 0x38]
	0x031FD748 RET
	0x031FD74C LDR X0, [X0 + 0x40]
	0x031FD750 RET
	0x031FD754 STR X1, [X0 + 0x40]
	0x031FD758 RET
	0x031FD75C LDRB W0, [X0 + 0x48]
	0x031FD760 RET
	0x031FD764 AND W8, W1, 0x1
	0x031FD768 STRB W8, [X0 + 0x48]
	0x031FD76C RET
	0x031FD770 LDR X0, [X0 + 0x50]
	0x031FD774 RET
	0x031FD778 STR X1, [X0 + 0x50]
	0x031FD77C RET
	0x031FD780 LDRB W0, [X0 + 0x58]
	0x031FD784 RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x11E0000
	009 Move X23, 0xF25000
	010 Move W8, [X21+510]
	011 Move X23, [X23+896]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xEF7000
	019 Move X0, [X0+1560]
	020 Call 0x1C17CF4
	021 Move X0, 0xF25000
	022 Move X0, [X0+896]
	023 Call 0x1C17CF4
	024 Move X0, 0xF25000
	025 Move X0, [X0+936]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+510], W8
	029 Move X0, [X23]
	030 Move X21, 0xF25000
	031 Move W8, [X0+224]
	032 Move X21, [X21+936]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X19
	037 Move X1, X31
	038 Call Object..ctor, X0
	039 Move W8, 3
	040 Move [X19+16], W8
	041 Move [X19+72], X20
	042 Move X0, [X21]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X22, 0x11E0000
	048 Move W8, [X22+519]
	049 Compare W8, 0
	050 JumpIfNotEqual {56}
	051 Move X0, 0xF25000
	052 Move X0, [X0+936]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X22+519], W8
	056 Move X0, [X21]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {62}
	060 Call 0x1C17DFC
	061 Move X0, [X21]
	062 Move X8, [X0+184]
	063 Move W8, [X8]
	064 Move [X19+24], W8
	065 Compare X20, 0
	066 JumpIfEqual {146}
	067 Move X0, X20
	068 Call Type2Message.get_Nonce, X0
	069 Compare X0, 0
	070 JumpIfEqual {146}
	071 Move X1, X31
	072 Call Array.Clone, X0
	073 Compare X0, 0
	074 JumpIfEqual {93}
	075 Move X24, 0xEF7000
	076 Move X24, [X24+1560]
	077 Move X21, X0
	078 Move X22, [X24]
	079 Move X1, X22
	080 Call 0x1C17E00
	081 Compare X0, 0
	082 JumpIfEqual {90}
	083 Move [X19+32], X0
	084 Move X22, [X24]
	085 Move X0, X21
	086 Move X1, X22
	087 Call 0x1C17E00
	088 Compare X0, 0
	089 JumpIfNotEqual {94}
	090 Move X0, X21
	091 Move X1, X22
	092 Call 0x1C181E0
	093 Move [X19+32], X31
	094 Move X8, [X20+32]
	095 Move X0, X31
	096 Move [X19+48], X8
	097 Call Environment.get_MachineName
	098 Move [X19+40], X0
	099 Move X0, X31
	100 Call Environment.get_UserName
	101 Move W8, 0x8200
	102 Move [X19+56], X0
	103 Move [X19+20], W8
	104 Move X0, [X23]
	105 Move W21, [X20+20]
	106 Move W8, [X0+224]
	107 Compare W8, 0
	108 JumpIfEqual {113}
	109 And W31, W21, 1
	110 Move W8, 0x8201
	111 NotImplemented "Instruction CINC not yet implemented."
	112 Move [X19+20], W8
	113 Call 0x1C17DFC
	114 Move X0, [X23]
	115 Move W8, [X19+20]
	116 And W31, W21, 1
	117 Move W10, 1
	118 Move W9, [X0+224]
	119 NotImplemented "Instruction CINC not yet implemented."
	120 Or W8, W8, W10
	121 Move [X19+20], W8
	122 Compare W9, 0
	123 JumpIfNotEqual {125}
	124 Call 0x1C17DFC
	125 Move W8, [X20+22]
	126 Move TEMP, X8
	127 And TEMP, TEMP, 8
	128 Compare TEMP, 8
	129 JumpIfNotEqual {138}
	130 Move X0, [X23]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {135}
	134 Call 0x1C17DFC
	135 Move W8, [X19+20]
	136 Or W8, W8, 0x80000
	137 Move [X19+20], W8
	138 Move X20, [X31+48]
	139 Move X19, [X31+56]
	140 Move X22, [X31+32]
	141 Move X21, [X31+40]
	142 Move X24, [X31+16]
	143 Move X23, [X31+24]
	144 Move X30, [X31+64]
	145 Return 
	146 Call 0x1C17F20

Method: System.Void Finalize()

Disassembly:
	0x031FD788 AND W8, W1, 0x1
	0x031FD78C STRB W8, [X0 + 0x58]
	0x031FD790 RET
	0x031FD794 LDUR X0, [X0 + 0x5C]
	0x031FD798 RET
	0x031FD79C STUR X1, [X0 + 0x5C]
	0x031FD7A0 RET
	0x031FD7A4 LDR X0, [X0 + 0x68]
	0x031FD7A8 RET
	0x031FD7AC STR X1, [X0 + 0x68]
	0x031FD7B0 RET
	0x031FD7B4 MOVZ W8, 0x1
	0x031FD7B8 MOV X1, X31
	0x031FD7BC STRB W8, [X0 + 0x71]
	0x031FD7C0 STRB W8, [X0 + 0x76]
	0x031FD7C4 B 0x33BDD8C
	0x031FD7C8 STR X30, [X31 - 0x20]!
	0x031FD7CC STP X20, X19, [X31 + 0x10]
	0x031FD7D0 ADRP X19, 0x11DF000
	0x031FD7D4 ADRP X20, 0xF24000
	0x031FD7D8 LDRB W8, [X19 + 0x209]
	0x031FD7DC LDR X20, [X20 + 0x3F8]
	0x031FD7E0 TBNZ X8, 0x0, 0x31FD7F8
	0x031FD7E4 ADRP X0, 0xF24000
	0x031FD7E8 LDR X0, [X0 + 0x3F8]
	0x031FD7EC BL 0x1C16CF4
	0x031FD7F0 MOVZ W8, 0x1
	0x031FD7F4 STRB W8, [X19 + 0x209]
	0x031FD7F8 LDR X0, [X20]
	0x031FD7FC LDR X8, [X0 + 0xB8]
	0x031FD800 LDR X8, [X8]
	0x031FD804 CBNZ X8, 0x31FD844
	0x031FD808 BL 0x1C16F10
	0x031FD80C MOVZ W8, 0x1
	0x031FD810 MOV X1, X31
	0x031FD814 MOV X19, X0
	0x031FD818 STRB W8, [X0 + 0x71]
	0x031FD81C STRB W8, [X0 + 0x76]
	0x031FD820 BL 0x33BDD8C
	0x031FD824 LDR X8, [X20]
	0x031FD828 MOV X1, X19
	0x031FD82C MOV X2, X31
	0x031FD830 LDR X0, [X8 + 0xB8]
	0x031FD834 BL 0x1C24138
	0x031FD838 LDR X8, [X20]
	0x031FD83C LDR X8, [X8 + 0xB8]
	0x031FD840 LDR X8, [X8]
	0x031FD844 LDP X20, X19, [X31 + 0x10]
	0x031FD848 MOV X0, X8
	0x031FD84C LDR X30, [X31], #0x20
	0x031FD850 RET
	0x031FD854 STR X30, [X31 - 0x10]!
	0x031FD858 BL 0x31FD7C8
	0x031FD85C CBZ X0, 0x31FD868
	0x031FD860 LDR X30, [X31], #0x10
	0x031FD864 B 0x31FD86C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, [X0+32]
	007 Compare X0, 0
	008 JumpIfEqual {13}
	009 Move W2, [X0+24]
	010 Move W1, W31
	011 Move X3, X31
	012 Call Array.Clear, X0, X1, X2
	013 Move X0, [X19+80]
	014 Compare X0, 0
	015 JumpIfEqual {20}
	016 Move W2, [X0+24]
	017 Move W1, W31
	018 Move X3, X31
	019 Call Array.Clear, X0, X1, X2
	020 Move X0, [X19+88]
	021 Compare X0, 0
	022 JumpIfEqual {27}
	023 Move W2, [X0+24]
	024 Move W1, W31
	025 Move X3, X31
	026 Call Array.Clear, X0, X1, X2
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X1, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Object.Finalize, X0
	034 Return 
	035 Move X20, X0
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X20
	038 Call 0x3EB2AD0
	039 Move X21, [X0]
	040 Call 0x3EB2AE0
	041 Move X0, X19
	042 Move X1, X31
	043 Call Object.Finalize, X0
	044 Compare X21, 0
	045 JumpIfNotEqual {52}
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Return 
	051 Move X21, X31
	052 Move X0, X21
	053 Call 0x1C17F18
	054 Move X20, X0
	055 Move X0, X19
	056 Move X1, X31
	057 Call Object.Finalize, X0
	058 Compare X21, 0
	059 JumpIfNotEqual {62}
	060 Move X0, X20
	061 Call 0x1D2D690
	062 Move X0, X21
	063 Call 0x1C17F18
	064 Call 0x1991590

Method: System.Void set_Domain(System.String value)

Disassembly:
	0x031FD868 BL 0x1C16F20
	0x031FD86C STP X30, X21, [X31 - 0x20]!
	0x031FD870 STP X20, X19, [X31 + 0x10]
	0x031FD874 ADRP X20, 0x11DF000
	0x031FD878 ADRP X21, 0xF24000
	0x031FD87C LDRB W8, [X20 + 0x20B]
	0x031FD880 LDR X21, [X21 + 0x3F8]
	0x031FD884 MOV X19, X0
	0x031FD888 TBNZ X8, 0x0, 0x31FD8A0
	0x031FD88C ADRP X0, 0xF24000
	0x031FD890 LDR X0, [X0 + 0x3F8]
	0x031FD894 BL 0x1C16CF4
	0x031FD898 MOVZ W8, 0x1
	0x031FD89C STRB W8, [X20 + 0x20B]
	0x031FD8A0 LDR X0, [X21]
	0x031FD8A4 BL 0x1C16F10
	0x031FD8A8 MOV X1, X19
	0x031FD8AC MOV X20, X0
	0x031FD8B0 BL 0x31FD94C
	0x031FD8B4 MOV X0, X20
	0x031FD8B8 LDP X20, X19, [X31 + 0x10]
	0x031FD8BC LDP X30, X21, [X31], #0x20
	0x031FD8C0 RET
	0x031FD8C4 LDR X0, [X0 + 0x78]
	0x031FD8C8 RET
	0x031FD8CC STP X30, X21, [X31 - 0x20]!
	0x031FD8D0 STP X20, X19, [X31 + 0x10]
	0x031FD8D4 ADRP X21, 0x11DF000
	0x031FD8D8 LDRB W8, [X21 + 0x20A]
	0x031FD8DC MOV X19, X1
	0x031FD8E0 MOV X20, X0
	0x031FD8E4 TBNZ X8, 0x0, 0x31FD8FC
	0x031FD8E8 ADRP X0, 0xF24000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11E0000
	007 Move X22, 0xEF7000
	008 Move W8, [X21+511]
	009 Move X22, [X22+2440]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEF7000
	017 Move X0, [X0+2440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+511], W8
	021 Move X1, [X22]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X2, X31
	024 NotImplemented "Instruction CSEL not yet implemented."
	025 Move X0, X20
	026 Call String.op_Equality, X0, X1
	027 Move W8, [X19+20]
	028 And W31, W0, 1
	029 Move W9, 4096
	030 NotImplemented "Instruction CSEL not yet implemented."
	031 And W8, W8, 0xFFFFEFFF
	032 Or W8, W8, W9
	033 Move [X19+20], W8
	034 Move [X19+48], X20
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return 

Method: System.Void set_Password(System.String value)

Disassembly:
	0x031FD8EC LDR X0, [X0 + 0x3F8]
	0x031FD8F0 BL 0x1C16CF4

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: System.Void set_Username(System.String value)

Disassembly:
	0x031FD8F4 MOVZ W8, 0x1
	0x031FD8F8 STRB W8, [X21 + 0x20A]

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.Void Decode(System.Byte[] message)

Disassembly:
	0x031FD8FC LDRB W8, [X20 + 0x70]
	0x031FD900 CBZ W8, 0x31FD90C
	0x031FD904 ADD X8, X20, 0x78
	0x031FD908 B 0x31FD934
	0x031FD90C ADRP X8, 0xF24000
	0x031FD910 LDR X8, [X8 + 0x3F8]
	0x031FD914 LDR X0, [X8]
	0x031FD918 BL 0x1C16F10
	0x031FD91C MOV X1, X20
	0x031FD920 MOV X21, X0
	0x031FD924 BL 0x31FD94C
	0x031FD928 CBZ X21, 0x31FD948
	0x031FD92C ADD X8, X21, 0x78
	0x031FD930 MOV X20, X21
	0x031FD934 STR X19, [X8]
	0x031FD938 MOV X0, X20
	0x031FD93C LDP X20, X19, [X31 + 0x10]
	0x031FD940 LDP X30, X21, [X31], #0x20
	0x031FD944 RET
	0x031FD948 BL 0x1C16F20
	0x031FD94C STR X30, [X31 - 0x30]!
	0x031FD950 STP X22, X21, [X31 + 0x10]
	0x031FD954 STP X20, X19, [X31 + 0x20]
	0x031FD958 ADRP X21, 0x11DF000
	0x031FD95C LDRB W8, [X21 + 0x20C]
	0x031FD960 MOV X20, X1
	0x031FD964 MOV X19, X0
	0x031FD968 TBNZ X8, 0x0, 0x31FD98C
	0x031FD96C ADRP X0, 0xEF6000
	0x031FD970 LDR X0, [X0 + 0xAC8]
	0x031FD974 BL 0x1C16CF4
	0x031FD978 ADRP X0, 0xF24000
	0x031FD97C LDR X0, [X0 + 0x400]
	0x031FD980 BL 0x1C16CF4
	0x031FD984 MOVZ W8, 0x1
	0x031FD988 STRB W8, [X21 + 0x20C]
	0x031FD98C MOVZ W8, 0x1
	0x031FD990 MOV X0, X19
	0x031FD994 MOV X1, X31
	0x031FD998 STRB W8, [X19 + 0x71]
	0x031FD99C STRB W8, [X19 + 0x76]
	0x031FD9A0 BL 0x33BDD8C
	0x031FD9A4 CBZ X20, 0x31FDA94
	0x031FD9A8 LDR X8, [X20 + 0x10]
	0x031FD9AC STR X8, [X19 + 0x10]
	0x031FD9B0 LDR X8, [X20 + 0x18]
	0x031FD9B4 STR X8, [X19 + 0x18]
	0x031FD9B8 LDRB W8, [X20 + 0x71]
	0x031FD9BC STRB W8, [X19 + 0x71]
	0x031FD9C0 LDRB W8, [X20 + 0x72]
	0x031FD9C4 STRB W8, [X19 + 0x72]
	0x031FD9C8 LDURH W8, [X20 + 0x73]
	0x031FD9CC STURH W8, [X19 + 0x73]
	0x031FD9D0 LDRB W8, [X20 + 0x75]
	0x031FD9D4 STRB W8, [X19 + 0x75]
	0x031FD9D8 LDRB W8, [X20 + 0x76]
	0x031FD9DC STRB W8, [X19 + 0x76]
	0x031FD9E0 LDR X8, [X20 + 0x38]
	0x031FD9E4 STR X8, [X19 + 0x38]
	0x031FD9E8 LDUR X8, [X20 + 0x5C]
	0x031FD9EC STUR X8, [X19 + 0x5C]
	0x031FD9F0 LDR X8, [X20 + 0x68]
	0x031FD9F4 STR X8, [X19 + 0x68]
	0x031FD9F8 LDR V0, [X20 + 0x2]
	0x031FD9FC STR V0, [X19 + 0x2]
	0x031FDA00 LDRB W8, [X20 + 0x48]
	0x031FDA04 STRB W8, [X19 + 0x48]
	0x031FDA08 LDR X8, [X20 + 0x50]
	0x031FDA0C STR X8, [X19 + 0x50]
	0x031FDA10 LDRB W8, [X20 + 0x58]
	0x031FDA14 STRB W8, [X19 + 0x58]
	0x031FDA18 LDR X21, [X20 + 0x30]
	0x031FDA1C CBZ X21, 0x31FDA44
	0x031FDA20 ADRP X8, 0xF24000
	0x031FDA24 LDR X8, [X8 + 0x400]
	0x031FDA28 LDR X0, [X8]
	0x031FDA2C BL 0x1C16F10
	0x031FDA30 MOV X1, X21
	0x031FDA34 MOV X2, X31
	0x031FDA38 MOV X22, X0
	0x031FDA3C BL 0x3657A18
	0x031FDA40 STR X22, [X19 + 0x30]
	0x031FDA44 LDR X8, [X20 + 0x40]
	0x031FDA48 CBZ X8, 0x31FDA7C
	0x031FDA4C ADRP X9, 0xEF6000
	0x031FDA50 LDR X9, [X9 + 0xAC8]
	0x031FDA54 LDR W1, [X8 + 0x18]
	0x031FDA58 LDR X0, [X9]
	0x031FDA5C BL 0x1C16D6C
	0x031FDA60 STR X0, [X19 + 0x40]
	0x031FDA64 MOV X1, X0
	0x031FDA68 LDR X0, [X20 + 0x40]
	0x031FDA6C CBZ X0, 0x31FDA94
	0x031FDA70 MOV W2, W31
	0x031FDA74 MOV X3, X31
	0x031FDA78 BL 0x339FC34
	0x031FDA7C MOVZ W8, 0x1
	0x031FDA80 STRB W8, [X19 + 0x70]
	0x031FDA84 LDP X20, X19, [X31 + 0x20]
	0x031FDA88 LDP X22, X21, [X31 + 0x10]
	0x031FDA8C LDR X30, [X31], #0x30
	0x031FDA90 RET
	0x031FDA94 BL 0x1C16F20
	0x031FDA98 STP X30, X23, [X31 - 0x30]!
	0x031FDA9C STP X22, X21, [X31 + 0x10]
	0x031FDAA0 STP X20, X19, [X31 + 0x20]
	0x031FDAA4 ADRP X22, 0x11DF000
	0x031FDAA8 ADRP X23, 0xEF6000
	0x031FDAAC LDRB W8, [X22 + 0x20D]
	0x031FDAB0 LDR X23, [X23 + 0x7D0]
	0x031FDAB4 MOV X21, X2
	0x031FDAB8 MOV X19, X1
	0x031FDABC MOV X20, X0
	0x031FDAC0 TBNZ X8, 0x0, 0x31FDAD8
	0x031FDAC4 ADRP X0, 0xEF6000
	0x031FDAC8 LDR X0, [X0 + 0x7D0]
	0x031FDACC BL 0x1C16CF4
	0x031FDAD0 MOVZ W8, 0x1
	0x031FDAD4 STRB W8, [X22 + 0x20D]
	0x031FDAD8 LDR X0, [X23]
	0x031FDADC LDR W8, [X0 + 0xE0]
	0x031FDAE0 CBNZ W8, 0x31FDAE8
	0x031FDAE4 BL 0x1C16DFC
	0x031FDAE8 MOV X0, X20
	0x031FDAEC MOV X1, X21
	0x031FDAF0 MOV X2, X31
	0x031FDAF4 BL 0x33B2C70
	0x031FDAF8 STR X19, [X20 + 0x90]
	0x031FDAFC LDP X20, X19, [X31 + 0x20]
	0x031FDB00 LDP X22, X21, [X31 + 0x10]
	0x031FDB04 LDP X30, X23, [X31], #0x30
	0x031FDB08 RET
	0x031FDB0C STP X30, X23, [X31 - 0x30]!
	0x031FDB10 STP X22, X21, [X31 + 0x10]
	0x031FDB14 STP X20, X19, [X31 + 0x20]
	0x031FDB18 ADRP X22, 0x11DF000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x11E0000
	009 Move W8, [X21+512]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEF7000
	017 Move X0, [X0+1560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+512], W8
	021 Move X0, X19
	022 Move X1, X20
	023 Call MessageBase.Decode, X0, X1
	024 Move [X19+64], X31
	025 Compare X20, 0
	026 JumpIfEqual {144}
	027 Move W8, [X20+24]
	028 Move X23, 0xEF7000
	029 Move X23, [X23+1560]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move W8, 0x8201
	032 Add X0, X31, 12
	033 Move W2, 60
	034 Move X1, X20
	035 Move [X31+12], W31
	036 Call BitConverterLE.UIntFromBytes, X0, X1, X2
	037 Move W8, [X31+12]
	038 Add X0, X31, 12
	039 Move W2, 12
	040 Move X1, X20
	041 Move [X19+20], W8
	042 NotImplemented "Instruction STRH not yet implemented."
	043 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	044 NotImplemented "Instruction LDRH not yet implemented."
	045 Add X0, X31, 12
	046 Move W2, 16
	047 Move X1, X20
	048 NotImplemented "Instruction STRH not yet implemented."
	049 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	050 Move X0, [X23]
	051 NotImplemented "Instruction LDRH not yet implemented."
	052 Move W1, W21
	053 Call 0x1C17D6C
	054 Move X2, X0
	055 Move [X19+80], X0
	056 Move X0, X20
	057 Move W1, W22
	058 Move W3, W31
	059 Move W4, W21
	060 Move X5, X31
	061 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	062 Add X0, X31, 12
	063 Move W2, 20
	064 Move X1, X20
	065 NotImplemented "Instruction STRH not yet implemented."
	066 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	067 NotImplemented "Instruction LDRH not yet implemented."
	068 Add X0, X31, 12
	069 Move W2, 24
	070 Move X1, X20
	071 NotImplemented "Instruction STRH not yet implemented."
	072 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	073 Move X0, [X23]
	074 NotImplemented "Instruction LDRH not yet implemented."
	075 Move W1, W21
	076 Call 0x1C17D6C
	077 Move X2, X0
	078 Move [X19+88], X0
	079 Move X0, X20
	080 Move W1, W22
	081 Move W3, W31
	082 Move W4, W21
	083 Move X5, X31
	084 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	085 Add X0, X31, 12
	086 Move W2, 28
	087 Move X1, X20
	088 NotImplemented "Instruction STRH not yet implemented."
	089 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	090 NotImplemented "Instruction LDRH not yet implemented."
	091 Add X0, X31, 12
	092 Move W2, 32
	093 Move X1, X20
	094 NotImplemented "Instruction STRH not yet implemented."
	095 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	096 NotImplemented "Instruction LDRH not yet implemented."
	097 Move X0, X19
	098 Move X1, X20
	099 Move W3, W21
	100 Call Type3Message.DecodeString, X0, X1, X2, X3
	101 Move [X19+48], X0
	102 Add X0, X31, 12
	103 Move W2, 36
	104 Move X1, X20
	105 NotImplemented "Instruction STRH not yet implemented."
	106 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	107 NotImplemented "Instruction LDRH not yet implemented."
	108 Add X0, X31, 12
	109 Move W2, 40
	110 Move X1, X20
	111 NotImplemented "Instruction STRH not yet implemented."
	112 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	113 NotImplemented "Instruction LDRH not yet implemented."
	114 Move X0, X19
	115 Move X1, X20
	116 Move W3, W21
	117 Call Type3Message.DecodeString, X0, X1, X2, X3
	118 Move [X19+56], X0
	119 Add X0, X31, 12
	120 Move W2, 44
	121 Move X1, X20
	122 NotImplemented "Instruction STRH not yet implemented."
	123 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	124 NotImplemented "Instruction LDRH not yet implemented."
	125 Add X0, X31, 12
	126 Move W2, 48
	127 Move X1, X20
	128 NotImplemented "Instruction STRH not yet implemented."
	129 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	130 NotImplemented "Instruction LDRH not yet implemented."
	131 Move X0, X19
	132 Move X1, X20
	133 Move W3, W21
	134 Call Type3Message.DecodeString, X0, X1, X2, X3
	135 Move [X19+40], X0
	136 Move X20, [X31+48]
	137 Move X19, [X31+56]
	138 Move X22, [X31+32]
	139 Move X21, [X31+40]
	140 Move X30, [X31+16]
	141 Move X23, [X31+24]
	142 Add X31, X31, 64
	143 Return 
	144 Call 0x1C17F20

Method: System.String DecodeString(System.Byte[] buffer, System.Int32 offset, System.Int32 len)

Disassembly:
	0x031FDB1C ADRP X23, 0xF24000
	0x031FDB20 LDRB W8, [X22 + 0x20E]
	0x031FDB24 LDR X23, [X23 + 0x408]
	0x031FDB28 MOV X19, X2
	0x031FDB2C MOV W21, W1
	0x031FDB30 MOV X20, X0
	0x031FDB34 TBNZ X8, 0x0, 0x31FDB4C
	0x031FDB38 ADRP X0, 0xF24000
	0x031FDB3C LDR X0, [X0 + 0x408]
	0x031FDB40 BL 0x1C16CF4
	0x031FDB44 MOVZ W8, 0x1
	0x031FDB48 STRB W8, [X22 + 0x20E]
	0x031FDB4C LDR X0, [X23]
	0x031FDB50 BL 0x1C16F10
	0x031FDB54 MOV W1, W21
	0x031FDB58 MOV X2, X31
	0x031FDB5C MOV X22, X0
	0x031FDB60 BL 0x31FD254
	0x031FDB64 MOV X0, X20
	0x031FDB68 MOV X1, X22
	0x031FDB6C MOV X2, X19
	0x031FDB70 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+20]
	006 Move W19, W3
	007 Move W20, W2
	008 Move X21, X1
	009 Move X0, X31
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Call Encoding.get_ASCII
	015 Compare X0, 0
	016 JumpIfEqual {31}
	017 Move X8, [X0]
	018 Move W2, W20
	019 Move W3, W19
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X5, [X8+904]
	023 Move X4, [X8+912]
	024 Move X1, X21
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 CallNoReturn X5
	028 Call Encoding.get_Unicode
	029 Compare X0, 0
	030 JumpIfNotEqual {17}
	031 Call 0x1C17F20

Method: System.Byte[] EncodeString(System.String text)

Disassembly:
	0x031FDB74 LDP X22, X21, [X31 + 0x10]
	0x031FDB78 LDP X30, X23, [X31], #0x30
	0x031FDB7C B 0x31FDA98
	0x031FDB80 STR X30, [X31 - 0x40]!
	0x031FDB84 STP X24, X23, [X31 + 0x10]
	0x031FDB88 STP X22, X21, [X31 + 0x20]
	0x031FDB8C STP X20, X19, [X31 + 0x30]
	0x031FDB90 ADRP X20, 0x11DF000
	0x031FDB94 LDRB W8, [X20 + 0x20F]
	0x031FDB98 MOV X19, X0
	0x031FDB9C TBNZ X8, 0x0, 0x31FDBCC
	0x031FDBA0 ADRP X0, 0xEF8000
	0x031FDBA4 LDR X0, [X0 + 0xC48]
	0x031FDBA8 BL 0x1C16CF4
	0x031FDBAC ADRP X0, 0xEF6000
	0x031FDBB0 LDR X0, [X0 + 0x8F0]
	0x031FDBB4 BL 0x1C16CF4
	0x031FDBB8 ADRP X0, 0xF23000
	0x031FDBBC LDR X0, [X0 + 0xBA8]
	0x031FDBC0 BL 0x1C16CF4
	0x031FDBC4 MOVZ W8, 0x1
	0x031FDBC8 STRB W8, [X20 + 0x20F]
	0x031FDBCC STRB W31, [X31 + 0xC]
	0x031FDBD0 CBZ X19, 0x31FDC84
	0x031FDBD4 ADRP X8, 0xEF6000
	0x031FDBD8 LDR X8, [X8 + 0x8F0]
	0x031FDBDC LDR X0, [X8]
	0x031FDBE0 BL 0x1C16F10
	0x031FDBE4 LDR W8, [X19 + 0x18]
	0x031FDBE8 MOV X2, X31
	0x031FDBEC MOV X20, X0
	0x031FDBF0 UBFM W1, W8, 0x1F, 0x1E
	0x031FDBF4 BL 0x3231B28
	0x031FDBF8 LDR X8, [X19 + 0x18]
	0x031FDBFC CMP W8, 0x1
	0x031FDC00 B.LT 0x31FDC8C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11E0000
	006 Move W8, [X21+513]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEF7000
	014 Move X0, [X0+1560]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+513], W8
	018 Compare X19, 0
	019 JumpIfEqual {38}
	020 Move W8, [X20+20]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {48}
	025 Move X0, X31
	026 Call Encoding.get_ASCII
	027 Compare X0, 0
	028 JumpIfEqual {52}
	029 Move X8, [X0]
	030 Move X1, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X3, [X8+616]
	034 Move X2, [X8+624]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 CallNoReturn X3
	038 Move X8, 0xEF7000
	039 Move X8, [X8+1560]
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move W1, W31
	043 Move X0, [X8]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Call 0x1C17D6C
	047 Return X0
	048 Move X0, X31
	049 Call Encoding.get_Unicode
	050 Compare X0, 0
	051 JumpIfNotEqual {29}
	052 Call 0x1C17F20

Method: System.Byte[] GetBytes()

Disassembly:
	0x031FDC04 ADRP X23, 0xEF8000
	0x031FDC08 ADRP X24, 0xF23000
	0x031FDC0C LDR X23, [X23 + 0xC48]
	0x031FDC10 LDR X24, [X24 + 0xBA8]
	0x031FDC14 MOV X21, X31
	0x031FDC18 AND X8, X8, 0x0
	0x031FDC1C ADD X22, X19, 0x20
	0x031FDC20 CMP X21, W8, UXTW
	0x031FDC24 B.CS 0x31FDCB8
	0x031FDC28 LDRB W8, [X22, X21, LSL]
	0x031FDC2C LDR X0, [X23]
	0x031FDC30 STRB W8, [X31 + 0xC]
	0x031FDC34 LDR W8, [X0 + 0xE0]
	0x031FDC38 CBNZ W8, 0x31FDC40
	0x031FDC3C BL 0x1C16DFC
	0x031FDC40 MOV X0, X31
	0x031FDC44 BL 0x3338524
	0x031FDC48 LDR X1, [X24]
	0x031FDC4C MOV X2, X0
	0x031FDC50 ADD X0, X31, 0xC
	0x031FDC54 MOV X3, X31
	0x031FDC58 BL 0x3319D9C
	0x031FDC5C CBZ X20, 0x31FDCB4
	0x031FDC60 MOV X1, X0
	0x031FDC64 MOV X0, X20
	0x031FDC68 MOV X2, X31
	0x031FDC6C BL 0x32333E0
	0x031FDC70 LDR W8, [X19 + 0x18]
	0x031FDC74 ADD X21, X21, 0x1
	0x031FDC78 CMP X21, W8, SXTW
	0x031FDC7C B.LT 0x31FDC20
	0x031FDC80 B 0x31FDC90
	0x031FDC84 MOV X0, X31
	0x031FDC88 B 0x31FDCA0
	0x031FDC8C CBZ X20, 0x31FDCB4
	0x031FDC90 LDR X8, [X20]
	0x031FDC94 MOV X0, X20
	0x031FDC98 LDP X9, X1, [X8 + 0x168]
	0x031FDC9C BLR X9
	0x031FDCA0 LDP X20, X19, [X31 + 0x30]
	0x031FDCA4 LDP X22, X21, [X31 + 0x20]
	0x031FDCA8 LDP X24, X23, [X31 + 0x10]
	0x031FDCAC LDR X30, [X31], #0x40
	0x031FDCB0 RET
	0x031FDCB4 BL 0x1C16F20
	0x031FDCB8 BL 0x1C16F28
	0x031FDCBC STP X30, X19, [X31 - 0x10]!
	0x031FDCC0 MOV X1, X31
	0x031FDCC4 MOV X19, X0
	0x031FDCC8 BL 0x3251230
	0x031FDCCC MOVZ W8, 0x80
	0x031FDCD0 STR W8, [X19 + 0x14]
	0x031FDCD4 LDP X30, X19, [X31], #0x10
	0x031FDCD8 RET
	0x031FDCDC STR X30, [X31 - 0x20]!
	0x031FDCE0 STP X20, X19, [X31 + 0x10]
	0x031FDCE4 ADRP X19, 0x11DF000
	0x031FDCE8 ADRP X20, 0xF24000
	0x031FDCEC LDRB W8, [X19 + 0x210]
	0x031FDCF0 LDR X20, [X20 + 0x410]
	0x031FDCF4 TBNZ X8, 0x0, 0x31FDD0C
	0x031FDCF8 ADRP X0, 0xF24000
	0x031FDCFC LDR X0, [X0 + 0x410]
	0x031FDD00 BL 0x1C16CF4
	0x031FDD04 MOVZ W8, 0x1
	0x031FDD08 STRB W8, [X19 + 0x210]
	0x031FDD0C LDR X0, [X20]
	0x031FDD10 BL 0x1C16F10
	0x031FDD14 MOV X19, X0
	0x031FDD18 BL 0x31FDD2C
	0x031FDD1C MOV X0, X19
	0x031FDD20 LDP X20, X19, [X31 + 0x10]
	0x031FDD24 LDR X30, [X31], #0x20
	0x031FDD28 RET
	0x031FDD2C STP X30, X21, [X31 - 0x20]!
	0x031FDD30 STP X20, X19, [X31 + 0x10]
	0x031FDD34 ADRP X21, 0x11DF000
	0x031FDD38 ADRP X20, 0xEF6000
	0x031FDD3C LDRB W8, [X21 + 0x212]
	0x031FDD40 LDR X20, [X20 + 0x618]
	0x031FDD44 MOV X19, X0
	0x031FDD48 TBNZ X8, 0x0, 0x31FDD60
	0x031FDD4C ADRP X0, 0xEF6000
	0x031FDD50 LDR X0, [X0 + 0x618]
	0x031FDD54 BL 0x1C16CF4
	0x031FDD58 MOVZ W8, 0x1
	0x031FDD5C STRB W8, [X21 + 0x212]
	0x031FDD60 MOV X0, X19
	0x031FDD64 MOV X1, X31
	0x031FDD68 BL 0x3251230
	0x031FDD6C MOVZ W8, 0x80
	0x031FDD70 STR W8, [X19 + 0x14]
	0x031FDD74 LDR X0, [X20]
	0x031FDD78 MOVZ W1, 0x10
	0x031FDD7C BL 0x1C16D6C
	0x031FDD80 STR X0, [X19 + 0x28]
	0x031FDD84 LDR X0, [X20]
	0x031FDD88 MOVZ W1, 0x10
	0x031FDD8C BL 0x1C16D6C
	0x031FDD90 STR X0, [X19 + 0x30]
	0x031FDD94 LDR X0, [X20]
	0x031FDD98 MOVZ W1, 0x10
	0x031FDD9C BL 0x1C16D6C
	0x031FDDA0 STR X0, [X19 + 0x38]
	0x031FDDA4 LDR X0, [X20]
	0x031FDDA8 MOVZ W1, 0x30
	0x031FDDAC BL 0x1C16D6C
	0x031FDDB0 LDR X8, [X19]
	0x031FDDB4 STR X0, [X19 + 0x48]
	0x031FDDB8 MOV X0, X19
	0x031FDDBC LDP X20, X19, [X31 + 0x10]
	0x031FDDC0 LDR X2, [X8 + 0x258]
	0x031FDDC4 LDR X1, [X8 + 0x260]
	0x031FDDC8 LDP X30, X21, [X31], #0x20
	0x031FDDCC BR X2
	0x031FDDD0 STR X30, [X31 - 0x20]!
	0x031FDDD4 STP X20, X19, [X31 + 0x10]
	0x031FDDD8 ADRP X20, 0x11DF000
	0x031FDDDC LDRB W8, [X20 + 0x211]
	0x031FDDE0 MOV W19, W1
	0x031FDDE4 TBNZ X8, 0x0, 0x31FDDFC
	0x031FDDE8 ADRP X0, 0xEF6000
	0x031FDDEC LDR X0, [X0 + 0x618]
	0x031FDDF0 BL 0x1C16CF4
	0x031FDDF4 MOVZ W8, 0x1
	0x031FDDF8 STRB W8, [X20 + 0x211]
	0x031FDDFC CMP W19, 0x1
	0x031FDE00 B.LT 0x31FDE54
	0x031FDE04 ADRP X8, 0xEF6000
	0x031FDE08 LDR X8, [X8 + 0x618]
	0x031FDE0C MOV W1, W19
	0x031FDE10 LDR X0, [X8]
	0x031FDE14 BL 0x1C16D6C
	0x031FDE18 CBZ X0, 0x31FDE68
	0x031FDE1C LDR W8, [X0 + 0x18]
	0x031FDE20 UBFM X9, X8, 0x20, 0x1F
	0x031FDE24 CMP X9, 0x1
	0x031FDE28 B.LT 0x31FDE58
	0x031FDE2C MOV X9, X31
	0x031FDE30 SXTW X10, W8
	0x031FDE34 ADD X11, X0, 0x20
	0x031FDE38 CMP X9, X8
	0x031FDE3C B.CS 0x31FDE64
	0x031FDE40 STRB W19, [X11, X9, LSL]
	0x031FDE44 ADD X9, X9, 0x1
	0x031FDE48 CMP X9, X10
	0x031FDE4C B.LT 0x31FDE38
	0x031FDE50 B 0x31FDE58
	0x031FDE54 MOV X0, X31
	0x031FDE58 LDP X20, X19, [X31 + 0x10]
	0x031FDE5C LDR X30, [X31], #0x20
	0x031FDE60 RET
	0x031FDE64 BL 0x1C16F28
	0x031FDE68 BL 0x1C16F20
	0x031FDE6C STP X30, X19, [X31 - 0x10]!
	0x031FDE70 MOV X19, X0
	0x031FDE74 LDR X0, [X0 + 0x28]
	0x031FDE78 MOVZ W2, 0x10
	0x031FDE7C MOV W1, W31
	0x031FDE80 MOV X3, X31
	0x031FDE84 STR W31, [X19 + 0x40]
	0x031FDE88 BL 0x339FA34
	0x031FDE8C LDR X0, [X19 + 0x30]
	0x031FDE90 MOVZ W2, 0x10
	0x031FDE94 MOV W1, W31
	0x031FDE98 MOV X3, X31
	0x031FDE9C BL 0x339FA34
	0x031FDEA0 LDR X0, [X19 + 0x38]
	0x031FDEA4 MOVZ W2, 0x10
	0x031FDEA8 MOV W1, W31
	0x031FDEAC MOV X3, X31
	0x031FDEB0 BL 0x339FA34
	0x031FDEB4 LDR X0, [X19 + 0x48]
	0x031FDEB8 MOVZ W2, 0x30
	0x031FDEBC MOV W1, W31
	0x031FDEC0 MOV X3, X31
	0x031FDEC4 LDP X30, X19, [X31], #0x10
	0x031FDEC8 B 0x339FA34
	0x031FDECC STR X30, [X31 - 0x40]!
	0x031FDED0 STP X24, X23, [X31 + 0x10]
	0x031FDED4 STP X22, X21, [X31 + 0x20]
	0x031FDED8 STP X20, X19, [X31 + 0x30]
	0x031FDEDC LDR W23, [X0 + 0x40]
	0x031FDEE0 MOVZ W8, 0x10
	0x031FDEE4 MOV W20, W3
	0x031FDEE8 MOV W21, W2
	0x031FDEEC ADD W9, W23, W3
	0x031FDEF0 SUB W24, W8, W23
	0x031FDEF4 MOV X19, X1
	0x031FDEF8 MOV X22, X0
	0x031FDEFC AND W8, W9, 0xF
	0x031FDF00 CMP W24, W3
	0x031FDF04 STR W8, [X0 + 0x40]
	0x031FDF08 B.LE 0x31FDF14
	0x031FDF0C MOV W24, W31
	0x031FDF10 B 0x31FDF7C
	0x031FDF14 LDR X2, [X22 + 0x38]
	0x031FDF18 MOV X0, X19
	0x031FDF1C MOV W1, W21
	0x031FDF20 MOV W3, W23
	0x031FDF24 MOV W4, W24
	0x031FDF28 MOV X5, X31
	0x031FDF2C BL 0x33A8A9C
	0x031FDF30 LDP X1, X2, [X22 + 0x28]
	0x031FDF34 LDR X3, [X22 + 0x38]
	0x031FDF38 MOV X0, X22
	0x031FDF3C MOV W4, W31
	0x031FDF40 BL 0x31FDFA8
	0x031FDF44 MOVZ W8, 0x1F
	0x031FDF48 SUB W8, W8, W23
	0x031FDF4C CMP W8, W20
	0x031FDF50 B.GE 0x31FDF78
	0x031FDF54 LDP X1, X2, [X22 + 0x28]
	0x031FDF58 ADD W4, W21, W24
	0x031FDF5C MOV X0, X22
	0x031FDF60 MOV X3, X19
	0x031FDF64 BL 0x31FDFA8
	0x031FDF68 ADD W8, W24, 0x1F
	0x031FDF6C CMP W8, W20
	0x031FDF70 ADD W24, W24, 0x10
	0x031FDF74 B.LT 0x31FDF54
	0x031FDF78 MOV W23, W31
	0x031FDF7C LDR X2, [X22 + 0x38]
	0x031FDF80 ADD W1, W24, W21
	0x031FDF84 SUB W4, W20, W24
	0x031FDF88 MOV X0, X19
	0x031FDF8C MOV W3, W23
	0x031FDF90 LDP X20, X19, [X31 + 0x30]
	0x031FDF94 LDP X22, X21, [X31 + 0x20]
	0x031FDF98 LDP X24, X23, [X31 + 0x10]
	0x031FDF9C MOV X5, X31
	0x031FDFA0 LDR X30, [X31], #0x40
	0x031FDFA4 B 0x33A8A9C
	0x031FDFA8 STP X29, X30, [X31 - 0x60]!
	0x031FDFAC STP X28, X27, [X31 + 0x10]
	0x031FDFB0 STP X26, X25, [X31 + 0x20]
	0x031FDFB4 STP X24, X23, [X31 + 0x30]
	0x031FDFB8 STP X22, X21, [X31 + 0x40]
	0x031FDFBC STP X20, X19, [X31 + 0x50]
	0x031FDFC0 ADRP X24, 0x11DF000
	0x031FDFC4 LDRB W8, [X24 + 0x214]
	0x031FDFC8 MOV W23, W4
	0x031FDFCC MOV X19, X3
	0x031FDFD0 MOV X20, X2
	0x031FDFD4 MOV X21, X1
	0x031FDFD8 MOV X22, X0
	0x031FDFDC TBNZ X8, 0x0, 0x31FDFF4
	0x031FDFE0 ADRP X0, 0xF24000
	0x031FDFE4 LDR X0, [X0 + 0x410]
	0x031FDFE8 BL 0x1C16CF4
	0x031FDFEC MOVZ W8, 0x1
	0x031FDFF0 STRB W8, [X24 + 0x214]
	0x031FDFF4 LDR X2, [X22 + 0x48]
	0x031FDFF8 MOVZ W4, 0x10
	0x031FDFFC MOV X0, X21
	0x031FE000 MOV W1, W31
	0x031FE004 MOV W3, W31
	0x031FE008 MOV X5, X31
	0x031FE00C BL 0x33A8A9C
	0x031FE010 LDR X2, [X22 + 0x48]
	0x031FE014 MOVZ W3, 0x10
	0x031FE018 MOVZ W4, 0x10
	0x031FE01C MOV X0, X19
	0x031FE020 MOV W1, W23
	0x031FE024 MOV X5, X31
	0x031FE028 BL 0x33A8A9C
	0x031FE02C CBZ X21, 0x31FE208
	0x031FE030 ADRP X24, 0xF23000
	0x031FE034 LDR X24, [X24 + 0x410]
	0x031FE038 MOV X8, X31
	0x031FE03C MOV W23, W23
	0x031FE040 ADD X9, X21, 0x20
	0x031FE044 LDR W10, [X21 + 0x18]
	0x031FE048 CMP X8, X10
	0x031FE04C B.CS 0x31FE1E8
	0x031FE050 CBZ X19, 0x31FE208
	0x031FE054 LDR W11, [X19 + 0x18]
	0x031FE058 ADD X10, X23, X8
	0x031FE05C CMP W10, W11
	0x031FE060 B.CS 0x31FE1E8
	0x031FE064 LDR X11, [X22 + 0x48]
	0x031FE068 CBZ X11, 0x31FE208
	0x031FE06C LDR W13, [X11 + 0x18]
	0x031FE070 ADD X12, X8, 0x20
	0x031FE074 CMP X12, X13
	0x031FE078 B.CS 0x31FE1E8
	0x031FE07C ADD X10, X19, W10, SXTW
	0x031FE080 LDRB W13, [X9, X8, LSL]
	0x031FE084 LDRB W10, [X10 + 0x20]
	0x031FE088 ADD X11, X11, X8
	0x031FE08C SUB X8, X12, 0x1F
	0x031FE090 CMP X8, 0x10
	0x031FE094 EOR W10, W10, W13, 0x0
	0x031FE098 STRB W10, [X11 + 0x40]
	0x031FE09C B.NE 0x31FE044
	0x031FE0A0 MOV W26, W31
	0x031FE0A4 MOV W25, W31
	0x031FE0A8 MOV X27, X31
	0x031FE0AC LDR X8, [X22 + 0x48]
	0x031FE0B0 CBZ X8, 0x31FE208
	0x031FE0B4 LDR W9, [X8 + 0x18]
	0x031FE0B8 CMP X27, X9
	0x031FE0BC B.CS 0x31FE1E8
	0x031FE0C0 LDR X0, [X24]
	0x031FE0C4 ADD X28, X8, X27
	0x031FE0C8 LDRB W29, [X28 + 0x20]
	0x031FE0CC LDR W8, [X0 + 0xE0]
	0x031FE0D0 CBNZ W8, 0x31FE0DC
	0x031FE0D4 BL 0x1C16DFC
	0x031FE0D8 LDR X0, [X24]
	0x031FE0DC LDR X8, [X0 + 0xB8]
	0x031FE0E0 LDR X8, [X8]
	0x031FE0E4 CBZ X8, 0x31FE208
	0x031FE0E8 LDR W9, [X8 + 0x18]
	0x031FE0EC CMP W26, W9
	0x031FE0F0 B.CS 0x31FE1E8
	0x031FE0F4 ADD X8, X8, W26, UXTW
	0x031FE0F8 LDRB W8, [X8 + 0x20]
	0x031FE0FC ADD X27, X27, 0x1
	0x031FE100 CMP X27, 0x30
	0x031FE104 EOR W8, W8, W29, 0x0
	0x031FE108 AND W26, W8, 0xFF
	0x031FE10C STRB W8, [X28 + 0x20]
	0x031FE110 B.NE 0x31FE0AC
	0x031FE114 ADD W8, W25, W26
	0x031FE118 ADD W25, W25, 0x1
	0x031FE11C CMP W25, 0x12
	0x031FE120 AND W26, W8, 0xFF
	0x031FE124 B.NE 0x31FE0A8
	0x031FE128 LDR X0, [X22 + 0x48]
	0x031FE12C MOVZ W4, 0x10
	0x031FE130 MOV W1, W31
	0x031FE134 MOV X2, X21
	0x031FE138 MOV W3, W31
	0x031FE13C MOV X5, X31
	0x031FE140 BL 0x33A8A9C
	0x031FE144 CBZ X20, 0x31FE208
	0x031FE148 LDR X8, [X20 + 0x18]
	0x031FE14C CMP W8, 0xF
	0x031FE150 B.LS 0x31FE1E8
	0x031FE154 AND X8, X8, 0x0
	0x031FE158 CBZ X8, 0x31FE1E8
	0x031FE15C LDRB W27, [X20 + 0x2F]
	0x031FE160 MOV X21, X31
	0x031FE164 ADD X22, X20, 0x20
	0x031FE168 UBFM X25, X23, 0x20, 0x1F
	0x031FE16C MOVZ X26, 0x1
	0x031FE170 LDR X0, [X24]
	0x031FE174 LDRB W28, [X22, X21, LSL]
	0x031FE178 LDR W8, [X0 + 0xE0]
	0x031FE17C CBNZ W8, 0x31FE188
	0x031FE180 BL 0x1C16DFC
	0x031FE184 LDR X0, [X24]
	0x031FE188 LDR W8, [X19 + 0x18]
	0x031FE18C ADD X9, X23, X21
	0x031FE190 CMP X9, X8
	0x031FE194 B.CS 0x31FE1E8
	0x031FE198 LDR X8, [X0 + 0xB8]
	0x031FE19C LDR X8, [X8]
	0x031FE1A0 CBZ X8, 0x31FE208
	0x031FE1A4 ADD X9, X19, X25, 0x20, ASR
	0x031FE1A8 LDRB W9, [X9 + 0x20]
	0x031FE1AC LDR W10, [X8 + 0x18]
	0x031FE1B0 EOR W9, W9, W27, 0x0
	0x031FE1B4 CMP W10, W9, UXTB
	0x031FE1B8 B.LS 0x31FE1E8
	0x031FE1BC ADD X8, X8, W9, UXTB
	0x031FE1C0 LDRB W8, [X8 + 0x20]
	0x031FE1C4 CMP X21, 0xF
	0x031FE1C8 EOR W27, W8, W28, 0x0
	0x031FE1CC STRB W27, [X22, X21, LSL]
	0x031FE1D0 B.EQ 0x31FE1EC
	0x031FE1D4 LDR W8, [X20 + 0x18]
	0x031FE1D8 ADD X21, X21, 0x1
	0x031FE1DC ADD X25, X25, X26
	0x031FE1E0 CMP X21, X8
	0x031FE1E4 B.CC 0x31FE170
	0x031FE1E8 BL 0x1C16F28
	0x031FE1EC LDP X20, X19, [X31 + 0x50]
	0x031FE1F0 LDP X22, X21, [X31 + 0x40]
	0x031FE1F4 LDP X24, X23, [X31 + 0x30]
	0x031FE1F8 LDP X26, X25, [X31 + 0x20]
	0x031FE1FC LDP X28, X27, [X31 + 0x10]
	0x031FE200 LDP X29, X30, [X31], #0x60
	0x031FE204 RET
	0x031FE208 BL 0x1C16F20
	0x031FE20C STR X30, [X31 - 0x20]!
	0x031FE210 STP X20, X19, [X31 + 0x10]
	0x031FE214 ADRP X20, 0x11DE000
	0x031FE218 LDRB W8, [X20 + 0x213]
	0x031FE21C MOV X19, X0
	0x031FE220 TBNZ X8, 0x0, 0x31FE238
	0x031FE224 ADRP X0, 0xEF5000
	0x031FE228 LDR X0, [X0 + 0x618]
	0x031FE22C BL 0x1C16CF4
	0x031FE230 MOVZ W8, 0x1
	0x031FE234 STRB W8, [X20 + 0x213]
	0x031FE238 LDR W8, [X19 + 0x40]
	0x031FE23C MOVZ W9, 0x10
	0x031FE240 SUB W20, W9, W8

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X30
	003 Move [X31+32], X28
	004 Move [X31+40], X27
	005 Move [X31+48], X26
	006 Move [X31+56], X25
	007 Move [X31+64], X24
	008 Move [X31+72], X23
	009 Move [X31+80], X22
	010 Move [X31+88], X21
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X19, 0x11E0000
	014 Move W8, [X19+514]
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF25000
	021 Move X0, [X0+872]
	022 Call 0x1C17CF4
	023 Move X0, 0xF25000
	024 Move X0, [X0+792]
	025 Call 0x1C17CF4
	026 Move X0, 0xEF7000
	027 Move X0, [X0+3584]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X19+514], W8
	031 Move [X31+24], X31
	032 Move [X31+8], X31
	033 Move X1, [X22+48]
	034 Move X0, X22
	035 Call Type3Message.EncodeString, X0, X1
	036 Move X1, [X22+56]
	037 Move X20, X0
	038 Move X0, X22
	039 Call Type3Message.EncodeString, X0, X1
	040 Move X1, [X22+40]
	041 Move X21, X0
	042 Move X0, X22
	043 Call Type3Message.EncodeString, X0, X1
	044 Move X23, [X22+72]
	045 Move X19, X0
	046 Compare X23, 0
	047 JumpIfEqual {71}
	048 Move X8, 0xF25000
	049 Move X8, [X8+872]
	050 Move W26, [X22+24]
	051 Move X27, [X22+56]
	052 Move X24, [X22+64]
	053 Move X25, [X22+48]
	054 Move X0, [X8]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Add X5, X31, 24
	060 Add X6, X31, 8
	061 Move X0, X23
	062 Move W1, W26
	063 Move X2, X27
	064 Move X3, X24
	065 Move X4, X25
	066 Call ChallengeResponse2.Compute, X0, X1, X2, X3, X4, X5, X6
	067 Move X23, [X31+24]
	068 Compare X23, 0
	069 JumpIfEqual {111}
	070 Move W27, [X23+24]
	071 Move W8, [X22+24]
	072 Compare W8, 0
	073 JumpIfNotEqual {344}
	074 Move X8, 0xF25000
	075 Move X23, [X22+64]
	076 Move X25, [X22+32]
	077 Move X8, [X8+792]
	078 Move X0, [X8]
	079 Call 0x1C17F10
	080 Move X1, X23
	081 Move X2, X25
	082 Move X24, X0
	083 Call ChallengeResponse..ctor, X0, X1, X2
	084 Compare X24, 0
	085 JumpIfEqual {362}
	086 Move X0, X24
	087 Call ChallengeResponse.get_LM, X0
	088 Move X23, X0
	089 Move [X31+24], X0
	090 Move X0, X24
	091 Call ChallengeResponse.get_NT, X0
	092 Move X25, X31
	093 Move [X31+8], X0
	094 Move W26, 6
	095 Move X10, 0xEF7000
	096 Move X8, [X24]
	097 Move X10, [X10+3584]
	098 NotImplemented "Instruction LDRH not yet implemented."
	099 Move X1, [X10]
	100 Compare X9, 0
	101 JumpIfEqual {108}
	102 Move X10, [X8+176]
	103 Add X10, X10, 8
	104 NotImplemented "Instruction LDUR not yet implemented."
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Subtract X9, X9, 1
	107 Add X10, X10, 16
	108 Move X0, X24
	109 Move W2, W31
	110 Call 0x1C5D788
	111 Move W27, W31
	112 Move X24, [X31+8]
	113 Compare X24, 0
	114 JumpIfEqual {118}
	115 Move W26, [X24+24]
	116 Compare X20, 0
	117 JumpIfNotEqual {121}
	118 Move W26, W31
	119 Compare X20, 0
	120 JumpIfEqual {343}
	121 Compare X21, 0
	122 JumpIfEqual {343}
	123 Compare X19, 0
	124 JumpIfEqual {343}
	125 Move W8, [X20+24]
	126 Move W9, [X21+24]
	127 Move W10, [X19+24]
	128 Add W11, W27, W26
	129 Add W8, W11, W8
	130 Add W8, W8, W9
	131 Add W8, W8, W10
	132 Add W1, W8, 64
	133 Move X0, X22
	134 Call MessageBase.PrepareMessage, X0, X1
	135 Compare X0, 0
	136 JumpIfEqual {343}
	137 Move X8, [X0+24]
	138 Move X25, X0
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move W9, [X20+24]
	141 Move W10, [X21+24]
	142 Move W11, [X19+24]
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move [X25+44], W27
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move [X25+45], W31
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move [X25+46], W27
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move [X25+47], W31
	151 Add W9, W9, W10
	152 Add W9, W9, W11
	153 Add W9, W9, 64
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Move [X25+48], W9
	156 Move W10, W9
	157 ShiftRight W10, 8
	158 And W10, W10, 0x7FFFFFFF
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move [X25+49], W10
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move [X25+52], W26
	163 Move W10, W26
	164 ShiftRight W10, 8
	165 And W10, W10, 0x7FFFFFFF
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move [X25+53], W10
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Move [X25+54], W26
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Move [X25+55], W10
	172 NotImplemented "Instruction SXTH not yet implemented."
	173 Add W28, W26, W27
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Move [X25+56], W28
	176 Move W9, W28
	177 ShiftRight W9, 8
	178 And W9, W9, 0x7FFFFFFF
	179 NotImplemented "Instruction CMP not yet implemented."
	180 Move [X25+57], W9
	181 Move X10, [X20+24]
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Move [X25+60], W10
	184 Move X9, X10
	185 ShiftRight X9, 8
	186 And X9, X9, 0x7FFFFFFF
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move [X25+61], W9
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move [X25+62], W10
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move [X25+63], W9
	193 Move W9, 64
	194 NotImplemented "Instruction CMP not yet implemented."
	195 Move [X25+64], W9
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Move [X25+65], W31
	198 Move X9, [X21+24]
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Move [X25+68], W9
	201 Move X11, X9
	202 ShiftRight X11, 8
	203 And X11, X11, 0x7FFFFFFF
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move [X25+69], W11
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move [X25+70], W9
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Move [X25+71], W11
	210 NotImplemented "Instruction SXTH not yet implemented."
	211 Add W10, W10, 64
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move [X25+72], W10
	214 Move W11, W10
	215 ShiftRight W11, 8
	216 And W11, W11, 0x7FFFFFFF
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Move [X25+73], W11
	219 Move X11, [X19+24]
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Move [X25+76], W11
	222 Move X12, X11
	223 ShiftRight X12, 8
	224 And X12, X12, 0x7FFFFFFF
	225 NotImplemented "Instruction CMP not yet implemented."
	226 Move [X25+77], W12
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Move [X25+78], W11
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Move [X25+79], W12
	231 NotImplemented "Instruction SXTH not yet implemented."
	232 NotImplemented "Instruction SXTH not yet implemented."
	233 Add W9, W9, W27
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Move [X25+80], W9
	236 Move W10, W9
	237 ShiftRight W10, 8
	238 And W10, W10, 0x7FFFFFFF
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Move [X25+81], W10
	241 NotImplemented "Instruction CMP not yet implemented."
	242 Move [X25+88], W8
	243 Move X10, X8
	244 ShiftRight X10, 8
	245 And X10, X10, 0x7FFFFFFF
	246 NotImplemented "Instruction CMP not yet implemented."
	247 Move [X25+89], W10
	248 Move W10, [X22+20]
	249 NotImplemented "Instruction CMP not yet implemented."
	250 Move [X25+92], W10
	251 Move W11, W10
	252 ShiftRight W11, 8
	253 And W11, W11, 0x7FFFFFFF
	254 NotImplemented "Instruction CMP not yet implemented."
	255 Move [X25+93], W11
	256 Move W11, W10
	257 ShiftRight W11, 16
	258 And W11, W11, 0x7FFFFFFF
	259 NotImplemented "Instruction CMP not yet implemented."
	260 Move [X25+94], W11
	261 Move W8, W10
	262 ShiftRight W8, 24
	263 And W8, W8, 0x7FFFFFFF
	264 Move [X25+95], W8
	265 Move W4, [X20+24]
	266 Move W3, 64
	267 Move X0, X20
	268 Move W1, W31
	269 Move X2, X25
	270 Move X5, X31
	271 NotImplemented "Instruction SXTH not yet implemented."
	272 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	273 Move W4, [X21+24]
	274 Move X0, X21
	275 Move W1, W31
	276 Move X2, X25
	277 Move W3, W27
	278 Move X5, X31
	279 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	280 Move W4, [X19+24]
	281 Move X0, X19
	282 Move W1, W31
	283 Move X2, X25
	284 Move W3, W22
	285 Move X5, X31
	286 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	287 Compare X23, 0
	288 JumpIfEqual {301}
	289 Move W4, [X23+24]
	290 Move X0, X23
	291 Move W1, W31
	292 Move X2, X25
	293 Move W3, W26
	294 Move X5, X31
	295 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	296 Move W2, [X23+24]
	297 Move X0, X23
	298 Move W1, W31
	299 Move X3, X31
	300 Call Array.Clear, X0, X1, X2
	301 Compare X24, 0
	302 JumpIfEqual {343}
	303 Move W4, [X24+24]
	304 NotImplemented "Instruction SXTH not yet implemented."
	305 Move X0, X24
	306 Move W1, W31
	307 Move X2, X25
	308 Move X5, X31
	309 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	310 Move W2, [X24+24]
	311 Move X0, X24
	312 Move W1, W31
	313 Move X3, X31
	314 Call Array.Clear, X0, X1, X2
	315 Move X0, X25
	316 Move X20, [X31+96]
	317 Move X19, [X31+104]
	318 Move X22, [X31+80]
	319 Move X21, [X31+88]
	320 Move X24, [X31+64]
	321 Move X23, [X31+72]
	322 Move X26, [X31+48]
	323 Move X25, [X31+56]
	324 Move X28, [X31+32]
	325 Move X27, [X31+40]
	326 Move X30, [X31+16]
	327 Add X31, X31, 112
	328 Return X0
	329 NotImplemented "Instruction LDRSW not yet implemented."
	330 Add X8, X8, X9
	331 Add X0, X8, 312
	332 Move X8, [X0]
	333 Move X1, [X0+8]
	334 Move X0, X24
	335 NotImplemented "Instruction BLR not yet implemented."
	336 Compare X25, 0
	337 JumpIfNotEqual {363}
	338 NotImplemented "Instruction CMP not yet implemented."
	339 Compare W26, 0
	340 JumpIfNotEqual {315}
	341 Move X23, [X22+72]
	342 Call 0x1C17F28
	343 Call 0x1C17F20
	344 Move X0, 0xEF6000
	345 Move X0, [X0+1456]
	346 Call 0x1C17D08
	347 Call 0x1C17F10
	348 Move X19, X0
	349 Move X0, 0xF24000
	350 Move X0, [X0+944]
	351 Call 0x1C17D08
	352 Move X1, X0
	353 Move X0, X19
	354 Move X2, X31
	355 Call InvalidOperationException..ctor, X0, X1
	356 Move X0, 0xF24000
	357 Move X0, [X0+952]
	358 Call 0x1C17D08
	359 Move X1, X0
	360 Move X0, X19
	361 Call 0x1C17DEC
	362 Call 0x1C17F20
	363 Move X0, X25
	364 Call 0x1C17F18
	365 Move X26, X0
	366 Move X26, X0
	367 Move X23, X31
	368 NotImplemented "Instruction CMP not yet implemented."
	369 Move X0, X26
	370 Call 0x3EB2AD0
	371 Move X25, [X0]
	372 Call 0x3EB2AE0
	373 Move W26, W31
	374 Compare X24, 0
	375 JumpIfNotEqual {95}
	376 Move X25, X31
	377 Move X26, X0
	378 Compare X24, 0
	379 JumpIfEqual {403}
	380 Move X10, 0xEF6000
	381 Move X8, [X24]
	382 Move X10, [X10+3584]
	383 NotImplemented "Instruction LDRH not yet implemented."
	384 Move X1, [X10]
	385 Compare X9, 0
	386 JumpIfEqual {393}
	387 Move X10, [X8+176]
	388 Add X10, X10, 8
	389 NotImplemented "Instruction LDUR not yet implemented."
	390 NotImplemented "Instruction CMP not yet implemented."
	391 Subtract X9, X9, 1
	392 Add X10, X10, 16
	393 Move X0, X24
	394 Move W2, W31
	395 Call 0x1C5D788
	396 NotImplemented "Instruction LDRSW not yet implemented."
	397 Add X8, X8, X9
	398 Add X0, X8, 312
	399 Move X8, [X0]
	400 Move X1, [X0+8]
	401 Move X0, X24
	402 NotImplemented "Instruction BLR not yet implemented."
	403 Compare X25, 0
	404 JumpIfNotEqual {407}
	405 Move X0, X26
	406 Call 0x1D2D690
	407 Move X0, X25
	408 Call 0x1C17F18
	409 Call 0x1991590

