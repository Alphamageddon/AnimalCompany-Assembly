Type: Mono.Security.Protocol.Ntlm.Type2Message

Method: System.Void .ctor(System.Byte[] message)

Disassembly:
	0x031FD210 B 0x31FD220
	0x031FD214 LDRSW X9, [X10]
	0x031FD218 ADD X8, X8, X9, 0x4, LSL
	0x031FD21C ADD X0, X8, 0x138
	0x031FD220 LDP X8, X1, [X0]
	0x031FD224 MOV X0, X24
	0x031FD228 BLR X8
	0x031FD22C CBNZ X25, 0x31FD238
	0x031FD230 MOV X0, X26
	0x031FD234 BL 0x1D2C690
	0x031FD238 MOV X0, X25
	0x031FD23C BL 0x1C16F18
	0x031FD240 BL 0x1990590
	0x031FD244 LDRB W0, [X0 + 0x10]
	0x031FD248 RET
	0x031FD24C LDRB W0, [X0 + 0x11]
	0x031FD250 RET
	0x031FD254 STP X30, X21, [X31 - 0x20]!
	0x031FD258 STP X20, X19, [X31 + 0x10]
	0x031FD25C MOV W20, W1
	0x031FD260 AND W21, W1, 0xFF
	0x031FD264 MOV X1, X31
	0x031FD268 MOV X19, X0
	0x031FD26C BL 0x33BDD8C
	0x031FD270 CMP W21, 0x3C
	0x031FD274 STRB W20, [X19 + 0x11]
	0x031FD278 B.HI 0x31FD28C
	0x031FD27C ANDS W31, W20, 0xFF
	0x031FD280 B.NE 0x31FD2AC
	0x031FD284 MOVZ W8, 0x1
	0x031FD288 B 0x31FD2B0
	0x031FD28C CMP W21, 0x51
	0x031FD290 B.CC 0x31FD2AC
	0x031FD294 AND W9, W20, 0xFF
	0x031FD298 CMP W9, 0x5A
	0x031FD29C MOVZ W8, 0x1
	0x031FD2A0 B.EQ 0x31FD2B0
	0x031FD2A4 CMP W9, 0x64
	0x031FD2A8 B.EQ 0x31FD2B0
	0x031FD2AC MOVZ W8, 0x2
	0x031FD2B0 STRB W8, [X19 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11E0000
	007 Move X21, 0xF25000
	008 Move W8, [X22+506]
	009 Move X21, [X21+896]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xEF7000
	017 Move X0, [X0+1560]
	018 Call 0x1C17CF4
	019 Move X0, 0xF25000
	020 Move X0, [X0+896]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+506], W8
	024 Move X0, [X21]
	025 Move X21, 0xEF7000
	026 Move W8, [X0+224]
	027 Move X21, [X21+1560]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Call Object..ctor, X0
	034 Move W8, 2
	035 Move [X20+16], W8
	036 Move X0, [X21]
	037 Move W1, 8
	038 Call 0x1C17D6C
	039 Move X8, [X20]
	040 Move [X20+24], X0
	041 Move X0, X20
	042 Move X1, X19
	043 Move X3, [X8+376]
	044 Move X2, [X8+384]
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 CallNoReturn X3

Method: System.Void Finalize()

Disassembly:
	0x031FD2B4 LDP X20, X19, [X31 + 0x10]
	0x031FD2B8 LDP X30, X21, [X31], #0x20
	0x031FD2BC RET
	0x031FD2C0 LDRB W9, [X0 + 0x11]
	0x031FD2C4 CMP W9, 0x3C
	0x031FD2C8 B.HI 0x31FD2D8
	0x031FD2CC CBNZ W9, 0x31FD2F4
	0x031FD2D0 MOVZ W8, 0x1
	0x031FD2D4 B 0x31FD2F8
	0x031FD2D8 CMP W9, 0x51
	0x031FD2DC B.CC 0x31FD2F4
	0x031FD2E0 CMP W9, 0x5A
	0x031FD2E4 MOVZ W8, 0x1
	0x031FD2E8 B.EQ 0x31FD2F8
	0x031FD2EC CMP W9, 0x64
	0x031FD2F0 B.EQ 0x31FD2F8
	0x031FD2F4 MOVZ W8, 0x2
	0x031FD2F8 STRB W8, [X0 + 0x10]
	0x031FD2FC RET
	0x031FD300 SUB X31, X31, 0x40
	0x031FD304 STP X30, X23, [X31 + 0x10]
	0x031FD308 STP X22, X21, [X31 + 0x20]
	0x031FD30C STP X20, X19, [X31 + 0x30]
	0x031FD310 ADRP X23, 0x11DF000
	0x031FD314 ADRP X20, 0xF24000
	0x031FD318 ADRP X22, 0xF24000
	0x031FD31C ADRP X21, 0xF24000
	0x031FD320 LDRB W8, [X23 + 0x203]
	0x031FD324 LDR X20, [X20 + 0x3C0]
	0x031FD328 LDR X22, [X22 + 0x3C8]
	0x031FD32C LDR X21, [X21 + 0x3D0]
	0x031FD330 MOV X19, X0
	0x031FD334 TBNZ X8, 0x0, 0x31FD364
	0x031FD338 ADRP X0, 0xF24000
	0x031FD33C LDR X0, [X0 + 0x3C8]
	0x031FD340 BL 0x1C16CF4
	0x031FD344 ADRP X0, 0xF24000
	0x031FD348 LDR X0, [X0 + 0x3C0]
	0x031FD34C BL 0x1C16CF4
	0x031FD350 ADRP X0, 0xF24000
	0x031FD354 LDR X0, [X0 + 0x3D0]
	0x031FD358 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, [X0+24]
	007 Compare X0, 0
	008 JumpIfEqual {13}
	009 Move W2, [X0+24]
	010 Move W1, W31
	011 Move X3, X31
	012 Call Array.Clear, X0, X1, X2
	013 Move X0, X19
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X1, X31
	017 Move X30, [X31+32]
	018 Move X21, [X31+40]
	019 Call Object.Finalize, X0
	020 Return 
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X21, X0
	023 Move X0, X21
	024 Call 0x3EB2AD0
	025 Move X20, [X0]
	026 Call 0x3EB2AE0
	027 Move X0, X19
	028 Move X1, X31
	029 Call Object.Finalize, X0
	030 Compare X20, 0
	031 JumpIfNotEqual {38}
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return 
	037 Move X20, X31
	038 Move X0, X20
	039 Call 0x1C17F18
	040 Move X21, X0
	041 Move X0, X19
	042 Move X1, X31
	043 Call Object.Finalize, X0
	044 Compare X20, 0
	045 JumpIfNotEqual {48}
	046 Move X0, X21
	047 Call 0x1D2D690
	048 Move X0, X20
	049 Call 0x1C17F18
	050 Call 0x1991590

Method: System.Byte[] get_Nonce()

Disassembly:
	0x031FC2EC CMP W1, 0x1
	0x031FC2F0 MOV X21, X0
	0x031FC2F4 B.NE 0x31FC324
	0x031FC2F8 MOV X0, X21
	0x031FC2FC BL 0x3EB1AD0
	0x031FC300 LDR X20, [X0]
	0x031FC304 BL 0x3EB1AE0
	0x031FC308 MOV X0, X19
	0x031FC30C MOV X1, X31
	0x031FC310 BL 0x33CB4DC
	0x031FC314 CBNZ X20, 0x31FC32C
	0x031FC318 LDP X20, X19, [X31 + 0x10]
	0x031FC31C LDP X30, X21, [X31], #0x20
	0x031FC320 RET
	0x031FC324 MOV X20, X31
	0x031FC328 B 0x31FC338
	0x031FC32C MOV X0, X20
	0x031FC330 BL 0x1C16F18
	0x031FC334 MOV X21, X0
	0x031FC338 MOV X0, X19
	0x031FC33C MOV X1, X31
	0x031FC340 BL 0x33CB4DC
	0x031FC344 CBNZ X20, 0x31FC350
	0x031FC348 MOV X0, X21
	0x031FC34C BL 0x1D2C690
	0x031FC350 MOV X0, X20
	0x031FC354 BL 0x1C16F18
	0x031FC358 BL 0x1990590
	0x031FC35C LDR X0, [X0 + 0x20]
	0x031FC360 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11E1000
	005 Move W8, [X20+507]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEF8000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+507], W8
	016 Move X0, [X19+24]
	017 Compare X0, 0
	018 JumpIfEqual {35}
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0xEF8000
	024 Move X8, [X8+1560]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {36}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Call 0x1C17F20
	036 Move X0, X19
	037 Move X1, X20
	038 Call 0x1C181E0

Method: System.String get_TargetName()

Disassembly:
	0x031FD35C MOVZ W8, 0x1
	0x031FD360 STRB W8, [X23 + 0x203]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Byte[] get_TargetInfo()

Disassembly:
	0x031FC274 MOV X1, X31
	0x031FC278 BL 0x33BDD8C
	0x031FC27C MOVZ W8, 0x2
	0x031FC280 STR W8, [X20 + 0x10]
	0x031FC284 LDR X0, [X21]
	0x031FC288 MOVZ W1, 0x8
	0x031FC28C BL 0x1C16D6C
	0x031FC290 LDR X8, [X20]
	0x031FC294 STR X0, [X20 + 0x18]
	0x031FC298 MOV X0, X20
	0x031FC29C MOV X1, X19
	0x031FC2A0 LDP X3, X2, [X8 + 0x178]
	0x031FC2A4 LDP X20, X19, [X31 + 0x20]
	0x031FC2A8 LDP X22, X21, [X31 + 0x10]
	0x031FC2AC LDR X30, [X31], #0x30
	0x031FC2B0 BR X3
	0x031FC2B4 STP X30, X21, [X31 - 0x20]!
	0x031FC2B8 STP X20, X19, [X31 + 0x10]
	0x031FC2BC MOV X19, X0
	0x031FC2C0 LDR X0, [X0 + 0x18]
	0x031FC2C4 CBZ X0, 0x31FC2D8
	0x031FC2C8 LDR W2, [X0 + 0x18]
	0x031FC2CC MOV W1, W31
	0x031FC2D0 MOV X3, X31
	0x031FC2D4 BL 0x339FA34
	0x031FC2D8 MOV X0, X19
	0x031FC2DC LDP X20, X19, [X31 + 0x10]
	0x031FC2E0 MOV X1, X31
	0x031FC2E4 LDP X30, X21, [X31], #0x20
	0x031FC2E8 B 0x33CB4DC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11E1000
	005 Move W8, [X20+508]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEF8000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+508], W8
	016 Move X0, [X19+40]
	017 Compare X0, 0
	018 JumpIfEqual {35}
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0xEF8000
	024 Move X8, [X8+1560]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {36}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Call 0x1C17F20
	036 Move X0, X19
	037 Move X1, X20
	038 Call 0x1C181E0

Method: System.Void Decode(System.Byte[] message)

Disassembly:
	0x031FD364 LDRB W8, [X19 + 0x10]
	0x031FD368 LDR X0, [X20]
	0x031FD36C ADD X1, X31, 0xC
	0x031FD370 STRB W8, [X31 + 0xC]
	0x031FD374 BL 0x1C16E04
	0x031FD378 MOV X20, X0
	0x031FD37C LDRB W8, [X19 + 0x11]
	0x031FD380 LDR X0, [X22]
	0x031FD384 ADD X1, X31, 0x8
	0x031FD388 STRB W8, [X31 + 0x8]
	0x031FD38C BL 0x1C16E04
	0x031FD390 LDR X8, [X21]
	0x031FD394 MOV X2, X0
	0x031FD398 MOV X1, X20
	0x031FD39C MOV X3, X31
	0x031FD3A0 MOV X0, X8
	0x031FD3A4 BL 0x3227BD4
	0x031FD3A8 LDP X20, X19, [X31 + 0x30]
	0x031FD3AC LDP X22, X21, [X31 + 0x20]
	0x031FD3B0 LDP X30, X23, [X31 + 0x10]
	0x031FD3B4 ADD X31, X31, 0x40
	0x031FD3B8 RET
	0x031FD3BC STP X30, X23, [X31 - 0x30]!
	0x031FD3C0 STP X22, X21, [X31 + 0x10]
	0x031FD3C4 STP X20, X19, [X31 + 0x20]
	0x031FD3C8 AND W22, W1, 0x1
	0x031FD3CC MOV X1, X31
	0x031FD3D0 MOV X19, X4
	0x031FD3D4 MOV W20, W3
	0x031FD3D8 MOV X21, X0
	0x031FD3DC AND W23, W2, 0x1
	0x031FD3E0 BL 0x33BDD8C
	0x031FD3E4 STRB W22, [X21 + 0x10]
	0x031FD3E8 STRB W23, [X21 + 0x11]
	0x031FD3EC STR W20, [X21 + 0x14]
	0x031FD3F0 STR X19, [X21 + 0x18]
	0x031FD3F4 LDP X20, X19, [X31 + 0x20]
	0x031FD3F8 LDP X22, X21, [X31 + 0x10]
	0x031FD3FC LDP X30, X23, [X31], #0x30
	0x031FD400 RET
	0x031FD404 LDRB W0, [X0 + 0x10]
	0x031FD408 RET
	0x031FD40C LDRB W0, [X0 + 0x11]
	0x031FD410 RET
	0x031FD414 LDRH W0, [X0 + 0x10]
	0x031FD418 RET
	0x031FD41C STRH W1, [X0 + 0x10]
	0x031FD420 RET
	0x031FD424 LDR W0, [X0 + 0x14]
	0x031FD428 RET
	0x031FD42C STR W1, [X0 + 0x14]
	0x031FD430 RET
	0x031FD434 STR X1, [X0 + 0x18]
	0x031FD438 RET
	0x031FD43C SUB X31, X31, 0x40
	0x031FD440 STP X30, X23, [X31 + 0x10]
	0x031FD444 STP X22, X21, [X31 + 0x20]
	0x031FD448 STP X20, X19, [X31 + 0x30]
	0x031FD44C ADRP X23, 0x11DF000
	0x031FD450 ADRP X20, 0xF24000
	0x031FD454 ADRP X22, 0xF24000
	0x031FD458 ADRP X21, 0xF24000
	0x031FD45C LDRB W8, [X23 + 0x204]
	0x031FD460 LDR X20, [X20 + 0x3D8]
	0x031FD464 LDR X22, [X22 + 0x3E0]
	0x031FD468 LDR X21, [X21 + 0x3E8]
	0x031FD46C MOV X19, X0
	0x031FD470 TBNZ X8, 0x0, 0x31FD4A0
	0x031FD474 ADRP X0, 0xF24000
	0x031FD478 LDR X0, [X0 + 0x3E0]
	0x031FD47C BL 0x1C16CF4
	0x031FD480 ADRP X0, 0xF24000
	0x031FD484 LDR X0, [X0 + 0x3D8]
	0x031FD488 BL 0x1C16CF4
	0x031FD48C ADRP X0, 0xF24000
	0x031FD490 LDR X0, [X0 + 0x3E8]
	0x031FD494 BL 0x1C16CF4
	0x031FD498 MOVZ W8, 0x1
	0x031FD49C STRB W8, [X23 + 0x204]
	0x031FD4A0 LDR W8, [X19 + 0x14]
	0x031FD4A4 LDR X0, [X20]
	0x031FD4A8 ADD X1, X31, 0xC
	0x031FD4AC STR W8, [X31 + 0xC]
	0x031FD4B0 BL 0x1C16E04
	0x031FD4B4 MOV X20, X0
	0x031FD4B8 LDRH W8, [X19 + 0x10]
	0x031FD4BC LDR X0, [X22]
	0x031FD4C0 ADD X1, X31, 0x8
	0x031FD4C4 STRH W8, [X31 + 0x8]
	0x031FD4C8 BL 0x1C16E04
	0x031FD4CC LDR X8, [X21]
	0x031FD4D0 MOV X2, X0
	0x031FD4D4 MOV X1, X20
	0x031FD4D8 MOV X3, X31
	0x031FD4DC MOV X0, X8
	0x031FD4E0 BL 0x3227BD4

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0x11E0000
	008 Move W8, [X21+509]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xEF7000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+509], W8
	020 Move X0, X20
	021 Move X1, X19
	022 Call MessageBase.Decode, X0, X1
	023 Add X0, X31, 4
	024 Move W2, 20
	025 Move X1, X19
	026 Move [X31+4], W31
	027 Call BitConverterLE.UIntFromBytes, X0, X1, X2
	028 Move W8, [X31+4]
	029 Move X2, [X20+24]
	030 Move W1, 24
	031 Move W4, 8
	032 Move X0, X19
	033 Move W3, W31
	034 Move X5, X31
	035 Move [X20+20], W8
	036 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	037 Add X0, X31, 12
	038 Move W2, 12
	039 Move X1, X19
	040 NotImplemented "Instruction STRH not yet implemented."
	041 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	042 NotImplemented "Instruction LDRH not yet implemented."
	043 Add X0, X31, 24
	044 Move W2, 16
	045 Move X1, X19
	046 NotImplemented "Instruction STRH not yet implemented."
	047 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	048 Compare W21, 0
	049 JumpIfEqual {71}
	050 Move W8, [X20+20]
	051 NotImplemented "Instruction LDRH not yet implemented."
	052 Move X0, X31
	053 Move TEMP, X8
	054 And TEMP, TEMP, 2
	055 Compare TEMP, 2
	056 JumpIfEqual {60}
	057 Call Encoding.get_Unicode
	058 Compare X0, 0
	059 JumpIfNotEqual {63}
	060 Call Encoding.get_ASCII
	061 Compare X0, 0
	062 JumpIfEqual {109}
	063 Move X8, [X0]
	064 Move X1, X19
	065 Move W2, W22
	066 Move W3, W21
	067 Move X9, [X8+904]
	068 Move X4, [X8+912]
	069 NotImplemented "Instruction BLR not yet implemented."
	070 Move [X20+32], X0
	071 Compare X19, 0
	072 JumpIfEqual {109}
	073 Move W8, [X19+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Add X0, X31, 28
	076 Move W2, 40
	077 Move X1, X19
	078 NotImplemented "Instruction STRH not yet implemented."
	079 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	080 NotImplemented "Instruction LDRH not yet implemented."
	081 Add X0, X31, 8
	082 Move W2, 44
	083 Move X1, X19
	084 NotImplemented "Instruction STRH not yet implemented."
	085 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	086 Compare W21, 0
	087 JumpIfEqual {102}
	088 Move X8, 0xEF7000
	089 NotImplemented "Instruction LDRH not yet implemented."
	090 Move X8, [X8+1560]
	091 Move W1, W21
	092 Move X0, [X8]
	093 Call 0x1C17D6C
	094 Move X2, X0
	095 Move [X20+40], X0
	096 Move X0, X19
	097 Move W1, W22
	098 Move W3, W31
	099 Move W4, W21
	100 Move X5, X31
	101 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	102 Move X20, [X31+48]
	103 Move X19, [X31+56]
	104 Move X22, [X31+32]
	105 Move X21, [X31+40]
	106 Move X30, [X31+16]
	107 Add X31, X31, 64
	108 Return 
	109 Call 0x1C17F20

Method: System.Byte[] GetBytes()

Disassembly:
	0x031FD4E4 LDP X20, X19, [X31 + 0x30]
	0x031FD4E8 LDP X22, X21, [X31 + 0x20]
	0x031FD4EC LDP X30, X23, [X31 + 0x10]
	0x031FD4F0 ADD X31, X31, 0x40
	0x031FD4F4 RET
	0x031FD4F8 MOV X1, X31
	0x031FD4FC B 0x33BDD8C
	0x031FD500 STP X30, X21, [X31 - 0x20]!
	0x031FD504 STP X20, X19, [X31 + 0x10]
	0x031FD508 LDR X8, [X2 + 0x8]
	0x031FD50C STP X1, X2, [X0 + 0x20]
	0x031FD510 MOV X19, X0
	0x031FD514 MOV X20, X1
	0x031FD518 STR X8, [X0 + 0x10]
	0x031FD51C LDRB W21, [X2 + 0x52]
	0x031FD520 STR X0, [X0 + 0x40]
	0x031FD524 MOV X0, X2
	0x031FD528 BL 0x1C16D84
	0x031FD52C TBZ X0, 0x0, 0x31FD544
	0x031FD530 CMP W21, 0x4
	0x031FD534 B.NE 0x31FD560
	0x031FD538 ADRP X8, 0xFFFFFFFFFE9B6000
	0x031FD53C ADD X8, X8, 0x4E0
	0x031FD540 B 0x31FD554
	0x031FD544 CMP W21, 0x3
	0x031FD548 B.NE 0x31FD55C
	0x031FD54C ADRP X8, 0xFFFFFFFFFE9B6000
	0x031FD550 ADD X8, X8, 0x4B4
	0x031FD554 STR X8, [X19 + 0x18]
	0x031FD558 B 0x31FD570
	0x031FD55C CBZ X20, 0x31FD588
	0x031FD560 LDR X8, [X19 + 0x10]
	0x031FD564 LDR X9, [X19 + 0x20]
	0x031FD568 STR X8, [X19 + 0x18]
	0x031FD56C STR X9, [X19 + 0x40]
	0x031FD570 ADRP X8, 0xFFFFFFFFFE9B6000
	0x031FD574 ADD X8, X8, 0x438
	0x031FD578 STR X8, [X19 + 0x38]
	0x031FD57C LDP X20, X19, [X31 + 0x10]
	0x031FD580 LDP X30, X21, [X31], #0x20
	0x031FD584 RET
	0x031FD588 ADRP X1, 0xFFFFFFFFFD91E000
	0x031FD58C ADD X1, X1, 0xEE3
	0x031FD590 MOV X0, X31
	0x031FD594 BL 0x1C16F3C
	0x031FD598 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W1, 40
	005 Move X20, X0
	006 Call MessageBase.PrepareMessage, X0, X1
	007 Compare X0, 0
	008 JumpIfEqual {48}
	009 Move X8, [X0+24]
	010 Move X19, X0
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move [X19+48], W8
	014 Move X9, X8
	015 ShiftRight X9, 8
	016 And X9, X9, 0x7FFFFFFF
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move [X19+49], W9
	019 Move W9, [X20+20]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move [X19+52], W9
	022 Move W9, [X20+20]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W9, W9
	025 ShiftRight W9, 8
	026 And W9, W9, 0x7FFFFFFF
	027 Move [X19+53], W9
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move [X19+54], W9
	031 Move W8, [X20+23]
	032 Move [X19+55], W8
	033 Move X0, [X20+24]
	034 Compare X0, 0
	035 JumpIfEqual {48}
	036 Move W4, [X0+24]
	037 Move W3, 24
	038 Move W1, W31
	039 Move X2, X19
	040 Move X5, X31
	041 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	042 Move X0, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Return X0
	047 Call 0x1C17F28
	048 Call 0x1C17F20

