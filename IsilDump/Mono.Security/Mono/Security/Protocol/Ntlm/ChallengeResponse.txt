Type: Mono.Security.Protocol.Ntlm.ChallengeResponse

Method: System.Void .ctor()

Disassembly:
	0x031FA488 BLR X9
	0x031FA48C CBZ X0, 0x31FA6A4
	0x031FA490 LDR X9, [X25]
	0x031FA494 ADRP X11, 0xF26000
	0x031FA498 LDR X8, [X0]
	0x031FA49C MOV X23, X0
	0x031FA4A0 LDR X10, [X9 + 0xB8]
	0x031FA4A4 LDR X11, [X11 + 0xEA0]
	0x031FA4A8 LDRH W9, [X8 + 0x12E]
	0x031FA4AC LDR X24, [X10]
	0x031FA4B0 LDR X1, [X11]
	0x031FA4B4 CBZ X9, 0x31FA4D8
	0x031FA4B8 LDR X10, [X8 + 0xB0]
	0x031FA4BC ADD X10, X10, 0x8
	0x031FA4C0 LDUR X11, [X10 - 0x8]
	0x031FA4C4 CMP X11, X1
	0x031FA4C8 B.EQ 0x31FA524
	0x031FA4CC SUBS X9, X9, 0x1
	0x031FA4D0 ADD X10, X10, 0x10
	0x031FA4D4 B.NE 0x31FA4C0
	0x031FA4D8 MOVZ W2, 0x3
	0x031FA4DC MOV X0, X23
	0x031FA4E0 BL 0x1C5C788
	0x031FA4E4 B 0x31FA534
	0x031FA4E8 LDR X0, [X25]
	0x031FA4EC LDR W8, [X0 + 0xE0]
	0x031FA4F0 CBNZ W8, 0x31FA4FC
	0x031FA4F4 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11E3000
	006 Move X20, 0xEFA000
	007 Move W8, [X21+479]
	008 Move X20, [X20+1560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEFA000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+479], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move [X19+16], W31
	023 Move X0, [X20]
	024 Move W1, 21
	025 Call 0x1C17D6C
	026 Move [X19+32], X0
	027 Move X0, [X20]
	028 Move W1, 21
	029 Call 0x1C17D6C
	030 Move [X19+40], X0
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return 

Method: System.Void .ctor(System.String password, System.Byte[] challenge)

Disassembly:
	0x031FA4F8 LDR X0, [X25]
	0x031FA4FC LDR X8, [X0 + 0xB8]
	0x031FA500 MOVZ W4, 0x8
	0x031FA504 MOV W1, W31
	0x031FA508 MOV X2, X20
	0x031FA50C LDR X0, [X8 + 0x8]
	0x031FA510 MOV W3, W31
	0x031FA514 MOV X5, X31
	0x031FA518 BL 0x33A8A9C
	0x031FA51C CBNZ X22, 0x31FA558
	0x031FA520 B 0x31FA604
	0x031FA524 LDR W9, [X10]
	0x031FA528 ADD W9, W9, 0x3
	0x031FA52C ADD X8, X8, W9, 0x4, SXTW

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X2
	006 Move X20, X1
	007 Move X21, X0
	008 Call ChallengeResponse..ctor, X0
	009 Move X0, X21
	010 Move X1, X20
	011 Call ChallengeResponse.set_Password, X0, X1
	012 Move X1, X19
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X0, X21
	016 Move X30, [X31+32]
	017 Move X21, [X31+40]
	018 Call ChallengeResponse.set_Challenge, X0, X1
	019 Return 

Method: System.Void Finalize()

Disassembly:
	0x031FAA64 LDR X9, [X8 + 0x278]
	0x031FAA68 LDR X1, [X8 + 0x280]
	0x031FAA6C BLR X9
	0x031FAA70 CBZ X0, 0x31FAB00
	0x031FAA74 LDR X8, [X0]
	0x031FAA78 LDR X1, [X24]
	0x031FAA7C MOV X21, X0
	0x031FAA80 LDRH W9, [X8 + 0x12E]
	0x031FAA84 CBZ X9, 0x31FAAA8
	0x031FAA88 LDR X10, [X8 + 0xB0]
	0x031FAA8C ADD X10, X10, 0x8
	0x031FAA90 LDUR X11, [X10 - 0x8]
	0x031FAA94 CMP X11, X1
	0x031FAA98 B.EQ 0x31FAAB8
	0x031FAA9C SUBS X9, X9, 0x1
	0x031FAAA0 ADD X10, X10, 0x10
	0x031FAAA4 B.NE 0x31FAA90
	0x031FAAA8 MOVZ W2, 0x3
	0x031FAAAC MOV X0, X21
	0x031FAAB0 BL 0x1C5C788
	0x031FAAB4 B 0x31FAAC8
	0x031FAAB8 LDR W9, [X10]
	0x031FAABC ADD W9, W9, 0x3
	0x031FAAC0 ADD X8, X8, W9, 0x4, SXTW
	0x031FAAC4 ADD X0, X8, 0x138
	0x031FAAC8 LDP X8, X6, [X0]
	0x031FAACC MOVZ W3, 0x8
	0x031FAAD0 MOVZ W5, 0x10
	0x031FAAD4 MOV X0, X21
	0x031FAAD8 MOV X1, X19
	0x031FAADC MOV W2, W31
	0x031FAAE0 MOV X4, X20
	0x031FAAE4 BLR X8
	0x031FAAE8 MOV X0, X20
	0x031FAAEC LDP X20, X19, [X31 + 0x30]
	0x031FAAF0 LDP X22, X21, [X31 + 0x20]
	0x031FAAF4 LDP X24, X23, [X31 + 0x10]
	0x031FAAF8 LDR X30, [X31], #0x40
	0x031FAAFC RET
	0x031FAB00 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+16]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {11}
	009 Move X0, X19
	010 Call ChallengeResponse.Dispose, X0
	011 Move X0, X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X1, X31
	015 Move X30, [X31+32]
	016 Move X21, [X31+40]
	017 Call Object.Finalize, X0
	018 Return 
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X21, X0
	021 Move X0, X21
	022 Call 0x3EB2AD0
	023 Move X20, [X0]
	024 Call 0x3EB2AE0
	025 Move X0, X19
	026 Move X1, X31
	027 Call Object.Finalize, X0
	028 Compare X20, 0
	029 JumpIfNotEqual {36}
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 
	035 Move X20, X31
	036 Move X0, X20
	037 Call 0x1C17F18
	038 Move X21, X0
	039 Move X0, X19
	040 Move X1, X31
	041 Call Object.Finalize, X0
	042 Compare X20, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X21
	045 Call 0x1D2D690
	046 Move X0, X20
	047 Call 0x1C17F18
	048 Call 0x1991590

Method: System.Void set_Password(System.String value)

Disassembly:
	0x031FA530 ADD X0, X8, 0x138
	0x031FA534 LDP X8, X6, [X0]
	0x031FA538 MOVZ W3, 0x8
	0x031FA53C MOV X0, X23
	0x031FA540 MOV X1, X24
	0x031FA544 MOV W2, W31
	0x031FA548 MOV X4, X20
	0x031FA54C MOV W5, W31
	0x031FA550 BLR X8
	0x031FA554 CBZ X22, 0x31FA604
	0x031FA558 LDR W8, [X22 + 0x10]
	0x031FA55C CMP W8, 0x7
	0x031FA560 B.LE 0x31FA604
	0x031FA564 LDR X0, [X25]
	0x031FA568 LDR W8, [X0 + 0xE0]
	0x031FA56C CBNZ W8, 0x31FA574
	0x031FA570 BL 0x1C16DFC
	0x031FA574 MOVZ W1, 0x7
	0x031FA578 MOV X0, X22
	0x031FA57C BL 0x31FA6A8
	0x031FA580 LDR X8, [X21]
	0x031FA584 MOV X1, X0
	0x031FA588 MOV X0, X21
	0x031FA58C LDP X9, X2, [X8 + 0x1F8]
	0x031FA590 BLR X9
	0x031FA594 LDR X8, [X21]
	0x031FA598 MOV X0, X21
	0x031FA59C LDR X9, [X8 + 0x278]
	0x031FA5A0 LDR X1, [X8 + 0x280]
	0x031FA5A4 BLR X9
	0x031FA5A8 CBZ X0, 0x31FA6A4
	0x031FA5AC LDR X9, [X25]
	0x031FA5B0 ADRP X11, 0xF26000
	0x031FA5B4 LDR X8, [X0]
	0x031FA5B8 MOV X22, X0
	0x031FA5BC LDR X10, [X9 + 0xB8]
	0x031FA5C0 LDR X11, [X11 + 0xEA0]
	0x031FA5C4 LDRH W9, [X8 + 0x12E]
	0x031FA5C8 LDR X23, [X10]
	0x031FA5CC LDR X1, [X11]
	0x031FA5D0 CBZ X9, 0x31FA5F4
	0x031FA5D4 LDR X10, [X8 + 0xB0]
	0x031FA5D8 ADD X10, X10, 0x8
	0x031FA5DC LDUR X11, [X10 - 0x8]
	0x031FA5E0 CMP X11, X1
	0x031FA5E4 B.EQ 0x31FA63C
	0x031FA5E8 SUBS X9, X9, 0x1
	0x031FA5EC ADD X10, X10, 0x10
	0x031FA5F0 B.NE 0x31FA5DC
	0x031FA5F4 MOVZ W2, 0x3
	0x031FA5F8 MOV X0, X22
	0x031FA5FC BL 0x1C5C788
	0x031FA600 B 0x31FA64C
	0x031FA604 LDR X0, [X25]
	0x031FA608 LDR W8, [X0 + 0xE0]
	0x031FA60C CBNZ W8, 0x31FA618
	0x031FA610 BL 0x1C16DFC
	0x031FA614 LDR X0, [X25]
	0x031FA618 LDR X8, [X0 + 0xB8]
	0x031FA61C MOVZ W3, 0x8
	0x031FA620 MOVZ W4, 0x8
	0x031FA624 MOV W1, W31
	0x031FA628 LDR X0, [X8 + 0x8]
	0x031FA62C MOV X2, X20
	0x031FA630 MOV X5, X31
	0x031FA634 BL 0x33A8A9C
	0x031FA638 B 0x31FA66C
	0x031FA63C LDR W9, [X10]
	0x031FA640 ADD W9, W9, 0x3
	0x031FA644 ADD X8, X8, W9, 0x4, SXTW
	0x031FA648 ADD X0, X8, 0x138
	0x031FA64C LDP X8, X6, [X0]
	0x031FA650 MOVZ W3, 0x8
	0x031FA654 MOVZ W5, 0x8
	0x031FA658 MOV X0, X22
	0x031FA65C MOV X1, X23
	0x031FA660 MOV W2, W31
	0x031FA664 MOV X4, X20
	0x031FA668 BLR X8
	0x031FA66C MOV X0, X21
	0x031FA670 MOV X1, X31
	0x031FA674 BL 0x3260840
	0x031FA678 LDR X0, [X25]
	0x031FA67C LDR W8, [X0 + 0xE0]
	0x031FA680 CBNZ W8, 0x31FA688
	0x031FA684 BL 0x1C16DFC
	0x031FA688 MOV X0, X19
	0x031FA68C MOV X1, X20
	0x031FA690 LDP X20, X19, [X31 + 0x30]
	0x031FA694 LDP X22, X21, [X31 + 0x20]
	0x031FA698 LDP X24, X23, [X31 + 0x10]
	0x031FA69C LDP X30, X25, [X31], #0x40
	0x031FA6A0 B 0x31FA810
	0x031FA6A4 BL 0x1C16F20
	0x031FA6A8 STP X30, X23, [X31 - 0x30]!
	0x031FA6AC STP X22, X21, [X31 + 0x10]
	0x031FA6B0 STP X20, X19, [X31 + 0x20]
	0x031FA6B4 ADRP X20, 0x11E2000
	0x031FA6B8 ADRP X22, 0xEF9000
	0x031FA6BC LDRB W8, [X20 + 0x1EF]
	0x031FA6C0 LDR X22, [X22 + 0x618]
	0x031FA6C4 MOV W19, W1
	0x031FA6C8 MOV X21, X0
	0x031FA6CC TBNZ X8, 0x0, 0x31FA708
	0x031FA6D0 ADRP X0, 0xEF9000
	0x031FA6D4 LDR X0, [X0 + 0x618]
	0x031FA6D8 BL 0x1C16CF4
	0x031FA6DC ADRP X0, 0xF27000
	0x031FA6E0 LDR X0, [X0 + 0x368]
	0x031FA6E4 BL 0x1C16CF4
	0x031FA6E8 ADRP X0, 0xEFB000
	0x031FA6EC LDR X0, [X0 + 0xC48]
	0x031FA6F0 BL 0x1C16CF4
	0x031FA6F4 ADRP X0, 0xEF9000
	0x031FA6F8 LDR X0, [X0 + 0x5A8]
	0x031FA6FC BL 0x1C16CF4
	0x031FA700 MOVZ W8, 0x1
	0x031FA704 STRB W8, [X20 + 0x1EF]
	0x031FA708 LDR X0, [X22]
	0x031FA70C MOVZ W1, 0x7
	0x031FA710 BL 0x1C16D6C
	0x031FA714 CBZ X21, 0x31FA80C
	0x031FA718 ADRP X8, 0xEF9000
	0x031FA71C LDR X8, [X8 + 0x5A8]
	0x031FA720 MOV X20, X0
	0x031FA724 ADRP X23, 0xEFB000
	0x031FA728 LDR W22, [X21 + 0x10]
	0x031FA72C LDR X0, [X8]
	0x031FA730 LDR W8, [X0 + 0xE0]
	0x031FA734 LDR X23, [X23 + 0xC48]
	0x031FA738 CBNZ W8, 0x31FA740
	0x031FA73C BL 0x1C16DFC
	0x031FA740 SUB W0, W22, W19
	0x031FA744 MOVZ W1, 0x7
	0x031FA748 MOV X2, X31
	0x031FA74C BL 0x337EE94
	0x031FA750 MOV W22, W0
	0x031FA754 MOV X0, X31
	0x031FA758 BL 0x3242EC8
	0x031FA75C LDR X8, [X23]
	0x031FA760 MOV X23, X0
	0x031FA764 LDR W9, [X8 + 0xE0]
	0x031FA768 CBNZ W9, 0x31FA774
	0x031FA76C MOV X0, X8
	0x031FA770 BL 0x1C16DFC
	0x031FA774 MOV X0, X31
	0x031FA778 BL 0x33387A0
	0x031FA77C MOV X1, X0
	0x031FA780 MOV X0, X21
	0x031FA784 MOV X2, X31
	0x031FA788 BL 0x322B7DC
	0x031FA78C CBZ X23, 0x31FA80C
	0x031FA790 LDR X8, [X23]
	0x031FA794 ADRP X21, 0xF27000
	0x031FA798 MOV X1, X0
	0x031FA79C MOV X0, X23
	0x031FA7A0 LDR X9, [X8 + 0x278]
	0x031FA7A4 LDR X6, [X8 + 0x280]
	0x031FA7A8 LDR X21, [X21 + 0x368]
	0x031FA7AC MOV W2, W19
	0x031FA7B0 MOV W3, W22
	0x031FA7B4 MOV X4, X20
	0x031FA7B8 MOV W5, W31
	0x031FA7BC BLR X9
	0x031FA7C0 LDR X0, [X21]
	0x031FA7C4 LDR W8, [X0 + 0xE0]
	0x031FA7C8 CBNZ W8, 0x31FA7D0
	0x031FA7CC BL 0x1C16DFC
	0x031FA7D0 MOV X0, X20
	0x031FA7D4 MOV W1, W31
	0x031FA7D8 BL 0x31FB55C
	0x031FA7DC CBZ X20, 0x31FA80C
	0x031FA7E0 LDR W2, [X20 + 0x18]
	0x031FA7E4 MOV X19, X0
	0x031FA7E8 MOV X0, X20
	0x031FA7EC MOV W1, W31
	0x031FA7F0 MOV X3, X31
	0x031FA7F4 BL 0x339FA34
	0x031FA7F8 MOV X0, X19
	0x031FA7FC LDP X20, X19, [X31 + 0x20]
	0x031FA800 LDP X22, X21, [X31 + 0x10]
	0x031FA804 LDP X30, X23, [X31], #0x30
	0x031FA808 RET
	0x031FA80C BL 0x1C16F20
	0x031FA810 STR X30, [X31 - 0x40]!
	0x031FA814 STP X24, X23, [X31 + 0x10]
	0x031FA818 STP X22, X21, [X31 + 0x20]
	0x031FA81C STP X20, X19, [X31 + 0x30]
	0x031FA820 ADRP X22, 0x11E2000
	0x031FA824 ADRP X23, 0xEF9000
	0x031FA828 ADRP X20, 0xF27000
	0x031FA82C LDRB W8, [X22 + 0x1ED]
	0x031FA830 LDR X23, [X23 + 0x618]
	0x031FA834 LDR X20, [X20 + 0x320]
	0x031FA838 MOV X21, X1
	0x031FA83C MOV X19, X0
	0x031FA840 TBNZ X8, 0x0, 0x31FA87C
	0x031FA844 ADRP X0, 0xEF9000
	0x031FA848 LDR X0, [X0 + 0x618]
	0x031FA84C BL 0x1C16CF4
	0x031FA850 ADRP X0, 0xF27000
	0x031FA854 LDR X0, [X0 + 0x368]
	0x031FA858 BL 0x1C16CF4
	0x031FA85C ADRP X0, 0xF27000
	0x031FA860 LDR X0, [X0 + 0x320]
	0x031FA864 BL 0x1C16CF4
	0x031FA868 ADRP X0, 0xF26000
	0x031FA86C LDR X0, [X0 + 0xEA0]
	0x031FA870 BL 0x1C16CF4
	0x031FA874 MOVZ W8, 0x1
	0x031FA878 STRB W8, [X22 + 0x1ED]
	0x031FA87C LDR X0, [X23]
	0x031FA880 MOVZ W1, 0x18
	0x031FA884 BL 0x1C16D6C
	0x031FA888 LDR X8, [X20]
	0x031FA88C MOV X20, X0
	0x031FA890 LDR W9, [X8 + 0xE0]
	0x031FA894 CBNZ W9, 0x31FA8A0
	0x031FA898 MOV X0, X8
	0x031FA89C BL 0x1C16DFC
	0x031FA8A0 MOV X0, X31
	0x031FA8A4 BL 0x3252CD4
	0x031FA8A8 CBZ X0, 0x31FAB00
	0x031FA8AC LDR X8, [X0]
	0x031FA8B0 ADRP X23, 0xF27000
	0x031FA8B4 MOVZ W1, 0x2
	0x031FA8B8 MOV X22, X0
	0x031FA8BC LDR X9, [X8 + 0x248]
	0x031FA8C0 LDR X2, [X8 + 0x250]
	0x031FA8C4 LDR X23, [X23 + 0x368]
	0x031FA8C8 BLR X9
	0x031FA8CC LDR X0, [X23]
	0x031FA8D0 LDR W8, [X0 + 0xE0]
	0x031FA8D4 CBNZ W8, 0x31FA8DC
	0x031FA8D8 BL 0x1C16DFC
	0x031FA8DC MOV X0, X21
	0x031FA8E0 MOV W1, W31
	0x031FA8E4 BL 0x31FB55C
	0x031FA8E8 LDR X8, [X22]
	0x031FA8EC MOV X1, X0
	0x031FA8F0 MOV X0, X22
	0x031FA8F4 LDP X9, X2, [X8 + 0x1F8]
	0x031FA8F8 BLR X9
	0x031FA8FC LDR X8, [X22]
	0x031FA900 MOV X0, X22
	0x031FA904 LDR X9, [X8 + 0x278]
	0x031FA908 LDR X1, [X8 + 0x280]
	0x031FA90C BLR X9
	0x031FA910 CBZ X0, 0x31FAB00
	0x031FA914 ADRP X24, 0xF26000
	0x031FA918 LDR X8, [X0]
	0x031FA91C LDR X24, [X24 + 0xEA0]
	0x031FA920 MOV X23, X0
	0x031FA924 LDRH W9, [X8 + 0x12E]
	0x031FA928 LDR X1, [X24]
	0x031FA92C CBZ X9, 0x31FA950
	0x031FA930 LDR X10, [X8 + 0xB0]
	0x031FA934 ADD X10, X10, 0x8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x11E3000
	010 Move W8, [X20+480]
	011 Move X21, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xEFA000
	018 Move X0, [X0+1560]
	019 Call 0x1C17CF4
	020 Move X0, 0xF28000
	021 Move X0, [X0+792]
	022 Call 0x1C17CF4
	023 Move X0, 0xF28000
	024 Move X0, [X0+800]
	025 Call 0x1C17CF4
	026 Move X0, 0xF27000
	027 Move X0, [X0+3744]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+480], W8
	031 Move W8, [X19+16]
	032 Compare W8, 0
	033 JumpIfNotEqual {265}
	034 Move X8, 0xF28000
	035 Move X8, [X8+800]
	036 Move X0, [X8]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X31
	042 Call DES.Create
	043 Compare X0, 0
	044 JumpIfEqual {264}
	045 Move X8, [X0]
	046 Move X25, 0xF28000
	047 Move W1, 2
	048 Move X20, X0
	049 Move X9, [X8+584]
	050 Move X2, [X8+592]
	051 Move X25, [X25+792]
	052 NotImplemented "Instruction BLR not yet implemented."
	053 Compare X21, 0
	054 JumpIfEqual {101}
	055 Move W8, [X21+16]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X0, X19
	058 Move X1, X21
	059 Move W2, W31
	060 Call ChallengeResponse.PasswordToKey, X0, X1, X2
	061 Move X8, [X20]
	062 Move X1, X0
	063 Move X0, X20
	064 Move X9, [X8+504]
	065 Move X2, [X8+512]
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Move X8, [X20]
	068 Move X0, X20
	069 Move X9, [X8+632]
	070 Move X1, [X8+640]
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Move X8, [X25]
	073 Move X22, X0
	074 Move W9, [X8+224]
	075 Compare W9, 0
	076 JumpIfNotEqual {80}
	077 Move X0, X8
	078 Call 0x1C17DFC
	079 Move X8, [X25]
	080 Compare X22, 0
	081 JumpIfEqual {264}
	082 Move X10, 0xF27000
	083 Move X9, [X8+184]
	084 Move X8, [X22]
	085 Move X23, [X19+32]
	086 Move X10, [X10+3744]
	087 Move X24, [X9]
	088 NotImplemented "Instruction LDRH not yet implemented."
	089 Move X1, [X10]
	090 Compare X9, 0
	091 JumpIfEqual {98}
	092 Move X10, [X8+176]
	093 Add X10, X10, 8
	094 NotImplemented "Instruction LDUR not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Subtract X9, X9, 1
	097 Add X10, X10, 16
	098 Move W2, 3
	099 Move X0, X22
	100 Call 0x1C5D788
	101 Move X0, [X25]
	102 Move W8, [X0+224]
	103 Compare W8, 0
	104 JumpIfNotEqual {107}
	105 Call 0x1C17DFC
	106 Move X0, [X25]
	107 Move X8, [X0+184]
	108 Move X2, [X19+32]
	109 Move W4, 8
	110 Move W1, W31
	111 Move X0, [X8+8]
	112 Move W3, W31
	113 Move X5, X31
	114 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	115 Compare X21, 0
	116 JumpIfNotEqual {132}
	117 Move W9, [X10]
	118 Add W9, W9, 3
	119 Add X8, X8, W9
	120 Add X0, X8, 312
	121 Move X8, [X0]
	122 Move X6, [X0+8]
	123 Move W3, 8
	124 Move X0, X22
	125 Move X1, X24
	126 Move W2, W31
	127 Move X4, X23
	128 Move W5, W31
	129 NotImplemented "Instruction BLR not yet implemented."
	130 Compare X21, 0
	131 JumpIfEqual {178}
	132 Move W8, [X21+16]
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move W2, 7
	135 Move X0, X19
	136 Move X1, X21
	137 Call ChallengeResponse.PasswordToKey, X0, X1, X2
	138 Move X8, [X20]
	139 Move X1, X0
	140 Move X0, X20
	141 Move X9, [X8+504]
	142 Move X2, [X8+512]
	143 NotImplemented "Instruction BLR not yet implemented."
	144 Move X8, [X20]
	145 Move X0, X20
	146 Move X9, [X8+632]
	147 Move X1, [X8+640]
	148 NotImplemented "Instruction BLR not yet implemented."
	149 Move X8, [X25]
	150 Move X22, X0
	151 Move W9, [X8+224]
	152 Compare W9, 0
	153 JumpIfNotEqual {157}
	154 Move X0, X8
	155 Call 0x1C17DFC
	156 Move X8, [X25]
	157 Compare X22, 0
	158 JumpIfEqual {264}
	159 Move X10, 0xF27000
	160 Move X9, [X8+184]
	161 Move X8, [X22]
	162 Move X23, [X19+32]
	163 Move X10, [X10+3744]
	164 Move X24, [X9]
	165 NotImplemented "Instruction LDRH not yet implemented."
	166 Move X1, [X10]
	167 Compare X9, 0
	168 JumpIfEqual {175}
	169 Move X10, [X8+176]
	170 Add X10, X10, 8
	171 NotImplemented "Instruction LDUR not yet implemented."
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Subtract X9, X9, 1
	174 Add X10, X10, 16
	175 Move W2, 3
	176 Move X0, X22
	177 Call 0x1C5D788
	178 Move X0, [X25]
	179 Move W8, [X0+224]
	180 Compare W8, 0
	181 JumpIfNotEqual {184}
	182 Call 0x1C17DFC
	183 Move X0, [X25]
	184 Move X8, [X0+184]
	185 Move X2, [X19+32]
	186 Move W3, 8
	187 Move W4, 8
	188 Move X0, [X8+8]
	189 Move W1, W31
	190 Move X5, X31
	191 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	192 Move W9, [X10]
	193 Add W9, W9, 3
	194 Add X8, X8, W9
	195 Add X0, X8, 312
	196 Move X8, [X0]
	197 Move X6, [X0+8]
	198 Move W3, 8
	199 Move W5, 8
	200 Move X0, X22
	201 Move X1, X24
	202 Move W2, W31
	203 Move X4, X23
	204 NotImplemented "Instruction BLR not yet implemented."
	205 Move X0, X31
	206 Call MD4.Create
	207 Move X22, X0
	208 Compare X21, 0
	209 JumpIfEqual {219}
	210 Move X0, X31
	211 Call Encoding.get_Unicode
	212 Compare X0, 0
	213 JumpIfEqual {264}
	214 Move X8, [X0]
	215 Move X1, X21
	216 Move X9, [X8+616]
	217 Move X2, [X8+624]
	218 NotImplemented "Instruction BLR not yet implemented."
	219 Move X8, 0xEFA000
	220 Move X8, [X8+1560]
	221 Move W1, W31
	222 Move X0, [X8]
	223 Call 0x1C17D6C
	224 Move X21, X0
	225 Compare X22, 0
	226 JumpIfEqual {264}
	227 Move X0, X22
	228 Move X1, X21
	229 Move X2, X31
	230 Call HashAlgorithm.ComputeHash, X0, X1
	231 Move X2, [X19+40]
	232 Move W4, 16
	233 Move W1, W31
	234 Move W3, W31
	235 Move X5, X31
	236 Move X19, X0
	237 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	238 Compare X21, 0
	239 JumpIfEqual {264}
	240 Move W2, [X21+24]
	241 Move X0, X21
	242 Move W1, W31
	243 Move X3, X31
	244 Call Array.Clear, X0, X1, X2
	245 Compare X19, 0
	246 JumpIfEqual {264}
	247 Move W2, [X19+24]
	248 Move X0, X19
	249 Move W1, W31
	250 Move X3, X31
	251 Call Array.Clear, X0, X1, X2
	252 Move X0, X20
	253 Move X20, [X31+48]
	254 Move X19, [X31+56]
	255 Move X22, [X31+32]
	256 Move X21, [X31+40]
	257 Move X24, [X31+16]
	258 Move X23, [X31+24]
	259 Move X1, X31
	260 Move X30, [X31+64]
	261 Move X25, [X31+72]
	262 Call SymmetricAlgorithm.Clear, X0
	263 Return 
	264 Call 0x1C17F20
	265 Move X0, 0xF23000
	266 Move X0, [X0+1208]
	267 Call 0x1C17D08
	268 Call 0x1C17F10
	269 Move X19, X0
	270 Move X0, 0xF28000
	271 Move X0, [X0+808]
	272 Call 0x1C17D08
	273 Move X1, X0
	274 Move X0, X19
	275 Move X2, X31
	276 Call ObjectDisposedException..ctor, X0, X1
	277 Move X0, 0xF28000
	278 Move X0, [X0+816]
	279 Call 0x1C17D08
	280 Move X1, X0
	281 Move X0, X19
	282 Call 0x1C17DEC

Method: System.Void set_Challenge(System.Byte[] value)

Disassembly:
	0x031FA938 LDUR X11, [X10 - 0x8]
	0x031FA93C CMP X11, X1
	0x031FA940 B.EQ 0x31FA960
	0x031FA944 SUBS X9, X9, 0x1
	0x031FA948 ADD X10, X10, 0x10
	0x031FA94C B.NE 0x31FA938
	0x031FA950 MOVZ W2, 0x3
	0x031FA954 MOV X0, X23
	0x031FA958 BL 0x1C5C788
	0x031FA95C B 0x31FA970
	0x031FA960 LDR W9, [X10]
	0x031FA964 ADD W9, W9, 0x3
	0x031FA968 ADD X8, X8, W9, 0x4, SXTW
	0x031FA96C ADD X0, X8, 0x138
	0x031FA970 LDP X8, X6, [X0]
	0x031FA974 MOVZ W3, 0x8
	0x031FA978 MOV X0, X23
	0x031FA97C MOV X1, X19
	0x031FA980 MOV W2, W31
	0x031FA984 MOV X4, X20
	0x031FA988 MOV W5, W31
	0x031FA98C BLR X8
	0x031FA990 MOVZ W1, 0x7
	0x031FA994 MOV X0, X21
	0x031FA998 BL 0x31FB55C
	0x031FA99C LDR X8, [X22]
	0x031FA9A0 MOV X1, X0
	0x031FA9A4 MOV X0, X22
	0x031FA9A8 LDP X9, X2, [X8 + 0x1F8]
	0x031FA9AC BLR X9
	0x031FA9B0 LDR X8, [X22]
	0x031FA9B4 MOV X0, X22
	0x031FA9B8 LDR X9, [X8 + 0x278]
	0x031FA9BC LDR X1, [X8 + 0x280]
	0x031FA9C0 BLR X9
	0x031FA9C4 CBZ X0, 0x31FAB00
	0x031FA9C8 LDR X8, [X0]
	0x031FA9CC LDR X1, [X24]
	0x031FA9D0 MOV X23, X0
	0x031FA9D4 LDRH W9, [X8 + 0x12E]
	0x031FA9D8 CBZ X9, 0x31FA9FC
	0x031FA9DC LDR X10, [X8 + 0xB0]
	0x031FA9E0 ADD X10, X10, 0x8
	0x031FA9E4 LDUR X11, [X10 - 0x8]
	0x031FA9E8 CMP X11, X1
	0x031FA9EC B.EQ 0x31FAA0C
	0x031FA9F0 SUBS X9, X9, 0x1
	0x031FA9F4 ADD X10, X10, 0x10
	0x031FA9F8 B.NE 0x31FA9E4
	0x031FA9FC MOVZ W2, 0x3
	0x031FAA00 MOV X0, X23
	0x031FAA04 BL 0x1C5C788
	0x031FAA08 B 0x31FAA1C
	0x031FAA0C LDR W9, [X10]
	0x031FAA10 ADD W9, W9, 0x3
	0x031FAA14 ADD X8, X8, W9, 0x4, SXTW
	0x031FAA18 ADD X0, X8, 0x138
	0x031FAA1C LDP X8, X6, [X0]
	0x031FAA20 MOVZ W3, 0x8
	0x031FAA24 MOVZ W5, 0x8
	0x031FAA28 MOV X0, X23
	0x031FAA2C MOV X1, X19
	0x031FAA30 MOV W2, W31
	0x031FAA34 MOV X4, X20
	0x031FAA38 BLR X8
	0x031FAA3C MOVZ W1, 0xE
	0x031FAA40 MOV X0, X21
	0x031FAA44 BL 0x31FB55C
	0x031FAA48 LDR X8, [X22]
	0x031FAA4C MOV X1, X0
	0x031FAA50 MOV X0, X22
	0x031FAA54 LDP X9, X2, [X8 + 0x1F8]
	0x031FAA58 BLR X9
	0x031FAA5C LDR X8, [X22]
	0x031FAA60 MOV X0, X22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11E3000
	007 Move W8, [X21+481]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEFA000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+481], W8
	019 Compare X20, 0
	020 JumpIfEqual {54}
	021 Move W8, [X19+16]
	022 Compare W8, 0
	023 JumpIfNotEqual {66}
	024 Move X0, X20
	025 Move X1, X31
	026 Call Array.Clone, X0
	027 Compare X0, 0
	028 JumpIfEqual {47}
	029 Move X22, 0xEFA000
	030 Move X22, [X22+1560]
	031 Move X20, X0
	032 Move X21, [X22]
	033 Move X1, X21
	034 Call 0x1C17E00
	035 Compare X0, 0
	036 JumpIfEqual {84}
	037 Move [X19+24], X0
	038 Move X19, [X22]
	039 Move X0, X20
	040 Move X1, X19
	041 Call 0x1C17E00
	042 Compare X0, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X20
	045 Move X1, X19
	046 Call 0x1C181E0
	047 Move [X19+24], X31
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Return 
	054 Move X0, 0xEFF000
	055 Move X0, [X0+1320]
	056 Call 0x1C17D08
	057 Call 0x1C17F10
	058 Move X19, X0
	059 Move X0, 0xF28000
	060 Move X0, [X0+824]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Move X2, X31
	065 Call ArgumentNullException..ctor, X0, X1
	066 Move X0, 0xF23000
	067 Move X0, [X0+1208]
	068 Call 0x1C17D08
	069 Call 0x1C17F10
	070 Move X19, X0
	071 Move X0, 0xF28000
	072 Move X0, [X0+808]
	073 Call 0x1C17D08
	074 Move X1, X0
	075 Move X0, X19
	076 Move X2, X31
	077 Call ObjectDisposedException..ctor, X0, X1
	078 Move X0, 0xF28000
	079 Move X0, [X0+832]
	080 Call 0x1C17D08
	081 Move X1, X0
	082 Move X0, X19
	083 Call 0x1C17DEC
	084 Move X0, X20
	085 Move X1, X21
	086 Call 0x1C181E0

Method: System.Byte[] get_LM()

Disassembly:
	0x031FACAC ADRP X0, 0xEF9000
	0x031FACB0 LDR X0, [X0 + 0x618]
	0x031FACB4 BL 0x1C16CF4
	0x031FACB8 ADRP X0, 0xF27000
	0x031FACBC LDR X0, [X0 + 0x368]
	0x031FACC0 BL 0x1C16CF4
	0x031FACC4 MOVZ W8, 0x1
	0x031FACC8 STRB W8, [X21 + 0x1EA]
	0x031FACCC LDR X0, [X25]
	0x031FACD0 MOVZ W1, 0x8
	0x031FACD4 BL 0x1C16D6C
	0x031FACD8 MOV X21, X0
	0x031FACDC MOV X0, X31
	0x031FACE0 BL 0x3256158
	0x031FACE4 CBZ X0, 0x31FAE3C
	0x031FACE8 LDR X8, [X0]
	0x031FACEC MOV X1, X21
	0x031FACF0 LDP X9, X2, [X8 + 0x198]
	0x031FACF4 BLR X9
	0x031FACF8 CBZ X24, 0x31FAE3C
	0x031FACFC LDR W8, [X24 + 0x18]
	0x031FAD00 LDR X0, [X25]
	0x031FAD04 ADD W1, W8, 0x8
	0x031FAD08 BL 0x1C16D6C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+16]
	004 Compare W8, 0
	005 JumpIfNotEqual {9}
	006 Move X1, [X0+32]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Move X0, 0xF23000
	010 Move X0, [X0+1208]
	011 Call 0x1C17D08
	012 Call 0x1C17F10
	013 Move X19, X0
	014 Move X0, 0xF28000
	015 Move X0, [X0+808]
	016 Call 0x1C17D08
	017 Move X1, X0
	018 Move X0, X19
	019 Move X2, X31
	020 Call ObjectDisposedException..ctor, X0, X1
	021 Move X0, 0xF28000
	022 Move X0, [X0+840]
	023 Call 0x1C17D08
	024 Move X1, X0
	025 Move X0, X19
	026 Call 0x1C17DEC

Method: System.Byte[] get_NT()

Disassembly:
	0x031FAFE8 BL 0x3251914
	0x031FAFEC LDR X0, [X24]
	0x031FAFF0 BL 0x1C16F10
	0x031FAFF4 MOV X1, X20
	0x031FAFF8 MOV X2, X31
	0x031FAFFC MOV X21, X0
	0x031FB000 BL 0x3254AF0
	0x031FB004 LDR X0, [X23]
	0x031FB008 LDR W8, [X0 + 0xE0]
	0x031FB00C CBNZ W8, 0x31FB014
	0x031FB010 BL 0x1C16DFC
	0x031FB014 MOV X0, X31
	0x031FB018 BL 0x3361584
	0x031FB01C STR X0, [X31]
	0x031FB020 ADD X0, X31, 0x0
	0x031FB024 MOV X1, X31
	0x031FB028 BL 0x3361708
	0x031FB02C LDR X8, [X25]
	0x031FB030 MOV X24, X0
	0x031FB034 MOVZ W1, 0x8
	0x031FB038 MOV X0, X8
	0x031FB03C BL 0x1C16D6C
	0x031FB040 MOV X22, X0
	0x031FB044 MOV X0, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+16]
	004 Compare W8, 0
	005 JumpIfNotEqual {11}
	006 Move X1, [X0+40]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Call ChallengeResponse.GetResponse, X0, X1
	010 Return X0
	011 Move X0, 0xF22000
	012 Move X0, [X0+1208]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0xF27000
	017 Move X0, [X0+808]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call ObjectDisposedException..ctor, X0, X1
	023 Move X0, 0xF27000
	024 Move X0, [X0+848]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: System.Void Dispose()

Disassembly:
	0x031FAB04 STR X30, [X31 - 0x30]!
	0x031FAB08 STP X22, X21, [X31 + 0x10]
	0x031FAB0C STP X20, X19, [X31 + 0x20]
	0x031FAB10 ADRP X19, 0x11E2000
	0x031FAB14 ADRP X22, 0xEF9000
	0x031FAB18 LDRB W8, [X19 + 0x1E8]
	0x031FAB1C LDR X22, [X22 + 0x618]
	0x031FAB20 MOV X21, X0
	0x031FAB24 TBNZ X8, 0x0, 0x31FAB3C
	0x031FAB28 ADRP X0, 0xEF9000
	0x031FAB2C LDR X0, [X0 + 0x618]
	0x031FAB30 BL 0x1C16CF4
	0x031FAB34 MOVZ W8, 0x1
	0x031FAB38 STRB W8, [X19 + 0x1E8]
	0x031FAB3C LDR X0, [X22]
	0x031FAB40 MOVZ W1, 0x15
	0x031FAB44 BL 0x1C16D6C
	0x031FAB48 MOV X19, X0
	0x031FAB4C MOV X0, X31
	0x031FAB50 BL 0x31FE3B0
	0x031FAB54 MOV X20, X0
	0x031FAB58 CBZ X21, 0x31FAB80
	0x031FAB5C MOV X0, X31
	0x031FAB60 BL 0x3242C30
	0x031FAB64 CBZ X0, 0x31FAC04

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11E3000
	006 Move X20, 0xF01000
	007 Move W8, [X21+482]
	008 Move X20, [X20+3088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF01000
	015 Move X0, [X0+3088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+482], W8
	019 Move X0, X19
	020 Move W1, W31
	021 Call ChallengeResponse.Dispose, X0, X1
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X1, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call GC.SuppressFinalize, X0
	034 Return 

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x031FB048 BL 0x3256158
	0x031FB04C CBZ X0, 0x31FB26C
	0x031FB050 LDR X8, [X0]
	0x031FB054 MOV X1, X22
	0x031FB058 LDP X9, X2, [X8 + 0x198]
	0x031FB05C BLR X9
	0x031FB060 CBZ X19, 0x31FB26C
	0x031FB064 MOV X0, X19
	0x031FB068 BL 0x31FB274
	0x031FB06C CBZ X0, 0x31FB26C
	0x031FB070 LDR W8, [X0 + 0x18]
	0x031FB074 LDR X0, [X25]
	0x031FB078 ADD W1, W8, 0x1C
	0x031FB07C BL 0x1C16D6C
	0x031FB080 CBZ X0, 0x31FB26C
	0x031FB084 LDR W8, [X0 + 0x18]
	0x031FB088 MOV X23, X0
	0x031FB08C CBZ W8, 0x31FB270
	0x031FB090 MOVZ W9, 0x1
	0x031FB094 CMP W8, 0x1
	0x031FB098 STRB W9, [X23 + 0x20]
	0x031FB09C B.EQ 0x31FB270
	0x031FB0A0 MOVZ X8, 0xDD890000
	0x031FB0A4 MOVK X8, 0x31E8
	0x031FB0A8 MOVK X8, 0xF8FE0000
	0x031FB0AC ADD X8, X24, X8
	0x031FB0B0 ADD X0, X31, 0x8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+16]
	004 Compare W8, 0
	005 JumpIfNotEqual {30}
	006 Move X19, X0
	007 Move X0, [X0+32]
	008 Compare X0, 0
	009 JumpIfEqual {33}
	010 Move W2, [X0+24]
	011 Move W1, W31
	012 Move X3, X31
	013 Call Array.Clear, X0, X1, X2
	014 Move X0, [X19+40]
	015 Compare X0, 0
	016 JumpIfEqual {33}
	017 Move W2, [X0+24]
	018 Move W1, W31
	019 Move X3, X31
	020 Call Array.Clear, X0, X1, X2
	021 Move X0, [X19+24]
	022 Compare X0, 0
	023 JumpIfEqual {28}
	024 Move W2, [X0+24]
	025 Move W1, W31
	026 Move X3, X31
	027 Call Array.Clear, X0, X1, X2
	028 Move W8, 1
	029 Move [X19+16], W8
	030 Move X30, [X31+16]
	031 Move X19, [X31+24]
	032 Return 
	033 Call 0x1C17F20

Method: System.Byte[] GetResponse(System.Byte[] pwd)

Disassembly:
	0x031FAD0C MOV X22, X0
	0x031FAD10 MOV X0, X24
	0x031FAD14 MOV X1, X22
	0x031FAD18 MOV W2, W31
	0x031FAD1C MOV X3, X31
	0x031FAD20 BL 0x339FC34
	0x031FAD24 CBZ X21, 0x31FAE3C
	0x031FAD28 LDR W2, [X24 + 0x18]
	0x031FAD2C MOV X0, X21
	0x031FAD30 MOV X1, X22
	0x031FAD34 MOV X3, X31
	0x031FAD38 BL 0x339FC34
	0x031FAD3C LDR X0, [X25]
	0x031FAD40 MOVZ W1, 0x18
	0x031FAD44 BL 0x1C16D6C
	0x031FAD48 MOV X1, X0
	0x031FAD4C STR X0, [X23]
	0x031FAD50 MOV X0, X21
	0x031FAD54 MOV W2, W31
	0x031FAD58 MOV X3, X31
	0x031FAD5C BL 0x339FC34
	0x031FAD60 MOV X0, X31
	0x031FAD64 BL 0x32560FC
	0x031FAD68 CBZ X0, 0x31FAE3C
	0x031FAD6C ADRP X26, 0xF27000
	0x031FAD70 LDR X26, [X26 + 0x368]
	0x031FAD74 MOV X1, X22
	0x031FAD78 MOV X2, X31
	0x031FAD7C BL 0x32513F4
	0x031FAD80 LDR X8, [X25]
	0x031FAD84 MOV X23, X0
	0x031FAD88 MOVZ W1, 0x8
	0x031FAD8C MOV X0, X8
	0x031FAD90 BL 0x1C16D6C
	0x031FAD94 MOV X24, X0
	0x031FAD98 MOVZ W2, 0x8
	0x031FAD9C MOV X0, X23
	0x031FADA0 MOV X1, X24
	0x031FADA4 MOV X3, X31
	0x031FADA8 BL 0x33A0C7C
	0x031FADAC LDR X0, [X26]
	0x031FADB0 LDR W8, [X0 + 0xE0]
	0x031FADB4 CBNZ W8, 0x31FADBC
	0x031FADB8 BL 0x1C16DFC
	0x031FADBC MOV X0, X20
	0x031FADC0 MOV X1, X24
	0x031FADC4 BL 0x31FAC08
	0x031FADC8 STR X0, [X19]
	0x031FADCC LDR W2, [X21 + 0x18]
	0x031FADD0 MOV X0, X21
	0x031FADD4 MOV W1, W31
	0x031FADD8 MOV X3, X31
	0x031FADDC BL 0x339FA34
	0x031FADE0 CBZ X22, 0x31FAE3C
	0x031FADE4 LDR W2, [X22 + 0x18]
	0x031FADE8 MOV X0, X22
	0x031FADEC MOV W1, W31
	0x031FADF0 MOV X3, X31
	0x031FADF4 BL 0x339FA34
	0x031FADF8 CBZ X24, 0x31FAE3C
	0x031FADFC LDR W2, [X24 + 0x18]
	0x031FAE00 MOV X0, X24
	0x031FAE04 MOV W1, W31
	0x031FAE08 MOV X3, X31
	0x031FAE0C BL 0x339FA34
	0x031FAE10 CBZ X23, 0x31FAE3C
	0x031FAE14 LDR W2, [X23 + 0x18]
	0x031FAE18 MOV X0, X23
	0x031FAE1C LDP X20, X19, [X31 + 0x40]
	0x031FAE20 LDP X22, X21, [X31 + 0x30]
	0x031FAE24 LDP X24, X23, [X31 + 0x20]
	0x031FAE28 LDP X26, X25, [X31 + 0x10]
	0x031FAE2C MOV W1, W31
	0x031FAE30 MOV X3, X31
	0x031FAE34 LDR X30, [X31], #0x50
	0x031FAE38 B 0x339FA34
	0x031FAE3C BL 0x1C16F20
	0x031FAE40 SUB X31, X31, 0x50
	0x031FAE44 STP X30, X25, [X31 + 0x10]
	0x031FAE48 STP X24, X23, [X31 + 0x20]
	0x031FAE4C STP X22, X21, [X31 + 0x30]
	0x031FAE50 STP X20, X19, [X31 + 0x40]
	0x031FAE54 ADRP X24, 0x11E2000
	0x031FAE58 ADRP X23, 0xF27000
	0x031FAE5C LDRB W8, [X24 + 0x1EB]
	0x031FAE60 LDR X23, [X23 + 0x368]
	0x031FAE64 MOV X20, X3
	0x031FAE68 MOV X21, X2
	0x031FAE6C MOV X22, X1
	0x031FAE70 MOV X19, X0
	0x031FAE74 TBNZ X8, 0x0, 0x31FAEB0
	0x031FAE78 ADRP X0, 0xEF9000
	0x031FAE7C LDR X0, [X0 + 0x618]
	0x031FAE80 BL 0x1C16CF4
	0x031FAE84 ADRP X0, 0xF27000
	0x031FAE88 LDR X0, [X0 + 0x368]
	0x031FAE8C BL 0x1C16CF4
	0x031FAE90 ADRP X0, 0xEFA000
	0x031FAE94 LDR X0, [X0 + 0x9F0]
	0x031FAE98 BL 0x1C16CF4
	0x031FAE9C ADRP X0, 0xF27000
	0x031FAEA0 LDR X0, [X0 + 0x370]
	0x031FAEA4 BL 0x1C16CF4
	0x031FAEA8 MOVZ W8, 0x1
	0x031FAEAC STRB W8, [X24 + 0x1EB]
	0x031FAEB0 LDR X0, [X23]
	0x031FAEB4 STR X31, [X31]
	0x031FAEB8 LDR W8, [X0 + 0xE0]
	0x031FAEBC CBNZ W8, 0x31FAEC4
	0x031FAEC0 BL 0x1C16DFC
	0x031FAEC4 MOV X0, X21
	0x031FAEC8 BL 0x31FAB04
	0x031FAECC MOV X21, X0
	0x031FAED0 MOV X0, X31
	0x031FAED4 BL 0x3242C30
	0x031FAED8 CBZ X22, 0x31FB26C
	0x031FAEDC MOV X23, X0
	0x031FAEE0 MOV X0, X22
	0x031FAEE4 MOV X1, X31
	0x031FAEE8 BL 0x322B860
	0x031FAEEC CBZ X23, 0x31FB26C
	0x031FAEF0 LDR X8, [X23]
	0x031FAEF4 MOV X1, X0
	0x031FAEF8 MOV X0, X23
	0x031FAEFC LDR X9, [X8 + 0x268]
	0x031FAF00 LDR X2, [X8 + 0x270]
	0x031FAF04 BLR X9
	0x031FAF08 MOV X22, X0
	0x031FAF0C MOV X0, X31
	0x031FAF10 BL 0x3242C30
	0x031FAF14 CBZ X0, 0x31FB26C
	0x031FAF18 LDR X8, [X0]
	0x031FAF1C MOV X1, X20
	0x031FAF20 LDR X9, [X8 + 0x268]
	0x031FAF24 LDR X2, [X8 + 0x270]
	0x031FAF28 BLR X9
	0x031FAF2C CBZ X22, 0x31FB26C
	0x031FAF30 MOV X23, X0
	0x031FAF34 CBZ X0, 0x31FB26C
	0x031FAF38 ADRP X25, 0xEF9000
	0x031FAF3C LDR X25, [X25 + 0x618]
	0x031FAF40 LDR W8, [X22 + 0x18]
	0x031FAF44 LDR W9, [X23 + 0x18]
	0x031FAF48 ADRP X24, 0xF27000
	0x031FAF4C LDR X0, [X25]
	0x031FAF50 LDR X24, [X24 + 0x370]
	0x031FAF54 ADD W1, W9, W8
	0x031FAF58 BL 0x1C16D6C
	0x031FAF5C MOV X20, X0
	0x031FAF60 MOV X0, X22
	0x031FAF64 MOV X1, X20
	0x031FAF68 MOV W2, W31
	0x031FAF6C MOV X3, X31
	0x031FAF70 BL 0x339FC34
	0x031FAF74 LDR W3, [X22 + 0x18]
	0x031FAF78 LDR W4, [X23 + 0x18]
	0x031FAF7C MOV X0, X23
	0x031FAF80 MOV W1, W31
	0x031FAF84 MOV X2, X20
	0x031FAF88 MOV X5, X31
	0x031FAF8C BL 0x339FCE8
	0x031FAF90 LDR X0, [X24]
	0x031FAF94 BL 0x1C16F10
	0x031FAF98 MOV X1, X21
	0x031FAF9C MOV X2, X31
	0x031FAFA0 MOV X22, X0
	0x031FAFA4 BL 0x3254AF0
	0x031FAFA8 CBZ X22, 0x31FB26C
	0x031FAFAC MOV X0, X22
	0x031FAFB0 MOV X1, X20
	0x031FAFB4 MOV X2, X31
	0x031FAFB8 BL 0x32513F4
	0x031FAFBC CBZ X21, 0x31FB26C
	0x031FAFC0 LDR W2, [X21 + 0x18]
	0x031FAFC4 ADRP X23, 0xEFA000
	0x031FAFC8 LDR X23, [X23 + 0x9F0]
	0x031FAFCC MOV X20, X0
	0x031FAFD0 MOV X0, X21
	0x031FAFD4 MOV W1, W31
	0x031FAFD8 MOV X3, X31
	0x031FAFDC BL 0x339FA34
	0x031FAFE0 MOV X0, X22
	0x031FAFE4 MOV X1, X31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x11E3000
	010 Move X23, 0xEFA000
	011 Move X19, 0xF28000
	012 Move W8, [X22+483]
	013 Move X23, [X23+1560]
	014 Move X19, [X19+800]
	015 Move X21, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {32}
	021 Move X0, 0xEFA000
	022 Move X0, [X0+1560]
	023 Call 0x1C17CF4
	024 Move X0, 0xF28000
	025 Move X0, [X0+800]
	026 Call 0x1C17CF4
	027 Move X0, 0xF27000
	028 Move X0, [X0+3744]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X22+483], W8
	032 Move X0, [X23]
	033 Move W1, 24
	034 Call 0x1C17D6C
	035 Move X8, [X19]
	036 Move X19, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X31
	043 Call DES.Create
	044 Compare X0, 0
	045 JumpIfEqual {199}
	046 Move X8, [X0]
	047 Move W1, 2
	048 Move X22, X0
	049 Move X9, [X8+584]
	050 Move X2, [X8+592]
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Move X1, X21
	053 Move W2, W31
	054 Call ChallengeResponse.PrepareDESKey, X0, X1, X2
	055 Move X8, [X22]
	056 Move X1, X0
	057 Move X0, X22
	058 Move X9, [X8+504]
	059 Move X2, [X8+512]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X8, [X22]
	062 Move X0, X22
	063 Move X9, [X8+632]
	064 Move X1, [X8+640]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Compare X0, 0
	067 JumpIfEqual {199}
	068 Move X25, 0xF27000
	069 Move X8, [X0]
	070 Move X25, [X25+3744]
	071 Move X24, [X20+24]
	072 Move X23, X0
	073 NotImplemented "Instruction LDRH not yet implemented."
	074 Move X1, [X25]
	075 Compare X9, 0
	076 JumpIfEqual {83}
	077 Move X10, [X8+176]
	078 Add X10, X10, 8
	079 NotImplemented "Instruction LDUR not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Subtract X9, X9, 1
	082 Add X10, X10, 16
	083 Move W2, 3
	084 Move X0, X23
	085 Call 0x1C5D788
	086 Move W9, [X10]
	087 Add W9, W9, 3
	088 Add X8, X8, W9
	089 Add X0, X8, 312
	090 Move X8, [X0]
	091 Move X6, [X0+8]
	092 Move W3, 8
	093 Move X0, X23
	094 Move X1, X24
	095 Move W2, W31
	096 Move X4, X19
	097 Move W5, W31
	098 NotImplemented "Instruction BLR not yet implemented."
	099 Move W2, 7
	100 Move X1, X21
	101 Call ChallengeResponse.PrepareDESKey, X0, X1, X2
	102 Move X8, [X22]
	103 Move X1, X0
	104 Move X0, X22
	105 Move X9, [X8+504]
	106 Move X2, [X8+512]
	107 NotImplemented "Instruction BLR not yet implemented."
	108 Move X8, [X22]
	109 Move X0, X22
	110 Move X9, [X8+632]
	111 Move X1, [X8+640]
	112 NotImplemented "Instruction BLR not yet implemented."
	113 Compare X0, 0
	114 JumpIfEqual {199}
	115 Move X8, [X0]
	116 Move X24, [X20+24]
	117 Move X1, [X25]
	118 Move X23, X0
	119 NotImplemented "Instruction LDRH not yet implemented."
	120 Compare X9, 0
	121 JumpIfEqual {128}
	122 Move X10, [X8+176]
	123 Add X10, X10, 8
	124 NotImplemented "Instruction LDUR not yet implemented."
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Subtract X9, X9, 1
	127 Add X10, X10, 16
	128 Move W2, 3
	129 Move X0, X23
	130 Call 0x1C5D788
	131 Move W9, [X10]
	132 Add W9, W9, 3
	133 Add X8, X8, W9
	134 Add X0, X8, 312
	135 Move X8, [X0]
	136 Move X6, [X0+8]
	137 Move W3, 8
	138 Move W5, 8
	139 Move X0, X23
	140 Move X1, X24
	141 Move W2, W31
	142 Move X4, X19
	143 NotImplemented "Instruction BLR not yet implemented."
	144 Move W2, 14
	145 Move X1, X21
	146 Call ChallengeResponse.PrepareDESKey, X0, X1, X2
	147 Move X8, [X22]
	148 Move X1, X0
	149 Move X0, X22
	150 Move X9, [X8+504]
	151 Move X2, [X8+512]
	152 NotImplemented "Instruction BLR not yet implemented."
	153 Move X8, [X22]
	154 Move X0, X22
	155 Move X9, [X8+632]
	156 Move X1, [X8+640]
	157 NotImplemented "Instruction BLR not yet implemented."
	158 Compare X0, 0
	159 JumpIfEqual {199}
	160 Move X8, [X0]
	161 Move X20, [X20+24]
	162 Move X1, [X25]
	163 Move X21, X0
	164 NotImplemented "Instruction LDRH not yet implemented."
	165 Compare X9, 0
	166 JumpIfEqual {173}
	167 Move X10, [X8+176]
	168 Add X10, X10, 8
	169 NotImplemented "Instruction LDUR not yet implemented."
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Subtract X9, X9, 1
	172 Add X10, X10, 16
	173 Move W2, 3
	174 Move X0, X21
	175 Call 0x1C5D788
	176 Move W9, [X10]
	177 Add W9, W9, 3
	178 Add X8, X8, W9
	179 Add X0, X8, 312
	180 Move X8, [X0]
	181 Move X6, [X0+8]
	182 Move W3, 8
	183 Move W5, 16
	184 Move X0, X21
	185 Move X1, X20
	186 Move W2, W31
	187 Move X4, X19
	188 NotImplemented "Instruction BLR not yet implemented."
	189 Move X0, X19
	190 Move X20, [X31+48]
	191 Move X19, [X31+56]
	192 Move X22, [X31+32]
	193 Move X21, [X31+40]
	194 Move X24, [X31+16]
	195 Move X23, [X31+24]
	196 Move X30, [X31+64]
	197 Move X25, [X31+72]
	198 Return X0
	199 Call 0x1C17F20

Method: System.Byte[] PrepareDESKey(System.Byte[] key56bits, System.Int32 position)

Disassembly:
	0x031FB0B4 STRB W9, [X23 + 0x21]
	0x031FB0B8 STR X8, [X31 + 0x8]
	0x031FB0BC BL 0x31E992C
	0x031FB0C0 MOVZ W3, 0x8
	0x031FB0C4 MOVZ W4, 0x8
	0x031FB0C8 MOV W1, W31
	0x031FB0CC MOV X2, X23
	0x031FB0D0 MOV X5, X31
	0x031FB0D4 BL 0x33A8A9C
	0x031FB0D8 MOVZ W3, 0x10
	0x031FB0DC MOVZ W4, 0x8
	0x031FB0E0 MOV X0, X22
	0x031FB0E4 MOV W1, W31
	0x031FB0E8 MOV X2, X23
	0x031FB0EC MOV X5, X31
	0x031FB0F0 BL 0x33A8A9C
	0x031FB0F4 MOV X0, X19
	0x031FB0F8 BL 0x31FB274
	0x031FB0FC MOV X24, X0
	0x031FB100 MOV X0, X19
	0x031FB104 BL 0x31FB274
	0x031FB108 CBZ X0, 0x31FB26C
	0x031FB10C LDR W4, [X0 + 0x18]
	0x031FB110 MOVZ W3, 0x1C
	0x031FB114 MOV X0, X24
	0x031FB118 MOV W1, W31
	0x031FB11C MOV X2, X23
	0x031FB120 MOV X5, X31
	0x031FB124 BL 0x33A8A9C
	0x031FB128 MOV X0, X19
	0x031FB12C BL 0x31FB2EC
	0x031FB130 CBZ X0, 0x31FB26C
	0x031FB134 LDR W8, [X0 + 0x18]
	0x031FB138 LDR W9, [X23 + 0x18]
	0x031FB13C MOV X24, X0
	0x031FB140 LDR X0, [X25]
	0x031FB144 ADD W1, W9, W8
	0x031FB148 BL 0x1C16D6C
	0x031FB14C MOV X19, X0
	0x031FB150 MOV X0, X24
	0x031FB154 MOV X1, X19
	0x031FB158 MOV W2, W31
	0x031FB15C MOV X3, X31
	0x031FB160 BL 0x339FC34
	0x031FB164 LDR W2, [X24 + 0x18]
	0x031FB168 MOV X0, X23
	0x031FB16C MOV X1, X19
	0x031FB170 MOV X3, X31
	0x031FB174 BL 0x339FC34
	0x031FB178 CBZ X21, 0x31FB26C
	0x031FB17C MOV X0, X21
	0x031FB180 MOV X1, X19
	0x031FB184 MOV X2, X31
	0x031FB188 BL 0x32513F4
	0x031FB18C CBZ X0, 0x31FB26C
	0x031FB190 LDR W8, [X23 + 0x18]
	0x031FB194 LDR W9, [X0 + 0x18]
	0x031FB198 MOV X24, X0
	0x031FB19C LDR X0, [X25]
	0x031FB1A0 ADD W1, W9, W8
	0x031FB1A4 BL 0x1C16D6C
	0x031FB1A8 MOV X25, X0
	0x031FB1AC MOV X0, X24
	0x031FB1B0 MOV X1, X25
	0x031FB1B4 MOV W2, W31
	0x031FB1B8 MOV X3, X31
	0x031FB1BC BL 0x339FC34
	0x031FB1C0 LDR W2, [X24 + 0x18]
	0x031FB1C4 MOV X0, X23
	0x031FB1C8 MOV X1, X25
	0x031FB1CC MOV X3, X31
	0x031FB1D0 BL 0x339FC34
	0x031FB1D4 CBZ X20, 0x31FB26C
	0x031FB1D8 LDR W2, [X20 + 0x18]
	0x031FB1DC MOV X0, X20
	0x031FB1E0 MOV W1, W31
	0x031FB1E4 MOV X3, X31
	0x031FB1E8 BL 0x339FA34
	0x031FB1EC MOV X0, X21
	0x031FB1F0 MOV X1, X31
	0x031FB1F4 BL 0x3251914
	0x031FB1F8 CBZ X22, 0x31FB26C
	0x031FB1FC LDR W2, [X22 + 0x18]
	0x031FB200 MOV X0, X22
	0x031FB204 MOV W1, W31
	0x031FB208 MOV X3, X31
	0x031FB20C BL 0x339FA34
	0x031FB210 LDR W2, [X23 + 0x18]
	0x031FB214 MOV X0, X23
	0x031FB218 MOV W1, W31
	0x031FB21C MOV X3, X31
	0x031FB220 BL 0x339FA34
	0x031FB224 CBZ X19, 0x31FB26C
	0x031FB228 LDR W2, [X19 + 0x18]
	0x031FB22C MOV X0, X19
	0x031FB230 MOV W1, W31
	0x031FB234 MOV X3, X31
	0x031FB238 BL 0x339FA34
	0x031FB23C LDR W2, [X24 + 0x18]
	0x031FB240 MOV X0, X24
	0x031FB244 MOV W1, W31
	0x031FB248 MOV X3, X31
	0x031FB24C BL 0x339FA34
	0x031FB250 MOV X0, X25
	0x031FB254 LDP X20, X19, [X31 + 0x40]
	0x031FB258 LDP X22, X21, [X31 + 0x30]
	0x031FB25C LDP X24, X23, [X31 + 0x20]
	0x031FB260 LDP X30, X25, [X31 + 0x10]
	0x031FB264 ADD X31, X31, 0x50
	0x031FB268 RET
	0x031FB26C BL 0x1C16F20
	0x031FB270 BL 0x1C16F28
	0x031FB274 STR X30, [X31 - 0x20]!
	0x031FB278 STP X20, X19, [X31 + 0x10]
	0x031FB27C ADRP X20, 0x11E1000
	0x031FB280 LDRB W8, [X20 + 0x1FC]
	0x031FB284 MOV X19, X0
	0x031FB288 TBNZ X8, 0x0, 0x31FB2A0
	0x031FB28C ADRP X0, 0xEF8000
	0x031FB290 LDR X0, [X0 + 0x618]
	0x031FB294 BL 0x1C16CF4
	0x031FB298 MOVZ W8, 0x1
	0x031FB29C STRB W8, [X20 + 0x1FC]
	0x031FB2A0 LDR X0, [X19 + 0x28]
	0x031FB2A4 CBZ X0, 0x31FB2DC
	0x031FB2A8 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11E2000
	007 Move X22, 0xEF9000
	008 Move W8, [X21+484]
	009 Move X22, [X22+1560]
	010 Move W20, W2
	011 Move X19, X1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEF9000
	017 Move X0, [X0+1560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+484], W8
	021 Move X0, [X22]
	022 Move W1, 8
	023 Call 0x1C17D6C
	024 Compare X19, 0
	025 JumpIfEqual {136}
	026 Move W8, [X19+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Add X9, X19, W20
	029 Add X9, X9, 32
	030 Move W10, [X9]
	031 Compare X0, 0
	032 JumpIfEqual {136}
	033 Move W8, [X0+24]
	034 Compare W8, 0
	035 JumpIfEqual {135}
	036 Move [X0+32], W10
	037 Move W10, [X19+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Add W11, W20, 1
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Add X10, X19, W11
	043 Add X10, X10, 32
	044 Move W12, [X10]
	045 Move W9, [X9]
	046 Move W12, W12
	047 ShiftRight W12, 8
	048 And W12, W12, 127
	049 NotImplemented "Instruction EXTR not yet implemented."
	050 Move [X0+33], W9
	051 Move W9, [X19+24]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Add W11, W20, 2
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Add X9, X19, W11
	057 Add X9, X9, 32
	058 Move W12, [X9]
	059 Move W10, [X10]
	060 Move W12, W12
	061 ShiftRight W12, 8
	062 And W12, W12, 127
	063 NotImplemented "Instruction EXTR not yet implemented."
	064 Move [X0+34], W10
	065 Move W10, [X19+24]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add W11, W20, 3
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Add X10, X19, W11
	071 Add X10, X10, 32
	072 Move W12, [X10]
	073 Move W9, [X9]
	074 Move W12, W12
	075 ShiftRight W12, 8
	076 And W12, W12, 127
	077 NotImplemented "Instruction EXTR not yet implemented."
	078 Move [X0+35], W9
	079 Move W9, [X19+24]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Add W11, W20, 4
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Add X9, X19, W11
	085 Add X9, X9, 32
	086 Move W12, [X9]
	087 Move W10, [X10]
	088 Move W12, W12
	089 ShiftRight W12, 8
	090 And W12, W12, 127
	091 NotImplemented "Instruction EXTR not yet implemented."
	092 Move [X0+36], W10
	093 Move W10, [X19+24]
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Add W11, W20, 5
	096 NotImplemented "Instruction CMP not yet implemented."
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Add X10, X19, W11
	099 Add X10, X10, 32
	100 Move W12, [X10]
	101 Move W9, [X9]
	102 Move W12, W12
	103 ShiftRight W12, 8
	104 And W12, W12, 127
	105 NotImplemented "Instruction EXTR not yet implemented."
	106 Move [X0+37], W9
	107 Move W12, [X19+24]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Add W9, W20, 6
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Add X11, X19, W9
	113 Add X11, X11, 32
	114 Move W12, [X11]
	115 Move W10, [X10]
	116 Move W12, W12
	117 ShiftRight W12, 8
	118 And W12, W12, 127
	119 NotImplemented "Instruction EXTR not yet implemented."
	120 Move [X0+38], W10
	121 Move W10, [X19+24]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move W8, [X11]
	125 Move X20, [X31+32]
	126 Move X19, [X31+40]
	127 Move X22, [X31+16]
	128 Move X21, [X31+24]
	129 Move W8, W8
	130 ShiftRight W8, 31
	131 And W8, W8, 0x3FFFFFFF
	132 Move [X0+39], W8
	133 Move X30, [X31+48]
	134 Return X0
	135 Call 0x1C17F28
	136 Call 0x1C17F20

Method: System.Byte[] PasswordToKey(System.String password, System.Int32 position)

Disassembly:
	0x031FAB68 LDR X8, [X0]
	0x031FAB6C MOV X1, X21
	0x031FAB70 LDR X9, [X8 + 0x268]
	0x031FAB74 LDR X2, [X8 + 0x270]
	0x031FAB78 BLR X9
	0x031FAB7C B 0x31FAB8C
	0x031FAB80 LDR X0, [X22]
	0x031FAB84 MOV W1, W31
	0x031FAB88 BL 0x1C16D6C
	0x031FAB8C MOV X21, X0
	0x031FAB90 CBZ X20, 0x31FAC04
	0x031FAB94 MOV X0, X20
	0x031FAB98 MOV X1, X21
	0x031FAB9C MOV X2, X31
	0x031FABA0 BL 0x32513F4
	0x031FABA4 MOVZ W4, 0x10
	0x031FABA8 MOV W1, W31
	0x031FABAC MOV X2, X19
	0x031FABB0 MOV W3, W31
	0x031FABB4 MOV X5, X31
	0x031FABB8 MOV X20, X0
	0x031FABBC BL 0x33A8A9C
	0x031FABC0 CBZ X21, 0x31FAC04
	0x031FABC4 LDR W2, [X21 + 0x18]
	0x031FABC8 MOV X0, X21
	0x031FABCC MOV W1, W31
	0x031FABD0 MOV X3, X31
	0x031FABD4 BL 0x339FA34
	0x031FABD8 CBZ X20, 0x31FAC04
	0x031FABDC LDR W2, [X20 + 0x18]
	0x031FABE0 MOV X0, X20
	0x031FABE4 MOV W1, W31
	0x031FABE8 MOV X3, X31
	0x031FABEC BL 0x339FA34
	0x031FABF0 MOV X0, X19
	0x031FABF4 LDP X20, X19, [X31 + 0x20]
	0x031FABF8 LDP X22, X21, [X31 + 0x10]
	0x031FABFC LDR X30, [X31], #0x30
	0x031FAC00 RET
	0x031FAC04 BL 0x1C16F20
	0x031FAC08 STR X30, [X31 - 0x30]!
	0x031FAC0C STP X22, X21, [X31 + 0x10]
	0x031FAC10 STP X20, X19, [X31 + 0x20]
	0x031FAC14 ADRP X21, 0x11E2000
	0x031FAC18 ADRP X22, 0xF27000
	0x031FAC1C LDRB W8, [X21 + 0x1E9]
	0x031FAC20 LDR X22, [X22 + 0x368]
	0x031FAC24 MOV X19, X1
	0x031FAC28 MOV X20, X0
	0x031FAC2C TBNZ X8, 0x0, 0x31FAC44
	0x031FAC30 ADRP X0, 0xF27000
	0x031FAC34 LDR X0, [X0 + 0x368]
	0x031FAC38 BL 0x1C16CF4
	0x031FAC3C MOVZ W8, 0x1
	0x031FAC40 STRB W8, [X21 + 0x1E9]
	0x031FAC44 LDR X0, [X22]
	0x031FAC48 LDR W8, [X0 + 0xE0]
	0x031FAC4C CBNZ W8, 0x31FAC54
	0x031FAC50 BL 0x1C16DFC
	0x031FAC54 MOV X0, X20
	0x031FAC58 BL 0x31FAB04
	0x031FAC5C MOV X1, X0
	0x031FAC60 MOV X0, X19
	0x031FAC64 LDP X20, X19, [X31 + 0x20]
	0x031FAC68 LDP X22, X21, [X31 + 0x10]
	0x031FAC6C LDR X30, [X31], #0x30
	0x031FAC70 B 0x31FA810
	0x031FAC74 STR X30, [X31 - 0x50]!
	0x031FAC78 STP X26, X25, [X31 + 0x10]
	0x031FAC7C STP X24, X23, [X31 + 0x20]
	0x031FAC80 STP X22, X21, [X31 + 0x30]
	0x031FAC84 STP X20, X19, [X31 + 0x40]
	0x031FAC88 ADRP X21, 0x11E2000
	0x031FAC8C ADRP X25, 0xEF9000
	0x031FAC90 LDRB W8, [X21 + 0x1EA]
	0x031FAC94 LDR X25, [X25 + 0x618]
	0x031FAC98 MOV X19, X3
	0x031FAC9C MOV X23, X2
	0x031FACA0 MOV X24, X1
	0x031FACA4 MOV X20, X0
	0x031FACA8 TBNZ X8, 0x0, 0x31FACCC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x11E3000
	008 Move X22, 0xEFA000
	009 Move W8, [X20+485]
	010 Move X22, [X22+1560]
	011 Move W19, W2
	012 Move X21, X1
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xEFA000
	018 Move X0, [X0+1560]
	019 Call 0x1C17CF4
	020 Move X0, 0xEFC000
	021 Move X0, [X0+3144]
	022 Call 0x1C17CF4
	023 Move X0, 0xEFA000
	024 Move X0, [X0+1448]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+485], W8
	028 Move X0, [X22]
	029 Move W1, 7
	030 Call 0x1C17D6C
	031 Compare X21, 0
	032 JumpIfEqual {95}
	033 Move X8, 0xEFA000
	034 Move X8, [X8+1448]
	035 Move X20, X0
	036 Move X23, 0xEFC000
	037 Move W22, [X21+16]
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Move X23, [X23+3144]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Subtract W0, W22, W19
	045 Move W1, 7
	046 Move X2, X31
	047 Call Math.Min, X0, X1
	048 Move W22, W0
	049 Move X0, X31
	050 Call Encoding.get_ASCII
	051 Move X8, [X23]
	052 Move X23, X0
	053 Move W9, [X8+224]
	054 Compare W9, 0
	055 JumpIfNotEqual {58}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Move X0, X31
	059 Call CultureInfo.get_CurrentCulture
	060 Move X1, X0
	061 Move X0, X21
	062 Move X2, X31
	063 Call String.ToUpper, X0, X1
	064 Compare X23, 0
	065 JumpIfEqual {95}
	066 Move X8, [X23]
	067 Move X1, X0
	068 Move X0, X23
	069 Move W2, W19
	070 Move X9, [X8+632]
	071 Move X6, [X8+640]
	072 Move W3, W22
	073 Move X4, X20
	074 Move W5, W31
	075 NotImplemented "Instruction BLR not yet implemented."
	076 Move X1, X20
	077 Move W2, W31
	078 Call ChallengeResponse.PrepareDESKey, X0, X1, X2
	079 Compare X20, 0
	080 JumpIfEqual {95}
	081 Move W2, [X20+24]
	082 Move X19, X0
	083 Move X0, X20
	084 Move W1, W31
	085 Move X3, X31
	086 Call Array.Clear, X0, X1, X2
	087 Move X0, X19
	088 Move X20, [X31+32]
	089 Move X19, [X31+40]
	090 Move X22, [X31+16]
	091 Move X21, [X31+24]
	092 Move X30, [X31+48]
	093 Move X23, [X31+56]
	094 Return X0
	095 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x031FB2AC BL 0x33A01F0
	0x031FB2B0 CBZ X0, 0x31FB2D0
	0x031FB2B4 ADRP X8, 0xEF8000
	0x031FB2B8 LDR X8, [X8 + 0x618]
	0x031FB2BC MOV X19, X0
	0x031FB2C0 LDR X20, [X8]
	0x031FB2C4 MOV X1, X20
	0x031FB2C8 BL 0x1C16E00
	0x031FB2CC CBZ X0, 0x31FB2E0
	0x031FB2D0 LDP X20, X19, [X31 + 0x10]
	0x031FB2D4 LDR X30, [X31], #0x20
	0x031FB2D8 RET
	0x031FB2DC BL 0x1C16F20
	0x031FB2E0 MOV X0, X19
	0x031FB2E4 MOV X1, X20
	0x031FB2E8 BL 0x1C171E0
	0x031FB2EC STR X30, [X31 - 0x20]!
	0x031FB2F0 STP X20, X19, [X31 + 0x10]
	0x031FB2F4 ADRP X20, 0x11E1000
	0x031FB2F8 LDRB W8, [X20 + 0x1FB]
	0x031FB2FC MOV X19, X0
	0x031FB300 TBNZ X8, 0x0, 0x31FB318
	0x031FB304 ADRP X0, 0xEF8000
	0x031FB308 LDR X0, [X0 + 0x618]
	0x031FB30C BL 0x1C16CF4
	0x031FB310 MOVZ W8, 0x1
	0x031FB314 STRB W8, [X20 + 0x1FB]
	0x031FB318 LDR X0, [X19 + 0x18]
	0x031FB31C CBZ X0, 0x31FB354
	0x031FB320 MOV X1, X31
	0x031FB324 BL 0x33A01F0
	0x031FB328 CBZ X0, 0x31FB348
	0x031FB32C ADRP X8, 0xEF8000
	0x031FB330 LDR X8, [X8 + 0x618]
	0x031FB334 MOV X19, X0
	0x031FB338 LDR X20, [X8]
	0x031FB33C MOV X1, X20
	0x031FB340 BL 0x1C16E00
	0x031FB344 CBZ X0, 0x31FB358
	0x031FB348 LDP X20, X19, [X31 + 0x10]
	0x031FB34C LDR X30, [X31], #0x20
	0x031FB350 RET
	0x031FB354 BL 0x1C16F20
	0x031FB358 MOV X0, X19
	0x031FB35C MOV X1, X20
	0x031FB360 BL 0x1C171E0
	0x031FB364 STR X30, [X31 - 0x50]!
	0x031FB368 STP X26, X25, [X31 + 0x10]
	0x031FB36C STP X24, X23, [X31 + 0x20]
	0x031FB370 STP X22, X21, [X31 + 0x30]
	0x031FB374 STP X20, X19, [X31 + 0x40]
	0x031FB378 ADRP X26, 0x11E1000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x11E2000
	008 Move X22, 0xEF9000
	009 Move X19, 0xF27000
	010 Move X20, 0xF27000
	011 Move X21, 0xF27000
	012 Move W8, [X23+486]
	013 Move X22, [X22+1560]
	014 Move X19, [X19+856]
	015 Move X20, [X20+792]
	016 Move X21, [X21+864]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0xEF9000
	022 Move X0, [X0+1560]
	023 Call 0x1C17CF4
	024 Move X0, 0xF27000
	025 Move X0, [X0+792]
	026 Call 0x1C17CF4
	027 Move X0, 0xF27000
	028 Move X0, [X0+856]
	029 Call 0x1C17CF4
	030 Move X0, 0xF27000
	031 Move X0, [X0+864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X23+486], W8
	035 Move X0, [X22]
	036 Move W1, 8
	037 Call 0x1C17D6C
	038 Move X1, [X19]
	039 Move X2, X31
	040 Move X19, X0
	041 Call RuntimeHelpers.InitializeArray, X0, X1
	042 Move X8, [X20]
	043 Move W1, 8
	044 Move X8, [X8+184]
	045 Move [X8], X19
	046 Move X0, [X22]
	047 Call 0x1C17D6C
	048 Move X1, [X21]
	049 Move X2, X31
	050 Move X19, X0
	051 Call RuntimeHelpers.InitializeArray, X0, X1
	052 Move X8, [X20]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X8, [X8+184]
	056 Move [X8+8], X19
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return 

