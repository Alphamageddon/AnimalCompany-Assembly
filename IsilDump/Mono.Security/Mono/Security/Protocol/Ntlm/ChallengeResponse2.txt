Type: Mono.Security.Protocol.Ntlm.ChallengeResponse2

Method: System.Byte[] Compute_LM(System.String password, System.Byte[] challenge)

Disassembly:
	0x031FB37C LDRB W8, [X26 + 0x1EC]
	0x031FB380 MOV X19, X6
	0x031FB384 MOV X21, X5
	0x031FB388 MOV X23, X4
	0x031FB38C MOV X20, X3
	0x031FB390 MOV X24, X2
	0x031FB394 MOV W25, W1
	0x031FB398 MOV X22, X0
	0x031FB39C TBNZ X8, 0x0, 0x31FB3B4
	0x031FB3A0 ADRP X0, 0xF26000
	0x031FB3A4 LDR X0, [X0 + 0x368]
	0x031FB3A8 BL 0x1C16CF4
	0x031FB3AC MOVZ W8, 0x1
	0x031FB3B0 STRB W8, [X26 + 0x1EC]
	0x031FB3B4 CMP W25, 0x3
	0x031FB3B8 STR X31, [X21]
	0x031FB3BC B.HI 0x31FB528
	0x031FB3C0 ADRP X9, 0xFFFFFFFFFD99B000
	0x031FB3C4 MOV W8, W25
	0x031FB3C8 ADD X9, X9, 0x419
	0x031FB3CC ADR X10, 0x10
	0x031FB3D0 LDRB W11, [X9, X8, LSL]
	0x031FB3D4 ADD X10, X10, X11, 0x2, LSL
	0x031FB3D8 BR X10
	0x031FB3DC CBNZ X22, 0x31FB420
	0x031FB3E0 B 0x31FB524
	0x031FB3E4 CBZ X22, 0x31FB524
	0x031FB3E8 LDR W23, [X22 + 0x14]
	0x031FB3EC MOV X0, X22
	0x031FB3F0 BL 0x31FB2EC
	0x031FB3F4 ADRP X8, 0xF26000
	0x031FB3F8 LDR X8, [X8 + 0x368]
	0x031FB3FC MOV X22, X0
	0x031FB400 LDR X8, [X8]
	0x031FB404 LDR W9, [X8 + 0xE0]
	0x031FB408 CBZ W9, 0x31FB4C8
	0x031FB40C TBZ X23, 0x13, 0x31FB4D4
	0x031FB410 B 0x31FB4FC
	0x031FB414 CBZ X22, 0x31FB524
	0x031FB418 LDRB W8, [X22 + 0x16]
	0x031FB41C TBNZ X8, 0x3, 0x31FB49C
	0x031FB420 MOV X0, X22
	0x031FB424 BL 0x31FB2EC
	0x031FB428 ADRP X8, 0xF26000
	0x031FB42C LDR X8, [X8 + 0x368]
	0x031FB430 MOV X23, X0
	0x031FB434 LDR X8, [X8]
	0x031FB438 LDR W9, [X8 + 0xE0]
	0x031FB43C CBNZ W9, 0x31FB448
	0x031FB440 MOV X0, X8
	0x031FB444 BL 0x1C16DFC
	0x031FB448 MOV X0, X20
	0x031FB44C MOV X1, X23
	0x031FB450 BL 0x31FA37C
	0x031FB454 STR X0, [X21]
	0x031FB458 MOV X0, X22
	0x031FB45C BL 0x31FB2EC
	0x031FB460 MOV X1, X0
	0x031FB464 MOV X0, X20
	0x031FB468 B 0x31FB4DC
	0x031FB46C ADRP X8, 0xF26000
	0x031FB470 LDR X8, [X8 + 0x368]
	0x031FB474 LDR X0, [X8]
	0x031FB478 LDR W8, [X0 + 0xE0]
	0x031FB47C CBNZ W8, 0x31FB484
	0x031FB480 BL 0x1C16DFC
	0x031FB484 MOV X0, X22
	0x031FB488 MOV X1, X24
	0x031FB48C MOV X2, X20
	0x031FB490 MOV X3, X23
	0x031FB494 BL 0x31FAE40
	0x031FB498 B 0x31FB4E0
	0x031FB49C MOV X0, X22
	0x031FB4A0 BL 0x31FB2EC
	0x031FB4A4 ADRP X8, 0xF26000
	0x031FB4A8 LDR X8, [X8 + 0x368]
	0x031FB4AC MOV X22, X0
	0x031FB4B0 LDR X8, [X8]
	0x031FB4B4 LDR W9, [X8 + 0xE0]
	0x031FB4B8 CBNZ W9, 0x31FB4FC
	0x031FB4BC MOV X0, X8
	0x031FB4C0 BL 0x1C16DFC
	0x031FB4C4 B 0x31FB4FC
	0x031FB4C8 MOV X0, X8
	0x031FB4CC BL 0x1C16DFC
	0x031FB4D0 TBNZ X23, 0x13, 0x31FB4FC
	0x031FB4D4 MOV X0, X20
	0x031FB4D8 MOV X1, X22
	0x031FB4DC BL 0x31FAC08
	0x031FB4E0 STR X0, [X19]
	0x031FB4E4 LDP X20, X19, [X31 + 0x40]
	0x031FB4E8 LDP X22, X21, [X31 + 0x30]
	0x031FB4EC LDP X24, X23, [X31 + 0x20]
	0x031FB4F0 LDP X26, X25, [X31 + 0x10]
	0x031FB4F4 LDR X30, [X31], #0x50
	0x031FB4F8 RET
	0x031FB4FC MOV X0, X20
	0x031FB500 MOV X1, X22
	0x031FB504 MOV X2, X21
	0x031FB508 MOV X3, X19
	0x031FB50C LDP X20, X19, [X31 + 0x40]
	0x031FB510 LDP X22, X21, [X31 + 0x30]
	0x031FB514 LDP X24, X23, [X31 + 0x20]
	0x031FB518 LDP X26, X25, [X31 + 0x10]
	0x031FB51C LDR X30, [X31], #0x50
	0x031FB520 B 0x31FAC74
	0x031FB524 BL 0x1C16F20
	0x031FB528 ADRP X0, 0xEF8000
	0x031FB52C LDR X0, [X0 + 0x5B0]
	0x031FB530 BL 0x1C16D08
	0x031FB534 BL 0x1C16F10
	0x031FB538 MOV X1, X31
	0x031FB53C MOV X19, X0
	0x031FB540 BL 0x337DEC0
	0x031FB544 ADRP X0, 0xF26000
	0x031FB548 LDR X0, [X0 + 0x378]
	0x031FB54C BL 0x1C16D08
	0x031FB550 MOV X1, X0
	0x031FB554 MOV X0, X19
	0x031FB558 BL 0x1C16DEC
	0x031FB55C STR X30, [X31 - 0x30]!
	0x031FB560 STP X22, X21, [X31 + 0x10]
	0x031FB564 STP X20, X19, [X31 + 0x20]
	0x031FB568 ADRP X21, 0x11E1000
	0x031FB56C ADRP X22, 0xEF8000
	0x031FB570 LDRB W8, [X21 + 0x1EE]
	0x031FB574 LDR X22, [X22 + 0x618]
	0x031FB578 MOV W20, W1
	0x031FB57C MOV X19, X0
	0x031FB580 TBNZ X8, 0x0, 0x31FB598
	0x031FB584 ADRP X0, 0xEF8000
	0x031FB588 LDR X0, [X0 + 0x618]
	0x031FB58C BL 0x1C16CF4
	0x031FB590 MOVZ W8, 0x1
	0x031FB594 STRB W8, [X21 + 0x1EE]
	0x031FB598 LDR X0, [X22]
	0x031FB59C MOVZ W1, 0x8
	0x031FB5A0 BL 0x1C16D6C
	0x031FB5A4 CBZ X19, 0x31FB750
	0x031FB5A8 LDR W8, [X19 + 0x18]
	0x031FB5AC CMP W8, W20
	0x031FB5B0 B.LS 0x31FB74C
	0x031FB5B4 ADD X9, X19, W20, SXTW
	0x031FB5B8 LDRB W10, [X9 + 0x20]!
	0x031FB5BC CBZ X0, 0x31FB750
	0x031FB5C0 LDR W8, [X0 + 0x18]
	0x031FB5C4 CBZ W8, 0x31FB74C
	0x031FB5C8 STRB W10, [X0 + 0x20]
	0x031FB5CC LDR W10, [X19 + 0x18]
	0x031FB5D0 CMP W10, W20
	0x031FB5D4 B.LS 0x31FB74C
	0x031FB5D8 ADD W11, W20, 0x1
	0x031FB5DC CMP W11, W10
	0x031FB5E0 B.CS 0x31FB74C
	0x031FB5E4 CMP W8, 0x1
	0x031FB5E8 B.LS 0x31FB74C
	0x031FB5EC ADD X10, X19, W11, SXTW
	0x031FB5F0 LDRB W12, [X10 + 0x20]!
	0x031FB5F4 LDRB W9, [X9]
	0x031FB5F8 UBFM W12, W12, 0x8, 0x7
	0x031FB5FC EXTR W9, W9, W12, 0x19
	0x031FB600 STRB W9, [X0 + 0x21]
	0x031FB604 LDR W9, [X19 + 0x18]
	0x031FB608 CMP W11, W9
	0x031FB60C B.CS 0x31FB74C
	0x031FB610 ADD W11, W20, 0x2
	0x031FB614 CMP W11, W9
	0x031FB618 B.CS 0x31FB74C
	0x031FB61C CMP W8, 0x2
	0x031FB620 B.LS 0x31FB74C
	0x031FB624 ADD X9, X19, W11, SXTW
	0x031FB628 LDRB W12, [X9 + 0x20]!
	0x031FB62C LDRB W10, [X10]
	0x031FB630 UBFM W12, W12, 0x8, 0x7
	0x031FB634 EXTR W10, W10, W12, 0x1A
	0x031FB638 STRB W10, [X0 + 0x22]
	0x031FB63C LDR W10, [X19 + 0x18]
	0x031FB640 CMP W11, W10
	0x031FB644 B.CS 0x31FB74C
	0x031FB648 ADD W11, W20, 0x3
	0x031FB64C CMP W11, W10
	0x031FB650 B.CS 0x31FB74C
	0x031FB654 CMP W8, 0x3
	0x031FB658 B.LS 0x31FB74C
	0x031FB65C ADD X10, X19, W11, SXTW
	0x031FB660 LDRB W12, [X10 + 0x20]!
	0x031FB664 LDRB W9, [X9]
	0x031FB668 UBFM W12, W12, 0x8, 0x7
	0x031FB66C EXTR W9, W9, W12, 0x1B
	0x031FB670 STRB W9, [X0 + 0x23]
	0x031FB674 LDR W9, [X19 + 0x18]
	0x031FB678 CMP W11, W9
	0x031FB67C B.CS 0x31FB74C
	0x031FB680 ADD W11, W20, 0x4
	0x031FB684 CMP W11, W9
	0x031FB688 B.CS 0x31FB74C
	0x031FB68C CMP W8, 0x4
	0x031FB690 B.LS 0x31FB74C
	0x031FB694 ADD X9, X19, W11, SXTW
	0x031FB698 LDRB W12, [X9 + 0x20]!
	0x031FB69C LDRB W10, [X10]
	0x031FB6A0 UBFM W12, W12, 0x8, 0x7
	0x031FB6A4 EXTR W10, W10, W12, 0x1C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x11E2000
	010 Move X23, 0xEF9000
	011 Move X20, 0xF27000
	012 Move W8, [X21+487]
	013 Move X23, [X23+1560]
	014 Move X20, [X20+800]
	015 Move X19, X1
	016 Move X22, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0xEF9000
	022 Move X0, [X0+1560]
	023 Call 0x1C17CF4
	024 Move X0, 0xF27000
	025 Move X0, [X0+872]
	026 Call 0x1C17CF4
	027 Move X0, 0xF27000
	028 Move X0, [X0+800]
	029 Call 0x1C17CF4
	030 Move X0, 0xF26000
	031 Move X0, [X0+3744]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+487], W8
	035 Move X0, [X23]
	036 Move W1, 21
	037 Call 0x1C17D6C
	038 Move X8, [X20]
	039 Move X20, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X0, X31
	046 Call DES.Create
	047 Compare X0, 0
	048 JumpIfEqual {223}
	049 Move X8, [X0]
	050 Move X25, 0xF27000
	051 Move W1, 2
	052 Move X21, X0
	053 Move X9, [X8+584]
	054 Move X2, [X8+592]
	055 Move X25, [X25+872]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Compare X22, 0
	058 JumpIfEqual {102}
	059 Move W8, [X22+16]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X0, [X25]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X22
	067 Move W1, W31
	068 Call ChallengeResponse2.PasswordToKey, X0, X1
	069 Move X8, [X21]
	070 Move X1, X0
	071 Move X0, X21
	072 Move X9, [X8+504]
	073 Move X2, [X8+512]
	074 NotImplemented "Instruction BLR not yet implemented."
	075 Move X8, [X21]
	076 Move X0, X21
	077 Move X9, [X8+632]
	078 Move X1, [X8+640]
	079 NotImplemented "Instruction BLR not yet implemented."
	080 Compare X0, 0
	081 JumpIfEqual {223}
	082 Move X9, [X25]
	083 Move X11, 0xF26000
	084 Move X8, [X0]
	085 Move X23, X0
	086 Move X10, [X9+184]
	087 Move X11, [X11+3744]
	088 NotImplemented "Instruction LDRH not yet implemented."
	089 Move X24, [X10]
	090 Move X1, [X11]
	091 Compare X9, 0
	092 JumpIfEqual {99}
	093 Move X10, [X8+176]
	094 Add X10, X10, 8
	095 NotImplemented "Instruction LDUR not yet implemented."
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Subtract X9, X9, 1
	098 Add X10, X10, 16
	099 Move W2, 3
	100 Move X0, X23
	101 Call 0x1C5D788
	102 Move X0, [X25]
	103 Move W8, [X0+224]
	104 Compare W8, 0
	105 JumpIfNotEqual {108}
	106 Call 0x1C17DFC
	107 Move X0, [X25]
	108 Move X8, [X0+184]
	109 Move W4, 8
	110 Move W1, W31
	111 Move X2, X20
	112 Move X0, [X8+8]
	113 Move W3, W31
	114 Move X5, X31
	115 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	116 Compare X22, 0
	117 JumpIfNotEqual {133}
	118 Move W9, [X10]
	119 Add W9, W9, 3
	120 Add X8, X8, W9
	121 Add X0, X8, 312
	122 Move X8, [X0]
	123 Move X6, [X0+8]
	124 Move W3, 8
	125 Move X0, X23
	126 Move X1, X24
	127 Move W2, W31
	128 Move X4, X20
	129 Move W5, W31
	130 NotImplemented "Instruction BLR not yet implemented."
	131 Compare X22, 0
	132 JumpIfEqual {176}
	133 Move W8, [X22+16]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move X0, [X25]
	136 Move W8, [X0+224]
	137 Compare W8, 0
	138 JumpIfNotEqual {140}
	139 Call 0x1C17DFC
	140 Move W1, 7
	141 Move X0, X22
	142 Call ChallengeResponse2.PasswordToKey, X0, X1
	143 Move X8, [X21]
	144 Move X1, X0
	145 Move X0, X21
	146 Move X9, [X8+504]
	147 Move X2, [X8+512]
	148 NotImplemented "Instruction BLR not yet implemented."
	149 Move X8, [X21]
	150 Move X0, X21
	151 Move X9, [X8+632]
	152 Move X1, [X8+640]
	153 NotImplemented "Instruction BLR not yet implemented."
	154 Compare X0, 0
	155 JumpIfEqual {223}
	156 Move X9, [X25]
	157 Move X11, 0xF26000
	158 Move X8, [X0]
	159 Move X22, X0
	160 Move X10, [X9+184]
	161 Move X11, [X11+3744]
	162 NotImplemented "Instruction LDRH not yet implemented."
	163 Move X23, [X10]
	164 Move X1, [X11]
	165 Compare X9, 0
	166 JumpIfEqual {173}
	167 Move X10, [X8+176]
	168 Add X10, X10, 8
	169 NotImplemented "Instruction LDUR not yet implemented."
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Subtract X9, X9, 1
	172 Add X10, X10, 16
	173 Move W2, 3
	174 Move X0, X22
	175 Call 0x1C5D788
	176 Move X0, [X25]
	177 Move W8, [X0+224]
	178 Compare W8, 0
	179 JumpIfNotEqual {182}
	180 Call 0x1C17DFC
	181 Move X0, [X25]
	182 Move X8, [X0+184]
	183 Move W3, 8
	184 Move W4, 8
	185 Move W1, W31
	186 Move X0, [X8+8]
	187 Move X2, X20
	188 Move X5, X31
	189 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	190 Move W9, [X10]
	191 Add W9, W9, 3
	192 Add X8, X8, W9
	193 Add X0, X8, 312
	194 Move X8, [X0]
	195 Move X6, [X0+8]
	196 Move W3, 8
	197 Move W5, 8
	198 Move X0, X22
	199 Move X1, X23
	200 Move W2, W31
	201 Move X4, X20
	202 NotImplemented "Instruction BLR not yet implemented."
	203 Move X0, X21
	204 Move X1, X31
	205 Call SymmetricAlgorithm.Clear, X0
	206 Move X0, [X25]
	207 Move W8, [X0+224]
	208 Compare W8, 0
	209 JumpIfNotEqual {211}
	210 Call 0x1C17DFC
	211 Move X0, X19
	212 Move X1, X20
	213 Move X20, [X31+48]
	214 Move X19, [X31+56]
	215 Move X22, [X31+32]
	216 Move X21, [X31+40]
	217 Move X24, [X31+16]
	218 Move X23, [X31+24]
	219 Move X30, [X31+64]
	220 Move X25, [X31+72]
	221 Call ChallengeResponse2.GetResponse, X0, X1
	222 Return X0
	223 Call 0x1C17F20

Method: System.Byte[] Compute_NTLM_Password(System.String password)

Disassembly:
	0x031FBB04 STP X22, X21, [X31 + 0x20]
	0x031FBB08 STP X20, X19, [X31 + 0x30]
	0x031FBB0C ADRP X22, 0x11E1000
	0x031FBB10 ADRP X21, 0xF26000
	0x031FBB14 LDRB W8, [X22 + 0x1F2]
	0x031FBB18 LDR X21, [X21 + 0x380]
	0x031FBB1C MOV X20, X1
	0x031FBB20 MOV X19, X0
	0x031FBB24 TBNZ X8, 0x0, 0x31FBB3C
	0x031FBB28 ADRP X0, 0xF26000
	0x031FBB2C LDR X0, [X0 + 0x380]
	0x031FBB30 BL 0x1C16CF4
	0x031FBB34 MOVZ W8, 0x1
	0x031FBB38 STRB W8, [X22 + 0x1F2]
	0x031FBB3C LDR X0, [X21]
	0x031FBB40 MOVN W22, 0x0
	0x031FBB44 LDR W8, [X0 + 0xE0]
	0x031FBB48 CBNZ W8, 0x31FBB54
	0x031FBB4C BL 0x1C16DFC
	0x031FBB50 LDR X0, [X21]
	0x031FBB54 LDR X8, [X0 + 0xB8]
	0x031FBB58 LDR X8, [X8]
	0x031FBB5C CBZ X8, 0x31FBC08
	0x031FBB60 LDR W9, [X8 + 0x18]
	0x031FBB64 ADD W8, W22, 0x1
	0x031FBB68 CMP W8, W9
	0x031FBB6C B.GE 0x31FBBD0
	0x031FBB70 CBZ X20, 0x31FBC08
	0x031FBB74 LDR W9, [X20 + 0x18]
	0x031FBB78 CMP W8, W9
	0x031FBB7C B.CS 0x31FBC0C
	0x031FBB80 SXTW X23, W8
	0x031FBB84 ADD X8, X20, X23
	0x031FBB88 LDR W9, [X0 + 0xE0]
	0x031FBB8C LDRB W24, [X8 + 0x20]
	0x031FBB90 CBNZ W9, 0x31FBB9C
	0x031FBB94 BL 0x1C16DFC
	0x031FBB98 LDR X0, [X21]
	0x031FBB9C LDR X8, [X0 + 0xB8]
	0x031FBBA0 LDR X8, [X8]
	0x031FBBA4 CBZ X8, 0x31FBC08
	0x031FBBA8 LDR W9, [X8 + 0x18]
	0x031FBBAC ADD W22, W22, 0x1
	0x031FBBB0 CMP W22, W9
	0x031FBBB4 B.CS 0x31FBC0C
	0x031FBBB8 ADD X8, X8, X23
	0x031FBBBC LDRB W8, [X8 + 0x20]
	0x031FBBC0 CMP W24, W8
	0x031FBBC4 B.EQ 0x31FBB44
	0x031FBBC8 MOV W0, W31
	0x031FBBCC B 0x31FBBF4
	0x031FBBD0 ADD X0, X31, 0xC
	0x031FBBD4 MOVZ W2, 0x8
	0x031FBBD8 MOV X1, X20
	0x031FBBDC STR W31, [X31 + 0xC]
	0x031FBBE0 BL 0x31E9A68
	0x031FBBE4 LDR W8, [X31 + 0xC]
	0x031FBBE8 LDRSW X9, [X19 + 0x10]
	0x031FBBEC CMP X8, X9
	0x031FBBF0 CSET W0, EQ
	0x031FBBF4 LDP X20, X19, [X31 + 0x30]
	0x031FBBF8 LDP X22, X21, [X31 + 0x20]
	0x031FBBFC LDP X24, X23, [X31 + 0x10]
	0x031FBC00 LDR X30, [X31], #0x40
	0x031FBC04 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x11E2000
	007 Move X22, 0xEF9000
	008 Move W8, [X19+488]
	009 Move X22, [X22+1560]
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xEF9000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+488], W8
	020 Move X0, [X22]
	021 Move W1, 21
	022 Call 0x1C17D6C
	023 Move X19, X0
	024 Move X0, X31
	025 Call MD4.Create
	026 Move X20, X0
	027 Compare X21, 0
	028 JumpIfEqual {38}
	029 Move X0, X31
	030 Call Encoding.get_Unicode
	031 Compare X0, 0
	032 JumpIfEqual {76}
	033 Move X8, [X0]
	034 Move X1, X21
	035 Move X9, [X8+616]
	036 Move X2, [X8+624]
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X0, [X22]
	039 Move W1, W31
	040 Call 0x1C17D6C
	041 Move X21, X0
	042 Compare X20, 0
	043 JumpIfEqual {76}
	044 Move X0, X20
	045 Move X1, X21
	046 Move X2, X31
	047 Call HashAlgorithm.ComputeHash, X0, X1
	048 Move W4, 16
	049 Move W1, W31
	050 Move X2, X19
	051 Move W3, W31
	052 Move X5, X31
	053 Move X20, X0
	054 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	055 Compare X21, 0
	056 JumpIfEqual {76}
	057 Move W2, [X21+24]
	058 Move X0, X21
	059 Move W1, W31
	060 Move X3, X31
	061 Call Array.Clear, X0, X1, X2
	062 Compare X20, 0
	063 JumpIfEqual {76}
	064 Move W2, [X20+24]
	065 Move X0, X20
	066 Move W1, W31
	067 Move X3, X31
	068 Call Array.Clear, X0, X1, X2
	069 Move X0, X19
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Return X0
	076 Call 0x1C17F20

Method: System.Byte[] Compute_NTLM(System.String password, System.Byte[] challenge)

Disassembly:
	0x031FBC08 BL 0x1C16F20
	0x031FBC0C BL 0x1C16F28
	0x031FBC10 STR X30, [X31 - 0x30]!
	0x031FBC14 STP X22, X21, [X31 + 0x10]
	0x031FBC18 STP X20, X19, [X31 + 0x20]
	0x031FBC1C ADRP X21, 0x11E1000
	0x031FBC20 ADRP X22, 0xEF8000
	0x031FBC24 ADRP X19, 0xF26000
	0x031FBC28 ADRP X20, 0xF26000
	0x031FBC2C LDRB W8, [X21 + 0x1F3]
	0x031FBC30 LDR X22, [X22 + 0x618]
	0x031FBC34 LDR X19, [X19 + 0x3A0]
	0x031FBC38 LDR X20, [X20 + 0x380]
	0x031FBC3C TBNZ X8, 0x0, 0x31FBC6C
	0x031FBC40 ADRP X0, 0xEF8000
	0x031FBC44 LDR X0, [X0 + 0x618]
	0x031FBC48 BL 0x1C16CF4
	0x031FBC4C ADRP X0, 0xF26000
	0x031FBC50 LDR X0, [X0 + 0x380]
	0x031FBC54 BL 0x1C16CF4
	0x031FBC58 ADRP X0, 0xF26000
	0x031FBC5C LDR X0, [X0 + 0x3A0]
	0x031FBC60 BL 0x1C16CF4
	0x031FBC64 MOVZ W8, 0x1
	0x031FBC68 STRB W8, [X21 + 0x1F3]
	0x031FBC6C LDR X0, [X22]
	0x031FBC70 MOVZ W1, 0x8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11E2000
	007 Move X22, 0xF27000
	008 Move W8, [X21+489]
	009 Move X22, [X22+872]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF27000
	017 Move X0, [X0+872]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+489], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Call ChallengeResponse2.Compute_NTLM_Password, X0
	028 Move X1, X0
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Call ChallengeResponse2.GetResponse, X0, X1
	036 Return X0

Method: System.Void Compute_NTLMv2_Session(System.String password, System.Byte[] challenge, out System.Byte[] lm, out System.Byte[] ntlm)

Disassembly:
	0x031FBC74 BL 0x1C16D6C
	0x031FBC78 LDR X1, [X19]
	0x031FBC7C MOV X2, X31
	0x031FBC80 MOV X19, X0
	0x031FBC84 BL 0x32C5BD8
	0x031FBC88 LDR X8, [X20]
	0x031FBC8C LDP X22, X21, [X31 + 0x10]
	0x031FBC90 LDR X8, [X8 + 0xB8]
	0x031FBC94 STR X19, [X8]
	0x031FBC98 LDP X20, X19, [X31 + 0x20]
	0x031FBC9C LDR X30, [X31], #0x30
	0x031FBCA0 RET
	0x031FBCA4 STR X30, [X31 - 0x20]!
	0x031FBCA8 STP X20, X19, [X31 + 0x10]
	0x031FBCAC ADRP X20, 0x11E1000
	0x031FBCB0 ADRP X19, 0xF26000
	0x031FBCB4 LDRB W8, [X20 + 0x1F4]
	0x031FBCB8 LDR X19, [X19 + 0x3A8]
	0x031FBCBC TBNZ X8, 0x0, 0x31FBCD4
	0x031FBCC0 ADRP X0, 0xF26000
	0x031FBCC4 LDR X0, [X0 + 0x3A8]
	0x031FBCC8 BL 0x1C16CF4
	0x031FBCCC MOVZ W8, 0x1
	0x031FBCD0 STRB W8, [X20 + 0x1F4]
	0x031FBCD4 LDR X0, [X19]
	0x031FBCD8 LDR W8, [X0 + 0xE0]
	0x031FBCDC CBNZ W8, 0x31FBCE8
	0x031FBCE0 BL 0x1C16DFC
	0x031FBCE4 LDR X0, [X19]
	0x031FBCE8 LDR X8, [X0 + 0xB8]
	0x031FBCEC LDP X20, X19, [X31 + 0x10]
	0x031FBCF0 LDR W0, [X8]
	0x031FBCF4 LDR X30, [X31], #0x20
	0x031FBCF8 RET
	0x031FBCFC STR X30, [X31 - 0x20]!
	0x031FBD00 STP X20, X19, [X31 + 0x10]
	0x031FBD04 ADRP X19, 0x11E1000
	0x031FBD08 ADRP X20, 0xF26000
	0x031FBD0C LDRB W8, [X19 + 0x1F5]
	0x031FBD10 LDR X20, [X20 + 0x3A8]
	0x031FBD14 TBNZ X8, 0x0, 0x31FBD2C
	0x031FBD18 ADRP X0, 0xF26000
	0x031FBD1C LDR X0, [X0 + 0x3A8]
	0x031FBD20 BL 0x1C16CF4
	0x031FBD24 MOVZ W8, 0x1
	0x031FBD28 STRB W8, [X19 + 0x1F5]
	0x031FBD2C LDR X8, [X20]
	0x031FBD30 LDP X20, X19, [X31 + 0x10]
	0x031FBD34 MOVZ W9, 0x1
	0x031FBD38 LDR X8, [X8 + 0xB8]
	0x031FBD3C STR W9, [X8]
	0x031FBD40 LDR X30, [X31], #0x20
	0x031FBD44 RET
	0x031FBD48 STP X30, X21, [X31 - 0x20]!
	0x031FBD4C STP X20, X19, [X31 + 0x10]
	0x031FBD50 ADRP X20, 0x11E1000
	0x031FBD54 ADRP X21, 0xF26000
	0x031FBD58 LDRB W8, [X20 + 0x1F6]
	0x031FBD5C LDR X21, [X21 + 0x380]
	0x031FBD60 MOV X19, X0
	0x031FBD64 TBNZ X8, 0x0, 0x31FBD7C
	0x031FBD68 ADRP X0, 0xF26000
	0x031FBD6C LDR X0, [X0 + 0x380]
	0x031FBD70 BL 0x1C16CF4
	0x031FBD74 MOVZ W8, 0x1
	0x031FBD78 STRB W8, [X20 + 0x1F6]
	0x031FBD7C LDR X0, [X21]
	0x031FBD80 LDR W8, [X0 + 0xE0]
	0x031FBD84 CBNZ W8, 0x31FBD8C
	0x031FBD88 BL 0x1C16DFC
	0x031FBD8C MOV X0, X19
	0x031FBD90 MOV X1, X31
	0x031FBD94 BL 0x33BDD8C
	0x031FBD98 MOVZ W8, 0x1
	0x031FBD9C MOV X0, X31
	0x031FBDA0 STR W8, [X19 + 0x10]
	0x031FBDA4 BL 0x33C18F8
	0x031FBDA8 STR X0, [X19 + 0x20]
	0x031FBDAC MOV X0, X31
	0x031FBDB0 BL 0x33C1540
	0x031FBDB4 MOVZ W8, 0xB207
	0x031FBDB8 STR X0, [X19 + 0x18]
	0x031FBDBC STR W8, [X19 + 0x14]
	0x031FBDC0 LDP X20, X19, [X31 + 0x10]
	0x031FBDC4 LDP X30, X21, [X31], #0x20
	0x031FBDC8 RET
	0x031FBDCC STR X30, [X31 - 0x30]!
	0x031FBDD0 STP X22, X21, [X31 + 0x10]
	0x031FBDD4 STP X20, X19, [X31 + 0x20]
	0x031FBDD8 ADRP X21, 0x11E1000
	0x031FBDDC ADRP X22, 0xEF8000
	0x031FBDE0 LDRB W8, [X21 + 0x1F7]
	0x031FBDE4 LDR X22, [X22 + 0x988]
	0x031FBDE8 MOV X20, X1
	0x031FBDEC MOV X19, X0
	0x031FBDF0 TBNZ X8, 0x0, 0x31FBE08
	0x031FBDF4 ADRP X0, 0xEF8000
	0x031FBDF8 LDR X0, [X0 + 0x988]
	0x031FBDFC BL 0x1C16CF4
	0x031FBE00 MOVZ W8, 0x1
	0x031FBE04 STRB W8, [X21 + 0x1F7]
	0x031FBE08 LDR X1, [X22]
	0x031FBE0C CMP X20, 0x0
	0x031FBE10 MOV X2, X31
	0x031FBE14 CSEL X20, X1, X20, EQ
	0x031FBE18 MOV X0, X20
	0x031FBE1C BL 0x321BA08
	0x031FBE20 LDR W8, [X19 + 0x14]
	0x031FBE24 ANDS W31, W0, 0x1
	0x031FBE28 MOVZ W9, 0x1000
	0x031FBE2C CSEL W9, W31, W9, NE
	0x031FBE30 AND W8, W8, 0xFFFFEFFF
	0x031FBE34 ORR W8, W8, W9, 0x0
	0x031FBE38 STR W8, [X19 + 0x14]
	0x031FBE3C STR X20, [X19 + 0x20]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x11E2000
	011 Move X25, 0xEF9000
	012 Move W8, [X21+490]
	013 Move X25, [X25+1560]
	014 Move X19, X3
	015 Move X23, X2
	016 Move X24, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {30}
	022 Move X0, 0xEF9000
	023 Move X0, [X0+1560]
	024 Call 0x1C17CF4
	025 Move X0, 0xF27000
	026 Move X0, [X0+872]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+490], W8
	030 Move X0, [X25]
	031 Move W1, 8
	032 Call 0x1C17D6C
	033 Move X21, X0
	034 Move X0, X31
	035 Call RandomNumberGenerator.Create
	036 Compare X0, 0
	037 JumpIfEqual {136}
	038 Move X8, [X0]
	039 Move X1, X21
	040 Move X9, [X8+408]
	041 Move X2, [X8+416]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Compare X24, 0
	044 JumpIfEqual {136}
	045 Move W8, [X24+24]
	046 Move X0, [X25]
	047 Add W1, W8, 8
	048 Call 0x1C17D6C
	049 Move X22, X0
	050 Move X0, X24
	051 Move X1, X22
	052 Move W2, W31
	053 Move X3, X31
	054 Call Array.CopyTo, X0, X1, X2
	055 Compare X21, 0
	056 JumpIfEqual {136}
	057 Move W2, [X24+24]
	058 Move X0, X21
	059 Move X1, X22
	060 Move X3, X31
	061 Call Array.CopyTo, X0, X1, X2
	062 Move X0, [X25]
	063 Move W1, 24
	064 Call 0x1C17D6C
	065 Move X1, X0
	066 Move [X23], X0
	067 Move X0, X21
	068 Move W2, W31
	069 Move X3, X31
	070 Call Array.CopyTo, X0, X1, X2
	071 Move X0, X31
	072 Call MD5.Create
	073 Compare X0, 0
	074 JumpIfEqual {136}
	075 Move X26, 0xF27000
	076 Move X26, [X26+872]
	077 Move X1, X22
	078 Move X2, X31
	079 Call HashAlgorithm.ComputeHash, X0, X1
	080 Move X8, [X25]
	081 Move X23, X0
	082 Move W1, 8
	083 Move X0, X8
	084 Call 0x1C17D6C
	085 Move X24, X0
	086 Move W2, 8
	087 Move X0, X23
	088 Move X1, X24
	089 Move X3, X31
	090 Call Array.Copy, X0, X1, X2
	091 Move X0, [X26]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X0, X20
	097 Move X1, X24
	098 Call ChallengeResponse2.Compute_NTLM, X0, X1
	099 Move [X19], X0
	100 Move W2, [X21+24]
	101 Move X0, X21
	102 Move W1, W31
	103 Move X3, X31
	104 Call Array.Clear, X0, X1, X2
	105 Compare X22, 0
	106 JumpIfEqual {136}
	107 Move W2, [X22+24]
	108 Move X0, X22
	109 Move W1, W31
	110 Move X3, X31
	111 Call Array.Clear, X0, X1, X2
	112 Compare X24, 0
	113 JumpIfEqual {136}
	114 Move W2, [X24+24]
	115 Move X0, X24
	116 Move W1, W31
	117 Move X3, X31
	118 Call Array.Clear, X0, X1, X2
	119 Compare X23, 0
	120 JumpIfEqual {136}
	121 Move W2, [X23+24]
	122 Move X0, X23
	123 Move X20, [X31+64]
	124 Move X19, [X31+72]
	125 Move X22, [X31+48]
	126 Move X21, [X31+56]
	127 Move X24, [X31+32]
	128 Move X23, [X31+40]
	129 Move X26, [X31+16]
	130 Move X25, [X31+24]
	131 Move W1, W31
	132 Move X3, X31
	133 Move X30, [X31+80]
	134 Call Array.Clear, X0, X1, X2
	135 Return 
	136 Call 0x1C17F20

Method: System.Byte[] Compute_NTLMv2(Mono.Security.Protocol.Ntlm.Type2Message type2, System.String username, System.String password, System.String domain)

Disassembly:
	0x031FBE40 LDP X20, X19, [X31 + 0x20]
	0x031FBE44 LDP X22, X21, [X31 + 0x10]
	0x031FBE48 LDR X30, [X31], #0x30
	0x031FBE4C RET
	0x031FBE50 STR X30, [X31 - 0x30]!
	0x031FBE54 STP X22, X21, [X31 + 0x10]
	0x031FBE58 STP X20, X19, [X31 + 0x20]
	0x031FBE5C ADRP X21, 0x11E1000
	0x031FBE60 ADRP X22, 0xEF8000
	0x031FBE64 LDRB W8, [X21 + 0x1F8]
	0x031FBE68 LDR X22, [X22 + 0x988]
	0x031FBE6C MOV X20, X1
	0x031FBE70 MOV X19, X0
	0x031FBE74 TBNZ X8, 0x0, 0x31FBE8C
	0x031FBE78 ADRP X0, 0xEF8000
	0x031FBE7C LDR X0, [X0 + 0x988]
	0x031FBE80 BL 0x1C16CF4
	0x031FBE84 MOVZ W8, 0x1
	0x031FBE88 STRB W8, [X21 + 0x1F8]
	0x031FBE8C LDR X1, [X22]
	0x031FBE90 CMP X20, 0x0
	0x031FBE94 MOV X2, X31
	0x031FBE98 CSEL X20, X1, X20, EQ
	0x031FBE9C MOV X0, X20
	0x031FBEA0 BL 0x321BA08
	0x031FBEA4 LDR W8, [X19 + 0x14]
	0x031FBEA8 ANDS W31, W0, 0x1
	0x031FBEAC MOVZ W9, 0x2000
	0x031FBEB0 CSEL W9, W31, W9, NE
	0x031FBEB4 AND W8, W8, 0xFFFFDFFF
	0x031FBEB8 ORR W8, W8, W9, 0x0
	0x031FBEBC STR W8, [X19 + 0x14]
	0x031FBEC0 STR X20, [X19 + 0x18]
	0x031FBEC4 LDP X20, X19, [X31 + 0x20]
	0x031FBEC8 LDP X22, X21, [X31 + 0x10]
	0x031FBECC LDR X30, [X31], #0x30
	0x031FBED0 RET
	0x031FBED4 SUB X31, X31, 0x40
	0x031FBED8 STR X30, [X31 + 0x10]
	0x031FBEDC STP X22, X21, [X31 + 0x20]
	0x031FBEE0 STP X20, X19, [X31 + 0x30]
	0x031FBEE4 MOV X20, X1
	0x031FBEE8 MOV X19, X0
	0x031FBEEC BL 0x31FB964
	0x031FBEF0 ADD X0, X31, 0x8
	0x031FBEF4 MOVZ W2, 0xC
	0x031FBEF8 MOV X1, X20
	0x031FBEFC STR W31, [X31 + 0x8]
	0x031FBF00 BL 0x31E9A68
	0x031FBF04 LDR W8, [X31 + 0x8]
	0x031FBF08 ADD X0, X31, 0xC
	0x031FBF0C MOVZ W2, 0x10
	0x031FBF10 MOV X1, X20
	0x031FBF14 STR W8, [X19 + 0x14]
	0x031FBF18 STRH W31, [X31 + 0xC]
	0x031FBF1C BL 0x31E9A1C
	0x031FBF20 LDRH W21, [X31 + 0xC]
	0x031FBF24 ADD X0, X31, 0x18
	0x031FBF28 MOVZ W2, 0x14
	0x031FBF2C MOV X1, X20
	0x031FBF30 STRH W31, [X31 + 0x18]
	0x031FBF34 BL 0x31E9A1C
	0x031FBF38 LDRH W22, [X31 + 0x18]
	0x031FBF3C MOV X0, X31
	0x031FBF40 BL 0x3242EC8
	0x031FBF44 CBZ X0, 0x31FBFC0
	0x031FBF48 LDR X8, [X0]
	0x031FBF4C MOV X1, X20
	0x031FBF50 MOV W2, W22
	0x031FBF54 MOV W3, W21
	0x031FBF58 LDR X9, [X8 + 0x388]
	0x031FBF5C LDR X4, [X8 + 0x390]
	0x031FBF60 BLR X9
	0x031FBF64 STR X0, [X19 + 0x20]
	0x031FBF68 ADD X0, X31, 0x1C
	0x031FBF6C MOVZ W2, 0x18
	0x031FBF70 MOV X1, X20
	0x031FBF74 STRH W31, [X31 + 0x1C]
	0x031FBF78 BL 0x31E9A1C
	0x031FBF7C LDRH W21, [X31 + 0x1C]
	0x031FBF80 MOV X0, X31
	0x031FBF84 BL 0x3242EC8
	0x031FBF88 CBZ X0, 0x31FBFC0
	0x031FBF8C LDR X8, [X0]
	0x031FBF90 MOVZ W2, 0x20
	0x031FBF94 MOV X1, X20
	0x031FBF98 MOV W3, W21
	0x031FBF9C LDR X9, [X8 + 0x388]
	0x031FBFA0 LDR X4, [X8 + 0x390]
	0x031FBFA4 BLR X9
	0x031FBFA8 STR X0, [X19 + 0x18]
	0x031FBFAC LDP X20, X19, [X31 + 0x30]
	0x031FBFB0 LDP X22, X21, [X31 + 0x20]
	0x031FBFB4 LDR X30, [X31 + 0x10]
	0x031FBFB8 ADD X31, X31, 0x40
	0x031FBFBC RET
	0x031FBFC0 BL 0x1C16F20
	0x031FBFC4 STP X30, X23, [X31 - 0x30]!
	0x031FBFC8 STP X22, X21, [X31 + 0x10]
	0x031FBFCC STP X20, X19, [X31 + 0x20]
	0x031FBFD0 ADRP X19, 0x11E1000
	0x031FBFD4 LDRB W8, [X19 + 0x1F9]
	0x031FBFD8 MOV X20, X0
	0x031FBFDC TBNZ X8, 0x0, 0x31FBFF4
	0x031FBFE0 ADRP X0, 0xEFA000
	0x031FBFE4 LDR X0, [X0 + 0xC48]
	0x031FBFE8 BL 0x1C16CF4
	0x031FBFEC MOVZ W8, 0x1
	0x031FBFF0 STRB W8, [X19 + 0x1F9]
	0x031FBFF4 LDR X8, [X20 + 0x20]
	0x031FBFF8 CBZ X8, 0x31FC20C
	0x031FBFFC LDR X9, [X20 + 0x18]
	0x031FC000 CBZ X9, 0x31FC20C
	0x031FC004 LDR W21, [X9 + 0x10]
	0x031FC008 LDR W22, [X8 + 0x10]
	0x031FC00C MOV X0, X20
	0x031FC010 SXTH W8, W21
	0x031FC014 ADD W23, W8, 0x20
	0x031FC018 ADD W1, W23, W22, SXTH
	0x031FC01C BL 0x31FB864
	0x031FC020 CBZ X0, 0x31FC20C
	0x031FC024 LDR W8, [X0 + 0x18]
	0x031FC028 MOV X19, X0
	0x031FC02C CMP W8, 0xC
	0x031FC030 B.LS 0x31FC208
	0x031FC034 LDR W9, [X20 + 0x14]
	0x031FC038 CMP W8, 0xD
	0x031FC03C STRB W9, [X19 + 0x2C]
	0x031FC040 B.EQ 0x31FC208
	0x031FC044 LDR W9, [X20 + 0x14]
	0x031FC048 CMP W8, 0xE
	0x031FC04C UBFM W9, W9, 0x8, 0x1F
	0x031FC050 STRB W9, [X19 + 0x2D]
	0x031FC054 B.LS 0x31FC208
	0x031FC058 LDRH W9, [X20 + 0x16]
	0x031FC05C CMP W8, 0xF
	0x031FC060 STRB W9, [X19 + 0x2E]
	0x031FC064 B.EQ 0x31FC208
	0x031FC068 LDRB W9, [X20 + 0x17]
	0x031FC06C CMP W8, 0x10
	0x031FC070 STRB W9, [X19 + 0x2F]
	0x031FC074 B.LS 0x31FC208
	0x031FC078 CMP W8, 0x11
	0x031FC07C STRB W22, [X19 + 0x30]
	0x031FC080 B.EQ 0x31FC208
	0x031FC084 UBFM W9, W22, 0x8, 0x1F
	0x031FC088 CMP W8, 0x12
	0x031FC08C STRB W9, [X19 + 0x31]
	0x031FC090 B.LS 0x31FC208
	0x031FC094 CMP W8, 0x13
	0x031FC098 STRB W22, [X19 + 0x32]
	0x031FC09C B.EQ 0x31FC208
	0x031FC0A0 CMP W8, 0x14
	0x031FC0A4 STRB W9, [X19 + 0x33]
	0x031FC0A8 B.LS 0x31FC208
	0x031FC0AC CMP W8, 0x15
	0x031FC0B0 STRB W23, [X19 + 0x34]
	0x031FC0B4 B.EQ 0x31FC208
	0x031FC0B8 UBFM W9, W23, 0x8, 0x1F
	0x031FC0BC CMP W8, 0x18
	0x031FC0C0 STRB W9, [X19 + 0x35]
	0x031FC0C4 B.LS 0x31FC208
	0x031FC0C8 CMP W8, 0x19
	0x031FC0CC STRB W21, [X19 + 0x38]
	0x031FC0D0 B.EQ 0x31FC208
	0x031FC0D4 UBFM W9, W21, 0x8, 0x1F
	0x031FC0D8 CMP W8, 0x1A
	0x031FC0DC STRB W9, [X19 + 0x39]
	0x031FC0E0 B.LS 0x31FC208
	0x031FC0E4 CMP W8, 0x1B
	0x031FC0E8 STRB W21, [X19 + 0x3A]
	0x031FC0EC B.EQ 0x31FC208
	0x031FC0F0 CMP W8, 0x1C
	0x031FC0F4 STRB W9, [X19 + 0x3B]
	0x031FC0F8 B.LS 0x31FC208
	0x031FC0FC MOVZ W9, 0x20
	0x031FC100 CMP W8, 0x1D
	0x031FC104 STRB W9, [X19 + 0x3C]
	0x031FC108 B.EQ 0x31FC208
	0x031FC10C ADRP X21, 0xEF9000
	0x031FC110 LDR X21, [X21 + 0xC48]
	0x031FC114 MOV X0, X31
	0x031FC118 STRB W31, [X19 + 0x3D]
	0x031FC11C BL 0x3242EC8
	0x031FC120 LDR X8, [X21]
	0x031FC124 LDR X22, [X20 + 0x18]
	0x031FC128 MOV X21, X0
	0x031FC12C LDR W9, [X8 + 0xE0]
	0x031FC130 CBNZ W9, 0x31FC13C
	0x031FC134 MOV X0, X8
	0x031FC138 BL 0x1C16DFC
	0x031FC13C MOV X0, X31
	0x031FC140 BL 0x3338524
	0x031FC144 CBZ X22, 0x31FC20C
	0x031FC148 MOV X1, X0
	0x031FC14C MOV X0, X22
	0x031FC150 MOV X2, X31
	0x031FC154 BL 0x322B7DC
	0x031FC158 CBZ X21, 0x31FC20C
	0x031FC15C LDR X8, [X21]
	0x031FC160 MOV X1, X0
	0x031FC164 MOV X0, X21
	0x031FC168 LDR X9, [X8 + 0x268]
	0x031FC16C LDR X2, [X8 + 0x270]
	0x031FC170 BLR X9
	0x031FC174 CBZ X0, 0x31FC20C
	0x031FC178 LDR W4, [X0 + 0x18]
	0x031FC17C MOVZ W3, 0x20
	0x031FC180 MOV W1, W31
	0x031FC184 MOV X2, X19
	0x031FC188 MOV X5, X31
	0x031FC18C BL 0x33A8A9C
	0x031FC190 MOV X0, X31
	0x031FC194 BL 0x3242EC8
	0x031FC198 LDR X21, [X20 + 0x20]
	0x031FC19C MOV X20, X0
	0x031FC1A0 MOV X0, X31
	0x031FC1A4 BL 0x3338524
	0x031FC1A8 CBZ X21, 0x31FC20C
	0x031FC1AC MOV X1, X0
	0x031FC1B0 MOV X0, X21
	0x031FC1B4 MOV X2, X31
	0x031FC1B8 BL 0x322B7DC
	0x031FC1BC CBZ X20, 0x31FC20C
	0x031FC1C0 LDR X8, [X20]
	0x031FC1C4 MOV X1, X0
	0x031FC1C8 MOV X0, X20
	0x031FC1CC LDR X9, [X8 + 0x268]
	0x031FC1D0 LDR X2, [X8 + 0x270]
	0x031FC1D4 BLR X9
	0x031FC1D8 CBZ X0, 0x31FC20C
	0x031FC1DC LDR W4, [X0 + 0x18]
	0x031FC1E0 SXTH W3, W23
	0x031FC1E4 MOV W1, W31
	0x031FC1E8 MOV X2, X19
	0x031FC1EC MOV X5, X31
	0x031FC1F0 BL 0x33A8A9C
	0x031FC1F4 MOV X0, X19
	0x031FC1F8 LDP X20, X19, [X31 + 0x20]
	0x031FC1FC LDP X22, X21, [X31 + 0x10]
	0x031FC200 LDP X30, X23, [X31], #0x30
	0x031FC204 RET
	0x031FC208 BL 0x1C16F28
	0x031FC20C BL 0x1C16F20
	0x031FC210 STR X30, [X31 - 0x30]!
	0x031FC214 STP X22, X21, [X31 + 0x10]
	0x031FC218 STP X20, X19, [X31 + 0x20]
	0x031FC21C ADRP X22, 0x11E0000
	0x031FC220 ADRP X21, 0xF25000
	0x031FC224 LDRB W8, [X22 + 0x1FA]
	0x031FC228 LDR X21, [X21 + 0x380]
	0x031FC22C MOV X19, X1
	0x031FC230 MOV X20, X0
	0x031FC234 TBNZ X8, 0x0, 0x31FC258
	0x031FC238 ADRP X0, 0xEF7000
	0x031FC23C LDR X0, [X0 + 0x618]
	0x031FC240 BL 0x1C16CF4
	0x031FC244 ADRP X0, 0xF25000
	0x031FC248 LDR X0, [X0 + 0x380]
	0x031FC24C BL 0x1C16CF4
	0x031FC250 MOVZ W8, 0x1
	0x031FC254 STRB W8, [X22 + 0x1FA]
	0x031FC258 LDR X0, [X21]
	0x031FC25C ADRP X21, 0xEF7000
	0x031FC260 LDR W8, [X0 + 0xE0]
	0x031FC264 LDR X21, [X21 + 0x618]
	0x031FC268 CBNZ W8, 0x31FC270
	0x031FC26C BL 0x1C16DFC
	0x031FC270 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0x11E2000
	011 Move X23, 0xF27000
	012 Move W8, [X24+491]
	013 Move X23, [X23+872]
	014 Move X20, X3
	015 Move X21, X2
	016 Move X22, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {36}
	022 Move X0, 0xEF9000
	023 Move X0, [X0+1560]
	024 Call 0x1C17CF4
	025 Move X0, 0xF27000
	026 Move X0, [X0+872]
	027 Call 0x1C17CF4
	028 Move X0, 0xEFA000
	029 Move X0, [X0+2544]
	030 Call 0x1C17CF4
	031 Move X0, 0xF27000
	032 Move X0, [X0+880]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X24+491], W8
	036 Move X0, [X23]
	037 Move [X31], X31
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X21
	043 Call ChallengeResponse2.Compute_NTLM_Password, X0
	044 Move X21, X0
	045 Move X0, X31
	046 Call Encoding.get_Unicode
	047 Compare X22, 0
	048 JumpIfEqual {300}
	049 Move X23, X0
	050 Move X0, X22
	051 Move X1, X31
	052 Call String.ToUpperInvariant, X0
	053 Compare X23, 0
	054 JumpIfEqual {300}
	055 Move X8, [X23]
	056 Move X1, X0
	057 Move X0, X23
	058 Move X9, [X8+616]
	059 Move X2, [X8+624]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X22, X0
	062 Move X0, X31
	063 Call Encoding.get_Unicode
	064 Compare X0, 0
	065 JumpIfEqual {300}
	066 Move X8, [X0]
	067 Move X1, X20
	068 Move X9, [X8+616]
	069 Move X2, [X8+624]
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Compare X22, 0
	072 JumpIfEqual {300}
	073 Move X23, X0
	074 Compare X0, 0
	075 JumpIfEqual {300}
	076 Move X25, 0xEF9000
	077 Move X25, [X25+1560]
	078 Move W8, [X22+24]
	079 Move W9, [X23+24]
	080 Move X24, 0xF27000
	081 Move X0, [X25]
	082 Move X24, [X24+880]
	083 Add W1, W9, W8
	084 Call 0x1C17D6C
	085 Move X20, X0
	086 Move X0, X22
	087 Move X1, X20
	088 Move W2, W31
	089 Move X3, X31
	090 Call Array.CopyTo, X0, X1, X2
	091 Move W3, [X22+24]
	092 Move W4, [X23+24]
	093 Move X0, X23
	094 Move W1, W31
	095 Move X2, X20
	096 Move X5, X31
	097 Call Array.Copy, X0, X1, X2, X3, X4
	098 Move X0, [X24]
	099 Call 0x1C17F10
	100 Move X1, X21
	101 Move X2, X31
	102 Move X22, X0
	103 Call HMACMD5..ctor, X0, X1
	104 Compare X22, 0
	105 JumpIfEqual {300}
	106 Move X0, X22
	107 Move X1, X20
	108 Move X2, X31
	109 Call HashAlgorithm.ComputeHash, X0, X1
	110 Compare X21, 0
	111 JumpIfEqual {300}
	112 Move W2, [X21+24]
	113 Move X23, 0xEFA000
	114 Move X23, [X23+2544]
	115 Move X20, X0
	116 Move X0, X21
	117 Move W1, W31
	118 Move X3, X31
	119 Call Array.Clear, X0, X1, X2
	120 Move X0, X22
	121 Move X1, X31
	122 Call HashAlgorithm.Clear, X0
	123 Move X0, [X24]
	124 Call 0x1C17F10
	125 Move X1, X20
	126 Move X2, X31
	127 Move X21, X0
	128 Call HMACMD5..ctor, X0, X1
	129 Move X0, [X23]
	130 Move W8, [X0+224]
	131 Compare W8, 0
	132 JumpIfNotEqual {134}
	133 Call 0x1C17DFC
	134 Move X0, X31
	135 Call DateTime.get_Now
	136 Move [X31], X0
	137 Add X0, X31, 0
	138 Move X1, X31
	139 Call DateTime.get_Ticks, X0
	140 Move X8, [X25]
	141 Move X24, X0
	142 Move W1, 8
	143 Move X0, X8
	144 Call 0x1C17D6C
	145 Move X22, X0
	146 Move X0, X31
	147 Call RandomNumberGenerator.Create
	148 Compare X0, 0
	149 JumpIfEqual {300}
	150 Move X8, [X0]
	151 Move X1, X22
	152 Move X9, [X8+408]
	153 Move X2, [X8+416]
	154 NotImplemented "Instruction BLR not yet implemented."
	155 Compare X19, 0
	156 JumpIfEqual {300}
	157 Move X0, X19
	158 Call Type2Message.get_TargetInfo, X0
	159 Compare X0, 0
	160 JumpIfEqual {300}
	161 Move W8, [X0+24]
	162 Move X0, [X25]
	163 Add W1, W8, 28
	164 Call 0x1C17D6C
	165 Compare X0, 0
	166 JumpIfEqual {300}
	167 Move W8, [X0+24]
	168 Move X23, X0
	169 Compare W8, 0
	170 JumpIfEqual {301}
	171 Move W9, 1
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Move [X23+32], W9
	174 Move X8, 0xDD890000
	175 NotImplemented "Instruction MOVK not yet implemented."
	176 NotImplemented "Instruction MOVK not yet implemented."
	177 Add X8, X24, X8
	178 Add X0, X31, 8
	179 Move [X23+33], W9
	180 Move [X31+8], X8
	181 Call BitConverterLE.GetULongBytes, X0
	182 Move W3, 8
	183 Move W4, 8
	184 Move W1, W31
	185 Move X2, X23
	186 Move X5, X31
	187 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	188 Move W3, 16
	189 Move W4, 8
	190 Move X0, X22
	191 Move W1, W31
	192 Move X2, X23
	193 Move X5, X31
	194 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	195 Move X0, X19
	196 Call Type2Message.get_TargetInfo, X0
	197 Move X24, X0
	198 Move X0, X19
	199 Call Type2Message.get_TargetInfo, X0
	200 Compare X0, 0
	201 JumpIfEqual {300}
	202 Move W4, [X0+24]
	203 Move W3, 28
	204 Move X0, X24
	205 Move W1, W31
	206 Move X2, X23
	207 Move X5, X31
	208 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	209 Move X0, X19
	210 Call Type2Message.get_Nonce, X0
	211 Compare X0, 0
	212 JumpIfEqual {300}
	213 Move W8, [X0+24]
	214 Move W9, [X23+24]
	215 Move X24, X0
	216 Move X0, [X25]
	217 Add W1, W9, W8
	218 Call 0x1C17D6C
	219 Move X19, X0
	220 Move X0, X24
	221 Move X1, X19
	222 Move W2, W31
	223 Move X3, X31
	224 Call Array.CopyTo, X0, X1, X2
	225 Move W2, [X24+24]
	226 Move X0, X23
	227 Move X1, X19
	228 Move X3, X31
	229 Call Array.CopyTo, X0, X1, X2
	230 Compare X21, 0
	231 JumpIfEqual {300}
	232 Move X0, X21
	233 Move X1, X19
	234 Move X2, X31
	235 Call HashAlgorithm.ComputeHash, X0, X1
	236 Compare X0, 0
	237 JumpIfEqual {300}
	238 Move W8, [X23+24]
	239 Move W9, [X0+24]
	240 Move X24, X0
	241 Move X0, [X25]
	242 Add W1, W9, W8
	243 Call 0x1C17D6C
	244 Move X25, X0
	245 Move X0, X24
	246 Move X1, X25
	247 Move W2, W31
	248 Move X3, X31
	249 Call Array.CopyTo, X0, X1, X2
	250 Move W2, [X24+24]
	251 Move X0, X23
	252 Move X1, X25
	253 Move X3, X31
	254 Call Array.CopyTo, X0, X1, X2
	255 Compare X20, 0
	256 JumpIfEqual {300}
	257 Move W2, [X20+24]
	258 Move X0, X20
	259 Move W1, W31
	260 Move X3, X31
	261 Call Array.Clear, X0, X1, X2
	262 Move X0, X21
	263 Move X1, X31
	264 Call HashAlgorithm.Clear, X0
	265 Compare X22, 0
	266 JumpIfEqual {300}
	267 Move W2, [X22+24]
	268 Move X0, X22
	269 Move W1, W31
	270 Move X3, X31
	271 Call Array.Clear, X0, X1, X2
	272 Move W2, [X23+24]
	273 Move X0, X23
	274 Move W1, W31
	275 Move X3, X31
	276 Call Array.Clear, X0, X1, X2
	277 Compare X19, 0
	278 JumpIfEqual {300}
	279 Move W2, [X19+24]
	280 Move X0, X19
	281 Move W1, W31
	282 Move X3, X31
	283 Call Array.Clear, X0, X1, X2
	284 Move W2, [X24+24]
	285 Move X0, X24
	286 Move W1, W31
	287 Move X3, X31
	288 Call Array.Clear, X0, X1, X2
	289 Move X0, X25
	290 Move X20, [X31+64]
	291 Move X19, [X31+72]
	292 Move X22, [X31+48]
	293 Move X21, [X31+56]
	294 Move X24, [X31+32]
	295 Move X23, [X31+40]
	296 Move X30, [X31+16]
	297 Move X25, [X31+24]
	298 Add X31, X31, 80
	299 Return X0
	300 Call 0x1C17F20
	301 Call 0x1C17F28

Method: System.Void Compute(Mono.Security.Protocol.Ntlm.Type2Message type2, Mono.Security.Protocol.Ntlm.NtlmAuthLevel level, System.String username, System.String password, System.String domain, out System.Byte[] lm, out System.Byte[] ntlm)

Disassembly:
	0x031FC364 SUB X31, X31, 0x40
	0x031FC368 STR X30, [X31 + 0x10]
	0x031FC36C STP X22, X21, [X31 + 0x20]
	0x031FC370 STP X20, X19, [X31 + 0x30]
	0x031FC374 ADRP X21, 0x11E0000
	0x031FC378 LDRB W8, [X21 + 0x1FD]
	0x031FC37C MOV X19, X1
	0x031FC380 MOV X20, X0
	0x031FC384 TBNZ X8, 0x0, 0x31FC39C
	0x031FC388 ADRP X0, 0xEF7000
	0x031FC38C LDR X0, [X0 + 0x618]
	0x031FC390 BL 0x1C16CF4
	0x031FC394 MOVZ W8, 0x1
	0x031FC398 STRB W8, [X21 + 0x1FD]
	0x031FC39C MOV X0, X20
	0x031FC3A0 MOV X1, X19
	0x031FC3A4 BL 0x31FB964
	0x031FC3A8 ADD X0, X31, 0x4
	0x031FC3AC MOVZ W2, 0x14
	0x031FC3B0 MOV X1, X19
	0x031FC3B4 STR W31, [X31 + 0x4]
	0x031FC3B8 BL 0x31E9A68
	0x031FC3BC LDR W8, [X31 + 0x4]
	0x031FC3C0 LDR X2, [X20 + 0x18]
	0x031FC3C4 MOVZ W1, 0x18
	0x031FC3C8 MOVZ W4, 0x8
	0x031FC3CC MOV X0, X19
	0x031FC3D0 MOV W3, W31
	0x031FC3D4 MOV X5, X31
	0x031FC3D8 STR W8, [X20 + 0x14]
	0x031FC3DC BL 0x33A8A9C
	0x031FC3E0 ADD X0, X31, 0xC
	0x031FC3E4 MOVZ W2, 0xC
	0x031FC3E8 MOV X1, X19
	0x031FC3EC STRH W31, [X31 + 0xC]
	0x031FC3F0 BL 0x31E9A1C
	0x031FC3F4 LDRH W21, [X31 + 0xC]
	0x031FC3F8 ADD X0, X31, 0x18
	0x031FC3FC MOVZ W2, 0x10
	0x031FC400 MOV X1, X19
	0x031FC404 STRH W31, [X31 + 0x18]
	0x031FC408 BL 0x31E9A1C
	0x031FC40C CBZ W21, 0x31FC454
	0x031FC410 LDRB W8, [X20 + 0x14]
	0x031FC414 LDRH W22, [X31 + 0x18]
	0x031FC418 MOV X0, X31
	0x031FC41C TBNZ X8, 0x1, 0x31FC42C
	0x031FC420 BL 0x3242C30
	0x031FC424 CBNZ X0, 0x31FC434
	0x031FC428 B 0x31FC4E0
	0x031FC42C BL 0x3242EC8
	0x031FC430 CBZ X0, 0x31FC4E0
	0x031FC434 LDR X8, [X0]
	0x031FC438 MOV X1, X19
	0x031FC43C MOV W2, W22
	0x031FC440 MOV W3, W21
	0x031FC444 LDR X9, [X8 + 0x388]
	0x031FC448 LDR X4, [X8 + 0x390]
	0x031FC44C BLR X9
	0x031FC450 STR X0, [X20 + 0x20]
	0x031FC454 CBZ X19, 0x31FC4E0
	0x031FC458 LDR W8, [X19 + 0x18]
	0x031FC45C CMP W8, 0x30
	0x031FC460 B.LT 0x31FC4CC
	0x031FC464 ADD X0, X31, 0x1C
	0x031FC468 MOVZ W2, 0x28
	0x031FC46C MOV X1, X19
	0x031FC470 STRH W31, [X31 + 0x1C]
	0x031FC474 BL 0x31E9A1C
	0x031FC478 LDRH W21, [X31 + 0x1C]
	0x031FC47C ADD X0, X31, 0x8
	0x031FC480 MOVZ W2, 0x2C
	0x031FC484 MOV X1, X19
	0x031FC488 STRH W31, [X31 + 0x8]
	0x031FC48C BL 0x31E9A1C
	0x031FC490 CBZ W21, 0x31FC4CC
	0x031FC494 ADRP X8, 0xEF7000
	0x031FC498 LDRH W22, [X31 + 0x8]
	0x031FC49C LDR X8, [X8 + 0x618]
	0x031FC4A0 MOV W1, W21
	0x031FC4A4 LDR X0, [X8]
	0x031FC4A8 BL 0x1C16D6C
	0x031FC4AC MOV X2, X0
	0x031FC4B0 STR X0, [X20 + 0x28]
	0x031FC4B4 MOV X0, X19
	0x031FC4B8 MOV W1, W22
	0x031FC4BC MOV W3, W31
	0x031FC4C0 MOV W4, W21
	0x031FC4C4 MOV X5, X31
	0x031FC4C8 BL 0x33A8A9C
	0x031FC4CC LDP X20, X19, [X31 + 0x30]
	0x031FC4D0 LDP X22, X21, [X31 + 0x20]
	0x031FC4D4 LDR X30, [X31 + 0x10]
	0x031FC4D8 ADD X31, X31, 0x40
	0x031FC4DC RET
	0x031FC4E0 BL 0x1C16F20
	0x031FC4E4 STR X30, [X31 - 0x20]!
	0x031FC4E8 STP X20, X19, [X31 + 0x10]
	0x031FC4EC MOVZ W1, 0x28
	0x031FC4F0 MOV X20, X0
	0x031FC4F4 BL 0x31FB864
	0x031FC4F8 CBZ X0, 0x31FC598
	0x031FC4FC LDR X8, [X0 + 0x18]
	0x031FC500 MOV X19, X0
	0x031FC504 CMP W8, 0x10
	0x031FC508 B.LS 0x31FC594
	0x031FC50C CMP W8, 0x11
	0x031FC510 STRB W8, [X19 + 0x30]
	0x031FC514 B.EQ 0x31FC594
	0x031FC518 UBFM X9, X8, 0x8, 0x3F
	0x031FC51C CMP W8, 0x14
	0x031FC520 STRB W9, [X19 + 0x31]
	0x031FC524 B.LS 0x31FC594
	0x031FC528 LDR W9, [X20 + 0x14]
	0x031FC52C CMP W8, 0x15
	0x031FC530 STRB W9, [X19 + 0x34]
	0x031FC534 B.EQ 0x31FC594
	0x031FC538 LDR W9, [X20 + 0x14]
	0x031FC53C CMP W8, 0x16
	0x031FC540 UBFM W9, W9, 0x8, 0x1F
	0x031FC544 STRB W9, [X19 + 0x35]
	0x031FC548 B.LS 0x31FC594
	0x031FC54C LDRH W9, [X20 + 0x16]
	0x031FC550 CMP W8, 0x17
	0x031FC554 STRB W9, [X19 + 0x36]
	0x031FC558 B.EQ 0x31FC594

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X26, 0x11E1000
	011 Move W8, [X26+492]
	012 Move X19, X6
	013 Move X21, X5
	014 Move X23, X4
	015 Move X20, X3
	016 Move X24, X2
	017 Move W25, W1
	018 Move X22, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0xF26000
	024 Move X0, [X0+872]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X26+492], W8
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move [X21], X31
	030 Move X9, -40259584
	031 Move W8, W25
	032 Add X9, X9, 1049
	033 NotImplemented "Instruction ADR not yet implemented."
	034 Move W11, [X9]
	035 Add X10, X10, X11
	036 CallNoReturn X10
	037 Compare X22, 0
	038 JumpIfNotEqual {62}
	039 Compare X22, 0
	040 JumpIfEqual {139}
	041 Move W23, [X22+20]
	042 Move X0, X22
	043 Call Type2Message.get_Nonce, X0
	044 Move X8, 0xF26000
	045 Move X8, [X8+872]
	046 Move X22, X0
	047 Move X8, [X8]
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfEqual {104}
	051 Move TEMP, X23
	052 And TEMP, TEMP, 0x80000
	053 Compare TEMP, 0x80000
	054 JumpIfNotEqual {110}
	055 Compare X22, 0
	056 JumpIfEqual {139}
	057 Move W8, [X22+22]
	058 Move TEMP, X8
	059 And TEMP, TEMP, 8
	060 Compare TEMP, 8
	061 JumpIfEqual {93}
	062 Move X0, X22
	063 Call Type2Message.get_Nonce, X0
	064 Move X8, 0xF26000
	065 Move X8, [X8+872]
	066 Move X23, X0
	067 Move X8, [X8]
	068 Move W9, [X8+224]
	069 Compare W9, 0
	070 JumpIfNotEqual {73}
	071 Move X0, X8
	072 Call 0x1C17DFC
	073 Move X0, X20
	074 Move X1, X23
	075 Call ChallengeResponse2.Compute_LM, X0, X1
	076 Move [X21], X0
	077 Move X0, X22
	078 Call Type2Message.get_Nonce, X0
	079 Move X1, X0
	080 Move X0, X20
	081 Move X8, 0xF26000
	082 Move X8, [X8+872]
	083 Move X0, [X8]
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 Move X0, X22
	089 Move X1, X24
	090 Move X2, X20
	091 Move X3, X23
	092 Call ChallengeResponse2.Compute_NTLMv2, X0, X1, X2, X3
	093 Move X0, X22
	094 Call Type2Message.get_Nonce, X0
	095 Move X8, 0xF26000
	096 Move X8, [X8+872]
	097 Move X22, X0
	098 Move X8, [X8]
	099 Move W9, [X8+224]
	100 Compare W9, 0
	101 JumpIfNotEqual {124}
	102 Move X0, X8
	103 Call 0x1C17DFC
	104 Move X0, X8
	105 Call 0x1C17DFC
	106 Move TEMP, X23
	107 And TEMP, TEMP, 0x80000
	108 Compare TEMP, 0x80000
	109 JumpIfEqual {124}
	110 Move X0, X20
	111 Move X1, X22
	112 Call ChallengeResponse2.Compute_NTLM, X0, X1
	113 Move [X19], X0
	114 Move X20, [X31+64]
	115 Move X19, [X31+72]
	116 Move X22, [X31+48]
	117 Move X21, [X31+56]
	118 Move X24, [X31+32]
	119 Move X23, [X31+40]
	120 Move X26, [X31+16]
	121 Move X25, [X31+24]
	122 Move X30, [X31+80]
	123 Return 
	124 Move X0, X20
	125 Move X1, X22
	126 Move X2, X21
	127 Move X3, X19
	128 Move X20, [X31+64]
	129 Move X19, [X31+72]
	130 Move X22, [X31+48]
	131 Move X21, [X31+56]
	132 Move X24, [X31+32]
	133 Move X23, [X31+40]
	134 Move X26, [X31+16]
	135 Move X25, [X31+24]
	136 Move X30, [X31+80]
	137 Call ChallengeResponse2.Compute_NTLMv2_Session, X0, X1, X2, X3
	138 Return 
	139 Call 0x1C17F20
	140 Move X0, 0xEF8000
	141 Move X0, [X0+1456]
	142 Call 0x1C17D08
	143 Call 0x1C17F10
	144 Move X1, X31
	145 Move X19, X0
	146 Call InvalidOperationException..ctor, X0
	147 Move X0, 0xF26000
	148 Move X0, [X0+888]
	149 Call 0x1C17D08
	150 Move X1, X0
	151 Move X0, X19
	152 Call 0x1C17DEC

Method: System.Byte[] GetResponse(System.Byte[] challenge, System.Byte[] pwd)

Disassembly:
	0x031FB810 LDR X8, [X8 + 0xB8]
	0x031FB814 STR X19, [X8 + 0x8]
	0x031FB818 LDP X20, X19, [X31 + 0x20]
	0x031FB81C LDP X30, X23, [X31], #0x30
	0x031FB820 RET
	0x031FB824 STR X30, [X31 - 0x20]!
	0x031FB828 STP X20, X19, [X31 + 0x10]
	0x031FB82C MOV W19, W1
	0x031FB830 MOV X1, X31
	0x031FB834 MOV X20, X0
	0x031FB838 BL 0x33BDD8C
	0x031FB83C STR W19, [X20 + 0x10]
	0x031FB840 LDP X20, X19, [X31 + 0x10]
	0x031FB844 LDR X30, [X31], #0x20
	0x031FB848 RET
	0x031FB84C LDR W0, [X0 + 0x14]
	0x031FB850 RET
	0x031FB854 STR W1, [X0 + 0x14]
	0x031FB858 RET
	0x031FB85C LDR W0, [X0 + 0x10]
	0x031FB860 RET
	0x031FB864 STP X30, X23, [X31 - 0x30]!
	0x031FB868 STP X22, X21, [X31 + 0x10]
	0x031FB86C STP X20, X19, [X31 + 0x20]
	0x031FB870 ADRP X22, 0x11E1000
	0x031FB874 ADRP X23, 0xEF8000
	0x031FB878 ADRP X21, 0xF26000
	0x031FB87C LDRB W8, [X22 + 0x1F1]
	0x031FB880 LDR X23, [X23 + 0x618]
	0x031FB884 LDR X21, [X21 + 0x380]
	0x031FB888 MOV W20, W1
	0x031FB88C MOV X19, X0
	0x031FB890 TBNZ X8, 0x0, 0x31FB8B4
	0x031FB894 ADRP X0, 0xEF8000
	0x031FB898 LDR X0, [X0 + 0x618]
	0x031FB89C BL 0x1C16CF4
	0x031FB8A0 ADRP X0, 0xF26000
	0x031FB8A4 LDR X0, [X0 + 0x380]
	0x031FB8A8 BL 0x1C16CF4
	0x031FB8AC MOVZ W8, 0x1
	0x031FB8B0 STRB W8, [X22 + 0x1F1]
	0x031FB8B4 LDR X0, [X23]
	0x031FB8B8 MOV W1, W20
	0x031FB8BC BL 0x1C16D6C
	0x031FB8C0 LDR X8, [X21]
	0x031FB8C4 MOV X20, X0
	0x031FB8C8 LDR W9, [X8 + 0xE0]
	0x031FB8CC CBNZ W9, 0x31FB8DC
	0x031FB8D0 MOV X0, X8
	0x031FB8D4 BL 0x1C16DFC
	0x031FB8D8 LDR X8, [X21]
	0x031FB8DC LDR X8, [X8 + 0xB8]
	0x031FB8E0 MOVZ W4, 0x8
	0x031FB8E4 MOV W1, W31
	0x031FB8E8 MOV X2, X20
	0x031FB8EC LDR X0, [X8]
	0x031FB8F0 MOV W3, W31
	0x031FB8F4 MOV X5, X31
	0x031FB8F8 BL 0x33A8A9C
	0x031FB8FC CBZ X20, 0x31FB960
	0x031FB900 LDR W8, [X20 + 0x18]
	0x031FB904 CMP W8, 0x8
	0x031FB908 B.LS 0x31FB95C
	0x031FB90C LDR W9, [X19 + 0x10]
	0x031FB910 CMP W8, 0x9
	0x031FB914 STRB W9, [X20 + 0x28]
	0x031FB918 B.EQ 0x31FB95C
	0x031FB91C LDR W9, [X19 + 0x10]
	0x031FB920 CMP W8, 0xA
	0x031FB924 UBFM W9, W9, 0x8, 0x1F
	0x031FB928 STRB W9, [X20 + 0x29]
	0x031FB92C B.LS 0x31FB95C
	0x031FB930 LDRH W9, [X19 + 0x12]
	0x031FB934 CMP W8, 0xB
	0x031FB938 STRB W9, [X20 + 0x2A]
	0x031FB93C B.EQ 0x31FB95C
	0x031FB940 LDRB W8, [X19 + 0x13]
	0x031FB944 MOV X0, X20
	0x031FB948 LDP X22, X21, [X31 + 0x10]
	0x031FB94C STRB W8, [X20 + 0x2B]
	0x031FB950 LDP X20, X19, [X31 + 0x20]
	0x031FB954 LDP X30, X23, [X31], #0x30
	0x031FB958 RET
	0x031FB95C BL 0x1C16F28
	0x031FB960 BL 0x1C16F20
	0x031FB964 SUB X31, X31, 0x30
	0x031FB968 STP X30, X21, [X31 + 0x10]
	0x031FB96C STP X20, X19, [X31 + 0x20]
	0x031FB970 CBZ X1, 0x31FB99C
	0x031FB974 LDR W8, [X1 + 0x18]
	0x031FB978 CMP W8, 0xB
	0x031FB97C B.LE 0x31FB9E4
	0x031FB980 MOV X19, X0
	0x031FB984 BL 0x31FBAFC
	0x031FB988 TBZ X0, 0x0, 0x31FBA70
	0x031FB98C LDP X20, X19, [X31 + 0x20]
	0x031FB990 LDP X30, X21, [X31 + 0x10]
	0x031FB994 ADD X31, X31, 0x30
	0x031FB998 RET
	0x031FB99C ADRP X0, 0xEFD000
	0x031FB9A0 LDR X0, [X0 + 0x528]
	0x031FB9A4 BL 0x1C16D08
	0x031FB9A8 BL 0x1C16F10
	0x031FB9AC MOV X19, X0
	0x031FB9B0 ADRP X0, 0xEFB000
	0x031FB9B4 LDR X0, [X0 + 0x220]
	0x031FB9B8 BL 0x1C16D08
	0x031FB9BC MOV X1, X0
	0x031FB9C0 MOV X0, X19
	0x031FB9C4 MOV X2, X31
	0x031FB9C8 BL 0x330E100
	0x031FB9CC ADRP X0, 0xF26000
	0x031FB9D0 LDR X0, [X0 + 0x388]
	0x031FB9D4 BL 0x1C16D08
	0x031FB9D8 MOV X1, X0
	0x031FB9DC MOV X0, X19
	0x031FB9E0 BL 0x1C16DEC
	0x031FB9E4 ADRP X0, 0xF26000
	0x031FB9E8 LDR X0, [X0 + 0x390]
	0x031FB9EC MOV X19, X1
	0x031FB9F0 BL 0x1C16D08
	0x031FB9F4 MOV X20, X0
	0x031FB9F8 MOV X0, X19
	0x031FB9FC BL 0x19903C0
	0x031FBA00 LDR X8, [X19 + 0x18]
	0x031FBA04 ADRP X0, 0xEF8000
	0x031FBA08 STR W8, [X31 + 0xC]
	0x031FBA0C LDR X0, [X0 + 0x758]
	0x031FBA10 BL 0x1C16D08
	0x031FBA14 ADD X1, X31, 0xC
	0x031FBA18 BL 0x1C16E04
	0x031FBA1C MOV X19, X0
	0x031FBA20 ADRP X0, 0xF00000
	0x031FBA24 LDR X0, [X0 + 0x760]
	0x031FBA28 BL 0x1C16D08
	0x031FBA2C BL 0x1C16F10
	0x031FBA30 MOV X21, X0
	0x031FBA34 ADRP X0, 0xEFB000
	0x031FBA38 LDR X0, [X0 + 0x220]
	0x031FBA3C BL 0x1C16D08
	0x031FBA40 MOV X1, X0
	0x031FBA44 MOV X0, X21
	0x031FBA48 MOV X2, X19
	0x031FBA4C MOV X3, X20
	0x031FBA50 MOV X4, X31
	0x031FBA54 BL 0x3312C8C
	0x031FBA58 ADRP X0, 0xF26000
	0x031FBA5C LDR X0, [X0 + 0x388]
	0x031FBA60 BL 0x1C16D08
	0x031FBA64 MOV X1, X0
	0x031FBA68 MOV X0, X21
	0x031FBA6C BL 0x1C16DEC
	0x031FBA70 ADRP X0, 0xF26000
	0x031FBA74 LDR X0, [X0 + 0x398]
	0x031FBA78 BL 0x1C16D08
	0x031FBA7C LDR W8, [X19 + 0x10]
	0x031FBA80 MOV X20, X0
	0x031FBA84 ADRP X0, 0xEF8000
	0x031FBA88 STR W8, [X31 + 0x8]
	0x031FBA8C LDR X0, [X0 + 0x758]
	0x031FBA90 BL 0x1C16D08
	0x031FBA94 ADD X1, X31, 0x8
	0x031FBA98 BL 0x1C16E04
	0x031FBA9C MOV X1, X0
	0x031FBAA0 MOV X0, X20
	0x031FBAA4 MOV X2, X31
	0x031FBAA8 BL 0x321EFD0
	0x031FBAAC MOV X19, X0
	0x031FBAB0 ADRP X0, 0xF00000
	0x031FBAB4 LDR X0, [X0 + 0x578]
	0x031FBAB8 BL 0x1C16D08
	0x031FBABC BL 0x1C16F10
	0x031FBAC0 MOV X20, X0
	0x031FBAC4 ADRP X0, 0xEFB000
	0x031FBAC8 LDR X0, [X0 + 0x220]
	0x031FBACC BL 0x1C16D08
	0x031FBAD0 MOV X2, X0
	0x031FBAD4 MOV X0, X20
	0x031FBAD8 MOV X1, X19
	0x031FBADC MOV X3, X31
	0x031FBAE0 BL 0x330E16C
	0x031FBAE4 ADRP X0, 0xF26000
	0x031FBAE8 LDR X0, [X0 + 0x388]
	0x031FBAEC BL 0x1C16D08
	0x031FBAF0 MOV X1, X0
	0x031FBAF4 MOV X0, X20
	0x031FBAF8 BL 0x1C16DEC
	0x031FBAFC STR X30, [X31 - 0x40]!
	0x031FBB00 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x11E2000
	009 Move X23, 0xEF9000
	010 Move X20, 0xF27000
	011 Move W8, [X22+493]
	012 Move X23, [X23+1560]
	013 Move X20, [X20+800]
	014 Move X21, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move X0, 0xEF9000
	021 Move X0, [X0+1560]
	022 Call 0x1C17CF4
	023 Move X0, 0xF27000
	024 Move X0, [X0+872]
	025 Call 0x1C17CF4
	026 Move X0, 0xF27000
	027 Move X0, [X0+800]
	028 Call 0x1C17CF4
	029 Move X0, 0xF26000
	030 Move X0, [X0+3744]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+493], W8
	034 Move X0, [X23]
	035 Move W1, 24
	036 Call 0x1C17D6C
	037 Move X8, [X20]
	038 Move X20, X0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X0, X31
	045 Call DES.Create
	046 Compare X0, 0
	047 JumpIfEqual {204}
	048 Move X8, [X0]
	049 Move X23, 0xF27000
	050 Move W1, 2
	051 Move X22, X0
	052 Move X9, [X8+584]
	053 Move X2, [X8+592]
	054 Move X23, [X23+872]
	055 NotImplemented "Instruction BLR not yet implemented."
	056 Move X0, [X23]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X0, X21
	062 Move W1, W31
	063 Call ChallengeResponse2.PrepareDESKey, X0, X1
	064 Move X8, [X22]
	065 Move X1, X0
	066 Move X0, X22
	067 Move X9, [X8+504]
	068 Move X2, [X8+512]
	069 NotImplemented "Instruction BLR not yet implemented."
	070 Move X8, [X22]
	071 Move X0, X22
	072 Move X9, [X8+632]
	073 Move X1, [X8+640]
	074 NotImplemented "Instruction BLR not yet implemented."
	075 Compare X0, 0
	076 JumpIfEqual {204}
	077 Move X24, 0xF26000
	078 Move X8, [X0]
	079 Move X24, [X24+3744]
	080 Move X23, X0
	081 NotImplemented "Instruction LDRH not yet implemented."
	082 Move X1, [X24]
	083 Compare X9, 0
	084 JumpIfEqual {91}
	085 Move X10, [X8+176]
	086 Add X10, X10, 8
	087 NotImplemented "Instruction LDUR not yet implemented."
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Subtract X9, X9, 1
	090 Add X10, X10, 16
	091 Move W2, 3
	092 Move X0, X23
	093 Call 0x1C5D788
	094 Move W9, [X10]
	095 Add W9, W9, 3
	096 Add X8, X8, W9
	097 Add X0, X8, 312
	098 Move X8, [X0]
	099 Move X6, [X0+8]
	100 Move W3, 8
	101 Move X0, X23
	102 Move X1, X19
	103 Move W2, W31
	104 Move X4, X20
	105 Move W5, W31
	106 NotImplemented "Instruction BLR not yet implemented."
	107 Move W1, 7
	108 Move X0, X21
	109 Call ChallengeResponse2.PrepareDESKey, X0, X1
	110 Move X8, [X22]
	111 Move X1, X0
	112 Move X0, X22
	113 Move X9, [X8+504]
	114 Move X2, [X8+512]
	115 NotImplemented "Instruction BLR not yet implemented."
	116 Move X8, [X22]
	117 Move X0, X22
	118 Move X9, [X8+632]
	119 Move X1, [X8+640]
	120 NotImplemented "Instruction BLR not yet implemented."
	121 Compare X0, 0
	122 JumpIfEqual {204}
	123 Move X8, [X0]
	124 Move X1, [X24]
	125 Move X23, X0
	126 NotImplemented "Instruction LDRH not yet implemented."
	127 Compare X9, 0
	128 JumpIfEqual {135}
	129 Move X10, [X8+176]
	130 Add X10, X10, 8
	131 NotImplemented "Instruction LDUR not yet implemented."
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Subtract X9, X9, 1
	134 Add X10, X10, 16
	135 Move W2, 3
	136 Move X0, X23
	137 Call 0x1C5D788
	138 Move W9, [X10]
	139 Add W9, W9, 3
	140 Add X8, X8, W9
	141 Add X0, X8, 312
	142 Move X8, [X0]
	143 Move X6, [X0+8]
	144 Move W3, 8
	145 Move W5, 8
	146 Move X0, X23
	147 Move X1, X19
	148 Move W2, W31
	149 Move X4, X20
	150 NotImplemented "Instruction BLR not yet implemented."
	151 Move W1, 14
	152 Move X0, X21
	153 Call ChallengeResponse2.PrepareDESKey, X0, X1
	154 Move X8, [X22]
	155 Move X1, X0
	156 Move X0, X22
	157 Move X9, [X8+504]
	158 Move X2, [X8+512]
	159 NotImplemented "Instruction BLR not yet implemented."
	160 Move X8, [X22]
	161 Move X0, X22
	162 Move X9, [X8+632]
	163 Move X1, [X8+640]
	164 NotImplemented "Instruction BLR not yet implemented."
	165 Compare X0, 0
	166 JumpIfEqual {204}
	167 Move X8, [X0]
	168 Move X1, [X24]
	169 Move X21, X0
	170 NotImplemented "Instruction LDRH not yet implemented."
	171 Compare X9, 0
	172 JumpIfEqual {179}
	173 Move X10, [X8+176]
	174 Add X10, X10, 8
	175 NotImplemented "Instruction LDUR not yet implemented."
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Subtract X9, X9, 1
	178 Add X10, X10, 16
	179 Move W2, 3
	180 Move X0, X21
	181 Call 0x1C5D788
	182 Move W9, [X10]
	183 Add W9, W9, 3
	184 Add X8, X8, W9
	185 Add X0, X8, 312
	186 Move X8, [X0]
	187 Move X6, [X0+8]
	188 Move W3, 8
	189 Move W5, 16
	190 Move X0, X21
	191 Move X1, X19
	192 Move W2, W31
	193 Move X4, X20
	194 NotImplemented "Instruction BLR not yet implemented."
	195 Move X0, X20
	196 Move X20, [X31+48]
	197 Move X19, [X31+56]
	198 Move X22, [X31+32]
	199 Move X21, [X31+40]
	200 Move X24, [X31+16]
	201 Move X23, [X31+24]
	202 Move X30, [X31+64]
	203 Return X0
	204 Call 0x1C17F20

Method: System.Byte[] PrepareDESKey(System.Byte[] key56bits, System.Int32 position)

Disassembly:
	0x031FC55C LDRB W8, [X20 + 0x17]
	0x031FC560 STRB W8, [X19 + 0x37]
	0x031FC564 LDR X0, [X20 + 0x18]
	0x031FC568 CBZ X0, 0x31FC598
	0x031FC56C LDR W4, [X0 + 0x18]
	0x031FC570 MOVZ W3, 0x18
	0x031FC574 MOV W1, W31
	0x031FC578 MOV X2, X19
	0x031FC57C MOV X5, X31
	0x031FC580 BL 0x33A8A9C
	0x031FC584 MOV X0, X19
	0x031FC588 LDP X20, X19, [X31 + 0x10]
	0x031FC58C LDR X30, [X31], #0x20
	0x031FC590 RET
	0x031FC594 BL 0x1C16F28
	0x031FC598 BL 0x1C16F20
	0x031FC59C STR X30, [X31 - 0x40]!
	0x031FC5A0 STP X24, X23, [X31 + 0x10]
	0x031FC5A4 STP X22, X21, [X31 + 0x20]
	0x031FC5A8 STP X20, X19, [X31 + 0x30]
	0x031FC5AC ADRP X21, 0x11E0000
	0x031FC5B0 ADRP X23, 0xF25000
	0x031FC5B4 LDRB W8, [X21 + 0x1FE]
	0x031FC5B8 LDR X23, [X23 + 0x380]
	0x031FC5BC MOV X20, X1
	0x031FC5C0 MOV X19, X0
	0x031FC5C4 TBNZ X8, 0x0, 0x31FC5F4
	0x031FC5C8 ADRP X0, 0xEF7000
	0x031FC5CC LDR X0, [X0 + 0x618]
	0x031FC5D0 BL 0x1C16CF4
	0x031FC5D4 ADRP X0, 0xF25000
	0x031FC5D8 LDR X0, [X0 + 0x380]
	0x031FC5DC BL 0x1C16CF4
	0x031FC5E0 ADRP X0, 0xF25000
	0x031FC5E4 LDR X0, [X0 + 0x3A8]
	0x031FC5E8 BL 0x1C16CF4
	0x031FC5EC MOVZ W8, 0x1
	0x031FC5F0 STRB W8, [X21 + 0x1FE]
	0x031FC5F4 LDR X0, [X23]
	0x031FC5F8 ADRP X21, 0xF25000
	0x031FC5FC LDR W8, [X0 + 0xE0]
	0x031FC600 LDR X21, [X21 + 0x3A8]
	0x031FC604 CBNZ W8, 0x31FC60C
	0x031FC608 BL 0x1C16DFC
	0x031FC60C MOV X0, X19
	0x031FC610 MOV X1, X31
	0x031FC614 BL 0x33BDD8C
	0x031FC618 MOVZ W8, 0x3
	0x031FC61C STR W8, [X19 + 0x10]
	0x031FC620 STR X20, [X19 + 0x48]
	0x031FC624 LDR X0, [X21]
	0x031FC628 LDR W8, [X0 + 0xE0]
	0x031FC62C CBNZ W8, 0x31FC634
	0x031FC630 BL 0x1C16DFC
	0x031FC634 ADRP X22, 0x11E0000
	0x031FC638 LDRB W8, [X22 + 0x207]
	0x031FC63C CBNZ W8, 0x31FC654
	0x031FC640 ADRP X0, 0xF25000
	0x031FC644 LDR X0, [X0 + 0x3A8]
	0x031FC648 BL 0x1C16CF4
	0x031FC64C MOVZ W8, 0x1
	0x031FC650 STRB W8, [X22 + 0x207]
	0x031FC654 LDR X0, [X21]
	0x031FC658 LDR W8, [X0 + 0xE0]
	0x031FC65C CBNZ W8, 0x31FC668
	0x031FC660 BL 0x1C16DFC
	0x031FC664 LDR X0, [X21]
	0x031FC668 LDR X8, [X0 + 0xB8]
	0x031FC66C LDR W8, [X8]
	0x031FC670 STR W8, [X19 + 0x18]
	0x031FC674 CBZ X20, 0x31FC784
	0x031FC678 MOV X0, X20
	0x031FC67C BL 0x31FB2EC
	0x031FC680 CBZ X0, 0x31FC784
	0x031FC684 MOV X1, X31
	0x031FC688 BL 0x33A01F0
	0x031FC68C CBZ X0, 0x31FC6D0
	0x031FC690 ADRP X24, 0xEF7000
	0x031FC694 LDR X24, [X24 + 0x618]
	0x031FC698 MOV X21, X0
	0x031FC69C LDR X22, [X24]
	0x031FC6A0 MOV X1, X22
	0x031FC6A4 BL 0x1C16E00
	0x031FC6A8 CBZ X0, 0x31FC6C4
	0x031FC6AC STR X0, [X19 + 0x20]
	0x031FC6B0 LDR X22, [X24]
	0x031FC6B4 MOV X0, X21
	0x031FC6B8 MOV X1, X22
	0x031FC6BC BL 0x1C16E00
	0x031FC6C0 CBNZ X0, 0x31FC6D4
	0x031FC6C4 MOV X0, X21
	0x031FC6C8 MOV X1, X22
	0x031FC6CC BL 0x1C171E0
	0x031FC6D0 STR X31, [X19 + 0x20]
	0x031FC6D4 LDR X8, [X20 + 0x20]
	0x031FC6D8 MOV X0, X31
	0x031FC6DC STR X8, [X19 + 0x30]
	0x031FC6E0 BL 0x33C1540
	0x031FC6E4 STR X0, [X19 + 0x28]
	0x031FC6E8 MOV X0, X31
	0x031FC6EC BL 0x33C18FC
	0x031FC6F0 MOVZ W8, 0x8200
	0x031FC6F4 STR X0, [X19 + 0x38]
	0x031FC6F8 STR W8, [X19 + 0x14]
	0x031FC6FC LDR X0, [X23]
	0x031FC700 LDR W21, [X20 + 0x14]
	0x031FC704 LDR W8, [X0 + 0xE0]
	0x031FC708 CBZ W8, 0x31FC720
	0x031FC70C ANDS W31, W21, 0x1
	0x031FC710 MOVZ W8, 0x8201
	0x031FC714 CINC W8, W8, EQ
	0x031FC718 STR W8, [X19 + 0x14]
	0x031FC71C B 0x31FC74C
	0x031FC720 BL 0x1C16DFC
	0x031FC724 LDR X0, [X23]
	0x031FC728 LDR W8, [X19 + 0x14]
	0x031FC72C ANDS W31, W21, 0x1
	0x031FC730 MOVZ W10, 0x1
	0x031FC734 LDR W9, [X0 + 0xE0]
	0x031FC738 CINC W10, W10, EQ
	0x031FC73C ORR W8, W8, W10, 0x0
	0x031FC740 STR W8, [X19 + 0x14]
	0x031FC744 CBNZ W9, 0x31FC74C
	0x031FC748 BL 0x1C16DFC
	0x031FC74C LDRB W8, [X20 + 0x16]
	0x031FC750 TBZ X8, 0x3, 0x31FC770

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11E1000
	007 Move X22, 0xEF8000
	008 Move W8, [X21+494]
	009 Move X22, [X22+1560]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEF8000
	017 Move X0, [X0+1560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+494], W8
	021 Move X0, [X22]
	022 Move W1, 8
	023 Call 0x1C17D6C
	024 Compare X19, 0
	025 JumpIfEqual {136}
	026 Move W8, [X19+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Add X9, X19, W20
	029 Add X9, X9, 32
	030 Move W10, [X9]
	031 Compare X0, 0
	032 JumpIfEqual {136}
	033 Move W8, [X0+24]
	034 Compare W8, 0
	035 JumpIfEqual {135}
	036 Move [X0+32], W10
	037 Move W10, [X19+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Add W11, W20, 1
	040 NotImplemented "Instruction CMP not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Add X10, X19, W11
	043 Add X10, X10, 32
	044 Move W12, [X10]
	045 Move W9, [X9]
	046 Move W12, W12
	047 ShiftRight W12, 8
	048 And W12, W12, 127
	049 NotImplemented "Instruction EXTR not yet implemented."
	050 Move [X0+33], W9
	051 Move W9, [X19+24]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Add W11, W20, 2
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Add X9, X19, W11
	057 Add X9, X9, 32
	058 Move W12, [X9]
	059 Move W10, [X10]
	060 Move W12, W12
	061 ShiftRight W12, 8
	062 And W12, W12, 127
	063 NotImplemented "Instruction EXTR not yet implemented."
	064 Move [X0+34], W10
	065 Move W10, [X19+24]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add W11, W20, 3
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Add X10, X19, W11
	071 Add X10, X10, 32
	072 Move W12, [X10]
	073 Move W9, [X9]
	074 Move W12, W12
	075 ShiftRight W12, 8
	076 And W12, W12, 127
	077 NotImplemented "Instruction EXTR not yet implemented."
	078 Move [X0+35], W9
	079 Move W9, [X19+24]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Add W11, W20, 4
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Add X9, X19, W11
	085 Add X9, X9, 32
	086 Move W12, [X9]
	087 Move W10, [X10]
	088 Move W12, W12
	089 ShiftRight W12, 8
	090 And W12, W12, 127
	091 NotImplemented "Instruction EXTR not yet implemented."
	092 Move [X0+36], W10
	093 Move W10, [X19+24]
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Add W11, W20, 5
	096 NotImplemented "Instruction CMP not yet implemented."
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Add X10, X19, W11
	099 Add X10, X10, 32
	100 Move W12, [X10]
	101 Move W9, [X9]
	102 Move W12, W12
	103 ShiftRight W12, 8
	104 And W12, W12, 127
	105 NotImplemented "Instruction EXTR not yet implemented."
	106 Move [X0+37], W9
	107 Move W12, [X19+24]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Add W9, W20, 6
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Add X11, X19, W9
	113 Add X11, X11, 32
	114 Move W12, [X11]
	115 Move W10, [X10]
	116 Move W12, W12
	117 ShiftRight W12, 8
	118 And W12, W12, 127
	119 NotImplemented "Instruction EXTR not yet implemented."
	120 Move [X0+38], W10
	121 Move W10, [X19+24]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move W8, [X11]
	125 Move X20, [X31+32]
	126 Move X19, [X31+40]
	127 Move X22, [X31+16]
	128 Move X21, [X31+24]
	129 Move W8, W8
	130 ShiftRight W8, 31
	131 And W8, W8, 0x3FFFFFFF
	132 Move [X0+39], W8
	133 Move X30, [X31+48]
	134 Return X0
	135 Call 0x1C17F28
	136 Call 0x1C17F20

Method: System.Byte[] PasswordToKey(System.String password, System.Int32 position)

Disassembly:
	0x031FB6A8 STRB W10, [X0 + 0x24]
	0x031FB6AC LDR W10, [X19 + 0x18]
	0x031FB6B0 CMP W11, W10
	0x031FB6B4 B.CS 0x31FB74C
	0x031FB6B8 ADD W11, W20, 0x5
	0x031FB6BC CMP W11, W10
	0x031FB6C0 B.CS 0x31FB74C
	0x031FB6C4 CMP W8, 0x5
	0x031FB6C8 B.LS 0x31FB74C
	0x031FB6CC ADD X10, X19, W11, SXTW
	0x031FB6D0 LDRB W12, [X10 + 0x20]!
	0x031FB6D4 LDRB W9, [X9]
	0x031FB6D8 UBFM W12, W12, 0x8, 0x7
	0x031FB6DC EXTR W9, W9, W12, 0x1D
	0x031FB6E0 STRB W9, [X0 + 0x25]
	0x031FB6E4 LDR W12, [X19 + 0x18]
	0x031FB6E8 CMP W11, W12
	0x031FB6EC B.CS 0x31FB74C
	0x031FB6F0 ADD W9, W20, 0x6
	0x031FB6F4 CMP W9, W12
	0x031FB6F8 B.CS 0x31FB74C
	0x031FB6FC CMP W8, 0x6
	0x031FB700 B.LS 0x31FB74C
	0x031FB704 ADD X11, X19, W9, SXTW
	0x031FB708 LDRB W12, [X11 + 0x20]!
	0x031FB70C LDRB W10, [X10]
	0x031FB710 UBFM W12, W12, 0x8, 0x7
	0x031FB714 EXTR W10, W10, W12, 0x1E
	0x031FB718 STRB W10, [X0 + 0x26]
	0x031FB71C LDR W10, [X19 + 0x18]
	0x031FB720 CMP W9, W10
	0x031FB724 B.CS 0x31FB74C
	0x031FB728 CMP W8, 0x7
	0x031FB72C B.LS 0x31FB74C
	0x031FB730 LDRB W8, [X11]
	0x031FB734 LDP X20, X19, [X31 + 0x20]
	0x031FB738 LDP X22, X21, [X31 + 0x10]
	0x031FB73C UBFM W8, W8, 0x1F, 0x1E
	0x031FB740 STRB W8, [X0 + 0x27]
	0x031FB744 LDR X30, [X31], #0x30
	0x031FB748 RET
	0x031FB74C BL 0x1C16F28
	0x031FB750 BL 0x1C16F20
	0x031FB754 STP X30, X23, [X31 - 0x30]!
	0x031FB758 STP X22, X21, [X31 + 0x10]
	0x031FB75C STP X20, X19, [X31 + 0x20]
	0x031FB760 ADRP X23, 0x11E1000
	0x031FB764 ADRP X22, 0xEF8000
	0x031FB768 ADRP X19, 0xF26000
	0x031FB76C ADRP X20, 0xF26000
	0x031FB770 ADRP X21, 0xF26000
	0x031FB774 LDRB W8, [X23 + 0x1F0]
	0x031FB778 LDR X22, [X22 + 0x618]
	0x031FB77C LDR X19, [X19 + 0x358]
	0x031FB780 LDR X20, [X20 + 0x368]
	0x031FB784 LDR X21, [X21 + 0x360]
	0x031FB788 TBNZ X8, 0x0, 0x31FB7C4
	0x031FB78C ADRP X0, 0xEF8000
	0x031FB790 LDR X0, [X0 + 0x618]
	0x031FB794 BL 0x1C16CF4
	0x031FB798 ADRP X0, 0xF26000
	0x031FB79C LDR X0, [X0 + 0x368]
	0x031FB7A0 BL 0x1C16CF4
	0x031FB7A4 ADRP X0, 0xF26000
	0x031FB7A8 LDR X0, [X0 + 0x358]
	0x031FB7AC BL 0x1C16CF4
	0x031FB7B0 ADRP X0, 0xF26000
	0x031FB7B4 LDR X0, [X0 + 0x360]
	0x031FB7B8 BL 0x1C16CF4
	0x031FB7BC MOVZ W8, 0x1
	0x031FB7C0 STRB W8, [X23 + 0x1F0]
	0x031FB7C4 LDR X0, [X22]
	0x031FB7C8 MOVZ W1, 0x8
	0x031FB7CC BL 0x1C16D6C
	0x031FB7D0 LDR X1, [X19]
	0x031FB7D4 MOV X2, X31
	0x031FB7D8 MOV X19, X0
	0x031FB7DC BL 0x32C5BD8
	0x031FB7E0 LDR X8, [X20]
	0x031FB7E4 MOVZ W1, 0x8
	0x031FB7E8 LDR X8, [X8 + 0xB8]
	0x031FB7EC STR X19, [X8]
	0x031FB7F0 LDR X0, [X22]
	0x031FB7F4 BL 0x1C16D6C
	0x031FB7F8 LDR X1, [X21]
	0x031FB7FC MOV X2, X31
	0x031FB800 MOV X19, X0
	0x031FB804 BL 0x32C5BD8
	0x031FB808 LDR X8, [X20]
	0x031FB80C LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x11E2000
	008 Move X22, 0xEF9000
	009 Move W8, [X20+495]
	010 Move X22, [X22+1560]
	011 Move W19, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xEF9000
	018 Move X0, [X0+1560]
	019 Call 0x1C17CF4
	020 Move X0, 0xF27000
	021 Move X0, [X0+872]
	022 Call 0x1C17CF4
	023 Move X0, 0xEFB000
	024 Move X0, [X0+3144]
	025 Call 0x1C17CF4
	026 Move X0, 0xEF9000
	027 Move X0, [X0+1448]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+495], W8
	031 Move X0, [X22]
	032 Move W1, 7
	033 Call 0x1C17D6C
	034 Compare X21, 0
	035 JumpIfEqual {105}
	036 Move X8, 0xEF9000
	037 Move X8, [X8+1448]
	038 Move X20, X0
	039 Move X23, 0xEFB000
	040 Move W22, [X21+16]
	041 Move X0, [X8]
	042 Move W8, [X0+224]
	043 Move X23, [X23+3144]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Subtract W0, W22, W19
	048 Move W1, 7
	049 Move X2, X31
	050 Call Math.Min, X0, X1
	051 Move W22, W0
	052 Move X0, X31
	053 Call Encoding.get_ASCII
	054 Move X8, [X23]
	055 Move X23, X0
	056 Move W9, [X8+224]
	057 Compare W9, 0
	058 JumpIfNotEqual {61}
	059 Move X0, X8
	060 Call 0x1C17DFC
	061 Move X0, X31
	062 Call CultureInfo.get_CurrentCulture
	063 Move X1, X0
	064 Move X0, X21
	065 Move X2, X31
	066 Call String.ToUpper, X0, X1
	067 Compare X23, 0
	068 JumpIfEqual {105}
	069 Move X8, [X23]
	070 Move X21, 0xF27000
	071 Move X1, X0
	072 Move X0, X23
	073 Move X9, [X8+632]
	074 Move X6, [X8+640]
	075 Move X21, [X21+872]
	076 Move W2, W19
	077 Move W3, W22
	078 Move X4, X20
	079 Move W5, W31
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move X0, [X21]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {86}
	085 Call 0x1C17DFC
	086 Move X0, X20
	087 Move W1, W31
	088 Call ChallengeResponse2.PrepareDESKey, X0, X1
	089 Compare X20, 0
	090 JumpIfEqual {105}
	091 Move W2, [X20+24]
	092 Move X19, X0
	093 Move X0, X20
	094 Move W1, W31
	095 Move X3, X31
	096 Call Array.Clear, X0, X1, X2
	097 Move X0, X19
	098 Move X20, [X31+32]
	099 Move X19, [X31+40]
	100 Move X22, [X31+16]
	101 Move X21, [X31+24]
	102 Move X30, [X31+48]
	103 Move X23, [X31+56]
	104 Return X0
	105 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x031FC754 LDR X0, [X23]
	0x031FC758 LDR W8, [X0 + 0xE0]
	0x031FC75C CBNZ W8, 0x31FC764
	0x031FC760 BL 0x1C16DFC
	0x031FC764 LDR W8, [X19 + 0x14]
	0x031FC768 ORR W8, W8, 0x80000
	0x031FC76C STR W8, [X19 + 0x14]
	0x031FC770 LDP X20, X19, [X31 + 0x30]
	0x031FC774 LDP X22, X21, [X31 + 0x20]
	0x031FC778 LDP X24, X23, [X31 + 0x10]
	0x031FC77C LDR X30, [X31], #0x40
	0x031FC780 RET
	0x031FC784 BL 0x1C16F20
	0x031FC788 STP X30, X21, [X31 - 0x20]!
	0x031FC78C STP X20, X19, [X31 + 0x10]
	0x031FC790 MOV X19, X0
	0x031FC794 LDR X0, [X0 + 0x20]
	0x031FC798 CBZ X0, 0x31FC7AC
	0x031FC79C LDR W2, [X0 + 0x18]
	0x031FC7A0 MOV W1, W31
	0x031FC7A4 MOV X3, X31
	0x031FC7A8 BL 0x339FA34
	0x031FC7AC LDR X0, [X19 + 0x50]
	0x031FC7B0 CBZ X0, 0x31FC7C4
	0x031FC7B4 LDR W2, [X0 + 0x18]
	0x031FC7B8 MOV W1, W31
	0x031FC7BC MOV X3, X31
	0x031FC7C0 BL 0x339FA34
	0x031FC7C4 LDR X0, [X19 + 0x58]
	0x031FC7C8 CBZ X0, 0x31FC7DC
	0x031FC7CC LDR W2, [X0 + 0x18]
	0x031FC7D0 MOV W1, W31
	0x031FC7D4 MOV X3, X31
	0x031FC7D8 BL 0x339FA34
	0x031FC7DC MOV X0, X19
	0x031FC7E0 LDP X20, X19, [X31 + 0x10]
	0x031FC7E4 MOV X1, X31
	0x031FC7E8 LDP X30, X21, [X31], #0x20
	0x031FC7EC B 0x33CB4DC
	0x031FC7F0 B 0x31FC7F8
	0x031FC7F4 B 0x31FC7F8
	0x031FC7F8 MOV X20, X0
	0x031FC7FC CMP W1, 0x1
	0x031FC800 B.NE 0x31FC830
	0x031FC804 MOV X0, X20
	0x031FC808 BL 0x3EB1AD0
	0x031FC80C LDR X21, [X0]
	0x031FC810 BL 0x3EB1AE0
	0x031FC814 MOV X0, X19
	0x031FC818 MOV X1, X31
	0x031FC81C BL 0x33CB4DC
	0x031FC820 CBNZ X21, 0x31FC838

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x11E1000
	008 Move X22, 0xEF8000
	009 Move X19, 0xF26000
	010 Move X20, 0xF26000
	011 Move X21, 0xF26000
	012 Move W8, [X23+496]
	013 Move X22, [X22+1560]
	014 Move X19, [X19+856]
	015 Move X20, [X20+872]
	016 Move X21, [X21+864]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0xEF8000
	022 Move X0, [X0+1560]
	023 Call 0x1C17CF4
	024 Move X0, 0xF26000
	025 Move X0, [X0+872]
	026 Call 0x1C17CF4
	027 Move X0, 0xF26000
	028 Move X0, [X0+856]
	029 Call 0x1C17CF4
	030 Move X0, 0xF26000
	031 Move X0, [X0+864]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X23+496], W8
	035 Move X0, [X22]
	036 Move W1, 8
	037 Call 0x1C17D6C
	038 Move X1, [X19]
	039 Move X2, X31
	040 Move X19, X0
	041 Call RuntimeHelpers.InitializeArray, X0, X1
	042 Move X8, [X20]
	043 Move W1, 8
	044 Move X8, [X8+184]
	045 Move [X8], X19
	046 Move X0, [X22]
	047 Call 0x1C17D6C
	048 Move X1, [X21]
	049 Move X2, X31
	050 Move X19, X0
	051 Call RuntimeHelpers.InitializeArray, X0, X1
	052 Move X8, [X20]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X8, [X8+184]
	056 Move [X8+8], X19
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return 

