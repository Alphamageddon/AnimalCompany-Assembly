Type: Mono.Security.Protocol.Ntlm.MessageBase

Method: System.Void .ctor(System.Int32 messageType)

Disassembly:
	0x031FC824 LDP X20, X19, [X31 + 0x10]
	0x031FC828 LDP X30, X21, [X31], #0x20
	0x031FC82C RET
	0x031FC830 MOV X21, X31
	0x031FC834 B 0x31FC844
	0x031FC838 MOV X0, X21
	0x031FC83C BL 0x1C16F18
	0x031FC840 MOV X20, X0
	0x031FC844 MOV X0, X19
	0x031FC848 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: Mono.Security.Protocol.Ntlm.NtlmFlags get_Flags()

Disassembly:
	0x031FC84C BL 0x33CB4DC
	0x031FC850 CBNZ X21, 0x31FC85C

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Void set_Flags(Mono.Security.Protocol.Ntlm.NtlmFlags value)

Disassembly:
	0x031FC854 MOV X0, X20
	0x031FC858 BL 0x1D2C690

ISIL:
	001 Move [X0+20], W1
	002 Return 

Method: System.Int32 get_Type()

Disassembly:
	0x031FC85C MOV X0, X21
	0x031FC860 BL 0x1C16F18

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Byte[] PrepareMessage(System.Int32 messageSize)

Disassembly:
	0x031FC864 BL 0x1990590
	0x031FC868 STR X30, [X31 - 0x30]!
	0x031FC86C STP X22, X21, [X31 + 0x10]
	0x031FC870 STP X20, X19, [X31 + 0x20]
	0x031FC874 ADRP X21, 0x11E0000
	0x031FC878 ADRP X22, 0xEF7000
	0x031FC87C LDRB W8, [X21 + 0x1FF]
	0x031FC880 LDR X22, [X22 + 0x988]
	0x031FC884 MOV X20, X1
	0x031FC888 MOV X19, X0
	0x031FC88C TBNZ X8, 0x0, 0x31FC8A4
	0x031FC890 ADRP X0, 0xEF7000
	0x031FC894 LDR X0, [X0 + 0x988]
	0x031FC898 BL 0x1C16CF4
	0x031FC89C MOVZ W8, 0x1
	0x031FC8A0 STRB W8, [X21 + 0x1FF]
	0x031FC8A4 LDR X1, [X22]
	0x031FC8A8 CMP X20, 0x0
	0x031FC8AC MOV X2, X31
	0x031FC8B0 CSEL X20, X1, X20, EQ
	0x031FC8B4 MOV X0, X20
	0x031FC8B8 BL 0x321BA08
	0x031FC8BC LDR W8, [X19 + 0x14]
	0x031FC8C0 ANDS W31, W0, 0x1
	0x031FC8C4 MOVZ W9, 0x1000
	0x031FC8C8 CSEL W9, W31, W9, NE
	0x031FC8CC AND W8, W8, 0xFFFFEFFF
	0x031FC8D0 ORR W8, W8, W9, 0x0
	0x031FC8D4 STR W8, [X19 + 0x14]
	0x031FC8D8 STR X20, [X19 + 0x30]
	0x031FC8DC LDP X20, X19, [X31 + 0x20]
	0x031FC8E0 LDP X22, X21, [X31 + 0x10]
	0x031FC8E4 LDR X30, [X31], #0x30
	0x031FC8E8 RET
	0x031FC8EC STR X1, [X0 + 0x40]
	0x031FC8F0 RET
	0x031FC8F4 STR X1, [X0 + 0x38]
	0x031FC8F8 RET
	0x031FC8FC SUB X31, X31, 0x40
	0x031FC900 STP X30, X23, [X31 + 0x10]
	0x031FC904 STP X22, X21, [X31 + 0x20]
	0x031FC908 STP X20, X19, [X31 + 0x30]
	0x031FC90C ADRP X21, 0x11E0000
	0x031FC910 LDRB W8, [X21 + 0x200]
	0x031FC914 MOV X20, X1
	0x031FC918 MOV X19, X0
	0x031FC91C TBNZ X8, 0x0, 0x31FC934
	0x031FC920 ADRP X0, 0xEF7000
	0x031FC924 LDR X0, [X0 + 0x618]
	0x031FC928 BL 0x1C16CF4
	0x031FC92C MOVZ W8, 0x1
	0x031FC930 STRB W8, [X21 + 0x200]
	0x031FC934 MOV X0, X19
	0x031FC938 MOV X1, X20
	0x031FC93C BL 0x31FB964
	0x031FC940 STR X31, [X19 + 0x40]
	0x031FC944 CBZ X20, 0x31FCB18
	0x031FC948 LDR W8, [X20 + 0x18]
	0x031FC94C ADRP X23, 0xEF7000
	0x031FC950 LDR X23, [X23 + 0x618]
	0x031FC954 CMP W8, 0x40
	0x031FC958 B.GE 0x31FC964
	0x031FC95C MOVZ W8, 0x8201
	0x031FC960 B 0x31FC97C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x11E1000
	008 Move X23, 0xEF8000
	009 Move X21, 0xF26000
	010 Move W8, [X22+497]
	011 Move X23, [X23+1560]
	012 Move X21, [X21+896]
	013 Move W20, W1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xEF8000
	020 Move X0, [X0+1560]
	021 Call 0x1C17CF4
	022 Move X0, 0xF26000
	023 Move X0, [X0+896]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+497], W8
	027 Move X0, [X23]
	028 Move W1, W20
	029 Call 0x1C17D6C
	030 Move X8, [X21]
	031 Move X20, X0
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {38}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Move X8, [X21]
	038 Move X8, [X8+184]
	039 Move W4, 8
	040 Move W1, W31
	041 Move X2, X20
	042 Move X0, [X8]
	043 Move W3, W31
	044 Move X5, X31
	045 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	046 Compare X20, 0
	047 JumpIfEqual {73}
	048 Move W8, [X20+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W9, [X19+16]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move [X20+40], W9
	053 Move W9, [X19+16]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W9, W9
	056 ShiftRight W9, 8
	057 And W9, W9, 0x7FFFFFFF
	058 Move [X20+41], W9
	059 NotImplemented "Instruction LDRH not yet implemented."
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move [X20+42], W9
	062 Move W8, [X19+19]
	063 Move X0, X20
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move [X20+43], W8
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X30, [X31+48]
	070 Move X23, [X31+56]
	071 Return X0
	072 Call 0x1C17F28
	073 Call 0x1C17F20

Method: System.Void Decode(System.Byte[] message)

Disassembly:
	0x031FC964 ADD X0, X31, 0xC
	0x031FC968 MOVZ W2, 0x3C
	0x031FC96C MOV X1, X20
	0x031FC970 STR W31, [X31 + 0xC]
	0x031FC974 BL 0x31E9A68
	0x031FC978 LDR W8, [X31 + 0xC]
	0x031FC97C ADD X0, X31, 0xC
	0x031FC980 MOVZ W2, 0xC
	0x031FC984 MOV X1, X20
	0x031FC988 STR W8, [X19 + 0x14]
	0x031FC98C STRH W31, [X31 + 0xC]
	0x031FC990 BL 0x31E9A1C
	0x031FC994 LDRH W21, [X31 + 0xC]
	0x031FC998 ADD X0, X31, 0xC
	0x031FC99C MOVZ W2, 0x10
	0x031FC9A0 MOV X1, X20
	0x031FC9A4 STRH W31, [X31 + 0xC]
	0x031FC9A8 BL 0x31E9A1C
	0x031FC9AC LDR X0, [X23]
	0x031FC9B0 LDRH W22, [X31 + 0xC]
	0x031FC9B4 MOV W1, W21
	0x031FC9B8 BL 0x1C16D6C
	0x031FC9BC MOV X2, X0
	0x031FC9C0 STR X0, [X19 + 0x50]
	0x031FC9C4 MOV X0, X20
	0x031FC9C8 MOV W1, W22
	0x031FC9CC MOV W3, W31
	0x031FC9D0 MOV W4, W21
	0x031FC9D4 MOV X5, X31
	0x031FC9D8 BL 0x33A8A9C
	0x031FC9DC ADD X0, X31, 0xC
	0x031FC9E0 MOVZ W2, 0x14
	0x031FC9E4 MOV X1, X20
	0x031FC9E8 STRH W31, [X31 + 0xC]
	0x031FC9EC BL 0x31E9A1C
	0x031FC9F0 LDRH W21, [X31 + 0xC]
	0x031FC9F4 ADD X0, X31, 0xC
	0x031FC9F8 MOVZ W2, 0x18
	0x031FC9FC MOV X1, X20
	0x031FCA00 STRH W31, [X31 + 0xC]
	0x031FCA04 BL 0x31E9A1C
	0x031FCA08 LDR X0, [X23]
	0x031FCA0C LDRH W22, [X31 + 0xC]
	0x031FCA10 MOV W1, W21
	0x031FCA14 BL 0x1C16D6C
	0x031FCA18 MOV X2, X0
	0x031FCA1C STR X0, [X19 + 0x58]
	0x031FCA20 MOV X0, X20
	0x031FCA24 MOV W1, W22
	0x031FCA28 MOV W3, W31
	0x031FCA2C MOV W4, W21
	0x031FCA30 MOV X5, X31
	0x031FCA34 BL 0x33A8A9C
	0x031FCA38 ADD X0, X31, 0xC
	0x031FCA3C MOVZ W2, 0x1C
	0x031FCA40 MOV X1, X20
	0x031FCA44 STRH W31, [X31 + 0xC]
	0x031FCA48 BL 0x31E9A1C
	0x031FCA4C LDRH W21, [X31 + 0xC]
	0x031FCA50 ADD X0, X31, 0xC
	0x031FCA54 MOVZ W2, 0x20
	0x031FCA58 MOV X1, X20
	0x031FCA5C STRH W31, [X31 + 0xC]
	0x031FCA60 BL 0x31E9A1C
	0x031FCA64 LDRH W2, [X31 + 0xC]
	0x031FCA68 MOV X0, X19
	0x031FCA6C MOV X1, X20
	0x031FCA70 MOV W3, W21
	0x031FCA74 BL 0x31FCB1C
	0x031FCA78 STR X0, [X19 + 0x30]
	0x031FCA7C ADD X0, X31, 0xC
	0x031FCA80 MOVZ W2, 0x24
	0x031FCA84 MOV X1, X20
	0x031FCA88 STRH W31, [X31 + 0xC]
	0x031FCA8C BL 0x31E9A1C
	0x031FCA90 LDRH W21, [X31 + 0xC]
	0x031FCA94 ADD X0, X31, 0xC
	0x031FCA98 MOVZ W2, 0x28
	0x031FCA9C MOV X1, X20
	0x031FCAA0 STRH W31, [X31 + 0xC]
	0x031FCAA4 BL 0x31E9A1C
	0x031FCAA8 LDRH W2, [X31 + 0xC]
	0x031FCAAC MOV X0, X19
	0x031FCAB0 MOV X1, X20
	0x031FCAB4 MOV W3, W21
	0x031FCAB8 BL 0x31FCB1C
	0x031FCABC STR X0, [X19 + 0x38]
	0x031FCAC0 ADD X0, X31, 0xC
	0x031FCAC4 MOVZ W2, 0x2C
	0x031FCAC8 MOV X1, X20
	0x031FCACC STRH W31, [X31 + 0xC]
	0x031FCAD0 BL 0x31E9A1C
	0x031FCAD4 LDRH W21, [X31 + 0xC]
	0x031FCAD8 ADD X0, X31, 0xC
	0x031FCADC MOVZ W2, 0x30
	0x031FCAE0 MOV X1, X20
	0x031FCAE4 STRH W31, [X31 + 0xC]
	0x031FCAE8 BL 0x31E9A1C
	0x031FCAEC LDRH W2, [X31 + 0xC]
	0x031FCAF0 MOV X0, X19
	0x031FCAF4 MOV X1, X20
	0x031FCAF8 MOV W3, W21

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X1, 0
	007 JumpIfEqual {22}
	008 Move W8, [X1+24]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X19, X0
	011 Call MessageBase.CheckHeader, X0, X1
	012 Move TEMP, X0
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfNotEqual {75}
	016 Move X20, [X31+32]
	017 Move X19, [X31+40]
	018 Move X30, [X31+16]
	019 Move X21, [X31+24]
	020 Add X31, X31, 48
	021 Return 
	022 Move X0, 0xEFD000
	023 Move X0, [X0+1320]
	024 Call 0x1C17D08
	025 Call 0x1C17F10
	026 Move X19, X0
	027 Move X0, 0xEFB000
	028 Move X0, [X0+544]
	029 Call 0x1C17D08
	030 Move X1, X0
	031 Move X0, X19
	032 Move X2, X31
	033 Call ArgumentNullException..ctor, X0, X1
	034 Move X0, 0xF26000
	035 Move X0, [X0+904]
	036 Call 0x1C17D08
	037 Move X1, X0
	038 Move X0, X19
	039 Call 0x1C17DEC
	040 Move X0, 0xF26000
	041 Move X0, [X0+912]
	042 Move X19, X1
	043 Call 0x1C17D08
	044 Move X20, X0
	045 Move X0, X19
	046 Call 0x19913C0
	047 Move X8, [X19+24]
	048 Move X0, 0xEF8000
	049 Move [X31+12], W8
	050 Move X0, [X0+1880]
	051 Call 0x1C17D08
	052 Add X1, X31, 12
	053 Call 0x1C17E04
	054 Move X19, X0
	055 Move X0, 0xF00000
	056 Move X0, [X0+1888]
	057 Call 0x1C17D08
	058 Call 0x1C17F10
	059 Move X21, X0
	060 Move X0, 0xEFB000
	061 Move X0, [X0+544]
	062 Call 0x1C17D08
	063 Move X1, X0
	064 Move X0, X21
	065 Move X2, X19
	066 Move X3, X20
	067 Move X4, X31
	068 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	069 Move X0, 0xF26000
	070 Move X0, [X0+904]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X21
	074 Call 0x1C17DEC
	075 Move X0, 0xF26000
	076 Move X0, [X0+920]
	077 Call 0x1C17D08
	078 Move W8, [X19+16]
	079 Move X20, X0
	080 Move X0, 0xEF8000
	081 Move [X31+8], W8
	082 Move X0, [X0+1880]
	083 Call 0x1C17D08
	084 Add X1, X31, 8
	085 Call 0x1C17E04
	086 Move X1, X0
	087 Move X0, X20
	088 Move X2, X31
	089 Call String.Format, X0, X1
	090 Move X19, X0
	091 Move X0, 0xF00000
	092 Move X0, [X0+1400]
	093 Call 0x1C17D08
	094 Call 0x1C17F10
	095 Move X20, X0
	096 Move X0, 0xEFB000
	097 Move X0, [X0+544]
	098 Call 0x1C17D08
	099 Move X2, X0
	100 Move X0, X20
	101 Move X1, X19
	102 Move X3, X31
	103 Call ArgumentException..ctor, X0, X1, X2
	104 Move X0, 0xF26000
	105 Move X0, [X0+904]
	106 Call 0x1C17D08
	107 Move X1, X0
	108 Move X0, X20
	109 Call 0x1C17DEC

Method: System.Boolean CheckHeader(System.Byte[] message)

Disassembly:
	0x031FCAFC BL 0x31FCB1C
	0x031FCB00 STR X0, [X19 + 0x28]
	0x031FCB04 LDP X20, X19, [X31 + 0x30]
	0x031FCB08 LDP X22, X21, [X31 + 0x20]
	0x031FCB0C LDP X30, X23, [X31 + 0x10]
	0x031FCB10 ADD X31, X31, 0x40
	0x031FCB14 RET
	0x031FCB18 BL 0x1C16F20
	0x031FCB1C STP X30, X21, [X31 - 0x20]!
	0x031FCB20 STP X20, X19, [X31 + 0x10]
	0x031FCB24 LDRB W8, [X0 + 0x14]
	0x031FCB28 MOV W19, W3
	0x031FCB2C MOV W20, W2
	0x031FCB30 MOV X21, X1
	0x031FCB34 MOV X0, X31
	0x031FCB38 TBNZ X8, 0x0, 0x31FCB68
	0x031FCB3C BL 0x3242EC8
	0x031FCB40 CBZ X0, 0x31FCB70
	0x031FCB44 LDR X8, [X0]
	0x031FCB48 MOV W2, W20
	0x031FCB4C MOV W3, W19
	0x031FCB50 LDP X20, X19, [X31 + 0x10]
	0x031FCB54 LDR X5, [X8 + 0x388]
	0x031FCB58 LDR X4, [X8 + 0x390]
	0x031FCB5C MOV X1, X21
	0x031FCB60 LDP X30, X21, [X31], #0x20
	0x031FCB64 BR X5
	0x031FCB68 BL 0x3242C30
	0x031FCB6C CBNZ X0, 0x31FCB44
	0x031FCB70 BL 0x1C16F20
	0x031FCB74 STP X30, X21, [X31 - 0x20]!
	0x031FCB78 STP X20, X19, [X31 + 0x10]
	0x031FCB7C ADRP X21, 0x11E0000
	0x031FCB80 LDRB W8, [X21 + 0x201]
	0x031FCB84 MOV X19, X1
	0x031FCB88 MOV X20, X0
	0x031FCB8C TBNZ X8, 0x0, 0x31FCBA4
	0x031FCB90 ADRP X0, 0xEF7000
	0x031FCB94 LDR X0, [X0 + 0x618]
	0x031FCB98 BL 0x1C16CF4
	0x031FCB9C MOVZ W8, 0x1
	0x031FCBA0 STRB W8, [X21 + 0x201]
	0x031FCBA4 CBZ X19, 0x31FCBD8
	0x031FCBA8 LDRB W8, [X20 + 0x14]
	0x031FCBAC TBNZ X8, 0x0, 0x31FCBF4
	0x031FCBB0 MOV X0, X31
	0x031FCBB4 BL 0x3242EC8
	0x031FCBB8 CBZ X0, 0x31FCC00
	0x031FCBBC LDR X8, [X0]
	0x031FCBC0 MOV X1, X19
	0x031FCBC4 LDP X20, X19, [X31 + 0x10]
	0x031FCBC8 LDR X3, [X8 + 0x268]
	0x031FCBCC LDR X2, [X8 + 0x270]
	0x031FCBD0 LDP X30, X21, [X31], #0x20
	0x031FCBD4 BR X3
	0x031FCBD8 ADRP X8, 0xEF7000
	0x031FCBDC LDR X8, [X8 + 0x618]
	0x031FCBE0 LDP X20, X19, [X31 + 0x10]
	0x031FCBE4 MOV W1, W31
	0x031FCBE8 LDR X0, [X8]
	0x031FCBEC LDP X30, X21, [X31], #0x20
	0x031FCBF0 B 0x1C16D6C
	0x031FCBF4 MOV X0, X31
	0x031FCBF8 BL 0x3242C30
	0x031FCBFC CBNZ X0, 0x31FCBBC
	0x031FCC00 BL 0x1C16F20
	0x031FCC04 SUB X31, X31, 0x70
	0x031FCC08 STR X30, [X31 + 0x10]
	0x031FCC0C STP X28, X27, [X31 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x11E1000
	009 Move X21, 0xF26000
	010 Move W8, [X22+498]
	011 Move X21, [X21+896]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF26000
	019 Move X0, [X0+896]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+498], W8
	023 Move X0, [X21]
	024 Move TEMP, 0
	025 Not TEMP
	026 Move W22, TEMP
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X21]
	032 Move X8, [X0+184]
	033 Move X8, [X8]
	034 Compare X8, 0
	035 JumpIfEqual {79}
	036 Move W9, [X8+24]
	037 Add W8, W22, 1
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Compare X20, 0
	040 JumpIfEqual {79}
	041 Move W9, [X20+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X23, W8
	044 Add X8, X20, X23
	045 Move W9, [X0+224]
	046 Move W24, [X8+32]
	047 Compare W9, 0
	048 JumpIfNotEqual {51}
	049 Call 0x1C17DFC
	050 Move X0, [X21]
	051 Move X8, [X0+184]
	052 Move X8, [X8]
	053 Compare X8, 0
	054 JumpIfEqual {79}
	055 Move W9, [X8+24]
	056 Add W22, W22, 1
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Add X8, X8, X23
	059 Move W8, [X8+32]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move W0, W31
	062 Add X0, X31, 12
	063 Move W2, 8
	064 Move X1, X20
	065 Move [X31+12], W31
	066 Call BitConverterLE.UIntFromBytes, X0, X1, X2
	067 Move W8, [X31+12]
	068 NotImplemented "Instruction LDRSW not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 NotImplemented "Instruction CSET not yet implemented."
	071 Move X20, [X31+48]
	072 Move X19, [X31+56]
	073 Move X22, [X31+32]
	074 Move X21, [X31+40]
	075 Move X24, [X31+16]
	076 Move X23, [X31+24]
	077 Move X30, [X31+64]
	078 Return X0
	079 Call 0x1C17F20
	080 Call 0x1C17F28

Method: System.Byte[] GetBytes()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void .cctor()

Disassembly:
	0x031FCC10 STP X26, X25, [X31 + 0x30]
	0x031FCC14 STP X24, X23, [X31 + 0x40]
	0x031FCC18 STP X22, X21, [X31 + 0x50]
	0x031FCC1C STP X20, X19, [X31 + 0x60]
	0x031FCC20 ADRP X19, 0x11E0000
	0x031FCC24 LDRB W8, [X19 + 0x202]
	0x031FCC28 MOV X22, X0
	0x031FCC2C TBNZ X8, 0x0, 0x31FCC5C
	0x031FCC30 ADRP X0, 0xF25000
	0x031FCC34 LDR X0, [X0 + 0x368]
	0x031FCC38 BL 0x1C16CF4
	0x031FCC3C ADRP X0, 0xF25000
	0x031FCC40 LDR X0, [X0 + 0x318]
	0x031FCC44 BL 0x1C16CF4
	0x031FCC48 ADRP X0, 0xEF7000
	0x031FCC4C LDR X0, [X0 + 0xE00]
	0x031FCC50 BL 0x1C16CF4
	0x031FCC54 MOVZ W8, 0x1
	0x031FCC58 STRB W8, [X19 + 0x202]
	0x031FCC5C STR X31, [X31 + 0x18]
	0x031FCC60 STR X31, [X31 + 0x8]
	0x031FCC64 LDR X1, [X22 + 0x30]
	0x031FCC68 MOV X0, X22
	0x031FCC6C BL 0x31FCB74
	0x031FCC70 LDR X1, [X22 + 0x38]
	0x031FCC74 MOV X20, X0
	0x031FCC78 MOV X0, X22
	0x031FCC7C BL 0x31FCB74
	0x031FCC80 LDR X1, [X22 + 0x28]
	0x031FCC84 MOV X21, X0
	0x031FCC88 MOV X0, X22
	0x031FCC8C BL 0x31FCB74
	0x031FCC90 LDR X23, [X22 + 0x48]
	0x031FCC94 MOV X19, X0
	0x031FCC98 CBZ X23, 0x31FCCF0
	0x031FCC9C ADRP X8, 0xF25000
	0x031FCCA0 LDR X8, [X8 + 0x368]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11E1000
	007 Move X22, 0xEF8000
	008 Move X19, 0xF26000
	009 Move X20, 0xF26000
	010 Move W8, [X21+499]
	011 Move X22, [X22+1560]
	012 Move X19, [X19+928]
	013 Move X20, [X20+896]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xEF8000
	019 Move X0, [X0+1560]
	020 Call 0x1C17CF4
	021 Move X0, 0xF26000
	022 Move X0, [X0+896]
	023 Call 0x1C17CF4
	024 Move X0, 0xF26000
	025 Move X0, [X0+928]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+499], W8
	029 Move X0, [X22]
	030 Move W1, 8
	031 Call 0x1C17D6C
	032 Move X1, [X19]
	033 Move X2, X31
	034 Move X19, X0
	035 Call RuntimeHelpers.InitializeArray, X0, X1
	036 Move X8, [X20]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X8, [X8+184]
	040 Move [X8], X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+48]
	044 Return 

