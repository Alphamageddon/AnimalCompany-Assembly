Type: Mono.Security.Protocol.Ntlm.Type1Message

Method: System.Void .ctor()

Disassembly:
	0x031FCD48 ADRP X10, 0xEF7000
	0x031FCD4C LDR X8, [X24]
	0x031FCD50 LDR X10, [X10 + 0xE00]
	0x031FCD54 LDRH W9, [X8 + 0x12E]
	0x031FCD58 LDR X1, [X10]
	0x031FCD5C CBZ X9, 0x31FCD80
	0x031FCD60 LDR X10, [X8 + 0xB0]
	0x031FCD64 ADD X10, X10, 0x8
	0x031FCD68 LDUR X11, [X10 - 0x8]
	0x031FCD6C CMP X11, X1
	0x031FCD70 B.EQ 0x31FD0F8
	0x031FCD74 SUBS X9, X9, 0x1
	0x031FCD78 ADD X10, X10, 0x10
	0x031FCD7C B.NE 0x31FCD68
	0x031FCD80 MOV X0, X24
	0x031FCD84 MOV W2, W31
	0x031FCD88 BL 0x1C5C788
	0x031FCD8C B 0x31FD104
	0x031FCD90 MOV W27, W31
	0x031FCD94 LDR X24, [X31 + 0x8]
	0x031FCD98 CBZ X24, 0x31FCDA8
	0x031FCD9C LDR W26, [X24 + 0x18]
	0x031FCDA0 CBNZ X20, 0x31FCDB0
	0x031FCDA4 B 0x31FD12C
	0x031FCDA8 MOV W26, W31
	0x031FCDAC CBZ X20, 0x31FD12C
	0x031FCDB0 CBZ X21, 0x31FD12C
	0x031FCDB4 CBZ X19, 0x31FD12C
	0x031FCDB8 LDR W8, [X20 + 0x18]
	0x031FCDBC LDR W9, [X21 + 0x18]
	0x031FCDC0 LDR W10, [X19 + 0x18]
	0x031FCDC4 ADD W11, W27, W26
	0x031FCDC8 ADD W8, W11, W8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11E1000
	006 Move X21, 0xF26000
	007 Move W8, [X20+502]
	008 Move X21, [X21+896]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF26000
	015 Move X0, [X0+896]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+502], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Call Object..ctor, X0
	027 Move W8, 1
	028 Move X0, X31
	029 Move [X19+16], W8
	030 Call Environment.get_UserDomainName
	031 Move [X19+32], X0
	032 Move X0, X31
	033 Call Environment.get_MachineName
	034 Move W8, 0xB207
	035 Move [X19+24], X0
	036 Move [X19+20], W8
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return 

Method: System.Void set_Domain(System.String value)

Disassembly:
	0x031FCDCC ADD W8, W8, W9
	0x031FCDD0 ADD W8, W8, W10
	0x031FCDD4 ADD W1, W8, 0x40
	0x031FCDD8 MOV X0, X22
	0x031FCDDC BL 0x31FB864
	0x031FCDE0 CBZ X0, 0x31FD12C
	0x031FCDE4 LDR X8, [X0 + 0x18]
	0x031FCDE8 MOV X25, X0
	0x031FCDEC CMP W8, 0xC
	0x031FCDF0 B.LS 0x31FD128
	0x031FCDF4 LDR W9, [X20 + 0x18]
	0x031FCDF8 LDR W10, [X21 + 0x18]
	0x031FCDFC LDR W11, [X19 + 0x18]
	0x031FCE00 CMP W8, 0xD
	0x031FCE04 STRB W27, [X25 + 0x2C]
	0x031FCE08 B.EQ 0x31FD128
	0x031FCE0C CMP W8, 0xE
	0x031FCE10 STRB W31, [X25 + 0x2D]
	0x031FCE14 B.LS 0x31FD128
	0x031FCE18 CMP W8, 0xF
	0x031FCE1C STRB W27, [X25 + 0x2E]
	0x031FCE20 B.EQ 0x31FD128
	0x031FCE24 CMP W8, 0x10
	0x031FCE28 STRB W31, [X25 + 0x2F]
	0x031FCE2C B.LS 0x31FD128
	0x031FCE30 ADD W9, W9, W10
	0x031FCE34 ADD W9, W9, W11
	0x031FCE38 ADD W9, W9, 0x40
	0x031FCE3C CMP W8, 0x11
	0x031FCE40 STRB W9, [X25 + 0x30]
	0x031FCE44 B.EQ 0x31FD128
	0x031FCE48 UBFM W10, W9, 0x8, 0x1F
	0x031FCE4C CMP W8, 0x14

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11E1000
	007 Move X22, 0xEF8000
	008 Move W8, [X21+503]
	009 Move X22, [X22+2440]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEF8000
	017 Move X0, [X0+2440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+503], W8
	021 Move X1, [X22]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X2, X31
	024 NotImplemented "Instruction CSEL not yet implemented."
	025 Move X0, X20
	026 Call String.op_Equality, X0, X1
	027 Move W8, [X19+20]
	028 And W31, W0, 1
	029 Move W9, 4096
	030 NotImplemented "Instruction CSEL not yet implemented."
	031 And W8, W8, 0xFFFFEFFF
	032 Or W8, W8, W9
	033 Move [X19+20], W8
	034 Move [X19+32], X20
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return 

Method: System.Void set_Host(System.String value)

Disassembly:
	0x031FCE50 STRB W10, [X25 + 0x31]
	0x031FCE54 B.LS 0x31FD128
	0x031FCE58 CMP W8, 0x15
	0x031FCE5C STRB W26, [X25 + 0x34]
	0x031FCE60 B.EQ 0x31FD128
	0x031FCE64 UBFM W10, W26, 0x8, 0x1F
	0x031FCE68 CMP W8, 0x16
	0x031FCE6C STRB W10, [X25 + 0x35]
	0x031FCE70 B.LS 0x31FD128
	0x031FCE74 CMP W8, 0x17
	0x031FCE78 STRB W26, [X25 + 0x36]
	0x031FCE7C B.EQ 0x31FD128
	0x031FCE80 CMP W8, 0x18
	0x031FCE84 STRB W10, [X25 + 0x37]
	0x031FCE88 B.LS 0x31FD128
	0x031FCE8C SXTH W26, W9
	0x031FCE90 ADD W28, W26, W27
	0x031FCE94 CMP W8, 0x19
	0x031FCE98 STRB W28, [X25 + 0x38]
	0x031FCE9C B.EQ 0x31FD128
	0x031FCEA0 UBFM W9, W28, 0x8, 0x1F
	0x031FCEA4 CMP W8, 0x1C
	0x031FCEA8 STRB W9, [X25 + 0x39]
	0x031FCEAC B.LS 0x31FD128
	0x031FCEB0 LDR X10, [X20 + 0x18]
	0x031FCEB4 CMP W8, 0x1D
	0x031FCEB8 STRB W10, [X25 + 0x3C]
	0x031FCEBC B.EQ 0x31FD128
	0x031FCEC0 UBFM X9, X10, 0x8, 0x3F
	0x031FCEC4 CMP W8, 0x1E
	0x031FCEC8 STRB W9, [X25 + 0x3D]
	0x031FCECC B.LS 0x31FD128
	0x031FCED0 CMP W8, 0x1F

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11E1000
	007 Move X22, 0xEF8000
	008 Move W8, [X21+504]
	009 Move X22, [X22+2440]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEF8000
	017 Move X0, [X0+2440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+504], W8
	021 Move X1, [X22]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X2, X31
	024 NotImplemented "Instruction CSEL not yet implemented."
	025 Move X0, X20
	026 Call String.op_Equality, X0, X1
	027 Move W8, [X19+20]
	028 And W31, W0, 1
	029 Move W9, 0x2000
	030 NotImplemented "Instruction CSEL not yet implemented."
	031 And W8, W8, 0xFFFFDFFF
	032 Or W8, W8, W9
	033 Move [X19+20], W8
	034 Move [X19+24], X20
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return 

Method: System.Void Decode(System.Byte[] message)

Disassembly:
	0x031FCED4 STRB W10, [X25 + 0x3E]
	0x031FCED8 B.EQ 0x31FD128
	0x031FCEDC CMP W8, 0x20
	0x031FCEE0 STRB W9, [X25 + 0x3F]
	0x031FCEE4 B.LS 0x31FD128
	0x031FCEE8 MOVZ W9, 0x40
	0x031FCEEC CMP W8, 0x21
	0x031FCEF0 STRB W9, [X25 + 0x40]
	0x031FCEF4 B.EQ 0x31FD128
	0x031FCEF8 CMP W8, 0x24
	0x031FCEFC STRB W31, [X25 + 0x41]
	0x031FCF00 B.LS 0x31FD128
	0x031FCF04 LDR X9, [X21 + 0x18]
	0x031FCF08 CMP W8, 0x25
	0x031FCF0C STRB W9, [X25 + 0x44]
	0x031FCF10 B.EQ 0x31FD128
	0x031FCF14 UBFM X11, X9, 0x8, 0x3F
	0x031FCF18 CMP W8, 0x26
	0x031FCF1C STRB W11, [X25 + 0x45]
	0x031FCF20 B.LS 0x31FD128
	0x031FCF24 CMP W8, 0x27
	0x031FCF28 STRB W9, [X25 + 0x46]
	0x031FCF2C B.EQ 0x31FD128
	0x031FCF30 CMP W8, 0x28
	0x031FCF34 STRB W11, [X25 + 0x47]
	0x031FCF38 B.LS 0x31FD128
	0x031FCF3C SXTH W10, W10
	0x031FCF40 ADD W10, W10, 0x40
	0x031FCF44 CMP W8, 0x29
	0x031FCF48 STRB W10, [X25 + 0x48]
	0x031FCF4C B.EQ 0x31FD128
	0x031FCF50 UBFM W11, W10, 0x8, 0x1F
	0x031FCF54 CMP W8, 0x2C
	0x031FCF58 STRB W11, [X25 + 0x49]
	0x031FCF5C B.LS 0x31FD128
	0x031FCF60 LDR X11, [X19 + 0x18]
	0x031FCF64 CMP W8, 0x2D
	0x031FCF68 STRB W11, [X25 + 0x4C]
	0x031FCF6C B.EQ 0x31FD128
	0x031FCF70 UBFM X12, X11, 0x8, 0x3F
	0x031FCF74 CMP W8, 0x2E
	0x031FCF78 STRB W12, [X25 + 0x4D]
	0x031FCF7C B.LS 0x31FD128
	0x031FCF80 CMP W8, 0x2F
	0x031FCF84 STRB W11, [X25 + 0x4E]
	0x031FCF88 B.EQ 0x31FD128
	0x031FCF8C CMP W8, 0x30
	0x031FCF90 STRB W12, [X25 + 0x4F]
	0x031FCF94 B.LS 0x31FD128
	0x031FCF98 SXTH W9, W9
	0x031FCF9C SXTH W27, W10
	0x031FCFA0 ADD W9, W9, W27
	0x031FCFA4 CMP W8, 0x31
	0x031FCFA8 STRB W9, [X25 + 0x50]
	0x031FCFAC B.EQ 0x31FD128
	0x031FCFB0 UBFM W10, W9, 0x8, 0x1F
	0x031FCFB4 CMP W8, 0x38
	0x031FCFB8 STRB W10, [X25 + 0x51]
	0x031FCFBC B.LS 0x31FD128
	0x031FCFC0 CMP W8, 0x39

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X20, X1
	008 Move X19, X0
	009 Call MessageBase.Decode, X0, X1
	010 Add X0, X31, 8
	011 Move W2, 12
	012 Move X1, X20
	013 Move [X31+8], W31
	014 Call BitConverterLE.UIntFromBytes, X0, X1, X2
	015 Move W8, [X31+8]
	016 Add X0, X31, 12
	017 Move W2, 16
	018 Move X1, X20
	019 Move [X19+20], W8
	020 NotImplemented "Instruction STRH not yet implemented."
	021 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	022 NotImplemented "Instruction LDRH not yet implemented."
	023 Add X0, X31, 24
	024 Move W2, 20
	025 Move X1, X20
	026 NotImplemented "Instruction STRH not yet implemented."
	027 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 Move X0, X31
	030 Call Encoding.get_ASCII
	031 Compare X0, 0
	032 JumpIfEqual {66}
	033 Move X8, [X0]
	034 Move X1, X20
	035 Move W2, W22
	036 Move W3, W21
	037 Move X9, [X8+904]
	038 Move X4, [X8+912]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move [X19+32], X0
	041 Add X0, X31, 28
	042 Move W2, 24
	043 Move X1, X20
	044 NotImplemented "Instruction STRH not yet implemented."
	045 Call BitConverterLE.UShortFromBytes, X0, X1, X2
	046 NotImplemented "Instruction LDRH not yet implemented."
	047 Move X0, X31
	048 Call Encoding.get_ASCII
	049 Compare X0, 0
	050 JumpIfEqual {66}
	051 Move X8, [X0]
	052 Move W2, 32
	053 Move X1, X20
	054 Move W3, W21
	055 Move X9, [X8+904]
	056 Move X4, [X8+912]
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move [X19+24], X0
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move X22, [X31+32]
	062 Move X21, [X31+40]
	063 Move X30, [X31+16]
	064 Add X31, X31, 64
	065 Return 
	066 Call 0x1C17F20

Method: System.Byte[] GetBytes()

Disassembly:
	0x031FCFC4 STRB W8, [X25 + 0x58]
	0x031FCFC8 B.EQ 0x31FD128
	0x031FCFCC UBFM X10, X8, 0x8, 0x3F
	0x031FCFD0 CMP W8, 0x3C
	0x031FCFD4 STRB W10, [X25 + 0x59]
	0x031FCFD8 B.LS 0x31FD128
	0x031FCFDC LDR W10, [X22 + 0x14]
	0x031FCFE0 CMP W8, 0x3D
	0x031FCFE4 STRB W10, [X25 + 0x5C]
	0x031FCFE8 B.EQ 0x31FD128
	0x031FCFEC UBFM W11, W10, 0x8, 0x1F
	0x031FCFF0 CMP W8, 0x3E
	0x031FCFF4 STRB W11, [X25 + 0x5D]
	0x031FCFF8 B.LS 0x31FD128
	0x031FCFFC UBFM W11, W10, 0x10, 0x1F
	0x031FD000 CMP W8, 0x3F
	0x031FD004 STRB W11, [X25 + 0x5E]
	0x031FD008 B.EQ 0x31FD128
	0x031FD00C UBFM W8, W10, 0x18, 0x1F
	0x031FD010 STRB W8, [X25 + 0x5F]
	0x031FD014 LDR W4, [X20 + 0x18]
	0x031FD018 MOVZ W3, 0x40
	0x031FD01C MOV X0, X20
	0x031FD020 MOV W1, W31
	0x031FD024 MOV X2, X25
	0x031FD028 MOV X5, X31
	0x031FD02C SXTH W22, W9
	0x031FD030 BL 0x33A8A9C
	0x031FD034 LDR W4, [X21 + 0x18]
	0x031FD038 MOV X0, X21
	0x031FD03C MOV W1, W31
	0x031FD040 MOV X2, X25
	0x031FD044 MOV W3, W27
	0x031FD048 MOV X5, X31
	0x031FD04C BL 0x33A8A9C
	0x031FD050 LDR W4, [X19 + 0x18]
	0x031FD054 MOV X0, X19
	0x031FD058 MOV W1, W31
	0x031FD05C MOV X2, X25
	0x031FD060 MOV W3, W22
	0x031FD064 MOV X5, X31
	0x031FD068 BL 0x33A8A9C
	0x031FD06C CBZ X23, 0x31FD0A0
	0x031FD070 LDR W4, [X23 + 0x18]
	0x031FD074 MOV X0, X23
	0x031FD078 MOV W1, W31
	0x031FD07C MOV X2, X25
	0x031FD080 MOV W3, W26
	0x031FD084 MOV X5, X31
	0x031FD088 BL 0x33A8A9C
	0x031FD08C LDR W2, [X23 + 0x18]
	0x031FD090 MOV X0, X23
	0x031FD094 MOV W1, W31
	0x031FD098 MOV X3, X31
	0x031FD09C BL 0x339FA34
	0x031FD0A0 CBZ X24, 0x31FD12C
	0x031FD0A4 LDR W4, [X24 + 0x18]
	0x031FD0A8 SXTH W3, W28
	0x031FD0AC MOV X0, X24
	0x031FD0B0 MOV W1, W31
	0x031FD0B4 MOV X2, X25
	0x031FD0B8 MOV X5, X31
	0x031FD0BC BL 0x33A8A9C
	0x031FD0C0 LDR W2, [X24 + 0x18]
	0x031FD0C4 MOV X0, X24
	0x031FD0C8 MOV W1, W31
	0x031FD0CC MOV X3, X31
	0x031FD0D0 BL 0x339FA34
	0x031FD0D4 MOV X0, X25
	0x031FD0D8 LDP X20, X19, [X31 + 0x60]
	0x031FD0DC LDP X22, X21, [X31 + 0x50]
	0x031FD0E0 LDP X24, X23, [X31 + 0x40]
	0x031FD0E4 LDP X26, X25, [X31 + 0x30]
	0x031FD0E8 LDP X28, X27, [X31 + 0x20]
	0x031FD0EC LDR X30, [X31 + 0x10]
	0x031FD0F0 ADD X31, X31, 0x70
	0x031FD0F4 RET
	0x031FD0F8 LDRSW X9, [X10]
	0x031FD0FC ADD X8, X8, X9, 0x4, LSL
	0x031FD100 ADD X0, X8, 0x138
	0x031FD104 LDP X8, X1, [X0]
	0x031FD108 MOV X0, X24
	0x031FD10C BLR X8
	0x031FD110 CBNZ X25, 0x31FD17C
	0x031FD114 CMP W26, 0x6
	0x031FD118 B.EQ 0x31FCCE4
	0x031FD11C CBNZ W26, 0x31FD0D4
	0x031FD120 LDR X23, [X22 + 0x48]
	0x031FD124 B 0x31FCC9C
	0x031FD128 BL 0x1C16F28
	0x031FD12C BL 0x1C16F20
	0x031FD130 ADRP X0, 0xEF6000
	0x031FD134 LDR X0, [X0 + 0x5B0]
	0x031FD138 BL 0x1C16D08
	0x031FD13C BL 0x1C16F10
	0x031FD140 MOV X19, X0
	0x031FD144 ADRP X0, 0xF24000
	0x031FD148 LDR X0, [X0 + 0x3B0]
	0x031FD14C BL 0x1C16D08
	0x031FD150 MOV X1, X0
	0x031FD154 MOV X0, X19
	0x031FD158 MOV X2, X31
	0x031FD15C BL 0x337DF1C
	0x031FD160 ADRP X0, 0xF24000
	0x031FD164 LDR X0, [X0 + 0x3B8]
	0x031FD168 BL 0x1C16D08
	0x031FD16C MOV X1, X0
	0x031FD170 MOV X0, X19
	0x031FD174 BL 0x1C16DEC
	0x031FD178 BL 0x1C16F20
	0x031FD17C MOV X0, X25
	0x031FD180 BL 0x1C16F18
	0x031FD184 MOV X26, X0
	0x031FD188 B 0x31FD198
	0x031FD18C B 0x31FD190
	0x031FD190 MOV X26, X0
	0x031FD194 MOV X23, X31
	0x031FD198 CMP W1, 0x1
	0x031FD19C B.NE 0x31FD1BC
	0x031FD1A0 MOV X0, X26
	0x031FD1A4 BL 0x3EB1AD0
	0x031FD1A8 LDR X25, [X0]
	0x031FD1AC BL 0x3EB1AE0
	0x031FD1B0 MOV W26, W31
	0x031FD1B4 CBNZ X24, 0x31FCD48
	0x031FD1B8 B 0x31FD110
	0x031FD1BC MOV X25, X31
	0x031FD1C0 B 0x31FD1C8
	0x031FD1C4 MOV X26, X0
	0x031FD1C8 CBZ X24, 0x31FD22C
	0x031FD1CC ADRP X10, 0xEF6000
	0x031FD1D0 LDR X8, [X24]
	0x031FD1D4 LDR X10, [X10 + 0xE00]
	0x031FD1D8 LDRH W9, [X8 + 0x12E]
	0x031FD1DC LDR X1, [X10]
	0x031FD1E0 CBZ X9, 0x31FD204
	0x031FD1E4 LDR X10, [X8 + 0xB0]
	0x031FD1E8 ADD X10, X10, 0x8
	0x031FD1EC LDUR X11, [X10 - 0x8]
	0x031FD1F0 CMP X11, X1
	0x031FD1F4 B.EQ 0x31FD214
	0x031FD1F8 SUBS X9, X9, 0x1
	0x031FD1FC ADD X10, X10, 0x10
	0x031FD200 B.NE 0x31FD1EC
	0x031FD204 MOV X0, X24
	0x031FD208 MOV W2, W31
	0x031FD20C BL 0x1C5C788

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x11E1000
	008 Move W8, [X19+505]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEFA000
	015 Move X0, [X0+3144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+505], W8
	019 Move X8, [X20+32]
	020 Compare X8, 0
	021 JumpIfEqual {158}
	022 Move X9, [X20+24]
	023 Compare X9, 0
	024 JumpIfEqual {158}
	025 Move W21, [X9+16]
	026 Move W22, [X8+16]
	027 Move X0, X20
	028 NotImplemented "Instruction SXTH not yet implemented."
	029 Add W23, W8, 32
	030 Add W1, W23, W22
	031 Call MessageBase.PrepareMessage, X0, X1
	032 Compare X0, 0
	033 JumpIfEqual {158}
	034 Move W8, [X0+24]
	035 Move X19, X0
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move W9, [X20+20]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move [X19+44], W9
	040 Move W9, [X20+20]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move W9, W9
	043 ShiftRight W9, 8
	044 And W9, W9, 0x7FFFFFFF
	045 Move [X19+45], W9
	046 NotImplemented "Instruction LDRH not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move [X19+46], W9
	049 Move W9, [X20+23]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move [X19+47], W9
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move [X19+48], W22
	054 Move W9, W22
	055 ShiftRight W9, 8
	056 And W9, W9, 0x7FFFFFFF
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move [X19+49], W9
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move [X19+50], W22
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move [X19+51], W9
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move [X19+52], W23
	065 Move W9, W23
	066 ShiftRight W9, 8
	067 And W9, W9, 0x7FFFFFFF
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move [X19+53], W9
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move [X19+56], W21
	072 Move W9, W21
	073 ShiftRight W9, 8
	074 And W9, W9, 0x7FFFFFFF
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move [X19+57], W9
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move [X19+58], W21
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move [X19+59], W9
	081 Move W9, 32
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move [X19+60], W9
	084 Move X21, 0xEF9000
	085 Move X21, [X21+3144]
	086 Move X0, X31
	087 Move [X19+61], W31
	088 Call Encoding.get_ASCII
	089 Move X8, [X21]
	090 Move X22, [X20+24]
	091 Move X21, X0
	092 Move W9, [X8+224]
	093 Compare W9, 0
	094 JumpIfNotEqual {97}
	095 Move X0, X8
	096 Call 0x1C17DFC
	097 Move X0, X31
	098 Call CultureInfo.get_InvariantCulture
	099 Compare X22, 0
	100 JumpIfEqual {158}
	101 Move X1, X0
	102 Move X0, X22
	103 Move X2, X31
	104 Call String.ToUpper, X0, X1
	105 Compare X21, 0
	106 JumpIfEqual {158}
	107 Move X8, [X21]
	108 Move X1, X0
	109 Move X0, X21
	110 Move X9, [X8+616]
	111 Move X2, [X8+624]
	112 NotImplemented "Instruction BLR not yet implemented."
	113 Compare X0, 0
	114 JumpIfEqual {158}
	115 Move W4, [X0+24]
	116 Move W3, 32
	117 Move W1, W31
	118 Move X2, X19
	119 Move X5, X31
	120 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	121 Move X0, X31
	122 Call Encoding.get_ASCII
	123 Move X21, [X20+32]
	124 Move X20, X0
	125 Move X0, X31
	126 Call CultureInfo.get_InvariantCulture
	127 Compare X21, 0
	128 JumpIfEqual {158}
	129 Move X1, X0
	130 Move X0, X21
	131 Move X2, X31
	132 Call String.ToUpper, X0, X1
	133 Compare X20, 0
	134 JumpIfEqual {158}
	135 Move X8, [X20]
	136 Move X1, X0
	137 Move X0, X20
	138 Move X9, [X8+616]
	139 Move X2, [X8+624]
	140 NotImplemented "Instruction BLR not yet implemented."
	141 Compare X0, 0
	142 JumpIfEqual {158}
	143 Move W4, [X0+24]
	144 NotImplemented "Instruction SXTH not yet implemented."
	145 Move W1, W31
	146 Move X2, X19
	147 Move X5, X31
	148 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	149 Move X0, X19
	150 Move X20, [X31+32]
	151 Move X19, [X31+40]
	152 Move X22, [X31+16]
	153 Move X21, [X31+24]
	154 Move X30, [X31+48]
	155 Move X23, [X31+56]
	156 Return X0
	157 Call 0x1C17F28
	158 Call 0x1C17F20

