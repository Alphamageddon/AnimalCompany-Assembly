Type: Mono.Security.PKCS7/ContentInfo

Method: System.Void .ctor()

Disassembly:
	0x031EAB58 CBZ X0, 0x31EAB6C
	0x031EAB5C LDR X8, [X0]
	0x031EAB60 LDR X9, [X8 + 0x298]
	0x031EAB64 LDR X1, [X8 + 0x2A0]
	0x031EAB68 BLR X9
	0x031EAB6C CMP W21, W0
	0x031EAB70 B.GE 0x31EABA8
	0x031EAB74 LDR X22, [X19 + 0x28]
	0x031EAB78 MOV X0, X20
	0x031EAB7C MOV W1, W21
	0x031EAB80 BL 0x31E8704
	0x031EAB84 CBZ X22, 0x31EABB8
	0x031EAB88 LDR X8, [X22]
	0x031EAB8C MOV X1, X0
	0x031EAB90 MOV X0, X22
	0x031EAB94 LDR X9, [X8 + 0x308]
	0x031EAB98 LDR X2, [X8 + 0x310]
	0x031EAB9C BLR X9
	0x031EABA0 ADD W21, W21, 0x1
	0x031EABA4 B 0x31EAB54
	0x031EABA8 LDP X20, X19, [X31 + 0x20]
	0x031EABAC LDP X22, X21, [X31 + 0x10]
	0x031EABB0 LDP X30, X23, [X31], #0x30
	0x031EABB4 RET
	0x031EABB8 BL 0x1C16F20
	0x031EABBC ADRP X0, 0xF11000
	0x031EABC0 LDR X0, [X0 + 0x578]
	0x031EABC4 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11F3000
	006 Move X20, 0xF37000
	007 Move W8, [X21+366]
	008 Move X20, [X20+2968]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF37000
	015 Move X0, [X0+2968]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+366], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move X0, [X20]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X20, X0
	026 Call Object..ctor, X0
	027 Move W8, 160
	028 Move [X20+24], X31
	029 Move [X20+16], W8
	030 Move [X19+24], X20
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return 

Method: System.Void .ctor(System.String oid)

Disassembly:
	0x031EABC8 BL 0x1C16F10
	0x031EABCC MOV X19, X0
	0x031EABD0 ADRP X0, 0xF36000
	0x031EABD4 LDR X0, [X0 + 0xCC8]
	0x031EABD8 B 0x31EABF8
	0x031EABDC ADRP X0, 0xF11000
	0x031EABE0 LDR X0, [X0 + 0x578]
	0x031EABE4 BL 0x1C16D08
	0x031EABE8 BL 0x1C16F10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call ContentInfo..ctor, X0
	007 Move [X20+16], X19
	008 Move X20, [X31+16]
	009 Move X19, [X31+24]
	010 Move X30, [X31+32]
	011 Return 

Method: System.Void .ctor(System.Byte[] data)

Disassembly:
	0x031EABEC MOV X19, X0
	0x031EABF0 ADRP X0, 0xF36000
	0x031EABF4 LDR X0, [X0 + 0xC80]
	0x031EABF8 BL 0x1C16D08
	0x031EABFC MOV X1, X0
	0x031EAC00 MOV X0, X19
	0x031EAC04 MOV X2, X31
	0x031EAC08 BL 0x3314A68
	0x031EAC0C ADRP X0, 0xF36000
	0x031EAC10 LDR X0, [X0 + 0xD00]
	0x031EAC14 BL 0x1C16D08
	0x031EAC18 MOV X1, X0
	0x031EAC1C MOV X0, X19
	0x031EAC20 BL 0x1C16DEC
	0x031EAC24 BL 0x1C16F28
	0x031EAC28 STP X30, X21, [X31 - 0x20]!
	0x031EAC2C STP X20, X19, [X31 + 0x10]
	0x031EAC30 ADRP X20, 0x11F2000
	0x031EAC34 ADRP X21, 0xF36000
	0x031EAC38 LDRB W8, [X20 + 0x175]
	0x031EAC3C LDR X21, [X21 + 0xBA0]
	0x031EAC40 MOV X19, X0
	0x031EAC44 TBNZ X8, 0x0, 0x31EAC5C
	0x031EAC48 ADRP X0, 0xF36000
	0x031EAC4C LDR X0, [X0 + 0xBA0]
	0x031EAC50 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11F3000
	007 Move X22, 0xF37000
	008 Move W8, [X21+367]
	009 Move X22, [X22+2968]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF37000
	017 Move X0, [X0+2968]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+367], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X20
	024 Move X21, X0
	025 Call ASN1..ctor, X0, X1
	026 Move X0, X19
	027 Move X1, X21
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Void .ctor(Mono.Security.ASN1 asn1)

Disassembly:
	0x031EAC54 MOVZ W8, 0x1
	0x031EAC58 STRB W8, [X20 + 0x175]
	0x031EAC5C MOV X0, X19
	0x031EAC60 MOV X1, X31
	0x031EAC64 BL 0x33BDD8C
	0x031EAC68 MOVZ W8, 0x1
	0x031EAC6C STRB W8, [X19 + 0x10]
	0x031EAC70 LDR X0, [X21]
	0x031EAC74 BL 0x1C16F10
	0x031EAC78 MOV X1, X31
	0x031EAC7C MOV X20, X0
	0x031EAC80 BL 0x3351F5C
	0x031EAC84 STR X20, [X19 + 0x20]
	0x031EAC88 LDR X0, [X21]
	0x031EAC8C BL 0x1C16F10
	0x031EAC90 MOV X1, X31
	0x031EAC94 MOV X20, X0
	0x031EAC98 BL 0x3351F5C
	0x031EAC9C STR X20, [X19 + 0x28]
	0x031EACA0 LDP X20, X19, [X31 + 0x10]
	0x031EACA4 LDP X30, X21, [X31], #0x20
	0x031EACA8 RET
	0x031EACAC STP X30, X21, [X31 - 0x20]!
	0x031EACB0 STP X20, X19, [X31 + 0x10]
	0x031EACB4 ADRP X20, 0x11F2000
	0x031EACB8 ADRP X21, 0xF36000
	0x031EACBC LDRB W8, [X20 + 0x174]
	0x031EACC0 LDR X21, [X21 + 0xD08]
	0x031EACC4 MOV X19, X1
	0x031EACC8 TBNZ X8, 0x0, 0x31EAD64
	0x031EACCC ADRP X0, 0xF36000
	0x031EACD0 LDR X0, [X0 + 0xD10]
	0x031EACD4 BL 0x1C16CF4
	0x031EACD8 ADRP X0, 0xF36000
	0x031EACDC LDR X0, [X0 + 0xD18]
	0x031EACE0 BL 0x1C16CF4
	0x031EACE4 ADRP X0, 0xF36000
	0x031EACE8 LDR X0, [X0 + 0xD20]
	0x031EACEC BL 0x1C16CF4
	0x031EACF0 ADRP X0, 0xF36000
	0x031EACF4 LDR X0, [X0 + 0xD28]
	0x031EACF8 BL 0x1C16CF4
	0x031EACFC ADRP X0, 0xF36000
	0x031EAD00 LDR X0, [X0 + 0xD30]
	0x031EAD04 BL 0x1C16CF4
	0x031EAD08 ADRP X0, 0xF36000
	0x031EAD0C LDR X0, [X0 + 0xD38]
	0x031EAD10 BL 0x1C16CF4
	0x031EAD14 ADRP X0, 0xF36000
	0x031EAD18 LDR X0, [X0 + 0xD40]
	0x031EAD1C BL 0x1C16CF4
	0x031EAD20 ADRP X0, 0xF36000
	0x031EAD24 LDR X0, [X0 + 0xD08]
	0x031EAD28 BL 0x1C16CF4
	0x031EAD2C ADRP X0, 0xF36000
	0x031EAD30 LDR X0, [X0 + 0xD48]
	0x031EAD34 BL 0x1C16CF4
	0x031EAD38 ADRP X0, 0xF36000
	0x031EAD3C LDR X0, [X0 + 0xD50]
	0x031EAD40 BL 0x1C16CF4
	0x031EAD44 ADRP X0, 0xF36000
	0x031EAD48 LDR X0, [X0 + 0xD58]
	0x031EAD4C BL 0x1C16CF4
	0x031EAD50 ADRP X0, 0xF36000
	0x031EAD54 LDR X0, [X0 + 0xD60]
	0x031EAD58 BL 0x1C16CF4
	0x031EAD5C MOVZ W8, 0x1
	0x031EAD60 STRB W8, [X20 + 0x174]
	0x031EAD64 LDR X1, [X21]
	0x031EAD68 MOV X0, X19
	0x031EAD6C MOV X2, X31
	0x031EAD70 BL 0x321BA08
	0x031EAD74 TBZ X0, 0x0, 0x31EAD84
	0x031EAD78 ADRP X8, 0xF36000
	0x031EAD7C LDR X8, [X8 + 0xD40]
	0x031EAD80 B 0x31EAE20
	0x031EAD84 ADRP X8, 0xF36000
	0x031EAD88 LDR X8, [X8 + 0xD38]
	0x031EAD8C MOV X0, X19
	0x031EAD90 MOV X2, X31
	0x031EAD94 LDR X1, [X8]
	0x031EAD98 BL 0x321BA08
	0x031EAD9C TBZ X0, 0x0, 0x31EADAC
	0x031EADA0 ADRP X8, 0xF36000
	0x031EADA4 LDR X8, [X8 + 0xD48]
	0x031EADA8 B 0x31EAE20
	0x031EADAC ADRP X8, 0xF36000
	0x031EADB0 LDR X8, [X8 + 0xD30]
	0x031EADB4 MOV X0, X19
	0x031EADB8 MOV X2, X31
	0x031EADBC LDR X1, [X8]
	0x031EADC0 BL 0x321BA08
	0x031EADC4 TBZ X0, 0x0, 0x31EADD4
	0x031EADC8 ADRP X8, 0xF36000
	0x031EADCC LDR X8, [X8 + 0xD50]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X1, X31
	006 Move X19, X0
	007 Call Object..ctor, X0
	008 Compare X20, 0
	009 JumpIfEqual {63}
	010 Move W8, [X20+16]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X0, [X20+32]
	013 Compare X0, 0
	014 JumpIfEqual {28}
	015 Move X8, [X0]
	016 Move X9, [X8+664]
	017 Move X1, [X8+672]
	018 NotImplemented "Instruction BLR not yet implemented."
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X0, [X20+32]
	021 Compare X0, 0
	022 JumpIfEqual {28}
	023 Move X8, [X0]
	024 Move X9, [X8+664]
	025 Move X1, [X8+672]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, X20
	029 Move W1, W31
	030 Call ASN1.get_Item, X0, X1
	031 Compare X0, 0
	032 JumpIfEqual {63}
	033 Move W8, [X0+16]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X0, X20
	036 Move W1, W31
	037 Call ASN1.get_Item, X0, X1
	038 Call ASN1Convert.ToOid, X0
	039 Move [X19+16], X0
	040 Move X0, [X20+32]
	041 Compare X0, 0
	042 JumpIfEqual {59}
	043 Move X8, [X0]
	044 Move X9, [X8+664]
	045 Move X1, [X8+672]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move W1, 1
	049 Move X0, X20
	050 Call ASN1.get_Item, X0, X1
	051 Compare X0, 0
	052 JumpIfEqual {63}
	053 Move W8, [X0+16]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W1, 1
	056 Move X0, X20
	057 Call ASN1.get_Item, X0, X1
	058 Move [X19+24], X0
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X30, [X31+32]
	062 Return 
	063 Call 0x1C17F20
	064 Move X0, 0xF12000
	065 Move X0, [X0+1400]
	066 Call 0x1C17D08
	067 Call 0x1C17F10
	068 Move X19, X0
	069 Move X0, 0xF37000
	070 Move X0, [X0+3152]
	071 Move X0, 0xF12000
	072 Move X0, [X0+1400]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X19, X0
	076 Move X0, 0xF37000
	077 Move X0, [X0+3160]
	078 Move X0, 0xF12000
	079 Move X0, [X0+1400]
	080 Call 0x1C17D08
	081 Call 0x1C17F10
	082 Move X19, X0
	083 Move X0, 0xF37000
	084 Move X0, [X0+3168]
	085 Call 0x1C17D08
	086 Move X1, X0
	087 Move X0, X19
	088 Move X2, X31
	089 Call ArgumentException..ctor, X0, X1
	090 Move X0, 0xF37000
	091 Move X0, [X0+3176]
	092 Call 0x1C17D08
	093 Move X1, X0
	094 Move X0, X19
	095 Call 0x1C17DEC

Method: Mono.Security.ASN1 get_ASN1()

Disassembly:
	0x031EADD0 B 0x31EAE20

ISIL:
No ISIL was generated
Method: Mono.Security.ASN1 get_Content()

Disassembly:
	0x031EAE80 LDR X0, [X0 + 0x28]
	0x031EAE84 RET

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_Content(Mono.Security.ASN1 value)

Disassembly:
	0x031EAE88 LDR X0, [X0 + 0x20]
	0x031EAE8C RET

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.String get_ContentType()

Disassembly:
	0x031EAE90 LDR X0, [X0 + 0x38]
	0x031EAE94 RET

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_ContentType(System.String value)

Disassembly:
	0x031EAE98 STR X30, [X31 - 0x40]!
	0x031EAE9C STP X24, X23, [X31 + 0x10]

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: Mono.Security.ASN1 GetASN1()

Disassembly:
	0x031EADD4 ADRP X8, 0xF36000
	0x031EADD8 LDR X8, [X8 + 0xD60]
	0x031EADDC MOV X0, X19
	0x031EADE0 MOV X2, X31
	0x031EADE4 LDR X1, [X8]
	0x031EADE8 BL 0x321BA08
	0x031EADEC TBZ X0, 0x0, 0x31EADFC
	0x031EADF0 ADRP X8, 0xF36000
	0x031EADF4 LDR X8, [X8 + 0xD20]
	0x031EADF8 B 0x31EAE20
	0x031EADFC ADRP X8, 0xF36000
	0x031EAE00 LDR X8, [X8 + 0xD10]
	0x031EAE04 MOV X0, X19
	0x031EAE08 MOV X2, X31
	0x031EAE0C LDR X1, [X8]
	0x031EAE10 BL 0x321BA08
	0x031EAE14 TBZ X0, 0x0, 0x31EAE30
	0x031EAE18 ADRP X8, 0xF36000
	0x031EAE1C LDR X8, [X8 + 0xD18]
	0x031EAE20 LDR X0, [X8]
	0x031EAE24 LDP X20, X19, [X31 + 0x10]
	0x031EAE28 LDP X30, X21, [X31], #0x20
	0x031EAE2C RET
	0x031EAE30 ADRP X8, 0xF36000
	0x031EAE34 LDR X8, [X8 + 0xD28]
	0x031EAE38 MOV X0, X19
	0x031EAE3C MOV X2, X31
	0x031EAE40 LDR X1, [X8]
	0x031EAE44 BL 0x321BA08
	0x031EAE48 ADRP X8, 0xF36000
	0x031EAE4C LDR X8, [X8 + 0xD58]
	0x031EAE50 ANDS W31, W0, 0x1
	0x031EAE54 LDR X8, [X8]
	0x031EAE58 CSEL X0, X8, X19, NE
	0x031EAE5C B 0x31EAE24
	0x031EAE60 STR X30, [X31 - 0x10]!
	0x031EAE64 LDR X8, [X0 + 0x38]
	0x031EAE68 STR X1, [X0 + 0x18]
	0x031EAE6C CBZ X8, 0x31EAE7C
	0x031EAE70 STR X1, [X8 + 0x18]
	0x031EAE74 LDR X30, [X31], #0x10
	0x031EAE78 RET
	0x031EAE7C BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11F3000
	006 Move X21, 0xF37000
	007 Move W8, [X20+368]
	008 Move X21, [X21+2968]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF37000
	015 Move X0, [X0+2968]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+368], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move W8, 48
	025 Move [X20+16], W8
	026 Move [X20+24], X31
	027 Move X0, [X19+16]
	028 Call ASN1Convert.FromOid, X0
	029 Move X1, X0
	030 Move X0, X20
	031 Call ASN1.Add, X0, X1
	032 Move X8, [X19+24]
	033 Compare X8, 0
	034 JumpIfEqual {46}
	035 Move X0, [X8+32]
	036 Compare X0, 0
	037 JumpIfEqual {46}
	038 Move X8, [X0]
	039 Move X9, [X8+664]
	040 Move X1, [X8+672]
	041 NotImplemented "Instruction BLR not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X1, [X19+24]
	044 Move X0, X20
	045 Call ASN1.Add, X0, X1
	046 Move X0, X20
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0

