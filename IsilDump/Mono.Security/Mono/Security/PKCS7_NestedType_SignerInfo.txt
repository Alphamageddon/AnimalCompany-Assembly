Type: Mono.Security.PKCS7/SignerInfo

Method: System.Void .ctor()

Disassembly:
	0x031EBC28 SUB W8, W31, W8
	0x031EBC2C ADDS W31, W8, W9
	0x031EBC30 B.EQ 0x31EBC80
	0x031EBC34 SXTW X9, W9
	0x031EBC38 ADD X10, X1, X9
	0x031EBC3C ADD X11, X2, X9
	0x031EBC40 LDRB W10, [X10 + 0x20]
	0x031EBC44 LDRB W11, [X11 + 0x20]
	0x031EBC48 ADD W12, W8, W9
	0x031EBC4C CMP W10, W11
	0x031EBC50 CSET W0, EQ
	0x031EBC54 ADDS W31, W12, 0x1
	0x031EBC58 B.EQ 0x31EBC78
	0x031EBC5C CMP W10, W11
	0x031EBC60 ADD W9, W9, 0x1
	0x031EBC64 B.EQ 0x31EBC2C
	0x031EBC68 B 0x31EBC78
	0x031EBC6C MOV W0, W31
	0x031EBC70 B 0x31EBC78
	0x031EBC74 MOVZ W0, 0x1
	0x031EBC78 LDR X30, [X31], #0x10
	0x031EBC7C RET
	0x031EBC80 BL 0x1C16F28
	0x031EBC84 BL 0x1C16F20
	0x031EBC88 SUB X31, X31, 0x80
	0x031EBC8C STP X29, X30, [X31 + 0x20]
	0x031EBC90 STP X28, X27, [X31 + 0x30]
	0x031EBC94 STP X26, X25, [X31 + 0x40]
	0x031EBC98 STP X24, X23, [X31 + 0x50]
	0x031EBC9C STP X22, X21, [X31 + 0x60]
	0x031EBCA0 STP X20, X19, [X31 + 0x70]
	0x031EBCA4 ADRP X19, 0x11F1000
	0x031EBCA8 LDRB W8, [X19 + 0x183]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11F2000
	006 Move X21, 0xF36000
	007 Move W8, [X20+373]
	008 Move X21, [X21+2976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF36000
	015 Move X0, [X0+2976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+373], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move W8, 1
	023 Move [X19+16], W8
	024 Move X0, [X21]
	025 Call 0x1C17F10
	026 Move X1, X31
	027 Move X20, X0
	028 Call ArrayList..ctor, X0
	029 Move [X19+32], X20
	030 Move X0, [X21]
	031 Call 0x1C17F10
	032 Move X1, X31
	033 Move X20, X0
	034 Call ArrayList..ctor, X0
	035 Move [X19+40], X20
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return 

Method: System.Void .ctor(Mono.Security.ASN1 asn1)

Disassembly:
	0x031EB8B8 LDR X30, [X31], #0x60
	0x031EB8BC RET
	0x031EB8C0 BL 0x1C16F20
	0x031EB8C4 ADRP X0, 0xF35000
	0x031EB8C8 LDR X0, [X0 + 0xD88]
	0x031EB8CC BL 0x1C16D08
	0x031EB8D0 MOV X1, X0
	0x031EB8D4 MOV X0, X23
	0x031EB8D8 MOV X2, X31
	0x031EB8DC BL 0x321BA08
	0x031EB8E0 TBZ X0, 0x0, 0x31EB918
	0x031EB8E4 ADRP X0, 0xF11000
	0x031EB8E8 LDR X0, [X0 + 0x758]
	0x031EB8EC BL 0x1C16D08
	0x031EB8F0 BL 0x1C16F10
	0x031EB8F4 MOV X19, X0
	0x031EB8F8 ADRP X0, 0xF35000
	0x031EB8FC LDR X0, [X0 + 0xD90]
	0x031EB900 BL 0x1C16D08
	0x031EB904 MOV X1, X0
	0x031EB908 MOV X0, X19
	0x031EB90C MOV X2, X31
	0x031EB910 BL 0x33802E4
	0x031EB914 B 0x31EB948
	0x031EB918 ADRP X0, 0xF10000
	0x031EB91C LDR X0, [X0 + 0x578]
	0x031EB920 BL 0x1C16D08
	0x031EB924 BL 0x1C16F10
	0x031EB928 MOV X19, X0
	0x031EB92C ADRP X0, 0xF35000
	0x031EB930 LDR X0, [X0 + 0xD98]
	0x031EB934 BL 0x1C16D08
	0x031EB938 MOV X1, X0
	0x031EB93C MOV X0, X19
	0x031EB940 MOV X2, X31
	0x031EB944 BL 0x3314A68
	0x031EB948 ADRP X0, 0xF35000
	0x031EB94C LDR X0, [X0 + 0xDA0]
	0x031EB950 BL 0x1C16D08
	0x031EB954 MOV X1, X0
	0x031EB958 MOV X0, X19
	0x031EB95C BL 0x1C16DEC
	0x031EB960 ADRP X0, 0xF10000
	0x031EB964 LDR X0, [X0 + 0x578]
	0x031EB968 BL 0x1C16D08
	0x031EB96C BL 0x1C16F10
	0x031EB970 MOV X19, X0
	0x031EB974 ADRP X0, 0xF35000
	0x031EB978 LDR X0, [X0 + 0xDA8]
	0x031EB97C B 0x31EB934
	0x031EB980 ADRP X0, 0xF10000
	0x031EB984 LDR X0, [X0 + 0x578]
	0x031EB988 BL 0x1C16D08
	0x031EB98C BL 0x1C16F10
	0x031EB990 MOV X19, X0
	0x031EB994 ADRP X0, 0xF35000
	0x031EB998 LDR X0, [X0 + 0xDB0]
	0x031EB99C B 0x31EB934
	0x031EB9A0 ADRP X0, 0xF10000
	0x031EB9A4 LDR X0, [X0 + 0x578]
	0x031EB9A8 BL 0x1C16D08
	0x031EB9AC BL 0x1C16F10
	0x031EB9B0 MOV X19, X0
	0x031EB9B4 ADRP X0, 0xF35000
	0x031EB9B8 LDR X0, [X0 + 0xDB8]
	0x031EB9BC B 0x31EB934
	0x031EB9C0 ADRP X0, 0xF10000
	0x031EB9C4 LDR X0, [X0 + 0x578]
	0x031EB9C8 BL 0x1C16D08
	0x031EB9CC BL 0x1C16F10
	0x031EB9D0 MOV X19, X0
	0x031EB9D4 ADRP X0, 0xF35000
	0x031EB9D8 LDR X0, [X0 + 0xDC0]
	0x031EB9DC B 0x31EB934
	0x031EB9E0 ADRP X0, 0xF10000
	0x031EB9E4 LDR X0, [X0 + 0x578]
	0x031EB9E8 BL 0x1C16D08
	0x031EB9EC BL 0x1C16F10
	0x031EB9F0 MOV X19, X0
	0x031EB9F4 ADRP X0, 0xF35000
	0x031EB9F8 LDR X0, [X0 + 0xDC8]
	0x031EB9FC B 0x31EB934
	0x031EBA00 ADRP X0, 0xF10000
	0x031EBA04 LDR X0, [X0 + 0x578]
	0x031EBA08 BL 0x1C16D08
	0x031EBA0C BL 0x1C16F10
	0x031EBA10 MOV X19, X0
	0x031EBA14 ADRP X0, 0xF35000
	0x031EBA18 LDR X0, [X0 + 0xDD0]
	0x031EBA1C B 0x31EB934
	0x031EBA20 ADRP X0, 0xF35000
	0x031EBA24 LDR X0, [X0 + 0xCE0]
	0x031EBA28 BL 0x1C16D08
	0x031EBA2C BL 0x1C16F10
	0x031EBA30 MOV X19, X0
	0x031EBA34 ADRP X0, 0xF35000
	0x031EBA38 LDR X0, [X0 + 0xDD8]
	0x031EBA3C BL 0x1C16D08
	0x031EBA40 MOV X1, X0
	0x031EBA44 MOV X0, X19
	0x031EBA48 MOV X2, X31
	0x031EBA4C BL 0x3252170
	0x031EBA50 B 0x31EB948
	0x031EBA54 ADRP X0, 0xF10000
	0x031EBA58 LDR X0, [X0 + 0x578]
	0x031EBA5C BL 0x1C16D08
	0x031EBA60 BL 0x1C16F10
	0x031EBA64 MOV X19, X0
	0x031EBA68 ADRP X0, 0xF35000
	0x031EBA6C LDR X0, [X0 + 0xDE0]
	0x031EBA70 B 0x31EB934
	0x031EBA74 STP X30, X21, [X31 - 0x20]!
	0x031EBA78 STP X20, X19, [X31 + 0x10]
	0x031EBA7C MOV X19, X2
	0x031EBA80 MOV X20, X1
	0x031EBA84 MOV X21, X0
	0x031EBA88 BL 0x31EB128
	0x031EBA8C MOV X0, X21
	0x031EBA90 MOV X1, X19
	0x031EBA94 BL 0x31EB234
	0x031EBA98 MOV X1, X20
	0x031EBA9C LDP X20, X19, [X31 + 0x10]
	0x031EBAA0 MOV X0, X21
	0x031EBAA4 LDP X30, X21, [X31], #0x20
	0x031EBAA8 B 0x31EB3F0
	0x031EBAAC STR X30, [X31 - 0x40]!
	0x031EBAB0 STP X24, X23, [X31 + 0x10]
	0x031EBAB4 STP X22, X21, [X31 + 0x20]
	0x031EBAB8 STP X20, X19, [X31 + 0x30]
	0x031EBABC ADRP X20, 0x11F1000
	0x031EBAC0 ADRP X24, 0xF35000
	0x031EBAC4 LDRB W8, [X20 + 0x185]
	0x031EBAC8 LDR X24, [X24 + 0xDE8]
	0x031EBACC MOV X19, X4
	0x031EBAD0 MOV W21, W3
	0x031EBAD4 MOV X22, X2
	0x031EBAD8 MOV X23, X1
	0x031EBADC TBNZ X8, 0x0, 0x31EBB0C
	0x031EBAE0 ADRP X0, 0xF35000
	0x031EBAE4 LDR X0, [X0 + 0xDE8]
	0x031EBAE8 BL 0x1C16CF4
	0x031EBAEC ADRP X0, 0xF35000
	0x031EBAF0 LDR X0, [X0 + 0xDF0]
	0x031EBAF4 BL 0x1C16CF4
	0x031EBAF8 ADRP X0, 0xF35000
	0x031EBAFC LDR X0, [X0 + 0xD40]
	0x031EBB00 BL 0x1C16CF4
	0x031EBB04 MOVZ W8, 0x1
	0x031EBB08 STRB W8, [X20 + 0x185]
	0x031EBB0C LDR X0, [X24]
	0x031EBB10 BL 0x1C16F10
	0x031EBB14 MOV X1, X31
	0x031EBB18 MOV X20, X0
	0x031EBB1C BL 0x33BDD8C
	0x031EBB20 CBZ X20, 0x31EBBEC
	0x031EBB24 ADRP X8, 0xF35000
	0x031EBB28 LDR X8, [X8 + 0xD40]
	0x031EBB2C MOV X0, X20
	0x031EBB30 MOV X1, X23
	0x031EBB34 LDR X8, [X8]
	0x031EBB38 STR X8, [X20 + 0x10]
	0x031EBB3C BL 0x31ED758
	0x031EBB40 MOV X0, X20
	0x031EBB44 MOV X1, X22
	0x031EBB48 BL 0x31ED814
	0x031EBB4C MOV X0, X31
	0x031EBB50 STR W21, [X20 + 0x18]
	0x031EBB54 BL 0x325462C
	0x031EBB58 CBZ X0, 0x31EBBF0
	0x031EBB5C ADRP X9, 0xF35000
	0x031EBB60 LDR X9, [X9 + 0xDF0]
	0x031EBB64 LDR X8, [X0]
	0x031EBB68 MOV X21, X0
	0x031EBB6C LDR X1, [X9]
	0x031EBB70 LDRB W10, [X8 + 0x130]
	0x031EBB74 LDRB W9, [X1 + 0x130]
	0x031EBB78 CMP W10, W9
	0x031EBB7C B.CC 0x31EBBE4
	0x031EBB80 LDR X8, [X8 + 0xC8]
	0x031EBB84 ADD X8, X8, X9, 0x3, LSL
	0x031EBB88 LDUR X8, [X8 - 0x8]
	0x031EBB8C CMP X8, X1
	0x031EBB90 B.NE 0x31EBBE4
	0x031EBB94 MOVZ W1, 0x14
	0x031EBB98 MOV X0, X20
	0x031EBB9C BL 0x31EF128
	0x031EBBA0 LDR X8, [X21]
	0x031EBBA4 MOV X1, X0
	0x031EBBA8 MOV X0, X21
	0x031EBBAC LDR X9, [X8 + 0x278]
	0x031EBBB0 LDR X2, [X8 + 0x280]
	0x031EBBB4 BLR X9
	0x031EBBB8 CBZ X19, 0x31EBBEC
	0x031EBBBC LDR W3, [X19 + 0x18]
	0x031EBBC0 MOV X0, X21
	0x031EBBC4 MOV X1, X19
	0x031EBBC8 LDP X20, X19, [X31 + 0x30]
	0x031EBBCC LDP X22, X21, [X31 + 0x20]
	0x031EBBD0 LDP X24, X23, [X31 + 0x10]
	0x031EBBD4 MOV W2, W31
	0x031EBBD8 MOV X4, X31
	0x031EBBDC LDR X30, [X31], #0x40
	0x031EBBE0 B 0x3251540
	0x031EBBE4 MOV X0, X21
	0x031EBBE8 BL 0x1C171E0
	0x031EBBEC BL 0x1C16F20
	0x031EBBF0 MOVZ W1, 0x14
	0x031EBBF4 MOV X0, X20
	0x031EBBF8 BL 0x31EF128
	0x031EBBFC BL 0x1C16F20
	0x031EBC00 STR X30, [X31 - 0x10]!
	0x031EBC04 CBZ X1, 0x31EBC84
	0x031EBC08 CBZ X2, 0x31EBC84
	0x031EBC0C LDR W8, [X1 + 0x18]
	0x031EBC10 LDR W9, [X2 + 0x18]
	0x031EBC14 CMP W8, W9
	0x031EBC18 B.NE 0x31EBC6C
	0x031EBC1C CMP W8, 0x1
	0x031EBC20 B.LT 0x31EBC74
	0x031EBC24 MOV W9, W31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x11F2000
	008 Move W8, [X21+374]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF36000
	016 Move X0, [X0+3320]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+374], W8
	020 Move X0, X19
	021 Call SignerInfo..ctor, X0
	022 Compare X20, 0
	023 JumpIfEqual {214}
	024 Move X0, X20
	025 Move W1, W31
	026 Call ASN1.get_Item, X0, X1
	027 Compare X0, 0
	028 JumpIfEqual {214}
	029 Move W8, [X0+16]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X20
	032 Move W1, W31
	033 Call ASN1.get_Item, X0, X1
	034 Compare X0, 0
	035 JumpIfEqual {214}
	036 Move X0, [X0+32]
	037 Compare X0, 0
	038 JumpIfEqual {215}
	039 Move X8, [X0]
	040 Move X9, [X8+664]
	041 Move X1, [X8+672]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, X20
	045 Move W1, W31
	046 Call ASN1.get_Item, X0, X1
	047 Compare X0, 0
	048 JumpIfEqual {214}
	049 Move W1, W31
	050 Call ASN1.get_Item, X0, X1
	051 Compare X0, 0
	052 JumpIfEqual {214}
	053 Move W8, [X0+16]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X0, X20
	056 Move W1, W31
	057 Call ASN1.get_Item, X0, X1
	058 Compare X0, 0
	059 JumpIfEqual {214}
	060 Move W1, W31
	061 Call ASN1.get_Item, X0, X1
	062 Compare X0, 0
	063 JumpIfEqual {214}
	064 Call ASN1.get_Value, X0
	065 Compare X0, 0
	066 JumpIfEqual {214}
	067 Move W8, [X0+24]
	068 Compare W8, 0
	069 JumpIfEqual {240}
	070 Move W8, [X0+32]
	071 Move X0, X20
	072 Move W1, W31
	073 Move [X19+16], W8
	074 Call ASN1.get_Item, X0, X1
	075 Compare X0, 0
	076 JumpIfEqual {214}
	077 Move W1, 1
	078 Call ASN1.get_Item, X0, X1
	079 Compare X0, 0
	080 JumpIfEqual {214}
	081 Move W8, [X0+16]
	082 Move X21, X0
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move W8, [X19+16]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X0, X21
	087 Call ASN1.get_Value, X0
	088 Move [X19+72], X0
	089 Move X22, 0xF36000
	090 Move X22, [X22+3320]
	091 Move X0, X21
	092 Move W1, W31
	093 Call ASN1.get_Item, X0, X1
	094 Move X8, [X22]
	095 Move X22, X0
	096 Move W9, [X8+224]
	097 Compare W9, 0
	098 JumpIfNotEqual {101}
	099 Move X0, X8
	100 Call 0x1C17DFC
	101 Move X0, X22
	102 Call X501.ToString, X0
	103 Move [X19+56], X0
	104 Move W1, 1
	105 Move X0, X21
	106 Call ASN1.get_Item, X0, X1
	107 Compare X0, 0
	108 JumpIfEqual {214}
	109 Call ASN1.get_Value, X0
	110 Move [X19+64], X0
	111 Move X0, X20
	112 Move W1, W31
	113 Call ASN1.get_Item, X0, X1
	114 Compare X0, 0
	115 JumpIfEqual {214}
	116 Move W1, 2
	117 Call ASN1.get_Item, X0, X1
	118 Compare X0, 0
	119 JumpIfEqual {214}
	120 Move W1, W31
	121 Call ASN1.get_Item, X0, X1
	122 Call ASN1Convert.ToOid, X0
	123 Move [X19+24], X0
	124 Move X0, X20
	125 Move W1, W31
	126 Call ASN1.get_Item, X0, X1
	127 Compare X0, 0
	128 JumpIfEqual {214}
	129 Move W1, 3
	130 Call ASN1.get_Item, X0, X1
	131 Compare X0, 0
	132 JumpIfEqual {214}
	133 Move W8, [X0+16]
	134 Move X21, X0
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move W22, W31
	137 Move X0, [X21+32]
	138 Compare X0, 0
	139 JumpIfEqual {144}
	140 Move X8, [X0]
	141 Move X9, [X8+664]
	142 Move X1, [X8+672]
	143 NotImplemented "Instruction BLR not yet implemented."
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move X23, [X19+32]
	146 Move X0, X21
	147 Move W1, W22
	148 Call ASN1.get_Item, X0, X1
	149 Compare X23, 0
	150 JumpIfEqual {214}
	151 Move X8, [X23]
	152 Move X1, X0
	153 Move X0, X23
	154 Move X9, [X8+776]
	155 Move X2, [X8+784]
	156 NotImplemented "Instruction BLR not yet implemented."
	157 Add W22, W22, 1
	158 Move W21, 4
	159 Move W21, 5
	160 Move X0, X20
	161 Move W1, W31
	162 Call ASN1.get_Item, X0, X1
	163 Compare X0, 0
	164 JumpIfEqual {214}
	165 Move W1, W21
	166 Call ASN1.get_Item, X0, X1
	167 Compare X0, 0
	168 JumpIfEqual {214}
	169 Move W8, [X0+16]
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Call ASN1.get_Value, X0
	172 Move [X19+48], X0
	173 Move X0, X20
	174 Move W1, W31
	175 Call ASN1.get_Item, X0, X1
	176 Compare X0, 0
	177 JumpIfEqual {214}
	178 Add W1, W21, 1
	179 Call ASN1.get_Item, X0, X1
	180 Compare X0, 0
	181 JumpIfEqual {207}
	182 Move W8, [X0+16]
	183 Move X20, X0
	184 NotImplemented "Instruction CMP not yet implemented."
	185 Move W21, W31
	186 Move X0, [X20+32]
	187 Compare X0, 0
	188 JumpIfEqual {193}
	189 Move X8, [X0]
	190 Move X9, [X8+664]
	191 Move X1, [X8+672]
	192 NotImplemented "Instruction BLR not yet implemented."
	193 NotImplemented "Instruction CMP not yet implemented."
	194 Move X22, [X19+40]
	195 Move X0, X20
	196 Move W1, W21
	197 Call ASN1.get_Item, X0, X1
	198 Compare X22, 0
	199 JumpIfEqual {214}
	200 Move X8, [X22]
	201 Move X1, X0
	202 Move X0, X22
	203 Move X9, [X8+776]
	204 Move X2, [X8+784]
	205 NotImplemented "Instruction BLR not yet implemented."
	206 Add W21, W21, 1
	207 Move X20, [X31+32]
	208 Move X19, [X31+40]
	209 Move X22, [X31+16]
	210 Move X21, [X31+24]
	211 Move X30, [X31+48]
	212 Move X23, [X31+56]
	213 Return 
	214 Call 0x1C17F20
	215 Move X0, 0xF11000
	216 Move X0, [X0+1400]
	217 Call 0x1C17D08
	218 Call 0x1C17F10
	219 Move X19, X0
	220 Move X0, 0xF36000
	221 Move X0, [X0+3272]
	222 Move X0, 0xF11000
	223 Move X0, [X0+1400]
	224 Call 0x1C17D08
	225 Call 0x1C17F10
	226 Move X19, X0
	227 Move X0, 0xF36000
	228 Move X0, [X0+3200]
	229 Call 0x1C17D08
	230 Move X1, X0
	231 Move X0, X19
	232 Move X2, X31
	233 Call ArgumentException..ctor, X0, X1
	234 Move X0, 0xF36000
	235 Move X0, [X0+3328]
	236 Call 0x1C17D08
	237 Move X1, X0
	238 Move X0, X19
	239 Call 0x1C17DEC
	240 Call 0x1C17F28

Method: System.String get_IssuerName()

Disassembly:
	0x031EBFD4 MOV X2, X31
	0x031EBFD8 LDR X1, [X8]

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Byte[] get_SerialNumber()

Disassembly:
	0x031EBFDC BL 0x321BA08
	0x031EBFE0 TBZ X0, 0x0, 0x31EC014
	0x031EBFE4 CBZ X22, 0x31EC21C
	0x031EBFE8 MOV X0, X22
	0x031EBFEC BL 0x31E7D00
	0x031EBFF0 LDR X8, [X25 + 0x20]
	0x031EBFF4 CBZ X8, 0x31EC21C
	0x031EBFF8 LDR X9, [X8]
	0x031EBFFC MOV X1, X0
	0x031EC000 MOV X0, X8
	0x031EC004 LDR X10, [X9 + 0x308]
	0x031EC008 LDR X2, [X9 + 0x310]
	0x031EC00C BLR X10
	0x031EC010 B 0x31EC030
	0x031EC014 ADRP X8, 0xF34000
	0x031EC018 LDR X8, [X8 + 0xE48]
	0x031EC01C MOV X0, X19
	0x031EC020 MOV X2, X31
	0x031EC024 LDR X1, [X8]
	0x031EC028 BL 0x321BA08
	0x031EC02C TBZ X0, 0x0, 0x31EC33C
	0x031EC030 LDR X0, [X21 + 0x20]
	0x031EC034 STP X19, X25, [X31 + 0x8]
	0x031EC038 STR X21, [X31 + 0x18]
	0x031EC03C CBZ X0, 0x31EC058
	0x031EC040 LDR X8, [X0]
	0x031EC044 LDR X9, [X8 + 0x298]
	0x031EC048 LDR X1, [X8 + 0x2A0]
	0x031EC04C BLR X9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11F2000
	005 Move W8, [X20+375]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF09000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+375], W8
	016 Move X0, [X19+64]
	017 Compare X0, 0
	018 JumpIfEqual {31}
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0xF08000
	024 Move X8, [X8+1560]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {35}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Move X0, X19
	036 Move X1, X20
	037 Call 0x1C181E0

Method: System.Collections.ArrayList get_AuthenticatedAttributes()

Disassembly:
	0x031EC050 CMP W0, 0x3
	0x031EC054 B.GE 0x31EC0C0

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.String get_HashName()

Disassembly:
	0x031EC058 ADRP X8, 0xF34000
	0x031EC05C LDR X8, [X8 + 0xE08]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_HashName(System.String value)

Disassembly:
	0x031EC060 LDR X9, [X31 + 0x10]
	0x031EC064 LDR X0, [X8]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.Byte[] get_Signature()

Disassembly:
	0x031EC068 LDR X20, [X9 + 0x38]
	0x031EC06C BL 0x1C16F10
	0x031EC070 MOV X1, X31
	0x031EC074 MOV X22, X0
	0x031EC078 BL 0x33BDD8C
	0x031EC07C LDR X9, [X31 + 0x8]
	0x031EC080 LDR X8, [X31 + 0x18]
	0x031EC084 STP X9, X8, [X22 + 0x10]
	0x031EC088 CBZ X20, 0x31EC21C
	0x031EC08C LDR X8, [X20]
	0x031EC090 MOV X0, X20
	0x031EC094 MOV X1, X22
	0x031EC098 LDP X20, X19, [X31 + 0x70]
	0x031EC09C LDR X3, [X8 + 0x308]
	0x031EC0A0 LDR X2, [X8 + 0x310]
	0x031EC0A4 LDP X22, X21, [X31 + 0x60]
	0x031EC0A8 LDP X24, X23, [X31 + 0x50]
	0x031EC0AC LDP X26, X25, [X31 + 0x40]
	0x031EC0B0 LDP X28, X27, [X31 + 0x30]
	0x031EC0B4 LDP X29, X30, [X31 + 0x20]
	0x031EC0B8 ADD X31, X31, 0x80
	0x031EC0BC BR X3
	0x031EC0C0 LDR X0, [X31 + 0x18]
	0x031EC0C4 MOVZ W1, 0x2
	0x031EC0C8 BL 0x31E8704
	0x031EC0CC CBZ X0, 0x31EC21C
	0x031EC0D0 LDRB W8, [X0 + 0x10]
	0x031EC0D4 MOV X22, X0
	0x031EC0D8 CMP W8, 0x31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11F1000
	005 Move W8, [X20+376]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF08000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+376], W8
	016 Move X0, [X19+48]
	017 Compare X0, 0
	018 JumpIfEqual {31}
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0xF08000
	024 Move X8, [X8+1560]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {35}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Move X0, X19
	036 Move X1, X20
	037 Call 0x1C181E0

Method: System.Collections.ArrayList get_UnauthenticatedAttributes()

Disassembly:
	0x031EC0DC B.NE 0x31EC2E8
	0x031EC0E0 ADRP X21, 0xF34000

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Byte get_Version()

Disassembly:
	0x031EC0E4 ADRP X19, 0xF34000
	0x031EC0E8 LDR X21, [X21 + 0xE10]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

