Type: Mono.Security.PKCS7/SignedData

Method: System.Void .ctor(Mono.Security.ASN1 asn1)

Disassembly:
	0x031EB1F0 LDP X20, X19, [X31 + 0x20]
	0x031EB1F4 LDP X22, X21, [X31 + 0x10]
	0x031EB1F8 LDR X30, [X31], #0x30
	0x031EB1FC RET
	0x031EB200 STR X30, [X31 - 0x20]!
	0x031EB204 STP X20, X19, [X31 + 0x10]
	0x031EB208 MOV X19, X1
	0x031EB20C MOV X20, X0
	0x031EB210 BL 0x31EB128
	0x031EB214 MOV X0, X20
	0x031EB218 MOV X1, X31
	0x031EB21C BL 0x31EB234
	0x031EB220 MOV X0, X20
	0x031EB224 MOV X1, X19
	0x031EB228 LDP X20, X19, [X31 + 0x10]
	0x031EB22C LDR X30, [X31], #0x20
	0x031EB230 B 0x31EB3F0
	0x031EB234 STR X30, [X31 - 0x40]!
	0x031EB238 STP X24, X23, [X31 + 0x10]
	0x031EB23C STP X22, X21, [X31 + 0x20]
	0x031EB240 STP X20, X19, [X31 + 0x30]
	0x031EB244 ADRP X21, 0x11F1000
	0x031EB248 LDRB W8, [X21 + 0x17B]
	0x031EB24C MOV X20, X1
	0x031EB250 MOV X19, X0
	0x031EB254 TBNZ X8, 0x0, 0x31EB278
	0x031EB258 ADRP X0, 0xF08000
	0x031EB25C LDR X0, [X0 + 0x618]
	0x031EB260 BL 0x1C16CF4
	0x031EB264 ADRP X0, 0xF35000
	0x031EB268 LDR X0, [X0 + 0xD68]
	0x031EB26C BL 0x1C16CF4
	0x031EB270 MOVZ W8, 0x1
	0x031EB274 STRB W8, [X21 + 0x17B]
	0x031EB278 LDR X0, [X19 + 0x10]
	0x031EB27C CBZ X0, 0x31EB290
	0x031EB280 LDR W2, [X0 + 0x18]
	0x031EB284 MOV W1, W31
	0x031EB288 MOV X3, X31
	0x031EB28C BL 0x339FA34
	0x031EB290 STR X31, [X19 + 0x10]
	0x031EB294 CBZ X20, 0x31EB334
	0x031EB298 LDR W21, [X20 + 0x10]
	0x031EB29C SUBS W22, W21, 0x1
	0x031EB2A0 B.LT 0x31EB31C
	0x031EB2A4 ADRP X23, 0xF35000
	0x031EB2A8 LDR X23, [X23 + 0xD68]
	0x031EB2AC LDR X0, [X23]
	0x031EB2B0 LDR W8, [X0 + 0xE0]
	0x031EB2B4 CBNZ W8, 0x31EB2BC
	0x031EB2B8 BL 0x1C16DFC
	0x031EB2BC ADRP X24, 0x11F1000
	0x031EB2C0 LDRB W8, [X24 + 0x205]
	0x031EB2C4 CBNZ W8, 0x31EB2DC
	0x031EB2C8 ADRP X0, 0xF35000
	0x031EB2CC LDR X0, [X0 + 0xD68]
	0x031EB2D0 BL 0x1C16CF4
	0x031EB2D4 MOVZ W8, 0x1
	0x031EB2D8 STRB W8, [X24 + 0x205]
	0x031EB2DC LDR X0, [X23]
	0x031EB2E0 LDR W8, [X0 + 0xE0]
	0x031EB2E4 CBNZ W8, 0x31EB2F0
	0x031EB2E8 BL 0x1C16DFC
	0x031EB2EC LDR X0, [X23]
	0x031EB2F0 LDR X8, [X0 + 0xB8]
	0x031EB2F4 LDR W8, [X8]
	0x031EB2F8 CMP W21, W8
	0x031EB2FC B.GE 0x31EB348
	0x031EB300 MOV X0, X20
	0x031EB304 MOV W1, W22
	0x031EB308 MOV X2, X31
	0x031EB30C BL 0x3222A1C
	0x031EB310 ANDS W31, W0, 0xFFFF
	0x031EB314 CSET W8, NE
	0x031EB318 B 0x31EB390
	0x031EB31C ADRP X8, 0xF08000
	0x031EB320 LDR X8, [X8 + 0x618]
	0x031EB324 MOVZ W1, 0x2
	0x031EB328 LDR X0, [X8]
	0x031EB32C BL 0x1C16D6C
	0x031EB330 STR X0, [X19 + 0x10]
	0x031EB334 LDP X20, X19, [X31 + 0x30]
	0x031EB338 LDP X22, X21, [X31 + 0x20]
	0x031EB33C LDP X24, X23, [X31 + 0x10]
	0x031EB340 LDR X30, [X31], #0x40
	0x031EB344 RET
	0x031EB348 LDR W8, [X0 + 0xE0]
	0x031EB34C CBNZ W8, 0x31EB354
	0x031EB350 BL 0x1C16DFC
	0x031EB354 LDRB W8, [X24 + 0x205]
	0x031EB358 CBNZ W8, 0x31EB370
	0x031EB35C ADRP X0, 0xF35000
	0x031EB360 LDR X0, [X0 + 0xD68]
	0x031EB364 BL 0x1C16CF4
	0x031EB368 MOVZ W8, 0x1
	0x031EB36C STRB W8, [X24 + 0x205]
	0x031EB370 LDR X0, [X23]
	0x031EB374 LDR W8, [X0 + 0xE0]
	0x031EB378 CBNZ W8, 0x31EB384
	0x031EB37C BL 0x1C16DFC
	0x031EB380 LDR X0, [X23]
	0x031EB384 LDR X8, [X0 + 0xB8]
	0x031EB388 LDR W21, [X8]
	0x031EB38C MOV W8, W31
	0x031EB390 ADRP X9, 0xF08000
	0x031EB394 LDR X9, [X9 + 0x618]
	0x031EB398 ADD W8, W21, W8
	0x031EB39C UBFM W1, W8, 0x1F, 0x1E
	0x031EB3A0 LDR X0, [X9]
	0x031EB3A4 BL 0x1C16D6C
	0x031EB3A8 STR X0, [X19 + 0x10]
	0x031EB3AC MOV X0, X31
	0x031EB3B0 BL 0x3242CD8
	0x031EB3B4 CBZ X0, 0x31EB3EC
	0x031EB3B8 LDR X8, [X0]
	0x031EB3BC LDR X4, [X19 + 0x10]
	0x031EB3C0 MOV X1, X20
	0x031EB3C4 MOV W3, W21
	0x031EB3C8 LDR X7, [X8 + 0x278]
	0x031EB3CC LDR X6, [X8 + 0x280]
	0x031EB3D0 LDP X20, X19, [X31 + 0x30]
	0x031EB3D4 LDP X22, X21, [X31 + 0x20]
	0x031EB3D8 LDP X24, X23, [X31 + 0x10]
	0x031EB3DC MOV W2, W31
	0x031EB3E0 MOV W5, W31
	0x031EB3E4 LDR X30, [X31], #0x40
	0x031EB3E8 BR X7
	0x031EB3EC BL 0x1C16F20
	0x031EB3F0 STR X30, [X31 - 0x60]!
	0x031EB3F4 STP X28, X27, [X31 + 0x10]
	0x031EB3F8 STP X26, X25, [X31 + 0x20]
	0x031EB3FC STP X24, X23, [X31 + 0x30]
	0x031EB400 STP X22, X21, [X31 + 0x40]
	0x031EB404 STP X20, X19, [X31 + 0x50]
	0x031EB408 ADRP X21, 0x11F1000
	0x031EB40C ADRP X25, 0xF35000
	0x031EB410 LDRB W8, [X21 + 0x17A]
	0x031EB414 LDR X25, [X25 + 0xB98]
	0x031EB418 MOV X20, X1
	0x031EB41C MOV X19, X0
	0x031EB420 TBNZ X8, 0x0, 0x31EB480
	0x031EB424 ADRP X0, 0xF35000
	0x031EB428 LDR X0, [X0 + 0xB98]
	0x031EB42C BL 0x1C16CF4
	0x031EB430 ADRP X0, 0xF08000
	0x031EB434 LDR X0, [X0 + 0x618]
	0x031EB438 BL 0x1C16CF4
	0x031EB43C ADRP X0, 0xF35000
	0x031EB440 LDR X0, [X0 + 0xC70]
	0x031EB444 BL 0x1C16CF4
	0x031EB448 ADRP X0, 0xF35000
	0x031EB44C LDR X0, [X0 + 0xD70]
	0x031EB450 BL 0x1C16CF4
	0x031EB454 ADRP X0, 0xF35000
	0x031EB458 LDR X0, [X0 + 0xD78]
	0x031EB45C BL 0x1C16CF4
	0x031EB460 ADRP X0, 0xF35000
	0x031EB464 LDR X0, [X0 + 0xD08]
	0x031EB468 BL 0x1C16CF4
	0x031EB46C ADRP X0, 0xF35000
	0x031EB470 LDR X0, [X0 + 0xD80]
	0x031EB474 BL 0x1C16CF4
	0x031EB478 MOVZ W8, 0x1
	0x031EB47C STRB W8, [X21 + 0x17A]
	0x031EB480 LDR X0, [X25]
	0x031EB484 BL 0x1C16F10
	0x031EB488 MOV X1, X20
	0x031EB48C MOV X21, X0
	0x031EB490 BL 0x31E7A44
	0x031EB494 CBZ X21, 0x31EB8C0
	0x031EB498 LDRB W8, [X21 + 0x10]
	0x031EB49C CMP W8, 0x30
	0x031EB4A0 B.NE 0x31EB960
	0x031EB4A4 MOV X0, X21
	0x031EB4A8 MOV W1, W31
	0x031EB4AC BL 0x31E8704
	0x031EB4B0 CBZ X0, 0x31EB8C0
	0x031EB4B4 LDRB W8, [X0 + 0x10]
	0x031EB4B8 CMP W8, 0x2
	0x031EB4BC B.NE 0x31EB980
	0x031EB4C0 ADRP X26, 0xF35000
	0x031EB4C4 LDR X26, [X26 + 0xC70]
	0x031EB4C8 MOVZ W1, 0x1
	0x031EB4CC MOV X0, X21
	0x031EB4D0 BL 0x31E8704
	0x031EB4D4 LDR X8, [X26]
	0x031EB4D8 MOV X22, X0
	0x031EB4DC MOV X0, X8
	0x031EB4E0 BL 0x1C16F10
	0x031EB4E4 MOV X1, X22
	0x031EB4E8 MOV X20, X0
	0x031EB4EC BL 0x31E9C54
	0x031EB4F0 CBZ X20, 0x31EB8C0
	0x031EB4F4 ADRP X27, 0xF35000
	0x031EB4F8 LDR X27, [X27 + 0xD80]
	0x031EB4FC LDR X0, [X20 + 0x10]
	0x031EB500 MOV X2, X31
	0x031EB504 LDR X1, [X27]
	0x031EB508 BL 0x3226EF8
	0x031EB50C TBNZ X0, 0x0, 0x31EB9A0
	0x031EB510 LDR X0, [X21 + 0x20]
	0x031EB514 CBZ X0, 0x31EB6C0
	0x031EB518 LDR X8, [X0]
	0x031EB51C LDR X9, [X8 + 0x298]
	0x031EB520 LDR X1, [X8 + 0x2A0]
	0x031EB524 BLR X9
	0x031EB528 CMP W0, 0x3
	0x031EB52C B.LT 0x31EB6C0
	0x031EB530 MOVZ W1, 0x2
	0x031EB534 MOV X0, X21
	0x031EB538 BL 0x31E8704
	0x031EB53C CBZ X0, 0x31EB8C0
	0x031EB540 LDRB W8, [X0 + 0x10]
	0x031EB544 MOV X22, X0
	0x031EB548 CMP W8, 0x30
	0x031EB54C B.NE 0x31EB9C0
	0x031EB550 MOV X0, X22
	0x031EB554 MOV W1, W31
	0x031EB558 BL 0x31E8704
	0x031EB55C CBZ X0, 0x31EB8C0
	0x031EB560 LDRB W8, [X0 + 0x10]
	0x031EB564 CMP W8, 0x30
	0x031EB568 CSEL X21, X0, X31, EQ
	0x031EB56C B.NE 0x31EB9C0
	0x031EB570 CBZ X21, 0x31EB8C0
	0x031EB574 MOV X0, X21
	0x031EB578 MOV W1, W31
	0x031EB57C BL 0x31E8704
	0x031EB580 CBZ X0, 0x31EB8C0
	0x031EB584 MOV W1, W31
	0x031EB588 BL 0x31E8704
	0x031EB58C BL 0x31E909C
	0x031EB590 ADRP X8, 0xF35000
	0x031EB594 LDR X8, [X8 + 0xD08]
	0x031EB598 MOV X2, X31
	0x031EB59C LDR X1, [X8]
	0x031EB5A0 BL 0x3226EF8
	0x031EB5A4 TBNZ X0, 0x0, 0x31EB9E0
	0x031EB5A8 MOVZ W1, 0x1
	0x031EB5AC MOV X0, X21
	0x031EB5B0 BL 0x31E8704
	0x031EB5B4 CBZ X0, 0x31EB8C0
	0x031EB5B8 BL 0x31E7D00
	0x031EB5BC MOV X21, X0
	0x031EB5C0 MOVZ W1, 0x1
	0x031EB5C4 MOV X0, X22
	0x031EB5C8 BL 0x31E8704
	0x031EB5CC CBZ X0, 0x31EB8C0
	0x031EB5D0 LDRB W8, [X0 + 0x10]
	0x031EB5D4 MOV X23, X0
	0x031EB5D8 CMP W8, 0x4
	0x031EB5DC B.NE 0x31EBA00
	0x031EB5E0 MOVZ W8, 0x1
	0x031EB5E4 STR W8, [X19 + 0x34]
	0x031EB5E8 LDR X0, [X22 + 0x20]
	0x031EB5EC CBZ X0, 0x31EB62C
	0x031EB5F0 LDR X8, [X0]
	0x031EB5F4 LDR X9, [X8 + 0x298]
	0x031EB5F8 LDR X1, [X8 + 0x2A0]
	0x031EB5FC BLR X9
	0x031EB600 CMP W0, 0x3
	0x031EB604 B.LT 0x31EB62C
	0x031EB608 MOVZ W1, 0x2
	0x031EB60C MOV X0, X22
	0x031EB610 BL 0x31E8704
	0x031EB614 CBZ X0, 0x31EB8C0
	0x031EB618 LDRB W8, [X0 + 0x10]
	0x031EB61C CMP W8, 0x2
	0x031EB620 B.NE 0x31EBA54
	0x031EB624 BL 0x31E8F8C
	0x031EB628 STR W0, [X19 + 0x34]
	0x031EB62C LDR X0, [X20 + 0x18]
	0x031EB630 CBZ X0, 0x31EB8C0
	0x031EB634 MOV W1, W31
	0x031EB638 BL 0x31E8704
	0x031EB63C CBZ X0, 0x31EB8C0
	0x031EB640 BL 0x31E7D00
	0x031EB644 LDR X24, [X19 + 0x10]
	0x031EB648 MOV X22, X0
	0x031EB64C MOV X0, X23
	0x031EB650 BL 0x31E7D00
	0x031EB654 LDR W3, [X19 + 0x34]
	0x031EB658 MOV X1, X24
	0x031EB65C MOV X2, X0
	0x031EB660 MOV X4, X22
	0x031EB664 BL 0x31EBAAC
	0x031EB668 MOV X1, X21
	0x031EB66C MOV X2, X0
	0x031EB670 BL 0x31EBC00
	0x031EB674 TBNZ X0, 0x0, 0x31EB6C0
	0x031EB678 ADRP X8, 0xF08000
	0x031EB67C LDR X8, [X8 + 0x618]
	0x031EB680 MOVZ W1, 0x2
	0x031EB684 LDR X0, [X8]
	0x031EB688 BL 0x1C16D6C
	0x031EB68C MOV X24, X0
	0x031EB690 MOV X0, X23
	0x031EB694 BL 0x31E7D00
	0x031EB698 LDR W3, [X19 + 0x34]
	0x031EB69C MOV X1, X24
	0x031EB6A0 MOV X2, X0
	0x031EB6A4 MOV X4, X22
	0x031EB6A8 BL 0x31EBAAC
	0x031EB6AC MOV X1, X21
	0x031EB6B0 MOV X2, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x11F2000
	010 Move W8, [X21+371]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF36000
	018 Move X0, [X0+2976]
	019 Call 0x1C17CF4
	020 Move X0, 0xF36000
	021 Move X0, [X0+3184]
	022 Call 0x1C17CF4
	023 Move X0, 0xF36000
	024 Move X0, [X0+3248]
	025 Call 0x1C17CF4
	026 Move X0, 0xF36000
	027 Move X0, [X0+3256]
	028 Call 0x1C17CF4
	029 Move X0, 0xF36000
	030 Move X0, [X0+3264]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+371], W8
	034 Move X0, X19
	035 Move X1, X31
	036 Call Object..ctor, X0
	037 Compare X20, 0
	038 JumpIfEqual {250}
	039 Move X0, X20
	040 Move W1, W31
	041 Call ASN1.get_Item, X0, X1
	042 Compare X0, 0
	043 JumpIfEqual {250}
	044 Move W8, [X0+16]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X0, X20
	047 Move W1, W31
	048 Call ASN1.get_Item, X0, X1
	049 Compare X0, 0
	050 JumpIfEqual {250}
	051 Move X0, [X0+32]
	052 Compare X0, 0
	053 JumpIfEqual {320}
	054 Move X8, [X0]
	055 Move X9, [X8+664]
	056 Move X1, [X8+672]
	057 NotImplemented "Instruction BLR not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X0, X20
	060 Move W1, W31
	061 Call ASN1.get_Item, X0, X1
	062 Compare X0, 0
	063 JumpIfEqual {250}
	064 Move W1, W31
	065 Call ASN1.get_Item, X0, X1
	066 Compare X0, 0
	067 JumpIfEqual {250}
	068 Move W8, [X0+16]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X0, X20
	071 Move W1, W31
	072 Call ASN1.get_Item, X0, X1
	073 Compare X0, 0
	074 JumpIfEqual {250}
	075 Move W1, W31
	076 Call ASN1.get_Item, X0, X1
	077 Compare X0, 0
	078 JumpIfEqual {250}
	079 Call ASN1.get_Value, X0
	080 Compare X0, 0
	081 JumpIfEqual {250}
	082 Move W8, [X0+24]
	083 Compare W8, 0
	084 JumpIfEqual {345}
	085 Move W8, [X0+32]
	086 Move X0, X20
	087 Move W1, W31
	088 Move [X19+16], W8
	089 Call ASN1.get_Item, X0, X1
	090 Compare X0, 0
	091 JumpIfEqual {250}
	092 Move X21, 0xF36000
	093 Move X23, 0xF36000
	094 Move X21, [X21+3184]
	095 Move X23, [X23+3256]
	096 Move W1, 2
	097 Call ASN1.get_Item, X0, X1
	098 Move X8, [X21]
	099 Move X21, X0
	100 Move X0, X8
	101 Call 0x1C17F10
	102 Move X1, X21
	103 Move X22, X0
	104 Call ContentInfo..ctor, X0, X1
	105 Move [X19+32], X22
	106 Move X0, [X23]
	107 Call 0x1C17F10
	108 Move X1, X31
	109 Move X21, X0
	110 Call CollectionBase..ctor, X0
	111 Move X0, X20
	112 Move W1, W31
	113 Move [X19+40], X21
	114 Call ASN1.get_Item, X0, X1
	115 Compare X0, 0
	116 JumpIfEqual {250}
	117 Move W1, 3
	118 Call ASN1.get_Item, X0, X1
	119 Compare X0, 0
	120 JumpIfEqual {250}
	121 Move W8, [X0+16]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move X0, X20
	124 Move W1, W31
	125 Call ASN1.get_Item, X0, X1
	126 Compare X0, 0
	127 JumpIfEqual {250}
	128 Move X25, 0xF36000
	129 Move X25, [X25+3264]
	130 Move W21, W31
	131 Move W1, 3
	132 Call ASN1.get_Item, X0, X1
	133 Compare X0, 0
	134 JumpIfEqual {250}
	135 Move X0, [X0+32]
	136 Compare X0, 0
	137 JumpIfEqual {142}
	138 Move X8, [X0]
	139 Move X9, [X8+664]
	140 Move X1, [X8+672]
	141 NotImplemented "Instruction BLR not yet implemented."
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move X22, [X19+40]
	144 Move X0, X20
	145 Move W1, W31
	146 Call ASN1.get_Item, X0, X1
	147 Compare X0, 0
	148 JumpIfEqual {250}
	149 Move W1, 3
	150 Call ASN1.get_Item, X0, X1
	151 Compare X0, 0
	152 JumpIfEqual {250}
	153 Move W1, W21
	154 Call ASN1.get_Item, X0, X1
	155 Compare X0, 0
	156 JumpIfEqual {250}
	157 Move X8, [X0]
	158 Move X9, [X8+376]
	159 Move X1, [X8+384]
	160 NotImplemented "Instruction BLR not yet implemented."
	161 Move X8, [X25]
	162 Move X24, X0
	163 Move X0, X8
	164 Call 0x1C17F10
	165 Move X1, X24
	166 Move X23, X0
	167 Call X509Certificate..ctor, X0, X1
	168 Compare X22, 0
	169 JumpIfEqual {250}
	170 Move X0, X22
	171 Move X1, X23
	172 Call X509CertificateCollection.Add, X0, X1
	173 Move X0, X20
	174 Move W1, W31
	175 Add W21, W21, 1
	176 Call ASN1.get_Item, X0, X1
	177 Compare X0, 0
	178 JumpIfNotEqual {131}
	179 Move W21, 3
	180 Move W21, 4
	181 Move X8, 0xF36000
	182 Move X8, [X8+2976]
	183 Move X0, [X8]
	184 Call 0x1C17F10
	185 Move X1, X31
	186 Move X22, X0
	187 Call ArrayList..ctor, X0
	188 Move X0, X20
	189 Move W1, W31
	190 Move [X19+48], X22
	191 Call ASN1.get_Item, X0, X1
	192 Compare X0, 0
	193 JumpIfEqual {250}
	194 Move W1, W21
	195 Call ASN1.get_Item, X0, X1
	196 Compare X0, 0
	197 JumpIfEqual {250}
	198 Move W8, [X0+16]
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Move X0, X20
	201 Move W1, W31
	202 Call ASN1.get_Item, X0, X1
	203 Compare X0, 0
	204 JumpIfEqual {250}
	205 Move W22, W31
	206 Move W1, W21
	207 Call ASN1.get_Item, X0, X1
	208 Compare X0, 0
	209 JumpIfEqual {250}
	210 Move X0, [X0+32]
	211 Compare X0, 0
	212 JumpIfEqual {217}
	213 Move X8, [X0]
	214 Move X9, [X8+664]
	215 Move X1, [X8+672]
	216 NotImplemented "Instruction BLR not yet implemented."
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Move X23, [X19+48]
	219 Move X0, X20
	220 Move W1, W31
	221 Call ASN1.get_Item, X0, X1
	222 Compare X0, 0
	223 JumpIfEqual {250}
	224 Move W1, W21
	225 Call ASN1.get_Item, X0, X1
	226 Compare X0, 0
	227 JumpIfEqual {250}
	228 Move W1, W22
	229 Call ASN1.get_Item, X0, X1
	230 Compare X0, 0
	231 JumpIfEqual {250}
	232 Move X8, [X0]
	233 Move X9, [X8+376]
	234 Move X1, [X8+384]
	235 NotImplemented "Instruction BLR not yet implemented."
	236 Compare X23, 0
	237 JumpIfEqual {250}
	238 Move X8, [X23]
	239 Move X1, X0
	240 Move X0, X23
	241 Move X9, [X8+776]
	242 Move X2, [X8+784]
	243 NotImplemented "Instruction BLR not yet implemented."
	244 Move X0, X20
	245 Move W1, W31
	246 Add W22, W22, 1
	247 Call ASN1.get_Item, X0, X1
	248 Compare X0, 0
	249 JumpIfNotEqual {206}
	250 Call 0x1C17F20
	251 Add W21, W21, 1
	252 Move X0, X20
	253 Move W1, W31
	254 Call ASN1.get_Item, X0, X1
	255 Compare X0, 0
	256 JumpIfEqual {250}
	257 Move W1, W21
	258 Call ASN1.get_Item, X0, X1
	259 Compare X0, 0
	260 JumpIfEqual {250}
	261 Move X22, 0xF36000
	262 Move X0, [X0+32]
	263 Move X22, [X22+3248]
	264 Compare X0, 0
	265 JumpIfEqual {285}
	266 Move X8, [X0]
	267 Move X9, [X8+664]
	268 Move X1, [X8+672]
	269 NotImplemented "Instruction BLR not yet implemented."
	270 NotImplemented "Instruction CMP not yet implemented."
	271 Move X0, X20
	272 Move W1, W31
	273 Call ASN1.get_Item, X0, X1
	274 Compare X0, 0
	275 JumpIfEqual {250}
	276 Move W1, W21
	277 Call ASN1.get_Item, X0, X1
	278 Move X8, [X22]
	279 Move X21, X0
	280 Move X0, X8
	281 Call 0x1C17F10
	282 Move X1, X21
	283 Move X20, X0
	284 Call SignerInfo..ctor, X0, X1
	285 Move X0, [X22]
	286 Call 0x1C17F10
	287 Move X20, X0
	288 Call SignerInfo..ctor, X0
	289 Move [X19+56], X20
	290 Compare X20, 0
	291 JumpIfEqual {250}
	292 Move X1, [X20+24]
	293 Compare X1, 0
	294 JumpIfEqual {301}
	295 Call SignedData.OidToName, X0, X1
	296 Move X20, [X19+56]
	297 Move [X19+24], X0
	298 Compare X20, 0
	299 JumpIfEqual {250}
	300 Move [X20+24], X0
	301 Move X0, [X20+32]
	302 Compare X0, 0
	303 JumpIfEqual {250}
	304 Move X8, [X0]
	305 Move X9, [X8+664]
	306 Move X1, [X8+672]
	307 NotImplemented "Instruction BLR not yet implemented."
	308 NotImplemented "Instruction CMP not yet implemented."
	309 NotImplemented "Instruction CSET not yet implemented."
	310 Move [X19+64], W8
	311 Move X20, [X31+48]
	312 Move X19, [X31+56]
	313 Move X22, [X31+32]
	314 Move X21, [X31+40]
	315 Move X24, [X31+16]
	316 Move X23, [X31+24]
	317 Move X30, [X31+64]
	318 Move X25, [X31+72]
	319 Return 
	320 Move X0, 0xF11000
	321 Move X0, [X0+1400]
	322 Call 0x1C17D08
	323 Call 0x1C17F10
	324 Move X19, X0
	325 Move X0, 0xF36000
	326 Move X0, [X0+3272]
	327 Move X0, 0xF11000
	328 Move X0, [X0+1400]
	329 Call 0x1C17D08
	330 Call 0x1C17F10
	331 Move X19, X0
	332 Move X0, 0xF36000
	333 Move X0, [X0+3200]
	334 Call 0x1C17D08
	335 Move X1, X0
	336 Move X0, X19
	337 Move X2, X31
	338 Call ArgumentException..ctor, X0, X1
	339 Move X0, 0xF36000
	340 Move X0, [X0+3280]
	341 Call 0x1C17D08
	342 Move X1, X0
	343 Move X0, X19
	344 Call 0x1C17DEC
	345 Call 0x1C17F28

Method: Mono.Security.X509.X509CertificateCollection get_Certificates()

Disassembly:
	0x031EBE80 MOV X1, X31
	0x031EBE84 BL 0x32011B4

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: Mono.Security.PKCS7/ContentInfo get_ContentInfo()

Disassembly:
	0x031EBE88 MOV X4, X0
	0x031EBE8C MOV X0, X25

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_HashName(System.String value)

Disassembly:
	0x031EBE60 CBZ X20, 0x31EC21C
	0x031EBE64 LDR X22, [X20 + 0x10]
	0x031EBE68 MOV X0, X20
	0x031EBE6C MOV X1, X31
	0x031EBE70 BL 0x3201228
	0x031EBE74 LDR W23, [X20 + 0x20]
	0x031EBE78 MOV X24, X0
	0x031EBE7C MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+56]
	003 Move [X0+24], X1
	004 Compare X8, 0
	005 JumpIfEqual {9}
	006 Move [X8+24], X1
	007 Move X30, [X31+16]
	008 Return 
	009 Call 0x1C17F20

Method: Mono.Security.PKCS7/SignerInfo get_SignerInfo()

Disassembly:
	0x031EBE90 MOV X1, X22
	0x031EBE94 MOV X2, X24

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.String OidToName(System.String oid)

Disassembly:
	0x031EBCAC MOV X21, X1
	0x031EBCB0 MOV X25, X0
	0x031EBCB4 TBNZ X8, 0x0, 0x31EBD68
	0x031EBCB8 ADRP X0, 0xF35000
	0x031EBCBC LDR X0, [X0 + 0xC70]
	0x031EBCC0 BL 0x1C16CF4
	0x031EBCC4 ADRP X0, 0xF35000
	0x031EBCC8 LDR X0, [X0 + 0xDF8]
	0x031EBCCC BL 0x1C16CF4
	0x031EBCD0 ADRP X0, 0xF35000
	0x031EBCD4 LDR X0, [X0 + 0xE00]
	0x031EBCD8 BL 0x1C16CF4
	0x031EBCDC ADRP X0, 0xF35000
	0x031EBCE0 LDR X0, [X0 + 0xE08]
	0x031EBCE4 BL 0x1C16CF4
	0x031EBCE8 ADRP X0, 0xF35000
	0x031EBCEC LDR X0, [X0 + 0xCC0]
	0x031EBCF0 BL 0x1C16CF4
	0x031EBCF4 ADRP X0, 0xF35000
	0x031EBCF8 LDR X0, [X0 + 0xE10]
	0x031EBCFC BL 0x1C16CF4
	0x031EBD00 ADRP X0, 0xF35000
	0x031EBD04 LDR X0, [X0 + 0xE18]
	0x031EBD08 BL 0x1C16CF4
	0x031EBD0C ADRP X0, 0xF35000
	0x031EBD10 LDR X0, [X0 + 0xE20]
	0x031EBD14 BL 0x1C16CF4
	0x031EBD18 ADRP X0, 0xF35000
	0x031EBD1C LDR X0, [X0 + 0xE28]
	0x031EBD20 BL 0x1C16CF4
	0x031EBD24 ADRP X0, 0xF35000
	0x031EBD28 LDR X0, [X0 + 0xE30]
	0x031EBD2C BL 0x1C16CF4
	0x031EBD30 ADRP X0, 0xF35000
	0x031EBD34 LDR X0, [X0 + 0xE38]
	0x031EBD38 BL 0x1C16CF4
	0x031EBD3C ADRP X0, 0xF35000
	0x031EBD40 LDR X0, [X0 + 0xE40]
	0x031EBD44 BL 0x1C16CF4
	0x031EBD48 ADRP X0, 0xF35000
	0x031EBD4C LDR X0, [X0 + 0xE48]
	0x031EBD50 BL 0x1C16CF4
	0x031EBD54 ADRP X0, 0xF35000
	0x031EBD58 LDR X0, [X0 + 0xE50]
	0x031EBD5C BL 0x1C16CF4
	0x031EBD60 MOVZ W8, 0x1
	0x031EBD64 STRB W8, [X19 + 0x183]
	0x031EBD68 CBZ X21, 0x31EC21C
	0x031EBD6C LDRB W8, [X21 + 0x10]
	0x031EBD70 CMP W8, 0x30
	0x031EBD74 B.NE 0x31EC2A8
	0x031EBD78 MOV X0, X21
	0x031EBD7C MOV W1, W31
	0x031EBD80 BL 0x31E8704
	0x031EBD84 CBZ X0, 0x31EC21C
	0x031EBD88 LDRB W8, [X0 + 0x10]
	0x031EBD8C MOV X20, X0
	0x031EBD90 CMP W8, 0x6
	0x031EBD94 B.NE 0x31EC2C8
	0x031EBD98 ADRP X19, 0xF35000
	0x031EBD9C LDR X19, [X19 + 0xE18]
	0x031EBDA0 MOVZ W1, 0x1
	0x031EBDA4 MOV X0, X21
	0x031EBDA8 BL 0x31E8704
	0x031EBDAC MOV X22, X0
	0x031EBDB0 MOV X0, X20
	0x031EBDB4 BL 0x31E909C
	0x031EBDB8 LDR X1, [X19]
	0x031EBDBC MOV X2, X31
	0x031EBDC0 MOV X19, X0
	0x031EBDC4 BL 0x321BA08
	0x031EBDC8 TBZ X0, 0x0, 0x31EBE10
	0x031EBDCC CBZ X22, 0x31EC21C
	0x031EBDD0 MOV X0, X22
	0x031EBDD4 BL 0x31E7D00
	0x031EBDD8 ADRP X8, 0xF35000
	0x031EBDDC LDR X8, [X8 + 0xE00]
	0x031EBDE0 MOV X20, X0
	0x031EBDE4 LDR X8, [X8]
	0x031EBDE8 MOV X0, X8
	0x031EBDEC BL 0x1C16F10
	0x031EBDF0 MOV X1, X20
	0x031EBDF4 MOV X2, X31
	0x031EBDF8 MOV X22, X0
	0x031EBDFC BL 0x3200240
	0x031EBE00 MOV X0, X25
	0x031EBE04 MOV X1, X22
	0x031EBE08 BL 0x31EE2F4
	0x031EBE0C B 0x31EC030
	0x031EBE10 ADRP X8, 0xF35000
	0x031EBE14 LDR X8, [X8 + 0xE30]
	0x031EBE18 MOV X0, X19
	0x031EBE1C MOV X2, X31
	0x031EBE20 LDR X1, [X8]
	0x031EBE24 BL 0x321BA08
	0x031EBE28 TBZ X0, 0x0, 0x31EBEF0
	0x031EBE2C CBZ X22, 0x31EC21C
	0x031EBE30 MOV X0, X22
	0x031EBE34 BL 0x31E7D00
	0x031EBE38 ADRP X8, 0xF35000
	0x031EBE3C LDR X8, [X8 + 0xDF8]
	0x031EBE40 MOV X22, X0
	0x031EBE44 LDR X8, [X8]
	0x031EBE48 MOV X0, X8
	0x031EBE4C BL 0x1C16F10
	0x031EBE50 MOV X1, X22
	0x031EBE54 MOV X2, X31
	0x031EBE58 MOV X20, X0
	0x031EBE5C BL 0x3200ED4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11F2000
	006 Move X21, 0xF36000
	007 Move W8, [X20+372]
	008 Move X21, [X21+3336]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {52}
	014 Move X0, 0xF36000
	015 Move X0, [X0+3344]
	016 Call 0x1C17CF4
	017 Move X0, 0xF36000
	018 Move X0, [X0+3352]
	019 Call 0x1C17CF4
	020 Move X0, 0xF36000
	021 Move X0, [X0+3360]
	022 Call 0x1C17CF4
	023 Move X0, 0xF36000
	024 Move X0, [X0+3368]
	025 Call 0x1C17CF4
	026 Move X0, 0xF36000
	027 Move X0, [X0+3376]
	028 Call 0x1C17CF4
	029 Move X0, 0xF36000
	030 Move X0, [X0+3384]
	031 Call 0x1C17CF4
	032 Move X0, 0xF36000
	033 Move X0, [X0+3392]
	034 Call 0x1C17CF4
	035 Move X0, 0xF36000
	036 Move X0, [X0+3336]
	037 Call 0x1C17CF4
	038 Move X0, 0xF36000
	039 Move X0, [X0+3400]
	040 Call 0x1C17CF4
	041 Move X0, 0xF36000
	042 Move X0, [X0+3408]
	043 Call 0x1C17CF4
	044 Move X0, 0xF36000
	045 Move X0, [X0+3416]
	046 Call 0x1C17CF4
	047 Move X0, 0xF36000
	048 Move X0, [X0+3424]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X20+372], W8
	052 Move X1, [X21]
	053 Move X0, X19
	054 Move X2, X31
	055 Call String.op_Equality, X0, X1
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {62}
	060 Move X8, 0xF36000
	061 Move X8, [X8+3392]
	062 Move X8, 0xF36000
	063 Move X8, [X8+3384]
	064 Move X0, X19
	065 Move X2, X31
	066 Move X1, [X8]
	067 Call String.op_Equality, X0, X1
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {74}
	072 Move X8, 0xF36000
	073 Move X8, [X8+3400]
	074 Move X8, 0xF36000
	075 Move X8, [X8+3376]
	076 Move X0, X19
	077 Move X2, X31
	078 Move X1, [X8]
	079 Call String.op_Equality, X0, X1
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {86}
	084 Move X8, 0xF36000
	085 Move X8, [X8+3408]
	086 Move X8, 0xF36000
	087 Move X8, [X8+3424]
	088 Move X0, X19
	089 Move X2, X31
	090 Move X1, [X8]
	091 Call String.op_Equality, X0, X1
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {98}
	096 Move X8, 0xF36000
	097 Move X8, [X8+3360]
	098 Move X8, 0xF36000
	099 Move X8, [X8+3344]
	100 Move X0, X19
	101 Move X2, X31
	102 Move X1, [X8]
	103 Call String.op_Equality, X0, X1
	104 Move TEMP, X0
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfNotEqual {116}
	108 Move X8, 0xF36000
	109 Move X8, [X8+3352]
	110 Move X0, [X8]
	111 Move X20, [X31+16]
	112 Move X19, [X31+24]
	113 Move X30, [X31+32]
	114 Move X21, [X31+40]
	115 Return X0
	116 Move X8, 0xF36000
	117 Move X8, [X8+3368]
	118 Move X0, X19
	119 Move X2, X31
	120 Move X1, [X8]
	121 Call String.op_Equality, X0, X1
	122 Move X8, 0xF36000
	123 Move X8, [X8+3416]
	124 And W31, W0, 1
	125 Move X8, [X8]
	126 NotImplemented "Instruction CSEL not yet implemented."

