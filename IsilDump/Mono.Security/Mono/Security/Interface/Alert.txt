Type: Mono.Security.Interface.Alert

Method: Mono.Security.Interface.AlertLevel get_Level()

Disassembly:
	0x031FE244 CMP W20, 0x0
	0x031FE248 B.LE 0x31FE274

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: Mono.Security.Interface.AlertDescription get_Description()

Disassembly:
	0x031FE24C MOV W1, W20
	0x031FE250 BL 0x31FDDD0

ISIL:
	001 Move W0, [X0+17]
	002 Return X0

Method: System.Void .ctor(Mono.Security.Interface.AlertDescription description)

Disassembly:
	0x031FE254 LDR X8, [X19]
	0x031FE258 MOV X1, X0
	0x031FE25C MOV X0, X19
	0x031FE260 MOV W2, W31
	0x031FE264 LDR X9, [X8 + 0x238]
	0x031FE268 LDR X4, [X8 + 0x240]
	0x031FE26C MOV W3, W20
	0x031FE270 BLR X9
	0x031FE274 LDR X8, [X19]
	0x031FE278 LDR X1, [X19 + 0x30]
	0x031FE27C MOVZ W3, 0x10
	0x031FE280 MOV X0, X19
	0x031FE284 LDR X9, [X8 + 0x238]
	0x031FE288 LDR X4, [X8 + 0x240]
	0x031FE28C MOV W2, W31
	0x031FE290 BLR X9
	0x031FE294 LDR X0, [X19 + 0x28]
	0x031FE298 CBZ X0, 0x31FE2F8
	0x031FE29C MOV X1, X31
	0x031FE2A0 BL 0x33A01F0
	0x031FE2A4 LDR X8, [X19]
	0x031FE2A8 MOV X20, X0
	0x031FE2AC MOV X0, X19
	0x031FE2B0 LDR X9, [X8 + 0x258]
	0x031FE2B4 LDR X1, [X8 + 0x260]
	0x031FE2B8 BLR X9
	0x031FE2BC CBZ X20, 0x31FE2E8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W20, W1
	006 And W21, W1, 255
	007 Move X1, X31
	008 Move X19, X0
	009 Call Object..ctor, X0
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move [X19+17], W20
	012 And W31, W20, 255
	013 Move W8, 1
	014 NotImplemented "Instruction CMP not yet implemented."
	015 And W9, W20, 255
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W8, 1
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move W8, 2
	020 Move [X19+16], W8
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Return 

Method: System.Void inferAlertLevel()

Disassembly:
	0x031FE2C0 ADRP X8, 0xEF5000
	0x031FE2C4 LDR X8, [X8 + 0x618]
	0x031FE2C8 MOV X0, X20
	0x031FE2CC LDR X19, [X8]
	0x031FE2D0 MOV X1, X19
	0x031FE2D4 BL 0x1C16E00
	0x031FE2D8 CBNZ X0, 0x31FE2EC
	0x031FE2DC MOV X0, X20
	0x031FE2E0 MOV X1, X19
	0x031FE2E4 BL 0x1C171E0
	0x031FE2E8 MOV X0, X31
	0x031FE2EC LDP X20, X19, [X31 + 0x10]
	0x031FE2F0 LDR X30, [X31], #0x20
	0x031FE2F4 RET
	0x031FE2F8 BL 0x1C16F20
	0x031FE2FC STR X30, [X31 - 0x30]!

ISIL:
	001 Move W9, [X0+17]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Compare W9, 0
	004 JumpIfNotEqual {10}
	005 Move W8, 1
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move W8, 1
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W8, 2
	011 Move [X0+16], W8
	012 Return 

Method: System.String ToString()

Disassembly:
	0x031FE300 STP X22, X21, [X31 + 0x10]
	0x031FE304 STP X20, X19, [X31 + 0x20]
	0x031FE308 ADRP X21, 0x11DE000
	0x031FE30C ADRP X22, 0xEF5000
	0x031FE310 ADRP X19, 0xF23000
	0x031FE314 ADRP X20, 0xF23000
	0x031FE318 LDRB W8, [X21 + 0x215]
	0x031FE31C LDR X22, [X22 + 0x618]
	0x031FE320 LDR X19, [X19 + 0x418]
	0x031FE324 LDR X20, [X20 + 0x410]
	0x031FE328 TBNZ X8, 0x0, 0x31FE358
	0x031FE32C ADRP X0, 0xEF5000
	0x031FE330 LDR X0, [X0 + 0x618]
	0x031FE334 BL 0x1C16CF4
	0x031FE338 ADRP X0, 0xF23000
	0x031FE33C LDR X0, [X0 + 0x410]
	0x031FE340 BL 0x1C16CF4
	0x031FE344 ADRP X0, 0xF23000
	0x031FE348 LDR X0, [X0 + 0x418]
	0x031FE34C BL 0x1C16CF4
	0x031FE350 MOVZ W8, 0x1
	0x031FE354 STRB W8, [X21 + 0x215]
	0x031FE358 LDR X0, [X22]
	0x031FE35C MOVZ W1, 0x100
	0x031FE360 BL 0x1C16D6C
	0x031FE364 LDR X1, [X19]
	0x031FE368 MOV X2, X31
	0x031FE36C MOV X19, X0
	0x031FE370 BL 0x32C5BD8
	0x031FE374 LDR X8, [X20]
	0x031FE378 LDP X22, X21, [X31 + 0x10]
	0x031FE37C LDR X8, [X8 + 0xB8]
	0x031FE380 STR X19, [X8]
	0x031FE384 LDP X20, X19, [X31 + 0x20]
	0x031FE388 LDR X30, [X31], #0x30
	0x031FE38C RET
	0x031FE390 STP X30, X19, [X31 - 0x10]!
	0x031FE394 MOV X1, X31
	0x031FE398 MOV X19, X0
	0x031FE39C BL 0x3251230
	0x031FE3A0 MOVZ W8, 0x80
	0x031FE3A4 STR W8, [X19 + 0x14]
	0x031FE3A8 LDP X30, X19, [X31], #0x10
	0x031FE3AC RET
	0x031FE3B0 STR X30, [X31 - 0x20]!
	0x031FE3B4 STP X20, X19, [X31 + 0x10]
	0x031FE3B8 ADRP X19, 0x11DE000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x11DF000
	009 Move X20, 0xF24000
	010 Move X22, 0xF24000
	011 Move X21, 0xF24000
	012 Move W8, [X23+515]
	013 Move X20, [X20+960]
	014 Move X22, [X22+968]
	015 Move X21, [X21+976]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {32}
	021 Move X0, 0xF24000
	022 Move X0, [X0+968]
	023 Call 0x1C17CF4
	024 Move X0, 0xF24000
	025 Move X0, [X0+960]
	026 Call 0x1C17CF4
	027 Move X0, 0xF24000
	028 Move X0, [X0+976]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X23+515], W8
	032 Move W8, [X19+16]
	033 Move X0, [X20]
	034 Add X1, X31, 12
	035 Move [X31+12], W8
	036 Call 0x1C17E04
	037 Move X20, X0
	038 Move W8, [X19+17]
	039 Move X0, [X22]
	040 Add X1, X31, 8
	041 Move [X31+8], W8
	042 Call 0x1C17E04
	043 Move X8, [X21]
	044 Move X2, X0
	045 Move X1, X20
	046 Move X3, X31
	047 Move X0, X8
	048 Call String.Format, X0, X1, X2
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X22, [X31+32]
	052 Move X21, [X31+40]
	053 Move X30, [X31+16]
	054 Move X23, [X31+24]
	055 Add X31, X31, 64
	056 Return X0

