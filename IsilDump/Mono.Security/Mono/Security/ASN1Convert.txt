Type: Mono.Security.ASN1Convert

Method: Mono.Security.ASN1 FromInt32(System.Int32 value)

Disassembly:
	0x031E9C1C BL 0x1C16CF4
	0x031E9C20 MOVZ W8, 0x1
	0x031E9C24 STRB W8, [X21 + 0x16F]
	0x031E9C28 LDR X0, [X22]
	0x031E9C2C BL 0x1C16F10
	0x031E9C30 MOV X1, X20
	0x031E9C34 MOV X21, X0
	0x031E9C38 BL 0x31E7A44
	0x031E9C3C MOV X0, X19
	0x031E9C40 MOV X1, X21
	0x031E9C44 LDP X20, X19, [X31 + 0x20]
	0x031E9C48 LDP X22, X21, [X31 + 0x10]
	0x031E9C4C LDR X30, [X31], #0x30
	0x031E9C50 B 0x31E9C54
	0x031E9C54 STR X30, [X31 - 0x20]!
	0x031E9C58 STP X20, X19, [X31 + 0x10]
	0x031E9C5C MOV X20, X1
	0x031E9C60 MOV X1, X31
	0x031E9C64 MOV X19, X0
	0x031E9C68 BL 0x33BDD8C
	0x031E9C6C CBZ X20, 0x31E9D44
	0x031E9C70 LDRB W8, [X20 + 0x10]
	0x031E9C74 CMP W8, 0x30
	0x031E9C78 B.NE 0x31E9D48
	0x031E9C7C LDR X0, [X20 + 0x20]
	0x031E9C80 CBZ X0, 0x31E9CBC
	0x031E9C84 LDR X8, [X0]
	0x031E9C88 LDR X9, [X8 + 0x298]
	0x031E9C8C LDR X1, [X8 + 0x2A0]
	0x031E9C90 BLR X9
	0x031E9C94 CMP W0, 0x0
	0x031E9C98 B.GT 0x31E9CBC
	0x031E9C9C LDR X0, [X20 + 0x20]
	0x031E9CA0 CBZ X0, 0x31E9CBC
	0x031E9CA4 LDR X8, [X0]
	0x031E9CA8 LDR X9, [X8 + 0x298]
	0x031E9CAC LDR X1, [X8 + 0x2A0]
	0x031E9CB0 BLR X9
	0x031E9CB4 CMP W0, 0x3
	0x031E9CB8 B.GE 0x31E9D48
	0x031E9CBC MOV X0, X20
	0x031E9CC0 MOV W1, W31
	0x031E9CC4 BL 0x31E8704
	0x031E9CC8 CBZ X0, 0x31E9D44
	0x031E9CCC LDRB W8, [X0 + 0x10]
	0x031E9CD0 CMP W8, 0x6
	0x031E9CD4 B.NE 0x31E9D68
	0x031E9CD8 MOV X0, X20
	0x031E9CDC MOV W1, W31
	0x031E9CE0 BL 0x31E8704
	0x031E9CE4 BL 0x31E909C
	0x031E9CE8 STR X0, [X19 + 0x10]
	0x031E9CEC LDR X0, [X20 + 0x20]
	0x031E9CF0 CBZ X0, 0x31E9D38
	0x031E9CF4 LDR X8, [X0]
	0x031E9CF8 LDR X9, [X8 + 0x298]
	0x031E9CFC LDR X1, [X8 + 0x2A0]
	0x031E9D00 BLR X9
	0x031E9D04 CMP W0, 0x2
	0x031E9D08 B.LT 0x31E9D38
	0x031E9D0C MOVZ W1, 0x1
	0x031E9D10 MOV X0, X20
	0x031E9D14 BL 0x31E8704
	0x031E9D18 CBZ X0, 0x31E9D44
	0x031E9D1C LDRB W8, [X0 + 0x10]
	0x031E9D20 CMP W8, 0xA0
	0x031E9D24 B.NE 0x31E9D88
	0x031E9D28 MOVZ W1, 0x1
	0x031E9D2C MOV X0, X20
	0x031E9D30 BL 0x31E8704
	0x031E9D34 STR X0, [X19 + 0x18]
	0x031E9D38 LDP X20, X19, [X31 + 0x10]
	0x031E9D3C LDR X30, [X31], #0x20
	0x031E9D40 RET
	0x031E9D44 BL 0x1C16F20
	0x031E9D48 ADRP X0, 0xF12000
	0x031E9D4C LDR X0, [X0 + 0x578]
	0x031E9D50 BL 0x1C16D08
	0x031E9D54 BL 0x1C16F10
	0x031E9D58 MOV X19, X0
	0x031E9D5C ADRP X0, 0xF37000
	0x031E9D60 LDR X0, [X0 + 0xC50]
	0x031E9D64 B 0x31E9DA4
	0x031E9D68 ADRP X0, 0xF12000
	0x031E9D6C LDR X0, [X0 + 0x578]
	0x031E9D70 BL 0x1C16D08
	0x031E9D74 BL 0x1C16F10
	0x031E9D78 MOV X19, X0
	0x031E9D7C ADRP X0, 0xF37000
	0x031E9D80 LDR X0, [X0 + 0xC58]
	0x031E9D84 B 0x31E9DA4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11F4000
	007 Move X20, 0xF38000
	008 Move W8, [X21+359]
	009 Move X20, [X20+3024]
	010 Move W19, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0xF38000
	016 Move X0, [X0+2968]
	017 Call 0x1C17CF4
	018 Move X0, 0xF38000
	019 Move X0, [X0+3024]
	020 Call 0x1C17CF4
	021 Move X0, 0xF0B000
	022 Move X0, [X0+1560]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+359], W8
	026 Add X0, X31, 12
	027 Move [X31+12], W19
	028 Call BitConverterLE.GetUIntBytes, X0
	029 Move X1, [X20]
	030 Move X19, X0
	031 Call 0x21475E8, X0
	032 Compare X19, 0
	033 JumpIfEqual {95}
	034 Move W8, [X19+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction BIC not yet implemented."
	037 Move W9, W31
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Add X10, X19, W9
	040 Move W10, [X10+32]
	041 Compare W10, 0
	042 JumpIfNotEqual {45}
	043 Add W9, W9, 1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move W20, W9
	046 Move X8, 0xF38000
	047 Move X8, [X8+2968]
	048 Move X0, [X8]
	049 Call 0x1C17F10
	050 Move X1, X31
	051 Move X21, X0
	052 Call Object..ctor, X0
	053 Move W8, 2
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move [X21+16], W8
	056 Move [X21+24], X31
	057 Compare W20, 0
	058 JumpIfNotEqual {68}
	059 Move X0, X21
	060 Move X1, X19
	061 Move X8, 0xF0B000
	062 Move X8, [X8+1560]
	063 Move W1, 1
	064 Move X0, [X8]
	065 Call 0x1C17D6C
	066 Move X1, X0
	067 Move X0, X21
	068 Move X8, 0xF0B000
	069 Move X8, [X8+1560]
	070 Move X0, [X8]
	071 Move W8, 4
	072 Subtract W1, W8, W20
	073 Call 0x1C17D6C
	074 Compare X0, 0
	075 JumpIfEqual {95}
	076 Move W4, [X0+24]
	077 Move X22, X0
	078 Move X0, X19
	079 Move W1, W20
	080 Move X2, X22
	081 Move W3, W31
	082 Move X5, X31
	083 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	084 Move X0, X21
	085 Move X1, X22
	086 Call ASN1.set_Value, X0, X1
	087 Move X0, X21
	088 Move X20, [X31+32]
	089 Move X19, [X31+40]
	090 Move X22, [X31+16]
	091 Move X21, [X31+24]
	092 Move X30, [X31+48]
	093 Return X0
	094 Call 0x1C17F28
	095 Call 0x1C17F20

Method: Mono.Security.ASN1 FromOid(System.String oid)

Disassembly:
	0x031E9DA0 LDR X0, [X0 + 0xC60]
	0x031E9DA4 BL 0x1C16D08
	0x031E9DA8 MOV X1, X0
	0x031E9DAC MOV X0, X19
	0x031E9DB0 MOV X2, X31
	0x031E9DB4 BL 0x3314A68
	0x031E9DB8 ADRP X0, 0xF37000
	0x031E9DBC LDR X0, [X0 + 0xC68]
	0x031E9DC0 BL 0x1C16D08
	0x031E9DC4 MOV X1, X0
	0x031E9DC8 MOV X0, X19
	0x031E9DCC BL 0x1C16DEC
	0x031E9DD0 B 0x31E9DD4
	0x031E9DD4 STP X30, X21, [X31 - 0x20]!
	0x031E9DD8 STP X20, X19, [X31 + 0x10]
	0x031E9DDC ADRP X20, 0x11F3000
	0x031E9DE0 ADRP X21, 0xF37000
	0x031E9DE4 LDRB W8, [X20 + 0x170]
	0x031E9DE8 LDR X21, [X21 + 0xB98]
	0x031E9DEC MOV X19, X0
	0x031E9DF0 TBNZ X8, 0x0, 0x31E9E08
	0x031E9DF4 ADRP X0, 0xF37000
	0x031E9DF8 LDR X0, [X0 + 0xB98]
	0x031E9DFC BL 0x1C16CF4
	0x031E9E00 MOVZ W8, 0x1
	0x031E9E04 STRB W8, [X20 + 0x170]
	0x031E9E08 LDR X0, [X21]
	0x031E9E0C BL 0x1C16F10
	0x031E9E10 MOV X1, X31
	0x031E9E14 MOV X20, X0
	0x031E9E18 BL 0x33BDD8C
	0x031E9E1C MOVZ W8, 0x30
	0x031E9E20 STRB W8, [X20 + 0x10]
	0x031E9E24 STR X31, [X20 + 0x18]
	0x031E9E28 LDR X0, [X19 + 0x10]
	0x031E9E2C BL 0x31E8DA0
	0x031E9E30 MOV X1, X0
	0x031E9E34 MOV X0, X20
	0x031E9E38 BL 0x31E7ED0
	0x031E9E3C LDR X8, [X19 + 0x18]
	0x031E9E40 CBZ X8, 0x31E9E70
	0x031E9E44 LDR X0, [X8 + 0x20]
	0x031E9E48 CBZ X0, 0x31E9E70
	0x031E9E4C LDR X8, [X0]
	0x031E9E50 LDR X9, [X8 + 0x298]
	0x031E9E54 LDR X1, [X8 + 0x2A0]
	0x031E9E58 BLR X9
	0x031E9E5C CMP W0, 0x1
	0x031E9E60 B.LT 0x31E9E70
	0x031E9E64 LDR X1, [X19 + 0x18]
	0x031E9E68 MOV X0, X20
	0x031E9E6C BL 0x31E7ED0
	0x031E9E70 MOV X0, X20
	0x031E9E74 LDP X20, X19, [X31 + 0x10]
	0x031E9E78 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11F4000
	005 Move W8, [X20+360]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xF38000
	012 Move X0, [X0+2968]
	013 Call 0x1C17CF4
	014 Move X0, 0xF38000
	015 Move X0, [X0+3032]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+360], W8
	019 Compare X19, 0
	020 JumpIfEqual {45}
	021 Move X8, 0xF38000
	022 Move X8, [X8+3032]
	023 Move X20, 0xF38000
	024 Move X0, [X8]
	025 Move W8, [X0+224]
	026 Move X20, [X20+2968]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X1, X31
	032 Call CryptoConfig.EncodeOID, X0
	033 Move X8, [X20]
	034 Move X19, X0
	035 Move X0, X8
	036 Call 0x1C17F10
	037 Move X1, X19
	038 Move X20, X0
	039 Call ASN1..ctor, X0, X1
	040 Move X0, X20
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Return X0
	045 Move X0, 0xF10000
	046 Move X0, [X0+1320]
	047 Call 0x1C17D08
	048 Call 0x1C17F10
	049 Move X19, X0
	050 Move X0, 0xF38000
	051 Move X0, [X0+3040]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X19
	055 Move X2, X31
	056 Call ArgumentNullException..ctor, X0, X1
	057 Move X0, 0xF38000
	058 Move X0, [X0+3048]
	059 Call 0x1C17D08
	060 Move X1, X0
	061 Move X0, X19
	062 Call 0x1C17DEC

Method: Mono.Security.ASN1 FromUnsignedBigInteger(System.Byte[] big)

Disassembly:
	0x031E9E7C RET
	0x031E9E80 LDR X0, [X0 + 0x18]
	0x031E9E84 RET
	0x031E9E88 STR X1, [X0 + 0x18]
	0x031E9E8C RET
	0x031E9E90 LDR X0, [X0 + 0x10]
	0x031E9E94 RET
	0x031E9E98 STR X1, [X0 + 0x10]
	0x031E9E9C RET
	0x031E9EA0 STP X30, X19, [X31 - 0x10]!
	0x031E9EA4 MOV X1, X31
	0x031E9EA8 MOV X19, X0
	0x031E9EAC BL 0x33BDD8C
	0x031E9EB0 STRB W31, [X19 + 0x10]
	0x031E9EB4 LDP X30, X19, [X31], #0x10
	0x031E9EB8 RET
	0x031E9EBC STP X30, X23, [X31 - 0x30]!
	0x031E9EC0 STP X22, X21, [X31 + 0x10]
	0x031E9EC4 STP X20, X19, [X31 + 0x20]
	0x031E9EC8 ADRP X21, 0x11F3000
	0x031E9ECC LDRB W8, [X21 + 0x171]
	0x031E9ED0 MOV X20, X1
	0x031E9ED4 MOV X19, X0
	0x031E9ED8 TBNZ X8, 0x0, 0x31E9EF0
	0x031E9EDC ADRP X0, 0xF37000
	0x031E9EE0 LDR X0, [X0 + 0xC70]
	0x031E9EE4 BL 0x1C16CF4
	0x031E9EE8 MOVZ W8, 0x1
	0x031E9EEC STRB W8, [X21 + 0x171]
	0x031E9EF0 MOV X0, X19
	0x031E9EF4 MOV X1, X31
	0x031E9EF8 BL 0x33BDD8C
	0x031E9EFC STRB W31, [X19 + 0x10]
	0x031E9F00 CBZ X20, 0x31EA084
	0x031E9F04 LDRB W8, [X20 + 0x10]
	0x031E9F08 CMP W8, 0x30
	0x031E9F0C B.NE 0x31EA088
	0x031E9F10 LDR X0, [X20 + 0x20]
	0x031E9F14 CBZ X0, 0x31EA088
	0x031E9F18 LDR X8, [X0]
	0x031E9F1C LDR X9, [X8 + 0x298]
	0x031E9F20 LDR X1, [X8 + 0x2A0]
	0x031E9F24 BLR X9
	0x031E9F28 CMP W0, 0x1
	0x031E9F2C B.LE 0x31EA088
	0x031E9F30 MOV X0, X20
	0x031E9F34 MOV W1, W31
	0x031E9F38 BL 0x31E8704
	0x031E9F3C CBZ X0, 0x31EA084
	0x031E9F40 LDRB W8, [X0 + 0x10]
	0x031E9F44 CMP W8, 0x2
	0x031E9F48 B.NE 0x31EA0A8
	0x031E9F4C MOV X0, X20
	0x031E9F50 MOV W1, W31
	0x031E9F54 BL 0x31E8704
	0x031E9F58 CBZ X0, 0x31EA084
	0x031E9F5C BL 0x31E7D00
	0x031E9F60 CBZ X0, 0x31EA084
	0x031E9F64 LDR W8, [X0 + 0x18]
	0x031E9F68 CBZ W8, 0x31EA0C8
	0x031E9F6C LDRB W8, [X0 + 0x20]
	0x031E9F70 MOVZ W1, 0x1
	0x031E9F74 MOV X0, X20
	0x031E9F78 STRB W8, [X19 + 0x10]
	0x031E9F7C BL 0x31E8704
	0x031E9F80 CBZ X0, 0x31EA084
	0x031E9F84 LDRB W8, [X0 + 0x10]
	0x031E9F88 CMP W8, 0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11F4000
	007 Move W8, [X20+361]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xF38000
	014 Move X0, [X0+2968]
	015 Call 0x1C17CF4
	016 Move X0, 0xF0B000
	017 Move X0, [X0+1560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+361], W8
	021 Compare X19, 0
	022 JumpIfEqual {62}
	023 Move W20, [X19+24]
	024 Compare W20, 0
	025 JumpIfEqual {80}
	026 Move X22, 0xF38000
	027 NotImplemented "Instruction INVALID not yet implemented."
	028 Move X22, [X22+2968]
	029 Move TEMP, X8
	030 And TEMP, TEMP, -2147483648
	031 Compare TEMP, -2147483648
	032 JumpIfNotEqual {47}
	033 Move X8, 0xF0B000
	034 Move X8, [X8+1560]
	035 Add W1, W20, 1
	036 Move X0, [X8]
	037 Call 0x1C17D6C
	038 Move X21, X0
	039 Move W3, 1
	040 Move X0, X19
	041 Move W1, W31
	042 Move X2, X21
	043 Move W4, W20
	044 Move X5, X31
	045 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	046 Move X19, X21
	047 Move X0, [X22]
	048 Call 0x1C17F10
	049 Move X1, X31
	050 Move X20, X0
	051 Call Object..ctor, X0
	052 Move W8, 2
	053 Move [X20+16], W8
	054 Move [X20+24], X19
	055 Move X0, X20
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X30, [X31+48]
	061 Return X0
	062 Move X0, 0xF10000
	063 Move X0, [X0+1320]
	064 Call 0x1C17D08
	065 Call 0x1C17F10
	066 Move X19, X0
	067 Move X0, 0xF38000
	068 Move X0, [X0+3056]
	069 Call 0x1C17D08
	070 Move X1, X0
	071 Move X0, X19
	072 Move X2, X31
	073 Call ArgumentNullException..ctor, X0, X1
	074 Move X0, 0xF38000
	075 Move X0, [X0+3064]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X19
	079 Call 0x1C17DEC
	080 Call 0x1C17F28

Method: System.Int32 ToInt32(Mono.Security.ASN1 asn1)

Disassembly:
	0x031E9F8C CSEL X20, X0, X31, EQ
	0x031E9F90 B.NE 0x31EA0CC
	0x031E9F94 CBZ X20, 0x31EA084
	0x031E9F98 MOV X0, X20
	0x031E9F9C MOV W1, W31
	0x031E9FA0 BL 0x31E8704
	0x031E9FA4 CBZ X0, 0x31EA084
	0x031E9FA8 LDRB W8, [X0 + 0x10]
	0x031E9FAC CMP W8, 0x6
	0x031E9FB0 CSEL X20, X20, X31, EQ
	0x031E9FB4 B.NE 0x31EA0EC
	0x031E9FB8 ADRP X23, 0xF37000
	0x031E9FBC LDR X23, [X23 + 0xC70]
	0x031E9FC0 BL 0x31E909C
	0x031E9FC4 LDR X8, [X23]
	0x031E9FC8 MOV X21, X0
	0x031E9FCC MOV X0, X8
	0x031E9FD0 BL 0x1C16F10
	0x031E9FD4 MOV X22, X0
	0x031E9FD8 BL 0x31E9B58
	0x031E9FDC STR X21, [X22 + 0x10]
	0x031E9FE0 STR X22, [X19 + 0x18]
	0x031E9FE4 CBZ X20, 0x31EA084
	0x031E9FE8 MOVZ W1, 0x1
	0x031E9FEC MOV X0, X20
	0x031E9FF0 BL 0x31E8704
	0x031E9FF4 CBZ X0, 0x31EA084
	0x031E9FF8 LDRB W8, [X0 + 0x10]
	0x031E9FFC MOV X21, X0
	0x031EA000 CMP W8, 0x30
	0x031EA004 CSEL X20, X20, X31, EQ
	0x031EA008 B.NE 0x31EA10C
	0x031EA00C MOV X0, X21
	0x031EA010 MOV W1, W31
	0x031EA014 BL 0x31E8704
	0x031EA018 BL 0x31E909C
	0x031EA01C LDR X8, [X23]
	0x031EA020 MOV X22, X0
	0x031EA024 MOV X0, X8
	0x031EA028 BL 0x1C16F10
	0x031EA02C MOV X23, X0
	0x031EA030 BL 0x31E9B58
	0x031EA034 MOVZ W1, 0x1
	0x031EA038 MOV X0, X21
	0x031EA03C STR X22, [X23 + 0x10]
	0x031EA040 STR X23, [X19 + 0x20]
	0x031EA044 BL 0x31E8704
	0x031EA048 STR X0, [X23 + 0x18]
	0x031EA04C CBZ X20, 0x31EA084
	0x031EA050 MOVZ W1, 0x2
	0x031EA054 MOV X0, X20
	0x031EA058 BL 0x31E8704
	0x031EA05C CBZ X0, 0x31EA084
	0x031EA060 LDRB W8, [X0 + 0x10]
	0x031EA064 CMP W8, 0x80
	0x031EA068 B.NE 0x31EA12C
	0x031EA06C BL 0x31E7D00
	0x031EA070 STR X0, [X19 + 0x28]
	0x031EA074 LDP X20, X19, [X31 + 0x20]
	0x031EA078 LDP X22, X21, [X31 + 0x10]
	0x031EA07C LDP X30, X23, [X31], #0x30
	0x031EA080 RET
	0x031EA084 BL 0x1C16F20
	0x031EA088 ADRP X0, 0xF11000
	0x031EA08C LDR X0, [X0 + 0x578]
	0x031EA090 BL 0x1C16D08
	0x031EA094 BL 0x1C16F10
	0x031EA098 MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X0, 0
	007 JumpIfEqual {43}
	008 Move W8, [X0+16]
	009 Move X19, X0
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X0, X19
	012 Call ASN1.get_Value, X0
	013 Compare X0, 0
	014 JumpIfEqual {34}
	015 Move X21, X31
	016 Move W20, W31
	017 NotImplemented "Instruction LDRSW not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X0, X19
	020 Call ASN1.get_Value, X0
	021 Compare X0, 0
	022 JumpIfEqual {34}
	023 Move W8, [X0+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Add X8, X0, X21
	026 Move W22, [X8+32]
	027 Move X0, X19
	028 Add X21, X21, 1
	029 NotImplemented "Instruction BFM not yet implemented."
	030 Call ASN1.get_Value, X0
	031 Move W20, W22
	032 Compare X0, 0
	033 JumpIfNotEqual {17}
	034 Call 0x1C17F20
	035 Move W0, W20
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Return X0
	042 Call 0x1C17F28
	043 Move X0, 0xF0F000
	044 Move X0, [X0+1320]
	045 Call 0x1C17D08
	046 Call 0x1C17F10
	047 Move X19, X0
	048 Move X0, 0xF37000
	049 Move X0, [X0+3072]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Move X2, X31
	054 Call ArgumentNullException..ctor, X0, X1
	055 Move X0, 0xF37000
	056 Move X0, [X0+3080]
	057 Call 0x1C17D08
	058 Call 0x1C17F10
	059 Move X19, X0
	060 Move X0, 0xF37000
	061 Move X0, [X0+3088]
	062 Call 0x1C17D08
	063 Move X1, X0
	064 Move X0, X19
	065 Move X2, X31
	066 Call FormatException..ctor, X0, X1
	067 Move X0, 0xF37000
	068 Move X0, [X0+3096]
	069 Call 0x1C17D08
	070 Move X1, X0
	071 Move X0, X19
	072 Call 0x1C17DEC

Method: System.String ToOid(Mono.Security.ASN1 asn1)

Disassembly:
	0x031EA09C ADRP X0, 0xF36000
	0x031EA0A0 LDR X0, [X0 + 0xC78]
	0x031EA0A4 B 0x31EA148
	0x031EA0A8 ADRP X0, 0xF11000
	0x031EA0AC LDR X0, [X0 + 0x578]
	0x031EA0B0 BL 0x1C16D08
	0x031EA0B4 BL 0x1C16F10
	0x031EA0B8 MOV X19, X0
	0x031EA0BC ADRP X0, 0xF36000
	0x031EA0C0 LDR X0, [X0 + 0xC80]
	0x031EA0C4 B 0x31EA148
	0x031EA0C8 BL 0x1C16F28
	0x031EA0CC ADRP X0, 0xF11000
	0x031EA0D0 LDR X0, [X0 + 0x578]
	0x031EA0D4 BL 0x1C16D08
	0x031EA0D8 BL 0x1C16F10
	0x031EA0DC MOV X19, X0
	0x031EA0E0 ADRP X0, 0xF36000
	0x031EA0E4 LDR X0, [X0 + 0xC88]
	0x031EA0E8 B 0x31EA148
	0x031EA0EC ADRP X0, 0xF11000
	0x031EA0F0 LDR X0, [X0 + 0x578]
	0x031EA0F4 BL 0x1C16D08
	0x031EA0F8 BL 0x1C16F10
	0x031EA0FC MOV X19, X0
	0x031EA100 ADRP X0, 0xF36000
	0x031EA104 LDR X0, [X0 + 0xC90]
	0x031EA108 B 0x31EA148
	0x031EA10C ADRP X0, 0xF11000
	0x031EA110 LDR X0, [X0 + 0x578]
	0x031EA114 BL 0x1C16D08
	0x031EA118 BL 0x1C16F10
	0x031EA11C MOV X19, X0
	0x031EA120 ADRP X0, 0xF36000
	0x031EA124 LDR X0, [X0 + 0xC98]
	0x031EA128 B 0x31EA148
	0x031EA12C ADRP X0, 0xF11000
	0x031EA130 LDR X0, [X0 + 0x578]
	0x031EA134 BL 0x1C16D08
	0x031EA138 BL 0x1C16F10
	0x031EA13C MOV X19, X0
	0x031EA140 ADRP X0, 0xF36000
	0x031EA144 LDR X0, [X0 + 0xCA0]
	0x031EA148 BL 0x1C16D08
	0x031EA14C MOV X1, X0
	0x031EA150 MOV X0, X19
	0x031EA154 MOV X2, X31
	0x031EA158 BL 0x3314A68
	0x031EA15C ADRP X0, 0xF36000
	0x031EA160 LDR X0, [X0 + 0xCA8]
	0x031EA164 BL 0x1C16D08
	0x031EA168 MOV X1, X0
	0x031EA16C MOV X0, X19
	0x031EA170 BL 0x1C16DEC
	0x031EA174 LDR X0, [X0 + 0x20]
	0x031EA178 RET
	0x031EA17C STR X30, [X31 - 0x20]!
	0x031EA180 STP X20, X19, [X31 + 0x10]
	0x031EA184 ADRP X20, 0x11F2000
	0x031EA188 LDRB W8, [X20 + 0x172]
	0x031EA18C MOV X19, X0
	0x031EA190 TBNZ X8, 0x0, 0x31EA1A8
	0x031EA194 ADRP X0, 0xF09000
	0x031EA198 LDR X0, [X0 + 0x618]
	0x031EA19C BL 0x1C16CF4
	0x031EA1A0 MOVZ W8, 0x1
	0x031EA1A4 STRB W8, [X20 + 0x172]
	0x031EA1A8 LDR X0, [X19 + 0x28]
	0x031EA1AC CBZ X0, 0x31EA1D8
	0x031EA1B0 MOV X1, X31
	0x031EA1B4 BL 0x33A01F0
	0x031EA1B8 CBZ X0, 0x31EA1D8
	0x031EA1BC ADRP X8, 0xF09000
	0x031EA1C0 LDR X8, [X8 + 0x618]
	0x031EA1C4 MOV X19, X0
	0x031EA1C8 LDR X20, [X8]
	0x031EA1CC MOV X1, X20
	0x031EA1D0 BL 0x1C16E00
	0x031EA1D4 CBZ X0, 0x31EA1E4
	0x031EA1D8 LDP X20, X19, [X31 + 0x10]
	0x031EA1DC LDR X30, [X31], #0x20
	0x031EA1E0 RET
	0x031EA1E4 MOV X0, X19
	0x031EA1E8 MOV X1, X20
	0x031EA1EC BL 0x1C171E0
	0x031EA1F0 STP X30, X25, [X31 - 0x40]!
	0x031EA1F4 STP X24, X23, [X31 + 0x10]
	0x031EA1F8 STP X22, X21, [X31 + 0x20]
	0x031EA1FC STP X20, X19, [X31 + 0x30]
	0x031EA200 ADRP X21, 0x11F2000
	0x031EA204 LDRB W8, [X21 + 0x173]
	0x031EA208 MOV X20, X1
	0x031EA20C MOV X19, X0
	0x031EA210 TBNZ X8, 0x0, 0x31EA258
	0x031EA214 ADRP X0, 0xF36000
	0x031EA218 LDR X0, [X0 + 0xBA0]
	0x031EA21C BL 0x1C16CF4
	0x031EA220 ADRP X0, 0xF36000
	0x031EA224 LDR X0, [X0 + 0xC70]
	0x031EA228 BL 0x1C16CF4
	0x031EA22C ADRP X0, 0xF36000
	0x031EA230 LDR X0, [X0 + 0xCB0]
	0x031EA234 BL 0x1C16CF4
	0x031EA238 ADRP X0, 0xF36000
	0x031EA23C LDR X0, [X0 + 0xCB8]
	0x031EA240 BL 0x1C16CF4
	0x031EA244 ADRP X0, 0xF36000
	0x031EA248 LDR X0, [X0 + 0xCC0]
	0x031EA24C BL 0x1C16CF4
	0x031EA250 MOVZ W8, 0x1
	0x031EA254 STRB W8, [X21 + 0x173]
	0x031EA258 MOV X0, X19
	0x031EA25C MOV X1, X31
	0x031EA260 BL 0x33BDD8C
	0x031EA264 CBZ X20, 0x31EA558
	0x031EA268 MOV X0, X20
	0x031EA26C MOV W1, W31
	0x031EA270 BL 0x31E8704
	0x031EA274 CBZ X0, 0x31EA558
	0x031EA278 LDRB W8, [X0 + 0x10]
	0x031EA27C CMP W8, 0x30
	0x031EA280 B.NE 0x31EA648
	0x031EA284 MOV X0, X20
	0x031EA288 MOV W1, W31
	0x031EA28C BL 0x31E8704
	0x031EA290 CBZ X0, 0x31EA558
	0x031EA294 LDR X0, [X0 + 0x20]
	0x031EA298 CBZ X0, 0x31EA648
	0x031EA29C LDR X8, [X0]
	0x031EA2A0 LDR X9, [X8 + 0x298]
	0x031EA2A4 LDR X1, [X8 + 0x2A0]
	0x031EA2A8 BLR X9
	0x031EA2AC CMP W0, 0x3
	0x031EA2B0 B.LE 0x31EA648
	0x031EA2B4 MOV X0, X20
	0x031EA2B8 MOV W1, W31
	0x031EA2BC BL 0x31E8704
	0x031EA2C0 CBZ X0, 0x31EA558
	0x031EA2C4 MOV W1, W31
	0x031EA2C8 BL 0x31E8704
	0x031EA2CC CBZ X0, 0x31EA558
	0x031EA2D0 LDRB W8, [X0 + 0x10]
	0x031EA2D4 CMP W8, 0x2
	0x031EA2D8 B.NE 0x31EA668
	0x031EA2DC MOV X0, X20
	0x031EA2E0 MOV W1, W31
	0x031EA2E4 BL 0x31E8704
	0x031EA2E8 CBZ X0, 0x31EA558
	0x031EA2EC MOV W1, W31
	0x031EA2F0 BL 0x31E8704
	0x031EA2F4 CBZ X0, 0x31EA558
	0x031EA2F8 BL 0x31E7D00
	0x031EA2FC CBZ X0, 0x31EA558
	0x031EA300 LDR W8, [X0 + 0x18]
	0x031EA304 CBZ W8, 0x31EA6B0
	0x031EA308 LDRB W8, [X0 + 0x20]
	0x031EA30C MOV X0, X20
	0x031EA310 MOV W1, W31
	0x031EA314 STRB W8, [X19 + 0x10]
	0x031EA318 BL 0x31E8704
	0x031EA31C CBZ X0, 0x31EA558
	0x031EA320 ADRP X21, 0xF36000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X20, 0x11F3000
	008 Move W8, [X20+362]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xF0C000
	015 Move X0, [X0+3144]
	016 Call 0x1C17CF4
	017 Move X0, 0xF0A000
	018 Move X0, [X0+2288]
	019 Call 0x1C17CF4
	020 Move X0, 0xF13000
	021 Move X0, [X0+1936]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+362], W8
	025 Move [X31+28], W31
	026 Move [X31+24], W31
	027 Move [X31+8], X31
	028 Compare X19, 0
	029 JumpIfEqual {161}
	030 Move X20, 0xF0A000
	031 Move X20, [X20+2288]
	032 Move X0, X19
	033 Call ASN1.get_Value, X0
	034 Move X8, [X20]
	035 Move X20, X0
	036 Move X0, X8
	037 Call 0x1C17F10
	038 Move X1, X31
	039 Move X19, X0
	040 Call StringBuilder..ctor, X0
	041 Compare X20, 0
	042 JumpIfEqual {160}
	043 Move W8, [X20+24]
	044 Compare W8, 0
	045 JumpIfEqual {159}
	046 Move W11, [X20+32]
	047 Move W10, 0xCCCD
	048 NotImplemented "Instruction MOVK not yet implemented."
	049 Move X21, 0xF0C000
	050 NotImplemented "Instruction UMADDL not yet implemented."
	051 Move X8, X8
	052 ShiftRight X8, 37
	053 And X8, X8, 0x7FFFFFFF
	054 Move [X31+28], W8
	055 Move W12, [X20+32]
	056 Move X21, [X21+3144]
	057 Move W9, 40
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction UMADDL not yet implemented."
	060 Move X10, X10
	061 ShiftRight X10, 37
	062 And X10, X10, 0x7FFFFFFF
	063 NotImplemented "Instruction MSUB not yet implemented."
	064 Move [X31+24], W10
	065 NotImplemented "Instruction MADD not yet implemented."
	066 Move W9, 2
	067 Subtract W8, W8, 80
	068 Move [X31+24], W8
	069 Move [X31+28], W9
	070 Move X0, [X21]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X31
	076 Call CultureInfo.get_InvariantCulture
	077 Move X1, X0
	078 Add X0, X31, 28
	079 Move X2, X31
	080 Call Byte.ToString, X0, X1
	081 Compare X19, 0
	082 JumpIfEqual {160}
	083 Move X22, 0xF13000
	084 Move X22, [X22+1936]
	085 Move X1, X0
	086 Move X0, X19
	087 Move X2, X31
	088 Call StringBuilder.Append, X0, X1
	089 Move X1, [X22]
	090 Move X0, X19
	091 Move X2, X31
	092 Call StringBuilder.Append, X0, X1
	093 Move X0, X31
	094 Call CultureInfo.get_InvariantCulture
	095 Move X1, X0
	096 Add X0, X31, 24
	097 Move X2, X31
	098 Call Byte.ToString, X0, X1
	099 Move X1, X0
	100 Move X0, X19
	101 Move X2, X31
	102 Call StringBuilder.Append, X0, X1
	103 Move W8, 1
	104 Move [X31+8], X31
	105 Move [X31+28], W8
	106 Move X8, [X20+24]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X10, X31
	109 Move W9, 1
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Add X12, X20, W9
	112 Move W11, [X12+32]
	113 NotImplemented "Instruction BFM not yet implemented."
	114 Move [X31+8], X11
	115 NotImplemented "Instruction INVALID not yet implemented."
	116 Move TEMP, X10
	117 And TEMP, TEMP, -2147483648
	118 Compare TEMP, -2147483648
	119 JumpIfEqual {143}
	120 Move X1, [X22]
	121 Move X0, X19
	122 Move X2, X31
	123 Call StringBuilder.Append, X0, X1
	124 Move X0, [X21]
	125 Move W8, [X0+224]
	126 Compare W8, 0
	127 JumpIfNotEqual {129}
	128 Call 0x1C17DFC
	129 Move X0, X31
	130 Call CultureInfo.get_InvariantCulture
	131 Move X1, X0
	132 Add X0, X31, 8
	133 Move X2, X31
	134 Call UInt64.ToString, X0, X1
	135 Move X1, X0
	136 Move X0, X19
	137 Move X2, X31
	138 Call StringBuilder.Append, X0, X1
	139 Move [X31+8], X31
	140 Move W9, [X31+28]
	141 Move X8, [X20+24]
	142 Move X10, X31
	143 Move X10, X11
	144 Add W9, W9, 1
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move [X31+28], W9
	147 Move X8, [X19]
	148 Move X0, X19
	149 Move X9, [X8+360]
	150 Move X1, [X8+368]
	151 NotImplemented "Instruction BLR not yet implemented."
	152 Move X20, [X31+48]
	153 Move X19, [X31+56]
	154 Move X22, [X31+32]
	155 Move X21, [X31+40]
	156 Move X30, [X31+16]
	157 Add X31, X31, 64
	158 Return X0
	159 Call 0x1C17F28
	160 Call 0x1C17F20
	161 Move X0, 0xF0F000
	162 Move X0, [X0+1320]
	163 Call 0x1C17D08
	164 Call 0x1C17F10
	165 Move X19, X0
	166 Move X0, 0xF37000
	167 Move X0, [X0+3072]
	168 Call 0x1C17D08
	169 Move X1, X0
	170 Move X0, X19
	171 Move X2, X31
	172 Call ArgumentNullException..ctor, X0, X1
	173 Move X0, 0xF37000
	174 Move X0, [X0+3104]
	175 Call 0x1C17D08
	176 Move X1, X0
	177 Move X0, X19
	178 Call 0x1C17DEC

Method: System.DateTime ToDateTime(Mono.Security.ASN1 time)

Disassembly:
	0x031EA324 ADRP X23, 0xF36000
	0x031EA328 LDR X21, [X21 + 0xC70]
	0x031EA32C LDR X23, [X23 + 0xCB8]
	0x031EA330 MOVZ W1, 0x2
	0x031EA334 BL 0x31E8704
	0x031EA338 LDR X8, [X21]
	0x031EA33C MOV X21, X0
	0x031EA340 MOV X0, X8
	0x031EA344 BL 0x1C16F10
	0x031EA348 MOV X1, X21
	0x031EA34C MOV X22, X0
	0x031EA350 BL 0x31E9C54
	0x031EA354 STR X22, [X19 + 0x20]
	0x031EA358 LDR X0, [X23]
	0x031EA35C BL 0x1C16F10
	0x031EA360 MOV X1, X31
	0x031EA364 MOV X21, X0
	0x031EA368 BL 0x3351EFC
	0x031EA36C MOV X0, X20
	0x031EA370 MOV W1, W31
	0x031EA374 STR X21, [X19 + 0x28]
	0x031EA378 BL 0x31E8704
	0x031EA37C CBZ X0, 0x31EA558
	0x031EA380 MOVZ W1, 0x3
	0x031EA384 BL 0x31E8704
	0x031EA388 CBZ X0, 0x31EA558
	0x031EA38C LDRB W8, [X0 + 0x10]
	0x031EA390 CMP W8, 0xA0
	0x031EA394 B.NE 0x31EA45C
	0x031EA398 MOV X0, X20
	0x031EA39C MOV W1, W31
	0x031EA3A0 BL 0x31E8704
	0x031EA3A4 CBZ X0, 0x31EA558
	0x031EA3A8 ADRP X25, 0xF36000
	0x031EA3AC LDR X25, [X25 + 0xCC0]
	0x031EA3B0 MOV W21, W31
	0x031EA3B4 MOVZ W1, 0x3
	0x031EA3B8 BL 0x31E8704
	0x031EA3BC CBZ X0, 0x31EA558
	0x031EA3C0 LDR X0, [X0 + 0x20]
	0x031EA3C4 CBZ X0, 0x31EA3D8
	0x031EA3C8 LDR X8, [X0]
	0x031EA3CC LDR X9, [X8 + 0x298]
	0x031EA3D0 LDR X1, [X8 + 0x2A0]
	0x031EA3D4 BLR X9
	0x031EA3D8 CMP W21, W0
	0x031EA3DC B.GE 0x31EA464
	0x031EA3E0 LDR X22, [X19 + 0x28]
	0x031EA3E4 MOV X0, X20
	0x031EA3E8 MOV W1, W31
	0x031EA3EC BL 0x31E8704
	0x031EA3F0 CBZ X0, 0x31EA558
	0x031EA3F4 MOVZ W1, 0x3
	0x031EA3F8 BL 0x31E8704
	0x031EA3FC CBZ X0, 0x31EA558
	0x031EA400 MOV W1, W21
	0x031EA404 BL 0x31E8704
	0x031EA408 CBZ X0, 0x31EA558
	0x031EA40C LDR X8, [X0]
	0x031EA410 LDP X9, X1, [X8 + 0x178]
	0x031EA414 BLR X9
	0x031EA418 LDR X8, [X25]
	0x031EA41C MOV X24, X0
	0x031EA420 MOV X0, X8
	0x031EA424 BL 0x1C16F10
	0x031EA428 MOV X1, X24
	0x031EA42C MOV X23, X0
	0x031EA430 BL 0x31EA6BC
	0x031EA434 CBZ X22, 0x31EA558
	0x031EA438 MOV X0, X22
	0x031EA43C MOV X1, X23
	0x031EA440 BL 0x31EA848
	0x031EA444 MOV X0, X20
	0x031EA448 MOV W1, W31
	0x031EA44C ADD W21, W21, 0x1
	0x031EA450 BL 0x31E8704
	0x031EA454 CBNZ X0, 0x31EA3B4
	0x031EA458 B 0x31EA558
	0x031EA45C MOVZ W21, 0x3
	0x031EA460 B 0x31EA468
	0x031EA464 MOVZ W21, 0x4
	0x031EA468 ADRP X8, 0xF36000
	0x031EA46C LDR X8, [X8 + 0xBA0]
	0x031EA470 LDR X0, [X8]
	0x031EA474 BL 0x1C16F10
	0x031EA478 MOV X1, X31
	0x031EA47C MOV X22, X0
	0x031EA480 BL 0x3351F5C
	0x031EA484 MOV X0, X20
	0x031EA488 MOV W1, W31
	0x031EA48C STR X22, [X19 + 0x30]
	0x031EA490 BL 0x31E8704
	0x031EA494 CBZ X0, 0x31EA558
	0x031EA498 MOV W1, W21
	0x031EA49C BL 0x31E8704
	0x031EA4A0 CBZ X0, 0x31EA558
	0x031EA4A4 LDRB W8, [X0 + 0x10]
	0x031EA4A8 CMP W8, 0xA1
	0x031EA4AC B.NE 0x31EA560
	0x031EA4B0 MOV X0, X20
	0x031EA4B4 MOV W1, W31
	0x031EA4B8 BL 0x31E8704
	0x031EA4BC CBZ X0, 0x31EA558
	0x031EA4C0 MOV W22, W31
	0x031EA4C4 MOV W1, W21
	0x031EA4C8 BL 0x31E8704
	0x031EA4CC CBZ X0, 0x31EA558
	0x031EA4D0 LDR X0, [X0 + 0x20]
	0x031EA4D4 CBZ X0, 0x31EA4E8
	0x031EA4D8 LDR X8, [X0]
	0x031EA4DC LDR X9, [X8 + 0x298]
	0x031EA4E0 LDR X1, [X8 + 0x2A0]
	0x031EA4E4 BLR X9
	0x031EA4E8 CMP W22, W0
	0x031EA4EC B.GE 0x31EA55C
	0x031EA4F0 LDR X23, [X19 + 0x30]
	0x031EA4F4 MOV X0, X20
	0x031EA4F8 MOV W1, W31
	0x031EA4FC BL 0x31E8704
	0x031EA500 CBZ X0, 0x31EA558
	0x031EA504 MOV W1, W21
	0x031EA508 BL 0x31E8704
	0x031EA50C CBZ X0, 0x31EA558
	0x031EA510 MOV W1, W22
	0x031EA514 BL 0x31E8704
	0x031EA518 CBZ X0, 0x31EA558
	0x031EA51C LDR X8, [X0]
	0x031EA520 LDP X9, X1, [X8 + 0x178]
	0x031EA524 BLR X9
	0x031EA528 CBZ X23, 0x31EA558
	0x031EA52C LDR X8, [X23]
	0x031EA530 MOV X1, X0
	0x031EA534 MOV X0, X23
	0x031EA538 LDR X9, [X8 + 0x308]
	0x031EA53C LDR X2, [X8 + 0x310]
	0x031EA540 BLR X9
	0x031EA544 MOV X0, X20
	0x031EA548 MOV W1, W31
	0x031EA54C ADD W22, W22, 0x1
	0x031EA550 BL 0x31E8704
	0x031EA554 CBNZ X0, 0x31EA4C4
	0x031EA558 BL 0x1C16F20
	0x031EA55C ADD W21, W21, 0x1
	0x031EA560 MOV X0, X20
	0x031EA564 MOV W1, W31
	0x031EA568 BL 0x31E8704
	0x031EA56C CBZ X0, 0x31EA558
	0x031EA570 MOV W1, W21
	0x031EA574 BL 0x31E8704
	0x031EA578 CBZ X0, 0x31EA558
	0x031EA57C ADRP X22, 0xF36000
	0x031EA580 LDR X0, [X0 + 0x20]
	0x031EA584 LDR X22, [X22 + 0xCB0]
	0x031EA588 CBZ X0, 0x31EA5DC
	0x031EA58C LDR X8, [X0]
	0x031EA590 LDR X9, [X8 + 0x298]
	0x031EA594 LDR X1, [X8 + 0x2A0]
	0x031EA598 BLR X9
	0x031EA59C CMP W0, 0x1
	0x031EA5A0 B.LT 0x31EA5DC
	0x031EA5A4 MOV X0, X20
	0x031EA5A8 MOV W1, W31
	0x031EA5AC BL 0x31E8704
	0x031EA5B0 CBZ X0, 0x31EA558
	0x031EA5B4 MOV W1, W21
	0x031EA5B8 BL 0x31E8704
	0x031EA5BC LDR X8, [X22]
	0x031EA5C0 MOV X21, X0
	0x031EA5C4 MOV X0, X8
	0x031EA5C8 BL 0x1C16F10
	0x031EA5CC MOV X1, X21
	0x031EA5D0 MOV X20, X0
	0x031EA5D4 BL 0x31EA8B8
	0x031EA5D8 B 0x31EA5EC
	0x031EA5DC LDR X0, [X22]
	0x031EA5E0 BL 0x1C16F10
	0x031EA5E4 MOV X20, X0
	0x031EA5E8 BL 0x31EAC28
	0x031EA5EC STR X20, [X19 + 0x38]
	0x031EA5F0 CBZ X20, 0x31EA558
	0x031EA5F4 LDR X1, [X20 + 0x18]
	0x031EA5F8 CBZ X1, 0x31EA610
	0x031EA5FC BL 0x31EACAC
	0x031EA600 LDR X20, [X19 + 0x38]
	0x031EA604 STR X0, [X19 + 0x18]
	0x031EA608 CBZ X20, 0x31EA558
	0x031EA60C STR X0, [X20 + 0x18]
	0x031EA610 LDR X0, [X20 + 0x20]
	0x031EA614 CBZ X0, 0x31EA558
	0x031EA618 LDR X8, [X0]
	0x031EA61C LDR X9, [X8 + 0x298]
	0x031EA620 LDR X1, [X8 + 0x2A0]
	0x031EA624 BLR X9
	0x031EA628 CMP W0, 0x0
	0x031EA62C CSET W8, GT
	0x031EA630 STRB W8, [X19 + 0x40]
	0x031EA634 LDP X20, X19, [X31 + 0x30]
	0x031EA638 LDP X22, X21, [X31 + 0x20]
	0x031EA63C LDP X24, X23, [X31 + 0x10]
	0x031EA640 LDP X30, X25, [X31], #0x40
	0x031EA644 RET
	0x031EA648 ADRP X0, 0xF11000
	0x031EA64C LDR X0, [X0 + 0x578]
	0x031EA650 BL 0x1C16D08
	0x031EA654 BL 0x1C16F10
	0x031EA658 MOV X19, X0
	0x031EA65C ADRP X0, 0xF36000
	0x031EA660 LDR X0, [X0 + 0xCC8]
	0x031EA664 B 0x31EA684
	0x031EA668 ADRP X0, 0xF11000
	0x031EA66C LDR X0, [X0 + 0x578]
	0x031EA670 BL 0x1C16D08
	0x031EA674 BL 0x1C16F10
	0x031EA678 MOV X19, X0
	0x031EA67C ADRP X0, 0xF36000
	0x031EA680 LDR X0, [X0 + 0xC80]
	0x031EA684 BL 0x1C16D08
	0x031EA688 MOV X1, X0
	0x031EA68C MOV X0, X19
	0x031EA690 MOV X2, X31
	0x031EA694 BL 0x3314A68
	0x031EA698 ADRP X0, 0xF36000
	0x031EA69C LDR X0, [X0 + 0xCD0]
	0x031EA6A0 BL 0x1C16D08
	0x031EA6A4 MOV X1, X0
	0x031EA6A8 MOV X0, X19
	0x031EA6AC BL 0x1C16DEC
	0x031EA6B0 BL 0x1C16F28
	0x031EA6B4 MOV X1, X31
	0x031EA6B8 B 0x3351EFC
	0x031EA6BC STP X30, X21, [X31 - 0x20]!
	0x031EA6C0 STP X20, X19, [X31 + 0x10]
	0x031EA6C4 ADRP X21, 0x11F2000
	0x031EA6C8 LDRB W8, [X21 + 0x1A2]
	0x031EA6CC MOV X19, X1
	0x031EA6D0 MOV X20, X0
	0x031EA6D4 TBNZ X8, 0x0, 0x31EA6F8
	0x031EA6D8 ADRP X0, 0xF36000
	0x031EA6DC LDR X0, [X0 + 0xCC0]
	0x031EA6E0 BL 0x1C16CF4
	0x031EA6E4 ADRP X0, 0xF36000
	0x031EA6E8 LDR X0, [X0 + 0xCD8]
	0x031EA6EC BL 0x1C16CF4
	0x031EA6F0 MOVZ W8, 0x1
	0x031EA6F4 STRB W8, [X21 + 0x1A2]
	0x031EA6F8 MOV X0, X20
	0x031EA6FC MOV X1, X31
	0x031EA700 BL 0x33BDD8C
	0x031EA704 CBZ X19, 0x31EA764
	0x031EA708 LDR X8, [X19 + 0x18]
	0x031EA70C CBZ X8, 0x31EA750
	0x031EA710 CBZ W8, 0x31EA770
	0x031EA714 LDRB W8, [X19 + 0x20]
	0x031EA718 CMP W8, 0x30
	0x031EA71C B.EQ 0x31EA750
	0x031EA720 ADRP X8, 0xF36000
	0x031EA724 LDR X8, [X8 + 0xCC0]
	0x031EA728 LDR X0, [X8]
	0x031EA72C LDR W8, [X0 + 0xE0]
	0x031EA730 CBNZ W8, 0x31EA738
	0x031EA734 BL 0x1C16DFC
	0x031EA738 ADRP X8, 0xF36000
	0x031EA73C LDR X8, [X8 + 0xCD8]
	0x031EA740 LDR X0, [X8]
	0x031EA744 MOV X1, X19
	0x031EA748 BL 0x31F4F70
	0x031EA74C MOV X19, X0
	0x031EA750 MOV X0, X20
	0x031EA754 MOV X1, X19
	0x031EA758 LDP X20, X19, [X31 + 0x10]
	0x031EA75C LDP X30, X21, [X31], #0x20
	0x031EA760 B 0x31F46AC
	0x031EA764 LDP X20, X19, [X31 + 0x10]
	0x031EA768 LDP X30, X21, [X31], #0x20
	0x031EA76C RET
	0x031EA770 BL 0x1C16F28
	0x031EA774 B 0x31EA778
	0x031EA778 MOV X19, X0
	0x031EA77C CMP W1, 0x1
	0x031EA780 B.NE 0x31EA83C
	0x031EA784 MOV X0, X19
	0x031EA788 BL 0x3EB1AD0
	0x031EA78C MOV X19, X0
	0x031EA790 ADRP X0, 0xF09000
	0x031EA794 LDR X0, [X0 + 0x7D0]
	0x031EA798 BL 0x1C16D08
	0x031EA79C LDR X8, [X19]
	0x031EA7A0 LDR X1, [X8]
	0x031EA7A4 BL 0x1C17270
	0x031EA7A8 TBZ X0, 0x0, 0x31EA814
	0x031EA7AC LDR X19, [X19]
	0x031EA7B0 BL 0x3EB1AE0
	0x031EA7B4 ADRP X20, 0xF36000
	0x031EA7B8 LDR X20, [X20 + 0xCC0]
	0x031EA7BC MOV X0, X20
	0x031EA7C0 BL 0x1C16D08
	0x031EA7C4 BL 0x19903D0
	0x031EA7C8 MOV X0, X20
	0x031EA7CC BL 0x1C16D08
	0x031EA7D0 LDR X8, [X0 + 0xB8]
	0x031EA7D4 ADRP X0, 0xF36000
	0x031EA7D8 LDR X20, [X8]
	0x031EA7DC LDR X0, [X0 + 0xCE0]
	0x031EA7E0 BL 0x1C16D08
	0x031EA7E4 BL 0x1C16F10
	0x031EA7E8 MOV X1, X20
	0x031EA7EC MOV X2, X19
	0x031EA7F0 MOV X3, X31
	0x031EA7F4 MOV X21, X0
	0x031EA7F8 BL 0x325240C
	0x031EA7FC ADRP X0, 0xF36000
	0x031EA800 LDR X0, [X0 + 0xCE8]
	0x031EA804 BL 0x1C16D08
	0x031EA808 MOV X1, X0
	0x031EA80C MOV X0, X21
	0x031EA810 BL 0x1C16DEC
	0x031EA814 MOVZ W0, 0x8
	0x031EA818 BL 0x3EB1AF0
	0x031EA81C LDR X8, [X19]
	0x031EA820 STR X8, [X0]
	0x031EA824 ADRP X1, 0xCCA000
	0x031EA828 ADD X1, X1, 0xE58
	0x031EA82C MOV X2, X31
	0x031EA830 BL 0x3EB1B00
	0x031EA834 MOV X19, X0
	0x031EA838 BL 0x3EB1AE0
	0x031EA83C MOV X0, X19
	0x031EA840 BL 0x1D2C690
	0x031EA844 BL 0x1990590
	0x031EA848 STP X30, X19, [X31 - 0x10]!
	0x031EA84C CBZ X1, 0x31EA86C
	0x031EA850 LDR X0, [X0 + 0x10]
	0x031EA854 CBZ X0, 0x31EA8B4
	0x031EA858 LDR X8, [X0]
	0x031EA85C LDR X3, [X8 + 0x308]
	0x031EA860 LDR X2, [X8 + 0x310]
	0x031EA864 LDP X30, X19, [X31], #0x10
	0x031EA868 BR X3
	0x031EA86C ADRP X0, 0xF0E000
	0x031EA870 LDR X0, [X0 + 0x528]
	0x031EA874 BL 0x1C16D08
	0x031EA878 BL 0x1C16F10
	0x031EA87C MOV X19, X0
	0x031EA880 ADRP X0, 0xF13000
	0x031EA884 LDR X0, [X0 + 0xEC8]
	0x031EA888 BL 0x1C16D08
	0x031EA88C MOV X1, X0
	0x031EA890 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X20, 0x11F3000
	010 Move W8, [X20+363]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {51}
	016 Move X0, 0xF0C000
	017 Move X0, [X0+368]
	018 Call 0x1C17CF4
	019 Move X0, 0xF13000
	020 Move X0, [X0+2536]
	021 Call 0x1C17CF4
	022 Move X0, 0xF0C000
	023 Move X0, [X0+3144]
	024 Call 0x1C17CF4
	025 Move X0, 0xF0B000
	026 Move X0, [X0+2544]
	027 Call 0x1C17CF4
	028 Move X0, 0xF0A000
	029 Move X0, [X0+2512]
	030 Call 0x1C17CF4
	031 Move X0, 0xF11000
	032 Move X0, [X0+4000]
	033 Call 0x1C17CF4
	034 Move X0, 0xF37000
	035 Move X0, [X0+3112]
	036 Call 0x1C17CF4
	037 Move X0, 0xF37000
	038 Move X0, [X0+3120]
	039 Call 0x1C17CF4
	040 Move X0, 0xF37000
	041 Move X0, [X0+3128]
	042 Call 0x1C17CF4
	043 Move X0, 0xF12000
	044 Move X0, [X0+576]
	045 Call 0x1C17CF4
	046 Move X0, 0xF37000
	047 Move X0, [X0+3136]
	048 Call 0x1C17CF4
	049 Move W8, 1
	050 Move [X20+363], W8
	051 Compare X19, 0
	052 JumpIfEqual {352}
	053 Move X0, X31
	054 Call Encoding.get_ASCII
	055 Move X20, X0
	056 Move X0, X19
	057 Call ASN1.get_Value, X0
	058 Compare X20, 0
	059 JumpIfEqual {350}
	060 Move X8, [X20]
	061 Move X1, X0
	062 Move X0, X20
	063 Move X9, [X8+888]
	064 Move X2, [X8+896]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Compare X0, 0
	067 JumpIfEqual {350}
	068 Move W8, [X0+16]
	069 Move X22, 0xF0C000
	070 Move X22, [X22+3144]
	071 Move X19, X0
	072 Subtract W8, W8, 11
	073 Move X20, X31
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X9, -40185856
	076 Add X9, X9, 1042
	077 NotImplemented "Instruction ADR not yet implemented."
	078 Move W11, [X9]
	079 Add X10, X10, X11
	080 CallNoReturn X10
	081 Move X8, 0xF37000
	082 Move X8, [X8+3136]
	083 Move W2, 2
	084 Move X0, X19
	085 Move W1, W31
	086 Move X3, X31
	087 Call String.Substring, X0, X1, X2
	088 Move X8, [X22]
	089 Move X20, X0
	090 Move W9, [X8+224]
	091 Compare W9, 0
	092 JumpIfNotEqual {95}
	093 Move X0, X8
	094 Call 0x1C17DFC
	095 Move X0, X31
	096 Call CultureInfo.get_InvariantCulture
	097 Move X8, 0xF13000
	098 Move X8, [X8+2536]
	099 Move X21, X0
	100 Move X8, [X8]
	101 Move W9, [X8+224]
	102 Compare W9, 0
	103 JumpIfNotEqual {106}
	104 Move X0, X8
	105 Call 0x1C17DFC
	106 Move X0, X20
	107 Move X1, X21
	108 Move X2, X31
	109 Call Convert.ToInt16, X0, X1
	110 Move X9, 0xF11000
	111 Move X10, 0xF12000
	112 Move X9, [X9+4000]
	113 Move X10, [X10+576]
	114 NotImplemented "Instruction SXTH not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X1, X19
	117 NotImplemented "Instruction CSEL not yet implemented."
	118 Move X0, [X8]
	119 Move X2, X31
	120 Call String.Concat, X0, X1
	121 Move X8, 0xF37000
	122 Move X8, [X8+3128]
	123 Move X8, 0xF37000
	124 Move X8, [X8+3128]
	125 Move X20, [X8]
	126 Move W2, 2
	127 Move X0, X19
	128 Move W1, W31
	129 Move X3, X31
	130 Call String.Substring, X0, X1, X2
	131 Move X8, [X22]
	132 Move X20, X0
	133 Move W9, [X8+224]
	134 Compare W9, 0
	135 JumpIfNotEqual {138}
	136 Move X0, X8
	137 Call 0x1C17DFC
	138 Move X0, X31
	139 Call CultureInfo.get_InvariantCulture
	140 Move X8, 0xF13000
	141 Move X8, [X8+2536]
	142 Move X21, X0
	143 Move X8, [X8]
	144 Move W9, [X8+224]
	145 Compare W9, 0
	146 JumpIfNotEqual {149}
	147 Move X0, X8
	148 Call 0x1C17DFC
	149 Move X0, X20
	150 Move X1, X21
	151 Move X2, X31
	152 Call Convert.ToInt16, X0, X1
	153 Move X9, 0xF12000
	154 Move X10, 0xF11000
	155 Move X9, [X9+576]
	156 Move X10, [X10+4000]
	157 NotImplemented "Instruction SXTH not yet implemented."
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move W1, 12
	160 NotImplemented "Instruction CSEL not yet implemented."
	161 Move X21, [X8]
	162 Move X0, X19
	163 Move X2, X31
	164 Call String.get_Chars, X0, X1
	165 Move X9, 0xF0A000
	166 Move X9, [X9+2512]
	167 And W8, W0, 0xFFFF
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Move W8, 43
	170 Move X0, [X9]
	171 Move W9, 45
	172 Move W1, 7
	173 NotImplemented "Instruction CSEL not yet implemented."
	174 Call 0x1C17D6C
	175 Compare X0, 0
	176 JumpIfEqual {350}
	177 Move X20, X0
	178 Compare X21, 0
	179 JumpIfEqual {186}
	180 Move X8, [X20]
	181 Move X0, X21
	182 Move X1, [X8+64]
	183 Call 0x1C17E00
	184 Compare X0, 0
	185 JumpIfEqual {370}
	186 Move W8, [X20+24]
	187 Compare W8, 0
	188 JumpIfEqual {351}
	189 Move W2, 12
	190 Move X0, X19
	191 Move W1, W31
	192 Move X3, X31
	193 Move [X20+32], X21
	194 Call String.Substring, X0, X1, X2
	195 Move X21, X0
	196 Compare X0, 0
	197 JumpIfEqual {204}
	198 Move X8, [X20]
	199 Move X0, X21
	200 Move X1, [X8+64]
	201 Call 0x1C17E00
	202 Compare X0, 0
	203 JumpIfEqual {370}
	204 Move W8, [X20+24]
	205 NotImplemented "Instruction CMP not yet implemented."
	206 Move [X20+40], X21
	207 Move X23, 0xF0C000
	208 Move X23, [X23+368]
	209 Add X1, X31, 28
	210 NotImplemented "Instruction STRH not yet implemented."
	211 Move X0, [X23]
	212 Call 0x1C17E04
	213 Move X21, X0
	214 Compare X0, 0
	215 JumpIfEqual {222}
	216 Move X8, [X20]
	217 Move X0, X21
	218 Move X1, [X8+64]
	219 Call 0x1C17E00
	220 Compare X0, 0
	221 JumpIfEqual {370}
	222 Move W8, [X20+24]
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Move W1, 13
	225 Move X0, X19
	226 Move X2, X31
	227 Move [X20+48], X21
	228 Call String.get_Chars, X0, X1
	229 Move X8, [X23]
	230 NotImplemented "Instruction STRH not yet implemented."
	231 Add X1, X31, 24
	232 Move X0, X8
	233 Call 0x1C17E04
	234 Move X21, X0
	235 Compare X0, 0
	236 JumpIfEqual {243}
	237 Move X8, [X20]
	238 Move X0, X21
	239 Move X1, [X8+64]
	240 Call 0x1C17E00
	241 Compare X0, 0
	242 JumpIfEqual {370}
	243 Move W8, [X20+24]
	244 NotImplemented "Instruction CMP not yet implemented."
	245 Move W1, 14
	246 Move X0, X19
	247 Move X2, X31
	248 Move [X20+56], X21
	249 Call String.get_Chars, X0, X1
	250 Move X8, [X23]
	251 NotImplemented "Instruction STRH not yet implemented."
	252 Add X1, X31, 12
	253 Move X0, X8
	254 Call 0x1C17E04
	255 Move X21, X0
	256 Compare X0, 0
	257 JumpIfEqual {264}
	258 Move X8, [X20]
	259 Move X0, X21
	260 Move X1, [X8+64]
	261 Call 0x1C17E00
	262 Compare X0, 0
	263 JumpIfEqual {370}
	264 Move W8, [X20+24]
	265 NotImplemented "Instruction CMP not yet implemented."
	266 Move W1, 15
	267 Move X0, X19
	268 Move X2, X31
	269 Move [X20+64], X21
	270 Call String.get_Chars, X0, X1
	271 Move X8, [X23]
	272 NotImplemented "Instruction STRH not yet implemented."
	273 Add X1, X31, 8
	274 Move X0, X8
	275 Call 0x1C17E04
	276 Move X21, X0
	277 Compare X0, 0
	278 JumpIfEqual {285}
	279 Move X8, [X20]
	280 Move X0, X21
	281 Move X1, [X8+64]
	282 Call 0x1C17E00
	283 Compare X0, 0
	284 JumpIfEqual {370}
	285 Move W8, [X20+24]
	286 NotImplemented "Instruction CMP not yet implemented."
	287 Move W1, 16
	288 Move X0, X19
	289 Move X2, X31
	290 Move [X20+72], X21
	291 Call String.get_Chars, X0, X1
	292 Move X8, [X23]
	293 NotImplemented "Instruction STRH not yet implemented."
	294 Add X1, X31, 4
	295 Move X0, X8
	296 Call 0x1C17E04
	297 Move X19, X0
	298 Compare X0, 0
	299 JumpIfEqual {306}
	300 Move X8, [X20]
	301 Move X0, X19
	302 Move X1, [X8+64]
	303 Call 0x1C17E00
	304 Compare X0, 0
	305 JumpIfEqual {370}
	306 Move W8, [X20+24]
	307 NotImplemented "Instruction CMP not yet implemented."
	308 Move [X20+80], X19
	309 Move X8, 0xF37000
	310 Move X8, [X8+3120]
	311 Move X1, X20
	312 Move X2, X31
	313 Move X0, [X8]
	314 Call String.Format, X0, X1
	315 Move X8, 0xF37000
	316 Move X8, [X8+3112]
	317 Move X20, [X8]
	318 Move X19, X0
	319 Move X0, [X22]
	320 Move X21, 0xF0B000
	321 Move W8, [X0+224]
	322 Move X21, [X21+2544]
	323 Compare W8, 0
	324 JumpIfNotEqual {326}
	325 Call 0x1C17DFC
	326 Move X0, X31
	327 Call CultureInfo.get_InvariantCulture
	328 Move X8, [X21]
	329 Move X21, X0
	330 Move W9, [X8+224]
	331 Compare W9, 0
	332 JumpIfNotEqual {335}
	333 Move X0, X8
	334 Call 0x1C17DFC
	335 Move W3, 16
	336 Move X0, X19
	337 Move X1, X20
	338 Move X2, X21
	339 Move X4, X31
	340 Call DateTime.ParseExact, X0, X1, X2, X3
	341 Move X20, [X31+64]
	342 Move X19, [X31+72]
	343 Move X22, [X31+48]
	344 Move X21, [X31+56]
	345 Move X24, [X31+32]
	346 Move X23, [X31+40]
	347 Move X30, [X31+16]
	348 Add X31, X31, 80
	349 Return X0
	350 Call 0x1C17F20
	351 Call 0x1C17F28
	352 Move X0, 0xF0F000
	353 Move X0, [X0+1320]
	354 Call 0x1C17D08
	355 Call 0x1C17F10
	356 Move X19, X0
	357 Move X0, 0xF37000
	358 Move X0, [X0+24]
	359 Call 0x1C17D08
	360 Move X1, X0
	361 Move X0, X19
	362 Move X2, X31
	363 Call ArgumentNullException..ctor, X0, X1
	364 Move X0, 0xF37000
	365 Move X0, [X0+3144]
	366 Call 0x1C17D08
	367 Move X1, X0
	368 Move X0, X19
	369 Call 0x1C17DEC
	370 Call 0x1C17F44
	371 Move X1, X31
	372 Call 0x1C17DEC

