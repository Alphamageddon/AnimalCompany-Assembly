Type: Mono.Security.X509.PKCS12/DeriveBytes

Method: System.Void .ctor()

Disassembly:
	0x031EE750 LDR X8, [X21]
	0x031EE754 LDR X1, [X19]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void set_HashName(System.String value)

Disassembly:
	0x031F2F7C LDR X23, [X23 + 0x70]
	0x031F2F80 LDR X22, [X22 + 0x78]

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Void set_IterationCount(System.Int32 value)

Disassembly:
	0x031F2F84 LDRB W8, [X29 + 0x197]
	0x031F2F88 TBNZ X8, 0x0, 0x31F306C

ISIL:
	001 Move [X0+24], W1
	002 Return 

Method: System.Void set_Password(System.Byte[] value)

Disassembly:
	0x031EE758 LDRH W9, [X8 + 0x12E]
	0x031EE75C CBZ X9, 0x31EE780
	0x031EE760 LDR X10, [X8 + 0xB0]
	0x031EE764 ADD X10, X10, 0x8
	0x031EE768 LDUR X11, [X10 - 0x8]
	0x031EE76C CMP X11, X1
	0x031EE770 B.EQ 0x31EE790
	0x031EE774 SUBS X9, X9, 0x1
	0x031EE778 ADD X10, X10, 0x10
	0x031EE77C B.NE 0x31EE768
	0x031EE780 MOVZ W2, 0x6
	0x031EE784 MOV X0, X21
	0x031EE788 BL 0x1C5C788
	0x031EE78C B 0x31EE7A0
	0x031EE790 LDR W9, [X10]
	0x031EE794 ADD W9, W9, 0x6
	0x031EE798 ADD X8, X8, W9, 0x4, SXTW
	0x031EE79C ADD X0, X8, 0x138
	0x031EE7A0 LDP X8, X1, [X0]
	0x031EE7A4 MOV X0, X21
	0x031EE7A8 BLR X8
	0x031EE7AC CBZ X0, 0x31EEFD8
	0x031EE7B0 ADRP X29, 0xF05000
	0x031EE7B4 ADRP X19, 0xF05000
	0x031EE7B8 LDR X29, [X29 + 0xE18]
	0x031EE7BC LDR X19, [X19 + 0x618]
	0x031EE7C0 MOV X21, X0
	0x031EE7C4 MOVZ W20, 0x1E
	0x031EE7C8 STR X23, [X31 + 0x8]
	0x031EE7CC LDR X8, [X21]
	0x031EE7D0 LDR X1, [X29]
	0x031EE7D4 LDRH W9, [X8 + 0x12E]
	0x031EE7D8 CBZ X9, 0x31EE7FC
	0x031EE7DC LDR X10, [X8 + 0xB0]
	0x031EE7E0 ADD X10, X10, 0x8
	0x031EE7E4 LDUR X11, [X10 - 0x8]
	0x031EE7E8 CMP X11, X1
	0x031EE7EC B.EQ 0x31EE80C
	0x031EE7F0 SUBS X9, X9, 0x1
	0x031EE7F4 ADD X10, X10, 0x10
	0x031EE7F8 B.NE 0x31EE7E4
	0x031EE7FC MOV X0, X21
	0x031EE800 MOV W2, W31
	0x031EE804 BL 0x1C5C788
	0x031EE808 B 0x31EE818
	0x031EE80C LDRSW X9, [X10]
	0x031EE810 ADD X8, X8, X9, 0x4, LSL

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11EF000
	007 Move W8, [X21+397]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF06000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+397], W8
	019 Move X22, 0xF06000
	020 Move X22, [X22+1560]
	021 Compare X20, 0
	022 JumpIfEqual {44}
	023 Move X0, X20
	024 Move X1, X31
	025 Call Array.Clone, X0
	026 Compare X0, 0
	027 JumpIfEqual {48}
	028 Move X21, [X22]
	029 Move X20, X0
	030 Move X1, X21
	031 Call 0x1C17E00
	032 Compare X0, 0
	033 JumpIfEqual {55}
	034 Move [X19+32], X0
	035 Move X19, [X22]
	036 Move X0, X20
	037 Move X1, X19
	038 Call 0x1C17E00
	039 Compare X0, 0
	040 JumpIfNotEqual {49}
	041 Move X0, X20
	042 Move X1, X19
	043 Call 0x1C181E0
	044 Move X0, [X22]
	045 Move W1, W31
	046 Call 0x1C17D6C
	047 Move [X19+32], X0
	048 Move [X19+32], X31
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Return 
	055 Move X0, X20
	056 Move X1, X21
	057 Call 0x1C181E0

Method: System.Void set_Salt(System.Byte[] value)

Disassembly:
	0x031EE814 ADD X0, X8, 0x138
	0x031EE818 LDP X8, X1, [X0]
	0x031EE81C MOV X0, X21
	0x031EE820 BLR X8
	0x031EE824 TBZ X0, 0x0, 0x31EEF80
	0x031EE828 LDR X8, [X21]
	0x031EE82C ADRP X10, 0xF32000
	0x031EE830 LDRH W9, [X8 + 0x12E]
	0x031EE834 LDR X10, [X10 + 0xF80]
	0x031EE838 LDR X1, [X10]
	0x031EE83C CBZ X9, 0x31EE860
	0x031EE840 LDR X10, [X8 + 0xB0]
	0x031EE844 ADD X10, X10, 0x8
	0x031EE848 LDUR X11, [X10 - 0x8]
	0x031EE84C CMP X11, X1
	0x031EE850 B.EQ 0x31EE870
	0x031EE854 SUBS X9, X9, 0x1
	0x031EE858 ADD X10, X10, 0x10
	0x031EE85C B.NE 0x31EE848
	0x031EE860 MOV X0, X21
	0x031EE864 MOV W2, W31
	0x031EE868 BL 0x1C5C788
	0x031EE86C B 0x31EE87C
	0x031EE870 LDRSW X9, [X10]
	0x031EE874 ADD X8, X8, X9, 0x4, LSL
	0x031EE878 ADD X0, X8, 0x138
	0x031EE87C LDP X8, X1, [X0]
	0x031EE880 MOV X0, X21
	0x031EE884 BLR X8
	0x031EE888 MOV X22, X0
	0x031EE88C CBZ X0, 0x31EE8A8
	0x031EE890 ADRP X8, 0xF07000
	0x031EE894 LDR X8, [X8 + 0x278]
	0x031EE898 LDR X1, [X8]
	0x031EE89C LDR X8, [X22]
	0x031EE8A0 CMP X8, X1
	0x031EE8A4 B.NE 0x31EEFDC
	0x031EE8A8 ADRP X8, 0xF32000
	0x031EE8AC LDR X8, [X8 + 0xE10]
	0x031EE8B0 MOV X0, X22
	0x031EE8B4 MOV X2, X31
	0x031EE8B8 LDR X1, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11EF000
	007 Move W8, [X21+398]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF06000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+398], W8
	019 Compare X20, 0
	020 JumpIfEqual {44}
	021 Move X0, X20
	022 Move X1, X31
	023 Call Array.Clone, X0
	024 Compare X0, 0
	025 JumpIfEqual {44}
	026 Move X22, 0xF06000
	027 Move X22, [X22+1560]
	028 Move X20, X0
	029 Move X21, [X22]
	030 Move X1, X21
	031 Call 0x1C17E00
	032 Compare X0, 0
	033 JumpIfEqual {51}
	034 Move [X19+40], X0
	035 Move X19, [X22]
	036 Move X0, X20
	037 Move X1, X19
	038 Call 0x1C17E00
	039 Compare X0, 0
	040 JumpIfNotEqual {45}
	041 Move X0, X20
	042 Move X1, X19
	043 Call 0x1C181E0
	044 Move [X19+40], X31
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Return 
	051 Move X0, X20
	052 Move X1, X21
	053 Call 0x1C181E0

Method: System.Void Adjust(System.Byte[] a, System.Int32 aOff, System.Byte[] b)

Disassembly:
	0x031F2F8C ADRP X0, 0xF01000
	0x031F2F90 LDR X0, [X0 + 0x618]
	0x031F2F94 BL 0x1C16CF4
	0x031F2F98 ADRP X0, 0xF2F000
	0x031F2F9C LDR X0, [X0 + 0x50]
	0x031F2FA0 BL 0x1C16CF4
	0x031F2FA4 ADRP X0, 0xF2F000
	0x031F2FA8 LDR X0, [X0 + 0x80]
	0x031F2FAC BL 0x1C16CF4
	0x031F2FB0 ADRP X0, 0xF2F000
	0x031F2FB4 LDR X0, [X0 + 0x48]
	0x031F2FB8 BL 0x1C16CF4
	0x031F2FBC ADRP X0, 0xF2F000
	0x031F2FC0 LDR X0, [X0 + 0x88]
	0x031F2FC4 BL 0x1C16CF4
	0x031F2FC8 ADRP X0, 0xF2F000
	0x031F2FCC LDR X0, [X0 + 0x40]
	0x031F2FD0 BL 0x1C16CF4
	0x031F2FD4 ADRP X0, 0xF2F000
	0x031F2FD8 LDR X0, [X0 + 0x90]
	0x031F2FDC BL 0x1C16CF4
	0x031F2FE0 ADRP X0, 0xF2F000
	0x031F2FE4 LDR X0, [X0 + 0x98]
	0x031F2FE8 BL 0x1C16CF4
	0x031F2FEC ADRP X0, 0xF2F000
	0x031F2FF0 LDR X0, [X0 + 0xA0]
	0x031F2FF4 BL 0x1C16CF4
	0x031F2FF8 ADRP X0, 0xF2F000
	0x031F2FFC LDR X0, [X0 + 0xA8]
	0x031F3000 BL 0x1C16CF4
	0x031F3004 ADRP X0, 0xF2E000
	0x031F3008 LDR X0, [X0 + 0x60]
	0x031F300C BL 0x1C16CF4
	0x031F3010 ADRP X0, 0xF2E000
	0x031F3014 LDR X0, [X0 + 0x70]
	0x031F3018 BL 0x1C16CF4
	0x031F301C ADRP X0, 0xF2E000
	0x031F3020 LDR X0, [X0 + 0x78]
	0x031F3024 BL 0x1C16CF4
	0x031F3028 ADRP X0, 0xF2E000
	0x031F302C LDR X0, [X0 + 0xB0]
	0x031F3030 BL 0x1C16CF4
	0x031F3034 ADRP X0, 0xF2E000
	0x031F3038 LDR X0, [X0 + 0x68]
	0x031F303C BL 0x1C16CF4
	0x031F3040 ADRP X0, 0xF2E000
	0x031F3044 LDR X0, [X0 + 0x58]
	0x031F3048 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Compare X3, 0
	003 JumpIfEqual {47}
	004 Move X8, [X3+24]
	005 Compare W8, 0
	006 JumpIfEqual {44}
	007 Compare X1, 0
	008 JumpIfEqual {47}
	009 Move W10, [X1+24]
	010 Add W9, W2, W8
	011 Subtract W9, W9, 1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Subtract W8, W8, 1
	014 Add X10, X1, W9
	015 Add X8, X3, W8
	016 Move W8, [X8+32]
	017 Move W9, [X10+32]
	018 Add W8, W8, W9
	019 Add W9, W8, 1
	020 Move [X10+32], W9
	021 Move X10, [X3+24]
	022 Subtract W8, W10, 2
	023 And X10, X10, 0
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W8, W8
	026 Move W11, W9
	027 ShiftRight W11, 8
	028 And W11, W11, 0x7FFFFFFF
	029 Add X9, X3, 32
	030 Move W10, W2
	031 Move W13, [X1+24]
	032 Add X12, X10, X8
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W13, [X9]
	035 Add X12, X1, W12
	036 Move W14, [X12+32]
	037 Subtract X8, X8, 1
	038 Add W11, W11, W13
	039 Add W11, W11, W14
	040 Move [X12+32], W11
	041 Move W12, [X3+24]
	042 NotImplemented "Instruction SBFM not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Call 0x1C17F28
	045 Move X30, [X31+16]
	046 Return 
	047 Call 0x1C17F20

Method: System.Byte[] Derive(System.Byte[] diversifier, System.Int32 n)

Disassembly:
	0x031F304C ADRP X0, 0xF2E000
	0x031F3050 LDR X0, [X0 + 0xB8]
	0x031F3054 BL 0x1C16CF4
	0x031F3058 ADRP X0, 0xF2D000
	0x031F305C LDR X0, [X0 + 0xCF8]
	0x031F3060 BL 0x1C16CF4
	0x031F3064 MOVZ W8, 0x1
	0x031F3068 STRB W8, [X29 + 0x197]
	0x031F306C LDR X0, [X21]
	0x031F3070 MOVZ W1, 0x3
	0x031F3074 BL 0x1C16D6C
	0x031F3078 LDR X1, [X19]
	0x031F307C MOV X2, X31
	0x031F3080 MOV X19, X0
	0x031F3084 BL 0x32C5BD8
	0x031F3088 LDR X8, [X20]
	0x031F308C MOVZ W1, 0x3
	0x031F3090 LDR X8, [X8 + 0xB8]
	0x031F3094 STR X19, [X8]
	0x031F3098 LDR X0, [X21]
	0x031F309C BL 0x1C16D6C
	0x031F30A0 LDR X1, [X28]
	0x031F30A4 MOV X2, X31
	0x031F30A8 MOV X19, X0
	0x031F30AC BL 0x32C5BD8
	0x031F30B0 LDR X8, [X20]
	0x031F30B4 MOVZ W1, 0x3
	0x031F30B8 LDR X8, [X8 + 0xB8]
	0x031F30BC STR X19, [X8 + 0x8]
	0x031F30C0 LDR X0, [X21]
	0x031F30C4 BL 0x1C16D6C
	0x031F30C8 LDR X1, [X27]
	0x031F30CC MOV X2, X31
	0x031F30D0 MOV X19, X0
	0x031F30D4 BL 0x32C5BD8
	0x031F30D8 LDR X8, [X20]
	0x031F30DC MOVZ W1, 0x3
	0x031F30E0 LDR X8, [X8 + 0xB8]
	0x031F30E4 STR X19, [X8 + 0x10]
	0x031F30E8 LDR X0, [X21]
	0x031F30EC BL 0x1C16D6C
	0x031F30F0 LDR X1, [X26]
	0x031F30F4 MOV X2, X31
	0x031F30F8 MOV X19, X0
	0x031F30FC BL 0x32C5BD8
	0x031F3100 LDR X8, [X20]
	0x031F3104 MOVZ W1, 0x3
	0x031F3108 LDR X8, [X8 + 0xB8]
	0x031F310C STR X19, [X8 + 0x18]
	0x031F3110 LDR X0, [X21]
	0x031F3114 BL 0x1C16D6C
	0x031F3118 LDR X1, [X25]
	0x031F311C MOV X2, X31
	0x031F3120 MOV X19, X0
	0x031F3124 BL 0x32C5BD8
	0x031F3128 LDR X8, [X20]
	0x031F312C MOVZ W1, 0x3
	0x031F3130 LDR X8, [X8 + 0xB8]
	0x031F3134 STR X19, [X8 + 0x20]
	0x031F3138 LDR X0, [X21]
	0x031F313C BL 0x1C16D6C
	0x031F3140 LDR X1, [X24]
	0x031F3144 MOV X2, X31
	0x031F3148 MOV X19, X0
	0x031F314C BL 0x32C5BD8
	0x031F3150 LDR X8, [X20]
	0x031F3154 MOVZ W1, 0x3
	0x031F3158 LDR X8, [X8 + 0xB8]
	0x031F315C STR X19, [X8 + 0x28]
	0x031F3160 LDR X0, [X21]
	0x031F3164 BL 0x1C16D6C
	0x031F3168 LDR X1, [X23]
	0x031F316C MOV X2, X31
	0x031F3170 MOV X19, X0
	0x031F3174 BL 0x32C5BD8
	0x031F3178 LDR X8, [X20]
	0x031F317C MOVZ W1, 0x3
	0x031F3180 LDR X8, [X8 + 0xB8]
	0x031F3184 STR X19, [X8 + 0x30]
	0x031F3188 LDR X0, [X21]
	0x031F318C BL 0x1C16D6C
	0x031F3190 LDR X1, [X22]
	0x031F3194 MOV X2, X31
	0x031F3198 MOV X19, X0
	0x031F319C BL 0x32C5BD8
	0x031F31A0 LDR X8, [X20]
	0x031F31A4 MOVZ W1, 0xA
	0x031F31A8 LDR X8, [X8 + 0xB8]
	0x031F31AC STR X19, [X8 + 0x38]
	0x031F31B0 LDR X0, [X21]
	0x031F31B4 BL 0x1C16D6C
	0x031F31B8 ADRP X8, 0xF2E000
	0x031F31BC LDR X8, [X8 + 0x98]
	0x031F31C0 MOV X2, X31
	0x031F31C4 MOV X19, X0
	0x031F31C8 LDR X1, [X8]
	0x031F31CC BL 0x32C5BD8
	0x031F31D0 LDR X8, [X20]
	0x031F31D4 MOVZ W1, 0xA
	0x031F31D8 LDR X8, [X8 + 0xB8]
	0x031F31DC STR X19, [X8 + 0x40]
	0x031F31E0 LDR X0, [X21]
	0x031F31E4 BL 0x1C16D6C
	0x031F31E8 ADRP X8, 0xF2E000
	0x031F31EC LDR X8, [X8 + 0xA0]
	0x031F31F0 MOV X2, X31
	0x031F31F4 MOV X19, X0
	0x031F31F8 LDR X1, [X8]
	0x031F31FC BL 0x32C5BD8
	0x031F3200 LDR X8, [X20]
	0x031F3204 MOVZ W1, 0x9
	0x031F3208 LDR X8, [X8 + 0xB8]
	0x031F320C STR X19, [X8 + 0x48]
	0x031F3210 LDR X0, [X21]
	0x031F3214 BL 0x1C16D6C
	0x031F3218 ADRP X8, 0xF2E000
	0x031F321C LDR X8, [X8 + 0xA8]
	0x031F3220 MOV X2, X31
	0x031F3224 MOV X19, X0
	0x031F3228 LDR X1, [X8]
	0x031F322C BL 0x32C5BD8
	0x031F3230 LDR X8, [X20]
	0x031F3234 MOVZ W1, 0x3
	0x031F3238 LDR X8, [X8 + 0xB8]
	0x031F323C STR X19, [X8 + 0x50]
	0x031F3240 LDR X0, [X21]
	0x031F3244 BL 0x1C16D6C
	0x031F3248 ADRP X8, 0xF2E000
	0x031F324C LDR X8, [X8 + 0xB0]
	0x031F3250 MOV X2, X31
	0x031F3254 MOV X19, X0
	0x031F3258 LDR X1, [X8]
	0x031F325C BL 0x32C5BD8
	0x031F3260 LDR X8, [X20]
	0x031F3264 MOVZ W1, 0x3
	0x031F3268 LDR X8, [X8 + 0xB8]
	0x031F326C STR X19, [X8 + 0x58]
	0x031F3270 LDR X0, [X21]
	0x031F3274 BL 0x1C16D6C
	0x031F3278 ADRP X8, 0xF2E000
	0x031F327C LDR X8, [X8 + 0x90]
	0x031F3280 MOV X2, X31
	0x031F3284 MOV X19, X0
	0x031F3288 LDR X1, [X8]
	0x031F328C BL 0x32C5BD8
	0x031F3290 LDR X8, [X20]
	0x031F3294 MOVZ W1, 0x3
	0x031F3298 LDR X8, [X8 + 0xB8]
	0x031F329C STR X19, [X8 + 0x60]
	0x031F32A0 LDR X0, [X21]
	0x031F32A4 BL 0x1C16D6C
	0x031F32A8 ADRP X8, 0xF2E000
	0x031F32AC LDR X8, [X8 + 0x80]
	0x031F32B0 MOV X2, X31
	0x031F32B4 MOV X19, X0
	0x031F32B8 LDR X1, [X8]
	0x031F32BC BL 0x32C5BD8
	0x031F32C0 LDR X8, [X20]
	0x031F32C4 MOVZ W1, 0x3
	0x031F32C8 LDR X8, [X8 + 0xB8]
	0x031F32CC STR X19, [X8 + 0x68]
	0x031F32D0 LDR X0, [X21]
	0x031F32D4 BL 0x1C16D6C
	0x031F32D8 ADRP X8, 0xF2E000
	0x031F32DC LDR X8, [X8 + 0x88]
	0x031F32E0 MOV X2, X31
	0x031F32E4 MOV X19, X0
	0x031F32E8 LDR X1, [X8]
	0x031F32EC BL 0x32C5BD8
	0x031F32F0 LDR X8, [X20]
	0x031F32F4 MOVZ W1, 0x3
	0x031F32F8 LDR X8, [X8 + 0xB8]
	0x031F32FC STR X19, [X8 + 0x70]
	0x031F3300 LDR X0, [X21]
	0x031F3304 BL 0x1C16D6C
	0x031F3308 ADRP X8, 0xF2E000
	0x031F330C LDR X8, [X8 + 0xB8]
	0x031F3310 MOV X2, X31
	0x031F3314 MOV X19, X0
	0x031F3318 LDR X1, [X8]
	0x031F331C BL 0x32C5BD8
	0x031F3320 LDR X8, [X20]
	0x031F3324 LDP X22, X21, [X31 + 0x40]
	0x031F3328 LDP X24, X23, [X31 + 0x30]
	0x031F332C LDP X26, X25, [X31 + 0x20]
	0x031F3330 LDR X8, [X8 + 0xB8]
	0x031F3334 LDP X28, X27, [X31 + 0x10]
	0x031F3338 STR X19, [X8 + 0x78]
	0x031F333C LDP X20, X19, [X31 + 0x50]
	0x031F3340 LDP X29, X30, [X31], #0x60
	0x031F3344 RET
	0x031F3348 STR X30, [X31 - 0x30]!
	0x031F334C STP X22, X21, [X31 + 0x10]
	0x031F3350 STP X20, X19, [X31 + 0x20]
	0x031F3354 ADRP X21, 0x11E9000
	0x031F3358 LDRB W8, [X21 + 0x198]
	0x031F335C MOV X20, X1
	0x031F3360 MOV X19, X0
	0x031F3364 TBNZ X8, 0x0, 0x31F337C
	0x031F3368 ADRP X0, 0xF00000
	0x031F336C LDR X0, [X0 + 0x618]
	0x031F3370 BL 0x1C16CF4
	0x031F3374 MOVZ W8, 0x1
	0x031F3378 STRB W8, [X21 + 0x198]
	0x031F337C MOV X0, X19
	0x031F3380 MOV X1, X31
	0x031F3384 BL 0x33BDD8C
	0x031F3388 CBZ X20, 0x31F33F4
	0x031F338C MOV X0, X20
	0x031F3390 MOV X1, X31
	0x031F3394 BL 0x33A01F0
	0x031F3398 CBZ X0, 0x31F33DC
	0x031F339C ADRP X22, 0xF00000
	0x031F33A0 LDR X22, [X22 + 0x618]
	0x031F33A4 MOV X20, X0
	0x031F33A8 LDR X21, [X22]
	0x031F33AC MOV X1, X21
	0x031F33B0 BL 0x1C16E00
	0x031F33B4 CBZ X0, 0x31F33D0
	0x031F33B8 STR X0, [X19 + 0x50]
	0x031F33BC LDR X21, [X22]
	0x031F33C0 MOV X0, X20
	0x031F33C4 MOV X1, X21
	0x031F33C8 BL 0x1C16E00
	0x031F33CC CBNZ X0, 0x31F33E0
	0x031F33D0 MOV X0, X20
	0x031F33D4 MOV X1, X21
	0x031F33D8 BL 0x1C171E0
	0x031F33DC STR X31, [X19 + 0x50]
	0x031F33E0 MOV X0, X19
	0x031F33E4 LDP X20, X19, [X31 + 0x20]
	0x031F33E8 LDP X22, X21, [X31 + 0x10]
	0x031F33EC LDR X30, [X31], #0x30
	0x031F33F0 B 0x31F343C
	0x031F33F4 ADRP X0, 0xF05000
	0x031F33F8 LDR X0, [X0 + 0x528]
	0x031F33FC BL 0x1C16D08
	0x031F3400 BL 0x1C16F10
	0x031F3404 MOV X19, X0
	0x031F3408 ADRP X0, 0xF2E000
	0x031F340C LDR X0, [X0 + 0xC0]
	0x031F3410 BL 0x1C16D08
	0x031F3414 MOV X1, X0
	0x031F3418 MOV X0, X19
	0x031F341C MOV X2, X31
	0x031F3420 BL 0x330E100
	0x031F3424 ADRP X0, 0xF2E000
	0x031F3428 LDR X0, [X0 + 0xC8]
	0x031F342C BL 0x1C16D08
	0x031F3430 MOV X1, X0
	0x031F3434 MOV X0, X19
	0x031F3438 BL 0x1C16DEC
	0x031F343C STP X29, X30, [X31 - 0x60]!
	0x031F3440 STP X28, X27, [X31 + 0x10]
	0x031F3444 STP X26, X25, [X31 + 0x20]
	0x031F3448 STP X24, X23, [X31 + 0x30]
	0x031F344C STP X22, X21, [X31 + 0x40]
	0x031F3450 STP X20, X19, [X31 + 0x50]
	0x031F3454 ADRP X19, 0x11E9000
	0x031F3458 ADRP X22, 0xF2E000
	0x031F345C ADRP X21, 0xF2D000
	0x031F3460 LDRB W8, [X19 + 0x199]
	0x031F3464 LDR X22, [X22 + 0xD0]
	0x031F3468 LDR X21, [X21 + 0xB98]
	0x031F346C MOV X20, X0
	0x031F3470 TBNZ X8, 0x0, 0x31F34D0
	0x031F3474 ADRP X0, 0xF2D000
	0x031F3478 LDR X0, [X0 + 0xB98]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X22, 0x11EA000
	015 Move X21, 0xF2E000
	016 Move W8, [X22+399]
	017 Move X21, [X21+3976]
	018 Move W23, W2
	019 Move X19, X1
	020 Move X20, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {33}
	025 Move X0, 0xF01000
	026 Move X0, [X0+1560]
	027 Call 0x1C17CF4
	028 Move X0, 0xF2E000
	029 Move X0, [X0+3976]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X22+399], W8
	033 Move X0, [X21]
	034 Move X21, [X20+16]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X21
	040 Move X1, X31
	041 Call PKCS1.CreateFromName, X0
	042 Compare X0, 0
	043 JumpIfEqual {288}
	044 Move X8, [X0]
	045 Move X27, 0xF01000
	046 Move X21, X0
	047 Move X9, [X8+472]
	048 Move X1, [X8+480]
	049 Move X27, [X27+1560]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move X8, [X27]
	052 Move W24, W0
	053 Move W1, W23
	054 Move X0, X8
	055 Call 0x1C17D6C
	056 Move X8, [X20+40]
	057 Move X22, X0
	058 Compare X8, 0
	059 JumpIfEqual {92}
	060 Move X8, [X8+24]
	061 Compare X8, 0
	062 JumpIfEqual {92}
	063 Move X0, [X27]
	064 Add W9, W8, 63
	065 Add W8, W8, 126
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction CSEL not yet implemented."
	068 And W1, W8, 0xFFFFFFC0
	069 Call 0x1C17D6C
	070 Compare X0, 0
	071 JumpIfEqual {288}
	072 Move W9, [X0+24]
	073 Move X25, X0
	074 Compare W9, 0
	075 JumpIfEqual {96}
	076 Move W8, W31
	077 Move X10, [X20+40]
	078 Compare X10, 0
	079 JumpIfEqual {288}
	080 Move W12, [X10+24]
	081 NotImplemented "Instruction SDIV not yet implemented."
	082 NotImplemented "Instruction MSUB not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Add X9, X10, W11
	086 Move W9, [X9+32]
	087 Add X10, X25, W8
	088 Add W8, W8, 1
	089 Move [X10+32], W9
	090 Move W9, [X25+24]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X0, [X27]
	093 Move W1, W31
	094 Call 0x1C17D6C
	095 Move X25, X0
	096 Move X8, [X20+32]
	097 Compare X8, 0
	098 JumpIfEqual {131}
	099 Move X8, [X8+24]
	100 Compare X8, 0
	101 JumpIfEqual {131}
	102 Move X0, [X27]
	103 Add W9, W8, 63
	104 Add W8, W8, 126
	105 NotImplemented "Instruction CMP not yet implemented."
	106 NotImplemented "Instruction CSEL not yet implemented."
	107 And W1, W8, 0xFFFFFFC0
	108 Call 0x1C17D6C
	109 Compare X0, 0
	110 JumpIfEqual {288}
	111 Move W9, [X0+24]
	112 Move X26, X0
	113 Compare W9, 0
	114 JumpIfEqual {135}
	115 Move W8, W31
	116 Move X10, [X20+32]
	117 Compare X10, 0
	118 JumpIfEqual {288}
	119 Move W12, [X10+24]
	120 NotImplemented "Instruction SDIV not yet implemented."
	121 NotImplemented "Instruction MSUB not yet implemented."
	122 NotImplemented "Instruction CMP not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Add X9, X10, W11
	125 Move W9, [X9+32]
	126 Add X10, X26, W8
	127 Add W8, W8, 1
	128 Move [X10+32], W9
	129 Move W9, [X26+24]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move X0, [X27]
	132 Move W1, W31
	133 Call 0x1C17D6C
	134 Move X26, X0
	135 Compare X25, 0
	136 JumpIfEqual {288}
	137 Compare X26, 0
	138 JumpIfEqual {288}
	139 Move W8, [X25+24]
	140 Move W9, [X26+24]
	141 Move X0, [X27]
	142 NotImplemented "Instruction SBFM not yet implemented."
	143 Add W1, W9, W8
	144 Call 0x1C17D6C
	145 Move W4, [X25+24]
	146 Move X24, X0
	147 Move X0, X25
	148 Move W1, W31
	149 Move X2, X24
	150 Move W3, W31
	151 Move X5, X31
	152 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	153 Move W3, [X25+24]
	154 Move W4, [X26+24]
	155 Move X0, X26
	156 Move W1, W31
	157 Move X2, X24
	158 Move X5, X31
	159 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	160 Move X0, [X27]
	161 Move W1, 64
	162 Call 0x1C17D6C
	163 Add W8, W23, W28
	164 Subtract W8, W8, 1
	165 NotImplemented "Instruction SDIV not yet implemented."
	166 Subtract W8, W29, 1
	167 Move [X31+12], W28
	168 Compare X19, 0
	169 JumpIfEqual {288}
	170 Move W9, [X31+12]
	171 Move X23, X0
	172 Move W28, 1
	173 Multiply W8, W8, W9
	174 Move [X31+8], W8
	175 Move W3, [X19+24]
	176 Move X0, X21
	177 Move X1, X19
	178 Move W2, W31
	179 Move X4, X19
	180 Move W5, W31
	181 Move X6, X31
	182 Call HashAlgorithm.TransformBlock, X0, X1, X2, X3, X4, X5
	183 Compare X24, 0
	184 JumpIfEqual {288}
	185 Move W3, [X24+24]
	186 Move X0, X21
	187 Move X1, X24
	188 Move W2, W31
	189 Move X4, X31
	190 Call HashAlgorithm.TransformFinalBlock, X0, X1, X2, X3
	191 Move X8, [X21]
	192 Move X0, X21
	193 Move X9, [X8+488]
	194 Move X1, [X8+496]
	195 NotImplemented "Instruction BLR not yet implemented."
	196 Move X8, [X21]
	197 Move X26, X0
	198 Move X0, X21
	199 Move X9, [X8+600]
	200 Move X1, [X8+608]
	201 NotImplemented "Instruction BLR not yet implemented."
	202 Move W8, [X20+24]
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Move W27, 1
	205 Compare X26, 0
	206 JumpIfEqual {288}
	207 Move W3, [X26+24]
	208 Move X0, X21
	209 Move X1, X26
	210 Move W2, W31
	211 Move X4, X31
	212 Call HashAlgorithm.ComputeHash, X0, X1, X2, X3
	213 Move W8, [X20+24]
	214 Add W27, W27, 1
	215 Move X26, X0
	216 NotImplemented "Instruction CMP not yet implemented."
	217 Compare X23, 0
	218 JumpIfEqual {288}
	219 Move W9, [X23+24]
	220 Compare W9, 0
	221 JumpIfEqual {237}
	222 Move W8, W31
	223 Compare X26, 0
	224 JumpIfEqual {288}
	225 Move W11, [X26+24]
	226 NotImplemented "Instruction SDIV not yet implemented."
	227 NotImplemented "Instruction MSUB not yet implemented."
	228 NotImplemented "Instruction CMP not yet implemented."
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Add X9, X26, W10
	231 Move W9, [X9+32]
	232 Add X10, X23, W8
	233 Add W8, W8, 1
	234 Move [X10+32], W9
	235 Move W9, [X23+24]
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move W8, [X24+24]
	238 Add W8, W8, 63
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Move W27, W31
	241 Move W25, W31
	242 Move X1, X24
	243 Move W2, W27
	244 Move X3, X23
	245 Call DeriveBytes.Adjust, X0, X1, X2, X3
	246 Move W8, [X24+24]
	247 Add W25, W25, 1
	248 Add W27, W27, 64
	249 Add W9, W8, 63
	250 NotImplemented "Instruction CMP not yet implemented."
	251 NotImplemented "Instruction CSEL not yet implemented."
	252 NotImplemented "Instruction CMP not yet implemented."
	253 NotImplemented "Instruction CMP not yet implemented."
	254 Compare X22, 0
	255 JumpIfEqual {288}
	256 Move W8, [X22+24]
	257 Move W3, [X31+8]
	258 Subtract W4, W8, W3
	259 Compare X26, 0
	260 JumpIfEqual {288}
	261 Move W9, [X31+12]
	262 Move W4, [X26+24]
	263 Subtract W8, W28, 1
	264 Multiply W3, W8, W9
	265 Move X0, X26
	266 Move W1, W31
	267 Move X2, X22
	268 Move X5, X31
	269 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	270 Add W28, W28, 1
	271 NotImplemented "Instruction CMP not yet implemented."
	272 Move X0, X22
	273 Move X20, [X31+96]
	274 Move X19, [X31+104]
	275 Move X22, [X31+80]
	276 Move X21, [X31+88]
	277 Move X24, [X31+64]
	278 Move X23, [X31+72]
	279 Move X26, [X31+48]
	280 Move X25, [X31+56]
	281 Move X28, [X31+32]
	282 Move X27, [X31+40]
	283 Move X29, [X31+16]
	284 Move X30, [X31+24]
	285 Add X31, X31, 112
	286 Return X0
	287 Call 0x1C17F28
	288 Call 0x1C17F20

Method: System.Byte[] DeriveKey(System.Int32 size)

Disassembly:
	0x031EE8BC BL 0x321BA08
	0x031EE8C0 TBZ X0, 0x0, 0x31EE90C
	0x031EE8C4 LDR X8, [X21]
	0x031EE8C8 ADRP X10, 0xF32000
	0x031EE8CC LDRH W9, [X8 + 0x12E]
	0x031EE8D0 LDR X10, [X10 + 0xF80]
	0x031EE8D4 LDR X1, [X10]
	0x031EE8D8 CBZ X9, 0x31EE8FC
	0x031EE8DC LDR X10, [X8 + 0xB0]
	0x031EE8E0 ADD X10, X10, 0x8
	0x031EE8E4 LDUR X11, [X10 - 0x8]
	0x031EE8E8 CMP X11, X1
	0x031EE8EC B.EQ 0x31EE970
	0x031EE8F0 SUBS X9, X9, 0x1
	0x031EE8F4 ADD X10, X10, 0x10
	0x031EE8F8 B.NE 0x31EE8E4
	0x031EE8FC MOVZ W2, 0x1
	0x031EE900 MOV X0, X21
	0x031EE904 BL 0x1C5C788
	0x031EE908 B 0x31EE980
	0x031EE90C ADRP X8, 0xF32000
	0x031EE910 LDR X8, [X8 + 0xE40]
	0x031EE914 MOV X0, X22
	0x031EE918 MOV X2, X31
	0x031EE91C LDR X1, [X8]
	0x031EE920 BL 0x321BA08
	0x031EE924 TBZ X0, 0x0, 0x31EE7CC
	0x031EE928 LDR X8, [X21]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11EF000
	007 Move X21, 0xF33000
	008 Move W8, [X22+400]
	009 Move X21, [X21+3560]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF33000
	017 Move X0, [X0+3560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+400], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, X20
	029 Move W2, W19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X1, [X8]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Call DeriveBytes.Derive, X0, X1, X2
	037 Return X0

Method: System.Byte[] DeriveIV(System.Int32 size)

Disassembly:
	0x031EE92C ADRP X10, 0xF32000
	0x031EE930 LDRH W9, [X8 + 0x12E]
	0x031EE934 LDR X10, [X10 + 0xF80]
	0x031EE938 LDR X1, [X10]
	0x031EE93C CBZ X9, 0x31EE960
	0x031EE940 LDR X10, [X8 + 0xB0]
	0x031EE944 ADD X10, X10, 0x8
	0x031EE948 LDUR X11, [X10 - 0x8]
	0x031EE94C CMP X11, X1
	0x031EE950 B.EQ 0x31EEBE4
	0x031EE954 SUBS X9, X9, 0x1
	0x031EE958 ADD X10, X10, 0x10
	0x031EE95C B.NE 0x31EE948
	0x031EE960 MOVZ W2, 0x1
	0x031EE964 MOV X0, X21
	0x031EE968 BL 0x1C5C788
	0x031EE96C B 0x31EEBF4
	0x031EE970 LDR W9, [X10]
	0x031EE974 ADD W9, W9, 0x1
	0x031EE978 ADD X8, X8, W9, 0x4, SXTW
	0x031EE97C ADD X0, X8, 0x138
	0x031EE980 LDP X8, X1, [X0]
	0x031EE984 MOV X0, X21
	0x031EE988 BLR X8
	0x031EE98C CBZ X0, 0x31EEFD8
	0x031EE990 ADRP X9, 0xF32000
	0x031EE994 LDR X8, [X0]
	0x031EE998 LDR X9, [X9 + 0xBA0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11EF000
	007 Move X21, 0xF33000
	008 Move W8, [X22+401]
	009 Move X21, [X21+3560]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF33000
	017 Move X0, [X0+3560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+401], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, X20
	029 Move W2, W19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X1, [X8+8]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Call DeriveBytes.Derive, X0, X1, X2
	037 Return X0

Method: System.Byte[] DeriveMAC(System.Int32 size)

Disassembly:
	0x031F0128 ADD X10, X10, 0x8
	0x031F012C LDUR X11, [X10 - 0x8]
	0x031F0130 CMP X11, X1
	0x031F0134 B.EQ 0x31F0154
	0x031F0138 SUBS X9, X9, 0x1
	0x031F013C ADD X10, X10, 0x10
	0x031F0140 B.NE 0x31F012C
	0x031F0144 MOV X0, X22
	0x031F0148 MOV W2, W31
	0x031F014C BL 0x1C5C788
	0x031F0150 B 0x31F0160
	0x031F0154 LDRSW X9, [X10]
	0x031F0158 ADD X8, X8, X9, 0x4, LSL
	0x031F015C ADD X0, X8, 0x138
	0x031F0160 LDP X8, X1, [X0]
	0x031F0164 MOV X0, X22
	0x031F0168 BLR X8
	0x031F016C CBNZ X24, 0x31F0C74
	0x031F0170 CMP W19, 0x1A
	0x031F0174 B.EQ 0x31F017C
	0x031F0178 CBNZ W19, 0x31F0760
	0x031F017C CBZ X21, 0x31F0C34
	0x031F0180 ADRP X26, 0xF30000
	0x031F0184 LDR X0, [X21 + 0x20]
	0x031F0188 LDR X26, [X26 + 0xB98]
	0x031F018C LDR X24, [X31 + 0x18]
	0x031F0190 CBZ X0, 0x31F01DC
	0x031F0194 LDR X8, [X0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11ED000
	007 Move X21, 0xF31000
	008 Move W8, [X22+402]
	009 Move X21, [X21+3560]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF31000
	017 Move X0, [X0+3560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+402], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, X20
	029 Move W2, W19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X1, [X8+16]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Call DeriveBytes.Derive, X0, X1, X2
	037 Return X0

Method: System.Void .cctor()

Disassembly:
	0x031F347C BL 0x1C16CF4
	0x031F3480 ADRP X0, 0xF2D000
	0x031F3484 LDR X0, [X0 + 0xBA0]
	0x031F3488 BL 0x1C16CF4
	0x031F348C ADRP X0, 0xF00000
	0x031F3490 LDR X0, [X0 + 0x618]
	0x031F3494 BL 0x1C16CF4
	0x031F3498 ADRP X0, 0xF2D000
	0x031F349C LDR X0, [X0 + 0xCF8]
	0x031F34A0 BL 0x1C16CF4
	0x031F34A4 ADRP X0, 0xF2E000
	0x031F34A8 LDR X0, [X0 + 0xD8]
	0x031F34AC BL 0x1C16CF4
	0x031F34B0 ADRP X0, 0xF2E000
	0x031F34B4 LDR X0, [X0 + 0xE0]
	0x031F34B8 BL 0x1C16CF4
	0x031F34BC ADRP X0, 0xF2E000
	0x031F34C0 LDR X0, [X0 + 0xD0]
	0x031F34C4 BL 0x1C16CF4
	0x031F34C8 MOVZ W8, 0x1
	0x031F34CC STRB W8, [X19 + 0x199]
	0x031F34D0 LDR X19, [X22]
	0x031F34D4 LDR X22, [X20 + 0x50]
	0x031F34D8 LDR X0, [X21]
	0x031F34DC BL 0x1C16F10
	0x031F34E0 MOV X21, X0
	0x031F34E4 MOV X1, X22
	0x031F34E8 BL 0x31E7A44
	0x031F34EC CBZ X21, 0x31F38B4
	0x031F34F0 LDRB W8, [X21 + 0x10]
	0x031F34F4 CMP W8, 0x30
	0x031F34F8 B.NE 0x31F3844
	0x031F34FC LDR X0, [X21 + 0x20]
	0x031F3500 CBZ X0, 0x31F3844
	0x031F3504 LDR X8, [X0]
	0x031F3508 LDR X1, [X8 + 0x2A0]
	0x031F350C LDR X9, [X8 + 0x298]
	0x031F3510 BLR X9
	0x031F3514 CMP W0, 0x3
	0x031F3518 B.NE 0x31F3844
	0x031F351C MOV X0, X21
	0x031F3520 MOV W1, W31
	0x031F3524 BL 0x31E8704
	0x031F3528 MOV X22, X0
	0x031F352C CBZ X0, 0x31F38B8
	0x031F3530 LDRB W8, [X22 + 0x10]
	0x031F3534 CMP W8, 0x30
	0x031F3538 B.NE 0x31F387C
	0x031F353C LDR X0, [X22 + 0x20]
	0x031F3540 CBZ X0, 0x31F387C
	0x031F3544 LDR X8, [X0]
	0x031F3548 LDR X1, [X8 + 0x2A0]
	0x031F354C LDR X9, [X8 + 0x298]
	0x031F3550 BLR X9
	0x031F3554 CMP W0, 0x2
	0x031F3558 B.LE 0x31F387C
	0x031F355C MOV X0, X22
	0x031F3560 MOV W1, W31
	0x031F3564 BL 0x31E8704
	0x031F3568 CBZ X0, 0x31F38BC
	0x031F356C LDRB W8, [X0 + 0x10]
	0x031F3570 CMP W8, 0x2
	0x031F3574 B.NE 0x31F35A8
	0x031F3578 MOV X0, X22
	0x031F357C MOV W1, W31
	0x031F3580 BL 0x31E8704
	0x031F3584 CBZ X0, 0x31F3930
	0x031F3588 BL 0x31E7D00
	0x031F358C CBZ X0, 0x31F3934

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x11EA000
	009 Move X22, 0xF01000
	010 Move X19, 0xF2E000
	011 Move X20, 0xF2E000
	012 Move X23, 0xF2E000
	013 Move X21, 0xF2E000
	014 Move W8, [X24+403]
	015 Move X22, [X22+1560]
	016 Move X19, [X19+3984]
	017 Move X20, [X20+3560]
	018 Move X23, [X23+3992]
	019 Move X21, [X21+4000]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {41}
	024 Move X0, 0xF01000
	025 Move X0, [X0+1560]
	026 Call 0x1C17CF4
	027 Move X0, 0xF2E000
	028 Move X0, [X0+3560]
	029 Call 0x1C17CF4
	030 Move X0, 0xF2E000
	031 Move X0, [X0+4000]
	032 Call 0x1C17CF4
	033 Move X0, 0xF2E000
	034 Move X0, [X0+3984]
	035 Call 0x1C17CF4
	036 Move X0, 0xF2E000
	037 Move X0, [X0+3992]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X24+403], W8
	041 Move X0, [X22]
	042 Move W1, 64
	043 Call 0x1C17D6C
	044 Move X1, [X19]
	045 Move X2, X31
	046 Move X19, X0
	047 Call RuntimeHelpers.InitializeArray, X0, X1
	048 Move X8, [X20]
	049 Move W1, 64
	050 Move X8, [X8+184]
	051 Move [X8], X19
	052 Move X0, [X22]
	053 Call 0x1C17D6C
	054 Move X1, [X23]
	055 Move X2, X31
	056 Move X19, X0
	057 Call RuntimeHelpers.InitializeArray, X0, X1
	058 Move X8, [X20]
	059 Move W1, 64
	060 Move X8, [X8+184]
	061 Move [X8+8], X19
	062 Move X0, [X22]
	063 Call 0x1C17D6C
	064 Move X1, [X21]
	065 Move X2, X31
	066 Move X19, X0
	067 Call RuntimeHelpers.InitializeArray, X0, X1
	068 Move X8, [X20]
	069 Move X22, [X31+32]
	070 Move X21, [X31+40]
	071 Move X24, [X31+16]
	072 Move X23, [X31+24]
	073 Move X8, [X8+184]
	074 Move [X8+16], X19
	075 Move X20, [X31+48]
	076 Move X19, [X31+56]
	077 Move X30, [X31+64]
	078 Return 

