Type: Mono.Security.X509.X509ExtensionCollection

Method: System.Void .ctor()

Disassembly:
	0x031F8DB0 MOV X19, X0
	0x031F8DB4 TBNZ X8, 0x0, 0x31F8DCC

ISIL:
	001 Move X1, X31
	002 Call CollectionBase..ctor, X0
	003 Return 

Method: System.Void .ctor(Mono.Security.ASN1 asn1)

Disassembly:
	0x031F4B64 MOV X0, X20
	0x031F4B68 MOV X1, X31
	0x031F4B6C BL 0x33A01F0
	0x031F4B70 MOV X20, X0
	0x031F4B74 CBZ X0, 0x31F4BB0
	0x031F4B78 LDR X21, [X25]
	0x031F4B7C MOV X0, X20
	0x031F4B80 MOV X1, X21
	0x031F4B84 BL 0x1C16E00
	0x031F4B88 CBZ X0, 0x31F4D4C
	0x031F4B8C STR X0, [X19 + 0x18]
	0x031F4B90 LDR X19, [X25]
	0x031F4B94 MOV X0, X20
	0x031F4B98 MOV X1, X19
	0x031F4B9C BL 0x1C16E00
	0x031F4BA0 CBNZ X0, 0x31F4BB4
	0x031F4BA4 MOV X0, X20
	0x031F4BA8 MOV X1, X19
	0x031F4BAC BL 0x1C171E0
	0x031F4BB0 STR X31, [X19 + 0x18]
	0x031F4BB4 LDP X20, X19, [X31 + 0x30]
	0x031F4BB8 LDP X22, X21, [X31 + 0x20]
	0x031F4BBC LDP X24, X23, [X31 + 0x10]
	0x031F4BC0 LDP X30, X25, [X31], #0x40
	0x031F4BC4 RET
	0x031F4BC8 BL 0x1C16F20
	0x031F4BCC ADRP X0, 0xF2C000
	0x031F4BD0 LDR X0, [X0 + 0xCC0]
	0x031F4BD4 BL 0x1C16D08
	0x031F4BD8 LDR W8, [X0 + 0xE0]
	0x031F4BDC CBNZ W8, 0x31F4BE4
	0x031F4BE0 BL 0x1C16DFC
	0x031F4BE4 ADRP X0, 0xF2C000
	0x031F4BE8 LDR X0, [X0 + 0xCC0]
	0x031F4BEC BL 0x1C16D08
	0x031F4BF0 LDR X8, [X0 + 0xB8]
	0x031F4BF4 LDR X20, [X8]
	0x031F4BF8 ADRP X0, 0xF2C000
	0x031F4BFC LDR X0, [X0 + 0xCE0]
	0x031F4C00 BL 0x1C16D08
	0x031F4C04 BL 0x1C16F10
	0x031F4C08 MOV X19, X0
	0x031F4C0C MOV X1, X20
	0x031F4C10 MOV X2, X31
	0x031F4C14 BL 0x3252170
	0x031F4C18 ADRP X0, 0xF2D000
	0x031F4C1C LDR X0, [X0 + 0x188]
	0x031F4C20 BL 0x1C16D08
	0x031F4C24 MOV X1, X0
	0x031F4C28 MOV X0, X19
	0x031F4C2C BL 0x1C16DEC
	0x031F4C30 BL 0x1C16F20
	0x031F4C34 ADRP X0, 0xF2C000
	0x031F4C38 LDR X0, [X0 + 0xCC0]
	0x031F4C3C BL 0x1C16D08
	0x031F4C40 LDR W8, [X0 + 0xE0]
	0x031F4C44 CBNZ W8, 0x31F4C4C
	0x031F4C48 BL 0x1C16DFC
	0x031F4C4C ADRP X0, 0xF2C000
	0x031F4C50 LDR X0, [X0 + 0xCC0]
	0x031F4C54 BL 0x1C16D08
	0x031F4C58 LDR X8, [X0 + 0xB8]
	0x031F4C5C LDR X20, [X8]
	0x031F4C60 ADRP X0, 0xF2C000
	0x031F4C64 LDR X0, [X0 + 0xCE0]
	0x031F4C68 BL 0x1C16D08
	0x031F4C6C BL 0x1C16F10
	0x031F4C70 MOV X19, X0
	0x031F4C74 MOV X1, X20
	0x031F4C78 MOV X2, X31
	0x031F4C7C BL 0x3252170
	0x031F4C80 ADRP X0, 0xF2D000
	0x031F4C84 LDR X0, [X0 + 0x188]
	0x031F4C88 BL 0x1C16D08
	0x031F4C8C MOV X1, X0
	0x031F4C90 MOV X0, X19
	0x031F4C94 BL 0x1C16DEC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x11E9000
	009 Move W8, [X21+456]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF2E000
	017 Move X0, [X0+248]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+456], W8
	021 Move X0, X20
	022 Move X1, X31
	023 Call CollectionBase..ctor, X0
	024 Move W8, 1
	025 Move [X20+24], W8
	026 Compare X19, 0
	027 JumpIfEqual {60}
	028 Move W8, [X19+16]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X24, 0xF2E000
	031 Move X24, [X24+248]
	032 Move W21, W31
	033 Move X0, [X19+32]
	034 Compare X0, 0
	035 JumpIfEqual {40}
	036 Move X8, [X0]
	037 Move X9, [X8+664]
	038 Move X1, [X8+672]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X0, X19
	042 Move W1, W21
	043 Call ASN1.get_Item, X0, X1
	044 Move X8, [X24]
	045 Move X23, X0
	046 Move X0, X8
	047 Call 0x1C17F10
	048 Move X1, X23
	049 Move X22, X0
	050 Call X509Extension..ctor, X0, X1
	051 Move X0, [X20+16]
	052 Compare X0, 0
	053 JumpIfEqual {68}
	054 Move X8, [X0]
	055 Move X1, X22
	056 Move X9, [X8+776]
	057 Move X2, [X8+784]
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Add W21, W21, 1
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Return 
	068 Call 0x1C17F20
	069 Move X0, 0xF00000
	070 Move X0, [X0+2000]
	071 Call 0x1C17D08
	072 Call 0x1C17F10
	073 Move X19, X0
	074 Move X0, 0xF2E000
	075 Move X0, [X0+256]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X19
	079 Move X2, X31
	080 Call Exception..ctor, X0, X1
	081 Move X0, 0xF2E000
	082 Move X0, [X0+264]
	083 Call 0x1C17D08
	084 Move X1, X0
	085 Move X0, X19
	086 Call 0x1C17DEC

Method: System.Int32 IndexOf(System.String oid)

Disassembly:
	0x031F8DB8 ADRP X0, 0xF28000
	0x031F8DBC LDR X0, [X0 + 0xB98]
	0x031F8DC0 BL 0x1C16CF4
	0x031F8DC4 MOVZ W8, 0x1
	0x031F8DC8 STRB W8, [X20 + 0x1D9]
	0x031F8DCC LDR X0, [X22]
	0x031F8DD0 BL 0x1C16F10
	0x031F8DD4 MOV X1, X31
	0x031F8DD8 MOV X20, X0
	0x031F8DDC BL 0x33BDD8C
	0x031F8DE0 MOVZ W8, 0x30
	0x031F8DE4 STRB W8, [X20 + 0x10]
	0x031F8DE8 STR X31, [X20 + 0x18]
	0x031F8DEC LDR X23, [X19 + 0x28]
	0x031F8DF0 CBZ X23, 0x31F8E5C
	0x031F8DF4 LDR X0, [X22]
	0x031F8DF8 BL 0x1C16F10
	0x031F8DFC MOV X1, X31
	0x031F8E00 MOV X21, X0
	0x031F8E04 BL 0x33BDD8C
	0x031F8E08 MOVZ W8, 0x80
	0x031F8E0C MOV X0, X20
	0x031F8E10 MOV X1, X21
	0x031F8E14 STRB W8, [X21 + 0x10]
	0x031F8E18 STR X23, [X21 + 0x18]
	0x031F8E1C BL 0x31E7ED0
	0x031F8E20 LDR X0, [X22]
	0x031F8E24 BL 0x1C16F10
	0x031F8E28 MOV X1, X31
	0x031F8E2C MOV X21, X0
	0x031F8E30 BL 0x33BDD8C
	0x031F8E34 MOVZ W8, 0x4
	0x031F8E38 STR X31, [X21 + 0x18]
	0x031F8E3C STRB W8, [X21 + 0x10]
	0x031F8E40 STR X21, [X19 + 0x20]
	0x031F8E44 MOV X0, X21
	0x031F8E48 MOV X1, X20
	0x031F8E4C LDP X20, X19, [X31 + 0x20]
	0x031F8E50 LDP X22, X21, [X31 + 0x10]
	0x031F8E54 LDP X30, X23, [X31], #0x30
	0x031F8E58 B 0x31E7ED0
	0x031F8E5C ADRP X0, 0xEFB000
	0x031F8E60 LDR X0, [X0 + 0x5B0]
	0x031F8E64 BL 0x1C16D08
	0x031F8E68 BL 0x1C16F10
	0x031F8E6C MOV X19, X0
	0x031F8E70 ADRP X0, 0xF29000
	0x031F8E74 LDR X0, [X0 + 0x2D0]
	0x031F8E78 BL 0x1C16D08
	0x031F8E7C MOV X1, X0
	0x031F8E80 MOV X0, X19
	0x031F8E84 MOV X2, X31
	0x031F8E88 BL 0x337DF1C
	0x031F8E8C ADRP X0, 0xF29000
	0x031F8E90 LDR X0, [X0 + 0x2E0]
	0x031F8E94 BL 0x1C16D08
	0x031F8E98 MOV X1, X0
	0x031F8E9C MOV X0, X19
	0x031F8EA0 BL 0x1C16DEC
	0x031F8EA4 STR X30, [X31 - 0x20]!
	0x031F8EA8 STP X20, X19, [X31 + 0x10]
	0x031F8EAC ADRP X20, 0x11E4000
	0x031F8EB0 LDRB W8, [X20 + 0x1DA]
	0x031F8EB4 MOV X19, X0
	0x031F8EB8 TBNZ X8, 0x0, 0x31F8ED0
	0x031F8EBC ADRP X0, 0xEFB000
	0x031F8EC0 LDR X0, [X0 + 0x618]
	0x031F8EC4 BL 0x1C16CF4
	0x031F8EC8 MOVZ W8, 0x1
	0x031F8ECC STRB W8, [X20 + 0x1DA]
	0x031F8ED0 LDR X0, [X19 + 0x28]
	0x031F8ED4 CBZ X0, 0x31F8F00
	0x031F8ED8 MOV X1, X31
	0x031F8EDC BL 0x33A01F0
	0x031F8EE0 CBZ X0, 0x31F8F00
	0x031F8EE4 ADRP X8, 0xEFB000
	0x031F8EE8 LDR X8, [X8 + 0x618]
	0x031F8EEC MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11E5000
	007 Move W8, [X21+457]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF2A000
	015 Move X0, [X0+248]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+457], W8
	019 Compare X19, 0
	020 JumpIfEqual {75}
	021 Move X0, [X20+16]
	022 Compare X0, 0
	023 JumpIfEqual {63}
	024 Move X22, 0xF2A000
	025 Move X22, [X22+248]
	026 Move W21, W31
	027 Move X8, [X0]
	028 Move X9, [X8+664]
	029 Move X1, [X8+672]
	030 NotImplemented "Instruction BLR not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, [X20+16]
	033 Compare X0, 0
	034 JumpIfEqual {63}
	035 Move X8, [X0]
	036 Move W1, W21
	037 Move X9, [X8+744]
	038 Move X2, [X8+752]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Compare X0, 0
	041 JumpIfEqual {63}
	042 Move X8, [X0]
	043 Move X1, [X22]
	044 Move W10, [X8+304]
	045 Move W9, [X1+304]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X8, [X8+200]
	048 Add X8, X8, X9
	049 NotImplemented "Instruction LDUR not yet implemented."
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X0, [X0+16]
	052 Move X1, X19
	053 Move X2, X31
	054 Call String.op_Equality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {67}
	059 Move X0, [X20+16]
	060 Add W21, W21, 1
	061 Compare X0, 0
	062 JumpIfNotEqual {27}
	063 Call 0x1C17F20
	064 Move TEMP, 0
	065 Not TEMP
	066 Move W21, TEMP
	067 Move W0, W21
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move X30, [X31+48]
	073 Return X0
	074 Call 0x1C181E0
	075 Move X0, 0xF01000
	076 Move X0, [X0+1320]
	077 Call 0x1C17D08
	078 Call 0x1C17F10
	079 Move X19, X0
	080 Move X0, 0xF29000
	081 Move X0, [X0+3040]
	082 Call 0x1C17D08
	083 Move X1, X0
	084 Move X0, X19
	085 Move X2, X31
	086 Call ArgumentNullException..ctor, X0, X1
	087 Move X0, 0xF2A000
	088 Move X0, [X0+608]
	089 Call 0x1C17D08
	090 Move X1, X0
	091 Move X0, X19
	092 Call 0x1C17DEC

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x031F8EF0 LDR X20, [X8]
	0x031F8EF4 MOV X1, X20
	0x031F8EF8 BL 0x1C16E00
	0x031F8EFC CBZ X0, 0x31F8F0C
	0x031F8F00 LDP X20, X19, [X31 + 0x10]
	0x031F8F04 LDR X30, [X31], #0x20
	0x031F8F08 RET
	0x031F8F0C MOV X0, X19
	0x031F8F10 MOV X1, X20

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+904]
	007 Move X1, [X8+912]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: Mono.Security.X509.X509Extension get_Item(System.String oid)

Disassembly:
	0x031F8450 MOV W2, W31
	0x031F8454 BLR X9
	0x031F8458 LDR X8, [X19]
	0x031F845C LDR X1, [X8 + 0x280]
	0x031F8460 LDR X9, [X8 + 0x278]
	0x031F8464 MOV X0, X19
	0x031F8468 BLR X9
	0x031F846C MOV X21, X31
	0x031F8470 LDR X8, [X19]
	0x031F8474 LDR X1, [X23]
	0x031F8478 LDRH W9, [X8 + 0x12E]
	0x031F847C CBZ X9, 0x31F84A0
	0x031F8480 LDR X10, [X8 + 0xB0]
	0x031F8484 ADD X10, X10, 0x8
	0x031F8488 LDUR X11, [X10 - 0x8]
	0x031F848C CMP X11, X1
	0x031F8490 B.EQ 0x31F84B0
	0x031F8494 SUBS X9, X9, 0x1
	0x031F8498 ADD X10, X10, 0x10
	0x031F849C B.NE 0x31F8488
	0x031F84A0 MOV X0, X19
	0x031F84A4 MOV W2, W31
	0x031F84A8 BL 0x1C5C788
	0x031F84AC B 0x31F84BC
	0x031F84B0 LDRSW X9, [X10]
	0x031F84B4 ADD X8, X8, X9, 0x4, LSL
	0x031F84B8 ADD X0, X8, 0x138
	0x031F84BC LDP X8, X1, [X0]
	0x031F84C0 MOV X0, X19
	0x031F84C4 BLR X8
	0x031F84C8 CBNZ X21, 0x31F84E4
	0x031F84CC MOV X0, X20
	0x031F84D0 LDP X20, X19, [X31 + 0x20]
	0x031F84D4 LDP X22, X21, [X31 + 0x10]
	0x031F84D8 LDP X30, X23, [X31], #0x30
	0x031F84DC RET
	0x031F84E0 BL 0x1C16F20
	0x031F84E4 MOV X0, X21
	0x031F84E8 BL 0x1C16F18
	0x031F84EC BL 0x1C16F20
	0x031F84F0 B 0x31F84F8
	0x031F84F4 B 0x31F84F8
	0x031F84F8 MOV X22, X0
	0x031F84FC B 0x31F8510

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11E5000
	006 Move W8, [X21+458]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF2A000
	014 Move X0, [X0+248]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+458], W8
	018 Move X0, X19
	019 Move X1, X20
	020 Call X509ExtensionCollection.IndexOf, X0, X1
	021 Add W31, W0, 1
	022 Move W1, W0
	023 Move X0, [X19+16]
	024 Compare X0, 0
	025 JumpIfEqual {50}
	026 Move X8, [X0]
	027 Move X9, [X8+744]
	028 Move X2, [X8+752]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Compare X0, 0
	031 JumpIfEqual {45}
	032 Move X9, 0xF2A000
	033 Move X9, [X9+248]
	034 Move X8, [X0]
	035 Move X1, [X9]
	036 Move W10, [X8+304]
	037 Move W9, [X1+304]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X8, [X8+200]
	040 Add X8, X8, X9
	041 NotImplemented "Instruction LDUR not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Call 0x1C181E0
	044 Move X0, X31
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Return X0
	050 Call 0x1C17F20

