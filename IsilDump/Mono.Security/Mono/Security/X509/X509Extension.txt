Type: Mono.Security.X509.X509Extension

Method: System.Void .ctor(Mono.Security.ASN1 asn1)

Disassembly:
	0x031F8504 B 0x31F8508
	0x031F8508 MOV X22, X0
	0x031F850C MOV X20, X31
	0x031F8510 CMP W1, 0x1
	0x031F8514 B.NE 0x31F8530
	0x031F8518 MOV X0, X22
	0x031F851C BL 0x3EB1AD0
	0x031F8520 LDR X21, [X0]
	0x031F8524 BL 0x3EB1AE0
	0x031F8528 CBNZ X19, 0x31F8470
	0x031F852C B 0x31F84C8
	0x031F8530 MOV X21, X31
	0x031F8534 B 0x31F853C
	0x031F8538 MOV X22, X0
	0x031F853C CBZ X19, 0x31F8598
	0x031F8540 LDR X8, [X19]
	0x031F8544 LDR X1, [X23]
	0x031F8548 LDRH W9, [X8 + 0x12E]
	0x031F854C CBZ X9, 0x31F8570
	0x031F8550 LDR X10, [X8 + 0xB0]
	0x031F8554 ADD X10, X10, 0x8
	0x031F8558 LDUR X11, [X10 - 0x8]
	0x031F855C CMP X11, X1
	0x031F8560 B.EQ 0x31F8580
	0x031F8564 SUBS X9, X9, 0x1
	0x031F8568 ADD X10, X10, 0x10
	0x031F856C B.NE 0x31F8558
	0x031F8570 MOV X0, X19
	0x031F8574 MOV W2, W31
	0x031F8578 BL 0x1C5C788
	0x031F857C B 0x31F858C
	0x031F8580 LDRSW X9, [X10]
	0x031F8584 ADD X8, X8, X9, 0x4, LSL
	0x031F8588 ADD X0, X8, 0x138
	0x031F858C LDP X8, X1, [X0]
	0x031F8590 MOV X0, X19
	0x031F8594 BLR X8
	0x031F8598 CBNZ X21, 0x31F85A4
	0x031F859C MOV X0, X22
	0x031F85A0 BL 0x1D2C690
	0x031F85A4 MOV X0, X21
	0x031F85A8 BL 0x1C16F18
	0x031F85AC BL 0x1990590
	0x031F85B0 STP X30, X21, [X31 - 0x20]!
	0x031F85B4 STP X20, X19, [X31 + 0x10]
	0x031F85B8 ADRP X21, 0x11E4000
	0x031F85BC ADRP X20, 0xF28000
	0x031F85C0 LDRB W8, [X21 + 0x1CD]
	0x031F85C4 LDR X20, [X20 + 0xCC0]
	0x031F85C8 MOV X19, X1
	0x031F85CC TBNZ X8, 0x0, 0x31F85E4
	0x031F85D0 ADRP X0, 0xF28000
	0x031F85D4 LDR X0, [X0 + 0xCC0]
	0x031F85D8 BL 0x1C16CF4
	0x031F85DC MOVZ W8, 0x1
	0x031F85E0 STRB W8, [X21 + 0x1CD]
	0x031F85E4 MOV X1, X19
	0x031F85E8 BL 0x31F83A8
	0x031F85EC LDR X8, [X20]
	0x031F85F0 MOV X19, X0
	0x031F85F4 MOV X0, X8
	0x031F85F8 BL 0x1C16F10
	0x031F85FC MOV X1, X19
	0x031F8600 MOV X20, X0
	0x031F8604 BL 0x31EA6BC
	0x031F8608 MOV X0, X20
	0x031F860C LDP X20, X19, [X31 + 0x10]
	0x031F8610 LDP X30, X21, [X31], #0x20
	0x031F8614 RET
	0x031F8618 STP X30, X21, [X31 - 0x20]!
	0x031F861C STP X20, X19, [X31 + 0x10]
	0x031F8620 ADRP X21, 0x11E4000
	0x031F8624 ADRP X20, 0xF29000
	0x031F8628 LDRB W8, [X21 + 0x1CE]
	0x031F862C LDR X20, [X20 + 0x288]
	0x031F8630 MOV X19, X1
	0x031F8634 TBNZ X8, 0x0, 0x31F864C
	0x031F8638 ADRP X0, 0xF29000
	0x031F863C LDR X0, [X0 + 0x288]
	0x031F8640 BL 0x1C16CF4
	0x031F8644 MOVZ W8, 0x1
	0x031F8648 STRB W8, [X21 + 0x1CE]
	0x031F864C MOV X1, X19
	0x031F8650 BL 0x31F83A8
	0x031F8654 LDR X8, [X20]
	0x031F8658 MOV X19, X0
	0x031F865C MOV X0, X8
	0x031F8660 BL 0x1C16F10
	0x031F8664 MOV X1, X19
	0x031F8668 MOV X20, X0
	0x031F866C BL 0x31F3348
	0x031F8670 MOV X0, X20
	0x031F8674 LDP X20, X19, [X31 + 0x10]
	0x031F8678 LDP X30, X21, [X31], #0x20
	0x031F867C RET
	0x031F8680 STR X30, [X31 - 0x20]!
	0x031F8684 STP X20, X19, [X31 + 0x10]
	0x031F8688 MOV W19, W2
	0x031F868C MOV X20, X1
	0x031F8690 MOV X0, X1
	0x031F8694 MOV X1, X31
	0x031F8698 BL 0x32EC360
	0x031F869C TBZ X0, 0x0, 0x31F86A8
	0x031F86A0 MOVZ W0, 0x1
	0x031F86A4 B 0x31F86C0
	0x031F86A8 MOV X0, X20
	0x031F86AC MOV X1, X31
	0x031F86B0 BL 0x32EC1CC
	0x031F86B4 MOV X0, X20
	0x031F86B8 MOV X1, X31
	0x031F86BC BL 0x32EC360
	0x031F86C0 LDP X20, X19, [X31 + 0x10]
	0x031F86C4 AND W0, W0, 0x1
	0x031F86C8 LDR X30, [X31], #0x20
	0x031F86CC RET
	0x031F86D0 B 0x31F86D8
	0x031F86D4 B 0x31F86D8
	0x031F86D8 MOV X20, X0
	0x031F86DC CMP W1, 0x1
	0x031F86E0 B.NE 0x31F8750
	0x031F86E4 MOV X0, X20
	0x031F86E8 BL 0x3EB1AD0
	0x031F86EC MOV X20, X0
	0x031F86F0 ADRP X0, 0xF01000
	0x031F86F4 LDR X0, [X0 + 0xCC0]
	0x031F86F8 BL 0x1C16D08
	0x031F86FC LDR X8, [X20]
	0x031F8700 LDR X1, [X8]
	0x031F8704 BL 0x1C17270
	0x031F8708 TBZ X0, 0x0, 0x31F8720
	0x031F870C LDR X20, [X20]
	0x031F8710 BL 0x3EB1AE0
	0x031F8714 TBNZ X19, 0x0, 0x31F8740
	0x031F8718 MOV W0, W31
	0x031F871C B 0x31F86C0
	0x031F8720 MOVZ W0, 0x8
	0x031F8724 BL 0x3EB1AF0
	0x031F8728 LDR X8, [X20]
	0x031F872C STR X8, [X0]
	0x031F8730 ADRP X1, 0xCBC000
	0x031F8734 ADD X1, X1, 0xE58
	0x031F8738 MOV X2, X31
	0x031F873C BL 0x3EB1B00
	0x031F8740 MOV X0, X20
	0x031F8744 BL 0x1C16F18
	0x031F8748 MOV X20, X0
	0x031F874C BL 0x3EB1AE0
	0x031F8750 MOV X0, X20
	0x031F8754 BL 0x1D2C690
	0x031F8758 BL 0x1990590
	0x031F875C STR X30, [X31 - 0x20]!
	0x031F8760 STP X20, X19, [X31 + 0x10]
	0x031F8764 ADRP X19, 0x11E4000
	0x031F8768 ADRP X20, 0xF29000
	0x031F876C LDRB W8, [X19 + 0x1D1]
	0x031F8770 LDR X20, [X20 + 0x290]
	0x031F8774 TBNZ X8, 0x0, 0x31F87B0
	0x031F8778 ADRP X0, 0xF22000
	0x031F877C LDR X0, [X0 + 0x1D0]
	0x031F8780 BL 0x1C16CF4
	0x031F8784 ADRP X0, 0xF29000
	0x031F8788 LDR X0, [X0 + 0x290]
	0x031F878C BL 0x1C16CF4
	0x031F8790 ADRP X0, 0xF29000
	0x031F8794 LDR X0, [X0 + 0x298]
	0x031F8798 BL 0x1C16CF4
	0x031F879C ADRP X0, 0xF29000
	0x031F87A0 LDR X0, [X0 + 0x2A0]
	0x031F87A4 BL 0x1C16CF4
	0x031F87A8 MOVZ W8, 0x1
	0x031F87AC STRB W8, [X19 + 0x1D1]
	0x031F87B0 LDR X8, [X20]
	0x031F87B4 LDR X8, [X8 + 0xB8]
	0x031F87B8 LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11E5000
	006 Move W8, [X21+452]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF29000
	014 Move X0, [X0+2968]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+452], W8
	018 Move X0, X19
	019 Move X1, X31
	020 Call Object..ctor, X0
	021 Compare X20, 0
	022 JumpIfEqual {138}
	023 Move W8, [X20+16]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, [X20+32]
	026 Compare X0, 0
	027 JumpIfEqual {139}
	028 Move X8, [X0]
	029 Move X9, [X8+664]
	030 Move X1, [X8+672]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X20
	034 Move W1, W31
	035 Call ASN1.get_Item, X0, X1
	036 Compare X0, 0
	037 JumpIfEqual {138}
	038 Move W8, [X0+16]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X0, X20
	041 Move W1, W31
	042 Call ASN1.get_Item, X0, X1
	043 Call ASN1Convert.ToOid, X0
	044 Move [X19+16], X0
	045 Move W1, 1
	046 Move X0, X20
	047 Call ASN1.get_Item, X0, X1
	048 Compare X0, 0
	049 JumpIfEqual {138}
	050 Move W8, [X0+16]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move W1, 1
	053 Move X0, X20
	054 Call ASN1.get_Item, X0, X1
	055 Compare X0, 0
	056 JumpIfEqual {138}
	057 Call ASN1.get_Value, X0
	058 Compare X0, 0
	059 JumpIfEqual {138}
	060 Move W8, [X0+24]
	061 Compare W8, 0
	062 JumpIfEqual {157}
	063 Move W8, [X0+32]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 NotImplemented "Instruction CSET not yet implemented."
	066 Move W8, W31
	067 Move [X19+24], W8
	068 Move X0, [X20+32]
	069 Compare X0, 0
	070 JumpIfEqual {75}
	071 Move X8, [X0]
	072 Move X9, [X8+664]
	073 Move X1, [X8+672]
	074 NotImplemented "Instruction BLR not yet implemented."
	075 Subtract W1, W0, 1
	076 Move X0, X20
	077 Call ASN1.get_Item, X0, X1
	078 Move [X19+32], X0
	079 Compare X0, 0
	080 JumpIfEqual {138}
	081 Move W8, [X0+16]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X8, [X0+24]
	084 Compare X8, 0
	085 JumpIfEqual {129}
	086 Move W8, [X8+24]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X8, [X0+32]
	089 Compare X8, 0
	090 JumpIfEqual {101}
	091 Move X9, [X8]
	092 Move X0, X8
	093 Move X10, [X9+664]
	094 Move X1, [X9+672]
	095 NotImplemented "Instruction BLR not yet implemented."
	096 Compare W0, 0
	097 JumpIfNotEqual {129}
	098 Move X0, [X19+32]
	099 Compare X0, 0
	100 JumpIfEqual {160}
	101 Call ASN1.get_Value, X0
	102 Move X8, 0xF29000
	103 Move X8, [X8+2968]
	104 Move X21, X0
	105 Move X0, [X8]
	106 Call 0x1C17F10
	107 Move X20, X0
	108 Move X1, X21
	109 Call ASN1..ctor, X0, X1
	110 Move X0, [X19+32]
	111 Compare X0, 0
	112 JumpIfEqual {158}
	113 Move X21, 0x11E5000
	114 Move W8, [X21+351]
	115 Move TEMP, X8
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfEqual {125}
	119 Move X0, 0xEFC000
	120 Move X0, [X0+1560]
	121 Call 0x1C17CF4
	122 Move W8, 1
	123 Move [X21+351], W8
	124 Move X0, [X19+32]
	125 Compare X0, 0
	126 JumpIfEqual {159}
	127 Move X1, X20
	128 Call ASN1.Add, X0, X1
	129 Move X8, [X19]
	130 Move X0, X19
	131 Move X20, [X31+16]
	132 Move X19, [X31+24]
	133 Move X2, [X8+376]
	134 Move X1, [X8+384]
	135 Move X30, [X31+32]
	136 Move X21, [X31+40]
	137 CallNoReturn X2
	138 Call 0x1C17F20
	139 Move X0, 0xF2A000
	140 Move X0, [X0+568]
	141 Call 0x1C17D08
	142 Move X19, X0
	143 Move X0, 0xF04000
	144 Move X0, [X0+1400]
	145 Call 0x1C17D08
	146 Call 0x1C17F10
	147 Move X1, X19
	148 Move X2, X31
	149 Move X20, X0
	150 Call ArgumentException..ctor, X0, X1
	151 Move X0, 0xF2A000
	152 Move X0, [X0+576]
	153 Call 0x1C17D08
	154 Move X1, X0
	155 Move X0, X20
	156 Call 0x1C17DEC
	157 Call 0x1C17F28
	158 Call 0x1C17F20
	159 Call 0x1C17F20
	160 Call 0x1C17F20
	161 Move X20, X0
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move X0, X20
	164 Call 0x3EB2AD0
	165 Move X20, X0
	166 Move X0, 0xF02000
	167 Move X0, [X0+3264]
	168 Call 0x1C17D08
	169 Move X8, [X20]
	170 Move X1, [X8]
	171 Call 0x1C18270
	172 Move TEMP, X0
	173 And TEMP, TEMP, 1
	174 Compare TEMP, 1
	175 JumpIfNotEqual {177}
	176 Call 0x3EB2AE0
	177 Move W0, 8
	178 Call 0x3EB2AF0
	179 Move X8, [X20]
	180 Move [X0], X8
	181 Move X1, 0xCBD000
	182 Add X1, X1, 3672
	183 Move X2, X31
	184 Call 0x3EB2B00
	185 Move X20, X0
	186 Call 0x3EB2AE0
	187 Move X0, X20
	188 Call 0x1D2D690
	189 Call 0x1991590

Method: System.Void .ctor(Mono.Security.X509.X509Extension extension)

Disassembly:
	0x031F87BC CBNZ X0, 0x31F8848
	0x031F87C0 MOVZ W0, 0x1A
	0x031F87C4 MOV X1, X31
	0x031F87C8 BL 0x33C19D4
	0x031F87CC ADRP X8, 0xF22000
	0x031F87D0 LDR X8, [X8 + 0x1D0]
	0x031F87D4 MOV X19, X0
	0x031F87D8 LDR X8, [X8]
	0x031F87DC LDR W9, [X8 + 0xE0]
	0x031F87E0 CBNZ W9, 0x31F87EC
	0x031F87E4 MOV X0, X8
	0x031F87E8 BL 0x1C16DFC
	0x031F87EC ADRP X8, 0xF29000
	0x031F87F0 LDR X8, [X8 + 0x298]
	0x031F87F4 MOV X0, X19
	0x031F87F8 MOV X2, X31
	0x031F87FC LDR X1, [X8]
	0x031F8800 BL 0x32FCE04
	0x031F8804 LDR X8, [X20]
	0x031F8808 ADRP X9, 0xF29000
	0x031F880C MOV X2, X31
	0x031F8810 LDR X8, [X8 + 0xB8]
	0x031F8814 STR X0, [X8]
	0x031F8818 LDR X8, [X20]
	0x031F881C LDR X8, [X8 + 0xB8]
	0x031F8820 LDR X9, [X9 + 0x2A0]
	0x031F8824 LDR X0, [X8]
	0x031F8828 LDR X1, [X9]
	0x031F882C BL 0x32FCE04
	0x031F8830 LDR X8, [X20]
	0x031F8834 LDR X8, [X8 + 0xB8]
	0x031F8838 STR X0, [X8]
	0x031F883C LDR X8, [X20]
	0x031F8840 LDR X8, [X8 + 0xB8]
	0x031F8844 LDR X0, [X8]
	0x031F8848 LDP X20, X19, [X31 + 0x10]
	0x031F884C LDR X30, [X31], #0x20
	0x031F8850 RET
	0x031F8854 STR X30, [X31 - 0x20]!
	0x031F8858 STP X20, X19, [X31 + 0x10]
	0x031F885C ADRP X19, 0x11E4000
	0x031F8860 ADRP X20, 0xF29000
	0x031F8864 LDRB W8, [X19 + 0x1D2]
	0x031F8868 LDR X20, [X20 + 0x290]
	0x031F886C TBNZ X8, 0x0, 0x31F88A8
	0x031F8870 ADRP X0, 0xF22000
	0x031F8874 LDR X0, [X0 + 0x1D0]
	0x031F8878 BL 0x1C16CF4
	0x031F887C ADRP X0, 0xF29000
	0x031F8880 LDR X0, [X0 + 0x290]
	0x031F8884 BL 0x1C16CF4
	0x031F8888 ADRP X0, 0xF29000
	0x031F888C LDR X0, [X0 + 0x298]
	0x031F8890 BL 0x1C16CF4
	0x031F8894 ADRP X0, 0xF29000
	0x031F8898 LDR X0, [X0 + 0x2A0]
	0x031F889C BL 0x1C16CF4
	0x031F88A0 MOVZ W8, 0x1
	0x031F88A4 STRB W8, [X19 + 0x1D2]
	0x031F88A8 LDR X8, [X20]
	0x031F88AC LDR X8, [X8 + 0xB8]
	0x031F88B0 LDR X0, [X8 + 0x8]
	0x031F88B4 CBNZ X0, 0x31F8928
	0x031F88B8 MOVZ W0, 0x23
	0x031F88BC MOV X1, X31
	0x031F88C0 BL 0x33C19D4
	0x031F88C4 ADRP X8, 0xF22000
	0x031F88C8 LDR X8, [X8 + 0x1D0]
	0x031F88CC MOV X19, X0
	0x031F88D0 LDR X8, [X8]
	0x031F88D4 LDR W9, [X8 + 0xE0]
	0x031F88D8 CBNZ W9, 0x31F88E4
	0x031F88DC MOV X0, X8
	0x031F88E0 BL 0x1C16DFC
	0x031F88E4 ADRP X8, 0xF29000
	0x031F88E8 LDR X8, [X8 + 0x298]
	0x031F88EC MOV X0, X19
	0x031F88F0 MOV X2, X31
	0x031F88F4 LDR X1, [X8]
	0x031F88F8 BL 0x32FCE04

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X1, X31
	006 Move X19, X0
	007 Call Object..ctor, X0
	008 Compare X20, 0
	009 JumpIfEqual {71}
	010 Move X8, [X20+32]
	011 Compare X8, 0
	012 JumpIfNotEqual {21}
	013 Move X8, [X20]
	014 Move X0, X20
	015 Move X9, [X8+392]
	016 Move X1, [X8+400]
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move X8, [X20+32]
	019 Compare X8, 0
	020 JumpIfEqual {53}
	021 Move W9, [X8+16]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X0, [X8+32]
	024 Compare X0, 0
	025 JumpIfEqual {53}
	026 Move X8, [X0]
	027 Move X9, [X8+664]
	028 Move X1, [X8+672]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X8, [X20+16]
	032 Move [X19+16], X8
	033 Move W8, [X20+24]
	034 Move [X19+24], W8
	035 Move X8, [X20+32]
	036 Compare X8, 0
	037 JumpIfNotEqual {44}
	038 Move X8, [X20]
	039 Move X0, X20
	040 Move X9, [X8+392]
	041 Move X1, [X8+400]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Move X8, [X20+32]
	044 Move X9, [X19]
	045 Move [X19+32], X8
	046 Move X0, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X2, [X9+376]
	050 Move X1, [X9+384]
	051 Move X30, [X31+32]
	052 CallNoReturn X2
	053 Move X0, 0xF2A000
	054 Move X0, [X0+568]
	055 Call 0x1C17D08
	056 Move X19, X0
	057 Move X0, 0xF04000
	058 Move X0, [X0+1400]
	059 Call 0x1C17D08
	060 Call 0x1C17F10
	061 Move X1, X19
	062 Move X2, X31
	063 Move X20, X0
	064 Call ArgumentException..ctor, X0, X1
	065 Move X0, 0xF2A000
	066 Move X0, [X0+584]
	067 Call 0x1C17D08
	068 Move X1, X0
	069 Move X0, X20
	070 Call 0x1C17DEC
	071 Move X0, 0xF01000
	072 Move X0, [X0+1320]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X19, X0
	076 Move X0, 0xF2A000
	077 Move X0, [X0+592]
	078 Call 0x1C17D08
	079 Move X1, X0
	080 Move X0, X19
	081 Move X2, X31
	082 Call ArgumentNullException..ctor, X0, X1
	083 Move X0, 0xF2A000
	084 Move X0, [X0+584]
	085 Call 0x1C17D08
	086 Move X1, X0
	087 Move X0, X19
	088 Call 0x1C17DEC

Method: System.Void Decode()

Disassembly:
	0x031F8928 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Return 

Method: System.Void Encode()

Disassembly:
	0x031F892C LDR X30, [X31], #0x20

ISIL:
	001 Return 

Method: System.String get_Oid()

Disassembly:
	0x031F8930 RET
	0x031F8934 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Boolean get_Critical()

Disassembly:
	0x031F8938 STP X20, X19, [X31 + 0x10]
	0x031F893C ADRP X19, 0x11E4000

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: Mono.Security.ASN1 get_Value()

Disassembly:
	0x031F88FC LDR X8, [X20]
	0x031F8900 MOV X2, X31
	0x031F8904 LDR X8, [X8 + 0xB8]
	0x031F8908 STR X0, [X8 + 0x8]
	0x031F890C ADRP X8, 0xF29000
	0x031F8910 LDR X8, [X8 + 0x2A0]
	0x031F8914 LDR X1, [X8]
	0x031F8918 BL 0x32FCE04
	0x031F891C LDR X8, [X20]
	0x031F8920 LDR X8, [X8 + 0xB8]
	0x031F8924 STR X0, [X8 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+32]
	005 Compare X0, 0
	006 JumpIfNotEqual {13}
	007 Move X8, [X19]
	008 Move X0, X19
	009 Move X9, [X8+392]
	010 Move X1, [X8+400]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move X0, [X19+32]
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x031F8940 ADRP X21, 0xF29000
	0x031F8944 LDRB W8, [X19 + 0x1D3]
	0x031F8948 LDR X21, [X21 + 0x290]
	0x031F894C TBNZ X8, 0x0, 0x31F8970
	0x031F8950 ADRP X0, 0xF29000
	0x031F8954 LDR X0, [X0 + 0x290]
	0x031F8958 BL 0x1C16CF4
	0x031F895C ADRP X0, 0xF29000
	0x031F8960 LDR X0, [X0 + 0x2A8]
	0x031F8964 BL 0x1C16CF4
	0x031F8968 MOVZ W8, 0x1
	0x031F896C STRB W8, [X19 + 0x1D3]
	0x031F8970 LDR X8, [X21]
	0x031F8974 LDR X8, [X8 + 0xB8]
	0x031F8978 LDR X19, [X8 + 0x10]
	0x031F897C CBNZ X19, 0x31F89BC
	0x031F8980 BL 0x31F875C
	0x031F8984 ADRP X8, 0xF29000
	0x031F8988 LDR X8, [X8 + 0x2A8]
	0x031F898C MOV X20, X0
	0x031F8990 LDR X8, [X8]
	0x031F8994 MOV X0, X8
	0x031F8998 BL 0x1C16F10
	0x031F899C MOV X1, X31
	0x031F89A0 MOV X19, X0
	0x031F89A4 BL 0x33BDD8C
	0x031F89A8 STR X20, [X19 + 0x10]
	0x031F89AC STRB W31, [X19 + 0x18]
	0x031F89B0 LDR X8, [X21]
	0x031F89B4 LDR X8, [X8 + 0xB8]
	0x031F89B8 STR X19, [X8 + 0x10]
	0x031F89BC MOV X0, X19
	0x031F89C0 LDP X20, X19, [X31 + 0x10]
	0x031F89C4 LDP X30, X21, [X31], #0x20
	0x031F89C8 RET
	0x031F89CC STP X30, X21, [X31 - 0x20]!
	0x031F89D0 STP X20, X19, [X31 + 0x10]
	0x031F89D4 MOV X19, X1
	0x031F89D8 MOV X1, X31
	0x031F89DC MOV X20, X0
	0x031F89E0 AND W21, W2, 0x1
	0x031F89E4 BL 0x33BDD8C
	0x031F89E8 STR X19, [X20 + 0x10]
	0x031F89EC STRB W21, [X20 + 0x18]
	0x031F89F0 LDP X20, X19, [X31 + 0x10]
	0x031F89F4 LDP X30, X21, [X31], #0x20
	0x031F89F8 RET
	0x031F89FC STP X30, X21, [X31 - 0x20]!
	0x031F8A00 STP X20, X19, [X31 + 0x10]
	0x031F8A04 ADRP X19, 0x11E4000
	0x031F8A08 ADRP X21, 0xF29000
	0x031F8A0C LDRB W8, [X19 + 0x1D4]
	0x031F8A10 LDR X21, [X21 + 0x290]
	0x031F8A14 TBNZ X8, 0x0, 0x31F8A38
	0x031F8A18 ADRP X0, 0xF29000
	0x031F8A1C LDR X0, [X0 + 0x290]
	0x031F8A20 BL 0x1C16CF4
	0x031F8A24 ADRP X0, 0xF29000
	0x031F8A28 LDR X0, [X0 + 0x2A8]
	0x031F8A2C BL 0x1C16CF4
	0x031F8A30 MOVZ W8, 0x1
	0x031F8A34 STRB W8, [X19 + 0x1D4]
	0x031F8A38 LDR X8, [X21]
	0x031F8A3C LDR X8, [X8 + 0xB8]
	0x031F8A40 LDR X19, [X8 + 0x18]
	0x031F8A44 CBNZ X19, 0x31F8A84
	0x031F8A48 BL 0x31F8854
	0x031F8A4C ADRP X8, 0xF29000
	0x031F8A50 LDR X8, [X8 + 0x2A8]
	0x031F8A54 MOV X20, X0
	0x031F8A58 LDR X8, [X8]
	0x031F8A5C MOV X0, X8
	0x031F8A60 BL 0x1C16F10
	0x031F8A64 MOV X1, X31
	0x031F8A68 MOV X19, X0
	0x031F8A6C BL 0x33BDD8C
	0x031F8A70 STR X20, [X19 + 0x10]
	0x031F8A74 STRB W31, [X19 + 0x18]
	0x031F8A78 LDR X8, [X21]
	0x031F8A7C LDR X8, [X8 + 0xB8]
	0x031F8A80 STR X19, [X8 + 0x18]
	0x031F8A84 MOV X0, X19
	0x031F8A88 LDP X20, X19, [X31 + 0x10]
	0x031F8A8C LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x11E5000
	008 Move W8, [X21+453]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF2A000
	016 Move X0, [X0+248]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+453], W8
	020 Compare X20, 0
	021 JumpIfEqual {86}
	022 Move X8, 0xF2A000
	023 Move X8, [X8+248]
	024 Move X9, [X20]
	025 Move X8, [X8]
	026 Move W11, [X9+304]
	027 Move W10, [X8+304]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X9, [X9+200]
	030 Add X9, X9, X10
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 NotImplemented "Instruction CSEL not yet implemented."
	034 Compare X22, 0
	035 JumpIfEqual {96}
	036 Move W8, [X19+24]
	037 Move W9, [X22+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X0, [X19+16]
	040 Move X1, [X22+16]
	041 Move X2, X31
	042 Call String.op_Inequality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {86}
	047 Move X0, [X19+32]
	048 Compare X0, 0
	049 JumpIfEqual {96}
	050 Move X8, [X0+24]
	051 Compare X8, 0
	052 JumpIfEqual {54}
	053 Move W9, [X8+24]
	054 Move W9, W31
	055 Move X10, [X22+32]
	056 Compare X10, 0
	057 JumpIfEqual {96}
	058 Move X10, [X10+24]
	059 Compare X10, 0
	060 JumpIfEqual {62}
	061 Move W10, [X10+24]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move W20, W31
	064 Compare X8, 0
	065 JumpIfEqual {67}
	066 Move W23, [X8+24]
	067 Move W23, W31
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W1, W20
	070 Call ASN1.get_Item, X0, X1
	071 Move X8, [X22+32]
	072 Compare X8, 0
	073 JumpIfEqual {96}
	074 Move X21, X0
	075 Move X0, X8
	076 Move W1, W20
	077 Call ASN1.get_Item, X0, X1
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X0, [X19+32]
	080 Compare X0, 0
	081 JumpIfEqual {96}
	082 Move X8, [X0+24]
	083 Add W20, W20, 1
	084 Compare X8, 0
	085 JumpIfNotEqual {66}
	086 Move W0, W31
	087 Move X20, [X31+32]
	088 Move X19, [X31+40]
	089 Move X22, [X31+16]
	090 Move X21, [X31+24]
	091 Move X30, [X31+48]
	092 Move X23, [X31+56]
	093 Return X0
	094 NotImplemented "Instruction CMP not yet implemented."
	095 NotImplemented "Instruction CSET not yet implemented."
	096 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x031F8A90 RET
	0x031F8A94 STR X30, [X31 - 0x30]!
	0x031F8A98 STP X22, X21, [X31 + 0x10]
	0x031F8A9C STP X20, X19, [X31 + 0x20]
	0x031F8AA0 ADRP X20, 0x11E4000
	0x031F8AA4 LDRB W8, [X20 + 0x1D6]
	0x031F8AA8 MOV X19, X0
	0x031F8AAC TBNZ X8, 0x0, 0x31F8ADC

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+344]
	007 Move X1, [X8+352]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void WriteLine(System.Text.StringBuilder sb, System.Int32 n, System.Int32 pos)

Disassembly:
	0x031F8AB0 ADRP X0, 0xF22000
	0x031F8AB4 LDR X0, [X0 + 0x1D0]
	0x031F8AB8 BL 0x1C16CF4
	0x031F8ABC ADRP X0, 0xF29000
	0x031F8AC0 LDR X0, [X0 + 0x2B0]
	0x031F8AC4 BL 0x1C16CF4
	0x031F8AC8 ADRP X0, 0xF29000
	0x031F8ACC LDR X0, [X0 + 0x2B8]
	0x031F8AD0 BL 0x1C16CF4
	0x031F8AD4 MOVZ W8, 0x1
	0x031F8AD8 STRB W8, [X20 + 0x1D6]
	0x031F8ADC LDR X20, [X19 + 0x20]
	0x031F8AE0 CBNZ X20, 0x31F8B54
	0x031F8AE4 ADRP X8, 0xF22000
	0x031F8AE8 LDR X8, [X8 + 0x1D0]
	0x031F8AEC LDR X20, [X19 + 0x10]
	0x031F8AF0 LDR X0, [X8]
	0x031F8AF4 LDR W8, [X0 + 0xE0]
	0x031F8AF8 CBNZ W8, 0x31F8B00
	0x031F8AFC BL 0x1C16DFC
	0x031F8B00 ADRP X8, 0xF29000
	0x031F8B04 LDR X8, [X8 + 0x2B8]
	0x031F8B08 MOV X0, X20
	0x031F8B0C MOV X2, X31
	0x031F8B10 LDR X1, [X8]
	0x031F8B14 BL 0x32FCE04
	0x031F8B18 ADRP X8, 0xF29000
	0x031F8B1C LDRB W22, [X19 + 0x18]
	0x031F8B20 LDR X8, [X8 + 0x2B0]
	0x031F8B24 MOV X21, X0
	0x031F8B28 LDR X8, [X8]
	0x031F8B2C MOV X0, X8
	0x031F8B30 BL 0x1C16F10
	0x031F8B34 MOV X1, X31
	0x031F8B38 MOV X20, X0
	0x031F8B3C BL 0x33BDD8C
	0x031F8B40 MOVZ W8, 0x1
	0x031F8B44 STR X21, [X20 + 0x10]
	0x031F8B48 STRB W22, [X20 + 0x29]
	0x031F8B4C STRB W8, [X20 + 0x28]
	0x031F8B50 STR X20, [X19 + 0x20]
	0x031F8B54 MOV X0, X20
	0x031F8B58 LDP X20, X19, [X31 + 0x20]
	0x031F8B5C LDP X22, X21, [X31 + 0x10]
	0x031F8B60 LDR X30, [X31], #0x30
	0x031F8B64 RET
	0x031F8B68 STR X30, [X31 - 0x30]!
	0x031F8B6C STP X22, X21, [X31 + 0x10]
	0x031F8B70 STP X20, X19, [X31 + 0x20]
	0x031F8B74 ADRP X22, 0x11E4000
	0x031F8B78 LDRB W8, [X22 + 0x1D7]
	0x031F8B7C MOV W19, W2
	0x031F8B80 MOV X20, X1
	0x031F8B84 MOV X21, X0
	0x031F8B88 TBNZ X8, 0x0, 0x31F8BAC
	0x031F8B8C ADRP X0, 0xF22000
	0x031F8B90 LDR X0, [X0 + 0x1D0]
	0x031F8B94 BL 0x1C16CF4
	0x031F8B98 ADRP X0, 0xF29000
	0x031F8B9C LDR X0, [X0 + 0x2B0]
	0x031F8BA0 BL 0x1C16CF4
	0x031F8BA4 MOVZ W8, 0x1
	0x031F8BA8 STRB W8, [X22 + 0x1D7]
	0x031F8BAC CBZ X20, 0x31F8C34
	0x031F8BB0 ADRP X8, 0xF22000
	0x031F8BB4 LDR X8, [X8 + 0x1D0]
	0x031F8BB8 LDR X21, [X21 + 0x10]
	0x031F8BBC LDR X0, [X8]
	0x031F8BC0 LDR W8, [X0 + 0xE0]
	0x031F8BC4 CBNZ W8, 0x31F8BCC
	0x031F8BC8 BL 0x1C16DFC
	0x031F8BCC MOV X0, X21
	0x031F8BD0 MOV X1, X20
	0x031F8BD4 MOV X2, X31
	0x031F8BD8 BL 0x32FCE04
	0x031F8BDC MOV X20, X0
	0x031F8BE0 TBNZ X19, 0x0, 0x31F8BF8
	0x031F8BE4 MOV X0, X20
	0x031F8BE8 MOV X1, X31
	0x031F8BEC BL 0x32EC360
	0x031F8BF0 MOV X19, X31
	0x031F8BF4 TBZ X0, 0x0, 0x31F8C20
	0x031F8BF8 ADRP X8, 0xF29000
	0x031F8BFC LDR X8, [X8 + 0x2B0]
	0x031F8C00 LDR X0, [X8]
	0x031F8C04 BL 0x1C16F10
	0x031F8C08 MOV X1, X31
	0x031F8C0C MOV X19, X0
	0x031F8C10 BL 0x33BDD8C
	0x031F8C14 MOVZ W8, 0x1
	0x031F8C18 STR X20, [X19 + 0x10]
	0x031F8C1C STRH W8, [X19 + 0x28]
	0x031F8C20 MOV X0, X19
	0x031F8C24 LDP X20, X19, [X31 + 0x20]
	0x031F8C28 LDP X22, X21, [X31 + 0x10]
	0x031F8C2C LDR X30, [X31], #0x30
	0x031F8C30 RET
	0x031F8C34 ADRP X0, 0xF00000
	0x031F8C38 LDR X0, [X0 + 0x528]
	0x031F8C3C BL 0x1C16D08
	0x031F8C40 BL 0x1C16F10
	0x031F8C44 MOV X19, X0
	0x031F8C48 ADRP X0, 0xF29000
	0x031F8C4C LDR X0, [X0 + 0x2C0]
	0x031F8C50 BL 0x1C16D08
	0x031F8C54 MOV X1, X0
	0x031F8C58 MOV X0, X19
	0x031F8C5C MOV X2, X31
	0x031F8C60 BL 0x330E100
	0x031F8C64 ADRP X0, 0xF29000
	0x031F8C68 LDR X0, [X0 + 0x2C8]
	0x031F8C6C BL 0x1C16D08
	0x031F8C70 MOV X1, X0
	0x031F8C74 MOV X0, X19
	0x031F8C78 BL 0x1C16DEC
	0x031F8C7C B 0x31F77BC
	0x031F8C80 STP X30, X21, [X31 - 0x20]!
	0x031F8C84 STP X20, X19, [X31 + 0x10]
	0x031F8C88 ADRP X20, 0x11E4000
	0x031F8C8C LDRB W8, [X20 + 0x1D8]
	0x031F8C90 MOV X19, X0
	0x031F8C94 TBNZ X8, 0x0, 0x31F8CAC
	0x031F8C98 ADRP X0, 0xF28000
	0x031F8C9C LDR X0, [X0 + 0xB98]
	0x031F8CA0 BL 0x1C16CF4
	0x031F8CA4 MOVZ W8, 0x1
	0x031F8CA8 STRB W8, [X20 + 0x1D8]
	0x031F8CAC LDR X0, [X19 + 0x20]
	0x031F8CB0 CBZ X0, 0x31F8D48
	0x031F8CB4 ADRP X20, 0xF28000
	0x031F8CB8 LDR X20, [X20 + 0xB98]
	0x031F8CBC BL 0x31E7D00
	0x031F8CC0 LDR X8, [X20]
	0x031F8CC4 MOV X21, X0
	0x031F8CC8 MOV X0, X8
	0x031F8CCC BL 0x1C16F10
	0x031F8CD0 MOV X1, X21
	0x031F8CD4 MOV X20, X0

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X23, 0x11E5000
	014 Move W8, [X23+454]
	015 Move W20, W3
	016 Move W21, W2
	017 Move X19, X1
	018 Move X22, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {46}
	023 Move X0, 0xF05000
	024 Move X0, [X0+2536]
	025 Call 0x1C17CF4
	026 Move X0, 0xEFE000
	027 Move X0, [X0+3144]
	028 Call 0x1C17CF4
	029 Move X0, 0xF2A000
	030 Move X0, [X0+600]
	031 Call 0x1C17CF4
	032 Move X0, 0xEFC000
	033 Move X0, [X0+3544]
	034 Call 0x1C17CF4
	035 Move X0, 0xEFE000
	036 Move X0, [X0+416]
	037 Call 0x1C17CF4
	038 Move X0, 0xF29000
	039 Move X0, [X0+2984]
	040 Call 0x1C17CF4
	041 Move X0, 0xF05000
	042 Move X0, [X0+1936]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X23+454], W8
	046 Move X0, [X22+32]
	047 Compare X0, 0
	048 JumpIfEqual {151}
	049 Move X23, 0xEFE000
	050 Move X27, 0xF29000
	051 Move X25, 0xF05000
	052 Move X23, [X23+3144]
	053 Move X27, [X27+2984]
	054 Move X25, [X25+1936]
	055 Call ASN1.get_Value, X0
	056 Move X29, 0xEFC000
	057 Move X26, 0xF2A000
	058 Move X29, [X29+3544]
	059 Move X26, [X26+600]
	060 Move X22, X0
	061 Move W28, W31
	062 Move W24, W20
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Compare X22, 0
	065 JumpIfEqual {151}
	066 Move X0, [X23]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Move X0, X31
	072 Call CultureInfo.get_InvariantCulture
	073 Move W8, [X22+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X1, [X27]
	076 Add X8, X22, W24
	077 Move X2, X0
	078 Add X0, X8, 32
	079 Move X3, X31
	080 Call Byte.ToString, X0, X1, X2
	081 Compare X19, 0
	082 JumpIfEqual {151}
	083 Move X1, X0
	084 Move X0, X19
	085 Move X2, X31
	086 Add W24, W24, 1
	087 Call StringBuilder.Append, X0, X1
	088 Move X8, X29
	089 Move X8, X26
	090 Compare X19, 0
	091 JumpIfEqual {151}
	092 Move X1, [X8]
	093 Move X0, X19
	094 Move X2, X31
	095 Call StringBuilder.Append, X0, X1
	096 Add W28, W28, 1
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X8, 0xEFE000
	099 Move X8, [X8+416]
	100 Move X0, X19
	101 Move X2, X31
	102 Move X1, [X8]
	103 Call StringBuilder.Append, X0, X1
	104 Move X24, 0xF05000
	105 Move X24, [X24+2536]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Compare X22, 0
	108 JumpIfEqual {151}
	109 Move W8, [X22+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Add X8, X22, W20
	112 Move W23, [X8+32]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X0, [X24]
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {119}
	118 Call 0x1C17DFC
	119 Move W0, W23
	120 Move X1, X31
	121 Call Convert.ToChar, X0
	122 Move W1, W0
	123 Move X0, X19
	124 Move X2, X31
	125 Call StringBuilder.Append, X0, X1
	126 Move X1, [X25]
	127 Move X0, X19
	128 Move X2, X31
	129 Call StringBuilder.Append, X0, X1
	130 Subtract W21, W21, 1
	131 Add W20, W20, 1
	132 Move X0, X31
	133 Call Environment.get_NewLine
	134 Move X1, X0
	135 Move X0, X19
	136 Move X20, [X31+80]
	137 Move X19, [X31+88]
	138 Move X22, [X31+64]
	139 Move X21, [X31+72]
	140 Move X24, [X31+48]
	141 Move X23, [X31+56]
	142 Move X26, [X31+32]
	143 Move X25, [X31+40]
	144 Move X28, [X31+16]
	145 Move X27, [X31+24]
	146 Move X2, X31
	147 Move X29, [X31+96]
	148 Move X30, [X31+104]
	149 Call StringBuilder.Append, X0, X1
	150 Return 
	151 Call 0x1C17F20
	152 Call 0x1C17F28

Method: System.String ToString()

Disassembly:
	0x031F8CD8 BL 0x31E7A44
	0x031F8CDC CBZ X20, 0x31F8D48
	0x031F8CE0 LDRB W8, [X20 + 0x10]
	0x031F8CE4 CMP W8, 0x30
	0x031F8CE8 B.NE 0x31F8D4C
	0x031F8CEC MOV W21, W31
	0x031F8CF0 LDR X0, [X20 + 0x20]
	0x031F8CF4 CBZ X0, 0x31F8D08
	0x031F8CF8 LDR X8, [X0]
	0x031F8CFC LDR X9, [X8 + 0x298]
	0x031F8D00 LDR X1, [X8 + 0x2A0]
	0x031F8D04 BLR X9
	0x031F8D08 CMP W21, W0
	0x031F8D0C B.GE 0x31F8D3C
	0x031F8D10 MOV X0, X20
	0x031F8D14 MOV W1, W21
	0x031F8D18 BL 0x31E8704
	0x031F8D1C CBZ X0, 0x31F8D48
	0x031F8D20 LDRB W8, [X0 + 0x10]
	0x031F8D24 CMP W8, 0x80
	0x031F8D28 B.NE 0x31F8D34
	0x031F8D2C BL 0x31E7D00
	0x031F8D30 STR X0, [X19 + 0x28]
	0x031F8D34 ADD W21, W21, 0x1
	0x031F8D38 B 0x31F8CF0
	0x031F8D3C LDP X20, X19, [X31 + 0x10]
	0x031F8D40 LDP X30, X21, [X31], #0x20
	0x031F8D44 RET
	0x031F8D48 BL 0x1C16F20
	0x031F8D4C ADRP X0, 0xF03000
	0x031F8D50 LDR X0, [X0 + 0x578]
	0x031F8D54 BL 0x1C16D08
	0x031F8D58 BL 0x1C16F10
	0x031F8D5C MOV X19, X0
	0x031F8D60 ADRP X0, 0xF29000
	0x031F8D64 LDR X0, [X0 + 0x2D0]
	0x031F8D68 BL 0x1C16D08
	0x031F8D6C MOV X1, X0
	0x031F8D70 MOV X0, X19
	0x031F8D74 MOV X2, X31
	0x031F8D78 BL 0x3314A68
	0x031F8D7C ADRP X0, 0xF29000
	0x031F8D80 LDR X0, [X0 + 0x2D8]
	0x031F8D84 BL 0x1C16D08
	0x031F8D88 MOV X1, X0
	0x031F8D8C MOV X0, X19
	0x031F8D90 BL 0x1C16DEC
	0x031F8D94 STP X30, X23, [X31 - 0x30]!
	0x031F8D98 STP X22, X21, [X31 + 0x10]
	0x031F8D9C STP X20, X19, [X31 + 0x20]
	0x031F8DA0 ADRP X20, 0x11E4000
	0x031F8DA4 ADRP X22, 0xF28000
	0x031F8DA8 LDRB W8, [X20 + 0x1D9]
	0x031F8DAC LDR X22, [X22 + 0xB98]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x11E5000
	008 Move X21, 0xEFC000
	009 Move W8, [X20+455]
	010 Move X21, [X21+2288]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEFC000
	017 Move X0, [X0+2288]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+455], W8
	021 Move X0, [X21]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X20, X0
	025 Call StringBuilder..ctor, X0
	026 Move X8, [X19+32]
	027 Compare X8, 0
	028 JumpIfEqual {64}
	029 Move X8, [X8+24]
	030 Compare X8, 0
	031 JumpIfEqual {44}
	032 Move W8, [X8+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 And W21, W8, 7
	035 Move W22, W31
	036 NotImplemented "Instruction SBFM not yet implemented."
	037 Move W2, 8
	038 Move X0, X19
	039 Move X1, X20
	040 Move W3, W22
	041 Call X509Extension.WriteLine, X0, X1, X2, X3
	042 Subtract W23, W23, 1
	043 Add W22, W22, 8
	044 Move W21, W31
	045 Move W22, W31
	046 Move X0, X19
	047 Move X1, X20
	048 Move W2, W21
	049 Move W3, W22
	050 Call X509Extension.WriteLine, X0, X1, X2, X3
	051 Compare X20, 0
	052 JumpIfEqual {64}
	053 Move X8, [X20]
	054 Move X0, X20
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X2, [X8+360]
	060 Move X1, [X8+368]
	061 Move X30, [X31+48]
	062 Move X23, [X31+56]
	063 CallNoReturn X2
	064 Call 0x1C17F20

