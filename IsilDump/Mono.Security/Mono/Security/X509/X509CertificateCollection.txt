Type: Mono.Security.X509.X509CertificateCollection

Method: System.Void .ctor()

Disassembly:
	0x031EB6B4 BL 0x31EBC00
	0x031EB6B8 TBZ X0, 0x0, 0x31EBA20

ISIL:
	001 Move X1, X31
	002 Call CollectionBase..ctor, X0
	003 Return 

Method: Mono.Security.X509.X509Certificate get_Item(System.Int32 index)

Disassembly:
	0x031F7228 LDR X0, [X0 + 0x228]
	0x031F722C BL 0x1C16CF4
	0x031F7230 MOVZ W8, 0x1
	0x031F7234 STRB W8, [X22 + 0x1C3]
	0x031F7238 CBZ X20, 0x31F7334
	0x031F723C LDR X8, [X20]
	0x031F7240 MOV X0, X20
	0x031F7244 LDP X9, X1, [X8 + 0x188]
	0x031F7248 BLR X9
	0x031F724C CBZ X21, 0x31F7334
	0x031F7250 LDR X8, [X21]
	0x031F7254 MOV X22, X0
	0x031F7258 MOV X0, X21
	0x031F725C LDR X9, [X8 + 0x228]
	0x031F7260 LDR X1, [X8 + 0x230]
	0x031F7264 BLR X9
	0x031F7268 MOV X1, X0
	0x031F726C MOV X0, X22
	0x031F7270 MOV X2, X31
	0x031F7274 BL 0x3226EF8
	0x031F7278 TBZ X0, 0x0, 0x31F7284
	0x031F727C MOV W0, W31
	0x031F7280 B 0x31F7324
	0x031F7284 LDR W8, [X21 + 0x98]
	0x031F7288 CMP W8, 0x3
	0x031F728C B.LT 0x31F72F0
	0x031F7290 MOV X0, X19
	0x031F7294 MOV X1, X21
	0x031F7298 BL 0x31F7424
	0x031F729C TBNZ X0, 0x0, 0x31F72F0
	0x031F72A0 LDR X0, [X21 + 0xB8]
	0x031F72A4 CBZ X0, 0x31F7334
	0x031F72A8 ADRP X8, 0xF2A000
	0x031F72AC LDR X8, [X8 + 0x228]
	0x031F72B0 LDR X1, [X8]
	0x031F72B4 BL 0x31F7450
	0x031F72B8 CBZ X0, 0x31F72E8
	0x031F72BC ADRP X8, 0xF2A000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11E6000
	006 Move W8, [X21+436]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF2A000
	014 Move X0, [X0+3264]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+436], W8
	018 Move X0, [X20+16]
	019 Compare X0, 0
	020 JumpIfEqual {45}
	021 Move X8, [X0]
	022 Move W1, W19
	023 Move X9, [X8+744]
	024 Move X2, [X8+752]
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Compare X0, 0
	027 JumpIfEqual {39}
	028 Move X9, 0xF2A000
	029 Move X9, [X9+3264]
	030 Move X8, [X0]
	031 Move X1, [X9]
	032 Move W10, [X8+304]
	033 Move W9, [X1+304]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X8, [X8+200]
	036 Add X8, X8, X9
	037 NotImplemented "Instruction LDUR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0
	044 Call 0x1C181E0
	045 Call 0x1C17F20

Method: System.Int32 Add(Mono.Security.X509.X509Certificate value)

Disassembly:
	0x031EB848 MOV X1, X23
	0x031EB84C MOV X22, X0
	0x031EB850 BL 0x31E7A44
	0x031EB854 CBZ X22, 0x31EB8C0
	0x031EB858 MOV W23, W31
	0x031EB85C LDR X0, [X22 + 0x20]
	0x031EB860 CBZ X0, 0x31EB874
	0x031EB864 LDR X8, [X0]
	0x031EB868 LDR X9, [X8 + 0x298]
	0x031EB86C LDR X1, [X8 + 0x2A0]
	0x031EB870 BLR X9
	0x031EB874 CMP W23, W0
	0x031EB878 B.GE 0x31EB89C
	0x031EB87C MOV X0, X22
	0x031EB880 MOV W1, W23
	0x031EB884 BL 0x31E8704
	0x031EB888 MOV X1, X0
	0x031EB88C MOV X0, X19
	0x031EB890 BL 0x31EBC88
	0x031EB894 ADD W23, W23, 0x1
	0x031EB898 B 0x31EB85C
	0x031EB89C ADD W21, W21, 0x1
	0x031EB8A0 B 0x31EB70C
	0x031EB8A4 LDP X20, X19, [X31 + 0x50]
	0x031EB8A8 LDP X22, X21, [X31 + 0x40]
	0x031EB8AC LDP X24, X23, [X31 + 0x30]
	0x031EB8B0 LDP X26, X25, [X31 + 0x20]
	0x031EB8B4 LDP X28, X27, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {14}
	005 Move X0, [X0+16]
	006 Compare X0, 0
	007 JumpIfEqual {32}
	008 Move X8, [X0]
	009 Move X3, [X8+776]
	010 Move X2, [X8+784]
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X3
	014 Move X0, 0xF0E000
	015 Move X0, [X0+1320]
	016 Call 0x1C17D08
	017 Call 0x1C17F10
	018 Move X19, X0
	019 Move X0, 0xF13000
	020 Move X0, [X0+3784]
	021 Call 0x1C17D08
	022 Move X1, X0
	023 Move X0, X19
	024 Move X2, X31
	025 Call ArgumentNullException..ctor, X0, X1
	026 Move X0, 0xF36000
	027 Move X0, [X0+3312]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X19
	031 Call 0x1C17DEC
	032 Call 0x1C17F20

Method: System.Void AddRange(Mono.Security.X509.X509CertificateCollection value)

Disassembly:
	0x031F72C0 LDR X8, [X8 + 0x220]
	0x031F72C4 MOV X22, X0
	0x031F72C8 LDR X0, [X8]
	0x031F72CC BL 0x1C16F10
	0x031F72D0 MOV X1, X22
	0x031F72D4 MOV X23, X0
	0x031F72D8 BL 0x31F77BC
	0x031F72DC CBZ X23, 0x31F7334
	0x031F72E0 LDRB W8, [X23 + 0x28]
	0x031F72E4 CBNZ W8, 0x31F72F0
	0x031F72E8 MOVZ W8, 0x400
	0x031F72EC STR W8, [X19 + 0x30]
	0x031F72F0 LDR X8, [X21]
	0x031F72F4 MOV X0, X21
	0x031F72F8 LDP X9, X1, [X8 + 0x1D8]
	0x031F72FC BLR X9
	0x031F7300 MOV X1, X0
	0x031F7304 MOV X0, X20
	0x031F7308 BL 0x31F5DC8
	0x031F730C TBZ X0, 0x0, 0x31F7318
	0x031F7310 MOVZ W0, 0x1
	0x031F7314 B 0x31F7324
	0x031F7318 MOV W0, W31
	0x031F731C MOVZ W8, 0x8
	0x031F7320 STR W8, [X19 + 0x30]
	0x031F7324 LDP X20, X19, [X31 + 0x20]
	0x031F7328 LDP X22, X21, [X31 + 0x10]
	0x031F732C LDP X30, X23, [X31], #0x30
	0x031F7330 RET
	0x031F7334 BL 0x1C16F20
	0x031F7338 STP X30, X21, [X31 - 0x20]!
	0x031F733C STP X20, X19, [X31 + 0x10]
	0x031F7340 ADRP X21, 0x11E5000
	0x031F7344 LDRB W8, [X21 + 0x1C0]
	0x031F7348 MOV X19, X1
	0x031F734C MOV X20, X0
	0x031F7350 TBNZ X8, 0x0, 0x31F7368
	0x031F7354 ADRP X0, 0xF2A000
	0x031F7358 LDR X0, [X0 + 0x230]
	0x031F735C BL 0x1C16CF4
	0x031F7360 MOVZ W8, 0x1
	0x031F7364 STRB W8, [X21 + 0x1C0]
	0x031F7368 CBZ X19, 0x31F73E0
	0x031F736C MOV X0, X19
	0x031F7370 BL 0x31F5BC8
	0x031F7374 MOV W19, W0
	0x031F7378 TBZ X0, 0x0, 0x31F73C8
	0x031F737C ADRP X20, 0xF2A000
	0x031F7380 LDR X20, [X20 + 0x230]
	0x031F7384 LDR X0, [X20]
	0x031F7388 LDR W8, [X0 + 0xE0]
	0x031F738C CBNZ W8, 0x31F7394

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X1, 0
	007 JumpIfEqual {42}
	008 Move X20, X0
	009 Move X0, [X1+16]
	010 Move X19, X1
	011 Compare X0, 0
	012 JumpIfEqual {35}
	013 Move W21, W31
	014 Move X8, [X0]
	015 Move X9, [X8+664]
	016 Move X1, [X8+672]
	017 NotImplemented "Instruction BLR not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X22, [X20+16]
	020 Move X0, X19
	021 Move W1, W21
	022 Call X509CertificateCollection.get_Item, X0, X1
	023 Compare X22, 0
	024 JumpIfEqual {35}
	025 Move X8, [X22]
	026 Move X1, X0
	027 Move X0, X22
	028 Move X9, [X8+776]
	029 Move X2, [X8+784]
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Move X0, [X19+16]
	032 Add W21, W21, 1
	033 Compare X0, 0
	034 JumpIfNotEqual {14}
	035 Call 0x1C17F20
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Return 
	042 Move X0, 0xF02000
	043 Move X0, [X0+1320]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0xF07000
	048 Move X0, [X0+3784]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Move X2, X31
	053 Call ArgumentNullException..ctor, X0, X1
	054 Move X0, 0xF2B000
	055 Move X0, [X0+528]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Call 0x1C17DEC

Method: System.Boolean Contains(Mono.Security.X509.X509Certificate value)

Disassembly:
	0x031F7390 BL 0x1C16DFC
	0x031F7394 ADRP X21, 0x11E5000
	0x031F7398 LDRB W8, [X21 + 0x206]
	0x031F739C CBNZ W8, 0x31F73B4
	0x031F73A0 ADRP X0, 0xF2A000
	0x031F73A4 LDR X0, [X0 + 0x230]

ISIL:
	001 Move [X31-16], X30
	002 Call X509CertificateCollection.IndexOf, X0, X1
	003 Add W31, W0, 1
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Move X30, [X31+16]
	006 Return X0

Method: Mono.Security.X509.X509CertificateCollection/X509CertificateEnumerator GetEnumerator()

Disassembly:
	0x031EEE74 CBNZ X25, 0x31EEFE4
	0x031EEE78 CMP W26, 0x9
	0x031EEE7C B.NE 0x31EEEA8
	0x031EEE80 B 0x31EEEAC
	0x031EEE84 LDRSW X9, [X10]
	0x031EEE88 ADD X8, X8, X9, 0x4, LSL
	0x031EEE8C ADD X0, X8, 0x138
	0x031EEE90 LDP X8, X1, [X0]
	0x031EEE94 MOV X0, X24
	0x031EEE98 BLR X8
	0x031EEE9C CBNZ X25, 0x31EEFE4
	0x031EEEA0 CMP W26, 0xC
	0x031EEEA4 B.EQ 0x31EEEAC
	0x031EEEA8 CBNZ W26, 0x31EEFAC
	0x031EEEAC MOV X0, X22
	0x031EEEB0 MOV X1, X23
	0x031EEEB4 BL 0x31E7ED0
	0x031EEEB8 LDR X23, [X31 + 0x8]
	0x031EEEBC CBZ X23, 0x31EEFD8
	0x031EEEC0 MOV X0, X23
	0x031EEEC4 MOV X1, X22
	0x031EEEC8 BL 0x31E7ED0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11EF000
	006 Move X21, 0xF33000
	007 Move W8, [X20+437]
	008 Move X21, [X21+3896]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF33000
	015 Move X0, [X0+3896]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+437], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X19
	022 Move X20, X0
	023 Call X509CertificateEnumerator..ctor, X0, X1
	024 Move X0, X20
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x031F75A4 MOV X0, X20
	0x031F75A8 BL 0x31E8704
	0x031F75AC CBZ X0, 0x31F76DC
	0x031F75B0 LDRB W8, [X0 + 0x10]
	0x031F75B4 CMP W8, 0x1
	0x031F75B8 B.NE 0x31F75EC
	0x031F75BC MOVZ W1, 0x1
	0x031F75C0 MOV X0, X20
	0x031F75C4 BL 0x31E8704

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+904]
	007 Move X1, [X8+912]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x031F75C8 CBZ X0, 0x31F76DC
	0x031F75CC BL 0x31E7D00
	0x031F75D0 CBZ X0, 0x31F76DC
	0x031F75D4 LDR W8, [X0 + 0x18]
	0x031F75D8 CBZ W8, 0x31F7728
	0x031F75DC LDRB W8, [X0 + 0x20]
	0x031F75E0 CMP W8, 0xFF
	0x031F75E4 CSET W8, EQ

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+344]
	007 Move X1, [X8+352]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Int32 IndexOf(Mono.Security.X509.X509Certificate value)

Disassembly:
	0x031F73A8 BL 0x1C16CF4
	0x031F73AC MOVZ W8, 0x1
	0x031F73B0 STRB W8, [X21 + 0x206]
	0x031F73B4 LDR X0, [X20]
	0x031F73B8 LDR W8, [X0 + 0xE0]
	0x031F73BC CBNZ W8, 0x31F73D0
	0x031F73C0 BL 0x1C16DFC
	0x031F73C4 B 0x31F73D0
	0x031F73C8 MOVZ W8, 0x2
	0x031F73CC STR W8, [X20 + 0x30]
	0x031F73D0 AND W0, W19, 0x1
	0x031F73D4 LDP X20, X19, [X31 + 0x10]
	0x031F73D8 LDP X30, X21, [X31], #0x20
	0x031F73DC RET
	0x031F73E0 BL 0x1C16F20
	0x031F73E4 STP X30, X19, [X31 - 0x10]!
	0x031F73E8 MOV X19, X0
	0x031F73EC LDR X0, [X0 + 0x18]
	0x031F73F0 STR W31, [X19 + 0x30]
	0x031F73F4 STR X31, [X19 + 0x10]
	0x031F73F8 CBZ X0, 0x31F7420
	0x031F73FC MOV X1, X31
	0x031F7400 BL 0x3352028
	0x031F7404 LDR X0, [X19 + 0x28]
	0x031F7408 CBZ X0, 0x31F7418
	0x031F740C MOV X1, X31
	0x031F7410 LDP X30, X19, [X31], #0x10
	0x031F7414 B 0x3352028
	0x031F7418 LDP X30, X19, [X31], #0x10
	0x031F741C RET
	0x031F7420 BL 0x1C16F20
	0x031F7424 STP X30, X19, [X31 - 0x10]!
	0x031F7428 MOV X19, X1
	0x031F742C BL 0x31F68C4
	0x031F7430 CBZ X0, 0x31F744C
	0x031F7434 MOV X1, X19
	0x031F7438 BL 0x31F63A8
	0x031F743C ADDS W31, W0, 0x1
	0x031F7440 CSET W0, NE
	0x031F7444 LDP X30, X19, [X31], #0x10
	0x031F7448 RET
	0x031F744C BL 0x1C16F20
	0x031F7450 STP X30, X21, [X31 - 0x20]!
	0x031F7454 STP X20, X19, [X31 + 0x10]
	0x031F7458 ADRP X21, 0x11E5000
	0x031F745C LDRB W8, [X21 + 0x1CA]
	0x031F7460 MOV X20, X1
	0x031F7464 MOV X19, X0
	0x031F7468 TBNZ X8, 0x0, 0x31F7480
	0x031F746C ADRP X0, 0xF2A000
	0x031F7470 LDR X0, [X0 + 0xF8]
	0x031F7474 BL 0x1C16CF4
	0x031F7478 MOVZ W8, 0x1
	0x031F747C STRB W8, [X21 + 0x1CA]
	0x031F7480 MOV X0, X19
	0x031F7484 MOV X1, X20
	0x031F7488 BL 0x31F7DB8
	0x031F748C ADDS W31, W0, 0x1
	0x031F7490 B.EQ 0x31F74EC
	0x031F7494 MOV W1, W0
	0x031F7498 LDR X0, [X19 + 0x10]
	0x031F749C CBZ X0, 0x31F74FC
	0x031F74A0 LDR X8, [X0]
	0x031F74A4 LDR X9, [X8 + 0x2E8]
	0x031F74A8 LDR X2, [X8 + 0x2F0]
	0x031F74AC BLR X9
	0x031F74B0 CBZ X0, 0x31F74F0
	0x031F74B4 ADRP X9, 0xF2A000
	0x031F74B8 LDR X9, [X9 + 0xF8]
	0x031F74BC LDR X8, [X0]
	0x031F74C0 LDR X1, [X9]
	0x031F74C4 LDRB W10, [X8 + 0x130]
	0x031F74C8 LDRB W9, [X1 + 0x130]
	0x031F74CC CMP W10, W9
	0x031F74D0 B.CC 0x31F74E8
	0x031F74D4 LDR X8, [X8 + 0xC8]
	0x031F74D8 ADD X8, X8, X9, 0x3, LSL
	0x031F74DC LDUR X8, [X8 - 0x8]
	0x031F74E0 CMP X8, X1
	0x031F74E4 B.EQ 0x31F74F0
	0x031F74E8 BL 0x1C171E0
	0x031F74EC MOV X0, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11E6000
	007 Move W8, [X21+438]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF2A000
	015 Move X0, [X0+3264]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+438], W8
	019 Compare X20, 0
	020 JumpIfEqual {79}
	021 Move X0, X20
	022 Call X509Certificate.get_Hash, X0
	023 Move X8, [X19+16]
	024 Compare X8, 0
	025 JumpIfEqual {67}
	026 Move X22, 0xF2A000
	027 Move X22, [X22+3264]
	028 Move X21, X0
	029 Move W20, W31
	030 Move X9, [X8]
	031 Move X0, X8
	032 Move X10, [X9+664]
	033 Move X1, [X9+672]
	034 NotImplemented "Instruction BLR not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X0, [X19+16]
	037 Compare X0, 0
	038 JumpIfEqual {67}
	039 Move X8, [X0]
	040 Move W1, W20
	041 Move X9, [X8+744]
	042 Move X2, [X8+752]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Compare X0, 0
	045 JumpIfEqual {67}
	046 Move X8, [X0]
	047 Move X1, [X22]
	048 Move W10, [X8+304]
	049 Move W9, [X1+304]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X8, [X8+200]
	052 Add X8, X8, X9
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Call X509Certificate.get_Hash, X0
	056 Move X1, X0
	057 Move X2, X21
	058 Call X509CertificateCollection.Compare, X0, X1, X2
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {71}
	063 Move X8, [X19+16]
	064 Add W20, W20, 1
	065 Compare X8, 0
	066 JumpIfNotEqual {30}
	067 Call 0x1C17F20
	068 Move TEMP, 0
	069 Not TEMP
	070 Move W20, TEMP
	071 Move W0, W20
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X30, [X31+48]
	077 Return X0
	078 Call 0x1C181E0
	079 Move X0, 0xF02000
	080 Move X0, [X0+1320]
	081 Call 0x1C17D08
	082 Call 0x1C17F10
	083 Move X19, X0
	084 Move X0, 0xF07000
	085 Move X0, [X0+3784]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X19
	089 Move X2, X31
	090 Call ArgumentNullException..ctor, X0, X1
	091 Move X0, 0xF2B000
	092 Move X0, [X0+536]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Call 0x1C17DEC

Method: System.Boolean Compare(System.Byte[] array1, System.Byte[] array2)

Disassembly:
	0x031F75E8 B 0x31F75F0
	0x031F75EC MOV W8, W31
	0x031F75F0 STRB W8, [X19 + 0x18]
	0x031F75F4 LDR X0, [X20 + 0x20]
	0x031F75F8 CBZ X0, 0x31F760C
	0x031F75FC LDR X8, [X0]
	0x031F7600 LDR X9, [X8 + 0x298]
	0x031F7604 LDR X1, [X8 + 0x2A0]
	0x031F7608 BLR X9
	0x031F760C SUB W1, W0, 0x1
	0x031F7610 MOV X0, X20
	0x031F7614 BL 0x31E8704
	0x031F7618 STR X0, [X19 + 0x20]
	0x031F761C CBZ X0, 0x31F76DC
	0x031F7620 LDRB W8, [X0 + 0x10]
	0x031F7624 CMP W8, 0x4
	0x031F7628 B.NE 0x31F76C4
	0x031F762C LDR X8, [X0 + 0x18]
	0x031F7630 CBZ X8, 0x31F76C4
	0x031F7634 LDR W8, [X8 + 0x18]
	0x031F7638 CMP W8, 0x1
	0x031F763C B.LT 0x31F76C4
	0x031F7640 LDR X8, [X0 + 0x20]
	0x031F7644 CBZ X8, 0x31F7668
	0x031F7648 LDR X9, [X8]
	0x031F764C MOV X0, X8
	0x031F7650 LDR X10, [X9 + 0x298]
	0x031F7654 LDR X1, [X9 + 0x2A0]
	0x031F7658 BLR X10
	0x031F765C CBNZ W0, 0x31F76C4
	0x031F7660 LDR X0, [X19 + 0x20]
	0x031F7664 CBZ X0, 0x31F7734
	0x031F7668 BL 0x31E7D00
	0x031F766C ADRP X8, 0xF29000
	0x031F7670 LDR X8, [X8 + 0xB98]
	0x031F7674 MOV X21, X0

ISIL:
	001 Move [X31-16], X30
	002 Or X8, X1, X2
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Compare X1, 0
	006 JumpIfEqual {29}
	007 Compare X2, 0
	008 JumpIfEqual {29}
	009 Move W8, [X1+24]
	010 Move W9, [X2+24]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W9, W31
	014 Subtract W8, W31, W8
	015 Add W31, W8, W9
	016 Move X9, W9
	017 Add X10, X1, X9
	018 Add X11, X2, X9
	019 Move W10, [X10+32]
	020 Move W11, [X11+32]
	021 Add W12, W8, W9
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CSET not yet implemented."
	024 Add W31, W12, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Add W9, W9, 1
	027 Move W0, W31
	028 Move W0, 1
	029 Move X30, [X31+16]
	030 Return X0
	031 Call 0x1C17F28

