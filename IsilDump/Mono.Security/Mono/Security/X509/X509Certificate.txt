Type: Mono.Security.X509.X509Certificate

Method: System.Void Parse(System.Byte[] data)

Disassembly:
	0x031F56AC BL 0x1C16CF4
	0x031F56B0 MOVZ W8, 0x1
	0x031F56B4 STRB W8, [X20 + 0x1A9]
	0x031F56B8 LDR X0, [X19 + 0x18]
	0x031F56BC CBZ X0, 0x31F56E8
	0x031F56C0 MOV X1, X31
	0x031F56C4 BL 0x33A01F0
	0x031F56C8 CBZ X0, 0x31F56E8
	0x031F56CC ADRP X8, 0xEFE000
	0x031F56D0 LDR X8, [X8 + 0x618]
	0x031F56D4 MOV X19, X0
	0x031F56D8 LDR X20, [X8]
	0x031F56DC MOV X1, X20
	0x031F56E0 BL 0x1C16E00
	0x031F56E4 CBZ X0, 0x31F56F4
	0x031F56E8 LDP X20, X19, [X31 + 0x10]
	0x031F56EC LDR X30, [X31], #0x20
	0x031F56F0 RET
	0x031F56F4 MOV X0, X19
	0x031F56F8 MOV X1, X20
	0x031F56FC BL 0x1C171E0
	0x031F5700 STR X30, [X31 - 0x20]!
	0x031F5704 STP X20, X19, [X31 + 0x10]
	0x031F5708 ADRP X20, 0x11E7000
	0x031F570C LDRB W8, [X20 + 0x1AA]
	0x031F5710 MOV X19, X0
	0x031F5714 TBNZ X8, 0x0, 0x31F572C
	0x031F5718 ADRP X0, 0xEFE000
	0x031F571C LDR X0, [X0 + 0x618]
	0x031F5720 BL 0x1C16CF4
	0x031F5724 MOVZ W8, 0x1
	0x031F5728 STRB W8, [X20 + 0x1AA]
	0x031F572C LDR X0, [X19 + 0xA0]
	0x031F5730 CBZ X0, 0x31F575C
	0x031F5734 MOV X1, X31
	0x031F5738 BL 0x33A01F0
	0x031F573C CBZ X0, 0x31F575C
	0x031F5740 ADRP X8, 0xEFE000
	0x031F5744 LDR X8, [X8 + 0x618]
	0x031F5748 MOV X19, X0
	0x031F574C LDR X20, [X8]
	0x031F5750 MOV X1, X20
	0x031F5754 BL 0x1C16E00
	0x031F5758 CBZ X0, 0x31F5768
	0x031F575C LDP X20, X19, [X31 + 0x10]
	0x031F5760 LDR X30, [X31], #0x20
	0x031F5764 RET
	0x031F5768 MOV X0, X19
	0x031F576C MOV X1, X20
	0x031F5770 BL 0x1C171E0
	0x031F5774 STR X30, [X31 - 0x30]!
	0x031F5778 STP X22, X21, [X31 + 0x10]
	0x031F577C STP X20, X19, [X31 + 0x20]
	0x031F5780 ADRP X20, 0x11E7000
	0x031F5784 LDRB W8, [X20 + 0x1AB]
	0x031F5788 MOV X19, X0
	0x031F578C TBNZ X8, 0x0, 0x31F5834
	0x031F5790 ADRP X0, 0xF2B000
	0x031F5794 LDR X0, [X0 + 0xB98]
	0x031F5798 BL 0x1C16CF4
	0x031F579C ADRP X0, 0xEFE000
	0x031F57A0 LDR X0, [X0 + 0x618]
	0x031F57A4 BL 0x1C16CF4
	0x031F57A8 ADRP X0, 0xEFE000
	0x031F57AC LDR X0, [X0 + 0x5A8]
	0x031F57B0 BL 0x1C16CF4
	0x031F57B4 ADRP X0, 0xF2C000
	0x031F57B8 LDR X0, [X0 + 0x1A8]
	0x031F57BC BL 0x1C16CF4
	0x031F57C0 ADRP X0, 0xF2C000
	0x031F57C4 LDR X0, [X0 + 0x1B0]
	0x031F57C8 BL 0x1C16CF4
	0x031F57CC ADRP X0, 0xF2C000
	0x031F57D0 LDR X0, [X0 + 0x1B8]
	0x031F57D4 BL 0x1C16CF4
	0x031F57D8 ADRP X0, 0xF2C000
	0x031F57DC LDR X0, [X0 + 0x1C0]
	0x031F57E0 BL 0x1C16CF4
	0x031F57E4 ADRP X0, 0xF2C000
	0x031F57E8 LDR X0, [X0 + 0x130]
	0x031F57EC BL 0x1C16CF4
	0x031F57F0 ADRP X0, 0xF2C000
	0x031F57F4 LDR X0, [X0 + 0x1C8]
	0x031F57F8 BL 0x1C16CF4
	0x031F57FC ADRP X0, 0xF2C000
	0x031F5800 LDR X0, [X0 + 0x1D0]
	0x031F5804 BL 0x1C16CF4
	0x031F5808 ADRP X0, 0xF2C000
	0x031F580C LDR X0, [X0 + 0x1D8]
	0x031F5810 BL 0x1C16CF4
	0x031F5814 ADRP X0, 0xF2C000
	0x031F5818 LDR X0, [X0 + 0x1E0]
	0x031F581C BL 0x1C16CF4
	0x031F5820 ADRP X0, 0xF2C000
	0x031F5824 LDR X0, [X0 + 0x1E8]
	0x031F5828 BL 0x1C16CF4
	0x031F582C MOVZ W8, 0x1
	0x031F5830 STRB W8, [X20 + 0x1AB]
	0x031F5834 LDR X8, [X19 + 0x68]
	0x031F5838 CBZ X8, 0x31F5B34
	0x031F583C LDR X20, [X19 + 0x70]
	0x031F5840 ADRP X22, 0xEFE000
	0x031F5844 LDR X22, [X22 + 0x618]
	0x031F5848 MOV X1, X31
	0x031F584C MOV X0, X20
	0x031F5850 BL 0x31FFBAC
	0x031F5854 MOVZ W8, 0x999D
	0x031F5858 MOVK W8, 0x2ADB0000
	0x031F585C CMP W0, W8
	0x031F5860 B.HI 0x31F58A0
	0x031F5864 MOVZ W8, 0x8E98
	0x031F5868 MOVK W8, 0x23DB0000
	0x031F586C CMP W0, W8
	0x031F5870 B.HI 0x31F58D0
	0x031F5874 MOVZ W8, 0xBEEE
	0x031F5878 MOVK W8, 0x1E6E0000
	0x031F587C CMP W0, W8
	0x031F5880 B.EQ 0x31F5948
	0x031F5884 MOVZ W8, 0x8E98
	0x031F5888 MOVK W8, 0x23DB0000
	0x031F588C CMP W0, W8
	0x031F5890 B.NE 0x31F5B4C
	0x031F5894 ADRP X8, 0xF2C000
	0x031F5898 LDR X8, [X8 + 0x1B0]
	0x031F589C B 0x31F5AE8
	0x031F58A0 MOVZ W8, 0x4B4F
	0x031F58A4 MOVK W8, 0x93AB0000
	0x031F58A8 CMP W0, W8
	0x031F58AC B.HI 0x31F590C
	0x031F58B0 B.EQ 0x31F5AB0
	0x031F58B4 MOVZ W8, 0xA1D8
	0x031F58B8 MOVK W8, 0x342F0000
	0x031F58BC CMP W0, W8
	0x031F58C0 B.NE 0x31F5B4C
	0x031F58C4 ADRP X8, 0xF2C000
	0x031F58C8 LDR X8, [X8 + 0x1E8]
	0x031F58CC B 0x31F5AE8
	0x031F58D0 MOVZ W8, 0x902B
	0x031F58D4 MOVK W8, 0x24DB0000
	0x031F58D8 CMP W0, W8
	0x031F58DC B.EQ 0x31F5ABC
	0x031F58E0 MOVZ W8, 0x980A
	0x031F58E4 MOVK W8, 0x29DB0000
	0x031F58E8 CMP W0, W8
	0x031F58EC B.EQ 0x31F5AC8
	0x031F58F0 MOVZ W8, 0x999D
	0x031F58F4 MOVK W8, 0x2ADB0000
	0x031F58F8 CMP W0, W8
	0x031F58FC B.NE 0x31F5B4C
	0x031F5900 ADRP X8, 0xF2C000
	0x031F5904 LDR X8, [X8 + 0x1C8]
	0x031F5908 B 0x31F5AE8
	0x031F590C MOVZ W8, 0x4CE2
	0x031F5910 MOVK W8, 0x94AB0000
	0x031F5914 CMP W0, W8
	0x031F5918 B.EQ 0x31F5AD4
	0x031F591C MOVZ W8, 0x4E75
	0x031F5920 MOVK W8, 0x95AB0000
	0x031F5924 CMP W0, W8
	0x031F5928 B.EQ 0x31F5AE0
	0x031F592C MOVZ W8, 0xECD7
	0x031F5930 MOVK W8, 0xD0380000
	0x031F5934 CMP W0, W8
	0x031F5938 B.NE 0x31F5B4C
	0x031F593C ADRP X8, 0xF2C000
	0x031F5940 LDR X8, [X8 + 0x1A8]
	0x031F5944 B 0x31F5AE8
	0x031F5948 ADRP X8, 0xF2C000
	0x031F594C LDR X8, [X8 + 0x130]
	0x031F5950 MOV X0, X20
	0x031F5954 MOV X2, X31
	0x031F5958 LDR X1, [X8]
	0x031F595C BL 0x321BA08
	0x031F5960 TBZ X0, 0x0, 0x31F5B4C
	0x031F5964 ADRP X8, 0xF2B000
	0x031F5968 LDR X20, [X19 + 0x68]
	0x031F596C LDR X8, [X8 + 0xB98]
	0x031F5970 LDR X0, [X8]
	0x031F5974 BL 0x1C16F10
	0x031F5978 MOV X1, X20
	0x031F597C MOV X19, X0
	0x031F5980 BL 0x31E7A44
	0x031F5984 CBZ X19, 0x31F5B38
	0x031F5988 LDR X0, [X19 + 0x20]
	0x031F598C CBZ X0, 0x31F5B34
	0x031F5990 LDR X8, [X0]
	0x031F5994 LDR X9, [X8 + 0x298]
	0x031F5998 LDR X1, [X8 + 0x2A0]
	0x031F599C BLR X9
	0x031F59A0 CMP W0, 0x2
	0x031F59A4 B.NE 0x31F5B34
	0x031F59A8 MOV X0, X19
	0x031F59AC MOV W1, W31
	0x031F59B0 BL 0x31E8704
	0x031F59B4 CBZ X0, 0x31F5BA4
	0x031F59B8 BL 0x31E7D00
	0x031F59BC MOV X21, X0
	0x031F59C0 MOVZ W1, 0x1
	0x031F59C4 MOV X0, X19
	0x031F59C8 BL 0x31E8704
	0x031F59CC CBZ X0, 0x31F5BA4
	0x031F59D0 BL 0x31E7D00
	0x031F59D4 LDR X8, [X22]
	0x031F59D8 MOV X20, X0
	0x031F59DC MOVZ W1, 0x28
	0x031F59E0 MOV X0, X8
	0x031F59E4 BL 0x1C16D6C
	0x031F59E8 CBZ X21, 0x31F5BA4
	0x031F59EC ADRP X8, 0xEFE000
	0x031F59F0 LDR X8, [X8 + 0x5A8]
	0x031F59F4 MOV X19, X0
	0x031F59F8 LDR X0, [X8]
	0x031F59FC LDR W8, [X0 + 0xE0]
	0x031F5A00 CBNZ W8, 0x31F5A08
	0x031F5A04 BL 0x1C16DFC
	0x031F5A08 LDR W8, [X21 + 0x18]
	0x031F5A0C MOV W0, W31
	0x031F5A10 MOV X2, X31
	0x031F5A14 SUB W1, W8, 0x14
	0x031F5A18 BL 0x337EDF0
	0x031F5A1C LDR W8, [X21 + 0x18]
	0x031F5A20 MOVZ W9, 0x14
	0x031F5A24 MOV W22, W0
	0x031F5A28 MOV W0, W31
	0x031F5A2C SUB W1, W9, W8
	0x031F5A30 MOV X2, X31
	0x031F5A34 BL 0x337EDF0
	0x031F5A38 LDR W8, [X21 + 0x18]
	0x031F5A3C MOV W3, W0
	0x031F5A40 MOV X0, X21
	0x031F5A44 MOV W1, W22
	0x031F5A48 SUB W4, W8, W22
	0x031F5A4C MOV X2, X19
	0x031F5A50 MOV X5, X31
	0x031F5A54 BL 0x33A8A9C
	0x031F5A58 CBZ X20, 0x31F5BA4
	0x031F5A5C LDR W8, [X20 + 0x18]
	0x031F5A60 MOV W0, W31
	0x031F5A64 MOV X2, X31
	0x031F5A68 SUB W1, W8, 0x14
	0x031F5A6C BL 0x337EDF0
	0x031F5A70 LDR W8, [X20 + 0x18]
	0x031F5A74 MOVZ W9, 0x28
	0x031F5A78 MOV W21, W0
	0x031F5A7C MOVZ W0, 0x14
	0x031F5A80 SUB W1, W9, W8
	0x031F5A84 MOV X2, X31
	0x031F5A88 BL 0x337EDF0
	0x031F5A8C LDR W8, [X20 + 0x18]
	0x031F5A90 MOV W3, W0
	0x031F5A94 MOV X0, X20
	0x031F5A98 MOV W1, W21
	0x031F5A9C SUB W4, W8, W21
	0x031F5AA0 MOV X2, X19
	0x031F5AA4 MOV X5, X31
	0x031F5AA8 BL 0x33A8A9C
	0x031F5AAC B 0x31F5B38
	0x031F5AB0 ADRP X8, 0xF2C000
	0x031F5AB4 LDR X8, [X8 + 0x1B8]
	0x031F5AB8 B 0x31F5AE8
	0x031F5ABC ADRP X8, 0xF2C000
	0x031F5AC0 LDR X8, [X8 + 0x1D8]
	0x031F5AC4 B 0x31F5AE8
	0x031F5AC8 ADRP X8, 0xF2C000
	0x031F5ACC LDR X8, [X8 + 0x1E0]
	0x031F5AD0 B 0x31F5AE8
	0x031F5AD4 ADRP X8, 0xF2C000
	0x031F5AD8 LDR X8, [X8 + 0x1C0]
	0x031F5ADC B 0x31F5AE8
	0x031F5AE0 ADRP X8, 0xF2C000
	0x031F5AE4 LDR X8, [X8 + 0x1D0]
	0x031F5AE8 LDR X1, [X8]
	0x031F5AEC MOV X0, X20
	0x031F5AF0 MOV X2, X31
	0x031F5AF4 BL 0x321BA08
	0x031F5AF8 TBZ X0, 0x0, 0x31F5B4C
	0x031F5AFC LDR X0, [X19 + 0x68]
	0x031F5B00 CBZ X0, 0x31F5BA4
	0x031F5B04 MOV X1, X31
	0x031F5B08 BL 0x33A01F0
	0x031F5B0C CBZ X0, 0x31F5B34
	0x031F5B10 LDR X21, [X22]
	0x031F5B14 MOV X20, X0
	0x031F5B18 MOV X1, X21
	0x031F5B1C BL 0x1C16E00
	0x031F5B20 MOV X19, X0
	0x031F5B24 CBNZ X0, 0x31F5B38
	0x031F5B28 MOV X0, X20
	0x031F5B2C MOV X1, X21
	0x031F5B30 BL 0x1C171E0
	0x031F5B34 MOV X19, X31
	0x031F5B38 MOV X0, X19
	0x031F5B3C LDP X20, X19, [X31 + 0x20]
	0x031F5B40 LDP X22, X21, [X31 + 0x10]
	0x031F5B44 LDR X30, [X31], #0x30
	0x031F5B48 RET
	0x031F5B4C ADRP X0, 0xF2C000
	0x031F5B50 LDR X19, [X19 + 0x70]
	0x031F5B54 LDR X0, [X0 + 0x140]
	0x031F5B58 BL 0x1C16D08
	0x031F5B5C MOV X1, X19
	0x031F5B60 MOV X2, X31
	0x031F5B64 BL 0x321B938
	0x031F5B68 MOV X19, X0
	0x031F5B6C ADRP X0, 0xF2B000
	0x031F5B70 LDR X0, [X0 + 0xCE0]
	0x031F5B74 BL 0x1C16D08
	0x031F5B78 BL 0x1C16F10
	0x031F5B7C MOV X1, X19
	0x031F5B80 MOV X2, X31
	0x031F5B84 MOV X20, X0
	0x031F5B88 BL 0x3252170
	0x031F5B8C ADRP X0, 0xF2C000
	0x031F5B90 LDR X0, [X0 + 0x1F0]
	0x031F5B94 BL 0x1C16D08
	0x031F5B98 MOV X1, X0
	0x031F5B9C MOV X0, X20
	0x031F5BA0 BL 0x1C16DEC
	0x031F5BA4 BL 0x1C16F20
	0x031F5BA8 LDR X0, [X0 + 0x58]
	0x031F5BAC RET
	0x031F5BB0 LDR X0, [X0 + 0x20]
	0x031F5BB4 RET
	0x031F5BB8 LDR X0, [X0 + 0x28]
	0x031F5BBC RET
	0x031F5BC0 LDR W0, [X0 + 0x98]
	0x031F5BC4 RET
	0x031F5BC8 STP X30, X21, [X31 - 0x20]!
	0x031F5BCC STP X20, X19, [X31 + 0x10]
	0x031F5BD0 ADRP X20, 0x11E7000
	0x031F5BD4 ADRP X21, 0xEFF000
	0x031F5BD8 LDRB W8, [X20 + 0x1AC]
	0x031F5BDC LDR X21, [X21 + 0x9F0]
	0x031F5BE0 MOV X19, X0
	0x031F5BE4 TBNZ X8, 0x0, 0x31F5BFC
	0x031F5BE8 ADRP X0, 0xEFF000
	0x031F5BEC LDR X0, [X0 + 0x9F0]
	0x031F5BF0 BL 0x1C16CF4
	0x031F5BF4 MOVZ W8, 0x1
	0x031F5BF8 STRB W8, [X20 + 0x1AC]
	0x031F5BFC LDR X0, [X21]
	0x031F5C00 LDR W8, [X0 + 0xE0]
	0x031F5C04 CBNZ W8, 0x31F5C0C
	0x031F5C08 BL 0x1C16DFC
	0x031F5C0C MOV X0, X31
	0x031F5C10 BL 0x33616A4
	0x031F5C14 MOV X1, X0
	0x031F5C18 MOV X0, X19
	0x031F5C1C LDP X20, X19, [X31 + 0x10]
	0x031F5C20 LDP X30, X21, [X31], #0x20
	0x031F5C24 B 0x31F5C28
	0x031F5C28 STR X30, [X31 - 0x30]!
	0x031F5C2C STP X22, X21, [X31 + 0x10]
	0x031F5C30 STP X20, X19, [X31 + 0x20]
	0x031F5C34 ADRP X21, 0x11E7000
	0x031F5C38 ADRP X22, 0xEFF000
	0x031F5C3C LDRB W8, [X21 + 0x1AD]
	0x031F5C40 LDR X22, [X22 + 0x9F0]
	0x031F5C44 MOV X19, X1
	0x031F5C48 MOV X20, X0
	0x031F5C4C TBNZ X8, 0x0, 0x31F5C64
	0x031F5C50 ADRP X0, 0xEFF000
	0x031F5C54 LDR X0, [X0 + 0x9F0]
	0x031F5C58 BL 0x1C16CF4
	0x031F5C5C MOVZ W8, 0x1
	0x031F5C60 STRB W8, [X21 + 0x1AD]
	0x031F5C64 LDR X8, [X20]
	0x031F5C68 MOV X0, X20
	0x031F5C6C LDR X9, [X8 + 0x238]
	0x031F5C70 LDR X1, [X8 + 0x240]
	0x031F5C74 BLR X9
	0x031F5C78 LDR X8, [X22]
	0x031F5C7C MOV X21, X0
	0x031F5C80 LDR W9, [X8 + 0xE0]
	0x031F5C84 CBNZ W9, 0x31F5C90
	0x031F5C88 MOV X0, X8
	0x031F5C8C BL 0x1C16DFC
	0x031F5C90 MOV X0, X19
	0x031F5C94 MOV X1, X21
	0x031F5C98 MOV X2, X31
	0x031F5C9C BL 0x3363220
	0x031F5CA0 TBZ X0, 0x0, 0x31F5CEC
	0x031F5CA4 LDR X8, [X20]
	0x031F5CA8 MOV X0, X20
	0x031F5CAC LDR X9, [X8 + 0x248]
	0x031F5CB0 LDR X1, [X8 + 0x250]
	0x031F5CB4 BLR X9
	0x031F5CB8 LDR X8, [X22]
	0x031F5CBC MOV X20, X0
	0x031F5CC0 LDR W9, [X8 + 0xE0]
	0x031F5CC4 CBNZ W9, 0x31F5CD0
	0x031F5CC8 MOV X0, X8
	0x031F5CCC BL 0x1C16DFC
	0x031F5CD0 MOV X0, X19
	0x031F5CD4 MOV X1, X20
	0x031F5CD8 LDP X20, X19, [X31 + 0x20]
	0x031F5CDC LDP X22, X21, [X31 + 0x10]
	0x031F5CE0 MOV X2, X31
	0x031F5CE4 LDR X30, [X31], #0x30
	0x031F5CE8 B 0x33631B4
	0x031F5CEC LDP X20, X19, [X31 + 0x20]
	0x031F5CF0 LDP X22, X21, [X31 + 0x10]
	0x031F5CF4 MOV W0, W31
	0x031F5CF8 LDR X30, [X31], #0x30
	0x031F5CFC RET
	0x031F5D00 STR X30, [X31 - 0x30]!
	0x031F5D04 STP X22, X21, [X31 + 0x10]
	0x031F5D08 STP X20, X19, [X31 + 0x20]
	0x031F5D0C ADRP X20, 0x11E7000
	0x031F5D10 ADRP X22, 0xF2C000
	0x031F5D14 LDRB W8, [X20 + 0x1AE]
	0x031F5D18 LDR X22, [X22 + 0x138]
	0x031F5D1C MOV X21, X1
	0x031F5D20 MOV X19, X0
	0x031F5D24 TBNZ X8, 0x0, 0x31F5D48
	0x031F5D28 ADRP X0, 0xF2C000
	0x031F5D2C LDR X0, [X0 + 0x138]
	0x031F5D30 BL 0x1C16CF4
	0x031F5D34 ADRP X0, 0xF2B000
	0x031F5D38 LDR X0, [X0 + 0xD40]
	0x031F5D3C BL 0x1C16CF4
	0x031F5D40 MOVZ W8, 0x1
	0x031F5D44 STRB W8, [X20 + 0x1AE]
	0x031F5D48 LDR X0, [X22]
	0x031F5D4C BL 0x1C16F10
	0x031F5D50 MOV X1, X21
	0x031F5D54 MOV X2, X31
	0x031F5D58 MOV X20, X0
	0x031F5D5C BL 0x3253F04
	0x031F5D60 CBZ X20, 0x31F5DC4
	0x031F5D64 ADRP X9, 0xF2B000
	0x031F5D68 LDR X8, [X20]
	0x031F5D6C LDR X9, [X9 + 0xD40]
	0x031F5D70 MOV X0, X20
	0x031F5D74 LDR X1, [X9]
	0x031F5D78 LDP X9, X2, [X8 + 0x188]
	0x031F5D7C BLR X9
	0x031F5D80 MOV X0, X19
	0x031F5D84 BL 0x31F5150
	0x031F5D88 LDR X8, [X19]
	0x031F5D8C MOV X21, X0
	0x031F5D90 MOV X0, X19
	0x031F5D94 LDR X9, [X8 + 0x218]
	0x031F5D98 LDR X1, [X8 + 0x220]
	0x031F5D9C BLR X9
	0x031F5DA0 LDR X8, [X20]
	0x031F5DA4 MOV X2, X0
	0x031F5DA8 MOV X0, X20
	0x031F5DAC MOV X1, X21
	0x031F5DB0 LDP X4, X3, [X8 + 0x198]
	0x031F5DB4 LDP X20, X19, [X31 + 0x20]
	0x031F5DB8 LDP X22, X21, [X31 + 0x10]
	0x031F5DBC LDR X30, [X31], #0x30
	0x031F5DC0 BR X4
	0x031F5DC4 BL 0x1C16F20
	0x031F5DC8 STR X30, [X31 - 0x30]!
	0x031F5DCC STP X22, X21, [X31 + 0x10]
	0x031F5DD0 STP X20, X19, [X31 + 0x20]
	0x031F5DD4 ADRP X22, 0x11E7000
	0x031F5DD8 ADRP X20, 0xF2C000
	0x031F5DDC LDRB W8, [X22 + 0x1AF]
	0x031F5DE0 LDR X20, [X20 + 0x130]
	0x031F5DE4 MOV X21, X1
	0x031F5DE8 MOV X19, X0
	0x031F5DEC TBNZ X8, 0x0, 0x31F5E1C
	0x031F5DF0 ADRP X0, 0xF2B000
	0x031F5DF4 LDR X0, [X0 + 0xF88]
	0x031F5DF8 BL 0x1C16CF4
	0x031F5DFC ADRP X0, 0xF2C000
	0x031F5E00 LDR X0, [X0 + 0x150]
	0x031F5E04 BL 0x1C16CF4
	0x031F5E08 ADRP X0, 0xF2C000
	0x031F5E0C LDR X0, [X0 + 0x130]
	0x031F5E10 BL 0x1C16CF4
	0x031F5E14 MOVZ W8, 0x1
	0x031F5E18 STRB W8, [X22 + 0x1AF]
	0x031F5E1C LDR X0, [X19 + 0x70]
	0x031F5E20 LDR X1, [X20]
	0x031F5E24 MOV X2, X31
	0x031F5E28 BL 0x321BA08
	0x031F5E2C TBZ X0, 0x0, 0x31F5E44
	0x031F5E30 LDP X20, X19, [X31 + 0x20]
	0x031F5E34 LDP X22, X21, [X31 + 0x10]
	0x031F5E38 MOV W0, W31
	0x031F5E3C LDR X30, [X31], #0x30
	0x031F5E40 RET
	0x031F5E44 ADRP X8, 0xF2C000
	0x031F5E48 LDR X8, [X8 + 0x150]
	0x031F5E4C LDR X0, [X8]
	0x031F5E50 BL 0x1C16F10
	0x031F5E54 MOV X1, X21
	0x031F5E58 MOV X2, X31
	0x031F5E5C MOV X20, X0
	0x031F5E60 BL 0x3269368
	0x031F5E64 ADRP X8, 0xF2B000
	0x031F5E68 LDR X8, [X8 + 0xF88]
	0x031F5E6C LDR X21, [X19 + 0x70]
	0x031F5E70 LDR X0, [X8]
	0x031F5E74 LDR W8, [X0 + 0xE0]
	0x031F5E78 CBNZ W8, 0x31F5E80
	0x031F5E7C BL 0x1C16DFC
	0x031F5E80 MOVZ W1, 0x1
	0x031F5E84 MOV X0, X21
	0x031F5E88 MOV X2, X31
	0x031F5E8C BL 0x31FF820
	0x031F5E90 CBZ X20, 0x31F5EEC
	0x031F5E94 LDR X8, [X20]
	0x031F5E98 MOV X1, X0
	0x031F5E9C MOV X0, X20
	0x031F5EA0 LDP X9, X2, [X8 + 0x188]
	0x031F5EA4 BLR X9
	0x031F5EA8 MOV X0, X19
	0x031F5EAC BL 0x31F5150
	0x031F5EB0 LDR X8, [X19]
	0x031F5EB4 MOV X21, X0
	0x031F5EB8 MOV X0, X19
	0x031F5EBC LDR X9, [X8 + 0x218]
	0x031F5EC0 LDR X1, [X8 + 0x220]
	0x031F5EC4 BLR X9
	0x031F5EC8 LDR X8, [X20]
	0x031F5ECC MOV X2, X0
	0x031F5ED0 MOV X0, X20
	0x031F5ED4 MOV X1, X21
	0x031F5ED8 LDP X4, X3, [X8 + 0x198]
	0x031F5EDC LDP X20, X19, [X31 + 0x20]
	0x031F5EE0 LDP X22, X21, [X31 + 0x10]
	0x031F5EE4 LDR X30, [X31], #0x30
	0x031F5EE8 BR X4
	0x031F5EEC BL 0x1C16F20
	0x031F5EF0 STP X30, X21, [X31 - 0x20]!
	0x031F5EF4 STP X20, X19, [X31 + 0x10]
	0x031F5EF8 ADRP X21, 0x11E7000
	0x031F5EFC LDRB W8, [X21 + 0x1B0]
	0x031F5F00 MOV X19, X1
	0x031F5F04 MOV X20, X0
	0x031F5F08 TBNZ X8, 0x0, 0x31F5F2C
	0x031F5F0C ADRP X0, 0xF2C000
	0x031F5F10 LDR X0, [X0 + 0x158]
	0x031F5F14 BL 0x1C16CF4
	0x031F5F18 ADRP X0, 0xF2C000
	0x031F5F1C LDR X0, [X0 + 0x160]
	0x031F5F20 BL 0x1C16CF4
	0x031F5F24 MOVZ W8, 0x1
	0x031F5F28 STRB W8, [X21 + 0x1B0]
	0x031F5F2C CBZ X19, 0x31F601C
	0x031F5F30 ADRP X9, 0xF2C000
	0x031F5F34 LDR X9, [X9 + 0x160]
	0x031F5F38 LDR X8, [X19]
	0x031F5F3C LDR X10, [X9]
	0x031F5F40 LDRB W9, [X8 + 0x130]
	0x031F5F44 LDRB W11, [X10 + 0x130]
	0x031F5F48 CMP W9, W11
	0x031F5F4C B.CC 0x31F5F64
	0x031F5F50 LDR X12, [X8 + 0xC8]
	0x031F5F54 ADD X11, X12, X11, 0x3, LSL
	0x031F5F58 LDUR X11, [X11 - 0x8]
	0x031F5F5C CMP X11, X10
	0x031F5F60 B.EQ 0x31F5FA4
	0x031F5F64 ADRP X10, 0xF2C000
	0x031F5F68 LDR X10, [X10 + 0x158]
	0x031F5F6C LDR X10, [X10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x11E8000
	010 Move X22, 0xF2C000
	011 Move W8, [X21+417]
	012 Move X22, [X22+2968]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move X0, 0xF2C000
	020 Move X0, [X0+2968]
	021 Call 0x1C17CF4
	022 Move X0, 0xF2D000
	023 Move X0, [X0+384]
	024 Call 0x1C17CF4
	025 Move X0, 0xEFF000
	026 Move X0, [X0+1560]
	027 Call 0x1C17CF4
	028 Move X0, 0xF2C000
	029 Move X0, [X0+3320]
	030 Call 0x1C17CF4
	031 Move X0, 0xF2D000
	032 Move X0, [X0+224]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+417], W8
	036 Move X0, [X22]
	037 Call 0x1C17F10
	038 Move X21, X0
	039 Move X1, X20
	040 Call ASN1..ctor, X0, X1
	041 Move [X19+16], X21
	042 Compare X21, 0
	043 JumpIfEqual {369}
	044 Move W8, [X21+16]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X0, X21
	047 Move W1, W31
	048 Call ASN1.get_Item, X0, X1
	049 Compare X0, 0
	050 JumpIfEqual {396}
	051 Move W8, [X0+16]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X0, [X19+16]
	054 Compare X0, 0
	055 JumpIfEqual {423}
	056 Move W1, W31
	057 Call ASN1.get_Item, X0, X1
	058 Move X21, X0
	059 Move X0, [X19+16]
	060 Compare X0, 0
	061 JumpIfEqual {424}
	062 Move W1, W31
	063 Call ASN1.get_Item, X0, X1
	064 Compare X0, 0
	065 JumpIfEqual {425}
	066 Move W1, W31
	067 Call ASN1.get_Item, X0, X1
	068 Move X22, X0
	069 Move W8, 1
	070 Move [X19+152], W8
	071 Compare X0, 0
	072 JumpIfEqual {426}
	073 Move W8, [X22+16]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X0, [X22+32]
	076 Compare X0, 0
	077 JumpIfEqual {99}
	078 Move X8, [X0]
	079 Move X1, [X8+672]
	080 Move X9, [X8+664]
	081 NotImplemented "Instruction BLR not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move W23, [X19+152]
	084 Move X0, X22
	085 Move W1, W31
	086 Call ASN1.get_Item, X0, X1
	087 Compare X0, 0
	088 JumpIfEqual {473}
	089 Call ASN1.get_Value, X0
	090 Compare X0, 0
	091 JumpIfEqual {474}
	092 Move W8, [X0+24]
	093 Compare W8, 0
	094 JumpIfEqual {475}
	095 Move W8, [X0+32]
	096 Move W22, 1
	097 Add W8, W23, W8
	098 Move [X19+152], W8
	099 Move W22, W31
	100 Move X0, [X19+16]
	101 Compare X0, 0
	102 JumpIfEqual {427}
	103 Move W1, W31
	104 Call ASN1.get_Item, X0, X1
	105 Compare X0, 0
	106 JumpIfEqual {428}
	107 Move W1, W22
	108 Call ASN1.get_Item, X0, X1
	109 Move X8, X0
	110 Compare X0, 0
	111 JumpIfEqual {429}
	112 Move W9, [X8+16]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X0, X8
	115 Call ASN1.get_Value, X0
	116 Move [X19+160], X0
	117 Compare X0, 0
	118 JumpIfEqual {456}
	119 Move X8, 0xF2D000
	120 Move X8, [X8+384]
	121 Move W2, [X0+24]
	122 Move X3, [X8]
	123 Move W1, W31
	124 Call Array.Reverse, X0, X1, X2
	125 Compare X21, 0
	126 JumpIfEqual {457}
	127 Or W23, W22, 2
	128 Move W2, 48
	129 Move X0, X21
	130 Move W1, W23
	131 Call ASN1.Element, X0, X1, X2
	132 Move X8, 0xF2C000
	133 Move X8, [X8+3320]
	134 Move [X19+48], X0
	135 Move X24, X0
	136 Move X0, [X8]
	137 Move W8, [X0+224]
	138 Compare W8, 0
	139 JumpIfNotEqual {141}
	140 Call 0x1C17DFC
	141 Move X0, X24
	142 Call X501.ToString, X0
	143 Add W1, W22, 3
	144 Move [X19+56], X0
	145 Move W2, 48
	146 Move X0, X21
	147 Call ASN1.Element, X0, X1, X2
	148 Move X24, X0
	149 Compare X0, 0
	150 JumpIfEqual {458}
	151 Move X0, X24
	152 Move W1, W31
	153 Call ASN1.get_Item, X0, X1
	154 Call ASN1Convert.ToDateTime, X0
	155 Move [X19+32], X0
	156 Move W1, 1
	157 Move X0, X24
	158 Call ASN1.get_Item, X0, X1
	159 Call ASN1Convert.ToDateTime, X0
	160 Add W1, W23, 2
	161 Move [X19+40], X0
	162 Move W2, 48
	163 Move X0, X21
	164 Call ASN1.Element, X0, X1, X2
	165 Move [X19+80], X0
	166 Call X501.ToString, X0
	167 Add W1, W23, 3
	168 Move [X19+88], X0
	169 Move W2, 48
	170 Move X0, X21
	171 Call ASN1.Element, X0, X1, X2
	172 Move X23, X0
	173 Compare X0, 0
	174 JumpIfEqual {459}
	175 Move W2, 48
	176 Move X0, X23
	177 Move W1, W31
	178 Call ASN1.Element, X0, X1, X2
	179 Move X24, X0
	180 Compare X0, 0
	181 JumpIfEqual {460}
	182 Move W2, 6
	183 Move X0, X24
	184 Move W1, W31
	185 Call ASN1.Element, X0, X1, X2
	186 Call ASN1Convert.ToOid, X0
	187 Move [X19+64], X0
	188 Move W1, 1
	189 Move X0, X24
	190 Call ASN1.get_Item, X0, X1
	191 Move X25, X0
	192 Move X0, [X24+32]
	193 Compare X0, 0
	194 JumpIfEqual {208}
	195 Move X8, [X0]
	196 Move X1, [X8+672]
	197 Move X9, [X8+664]
	198 NotImplemented "Instruction BLR not yet implemented."
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Compare X25, 0
	201 JumpIfEqual {472}
	202 Move X8, [X25]
	203 Move X9, [X8+376]
	204 Move X1, [X8+384]
	205 Move X0, X25
	206 NotImplemented "Instruction BLR not yet implemented."
	207 Move X0, X31
	208 Move [X19+72], X0
	209 Move W1, 1
	210 Move W2, 3
	211 Move X0, X23
	212 Call ASN1.Element, X0, X1, X2
	213 Move X23, X0
	214 Compare X0, 0
	215 JumpIfEqual {461}
	216 Move X25, 0xEFF000
	217 Move X8, [X23+24]
	218 Move X25, [X25+1560]
	219 Compare X8, 0
	220 JumpIfEqual {222}
	221 Move W8, [X8+24]
	222 Move X0, [X25]
	223 Subtract W24, W8, 1
	224 Move W1, W24
	225 Call 0x1C17D6C
	226 Move [X19+96], X0
	227 Move X0, X23
	228 Call ASN1.get_Value, X0
	229 Move X2, [X19+96]
	230 Move W1, 1
	231 Move W3, W31
	232 Move W4, W24
	233 Move X5, X31
	234 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	235 Move X0, [X19+16]
	236 Compare X0, 0
	237 JumpIfEqual {462}
	238 Move W1, 2
	239 Call ASN1.get_Item, X0, X1
	240 Compare X0, 0
	241 JumpIfEqual {463}
	242 Call ASN1.get_Value, X0
	243 Move X23, X0
	244 Compare X0, 0
	245 JumpIfEqual {464}
	246 Move W8, [X23+24]
	247 Move X0, [X25]
	248 Subtract W1, W8, 1
	249 Call 0x1C17D6C
	250 Move X2, X0
	251 Move [X19+104], X0
	252 Compare X0, 0
	253 JumpIfEqual {465}
	254 Move W4, [X2+24]
	255 Move W1, 1
	256 Move X0, X23
	257 Move W3, W31
	258 Move X5, X31
	259 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	260 Move X0, [X19+16]
	261 Compare X0, 0
	262 JumpIfEqual {466}
	263 Move W1, 1
	264 Call ASN1.get_Item, X0, X1
	265 Move X23, X0
	266 Compare X0, 0
	267 JumpIfEqual {467}
	268 Move W2, 6
	269 Move X0, X23
	270 Move W1, W31
	271 Call ASN1.Element, X0, X1, X2
	272 Call ASN1Convert.ToOid, X0
	273 Move [X19+112], X0
	274 Move W1, 1
	275 Move X0, X23
	276 Call ASN1.get_Item, X0, X1
	277 Compare X0, 0
	278 JumpIfEqual {283}
	279 Move X8, [X0]
	280 Move X9, [X8+376]
	281 Move X1, [X8+384]
	282 NotImplemented "Instruction BLR not yet implemented."
	283 Or W22, W22, 6
	284 Move [X19+120], X0
	285 Move W2, 129
	286 Move X0, X21
	287 Move W1, W22
	288 Call ASN1.Element, X0, X1, X2
	289 Compare X0, 0
	290 JumpIfEqual {294}
	291 Call ASN1.get_Value, X0
	292 Add W22, W22, 1
	293 Move [X19+168], X0
	294 Move W2, 130
	295 Move X0, X21
	296 Move W1, W22
	297 Call ASN1.Element, X0, X1, X2
	298 Compare X0, 0
	299 JumpIfEqual {303}
	300 Call ASN1.get_Value, X0
	301 Add W22, W22, 1
	302 Move [X19+176], X0
	303 Move W2, 163
	304 Move X0, X21
	305 Move W1, W22
	306 Call ASN1.Element, X0, X1, X2
	307 Move X23, 0xF2D000
	308 Move X23, [X23+224]
	309 Move X21, X0
	310 Compare X0, 0
	311 JumpIfEqual {329}
	312 Move X0, [X21+32]
	313 Compare X0, 0
	314 JumpIfEqual {329}
	315 Move X8, [X0]
	316 Move X1, [X8+672]
	317 Move X9, [X8+664]
	318 NotImplemented "Instruction BLR not yet implemented."
	319 NotImplemented "Instruction CMP not yet implemented."
	320 Move X0, X21
	321 Move W1, W31
	322 Call ASN1.get_Item, X0, X1
	323 Move X22, X0
	324 Move X0, [X23]
	325 Call 0x1C17F10
	326 Move X21, X0
	327 Move X1, X22
	328 Call X509ExtensionCollection..ctor, X0, X1
	329 Move X0, [X23]
	330 Call 0x1C17F10
	331 Move X21, X0
	332 Move X1, X31
	333 Call X509ExtensionCollection..ctor, X0, X1
	334 Move [X19+184], X21
	335 Compare X20, 0
	336 JumpIfEqual {468}
	337 Move X0, X20
	338 Move X1, X31
	339 Call Array.Clone, X0
	340 Move X20, X0
	341 Compare X0, 0
	342 JumpIfEqual {359}
	343 Move X21, [X25]
	344 Move X0, X20
	345 Move X1, X21
	346 Call 0x1C17E00
	347 Compare X0, 0
	348 JumpIfEqual {469}
	349 Move [X19+24], X0
	350 Move X19, [X25]
	351 Move X0, X20
	352 Move X1, X19
	353 Call 0x1C17E00
	354 Compare X0, 0
	355 JumpIfNotEqual {360}
	356 Move X0, X20
	357 Move X1, X19
	358 Call 0x1C181E0
	359 Move [X19+24], X31
	360 Move X20, [X31+48]
	361 Move X19, [X31+56]
	362 Move X22, [X31+32]
	363 Move X21, [X31+40]
	364 Move X24, [X31+16]
	365 Move X23, [X31+24]
	366 Move X30, [X31+64]
	367 Move X25, [X31+72]
	368 Return 
	369 Call 0x1C17F20
	370 Move X0, 0xF2C000
	371 Move X0, [X0+3264]
	372 Call 0x1C17D08
	373 Move W8, [X0+224]
	374 Compare W8, 0
	375 JumpIfNotEqual {377}
	376 Call 0x1C17DFC
	377 Move X0, 0xF2C000
	378 Move X0, [X0+3264]
	379 Call 0x1C17D08
	380 Move X8, [X0+184]
	381 Move X20, [X8]
	382 Move X0, 0xF2C000
	383 Move X0, [X0+3296]
	384 Call 0x1C17D08
	385 Call 0x1C17F10
	386 Move X19, X0
	387 Move X1, X20
	388 Move X2, X31
	389 Call CryptographicException..ctor, X0, X1
	390 Move X0, 0xF2D000
	391 Move X0, [X0+392]
	392 Call 0x1C17D08
	393 Move X1, X0
	394 Move X0, X19
	395 Call 0x1C17DEC
	396 Call 0x1C17F20
	397 Move X0, 0xF2C000
	398 Move X0, [X0+3264]
	399 Call 0x1C17D08
	400 Move W8, [X0+224]
	401 Compare W8, 0
	402 JumpIfNotEqual {404}
	403 Call 0x1C17DFC
	404 Move X0, 0xF2C000
	405 Move X0, [X0+3264]
	406 Call 0x1C17D08
	407 Move X8, [X0+184]
	408 Move X20, [X8]
	409 Move X0, 0xF2C000
	410 Move X0, [X0+3296]
	411 Call 0x1C17D08
	412 Call 0x1C17F10
	413 Move X19, X0
	414 Move X1, X20
	415 Move X2, X31
	416 Call CryptographicException..ctor, X0, X1
	417 Move X0, 0xF2D000
	418 Move X0, [X0+392]
	419 Call 0x1C17D08
	420 Move X1, X0
	421 Move X0, X19
	422 Call 0x1C17DEC
	423 Call 0x1C17F20
	424 Call 0x1C17F20
	425 Call 0x1C17F20
	426 Call 0x1C17F20
	427 Call 0x1C17F20
	428 Call 0x1C17F20
	429 Call 0x1C17F20
	430 Move X0, 0xF2C000
	431 Move X0, [X0+3264]
	432 Call 0x1C17D08
	433 Move W8, [X0+224]
	434 Compare W8, 0
	435 JumpIfNotEqual {437}
	436 Call 0x1C17DFC
	437 Move X0, 0xF2C000
	438 Move X0, [X0+3264]
	439 Call 0x1C17D08
	440 Move X8, [X0+184]
	441 Move X20, [X8]
	442 Move X0, 0xF2C000
	443 Move X0, [X0+3296]
	444 Call 0x1C17D08
	445 Call 0x1C17F10
	446 Move X19, X0
	447 Move X1, X20
	448 Move X2, X31
	449 Call CryptographicException..ctor, X0, X1
	450 Move X0, 0xF2D000
	451 Move X0, [X0+392]
	452 Call 0x1C17D08
	453 Move X1, X0
	454 Move X0, X19
	455 Call 0x1C17DEC
	456 Call 0x1C17F20
	457 Call 0x1C17F20
	458 Call 0x1C17F20
	459 Call 0x1C17F20
	460 Call 0x1C17F20
	461 Call 0x1C17F20
	462 Call 0x1C17F20
	463 Call 0x1C17F20
	464 Call 0x1C17F20
	465 Call 0x1C17F20
	466 Call 0x1C17F20
	467 Call 0x1C17F20
	468 Call 0x1C17F20
	469 Move X0, X20
	470 Move X1, X21
	471 Call 0x1C181E0
	472 Call 0x1C17F20
	473 Call 0x1C17F20
	474 Call 0x1C17F20
	475 Call 0x1C17F28
	476 Move X19, X0
	477 NotImplemented "Instruction CMP not yet implemented."
	478 Move X0, X19
	479 Call 0x3EB2AD0
	480 Move X19, X0
	481 Move X0, 0xEFF000
	482 Move X0, [X0+2000]
	483 Call 0x1C17D08
	484 Move X8, [X19]
	485 Move X1, [X8]
	486 Call 0x1C18270
	487 Move TEMP, X0
	488 And TEMP, TEMP, 1
	489 Compare TEMP, 1
	490 JumpIfNotEqual {517}
	491 Move X19, [X19]
	492 Call 0x3EB2AE0
	493 Move X20, 0xF2C000
	494 Move X20, [X20+3264]
	495 Move X0, X20
	496 Call 0x1C17D08
	497 Call 0x19913D0
	498 Move X0, X20
	499 Call 0x1C17D08
	500 Move X8, [X0+184]
	501 Move X0, 0xF2C000
	502 Move X20, [X8]
	503 Move X0, [X0+3296]
	504 Call 0x1C17D08
	505 Call 0x1C17F10
	506 Move X1, X20
	507 Move X2, X19
	508 Move X3, X31
	509 Move X21, X0
	510 Call CryptographicException..ctor, X0, X1, X2
	511 Move X0, 0xF2D000
	512 Move X0, [X0+392]
	513 Call 0x1C17D08
	514 Move X1, X0
	515 Move X0, X21
	516 Call 0x1C17DEC
	517 Move W0, 8
	518 Call 0x3EB2AF0
	519 Move X8, [X19]
	520 Move [X0], X8
	521 Move X1, 0xCC0000
	522 Add X1, X1, 3672
	523 Move X2, X31
	524 Call 0x3EB2B00
	525 Move X19, X0
	526 Call 0x3EB2AE0
	527 Move X0, X19
	528 Call 0x1D2D690
	529 Call 0x1991590

Method: System.Void .ctor(System.Byte[] data)

Disassembly:
	0x031EB6BC STR X24, [X19 + 0x10]
	0x031EB6C0 LDR X0, [X20 + 0x18]
	0x031EB6C4 CBZ X0, 0x31EB8C0
	0x031EB6C8 MOV W1, W31
	0x031EB6CC BL 0x31E8704
	0x031EB6D0 CBZ X0, 0x31EB8C0
	0x031EB6D4 BL 0x31E7D00
	0x031EB6D8 LDR X8, [X25]
	0x031EB6DC MOV X21, X0
	0x031EB6E0 MOV X0, X8
	0x031EB6E4 BL 0x1C16F10
	0x031EB6E8 MOV X1, X21
	0x031EB6EC MOV X20, X0
	0x031EB6F0 BL 0x31E7A44
	0x031EB6F4 CBZ X20, 0x31EB8C0
	0x031EB6F8 ADRP X24, 0xF35000
	0x031EB6FC ADRP X28, 0xF35000
	0x031EB700 LDR X24, [X24 + 0xD78]
	0x031EB704 LDR X28, [X28 + 0xD70]
	0x031EB708 MOV W21, W31
	0x031EB70C LDR X0, [X20 + 0x20]
	0x031EB710 CBZ X0, 0x31EB724
	0x031EB714 LDR X8, [X0]
	0x031EB718 LDR X9, [X8 + 0x298]
	0x031EB71C LDR X1, [X8 + 0x2A0]
	0x031EB720 BLR X9
	0x031EB724 CMP W21, W0
	0x031EB728 B.GE 0x31EB8A4
	0x031EB72C MOV X0, X20
	0x031EB730 MOV W1, W21
	0x031EB734 BL 0x31E8704
	0x031EB738 LDR X8, [X26]
	0x031EB73C MOV X23, X0
	0x031EB740 MOV X0, X8
	0x031EB744 BL 0x1C16F10
	0x031EB748 MOV X1, X23
	0x031EB74C MOV X22, X0
	0x031EB750 BL 0x31E9C54
	0x031EB754 CBZ X22, 0x31EB8C0
	0x031EB758 LDR X23, [X22 + 0x10]
	0x031EB75C LDR X1, [X27]
	0x031EB760 MOV X2, X31
	0x031EB764 MOV X0, X23
	0x031EB768 BL 0x321BA08
	0x031EB76C TBZ X0, 0x0, 0x31EB7EC
	0x031EB770 LDR X0, [X22 + 0x18]
	0x031EB774 CBZ X0, 0x31EB8C0
	0x031EB778 MOV W1, W31
	0x031EB77C BL 0x31E8704
	0x031EB780 CBZ X0, 0x31EB8C0
	0x031EB784 BL 0x31E7D00
	0x031EB788 LDR X8, [X25]
	0x031EB78C MOV X23, X0
	0x031EB790 MOV X0, X8
	0x031EB794 BL 0x1C16F10
	0x031EB798 MOV X1, X23
	0x031EB79C MOV X22, X0
	0x031EB7A0 BL 0x31E7A44
	0x031EB7A4 CBZ X22, 0x31EB8C0
	0x031EB7A8 MOV W23, W31
	0x031EB7AC LDR X0, [X22 + 0x20]
	0x031EB7B0 CBZ X0, 0x31EB7C4
	0x031EB7B4 LDR X8, [X0]
	0x031EB7B8 LDR X9, [X8 + 0x298]
	0x031EB7BC LDR X1, [X8 + 0x2A0]
	0x031EB7C0 BLR X9
	0x031EB7C4 CMP W23, W0
	0x031EB7C8 B.GE 0x31EB89C
	0x031EB7CC MOV X0, X22
	0x031EB7D0 MOV W1, W23
	0x031EB7D4 BL 0x31E8704
	0x031EB7D8 MOV X1, X0
	0x031EB7DC MOV X0, X19
	0x031EB7E0 BL 0x31EBC88
	0x031EB7E4 ADD W23, W23, 0x1
	0x031EB7E8 B 0x31EB7AC
	0x031EB7EC LDR X1, [X24]
	0x031EB7F0 MOV X0, X23
	0x031EB7F4 MOV X2, X31
	0x031EB7F8 BL 0x321BA08
	0x031EB7FC TBZ X0, 0x0, 0x31EB8C4
	0x031EB800 LDR X0, [X22 + 0x18]
	0x031EB804 CBZ X0, 0x31EB8C0
	0x031EB808 MOV W1, W31
	0x031EB80C BL 0x31E8704
	0x031EB810 LDR X8, [X28]
	0x031EB814 MOV X22, X0
	0x031EB818 MOV X0, X8
	0x031EB81C BL 0x1C16F10
	0x031EB820 MOV X1, X22
	0x031EB824 MOV X23, X0
	0x031EB828 BL 0x31E9EBC
	0x031EB82C MOV X0, X19
	0x031EB830 MOV X1, X23
	0x031EB834 BL 0x31EC35C
	0x031EB838 LDR X8, [X25]
	0x031EB83C MOV X23, X0
	0x031EB840 MOV X0, X8
	0x031EB844 BL 0x1C16F10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11F2000
	006 Move W8, [X21+418]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xF36000
	014 Move X0, [X0+3264]
	015 Call 0x1C17CF4
	016 Move X0, 0xF36000
	017 Move X0, [X0+3288]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+418], W8
	021 Move X0, X20
	022 Move X1, X31
	023 Call Object..ctor, X0
	024 Compare X19, 0
	025 JumpIfEqual {54}
	026 Move X8, [X19+24]
	027 Compare X8, 0
	028 JumpIfEqual {46}
	029 Compare W8, 0
	030 JumpIfEqual {59}
	031 Move W8, [X19+32]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X8, 0xF36000
	034 Move X8, [X8+3264]
	035 Move X0, [X8]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X8, 0xF36000
	041 Move X8, [X8+3288]
	042 Move X0, [X8]
	043 Move X1, X19
	044 Call X509Certificate.PEM, X0, X1
	045 Move X19, X0
	046 Move X0, X20
	047 Move X1, X19
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Call X509Certificate.Parse, X0, X1
	053 Return 
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Return 
	059 Call 0x1C17F28
	060 Move X19, X0
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X0, X19
	063 Call 0x3EB2AD0
	064 Move X19, X0
	065 Move X0, 0xF09000
	066 Move X0, [X0+2000]
	067 Call 0x1C17D08
	068 Move X8, [X19]
	069 Move X1, [X8]
	070 Call 0x1C18270
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {101}
	075 Move X19, [X19]
	076 Call 0x3EB2AE0
	077 Move X20, 0xF36000
	078 Move X20, [X20+3264]
	079 Move X0, X20
	080 Call 0x1C17D08
	081 Call 0x19913D0
	082 Move X0, X20
	083 Call 0x1C17D08
	084 Move X8, [X0+184]
	085 Move X0, 0xF36000
	086 Move X20, [X8]
	087 Move X0, [X0+3296]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X1, X20
	091 Move X2, X19
	092 Move X3, X31
	093 Move X21, X0
	094 Call CryptographicException..ctor, X0, X1, X2
	095 Move X0, 0xF36000
	096 Move X0, [X0+3304]
	097 Call 0x1C17D08
	098 Move X1, X0
	099 Move X0, X21
	100 Call 0x1C17DEC
	101 Move W0, 8
	102 Call 0x3EB2AF0
	103 Move X8, [X19]
	104 Move [X0], X8
	105 Move X1, 0xCCA000
	106 Add X1, X1, 3672
	107 Move X2, X31
	108 Call 0x3EB2B00
	109 Move X19, X0
	110 Call 0x3EB2AE0
	111 Move X0, X19
	112 Call 0x1D2D690
	113 Call 0x1991590

Method: System.Byte[] GetUnsignedBigInteger(System.Byte[] integer)

Disassembly:
	0x031F60A4 MOV X0, X19
	0x031F60A8 BLR X9
	0x031F60AC MOV X1, X0
	0x031F60B0 MOV X0, X19
	0x031F60B4 BL 0x31F5DC8
	0x031F60B8 B 0x31F60DC
	0x031F60BC MOV X0, X19
	0x031F60C0 BL 0x31EDFBC
	0x031F60C4 CBZ X0, 0x31F60DC
	0x031F60C8 MOV X0, X19
	0x031F60CC BL 0x31EDFBC
	0x031F60D0 MOV X1, X0
	0x031F60D4 MOV X0, X19
	0x031F60D8 BL 0x31F5D00
	0x031F60DC AND W0, W0, 0x1
	0x031F60E0 LDP X30, X19, [X31], #0x10
	0x031F60E4 RET
	0x031F60E8 B 0x31F60FC
	0x031F60EC B 0x31F60FC
	0x031F60F0 B 0x31F60FC
	0x031F60F4 B 0x31F60FC
	0x031F60F8 B 0x31F60FC
	0x031F60FC MOV X19, X0
	0x031F6100 CMP W1, 0x1
	0x031F6104 B.NE 0x31F6160
	0x031F6108 MOV X0, X19
	0x031F610C BL 0x3EB1AD0
	0x031F6110 MOV X19, X0
	0x031F6114 ADRP X0, 0xF2A000
	0x031F6118 LDR X0, [X0 + 0xCE0]
	0x031F611C BL 0x1C16D08
	0x031F6120 LDR X8, [X19]
	0x031F6124 LDR X1, [X8]
	0x031F6128 BL 0x1C17270
	0x031F612C TBZ X0, 0x0, 0x31F6138
	0x031F6130 BL 0x3EB1AE0
	0x031F6134 B 0x31F6080

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11E7000
	006 Move W8, [X20+419]
	007 Move X19, X1
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEFE000
	013 Move X0, [X0+1560]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+419], W8
	017 Compare X19, 0
	018 JumpIfEqual {46}
	019 Move W8, [X19+24]
	020 Compare W8, 0
	021 JumpIfEqual {47}
	022 Move W9, [X19+32]
	023 Compare W9, 0
	024 JumpIfNotEqual {40}
	025 Move X9, 0xEFE000
	026 Move X9, [X9+1560]
	027 Subtract W20, W8, 1
	028 Move W1, W20
	029 Move X0, [X9]
	030 Call 0x1C17D6C
	031 Move X21, X0
	032 Move W1, 1
	033 Move X0, X19
	034 Move X2, X21
	035 Move W3, W31
	036 Move W4, W20
	037 Move X5, X31
	038 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	039 Move X19, X21
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return X0
	046 Call 0x1C17F20
	047 Call 0x1C17F28

Method: System.Security.Cryptography.DSA get_DSA()

Disassembly:
	0x031EEFBC LDP X26, X25, [X31 + 0x30]
	0x031EEFC0 LDP X28, X27, [X31 + 0x20]
	0x031EEFC4 LDP X29, X30, [X31 + 0x10]
	0x031EEFC8 ADD X31, X31, 0x70
	0x031EEFCC RET
	0x031EEFD0 MOV X0, X24
	0x031EEFD4 BL 0x1C171E0
	0x031EEFD8 BL 0x1C16F20
	0x031EEFDC MOV X0, X22
	0x031EEFE0 BL 0x1C171E0
	0x031EEFE4 MOV X0, X25
	0x031EEFE8 BL 0x1C16F18
	0x031EEFEC MOV X19, X0
	0x031EEFF0 MOV X25, X31
	0x031EEFF4 B 0x31EF094
	0x031EEFF8 MOV X19, X0
	0x031EEFFC MOV X25, X31
	0x031EF000 B 0x31EF008
	0x031EF004 MOV X19, X0
	0x031EF008 ADRP X8, 0xF04000
	0x031EF00C LDR X8, [X8 + 0xE00]
	0x031EF010 LDR X1, [X8]
	0x031EF014 MOV X0, X24
	0x031EF018 BL 0x1C16E00
	0x031EF01C MOV X20, X0
	0x031EF020 CBZ X0, 0x31EF084
	0x031EF024 LDR X8, [X20]
	0x031EF028 ADRP X10, 0xF04000
	0x031EF02C LDRH W9, [X8 + 0x12E]
	0x031EF030 LDR X10, [X10 + 0xE00]
	0x031EF034 LDR X1, [X10]
	0x031EF038 CBZ X9, 0x31EF05C
	0x031EF03C LDR X10, [X8 + 0xB0]
	0x031EF040 ADD X10, X10, 0x8
	0x031EF044 LDUR X11, [X10 - 0x8]
	0x031EF048 CMP X11, X1
	0x031EF04C B.EQ 0x31EF06C
	0x031EF050 SUBS X9, X9, 0x1
	0x031EF054 ADD X10, X10, 0x10
	0x031EF058 B.NE 0x31EF044
	0x031EF05C MOV X0, X20
	0x031EF060 MOV W2, W31
	0x031EF064 BL 0x1C5C788
	0x031EF068 B 0x31EF078
	0x031EF06C LDRSW X9, [X10]
	0x031EF070 ADD X8, X8, X9, 0x4, LSL
	0x031EF074 ADD X0, X8, 0x138
	0x031EF078 LDP X8, X1, [X0]
	0x031EF07C MOV X0, X20
	0x031EF080 BLR X8
	0x031EF084 CBZ X25, 0x31EF114
	0x031EF088 MOV X0, X25
	0x031EF08C BL 0x1C16F18
	0x031EF090 MOV X19, X0
	0x031EF094 ADRP X8, 0xF04000
	0x031EF098 LDR X8, [X8 + 0xE00]
	0x031EF09C LDR X1, [X8]
	0x031EF0A0 MOV X0, X24
	0x031EF0A4 BL 0x1C16E00
	0x031EF0A8 MOV X20, X0
	0x031EF0AC CBZ X0, 0x31EF110
	0x031EF0B0 LDR X8, [X20]
	0x031EF0B4 ADRP X10, 0xF04000
	0x031EF0B8 LDRH W9, [X8 + 0x12E]
	0x031EF0BC LDR X10, [X10 + 0xE00]
	0x031EF0C0 LDR X1, [X10]
	0x031EF0C4 CBZ X9, 0x31EF0E8
	0x031EF0C8 LDR X10, [X8 + 0xB0]
	0x031EF0CC ADD X10, X10, 0x8
	0x031EF0D0 LDUR X11, [X10 - 0x8]
	0x031EF0D4 CMP X11, X1
	0x031EF0D8 B.EQ 0x31EF0F8
	0x031EF0DC SUBS X9, X9, 0x1
	0x031EF0E0 ADD X10, X10, 0x10
	0x031EF0E4 B.NE 0x31EF0D0
	0x031EF0E8 MOV X0, X20
	0x031EF0EC MOV W2, W31
	0x031EF0F0 BL 0x1C5C788
	0x031EF0F4 B 0x31EF104
	0x031EF0F8 LDRSW X9, [X10]
	0x031EF0FC ADD X8, X8, X9, 0x4, LSL
	0x031EF100 ADD X0, X8, 0x138
	0x031EF104 LDP X8, X1, [X0]
	0x031EF108 MOV X0, X20
	0x031EF10C BLR X8
	0x031EF110 CBNZ X25, 0x31EF11C
	0x031EF114 MOV X0, X19
	0x031EF118 BL 0x1D2C690
	0x031EF11C MOV X0, X25
	0x031EF120 BL 0x1C16F18
	0x031EF124 BL 0x1990590
	0x031EF128 STR X30, [X31 - 0x30]!
	0x031EF12C STP X22, X21, [X31 + 0x10]
	0x031EF130 STP X20, X19, [X31 + 0x20]
	0x031EF134 ADRP X22, 0x11ED000
	0x031EF138 ADRP X21, 0xF31000
	0x031EF13C LDRB W8, [X22 + 0x192]
	0x031EF140 LDR X21, [X21 + 0xDE8]
	0x031EF144 MOV W19, W1
	0x031EF148 MOV X20, X0
	0x031EF14C TBNZ X8, 0x0, 0x31EF164
	0x031EF150 ADRP X0, 0xF31000
	0x031EF154 LDR X0, [X0 + 0xDE8]
	0x031EF158 BL 0x1C16CF4
	0x031EF15C MOVZ W8, 0x1
	0x031EF160 STRB W8, [X22 + 0x192]
	0x031EF164 LDR X0, [X21]
	0x031EF168 LDR W8, [X0 + 0xE0]
	0x031EF16C CBNZ W8, 0x31EF178
	0x031EF170 BL 0x1C16DFC
	0x031EF174 LDR X0, [X21]
	0x031EF178 LDR X8, [X0 + 0xB8]
	0x031EF17C MOV X0, X20
	0x031EF180 MOV W2, W19
	0x031EF184 LDP X20, X19, [X31 + 0x20]
	0x031EF188 LDR X1, [X8 + 0x10]
	0x031EF18C LDP X22, X21, [X31 + 0x10]
	0x031EF190 LDR X30, [X31], #0x30
	0x031EF194 B 0x31F204C
	0x031EF198 SUB X31, X31, 0x80
	0x031EF19C STP X29, X30, [X31 + 0x20]
	0x031EF1A0 STP X28, X27, [X31 + 0x30]
	0x031EF1A4 STP X26, X25, [X31 + 0x40]
	0x031EF1A8 STP X24, X23, [X31 + 0x50]
	0x031EF1AC STP X22, X21, [X31 + 0x60]
	0x031EF1B0 STP X20, X19, [X31 + 0x70]
	0x031EF1B4 STR X0, [X31 + 0x18]
	0x031EF1B8 ADRP X19, 0x11ED000
	0x031EF1BC ADRP X20, 0xF31000
	0x031EF1C0 ADRP X25, 0xF31000
	0x031EF1C4 LDRB W8, [X19 + 0x186]
	0x031EF1C8 LDR X20, [X20 + 0xB98]
	0x031EF1CC LDR X25, [X25 + 0xBA0]
	0x031EF1D0 TBNZ X8, 0x0, 0x31EF290
	0x031EF1D4 ADRP X0, 0xF31000
	0x031EF1D8 LDR X0, [X0 + 0xB98]
	0x031EF1DC BL 0x1C16CF4
	0x031EF1E0 ADRP X0, 0xF31000
	0x031EF1E4 LDR X0, [X0 + 0xBA0]
	0x031EF1E8 BL 0x1C16CF4
	0x031EF1EC ADRP X0, 0xF04000
	0x031EF1F0 LDR X0, [X0 + 0x618]
	0x031EF1F4 BL 0x1C16CF4
	0x031EF1F8 ADRP X0, 0xF31000
	0x031EF1FC LDR X0, [X0 + 0xC70]
	0x031EF200 BL 0x1C16CF4
	0x031EF204 ADRP X0, 0xF04000
	0x031EF208 LDR X0, [X0 + 0xE00]
	0x031EF20C BL 0x1C16CF4
	0x031EF210 ADRP X0, 0xF04000
	0x031EF214 LDR X0, [X0 + 0xE18]
	0x031EF218 BL 0x1C16CF4
	0x031EF21C ADRP X0, 0xF31000
	0x031EF220 LDR X0, [X0 + 0xE08]
	0x031EF224 BL 0x1C16CF4
	0x031EF228 ADRP X0, 0xF31000
	0x031EF22C LDR X0, [X0 + 0xCC0]
	0x031EF230 BL 0x1C16CF4
	0x031EF234 ADRP X0, 0xF31000
	0x031EF238 LDR X0, [X0 + 0xE18]
	0x031EF23C BL 0x1C16CF4
	0x031EF240 ADRP X0, 0xF31000
	0x031EF244 LDR X0, [X0 + 0xEB8]
	0x031EF248 BL 0x1C16CF4
	0x031EF24C ADRP X0, 0xF31000
	0x031EF250 LDR X0, [X0 + 0xE28]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+128], X30
	003 Move [X31+144], X24
	004 Move [X31+152], X23
	005 Move [X31+160], X22
	006 Move [X31+168], X21
	007 Move [X31+176], X20
	008 Move [X31+184], X19
	009 Move X20, 0x11EF000
	010 Move W8, [X20+420]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xF33000
	017 Move X0, [X0+2968]
	018 Call 0x1C17CF4
	019 Move X0, 0xF33000
	020 Move X0, [X0+3904]
	021 Call 0x1C17CF4
	022 Move X0, 0xF33000
	023 Move X0, [X0+3912]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+420], W8
	027 Move X8, [X19+72]
	028 Compare X8, 0
	029 JumpIfEqual {175}
	030 Move X8, [X19+144]
	031 Compare X8, 0
	032 JumpIfNotEqual {164}
	033 Move X8, 0xF32000
	034 Move X0, [X19+64]
	035 Move X8, [X8+3912]
	036 Move X2, X31
	037 Move X1, [X8]
	038 Call String.op_Equality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {164}
	043 Move X23, 0xF32000
	044 Move X23, [X23+2968]
	045 NotImplemented "Instruction MOVI not yet implemented."
	046 Move [X31+32], V0
	047 Move [X31+40], V0
	048 Move X21, [X19+96]
	049 Move X0, [X23]
	050 Call 0x1C17F10
	051 Move X1, X21
	052 Move X20, X0
	053 Call ASN1..ctor, X0, X1
	054 Compare X20, 0
	055 JumpIfEqual {174}
	056 Move W8, [X20+16]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X0, X20
	059 Call ASN1.get_Value, X0
	060 Move X1, X0
	061 Call X509Certificate.GetUnsignedBigInteger, X0, X1
	062 Move X8, [X23]
	063 Move X22, [X19+72]
	064 Move X20, X0
	065 Move X0, X8
	066 Call 0x1C17F10
	067 Move X1, X22
	068 Move X21, X0
	069 Call ASN1..ctor, X0, X1
	070 Compare X21, 0
	071 JumpIfEqual {174}
	072 Move W8, [X21+16]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X0, [X21+32]
	075 Compare X0, 0
	076 JumpIfEqual {165}
	077 Move X8, [X0]
	078 Move X9, [X8+664]
	079 Move X1, [X8+672]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X0, X21
	083 Move W1, W31
	084 Call ASN1.get_Item, X0, X1
	085 Compare X0, 0
	086 JumpIfEqual {193}
	087 Move W8, [X0+16]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move W1, 1
	090 Move X0, X21
	091 Call ASN1.get_Item, X0, X1
	092 Compare X0, 0
	093 JumpIfEqual {193}
	094 Move W8, [X0+16]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move W1, 2
	097 Move X0, X21
	098 Call ASN1.get_Item, X0, X1
	099 Compare X0, 0
	100 JumpIfEqual {193}
	101 Move W8, [X0+16]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X0, X21
	104 Move W1, W31
	105 Call ASN1.get_Item, X0, X1
	106 Compare X0, 0
	107 JumpIfEqual {193}
	108 Call ASN1.get_Value, X0
	109 Move X1, X0
	110 Call X509Certificate.GetUnsignedBigInteger, X0, X1
	111 Move X22, X0
	112 Move W1, 1
	113 Move X0, X21
	114 Call ASN1.get_Item, X0, X1
	115 Compare X0, 0
	116 JumpIfEqual {193}
	117 Call ASN1.get_Value, X0
	118 Move X1, X0
	119 Call X509Certificate.GetUnsignedBigInteger, X0, X1
	120 Move X23, X0
	121 Move W1, 2
	122 Move X0, X21
	123 Call ASN1.get_Item, X0, X1
	124 Compare X0, 0
	125 JumpIfEqual {193}
	126 Call ASN1.get_Value, X0
	127 Move X1, X0
	128 Call X509Certificate.GetUnsignedBigInteger, X0, X1
	129 Compare X20, 0
	130 JumpIfEqual {193}
	131 Move X8, 0xF32000
	132 Move X8, [X8+3904]
	133 Move X21, X0
	134 Move X0, [X8]
	135 Call 0x1C17F10
	136 Move W8, [X20+24]
	137 Move X2, X31
	138 Move X24, X0
	139 Move W1, W8
	140 ShiftRight W1, 29
	141 And W1, W1, 0xFFFFFFF
	142 Call DSACryptoServiceProvider..ctor, X0, X1
	143 Move [X19+144], X24
	144 Move V0, [X31+32]
	145 Move V1, [X31+48]
	146 Move [X31], V0
	147 Move [X31+8], V1
	148 Compare X24, 0
	149 JumpIfEqual {193}
	150 Move X8, [X24]
	151 Move V0, [X31]
	152 Move V1, [X31+16]
	153 Add X1, X31, 64
	154 Move X0, X24
	155 Move X9, [X8+504]
	156 Move [X31+64], X22
	157 Move [X31+72], X23
	158 Move [X31+80], X21
	159 Move [X31+88], X20
	160 Move [X31+96], V0
	161 Move [X31+104], V1
	162 Move X2, [X8+512]
	163 NotImplemented "Instruction BLR not yet implemented."
	164 Move X0, [X19+144]
	165 Move X20, [X31+176]
	166 Move X19, [X31+184]
	167 Move X22, [X31+160]
	168 Move X21, [X31+168]
	169 Move X24, [X31+144]
	170 Move X23, [X31+152]
	171 Move X30, [X31+128]
	172 Add X31, X31, 192
	173 Return X0
	174 Move X0, X31
	175 Move X0, 0xF32000
	176 Move X0, [X0+3296]
	177 Call 0x1C17D08
	178 Call 0x1C17F10
	179 Move X19, X0
	180 Move X0, 0xF32000
	181 Move X0, [X0+3920]
	182 Call 0x1C17D08
	183 Move X1, X0
	184 Move X0, X19
	185 Move X2, X31
	186 Call CryptographicException..ctor, X0, X1
	187 Move X0, 0xF32000
	188 Move X0, [X0+3928]
	189 Call 0x1C17D08
	190 Move X1, X0
	191 Move X0, X19
	192 Call 0x1C17DEC
	193 Call 0x1C17F20

Method: System.Void set_DSA(System.Security.Cryptography.DSA value)

Disassembly:
	0x031F6138 MOVZ W0, 0x8
	0x031F613C BL 0x3EB1AF0
	0x031F6140 LDR X8, [X19]
	0x031F6144 STR X8, [X0]

ISIL:
	001 Move [X0+144], X1
	002 Compare X1, 0
	003 JumpIfEqual {5}
	004 Move [X0+136], X31
	005 Return 

Method: Mono.Security.X509.X509ExtensionCollection get_Extensions()

Disassembly:
	0x031F6148 ADRP X1, 0xCBE000
	0x031F614C ADD X1, X1, 0xE58

ISIL:
	001 Move X0, [X0+184]
	002 Return X0

Method: System.Byte[] get_Hash()

Disassembly:
	0x031F6150 MOV X2, X31
	0x031F6154 BL 0x3EB1B00
	0x031F6158 MOV X19, X0
	0x031F615C BL 0x3EB1AE0
	0x031F6160 MOV X0, X19
	0x031F6164 BL 0x1D2C690
	0x031F6168 BL 0x1990590
	0x031F616C STP X30, X21, [X31 - 0x20]!
	0x031F6170 STP X20, X19, [X31 + 0x10]
	0x031F6174 ADRP X21, 0x11E6000
	0x031F6178 LDRB W8, [X21 + 0x1B1]
	0x031F617C MOV X19, X1
	0x031F6180 MOV X20, X0
	0x031F6184 TBNZ X8, 0x0, 0x31F619C
	0x031F6188 ADRP X0, 0xF2B000
	0x031F618C LDR X0, [X0 + 0x200]
	0x031F6190 BL 0x1C16CF4
	0x031F6194 MOVZ W8, 0x1
	0x031F6198 STRB W8, [X21 + 0x1B1]
	0x031F619C CBZ X19, 0x31F61C4
	0x031F61A0 ADRP X8, 0xF2B000
	0x031F61A4 LDR X8, [X8 + 0x200]
	0x031F61A8 LDR X2, [X20 + 0x18]
	0x031F61AC MOV X0, X19
	0x031F61B0 LDP X20, X19, [X31 + 0x10]
	0x031F61B4 LDR X1, [X8]
	0x031F61B8 MOV X3, X31
	0x031F61BC LDP X30, X21, [X31], #0x20
	0x031F61C0 B 0x32A8BF0
	0x031F61C4 BL 0x1C16F20
	0x031F61C8 STP X30, X21, [X31 - 0x20]!
	0x031F61CC STP X20, X19, [X31 + 0x10]
	0x031F61D0 ADRP X20, 0x11E6000
	0x031F61D4 ADRP X19, 0xF2B000
	0x031F61D8 ADRP X21, 0xF2A000
	0x031F61DC LDRB W8, [X20 + 0x1B3]
	0x031F61E0 LDR X19, [X19 + 0x208]
	0x031F61E4 LDR X21, [X21 + 0xCC0]
	0x031F61E8 TBNZ X8, 0x0, 0x31F620C
	0x031F61EC ADRP X0, 0xF2A000
	0x031F61F0 LDR X0, [X0 + 0xCC0]
	0x031F61F4 BL 0x1C16CF4
	0x031F61F8 ADRP X0, 0xF2B000
	0x031F61FC LDR X0, [X0 + 0x208]
	0x031F6200 BL 0x1C16CF4
	0x031F6204 MOVZ W8, 0x1
	0x031F6208 STRB W8, [X20 + 0x1B3]
	0x031F620C LDR X8, [X21]
	0x031F6210 LDR X9, [X19]
	0x031F6214 LDP X20, X19, [X31 + 0x10]
	0x031F6218 LDR X8, [X8 + 0xB8]
	0x031F621C STR X9, [X8]
	0x031F6220 LDP X30, X21, [X31], #0x20
	0x031F6224 RET
	0x031F6228 STP X30, X21, [X31 - 0x20]!
	0x031F622C STP X20, X19, [X31 + 0x10]
	0x031F6230 ADRP X21, 0x11E6000
	0x031F6234 LDRB W8, [X21 + 0x1B4]
	0x031F6238 MOV W19, W1
	0x031F623C MOV X20, X0
	0x031F6240 TBNZ X8, 0x0, 0x31F6258
	0x031F6244 ADRP X0, 0xF2A000
	0x031F6248 LDR X0, [X0 + 0xCC0]
	0x031F624C BL 0x1C16CF4
	0x031F6250 MOVZ W8, 0x1
	0x031F6254 STRB W8, [X21 + 0x1B4]
	0x031F6258 LDR X0, [X20 + 0x10]
	0x031F625C CBZ X0, 0x31F62BC
	0x031F6260 LDR X8, [X0]
	0x031F6264 MOV W1, W19
	0x031F6268 LDR X9, [X8 + 0x2E8]
	0x031F626C LDR X2, [X8 + 0x2F0]
	0x031F6270 BLR X9
	0x031F6274 CBZ X0, 0x31F62AC
	0x031F6278 ADRP X9, 0xF2A000
	0x031F627C LDR X9, [X9 + 0xCC0]
	0x031F6280 LDR X8, [X0]
	0x031F6284 LDR X1, [X9]
	0x031F6288 LDRB W10, [X8 + 0x130]
	0x031F628C LDRB W9, [X1 + 0x130]
	0x031F6290 CMP W10, W9
	0x031F6294 B.CC 0x31F62B8
	0x031F6298 LDR X8, [X8 + 0xC8]
	0x031F629C ADD X8, X8, X9, 0x3, LSL
	0x031F62A0 LDUR X8, [X8 - 0x8]
	0x031F62A4 CMP X8, X1
	0x031F62A8 B.NE 0x31F62B8
	0x031F62AC LDP X20, X19, [X31 + 0x10]
	0x031F62B0 LDP X30, X21, [X31], #0x20
	0x031F62B4 RET
	0x031F62B8 BL 0x1C171E0
	0x031F62BC BL 0x1C16F20
	0x031F62C0 STR X30, [X31 - 0x30]!
	0x031F62C4 STP X22, X21, [X31 + 0x10]
	0x031F62C8 STP X20, X19, [X31 + 0x20]
	0x031F62CC CBZ X1, 0x31F6348
	0x031F62D0 MOV X20, X0
	0x031F62D4 LDR X0, [X1 + 0x10]
	0x031F62D8 MOV X19, X1
	0x031F62DC CBZ X0, 0x31F6334
	0x031F62E0 MOV W21, W31
	0x031F62E4 LDR X8, [X0]
	0x031F62E8 LDR X9, [X8 + 0x298]
	0x031F62EC LDR X1, [X8 + 0x2A0]
	0x031F62F0 BLR X9
	0x031F62F4 CMP W21, W0
	0x031F62F8 B.GE 0x31F6338
	0x031F62FC LDR X22, [X20 + 0x10]
	0x031F6300 MOV X0, X19
	0x031F6304 MOV W1, W21
	0x031F6308 BL 0x31F6228
	0x031F630C CBZ X22, 0x31F6334
	0x031F6310 LDR X8, [X22]
	0x031F6314 MOV X1, X0
	0x031F6318 MOV X0, X22
	0x031F631C LDR X9, [X8 + 0x308]
	0x031F6320 LDR X2, [X8 + 0x310]
	0x031F6324 BLR X9
	0x031F6328 LDR X0, [X19 + 0x10]
	0x031F632C ADD W21, W21, 0x1
	0x031F6330 CBNZ X0, 0x31F62E4
	0x031F6334 BL 0x1C16F20
	0x031F6338 LDP X20, X19, [X31 + 0x20]
	0x031F633C LDP X22, X21, [X31 + 0x10]
	0x031F6340 LDR X30, [X31], #0x30
	0x031F6344 RET
	0x031F6348 ADRP X0, 0xF02000
	0x031F634C LDR X0, [X0 + 0x528]
	0x031F6350 BL 0x1C16D08
	0x031F6354 BL 0x1C16F10
	0x031F6358 MOV X19, X0
	0x031F635C ADRP X0, 0xF07000
	0x031F6360 LDR X0, [X0 + 0xEC8]
	0x031F6364 BL 0x1C16D08
	0x031F6368 MOV X1, X0
	0x031F636C MOV X0, X19
	0x031F6370 MOV X2, X31
	0x031F6374 BL 0x330E100
	0x031F6378 ADRP X0, 0xF2B000
	0x031F637C LDR X0, [X0 + 0x210]
	0x031F6380 BL 0x1C16D08
	0x031F6384 MOV X1, X0
	0x031F6388 MOV X0, X19
	0x031F638C BL 0x1C16DEC
	0x031F6390 STR X30, [X31 - 0x10]!
	0x031F6394 BL 0x31F63A8
	0x031F6398 ADDS W31, W0, 0x1
	0x031F639C CSET W0, NE
	0x031F63A0 LDR X30, [X31], #0x10
	0x031F63A4 RET
	0x031F63A8 STR X30, [X31 - 0x30]!
	0x031F63AC STP X22, X21, [X31 + 0x10]
	0x031F63B0 STP X20, X19, [X31 + 0x20]
	0x031F63B4 ADRP X21, 0x11E6000
	0x031F63B8 LDRB W8, [X21 + 0x1B6]
	0x031F63BC MOV X20, X1
	0x031F63C0 MOV X19, X0
	0x031F63C4 TBNZ X8, 0x0, 0x31F63DC
	0x031F63C8 ADRP X0, 0xF2A000
	0x031F63CC LDR X0, [X0 + 0xCC0]
	0x031F63D0 BL 0x1C16CF4
	0x031F63D4 MOVZ W8, 0x1
	0x031F63D8 STRB W8, [X21 + 0x1B6]
	0x031F63DC CBZ X20, 0x31F64A8
	0x031F63E0 MOV X0, X20
	0x031F63E4 BL 0x31F5150

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11E7000
	007 Move W8, [X20+421]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xEFE000
	014 Move X0, [X0+1560]
	015 Call 0x1C17CF4
	016 Move X0, 0xEFE000
	017 Move X0, [X0+3584]
	018 Call 0x1C17CF4
	019 Move X0, 0xF2B000
	020 Move X0, [X0+3976]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+421], W8
	024 Move X0, [X19+128]
	025 Compare X0, 0
	026 JumpIfEqual {44}
	027 Compare X0, 0
	028 JumpIfEqual {139}
	029 Move X1, X31
	030 Call Array.Clone, X0
	031 Compare X0, 0
	032 JumpIfEqual {121}
	033 Move X8, 0xEFE000
	034 Move X8, [X8+1560]
	035 Move X19, X0
	036 Move X20, [X8]
	037 Move X1, X20
	038 Call 0x1C17E00
	039 Compare X0, 0
	040 JumpIfNotEqual {121}
	041 Move X0, X19
	042 Move X1, X20
	043 Call 0x1C181E0
	044 Move X8, [X19+16]
	045 Compare X8, 0
	046 JumpIfEqual {120}
	047 Move X0, [X8+32]
	048 Compare X0, 0
	049 JumpIfEqual {121}
	050 Move X8, [X0]
	051 Move X9, [X8+664]
	052 Move X1, [X8+672]
	053 NotImplemented "Instruction BLR not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X21, 0xF2B000
	056 Move X21, [X21+3976]
	057 Move X20, [X19+112]
	058 Move X0, [X21]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X20
	064 Move W1, W31
	065 Move X2, X31
	066 Call PKCS1.HashNameFromOid, X0, X1
	067 Compare X0, 0
	068 JumpIfEqual {121}
	069 Move X20, X0
	070 Move X0, [X19+16]
	071 Compare X0, 0
	072 JumpIfEqual {139}
	073 Move W1, W31
	074 Call ASN1.get_Item, X0, X1
	075 Compare X0, 0
	076 JumpIfEqual {139}
	077 Move X8, [X0]
	078 Move X9, [X8+376]
	079 Move X1, [X8+384]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move X8, [X21]
	082 Move X21, X0
	083 Move W9, [X8+224]
	084 Compare W9, 0
	085 JumpIfNotEqual {88}
	086 Move X0, X8
	087 Call 0x1C17DFC
	088 Move X0, X20
	089 Move X1, X31
	090 Call PKCS1.CreateFromName, X0
	091 Move X20, X0
	092 Compare X21, 0
	093 JumpIfEqual {140}
	094 Compare X20, 0
	095 JumpIfEqual {143}
	096 Move W3, [X21+24]
	097 Move X0, X20
	098 Move X1, X21
	099 Move W2, W31
	100 Move X4, X31
	101 Call HashAlgorithm.ComputeHash, X0, X1, X2, X3
	102 Move X21, X31
	103 Move [X19+128], X0
	104 Move X10, 0xEFE000
	105 Move X8, [X20]
	106 Move X10, [X10+3584]
	107 NotImplemented "Instruction LDRH not yet implemented."
	108 Move X1, [X10]
	109 Compare X9, 0
	110 JumpIfEqual {117}
	111 Move X10, [X8+176]
	112 Add X10, X10, 8
	113 NotImplemented "Instruction LDUR not yet implemented."
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Subtract X9, X9, 1
	116 Add X10, X10, 16
	117 Move X0, X20
	118 Move W2, W31
	119 Call 0x1C5D788
	120 Move X0, X31
	121 Move X20, [X31+32]
	122 Move X19, [X31+40]
	123 Move X22, [X31+16]
	124 Move X21, [X31+24]
	125 Move X30, [X31+48]
	126 Return X0
	127 NotImplemented "Instruction LDRSW not yet implemented."
	128 Add X8, X8, X9
	129 Add X0, X8, 312
	130 Move X8, [X0]
	131 Move X1, [X0+8]
	132 Move X0, X20
	133 NotImplemented "Instruction BLR not yet implemented."
	134 Compare X21, 0
	135 JumpIfNotEqual {141}
	136 Move X0, [X19+128]
	137 Compare X0, 0
	138 JumpIfNotEqual {29}
	139 Call 0x1C17F20
	140 Call 0x1C17F20
	141 Move X0, X21
	142 Call 0x1C17F18
	143 Call 0x1C17F20
	144 Move X22, X0
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move X0, X22
	147 Call 0x3EB2AD0
	148 Move X21, [X0]
	149 Call 0x3EB2AE0
	150 Compare X20, 0
	151 JumpIfNotEqual {104}
	152 Move X21, X31
	153 Move X22, X0
	154 Compare X20, 0
	155 JumpIfEqual {179}
	156 Move X10, 0xEFE000
	157 Move X8, [X20]
	158 Move X10, [X10+3584]
	159 NotImplemented "Instruction LDRH not yet implemented."
	160 Move X1, [X10]
	161 Compare X9, 0
	162 JumpIfEqual {169}
	163 Move X10, [X8+176]
	164 Add X10, X10, 8
	165 NotImplemented "Instruction LDUR not yet implemented."
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Subtract X9, X9, 1
	168 Add X10, X10, 16
	169 Move X0, X20
	170 Move W2, W31
	171 Call 0x1C5D788
	172 NotImplemented "Instruction LDRSW not yet implemented."
	173 Add X8, X8, X9
	174 Add X0, X8, 312
	175 Move X8, [X0]
	176 Move X1, [X0+8]
	177 Move X0, X20
	178 NotImplemented "Instruction BLR not yet implemented."
	179 Compare X21, 0
	180 JumpIfNotEqual {183}
	181 Move X0, X22
	182 Call 0x1D2D690
	183 Move X0, X21
	184 Call 0x1C17F18
	185 Call 0x1991590

Method: System.String get_IssuerName()

Disassembly:
	0x031F63E8 LDR X8, [X19 + 0x10]
	0x031F63EC CBZ X8, 0x31F6488

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.String get_KeyAlgorithm()

Disassembly:
	0x031F63F0 ADRP X22, 0xF2A000
	0x031F63F4 LDR X22, [X22 + 0xCC0]

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Byte[] get_KeyAlgorithmParameters()

Disassembly:
	0x031F63F8 MOV X21, X0
	0x031F63FC MOV W20, W31
	0x031F6400 LDR X9, [X8]
	0x031F6404 MOV X0, X8
	0x031F6408 LDR X10, [X9 + 0x298]
	0x031F640C LDR X1, [X9 + 0x2A0]
	0x031F6410 BLR X10
	0x031F6414 CMP W20, W0
	0x031F6418 B.GE 0x31F648C
	0x031F641C LDR X0, [X19 + 0x10]
	0x031F6420 CBZ X0, 0x31F6488
	0x031F6424 LDR X8, [X0]
	0x031F6428 MOV W1, W20
	0x031F642C LDR X9, [X8 + 0x2E8]
	0x031F6430 LDR X2, [X8 + 0x2F0]
	0x031F6434 BLR X9
	0x031F6438 CBZ X0, 0x31F6488
	0x031F643C LDR X8, [X0]
	0x031F6440 LDR X1, [X22]
	0x031F6444 LDRB W10, [X8 + 0x130]
	0x031F6448 LDRB W9, [X1 + 0x130]
	0x031F644C CMP W10, W9
	0x031F6450 B.CC 0x31F64A4
	0x031F6454 LDR X8, [X8 + 0xC8]
	0x031F6458 ADD X8, X8, X9, 0x3, LSL
	0x031F645C LDUR X8, [X8 - 0x8]
	0x031F6460 CMP X8, X1
	0x031F6464 B.NE 0x31F64A4
	0x031F6468 BL 0x31F5150

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11E7000
	005 Move W8, [X20+422]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEFE000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+422], W8
	016 Move X0, [X19+72]
	017 Compare X0, 0
	018 JumpIfEqual {31}
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0xEFE000
	024 Move X8, [X8+1560]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {35}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Move X0, X19
	036 Move X1, X20
	037 Call 0x1C181E0

Method: System.Void set_KeyAlgorithmParameters(System.Byte[] value)

Disassembly:
	0x031F646C MOV X1, X0
	0x031F6470 MOV X2, X21

ISIL:
	001 Move [X0+72], X1
	002 Return 

Method: System.Byte[] get_PublicKey()

Disassembly:
	0x031F6474 BL 0x31F65E8
	0x031F6478 TBNZ X0, 0x0, 0x31F6490
	0x031F647C LDR X8, [X19 + 0x10]
	0x031F6480 ADD W20, W20, 0x1
	0x031F6484 CBNZ X8, 0x31F6400
	0x031F6488 BL 0x1C16F20
	0x031F648C MOVN W20, 0x0
	0x031F6490 MOV W0, W20
	0x031F6494 LDP X20, X19, [X31 + 0x20]
	0x031F6498 LDP X22, X21, [X31 + 0x10]
	0x031F649C LDR X30, [X31], #0x30
	0x031F64A0 RET
	0x031F64A4 BL 0x1C171E0
	0x031F64A8 ADRP X0, 0xF02000
	0x031F64AC LDR X0, [X0 + 0x528]
	0x031F64B0 BL 0x1C16D08
	0x031F64B4 BL 0x1C16F10
	0x031F64B8 MOV X19, X0
	0x031F64BC ADRP X0, 0xF07000
	0x031F64C0 LDR X0, [X0 + 0xEC8]
	0x031F64C4 BL 0x1C16D08
	0x031F64C8 MOV X1, X0
	0x031F64CC MOV X0, X19
	0x031F64D0 MOV X2, X31
	0x031F64D4 BL 0x330E100
	0x031F64D8 ADRP X0, 0xF2B000
	0x031F64DC LDR X0, [X0 + 0x218]
	0x031F64E0 BL 0x1C16D08
	0x031F64E4 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11E7000
	005 Move W8, [X20+423]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEFE000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+423], W8
	016 Move X0, [X19+96]
	017 Compare X0, 0
	018 JumpIfEqual {31}
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0xEFE000
	024 Move X8, [X8+1560]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {35}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Move X0, X19
	036 Move X1, X20
	037 Call 0x1C181E0

Method: System.Security.Cryptography.RSA get_RSA()

Disassembly:
	0x031F64E8 MOV X0, X19
	0x031F64EC BL 0x1C16DEC
	0x031F64F0 STP X30, X21, [X31 - 0x20]!
	0x031F64F4 STP X20, X19, [X31 + 0x10]
	0x031F64F8 ADRP X21, 0x11E6000
	0x031F64FC LDRB W8, [X21 + 0x1B7]
	0x031F6500 MOV X20, X1
	0x031F6504 MOV X19, X0
	0x031F6508 TBNZ X8, 0x0, 0x31F6520
	0x031F650C ADRP X0, 0xF05000
	0x031F6510 LDR X0, [X0 + 0xDB8]
	0x031F6514 BL 0x1C16CF4
	0x031F6518 MOVZ W8, 0x1
	0x031F651C STRB W8, [X21 + 0x1B7]
	0x031F6520 MOV X0, X19
	0x031F6524 MOV X1, X31
	0x031F6528 BL 0x33BDD8C
	0x031F652C CBZ X20, 0x31F65A0
	0x031F6530 ADRP X10, 0xF05000
	0x031F6534 LDR X8, [X20]
	0x031F6538 LDR X10, [X10 + 0xDB8]
	0x031F653C LDRH W9, [X8 + 0x12E]
	0x031F6540 LDR X1, [X10]
	0x031F6544 CBZ X9, 0x31F6568
	0x031F6548 LDR X10, [X8 + 0xB0]
	0x031F654C ADD X10, X10, 0x8
	0x031F6550 LDUR X11, [X10 - 0x8]
	0x031F6554 CMP X11, X1
	0x031F6558 B.EQ 0x31F6578
	0x031F655C SUBS X9, X9, 0x1
	0x031F6560 ADD X10, X10, 0x10
	0x031F6564 B.NE 0x31F6550
	0x031F6568 MOV X0, X20
	0x031F656C MOV W2, W31
	0x031F6570 BL 0x1C5C788
	0x031F6574 B 0x31F6584
	0x031F6578 LDRSW X9, [X10]
	0x031F657C ADD X8, X8, X9, 0x4, LSL
	0x031F6580 ADD X0, X8, 0x138
	0x031F6584 LDP X8, X1, [X0]
	0x031F6588 MOV X0, X20
	0x031F658C BLR X8
	0x031F6590 STR X0, [X19 + 0x10]
	0x031F6594 LDP X20, X19, [X31 + 0x10]
	0x031F6598 LDP X30, X21, [X31], #0x20
	0x031F659C RET
	0x031F65A0 BL 0x1C16F20
	0x031F65A4 STR X30, [X31 - 0x10]!
	0x031F65A8 LDR X0, [X0 + 0x10]
	0x031F65AC CBZ X0, 0x31F65C4
	0x031F65B0 LDR X8, [X0]
	0x031F65B4 LDR X2, [X8 + 0x388]
	0x031F65B8 LDR X1, [X8 + 0x390]
	0x031F65BC LDR X30, [X31], #0x10
	0x031F65C0 BR X2
	0x031F65C4 BL 0x1C16F20
	0x031F65C8 STR X30, [X31 - 0x10]!
	0x031F65CC LDR X0, [X0 + 0x10]
	0x031F65D0 CBZ X0, 0x31F65E4
	0x031F65D4 LDR X8, [X0]
	0x031F65D8 LDP X2, X1, [X8 + 0x158]
	0x031F65DC LDR X30, [X31], #0x10
	0x031F65E0 BR X2
	0x031F65E4 BL 0x1C16F20
	0x031F65E8 STR X30, [X31 - 0x10]!
	0x031F65EC ORR X8, X1, X2, 0x0
	0x031F65F0 CMP X8, 0x0
	0x031F65F4 CSET W0, EQ
	0x031F65F8 CBZ X1, 0x31F666C
	0x031F65FC CBZ X2, 0x31F666C
	0x031F6600 LDR W8, [X1 + 0x18]
	0x031F6604 LDR W9, [X2 + 0x18]
	0x031F6608 CMP W8, W9
	0x031F660C B.NE 0x31F6660
	0x031F6610 CMP W8, 0x1
	0x031F6614 B.LT 0x31F6668
	0x031F6618 MOV W9, W31
	0x031F661C SUB W8, W31, W8
	0x031F6620 ADDS W31, W8, W9
	0x031F6624 B.EQ 0x31F6674
	0x031F6628 SXTW X9, W9
	0x031F662C ADD X10, X1, X9
	0x031F6630 ADD X11, X2, X9
	0x031F6634 LDRB W10, [X10 + 0x20]
	0x031F6638 LDRB W11, [X11 + 0x20]
	0x031F663C ADD W12, W8, W9
	0x031F6640 CMP W10, W11
	0x031F6644 CSET W0, EQ
	0x031F6648 ADDS W31, W12, 0x1
	0x031F664C B.EQ 0x31F666C
	0x031F6650 CMP W10, W11
	0x031F6654 ADD W9, W9, 0x1
	0x031F6658 B.EQ 0x31F6620
	0x031F665C B 0x31F666C
	0x031F6660 MOV W0, W31
	0x031F6664 B 0x31F666C
	0x031F6668 MOVZ W0, 0x1
	0x031F666C LDR X30, [X31], #0x10
	0x031F6670 RET
	0x031F6674 BL 0x1C16F28
	0x031F6678 STR X30, [X31 - 0x20]!

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+160], X30
	003 Move [X31+168], X23
	004 Move [X31+176], X22
	005 Move [X31+184], X21
	006 Move [X31+192], X20
	007 Move [X31+200], X19
	008 Move X20, 0x11E7000
	009 Move W8, [X20+424]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0xF2B000
	016 Move X0, [X0+2968]
	017 Call 0x1C17CF4
	018 Move X0, 0xF2C000
	019 Move X0, [X0+416]
	020 Call 0x1C17CF4
	021 Move X0, 0xF2B000
	022 Move X0, [X0+3936]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+424], W8
	026 Move X8, [X19+136]
	027 Compare X8, 0
	028 JumpIfNotEqual {114}
	029 Move X8, 0xF2B000
	030 Move X0, [X19+64]
	031 Move X8, [X8+3936]
	032 Move X2, X31
	033 Move X1, [X8]
	034 Call String.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {114}
	039 Move X8, 0xF2B000
	040 Move X8, [X8+2968]
	041 NotImplemented "Instruction MOVI not yet implemented."
	042 Move [X31+64], V0
	043 Move [X31+72], V0
	044 Move [X31+3], V0
	045 Move X0, [X8]
	046 Move X21, [X19+96]
	047 Call 0x1C17F10
	048 Move X1, X21
	049 Move X20, X0
	050 Call ASN1..ctor, X0, X1
	051 Compare X20, 0
	052 JumpIfEqual {124}
	053 Move X0, X20
	054 Move W1, W31
	055 Call ASN1.get_Item, X0, X1
	056 Compare X0, 0
	057 JumpIfEqual {115}
	058 Move W8, [X0+16]
	059 Move X21, X0
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move W1, 1
	062 Move X0, X20
	063 Call ASN1.get_Item, X0, X1
	064 Compare X0, 0
	065 JumpIfEqual {124}
	066 Move W8, [X0+16]
	067 Move X22, X0
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X0, X21
	070 Call ASN1.get_Value, X0
	071 Move X1, X0
	072 Call X509Certificate.GetUnsignedBigInteger, X0, X1
	073 Move X20, X0
	074 Move X0, X22
	075 Call ASN1.get_Value, X0
	076 Compare X20, 0
	077 JumpIfEqual {124}
	078 Move X9, 0xF2C000
	079 Move W8, [X20+24]
	080 Move X9, [X9+416]
	081 Move X21, X0
	082 Move W23, W8
	083 ShiftRight W23, 29
	084 And W23, W23, 0xFFFFFFF
	085 Move X0, [X9]
	086 Call 0x1C17F10
	087 Move W1, W23
	088 Move X2, X31
	089 Move X22, X0
	090 Call RSACryptoServiceProvider..ctor, X0, X1
	091 Move [X19+136], X22
	092 Move V0, [X31+48]
	093 Move V1, [X31+64]
	094 Move V2, [X31+5]
	095 Move [X31], V0
	096 Move [X31+8], V1
	097 Move [X31+2], V2
	098 Compare X22, 0
	099 JumpIfEqual {124}
	100 Move X8, [X22]
	101 Move V0, [X31]
	102 Move V1, [X31+16]
	103 Move V2, [X31+2]
	104 Add X1, X31, 96
	105 Move X9, [X8+504]
	106 Move [X31+96], X21
	107 Move [X31+104], X20
	108 Move [X31+112], V0
	109 Move [X31+120], V1
	110 Move [X31+9], V2
	111 Move X2, [X8+512]
	112 Move X0, X22
	113 NotImplemented "Instruction BLR not yet implemented."
	114 Move X0, [X19+136]
	115 Move X20, [X31+192]
	116 Move X19, [X31+200]
	117 Move X22, [X31+176]
	118 Move X21, [X31+184]
	119 Move X30, [X31+160]
	120 Move X23, [X31+168]
	121 Add X31, X31, 208
	122 Return X0
	123 Move X0, X31
	124 Call 0x1C17F20

Method: System.Void set_RSA(System.Security.Cryptography.RSA value)

Disassembly:
	0x031F667C STP X20, X19, [X31 + 0x10]
	0x031F6680 ADRP X20, 0x11E6000
	0x031F6684 LDRB W8, [X20 + 0x1B9]
	0x031F6688 MOV X19, X0

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {4}
	003 Move [X0+144], X31
	004 Move [X0+136], X1
	005 Return 

Method: System.Byte[] get_RawData()

Disassembly:
	0x031F668C TBNZ X8, 0x0, 0x31F66A4
	0x031F6690 ADRP X0, 0xEFD000
	0x031F6694 LDR X0, [X0 + 0xE18]
	0x031F6698 BL 0x1C16CF4
	0x031F669C MOVZ W8, 0x1
	0x031F66A0 STRB W8, [X20 + 0x1B9]
	0x031F66A4 LDR X19, [X19 + 0x10]
	0x031F66A8 CBZ X19, 0x31F6718
	0x031F66AC ADRP X10, 0xEFD000
	0x031F66B0 LDR X8, [X19]
	0x031F66B4 LDR X10, [X10 + 0xE18]
	0x031F66B8 LDRH W9, [X8 + 0x12E]
	0x031F66BC LDR X1, [X10]
	0x031F66C0 CBZ X9, 0x31F66E4
	0x031F66C4 LDR X10, [X8 + 0xB0]
	0x031F66C8 ADD X10, X10, 0x8
	0x031F66CC LDUR X11, [X10 - 0x8]
	0x031F66D0 CMP X11, X1
	0x031F66D4 B.EQ 0x31F66F4
	0x031F66D8 SUBS X9, X9, 0x1
	0x031F66DC ADD X10, X10, 0x10
	0x031F66E0 B.NE 0x31F66CC
	0x031F66E4 MOVZ W2, 0x1
	0x031F66E8 MOV X0, X19
	0x031F66EC BL 0x1C5C788
	0x031F66F0 B 0x31F6704
	0x031F66F4 LDR W9, [X10]
	0x031F66F8 ADD W9, W9, 0x1
	0x031F66FC ADD X8, X8, W9, 0x4, SXTW

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11E7000
	005 Move W8, [X20+425]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEFE000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+425], W8
	016 Move X0, [X19+24]
	017 Compare X0, 0
	018 JumpIfEqual {31}
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0xEFE000
	024 Move X8, [X8+1560]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {35}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Move X0, X19
	036 Move X1, X20
	037 Call 0x1C181E0

Method: System.Byte[] get_SerialNumber()

Disassembly:
	0x031F6700 ADD X0, X8, 0x138
	0x031F6704 LDP X2, X1, [X0]
	0x031F6708 MOV X0, X19
	0x031F670C LDP X20, X19, [X31 + 0x10]
	0x031F6710 LDR X30, [X31], #0x20
	0x031F6714 BR X2
	0x031F6718 BL 0x1C16F20
	0x031F671C STR X30, [X31 - 0x20]!
	0x031F6720 STP X20, X19, [X31 + 0x10]
	0x031F6724 ADRP X20, 0x11E6000
	0x031F6728 LDRB W8, [X20 + 0x1BA]
	0x031F672C MOV X19, X0
	0x031F6730 TBNZ X8, 0x0, 0x31F6748
	0x031F6734 ADRP X0, 0xEFD000
	0x031F6738 LDR X0, [X0 + 0xE18]
	0x031F673C BL 0x1C16CF4
	0x031F6740 MOVZ W8, 0x1
	0x031F6744 STRB W8, [X20 + 0x1BA]
	0x031F6748 LDR X19, [X19 + 0x10]
	0x031F674C CBZ X19, 0x31F67B8
	0x031F6750 ADRP X10, 0xEFD000
	0x031F6754 LDR X8, [X19]
	0x031F6758 LDR X10, [X10 + 0xE18]
	0x031F675C LDRH W9, [X8 + 0x12E]
	0x031F6760 LDR X1, [X10]
	0x031F6764 CBZ X9, 0x31F6788
	0x031F6768 LDR X10, [X8 + 0xB0]
	0x031F676C ADD X10, X10, 0x8
	0x031F6770 LDUR X11, [X10 - 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11E7000
	005 Move W8, [X20+426]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEFE000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+426], W8
	016 Move X0, [X19+160]
	017 Compare X0, 0
	018 JumpIfEqual {31}
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0xEFE000
	024 Move X8, [X8+1560]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {35}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Move X0, X19
	036 Move X1, X20
	037 Call 0x1C181E0

Method: System.Byte[] get_Signature()

Disassembly:
	0x031F6774 CMP X11, X1
	0x031F6778 B.EQ 0x31F6798
	0x031F677C SUBS X9, X9, 0x1
	0x031F6780 ADD X10, X10, 0x10
	0x031F6784 B.NE 0x31F6770
	0x031F6788 MOV X0, X19
	0x031F678C MOV W2, W31
	0x031F6790 BL 0x1C5C788
	0x031F6794 B 0x31F67A4
	0x031F6798 LDRSW X9, [X10]
	0x031F679C ADD X8, X8, X9, 0x4, LSL
	0x031F67A0 ADD X0, X8, 0x138
	0x031F67A4 LDP X2, X1, [X0]
	0x031F67A8 MOV X0, X19
	0x031F67AC LDP X20, X19, [X31 + 0x10]
	0x031F67B0 LDR X30, [X31], #0x20
	0x031F67B4 BR X2
	0x031F67B8 BL 0x1C16F20
	0x031F67BC STR X30, [X31 - 0x20]!
	0x031F67C0 STP X20, X19, [X31 + 0x10]
	0x031F67C4 ADRP X20, 0x11E6000
	0x031F67C8 LDRB W8, [X20 + 0x1BB]
	0x031F67CC MOV X19, X0
	0x031F67D0 TBNZ X8, 0x0, 0x31F67E8
	0x031F67D4 ADRP X0, 0xEFD000
	0x031F67D8 LDR X0, [X0 + 0xE18]
	0x031F67DC BL 0x1C16CF4
	0x031F67E0 MOVZ W8, 0x1
	0x031F67E4 STRB W8, [X20 + 0x1BB]
	0x031F67E8 LDR X19, [X19 + 0x10]
	0x031F67EC CBZ X19, 0x31F685C
	0x031F67F0 ADRP X10, 0xEFD000
	0x031F67F4 LDR X8, [X19]
	0x031F67F8 LDR X10, [X10 + 0xE18]
	0x031F67FC LDRH W9, [X8 + 0x12E]
	0x031F6800 LDR X1, [X10]
	0x031F6804 CBZ X9, 0x31F6828
	0x031F6808 LDR X10, [X8 + 0xB0]
	0x031F680C ADD X10, X10, 0x8
	0x031F6810 LDUR X11, [X10 - 0x8]
	0x031F6814 CMP X11, X1
	0x031F6818 B.EQ 0x31F6838
	0x031F681C SUBS X9, X9, 0x1
	0x031F6820 ADD X10, X10, 0x10
	0x031F6824 B.NE 0x31F6810
	0x031F6828 MOVZ W2, 0x2
	0x031F682C MOV X0, X19
	0x031F6830 BL 0x1C5C788
	0x031F6834 B 0x31F6848
	0x031F6838 LDR W9, [X10]
	0x031F683C ADD W9, W9, 0x2
	0x031F6840 ADD X8, X8, W9, 0x4, SXTW
	0x031F6844 ADD X0, X8, 0x138
	0x031F6848 LDP X2, X1, [X0]
	0x031F684C MOV X0, X19
	0x031F6850 LDP X20, X19, [X31 + 0x10]
	0x031F6854 LDR X30, [X31], #0x20
	0x031F6858 BR X2
	0x031F685C BL 0x1C16F20
	0x031F6860 STP X30, X21, [X31 - 0x20]!
	0x031F6864 STP X20, X19, [X31 + 0x10]
	0x031F6868 ADRP X21, 0x11E6000
	0x031F686C ADRP X20, 0xF2A000
	0x031F6870 LDRB W8, [X21 + 0x1BD]
	0x031F6874 LDR X20, [X20 + 0xCB8]
	0x031F6878 MOV X19, X0
	0x031F687C TBNZ X8, 0x0, 0x31F6894
	0x031F6880 ADRP X0, 0xF2A000
	0x031F6884 LDR X0, [X0 + 0xCB8]
	0x031F6888 BL 0x1C16CF4
	0x031F688C MOVZ W8, 0x1
	0x031F6890 STRB W8, [X21 + 0x1BD]
	0x031F6894 MOV X0, X19
	0x031F6898 MOV X1, X31
	0x031F689C BL 0x33BDD8C
	0x031F68A0 LDR X0, [X20]
	0x031F68A4 BL 0x1C16F10
	0x031F68A8 MOV X1, X31
	0x031F68AC MOV X20, X0
	0x031F68B0 BL 0x3351EFC
	0x031F68B4 STR X20, [X19 + 0x18]
	0x031F68B8 LDP X20, X19, [X31 + 0x10]
	0x031F68BC LDP X30, X21, [X31], #0x20
	0x031F68C0 RET
	0x031F68C4 STR X30, [X31 - 0x20]!
	0x031F68C8 STP X20, X19, [X31 + 0x10]
	0x031F68CC ADRP X20, 0x11E6000
	0x031F68D0 LDRB W8, [X20 + 0x1BE]
	0x031F68D4 MOV X19, X0
	0x031F68D8 TBNZ X8, 0x0, 0x31F68F0
	0x031F68DC ADRP X0, 0xF2A000
	0x031F68E0 LDR X0, [X0 + 0xCB8]
	0x031F68E4 BL 0x1C16CF4
	0x031F68E8 MOVZ W8, 0x1
	0x031F68EC STRB W8, [X20 + 0x1BE]
	0x031F68F0 LDR X0, [X19 + 0x10]
	0x031F68F4 CBNZ X0, 0x31F6930
	0x031F68F8 ADRP X8, 0xF2A000
	0x031F68FC LDR X8, [X8 + 0xCB8]
	0x031F6900 LDR X0, [X8]
	0x031F6904 BL 0x1C16F10
	0x031F6908 MOV X1, X31
	0x031F690C MOV X20, X0
	0x031F6910 BL 0x3351EFC
	0x031F6914 STR X20, [X19 + 0x10]
	0x031F6918 BL 0x31F6940
	0x031F691C CBZ X20, 0x31F693C
	0x031F6920 MOV X1, X0
	0x031F6924 MOV X0, X20
	0x031F6928 BL 0x31F62C0
	0x031F692C LDR X0, [X19 + 0x10]
	0x031F6930 LDP X20, X19, [X31 + 0x10]
	0x031F6934 LDR X30, [X31], #0x20
	0x031F6938 RET
	0x031F693C BL 0x1C16F20
	0x031F6940 STR X30, [X31 - 0x20]!
	0x031F6944 STP X20, X19, [X31 + 0x10]
	0x031F6948 ADRP X19, 0x11E6000
	0x031F694C ADRP X20, 0xF2A000
	0x031F6950 LDRB W8, [X19 + 0x1D5]
	0x031F6954 LDR X20, [X20 + 0xCB8]
	0x031F6958 TBNZ X8, 0x0, 0x31F6970
	0x031F695C ADRP X0, 0xF2A000
	0x031F6960 LDR X0, [X0 + 0xCB8]
	0x031F6964 BL 0x1C16CF4
	0x031F6968 MOVZ W8, 0x1
	0x031F696C STRB W8, [X19 + 0x1D5]
	0x031F6970 LDR X0, [X20]
	0x031F6974 BL 0x1C16F10
	0x031F6978 MOV X1, X31
	0x031F697C MOV X19, X0
	0x031F6980 BL 0x3351EFC
	0x031F6984 BL 0x31F8934
	0x031F6988 CBZ X0, 0x31F6A08
	0x031F698C BL 0x31F8A94
	0x031F6990 CBZ X0, 0x31F6A08
	0x031F6994 LDR X1, [X0 + 0x18]
	0x031F6998 MOV X20, X0
	0x031F699C CBNZ X1, 0x31F69B4
	0x031F69A0 LDR X1, [X20 + 0x10]
	0x031F69A4 MOV X0, X20
	0x031F69A8 BL 0x31F7F7C
	0x031F69AC MOV X1, X0
	0x031F69B0 STR X0, [X20 + 0x18]
	0x031F69B4 CBZ X19, 0x31F6A08
	0x031F69B8 MOV X0, X19
	0x031F69BC BL 0x31F62C0
	0x031F69C0 BL 0x31F89FC
	0x031F69C4 CBZ X0, 0x31F6A08
	0x031F69C8 BL 0x31F8A94
	0x031F69CC CBZ X0, 0x31F6A08
	0x031F69D0 LDR X1, [X0 + 0x18]
	0x031F69D4 MOV X20, X0
	0x031F69D8 CBNZ X1, 0x31F69F0
	0x031F69DC LDR X1, [X20 + 0x10]
	0x031F69E0 MOV X0, X20
	0x031F69E4 BL 0x31F7F7C
	0x031F69E8 MOV X1, X0
	0x031F69EC STR X0, [X20 + 0x18]
	0x031F69F0 MOV X0, X19
	0x031F69F4 BL 0x31F62C0
	0x031F69F8 MOV X0, X19
	0x031F69FC LDP X20, X19, [X31 + 0x10]
	0x031F6A00 LDR X30, [X31], #0x20
	0x031F6A04 RET
	0x031F6A08 BL 0x1C16F20
	0x031F6A0C STR X30, [X31 - 0x10]!
	0x031F6A10 LDR X0, [X0 + 0x18]
	0x031F6A14 CBZ X0, 0x31F6A20
	0x031F6A18 LDR X30, [X31], #0x10
	0x031F6A1C B 0x31F62C0
	0x031F6A20 BL 0x1C16F20
	0x031F6A24 STR X30, [X31 - 0x40]!
	0x031F6A28 STP X24, X23, [X31 + 0x10]
	0x031F6A2C STP X22, X21, [X31 + 0x20]
	0x031F6A30 STP X20, X19, [X31 + 0x30]
	0x031F6A34 ADRP X21, 0x11E6000
	0x031F6A38 LDRB W8, [X21 + 0x1BF]
	0x031F6A3C MOV X20, X1
	0x031F6A40 MOV X19, X0
	0x031F6A44 TBNZ X8, 0x0, 0x31F6A68
	0x031F6A48 ADRP X0, 0xEFD000
	0x031F6A4C LDR X0, [X0 + 0xE00]
	0x031F6A50 BL 0x1C16CF4
	0x031F6A54 ADRP X0, 0xF2A000
	0x031F6A58 LDR X0, [X0 + 0xCB8]
	0x031F6A5C BL 0x1C16CF4
	0x031F6A60 MOVZ W8, 0x1
	0x031F6A64 STRB W8, [X21 + 0x1BF]
	0x031F6A68 LDR X0, [X19 + 0x28]
	0x031F6A6C STR W31, [X19 + 0x30]
	0x031F6A70 CBZ X0, 0x31F6B04
	0x031F6A74 MOV X1, X31
	0x031F6A78 BL 0x3352004
	0x031F6A7C SUBS W21, W0, 0x1
	0x031F6A80 B.LT 0x31F6B70
	0x031F6A84 MOV W22, W0
	0x031F6A88 LDR X0, [X19 + 0x28]
	0x031F6A8C CBZ X0, 0x31F6CF8
	0x031F6A90 MOV W1, W31
	0x031F6A94 BL 0x31F6228
	0x031F6A98 MOV X2, X0
	0x031F6A9C MOV X0, X19
	0x031F6AA0 MOV X1, X20
	0x031F6AA4 BL 0x31F71F4
	0x031F6AA8 TBZ X0, 0x0, 0x31F6BB4
	0x031F6AAC MOVZ W23, 0x1
	0x031F6AB0 CMP W22, 0x2
	0x031F6AB4 B.LT 0x31F6B7C
	0x031F6AB8 LDR X0, [X19 + 0x28]
	0x031F6ABC CBZ X0, 0x31F6CF8
	0x031F6AC0 SUB W1, W23, 0x1
	0x031F6AC4 BL 0x31F6228
	0x031F6AC8 LDR X8, [X19 + 0x28]
	0x031F6ACC CBZ X8, 0x31F6CF8
	0x031F6AD0 MOV X24, X0
	0x031F6AD4 MOV X0, X8
	0x031F6AD8 MOV W1, W23
	0x031F6ADC BL 0x31F6228
	0x031F6AE0 MOV X2, X0
	0x031F6AE4 MOV X0, X19
	0x031F6AE8 MOV X1, X24
	0x031F6AEC BL 0x31F71F4
	0x031F6AF0 TBZ X0, 0x0, 0x31F6B7C
	0x031F6AF4 ADD W23, W23, 0x1
	0x031F6AF8 CMP W22, W23
	0x031F6AFC B.NE 0x31F6AB8
	0x031F6B00 B 0x31F6B84
	0x031F6B04 ADRP X8, 0xF2A000
	0x031F6B08 LDR X8, [X8 + 0xCB8]
	0x031F6B0C LDR X0, [X8]
	0x031F6B10 BL 0x1C16F10
	0x031F6B14 MOV X1, X31
	0x031F6B18 MOV X21, X0
	0x031F6B1C BL 0x3351EFC
	0x031F6B20 STR X21, [X19 + 0x28]
	0x031F6B24 CBZ X20, 0x31F6BA0
	0x031F6B28 MOV X0, X20
	0x031F6B2C BL 0x31F6064
	0x031F6B30 MOV X21, X20
	0x031F6B34 TBNZ X0, 0x0, 0x31F6BA4
	0x031F6B38 MOV X22, X20
	0x031F6B3C LDR X0, [X19 + 0x28]
	0x031F6B40 CBZ X0, 0x31F6CF8
	0x031F6B44 MOV X1, X22
	0x031F6B48 MOV X21, X22
	0x031F6B4C BL 0x31EA848
	0x031F6B50 MOV X0, X19
	0x031F6B54 MOV X1, X22
	0x031F6B58 BL 0x31F6DD0
	0x031F6B5C CBZ X0, 0x31F6BA4
	0x031F6B60 MOV X22, X0
	0x031F6B64 BL 0x31F6064
	0x031F6B68 TBZ X0, 0x0, 0x31F6B3C
	0x031F6B6C B 0x31F6BA4
	0x031F6B70 MOV X0, X19
	0x031F6B74 MOV X1, X20
	0x031F6B78 B 0x31F6BAC
	0x031F6B7C CMP W23, W22
	0x031F6B80 B.NE 0x31F6BB4
	0x031F6B84 LDR X0, [X19 + 0x28]
	0x031F6B88 CBZ X0, 0x31F6CF8
	0x031F6B8C MOV W1, W21
	0x031F6B90 BL 0x31F6228
	0x031F6B94 MOV X1, X0
	0x031F6B98 MOV X0, X19
	0x031F6B9C B 0x31F6BAC
	0x031F6BA0 MOV X21, X31
	0x031F6BA4 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11E7000
	007 Move W8, [X20+427]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {54}
	013 Move X0, 0xF2B000
	014 Move X0, [X0+2968]
	015 Call 0x1C17CF4
	016 Move X0, 0xEFE000
	017 Move X0, [X0+1560]
	018 Call 0x1C17CF4
	019 Move X0, 0xEFE000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move X0, 0xF2C000
	023 Move X0, [X0+424]
	024 Call 0x1C17CF4
	025 Move X0, 0xF2C000
	026 Move X0, [X0+432]
	027 Call 0x1C17CF4
	028 Move X0, 0xF2C000
	029 Move X0, [X0+440]
	030 Call 0x1C17CF4
	031 Move X0, 0xF2C000
	032 Move X0, [X0+448]
	033 Call 0x1C17CF4
	034 Move X0, 0xF2C000
	035 Move X0, [X0+304]
	036 Call 0x1C17CF4
	037 Move X0, 0xF2C000
	038 Move X0, [X0+456]
	039 Call 0x1C17CF4
	040 Move X0, 0xF2C000
	041 Move X0, [X0+464]
	042 Call 0x1C17CF4
	043 Move X0, 0xF2C000
	044 Move X0, [X0+472]
	045 Call 0x1C17CF4
	046 Move X0, 0xF2C000
	047 Move X0, [X0+480]
	048 Call 0x1C17CF4
	049 Move X0, 0xF2C000
	050 Move X0, [X0+488]
	051 Call 0x1C17CF4
	052 Move W8, 1
	053 Move [X20+427], W8
	054 Move X8, [X19+104]
	055 Compare X8, 0
	056 JumpIfEqual {240}
	057 Move X20, [X19+112]
	058 Move X22, 0xEFE000
	059 Move X22, [X22+1560]
	060 Move X1, X31
	061 Move X0, X20
	062 Call <PrivateImplementationDetails>.ComputeStringHash, X0
	063 Move W8, 0x999D
	064 NotImplemented "Instruction MOVK not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move W8, 0x8E98
	067 NotImplemented "Instruction MOVK not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W8, 0xBEEE
	070 NotImplemented "Instruction MOVK not yet implemented."
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move W8, 0x8E98
	073 NotImplemented "Instruction MOVK not yet implemented."
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X8, 0xF2C000
	076 Move X8, [X8+432]
	077 Move W8, 0x4B4F
	078 NotImplemented "Instruction MOVK not yet implemented."
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move W8, 0xA1D8
	081 NotImplemented "Instruction MOVK not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X8, 0xF2C000
	084 Move X8, [X8+488]
	085 Move W8, 0x902B
	086 NotImplemented "Instruction MOVK not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move W8, 0x980A
	089 NotImplemented "Instruction MOVK not yet implemented."
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move W8, 0x999D
	092 NotImplemented "Instruction MOVK not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X8, 0xF2C000
	095 Move X8, [X8+456]
	096 Move W8, 0x4CE2
	097 NotImplemented "Instruction MOVK not yet implemented."
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move W8, 0x4E75
	100 NotImplemented "Instruction MOVK not yet implemented."
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move W8, 0xECD7
	103 NotImplemented "Instruction MOVK not yet implemented."
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X8, 0xF2C000
	106 Move X8, [X8+424]
	107 Move X8, 0xF2C000
	108 Move X8, [X8+304]
	109 Move X0, X20
	110 Move X2, X31
	111 Move X1, [X8]
	112 Call String.op_Equality, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfNotEqual {248}
	117 Move X8, 0xF2B000
	118 Move X20, [X19+104]
	119 Move X8, [X8+2968]
	120 Move X0, [X8]
	121 Call 0x1C17F10
	122 Move X1, X20
	123 Move X19, X0
	124 Call ASN1..ctor, X0, X1
	125 Compare X19, 0
	126 JumpIfEqual {241}
	127 Move X0, [X19+32]
	128 Compare X0, 0
	129 JumpIfEqual {240}
	130 Move X8, [X0]
	131 Move X9, [X8+664]
	132 Move X1, [X8+672]
	133 NotImplemented "Instruction BLR not yet implemented."
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move X0, X19
	136 Move W1, W31
	137 Call ASN1.get_Item, X0, X1
	138 Compare X0, 0
	139 JumpIfEqual {270}
	140 Call ASN1.get_Value, X0
	141 Move X21, X0
	142 Move W1, 1
	143 Move X0, X19
	144 Call ASN1.get_Item, X0, X1
	145 Compare X0, 0
	146 JumpIfEqual {270}
	147 Call ASN1.get_Value, X0
	148 Move X8, [X22]
	149 Move X20, X0
	150 Move W1, 40
	151 Move X0, X8
	152 Call 0x1C17D6C
	153 Compare X21, 0
	154 JumpIfEqual {270}
	155 Move X8, 0xEFE000
	156 Move X8, [X8+1448]
	157 Move X19, X0
	158 Move X0, [X8]
	159 Move W8, [X0+224]
	160 Compare W8, 0
	161 JumpIfNotEqual {163}
	162 Call 0x1C17DFC
	163 Move W8, [X21+24]
	164 Move W0, W31
	165 Move X2, X31
	166 Subtract W1, W8, 20
	167 Call Math.Max, X0, X1
	168 Move W8, [X21+24]
	169 Move W9, 20
	170 Move W22, W0
	171 Move W0, W31
	172 Subtract W1, W9, W8
	173 Move X2, X31
	174 Call Math.Max, X0, X1
	175 Move W8, [X21+24]
	176 Move W3, W0
	177 Move X0, X21
	178 Move W1, W22
	179 Subtract W4, W8, W22
	180 Move X2, X19
	181 Move X5, X31
	182 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	183 Compare X20, 0
	184 JumpIfEqual {270}
	185 Move W8, [X20+24]
	186 Move W0, W31
	187 Move X2, X31
	188 Subtract W1, W8, 20
	189 Call Math.Max, X0, X1
	190 Move W8, [X20+24]
	191 Move W9, 40
	192 Move W21, W0
	193 Move W0, 20
	194 Subtract W1, W9, W8
	195 Move X2, X31
	196 Call Math.Max, X0, X1
	197 Move W8, [X20+24]
	198 Move W3, W0
	199 Move X0, X20
	200 Move W1, W21
	201 Subtract W4, W8, W21
	202 Move X2, X19
	203 Move X5, X31
	204 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	205 Move X8, 0xF2C000
	206 Move X8, [X8+440]
	207 Move X8, 0xF2C000
	208 Move X8, [X8+472]
	209 Move X8, 0xF2C000
	210 Move X8, [X8+480]
	211 Move X8, 0xF2C000
	212 Move X8, [X8+448]
	213 Move X8, 0xF2C000
	214 Move X8, [X8+464]
	215 Move X1, [X8]
	216 Move X0, X20
	217 Move X2, X31
	218 Call String.op_Equality, X0, X1
	219 Move TEMP, X0
	220 And TEMP, TEMP, 1
	221 Compare TEMP, 1
	222 JumpIfNotEqual {248}
	223 Move X0, [X19+104]
	224 Compare X0, 0
	225 JumpIfEqual {270}
	226 Move X1, X31
	227 Call Array.Clone, X0
	228 Compare X0, 0
	229 JumpIfEqual {240}
	230 Move X21, [X22]
	231 Move X20, X0
	232 Move X1, X21
	233 Call 0x1C17E00
	234 Move X19, X0
	235 Compare X0, 0
	236 JumpIfNotEqual {241}
	237 Move X0, X20
	238 Move X1, X21
	239 Call 0x1C181E0
	240 Move X19, X31
	241 Move X0, X19
	242 Move X20, [X31+32]
	243 Move X19, [X31+40]
	244 Move X22, [X31+16]
	245 Move X21, [X31+24]
	246 Move X30, [X31+48]
	247 Return X0
	248 Move X0, 0xF2C000
	249 Move X19, [X19+112]
	250 Move X0, [X0+320]
	251 Call 0x1C17D08
	252 Move X1, X19
	253 Move X2, X31
	254 Call String.Concat, X0, X1
	255 Move X19, X0
	256 Move X0, 0xF2B000
	257 Move X0, [X0+3296]
	258 Call 0x1C17D08
	259 Call 0x1C17F10
	260 Move X1, X19
	261 Move X2, X31
	262 Move X20, X0
	263 Call CryptographicException..ctor, X0, X1
	264 Move X0, 0xF2C000
	265 Move X0, [X0+496]
	266 Call 0x1C17D08
	267 Move X1, X0
	268 Move X0, X20
	269 Call 0x1C17DEC
	270 Call 0x1C17F20

Method: System.String get_SubjectName()

Disassembly:
	0x031F6BA8 MOV X1, X21
	0x031F6BAC BL 0x31F6FAC

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.DateTime get_ValidFrom()

Disassembly:
	0x031F6BB0 STR X0, [X19 + 0x20]
	0x031F6BB4 LDR X0, [X19 + 0x28]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.DateTime get_ValidUntil()

Disassembly:
	0x031F6BB8 CBZ X0, 0x31F6BC4
	0x031F6BBC LDR W8, [X19 + 0x30]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Int32 get_Version()

Disassembly:
	0x031F6BC0 CBZ W8, 0x31F6BE4
	0x031F6BC4 LDR W8, [X19 + 0x30]

ISIL:
	001 Move W0, [X0+152]
	002 Return X0

Method: System.Boolean get_IsCurrent()

Disassembly:
	0x031F6BC8 CMP W8, 0x0
	0x031F6BCC CSET W0, EQ
	0x031F6BD0 LDP X20, X19, [X31 + 0x30]
	0x031F6BD4 LDP X22, X21, [X31 + 0x20]
	0x031F6BD8 LDP X24, X23, [X31 + 0x10]
	0x031F6BDC LDR X30, [X31], #0x40
	0x031F6BE0 RET
	0x031F6BE4 BL 0x31EDE74
	0x031F6BE8 MOV X22, X0
	0x031F6BEC CBZ X0, 0x31F6CFC
	0x031F6BF0 MOV X0, X22
	0x031F6BF4 BL 0x31EE254
	0x031F6BF8 TBZ X0, 0x0, 0x31F6C20
	0x031F6BFC MOV X0, X22
	0x031F6C00 BL 0x31EDECC
	0x031F6C04 MOV X1, X0
	0x031F6C08 MOV X0, X19
	0x031F6C0C BL 0x31F7338
	0x031F6C10 TBNZ X0, 0x0, 0x31F6BF0
	0x031F6C14 MOV X21, X31
	0x031F6C18 MOVZ W23, 0xE
	0x031F6C1C B 0x31F6C28
	0x031F6C20 MOV X21, X31
	0x031F6C24 MOVZ W23, 0xF

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11E7000
	006 Move X21, 0xEFF000
	007 Move W8, [X20+428]
	008 Move X21, [X21+2544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEFF000
	015 Move X0, [X0+2544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+428], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call DateTime.get_UtcNow
	026 Move X1, X0
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]

Method: System.Boolean WasCurrent(System.DateTime instant)

Disassembly:
	0x031F6C28 ADRP X24, 0xEFD000
	0x031F6C2C LDR X24, [X24 + 0xE00]
	0x031F6C30 MOV X0, X22
	0x031F6C34 LDR X1, [X24]
	0x031F6C38 BL 0x1C16E00
	0x031F6C3C CBZ X0, 0x31F6C9C
	0x031F6C40 LDR X8, [X0]
	0x031F6C44 LDR X1, [X24]
	0x031F6C48 MOV X22, X0
	0x031F6C4C LDRH W9, [X8 + 0x12E]
	0x031F6C50 CBZ X9, 0x31F6C74
	0x031F6C54 LDR X10, [X8 + 0xB0]
	0x031F6C58 ADD X10, X10, 0x8
	0x031F6C5C LDUR X11, [X10 - 0x8]
	0x031F6C60 CMP X11, X1
	0x031F6C64 B.EQ 0x31F6C84
	0x031F6C68 SUBS X9, X9, 0x1
	0x031F6C6C ADD X10, X10, 0x10
	0x031F6C70 B.NE 0x31F6C5C
	0x031F6C74 MOV X0, X22
	0x031F6C78 MOV W2, W31
	0x031F6C7C BL 0x1C5C788
	0x031F6C80 B 0x31F6C90
	0x031F6C84 LDRSW X9, [X10]
	0x031F6C88 ADD X8, X8, X9, 0x4, LSL
	0x031F6C8C ADD X0, X8, 0x138
	0x031F6C90 LDP X8, X1, [X0]
	0x031F6C94 MOV X0, X22
	0x031F6C98 BLR X8
	0x031F6C9C CBNZ X21, 0x31F6D00
	0x031F6CA0 CMP W23, 0xF
	0x031F6CA4 B.EQ 0x31F6CAC
	0x031F6CA8 CBNZ W23, 0x31F6CF0
	0x031F6CAC MOV X0, X19
	0x031F6CB0 MOV X1, X20
	0x031F6CB4 BL 0x31F7338
	0x031F6CB8 TBZ X0, 0x0, 0x31F6CD4
	0x031F6CBC LDR X1, [X19 + 0x20]
	0x031F6CC0 CBZ X1, 0x31F6BC4
	0x031F6CC4 MOV X0, X19
	0x031F6CC8 BL 0x31F7338
	0x031F6CCC TBNZ X0, 0x0, 0x31F6BC4
	0x031F6CD0 B 0x31F6CF0
	0x031F6CD4 LDR W8, [X19 + 0x30]
	0x031F6CD8 CMP W8, 0x2
	0x031F6CDC B.NE 0x31F6CF0
	0x031F6CE0 MOVZ W8, 0x1
	0x031F6CE4 MOV W0, W31
	0x031F6CE8 STR W8, [X19 + 0x30]
	0x031F6CEC B 0x31F6BD0
	0x031F6CF0 MOV W0, W31
	0x031F6CF4 B 0x31F6BD0
	0x031F6CF8 BL 0x1C16F20
	0x031F6CFC BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11E7000
	007 Move X22, 0xEFF000
	008 Move W8, [X21+429]
	009 Move X22, [X22+2544]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEFF000
	017 Move X0, [X0+2544]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+429], W8
	021 Move X8, [X20]
	022 Move X0, X20
	023 Move X9, [X8+568]
	024 Move X1, [X8+576]
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Move X8, [X22]
	027 Move X21, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X19
	034 Move X1, X21
	035 Move X2, X31
	036 Call DateTime.op_GreaterThan, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {63}
	041 Move X8, [X20]
	042 Move X0, X20
	043 Move X9, [X8+584]
	044 Move X1, [X8+592]
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move X8, [X22]
	047 Move X20, X0
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {53}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 Move X0, X19
	054 Move X1, X20
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X2, X31
	060 Move X30, [X31+48]
	061 Call DateTime.op_LessThanOrEqual, X0, X1
	062 Return X0
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move W0, W31
	068 Move X30, [X31+48]
	069 Return X0

Method: System.Boolean VerifySignature(System.Security.Cryptography.DSA dsa)

Disassembly:
	0x031F6D00 MOV X0, X21
	0x031F6D04 BL 0x1C16F18
	0x031F6D08 B 0x31F6D14
	0x031F6D0C B 0x31F6D14
	0x031F6D10 B 0x31F6D14
	0x031F6D14 MOV X23, X0
	0x031F6D18 CMP W1, 0x1
	0x031F6D1C B.NE 0x31F6D38
	0x031F6D20 MOV X0, X23
	0x031F6D24 BL 0x3EB1AD0
	0x031F6D28 LDR X21, [X0]
	0x031F6D2C BL 0x3EB1AE0
	0x031F6D30 MOV W23, W31
	0x031F6D34 B 0x31F6C28
	0x031F6D38 MOV X21, X31
	0x031F6D3C B 0x31F6D44
	0x031F6D40 MOV X23, X0
	0x031F6D44 ADRP X20, 0xEFD000
	0x031F6D48 LDR X20, [X20 + 0xE00]
	0x031F6D4C LDR X1, [X20]
	0x031F6D50 MOV X0, X22
	0x031F6D54 BL 0x1C16E00
	0x031F6D58 MOV X19, X0
	0x031F6D5C CBZ X0, 0x31F6DB8
	0x031F6D60 LDR X8, [X19]
	0x031F6D64 LDR X1, [X20]
	0x031F6D68 LDRH W9, [X8 + 0x12E]
	0x031F6D6C CBZ X9, 0x31F6D90
	0x031F6D70 LDR X10, [X8 + 0xB0]
	0x031F6D74 ADD X10, X10, 0x8
	0x031F6D78 LDUR X11, [X10 - 0x8]
	0x031F6D7C CMP X11, X1
	0x031F6D80 B.EQ 0x31F6DA0
	0x031F6D84 SUBS X9, X9, 0x1
	0x031F6D88 ADD X10, X10, 0x10
	0x031F6D8C B.NE 0x31F6D78
	0x031F6D90 MOV X0, X19
	0x031F6D94 MOV W2, W31
	0x031F6D98 BL 0x1C5C788
	0x031F6D9C B 0x31F6DAC
	0x031F6DA0 LDRSW X9, [X10]
	0x031F6DA4 ADD X8, X8, X9, 0x4, LSL
	0x031F6DA8 ADD X0, X8, 0x138
	0x031F6DAC LDP X8, X1, [X0]
	0x031F6DB0 MOV X0, X19
	0x031F6DB4 BLR X8
	0x031F6DB8 CBNZ X21, 0x31F6DC4
	0x031F6DBC MOV X0, X23
	0x031F6DC0 BL 0x1D2C690
	0x031F6DC4 MOV X0, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11E7000
	007 Move X22, 0xF2C000
	008 Move W8, [X20+430]
	009 Move X22, [X22+312]
	010 Move X21, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xF2C000
	017 Move X0, [X0+312]
	018 Call 0x1C17CF4
	019 Move X0, 0xF2B000
	020 Move X0, [X0+3392]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+430], W8
	024 Move X0, [X22]
	025 Call 0x1C17F10
	026 Move X1, X21
	027 Move X2, X31
	028 Move X20, X0
	029 Call DSASignatureDeformatter..ctor, X0, X1
	030 Compare X20, 0
	031 JumpIfEqual {60}
	032 Move X9, 0xF2B000
	033 Move X8, [X20]
	034 Move X9, [X9+3392]
	035 Move X0, X20
	036 Move X1, [X9]
	037 Move X9, [X8+392]
	038 Move X2, [X8+400]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move X0, X19
	041 Call X509Certificate.get_Hash, X0
	042 Move X8, [X19]
	043 Move X21, X0
	044 Move X0, X19
	045 Move X9, [X8+536]
	046 Move X1, [X8+544]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move X8, [X20]
	049 Move X2, X0
	050 Move X0, X20
	051 Move X1, X21
	052 Move X4, [X8+408]
	053 Move X3, [X8+416]
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 CallNoReturn X4
	060 Call 0x1C17F20

Method: System.Boolean VerifySignature(System.Security.Cryptography.RSA rsa)

Disassembly:
	0x031F6DC8 BL 0x1C16F18
	0x031F6DCC BL 0x1990590
	0x031F6DD0 STP X30, X23, [X31 - 0x30]!
	0x031F6DD4 STP X22, X21, [X31 + 0x10]
	0x031F6DD8 STP X20, X19, [X31 + 0x20]
	0x031F6DDC ADRP X20, 0x11E6000
	0x031F6DE0 LDRB W8, [X20 + 0x1C1]
	0x031F6DE4 MOV X19, X1
	0x031F6DE8 MOV X22, X0
	0x031F6DEC TBNZ X8, 0x0, 0x31F6E04
	0x031F6DF0 ADRP X0, 0xEFD000
	0x031F6DF4 LDR X0, [X0 + 0xE00]
	0x031F6DF8 BL 0x1C16CF4
	0x031F6DFC MOVZ W8, 0x1
	0x031F6E00 STRB W8, [X20 + 0x1C1]
	0x031F6E04 LDR X0, [X22 + 0x18]
	0x031F6E08 CBZ X0, 0x31F6EE0
	0x031F6E0C ADRP X23, 0xEFD000
	0x031F6E10 LDR X23, [X23 + 0xE00]
	0x031F6E14 BL 0x31EDE74
	0x031F6E18 MOV X20, X0
	0x031F6E1C CBZ X0, 0x31F6EE4
	0x031F6E20 MOV X0, X20
	0x031F6E24 BL 0x31EE254
	0x031F6E28 TBZ X0, 0x0, 0x31F6E54
	0x031F6E2C MOV X0, X20
	0x031F6E30 BL 0x31EDECC
	0x031F6E34 MOV X21, X0
	0x031F6E38 MOV X0, X22
	0x031F6E3C MOV X1, X19
	0x031F6E40 MOV X2, X21
	0x031F6E44 BL 0x31F71F4
	0x031F6E48 TBZ X0, 0x0, 0x31F6E20
	0x031F6E4C MOV X19, X31
	0x031F6E50 B 0x31F6E5C
	0x031F6E54 MOV X19, X31
	0x031F6E58 MOV X21, X31
	0x031F6E5C LDR X1, [X23]
	0x031F6E60 MOV X0, X20
	0x031F6E64 BL 0x1C16E00
	0x031F6E68 CBZ X0, 0x31F6EC8
	0x031F6E6C LDR X8, [X0]
	0x031F6E70 LDR X1, [X23]
	0x031F6E74 MOV X20, X0
	0x031F6E78 LDRH W9, [X8 + 0x12E]
	0x031F6E7C CBZ X9, 0x31F6EA0
	0x031F6E80 LDR X10, [X8 + 0xB0]
	0x031F6E84 ADD X10, X10, 0x8
	0x031F6E88 LDUR X11, [X10 - 0x8]
	0x031F6E8C CMP X11, X1
	0x031F6E90 B.EQ 0x31F6EB0
	0x031F6E94 SUBS X9, X9, 0x1
	0x031F6E98 ADD X10, X10, 0x10
	0x031F6E9C B.NE 0x31F6E88
	0x031F6EA0 MOV X0, X20
	0x031F6EA4 MOV W2, W31
	0x031F6EA8 BL 0x1C5C788
	0x031F6EAC B 0x31F6EBC
	0x031F6EB0 LDRSW X9, [X10]
	0x031F6EB4 ADD X8, X8, X9, 0x4, LSL
	0x031F6EB8 ADD X0, X8, 0x138
	0x031F6EBC LDP X8, X1, [X0]
	0x031F6EC0 MOV X0, X20
	0x031F6EC4 BLR X8
	0x031F6EC8 CBNZ X19, 0x31F6EE8
	0x031F6ECC MOV X0, X21
	0x031F6ED0 LDP X20, X19, [X31 + 0x20]
	0x031F6ED4 LDP X22, X21, [X31 + 0x10]
	0x031F6ED8 LDP X30, X23, [X31], #0x30
	0x031F6EDC RET
	0x031F6EE0 BL 0x1C16F20
	0x031F6EE4 BL 0x1C16F20
	0x031F6EE8 MOV X0, X19
	0x031F6EEC BL 0x1C16F18

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x11E7000
	007 Move X20, 0xF2C000
	008 Move W8, [X22+431]
	009 Move X20, [X20+304]
	010 Move X21, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xF2B000
	017 Move X0, [X0+3976]
	018 Call 0x1C17CF4
	019 Move X0, 0xF2C000
	020 Move X0, [X0+336]
	021 Call 0x1C17CF4
	022 Move X0, 0xF2C000
	023 Move X0, [X0+304]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+431], W8
	027 Move X0, [X19+112]
	028 Move X1, [X20]
	029 Move X2, X31
	030 Call String.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {42}
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move W0, W31
	040 Move X30, [X31+48]
	041 Return X0
	042 Move X8, 0xF2C000
	043 Move X8, [X8+336]
	044 Move X0, [X8]
	045 Call 0x1C17F10
	046 Move X1, X21
	047 Move X2, X31
	048 Move X20, X0
	049 Call RSAPKCS1SignatureDeformatter..ctor, X0, X1
	050 Move X8, 0xF2B000
	051 Move X8, [X8+3976]
	052 Move X21, [X19+112]
	053 Move X0, [X8]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move W1, 1
	059 Move X0, X21
	060 Move X2, X31
	061 Call PKCS1.HashNameFromOid, X0, X1
	062 Compare X20, 0
	063 JumpIfEqual {90}
	064 Move X8, [X20]
	065 Move X1, X0
	066 Move X0, X20
	067 Move X9, [X8+392]
	068 Move X2, [X8+400]
	069 NotImplemented "Instruction BLR not yet implemented."
	070 Move X0, X19
	071 Call X509Certificate.get_Hash, X0
	072 Move X8, [X19]
	073 Move X21, X0
	074 Move X0, X19
	075 Move X9, [X8+536]
	076 Move X1, [X8+544]
	077 NotImplemented "Instruction BLR not yet implemented."
	078 Move X8, [X20]
	079 Move X2, X0
	080 Move X0, X20
	081 Move X1, X21
	082 Move X4, [X8+408]
	083 Move X3, [X8+416]
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X22, [X31+16]
	087 Move X21, [X31+24]
	088 Move X30, [X31+48]
	089 CallNoReturn X4
	090 Call 0x1C17F20

Method: System.Boolean VerifySignature(System.Security.Cryptography.AsymmetricAlgorithm aa)

Disassembly:
	0x031F6EF0 B 0x31F6EFC
	0x031F6EF4 B 0x31F6EFC
	0x031F6EF8 B 0x31F6EFC
	0x031F6EFC MOV X21, X0
	0x031F6F00 CMP W1, 0x1
	0x031F6F04 B.NE 0x31F6F1C
	0x031F6F08 MOV X0, X21
	0x031F6F0C BL 0x3EB1AD0
	0x031F6F10 LDR X19, [X0]
	0x031F6F14 BL 0x3EB1AE0
	0x031F6F18 B 0x31F6E58
	0x031F6F1C MOV X19, X31
	0x031F6F20 B 0x31F6F28
	0x031F6F24 MOV X21, X0
	0x031F6F28 LDR X1, [X23]
	0x031F6F2C MOV X0, X20
	0x031F6F30 BL 0x1C16E00
	0x031F6F34 MOV X20, X0
	0x031F6F38 CBZ X0, 0x31F6F94
	0x031F6F3C LDR X8, [X20]
	0x031F6F40 LDR X1, [X23]
	0x031F6F44 LDRH W9, [X8 + 0x12E]
	0x031F6F48 CBZ X9, 0x31F6F6C
	0x031F6F4C LDR X10, [X8 + 0xB0]
	0x031F6F50 ADD X10, X10, 0x8
	0x031F6F54 LDUR X11, [X10 - 0x8]
	0x031F6F58 CMP X11, X1
	0x031F6F5C B.EQ 0x31F6F7C
	0x031F6F60 SUBS X9, X9, 0x1
	0x031F6F64 ADD X10, X10, 0x10
	0x031F6F68 B.NE 0x31F6F54
	0x031F6F6C MOV X0, X20
	0x031F6F70 MOV W2, W31
	0x031F6F74 BL 0x1C5C788
	0x031F6F78 B 0x31F6F88
	0x031F6F7C LDRSW X9, [X10]
	0x031F6F80 ADD X8, X8, X9, 0x4, LSL
	0x031F6F84 ADD X0, X8, 0x138
	0x031F6F88 LDP X8, X1, [X0]
	0x031F6F8C MOV X0, X20
	0x031F6F90 BLR X8
	0x031F6F94 CBNZ X19, 0x31F6FA0
	0x031F6F98 MOV X0, X21
	0x031F6F9C BL 0x1D2C690
	0x031F6FA0 MOV X0, X19
	0x031F6FA4 BL 0x1C16F18
	0x031F6FA8 BL 0x1990590
	0x031F6FAC STP X30, X25, [X31 - 0x40]!
	0x031F6FB0 STP X24, X23, [X31 + 0x10]
	0x031F6FB4 STP X22, X21, [X31 + 0x20]
	0x031F6FB8 STP X20, X19, [X31 + 0x30]
	0x031F6FBC ADRP X21, 0x11E6000
	0x031F6FC0 LDRB W8, [X21 + 0x1C2]
	0x031F6FC4 MOV X19, X1
	0x031F6FC8 MOV X20, X0
	0x031F6FCC TBNZ X8, 0x0, 0x31F6FE4
	0x031F6FD0 ADRP X0, 0xEFD000
	0x031F6FD4 LDR X0, [X0 + 0xE00]
	0x031F6FD8 BL 0x1C16CF4
	0x031F6FDC MOVZ W8, 0x1
	0x031F6FE0 STRB W8, [X21 + 0x1C2]
	0x031F6FE4 CBZ X19, 0x31F70F4
	0x031F6FE8 MOV X0, X20
	0x031F6FEC MOV X1, X19
	0x031F6FF0 BL 0x31F7424
	0x031F6FF4 TBNZ X0, 0x0, 0x31F70EC
	0x031F6FF8 MOV X0, X20
	0x031F6FFC BL 0x31F68C4
	0x031F7000 CBZ X0, 0x31F7118
	0x031F7004 BL 0x31EDE74
	0x031F7008 MOV X22, X0
	0x031F700C CBZ X0, 0x31F711C
	0x031F7010 MOV X0, X22
	0x031F7014 BL 0x31EE254
	0x031F7018 TBZ X0, 0x0, 0x31F7048
	0x031F701C MOV X0, X22
	0x031F7020 BL 0x31EDECC
	0x031F7024 MOV X23, X0
	0x031F7028 MOV X0, X20
	0x031F702C MOV X1, X19
	0x031F7030 MOV X2, X23
	0x031F7034 BL 0x31F71F4
	0x031F7038 TBZ X0, 0x0, 0x31F7010
	0x031F703C MOV X21, X31
	0x031F7040 MOVZ W24, 0x6
	0x031F7044 B 0x31F7054
	0x031F7048 MOV X21, X31
	0x031F704C MOV X23, X31
	0x031F7050 MOVZ W24, 0x7
	0x031F7054 ADRP X25, 0xEFC000
	0x031F7058 LDR X25, [X25 + 0xE00]
	0x031F705C MOV X0, X22
	0x031F7060 LDR X1, [X25]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11E7000
	006 Move W8, [X21+432]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xF2C000
	014 Move X0, [X0+344]
	015 Call 0x1C17CF4
	016 Move X0, 0xF2C000
	017 Move X0, [X0+352]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+432], W8
	021 Compare X19, 0
	022 JumpIfEqual {85}
	023 Move X9, 0xF2C000
	024 Move X9, [X9+352]
	025 Move X8, [X19]
	026 Move X10, [X9]
	027 Move W9, [X8+304]
	028 Move W11, [X10+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X12, [X8+200]
	031 Add X11, X12, X11
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X10, 0xF2C000
	035 Move X10, [X10+344]
	036 Move X10, [X10]
	037 Move W11, [X10+304]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X9, [X8+200]
	040 Add X9, X9, X11
	041 NotImplemented "Instruction LDUR not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, X20
	044 Move X1, X19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call X509Certificate.VerifySignature, X0, X1
	050 Return X0
	051 Move X0, X20
	052 Move X1, X19
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Call X509Certificate.VerifySignature, X0, X1
	058 Return X0
	059 Move X9, [X8+360]
	060 Move X1, [X8+368]
	061 Move X0, X19
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Move X19, X0
	064 Move X0, 0xF2C000
	065 Move X0, [X0+360]
	066 Call 0x1C17D08
	067 Move X1, X19
	068 Move X2, X31
	069 Call String.Concat, X0, X1
	070 Move X19, X0
	071 Move X0, 0xEFE000
	072 Move X0, [X0+2880]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X1, X19
	076 Move X2, X31
	077 Move X20, X0
	078 Call NotSupportedException..ctor, X0, X1
	079 Move X0, 0xF2B000
	080 Move X0, [X0+504]
	081 Call 0x1C17D08
	082 Move X1, X0
	083 Move X0, X20
	084 Call 0x1C17DEC
	085 Move X0, 0xF02000
	086 Move X0, [X0+1320]
	087 Call 0x1C17D08
	088 Call 0x1C17F10
	089 Move X19, X0
	090 Move X0, 0xF2B000
	091 Move X0, [X0+376]
	092 Call 0x1C17D08
	093 Move X1, X0
	094 Move X0, X19
	095 Move X2, X31
	096 Call ArgumentNullException..ctor, X0, X1
	097 Move X0, 0xF2B000
	098 Move X0, [X0+504]
	099 Call 0x1C17D08
	100 Move X1, X0
	101 Move X0, X19
	102 Call 0x1C17DEC

Method: System.Boolean get_IsSelfSigned()

Disassembly:
	0x031F7064 BL 0x1C16E00
	0x031F7068 CBZ X0, 0x31F70C8
	0x031F706C LDR X8, [X0]
	0x031F7070 LDR X1, [X25]
	0x031F7074 MOV X22, X0
	0x031F7078 LDRH W9, [X8 + 0x12E]
	0x031F707C CBZ X9, 0x31F70A0
	0x031F7080 LDR X10, [X8 + 0xB0]
	0x031F7084 ADD X10, X10, 0x8
	0x031F7088 LDUR X11, [X10 - 0x8]
	0x031F708C CMP X11, X1
	0x031F7090 B.EQ 0x31F70B0
	0x031F7094 SUBS X9, X9, 0x1
	0x031F7098 ADD X10, X10, 0x10
	0x031F709C B.NE 0x31F7088
	0x031F70A0 MOV X0, X22
	0x031F70A4 MOV W2, W31
	0x031F70A8 BL 0x1C5C788
	0x031F70AC B 0x31F70BC
	0x031F70B0 LDRSW X9, [X10]
	0x031F70B4 ADD X8, X8, X9, 0x4, LSL
	0x031F70B8 ADD X0, X8, 0x138
	0x031F70BC LDP X8, X1, [X0]
	0x031F70C0 MOV X0, X22
	0x031F70C4 BLR X8
	0x031F70C8 CBNZ X21, 0x31F7120
	0x031F70CC CMP W24, 0x7
	0x031F70D0 B.EQ 0x31F70D8
	0x031F70D4 CBNZ W24, 0x31F7100
	0x031F70D8 MOV X0, X19
	0x031F70DC BL 0x31F6064
	0x031F70E0 TBZ X0, 0x0, 0x31F70F4
	0x031F70E4 MOVZ W8, 0x20
	0x031F70E8 STR W8, [X20 + 0x30]
	0x031F70EC MOV X23, X19
	0x031F70F0 B 0x31F7100
	0x031F70F4 MOV X23, X31
	0x031F70F8 MOVZ W8, 0x10000
	0x031F70FC STR W8, [X20 + 0x30]
	0x031F7100 MOV X0, X23
	0x031F7104 LDP X20, X19, [X31 + 0x30]
	0x031F7108 LDP X22, X21, [X31 + 0x20]
	0x031F710C LDP X24, X23, [X31 + 0x10]
	0x031F7110 LDP X30, X25, [X31], #0x40
	0x031F7114 RET
	0x031F7118 BL 0x1C16F20
	0x031F711C BL 0x1C16F20
	0x031F7120 MOV X0, X21
	0x031F7124 BL 0x1C16F18
	0x031F7128 B 0x31F7134
	0x031F712C B 0x31F7134
	0x031F7130 B 0x31F7134
	0x031F7134 MOV X23, X0
	0x031F7138 CMP W1, 0x1
	0x031F713C B.NE 0x31F715C
	0x031F7140 MOV X0, X23
	0x031F7144 BL 0x3EB1AD0
	0x031F7148 LDR X21, [X0]
	0x031F714C BL 0x3EB1AE0
	0x031F7150 MOV W24, W31
	0x031F7154 MOV X23, X31
	0x031F7158 B 0x31F7054
	0x031F715C MOV X21, X31
	0x031F7160 B 0x31F7168
	0x031F7164 MOV X23, X0
	0x031F7168 ADRP X20, 0xEFC000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+56]
	005 Move X1, [X19+88]
	006 Move X2, X31
	007 Call String.op_Inequality, X0, X1
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {13}
	012 Move W0, W31
	013 Move X8, [X19]
	014 Move X9, [X8+472]
	015 Move X1, [X8+480]
	016 Move X0, X19
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Compare X0, 0
	019 JumpIfEqual {28}
	020 Move X8, [X19]
	021 Move X9, [X8+472]
	022 Move X1, [X8+480]
	023 Move X0, X19
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X1, X0
	026 Move X0, X19
	027 Call X509Certificate.VerifySignature, X0, X1
	028 Move X0, X19
	029 Call X509Certificate.get_DSA, X0
	030 Compare X0, 0
	031 JumpIfEqual {37}
	032 Move X0, X19
	033 Call X509Certificate.get_DSA, X0
	034 Move X1, X0
	035 Move X0, X19
	036 Call X509Certificate.VerifySignature, X0, X1
	037 And W0, W0, 1
	038 Move X30, [X31+16]
	039 Move X19, [X31+24]
	040 Return X0
	041 Move X19, X0
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, X19
	044 Call 0x3EB2AD0
	045 Move X19, X0
	046 Move X0, 0xF2A000
	047 Move X0, [X0+3296]
	048 Call 0x1C17D08
	049 Move X8, [X19]
	050 Move X1, [X8]
	051 Call 0x1C18270
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {57}
	056 Call 0x3EB2AE0
	057 Move W0, 8
	058 Call 0x3EB2AF0
	059 Move X8, [X19]
	060 Move [X0], X8
	061 Move X1, 0xCBE000
	062 Add X1, X1, 3672
	063 Move X2, X31
	064 Call 0x3EB2B00
	065 Move X19, X0
	066 Call 0x3EB2AE0
	067 Move X0, X19
	068 Call 0x1D2D690
	069 Call 0x1991590

Method: System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x031F716C LDR X20, [X20 + 0xE00]
	0x031F7170 LDR X1, [X20]
	0x031F7174 MOV X0, X22
	0x031F7178 BL 0x1C16E00
	0x031F717C MOV X19, X0
	0x031F7180 CBZ X0, 0x31F71DC
	0x031F7184 LDR X8, [X19]
	0x031F7188 LDR X1, [X20]
	0x031F718C LDRH W9, [X8 + 0x12E]
	0x031F7190 CBZ X9, 0x31F71B4
	0x031F7194 LDR X10, [X8 + 0xB0]
	0x031F7198 ADD X10, X10, 0x8
	0x031F719C LDUR X11, [X10 - 0x8]
	0x031F71A0 CMP X11, X1
	0x031F71A4 B.EQ 0x31F71C4
	0x031F71A8 SUBS X9, X9, 0x1
	0x031F71AC ADD X10, X10, 0x10
	0x031F71B0 B.NE 0x31F719C
	0x031F71B4 MOV X0, X19
	0x031F71B8 MOV W2, W31
	0x031F71BC BL 0x1C5C788
	0x031F71C0 B 0x31F71D0
	0x031F71C4 LDRSW X9, [X10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11E6000
	006 Move W8, [X21+433]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF2B000
	014 Move X0, [X0+512]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+433], W8
	018 Compare X19, 0
	019 JumpIfEqual {32}
	020 Move X8, 0xF2B000
	021 Move X8, [X8+512]
	022 Move X2, [X20+24]
	023 Move X0, X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X1, [X8]
	027 Move X3, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call SerializationInfo.AddValue, X0, X1, X2
	031 Return 
	032 Call 0x1C17F20

Method: System.Byte[] PEM(System.String type, System.Byte[] data)

Disassembly:
	0x031F5F70 LDRB W11, [X10 + 0x130]
	0x031F5F74 CMP W9, W11
	0x031F5F78 B.CC 0x31F5FB8
	0x031F5F7C LDR X9, [X8 + 0xC8]
	0x031F5F80 ADD X9, X9, X11, 0x3, LSL
	0x031F5F84 LDUR X9, [X9 - 0x8]
	0x031F5F88 CMP X9, X10
	0x031F5F8C B.NE 0x31F5FB8
	0x031F5F90 MOV X0, X20
	0x031F5F94 MOV X1, X19
	0x031F5F98 LDP X20, X19, [X31 + 0x10]
	0x031F5F9C LDP X30, X21, [X31], #0x20
	0x031F5FA0 B 0x31F5D00
	0x031F5FA4 MOV X0, X20
	0x031F5FA8 MOV X1, X19
	0x031F5FAC LDP X20, X19, [X31 + 0x10]
	0x031F5FB0 LDP X30, X21, [X31], #0x20
	0x031F5FB4 B 0x31F5DC8
	0x031F5FB8 LDP X9, X1, [X8 + 0x168]
	0x031F5FBC MOV X0, X19
	0x031F5FC0 BLR X9
	0x031F5FC4 MOV X19, X0
	0x031F5FC8 ADRP X0, 0xF2C000
	0x031F5FCC LDR X0, [X0 + 0x168]
	0x031F5FD0 BL 0x1C16D08
	0x031F5FD4 MOV X1, X19
	0x031F5FD8 MOV X2, X31
	0x031F5FDC BL 0x321B938
	0x031F5FE0 MOV X19, X0
	0x031F5FE4 ADRP X0, 0xEFE000
	0x031F5FE8 LDR X0, [X0 + 0xB40]
	0x031F5FEC BL 0x1C16D08
	0x031F5FF0 BL 0x1C16F10
	0x031F5FF4 MOV X1, X19
	0x031F5FF8 MOV X2, X31
	0x031F5FFC MOV X20, X0
	0x031F6000 BL 0x3379A44
	0x031F6004 ADRP X0, 0xF2B000
	0x031F6008 LDR X0, [X0 + 0x1F8]
	0x031F600C BL 0x1C16D08
	0x031F6010 MOV X1, X0
	0x031F6014 MOV X0, X20
	0x031F6018 BL 0x1C16DEC
	0x031F601C ADRP X0, 0xF02000
	0x031F6020 LDR X0, [X0 + 0x528]
	0x031F6024 BL 0x1C16D08
	0x031F6028 BL 0x1C16F10
	0x031F602C MOV X19, X0
	0x031F6030 ADRP X0, 0xF2B000
	0x031F6034 LDR X0, [X0 + 0x178]
	0x031F6038 BL 0x1C16D08
	0x031F603C MOV X1, X0
	0x031F6040 MOV X0, X19
	0x031F6044 MOV X2, X31
	0x031F6048 BL 0x330E100
	0x031F604C ADRP X0, 0xF2B000
	0x031F6050 LDR X0, [X0 + 0x1F8]
	0x031F6054 BL 0x1C16D08
	0x031F6058 MOV X1, X0
	0x031F605C MOV X0, X19
	0x031F6060 BL 0x1C16DEC
	0x031F6064 STP X30, X19, [X31 - 0x10]!
	0x031F6068 MOV X19, X0
	0x031F606C LDR X0, [X0 + 0x38]
	0x031F6070 LDR X1, [X19 + 0x58]
	0x031F6074 MOV X2, X31
	0x031F6078 BL 0x3226EF8
	0x031F607C TBZ X0, 0x0, 0x31F6088
	0x031F6080 MOV W0, W31
	0x031F6084 B 0x31F60DC
	0x031F6088 LDR X8, [X19]
	0x031F608C LDP X9, X1, [X8 + 0x1D8]
	0x031F6090 MOV X0, X19
	0x031F6094 BLR X9
	0x031F6098 CBZ X0, 0x31F60BC
	0x031F609C LDR X8, [X19]
	0x031F60A0 LDP X9, X1, [X8 + 0x1D8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11E8000
	007 Move W8, [X21+434]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xF08000
	015 Move X0, [X0+2536]
	016 Call 0x1C17CF4
	017 Move X0, 0xF2D000
	018 Move X0, [X0+400]
	019 Call 0x1C17CF4
	020 Move X0, 0xF2D000
	021 Move X0, [X0+408]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+434], W8
	025 Move X0, X31
	026 Call Encoding.get_ASCII
	027 Compare X0, 0
	028 JumpIfEqual {89}
	029 Move X8, [X0]
	030 Move X21, 0xF2D000
	031 Move X22, 0xF2D000
	032 Move X1, X20
	033 Move X9, [X8+888]
	034 Move X2, [X8+896]
	035 Move X21, [X21+400]
	036 Move X22, [X22+408]
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X8, [X21]
	039 Move X20, X0
	040 Move X1, X19
	041 Move X2, X31
	042 Move X0, X8
	043 Call String.Format, X0, X1
	044 Move X8, [X22]
	045 Move X21, X0
	046 Move X1, X19
	047 Move X2, X31
	048 Move X0, X8
	049 Call String.Format, X0, X1
	050 Compare X20, 0
	051 JumpIfEqual {89}
	052 Move X19, X0
	053 Move X0, X20
	054 Move X1, X21
	055 Move X2, X31
	056 Call String.IndexOf, X0, X1
	057 Compare X21, 0
	058 JumpIfEqual {89}
	059 Move W8, [X21+16]
	060 Move X22, 0xF07000
	061 Move X22, [X22+2536]
	062 Move X1, X19
	063 Add W21, W8, W0
	064 Move X0, X20
	065 Move W2, W21
	066 Move X3, X31
	067 Call String.IndexOf, X0, X1, X2
	068 Subtract W2, W0, W21
	069 Move X0, X20
	070 Move W1, W21
	071 Move X3, X31
	072 Call String.Substring, X0, X1, X2
	073 Move X8, [X22]
	074 Move X19, X0
	075 Move W9, [X8+224]
	076 Compare W9, 0
	077 JumpIfNotEqual {80}
	078 Move X0, X8
	079 Call 0x1C17DFC
	080 Move X0, X19
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X1, X31
	086 Move X30, [X31+48]
	087 Call Convert.FromBase64String, X0
	088 Return X0
	089 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x031F71C8 ADD X8, X8, X9, 0x4, LSL
	0x031F71CC ADD X0, X8, 0x138
	0x031F71D0 LDP X8, X1, [X0]
	0x031F71D4 MOV X0, X19
	0x031F71D8 BLR X8
	0x031F71DC CBNZ X21, 0x31F71E8
	0x031F71E0 MOV X0, X23
	0x031F71E4 BL 0x1D2C690
	0x031F71E8 MOV X0, X21
	0x031F71EC BL 0x1C16F18
	0x031F71F0 BL 0x1990590
	0x031F71F4 STP X30, X23, [X31 - 0x30]!
	0x031F71F8 STP X22, X21, [X31 + 0x10]
	0x031F71FC STP X20, X19, [X31 + 0x20]
	0x031F7200 ADRP X22, 0x11E5000
	0x031F7204 LDRB W8, [X22 + 0x1C3]
	0x031F7208 MOV X21, X2
	0x031F720C MOV X20, X1
	0x031F7210 MOV X19, X0
	0x031F7214 TBNZ X8, 0x0, 0x31F7238
	0x031F7218 ADRP X0, 0xF2A000
	0x031F721C LDR X0, [X0 + 0x220]
	0x031F7220 BL 0x1C16CF4
	0x031F7224 ADRP X0, 0xF2A000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11E6000
	006 Move X19, 0xF2B000
	007 Move X21, 0xF2A000
	008 Move W8, [X20+435]
	009 Move X19, [X19+520]
	010 Move X21, [X21+3264]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xF2A000
	016 Move X0, [X0+3264]
	017 Call 0x1C17CF4
	018 Move X0, 0xF2B000
	019 Move X0, [X0+520]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+435], W8
	023 Move X8, [X21]
	024 Move X9, [X19]
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X8, [X8+184]
	028 Move [X8], X9
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return 

