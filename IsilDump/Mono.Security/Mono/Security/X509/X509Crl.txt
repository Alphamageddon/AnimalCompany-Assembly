Type: Mono.Security.X509.X509Crl

Method: System.Void .ctor(System.Byte[] crl)

Disassembly:
	0x031F4348 MOV W1, W24
	0x031F434C SUB W4, W8, W24
	0x031F4350 MOV X2, X21
	0x031F4354 MOV X5, X31
	0x031F4358 BL 0x33A8A9C
	0x031F435C CBZ X22, 0x31F43F8
	0x031F4360 LDR W8, [X22 + 0x18]
	0x031F4364 MOV W0, W31
	0x031F4368 MOV X2, X31
	0x031F436C SUB W1, W8, 0x14
	0x031F4370 BL 0x337EDF0
	0x031F4374 LDR W8, [X22 + 0x18]
	0x031F4378 MOVZ W9, 0x28
	0x031F437C MOV W23, W0
	0x031F4380 MOVZ W0, 0x14
	0x031F4384 SUB W1, W9, W8
	0x031F4388 MOV X2, X31
	0x031F438C BL 0x337EDF0
	0x031F4390 LDR W8, [X22 + 0x18]
	0x031F4394 MOV W3, W0
	0x031F4398 MOV X0, X22
	0x031F439C MOV W1, W23
	0x031F43A0 SUB W4, W8, W23
	0x031F43A4 MOV X2, X21
	0x031F43A8 MOV X5, X31
	0x031F43AC BL 0x33A8A9C
	0x031F43B0 MOV X0, X19
	0x031F43B4 BL 0x31F3CA0
	0x031F43B8 LDR X8, [X20]
	0x031F43BC MOV X1, X0
	0x031F43C0 MOV X0, X20
	0x031F43C4 MOV X2, X21
	0x031F43C8 LDP X4, X3, [X8 + 0x198]
	0x031F43CC LDP X20, X19, [X31 + 0x30]
	0x031F43D0 LDP X22, X21, [X31 + 0x20]
	0x031F43D4 LDP X24, X23, [X31 + 0x10]
	0x031F43D8 LDR X30, [X31], #0x40
	0x031F43DC BR X4
	0x031F43E0 LDP X20, X19, [X31 + 0x30]
	0x031F43E4 LDP X22, X21, [X31 + 0x20]
	0x031F43E8 LDP X24, X23, [X31 + 0x10]
	0x031F43EC MOV W0, W31
	0x031F43F0 LDR X30, [X31], #0x40
	0x031F43F4 RET
	0x031F43F8 BL 0x1C16F20
	0x031F43FC ADRP X0, 0xF2D000
	0x031F4400 LDR X19, [X19 + 0x38]
	0x031F4404 LDR X0, [X0 + 0x140]
	0x031F4408 BL 0x1C16D08
	0x031F440C MOV X1, X19
	0x031F4410 MOV X2, X31
	0x031F4414 BL 0x321B938
	0x031F4418 MOV X19, X0
	0x031F441C ADRP X0, 0xF2C000
	0x031F4420 LDR X0, [X0 + 0xCE0]
	0x031F4424 BL 0x1C16D08
	0x031F4428 BL 0x1C16F10
	0x031F442C MOV X1, X19
	0x031F4430 MOV X2, X31
	0x031F4434 MOV X20, X0
	0x031F4438 BL 0x3252170

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11E9000
	007 Move W8, [X21+408]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF00000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+408], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Compare X20, 0
	023 JumpIfEqual {54}
	024 Move X0, X20
	025 Move X1, X31
	026 Call Array.Clone, X0
	027 Compare X0, 0
	028 JumpIfEqual {47}
	029 Move X22, 0xF00000
	030 Move X22, [X22+1560]
	031 Move X20, X0
	032 Move X21, [X22]
	033 Move X1, X21
	034 Call 0x1C17E00
	035 Compare X0, 0
	036 JumpIfEqual {44}
	037 Move [X19+80], X0
	038 Move X21, [X22]
	039 Move X0, X20
	040 Move X1, X21
	041 Call 0x1C17E00
	042 Compare X0, 0
	043 JumpIfNotEqual {48}
	044 Move X0, X20
	045 Move X1, X21
	046 Call 0x1C181E0
	047 Move [X19+80], X31
	048 Move X0, X19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Move X0, 0xF05000
	055 Move X0, [X0+1320]
	056 Call 0x1C17D08
	057 Call 0x1C17F10
	058 Move X19, X0
	059 Move X0, 0xF2E000
	060 Move X0, [X0+192]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Move X2, X31
	065 Call ArgumentNullException..ctor, X0, X1
	066 Move X0, 0xF2E000
	067 Move X0, [X0+200]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Call 0x1C17DEC

Method: System.Void Parse(System.Byte[] crl)

Disassembly:
	0x031F443C ADRP X0, 0xF2D000
	0x031F4440 LDR X0, [X0 + 0x148]
	0x031F4444 BL 0x1C16D08
	0x031F4448 MOV X1, X0
	0x031F444C MOV X0, X20
	0x031F4450 BL 0x1C16DEC
	0x031F4454 STP X30, X23, [X31 - 0x30]!
	0x031F4458 STP X22, X21, [X31 + 0x10]
	0x031F445C STP X20, X19, [X31 + 0x20]
	0x031F4460 ADRP X20, 0x11E8000
	0x031F4464 ADRP X23, 0xF2D000
	0x031F4468 ADRP X22, 0xF2C000
	0x031F446C LDRB W8, [X20 + 0x19D]
	0x031F4470 LDR X23, [X23 + 0x150]
	0x031F4474 LDR X22, [X22 + 0xF88]
	0x031F4478 MOV X21, X1
	0x031F447C MOV X19, X0
	0x031F4480 TBNZ X8, 0x0, 0x31F44A4
	0x031F4484 ADRP X0, 0xF2C000
	0x031F4488 LDR X0, [X0 + 0xF88]
	0x031F448C BL 0x1C16CF4
	0x031F4490 ADRP X0, 0xF2D000
	0x031F4494 LDR X0, [X0 + 0x150]
	0x031F4498 BL 0x1C16CF4
	0x031F449C MOVZ W8, 0x1
	0x031F44A0 STRB W8, [X20 + 0x19D]
	0x031F44A4 LDR X0, [X23]
	0x031F44A8 BL 0x1C16F10
	0x031F44AC MOV X1, X21
	0x031F44B0 MOV X2, X31
	0x031F44B4 MOV X20, X0
	0x031F44B8 BL 0x3269368
	0x031F44BC LDR X0, [X22]
	0x031F44C0 LDR X21, [X19 + 0x38]
	0x031F44C4 LDR W8, [X0 + 0xE0]
	0x031F44C8 CBNZ W8, 0x31F44D0
	0x031F44CC BL 0x1C16DFC
	0x031F44D0 MOVZ W1, 0x1
	0x031F44D4 MOV X0, X21
	0x031F44D8 MOV X2, X31
	0x031F44DC BL 0x31FF820
	0x031F44E0 CBZ X20, 0x31F4524
	0x031F44E4 LDR X8, [X20]
	0x031F44E8 MOV X1, X0
	0x031F44EC MOV X0, X20
	0x031F44F0 LDP X9, X2, [X8 + 0x188]
	0x031F44F4 BLR X9
	0x031F44F8 MOV X0, X19
	0x031F44FC BL 0x31F3CA0
	0x031F4500 LDR X8, [X20]
	0x031F4504 LDR X2, [X19 + 0x40]
	0x031F4508 MOV X1, X0
	0x031F450C MOV X0, X20
	0x031F4510 LDP X4, X3, [X8 + 0x198]
	0x031F4514 LDP X20, X19, [X31 + 0x20]
	0x031F4518 LDP X22, X21, [X31 + 0x10]
	0x031F451C LDP X30, X23, [X31], #0x30
	0x031F4520 BR X4
	0x031F4524 BL 0x1C16F20
	0x031F4528 STP X30, X21, [X31 - 0x20]!
	0x031F452C STP X20, X19, [X31 + 0x10]
	0x031F4530 ADRP X21, 0x11E8000
	0x031F4534 LDRB W8, [X21 + 0x19E]
	0x031F4538 MOV X19, X1
	0x031F453C MOV X20, X0
	0x031F4540 TBNZ X8, 0x0, 0x31F4564
	0x031F4544 ADRP X0, 0xF2D000
	0x031F4548 LDR X0, [X0 + 0x158]
	0x031F454C BL 0x1C16CF4
	0x031F4550 ADRP X0, 0xF2D000
	0x031F4554 LDR X0, [X0 + 0x160]
	0x031F4558 BL 0x1C16CF4
	0x031F455C MOVZ W8, 0x1
	0x031F4560 STRB W8, [X21 + 0x19E]
	0x031F4564 CBZ X19, 0x31F4654
	0x031F4568 ADRP X9, 0xF2D000
	0x031F456C LDR X9, [X9 + 0x160]
	0x031F4570 LDR X8, [X19]
	0x031F4574 LDR X10, [X9]
	0x031F4578 LDRB W9, [X8 + 0x130]
	0x031F457C LDRB W11, [X10 + 0x130]
	0x031F4580 CMP W9, W11
	0x031F4584 B.CC 0x31F459C
	0x031F4588 LDR X12, [X8 + 0xC8]
	0x031F458C ADD X11, X12, X11, 0x3, LSL
	0x031F4590 LDUR X11, [X11 - 0x8]
	0x031F4594 CMP X11, X10
	0x031F4598 B.EQ 0x31F45DC
	0x031F459C ADRP X10, 0xF2D000
	0x031F45A0 LDR X10, [X10 + 0x158]
	0x031F45A4 LDR X10, [X10]
	0x031F45A8 LDRB W11, [X10 + 0x130]
	0x031F45AC CMP W9, W11
	0x031F45B0 B.CC 0x31F45F0
	0x031F45B4 LDR X9, [X8 + 0xC8]
	0x031F45B8 ADD X9, X9, X11, 0x3, LSL
	0x031F45BC LDUR X9, [X9 - 0x8]
	0x031F45C0 CMP X9, X10
	0x031F45C4 B.NE 0x31F45F0
	0x031F45C8 MOV X0, X20
	0x031F45CC MOV X1, X19
	0x031F45D0 LDP X20, X19, [X31 + 0x10]
	0x031F45D4 LDP X30, X21, [X31], #0x20
	0x031F45D8 B 0x31F4190
	0x031F45DC MOV X0, X20
	0x031F45E0 MOV X1, X19
	0x031F45E4 LDP X20, X19, [X31 + 0x10]
	0x031F45E8 LDP X30, X21, [X31], #0x20
	0x031F45EC B 0x31F4454
	0x031F45F0 LDP X9, X1, [X8 + 0x168]
	0x031F45F4 MOV X0, X19
	0x031F45F8 BLR X9
	0x031F45FC MOV X19, X0
	0x031F4600 ADRP X0, 0xF2D000
	0x031F4604 LDR X0, [X0 + 0x168]
	0x031F4608 BL 0x1C16D08
	0x031F460C MOV X1, X19
	0x031F4610 MOV X2, X31
	0x031F4614 BL 0x321B938
	0x031F4618 MOV X19, X0
	0x031F461C ADRP X0, 0xEFF000
	0x031F4620 LDR X0, [X0 + 0xB40]
	0x031F4624 BL 0x1C16D08
	0x031F4628 BL 0x1C16F10
	0x031F462C MOV X1, X19
	0x031F4630 MOV X2, X31
	0x031F4634 MOV X20, X0
	0x031F4638 BL 0x3379A44
	0x031F463C ADRP X0, 0xF2D000
	0x031F4640 LDR X0, [X0 + 0x170]
	0x031F4644 BL 0x1C16D08
	0x031F4648 MOV X1, X0
	0x031F464C MOV X0, X20
	0x031F4650 BL 0x1C16DEC
	0x031F4654 ADRP X0, 0xF04000
	0x031F4658 LDR X0, [X0 + 0x528]
	0x031F465C BL 0x1C16D08
	0x031F4660 BL 0x1C16F10
	0x031F4664 MOV X19, X0
	0x031F4668 ADRP X0, 0xF2D000
	0x031F466C LDR X0, [X0 + 0x178]
	0x031F4670 BL 0x1C16D08
	0x031F4674 MOV X1, X0
	0x031F4678 MOV X0, X19
	0x031F467C MOV X2, X31
	0x031F4680 BL 0x330E100
	0x031F4684 ADRP X0, 0xF2D000
	0x031F4688 LDR X0, [X0 + 0x170]
	0x031F468C BL 0x1C16D08
	0x031F4690 MOV X1, X0
	0x031F4694 MOV X0, X19
	0x031F4698 BL 0x1C16DEC
	0x031F469C LDR X0, [X0 + 0x18]
	0x031F46A0 RET
	0x031F46A4 LDR X0, [X0 + 0x20]
	0x031F46A8 RET
	0x031F46AC STP X30, X25, [X31 - 0x40]!
	0x031F46B0 STP X24, X23, [X31 + 0x10]
	0x031F46B4 STP X22, X21, [X31 + 0x20]
	0x031F46B8 STP X20, X19, [X31 + 0x30]
	0x031F46BC ADRP X21, 0x11E8000
	0x031F46C0 ADRP X22, 0xF2C000
	0x031F46C4 LDRB W8, [X21 + 0x1A1]
	0x031F46C8 LDR X22, [X22 + 0xB98]
	0x031F46CC MOV X20, X1
	0x031F46D0 MOV X19, X0
	0x031F46D4 TBNZ X8, 0x0, 0x31F471C
	0x031F46D8 ADRP X0, 0xF2C000
	0x031F46DC LDR X0, [X0 + 0xB98]
	0x031F46E0 BL 0x1C16CF4
	0x031F46E4 ADRP X0, 0xF2D000
	0x031F46E8 LDR X0, [X0 + 0x180]
	0x031F46EC BL 0x1C16CF4
	0x031F46F0 ADRP X0, 0xEFF000
	0x031F46F4 LDR X0, [X0 + 0x618]
	0x031F46F8 BL 0x1C16CF4
	0x031F46FC ADRP X0, 0xF2C000
	0x031F4700 LDR X0, [X0 + 0xCF8]
	0x031F4704 BL 0x1C16CF4
	0x031F4708 ADRP X0, 0xF2D000
	0x031F470C LDR X0, [X0 + 0xE0]
	0x031F4710 BL 0x1C16CF4
	0x031F4714 MOVZ W8, 0x1
	0x031F4718 STRB W8, [X21 + 0x1A1]
	0x031F471C LDR X0, [X22]
	0x031F4720 BL 0x1C16F10
	0x031F4724 MOV X21, X0
	0x031F4728 MOV X1, X20
	0x031F472C BL 0x31E7A44
	0x031F4730 STR X21, [X19 + 0x10]
	0x031F4734 CBZ X21, 0x31F4BC8
	0x031F4738 LDRB W8, [X21 + 0x10]
	0x031F473C CMP W8, 0x30
	0x031F4740 B.NE 0x31F4BCC
	0x031F4744 MOV X0, X21
	0x031F4748 MOV W1, W31
	0x031F474C BL 0x31E8704
	0x031F4750 CBZ X0, 0x31F4C30
	0x031F4754 LDRB W8, [X0 + 0x10]
	0x031F4758 CMP W8, 0x30
	0x031F475C B.NE 0x31F4C34
	0x031F4760 LDR X0, [X19 + 0x10]
	0x031F4764 CBZ X0, 0x31F4C98
	0x031F4768 MOV W1, W31
	0x031F476C BL 0x31E8704
	0x031F4770 MOV X21, X0
	0x031F4774 LDR X0, [X19 + 0x10]
	0x031F4778 CBZ X0, 0x31F4C9C
	0x031F477C MOV W1, W31
	0x031F4780 BL 0x31E8704
	0x031F4784 CBZ X0, 0x31F4CA0
	0x031F4788 MOV W1, W31
	0x031F478C BL 0x31E8704
	0x031F4790 MOV X22, X0
	0x031F4794 MOVZ W8, 0x1
	0x031F4798 STR W8, [X19 + 0x98]
	0x031F479C CBZ X0, 0x31F4CA4
	0x031F47A0 LDRB W8, [X22 + 0x10]
	0x031F47A4 CMP W8, 0xA0
	0x031F47A8 B.NE 0x31F4804
	0x031F47AC LDR X0, [X22 + 0x20]
	0x031F47B0 CBZ X0, 0x31F4804
	0x031F47B4 LDR X8, [X0]
	0x031F47B8 LDR X1, [X8 + 0x2A0]
	0x031F47BC LDR X9, [X8 + 0x298]
	0x031F47C0 BLR X9
	0x031F47C4 CMP W0, 0x1
	0x031F47C8 B.LT 0x31F4804
	0x031F47CC LDR W23, [X19 + 0x98]
	0x031F47D0 MOV X0, X22
	0x031F47D4 MOV W1, W31
	0x031F47D8 BL 0x31E8704
	0x031F47DC CBZ X0, 0x31F4D5C
	0x031F47E0 BL 0x31E7D00
	0x031F47E4 CBZ X0, 0x31F4D60
	0x031F47E8 LDR W8, [X0 + 0x18]
	0x031F47EC CBZ W8, 0x31F4D64
	0x031F47F0 LDRB W8, [X0 + 0x20]
	0x031F47F4 MOVZ W22, 0x1
	0x031F47F8 ADD W8, W23, W8
	0x031F47FC STR W8, [X19 + 0x98]
	0x031F4800 B 0x31F4808
	0x031F4804 MOV W22, W31
	0x031F4808 LDR X0, [X19 + 0x10]
	0x031F480C CBZ X0, 0x31F4CA8
	0x031F4810 MOV W1, W31
	0x031F4814 BL 0x31E8704
	0x031F4818 CBZ X0, 0x31F4CAC
	0x031F481C MOV W1, W22
	0x031F4820 BL 0x31E8704
	0x031F4824 MOV X8, X0
	0x031F4828 CBZ X0, 0x31F4CB0
	0x031F482C LDRB W9, [X8 + 0x10]
	0x031F4830 CMP W9, 0x2
	0x031F4834 B.NE 0x31F4CB4
	0x031F4838 MOV X0, X8
	0x031F483C BL 0x31E7D00
	0x031F4840 STR X0, [X19 + 0xA0]
	0x031F4844 CBZ X0, 0x31F4D18
	0x031F4848 ADRP X8, 0xF2D000
	0x031F484C LDR X8, [X8 + 0x180]
	0x031F4850 LDR W2, [X0 + 0x18]
	0x031F4854 LDR X3, [X8]
	0x031F4858 MOV W1, W31
	0x031F485C BL 0x2149E40
	0x031F4860 CBZ X21, 0x31F4D1C
	0x031F4864 ORR W23, W22, 0x2
	0x031F4868 MOVZ W2, 0x30
	0x031F486C MOV X0, X21
	0x031F4870 MOV W1, W23
	0x031F4874 BL 0x31E8834
	0x031F4878 ADRP X8, 0xF2C000
	0x031F487C LDR X8, [X8 + 0xCF8]
	0x031F4880 STR X0, [X19 + 0x30]
	0x031F4884 MOV X24, X0
	0x031F4888 LDR X0, [X8]
	0x031F488C LDR W8, [X0 + 0xE0]
	0x031F4890 CBNZ W8, 0x31F4898
	0x031F4894 BL 0x1C16DFC
	0x031F4898 MOV X0, X24
	0x031F489C BL 0x31EAE98
	0x031F48A0 ADD W1, W22, 0x3
	0x031F48A4 STR X0, [X19 + 0x38]
	0x031F48A8 MOVZ W2, 0x30
	0x031F48AC MOV X0, X21
	0x031F48B0 BL 0x31E8834
	0x031F48B4 MOV X24, X0
	0x031F48B8 CBZ X0, 0x31F4D20
	0x031F48BC MOV X0, X24
	0x031F48C0 MOV W1, W31
	0x031F48C4 BL 0x31E8704
	0x031F48C8 BL 0x31E9324
	0x031F48CC STR X0, [X19 + 0x20]
	0x031F48D0 MOVZ W1, 0x1
	0x031F48D4 MOV X0, X24
	0x031F48D8 BL 0x31E8704
	0x031F48DC BL 0x31E9324
	0x031F48E0 ADD W1, W23, 0x2
	0x031F48E4 STR X0, [X19 + 0x28]
	0x031F48E8 MOVZ W2, 0x30
	0x031F48EC MOV X0, X21
	0x031F48F0 BL 0x31E8834
	0x031F48F4 STR X0, [X19 + 0x50]
	0x031F48F8 BL 0x31EAE98
	0x031F48FC ADD W1, W23, 0x3
	0x031F4900 STR X0, [X19 + 0x58]
	0x031F4904 MOVZ W2, 0x30
	0x031F4908 MOV X0, X21
	0x031F490C BL 0x31E8834
	0x031F4910 MOV X23, X0
	0x031F4914 CBZ X0, 0x31F4D24
	0x031F4918 MOVZ W2, 0x30
	0x031F491C MOV X0, X23
	0x031F4920 MOV W1, W31
	0x031F4924 BL 0x31E8834
	0x031F4928 MOV X24, X0
	0x031F492C CBZ X0, 0x31F4D28
	0x031F4930 MOVZ W2, 0x6
	0x031F4934 MOV X0, X24
	0x031F4938 MOV W1, W31
	0x031F493C BL 0x31E8834
	0x031F4940 BL 0x31E909C
	0x031F4944 STR X0, [X19 + 0x40]
	0x031F4948 MOVZ W1, 0x1
	0x031F494C MOV X0, X24
	0x031F4950 BL 0x31E8704
	0x031F4954 MOV X25, X0
	0x031F4958 LDR X0, [X24 + 0x20]
	0x031F495C CBZ X0, 0x31F4994
	0x031F4960 LDR X8, [X0]
	0x031F4964 LDR X1, [X8 + 0x2A0]
	0x031F4968 LDR X9, [X8 + 0x298]
	0x031F496C BLR X9
	0x031F4970 CMP W0, 0x1
	0x031F4974 B.LE 0x31F4990
	0x031F4978 CBZ X25, 0x31F4D58
	0x031F497C LDR X8, [X25]
	0x031F4980 LDP X9, X1, [X8 + 0x178]
	0x031F4984 MOV X0, X25
	0x031F4988 BLR X9
	0x031F498C B 0x31F4994
	0x031F4990 MOV X0, X31
	0x031F4994 STR X0, [X19 + 0x48]
	0x031F4998 MOVZ W1, 0x1
	0x031F499C MOVZ W2, 0x3
	0x031F49A0 MOV X0, X23
	0x031F49A4 BL 0x31E8834
	0x031F49A8 MOV X23, X0
	0x031F49AC CBZ X0, 0x31F4D2C
	0x031F49B0 ADRP X25, 0xEFF000
	0x031F49B4 LDR X8, [X23 + 0x18]
	0x031F49B8 LDR X25, [X25 + 0x618]
	0x031F49BC CBZ X8, 0x31F49C4
	0x031F49C0 LDR W8, [X8 + 0x18]
	0x031F49C4 LDR X0, [X25]
	0x031F49C8 SUB W24, W8, 0x1
	0x031F49CC MOV W1, W24
	0x031F49D0 BL 0x1C16D6C
	0x031F49D4 STR X0, [X19 + 0x60]
	0x031F49D8 MOV X0, X23
	0x031F49DC BL 0x31E7D00
	0x031F49E0 LDR X2, [X19 + 0x60]
	0x031F49E4 MOVZ W1, 0x1
	0x031F49E8 MOV W3, W31
	0x031F49EC MOV W4, W24
	0x031F49F0 MOV X5, X31
	0x031F49F4 BL 0x33A8A9C
	0x031F49F8 LDR X0, [X19 + 0x10]
	0x031F49FC CBZ X0, 0x31F4D30
	0x031F4A00 MOVZ W1, 0x2
	0x031F4A04 BL 0x31E8704
	0x031F4A08 CBZ X0, 0x31F4D34
	0x031F4A0C BL 0x31E7D00
	0x031F4A10 MOV X23, X0
	0x031F4A14 CBZ X0, 0x31F4D38
	0x031F4A18 LDR W8, [X23 + 0x18]
	0x031F4A1C LDR X0, [X25]
	0x031F4A20 SUB W1, W8, 0x1
	0x031F4A24 BL 0x1C16D6C
	0x031F4A28 MOV X2, X0
	0x031F4A2C STR X0, [X19 + 0x68]
	0x031F4A30 CBZ X0, 0x31F4D3C
	0x031F4A34 LDR W4, [X2 + 0x18]
	0x031F4A38 MOVZ W1, 0x1
	0x031F4A3C MOV X0, X23
	0x031F4A40 MOV W3, W31
	0x031F4A44 MOV X5, X31
	0x031F4A48 BL 0x33A8A9C
	0x031F4A4C LDR X0, [X19 + 0x10]
	0x031F4A50 CBZ X0, 0x31F4D40
	0x031F4A54 MOVZ W1, 0x1
	0x031F4A58 BL 0x31E8704
	0x031F4A5C MOV X23, X0
	0x031F4A60 CBZ X0, 0x31F4D44
	0x031F4A64 MOVZ W2, 0x6
	0x031F4A68 MOV X0, X23
	0x031F4A6C MOV W1, W31
	0x031F4A70 BL 0x31E8834
	0x031F4A74 BL 0x31E909C
	0x031F4A78 STR X0, [X19 + 0x70]
	0x031F4A7C MOVZ W1, 0x1
	0x031F4A80 MOV X0, X23
	0x031F4A84 BL 0x31E8704
	0x031F4A88 CBZ X0, 0x31F4A98
	0x031F4A8C LDR X8, [X0]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X19, 0x11E9000
	014 Move X22, 0xF2E000
	015 Move X21, 0xF2D000
	016 Move W8, [X19+409]
	017 Move X22, [X22+208]
	018 Move X21, [X21+2968]
	019 Move X20, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {47}
	024 Move X0, 0xF2D000
	025 Move X0, [X0+2968]
	026 Call 0x1C17CF4
	027 Move X0, 0xF2D000
	028 Move X0, [X0+2976]
	029 Call 0x1C17CF4
	030 Move X0, 0xF00000
	031 Move X0, [X0+1560]
	032 Call 0x1C17CF4
	033 Move X0, 0xF2D000
	034 Move X0, [X0+3320]
	035 Call 0x1C17CF4
	036 Move X0, 0xF2E000
	037 Move X0, [X0+216]
	038 Call 0x1C17CF4
	039 Move X0, 0xF2E000
	040 Move X0, [X0+224]
	041 Call 0x1C17CF4
	042 Move X0, 0xF2E000
	043 Move X0, [X0+208]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X19+409], W8
	047 Move X19, [X22]
	048 Move X22, [X20+80]
	049 Move X0, [X21]
	050 Call 0x1C17F10
	051 Move X21, X0
	052 Move X1, X22
	053 Call ASN1..ctor, X0, X1
	054 Compare X21, 0
	055 JumpIfEqual {312}
	056 Move W8, [X21+16]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X0, [X21+32]
	059 Compare X0, 0
	060 JumpIfEqual {284}
	061 Move X8, [X0]
	062 Move X1, [X8+672]
	063 Move X9, [X8+664]
	064 NotImplemented "Instruction BLR not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X0, X21
	067 Move W1, W31
	068 Call ASN1.get_Item, X0, X1
	069 Move X22, X0
	070 Compare X0, 0
	071 JumpIfEqual {313}
	072 Move W8, [X22+16]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X0, [X22+32]
	075 Compare X0, 0
	076 JumpIfEqual {298}
	077 Move X8, [X0]
	078 Move X1, [X8+672]
	079 Move X9, [X8+664]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X0, X22
	083 Move W1, W31
	084 Call ASN1.get_Item, X0, X1
	085 Compare X0, 0
	086 JumpIfEqual {314}
	087 Move W8, [X0+16]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X0, X22
	090 Move W1, W31
	091 Call ASN1.get_Item, X0, X1
	092 Compare X0, 0
	093 JumpIfEqual {343}
	094 Call ASN1.get_Value, X0
	095 Compare X0, 0
	096 JumpIfEqual {344}
	097 Move W8, [X0+24]
	098 Compare W8, 0
	099 JumpIfEqual {345}
	100 Move W8, [X0+32]
	101 Move W23, 1
	102 Add W8, W8, 1
	103 Move W23, W31
	104 Move W8, 1
	105 Move [X20+24], W8
	106 Move X0, X22
	107 Move W1, W23
	108 Call ASN1.get_Item, X0, X1
	109 Compare X0, 0
	110 JumpIfEqual {315}
	111 Move W1, W31
	112 Call ASN1.get_Item, X0, X1
	113 Call ASN1Convert.ToOid, X0
	114 Add W1, W23, 1
	115 Move [X20+56], X0
	116 Move X0, X22
	117 Call ASN1.get_Item, X0, X1
	118 Move X8, 0xF2D000
	119 Move X8, [X8+3320]
	120 Move X24, X0
	121 Move X0, [X8]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Move X0, X24
	127 Call X501.ToString, X0
	128 Or W25, W23, 2
	129 Move [X20+16], X0
	130 Move X0, X22
	131 Move W1, W25
	132 Call ASN1.get_Item, X0, X1
	133 Call ASN1Convert.ToDateTime, X0
	134 Add W1, W25, 1
	135 Move [X20+32], X0
	136 Move X0, X22
	137 Call ASN1.get_Item, X0, X1
	138 Move X24, X0
	139 Compare X0, 0
	140 JumpIfEqual {316}
	141 Move W8, [X24+16]
	142 Add W23, W25, 2
	143 Subtract W8, W8, 23
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move X0, X24
	146 Call ASN1Convert.ToDateTime, X0
	147 Move [X20+40], X0
	148 Move X0, X22
	149 Move W1, W23
	150 Call ASN1.get_Item, X0, X1
	151 Move X24, X0
	152 Add W23, W25, 3
	153 Move X8, 0xF2D000
	154 Move X8, [X8+2976]
	155 Move X0, [X8]
	156 Call 0x1C17F10
	157 Move X25, X0
	158 Move X1, X31
	159 Call ArrayList..ctor, X0
	160 Move [X20+48], X25
	161 Compare X24, 0
	162 JumpIfEqual {195}
	163 Move W8, [X24+16]
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Move X29, 0xF2E000
	166 Move X29, [X29+216]
	167 Move W25, W31
	168 Move X0, [X24+32]
	169 Compare X0, 0
	170 JumpIfEqual {175}
	171 Move X8, [X0]
	172 Move X1, [X8+672]
	173 Move X9, [X8+664]
	174 NotImplemented "Instruction BLR not yet implemented."
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Move X26, [X20+48]
	177 Move X0, X24
	178 Move W1, W25
	179 Call ASN1.get_Item, X0, X1
	180 Move X28, X0
	181 Move X0, [X29]
	182 Call 0x1C17F10
	183 Move X27, X0
	184 Move X1, X28
	185 Call X509CrlEntry..ctor, X0, X1
	186 Compare X26, 0
	187 JumpIfEqual {283}
	188 Move X8, [X26]
	189 Move X9, [X8+776]
	190 Move X2, [X8+784]
	191 Move X0, X26
	192 Move X1, X27
	193 NotImplemented "Instruction BLR not yet implemented."
	194 Add W25, W25, 1
	195 Subtract W23, W23, 1
	196 Move X0, X22
	197 Move W1, W23
	198 Call ASN1.get_Item, X0, X1
	199 Move X24, 0xF2E000
	200 Move X24, [X24+224]
	201 Move X22, X0
	202 Compare X0, 0
	203 JumpIfEqual {223}
	204 Move W8, [X22+16]
	205 NotImplemented "Instruction CMP not yet implemented."
	206 Move X0, [X22+32]
	207 Compare X0, 0
	208 JumpIfEqual {223}
	209 Move X8, [X0]
	210 Move X1, [X8+672]
	211 Move X9, [X8+664]
	212 NotImplemented "Instruction BLR not yet implemented."
	213 NotImplemented "Instruction CMP not yet implemented."
	214 Move X0, X22
	215 Move W1, W31
	216 Call ASN1.get_Item, X0, X1
	217 Move X23, X0
	218 Move X0, [X24]
	219 Call 0x1C17F10
	220 Move X22, X0
	221 Move X1, X23
	222 Call X509ExtensionCollection..ctor, X0, X1
	223 Move X0, [X24]
	224 Call 0x1C17F10
	225 Move X22, X0
	226 Move X1, X31
	227 Call X509ExtensionCollection..ctor, X0, X1
	228 Move [X20+72], X22
	229 Move W1, 1
	230 Move X0, X21
	231 Call ASN1.get_Item, X0, X1
	232 Compare X0, 0
	233 JumpIfEqual {317}
	234 Move W1, W31
	235 Call ASN1.get_Item, X0, X1
	236 Call ASN1Convert.ToOid, X0
	237 Move X1, X0
	238 Move X0, [X20+56]
	239 Move X2, X31
	240 Call String.op_Inequality, X0, X1
	241 Move TEMP, X0
	242 And TEMP, TEMP, 1
	243 Compare TEMP, 1
	244 JumpIfEqual {318}
	245 Move W1, 2
	246 Move X0, X21
	247 Call ASN1.get_Item, X0, X1
	248 Compare X0, 0
	249 JumpIfEqual {340}
	250 Call ASN1.get_Value, X0
	251 Move X21, X0
	252 Compare X0, 0
	253 JumpIfEqual {341}
	254 Move X8, 0xF00000
	255 Move X8, [X8+1560]
	256 Move W9, [X21+24]
	257 Move X0, [X8]
	258 Subtract W1, W9, 1
	259 Call 0x1C17D6C
	260 Move X2, X0
	261 Move [X20+64], X0
	262 Compare X0, 0
	263 JumpIfEqual {342}
	264 Move W4, [X2+24]
	265 Move W1, 1
	266 Move X0, X21
	267 Move W3, W31
	268 Move X5, X31
	269 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	270 Move X20, [X31+80]
	271 Move X19, [X31+88]
	272 Move X22, [X31+64]
	273 Move X21, [X31+72]
	274 Move X24, [X31+48]
	275 Move X23, [X31+56]
	276 Move X26, [X31+32]
	277 Move X25, [X31+40]
	278 Move X28, [X31+16]
	279 Move X27, [X31+24]
	280 Move X29, [X31+96]
	281 Move X30, [X31+104]
	282 Return 
	283 Call 0x1C17F20
	284 Move X0, 0xF2D000
	285 Move X0, [X0+3296]
	286 Call 0x1C17D08
	287 Call 0x1C17F10
	288 Move X20, X0
	289 Move X1, X19
	290 Move X2, X31
	291 Call CryptographicException..ctor, X0, X1
	292 Move X0, 0xF2E000
	293 Move X0, [X0+232]
	294 Call 0x1C17D08
	295 Move X1, X0
	296 Move X0, X20
	297 Call 0x1C17DEC
	298 Move X0, 0xF2D000
	299 Move X0, [X0+3296]
	300 Call 0x1C17D08
	301 Call 0x1C17F10
	302 Move X20, X0
	303 Move X1, X19
	304 Move X2, X31
	305 Call CryptographicException..ctor, X0, X1
	306 Move X0, 0xF2E000
	307 Move X0, [X0+232]
	308 Call 0x1C17D08
	309 Move X1, X0
	310 Move X0, X20
	311 Call 0x1C17DEC
	312 Call 0x1C17F20
	313 Call 0x1C17F20
	314 Call 0x1C17F20
	315 Call 0x1C17F20
	316 Call 0x1C17F20
	317 Call 0x1C17F20
	318 Move X0, 0xF2E000
	319 Move X0, [X0+240]
	320 Call 0x1C17D08
	321 Move X1, X0
	322 Move X0, X19
	323 Move X2, X31
	324 Call String.Concat, X0, X1
	325 Move X20, X0
	326 Move X0, 0xF2D000
	327 Move X0, [X0+3296]
	328 Call 0x1C17D08
	329 Call 0x1C17F10
	330 Move X21, X0
	331 Move X1, X20
	332 Move X2, X31
	333 Call CryptographicException..ctor, X0, X1
	334 Move X0, 0xF2E000
	335 Move X0, [X0+232]
	336 Call 0x1C17D08
	337 Move X1, X0
	338 Move X0, X21
	339 Call 0x1C17DEC
	340 Call 0x1C17F20
	341 Call 0x1C17F20
	342 Call 0x1C17F20
	343 Call 0x1C17F20
	344 Call 0x1C17F20
	345 Call 0x1C17F28
	346 Move X20, X0
	347 NotImplemented "Instruction CMP not yet implemented."
	348 Move X0, X20
	349 Call 0x3EB2AD0
	350 Move X20, X0
	351 Move X0, 0xF06000
	352 Move X0, [X0+3264]
	353 Call 0x1C17D08
	354 Move X8, [X20]
	355 Move X1, [X8]
	356 Call 0x1C18270
	357 Move TEMP, X0
	358 And TEMP, TEMP, 1
	359 Compare TEMP, 1
	360 JumpIfNotEqual {376}
	361 Call 0x3EB2AE0
	362 Move X0, 0xF2D000
	363 Move X0, [X0+3296]
	364 Call 0x1C17D08
	365 Call 0x1C17F10
	366 Move X1, X19
	367 Move X2, X31
	368 Move X20, X0
	369 Call CryptographicException..ctor, X0, X1
	370 Move X0, 0xF2E000
	371 Move X0, [X0+232]
	372 Call 0x1C17D08
	373 Move X1, X0
	374 Move X0, X20
	375 Call 0x1C17DEC
	376 Move W0, 8
	377 Call 0x3EB2AF0
	378 Move X8, [X20]
	379 Move [X0], X8
	380 Move X1, 0xCC1000
	381 Add X1, X1, 3672
	382 Move X2, X31
	383 Call 0x3EB2B00
	384 Move X20, X0
	385 Call 0x3EB2AE0
	386 Move X0, X20
	387 Call 0x1D2D690
	388 Call 0x1991590

Method: Mono.Security.X509.X509ExtensionCollection get_Extensions()

Disassembly:
	0x031F4C98 BL 0x1C16F20
	0x031F4C9C BL 0x1C16F20

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Byte[] get_Hash()

Disassembly:
	0x031F4CA0 BL 0x1C16F20
	0x031F4CA4 BL 0x1C16F20
	0x031F4CA8 BL 0x1C16F20
	0x031F4CAC BL 0x1C16F20
	0x031F4CB0 BL 0x1C16F20
	0x031F4CB4 ADRP X0, 0xF2C000
	0x031F4CB8 LDR X0, [X0 + 0xCC0]
	0x031F4CBC BL 0x1C16D08
	0x031F4CC0 LDR W8, [X0 + 0xE0]
	0x031F4CC4 CBNZ W8, 0x31F4CCC
	0x031F4CC8 BL 0x1C16DFC
	0x031F4CCC ADRP X0, 0xF2C000
	0x031F4CD0 LDR X0, [X0 + 0xCC0]
	0x031F4CD4 BL 0x1C16D08
	0x031F4CD8 LDR X8, [X0 + 0xB8]
	0x031F4CDC LDR X20, [X8]
	0x031F4CE0 ADRP X0, 0xF2C000
	0x031F4CE4 LDR X0, [X0 + 0xCE0]
	0x031F4CE8 BL 0x1C16D08
	0x031F4CEC BL 0x1C16F10
	0x031F4CF0 MOV X19, X0
	0x031F4CF4 MOV X1, X20
	0x031F4CF8 MOV X2, X31
	0x031F4CFC BL 0x3252170
	0x031F4D00 ADRP X0, 0xF2D000
	0x031F4D04 LDR X0, [X0 + 0x188]
	0x031F4D08 BL 0x1C16D08
	0x031F4D0C MOV X1, X0
	0x031F4D10 MOV X0, X19
	0x031F4D14 BL 0x1C16DEC
	0x031F4D18 BL 0x1C16F20
	0x031F4D1C BL 0x1C16F20
	0x031F4D20 BL 0x1C16F20
	0x031F4D24 BL 0x1C16F20
	0x031F4D28 BL 0x1C16F20
	0x031F4D2C BL 0x1C16F20
	0x031F4D30 BL 0x1C16F20
	0x031F4D34 BL 0x1C16F20
	0x031F4D38 BL 0x1C16F20
	0x031F4D3C BL 0x1C16F20
	0x031F4D40 BL 0x1C16F20
	0x031F4D44 BL 0x1C16F20
	0x031F4D48 BL 0x1C16F20
	0x031F4D4C MOV X0, X20
	0x031F4D50 MOV X1, X21
	0x031F4D54 BL 0x1C171E0
	0x031F4D58 BL 0x1C16F20
	0x031F4D5C BL 0x1C16F20
	0x031F4D60 BL 0x1C16F20
	0x031F4D64 BL 0x1C16F28
	0x031F4D68 B 0x31F4EA0
	0x031F4D6C B 0x31F4EA0
	0x031F4D70 B 0x31F4EA0
	0x031F4D74 B 0x31F4EA0
	0x031F4D78 B 0x31F4EA0
	0x031F4D7C B 0x31F4EA0
	0x031F4D80 B 0x31F4EA0
	0x031F4D84 B 0x31F4EA0
	0x031F4D88 B 0x31F4EA0
	0x031F4D8C B 0x31F4EA0
	0x031F4D90 B 0x31F4EA0
	0x031F4D94 B 0x31F4EA0
	0x031F4D98 B 0x31F4EA0
	0x031F4D9C B 0x31F4EA0
	0x031F4DA0 B 0x31F4EA0
	0x031F4DA4 B 0x31F4EA0
	0x031F4DA8 B 0x31F4EA0
	0x031F4DAC B 0x31F4EA0
	0x031F4DB0 B 0x31F4EA0
	0x031F4DB4 B 0x31F4EA0
	0x031F4DB8 B 0x31F4EA0
	0x031F4DBC B 0x31F4EA0
	0x031F4DC0 B 0x31F4EA0
	0x031F4DC4 B 0x31F4EA0
	0x031F4DC8 B 0x31F4EA0
	0x031F4DCC B 0x31F4EA0
	0x031F4DD0 B 0x31F4EA0
	0x031F4DD4 B 0x31F4EA0
	0x031F4DD8 B 0x31F4EA0
	0x031F4DDC B 0x31F4EA0
	0x031F4DE0 B 0x31F4EA0
	0x031F4DE4 B 0x31F4EA0
	0x031F4DE8 B 0x31F4EA0
	0x031F4DEC B 0x31F4EA0
	0x031F4DF0 B 0x31F4EA0
	0x031F4DF4 B 0x31F4EA0
	0x031F4DF8 B 0x31F4EA0
	0x031F4DFC B 0x31F4EA0
	0x031F4E00 B 0x31F4EA0
	0x031F4E04 B 0x31F4EA0
	0x031F4E08 B 0x31F4EA0
	0x031F4E0C B 0x31F4EA0
	0x031F4E10 B 0x31F4EA0
	0x031F4E14 B 0x31F4EA0
	0x031F4E18 B 0x31F4EA0
	0x031F4E1C B 0x31F4EA0
	0x031F4E20 B 0x31F4EA0
	0x031F4E24 B 0x31F4EA0
	0x031F4E28 B 0x31F4EA0
	0x031F4E2C B 0x31F4EA0
	0x031F4E30 B 0x31F4EA0
	0x031F4E34 B 0x31F4EA0
	0x031F4E38 B 0x31F4EA0
	0x031F4E3C B 0x31F4EA0
	0x031F4E40 B 0x31F4EA0
	0x031F4E44 B 0x31F4EA0
	0x031F4E48 B 0x31F4EA0
	0x031F4E4C B 0x31F4EA0
	0x031F4E50 B 0x31F4EA0
	0x031F4E54 B 0x31F4EA0
	0x031F4E58 B 0x31F4EA0
	0x031F4E5C B 0x31F4EA0
	0x031F4E60 B 0x31F4EA0
	0x031F4E64 B 0x31F4EA0
	0x031F4E68 B 0x31F4EA0
	0x031F4E6C B 0x31F4EA0
	0x031F4E70 B 0x31F4EA0
	0x031F4E74 B 0x31F4EA0
	0x031F4E78 B 0x31F4EA0
	0x031F4E7C B 0x31F4EA0
	0x031F4E80 B 0x31F4EA0
	0x031F4E84 B 0x31F4EA0
	0x031F4E88 B 0x31F4EA0
	0x031F4E8C B 0x31F4EA0
	0x031F4E90 B 0x31F4EA0
	0x031F4E94 B 0x31F4EA0
	0x031F4E98 B 0x31F4EA0
	0x031F4E9C B 0x31F4EA0
	0x031F4EA0 MOV X19, X0
	0x031F4EA4 CMP W1, 0x1
	0x031F4EA8 B.NE 0x31F4F64
	0x031F4EAC MOV X0, X19
	0x031F4EB0 BL 0x3EB1AD0
	0x031F4EB4 MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11E9000
	007 Move W8, [X20+410]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xF2D000
	014 Move X0, [X0+2968]
	015 Call 0x1C17CF4
	016 Move X0, 0xF00000
	017 Move X0, [X0+3584]
	018 Call 0x1C17CF4
	019 Move X0, 0xF2D000
	020 Move X0, [X0+3976]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+410], W8
	024 Move X0, [X19+88]
	025 Compare X0, 0
	026 JumpIfNotEqual {94}
	027 Move X8, 0xF2D000
	028 Move X21, [X19+80]
	029 Move X8, [X8+2968]
	030 Move X0, [X8]
	031 Call 0x1C17F10
	032 Move X1, X21
	033 Move X20, X0
	034 Call ASN1..ctor, X0, X1
	035 Compare X20, 0
	036 JumpIfEqual {100}
	037 Move X0, X20
	038 Move W1, W31
	039 Call ASN1.get_Item, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {100}
	042 Move X8, [X0]
	043 Move X9, [X8+376]
	044 Move X1, [X8+384]
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move X8, 0xF2D000
	047 Move X8, [X8+3976]
	048 Move X20, [X19+56]
	049 Move X21, X0
	050 Move X8, [X8]
	051 Move W9, [X8+224]
	052 Compare W9, 0
	053 JumpIfNotEqual {56}
	054 Move X0, X8
	055 Call 0x1C17DFC
	056 Move X0, X20
	057 Move X1, X31
	058 Call PKCS1.CreateFromOid, X0
	059 Move X20, X0
	060 Compare X0, 0
	061 JumpIfEqual {101}
	062 Move X0, X20
	063 Move X1, X21
	064 Move X2, X31
	065 Call HashAlgorithm.ComputeHash, X0, X1
	066 Move X21, X31
	067 Move [X19+88], X0
	068 Move X10, 0xF00000
	069 Move X8, [X20]
	070 Move X10, [X10+3584]
	071 NotImplemented "Instruction LDRH not yet implemented."
	072 Move X1, [X10]
	073 Compare X9, 0
	074 JumpIfEqual {81}
	075 Move X10, [X8+176]
	076 Add X10, X10, 8
	077 NotImplemented "Instruction LDUR not yet implemented."
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Subtract X9, X9, 1
	080 Add X10, X10, 16
	081 Move X0, X20
	082 Move W2, W31
	083 Call 0x1C5D788
	084 NotImplemented "Instruction LDRSW not yet implemented."
	085 Add X8, X8, X9
	086 Add X0, X8, 312
	087 Move X8, [X0]
	088 Move X1, [X0+8]
	089 Move X0, X20
	090 NotImplemented "Instruction BLR not yet implemented."
	091 Compare X21, 0
	092 JumpIfNotEqual {102}
	093 Move X0, [X19+88]
	094 Move X20, [X31+32]
	095 Move X19, [X31+40]
	096 Move X22, [X31+16]
	097 Move X21, [X31+24]
	098 Move X30, [X31+48]
	099 Return X0
	100 Call 0x1C17F20
	101 Call 0x1C17F20
	102 Move X0, X21
	103 Call 0x1C17F18
	104 Move X22, X0
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X0, X22
	107 Call 0x3EB2AD0
	108 Move X21, [X0]
	109 Call 0x3EB2AE0
	110 Compare X20, 0
	111 JumpIfNotEqual {68}
	112 Move X21, X31
	113 Move X22, X0
	114 Compare X20, 0
	115 JumpIfEqual {139}
	116 Move X10, 0xF00000
	117 Move X8, [X20]
	118 Move X10, [X10+3584]
	119 NotImplemented "Instruction LDRH not yet implemented."
	120 Move X1, [X10]
	121 Compare X9, 0
	122 JumpIfEqual {129}
	123 Move X10, [X8+176]
	124 Add X10, X10, 8
	125 NotImplemented "Instruction LDUR not yet implemented."
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Subtract X9, X9, 1
	128 Add X10, X10, 16
	129 Move X0, X20
	130 Move W2, W31
	131 Call 0x1C5D788
	132 NotImplemented "Instruction LDRSW not yet implemented."
	133 Add X8, X8, X9
	134 Add X0, X8, 312
	135 Move X8, [X0]
	136 Move X1, [X0+8]
	137 Move X0, X20
	138 NotImplemented "Instruction BLR not yet implemented."
	139 Compare X21, 0
	140 JumpIfNotEqual {143}
	141 Move X0, X22
	142 Call 0x1D2D690
	143 Move X0, X21
	144 Call 0x1C17F18
	145 Call 0x1991590

Method: System.String get_IssuerName()

Disassembly:
	0x031F4EB8 ADRP X0, 0xEFF000
	0x031F4EBC LDR X0, [X0 + 0x7D0]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.DateTime get_NextUpdate()

Disassembly:
	0x031F4EC0 BL 0x1C16D08
	0x031F4EC4 LDR X8, [X19]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Boolean Compare(System.Byte[] array1, System.Byte[] array2)

Disassembly:
	0x031F4EC8 LDR X1, [X8]
	0x031F4ECC BL 0x1C17270
	0x031F4ED0 TBZ X0, 0x0, 0x31F4F3C
	0x031F4ED4 LDR X19, [X19]
	0x031F4ED8 BL 0x3EB1AE0
	0x031F4EDC ADRP X20, 0xF2C000
	0x031F4EE0 LDR X20, [X20 + 0xCC0]
	0x031F4EE4 MOV X0, X20
	0x031F4EE8 BL 0x1C16D08
	0x031F4EEC BL 0x19903D0
	0x031F4EF0 MOV X0, X20
	0x031F4EF4 BL 0x1C16D08
	0x031F4EF8 LDR X8, [X0 + 0xB8]
	0x031F4EFC ADRP X0, 0xF2C000
	0x031F4F00 LDR X20, [X8]
	0x031F4F04 LDR X0, [X0 + 0xCE0]
	0x031F4F08 BL 0x1C16D08
	0x031F4F0C BL 0x1C16F10
	0x031F4F10 MOV X1, X20
	0x031F4F14 MOV X2, X19
	0x031F4F18 MOV X3, X31
	0x031F4F1C MOV X21, X0
	0x031F4F20 BL 0x325240C
	0x031F4F24 ADRP X0, 0xF2D000
	0x031F4F28 LDR X0, [X0 + 0x188]
	0x031F4F2C BL 0x1C16D08
	0x031F4F30 MOV X1, X0
	0x031F4F34 MOV X0, X21
	0x031F4F38 BL 0x1C16DEC
	0x031F4F3C MOVZ W0, 0x8
	0x031F4F40 BL 0x3EB1AF0
	0x031F4F44 LDR X8, [X19]
	0x031F4F48 STR X8, [X0]
	0x031F4F4C ADRP X1, 0xCC0000
	0x031F4F50 ADD X1, X1, 0xE58
	0x031F4F54 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Or X8, X1, X2
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Compare X1, 0
	006 JumpIfEqual {29}
	007 Compare X2, 0
	008 JumpIfEqual {29}
	009 Move W8, [X1+24]
	010 Move W9, [X2+24]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W9, W31
	014 Subtract W8, W31, W8
	015 Add W31, W8, W9
	016 Move X9, W9
	017 Add X10, X1, X9
	018 Add X11, X2, X9
	019 Move W10, [X10+32]
	020 Move W11, [X11+32]
	021 Add W12, W8, W9
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CSET not yet implemented."
	024 Add W31, W12, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Add W9, W9, 1
	027 Move W0, W31
	028 Move W0, 1
	029 Move X30, [X31+16]
	030 Return X0
	031 Call 0x1C17F28

Method: Mono.Security.X509.X509Crl/X509CrlEntry GetCrlEntry(Mono.Security.X509.X509Certificate x509)

Disassembly:
	0x031F4F58 BL 0x3EB1B00
	0x031F4F5C MOV X19, X0
	0x031F4F60 BL 0x3EB1AE0
	0x031F4F64 MOV X0, X19
	0x031F4F68 BL 0x1D2C690
	0x031F4F6C BL 0x1990590
	0x031F4F70 STR X30, [X31 - 0x30]!
	0x031F4F74 STP X22, X21, [X31 + 0x10]
	0x031F4F78 STP X20, X19, [X31 + 0x20]
	0x031F4F7C ADRP X21, 0x11E8000
	0x031F4F80 LDRB W8, [X21 + 0x1B2]
	0x031F4F84 MOV X20, X1
	0x031F4F88 MOV X19, X0
	0x031F4F8C TBNZ X8, 0x0, 0x31F4FBC
	0x031F4F90 ADRP X0, 0xF08000
	0x031F4F94 LDR X0, [X0 + 0x9E8]
	0x031F4F98 BL 0x1C16CF4
	0x031F4F9C ADRP X0, 0xF2D000
	0x031F4FA0 LDR X0, [X0 + 0x190]
	0x031F4FA4 BL 0x1C16CF4
	0x031F4FA8 ADRP X0, 0xF2D000
	0x031F4FAC LDR X0, [X0 + 0x198]
	0x031F4FB0 BL 0x1C16CF4
	0x031F4FB4 MOVZ W8, 0x1
	0x031F4FB8 STRB W8, [X21 + 0x1B2]
	0x031F4FBC MOV X0, X31
	0x031F4FC0 BL 0x3242EC8
	0x031F4FC4 CBZ X0, 0x31F50A0
	0x031F4FC8 LDR X8, [X0]
	0x031F4FCC ADRP X21, 0xF2D000
	0x031F4FD0 ADRP X22, 0xF2D000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {16}
	005 Move X8, [X1]
	006 Move X19, X0
	007 Move X0, X1
	008 Move X9, [X8+520]
	009 Move X8, [X8+528]
	010 Move X1, X8
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move X1, X0
	013 Move X0, X19
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Move X0, 0xF05000
	017 Move X0, [X0+1320]
	018 Call 0x1C17D08
	019 Call 0x1C17F10
	020 Move X19, X0
	021 Move X0, 0xF2E000
	022 Move X0, [X0+272]
	023 Call 0x1C17D08
	024 Move X1, X0
	025 Move X0, X19
	026 Move X2, X31
	027 Call ArgumentNullException..ctor, X0, X1
	028 Move X0, 0xF2E000
	029 Move X0, [X0+280]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X19
	033 Call 0x1C17DEC

Method: Mono.Security.X509.X509Crl/X509CrlEntry GetCrlEntry(System.Byte[] serialNumber)

Disassembly:
	0x031F4FD4 MOV X1, X20
	0x031F4FD8 LDR X9, [X8 + 0x378]
	0x031F4FDC LDR X2, [X8 + 0x380]
	0x031F4FE0 LDR X21, [X21 + 0x190]
	0x031F4FE4 LDR X22, [X22 + 0x198]
	0x031F4FE8 BLR X9
	0x031F4FEC LDR X8, [X21]
	0x031F4FF0 MOV X20, X0
	0x031F4FF4 MOV X1, X19
	0x031F4FF8 MOV X2, X31
	0x031F4FFC MOV X0, X8
	0x031F5000 BL 0x321EFD0
	0x031F5004 LDR X8, [X22]
	0x031F5008 MOV X21, X0
	0x031F500C MOV X1, X19
	0x031F5010 MOV X2, X31
	0x031F5014 MOV X0, X8
	0x031F5018 BL 0x321EFD0
	0x031F501C CBZ X20, 0x31F50A0
	0x031F5020 MOV X19, X0
	0x031F5024 MOV X0, X20
	0x031F5028 MOV X1, X21
	0x031F502C MOV X2, X31
	0x031F5030 BL 0x322C2F0
	0x031F5034 CBZ X21, 0x31F50A0
	0x031F5038 LDR W8, [X21 + 0x10]
	0x031F503C ADRP X22, 0xF07000
	0x031F5040 LDR X22, [X22 + 0x9E8]
	0x031F5044 MOV X1, X19
	0x031F5048 ADD W21, W8, W0
	0x031F504C MOV X0, X20
	0x031F5050 MOV W2, W21
	0x031F5054 MOV X3, X31
	0x031F5058 BL 0x322C300
	0x031F505C SUB W2, W0, W21
	0x031F5060 MOV X0, X20
	0x031F5064 MOV W1, W21
	0x031F5068 MOV X3, X31
	0x031F506C BL 0x3228DE4
	0x031F5070 LDR X8, [X22]
	0x031F5074 MOV X19, X0
	0x031F5078 LDR W9, [X8 + 0xE0]
	0x031F507C CBNZ W9, 0x31F5088
	0x031F5080 MOV X0, X8
	0x031F5084 BL 0x1C16DFC
	0x031F5088 MOV X0, X19
	0x031F508C LDP X20, X19, [X31 + 0x20]
	0x031F5090 LDP X22, X21, [X31 + 0x10]
	0x031F5094 MOV X1, X31
	0x031F5098 LDR X30, [X31], #0x30
	0x031F509C B 0x3322D04
	0x031F50A0 BL 0x1C16F20
	0x031F50A4 STP X30, X21, [X31 - 0x20]!
	0x031F50A8 STP X20, X19, [X31 + 0x10]
	0x031F50AC ADRP X20, 0x11E7000
	0x031F50B0 LDRB W8, [X20 + 0x1A3]
	0x031F50B4 MOV X19, X1
	0x031F50B8 TBNZ X8, 0x0, 0x31F50D0
	0x031F50BC ADRP X0, 0xEFE000
	0x031F50C0 LDR X0, [X0 + 0x618]
	0x031F50C4 BL 0x1C16CF4
	0x031F50C8 MOVZ W8, 0x1
	0x031F50CC STRB W8, [X20 + 0x1A3]
	0x031F50D0 CBZ X19, 0x31F5130
	0x031F50D4 LDR W8, [X19 + 0x18]
	0x031F50D8 CBZ W8, 0x31F5134
	0x031F50DC LDRB W9, [X19 + 0x20]
	0x031F50E0 CBNZ W9, 0x31F5120
	0x031F50E4 ADRP X9, 0xEFE000
	0x031F50E8 LDR X9, [X9 + 0x618]
	0x031F50EC SUB W20, W8, 0x1
	0x031F50F0 MOV W1, W20
	0x031F50F4 LDR X0, [X9]
	0x031F50F8 BL 0x1C16D6C
	0x031F50FC MOV X21, X0
	0x031F5100 MOVZ W1, 0x1
	0x031F5104 MOV X0, X19
	0x031F5108 MOV X2, X21
	0x031F510C MOV W3, W31
	0x031F5110 MOV W4, W20
	0x031F5114 MOV X5, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x11E9000
	008 Move W8, [X21+411]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF2E000
	016 Move X0, [X0+216]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+411], W8
	020 Compare X19, 0
	021 JumpIfEqual {78}
	022 Move X0, [X20+48]
	023 Compare X0, 0
	024 JumpIfEqual {66}
	025 Move X23, 0xF2D000
	026 Move X23, [X23+216]
	027 Move W21, W31
	028 Move X8, [X0]
	029 Move X9, [X8+664]
	030 Move X1, [X8+672]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, [X20+48]
	034 Compare X0, 0
	035 JumpIfEqual {66}
	036 Move X8, [X0]
	037 Move W1, W21
	038 Move X9, [X8+744]
	039 Move X2, [X8+752]
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Compare X0, 0
	042 JumpIfEqual {66}
	043 Move X8, [X0]
	044 Move X1, [X23]
	045 Move X22, X0
	046 Move W10, [X8+304]
	047 Move W9, [X1+304]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X8, [X8+200]
	050 Add X8, X8, X9
	051 NotImplemented "Instruction LDUR not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X0, X22
	054 Call X509CrlEntry.get_SerialNumber, X0
	055 Move X1, X19
	056 Move X2, X0
	057 Call X509Crl.Compare, X0, X1, X2
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {68}
	062 Move X0, [X20+48]
	063 Add W21, W21, 1
	064 Compare X0, 0
	065 JumpIfNotEqual {28}
	066 Call 0x1C17F20
	067 Move X22, X31
	068 Move X0, X22
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X30, [X31+48]
	074 Move X23, [X31+56]
	075 Return X0
	076 Move X0, X22
	077 Call 0x1C181E0
	078 Move X0, 0xF04000
	079 Move X0, [X0+1320]
	080 Call 0x1C17D08
	081 Call 0x1C17F10
	082 Move X19, X0
	083 Move X0, 0xF2D000
	084 Move X0, [X0+288]
	085 Call 0x1C17D08
	086 Move X1, X0
	087 Move X0, X19
	088 Move X2, X31
	089 Call ArgumentNullException..ctor, X0, X1
	090 Move X0, 0xF2D000
	091 Move X0, [X0+296]
	092 Call 0x1C17D08
	093 Move X1, X0
	094 Move X0, X19
	095 Call 0x1C17DEC

Method: System.Boolean VerifySignature(System.Security.Cryptography.DSA dsa)

Disassembly:
	0x031F5190 MOVZ W8, 0x1
	0x031F5194 STRB W8, [X20 + 0x1A5]
	0x031F5198 LDR X0, [X19 + 0x80]
	0x031F519C CBZ X0, 0x31F51D8
	0x031F51A0 CBZ X0, 0x31F5324
	0x031F51A4 MOV X1, X31
	0x031F51A8 BL 0x33A01F0
	0x031F51AC CBZ X0, 0x31F52F0
	0x031F51B0 ADRP X8, 0xEFE000
	0x031F51B4 LDR X8, [X8 + 0x618]
	0x031F51B8 MOV X19, X0
	0x031F51BC LDR X20, [X8]
	0x031F51C0 MOV X1, X20
	0x031F51C4 BL 0x1C16E00
	0x031F51C8 CBNZ X0, 0x31F52F0
	0x031F51CC MOV X0, X19
	0x031F51D0 MOV X1, X20
	0x031F51D4 BL 0x1C171E0
	0x031F51D8 LDR X8, [X19 + 0x10]
	0x031F51DC CBZ X8, 0x31F52EC
	0x031F51E0 LDR X0, [X8 + 0x20]
	0x031F51E4 CBZ X0, 0x31F52F0
	0x031F51E8 LDR X8, [X0]
	0x031F51EC LDR X9, [X8 + 0x298]
	0x031F51F0 LDR X1, [X8 + 0x2A0]
	0x031F51F4 BLR X9
	0x031F51F8 CMP W0, 0x1
	0x031F51FC B.LT 0x31F52EC
	0x031F5200 ADRP X21, 0xF2B000
	0x031F5204 LDR X21, [X21 + 0xF88]
	0x031F5208 LDR X20, [X19 + 0x70]
	0x031F520C LDR X0, [X21]
	0x031F5210 LDR W8, [X0 + 0xE0]
	0x031F5214 CBNZ W8, 0x31F521C
	0x031F5218 BL 0x1C16DFC
	0x031F521C MOV X0, X20
	0x031F5220 MOV W1, W31
	0x031F5224 MOV X2, X31
	0x031F5228 BL 0x31FF820
	0x031F522C CBZ X0, 0x31F52F0
	0x031F5230 MOV X20, X0
	0x031F5234 LDR X0, [X19 + 0x10]
	0x031F5238 CBZ X0, 0x31F5324
	0x031F523C MOV W1, W31
	0x031F5240 BL 0x31E8704
	0x031F5244 CBZ X0, 0x31F5324
	0x031F5248 LDR X8, [X0]
	0x031F524C LDP X9, X1, [X8 + 0x178]
	0x031F5250 BLR X9
	0x031F5254 LDR X8, [X21]
	0x031F5258 MOV X21, X0
	0x031F525C LDR W9, [X8 + 0xE0]
	0x031F5260 CBNZ W9, 0x31F526C
	0x031F5264 MOV X0, X8
	0x031F5268 BL 0x1C16DFC
	0x031F526C MOV X0, X20
	0x031F5270 MOV X1, X31
	0x031F5274 BL 0x31FFC84
	0x031F5278 MOV X20, X0
	0x031F527C CBZ X21, 0x31F5328
	0x031F5280 CBZ X20, 0x31F5334
	0x031F5284 LDR W3, [X21 + 0x18]
	0x031F5288 MOV X0, X20
	0x031F528C MOV X1, X21
	0x031F5290 MOV W2, W31
	0x031F5294 MOV X4, X31
	0x031F5298 BL 0x3251540
	0x031F529C MOV X21, X31
	0x031F52A0 STR X0, [X19 + 0x80]
	0x031F52A4 ADRP X10, 0xEFE000
	0x031F52A8 LDR X8, [X20]
	0x031F52AC LDR X10, [X10 + 0xE00]
	0x031F52B0 LDRH W9, [X8 + 0x12E]
	0x031F52B4 LDR X1, [X10]
	0x031F52B8 CBZ X9, 0x31F52DC
	0x031F52BC LDR X10, [X8 + 0xB0]
	0x031F52C0 ADD X10, X10, 0x8
	0x031F52C4 LDUR X11, [X10 - 0x8]
	0x031F52C8 CMP X11, X1
	0x031F52CC B.EQ 0x31F5300
	0x031F52D0 SUBS X9, X9, 0x1
	0x031F52D4 ADD X10, X10, 0x10
	0x031F52D8 B.NE 0x31F52C4
	0x031F52DC MOV X0, X20
	0x031F52E0 MOV W2, W31
	0x031F52E4 BL 0x1C5C788
	0x031F52E8 B 0x31F530C
	0x031F52EC MOV X0, X31
	0x031F52F0 LDP X20, X19, [X31 + 0x20]
	0x031F52F4 LDP X22, X21, [X31 + 0x10]
	0x031F52F8 LDR X30, [X31], #0x30
	0x031F52FC RET
	0x031F5300 LDRSW X9, [X10]
	0x031F5304 ADD X8, X8, X9, 0x4, LSL
	0x031F5308 ADD X0, X8, 0x138
	0x031F530C LDP X8, X1, [X0]
	0x031F5310 MOV X0, X20
	0x031F5314 BLR X8
	0x031F5318 CBNZ X21, 0x31F532C
	0x031F531C LDR X0, [X19 + 0x80]
	0x031F5320 CBNZ X0, 0x31F51A4
	0x031F5324 BL 0x1C16F20
	0x031F5328 BL 0x1C16F20
	0x031F532C MOV X0, X21
	0x031F5330 BL 0x1C16F18
	0x031F5334 BL 0x1C16F20
	0x031F5338 B 0x31F533C
	0x031F533C MOV X22, X0
	0x031F5340 CMP W1, 0x1
	0x031F5344 B.NE 0x31F5360
	0x031F5348 MOV X0, X22
	0x031F534C BL 0x3EB1AD0
	0x031F5350 LDR X21, [X0]
	0x031F5354 BL 0x3EB1AE0
	0x031F5358 CBNZ X20, 0x31F52A4
	0x031F535C B 0x31F5318
	0x031F5360 MOV X21, X31
	0x031F5364 B 0x31F536C
	0x031F5368 MOV X22, X0
	0x031F536C CBZ X20, 0x31F53D0
	0x031F5370 ADRP X10, 0xEFE000
	0x031F5374 LDR X8, [X20]
	0x031F5378 LDR X10, [X10 + 0xE00]
	0x031F537C LDRH W9, [X8 + 0x12E]
	0x031F5380 LDR X1, [X10]
	0x031F5384 CBZ X9, 0x31F53A8
	0x031F5388 LDR X10, [X8 + 0xB0]
	0x031F538C ADD X10, X10, 0x8
	0x031F5390 LDUR X11, [X10 - 0x8]
	0x031F5394 CMP X11, X1
	0x031F5398 B.EQ 0x31F53B8
	0x031F539C SUBS X9, X9, 0x1
	0x031F53A0 ADD X10, X10, 0x10
	0x031F53A4 B.NE 0x31F5390
	0x031F53A8 MOV X0, X20
	0x031F53AC MOV W2, W31
	0x031F53B0 BL 0x1C5C788
	0x031F53B4 B 0x31F53C4
	0x031F53B8 LDRSW X9, [X10]
	0x031F53BC ADD X8, X8, X9, 0x4, LSL
	0x031F53C0 ADD X0, X8, 0x138
	0x031F53C4 LDP X8, X1, [X0]
	0x031F53C8 MOV X0, X20
	0x031F53CC BLR X8
	0x031F53D0 CBNZ X21, 0x31F53DC
	0x031F53D4 MOV X0, X22
	0x031F53D8 BL 0x1D2C690
	0x031F53DC MOV X0, X21
	0x031F53E0 BL 0x1C16F18
	0x031F53E4 BL 0x1990590
	0x031F53E8 LDR X0, [X0 + 0x38]
	0x031F53EC RET
	0x031F53F0 LDR X0, [X0 + 0x40]
	0x031F53F4 RET
	0x031F53F8 STR X30, [X31 - 0x20]!
	0x031F53FC STP X20, X19, [X31 + 0x10]
	0x031F5400 ADRP X20, 0x11E7000
	0x031F5404 LDRB W8, [X20 + 0x1A6]
	0x031F5408 MOV X19, X0
	0x031F540C TBNZ X8, 0x0, 0x31F5424
	0x031F5410 ADRP X0, 0xEFE000
	0x031F5414 LDR X0, [X0 + 0x618]
	0x031F5418 BL 0x1C16CF4
	0x031F541C MOVZ W8, 0x1
	0x031F5420 STRB W8, [X20 + 0x1A6]
	0x031F5424 LDR X0, [X19 + 0x48]
	0x031F5428 CBZ X0, 0x31F5454
	0x031F542C MOV X1, X31
	0x031F5430 BL 0x33A01F0
	0x031F5434 CBZ X0, 0x31F5454
	0x031F5438 ADRP X8, 0xEFE000
	0x031F543C LDR X8, [X8 + 0x618]
	0x031F5440 MOV X19, X0
	0x031F5444 LDR X20, [X8]
	0x031F5448 MOV X1, X20
	0x031F544C BL 0x1C16E00
	0x031F5450 CBZ X0, 0x31F5460

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x11E8000
	009 Move X20, 0xF2D000
	010 Move W8, [X22+412]
	011 Move X20, [X20+304]
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {38}
	018 Move X0, 0xF2C000
	019 Move X0, [X0+2968]
	020 Call 0x1C17CF4
	021 Move X0, 0xEFF000
	022 Move X0, [X0+1560]
	023 Call 0x1C17CF4
	024 Move X0, 0xF2D000
	025 Move X0, [X0+312]
	026 Call 0x1C17CF4
	027 Move X0, 0xEFF000
	028 Move X0, [X0+1448]
	029 Call 0x1C17CF4
	030 Move X0, 0xF2C000
	031 Move X0, [X0+3392]
	032 Call 0x1C17CF4
	033 Move X0, 0xF2D000
	034 Move X0, [X0+304]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X22+412], W8
	038 Move X0, [X19+56]
	039 Move X1, [X20]
	040 Move X2, X31
	041 Call String.op_Inequality, X0, X1
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfEqual {180}
	046 Move X8, 0xF2D000
	047 Move X8, [X8+312]
	048 Move X0, [X8]
	049 Call 0x1C17F10
	050 Move X1, X21
	051 Move X2, X31
	052 Move X20, X0
	053 Call DSASignatureDeformatter..ctor, X0, X1
	054 Compare X20, 0
	055 JumpIfEqual {179}
	056 Move X9, 0xF2C000
	057 Move X8, [X20]
	058 Move X9, [X9+3392]
	059 Move X21, 0xF2C000
	060 Move X0, X20
	061 Move X1, [X9]
	062 Move X9, [X8+392]
	063 Move X2, [X8+400]
	064 Move X21, [X21+2968]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move X0, [X21]
	067 Move X22, [X19+64]
	068 Call 0x1C17F10
	069 Move X1, X22
	070 Move X21, X0
	071 Call ASN1..ctor, X0, X1
	072 Compare X21, 0
	073 JumpIfEqual {170}
	074 Move X0, [X21+32]
	075 Compare X0, 0
	076 JumpIfEqual {170}
	077 Move X8, [X0]
	078 Move X9, [X8+664]
	079 Move X1, [X8+672]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X0, X21
	083 Move W1, W31
	084 Call ASN1.get_Item, X0, X1
	085 Compare X0, 0
	086 JumpIfEqual {179}
	087 Call ASN1.get_Value, X0
	088 Move X23, X0
	089 Move W1, 1
	090 Move X0, X21
	091 Call ASN1.get_Item, X0, X1
	092 Compare X0, 0
	093 JumpIfEqual {179}
	094 Call ASN1.get_Value, X0
	095 Move X8, 0xEFF000
	096 Move X8, [X8+1560]
	097 Move X22, X0
	098 Move W1, 40
	099 Move X8, [X8]
	100 Move X0, X8
	101 Call 0x1C17D6C
	102 Compare X23, 0
	103 JumpIfEqual {179}
	104 Move X8, 0xEFF000
	105 Move X8, [X8+1448]
	106 Move X21, X0
	107 Move X0, [X8]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move W8, [X23+24]
	113 Move W0, W31
	114 Move X2, X31
	115 Subtract W1, W8, 20
	116 Call Math.Max, X0, X1
	117 Move W8, [X23+24]
	118 Move W9, 20
	119 Move W24, W0
	120 Move W0, W31
	121 Subtract W1, W9, W8
	122 Move X2, X31
	123 Call Math.Max, X0, X1
	124 Move W8, [X23+24]
	125 Move W3, W0
	126 Move X0, X23
	127 Move W1, W24
	128 Subtract W4, W8, W24
	129 Move X2, X21
	130 Move X5, X31
	131 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	132 Compare X22, 0
	133 JumpIfEqual {179}
	134 Move W8, [X22+24]
	135 Move W0, W31
	136 Move X2, X31
	137 Subtract W1, W8, 20
	138 Call Math.Max, X0, X1
	139 Move W8, [X22+24]
	140 Move W9, 40
	141 Move W23, W0
	142 Move W0, 20
	143 Subtract W1, W9, W8
	144 Move X2, X31
	145 Call Math.Max, X0, X1
	146 Move W8, [X22+24]
	147 Move W3, W0
	148 Move X0, X22
	149 Move W1, W23
	150 Subtract W4, W8, W23
	151 Move X2, X21
	152 Move X5, X31
	153 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	154 Move X0, X19
	155 Call X509Crl.get_Hash, X0
	156 Move X8, [X20]
	157 Move X1, X0
	158 Move X0, X20
	159 Move X2, X21
	160 Move X4, [X8+408]
	161 Move X3, [X8+416]
	162 Move X20, [X31+48]
	163 Move X19, [X31+56]
	164 Move X22, [X31+32]
	165 Move X21, [X31+40]
	166 Move X24, [X31+16]
	167 Move X23, [X31+24]
	168 Move X30, [X31+64]
	169 CallNoReturn X4
	170 Move X20, [X31+48]
	171 Move X19, [X31+56]
	172 Move X22, [X31+32]
	173 Move X21, [X31+40]
	174 Move X24, [X31+16]
	175 Move X23, [X31+24]
	176 Move W0, W31
	177 Move X30, [X31+64]
	178 Return X0
	179 Call 0x1C17F20
	180 Move X0, 0xF2D000
	181 Move X19, [X19+56]
	182 Move X0, [X0+320]
	183 Call 0x1C17D08
	184 Move X1, X19
	185 Move X2, X31
	186 Call String.Concat, X0, X1
	187 Move X19, X0
	188 Move X0, 0xF2C000
	189 Move X0, [X0+3296]
	190 Call 0x1C17D08
	191 Call 0x1C17F10
	192 Move X1, X19
	193 Move X2, X31
	194 Move X20, X0
	195 Call CryptographicException..ctor, X0, X1
	196 Move X0, 0xF2D000
	197 Move X0, [X0+328]
	198 Call 0x1C17D08
	199 Move X1, X0
	200 Move X0, X20
	201 Call 0x1C17DEC

Method: System.Boolean VerifySignature(System.Security.Cryptography.RSA rsa)

Disassembly:
	0x031F5454 LDP X20, X19, [X31 + 0x10]
	0x031F5458 LDR X30, [X31], #0x20
	0x031F545C RET
	0x031F5460 MOV X0, X19
	0x031F5464 MOV X1, X20
	0x031F5468 BL 0x1C171E0
	0x031F546C STR X1, [X0 + 0x48]
	0x031F5470 RET
	0x031F5474 STR X30, [X31 - 0x20]!
	0x031F5478 STP X20, X19, [X31 + 0x10]
	0x031F547C ADRP X20, 0x11E7000
	0x031F5480 LDRB W8, [X20 + 0x1A7]
	0x031F5484 MOV X19, X0
	0x031F5488 TBNZ X8, 0x0, 0x31F54A0
	0x031F548C ADRP X0, 0xEFE000
	0x031F5490 LDR X0, [X0 + 0x618]
	0x031F5494 BL 0x1C16CF4
	0x031F5498 MOVZ W8, 0x1
	0x031F549C STRB W8, [X20 + 0x1A7]
	0x031F54A0 LDR X0, [X19 + 0x60]
	0x031F54A4 CBZ X0, 0x31F54D0
	0x031F54A8 MOV X1, X31
	0x031F54AC BL 0x33A01F0
	0x031F54B0 CBZ X0, 0x31F54D0
	0x031F54B4 ADRP X8, 0xEFE000
	0x031F54B8 LDR X8, [X8 + 0x618]
	0x031F54BC MOV X19, X0
	0x031F54C0 LDR X20, [X8]
	0x031F54C4 MOV X1, X20
	0x031F54C8 BL 0x1C16E00
	0x031F54CC CBZ X0, 0x31F54DC
	0x031F54D0 LDP X20, X19, [X31 + 0x10]
	0x031F54D4 LDR X30, [X31], #0x20
	0x031F54D8 RET
	0x031F54DC MOV X0, X19
	0x031F54E0 MOV X1, X20
	0x031F54E4 BL 0x1C171E0
	0x031F54E8 SUB X31, X31, 0xD0
	0x031F54EC STP X30, X23, [X31 + 0xA0]
	0x031F54F0 STP X22, X21, [X31 + 0xB0]
	0x031F54F4 STP X20, X19, [X31 + 0xC0]
	0x031F54F8 ADRP X20, 0x11E7000
	0x031F54FC LDRB W8, [X20 + 0x1A8]
	0x031F5500 MOV X19, X0
	0x031F5504 TBNZ X8, 0x0, 0x31F5534
	0x031F5508 ADRP X0, 0xF2B000
	0x031F550C LDR X0, [X0 + 0xB98]
	0x031F5510 BL 0x1C16CF4
	0x031F5514 ADRP X0, 0xF2C000
	0x031F5518 LDR X0, [X0 + 0x1A0]
	0x031F551C BL 0x1C16CF4
	0x031F5520 ADRP X0, 0xF2B000
	0x031F5524 LDR X0, [X0 + 0xF60]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x11E8000
	008 Move X23, 0xF2D000
	009 Move X22, 0xF2C000
	010 Move W8, [X20+413]
	011 Move X23, [X23+336]
	012 Move X22, [X22+3976]
	013 Move X21, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xF2C000
	020 Move X0, [X0+3976]
	021 Call 0x1C17CF4
	022 Move X0, 0xF2D000
	023 Move X0, [X0+336]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+413], W8
	027 Move X0, [X23]
	028 Call 0x1C17F10
	029 Move X1, X21
	030 Move X2, X31
	031 Move X20, X0
	032 Call RSAPKCS1SignatureDeformatter..ctor, X0, X1
	033 Move X0, [X22]
	034 Move X21, [X19+56]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move W1, 1
	040 Move X0, X21
	041 Move X2, X31
	042 Call PKCS1.HashNameFromOid, X0, X1
	043 Compare X20, 0
	044 JumpIfEqual {66}
	045 Move X8, [X20]
	046 Move X1, X0
	047 Move X0, X20
	048 Move X9, [X8+392]
	049 Move X2, [X8+400]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move X0, X19
	052 Call X509Crl.get_Hash, X0
	053 Move X8, [X20]
	054 Move X2, [X19+64]
	055 Move X1, X0
	056 Move X0, X20
	057 Move X4, [X8+408]
	058 Move X3, [X8+416]
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X30, [X31+48]
	064 Move X23, [X31+56]
	065 CallNoReturn X4
	066 Call 0x1C17F20

Method: System.Boolean VerifySignature(System.Security.Cryptography.AsymmetricAlgorithm aa)

Disassembly:
	0x031F5528 BL 0x1C16CF4
	0x031F552C MOVZ W8, 0x1
	0x031F5530 STRB W8, [X20 + 0x1A8]
	0x031F5534 LDR X8, [X19 + 0x88]
	0x031F5538 CBNZ X8, 0x31F5658
	0x031F553C ADRP X8, 0xF2B000
	0x031F5540 LDR X0, [X19 + 0x40]
	0x031F5544 LDR X8, [X8 + 0xF60]
	0x031F5548 MOV X2, X31
	0x031F554C LDR X1, [X8]
	0x031F5550 BL 0x321BA08
	0x031F5554 TBZ X0, 0x0, 0x31F5658
	0x031F5558 ADRP X8, 0xF2B000
	0x031F555C LDR X8, [X8 + 0xB98]
	0x031F5560 MOVI V0.2D, 0x0
	0x031F5564 STP V0, V0, [X31 + 0x40]
	0x031F5568 STR V0, [X31 + 0x3]
	0x031F556C LDR X0, [X8]
	0x031F5570 LDR X21, [X19 + 0x60]
	0x031F5574 BL 0x1C16F10
	0x031F5578 MOV X1, X21
	0x031F557C MOV X20, X0
	0x031F5580 BL 0x31E7A44
	0x031F5584 CBZ X20, 0x31F5678
	0x031F5588 MOV X0, X20
	0x031F558C MOV W1, W31
	0x031F5590 BL 0x31E8704
	0x031F5594 CBZ X0, 0x31F565C
	0x031F5598 LDRB W8, [X0 + 0x10]
	0x031F559C MOV X21, X0
	0x031F55A0 CMP W8, 0x2
	0x031F55A4 B.NE 0x31F5670
	0x031F55A8 MOVZ W1, 0x1
	0x031F55AC MOV X0, X20
	0x031F55B0 BL 0x31E8704
	0x031F55B4 CBZ X0, 0x31F5678
	0x031F55B8 LDRB W8, [X0 + 0x10]
	0x031F55BC MOV X22, X0
	0x031F55C0 CMP W8, 0x2
	0x031F55C4 B.NE 0x31F5670
	0x031F55C8 MOV X0, X21
	0x031F55CC BL 0x31E7D00
	0x031F55D0 MOV X1, X0
	0x031F55D4 BL 0x31F50A4
	0x031F55D8 MOV X20, X0
	0x031F55DC MOV X0, X22
	0x031F55E0 BL 0x31E7D00
	0x031F55E4 CBZ X20, 0x31F5678
	0x031F55E8 ADRP X9, 0xF2C000
	0x031F55EC LDR W8, [X20 + 0x18]
	0x031F55F0 LDR X9, [X9 + 0x1A0]
	0x031F55F4 MOV X21, X0
	0x031F55F8 UBFM W23, W8, 0x1D, 0x1C
	0x031F55FC LDR X0, [X9]
	0x031F5600 BL 0x1C16F10
	0x031F5604 MOV W1, W23
	0x031F5608 MOV X2, X31
	0x031F560C MOV X22, X0
	0x031F5610 BL 0x325C420
	0x031F5614 STR X22, [X19 + 0x88]
	0x031F5618 LDP V0, V1, [X31 + 0x30]
	0x031F561C LDR V2, [X31 + 0x5]
	0x031F5620 STP V0, V1, [X31]
	0x031F5624 STR V2, [X31 + 0x2]
	0x031F5628 CBZ X22, 0x31F5678
	0x031F562C LDR X8, [X22]
	0x031F5630 LDP V0, V1, [X31]
	0x031F5634 LDR V2, [X31 + 0x2]
	0x031F5638 ADD X1, X31, 0x60
	0x031F563C LDR X9, [X8 + 0x1F8]
	0x031F5640 STP X21, X20, [X31 + 0x60]
	0x031F5644 STP V0, V1, [X31 + 0x70]
	0x031F5648 STR V2, [X31 + 0x9]
	0x031F564C LDR X2, [X8 + 0x200]
	0x031F5650 MOV X0, X22
	0x031F5654 BLR X9
	0x031F5658 LDR X0, [X19 + 0x88]
	0x031F565C LDP X20, X19, [X31 + 0xC0]
	0x031F5660 LDP X22, X21, [X31 + 0xB0]
	0x031F5664 LDP X30, X23, [X31 + 0xA0]
	0x031F5668 ADD X31, X31, 0xD0
	0x031F566C RET
	0x031F5670 MOV X0, X31
	0x031F5674 B 0x31F565C
	0x031F5678 BL 0x1C16F20
	0x031F567C CBZ X1, 0x31F5684
	0x031F5680 STR X31, [X0 + 0x90]
	0x031F5684 STR X1, [X0 + 0x88]
	0x031F5688 RET
	0x031F568C STR X30, [X31 - 0x20]!
	0x031F5690 STP X20, X19, [X31 + 0x10]
	0x031F5694 ADRP X20, 0x11E7000
	0x031F5698 LDRB W8, [X20 + 0x1A9]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11E8000
	006 Move W8, [X21+414]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xF2D000
	014 Move X0, [X0+344]
	015 Call 0x1C17CF4
	016 Move X0, 0xF2D000
	017 Move X0, [X0+352]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+414], W8
	021 Compare X19, 0
	022 JumpIfEqual {85}
	023 Move X9, 0xF2D000
	024 Move X9, [X9+352]
	025 Move X8, [X19]
	026 Move X10, [X9]
	027 Move W9, [X8+304]
	028 Move W11, [X10+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X12, [X8+200]
	031 Add X11, X12, X11
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X10, 0xF2D000
	035 Move X10, [X10+344]
	036 Move X10, [X10]
	037 Move W11, [X10+304]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X9, [X8+200]
	040 Add X9, X9, X11
	041 NotImplemented "Instruction LDUR not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, X20
	044 Move X1, X19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call X509Crl.VerifySignature, X0, X1
	050 Return X0
	051 Move X0, X20
	052 Move X1, X19
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Call X509Crl.VerifySignature, X0, X1
	058 Return X0
	059 Move X9, [X8+360]
	060 Move X1, [X8+368]
	061 Move X0, X19
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Move X19, X0
	064 Move X0, 0xF2D000
	065 Move X0, [X0+360]
	066 Call 0x1C17D08
	067 Move X1, X19
	068 Move X2, X31
	069 Call String.Concat, X0, X1
	070 Move X19, X0
	071 Move X0, 0xEFF000
	072 Move X0, [X0+2880]
	073 Call 0x1C17D08
	074 Call 0x1C17F10
	075 Move X1, X19
	076 Move X2, X31
	077 Move X20, X0
	078 Call NotSupportedException..ctor, X0, X1
	079 Move X0, 0xF2D000
	080 Move X0, [X0+368]
	081 Call 0x1C17D08
	082 Move X1, X0
	083 Move X0, X20
	084 Call 0x1C17DEC
	085 Move X0, 0xF04000
	086 Move X0, [X0+1320]
	087 Call 0x1C17D08
	088 Call 0x1C17F10
	089 Move X19, X0
	090 Move X0, 0xF2D000
	091 Move X0, [X0+376]
	092 Call 0x1C17D08
	093 Move X1, X0
	094 Move X0, X19
	095 Move X2, X31
	096 Call ArgumentNullException..ctor, X0, X1
	097 Move X0, 0xF2D000
	098 Move X0, [X0+368]
	099 Call 0x1C17D08
	100 Move X1, X0
	101 Move X0, X19
	102 Call 0x1C17DEC

