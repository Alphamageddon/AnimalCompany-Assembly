Type: Mono.Security.Cryptography.MD2

Method: System.Void .ctor()

Disassembly:
	0x031FECBC ADD W11, W15, W11
	0x031FECC0 ADD W11, W11, W0
	0x031FECC4 EXTR W11, W11, W11, 0x11
	0x031FECC8 ADD W11, W12, W11
	0x031FECCC CMP W8, 0x2
	0x031FECD0 STR W11, [X19 + 0x24]
	0x031FECD4 B.LS 0x31FED18
	0x031FECD8 LDR W11, [X19 + 0x28]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call HashAlgorithm..ctor, X0
	006 Move W8, 128
	007 Move [X19+20], W8
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 

Method: Mono.Security.Cryptography.MD2 Create()

Disassembly:
	0x031FECDC EXTR W10, W10, W10, 0x15
	0x031FECE0 CMP W8, 0x3
	0x031FECE4 ADD W10, W11, W10
	0x031FECE8 STR W10, [X19 + 0x28]
	0x031FECEC B.EQ 0x31FED18
	0x031FECF0 LDR W8, [X19 + 0x2C]
	0x031FECF4 LDP X22, X21, [X31 + 0x40]
	0x031FECF8 LDP X24, X23, [X31 + 0x30]
	0x031FECFC LDP X26, X25, [X31 + 0x20]
	0x031FED00 ADD W8, W8, W9
	0x031FED04 STR W8, [X19 + 0x2C]
	0x031FED08 LDP X20, X19, [X31 + 0x50]
	0x031FED0C LDP X28, X27, [X31 + 0x10]
	0x031FED10 LDR X30, [X31], #0x60
	0x031FED14 RET
	0x031FED18 BL 0x1C16F28
	0x031FED1C BL 0x1C16F20
	0x031FED20 STP X30, X21, [X31 - 0x20]!
	0x031FED24 STP X20, X19, [X31 + 0x10]
	0x031FED28 ADRP X20, 0x11DE000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x11DF000
	005 Move X20, 0xF24000
	006 Move W8, [X19+528]
	007 Move X20, [X20+1040]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF24000
	013 Move X0, [X0+1040]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+528], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X19, X0
	020 Call MD2Managed..ctor, X0
	021 Move X0, X19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Return X0

