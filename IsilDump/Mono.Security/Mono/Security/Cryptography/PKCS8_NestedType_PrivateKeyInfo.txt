Type: Mono.Security.Cryptography.PKCS8/PrivateKeyInfo

Method: System.Void .ctor()

Disassembly:
	0x032011D8 MOVZ W8, 0x1
	0x032011DC STRB W8, [X20 + 0x22B]
	0x032011E0 LDR X0, [X19 + 0x28]
	0x032011E4 CBZ X0, 0x3201210
	0x032011E8 MOV X1, X31
	0x032011EC BL 0x33A01F0
	0x032011F0 CBZ X0, 0x3201210
	0x032011F4 ADRP X8, 0xEF2000
	0x032011F8 LDR X8, [X8 + 0x618]
	0x032011FC MOV X19, X0
	0x03201200 LDR X20, [X8]
	0x03201204 MOV X1, X20
	0x03201208 BL 0x1C16E00
	0x0320120C CBZ X0, 0x320121C
	0x03201210 LDP X20, X19, [X31 + 0x10]
	0x03201214 LDR X30, [X31], #0x20
	0x03201218 RET
	0x0320121C MOV X0, X19
	0x03201220 MOV X1, X20
	0x03201224 BL 0x1C171E0
	0x03201228 STP X30, X21, [X31 - 0x20]!
	0x0320122C STP X20, X19, [X31 + 0x10]
	0x03201230 ADRP X20, 0x11DB000
	0x03201234 LDRB W8, [X20 + 0x22C]
	0x03201238 MOV X19, X0
	0x0320123C TBNZ X8, 0x0, 0x3201254

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11DC000
	006 Move X20, 0xF20000
	007 Move W8, [X21+546]
	008 Move X20, [X20+2976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF20000
	015 Move X0, [X0+2976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+546], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move [X19+16], W31
	023 Move X0, [X20]
	024 Call 0x1C17F10
	025 Move X1, X31
	026 Move X20, X0
	027 Call ArrayList..ctor, X0
	028 Move [X19+40], X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 

Method: System.Void .ctor(System.Byte[] data)

Disassembly:
	0x03201240 ADRP X0, 0xEF2000
	0x03201244 LDR X0, [X0 + 0x618]
	0x03201248 BL 0x1C16CF4
	0x0320124C MOVZ W8, 0x1
	0x03201250 STRB W8, [X20 + 0x22C]
	0x03201254 ADRP X21, 0xEF2000
	0x03201258 LDR X0, [X19 + 0x18]
	0x0320125C LDR X21, [X21 + 0x618]
	0x03201260 CBNZ X0, 0x320129C
	0x03201264 BL 0x3256158

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call PrivateKeyInfo..ctor, X0
	007 Move X0, X20
	008 Move X1, X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]

Method: System.String get_Algorithm()

Disassembly:
	0x032014C0 LDR W9, [X8 + 0xE0]
	0x032014C4 CBNZ W9, 0x32014D0

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Byte[] get_PrivateKey()

Disassembly:
	0x032014C8 MOV X0, X8
	0x032014CC BL 0x1C16DFC
	0x032014D0 ORR W0, W31, 0x10001
	0x032014D4 BL 0x32016C0
	0x032014D8 STR X0, [X19 + 0x60]
	0x032014DC LDR X0, [X23]
	0x032014E0 LDR W8, [X0 + 0xE0]
	0x032014E4 CBNZ W8, 0x32014EC
	0x032014E8 BL 0x1C16DFC
	0x032014EC MOV W0, W21
	0x032014F0 BL 0x3201718
	0x032014F4 ORR W1, W31, 0x10001
	0x032014F8 STR X0, [X19 + 0x30]
	0x032014FC BL 0x3206008
	0x03201500 CMP W0, 0x1
	0x03201504 B.EQ 0x32014DC
	0x03201508 B 0x3201538
	0x0320150C LDR X0, [X23]
	0x03201510 LDR X22, [X19 + 0x38]
	0x03201514 LDR W8, [X0 + 0xE0]
	0x03201518 CBNZ W8, 0x3201520
	0x0320151C BL 0x1C16DFC
	0x03201520 MOV X0, X21
	0x03201524 MOV X1, X22
	0x03201528 BL 0x3205D00
	0x0320152C TBZ X0, 0x1F, 0x3201538
	0x03201530 LDR X8, [X19 + 0x38]
	0x03201534 STR X8, [X19 + 0x30]
	0x03201538 LDR X0, [X23]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11DC000
	005 Move W8, [X20+547]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEF3000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+547], W8
	016 Move X0, [X19+32]
	017 Compare X0, 0
	018 JumpIfEqual {31}
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0xEF3000
	024 Move X8, [X8+1560]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {35}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Move X0, X19
	036 Move X1, X20
	037 Call 0x1C181E0

Method: System.Void Decode(System.Byte[] data)

Disassembly:
	0x03201268 LDR X8, [X21]
	0x0320126C MOV X20, X0
	0x03201270 MOVZ W1, 0x8
	0x03201274 MOV X0, X8
	0x03201278 BL 0x1C16D6C
	0x0320127C STR X0, [X19 + 0x18]
	0x03201280 CBZ X20, 0x32012CC
	0x03201284 LDR X8, [X20]
	0x03201288 MOV X1, X0
	0x0320128C MOV X0, X20
	0x03201290 LDP X9, X2, [X8 + 0x198]
	0x03201294 BLR X9
	0x03201298 LDR X0, [X19 + 0x18]
	0x0320129C CBZ X0, 0x32012CC
	0x032012A0 MOV X1, X31
	0x032012A4 BL 0x33A01F0
	0x032012A8 CBZ X0, 0x32012C0
	0x032012AC LDR X20, [X21]
	0x032012B0 MOV X19, X0
	0x032012B4 MOV X1, X20
	0x032012B8 BL 0x1C16E00
	0x032012BC CBZ X0, 0x32012D0
	0x032012C0 LDP X20, X19, [X31 + 0x10]
	0x032012C4 LDP X30, X21, [X31], #0x20
	0x032012C8 RET
	0x032012CC BL 0x1C16F20
	0x032012D0 MOV X0, X19
	0x032012D4 MOV X1, X20
	0x032012D8 BL 0x1C171E0
	0x032012DC LDR W0, [X0 + 0x20]
	0x032012E0 RET
	0x032012E4 MOVZ W1, 0x400
	0x032012E8 B 0x32012EC
	0x032012EC STP X30, X23, [X31 - 0x30]!
	0x032012F0 STP X22, X21, [X31 + 0x10]
	0x032012F4 STP X20, X19, [X31 + 0x20]
	0x032012F8 ADRP X23, 0x11DB000
	0x032012FC ADRP X21, 0xF20000
	0x03201300 ADRP X22, 0xF20000
	0x03201304 LDRB W8, [X23 + 0x22E]
	0x03201308 LDR X21, [X21 + 0x520]
	0x0320130C LDR X22, [X22 + 0x528]
	0x03201310 MOV W19, W1
	0x03201314 MOV X20, X0
	0x03201318 TBNZ X8, 0x0, 0x320133C
	0x0320131C ADRP X0, 0xF20000
	0x03201320 LDR X0, [X0 + 0x520]
	0x03201324 BL 0x1C16CF4
	0x03201328 ADRP X0, 0xF20000
	0x0320132C LDR X0, [X0 + 0x528]
	0x03201330 BL 0x1C16CF4
	0x03201334 MOVZ W8, 0x1
	0x03201338 STRB W8, [X23 + 0x22E]
	0x0320133C MOVZ W8, 0x1
	0x03201340 MOV X0, X20
	0x03201344 MOV X1, X31
	0x03201348 STRB W8, [X20 + 0x21]
	0x0320134C BL 0x325B958
	0x03201350 LDR X0, [X21]
	0x03201354 MOVZ W1, 0x1
	0x03201358 BL 0x1C16D6C
	0x0320135C STR X0, [X20 + 0x18]
	0x03201360 MOV X21, X0
	0x03201364 LDR X0, [X22]
	0x03201368 BL 0x1C16F10
	0x0320136C MOVZ W1, 0x180
	0x03201370 MOVZ W2, 0x4000
	0x03201374 MOVZ W3, 0x8
	0x03201378 MOV X4, X31
	0x0320137C MOV X22, X0
	0x03201380 BL 0x3251FDC
	0x03201384 CBZ X21, 0x32013B0
	0x03201388 LDR W8, [X21 + 0x18]
	0x0320138C CBZ W8, 0x32013B4
	0x03201390 STR X22, [X21 + 0x20]
	0x03201394 MOV X0, X20
	0x03201398 MOV W1, W19
	0x0320139C LDP X20, X19, [X31 + 0x20]
	0x032013A0 LDP X22, X21, [X31 + 0x10]
	0x032013A4 MOV X2, X31
	0x032013A8 LDP X30, X23, [X31], #0x30
	0x032013AC B 0x325209C
	0x032013B0 BL 0x1C16F20
	0x032013B4 BL 0x1C16F28
	0x032013B8 STP X30, X21, [X31 - 0x20]!
	0x032013BC STP X20, X19, [X31 + 0x10]
	0x032013C0 LDR X8, [X0]
	0x032013C4 MOV X19, X0
	0x032013C8 LDP X9, X2, [X8 + 0x188]
	0x032013CC MOV W1, W31
	0x032013D0 BLR X9
	0x032013D4 MOV X0, X19
	0x032013D8 LDP X20, X19, [X31 + 0x10]
	0x032013DC MOV X1, X31
	0x032013E0 LDP X30, X21, [X31], #0x20
	0x032013E4 B 0x33CB4DC
	0x032013E8 CMP W1, 0x1
	0x032013EC MOV X21, X0
	0x032013F0 B.NE 0x3201420
	0x032013F4 MOV X0, X21
	0x032013F8 BL 0x3EB1AD0
	0x032013FC LDR X20, [X0]
	0x03201400 BL 0x3EB1AE0
	0x03201404 MOV X0, X19
	0x03201408 MOV X1, X31
	0x0320140C BL 0x33CB4DC
	0x03201410 CBNZ X20, 0x3201428
	0x03201414 LDP X20, X19, [X31 + 0x10]
	0x03201418 LDP X30, X21, [X31], #0x20
	0x0320141C RET
	0x03201420 MOV X20, X31
	0x03201424 B 0x3201434
	0x03201428 MOV X0, X20
	0x0320142C BL 0x1C16F18
	0x03201430 MOV X21, X0
	0x03201434 MOV X0, X19
	0x03201438 MOV X1, X31
	0x0320143C BL 0x33CB4DC
	0x03201440 CBNZ X20, 0x320144C
	0x03201444 MOV X0, X21
	0x03201448 BL 0x1D2C690
	0x0320144C MOV X0, X20
	0x03201450 BL 0x1C16F18
	0x03201454 BL 0x1990590
	0x03201458 STP X30, X23, [X31 - 0x30]!
	0x0320145C STP X22, X21, [X31 + 0x10]
	0x03201460 STP X20, X19, [X31 + 0x20]
	0x03201464 ADRP X20, 0x11DB000
	0x03201468 ADRP X23, 0xF20000
	0x0320146C LDRB W8, [X20 + 0x22F]
	0x03201470 LDR X23, [X23 + 0x530]
	0x03201474 MOV X19, X0
	0x03201478 TBNZ X8, 0x0, 0x3201490
	0x0320147C ADRP X0, 0xF20000
	0x03201480 LDR X0, [X0 + 0x530]
	0x03201484 BL 0x1C16CF4
	0x03201488 MOVZ W8, 0x1
	0x0320148C STRB W8, [X20 + 0x22F]
	0x03201490 LDR X8, [X19]
	0x03201494 MOV X0, X19
	0x03201498 LDP X9, X1, [X8 + 0x198]
	0x0320149C BLR X9
	0x032014A0 LDR X8, [X19]
	0x032014A4 ADD W20, W0, 0x1
	0x032014A8 MOV X0, X19
	0x032014AC SBFM W21, W20, 0x1, 0x1F
	0x032014B0 LDP X9, X1, [X8 + 0x198]
	0x032014B4 BLR X9
	0x032014B8 LDR X8, [X23]
	0x032014BC SUB W20, W0, W20, 0x1, ASR

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11DC000
	007 Move X22, 0xF20000
	008 Move W8, [X20+548]
	009 Move X22, [X22+2968]
	010 Move X21, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF20000
	017 Move X0, [X0+2968]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+548], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X21
	024 Move X2, X31
	025 Move X20, X0
	026 Call ASN1..ctor, X0, X1
	027 Compare X20, 0
	028 JumpIfEqual {117}
	029 Move W8, [X20+16]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X20
	032 Move W1, W31
	033 Move X2, X31
	034 Call ASN1.get_Item, X0, X1
	035 Compare X0, 0
	036 JumpIfEqual {117}
	037 Move W8, [X0+16]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X1, X31
	040 Call ASN1.get_Value, X0
	041 Compare X0, 0
	042 JumpIfEqual {117}
	043 Move W8, [X0+24]
	044 Compare W8, 0
	045 JumpIfEqual {132}
	046 Move W8, [X0+32]
	047 Move W1, 1
	048 Move X0, X20
	049 Move X2, X31
	050 Move [X19+16], W8
	051 Call ASN1.get_Item, X0, X1
	052 Compare X0, 0
	053 JumpIfEqual {117}
	054 Move W8, [X0+16]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CSEL not yet implemented."
	057 Compare X0, 0
	058 JumpIfEqual {117}
	059 Move W1, W31
	060 Move X2, X31
	061 Call ASN1.get_Item, X0, X1
	062 Compare X0, 0
	063 JumpIfEqual {117}
	064 Move W8, [X0+16]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X1, X31
	067 Call ASN1Convert.ToOid, X0
	068 Move [X19+24], X0
	069 Move W1, 2
	070 Move X0, X20
	071 Move X2, X31
	072 Call ASN1.get_Item, X0, X1
	073 Compare X0, 0
	074 JumpIfEqual {117}
	075 Move X1, X31
	076 Call ASN1.get_Value, X0
	077 Move [X19+32], X0
	078 Move X0, X20
	079 Move X1, X31
	080 Call ASN1.get_Count, X0
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move W1, 3
	083 Move X0, X20
	084 Move X2, X31
	085 Call ASN1.get_Item, X0, X1
	086 Compare X0, 0
	087 JumpIfEqual {117}
	088 Move X1, X31
	089 Move X20, X0
	090 Call ASN1.get_Count, X0
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move W21, W31
	093 Move X22, [X19+40]
	094 Move X0, X20
	095 Move W1, W21
	096 Move X2, X31
	097 Call ASN1.get_Item, X0, X1
	098 Compare X22, 0
	099 JumpIfEqual {117}
	100 Move X8, [X22]
	101 Move X1, X0
	102 Move X0, X22
	103 Move X9, [X8+776]
	104 Move X2, [X8+784]
	105 NotImplemented "Instruction BLR not yet implemented."
	106 Move X0, X20
	107 Move X1, X31
	108 Add W21, W21, 1
	109 Call ASN1.get_Count, X0
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move X20, [X31+32]
	112 Move X19, [X31+40]
	113 Move X22, [X31+16]
	114 Move X21, [X31+24]
	115 Move X30, [X31+48]
	116 Return 
	117 Call 0x1C17F20
	118 Move X0, 0xF20000
	119 Move X0, [X0+3296]
	120 Call 0x1C17D08
	121 Call 0x1C17F10
	122 Move X19, X0
	123 Move X0, 0xF21000
	124 Move X0, [X0+1152]
	125 Move X0, 0xF20000
	126 Move X0, [X0+3296]
	127 Call 0x1C17D08
	128 Call 0x1C17F10
	129 Move X19, X0
	130 Move X0, 0xF21000
	131 Move X0, [X0+1160]
	132 Call 0x1C17F28
	133 Move X0, 0xF20000
	134 Move X0, [X0+3296]
	135 Call 0x1C17D08
	136 Call 0x1C17F10
	137 Move X19, X0
	138 Move X0, 0xF21000
	139 Move X0, [X0+1168]
	140 Move X0, 0xF20000
	141 Move X0, [X0+3296]
	142 Call 0x1C17D08
	143 Call 0x1C17F10
	144 Move X19, X0
	145 Move X0, 0xF21000
	146 Move X0, [X0+1176]
	147 Call 0x1C17D08
	148 Move X1, X0
	149 Move X0, X19
	150 Move X2, X31
	151 Call CryptographicException..ctor, X0, X1
	152 Move X0, 0xF21000
	153 Move X0, [X0+1184]
	154 Call 0x1C17D08
	155 Move X1, X0
	156 Move X0, X19
	157 Call 0x1C17DEC

Method: System.Byte[] RemoveLeadingZero(System.Byte[] bigInt)

Disassembly:
	0x0320153C LDR W8, [X0 + 0xE0]
	0x03201540 CBNZ W8, 0x3201548
	0x03201544 BL 0x1C16DFC
	0x03201548 MOV W0, W20
	0x0320154C BL 0x3201718
	0x03201550 ORR W1, W31, 0x10001
	0x03201554 STR X0, [X19 + 0x38]
	0x03201558 BL 0x3206008
	0x0320155C CMP W0, 0x1
	0x03201560 B.EQ 0x3201538
	0x03201564 LDR X0, [X23]
	0x03201568 LDP X22, X21, [X19 + 0x30]
	0x0320156C LDR W8, [X0 + 0xE0]
	0x03201570 CBNZ W8, 0x3201578
	0x03201574 BL 0x1C16DFC
	0x03201578 MOV X0, X22
	0x0320157C MOV X1, X21
	0x03201580 BL 0x3201788
	0x03201584 TBZ X0, 0x0, 0x3201538
	0x03201588 LDR X0, [X23]
	0x0320158C LDP X22, X21, [X19 + 0x30]
	0x03201590 LDR W8, [X0 + 0xE0]
	0x03201594 CBNZ W8, 0x320159C
	0x03201598 BL 0x1C16DFC
	0x0320159C MOV X0, X22
	0x032015A0 MOV X1, X21
	0x032015A4 BL 0x3201838
	0x032015A8 STR X0, [X19 + 0x58]
	0x032015AC CBZ X0, 0x32016BC
	0x032015B0 BL 0x32019E0
	0x032015B4 LDR X8, [X19]
	0x032015B8 MOV W22, W0
	0x032015BC MOV X0, X19
	0x032015C0 LDP X9, X1, [X8 + 0x198]
	0x032015C4 BLR X9
	0x032015C8 LDR X21, [X19 + 0x30]
	0x032015CC CMP W22, W0
	0x032015D0 B.NE 0x320150C
	0x032015D4 LDR X0, [X23]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x11DC000
	007 Move W8, [X20+549]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEF3000
	014 Move X0, [X0+1560]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+549], W8
	018 Compare X19, 0
	019 JumpIfEqual {47}
	020 Move W8, [X19+24]
	021 Compare W8, 0
	022 JumpIfEqual {48}
	023 Move X10, 0xEF3000
	024 Move W9, [X19+32]
	025 Move X10, [X10+1560]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, [X10]
	028 NotImplemented "Instruction CSET not yet implemented."
	029 Subtract W21, W8, W20
	030 Move W1, W21
	031 Call 0x1C17D6C
	032 Move X22, X0
	033 Move X0, X19
	034 Move W1, W20
	035 Move X2, X22
	036 Move W3, W31
	037 Move W4, W21
	038 Move X5, X31
	039 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	040 Move X0, X22
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return X0
	047 Call 0x1C17F20
	048 Call 0x1C17F28

Method: System.Byte[] Normalize(System.Byte[] bigInt, System.Int32 length)

Disassembly:
	0x032015D8 LDR W8, [X0 + 0xE0]
	0x032015DC CBNZ W8, 0x32015E4
	0x032015E0 BL 0x1C16DFC
	0x032015E4 MOVZ W0, 0x1
	0x032015E8 BL 0x3201A60
	0x032015EC MOV X1, X0
	0x032015F0 MOV X0, X21
	0x032015F4 BL 0x3201B04
	0x032015F8 LDR X21, [X19 + 0x38]
	0x032015FC MOV X20, X0
	0x03201600 MOVZ W0, 0x1
	0x03201604 BL 0x3201A60
	0x03201608 MOV X1, X0
	0x0320160C MOV X0, X21
	0x03201610 BL 0x3201B04
	0x03201614 MOV X21, X0
	0x03201618 MOV X0, X20
	0x0320161C MOV X1, X21
	0x03201620 BL 0x3201838
	0x03201624 LDR X8, [X19 + 0x60]
	0x03201628 CBZ X8, 0x32016BC
	0x0320162C MOV X1, X0
	0x03201630 MOV X0, X8
	0x03201634 BL 0x3207288
	0x03201638 MOV X1, X20
	0x0320163C STR X0, [X19 + 0x28]
	0x03201640 BL 0x3201C74
	0x03201644 LDR X8, [X19 + 0x28]
	0x03201648 STR X0, [X19 + 0x40]
	0x0320164C MOV X1, X21
	0x03201650 MOV X0, X8
	0x03201654 BL 0x3201C74
	0x03201658 LDR X8, [X19 + 0x38]
	0x0320165C STR X0, [X19 + 0x48]
	0x03201660 CBZ X8, 0x32016BC
	0x03201664 LDR X1, [X19 + 0x30]
	0x03201668 MOV X0, X8
	0x0320166C BL 0x3207288
	0x03201670 LDR X8, [X19 + 0x68]
	0x03201674 MOVZ W9, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11DC000
	006 Move W8, [X21+550]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEF3000
	014 Move X0, [X0+1560]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+550], W8
	018 Compare X19, 0
	019 JumpIfEqual {49}
	020 Move W8, [X19+24]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X0, X19
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Call PrivateKeyInfo.RemoveLeadingZero, X0
	028 Return X0
	029 Move X8, 0xEF3000
	030 Move X8, [X8+1560]
	031 Move W1, W20
	032 Move X0, [X8]
	033 Call 0x1C17D6C
	034 Move W4, [X19+24]
	035 Move X21, X0
	036 Move X0, X19
	037 Move W1, W31
	038 Subtract W3, W20, W4
	039 Move X2, X21
	040 Move X5, X31
	041 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	042 Move X19, X21
	043 Move X0, X19
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return X0
	049 Call 0x1C17F20

Method: System.Security.Cryptography.RSA DecodeRSA(System.Byte[] keypair)

Disassembly:
	0x03201678 STR X0, [X19 + 0x50]
	0x0320167C STRB W9, [X19 + 0x22]
	0x03201680 STRB W9, [X19 + 0x20]
	0x03201684 CBZ X8, 0x32016AC
	0x03201688 LDR X4, [X8 + 0x18]
	0x0320168C LDR X0, [X8 + 0x40]
	0x03201690 LDR X3, [X8 + 0x28]
	0x03201694 MOV X1, X19
	0x03201698 LDP X20, X19, [X31 + 0x20]
	0x0320169C LDP X22, X21, [X31 + 0x10]
	0x032016A0 MOV X2, X31
	0x032016A4 LDP X30, X23, [X31], #0x30
	0x032016A8 BR X4
	0x032016AC LDP X20, X19, [X31 + 0x20]
	0x032016B0 LDP X22, X21, [X31 + 0x10]
	0x032016B4 LDP X30, X23, [X31], #0x30
	0x032016B8 RET
	0x032016BC BL 0x1C16F20
	0x032016C0 STP X30, X21, [X31 - 0x20]!
	0x032016C4 STP X20, X19, [X31 + 0x10]
	0x032016C8 ADRP X20, 0x11DB000
	0x032016CC ADRP X21, 0xF20000
	0x032016D0 LDRB W8, [X20 + 0x246]
	0x032016D4 LDR X21, [X21 + 0x530]
	0x032016D8 MOV W19, W0
	0x032016DC TBNZ X8, 0x0, 0x32016F4
	0x032016E0 ADRP X0, 0xF20000
	0x032016E4 LDR X0, [X0 + 0x530]
	0x032016E8 BL 0x1C16CF4
	0x032016EC MOVZ W8, 0x1
	0x032016F0 STRB W8, [X20 + 0x246]
	0x032016F4 LDR X0, [X21]
	0x032016F8 BL 0x1C16F10
	0x032016FC MOV W1, W19
	0x03201700 MOV X20, X0
	0x03201704 BL 0x3205C0C
	0x03201708 MOV X0, X20
	0x0320170C LDP X20, X19, [X31 + 0x10]
	0x03201710 LDP X30, X21, [X31], #0x20
	0x03201714 RET
	0x03201718 STP X30, X21, [X31 - 0x20]!
	0x0320171C STP X20, X19, [X31 + 0x10]
	0x03201720 ADRP X20, 0x11DB000
	0x03201724 ADRP X21, 0xF20000
	0x03201728 LDRB W8, [X20 + 0x255]
	0x0320172C LDR X21, [X21 + 0x538]
	0x03201730 MOV W19, W0
	0x03201734 TBNZ X8, 0x0, 0x320174C
	0x03201738 ADRP X0, 0xF20000
	0x0320173C LDR X0, [X0 + 0x538]
	0x03201740 BL 0x1C16CF4
	0x03201744 MOVZ W8, 0x1
	0x03201748 STRB W8, [X20 + 0x255]
	0x0320174C LDR X0, [X21]
	0x03201750 BL 0x1C16F10
	0x03201754 MOV X1, X31
	0x03201758 MOV X20, X0
	0x0320175C BL 0x33BDD8C
	0x03201760 CBZ X20, 0x3201780
	0x03201764 LDR X8, [X20]
	0x03201768 MOV X0, X20
	0x0320176C MOV W1, W19
	0x03201770 LDP X20, X19, [X31 + 0x10]
	0x03201774 LDP X3, X2, [X8 + 0x1A8]
	0x03201778 LDP X30, X21, [X31], #0x20
	0x0320177C BR X3
	0x03201780 BL 0x1C16F20
	0x03201784 B 0x3206008
	0x03201788 STP X30, X21, [X31 - 0x20]!
	0x0320178C STP X20, X19, [X31 + 0x10]
	0x03201790 ADRP X21, 0x11DB000
	0x03201794 LDRB W8, [X21 + 0x250]
	0x03201798 MOV X19, X1
	0x0320179C MOV X20, X0
	0x032017A0 TBNZ X8, 0x0, 0x32017B8
	0x032017A4 ADRP X0, 0xF20000
	0x032017A8 LDR X0, [X0 + 0x530]
	0x032017AC BL 0x1C16CF4
	0x032017B0 MOVZ W8, 0x1
	0x032017B4 STRB W8, [X21 + 0x250]
	0x032017B8 CMP X20, X19
	0x032017BC B.EQ 0x3201810
	0x032017C0 ADRP X21, 0xF20000
	0x032017C4 LDR X21, [X21 + 0x530]
	0x032017C8 LDR X0, [X21]
	0x032017CC LDR W8, [X0 + 0xE0]
	0x032017D0 CBNZ W8, 0x32017D8
	0x032017D4 BL 0x1C16DFC
	0x032017D8 MOV X0, X31
	0x032017DC MOV X1, X20
	0x032017E0 BL 0x3201DDC
	0x032017E4 TBNZ X0, 0x0, 0x3201808
	0x032017E8 LDR X0, [X21]
	0x032017EC LDR W8, [X0 + 0xE0]
	0x032017F0 CBNZ W8, 0x32017F8
	0x032017F4 BL 0x1C16DFC
	0x032017F8 MOV X0, X31
	0x032017FC MOV X1, X19
	0x03201800 BL 0x3201DDC
	0x03201804 TBZ X0, 0x0, 0x3201818
	0x03201808 MOVZ W0, 0x1
	0x0320180C B 0x320182C
	0x03201810 MOV W0, W31
	0x03201814 B 0x320182C
	0x03201818 MOV X0, X20
	0x0320181C MOV X1, X19
	0x03201820 BL 0x3205D00
	0x03201824 CMP W0, 0x0
	0x03201828 CSET W0, NE
	0x0320182C LDP X20, X19, [X31 + 0x10]
	0x03201830 LDP X30, X21, [X31], #0x20
	0x03201834 RET
	0x03201838 SUB X31, X31, 0x40
	0x0320183C STP X30, X23, [X31 + 0x10]
	0x03201840 STP X22, X21, [X31 + 0x20]
	0x03201844 STP X20, X19, [X31 + 0x30]
	0x03201848 ADRP X22, 0x11DB000
	0x0320184C ADRP X21, 0xF20000
	0x03201850 LDRB W8, [X22 + 0x249]
	0x03201854 LDR X21, [X21 + 0x530]
	0x03201858 MOV X20, X1
	0x0320185C MOV X19, X0
	0x03201860 TBNZ X8, 0x0, 0x3201878
	0x03201864 ADRP X0, 0xF20000
	0x03201868 LDR X0, [X0 + 0x530]
	0x0320186C BL 0x1C16CF4
	0x03201870 MOVZ W8, 0x1
	0x03201874 STRB W8, [X22 + 0x249]
	0x03201878 LDR X0, [X21]
	0x0320187C LDR W8, [X0 + 0xE0]
	0x03201880 CBNZ W8, 0x3201888
	0x03201884 BL 0x1C16DFC
	0x03201888 MOV X0, X19
	0x0320188C MOV W1, W31
	0x03201890 BL 0x3205C94
	0x03201894 TBNZ X0, 0x0, 0x32018B8
	0x03201898 LDR X0, [X21]
	0x0320189C LDR W8, [X0 + 0xE0]
	0x032018A0 CBNZ W8, 0x32018A8
	0x032018A4 BL 0x1C16DFC
	0x032018A8 MOV X0, X20
	0x032018AC MOV W1, W31
	0x032018B0 BL 0x3205C94
	0x032018B4 TBZ X0, 0x0, 0x32018E0
	0x032018B8 LDR X0, [X21]
	0x032018BC LDR W8, [X0 + 0xE0]
	0x032018C0 CBNZ W8, 0x32018C8
	0x032018C4 BL 0x1C16DFC
	0x032018C8 LDP X20, X19, [X31 + 0x30]
	0x032018CC LDP X22, X21, [X31 + 0x20]
	0x032018D0 LDP X30, X23, [X31 + 0x10]
	0x032018D4 MOV W0, W31
	0x032018D8 ADD X31, X31, 0x40
	0x032018DC B 0x3201A60
	0x032018E0 CBZ X19, 0x3201974
	0x032018E4 LDR X8, [X19 + 0x18]
	0x032018E8 CBZ X8, 0x3201974
	0x032018EC LDR W22, [X19 + 0x10]
	0x032018F0 LDRSW X8, [X8 + 0x18]
	0x032018F4 CMP X8, X22
	0x032018F8 B.LT 0x3201978
	0x032018FC CBZ X20, 0x3201974
	0x03201900 LDR X8, [X20 + 0x18]
	0x03201904 CBZ X8, 0x3201974
	0x03201908 LDR W23, [X20 + 0x10]
	0x0320190C LDRSW X8, [X8 + 0x18]
	0x03201910 CMP X8, X23
	0x03201914 B.LT 0x3201998
	0x03201918 LDR X0, [X21]
	0x0320191C BL 0x1C16F10
	0x03201920 ADD W2, W23, W22
	0x03201924 MOV X21, X0
	0x03201928 BL 0x32059AC
	0x0320192C CBZ X21, 0x3201974
	0x03201930 LDR W5, [X20 + 0x10]
	0x03201934 LDR X3, [X20 + 0x18]
	0x03201938 LDR W2, [X19 + 0x10]
	0x0320193C LDR X0, [X19 + 0x18]
	0x03201940 LDR X6, [X21 + 0x18]
	0x03201944 MOV W1, W31
	0x03201948 MOV W4, W31
	0x0320194C MOV W7, W31
	0x03201950 BL 0x32064FC
	0x03201954 MOV X0, X21
	0x03201958 BL 0x3205BB4
	0x0320195C MOV X0, X21
	0x03201960 LDP X20, X19, [X31 + 0x30]
	0x03201964 LDP X22, X21, [X31 + 0x20]
	0x03201968 LDP X30, X23, [X31 + 0x10]
	0x0320196C ADD X31, X31, 0x40
	0x03201970 RET
	0x03201974 BL 0x1C16F20
	0x03201978 ADRP X0, 0xEFC000
	0x0320197C LDR X0, [X0 + 0xF78]
	0x03201980 BL 0x1C16D08
	0x03201984 BL 0x1C16F10
	0x03201988 MOV X19, X0
	0x0320198C ADRP X0, 0xF20000
	0x03201990 LDR X0, [X0 + 0x540]
	0x03201994 B 0x32019B4
	0x03201998 ADRP X0, 0xEFC000
	0x0320199C LDR X0, [X0 + 0xF78]
	0x032019A0 BL 0x1C16D08
	0x032019A4 BL 0x1C16F10
	0x032019A8 MOV X19, X0
	0x032019AC ADRP X0, 0xF20000
	0x032019B0 LDR X0, [X0 + 0x548]
	0x032019B4 BL 0x1C16D08
	0x032019B8 MOV X1, X0
	0x032019BC MOV X0, X19
	0x032019C0 MOV X2, X31
	0x032019C4 BL 0x3379B6C
	0x032019C8 ADRP X0, 0xF20000
	0x032019CC LDR X0, [X0 + 0x550]
	0x032019D0 BL 0x1C16D08
	0x032019D4 MOV X1, X0
	0x032019D8 MOV X0, X19
	0x032019DC BL 0x1C16DEC
	0x032019E0 STP X30, X19, [X31 - 0x10]!
	0x032019E4 MOV X19, X0
	0x032019E8 BL 0x3205BB4
	0x032019EC LDR X9, [X19 + 0x18]
	0x032019F0 CBZ X9, 0x3201A44
	0x032019F4 LDR W8, [X19 + 0x10]
	0x032019F8 LDR W10, [X9 + 0x18]
	0x032019FC SUB W8, W8, 0x1
	0x03201A00 CMP W8, W10
	0x03201A04 B.CS 0x3201A48
	0x03201A08 ADD X9, X9, W8, 0x2, SXTW
	0x03201A0C LDR W10, [X9 + 0x20]
	0x03201A10 TBNZ X10, 0x1F, 0x3201A34
	0x03201A14 MOVZ W9, 0x20
	0x03201A18 MOVZ W11, 0x80000000
	0x03201A1C SUBS W9, W9, 0x1
	0x03201A20 B.EQ 0x3201A38
	0x03201A24 AND W12, W10, W11, 0x1
	0x03201A28 UBFM W11, W11, 0x1, 0x1F
	0x03201A2C CBZ W12, 0x3201A1C
	0x03201A30 B 0x3201A38
	0x03201A34 MOVZ W9, 0x20
	0x03201A38 ADD W0, W9, W8, 0x5, LSL

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+128], X30
	003 Move [X31+144], X28
	004 Move [X31+152], X27
	005 Move [X31+160], X26
	006 Move [X31+168], X25
	007 Move [X31+176], X24
	008 Move [X31+184], X23
	009 Move [X31+192], X22
	010 Move [X31+200], X21
	011 Move [X31+208], X20
	012 Move [X31+216], X19
	013 Move X20, 0x11DC000
	014 Move X21, 0xF20000
	015 Move W8, [X20+551]
	016 Move X21, [X21+2968]
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF20000
	023 Move X0, [X0+2968]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+551], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X1, X19
	030 Move X2, X31
	031 Move X24, X0
	032 Call ASN1..ctor, X0, X1
	033 Compare X24, 0
	034 JumpIfEqual {258}
	035 Move W8, [X24+16]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X24
	038 Move W1, W31
	039 Move X2, X31
	040 Call ASN1.get_Item, X0, X1
	041 Compare X0, 0
	042 JumpIfEqual {258}
	043 Move W8, [X0+16]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, X24
	046 Move X1, X31
	047 Call ASN1.get_Count, X0
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W1, 1
	050 Move X0, X24
	051 Move X2, X31
	052 Call ASN1.get_Item, X0, X1
	053 Compare X0, 0
	054 JumpIfEqual {258}
	055 Move X1, X31
	056 Call ASN1.get_Value, X0
	057 Call PrivateKeyInfo.RemoveLeadingZero, X0
	058 Compare X0, 0
	059 JumpIfEqual {258}
	060 Move W21, [X0+24]
	061 Move X19, X0
	062 Move W1, 3
	063 Move X0, X24
	064 Move X2, X31
	065 Call ASN1.get_Item, X0, X1
	066 Compare X0, 0
	067 JumpIfEqual {258}
	068 Move X1, X31
	069 Call ASN1.get_Value, X0
	070 Move W1, W21
	071 Call PrivateKeyInfo.Normalize, X0, X1
	072 Move X20, X0
	073 Move W1, 6
	074 Move X0, X24
	075 Move X2, X31
	076 Call ASN1.get_Item, X0, X1
	077 Compare X0, 0
	078 JumpIfEqual {258}
	079 Move X1, X31
	080 NotImplemented "Instruction SBFM not yet implemented."
	081 Call ASN1.get_Value, X0
	082 Move W1, W27
	083 Call PrivateKeyInfo.Normalize, X0, X1
	084 Move X21, X0
	085 Move W1, 7
	086 Move X0, X24
	087 Move X2, X31
	088 Call ASN1.get_Item, X0, X1
	089 Compare X0, 0
	090 JumpIfEqual {258}
	091 Move X1, X31
	092 Call ASN1.get_Value, X0
	093 Move W1, W27
	094 Call PrivateKeyInfo.Normalize, X0, X1
	095 Move X22, X0
	096 Move W1, 2
	097 Move X0, X24
	098 Move X2, X31
	099 Call ASN1.get_Item, X0, X1
	100 Compare X0, 0
	101 JumpIfEqual {258}
	102 Move X1, X31
	103 Call ASN1.get_Value, X0
	104 Call PrivateKeyInfo.RemoveLeadingZero, X0
	105 Move X23, X0
	106 Move W1, 8
	107 Move X0, X24
	108 Move X2, X31
	109 Call ASN1.get_Item, X0, X1
	110 Compare X0, 0
	111 JumpIfEqual {258}
	112 Move X1, X31
	113 Call ASN1.get_Value, X0
	114 Move W1, W27
	115 Call PrivateKeyInfo.Normalize, X0, X1
	116 Move X25, X0
	117 Move W1, 4
	118 Move X0, X24
	119 Move X2, X31
	120 Call ASN1.get_Item, X0, X1
	121 Compare X0, 0
	122 JumpIfEqual {258}
	123 Move X1, X31
	124 Call ASN1.get_Value, X0
	125 Move W1, W27
	126 Call PrivateKeyInfo.Normalize, X0, X1
	127 Move X26, X0
	128 Move W1, 5
	129 Move X0, X24
	130 Move X2, X31
	131 Call ASN1.get_Item, X0, X1
	132 Compare X0, 0
	133 JumpIfEqual {258}
	134 Move X1, X31
	135 Call ASN1.get_Value, X0
	136 Move W1, W27
	137 Call PrivateKeyInfo.Normalize, X0, X1
	138 Move X24, X0
	139 Move X0, X31
	140 Call RSA.Create
	141 Move X27, X0
	142 Compare X0, 0
	143 JumpIfEqual {204}
	144 Move X8, [X27]
	145 Move X9, [X8+504]
	146 Move [X31+64], X23
	147 Move [X31+72], X19
	148 Move [X31+80], X26
	149 Move [X31+88], X24
	150 Move [X31+96], X21
	151 Move [X31+104], X22
	152 Move [X31+112], X25
	153 Move [X31+120], X20
	154 Move X2, [X8+512]
	155 Add X1, X31, 64
	156 Move X0, X27
	157 NotImplemented "Instruction BLR not yet implemented."
	158 Move X0, X27
	159 Move X20, [X31+208]
	160 Move X19, [X31+216]
	161 Move X22, [X31+192]
	162 Move X21, [X31+200]
	163 Move X24, [X31+176]
	164 Move X23, [X31+184]
	165 Move X26, [X31+160]
	166 Move X25, [X31+168]
	167 Move X28, [X31+144]
	168 Move X27, [X31+152]
	169 Move X30, [X31+128]
	170 Add X31, X31, 224
	171 Return X0
	172 Move X0, 0xF20000
	173 Move X0, [X0+3296]
	174 Call 0x1C17D08
	175 Call 0x1C17F10
	176 Move X19, X0
	177 Move X0, 0xF21000
	178 Move X0, [X0+1192]
	179 Move X0, 0xF20000
	180 Move X0, [X0+3296]
	181 Call 0x1C17D08
	182 Call 0x1C17F10
	183 Move X19, X0
	184 Move X0, 0xF21000
	185 Move X0, [X0+1200]
	186 Move X0, 0xF20000
	187 Move X0, [X0+3296]
	188 Call 0x1C17D08
	189 Call 0x1C17F10
	190 Move X19, X0
	191 Move X0, 0xF21000
	192 Move X0, [X0+1208]
	193 Call 0x1C17D08
	194 Move X1, X0
	195 Move X0, X19
	196 Move X2, X31
	197 Call CryptographicException..ctor, X0, X1
	198 Move X0, 0xF21000
	199 Move X0, [X0+1216]
	200 Call 0x1C17D08
	201 Move X1, X0
	202 Move X0, X19
	203 Call 0x1C17DEC
	204 Call 0x1C17F20
	205 Move X27, X0
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move X0, X27
	208 Call 0x3EB2AD0
	209 Move X27, X0
	210 Move X0, 0xF20000
	211 Move X0, [X0+3296]
	212 Call 0x1C17D08
	213 Move X8, [X27]
	214 Move X1, [X8]
	215 Call 0x1C18270
	216 Move TEMP, X0
	217 And TEMP, TEMP, 1
	218 Compare TEMP, 1
	219 JumpIfNotEqual {259}
	220 Call 0x3EB2AE0
	221 Move X0, 0xF21000
	222 Move X0, [X0+1224]
	223 Call 0x1C17D08
	224 Call 0x1C17F10
	225 Move X1, X31
	226 Move X28, X0
	227 Call CspParameters..ctor, X0
	228 Compare X28, 0
	229 JumpIfEqual {258}
	230 Move W1, 1
	231 Move X0, X28
	232 Move X2, X31
	233 Call CspParameters.set_Flags, X0, X1
	234 Move X0, 0xF21000
	235 Move X0, [X0+416]
	236 Call 0x1C17D08
	237 Call 0x1C17F10
	238 Move X1, X28
	239 Move X2, X31
	240 Move X27, X0
	241 Call RSACryptoServiceProvider..ctor, X0, X1
	242 Compare X27, 0
	243 JumpIfEqual {258}
	244 Move X8, [X27]
	245 Add X1, X31, 0
	246 Move X0, X27
	247 Move X9, [X8+504]
	248 Move [X31], X23
	249 Move [X31+8], X19
	250 Move [X31+16], X26
	251 Move [X31+24], X24
	252 Move [X31+32], X21
	253 Move [X31+40], X22
	254 Move [X31+48], X25
	255 Move [X31+56], X20
	256 Move X2, [X8+512]
	257 NotImplemented "Instruction BLR not yet implemented."
	258 Call 0x1C17F20
	259 Move W0, 8
	260 Call 0x3EB2AF0
	261 Move X8, [X27]
	262 Move [X0], X8
	263 Move X1, 0xCB4000
	264 Add X1, X1, 3672
	265 Move X2, X31
	266 Call 0x3EB2B00
	267 Move X27, X0
	268 Call 0x3EB2AE0
	269 Move X0, X27
	270 Call 0x1D2D690
	271 Call 0x1991590

Method: System.Byte[] Encode(System.Security.Cryptography.RSA rsa)

Disassembly:
	0x03201A3C LDP X30, X19, [X31], #0x10
	0x03201A40 RET
	0x03201A44 BL 0x1C16F20
	0x03201A48 BL 0x1C16F28
	0x03201A4C STR X30, [X31 - 0x10]!
	0x03201A50 BL 0x3205D00
	0x03201A54 UBFM W0, W0, 0x1F, 0x1F
	0x03201A58 LDR X30, [X31], #0x10
	0x03201A5C RET
	0x03201A60 STR X30, [X31 - 0x20]!
	0x03201A64 STP X20, X19, [X31 + 0x10]
	0x03201A68 ADRP X20, 0x11DB000
	0x03201A6C LDRB W8, [X20 + 0x247]
	0x03201A70 MOV W19, W0
	0x03201A74 TBNZ X8, 0x0, 0x3201A8C
	0x03201A78 ADRP X0, 0xF20000
	0x03201A7C LDR X0, [X0 + 0x530]
	0x03201A80 BL 0x1C16CF4
	0x03201A84 MOVZ W8, 0x1
	0x03201A88 STRB W8, [X20 + 0x247]
	0x03201A8C TBNZ X19, 0x1F, 0x3201ABC
	0x03201A90 ADRP X8, 0xF20000
	0x03201A94 LDR X8, [X8 + 0x530]
	0x03201A98 LDR X0, [X8]
	0x03201A9C BL 0x1C16F10
	0x03201AA0 MOV W1, W19
	0x03201AA4 MOV X20, X0
	0x03201AA8 BL 0x3205C0C
	0x03201AAC MOV X0, X20
	0x03201AB0 LDP X20, X19, [X31 + 0x10]
	0x03201AB4 LDR X30, [X31], #0x20
	0x03201AB8 RET
	0x03201ABC ADRP X0, 0xEFA000
	0x03201AC0 LDR X0, [X0 + 0x760]
	0x03201AC4 BL 0x1C16D08
	0x03201AC8 BL 0x1C16F10
	0x03201ACC MOV X19, X0
	0x03201AD0 ADRP X0, 0xEFC000
	0x03201AD4 LDR X0, [X0 + 0xEC8]
	0x03201AD8 BL 0x1C16D08
	0x03201ADC MOV X1, X0
	0x03201AE0 MOV X0, X19
	0x03201AE4 MOV X2, X31
	0x03201AE8 BL 0x3316014
	0x03201AEC ADRP X0, 0xF20000
	0x03201AF0 LDR X0, [X0 + 0x558]
	0x03201AF4 BL 0x1C16D08
	0x03201AF8 MOV X1, X0
	0x03201AFC MOV X0, X19
	0x03201B00 BL 0x1C16DEC
	0x03201B04 STR X30, [X31 - 0x30]!
	0x03201B08 STP X22, X21, [X31 + 0x10]
	0x03201B0C STP X20, X19, [X31 + 0x20]
	0x03201B10 ADRP X22, 0x11DB000
	0x03201B14 ADRP X21, 0xF20000
	0x03201B18 LDRB W8, [X22 + 0x248]
	0x03201B1C LDR X21, [X21 + 0x530]
	0x03201B20 MOV X20, X1
	0x03201B24 MOV X19, X0
	0x03201B28 TBNZ X8, 0x0, 0x3201B40
	0x03201B2C ADRP X0, 0xF20000
	0x03201B30 LDR X0, [X0 + 0x530]
	0x03201B34 BL 0x1C16CF4
	0x03201B38 MOVZ W8, 0x1
	0x03201B3C STRB W8, [X22 + 0x248]
	0x03201B40 LDR X0, [X21]
	0x03201B44 LDR W8, [X0 + 0xE0]
	0x03201B48 CBNZ W8, 0x3201B50
	0x03201B4C BL 0x1C16DFC
	0x03201B50 MOV X0, X20
	0x03201B54 MOV W1, W31
	0x03201B58 BL 0x3205C94
	0x03201B5C LDR X8, [X21]
	0x03201B60 TBZ X0, 0x0, 0x3201B8C
	0x03201B64 MOV X0, X8
	0x03201B68 BL 0x1C16F10
	0x03201B6C MOV X1, X19
	0x03201B70 MOV X20, X0
	0x03201B74 BL 0x3205A20
	0x03201B78 MOV X0, X20
	0x03201B7C LDP X20, X19, [X31 + 0x20]
	0x03201B80 LDP X22, X21, [X31 + 0x10]
	0x03201B84 LDR X30, [X31], #0x30
	0x03201B88 RET
	0x03201B8C LDR W9, [X8 + 0xE0]
	0x03201B90 CBNZ W9, 0x3201B9C
	0x03201B94 MOV X0, X8
	0x03201B98 BL 0x1C16DFC
	0x03201B9C MOV X0, X19
	0x03201BA0 MOV W1, W31
	0x03201BA4 BL 0x3205C94
	0x03201BA8 TBNZ X0, 0x0, 0x3201C08
	0x03201BAC MOV X0, X19
	0x03201BB0 MOV X1, X20
	0x03201BB4 BL 0x3205D00
	0x03201BB8 CBZ W0, 0x3201BDC
	0x03201BBC CMP W0, 0x1
	0x03201BC0 B.NE 0x3201C00
	0x03201BC4 MOV X0, X19
	0x03201BC8 MOV X1, X20
	0x03201BCC LDP X20, X19, [X31 + 0x20]
	0x03201BD0 LDP X22, X21, [X31 + 0x10]
	0x03201BD4 LDR X30, [X31], #0x30
	0x03201BD8 B 0x3205E44
	0x03201BDC LDR X0, [X21]
	0x03201BE0 LDR W8, [X0 + 0xE0]
	0x03201BE4 CBNZ W8, 0x3201BEC
	0x03201BE8 BL 0x1C16DFC
	0x03201BEC LDP X20, X19, [X31 + 0x20]
	0x03201BF0 LDP X22, X21, [X31 + 0x10]
	0x03201BF4 MOV W0, W31
	0x03201BF8 LDR X30, [X31], #0x30
	0x03201BFC B 0x3201A60
	0x03201C00 ADDS W31, W0, 0x1
	0x03201C04 B.NE 0x3201C3C
	0x03201C08 ADRP X0, 0xF20000
	0x03201C0C LDR X0, [X0 + 0x560]
	0x03201C10 BL 0x1C16D08
	0x03201C14 BL 0x1C16F10
	0x03201C18 MOV X19, X0
	0x03201C1C ADRP X0, 0xF20000
	0x03201C20 LDR X0, [X0 + 0x568]
	0x03201C24 BL 0x1C16D08
	0x03201C28 MOV X1, X0
	0x03201C2C MOV X0, X19
	0x03201C30 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X29
	003 Move [X31+72], X30
	004 Move [X31+80], X28
	005 Move [X31+88], X27
	006 Move [X31+96], X26
	007 Move [X31+104], X25
	008 Move [X31+112], X24
	009 Move [X31+120], X23
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 Move X20, 0x11DC000
	015 Move W8, [X20+552]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0xF20000
	022 Move X0, [X0+2968]
	023 Call 0x1C17CF4
	024 Move X0, 0xEF3000
	025 Move X0, [X0+1560]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+552], W8
	029 Compare X19, 0
	030 JumpIfEqual {149}
	031 Move X8, [X19]
	032 Move X28, 0xF20000
	033 Move X29, 0xEF3000
	034 Move W1, 1
	035 Move X9, [X8+488]
	036 Move X2, [X8+496]
	037 Move X28, [X28+2968]
	038 Move X29, [X29+1560]
	039 Add X8, X31, 0
	040 Move X0, X19
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move X0, [X28]
	043 Move X26, [X31]
	044 Move X27, [X31+8]
	045 Move X24, [X31+16]
	046 Move X23, [X31+24]
	047 Move X22, [X31+32]
	048 Move X21, [X31+40]
	049 Move X20, [X31+48]
	050 Move X25, [X31+56]
	051 Call 0x1C17F10
	052 Move W1, 48
	053 Move X2, X31
	054 Move X19, X0
	055 Call ASN1..ctor, X0, X1
	056 Move X0, [X29]
	057 Move W1, 1
	058 Call 0x1C17D6C
	059 Move X8, [X28]
	060 Move X29, X0
	061 Move X0, X8
	062 Call 0x1C17F10
	063 Move W1, 2
	064 Move X2, X29
	065 Move X3, X31
	066 Move X28, X0
	067 Call ASN1..ctor, X0, X1, X2
	068 Compare X19, 0
	069 JumpIfEqual {149}
	070 Move X0, X19
	071 Move X1, X28
	072 Move X2, X31
	073 Call ASN1.Add, X0, X1
	074 Move X0, X27
	075 Move X1, X31
	076 Call ASN1Convert.FromUnsignedBigInteger, X0
	077 Move X1, X0
	078 Move X0, X19
	079 Move X2, X31
	080 Call ASN1.Add, X0, X1
	081 Move X0, X26
	082 Move X1, X31
	083 Call ASN1Convert.FromUnsignedBigInteger, X0
	084 Move X1, X0
	085 Move X0, X19
	086 Move X2, X31
	087 Call ASN1.Add, X0, X1
	088 Move X0, X25
	089 Move X1, X31
	090 Call ASN1Convert.FromUnsignedBigInteger, X0
	091 Move X1, X0
	092 Move X0, X19
	093 Move X2, X31
	094 Call ASN1.Add, X0, X1
	095 Move X0, X24
	096 Move X1, X31
	097 Call ASN1Convert.FromUnsignedBigInteger, X0
	098 Move X1, X0
	099 Move X0, X19
	100 Move X2, X31
	101 Call ASN1.Add, X0, X1
	102 Move X0, X23
	103 Move X1, X31
	104 Call ASN1Convert.FromUnsignedBigInteger, X0
	105 Move X1, X0
	106 Move X0, X19
	107 Move X2, X31
	108 Call ASN1.Add, X0, X1
	109 Move X0, X22
	110 Move X1, X31
	111 Call ASN1Convert.FromUnsignedBigInteger, X0
	112 Move X1, X0
	113 Move X0, X19
	114 Move X2, X31
	115 Call ASN1.Add, X0, X1
	116 Move X0, X21
	117 Move X1, X31
	118 Call ASN1Convert.FromUnsignedBigInteger, X0
	119 Move X1, X0
	120 Move X0, X19
	121 Move X2, X31
	122 Call ASN1.Add, X0, X1
	123 Move X0, X20
	124 Move X1, X31
	125 Call ASN1Convert.FromUnsignedBigInteger, X0
	126 Move X1, X0
	127 Move X0, X19
	128 Move X2, X31
	129 Call ASN1.Add, X0, X1
	130 Move X8, [X19]
	131 Move X0, X19
	132 Move X9, [X8+376]
	133 Move X1, [X8+384]
	134 NotImplemented "Instruction BLR not yet implemented."
	135 Move X20, [X31+144]
	136 Move X19, [X31+152]
	137 Move X22, [X31+128]
	138 Move X21, [X31+136]
	139 Move X24, [X31+112]
	140 Move X23, [X31+120]
	141 Move X26, [X31+96]
	142 Move X25, [X31+104]
	143 Move X28, [X31+80]
	144 Move X27, [X31+88]
	145 Move X29, [X31+64]
	146 Move X30, [X31+72]
	147 Add X31, X31, 160
	148 Return X0
	149 Call 0x1C17F20

Method: System.Security.Cryptography.DSA DecodeDSA(System.Byte[] privateKey, System.Security.Cryptography.DSAParameters dsaParameters)

Disassembly:
	0x03201C34 BL 0x3316338
	0x03201C38 B 0x3201C58
	0x03201C3C ADRP X0, 0xEF2000
	0x03201C40 LDR X0, [X0 + 0x7D0]
	0x03201C44 BL 0x1C16D08
	0x03201C48 BL 0x1C16F10
	0x03201C4C MOV X1, X31
	0x03201C50 MOV X19, X0
	0x03201C54 BL 0x33B2C54
	0x03201C58 ADRP X0, 0xF20000
	0x03201C5C LDR X0, [X0 + 0x570]
	0x03201C60 BL 0x1C16D08
	0x03201C64 MOV X1, X0
	0x03201C68 MOV X0, X19
	0x03201C6C BL 0x1C16DEC
	0x03201C70 B 0x3207288
	0x03201C74 STR X30, [X31 - 0x10]!
	0x03201C78 BL 0x320606C
	0x03201C7C CBZ X0, 0x3201C98
	0x03201C80 LDR W8, [X0 + 0x18]
	0x03201C84 CMP W8, 0x1
	0x03201C88 B.LS 0x3201C9C
	0x03201C8C LDR X0, [X0 + 0x28]
	0x03201C90 LDR X30, [X31], #0x10
	0x03201C94 RET
	0x03201C98 BL 0x1C16F20
	0x03201C9C BL 0x1C16F28
	0x03201CA0 STR X30, [X31 - 0x20]!
	0x03201CA4 STP X20, X19, [X31 + 0x10]
	0x03201CA8 LDRB W8, [X0 + 0x23]
	0x03201CAC CBNZ W8, 0x3201CE8
	0x03201CB0 LDRB W8, [X0 + 0x22]
	0x03201CB4 CBZ W8, 0x3201CD8
	0x03201CB8 LDR X0, [X0 + 0x58]
	0x03201CBC CBZ X0, 0x3201D38
	0x03201CC0 BL 0x32019E0
	0x03201CC4 ANDS W31, W0, 0x7
	0x03201CC8 B.EQ 0x3201CDC
	0x03201CCC ADD W8, W0, 0x8
	0x03201CD0 AND W0, W8, 0xFFFFFFF8
	0x03201CD4 B 0x3201CDC
	0x03201CD8 LDR W0, [X0 + 0x10]
	0x03201CDC LDP X20, X19, [X31 + 0x10]
	0x03201CE0 LDR X30, [X31], #0x20
	0x03201CE4 RET
	0x03201CE8 ADRP X0, 0xF20000
	0x03201CEC LDR X0, [X0 + 0x578]
	0x03201CF0 BL 0x1C16D08
	0x03201CF4 MOV X1, X31
	0x03201CF8 BL 0x31E79DC
	0x03201CFC MOV X19, X0
	0x03201D00 ADRP X0, 0xF1B000
	0x03201D04 LDR X0, [X0 + 0x4B8]
	0x03201D08 BL 0x1C16D08
	0x03201D0C BL 0x1C16F10
	0x03201D10 MOV X1, X19
	0x03201D14 MOV X2, X31
	0x03201D18 MOV X20, X0
	0x03201D1C BL 0x338C448
	0x03201D20 ADRP X0, 0xF20000
	0x03201D24 LDR X0, [X0 + 0x580]
	0x03201D28 BL 0x1C16D08
	0x03201D2C MOV X1, X0
	0x03201D30 MOV X0, X20
	0x03201D34 BL 0x1C16DEC
	0x03201D38 BL 0x1C16F20
	0x03201D3C STP X30, X21, [X31 - 0x20]!
	0x03201D40 STP X20, X19, [X31 + 0x10]
	0x03201D44 ADRP X20, 0x11DB000
	0x03201D48 LDRB W8, [X20 + 0x230]
	0x03201D4C MOV X19, X0
	0x03201D50 TBNZ X8, 0x0, 0x3201D68
	0x03201D54 ADRP X0, 0xF20000
	0x03201D58 LDR X0, [X0 + 0x530]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+128], X30
	003 Move [X31+144], X22
	004 Move [X31+152], X21
	005 Move [X31+160], X20
	006 Move [X31+168], X19
	007 Move X21, 0x11DC000
	008 Move X22, 0xF20000
	009 Move W8, [X21+553]
	010 Move X22, [X22+2968]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xF20000
	018 Move X0, [X0+2968]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+553], W8
	022 Move X0, [X22]
	023 Call 0x1C17F10
	024 Move X1, X20
	025 Move X2, X31
	026 Move X21, X0
	027 Call ASN1..ctor, X0, X1
	028 Compare X21, 0
	029 JumpIfEqual {72}
	030 Move W8, [X21+16]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, X21
	033 Move X1, X31
	034 Call ASN1.get_Value, X0
	035 Move W1, 20
	036 Call PrivateKeyInfo.Normalize, X0, X1
	037 Move [X19+40], X0
	038 Move X0, X31
	039 Call DSA.Create
	040 Move V1, [X19+32]
	041 Move V0, [X19+48]
	042 Move V3, [X19]
	043 Move V2, [X19+16]
	044 Move [X31+32], V1
	045 Move [X31+40], V0
	046 Move [X31], V3
	047 Move [X31+8], V2
	048 Compare X0, 0
	049 JumpIfEqual {72}
	050 Move X8, [X0]
	051 Move V0, [X31]
	052 Move V1, [X31+16]
	053 Move V2, [X31+32]
	054 Move V3, [X31+48]
	055 Add X1, X31, 64
	056 Move X9, [X8+504]
	057 Move [X31+64], V0
	058 Move [X31+72], V1
	059 Move [X31+96], V2
	060 Move [X31+104], V3
	061 Move X2, [X8+512]
	062 Move X20, X0
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move X0, X20
	065 Move X20, [X31+160]
	066 Move X19, [X31+168]
	067 Move X22, [X31+144]
	068 Move X21, [X31+152]
	069 Move X30, [X31+128]
	070 Add X31, X31, 176
	071 Return X0
	072 Call 0x1C17F20
	073 Move X0, 0xF20000
	074 Move X0, [X0+3296]
	075 Call 0x1C17D08
	076 Call 0x1C17F10
	077 Move X19, X0
	078 Move X0, 0xF21000
	079 Move X0, [X0+1192]
	080 Call 0x1C17D08
	081 Move X1, X0
	082 Move X0, X19
	083 Move X2, X31
	084 Call CryptographicException..ctor, X0, X1
	085 Move X0, 0xF21000
	086 Move X0, [X0+1232]
	087 Call 0x1C17D08
	088 Move X1, X0
	089 Move X0, X19
	090 Call 0x1C17DEC

Method: System.Byte[] Encode(System.Security.Cryptography.DSA dsa)

Disassembly:
	0x03201D5C BL 0x1C16CF4
	0x03201D60 MOVZ W8, 0x1
	0x03201D64 STRB W8, [X20 + 0x230]
	0x03201D68 LDRB W8, [X19 + 0x22]
	0x03201D6C CBZ W8, 0x3201DA4
	0x03201D70 ADRP X21, 0xF20000
	0x03201D74 LDR X21, [X21 + 0x530]
	0x03201D78 LDR X20, [X19 + 0x28]
	0x03201D7C LDR X0, [X21]
	0x03201D80 LDR W8, [X0 + 0xE0]
	0x03201D84 CBNZ W8, 0x3201D8C
	0x03201D88 BL 0x1C16DFC
	0x03201D8C MOV X0, X20
	0x03201D90 MOV X1, X31
	0x03201D94 BL 0x3201DDC
	0x03201D98 TBZ X0, 0x0, 0x3201DB4
	0x03201D9C MOVZ W0, 0x1
	0x03201DA0 B 0x3201DA8
	0x03201DA4 MOV W0, W31

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Compare X0, 0
	004 JumpIfEqual {23}
	005 Move X8, [X0]
	006 Move W1, 1
	007 Move X9, [X8+488]
	008 Move X2, [X8+496]
	009 Add X8, X31, 0
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move X0, [X31+40]
	012 Move X1, X31
	013 Call ASN1Convert.FromUnsignedBigInteger, X0
	014 Compare X0, 0
	015 JumpIfEqual {23}
	016 Move X8, [X0]
	017 Move X9, [X8+376]
	018 Move X1, [X8+384]
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move X30, [X31+64]
	021 Add X31, X31, 80
	022 Return X0
	023 Call 0x1C17F20

Method: System.Byte[] Encode(System.Security.Cryptography.AsymmetricAlgorithm aa)

Disassembly:
	0x03201DA8 LDP X20, X19, [X31 + 0x10]
	0x03201DAC LDP X30, X21, [X31], #0x20
	0x03201DB0 RET
	0x03201DB4 LDR X0, [X21]
	0x03201DB8 LDR X19, [X19 + 0x58]
	0x03201DBC LDR W8, [X0 + 0xE0]
	0x03201DC0 CBNZ W8, 0x3201DC8
	0x03201DC4 BL 0x1C16DFC
	0x03201DC8 MOV X0, X19
	0x03201DCC LDP X20, X19, [X31 + 0x10]
	0x03201DD0 MOV X1, X31
	0x03201DD4 LDP X30, X21, [X31], #0x20
	0x03201DD8 B 0x3201DDC
	0x03201DDC STP X30, X21, [X31 - 0x20]!
	0x03201DE0 STP X20, X19, [X31 + 0x10]
	0x03201DE4 ADRP X21, 0x11DB000
	0x03201DE8 LDRB W8, [X21 + 0x24F]
	0x03201DEC MOV X19, X1
	0x03201DF0 MOV X20, X0
	0x03201DF4 TBNZ X8, 0x0, 0x3201E0C
	0x03201DF8 ADRP X0, 0xF20000
	0x03201DFC LDR X0, [X0 + 0x530]
	0x03201E00 BL 0x1C16CF4
	0x03201E04 MOVZ W8, 0x1
	0x03201E08 STRB W8, [X21 + 0x24F]
	0x03201E0C CMP X20, X19
	0x03201E10 B.EQ 0x3201E64
	0x03201E14 ADRP X21, 0xF20000
	0x03201E18 LDR X21, [X21 + 0x530]
	0x03201E1C LDR X0, [X21]
	0x03201E20 LDR W8, [X0 + 0xE0]
	0x03201E24 CBNZ W8, 0x3201E2C
	0x03201E28 BL 0x1C16DFC
	0x03201E2C MOV X0, X31
	0x03201E30 MOV X1, X20
	0x03201E34 BL 0x3201DDC
	0x03201E38 TBNZ X0, 0x0, 0x3201E5C
	0x03201E3C LDR X0, [X21]
	0x03201E40 LDR W8, [X0 + 0xE0]
	0x03201E44 CBNZ W8, 0x3201E4C
	0x03201E48 BL 0x1C16DFC
	0x03201E4C MOV X0, X31
	0x03201E50 MOV X1, X19
	0x03201E54 BL 0x3201DDC
	0x03201E58 TBZ X0, 0x0, 0x3201E6C
	0x03201E5C MOV W0, W31
	0x03201E60 B 0x3201E80
	0x03201E64 MOVZ W0, 0x1
	0x03201E68 B 0x3201E80
	0x03201E6C MOV X0, X20
	0x03201E70 MOV X1, X19
	0x03201E74 BL 0x3205D00
	0x03201E78 CMP W0, 0x0
	0x03201E7C CSET W0, EQ
	0x03201E80 LDP X20, X19, [X31 + 0x10]
	0x03201E84 LDP X30, X21, [X31], #0x20
	0x03201E88 RET
	0x03201E8C STP X30, X21, [X31 - 0x20]!
	0x03201E90 STP X20, X19, [X31 + 0x10]
	0x03201E94 ADRP X21, 0x11DB000
	0x03201E98 LDRB W8, [X21 + 0x231]
	0x03201E9C MOV X20, X1
	0x03201EA0 MOV X19, X0
	0x03201EA4 TBNZ X8, 0x0, 0x3201EBC
	0x03201EA8 ADRP X0, 0xF20000
	0x03201EAC LDR X0, [X0 + 0x530]
	0x03201EB0 BL 0x1C16CF4
	0x03201EB4 MOVZ W8, 0x1
	0x03201EB8 STRB W8, [X21 + 0x231]
	0x03201EBC LDRB W8, [X19 + 0x23]
	0x03201EC0 CBNZ W8, 0x3201F4C
	0x03201EC4 ADRP X21, 0xF20000
	0x03201EC8 LDRB W8, [X19 + 0x22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11DC000
	005 Move W8, [X20+554]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xF21000
	012 Move X0, [X0+344]
	013 Call 0x1C17CF4
	014 Move X0, 0xF21000
	015 Move X0, [X0+352]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+554], W8
	019 Compare X19, 0
	020 JumpIfEqual {53}
	021 Move X9, 0xF21000
	022 Move X9, [X9+352]
	023 Move X8, [X19]
	024 Move X10, [X9]
	025 Move W9, [X8+304]
	026 Move W11, [X10+304]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X12, [X8+200]
	029 Add X11, X12, X11
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X10, 0xF21000
	033 Move X10, [X10+344]
	034 Move X10, [X10]
	035 Move W11, [X10+304]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X8, [X8+200]
	038 Add X8, X8, X11
	039 NotImplemented "Instruction LDUR not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Call PrivateKeyInfo.Encode, X0
	046 Return X0
	047 Move X0, X19
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Call PrivateKeyInfo.Encode, X0
	052 Return X0
	053 Move X0, X19
	054 Call 0x19913C0
	055 Move X8, [X19]
	056 Move X0, X19
	057 Move X9, [X8+360]
	058 Move X1, [X8+368]
	059 NotImplemented "Instruction BLR not yet implemented."
	060 Move X19, X0
	061 Move X0, 0xF20000
	062 Move X0, [X0+3296]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X20, X0
	066 Move X0, 0xF21000
	067 Move X0, [X0+1240]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X20
	071 Move X2, X19
	072 Move X3, X31
	073 Call CryptographicException..ctor, X0, X1, X2
	074 Move X0, 0xF21000
	075 Move X0, [X0+1248]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X20
	079 Call 0x1C17DEC

