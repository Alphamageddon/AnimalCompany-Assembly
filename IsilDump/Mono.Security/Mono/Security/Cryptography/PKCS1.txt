Type: Mono.Security.Cryptography.PKCS1

Method: System.Boolean Compare(System.Byte[] array1, System.Byte[] array2)

Disassembly:
	0x03200120 STRB W8, [X25 + 0x221]
	0x03200124 LDR X0, [X22]
	0x03200128 MOVZ W1, 0x14
	0x0320012C BL 0x1C16D6C
	0x03200130 LDR X1, [X19]
	0x03200134 MOV X2, X31
	0x03200138 MOV X19, X0
	0x0320013C BL 0x32C5BD8
	0x03200140 LDR X8, [X20]
	0x03200144 MOVZ W1, 0x20
	0x03200148 LDR X8, [X8 + 0xB8]
	0x0320014C STR X19, [X8]
	0x03200150 LDR X0, [X22]
	0x03200154 BL 0x1C16D6C
	0x03200158 LDR X1, [X24]
	0x0320015C MOV X2, X31
	0x03200160 MOV X19, X0
	0x03200164 BL 0x32C5BD8
	0x03200168 LDR X8, [X20]
	0x0320016C MOVZ W1, 0x30
	0x03200170 LDR X8, [X8 + 0xB8]
	0x03200174 STR X19, [X8 + 0x8]
	0x03200178 LDR X0, [X22]
	0x0320017C BL 0x1C16D6C
	0x03200180 LDR X1, [X23]
	0x03200184 MOV X2, X31
	0x03200188 MOV X19, X0
	0x0320018C BL 0x32C5BD8
	0x03200190 LDR X8, [X20]
	0x03200194 MOVZ W1, 0x40
	0x03200198 LDR X8, [X8 + 0xB8]
	0x0320019C STR X19, [X8 + 0x10]
	0x032001A0 LDR X0, [X22]
	0x032001A4 BL 0x1C16D6C
	0x032001A8 LDR X1, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {30}
	004 Compare X1, 0
	005 JumpIfEqual {30}
	006 Move W8, [X0+24]
	007 Move W9, [X1+24]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W10, W31
	011 Subtract W9, W31, W8
	012 Add W31, W9, W10
	013 Move X10, W10
	014 Add X8, X0, X10
	015 Add X12, X1, X10
	016 Move W11, [X8+32]
	017 Move W12, [X12+32]
	018 Add W13, W9, W10
	019 NotImplemented "Instruction CMP not yet implemented."
	020 NotImplemented "Instruction CSET not yet implemented."
	021 Add W31, W13, 1
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Add W10, W10, 1
	024 Move W8, W31
	025 Move W8, 1
	026 Move W0, W8
	027 Move X30, [X31+16]
	028 Return X0
	029 Call 0x1C17F28
	030 Call 0x1C17F20

Method: System.Byte[] I2OSP(System.Byte[] x, System.Int32 size)

Disassembly:
	0x032001AC MOV X2, X31
	0x032001B0 MOV X19, X0
	0x032001B4 BL 0x32C5BD8
	0x032001B8 LDR X8, [X20]
	0x032001BC LDP X22, X21, [X31 + 0x20]
	0x032001C0 LDP X24, X23, [X31 + 0x10]
	0x032001C4 LDR X8, [X8 + 0xB8]
	0x032001C8 STR X19, [X8 + 0x18]
	0x032001CC LDP X20, X19, [X31 + 0x30]
	0x032001D0 LDP X30, X25, [X31], #0x40
	0x032001D4 RET
	0x032001D8 STP X30, X21, [X31 - 0x20]!
	0x032001DC STP X20, X19, [X31 + 0x10]
	0x032001E0 ADRP X21, 0x11DC000
	0x032001E4 ADRP X20, 0xF20000
	0x032001E8 LDRB W8, [X21 + 0x222]
	0x032001EC LDR X20, [X20 + 0xBA0]
	0x032001F0 MOV X19, X0
	0x032001F4 TBNZ X8, 0x0, 0x320020C
	0x032001F8 ADRP X0, 0xF20000
	0x032001FC LDR X0, [X0 + 0xBA0]
	0x03200200 BL 0x1C16CF4
	0x03200204 MOVZ W8, 0x1
	0x03200208 STRB W8, [X21 + 0x222]
	0x0320020C MOV X0, X19
	0x03200210 MOV X1, X31
	0x03200214 BL 0x33BDD8C
	0x03200218 STR W31, [X19 + 0x10]
	0x0320021C LDR X0, [X20]
	0x03200220 BL 0x1C16F10
	0x03200224 MOV X1, X31
	0x03200228 MOV X20, X0
	0x0320022C BL 0x3351F5C
	0x03200230 STR X20, [X19 + 0x28]
	0x03200234 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11DD000
	007 Move X22, 0xEF4000
	008 Move W8, [X21+538]
	009 Move X22, [X22+1560]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xEF4000
	017 Move X0, [X0+1560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+538], W8
	021 Move X0, [X22]
	022 Move W1, W20
	023 Call 0x1C17D6C
	024 Compare X0, 0
	025 JumpIfEqual {44}
	026 Compare X19, 0
	027 JumpIfEqual {44}
	028 Move W8, [X0+24]
	029 Move W4, [X19+24]
	030 Move X20, X0
	031 Move X0, X19
	032 Move W1, W31
	033 Subtract W3, W8, W4
	034 Move X2, X20
	035 Move X5, X31
	036 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	037 Move X0, X20
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X30, [X31+48]
	043 Return X0
	044 Call 0x1C17F20

Method: System.Byte[] OS2IP(System.Byte[] x)

Disassembly:
	0x03200238 LDP X30, X21, [X31], #0x20
	0x0320023C RET
	0x03200240 STR X30, [X31 - 0x20]!
	0x03200244 STP X20, X19, [X31 + 0x10]
	0x03200248 MOV X19, X1
	0x0320024C MOV X20, X0
	0x03200250 BL 0x32001D8
	0x03200254 MOV X0, X20
	0x03200258 MOV X1, X19
	0x0320025C LDP X20, X19, [X31 + 0x10]
	0x03200260 LDR X30, [X31], #0x20
	0x03200264 B 0x3200268
	0x03200268 STR X30, [X31 - 0x30]!
	0x0320026C STP X22, X21, [X31 + 0x10]
	0x03200270 STP X20, X19, [X31 + 0x20]
	0x03200274 ADRP X20, 0x11DC000
	0x03200278 ADRP X22, 0xF20000
	0x0320027C LDRB W8, [X20 + 0x224]
	0x03200280 LDR X22, [X22 + 0xB98]
	0x03200284 MOV X21, X1
	0x03200288 MOV X19, X0
	0x0320028C TBNZ X8, 0x0, 0x32002A4
	0x03200290 ADRP X0, 0xF20000
	0x03200294 LDR X0, [X0 + 0xB98]
	0x03200298 BL 0x1C16CF4
	0x0320029C MOVZ W8, 0x1
	0x032002A0 STRB W8, [X20 + 0x224]
	0x032002A4 LDR X0, [X22]
	0x032002A8 BL 0x1C16F10
	0x032002AC MOV X1, X21
	0x032002B0 MOV X2, X31
	0x032002B4 MOV X20, X0
	0x032002B8 BL 0x31E7A44
	0x032002BC CBZ X20, 0x3200410
	0x032002C0 LDRB W8, [X20 + 0x10]
	0x032002C4 CMP W8, 0x30
	0x032002C8 B.NE 0x3200414
	0x032002CC MOV X0, X20
	0x032002D0 MOV W1, W31
	0x032002D4 MOV X2, X31
	0x032002D8 BL 0x31E8704
	0x032002DC CBZ X0, 0x3200410
	0x032002E0 LDRB W8, [X0 + 0x10]
	0x032002E4 CMP W8, 0x2
	0x032002E8 B.NE 0x3200434
	0x032002EC MOV X1, X31
	0x032002F0 BL 0x31E7D00
	0x032002F4 CBZ X0, 0x3200410

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11DD000
	006 Move W8, [X20+539]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEF4000
	013 Move X0, [X0+1560]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+539], W8
	017 Compare X19, 0
	018 JumpIfEqual {55}
	019 Move W8, [X19+24]
	020 Move X9, X31
	021 Move X10, W8
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Add X21, X9, 1
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Add X9, X19, X9
	026 Move W11, [X9+32]
	027 Move X9, X21
	028 Compare W11, 0
	029 JumpIfEqual {22}
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, 0xEF4000
	032 Move X9, [X9+1560]
	033 Subtract W8, W8, W21
	034 Add W1, W8, 1
	035 Move X0, [X9]
	036 Call 0x1C17D6C
	037 Compare X0, 0
	038 JumpIfEqual {55}
	039 Move W4, [X0+24]
	040 Move X20, X0
	041 Subtract X1, X21, 1
	042 Move X0, X19
	043 Move X2, X20
	044 Move W3, W31
	045 Move X5, X31
	046 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	047 Move X19, X20
	048 Move X0, X19
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0
	054 Call 0x1C17F28
	055 Call 0x1C17F20

Method: System.Byte[] RSAVP1(System.Security.Cryptography.RSA rsa, System.Byte[] s)

Disassembly:
	0x032002F8 LDR W8, [X0 + 0x18]
	0x032002FC CBZ W8, 0x3200454
	0x03200300 LDRB W8, [X0 + 0x20]
	0x03200304 MOVZ W1, 0x1
	0x03200308 MOV X0, X20
	0x0320030C MOV X2, X31
	0x03200310 STR W8, [X19 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {9}
	004 Move X8, [X0]
	005 Move X3, [X8+472]
	006 Move X2, [X8+480]
	007 Move X30, [X31+16]
	008 CallNoReturn X3
	009 Call 0x1C17F20

Method: System.Boolean Verify_v15(System.Security.Cryptography.RSA rsa, System.Security.Cryptography.HashAlgorithm hash, System.Byte[] hashValue, System.Byte[] signature, System.Boolean tryNonStandardEncoding)

Disassembly:
	0x03200314 BL 0x31E8704
	0x03200318 CBZ X0, 0x3200410
	0x0320031C LDRB W8, [X0 + 0x10]
	0x03200320 CMP W8, 0x30
	0x03200324 CSEL X0, X0, X31, EQ
	0x03200328 B.NE 0x3200458
	0x0320032C CBZ X0, 0x3200410
	0x03200330 MOV W1, W31
	0x03200334 MOV X2, X31
	0x03200338 BL 0x31E8704
	0x0320033C CBZ X0, 0x3200410
	0x03200340 LDRB W8, [X0 + 0x10]
	0x03200344 CMP W8, 0x6
	0x03200348 B.NE 0x3200478
	0x0320034C MOV X1, X31
	0x03200350 BL 0x31E909C
	0x03200354 STR X0, [X19 + 0x18]
	0x03200358 MOVZ W1, 0x2
	0x0320035C MOV X0, X20
	0x03200360 MOV X2, X31
	0x03200364 BL 0x31E8704
	0x03200368 CBZ X0, 0x3200410
	0x0320036C MOV X1, X31
	0x03200370 BL 0x31E7D00
	0x03200374 STR X0, [X19 + 0x20]
	0x03200378 MOV X0, X20
	0x0320037C MOV X1, X31
	0x03200380 BL 0x31E7CC4
	0x03200384 CMP W0, 0x4
	0x03200388 B.LT 0x3200400
	0x0320038C MOVZ W1, 0x3
	0x03200390 MOV X0, X20
	0x03200394 MOV X2, X31
	0x03200398 BL 0x31E8704
	0x0320039C CBZ X0, 0x3200410
	0x032003A0 MOV X1, X31
	0x032003A4 MOV X20, X0
	0x032003A8 BL 0x31E7CC4
	0x032003AC CMP W0, 0x1
	0x032003B0 B.LT 0x3200400
	0x032003B4 MOV W21, W31
	0x032003B8 LDR X22, [X19 + 0x28]
	0x032003BC MOV X0, X20
	0x032003C0 MOV W1, W21
	0x032003C4 MOV X2, X31
	0x032003C8 BL 0x31E8704
	0x032003CC CBZ X22, 0x3200410
	0x032003D0 LDR X8, [X22]
	0x032003D4 MOV X1, X0
	0x032003D8 MOV X0, X22
	0x032003DC LDR X9, [X8 + 0x308]
	0x032003E0 LDR X2, [X8 + 0x310]
	0x032003E4 BLR X9
	0x032003E8 MOV X0, X20
	0x032003EC MOV X1, X31
	0x032003F0 ADD W21, W21, 0x1
	0x032003F4 BL 0x31E7CC4
	0x032003F8 CMP W21, W0
	0x032003FC B.LT 0x32003B8
	0x03200400 LDP X20, X19, [X31 + 0x20]
	0x03200404 LDP X22, X21, [X31 + 0x10]
	0x03200408 LDR X30, [X31], #0x30
	0x0320040C RET
	0x03200410 BL 0x1C16F20
	0x03200414 ADRP X0, 0xF20000
	0x03200418 LDR X0, [X0 + 0xCE0]
	0x0320041C BL 0x1C16D08
	0x03200420 BL 0x1C16F10
	0x03200424 MOV X19, X0
	0x03200428 ADRP X0, 0xF21000
	0x0320042C LDR X0, [X0 + 0x480]
	0x03200430 B 0x3200494
	0x03200434 ADRP X0, 0xF20000
	0x03200438 LDR X0, [X0 + 0xCE0]
	0x0320043C BL 0x1C16D08
	0x03200440 BL 0x1C16F10
	0x03200444 MOV X19, X0
	0x03200448 ADRP X0, 0xF21000
	0x0320044C LDR X0, [X0 + 0x488]
	0x03200450 B 0x3200494
	0x03200454 BL 0x1C16F28
	0x03200458 ADRP X0, 0xF20000
	0x0320045C LDR X0, [X0 + 0xCE0]
	0x03200460 BL 0x1C16D08
	0x03200464 BL 0x1C16F10
	0x03200468 MOV X19, X0
	0x0320046C ADRP X0, 0xF21000
	0x03200470 LDR X0, [X0 + 0x490]
	0x03200474 B 0x3200494
	0x03200478 ADRP X0, 0xF20000
	0x0320047C LDR X0, [X0 + 0xCE0]
	0x03200480 BL 0x1C16D08
	0x03200484 BL 0x1C16F10
	0x03200488 MOV X19, X0
	0x0320048C ADRP X0, 0xF21000
	0x03200490 LDR X0, [X0 + 0x498]
	0x03200494 BL 0x1C16D08
	0x03200498 MOV X1, X0
	0x0320049C MOV X0, X19
	0x032004A0 MOV X2, X31
	0x032004A4 BL 0x3252170
	0x032004A8 ADRP X0, 0xF21000
	0x032004AC LDR X0, [X0 + 0x4A0]
	0x032004B0 BL 0x1C16D08
	0x032004B4 MOV X1, X0
	0x032004B8 MOV X0, X19
	0x032004BC BL 0x1C16DEC
	0x032004C0 LDR X0, [X0 + 0x18]
	0x032004C4 RET
	0x032004C8 STR X30, [X31 - 0x20]!
	0x032004CC STP X20, X19, [X31 + 0x10]
	0x032004D0 ADRP X20, 0x11DC000
	0x032004D4 LDRB W8, [X20 + 0x223]
	0x032004D8 MOV X19, X0
	0x032004DC TBNZ X8, 0x0, 0x32004F4
	0x032004E0 ADRP X0, 0xEF3000
	0x032004E4 LDR X0, [X0 + 0x618]
	0x032004E8 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x11DD000
	010 Move W8, [X24+540]
	011 Move W21, W4
	012 Move X23, X3
	013 Move X19, X2
	014 Move X22, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xEF4000
	021 Move X0, [X0+1560]
	022 Call 0x1C17CF4
	023 Move X0, 0xF21000
	024 Move X0, [X0+3976]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X24+540], W8
	028 Compare X20, 0
	029 JumpIfEqual {144}
	030 Move X8, [X20]
	031 Move X25, 0xF21000
	032 Move X0, X20
	033 Move X9, [X8+408]
	034 Move X1, [X8+416]
	035 Move X25, [X25+3976]
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move X8, [X25]
	038 NotImplemented "Instruction SBFM not yet implemented."
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X0, X23
	045 Call PKCS1.OS2IP, X0
	046 Move X8, [X20]
	047 Move X1, X0
	048 Move X0, X20
	049 Move X9, [X8+472]
	050 Move X2, [X8+480]
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Move W1, W24
	053 Call PKCS1.I2OSP, X0, X1
	054 Move X20, X0
	055 Move X0, X22
	056 Move X1, X19
	057 Move W2, W24
	058 Call PKCS1.Encode_v15, X0, X1, X2
	059 Move X1, X20
	060 Call PKCS1.Compare, X0, X1
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {102}
	065 Move TEMP, X21
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {102}
	069 Compare X20, 0
	070 JumpIfEqual {144}
	071 Move W8, [X20+24]
	072 Compare W8, 0
	073 JumpIfEqual {143}
	074 Move W9, [X20+32]
	075 Compare W9, 0
	076 JumpIfNotEqual {101}
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move W9, [X20+33]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Compare X19, 0
	081 JumpIfEqual {144}
	082 Move W1, [X19+24]
	083 Move W9, 2
	084 NotImplemented "Instruction ORN not yet implemented."
	085 Add W10, W10, W8
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CSEL not yet implemented."
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move W9, 2
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Add X10, X20, W9
	092 Move W10, [X10+32]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Add W9, W9, 1
	095 NotImplemented "Instruction CMP not yet implemented."
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Add X8, X20, W22
	098 Move W8, [X8+32]
	099 Compare W8, 0
	100 JumpIfEqual {112}
	101 Move W0, W31
	102 Move X20, [X31+48]
	103 Move X19, [X31+56]
	104 Move X22, [X31+32]
	105 Move X21, [X31+40]
	106 Move X24, [X31+16]
	107 Move X23, [X31+24]
	108 And W0, W0, 1
	109 Move X30, [X31+64]
	110 Move X25, [X31+72]
	111 Return X0
	112 Move X8, 0xEF4000
	113 Move X8, [X8+1560]
	114 Move X0, [X8]
	115 Call 0x1C17D6C
	116 Compare X0, 0
	117 JumpIfEqual {144}
	118 Move W4, [X0+24]
	119 Move X21, X0
	120 Add W1, W22, 1
	121 Move X0, X20
	122 Move X2, X21
	123 Move W3, W31
	124 Move X5, X31
	125 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	126 Move X0, [X25]
	127 Move W8, [X0+224]
	128 Compare W8, 0
	129 JumpIfNotEqual {131}
	130 Call 0x1C17DFC
	131 Move X0, X21
	132 Move X1, X19
	133 Move X20, [X31+48]
	134 Move X19, [X31+56]
	135 Move X22, [X31+32]
	136 Move X21, [X31+40]
	137 Move X24, [X31+16]
	138 Move X23, [X31+24]
	139 Move X30, [X31+64]
	140 Move X25, [X31+72]
	141 Call PKCS1.Compare, X0, X1
	142 Return X0
	143 Call 0x1C17F28
	144 Call 0x1C17F20

Method: System.Byte[] Encode_v15(System.Security.Cryptography.HashAlgorithm hash, System.Byte[] hashValue, System.Int32 emLength)

Disassembly:
	0x032004EC MOVZ W8, 0x1
	0x032004F0 STRB W8, [X20 + 0x223]
	0x032004F4 LDR X0, [X19 + 0x20]
	0x032004F8 CBZ X0, 0x3200524
	0x032004FC MOV X1, X31
	0x03200500 BL 0x33A01F0
	0x03200504 CBZ X0, 0x3200524
	0x03200508 ADRP X8, 0xEF3000
	0x0320050C LDR X8, [X8 + 0x618]
	0x03200510 MOV X19, X0
	0x03200514 LDR X20, [X8]
	0x03200518 MOV X1, X20
	0x0320051C BL 0x1C16E00
	0x03200520 CBZ X0, 0x3200530
	0x03200524 LDP X20, X19, [X31 + 0x10]
	0x03200528 LDR X30, [X31], #0x20
	0x0320052C RET
	0x03200530 MOV X0, X19
	0x03200534 MOV X1, X20
	0x03200538 BL 0x1C171E0
	0x0320053C STR X30, [X31 - 0x30]!
	0x03200540 STP X22, X21, [X31 + 0x10]
	0x03200544 STP X20, X19, [X31 + 0x20]
	0x03200548 ADRP X20, 0x11DC000
	0x0320054C LDRB W8, [X20 + 0x225]
	0x03200550 MOV X19, X0
	0x03200554 TBNZ X8, 0x0, 0x320056C
	0x03200558 ADRP X0, 0xEF3000
	0x0320055C LDR X0, [X0 + 0x618]
	0x03200560 BL 0x1C16CF4
	0x03200564 MOVZ W8, 0x1
	0x03200568 STRB W8, [X20 + 0x225]
	0x0320056C CBZ X19, 0x32005D0
	0x03200570 LDR W8, [X19 + 0x18]
	0x03200574 CBZ W8, 0x32005D4
	0x03200578 ADRP X10, 0xEF3000
	0x0320057C LDRB W9, [X19 + 0x20]
	0x03200580 LDR X10, [X10 + 0x618]
	0x03200584 CMP W9, 0x0
	0x03200588 LDR X0, [X10]
	0x0320058C CSET W20, EQ
	0x03200590 SUB W21, W8, W20
	0x03200594 MOV W1, W21
	0x03200598 BL 0x1C16D6C
	0x0320059C MOV X22, X0
	0x032005A0 MOV X0, X19
	0x032005A4 MOV W1, W20
	0x032005A8 MOV X2, X22
	0x032005AC MOV W3, W31
	0x032005B0 MOV W4, W21
	0x032005B4 MOV X5, X31
	0x032005B8 BL 0x33A8A9C
	0x032005BC MOV X0, X22
	0x032005C0 LDP X20, X19, [X31 + 0x20]
	0x032005C4 LDP X22, X21, [X31 + 0x10]
	0x032005C8 LDR X30, [X31], #0x30
	0x032005CC RET
	0x032005D0 BL 0x1C16F20
	0x032005D4 BL 0x1C16F28
	0x032005D8 STP X30, X21, [X31 - 0x20]!
	0x032005DC STP X20, X19, [X31 + 0x10]
	0x032005E0 ADRP X21, 0x11DC000
	0x032005E4 LDRB W8, [X21 + 0x226]
	0x032005E8 MOV W20, W1
	0x032005EC MOV X19, X0
	0x032005F0 TBNZ X8, 0x0, 0x3200608
	0x032005F4 ADRP X0, 0xEF3000
	0x032005F8 LDR X0, [X0 + 0x618]
	0x032005FC BL 0x1C16CF4
	0x03200600 MOVZ W8, 0x1
	0x03200604 STRB W8, [X21 + 0x226]
	0x03200608 CBZ X19, 0x3200674
	0x0320060C LDR W8, [X19 + 0x18]
	0x03200610 CMP W8, W20
	0x03200614 B.EQ 0x3200664
	0x03200618 B.LE 0x320062C
	0x0320061C MOV X0, X19
	0x03200620 LDP X20, X19, [X31 + 0x10]
	0x03200624 LDP X30, X21, [X31], #0x20
	0x03200628 B 0x320053C
	0x0320062C ADRP X8, 0xEF3000
	0x03200630 LDR X8, [X8 + 0x618]
	0x03200634 MOV W1, W20
	0x03200638 LDR X0, [X8]
	0x0320063C BL 0x1C16D6C
	0x03200640 LDR W4, [X19 + 0x18]
	0x03200644 MOV X21, X0
	0x03200648 MOV X0, X19
	0x0320064C MOV W1, W31
	0x03200650 SUB W3, W20, W4
	0x03200654 MOV X2, X21
	0x03200658 MOV X5, X31
	0x0320065C BL 0x33A8A9C
	0x03200660 MOV X19, X21
	0x03200664 MOV X0, X19
	0x03200668 LDP X20, X19, [X31 + 0x10]
	0x0320066C LDP X30, X21, [X31], #0x20
	0x03200670 RET
	0x03200674 BL 0x1C16F20
	0x03200678 SUB X31, X31, 0xE0
	0x0320067C STR X30, [X31 + 0x80]
	0x03200680 STP X28, X27, [X31 + 0x90]
	0x03200684 STP X26, X25, [X31 + 0xA0]
	0x03200688 STP X24, X23, [X31 + 0xB0]
	0x0320068C STP X22, X21, [X31 + 0xC0]
	0x03200690 STP X20, X19, [X31 + 0xD0]
	0x03200694 ADRP X20, 0x11DC000
	0x03200698 ADRP X21, 0xF20000
	0x0320069C LDRB W8, [X20 + 0x227]
	0x032006A0 LDR X21, [X21 + 0xB98]
	0x032006A4 MOV X19, X0
	0x032006A8 TBNZ X8, 0x0, 0x32006C0
	0x032006AC ADRP X0, 0xF20000
	0x032006B0 LDR X0, [X0 + 0xB98]
	0x032006B4 BL 0x1C16CF4
	0x032006B8 MOVZ W8, 0x1
	0x032006BC STRB W8, [X20 + 0x227]
	0x032006C0 LDR X0, [X21]
	0x032006C4 BL 0x1C16F10
	0x032006C8 MOV X1, X19
	0x032006CC MOV X2, X31
	0x032006D0 MOV X24, X0
	0x032006D4 BL 0x31E7A44
	0x032006D8 CBZ X24, 0x3200A04
	0x032006DC LDRB W8, [X24 + 0x10]
	0x032006E0 CMP W8, 0x30
	0x032006E4 B.NE 0x32008BC
	0x032006E8 MOV X0, X24
	0x032006EC MOV W1, W31
	0x032006F0 MOV X2, X31
	0x032006F4 BL 0x31E8704
	0x032006F8 CBZ X0, 0x3200A04
	0x032006FC LDRB W8, [X0 + 0x10]
	0x03200700 CMP W8, 0x2
	0x03200704 B.NE 0x32008DC
	0x03200708 MOV X0, X24
	0x0320070C MOV X1, X31
	0x03200710 BL 0x31E7CC4
	0x03200714 CMP W0, 0x8
	0x03200718 B.LE 0x32008FC
	0x0320071C MOVZ W1, 0x1
	0x03200720 MOV X0, X24
	0x03200724 MOV X2, X31
	0x03200728 BL 0x31E8704
	0x0320072C CBZ X0, 0x3200A04
	0x03200730 MOV X1, X31
	0x03200734 BL 0x31E7D00
	0x03200738 BL 0x320053C
	0x0320073C CBZ X0, 0x3200A04
	0x03200740 LDR W21, [X0 + 0x18]
	0x03200744 MOV X19, X0
	0x03200748 MOVZ W1, 0x3
	0x0320074C MOV X0, X24
	0x03200750 MOV X2, X31
	0x03200754 BL 0x31E8704
	0x03200758 CBZ X0, 0x3200A04
	0x0320075C MOV X1, X31
	0x03200760 BL 0x31E7D00
	0x03200764 MOV W1, W21
	0x03200768 BL 0x32005D8
	0x0320076C MOV X20, X0
	0x03200770 MOVZ W1, 0x6
	0x03200774 MOV X0, X24
	0x03200778 MOV X2, X31
	0x0320077C BL 0x31E8704
	0x03200780 CBZ X0, 0x3200A04
	0x03200784 MOV X1, X31
	0x03200788 SBFM W27, W21, 0x1, 0x1F
	0x0320078C BL 0x31E7D00
	0x03200790 MOV W1, W27
	0x03200794 BL 0x32005D8
	0x03200798 MOV X21, X0
	0x0320079C MOVZ W1, 0x7
	0x032007A0 MOV X0, X24
	0x032007A4 MOV X2, X31
	0x032007A8 BL 0x31E8704
	0x032007AC CBZ X0, 0x3200A04
	0x032007B0 MOV X1, X31
	0x032007B4 BL 0x31E7D00
	0x032007B8 MOV W1, W27
	0x032007BC BL 0x32005D8
	0x032007C0 MOV X22, X0
	0x032007C4 MOVZ W1, 0x2
	0x032007C8 MOV X0, X24
	0x032007CC MOV X2, X31
	0x032007D0 BL 0x31E8704
	0x032007D4 CBZ X0, 0x3200A04
	0x032007D8 MOV X1, X31
	0x032007DC BL 0x31E7D00
	0x032007E0 BL 0x320053C
	0x032007E4 MOV X23, X0
	0x032007E8 MOVZ W1, 0x8
	0x032007EC MOV X0, X24
	0x032007F0 MOV X2, X31
	0x032007F4 BL 0x31E8704
	0x032007F8 CBZ X0, 0x3200A04
	0x032007FC MOV X1, X31
	0x03200800 BL 0x31E7D00
	0x03200804 MOV W1, W27
	0x03200808 BL 0x32005D8
	0x0320080C MOV X25, X0
	0x03200810 MOVZ W1, 0x4
	0x03200814 MOV X0, X24
	0x03200818 MOV X2, X31
	0x0320081C BL 0x31E8704

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x11DD000
	009 Move W8, [X22+541]
	010 Move W19, W2
	011 Move X20, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xF21000
	018 Move X0, [X0+2968]
	019 Call 0x1C17CF4
	020 Move X0, 0xEF4000
	021 Move X0, [X0+1560]
	022 Call 0x1C17CF4
	023 Move X0, 0xF21000
	024 Move X0, [X0+3032]
	025 Call 0x1C17CF4
	026 Move X0, 0xEF4000
	027 Move X0, [X0+1448]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+541], W8
	031 Compare X20, 0
	032 JumpIfEqual {201}
	033 Compare X21, 0
	034 JumpIfEqual {201}
	035 Move X8, [X21]
	036 Move X0, X21
	037 Move X9, [X8+472]
	038 Move X1, [X8+480]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move X8, [X21]
	041 Move W23, [X20+24]
	042 Move W22, W0
	043 Move X0, X21
	044 Move X9, [X8+360]
	045 Move X1, [X8+368]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X21, X0
	049 Move X23, 0xF21000
	050 Move X23, [X23+3032]
	051 Move X0, [X23]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X0, X21
	057 Move X1, X31
	058 Call CryptoConfig.MapNameToOID, X0
	059 Move X21, X20
	060 Compare X0, 0
	061 JumpIfEqual {134}
	062 Move X24, 0xF21000
	063 Move X24, [X24+2968]
	064 Move X22, X0
	065 Move X0, [X24]
	066 Call 0x1C17F10
	067 Move W1, 48
	068 Move X2, X31
	069 Move X21, X0
	070 Call ASN1..ctor, X0, X1
	071 Move X0, [X23]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X0, X22
	077 Move X1, X31
	078 Call CryptoConfig.EncodeOID, X0
	079 Move X8, [X24]
	080 Move X23, X0
	081 Move X0, X8
	082 Call 0x1C17F10
	083 Move X1, X23
	084 Move X2, X31
	085 Move X22, X0
	086 Call ASN1..ctor, X0, X1
	087 Compare X21, 0
	088 JumpIfEqual {201}
	089 Move X0, X21
	090 Move X1, X22
	091 Move X2, X31
	092 Call ASN1.Add, X0, X1
	093 Move X0, [X24]
	094 Call 0x1C17F10
	095 Move W1, 5
	096 Move X2, X31
	097 Move X22, X0
	098 Call ASN1..ctor, X0, X1
	099 Move X0, X21
	100 Move X1, X22
	101 Move X2, X31
	102 Call ASN1.Add, X0, X1
	103 Move X0, [X24]
	104 Call 0x1C17F10
	105 Move W1, 4
	106 Move X2, X20
	107 Move X3, X31
	108 Move X22, X0
	109 Call ASN1..ctor, X0, X1, X2
	110 Move X0, [X24]
	111 Call 0x1C17F10
	112 Move W1, 48
	113 Move X2, X31
	114 Move X23, X0
	115 Call ASN1..ctor, X0, X1
	116 Compare X23, 0
	117 JumpIfEqual {201}
	118 Move X0, X23
	119 Move X1, X21
	120 Move X2, X31
	121 Call ASN1.Add, X0, X1
	122 Move X0, X23
	123 Move X1, X22
	124 Move X2, X31
	125 Call ASN1.Add, X0, X1
	126 Move X8, [X23]
	127 Move X0, X23
	128 Move X9, [X8+376]
	129 Move X1, [X8+384]
	130 NotImplemented "Instruction BLR not yet implemented."
	131 Move X21, X0
	132 Compare X0, 0
	133 JumpIfEqual {201}
	134 Move W8, [X21+24]
	135 Move W4, [X20+24]
	136 Move X23, 0xEF4000
	137 Move X22, 0xEF4000
	138 Move X23, [X23+1448]
	139 Move X22, [X22+1560]
	140 Subtract W3, W8, W4
	141 Move X0, X20
	142 Move W1, W31
	143 Move X2, X21
	144 Move X5, X31
	145 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	146 Move X0, [X23]
	147 Move W8, [X0+224]
	148 Compare W8, 0
	149 JumpIfNotEqual {151}
	150 Call 0x1C17DFC
	151 Move W8, [X21+24]
	152 Move W0, 8
	153 Move X2, X31
	154 Subtract W8, W19, W8
	155 Subtract W1, W8, 3
	156 Call Math.Max, X0, X1
	157 Move W9, [X21+24]
	158 Move X8, [X22]
	159 Add W19, W0, 3
	160 Move W22, W0
	161 Add W1, W19, W9
	162 Move X0, X8
	163 Call 0x1C17D6C
	164 Compare X0, 0
	165 JumpIfEqual {201}
	166 Move X9, [X0+24]
	167 Move X20, X0
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Add W10, W22, 2
	170 Move W8, 1
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move [X20+33], W8
	173 Move W11, W10
	174 Move X8, X31
	175 And X9, X9, 0
	176 Add X10, X20, 34
	177 Subtract X11, X11, 2
	178 Move W12, 255
	179 Add X13, X8, 2
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move [X10], W12
	182 Add X8, X8, 1
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Move W4, [X21+24]
	185 Move X0, X21
	186 Move W1, W31
	187 Move X2, X20
	188 Move W3, W19
	189 Move X5, X31
	190 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	191 Move X0, X20
	192 Move X20, [X31+48]
	193 Move X19, [X31+56]
	194 Move X22, [X31+32]
	195 Move X21, [X31+40]
	196 Move X24, [X31+16]
	197 Move X23, [X31+24]
	198 Move X30, [X31+64]
	199 Return X0
	200 Call 0x1C17F28
	201 Call 0x1C17F20
	202 Move X0, 0xF22000
	203 Move X0, [X0+1064]
	204 Call 0x1C17D08
	205 Move X1, X21
	206 Move X2, X31
	207 Call String.Concat, X0, X1
	208 Move X19, X0
	209 Move X0, 0xF21000
	210 Move X0, [X0+3296]
	211 Call 0x1C17D08
	212 Call 0x1C17F10
	213 Move X1, X19
	214 Move X2, X31
	215 Move X20, X0
	216 Call CryptographicException..ctor, X0, X1
	217 Move X0, 0xF22000
	218 Move X0, [X0+1072]
	219 Call 0x1C17D08
	220 Move X1, X0
	221 Move X0, X20
	222 Call 0x1C17DEC

Method: System.String HashNameFromOid(System.String oid, System.Boolean throwOnError = True)

Disassembly:
	0x03200820 CBZ X0, 0x3200A04
	0x03200824 MOV X1, X31
	0x03200828 BL 0x31E7D00
	0x0320082C MOV W1, W27
	0x03200830 BL 0x32005D8
	0x03200834 MOV X26, X0
	0x03200838 MOVZ W1, 0x5
	0x0320083C MOV X0, X24
	0x03200840 MOV X2, X31
	0x03200844 BL 0x31E8704
	0x03200848 CBZ X0, 0x3200A04
	0x0320084C MOV X1, X31
	0x03200850 BL 0x31E7D00
	0x03200854 MOV W1, W27
	0x03200858 BL 0x32005D8
	0x0320085C MOV X24, X0
	0x03200860 MOV X0, X31
	0x03200864 BL 0x325B960
	0x03200868 MOV X27, X0
	0x0320086C CBZ X0, 0x3200944
	0x03200870 LDR X8, [X27]
	0x03200874 LDR X9, [X8 + 0x1F8]
	0x03200878 STP X23, X19, [X31 + 0x40]
	0x0320087C STP X26, X24, [X31 + 0x50]
	0x03200880 STP X21, X22, [X31 + 0x60]
	0x03200884 STP X25, X20, [X31 + 0x70]
	0x03200888 LDR X2, [X8 + 0x200]
	0x0320088C ADD X1, X31, 0x40
	0x03200890 MOV X0, X27
	0x03200894 BLR X9
	0x03200898 MOV X0, X27
	0x0320089C LDP X20, X19, [X31 + 0xD0]
	0x032008A0 LDP X22, X21, [X31 + 0xC0]
	0x032008A4 LDP X24, X23, [X31 + 0xB0]
	0x032008A8 LDP X26, X25, [X31 + 0xA0]
	0x032008AC LDP X28, X27, [X31 + 0x90]
	0x032008B0 LDR X30, [X31 + 0x80]
	0x032008B4 ADD X31, X31, 0xE0
	0x032008B8 RET
	0x032008BC ADRP X0, 0xF20000
	0x032008C0 LDR X0, [X0 + 0xCE0]
	0x032008C4 BL 0x1C16D08
	0x032008C8 BL 0x1C16F10
	0x032008CC MOV X19, X0
	0x032008D0 ADRP X0, 0xF21000
	0x032008D4 LDR X0, [X0 + 0x4A8]
	0x032008D8 B 0x3200918
	0x032008DC ADRP X0, 0xF20000
	0x032008E0 LDR X0, [X0 + 0xCE0]
	0x032008E4 BL 0x1C16D08
	0x032008E8 BL 0x1C16F10
	0x032008EC MOV X19, X0
	0x032008F0 ADRP X0, 0xF21000
	0x032008F4 LDR X0, [X0 + 0x4B0]
	0x032008F8 B 0x3200918
	0x032008FC ADRP X0, 0xF20000
	0x03200900 LDR X0, [X0 + 0xCE0]
	0x03200904 BL 0x1C16D08
	0x03200908 BL 0x1C16F10
	0x0320090C MOV X19, X0
	0x03200910 ADRP X0, 0xF21000
	0x03200914 LDR X0, [X0 + 0x4B8]
	0x03200918 BL 0x1C16D08
	0x0320091C MOV X1, X0
	0x03200920 MOV X0, X19
	0x03200924 MOV X2, X31
	0x03200928 BL 0x3252170
	0x0320092C ADRP X0, 0xF21000
	0x03200930 LDR X0, [X0 + 0x4C0]
	0x03200934 BL 0x1C16D08
	0x03200938 MOV X1, X0
	0x0320093C MOV X0, X19
	0x03200940 BL 0x1C16DEC
	0x03200944 BL 0x1C16F20
	0x03200948 B 0x320094C
	0x0320094C MOV X27, X0
	0x03200950 CMP W1, 0x1
	0x03200954 B.NE 0x3200A30
	0x03200958 MOV X0, X27
	0x0320095C BL 0x3EB1AD0
	0x03200960 MOV X27, X0
	0x03200964 ADRP X0, 0xF20000
	0x03200968 LDR X0, [X0 + 0xCE0]
	0x0320096C BL 0x1C16D08
	0x03200970 LDR X8, [X27]
	0x03200974 LDR X1, [X8]
	0x03200978 BL 0x1C17270
	0x0320097C TBZ X0, 0x0, 0x3200A08
	0x03200980 BL 0x3EB1AE0
	0x03200984 ADRP X0, 0xF21000
	0x03200988 LDR X0, [X0 + 0x4C8]
	0x0320098C BL 0x1C16D08
	0x03200990 BL 0x1C16F10
	0x03200994 MOV X1, X31
	0x03200998 MOV X28, X0
	0x0320099C BL 0x3252554
	0x032009A0 CBZ X28, 0x3200A04
	0x032009A4 MOVZ W1, 0x1
	0x032009A8 MOV X0, X28
	0x032009AC MOV X2, X31
	0x032009B0 BL 0x3252470
	0x032009B4 ADRP X0, 0xF21000
	0x032009B8 LDR X0, [X0 + 0x1A0]
	0x032009BC BL 0x1C16D08
	0x032009C0 BL 0x1C16F10
	0x032009C4 MOV X1, X28
	0x032009C8 MOV X2, X31
	0x032009CC MOV X27, X0
	0x032009D0 BL 0x325C458
	0x032009D4 CBZ X27, 0x3200A04
	0x032009D8 LDR X8, [X27]
	0x032009DC ADD X1, X31, 0x0
	0x032009E0 MOV X0, X27
	0x032009E4 LDR X9, [X8 + 0x1F8]
	0x032009E8 STP X23, X19, [X31]
	0x032009EC STP X26, X24, [X31 + 0x10]
	0x032009F0 STP X21, X22, [X31 + 0x20]
	0x032009F4 STP X25, X20, [X31 + 0x30]
	0x032009F8 LDR X2, [X8 + 0x200]
	0x032009FC BLR X9
	0x03200A00 B 0x3200898
	0x03200A04 BL 0x1C16F20
	0x03200A08 MOVZ W0, 0x8
	0x03200A0C BL 0x3EB1AF0
	0x03200A10 LDR X8, [X27]
	0x03200A14 STR X8, [X0]
	0x03200A18 ADRP X1, 0xCB4000
	0x03200A1C ADD X1, X1, 0xE58
	0x03200A20 MOV X2, X31
	0x03200A24 BL 0x3EB1B00
	0x03200A28 MOV X27, X0
	0x03200A2C BL 0x3EB1AE0
	0x03200A30 MOV X0, X27
	0x03200A34 BL 0x1D2C690
	0x03200A38 BL 0x1990590
	0x03200A3C SUB X31, X31, 0xA0
	0x03200A40 STP X29, X30, [X31 + 0x40]
	0x03200A44 STP X28, X27, [X31 + 0x50]
	0x03200A48 STP X26, X25, [X31 + 0x60]
	0x03200A4C STP X24, X23, [X31 + 0x70]
	0x03200A50 STP X22, X21, [X31 + 0x80]
	0x03200A54 STP X20, X19, [X31 + 0x90]
	0x03200A58 ADRP X20, 0x11DC000
	0x03200A5C LDRB W8, [X20 + 0x228]
	0x03200A60 MOV X19, X0
	0x03200A64 TBNZ X8, 0x0, 0x3200A88
	0x03200A68 ADRP X0, 0xF20000
	0x03200A6C LDR X0, [X0 + 0xB98]
	0x03200A70 BL 0x1C16CF4
	0x03200A74 ADRP X0, 0xEF3000
	0x03200A78 LDR X0, [X0 + 0x618]
	0x03200A7C BL 0x1C16CF4
	0x03200A80 MOVZ W8, 0x1
	0x03200A84 STRB W8, [X20 + 0x228]
	0x03200A88 CBZ X19, 0x3200C30
	0x03200A8C LDR X8, [X19]
	0x03200A90 ADRP X28, 0xF20000
	0x03200A94 ADRP X29, 0xEF3000
	0x03200A98 MOVZ W1, 0x1
	0x03200A9C LDP X9, X2, [X8 + 0x1E8]
	0x03200AA0 LDR X28, [X28 + 0xB98]
	0x03200AA4 LDR X29, [X29 + 0x618]
	0x03200AA8 ADD X8, X31, 0x0
	0x03200AAC MOV X0, X19
	0x03200AB0 BLR X9
	0x03200AB4 LDR X0, [X28]
	0x03200AB8 LDP X26, X27, [X31]
	0x03200ABC LDP X24, X23, [X31 + 0x10]
	0x03200AC0 LDP X22, X21, [X31 + 0x20]
	0x03200AC4 LDP X20, X25, [X31 + 0x30]
	0x03200AC8 BL 0x1C16F10
	0x03200ACC MOVZ W1, 0x30
	0x03200AD0 MOV X2, X31
	0x03200AD4 MOV X19, X0
	0x03200AD8 BL 0x31E79E8
	0x03200ADC LDR X0, [X29]
	0x03200AE0 MOVZ W1, 0x1
	0x03200AE4 BL 0x1C16D6C
	0x03200AE8 LDR X8, [X28]
	0x03200AEC MOV X29, X0
	0x03200AF0 MOV X0, X8
	0x03200AF4 BL 0x1C16F10
	0x03200AF8 MOVZ W1, 0x2
	0x03200AFC MOV X2, X29
	0x03200B00 MOV X3, X31
	0x03200B04 MOV X28, X0
	0x03200B08 BL 0x31E7A14
	0x03200B0C CBZ X19, 0x3200C30
	0x03200B10 MOV X0, X19
	0x03200B14 MOV X1, X28
	0x03200B18 MOV X2, X31
	0x03200B1C BL 0x31E7ED0
	0x03200B20 MOV X0, X27
	0x03200B24 MOV X1, X31
	0x03200B28 BL 0x31E8E7C
	0x03200B2C MOV X1, X0
	0x03200B30 MOV X0, X19
	0x03200B34 MOV X2, X31
	0x03200B38 BL 0x31E7ED0
	0x03200B3C MOV X0, X26
	0x03200B40 MOV X1, X31
	0x03200B44 BL 0x31E8E7C
	0x03200B48 MOV X1, X0
	0x03200B4C MOV X0, X19
	0x03200B50 MOV X2, X31
	0x03200B54 BL 0x31E7ED0
	0x03200B58 MOV X0, X25
	0x03200B5C MOV X1, X31
	0x03200B60 BL 0x31E8E7C
	0x03200B64 MOV X1, X0
	0x03200B68 MOV X0, X19
	0x03200B6C MOV X2, X31
	0x03200B70 BL 0x31E7ED0
	0x03200B74 MOV X0, X24
	0x03200B78 MOV X1, X31
	0x03200B7C BL 0x31E8E7C
	0x03200B80 MOV X1, X0
	0x03200B84 MOV X0, X19
	0x03200B88 MOV X2, X31
	0x03200B8C BL 0x31E7ED0
	0x03200B90 MOV X0, X23
	0x03200B94 MOV X1, X31
	0x03200B98 BL 0x31E8E7C
	0x03200B9C MOV X1, X0
	0x03200BA0 MOV X0, X19
	0x03200BA4 MOV X2, X31
	0x03200BA8 BL 0x31E7ED0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11DD000
	006 Move W8, [X21+542]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {69}
	013 Move X0, 0xF22000
	014 Move X0, [X0+424]
	015 Call 0x1C17CF4
	016 Move X0, 0xF22000
	017 Move X0, [X0+1080]
	018 Call 0x1C17CF4
	019 Move X0, 0xF21000
	020 Move X0, [X0+3352]
	021 Call 0x1C17CF4
	022 Move X0, 0xF22000
	023 Move X0, [X0+432]
	024 Call 0x1C17CF4
	025 Move X0, 0xF21000
	026 Move X0, [X0+3360]
	027 Call 0x1C17CF4
	028 Move X0, 0xF21000
	029 Move X0, [X0+3392]
	030 Call 0x1C17CF4
	031 Move X0, 0xF22000
	032 Move X0, [X0+440]
	033 Call 0x1C17CF4
	034 Move X0, 0xF22000
	035 Move X0, [X0+448]
	036 Call 0x1C17CF4
	037 Move X0, 0xF22000
	038 Move X0, [X0+304]
	039 Call 0x1C17CF4
	040 Move X0, 0xF22000
	041 Move X0, [X0+456]
	042 Call 0x1C17CF4
	043 Move X0, 0xF22000
	044 Move X0, [X0+464]
	045 Call 0x1C17CF4
	046 Move X0, 0xF21000
	047 Move X0, [X0+3400]
	048 Call 0x1C17CF4
	049 Move X0, 0xF21000
	050 Move X0, [X0+3408]
	051 Call 0x1C17CF4
	052 Move X0, 0xF22000
	053 Move X0, [X0+472]
	054 Call 0x1C17CF4
	055 Move X0, 0xF21000
	056 Move X0, [X0+3416]
	057 Call 0x1C17CF4
	058 Move X0, 0xF22000
	059 Move X0, [X0+480]
	060 Call 0x1C17CF4
	061 Move X0, 0xF22000
	062 Move X0, [X0+488]
	063 Call 0x1C17CF4
	064 Move X0, 0xF22000
	065 Move X0, [X0+1088]
	066 Call 0x1C17CF4
	067 Move W8, 1
	068 Move [X21+542], W8
	069 Move X0, X19
	070 Call <PrivateImplementationDetails>.ComputeStringHash, X0
	071 Move W8, 0x999D
	072 NotImplemented "Instruction MOVK not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move W8, 0x8E98
	075 NotImplemented "Instruction MOVK not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move W8, 0xBEEE
	078 NotImplemented "Instruction MOVK not yet implemented."
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move W8, 0x8E98
	081 NotImplemented "Instruction MOVK not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X8, 0xF22000
	084 Move X8, [X8+432]
	085 Move W8, 0x4B4F
	086 NotImplemented "Instruction MOVK not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move W8, 0xA1D8
	089 NotImplemented "Instruction MOVK not yet implemented."
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X8, 0xF22000
	092 Move X8, [X8+488]
	093 Move W8, 0x902B
	094 NotImplemented "Instruction MOVK not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move W8, 0x980A
	097 NotImplemented "Instruction MOVK not yet implemented."
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move W8, 0x999D
	100 NotImplemented "Instruction MOVK not yet implemented."
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X8, 0xF22000
	103 Move X8, [X8+456]
	104 Move X0, X19
	105 Move X2, X31
	106 Move X1, [X8]
	107 Call String.op_Equality, X0, X1
	108 Move TEMP, X0
	109 And TEMP, TEMP, 1
	110 Compare TEMP, 1
	111 JumpIfNotEqual {208}
	112 Move X8, 0xF21000
	113 Move X8, [X8+3400]
	114 Move W8, 0x4CE2
	115 NotImplemented "Instruction MOVK not yet implemented."
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move W8, 0x4E75
	118 NotImplemented "Instruction MOVK not yet implemented."
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move W8, 0xECD7
	121 NotImplemented "Instruction MOVK not yet implemented."
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move X8, 0xF22000
	124 Move X8, [X8+424]
	125 Move X0, X19
	126 Move X2, X31
	127 Move X1, [X8]
	128 Call String.op_Equality, X0, X1
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfNotEqual {208}
	133 Move X8, 0xF22000
	134 Move X8, [X8+1088]
	135 Move X8, 0xF22000
	136 Move X8, [X8+304]
	137 Move X1, [X8]
	138 Move X0, X19
	139 Move X2, X31
	140 Call String.op_Equality, X0, X1
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfNotEqual {208}
	145 Move X8, 0xF21000
	146 Move X8, [X8+3392]
	147 Move X8, 0xF22000
	148 Move X8, [X8+440]
	149 Move X0, X19
	150 Move X2, X31
	151 Move X1, [X8]
	152 Call String.op_Equality, X0, X1
	153 Move TEMP, X0
	154 And TEMP, TEMP, 1
	155 Compare TEMP, 1
	156 JumpIfNotEqual {208}
	157 Move X8, 0xF21000
	158 Move X8, [X8+3360]
	159 Move X8, 0xF22000
	160 Move X8, [X8+472]
	161 Move X0, X19
	162 Move X2, X31
	163 Move X1, [X8]
	164 Call String.op_Equality, X0, X1
	165 Move TEMP, X0
	166 And TEMP, TEMP, 1
	167 Compare TEMP, 1
	168 JumpIfNotEqual {208}
	169 Move X8, 0xF21000
	170 Move X8, [X8+3408]
	171 Move X8, 0xF22000
	172 Move X8, [X8+480]
	173 Move X0, X19
	174 Move X2, X31
	175 Move X1, [X8]
	176 Call String.op_Equality, X0, X1
	177 Move TEMP, X0
	178 And TEMP, TEMP, 1
	179 Compare TEMP, 1
	180 JumpIfNotEqual {208}
	181 Move X8, 0xF22000
	182 Move X8, [X8+1080]
	183 Move X8, 0xF22000
	184 Move X8, [X8+448]
	185 Move X0, X19
	186 Move X2, X31
	187 Move X1, [X8]
	188 Call String.op_Equality, X0, X1
	189 Move TEMP, X0
	190 And TEMP, TEMP, 1
	191 Compare TEMP, 1
	192 JumpIfNotEqual {208}
	193 Move X8, 0xF21000
	194 Move X8, [X8+3352]
	195 Move X8, 0xF22000
	196 Move X8, [X8+464]
	197 Move X0, X19
	198 Move X2, X31
	199 Move X1, [X8]
	200 Call String.op_Equality, X0, X1
	201 Move TEMP, X0
	202 And TEMP, TEMP, 1
	203 Compare TEMP, 1
	204 JumpIfNotEqual {208}
	205 Move X8, 0xF21000
	206 Move X8, [X8+3416]
	207 Move X0, [X8]
	208 Move TEMP, X20
	209 And TEMP, TEMP, 1
	210 Compare TEMP, 1
	211 JumpIfEqual {218}
	212 Move X0, X31
	213 Move X20, [X31+16]
	214 Move X19, [X31+24]
	215 Move X30, [X31+32]
	216 Move X21, [X31+40]
	217 Return X0
	218 Move X0, 0xF22000
	219 Move X0, [X0+320]
	220 Call 0x1C17D08
	221 Move X1, X19
	222 Move X2, X31
	223 Call String.Concat, X0, X1
	224 Move X19, X0
	225 Move X0, 0xF21000
	226 Move X0, [X0+3296]
	227 Call 0x1C17D08
	228 Call 0x1C17F10
	229 Move X1, X19
	230 Move X2, X31
	231 Move X20, X0
	232 Call CryptographicException..ctor, X0, X1
	233 Move X0, 0xF22000
	234 Move X0, [X0+1096]
	235 Call 0x1C17D08
	236 Move X1, X0
	237 Move X0, X20
	238 Call 0x1C17DEC

Method: System.Security.Cryptography.HashAlgorithm CreateFromOid(System.String oid)

Disassembly:
	0x03200C28 ADD X31, X31, 0xA0
	0x03200C2C RET
	0x03200C30 BL 0x1C16F20
	0x03200C34 SUB X31, X31, 0xB0
	0x03200C38 STR X30, [X31 + 0x80]
	0x03200C3C STP X22, X21, [X31 + 0x90]
	0x03200C40 STP X20, X19, [X31 + 0xA0]
	0x03200C44 ADRP X21, 0x11DC000
	0x03200C48 ADRP X22, 0xF20000
	0x03200C4C LDRB W8, [X21 + 0x229]
	0x03200C50 LDR X22, [X22 + 0xB98]
	0x03200C54 MOV X19, X1
	0x03200C58 MOV X20, X0
	0x03200C5C TBNZ X8, 0x0, 0x3200C74
	0x03200C60 ADRP X0, 0xF20000
	0x03200C64 LDR X0, [X0 + 0xB98]
	0x03200C68 BL 0x1C16CF4
	0x03200C6C MOVZ W8, 0x1
	0x03200C70 STRB W8, [X21 + 0x229]
	0x03200C74 LDR X0, [X22]
	0x03200C78 BL 0x1C16F10
	0x03200C7C MOV X1, X20
	0x03200C80 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11DD000
	006 Move X21, 0xF21000
	007 Move W8, [X20+543]
	008 Move X21, [X21+3976]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF21000
	015 Move X0, [X0+3976]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+543], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W1, 1
	025 Move X0, X19
	026 Call PKCS1.HashNameFromOid, X0, X1
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]

Method: System.Security.Cryptography.HashAlgorithm CreateFromName(System.String name)

Disassembly:
	0x03200C84 MOV X21, X0
	0x03200C88 BL 0x31E7A44
	0x03200C8C CBZ X21, 0x3200D10
	0x03200C90 LDRB W8, [X21 + 0x10]
	0x03200C94 CMP W8, 0x2
	0x03200C98 B.NE 0x3200D14
	0x03200C9C MOV X0, X21
	0x03200CA0 MOV X1, X31
	0x03200CA4 BL 0x31E7D00
	0x03200CA8 MOVZ W1, 0x14
	0x03200CAC BL 0x32005D8
	0x03200CB0 STR X0, [X19 + 0x28]
	0x03200CB4 MOV X0, X31
	0x03200CB8 BL 0x3253364
	0x03200CBC LDP V1, V0, [X19 + 0x20]
	0x03200CC0 LDP V3, V2, [X19]
	0x03200CC4 STP V1, V0, [X31 + 0x20]
	0x03200CC8 STP V3, V2, [X31]
	0x03200CCC CBZ X0, 0x3200D10
	0x03200CD0 LDR X8, [X0]
	0x03200CD4 LDP V0, V1, [X31]
	0x03200CD8 LDP V2, V3, [X31 + 0x20]
	0x03200CDC ADD X1, X31, 0x40
	0x03200CE0 LDR X9, [X8 + 0x1F8]
	0x03200CE4 STP V0, V1, [X31 + 0x40]
	0x03200CE8 STP V2, V3, [X31 + 0x60]
	0x03200CEC LDR X2, [X8 + 0x200]
	0x03200CF0 MOV X20, X0
	0x03200CF4 BLR X9
	0x03200CF8 MOV X0, X20
	0x03200CFC LDP X20, X19, [X31 + 0xA0]
	0x03200D00 LDP X22, X21, [X31 + 0x90]
	0x03200D04 LDR X30, [X31 + 0x80]
	0x03200D08 ADD X31, X31, 0xB0
	0x03200D0C RET
	0x03200D10 BL 0x1C16F20
	0x03200D14 ADRP X0, 0xF20000
	0x03200D18 LDR X0, [X0 + 0xCE0]
	0x03200D1C BL 0x1C16D08
	0x03200D20 BL 0x1C16F10
	0x03200D24 MOV X19, X0
	0x03200D28 ADRP X0, 0xF21000
	0x03200D2C LDR X0, [X0 + 0x4A8]
	0x03200D30 BL 0x1C16D08
	0x03200D34 MOV X1, X0
	0x03200D38 MOV X0, X19
	0x03200D3C MOV X2, X31
	0x03200D40 BL 0x3252170
	0x03200D44 ADRP X0, 0xF21000
	0x03200D48 LDR X0, [X0 + 0x4D0]
	0x03200D4C BL 0x1C16D08
	0x03200D50 MOV X1, X0
	0x03200D54 MOV X0, X19
	0x03200D58 BL 0x1C16DEC
	0x03200D5C SUB X31, X31, 0x50
	0x03200D60 STR X30, [X31 + 0x40]
	0x03200D64 CBZ X0, 0x3200DA4
	0x03200D68 LDR X8, [X0]
	0x03200D6C MOVZ W1, 0x1
	0x03200D70 LDP X9, X2, [X8 + 0x1E8]
	0x03200D74 ADD X8, X31, 0x0
	0x03200D78 BLR X9
	0x03200D7C LDR X0, [X31 + 0x28]
	0x03200D80 MOV X1, X31
	0x03200D84 BL 0x31E8E7C
	0x03200D88 CBZ X0, 0x3200DA4
	0x03200D8C LDR X8, [X0]
	0x03200D90 LDP X9, X1, [X8 + 0x178]
	0x03200D94 BLR X9
	0x03200D98 LDR X30, [X31 + 0x40]
	0x03200D9C ADD X31, X31, 0x50
	0x03200DA0 RET
	0x03200DA4 BL 0x1C16F20
	0x03200DA8 STR X30, [X31 - 0x20]!
	0x03200DAC STP X20, X19, [X31 + 0x10]
	0x03200DB0 ADRP X20, 0x11DC000
	0x03200DB4 LDRB W8, [X20 + 0x22A]
	0x03200DB8 MOV X19, X0
	0x03200DBC TBNZ X8, 0x0, 0x3200DE0
	0x03200DC0 ADRP X0, 0xF21000
	0x03200DC4 LDR X0, [X0 + 0x158]
	0x03200DC8 BL 0x1C16CF4
	0x03200DCC ADRP X0, 0xF21000
	0x03200DD0 LDR X0, [X0 + 0x160]
	0x03200DD4 BL 0x1C16CF4
	0x03200DD8 MOVZ W8, 0x1
	0x03200DDC STRB W8, [X20 + 0x22A]
	0x03200DE0 CBZ X19, 0x3200E64
	0x03200DE4 ADRP X9, 0xF21000
	0x03200DE8 LDR X9, [X9 + 0x160]
	0x03200DEC LDR X8, [X19]
	0x03200DF0 LDR X10, [X9]
	0x03200DF4 LDRB W9, [X8 + 0x130]
	0x03200DF8 LDRB W11, [X10 + 0x130]
	0x03200DFC CMP W9, W11
	0x03200E00 B.CC 0x3200E18
	0x03200E04 LDR X12, [X8 + 0xC8]
	0x03200E08 ADD X11, X12, X11, 0x3, LSL
	0x03200E0C LDUR X11, [X11 - 0x8]
	0x03200E10 CMP X11, X10
	0x03200E14 B.EQ 0x3200E54
	0x03200E18 ADRP X10, 0xF21000
	0x03200E1C LDR X10, [X10 + 0x158]
	0x03200E20 LDR X10, [X10]
	0x03200E24 LDRB W11, [X10 + 0x130]
	0x03200E28 CMP W9, W11
	0x03200E2C B.CC 0x3200E64
	0x03200E30 LDR X8, [X8 + 0xC8]
	0x03200E34 ADD X8, X8, X11, 0x3, LSL
	0x03200E38 LDUR X8, [X8 - 0x8]
	0x03200E3C CMP X8, X10
	0x03200E40 B.NE 0x3200E64
	0x03200E44 MOV X0, X19
	0x03200E48 LDP X20, X19, [X31 + 0x10]
	0x03200E4C LDR X30, [X31], #0x20
	0x03200E50 B 0x3200D5C
	0x03200E54 MOV X0, X19
	0x03200E58 LDP X20, X19, [X31 + 0x10]
	0x03200E5C LDR X30, [X31], #0x20
	0x03200E60 B 0x3200A3C
	0x03200E64 MOV X0, X19
	0x03200E68 BL 0x19903C0
	0x03200E6C LDR X8, [X19]
	0x03200E70 MOV X0, X19
	0x03200E74 LDP X9, X1, [X8 + 0x168]
	0x03200E78 BLR X9
	0x03200E7C MOV X19, X0
	0x03200E80 ADRP X0, 0xF20000
	0x03200E84 LDR X0, [X0 + 0xCE0]
	0x03200E88 BL 0x1C16D08
	0x03200E8C BL 0x1C16F10
	0x03200E90 MOV X20, X0
	0x03200E94 ADRP X0, 0xF21000
	0x03200E98 LDR X0, [X0 + 0x4D8]
	0x03200E9C BL 0x1C16D08
	0x03200EA0 MOV X1, X0
	0x03200EA4 MOV X0, X20
	0x03200EA8 MOV X2, X19
	0x03200EAC MOV X3, X31
	0x03200EB0 BL 0x3252374
	0x03200EB4 ADRP X0, 0xF21000
	0x03200EB8 LDR X0, [X0 + 0x4E0]
	0x03200EBC BL 0x1C16D08
	0x03200EC0 MOV X1, X0
	0x03200EC4 MOV X0, X20
	0x03200EC8 BL 0x1C16DEC
	0x03200ECC MOV X1, X31
	0x03200ED0 B 0x33BDD8C
	0x03200ED4 STR X30, [X31 - 0x20]!
	0x03200ED8 STP X20, X19, [X31 + 0x10]
	0x03200EDC MOV X19, X1
	0x03200EE0 MOV X1, X31
	0x03200EE4 MOV X20, X0
	0x03200EE8 BL 0x33BDD8C
	0x03200EEC MOV X0, X20
	0x03200EF0 MOV X1, X19
	0x03200EF4 LDP X20, X19, [X31 + 0x10]
	0x03200EF8 LDR X30, [X31], #0x20
	0x03200EFC B 0x3200F00
	0x03200F00 STR X30, [X31 - 0x30]!
	0x03200F04 STP X22, X21, [X31 + 0x10]
	0x03200F08 STP X20, X19, [X31 + 0x20]
	0x03200F0C ADRP X21, 0x11DC000
	0x03200F10 ADRP X22, 0xF20000
	0x03200F14 LDRB W8, [X21 + 0x22D]
	0x03200F18 LDR X22, [X22 + 0xB98]
	0x03200F1C MOV X20, X1
	0x03200F20 MOV X19, X0
	0x03200F24 TBNZ X8, 0x0, 0x3200F3C
	0x03200F28 ADRP X0, 0xF20000
	0x03200F2C LDR X0, [X0 + 0xB98]
	0x03200F30 BL 0x1C16CF4
	0x03200F34 MOVZ W8, 0x1
	0x03200F38 STRB W8, [X21 + 0x22D]
	0x03200F3C LDR X0, [X22]
	0x03200F40 BL 0x1C16F10
	0x03200F44 MOV X1, X20
	0x03200F48 MOV X2, X31
	0x03200F4C MOV X21, X0
	0x03200F50 BL 0x31E7A44
	0x03200F54 CBZ X21, 0x32010A0
	0x03200F58 LDRB W8, [X21 + 0x10]
	0x03200F5C CMP W8, 0x30
	0x03200F60 CSEL X20, X21, X31, EQ
	0x03200F64 B.NE 0x32010A4
	0x03200F68 CBZ X20, 0x32010A0
	0x03200F6C MOV X0, X20
	0x03200F70 MOV W1, W31
	0x03200F74 MOV X2, X31
	0x03200F78 BL 0x31E8704
	0x03200F7C CBZ X0, 0x32010A0
	0x03200F80 LDRB W8, [X0 + 0x10]
	0x03200F84 MOV X21, X0
	0x03200F88 CMP W8, 0x30
	0x03200F8C B.NE 0x32010C4
	0x03200F90 MOV X0, X21
	0x03200F94 MOV W1, W31
	0x03200F98 MOV X2, X31
	0x03200F9C BL 0x31E8704
	0x03200FA0 CBZ X0, 0x32010A0
	0x03200FA4 LDRB W8, [X0 + 0x10]
	0x03200FA8 CMP W8, 0x6
	0x03200FAC B.NE 0x32010E4
	0x03200FB0 MOV X1, X31
	0x03200FB4 BL 0x31E909C
	0x03200FB8 STR X0, [X19 + 0x10]
	0x03200FBC MOV X0, X21
	0x03200FC0 MOV X1, X31
	0x03200FC4 BL 0x31E7CC4
	0x03200FC8 CMP W0, 0x2
	0x03200FCC CSEL X22, X31, X20, LT
	0x03200FD0 B.LT 0x3201060
	0x03200FD4 MOVZ W1, 0x1
	0x03200FD8 MOV X0, X21
	0x03200FDC MOV X2, X31
	0x03200FE0 BL 0x31E8704
	0x03200FE4 CBZ X0, 0x32010A0
	0x03200FE8 LDRB W8, [X0 + 0x10]
	0x03200FEC CMP W8, 0x30
	0x03200FF0 CSEL X20, X0, X31, EQ
	0x03200FF4 B.NE 0x3201124
	0x03200FF8 CBZ X20, 0x32010A0
	0x03200FFC MOV X0, X20
	0x03201000 MOV W1, W31
	0x03201004 MOV X2, X31
	0x03201008 BL 0x31E8704
	0x0320100C CBZ X0, 0x32010A0
	0x03201010 LDRB W8, [X0 + 0x10]
	0x03201014 CMP W8, 0x4
	0x03201018 CSEL X20, X20, X31, EQ
	0x0320101C B.NE 0x3201144
	0x03201020 MOV X1, X31
	0x03201024 BL 0x31E7D00
	0x03201028 STR X0, [X19 + 0x18]
	0x0320102C CBZ X20, 0x32010A0
	0x03201030 MOVZ W1, 0x1
	0x03201034 MOV X0, X20
	0x03201038 MOV X2, X31
	0x0320103C BL 0x31E8704
	0x03201040 CBZ X0, 0x32010A0
	0x03201044 LDRB W8, [X0 + 0x10]
	0x03201048 CMP W8, 0x2
	0x0320104C B.NE 0x3201164
	0x03201050 MOV X1, X31
	0x03201054 BL 0x31E8F8C
	0x03201058 MOV X20, X22
	0x0320105C STR W0, [X19 + 0x20]
	0x03201060 CBZ X20, 0x32010A0
	0x03201064 MOVZ W1, 0x1
	0x03201068 MOV X0, X20
	0x0320106C MOV X2, X31
	0x03201070 BL 0x31E8704
	0x03201074 CBZ X0, 0x32010A0
	0x03201078 LDRB W8, [X0 + 0x10]
	0x0320107C CMP W8, 0x4
	0x03201080 B.NE 0x3201104
	0x03201084 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11DD000
	005 Move W8, [X20+544]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {49}
	011 Move X0, 0xF22000
	012 Move X0, [X0+1104]
	013 Call 0x1C17CF4
	014 Move X0, 0xF22000
	015 Move X0, [X0+1112]
	016 Call 0x1C17CF4
	017 Move X0, 0xF1D000
	018 Move X0, [X0+432]
	019 Call 0x1C17CF4
	020 Move X0, 0xEF4000
	021 Move X0, [X0+1728]
	022 Call 0x1C17CF4
	023 Move X0, 0xF22000
	024 Move X0, [X0+1080]
	025 Call 0x1C17CF4
	026 Move X0, 0xF21000
	027 Move X0, [X0+3352]
	028 Call 0x1C17CF4
	029 Move X0, 0xF21000
	030 Move X0, [X0+3360]
	031 Call 0x1C17CF4
	032 Move X0, 0xF21000
	033 Move X0, [X0+3392]
	034 Call 0x1C17CF4
	035 Move X0, 0xF21000
	036 Move X0, [X0+3400]
	037 Call 0x1C17CF4
	038 Move X0, 0xF21000
	039 Move X0, [X0+3408]
	040 Call 0x1C17CF4
	041 Move X0, 0xF21000
	042 Move X0, [X0+3416]
	043 Call 0x1C17CF4
	044 Move X0, 0xF22000
	045 Move X0, [X0+1088]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X20+544], W8
	049 Move X0, X19
	050 Call <PrivateImplementationDetails>.ComputeStringHash, X0
	051 Move W8, 0xD733
	052 NotImplemented "Instruction MOVK not yet implemented."
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move W8, 0xF834
	055 NotImplemented "Instruction MOVK not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move W8, 0x1627
	058 NotImplemented "Instruction MOVK not yet implemented."
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W8, 0xF834
	061 NotImplemented "Instruction MOVK not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X8, 0xF21000
	064 Move X8, [X8+3392]
	065 Move X0, X19
	066 Move X2, X31
	067 Move X1, [X8]
	068 Call String.op_Equality, X0, X1
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {207}
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X0, X31
	076 Move X30, [X31+32]
	077 Call SHA1.Create
	078 Return X0
	079 Move W8, 0xF99A
	080 NotImplemented "Instruction MOVK not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move W8, 0xDF12
	083 NotImplemented "Instruction MOVK not yet implemented."
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X8, 0xF21000
	086 Move X8, [X8+3400]
	087 Move X0, X19
	088 Move X2, X31
	089 Move X1, [X8]
	090 Call String.op_Equality, X0, X1
	091 Move TEMP, X0
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfNotEqual {207}
	095 Move X20, [X31+16]
	096 Move X19, [X31+24]
	097 Move X30, [X31+32]
	098 Call MD2.Create
	099 Return X0
	100 Move W8, 0xD5A0
	101 NotImplemented "Instruction MOVK not yet implemented."
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move W8, 0xD733
	104 NotImplemented "Instruction MOVK not yet implemented."
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X8, 0xF21000
	107 Move X8, [X8+3408]
	108 Move X0, X19
	109 Move X2, X31
	110 Move X1, [X8]
	111 Call String.op_Equality, X0, X1
	112 Move TEMP, X0
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {207}
	116 Move X20, [X31+16]
	117 Move X19, [X31+24]
	118 Move X0, X31
	119 Move X30, [X31+32]
	120 Call MD5.Create
	121 Return X0
	122 Move W8, 0xB20B
	123 NotImplemented "Instruction MOVK not yet implemented."
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move W8, 0x1476
	126 NotImplemented "Instruction MOVK not yet implemented."
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X8, 0xF21000
	129 Move X8, [X8+3352]
	130 Move X0, X19
	131 Move X2, X31
	132 Move X1, [X8]
	133 Call String.op_Equality, X0, X1
	134 Move TEMP, X0
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfNotEqual {207}
	138 Move X20, [X31+16]
	139 Move X19, [X31+24]
	140 Move X0, X31
	141 Move X30, [X31+32]
	142 Call SHA384.Create
	143 Return X0
	144 Move X8, 0xF22000
	145 Move X8, [X8+1088]
	146 Move X0, X19
	147 Move X2, X31
	148 Move X1, [X8]
	149 Call String.op_Equality, X0, X1
	150 Move TEMP, X0
	151 And TEMP, TEMP, 1
	152 Compare TEMP, 1
	153 JumpIfNotEqual {207}
	154 Move X20, [X31+16]
	155 Move X19, [X31+24]
	156 Move X0, X31
	157 Move X30, [X31+32]
	158 Call RIPEMD160.Create
	159 Return X0
	160 Move X8, 0xF21000
	161 Move X8, [X8+3360]
	162 Move X0, X19
	163 Move X2, X31
	164 Move X1, [X8]
	165 Call String.op_Equality, X0, X1
	166 Move TEMP, X0
	167 And TEMP, TEMP, 1
	168 Compare TEMP, 1
	169 JumpIfNotEqual {207}
	170 Move X20, [X31+16]
	171 Move X19, [X31+24]
	172 Move X0, X31
	173 Move X30, [X31+32]
	174 Call SHA256.Create
	175 Return X0
	176 Move X8, 0xF22000
	177 Move X8, [X8+1080]
	178 Move X0, X19
	179 Move X2, X31
	180 Move X1, [X8]
	181 Call String.op_Equality, X0, X1
	182 Move TEMP, X0
	183 And TEMP, TEMP, 1
	184 Compare TEMP, 1
	185 JumpIfNotEqual {207}
	186 Move X20, [X31+16]
	187 Move X19, [X31+24]
	188 Move X30, [X31+32]
	189 Call MD4.Create
	190 Return X0
	191 Move X8, 0xF21000
	192 Move X8, [X8+3416]
	193 Move X0, X19
	194 Move X2, X31
	195 Move X1, [X8]
	196 Call String.op_Equality, X0, X1
	197 Move TEMP, X0
	198 And TEMP, TEMP, 1
	199 Compare TEMP, 1
	200 JumpIfNotEqual {207}
	201 Move X20, [X31+16]
	202 Move X19, [X31+24]
	203 Move X0, X31
	204 Move X30, [X31+32]
	205 Call SHA512.Create
	206 Return X0
	207 Move X8, 0xEF4000
	208 Move X8, [X8+1728]
	209 Move X0, [X8]
	210 Move W8, [X0+224]
	211 Compare W8, 0
	212 JumpIfNotEqual {214}
	213 Call 0x1C17DFC
	214 Move X8, 0xF1D000
	215 Move X8, [X8+432]
	216 Move X9, 0xF22000
	217 Move X9, [X9+1112]
	218 Move X1, [X8]
	219 Move X2, [X9]
	220 Move X0, X19
	221 Call 0x1C1803C
	222 Move X1, X31
	223 Call Activator.CreateInstance, X0
	224 Compare X0, 0
	225 JumpIfEqual {237}
	226 Move X9, 0xF22000
	227 Move X9, [X9+1104]
	228 Move X8, [X0]
	229 Move X1, [X9]
	230 Move W10, [X8+304]
	231 Move W9, [X1+304]
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Move X8, [X8+200]
	234 Add X8, X8, X9
	235 NotImplemented "Instruction LDUR not yet implemented."
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move X20, [X31+16]
	238 Move X19, [X31+24]
	239 Move X30, [X31+32]
	240 Return X0
	241 Call 0x1C181E0
	242 Move X20, X0
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Move X0, X20
	245 Call 0x3EB2AD0
	246 Move X20, X0
	247 Move X0, 0xEFA000
	248 Move X0, [X0+3264]
	249 Call 0x1C17D08
	250 Move X8, [X20]
	251 Move X1, [X8]
	252 Call 0x1C18270
	253 Move TEMP, X0
	254 And TEMP, TEMP, 1
	255 Compare TEMP, 1
	256 JumpIfNotEqual {279}
	257 Call 0x3EB2AE0
	258 Move X0, 0xF21000
	259 Move X0, [X0+320]
	260 Call 0x1C17D08
	261 Move X1, X19
	262 Move X2, X31
	263 Call String.Concat, X0, X1
	264 Move X19, X0
	265 Move X0, 0xF20000
	266 Move X0, [X0+3296]
	267 Call 0x1C17D08
	268 Call 0x1C17F10
	269 Move X1, X19
	270 Move X2, X31
	271 Move X20, X0
	272 Call CryptographicException..ctor, X0, X1
	273 Move X0, 0xF21000
	274 Move X0, [X0+1112]
	275 Call 0x1C17D08
	276 Move X1, X0
	277 Move X0, X20
	278 Call 0x1C17DEC
	279 Move W0, 8
	280 Call 0x3EB2AF0
	281 Move X8, [X20]
	282 Move [X0], X8
	283 Move X1, 0xCB4000
	284 Add X1, X1, 3672
	285 Move X2, X31
	286 Call 0x3EB2B00
	287 Move X20, X0
	288 Call 0x3EB2AE0
	289 Move X0, X20
	290 Call 0x1D2D690
	291 Call 0x1991590

Method: System.Void .cctor()

Disassembly:
	0x03201088 BL 0x31E7D00
	0x0320108C STR X0, [X19 + 0x28]
	0x03201090 LDP X20, X19, [X31 + 0x20]
	0x03201094 LDP X22, X21, [X31 + 0x10]
	0x03201098 LDR X30, [X31], #0x30
	0x0320109C RET
	0x032010A0 BL 0x1C16F20
	0x032010A4 ADRP X0, 0xF1F000
	0x032010A8 LDR X0, [X0 + 0xCE0]
	0x032010AC BL 0x1C16D08
	0x032010B0 BL 0x1C16F10
	0x032010B4 MOV X19, X0
	0x032010B8 ADRP X0, 0xF20000
	0x032010BC LDR X0, [X0 + 0x4E8]
	0x032010C0 B 0x3201180
	0x032010C4 ADRP X0, 0xF1F000
	0x032010C8 LDR X0, [X0 + 0xCE0]
	0x032010CC BL 0x1C16D08
	0x032010D0 BL 0x1C16F10
	0x032010D4 MOV X19, X0
	0x032010D8 ADRP X0, 0xF20000
	0x032010DC LDR X0, [X0 + 0x4F0]
	0x032010E0 B 0x3201180
	0x032010E4 ADRP X0, 0xF1F000
	0x032010E8 LDR X0, [X0 + 0xCE0]
	0x032010EC BL 0x1C16D08
	0x032010F0 BL 0x1C16F10
	0x032010F4 MOV X19, X0
	0x032010F8 ADRP X0, 0xF20000
	0x032010FC LDR X0, [X0 + 0x490]
	0x03201100 B 0x3201180
	0x03201104 ADRP X0, 0xF1F000
	0x03201108 LDR X0, [X0 + 0xCE0]
	0x0320110C BL 0x1C16D08
	0x03201110 BL 0x1C16F10
	0x03201114 MOV X19, X0
	0x03201118 ADRP X0, 0xF20000
	0x0320111C LDR X0, [X0 + 0x4F8]
	0x03201120 B 0x3201180
	0x03201124 ADRP X0, 0xF1F000
	0x03201128 LDR X0, [X0 + 0xCE0]
	0x0320112C BL 0x1C16D08
	0x03201130 BL 0x1C16F10
	0x03201134 MOV X19, X0
	0x03201138 ADRP X0, 0xF20000
	0x0320113C LDR X0, [X0 + 0x500]
	0x03201140 B 0x3201180
	0x03201144 ADRP X0, 0xF1F000
	0x03201148 LDR X0, [X0 + 0xCE0]
	0x0320114C BL 0x1C16D08
	0x03201150 BL 0x1C16F10
	0x03201154 MOV X19, X0
	0x03201158 ADRP X0, 0xF20000
	0x0320115C LDR X0, [X0 + 0x508]
	0x03201160 B 0x3201180
	0x03201164 ADRP X0, 0xF1F000
	0x03201168 LDR X0, [X0 + 0xCE0]
	0x0320116C BL 0x1C16D08
	0x03201170 BL 0x1C16F10
	0x03201174 MOV X19, X0
	0x03201178 ADRP X0, 0xF20000
	0x0320117C LDR X0, [X0 + 0x510]
	0x03201180 BL 0x1C16D08
	0x03201184 MOV X1, X0
	0x03201188 MOV X0, X19
	0x0320118C MOV X2, X31
	0x03201190 BL 0x3252170
	0x03201194 ADRP X0, 0xF20000
	0x03201198 LDR X0, [X0 + 0x518]
	0x0320119C BL 0x1C16D08
	0x032011A0 MOV X1, X0
	0x032011A4 MOV X0, X19
	0x032011A8 BL 0x1C16DEC
	0x032011AC LDR X0, [X0 + 0x10]
	0x032011B0 RET
	0x032011B4 STR X30, [X31 - 0x20]!
	0x032011B8 STP X20, X19, [X31 + 0x10]
	0x032011BC ADRP X20, 0x11DB000
	0x032011C0 LDRB W8, [X20 + 0x22B]
	0x032011C4 MOV X19, X0
	0x032011C8 TBNZ X8, 0x0, 0x32011E0
	0x032011CC ADRP X0, 0xEF2000
	0x032011D0 LDR X0, [X0 + 0x618]
	0x032011D4 BL 0x1C16CF4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x11DC000
	010 Move X22, 0xEF3000
	011 Move X19, 0xF21000
	012 Move X20, 0xF20000
	013 Move X24, 0xF21000
	014 Move X23, 0xF21000
	015 Move X21, 0xF21000
	016 Move X22, [X22+1560]
	017 Move W8, [X25+545]
	018 Move X19, [X19+1120]
	019 Move X20, [X20+3976]
	020 Move X24, [X24+1128]
	021 Move X23, [X23+1136]
	022 Move X21, [X21+1144]
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {47}
	027 Move X0, 0xEF3000
	028 Move X0, [X0+1560]
	029 Call 0x1C17CF4
	030 Move X0, 0xF20000
	031 Move X0, [X0+3976]
	032 Call 0x1C17CF4
	033 Move X0, 0xF21000
	034 Move X0, [X0+1144]
	035 Call 0x1C17CF4
	036 Move X0, 0xF21000
	037 Move X0, [X0+1136]
	038 Call 0x1C17CF4
	039 Move X0, 0xF21000
	040 Move X0, [X0+1120]
	041 Call 0x1C17CF4
	042 Move X0, 0xF21000
	043 Move X0, [X0+1128]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X25+545], W8
	047 Move X0, [X22]
	048 Move W1, 20
	049 Call 0x1C17D6C
	050 Move X1, [X19]
	051 Move X2, X31
	052 Move X19, X0
	053 Call RuntimeHelpers.InitializeArray, X0, X1
	054 Move X8, [X20]
	055 Move W1, 32
	056 Move X8, [X8+184]
	057 Move [X8], X19
	058 Move X0, [X22]
	059 Call 0x1C17D6C
	060 Move X1, [X24]
	061 Move X2, X31
	062 Move X19, X0
	063 Call RuntimeHelpers.InitializeArray, X0, X1
	064 Move X8, [X20]
	065 Move W1, 48
	066 Move X8, [X8+184]
	067 Move [X8+8], X19
	068 Move X0, [X22]
	069 Call 0x1C17D6C
	070 Move X1, [X23]
	071 Move X2, X31
	072 Move X19, X0
	073 Call RuntimeHelpers.InitializeArray, X0, X1
	074 Move X8, [X20]
	075 Move W1, 64
	076 Move X8, [X8+184]
	077 Move [X8+16], X19
	078 Move X0, [X22]
	079 Call 0x1C17D6C
	080 Move X1, [X21]
	081 Move X2, X31
	082 Move X19, X0
	083 Call RuntimeHelpers.InitializeArray, X0, X1
	084 Move X8, [X20]
	085 Move X22, [X31+32]
	086 Move X21, [X31+40]
	087 Move X24, [X31+16]
	088 Move X23, [X31+24]
	089 Move X8, [X8+184]
	090 Move [X8+24], X19
	091 Move X20, [X31+48]
	092 Move X19, [X31+56]
	093 Move X30, [X31+64]
	094 Move X25, [X31+72]
	095 Return 

