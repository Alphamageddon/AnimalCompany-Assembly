Type: Mono.Security.Cryptography.PKCS8/EncryptedPrivateKeyInfo

Method: System.Void .ctor()

Disassembly:
	0x03201ECC LDR X21, [X21 + 0x530]
	0x03201ED0 CBNZ W8, 0x3201EDC

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void .ctor(System.Byte[] data)

Disassembly:
	0x03201ED4 MOV X0, X19
	0x03201ED8 BL 0x3201458
	0x03201EDC LDR X0, [X21]
	0x03201EE0 BL 0x1C16F10
	0x03201EE4 MOV X1, X20
	0x03201EE8 MOV X21, X0
	0x03201EEC BL 0x3201F94
	0x03201EF0 CBZ X21, 0x3201F48
	0x03201EF4 LDP X2, X1, [X19 + 0x58]
	0x03201EF8 MOV X0, X21
	0x03201EFC BL 0x32021A4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move X0, X20
	009 Move X1, X19
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move X30, [X31+32]

Method: System.String get_Algorithm()

Disassembly:
	0x032021AC STP X20, X19, [X31 + 0x20]
	0x032021B0 ADRP X22, 0x11DA000

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Byte[] get_EncryptedData()

Disassembly:
	0x032021B4 ADRP X23, 0xF1F000
	0x032021B8 LDRB W8, [X22 + 0x254]
	0x032021BC LDR X23, [X23 + 0x598]
	0x032021C0 MOV X21, X2
	0x032021C4 MOV X19, X1
	0x032021C8 MOV X20, X0
	0x032021CC TBNZ X8, 0x0, 0x32021E4
	0x032021D0 ADRP X0, 0xF1F000
	0x032021D4 LDR X0, [X0 + 0x598]
	0x032021D8 BL 0x1C16CF4
	0x032021DC MOVZ W8, 0x1
	0x032021E0 STRB W8, [X22 + 0x254]
	0x032021E4 LDR X0, [X23]
	0x032021E8 BL 0x1C16F10
	0x032021EC MOV X1, X21
	0x032021F0 MOV X22, X0
	0x032021F4 BL 0x3207780
	0x032021F8 CBZ X22, 0x3202218
	0x032021FC MOV X0, X22
	0x03202200 MOV X1, X20
	0x03202204 MOV X2, X19
	0x03202208 LDP X20, X19, [X31 + 0x20]
	0x0320220C LDP X22, X21, [X31 + 0x10]
	0x03202210 LDP X30, X23, [X31], #0x30
	0x03202214 B 0x3207854
	0x03202218 BL 0x1C16F20
	0x0320221C STP X30, X21, [X31 - 0x20]!
	0x03202220 STP X20, X19, [X31 + 0x10]
	0x03202224 ADRP X21, 0x11DA000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11DB000
	005 Move W8, [X20+555]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEF2000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+555], W8
	016 Move X0, [X19+40]
	017 Compare X0, 0
	018 JumpIfEqual {31}
	019 Move X1, X31
	020 Call Array.Clone, X0
	021 Compare X0, 0
	022 JumpIfEqual {31}
	023 Move X8, 0xEF2000
	024 Move X8, [X8+1560]
	025 Move X19, X0
	026 Move X20, [X8]
	027 Move X1, X20
	028 Call 0x1C17E00
	029 Compare X0, 0
	030 JumpIfEqual {35}
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Move X0, X19
	036 Move X1, X20
	037 Call 0x1C181E0

Method: System.Byte[] get_Salt()

Disassembly:
	0x03202228 LDRB W8, [X21 + 0x236]
	0x0320222C MOV W19, W2
	0x03202230 MOV X20, X1
	0x03202234 TBNZ X8, 0x0, 0x320224C
	0x03202238 ADRP X0, 0xEF1000
	0x0320223C LDR X0, [X0 + 0x618]
	0x03202240 BL 0x1C16CF4
	0x03202244 MOVZ W8, 0x1
	0x03202248 STRB W8, [X21 + 0x236]
	0x0320224C CBZ X20, 0x32022C8
	0x03202250 MOV X0, X20
	0x03202254 BL 0x3202644
	0x03202258 CBZ X0, 0x32022C8
	0x0320225C LDR W8, [X0 + 0x18]
	0x03202260 MOV X20, X0
	0x03202264 CMP W8, W19
	0x03202268 B.GE 0x32022B8
	0x0320226C ADRP X8, 0xEF1000
	0x03202270 LDR X8, [X8 + 0x618]
	0x03202274 MOV W1, W19
	0x03202278 LDR X0, [X8]
	0x0320227C BL 0x1C16D6C
	0x03202280 LDR W4, [X20 + 0x18]
	0x03202284 MOV X21, X0
	0x03202288 MOV X0, X20
	0x0320228C MOV W1, W31
	0x03202290 SUB W3, W19, W4
	0x03202294 MOV X2, X21
	0x03202298 MOV X5, X31
	0x0320229C BL 0x33A8A9C
	0x032022A0 LDR W2, [X20 + 0x18]
	0x032022A4 MOV X0, X20
	0x032022A8 MOV W1, W31
	0x032022AC MOV X3, X31
	0x032022B0 BL 0x339FA34
	0x032022B4 MOV X20, X21
	0x032022B8 MOV X0, X20
	0x032022BC LDP X20, X19, [X31 + 0x10]
	0x032022C0 LDP X30, X21, [X31], #0x20
	0x032022C4 RET
	0x032022C8 BL 0x1C16F20
	0x032022CC STR X30, [X31 - 0x10]!
	0x032022D0 LDR W8, [X0 + 0x10]
	0x032022D4 CBZ W8, 0x320230C
	0x032022D8 LDR X8, [X0 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11DB000
	006 Move W8, [X20+556]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xEF2000
	013 Move X0, [X0+1560]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+556], W8
	017 Move X21, 0xEF2000
	018 Move X0, [X19+24]
	019 Move X21, [X21+1560]
	020 Compare X0, 0
	021 JumpIfNotEqual {38}
	022 Call RandomNumberGenerator.Create
	023 Move X8, [X21]
	024 Move X20, X0
	025 Move W1, 8
	026 Move X0, X8
	027 Call 0x1C17D6C
	028 Move [X19+24], X0
	029 Compare X20, 0
	030 JumpIfEqual {55}
	031 Move X8, [X20]
	032 Move X1, X0
	033 Move X0, X20
	034 Move X9, [X8+408]
	035 Move X2, [X8+416]
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move X0, [X19+24]
	038 Compare X0, 0
	039 JumpIfEqual {55}
	040 Move X1, X31
	041 Call Array.Clone, X0
	042 Compare X0, 0
	043 JumpIfEqual {50}
	044 Move X20, [X21]
	045 Move X19, X0
	046 Move X1, X20
	047 Call 0x1C17E00
	048 Compare X0, 0
	049 JumpIfEqual {56}
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]
	054 Return X0
	055 Call 0x1C17F20
	056 Move X0, X19
	057 Move X1, X20
	058 Call 0x1C181E0

Method: System.Int32 get_IterationCount()

Disassembly:
	0x032022DC CBZ X8, 0x3202318
	0x032022E0 LDR W9, [X8 + 0x18]

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void Decode(System.Byte[] data)

Disassembly:
	0x03201F00 LDR X8, [X19]
	0x03201F04 MOV X20, X0
	0x03201F08 MOV X0, X19
	0x03201F0C LDP X9, X1, [X8 + 0x198]
	0x03201F10 BLR X9
	0x03201F14 SBFM W2, W0, 0x3, 0x1F
	0x03201F18 MOV X1, X20
	0x03201F1C BL 0x320221C
	0x03201F20 MOV X19, X0
	0x03201F24 MOV X0, X21
	0x03201F28 BL 0x32022CC
	0x03201F2C CBZ X20, 0x3201F48
	0x03201F30 MOV X0, X20
	0x03201F34 BL 0x32022CC
	0x03201F38 MOV X0, X19
	0x03201F3C LDP X20, X19, [X31 + 0x10]
	0x03201F40 LDP X30, X21, [X31], #0x20
	0x03201F44 RET
	0x03201F48 BL 0x1C16F20
	0x03201F4C ADRP X0, 0xF1B000
	0x03201F50 LDR X0, [X0 + 0x4B8]
	0x03201F54 BL 0x1C16D08
	0x03201F58 BL 0x1C16F10
	0x03201F5C MOV X19, X0
	0x03201F60 ADRP X0, 0xF20000
	0x03201F64 LDR X0, [X0 + 0x588]
	0x03201F68 BL 0x1C16D08
	0x03201F6C MOV X1, X0
	0x03201F70 MOV X0, X19
	0x03201F74 MOV X2, X31
	0x03201F78 BL 0x338C448
	0x03201F7C ADRP X0, 0xF20000
	0x03201F80 LDR X0, [X0 + 0x590]
	0x03201F84 BL 0x1C16D08
	0x03201F88 MOV X1, X0
	0x03201F8C MOV X0, X19
	0x03201F90 BL 0x1C16DEC
	0x03201F94 STP X30, X21, [X31 - 0x20]!
	0x03201F98 STP X20, X19, [X31 + 0x10]
	0x03201F9C ADRP X21, 0x11DB000
	0x03201FA0 LDRB W8, [X21 + 0x244]
	0x03201FA4 MOV X20, X1
	0x03201FA8 MOV X19, X0
	0x03201FAC TBNZ X8, 0x0, 0x3201FD0
	0x03201FB0 ADRP X0, 0xEF2000
	0x03201FB4 LDR X0, [X0 + 0x618]
	0x03201FB8 BL 0x1C16CF4
	0x03201FBC ADRP X0, 0xF1B000
	0x03201FC0 LDR X0, [X0 + 0xD08]
	0x03201FC4 BL 0x1C16CF4
	0x03201FC8 MOVZ W8, 0x1
	0x03201FCC STRB W8, [X21 + 0x244]
	0x03201FD0 MOVZ W8, 0x1
	0x03201FD4 MOV X0, X19
	0x03201FD8 MOV X1, X31
	0x03201FDC STR W8, [X19 + 0x10]
	0x03201FE0 BL 0x33BDD8C
	0x03201FE4 CBZ X20, 0x32021A0
	0x03201FE8 LDR X8, [X20 + 0x18]
	0x03201FEC CBNZ X8, 0x320200C
	0x03201FF0 ADRP X8, 0xEF2000
	0x03201FF4 LDR X8, [X8 + 0x618]
	0x03201FF8 MOVZ W1, 0x1
	0x03201FFC LDR X0, [X8]
	0x03202000 BL 0x1C16D6C
	0x03202004 MOV X20, X0
	0x03202008 CBZ X0, 0x32021A0
	0x0320200C LDR W8, [X20 + 0x18]
	0x03202010 ADRP X9, 0xF1A000
	0x03202014 LDR X9, [X9 + 0xD08]
	0x03202018 UBFM W10, W8, 0x2, 0x1F
	0x0320201C ANDS W21, W8, 0x3
	0x03202020 CINC W1, W10, NE
	0x03202024 STR W1, [X19 + 0x10]
	0x03202028 LDR X0, [X9]
	0x0320202C BL 0x1C16D6C
	0x03202030 STR X0, [X19 + 0x18]
	0x03202034 LDR X8, [X20 + 0x18]
	0x03202038 SUB W11, W8, 0x1
	0x0320203C CMP W11, 0x3
	0x03202040 B.LT 0x32020D0
	0x03202044 MOV X9, X31
	0x03202048 AND X10, X8, 0x0
	0x0320204C MOV W12, W11
	0x03202050 ADD X11, X0, 0x20
	0x03202054 SUB X13, X12, 0x3
	0x03202058 CMP X13, X10
	0x0320205C B.CS 0x320219C
	0x03202060 SUB X13, X12, 0x2
	0x03202064 CMP X13, X10
	0x03202068 B.CS 0x320219C
	0x0320206C SUB X13, X12, 0x1
	0x03202070 CMP X13, X10
	0x03202074 B.CS 0x320219C
	0x03202078 CMP X12, X10
	0x0320207C B.CS 0x320219C
	0x03202080 CBZ X0, 0x32021A0
	0x03202084 LDR W13, [X0 + 0x18]
	0x03202088 CMP X9, X13
	0x0320208C B.CS 0x320219C
	0x03202090 ADD X13, X20, X12
	0x03202094 LDRB W14, [X13 + 0x1D]
	0x03202098 LDRB W13, [X13 + 0x1E]
	0x0320209C ADD X15, X20, X12
	0x032020A0 LDRB W15, [X15 + 0x1F]
	0x032020A4 UBFM W14, W14, 0x8, 0x7
	0x032020A8 BFM W14, W13, 0x10, 0x7
	0x032020AC ADD X13, X20, X12
	0x032020B0 LDRB W13, [X13 + 0x20]
	0x032020B4 BFM W14, W15, 0x18, 0x7
	0x032020B8 CMP X12, 0x6
	0x032020BC SUB X12, X12, 0x4
	0x032020C0 ORR W13, W14, W13, 0x0
	0x032020C4 STR W13, [X11, X9, LSL #2]
	0x032020C8 ADD X9, X9, 0x1
	0x032020CC B.GT 0x3202054
	0x032020D0 CMP W21, 0x3
	0x032020D4 B.EQ 0x320210C
	0x032020D8 CMP W21, 0x2
	0x032020DC B.EQ 0x3202154
	0x032020E0 CMP W21, 0x1
	0x032020E4 B.NE 0x320218C
	0x032020E8 CBZ W8, 0x320219C
	0x032020EC CBZ X0, 0x32021A0
	0x032020F0 LDR W8, [X19 + 0x10]
	0x032020F4 LDR W9, [X0 + 0x18]
	0x032020F8 SUB W8, W8, 0x1
	0x032020FC CMP W8, W9
	0x03202100 B.CS 0x320219C
	0x03202104 LDRB W9, [X20 + 0x20]
	0x03202108 B 0x3202184
	0x0320210C CBZ W8, 0x320219C
	0x03202110 CMP W8, 0x1
	0x03202114 B.EQ 0x320219C
	0x03202118 CMP W8, 0x2
	0x0320211C B.LS 0x320219C
	0x03202120 CBZ X0, 0x32021A0
	0x03202124 LDR W8, [X19 + 0x10]
	0x03202128 LDR W9, [X0 + 0x18]
	0x0320212C SUB W8, W8, 0x1
	0x03202130 CMP W8, W9
	0x03202134 B.CS 0x320219C
	0x03202138 LDRB W9, [X20 + 0x20]
	0x0320213C LDRB W10, [X20 + 0x21]
	0x03202140 LDRB W11, [X20 + 0x22]
	0x03202144 UBFM W9, W9, 0x10, 0xF
	0x03202148 BFM W9, W10, 0x18, 0x7
	0x0320214C ORR W9, W9, W11, 0x0
	0x03202150 B 0x3202184
	0x03202154 CBZ W8, 0x320219C
	0x03202158 CMP W8, 0x1
	0x0320215C B.EQ 0x320219C
	0x03202160 CBZ X0, 0x32021A0
	0x03202164 LDR W8, [X19 + 0x10]
	0x03202168 LDR W9, [X0 + 0x18]
	0x0320216C SUB W8, W8, 0x1
	0x03202170 CMP W8, W9
	0x03202174 B.CS 0x320219C
	0x03202178 LDRB W10, [X20 + 0x20]
	0x0320217C LDRB W9, [X20 + 0x21]
	0x03202180 BFM W9, W10, 0x18, 0x7
	0x03202184 ADD X8, X0, W8, 0x2, SXTW
	0x03202188 STR W9, [X8 + 0x20]
	0x0320218C MOV X0, X19
	0x03202190 LDP X20, X19, [X31 + 0x10]
	0x03202194 LDP X30, X21, [X31], #0x20
	0x03202198 B 0x3205BB4
	0x0320219C BL 0x1C16F28
	0x032021A0 BL 0x1C16F20
	0x032021A4 STP X30, X23, [X31 - 0x30]!
	0x032021A8 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11DC000
	007 Move X22, 0xF20000
	008 Move W8, [X21+557]
	009 Move X22, [X22+2968]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF20000
	017 Move X0, [X0+2968]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+557], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X20
	024 Move X2, X31
	025 Move X21, X0
	026 Call ASN1..ctor, X0, X1
	027 Compare X21, 0
	028 JumpIfEqual {115}
	029 Move W8, [X21+16]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSEL not yet implemented."
	032 Compare X20, 0
	033 JumpIfEqual {115}
	034 Move X0, X20
	035 Move W1, W31
	036 Move X2, X31
	037 Call ASN1.get_Item, X0, X1
	038 Compare X0, 0
	039 JumpIfEqual {115}
	040 Move W8, [X0+16]
	041 Move X21, X0
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, X21
	044 Move W1, W31
	045 Move X2, X31
	046 Call ASN1.get_Item, X0, X1
	047 Compare X0, 0
	048 JumpIfEqual {115}
	049 Move W8, [X0+16]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X1, X31
	052 Call ASN1Convert.ToOid, X0
	053 Move [X19+16], X0
	054 Move X0, X21
	055 Move X1, X31
	056 Call ASN1.get_Count, X0
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction CSEL not yet implemented."
	059 Move W1, 1
	060 Move X0, X21
	061 Move X2, X31
	062 Call ASN1.get_Item, X0, X1
	063 Compare X0, 0
	064 JumpIfEqual {115}
	065 Move W8, [X0+16]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction CSEL not yet implemented."
	068 Compare X20, 0
	069 JumpIfEqual {115}
	070 Move X0, X20
	071 Move W1, W31
	072 Move X2, X31
	073 Call ASN1.get_Item, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {115}
	076 Move W8, [X0+16]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 NotImplemented "Instruction CSEL not yet implemented."
	079 Move X1, X31
	080 Call ASN1.get_Value, X0
	081 Move [X19+24], X0
	082 Compare X20, 0
	083 JumpIfEqual {115}
	084 Move W1, 1
	085 Move X0, X20
	086 Move X2, X31
	087 Call ASN1.get_Item, X0, X1
	088 Compare X0, 0
	089 JumpIfEqual {115}
	090 Move W8, [X0+16]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X1, X31
	093 Call ASN1Convert.ToInt32, X0
	094 Move X20, X22
	095 Move [X19+32], W0
	096 Compare X20, 0
	097 JumpIfEqual {115}
	098 Move W1, 1
	099 Move X0, X20
	100 Move X2, X31
	101 Call ASN1.get_Item, X0, X1
	102 Compare X0, 0
	103 JumpIfEqual {115}
	104 Move W8, [X0+16]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X1, X31
	107 Call ASN1.get_Value, X0
	108 Move [X19+40], X0
	109 Move X20, [X31+32]
	110 Move X19, [X31+40]
	111 Move X22, [X31+16]
	112 Move X21, [X31+24]
	113 Move X30, [X31+48]
	114 Return 
	115 Call 0x1C17F20
	116 Move X0, 0xF1F000
	117 Move X0, [X0+3296]
	118 Call 0x1C17D08
	119 Call 0x1C17F10
	120 Move X19, X0
	121 Move X0, 0xF20000
	122 Move X0, [X0+1256]
	123 Move X0, 0xF1F000
	124 Move X0, [X0+3296]
	125 Call 0x1C17D08
	126 Call 0x1C17F10
	127 Move X19, X0
	128 Move X0, 0xF20000
	129 Move X0, [X0+1264]
	130 Move X0, 0xF1F000
	131 Move X0, [X0+3296]
	132 Call 0x1C17D08
	133 Call 0x1C17F10
	134 Move X19, X0
	135 Move X0, 0xF20000
	136 Move X0, [X0+1168]
	137 Move X0, 0xF1F000
	138 Move X0, [X0+3296]
	139 Call 0x1C17D08
	140 Call 0x1C17F10
	141 Move X19, X0
	142 Move X0, 0xF20000
	143 Move X0, [X0+1272]
	144 Move X0, 0xF1F000
	145 Move X0, [X0+3296]
	146 Call 0x1C17D08
	147 Call 0x1C17F10
	148 Move X19, X0
	149 Move X0, 0xF20000
	150 Move X0, [X0+1280]
	151 Move X0, 0xF1F000
	152 Move X0, [X0+3296]
	153 Call 0x1C17D08
	154 Call 0x1C17F10
	155 Move X19, X0
	156 Move X0, 0xF20000
	157 Move X0, [X0+1288]
	158 Move X0, 0xF1F000
	159 Move X0, [X0+3296]
	160 Call 0x1C17D08
	161 Call 0x1C17F10
	162 Move X19, X0
	163 Move X0, 0xF20000
	164 Move X0, [X0+1296]
	165 Call 0x1C17D08
	166 Move X1, X0
	167 Move X0, X19
	168 Move X2, X31
	169 Call CryptographicException..ctor, X0, X1
	170 Move X0, 0xF20000
	171 Move X0, [X0+1304]
	172 Call 0x1C17D08
	173 Move X1, X0
	174 Move X0, X19
	175 Call 0x1C17DEC

