Type: Mono.Security.Cryptography.CryptoConvert

Method: System.String ToHex(System.Byte[] input)

Disassembly:
	0x031FEB80 EOR W7, W7, W14, 0x15
	0x031FEB84 ADD W2, W2, W20
	0x031FEB88 EXTR W20, W14, W14, 0x15
	0x031FEB8C ADD W4, W4, W7
	0x031FEB90 EOR W6, W20, W6, 0x17
	0x031FEB94 ADD W4, W4, W0
	0x031FEB98 ADD W12, W12, W22
	0x031FEB9C EOR W6, W6, W4, 0x11
	0x031FEBA0 EXTR W7, W4, W4, 0x11
	0x031FEBA4 ADD W12, W12, W6
	0x031FEBA8 EOR W14, W7, W14, 0x15
	0x031FEBAC ADD W12, W12, W0
	0x031FEBB0 EOR W14, W14, W12, 0x1D
	0x031FEBB4 EXTR W6, W12, W12, 0x1D
	0x031FEBB8 ADD W14, W2, W14
	0x031FEBBC EOR W2, W6, W4, 0x11
	0x031FEBC0 ADD W14, W14, W0
	0x031FEBC4 ADD W15, W15, W20
	0x031FEBC8 EOR W2, W2, W14, 0x17
	0x031FEBCC EXTR W4, W14, W14, 0x17
	0x031FEBD0 ADD W15, W15, W2
	0x031FEBD4 EOR W12, W4, W12, 0x1D
	0x031FEBD8 ADD W15, W15, W0
	0x031FEBDC ADD W5, W5, W7
	0x031FEBE0 EOR W12, W12, W15, 0x15
	0x031FEBE4 EXTR W2, W15, W15, 0x15
	0x031FEBE8 ADD W12, W5, W12
	0x031FEBEC EOR W14, W2, W14, 0x17
	0x031FEBF0 ADD W12, W12, W0
	0x031FEBF4 ADD W9, W9, W6
	0x031FEBF8 EOR W14, W14, W12, 0x11
	0x031FEBFC ADD W2, W13, W2
	0x031FEC00 EXTR W13, W12, W12, 0x11
	0x031FEC04 ADD W9, W9, W14
	0x031FEC08 EOR W14, W13, W15, 0x15
	0x031FEC0C ADD W9, W9, W0
	0x031FEC10 ADD W17, W17, W4
	0x031FEC14 EOR W14, W14, W9, 0x1D
	0x031FEC18 ADD W15, W3, W13
	0x031FEC1C EXTR W13, W9, W9, 0x1D
	0x031FEC20 ADD W14, W17, W14
	0x031FEC24 EOR W12, W13, W12, 0x11
	0x031FEC28 ADD W14, W14, W0
	0x031FEC2C EOR W12, W12, W14, 0x17
	0x031FEC30 ADD W10, W10, W13
	0x031FEC34 EXTR W13, W14, W14, 0x17
	0x031FEC38 ADD W12, W2, W12
	0x031FEC3C EOR W17, W13, W9, 0x1D
	0x031FEC40 ADD W9, W12, W0
	0x031FEC44 EOR W17, W17, W9, 0x15
	0x031FEC48 EXTR W12, W9, W9, 0x15
	0x031FEC4C ADD W15, W15, W17
	0x031FEC50 EOR W17, W12, W14, 0x17
	0x031FEC54 ADD W14, W15, W0
	0x031FEC58 LDR W27, [X19 + 0x20]
	0x031FEC5C EOR W15, W17, W14, 0x11
	0x031FEC60 ADD W10, W10, W15
	0x031FEC64 ADD W10, W10, W0
	0x031FEC68 EXTR W15, W10, W10, 0x1D
	0x031FEC6C ADD W17, W27, W15
	0x031FEC70 CMP W8, 0x1
	0x031FEC74 STR W17, [X19 + 0x20]
	0x031FEC78 B.EQ 0x31FED18
	0x031FEC7C EXTR W17, W14, W14, 0x11
	0x031FEC80 EOR W9, W17, W9, 0x15
	0x031FEC84 ADD W13, W16, W13
	0x031FEC88 EOR W9, W9, W10, 0x1D
	0x031FEC8C ADD W9, W13, W9
	0x031FEC90 EOR W14, W15, W14, 0x11
	0x031FEC94 ADD W13, W9, W0
	0x031FEC98 ADD W11, W11, W12
	0x031FEC9C EXTR W9, W13, W13, 0x17
	0x031FECA0 EOR W13, W14, W13, 0x17
	0x031FECA4 ADD W11, W11, W13
	0x031FECA8 EOR W13, W9, W10, 0x1D
	0x031FECAC ADD W10, W11, W0
	0x031FECB0 LDR W12, [X19 + 0x24]
	0x031FECB4 ADD W15, W1, W17
	0x031FECB8 EOR W11, W13, W10, 0x15

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x11DF000
	009 Move W8, [X20+527]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0xEF8000
	016 Move X0, [X0+3144]
	017 Call 0x1C17CF4
	018 Move X0, 0xEF6000
	019 Move X0, [X0+2288]
	020 Call 0x1C17CF4
	021 Move X0, 0xF23000
	022 Move X0, [X0+2984]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+527], W8
	026 Move [X31+12], W31
	027 Compare X19, 0
	028 JumpIfEqual {73}
	029 Move X8, 0xEF6000
	030 Move X8, [X8+2288]
	031 Move X0, [X8]
	032 Call 0x1C17F10
	033 Move W8, [X19+24]
	034 Move X2, X31
	035 Move X20, X0
	036 Move W1, W8
	037 ShiftRight W1, 31
	038 And W1, W1, 0x3FFFFFFF
	039 Call StringBuilder..ctor, X0, X1
	040 Move X8, [X19+24]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X23, 0xEF8000
	043 Move X24, 0xF23000
	044 Move X23, [X23+3144]
	045 Move X24, [X24+2984]
	046 Move X21, X31
	047 And X8, X8, 0
	048 Add X22, X19, 32
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W8, [X22]
	051 Move X0, [X23]
	052 Move [X31+12], W8
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X31
	058 Call CultureInfo.get_InvariantCulture
	059 Move X1, [X24]
	060 Move X2, X0
	061 Add X0, X31, 12
	062 Move X3, X31
	063 Call Byte.ToString, X0, X1, X2
	064 Compare X20, 0
	065 JumpIfEqual {89}
	066 Move X1, X0
	067 Move X0, X20
	068 Move X2, X31
	069 Call StringBuilder.Append, X0, X1
	070 Move W8, [X19+24]
	071 Add X21, X21, 1
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X0, X31
	074 Compare X20, 0
	075 JumpIfEqual {89}
	076 Move X8, [X20]
	077 Move X0, X20
	078 Move X9, [X8+360]
	079 Move X1, [X8+368]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X22, [X31+32]
	084 Move X21, [X31+40]
	085 Move X24, [X31+16]
	086 Move X23, [X31+24]
	087 Move X30, [X31+64]
	088 Return X0
	089 Call 0x1C17F20
	090 Call 0x1C17F28

