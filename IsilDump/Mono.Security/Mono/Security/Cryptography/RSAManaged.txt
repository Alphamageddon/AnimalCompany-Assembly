Type: Mono.Security.Cryptography.RSAManaged

Method: System.Void .ctor()

Disassembly:
	0x032022E4 MOV X10, X31
	0x032022E8 CMP W10, W9

ISIL:
	001 Move W1, 1024

Method: System.Void .ctor(System.Int32 keySize)

Disassembly:
	0x032022EC B.CS 0x3202314
	0x032022F0 ADD X11, X8, X10, 0x2, LSL
	0x032022F4 STR W31, [X11 + 0x20]
	0x032022F8 LDR W11, [X0 + 0x10]
	0x032022FC ADD W10, W10, 0x1
	0x03202300 SXTW X10, W10
	0x03202304 CMP X10, X11
	0x03202308 B.LT 0x32022E8
	0x0320230C LDR X30, [X31], #0x10
	0x03202310 RET
	0x03202314 BL 0x1C16F28
	0x03202318 BL 0x1C16F20
	0x0320231C STP X30, X27, [X31 - 0x50]!
	0x03202320 STP X26, X25, [X31 + 0x10]
	0x03202324 STP X24, X23, [X31 + 0x20]
	0x03202328 STP X22, X21, [X31 + 0x30]
	0x0320232C STP X20, X19, [X31 + 0x40]
	0x03202330 ADRP X20, 0x11DA000
	0x03202334 LDRB W9, [X20 + 0x232]
	0x03202338 MOV W23, W1
	0x0320233C MOV X22, X0
	0x03202340 MOV X19, X8
	0x03202344 TBNZ X9, 0x0, 0x3202368
	0x03202348 ADRP X0, 0xF1F000
	0x0320234C LDR X0, [X0 + 0x530]
	0x03202350 BL 0x1C16CF4
	0x03202354 ADRP X0, 0xEF1000
	0x03202358 LDR X0, [X0 + 0x618]
	0x0320235C BL 0x1C16CF4
	0x03202360 MOVZ W8, 0x1
	0x03202364 STRB W8, [X20 + 0x232]
	0x03202368 LDRB W8, [X22 + 0x23]
	0x0320236C CBNZ W8, 0x32025AC
	0x03202370 LDRB W8, [X22 + 0x22]
	0x03202374 CBNZ W8, 0x3202380
	0x03202378 MOV X0, X22
	0x0320237C BL 0x3201458
	0x03202380 LDR X0, [X22 + 0x60]
	0x03202384 CBZ X0, 0x32025A8
	0x03202388 BL 0x3202644
	0x0320238C LDR X8, [X22 + 0x58]
	0x03202390 CBZ X8, 0x32025A8
	0x03202394 MOV X20, X0
	0x03202398 MOV X0, X8
	0x0320239C BL 0x3202644
	0x032023A0 MOV X21, X0
	0x032023A4 TBZ X23, 0x0, 0x3202550
	0x032023A8 ADRP X25, 0xF1F000
	0x032023AC LDR X25, [X25 + 0x530]
	0x032023B0 LDR X23, [X22 + 0x28]
	0x032023B4 LDR X0, [X25]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x11DB000
	008 Move X21, 0xF20000
	009 Move X22, 0xF20000
	010 Move W8, [X23+558]
	011 Move X21, [X21+1312]
	012 Move X22, [X22+1320]
	013 Move W19, W1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xF20000
	020 Move X0, [X0+1312]
	021 Call 0x1C17CF4
	022 Move X0, 0xF20000
	023 Move X0, [X0+1320]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+558], W8
	027 Move W8, 1
	028 Move X0, X20
	029 Move X1, X31
	030 Move [X20+33], W8
	031 Call RSA..ctor, X0
	032 Move X0, [X21]
	033 Move W1, 1
	034 Call 0x1C17D6C
	035 Move [X20+24], X0
	036 Move X21, X0
	037 Move X0, [X22]
	038 Call 0x1C17F10
	039 Move W1, 384
	040 Move W2, 0x4000
	041 Move W3, 8
	042 Move X4, X31
	043 Move X22, X0
	044 Call KeySizes..ctor, X0, X1, X2, X3
	045 Compare X21, 0
	046 JumpIfEqual {62}
	047 Move W8, [X21+24]
	048 Compare W8, 0
	049 JumpIfEqual {63}
	050 Move [X21+32], X22
	051 Move X0, X20
	052 Move W1, W19
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X2, X31
	058 Move X30, [X31+48]
	059 Move X23, [X31+56]
	060 Call AsymmetricAlgorithm.set_KeySize, X0, X1
	061 Return 
	062 Call 0x1C17F20
	063 Call 0x1C17F28

Method: System.Void Finalize()

Disassembly:
	0x032023B8 LDR W8, [X0 + 0xE0]
	0x032023BC CBNZ W8, 0x32023C4
	0x032023C0 BL 0x1C16DFC
	0x032023C4 MOV X0, X23
	0x032023C8 MOV X1, X31
	0x032023CC BL 0x3201DDC
	0x032023D0 TBNZ X0, 0x0, 0x32025FC
	0x032023D4 LDR X0, [X22 + 0x28]
	0x032023D8 CBZ X0, 0x32025A8
	0x032023DC BL 0x3202644
	0x032023E0 CBZ X0, 0x32025A8
	0x032023E4 CBZ X21, 0x32025A8
	0x032023E8 LDR W8, [X0 + 0x18]
	0x032023EC LDR W1, [X21 + 0x18]
	0x032023F0 MOV X23, X0
	0x032023F4 CMP W8, W1
	0x032023F8 B.EQ 0x3202438
	0x032023FC ADRP X8, 0xEF1000
	0x03202400 LDR X8, [X8 + 0x618]
	0x03202404 LDR X0, [X8]
	0x03202408 BL 0x1C16D6C
	0x0320240C CBZ X0, 0x32025A8
	0x03202410 LDR W8, [X0 + 0x18]
	0x03202414 LDR W4, [X23 + 0x18]
	0x03202418 MOV X24, X0
	0x0320241C MOV X0, X23
	0x03202420 MOV W1, W31
	0x03202424 SUB W3, W8, W4
	0x03202428 MOV X2, X24
	0x0320242C MOV X5, X31
	0x03202430 BL 0x33A8A9C
	0x03202434 MOV X23, X24
	0x03202438 LDR X0, [X25]
	0x0320243C LDR X24, [X22 + 0x30]
	0x03202440 LDR W8, [X0 + 0xE0]
	0x03202444 CBNZ W8, 0x320244C
	0x03202448 BL 0x1C16DFC
	0x0320244C MOV X0, X24
	0x03202450 MOV X1, X31
	0x03202454 BL 0x3201788

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0]
	006 Move X19, X0
	007 Move X9, [X8+392]
	008 Move X2, [X8+400]
	009 Move W1, W31
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move X0, X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X1, X31
	015 Move X30, [X31+32]
	016 Move X21, [X31+40]
	017 Call Object.Finalize, X0
	018 Return 
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X21, X0
	021 Move X0, X21
	022 Call 0x3EB2AD0
	023 Move X20, [X0]
	024 Call 0x3EB2AE0
	025 Move X0, X19
	026 Move X1, X31
	027 Call Object.Finalize, X0
	028 Compare X20, 0
	029 JumpIfNotEqual {36}
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 
	035 Move X20, X31
	036 Move X0, X20
	037 Call 0x1C17F18
	038 Move X21, X0
	039 Move X0, X19
	040 Move X1, X31
	041 Call Object.Finalize, X0
	042 Compare X20, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X21
	045 Call 0x1D2D690
	046 Move X0, X20
	047 Call 0x1C17F18
	048 Call 0x1991590

Method: System.Void GenerateKeyPair()

Disassembly:
	0x03202458 TBZ X0, 0x0, 0x320256C
	0x0320245C LDR X0, [X25]
	0x03202460 LDR X24, [X22 + 0x38]
	0x03202464 LDR W8, [X0 + 0xE0]
	0x03202468 CBNZ W8, 0x3202470
	0x0320246C BL 0x1C16DFC
	0x03202470 MOV X0, X24
	0x03202474 MOV X1, X31
	0x03202478 BL 0x3201788
	0x0320247C TBZ X0, 0x0, 0x320256C
	0x03202480 LDR X0, [X25]
	0x03202484 LDR X24, [X22 + 0x40]
	0x03202488 LDR W8, [X0 + 0xE0]
	0x0320248C CBNZ W8, 0x3202494
	0x03202490 BL 0x1C16DFC
	0x03202494 MOV X0, X24
	0x03202498 MOV X1, X31
	0x0320249C BL 0x3201788
	0x032024A0 TBZ X0, 0x0, 0x320256C
	0x032024A4 LDR X0, [X25]
	0x032024A8 LDR X24, [X22 + 0x48]
	0x032024AC LDR W8, [X0 + 0xE0]
	0x032024B0 CBNZ W8, 0x32024B8
	0x032024B4 BL 0x1C16DFC
	0x032024B8 MOV X0, X24
	0x032024BC MOV X1, X31
	0x032024C0 BL 0x3201788
	0x032024C4 TBZ X0, 0x0, 0x320256C
	0x032024C8 LDR X0, [X25]
	0x032024CC LDR X24, [X22 + 0x50]
	0x032024D0 LDR W8, [X0 + 0xE0]
	0x032024D4 CBNZ W8, 0x32024DC
	0x032024D8 BL 0x1C16DFC
	0x032024DC MOV X0, X24
	0x032024E0 MOV X1, X31
	0x032024E4 BL 0x3201788
	0x032024E8 TBZ X0, 0x0, 0x320256C
	0x032024EC LDR X8, [X22]
	0x032024F0 MOV X0, X22
	0x032024F4 LDP X9, X1, [X8 + 0x198]
	0x032024F8 BLR X9
	0x032024FC LDR X1, [X22 + 0x30]
	0x03202500 SBFM W27, W0, 0x4, 0x1F
	0x03202504 MOV W2, W27
	0x03202508 BL 0x320221C
	0x0320250C LDR X1, [X22 + 0x38]
	0x03202510 MOV W2, W27
	0x03202514 MOV X24, X0
	0x03202518 BL 0x320221C
	0x0320251C LDR X1, [X22 + 0x40]
	0x03202520 MOV W2, W27
	0x03202524 MOV X25, X0
	0x03202528 BL 0x320221C
	0x0320252C LDR X1, [X22 + 0x48]
	0x03202530 MOV W2, W27
	0x03202534 MOV X26, X0
	0x03202538 BL 0x320221C
	0x0320253C LDR X1, [X22 + 0x50]
	0x03202540 MOV W2, W27
	0x03202544 MOV X22, X0
	0x03202548 BL 0x320221C
	0x0320254C B 0x3202580
	0x03202550 MOV X24, X31
	0x03202554 MOV X25, X31
	0x03202558 MOV X26, X31
	0x0320255C MOV X22, X31
	0x03202560 MOV X0, X31
	0x03202564 MOV X23, X31
	0x03202568 B 0x3202580
	0x0320256C MOV X24, X31
	0x03202570 MOV X25, X31
	0x03202574 MOV X26, X31
	0x03202578 MOV X22, X31
	0x0320257C MOV X0, X31
	0x03202580 STP X20, X21, [X19]
	0x03202584 STP X24, X25, [X19 + 0x10]
	0x03202588 STP X26, X22, [X19 + 0x20]
	0x0320258C STP X0, X23, [X19 + 0x30]
	0x03202590 LDP X20, X19, [X31 + 0x40]
	0x03202594 LDP X22, X21, [X31 + 0x30]
	0x03202598 LDP X24, X23, [X31 + 0x20]
	0x0320259C LDP X26, X25, [X31 + 0x10]
	0x032025A0 LDP X30, X27, [X31], #0x50
	0x032025A4 RET
	0x032025A8 BL 0x1C16F20
	0x032025AC ADRP X0, 0xF1F000
	0x032025B0 LDR X0, [X0 + 0x578]
	0x032025B4 BL 0x1C16D08
	0x032025B8 MOV X1, X31
	0x032025BC BL 0x31E79DC
	0x032025C0 MOV X19, X0
	0x032025C4 ADRP X0, 0xF1A000
	0x032025C8 LDR X0, [X0 + 0x4B8]
	0x032025CC BL 0x1C16D08
	0x032025D0 BL 0x1C16F10
	0x032025D4 MOV X1, X19
	0x032025D8 MOV X2, X31
	0x032025DC MOV X20, X0
	0x032025E0 BL 0x338C448
	0x032025E4 ADRP X0, 0xF1F000
	0x032025E8 LDR X0, [X0 + 0x5A0]
	0x032025EC BL 0x1C16D08
	0x032025F0 MOV X1, X0
	0x032025F4 MOV X0, X20
	0x032025F8 BL 0x1C16DEC
	0x032025FC ADRP X0, 0xF1E000
	0x03202600 LDR X0, [X0 + 0xCE0]
	0x03202604 BL 0x1C16D08
	0x03202608 BL 0x1C16F10
	0x0320260C MOV X19, X0
	0x03202610 ADRP X0, 0xF1F000
	0x03202614 LDR X0, [X0 + 0x5A8]
	0x03202618 BL 0x1C16D08
	0x0320261C MOV X1, X0
	0x03202620 MOV X0, X19
	0x03202624 MOV X2, X31
	0x03202628 BL 0x3252170
	0x0320262C ADRP X0, 0xF1F000
	0x03202630 LDR X0, [X0 + 0x5A0]
	0x03202634 BL 0x1C16D08
	0x03202638 MOV X1, X0
	0x0320263C MOV X0, X19
	0x03202640 BL 0x1C16DEC
	0x03202644 STP X30, X21, [X31 - 0x20]!
	0x03202648 STP X20, X19, [X31 + 0x10]
	0x0320264C ADRP X20, 0x11DA000
	0x03202650 ADRP X21, 0xF1F000
	0x03202654 LDRB W8, [X20 + 0x24E]
	0x03202658 LDR X21, [X21 + 0x530]
	0x0320265C MOV X19, X0
	0x03202660 TBNZ X8, 0x0, 0x3202684
	0x03202664 ADRP X0, 0xF1F000
	0x03202668 LDR X0, [X0 + 0x530]
	0x0320266C BL 0x1C16CF4
	0x03202670 ADRP X0, 0xEF1000
	0x03202674 LDR X0, [X0 + 0x618]
	0x03202678 BL 0x1C16CF4
	0x0320267C MOVZ W8, 0x1
	0x03202680 STRB W8, [X20 + 0x24E]
	0x03202684 LDR X0, [X21]
	0x03202688 LDR W8, [X0 + 0xE0]
	0x0320268C CBNZ W8, 0x3202694
	0x03202690 BL 0x1C16DFC
	0x03202694 ADRP X20, 0xEF1000
	0x03202698 LDR X20, [X20 + 0x618]
	0x0320269C MOV X0, X19
	0x032026A0 MOV W1, W31
	0x032026A4 BL 0x3205C94
	0x032026A8 TBZ X0, 0x0, 0x32026C0
	0x032026AC LDR X0, [X20]
	0x032026B0 LDP X20, X19, [X31 + 0x10]
	0x032026B4 MOVZ W1, 0x1
	0x032026B8 LDP X30, X21, [X31], #0x20
	0x032026BC B 0x1C16D6C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x11DB000
	008 Move X23, 0xF20000
	009 Move W8, [X20+559]
	010 Move X23, [X23+1328]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF20000
	017 Move X0, [X0+1328]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+559], W8
	021 Move X8, [X19]
	022 Move X0, X19
	023 Move X9, [X8+408]
	024 Move X1, [X8+416]
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Move X8, [X19]
	027 Add W20, W0, 1
	028 Move X0, X19
	029 NotImplemented "Instruction SBFM not yet implemented."
	030 Move X9, [X8+408]
	031 Move X1, [X8+416]
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X8, [X23]
	034 Subtract W20, W0, W20
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Or W0, W31, 0x10001
	041 Call BigInteger.op_Implicit, X0
	042 Move [X19+96], X0
	043 Move X0, [X23]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move W0, W21
	049 Call BigInteger.GeneratePseudoPrime, X0
	050 Or W1, W31, 0x10001
	051 Move [X19+48], X0
	052 Call Kernel.DwordMod, X0, X1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X0, [X23]
	055 Move X22, [X19+56]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X21
	061 Move X1, X22
	062 Call Kernel.Compare, X0, X1
	063 Move TEMP, X0
	064 And TEMP, TEMP, -2147483648
	065 Compare TEMP, -2147483648
	066 JumpIfNotEqual {69}
	067 Move X8, [X19+56]
	068 Move [X19+48], X8
	069 Move X0, [X23]
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Move W0, W20
	075 Call BigInteger.GeneratePseudoPrime, X0
	076 Or W1, W31, 0x10001
	077 Move [X19+56], X0
	078 Call Kernel.DwordMod, X0, X1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X0, [X23]
	081 Move X22, [X19+48]
	082 Move X21, [X19+56]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Move X0, X22
	088 Move X1, X21
	089 Call BigInteger.op_Inequality, X0, X1
	090 Move TEMP, X0
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfNotEqual {69}
	094 Move X0, [X23]
	095 Move X22, [X19+48]
	096 Move X21, [X19+56]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 Move X0, X22
	102 Move X1, X21
	103 Call BigInteger.op_Multiply, X0, X1
	104 Move [X19+88], X0
	105 Compare X0, 0
	106 JumpIfEqual {184}
	107 Call BigInteger.BitCount, X0
	108 Move X8, [X19]
	109 Move W22, W0
	110 Move X0, X19
	111 Move X9, [X8+408]
	112 Move X1, [X8+416]
	113 NotImplemented "Instruction BLR not yet implemented."
	114 Move X21, [X19+48]
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X0, [X23]
	117 Move W8, [X0+224]
	118 Compare W8, 0
	119 JumpIfNotEqual {121}
	120 Call 0x1C17DFC
	121 Move W0, 1
	122 Call BigInteger.op_Implicit, X0
	123 Move X1, X0
	124 Move X0, X21
	125 Call BigInteger.op_Subtraction, X0, X1
	126 Move X21, [X19+56]
	127 Move X20, X0
	128 Move W0, 1
	129 Call BigInteger.op_Implicit, X0
	130 Move X1, X0
	131 Move X0, X21
	132 Call BigInteger.op_Subtraction, X0, X1
	133 Move X21, X0
	134 Move X0, X20
	135 Move X1, X21
	136 Call BigInteger.op_Multiply, X0, X1
	137 Move X8, [X19+96]
	138 Compare X8, 0
	139 JumpIfEqual {184}
	140 Move X1, X0
	141 Move X0, X8
	142 Call Kernel.modInverse, X0, X1
	143 Move X1, X20
	144 Move [X19+40], X0
	145 Call BigInteger.op_Modulus, X0, X1
	146 Move X8, [X19+40]
	147 Move [X19+64], X0
	148 Move X1, X21
	149 Move X0, X8
	150 Call BigInteger.op_Modulus, X0, X1
	151 Move X8, [X19+56]
	152 Move [X19+72], X0
	153 Compare X8, 0
	154 JumpIfEqual {184}
	155 Move X1, [X19+48]
	156 Move X0, X8
	157 Call Kernel.modInverse, X0, X1
	158 Move X8, [X19+104]
	159 Move W9, 1
	160 Move [X19+80], X0
	161 Move [X19+34], W9
	162 Move [X19+32], W9
	163 Compare X8, 0
	164 JumpIfEqual {177}
	165 Move X4, [X8+24]
	166 Move X0, [X8+64]
	167 Move X3, [X8+40]
	168 Move X1, X19
	169 Move X20, [X31+32]
	170 Move X19, [X31+40]
	171 Move X22, [X31+16]
	172 Move X21, [X31+24]
	173 Move X2, X31
	174 Move X30, [X31+48]
	175 Move X23, [X31+56]
	176 CallNoReturn X4
	177 Move X20, [X31+32]
	178 Move X19, [X31+40]
	179 Move X22, [X31+16]
	180 Move X21, [X31+24]
	181 Move X30, [X31+48]
	182 Move X23, [X31+56]
	183 Return 
	184 Call 0x1C17F20

Method: System.Int32 get_KeySize()

Disassembly:
	0x03202CA0 CBNZ W8, 0x3202CA8
	0x03202CA4 BL 0x1C16DFC
	0x03202CA8 MOV X0, X21
	0x03202CAC MOV X1, X31
	0x03202CB0 BL 0x3201788
	0x03202CB4 TBZ X0, 0x0, 0x3202CC8
	0x03202CB8 LDR X0, [X19 + 0x40]
	0x03202CBC CBZ X0, 0x3202DB4
	0x03202CC0 BL 0x32022CC
	0x03202CC4 STR X31, [X19 + 0x40]
	0x03202CC8 LDR X0, [X22]
	0x03202CCC LDR X21, [X19 + 0x48]
	0x03202CD0 LDR W8, [X0 + 0xE0]
	0x03202CD4 CBNZ W8, 0x3202CDC
	0x03202CD8 BL 0x1C16DFC
	0x03202CDC MOV X0, X21
	0x03202CE0 MOV X1, X31
	0x03202CE4 BL 0x3201788
	0x03202CE8 TBZ X0, 0x0, 0x3202CFC
	0x03202CEC LDR X0, [X19 + 0x48]
	0x03202CF0 CBZ X0, 0x3202DB4
	0x03202CF4 BL 0x32022CC
	0x03202CF8 STR X31, [X19 + 0x48]
	0x03202CFC LDR X0, [X22]
	0x03202D00 LDR X21, [X19 + 0x50]
	0x03202D04 LDR W8, [X0 + 0xE0]
	0x03202D08 CBNZ W8, 0x3202D10
	0x03202D0C BL 0x1C16DFC
	0x03202D10 MOV X0, X21
	0x03202D14 MOV X1, X31
	0x03202D18 BL 0x3201788
	0x03202D1C TBZ X0, 0x0, 0x3202D30
	0x03202D20 LDR X0, [X19 + 0x50]
	0x03202D24 CBZ X0, 0x3202DB4
	0x03202D28 BL 0x32022CC
	0x03202D2C STR X31, [X19 + 0x50]
	0x03202D30 TBZ X20, 0x0, 0x3202D9C
	0x03202D34 LDR X0, [X22]
	0x03202D38 LDR X20, [X19 + 0x60]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+35]
	005 Compare W8, 0
	006 JumpIfNotEqual {22}
	007 Move W8, [X0+34]
	008 Compare W8, 0
	009 JumpIfEqual {17}
	010 Move X0, [X0+88]
	011 Compare X0, 0
	012 JumpIfEqual {42}
	013 Call BigInteger.BitCount, X0
	014 And W31, W0, 7
	015 Add W8, W0, 8
	016 And W0, W8, 0xFFFFFFF8
	017 Move W0, [X0+16]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X0, 0xF20000
	023 Move X0, [X0+1400]
	024 Call 0x1C17D08
	025 Move X1, X31
	026 Call Locale.GetText, X0
	027 Move X19, X0
	028 Move X0, 0xF1B000
	029 Move X0, [X0+1208]
	030 Call 0x1C17D08
	031 Call 0x1C17F10
	032 Move X1, X19
	033 Move X2, X31
	034 Move X20, X0
	035 Call ObjectDisposedException..ctor, X0, X1
	036 Move X0, 0xF20000
	037 Move X0, [X0+1408]
	038 Call 0x1C17D08
	039 Move X1, X0
	040 Move X0, X20
	041 Call 0x1C17DEC
	042 Call 0x1C17F20

Method: System.Boolean get_PublicOnly()

Disassembly:
	0x03202D3C LDR W8, [X0 + 0xE0]
	0x03202D40 CBNZ W8, 0x3202D48
	0x03202D44 BL 0x1C16DFC
	0x03202D48 MOV X0, X20
	0x03202D4C MOV X1, X31
	0x03202D50 BL 0x3201788
	0x03202D54 TBZ X0, 0x0, 0x3202D68
	0x03202D58 LDR X0, [X19 + 0x60]
	0x03202D5C CBZ X0, 0x3202DB4
	0x03202D60 BL 0x32022CC
	0x03202D64 STR X31, [X19 + 0x60]
	0x03202D68 LDR X0, [X22]
	0x03202D6C LDR X20, [X19 + 0x58]
	0x03202D70 LDR W8, [X0 + 0xE0]
	0x03202D74 CBNZ W8, 0x3202D7C
	0x03202D78 BL 0x1C16DFC
	0x03202D7C MOV X0, X20
	0x03202D80 MOV X1, X31
	0x03202D84 BL 0x3201788
	0x03202D88 TBZ X0, 0x0, 0x3202D9C
	0x03202D8C LDR X0, [X19 + 0x58]
	0x03202D90 CBZ X0, 0x3202DB4
	0x03202D94 BL 0x32022CC
	0x03202D98 STR X31, [X19 + 0x58]
	0x03202D9C MOVZ W8, 0x1
	0x03202DA0 STRB W8, [X19 + 0x23]
	0x03202DA4 LDP X20, X19, [X31 + 0x20]
	0x03202DA8 LDP X22, X21, [X31 + 0x10]
	0x03202DAC LDR X30, [X31], #0x30
	0x03202DB0 RET
	0x03202DB4 BL 0x1C16F20
	0x03202DB8 SUB X31, X31, 0xA0
	0x03202DBC STP X29, X30, [X31 + 0x40]
	0x03202DC0 STP X28, X27, [X31 + 0x50]
	0x03202DC4 STP X26, X25, [X31 + 0x60]
	0x03202DC8 STP X24, X23, [X31 + 0x70]
	0x03202DCC STP X22, X21, [X31 + 0x80]
	0x03202DD0 STP X20, X19, [X31 + 0x90]
	0x03202DD4 ADRP X20, 0x11DA000
	0x03202DD8 ADRP X21, 0xEF1000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x11DB000
	006 Move W8, [X20+560]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF20000
	013 Move X0, [X0+1328]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+560], W8
	017 Move W8, [X19+34]
	018 Compare W8, 0
	019 JumpIfEqual {36}
	020 Move X21, 0xF20000
	021 Move X21, [X21+1328]
	022 Move X20, [X19+40]
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Call BigInteger.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {42}
	035 Move W0, 1
	036 Move W0, W31
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0
	042 Move X0, [X21]
	043 Move X19, [X19+88]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X19
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X1, X31
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]

Method: System.Byte[] EncryptValue(System.Byte[] rgb)

Disassembly:
	0x03202E8C ADRP X0, 0xF1F000
	0x03202E90 LDR X0, [X0 + 0x628]
	0x03202E94 BL 0x1C16CF4
	0x03202E98 ADRP X0, 0xF1F000
	0x03202E9C LDR X0, [X0 + 0x630]
	0x03202EA0 BL 0x1C16CF4
	0x03202EA4 ADRP X0, 0xF1F000
	0x03202EA8 LDR X0, [X0 + 0x638]
	0x03202EAC BL 0x1C16CF4
	0x03202EB0 ADRP X0, 0xF1F000
	0x03202EB4 LDR X0, [X0 + 0x640]
	0x03202EB8 BL 0x1C16CF4
	0x03202EBC ADRP X0, 0xF1F000
	0x03202EC0 LDR X0, [X0 + 0x648]
	0x03202EC4 BL 0x1C16CF4
	0x03202EC8 ADRP X0, 0xF1F000
	0x03202ECC LDR X0, [X0 + 0x650]
	0x03202ED0 BL 0x1C16CF4
	0x03202ED4 ADRP X0, 0xF1F000
	0x03202ED8 LDR X0, [X0 + 0x658]
	0x03202EDC BL 0x1C16CF4
	0x03202EE0 MOVZ W8, 0x1
	0x03202EE4 STRB W8, [X20 + 0x235]
	0x03202EE8 LDR X0, [X21]
	0x03202EEC BL 0x1C16F10
	0x03202EF0 MOV X1, X31
	0x03202EF4 MOV X25, X0
	0x03202EF8 BL 0x3231AC4
	0x03202EFC LDR X8, [X19]
	0x03202F00 AND W1, W26, 0x1
	0x03202F04 MOV X0, X19
	0x03202F08 LDP X9, X2, [X8 + 0x1E8]
	0x03202F0C ADD X8, X31, 0x0
	0x03202F10 BLR X9
	0x03202F14 LDP X24, X23, [X31 + 0x10]
	0x03202F18 LDP X22, X21, [X31 + 0x20]
	0x03202F1C LDP X20, X19, [X31 + 0x30]
	0x03202F20 CBZ X25, 0x3203278
	0x03202F24 ADRP X8, 0xF1F000
	0x03202F28 LDR X8, [X8 + 0x630]
	0x03202F2C LDP X27, X28, [X31]
	0x03202F30 LDR X1, [X8]
	0x03202F34 MOV X0, X25
	0x03202F38 MOV X2, X31
	0x03202F3C BL 0x32333E0
	0x03202F40 ADRP X8, 0xF1F000
	0x03202F44 LDR X8, [X8 + 0x640]
	0x03202F48 LDR X1, [X8]
	0x03202F4C MOV X0, X25
	0x03202F50 MOV X2, X31
	0x03202F54 BL 0x32333E0
	0x03202F58 ADRP X29, 0xEFA000
	0x03202F5C LDR X29, [X29 + 0x9E8]
	0x03202F60 LDR X0, [X29]
	0x03202F64 LDR W8, [X0 + 0xE0]
	0x03202F68 CBNZ W8, 0x3202F70
	0x03202F6C BL 0x1C16DFC
	0x03202F70 MOV X0, X28
	0x03202F74 MOV X1, X31
	0x03202F78 BL 0x33225A0
	0x03202F7C MOV X1, X0
	0x03202F80 MOV X0, X25
	0x03202F84 MOV X2, X31
	0x03202F88 BL 0x32333E0
	0x03202F8C ADRP X8, 0xF1F000
	0x03202F90 LDR X8, [X8 + 0x650]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11DB000
	006 Move W8, [X21+561]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF20000
	014 Move X0, [X0+1328]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+561], W8
	018 Move W8, [X19+35]
	019 Compare W8, 0
	020 JumpIfNotEqual {62}
	021 Move X21, 0xF20000
	022 Move W8, [X19+34]
	023 Move X21, [X21+1328]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Move X0, X19
	027 Call RSAManaged.GenerateKeyPair, X0
	028 Move X0, [X21]
	029 Call 0x1C17F10
	030 Move X1, X20
	031 Move X21, X0
	032 Call BigInteger..ctor, X0, X1
	033 Compare X21, 0
	034 JumpIfEqual {61}
	035 Move X2, [X19+88]
	036 Move X1, [X19+96]
	037 Move X0, X21
	038 Call BigInteger.ModPow, X0, X1, X2
	039 Move X8, [X19]
	040 Move X20, X0
	041 Move X0, X19
	042 Move X9, [X8+408]
	043 Move X1, [X8+416]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 NotImplemented "Instruction SBFM not yet implemented."
	046 Move X1, X20
	047 Call RSAManaged.GetPaddedValue, X0, X1, X2
	048 Move X19, X0
	049 Move X0, X21
	050 Call BigInteger.Clear, X0
	051 Compare X20, 0
	052 JumpIfEqual {61}
	053 Move X0, X20
	054 Call BigInteger.Clear, X0
	055 Move X0, X19
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 Return X0
	061 Call 0x1C17F20
	062 Move X0, 0xF1B000
	063 Move X0, [X0+1208]
	064 Call 0x1C17D08
	065 Call 0x1C17F10
	066 Move X19, X0
	067 Move X0, 0xF20000
	068 Move X0, [X0+1416]
	069 Call 0x1C17D08
	070 Move X1, X0
	071 Move X0, X19
	072 Move X2, X31
	073 Call ObjectDisposedException..ctor, X0, X1
	074 Move X0, 0xF20000
	075 Move X0, [X0+1424]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X19
	079 Call 0x1C17DEC

Method: System.Security.Cryptography.RSAParameters ExportParameters(System.Boolean includePrivateParameters)

Disassembly:
	0x0320331C B 0x3203320
	0x03203320 MOV X25, X0
	0x03203324 CMP W1, 0x1
	0x03203328 B.NE 0x3203434
	0x0320332C MOV X0, X25
	0x03203330 BL 0x3EB1AD0
	0x03203334 MOV X25, X0
	0x03203338 ADRP X0, 0xEF6000
	0x0320333C LDR X0, [X0 + 0xCC0]
	0x03203340 BL 0x1C16D08
	0x03203344 LDR X8, [X25]
	0x03203348 LDR X1, [X8]
	0x0320334C BL 0x1C17270
	0x03203350 TBZ X0, 0x0, 0x3203390
	0x03203354 LDR X25, [X25]
	0x03203358 BL 0x3EB1AE0
	0x0320335C CBNZ X24, 0x32033B0
	0x03203360 CBNZ X23, 0x32033C8
	0x03203364 CBNZ X22, 0x32033E0
	0x03203368 CBNZ X21, 0x32033F8
	0x0320336C CBNZ X20, 0x3203410
	0x03203370 CBZ X19, 0x3203388
	0x03203374 LDR W2, [X19 + 0x18]
	0x03203378 MOV X0, X19
	0x0320337C MOV W1, W31
	0x03203380 MOV X3, X31
	0x03203384 BL 0x339FA34
	0x03203388 MOV X0, X25
	0x0320338C BL 0x1C16F18
	0x03203390 MOVZ W0, 0x8
	0x03203394 BL 0x3EB1AF0
	0x03203398 LDR X8, [X25]
	0x0320339C STR X8, [X0]
	0x032033A0 ADRP X1, 0xCB1000
	0x032033A4 ADD X1, X1, 0xE58
	0x032033A8 MOV X2, X31
	0x032033AC BL 0x3EB1B00
	0x032033B0 LDR W2, [X24 + 0x18]
	0x032033B4 MOV X0, X24
	0x032033B8 MOV W1, W31
	0x032033BC MOV X3, X31
	0x032033C0 BL 0x339FA34
	0x032033C4 CBZ X23, 0x3203364
	0x032033C8 LDR W2, [X23 + 0x18]
	0x032033CC MOV X0, X23
	0x032033D0 MOV W1, W31
	0x032033D4 MOV X3, X31
	0x032033D8 BL 0x339FA34
	0x032033DC CBZ X22, 0x3203368
	0x032033E0 LDR W2, [X22 + 0x18]
	0x032033E4 MOV X0, X22
	0x032033E8 MOV W1, W31
	0x032033EC MOV X3, X31
	0x032033F0 BL 0x339FA34
	0x032033F4 CBZ X21, 0x320336C
	0x032033F8 LDR W2, [X21 + 0x18]
	0x032033FC MOV X0, X21
	0x03203400 MOV W1, W31
	0x03203404 MOV X3, X31
	0x03203408 BL 0x339FA34
	0x0320340C CBZ X20, 0x3203370
	0x03203410 LDR W2, [X20 + 0x18]
	0x03203414 MOV X0, X20
	0x03203418 MOV W1, W31
	0x0320341C MOV X3, X31
	0x03203420 BL 0x339FA34
	0x03203424 CBNZ X19, 0x3203374
	0x03203428 B 0x3203388
	0x0320342C MOV X25, X0
	0x03203430 BL 0x3EB1AE0
	0x03203434 MOV X0, X25
	0x03203438 BL 0x1D2C690
	0x0320343C BL 0x1990590
	0x03203440 STR X30, [X31 - 0x30]!
	0x03203444 STP X22, X21, [X31 + 0x10]
	0x03203448 STP X20, X19, [X31 + 0x20]
	0x0320344C LDR X8, [X2 + 0x8]
	0x03203450 STP X1, X2, [X0 + 0x20]
	0x03203454 MOV X19, X0
	0x03203458 MOV X20, X2
	0x0320345C STR X8, [X0 + 0x10]
	0x03203460 LDRB W22, [X2 + 0x52]
	0x03203464 STR X0, [X0 + 0x40]
	0x03203468 MOV X0, X2
	0x0320346C MOV X21, X1
	0x03203470 BL 0x1C16D84
	0x03203474 TBZ X0, 0x0, 0x320348C
	0x03203478 CMP W22, 0x2
	0x0320347C B.NE 0x32034C8
	0x03203480 ADRP X8, 0xFFFFFFFFFE9B0000
	0x03203484 ADD X8, X8, 0x638
	0x03203488 B 0x320350C
	0x0320348C CMP W22, 0x1
	0x03203490 B.NE 0x32034C4
	0x03203494 LDRB W8, [X19 + 0x70]
	0x03203498 CBZ W8, 0x32034DC
	0x0320349C MOV X0, X20
	0x032034A0 BL 0x1C16D7C
	0x032034A4 MOV W21, W0
	0x032034A8 MOV X0, X20
	0x032034AC BL 0x1C17238
	0x032034B0 TBZ X21, 0x0, 0x32034E8
	0x032034B4 TBZ X0, 0x0, 0x32034F8
	0x032034B8 ADRP X8, 0xFFFFFFFFFE9B0000
	0x032034BC ADD X8, X8, 0x754
	0x032034C0 B 0x320350C
	0x032034C4 CBZ X21, 0x320352C
	0x032034C8 LDR X8, [X19 + 0x10]
	0x032034CC LDR X9, [X19 + 0x20]
	0x032034D0 STR X8, [X19 + 0x18]
	0x032034D4 STR X9, [X19 + 0x40]
	0x032034D8 B 0x3203510
	0x032034DC ADRP X8, 0xFFFFFFFFFE9B0000
	0x032034E0 ADD X8, X8, 0x614
	0x032034E4 B 0x320350C
	0x032034E8 TBZ X0, 0x0, 0x3203504
	0x032034EC ADRP X8, 0xFFFFFFFFFE9B0000
	0x032034F0 ADD X8, X8, 0x67C
	0x032034F4 B 0x320350C
	0x032034F8 ADRP X8, 0xFFFFFFFFFE9B0000
	0x032034FC ADD X8, X8, 0x708
	0x03203500 B 0x320350C
	0x03203504 ADRP X8, 0xFFFFFFFFFE9B0000
	0x03203508 ADD X8, X8, 0x64C
	0x0320350C STR X8, [X19 + 0x18]
	0x03203510 ADRP X8, 0xFFFFFFFFFE9B0000
	0x03203514 ADD X8, X8, 0x5BC
	0x03203518 STR X8, [X19 + 0x38]
	0x0320351C LDP X20, X19, [X31 + 0x20]
	0x03203520 LDP X22, X21, [X31 + 0x10]
	0x03203524 LDR X30, [X31], #0x30
	0x03203528 RET
	0x0320352C ADRP X1, 0xFFFFFFFFFD918000
	0x03203530 ADD X1, X1, 0xEE3
	0x03203534 MOV X0, X31
	0x03203538 BL 0x1C16F3C
	0x0320353C MOV X1, X31
	0x03203540 BL 0x1C16DEC
	0x03203544 LDR X8, [X0 + 0x40]
	0x03203548 LDR X4, [X0 + 0x18]
	0x0320354C LDR X3, [X0 + 0x28]
	0x03203550 MOV X0, X8
	0x03203554 BR X4
	0x03203558 STP X30, X21, [X31 - 0x20]!
	0x0320355C STP X20, X19, [X31 + 0x10]
	0x03203560 ADRP X21, 0x11D9000
	0x03203564 ADRP X20, 0xEF0000
	0x03203568 LDRB W8, [X21 + 0x237]
	0x0320356C LDR X20, [X20 + 0x618]
	0x03203570 MOV X19, X0
	0x03203574 TBNZ X8, 0x0, 0x320358C
	0x03203578 ADRP X0, 0xEF0000
	0x0320357C LDR X0, [X0 + 0x618]
	0x03203580 BL 0x1C16CF4
	0x03203584 MOVZ W8, 0x1
	0x03203588 STRB W8, [X21 + 0x237]
	0x0320358C MOV X0, X19
	0x03203590 MOV X1, X31
	0x03203594 BL 0x33BDD8C
	0x03203598 LDR X0, [X20]
	0x0320359C MOVZ W1, 0x1000
	0x032035A0 BL 0x1C16D6C
	0x032035A4 STR X0, [X19 + 0x10]
	0x032035A8 LDP X20, X19, [X31 + 0x10]
	0x032035AC LDP X30, X21, [X31], #0x20
	0x032035B0 RET
	0x032035B4 STP X30, X19, [X31 - 0x10]!
	0x032035B8 LDR W8, [X0 + 0x20]
	0x032035BC MOV X19, X0
	0x032035C0 CMP W8, 0x0
	0x032035C4 B.GT 0x32035D0
	0x032035C8 MOV X0, X19
	0x032035CC BL 0x32035DC
	0x032035D0 LDR W0, [X19 + 0x28]
	0x032035D4 LDP X30, X19, [X31], #0x10
	0x032035D8 RET
	0x032035DC STR X30, [X31 - 0x20]!
	0x032035E0 STP X20, X19, [X31 + 0x10]
	0x032035E4 BL 0x32037E8
	0x032035E8 CBNZ W0, 0x32035F8
	0x032035EC LDP X20, X19, [X31 + 0x10]
	0x032035F0 LDR X30, [X31], #0x20
	0x032035F4 RET
	0x032035F8 ADRP X8, 0xEF0000
	0x032035FC LDR X8, [X8 + 0x9D0]
	0x03203600 MOV W20, W0
	0x03203604 MOV X0, X8
	0x03203608 BL 0x1C16D08
	0x0320360C MOVZ W1, 0x1
	0x03203610 BL 0x1C16D6C
	0x03203614 MOV X19, X0
	0x03203618 STR W20, [X31 + 0xC]
	0x0320361C ADRP X0, 0xEF0000
	0x03203620 LDR X0, [X0 + 0x758]
	0x03203624 BL 0x1C16D08
	0x03203628 ADD X1, X31, 0xC
	0x0320362C BL 0x1C16E04
	0x03203630 MOV X20, X0
	0x03203634 MOV X0, X19
	0x03203638 BL 0x19903C0
	0x0320363C MOV X0, X19
	0x03203640 MOV X1, X20

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x11DA000
	012 Move W9, [X20+562]
	013 Move W23, W1
	014 Move X22, X0
	015 Move X19, X8
	016 Move TEMP, X9
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xF1F000
	021 Move X0, [X0+1328]
	022 Call 0x1C17CF4
	023 Move X0, 0xEF1000
	024 Move X0, [X0+1560]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+562], W8
	028 Move W8, [X22+35]
	029 Compare W8, 0
	030 JumpIfNotEqual {215}
	031 Move W8, [X22+34]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X22
	035 Call RSAManaged.GenerateKeyPair, X0
	036 Move X0, [X22+96]
	037 Compare X0, 0
	038 JumpIfEqual {214}
	039 Call BigInteger.GetBytes, X0
	040 Move X8, [X22+88]
	041 Compare X8, 0
	042 JumpIfEqual {214}
	043 Move X20, X0
	044 Move X0, X8
	045 Call BigInteger.GetBytes, X0
	046 Move X21, X0
	047 Move TEMP, X23
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {184}
	051 Move X25, 0xF1F000
	052 Move X25, [X25+1328]
	053 Move X23, [X22+40]
	054 Move X0, [X25]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X23
	060 Move X1, X31
	061 Call BigInteger.op_Equality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfEqual {235}
	066 Move X0, [X22+40]
	067 Compare X0, 0
	068 JumpIfEqual {214}
	069 Call BigInteger.GetBytes, X0
	070 Compare X0, 0
	071 JumpIfEqual {214}
	072 Compare X21, 0
	073 JumpIfEqual {214}
	074 Move W8, [X0+24]
	075 Move W1, [X21+24]
	076 Move X23, X0
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X8, 0xEF1000
	079 Move X8, [X8+1560]
	080 Move X0, [X8]
	081 Call 0x1C17D6C
	082 Compare X0, 0
	083 JumpIfEqual {214}
	084 Move W8, [X0+24]
	085 Move W4, [X23+24]
	086 Move X24, X0
	087 Move X0, X23
	088 Move W1, W31
	089 Subtract W3, W8, W4
	090 Move X2, X24
	091 Move X5, X31
	092 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	093 Move X23, X24
	094 Move X0, [X25]
	095 Move X24, [X22+48]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Move X0, X24
	101 Move X1, X31
	102 Call BigInteger.op_Inequality, X0, X1
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {190}
	107 Move X0, [X25]
	108 Move X24, [X22+56]
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {113}
	112 Call 0x1C17DFC
	113 Move X0, X24
	114 Move X1, X31
	115 Call BigInteger.op_Inequality, X0, X1
	116 Move TEMP, X0
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfNotEqual {190}
	120 Move X0, [X25]
	121 Move X24, [X22+64]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Move X0, X24
	127 Move X1, X31
	128 Call BigInteger.op_Inequality, X0, X1
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfNotEqual {190}
	133 Move X0, [X25]
	134 Move X24, [X22+72]
	135 Move W8, [X0+224]
	136 Compare W8, 0
	137 JumpIfNotEqual {139}
	138 Call 0x1C17DFC
	139 Move X0, X24
	140 Move X1, X31
	141 Call BigInteger.op_Inequality, X0, X1
	142 Move TEMP, X0
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfNotEqual {190}
	146 Move X0, [X25]
	147 Move X24, [X22+80]
	148 Move W8, [X0+224]
	149 Compare W8, 0
	150 JumpIfNotEqual {152}
	151 Call 0x1C17DFC
	152 Move X0, X24
	153 Move X1, X31
	154 Call BigInteger.op_Inequality, X0, X1
	155 Move TEMP, X0
	156 And TEMP, TEMP, 1
	157 Compare TEMP, 1
	158 JumpIfNotEqual {190}
	159 Move X8, [X22]
	160 Move X0, X22
	161 Move X9, [X8+408]
	162 Move X1, [X8+416]
	163 NotImplemented "Instruction BLR not yet implemented."
	164 Move X1, [X22+48]
	165 NotImplemented "Instruction SBFM not yet implemented."
	166 Move W2, W27
	167 Call RSAManaged.GetPaddedValue, X0, X1, X2
	168 Move X1, [X22+56]
	169 Move W2, W27
	170 Move X24, X0
	171 Call RSAManaged.GetPaddedValue, X0, X1, X2
	172 Move X1, [X22+64]
	173 Move W2, W27
	174 Move X25, X0
	175 Call RSAManaged.GetPaddedValue, X0, X1, X2
	176 Move X1, [X22+72]
	177 Move W2, W27
	178 Move X26, X0
	179 Call RSAManaged.GetPaddedValue, X0, X1, X2
	180 Move X1, [X22+80]
	181 Move W2, W27
	182 Move X22, X0
	183 Call RSAManaged.GetPaddedValue, X0, X1, X2
	184 Move X24, X31
	185 Move X25, X31
	186 Move X26, X31
	187 Move X22, X31
	188 Move X0, X31
	189 Move X23, X31
	190 Move X24, X31
	191 Move X25, X31
	192 Move X26, X31
	193 Move X22, X31
	194 Move X0, X31
	195 Move [X19], X20
	196 Move [X19+8], X21
	197 Move [X19+16], X24
	198 Move [X19+24], X25
	199 Move [X19+32], X26
	200 Move [X19+40], X22
	201 Move [X19+48], X0
	202 Move [X19+56], X23
	203 Move X20, [X31+64]
	204 Move X19, [X31+72]
	205 Move X22, [X31+48]
	206 Move X21, [X31+56]
	207 Move X24, [X31+32]
	208 Move X23, [X31+40]
	209 Move X26, [X31+16]
	210 Move X25, [X31+24]
	211 Move X30, [X31+80]
	212 Move X27, [X31+88]
	213 Return X0
	214 Call 0x1C17F20
	215 Move X0, 0xF1F000
	216 Move X0, [X0+1400]
	217 Call 0x1C17D08
	218 Move X1, X31
	219 Call Locale.GetText, X0
	220 Move X19, X0
	221 Move X0, 0xF1A000
	222 Move X0, [X0+1208]
	223 Call 0x1C17D08
	224 Call 0x1C17F10
	225 Move X1, X19
	226 Move X2, X31
	227 Move X20, X0
	228 Call ObjectDisposedException..ctor, X0, X1
	229 Move X0, 0xF1F000
	230 Move X0, [X0+1440]
	231 Call 0x1C17D08
	232 Move X1, X0
	233 Move X0, X20
	234 Call 0x1C17DEC
	235 Move X0, 0xF1E000
	236 Move X0, [X0+3296]
	237 Call 0x1C17D08
	238 Call 0x1C17F10
	239 Move X19, X0
	240 Move X0, 0xF1F000
	241 Move X0, [X0+1448]
	242 Call 0x1C17D08
	243 Move X1, X0
	244 Move X0, X19
	245 Move X2, X31
	246 Call CryptographicException..ctor, X0, X1
	247 Move X0, 0xF1F000
	248 Move X0, [X0+1440]
	249 Call 0x1C17D08
	250 Move X1, X0
	251 Move X0, X19
	252 Call 0x1C17DEC

Method: System.Void ImportParameters(System.Security.Cryptography.RSAParameters parameters)

Disassembly:
	0x03203778 MOV X19, X0
	0x0320377C TBNZ X8, 0x0, 0x3203794
	0x03203780 ADRP X0, 0xEF8000
	0x03203784 LDR X0, [X0 + 0x558]
	0x03203788 BL 0x1C16CF4
	0x0320378C MOVZ W8, 0x1
	0x03203790 STRB W8, [X21 + 0x239]
	0x03203794 ADRP X21, 0xEF8000
	0x03203798 LDR X0, [X19 + 0x18]
	0x0320379C LDR X21, [X21 + 0x558]
	0x032037A0 CBZ X0, 0x32037B8
	0x032037A4 LDR X8, [X0]
	0x032037A8 LDR X9, [X8 + 0x278]
	0x032037AC LDR X1, [X8 + 0x280]
	0x032037B0 BLR X9
	0x032037B4 STR X31, [X19 + 0x18]
	0x032037B8 LDR X0, [X21]
	0x032037BC BL 0x1C16F10
	0x032037C0 MOV X1, X20
	0x032037C4 MOV W2, W31
	0x032037C8 MOV X3, X31
	0x032037CC MOV X21, X0
	0x032037D0 BL 0x32E2530
	0x032037D4 STR X21, [X19 + 0x18]
	0x032037D8 STR W31, [X19 + 0x20]
	0x032037DC LDP X20, X19, [X31 + 0x10]
	0x032037E0 LDP X30, X21, [X31], #0x20
	0x032037E4 RET
	0x032037E8 STR X30, [X31 - 0x20]!
	0x032037EC STP X20, X19, [X31 + 0x10]
	0x032037F0 MOV X19, X0
	0x032037F4 LDR X0, [X0 + 0x18]
	0x032037F8 CBZ X0, 0x32038B4
	0x032037FC LDR X8, [X0]
	0x03203800 MOV X1, X31
	0x03203804 LDR X9, [X8 + 0x208]
	0x03203808 LDR X2, [X8 + 0x210]
	0x0320380C BLR X9
	0x03203810 LDR X1, [X19 + 0x10]
	0x03203814 CBZ X1, 0x3203990
	0x03203818 LDR X0, [X19 + 0x18]
	0x0320381C CBZ X0, 0x3203990
	0x03203820 LDR X8, [X0]
	0x03203824 LDR W3, [X1 + 0x18]
	0x03203828 MOV W2, W31
	0x0320382C LDR X9, [X8 + 0x358]
	0x03203830 LDR X4, [X8 + 0x360]
	0x03203834 BLR X9
	0x03203838 MOVZ W8, 0x1
	0x0320383C CMP W0, 0x40
	0x03203840 STP W8, W0, [X19 + 0x20]
	0x03203844 B.LT 0x32038BC
	0x03203848 LDR X0, [X19 + 0x10]
	0x0320384C MOV W1, W31
	0x03203850 MOV X2, X31
	0x03203854 BL 0x31E9B10
	0x03203858 MOVZ W8, 0x5A4D
	0x0320385C CMP W8, W0, UXTH
	0x03203860 B.NE 0x32038C4
	0x03203864 LDR X0, [X19 + 0x10]
	0x03203868 MOVZ W1, 0x3C
	0x0320386C MOV X2, X31
	0x03203870 BL 0x31E9AEC
	0x03203874 LDR X8, [X19 + 0x10]
	0x03203878 STR W0, [X19 + 0x28]
	0x0320387C CBZ X8, 0x3203990
	0x03203880 LDR W8, [X8 + 0x18]
	0x03203884 MOV W20, W0
	0x03203888 CMP W0, W8
	0x0320388C B.GT 0x3203994
	0x03203890 LDR X0, [X19 + 0x18]
	0x03203894 CBZ X0, 0x3203990
	0x03203898 LDR X8, [X0]
	0x0320389C LDP X9, X1, [X8 + 0x1E8]
	0x032038A0 BLR X9
	0x032038A4 CMP X0, W20, SXTW
	0x032038A8 B.GE 0x32038D4
	0x032038AC MOVZ W0, 0x4
	0x032038B0 B 0x32038C8
	0x032038B4 MOVZ W0, 0x1
	0x032038B8 B 0x32038C8
	0x032038BC MOVZ W0, 0x2
	0x032038C0 B 0x32038C8
	0x032038C4 MOVZ W0, 0x3
	0x032038C8 LDP X20, X19, [X31 + 0x10]
	0x032038CC LDR X30, [X31], #0x20
	0x032038D0 RET
	0x032038D4 LDR X0, [X19 + 0x10]
	0x032038D8 LDR W1, [X19 + 0x28]
	0x032038DC MOV X2, X31
	0x032038E0 BL 0x31E9B34
	0x032038E4 MOVZ W8, 0x4550
	0x032038E8 CMP W0, W8
	0x032038EC B.NE 0x3203988
	0x032038F0 LDR W8, [X19 + 0x28]
	0x032038F4 LDR X0, [X19 + 0x10]
	0x032038F8 MOV X2, X31
	0x032038FC ADD W1, W8, 0x18
	0x03203900 BL 0x31E9B10
	0x03203904 LDR W9, [X19 + 0x28]
	0x03203908 AND W8, W0, 0xFFFF
	0x0320390C LDR X0, [X19 + 0x10]
	0x03203910 MOVZ W10, 0x98
	0x03203914 MOVZ W11, 0xA8
	0x03203918 CMP W8, 0x20B
	0x0320391C CSEL W10, W11, W10, EQ
	0x03203920 MOVZ W12, 0x9C
	0x03203924 MOVZ W13, 0xAC
	0x03203928 CSET W8, EQ
	0x0320392C ADD W1, W9, W10
	0x03203930 MOV X2, X31
	0x03203934 STRB W8, [X19 + 0x38]
	0x03203938 CSEL W20, W13, W12, EQ
	0x0320393C BL 0x31E9AEC
	0x03203940 LDR W9, [X19 + 0x28]
	0x03203944 LDR X8, [X19 + 0x10]
	0x03203948 STR W0, [X19 + 0x2C]
	0x0320394C MOV X2, X31
	0x03203950 ADD W1, W9, W20
	0x03203954 MOV X0, X8
	0x03203958 BL 0x31E9AEC
	0x0320395C LDR W9, [X19 + 0x28]
	0x03203960 LDR X8, [X19 + 0x10]
	0x03203964 STR W0, [X19 + 0x30]
	0x03203968 MOV X2, X31
	0x0320396C ADD W1, W9, 0xC
	0x03203970 MOV X0, X8
	0x03203974 BL 0x31E9AEC
	0x03203978 MOV W8, W0
	0x0320397C MOV W0, W31
	0x03203980 STR W8, [X19 + 0x34]
	0x03203984 B 0x32038C8
	0x03203988 MOVZ W0, 0x5
	0x0320398C B 0x32038C8
	0x03203990 BL 0x1C16F20
	0x03203994 ADRP X0, 0xF1E000
	0x03203998 LDR X0, [X0 + 0x678]
	0x0320399C BL 0x1C16D08
	0x032039A0 MOV X1, X31
	0x032039A4 BL 0x31E79DC
	0x032039A8 LDR X19, [X19 + 0x10]
	0x032039AC MOV X20, X0
	0x032039B0 MOV X0, X19
	0x032039B4 BL 0x19903C0
	0x032039B8 LDR X8, [X19 + 0x18]
	0x032039BC ADRP X0, 0xEF0000
	0x032039C0 STR W8, [X31 + 0xC]
	0x032039C4 LDR X0, [X0 + 0x758]
	0x032039C8 BL 0x1C16D08
	0x032039CC ADD X1, X31, 0xC
	0x032039D0 BL 0x1C16E04
	0x032039D4 MOV X1, X0
	0x032039D8 MOV X0, X20
	0x032039DC MOV X2, X31
	0x032039E0 BL 0x321EFD0
	0x032039E4 MOV X19, X0
	0x032039E8 ADRP X0, 0xEF0000
	0x032039EC LDR X0, [X0 + 0xB40]
	0x032039F0 BL 0x1C16D08
	0x032039F4 BL 0x1C16F10
	0x032039F8 MOV X1, X19
	0x032039FC MOV X2, X31
	0x03203A00 MOV X20, X0
	0x03203A04 BL 0x3379A44
	0x03203A08 ADRP X0, 0xF1E000
	0x03203A0C LDR X0, [X0 + 0x680]
	0x03203A10 BL 0x1C16D08
	0x03203A14 MOV X1, X0
	0x03203A18 MOV X0, X20
	0x03203A1C BL 0x1C16DEC
	0x03203A20 STR X30, [X31 - 0x20]!
	0x03203A24 STP X20, X19, [X31 + 0x10]
	0x03203A28 ADRP X20, 0x11D9000
	0x03203A2C LDRB W8, [X20 + 0x23A]
	0x03203A30 MOV X19, X0
	0x03203A34 TBNZ X8, 0x0, 0x3203A4C
	0x03203A38 ADRP X0, 0xEF0000
	0x03203A3C LDR X0, [X0 + 0x618]
	0x03203A40 BL 0x1C16CF4
	0x03203A44 MOVZ W8, 0x1
	0x03203A48 STRB W8, [X20 + 0x23A]
	0x03203A4C LDR W8, [X19 + 0x20]
	0x03203A50 CMP W8, 0x0
	0x03203A54 B.GT 0x3203A60
	0x03203A58 MOV X0, X19
	0x03203A5C BL 0x32035DC
	0x03203A60 LDR W8, [X19 + 0x30]
	0x03203A64 CMP W8, 0x9
	0x03203A68 B.LT 0x3203AD8
	0x03203A6C ADRP X9, 0xEF0000
	0x03203A70 LDR X9, [X9 + 0x618]
	0x03203A74 SUB W1, W8, 0x8
	0x03203A78 LDR X0, [X9]
	0x03203A7C BL 0x1C16D6C
	0x03203A80 LDR X8, [X19 + 0x18]
	0x03203A84 CBZ X8, 0x3203AEC
	0x03203A88 LDR X9, [X8]
	0x03203A8C LDR W10, [X19 + 0x2C]
	0x03203A90 MOV X20, X0
	0x03203A94 MOV X0, X8
	0x03203A98 LDR X11, [X9 + 0x208]
	0x03203A9C LDR X2, [X9 + 0x210]
	0x03203AA0 ADD W9, W10, 0x8
	0x03203AA4 SXTW X1, W9
	0x03203AA8 BLR X11
	0x03203AAC CBZ X20, 0x3203AEC
	0x03203AB0 LDR X0, [X19 + 0x18]
	0x03203AB4 CBZ X0, 0x3203AEC
	0x03203AB8 LDR X8, [X0]
	0x03203ABC LDR W3, [X20 + 0x18]
	0x03203AC0 MOV X1, X20
	0x03203AC4 MOV W2, W31
	0x03203AC8 LDR X9, [X8 + 0x358]
	0x03203ACC LDR X4, [X8 + 0x360]
	0x03203AD0 BLR X9
	0x03203AD4 B 0x3203ADC
	0x03203AD8 MOV X20, X31
	0x03203ADC MOV X0, X20
	0x03203AE0 LDP X20, X19, [X31 + 0x10]
	0x03203AE4 LDR X30, [X31], #0x20
	0x03203AE8 RET
	0x03203AEC BL 0x1C16F20
	0x03203AF0 STR X30, [X31 - 0x40]!
	0x03203AF4 STP X24, X23, [X31 + 0x10]
	0x03203AF8 STP X22, X21, [X31 + 0x20]
	0x03203AFC STP X20, X19, [X31 + 0x30]
	0x03203B00 ADRP X21, 0x11D9000
	0x03203B04 LDRB W8, [X21 + 0x23B]
	0x03203B08 MOV X19, X1
	0x03203B0C MOV X20, X0
	0x03203B10 TBNZ X8, 0x0, 0x3203B28
	0x03203B14 ADRP X0, 0xEF0000
	0x03203B18 LDR X0, [X0 + 0x618]
	0x03203B1C BL 0x1C16CF4
	0x03203B20 MOVZ W8, 0x1
	0x03203B24 STRB W8, [X21 + 0x23B]
	0x03203B28 LDR W8, [X20 + 0x20]
	0x03203B2C CMP W8, 0x0
	0x03203B30 B.GT 0x3203B3C
	0x03203B34 MOV X0, X20
	0x03203B38 BL 0x32035DC
	0x03203B3C LDR X0, [X20 + 0x18]
	0x03203B40 CBZ X0, 0x3203F70
	0x03203B44 LDR X8, [X0]
	0x03203B48 LDRSW X1, [X20 + 0x24]
	0x03203B4C LDR X9, [X8 + 0x208]
	0x03203B50 LDR X2, [X8 + 0x210]
	0x03203B54 BLR X9
	0x03203B58 LDR W8, [X20 + 0x2C]
	0x03203B5C CMP W8, 0x1
	0x03203B60 B.GE 0x3203D34
	0x03203B64 LDR W8, [X20 + 0x34]
	0x03203B68 CMP W8, 0x1
	0x03203B6C B.LT 0x3203D60
	0x03203B70 LDR W8, [X20 + 0x20]
	0x03203B74 LDR X21, [X20 + 0x10]
	0x03203B78 CMP W8, 0x0
	0x03203B7C B.GT 0x3203B88
	0x03203B80 MOV X0, X20
	0x03203B84 BL 0x32035DC
	0x03203B88 CBZ X21, 0x3203F70
	0x03203B8C LDR W8, [X20 + 0x28]
	0x03203B90 LDR W9, [X21 + 0x18]
	0x03203B94 ADD W8, W8, 0xC
	0x03203B98 CMP W8, W9
	0x03203B9C B.CS 0x3203F74
	0x03203BA0 ADD X8, X21, W8, SXTW
	0x03203BA4 STRB W31, [X8 + 0x20]
	0x03203BA8 LDR W8, [X20 + 0x20]
	0x03203BAC LDR X21, [X20 + 0x10]
	0x03203BB0 CMP W8, 0x0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x11DA000
	009 Move W8, [X21+563]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF1F000
	017 Move X0, [X0+1328]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+563], W8
	021 Move W8, [X19+35]
	022 Compare W8, 0
	023 JumpIfNotEqual {291}
	024 Move X21, [X20]
	025 Compare X21, 0
	026 JumpIfEqual {305}
	027 Move X8, [X20+8]
	028 Compare X8, 0
	029 JumpIfEqual {307}
	030 Move X24, 0xF1F000
	031 Move X24, [X24+1328]
	032 Move X0, [X24]
	033 Call 0x1C17F10
	034 Move X1, X21
	035 Move X22, X0
	036 Call BigInteger..ctor, X0, X1
	037 Move [X19+96], X22
	038 Move X0, [X24]
	039 Move X21, [X20+8]
	040 Call 0x1C17F10
	041 Move X1, X21
	042 Move X22, X0
	043 Call BigInteger..ctor, X0, X1
	044 NotImplemented "Instruction MOVI not yet implemented."
	045 Move X23, X19
	046 Move [X23+40], V0
	047 Move [X23+48], X22
	048 Move [X23+16], V0
	049 Move [X23+24], V0
	050 Move X21, [X20+56]
	051 Compare X21, 0
	052 JumpIfEqual {59}
	053 Move X0, [X24]
	054 Call 0x1C17F10
	055 Move X1, X21
	056 Move X22, X0
	057 Call BigInteger..ctor, X0, X1
	058 Move [X23], X22
	059 Move X21, [X20+32]
	060 Compare X21, 0
	061 JumpIfEqual {68}
	062 Move X0, [X24]
	063 Call 0x1C17F10
	064 Move X1, X21
	065 Move X22, X0
	066 Call BigInteger..ctor, X0, X1
	067 Move [X19+64], X22
	068 Move X21, [X20+40]
	069 Compare X21, 0
	070 JumpIfEqual {77}
	071 Move X0, [X24]
	072 Call 0x1C17F10
	073 Move X1, X21
	074 Move X22, X0
	075 Call BigInteger..ctor, X0, X1
	076 Move [X19+72], X22
	077 Move X21, [X20+48]
	078 Compare X21, 0
	079 JumpIfEqual {86}
	080 Move X0, [X24]
	081 Call 0x1C17F10
	082 Move X1, X21
	083 Move X22, X0
	084 Call BigInteger..ctor, X0, X1
	085 Move [X19+80], X22
	086 Move X21, [X20+16]
	087 Compare X21, 0
	088 JumpIfEqual {95}
	089 Move X0, [X24]
	090 Call 0x1C17F10
	091 Move X1, X21
	092 Move X22, X0
	093 Call BigInteger..ctor, X0, X1
	094 Move [X19+48], X22
	095 Move X20, [X20+24]
	096 Compare X20, 0
	097 JumpIfEqual {104}
	098 Move X0, [X24]
	099 Call 0x1C17F10
	100 Move X1, X20
	101 Move X21, X0
	102 Call BigInteger..ctor, X0, X1
	103 Move [X19+56], X21
	104 Move W8, 1
	105 Move [X19+34], W8
	106 Move X0, [X24]
	107 Move X20, [X19+48]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move X0, X20
	113 Move X1, X31
	114 Call BigInteger.op_Inequality, X0, X1
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {168}
	119 Move X0, [X24]
	120 Move X20, [X19+56]
	121 Move W8, [X0+224]
	122 Compare W8, 0
	123 JumpIfNotEqual {125}
	124 Call 0x1C17DFC
	125 Move X0, X20
	126 Move X1, X31
	127 Call BigInteger.op_Inequality, X0, X1
	128 Move TEMP, X0
	129 And TEMP, TEMP, 1
	130 Compare TEMP, 1
	131 JumpIfNotEqual {168}
	132 Move X0, [X24]
	133 Move X20, [X19+64]
	134 Move W8, [X0+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {138}
	137 Call 0x1C17DFC
	138 Move X0, X20
	139 Move X1, X31
	140 Call BigInteger.op_Inequality, X0, X1
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfNotEqual {168}
	145 Move X0, [X24]
	146 Move X20, [X19+72]
	147 Move W8, [X0+224]
	148 Compare W8, 0
	149 JumpIfNotEqual {151}
	150 Call 0x1C17DFC
	151 Move X0, X20
	152 Move X1, X31
	153 Call BigInteger.op_Inequality, X0, X1
	154 Move TEMP, X0
	155 And TEMP, TEMP, 1
	156 Compare TEMP, 1
	157 JumpIfNotEqual {177}
	158 Move X0, [X24]
	159 Move X20, [X19+80]
	160 Move W8, [X0+224]
	161 Compare W8, 0
	162 JumpIfNotEqual {164}
	163 Call 0x1C17DFC
	164 Move X0, X20
	165 Move X1, X31
	166 Call BigInteger.op_Inequality, X0, X1
	167 And W8, W0, 1
	168 Move [X19+32], W31
	169 Move X20, [X31+48]
	170 Move X19, [X31+56]
	171 Move X22, [X31+32]
	172 Move X21, [X31+40]
	173 Move X24, [X31+16]
	174 Move X23, [X31+24]
	175 Move X30, [X31+64]
	176 Return 
	177 Move W8, W31
	178 Move [X19+32], W8
	179 Move X0, [X24]
	180 Move X20, [X19+88]
	181 Move X22, [X19+48]
	182 Move X21, [X19+56]
	183 Move W8, [X0+224]
	184 Compare W8, 0
	185 JumpIfNotEqual {187}
	186 Call 0x1C17DFC
	187 Move X0, X22
	188 Move X1, X21
	189 Call BigInteger.op_Multiply, X0, X1
	190 Move X1, X0
	191 Move X0, X20
	192 Call BigInteger.op_Equality, X0, X1
	193 Move TEMP, X0
	194 And TEMP, TEMP, 1
	195 Compare TEMP, 1
	196 JumpIfNotEqual {289}
	197 Move X0, [X24]
	198 Move X20, [X19+48]
	199 Move W8, [X0+224]
	200 Compare W8, 0
	201 JumpIfNotEqual {203}
	202 Call 0x1C17DFC
	203 Move W0, 1
	204 Call BigInteger.op_Implicit, X0
	205 Move X1, X0
	206 Move X0, X20
	207 Call BigInteger.op_Subtraction, X0, X1
	208 Move X20, [X19+56]
	209 Move X21, X0
	210 Move W0, 1
	211 Call BigInteger.op_Implicit, X0
	212 Move X1, X0
	213 Move X0, X20
	214 Call BigInteger.op_Subtraction, X0, X1
	215 Move X20, X0
	216 Move X0, X21
	217 Move X1, X20
	218 Call BigInteger.op_Multiply, X0, X1
	219 Move X8, [X19+96]
	220 Compare X8, 0
	221 JumpIfEqual {327}
	222 Move X1, X0
	223 Move X0, X8
	224 Call Kernel.modInverse, X0, X1
	225 Move X8, [X23]
	226 Move X22, X0
	227 Move X1, X22
	228 Move X0, X8
	229 Call BigInteger.op_Equality, X0, X1
	230 Move TEMP, X0
	231 And TEMP, TEMP, 1
	232 Compare TEMP, 1
	233 JumpIfEqual {169}
	234 Move W8, [X19+32]
	235 Compare W8, 0
	236 JumpIfEqual {289}
	237 Move X0, [X24]
	238 Move X23, [X19+64]
	239 Move W8, [X0+224]
	240 Compare W8, 0
	241 JumpIfNotEqual {243}
	242 Call 0x1C17DFC
	243 Move X0, X22
	244 Move X1, X21
	245 Call BigInteger.op_Modulus, X0, X1
	246 Move X1, X0
	247 Move X0, X23
	248 Call BigInteger.op_Equality, X0, X1
	249 Move TEMP, X0
	250 And TEMP, TEMP, 1
	251 Compare TEMP, 1
	252 JumpIfNotEqual {289}
	253 Move X0, [X24]
	254 Move X21, [X19+72]
	255 Move W8, [X0+224]
	256 Compare W8, 0
	257 JumpIfNotEqual {259}
	258 Call 0x1C17DFC
	259 Move X0, X22
	260 Move X1, X20
	261 Call BigInteger.op_Modulus, X0, X1
	262 Move X1, X0
	263 Move X0, X21
	264 Call BigInteger.op_Equality, X0, X1
	265 Move TEMP, X0
	266 And TEMP, TEMP, 1
	267 Compare TEMP, 1
	268 JumpIfNotEqual {289}
	269 Move X0, [X19+56]
	270 Compare X0, 0
	271 JumpIfEqual {327}
	272 Move X1, [X19+48]
	273 Move X20, [X19+80]
	274 Call Kernel.modInverse, X0, X1
	275 Move X8, [X24]
	276 Move X19, X0
	277 Move W9, [X8+224]
	278 Compare W9, 0
	279 JumpIfNotEqual {282}
	280 Move X0, X8
	281 Call 0x1C17DFC
	282 Move X0, X20
	283 Move X1, X19
	284 Call BigInteger.op_Equality, X0, X1
	285 Move TEMP, X0
	286 And TEMP, TEMP, 1
	287 Compare TEMP, 1
	288 JumpIfEqual {169}
	289 Move X0, 0xF1F000
	290 Move X0, [X0+1456]
	291 Move X0, 0xF1F000
	292 Move X0, [X0+1400]
	293 Call 0x1C17D08
	294 Move X1, X31
	295 Call Locale.GetText, X0
	296 Move X19, X0
	297 Move X0, 0xF1A000
	298 Move X0, [X0+1208]
	299 Call 0x1C17D08
	300 Call 0x1C17F10
	301 Move X1, X19
	302 Move X2, X31
	303 Move X20, X0
	304 Call ObjectDisposedException..ctor, X0, X1
	305 Move X0, 0xF1F000
	306 Move X0, [X0+1464]
	307 Move X0, 0xF1F000
	308 Move X0, [X0+1472]
	309 Call 0x1C17D08
	310 Move X1, X31
	311 Call Locale.GetText, X0
	312 Move X19, X0
	313 Move X0, 0xF1E000
	314 Move X0, [X0+3296]
	315 Call 0x1C17D08
	316 Call 0x1C17F10
	317 Move X1, X19
	318 Move X2, X31
	319 Move X20, X0
	320 Call CryptographicException..ctor, X0, X1
	321 Move X0, 0xF1F000
	322 Move X0, [X0+1480]
	323 Call 0x1C17D08
	324 Move X1, X0
	325 Move X0, X20
	326 Call 0x1C17DEC
	327 Call 0x1C17F20

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x03203BB4 B.GT 0x3203BC0
	0x03203BB8 MOV X0, X20
	0x03203BBC BL 0x32035DC
	0x03203BC0 CBZ X21, 0x3203F70
	0x03203BC4 LDR W8, [X20 + 0x28]
	0x03203BC8 LDR W9, [X21 + 0x18]
	0x03203BCC ADD W8, W8, 0xD
	0x03203BD0 CMP W8, W9
	0x03203BD4 B.CS 0x3203F74
	0x03203BD8 ADD X8, X21, W8, SXTW
	0x03203BDC STRB W31, [X8 + 0x20]
	0x03203BE0 LDR W8, [X20 + 0x20]
	0x03203BE4 LDR X21, [X20 + 0x10]
	0x03203BE8 CMP W8, 0x0
	0x03203BEC B.GT 0x3203BF8
	0x03203BF0 MOV X0, X20
	0x03203BF4 BL 0x32035DC
	0x03203BF8 CBZ X21, 0x3203F70
	0x03203BFC LDR W8, [X20 + 0x28]
	0x03203C00 LDR W9, [X21 + 0x18]
	0x03203C04 ADD W8, W8, 0xE
	0x03203C08 CMP W8, W9
	0x03203C0C B.CS 0x3203F74
	0x03203C10 ADD X8, X21, W8, SXTW
	0x03203C14 STRB W31, [X8 + 0x20]
	0x03203C18 LDR W8, [X20 + 0x20]
	0x03203C1C LDR X21, [X20 + 0x10]
	0x03203C20 CMP W8, 0x0
	0x03203C24 B.GT 0x3203C30
	0x03203C28 MOV X0, X20
	0x03203C2C BL 0x32035DC
	0x03203C30 CBZ X21, 0x3203F70
	0x03203C34 LDR W8, [X20 + 0x28]
	0x03203C38 LDR W9, [X21 + 0x18]
	0x03203C3C ADD W8, W8, 0xF
	0x03203C40 CMP W8, W9
	0x03203C44 B.CS 0x3203F74
	0x03203C48 ADD X8, X21, W8, SXTW
	0x03203C4C STRB W31, [X8 + 0x20]
	0x03203C50 LDR W8, [X20 + 0x20]
	0x03203C54 LDR X21, [X20 + 0x10]
	0x03203C58 CMP W8, 0x0
	0x03203C5C B.GT 0x3203C68
	0x03203C60 MOV X0, X20
	0x03203C64 BL 0x32035DC
	0x03203C68 CBZ X21, 0x3203F70
	0x03203C6C LDR W8, [X20 + 0x28]
	0x03203C70 LDR W9, [X21 + 0x18]
	0x03203C74 ADD W8, W8, 0x10
	0x03203C78 CMP W8, W9
	0x03203C7C B.CS 0x3203F74
	0x03203C80 ADD X8, X21, W8, SXTW
	0x03203C84 STRB W31, [X8 + 0x20]
	0x03203C88 LDR W8, [X20 + 0x20]
	0x03203C8C LDR X21, [X20 + 0x10]
	0x03203C90 CMP W8, 0x0
	0x03203C94 B.GT 0x3203CA0
	0x03203C98 MOV X0, X20
	0x03203C9C BL 0x32035DC
	0x03203CA0 CBZ X21, 0x3203F70
	0x03203CA4 LDR W8, [X20 + 0x28]
	0x03203CA8 LDR W9, [X21 + 0x18]
	0x03203CAC ADD W8, W8, 0x11
	0x03203CB0 CMP W8, W9
	0x03203CB4 B.CS 0x3203F74
	0x03203CB8 ADD X8, X21, W8, SXTW
	0x03203CBC STRB W31, [X8 + 0x20]
	0x03203CC0 LDR W8, [X20 + 0x20]
	0x03203CC4 LDR X21, [X20 + 0x10]
	0x03203CC8 CMP W8, 0x0
	0x03203CCC B.GT 0x3203CD8
	0x03203CD0 MOV X0, X20
	0x03203CD4 BL 0x32035DC
	0x03203CD8 CBZ X21, 0x3203F70
	0x03203CDC LDR W8, [X20 + 0x28]
	0x03203CE0 LDR W9, [X21 + 0x18]
	0x03203CE4 ADD W8, W8, 0x12
	0x03203CE8 CMP W8, W9
	0x03203CEC B.CS 0x3203F74
	0x03203CF0 ADD X8, X21, W8, SXTW
	0x03203CF4 STRB W31, [X8 + 0x20]
	0x03203CF8 LDR W8, [X20 + 0x20]
	0x03203CFC LDR X21, [X20 + 0x10]
	0x03203D00 CMP W8, 0x0
	0x03203D04 B.GT 0x3203D10
	0x03203D08 MOV X0, X20
	0x03203D0C BL 0x32035DC
	0x03203D10 CBZ X21, 0x3203F70
	0x03203D14 LDR W8, [X20 + 0x28]
	0x03203D18 LDR W9, [X21 + 0x18]
	0x03203D1C ADD W8, W8, 0x13
	0x03203D20 CMP W8, W9
	0x03203D24 B.CS 0x3203F74
	0x03203D28 ADD X8, X21, W8, SXTW
	0x03203D2C STRB W31, [X8 + 0x20]
	0x03203D30 LDR W8, [X20 + 0x34]
	0x03203D34 LDR W9, [X20 + 0x24]
	0x03203D38 MOV W21, W31
	0x03203D3C SUBS W9, W8, W9
	0x03203D40 B.GE 0x3203D54
	0x03203D44 MOV X22, X31
	0x03203D48 STR W8, [X20 + 0x24]
	0x03203D4C CBNZ X19, 0x3203DA8
	0x03203D50 B 0x3203F70
	0x03203D54 SXTW X22, W9
	0x03203D58 CBNZ X19, 0x3203DA8
	0x03203D5C B 0x3203F70
	0x03203D60 LDR X0, [X20 + 0x18]
	0x03203D64 CBZ X0, 0x3203F70
	0x03203D68 LDR X8, [X0]
	0x03203D6C LDP X9, X1, [X8 + 0x1E8]
	0x03203D70 BLR X9
	0x03203D74 LDR X8, [X20 + 0x18]
	0x03203D78 CBZ X8, 0x3203F70
	0x03203D7C LDR X9, [X8]
	0x03203D80 ANDS W10, W0, 0x7
	0x03203D84 MOV X0, X8
	0x03203D88 LDP X11, X1, [X9 + 0x1E8]
	0x03203D8C MOVZ W9, 0x8
	0x03203D90 SUB W9, W9, W10
	0x03203D94 CSEL W21, W31, W9, EQ
	0x03203D98 BLR X11
	0x03203D9C LDRSW X8, [X20 + 0x24]
	0x03203DA0 SUB X22, X0, X8
	0x03203DA4 CBZ X19, 0x3203F70
	0x03203DA8 LDR W23, [X20 + 0x28]
	0x03203DAC LDR X1, [X20 + 0x10]
	0x03203DB0 MOV X0, X19
	0x03203DB4 MOV W2, W31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11DA000
	007 Move W8, [X21+564]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF1F000
	015 Move X0, [X0+1328]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+564], W8
	019 Move W8, [X19+35]
	020 Compare W8, 0
	021 JumpIfNotEqual {172}
	022 Move X22, 0xF1F000
	023 Move X22, [X22+1328]
	024 Move X21, [X19+40]
	025 Move X0, [X22]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 Move X1, X31
	032 Call BigInteger.op_Inequality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {42}
	037 Move X0, [X19+40]
	038 Compare X0, 0
	039 JumpIfEqual {180}
	040 Call BigInteger.Clear, X0
	041 Move [X19+40], X31
	042 Move X0, [X22]
	043 Move X21, [X19+48]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X21
	049 Move X1, X31
	050 Call BigInteger.op_Inequality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {60}
	055 Move X0, [X19+48]
	056 Compare X0, 0
	057 JumpIfEqual {180}
	058 Call BigInteger.Clear, X0
	059 Move [X19+48], X31
	060 Move X0, [X22]
	061 Move X21, [X19+56]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X21
	067 Move X1, X31
	068 Call BigInteger.op_Inequality, X0, X1
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {78}
	073 Move X0, [X19+56]
	074 Compare X0, 0
	075 JumpIfEqual {180}
	076 Call BigInteger.Clear, X0
	077 Move [X19+56], X31
	078 Move X0, [X22]
	079 Move X21, [X19+64]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {84}
	083 Call 0x1C17DFC
	084 Move X0, X21
	085 Move X1, X31
	086 Call BigInteger.op_Inequality, X0, X1
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {96}
	091 Move X0, [X19+64]
	092 Compare X0, 0
	093 JumpIfEqual {180}
	094 Call BigInteger.Clear, X0
	095 Move [X19+64], X31
	096 Move X0, [X22]
	097 Move X21, [X19+72]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move X0, X21
	103 Move X1, X31
	104 Call BigInteger.op_Inequality, X0, X1
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {114}
	109 Move X0, [X19+72]
	110 Compare X0, 0
	111 JumpIfEqual {180}
	112 Call BigInteger.Clear, X0
	113 Move [X19+72], X31
	114 Move X0, [X22]
	115 Move X21, [X19+80]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Move X0, X21
	121 Move X1, X31
	122 Call BigInteger.op_Inequality, X0, X1
	123 Move TEMP, X0
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfNotEqual {132}
	127 Move X0, [X19+80]
	128 Compare X0, 0
	129 JumpIfEqual {180}
	130 Call BigInteger.Clear, X0
	131 Move [X19+80], X31
	132 Move TEMP, X20
	133 And TEMP, TEMP, 1
	134 Compare TEMP, 1
	135 JumpIfNotEqual {172}
	136 Move X0, [X22]
	137 Move X20, [X19+96]
	138 Move W8, [X0+224]
	139 Compare W8, 0
	140 JumpIfNotEqual {142}
	141 Call 0x1C17DFC
	142 Move X0, X20
	143 Move X1, X31
	144 Call BigInteger.op_Inequality, X0, X1
	145 Move TEMP, X0
	146 And TEMP, TEMP, 1
	147 Compare TEMP, 1
	148 JumpIfNotEqual {154}
	149 Move X0, [X19+96]
	150 Compare X0, 0
	151 JumpIfEqual {180}
	152 Call BigInteger.Clear, X0
	153 Move [X19+96], X31
	154 Move X0, [X22]
	155 Move X20, [X19+88]
	156 Move W8, [X0+224]
	157 Compare W8, 0
	158 JumpIfNotEqual {160}
	159 Call 0x1C17DFC
	160 Move X0, X20
	161 Move X1, X31
	162 Call BigInteger.op_Inequality, X0, X1
	163 Move TEMP, X0
	164 And TEMP, TEMP, 1
	165 Compare TEMP, 1
	166 JumpIfNotEqual {172}
	167 Move X0, [X19+88]
	168 Compare X0, 0
	169 JumpIfEqual {180}
	170 Call BigInteger.Clear, X0
	171 Move [X19+88], X31
	172 Move W8, 1
	173 Move [X19+35], W8
	174 Move X20, [X31+32]
	175 Move X19, [X31+40]
	176 Move X22, [X31+16]
	177 Move X21, [X31+24]
	178 Move X30, [X31+48]
	179 Return 
	180 Call 0x1C17F20

Method: System.String ToXmlString(System.Boolean includePrivateParameters)

Disassembly:
	0x03203DB8 ADD W3, W23, 0x58
	0x03203DBC MOV X4, X1
	0x03203DC0 MOV W5, W31
	0x03203DC4 MOV X6, X31
	0x03203DC8 BL 0x32519D0
	0x03203DCC LDRB W8, [X20 + 0x38]
	0x03203DD0 LDR X1, [X20 + 0x10]
	0x03203DD4 ADD W2, W23, 0x5C
	0x03203DD8 MOVZ W9, 0x4C
	0x03203DDC MOVZ W10, 0x3C
	0x03203DE0 CMP W8, 0x0
	0x03203DE4 MOVZ W11, 0xB0
	0x03203DE8 MOVZ W12, 0xA0
	0x03203DEC CSEL W3, W10, W9, EQ
	0x03203DF0 MOV X0, X19
	0x03203DF4 MOV X4, X1
	0x03203DF8 MOV W5, W2
	0x03203DFC MOV X6, X31
	0x03203E00 CSEL W24, W12, W11, EQ
	0x03203E04 BL 0x32519D0
	0x03203E08 LDR W8, [X20 + 0x24]
	0x03203E0C LDR X1, [X20 + 0x10]
	0x03203E10 ADD W2, W23, W24
	0x03203E14 MOV X0, X19
	0x03203E18 SUB W3, W8, W2
	0x03203E1C CBZ X22, 0x3203F48
	0x03203E20 MOV X4, X1
	0x03203E24 MOV W5, W2
	0x03203E28 MOV X6, X31
	0x03203E2C BL 0x32519D0
	0x03203E30 ANDS W9, W22, 0xFFF
	0x03203E34 LDP X1, X0, [X20 + 0x10]
	0x03203E38 SBFM X8, X22, 0xC, 0x3F
	0x03203E3C MOVZ W10, 0x1000
	0x03203E40 CSET W11, EQ
	0x03203E44 CSEL W22, W10, W9, EQ
	0x03203E48 SUB X10, X8, X11
	0x03203E4C CSINV X9, X31, X31, NE
	0x03203E50 CMP X10, 0x1
	0x03203E54 B.LT 0x3203EB4
	0x03203E58 ADD X8, X8, X9
	0x03203E5C ADD X23, X8, 0x1
	0x03203E60 CBZ X1, 0x3203F70
	0x03203E64 CBZ X0, 0x3203F70
	0x03203E68 LDR X8, [X0]
	0x03203E6C LDR W3, [X1 + 0x18]
	0x03203E70 MOV W2, W31
	0x03203E74 LDR X9, [X8 + 0x358]
	0x03203E78 LDR X4, [X8 + 0x360]
	0x03203E7C BLR X9
	0x03203E80 LDR X1, [X20 + 0x10]
	0x03203E84 CBZ X1, 0x3203F70
	0x03203E88 LDR W3, [X1 + 0x18]
	0x03203E8C MOV X0, X19
	0x03203E90 MOV W2, W31
	0x03203E94 MOV X4, X1
	0x03203E98 MOV W5, W31
	0x03203E9C MOV X6, X31
	0x03203EA0 BL 0x32519D0
	0x03203EA4 LDP X1, X0, [X20 + 0x10]
	0x03203EA8 SUB X23, X23, 0x1
	0x03203EAC CMP X23, 0x1
	0x03203EB0 B.GT 0x3203E60
	0x03203EB4 CBZ X0, 0x3203F70
	0x03203EB8 LDR X8, [X0]
	0x03203EBC MOV W2, W31
	0x03203EC0 MOV W3, W22
	0x03203EC4 LDR X9, [X8 + 0x358]
	0x03203EC8 LDR X4, [X8 + 0x360]
	0x03203ECC BLR X9
	0x03203ED0 CMP W0, W22
	0x03203ED4 B.NE 0x3203F28
	0x03203ED8 LDR X1, [X20 + 0x10]
	0x03203EDC MOV X0, X19
	0x03203EE0 CMP W21, 0x1
	0x03203EE4 B.LT 0x3203F40
	0x03203EE8 MOV W2, W31
	0x03203EEC MOV W3, W22
	0x03203EF0 MOV X4, X1
	0x03203EF4 MOV W5, W31
	0x03203EF8 MOV X6, X31
	0x03203EFC BL 0x32519D0
	0x03203F00 ADRP X8, 0xEF0000
	0x03203F04 LDR X8, [X8 + 0x618]
	0x03203F08 MOV W1, W21
	0x03203F0C LDR X0, [X8]
	0x03203F10 BL 0x1C16D6C
	0x03203F14 MOV X1, X0
	0x03203F18 MOV X0, X19
	0x03203F1C MOV W2, W31
	0x03203F20 MOV W3, W21
	0x03203F24 B 0x3203F48
	0x03203F28 LDP X20, X19, [X31 + 0x30]
	0x03203F2C LDP X22, X21, [X31 + 0x20]
	0x03203F30 LDP X24, X23, [X31 + 0x10]
	0x03203F34 MOV X0, X31
	0x03203F38 LDR X30, [X31], #0x40
	0x03203F3C RET
	0x03203F40 MOV W2, W31
	0x03203F44 MOV W3, W22
	0x03203F48 MOV X4, X31
	0x03203F4C BL 0x3251BB0
	0x03203F50 LDR X8, [X19]
	0x03203F54 MOV X0, X19
	0x03203F58 LDP X20, X19, [X31 + 0x30]
	0x03203F5C LDP X22, X21, [X31 + 0x20]
	0x03203F60 LDP X2, X1, [X8 + 0x1E8]
	0x03203F64 LDP X24, X23, [X31 + 0x10]
	0x03203F68 LDR X30, [X31], #0x40
	0x03203F6C BR X2
	0x03203F70 BL 0x1C16F20
	0x03203F74 BL 0x1C16F28
	0x03203F78 STP X30, X21, [X31 - 0x20]!
	0x03203F7C STP X20, X19, [X31 + 0x10]
	0x03203F80 ADRP X20, 0x11D9000
	0x03203F84 ADRP X21, 0xF1E000
	0x03203F88 LDRB W8, [X20 + 0x23C]
	0x03203F8C LDR X21, [X21 + 0x688]
	0x03203F90 MOV X19, X0
	0x03203F94 TBNZ X8, 0x0, 0x3203FAC
	0x03203F98 ADRP X0, 0xF1E000
	0x03203F9C LDR X0, [X0 + 0x688]
	0x03203FA0 BL 0x1C16CF4
	0x03203FA4 MOVZ W8, 0x1
	0x03203FA8 STRB W8, [X20 + 0x23C]
	0x03203FAC MOV X0, X19
	0x03203FB0 BL 0x3203558
	0x03203FB4 MOVN W8, 0x0
	0x03203FB8 STR W8, [X19 + 0x78]
	0x03203FBC LDR X0, [X21]
	0x03203FC0 BL 0x1C16F10
	0x03203FC4 MOV X1, X31
	0x03203FC8 MOV X20, X0
	0x03203FCC BL 0x31F6860
	0x03203FD0 STR X20, [X19 + 0x88]
	0x03203FD4 LDR X0, [X21]
	0x03203FD8 BL 0x1C16F10
	0x03203FDC MOV X1, X31
	0x03203FE0 MOV X20, X0
	0x03203FE4 BL 0x31F6860
	0x03203FE8 STR X20, [X19 + 0x90]
	0x03203FEC LDP X20, X19, [X31 + 0x10]
	0x03203FF0 LDP X30, X21, [X31], #0x20
	0x03203FF4 RET
	0x03203FF8 STR X30, [X31 - 0x20]!
	0x03203FFC STP X20, X19, [X31 + 0x10]
	0x03204000 MOV X19, X1
	0x03204004 MOV X20, X0
	0x03204008 BL 0x3203F78
	0x0320400C MOV X0, X20
	0x03204010 MOV X1, X19
	0x03204014 LDP X20, X19, [X31 + 0x10]
	0x03204018 LDR X30, [X31], #0x20
	0x0320401C B 0x3204020
	0x03204020 STR X30, [X31 - 0x20]!
	0x03204024 STP X20, X19, [X31 + 0x10]
	0x03204028 MOV X20, X1
	0x0320402C MOV X19, X0
	0x03204030 BL 0x32040F0
	0x03204034 STR X20, [X19 + 0x48]
	0x03204038 MOV X0, X19
	0x0320403C BL 0x3204194
	0x03204040 LDP X20, X19, [X31 + 0x10]
	0x03204044 LDR X30, [X31], #0x20
	0x03204048 RET
	0x0320404C CMP W1, 0x1
	0x03204050 MOV X20, X0
	0x03204054 B.NE 0x32040E4
	0x03204058 MOV X0, X20
	0x0320405C BL 0x3EB1AD0
	0x03204060 MOV X20, X0
	0x03204064 ADRP X0, 0xF1D000
	0x03204068 LDR X0, [X0 + 0x690]
	0x0320406C BL 0x1C16D08
	0x03204070 LDR X8, [X20]
	0x03204074 LDR X1, [X8]
	0x03204078 BL 0x1C17270
	0x0320407C TBNZ X0, 0x0, 0x32040AC
	0x03204080 ADRP X0, 0xEF5000
	0x03204084 LDR X0, [X0 + 0xCC0]
	0x03204088 BL 0x1C16D08
	0x0320408C LDR X8, [X20]
	0x03204090 LDR X1, [X8]
	0x03204094 BL 0x1C17270
	0x03204098 TBZ X0, 0x0, 0x32040BC
	0x0320409C BL 0x3EB1AE0
	0x032040A0 MOVZ W8, 0x1
	0x032040A4 STR W8, [X19 + 0x78]
	0x032040A8 B 0x3204040
	0x032040AC LDR X19, [X20]
	0x032040B0 BL 0x3EB1AE0
	0x032040B4 MOV X0, X19
	0x032040B8 BL 0x1C16F18
	0x032040BC MOVZ W0, 0x8
	0x032040C0 BL 0x3EB1AF0
	0x032040C4 LDR X8, [X20]
	0x032040C8 STR X8, [X0]
	0x032040CC ADRP X1, 0xCB0000
	0x032040D0 ADD X1, X1, 0xE58
	0x032040D4 MOV X2, X31
	0x032040D8 BL 0x3EB1B00
	0x032040DC MOV X20, X0
	0x032040E0 BL 0x3EB1AE0
	0x032040E4 MOV X0, X20
	0x032040E8 BL 0x1D2C690
	0x032040EC BL 0x1990590
	0x032040F0 STR X30, [X31 - 0x20]!
	0x032040F4 STP X20, X19, [X31 + 0x10]
	0x032040F8 ADRP X20, 0x11D8000
	0x032040FC LDRB W8, [X20 + 0x240]
	0x03204100 MOV X19, X0
	0x03204104 TBNZ X8, 0x0, 0x320411C
	0x03204108 ADRP X0, 0xEF0000
	0x0320410C LDR X0, [X0 + 0x9F0]
	0x03204110 BL 0x1C16CF4
	0x03204114 MOVZ W8, 0x1
	0x03204118 STRB W8, [X20 + 0x240]
	0x0320411C LDR X0, [X19 + 0x88]
	0x03204120 MOVN W8, 0x0
	0x03204124 STR X31, [X19 + 0x80]
	0x03204128 STR X31, [X19 + 0x60]
	0x0320412C STR X31, [X19 + 0x70]
	0x03204130 STP X31, X31, [X19 + 0x48]
	0x03204134 STR X31, [X19 + 0x40]
	0x03204138 STR W8, [X19 + 0x78]
	0x0320413C STRH W31, [X19 + 0x7C]
	0x03204140 CBZ X0, 0x3204190
	0x03204144 MOV X1, X31
	0x03204148 BL 0x31F73E4
	0x0320414C LDR X0, [X19 + 0x90]
	0x03204150 CBZ X0, 0x3204190
	0x03204154 ADRP X20, 0xEF0000
	0x03204158 LDR X20, [X20 + 0x9F0]
	0x0320415C MOV X1, X31
	0x03204160 BL 0x31F73E4
	0x03204164 LDR X0, [X20]
	0x03204168 LDR W8, [X0 + 0xE0]
	0x0320416C CBNZ W8, 0x3204178
	0x03204170 BL 0x1C16DFC
	0x03204174 LDR X0, [X20]
	0x03204178 LDR X8, [X0 + 0xB8]
	0x0320417C LDR X8, [X8 + 0x10]
	0x03204180 STR X8, [X19 + 0x68]
	0x03204184 LDP X20, X19, [X31 + 0x10]
	0x03204188 LDR X30, [X31], #0x20
	0x0320418C RET
	0x03204190 BL 0x1C16F20
	0x03204194 STR X30, [X31 - 0x30]!
	0x03204198 STP X22, X21, [X31 + 0x10]
	0x0320419C STP X20, X19, [X31 + 0x20]
	0x032041A0 ADRP X20, 0x11D8000
	0x032041A4 LDRB W8, [X20 + 0x23D]
	0x032041A8 MOV X19, X0
	0x032041AC TBNZ X8, 0x0, 0x32041E8
	0x032041B0 ADRP X0, 0xF1C000
	0x032041B4 LDR X0, [X0 + 0xC70]
	0x032041B8 BL 0x1C16CF4
	0x032041BC ADRP X0, 0xF1D000
	0x032041C0 LDR X0, [X0 + 0x698]
	0x032041C4 BL 0x1C16CF4
	0x032041C8 ADRP X0, 0xF1D000
	0x032041CC LDR X0, [X0 + 0x6A0]
	0x032041D0 BL 0x1C16CF4
	0x032041D4 ADRP X0, 0xF1D000
	0x032041D8 LDR X0, [X0 + 0x6A8]
	0x032041DC BL 0x1C16CF4
	0x032041E0 MOVZ W8, 0x1
	0x032041E4 STRB W8, [X20 + 0x23D]
	0x032041E8 LDR X1, [X19 + 0x40]
	0x032041EC CBZ X1, 0x32041FC
	0x032041F0 MOV X0, X19
	0x032041F4 BL 0x32036AC
	0x032041F8 B 0x3204208
	0x032041FC LDR X1, [X19 + 0x48]
	0x03204200 MOV X0, X19
	0x03204204 BL 0x3203764
	0x03204208 MOV X0, X19
	0x0320420C BL 0x3203A20
	0x03204210 STR X0, [X19 + 0x80]
	0x03204214 CBZ X0, 0x32042B4
	0x03204218 ADRP X8, 0xF1C000
	0x0320421C LDR X8, [X8 + 0xC70]
	0x03204220 MOV X21, X0
	0x03204224 LDR X0, [X8]
	0x03204228 BL 0x1C16F10
	0x0320422C MOV X1, X21
	0x03204230 MOV X2, X31
	0x03204234 MOV X20, X0
	0x03204238 BL 0x31E9BEC
	0x0320423C CBZ X20, 0x3204484
	0x03204240 ADRP X8, 0xF1D000
	0x03204244 LDR X8, [X8 + 0x6A8]
	0x03204248 LDR X0, [X20 + 0x10]
	0x0320424C MOV X2, X31
	0x03204250 LDR X1, [X8]
	0x03204254 BL 0x3226EF8
	0x03204258 TBNZ X0, 0x0, 0x32042A8
	0x0320425C ADRP X8, 0xF1D000
	0x03204260 LDR X21, [X20 + 0x18]
	0x03204264 LDR X8, [X8 + 0x698]
	0x03204268 LDR X0, [X8]
	0x0320426C BL 0x1C16F10
	0x03204270 MOV X1, X21
	0x03204274 MOV X2, X31
	0x03204278 MOV X20, X0
	0x0320427C BL 0x31EA1F0
	0x03204280 CBZ X20, 0x3204484
	0x03204284 LDR X8, [X20 + 0x20]
	0x03204288 CBZ X8, 0x3204484
	0x0320428C LDR X0, [X8 + 0x10]
	0x03204290 ADRP X8, 0xF1D000
	0x03204294 LDR X8, [X8 + 0x6A0]
	0x03204298 MOV X2, X31
	0x0320429C LDR X1, [X8]
	0x032042A0 BL 0x3226EF8
	0x032042A4 TBZ X0, 0x0, 0x32042EC
	0x032042A8 LDR X0, [X19 + 0x18]
	0x032042AC CBNZ X0, 0x32042C4
	0x032042B0 B 0x32042DC
	0x032042B4 LDR X0, [X19 + 0x18]
	0x032042B8 MOVZ W8, 0x1
	0x032042BC STR W8, [X19 + 0x78]
	0x032042C0 CBZ X0, 0x32042DC
	0x032042C4 LDR X8, [X0]
	0x032042C8 LDR X9, [X8 + 0x278]
	0x032042CC LDR X1, [X8 + 0x280]
	0x032042D0 BLR X9
	0x032042D4 MOV W0, W31
	0x032042D8 STR X31, [X19 + 0x18]
	0x032042DC LDP X20, X19, [X31 + 0x20]
	0x032042E0 LDP X22, X21, [X31 + 0x10]
	0x032042E4 LDR X30, [X31], #0x30
	0x032042E8 RET
	0x032042EC LDR X8, [X20 + 0x28]
	0x032042F0 STR X8, [X19 + 0x58]
	0x032042F4 LDR X8, [X20 + 0x20]
	0x032042F8 CBZ X8, 0x3204484
	0x032042FC LDR X21, [X8 + 0x18]
	0x03204300 CBZ X21, 0x3204484
	0x03204304 MOV X0, X21
	0x03204308 MOV W1, W31
	0x0320430C MOV X2, X31
	0x03204310 BL 0x31E8704
	0x03204314 CBZ X0, 0x3204484
	0x03204318 MOVZ W1, 0x1
	0x0320431C MOV X2, X31
	0x03204320 BL 0x31E8704
	0x03204324 CBZ X0, 0x3204484
	0x03204328 MOVZ W1, 0x1
	0x0320432C MOV X2, X31
	0x03204330 BL 0x31E8704
	0x03204334 STR X0, [X19 + 0x60]
	0x03204338 CBZ X0, 0x3204484
	0x0320433C MOV X1, X31
	0x03204340 BL 0x31E7CE8
	0x03204344 CMP W0, 0x14
	0x03204348 B.LE 0x3204370
	0x0320434C CMP W0, 0x20
	0x03204350 B.EQ 0x32043A4
	0x03204354 CMP W0, 0x30
	0x03204358 B.EQ 0x32043B0
	0x0320435C CMP W0, 0x40
	0x03204360 B.NE 0x320438C
	0x03204364 MOV X0, X31
	0x03204368 BL 0x325F434
	0x0320436C B 0x32043B8
	0x03204370 CMP W0, 0x10
	0x03204374 B.EQ 0x3204398
	0x03204378 CMP W0, 0x14
	0x0320437C B.NE 0x320438C
	0x03204380 MOV X0, X31
	0x03204384 BL 0x325D0E8
	0x03204388 B 0x32043B8
	0x0320438C LDR X0, [X19 + 0x18]
	0x03204390 MOVZ W8, 0x5
	0x03204394 B 0x32042BC
	0x03204398 MOV X0, X31
	0x0320439C BL 0x32560FC
	0x032043A0 B 0x32043B8
	0x032043A4 MOV X0, X31
	0x032043A8 BL 0x325D984
	0x032043AC B 0x32043B8
	0x032043B0 MOV X0, X31
	0x032043B4 BL 0x325E6BC
	0x032043B8 MOV X22, X0
	0x032043BC MOV X0, X19
	0x032043C0 MOV X1, X22
	0x032043C4 BL 0x3203AF0
	0x032043C8 LDR X8, [X19 + 0x18]
	0x032043CC STR X0, [X19 + 0x50]
	0x032043D0 CBZ X8, 0x32043EC
	0x032043D4 LDR X9, [X8]
	0x032043D8 MOV X0, X8
	0x032043DC LDR X10, [X9 + 0x278]
	0x032043E0 LDR X1, [X9 + 0x280]
	0x032043E4 BLR X10
	0x032043E8 STR X31, [X19 + 0x18]
	0x032043EC LDR X0, [X19 + 0x60]
	0x032043F0 CBZ X0, 0x3204484
	0x032043F4 LDR X1, [X19 + 0x50]
	0x032043F8 MOV X2, X31
	0x032043FC BL 0x31E7EC0
	0x03204400 TBNZ X0, 0x0, 0x320440C
	0x03204404 MOVZ W8, 0x2
	0x03204408 STR W8, [X19 + 0x78]
	0x0320440C MOV X0, X21
	0x03204410 MOV W1, W31
	0x03204414 MOV X2, X31
	0x03204418 BL 0x31E8704
	0x0320441C CBZ X0, 0x3204484
	0x03204420 MOV X1, X31
	0x03204424 BL 0x31E7D00
	0x03204428 CBZ X22, 0x3204484
	0x0320442C LDR X8, [X22]
	0x03204430 MOV X21, X0
	0x03204434 MOV X0, X22
	0x03204438 LDR X9, [X8 + 0x258]
	0x0320443C LDR X1, [X8 + 0x260]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X29
	003 Move [X31+72], X30
	004 Move [X31+80], X28
	005 Move [X31+88], X27
	006 Move [X31+96], X26
	007 Move [X31+104], X25
	008 Move [X31+112], X24
	009 Move [X31+120], X23
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 Move X20, 0x11DA000
	015 Move X21, 0xEF1000
	016 Move W8, [X20+565]
	017 Move X21, [X21+2288]
	018 Move W26, W1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {86}
	024 Move X0, 0xEFA000
	025 Move X0, [X0+2536]
	026 Call 0x1C17CF4
	027 Move X0, 0xEF1000
	028 Move X0, [X0+2288]
	029 Call 0x1C17CF4
	030 Move X0, 0xF1F000
	031 Move X0, [X0+1488]
	032 Call 0x1C17CF4
	033 Move X0, 0xF1F000
	034 Move X0, [X0+1496]
	035 Call 0x1C17CF4
	036 Move X0, 0xF1F000
	037 Move X0, [X0+1504]
	038 Call 0x1C17CF4
	039 Move X0, 0xF1F000
	040 Move X0, [X0+1512]
	041 Call 0x1C17CF4
	042 Move X0, 0xF1F000
	043 Move X0, [X0+1520]
	044 Call 0x1C17CF4
	045 Move X0, 0xF1F000
	046 Move X0, [X0+1528]
	047 Call 0x1C17CF4
	048 Move X0, 0xF1F000
	049 Move X0, [X0+1536]
	050 Call 0x1C17CF4
	051 Move X0, 0xF1F000
	052 Move X0, [X0+1544]
	053 Call 0x1C17CF4
	054 Move X0, 0xF1F000
	055 Move X0, [X0+1552]
	056 Call 0x1C17CF4
	057 Move X0, 0xF1F000
	058 Move X0, [X0+1560]
	059 Call 0x1C17CF4
	060 Move X0, 0xF1F000
	061 Move X0, [X0+1568]
	062 Call 0x1C17CF4
	063 Move X0, 0xF1F000
	064 Move X0, [X0+1576]
	065 Call 0x1C17CF4
	066 Move X0, 0xF1F000
	067 Move X0, [X0+1584]
	068 Call 0x1C17CF4
	069 Move X0, 0xF1F000
	070 Move X0, [X0+1592]
	071 Call 0x1C17CF4
	072 Move X0, 0xF1F000
	073 Move X0, [X0+1600]
	074 Call 0x1C17CF4
	075 Move X0, 0xF1F000
	076 Move X0, [X0+1608]
	077 Call 0x1C17CF4
	078 Move X0, 0xF1F000
	079 Move X0, [X0+1616]
	080 Call 0x1C17CF4
	081 Move X0, 0xF1F000
	082 Move X0, [X0+1624]
	083 Call 0x1C17CF4
	084 Move W8, 1
	085 Move [X20+565], W8
	086 Move X0, [X21]
	087 Call 0x1C17F10
	088 Move X1, X31
	089 Move X25, X0
	090 Call StringBuilder..ctor, X0
	091 Move X8, [X19]
	092 And W1, W26, 1
	093 Move X0, X19
	094 Move X9, [X8+488]
	095 Move X2, [X8+496]
	096 Add X8, X31, 0
	097 NotImplemented "Instruction BLR not yet implemented."
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X22, [X31+32]
	101 Move X21, [X31+40]
	102 Move X20, [X31+48]
	103 Move X19, [X31+56]
	104 Compare X25, 0
	105 JumpIfEqual {342}
	106 Move X8, 0xF1F000
	107 Move X8, [X8+1584]
	108 Move X27, [X31]
	109 Move X28, [X31+8]
	110 Move X1, [X8]
	111 Move X0, X25
	112 Move X2, X31
	113 Call StringBuilder.Append, X0, X1
	114 Move X8, 0xF1F000
	115 Move X8, [X8+1600]
	116 Move X1, [X8]
	117 Move X0, X25
	118 Move X2, X31
	119 Call StringBuilder.Append, X0, X1
	120 Move X29, 0xEFA000
	121 Move X29, [X29+2536]
	122 Move X0, [X29]
	123 Move W8, [X0+224]
	124 Compare W8, 0
	125 JumpIfNotEqual {127}
	126 Call 0x1C17DFC
	127 Move X0, X28
	128 Move X1, X31
	129 Call Convert.ToBase64String, X0
	130 Move X1, X0
	131 Move X0, X25
	132 Move X2, X31
	133 Call StringBuilder.Append, X0, X1
	134 Move X8, 0xF1F000
	135 Move X8, [X8+1616]
	136 Move X1, [X8]
	137 Move X0, X25
	138 Move X2, X31
	139 Call StringBuilder.Append, X0, X1
	140 Move X8, 0xF1F000
	141 Move X8, [X8+1488]
	142 Move X1, [X8]
	143 Move X0, X25
	144 Move X2, X31
	145 Call StringBuilder.Append, X0, X1
	146 Move X0, X27
	147 Move X1, X31
	148 Call Convert.ToBase64String, X0
	149 Move X1, X0
	150 Move X0, X25
	151 Move X2, X31
	152 Call StringBuilder.Append, X0, X1
	153 Move X8, 0xF1F000
	154 Move X8, [X8+1568]
	155 Move X1, [X8]
	156 Move X0, X25
	157 Move X2, X31
	158 Call StringBuilder.Append, X0, X1
	159 Move TEMP, X26
	160 And TEMP, TEMP, 1
	161 Compare TEMP, 1
	162 JumpIfNotEqual {317}
	163 Compare X24, 0
	164 JumpIfEqual {189}
	165 Move X8, 0xF1F000
	166 Move X8, [X8+1552]
	167 Move X1, [X8]
	168 Move X0, X25
	169 Move X2, X31
	170 Call StringBuilder.Append, X0, X1
	171 Move X0, [X29]
	172 Move W8, [X0+224]
	173 Compare W8, 0
	174 JumpIfNotEqual {176}
	175 Call 0x1C17DFC
	176 Move X0, X24
	177 Move X1, X31
	178 Call Convert.ToBase64String, X0
	179 Move X1, X0
	180 Move X0, X25
	181 Move X2, X31
	182 Call StringBuilder.Append, X0, X1
	183 Move X8, 0xF1E000
	184 Move X8, [X8+1544]
	185 Move X1, [X8]
	186 Move X0, X25
	187 Move X2, X31
	188 Call StringBuilder.Append, X0, X1
	189 Compare X23, 0
	190 JumpIfEqual {215}
	191 Move X8, 0xF1E000
	192 Move X8, [X8+1608]
	193 Move X1, [X8]
	194 Move X0, X25
	195 Move X2, X31
	196 Call StringBuilder.Append, X0, X1
	197 Move X0, [X29]
	198 Move W8, [X0+224]
	199 Compare W8, 0
	200 JumpIfNotEqual {202}
	201 Call 0x1C17DFC
	202 Move X0, X23
	203 Move X1, X31
	204 Call Convert.ToBase64String, X0
	205 Move X1, X0
	206 Move X0, X25
	207 Move X2, X31
	208 Call StringBuilder.Append, X0, X1
	209 Move X8, 0xF1E000
	210 Move X8, [X8+1560]
	211 Move X1, [X8]
	212 Move X0, X25
	213 Move X2, X31
	214 Call StringBuilder.Append, X0, X1
	215 Compare X22, 0
	216 JumpIfEqual {241}
	217 Move X8, 0xF1E000
	218 Move X8, [X8+1592]
	219 Move X1, [X8]
	220 Move X0, X25
	221 Move X2, X31
	222 Call StringBuilder.Append, X0, X1
	223 Move X0, [X29]
	224 Move W8, [X0+224]
	225 Compare W8, 0
	226 JumpIfNotEqual {228}
	227 Call 0x1C17DFC
	228 Move X0, X22
	229 Move X1, X31
	230 Call Convert.ToBase64String, X0
	231 Move X1, X0
	232 Move X0, X25
	233 Move X2, X31
	234 Call StringBuilder.Append, X0, X1
	235 Move X8, 0xF1E000
	236 Move X8, [X8+1624]
	237 Move X1, [X8]
	238 Move X0, X25
	239 Move X2, X31
	240 Call StringBuilder.Append, X0, X1
	241 Compare X21, 0
	242 JumpIfEqual {267}
	243 Move X8, 0xF1E000
	244 Move X8, [X8+1576]
	245 Move X1, [X8]
	246 Move X0, X25
	247 Move X2, X31
	248 Call StringBuilder.Append, X0, X1
	249 Move X0, [X29]
	250 Move W8, [X0+224]
	251 Compare W8, 0
	252 JumpIfNotEqual {254}
	253 Call 0x1C17DFC
	254 Move X0, X21
	255 Move X1, X31
	256 Call Convert.ToBase64String, X0
	257 Move X1, X0
	258 Move X0, X25
	259 Move X2, X31
	260 Call StringBuilder.Append, X0, X1
	261 Move X8, 0xF1E000
	262 Move X8, [X8+1504]
	263 Move X1, [X8]
	264 Move X0, X25
	265 Move X2, X31
	266 Call StringBuilder.Append, X0, X1
	267 Compare X20, 0
	268 JumpIfEqual {293}
	269 Move X8, 0xF1E000
	270 Move X8, [X8+1496]
	271 Move X1, [X8]
	272 Move X0, X25
	273 Move X2, X31
	274 Call StringBuilder.Append, X0, X1
	275 Move X0, [X29]
	276 Move W8, [X0+224]
	277 Compare W8, 0
	278 JumpIfNotEqual {280}
	279 Call 0x1C17DFC
	280 Move X0, X20
	281 Move X1, X31
	282 Call Convert.ToBase64String, X0
	283 Move X1, X0
	284 Move X0, X25
	285 Move X2, X31
	286 Call StringBuilder.Append, X0, X1
	287 Move X8, 0xF1E000
	288 Move X8, [X8+1528]
	289 Move X1, [X8]
	290 Move X0, X25
	291 Move X2, X31
	292 Call StringBuilder.Append, X0, X1
	293 Move X8, 0xF1E000
	294 Move X8, [X8+1536]
	295 Move X1, [X8]
	296 Move X0, X25
	297 Move X2, X31
	298 Call StringBuilder.Append, X0, X1
	299 Move X0, [X29]
	300 Move W8, [X0+224]
	301 Compare W8, 0
	302 JumpIfNotEqual {304}
	303 Call 0x1C17DFC
	304 Move X0, X19
	305 Move X1, X31
	306 Call Convert.ToBase64String, X0
	307 Move X1, X0
	308 Move X0, X25
	309 Move X2, X31
	310 Call StringBuilder.Append, X0, X1
	311 Move X8, 0xF1E000
	312 Move X8, [X8+1512]
	313 Move X1, [X8]
	314 Move X0, X25
	315 Move X2, X31
	316 Call StringBuilder.Append, X0, X1
	317 Move X8, 0xF1E000
	318 Move X8, [X8+1520]
	319 Move X1, [X8]
	320 Move X0, X25
	321 Move X2, X31
	322 Call StringBuilder.Append, X0, X1
	323 Move X8, [X25]
	324 Move X0, X25
	325 Move X9, [X8+360]
	326 Move X1, [X8+368]
	327 NotImplemented "Instruction BLR not yet implemented."
	328 Move X20, [X31+144]
	329 Move X19, [X31+152]
	330 Move X22, [X31+128]
	331 Move X21, [X31+136]
	332 Move X24, [X31+112]
	333 Move X23, [X31+120]
	334 Move X26, [X31+96]
	335 Move X25, [X31+104]
	336 Move X28, [X31+80]
	337 Move X27, [X31+88]
	338 Move X29, [X31+64]
	339 Move X30, [X31+72]
	340 Add X31, X31, 160
	341 Return X0
	342 Call 0x1C17F20
	343 Move X25, X0
	344 NotImplemented "Instruction CMP not yet implemented."
	345 Move X0, X25
	346 Call 0x3EB2AD0
	347 Move X25, X0
	348 Move X0, 0xEF6000
	349 Move X0, [X0+3264]
	350 Call 0x1C17D08
	351 Move X8, [X25]
	352 Move X1, [X8]
	353 Call 0x1C18270
	354 Move TEMP, X0
	355 And TEMP, TEMP, 1
	356 Compare TEMP, 1
	357 JumpIfNotEqual {379}
	358 Move X25, [X25]
	359 Call 0x3EB2AE0
	360 Compare X24, 0
	361 JumpIfNotEqual {387}
	362 Compare X23, 0
	363 JumpIfNotEqual {394}
	364 Compare X22, 0
	365 JumpIfNotEqual {401}
	366 Compare X21, 0
	367 JumpIfNotEqual {408}
	368 Compare X20, 0
	369 JumpIfNotEqual {415}
	370 Compare X19, 0
	371 JumpIfEqual {377}
	372 Move W2, [X19+24]
	373 Move X0, X19
	374 Move W1, W31
	375 Move X3, X31
	376 Call Array.Clear, X0, X1, X2
	377 Move X0, X25
	378 Call 0x1C17F18
	379 Move W0, 8
	380 Call 0x3EB2AF0
	381 Move X8, [X25]
	382 Move [X0], X8
	383 Move X1, 0xCB1000
	384 Add X1, X1, 3672
	385 Move X2, X31
	386 Call 0x3EB2B00
	387 Move W2, [X24+24]
	388 Move X0, X24
	389 Move W1, W31
	390 Move X3, X31
	391 Call Array.Clear, X0, X1, X2
	392 Compare X23, 0
	393 JumpIfEqual {364}
	394 Move W2, [X23+24]
	395 Move X0, X23
	396 Move W1, W31
	397 Move X3, X31
	398 Call Array.Clear, X0, X1, X2
	399 Compare X22, 0
	400 JumpIfEqual {366}
	401 Move W2, [X22+24]
	402 Move X0, X22
	403 Move W1, W31
	404 Move X3, X31
	405 Call Array.Clear, X0, X1, X2
	406 Compare X21, 0
	407 JumpIfEqual {368}
	408 Move W2, [X21+24]
	409 Move X0, X21
	410 Move W1, W31
	411 Move X3, X31
	412 Call Array.Clear, X0, X1, X2
	413 Compare X20, 0
	414 JumpIfEqual {370}
	415 Move W2, [X20+24]
	416 Move X0, X20
	417 Move W1, W31
	418 Move X3, X31
	419 Call Array.Clear, X0, X1, X2
	420 Compare X19, 0
	421 JumpIfNotEqual {372}
	422 Move X25, X0
	423 Call 0x3EB2AE0
	424 Move X0, X25
	425 Call 0x1D2D690
	426 Call 0x1991590

Method: System.Byte[] GetPaddedValue(Mono.Math.BigInteger value, System.Int32 length)

Disassembly:
	0x0320321C LDR X8, [X8 + 0x5E8]
	0x03203220 LDR X1, [X8]
	0x03203224 MOV X0, X25
	0x03203228 MOV X2, X31
	0x0320322C BL 0x32333E0
	0x03203230 ADRP X8, 0xF1E000
	0x03203234 LDR X8, [X8 + 0x5F0]
	0x03203238 LDR X1, [X8]
	0x0320323C MOV X0, X25
	0x03203240 MOV X2, X31
	0x03203244 BL 0x32333E0
	0x03203248 LDR X8, [X25]
	0x0320324C MOV X0, X25
	0x03203250 LDP X9, X1, [X8 + 0x168]
	0x03203254 BLR X9
	0x03203258 LDP X20, X19, [X31 + 0x90]
	0x0320325C LDP X22, X21, [X31 + 0x80]
	0x03203260 LDP X24, X23, [X31 + 0x70]
	0x03203264 LDP X26, X25, [X31 + 0x60]
	0x03203268 LDP X28, X27, [X31 + 0x50]
	0x0320326C LDP X29, X30, [X31 + 0x40]
	0x03203270 ADD X31, X31, 0xA0
	0x03203274 RET
	0x03203278 BL 0x1C16F20
	0x0320327C B 0x3203320
	0x03203280 B 0x3203320
	0x03203284 B 0x3203320
	0x03203288 B 0x3203320
	0x0320328C B 0x3203320
	0x03203290 B 0x3203320
	0x03203294 B 0x3203320
	0x03203298 B 0x3203320
	0x0320329C B 0x3203320
	0x032032A0 B 0x3203320
	0x032032A4 B 0x3203320
	0x032032A8 B 0x3203320
	0x032032AC B 0x3203320
	0x032032B0 B 0x3203320
	0x032032B4 B 0x3203320
	0x032032B8 B 0x3203320
	0x032032BC B 0x3203320
	0x032032C0 B 0x3203320
	0x032032C4 B 0x3203320
	0x032032C8 B 0x3203320

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11DA000
	006 Move W8, [X21+566]
	007 Move W19, W2
	008 Move X20, X1
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xEF1000
	014 Move X0, [X0+1560]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+566], W8
	018 Compare X20, 0
	019 JumpIfEqual {52}
	020 Move X0, X20
	021 Call BigInteger.GetBytes, X0
	022 Compare X0, 0
	023 JumpIfEqual {52}
	024 Move W8, [X0+24]
	025 Move X20, X0
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, 0xEF1000
	028 Move X8, [X8+1560]
	029 Move W1, W19
	030 Move X0, [X8]
	031 Call 0x1C17D6C
	032 Move W4, [X20+24]
	033 Move X21, X0
	034 Move X0, X20
	035 Move W1, W31
	036 Subtract W3, W19, W4
	037 Move X2, X21
	038 Move X5, X31
	039 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	040 Move W2, [X20+24]
	041 Move X0, X20
	042 Move W1, W31
	043 Move X3, X31
	044 Call Array.Clear, X0, X1, X2
	045 Move X20, X21
	046 Move X0, X20
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0
	052 Call 0x1C17F20

