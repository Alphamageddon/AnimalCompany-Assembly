Type: Mono.Security.Cryptography.MD2Managed

Method: System.Byte[] Padding(System.Int32 nLength)

Disassembly:
	0x031FEDD0 MOV X1, X20
	0x031FEDD4 LDR X9, [X8 + 0x238]
	0x031FEDD8 LDR X4, [X8 + 0x240]
	0x031FEDDC MOV W2, W31
	0x031FEDE0 BLR X9
	0x031FEDE4 LDR X1, [X19 + 0x48]
	0x031FEDE8 LDR X2, [X19 + 0x28]
	0x031FEDEC BL 0x31FEE1C
	0x031FEDF0 LDR X8, [X19]
	0x031FEDF4 MOV X0, X19
	0x031FEDF8 LDR X9, [X8 + 0x258]
	0x031FEDFC LDR X1, [X8 + 0x260]
	0x031FEE00 BLR X9
	0x031FEE04 LDR X0, [X19 + 0x48]
	0x031FEE08 LDP X20, X19, [X31 + 0x10]
	0x031FEE0C LDP X30, X21, [X31], #0x20
	0x031FEE10 RET
	0x031FEE14 BL 0x1C16F20
	0x031FEE18 BL 0x1C16F28
	0x031FEE1C STR X30, [X31 - 0x10]!
	0x031FEE20 CBZ X1, 0x31FEF10
	0x031FEE24 LDR W10, [X1 + 0x18]
	0x031FEE28 CMP W10, 0x1
	0x031FEE2C B.LT 0x31FEF04
	0x031FEE30 MOVZ W9, 0x3
	0x031FEE34 MOVN W8, 0x0
	0x031FEE38 CBZ X2, 0x31FEF10
	0x031FEE3C LDR W12, [X2 + 0x18]
	0x031FEE40 ADD W11, W8, 0x1
	0x031FEE44 CMP W11, W12
	0x031FEE48 B.CS 0x31FEF0C
	0x031FEE4C SUB W12, W9, 0x3
	0x031FEE50 CMP W12, W10
	0x031FEE54 B.CS 0x31FEF0C
	0x031FEE58 ADD X10, X2, W11, 0x2, SXTW
	0x031FEE5C LDR W13, [X10 + 0x20]!
	0x031FEE60 ADD X14, X1, W12, SXTW
	0x031FEE64 STRB W13, [X14 + 0x20]
	0x031FEE68 LDR W13, [X2 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11DF000
	005 Move W8, [X20+529]
	006 Move W19, W1
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEF6000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+529], W8
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X8, 0xEF6000
	018 Move X8, [X8+1560]
	019 Move W1, W19
	020 Move X0, [X8]
	021 Call 0x1C17D6C
	022 Compare X0, 0
	023 JumpIfEqual {42}
	024 Move W8, [X0+24]
	025 Move X9, X8
	026 ShiftRight X9, 32
	027 And X9, X9, 0x7FFFFFFF
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X9, X31
	030 Move X10, W8
	031 Add X11, X0, 32
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move [X11], W19
	034 Add X9, X9, 1
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X0, X31
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return X0
	041 Call 0x1C17F28
	042 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x031FED2C ADRP X21, 0xEF5000
	0x031FED30 LDRB W8, [X20 + 0x218]
	0x031FED34 LDR X21, [X21 + 0x618]
	0x031FED38 MOV X19, X0
	0x031FED3C TBNZ X8, 0x0, 0x31FED54
	0x031FED40 ADRP X0, 0xEF5000
	0x031FED44 LDR X0, [X0 + 0x618]
	0x031FED48 BL 0x1C16CF4
	0x031FED4C MOVZ W8, 0x1
	0x031FED50 STRB W8, [X20 + 0x218]
	0x031FED54 LDR X0, [X21]
	0x031FED58 MOVZ W1, 0x8
	0x031FED5C BL 0x1C16D6C
	0x031FED60 LDR X2, [X19 + 0x38]
	0x031FED64 MOV X1, X0
	0x031FED68 MOV X20, X0
	0x031FED6C BL 0x31FEE1C
	0x031FED70 LDR X8, [X19 + 0x38]
	0x031FED74 CBZ X8, 0x31FEE14
	0x031FED78 LDR W9, [X8 + 0x18]
	0x031FED7C CBZ W9, 0x31FEE18
	0x031FED80 LDR W8, [X8 + 0x20]
	0x031FED84 MOVZ W9, 0x78
	0x031FED88 MOVZ W10, 0x38
	0x031FED8C UBFM W8, W8, 0x3, 0x8
	0x031FED90 CMP W8, 0x38
	0x031FED94 CSEL W9, W10, W9, CC
	0x031FED98 SUB W21, W9, W8
	0x031FED9C MOV W1, W21
	0x031FEDA0 BL 0x31FEF14
	0x031FEDA4 LDR X8, [X19]
	0x031FEDA8 MOV X1, X0
	0x031FEDAC MOV X0, X19
	0x031FEDB0 MOV W2, W31
	0x031FEDB4 LDR X9, [X8 + 0x238]
	0x031FEDB8 LDR X4, [X8 + 0x240]
	0x031FEDBC MOV W3, W21
	0x031FEDC0 BLR X9
	0x031FEDC4 LDR X8, [X19]
	0x031FEDC8 MOVZ W3, 0x8
	0x031FEDCC MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x11DF000
	006 Move X20, 0xEF6000
	007 Move W8, [X21+530]
	008 Move X20, [X20+1560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xEF6000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+530], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call HashAlgorithm..ctor, X0
	022 Move W8, 128
	023 Move [X19+20], W8
	024 Move X0, [X20]
	025 Move W1, 16
	026 Call 0x1C17D6C
	027 Move [X19+40], X0
	028 Move X0, [X20]
	029 Move W1, 16
	030 Call 0x1C17D6C
	031 Move [X19+48], X0
	032 Move X0, [X20]
	033 Move W1, 16
	034 Call 0x1C17D6C
	035 Move [X19+56], X0
	036 Move X0, [X20]
	037 Move W1, 48
	038 Call 0x1C17D6C
	039 Move X8, [X19]
	040 Move [X19+72], X0
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X2, [X8+600]
	045 Move X1, [X8+608]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 CallNoReturn X2

Method: System.Void Initialize()

Disassembly:
	0x031FEE6C CMP W11, W13
	0x031FEE70 B.CS 0x31FEF0C
	0x031FEE74 LDR W13, [X1 + 0x18]
	0x031FEE78 ADD W12, W12, 0x1
	0x031FEE7C CMP W12, W13
	0x031FEE80 B.CS 0x31FEF0C
	0x031FEE84 LDR W13, [X10]
	0x031FEE88 SUB W14, W9, 0x2
	0x031FEE8C ADD X14, X1, W14, SXTW
	0x031FEE90 UBFM W13, W13, 0x8, 0x1F
	0x031FEE94 STRB W13, [X14 + 0x20]
	0x031FEE98 LDR W13, [X2 + 0x18]
	0x031FEE9C CMP W11, W13
	0x031FEEA0 B.CS 0x31FEF0C
	0x031FEEA4 LDR W13, [X1 + 0x18]
	0x031FEEA8 ADD W11, W12, 0x1
	0x031FEEAC CMP W11, W13
	0x031FEEB0 B.CS 0x31FEF0C
	0x031FEEB4 LDRH W12, [X10 + 0x2]
	0x031FEEB8 SUB W13, W9, 0x1
	0x031FEEBC ADD X13, X1, W13, SXTW
	0x031FEEC0 ADD W8, W8, 0x1
	0x031FEEC4 STRB W12, [X13 + 0x20]
	0x031FEEC8 LDR W12, [X2 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+40]
	005 Move W2, 16
	006 Move W1, W31
	007 Move X3, X31
	008 Move [X19+64], W31
	009 Call Array.Clear, X0, X1, X2
	010 Move X0, [X19+48]
	011 Move W2, 16
	012 Move W1, W31
	013 Move X3, X31
	014 Call Array.Clear, X0, X1, X2
	015 Move X0, [X19+56]
	016 Move W2, 16
	017 Move W1, W31
	018 Move X3, X31
	019 Call Array.Clear, X0, X1, X2
	020 Move X0, [X19+72]
	021 Move W2, 48
	022 Move W1, W31
	023 Move X3, X31
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Call Array.Clear, X0, X1, X2
	027 Return 

Method: System.Void HashCore(System.Byte[] array, System.Int32 ibStart, System.Int32 cbSize)

Disassembly:
	0x031FEECC CMP W8, W12
	0x031FEED0 B.CS 0x31FEF0C
	0x031FEED4 LDR W12, [X1 + 0x18]
	0x031FEED8 ADD W11, W11, 0x1
	0x031FEEDC CMP W11, W12
	0x031FEEE0 B.CS 0x31FEF0C
	0x031FEEE4 LDRB W10, [X10 + 0x3]
	0x031FEEE8 ADD X12, X1, W9, SXTW
	0x031FEEEC ADD W11, W11, 0x1
	0x031FEEF0 ADD W9, W9, 0x4
	0x031FEEF4 STRB W10, [X12 + 0x20]
	0x031FEEF8 LDR W10, [X1 + 0x18]
	0x031FEEFC CMP W11, W10
	0x031FEF00 B.LT 0x31FEE38
	0x031FEF04 LDR X30, [X31], #0x10
	0x031FEF08 RET
	0x031FEF0C BL 0x1C16F28
	0x031FEF10 BL 0x1C16F20
	0x031FEF14 STR X30, [X31 - 0x20]!
	0x031FEF18 STP X20, X19, [X31 + 0x10]
	0x031FEF1C ADRP X20, 0x11DE000
	0x031FEF20 LDRB W8, [X20 + 0x219]
	0x031FEF24 MOV W19, W1
	0x031FEF28 TBNZ X8, 0x0, 0x31FEF40
	0x031FEF2C ADRP X0, 0xEF5000
	0x031FEF30 LDR X0, [X0 + 0x618]
	0x031FEF34 BL 0x1C16CF4
	0x031FEF38 MOVZ W8, 0x1
	0x031FEF3C STRB W8, [X20 + 0x219]
	0x031FEF40 CMP W19, 0x1
	0x031FEF44 B.LT 0x31FEF74
	0x031FEF48 ADRP X8, 0xEF5000
	0x031FEF4C LDR X8, [X8 + 0x618]
	0x031FEF50 MOV W1, W19
	0x031FEF54 LDR X0, [X8]
	0x031FEF58 BL 0x1C16D6C
	0x031FEF5C CBZ X0, 0x31FEF84
	0x031FEF60 LDR W8, [X0 + 0x18]
	0x031FEF64 CBZ W8, 0x31FEF88
	0x031FEF68 MOVZ W8, 0x80
	0x031FEF6C STRB W8, [X0 + 0x20]
	0x031FEF70 B 0x31FEF78
	0x031FEF74 MOV X0, X31
	0x031FEF78 LDP X20, X19, [X31 + 0x10]
	0x031FEF7C LDR X30, [X31], #0x20
	0x031FEF80 RET
	0x031FEF84 BL 0x1C16F20
	0x031FEF88 BL 0x1C16F28
	0x031FEF8C AND W8, W2, W1, 0x0
	0x031FEF90 BIC W9, W3, W1, 0x0
	0x031FEF94 ORR W0, W9, W8, 0x0
	0x031FEF98 RET
	0x031FEF9C ORR W8, W3, W2, 0x0
	0x031FEFA0 AND W8, W8, W1, 0x0
	0x031FEFA4 AND W9, W3, W2, 0x0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move W23, [X0+64]
	009 Move W8, 16
	010 Move W20, W3
	011 Move W21, W2
	012 Add W9, W23, W3
	013 Subtract W24, W8, W23
	014 Move X19, X1
	015 Move X22, X0
	016 And W8, W9, 15
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move [X0+64], W8
	019 Move W24, W31
	020 Move X2, [X22+56]
	021 Move X0, X19
	022 Move W1, W21
	023 Move W3, W23
	024 Move W4, W24
	025 Move X5, X31
	026 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	027 Move X1, [X22+40]
	028 Move X2, [X22+48]
	029 Move X3, [X22+56]
	030 Move X0, X22
	031 Move W4, W31
	032 Call MD2Managed.MD2Transform, X0, X1, X2, X3, X4
	033 Move W8, 31
	034 Subtract W8, W8, W23
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X1, [X22+40]
	037 Move X2, [X22+48]
	038 Add W4, W21, W24
	039 Move X0, X22
	040 Move X3, X19
	041 Call MD2Managed.MD2Transform, X0, X1, X2, X3, X4
	042 Add W8, W24, 31
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add W24, W24, 16
	045 Move W23, W31
	046 Move X2, [X22+56]
	047 Add W1, W24, W21
	048 Subtract W4, W20, W24
	049 Move X0, X19
	050 Move W3, W23
	051 Move X20, [X31+48]
	052 Move X19, [X31+56]
	053 Move X22, [X31+32]
	054 Move X21, [X31+40]
	055 Move X24, [X31+16]
	056 Move X23, [X31+24]
	057 Move X5, X31
	058 Move X30, [X31+64]
	059 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	060 Return 

Method: System.Byte[] HashFinal()

Disassembly:
	0x031FF20C MOV W1, W31
	0x031FF210 SUB W3, W8, W4
	0x031FF214 MOV X2, X20
	0x031FF218 MOV X5, X31
	0x031FF21C BL 0x33A8A9C
	0x031FF220 MOV X0, X20
	0x031FF224 LDP X20, X19, [X31 + 0x20]
	0x031FF228 LDP X22, X21, [X31 + 0x10]
	0x031FF22C LDR X30, [X31], #0x30
	0x031FF230 RET
	0x031FF234 BL 0x1C16F20
	0x031FF238 STP X30, X21, [X31 - 0x20]!
	0x031FF23C STP X20, X19, [X31 + 0x10]
	0x031FF240 ADRP X20, 0x11DD000
	0x031FF244 LDRB W8, [X20 + 0x21B]
	0x031FF248 MOV X19, X0
	0x031FF24C TBNZ X8, 0x0, 0x31FF264
	0x031FF250 ADRP X0, 0xEF4000
	0x031FF254 LDR X0, [X0 + 0x618]
	0x031FF258 BL 0x1C16CF4
	0x031FF25C MOVZ W8, 0x1
	0x031FF260 STRB W8, [X20 + 0x21B]
	0x031FF264 CBZ X19, 0x31FF2F4
	0x031FF268 LDR W8, [X19 + 0x18]
	0x031FF26C MOV X9, X31
	0x031FF270 SXTW X10, W8
	0x031FF274 CMP X9, X8
	0x031FF278 B.CS 0x31FF2F0
	0x031FF27C ADD X21, X9, 0x1
	0x031FF280 CMP X21, X10
	0x031FF284 B.GE 0x31FF298
	0x031FF288 ADD X9, X19, X9
	0x031FF28C LDRB W11, [X9 + 0x20]
	0x031FF290 MOV X9, X21
	0x031FF294 CBZ W11, 0x31FF274
	0x031FF298 CMP W21, 0x1
	0x031FF29C B.EQ 0x31FF2E0
	0x031FF2A0 ADRP X9, 0xEF4000
	0x031FF2A4 LDR X9, [X9 + 0x618]
	0x031FF2A8 SUB W8, W8, W21
	0x031FF2AC ADD W1, W8, 0x1
	0x031FF2B0 LDR X0, [X9]
	0x031FF2B4 BL 0x1C16D6C
	0x031FF2B8 CBZ X0, 0x31FF2F4
	0x031FF2BC LDR W4, [X0 + 0x18]
	0x031FF2C0 MOV X20, X0
	0x031FF2C4 SUB X1, X21, 0x1
	0x031FF2C8 MOV X0, X19
	0x031FF2CC MOV X2, X20
	0x031FF2D0 MOV W3, W31
	0x031FF2D4 MOV X5, X31
	0x031FF2D8 BL 0x33A8A9C
	0x031FF2DC MOV X19, X20
	0x031FF2E0 MOV X0, X19
	0x031FF2E4 LDP X20, X19, [X31 + 0x10]
	0x031FF2E8 LDP X30, X21, [X31], #0x20
	0x031FF2EC RET
	0x031FF2F0 BL 0x1C16F28
	0x031FF2F4 BL 0x1C16F20
	0x031FF2F8 STR X30, [X31 - 0x10]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x11DE000
	005 Move W8, [X20+531]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xEF5000
	012 Move X0, [X0+1560]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+531], W8
	016 Move W8, [X19+64]
	017 Move W9, 16
	018 Subtract W20, W9, W8
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move W1, W20
	021 Call MD2Managed.Padding, X0, X1
	022 Move X8, [X19]
	023 Move X1, X0
	024 Move X0, X19
	025 Move W2, W31
	026 Move X9, [X8+568]
	027 Move X4, [X8+576]
	028 Move W3, W20
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move X8, [X19]
	031 Move X1, [X19+48]
	032 Move W3, 16
	033 Move X0, X19
	034 Move X9, [X8+568]
	035 Move X4, [X8+576]
	036 Move W2, W31
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X0, [X19+40]
	039 Compare X0, 0
	040 JumpIfEqual {67}
	041 Move X1, X31
	042 Call Array.Clone, X0
	043 Move X8, [X19]
	044 Move X20, X0
	045 Move X0, X19
	046 Move X9, [X8+600]
	047 Move X1, [X8+608]
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Compare X20, 0
	050 JumpIfEqual {62}
	051 Move X8, 0xEF5000
	052 Move X8, [X8+1560]
	053 Move X0, X20
	054 Move X19, [X8]
	055 Move X1, X19
	056 Call 0x1C17E00
	057 Compare X0, 0
	058 JumpIfNotEqual {63}
	059 Move X0, X20
	060 Move X1, X19
	061 Call 0x1C181E0
	062 Move X0, X31
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Return X0
	067 Call 0x1C17F20

Method: System.Void MD2Transform(System.Byte[] state, System.Byte[] checksum, System.Byte[] block, System.Int32 index)

Disassembly:
	0x031FEFA8 ORR W0, W8, W9, 0x0
	0x031FEFAC RET
	0x031FEFB0 EOR W8, W2, W1, 0x0
	0x031FEFB4 EOR W0, W8, W3, 0x0
	0x031FEFB8 RET
	0x031FEFBC SUB W8, W31, W2
	0x031FEFC0 RORV W0, W1, W8
	0x031FEFC4 RET
	0x031FEFC8 LDR W8, [X1]
	0x031FEFCC AND W9, W3, W2, 0x0
	0x031FEFD0 BIC W10, W4, W2, 0x0
	0x031FEFD4 ORR W9, W10, W9, 0x0
	0x031FEFD8 ADD W9, W9, W5
	0x031FEFDC ADD W8, W9, W8
	0x031FEFE0 SUB W9, W31, W6
	0x031FEFE4 RORV W8, W8, W9
	0x031FEFE8 STR W8, [X1]
	0x031FEFEC RET
	0x031FEFF0 LDR W8, [X1]
	0x031FEFF4 ORR W9, W4, W3, 0x0
	0x031FEFF8 AND W10, W4, W3, 0x0
	0x031FEFFC AND W9, W9, W2, 0x0
	0x031FF000 ORR W9, W9, W10, 0x0
	0x031FF004 MOVZ W11, 0x7999
	0x031FF008 ADD W9, W5, W9
	0x031FF00C MOVK W11, 0x5A820000
	0x031FF010 ADD W8, W9, W8
	0x031FF014 ADD W8, W8, W11
	0x031FF018 SUB W9, W31, W6
	0x031FF01C RORV W8, W8, W9
	0x031FF020 STR W8, [X1]
	0x031FF024 RET
	0x031FF028 LDR W8, [X1]
	0x031FF02C EOR W9, W3, W2, 0x0
	0x031FF030 EOR W9, W9, W4, 0x0
	0x031FF034 MOVZ W10, 0xEBA1
	0x031FF038 ADD W9, W5, W9
	0x031FF03C MOVK W10, 0x6ED90000
	0x031FF040 ADD W8, W9, W8
	0x031FF044 ADD W8, W8, W10
	0x031FF048 SUB W9, W31, W6
	0x031FF04C RORV W8, W8, W9
	0x031FF050 STR W8, [X1]
	0x031FF054 RET
	0x031FF058 STR X30, [X31 - 0x10]!
	0x031FF05C CBZ X1, 0x31FF11C
	0x031FF060 LDR W12, [X1 + 0x18]
	0x031FF064 UBFM X8, X12, 0x20, 0x1F
	0x031FF068 CMP X8, 0x1
	0x031FF06C B.LT 0x31FF110
	0x031FF070 MOV X8, X31
	0x031FF074 MOV W9, W3
	0x031FF078 SXTW X10, W12
	0x031FF07C ADD X11, X1, 0x20
	0x031FF080 UBFM X12, X12, 0x3E, 0x3D
	0x031FF084 CBZ X2, 0x31FF11C
	0x031FF088 LDR W14, [X2 + 0x18]
	0x031FF08C ADD X13, X9, X8
	0x031FF090 CMP W13, W14
	0x031FF094 B.CS 0x31FF118
	0x031FF098 ADD X15, X13, 0x1
	0x031FF09C CMP W15, W14
	0x031FF0A0 B.CS 0x31FF118
	0x031FF0A4 ADD X15, X15, 0x1
	0x031FF0A8 CMP W15, W14
	0x031FF0AC B.CS 0x31FF118
	0x031FF0B0 ADD W15, W15, 0x1
	0x031FF0B4 CMP W15, W14
	0x031FF0B8 B.CS 0x31FF118
	0x031FF0BC CMP X12, X8
	0x031FF0C0 B.EQ 0x31FF118
	0x031FF0C4 ADD X14, X9, X8
	0x031FF0C8 ADD X17, X14, 0x1
	0x031FF0CC ADD X13, X2, W13, SXTW
	0x031FF0D0 ADD X17, X2, W17, SXTW
	0x031FF0D4 ADD X15, X9, X8
	0x031FF0D8 ADD X16, X2, 0x20
	0x031FF0DC LDRB W13, [X13 + 0x20]
	0x031FF0E0 ADD X14, X14, 0x2
	0x031FF0E4 LDRB W17, [X17 + 0x20]
	0x031FF0E8 ADD X15, X15, 0x3
	0x031FF0EC LDRB W14, [X16, W14, SXTW]
	0x031FF0F0 LDRB W15, [X16, W15, SXTW]
	0x031FF0F4 BFM W13, W17, 0x18, 0x7
	0x031FF0F8 SUBS X10, X10, 0x1
	0x031FF0FC BFM W13, W14, 0x10, 0x7
	0x031FF100 BFM W13, W15, 0x8, 0x7
	0x031FF104 STR W13, [X11, X8, LSL]
	0x031FF108 ADD X8, X8, 0x4
	0x031FF10C B.NE 0x31FF084
	0x031FF110 LDR X30, [X31], #0x10
	0x031FF114 RET
	0x031FF118 BL 0x1C16F28
	0x031FF11C BL 0x1C16F20
	0x031FF120 STR X30, [X31 - 0x10]!
	0x031FF124 CBZ X0, 0x31FF1A8
	0x031FF128 CBZ X1, 0x31FF1A8
	0x031FF12C LDR W8, [X0 + 0x18]
	0x031FF130 LDR W9, [X1 + 0x18]
	0x031FF134 CMP W8, W9
	0x031FF138 B.NE 0x31FF18C
	0x031FF13C CMP W8, 0x1
	0x031FF140 B.LT 0x31FF194
	0x031FF144 MOV W10, W31
	0x031FF148 SUB W9, W31, W8
	0x031FF14C ADDS W31, W9, W10
	0x031FF150 B.EQ 0x31FF1A4
	0x031FF154 SXTW X10, W10
	0x031FF158 ADD X8, X0, X10
	0x031FF15C ADD X12, X1, X10
	0x031FF160 LDRB W11, [X8 + 0x20]
	0x031FF164 LDRB W12, [X12 + 0x20]
	0x031FF168 ADD W13, W9, W10
	0x031FF16C CMP W11, W12
	0x031FF170 CSET W8, EQ
	0x031FF174 ADDS W31, W13, 0x1
	0x031FF178 B.EQ 0x31FF198
	0x031FF17C CMP W11, W12
	0x031FF180 ADD W10, W10, 0x1
	0x031FF184 B.EQ 0x31FF14C
	0x031FF188 B 0x31FF198
	0x031FF18C MOV W8, W31
	0x031FF190 B 0x31FF198
	0x031FF194 MOVZ W8, 0x1
	0x031FF198 MOV W0, W8
	0x031FF19C LDR X30, [X31], #0x10
	0x031FF1A0 RET
	0x031FF1A4 BL 0x1C16F28
	0x031FF1A8 BL 0x1C16F20
	0x031FF1AC STR X30, [X31 - 0x30]!
	0x031FF1B0 STP X22, X21, [X31 + 0x10]
	0x031FF1B4 STP X20, X19, [X31 + 0x20]
	0x031FF1B8 ADRP X21, 0x11DD000
	0x031FF1BC ADRP X22, 0xEF4000
	0x031FF1C0 LDRB W8, [X21 + 0x21A]
	0x031FF1C4 LDR X22, [X22 + 0x618]
	0x031FF1C8 MOV W20, W1
	0x031FF1CC MOV X19, X0
	0x031FF1D0 TBNZ X8, 0x0, 0x31FF1E8
	0x031FF1D4 ADRP X0, 0xEF4000
	0x031FF1D8 LDR X0, [X0 + 0x618]
	0x031FF1DC BL 0x1C16CF4
	0x031FF1E0 MOVZ W8, 0x1
	0x031FF1E4 STRB W8, [X21 + 0x21A]
	0x031FF1E8 LDR X0, [X22]
	0x031FF1EC MOV W1, W20
	0x031FF1F0 BL 0x1C16D6C
	0x031FF1F4 CBZ X0, 0x31FF234
	0x031FF1F8 CBZ X19, 0x31FF234
	0x031FF1FC LDR W8, [X0 + 0x18]
	0x031FF200 LDR W4, [X19 + 0x18]
	0x031FF204 MOV X20, X0
	0x031FF208 MOV X0, X19

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X24, 0x11DF000
	014 Move W8, [X24+532]
	015 Move W23, W4
	016 Move X19, X3
	017 Move X20, X2
	018 Move X21, X1
	019 Move X22, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xF24000
	025 Move X0, [X0+1040]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X24+532], W8
	029 Move X2, [X22+72]
	030 Move W4, 16
	031 Move X0, X21
	032 Move W1, W31
	033 Move W3, W31
	034 Move X5, X31
	035 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	036 Move X2, [X22+72]
	037 Move W3, 16
	038 Move W4, 16
	039 Move X0, X19
	040 Move W1, W23
	041 Move X5, X31
	042 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	043 Compare X21, 0
	044 JumpIfEqual {167}
	045 Move X24, 0xF23000
	046 Move X24, [X24+1040]
	047 Move X8, X31
	048 Move W23, W23
	049 Add X9, X21, 32
	050 Move W10, [X21+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Compare X19, 0
	053 JumpIfEqual {167}
	054 Move W11, [X19+24]
	055 Add X10, X23, X8
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X11, [X22+72]
	058 Compare X11, 0
	059 JumpIfEqual {167}
	060 Move W13, [X11+24]
	061 Add X12, X8, 32
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Add X10, X19, W10
	064 Move W13, [X9]
	065 Move W10, [X10+32]
	066 Add X11, X11, X8
	067 Subtract X8, X12, 31
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Xor W10, W10, W13
	070 Move [X11+64], W10
	071 Move W26, W31
	072 Move W25, W31
	073 Move X27, X31
	074 Move X8, [X22+72]
	075 Compare X8, 0
	076 JumpIfEqual {167}
	077 Move W9, [X8+24]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X0, [X24]
	080 Add X28, X8, X27
	081 Move W29, [X28+32]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {87}
	085 Call 0x1C17DFC
	086 Move X0, [X24]
	087 Move X8, [X0+184]
	088 Move X8, [X8]
	089 Compare X8, 0
	090 JumpIfEqual {167}
	091 Move W9, [X8+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Add X8, X8, W26
	094 Move W8, [X8+32]
	095 Add X27, X27, 1
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Xor W8, W8, W29
	098 And W26, W8, 255
	099 Move [X28+32], W8
	100 Add W8, W25, W26
	101 Add W25, W25, 1
	102 NotImplemented "Instruction CMP not yet implemented."
	103 And W26, W8, 255
	104 Move X0, [X22+72]
	105 Move W4, 16
	106 Move W1, W31
	107 Move X2, X21
	108 Move W3, W31
	109 Move X5, X31
	110 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	111 Compare X20, 0
	112 JumpIfEqual {167}
	113 Move X8, [X20+24]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 And X8, X8, 0
	116 Compare X8, 0
	117 JumpIfEqual {153}
	118 Move W27, [X20+47]
	119 Move X21, X31
	120 Add X22, X20, 32
	121 Move X25, X23
	122 ShiftRight X25, 32
	123 And X25, X25, 0x7FFFFFFF
	124 Move X26, 1
	125 Move X0, [X24]
	126 Move W28, [X22]
	127 Move W8, [X0+224]
	128 Compare W8, 0
	129 JumpIfNotEqual {132}
	130 Call 0x1C17DFC
	131 Move X0, [X24]
	132 Move W8, [X19+24]
	133 Add X9, X23, X21
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move X8, [X0+184]
	136 Move X8, [X8]
	137 Compare X8, 0
	138 JumpIfEqual {167}
	139 Add X9, X19, X25
	140 Move W9, [X9+32]
	141 Move W10, [X8+24]
	142 Xor W9, W9, W27
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Add X8, X8, W9
	145 Move W8, [X8+32]
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Xor W27, W8, W28
	148 Move [X22], W27
	149 Move W8, [X20+24]
	150 Add X21, X21, 1
	151 Add X25, X25, X26
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Call 0x1C17F28
	154 Move X20, [X31+80]
	155 Move X19, [X31+88]
	156 Move X22, [X31+64]
	157 Move X21, [X31+72]
	158 Move X24, [X31+48]
	159 Move X23, [X31+56]
	160 Move X26, [X31+32]
	161 Move X25, [X31+40]
	162 Move X28, [X31+16]
	163 Move X27, [X31+24]
	164 Move X29, [X31+96]
	165 Move X30, [X31+104]
	166 Return 
	167 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x031FF2FC CBZ X0, 0x31FF310
	0x031FF300 LDR X8, [X0]
	0x031FF304 LDP X3, X2, [X8 + 0x1D8]
	0x031FF308 LDR X30, [X31], #0x10
	0x031FF30C BR X3
	0x031FF310 BL 0x1C16F20
	0x031FF314 STP X30, X25, [X31 - 0x40]!
	0x031FF318 STP X24, X23, [X31 + 0x10]
	0x031FF31C STP X22, X21, [X31 + 0x20]
	0x031FF320 STP X20, X19, [X31 + 0x30]
	0x031FF324 ADRP X24, 0x11DD000
	0x031FF328 LDRB W8, [X24 + 0x21C]
	0x031FF32C MOV W21, W4
	0x031FF330 MOV X23, X3
	0x031FF334 MOV X19, X2
	0x031FF338 MOV X22, X1
	0x031FF33C MOV X20, X0
	0x031FF340 TBNZ X8, 0x0, 0x31FF364
	0x031FF344 ADRP X0, 0xEF4000
	0x031FF348 LDR X0, [X0 + 0x618]
	0x031FF34C BL 0x1C16CF4
	0x031FF350 ADRP X0, 0xF21000
	0x031FF354 LDR X0, [X0 + 0xF88]
	0x031FF358 BL 0x1C16CF4
	0x031FF35C MOVZ W8, 0x1
	0x031FF360 STRB W8, [X24 + 0x21C]
	0x031FF364 CBZ X20, 0x31FF4E8
	0x031FF368 LDR X8, [X20]
	0x031FF36C ADRP X25, 0xF21000
	0x031FF370 MOV X0, X20
	0x031FF374 LDP X9, X1, [X8 + 0x198]
	0x031FF378 LDR X25, [X25 + 0xF88]
	0x031FF37C BLR X9
	0x031FF380 LDR X8, [X25]
	0x031FF384 SBFM W24, W0, 0x3, 0x1F
	0x031FF388 LDR W9, [X8 + 0xE0]
	0x031FF38C CBNZ W9, 0x31FF398

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x11DE000
	007 Move X22, 0xEF5000
	008 Move X19, 0xF23000
	009 Move X20, 0xF23000
	010 Move W8, [X21+533]
	011 Move X22, [X22+1560]
	012 Move X19, [X19+1048]
	013 Move X20, [X20+1040]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xEF5000
	019 Move X0, [X0+1560]
	020 Call 0x1C17CF4
	021 Move X0, 0xF23000
	022 Move X0, [X0+1040]
	023 Call 0x1C17CF4
	024 Move X0, 0xF23000
	025 Move X0, [X0+1048]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+533], W8
	029 Move X0, [X22]
	030 Move W1, 256
	031 Call 0x1C17D6C
	032 Move X1, [X19]
	033 Move X2, X31
	034 Move X19, X0
	035 Call RuntimeHelpers.InitializeArray, X0, X1
	036 Move X8, [X20]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X8, [X8+184]
	040 Move [X8], X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+48]
	044 Return 

