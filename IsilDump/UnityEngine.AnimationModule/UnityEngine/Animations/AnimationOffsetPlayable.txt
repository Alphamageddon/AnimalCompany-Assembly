Type: UnityEngine.Animations.AnimationOffsetPlayable

Method: System.Void .ctor(UnityEngine.Playables.PlayableHandle handle)

Disassembly:
	0x03BF845C LDR W8, [X19]
	0x03BF8460 CBZ W8, 0x3BF84D8
	0x03BF8464 LDR W9, [X19 + 0x4]
	0x03BF8468 ADDS W31, W9, 0x1
	0x03BF846C B.EQ 0x3BF84D8
	0x03BF8470 LDR W9, [X20]
	0x03BF8474 CMP W8, W9
	0x03BF8478 B.NE 0x3BF8488
	0x03BF847C LDR W8, [X19 + 0x8]
	0x03BF8480 ADDS W31, W8, 0x1
	0x03BF8484 B.NE 0x3BF84C0
	0x03BF8488 ADRP X21, 0x7EB000
	0x03BF848C LDR X8, [X21 + 0x900]
	0x03BF8490 CBNZ X8, 0x3BF84A8
	0x03BF8494 ADRP X0, 0xFFFFFFFFFCEFC000
	0x03BF8498 ADD X0, X0, 0xE23
	0x03BF849C BL 0x1C16CB8
	0x03BF84A0 MOV X8, X0
	0x03BF84A4 STR X0, [X21 + 0x900]
	0x03BF84A8 MOV X0, X19
	0x03BF84AC MOV X1, X20
	0x03BF84B0 BLR X8
	0x03BF84B4 LDR W8, [X19 + 0x4]
	0x03BF84B8 ADDS W31, W8, 0x1
	0x03BF84BC B.EQ 0x3BF84CC
	0x03BF84C0 LDR W8, [X19 + 0x8]
	0x03BF84C4 ADDS W31, W8, 0x1
	0x03BF84C8 B.EQ 0x3BF84F8
	0x03BF84CC LDP X20, X19, [X31 + 0x10]
	0x03BF84D0 LDP X30, X21, [X31], #0x20
	0x03BF84D4 RET
	0x03BF84D8 ADRP X0, 0x4FB000
	0x03BF84DC LDR X0, [X0 + 0x5B0]
	0x03BF84E0 BL 0x1C16D08
	0x03BF84E4 BL 0x1C16F10
	0x03BF84E8 MOV X19, X0
	0x03BF84EC ADRP X0, 0x566000
	0x03BF84F0 LDR X0, [X0 + 0x8B8]
	0x03BF84F4 B 0x3BF8514
	0x03BF84F8 ADRP X0, 0x4FB000
	0x03BF84FC LDR X0, [X0 + 0x5B0]
	0x03BF8500 BL 0x1C16D08
	0x03BF8504 BL 0x1C16F10
	0x03BF8508 MOV X19, X0
	0x03BF850C ADRP X0, 0x566000
	0x03BF8510 LDR X0, [X0 + 0x8C0]
	0x03BF8514 BL 0x1C16D08
	0x03BF8518 MOV X1, X0
	0x03BF851C MOV X0, X19
	0x03BF8520 MOV X2, X31
	0x03BF8524 BL 0x337DF1C
	0x03BF8528 ADRP X0, 0x566000
	0x03BF852C LDR X0, [X0 + 0x8C8]
	0x03BF8530 BL 0x1C16D08
	0x03BF8534 MOV X1, X0
	0x03BF8538 MOV X0, X19
	0x03BF853C BL 0x1C16DEC
	0x03BF8540 B 0x3BF8544
	0x03BF8544 STR X30, [X31 - 0x20]!
	0x03BF8548 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7EC000
	007 Move [X31], X1
	008 Move [X31+8], X2
	009 Move X20, 0x525000
	010 Move W8, [X21+2239]
	011 Move X20, [X20+560]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x567000
	018 Move X0, [X0+2072]
	019 Call 0x1C17CF4
	020 Move X0, 0x525000
	021 Move X0, [X0+560]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2239], W8
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Add X0, X31, 0
	031 Move X1, X31
	032 Call PlayableHandle.IsValid, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {51}
	037 Move X0, [X20]
	038 Move X20, 0x567000
	039 Move W8, [X0+224]
	040 Move X20, [X20+2072]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X1, [X20]
	045 Add X0, X31, 0
	046 Call PlayableHandle.IsPlayableOfType, X0
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {59}
	051 Move V0, [X31]
	052 Move X30, [X31+16]
	053 Move X21, [X31+24]
	054 Move [X19], V0
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Add X31, X31, 48
	058 Return 
	059 Move X0, 0x504000
	060 Move X0, [X0+3080]
	061 Call 0x1C17D08
	062 Call 0x1C17F10
	063 Move X19, X0
	064 Move X0, 0x567000
	065 Move X0, [X0+2080]
	066 Call 0x1C17D08
	067 Move X1, X0
	068 Move X0, X19
	069 Move X2, X31
	070 Call InvalidCastException..ctor, X0, X1
	071 Move X0, 0x567000
	072 Move X0, [X0+2088]
	073 Call 0x1C17D08
	074 Move X1, X0
	075 Move X0, X19
	076 Call 0x1C17DEC

Method: UnityEngine.Playables.PlayableHandle GetHandle()

Disassembly:
	0x03BF854C MOV X19, X0
	0x03BF8550 MOV X0, X1
	0x03BF8554 MOV X20, X1

ISIL:
	001 Move X8, [X0]
	002 Move X1, [X0+8]
	003 Move X0, X8
	004 Return X0

Method: System.Boolean Equals(UnityEngine.Animations.AnimationOffsetPlayable other)

Disassembly:
	0x03BF8558 BL 0x3BF81DC
	0x03BF855C TBZ X0, 0x0, 0x3BF8590
	0x03BF8560 LDR W8, [X19]
	0x03BF8564 CBZ W8, 0x3BF8590
	0x03BF8568 LDR W9, [X19 + 0x4]
	0x03BF856C ADDS W31, W9, 0x1
	0x03BF8570 B.EQ 0x3BF8590
	0x03BF8574 LDR W9, [X20]
	0x03BF8578 CMP W8, W9
	0x03BF857C B.NE 0x3BF8590
	0x03BF8580 LDR W8, [X19 + 0x8]
	0x03BF8584 ADDS W31, W8, 0x1
	0x03BF8588 CSET W0, NE
	0x03BF858C B 0x3BF8594
	0x03BF8590 MOV W0, W31
	0x03BF8594 LDP X20, X19, [X31 + 0x10]
	0x03BF8598 LDR X30, [X31], #0x20
	0x03BF859C RET
	0x03BF85A0 STP X30, X21, [X31 - 0x20]!
	0x03BF85A4 STP X20, X19, [X31 + 0x10]
	0x03BF85A8 ADRP X21, 0x7EB000
	0x03BF85AC LDR X2, [X21 + 0x900]
	0x03BF85B0 MOV X19, X1
	0x03BF85B4 MOV X20, X0
	0x03BF85B8 CBNZ X2, 0x3BF85D0
	0x03BF85BC ADRP X0, 0xFFFFFFFFFCEFC000
	0x03BF85C0 ADD X0, X0, 0xE23
	0x03BF85C4 BL 0x1C16CB8
	0x03BF85C8 MOV X2, X0
	0x03BF85CC STR X0, [X21 + 0x900]
	0x03BF85D0 MOV X0, X20
	0x03BF85D4 MOV X1, X19
	0x03BF85D8 LDP X20, X19, [X31 + 0x10]
	0x03BF85DC LDP X30, X21, [X31], #0x20
	0x03BF85E0 BR X2
	0x03BF85E4 STR X30, [X31 - 0x20]!
	0x03BF85E8 STP X20, X19, [X31 + 0x10]
	0x03BF85EC MOV X19, X1
	0x03BF85F0 MOV X20, X0
	0x03BF85F4 BL 0x3BF8434
	0x03BF85F8 MOV X0, X20
	0x03BF85FC MOV X1, X19
	0x03BF8600 LDP X20, X19, [X31 + 0x10]
	0x03BF8604 LDR X30, [X31], #0x20
	0x03BF8608 B 0x3BF860C

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+56], X23
	004 Move [X31+64], X22
	005 Move [X31+72], X21
	006 Move [X31+80], X20
	007 Move [X31+88], X19
	008 Move X23, 0x7EC000
	009 Move X22, 0x567000
	010 Move W8, [X23+2240]
	011 Move X22, [X22+2096]
	012 Move X20, X2
	013 Move X21, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x567000
	020 Move X0, [X0+2096]
	021 Call 0x1C17CF4
	022 Move X0, 0x525000
	023 Move X0, [X0+560]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+2240], W8
	027 Move X0, [X22]
	028 Move X23, 0x525000
	029 Move W8, [X0+224]
	030 Move X23, [X23+560]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, [X23]
	035 Add X1, X31, 32
	036 Move [X31+32], X21
	037 Move [X31+40], X20
	038 Call 0x1C17E04
	039 Move X8, [X22]
	040 Move TEMP, 0
	041 Not TEMP
	042 Move X9, TEMP
	043 Move X1, X0
	044 Add X0, X31, 0
	045 Move [X31], X8
	046 Move [X31+8], X9
	047 Move V0, [X19]
	048 Move X2, X31
	049 Move [X31+1], V0
	050 Call ValueType.Equals, X0, X1
	051 Move X20, [X31+80]
	052 Move X19, [X31+88]
	053 Move X22, [X31+64]
	054 Move X21, [X31+72]
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 And W0, W0, 1
	058 Add X31, X31, 96
	059 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03BF860C SUB X31, X31, 0x30
	0x03BF8610 STP X30, X21, [X31 + 0x10]
	0x03BF8614 STP X20, X19, [X31 + 0x20]
	0x03BF8618 ADRP X21, 0x7EB000
	0x03BF861C LDR X8, [X21 + 0x908]
	0x03BF8620 MOV X19, X1
	0x03BF8624 MOV X20, X0
	0x03BF8628 STR W31, [X31 + 0x8]
	0x03BF862C STR X31, [X31]
	0x03BF8630 CBNZ X8, 0x3BF8648
	0x03BF8634 ADRP X0, 0xFFFFFFFFFCF06000
	0x03BF8638 ADD X0, X0, 0x87F
	0x03BF863C BL 0x1C16CB8
	0x03BF8640 MOV X8, X0
	0x03BF8644 STR X0, [X21 + 0x908]
	0x03BF8648 ADD X2, X31, 0x0
	0x03BF864C MOV X0, X20
	0x03BF8650 MOV X1, X19
	0x03BF8654 BLR X8
	0x03BF8658 LDP S0, S1, [X31]
	0x03BF865C LDR V2, [X31 + 0x8]
	0x03BF8660 LDP X20, X19, [X31 + 0x20]
	0x03BF8664 LDP X30, X21, [X31 + 0x10]
	0x03BF8668 ADD X31, X31, 0x30
	0x03BF866C RET
	0x03BF8670 STR D10, [X31 - 0x30]!
	0x03BF8674 STP D9, D8, [X31 + 0x8]
	0x03BF8678 STR X30, [X31 + 0x18]
	0x03BF867C STP X20, X19, [X31 + 0x20]
	0x03BF8680 MOV V8.16B, V2.16B
	0x03BF8684 MOV V9.16B, V1.16B
	0x03BF8688 MOV V10.16B, V0.16B
	0x03BF868C MOV X19, X1
	0x03BF8690 MOV X20, X0
	0x03BF8694 BL 0x3BF8434
	0x03BF8698 MOV X0, X20
	0x03BF869C MOV X1, X19
	0x03BF86A0 MOV V1.16B, V9.16B
	0x03BF86A4 MOV V2.16B, V8.16B

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x7EC000
	006 Move X19, 0x525000
	007 Move W8, [X20+2241]
	008 Move X19, [X19+560]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x567000
	014 Move X0, [X0+2096]
	015 Call 0x1C17CF4
	016 Move X0, 0x525000
	017 Move X0, [X0+560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+2241], W8
	021 Move X0, [X19]
	022 Move X19, 0x567000
	023 Move W8, [X0+224]
	024 Move X19, [X19+2096]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X31
	029 Call PlayableHandle.get_Null
	030 Move X2, X0
	031 Move X3, X1
	032 Add X0, X31, 0
	033 Move X1, X2
	034 Move X2, X3
	035 Move [X31], X31
	036 Move [X31+8], X31
	037 Call AnimationOffsetPlayable..ctor, X0, X1
	038 Move X8, [X19]
	039 Move V0, [X31]
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+16]
	043 Move X8, [X8+184]
	044 Move [X8], V0
	045 Add X31, X31, 48
	046 Return 

