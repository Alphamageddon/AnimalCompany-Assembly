Type: Unity.Mathematics.RigidTransform

Method: System.Void .ctor(Unity.Mathematics.quaternion rotation, Unity.Mathematics.float3 translation)

Disassembly:
	0x038CC998 FMUL S1, S16, S1
	0x038CC99C FMUL S2, S17, S2
	0x038CC9A0 FMUL S0, S7, S0
	0x038CC9A4 FMUL S16, S11, S7
	0x038CC9A8 FSUB S0, S3, S0

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], S2
	004 Move [X0+16], S3
	005 Move [X0+16], S4
	006 Move [X0+24], S5
	007 Move [X0+24], S6
	008 Return 

Method: System.Void .ctor(Unity.Mathematics.float3x3 rotation, Unity.Mathematics.float3 translation)

Disassembly:
	0x038CC9AC FADD S1, S1, S4
	0x038CC9B0 FSUB S2, S5, S2
	0x038CC9B4 B 0x38CCC14
	0x038CC9B8 ADRP X8, 0x87F000
	0x038CC9BC LDR X8, [X8 + 0xD8]
	0x038CC9C0 LDR X8, [X8]
	0x038CC9C4 LDR X8, [X8 + 0xB8]
	0x038CC9C8 LDUR V0, [X8 + 0xC]
	0x038CC9CC LDR V1, [X8]
	0x038CC9D0 STUR V0, [X19 + 0xC]
	0x038CC9D4 STR V1, [X19]
	0x038CC9D8 B 0x38CCDB8
	0x038CC9DC ADRP X20, 0xB15000
	0x038CC9E0 LDRB W8, [X20 + 0x6CA]
	0x038CC9E4 CBNZ W8, 0x38CC9FC
	0x038CC9E8 ADRP X0, 0x852000
	0x038CC9EC LDR X0, [X0 + 0x838]
	0x038CC9F0 BL 0x1C16CF4
	0x038CC9F4 MOVZ W8, 0x1
	0x038CC9F8 STRB W8, [X20 + 0x6CA]
	0x038CC9FC FMOV S0, 0.5
	0x038CCA00 FMUL S10, S10, S0
	0x038CCA04 FMUL S9, S9, S0
	0x038CCA08 FMUL S8, S8, S0
	0x038CCA0C MOV V0.16B, V10.16B
	0x038CCA10 MOV V1.16B, V9.16B

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], D10
	003 Move [X31+80], D9
	004 Move [X31+88], D8
	005 Move [X31+96], X30
	006 Move [X31+104], X19
	007 Move V9, V1
	008 Move V10, V0
	009 Move W8, [X1+32]
	010 Move V1, [X1]
	011 Move V0, [X1+16]
	012 Move X19, X0
	013 Add X0, X31, 48
	014 Add X1, X31, 0
	015 Move X2, X31
	016 Move V8, V2
	017 Move [X31+32], W8
	018 Move [X31], V1
	019 Move [X31+8], V0
	020 Move [X31+48], X31
	021 Move [X31+56], X31
	022 Call quaternion..ctor, X0, X1
	023 Move V0, [X31+3]
	024 Move [X19+16], S10
	025 Move [X19+24], S9
	026 Move [X19+24], S8
	027 Move D9, [X31+80]
	028 Move D8, [X31+88]
	029 Move [X19], V0
	030 Move X30, [X31+96]
	031 Move X19, [X31+104]
	032 Move V10, [X31+64]
	033 Add X31, X31, 112
	034 Return 

Method: System.Void .ctor(Unity.Mathematics.float4x4 transform)

Disassembly:
	0x038CCA14 MOV V2.16B, V8.16B
	0x038CCA18 MOV X0, X31
	0x038CCA1C BL 0x384BD60
	0x038CCA20 MOV V11.16B, V0.16B
	0x038CCA24 MOV V12.16B, V1.16B
	0x038CCA28 MOV V13.16B, V2.16B
	0x038CCA2C MOV V0.16B, V10.16B
	0x038CCA30 MOV V1.16B, V9.16B
	0x038CCA34 MOV V2.16B, V8.16B
	0x038CCA38 MOV X0, X31
	0x038CCA3C BL 0x384BE4C
	0x038CCA40 ADRP X8, 0x852000
	0x038CCA44 LDR X8, [X8 + 0x838]
	0x038CCA48 FMUL S3, S11, S1
	0x038CCA4C FMUL S4, S12, S0
	0x038CCA50 FMUL S5, S13, S0
	0x038CCA54 LDR X8, [X8]
	0x038CCA58 FMUL S6, S0, S1
	0x038CCA5C FMUL S7, S12, S13
	0x038CCA60 FMUL S16, S11, S13
	0x038CCA64 LDR X8, [X8 + 0xB8]
	0x038CCA68 FMUL S17, S12, S11
	0x038CCA6C FMUL S3, S2, S3
	0x038CCA70 FMUL S4, S2, S4

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+72], X31
	003 Move [X31+80], X30
	004 Move [X31+96], X20
	005 Move [X31+104], X19
	006 Move V1, [X1+32]
	007 Move V0, [X1+48]
	008 Move V3, [X1]
	009 Move V2, [X1+16]
	010 Move X19, X1
	011 Move X20, X0
	012 Add X0, X31, 64
	013 Add X1, X31, 0
	014 Move X2, X31
	015 Move [X31+32], V1
	016 Move [X31+40], V0
	017 Move [X31], V3
	018 Move [X31+8], V2
	019 Move [X31+64], X31
	020 Call quaternion..ctor, X0, X1
	021 Move V0, [X31+4]
	022 Move X30, [X31+80]
	023 Move [X20], V0
	024 Move V0, [X19+48]
	025 Move V1, [X19+56]
	026 Move [X20+16], D0
	027 Move [X20+24], S1
	028 Move X20, [X31+96]
	029 Move X19, [X31+104]
	030 Add X31, X31, 112
	031 Return 

Method: Unity.Mathematics.RigidTransform AxisAngle(Unity.Mathematics.float3 axis, System.Single angle)

Disassembly:
	0x038CCA74 FMUL S5, S1, S5
	0x038CCA78 FMUL S6, S2, S6
	0x038CCA7C FMUL S0, S7, S0
	0x038CCA80 FMUL S1, S16, S1
	0x038CCA84 FMUL S2, S17, S2
	0x038CCA88 FMUL S7, S11, S7
	0x038CCA8C FADD S0, S0, S3
	0x038CCA90 FADD S1, S1, S4
	0x038CCA94 FSUB S2, S5, S2
	0x038CCA98 B 0x38CCD9C
	0x038CCA9C ADRP X20, 0xB15000
	0x038CCAA0 LDRB W8, [X20 + 0x6CB]
	0x038CCAA4 CBNZ W8, 0x38CCABC
	0x038CCAA8 ADRP X0, 0x852000
	0x038CCAAC LDR X0, [X0 + 0x838]
	0x038CCAB0 BL 0x1C16CF4
	0x038CCAB4 MOVZ W8, 0x1
	0x038CCAB8 STRB W8, [X20 + 0x6CB]
	0x038CCABC FMOV S0, 0.5
	0x038CCAC0 FMUL S10, S10, S0
	0x038CCAC4 FMUL S9, S9, S0
	0x038CCAC8 FMUL S8, S8, S0
	0x038CCACC MOV V0.16B, V10.16B
	0x038CCAD0 MOV V1.16B, V9.16B
	0x038CCAD4 MOV V2.16B, V8.16B
	0x038CCAD8 MOV X0, X31
	0x038CCADC BL 0x384BD60
	0x038CCAE0 MOV V11.16B, V0.16B
	0x038CCAE4 MOV V12.16B, V1.16B
	0x038CCAE8 MOV V13.16B, V2.16B
	0x038CCAEC MOV V0.16B, V10.16B
	0x038CCAF0 MOV V1.16B, V9.16B
	0x038CCAF4 MOV V2.16B, V8.16B
	0x038CCAF8 MOV X0, X31
	0x038CCAFC BL 0x384BE4C
	0x038CCB00 ADRP X8, 0x852000
	0x038CCB04 LDR X8, [X8 + 0x838]
	0x038CCB08 FMUL S3, S11, S1
	0x038CCB0C FMUL S4, S12, S0
	0x038CCB10 FMUL S5, S13, S0
	0x038CCB14 LDR X8, [X8]
	0x038CCB18 FMUL S7, S12, S13
	0x038CCB1C FMUL S16, S11, S13
	0x038CCB20 FMUL S6, S0, S1
	0x038CCB24 LDR X8, [X8 + 0xB8]
	0x038CCB28 FMUL S17, S11, S12
	0x038CCB2C FMUL S3, S2, S3
	0x038CCB30 FMUL S4, S2, S4
	0x038CCB34 FMUL S5, S1, S5
	0x038CCB38 FMUL S1, S16, S1
	0x038CCB3C FMUL S0, S7, S0
	0x038CCB40 FMUL S6, S2, S6
	0x038CCB44 FMUL S2, S17, S2
	0x038CCB48 FMUL S7, S11, S7
	0x038CCB4C FSUB S0, S3, S0
	0x038CCB50 FADD S1, S1, S4
	0x038CCB54 B 0x38CCD98
	0x038CCB58 ADRP X20, 0xB15000
	0x038CCB5C LDRB W8, [X20 + 0x6CC]
	0x038CCB60 CBNZ W8, 0x38CCB78
	0x038CCB64 ADRP X0, 0x852000
	0x038CCB68 LDR X0, [X0 + 0x838]
	0x038CCB6C BL 0x1C16CF4
	0x038CCB70 MOVZ W8, 0x1
	0x038CCB74 STRB W8, [X20 + 0x6CC]
	0x038CCB78 FMOV S0, 0.5
	0x038CCB7C FMUL S10, S10, S0
	0x038CCB80 FMUL S9, S9, S0
	0x038CCB84 FMUL S8, S8, S0
	0x038CCB88 MOV V0.16B, V10.16B
	0x038CCB8C MOV V1.16B, V9.16B
	0x038CCB90 MOV V2.16B, V8.16B
	0x038CCB94 MOV X0, X31

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xB16000
	011 Move W9, [X20+1698]
	012 Move V11, V3
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Move X19, X8
	017 Move TEMP, X9
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x853000
	022 Move X0, [X0+2104]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+1698], W8
	026 Move X20, 0xB16000
	027 Move W8, [X20+1386]
	028 Move S12, 0.5
	029 Compare W8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, 0x828000
	032 Move X0, [X0+1448]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+1386], W8
	036 Move X20, 0x828000
	037 Move X20, [X20+1448]
	038 Multiply S11, S11, S12
	039 Move X0, [X20]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 NotImplemented "Instruction FCVT not yet implemented."
	045 Move V0, V11
	046 Call 0x3EB2C30
	047 Move X21, 0xB16000
	048 Move W8, [X21+1380]
	049 Move V12, V0
	050 Compare W8, 0
	051 JumpIfNotEqual {57}
	052 Move X0, 0x828000
	053 Move X0, [X0+1448]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X21+1380], W8
	057 Move X0, [X20]
	058 Move X20, 0x853000
	059 NotImplemented "Instruction INVALID not yet implemented."
	060 Move W8, [X0+224]
	061 Move X20, [X20+2104]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Move V0, V11
	066 Call 0x3EB2BF0
	067 Move X8, [X20]
	068 NotImplemented "Instruction INVALID not yet implemented."
	069 Multiply S1, S10, S12
	070 Multiply S2, S9, S12
	071 Move X8, [X8+184]
	072 Multiply S3, S8, S12
	073 Move X30, [X31+48]
	074 Move X21, [X31+56]
	075 Move D9, [X31+32]
	076 Move D8, [X31+40]
	077 Move V4, [X8]
	078 Move V5, [X8+8]
	079 Move [X19], S1
	080 Move [X19+8], S2
	081 Move [X19+8], S3
	082 Move [X19+16], S0
	083 Move [X19+16], D4
	084 Move [X19+24], S5
	085 Move X20, [X31+64]
	086 Move X19, [X31+72]
	087 Move D11, [X31+16]
	088 Move D10, [X31+24]
	089 Move V12, [X31+80]
	090 Return X0

Method: Unity.Mathematics.RigidTransform EulerXYZ(Unity.Mathematics.float3 xyz)

Disassembly:
	0x038CCB98 BL 0x384BD60
	0x038CCB9C MOV V11.16B, V0.16B
	0x038CCBA0 MOV V12.16B, V1.16B
	0x038CCBA4 MOV V13.16B, V2.16B
	0x038CCBA8 MOV V0.16B, V10.16B
	0x038CCBAC MOV V1.16B, V9.16B
	0x038CCBB0 MOV V2.16B, V8.16B
	0x038CCBB4 MOV X0, X31
	0x038CCBB8 BL 0x384BE4C
	0x038CCBBC ADRP X8, 0x852000
	0x038CCBC0 LDR X8, [X8 + 0x838]
	0x038CCBC4 FMUL S3, S11, S1
	0x038CCBC8 FMUL S4, S12, S0
	0x038CCBCC FMUL S5, S13, S0
	0x038CCBD0 LDR X8, [X8]
	0x038CCBD4 FMUL S6, S0, S1
	0x038CCBD8 FMUL S7, S12, S13
	0x038CCBDC FMUL S16, S11, S12
	0x038CCBE0 LDR X8, [X8 + 0xB8]
	0x038CCBE4 FMUL S17, S13, S11
	0x038CCBE8 FMUL S3, S2, S3
	0x038CCBEC FMUL S4, S2, S4
	0x038CCBF0 FMUL S5, S1, S5
	0x038CCBF4 FMUL S6, S2, S6
	0x038CCBF8 FMUL S2, S16, S2
	0x038CCBFC FMUL S1, S17, S1
	0x038CCC00 FMUL S0, S7, S0
	0x038CCC04 FMUL S16, S11, S7
	0x038CCC08 FSUB S0, S3, S0
	0x038CCC0C FSUB S1, S4, S1
	0x038CCC10 FADD S2, S2, S5
	0x038CCC14 FADD S3, S16, S6
	0x038CCC18 B 0x38CCDA0
	0x038CCC1C ADRP X20, 0xB15000
	0x038CCC20 LDRB W8, [X20 + 0x6CD]
	0x038CCC24 CBNZ W8, 0x38CCC3C
	0x038CCC28 ADRP X0, 0x852000
	0x038CCC2C LDR X0, [X0 + 0x838]
	0x038CCC30 BL 0x1C16CF4
	0x038CCC34 MOVZ W8, 0x1
	0x038CCC38 STRB W8, [X20 + 0x6CD]
	0x038CCC3C FMOV S0, 0.5
	0x038CCC40 FMUL S10, S10, S0
	0x038CCC44 FMUL S9, S9, S0
	0x038CCC48 FMUL S8, S8, S0
	0x038CCC4C MOV V0.16B, V10.16B
	0x038CCC50 MOV V1.16B, V9.16B
	0x038CCC54 MOV V2.16B, V8.16B
	0x038CCC58 MOV X0, X31
	0x038CCC5C BL 0x384BD60
	0x038CCC60 MOV V11.16B, V0.16B
	0x038CCC64 MOV V12.16B, V1.16B
	0x038CCC68 MOV V13.16B, V2.16B
	0x038CCC6C MOV V0.16B, V10.16B
	0x038CCC70 MOV V1.16B, V9.16B
	0x038CCC74 MOV V2.16B, V8.16B
	0x038CCC78 MOV X0, X31
	0x038CCC7C BL 0x384BE4C
	0x038CCC80 ADRP X8, 0x852000
	0x038CCC84 LDR X8, [X8 + 0x838]
	0x038CCC88 FMUL S3, S11, S1
	0x038CCC8C FMUL S4, S12, S0
	0x038CCC90 FMUL S5, S13, S0
	0x038CCC94 LDR X8, [X8]
	0x038CCC98 FMUL S6, S0, S1
	0x038CCC9C FMUL S7, S12, S13
	0x038CCCA0 FMUL S16, S13, S11
	0x038CCCA4 LDR X8, [X8 + 0xB8]
	0x038CCCA8 FMUL S17, S12, S11

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0xB16000
	012 Move X20, 0x853000
	013 Move X19, X8
	014 Move W8, [X21+1699]
	015 Move X20, [X20+2104]
	016 Move V8, V2
	017 Move V9, V1
	018 Move V10, V0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x853000
	024 Move X0, [X0+2104]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+1699], W8
	028 Move S0, 0.5
	029 Multiply S10, S10, S0
	030 Multiply S9, S9, S0
	031 Multiply S8, S8, S0
	032 Move V0, V10
	033 Move V1, V9
	034 Move V2, V8
	035 Move X0, X31
	036 Call 0x384CD60
	037 Move V11, V0
	038 Move V12, V1
	039 Move V13, V2
	040 Move V0, V10
	041 Move V1, V9
	042 Move V2, V8
	043 Move X0, X31
	044 Call 0x384CE4C
	045 Move X8, [X20]
	046 Multiply S3, S11, S1
	047 Multiply S4, S12, S0
	048 Multiply S5, S13, S0
	049 Move X8, [X8+184]
	050 Multiply S6, S0, S1
	051 Multiply S16, S11, S13
	052 Multiply S17, S12, S11
	053 Multiply S3, S2, S3
	054 Multiply S4, S2, S4
	055 Multiply S5, S1, S5
	056 Multiply S6, S2, S6
	057 Multiply S1, S16, S1
	058 Multiply S2, S17, S2
	059 Add S1, S1, S4
	060 Subtract S2, S5, S2
	061 Move V4, [X8]
	062 Move V5, [X8+8]
	063 Multiply S7, S12, S13
	064 Multiply S16, S11, S7
	065 Multiply S0, S7, S0
	066 Subtract S0, S3, S0
	067 Add S3, S16, S6
	068 Move [X19], S0
	069 Move [X19+8], S1
	070 Move [X19+8], S2
	071 Move [X19+16], S3
	072 Move [X19+16], D4
	073 Move [X19+24], S5
	074 Move X20, [X31+64]
	075 Move X19, [X31+72]
	076 Move X30, [X31+48]
	077 Move X21, [X31+56]
	078 Move D9, [X31+32]
	079 Move D8, [X31+40]
	080 Move D11, [X31+16]
	081 Move D10, [X31+24]
	082 Move D13, [X31+80]
	083 Move D12, [X31+88]
	084 Return X0

Method: Unity.Mathematics.RigidTransform EulerXZY(Unity.Mathematics.float3 xyz)

Disassembly:
	0x038CCCAC FMUL S3, S2, S3
	0x038CCCB0 FMUL S4, S2, S4
	0x038CCCB4 FMUL S5, S1, S5
	0x038CCCB8 FMUL S6, S2, S6
	0x038CCCBC FMUL S0, S7, S0
	0x038CCCC0 FMUL S7, S11, S7
	0x038CCCC4 FMUL S1, S16, S1
	0x038CCCC8 FMUL S2, S17, S2
	0x038CCCCC FADD S0, S0, S3
	0x038CCCD0 FSUB S1, S4, S1
	0x038CCCD4 FSUB S2, S5, S2
	0x038CCCD8 FADD S3, S7, S6
	0x038CCCDC B 0x38CCDA0
	0x038CCCE0 ADRP X20, 0xB15000
	0x038CCCE4 LDRB W8, [X20 + 0x6CE]
	0x038CCCE8 CBNZ W8, 0x38CCD00
	0x038CCCEC ADRP X0, 0x852000
	0x038CCCF0 LDR X0, [X0 + 0x838]
	0x038CCCF4 BL 0x1C16CF4
	0x038CCCF8 MOVZ W8, 0x1
	0x038CCCFC STRB W8, [X20 + 0x6CE]
	0x038CCD00 FMOV S0, 0.5
	0x038CCD04 FMUL S10, S10, S0
	0x038CCD08 FMUL S9, S9, S0
	0x038CCD0C FMUL S8, S8, S0
	0x038CCD10 MOV V0.16B, V10.16B
	0x038CCD14 MOV V1.16B, V9.16B
	0x038CCD18 MOV V2.16B, V8.16B
	0x038CCD1C MOV X0, X31
	0x038CCD20 BL 0x384BD60
	0x038CCD24 MOV V11.16B, V0.16B
	0x038CCD28 MOV V12.16B, V1.16B
	0x038CCD2C MOV V13.16B, V2.16B
	0x038CCD30 MOV V0.16B, V10.16B
	0x038CCD34 MOV V1.16B, V9.16B
	0x038CCD38 MOV V2.16B, V8.16B
	0x038CCD3C MOV X0, X31
	0x038CCD40 BL 0x384BE4C
	0x038CCD44 ADRP X8, 0x852000
	0x038CCD48 LDR X8, [X8 + 0x838]
	0x038CCD4C FMUL S3, S11, S1
	0x038CCD50 FMUL S4, S12, S0
	0x038CCD54 FMUL S5, S13, S0
	0x038CCD58 LDR X8, [X8]
	0x038CCD5C FMUL S7, S12, S13
	0x038CCD60 FMUL S17, S13, S11
	0x038CCD64 FMUL S6, S0, S1
	0x038CCD68 LDR X8, [X8 + 0xB8]
	0x038CCD6C FMUL S16, S11, S12
	0x038CCD70 FMUL S3, S2, S3
	0x038CCD74 FMUL S4, S2, S4
	0x038CCD78 FMUL S5, S1, S5
	0x038CCD7C FMUL S0, S7, S0
	0x038CCD80 FMUL S1, S17, S1
	0x038CCD84 FMUL S6, S2, S6
	0x038CCD88 FMUL S2, S16, S2
	0x038CCD8C FMUL S7, S11, S7
	0x038CCD90 FADD S0, S0, S3
	0x038CCD94 FSUB S1, S4, S1
	0x038CCD98 FADD S2, S2, S5
	0x038CCD9C FSUB S3, S6, S7
	0x038CCDA0 LDR V4, [X8]
	0x038CCDA4 LDR V5, [X8 + 0x8]
	0x038CCDA8 STP S0, S1, [X19]
	0x038CCDAC STP S2, S3, [X19 + 0x8]
	0x038CCDB0 STR D4, [X19 + 0x10]
	0x038CCDB4 STR S5, [X19 + 0x18]
	0x038CCDB8 LDP X20, X19, [X31 + 0x40]
	0x038CCDBC LDP X30, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0xB16000
	012 Move X20, 0x853000
	013 Move X19, X8
	014 Move W8, [X21+1700]
	015 Move X20, [X20+2104]
	016 Move V8, V2
	017 Move V9, V1
	018 Move V10, V0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x853000
	024 Move X0, [X0+2104]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+1700], W8
	028 Move S0, 0.5
	029 Multiply S10, S10, S0
	030 Multiply S9, S9, S0
	031 Multiply S8, S8, S0
	032 Move V0, V10
	033 Move V1, V9
	034 Move V2, V8
	035 Move X0, X31
	036 Call 0x384CD60
	037 Move V11, V0
	038 Move V12, V1
	039 Move V13, V2
	040 Move V0, V10
	041 Move V1, V9
	042 Move V2, V8
	043 Move X0, X31
	044 Call 0x384CE4C
	045 Move X8, [X20]
	046 Multiply S3, S11, S1
	047 Multiply S4, S12, S0
	048 Multiply S5, S13, S0
	049 Move X8, [X8+184]
	050 Multiply S6, S0, S1
	051 Multiply S16, S11, S13
	052 Multiply S17, S12, S11
	053 Multiply S3, S2, S3
	054 Multiply S4, S2, S4
	055 Multiply S5, S1, S5
	056 Multiply S6, S2, S6
	057 Multiply S1, S16, S1
	058 Multiply S2, S17, S2
	059 Add S1, S1, S4
	060 Subtract S2, S5, S2
	061 Move V4, [X8]
	062 Move V5, [X8+8]
	063 Multiply S7, S12, S13
	064 Multiply S0, S7, S0
	065 Multiply S7, S11, S7
	066 Add S0, S0, S3
	067 Subtract S3, S6, S7
	068 Move [X19], S0
	069 Move [X19+8], S1
	070 Move [X19+8], S2
	071 Move [X19+16], S3
	072 Move [X19+16], D4
	073 Move [X19+24], S5
	074 Move X20, [X31+64]
	075 Move X19, [X31+72]
	076 Move X30, [X31+48]
	077 Move X21, [X31+56]
	078 Move D9, [X31+32]
	079 Move D8, [X31+40]
	080 Move D11, [X31+16]
	081 Move D10, [X31+24]
	082 Move D13, [X31+80]
	083 Move D12, [X31+88]
	084 Return X0

Method: Unity.Mathematics.RigidTransform EulerYXZ(Unity.Mathematics.float3 xyz)

Disassembly:
	0x038CCDC0 LDP D9, D8, [X31 + 0x20]
	0x038CCDC4 LDP D11, D10, [X31 + 0x10]
	0x038CCDC8 LDP D13, D12, [X31], #0x50
	0x038CCDCC RET
	0x038CCDD0 SUB X31, X31, 0x30
	0x038CCDD4 STP X30, X19, [X31 + 0x20]
	0x038CCDD8 MOV X19, X8
	0x038CCDDC ADD X8, X31, 0x0
	0x038CCDE0 MOV X1, X31
	0x038CCDE4 BL 0x38D827C
	0x038CCDE8 LDUR V0, [X31 + 0xC]
	0x038CCDEC LDR V1, [X31]
	0x038CCDF0 STUR V0, [X19 + 0xC]
	0x038CCDF4 STR V1, [X19]
	0x038CCDF8 LDP X30, X19, [X31 + 0x20]
	0x038CCDFC ADD X31, X31, 0x30
	0x038CCE00 RET
	0x038CCE04 SUB X31, X31, 0x40
	0x038CCE08 STP D9, D8, [X31 + 0x10]
	0x038CCE0C STP X30, X21, [X31 + 0x20]
	0x038CCE10 STP X20, X19, [X31 + 0x30]
	0x038CCE14 ADRP X20, 0xB15000
	0x038CCE18 LDRB W9, [X20 + 0x6AA]
	0x038CCE1C MOV V8.16B, V0.16B
	0x038CCE20 MOV X19, X8
	0x038CCE24 TBNZ X9, 0x0, 0x38CCE3C
	0x038CCE28 ADRP X0, 0x852000
	0x038CCE2C LDR X0, [X0 + 0x838]
	0x038CCE30 BL 0x1C16CF4
	0x038CCE34 MOVZ W8, 0x1
	0x038CCE38 STRB W8, [X20 + 0x6AA]
	0x038CCE3C ADRP X20, 0xB15000
	0x038CCE40 LDRB W8, [X20 + 0x56A]
	0x038CCE44 CBNZ W8, 0x38CCE5C
	0x038CCE48 ADRP X0, 0x827000
	0x038CCE4C LDR X0, [X0 + 0x5A8]
	0x038CCE50 BL 0x1C16CF4
	0x038CCE54 MOVZ W8, 0x1
	0x038CCE58 STRB W8, [X20 + 0x56A]
	0x038CCE5C ADRP X20, 0x827000
	0x038CCE60 LDR X20, [X20 + 0x5A8]
	0x038CCE64 FMOV S9, 0.5
	0x038CCE68 LDR X0, [X20]
	0x038CCE6C LDR W8, [X0 + 0xE0]
	0x038CCE70 CBNZ W8, 0x38CCE78
	0x038CCE74 BL 0x1C16DFC
	0x038CCE78 ADRP X21, 0xB15000
	0x038CCE7C LDRB W8, [X21 + 0x564]
	0x038CCE80 FMUL S8, S8, S9
	0x038CCE84 CBNZ W8, 0x38CCE9C
	0x038CCE88 ADRP X0, 0x827000
	0x038CCE8C LDR X0, [X0 + 0x5A8]
	0x038CCE90 BL 0x1C16CF4
	0x038CCE94 MOVZ W8, 0x1
	0x038CCE98 STRB W8, [X21 + 0x564]
	0x038CCE9C LDR X0, [X20]
	0x038CCEA0 ADRP X20, 0x852000
	0x038CCEA4 FCVT S8, S8
	0x038CCEA8 LDR W8, [X0 + 0xE0]
	0x038CCEAC LDR X20, [X20 + 0x838]
	0x038CCEB0 CBNZ W8, 0x38CCEB8
	0x038CCEB4 BL 0x1C16DFC
	0x038CCEB8 ADD X0, X31, 0x8
	0x038CCEBC ADD X1, X31, 0x0
	0x038CCEC0 MOV V0.16B, V8.16B
	0x038CCEC4 BL 0x3EB1E40
	0x038CCEC8 LDR X8, [X20]
	0x038CCECC LDP D1, D0, [X31]
	0x038CCED0 LDP X30, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0xB16000
	012 Move X20, 0x853000
	013 Move X19, X8
	014 Move W8, [X21+1701]
	015 Move X20, [X20+2104]
	016 Move V8, V2
	017 Move V9, V1
	018 Move V10, V0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x853000
	024 Move X0, [X0+2104]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+1701], W8
	028 Move S0, 0.5
	029 Multiply S10, S10, S0
	030 Multiply S9, S9, S0
	031 Multiply S8, S8, S0
	032 Move V0, V10
	033 Move V1, V9
	034 Move V2, V8
	035 Move X0, X31
	036 Call 0x384CD60
	037 Move V11, V0
	038 Move V12, V1
	039 Move V13, V2
	040 Move V0, V10
	041 Move V1, V9
	042 Move V2, V8
	043 Move X0, X31
	044 Call 0x384CE4C
	045 Move X8, [X20]
	046 Multiply S3, S11, S1
	047 Multiply S4, S12, S0
	048 Multiply S5, S13, S0
	049 Move X8, [X8+184]
	050 Multiply S6, S0, S1
	051 Multiply S16, S11, S13
	052 Multiply S17, S11, S12
	053 Multiply S3, S2, S3
	054 Multiply S4, S2, S4
	055 Multiply S5, S1, S5
	056 Multiply S6, S2, S6
	057 Multiply S1, S16, S1
	058 Multiply S2, S17, S2
	059 Add S1, S1, S4
	060 Add S2, S2, S5
	061 Move V4, [X8]
	062 Move V5, [X8+8]
	063 Multiply S7, S12, S13
	064 Multiply S0, S7, S0
	065 Multiply S7, S11, S7
	066 Subtract S0, S3, S0
	067 Subtract S3, S6, S7
	068 Move [X19], S0
	069 Move [X19+8], S1
	070 Move [X19+8], S2
	071 Move [X19+16], S3
	072 Move [X19+16], D4
	073 Move [X19+24], S5
	074 Move X20, [X31+64]
	075 Move X19, [X31+72]
	076 Move X30, [X31+48]
	077 Move X21, [X31+56]
	078 Move D9, [X31+32]
	079 Move D8, [X31+40]
	080 Move D11, [X31+16]
	081 Move D10, [X31+24]
	082 Move D13, [X31+80]
	083 Move D12, [X31+88]
	084 Return X0

Method: Unity.Mathematics.RigidTransform EulerYZX(Unity.Mathematics.float3 xyz)

Disassembly:
	0x038CCED4 LDP D9, D8, [X31 + 0x10]
	0x038CCED8 LDR X8, [X8 + 0xB8]
	0x00000000 INVALID
	0x00000000 INVALID
	0x038CCEE4 LDR V2, [X8]
	0x038CCEE8 LDR V3, [X8 + 0x8]
	0x038CCEEC STR S0, [X19]
	0x038CCEF0 STP W31, W31, [X19 + 0x4]
	0x038CCEF4 STR S1, [X19 + 0xC]
	0x038CCEF8 STR D2, [X19 + 0x10]
	0x038CCEFC STR S3, [X19 + 0x18]
	0x038CCF00 LDP X20, X19, [X31 + 0x30]
	0x038CCF04 ADD X31, X31, 0x40
	0x038CCF08 RET
	0x038CCF0C SUB X31, X31, 0x40
	0x038CCF10 STP D9, D8, [X31 + 0x10]
	0x038CCF14 STP X30, X21, [X31 + 0x20]
	0x038CCF18 STP X20, X19, [X31 + 0x30]
	0x038CCF1C ADRP X20, 0xB15000
	0x038CCF20 LDRB W9, [X20 + 0x6AB]
	0x038CCF24 MOV V8.16B, V0.16B
	0x038CCF28 MOV X19, X8
	0x038CCF2C TBNZ X9, 0x0, 0x38CCF44
	0x038CCF30 ADRP X0, 0x852000
	0x038CCF34 LDR X0, [X0 + 0x838]
	0x038CCF38 BL 0x1C16CF4
	0x038CCF3C MOVZ W8, 0x1
	0x038CCF40 STRB W8, [X20 + 0x6AB]
	0x038CCF44 ADRP X20, 0xB15000
	0x038CCF48 LDRB W8, [X20 + 0x56A]
	0x038CCF4C CBNZ W8, 0x38CCF64
	0x038CCF50 ADRP X0, 0x827000
	0x038CCF54 LDR X0, [X0 + 0x5A8]
	0x038CCF58 BL 0x1C16CF4
	0x038CCF5C MOVZ W8, 0x1
	0x038CCF60 STRB W8, [X20 + 0x56A]
	0x038CCF64 ADRP X20, 0x827000
	0x038CCF68 LDR X20, [X20 + 0x5A8]
	0x038CCF6C FMOV S9, 0.5
	0x038CCF70 LDR X0, [X20]
	0x038CCF74 LDR W8, [X0 + 0xE0]
	0x038CCF78 CBNZ W8, 0x38CCF80
	0x038CCF7C BL 0x1C16DFC
	0x038CCF80 ADRP X21, 0xB15000
	0x038CCF84 LDRB W8, [X21 + 0x564]
	0x038CCF88 FMUL S8, S8, S9
	0x038CCF8C CBNZ W8, 0x38CCFA4
	0x038CCF90 ADRP X0, 0x827000
	0x038CCF94 LDR X0, [X0 + 0x5A8]
	0x038CCF98 BL 0x1C16CF4
	0x038CCF9C MOVZ W8, 0x1
	0x038CCFA0 STRB W8, [X21 + 0x564]
	0x038CCFA4 LDR X0, [X20]
	0x038CCFA8 ADRP X20, 0x852000
	0x038CCFAC FCVT S8, S8
	0x038CCFB0 LDR W8, [X0 + 0xE0]
	0x038CCFB4 LDR X20, [X20 + 0x838]
	0x038CCFB8 CBNZ W8, 0x38CCFC0
	0x038CCFBC BL 0x1C16DFC
	0x038CCFC0 ADD X0, X31, 0x8
	0x038CCFC4 ADD X1, X31, 0x0
	0x038CCFC8 MOV V0.16B, V8.16B
	0x038CCFCC BL 0x3EB1E40
	0x038CCFD0 LDR X8, [X20]
	0x038CCFD4 LDP D1, D0, [X31]
	0x038CCFD8 LDP X30, X21, [X31 + 0x20]
	0x038CCFDC LDP D9, D8, [X31 + 0x10]
	0x038CCFE0 LDR X8, [X8 + 0xB8]
	0x00000000 INVALID

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0xB16000
	012 Move X20, 0x853000
	013 Move X19, X8
	014 Move W8, [X21+1702]
	015 Move X20, [X20+2104]
	016 Move V8, V2
	017 Move V9, V1
	018 Move V10, V0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x853000
	024 Move X0, [X0+2104]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+1702], W8
	028 Move S0, 0.5
	029 Multiply S10, S10, S0
	030 Multiply S9, S9, S0
	031 Multiply S8, S8, S0
	032 Move V0, V10
	033 Move V1, V9
	034 Move V2, V8
	035 Move X0, X31
	036 Call 0x384CD60
	037 Move V11, V0
	038 Move V12, V1
	039 Move V13, V2
	040 Move V0, V10
	041 Move V1, V9
	042 Move V2, V8
	043 Move X0, X31
	044 Call 0x384CE4C
	045 Move X8, [X20]
	046 Multiply S3, S11, S1
	047 Multiply S4, S12, S0
	048 Multiply S5, S13, S0
	049 Move X8, [X8+184]
	050 Multiply S6, S0, S1
	051 Multiply S16, S11, S12
	052 Multiply S17, S13, S11
	053 Multiply S3, S2, S3
	054 Multiply S4, S2, S4
	055 Multiply S5, S1, S5
	056 Multiply S6, S2, S6
	057 Multiply S2, S16, S2
	058 Multiply S1, S17, S1
	059 Subtract S1, S4, S1
	060 Add S2, S2, S5
	061 Move V4, [X8]
	062 Move V5, [X8+8]
	063 Multiply S7, S12, S13
	064 Multiply S16, S11, S7
	065 Multiply S0, S7, S0
	066 Subtract S0, S3, S0
	067 Add S3, S16, S6
	068 Move [X19], S0
	069 Move [X19+8], S1
	070 Move [X19+8], S2
	071 Move [X19+16], S3
	072 Move [X19+16], D4
	073 Move [X19+24], S5
	074 Move X20, [X31+64]
	075 Move X19, [X31+72]
	076 Move X30, [X31+48]
	077 Move X21, [X31+56]
	078 Move D9, [X31+32]
	079 Move D8, [X31+40]
	080 Move D11, [X31+16]
	081 Move D10, [X31+24]
	082 Move D13, [X31+80]
	083 Move D12, [X31+88]
	084 Return X0

Method: Unity.Mathematics.RigidTransform EulerZXY(Unity.Mathematics.float3 xyz)

Disassembly:
	0x00000000 INVALID
	0x038CCFEC LDR V2, [X8]
	0x038CCFF0 LDR V3, [X8 + 0x8]
	0x038CCFF4 STR W31, [X19]
	0x038CCFF8 STR S0, [X19 + 0x4]
	0x038CCFFC STR W31, [X19 + 0x8]
	0x038CD000 STR S1, [X19 + 0xC]
	0x038CD004 STR D2, [X19 + 0x10]
	0x038CD008 STR S3, [X19 + 0x18]
	0x038CD00C LDP X20, X19, [X31 + 0x30]
	0x038CD010 ADD X31, X31, 0x40
	0x038CD014 RET
	0x038CD018 SUB X31, X31, 0x40
	0x038CD01C STP D9, D8, [X31 + 0x10]
	0x038CD020 STP X30, X21, [X31 + 0x20]
	0x038CD024 STP X20, X19, [X31 + 0x30]
	0x038CD028 ADRP X20, 0xB14000
	0x038CD02C LDRB W9, [X20 + 0x6AC]
	0x038CD030 MOV V8.16B, V0.16B
	0x038CD034 MOV X19, X8
	0x038CD038 TBNZ X9, 0x0, 0x38CD050
	0x038CD03C ADRP X0, 0x851000
	0x038CD040 LDR X0, [X0 + 0x838]
	0x038CD044 BL 0x1C16CF4
	0x038CD048 MOVZ W8, 0x1
	0x038CD04C STRB W8, [X20 + 0x6AC]
	0x038CD050 ADRP X20, 0xB14000
	0x038CD054 LDRB W8, [X20 + 0x56A]
	0x038CD058 CBNZ W8, 0x38CD070
	0x038CD05C ADRP X0, 0x826000
	0x038CD060 LDR X0, [X0 + 0x5A8]
	0x038CD064 BL 0x1C16CF4
	0x038CD068 MOVZ W8, 0x1
	0x038CD06C STRB W8, [X20 + 0x56A]
	0x038CD070 ADRP X20, 0x826000
	0x038CD074 LDR X20, [X20 + 0x5A8]
	0x038CD078 FMOV S9, 0.5
	0x038CD07C LDR X0, [X20]
	0x038CD080 LDR W8, [X0 + 0xE0]
	0x038CD084 CBNZ W8, 0x38CD08C
	0x038CD088 BL 0x1C16DFC
	0x038CD08C ADRP X21, 0xB14000
	0x038CD090 LDRB W8, [X21 + 0x564]
	0x038CD094 FMUL S8, S8, S9
	0x038CD098 CBNZ W8, 0x38CD0B0
	0x038CD09C ADRP X0, 0x826000
	0x038CD0A0 LDR X0, [X0 + 0x5A8]
	0x038CD0A4 BL 0x1C16CF4
	0x038CD0A8 MOVZ W8, 0x1
	0x038CD0AC STRB W8, [X21 + 0x564]
	0x038CD0B0 LDR X0, [X20]
	0x038CD0B4 ADRP X20, 0x851000
	0x038CD0B8 FCVT S8, S8
	0x038CD0BC LDR W8, [X0 + 0xE0]
	0x038CD0C0 LDR X20, [X20 + 0x838]
	0x038CD0C4 CBNZ W8, 0x38CD0CC
	0x038CD0C8 BL 0x1C16DFC
	0x038CD0CC ADD X0, X31, 0x8
	0x038CD0D0 ADD X1, X31, 0x0
	0x038CD0D4 MOV V0.16B, V8.16B
	0x038CD0D8 BL 0x3EB1E40
	0x038CD0DC LDR X8, [X20]
	0x038CD0E0 LDP D1, D0, [X31]
	0x038CD0E4 LDP X30, X21, [X31 + 0x20]
	0x038CD0E8 LDP D9, D8, [X31 + 0x10]
	0x038CD0EC LDR X8, [X8 + 0xB8]
	0x00000000 INVALID
	0x00000000 INVALID
	0x038CD0F8 LDR V2, [X8]

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0xB16000
	012 Move X20, 0x852000
	013 Move X19, X8
	014 Move W8, [X21+1703]
	015 Move X20, [X20+2104]
	016 Move V8, V2
	017 Move V9, V1
	018 Move V10, V0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x852000
	024 Move X0, [X0+2104]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+1703], W8
	028 Move S0, 0.5
	029 Multiply S10, S10, S0
	030 Multiply S9, S9, S0
	031 Multiply S8, S8, S0
	032 Move V0, V10
	033 Move V1, V9
	034 Move V2, V8
	035 Move X0, X31
	036 Call 0x384CD60
	037 Move V11, V0
	038 Move V12, V1
	039 Move V13, V2
	040 Move V0, V10
	041 Move V1, V9
	042 Move V2, V8
	043 Move X0, X31
	044 Call 0x384CE4C
	045 Move X8, [X20]
	046 Multiply S3, S11, S1
	047 Multiply S4, S12, S0
	048 Multiply S5, S13, S0
	049 Move X8, [X8+184]
	050 Multiply S6, S0, S1
	051 Multiply S16, S13, S11
	052 Multiply S17, S12, S11
	053 Multiply S3, S2, S3
	054 Multiply S4, S2, S4
	055 Multiply S5, S1, S5
	056 Multiply S6, S2, S6
	057 Multiply S1, S16, S1
	058 Multiply S2, S17, S2
	059 Subtract S1, S4, S1
	060 Subtract S2, S5, S2
	061 Move V4, [X8]
	062 Move V5, [X8+8]
	063 Multiply S7, S12, S13
	064 Multiply S0, S7, S0
	065 Multiply S7, S11, S7
	066 Add S0, S0, S3
	067 Add S3, S7, S6
	068 Move [X19], S0
	069 Move [X19+8], S1
	070 Move [X19+8], S2
	071 Move [X19+16], S3
	072 Move [X19+16], D4
	073 Move [X19+24], S5
	074 Move X20, [X31+64]
	075 Move X19, [X31+72]
	076 Move X30, [X31+48]
	077 Move X21, [X31+56]
	078 Move D9, [X31+32]
	079 Move D8, [X31+40]
	080 Move D11, [X31+16]
	081 Move D10, [X31+24]
	082 Move D13, [X31+80]
	083 Move D12, [X31+88]
	084 Return X0

Method: Unity.Mathematics.RigidTransform EulerZYX(Unity.Mathematics.float3 xyz)

Disassembly:
	0x038CD0FC LDR V3, [X8 + 0x8]
	0x038CD100 STR X31, [X19]
	0x038CD104 STP S0, S1, [X19 + 0x8]
	0x038CD108 STR D2, [X19 + 0x10]
	0x038CD10C STR S3, [X19 + 0x18]
	0x038CD110 LDP X20, X19, [X31 + 0x30]
	0x038CD114 ADD X31, X31, 0x40
	0x038CD118 RET
	0x038CD11C STR D10, [X31 - 0x40]!
	0x038CD120 STP D9, D8, [X31 + 0x10]
	0x038CD124 STP X30, X21, [X31 + 0x20]
	0x038CD128 STP X20, X19, [X31 + 0x30]
	0x038CD12C ADRP X20, 0xB14000
	0x038CD130 ADRP X21, 0x82C000
	0x038CD134 MOV X19, X8
	0x038CD138 LDRB W8, [X20 + 0x6AD]
	0x038CD13C LDR X21, [X21 + 0x7B8]
	0x038CD140 MOV V8.16B, V2.16B
	0x038CD144 MOV V9.16B, V1.16B
	0x038CD148 MOV V10.16B, V0.16B
	0x038CD14C TBNZ X8, 0x0, 0x38CD164
	0x038CD150 ADRP X0, 0x82C000
	0x038CD154 LDR X0, [X0 + 0x7B8]
	0x038CD158 BL 0x1C16CF4
	0x038CD15C MOVZ W8, 0x1
	0x038CD160 STRB W8, [X20 + 0x6AD]
	0x038CD164 LDR X8, [X21]
	0x038CD168 LDP X30, X21, [X31 + 0x20]
	0x038CD16C LDR X8, [X8 + 0xB8]
	0x038CD170 LDR V0, [X8]
	0x038CD174 STP S10, S9, [X19 + 0x10]
	0x038CD178 STR S8, [X19 + 0x18]
	0x038CD17C LDP D9, D8, [X31 + 0x10]
	0x038CD180 STR V0, [X19]
	0x038CD184 LDP X20, X19, [X31 + 0x30]
	0x038CD188 LDR V10, [X31], #0x40
	0x038CD18C RET
	0x038CD190 LDR V0, [X1]
	0x038CD194 LDR V1, [X0]
	0x038CD198 FCMP S1, S0
	0x038CD19C B.NE 0x38CD204
	0x038CD1A0 LDR V0, [X1 + 0x4]
	0x038CD1A4 LDR V1, [X0 + 0x4]
	0x038CD1A8 FCMP S1, S0
	0x038CD1AC B.NE 0x38CD204
	0x038CD1B0 LDR V0, [X1 + 0x8]
	0x038CD1B4 LDR V1, [X0 + 0x8]
	0x038CD1B8 FCMP S1, S0
	0x038CD1BC B.NE 0x38CD204
	0x038CD1C0 LDR V0, [X1 + 0xC]
	0x038CD1C4 LDR V1, [X0 + 0xC]
	0x038CD1C8 FCMP S1, S0
	0x038CD1CC B.NE 0x38CD204
	0x038CD1D0 LDR V0, [X1 + 0x10]
	0x038CD1D4 LDR V1, [X0 + 0x10]
	0x038CD1D8 FCMP S1, S0
	0x038CD1DC B.NE 0x38CD204
	0x038CD1E0 LDR V0, [X1 + 0x14]
	0x038CD1E4 LDR V1, [X0 + 0x14]
	0x038CD1E8 FCMP S1, S0
	0x038CD1EC B.NE 0x38CD204
	0x038CD1F0 LDR V0, [X1 + 0x18]
	0x038CD1F4 LDR V1, [X0 + 0x18]
	0x038CD1F8 FCMP S1, S0
	0x038CD1FC CSET W0, EQ
	0x038CD200 RET
	0x038CD204 MOV W0, W31
	0x038CD208 RET
	0x038CD20C STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0xB15000
	012 Move X20, 0x852000
	013 Move X19, X8
	014 Move W8, [X21+1704]
	015 Move X20, [X20+2104]
	016 Move V8, V2
	017 Move V9, V1
	018 Move V10, V0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x852000
	024 Move X0, [X0+2104]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+1704], W8
	028 Move S0, 0.5
	029 Multiply S10, S10, S0
	030 Multiply S9, S9, S0
	031 Multiply S8, S8, S0
	032 Move V0, V10
	033 Move V1, V9
	034 Move V2, V8
	035 Move X0, X31
	036 Call 0x384CD60
	037 Move V11, V0
	038 Move V12, V1
	039 Move V13, V2
	040 Move V0, V10
	041 Move V1, V9
	042 Move V2, V8
	043 Move X0, X31
	044 Call 0x384CE4C
	045 Move X8, [X20]
	046 Multiply S3, S11, S1
	047 Multiply S4, S12, S0
	048 Multiply S5, S13, S0
	049 Move X8, [X8+184]
	050 Multiply S6, S0, S1
	051 Multiply S16, S11, S12
	052 Multiply S17, S13, S11
	053 Multiply S3, S2, S3
	054 Multiply S4, S2, S4
	055 Multiply S5, S1, S5
	056 Multiply S6, S2, S6
	057 Multiply S2, S16, S2
	058 Multiply S1, S17, S1
	059 Subtract S1, S4, S1
	060 Add S2, S2, S5
	061 Move V4, [X8]
	062 Move V5, [X8+8]
	063 Multiply S7, S12, S13
	064 Multiply S0, S7, S0
	065 Multiply S7, S11, S7
	066 Add S0, S0, S3
	067 Subtract S3, S6, S7
	068 Move [X19], S0
	069 Move [X19+8], S1
	070 Move [X19+8], S2
	071 Move [X19+16], S3
	072 Move [X19+16], D4
	073 Move [X19+24], S5
	074 Move X20, [X31+64]
	075 Move X19, [X31+72]
	076 Move X30, [X31+48]
	077 Move X21, [X31+56]
	078 Move D9, [X31+32]
	079 Move D8, [X31+40]
	080 Move D11, [X31+16]
	081 Move D10, [X31+24]
	082 Move D13, [X31+80]
	083 Move D12, [X31+88]
	084 Return X0

Method: Unity.Mathematics.RigidTransform EulerXYZ(System.Single x, System.Single y, System.Single z)

Disassembly:
	0x038CD210 STP X20, X19, [X31 + 0x10]
	0x038CD214 ADRP X21, 0xB14000
	0x038CD218 LDRB W8, [X21 + 0x6AE]
	0x038CD21C MOV X20, X1
	0x038CD220 MOV X19, X0
	0x038CD224 TBNZ X8, 0x0, 0x38CD23C
	0x038CD228 ADRP X0, 0x87E000
	0x038CD22C LDR X0, [X0 + 0xD8]
	0x038CD230 BL 0x1C16CF4
	0x038CD234 MOVZ W8, 0x1
	0x038CD238 STRB W8, [X21 + 0x6AE]
	0x038CD23C CBZ X20, 0x38CD258
	0x038CD240 ADRP X8, 0x87E000
	0x038CD244 LDR X8, [X8 + 0xD8]
	0x038CD248 LDR X9, [X20]
	0x038CD24C LDR X8, [X8]
	0x038CD250 CMP X9, X8
	0x038CD254 B.EQ 0x38CD268
	0x038CD258 MOV W0, W31
	0x038CD25C LDP X20, X19, [X31 + 0x10]
	0x038CD260 LDP X30, X21, [X31], #0x20
	0x038CD264 RET
	0x038CD268 MOV X0, X20
	0x038CD26C BL 0x1C16E08
	0x038CD270 LDR V0, [X0]
	0x038CD274 LDR V1, [X19]
	0x038CD278 FCMP S1, S0
	0x038CD27C B.NE 0x38CD258
	0x038CD280 LDR V0, [X0 + 0x4]
	0x038CD284 LDR V1, [X19 + 0x4]
	0x038CD288 FCMP S1, S0
	0x038CD28C B.NE 0x38CD258
	0x038CD290 LDR V0, [X0 + 0x8]
	0x038CD294 LDR V1, [X19 + 0x8]
	0x038CD298 FCMP S1, S0
	0x038CD29C B.NE 0x38CD258
	0x038CD2A0 LDR V0, [X0 + 0xC]
	0x038CD2A4 LDR V1, [X19 + 0xC]
	0x038CD2A8 FCMP S1, S0
	0x038CD2AC B.NE 0x38CD258
	0x038CD2B0 LDR V0, [X0 + 0x10]
	0x038CD2B4 LDR V1, [X19 + 0x10]
	0x038CD2B8 FCMP S1, S0
	0x038CD2BC B.NE 0x38CD258
	0x038CD2C0 LDR V0, [X0 + 0x14]
	0x038CD2C4 LDR V1, [X19 + 0x14]
	0x038CD2C8 FCMP S1, S0
	0x038CD2CC B.NE 0x38CD258
	0x038CD2D0 LDR V0, [X0 + 0x18]
	0x038CD2D4 LDR V1, [X19 + 0x18]
	0x038CD2D8 FCMP S1, S0
	0x038CD2DC CSET W0, EQ
	0x038CD2E0 B 0x38CD25C
	0x038CD2E4 LDP W10, W11, [X0 + 0x8]
	0x038CD2E8 LDP W8, W9, [X0]
	0x038CD2EC MOVZ W16, 0xE1D1
	0x038CD2F0 MOVK W16, 0x9CED0000
	0x038CD2F4 MUL W10, W10, W16
	0x038CD2F8 MOVZ W16, 0x26FF
	0x038CD2FC LDP W12, W13, [X0 + 0x10]
	0x038CD300 LDR W14, [X0 + 0x18]
	0x038CD304 MOVZ X15, 0xB51
	0x038CD308 MOVK W16, 0xE6960000
	0x038CD30C MOVK X15, 0x43BE0000
	0x038CD310 MADD W8, W8, W16, W10
	0x038CD314 MOVZ X10, 0xEEB
	0x038CD318 MOVK X10, 0xBD010000
	0x038CD31C MOVZ X16, 0x813
	0x038CD320 MUL X11, X11, X15

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xB15000
	011 Move W9, [X20+1737]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X8
	016 Compare W9, 0
	017 JumpIfNotEqual {23}
	018 Move X0, 0x852000
	019 Move X0, [X0+2104]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1737], W8
	023 Move S0, 0.5
	024 Multiply S10, S10, S0
	025 Multiply S9, S9, S0
	026 Multiply S8, S8, S0
	027 Move V0, V10
	028 Move V1, V9
	029 Move V2, V8
	030 Move X0, X31
	031 Call 0x384CD60
	032 Move V11, V0
	033 Move V12, V1
	034 Move V13, V2
	035 Move V0, V10
	036 Move V1, V9
	037 Move V2, V8
	038 Move X0, X31
	039 Call 0x384CE4C
	040 Move X8, 0x852000
	041 Move X8, [X8+2104]
	042 Multiply S3, S11, S1
	043 Multiply S4, S12, S0
	044 Multiply S5, S13, S0
	045 Move X8, [X8]
	046 Multiply S6, S0, S1
	047 Multiply S16, S11, S13
	048 Multiply S17, S12, S11
	049 Move X8, [X8+184]
	050 Multiply S3, S2, S3
	051 Multiply S4, S2, S4
	052 Multiply S5, S1, S5
	053 Multiply S6, S2, S6
	054 Multiply S1, S16, S1
	055 Multiply S2, S17, S2
	056 Add S1, S1, S4
	057 Subtract S2, S5, S2
	058 Move V4, [X8]
	059 Move V5, [X8+8]
	060 Multiply S7, S12, S13
	061 Multiply S16, S11, S7
	062 Multiply S0, S7, S0
	063 Subtract S0, S3, S0
	064 Add S3, S16, S6
	065 Move [X19], S0
	066 Move [X19+8], S1
	067 Move [X19+8], S2
	068 Move [X19+16], S3
	069 Move [X19+16], D4
	070 Move [X19+24], S5
	071 Move X20, [X31+64]
	072 Move X19, [X31+72]
	073 Move X30, [X31+48]
	074 Move D9, [X31+32]
	075 Move D8, [X31+40]
	076 Move D11, [X31+16]
	077 Move D10, [X31+24]
	078 Move D13, [X31+80]
	079 Move D12, [X31+88]
	080 Return X0

Method: Unity.Mathematics.RigidTransform EulerXZY(System.Single x, System.Single y, System.Single z)

Disassembly:
	0x038CD324 MOVZ W15, 0x8063
	0x038CD328 MOVK X16, 0x4ABF0000
	0x038CD32C MOVK W15, 0x86060000
	0x038CD330 MUL X9, X9, X10
	0x038CD334 MOVZ W10, 0xB92D
	0x038CD338 MOVK W10, 0x9B130000
	0x038CD33C MUL X13, X13, X16
	0x038CD340 MUL W14, W14, W15
	0x038CD344 UBFM X9, X9, 0x20, 0x3F
	0x038CD348 MOVZ W16, 0x394B
	0x038CD34C UBFM X11, X11, 0x20, 0x3F
	0x038CD350 UBFM X13, X13, 0x20, 0x3F
	0x038CD354 MADD W10, W12, W10, W14
	0x038CD358 ADD W8, W8, W9
	0x038CD35C MOVK W16, 0xC5C50000
	0x038CD360 ADD W9, W10, W13
	0x038CD364 ADD W8, W8, W11
	0x038CD368 MADD W8, W9, W16, W8
	0x038CD36C MOVZ W9, 0xB9D4
	0x038CD370 MOVK W9, 0xB27F0000
	0x038CD374 ADD W0, W8, W9
	0x038CD378 RET
	0x038CD37C SUB X31, X31, 0x50
	0x038CD380 STR X30, [X31 + 0x20]
	0x038CD384 STP X22, X21, [X31 + 0x30]
	0x038CD388 STP X20, X19, [X31 + 0x40]
	0x038CD38C ADRP X19, 0xB14000
	0x038CD390 ADRP X21, 0x826000
	0x038CD394 ADRP X22, 0x826000
	0x038CD398 LDRB W8, [X19 + 0x6AF]
	0x038CD39C LDR X21, [X21 + 0x9D0]
	0x038CD3A0 LDR X22, [X22 + 0xA90]
	0x038CD3A4 MOV X20, X0
	0x038CD3A8 TBNZ X8, 0x0, 0x38CD3D8
	0x038CD3AC ADRP X0, 0x826000
	0x038CD3B0 LDR X0, [X0 + 0x9D0]
	0x038CD3B4 BL 0x1C16CF4
	0x038CD3B8 ADRP X0, 0x826000
	0x038CD3BC LDR X0, [X0 + 0xA90]
	0x038CD3C0 BL 0x1C16CF4
	0x038CD3C4 ADRP X0, 0x87E000
	0x038CD3C8 LDR X0, [X0 + 0xE0]
	0x038CD3CC BL 0x1C16CF4
	0x038CD3D0 MOVZ W8, 0x1
	0x038CD3D4 STRB W8, [X19 + 0x6AF]
	0x038CD3D8 LDR X0, [X21]
	0x038CD3DC MOVZ W1, 0x7
	0x038CD3E0 BL 0x1C16D6C
	0x038CD3E4 MOV X19, X0
	0x038CD3E8 LDR V0, [X20]
	0x038CD3EC LDR X0, [X22]
	0x038CD3F0 ADD X1, X31, 0x2C
	0x038CD3F4 STR S0, [X31 + 0x2C]
	0x038CD3F8 BL 0x1C16E04
	0x038CD3FC CBZ X19, 0x38CD5E4
	0x038CD400 MOV X21, X0
	0x038CD404 CBZ X0, 0x38CD41C
	0x038CD408 LDR X8, [X19]
	0x038CD40C MOV X0, X21
	0x038CD410 LDR X1, [X8 + 0x40]
	0x038CD414 BL 0x1C16E00
	0x038CD418 CBZ X0, 0x38CD5D8
	0x038CD41C LDR W8, [X19 + 0x18]
	0x038CD420 CBZ W8, 0x38CD5D4
	0x038CD424 STR X21, [X19 + 0x20]
	0x038CD428 LDR V0, [X20 + 0x4]
	0x038CD42C LDR X0, [X22]
	0x038CD430 ADD X1, X31, 0x28
	0x038CD434 STR S0, [X31 + 0x28]

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xB15000
	011 Move W9, [X20+1738]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X8
	016 Compare W9, 0
	017 JumpIfNotEqual {23}
	018 Move X0, 0x852000
	019 Move X0, [X0+2104]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1738], W8
	023 Move S0, 0.5
	024 Multiply S10, S10, S0
	025 Multiply S9, S9, S0
	026 Multiply S8, S8, S0
	027 Move V0, V10
	028 Move V1, V9
	029 Move V2, V8
	030 Move X0, X31
	031 Call 0x384CD60
	032 Move V11, V0
	033 Move V12, V1
	034 Move V13, V2
	035 Move V0, V10
	036 Move V1, V9
	037 Move V2, V8
	038 Move X0, X31
	039 Call 0x384CE4C
	040 Move X8, 0x852000
	041 Move X8, [X8+2104]
	042 Multiply S3, S11, S1
	043 Multiply S4, S12, S0
	044 Multiply S5, S13, S0
	045 Move X8, [X8]
	046 Multiply S6, S0, S1
	047 Multiply S16, S11, S13
	048 Multiply S17, S12, S11
	049 Move X8, [X8+184]
	050 Multiply S3, S2, S3
	051 Multiply S4, S2, S4
	052 Multiply S5, S1, S5
	053 Multiply S6, S2, S6
	054 Multiply S1, S16, S1
	055 Multiply S2, S17, S2
	056 Add S1, S1, S4
	057 Subtract S2, S5, S2
	058 Move V4, [X8]
	059 Move V5, [X8+8]
	060 Multiply S7, S12, S13
	061 Multiply S0, S7, S0
	062 Multiply S7, S11, S7
	063 Add S0, S0, S3
	064 Subtract S3, S6, S7
	065 Move [X19], S0
	066 Move [X19+8], S1
	067 Move [X19+8], S2
	068 Move [X19+16], S3
	069 Move [X19+16], D4
	070 Move [X19+24], S5
	071 Move X20, [X31+64]
	072 Move X19, [X31+72]
	073 Move X30, [X31+48]
	074 Move D9, [X31+32]
	075 Move D8, [X31+40]
	076 Move D11, [X31+16]
	077 Move D10, [X31+24]
	078 Move D13, [X31+80]
	079 Move D12, [X31+88]
	080 Return X0

Method: Unity.Mathematics.RigidTransform EulerYXZ(System.Single x, System.Single y, System.Single z)

Disassembly:
	0x038CD438 BL 0x1C16E04
	0x038CD43C MOV X21, X0
	0x038CD440 CBZ X0, 0x38CD458
	0x038CD444 LDR X8, [X19]
	0x038CD448 MOV X0, X21
	0x038CD44C LDR X1, [X8 + 0x40]
	0x038CD450 BL 0x1C16E00
	0x038CD454 CBZ X0, 0x38CD5D8
	0x038CD458 LDR W8, [X19 + 0x18]
	0x038CD45C CMP W8, 0x1
	0x038CD460 B.LS 0x38CD5D4
	0x038CD464 STR X21, [X19 + 0x28]
	0x038CD468 LDR V0, [X20 + 0x8]
	0x038CD46C LDR X0, [X22]
	0x038CD470 ADD X1, X31, 0x1C
	0x038CD474 STR S0, [X31 + 0x1C]
	0x038CD478 BL 0x1C16E04
	0x038CD47C MOV X21, X0
	0x038CD480 CBZ X0, 0x38CD498
	0x038CD484 LDR X8, [X19]
	0x038CD488 MOV X0, X21
	0x038CD48C LDR X1, [X8 + 0x40]
	0x038CD490 BL 0x1C16E00
	0x038CD494 CBZ X0, 0x38CD5D8
	0x038CD498 LDR W8, [X19 + 0x18]
	0x038CD49C CMP W8, 0x2
	0x038CD4A0 B.LS 0x38CD5D4
	0x038CD4A4 STR X21, [X19 + 0x30]
	0x038CD4A8 LDR V0, [X20 + 0xC]
	0x038CD4AC LDR X0, [X22]
	0x038CD4B0 ADD X1, X31, 0x18
	0x038CD4B4 STR S0, [X31 + 0x18]
	0x038CD4B8 BL 0x1C16E04
	0x038CD4BC MOV X21, X0
	0x038CD4C0 CBZ X0, 0x38CD4D8
	0x038CD4C4 LDR X8, [X19]
	0x038CD4C8 MOV X0, X21
	0x038CD4CC LDR X1, [X8 + 0x40]
	0x038CD4D0 BL 0x1C16E00
	0x038CD4D4 CBZ X0, 0x38CD5D8
	0x038CD4D8 LDR W8, [X19 + 0x18]
	0x038CD4DC CMP W8, 0x3
	0x038CD4E0 B.LS 0x38CD5D4
	0x038CD4E4 STR X21, [X19 + 0x38]
	0x038CD4E8 LDR V0, [X20 + 0x10]
	0x038CD4EC LDR X0, [X22]
	0x038CD4F0 ADD X1, X31, 0x14
	0x038CD4F4 STR S0, [X31 + 0x14]
	0x038CD4F8 BL 0x1C16E04
	0x038CD4FC MOV X21, X0
	0x038CD500 CBZ X0, 0x38CD518
	0x038CD504 LDR X8, [X19]
	0x038CD508 MOV X0, X21
	0x038CD50C LDR X1, [X8 + 0x40]
	0x038CD510 BL 0x1C16E00
	0x038CD514 CBZ X0, 0x38CD5D8
	0x038CD518 LDR W8, [X19 + 0x18]
	0x038CD51C CMP W8, 0x4
	0x038CD520 B.LS 0x38CD5D4
	0x038CD524 STR X21, [X19 + 0x40]
	0x038CD528 LDR V0, [X20 + 0x14]
	0x038CD52C LDR X0, [X22]
	0x038CD530 ADD X1, X31, 0x10
	0x038CD534 STR S0, [X31 + 0x10]
	0x038CD538 BL 0x1C16E04
	0x038CD53C MOV X21, X0
	0x038CD540 CBZ X0, 0x38CD558
	0x038CD544 LDR X8, [X19]
	0x038CD548 MOV X0, X21

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xB15000
	011 Move W9, [X20+1739]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X8
	016 Compare W9, 0
	017 JumpIfNotEqual {23}
	018 Move X0, 0x852000
	019 Move X0, [X0+2104]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1739], W8
	023 Move S0, 0.5
	024 Multiply S10, S10, S0
	025 Multiply S9, S9, S0
	026 Multiply S8, S8, S0
	027 Move V0, V10
	028 Move V1, V9
	029 Move V2, V8
	030 Move X0, X31
	031 Call 0x384CD60
	032 Move V11, V0
	033 Move V12, V1
	034 Move V13, V2
	035 Move V0, V10
	036 Move V1, V9
	037 Move V2, V8
	038 Move X0, X31
	039 Call 0x384CE4C
	040 Move X8, 0x852000
	041 Move X8, [X8+2104]
	042 Multiply S3, S11, S1
	043 Multiply S4, S12, S0
	044 Multiply S5, S13, S0
	045 Move X8, [X8]
	046 Multiply S6, S0, S1
	047 Multiply S16, S11, S13
	048 Multiply S17, S11, S12
	049 Move X8, [X8+184]
	050 Multiply S3, S2, S3
	051 Multiply S4, S2, S4
	052 Multiply S5, S1, S5
	053 Multiply S6, S2, S6
	054 Multiply S1, S16, S1
	055 Multiply S2, S17, S2
	056 Add S1, S1, S4
	057 Add S2, S2, S5
	058 Move V4, [X8]
	059 Move V5, [X8+8]
	060 Multiply S7, S12, S13
	061 Multiply S0, S7, S0
	062 Multiply S7, S11, S7
	063 Subtract S0, S3, S0
	064 Subtract S3, S6, S7
	065 Move [X19], S0
	066 Move [X19+8], S1
	067 Move [X19+8], S2
	068 Move [X19+16], S3
	069 Move [X19+16], D4
	070 Move [X19+24], S5
	071 Move X20, [X31+64]
	072 Move X19, [X31+72]
	073 Move X30, [X31+48]
	074 Move D9, [X31+32]
	075 Move D8, [X31+40]
	076 Move D11, [X31+16]
	077 Move D10, [X31+24]
	078 Move D13, [X31+80]
	079 Move D12, [X31+88]
	080 Return X0

Method: Unity.Mathematics.RigidTransform EulerYZX(System.Single x, System.Single y, System.Single z)

Disassembly:
	0x038CD54C LDR X1, [X8 + 0x40]
	0x038CD550 BL 0x1C16E00
	0x038CD554 CBZ X0, 0x38CD5D8
	0x038CD558 LDR W8, [X19 + 0x18]
	0x038CD55C CMP W8, 0x5
	0x038CD560 B.LS 0x38CD5D4
	0x038CD564 STR X21, [X19 + 0x48]
	0x038CD568 LDR V0, [X20 + 0x18]
	0x038CD56C LDR X0, [X22]
	0x038CD570 ADD X1, X31, 0xC
	0x038CD574 STR S0, [X31 + 0xC]
	0x038CD578 BL 0x1C16E04
	0x038CD57C MOV X20, X0
	0x038CD580 CBZ X0, 0x38CD598
	0x038CD584 LDR X8, [X19]
	0x038CD588 MOV X0, X20
	0x038CD58C LDR X1, [X8 + 0x40]
	0x038CD590 BL 0x1C16E00
	0x038CD594 CBZ X0, 0x38CD5D8
	0x038CD598 LDR W8, [X19 + 0x18]
	0x038CD59C CMP W8, 0x6
	0x038CD5A0 B.LS 0x38CD5D4
	0x038CD5A4 ADRP X8, 0x87E000
	0x038CD5A8 LDR X8, [X8 + 0xE0]
	0x038CD5AC STR X20, [X19 + 0x50]
	0x038CD5B0 MOV X1, X19
	0x038CD5B4 MOV X2, X31
	0x038CD5B8 LDR X0, [X8]
	0x038CD5BC BL 0x3227C5C
	0x038CD5C0 LDP X20, X19, [X31 + 0x40]
	0x038CD5C4 LDP X22, X21, [X31 + 0x30]
	0x038CD5C8 LDR X30, [X31 + 0x20]
	0x038CD5CC ADD X31, X31, 0x50
	0x038CD5D0 RET
	0x038CD5D4 BL 0x1C16F28
	0x038CD5D8 BL 0x1C16F44
	0x038CD5DC MOV X1, X31
	0x038CD5E0 BL 0x1C16DEC
	0x038CD5E4 BL 0x1C16F20
	0x038CD5E8 STP X30, X23, [X31 - 0x30]!
	0x038CD5EC STP X22, X21, [X31 + 0x10]
	0x038CD5F0 STP X20, X19, [X31 + 0x20]
	0x038CD5F4 ADRP X19, 0xB14000
	0x038CD5F8 ADRP X23, 0x826000
	0x038CD5FC LDRB W8, [X19 + 0x6B0]
	0x038CD600 LDR X23, [X23 + 0x9D0]
	0x038CD604 MOV X20, X2
	0x038CD608 MOV X21, X1
	0x038CD60C MOV X22, X0
	0x038CD610 TBNZ X8, 0x0, 0x38CD634
	0x038CD614 ADRP X0, 0x826000
	0x038CD618 LDR X0, [X0 + 0x9D0]
	0x038CD61C BL 0x1C16CF4
	0x038CD620 ADRP X0, 0x87E000
	0x038CD624 LDR X0, [X0 + 0xE8]
	0x038CD628 BL 0x1C16CF4
	0x038CD62C MOVZ W8, 0x1
	0x038CD630 STRB W8, [X19 + 0x6B0]
	0x038CD634 LDR X0, [X23]
	0x038CD638 MOVZ W1, 0x7
	0x038CD63C BL 0x1C16D6C
	0x038CD640 MOV X19, X0
	0x038CD644 MOV X0, X22
	0x038CD648 MOV X1, X21
	0x038CD64C MOV X2, X20
	0x038CD650 MOV X3, X31
	0x038CD654 BL 0x338FFB4
	0x038CD658 CBZ X19, 0x38CD838
	0x038CD65C MOV X23, X0

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xB15000
	011 Move W9, [X20+1740]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X8
	016 Compare W9, 0
	017 JumpIfNotEqual {23}
	018 Move X0, 0x852000
	019 Move X0, [X0+2104]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1740], W8
	023 Move S0, 0.5
	024 Multiply S10, S10, S0
	025 Multiply S9, S9, S0
	026 Multiply S8, S8, S0
	027 Move V0, V10
	028 Move V1, V9
	029 Move V2, V8
	030 Move X0, X31
	031 Call 0x384CD60
	032 Move V11, V0
	033 Move V12, V1
	034 Move V13, V2
	035 Move V0, V10
	036 Move V1, V9
	037 Move V2, V8
	038 Move X0, X31
	039 Call 0x384CE4C
	040 Move X8, 0x852000
	041 Move X8, [X8+2104]
	042 Multiply S3, S11, S1
	043 Multiply S4, S12, S0
	044 Multiply S5, S13, S0
	045 Move X8, [X8]
	046 Multiply S6, S0, S1
	047 Multiply S16, S11, S12
	048 Multiply S17, S13, S11
	049 Move X8, [X8+184]
	050 Multiply S3, S2, S3
	051 Multiply S4, S2, S4
	052 Multiply S5, S1, S5
	053 Multiply S6, S2, S6
	054 Multiply S2, S16, S2
	055 Multiply S1, S17, S1
	056 Subtract S1, S4, S1
	057 Add S2, S2, S5
	058 Move V4, [X8]
	059 Move V5, [X8+8]
	060 Multiply S7, S12, S13
	061 Multiply S16, S11, S7
	062 Multiply S0, S7, S0
	063 Subtract S0, S3, S0
	064 Add S3, S16, S6
	065 Move [X19], S0
	066 Move [X19+8], S1
	067 Move [X19+8], S2
	068 Move [X19+16], S3
	069 Move [X19+16], D4
	070 Move [X19+24], S5
	071 Move X20, [X31+64]
	072 Move X19, [X31+72]
	073 Move X30, [X31+48]
	074 Move D9, [X31+32]
	075 Move D8, [X31+40]
	076 Move D11, [X31+16]
	077 Move D10, [X31+24]
	078 Move D13, [X31+80]
	079 Move D12, [X31+88]
	080 Return X0

Method: Unity.Mathematics.RigidTransform EulerZXY(System.Single x, System.Single y, System.Single z)

Disassembly:
	0x038CD660 CBZ X0, 0x38CD678
	0x038CD664 LDR X8, [X19]
	0x038CD668 MOV X0, X23
	0x038CD66C LDR X1, [X8 + 0x40]
	0x038CD670 BL 0x1C16E00
	0x038CD674 CBZ X0, 0x38CD82C
	0x038CD678 LDR W8, [X19 + 0x18]
	0x038CD67C CBZ W8, 0x38CD828
	0x038CD680 ADD X0, X22, 0x4
	0x038CD684 MOV X1, X21
	0x038CD688 MOV X2, X20
	0x038CD68C MOV X3, X31
	0x038CD690 STR X23, [X19 + 0x20]
	0x038CD694 BL 0x338FFB4
	0x038CD698 MOV X23, X0
	0x038CD69C CBZ X0, 0x38CD6B4
	0x038CD6A0 LDR X8, [X19]
	0x038CD6A4 MOV X0, X23
	0x038CD6A8 LDR X1, [X8 + 0x40]
	0x038CD6AC BL 0x1C16E00
	0x038CD6B0 CBZ X0, 0x38CD82C
	0x038CD6B4 LDR W8, [X19 + 0x18]
	0x038CD6B8 CMP W8, 0x1
	0x038CD6BC B.LS 0x38CD828
	0x038CD6C0 ADD X0, X22, 0x8
	0x038CD6C4 MOV X1, X21
	0x038CD6C8 MOV X2, X20
	0x038CD6CC MOV X3, X31
	0x038CD6D0 STR X23, [X19 + 0x28]
	0x038CD6D4 BL 0x338FFB4
	0x038CD6D8 MOV X23, X0
	0x038CD6DC CBZ X0, 0x38CD6F4
	0x038CD6E0 LDR X8, [X19]
	0x038CD6E4 MOV X0, X23
	0x038CD6E8 LDR X1, [X8 + 0x40]
	0x038CD6EC BL 0x1C16E00
	0x038CD6F0 CBZ X0, 0x38CD82C
	0x038CD6F4 LDR W8, [X19 + 0x18]
	0x038CD6F8 CMP W8, 0x2
	0x038CD6FC B.LS 0x38CD828
	0x038CD700 ADD X0, X22, 0xC
	0x038CD704 MOV X1, X21
	0x038CD708 MOV X2, X20
	0x038CD70C MOV X3, X31
	0x038CD710 STR X23, [X19 + 0x30]
	0x038CD714 BL 0x338FFB4
	0x038CD718 MOV X23, X0
	0x038CD71C CBZ X0, 0x38CD734
	0x038CD720 LDR X8, [X19]
	0x038CD724 MOV X0, X23
	0x038CD728 LDR X1, [X8 + 0x40]
	0x038CD72C BL 0x1C16E00
	0x038CD730 CBZ X0, 0x38CD82C
	0x038CD734 LDR W8, [X19 + 0x18]
	0x038CD738 CMP W8, 0x3
	0x038CD73C B.LS 0x38CD828
	0x038CD740 ADD X0, X22, 0x10
	0x038CD744 MOV X1, X21
	0x038CD748 MOV X2, X20
	0x038CD74C MOV X3, X31
	0x038CD750 STR X23, [X19 + 0x38]
	0x038CD754 BL 0x338FFB4
	0x038CD758 MOV X23, X0
	0x038CD75C CBZ X0, 0x38CD774
	0x038CD760 LDR X8, [X19]
	0x038CD764 MOV X0, X23
	0x038CD768 LDR X1, [X8 + 0x40]
	0x038CD76C BL 0x1C16E00
	0x038CD770 CBZ X0, 0x38CD82C

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xB15000
	011 Move W9, [X20+1741]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X8
	016 Compare W9, 0
	017 JumpIfNotEqual {23}
	018 Move X0, 0x852000
	019 Move X0, [X0+2104]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1741], W8
	023 Move S0, 0.5
	024 Multiply S10, S10, S0
	025 Multiply S9, S9, S0
	026 Multiply S8, S8, S0
	027 Move V0, V10
	028 Move V1, V9
	029 Move V2, V8
	030 Move X0, X31
	031 Call 0x384CD60
	032 Move V11, V0
	033 Move V12, V1
	034 Move V13, V2
	035 Move V0, V10
	036 Move V1, V9
	037 Move V2, V8
	038 Move X0, X31
	039 Call 0x384CE4C
	040 Move X8, 0x852000
	041 Move X8, [X8+2104]
	042 Multiply S3, S11, S1
	043 Multiply S4, S12, S0
	044 Multiply S5, S13, S0
	045 Move X8, [X8]
	046 Multiply S6, S0, S1
	047 Multiply S16, S13, S11
	048 Multiply S17, S12, S11
	049 Move X8, [X8+184]
	050 Multiply S3, S2, S3
	051 Multiply S4, S2, S4
	052 Multiply S5, S1, S5
	053 Multiply S6, S2, S6
	054 Multiply S1, S16, S1
	055 Multiply S2, S17, S2
	056 Subtract S1, S4, S1
	057 Subtract S2, S5, S2
	058 Move V4, [X8]
	059 Move V5, [X8+8]
	060 Multiply S7, S12, S13
	061 Multiply S0, S7, S0
	062 Multiply S7, S11, S7
	063 Add S0, S0, S3
	064 Add S3, S7, S6
	065 Move [X19], S0
	066 Move [X19+8], S1
	067 Move [X19+8], S2
	068 Move [X19+16], S3
	069 Move [X19+16], D4
	070 Move [X19+24], S5
	071 Move X20, [X31+64]
	072 Move X19, [X31+72]
	073 Move X30, [X31+48]
	074 Move D9, [X31+32]
	075 Move D8, [X31+40]
	076 Move D11, [X31+16]
	077 Move D10, [X31+24]
	078 Move D13, [X31+80]
	079 Move D12, [X31+88]
	080 Return X0

Method: Unity.Mathematics.RigidTransform EulerZYX(System.Single x, System.Single y, System.Single z)

Disassembly:
	0x038CD774 LDR W8, [X19 + 0x18]
	0x038CD778 CMP W8, 0x4
	0x038CD77C B.LS 0x38CD828
	0x038CD780 ADD X0, X22, 0x14
	0x038CD784 MOV X1, X21
	0x038CD788 MOV X2, X20
	0x038CD78C MOV X3, X31
	0x038CD790 STR X23, [X19 + 0x40]
	0x038CD794 BL 0x338FFB4
	0x038CD798 MOV X23, X0
	0x038CD79C CBZ X0, 0x38CD7B4
	0x038CD7A0 LDR X8, [X19]
	0x038CD7A4 MOV X0, X23
	0x038CD7A8 LDR X1, [X8 + 0x40]
	0x038CD7AC BL 0x1C16E00
	0x038CD7B0 CBZ X0, 0x38CD82C
	0x038CD7B4 LDR W8, [X19 + 0x18]
	0x038CD7B8 CMP W8, 0x5
	0x038CD7BC B.LS 0x38CD828
	0x038CD7C0 ADD X0, X22, 0x18
	0x038CD7C4 MOV X1, X21
	0x038CD7C8 MOV X2, X20
	0x038CD7CC MOV X3, X31
	0x038CD7D0 STR X23, [X19 + 0x48]
	0x038CD7D4 BL 0x338FFB4
	0x038CD7D8 MOV X20, X0
	0x038CD7DC CBZ X0, 0x38CD7F4
	0x038CD7E0 LDR X8, [X19]
	0x038CD7E4 MOV X0, X20
	0x038CD7E8 LDR X1, [X8 + 0x40]
	0x038CD7EC BL 0x1C16E00
	0x038CD7F0 CBZ X0, 0x38CD82C
	0x038CD7F4 LDR W8, [X19 + 0x18]
	0x038CD7F8 CMP W8, 0x6
	0x038CD7FC B.LS 0x38CD828
	0x038CD800 ADRP X8, 0x87E000
	0x038CD804 LDR X8, [X8 + 0xE8]
	0x038CD808 STR X20, [X19 + 0x50]
	0x038CD80C MOV X1, X19
	0x038CD810 LDP X20, X19, [X31 + 0x20]
	0x038CD814 LDR X0, [X8]
	0x038CD818 LDP X22, X21, [X31 + 0x10]
	0x038CD81C MOV X2, X31
	0x038CD820 LDP X30, X23, [X31], #0x30
	0x038CD824 B 0x3227C5C
	0x038CD828 BL 0x1C16F28
	0x038CD82C BL 0x1C16F44
	0x038CD830 MOV X1, X31
	0x038CD834 BL 0x1C16DEC
	0x038CD838 BL 0x1C16F20
	0x038CD83C STR X30, [X31 - 0x20]!
	0x038CD840 STP X20, X19, [X31 + 0x10]
	0x038CD844 ADRP X19, 0xB14000
	0x038CD848 ADRP X20, 0x87E000
	0x038CD84C LDRB W8, [X19 + 0x6B1]
	0x038CD850 LDR X20, [X20 + 0xD8]
	0x038CD854 TBNZ X8, 0x0, 0x38CD86C
	0x038CD858 ADRP X0, 0x87E000
	0x038CD85C LDR X0, [X0 + 0xD8]
	0x038CD860 BL 0x1C16CF4
	0x038CD864 MOVZ W8, 0x1
	0x038CD868 STRB W8, [X19 + 0x6B1]
	0x038CD86C LDR X8, [X20]
	0x038CD870 ADRP X9, 0xFFFFFFFFFD21F000
	0x038CD874 LDR V0, [X9 + 0xBB]
	0x038CD878 LDP X20, X19, [X31 + 0x10]
	0x038CD87C LDR X8, [X8 + 0xB8]
	0x038CD880 STR V0, [X8]
	0x038CD884 STR X31, [X8 + 0x10]

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xB15000
	011 Move W9, [X20+1742]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X8
	016 Compare W9, 0
	017 JumpIfNotEqual {23}
	018 Move X0, 0x852000
	019 Move X0, [X0+2104]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1742], W8
	023 Move S0, 0.5
	024 Multiply S10, S10, S0
	025 Multiply S9, S9, S0
	026 Multiply S8, S8, S0
	027 Move V0, V10
	028 Move V1, V9
	029 Move V2, V8
	030 Move X0, X31
	031 Call 0x384CD60
	032 Move V11, V0
	033 Move V12, V1
	034 Move V13, V2
	035 Move V0, V10
	036 Move V1, V9
	037 Move V2, V8
	038 Move X0, X31
	039 Call 0x384CE4C
	040 Move X8, 0x852000
	041 Move X8, [X8+2104]
	042 Multiply S3, S11, S1
	043 Multiply S4, S12, S0
	044 Multiply S5, S13, S0
	045 Move X8, [X8]
	046 Multiply S6, S0, S1
	047 Multiply S16, S11, S12
	048 Multiply S17, S13, S11
	049 Move X8, [X8+184]
	050 Multiply S3, S2, S3
	051 Multiply S4, S2, S4
	052 Multiply S5, S1, S5
	053 Multiply S6, S2, S6
	054 Multiply S2, S16, S2
	055 Multiply S1, S17, S1
	056 Subtract S1, S4, S1
	057 Add S2, S2, S5
	058 Move V4, [X8]
	059 Move V5, [X8+8]
	060 Multiply S7, S12, S13
	061 Multiply S0, S7, S0
	062 Multiply S7, S11, S7
	063 Add S0, S0, S3
	064 Subtract S3, S6, S7
	065 Move [X19], S0
	066 Move [X19+8], S1
	067 Move [X19+8], S2
	068 Move [X19+16], S3
	069 Move [X19+16], D4
	070 Move [X19+24], S5
	071 Move X20, [X31+64]
	072 Move X19, [X31+72]
	073 Move X30, [X31+48]
	074 Move D9, [X31+32]
	075 Move D8, [X31+40]
	076 Move D11, [X31+16]
	077 Move D10, [X31+24]
	078 Move D13, [X31+80]
	079 Move D12, [X31+88]
	080 Return X0

Method: Unity.Mathematics.RigidTransform Euler(Unity.Mathematics.float3 xyz, Unity.Mathematics.math/RotationOrder order = 4)

Disassembly:
	0x038CD888 STR W31, [X8 + 0x18]
	0x038CD88C LDR X30, [X31], #0x20
	0x038CD890 RET
	0x038CD894 STP W1, W2, [X0]
	0x038CD898 RET
	0x038CD89C STR X1, [X0]
	0x038CD8A0 RET
	0x038CD8A4 STP W1, W1, [X0]
	0x038CD8A8 RET
	0x038CD8AC AND W8, W1, 0x1
	0x038CD8B0 STP W8, W8, [X0]
	0x038CD8B4 RET
	0x038CD8B8 AND W8, W1, 0x1
	0x038CD8BC UBFM W9, W1, 0x8, 0x8
	0x038CD8C0 STP W8, W9, [X0]
	0x038CD8C4 RET
	0x038CD8C8 STP W1, W1, [X0]
	0x038CD8CC RET
	0x038CD8D0 STR X1, [X0]
	0x038CD8D4 RET
	0x038CD8D8 FCVTZS W8, S0
	0x038CD8DC FCVTZU W9, S0
	0x038CD8E0 FCMP S0, 0x0
	0x038CD8E4 CSEL W8, W8, W9, MI
	0x038CD8E8 STP W8, W8, [X0]
	0x038CD8EC RET
	0x038CD8F0 FCVTZS W8, S0
	0x038CD8F4 FCVTZU W9, S0
	0x038CD8F8 FCMP S0, 0x0
	0x038CD8FC FCVTZS W10, S1
	0x038CD900 FCVTZU W11, S1
	0x038CD904 CSEL W8, W8, W9, MI
	0x038CD908 FCMP S1, 0x0
	0x038CD90C CSEL W9, W10, W11, MI
	0x038CD910 STP W8, W9, [X0]
	0x038CD914 RET
	0x038CD918 FCVTZS W8, D0
	0x038CD91C FCVTZU W9, D0
	0x038CD920 FCMP D0, 0x0
	0x038CD924 CSEL W8, W8, W9, MI
	0x038CD928 STP W8, W8, [X0]
	0x038CD92C RET
	0x038CD930 FCVTZS W8, D0
	0x038CD934 FCVTZU W9, D0
	0x038CD938 FCMP D0, 0x0
	0x038CD93C FCVTZS W10, D1
	0x038CD940 FCVTZU W11, D1
	0x038CD944 CSEL W8, W8, W9, MI
	0x038CD948 FCMP D1, 0x0
	0x038CD94C CSEL W9, W10, W11, MI
	0x038CD950 STP W8, W9, [X0]
	0x038CD954 RET
	0x038CD958 MOV W0, W0
	0x038CD95C BFM X0, X0, 0x20, 0x1F
	0x038CD960 RET
	0x038CD964 ANDS W31, W0, 0x1
	0x038CD968 MOVZ X8, 0x1
	0x038CD96C CSEL X8, X8, X31, NE
	0x038CD970 BFM X8, X0, 0x0, 0x0
	0x038CD974 MOV X0, X8
	0x038CD978 RET
	0x038CD97C UBFM X8, X0, 0x8, 0x3F
	0x038CD980 AND X0, X0, 0x1
	0x038CD984 BFM X0, X8, 0x20, 0x0
	0x038CD988 RET
	0x038CD98C MOV W0, W0
	0x038CD990 BFM X0, X0, 0x20, 0x1F
	0x038CD994 RET
	0x038CD998 RET
	0x038CD99C FCVTZS W8, S0
	0x038CD9A0 FCVTZU W9, S0
	0x038CD9A4 FCMP S0, 0x0
	0x038CD9A8 CSEL W0, W8, W9, MI
	0x038CD9AC BFM X0, X0, 0x20, 0x1F
	0x038CD9B0 RET
	0x038CD9B4 FCVTZS W8, S0
	0x038CD9B8 FCVTZU W9, S0
	0x038CD9BC FCMP S0, 0x0
	0x038CD9C0 FCVTZS W10, S1
	0x038CD9C4 FCVTZU W11, S1
	0x038CD9C8 CSEL W0, W8, W9, MI
	0x038CD9CC FCMP S1, 0x0
	0x038CD9D0 CSEL W8, W10, W11, MI
	0x038CD9D4 BFM X0, X8, 0x20, 0x1F
	0x038CD9D8 RET
	0x038CD9DC FCVTZS W8, D0
	0x038CD9E0 FCVTZU W9, D0
	0x038CD9E4 FCMP D0, 0x0
	0x038CD9E8 CSEL W0, W8, W9, MI
	0x038CD9EC BFM X0, X0, 0x20, 0x1F
	0x038CD9F0 RET
	0x038CD9F4 FCVTZS W8, D0
	0x038CD9F8 FCVTZU W9, D0
	0x038CD9FC FCMP D0, 0x0
	0x038CDA00 FCVTZS W10, D1
	0x038CDA04 FCVTZU W11, D1
	0x038CDA08 CSEL W0, W8, W9, MI
	0x038CDA0C FCMP D1, 0x0
	0x038CDA10 CSEL W8, W10, W11, MI
	0x038CDA14 BFM X0, X8, 0x20, 0x1F
	0x038CDA18 RET
	0x038CDA1C AND X8, X0, 0x0
	0x038CDA20 UBFM X9, X1, 0x20, 0x3F
	0x038CDA24 MUL W10, W1, W0
	0x038CDA28 MUL X8, X8, X9
	0x038CDA2C ORR X0, X8, X10, 0x0
	0x038CDA30 RET
	0x038CDA34 UBFM X8, X0, 0x20, 0x3F
	0x038CDA38 MUL W0, W0, W1
	0x038CDA3C MUL W8, W8, W1
	0x038CDA40 BFM X0, X8, 0x20, 0x1F
	0x038CDA44 RET
	0x038CDA48 UBFM X9, X1, 0x20, 0x3F
	0x038CDA4C MUL W8, W1, W0
	0x038CDA50 MUL W9, W9, W0
	0x038CDA54 BFM X8, X9, 0x20, 0x1F
	0x038CDA58 MOV X0, X8
	0x038CDA5C RET
	0x038CDA60 AND X8, X1, 0x0
	0x038CDA64 ADD X8, X8, X0
	0x038CDA68 ADD W9, W1, W0
	0x038CDA6C AND X8, X8, 0x0
	0x038CDA70 ORR X0, X8, X9, 0x0
	0x038CDA74 RET
	0x038CDA78 UBFM X8, X0, 0x20, 0x3F
	0x038CDA7C ADD W0, W0, W1
	0x038CDA80 ADD W8, W8, W1
	0x038CDA84 BFM X0, X8, 0x20, 0x1F
	0x038CDA88 RET
	0x038CDA8C UBFM X9, X1, 0x20, 0x3F
	0x038CDA90 ADD W8, W1, W0
	0x038CDA94 ADD W9, W9, W0
	0x038CDA98 BFM X8, X9, 0x20, 0x1F
	0x038CDA9C MOV X0, X8
	0x038CDAA0 RET
	0x038CDAA4 AND X8, X1, 0x0
	0x038CDAA8 SUB X8, X0, X8
	0x038CDAAC SUB W9, W0, W1
	0x038CDAB0 AND X8, X8, 0x0
	0x038CDAB4 ORR X0, X8, X9, 0x0
	0x038CDAB8 RET
	0x038CDABC UBFM X8, X0, 0x20, 0x3F
	0x038CDAC0 SUB W0, W0, W1
	0x038CDAC4 SUB W8, W8, W1
	0x038CDAC8 BFM X0, X8, 0x20, 0x1F
	0x038CDACC RET
	0x038CDAD0 UBFM X9, X1, 0x20, 0x3F
	0x038CDAD4 SUB W8, W0, W1
	0x038CDAD8 SUB W9, W0, W9
	0x038CDADC BFM X8, X9, 0x20, 0x1F
	0x038CDAE0 MOV X0, X8
	0x038CDAE4 RET
	0x038CDAE8 UBFM X8, X0, 0x20, 0x3F
	0x038CDAEC UBFM X9, X1, 0x20, 0x3F
	0x038CDAF0 UDIV W0, W0, W1
	0x038CDAF4 UDIV W8, W8, W9
	0x038CDAF8 BFM X0, X8, 0x20, 0x1F
	0x038CDAFC RET
	0x038CDB00 UBFM X8, X0, 0x20, 0x3F
	0x038CDB04 UDIV W0, W0, W1
	0x038CDB08 UDIV W8, W8, W1
	0x038CDB0C BFM X0, X8, 0x20, 0x1F
	0x038CDB10 RET
	0x038CDB14 UBFM X9, X1, 0x20, 0x3F
	0x038CDB18 UDIV W8, W0, W1
	0x038CDB1C UDIV W9, W0, W9
	0x038CDB20 BFM X8, X9, 0x20, 0x1F
	0x038CDB24 MOV X0, X8
	0x038CDB28 RET
	0x038CDB2C UBFM X8, X0, 0x20, 0x3F
	0x038CDB30 UBFM X9, X1, 0x20, 0x3F
	0x038CDB34 UDIV W10, W0, W1
	0x038CDB38 MSUB W0, W10, W1, W0
	0x038CDB3C UDIV W10, W8, W9
	0x038CDB40 MSUB W8, W10, W9, W8
	0x038CDB44 BFM X0, X8, 0x20, 0x1F
	0x038CDB48 RET
	0x038CDB4C UBFM X8, X0, 0x20, 0x3F
	0x038CDB50 UDIV W9, W0, W1
	0x038CDB54 MSUB W0, W9, W1, W0
	0x038CDB58 UDIV W9, W8, W1
	0x038CDB5C MSUB W8, W9, W1, W8
	0x038CDB60 BFM X0, X8, 0x20, 0x1F
	0x038CDB64 RET
	0x038CDB68 UBFM X9, X1, 0x20, 0x3F
	0x038CDB6C UDIV W8, W0, W1
	0x038CDB70 UDIV W10, W0, W9
	0x038CDB74 MSUB W8, W8, W1, W0
	0x038CDB78 MSUB W9, W10, W9, W0
	0x038CDB7C BFM X8, X9, 0x20, 0x1F
	0x038CDB80 MOV X0, X8
	0x038CDB84 RET
	0x038CDB88 MOVZ X9, 0x1
	0x038CDB8C ADD X9, X0, X9
	0x038CDB90 ADD W8, W0, 0x1
	0x038CDB94 AND X9, X9, 0x0
	0x038CDB98 ORR X0, X9, X8, 0x0
	0x038CDB9C RET
	0x038CDBA0 MOV X9, INVALID
	0x038CDBA4 ADD X9, X0, X9
	0x038CDBA8 SUB W8, W0, 0x1
	0x038CDBAC AND X9, X9, 0x0
	0x038CDBB0 ORR X0, X9, X8, 0x0
	0x038CDBB4 RET
	0x038CDBB8 UBFM X8, X0, 0x20, 0x3F
	0x038CDBBC UBFM X9, X1, 0x20, 0x3F
	0x038CDBC0 CMP W8, W9
	0x038CDBC4 CSET W8, CC
	0x038CDBC8 CMP W0, W1
	0x038CDBCC CSET W0, CC
	0x038CDBD0 BFM X0, X8, 0x38, 0x0
	0x038CDBD4 RET
	0x038CDBD8 UBFM X8, X0, 0x20, 0x3F
	0x038CDBDC CMP W8, W1
	0x038CDBE0 CSET W8, CC
	0x038CDBE4 CMP W0, W1
	0x038CDBE8 CSET W0, CC
	0x038CDBEC BFM X0, X8, 0x38, 0x0
	0x038CDBF0 RET
	0x038CDBF4 UBFM X8, X1, 0x20, 0x3F
	0x038CDBF8 CMP W8, W0
	0x038CDBFC CSET W8, HI
	0x038CDC00 CMP W1, W0
	0x038CDC04 CSET W0, HI
	0x038CDC08 BFM X0, X8, 0x38, 0x0
	0x038CDC0C RET
	0x038CDC10 UBFM X8, X0, 0x20, 0x3F
	0x038CDC14 UBFM X9, X1, 0x20, 0x3F
	0x038CDC18 CMP W8, W9
	0x038CDC1C CSET W8, LS
	0x038CDC20 CMP W0, W1
	0x038CDC24 CSET W0, LS
	0x038CDC28 BFM X0, X8, 0x38, 0x0
	0x038CDC2C RET
	0x038CDC30 UBFM X8, X0, 0x20, 0x3F
	0x038CDC34 CMP W8, W1
	0x038CDC38 CSET W8, LS
	0x038CDC3C CMP W0, W1
	0x038CDC40 CSET W0, LS
	0x038CDC44 BFM X0, X8, 0x38, 0x0
	0x038CDC48 RET
	0x038CDC4C UBFM X8, X1, 0x20, 0x3F
	0x038CDC50 CMP W8, W0
	0x038CDC54 CSET W8, CS
	0x038CDC58 CMP W1, W0
	0x038CDC5C CSET W0, CS
	0x038CDC60 BFM X0, X8, 0x38, 0x0
	0x038CDC64 RET
	0x038CDC68 UBFM X8, X0, 0x20, 0x3F
	0x038CDC6C UBFM X9, X1, 0x20, 0x3F
	0x038CDC70 CMP W8, W9
	0x038CDC74 CSET W8, HI
	0x038CDC78 CMP W0, W1
	0x038CDC7C CSET W0, HI
	0x038CDC80 BFM X0, X8, 0x38, 0x0
	0x038CDC84 RET
	0x038CDC88 UBFM X8, X0, 0x20, 0x3F
	0x038CDC8C CMP W8, W1
	0x038CDC90 CSET W8, HI
	0x038CDC94 CMP W0, W1
	0x038CDC98 CSET W0, HI
	0x038CDC9C BFM X0, X8, 0x38, 0x0
	0x038CDCA0 RET
	0x038CDCA4 UBFM X8, X1, 0x20, 0x3F
	0x038CDCA8 CMP W8, W0
	0x038CDCAC CSET W8, CC
	0x038CDCB0 CMP W1, W0
	0x038CDCB4 CSET W0, CC
	0x038CDCB8 BFM X0, X8, 0x38, 0x0
	0x038CDCBC RET
	0x038CDCC0 UBFM X8, X0, 0x20, 0x3F
	0x038CDCC4 UBFM X9, X1, 0x20, 0x3F
	0x038CDCC8 CMP W8, W9
	0x038CDCCC CSET W8, CS
	0x038CDCD0 CMP W0, W1
	0x038CDCD4 CSET W0, CS
	0x038CDCD8 BFM X0, X8, 0x38, 0x0
	0x038CDCDC RET
	0x038CDCE0 UBFM X8, X0, 0x20, 0x3F
	0x038CDCE4 CMP W8, W1
	0x038CDCE8 CSET W8, CS
	0x038CDCEC CMP W0, W1
	0x038CDCF0 CSET W0, CS
	0x038CDCF4 BFM X0, X8, 0x38, 0x0
	0x038CDCF8 RET
	0x038CDCFC UBFM X8, X1, 0x20, 0x3F
	0x038CDD00 CMP W8, W0
	0x038CDD04 CSET W8, LS
	0x038CDD08 CMP W1, W0
	0x038CDD0C CSET W0, LS
	0x038CDD10 BFM X0, X8, 0x38, 0x0
	0x038CDD14 RET
	0x038CDD18 AND X8, X0, 0x0
	0x038CDD1C SUB W9, W31, W0
	0x038CDD20 SUB X0, X9, X8
	0x038CDD24 RET
	0x038CDD28 RET
	0x038CDD2C UBFM X8, X0, 0x20, 0x3F
	0x038CDD30 LSLV W0, W0, W1
	0x038CDD34 LSLV W8, W8, W1
	0x038CDD38 BFM X0, X8, 0x20, 0x1F
	0x038CDD3C RET
	0x038CDD40 UBFM X8, X0, 0x20, 0x3F
	0x038CDD44 LSRV W0, W0, W1
	0x038CDD48 LSRV W8, W8, W1
	0x038CDD4C BFM X0, X8, 0x20, 0x1F
	0x038CDD50 RET
	0x038CDD54 UBFM X8, X0, 0x20, 0x3F
	0x038CDD58 UBFM X9, X1, 0x20, 0x3F
	0x038CDD5C CMP W8, W9
	0x038CDD60 CSET W8, EQ
	0x038CDD64 CMP W0, W1
	0x038CDD68 CSET W0, EQ
	0x038CDD6C BFM X0, X8, 0x38, 0x0
	0x038CDD70 RET
	0x038CDD74 UBFM X8, X0, 0x20, 0x3F
	0x038CDD78 CMP W8, W1
	0x038CDD7C CSET W8, EQ
	0x038CDD80 CMP W0, W1
	0x038CDD84 CSET W0, EQ
	0x038CDD88 BFM X0, X8, 0x38, 0x0
	0x038CDD8C RET
	0x038CDD90 UBFM X8, X1, 0x20, 0x3F
	0x038CDD94 CMP W8, W0
	0x038CDD98 CSET W8, EQ
	0x038CDD9C CMP W1, W0
	0x038CDDA0 CSET W0, EQ
	0x038CDDA4 BFM X0, X8, 0x38, 0x0
	0x038CDDA8 RET
	0x038CDDAC UBFM X8, X0, 0x20, 0x3F
	0x038CDDB0 UBFM X9, X1, 0x20, 0x3F
	0x038CDDB4 CMP W8, W9
	0x038CDDB8 CSET W8, NE
	0x038CDDBC CMP W0, W1
	0x038CDDC0 CSET W0, NE
	0x038CDDC4 BFM X0, X8, 0x38, 0x0
	0x038CDDC8 RET
	0x038CDDCC UBFM X8, X0, 0x20, 0x3F

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0xB15000
	012 Move W9, [X21+1705]
	013 Move W20, W0
	014 Move V8, V2
	015 Move V9, V1
	016 Move V10, V0
	017 Move X19, X8
	018 Move TEMP, X9
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x87F000
	023 Move X0, [X0+216]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+1705], W8
	027 And W8, W20, 255
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X9, -47403008
	030 And X8, X20, 255
	031 Add X9, X9, 2593
	032 NotImplemented "Instruction ADR not yet implemented."
	033 Move W11, [X9]
	034 Add X10, X10, X11
	035 CallNoReturn X10
	036 Move X20, 0xB15000
	037 Move W8, [X20+1737]
	038 Compare W8, 0
	039 JumpIfNotEqual {45}
	040 Move X0, 0x852000
	041 Move X0, [X0+2104]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X20+1737], W8
	045 Move S0, 0.5
	046 Multiply S10, S10, S0
	047 Multiply S9, S9, S0
	048 Multiply S8, S8, S0
	049 Move V0, V10
	050 Move V1, V9
	051 Move V2, V8
	052 Move X0, X31
	053 Call 0x384CD60
	054 Move V11, V0
	055 Move V12, V1
	056 Move V13, V2
	057 Move V0, V10
	058 Move V1, V9
	059 Move V2, V8
	060 Move X0, X31
	061 Call 0x384CE4C
	062 Move X8, 0x852000
	063 Move X8, [X8+2104]
	064 Multiply S3, S11, S1
	065 Multiply S4, S12, S0
	066 Multiply S5, S13, S0
	067 Move X8, [X8]
	068 Multiply S6, S0, S1
	069 Multiply S7, S12, S13
	070 Multiply S16, S11, S13
	071 Move X8, [X8+184]
	072 Multiply S17, S12, S11
	073 Multiply S3, S2, S3
	074 Multiply S4, S2, S4
	075 Multiply S5, S1, S5
	076 Multiply S6, S2, S6
	077 Multiply S1, S16, S1
	078 Multiply S2, S17, S2
	079 Multiply S0, S7, S0
	080 Multiply S16, S11, S7
	081 Subtract S0, S3, S0
	082 Add S1, S1, S4
	083 Subtract S2, S5, S2
	084 Move X8, 0x87F000
	085 Move X8, [X8+216]
	086 Move X8, [X8]
	087 Move X8, [X8+184]
	088 NotImplemented "Instruction LDUR not yet implemented."
	089 Move V1, [X8]
	090 Move [X19+12], V0
	091 Move [X19], V1
	092 Move X20, 0xB15000
	093 Move W8, [X20+1738]
	094 Compare W8, 0
	095 JumpIfNotEqual {101}
	096 Move X0, 0x852000
	097 Move X0, [X0+2104]
	098 Call 0x1C17CF4
	099 Move W8, 1
	100 Move [X20+1738], W8
	101 Move S0, 0.5
	102 Multiply S10, S10, S0
	103 Multiply S9, S9, S0
	104 Multiply S8, S8, S0
	105 Move V0, V10
	106 Move V1, V9
	107 Move V2, V8
	108 Move X0, X31
	109 Call 0x384CD60
	110 Move V11, V0
	111 Move V12, V1
	112 Move V13, V2
	113 Move V0, V10
	114 Move V1, V9
	115 Move V2, V8
	116 Move X0, X31
	117 Call 0x384CE4C
	118 Move X8, 0x852000
	119 Move X8, [X8+2104]
	120 Multiply S3, S11, S1
	121 Multiply S4, S12, S0
	122 Multiply S5, S13, S0
	123 Move X8, [X8]
	124 Multiply S6, S0, S1
	125 Multiply S7, S12, S13
	126 Multiply S16, S11, S13
	127 Move X8, [X8+184]
	128 Multiply S17, S12, S11
	129 Multiply S3, S2, S3
	130 Multiply S4, S2, S4
	131 Multiply S5, S1, S5
	132 Multiply S6, S2, S6
	133 Multiply S0, S7, S0
	134 Multiply S1, S16, S1
	135 Multiply S2, S17, S2
	136 Multiply S7, S11, S7
	137 Add S0, S0, S3
	138 Add S1, S1, S4
	139 Subtract S2, S5, S2
	140 Move X20, 0xB15000
	141 Move W8, [X20+1739]
	142 Compare W8, 0
	143 JumpIfNotEqual {149}
	144 Move X0, 0x852000
	145 Move X0, [X0+2104]
	146 Call 0x1C17CF4
	147 Move W8, 1
	148 Move [X20+1739], W8
	149 Move S0, 0.5
	150 Multiply S10, S10, S0
	151 Multiply S9, S9, S0
	152 Multiply S8, S8, S0
	153 Move V0, V10
	154 Move V1, V9
	155 Move V2, V8
	156 Move X0, X31
	157 Call 0x384CD60
	158 Move V11, V0
	159 Move V12, V1
	160 Move V13, V2
	161 Move V0, V10
	162 Move V1, V9
	163 Move V2, V8
	164 Move X0, X31
	165 Call 0x384CE4C
	166 Move X8, 0x852000
	167 Move X8, [X8+2104]
	168 Multiply S3, S11, S1
	169 Multiply S4, S12, S0
	170 Multiply S5, S13, S0
	171 Move X8, [X8]
	172 Multiply S7, S12, S13
	173 Multiply S16, S11, S13
	174 Multiply S6, S0, S1
	175 Move X8, [X8+184]
	176 Multiply S17, S11, S12
	177 Multiply S3, S2, S3
	178 Multiply S4, S2, S4
	179 Multiply S5, S1, S5
	180 Multiply S1, S16, S1
	181 Multiply S0, S7, S0
	182 Multiply S6, S2, S6
	183 Multiply S2, S17, S2
	184 Multiply S7, S11, S7
	185 Subtract S0, S3, S0
	186 Add S1, S1, S4
	187 Move X20, 0xB15000
	188 Move W8, [X20+1740]
	189 Compare W8, 0
	190 JumpIfNotEqual {196}
	191 Move X0, 0x852000
	192 Move X0, [X0+2104]
	193 Call 0x1C17CF4
	194 Move W8, 1
	195 Move [X20+1740], W8
	196 Move S0, 0.5
	197 Multiply S10, S10, S0
	198 Multiply S9, S9, S0
	199 Multiply S8, S8, S0
	200 Move V0, V10
	201 Move V1, V9
	202 Move V2, V8
	203 Move X0, X31
	204 Call 0x384CD60
	205 Move V11, V0
	206 Move V12, V1
	207 Move V13, V2
	208 Move V0, V10
	209 Move V1, V9
	210 Move V2, V8
	211 Move X0, X31
	212 Call 0x384CE4C
	213 Move X8, 0x852000
	214 Move X8, [X8+2104]
	215 Multiply S3, S11, S1
	216 Multiply S4, S12, S0
	217 Multiply S5, S13, S0
	218 Move X8, [X8]
	219 Multiply S6, S0, S1
	220 Multiply S7, S12, S13
	221 Multiply S16, S11, S12
	222 Move X8, [X8+184]
	223 Multiply S17, S13, S11
	224 Multiply S3, S2, S3
	225 Multiply S4, S2, S4
	226 Multiply S5, S1, S5
	227 Multiply S6, S2, S6
	228 Multiply S2, S16, S2
	229 Multiply S1, S17, S1
	230 Multiply S0, S7, S0
	231 Multiply S16, S11, S7
	232 Subtract S0, S3, S0
	233 Subtract S1, S4, S1
	234 Add S2, S2, S5
	235 Add S3, S16, S6
	236 Move X20, 0xB15000
	237 Move W8, [X20+1741]
	238 Compare W8, 0
	239 JumpIfNotEqual {245}
	240 Move X0, 0x852000
	241 Move X0, [X0+2104]
	242 Call 0x1C17CF4
	243 Move W8, 1
	244 Move [X20+1741], W8
	245 Move S0, 0.5
	246 Multiply S10, S10, S0
	247 Multiply S9, S9, S0
	248 Multiply S8, S8, S0
	249 Move V0, V10
	250 Move V1, V9
	251 Move V2, V8
	252 Move X0, X31
	253 Call 0x384CD60
	254 Move V11, V0
	255 Move V12, V1
	256 Move V13, V2
	257 Move V0, V10
	258 Move V1, V9
	259 Move V2, V8
	260 Move X0, X31
	261 Call 0x384CE4C
	262 Move X8, 0x852000
	263 Move X8, [X8+2104]
	264 Multiply S3, S11, S1
	265 Multiply S4, S12, S0
	266 Multiply S5, S13, S0
	267 Move X8, [X8]
	268 Multiply S6, S0, S1
	269 Multiply S7, S12, S13
	270 Multiply S16, S13, S11
	271 Move X8, [X8+184]
	272 Multiply S17, S12, S11
	273 Multiply S3, S2, S3
	274 Multiply S4, S2, S4
	275 Multiply S5, S1, S5
	276 Multiply S6, S2, S6
	277 Multiply S0, S7, S0
	278 Multiply S7, S11, S7
	279 Multiply S1, S16, S1
	280 Multiply S2, S17, S2
	281 Add S0, S0, S3
	282 Subtract S1, S4, S1
	283 Subtract S2, S5, S2
	284 Add S3, S7, S6
	285 Move X20, 0xB15000
	286 Move W8, [X20+1742]
	287 Compare W8, 0
	288 JumpIfNotEqual {294}
	289 Move X0, 0x852000
	290 Move X0, [X0+2104]
	291 Call 0x1C17CF4
	292 Move W8, 1
	293 Move [X20+1742], W8
	294 Move S0, 0.5
	295 Multiply S10, S10, S0
	296 Multiply S9, S9, S0
	297 Multiply S8, S8, S0
	298 Move V0, V10
	299 Move V1, V9
	300 Move V2, V8
	301 Move X0, X31
	302 Call 0x384CD60
	303 Move V11, V0
	304 Move V12, V1
	305 Move V13, V2
	306 Move V0, V10
	307 Move V1, V9
	308 Move V2, V8
	309 Move X0, X31
	310 Call 0x384CE4C
	311 Move X8, 0x852000
	312 Move X8, [X8+2104]
	313 Multiply S3, S11, S1
	314 Multiply S4, S12, S0
	315 Multiply S5, S13, S0
	316 Move X8, [X8]
	317 Multiply S7, S12, S13
	318 Multiply S17, S13, S11
	319 Multiply S6, S0, S1
	320 Move X8, [X8+184]
	321 Multiply S16, S11, S12
	322 Multiply S3, S2, S3
	323 Multiply S4, S2, S4
	324 Multiply S5, S1, S5
	325 Multiply S0, S7, S0
	326 Multiply S1, S17, S1
	327 Multiply S6, S2, S6
	328 Multiply S2, S16, S2
	329 Multiply S7, S11, S7
	330 Add S0, S0, S3
	331 Subtract S1, S4, S1
	332 Add S2, S2, S5
	333 Subtract S3, S6, S7
	334 Move V4, [X8]
	335 Move V5, [X8+8]
	336 Move [X19], S0
	337 Move [X19+8], S1
	338 Move [X19+8], S2
	339 Move [X19+16], S3
	340 Move [X19+16], D4
	341 Move [X19+24], S5
	342 Move X20, [X31+64]
	343 Move X19, [X31+72]
	344 Move X30, [X31+48]
	345 Move X21, [X31+56]
	346 Move D9, [X31+32]
	347 Move D8, [X31+40]
	348 Move D11, [X31+16]
	349 Move D10, [X31+24]
	350 Move D13, [X31+80]
	351 Move D12, [X31+88]
	352 Return X0

Method: Unity.Mathematics.RigidTransform Euler(System.Single x, System.Single y, System.Single z, Unity.Mathematics.math/RotationOrder order = 4)

Disassembly:
	0x038CDDD0 CMP W8, W1
	0x038CDDD4 CSET W8, NE
	0x038CDDD8 CMP W0, W1
	0x038CDDDC CSET W0, NE
	0x038CDDE0 BFM X0, X8, 0x38, 0x0
	0x038CDDE4 RET
	0x038CDDE8 UBFM X8, X1, 0x20, 0x3F
	0x038CDDEC CMP W8, W0
	0x038CDDF0 CSET W8, NE
	0x038CDDF4 CMP W1, W0
	0x038CDDF8 CSET W0, NE
	0x038CDDFC BFM X0, X8, 0x38, 0x0
	0x038CDE00 RET

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move X19, X8
	005 Add X8, X31, 0
	006 Move X1, X31
	007 Call 0x38D927C
	008 NotImplemented "Instruction LDUR not yet implemented."
	009 Move V1, [X31]
	010 Move [X19+12], V0
	011 Move [X19], V1
	012 Move X30, [X31+32]
	013 Move X19, [X31+40]
	014 Add X31, X31, 48
	015 Return X0

Method: Unity.Mathematics.RigidTransform RotateX(System.Single angle)

Disassembly:
	0x038CDE04 ORN X0, X31, X0, 0x0
	0x038CDE08 RET
	0x038CDE0C AND X0, X1, X0, 0x0
	0x038CDE10 RET
	0x038CDE14 UBFM X8, X0, 0x20, 0x3F
	0x038CDE18 AND W0, W0, W1, 0x0
	0x038CDE1C AND W8, W8, W1, 0x0
	0x038CDE20 BFM X0, X8, 0x20, 0x1F
	0x038CDE24 RET
	0x038CDE28 UBFM X9, X1, 0x20, 0x3F
	0x038CDE2C AND W8, W1, W0, 0x0
	0x038CDE30 AND W9, W9, W0, 0x0
	0x038CDE34 BFM X8, X9, 0x20, 0x1F
	0x038CDE38 MOV X0, X8
	0x038CDE3C RET
	0x038CDE40 ORR X0, X1, X0, 0x0
	0x038CDE44 RET
	0x038CDE48 UBFM X8, X0, 0x20, 0x3F
	0x038CDE4C ORR W0, W0, W1, 0x0
	0x038CDE50 ORR W8, W8, W1, 0x0
	0x038CDE54 BFM X0, X8, 0x20, 0x1F
	0x038CDE58 RET
	0x038CDE5C UBFM X9, X1, 0x20, 0x3F
	0x038CDE60 ORR W8, W1, W0, 0x0
	0x038CDE64 ORR W9, W9, W0, 0x0
	0x038CDE68 BFM X8, X9, 0x20, 0x1F
	0x038CDE6C MOV X0, X8
	0x038CDE70 RET
	0x038CDE74 EOR X0, X1, X0, 0x0
	0x038CDE78 RET
	0x038CDE7C UBFM X8, X0, 0x20, 0x3F
	0x038CDE80 EOR W0, W0, W1, 0x0
	0x038CDE84 EOR W8, W8, W1, 0x0
	0x038CDE88 BFM X0, X8, 0x20, 0x1F
	0x038CDE8C RET
	0x038CDE90 UBFM X9, X1, 0x20, 0x3F
	0x038CDE94 EOR W8, W1, W0, 0x0
	0x038CDE98 EOR W9, W9, W0, 0x0
	0x038CDE9C BFM X8, X9, 0x20, 0x1F
	0x038CDEA0 MOV X0, X8
	0x038CDEA4 RET
	0x038CDEA8 LDR W0, [X0]
	0x038CDEAC BFM X0, X0, 0x20, 0x1F
	0x038CDEB0 MOV X1, X0
	0x038CDEB4 RET
	0x038CDEB8 LDP W8, W9, [X0]
	0x038CDEBC MOV X1, X8
	0x038CDEC0 BFM X8, X8, 0x20, 0x1F
	0x038CDEC4 BFM X1, X9, 0x20, 0x1F
	0x038CDEC8 MOV X0, X8
	0x038CDECC RET
	0x038CDED0 LDP W8, W1, [X0]
	0x038CDED4 BFM X1, X8, 0x20, 0x1F
	0x038CDED8 BFM X8, X8, 0x20, 0x1F
	0x038CDEDC MOV X0, X8
	0x038CDEE0 RET
	0x038CDEE4 LDP W0, W1, [X0]
	0x038CDEE8 BFM X1, X1, 0x20, 0x1F
	0x038CDEEC BFM X0, X0, 0x20, 0x1F
	0x038CDEF0 RET
	0x038CDEF4 LDP W8, W9, [X0]
	0x038CDEF8 MOV X1, X8
	0x038CDEFC BFM X1, X8, 0x20, 0x1F
	0x038CDF00 BFM X8, X9, 0x20, 0x1F
	0x038CDF04 MOV X0, X8
	0x038CDF08 RET

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xB15000
	009 Move W9, [X20+1706]
	010 Move V8, V0
	011 Move X19, X8
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x852000
	017 Move X0, [X0+2104]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1706], W8
	021 Move X20, 0xB15000
	022 Move W8, [X20+1386]
	023 Compare W8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, 0x827000
	026 Move X0, [X0+1448]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+1386], W8
	030 Move X20, 0x827000
	031 Move X20, [X20+1448]
	032 Move S9, 0.5
	033 Move X0, [X20]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X21, 0xB15000
	039 Move W8, [X21+1380]
	040 Multiply S8, S8, S9
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x827000
	044 Move X0, [X0+1448]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X21+1380], W8
	048 Move X0, [X20]
	049 Move X20, 0x852000
	050 NotImplemented "Instruction FCVT not yet implemented."
	051 Move W8, [X0+224]
	052 Move X20, [X20+2104]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Add X0, X31, 8
	057 Add X1, X31, 0
	058 Move V0, V8
	059 Call 0x3EB2E40
	060 Move X8, [X20]
	061 Move D1, [X31]
	062 Move D0, [X31+8]
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Move D9, [X31+16]
	066 Move D8, [X31+24]
	067 Move X8, [X8+184]
	068 NotImplemented "Instruction INVALID not yet implemented."
	069 NotImplemented "Instruction INVALID not yet implemented."
	070 Move V2, [X8]
	071 Move V3, [X8+8]
	072 Move [X19], S0
	073 Move [X19+4], W31
	074 Move [X19+8], W31
	075 Move [X19+12], S1
	076 Move [X19+16], D2
	077 Move [X19+24], S3
	078 Move X20, [X31+48]
	079 Move X19, [X31+56]
	080 Add X31, X31, 64
	081 Return X0

Method: Unity.Mathematics.RigidTransform RotateY(System.Single angle)

Disassembly:
	0x038CDF0C LDR X0, [X0]
	0x038CDF10 MOV X1, X0
	0x038CDF14 RET
	0x038CDF18 LDP W0, W8, [X0]
	0x038CDF1C MOV X1, X8
	0x038CDF20 BFM X1, X0, 0x20, 0x1F
	0x038CDF24 BFM X0, X8, 0x20, 0x1F
	0x038CDF28 RET
	0x038CDF2C LDP W8, W1, [X0]
	0x038CDF30 BFM X8, X1, 0x20, 0x1F
	0x038CDF34 BFM X1, X1, 0x20, 0x1F
	0x038CDF38 MOV X0, X8
	0x038CDF3C RET
	0x038CDF40 LDP W1, W8, [X0]
	0x038CDF44 BFM X8, X1, 0x20, 0x1F
	0x038CDF48 BFM X1, X1, 0x20, 0x1F
	0x038CDF4C MOV X0, X8
	0x038CDF50 RET
	0x038CDF54 LDP W8, W0, [X0]
	0x038CDF58 MOV X1, X8
	0x038CDF5C BFM X1, X0, 0x20, 0x1F
	0x038CDF60 BFM X0, X8, 0x20, 0x1F
	0x038CDF64 RET
	0x038CDF68 LDP W8, W1, [X0]
	0x038CDF6C BFM X1, X8, 0x20, 0x1F
	0x038CDF70 MOV X0, X1
	0x038CDF74 RET
	0x038CDF78 LDP W9, W8, [X0]
	0x038CDF7C MOV X1, X8
	0x038CDF80 BFM X1, X8, 0x20, 0x1F
	0x038CDF84 BFM X8, X9, 0x20, 0x1F
	0x038CDF88 MOV X0, X8
	0x038CDF8C RET
	0x038CDF90 LDP W1, W0, [X0]
	0x038CDF94 BFM X1, X1, 0x20, 0x1F
	0x038CDF98 BFM X0, X0, 0x20, 0x1F
	0x038CDF9C RET
	0x038CDFA0 LDP W1, W8, [X0]
	0x038CDFA4 BFM X1, X8, 0x20, 0x1F
	0x038CDFA8 BFM X8, X8, 0x20, 0x1F
	0x038CDFAC MOV X0, X8
	0x038CDFB0 RET
	0x038CDFB4 LDP W9, W8, [X0]
	0x038CDFB8 MOV X1, X8
	0x038CDFBC BFM X8, X8, 0x20, 0x1F
	0x038CDFC0 BFM X1, X9, 0x20, 0x1F
	0x038CDFC4 MOV X0, X8
	0x038CDFC8 RET
	0x038CDFCC LDR W0, [X0 + 0x4]
	0x038CDFD0 BFM X0, X0, 0x20, 0x1F
	0x038CDFD4 MOV X1, X0
	0x038CDFD8 RET
	0x038CDFDC LDR W1, [X0]
	0x038CDFE0 MOV X0, X1
	0x038CDFE4 BFM X0, X1, 0x20, 0x1F
	0x038CDFE8 RET
	0x038CDFEC LDP W8, W1, [X0]
	0x038CDFF0 BFM X8, X8, 0x20, 0x1F
	0x038CDFF4 MOV X0, X8
	0x038CDFF8 RET
	0x038CDFFC LDP W1, W8, [X0]
	0x038CE000 MOV X0, X1
	0x038CE004 BFM X0, X8, 0x20, 0x1F
	0x038CE008 RET
	0x038CE00C LDP W8, W1, [X0]
	0x038CE010 BFM X8, X1, 0x20, 0x1F
	0x038CE014 MOV X0, X8

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xB15000
	009 Move W9, [X20+1707]
	010 Move V8, V0
	011 Move X19, X8
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x852000
	017 Move X0, [X0+2104]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1707], W8
	021 Move X20, 0xB15000
	022 Move W8, [X20+1386]
	023 Compare W8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, 0x827000
	026 Move X0, [X0+1448]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+1386], W8
	030 Move X20, 0x827000
	031 Move X20, [X20+1448]
	032 Move S9, 0.5
	033 Move X0, [X20]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X21, 0xB15000
	039 Move W8, [X21+1380]
	040 Multiply S8, S8, S9
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x827000
	044 Move X0, [X0+1448]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X21+1380], W8
	048 Move X0, [X20]
	049 Move X20, 0x852000
	050 NotImplemented "Instruction FCVT not yet implemented."
	051 Move W8, [X0+224]
	052 Move X20, [X20+2104]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Add X0, X31, 8
	057 Add X1, X31, 0
	058 Move V0, V8
	059 Call 0x3EB2E40
	060 Move X8, [X20]
	061 Move D1, [X31]
	062 Move D0, [X31+8]
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Move D9, [X31+16]
	066 Move D8, [X31+24]
	067 Move X8, [X8+184]
	068 NotImplemented "Instruction INVALID not yet implemented."
	069 NotImplemented "Instruction INVALID not yet implemented."
	070 Move V2, [X8]
	071 Move V3, [X8+8]
	072 Move [X19], W31
	073 Move [X19+4], S0
	074 Move [X19+8], W31
	075 Move [X19+12], S1
	076 Move [X19+16], D2
	077 Move [X19+24], S3
	078 Move X20, [X31+48]
	079 Move X19, [X31+56]
	080 Add X31, X31, 64
	081 Return X0

Method: Unity.Mathematics.RigidTransform RotateZ(System.Single angle)

Disassembly:
	0x038CE018 RET
	0x038CE01C LDP W1, W8, [X0]
	0x038CE020 BFM X8, X1, 0x20, 0x1F
	0x038CE024 MOV X0, X8
	0x038CE028 RET
	0x038CE02C LDP W8, W1, [X0]
	0x038CE030 MOV X0, X1
	0x038CE034 BFM X0, X8, 0x20, 0x1F
	0x038CE038 RET
	0x038CE03C LDP W1, W8, [X0]
	0x038CE040 BFM X8, X8, 0x20, 0x1F
	0x038CE044 MOV X0, X8
	0x038CE048 RET
	0x038CE04C LDR W1, [X0 + 0x4]
	0x038CE050 MOV X0, X1
	0x038CE054 BFM X0, X1, 0x20, 0x1F
	0x038CE058 RET
	0x038CE05C LDR W0, [X0]
	0x038CE060 BFM X0, X0, 0x20, 0x1F
	0x038CE064 RET
	0x038CE068 LDR X0, [X0]
	0x038CE06C RET
	0x038CE070 STR X1, [X0]
	0x038CE074 RET
	0x038CE078 LDP W9, W8, [X0]
	0x038CE07C BFM X8, X9, 0x20, 0x1F
	0x038CE080 MOV X0, X8
	0x038CE084 RET
	0x038CE088 EXTR X8, X1, X1, 0x20
	0x038CE08C STR X8, [X0]
	0x038CE090 RET
	0x038CE094 LDR W0, [X0 + 0x4]
	0x038CE098 BFM X0, X0, 0x20, 0x1F
	0x038CE09C RET
	0x038CE0A0 LDR W0, [X0, W1, SXTW]
	0x038CE0A4 RET
	0x038CE0A8 STR W2, [X0, W1, SXTW]
	0x038CE0AC RET
	0x038CE0B0 LDR W8, [X0]
	0x038CE0B4 CMP W8, W1
	0x038CE0B8 B.NE 0x38CE0D0
	0x038CE0BC LDR W8, [X0 + 0x4]
	0x038CE0C0 UBFM X9, X1, 0x20, 0x3F
	0x038CE0C4 CMP W8, W9
	0x038CE0C8 CSET W0, EQ
	0x038CE0CC RET
	0x038CE0D0 MOV W0, W31
	0x038CE0D4 RET
	0x038CE0D8 STP X30, X21, [X31 - 0x20]!
	0x038CE0DC STP X20, X19, [X31 + 0x10]
	0x038CE0E0 ADRP X21, 0xB13000
	0x038CE0E4 LDRB W8, [X21 + 0x6B2]
	0x038CE0E8 MOV X20, X1
	0x038CE0EC MOV X19, X0
	0x038CE0F0 TBNZ X8, 0x0, 0x38CE108
	0x038CE0F4 ADRP X0, 0x87D000
	0x038CE0F8 LDR X0, [X0 + 0xF0]
	0x038CE0FC BL 0x1C16CF4
	0x038CE100 MOVZ W8, 0x1
	0x038CE104 STRB W8, [X21 + 0x6B2]
	0x038CE108 CBZ X20, 0x38CE150
	0x038CE10C ADRP X8, 0x87D000
	0x038CE110 LDR X8, [X8 + 0xF0]
	0x038CE114 LDR X9, [X20]
	0x038CE118 LDR X8, [X8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xB14000
	009 Move W9, [X20+1708]
	010 Move V8, V0
	011 Move X19, X8
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x851000
	017 Move X0, [X0+2104]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1708], W8
	021 Move X20, 0xB14000
	022 Move W8, [X20+1386]
	023 Compare W8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, 0x826000
	026 Move X0, [X0+1448]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+1386], W8
	030 Move X20, 0x826000
	031 Move X20, [X20+1448]
	032 Move S9, 0.5
	033 Move X0, [X20]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X21, 0xB14000
	039 Move W8, [X21+1380]
	040 Multiply S8, S8, S9
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x826000
	044 Move X0, [X0+1448]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X21+1380], W8
	048 Move X0, [X20]
	049 Move X20, 0x851000
	050 NotImplemented "Instruction FCVT not yet implemented."
	051 Move W8, [X0+224]
	052 Move X20, [X20+2104]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Add X0, X31, 8
	057 Add X1, X31, 0
	058 Move V0, V8
	059 Call 0x3EB2E40
	060 Move X8, [X20]
	061 Move D1, [X31]
	062 Move D0, [X31+8]
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Move D9, [X31+16]
	066 Move D8, [X31+24]
	067 Move X8, [X8+184]
	068 NotImplemented "Instruction INVALID not yet implemented."
	069 NotImplemented "Instruction INVALID not yet implemented."
	070 Move V2, [X8]
	071 Move V3, [X8+8]
	072 Move [X19], X31
	073 Move [X19+8], S0
	074 Move [X19+16], S1
	075 Move [X19+16], D2
	076 Move [X19+24], S3
	077 Move X20, [X31+48]
	078 Move X19, [X31+56]
	079 Add X31, X31, 64
	080 Return X0

Method: Unity.Mathematics.RigidTransform Translate(Unity.Mathematics.float3 vector)

Disassembly:
	0x038CE11C CMP X9, X8
	0x038CE120 B.NE 0x38CE150
	0x038CE124 MOV X0, X20
	0x038CE128 BL 0x1C16E08
	0x038CE12C LDR X8, [X0]
	0x038CE130 LDR W9, [X19]
	0x038CE134 CMP W9, W8
	0x038CE138 B.NE 0x38CE150
	0x038CE13C LDR W9, [X19 + 0x4]
	0x038CE140 UBFM X8, X8, 0x20, 0x3F
	0x038CE144 CMP W9, W8
	0x038CE148 CSET W0, EQ
	0x038CE14C B 0x38CE154
	0x038CE150 MOV W0, W31
	0x038CE154 LDP X20, X19, [X31 + 0x10]
	0x038CE158 LDP X30, X21, [X31], #0x20
	0x038CE15C RET
	0x038CE160 LDR X8, [X0]
	0x038CE164 MOVZ W9, 0x1D5F
	0x038CE168 MOVK W9, 0xCBA10000
	0x038CE16C MOVZ W10, 0xBBB1
	0x038CE170 AND X11, X8, 0x0
	0x038CE174 MUL X9, X11, X9
	0x038CE178 MOVK W10, 0x44730000
	0x038CE17C UBFM X9, X9, 0x20, 0x3F
	0x038CE180 MADD W8, W8, W10, W9
	0x038CE184 MOVZ W9, 0x35CF
	0x038CE188 MOVK W9, 0x68580000
	0x038CE18C ADD W0, W8, W9

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xB14000
	009 Move X21, 0x82C000
	010 Move X19, X8
	011 Move W8, [X20+1709]
	012 Move X21, [X21+1976]
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x82C000
	021 Move X0, [X0+1976]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+1709], W8
	025 Move X8, [X21]
	026 Move X30, [X31+32]
	027 Move X21, [X31+40]
	028 Move X8, [X8+184]
	029 Move V0, [X8]
	030 Move [X19+16], S10
	031 Move [X19+24], S9
	032 Move [X19+24], S8
	033 Move D9, [X31+16]
	034 Move D8, [X31+24]
	035 Move [X19], V0
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move V10, [X31+64]
	039 Return X0

Method: System.Boolean Equals(Unity.Mathematics.RigidTransform x)

Disassembly:
	0x038CE190 RET
	0x038CE194 STR X30, [X31 - 0x30]!
	0x038CE198 STP X22, X21, [X31 + 0x10]
	0x038CE19C STP X20, X19, [X31 + 0x20]
	0x038CE1A0 ADRP X20, 0xB13000
	0x038CE1A4 ADRP X22, 0x82D000
	0x038CE1A8 ADRP X21, 0x87D000
	0x038CE1AC LDRB W8, [X20 + 0x6B3]
	0x038CE1B0 LDR X22, [X22 + 0x720]
	0x038CE1B4 LDR X21, [X21 + 0xF8]
	0x038CE1B8 MOV X19, X0
	0x038CE1BC TBNZ X8, 0x0, 0x38CE1E0
	0x038CE1C0 ADRP X0, 0x82D000
	0x038CE1C4 LDR X0, [X0 + 0x720]
	0x038CE1C8 BL 0x1C16CF4
	0x038CE1CC ADRP X0, 0x87D000
	0x038CE1D0 LDR X0, [X0 + 0xF8]
	0x038CE1D4 BL 0x1C16CF4
	0x038CE1D8 MOVZ W8, 0x1
	0x038CE1DC STRB W8, [X20 + 0x6B3]
	0x038CE1E0 LDR W8, [X19]
	0x038CE1E4 LDR X0, [X22]
	0x038CE1E8 ADD X1, X31, 0xC
	0x038CE1EC STR W8, [X31 + 0xC]
	0x038CE1F0 BL 0x1C16E04
	0x038CE1F4 MOV X20, X0
	0x038CE1F8 LDR W8, [X19 + 0x4]
	0x038CE1FC LDR X0, [X22]
	0x038CE200 ADD X1, X31, 0x8
	0x038CE204 STR W8, [X31 + 0x8]
	0x038CE208 BL 0x1C16E04

ISIL:
	001 Move V0, [X1]
	002 Move V1, [X0]
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Move V0, [X1+4]
	005 Move V1, [X0+4]
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 Move V0, [X1+8]
	008 Move V1, [X0+8]
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 Move V0, [X1+12]
	011 Move V1, [X0+12]
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 Move V0, [X1+16]
	014 Move V1, [X0+16]
	015 NotImplemented "Instruction FCMP not yet implemented."
	016 Move V0, [X1+20]
	017 Move V1, [X0+20]
	018 NotImplemented "Instruction FCMP not yet implemented."
	019 Move V0, [X1+24]
	020 Move V1, [X0+24]
	021 NotImplemented "Instruction FCMP not yet implemented."
	022 NotImplemented "Instruction CSET not yet implemented."
	023 Return X0
	024 Move W0, W31
	025 Return X0

Method: System.Boolean Equals(System.Object x)

Disassembly:
	0x038CE20C LDR X8, [X21]
	0x038CE210 MOV X2, X0
	0x038CE214 MOV X1, X20
	0x038CE218 MOV X3, X31
	0x038CE21C MOV X0, X8
	0x038CE220 BL 0x3227BD4
	0x038CE224 LDP X20, X19, [X31 + 0x20]
	0x038CE228 LDP X22, X21, [X31 + 0x10]
	0x038CE22C LDR X30, [X31], #0x30
	0x038CE230 RET
	0x038CE234 STP X30, X23, [X31 - 0x30]!
	0x038CE238 STP X22, X21, [X31 + 0x10]
	0x038CE23C STP X20, X19, [X31 + 0x20]
	0x038CE240 ADRP X22, 0xB13000
	0x038CE244 ADRP X23, 0x87D000
	0x038CE248 LDRB W8, [X22 + 0x6B4]
	0x038CE24C LDR X23, [X23 + 0xF8]
	0x038CE250 MOV X19, X2
	0x038CE254 MOV X20, X1
	0x038CE258 MOV X21, X0
	0x038CE25C TBNZ X8, 0x0, 0x38CE274
	0x038CE260 ADRP X0, 0x87D000
	0x038CE264 LDR X0, [X0 + 0xF8]
	0x038CE268 BL 0x1C16CF4
	0x038CE26C MOVZ W8, 0x1
	0x038CE270 STRB W8, [X22 + 0x6B4]
	0x038CE274 MOV X0, X21
	0x038CE278 MOV X1, X20
	0x038CE27C MOV X2, X19
	0x038CE280 MOV X3, X31
	0x038CE284 BL 0x3399CE8
	0x038CE288 MOV X22, X0
	0x038CE28C ADD X0, X21, 0x4
	0x038CE290 MOV X1, X20
	0x038CE294 MOV X2, X19
	0x038CE298 MOV X3, X31
	0x038CE29C BL 0x3399CE8
	0x038CE2A0 LDR X8, [X23]
	0x038CE2A4 MOV X1, X22
	0x038CE2A8 LDP X20, X19, [X31 + 0x20]
	0x038CE2AC LDP X22, X21, [X31 + 0x10]
	0x038CE2B0 MOV X2, X0
	0x038CE2B4 MOV X0, X8
	0x038CE2B8 MOV X3, X31
	0x038CE2BC LDP X30, X23, [X31], #0x30
	0x038CE2C0 B 0x3227BD4
	0x038CE2C4 STR X30, [X31 - 0x20]!
	0x038CE2C8 STP X20, X19, [X31 + 0x10]
	0x038CE2CC MOV X19, X1
	0x038CE2D0 MOV X1, X31
	0x038CE2D4 MOV X20, X0
	0x038CE2D8 BL 0x33BDD8C
	0x038CE2DC STR X19, [X20 + 0x10]
	0x038CE2E0 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xB14000
	006 Move W8, [X21+1710]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x87E000
	014 Move X0, [X0+216]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1710], W8
	018 Compare X20, 0
	019 JumpIfEqual {25}
	020 Move X8, 0x87E000
	021 Move X8, [X8+216]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0
	031 Move X0, X20
	032 Call 0x1C17E08
	033 Move V0, [X0]
	034 Move V1, [X19]
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 Move V0, [X0+4]
	037 Move V1, [X19+4]
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Move V0, [X0+8]
	040 Move V1, [X19+8]
	041 NotImplemented "Instruction FCMP not yet implemented."
	042 Move V0, [X0+12]
	043 Move V1, [X19+12]
	044 NotImplemented "Instruction FCMP not yet implemented."
	045 Move V0, [X0+16]
	046 Move V1, [X19+16]
	047 NotImplemented "Instruction FCMP not yet implemented."
	048 Move V0, [X0+20]
	049 Move V1, [X19+20]
	050 NotImplemented "Instruction FCMP not yet implemented."
	051 Move V0, [X0+24]
	052 Move V1, [X19+24]
	053 NotImplemented "Instruction FCMP not yet implemented."
	054 NotImplemented "Instruction CSET not yet implemented."

Method: System.Int32 GetHashCode()

Disassembly:
	0x038CE2E4 LDR X30, [X31], #0x20
	0x038CE2E8 RET
	0x038CE2EC STP X1, X2, [X0]
	0x038CE2F0 RET
	0x038CE2F4 MOV W8, W1
	0x038CE2F8 MOV W9, W2
	0x038CE2FC BFM X8, X3, 0x20, 0x1F
	0x038CE300 BFM X9, X4, 0x20, 0x1F
	0x038CE304 STP X8, X9, [X0]
	0x038CE308 RET
	0x038CE30C MOV W8, W1
	0x038CE310 BFM X8, X8, 0x20, 0x1F
	0x038CE314 STP X8, X8, [X0]
	0x038CE318 RET
	0x038CE31C ANDS W31, W1, 0x1
	0x038CE320 ORR X8, X31, 0x100000001
	0x038CE324 CSEL X8, X8, X31, NE
	0x038CE328 STP X8, X8, [X0]
	0x038CE32C RET
	0x038CE330 UBFM X8, X1, 0x8, 0x3F
	0x038CE334 AND X9, X1, 0x1
	0x038CE338 UBFM X10, X1, 0x38, 0x37
	0x038CE33C BFM X9, X8, 0x20, 0x0
	0x038CE340 AND X8, X10, 0x1FFFFFFFF
	0x038CE344 BFM X8, X1, 0x10, 0x10
	0x038CE348 STP X9, X8, [X0]
	0x038CE34C RET
	0x038CE350 MOV W8, W1
	0x038CE354 BFM X8, X8, 0x20, 0x1F
	0x038CE358 STP X8, X8, [X0]
	0x038CE35C RET
	0x038CE360 STP X1, X2, [X0]
	0x038CE364 RET
	0x038CE368 FCVTZS W8, S0
	0x038CE36C FCVTZU W9, S0
	0x038CE370 FCMP S0, 0x0
	0x038CE374 CSEL W8, W8, W9, MI
	0x038CE378 BFM X8, X8, 0x20, 0x1F

ISIL:
	001 Move W10, [X0+8]
	002 Move W11, [X0+12]
	003 Move W8, [X0]
	004 Move W9, [X0+4]
	005 Move W16, 0xE1D1
	006 NotImplemented "Instruction MOVK not yet implemented."
	007 Multiply W10, W10, W16
	008 Move W16, 0x26FF
	009 Move W12, [X0+16]
	010 Move W13, [X0+20]
	011 Move W14, [X0+24]
	012 Move X15, 2897
	013 NotImplemented "Instruction MOVK not yet implemented."
	014 NotImplemented "Instruction MOVK not yet implemented."
	015 NotImplemented "Instruction MADD not yet implemented."
	016 Move X10, 3819
	017 NotImplemented "Instruction MOVK not yet implemented."
	018 Move X16, 2067
	019 Multiply X11, X11, X15
	020 Move W15, 0x8063
	021 NotImplemented "Instruction MOVK not yet implemented."
	022 NotImplemented "Instruction MOVK not yet implemented."
	023 Multiply X9, X9, X10
	024 Move W10, 0xB92D
	025 NotImplemented "Instruction MOVK not yet implemented."
	026 Multiply X13, X13, X16
	027 Multiply W14, W14, W15
	028 Move X9, X9
	029 ShiftRight X9, 32
	030 And X9, X9, 0x7FFFFFFF
	031 Move W16, 0x394B
	032 Move X11, X11
	033 ShiftRight X11, 32
	034 And X11, X11, 0x7FFFFFFF
	035 Move X13, X13
	036 ShiftRight X13, 32
	037 And X13, X13, 0x7FFFFFFF
	038 NotImplemented "Instruction MADD not yet implemented."
	039 Add W8, W8, W9
	040 NotImplemented "Instruction MOVK not yet implemented."
	041 Add W9, W10, W13
	042 Add W8, W8, W11
	043 NotImplemented "Instruction MADD not yet implemented."
	044 Move W9, 0xB9D4
	045 NotImplemented "Instruction MOVK not yet implemented."
	046 Add W0, W8, W9
	047 Return X0

Method: System.String ToString()

Disassembly:
	0x038CE37C STP X8, X8, [X0]
	0x038CE380 RET
	0x038CE384 FCVTZS W8, S0
	0x038CE388 FCVTZU W9, S0
	0x038CE38C FCMP S0, 0x0
	0x038CE390 FCVTZS W10, S1
	0x038CE394 FCVTZU W11, S1
	0x038CE398 CSEL W8, W8, W9, MI
	0x038CE39C FCMP S1, 0x0
	0x038CE3A0 FCVTZS W9, S2
	0x038CE3A4 CSEL W10, W10, W11, MI
	0x038CE3A8 FCVTZU W11, S2
	0x038CE3AC FCMP S2, 0x0
	0x038CE3B0 BFM X8, X10, 0x20, 0x1F
	0x038CE3B4 FCVTZS W10, S3
	0x038CE3B8 CSEL W9, W9, W11, MI
	0x038CE3BC FCVTZU W11, S3
	0x038CE3C0 FCMP S3, 0x0
	0x038CE3C4 CSEL W10, W10, W11, MI
	0x038CE3C8 BFM X9, X10, 0x20, 0x1F
	0x038CE3CC STP X8, X9, [X0]
	0x038CE3D0 RET
	0x038CE3D4 FCVTZS W8, D0
	0x038CE3D8 FCVTZU W9, D0
	0x038CE3DC FCMP D0, 0x0
	0x038CE3E0 CSEL W8, W8, W9, MI
	0x038CE3E4 BFM X8, X8, 0x20, 0x1F
	0x038CE3E8 STP X8, X8, [X0]
	0x038CE3EC RET
	0x038CE3F0 FCVTZS W8, D0
	0x038CE3F4 FCVTZU W9, D0
	0x038CE3F8 FCMP D0, 0x0
	0x038CE3FC FCVTZS W10, D1
	0x038CE400 FCVTZU W11, D1
	0x038CE404 CSEL W8, W8, W9, MI
	0x038CE408 FCMP D1, 0x0
	0x038CE40C FCVTZS W9, D2
	0x038CE410 CSEL W10, W10, W11, MI
	0x038CE414 FCVTZU W11, D2
	0x038CE418 FCMP D2, 0x0
	0x038CE41C BFM X8, X10, 0x20, 0x1F
	0x038CE420 FCVTZS W10, D3
	0x038CE424 CSEL W9, W9, W11, MI
	0x038CE428 FCVTZU W11, D3
	0x038CE42C FCMP D3, 0x0
	0x038CE430 CSEL W10, W10, W11, MI
	0x038CE434 BFM X9, X10, 0x20, 0x1F
	0x038CE438 STP X8, X9, [X0]
	0x038CE43C RET
	0x038CE440 MOV W0, W0
	0x038CE444 BFM X0, X0, 0x20, 0x1F
	0x038CE448 MOV X1, X0
	0x038CE44C RET
	0x038CE450 ANDS W31, W0, 0x1
	0x038CE454 ORR X8, X31, 0x100000001
	0x038CE458 CSEL X0, X8, X31, NE
	0x038CE45C MOV X1, X0
	0x038CE460 RET
	0x038CE464 AND X9, X0, 0x0
	0x038CE468 AND X8, X0, 0x1
	0x038CE46C UBFM X10, X9, 0x8, 0x3F
	0x038CE470 UBFM X9, X9, 0x38, 0x37
	0x038CE474 BFM X8, X10, 0x20, 0x0
	0x038CE478 AND X1, X9, 0x1FFFFFFFF
	0x038CE47C BFM X1, X0, 0x10, 0x10
	0x038CE480 MOV X0, X8
	0x038CE484 RET
	0x038CE488 MOV W0, W0
	0x038CE48C BFM X0, X0, 0x20, 0x1F
	0x038CE490 MOV X1, X0
	0x038CE494 RET
	0x038CE498 RET
	0x038CE49C FCVTZS W8, S0
	0x038CE4A0 FCVTZU W9, S0
	0x038CE4A4 FCMP S0, 0x0
	0x038CE4A8 CSEL W0, W8, W9, MI
	0x038CE4AC BFM X0, X0, 0x20, 0x1F
	0x038CE4B0 MOV X1, X0
	0x038CE4B4 RET
	0x038CE4B8 FCVTZS W8, S0
	0x038CE4BC FCVTZU W9, S0
	0x038CE4C0 FCMP S0, 0x0
	0x038CE4C4 FCVTZS W10, S1
	0x038CE4C8 FCVTZU W11, S1
	0x038CE4CC CSEL W0, W8, W9, MI
	0x038CE4D0 FCMP S1, 0x0
	0x038CE4D4 FCVTZS W8, S2
	0x038CE4D8 CSEL W9, W10, W11, MI
	0x038CE4DC FCVTZU W10, S2
	0x038CE4E0 FCMP S2, 0x0
	0x038CE4E4 BFM X0, X9, 0x20, 0x1F
	0x038CE4E8 FCVTZS W9, S3
	0x038CE4EC CSEL W1, W8, W10, MI
	0x038CE4F0 FCVTZU W8, S3
	0x038CE4F4 FCMP S3, 0x0
	0x038CE4F8 CSEL W8, W9, W8, MI
	0x038CE4FC BFM X1, X8, 0x20, 0x1F
	0x038CE500 RET
	0x038CE504 FCVTZS W8, D0
	0x038CE508 FCVTZU W9, D0
	0x038CE50C FCMP D0, 0x0
	0x038CE510 CSEL W0, W8, W9, MI
	0x038CE514 BFM X0, X0, 0x20, 0x1F
	0x038CE518 MOV X1, X0
	0x038CE51C RET
	0x038CE520 FCVTZS W8, D0
	0x038CE524 FCVTZU W9, D0
	0x038CE528 FCMP D0, 0x0
	0x038CE52C FCVTZS W10, D1
	0x038CE530 FCVTZU W11, D1
	0x038CE534 CSEL W0, W8, W9, MI
	0x038CE538 FCMP D1, 0x0
	0x038CE53C FCVTZS W8, D2
	0x038CE540 CSEL W9, W10, W11, MI
	0x038CE544 FCVTZU W10, D2
	0x038CE548 FCMP D2, 0x0
	0x038CE54C BFM X0, X9, 0x20, 0x1F
	0x038CE550 FCVTZS W9, D3
	0x038CE554 CSEL W1, W8, W10, MI
	0x038CE558 FCVTZU W8, D3
	0x038CE55C FCMP D3, 0x0
	0x038CE560 CSEL W8, W9, W8, MI
	0x038CE564 BFM X1, X8, 0x20, 0x1F
	0x038CE568 RET
	0x038CE56C AND X8, X0, 0x0
	0x038CE570 UBFM X9, X2, 0x20, 0x3F
	0x038CE574 AND X11, X1, 0x0
	0x038CE578 UBFM X13, X3, 0x20, 0x3F
	0x038CE57C MUL W10, W2, W0
	0x038CE580 MUL W12, W3, W1
	0x038CE584 MUL X8, X9, X8
	0x038CE588 MUL X9, X13, X11
	0x038CE58C ORR X0, X8, X10, 0x0
	0x038CE590 ORR X1, X9, X12, 0x0
	0x038CE594 RET
	0x038CE598 UBFM X8, X0, 0x20, 0x3F
	0x038CE59C UBFM X9, X1, 0x20, 0x3F
	0x038CE5A0 MUL W0, W0, W2
	0x038CE5A4 MUL W1, W1, W2
	0x038CE5A8 MUL W8, W8, W2
	0x038CE5AC MUL W9, W9, W2
	0x038CE5B0 BFM X0, X8, 0x20, 0x1F
	0x038CE5B4 BFM X1, X9, 0x20, 0x1F
	0x038CE5B8 RET
	0x038CE5BC UBFM X9, X1, 0x20, 0x3F
	0x038CE5C0 MUL W8, W1, W0
	0x038CE5C4 UBFM X10, X2, 0x20, 0x3F
	0x038CE5C8 MUL W9, W9, W0
	0x038CE5CC MUL W1, W2, W0
	0x038CE5D0 MUL W10, W10, W0
	0x038CE5D4 BFM X8, X9, 0x20, 0x1F
	0x038CE5D8 BFM X1, X10, 0x20, 0x1F
	0x038CE5DC MOV X0, X8
	0x038CE5E0 RET
	0x038CE5E4 AND X8, X2, 0x0

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X19, 0xB14000
	008 Move X21, 0x826000
	009 Move X22, 0x826000
	010 Move W8, [X19+1711]
	011 Move X21, [X21+2512]
	012 Move X22, [X22+2704]
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x826000
	019 Move X0, [X0+2512]
	020 Call 0x1C17CF4
	021 Move X0, 0x826000
	022 Move X0, [X0+2704]
	023 Call 0x1C17CF4
	024 Move X0, 0x87E000
	025 Move X0, [X0+224]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X19+1711], W8
	029 Move X0, [X21]
	030 Move W1, 7
	031 Call 0x1C17D6C
	032 Move X19, X0
	033 Move V0, [X20]
	034 Move X0, [X22]
	035 Add X1, X31, 44
	036 Move [X31+44], S0
	037 Call 0x1C17E04
	038 Compare X19, 0
	039 JumpIfEqual {172}
	040 Move X21, X0
	041 Compare X0, 0
	042 JumpIfEqual {49}
	043 Move X8, [X19]
	044 Move X0, X21
	045 Move X1, [X8+64]
	046 Call 0x1C17E00
	047 Compare X0, 0
	048 JumpIfEqual {169}
	049 Move W8, [X19+24]
	050 Compare W8, 0
	051 JumpIfEqual {168}
	052 Move [X19+32], X21
	053 Move V0, [X20+4]
	054 Move X0, [X22]
	055 Add X1, X31, 40
	056 Move [X31+40], S0
	057 Call 0x1C17E04
	058 Move X21, X0
	059 Compare X0, 0
	060 JumpIfEqual {67}
	061 Move X8, [X19]
	062 Move X0, X21
	063 Move X1, [X8+64]
	064 Call 0x1C17E00
	065 Compare X0, 0
	066 JumpIfEqual {169}
	067 Move W8, [X19+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move [X19+40], X21
	070 Move V0, [X20+8]
	071 Move X0, [X22]
	072 Add X1, X31, 28
	073 Move [X31+28], S0
	074 Call 0x1C17E04
	075 Move X21, X0
	076 Compare X0, 0
	077 JumpIfEqual {84}
	078 Move X8, [X19]
	079 Move X0, X21
	080 Move X1, [X8+64]
	081 Call 0x1C17E00
	082 Compare X0, 0
	083 JumpIfEqual {169}
	084 Move W8, [X19+24]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move [X19+48], X21
	087 Move V0, [X20+12]
	088 Move X0, [X22]
	089 Add X1, X31, 24
	090 Move [X31+24], S0
	091 Call 0x1C17E04
	092 Move X21, X0
	093 Compare X0, 0
	094 JumpIfEqual {101}
	095 Move X8, [X19]
	096 Move X0, X21
	097 Move X1, [X8+64]
	098 Call 0x1C17E00
	099 Compare X0, 0
	100 JumpIfEqual {169}
	101 Move W8, [X19+24]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move [X19+56], X21
	104 Move V0, [X20+16]
	105 Move X0, [X22]
	106 Add X1, X31, 20
	107 Move [X31+20], S0
	108 Call 0x1C17E04
	109 Move X21, X0
	110 Compare X0, 0
	111 JumpIfEqual {118}
	112 Move X8, [X19]
	113 Move X0, X21
	114 Move X1, [X8+64]
	115 Call 0x1C17E00
	116 Compare X0, 0
	117 JumpIfEqual {169}
	118 Move W8, [X19+24]
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move [X19+64], X21
	121 Move V0, [X20+20]
	122 Move X0, [X22]
	123 Add X1, X31, 16
	124 Move [X31+16], S0
	125 Call 0x1C17E04
	126 Move X21, X0
	127 Compare X0, 0
	128 JumpIfEqual {135}
	129 Move X8, [X19]
	130 Move X0, X21
	131 Move X1, [X8+64]
	132 Call 0x1C17E00
	133 Compare X0, 0
	134 JumpIfEqual {169}
	135 Move W8, [X19+24]
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move [X19+72], X21
	138 Move V0, [X20+24]
	139 Move X0, [X22]
	140 Add X1, X31, 12
	141 Move [X31+12], S0
	142 Call 0x1C17E04
	143 Move X20, X0
	144 Compare X0, 0
	145 JumpIfEqual {152}
	146 Move X8, [X19]
	147 Move X0, X20
	148 Move X1, [X8+64]
	149 Call 0x1C17E00
	150 Compare X0, 0
	151 JumpIfEqual {169}
	152 Move W8, [X19+24]
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Move X8, 0x87E000
	155 Move X8, [X8+224]
	156 Move [X19+80], X20
	157 Move X1, X19
	158 Move X2, X31
	159 Move X0, [X8]
	160 Call String.Format, X0, X1
	161 Move X20, [X31+64]
	162 Move X19, [X31+72]
	163 Move X22, [X31+48]
	164 Move X21, [X31+56]
	165 Move X30, [X31+32]
	166 Add X31, X31, 80
	167 Return X0
	168 Call 0x1C17F28
	169 Call 0x1C17F44
	170 Move X1, X31
	171 Call 0x1C17DEC
	172 Call 0x1C17F20

Method: System.String ToString(System.String format, System.IFormatProvider formatProvider)

Disassembly:
	0x038CE5E8 AND X10, X3, 0x0
	0x038CE5EC ADD X8, X8, X0
	0x038CE5F0 ADD X10, X10, X1
	0x038CE5F4 ADD W9, W2, W0
	0x038CE5F8 ADD W11, W3, W1
	0x038CE5FC AND X8, X8, 0x0
	0x038CE600 AND X10, X10, 0x0
	0x038CE604 ORR X0, X8, X9, 0x0
	0x038CE608 ORR X1, X10, X11, 0x0
	0x038CE60C RET
	0x038CE610 UBFM X8, X0, 0x20, 0x3F
	0x038CE614 UBFM X9, X1, 0x20, 0x3F
	0x038CE618 ADD W0, W0, W2
	0x038CE61C ADD W1, W1, W2
	0x038CE620 ADD W8, W8, W2
	0x038CE624 ADD W9, W9, W2
	0x038CE628 BFM X0, X8, 0x20, 0x1F
	0x038CE62C BFM X1, X9, 0x20, 0x1F
	0x038CE630 RET
	0x038CE634 UBFM X9, X1, 0x20, 0x3F
	0x038CE638 ADD W8, W1, W0
	0x038CE63C UBFM X10, X2, 0x20, 0x3F
	0x038CE640 ADD W9, W9, W0
	0x038CE644 ADD W1, W2, W0
	0x038CE648 ADD W10, W10, W0
	0x038CE64C BFM X8, X9, 0x20, 0x1F
	0x038CE650 BFM X1, X10, 0x20, 0x1F
	0x038CE654 MOV X0, X8
	0x038CE658 RET
	0x038CE65C AND X8, X2, 0x0
	0x038CE660 AND X10, X3, 0x0
	0x038CE664 SUB X8, X0, X8
	0x038CE668 SUB X10, X1, X10
	0x038CE66C SUB W9, W0, W2
	0x038CE670 SUB W11, W1, W3
	0x038CE674 AND X8, X8, 0x0
	0x038CE678 AND X10, X10, 0x0
	0x038CE67C ORR X0, X8, X9, 0x0
	0x038CE680 ORR X1, X10, X11, 0x0
	0x038CE684 RET
	0x038CE688 UBFM X8, X0, 0x20, 0x3F
	0x038CE68C UBFM X9, X1, 0x20, 0x3F
	0x038CE690 SUB W0, W0, W2
	0x038CE694 SUB W1, W1, W2
	0x038CE698 SUB W8, W8, W2
	0x038CE69C SUB W9, W9, W2
	0x038CE6A0 BFM X0, X8, 0x20, 0x1F
	0x038CE6A4 BFM X1, X9, 0x20, 0x1F
	0x038CE6A8 RET
	0x038CE6AC UBFM X9, X1, 0x20, 0x3F
	0x038CE6B0 SUB W8, W0, W1
	0x038CE6B4 UBFM X10, X2, 0x20, 0x3F
	0x038CE6B8 SUB W9, W0, W9
	0x038CE6BC SUB W1, W0, W2
	0x038CE6C0 SUB W10, W0, W10
	0x038CE6C4 BFM X8, X9, 0x20, 0x1F
	0x038CE6C8 BFM X1, X10, 0x20, 0x1F
	0x038CE6CC MOV X0, X8
	0x038CE6D0 RET
	0x038CE6D4 UBFM X8, X0, 0x20, 0x3F
	0x038CE6D8 UBFM X9, X2, 0x20, 0x3F
	0x038CE6DC UBFM X10, X1, 0x20, 0x3F
	0x038CE6E0 UBFM X11, X3, 0x20, 0x3F
	0x038CE6E4 UDIV W0, W0, W2
	0x038CE6E8 UDIV W1, W1, W3
	0x038CE6EC UDIV W8, W8, W9
	0x038CE6F0 UDIV W9, W10, W11
	0x038CE6F4 BFM X0, X8, 0x20, 0x1F
	0x038CE6F8 BFM X1, X9, 0x20, 0x1F
	0x038CE6FC RET
	0x038CE700 UBFM X8, X0, 0x20, 0x3F
	0x038CE704 UBFM X9, X1, 0x20, 0x3F
	0x038CE708 UDIV W0, W0, W2
	0x038CE70C UDIV W1, W1, W2
	0x038CE710 UDIV W8, W8, W2
	0x038CE714 UDIV W9, W9, W2
	0x038CE718 BFM X0, X8, 0x20, 0x1F
	0x038CE71C BFM X1, X9, 0x20, 0x1F
	0x038CE720 RET
	0x038CE724 UBFM X9, X1, 0x20, 0x3F
	0x038CE728 UDIV W8, W0, W1
	0x038CE72C UBFM X10, X2, 0x20, 0x3F
	0x038CE730 UDIV W9, W0, W9
	0x038CE734 UDIV W1, W0, W2
	0x038CE738 UDIV W10, W0, W10
	0x038CE73C BFM X8, X9, 0x20, 0x1F
	0x038CE740 BFM X1, X10, 0x20, 0x1F
	0x038CE744 MOV X0, X8
	0x038CE748 RET
	0x038CE74C UBFM X8, X0, 0x20, 0x3F
	0x038CE750 UBFM X9, X2, 0x20, 0x3F
	0x038CE754 UDIV W10, W0, W2
	0x038CE758 UDIV W11, W1, W3
	0x038CE75C MSUB W0, W10, W2, W0
	0x038CE760 UBFM X10, X1, 0x20, 0x3F
	0x038CE764 MSUB W1, W11, W3, W1
	0x038CE768 UBFM X11, X3, 0x20, 0x3F
	0x038CE76C UDIV W12, W8, W9
	0x038CE770 MSUB W8, W12, W9, W8
	0x038CE774 UDIV W9, W10, W11
	0x038CE778 MSUB W9, W9, W11, W10
	0x038CE77C BFM X0, X8, 0x20, 0x1F
	0x038CE780 BFM X1, X9, 0x20, 0x1F
	0x038CE784 RET
	0x038CE788 UDIV W9, W0, W2
	0x038CE78C UBFM X8, X0, 0x20, 0x3F
	0x038CE790 MSUB W0, W9, W2, W0
	0x038CE794 UDIV W9, W1, W2
	0x038CE798 UBFM X10, X1, 0x20, 0x3F
	0x038CE79C MSUB W1, W9, W2, W1
	0x038CE7A0 UDIV W9, W8, W2
	0x038CE7A4 MSUB W8, W9, W2, W8
	0x038CE7A8 UDIV W9, W10, W2
	0x038CE7AC MSUB W9, W9, W2, W10
	0x038CE7B0 BFM X0, X8, 0x20, 0x1F
	0x038CE7B4 BFM X1, X9, 0x20, 0x1F
	0x038CE7B8 RET
	0x038CE7BC UBFM X9, X1, 0x20, 0x3F
	0x038CE7C0 UDIV W8, W0, W1
	0x038CE7C4 UDIV W11, W0, W2
	0x038CE7C8 UBFM X10, X2, 0x20, 0x3F
	0x038CE7CC MSUB W8, W8, W1, W0
	0x038CE7D0 MSUB W1, W11, W2, W0
	0x038CE7D4 UDIV W11, W0, W9
	0x038CE7D8 MSUB W9, W11, W9, W0
	0x038CE7DC UDIV W11, W0, W10
	0x038CE7E0 MSUB W10, W11, W10, W0
	0x038CE7E4 BFM X8, X9, 0x20, 0x1F
	0x038CE7E8 BFM X1, X10, 0x20, 0x1F
	0x038CE7EC MOV X0, X8
	0x038CE7F0 RET
	0x038CE7F4 MOVZ X9, 0x1
	0x038CE7F8 ADD X11, X0, X9
	0x038CE7FC ADD X9, X1, X9
	0x038CE800 ADD W8, W0, 0x1
	0x038CE804 ADD W10, W1, 0x1
	0x038CE808 AND X11, X11, 0x0
	0x038CE80C AND X9, X9, 0x0
	0x038CE810 ORR X0, X11, X8, 0x0
	0x038CE814 ORR X1, X9, X10, 0x0
	0x038CE818 RET
	0x038CE81C MOV X9, INVALID
	0x038CE820 ADD X11, X0, X9
	0x038CE824 ADD X9, X1, X9
	0x038CE828 SUB W8, W0, 0x1
	0x038CE82C SUB W10, W1, 0x1
	0x038CE830 AND X11, X11, 0x0
	0x038CE834 AND X9, X9, 0x0
	0x038CE838 ORR X0, X11, X8, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0xB14000
	008 Move X23, 0x826000
	009 Move W8, [X19+1712]
	010 Move X23, [X23+2512]
	011 Move X20, X2
	012 Move X21, X1
	013 Move X22, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x826000
	019 Move X0, [X0+2512]
	020 Call 0x1C17CF4
	021 Move X0, 0x87E000
	022 Move X0, [X0+232]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X19+1712], W8
	026 Move X0, [X23]
	027 Move W1, 7
	028 Call 0x1C17D6C
	029 Move X19, X0
	030 Move X0, X22
	031 Move X1, X21
	032 Move X2, X20
	033 Move X3, X31
	034 Call Single.ToString, X0, X1, X2
	035 Compare X19, 0
	036 JumpIfEqual {169}
	037 Move X23, X0
	038 Compare X0, 0
	039 JumpIfEqual {46}
	040 Move X8, [X19]
	041 Move X0, X23
	042 Move X1, [X8+64]
	043 Call 0x1C17E00
	044 Compare X0, 0
	045 JumpIfEqual {166}
	046 Move W8, [X19+24]
	047 Compare W8, 0
	048 JumpIfEqual {165}
	049 Add X0, X22, 4
	050 Move X1, X21
	051 Move X2, X20
	052 Move X3, X31
	053 Move [X19+32], X23
	054 Call Single.ToString, X0, X1, X2
	055 Move X23, X0
	056 Compare X0, 0
	057 JumpIfEqual {64}
	058 Move X8, [X19]
	059 Move X0, X23
	060 Move X1, [X8+64]
	061 Call 0x1C17E00
	062 Compare X0, 0
	063 JumpIfEqual {166}
	064 Move W8, [X19+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add X0, X22, 8
	067 Move X1, X21
	068 Move X2, X20
	069 Move X3, X31
	070 Move [X19+40], X23
	071 Call Single.ToString, X0, X1, X2
	072 Move X23, X0
	073 Compare X0, 0
	074 JumpIfEqual {81}
	075 Move X8, [X19]
	076 Move X0, X23
	077 Move X1, [X8+64]
	078 Call 0x1C17E00
	079 Compare X0, 0
	080 JumpIfEqual {166}
	081 Move W8, [X19+24]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Add X0, X22, 12
	084 Move X1, X21
	085 Move X2, X20
	086 Move X3, X31
	087 Move [X19+48], X23
	088 Call Single.ToString, X0, X1, X2
	089 Move X23, X0
	090 Compare X0, 0
	091 JumpIfEqual {98}
	092 Move X8, [X19]
	093 Move X0, X23
	094 Move X1, [X8+64]
	095 Call 0x1C17E00
	096 Compare X0, 0
	097 JumpIfEqual {166}
	098 Move W8, [X19+24]
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Add X0, X22, 16
	101 Move X1, X21
	102 Move X2, X20
	103 Move X3, X31
	104 Move [X19+56], X23
	105 Call Single.ToString, X0, X1, X2
	106 Move X23, X0
	107 Compare X0, 0
	108 JumpIfEqual {115}
	109 Move X8, [X19]
	110 Move X0, X23
	111 Move X1, [X8+64]
	112 Call 0x1C17E00
	113 Compare X0, 0
	114 JumpIfEqual {166}
	115 Move W8, [X19+24]
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Add X0, X22, 20
	118 Move X1, X21
	119 Move X2, X20
	120 Move X3, X31
	121 Move [X19+64], X23
	122 Call Single.ToString, X0, X1, X2
	123 Move X23, X0
	124 Compare X0, 0
	125 JumpIfEqual {132}
	126 Move X8, [X19]
	127 Move X0, X23
	128 Move X1, [X8+64]
	129 Call 0x1C17E00
	130 Compare X0, 0
	131 JumpIfEqual {166}
	132 Move W8, [X19+24]
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Add X0, X22, 24
	135 Move X1, X21
	136 Move X2, X20
	137 Move X3, X31
	138 Move [X19+72], X23
	139 Call Single.ToString, X0, X1, X2
	140 Move X20, X0
	141 Compare X0, 0
	142 JumpIfEqual {149}
	143 Move X8, [X19]
	144 Move X0, X20
	145 Move X1, [X8+64]
	146 Call 0x1C17E00
	147 Compare X0, 0
	148 JumpIfEqual {166}
	149 Move W8, [X19+24]
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move X8, 0x87E000
	152 Move X8, [X8+232]
	153 Move [X19+80], X20
	154 Move X1, X19
	155 Move X20, [X31+32]
	156 Move X19, [X31+40]
	157 Move X0, [X8]
	158 Move X22, [X31+16]
	159 Move X21, [X31+24]
	160 Move X2, X31
	161 Move X30, [X31+48]
	162 Move X23, [X31+56]
	163 Call String.Format, X0, X1
	164 Return X0
	165 Call 0x1C17F28
	166 Call 0x1C17F44
	167 Move X1, X31
	168 Call 0x1C17DEC
	169 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x038CE83C ORR X1, X9, X10, 0x0
	0x038CE840 RET
	0x038CE844 UBFM X8, X0, 0x20, 0x3F
	0x038CE848 UBFM X9, X2, 0x20, 0x3F
	0x038CE84C CMP W8, W9
	0x038CE850 UBFM X8, X1, 0x20, 0x3F
	0x038CE854 CSET W9, CC
	0x038CE858 CMP W0, W2
	0x038CE85C UBFM X10, X3, 0x20, 0x3F
	0x038CE860 CSET W11, CC
	0x038CE864 CMP W8, W10
	0x038CE868 CSET W8, CC
	0x038CE86C CMP W1, W3
	0x038CE870 BFM X11, X9, 0x38, 0x0
	0x038CE874 CSET W9, CC
	0x038CE878 BFM X9, X8, 0x38, 0x0
	0x038CE87C ORR X0, X11, X9, 0x10
	0x038CE880 RET
	0x038CE884 UBFM X8, X0, 0x20, 0x3F
	0x038CE888 CMP W8, W2
	0x038CE88C UBFM X9, X1, 0x20, 0x3F
	0x038CE890 CSET W8, CC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xB14000
	005 Move X20, 0x87E000
	006 Move W8, [X19+1713]
	007 Move X20, [X20+216]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x87E000
	013 Move X0, [X0+216]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1713], W8
	017 Move X8, [X20]
	018 Move X9, -48107520
	019 Move V0, [X9+187]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X8, [X8+184]
	023 Move [X8], V0
	024 Move [X8+16], X31
	025 Move [X8+24], W31
	026 Move X30, [X31+32]
	027 Return 

