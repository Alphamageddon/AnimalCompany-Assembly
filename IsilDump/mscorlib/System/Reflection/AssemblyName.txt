Type: System.Reflection.AssemblyName

Method: System.Void .ctor()

Disassembly:
	0x032D6CB0 MOV X0, X19
	0x032D6CB4 MOV X2, X31
	0x032D6CB8 BL 0x324A9B4
	0x032D6CBC ADRP X0, 0xE50000
	0x032D6CC0 LDR X0, [X0 + 0x388]
	0x032D6CC4 BL 0x1C16D08
	0x032D6CC8 MOV X1, X0
	0x032D6CCC MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Object..ctor, X0
	006 Move W8, 1
	007 Move [X19+88], W8
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 

Method: System.Boolean ParseAssemblyName(System.IntPtr name, out Mono.MonoAssemblyName aname, out System.Boolean is_version_definited, out System.Boolean is_token_defined)

Disassembly:
	0x032D6CD0 BL 0x1C16DEC

ISIL:
	001 Call 0x1C84E88
	002 Return X0

Method: System.Void .ctor(System.String assemblyName)

Disassembly:
	0x032D6CD4 STR X30, [X31 - 0x10]!
	0x032D6CD8 LDR X8, [X0 + 0x48]
	0x032D6CDC CBZ X8, 0x32D6D54
	0x032D6CE0 LDR W9, [X8 + 0x18]
	0x032D6CE4 CMP W9, 0x10
	0x032D6CE8 B.EQ 0x32D6CF4
	0x032D6CEC CBNZ W9, 0x32D6D1C
	0x032D6CF0 BL 0x1C16F28
	0x032D6CF4 MOV X12, X31
	0x032D6CF8 MOV W10, W31
	0x032D6CFC ADD X11, X8, 0x20
	0x032D6D00 LDRB W13, [X11, X12, LSL]
	0x032D6D04 ADD X12, X12, 0x1
	0x032D6D08 CMP X12, 0x10
	0x032D6D0C ADD W10, W10, W13
	0x032D6D10 B.NE 0x32D6D00
	0x032D6D14 CMP W10, 0x4
	0x032D6D18 B.EQ 0x32D6D40
	0x032D6D1C LDRB W10, [X8 + 0x20]
	0x032D6D20 CMP W10, 0x6
	0x032D6D24 B.EQ 0x32D6D40
	0x032D6D28 CBNZ W10, 0x32D6D48
	0x032D6D2C CMP W9, 0xD
	0x032D6D30 B.LT 0x32D6D48
	0x032D6D34 LDRB W8, [X8 + 0x2C]
	0x032D6D38 CMP W8, 0x6
	0x032D6D3C B.NE 0x32D6D48
	0x032D6D40 MOVZ W0, 0x1
	0x032D6D44 B 0x32D6D4C
	0x032D6D48 MOV W0, W31
	0x032D6D4C LDR X30, [X31], #0x10
	0x032D6D50 RET
	0x032D6D54 BL 0x1C16F20
	0x032D6D58 STP X30, X21, [X31 - 0x20]!
	0x032D6D5C STP X20, X19, [X31 + 0x10]
	0x032D6D60 ADRP X20, 0x1106000
	0x032D6D64 ADRP X21, 0xE1D000
	0x032D6D68 LDRB W8, [X20 + 0x92F]
	0x032D6D6C LDR X21, [X21 + 0x618]
	0x032D6D70 MOV X19, X0
	0x032D6D74 TBNZ X8, 0x0, 0x32D6D8C
	0x032D6D78 ADRP X0, 0xE1D000
	0x032D6D7C LDR X0, [X0 + 0x618]
	0x032D6D80 BL 0x1C16CF4
	0x032D6D84 MOVZ W8, 0x1
	0x032D6D88 STRB W8, [X20 + 0x92F]
	0x032D6D8C LDR X0, [X21]
	0x032D6D90 MOVZ W1, 0x8
	0x032D6D94 BL 0x1C16D6C
	0x032D6D98 MOV X20, X0
	0x032D6D9C CBZ X0, 0x32D6DB4
	0x032D6DA0 LDR W8, [X20 + 0x18]
	0x032D6DA4 CBZ W8, 0x32D6DB0
	0x032D6DA8 ADD X0, X20, 0x20
	0x032D6DAC B 0x32D6DB4
	0x032D6DB0 MOV X0, X31
	0x032D6DB4 LDR X8, [X19 + 0x48]
	0x032D6DB8 CBZ X8, 0x32D6DE0
	0x032D6DBC LDR W2, [X8 + 0x18]
	0x032D6DC0 ADD X8, X8, 0x20
	0x032D6DC4 CMP W2, 0x0
	0x032D6DC8 CSEL X1, X31, X8, EQ
	0x032D6DCC BL 0x1C83DDC
	0x032D6DD0 MOV X0, X20
	0x032D6DD4 LDP X20, X19, [X31 + 0x10]
	0x032D6DD8 LDP X30, X21, [X31], #0x20
	0x032D6DDC RET
	0x032D6DE0 BL 0x1C16F20
	0x032D6DE4 B 0x1C83DDC
	0x032D6DE8 SUB X31, X31, 0x70
	0x032D6DEC STP X29, X30, [X31 + 0x10]
	0x032D6DF0 STP X28, X27, [X31 + 0x20]
	0x032D6DF4 STP X26, X25, [X31 + 0x30]
	0x032D6DF8 STP X24, X23, [X31 + 0x40]
	0x032D6DFC STP X22, X21, [X31 + 0x50]
	0x032D6E00 STP X20, X19, [X31 + 0x60]
	0x032D6E04 ADRP X21, 0x1106000
	0x032D6E08 LDRB W8, [X21 + 0x930]
	0x032D6E0C MOV X19, X1
	0x032D6E10 MOV X20, X0
	0x032D6E14 TBNZ X8, 0x0, 0x32D6ED4
	0x032D6E18 ADRP X0, 0xE50000
	0x032D6E1C LDR X0, [X0 + 0x2B0]
	0x032D6E20 BL 0x1C16CF4
	0x032D6E24 ADRP X0, 0xE50000
	0x032D6E28 LDR X0, [X0 + 0x2C0]
	0x032D6E2C BL 0x1C16CF4
	0x032D6E30 ADRP X0, 0xE50000
	0x032D6E34 LDR X0, [X0 + 0x2D0]
	0x032D6E38 BL 0x1C16CF4
	0x032D6E3C ADRP X0, 0xE50000
	0x032D6E40 LDR X0, [X0 + 0x2F0]
	0x032D6E44 BL 0x1C16CF4
	0x032D6E48 ADRP X0, 0xE50000
	0x032D6E4C LDR X0, [X0 + 0x2F8]
	0x032D6E50 BL 0x1C16CF4
	0x032D6E54 ADRP X0, 0xE50000
	0x032D6E58 LDR X0, [X0 + 0x300]
	0x032D6E5C BL 0x1C16CF4
	0x032D6E60 ADRP X0, 0xE50000
	0x032D6E64 LDR X0, [X0 + 0x308]
	0x032D6E68 BL 0x1C16CF4
	0x032D6E6C ADRP X0, 0xE50000
	0x032D6E70 LDR X0, [X0 + 0x390]
	0x032D6E74 BL 0x1C16CF4
	0x032D6E78 ADRP X0, 0xE50000
	0x032D6E7C LDR X0, [X0 + 0x310]
	0x032D6E80 BL 0x1C16CF4
	0x032D6E84 ADRP X0, 0xE50000
	0x032D6E88 LDR X0, [X0 + 0x398]
	0x032D6E8C BL 0x1C16CF4
	0x032D6E90 ADRP X0, 0xE50000
	0x032D6E94 LDR X0, [X0 + 0x318]
	0x032D6E98 BL 0x1C16CF4
	0x032D6E9C ADRP X0, 0xE50000
	0x032D6EA0 LDR X0, [X0 + 0x320]
	0x032D6EA4 BL 0x1C16CF4
	0x032D6EA8 ADRP X0, 0xE50000
	0x032D6EAC LDR X0, [X0 + 0x328]
	0x032D6EB0 BL 0x1C16CF4
	0x032D6EB4 ADRP X0, 0xE50000
	0x032D6EB8 LDR X0, [X0 + 0x330]
	0x032D6EBC BL 0x1C16CF4
	0x032D6EC0 ADRP X0, 0xE50000
	0x032D6EC4 LDR X0, [X0 + 0x338]
	0x032D6EC8 BL 0x1C16CF4
	0x032D6ECC MOVZ W8, 0x1
	0x032D6ED0 STRB W8, [X21 + 0x930]
	0x032D6ED4 CBZ X19, 0x32D70CC
	0x032D6ED8 ADRP X8, 0xE50000
	0x032D6EDC LDR X8, [X8 + 0x338]
	0x032D6EE0 ADRP X21, 0xE50000
	0x032D6EE4 ADRP X25, 0xE50000
	0x032D6EE8 ADRP X26, 0xE50000
	0x032D6EEC ADRP X24, 0xE50000
	0x032D6EF0 ADRP X23, 0xE50000
	0x032D6EF4 ADRP X29, 0xE50000
	0x032D6EF8 ADRP X22, 0xE50000
	0x032D6EFC ADRP X28, 0xE50000
	0x032D6F00 ADRP X27, 0xE50000
	0x032D6F04 LDR X21, [X21 + 0x318]
	0x032D6F08 LDR X25, [X25 + 0x2F8]
	0x032D6F0C LDR X26, [X26 + 0x308]
	0x032D6F10 LDR X24, [X24 + 0x300]
	0x032D6F14 LDR X23, [X23 + 0x328]
	0x032D6F18 LDR X29, [X29 + 0x2B0]
	0x032D6F1C LDR X22, [X22 + 0x330]
	0x032D6F20 LDR X28, [X28 + 0x398]
	0x032D6F24 LDR X27, [X27 + 0x310]
	0x032D6F28 LDR X2, [X20 + 0x10]
	0x032D6F2C LDR X1, [X8]
	0x032D6F30 MOV X0, X19
	0x032D6F34 MOV X3, X31
	0x032D6F38 BL 0x32A8BF0
	0x032D6F3C LDR X2, [X20 + 0x48]
	0x032D6F40 LDR X1, [X21]
	0x032D6F44 MOV X0, X19
	0x032D6F48 MOV X3, X31
	0x032D6F4C BL 0x32A8BF0
	0x032D6F50 LDR X2, [X20 + 0x50]
	0x032D6F54 LDR X1, [X25]
	0x032D6F58 MOV X0, X19
	0x032D6F5C MOV X3, X31
	0x032D6F60 BL 0x32A8BF0

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+128], X30
	003 Move [X31+136], X21
	004 Move [X31+144], X20
	005 Move [X31+152], X19
	006 NotImplemented "Instruction MRS not yet implemented."
	007 Move X8, [X21+40]
	008 Move X20, X1
	009 NotImplemented "Instruction MOVI not yet implemented."
	010 Move X1, X31
	011 Move X19, X0
	012 Move [X31+120], X8
	013 Move [X31+80], V0
	014 Move [X31+88], V0
	015 Move [X31+48], V0
	016 Move [X31+56], V0
	017 Move [X31+2], V0
	018 Move [X31+12], W31
	019 Move [X31+8], W31
	020 Call Object..ctor, X0
	021 Compare X20, 0
	022 JumpIfEqual {68}
	023 Move W8, [X20+16]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X20
	026 Move X1, X31
	027 Call RuntimeMarshal.MarshalString, X0
	028 Move [X31+16], X0
	029 Move [X31+24], X1
	030 Add X0, X31, 16
	031 Move X1, X31
	032 Call SafeStringMarshal.get_Value, X0
	033 Add X1, X31, 32
	034 Add X2, X31, 12
	035 Add X3, X31, 8
	036 Call 0x1C84E88
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {98}
	041 Move W3, [X31+12]
	042 Move W5, [X31+8]
	043 Add X1, X31, 32
	044 Move X0, X19
	045 Move X2, X31
	046 Move W4, W31
	047 Move W6, W31
	048 Call AssemblyName.FillName, X0, X1, X2, X3, X4, X5, X6
	049 Move X19, X31
	050 Add X0, X31, 32
	051 Move W1, W31
	052 Move X2, X31
	053 Call RuntimeMarshal.FreeAssemblyName, X0, X1
	054 Compare X19, 0
	055 JumpIfNotEqual {119}
	056 Add X0, X31, 16
	057 Move X1, X31
	058 Call SafeStringMarshal.Dispose, X0
	059 Move X8, [X21+40]
	060 Move X9, [X31+120]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X20, [X31+144]
	063 Move X19, [X31+152]
	064 Move X30, [X31+128]
	065 Move X21, [X31+136]
	066 Add X31, X31, 160
	067 Return 
	068 Move X0, 0xE23000
	069 Move X0, [X0+1320]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X19, X0
	073 Move X0, 0xE51000
	074 Move X0, [X0+648]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Move X2, X31
	079 Call ArgumentNullException..ctor, X0, X1
	080 Move X0, 0xE26000
	081 Move X0, [X0+1400]
	082 Call 0x1C17D08
	083 Call 0x1C17F10
	084 Move X19, X0
	085 Move X0, 0xE51000
	086 Move X0, [X0+656]
	087 Call 0x1C17D08
	088 Move X1, X0
	089 Move X0, X19
	090 Move X2, X31
	091 Call ArgumentException..ctor, X0, X1
	092 Move X0, 0xE51000
	093 Move X0, [X0+664]
	094 Call 0x1C17D08
	095 Move X1, X0
	096 Move X0, X19
	097 Call 0x1C17DEC
	098 Move X0, 0xE50000
	099 Move X0, [X0+1216]
	100 Call 0x1C17D08
	101 Call 0x1C17F10
	102 Move X19, X0
	103 Move X0, 0xE51000
	104 Move X0, [X0+672]
	105 Call 0x1C17D08
	106 Move X1, X0
	107 Move X0, X19
	108 Move X2, X31
	109 Call SystemException..ctor, X0, X1
	110 Move W8, 0x1621
	111 NotImplemented "Instruction MOVK not yet implemented."
	112 Move [X19+96], W8
	113 Move X0, 0xE51000
	114 Move X0, [X0+664]
	115 Call 0x1C17D08
	116 Move X1, X0
	117 Move X0, X19
	118 Call 0x1C17DEC
	119 Move X0, X19
	120 Call 0x1C17F18
	121 Call 0x3EB2B20
	122 Move X20, X1
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move X19, X0
	125 Move X0, X19
	126 Call 0x3EB2AD0
	127 Move X8, [X0]
	128 Move [X31], X8
	129 Call 0x3EB2AE0
	130 Move X19, [X31]
	131 Move [X31], X31
	132 Add X0, X31, 32
	133 Move W1, W31
	134 Move X2, X31
	135 Call RuntimeMarshal.FreeAssemblyName, X0, X1
	136 Move X8, [X31]
	137 Compare X8, 0
	138 JumpIfEqual {145}
	139 Move X0, [X31]
	140 Call 0x1C17F18
	141 Move X20, X1
	142 Move X19, X0
	143 Move X20, X1
	144 Move X19, X0
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move X0, X19
	147 Call 0x3EB2AD0
	148 Move X20, [X0]
	149 Call 0x3EB2AE0
	150 Add X0, X31, 16
	151 Move X1, X31
	152 Call SafeStringMarshal.Dispose, X0
	153 Compare X20, 0
	154 JumpIfEqual {59}
	155 Move X0, X20
	156 Call 0x1C17F18
	157 Move X20, X31
	158 Move X19, X0
	159 Add X0, X31, 16
	160 Move X1, X31
	161 Call SafeStringMarshal.Dispose, X0
	162 Compare X20, 0
	163 JumpIfNotEqual {166}
	164 Move X0, X19
	165 Call 0x1D2D690
	166 Move X0, X20
	167 Call 0x1C17F18
	168 Call 0x1991590

Method: System.Void .ctor(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc)

Disassembly:
	0x032D7204 LDR X0, [X22]
	0x032D7208 BL 0x1C16F10
	0x032D720C MOV X1, X31
	0x032D7210 MOV X19, X0
	0x032D7214 BL 0x33BDD8C
	0x032D7218 MOVZ W8, 0x1
	0x032D721C STR W8, [X19 + 0x58]
	0x032D7220 CBZ X20, 0x32D728C
	0x032D7224 LDR X8, [X20]
	0x032D7228 MOV X0, X20
	0x032D722C LDP X9, X1, [X8 + 0x1C8]
	0x032D7230 BLR X9
	0x032D7234 BL 0x1C83E3C
	0x032D7238 MOV X22, X0
	0x032D723C TBZ X21, 0x0, 0x32D7258
	0x032D7240 LDR X8, [X20]
	0x032D7244 MOV X0, X20
	0x032D7248 LDP X9, X1, [X8 + 0x1A8]
	0x032D724C BLR X9
	0x032D7250 MOV X2, X0
	0x032D7254 B 0x32D725C
	0x032D7258 MOV X2, X31
	0x032D725C MOVZ W3, 0x1
	0x032D7260 MOVZ W4, 0x1
	0x032D7264 MOVZ W5, 0x1
	0x032D7268 MOV X0, X19
	0x032D726C MOV X1, X22
	0x032D7270 MOV W6, W31
	0x032D7274 BL 0x32D5F88
	0x032D7278 MOV X0, X19
	0x032D727C LDP X20, X19, [X31 + 0x20]
	0x032D7280 LDP X22, X21, [X31 + 0x10]
	0x032D7284 LDR X30, [X31], #0x30
	0x032D7288 RET
	0x032D728C BL 0x1C16F20
	0x032D7290 MOV X1, X31
	0x032D7294 B 0x33BDD8C
	0x032D7298 STP X30, X25, [X31 - 0x40]!
	0x032D729C STP X24, X23, [X31 + 0x10]
	0x032D72A0 STP X22, X21, [X31 + 0x20]
	0x032D72A4 STP X20, X19, [X31 + 0x30]
	0x032D72A8 ADRP X25, 0x1105000
	0x032D72AC ADRP X24, 0xE4F000
	0x032D72B0 LDRB W8, [X25 + 0x934]
	0x032D72B4 LDR X24, [X24 + 0x3A8]
	0x032D72B8 MOV W19, W4
	0x032D72BC MOV X20, X3
	0x032D72C0 MOV X21, X2
	0x032D72C4 MOV X23, X1
	0x032D72C8 MOV X22, X0
	0x032D72CC TBNZ X8, 0x0, 0x32D72E4
	0x032D72D0 ADRP X0, 0xE4F000
	0x032D72D4 LDR X0, [X0 + 0x3A8]
	0x032D72D8 BL 0x1C16CF4
	0x032D72DC MOVZ W8, 0x1
	0x032D72E0 STRB W8, [X25 + 0x934]
	0x032D72E4 MOV X0, X22
	0x032D72E8 MOV X1, X31
	0x032D72EC BL 0x33BDD8C
	0x032D72F0 STR X23, [X22 + 0x10]
	0x032D72F4 LDR X0, [X24]
	0x032D72F8 BL 0x1C16F10
	0x032D72FC MOV X1, X31
	0x032D7300 MOV X23, X0
	0x032D7304 BL 0x33BDD8C
	0x032D7308 STR X23, [X22 + 0x28]
	0x032D730C CBZ X23, 0x32D732C
	0x032D7310 STP X21, X20, [X23 + 0x10]
	0x032D7314 STR W19, [X23 + 0x20]
	0x032D7318 LDP X20, X19, [X31 + 0x30]
	0x032D731C LDP X22, X21, [X31 + 0x20]
	0x032D7320 LDP X24, X23, [X31 + 0x10]
	0x032D7324 LDP X30, X25, [X31], #0x40
	0x032D7328 RET
	0x032D732C BL 0x1C16F20
	0x032D7330 MOV X1, X31
	0x032D7334 B 0x33BDD8C
	0x032D7338 STR X30, [X31 - 0x30]!
	0x032D733C STP X22, X21, [X31 + 0x10]
	0x032D7340 STP X20, X19, [X31 + 0x20]
	0x032D7344 ADRP X21, 0x1105000
	0x032D7348 ADRP X22, 0xE4F000
	0x032D734C LDRB W8, [X21 + 0x935]
	0x032D7350 LDR X22, [X22 + 0x3B0]
	0x032D7354 MOV X20, X1
	0x032D7358 MOV X19, X0
	0x032D735C TBNZ X8, 0x0, 0x32D7380
	0x032D7360 ADRP X0, 0xE4F000
	0x032D7364 LDR X0, [X0 + 0x3B8]
	0x032D7368 BL 0x1C16CF4
	0x032D736C ADRP X0, 0xE4F000
	0x032D7370 LDR X0, [X0 + 0x3B0]
	0x032D7374 BL 0x1C16CF4
	0x032D7378 MOVZ W8, 0x1
	0x032D737C STRB W8, [X21 + 0x935]
	0x032D7380 LDR X21, [X22]
	0x032D7384 LDR X8, [X21 + 0x38]
	0x032D7388 CBNZ X8, 0x32D7398
	0x032D738C MOV X0, X21
	0x032D7390 BL 0x1C5C6E0
	0x032D7394 LDR X8, [X21 + 0x38]
	0x032D7398 LDR X0, [X8 + 0x10]
	0x032D739C LDRB W8, [X0 + 0x135]
	0x032D73A0 TBNZ X8, 0x0, 0x32D73A8
	0x032D73A4 BL 0x1C5C684
	0x032D73A8 LDR W8, [X0 + 0xE0]
	0x032D73AC CBNZ W8, 0x32D73B4
	0x032D73B0 BL 0x1C16DFC
	0x032D73B4 LDR X8, [X21 + 0x38]
	0x032D73B8 ADRP X21, 0xE4F000
	0x032D73BC LDR X0, [X8 + 0x10]
	0x032D73C0 LDRB W8, [X0 + 0x135]
	0x032D73C4 LDR X21, [X21 + 0x3B8]
	0x032D73C8 TBNZ X8, 0x0, 0x32D73D0
	0x032D73CC BL 0x1C5C684
	0x032D73D0 LDR X21, [X21]
	0x032D73D4 LDR X9, [X0 + 0xB8]
	0x032D73D8 LDR X8, [X21 + 0x38]
	0x032D73DC LDR X22, [X9]
	0x032D73E0 CBNZ X8, 0x32D73F0
	0x032D73E4 MOV X0, X21
	0x032D73E8 BL 0x1C5C6E0
	0x032D73EC LDR X8, [X21 + 0x38]
	0x032D73F0 LDR X0, [X8 + 0x10]
	0x032D73F4 LDRB W8, [X0 + 0x135]
	0x032D73F8 TBNZ X8, 0x0, 0x32D7400
	0x032D73FC BL 0x1C5C684
	0x032D7400 LDR W8, [X0 + 0xE0]
	0x032D7404 CBNZ W8, 0x32D740C
	0x032D7408 BL 0x1C16DFC
	0x032D740C LDR X8, [X21 + 0x38]
	0x032D7410 LDR X0, [X8 + 0x10]
	0x032D7414 LDRB W8, [X0 + 0x135]
	0x032D7418 TBNZ X8, 0x0, 0x32D7420
	0x032D741C BL 0x1C5C684
	0x032D7420 LDR X8, [X0 + 0xB8]
	0x032D7424 MOV X0, X19
	0x032D7428 MOV X1, X31
	0x032D742C LDR X21, [X8]
	0x032D7430 BL 0x33BDD8C
	0x032D7434 STP X20, X22, [X19 + 0x10]
	0x032D7438 STR X21, [X19 + 0x20]
	0x032D743C LDP X20, X19, [X31 + 0x20]
	0x032D7440 LDP X22, X21, [X31 + 0x10]
	0x032D7444 LDR X30, [X31], #0x30
	0x032D7448 RET
	0x032D744C STR X30, [X31 - 0x30]!
	0x032D7450 STP X22, X21, [X31 + 0x10]
	0x032D7454 STP X20, X19, [X31 + 0x20]
	0x032D7458 MOV X21, X1
	0x032D745C MOV X1, X31
	0x032D7460 MOV X19, X3
	0x032D7464 MOV X20, X2
	0x032D7468 MOV X22, X0
	0x032D746C BL 0x33BDD8C
	0x032D7470 STP X21, X20, [X22 + 0x10]
	0x032D7474 STR X19, [X22 + 0x20]
	0x032D7478 LDP X20, X19, [X31 + 0x20]
	0x032D747C LDP X22, X21, [X31 + 0x10]
	0x032D7480 LDR X30, [X31], #0x30
	0x032D7484 RET
	0x032D7488 B 0x1C716E4
	0x032D748C SUB X31, X31, 0x30
	0x032D7490 STP X30, X21, [X31 + 0x10]
	0x032D7494 STP X20, X19, [X31 + 0x20]
	0x032D7498 ADRP X20, 0x1105000
	0x032D749C LDRB W8, [X20 + 0x936]
	0x032D74A0 MOV X19, X0
	0x032D74A4 TBNZ X8, 0x0, 0x32D74F8
	0x032D74A8 ADRP X0, 0xE4F000
	0x032D74AC LDR X0, [X0 + 0x3C0]
	0x032D74B0 BL 0x1C16CF4
	0x032D74B4 ADRP X0, 0xE4F000
	0x032D74B8 LDR X0, [X0 + 0x3C8]
	0x032D74BC BL 0x1C16CF4
	0x032D74C0 ADRP X0, 0xE4F000
	0x032D74C4 LDR X0, [X0 + 0x3B8]
	0x032D74C8 BL 0x1C16CF4
	0x032D74CC ADRP X0, 0xE4F000
	0x032D74D0 LDR X0, [X0 + 0x3B0]
	0x032D74D4 BL 0x1C16CF4
	0x032D74D8 ADRP X0, 0xE4F000
	0x032D74DC LDR X0, [X0 + 0x3D0]
	0x032D74E0 BL 0x1C16CF4
	0x032D74E4 ADRP X0, 0xE4F000
	0x032D74E8 LDR X0, [X0 + 0x3D8]
	0x032D74EC BL 0x1C16CF4
	0x032D74F0 MOVZ W8, 0x1
	0x032D74F4 STRB W8, [X20 + 0x936]
	0x032D74F8 STP X31, X31, [X31]
	0x032D74FC LDR X8, [X19 + 0x28]
	0x032D7500 CBZ X8, 0x32D762C
	0x032D7504 LDR X0, [X19 + 0x10]
	0x032D7508 LDP X1, X2, [X8 + 0x10]
	0x032D750C LDR W3, [X8 + 0x20]
	0x032D7510 ADRP X21, 0xE4F000
	0x032D7514 LDR X21, [X21 + 0x3C8]
	0x032D7518 ADD X4, X31, 0x8
	0x032D751C ADD X5, X31, 0x0
	0x032D7520 BL 0x1C716E4
	0x032D7524 LDR X0, [X31 + 0x8]
	0x032D7528 CBZ X0, 0x32D7540
	0x032D752C ADRP X8, 0xE4F000
	0x032D7530 LDR X8, [X8 + 0x3D8]
	0x032D7534 LDR X1, [X8]
	0x032D7538 BL 0x21A85F4
	0x032D753C B 0x32D7598
	0x032D7540 ADRP X8, 0xE4F000
	0x032D7544 LDR X8, [X8 + 0x3B0]
	0x032D7548 LDR X20, [X8]
	0x032D754C LDR X8, [X20 + 0x38]
	0x032D7550 CBNZ X8, 0x32D7560
	0x032D7554 MOV X0, X20
	0x032D7558 BL 0x1C5C6E0
	0x032D755C LDR X8, [X20 + 0x38]
	0x032D7560 LDR X0, [X8 + 0x10]
	0x032D7564 LDRB W8, [X0 + 0x135]
	0x032D7568 TBNZ X8, 0x0, 0x32D7570
	0x032D756C BL 0x1C5C684
	0x032D7570 LDR W8, [X0 + 0xE0]
	0x032D7574 CBNZ W8, 0x32D757C
	0x032D7578 BL 0x1C16DFC
	0x032D757C LDR X8, [X20 + 0x38]
	0x032D7580 LDR X0, [X8 + 0x10]
	0x032D7584 LDRB W8, [X0 + 0x135]
	0x032D7588 TBNZ X8, 0x0, 0x32D7590
	0x032D758C BL 0x1C5C684
	0x032D7590 LDR X8, [X0 + 0xB8]
	0x032D7594 LDR X0, [X8]
	0x032D7598 LDR X1, [X21]
	0x032D759C ADRP X21, 0xE4F000
	0x032D75A0 LDR X21, [X21 + 0x3C0]
	0x032D75A4 BL 0x22C9870
	0x032D75A8 STR X0, [X19 + 0x18]
	0x032D75AC LDR X0, [X31]
	0x032D75B0 CBZ X0, 0x32D75C8
	0x032D75B4 ADRP X8, 0xE4F000
	0x032D75B8 LDR X8, [X8 + 0x3D0]
	0x032D75BC LDR X1, [X8]
	0x032D75C0 BL 0x21A84DC
	0x032D75C4 B 0x32D7620
	0x032D75C8 ADRP X8, 0xE4F000
	0x032D75CC LDR X8, [X8 + 0x3B8]
	0x032D75D0 LDR X20, [X8]
	0x032D75D4 LDR X8, [X20 + 0x38]
	0x032D75D8 CBNZ X8, 0x32D75E8
	0x032D75DC MOV X0, X20
	0x032D75E0 BL 0x1C5C6E0
	0x032D75E4 LDR X8, [X20 + 0x38]
	0x032D75E8 LDR X0, [X8 + 0x10]
	0x032D75EC LDRB W8, [X0 + 0x135]
	0x032D75F0 TBNZ X8, 0x0, 0x32D75F8
	0x032D75F4 BL 0x1C5C684
	0x032D75F8 LDR W8, [X0 + 0xE0]
	0x032D75FC CBNZ W8, 0x32D7604
	0x032D7600 BL 0x1C16DFC
	0x032D7604 LDR X8, [X20 + 0x38]
	0x032D7608 LDR X0, [X8 + 0x10]
	0x032D760C LDRB W8, [X0 + 0x135]
	0x032D7610 TBNZ X8, 0x0, 0x32D7618
	0x032D7614 BL 0x1C5C684
	0x032D7618 LDR X8, [X0 + 0xB8]
	0x032D761C LDR X0, [X8]
	0x032D7620 LDR X1, [X21]
	0x032D7624 BL 0x22C97D4
	0x032D7628 STP X0, X31, [X19 + 0x20]
	0x032D762C LDP X20, X19, [X31 + 0x20]
	0x032D7630 LDP X30, X21, [X31 + 0x10]
	0x032D7634 ADD X31, X31, 0x30
	0x032D7638 RET
	0x032D763C LDR X0, [X0 + 0x10]
	0x032D7640 RET
	0x032D7644 STP X30, X19, [X31 - 0x10]!
	0x032D7648 MOV X19, X0
	0x032D764C BL 0x32D748C
	0x032D7650 LDR X0, [X19 + 0x18]
	0x032D7654 LDP X30, X19, [X31], #0x10
	0x032D7658 RET
	0x032D765C STP X30, X19, [X31 - 0x10]!
	0x032D7660 MOV X19, X0
	0x032D7664 BL 0x32D748C
	0x032D7668 LDR X0, [X19 + 0x20]
	0x032D766C LDP X30, X19, [X31], #0x10
	0x032D7670 RET
	0x032D7674 STP X30, X21, [X31 - 0x20]!
	0x032D7678 STP X20, X19, [X31 + 0x10]
	0x032D767C ADRP X20, 0x1105000
	0x032D7680 ADRP X21, 0xE4F000
	0x032D7684 LDRB W8, [X20 + 0x937]
	0x032D7688 LDR X21, [X21 + 0x3E0]
	0x032D768C MOV X19, X0
	0x032D7690 TBNZ X8, 0x0, 0x32D76A8
	0x032D7694 ADRP X0, 0xE4F000
	0x032D7698 LDR X0, [X0 + 0x3E0]
	0x032D769C BL 0x1C16CF4
	0x032D76A0 MOVZ W8, 0x1
	0x032D76A4 STRB W8, [X20 + 0x937]
	0x032D76A8 LDR X0, [X21]
	0x032D76AC LDR W8, [X0 + 0xE0]
	0x032D76B0 CBNZ W8, 0x32D76B8
	0x032D76B4 BL 0x1C16DFC
	0x032D76B8 MOV X0, X19
	0x032D76BC LDP X20, X19, [X31 + 0x10]
	0x032D76C0 MOV W1, W31
	0x032D76C4 MOV X2, X31
	0x032D76C8 LDP X30, X21, [X31], #0x20
	0x032D76CC B 0x33C842C
	0x032D76D0 STP X30, X21, [X31 - 0x20]!
	0x032D76D4 STP X20, X19, [X31 + 0x10]
	0x032D76D8 ADRP X20, 0x1105000
	0x032D76DC ADRP X21, 0xE4F000
	0x032D76E0 LDRB W8, [X20 + 0x938]
	0x032D76E4 LDR X21, [X21 + 0x3E0]
	0x032D76E8 MOV X19, X0
	0x032D76EC TBNZ X8, 0x0, 0x32D7704
	0x032D76F0 ADRP X0, 0xE4F000
	0x032D76F4 LDR X0, [X0 + 0x3E0]
	0x032D76F8 BL 0x1C16CF4
	0x032D76FC MOVZ W8, 0x1
	0x032D7700 STRB W8, [X20 + 0x938]
	0x032D7704 LDR X0, [X21]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x1106000
	009 Move W8, [X21+2347]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {90}
	016 Move X0, 0xE50000
	017 Move X0, [X0+680]
	018 Call 0x1C17CF4
	019 Move X0, 0xE50000
	020 Move X0, [X0+688]
	021 Call 0x1C17CF4
	022 Move X0, 0xE50000
	023 Move X0, [X0+696]
	024 Call 0x1C17CF4
	025 Move X0, 0xE50000
	026 Move X0, [X0+704]
	027 Call 0x1C17CF4
	028 Move X0, 0xE50000
	029 Move X0, [X0+712]
	030 Call 0x1C17CF4
	031 Move X0, 0xE50000
	032 Move X0, [X0+720]
	033 Call 0x1C17CF4
	034 Move X0, 0xE4F000
	035 Move X0, [X0+280]
	036 Call 0x1C17CF4
	037 Move X0, 0xE1D000
	038 Move X0, [X0+1560]
	039 Call 0x1C17CF4
	040 Move X0, 0xE1F000
	041 Move X0, [X0+3144]
	042 Call 0x1C17CF4
	043 Move X0, 0xE50000
	044 Move X0, [X0+728]
	045 Call 0x1C17CF4
	046 Move X0, 0xE50000
	047 Move X0, [X0+736]
	048 Call 0x1C17CF4
	049 Move X0, 0xE1D000
	050 Move X0, [X0+1728]
	051 Call 0x1C17CF4
	052 Move X0, 0xE50000
	053 Move X0, [X0+744]
	054 Call 0x1C17CF4
	055 Move X0, 0xE25000
	056 Move X0, [X0+1984]
	057 Call 0x1C17CF4
	058 Move X0, 0xE50000
	059 Move X0, [X0+752]
	060 Call 0x1C17CF4
	061 Move X0, 0xE50000
	062 Move X0, [X0+760]
	063 Call 0x1C17CF4
	064 Move X0, 0xE50000
	065 Move X0, [X0+768]
	066 Call 0x1C17CF4
	067 Move X0, 0xE50000
	068 Move X0, [X0+776]
	069 Call 0x1C17CF4
	070 Move X0, 0xE50000
	071 Move X0, [X0+784]
	072 Call 0x1C17CF4
	073 Move X0, 0xE50000
	074 Move X0, [X0+792]
	075 Call 0x1C17CF4
	076 Move X0, 0xE50000
	077 Move X0, [X0+800]
	078 Call 0x1C17CF4
	079 Move X0, 0xE50000
	080 Move X0, [X0+808]
	081 Call 0x1C17CF4
	082 Move X0, 0xE50000
	083 Move X0, [X0+816]
	084 Call 0x1C17CF4
	085 Move X0, 0xE50000
	086 Move X0, [X0+824]
	087 Call 0x1C17CF4
	088 Move W8, 1
	089 Move [X21+2347], W8
	090 Move X0, X19
	091 Move X1, X31
	092 Call Object..ctor, X0
	093 Compare X20, 0
	094 JumpIfEqual {330}
	095 Move X8, 0xE50000
	096 Move X8, [X8+824]
	097 Move X21, 0xE50000
	098 Move X21, [X21+768]
	099 Move X23, 0xE50000
	100 Move X1, [X8]
	101 Move X24, 0xE1D000
	102 Move X22, 0xE50000
	103 Move X23, [X23+744]
	104 Move X24, [X24+1728]
	105 Move X22, [X22+808]
	106 Move X0, X20
	107 Move X2, X31
	108 Call SerializationInfo.GetString, X0, X1
	109 Move [X19+16], X0
	110 Move X1, [X21]
	111 Move X0, X20
	112 Move X2, X31
	113 Call SerializationInfo.GetString, X0, X1
	114 Move [X19+24], X0
	115 Move X0, [X24]
	116 Move X21, [X23]
	117 Move W8, [X0+224]
	118 Compare W8, 0
	119 JumpIfNotEqual {121}
	120 Call 0x1C17DFC
	121 Move X0, X21
	122 Move X1, X31
	123 Call Type.GetTypeFromHandle, X0
	124 Move X1, [X22]
	125 Move X2, X0
	126 Move X0, X20
	127 Move X3, X31
	128 Call SerializationInfo.GetValue, X0, X1, X2
	129 Compare X0, 0
	130 JumpIfEqual {139}
	131 Move X8, 0xE25000
	132 Move X8, [X8+1984]
	133 Move X1, [X8]
	134 Move X8, [X0]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move [X19+96], X0
	137 Move X8, [X0]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Move [X19+96], X31
	140 Move X24, 0xE4F000
	141 Move X24, [X24+280]
	142 Move X21, 0xE50000
	143 Move X23, 0xE1D000
	144 Move X1, X31
	145 Move X0, [X24]
	146 Move X21, [X21+792]
	147 Move X23, [X23+1560]
	148 Call Type.GetTypeFromHandle, X0
	149 Move X1, [X21]
	150 Move X2, X0
	151 Move X0, X20
	152 Move X3, X31
	153 Call SerializationInfo.GetValue, X0, X1, X2
	154 Compare X0, 0
	155 JumpIfEqual {169}
	156 Move X22, [X23]
	157 Move X21, X0
	158 Move X1, X22
	159 Call 0x1C17E00
	160 Compare X0, 0
	161 JumpIfEqual {195}
	162 Move [X19+72], X0
	163 Move X22, [X23]
	164 Move X0, X21
	165 Move X1, X22
	166 Call 0x1C17E00
	167 Compare X0, 0
	168 JumpIfNotEqual {170}
	169 Move [X19+72], X31
	170 Move X0, [X24]
	171 Move X21, 0xE50000
	172 Move X21, [X21+760]
	173 Move X1, X31
	174 Call Type.GetTypeFromHandle, X0
	175 Move X1, [X21]
	176 Move X2, X0
	177 Move X0, X20
	178 Move X3, X31
	179 Call SerializationInfo.GetValue, X0, X1, X2
	180 Compare X0, 0
	181 JumpIfEqual {198}
	182 Move X22, [X23]
	183 Move X21, X0
	184 Move X1, X22
	185 Call 0x1C17E00
	186 Compare X0, 0
	187 JumpIfEqual {195}
	188 Move [X19+80], X0
	189 Move X22, [X23]
	190 Move X0, X21
	191 Move X1, X22
	192 Call 0x1C17E00
	193 Compare X0, 0
	194 JumpIfNotEqual {199}
	195 Move X0, X21
	196 Move X1, X22
	197 Call 0x1C181E0
	198 Move [X19+80], X31
	199 Move X8, 0xE50000
	200 Move X8, [X8+680]
	201 Move X21, 0xE50000
	202 Move X1, X31
	203 Move X0, [X8]
	204 Move X21, [X21+816]
	205 Call Type.GetTypeFromHandle, X0
	206 Move X1, [X21]
	207 Move X2, X0
	208 Move X0, X20
	209 Move X3, X31
	210 Call SerializationInfo.GetValue, X0, X1, X2
	211 Compare X0, 0
	212 JumpIfEqual {330}
	213 Move X8, 0xE50000
	214 Move X8, [X8+688]
	215 Move X9, [X0]
	216 Move X1, [X8]
	217 Move X8, [X9+64]
	218 Move X9, [X1+64]
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move X21, 0xE50000
	221 Move X22, 0xE50000
	222 Move X21, [X21+728]
	223 Move X22, [X22+784]
	224 Call 0x1C17E08
	225 Move W8, [X0]
	226 Move X1, X31
	227 Move [X19+60], W8
	228 Move X0, [X21]
	229 Call Type.GetTypeFromHandle, X0
	230 Move X1, [X22]
	231 Move X2, X0
	232 Move X0, X20
	233 Move X3, X31
	234 Call SerializationInfo.GetValue, X0, X1, X2
	235 Compare X0, 0
	236 JumpIfEqual {255}
	237 Move X8, 0xE50000
	238 Move X8, [X8+736]
	239 Move X9, [X0]
	240 Move X1, [X8]
	241 Move W10, [X9+304]
	242 Move W8, [X1+304]
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Move X10, [X9+200]
	245 Subtract X9, X8, 1
	246 Move X10, [X10]
	247 NotImplemented "Instruction CMP not yet implemented."
	248 Move [X19+64], X0
	249 Move X10, [X0]
	250 Move W11, [X10+304]
	251 NotImplemented "Instruction CMP not yet implemented."
	252 Move X8, [X10+200]
	253 Move X8, [X8]
	254 NotImplemented "Instruction CMP not yet implemented."
	255 Move [X19+64], X31
	256 Move X8, 0xE50000
	257 Move X8, [X8+712]
	258 Move X21, 0xE50000
	259 Move X1, X31
	260 Move X0, [X8]
	261 Move X21, [X21+752]
	262 Call Type.GetTypeFromHandle, X0
	263 Move X1, [X21]
	264 Move X2, X0
	265 Move X0, X20
	266 Move X3, X31
	267 Call SerializationInfo.GetValue, X0, X1, X2
	268 Compare X0, 0
	269 JumpIfEqual {330}
	270 Move X8, 0xE50000
	271 Move X8, [X8+720]
	272 Move X9, [X0]
	273 Move X1, [X8]
	274 Move X8, [X9+64]
	275 Move X9, [X1+64]
	276 NotImplemented "Instruction CMP not yet implemented."
	277 Move X21, 0xE50000
	278 Move X22, 0xE50000
	279 Move X21, [X21+696]
	280 Move X22, [X22+800]
	281 Call 0x1C17E08
	282 Move W8, [X0]
	283 Move X1, X31
	284 Move [X19+88], W8
	285 Move X0, [X21]
	286 Call Type.GetTypeFromHandle, X0
	287 Move X1, [X22]
	288 Move X2, X0
	289 Move X0, X20
	290 Move X3, X31
	291 Call SerializationInfo.GetValue, X0, X1, X2
	292 Compare X0, 0
	293 JumpIfEqual {330}
	294 Move X8, 0xE50000
	295 Move X8, [X8+704]
	296 Move X9, [X0]
	297 Move X1, [X8]
	298 Move X8, [X9+64]
	299 Move X9, [X1+64]
	300 NotImplemented "Instruction CMP not yet implemented."
	301 Move X21, 0xE50000
	302 Move X21, [X21+776]
	303 Call 0x1C17E08
	304 Move W8, [X0]
	305 Move X0, X20
	306 Move X2, X31
	307 Move [X19+56], W8
	308 Move X1, [X21]
	309 Call SerializationInfo.GetInt32, X0, X1
	310 Add W31, W0, 1
	311 Move X8, 0xE1F000
	312 Move X8, [X8+3144]
	313 Move W20, W0
	314 Move X0, [X8]
	315 Call 0x1C17F10
	316 Move W1, W20
	317 Move X2, X31
	318 Move X21, X0
	319 Call CultureInfo..ctor, X0, X1
	320 Move [X19+48], X21
	321 Move X20, [X31+48]
	322 Move X19, [X31+56]
	323 Move X22, [X31+32]
	324 Move X21, [X31+40]
	325 Move X24, [X31+16]
	326 Move X23, [X31+24]
	327 Move X30, [X31+64]
	328 Return 
	329 Call 0x1C181E0
	330 Call 0x1C17F20

Method: System.String get_Name()

Disassembly:
	0x032D7708 LDR W8, [X0 + 0xE0]
	0x032D770C CBNZ W8, 0x32D7714

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Globalization.CultureInfo get_CultureInfo()

Disassembly:
	0x032D7710 BL 0x1C16DFC
	0x032D7714 MOV X0, X19

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Reflection.AssemblyNameFlags get_Flags()

Disassembly:
	0x032D7718 LDP X20, X19, [X31 + 0x10]
	0x032D771C MOV W1, W31

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.String get_FullName()

Disassembly:
	0x032D7720 MOV X2, X31
	0x032D7724 LDP X30, X21, [X31], #0x20
	0x032D7728 B 0x33C842C
	0x032D772C STP X30, X21, [X31 - 0x20]!
	0x032D7730 STP X20, X19, [X31 + 0x10]
	0x032D7734 ADRP X20, 0x1105000
	0x032D7738 ADRP X21, 0xE4F000
	0x032D773C LDRB W8, [X20 + 0x939]
	0x032D7740 LDR X21, [X21 + 0x3E0]
	0x032D7744 MOV X19, X0
	0x032D7748 TBNZ X8, 0x0, 0x32D7760
	0x032D774C ADRP X0, 0xE4F000
	0x032D7750 LDR X0, [X0 + 0x3E0]
	0x032D7754 BL 0x1C16CF4
	0x032D7758 MOVZ W8, 0x1
	0x032D775C STRB W8, [X20 + 0x939]
	0x032D7760 LDR X0, [X21]
	0x032D7764 LDR W8, [X0 + 0xE0]
	0x032D7768 CBNZ W8, 0x32D7770
	0x032D776C BL 0x1C16DFC
	0x032D7770 MOV X0, X19
	0x032D7774 LDP X20, X19, [X31 + 0x10]
	0x032D7778 MOV W1, W31
	0x032D777C MOV X2, X31
	0x032D7780 LDP X30, X21, [X31], #0x20
	0x032D7784 B 0x33C842C
	0x032D7788 STP X30, X21, [X31 - 0x20]!
	0x032D778C STP X20, X19, [X31 + 0x10]
	0x032D7790 ADRP X20, 0x1105000
	0x032D7794 ADRP X21, 0xE4F000
	0x032D7798 LDRB W8, [X20 + 0x93A]
	0x032D779C LDR X21, [X21 + 0x3E0]
	0x032D77A0 MOV X19, X0
	0x032D77A4 TBNZ X8, 0x0, 0x32D77BC
	0x032D77A8 ADRP X0, 0xE4F000
	0x032D77AC LDR X0, [X0 + 0x3E0]
	0x032D77B0 BL 0x1C16CF4
	0x032D77B4 MOVZ W8, 0x1
	0x032D77B8 STRB W8, [X20 + 0x93A]
	0x032D77BC LDR X0, [X21]
	0x032D77C0 LDR W8, [X0 + 0xE0]
	0x032D77C4 CBNZ W8, 0x32D77CC
	0x032D77C8 BL 0x1C16DFC
	0x032D77CC MOV X0, X19
	0x032D77D0 LDP X20, X19, [X31 + 0x10]
	0x032D77D4 MOV W1, W31
	0x032D77D8 MOV X2, X31
	0x032D77DC LDP X30, X21, [X31], #0x20
	0x032D77E0 B 0x33C842C
	0x032D77E4 STP X30, X21, [X31 - 0x20]!
	0x032D77E8 STP X20, X19, [X31 + 0x10]
	0x032D77EC ADRP X20, 0x1105000
	0x032D77F0 ADRP X21, 0xE4F000
	0x032D77F4 LDRB W8, [X20 + 0x93B]
	0x032D77F8 LDR X21, [X21 + 0x3E0]
	0x032D77FC MOV X19, X0
	0x032D7800 TBNZ X8, 0x0, 0x32D7818
	0x032D7804 ADRP X0, 0xE4F000
	0x032D7808 LDR X0, [X0 + 0x3E0]
	0x032D780C BL 0x1C16CF4
	0x032D7810 MOVZ W8, 0x1
	0x032D7814 STRB W8, [X20 + 0x93B]
	0x032D7818 LDR X0, [X21]
	0x032D781C LDR W8, [X0 + 0xE0]
	0x032D7820 CBNZ W8, 0x32D7828
	0x032D7824 BL 0x1C16DFC
	0x032D7828 MOV X0, X19
	0x032D782C LDP X20, X19, [X31 + 0x10]
	0x032D7830 MOV W1, W31
	0x032D7834 MOV X2, X31
	0x032D7838 LDP X30, X21, [X31], #0x20
	0x032D783C B 0x33C842C
	0x032D7840 STR X30, [X31 - 0x10]!
	0x032D7844 LDR X0, [X0 + 0x10]
	0x032D7848 CBZ X0, 0x32D785C
	0x032D784C LDR X8, [X0]
	0x032D7850 LDP X2, X1, [X8 + 0x1B8]
	0x032D7854 LDR X30, [X31], #0x10
	0x032D7858 BR X2
	0x032D785C BL 0x1C16F20
	0x032D7860 SUB X31, X31, 0xD0
	0x032D7864 STP X29, X30, [X31 + 0x70]
	0x032D7868 STP X28, X27, [X31 + 0x80]
	0x032D786C STP X26, X25, [X31 + 0x90]
	0x032D7870 STP X24, X23, [X31 + 0xA0]
	0x032D7874 STP X22, X21, [X31 + 0xB0]
	0x032D7878 STP X20, X19, [X31 + 0xC0]
	0x032D787C ADRP X21, 0x1105000
	0x032D7880 ADRP X19, 0xE1C000
	0x032D7884 LDRB W8, [X21 + 0x93C]
	0x032D7888 LDR X19, [X19 + 0x8F0]
	0x032D788C MOV X20, X0
	0x032D7890 TBNZ X8, 0x0, 0x32D7914
	0x032D7894 ADRP X0, 0xE1C000
	0x032D7898 LDR X0, [X0 + 0x9C8]
	0x032D789C BL 0x1C16CF4
	0x032D78A0 ADRP X0, 0xE4F000
	0x032D78A4 LDR X0, [X0 + 0x3E8]
	0x032D78A8 BL 0x1C16CF4
	0x032D78AC ADRP X0, 0xE4F000
	0x032D78B0 LDR X0, [X0 + 0x108]
	0x032D78B4 BL 0x1C16CF4
	0x032D78B8 ADRP X0, 0xE4F000
	0x032D78BC LDR X0, [X0 + 0x3F0]
	0x032D78C0 BL 0x1C16CF4
	0x032D78C4 ADRP X0, 0xE4F000
	0x032D78C8 LDR X0, [X0 + 0x110]
	0x032D78CC BL 0x1C16CF4
	0x032D78D0 ADRP X0, 0xE1C000
	0x032D78D4 LDR X0, [X0 + 0x8F0]
	0x032D78D8 BL 0x1C16CF4
	0x032D78DC ADRP X0, 0xE1C000
	0x032D78E0 LDR X0, [X0 + 0x838]
	0x032D78E4 BL 0x1C16CF4
	0x032D78E8 ADRP X0, 0xE27000
	0x032D78EC LDR X0, [X0 + 0x310]
	0x032D78F0 BL 0x1C16CF4
	0x032D78F4 ADRP X0, 0xE1C000
	0x032D78F8 LDR X0, [X0 + 0xEC8]
	0x032D78FC BL 0x1C16CF4
	0x032D7900 ADRP X0, 0xE4F000
	0x032D7904 LDR X0, [X0 + 0x3F8]
	0x032D7908 BL 0x1C16CF4
	0x032D790C MOVZ W8, 0x1
	0x032D7910 STRB W8, [X21 + 0x93C]
	0x032D7914 MOVI V0.2D, 0x0
	0x032D7918 MOV X0, X20
	0x032D791C STP X31, X31, [X31 + 0x60]
	0x032D7920 STP V0, V0, [X31 + 0x40]
	0x032D7924 STR V0, [X31 + 0x3]
	0x032D7928 BL 0x32D748C
	0x032D792C LDR X0, [X19]
	0x032D7930 BL 0x1C16F10
	0x032D7934 MOV X1, X31
	0x032D7938 MOV X19, X0
	0x032D793C BL 0x3231AC4
	0x032D7940 LDR X0, [X20 + 0x10]
	0x032D7944 CBZ X0, 0x32D7D50
	0x032D7948 LDR X8, [X0]
	0x032D794C LDP X9, X1, [X8 + 0x1B8]
	0x032D7950 BLR X9
	0x032D7954 CBZ X0, 0x32D7D50
	0x032D7958 LDR X8, [X0]
	0x032D795C ADRP X21, 0xE1C000
	0x032D7960 ADRP X22, 0xE27000
	0x032D7964 LDR X9, [X8 + 0x2E8]
	0x032D7968 LDR X1, [X8 + 0x2F0]
	0x032D796C LDR X21, [X21 + 0xEC8]
	0x032D7970 LDR X22, [X22 + 0x310]
	0x032D7974 BLR X9
	0x032D7978 LDR X8, [X21]
	0x032D797C LDR X2, [X22]
	0x032D7980 MOV X1, X0
	0x032D7984 MOV X3, X31
	0x032D7988 MOV X0, X8
	0x032D798C BL 0x32274B8
	0x032D7990 CBZ X19, 0x32D7D50
	0x032D7994 MOV X1, X0
	0x032D7998 MOV X0, X19
	0x032D799C MOV X2, X31
	0x032D79A0 BL 0x32333E0
	0x032D79A4 LDR X22, [X20 + 0x18]
	0x032D79A8 CBZ X22, 0x32D7D50
	0x032D79AC ADRP X28, 0xE4F000
	0x032D79B0 ADRP X29, 0xE4F000
	0x032D79B4 ADRP X24, 0xE1C000
	0x032D79B8 ADRP X25, 0xE4F000
	0x032D79BC ADRP X27, 0xE4F000
	0x032D79C0 ADRP X26, 0xE1C000
	0x032D79C4 ADRP X23, 0xE4F000
	0x032D79C8 LDR X28, [X28 + 0x108]
	0x032D79CC LDR X29, [X29 + 0x110]
	0x032D79D0 LDR X24, [X24 + 0x838]
	0x032D79D4 LDR X25, [X25 + 0x3E8]
	0x032D79D8 LDR X27, [X27 + 0x3F0]
	0x032D79DC LDR X26, [X26 + 0x9C8]
	0x032D79E0 LDR X23, [X23 + 0x3F8]
	0x032D79E4 MOV W21, W31
	0x032D79E8 LDR X8, [X22]
	0x032D79EC LDR X1, [X28]
	0x032D79F0 LDRH W9, [X8 + 0x12E]
	0x032D79F4 CBZ X9, 0x32D7A18
	0x032D79F8 LDR X10, [X8 + 0xB0]
	0x032D79FC ADD X10, X10, 0x8
	0x032D7A00 LDUR X11, [X10 - 0x8]
	0x032D7A04 CMP X11, X1
	0x032D7A08 B.EQ 0x32D7A28
	0x032D7A0C SUBS X9, X9, 0x1
	0x032D7A10 ADD X10, X10, 0x10
	0x032D7A14 B.NE 0x32D7A00
	0x032D7A18 MOV X0, X22
	0x032D7A1C MOV W2, W31
	0x032D7A20 BL 0x1C5C788
	0x032D7A24 B 0x32D7A34
	0x032D7A28 LDRSW X9, [X10]
	0x032D7A2C ADD X8, X8, X9, 0x4, LSL
	0x032D7A30 ADD X0, X8, 0x138
	0x032D7A34 LDP X8, X1, [X0]
	0x032D7A38 MOV X0, X22
	0x032D7A3C BLR X8
	0x032D7A40 CMP W21, W0
	0x032D7A44 B.GE 0x32D7B54
	0x032D7A48 LDR X22, [X20 + 0x18]
	0x032D7A4C CBZ X22, 0x32D7D50
	0x032D7A50 LDR X8, [X22]
	0x032D7A54 LDR X1, [X29]
	0x032D7A58 LDRH W9, [X8 + 0x12E]
	0x032D7A5C CBZ X9, 0x32D7A80
	0x032D7A60 LDR X10, [X8 + 0xB0]
	0x032D7A64 ADD X10, X10, 0x8
	0x032D7A68 LDUR X11, [X10 - 0x8]
	0x032D7A6C CMP X11, X1
	0x032D7A70 B.EQ 0x32D7A90
	0x032D7A74 SUBS X9, X9, 0x1
	0x032D7A78 ADD X10, X10, 0x10
	0x032D7A7C B.NE 0x32D7A68
	0x032D7A80 MOV X0, X22
	0x032D7A84 MOV W2, W31
	0x032D7A88 BL 0x1C5C788
	0x032D7A8C B 0x32D7A9C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x1106000
	009 Move W8, [X20+2348]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {53}
	015 Move X0, 0xE1F000
	016 Move X0, [X0+368]
	017 Call 0x1C17CF4
	018 Move X0, 0xE1F000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move X0, 0xE1D000
	022 Move X0, [X0+2288]
	023 Call 0x1C17CF4
	024 Move X0, 0xE1F000
	025 Move X0, [X0+632]
	026 Call 0x1C17CF4
	027 Move X0, 0xE50000
	028 Move X0, [X0+832]
	029 Call 0x1C17CF4
	030 Move X0, 0xE50000
	031 Move X0, [X0+840]
	032 Call 0x1C17CF4
	033 Move X0, 0xE50000
	034 Move X0, [X0+848]
	035 Call 0x1C17CF4
	036 Move X0, 0xE50000
	037 Move X0, [X0+856]
	038 Call 0x1C17CF4
	039 Move X0, 0xE50000
	040 Move X0, [X0+864]
	041 Call 0x1C17CF4
	042 Move X0, 0xE50000
	043 Move X0, [X0+872]
	044 Call 0x1C17CF4
	045 Move X0, 0xE28000
	046 Move X0, [X0+3288]
	047 Call 0x1C17CF4
	048 Move X0, 0xE50000
	049 Move X0, [X0+880]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X20+2348], W8
	053 Move X8, [X19+16]
	054 Compare X8, 0
	055 JumpIfEqual {95}
	056 Move X8, 0xE1D000
	057 Move X8, [X8+2288]
	058 Move X0, [X8]
	059 Call 0x1C17F10
	060 Move X1, X31
	061 Move X20, X0
	062 Call StringBuilder..ctor, X0
	063 Move X0, [X19+16]
	064 Compare X0, 0
	065 JumpIfEqual {253}
	066 Move X21, 0xE1F000
	067 Move X21, [X21+368]
	068 Move W1, W31
	069 Move X2, X31
	070 Call String.get_Chars, X0, X1
	071 Move X8, [X21]
	072 Move W21, W0
	073 Move W9, [X8+224]
	074 Compare W9, 0
	075 JumpIfNotEqual {78}
	076 Move X0, X8
	077 Call 0x1C17DFC
	078 Move W0, W21
	079 Move X1, X31
	080 Call Char.IsWhiteSpace, X0
	081 Move X1, [X19+16]
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {108}
	086 Move X8, 0xE28000
	087 Move X8, [X8+3288]
	088 Move X3, X31
	089 Move X0, [X8]
	090 Move X2, X0
	091 Call String.Concat, X0, X1, X2
	092 Compare X20, 0
	093 JumpIfEqual {253}
	094 Move X1, X0
	095 Move X8, 0xE1F000
	096 Move X8, [X8+632]
	097 Move X20, [X31+48]
	098 Move X19, [X31+56]
	099 Move X22, [X31+32]
	100 Move X21, [X31+40]
	101 Move X24, [X31+16]
	102 Move X23, [X31+24]
	103 Move X8, [X8]
	104 Move X8, [X8+184]
	105 Move X0, [X8]
	106 Move X30, [X31+64]
	107 Return X0
	108 Compare X20, 0
	109 JumpIfEqual {253}
	110 Move X0, X20
	111 Move X2, X31
	112 Call StringBuilder.Append, X0, X1
	113 Move X0, [X19+96]
	114 Move X1, X31
	115 Move X2, X31
	116 Call Version.op_Inequality, X0, X1
	117 Move TEMP, X0
	118 And TEMP, TEMP, 1
	119 Compare TEMP, 1
	120 JumpIfNotEqual {138}
	121 Move X8, 0xE50000
	122 Move X8, [X8+880]
	123 Move X0, X20
	124 Move X2, X31
	125 Move X1, [X8]
	126 Call StringBuilder.Append, X0, X1
	127 Move X0, [X19+96]
	128 Compare X0, 0
	129 JumpIfEqual {253}
	130 Move X8, [X0]
	131 Move X9, [X8+360]
	132 Move X1, [X8+368]
	133 NotImplemented "Instruction BLR not yet implemented."
	134 Move X1, X0
	135 Move X0, X20
	136 Move X2, X31
	137 Call StringBuilder.Append, X0, X1
	138 Move X8, [X19+48]
	139 Compare X8, 0
	140 JumpIfEqual {186}
	141 Move X8, 0xE50000
	142 Move X8, [X8+832]
	143 Move X0, X20
	144 Move X2, X31
	145 Move X1, [X8]
	146 Call StringBuilder.Append, X0, X1
	147 Move X0, [X19+48]
	148 Compare X0, 0
	149 JumpIfEqual {253}
	150 Move X8, [X0]
	151 Move X9, [X8+408]
	152 Move X1, [X8+416]
	153 NotImplemented "Instruction BLR not yet implemented."
	154 Move X8, 0xE1F000
	155 Move X8, [X8+3144]
	156 Move W21, W0
	157 Move X8, [X8]
	158 Move W9, [X8+224]
	159 Compare W9, 0
	160 JumpIfNotEqual {163}
	161 Move X0, X8
	162 Call 0x1C17DFC
	163 Move X0, X31
	164 Call CultureInfo.get_InvariantCulture
	165 Compare X0, 0
	166 JumpIfEqual {253}
	167 Move X8, [X0]
	168 Move X9, [X8+408]
	169 Move X1, [X8+416]
	170 NotImplemented "Instruction BLR not yet implemented."
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Move X8, 0xE50000
	173 Move X8, [X8+864]
	174 Move X1, [X8]
	175 Move X0, [X19+48]
	176 Compare X0, 0
	177 JumpIfEqual {253}
	178 Move X8, [X0]
	179 Move X9, [X8+424]
	180 Move X1, [X8+432]
	181 NotImplemented "Instruction BLR not yet implemented."
	182 Move X1, X0
	183 Move X0, X20
	184 Move X2, X31
	185 Call StringBuilder.Append, X0, X1
	186 Move X0, X19
	187 Call AssemblyName.InternalGetPublicKeyToken, X0
	188 Compare X0, 0
	189 JumpIfEqual {225}
	190 Move X8, [X0+24]
	191 Move X21, X0
	192 Compare X8, 0
	193 JumpIfEqual {219}
	194 Move X8, 0xE50000
	195 Move X8, [X8+856]
	196 Move X0, X20
	197 Move X2, X31
	198 Move X1, [X8]
	199 Call StringBuilder.Append, X0, X1
	200 Move X8, [X21+24]
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Move X24, 0xE50000
	203 Move X24, [X24+848]
	204 Move X22, X31
	205 And X8, X8, 0
	206 Add X23, X21, 32
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Move X1, [X24]
	209 Add X0, X23, X22
	210 Move X2, X31
	211 Call Byte.ToString, X0, X1
	212 Move X1, X0
	213 Move X0, X20
	214 Move X2, X31
	215 Call StringBuilder.Append, X0, X1
	216 Move W8, [X21+24]
	217 Add X22, X22, 1
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Move X8, 0xE50000
	220 Move X8, [X8+840]
	221 Move X0, X20
	222 Move X2, X31
	223 Move X1, [X8]
	224 Call StringBuilder.Append, X0, X1
	225 Move W8, [X19+57]
	226 Move TEMP, X8
	227 And TEMP, TEMP, 1
	228 Compare TEMP, 1
	229 JumpIfEqual {232}
	230 Compare X20, 0
	231 JumpIfNotEqual {240}
	232 Compare X20, 0
	233 JumpIfEqual {253}
	234 Move X8, 0xE50000
	235 Move X8, [X8+872]
	236 Move X0, X20
	237 Move X2, X31
	238 Move X1, [X8]
	239 Call StringBuilder.Append, X0, X1
	240 Move X8, [X20]
	241 Move X0, X20
	242 Move X20, [X31+48]
	243 Move X19, [X31+56]
	244 Move X22, [X31+32]
	245 Move X21, [X31+40]
	246 Move X2, [X8+360]
	247 Move X1, [X8+368]
	248 Move X24, [X31+16]
	249 Move X23, [X31+24]
	250 Move X30, [X31+64]
	251 CallNoReturn X2
	252 Call 0x1C17F28
	253 Call 0x1C17F20

Method: System.Version get_Version()

Disassembly:
	0x032D7B74 LDUR X11, [X10 - 0x8]
	0x032D7B78 CMP X11, X1

ISIL:
	001 Move X0, [X0+96]
	002 Return X0

Method: System.Void set_Version(System.Version value)

Disassembly:
	0x032D7B7C B.EQ 0x32D7B9C
	0x032D7B80 SUBS X9, X9, 0x1
	0x032D7B84 ADD X10, X10, 0x10
	0x032D7B88 B.NE 0x32D7B74
	0x032D7B8C MOV X0, X21
	0x032D7B90 MOV W2, W31
	0x032D7B94 BL 0x1C5C788
	0x032D7B98 B 0x32D7BA8
	0x032D7B9C LDRSW X9, [X10]
	0x032D7BA0 ADD X8, X8, X9, 0x4, LSL
	0x032D7BA4 ADD X0, X8, 0x138
	0x032D7BA8 LDP X8, X1, [X0]
	0x032D7BAC MOV X0, X21
	0x032D7BB0 BLR X8
	0x032D7BB4 CMP W0, 0x1
	0x032D7BB8 B.LT 0x32D7BCC
	0x032D7BBC LDR X1, [X24]
	0x032D7BC0 MOV X0, X19
	0x032D7BC4 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X19, X0
	006 Move [X0+96], X1
	007 Move X0, X1
	008 Move X1, X31
	009 Move X2, X31
	010 Call Version.op_Equality, X0, X1
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {17}
	015 Move [X19+32], X31
	016 Move [X19+40], X31
	017 Compare X20, 0
	018 JumpIfEqual {25}
	019 Move V0, [X20+1]
	020 Move [X19+2], V0
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 
	025 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x032D7BC8 BL 0x32333E0
	0x032D7BCC LDR X22, [X20 + 0x20]
	0x032D7BD0 CBZ X22, 0x32D7D50
	0x032D7BD4 MOV W21, W31
	0x032D7BD8 LDR X8, [X22]
	0x032D7BDC LDR X1, [X25]
	0x032D7BE0 LDRH W9, [X8 + 0x12E]
	0x032D7BE4 CBZ X9, 0x32D7C08
	0x032D7BE8 LDR X10, [X8 + 0xB0]
	0x032D7BEC ADD X10, X10, 0x8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call AssemblyName.get_FullName, X0
	005 Compare X0, 0
	006 JumpIfEqual {10}
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, X19
	011 Move X1, X31
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call Object.ToString, X0
	015 Return X0

Method: System.Byte[] GetPublicKeyToken()

Disassembly:
	0x032D7BF0 LDUR X11, [X10 - 0x8]
	0x032D7BF4 CMP X11, X1
	0x032D7BF8 B.EQ 0x32D7C18
	0x032D7BFC SUBS X9, X9, 0x1
	0x032D7C00 ADD X10, X10, 0x10
	0x032D7C04 B.NE 0x32D7BF0
	0x032D7C08 MOV X0, X22
	0x032D7C0C MOV W2, W31
	0x032D7C10 BL 0x1C5C788
	0x032D7C14 B 0x32D7C24
	0x032D7C18 LDRSW X9, [X10]
	0x032D7C1C ADD X8, X8, X9, 0x4, LSL
	0x032D7C20 ADD X0, X8, 0x138
	0x032D7C24 LDP X8, X1, [X0]
	0x032D7C28 MOV X0, X22
	0x032D7C2C BLR X8
	0x032D7C30 CMP W21, W0
	0x032D7C34 B.GE 0x32D7D54
	0x032D7C38 LDR X22, [X20 + 0x20]
	0x032D7C3C CBZ X22, 0x32D7D50
	0x032D7C40 LDR X8, [X22]
	0x032D7C44 LDR X1, [X27]
	0x032D7C48 LDRH W9, [X8 + 0x12E]
	0x032D7C4C CBZ X9, 0x32D7C70
	0x032D7C50 LDR X10, [X8 + 0xB0]
	0x032D7C54 ADD X10, X10, 0x8
	0x032D7C58 LDUR X11, [X10 - 0x8]
	0x032D7C5C CMP X11, X1
	0x032D7C60 B.EQ 0x32D7C80
	0x032D7C64 SUBS X9, X9, 0x1
	0x032D7C68 ADD X10, X10, 0x10
	0x032D7C6C B.NE 0x32D7C58
	0x032D7C70 MOV X0, X22
	0x032D7C74 MOV W2, W31
	0x032D7C78 BL 0x1C5C788
	0x032D7C7C B 0x32D7C8C
	0x032D7C80 LDRSW X9, [X10]
	0x032D7C84 ADD X8, X8, X9, 0x4, LSL
	0x032D7C88 ADD X0, X8, 0x138
	0x032D7C8C LDP X9, X2, [X0]
	0x032D7C90 ADD X8, X31, 0x0
	0x032D7C94 MOV X0, X22
	0x032D7C98 MOV W1, W21
	0x032D7C9C BLR X9
	0x032D7CA0 LDP V0, V1, [X31]
	0x032D7CA4 LDR V2, [X31 + 0x2]
	0x032D7CA8 ADD X0, X31, 0x30
	0x032D7CAC MOV X1, X31
	0x032D7CB0 STP V0, V1, [X31 + 0x30]
	0x032D7CB4 STR V2, [X31 + 0x5]
	0x032D7CB8 BL 0x32D35FC
	0x032D7CBC MOV X1, X0
	0x032D7CC0 MOV X0, X19
	0x032D7CC4 MOV X2, X31
	0x032D7CC8 BL 0x32333E0
	0x032D7CCC LDR X22, [X20 + 0x20]
	0x032D7CD0 CBZ X22, 0x32D7D50

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1106000
	005 Move W8, [X20+2349]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE4C000
	012 Move X0, [X0+2640]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2349], W8
	016 Move X0, [X19+80]
	017 Compare X0, 0
	018 JumpIfEqual {23}
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return X0
	023 Move X8, [X19+72]
	024 Compare X8, 0
	025 JumpIfEqual {38}
	026 Move X8, [X8+24]
	027 Compare X8, 0
	028 JumpIfEqual {39}
	029 Move X0, X19
	030 Call AssemblyName.get_IsPublicKeyValid, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {49}
	035 Move X0, X19
	036 Call AssemblyName.ComputePublicKeyToken, X0
	037 Move [X19+80], X0
	038 Move X0, X31
	039 Move X19, 0xE4C000
	040 Move X19, [X19+2640]
	041 Move X0, [X19]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X19]
	047 Move X8, [X0+184]
	048 Move X0, [X8]
	049 Move X0, 0xE4B000
	050 Move X0, [X0+1680]
	051 Call 0x1C17D08
	052 Call 0x1C17F10
	053 Move X19, X0
	054 Move X0, 0xE50000
	055 Move X0, [X0+888]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Move X2, X31
	060 Call SecurityException..ctor, X0, X1
	061 Move X0, 0xE50000
	062 Move X0, [X0+904]
	063 Call 0x1C17D08
	064 Move X1, X0
	065 Move X0, X19
	066 Call 0x1C17DEC

Method: System.Boolean get_IsPublicKeyValid()

Disassembly:
	0x032D7CD4 LDR X8, [X22]
	0x032D7CD8 LDR X1, [X25]
	0x032D7CDC LDRH W9, [X8 + 0x12E]
	0x032D7CE0 CBZ X9, 0x32D7D04
	0x032D7CE4 LDR X10, [X8 + 0xB0]
	0x032D7CE8 ADD X10, X10, 0x8
	0x032D7CEC LDUR X11, [X10 - 0x8]
	0x032D7CF0 CMP X11, X1
	0x032D7CF4 B.EQ 0x32D7D14
	0x032D7CF8 SUBS X9, X9, 0x1
	0x032D7CFC ADD X10, X10, 0x10
	0x032D7D00 B.NE 0x32D7CEC
	0x032D7D04 MOV X0, X22
	0x032D7D08 MOV W2, W31
	0x032D7D0C BL 0x1C5C788
	0x032D7D10 B 0x32D7D20
	0x032D7D14 LDRSW X9, [X10]
	0x032D7D18 ADD X8, X8, X9, 0x4, LSL
	0x032D7D1C ADD X0, X8, 0x138
	0x032D7D20 LDP X8, X1, [X0]
	0x032D7D24 MOV X0, X22
	0x032D7D28 BLR X8
	0x032D7D2C ADD W21, W21, 0x1
	0x032D7D30 CMP W21, W0
	0x032D7D34 B.GE 0x32D7D48
	0x032D7D38 LDR X1, [X24]
	0x032D7D3C MOV X0, X19
	0x032D7D40 MOV X2, X31
	0x032D7D44 BL 0x32333E0
	0x032D7D48 LDR X22, [X20 + 0x20]
	0x032D7D4C CBNZ X22, 0x32D7BD8
	0x032D7D50 BL 0x1C16F20
	0x032D7D54 LDR X20, [X26]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+72]
	003 Compare X8, 0
	004 JumpIfEqual {29}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Compare W9, 0
	008 JumpIfNotEqual {18}
	009 Call 0x1C17F28
	010 Move X12, X31
	011 Move W10, W31
	012 Add X11, X8, 32
	013 Move W13, [X11]
	014 Add X12, X12, 1
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Add W10, W10, W13
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W10, [X8+32]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Compare W10, 0
	021 JumpIfNotEqual {26}
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move W8, [X8+44]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, 1
	026 Move W0, W31
	027 Move X30, [X31+16]
	028 Return X0
	029 Call 0x1C17F20

Method: System.Byte[] InternalGetPublicKeyToken()

Disassembly:
	0x032D7A90 LDRSW X9, [X10]
	0x032D7A94 ADD X8, X8, X9, 0x4, LSL
	0x032D7A98 ADD X0, X8, 0x138
	0x032D7A9C LDP X8, X2, [X0]
	0x032D7AA0 MOV X0, X22
	0x032D7AA4 MOV W1, W21
	0x032D7AA8 BLR X8
	0x032D7AAC STP X0, X1, [X31 + 0x60]
	0x032D7AB0 ADD X0, X31, 0x60
	0x032D7AB4 MOV X1, X31
	0x032D7AB8 BL 0x32D4580
	0x032D7ABC MOV X1, X0
	0x032D7AC0 MOV X0, X19
	0x032D7AC4 MOV X2, X31
	0x032D7AC8 BL 0x32333E0
	0x032D7ACC LDR X22, [X20 + 0x18]
	0x032D7AD0 CBZ X22, 0x32D7D50
	0x032D7AD4 LDR X8, [X22]
	0x032D7AD8 LDR X1, [X28]
	0x032D7ADC LDRH W9, [X8 + 0x12E]
	0x032D7AE0 CBZ X9, 0x32D7B04
	0x032D7AE4 LDR X10, [X8 + 0xB0]
	0x032D7AE8 ADD X10, X10, 0x8
	0x032D7AEC LDUR X11, [X10 - 0x8]
	0x032D7AF0 CMP X11, X1
	0x032D7AF4 B.EQ 0x32D7B14
	0x032D7AF8 SUBS X9, X9, 0x1
	0x032D7AFC ADD X10, X10, 0x10
	0x032D7B00 B.NE 0x32D7AEC
	0x032D7B04 MOV X0, X22
	0x032D7B08 MOV W2, W31
	0x032D7B0C BL 0x1C5C788
	0x032D7B10 B 0x32D7B20
	0x032D7B14 LDRSW X9, [X10]
	0x032D7B18 ADD X8, X8, X9, 0x4, LSL
	0x032D7B1C ADD X0, X8, 0x138
	0x032D7B20 LDP X8, X1, [X0]
	0x032D7B24 MOV X0, X22
	0x032D7B28 BLR X8
	0x032D7B2C ADD W21, W21, 0x1
	0x032D7B30 CMP W21, W0
	0x032D7B34 B.GE 0x32D7B48
	0x032D7B38 LDR X1, [X24]
	0x032D7B3C MOV X0, X19
	0x032D7B40 MOV X2, X31
	0x032D7B44 BL 0x32333E0
	0x032D7B48 LDR X22, [X20 + 0x18]
	0x032D7B4C CBNZ X22, 0x32D79E8
	0x032D7B50 B 0x32D7D50
	0x032D7B54 LDR X21, [X20 + 0x20]
	0x032D7B58 CBZ X21, 0x32D7D50
	0x032D7B5C LDR X8, [X21]
	0x032D7B60 LDR X1, [X25]
	0x032D7B64 LDRH W9, [X8 + 0x12E]
	0x032D7B68 CBZ X9, 0x32D7B8C
	0x032D7B6C LDR X10, [X8 + 0xB0]
	0x032D7B70 ADD X10, X10, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1106000
	005 Move W8, [X20+2350]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE4C000
	012 Move X0, [X0+2640]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2350], W8
	016 Move X0, [X19+80]
	017 Compare X0, 0
	018 JumpIfEqual {23}
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return X0
	023 Move X8, [X19+72]
	024 Compare X8, 0
	025 JumpIfEqual {41}
	026 Move X8, [X8+24]
	027 Compare X8, 0
	028 JumpIfEqual {42}
	029 Move X0, X19
	030 Call AssemblyName.get_IsPublicKeyValid, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {52}
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Call AssemblyName.ComputePublicKeyToken, X0
	040 Return X0
	041 Move X0, X31
	042 Move X19, 0xE4C000
	043 Move X19, [X19+2640]
	044 Move X0, [X19]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X19]
	050 Move X8, [X0+184]
	051 Move X0, [X8]
	052 Move X0, 0xE4B000
	053 Move X0, [X0+1680]
	054 Call 0x1C17D08
	055 Call 0x1C17F10
	056 Move X19, X0
	057 Move X0, 0xE50000
	058 Move X0, [X0+888]
	059 Call 0x1C17D08
	060 Move X1, X0
	061 Move X0, X19
	062 Move X2, X31
	063 Call SecurityException..ctor, X0, X1
	064 Move X0, 0xE50000
	065 Move X0, [X0+896]
	066 Call 0x1C17D08
	067 Move X1, X0
	068 Move X0, X19
	069 Call 0x1C17DEC

Method: System.Void get_public_token(System.Byte* token, System.Byte* pubkey, System.Int32 len)

Disassembly:
	0x032D7DE4 SUB X31, X31, 0xF0

ISIL:
	001 Call 0x1C84DDC
	002 Return 

Method: System.Byte[] ComputePublicKeyToken()

Disassembly:
	0x032D7D58 LDR X8, [X20 + 0x38]
	0x032D7D5C CBNZ X8, 0x32D7D6C
	0x032D7D60 MOV X0, X20
	0x032D7D64 BL 0x1C5C6E0
	0x032D7D68 LDR X8, [X20 + 0x38]
	0x032D7D6C LDR X0, [X8 + 0x10]
	0x032D7D70 LDRB W8, [X0 + 0x135]
	0x032D7D74 TBNZ X8, 0x0, 0x32D7D7C
	0x032D7D78 BL 0x1C5C684
	0x032D7D7C LDR W8, [X0 + 0xE0]
	0x032D7D80 CBNZ W8, 0x32D7D88
	0x032D7D84 BL 0x1C16DFC
	0x032D7D88 LDR X8, [X20 + 0x38]
	0x032D7D8C LDR X0, [X8 + 0x10]
	0x032D7D90 LDRB W8, [X0 + 0x135]
	0x032D7D94 TBNZ X8, 0x0, 0x32D7D9C
	0x032D7D98 BL 0x1C5C684
	0x032D7D9C LDR X8, [X0 + 0xB8]
	0x032D7DA0 LDR X1, [X23]
	0x032D7DA4 MOV X0, X19
	0x032D7DA8 MOV X3, X31
	0x032D7DAC LDR X2, [X8]
	0x032D7DB0 BL 0x3234E54
	0x032D7DB4 LDR X8, [X19]
	0x032D7DB8 MOV X0, X19
	0x032D7DBC LDP X9, X1, [X8 + 0x168]
	0x032D7DC0 BLR X9
	0x032D7DC4 LDP X20, X19, [X31 + 0xC0]
	0x032D7DC8 LDP X22, X21, [X31 + 0xB0]
	0x032D7DCC LDP X24, X23, [X31 + 0xA0]
	0x032D7DD0 LDP X26, X25, [X31 + 0x90]
	0x032D7DD4 LDP X28, X27, [X31 + 0x80]
	0x032D7DD8 LDP X29, X30, [X31 + 0x70]
	0x032D7DDC ADD X31, X31, 0xD0
	0x032D7DE0 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1106000
	006 Move X21, 0xE1D000
	007 Move W8, [X20+2351]
	008 Move X21, [X21+1560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE1D000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2351], W8
	019 Move X0, [X21]
	020 Move W1, 8
	021 Call 0x1C17D6C
	022 Move X20, X0
	023 Compare X0, 0
	024 JumpIfEqual {30}
	025 Move W8, [X20+24]
	026 Compare W8, 0
	027 JumpIfEqual {29}
	028 Add X0, X20, 32
	029 Move X0, X31
	030 Move X8, [X19+72]
	031 Compare X8, 0
	032 JumpIfEqual {44}
	033 Move W2, [X8+24]
	034 Add X8, X8, 32
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSEL not yet implemented."
	037 Call 0x1C84DDC
	038 Move X0, X20
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0
	044 Call 0x1C17F20

Method: System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x032D7DE8 STR X30, [X31 + 0xA0]
	0x032D7DEC STP X26, X25, [X31 + 0xB0]
	0x032D7DF0 STP X24, X23, [X31 + 0xC0]
	0x032D7DF4 STP X22, X21, [X31 + 0xD0]
	0x032D7DF8 STP X20, X19, [X31 + 0xE0]
	0x032D7DFC ADRP X21, 0x1105000
	0x032D7E00 LDRB W8, [X21 + 0x93D]
	0x032D7E04 MOV X20, X1
	0x032D7E08 MOV X19, X0
	0x032D7E0C TBNZ X8, 0x0, 0x32D7E78
	0x032D7E10 ADRP X0, 0xE46000
	0x032D7E14 LDR X0, [X0 + 0x978]
	0x032D7E18 BL 0x1C16CF4
	0x032D7E1C ADRP X0, 0xE4E000
	0x032D7E20 LDR X0, [X0 + 0xC80]
	0x032D7E24 BL 0x1C16CF4
	0x032D7E28 ADRP X0, 0xE4F000
	0x032D7E2C LDR X0, [X0 + 0xF8]
	0x032D7E30 BL 0x1C16CF4
	0x032D7E34 ADRP X0, 0xE4F000
	0x032D7E38 LDR X0, [X0 + 0xC8]
	0x032D7E3C BL 0x1C16CF4
	0x032D7E40 ADRP X0, 0xE4F000
	0x032D7E44 LDR X0, [X0 + 0x3E8]
	0x032D7E48 BL 0x1C16CF4
	0x032D7E4C ADRP X0, 0xE4F000
	0x032D7E50 LDR X0, [X0 + 0x108]
	0x032D7E54 BL 0x1C16CF4
	0x032D7E58 ADRP X0, 0xE4F000
	0x032D7E5C LDR X0, [X0 + 0x3F0]
	0x032D7E60 BL 0x1C16CF4
	0x032D7E64 ADRP X0, 0xE4F000
	0x032D7E68 LDR X0, [X0 + 0x110]
	0x032D7E6C BL 0x1C16CF4
	0x032D7E70 MOVZ W8, 0x1
	0x032D7E74 STRB W8, [X21 + 0x93D]
	0x032D7E78 MOVI V0.2D, 0x0
	0x032D7E7C STP X31, X31, [X31 + 0x90]
	0x032D7E80 STP V0, V0, [X31 + 0x70]
	0x032D7E84 STR V0, [X31 + 0x6]
	0x032D7E88 CBZ X20, 0x32D8440
	0x032D7E8C ADRP X8, 0xE4E000
	0x032D7E90 LDR X8, [X8 + 0xC80]
	0x032D7E94 LDR X9, [X20]
	0x032D7E98 LDR X8, [X8]
	0x032D7E9C LDRB W11, [X9 + 0x130]
	0x032D7EA0 LDRB W10, [X8 + 0x130]
	0x032D7EA4 CMP W11, W10
	0x032D7EA8 B.CC 0x32D8440
	0x032D7EAC LDR X9, [X9 + 0xC8]
	0x032D7EB0 ADD X9, X9, X10, 0x3, LSL
	0x032D7EB4 LDUR X9, [X9 - 0x8]
	0x032D7EB8 CMP X9, X8
	0x032D7EBC CSEL X23, X20, X31, EQ
	0x032D7EC0 B.NE 0x32D8440
	0x032D7EC4 CBZ X23, 0x32D843C
	0x032D7EC8 ADRP X8, 0xE46000
	0x032D7ECC LDR X8, [X8 + 0x978]
	0x032D7ED0 LDR X20, [X23 + 0x10]
	0x032D7ED4 LDR X21, [X19 + 0x10]
	0x032D7ED8 LDR X0, [X8]
	0x032D7EDC LDR W8, [X0 + 0xE0]
	0x032D7EE0 CBNZ W8, 0x32D7EE8
	0x032D7EE4 BL 0x1C16DFC
	0x032D7EE8 MOV X0, X20
	0x032D7EEC MOV X1, X21
	0x032D7EF0 MOV X2, X31
	0x032D7EF4 BL 0x32CC854
	0x032D7EF8 TBNZ X0, 0x0, 0x32D8440
	0x032D7EFC LDR X20, [X23 + 0x18]
	0x032D7F00 CBZ X20, 0x32D843C
	0x032D7F04 ADRP X22, 0xE4F000
	0x032D7F08 LDR X8, [X20]
	0x032D7F0C LDR X22, [X22 + 0x108]
	0x032D7F10 LDRH W9, [X8 + 0x12E]
	0x032D7F14 LDR X1, [X22]
	0x032D7F18 CBZ X9, 0x32D7F3C
	0x032D7F1C LDR X10, [X8 + 0xB0]
	0x032D7F20 ADD X10, X10, 0x8
	0x032D7F24 LDUR X11, [X10 - 0x8]
	0x032D7F28 CMP X11, X1
	0x032D7F2C B.EQ 0x32D7F4C
	0x032D7F30 SUBS X9, X9, 0x1
	0x032D7F34 ADD X10, X10, 0x10
	0x032D7F38 B.NE 0x32D7F24
	0x032D7F3C MOV X0, X20
	0x032D7F40 MOV W2, W31
	0x032D7F44 BL 0x1C5C788
	0x032D7F48 B 0x32D7F58
	0x032D7F4C LDRSW X9, [X10]
	0x032D7F50 ADD X8, X8, X9, 0x4, LSL
	0x032D7F54 ADD X0, X8, 0x138
	0x032D7F58 LDP X8, X1, [X0]
	0x032D7F5C MOV X0, X20
	0x032D7F60 BLR X8
	0x032D7F64 LDR X21, [X19 + 0x18]
	0x032D7F68 CBZ X21, 0x32D843C
	0x032D7F6C LDR X8, [X21]
	0x032D7F70 LDR X1, [X22]
	0x032D7F74 MOV W20, W0
	0x032D7F78 LDRH W9, [X8 + 0x12E]
	0x032D7F7C CBZ X9, 0x32D7FA0
	0x032D7F80 LDR X10, [X8 + 0xB0]
	0x032D7F84 ADD X10, X10, 0x8
	0x032D7F88 LDUR X11, [X10 - 0x8]
	0x032D7F8C CMP X11, X1
	0x032D7F90 B.EQ 0x32D7FB0
	0x032D7F94 SUBS X9, X9, 0x1
	0x032D7F98 ADD X10, X10, 0x10
	0x032D7F9C B.NE 0x32D7F88
	0x032D7FA0 MOV X0, X21
	0x032D7FA4 MOV W2, W31
	0x032D7FA8 BL 0x1C5C788
	0x032D7FAC B 0x32D7FBC
	0x032D7FB0 LDRSW X9, [X10]
	0x032D7FB4 ADD X8, X8, X9, 0x4, LSL
	0x032D7FB8 ADD X0, X8, 0x138
	0x032D7FBC LDP X8, X1, [X0]
	0x032D7FC0 MOV X0, X21
	0x032D7FC4 BLR X8
	0x032D7FC8 CMP W20, W0
	0x032D7FCC B.NE 0x32D8440
	0x032D7FD0 LDR X20, [X23 + 0x20]
	0x032D7FD4 CBZ X20, 0x32D843C
	0x032D7FD8 ADRP X24, 0xE4F000
	0x032D7FDC LDR X8, [X20]
	0x032D7FE0 LDR X24, [X24 + 0x3E8]
	0x032D7FE4 LDRH W9, [X8 + 0x12E]
	0x032D7FE8 LDR X1, [X24]
	0x032D7FEC CBZ X9, 0x32D8010
	0x032D7FF0 LDR X10, [X8 + 0xB0]
	0x032D7FF4 ADD X10, X10, 0x8
	0x032D7FF8 LDUR X11, [X10 - 0x8]
	0x032D7FFC CMP X11, X1
	0x032D8000 B.EQ 0x32D8020
	0x032D8004 SUBS X9, X9, 0x1
	0x032D8008 ADD X10, X10, 0x10
	0x032D800C B.NE 0x32D7FF8
	0x032D8010 MOV X0, X20
	0x032D8014 MOV W2, W31
	0x032D8018 BL 0x1C5C788
	0x032D801C B 0x32D802C
	0x032D8020 LDRSW X9, [X10]
	0x032D8024 ADD X8, X8, X9, 0x4, LSL
	0x032D8028 ADD X0, X8, 0x138
	0x032D802C LDP X8, X1, [X0]
	0x032D8030 MOV X0, X20
	0x032D8034 BLR X8
	0x032D8038 LDR X21, [X19 + 0x20]
	0x032D803C CBZ X21, 0x32D843C
	0x032D8040 LDR X8, [X21]
	0x032D8044 LDR X1, [X24]
	0x032D8048 MOV W20, W0
	0x032D804C LDRH W9, [X8 + 0x12E]
	0x032D8050 CBZ X9, 0x32D8074
	0x032D8054 LDR X10, [X8 + 0xB0]
	0x032D8058 ADD X10, X10, 0x8
	0x032D805C LDUR X11, [X10 - 0x8]
	0x032D8060 CMP X11, X1
	0x032D8064 B.EQ 0x32D8084
	0x032D8068 SUBS X9, X9, 0x1
	0x032D806C ADD X10, X10, 0x10
	0x032D8070 B.NE 0x32D805C
	0x032D8074 MOV X0, X21
	0x032D8078 MOV W2, W31
	0x032D807C BL 0x1C5C788
	0x032D8080 B 0x32D8090
	0x032D8084 LDRSW X9, [X10]
	0x032D8088 ADD X8, X8, X9, 0x4, LSL
	0x032D808C ADD X0, X8, 0x138
	0x032D8090 LDP X8, X1, [X0]
	0x032D8094 MOV X0, X21
	0x032D8098 BLR X8
	0x032D809C CMP W20, W0
	0x032D80A0 B.NE 0x32D8440
	0x032D80A4 LDR X21, [X19 + 0x18]
	0x032D80A8 CBZ X21, 0x32D843C
	0x032D80AC ADRP X25, 0xE4E000
	0x032D80B0 ADRP X26, 0xE4E000
	0x032D80B4 LDR X25, [X25 + 0x110]
	0x032D80B8 LDR X26, [X26 + 0xC8]
	0x032D80BC MOV W20, W31
	0x032D80C0 LDR X8, [X21]
	0x032D80C4 LDR X1, [X22]
	0x032D80C8 LDRH W9, [X8 + 0x12E]
	0x032D80CC CBZ X9, 0x32D80F0
	0x032D80D0 LDR X10, [X8 + 0xB0]
	0x032D80D4 ADD X10, X10, 0x8
	0x032D80D8 LDUR X11, [X10 - 0x8]
	0x032D80DC CMP X11, X1
	0x032D80E0 B.EQ 0x32D8100
	0x032D80E4 SUBS X9, X9, 0x1
	0x032D80E8 ADD X10, X10, 0x10
	0x032D80EC B.NE 0x32D80D8
	0x032D80F0 MOV X0, X21
	0x032D80F4 MOV W2, W31
	0x032D80F8 BL 0x1C5C788
	0x032D80FC B 0x32D810C
	0x032D8100 LDRSW X9, [X10]
	0x032D8104 ADD X8, X8, X9, 0x4, LSL
	0x032D8108 ADD X0, X8, 0x138
	0x032D810C LDP X8, X1, [X0]
	0x032D8110 MOV X0, X21

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0x1106000
	015 Move W8, [X21+2352]
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {69}
	022 Move X0, 0xE50000
	023 Move X0, [X0+688]
	024 Call 0x1C17CF4
	025 Move X0, 0xE50000
	026 Move X0, [X0+704]
	027 Call 0x1C17CF4
	028 Move X0, 0xE50000
	029 Move X0, [X0+720]
	030 Call 0x1C17CF4
	031 Move X0, 0xE50000
	032 Move X0, [X0+752]
	033 Call 0x1C17CF4
	034 Move X0, 0xE50000
	035 Move X0, [X0+760]
	036 Call 0x1C17CF4
	037 Move X0, 0xE50000
	038 Move X0, [X0+768]
	039 Call 0x1C17CF4
	040 Move X0, 0xE50000
	041 Move X0, [X0+776]
	042 Call 0x1C17CF4
	043 Move X0, 0xE50000
	044 Move X0, [X0+912]
	045 Call 0x1C17CF4
	046 Move X0, 0xE50000
	047 Move X0, [X0+784]
	048 Call 0x1C17CF4
	049 Move X0, 0xE50000
	050 Move X0, [X0+920]
	051 Call 0x1C17CF4
	052 Move X0, 0xE50000
	053 Move X0, [X0+792]
	054 Call 0x1C17CF4
	055 Move X0, 0xE50000
	056 Move X0, [X0+800]
	057 Call 0x1C17CF4
	058 Move X0, 0xE50000
	059 Move X0, [X0+808]
	060 Call 0x1C17CF4
	061 Move X0, 0xE50000
	062 Move X0, [X0+816]
	063 Call 0x1C17CF4
	064 Move X0, 0xE50000
	065 Move X0, [X0+824]
	066 Call 0x1C17CF4
	067 Move W8, 1
	068 Move [X21+2352], W8
	069 Compare X19, 0
	070 JumpIfEqual {205}
	071 Move X8, 0xE50000
	072 Move X8, [X8+824]
	073 Move X21, 0xE50000
	074 Move X25, 0xE50000
	075 Move X26, 0xE50000
	076 Move X24, 0xE50000
	077 Move X23, 0xE50000
	078 Move X29, 0xE50000
	079 Move X22, 0xE50000
	080 Move X28, 0xE50000
	081 Move X27, 0xE50000
	082 Move X21, [X21+792]
	083 Move X25, [X25+760]
	084 Move X26, [X26+776]
	085 Move X24, [X24+768]
	086 Move X23, [X23+808]
	087 Move X29, [X29+688]
	088 Move X22, [X22+816]
	089 Move X28, [X28+920]
	090 Move X27, [X27+784]
	091 Move X2, [X20+16]
	092 Move X1, [X8]
	093 Move X0, X19
	094 Move X3, X31
	095 Call SerializationInfo.AddValue, X0, X1, X2
	096 Move X2, [X20+72]
	097 Move X1, [X21]
	098 Move X0, X19
	099 Move X3, X31
	100 Call SerializationInfo.AddValue, X0, X1, X2
	101 Move X2, [X20+80]
	102 Move X1, [X25]
	103 Move X0, X19
	104 Move X3, X31
	105 Call SerializationInfo.AddValue, X0, X1, X2
	106 Move X0, [X20+48]
	107 Move X21, [X26]
	108 Compare X0, 0
	109 JumpIfEqual {115}
	110 Move X8, [X0]
	111 Move X9, [X8+408]
	112 Move X1, [X8+416]
	113 NotImplemented "Instruction BLR not yet implemented."
	114 Move W2, W0
	115 Move TEMP, 0
	116 Not TEMP
	117 Move W2, TEMP
	118 Move X0, X19
	119 Move X1, X21
	120 Move X3, X31
	121 Call SerializationInfo.AddValue, X0, X1, X2
	122 Move X2, [X20+24]
	123 Move X1, [X24]
	124 Move X0, X19
	125 Move X3, X31
	126 Call SerializationInfo.AddValue, X0, X1, X2
	127 Move X2, [X20+96]
	128 Move X1, [X23]
	129 Move X0, X19
	130 Move X3, X31
	131 Call SerializationInfo.AddValue, X0, X1, X2
	132 Move W8, [X20+60]
	133 Move X0, [X29]
	134 Add X1, X31, 12
	135 Move [X31+12], W8
	136 Call 0x1C17E04
	137 Move X1, [X22]
	138 Move X2, X0
	139 Move X0, X19
	140 Move X3, X31
	141 Call SerializationInfo.AddValue, X0, X1, X2
	142 Move X0, [X29]
	143 Add X1, X31, 8
	144 Move [X31+8], W31
	145 Call 0x1C17E04
	146 Move X1, [X28]
	147 Move X2, X0
	148 Move X0, X19
	149 Move X3, X31
	150 Call SerializationInfo.AddValue, X0, X1, X2
	151 Move X2, [X20+64]
	152 Move X1, [X27]
	153 Move X0, X19
	154 Move X3, X31
	155 Call SerializationInfo.AddValue, X0, X1, X2
	156 Move X9, 0xE4F000
	157 Move W8, [X20+88]
	158 Move X9, [X9+720]
	159 Add X1, X31, 4
	160 Move [X31+4], W8
	161 Move X0, [X9]
	162 Call 0x1C17E04
	163 Move X8, 0xE4F000
	164 Move X8, [X8+752]
	165 Move X2, X0
	166 Move X0, X19
	167 Move X3, X31
	168 Move X1, [X8]
	169 Call SerializationInfo.AddValue, X0, X1, X2
	170 Move X9, 0xE4F000
	171 Move W8, [X20+56]
	172 Move X9, [X9+704]
	173 Add X1, X31, 0
	174 Move [X31], W8
	175 Move X0, [X9]
	176 Call 0x1C17E04
	177 Move X8, 0xE4F000
	178 Move X8, [X8+800]
	179 Move X2, X0
	180 Move X0, X19
	181 Move X3, X31
	182 Move X1, [X8]
	183 Call SerializationInfo.AddValue, X0, X1, X2
	184 Move X8, 0xE4F000
	185 Move X8, [X8+912]
	186 Move X0, X19
	187 Move X2, X31
	188 Move X3, X31
	189 Move X1, [X8]
	190 Call SerializationInfo.AddValue, X0, X1, X2
	191 Move X20, [X31+96]
	192 Move X19, [X31+104]
	193 Move X22, [X31+80]
	194 Move X21, [X31+88]
	195 Move X24, [X31+64]
	196 Move X23, [X31+72]
	197 Move X26, [X31+48]
	198 Move X25, [X31+56]
	199 Move X28, [X31+32]
	200 Move X27, [X31+40]
	201 Move X29, [X31+16]
	202 Move X30, [X31+24]
	203 Add X31, X31, 112
	204 Return 
	205 Move X0, 0xE21000
	206 Move X0, [X0+1320]
	207 Call 0x1C17D08
	208 Call 0x1C17F10
	209 Move X19, X0
	210 Move X0, 0xE46000
	211 Move X0, [X0+728]
	212 Call 0x1C17D08
	213 Move X1, X0
	214 Move X0, X19
	215 Move X2, X31
	216 Call ArgumentNullException..ctor, X0, X1
	217 Move X0, 0xE4F000
	218 Move X0, [X0+928]
	219 Call 0x1C17D08
	220 Move X1, X0
	221 Move X0, X19
	222 Call 0x1C17DEC

Method: System.Object Clone()

Disassembly:
	0x032D8114 BLR X8
	0x032D8118 CMP W20, W0
	0x032D811C B.GE 0x32D8224
	0x032D8120 LDR X21, [X19 + 0x18]
	0x032D8124 CBZ X21, 0x32D843C
	0x032D8128 LDR X8, [X21]
	0x032D812C LDR X1, [X25]
	0x032D8130 LDRH W9, [X8 + 0x12E]
	0x032D8134 CBZ X9, 0x32D8158
	0x032D8138 LDR X10, [X8 + 0xB0]
	0x032D813C ADD X10, X10, 0x8
	0x032D8140 LDUR X11, [X10 - 0x8]
	0x032D8144 CMP X11, X1
	0x032D8148 B.EQ 0x32D8168
	0x032D814C SUBS X9, X9, 0x1
	0x032D8150 ADD X10, X10, 0x10
	0x032D8154 B.NE 0x32D8140
	0x032D8158 MOV X0, X21
	0x032D815C MOV W2, W31
	0x032D8160 BL 0x1C5C788
	0x032D8164 B 0x32D8174
	0x032D8168 LDRSW X9, [X10]
	0x032D816C ADD X8, X8, X9, 0x4, LSL
	0x032D8170 ADD X0, X8, 0x138
	0x032D8174 LDP X8, X2, [X0]
	0x032D8178 MOV X0, X21
	0x032D817C MOV W1, W20
	0x032D8180 BLR X8
	0x032D8184 STP X0, X1, [X31 + 0x90]
	0x032D8188 LDR X21, [X23 + 0x18]
	0x032D818C CBZ X21, 0x32D843C
	0x032D8190 LDR X8, [X21]
	0x032D8194 LDR X1, [X25]
	0x032D8198 LDRH W9, [X8 + 0x12E]
	0x032D819C CBZ X9, 0x32D81C0
	0x032D81A0 LDR X10, [X8 + 0xB0]
	0x032D81A4 ADD X10, X10, 0x8
	0x032D81A8 LDUR X11, [X10 - 0x8]
	0x032D81AC CMP X11, X1
	0x032D81B0 B.EQ 0x32D81D0
	0x032D81B4 SUBS X9, X9, 0x1
	0x032D81B8 ADD X10, X10, 0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1105000
	006 Move X21, 0xE4D000
	007 Move W8, [X20+2353]
	008 Move X21, [X21+3840]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xE4D000
	015 Move X0, [X0+3840]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2353], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move W8, 1
	025 Move [X20+88], W8
	026 Move V0, [X19+1]
	027 Move X0, X20
	028 Move [X20+1], V0
	029 Move V0, [X19+2]
	030 Move [X20+2], V0
	031 Move X8, [X19+96]
	032 Move [X20+96], X8
	033 Move X8, [X19+48]
	034 Move [X20+48], X8
	035 Move V0, [X19+56]
	036 Move [X20+56], D0
	037 Move X8, [X19+64]
	038 Move [X20+64], X8
	039 NotImplemented "Instruction LDUR not yet implemented."
	040 Move [X20+72], V0
	041 Move W8, [X19+88]
	042 Move [X20+88], W8
	043 Move W8, [X19+104]
	044 Move [X20+104], W8
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Return X0

Method: System.Void OnDeserialization(System.Object sender)

Disassembly:
	0x032D81BC B.NE 0x32D81A8
	0x032D81C0 MOV X0, X21

ISIL:
	001 Move X1, [X0+96]
	002 Call AssemblyName.set_Version, X0, X1
	003 Return 

Method: Mono.MonoAssemblyName* GetNativeName(System.IntPtr assembly_ptr)

Disassembly:
	0x032D81C4 MOV W2, W31

ISIL:
	001 Call 0x1C84E3C
	002 Return X0

Method: System.Void FillName(Mono.MonoAssemblyName* native, System.String codeBase, System.Boolean addVersion, System.Boolean addPublickey, System.Boolean defaultToken, System.Boolean assemblyRef)

Disassembly:
	0x032D6F88 MOV X0, X19
	0x032D6F8C MOV X1, X21
	0x032D6F90 MOV X3, X31
	0x032D6F94 BL 0x32A8F28
	0x032D6F98 LDR X2, [X20 + 0x18]
	0x032D6F9C LDR X1, [X24]
	0x032D6FA0 MOV X0, X19
	0x032D6FA4 MOV X3, X31
	0x032D6FA8 BL 0x32A8BF0
	0x032D6FAC LDR X2, [X20 + 0x60]
	0x032D6FB0 LDR X1, [X23]
	0x032D6FB4 MOV X0, X19
	0x032D6FB8 MOV X3, X31
	0x032D6FBC BL 0x32A8BF0
	0x032D6FC0 LDR W8, [X20 + 0x3C]
	0x032D6FC4 LDR X0, [X29]
	0x032D6FC8 ADD X1, X31, 0xC
	0x032D6FCC STR W8, [X31 + 0xC]
	0x032D6FD0 BL 0x1C16E04
	0x032D6FD4 LDR X1, [X22]
	0x032D6FD8 MOV X2, X0
	0x032D6FDC MOV X0, X19
	0x032D6FE0 MOV X3, X31
	0x032D6FE4 BL 0x32A8BF0
	0x032D6FE8 LDR X0, [X29]
	0x032D6FEC ADD X1, X31, 0x8
	0x032D6FF0 STR W31, [X31 + 0x8]
	0x032D6FF4 BL 0x1C16E04
	0x032D6FF8 LDR X1, [X28]
	0x032D6FFC MOV X2, X0
	0x032D7000 MOV X0, X19
	0x032D7004 MOV X3, X31
	0x032D7008 BL 0x32A8BF0
	0x032D700C LDR X2, [X20 + 0x40]
	0x032D7010 LDR X1, [X27]
	0x032D7014 MOV X0, X19
	0x032D7018 MOV X3, X31
	0x032D701C BL 0x32A8BF0
	0x032D7020 ADRP X9, 0xE4F000
	0x032D7024 LDR W8, [X20 + 0x58]
	0x032D7028 LDR X9, [X9 + 0x2D0]
	0x032D702C ADD X1, X31, 0x4
	0x032D7030 STR W8, [X31 + 0x4]
	0x032D7034 LDR X0, [X9]
	0x032D7038 BL 0x1C16E04
	0x032D703C ADRP X8, 0xE4F000
	0x032D7040 LDR X8, [X8 + 0x2F0]
	0x032D7044 MOV X2, X0
	0x032D7048 MOV X0, X19
	0x032D704C MOV X3, X31
	0x032D7050 LDR X1, [X8]
	0x032D7054 BL 0x32A8BF0
	0x032D7058 ADRP X9, 0xE4F000
	0x032D705C LDR W8, [X20 + 0x38]
	0x032D7060 LDR X9, [X9 + 0x2C0]
	0x032D7064 ADD X1, X31, 0x0
	0x032D7068 STR W8, [X31]
	0x032D706C LDR X0, [X9]
	0x032D7070 BL 0x1C16E04
	0x032D7074 ADRP X8, 0xE4F000
	0x032D7078 LDR X8, [X8 + 0x320]
	0x032D707C MOV X2, X0
	0x032D7080 MOV X0, X19
	0x032D7084 MOV X3, X31
	0x032D7088 LDR X1, [X8]
	0x032D708C BL 0x32A8BF0
	0x032D7090 ADRP X8, 0xE4F000
	0x032D7094 LDR X8, [X8 + 0x390]
	0x032D7098 MOV X0, X19
	0x032D709C MOV X2, X31
	0x032D70A0 MOV X3, X31
	0x032D70A4 LDR X1, [X8]
	0x032D70A8 BL 0x32A8BF0
	0x032D70AC LDP X20, X19, [X31 + 0x60]
	0x032D70B0 LDP X22, X21, [X31 + 0x50]
	0x032D70B4 LDP X24, X23, [X31 + 0x40]
	0x032D70B8 LDP X26, X25, [X31 + 0x30]
	0x032D70BC LDP X28, X27, [X31 + 0x20]
	0x032D70C0 LDP X29, X30, [X31 + 0x10]
	0x032D70C4 ADD X31, X31, 0x70
	0x032D70C8 RET
	0x032D70CC ADRP X0, 0xE21000
	0x032D70D0 LDR X0, [X0 + 0x528]
	0x032D70D4 BL 0x1C16D08
	0x032D70D8 BL 0x1C16F10
	0x032D70DC MOV X19, X0
	0x032D70E0 ADRP X0, 0xE46000
	0x032D70E4 LDR X0, [X0 + 0x2D8]
	0x032D70E8 BL 0x1C16D08
	0x032D70EC MOV X1, X0
	0x032D70F0 MOV X0, X19
	0x032D70F4 MOV X2, X31
	0x032D70F8 BL 0x330E100
	0x032D70FC ADRP X0, 0xE4F000
	0x032D7100 LDR X0, [X0 + 0x3A0]
	0x032D7104 BL 0x1C16D08
	0x032D7108 MOV X1, X0
	0x032D710C MOV X0, X19
	0x032D7110 BL 0x1C16DEC
	0x032D7114 STP X30, X21, [X31 - 0x20]!
	0x032D7118 STP X20, X19, [X31 + 0x10]
	0x032D711C ADRP X20, 0x1105000
	0x032D7120 ADRP X21, 0xE4D000
	0x032D7124 LDRB W8, [X20 + 0x931]
	0x032D7128 LDR X21, [X21 + 0xF00]
	0x032D712C MOV X19, X0
	0x032D7130 TBNZ X8, 0x0, 0x32D7148
	0x032D7134 ADRP X0, 0xE4D000
	0x032D7138 LDR X0, [X0 + 0xF00]
	0x032D713C BL 0x1C16CF4
	0x032D7140 MOVZ W8, 0x1
	0x032D7144 STRB W8, [X20 + 0x931]
	0x032D7148 LDR X0, [X21]
	0x032D714C BL 0x1C16F10
	0x032D7150 MOV X1, X31
	0x032D7154 MOV X20, X0
	0x032D7158 BL 0x33BDD8C
	0x032D715C MOVZ W8, 0x1
	0x032D7160 STR W8, [X20 + 0x58]
	0x032D7164 LDR V0, [X19 + 0x1]
	0x032D7168 MOV X0, X20
	0x032D716C STR V0, [X20 + 0x1]
	0x032D7170 LDR V0, [X19 + 0x2]
	0x032D7174 STR V0, [X20 + 0x2]
	0x032D7178 LDR X8, [X19 + 0x60]
	0x032D717C STR X8, [X20 + 0x60]
	0x032D7180 LDR X8, [X19 + 0x30]
	0x032D7184 STR X8, [X20 + 0x30]
	0x032D7188 LDR V0, [X19 + 0x38]
	0x032D718C STR D0, [X20 + 0x38]
	0x032D7190 LDR X8, [X19 + 0x40]
	0x032D7194 STR X8, [X20 + 0x40]
	0x032D7198 LDUR V0, [X19 + 0x48]
	0x032D719C STUR V0, [X20 + 0x48]
	0x032D71A0 LDR W8, [X19 + 0x58]
	0x032D71A4 STR W8, [X20 + 0x58]
	0x032D71A8 LDR W8, [X19 + 0x68]
	0x032D71AC STR W8, [X20 + 0x68]
	0x032D71B0 LDP X20, X19, [X31 + 0x10]
	0x032D71B4 LDP X30, X21, [X31], #0x20
	0x032D71B8 RET
	0x032D71BC LDR X1, [X0 + 0x60]
	0x032D71C0 B 0x32D6B7C
	0x032D71C4 B 0x1C83E3C
	0x032D71C8 STR X30, [X31 - 0x30]!
	0x032D71CC STP X22, X21, [X31 + 0x10]
	0x032D71D0 STP X20, X19, [X31 + 0x20]
	0x032D71D4 ADRP X19, 0x1105000
	0x032D71D8 ADRP X22, 0xE4D000
	0x032D71DC LDRB W8, [X19 + 0x933]
	0x032D71E0 LDR X22, [X22 + 0xF00]
	0x032D71E4 MOV W21, W1
	0x032D71E8 MOV X20, X0
	0x032D71EC TBNZ X8, 0x0, 0x32D7204
	0x032D71F0 ADRP X0, 0xE4D000
	0x032D71F4 LDR X0, [X0 + 0xF00]
	0x032D71F8 BL 0x1C16CF4
	0x032D71FC MOVZ W8, 0x1
	0x032D7200 STRB W8, [X19 + 0x933]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X26, 0x1107000
	014 Move W8, [X26+2354]
	015 Move W23, W6
	016 Move W21, W5
	017 Move W22, W4
	018 Move W25, W3
	019 Move X24, X2
	020 Move X20, X1
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {40}
	026 Move X0, 0xE1E000
	027 Move X0, [X0+1560]
	028 Call 0x1C17CF4
	029 Move X0, 0xE20000
	030 Move X0, [X0+3144]
	031 Call 0x1C17CF4
	032 Move X0, 0xE4D000
	033 Move X0, [X0+2640]
	034 Call 0x1C17CF4
	035 Move X0, 0xE26000
	036 Move X0, [X0+1984]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X26+2354], W8
	040 Compare X20, 0
	041 JumpIfEqual {193}
	042 Move X0, [X20]
	043 Move X1, X31
	044 Call RuntimeMarshal.PtrToUtf8String, X0
	045 Move [X19+16], X0
	046 NotImplemented "Instruction LDRH not yet implemented."
	047 Move [X19+32], W26
	048 NotImplemented "Instruction LDRH not yet implemented."
	049 Move [X19+36], W27
	050 NotImplemented "Instruction LDRH not yet implemented."
	051 Move [X19+40], W28
	052 NotImplemented "Instruction LDRH not yet implemented."
	053 Move [X19+44], W29
	054 Move W8, [X20+60]
	055 Move [X19+56], W8
	056 Move W8, [X20+52]
	057 Move [X19+60], W8
	058 Move W8, 1
	059 Move [X19+88], W8
	060 NotImplemented "Instruction LDRH not yet implemented."
	061 Move [X19+104], W8
	062 Move TEMP, X25
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {78}
	066 Move X8, 0xE25000
	067 Move X8, [X8+1984]
	068 Move X0, [X8]
	069 Call 0x1C17F10
	070 Move W1, W26
	071 Move W2, W27
	072 Move W3, W28
	073 Move W4, W29
	074 Move X5, X31
	075 Move X25, X0
	076 Call Version..ctor, X0, X1, X2, X3, X4
	077 Move [X19+96], X25
	078 Move [X19+24], X24
	079 Move X0, [X20+8]
	080 Move X1, X31
	081 Move X2, X31
	082 Call IntPtr.op_Inequality, X0, X1
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfNotEqual {104}
	087 Move X0, [X20+8]
	088 Move X1, X31
	089 Call RuntimeMarshal.PtrToUtf8String, X0
	090 Move X8, 0xE1F000
	091 Move X8, [X8+3144]
	092 Move X24, X0
	093 Move X8, [X8]
	094 Move W9, [X8+224]
	095 Compare W9, 0
	096 JumpIfNotEqual {99}
	097 Move X0, X8
	098 Call 0x1C17DFC
	099 And W1, W23, 1
	100 Move X0, X24
	101 Move X2, X31
	102 Call CultureInfo.CreateCulture, X0, X1
	103 Move [X19+48], X0
	104 Move X0, [X20+24]
	105 Move X1, X31
	106 Move X2, X31
	107 Call IntPtr.op_Inequality, X0, X1
	108 Move TEMP, X0
	109 And TEMP, TEMP, 1
	110 Compare TEMP, 1
	111 JumpIfNotEqual {115}
	112 Move X0, [X20+24]
	113 Move X1, X31
	114 Call RuntimeMarshal.DecodeBlobArray, X0
	115 Move TEMP, X22
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {133}
	119 Move X22, 0xE4C000
	120 Move X22, [X22+2640]
	121 Move X0, [X22]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {127}
	125 Call 0x1C17DFC
	126 Move X0, [X22]
	127 Move X8, [X0+184]
	128 Move X0, [X8]
	129 Move W8, [X19+56]
	130 Move [X19+72], X0
	131 Or W8, W8, 1
	132 Move [X19+56], W8
	133 Add X20, X20, 32
	134 Move W8, [X20]
	135 Compare W8, 0
	136 JumpIfEqual {165}
	137 Move X8, 0xE1D000
	138 Move X8, [X8+1560]
	139 Move W1, 8
	140 Move X0, [X8]
	141 Call 0x1C17D6C
	142 Move X21, X0
	143 Move X22, X31
	144 Move W0, [X20]
	145 Move X1, X31
	146 Call RuntimeMarshal.AsciHexDigitValue, X0
	147 Compare X21, 0
	148 JumpIfEqual {193}
	149 Move W8, [X21+24]
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move W23, W0
	152 ShiftRight W23, 28
	153 And W23, W23, 0x7FFFFFF
	154 Add X24, X21, X22
	155 Move [X24+32], W23
	156 Move W0, [X20+1]
	157 Move X1, X31
	158 Call RuntimeMarshal.AsciHexDigitValue, X0
	159 Add X22, X22, 1
	160 Or W8, W23, W0
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Add X20, X20, 2
	163 Move [X24+32], W8
	164 Move [X19+80], X21
	165 Move TEMP, X21
	166 And TEMP, TEMP, 1
	167 Compare TEMP, 1
	168 JumpIfNotEqual {180}
	169 Move X20, 0xE4C000
	170 Move X20, [X20+2640]
	171 Move X0, [X20]
	172 Move W8, [X0+224]
	173 Compare W8, 0
	174 JumpIfNotEqual {177}
	175 Call 0x1C17DFC
	176 Move X0, [X20]
	177 Move X8, [X0+184]
	178 Move X8, [X8]
	179 Move [X19+80], X8
	180 Move X20, [X31+80]
	181 Move X19, [X31+88]
	182 Move X22, [X31+64]
	183 Move X21, [X31+72]
	184 Move X24, [X31+48]
	185 Move X23, [X31+56]
	186 Move X26, [X31+32]
	187 Move X25, [X31+40]
	188 Move X28, [X31+16]
	189 Move X27, [X31+24]
	190 Move X29, [X31+96]
	191 Move X30, [X31+104]
	192 Return 
	193 Call 0x1C17F20
	194 Call 0x1C17F28

Method: System.Reflection.AssemblyName Create(System.Reflection.Assembly assembly, System.Boolean fillCodebase)

Disassembly:
	0x032D81C8 BL 0x1C5C788
	0x032D81CC B 0x32D81DC
	0x032D81D0 LDRSW X9, [X10]
	0x032D81D4 ADD X8, X8, X9, 0x4, LSL
	0x032D81D8 ADD X0, X8, 0x138
	0x032D81DC LDP X8, X2, [X0]
	0x032D81E0 MOV X0, X21
	0x032D81E4 MOV W1, W20
	0x032D81E8 BLR X8
	0x032D81EC LDR X8, [X26]
	0x032D81F0 STP X0, X1, [X31 + 0x30]
	0x032D81F4 ADD X1, X31, 0x30
	0x032D81F8 MOV X0, X8
	0x032D81FC BL 0x1C16E04
	0x032D8200 MOV X1, X0
	0x032D8204 ADD X0, X31, 0x90
	0x032D8208 MOV X2, X31
	0x032D820C BL 0x32D43B8
	0x032D8210 TBNZ X0, 0x0, 0x32D8440
	0x032D8214 LDR X21, [X19 + 0x18]
	0x032D8218 ADD W20, W20, 0x1
	0x032D821C CBNZ X21, 0x32D80C0
	0x032D8220 B 0x32D843C
	0x032D8224 LDR X21, [X19 + 0x20]
	0x032D8228 CBZ X21, 0x32D843C
	0x032D822C ADRP X25, 0xE4E000
	0x032D8230 ADRP X26, 0xE4E000
	0x032D8234 LDR X25, [X25 + 0x3F0]
	0x032D8238 LDR X26, [X26 + 0xF8]
	0x032D823C MOV W20, W31
	0x032D8240 LDR X8, [X21]
	0x032D8244 LDR X1, [X24]
	0x032D8248 LDRH W9, [X8 + 0x12E]
	0x032D824C CBZ X9, 0x32D8270
	0x032D8250 LDR X10, [X8 + 0xB0]
	0x032D8254 ADD X10, X10, 0x8
	0x032D8258 LDUR X11, [X10 - 0x8]
	0x032D825C CMP X11, X1
	0x032D8260 B.EQ 0x32D8280
	0x032D8264 SUBS X9, X9, 0x1
	0x032D8268 ADD X10, X10, 0x10
	0x032D826C B.NE 0x32D8258
	0x032D8270 MOV X0, X21
	0x032D8274 MOV W2, W31
	0x032D8278 BL 0x1C5C788
	0x032D827C B 0x32D828C
	0x032D8280 LDRSW X9, [X10]
	0x032D8284 ADD X8, X8, X9, 0x4, LSL
	0x032D8288 ADD X0, X8, 0x138
	0x032D828C LDP X8, X1, [X0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x1105000
	007 Move X22, 0xE4D000
	008 Move W8, [X19+2355]
	009 Move X22, [X22+3840]
	010 Move W21, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE4D000
	017 Move X0, [X0+3840]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+2355], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X19, X0
	025 Call Object..ctor, X0
	026 Move W8, 1
	027 Move [X19+88], W8
	028 Compare X20, 0
	029 JumpIfEqual {62}
	030 Move X8, [X20]
	031 Move X0, X20
	032 Move X9, [X8+456]
	033 Move X1, [X8+464]
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Call 0x1C84E3C
	036 Move X22, X0
	037 Move TEMP, X21
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {47}
	041 Move X8, [X20]
	042 Move X0, X20
	043 Move X9, [X8+424]
	044 Move X1, [X8+432]
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move X2, X0
	047 Move X2, X31
	048 Move W3, 1
	049 Move W4, 1
	050 Move W5, 1
	051 Move X0, X19
	052 Move X1, X22
	053 Move W6, W31
	054 Call AssemblyName.FillName, X0, X1, X2, X3, X4, X5, X6
	055 Move X0, X19
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X30, [X31+48]
	061 Return X0
	062 Call 0x1C17F20

