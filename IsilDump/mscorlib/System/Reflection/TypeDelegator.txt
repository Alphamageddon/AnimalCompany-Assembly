Type: System.Reflection.TypeDelegator

Method: System.Void .ctor(System.Type delegatingType)

Disassembly:
	0x032CED40 MOV X2, X31
	0x032CED44 B 0x33CB4A4
	0x032CED48 MOV X1, X31
	0x032CED4C B 0x33CB4E0
	0x032CED50 STR X30, [X31 - 0x10]!
	0x032CED54 LDR X8, [X0]
	0x032CED58 LDR X9, [X8 + 0x2F8]
	0x032CED5C LDR X1, [X8 + 0x300]
	0x032CED60 BLR X9
	0x032CED64 CBZ X0, 0x32CED74
	0x032CED68 LDR W0, [X0 + 0x18]
	0x032CED6C LDR X30, [X31], #0x10
	0x032CED70 RET
	0x032CED74 BL 0x1C16F20
	0x032CED78 MOV X1, X31
	0x032CED7C B 0x33BDD8C
	0x032CED80 STP X30, X19, [X31 - 0x10]!
	0x032CED84 ADRP X0, 0xE50000
	0x032CED88 LDR X0, [X0 + 0xC50]
	0x032CED8C BL 0x1C16D08
	0x032CED90 BL 0x1C16F10
	0x032CED94 MOV X1, X31
	0x032CED98 MOV X19, X0
	0x032CED9C BL 0x338E344
	0x032CEDA0 ADRP X0, 0xE57000
	0x032CEDA4 LDR X0, [X0 + 0xD88]
	0x032CEDA8 BL 0x1C16D08
	0x032CEDAC MOV X1, X0
	0x032CEDB0 MOV X0, X19
	0x032CEDB4 BL 0x1C16DEC
	0x032CEDB8 STR X30, [X31 - 0x20]!
	0x032CEDBC STP X20, X19, [X31 + 0x10]
	0x032CEDC0 ADRP X19, 0x110E000
	0x032CEDC4 ADRP X20, 0xE57000
	0x032CEDC8 LDRB W8, [X19 + 0x8F1]
	0x032CEDCC LDR X20, [X20 + 0xD90]
	0x032CEDD0 TBNZ X8, 0x0, 0x32CEDE8
	0x032CEDD4 ADRP X0, 0xE57000
	0x032CEDD8 LDR X0, [X0 + 0xD90]
	0x032CEDDC BL 0x1C16CF4
	0x032CEDE0 MOVZ W8, 0x1
	0x032CEDE4 STRB W8, [X19 + 0x8F1]
	0x032CEDE8 LDR X0, [X20]
	0x032CEDEC BL 0x1C16F10
	0x032CEDF0 MOV X1, X31
	0x032CEDF4 MOV X19, X0
	0x032CEDF8 BL 0x33BDD8C
	0x032CEDFC LDR X8, [X20]
	0x032CEE00 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x110F000
	007 Move X21, 0xE26000
	008 Move W8, [X22+2320]
	009 Move X21, [X21+1728]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE26000
	017 Move X0, [X0+1728]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2320], W8
	021 Move X0, X20
	022 Call TypeInfo..ctor, X0
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X1, X31
	030 Move X2, X31
	031 Call Type.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {43}
	036 Move [X20+24], X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Return 
	043 Move X0, 0xE2B000
	044 Move X0, [X0+1320]
	045 Call 0x1C17D08
	046 Call 0x1C17F10
	047 Move X19, X0
	048 Move X0, 0xE58000
	049 Move X0, [X0+3320]
	050 Call 0x1C17D08
	051 Move X1, X0
	052 Move X0, X19
	053 Move X2, X31
	054 Call ArgumentNullException..ctor, X0, X1
	055 Move X0, 0xE58000
	056 Move X0, [X0+3328]
	057 Call 0x1C17D08
	058 Move X1, X0
	059 Move X0, X19
	060 Call 0x1C17DEC

Method: System.Int32 get_MetadataToken()

Disassembly:
	0x032D3954 MOV X19, X0
	0x032D3958 TBNZ X8, 0x0, 0x32D3A54
	0x032D395C ADRP X0, 0xE47000
	0x032D3960 LDR X0, [X0 + 0xD70]
	0x032D3964 BL 0x1C16CF4
	0x032D3968 ADRP X0, 0xE22000
	0x032D396C LDR X0, [X0 + 0xC48]
	0x032D3970 BL 0x1C16CF4
	0x032D3974 ADRP X0, 0xE53000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+568]
	007 Move X1, [X8+576]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Object InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParameters)

Disassembly:
	0x032D3978 LDR X0, [X0 + 0xC8]
	0x032D397C BL 0x1C16CF4
	0x032D3980 ADRP X0, 0xE53000
	0x032D3984 LDR X0, [X0 + 0x108]
	0x032D3988 BL 0x1C16CF4
	0x032D398C ADRP X0, 0xE53000
	0x032D3990 LDR X0, [X0 + 0x110]
	0x032D3994 BL 0x1C16CF4
	0x032D3998 ADRP X0, 0xE20000
	0x032D399C LDR X0, [X0 + 0x758]
	0x032D39A0 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {13}
	005 Move X8, [X0]
	006 Move X9, [X31+16]
	007 Move X10, [X8+2096]
	008 Move X8, [X8+2088]
	009 Move [X31+16], X9
	010 Move [X31+24], X10
	011 Move X30, [X31+16]
	012 CallNoReturn X8
	013 Call 0x1C17F20

Method: System.Reflection.Module get_Module()

Disassembly:
	0x032D39A4 ADRP X0, 0xE2A000
	0x032D39A8 LDR X0, [X0 + 0x968]
	0x032D39AC BL 0x1C16CF4
	0x032D39B0 ADRP X0, 0xE48000
	0x032D39B4 LDR X0, [X0 + 0xB60]
	0x032D39B8 BL 0x1C16CF4
	0x032D39BC ADRP X0, 0xE53000
	0x032D39C0 LDR X0, [X0 + 0x118]
	0x032D39C4 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+776]
	007 Move X1, [X8+784]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Reflection.Assembly get_Assembly()

Disassembly:
	0x032D39C8 ADRP X0, 0xE20000
	0x032D39CC LDR X0, [X0 + 0x6C0]
	0x032D39D0 BL 0x1C16CF4
	0x032D39D4 ADRP X0, 0xE53000
	0x032D39D8 LDR X0, [X0 + 0x120]
	0x032D39DC BL 0x1C16CF4
	0x032D39E0 ADRP X0, 0xE53000
	0x032D39E4 LDR X0, [X0 + 0x128]
	0x032D39E8 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+760]
	007 Move X1, [X8+768]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.RuntimeTypeHandle get_TypeHandle()

Disassembly:
	0x032D39EC ADRP X0, 0xE24000
	0x032D39F0 LDR X0, [X0 + 0x110]
	0x032D39F4 BL 0x1C16CF4
	0x032D39F8 ADRP X0, 0xE53000
	0x032D39FC LDR X0, [X0 + 0x130]
	0x032D3A00 BL 0x1C16CF4
	0x032D3A04 ADRP X0, 0xE20000
	0x032D3A08 LDR X0, [X0 + 0x830]
	0x032D3A0C BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+2040]
	007 Move X1, [X8+2048]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.String get_Name()

Disassembly:
	0x032D3A10 ADRP X0, 0xE53000
	0x032D3A14 LDR X0, [X0 + 0x138]
	0x032D3A18 BL 0x1C16CF4
	0x032D3A1C ADRP X0, 0xE53000
	0x032D3A20 LDR X0, [X0 + 0x140]
	0x032D3A24 BL 0x1C16CF4
	0x032D3A28 ADRP X0, 0xE53000
	0x032D3A2C LDR X0, [X0 + 0x148]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+424]
	007 Move X1, [X8+432]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.String get_FullName()

Disassembly:
	0x032D3A30 BL 0x1C16CF4
	0x032D3A34 ADRP X0, 0xE53000
	0x032D3A38 LDR X0, [X0 + 0x150]
	0x032D3A3C BL 0x1C16CF4
	0x032D3A40 ADRP X0, 0xE53000
	0x032D3A44 LDR X0, [X0 + 0x158]
	0x032D3A48 BL 0x1C16CF4
	0x032D3A4C MOVZ W8, 0x1
	0x032D3A50 STRB W8, [X21 + 0x91F]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+744]
	007 Move X1, [X8+752]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.String get_Namespace()

Disassembly:
	0x032D3A54 LDR X0, [X27]
	0x032D3A58 STP X31, X31, [X31 + 0x10]
	0x032D3A5C LDR X21, [X19]
	0x032D3A60 LDR W8, [X0 + 0xE0]
	0x032D3A64 CBNZ W8, 0x32D3A6C
	0x032D3A68 BL 0x1C16DFC
	0x032D3A6C MOV X0, X21
	0x032D3A70 MOV X1, X31
	0x032D3A74 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+712]
	007 Move X1, [X8+720]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.String get_AssemblyQualifiedName()

Disassembly:
	0x032D3A78 BL 0x3395194
	0x032D3A7C TBZ X0, 0x0, 0x32D3AA8
	0x032D3A80 ADRP X8, 0xE53000
	0x032D3A84 LDR X8, [X8 + 0xC8]
	0x032D3A88 LDR V0, [X19]
	0x032D3A8C LDR X0, [X8]
	0x032D3A90 STR V0, [X31]
	0x032D3A94 ADD X1, X31, 0x0
	0x032D3A98 BL 0x1C16E04

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+728]
	007 Move X1, [X8+736]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Type get_BaseType()

Disassembly:
	0x032D3A9C MOV X1, X31
	0x032D3AA0 BL 0x33D5650
	0x032D3AA4 B 0x32D40C0
	0x032D3AA8 LDR X0, [X19]
	0x032D3AAC CBZ X0, 0x32D40E0
	0x032D3AB0 LDR X8, [X0]
	0x032D3AB4 LDR X1, [X8 + 0x590]
	0x032D3AB8 LDR X9, [X8 + 0x588]
	0x032D3ABC BLR X9

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+2072]
	007 Move X1, [X8+2080]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)

Disassembly:
	0x032D3AC0 TBZ X0, 0x0, 0x32D3B34
	0x032D3AC4 ADRP X8, 0xE22000
	0x032D3AC8 LDR X8, [X8 + 0xC48]
	0x032D3ACC LDR X0, [X8]
	0x032D3AD0 LDR W8, [X0 + 0xE0]
	0x032D3AD4 CBNZ W8, 0x32D3ADC
	0x032D3AD8 BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X6, X31
	006 Move X30, [X31+16]
	007 Call Type.GetConstructor, X0, X1, X2, X3, X4, X5
	008 Return X0
	009 Call 0x1C17F20

Method: System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr)

Disassembly:
	0x032D3ADC MOV X0, X31
	0x032D3AE0 BL 0x33387A0
	0x032D3AE4 ADRP X8, 0xE24000
	0x032D3AE8 ADRP X9, 0xE53000
	0x032D3AEC MOV X21, X0
	0x032D3AF0 LDR X0, [X19]
	0x032D3AF4 LDR X8, [X8 + 0x110]
	0x032D3AF8 LDR X9, [X9 + 0x120]
	0x032D3AFC ANDS W31, W20, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+1608]
	007 Move X2, [X8+1616]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Reflection.MethodInfo GetMethodImpl(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)

Disassembly:
	0x032D3B00 CSEL X8, X8, X9, NE
	0x032D3B04 CBZ X0, 0x32D40E4
	0x032D3B08 LDR X20, [X8]
	0x032D3B0C LDR X22, [X19 + 0x8]
	0x032D3B10 MOV X1, X31
	0x032D3B14 BL 0x33984D0
	0x032D3B18 MOV X3, X0
	0x032D3B1C MOV X0, X21
	0x032D3B20 MOV X1, X20
	0x032D3B24 MOV X2, X22
	0x032D3B28 MOV X4, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {15}
	005 Compare X5, 0
	006 JumpIfEqual {11}
	007 Move X7, X31
	008 Move X30, [X31+16]
	009 Call Type.GetMethod, X0, X1, X2, X3, X4, X5, X6
	010 Return X0
	011 Move X3, X31
	012 Move X30, [X31+16]
	013 Call Type.GetMethod, X0, X1, X2
	014 Return X0
	015 Call 0x1C17F20

Method: System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr)

Disassembly:
	0x032D3B2C BL 0x3227D58
	0x032D3B30 B 0x32D40C0
	0x032D3B34 LDR X8, [X19 + 0x8]
	0x032D3B38 CBZ X8, 0x32D3BB8
	0x032D3B3C ADRP X8, 0xE48000
	0x032D3B40 LDR X0, [X27]
	0x032D3B44 LDR X21, [X19]
	0x032D3B48 LDR X8, [X8 + 0xB60]
	0x032D3B4C LDR W9, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+1880]
	007 Move X2, [X8+1888]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Reflection.FieldInfo GetField(System.String name, System.Reflection.BindingFlags bindingAttr)

Disassembly:
	0x032D3B50 LDR X22, [X8]
	0x032D3B54 CBNZ W9, 0x32D3B5C
	0x032D3B58 BL 0x1C16DFC
	0x032D3B5C MOV X0, X22
	0x032D3B60 MOV X1, X31
	0x032D3B64 BL 0x338C698
	0x032D3B68 MOV X1, X0
	0x032D3B6C MOV X0, X21
	0x032D3B70 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X4, [X8+1656]
	007 Move X3, [X8+1664]
	008 Move X30, [X31+16]
	009 CallNoReturn X4
	010 Call 0x1C17F20

Method: System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr)

Disassembly:
	0x032D3B74 BL 0x3395194
	0x032D3B78 TBZ X0, 0x0, 0x32D3C20
	0x032D3B7C ADRP X8, 0xE22000
	0x032D3B80 LDR X8, [X8 + 0xC48]
	0x032D3B84 LDR X0, [X8]
	0x032D3B88 LDR W8, [X0 + 0xE0]
	0x032D3B8C CBNZ W8, 0x32D3B94
	0x032D3B90 BL 0x1C16DFC
	0x032D3B94 MOV X0, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+1672]
	007 Move X2, [X8+1680]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Type GetInterface(System.String name, System.Boolean ignoreCase)

Disassembly:
	0x032D3B98 BL 0x33387A0
	0x032D3B9C ADRP X8, 0xE53000
	0x032D3BA0 LDR X2, [X19 + 0x8]
	0x032D3BA4 LDR X8, [X8 + 0x130]
	0x032D3BA8 LDR X1, [X8]
	0x032D3BAC MOV X3, X31
	0x032D3BB0 BL 0x3227D04
	0x032D3BB4 B 0x32D40C0
	0x032D3BB8 ADRP X8, 0xE22000
	0x032D3BBC LDR X8, [X8 + 0xC48]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X0]
	006 And W2, W2, 1
	007 Move X4, [X8+2120]
	008 Move X3, [X8+2128]
	009 Move X30, [X31+16]
	010 CallNoReturn X4
	011 Call 0x1C17F20

Method: System.Type[] GetInterfaces()

Disassembly:
	0x032D3BC0 LDR X0, [X8]
	0x032D3BC4 LDR W8, [X0 + 0xE0]
	0x032D3BC8 CBNZ W8, 0x32D3BD0
	0x032D3BCC BL 0x1C16DFC
	0x032D3BD0 MOV X0, X31
	0x032D3BD4 BL 0x33387A0
	0x032D3BD8 ADRP X8, 0xE20000
	0x032D3BDC ADRP X9, 0xE53000
	0x032D3BE0 MOV X21, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+2136]
	007 Move X1, [X8+2144]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Reflection.EventInfo GetEvent(System.String name, System.Reflection.BindingFlags bindingAttr)

Disassembly:
	0x032D3BE4 LDR X0, [X19]
	0x032D3BE8 LDR X8, [X8 + 0x830]
	0x032D3BEC LDR X9, [X9 + 0x128]
	0x032D3BF0 ANDS W31, W20, 0x1
	0x032D3BF4 CSEL X8, X8, X9, NE
	0x032D3BF8 CBZ X0, 0x32D40E8
	0x032D3BFC LDR X20, [X8]
	0x032D3C00 MOV X1, X31
	0x032D3C04 BL 0x33985F8

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X4, [X8+1624]
	007 Move X3, [X8+1632]
	008 Move X30, [X31+16]
	009 CallNoReturn X4
	010 Call 0x1C17F20

Method: System.Reflection.PropertyInfo GetPropertyImpl(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)

Disassembly:
	0x032D3C08 MOV X2, X0
	0x032D3C0C MOV X0, X21
	0x032D3C10 MOV X1, X20
	0x032D3C14 MOV X3, X31
	0x032D3C18 BL 0x3227D04
	0x032D3C1C B 0x32D40C0
	0x032D3C20 ADRP X8, 0xE47000
	0x032D3C24 LDR X0, [X27]
	0x032D3C28 LDR X21, [X19]
	0x032D3C2C LDR X8, [X8 + 0xD70]
	0x032D3C30 LDR W9, [X0 + 0xE0]
	0x032D3C34 LDR X22, [X8]
	0x032D3C38 CBNZ W9, 0x32D3C40
	0x032D3C3C BL 0x1C16DFC
	0x032D3C40 MOV X0, X22
	0x032D3C44 MOV X1, X31
	0x032D3C48 BL 0x338C698
	0x032D3C4C MOV X1, X0
	0x032D3C50 MOV X0, X21
	0x032D3C54 MOV X2, X31
	0x032D3C58 BL 0x3395194
	0x032D3C5C TBZ X0, 0x0, 0x32D3C9C
	0x032D3C60 ADRP X8, 0xE22000
	0x032D3C64 LDR X8, [X8 + 0xC48]
	0x032D3C68 LDR X0, [X8]
	0x032D3C6C LDR W8, [X0 + 0xE0]
	0x032D3C70 CBNZ W8, 0x32D3C78
	0x032D3C74 BL 0x1C16DFC
	0x032D3C78 MOV X0, X31
	0x032D3C7C BL 0x33387A0
	0x032D3C80 ADRP X8, 0xE53000
	0x032D3C84 LDR X2, [X19 + 0x8]
	0x032D3C88 LDR X8, [X8 + 0x138]
	0x032D3C8C LDR X1, [X8]
	0x032D3C90 MOV X3, X31
	0x032D3C94 BL 0x3227D04
	0x032D3C98 B 0x32D40C0
	0x032D3C9C ADRP X8, 0xE53000
	0x032D3CA0 LDR X0, [X27]
	0x032D3CA4 LDR X21, [X19]
	0x032D3CA8 LDR X8, [X8 + 0x118]
	0x032D3CAC LDR W9, [X0 + 0xE0]
	0x032D3CB0 LDR X22, [X8]
	0x032D3CB4 CBNZ W9, 0x32D3CBC
	0x032D3CB8 BL 0x1C16DFC
	0x032D3CBC MOV X0, X22
	0x032D3CC0 MOV X1, X31
	0x032D3CC4 BL 0x338C698
	0x032D3CC8 MOV X1, X0
	0x032D3CCC MOV X0, X21
	0x032D3CD0 MOV X2, X31
	0x032D3CD4 BL 0x3395194
	0x032D3CD8 TBZ X0, 0x0, 0x32D3D5C
	0x032D3CDC ADRP X8, 0xE22000
	0x032D3CE0 LDR X8, [X8 + 0xC48]
	0x032D3CE4 LDR X0, [X8]
	0x032D3CE8 LDR W8, [X0 + 0xE0]
	0x032D3CEC CBNZ W8, 0x32D3CF4
	0x032D3CF0 BL 0x1C16DFC
	0x032D3CF4 MOV X0, X31
	0x032D3CF8 BL 0x33387A0

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X26, 0x110A000
	012 Move X27, 0xE21000
	013 Move W8, [X26+2321]
	014 Move X27, [X27+1728]
	015 Move X19, X6
	016 Move X20, X5
	017 Move X22, X4
	018 Move X23, X3
	019 Move W21, W2
	020 Move X24, X1
	021 Move X25, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0xE21000
	027 Move X0, [X0+1728]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X26+2321], W8
	031 Move X0, [X27]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X22
	037 Move X1, X31
	038 Move X2, X31
	039 Call Type.op_Equality, X0, X1
	040 Move X8, [X25+24]
	041 Compare X8, 0
	042 JumpIfEqual {86}
	043 NotImplemented "Instruction CMP not yet implemented."
	044 NotImplemented "Instruction CSET not yet implemented."
	045 NotImplemented "Instruction ORN not yet implemented."
	046 Move TEMP, X9
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfEqual {66}
	050 Move X1, X24
	051 Move W2, W21
	052 Move X20, [X31+64]
	053 Move X19, [X31+72]
	054 Move X22, [X31+48]
	055 Move X21, [X31+56]
	056 Move X24, [X31+32]
	057 Move X23, [X31+40]
	058 Move X26, [X31+16]
	059 Move X25, [X31+24]
	060 Move X0, X8
	061 Move X3, X31
	062 Move X30, [X31+80]
	063 Move X27, [X31+88]
	064 Call Type.GetProperty, X0, X1, X2
	065 Return X0
	066 Move X1, X24
	067 Move W2, W21
	068 Move X3, X23
	069 Move X4, X22
	070 Move X5, X20
	071 Move X6, X19
	072 Move X20, [X31+64]
	073 Move X19, [X31+72]
	074 Move X22, [X31+48]
	075 Move X21, [X31+56]
	076 Move X24, [X31+32]
	077 Move X23, [X31+40]
	078 Move X26, [X31+16]
	079 Move X25, [X31+24]
	080 Move X0, X8
	081 Move X7, X31
	082 Move X30, [X31+80]
	083 Move X27, [X31+88]
	084 Call Type.GetProperty, X0, X1, X2, X3, X4, X5, X6
	085 Return X0
	086 Call 0x1C17F20

Method: System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr)

Disassembly:
	0x032D3CFC MOV X20, X0
	0x032D3D00 LDR X0, [X19 + 0x8]
	0x032D3D04 CBZ X0, 0x32D40F4
	0x032D3D08 LDR X8, [X0]
	0x032D3D0C LDR X1, [X27]
	0x032D3D10 LDRB W10, [X8 + 0x130]
	0x032D3D14 LDRB W9, [X1 + 0x130]
	0x032D3D18 CMP W10, W9
	0x032D3D1C B.CC 0x32D40EC

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+2024]
	007 Move X2, [X8+2032]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Type GetNestedType(System.String name, System.Reflection.BindingFlags bindingAttr)

Disassembly:
	0x032D3D20 LDR X8, [X8 + 0xC8]
	0x032D3D24 ADD X8, X8, X9, 0x3, LSL
	0x032D3D28 LDUR X8, [X8 - 0x8]
	0x032D3D2C CMP X8, X1
	0x032D3D30 B.NE 0x32D40EC
	0x032D3D34 MOV X1, X31
	0x032D3D38 BL 0x33984D0
	0x032D3D3C ADRP X8, 0xE53000
	0x032D3D40 LDR X8, [X8 + 0x140]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X4, [X8+1896]
	007 Move X3, [X8+1904]
	008 Move X30, [X31+16]
	009 CallNoReturn X4
	010 Call 0x1C17F20

Method: System.Reflection.MemberInfo[] GetMember(System.String name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr)

Disassembly:
	0x032D3D44 MOV X2, X0
	0x032D3D48 LDR X1, [X8]
	0x032D3D4C MOV X0, X20
	0x032D3D50 MOV X3, X31
	0x032D3D54 BL 0x3227D04
	0x032D3D58 B 0x32D40C0
	0x032D3D5C LDR X0, [X19]
	0x032D3D60 CBZ X0, 0x32D40F0
	0x032D3D64 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X5, [X8+1720]
	007 Move X4, [X8+1728]
	008 Move X30, [X31+16]
	009 CallNoReturn X5
	010 Call 0x1C17F20

Method: System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr)

Disassembly:
	0x032D3D68 BL 0x3396BF8
	0x032D3D6C TBZ X0, 0x0, 0x32D3E00
	0x032D3D70 ADRP X8, 0xE53000
	0x032D3D74 LDR X0, [X19 + 0x8]
	0x032D3D78 LDR X8, [X8 + 0x110]
	0x032D3D7C LDR X1, [X8]
	0x032D3D80 BL 0x1C16E00
	0x032D3D84 MOV X20, X0
	0x032D3D88 LDR X0, [X19]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+1736]
	007 Move X2, [X8+1744]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Reflection.TypeAttributes GetAttributeFlagsImpl()

Disassembly:
	0x032D3D8C CBZ X0, 0x32D40F8
	0x032D3D90 LDR X8, [X0]
	0x032D3D94 LDR X1, [X8 + 0x430]
	0x032D3D98 LDR X9, [X8 + 0x428]
	0x032D3D9C BLR X9
	0x032D3DA0 ADRP X8, 0xE22000
	0x032D3DA4 LDR X8, [X8 + 0xC48]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Type.get_Attributes, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Boolean get_IsSZArray()

Disassembly:
	0x032D3DA8 MOV X21, X0
	0x032D3DAC LDR X0, [X8]
	0x032D3DB0 LDR W8, [X0 + 0xE0]
	0x032D3DB4 CBNZ W8, 0x32D3DBC
	0x032D3DB8 BL 0x1C16DFC
	0x032D3DBC MOV X0, X31
	0x032D3DC0 BL 0x33387A0
	0x032D3DC4 CBZ X21, 0x32D4100
	0x032D3DC8 LDR X8, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+1000]
	007 Move X1, [X8+1008]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Boolean IsArrayImpl()

Disassembly:
	0x032D3DCC MOV X22, X0
	0x032D3DD0 LDR X1, [X8 + 0x590]
	0x032D3DD4 LDR X9, [X8 + 0x588]
	0x032D3DD8 MOV X0, X21
	0x032D3DDC BLR X9
	0x032D3DE0 ADRP X8, 0xE53000
	0x032D3DE4 LDR X8, [X8 + 0x148]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Type.get_IsArray, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Boolean IsPrimitiveImpl()

Disassembly:
	0x032D3DE8 LDR X23, [X8]
	0x032D3DEC TBZ X0, 0x0, 0x32D3E70
	0x032D3DF0 MOV X0, X21
	0x032D3DF4 MOV X1, X31
	0x032D3DF8 BL 0x33984D0
	0x032D3DFC B 0x32D3E7C
	0x032D3E00 ADRP X8, 0xE22000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Type.get_IsPrimitive, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Boolean IsByRefImpl()

Disassembly:
	0x032D3E04 LDR X8, [X8 + 0xC48]
	0x032D3E08 LDR X0, [X8]
	0x032D3E0C LDR W8, [X0 + 0xE0]
	0x032D3E10 CBNZ W8, 0x32D3E18
	0x032D3E14 BL 0x1C16DFC
	0x032D3E18 MOV X0, X31
	0x032D3E1C BL 0x33387A0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Type.get_IsByRef, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Boolean get_IsGenericMethodParameter()

Disassembly:
	0x032D3E20 ADRP X8, 0xE24000
	0x032D3E24 ADRP X9, 0xE53000
	0x032D3E28 MOV X21, X0
	0x032D3E2C LDR X0, [X19]
	0x032D3E30 LDR X8, [X8 + 0x110]
	0x032D3E34 LDR X9, [X9 + 0x120]
	0x032D3E38 ANDS W31, W20, 0x1
	0x032D3E3C CSEL X8, X8, X9, NE
	0x032D3E40 CBZ X0, 0x32D40FC

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+952]
	007 Move X1, [X8+960]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Boolean IsPointerImpl()

Disassembly:
	0x032D3E44 LDR X20, [X8]
	0x032D3E48 LDR X22, [X19 + 0x8]
	0x032D3E4C MOV X1, X31
	0x032D3E50 BL 0x33985F8
	0x032D3E54 MOV X3, X0
	0x032D3E58 MOV X0, X21
	0x032D3E5C MOV X1, X20

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Type.get_IsPointer, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Boolean IsValueTypeImpl()

Disassembly:
	0x032D3E60 MOV X2, X22
	0x032D3E64 MOV X4, X31
	0x032D3E68 BL 0x3227D58
	0x032D3E6C B 0x32D40C0
	0x032D3E70 MOV X0, X21
	0x032D3E74 MOV X1, X31
	0x032D3E78 BL 0x33985F8

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Type.get_IsValueType, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Boolean IsCOMObjectImpl()

Disassembly:
	0x032D3E7C MOV X24, X0
	0x032D3E80 CBZ X20, 0x32D4104
	0x032D3E84 ADRP X10, 0xE53000
	0x032D3E88 LDR X8, [X20]
	0x032D3E8C LDR X10, [X10 + 0x108]
	0x032D3E90 LDRH W9, [X8 + 0x12E]
	0x032D3E94 LDR X1, [X10]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Type.get_IsCOMObject, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Boolean get_IsConstructedGenericType()

Disassembly:
	0x032D3E98 CBZ X9, 0x32D3EBC
	0x032D3E9C LDR X10, [X8 + 0xB0]
	0x032D3EA0 ADD X10, X10, 0x8
	0x032D3EA4 LDUR X11, [X10 - 0x8]
	0x032D3EA8 CMP X11, X1
	0x032D3EAC B.EQ 0x32D3ECC
	0x032D3EB0 SUBS X9, X9, 0x1
	0x032D3EB4 ADD X10, X10, 0x10
	0x032D3EB8 B.NE 0x32D3EA4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+920]
	007 Move X1, [X8+928]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Type GetElementType()

Disassembly:
	0x032D3EBC MOV X0, X20
	0x032D3EC0 MOV W2, W31
	0x032D3EC4 BL 0x1C5C788
	0x032D3EC8 B 0x32D3ED8
	0x032D3ECC LDRSW X9, [X10]
	0x032D3ED0 ADD X8, X8, X9, 0x4, LSL
	0x032D3ED4 ADD X0, X8, 0x138
	0x032D3ED8 LDP X8, X1, [X0]
	0x032D3EDC MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+1064]
	007 Move X1, [X8+1072]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Boolean HasElementTypeImpl()

Disassembly:
	0x032D3EE0 BLR X8
	0x032D3EE4 ADRP X8, 0xE20000
	0x032D3EE8 LDR X8, [X8 + 0x758]
	0x032D3EEC STR W0, [X31]
	0x032D3EF0 LDR X8, [X8]
	0x032D3EF4 ADD X1, X31, 0x0
	0x032D3EF8 MOV X0, X8

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Type.get_HasElementType, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Type get_UnderlyingSystemType()

Disassembly:
	0x032D3EFC BL 0x1C16E04
	0x032D3F00 MOV X3, X0
	0x032D3F04 MOV X0, X22
	0x032D3F08 MOV X1, X23
	0x032D3F0C MOV X2, X24
	0x032D3F10 MOV X4, X31
	0x032D3F14 BL 0x3227D58
	0x032D3F18 ADRP X28, 0xE53000
	0x032D3F1C ADRP X29, 0xE2A000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+808]
	007 Move X1, [X8+816]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Object[] GetCustomAttributes(System.Boolean inherit)

Disassembly:
	0x032D3F20 LDR X28, [X28 + 0x150]
	0x032D3F24 LDR X29, [X29 + 0x968]
	0x032D3F28 MOV X22, X0
	0x032D3F2C MOV W23, W31
	0x032D3F30 LDR X8, [X20]
	0x032D3F34 ADRP X10, 0xE53000
	0x032D3F38 LDRH W9, [X8 + 0x12E]
	0x032D3F3C LDR X10, [X10 + 0x108]
	0x032D3F40 LDR X1, [X10]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X0]
	006 And W1, W1, 1
	007 Move X3, [X8+504]
	008 Move X2, [X8+512]
	009 Move X30, [X31+16]
	010 CallNoReturn X3
	011 Call 0x1C17F20

Method: System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)

Disassembly:
	0x032D3F44 CBZ X9, 0x32D3F68
	0x032D3F48 LDR X10, [X8 + 0xB0]
	0x032D3F4C ADD X10, X10, 0x8
	0x032D3F50 LDUR X11, [X10 - 0x8]
	0x032D3F54 CMP X11, X1
	0x032D3F58 B.EQ 0x32D3F78
	0x032D3F5C SUBS X9, X9, 0x1
	0x032D3F60 ADD X10, X10, 0x10
	0x032D3F64 B.NE 0x32D3F50
	0x032D3F68 MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X0]
	006 And W2, W2, 1
	007 Move X4, [X8+520]
	008 Move X3, [X8+528]
	009 Move X30, [X31+16]
	010 CallNoReturn X4
	011 Call 0x1C17F20

Method: System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)

Disassembly:
	0x032D3F6C MOV W2, W31
	0x032D3F70 BL 0x1C5C788
	0x032D3F74 B 0x32D3F84
	0x032D3F78 LDRSW X9, [X10]
	0x032D3F7C ADD X8, X8, X9, 0x4, LSL
	0x032D3F80 ADD X0, X8, 0x138
	0x032D3F84 LDP X8, X1, [X0]
	0x032D3F88 MOV X0, X20
	0x032D3F8C BLR X8

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X0]
	006 And W2, W2, 1
	007 Move X4, [X8+488]
	008 Move X3, [X8+496]
	009 Move X30, [X31+16]
	010 CallNoReturn X4
	011 Call 0x1C17F20

