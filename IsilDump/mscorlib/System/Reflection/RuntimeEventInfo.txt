Type: System.Reflection.RuntimeEventInfo

Method: System.Void get_event_info(System.Reflection.RuntimeEventInfo ev, out System.Reflection.MonoEventInfo info)

Disassembly:
	0x032DA2C0 LDR X8, [X0]

ISIL:
	001 Call 0x1C85AF0
	002 Return 

Method: System.Reflection.MonoEventInfo GetEventInfo(System.Reflection.RuntimeEventInfo ev)

Disassembly:
	0x032DA2C4 LDR X9, [X8 + 0x288]
	0x032DA2C8 LDR X1, [X8 + 0x290]
	0x032DA2CC BLR X9
	0x032DA2D0 TBNZ X0, 0x0, 0x32DA2E0
	0x032DA2D4 LDP X30, X19, [X31], #0x10
	0x032DA2D8 RET
	0x032DA2DC BL 0x1C16F20
	0x032DA2E0 ADRP X0, 0xE19000
	0x032DA2E4 LDR X0, [X0 + 0x5B0]
	0x032DA2E8 BL 0x1C16D08
	0x032DA2EC BL 0x1C16F10
	0x032DA2F0 MOV X19, X0
	0x032DA2F4 ADRP X0, 0xE4C000
	0x032DA2F8 LDR X0, [X0 + 0x4D0]
	0x032DA2FC BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 Move [X31+72], X19
	004 NotImplemented "Instruction MOVI not yet implemented."
	005 Add X1, X31, 0
	006 Move X19, X8
	007 Move [X31+32], V0
	008 Move [X31+40], V0
	009 Move [X31], V0
	010 Move [X31+8], V0
	011 Call 0x1C85AF0
	012 Move V1, [X31+32]
	013 Move V0, [X31+48]
	014 Move V3, [X31]
	015 Move V2, [X31+16]
	016 Move [X19+32], V1
	017 Move [X19+40], V0
	018 Move [X19], V3
	019 Move [X19+8], V2
	020 Move X30, [X31+64]
	021 Move X19, [X31+72]
	022 Add X31, X31, 80
	023 Return X0

Method: System.Reflection.Module get_Module()

Disassembly:
	0x032DA300 MOV X1, X0

ISIL:
No ISIL was generated
Method: System.Reflection.BindingFlags get_BindingFlags()

Disassembly:
	0x032DA320 MOV X0, X19

ISIL:
No ISIL was generated
Method: System.RuntimeType GetDeclaringTypeInternal()

Disassembly:
	0x032DA4A8 LDRB W10, [X8 + 0x130]
	0x032DA4AC LDRB W9, [X1 + 0x130]
	0x032DA4B0 CMP W10, W9
	0x032DA4B4 B.CC 0x32DA50C
	0x032DA4B8 LDR X8, [X8 + 0xC8]
	0x032DA4BC ADD X8, X8, X9, 0x3, LSL
	0x032DA4C0 LDUR X8, [X8 - 0x8]
	0x032DA4C4 CMP X8, X1
	0x032DA4C8 B.NE 0x32DA50C
	0x032DA4CC MOV X1, X23
	0x032DA4D0 MOV X2, X24
	0x032DA4D4 MOV X3, X21
	0x032DA4D8 MOV W4, W22
	0x032DA4DC MOV X5, X31
	0x032DA4E0 BL 0x33BBDBC
	0x032DA4E4 MOV X2, X0
	0x032DA4E8 B 0x32DA4F0
	0x032DA4EC MOV X2, X31
	0x032DA4F0 MOV X0, X20
	0x032DA4F4 MOV X1, X19
	0x032DA4F8 LDP X20, X19, [X31 + 0x30]
	0x032DA4FC LDP X22, X21, [X31 + 0x20]
	0x032DA500 LDP X24, X23, [X31 + 0x10]
	0x032DA504 LDP X30, X25, [X31], #0x40
	0x032DA508 B 0x1C942F0
	0x032DA50C BL 0x1C171E0
	0x032DA510 BL 0x1C16F20
	0x032DA514 ADRP X0, 0xE4C000
	0x032DA518 LDR X0, [X0 + 0x4E0]
	0x032DA51C BL 0x1C16D08
	0x032DA520 BL 0x1C16F10
	0x032DA524 MOV X19, X0
	0x032DA528 ADRP X0, 0xE4C000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1103000
	005 Move W8, [X20+2377]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE43000
	012 Move X0, [X0+1256]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2377], W8
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X9, [X8+440]
	019 Move X1, [X8+448]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Compare X0, 0
	022 JumpIfEqual {34}
	023 Move X9, 0xE43000
	024 Move X9, [X9+1256]
	025 Move X8, [X0]
	026 Move X1, [X9]
	027 Move W10, [X8+304]
	028 Move W9, [X1+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X8+200]
	031 Add X8, X8, X9
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0
	038 Call 0x1C181E0

Method: System.RuntimeType get_ReflectedTypeInternal()

Disassembly:
	0x032DA52C LDR X0, [X0 + 0x4E8]
	0x032DA530 BL 0x1C16D08
	0x032DA534 MOV X1, X0
	0x032DA538 MOV X0, X19
	0x032DA53C MOV X2, X31
	0x032DA540 BL 0x3367410
	0x032DA544 B 0x32DA578
	0x032DA548 ADRP X0, 0xE4C000
	0x032DA54C LDR X0, [X0 + 0x490]
	0x032DA550 BL 0x1C16D08
	0x032DA554 BL 0x1C16F10
	0x032DA558 MOV X19, X0
	0x032DA55C ADRP X0, 0xE4C000
	0x032DA560 LDR X0, [X0 + 0x4B8]
	0x032DA564 BL 0x1C16D08
	0x032DA568 MOV X1, X0
	0x032DA56C MOV X0, X19
	0x032DA570 MOV X2, X31
	0x032DA574 BL 0x32D2788
	0x032DA578 ADRP X0, 0xE4C000
	0x032DA57C LDR X0, [X0 + 0x4F0]
	0x032DA580 BL 0x1C16D08
	0x032DA584 MOV X1, X0
	0x032DA588 MOV X0, X19
	0x032DA58C BL 0x1C16DEC
	0x032DA590 LDR X8, [X20]
	0x032DA594 MOV X0, X20
	0x032DA598 LDP X9, X1, [X8 + 0x1A8]
	0x032DA59C BLR X9
	0x032DA5A0 LDR X8, [X20]
	0x032DA5A4 MOV X21, X0
	0x032DA5A8 MOV X0, X20
	0x032DA5AC LDP X9, X1, [X8 + 0x1B8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1103000
	005 Move W8, [X20+2378]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xE43000
	012 Move X0, [X0+1256]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2378], W8
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X9, [X8+456]
	019 Move X1, [X8+464]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Compare X0, 0
	022 JumpIfEqual {34}
	023 Move X9, 0xE43000
	024 Move X9, [X9+1256]
	025 Move X8, [X0]
	026 Move X1, [X9]
	027 Move W10, [X8+304]
	028 Move W9, [X1+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X8, [X8+200]
	031 Add X8, X8, X9
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0
	038 Call 0x1C181E0

Method: System.Reflection.RuntimeModule GetRuntimeModule()

Disassembly:
	0x032DA304 MOV X0, X19
	0x032DA308 MOV X2, X31
	0x032DA30C BL 0x337DF1C
	0x032DA310 ADRP X0, 0xE4C000
	0x032DA314 LDR X0, [X0 + 0x4D8]
	0x032DA318 BL 0x1C16D08
	0x032DA31C MOV X1, X0

ISIL:
	001 Move [X31-16], X30
	002 Call RuntimeEventInfo.GetDeclaringTypeInternal, X0
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call RuntimeType.GetRuntimeModule, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x032DA5B0 BLR X9
	0x032DA5B4 MOV X20, X0
	0x032DA5B8 MOV X0, X19
	0x032DA5BC MOV X1, X31
	0x032DA5C0 BL 0x33BE520
	0x032DA5C4 MOV X19, X0
	0x032DA5C8 ADRP X0, 0xE4C000
	0x032DA5CC LDR X0, [X0 + 0x4C8]
	0x032DA5D0 BL 0x1C16D08
	0x032DA5D4 MOV X1, X21
	0x032DA5D8 MOV X2, X20
	0x032DA5DC MOV X3, X19
	0x032DA5E0 MOV X4, X31
	0x032DA5E4 BL 0x3227C18
	0x032DA5E8 MOV X19, X0
	0x032DA5EC ADRP X0, 0xE21000
	0x032DA5F0 LDR X0, [X0 + 0x578]
	0x032DA5F4 BL 0x1C16D08
	0x032DA5F8 BL 0x1C16F10
	0x032DA5FC MOV X20, X0
	0x032DA600 ADRP X0, 0xE24000
	0x032DA604 LDR X0, [X0 + 0x8A8]
	0x032DA608 BL 0x1C16D08
	0x032DA60C MOV X2, X0
	0x032DA610 MOV X0, X20
	0x032DA614 MOV X1, X19
	0x032DA618 MOV X3, X31
	0x032DA61C BL 0x330E16C
	0x032DA620 ADRP X0, 0xE4C000
	0x032DA624 LDR X0, [X0 + 0x4F0]
	0x032DA628 BL 0x1C16D08
	0x032DA62C MOV X1, X0
	0x032DA630 MOV X0, X20
	0x032DA634 BL 0x1C16DEC
	0x032DA638 B 0x1C94184
	0x032DA63C B 0x32D76D0
	0x032DA640 B 0x1C718C4
	0x032DA644 B 0x1C718C4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {28}
	007 Move X8, [X0]
	008 Move X19, X1
	009 Move X20, X0
	010 Move X9, [X8+424]
	011 Move X1, [X8+432]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move X21, X0
	014 Move X0, X20
	015 Call RuntimeEventInfo.get_ReflectedTypeInternal, X0
	016 Move X2, X0
	017 Move X0, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W4, 2
	021 Move X1, X21
	022 Move X3, X31
	023 Move X5, X31
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call MemberInfoSerializationHolder.GetSerializationInfo, X0, X1, X2, X3, X4
	027 Return 
	028 Move X0, 0xE1F000
	029 Move X0, [X0+1320]
	030 Call 0x1C17D08
	031 Call 0x1C17F10
	032 Move X19, X0
	033 Move X0, 0xE44000
	034 Move X0, [X0+728]
	035 Call 0x1C17D08
	036 Move X1, X0
	037 Move X0, X19
	038 Move X2, X31
	039 Call ArgumentNullException..ctor, X0, X1
	040 Move X0, 0xE4D000
	041 Move X0, [X0+1144]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Call 0x1C17DEC

Method: System.Reflection.BindingFlags GetBindingFlags()

Disassembly:
	0x032DA324 BL 0x1C16DEC
	0x032DA328 STP X30, X21, [X31 - 0x20]!
	0x032DA32C STP X20, X19, [X31 + 0x10]
	0x032DA330 ADRP X21, 0x1102000
	0x032DA334 ADRP X20, 0xE26000
	0x032DA338 LDRB W8, [X21 + 0x957]
	0x032DA33C LDR X20, [X20 + 0x168]
	0x032DA340 MOV X19, X0
	0x032DA344 TBNZ X8, 0x0, 0x32DA35C
	0x032DA348 ADRP X0, 0xE26000
	0x032DA34C LDR X0, [X0 + 0x168]
	0x032DA350 BL 0x1C16CF4
	0x032DA354 MOVZ W8, 0x1
	0x032DA358 STRB W8, [X21 + 0x957]
	0x032DA35C LDR X8, [X19]
	0x032DA360 MOV X0, X19
	0x032DA364 LDR X9, [X8 + 0x258]
	0x032DA368 LDR X1, [X8 + 0x260]
	0x032DA36C BLR X9
	0x032DA370 LDR X8, [X20]
	0x032DA374 LDR X2, [X19 + 0x20]
	0x032DA378 LDP X20, X19, [X31 + 0x10]
	0x032DA37C MOV X1, X0
	0x032DA380 MOV X0, X8
	0x032DA384 MOV X3, X31
	0x032DA388 LDP X30, X21, [X31], #0x20
	0x032DA38C B 0x3227BD4
	0x032DA390 B 0x1C942F0
	0x032DA394 STP X30, X25, [X31 - 0x40]!
	0x032DA398 STP X24, X23, [X31 + 0x10]
	0x032DA39C STP X22, X21, [X31 + 0x20]
	0x032DA3A0 STP X20, X19, [X31 + 0x30]
	0x032DA3A4 ADRP X25, 0x1102000
	0x032DA3A8 LDRB W8, [X25 + 0x958]
	0x032DA3AC MOV X21, X5
	0x032DA3B0 MOV X24, X4
	0x032DA3B4 MOV W22, W3
	0x032DA3B8 MOV X23, X2
	0x032DA3BC MOV X19, X1
	0x032DA3C0 MOV X20, X0
	0x032DA3C4 TBNZ X8, 0x0, 0x32DA3E8
	0x032DA3C8 ADRP X0, 0xE42000
	0x032DA3CC LDR X0, [X0 + 0x4E8]
	0x032DA3D0 BL 0x1C16CF4
	0x032DA3D4 ADRP X0, 0xE19000
	0x032DA3D8 LDR X0, [X0 + 0x6C0]
	0x032DA3DC BL 0x1C16CF4
	0x032DA3E0 MOVZ W8, 0x1
	0x032DA3E4 STRB W8, [X25 + 0x958]
	0x032DA3E8 MOV X0, X20
	0x032DA3EC MOV X1, X31
	0x032DA3F0 BL 0x32CCE50
	0x032DA3F4 TBNZ X0, 0x0, 0x32DA43C
	0x032DA3F8 CBZ X19, 0x32DA548
	0x032DA3FC LDR X8, [X20]
	0x032DA400 MOV X0, X20
	0x032DA404 LDP X9, X1, [X8 + 0x1B8]
	0x032DA408 BLR X9
	0x032DA40C MOV X25, X0
	0x032DA410 MOV X0, X19
	0x032DA414 MOV X1, X31
	0x032DA418 BL 0x33BE520
	0x032DA41C CBZ X25, 0x32DA510
	0x032DA420 LDR X8, [X25]
	0x032DA424 MOV X1, X0
	0x032DA428 MOV X0, X25
	0x032DA42C LDR X9, [X8 + 0x2A8]
	0x032DA430 LDR X2, [X8 + 0x2B0]
	0x032DA434 BLR X9
	0x032DA438 TBZ X0, 0x0, 0x32DA590
	0x032DA43C MOV X0, X20
	0x032DA440 MOV X1, X31
	0x032DA444 BL 0x32CCE10
	0x032DA448 TBNZ X0, 0x0, 0x32DA514
	0x032DA44C CBNZ X24, 0x32DA474
	0x032DA450 ADRP X8, 0xE19000
	0x032DA454 LDR X8, [X8 + 0x6C0]
	0x032DA458 LDR X0, [X8]
	0x032DA45C LDR W8, [X0 + 0xE0]
	0x032DA460 CBNZ W8, 0x32DA468
	0x032DA464 BL 0x1C16DFC
	0x032DA468 MOV X0, X31
	0x032DA46C BL 0x33981F8
	0x032DA470 MOV X24, X0
	0x032DA474 MOV X0, X20
	0x032DA478 BL 0x32DA2AC
	0x032DA47C CBZ X23, 0x32DA4EC
	0x032DA480 LDR X8, [X20]
	0x032DA484 MOV X0, X20
	0x032DA488 LDR X9, [X8 + 0x258]
	0x032DA48C LDR X1, [X8 + 0x260]
	0x032DA490 BLR X9
	0x032DA494 CBZ X0, 0x32DA510
	0x032DA498 ADRP X9, 0xE42000
	0x032DA49C LDR X9, [X9 + 0x4E8]
	0x032DA4A0 LDR X8, [X0]
	0x032DA4A4 LDR X1, [X9]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+72], X23
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move X20, 0x1103000
	009 Move W8, [X20+2379]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xE43000
	016 Move X0, [X0+1256]
	017 Call 0x1C17CF4
	018 Move X0, 0xE1A000
	019 Move X0, [X0+1728]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2379], W8
	023 NotImplemented "Instruction MOVI not yet implemented."
	024 Add X1, X31, 0
	025 Move X0, X19
	026 Move [X31+32], V0
	027 Move [X31+40], V0
	028 Move [X31], V0
	029 Move [X31+8], V0
	030 Call 0x1C85AF0
	031 Move X20, [X31+24]
	032 Move X21, [X31+32]
	033 Move X22, [X31+40]
	034 Move X1, X31
	035 Move X2, X31
	036 Move X0, X20
	037 Call MethodInfo.op_Equality, X0, X1
	038 And W31, W0, 1
	039 NotImplemented "Instruction CSEL not yet implemented."
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call MethodInfo.op_Equality, X0, X1
	044 And W31, W0, 1
	045 NotImplemented "Instruction CSEL not yet implemented."
	046 Move X0, X21
	047 Move X1, X31
	048 Move X2, X31
	049 Call MethodInfo.op_Inequality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {60}
	054 Compare X21, 0
	055 JumpIfEqual {118}
	056 Move X0, X21
	057 Move X1, X31
	058 Call MethodBase.get_IsPublic, X0
	059 And W20, W0, 1
	060 Move W20, W31
	061 Move X23, 0xE1A000
	062 Move X23, [X23+1728]
	063 Move X0, X19
	064 Call RuntimeEventInfo.GetDeclaringTypeInternal, X0
	065 Move X8, [X19]
	066 Move X22, X0
	067 Move X0, X19
	068 Move X9, [X8+456]
	069 Move X1, [X8+464]
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Move X8, [X23]
	072 Move X19, X0
	073 Move W9, [X8+224]
	074 Compare W9, 0
	075 JumpIfNotEqual {78}
	076 Move X0, X8
	077 Call 0x1C17DFC
	078 Move X0, X22
	079 Move X1, X19
	080 Move X2, X31
	081 Call Type.op_Inequality, X0, X1
	082 Move W19, W0
	083 Move X0, X21
	084 Move X1, X31
	085 Move X2, X31
	086 Call MethodInfo.op_Inequality, X0, X1
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {97}
	091 Compare X21, 0
	092 JumpIfEqual {118}
	093 Move X0, X21
	094 Move X1, X31
	095 Call MethodBase.get_IsStatic, X0
	096 Move W21, W0
	097 Move W21, W31
	098 Move X8, 0xE43000
	099 Move X8, [X8+1256]
	100 Move X0, [X8]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {105}
	104 Call 0x1C17DFC
	105 And W1, W19, 1
	106 And W2, W21, 1
	107 Move W0, W20
	108 Move X3, X31
	109 Call RuntimeType.FilterPreCalculate, X0, X1, X2
	110 Move X20, [X31+96]
	111 Move X19, [X31+104]
	112 Move X22, [X31+80]
	113 Move X21, [X31+88]
	114 Move X30, [X31+64]
	115 Move X23, [X31+72]
	116 Add X31, X31, 112
	117 Return X0
	118 Call 0x1C17F20

Method: System.Reflection.MethodInfo GetAddMethod(System.Boolean nonPublic)

Disassembly:
	0x032DA648 MOV X1, X31
	0x032DA64C B 0x32CCDE0
	0x032DA650 B 0x1C841C8
	0x032DA654 B 0x1C2B380
	0x032DA658 SUB X31, X31, 0x30
	0x032DA65C STP X30, X19, [X31 + 0x20]
	0x032DA660 MOVI V0.2D, 0x0
	0x032DA664 ADD X1, X31, 0x0
	0x032DA668 MOV X19, X8
	0x032DA66C STP V0, V0, [X31]
	0x032DA670 BL 0x1C841C8
	0x032DA674 LDP V1, V0, [X31]
	0x032DA678 STP V1, V0, [X19]
	0x032DA67C LDP X30, X19, [X31 + 0x20]
	0x032DA680 ADD X31, X31, 0x30
	0x032DA684 RET
	0x032DA688 SUB X31, X31, 0x30
	0x032DA68C STR X30, [X31 + 0x20]
	0x032DA690 MOVI V0.2D, 0x0
	0x032DA694 ADD X1, X31, 0x0
	0x032DA698 STP V0, V0, [X31]
	0x032DA69C BL 0x1C841C8
	0x032DA6A0 LDR X0, [X31]
	0x032DA6A4 LDR X30, [X31 + 0x20]
	0x032DA6A8 ADD X31, X31, 0x30
	0x032DA6AC RET
	0x032DA6B0 SUB X31, X31, 0x30
	0x032DA6B4 STR X30, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move W20, W1
	006 NotImplemented "Instruction MOVI not yet implemented."
	007 Add X1, X31, 0
	008 Move [X31+32], V0
	009 Move [X31+40], V0
	010 Move [X31], V0
	011 Move [X31+8], V0
	012 Call 0x1C85AF0
	013 Move X19, [X31+24]
	014 Move TEMP, X20
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {36}
	018 Move X0, X19
	019 Move X1, X31
	020 Move X2, X31
	021 Call MethodInfo.op_Inequality, X0, X1
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {35}
	026 Compare X19, 0
	027 JumpIfEqual {42}
	028 Move X0, X19
	029 Move X1, X31
	030 Call MethodBase.get_IsPublic, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Move X19, X31
	036 Move X0, X19
	037 Move X20, [X31+80]
	038 Move X19, [X31+88]
	039 Move X30, [X31+64]
	040 Add X31, X31, 96
	041 Return X0
	042 Call 0x1C17F20

Method: System.Reflection.MethodInfo GetRaiseMethod(System.Boolean nonPublic)

Disassembly:
	0x032DA6B8 MOVI V0.2D, 0x0
	0x032DA6BC ADD X1, X31, 0x0
	0x032DA6C0 STP V0, V0, [X31]
	0x032DA6C4 BL 0x1C841C8
	0x032DA6C8 LDR X0, [X31 + 0x8]
	0x032DA6CC LDR X30, [X31 + 0x20]
	0x032DA6D0 ADD X31, X31, 0x30
	0x032DA6D4 RET
	0x032DA6D8 B 0x1C2B380
	0x032DA6DC SUB X31, X31, 0x30
	0x032DA6E0 STR X30, [X31 + 0x20]
	0x032DA6E4 MOVI V0.2D, 0x0
	0x032DA6E8 ADD X1, X31, 0x0
	0x032DA6EC STP V0, V0, [X31]
	0x032DA6F0 BL 0x1C841C8
	0x032DA6F4 LDR W0, [X31 + 0x18]
	0x032DA6F8 LDR X30, [X31 + 0x20]
	0x032DA6FC ADD X31, X31, 0x30
	0x032DA700 RET
	0x032DA704 SUB X31, X31, 0x30
	0x032DA708 STR X30, [X31 + 0x20]
	0x032DA70C MOVI V0.2D, 0x0
	0x032DA710 ADD X1, X31, 0x0
	0x032DA714 STP V0, V0, [X31]
	0x032DA718 BL 0x1C841C8
	0x032DA71C LDR W0, [X31 + 0x14]
	0x032DA720 LDR X30, [X31 + 0x20]
	0x032DA724 ADD X31, X31, 0x30

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move W20, W1
	006 NotImplemented "Instruction MOVI not yet implemented."
	007 Add X1, X31, 0
	008 Move [X31+32], V0
	009 Move [X31+40], V0
	010 Move [X31], V0
	011 Move [X31+8], V0
	012 Call 0x1C85AF0
	013 Move X19, [X31+40]
	014 Move TEMP, X20
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {36}
	018 Move X0, X19
	019 Move X1, X31
	020 Move X2, X31
	021 Call MethodInfo.op_Inequality, X0, X1
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {35}
	026 Compare X19, 0
	027 JumpIfEqual {42}
	028 Move X0, X19
	029 Move X1, X31
	030 Call MethodBase.get_IsPublic, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Move X19, X31
	036 Move X0, X19
	037 Move X20, [X31+80]
	038 Move X19, [X31+88]
	039 Move X30, [X31+64]
	040 Add X31, X31, 96
	041 Return X0
	042 Call 0x1C17F20

Method: System.Reflection.MethodInfo GetRemoveMethod(System.Boolean nonPublic)

Disassembly:
	0x032DA728 RET
	0x032DA72C B 0x1C8422C
	0x032DA730 B 0x1C8422C
	0x032DA734 B 0x1C4C018
	0x032DA738 SUB X31, X31, 0x40
	0x032DA73C STR X30, [X31 + 0x20]
	0x032DA740 STP X20, X19, [X31 + 0x30]
	0x032DA744 CBZ X0, 0x32DA78C
	0x032DA748 MOV X19, X0
	0x032DA74C LDR X0, [X0 + 0x10]
	0x032DA750 MOVI V0.2D, 0x0
	0x032DA754 ADD X1, X31, 0x0
	0x032DA758 STP V0, V0, [X31]
	0x032DA75C BL 0x1C841C8
	0x032DA760 LDR X0, [X19 + 0x10]
	0x032DA764 LDR X20, [X31 + 0x8]
	0x032DA768 BL 0x1C4C018
	0x032DA76C MOV X2, X0
	0x032DA770 MOV X0, X20
	0x032DA774 MOV X1, X19
	0x032DA778 BL 0x32DA790
	0x032DA77C LDP X20, X19, [X31 + 0x30]
	0x032DA780 LDR X30, [X31 + 0x20]
	0x032DA784 ADD X31, X31, 0x40
	0x032DA788 RET
	0x032DA78C BL 0x1C16F20
	0x032DA790 STP X30, X23, [X31 - 0x30]!
	0x032DA794 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move W20, W1
	006 NotImplemented "Instruction MOVI not yet implemented."
	007 Add X1, X31, 0
	008 Move [X31+32], V0
	009 Move [X31+40], V0
	010 Move [X31], V0
	011 Move [X31+8], V0
	012 Call 0x1C85AF0
	013 Move X19, [X31+32]
	014 Move TEMP, X20
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {36}
	018 Move X0, X19
	019 Move X1, X31
	020 Move X2, X31
	021 Call MethodInfo.op_Inequality, X0, X1
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {35}
	026 Compare X19, 0
	027 JumpIfEqual {42}
	028 Move X0, X19
	029 Move X1, X31
	030 Call MethodBase.get_IsPublic, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Move X19, X31
	036 Move X0, X19
	037 Move X20, [X31+80]
	038 Move X19, [X31+88]
	039 Move X30, [X31+64]
	040 Add X31, X31, 96
	041 Return X0
	042 Call 0x1C17F20

Method: System.Type get_DeclaringType()

Disassembly:
	0x032DA798 STP X20, X19, [X31 + 0x20]
	0x032DA79C ADRP X22, 0x1102000
	0x032DA7A0 ADRP X23, 0xE4C000
	0x032DA7A4 LDRB W8, [X22 + 0x97F]
	0x032DA7A8 LDR X23, [X23 + 0x4F8]
	0x032DA7AC MOV X19, X2
	0x032DA7B0 MOV X20, X1
	0x032DA7B4 MOV X21, X0
	0x032DA7B8 TBNZ X8, 0x0, 0x32DA7D0
	0x032DA7BC ADRP X0, 0xE4C000
	0x032DA7C0 LDR X0, [X0 + 0x4F8]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 NotImplemented "Instruction MOVI not yet implemented."
	004 Add X1, X31, 0
	005 Move [X31+32], V0
	006 Move [X31+40], V0
	007 Move [X31], V0
	008 Move [X31+8], V0
	009 Call 0x1C85AF0
	010 Move X0, [X31]
	011 Move X30, [X31+64]
	012 Add X31, X31, 80
	013 Return X0

Method: System.Type get_ReflectedType()

Disassembly:
	0x032DA7C4 BL 0x1C16CF4
	0x032DA7C8 MOVZ W8, 0x1
	0x032DA7CC STRB W8, [X22 + 0x97F]
	0x032DA7D0 LDR X0, [X23]
	0x032DA7D4 BL 0x1C16F10
	0x032DA7D8 MOV X1, X31
	0x032DA7DC MOV X22, X0
	0x032DA7E0 BL 0x32CF410
	0x032DA7E4 MOVN W8, 0x0
	0x032DA7E8 MOVZ W9, 0x8
	0x032DA7EC STR X21, [X22 + 0x18]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 NotImplemented "Instruction MOVI not yet implemented."
	004 Add X1, X31, 0
	005 Move [X31+32], V0
	006 Move [X31+40], V0
	007 Move [X31], V0
	008 Move [X31+8], V0
	009 Call 0x1C85AF0
	010 Move X0, [X31+8]
	011 Move X30, [X31+64]
	012 Add X31, X31, 80
	013 Return X0

Method: System.String get_Name()

Disassembly:
	0x032DA7F0 STP X20, X31, [X22 + 0x28]
	0x032DA7F4 STR W8, [X22 + 0x38]
	0x032DA7F8 STR W9, [X22 + 0x10]
	0x032DA7FC STR X19, [X22 + 0x40]
	0x032DA800 MOV X0, X22
	0x032DA804 LDP X20, X19, [X31 + 0x20]
	0x032DA808 LDP X22, X21, [X31 + 0x10]
	0x032DA80C LDP X30, X23, [X31], #0x30
	0x032DA810 RET
	0x032DA814 MOV W0, W31
	0x032DA818 RET

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+64], X30
	003 NotImplemented "Instruction MOVI not yet implemented."
	004 Add X1, X31, 0
	005 Move [X31+32], V0
	006 Move [X31+40], V0
	007 Move [X31], V0
	008 Move [X31+8], V0
	009 Call 0x1C85AF0
	010 Move X0, [X31+16]
	011 Move X30, [X31+64]
	012 Add X31, X31, 80
	013 Return X0

Method: System.String ToString()

Disassembly:
	0x032DA81C B 0x32DA820
	0x032DA820 STR X30, [X31 - 0x20]!
	0x032DA824 STP X20, X19, [X31 + 0x10]
	0x032DA828 ADRP X20, 0x1102000
	0x032DA82C LDRB W8, [X20 + 0x95C]
	0x032DA830 MOV X19, X0
	0x032DA834 TBNZ X8, 0x0, 0x32DA84C
	0x032DA838 ADRP X0, 0xE42000
	0x032DA83C LDR X0, [X0 + 0x4E8]
	0x032DA840 BL 0x1C16CF4
	0x032DA844 MOVZ W8, 0x1
	0x032DA848 STRB W8, [X20 + 0x95C]
	0x032DA84C LDR X8, [X19]
	0x032DA850 MOV X0, X19
	0x032DA854 LDP X9, X1, [X8 + 0x1B8]
	0x032DA858 BLR X9
	0x032DA85C CBZ X0, 0x32DA8A8
	0x032DA860 ADRP X9, 0xE42000
	0x032DA864 LDR X9, [X9 + 0x4E8]
	0x032DA868 LDR X8, [X0]
	0x032DA86C LDR X1, [X9]
	0x032DA870 LDRB W10, [X8 + 0x130]
	0x032DA874 LDRB W9, [X1 + 0x130]
	0x032DA878 CMP W10, W9
	0x032DA87C B.CC 0x32DA8A4
	0x032DA880 LDR X8, [X8 + 0xC8]
	0x032DA884 ADD X8, X8, X9, 0x3, LSL
	0x032DA888 LDUR X8, [X8 - 0x8]
	0x032DA88C CMP X8, X1
	0x032DA890 B.NE 0x32DA8A4
	0x032DA894 LDP X20, X19, [X31 + 0x10]
	0x032DA898 MOV X1, X31
	0x032DA89C LDR X30, [X31], #0x20
	0x032DA8A0 B 0x33B83B4
	0x032DA8A4 BL 0x1C171E0
	0x032DA8A8 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1103000
	006 Move W8, [X20+2380]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xE1A000
	013 Move X0, [X0+3544]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2380], W8
	017 Move X8, [X19]
	018 Move X21, 0xE1A000
	019 Move X0, X19
	020 Move X9, [X8+632]
	021 Move X1, [X8+640]
	022 Move X21, [X21+3544]
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Compare X0, 0
	025 JumpIfEqual {31}
	026 Move X8, [X0]
	027 Move X9, [X8+360]
	028 Move X1, [X8+368]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move X20, X0
	031 Move X20, X31
	032 Move X8, [X19]
	033 Move X0, X19
	034 Move X9, [X8+424]
	035 Move X1, [X8+432]
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move X1, [X21]
	038 Move X2, X0
	039 Move X0, X20
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X3, X31
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call String.Concat, X0, X1, X2
	046 Return X0

Method: System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)

Disassembly:
	0x032DA8AC STR X30, [X31 - 0x20]!
	0x032DA8B0 STP X20, X19, [X31 + 0x10]
	0x032DA8B4 ADRP X20, 0x1102000
	0x032DA8B8 LDRB W8, [X20 + 0x959]
	0x032DA8BC MOV X19, X0
	0x032DA8C0 TBNZ X8, 0x0, 0x32DA8D8
	0x032DA8C4 ADRP X0, 0xE42000
	0x032DA8C8 LDR X0, [X0 + 0x4E8]
	0x032DA8CC BL 0x1C16CF4
	0x032DA8D0 MOVZ W8, 0x1
	0x032DA8D4 STRB W8, [X20 + 0x959]
	0x032DA8D8 LDR X8, [X19]
	0x032DA8DC MOV X0, X19
	0x032DA8E0 LDP X9, X1, [X8 + 0x1C8]
	0x032DA8E4 BLR X9
	0x032DA8E8 CBZ X0, 0x32DA920
	0x032DA8EC ADRP X9, 0xE42000
	0x032DA8F0 LDR X9, [X9 + 0x4E8]
	0x032DA8F4 LDR X8, [X0]
	0x032DA8F8 LDR X1, [X9]
	0x032DA8FC LDRB W10, [X8 + 0x130]
	0x032DA900 LDRB W9, [X1 + 0x130]
	0x032DA904 CMP W10, W9
	0x032DA908 B.CC 0x32DA92C
	0x032DA90C LDR X8, [X8 + 0xC8]
	0x032DA910 ADD X8, X8, X9, 0x3, LSL
	0x032DA914 LDUR X8, [X8 - 0x8]
	0x032DA918 CMP X8, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1103000
	008 Move X23, 0xE4D000
	009 Move W8, [X22+2381]
	010 Move X23, [X23+992]
	011 Move W21, W2
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xE4D000
	019 Move X0, [X0+992]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2381], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 And W2, W21, 1
	029 Move X0, X20
	030 Move X1, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X3, X31
	036 Move X30, [X31+48]
	037 Move X23, [X31+56]
	038 Call MonoCustomAttrs.IsDefined, X0, X1, X2
	039 Return X0

Method: System.Object[] GetCustomAttributes(System.Boolean inherit)

Disassembly:
	0x032DA91C B.NE 0x32DA92C
	0x032DA920 LDP X20, X19, [X31 + 0x10]
	0x032DA924 LDR X30, [X31], #0x20
	0x032DA928 RET
	0x032DA92C BL 0x1C171E0
	0x032DA930 STP X30, X23, [X31 - 0x30]!
	0x032DA934 STP X22, X21, [X31 + 0x10]
	0x032DA938 STP X20, X19, [X31 + 0x20]
	0x032DA93C ADRP X22, 0x1102000
	0x032DA940 ADRP X21, 0xE19000
	0x032DA944 LDRB W8, [X22 + 0x95A]
	0x032DA948 LDR X21, [X21 + 0x8F0]
	0x032DA94C MOV W19, W1
	0x032DA950 MOV X20, X0
	0x032DA954 TBNZ X8, 0x0, 0x32DA984
	0x032DA958 ADRP X0, 0xE19000
	0x032DA95C LDR X0, [X0 + 0x8F0]
	0x032DA960 BL 0x1C16CF4
	0x032DA964 ADRP X0, 0xE24000
	0x032DA968 LDR X0, [X0 + 0x310]
	0x032DA96C BL 0x1C16CF4
	0x032DA970 ADRP X0, 0xE1A000
	0x032DA974 LDR X0, [X0 + 0x608]
	0x032DA978 BL 0x1C16CF4
	0x032DA97C MOVZ W8, 0x1
	0x032DA980 STRB W8, [X22 + 0x95A]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1103000
	007 Move X22, 0xE4D000
	008 Move W8, [X21+2382]
	009 Move X22, [X22+992]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xE4D000
	017 Move X0, [X0+992]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2382], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 And W1, W20, 1
	027 Move X0, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call MonoCustomAttrs.GetCustomAttributes, X0, X1
	035 Return X0

Method: System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)

Disassembly:
	0x032DA984 LDR X8, [X20]
	0x032DA988 MOV X0, X20
	0x032DA98C LDP X9, X1, [X8 + 0x1A8]
	0x032DA990 BLR X9
	0x032DA994 LDR X8, [X21]
	0x032DA998 MOV X22, X0
	0x032DA99C MOV X0, X8
	0x032DA9A0 BL 0x1C16F10
	0x032DA9A4 MOV X1, X22
	0x032DA9A8 MOV X2, X31
	0x032DA9AC MOV X21, X0
	0x032DA9B0 BL 0x3231CF8
	0x032DA9B4 LDR X8, [X20]
	0x032DA9B8 MOV X0, X20
	0x032DA9BC LDR X9, [X8 + 0x2D8]
	0x032DA9C0 LDR X1, [X8 + 0x2E0]
	0x032DA9C4 BLR X9
	0x032DA9C8 TBZ X0, 0x0, 0x32DA9FC
	0x032DA9CC ANDS W31, W19, 0x1
	0x032DA9D0 MOVZ W8, 0x103
	0x032DA9D4 CSEL W1, W8, W31, NE
	0x032DA9D8 MOV X0, X20
	0x032DA9DC MOV X2, X31
	0x032DA9E0 BL 0x33CBD80
	0x032DA9E4 CBZ X21, 0x32DAA8C
	0x032DA9E8 MOV X1, X0
	0x032DA9EC MOV X0, X21
	0x032DA9F0 MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1103000
	008 Move X23, 0xE4D000
	009 Move W8, [X22+2383]
	010 Move X23, [X23+992]
	011 Move W21, W2
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xE4D000
	019 Move X0, [X0+992]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2383], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 And W2, W21, 1
	029 Move X0, X20
	030 Move X1, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X3, X31
	036 Move X30, [X31+48]
	037 Move X23, [X31+56]
	038 Call MonoCustomAttrs.GetCustomAttributes, X0, X1, X2
	039 Return X0

Method: System.Collections.Generic.IList`1<System.Reflection.CustomAttributeData> GetCustomAttributesData()

Disassembly:
	0x032DA9F4 BL 0x32333E0

ISIL:
	001 Call CustomAttributeData.GetCustomAttributes, X0
	002 Return X0

Method: System.Int32 get_MetadataToken()

Disassembly:
	0x032DA9F8 B 0x32DAA00

ISIL:
	001 Call 0x1C728C4
	002 Return X0

Method: System.Int32 get_metadata_token(System.Reflection.RuntimeEventInfo monoEvent)

Disassembly:
	0x032DA9FC CBZ X21, 0x32DAA8C

ISIL:
	001 Call 0x1C728C4
	002 Return X0

Method: System.Void .ctor()

Disassembly:
	0x032DAA00 ADRP X8, 0xE24000
	0x032DAA04 LDR X8, [X8 + 0x310]

ISIL:
	001 Move X1, X31
	002 Call EventInfo..ctor, X0
	003 Return 

