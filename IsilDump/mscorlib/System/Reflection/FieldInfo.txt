Type: System.Reflection.FieldInfo

Method: System.Void .ctor()

Disassembly:
	0x032CDDE0 MOV X0, X19
	0x032CDDE4 MOV X2, X31

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Reflection.MemberTypes get_MemberType()

Disassembly:
	0x032CDDE8 BL 0x330E100
	0x032CDDEC ADRP X0, 0xE58000

ISIL:
	001 Move W0, 4
	002 Return X0

Method: System.Reflection.FieldAttributes get_Attributes()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Type get_FieldType()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Boolean get_IsInitOnly()

Disassembly:
	0x032CDDF0 LDR X0, [X0 + 0xD00]
	0x032CDDF4 BL 0x1C16D08
	0x032CDDF8 MOV X1, X0
	0x032CDDFC MOV X0, X19
	0x032CDE00 BL 0x1C16DEC
	0x032CDE04 STP X30, X21, [X31 - 0x20]!
	0x032CDE08 STP X20, X19, [X31 + 0x10]
	0x032CDE0C ADRP X20, 0x110F000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Move X9, [X8+584]
	004 Move X1, [X8+592]
	005 NotImplemented "Instruction BLR not yet implemented."
	006 Move W0, W0
	007 ShiftRight W0, 5
	008 And W0, W0, 31
	009 Move X30, [X31+16]
	010 Return X0

Method: System.Boolean get_IsLiteral()

Disassembly:
	0x032CDE10 ADRP X21, 0xE58000
	0x032CDE14 LDRB W8, [X20 + 0x8E8]
	0x032CDE18 LDR X21, [X21 + 0xD08]
	0x032CDE1C MOV X19, X0
	0x032CDE20 TBNZ X8, 0x0, 0x32CDE38
	0x032CDE24 ADRP X0, 0xE58000
	0x032CDE28 LDR X0, [X0 + 0xD08]
	0x032CDE2C BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Move X9, [X8+584]
	004 Move X1, [X8+592]
	005 NotImplemented "Instruction BLR not yet implemented."
	006 Move W0, W0
	007 ShiftRight W0, 6
	008 And W0, W0, 63
	009 Move X30, [X31+16]
	010 Return X0

Method: System.Boolean get_IsNotSerialized()

Disassembly:
	0x032CDE30 MOVZ W8, 0x1
	0x032CDE34 STRB W8, [X20 + 0x8E8]
	0x032CDE38 LDR X1, [X21]
	0x032CDE3C MOV X0, X19
	0x032CDE40 MOV X2, X31
	0x032CDE44 MOV X3, X31
	0x032CDE48 BL 0x3315B64
	0x032CDE4C MOVZ W8, 0x1601

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Move X9, [X8+584]
	004 Move X1, [X8+592]
	005 NotImplemented "Instruction BLR not yet implemented."
	006 Move W0, W0
	007 ShiftRight W0, 7
	008 And W0, W0, 127
	009 Move X30, [X31+16]
	010 Return X0

Method: System.Boolean get_IsStatic()

Disassembly:
	0x032CDE50 MOVK W8, 0x80130000
	0x032CDE54 STR W8, [X19 + 0x60]
	0x032CDE58 LDP X20, X19, [X31 + 0x10]
	0x032CDE5C LDP X30, X21, [X31], #0x20
	0x032CDE60 RET
	0x032CDE64 STP X30, X19, [X31 - 0x10]!
	0x032CDE68 MOV X2, X31
	0x032CDE6C MOV X3, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Move X9, [X8+584]
	004 Move X1, [X8+592]
	005 NotImplemented "Instruction BLR not yet implemented."
	006 Move W0, W0
	007 ShiftRight W0, 4
	008 And W0, W0, 15
	009 Move X30, [X31+16]
	010 Return X0

Method: System.Boolean get_IsPublic()

Disassembly:
	0x032CDE70 MOV X19, X0
	0x032CDE74 BL 0x3315B64
	0x032CDE78 MOVZ W8, 0x1601
	0x032CDE7C MOVK W8, 0x80130000
	0x032CDE80 STR W8, [X19 + 0x60]
	0x032CDE84 LDP X30, X19, [X31], #0x10
	0x032CDE88 RET
	0x032CDE8C STP X30, X19, [X31 - 0x10]!
	0x032CDE90 MOV X3, X31
	0x032CDE94 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Move X9, [X8+584]
	004 Move X1, [X8+592]
	005 NotImplemented "Instruction BLR not yet implemented."
	006 And W8, W0, 7
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Move X30, [X31+16]
	010 Return X0

Method: System.RuntimeFieldHandle get_FieldHandle()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x032CDE98 BL 0x3315B64
	0x032CDE9C MOVZ W8, 0x1601

ISIL:
	001 Move X2, X31
	002 Call Object.Equals, X0, X1
	003 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x032CDEA0 MOVK W8, 0x80130000
	0x032CDEA4 STR W8, [X19 + 0x60]

ISIL:
	001 Move X1, X31
	002 Call Object.GetHashCode, X0
	003 Return X0

Method: System.Boolean op_Equality(System.Reflection.FieldInfo left, System.Reflection.FieldInfo right)

Disassembly:
	0x032CDEA8 LDP X30, X19, [X31], #0x10
	0x032CDEAC RET
	0x032CDEB0 MOV X4, X31
	0x032CDEB4 B 0x3315BE4
	0x032CDEB8 STR X30, [X31 - 0x30]!
	0x032CDEBC STP X22, X21, [X31 + 0x10]
	0x032CDEC0 STP X20, X19, [X31 + 0x20]
	0x032CDEC4 LDR X8, [X2 + 0x8]
	0x032CDEC8 STP X1, X2, [X0 + 0x20]
	0x032CDECC MOV X19, X0
	0x032CDED0 MOV X20, X2

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W8, W31
	003 Compare X0, 0
	004 JumpIfEqual {12}
	005 Compare X1, 0
	006 JumpIfEqual {12}
	007 Move X8, [X0]
	008 Move X3, [X8+312]
	009 Move X2, [X8+320]
	010 CallNoReturn X3
	011 Move W8, 1
	012 Move W0, W8
	013 Return X0

Method: System.Boolean op_Inequality(System.Reflection.FieldInfo left, System.Reflection.FieldInfo right)

Disassembly:
	0x032CDED4 STR X8, [X0 + 0x10]
	0x032CDED8 LDRB W22, [X2 + 0x52]
	0x032CDEDC STR X0, [X0 + 0x40]
	0x032CDEE0 MOV X0, X2
	0x032CDEE4 MOV X21, X1
	0x032CDEE8 BL 0x1C16D84
	0x032CDEEC TBZ X0, 0x0, 0x32CDF04
	0x032CDEF0 CMP W22, 0x2
	0x032CDEF4 B.NE 0x32CDF40
	0x032CDEF8 ADRP X8, 0xFFFFFFFFFE8E9000
	0x032CDEFC ADD X8, X8, 0x744
	0x032CDF00 B 0x32CDF84
	0x032CDF04 CMP W22, 0x1
	0x032CDF08 B.NE 0x32CDF3C
	0x032CDF0C LDRB W8, [X19 + 0x70]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W8, 1
	003 Compare X0, 0
	004 JumpIfEqual {15}
	005 Compare X1, 0
	006 JumpIfEqual {15}
	007 Move [X31-16], X30
	008 Move X8, [X0]
	009 Move X9, [X8+312]
	010 Move X2, [X8+320]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Xor W8, W0, 1
	013 Move X30, [X31+16]
	014 Move W8, W31
	015 And W0, W8, 1
	016 Return X0

Method: System.Object GetValue(System.Object obj)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void SetValue(System.Object obj, System.Object value)

Disassembly:
	0x032CDF10 CBZ W8, 0x32CDF54
	0x032CDF14 MOV X0, X20
	0x032CDF18 BL 0x1C16D7C
	0x032CDF1C MOV W21, W0
	0x032CDF20 MOV X0, X20
	0x032CDF24 BL 0x1C17238
	0x032CDF28 TBZ X21, 0x0, 0x32CDF60
	0x032CDF2C TBZ X0, 0x0, 0x32CDF70
	0x032CDF30 ADRP X8, 0xFFFFFFFFFE8E9000
	0x032CDF34 ADD X8, X8, 0x860
	0x032CDF38 B 0x32CDF84
	0x032CDF3C CBZ X21, 0x32CDFA4
	0x032CDF40 LDR X8, [X19 + 0x10]
	0x032CDF44 LDR X9, [X19 + 0x20]
	0x032CDF48 STR X8, [X19 + 0x18]
	0x032CDF4C STR X9, [X19 + 0x40]
	0x032CDF50 B 0x32CDF88
	0x032CDF54 ADRP X8, 0xFFFFFFFFFE8E9000
	0x032CDF58 ADD X8, X8, 0x720
	0x032CDF5C B 0x32CDF84
	0x032CDF60 TBZ X0, 0x0, 0x32CDF7C
	0x032CDF64 ADRP X8, 0xFFFFFFFFFE8E9000
	0x032CDF68 ADD X8, X8, 0x788
	0x032CDF6C B 0x32CDF84
	0x032CDF70 ADRP X8, 0xFFFFFFFFFE8E9000
	0x032CDF74 ADD X8, X8, 0x814
	0x032CDF78 B 0x32CDF84
	0x032CDF7C ADRP X8, 0xFFFFFFFFFE8E9000
	0x032CDF80 ADD X8, X8, 0x758
	0x032CDF84 STR X8, [X19 + 0x18]
	0x032CDF88 ADRP X8, 0xFFFFFFFFFE8E9000
	0x032CDF8C ADD X8, X8, 0x6BC
	0x032CDF90 STR X8, [X19 + 0x38]
	0x032CDF94 LDP X20, X19, [X31 + 0x20]
	0x032CDF98 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x1110000
	008 Move X23, 0xE27000
	009 Move W8, [X22+2276]
	010 Move X23, [X23+1728]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xE27000
	019 Move X0, [X0+1728]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2276], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X31
	029 Call Type.get_DefaultBinder
	030 Move X8, [X21]
	031 Move X4, X0
	032 Move X0, X21
	033 Move X1, X20
	034 Move X7, [X8+744]
	035 Move X6, [X8+752]
	036 Move X2, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move W3, W31
	042 Move X5, X31
	043 Move X30, [X31+48]
	044 Move X23, [X31+56]
	045 CallNoReturn X7

Method: System.Void SetValue(System.Object obj, System.Object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void SetValueDirect(System.TypedReference obj, System.Object value)

Disassembly:
	0x032CDF9C LDR X30, [X31], #0x30
	0x032CDFA0 RET
	0x032CDFA4 ADRP X1, 0xFFFFFFFFFD84E000
	0x032CDFA8 ADD X1, X1, 0xEE3
	0x032CDFAC MOV X0, X31
	0x032CDFB0 BL 0x1C16F3C
	0x032CDFB4 MOV X1, X31
	0x032CDFB8 BL 0x1C16DEC
	0x032CDFBC LDR X8, [X0 + 0x40]
	0x032CDFC0 LDR X4, [X0 + 0x18]
	0x032CDFC4 LDR X3, [X0 + 0x28]
	0x032CDFC8 MOV X0, X8
	0x032CDFCC BR X4
	0x032CDFD0 STP X30, X21, [X31 - 0x20]!
	0x032CDFD4 STP X20, X19, [X31 + 0x10]
	0x032CDFD8 ADRP X20, 0x110F000
	0x032CDFDC ADRP X21, 0xE26000
	0x032CDFE0 LDRB W8, [X20 + 0x8E9]
	0x032CDFE4 LDR X21, [X21 + 0x6C0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xE27000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE59000
	009 Move X0, [X0+3112]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xE59000
	016 Move X0, [X0+3120]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Object GetRawConstantValue()

Disassembly:
	0x032CDFE8 MOV X19, X0
	0x032CDFEC TBNZ X8, 0x0, 0x32CE004
	0x032CDFF0 ADRP X0, 0xE26000
	0x032CDFF4 LDR X0, [X0 + 0x6C0]
	0x032CDFF8 BL 0x1C16CF4
	0x032CDFFC MOVZ W8, 0x1
	0x032CE000 STRB W8, [X20 + 0x8E9]
	0x032CE004 LDR X0, [X21]
	0x032CE008 CBZ X19, 0x32CE03C
	0x032CE00C LDR X8, [X19]
	0x032CE010 LDRB W9, [X0 + 0x130]
	0x032CE014 LDRB W10, [X8 + 0x130]
	0x032CE018 CMP W10, W9
	0x032CE01C B.CS 0x32CE028
	0x032CE020 MOV X19, X31
	0x032CE024 B 0x32CE03C
	0x032CE028 LDR X8, [X8 + 0xC8]
	0x032CE02C ADD X8, X8, X9, 0x3, LSL
	0x032CE030 LDUR X8, [X8 - 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xE27000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE58000
	009 Move X0, [X0+3112]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotSupportedException..ctor, X0, X1
	015 Move X0, 0xE58000
	016 Move X0, [X0+3128]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Reflection.FieldInfo internal_from_handle_type(System.IntPtr field_handle, System.IntPtr type_handle)

Disassembly:
	0x032CE034 CMP X8, X0

ISIL:
	001 Call 0x1C85174
	002 Return X0

Method: System.Reflection.FieldInfo GetFieldFromHandle(System.RuntimeFieldHandle handle)

Disassembly:
	0x032CE038 CSEL X19, X19, X31, EQ
	0x032CE03C LDR W8, [X0 + 0xE0]
	0x032CE040 CBNZ W8, 0x32CE048
	0x032CE044 BL 0x1C16DFC
	0x032CE048 MOV X0, X19
	0x032CE04C MOV X1, X31
	0x032CE050 MOV X2, X31
	0x032CE054 BL 0x3395F0C
	0x032CE058 TBZ X0, 0x0, 0x32CE07C
	0x032CE05C CBZ X19, 0x32CE0A0
	0x032CE060 LDR X8, [X19]
	0x032CE064 MOV X0, X19
	0x032CE068 LDP X20, X19, [X31 + 0x10]
	0x032CE06C LDR X2, [X8 + 0x308]
	0x032CE070 LDR X1, [X8 + 0x310]
	0x032CE074 LDP X30, X21, [X31], #0x20
	0x032CE078 BR X2
	0x032CE07C MOV X0, X31
	0x032CE080 BL 0x3396C4C
	0x032CE084 MOV X19, X0
	0x032CE088 ADRP X0, 0xE57000
	0x032CE08C LDR X0, [X0 + 0xD10]
	0x032CE090 BL 0x1C16D08
	0x032CE094 MOV X1, X0
	0x032CE098 MOV X0, X19
	0x032CE09C BL 0x1C16DEC
	0x032CE0A0 BL 0x1C16F20
	0x032CE0A4 LDR X8, [X0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X2, X31
	005 Move X19, X0
	006 Call IntPtr.op_Equality, X0, X1
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {17}
	011 Move X0, X19
	012 Move X1, X31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call 0x1C85174
	016 Return X0
	017 Move X0, 0xE2E000
	018 Move X0, [X0+1400]
	019 Call 0x1C17D08
	020 Call 0x1C17F10
	021 Move X19, X0
	022 Move X0, 0xE58000
	023 Move X0, [X0+3088]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Move X2, X31
	028 Call ArgumentException..ctor, X0, X1
	029 Move X0, 0xE58000
	030 Move X0, [X0+3136]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X19
	034 Call 0x1C17DEC

Method: System.Reflection.FieldInfo GetFieldFromHandle(System.RuntimeFieldHandle handle, System.RuntimeTypeHandle declaringType)

Disassembly:
	0x032CE0A8 LDR X2, [X8 + 0x228]
	0x032CE0AC LDR X1, [X8 + 0x230]
	0x032CE0B0 BR X2
	0x032CE0B4 STP X30, X19, [X31 - 0x10]!
	0x032CE0B8 MOV X0, X31
	0x032CE0BC BL 0x3396C4C
	0x032CE0C0 MOV X19, X0
	0x032CE0C4 ADRP X0, 0xE57000
	0x032CE0C8 LDR X0, [X0 + 0xD18]
	0x032CE0CC BL 0x1C16D08
	0x032CE0D0 MOV X1, X0
	0x032CE0D4 MOV X0, X19
	0x032CE0D8 BL 0x1C16DEC
	0x032CE0DC STP X30, X19, [X31 - 0x10]!
	0x032CE0E0 ADRP X0, 0xE25000
	0x032CE0E4 LDR X0, [X0 + 0x5B0]
	0x032CE0E8 BL 0x1C16D08
	0x032CE0EC BL 0x1C16F10
	0x032CE0F0 MOV X1, X31
	0x032CE0F4 MOV X19, X0
	0x032CE0F8 BL 0x337DEC0
	0x032CE0FC ADRP X0, 0xE57000
	0x032CE100 LDR X0, [X0 + 0xD20]
	0x032CE104 BL 0x1C16D08
	0x032CE108 MOV X1, X0
	0x032CE10C MOV X0, X19
	0x032CE110 BL 0x1C16DEC
	0x032CE114 STR X30, [X31 - 0x10]!
	0x032CE118 BL 0x32CE12C
	0x032CE11C ORN W8, W31, W0, 0x0
	0x032CE120 AND W0, W8, 0x1
	0x032CE124 LDR X30, [X31], #0x10
	0x032CE128 RET
	0x032CE12C STP X30, X21, [X31 - 0x20]!
	0x032CE130 STP X20, X19, [X31 + 0x10]
	0x032CE134 ADRP X21, 0x110E000
	0x032CE138 LDRB W8, [X21 + 0x8EC]
	0x032CE13C MOV X19, X1
	0x032CE140 MOV X20, X0
	0x032CE144 TBNZ X8, 0x0, 0x32CE168
	0x032CE148 ADRP X0, 0xE4F000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X2, X31
	007 Move X20, X0
	008 Call IntPtr.op_Equality, X0, X1
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {22}
	013 Move X0, X20
	014 Move X1, X19
	015 Call 0x1C85174
	016 Compare X0, 0
	017 JumpIfEqual {29}
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0
	022 Move X0, 0xE2E000
	023 Move X0, [X0+1400]
	024 Call 0x1C17D08
	025 Call 0x1C17F10
	026 Move X19, X0
	027 Move X0, 0xE58000
	028 Move X0, [X0+3088]
	029 Move X0, 0xE2E000
	030 Move X0, [X0+1400]
	031 Call 0x1C17D08
	032 Call 0x1C17F10
	033 Move X19, X0
	034 Move X0, 0xE58000
	035 Move X0, [X0+3144]
	036 Call 0x1C17D08
	037 Move X1, X0
	038 Move X0, X19
	039 Move X2, X31
	040 Call ArgumentException..ctor, X0, X1
	041 Move X0, 0xE58000
	042 Move X0, [X0+3152]
	043 Call 0x1C17D08
	044 Move X1, X0
	045 Move X0, X19
	046 Call 0x1C17DEC

Method: System.Int32 GetFieldOffset()

Disassembly:
	0x032CE14C LDR X0, [X0 + 0x978]
	0x032CE150 BL 0x1C16CF4
	0x032CE154 ADRP X0, 0xE56000
	0x032CE158 LDR X0, [X0 + 0x278]
	0x032CE15C BL 0x1C16CF4
	0x032CE160 MOVZ W8, 0x1
	0x032CE164 STRB W8, [X21 + 0x8EC]
	0x032CE168 CMP X20, X19
	0x032CE16C B.EQ 0x32CE2C8
	0x032CE170 MOV W0, W31
	0x032CE174 CBZ X20, 0x32CE2D4
	0x032CE178 CBZ X19, 0x32CE2D4
	0x032CE17C ADRP X9, 0xE56000
	0x032CE180 LDR X9, [X9 + 0x278]
	0x032CE184 LDR X8, [X20]
	0x032CE188 LDR X10, [X9]
	0x032CE18C LDRB W9, [X8 + 0x130]
	0x032CE190 LDRB W11, [X10 + 0x130]
	0x032CE194 CMP W9, W11

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xE54000
	004 Move X0, [X0+3048]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xE58000
	009 Move X0, [X0+3160]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call SystemException..ctor, X0, X1
	015 Move X0, 0xE58000
	016 Move X0, [X0+3168]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

Method: System.Runtime.InteropServices.MarshalAsAttribute get_marshal_info()

Disassembly:
	0x032CE198 B.CC 0x32CE1E8

ISIL:
	001 Call 0x1C4D018
	002 Return X0

Method: System.Object[] GetPseudoCustomAttributes()

Disassembly:
	0x032CE19C LDR X12, [X8 + 0xC8]
	0x032CE1A0 ADD X12, X12, X11, 0x3, LSL
	0x032CE1A4 LDUR X12, [X12 - 0x8]
	0x032CE1A8 CMP X12, X10
	0x032CE1AC B.NE 0x32CE1E8
	0x032CE1B0 CBZ X20, 0x32CE1E8
	0x032CE1B4 LDR X12, [X19]
	0x032CE1B8 LDRB W13, [X12 + 0x130]
	0x032CE1BC CMP W13, W11
	0x032CE1C0 B.CC 0x32CE1E8
	0x032CE1C4 LDR X12, [X12 + 0xC8]
	0x032CE1C8 ADD X11, X12, X11, 0x3, LSL
	0x032CE1CC LDUR X11, [X11 - 0x8]
	0x032CE1D0 CMP X11, X10
	0x032CE1D4 B.NE 0x32CE1E8
	0x032CE1D8 CBZ X19, 0x32CE1E8
	0x032CE1DC CMP X20, X19
	0x032CE1E0 B.NE 0x32CE2AC
	0x032CE1E4 B 0x32CE2C8
	0x032CE1E8 ADRP X21, 0xE4F000
	0x032CE1EC LDR X21, [X21 + 0x978]
	0x032CE1F0 LDR X0, [X21]
	0x032CE1F4 LDRB W10, [X0 + 0x130]
	0x032CE1F8 CMP W9, W10
	0x032CE1FC B.CS 0x32CE208
	0x032CE200 MOV X20, X31
	0x032CE204 B 0x32CE21C
	0x032CE208 LDR X8, [X8 + 0xC8]
	0x032CE20C ADD X8, X8, X10, 0x3, LSL
	0x032CE210 LDUR X8, [X8 - 0x8]
	0x032CE214 CMP X8, X0
	0x032CE218 CSEL X20, X20, X31, EQ
	0x032CE21C LDR W8, [X0 + 0xE0]
	0x032CE220 CBNZ W8, 0x32CE228
	0x032CE224 BL 0x1C16DFC
	0x032CE228 MOV X0, X20
	0x032CE22C MOV X1, X31
	0x032CE230 BL 0x32CC854
	0x032CE234 TBZ X0, 0x0, 0x32CE2D0
	0x032CE238 LDR X8, [X19]
	0x032CE23C LDR X0, [X21]
	0x032CE240 LDRB W10, [X8 + 0x130]
	0x032CE244 LDRB W9, [X0 + 0x130]
	0x032CE248 CMP W10, W9
	0x032CE24C B.CS 0x32CE258
	0x032CE250 MOV X19, X31
	0x032CE254 B 0x32CE26C
	0x032CE258 LDR X8, [X8 + 0xC8]
	0x032CE25C ADD X8, X8, X9, 0x3, LSL
	0x032CE260 LDUR X8, [X8 - 0x8]
	0x032CE264 CMP X8, X0
	0x032CE268 CSEL X19, X19, X31, EQ
	0x032CE26C LDR W8, [X0 + 0xE0]
	0x032CE270 CBNZ W8, 0x32CE278
	0x032CE274 BL 0x1C16DFC
	0x032CE278 MOV X0, X19
	0x032CE27C MOV X1, X31
	0x032CE280 BL 0x32CC854
	0x032CE284 TBZ X0, 0x0, 0x32CE2D0
	0x032CE288 LDR X0, [X21]
	0x032CE28C LDR W8, [X0 + 0xE0]
	0x032CE290 CBNZ W8, 0x32CE298
	0x032CE294 BL 0x1C16DFC
	0x032CE298 CMP X20, X19
	0x032CE29C B.EQ 0x32CE2C8
	0x032CE2A0 MOV W0, W31
	0x032CE2A4 CBZ X20, 0x32CE2D4
	0x032CE2A8 CBZ X19, 0x32CE2D4
	0x032CE2AC LDR X8, [X20]
	0x032CE2B0 MOV X0, X20
	0x032CE2B4 MOV X1, X19
	0x032CE2B8 LDP X20, X19, [X31 + 0x10]
	0x032CE2BC LDP X3, X2, [X8 + 0x138]
	0x032CE2C0 LDP X30, X21, [X31], #0x20
	0x032CE2C4 BR X3
	0x032CE2C8 MOVZ W0, 0x1
	0x032CE2CC B 0x32CE2D4
	0x032CE2D0 MOV W0, W31
	0x032CE2D4 LDP X20, X19, [X31 + 0x10]
	0x032CE2D8 LDP X30, X21, [X31], #0x20
	0x032CE2DC RET
	0x032CE2E0 CMP X0, X1
	0x032CE2E4 B.EQ 0x32CE310
	0x032CE2E8 MOVZ W8, 0x1
	0x032CE2EC CBZ X0, 0x32CE314
	0x032CE2F0 CBZ X1, 0x32CE314
	0x032CE2F4 STR X30, [X31 - 0x10]!
	0x032CE2F8 LDR X8, [X0]
	0x032CE2FC LDP X9, X2, [X8 + 0x138]
	0x032CE300 BLR X9
	0x032CE304 EOR W8, W0, 0x1
	0x032CE308 LDR X30, [X31], #0x10
	0x032CE30C B 0x32CE314
	0x032CE310 MOV W8, W31
	0x032CE314 AND W0, W8, 0x1
	0x032CE318 RET
	0x032CE31C CMP X0, X1
	0x032CE320 B.EQ 0x32CE33C
	0x032CE324 MOV W8, W31
	0x032CE328 CBZ X0, 0x32CE340
	0x032CE32C CBZ X1, 0x32CE340
	0x032CE330 LDR X8, [X0]
	0x032CE334 LDP X3, X2, [X8 + 0x138]
	0x032CE338 BR X3
	0x032CE33C MOVZ W8, 0x1
	0x032CE340 MOV W0, W8
	0x032CE344 RET
	0x032CE348 MOVZ W0, 0x1
	0x032CE34C RET
	0x032CE350 STR X30, [X31 - 0x10]!
	0x032CE354 LDR X8, [X0]
	0x032CE358 LDR X9, [X8 + 0x258]
	0x032CE35C LDR X1, [X8 + 0x260]
	0x032CE360 BLR X9
	0x032CE364 UBFM W0, W0, 0xA, 0xA
	0x032CE368 LDR X30, [X31], #0x10
	0x032CE36C RET
	0x032CE370 STR X30, [X31 - 0x20]!
	0x032CE374 STP X20, X19, [X31 + 0x10]
	0x032CE378 ADRP X20, 0x110E000
	0x032CE37C LDRB W8, [X20 + 0x8EB]
	0x032CE380 MOV X19, X0
	0x032CE384 TBNZ X8, 0x0, 0x32CE39C
	0x032CE388 ADRP X0, 0xE4F000
	0x032CE38C LDR X0, [X0 + 0x978]
	0x032CE390 BL 0x1C16CF4
	0x032CE394 MOVZ W8, 0x1
	0x032CE398 STRB W8, [X20 + 0x8EB]
	0x032CE39C CBZ X19, 0x32CE404
	0x032CE3A0 ADRP X9, 0xE4F000
	0x032CE3A4 LDR X9, [X9 + 0x978]
	0x032CE3A8 LDR X8, [X19]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x110F000
	008 Move W8, [X19+2277]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xE58000
	015 Move X0, [X0+3176]
	016 Call 0x1C17CF4
	017 Move X0, 0xE58000
	018 Move X0, [X0+3184]
	019 Call 0x1C17CF4
	020 Move X0, 0xE26000
	021 Move X0, [X0+2512]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+2277], W8
	025 Move X8, [X20]
	026 Move X0, X20
	027 Move X9, [X8+584]
	028 Move X1, [X8+592]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move X8, [X20]
	031 Move W19, W0
	032 Move X0, X20
	033 Move X9, [X8+440]
	034 Move X1, [X8+448]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Compare X0, 0
	037 JumpIfEqual {155}
	038 Move X1, X31
	039 Move W19, W19
	040 ShiftRight W19, 7
	041 And W19, W19, 127
	042 Call Type.get_IsExplicitLayout, X0
	043 And W8, W0, 1
	044 Move X0, X20
	045 Add W21, W19, W8
	046 Call 0x1C4D018
	047 Move X19, X0
	048 Compare X0, 0
	049 JumpIfEqual {51}
	050 Add W21, W21, 1
	051 Compare W21, 0
	052 JumpIfEqual {146}
	053 Move X8, 0xE26000
	054 Move X8, [X8+2512]
	055 Move W1, W21
	056 Move X0, [X8]
	057 Call 0x1C17D6C
	058 Move X8, [X20]
	059 Move X21, X0
	060 Move X0, X20
	061 Move X9, [X8+584]
	062 Move X1, [X8+592]
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move TEMP, X0
	065 And TEMP, TEMP, 128
	066 Compare TEMP, 128
	067 JumpIfEqual {69}
	068 Move W23, W31
	069 Move X8, 0xE58000
	070 Move X8, [X8+3184]
	071 Move X0, [X8]
	072 Call 0x1C17F10
	073 Move X1, X31
	074 Move X22, X0
	075 Call NonSerializedAttribute..ctor, X0
	076 Compare X21, 0
	077 JumpIfEqual {155}
	078 Compare X22, 0
	079 JumpIfEqual {86}
	080 Move X8, [X21]
	081 Move X0, X22
	082 Move X1, [X8+64]
	083 Call 0x1C17E00
	084 Compare X0, 0
	085 JumpIfEqual {157}
	086 Move W8, [X21+24]
	087 Compare W8, 0
	088 JumpIfEqual {156}
	089 Move W23, 1
	090 Move [X21+32], X22
	091 Move X8, [X20]
	092 Move X0, X20
	093 Move X9, [X8+440]
	094 Move X1, [X8+448]
	095 NotImplemented "Instruction BLR not yet implemented."
	096 Compare X0, 0
	097 JumpIfEqual {155}
	098 Move X1, X31
	099 Call Type.get_IsExplicitLayout, X0
	100 Move TEMP, X0
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfNotEqual {132}
	104 Move X8, [X20]
	105 Move X0, X20
	106 Move X9, [X8+792]
	107 Move X1, [X8+800]
	108 NotImplemented "Instruction BLR not yet implemented."
	109 Move X8, 0xE58000
	110 Move X8, [X8+3176]
	111 Move W22, W0
	112 Move X8, [X8]
	113 Move X0, X8
	114 Call 0x1C17F10
	115 Move X1, X31
	116 Move X20, X0
	117 Call Attribute..ctor, X0
	118 Move [X20+16], W22
	119 Compare X21, 0
	120 JumpIfEqual {155}
	121 Move X8, [X21]
	122 Move X0, X20
	123 Move X1, [X8+64]
	124 Call 0x1C17E00
	125 Compare X0, 0
	126 JumpIfEqual {157}
	127 Move W8, [X21+24]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Add X8, X21, W23
	130 Add W23, W23, 1
	131 Move [X8+32], X20
	132 Compare X19, 0
	133 JumpIfEqual {147}
	134 Compare X21, 0
	135 JumpIfEqual {155}
	136 Move X8, [X21]
	137 Move X0, X19
	138 Move X1, [X8+64]
	139 Call 0x1C17E00
	140 Compare X0, 0
	141 JumpIfEqual {157}
	142 Move W8, [X21+24]
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Add X8, X21, W23
	145 Move [X8+32], X19
	146 Move X21, X31
	147 Move X0, X21
	148 Move X20, [X31+32]
	149 Move X19, [X31+40]
	150 Move X22, [X31+16]
	151 Move X21, [X31+24]
	152 Move X30, [X31+48]
	153 Move X23, [X31+56]
	154 Return X0
	155 Call 0x1C17F20
	156 Call 0x1C17F28
	157 Call 0x1C17F44
	158 Move X1, X31
	159 Call 0x1C17DEC

Method: System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData()

Disassembly:
	0x032CE3AC LDR X9, [X9]
	0x032CE3B0 LDRB W11, [X8 + 0x130]
	0x032CE3B4 LDRB W10, [X9 + 0x130]
	0x032CE3B8 CMP W11, W10
	0x032CE3BC B.CC 0x32CE404
	0x032CE3C0 LDR X11, [X8 + 0xC8]
	0x032CE3C4 ADD X10, X11, X10, 0x3, LSL
	0x032CE3C8 LDUR X10, [X10 - 0x8]
	0x032CE3CC CMP X10, X9
	0x032CE3D0 B.NE 0x32CE404
	0x032CE3D4 LDR X9, [X8 + 0x258]
	0x032CE3D8 LDR X1, [X8 + 0x260]
	0x032CE3DC MOV X0, X19
	0x032CE3E0 BLR X9
	0x032CE3E4 TBNZ X0, 0x4, 0x32CE404
	0x032CE3E8 LDR X8, [X19]
	0x032CE3EC MOV X0, X19
	0x032CE3F0 LDR X9, [X8 + 0x258]
	0x032CE3F4 LDR X1, [X8 + 0x260]
	0x032CE3F8 BLR X9
	0x032CE3FC UBFM W0, W0, 0xC, 0xC
	0x032CE400 B 0x32CE408
	0x032CE404 MOV W0, W31
	0x032CE408 LDP X20, X19, [X31 + 0x10]
	0x032CE40C LDR X30, [X31], #0x20
	0x032CE410 RET
	0x032CE414 STR X30, [X31 - 0x10]!
	0x032CE418 LDR X8, [X0]
	0x032CE41C LDR X9, [X8 + 0x258]
	0x032CE420 LDR X1, [X8 + 0x260]
	0x032CE424 BLR X9
	0x032CE428 UBFM W0, W0, 0x4, 0x4
	0x032CE42C LDR X30, [X31], #0x10
	0x032CE430 RET
	0x032CE434 STR X30, [X31 - 0x10]!
	0x032CE438 LDR X8, [X0]
	0x032CE43C LDR X9, [X8 + 0x258]
	0x032CE440 LDR X1, [X8 + 0x260]
	0x032CE444 BLR X9
	0x032CE448 UBFM W0, W0, 0x6, 0x6
	0x032CE44C LDR X30, [X31], #0x10
	0x032CE450 RET
	0x032CE454 STR X30, [X31 - 0x10]!
	0x032CE458 LDR X8, [X0]
	0x032CE45C LDR X9, [X8 + 0x258]
	0x032CE460 LDR X1, [X8 + 0x260]
	0x032CE464 BLR X9
	0x032CE468 AND W8, W0, 0x7
	0x032CE46C CMP W8, 0x6
	0x032CE470 CSET W0, EQ
	0x032CE474 LDR X30, [X31], #0x10
	0x032CE478 RET
	0x032CE47C MOV W0, W31
	0x032CE480 RET
	0x032CE484 MOV W0, W31
	0x032CE488 RET
	0x032CE48C STP X30, X19, [X31 - 0x10]!
	0x032CE490 ADRP X0, 0xE25000
	0x032CE494 LDR X0, [X0 + 0xB40]
	0x032CE498 BL 0x1C16D08
	0x032CE49C BL 0x1C16F10
	0x032CE4A0 MOV X19, X0
	0x032CE4A4 ADRP X0, 0xE57000
	0x032CE4A8 LDR X0, [X0 + 0xD28]
	0x032CE4AC BL 0x1C16D08
	0x032CE4B0 MOV X1, X0
	0x032CE4B4 MOV X0, X19
	0x032CE4B8 MOV X2, X31
	0x032CE4BC BL 0x3379A44
	0x032CE4C0 ADRP X0, 0xE57000
	0x032CE4C4 LDR X0, [X0 + 0xD30]
	0x032CE4C8 BL 0x1C16D08
	0x032CE4CC MOV X1, X0
	0x032CE4D0 MOV X0, X19
	0x032CE4D4 BL 0x1C16DEC
	0x032CE4D8 MOV W0, W31
	0x032CE4DC RET
	0x032CE4E0 LDR X8, [X0]
	0x032CE4E4 MOV X4, X2
	0x032CE4E8 MOV W2, W31
	0x032CE4EC MOV X3, X31
	0x032CE4F0 LDR X7, [X8 + 0x328]
	0x032CE4F4 LDR X6, [X8 + 0x330]
	0x032CE4F8 MOV X5, X31
	0x032CE4FC BR X7
	0x032CE500 STP X30, X19, [X31 - 0x10]!
	0x032CE504 MOV X0, X31
	0x032CE508 BL 0x3396C4C
	0x032CE50C MOV X19, X0
	0x032CE510 ADRP X0, 0xE57000
	0x032CE514 LDR X0, [X0 + 0xD38]
	0x032CE518 BL 0x1C16D08
	0x032CE51C MOV X1, X0
	0x032CE520 MOV X0, X19
	0x032CE524 BL 0x1C16DEC
	0x032CE528 CMP X0, X1
	0x032CE52C B.EQ 0x32CE558
	0x032CE530 MOVZ W8, 0x1
	0x032CE534 CBZ X0, 0x32CE55C
	0x032CE538 CBZ X1, 0x32CE55C
	0x032CE53C STR X30, [X31 - 0x10]!
	0x032CE540 LDR X8, [X0]
	0x032CE544 LDP X9, X2, [X8 + 0x138]
	0x032CE548 BLR X9
	0x032CE54C EOR W8, W0, 0x1
	0x032CE550 LDR X30, [X31], #0x10
	0x032CE554 B 0x32CE55C
	0x032CE558 MOV W8, W31
	0x032CE55C AND W0, W8, 0x1
	0x032CE560 RET
	0x032CE564 LDR X8, [X0]
	0x032CE568 LDR X2, [X8 + 0x248]
	0x032CE56C LDR X1, [X8 + 0x250]
	0x032CE570 BR X2
	0x032CE574 STR X30, [X31 - 0x10]!
	0x032CE578 LDR X8, [X0]
	0x032CE57C LDR X9, [X8 + 0x358]
	0x032CE580 LDR X1, [X8 + 0x360]
	0x032CE584 BLR X9
	0x032CE588 CBZ X0, 0x32CE598
	0x032CE58C LDR W0, [X0 + 0x18]
	0x032CE590 LDR X30, [X31], #0x10
	0x032CE594 RET
	0x032CE598 BL 0x1C16F20
	0x032CE59C STP X30, X23, [X31 - 0x30]!
	0x032CE5A0 STP X22, X21, [X31 + 0x10]
	0x032CE5A4 STP X20, X19, [X31 + 0x20]
	0x032CE5A8 ADRP X22, 0x110E000
	0x032CE5AC ADRP X21, 0xE25000
	0x032CE5B0 LDRB W8, [X22 + 0x8ED]
	0x032CE5B4 LDR X21, [X21 + 0x8F0]
	0x032CE5B8 MOV W19, W1
	0x032CE5BC MOV X20, X0
	0x032CE5C0 TBNZ X8, 0x0, 0x32CE5F0
	0x032CE5C4 ADRP X0, 0xE25000
	0x032CE5C8 LDR X0, [X0 + 0x8F0]
	0x032CE5CC BL 0x1C16CF4
	0x032CE5D0 ADRP X0, 0xE30000
	0x032CE5D4 LDR X0, [X0 + 0x310]
	0x032CE5D8 BL 0x1C16CF4
	0x032CE5DC ADRP X0, 0xE26000
	0x032CE5E0 LDR X0, [X0 + 0x608]
	0x032CE5E4 BL 0x1C16CF4
	0x032CE5E8 MOVZ W8, 0x1
	0x032CE5EC STRB W8, [X22 + 0x8ED]
	0x032CE5F0 LDR X8, [X20]
	0x032CE5F4 MOV X0, X20
	0x032CE5F8 LDP X9, X1, [X8 + 0x1A8]
	0x032CE5FC BLR X9
	0x032CE600 LDR X8, [X21]
	0x032CE604 MOV X22, X0
	0x032CE608 MOV X0, X8
	0x032CE60C BL 0x1C16F10
	0x032CE610 MOV X1, X22
	0x032CE614 MOV X2, X31
	0x032CE618 MOV X21, X0
	0x032CE61C BL 0x3231CF8
	0x032CE620 CBZ X21, 0x32CE6BC
	0x032CE624 ADRP X8, 0xE30000
	0x032CE628 LDR X8, [X8 + 0x310]
	0x032CE62C ADRP X23, 0xE26000
	0x032CE630 MOV X0, X21
	0x032CE634 MOV X2, X31
	0x032CE638 LDR X1, [X8]
	0x032CE63C LDR X23, [X23 + 0x608]
	0x032CE640 BL 0x32333E0
	0x032CE644 LDR X8, [X20]
	0x032CE648 MOV X0, X20
	0x032CE64C LDR X9, [X8 + 0x388]
	0x032CE650 LDR X1, [X8 + 0x390]
	0x032CE654 BLR X9
	0x032CE658 LDR X8, [X20]
	0x032CE65C MOV X22, X0
	0x032CE660 MOV X0, X20
	0x032CE664 LDR X9, [X8 + 0x278]
	0x032CE668 LDR X1, [X8 + 0x280]
	0x032CE66C BLR X9
	0x032CE670 MOV W1, W0
	0x032CE674 AND W2, W19, 0x1
	0x032CE678 MOV X0, X22
	0x032CE67C BL 0x32CE6C0
	0x032CE680 MOV X1, X0
	0x032CE684 MOV X0, X21
	0x032CE688 MOV X2, X31
	0x032CE68C BL 0x32333E0
	0x032CE690 LDR X1, [X23]
	0x032CE694 MOV X0, X21
	0x032CE698 MOV X2, X31
	0x032CE69C BL 0x32333E0
	0x032CE6A0 LDR X8, [X21]
	0x032CE6A4 MOV X0, X21
	0x032CE6A8 LDP X20, X19, [X31 + 0x20]
	0x032CE6AC LDP X22, X21, [X31 + 0x10]
	0x032CE6B0 LDP X2, X1, [X8 + 0x168]
	0x032CE6B4 LDP X30, X23, [X31], #0x30
	0x032CE6B8 BR X2
	0x032CE6BC BL 0x1C16F20
	0x032CE6C0 STP X29, X30, [X31 - 0x60]!
	0x032CE6C4 STP X28, X27, [X31 + 0x10]
	0x032CE6C8 STP X26, X25, [X31 + 0x20]
	0x032CE6CC STP X24, X23, [X31 + 0x30]
	0x032CE6D0 STP X22, X21, [X31 + 0x40]
	0x032CE6D4 STP X20, X19, [X31 + 0x50]
	0x032CE6D8 ADRP X22, 0x110E000
	0x032CE6DC ADRP X23, 0xE25000
	0x032CE6E0 LDRB W8, [X22 + 0x8F0]
	0x032CE6E4 LDR X23, [X23 + 0x8F0]
	0x032CE6E8 MOV W20, W2
	0x032CE6EC MOV W19, W1
	0x032CE6F0 MOV X21, X0
	0x032CE6F4 TBNZ X8, 0x0, 0x32CE748
	0x032CE6F8 ADRP X0, 0xE2E000
	0x032CE6FC LDR X0, [X0 + 0x8D8]
	0x032CE700 BL 0x1C16CF4
	0x032CE704 ADRP X0, 0xE25000
	0x032CE708 LDR X0, [X0 + 0x8F0]
	0x032CE70C BL 0x1C16CF4
	0x032CE710 ADRP X0, 0xE25000
	0x032CE714 LDR X0, [X0 + 0x838]
	0x032CE718 BL 0x1C16CF4
	0x032CE71C ADRP X0, 0xE57000
	0x032CE720 LDR X0, [X0 + 0xD40]
	0x032CE724 BL 0x1C16CF4
	0x032CE728 ADRP X0, 0xE25000
	0x032CE72C LDR X0, [X0 + 0x988]
	0x032CE730 BL 0x1C16CF4
	0x032CE734 ADRP X0, 0xE50000
	0x032CE738 LDR X0, [X0 + 0x5F8]
	0x032CE73C BL 0x1C16CF4
	0x032CE740 MOVZ W8, 0x1
	0x032CE744 STRB W8, [X22 + 0x8F0]
	0x032CE748 LDR X0, [X23]
	0x032CE74C BL 0x1C16F10
	0x032CE750 MOV X1, X31
	0x032CE754 MOV X22, X0
	0x032CE758 BL 0x3231AC4
	0x032CE75C CBZ X21, 0x32CE8B0
	0x032CE760 ADRP X9, 0xE25000
	0x032CE764 LDR W8, [X21 + 0x18]
	0x032CE768 LDR X9, [X9 + 0x988]
	0x032CE76C CMP W8, 0x1
	0x032CE770 LDR X1, [X9]
	0x032CE774 B.LT 0x32CE854
	0x032CE778 ADRP X26, 0xE25000
	0x032CE77C ADRP X27, 0xE2E000
	0x032CE780 ADRP X28, 0xE57000
	0x032CE784 LDR X26, [X26 + 0x838]
	0x032CE788 LDR X27, [X27 + 0x8D8]
	0x032CE78C LDR X28, [X28 + 0xD40]
	0x032CE790 MOV W25, W31
	0x032CE794 MOVZ W29, 0x26
	0x032CE798 CMP W25, W8
	0x032CE79C B.CS 0x32CE8B4
	0x032CE7A0 CBZ X22, 0x32CE8B0
	0x032CE7A4 ADD X8, X21, W25, 0x3, SXTW
	0x032CE7A8 LDR X24, [X8 + 0x20]
	0x032CE7AC MOV X0, X22
	0x032CE7B0 MOV X2, X31
	0x032CE7B4 BL 0x32333E0
	0x032CE7B8 CBZ X24, 0x32CE8B0
	0x032CE7BC LDR X8, [X24]
	0x032CE7C0 AND W1, W20, 0x1
	0x032CE7C4 MOV X0, X24
	0x032CE7C8 LDR X9, [X8 + 0x918]
	0x032CE7CC LDR X2, [X8 + 0x920]
	0x032CE7D0 BLR X9
	0x032CE7D4 MOV X23, X0
	0x032CE7D8 MOV X0, X24
	0x032CE7DC MOV X1, X31
	0x032CE7E0 BL 0x3396C08
	0x032CE7E4 TBZ X0, 0x0, 0x32CE830
	0x032CE7E8 TBNZ X20, 0x0, 0x32CE830
	0x032CE7EC LDR X0, [X27]
	0x032CE7F0 MOVZ W1, 0x1
	0x032CE7F4 BL 0x1C16D6C
	0x032CE7F8 CBZ X0, 0x32CE8B0
	0x032CE7FC LDR W8, [X0 + 0x18]
	0x032CE800 MOV X1, X0
	0x032CE804 CBZ W8, 0x32CE8B4
	0x032CE808 STRH W29, [X1 + 0x20]
	0x032CE80C CBZ X23, 0x32CE8B0
	0x032CE810 MOV X0, X23
	0x032CE814 MOV X2, X31
	0x032CE818 BL 0x322BC58
	0x032CE81C MOV X1, X0
	0x032CE820 MOV X0, X22
	0x032CE824 MOV X2, X31
	0x032CE828 BL 0x32333E0
	0x032CE82C LDR X23, [X28]
	0x032CE830 MOV X0, X22
	0x032CE834 MOV X1, X23
	0x032CE838 MOV X2, X31
	0x032CE83C BL 0x32333E0
	0x032CE840 LDR W8, [X21 + 0x18]
	0x032CE844 LDR X1, [X26]
	0x032CE848 ADD W25, W25, 0x1
	0x032CE84C CMP W25, W8
	0x032CE850 B.LT 0x32CE798
	0x032CE854 TBNZ X19, 0x1, 0x32CE860
	0x032CE858 CBNZ X22, 0x32CE888
	0x032CE85C B 0x32CE8B0
	0x032CE860 CBZ X22, 0x32CE8B0
	0x032CE864 MOV X0, X22
	0x032CE868 MOV X2, X31
	0x032CE86C BL 0x32333E0
	0x032CE870 ADRP X8, 0xE50000
	0x032CE874 LDR X8, [X8 + 0x5F8]
	0x032CE878 MOV X0, X22
	0x032CE87C MOV X2, X31
	0x032CE880 LDR X1, [X8]
	0x032CE884 BL 0x32333E0
	0x032CE888 LDR X8, [X22]
	0x032CE88C MOV X0, X22
	0x032CE890 LDP X20, X19, [X31 + 0x50]
	0x032CE894 LDP X22, X21, [X31 + 0x40]
	0x032CE898 LDP X2, X1, [X8 + 0x168]
	0x032CE89C LDP X24, X23, [X31 + 0x30]
	0x032CE8A0 LDP X26, X25, [X31 + 0x20]
	0x032CE8A4 LDP X28, X27, [X31 + 0x10]
	0x032CE8A8 LDP X29, X30, [X31], #0x60
	0x032CE8AC BR X2
	0x032CE8B0 BL 0x1C16F20
	0x032CE8B4 BL 0x1C16F28
	0x032CE8B8 STR X30, [X31 - 0x40]!
	0x032CE8BC STP X24, X23, [X31 + 0x10]
	0x032CE8C0 STP X22, X21, [X31 + 0x20]
	0x032CE8C4 STP X20, X19, [X31 + 0x30]
	0x032CE8C8 ADRP X20, 0x110E000
	0x032CE8CC LDRB W8, [X20 + 0x8EE]
	0x032CE8D0 MOV X19, X0
	0x032CE8D4 TBNZ X8, 0x0, 0x32CE8EC
	0x032CE8D8 ADRP X0, 0xE2D000
	0x032CE8DC LDR X0, [X0 + 0xC60]
	0x032CE8E0 BL 0x1C16CF4
	0x032CE8E4 MOVZ W8, 0x1
	0x032CE8E8 STRB W8, [X20 + 0x8EE]
	0x032CE8EC LDR X8, [X19]
	0x032CE8F0 MOV X0, X19
	0x032CE8F4 LDR X9, [X8 + 0x398]
	0x032CE8F8 LDR X1, [X8 + 0x3A0]
	0x032CE8FC BLR X9
	0x032CE900 CBZ X0, 0x32CE9AC
	0x032CE904 ADRP X8, 0xE2D000
	0x032CE908 LDR X8, [X8 + 0xC60]
	0x032CE90C MOV X19, X0
	0x032CE910 LDR W1, [X19 + 0x18]
	0x032CE914 LDR X0, [X8]
	0x032CE918 BL 0x1C16D6C
	0x032CE91C LDR W8, [X19 + 0x18]
	0x032CE920 MOV X20, X0
	0x032CE924 CMP W8, 0x1
	0x032CE928 B.LT 0x32CE994
	0x032CE92C MOV X22, X31
	0x032CE930 ADD X23, X20, 0x20
	0x032CE934 ADD X24, X19, 0x20

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X19, 0x110F000
	015 Move W8, [X19+2278]
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {62}
	021 Move X0, 0xE58000
	022 Move X0, [X0+3192]
	023 Call 0x1C17CF4
	024 Move X0, 0xE58000
	025 Move X0, [X0+3200]
	026 Call 0x1C17CF4
	027 Move X0, 0xE58000
	028 Move X0, [X0+3208]
	029 Call 0x1C17CF4
	030 Move X0, 0xE58000
	031 Move X0, [X0+3216]
	032 Call 0x1C17CF4
	033 Move X0, 0xE58000
	034 Move X0, [X0+3224]
	035 Call 0x1C17CF4
	036 Move X0, 0xE4D000
	037 Move X0, [X0+3456]
	038 Call 0x1C17CF4
	039 Move X0, 0xE26000
	040 Move X0, [X0+1880]
	041 Call 0x1C17CF4
	042 Move X0, 0xE58000
	043 Move X0, [X0+3232]
	044 Call 0x1C17CF4
	045 Move X0, 0xE58000
	046 Move X0, [X0+3240]
	047 Call 0x1C17CF4
	048 Move X0, 0xE2E000
	049 Move X0, [X0+3168]
	050 Call 0x1C17CF4
	051 Move X0, 0xE26000
	052 Move X0, [X0+1728]
	053 Call 0x1C17CF4
	054 Move X0, 0xE58000
	055 Move X0, [X0+3248]
	056 Call 0x1C17CF4
	057 Move X0, 0xE58000
	058 Move X0, [X0+3256]
	059 Call 0x1C17CF4
	060 Move W8, 1
	061 Move [X19+2278], W8
	062 Move X8, [X21]
	063 Move X0, X21
	064 Move X9, [X8+584]
	065 Move X1, [X8+592]
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Move X8, [X21]
	068 Move W19, W0
	069 Move X0, X21
	070 Move X9, [X8+440]
	071 Move X1, [X8+448]
	072 NotImplemented "Instruction BLR not yet implemented."
	073 Compare X0, 0
	074 JumpIfEqual {408}
	075 Move X1, X31
	076 Move W19, W19
	077 ShiftRight W19, 7
	078 And W19, W19, 127
	079 Call Type.get_IsExplicitLayout, X0
	080 And W8, W0, 1
	081 Move X0, X21
	082 Add W19, W19, W8
	083 Call 0x1C4D018
	084 Move X20, X0
	085 Compare X0, 0
	086 JumpIfEqual {88}
	087 Add W19, W19, 1
	088 Compare W19, 0
	089 JumpIfEqual {392}
	090 Move X8, 0xE58000
	091 Move X8, [X8+3192]
	092 Move X28, 0xE26000
	093 Move X23, 0xE58000
	094 Move W1, W19
	095 Move X0, [X8]
	096 Move X28, [X28+1728]
	097 Move X23, [X23+3200]
	098 Call 0x1C17D6C
	099 Move X8, [X21]
	100 Move X19, X0
	101 Move X0, X21
	102 Move X9, [X8+584]
	103 Move X1, [X8+592]
	104 NotImplemented "Instruction BLR not yet implemented."
	105 Move TEMP, X0
	106 And TEMP, TEMP, 128
	107 Compare TEMP, 128
	108 JumpIfEqual {110}
	109 Move W26, W31
	110 Move X8, 0xE58000
	111 Move X0, [X28]
	112 Move X8, [X8+3240]
	113 Move W9, [X0+224]
	114 Move X22, [X8]
	115 Compare W9, 0
	116 JumpIfNotEqual {118}
	117 Call 0x1C17DFC
	118 Move X0, X22
	119 Move X1, X31
	120 Call Type.GetTypeFromHandle, X0
	121 Compare X0, 0
	122 JumpIfEqual {408}
	123 Move X8, [X28]
	124 Move X2, X31
	125 Move X8, [X8+184]
	126 Move X1, [X8+16]
	127 Call Type.GetConstructor, X0, X1
	128 Move X8, [X23]
	129 Move X23, X0
	130 Move X0, X8
	131 Call 0x1C17F10
	132 Move X1, X23
	133 Move X2, X31
	134 Move X22, X0
	135 Call CustomAttributeData..ctor, X0, X1
	136 Compare X19, 0
	137 JumpIfEqual {408}
	138 Compare X22, 0
	139 JumpIfEqual {146}
	140 Move X8, [X19]
	141 Move X0, X22
	142 Move X1, [X8+64]
	143 Call 0x1C17E00
	144 Compare X0, 0
	145 JumpIfEqual {410}
	146 Move W8, [X19+24]
	147 Compare W8, 0
	148 JumpIfEqual {409}
	149 Move W26, 1
	150 Move [X19+32], X22
	151 Move X8, [X21]
	152 Move X0, X21
	153 Move X9, [X8+440]
	154 Move X1, [X8+448]
	155 NotImplemented "Instruction BLR not yet implemented."
	156 Compare X0, 0
	157 JumpIfEqual {408}
	158 Move X25, 0xE58000
	159 Move X29, 0xE2E000
	160 Move X27, 0xE58000
	161 Move X25, [X25+3208]
	162 Move X29, [X29+3168]
	163 Move X27, [X27+3216]
	164 Move X1, X31
	165 Call Type.get_IsExplicitLayout, X0
	166 Move TEMP, X0
	167 And TEMP, TEMP, 1
	168 Compare TEMP, 1
	169 JumpIfNotEqual {283}
	170 Move X0, [X25]
	171 Move W1, 1
	172 Call 0x1C17D6C
	173 Move X24, 0xE4D000
	174 Move X8, [X28]
	175 Move X24, [X24+3456]
	176 Move X22, X0
	177 Move W9, [X8+224]
	178 Move X23, [X24]
	179 Compare W9, 0
	180 JumpIfNotEqual {183}
	181 Move X0, X8
	182 Call 0x1C17DFC
	183 Move X0, X23
	184 Move X1, X31
	185 Call Type.GetTypeFromHandle, X0
	186 Move X8, [X21]
	187 Move X23, X0
	188 Move X0, X21
	189 Move X9, [X8+792]
	190 Move X1, [X8+800]
	191 NotImplemented "Instruction BLR not yet implemented."
	192 Move X8, 0xE26000
	193 Move X8, [X8+1880]
	194 Move [X31+28], W0
	195 Add X1, X31, 28
	196 Move X8, [X8]
	197 Move X0, X8
	198 Call 0x1C17E04
	199 Move X2, X0
	200 Add X0, X31, 0
	201 Move X1, X23
	202 Move [X31], X31
	203 Move [X31+8], X31
	204 Call CustomAttributeTypedArgument..ctor, X0, X1, X2
	205 Compare X22, 0
	206 JumpIfEqual {408}
	207 Move W8, [X22+24]
	208 Compare W8, 0
	209 JumpIfEqual {409}
	210 Move V0, [X31]
	211 Move X8, 0xE58000
	212 Move X1, X31
	213 Move [X22+2], V0
	214 Move X8, [X8+3224]
	215 Move X0, [X8]
	216 Call Type.GetTypeFromHandle, X0
	217 Move X8, [X29]
	218 Move X21, X0
	219 Move W1, 1
	220 Move X0, X8
	221 Call 0x1C17D6C
	222 Move X8, [X24]
	223 Move X23, X0
	224 Move X1, X31
	225 Move X0, X8
	226 Call Type.GetTypeFromHandle, X0
	227 Compare X23, 0
	228 JumpIfEqual {408}
	229 Move X24, X0
	230 Compare X0, 0
	231 JumpIfEqual {238}
	232 Move X8, [X23]
	233 Move X0, X24
	234 Move X1, [X8+64]
	235 Call 0x1C17E00
	236 Compare X0, 0
	237 JumpIfEqual {410}
	238 Move W8, [X23+24]
	239 Compare W8, 0
	240 JumpIfEqual {409}
	241 Move [X23+32], X24
	242 Compare X21, 0
	243 JumpIfEqual {408}
	244 Move X0, X21
	245 Move X1, X23
	246 Move X2, X31
	247 Call Type.GetConstructor, X0, X1
	248 Move X8, [X27]
	249 Move X23, X0
	250 Move W9, [X8+224]
	251 Compare W9, 0
	252 JumpIfNotEqual {256}
	253 Move X0, X8
	254 Call 0x1C17DFC
	255 Move X8, [X27]
	256 Move X8, [X8+184]
	257 Move X24, [X8]
	258 Move X8, 0xE58000
	259 Move X8, [X8+3200]
	260 Move X0, [X8]
	261 Call 0x1C17F10
	262 Move X1, X23
	263 Move X2, X22
	264 Move X3, X24
	265 Move X4, X31
	266 Move X21, X0
	267 Call CustomAttributeData..ctor, X0, X1, X2, X3
	268 Compare X19, 0
	269 JumpIfEqual {408}
	270 Compare X21, 0
	271 JumpIfEqual {278}
	272 Move X8, [X19]
	273 Move X0, X21
	274 Move X1, [X8+64]
	275 Call 0x1C17E00
	276 Compare X0, 0
	277 JumpIfEqual {410}
	278 Move W8, [X19+24]
	279 NotImplemented "Instruction CMP not yet implemented."
	280 Add X8, X19, W26
	281 Add W26, W26, 1
	282 Move [X8+32], X21
	283 Compare X20, 0
	284 JumpIfEqual {393}
	285 Move X0, [X25]
	286 Move X23, 0xE58000
	287 Move X24, 0xE58000
	288 Move X23, [X23+3248]
	289 Move X24, [X24+3256]
	290 Move W1, 1
	291 Call 0x1C17D6C
	292 Move X8, [X28]
	293 Move X22, [X23]
	294 Move X21, X0
	295 Move W9, [X8+224]
	296 Compare W9, 0
	297 JumpIfNotEqual {300}
	298 Move X0, X8
	299 Call 0x1C17DFC
	300 Move X0, X22
	301 Move X1, X31
	302 Call Type.GetTypeFromHandle, X0
	303 Move X22, X0
	304 Move W8, [X20+48]
	305 Move X0, [X24]
	306 Add X1, X31, 28
	307 Move [X31+28], W8
	308 Call 0x1C17E04
	309 Move X2, X0
	310 Add X0, X31, 0
	311 Move X1, X22
	312 Move [X31], X31
	313 Move [X31+8], X31
	314 Call CustomAttributeTypedArgument..ctor, X0, X1, X2
	315 Compare X21, 0
	316 JumpIfEqual {408}
	317 Move W8, [X21+24]
	318 Compare W8, 0
	319 JumpIfEqual {409}
	320 Move V0, [X31]
	321 Move X8, 0xE58000
	322 Move X8, [X8+3232]
	323 Move X1, X31
	324 Move [X21+2], V0
	325 Move X0, [X8]
	326 Call Type.GetTypeFromHandle, X0
	327 Move X8, [X29]
	328 Move X20, X0
	329 Move W1, 1
	330 Move X0, X8
	331 Call 0x1C17D6C
	332 Move X8, [X23]
	333 Move X22, X0
	334 Move X1, X31
	335 Move X0, X8
	336 Call Type.GetTypeFromHandle, X0
	337 Compare X22, 0
	338 JumpIfEqual {408}
	339 Move X23, X0
	340 Compare X0, 0
	341 JumpIfEqual {348}
	342 Move X8, [X22]
	343 Move X0, X23
	344 Move X1, [X8+64]
	345 Call 0x1C17E00
	346 Compare X0, 0
	347 JumpIfEqual {410}
	348 Move W8, [X22+24]
	349 Compare W8, 0
	350 JumpIfEqual {409}
	351 Move [X22+32], X23
	352 Compare X20, 0
	353 JumpIfEqual {408}
	354 Move X0, X20
	355 Move X1, X22
	356 Move X2, X31
	357 Call Type.GetConstructor, X0, X1
	358 Move X8, [X27]
	359 Move X22, X0
	360 Move W9, [X8+224]
	361 Compare W9, 0
	362 JumpIfNotEqual {366}
	363 Move X0, X8
	364 Call 0x1C17DFC
	365 Move X8, [X27]
	366 Move X8, [X8+184]
	367 Move X23, [X8]
	368 Move X8, 0xE58000
	369 Move X8, [X8+3200]
	370 Move X0, [X8]
	371 Call 0x1C17F10
	372 Move X1, X22
	373 Move X2, X21
	374 Move X3, X23
	375 Move X4, X31
	376 Move X20, X0
	377 Call CustomAttributeData..ctor, X0, X1, X2, X3
	378 Compare X19, 0
	379 JumpIfEqual {408}
	380 Compare X20, 0
	381 JumpIfEqual {388}
	382 Move X8, [X19]
	383 Move X0, X20
	384 Move X1, [X8+64]
	385 Call 0x1C17E00
	386 Compare X0, 0
	387 JumpIfEqual {410}
	388 Move W8, [X19+24]
	389 NotImplemented "Instruction CMP not yet implemented."
	390 Add X8, X19, W26
	391 Move [X8+32], X20
	392 Move X19, X31
	393 Move X0, X19
	394 Move X20, [X31+112]
	395 Move X19, [X31+120]
	396 Move X22, [X31+96]
	397 Move X21, [X31+104]
	398 Move X24, [X31+80]
	399 Move X23, [X31+88]
	400 Move X26, [X31+64]
	401 Move X25, [X31+72]
	402 Move X28, [X31+48]
	403 Move X27, [X31+56]
	404 Move X29, [X31+32]
	405 Move X30, [X31+40]
	406 Add X31, X31, 128
	407 Return X0
	408 Call 0x1C17F20
	409 Call 0x1C17F28
	410 Call 0x1C17F44
	411 Move X1, X31
	412 Call 0x1C17DEC

