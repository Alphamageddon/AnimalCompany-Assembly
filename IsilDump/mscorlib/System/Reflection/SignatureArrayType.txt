Type: System.Reflection.SignatureArrayType

Method: System.Void .ctor(System.Reflection.SignatureType elementType, System.Int32 rank, System.Boolean isMultiDim)

Disassembly:
	0x032D0FC4 MOV X0, X19
	0x032D0FC8 BL 0x1C16DEC
	0x032D0FCC STP X30, X19, [X31 - 0x10]!
	0x032D0FD0 ADRP X0, 0xE23000
	0x032D0FD4 LDR X0, [X0 + 0xB40]
	0x032D0FD8 BL 0x1C16D08
	0x032D0FDC BL 0x1C16F10
	0x032D0FE0 MOV X19, X0
	0x032D0FE4 ADRP X0, 0xE55000
	0x032D0FE8 LDR X0, [X0 + 0xF18]
	0x032D0FEC BL 0x1C16D08
	0x032D0FF0 MOV X1, X0
	0x032D0FF4 MOV X0, X19
	0x032D0FF8 MOV X2, X31
	0x032D0FFC BL 0x3379A44

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W19, W2
	007 Move X20, X1
	008 Move X21, X0
	009 And W22, W3, 1
	010 Call SignatureType..ctor, X0
	011 Move [X21+24], X20
	012 Move [X21+32], W19
	013 Move [X21+36], W22
	014 Move X20, [X31+32]
	015 Move X19, [X31+40]
	016 Move X22, [X31+16]
	017 Move X21, [X31+24]
	018 Move X30, [X31+48]
	019 Return 

Method: System.Boolean IsArrayImpl()

Disassembly:
	0x032D1024 BL 0x1C16D08
	0x032D1028 BL 0x1C16F10

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Boolean IsByRefImpl()

Disassembly:
	0x032D102C MOV X19, X0
	0x032D1030 ADRP X0, 0xE54000

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Boolean IsPointerImpl()

Disassembly:
	0x032D1034 LDR X0, [X0 + 0xF18]
	0x032D1038 BL 0x1C16D08

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Boolean get_IsSZArray()

Disassembly:
	0x032D103C MOV X1, X0
	0x032D1040 MOV X0, X19
	0x032D1044 MOV X2, X31
	0x032D1048 BL 0x3379A44

ISIL:
	001 Move W8, [X0+36]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_IsVariableBoundArray()

Disassembly:
	0x032D104C ADRP X0, 0xE54000
	0x032D1050 LDR X0, [X0 + 0xF70]

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Int32 GetArrayRank()

Disassembly:
	0x032D1054 BL 0x1C16D08
	0x032D1058 MOV X1, X0

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.String get_Suffix()

Disassembly:
	0x032D105C MOV X0, X19
	0x032D1060 BL 0x1C16DEC
	0x032D1064 STP X30, X19, [X31 - 0x10]!
	0x032D1068 ADRP X0, 0xE22000
	0x032D106C LDR X0, [X0 + 0xB40]
	0x032D1070 BL 0x1C16D08
	0x032D1074 BL 0x1C16F10
	0x032D1078 MOV X19, X0
	0x032D107C ADRP X0, 0xE54000
	0x032D1080 LDR X0, [X0 + 0xF18]
	0x032D1084 BL 0x1C16D08
	0x032D1088 MOV X1, X0
	0x032D108C MOV X0, X19
	0x032D1090 MOV X2, X31
	0x032D1094 BL 0x3379A44
	0x032D1098 ADRP X0, 0xE54000
	0x032D109C LDR X0, [X0 + 0xF78]
	0x032D10A0 BL 0x1C16D08
	0x032D10A4 MOV X1, X0
	0x032D10A8 MOV X0, X19
	0x032D10AC BL 0x1C16DEC
	0x032D10B0 STP X30, X19, [X31 - 0x10]!
	0x032D10B4 ADRP X0, 0xE22000
	0x032D10B8 LDR X0, [X0 + 0xB40]
	0x032D10BC BL 0x1C16D08
	0x032D10C0 BL 0x1C16F10
	0x032D10C4 MOV X19, X0
	0x032D10C8 ADRP X0, 0xE54000
	0x032D10CC LDR X0, [X0 + 0xF18]
	0x032D10D0 BL 0x1C16D08
	0x032D10D4 MOV X1, X0
	0x032D10D8 MOV X0, X19
	0x032D10DC MOV X2, X31
	0x032D10E0 BL 0x3379A44
	0x032D10E4 ADRP X0, 0xE54000
	0x032D10E8 LDR X0, [X0 + 0xF80]
	0x032D10EC BL 0x1C16D08
	0x032D10F0 MOV X1, X0
	0x032D10F4 MOV X0, X19
	0x032D10F8 BL 0x1C16DEC
	0x032D10FC STP X30, X19, [X31 - 0x10]!
	0x032D1100 ADRP X0, 0xE22000
	0x032D1104 LDR X0, [X0 + 0xB40]
	0x032D1108 BL 0x1C16D08
	0x032D110C BL 0x1C16F10
	0x032D1110 MOV X19, X0
	0x032D1114 ADRP X0, 0xE54000
	0x032D1118 LDR X0, [X0 + 0xF18]
	0x032D111C BL 0x1C16D08
	0x032D1120 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x110C000
	005 Move W8, [X20+2302]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {25}
	011 Move X0, 0xE55000
	012 Move X0, [X0+3720]
	013 Call 0x1C17CF4
	014 Move X0, 0xE54000
	015 Move X0, [X0+3216]
	016 Call 0x1C17CF4
	017 Move X0, 0xE23000
	018 Move X0, [X0+3784]
	019 Call 0x1C17CF4
	020 Move X0, 0xE23000
	021 Move X0, [X0+2120]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2302], W8
	025 Move W8, [X19+36]
	026 Compare W8, 0
	027 JumpIfEqual {32}
	028 Move W8, [X19+32]
	029 Subtract W2, W8, 1
	030 Move X8, 0xE55000
	031 Move X8, [X8+3720]
	032 Move X8, 0xE54000
	033 Move X8, [X8+3216]
	034 Move X0, [X8]
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return X0
	039 Move W1, 44
	040 Move X0, X31
	041 Move X3, X31
	042 Call String.CreateString, X0, X1, X2
	043 Move X8, 0xE23000
	044 Move X8, [X8+3784]
	045 Move X9, 0xE23000
	046 Move X9, [X9+2120]
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X8, [X8]
	050 Move X1, X0
	051 Move X2, [X9]
	052 Move X3, X31
	053 Move X0, X8
	054 Move X30, [X31+32]
	055 Call String.Concat, X0, X1, X2
	056 Return X0

